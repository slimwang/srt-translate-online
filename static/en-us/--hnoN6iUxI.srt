1
00:00:00,080 --> 00:00:03,880
Let's look at the solution for our BTB quiz. The question was,

2
00:00:03,880 --> 00:00:08,680
which BTB entry is used for a particular PC. It might seem

3
00:00:08,680 --> 00:00:13,830
easy because we need 10 bits to index into this BTB, so we will just take

4
00:00:13,830 --> 00:00:18,990
the least significant 10 bits of this PC. And index into the BTB with that.

5
00:00:18,990 --> 00:00:25,290
However, note that instructions are fixed size four bytes, and were the line,

6
00:00:25,290 --> 00:00:30,380
which means that not all addresses are possible for the program counter.

7
00:00:30,380 --> 00:00:35,370
If you now look at what would happen if we used the least significant 10-bits to

8
00:00:35,370 --> 00:00:41,590
index into the BTB, we would see the the entry number zero would be used.

9
00:00:41,590 --> 00:00:47,710
An instruction can have the least significant 10 bits be all zero. Entry number

10
00:00:47,710 --> 00:00:54,220
one, however, requires the least significant 10 bits to be 000001 and

11
00:00:54,220 --> 00:01:00,760
that entry cannot be used because the instructions are word-aligned. As we said,

12
00:01:00,760 --> 00:01:06,060
addresses such as all zeros and then just one are not possible. Basically,

13
00:01:06,060 --> 00:01:10,250
all addresses actually need to be not only even. But also divisible by four.

14
00:01:10,250 --> 00:01:14,510
So if you take the lower most bits that means that the only

15
00:01:14,510 --> 00:01:19,340
possible instruction addresses are of the form something something something and

16
00:01:19,340 --> 00:01:22,140
then the least significant two bits say zero.

17
00:01:22,140 --> 00:01:26,490
That means that we are really using only every fourth entry in our BTB.

18
00:01:26,490 --> 00:01:32,360
Pretty much of the 1024 entry BTB we are really using only 256 entries

19
00:01:32,360 --> 00:01:37,260
which is a huge waste. So in this case what should happen is we should not use

20
00:01:37,260 --> 00:01:42,730
the least significant ten bits, and instead we use these ten bits so

21
00:01:42,730 --> 00:01:47,990
that the least-significant bits that can be different among instructions.

22
00:01:47,990 --> 00:01:52,180
Basically these bits are always zero so they're just going to waste entries.

23
00:01:52,180 --> 00:01:56,280
We need to take the least significant ten bits that are still different among

24
00:01:56,280 --> 00:02:04,082
different instructions. So in this case our instruction has bits C is 1100.

25
00:02:04,082 --> 00:02:10,840
Zero is 0000. B is 1011. We're going

26
00:02:10,840 --> 00:02:16,130
to ignore these two bits. And take the next one, two, three, four,

27
00:02:16,130 --> 00:02:22,530
five, six, seven, eight, nine, ten bits. So this is the index into our BTB.

28
00:02:22,530 --> 00:02:26,370
And now let's convert that to hex, this will be the first hex digit so,

29
00:02:26,370 --> 00:02:31,500
it will be three. This will be the next hex digit, so it will be c.

30
00:02:31,500 --> 00:02:37,059
And this will be two. So we are talking about the entry number 2c3.
