1
00:00:00,080 --> 00:00:03,014
Here's the entire solution. The main elements here are figuring out how to get

2
00:00:03,014 --> 00:00:07,232
the elapsed time and how to offset the texture itself. About the only tricky

3
00:00:07,232 --> 00:00:10,048
bit is the realization that if you want the texture to move downwards, you add

4
00:00:10,048 --> 00:00:14,478
the time to the offset. This has the effect of moving the texture's frame of

5
00:00:14,478 --> 00:00:18,520
reference up, which in turn moves the display of the texture down. My solution

6
00:00:18,520 --> 00:00:21,460
is actually offsetting the v value a potentially huge amount as the time

7
00:00:21,460 --> 00:00:26,235
increases. But it doesn't matter since the texture repeats. A less sufficient

8
00:00:26,235 --> 00:00:30,100
solution is this. It's best to avoid creating new objects every frame, such as

9
00:00:30,100 --> 00:00:33,898
this vector. Eventually, javascript has to perform garbage collection, which

10
00:00:33,898 --> 00:00:37,320
can cause your animations to hesitate at intervals. Once I had the basic

11
00:00:37,320 --> 00:00:41,550
solution, I started to play with the horizontal offset too. Giving this offset

12
00:00:41,550 --> 00:00:45,170
a slight wobble with a sine wave made it a little more appealing. I also

13
00:00:45,170 --> 00:00:48,160
changed the repetition length along the vertical axis by dividing the repeat

14
00:00:48,160 --> 00:00:51,950
factor by 3. This gives a more stream-like appearance to the water. It looks a

15
00:00:51,950 --> 00:00:55,335
bit like a rushing river or waterfall now. Look in the additional course

16
00:00:55,335 --> 00:00:57,990
materials for my snippet of code and try it out yourself, then try other

17
00:00:57,990 --> 00:01:00,619
functions. It's pretty addictive.
