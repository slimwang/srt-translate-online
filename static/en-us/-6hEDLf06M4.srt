1
00:00:00,570 --> 00:00:02,460
Okay, so that is what a RAT looks like.

2
00:00:02,460 --> 00:00:07,510
It's a table where, for each architectural register, for example, for R0,

3
00:00:07,510 --> 00:00:13,500
it will say where we keep R0 currently. Then for R1, there is another entry and

4
00:00:13,500 --> 00:00:18,610
so on. So this table really just stores where things are. This is just for

5
00:00:18,610 --> 00:00:21,730
our convenience. You know, we kind of numbered the entries, but

6
00:00:21,730 --> 00:00:23,570
basically doesn't need to store this zero here,

7
00:00:23,570 --> 00:00:27,790
it's simply that the entry number 0 is for our 0, the entry number 1 is for

8
00:00:27,790 --> 00:00:32,509
our 1, etc. So now we will have some instructions. Let's first look at

9
00:00:32,509 --> 00:00:35,770
this first instruction. So let's say the processor is fetching this instruction.

10
00:00:35,770 --> 00:00:40,960
What it does is for all the registers that this instruction needs to read,

11
00:00:40,960 --> 00:00:44,678
it looks in the RAT where those registers can currently be found.

12
00:00:44,678 --> 00:00:48,870
Let's say that for R2, this is just saying P2 for now.

13
00:00:48,870 --> 00:00:52,150
So this is physical register 2, which correspond to R2 initially.

14
00:00:52,150 --> 00:00:57,960
And let's say that it's P3 here. In fact, let's say all them are just like this.

15
00:00:57,960 --> 00:01:03,120
So what the processor does is it renames this instruction, so it fetches it,

16
00:01:03,120 --> 00:01:07,080
decodes it, and then rewrites it so that the actual operation that will be

17
00:01:07,080 --> 00:01:12,000
done is going to be on physical register speed two and P3.

18
00:01:12,000 --> 00:01:16,120
And now the question is where are we going to put our result? Well,

19
00:01:16,120 --> 00:01:21,310
we're going to put our result in a new place for R1, so not in P1.

20
00:01:21,310 --> 00:01:26,870
So we will change the RAT to put the result in some P17 or

21
00:01:26,870 --> 00:01:32,470
whatever, okay? So now we're going to say that this is, this all goes to P17,

22
00:01:32,470 --> 00:01:37,460
and then we're going to use P23 for the inputs. Let's say that

23
00:01:37,460 --> 00:01:41,750
the next instruction is subtract R1 and R5 and put the result in R4.

24
00:01:41,750 --> 00:01:46,000
What the processor again will do is, so it always follows the same procedure.

25
00:01:46,000 --> 00:01:51,210
Look at the RAT for R1 and R5 to see where those values currently are, and

26
00:01:51,210 --> 00:01:55,280
then rename them. So we're going to look at R1, and it says P17.

27
00:01:56,290 --> 00:02:01,020
So this subtract is renamed into read P17, and P5, and

28
00:02:02,210 --> 00:02:06,920
put the result into a new place for R4. So

29
00:02:06,920 --> 00:02:12,210
we're going to change the RAT from now on, to put the result in, let's say, P18.

30
00:02:12,210 --> 00:02:16,230
Okay so, I'll evaluate three more instructions and now we can rename them too.

31
00:02:16,230 --> 00:02:21,780
So this XOR will be renamed into an XOR of R7 and R8. Where are they?

32
00:02:21,780 --> 00:02:25,670
Well, let's say they're in P7 and P8. And then we're going to write to R6.

33
00:02:27,060 --> 00:02:31,719
We're not going to write to P5. That's, where the previous value of, R6 is.

34
00:02:31,719 --> 00:02:37,250
We're going to write it to a new register P19. Then we're going to take this

35
00:02:37,250 --> 00:02:41,140
multiply and remember you need to update the RAT every time you produce a new

36
00:02:41,140 --> 00:02:45,320
value, because that's where subsequent instructions will find the value for

37
00:02:45,320 --> 00:02:50,910
that register. So we're going to, again, R8 and R9, still no change. So

38
00:02:50,910 --> 00:02:56,410
they're going to be P8 and P9. The new value for R5 is going to go to P20.

39
00:02:56,410 --> 00:03:01,460
And then we have this ADD R8 and R9 are still in P8 and P9.

40
00:03:01,460 --> 00:03:06,670
The new value for R4 is now going to be P21. Now,

41
00:03:06,670 --> 00:03:12,060
this is an already renamed value, so we're going to rename it again and say P21.

42
00:03:12,060 --> 00:03:17,430
Later on, if there is an instruction that uses R4, so something something R4,

43
00:03:17,430 --> 00:03:23,770
it's going to be renamed into whatever, P21. So the trick here is that,

44
00:03:23,770 --> 00:03:28,080
we have seen that this instruction writes to R4, and this one also writes to R4.

45
00:03:28,080 --> 00:03:31,870
So there is a register name dependence between these two because they're both

46
00:03:31,870 --> 00:03:35,933
trying to write to R4, but when we rename them this way, the dependency's gone,

47
00:03:35,933 --> 00:03:41,534
because this is producing P18, this is producing P21. Instructions among these

48
00:03:41,534 --> 00:03:45,345
that need to write the value, so basically, if something here was reading R4,

49
00:03:45,345 --> 00:03:48,259
it would get the value P18 instead because it's been, it,

50
00:03:48,259 --> 00:03:52,750
it would be renamed to read P18. Anything that follows this instruction,

51
00:03:52,750 --> 00:03:56,890
that wants to read R4 would be renamed so that it reads the P21. So

52
00:03:56,890 --> 00:04:02,460
simply, the use of R4 as a name for the value produced by this instruction and

53
00:04:02,460 --> 00:04:05,790
also for the value that's produced by this instruction is what was causing, for

54
00:04:05,790 --> 00:04:09,820
example, the write after write dependence. We eliminated dependence because here

55
00:04:09,820 --> 00:04:13,570
the name will be different. This value is going to be named P18.

56
00:04:13,570 --> 00:04:17,290
This one will be P21. There is no more dependence.
