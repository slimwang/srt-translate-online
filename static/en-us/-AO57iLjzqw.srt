1
00:00:00,830 --> 00:00:02,320
All app is almost complete.

2
00:00:02,320 --> 00:00:06,130
As a last feature, let's give our users
a place to record the menu items they've

3
00:00:06,130 --> 00:00:07,675
selected for a specific day.

4
00:00:08,790 --> 00:00:10,440
Here's our app in its current form.

5
00:00:10,440 --> 00:00:14,420
It displays menu items with the title,
image and details link.

6
00:00:15,530 --> 00:00:18,790
We want to add in order tracker that
will track what menu items have been

7
00:00:18,790 --> 00:00:21,880
picked for a specific day and meal.

8
00:00:21,880 --> 00:00:25,740
To keep that modular we will create
this new feature as a component.

9
00:00:25,740 --> 00:00:28,728
We also need a way to let users
choose the item and the meal.

10
00:00:28,728 --> 00:00:32,420
So let's add a drop down with
options for breakfast, lunch, and

11
00:00:32,420 --> 00:00:33,970
dinner and a choose button.

12
00:00:35,250 --> 00:00:37,430
When we create the order
tracker component,

13
00:00:37,430 --> 00:00:41,380
we'll have HTML that will display
the selected menu item, for

14
00:00:41,380 --> 00:00:46,250
a meal but how do we or how does
Ember keep track of this information?

15
00:00:46,250 --> 00:00:49,640
We need some data structure that
will keep the two of these in sync.

16
00:00:49,640 --> 00:00:51,880
This is what a service is for.

17
00:00:51,880 --> 00:00:54,670
An Ember service is an object that
can be used by different parts of

18
00:00:54,670 --> 00:00:56,190
an application.

19
00:00:56,190 --> 00:00:59,320
If Monday is the active day,
then picking strawberry putting for

20
00:00:59,320 --> 00:01:01,610
lunch will update the service.

21
00:01:01,610 --> 00:01:04,550
The order tracker is consuming
the service and will see this change and

22
00:01:04,550 --> 00:01:06,050
update itself.

23
00:01:06,050 --> 00:01:08,910
So this order management
tracking feature is what we want.

24
00:01:08,910 --> 00:01:09,410
Let's build it.
