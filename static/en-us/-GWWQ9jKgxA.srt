1
00:00:00,150 --> 00:00:01,690
Cameron, why don't you try drawing the

2
00:00:01,690 --> 00:00:04,450
critical rendering path diagram for this example?

3
00:00:04,450 --> 00:00:06,870
>> Sure. Let's see. First things first. We

4
00:00:06,870 --> 00:00:09,300
request this HTML. Then we start to build the

5
00:00:09,300 --> 00:00:11,970
DOM and come across this CSS file, which of

6
00:00:11,970 --> 00:00:14,290
course we have to request. We continue to build

7
00:00:14,290 --> 00:00:17,130
the DOM and then immediately encounter app.js, which

8
00:00:17,130 --> 00:00:19,830
is parser blocking. So we halt construction of the

9
00:00:19,830 --> 00:00:22,710
DOM, request, and wait for the file. When we

10
00:00:22,710 --> 00:00:25,670
finally get the CSS and have built the CSSOM,

11
00:00:25,670 --> 00:00:29,580
we can run app.js and then continue to build the DOM. And then we hit

12
00:00:29,580 --> 00:00:32,360
the next script, timing.js, so we block

13
00:00:32,360 --> 00:00:34,890
parsing on the download. Does that sound right?

14
00:00:34,890 --> 00:00:38,860
>> Yep, that's right. However, this could take quite a while. First

15
00:00:38,860 --> 00:00:42,460
we block on app.js and wait for it to arrive. Then on

16
00:00:42,460 --> 00:00:47,030
timing.js, and wait for that to arrive. To optimize this particular case,

17
00:00:47,030 --> 00:00:50,920
the browser has a special process called a preload scanner, which peaks

18
00:00:50,920 --> 00:00:52,880
ahead in the document, and tries to

19
00:00:52,880 --> 00:00:56,270
discover critical CSS and JavaScript files, like timing.js.

20
00:00:56,270 --> 00:00:59,270
>> Well that's clever, so even though the parser is

21
00:00:59,270 --> 00:01:01,850
blocked, we can discover timing.js

22
00:01:01,850 --> 00:01:04,080
and initiate downloads for critical resources?

23
00:01:04,080 --> 00:01:06,822
>> Yeah, exactly, so instead of waiting to build

24
00:01:06,822 --> 00:01:10,295
the CSS object model, and run app.js before requesting.

25
00:01:10,295 --> 00:01:15,960
>> timing.js. The preload scanner finds timing.js and requests it while the

26
00:01:15,960 --> 00:01:17,250
parser is blocked.

27
00:01:17,250 --> 00:01:19,510
>> Cool. Well, that's pretty interesting. Where

28
00:01:19,510 --> 00:01:21,640
can I learn more about the preload scanner?

29
00:01:21,640 --> 00:01:24,490
>> Check out the instructor notes. You'll find a couple of good resources

30
00:01:24,490 --> 00:01:28,730
there that will help explain why the preload scanner exists and how it operates.
