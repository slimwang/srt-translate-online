1
00:00:01,110 --> 00:00:03,870
So working with native
elements is great for

2
00:00:03,870 --> 00:00:06,800
focus behavior,
because they're automatically inserted

3
00:00:06,800 --> 00:00:10,420
into the tab order based on
their position in the DOM.

4
00:00:10,420 --> 00:00:12,800
To give you an example I've
written a little bit of HTML here.

5
00:00:12,800 --> 00:00:15,010
I've got three button elements and

6
00:00:15,010 --> 00:00:17,100
then you can see the output
over here on the right.

7
00:00:17,100 --> 00:00:21,030
So there's three button elements
rendering inside of my browser.

8
00:00:21,030 --> 00:00:26,210
Now because the tab order corresponds
to the DOM order, when I go and

9
00:00:26,210 --> 00:00:29,530
press the tab key you'll see
that the first button element

10
00:00:29,530 --> 00:00:32,060
gets the focus indicator around it.

11
00:00:32,060 --> 00:00:36,740
And as I keep pressing tab, you'll see
the next item in the DOM order gets

12
00:00:36,740 --> 00:00:43,210
focused and tab again, now the last
item in the DOM order is focused.

13
00:00:43,210 --> 00:00:45,850
Now it's important note that
using something like CSS,

14
00:00:45,850 --> 00:00:50,210
it's possible to have things
appear in one order on screen, but

15
00:00:50,210 --> 00:00:52,930
actually exist in a different
order over in the DOM.

16
00:00:52,930 --> 00:00:56,520
To give you an example of that,
what I've done now is I've just

17
00:00:56,520 --> 00:00:59,890
added this inline style to
my first button element and

18
00:00:59,890 --> 00:01:01,650
I'm telling it that I want
to float to the right.

19
00:01:01,650 --> 00:01:05,670
Now what this is going to do is it's
going to visually change the ordering of

20
00:01:05,670 --> 00:01:10,840
these buttons here such that our
first DOM element is now appearing

21
00:01:10,840 --> 00:01:12,530
last on screen visually.

22
00:01:13,970 --> 00:01:20,330
So even though the visual order has
changed, the DOM order remains the same.

23
00:01:20,330 --> 00:01:22,610
Let's see how that effects tabbing.

24
00:01:22,610 --> 00:01:27,790
When I press the tab key, the first
DOM element is still focused, but

25
00:01:27,790 --> 00:01:32,210
now visually it's the last element in
this group which is kind of weird.

26
00:01:32,210 --> 00:01:36,280
If I press tab again,
now we see that the second DOM element,

27
00:01:36,280 --> 00:01:39,380
which is the first visual
element becomes focused.

28
00:01:39,380 --> 00:01:42,770
And pressing tab again, I've got this
middle element now being focused,

29
00:01:42,770 --> 00:01:44,940
even though that's the last DOM item.

30
00:01:45,970 --> 00:01:50,720
So the moral of the story is, be careful
when you're using something like CSS to

31
00:01:50,720 --> 00:01:54,260
visually change the position
of your elements on screen.

32
00:01:54,260 --> 00:01:58,370
This can cause the tab order to
jump around seemingly at random and

33
00:01:58,370 --> 00:02:03,130
for users relying on a keyboard
this can be extremely confusing.

34
00:02:03,130 --> 00:02:06,700
For this reason the WebAIM checklist
specifically states in section 1.3.2

35
00:02:06,700 --> 00:02:11,080
that the reading and navigation
order as determined by code order

36
00:02:11,080 --> 00:02:14,080
should be logical and
intuitive in your application.

37
00:02:14,080 --> 00:02:16,920
I have just sort of
a general rule of thumb.

38
00:02:16,920 --> 00:02:19,330
I like to tab through my page every so

39
00:02:19,330 --> 00:02:23,180
often just to make sure I haven't
accidentally messed up the tab order.

40
00:02:23,180 --> 00:02:24,810
It's a good habit to adopt and

41
00:02:24,810 --> 00:02:27,350
it's one that doesn't really
require a ton of effort on my part.
