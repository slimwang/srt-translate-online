1
00:00:00,230 --> 00:00:03,379
Strings and characters in Swift
are pretty much as you'd expect

2
00:00:03,379 --> 00:00:06,209
from our experience
with other languages.

3
00:00:06,209 --> 00:00:09,589
Naturally, the character type
holds a single character and

4
00:00:09,589 --> 00:00:13,539
the string type represents
an ordered collection of characters.

5
00:00:13,539 --> 00:00:17,079
Here we're declaring the variable
excitement as a character.

6
00:00:17,079 --> 00:00:19,609
And here we're defining
myFirstString and

7
00:00:19,609 --> 00:00:23,109
mySecondString, using string literals.

8
00:00:23,109 --> 00:00:26,589
Technically, a string doesn't
have to have any characters.

9
00:00:26,589 --> 00:00:30,687
You can also initialize an empty string,
like so, using double quotes with

10
00:00:30,687 --> 00:00:34,864
nothing in between them, or by calling
the string initializer, like this.

11
00:00:34,863 --> 00:00:37,999
[BLANK_AUDIO]

12
00:00:37,999 --> 00:00:39,984
The string type comes with a handy
bag of tricks that makes string

13
00:00:39,984 --> 00:00:42,189
manipulations nice and concise.

14
00:00:42,189 --> 00:00:46,049
Like the simple string concatenation
you saw in the previous exercise.

15
00:00:46,049 --> 00:00:47,079
Here it is again.

16
00:00:47,079 --> 00:00:50,159
This time I'm adding a space
between these two sentences.

17
00:00:51,439 --> 00:00:55,233
And then if we print out the result and

18
00:00:55,234 --> 00:01:01,990
press Test Run,
we can see our two strings are combined.

