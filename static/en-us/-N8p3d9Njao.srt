1
00:00:00,850 --> 00:00:04,750
We'll start our discussion with a very
simple approximation algorithm, one for

2
00:00:04,750 --> 00:00:06,370
the minimum vertex cover problem.

3
00:00:07,390 --> 00:00:10,670
As input, we're given a graph, and
we want to find the smallest set

4
00:00:10,670 --> 00:00:14,950
of vertices such that every edge
has at least one end in this set.

5
00:00:16,110 --> 00:00:18,570
Recall that this problem is NP-complete.

6
00:00:18,570 --> 00:00:22,580
We reduced a maximum independent
set to it earlier on in the course.

7
00:00:22,580 --> 00:00:25,170
The approximation
algorithm goes like this.

8
00:00:25,170 --> 00:00:28,890
We start with the empty set, and then,
while there's still an edge we haven't

9
00:00:28,890 --> 00:00:32,479
covered yet, we choose one of
the edges from the graph arbitrarily.

10
00:00:33,570 --> 00:00:39,130
Say these two here, and then we add both
of these vertices to the set like so,

11
00:00:39,130 --> 00:00:41,480
and then we go and repeat the process.

12
00:00:42,590 --> 00:00:46,290
Picking an arbitrary edge from
the remaining part of the graph,

13
00:00:46,290 --> 00:00:48,310
let's say these two here, and

14
00:00:48,310 --> 00:00:52,710
then removing all the edges incident
on these two vertices, like so.

15
00:00:52,710 --> 00:00:56,230
And so on,
picking this edge here, and so

16
00:00:56,230 --> 00:00:59,580
forth, removing all edges
incident on those two.

17
00:00:59,580 --> 00:01:02,070
And we keep doing this until
there aren't any edges left.

18
00:01:03,340 --> 00:01:06,910
This set C, which we've chosen,
must be a cover.

19
00:01:06,910 --> 00:01:10,130
Looking back at the original graph it's
not too hard to see that this cover of

20
00:01:10,130 --> 00:01:13,100
six vertices is not a minimum one.

21
00:01:13,100 --> 00:01:14,770
Here is an optimal cover.

22
00:01:14,770 --> 00:01:16,030
It only has three vertices.

23
00:01:17,060 --> 00:01:20,460
So this approx VC
algorithm returned a cover

24
00:01:20,460 --> 00:01:22,830
twice as large as the optimal cover.

25
00:01:22,830 --> 00:01:25,550
Fortunately this is as bad as it gets.

26
00:01:25,550 --> 00:01:29,650
Given a graph G having
a minimum vertex cover, say C*,

27
00:01:29,650 --> 00:01:35,570
the algorithm ApproxVC returns
a cover C such that the ratio

28
00:01:35,570 --> 00:01:40,320
between the cover that it returns and
the optimum one is at most two.

29
00:01:40,320 --> 00:01:41,110
To prove this,

30
00:01:41,110 --> 00:01:44,950
it's useful to consider the set of
edges chosen in this line here.

31
00:01:44,950 --> 00:01:46,870
We'll call this set M.

32
00:01:46,870 --> 00:01:50,390
We use M here because this
set is a maximum matching.

33
00:01:50,390 --> 00:01:55,820
It pairs off vertices in such a way that
no vertex is part of more than one pair.

34
00:01:55,820 --> 00:01:59,908
In other words, this set of
edges must be vertex disjoint.

35
00:01:59,908 --> 00:02:03,410
That means that in order to
cover just this set of vertices,

36
00:02:03,410 --> 00:02:08,380
any vertex cover must include at
least one vertex from each of these.

37
00:02:08,380 --> 00:02:10,910
Therefore, the size of this set M

38
00:02:10,910 --> 00:02:14,874
is a lower bound on the size of
the minimum vertex cover, C*.

39
00:02:14,874 --> 00:02:19,200
Since C* is a minimum cover, the set C,

40
00:02:19,200 --> 00:02:21,490
chosen by the algorithm,
can only be larger.

41
00:02:22,750 --> 00:02:28,021
IT is of size twice M, which is at most,
C star, as we already argued.

42
00:02:29,280 --> 00:02:32,940
Dividing through by C star here,
then gives the desired result.
