1
00:00:00,000 --> 00:00:03,000
So we're going to test out that knowledge by having you submit

2
00:00:03,000 --> 00:00:05,000
via the interpreter, as a quiz--

3
00:00:05,000 --> 00:00:09,000
some parsing rules that are going to handle a real part of JavaScript.

4
00:00:09,000 --> 00:00:12,000
Now, a lot like Python, JavaScript allows function calls--

5
00:00:12,000 --> 00:00:14,000
you write out the name of your function

6
00:00:14,000 --> 00:00:16,000
and then you just pass in some number of arguments,

7
00:00:16,000 --> 00:00:18,000
possibly none.

8
00:00:18,000 --> 00:00:21,000
For that particular function, we would want the parse tree

9
00:00:21,000 --> 00:00:23,000
to be a tuple.

10
00:00:23,000 --> 00:00:25,000
That's how we're representing parse trees.

11
00:00:25,000 --> 00:00:29,000
The first part is "call"--telling us that it's a call expression.

12
00:00:29,000 --> 00:00:31,000
The next part is the name of the function,

13
00:00:31,000 --> 00:00:34,000
and then there's a list of all of the arguments.

14
00:00:34,000 --> 00:00:36,000
And this list may be empty if there are no arguments

15
00:00:36,000 --> 00:00:39,000
or it may contain expression parse trees.

16
00:00:39,000 --> 00:00:43,000
And, in fact, I'll do the first and second parts for you.

17
00:00:43,000 --> 00:00:45,000
Here's a rule for making expressions

18
00:00:45,000 --> 00:00:47,000
that are function calls:

19
00:00:47,000 --> 00:00:49,000
That's an identifier, like "myfun",

20
00:00:49,000 --> 00:00:51,000
followed by a Left parenthesis,

21
00:00:51,000 --> 00:00:53,000
followed by some optional arguments,

22
00:00:53,000 --> 00:00:55,000
followed by a Right parenthesis.

23
00:00:55,000 --> 00:00:59,000
And we just build up our parse tree

24
00:00:59,000 --> 00:01:01,000
out of a tuple--the word "call",

25
00:01:01,000 --> 00:01:06,000
the identifier--that's p[1]--zero, 1, 2, 3, 4--

26
00:01:06,000 --> 00:01:10,000
and the optional arguments are position[3]--

27
00:01:10,000 --> 00:01:12,000
I definitely need the (p) there--there we go: p[3].

28
00:01:12,000 --> 00:01:16,000
Similarly, our rule for expressions that could be numbers,

29
00:01:16,000 --> 00:01:18,000
expression can become a number, at which point,

30
00:01:18,000 --> 00:01:22,000
I just make up this tuple, "number", followed by the actual value.

31
00:01:22,000 --> 00:01:24,000
and that's how we got things like this

32
00:01:24,000 --> 00:01:26,000
for ("number", 11).

33
00:01:26,000 --> 00:01:29,000
So here's the quiz: I'd like you to fill in the value

34
00:01:29,000 --> 00:01:32,000
for parsing optional arguments,

35
00:01:32,000 --> 00:01:34,000
and you may find that you have to define

36
00:01:34,000 --> 00:01:36,000
a few more of these parsing rules--

37
00:01:36,000 --> 00:01:38,000
maybe some for there being no argument,

38
00:01:38,000 --> 99:59:59,999
some for there being at least one, and that kind of thing--try it out.
