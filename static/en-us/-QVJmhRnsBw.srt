1
00:00:00,110 --> 00:00:02,640
The main motivation of Chord is scalable location

2
00:00:02,640 --> 00:00:05,850
of data in a large distributed system. So

3
00:00:05,850 --> 00:00:10,310
a publisher might want to publish the location

4
00:00:10,310 --> 00:00:13,510
of a particular piece of data, such as an

5
00:00:13,510 --> 00:00:19,940
MP4 with a particular name, such as Annie Hall. It needs to figure out where to

6
00:00:19,940 --> 00:00:22,580
publish this data in a place that the

7
00:00:22,580 --> 00:00:25,170
client can find it. So that when the client

8
00:00:25,170 --> 00:00:28,710
performs a look up for Annie Hall, it's directed to

9
00:00:28,710 --> 00:00:32,360
the right location that is hosting the data. The key problem

10
00:00:32,360 --> 00:00:34,510
that we need to solve here is look up and

11
00:00:34,510 --> 00:00:37,710
you can see that the function that needs to be provided

12
00:00:37,710 --> 00:00:39,940
is just a simple hash table, but the thing that

13
00:00:39,940 --> 00:00:43,570
makes this problem interesting is that the hash table isn't located

14
00:00:43,570 --> 00:00:47,740
in one place but that it's distributed across the network. So

15
00:00:47,740 --> 00:00:50,320
what we're trying to build is what's called a distributed hash

16
00:00:50,320 --> 00:00:53,150
table or a DHT. The way that we're going to

17
00:00:53,150 --> 00:00:57,390
build this is using a mechanism called consistent hashing.
