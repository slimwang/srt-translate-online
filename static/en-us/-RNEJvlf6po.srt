1
00:00:00,260 --> 00:00:03,090
For anything to interact,
with the physics engine, we need to set

2
00:00:03,090 --> 00:00:06,020
a collider component, to whatever
game object we're interested in.

3
00:00:07,030 --> 00:00:08,798
These come in four main types.

4
00:00:08,798 --> 00:00:15,300
Box, capsule, mesh and sphere colliders.

5
00:00:15,300 --> 00:00:20,650
These colliders, define the area that we
want to apply physics, onto our objects.

6
00:00:20,650 --> 00:00:24,390
As you might infer from their names,
the box, sphere and

7
00:00:24,390 --> 00:00:29,090
capsule collider all represent generic
shapes that we can use for collisions.

8
00:00:29,090 --> 00:00:34,365
In fact, if we create a standard Unity
cube, sphere or capsule, they will

9
00:00:34,365 --> 00:00:39,336
already have their corresponding
collider attached and ready to go.

10
00:00:39,336 --> 00:00:40,893
[BLANK_AUDIO]

11
00:00:40,893 --> 00:00:43,624
If we have an object that
doesn't fit any of those shapes,

12
00:00:43,624 --> 00:00:46,660
we can create our own mesh and
use that for collision detection.

13
00:00:47,800 --> 00:00:50,290
Once we've appropriately
defined the collision area for

14
00:00:50,290 --> 00:00:55,090
an object, we then need to assign
a rigid body component to it.

15
00:00:55,090 --> 00:00:58,010
A rigid body is a component
that enables a game object

16
00:00:58,010 --> 00:01:00,400
to interface with the Unity
physics simulation.

17
00:01:01,490 --> 00:01:05,770
It contains many properties such
as mass, drag, and whether or

18
00:01:05,770 --> 00:01:09,010
not to use gravity, just to name a few.

19
00:01:09,010 --> 00:01:12,640
And with some programming we're able
to add a lot more dynamic interactions,

20
00:01:12,640 --> 00:01:16,430
such as applying forces,
updating an objects velocity, and

21
00:01:16,430 --> 00:01:18,300
detecting collisions.

22
00:01:18,300 --> 00:01:20,420
To get started playing
around with physics,

23
00:01:20,420 --> 00:01:22,060
let's create a really simple scene.

24
00:01:25,370 --> 00:01:28,374
First let's create
a plane at the origin.

25
00:01:28,374 --> 00:01:33,019
[BLANK_AUDIO]

26
00:01:33,019 --> 00:01:35,985
A sphere called ball.

27
00:01:35,985 --> 00:01:40,909
[BLANK_AUDIO]

28
00:01:40,909 --> 00:01:44,410
And a cube that will act as our ramp for
the ball to slide down.

29
00:01:46,240 --> 00:01:49,170
Once we have the scene set up by
positioning and scaling our ball and

30
00:01:49,170 --> 00:01:52,810
ramp, all we need to do is
add a rigid body to our ball.

31
00:01:55,020 --> 00:02:00,140
Now, we can just hit play, and watch
our ball slowly roll down our ramp.

32
00:02:01,920 --> 00:02:05,010
And all that movement is calculated
by the Unity physics engine.

33
00:02:05,010 --> 00:02:06,220
Neat, right?

34
00:02:06,220 --> 00:02:09,509
Now that we've set up this simple scene,
take some time now to play around with

35
00:02:09,509 --> 00:02:12,330
all of these parameters,
and create a fun slide.

36
00:02:12,330 --> 00:02:15,130
Afterwards, let's dive into how
we can use physics and scripting.
