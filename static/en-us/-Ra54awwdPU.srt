1
00:00:00,240 --> 00:00:03,360
With the sequentially consistent memory model, let's

2
00:00:03,360 --> 00:00:05,775
come back to a parallel program. So, a

3
00:00:05,775 --> 00:00:08,935
parallel program is making read write accesses

4
00:00:08,935 --> 00:00:11,858
to shared memory, some of them offer data,

5
00:00:11,858 --> 00:00:15,270
and some of them offer synchronization. Now,

6
00:00:15,270 --> 00:00:18,210
so far as the sequentially consistent memory model

7
00:00:18,210 --> 00:00:22,160
it does not distinguish between accesses coming from

8
00:00:22,160 --> 00:00:26,120
the processors as data accesses, or synchronization accesses.

9
00:00:26,120 --> 00:00:28,420
It has no idea, it only looks at

10
00:00:28,420 --> 00:00:30,710
the read write accesses coming from an individual

11
00:00:30,710 --> 00:00:33,790
processor and honoring them in the order in

12
00:00:33,790 --> 00:00:37,180
which it appears and making sure that they can

13
00:00:37,180 --> 00:00:40,570
merged across all these processors to preserve the

14
00:00:40,570 --> 00:00:44,180
SC guarantee. So the upshot is that there's

15
00:00:44,180 --> 00:00:47,170
going to be coherence action on every read write

16
00:00:47,170 --> 00:00:51,240
access that the model sees. If this guy writes

17
00:00:51,240 --> 00:00:54,470
to a memory location, then the sequentially

18
00:00:54,470 --> 00:00:57,320
consistent memory model has to ensure that this

19
00:00:57,320 --> 00:01:00,620
write is inserted into this global order

20
00:01:00,620 --> 00:01:03,400
somewhere. In order to insert that in the

21
00:01:03,400 --> 00:01:05,800
global order somewhere, it has to perform

22
00:01:05,800 --> 00:01:08,600
the coherence action with respect to all the

23
00:01:08,600 --> 00:01:12,125
other processors. That's the upshot of not

24
00:01:12,125 --> 00:01:16,780
distinguishing between normal data accesses and synchronization accesses

25
00:01:16,780 --> 00:01:19,180
that is inherent in the SC memory model.
