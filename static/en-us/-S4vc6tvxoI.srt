1
00:00:00,320 --> 00:00:02,060
Now let's step back a minute and think a little bit more

2
00:00:02,060 --> 00:00:06,236
about CSV. We've talked about the fact that fields are delimited by

3
00:00:06,236 --> 00:00:10,400
commas. So what happens if we have a field that actually has

4
00:00:10,400 --> 00:00:14,020
a comma in it, like for example, this one. This particular Beatles

5
00:00:14,020 --> 00:00:16,880
album was released on two different labels, one in New Zealand and

6
00:00:16,880 --> 00:00:19,250
one in the US, so the way this data set has been

7
00:00:19,250 --> 00:00:22,470
set up, those two different labels are simply separated by a comma

8
00:00:22,470 --> 00:00:26,050
here. Now based on what we know so far about CSV, or

9
00:00:26,050 --> 00:00:27,440
I should say what we've discussed so far in the

10
00:00:27,440 --> 00:00:30,820
class about CSV, this would cause a problem for us

11
00:00:30,820 --> 00:00:34,890
because our parser would interpret this as a field separator.

12
00:00:34,890 --> 00:00:38,390
Now, the way that the CSV format actually handles this, or

13
00:00:38,390 --> 00:00:41,210
the way that most applications that deal with CSV format

14
00:00:41,210 --> 00:00:44,480
actually handle this, is to do something like the following. So

15
00:00:44,480 --> 00:00:47,400
you can see here that this is the field in

16
00:00:47,400 --> 00:00:51,220
this actual CSV file. Over here what I've done is simply

17
00:00:51,220 --> 00:00:54,770
load it inside a Google sheet, but here's a raw

18
00:00:54,770 --> 00:00:57,475
CSV file. And you can see that the way this

19
00:00:57,475 --> 00:01:00,700
has been structured is for this particular line, this field

20
00:01:00,700 --> 00:01:04,775
has been enclosed in quotes. Okay? So what that does is

21
00:01:04,775 --> 00:01:08,650
indicates that you can ignore field delimiters from here to

22
00:01:08,650 --> 00:01:11,920
here. So, we've got some choices in terms of what

23
00:01:11,920 --> 00:01:14,030
we use for quotes, you could use double quotes or

24
00:01:14,030 --> 00:01:16,670
you can use single quotes. Well, that would cause a problems

25
00:01:16,670 --> 00:01:19,190
in other ways. You can see here that we have this

26
00:01:19,190 --> 00:01:22,330
quote character here, single quote here. There's also one here, which

27
00:01:22,330 --> 00:01:24,880
is actually used as an apostrophe for Sgt Pepper's Lonely Hearts

28
00:01:24,880 --> 00:01:28,990
Club Band. So it would be extremely tedious if in our

29
00:01:28,990 --> 00:01:31,820
Python programs we had to deal with all of these different

30
00:01:31,820 --> 00:01:35,230
variations of exceptions. And the fact is that though we call

31
00:01:35,230 --> 00:01:38,620
it CSV, or comma separated values, you can really use any

32
00:01:38,620 --> 00:01:41,990
delimiter you want here, as long as that character is only used

33
00:01:41,990 --> 00:01:45,680
for a field delimiter in rows in our dataset.

34
00:01:45,680 --> 00:01:47,640
So as, so often is the case of software

35
00:01:47,640 --> 00:01:51,490
development, this problem has been abstracted away and solved

36
00:01:51,490 --> 00:01:54,611
for all of the different variations, the tedious details that

37
00:01:54,611 --> 00:01:58,380
we might have to deal with in order to work with the format like CSV that has so

38
00:01:58,380 --> 00:02:02,044
many variations, and asterisks as my friend, Will Cross

39
00:02:02,044 --> 00:02:07,360
is fond of saying. This is the Python CSV module.

40
00:02:07,360 --> 00:02:12,140
This module deals with CSV formats in a pretty complete

41
00:02:12,140 --> 00:02:14,790
way. So, let's look at how we use this module. Now,

42
00:02:14,790 --> 00:02:18,100
what I'm actually going to do here is use the DictReader

43
00:02:18,100 --> 00:02:22,200
class from this module. This assumes that what we want to do

44
00:02:22,200 --> 00:02:25,550
is read all of our data into dictionaries, which is

45
00:02:25,550 --> 00:02:27,590
what we've been doing all along, and what we'll kind of

46
00:02:27,590 --> 00:02:30,060
continue to do throughout the rest of the course. But

47
00:02:30,060 --> 00:02:32,980
it has some other pretty cool features as well. For example,

48
00:02:32,980 --> 00:02:35,150
it assumes that the first row of whatever file we are

49
00:02:35,150 --> 00:02:38,300
going to read is actually a header row. And that those

50
00:02:38,300 --> 00:02:42,300
are the names we want to use for fields. So, going

51
00:02:42,300 --> 00:02:45,480
back to our CSV file, if I scroll up to the

52
00:02:45,480 --> 00:02:49,470
top, we can see that this first row here is actually

53
00:02:49,470 --> 00:02:51,730
all of the field labels that we would like for the

54
00:02:51,730 --> 00:02:53,660
columns in this data set or the fields in this data

55
00:02:53,660 --> 00:02:58,080
set. So, what this dictionary reader will do for us is as

56
00:02:58,080 --> 00:03:00,340
it reads in rows, it will create a dictionary for

57
00:03:00,340 --> 00:03:04,340
each row. The field names will be whatever it found in

58
00:03:04,340 --> 00:03:06,770
that first row, and it remembers them as we read

59
00:03:06,770 --> 00:03:10,730
through the data file. And the values then will in turn

60
00:03:10,730 --> 00:03:13,520
be each of the associated values on each line of

61
00:03:13,520 --> 00:03:16,710
the file. And again, it also handles things like dealing with

62
00:03:16,710 --> 00:03:20,380
quote characters, dealing with quoted fields that may commas inside

63
00:03:20,380 --> 00:03:23,130
of them, and so on. We don't have to worry about

64
00:03:23,130 --> 00:03:27,090
that at all, using the CSV module. So let's take a

65
00:03:27,090 --> 00:03:29,100
look at the rest of this code. Essentially we're just opening

66
00:03:29,100 --> 00:03:33,480
up the data file. We're instantiating a DictReader from the CSV

67
00:03:33,480 --> 00:03:36,410
module, and then we're simply looping through. Each time through here,

68
00:03:36,410 --> 00:03:38,830
this class is going to produce a line for us. And

69
00:03:38,830 --> 00:03:42,110
that line will actually be a dictionary, composed of the appropriate

70
00:03:42,110 --> 00:03:46,320
fields for that particular line. So then if we scroll down,

71
00:03:46,320 --> 00:03:48,250
what I'm going to do here is simply print out all of those

72
00:03:48,250 --> 00:03:51,480
values, okay? So, let's take a look at running

73
00:03:51,480 --> 00:03:53,390
this piece of code. And again, remember we're using

74
00:03:53,390 --> 00:03:57,610
the CSV module. Okay, so if we run this,

75
00:03:57,610 --> 00:03:59,800
the output we get, we'll just look at the second

76
00:03:59,800 --> 00:04:03,210
to last one here, is a dictionary composed of

77
00:04:03,210 --> 00:04:06,910
each of the labels that came out from the first

78
00:04:06,910 --> 00:04:10,090
line of this file. And the field value for

79
00:04:10,090 --> 00:04:13,250
each one of the fields for this particular row from

80
00:04:13,250 --> 00:04:16,180
the data file. Okay? And it seamlessly handles for

81
00:04:16,180 --> 00:04:18,399
us fields that may be quoted on a particular

82
00:04:18,399 --> 00:04:21,519
line, and other nuances that we might see in

83
00:04:21,519 --> 00:04:26,040
the CSV format, and conveniently stuffs everything into individual dictionaries

84
00:04:26,040 --> 00:04:30,260
for us. So, whenever you're working with CSV files

85
00:04:30,260 --> 00:04:33,700
in Python, it's best to use the CSV module,

86
00:04:33,700 --> 00:04:35,100
because so many of the challenges of working with

87
00:04:35,100 --> 00:04:37,010
this type of data have already been solved for us.
