1
00:00:00,340 --> 00:00:02,869
So basically you're saying that
iterative deepening is almost free

2
00:00:02,870 --> 00:00:05,360
because of the exponential
nature of the problem?

3
00:00:05,360 --> 00:00:06,370
>> Yep.

4
00:00:06,370 --> 00:00:09,039
>> And I bet that iterative deepening
really helps when you have a game like

5
00:00:09,039 --> 00:00:11,719
Isolation with a widely
varying branching factor.

6
00:00:11,720 --> 00:00:12,730
>> How so?

7
00:00:12,730 --> 00:00:15,679
>> Well, when we calculated that
we should only go nine levels deep

8
00:00:15,679 --> 00:00:19,120
in a five by five isolation tree
to return within two second,

9
00:00:19,120 --> 00:00:21,440
we assumed the branching
factor of eight, yet

10
00:00:21,440 --> 00:00:24,839
toward the end game, isolation players
only have a few moves available.

11
00:00:24,839 --> 00:00:27,910
We might be able to search
much more deeply at end game.

12
00:00:27,910 --> 00:00:30,890
>> And often,
end game is precisely the time that

13
00:00:30,890 --> 00:00:34,520
you want to search more deeply so
you can see what will happen.

14
00:00:34,520 --> 00:00:36,460
>> On the other hand,
at the beginning of the game,

15
00:00:36,460 --> 00:00:37,850
the branching factor is quite large.

16
00:00:37,850 --> 00:00:40,340
Our compter player might not
return within two seconds.

17
00:00:40,340 --> 00:00:44,140
>> Correct, iterative deepening
means that our computer player

18
00:00:44,140 --> 00:00:47,100
always has an answer ready
in case it runs out of time.

19
00:00:47,100 --> 00:00:51,460
And it can search as far as possible
within it's time constraints.

20
00:00:51,460 --> 00:00:53,765
We limited our time to
two seconds per move.

21
00:00:53,765 --> 00:00:57,439
Yet, in some games, like speed chess,

22
00:00:57,439 --> 00:01:01,599
we limit the total time a player
can take for the entire game.

23
00:01:01,600 --> 00:01:05,659
In those situations, our computer player
will want to search deeper at some

24
00:01:05,659 --> 00:01:08,399
parts of the game and
shallower at other parts of the game.

25
00:01:09,709 --> 00:01:13,379
Often we can create a strategy for
how deep we want to search.

26
00:01:13,379 --> 00:01:16,092
>> So something like having a book
of standard initial moves for

27
00:01:16,093 --> 00:01:18,909
the beginning of the game,
then search deeper in the middle and

28
00:01:18,909 --> 00:01:22,471
use less time towards the end, relying
on the reduction and branching factor,

29
00:01:22,471 --> 00:01:25,873
and iterative deepening to still allow
our computer player to search the end

30
00:01:25,873 --> 00:01:29,000
game, or as deep as it can
given the remaining time.

31
00:01:29,000 --> 00:01:32,091
>> Or we might want to have
a conservative amount of time we

32
00:01:32,091 --> 00:01:34,918
dedicate per move and
use iterative deepening and

33
00:01:34,918 --> 00:01:39,099
quiescence search to determine the few
moves we want to spend extra time.

34
00:01:40,420 --> 00:01:42,620
All these are great strategies, but

35
00:01:42,620 --> 00:01:45,670
we can still get in trouble due to
something called the horizon effect.

