1
00:00:00,340 --> 00:00:03,680
The key optimal substructure for
the sequence alignment problem

2
00:00:03,680 --> 00:00:07,188
comes from aligning prefixes of
the sequence that we want to align.

3
00:00:07,188 --> 00:00:11,870
We define c(i,j) to be the minimum cost
of a aligning the first i characters

4
00:00:11,870 --> 00:00:14,240
of x with the first j characters of y.

5
00:00:15,490 --> 00:00:20,640
Since x has m characters total, and
y has n characters, our overall

6
00:00:20,640 --> 00:00:26,350
goal then is to compute c(m,n) and
the alignment that achieves it.

7
00:00:26,350 --> 00:00:30,240
Let's consider this problem of
computing c(m,n), and in particular,

8
00:00:30,240 --> 00:00:34,520
we'll consider what we do with
the last characters of each sequence.

9
00:00:34,520 --> 00:00:36,690
There are three cases to consider.

10
00:00:36,690 --> 00:00:39,540
First suppose that we match
the last two characters of

11
00:00:39,540 --> 00:00:42,530
the sequence together like so.

12
00:00:42,530 --> 00:00:46,330
Then the cost would be the minimum
cost of aligning the first

13
00:00:46,330 --> 00:00:50,740
m minus 1 character to the x with
the first n minus 1 characters of y,

14
00:00:50,740 --> 00:00:54,784
plus the cost associated with
matching these two characters.

15
00:00:54,784 --> 00:00:59,284
Another possibility is that we leave
the last character of the x sequence

16
00:00:59,284 --> 00:01:00,105
unmatched.

17
00:01:00,105 --> 00:01:05,367
Then the cost would be the minimum
cost of aligning the first m

18
00:01:05,367 --> 00:01:10,627
minus one characters of x,
with the first n characters of y,

19
00:01:10,627 --> 00:01:14,290
plus one for leaving Xm unmatched.

20
00:01:14,290 --> 00:01:18,076
In the case where we leave
Yn unmatched is analogous.

21
00:01:18,076 --> 00:01:23,430
Of course c(m,n) is defined to be the
minimum cost of aligning the sequences,

22
00:01:23,430 --> 00:01:27,140
so it must be the minimum of
these three possibilities.

23
00:01:27,140 --> 00:01:27,790
Notice, however,

24
00:01:27,790 --> 00:01:32,240
that there was nothing special about the
fact that we were using m and n here.

25
00:01:32,240 --> 00:01:36,610
And the same argument applies
to all combination of i and j.

26
00:01:36,610 --> 00:01:38,530
The problems are similar.

27
00:01:38,530 --> 00:01:43,390
So we can replace m and
n with i and j like so.

28
00:01:43,390 --> 00:01:47,250
Adding the base cases where
the cost of aligning a sequence

29
00:01:47,250 --> 00:01:51,250
with the empty sequence is just
the length of the sequence.

30
00:01:51,250 --> 00:01:53,340
We have a recursive formulation.

31
00:01:53,340 --> 00:01:54,810
The optimal solution,

32
00:01:54,810 --> 00:01:59,020
expressed in terms of optimal
solutions to similar subproblems.
