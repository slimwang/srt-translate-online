1
00:00:00,320 --> 00:00:03,625
The goal of this line is to invoke the Car function such that

2
00:00:03,625 --> 00:00:07,320
it's parameter this, is bound to the Van instance and

3
00:00:07,320 --> 00:00:10,610
to do that, we are also going to have to use the keyword, this,

4
00:00:10,610 --> 00:00:14,690
inside the Van function since it's bound to the right object in there.

5
00:00:14,690 --> 00:00:16,500
At the heart of this confusion is the fact that

6
00:00:16,500 --> 00:00:18,660
there are two different parameters.

7
00:00:18,660 --> 00:00:23,090
In two different scopes, both of which are given the name this.

8
00:00:23,090 --> 00:00:26,845
But we must keep in mind that the parameter this behaves just like

9
00:00:26,845 --> 00:00:29,530
other positional parameters to functions.

10
00:00:29,530 --> 00:00:33,790
For example, it's probably not confusing that the loc variable from

11
00:00:33,790 --> 00:00:38,980
inside Van is being passed along as the first argument to Car,

12
00:00:38,980 --> 00:00:41,730
where it's coincidentally given the same name.

13
00:00:41,730 --> 00:00:44,360
Even though the two variables share the same name.

14
00:00:44,360 --> 00:00:47,620
We think of them as different, because they're in different scopes.

15
00:00:47,620 --> 00:00:50,050
The shared name is incidental and

16
00:00:50,050 --> 00:00:54,890
this line merely passes along the binding from one function to another.

17
00:00:54,890 --> 00:00:57,460
The same is true of the parameter this.

18
00:00:57,460 --> 00:01:00,310
It's just being passed in a bit different way.

19
00:01:00,310 --> 00:01:03,390
To underscore this point let's consider a snippet from a totally

20
00:01:03,390 --> 00:01:05,260
separate naf library.

21
00:01:05,260 --> 00:01:08,910
The double function calls the product function passing along its

22
00:01:08,910 --> 00:01:13,760
x variable to the product function wherein it's going to be given the name a.

23
00:01:13,760 --> 00:01:15,880
That example is uncontroversial but

24
00:01:15,880 --> 00:01:19,870
what if we were to use the same argument name in both functions.

25
00:01:19,870 --> 00:01:22,490
How would you expect that to effect how our code runs.

26
00:01:22,490 --> 00:01:26,440
In fact, there's no change to how these two functions would behave.

27
00:01:26,440 --> 00:01:30,750
The new example would seem almost as uncontroversial as the previous one.

28
00:01:30,750 --> 00:01:33,350
Even though both functions have an input named num,

29
00:01:33,350 --> 00:01:35,720
it's clear that those names are coincidental.

30
00:01:35,720 --> 00:01:39,220
The code behaves the same as if they were actually named differently.

31
00:01:39,220 --> 00:01:41,940
Since the two variables are in different scopes.

32
00:01:41,940 --> 00:01:45,490
Interestingly, the situation is almost exactly the same when we

33
00:01:45,490 --> 00:01:50,120
pass along the value 3 to be bound to the parameter this.

34
00:01:51,270 --> 00:01:55,710
If we use the same binding to the parameter this in our above function call,

35
00:01:55,710 --> 00:01:58,090
we have ourselves the same situation.

36
00:01:58,090 --> 00:02:01,500
Where two different parameters, in two different scopes, happen to

37
00:02:01,500 --> 00:02:06,370
share a name and again, we're just invoking the function a little differently so

38
00:02:06,370 --> 00:02:09,389
that we're allowed to bind the value to the parameter this.
