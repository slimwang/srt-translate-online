1
00:00:00,700 --> 00:00:03,670
In order to talk about what's
going on in network protocols,

2
00:00:03,670 --> 00:00:06,500
it helps to have a bit
of a visual language.

3
00:00:06,500 --> 00:00:11,600
Just as we might use a line graph
to depict a financial trend, or

4
00:00:11,600 --> 00:00:15,760
a histogram to show the distribution of
a variable, there's a particular kind of

5
00:00:15,760 --> 00:00:18,810
chart that's useful for
illustrating network protocols.

6
00:00:18,810 --> 00:00:22,090
It's called a sequence diagram,
and here's an example.

7
00:00:22,090 --> 00:00:25,810
This is a diagram of an HTTP
connection using keep-alive.

8
00:00:25,810 --> 00:00:27,670
These two lines on the left and

9
00:00:27,670 --> 00:00:31,750
right are time lines, with time
advancing from the top to the bottom.

10
00:00:32,780 --> 00:00:36,230
The line on the left represents
the client's view of the world.

11
00:00:36,230 --> 00:00:38,330
The line on the right is
the servers view of the world.

12
00:00:39,450 --> 00:00:42,390
And these arrows between
them represent messages sent

13
00:00:42,390 --> 00:00:45,205
from the client to the server or
from the server to the client.

14
00:00:45,205 --> 00:00:49,200
You'll sometimes see
them drawn at an angle,

15
00:00:49,200 --> 00:00:51,910
which serves to remind you that
messages are never instantaneous.

16
00:00:51,910 --> 00:00:55,880
There's always latency or lag time
between when the client sends something

17
00:00:55,880 --> 00:00:57,710
and the server receives it,
or vice versa.

18
00:00:58,740 --> 00:01:00,770
But conventionally,
they're drawn straight and

19
00:01:00,770 --> 00:01:02,750
we just have to remember that
time never goes backwards.

20
00:01:03,760 --> 00:01:06,650
Now because we haven't
invented time travel,

21
00:01:06,650 --> 00:01:09,820
anything that either end
does at any point in time

22
00:01:09,820 --> 00:01:13,750
can only be affected by things
that that end has already seen.

23
00:01:13,750 --> 00:01:18,350
Like if the client sends two requests,
and the server starts responding to

24
00:01:18,350 --> 00:01:21,100
the first one as soon as it sees it,
the server can't

25
00:01:21,100 --> 00:01:24,160
change its first response on
the basis of the second request.

26
00:01:24,160 --> 00:01:25,420
It hasn't seen that second one yet.

27
00:01:26,550 --> 00:01:29,260
Sequence diagrams remind us
to keep things in order, and

28
00:01:29,260 --> 00:01:31,860
to make sure that our notions of
what's going on in the network

29
00:01:31,860 --> 00:01:34,680
don't assume that servers
can see the future.

30
00:01:34,680 --> 00:01:36,810
So here's what's going
on in this diagram.

31
00:01:36,810 --> 00:01:41,120
The client sends an HTTP get request
with a connection keep-alive header.

32
00:01:42,160 --> 00:01:46,390
The server sends a response, and once
the client has received that response,

33
00:01:46,390 --> 00:01:50,010
It can send another request over
the same connection, and so on.

34
00:01:50,010 --> 00:01:51,380
Here's the thing though.

35
00:01:51,380 --> 00:01:55,060
A sequence diagram always represents
some particular level of a protocol.

36
00:01:56,060 --> 00:02:00,800
Here's a diagram for just one request,
at the HTTP layer, with an HTTP GET,

37
00:02:00,800 --> 00:02:03,070
and a response.

38
00:02:03,070 --> 00:02:06,410
But this doesn't show
individual IP packets.

39
00:02:06,410 --> 00:02:09,985
And I assure you that if that response
is a download of a six megabyte file,

40
00:02:09,985 --> 00:02:14,320
it's not going to happen as simply
as just one arrow suggests.

41
00:02:14,320 --> 00:02:17,850
When we look deeper into the stack,
we'll find that one exchange on

42
00:02:17,850 --> 00:02:23,250
the HTTP level may be a shorthand for
a bunch of exchanges on a lower level.

43
00:02:23,250 --> 00:02:25,710
In fact, let's take a closer
look at that right now.
