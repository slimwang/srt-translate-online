1
00:00:00,350 --> 00:00:02,270
We begin with a definition.

2
00:00:02,270 --> 00:00:06,240
A flow network consists of,
among other things, a directed graph, G,

3
00:00:06,240 --> 00:00:11,760
and we will disallow anti-parallel
edges to simplify some of the equation.

4
00:00:11,760 --> 00:00:14,870
This is not a serious limitation,
as we'll see.

5
00:00:14,870 --> 00:00:17,870
We'll distinguish to special
vertices in the graph.

6
00:00:17,870 --> 00:00:20,540
A source, typically labeled s.

7
00:00:20,540 --> 00:00:24,018
This is where whatever is flowing
to the network starts from.

8
00:00:24,018 --> 00:00:28,030
And a sync typically labeled t,
this is where the flow ends up.

9
00:00:29,090 --> 00:00:31,960
We call all other vertices internal.

10
00:00:31,960 --> 00:00:34,050
To keep our equations a little simpler,

11
00:00:34,050 --> 00:00:39,430
we'll assume there are no incoming
edges into s, or outgoing edges from t.

12
00:00:40,530 --> 00:00:44,640
Associated with every pair of vertices
is a capacity which indicates

13
00:00:44,640 --> 00:00:48,360
how much flow it is possible to
send directly between two vertices.

14
00:00:48,360 --> 00:00:52,100
We will assume that these capacity's
are always non negative integers.

15
00:00:52,100 --> 00:00:56,000
This will make some of the arguments
easier and it's not a serious limitation

16
00:00:56,000 --> 00:00:59,120
in fact the last algorithm
we see will overcome it.

17
00:00:59,120 --> 00:01:01,440
Also note that if there
is no edge in the graph,

18
00:01:01,440 --> 00:01:03,850
then the capacity is defined to be 0.

19
00:01:03,850 --> 00:01:05,760
That's the flow network,

20
00:01:05,760 --> 00:01:10,670
the flow itself is a function from pairs
of vertices to the non negative reels.

21
00:01:10,670 --> 00:01:14,700
Clearly then, it must be non negative,
and it can't exceed the capacity for

22
00:01:14,700 --> 00:01:15,720
any pair of vertices.

23
00:01:16,970 --> 00:01:21,630
Also we require that between any two
vertices, at least one direction be 0.

24
00:01:21,630 --> 00:01:25,490
And it doesn't make sense to have flow
going from one vertex to another,

25
00:01:25,490 --> 00:01:26,600
only to send it back again.

26
00:01:27,620 --> 00:01:32,490
Lastly, we require that flow be
conserved at every internal vertex.

27
00:01:32,490 --> 00:01:39,910
We define, f in, to be the flow, into
a vertex, and f out, to be the flow out.

28
00:01:39,910 --> 00:01:42,559
And we require that the two be equal.

29
00:01:42,559 --> 00:01:46,556
So for example, in this node here,

30
00:01:46,556 --> 00:01:53,790
I have 4 plus 2 coming in, and
I have 5 plus 1 going out.

31
00:01:53,790 --> 00:01:58,300
These are both 6, so we say that
flow is conserved at this vertex.

32
00:01:58,300 --> 00:02:01,860
Intuitively, this just means that
internal nodes can't generate or

33
00:02:01,860 --> 00:02:04,660
absorb any of the stuff that's flowing.

34
00:02:04,660 --> 00:02:07,160
Those are the jobs of the source,
and of the sync.

35
00:02:08,258 --> 00:02:11,580
The overall value of the flow,
is defined as the flow going

36
00:02:11,580 --> 00:02:15,664
out of the source, or equivalently,
the flow going into the sync.
