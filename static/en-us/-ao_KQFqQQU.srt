1
00:00:01,090 --> 00:00:01,950
So far,

2
00:00:01,950 --> 00:00:06,219
we've been loading each daily forecast
into a single scrolling text view.

3
00:00:06,219 --> 00:00:09,710
This is easy, but it doesn't allow
us to create the kind of formatting

4
00:00:09,710 --> 00:00:12,310
we need for
the final version of Sunshine.

5
00:00:12,310 --> 00:00:14,210
in the final version of Sunshine,

6
00:00:14,210 --> 00:00:18,570
the main user interface contains
a list of mostly similar items.

7
00:00:18,570 --> 00:00:20,658
Rather than being a single text field,

8
00:00:20,658 --> 00:00:24,593
each list item is made up of a series
of views for each image and text block.

9
00:00:24,593 --> 00:00:28,268
Allowing us to make a rich experience
containing different font sizes and

10
00:00:28,268 --> 00:00:29,480
images.

11
00:00:29,480 --> 00:00:33,621
Even though only this region of the list
is viewable, our code has to create and

12
00:00:33,621 --> 00:00:37,009
lay out and populate all of
the off screen views as well.

13
00:00:37,009 --> 00:00:41,189
In addition, any images that are
displayed have to be loaded into memory.

14
00:00:41,189 --> 00:00:44,979
This is reasonable for some small
lists with minimal formatting, but for

15
00:00:44,979 --> 00:00:47,269
large lists it becomes impractical.

16
00:00:47,270 --> 00:00:48,390
For each item in the list,

17
00:00:48,390 --> 00:00:52,609
we would have to handle interactions
such as assigning on click handlers.

18
00:00:52,609 --> 00:00:56,070
All of this set up time turns into delay
that the user experiences before they

19
00:00:56,070 --> 00:00:58,299
are able to see anything.

20
00:00:58,299 --> 00:01:02,459
Even worse, since all of these items and
any images they are displaying are in

21
00:01:02,460 --> 00:01:05,930
memory at once, it can cause
the app to run out of memory.

22
00:01:05,930 --> 00:01:06,830
We need another way.

