1
00:00:00,000 --> 00:00:03,000
[Evans] These are our 3 big themes in the class:

2
00:00:03,000 --> 00:00:06,000
abstraction, universality, and recursive definitions.

3
00:00:06,000 --> 00:00:11,000
What I want to do now is look at various things that we've covered throughout the course

4
00:00:11,000 --> 00:00:13,000
and see how they fit in to these 3 main themes.

5
00:00:13,000 --> 00:00:16,000
In Unit 1 we introduced the concept of variables.

6
00:00:16,000 --> 00:00:19,000
We can use a name to refer to some value.

7
00:00:19,000 --> 00:00:21,000
So that's definitely a type of abstraction.

8
00:00:21,000 --> 00:00:25,000
It allowed us to use the name x to refer to different things.

9
00:00:25,000 --> 00:00:30,000
It's helpful for universality, but by itself it doesn't really provide us that.

10
00:00:30,000 --> 00:00:33,000
And it's not really a recursive definition, although we can define variables

11
00:00:33,000 --> 00:00:35,000
in terms of other variables.

12
00:00:35,000 --> 00:00:38,000
In Unit 2 we introduced procedures.

13
00:00:38,000 --> 00:00:40,000
A procedure is definitely a kind of abstraction.

14
00:00:40,000 --> 00:00:44,000
By making the parameter to a procedure, we can have code that we write once

15
00:00:44,000 --> 00:00:46,000
that does many different things,

16
00:00:46,000 --> 00:00:50,000
and we can hide all those details when we use the procedure.

17
00:00:50,000 --> 00:00:52,000
Procedures also give us a form of universality.

18
00:00:52,000 --> 00:00:55,000
We can use the same procedure to do many different things,

19
00:00:55,000 --> 00:00:59,000
and we can define procedures to do everything, as we've seen.

20
00:00:59,000 --> 00:01:02,000
We didn't really understand that yet in Unit 2, though, but it is enough

21
00:01:02,000 --> 00:01:05,000
to define every possible computer program.

22
00:01:05,000 --> 00:01:09,000
We certainly use procedures to make recursive definitions,

23
00:01:09,000 --> 00:01:13,000
and we've certainly defined recursive procedures--not until Unit 6, though.

24
00:01:13,000 --> 00:01:17,000
And this gives us a way to define a procedure to break a problem down

25
00:01:17,000 --> 00:01:20,000
by seeing it in terms of a smaller version of itself.

26
00:01:20,000 --> 00:01:23,000
The main new thing in Unit 3 was lists.

27
00:01:23,000 --> 00:01:25,000
This is a kind of data abstraction.

28
00:01:25,000 --> 00:01:30,000
You can use a list without knowing the details of how Python implements a list.

29
00:01:30,000 --> 00:01:32,000
It also can be a recursive definition.

30
00:01:32,000 --> 00:01:35,000
We can have lists that have elements that are other lists,

31
00:01:35,000 --> 00:01:38,000
so it certainly is useful for recursive definitions.

32
00:01:38,000 --> 00:01:41,000
And it's universal in the sense that we can put any element we want in a list.

33
00:01:41,000 --> 00:01:45,000
So in Unit 4 the main things we did were finish the search index

34
00:01:45,000 --> 00:01:48,000
by providing a way to produce an index of data.

35
00:01:48,000 --> 00:01:51,000
This certainly involved a lot of abstraction.

36
00:01:51,000 --> 00:01:56,000
We found a way to represent the data from the web pages in an index

37
00:01:56,000 --> 00:01:58,000
and respond to queries.

38
00:01:58,000 --> 00:02:00,000
The other thing we talked about in Unit 4 was how networks work.

39
00:02:00,000 --> 00:02:02,000
Networks are all about abstraction.

40
00:02:02,000 --> 00:02:04,000
We want to find ways to make requests

41
00:02:04,000 --> 00:02:07,000
where we're thinking about what we're requesting as a web page.

42
00:02:07,000 --> 00:02:11,000
All the details of how we actually do that are hidden,

43
00:02:11,000 --> 00:02:15,000
and unless we need to worry about that, it's much better to think about that abstractly

44
00:02:15,000 --> 00:02:17,000
as this is sending a request for a web page.

45
00:02:17,000 --> 00:02:22,000
In Unit 5 the main new idea we introduced was how to measure cost.

46
00:02:22,000 --> 00:02:24,000
That's a kind of abstraction.

47
00:02:24,000 --> 00:02:27,000
We want to measure cost in terms of understanding how the cost scales

48
00:02:27,000 --> 00:02:31,000
with the size of the input rather than the details of the cost.

49
00:02:31,000 --> 00:02:34,000
It's also related to universality.

50
00:02:34,000 --> 00:02:38,000
Understanding the cost of a procedure depends on having a fairly universal model

51
00:02:38,000 --> 00:02:40,000
of computing.

52
00:02:40,000 --> 00:02:42,000
We want to understand how much a given algorithm costs

53
00:02:42,000 --> 00:02:46,000
without depending on the details of how our particular computer works.

54
00:02:46,000 --> 00:02:48,000
And then we introduced the hash table.

55
00:02:48,000 --> 00:02:50,000
This was a kind of data abstraction.

56
00:02:50,000 --> 00:02:54,000
It was universal in the sense that it could contain any kind of element as its values.

57
00:02:54,000 --> 00:02:56,000
We didn't define it recursively.

58
00:02:56,000 --> 00:02:59,000
We could certainly have hash tables containing other hash tables,

59
00:02:59,000 --> 00:03:01,000
and we have dictionaries of dictionaries,

60
00:03:01,000 --> 00:03:06,000
so this also certainly has aspects of recursive definitions in place.

61
00:03:06,000 --> 00:03:10,000
And finally, in Unit 6 the main big idea was recursive procedures.

62
00:03:10,000 --> 00:03:14,000
Obviously, that fits in to our theme of recursive definitions.

63
00:03:14,000 --> 00:03:16,000
It also relates to universality.

64
00:03:16,000 --> 00:03:18,000
We showed how to make code that runs forever

65
00:03:18,000 --> 00:03:20,000
or keeps on going as long as it needs to

66
00:03:20,000 --> 00:03:24,000
without using a while loop, so that gives some support for the idea

67
00:03:24,000 --> 00:03:28,000
that all we really need are procedures, if, and a way to keep track of things

68
00:03:28,000 --> 00:03:30,000
to be able to define every computer program.

69
00:03:30,000 --> 00:03:33,000
We saw that any program that we could write as a recursive procedure

70
00:03:33,000 --> 00:03:35,000
we could also write as a while loop.

71
00:03:35,000 --> 00:03:37,000
So if you've followed everything that we've done in this class,

72
00:03:37,000 --> 00:03:39,000
you've really learned an amazing amount.

73
00:03:39,000 --> 00:03:41,000
And as you learn more and more about computing,

74
00:03:41,000 --> 00:03:44,000
you'll see these 3 themes of abstraction, universality,

75
00:03:44,000 --> 00:03:47,000
and recursive definitions all over the place.

76
00:03:47,000 --> 00:03:50,000
But you've already seen them many, many times just in the units of this course.
