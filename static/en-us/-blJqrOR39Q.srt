1
00:00:00,230 --> 00:00:02,969
So the MCS tree barrier is, it's also a

2
00:00:02,969 --> 00:00:07,290
tree barrier. It's a modified tree barrier, and what

3
00:00:07,290 --> 00:00:09,980
you'll notice, and once again, to make life simple,

4
00:00:09,980 --> 00:00:12,750
I'm showing you an arrangement of the MCS tree

5
00:00:12,750 --> 00:00:15,766
barrier with with 8 nodes. And it's a 4

6
00:00:15,766 --> 00:00:19,185
ary arrival tree. So the arrival tree and the

7
00:00:19,185 --> 00:00:22,410
wake-up tree are different in the MCS algorithm. The

8
00:00:22,410 --> 00:00:25,230
arrival tree is a 4 ary tree, and I'm showing

9
00:00:25,230 --> 00:00:28,558
the arrangement for N equal to 8. There are

10
00:00:28,558 --> 00:00:33,640
2 data structures that are associated with every parent, and

11
00:00:33,640 --> 00:00:36,090
and this one data structure is what is called

12
00:00:36,090 --> 00:00:38,940
have children, and the other data structure is what is

13
00:00:38,940 --> 00:00:42,200
called child not ready. And I'll describe to you

14
00:00:42,200 --> 00:00:45,350
what each one of these things is. Have children is

15
00:00:45,350 --> 00:00:48,420
a data structure that is associated with every node.

16
00:00:48,420 --> 00:00:50,580
And this data structure is going to have meaning only

17
00:00:50,580 --> 00:00:55,290
when a node is also a parent. So for example, if you look at this arrangement,

18
00:00:55,290 --> 00:01:02,210
node P0 has 4 children, P1, P2, P3 and P4. And if you look at node P1,

19
00:01:02,210 --> 00:01:10,630
it has 3 children. And so, P5, P6 and P7, has 3 children. And so we have a total

20
00:01:10,630 --> 00:01:15,730
of 8 processes, so we've got all 8 processes accounted for here. And therefore,

21
00:01:15,730 --> 00:01:22,340
these guys, P2, P3, P4, all the way up to P7, they're not as lucky as P0 and P1.

22
00:01:22,340 --> 00:01:27,950
They don't have children. So P2 through P7, they do not have children.

23
00:01:27,950 --> 00:01:31,330
And therefore, their HaveChild vector is, is, is

24
00:01:31,330 --> 00:01:33,460
false. So what you see here is a

25
00:01:33,460 --> 00:01:37,440
HaveChild vector and the HaveChild vector is, is

26
00:01:37,440 --> 00:01:40,830
true for P0 in all the big positions.

27
00:01:40,830 --> 00:01:43,310
And indicating that it has because it's a 4

28
00:01:43,310 --> 00:01:46,610
ary tree, it can potentially have up to four children.

29
00:01:46,610 --> 00:01:49,535
And yes, P0 has 4 children. And the have child

30
00:01:49,535 --> 00:01:52,932
vector is true all the way, whereas, for P1, the

31
00:01:52,932 --> 00:01:56,250
have child vector is true for the first 3 children

32
00:01:56,250 --> 00:01:59,252
and false for the fourth because it has only 3

33
00:01:59,252 --> 00:02:03,580
children. And these guys don't have any children. And similarly,

34
00:02:03,580 --> 00:02:06,570
these guys don't have any children. So, the HaveChild vector

35
00:02:06,570 --> 00:02:11,320
is completely false for P2 through P7. Now what

36
00:02:11,320 --> 00:02:15,020
about this Child Not Ready data structure? The Child

37
00:02:15,020 --> 00:02:17,810
Not Ready data structure is a way by which

38
00:02:17,810 --> 00:02:21,420
each of these processes has a unique spot in

39
00:02:21,420 --> 00:02:23,450
the parent to signal when they are arriving at

40
00:02:23,450 --> 00:02:25,685
a barrier. So what I'm showing you here, the

41
00:02:25,685 --> 00:02:29,470
arrows here are showing you the specific spot in

42
00:02:29,470 --> 00:02:31,570
this data structure, the child not ready data structure

43
00:02:31,570 --> 00:02:34,850
associated with his parent, for each of the child,

44
00:02:34,850 --> 00:02:37,860
there is a unique spot for this guy to

45
00:02:37,860 --> 00:02:41,530
indicate that they've arrived at the barrier. And similarly,

46
00:02:41,530 --> 00:02:44,970
for this set of children, the parent is P0 and

47
00:02:44,970 --> 00:02:47,730
each child has a unique spot in the parent's

48
00:02:47,730 --> 00:02:51,710
child not ready vector to indicate that they've arrived

49
00:02:51,710 --> 00:02:54,090
at the barrier. So the black arrows in this

50
00:02:54,090 --> 00:02:57,050
structure that I'm showing you is just showing the arrangement

51
00:02:57,050 --> 00:02:59,740
of the tree. And in terms of the,

52
00:02:59,740 --> 00:03:02,560
the parent child relationship for the 4-ary arrival

53
00:03:02,560 --> 00:03:05,250
tree. And the red arrows are the ones

54
00:03:05,250 --> 00:03:08,330
that are showing you the specific spot where

55
00:03:08,330 --> 00:03:11,060
a particular child is going to indicate to the

56
00:03:11,060 --> 00:03:14,570
parent that they have arrived at the barrier.

57
00:03:14,570 --> 00:03:17,020
And as you can see that since P1

58
00:03:17,020 --> 00:03:22,250
has 3children, the fourth spot is empty indicating it

59
00:03:22,250 --> 00:03:24,210
has to wait only on 3 children to know

60
00:03:24,210 --> 00:03:27,530
that the value is completed on the tree and so

61
00:03:27,530 --> 00:03:31,280
it can move up. So, the algorithm for barrier arrival

62
00:03:31,280 --> 00:03:34,800
is going to work like this. When each of these processors

63
00:03:34,800 --> 00:03:37,510
arrive at a barrier, what they going to do is

64
00:03:37,510 --> 00:03:40,470
they going to reach into the parent data structure, very specific

65
00:03:40,470 --> 00:03:43,450
spots, statically determined. That's important,

66
00:03:43,450 --> 00:03:45,150
right? So it's statically determined

67
00:03:45,150 --> 00:03:47,630
that this is a spot that P5 is going to indicate

68
00:03:47,630 --> 00:03:49,410
to the parent that it has arrived. This

69
00:03:49,410 --> 00:03:51,610
is the spot that P6 is going to indicate that

70
00:03:51,610 --> 00:03:56,280
it has arrived. P7, and similarly, once all these

71
00:03:56,280 --> 00:04:00,580
guys have arrived at the barrier, P1 can check,

72
00:04:00,580 --> 00:04:04,610
and the way P1 checks is, just sees whether

73
00:04:04,610 --> 00:04:08,000
this CN vector has ones in all these pods.

74
00:04:08,000 --> 00:04:09,760
If there is ones in all these pods, it

75
00:04:09,760 --> 00:04:12,930
can spin on this, and therefore, it knows that

76
00:04:12,930 --> 00:04:15,860
its children have arrived at the barrier. Once

77
00:04:15,860 --> 00:04:17,589
its children have arrived at the barrier, then it

78
00:04:17,589 --> 00:04:19,769
can move up the tree similar to what we

79
00:04:19,769 --> 00:04:24,820
saw in the vanilla tree barrier before. P1 is

80
00:04:24,820 --> 00:04:28,060
going to move up, and it's going to inform its parent.

81
00:04:28,060 --> 00:04:30,720
And the way it does is by going to

82
00:04:30,720 --> 00:04:34,434
a specific spot in the parent's child not ready

83
00:04:34,434 --> 00:04:37,900
vector. And there is specific spot assigned for P1.

84
00:04:37,900 --> 00:04:40,690
It's going to set this to indicate that it has arrived

85
00:04:40,690 --> 00:04:44,040
at the barrier. So what P0 is doing is waiting on

86
00:04:44,040 --> 00:04:46,650
everybody arrive. If P0 is the first let's say to arrive

87
00:04:46,650 --> 00:04:49,660
at the barrier. It's basically waiting on everybody else to arrive

88
00:04:49,660 --> 00:04:52,250
at the barrier. Could be P0 is the first one or

89
00:04:52,250 --> 00:04:54,990
the last one, it doesn't really matter. When P0 arrives at

90
00:04:54,990 --> 00:04:57,900
the barrier, it is going to wait on this child not

91
00:04:57,900 --> 00:05:02,700
ready all the bits being set by the children. And so,

92
00:05:02,700 --> 00:05:05,400
when each of these nodes arrive at a barrier, they

93
00:05:05,400 --> 00:05:09,700
know because of the arrangement of this data structure, they know

94
00:05:09,700 --> 00:05:14,730
their position in the data structure relative to other processes arriving

95
00:05:14,730 --> 00:05:17,850
at the barrier. And therefore P2, when it arrives at a

96
00:05:17,850 --> 00:05:20,670
barrier, It knows that all it has to do, given

97
00:05:20,670 --> 00:05:23,650
the structure, it has to go to this part on the

98
00:05:23,650 --> 00:05:25,770
parent vector and set it to 1. P3 has to go

99
00:05:25,770 --> 00:05:28,600
to this part set it to 1 and so on, okay?

100
00:05:28,600 --> 00:05:31,130
And so once it is done, P0 will know

101
00:05:31,130 --> 00:05:34,360
that everybody has arrived at the barrier. So, that's the

102
00:05:34,360 --> 00:05:37,780
arrival at the barrier. So once again, the recap. The

103
00:05:37,780 --> 00:05:40,920
arrival tree is a 4-ary tree. And the reason why

104
00:05:40,920 --> 00:05:44,530
they chose to use a 4 ary tree is because

105
00:05:44,530 --> 00:05:48,080
there is a periodic result backing the use of 4

106
00:05:48,080 --> 00:05:50,610
ary tree leading to the best performance, and that's the

107
00:05:50,610 --> 00:05:54,170
reason that they, they chose this particular arrangement. And the

108
00:05:54,170 --> 00:05:56,670
second thing that I want you to notice is that

109
00:05:56,670 --> 00:06:00,510
each processor is assigned to a unique spot by construction,

110
00:06:00,510 --> 00:06:03,540
a unique spot in this 4 ary tree. And because

111
00:06:03,540 --> 00:06:07,560
of its unique spot, a particular process on may have children,

112
00:06:07,560 --> 00:06:09,730
or may not have children and in this case, I

113
00:06:09,730 --> 00:06:13,080
showed you that P0 and P1 are have children, and

114
00:06:13,080 --> 00:06:15,660
the rest are not as lucky, because N is equal

115
00:06:15,660 --> 00:06:19,430
to 8. The other nice thing about this particular arrangement is

116
00:06:19,430 --> 00:06:23,050
that in a cash coherent multiprocessor, it

117
00:06:23,050 --> 00:06:27,460
is possible to arrange so that all the

118
00:06:27,460 --> 00:06:30,730
specific spots that children have to signal the

119
00:06:30,730 --> 00:06:33,470
parent can be packed into one word of

120
00:06:33,470 --> 00:06:36,940
a processor and therefore, a parent has to

121
00:06:36,940 --> 00:06:39,470
simply spend on one memory location in order

122
00:06:39,470 --> 00:06:41,570
to know the arrival of everybody, so it

123
00:06:41,570 --> 00:06:44,890
doesn't have to individually spend on memory locations

124
00:06:44,890 --> 00:06:47,140
for different processes, they can all be packed

125
00:06:47,140 --> 00:06:50,000
into one word, and the cash coherence mechanism

126
00:06:50,000 --> 00:06:52,890
will ensure that P0 is alerted every time

127
00:06:52,890 --> 00:06:56,440
any of these guys modify this shared memory location.
