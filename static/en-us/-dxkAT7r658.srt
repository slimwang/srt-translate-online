1
00:00:00,470 --> 00:00:03,290
At this point, we've seen how
polynomials can be represented by their

2
00:00:03,290 --> 00:00:06,190
values, as a set of distinct inputs, and

3
00:00:06,190 --> 00:00:09,430
how multiplying polynomials is easy,
when they're represented in this way.

4
00:00:10,490 --> 00:00:13,680
The problem is that we're really
interested in the coefficients.

5
00:00:13,680 --> 00:00:16,730
Recall that the coefficients of
the two polynomials can represent

6
00:00:16,730 --> 00:00:18,460
any two sequences that
we want to convolve.

7
00:00:19,930 --> 00:00:22,890
To exploit the speed of multiplying
in the value representation,

8
00:00:22,890 --> 00:00:27,500
therefore, we need an efficient way,
first to evaluate a polynomial

9
00:00:27,500 --> 00:00:31,350
at some distinct set of input points,
and an efficient way to interpolate

10
00:00:31,350 --> 00:00:34,110
back the result to
the coefficient representation.

11
00:00:35,280 --> 00:00:40,140
We'll focus on optimizing for quick
evaluation of the polynomials first.

12
00:00:40,140 --> 00:00:45,750
Our goal is to evaluate a polynomial
A of order N at N distinct points.

13
00:00:45,750 --> 00:00:47,710
Note that I've made the order
of the polynomial and

14
00:00:47,710 --> 00:00:50,060
the number of points the same here.

15
00:00:50,060 --> 00:00:52,420
We can always pad
the coefficients with zeroes,

16
00:00:52,420 --> 00:00:56,160
effectively increasing the order,
and we can always add more points.

17
00:00:56,160 --> 00:00:58,470
So there's no loss of generality here.

18
00:00:58,470 --> 00:01:01,940
As you did the calculation for the
exercise, you may have taken advantage

19
00:01:01,940 --> 00:01:06,440
of the fact that the input values were
arranged in positive and negative pairs.

20
00:01:06,440 --> 00:01:09,600
For higher order polynomials,
this advantage becomes even greater.

21
00:01:09,600 --> 00:01:13,940
All the even terms are the same for
x and negative x, and

22
00:01:13,940 --> 00:01:16,880
the odd terms are just
negatives of each other.

23
00:01:16,880 --> 00:01:21,720
With this in mind let's define
A sub e to be the polynomial whose

24
00:01:21,720 --> 00:01:25,870
coefficients are the even coefficients
of the original polynomial A.

25
00:01:26,930 --> 00:01:30,320
And we'll define Ao to be
the polynomial whose coefficients

26
00:01:30,320 --> 00:01:34,020
are the odd coefficients of
the original polynomial A.

27
00:01:34,020 --> 00:01:38,930
Then we can write A as
A sub e of x squared,

28
00:01:38,930 --> 00:01:43,110
plus x times A sub o of x squared.

29
00:01:43,110 --> 00:01:48,690
And we can get A of minus x just by
changing this one little sign here.

30
00:01:48,690 --> 00:01:54,370
And essentially we've found two
values for A for the price of one.

31
00:01:54,370 --> 00:01:58,220
More formally, let's say that
we choose x sub i such that

32
00:01:58,220 --> 00:02:03,220
x of i is equal to negative
x of I plus N over two.

33
00:02:03,220 --> 00:02:08,470
Then we can compute the values of the
polynomial two at a time by computing

34
00:02:08,470 --> 00:02:15,240
Ae and Ao at Xi squared and
then using them in these two equations.

35
00:02:15,240 --> 00:02:19,640
Overall we have changed
the problem from evaluating

36
00:02:19,640 --> 00:02:24,340
a polynomial of order and
at end points to evaluating two

37
00:02:24,340 --> 00:02:28,760
polynomials of order N over
two at N over two points.

38
00:02:28,760 --> 00:02:32,740
Plus doing the work of N more
additions and multiplications.

39
00:02:32,740 --> 00:02:33,990
This is good, but

40
00:02:33,990 --> 00:02:36,960
at its best we've only reduced
the running time by a constant factor.

41
00:02:37,990 --> 00:02:40,780
We need to be able to apply
this strategy recursively

42
00:02:40,780 --> 00:02:42,330
to change the asontonic running time.

43
00:02:43,520 --> 00:02:47,190
A set of points that would allow us to
do this would be very special indeed.
