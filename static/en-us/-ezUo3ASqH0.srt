1
00:00:00,270 --> 00:00:04,310
Talk a little bit more about what
happens when you open a file,

2
00:00:04,310 --> 00:00:07,460
and how does access
control factor into it.

3
00:00:07,460 --> 00:00:11,260
So, process here is making these
calls we're talking about.

4
00:00:11,260 --> 00:00:14,650
It first opens this file F,
without specifying the mode here,

5
00:00:14,650 --> 00:00:15,930
but maybe this is read.

6
00:00:15,930 --> 00:00:20,380
This line is going from user
to the operating system,

7
00:00:20,380 --> 00:00:23,230
system call,
this is the boundary between the two.

8
00:00:23,230 --> 00:00:26,150
This is untrusted, this is trusted,
as we talked about.

9
00:00:26,150 --> 00:00:29,320
So, this is all in the operating system.

10
00:00:29,320 --> 00:00:32,670
So basically,
the file got stored on the disk, and

11
00:00:32,670 --> 00:00:37,450
files that are actively being accessed,
the operating system keeps track of

12
00:00:37,450 --> 00:00:42,120
those information about a particular
file is in a file control block.

13
00:00:42,120 --> 00:00:44,300
So if you've done
the operating system's class,

14
00:00:44,300 --> 00:00:46,710
you have some idea of how
file systems are implemented.

15
00:00:46,710 --> 00:00:50,630
But for each file that we want
to access, we you know meta-data

16
00:00:50,630 --> 00:00:54,020
that we're talking about for
a file you know what's the file pointer,

17
00:00:54,020 --> 00:00:57,300
where should we read next,
where on disk the file blocks are.

18
00:00:57,300 --> 00:00:58,870
Other kind of information.

19
00:00:58,870 --> 00:01:01,380
We keep track of that in
the file control log.

20
00:01:01,380 --> 00:01:05,590
In Unix, well that's called an i-node,
and there's a table of these.

21
00:01:05,590 --> 00:01:10,500
That's where this i-node table stores
the meta-data about the active or

22
00:01:10,500 --> 00:01:11,830
currently open files.

23
00:01:11,830 --> 00:01:15,430
So this is, here,
I'm saying it file meta-data table.

24
00:01:15,430 --> 00:01:18,160
A file that you're going to
open has to be active,

25
00:01:18,160 --> 00:01:20,770
it it's not active,
it's going to get activated.

26
00:01:20,770 --> 00:01:24,210
So, there's something interesting
happen, when you open a file you tell

27
00:01:24,210 --> 00:01:27,270
the filename, the operating system's
actually is going to go and

28
00:01:27,270 --> 00:01:30,030
say, is this file currently active.

29
00:01:30,030 --> 00:01:35,110
If it is active then there is going to
be a file control block for it, okay.

30
00:01:35,110 --> 00:01:37,820
That's where the meta-data for
this file is going to be.

31
00:01:37,820 --> 00:01:41,550
So a process also has another data
structure that's called an open

32
00:01:41,550 --> 00:01:42,490
file table.

33
00:01:42,490 --> 00:01:44,420
Okay this is kept by
the operating system.

34
00:01:44,420 --> 00:01:47,030
It's per process data
structure we're talking about.

35
00:01:47,030 --> 00:01:50,440
So in this open file
table that we have for

36
00:01:50,440 --> 00:01:54,640
this process that is making
this open call, basically what

37
00:01:54,640 --> 00:01:59,300
we want to do in the open call is that
we want to see if the file is active.

38
00:01:59,300 --> 00:02:03,440
If it is then there is a meta-data
block or file control block for it.

39
00:02:03,440 --> 00:02:06,590
In the open file table, there is
some set of entries that we have.

40
00:02:06,590 --> 00:02:08,470
This is a fixed sized table.

41
00:02:08,470 --> 00:02:12,300
We're going to use one of those entries
to actually store a pointer to this.

42
00:02:12,300 --> 00:02:15,340
And the file descriptor we
return is actually nothing but

43
00:02:15,340 --> 00:02:16,560
an index into this table.

44
00:02:16,560 --> 00:02:20,230
So i is the index in this
table that we're returning.

45
00:02:20,230 --> 00:02:22,678
I think it was about access
check when do we perform.

46
00:02:22,678 --> 00:02:28,370
Actually in Unix-based systems, access
control is done when you open the file.

47
00:02:28,370 --> 00:02:31,050
At the time the file is opened
remember we're going to go in,

48
00:02:31,050 --> 00:02:33,990
we're going to find out if
the file is currently active or

49
00:02:33,990 --> 00:02:37,390
not, we're going to locate its file
into a block where the meta-data is.

50
00:02:37,390 --> 00:02:40,350
In particular the ACL is here too.

51
00:02:40,350 --> 00:02:44,610
With the ACL is here, then it was
nine bits that I was talking about.

52
00:02:44,610 --> 00:02:48,340
Depending on the user or
group the user is part of.

53
00:02:48,340 --> 00:02:52,150
I'm actually going to look at those
ACL bits that we're discussing.

54
00:02:52,150 --> 00:02:57,220
And if the mode here is read, and you
have read information, I do all this.

55
00:02:57,220 --> 00:02:59,010
Okay?
I'm going to grant you access

56
00:02:59,010 --> 00:03:01,330
Mode is right and
the right permission is here.

57
00:03:01,330 --> 00:03:03,980
I'm going to do all of this and
give you write permission and

58
00:03:03,980 --> 00:03:05,488
to place data in this file.

59
00:03:05,488 --> 00:03:09,590
So access check is going to happen
during the open calls execution in

60
00:03:09,590 --> 00:03:13,560
the operating system because we
locate this information where the ACL

61
00:03:13,560 --> 00:03:15,740
information is and
we're going to look that up.

62
00:03:15,740 --> 00:03:20,420
And if everything checks out we set
this up and return this file descriptor.

63
00:03:20,420 --> 00:03:24,430
So the reason we do it at
the time it's open is,

64
00:03:24,430 --> 00:03:28,040
that when you come to read,
you specify a file descriptor.

65
00:03:29,260 --> 00:03:32,960
So, it's going to say read I here,
for exam, that's what you're saying.

66
00:03:32,960 --> 00:03:37,320
Well, once I come to the operating
system, it's the that remember is

67
00:03:37,320 --> 00:03:41,820
an index into a table, that tells me,
it's this particular entry in the table.

68
00:03:41,820 --> 00:03:45,880
Follow the pointer that it points to,
that's where the file meta-data is, and

69
00:03:45,880 --> 00:03:47,960
that tells you where the file data is.

70
00:03:47,960 --> 00:03:52,170
I don't do any access check at
the time I do a read or write.

71
00:03:52,170 --> 00:03:55,770
I just sort of quickly follow these
pointers and get to the file.

72
00:03:55,770 --> 00:03:58,360
If I'm doing reads then I
find the file data to return

73
00:03:58,360 --> 00:03:59,800
to copy that into the buffer.

74
00:03:59,800 --> 00:04:03,400
If I'm doing a write then I copy the
data from the buffer into file cache or

75
00:04:03,400 --> 00:04:04,350
something like that.

76
00:04:04,350 --> 00:04:05,640
It gets copied.

77
00:04:05,640 --> 00:04:09,960
So there's no check done during
either read call or a write call.

78
00:04:09,960 --> 00:04:12,700
The check was done when we did the open,
okay.

79
00:04:12,700 --> 00:04:15,810
So the fact that the script
was returned to you

80
00:04:15,810 --> 00:04:18,990
at that time we did the checking and
now you're able to do that.

81
00:04:18,990 --> 00:04:21,839
If we opened it for read and
you tried to do write, of course.

82
00:04:21,839 --> 00:04:23,320
Of course we're going to stop that.

83
00:04:23,320 --> 00:04:24,270
Okay.

84
00:04:24,270 --> 00:04:25,890
That goes without saying.

85
00:04:25,890 --> 00:04:27,800
We don't have to go look for

86
00:04:27,800 --> 00:04:30,850
the particular to do the transversal
that we are talking about.
