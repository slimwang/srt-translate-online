1
00:00:00,000 --> 00:00:01,842
So we'll start with the thread per row approach.

2
00:00:01,842 --> 00:00:03,775
Let's start with the data structure.

3
00:00:03,775 --> 00:00:09,171
We're going to use the CSR, the compressed sparse row format here, just as we did in Unit 4.

4
00:00:09,171 --> 00:00:13,350
Recall that value contains the non-zero elements in the matrix,

5
00:00:13,350 --> 00:00:16,633
index gives the column of each entry,

6
00:00:16,633 --> 00:00:20,430
and row pointer contains the index of the beginning of each row.

7
00:00:20,430 --> 00:00:24,116
So each blue dot here corresponds to the element that begins each row,

8
00:00:24,116 --> 00:00:27,773
which is element 0, 2, 3, and 5.

9
00:00:27,773 --> 00:00:30,046
So let's just walk through some code.

10
00:00:30,046 --> 00:00:35,079
Note this code, like many spmv routines, calculates y+=mx.

11
00:00:35,079 --> 00:00:40,891
So it multiplies m by vector x and then adds it to the element y

12
00:00:40,891 --> 00:00:42,820
and resets the result as y.

13
00:00:42,820 --> 00:00:46,628
It adds the matrix vector product to the destination vector y.

14
00:00:46,628 --> 00:00:51,063
We're going to start by this line here computing the global index for each thread.

15
00:00:51,063 --> 00:00:55,201
The thread with this index i will calculate the result for row i.

16
00:00:55,201 --> 00:00:59,271
Next we're going to have an if statement, if row less than the number of rows.

17
00:00:59,271 --> 00:01:01,307
Why do we have this if statement?

18
00:01:01,307 --> 00:01:03,276
We're going to launch many blocks of many threads,

19
00:01:03,276 --> 00:01:07,431
and it might be that the number of rows is not a perfect multiple of blocks and threads.

20
00:01:07,431 --> 00:01:10,364
This if statement is a common one in CUDA programs.

21
00:01:10,364 --> 00:01:12,796
Inside the if is the meat of the routine.

22
00:01:12,796 --> 00:01:16,652
Recall that row pointer contains the indices of the starts of each row.

23
00:01:16,652 --> 00:01:23,170
So, for instance, the value 3 here says that the third element D here

24
00:01:23,170 --> 00:01:29,075
is the beginning of a particular row that then contains D and E. So we're going to start with D.

25
00:01:29,075 --> 00:01:32,064
We're going to start at the beginning of a row and we're going to go up to,

26
00:01:32,064 --> 00:01:36,400
but not including, the first element of the next row, so that's this loop right here.

27
00:01:36,400 --> 00:01:40,278
And at every iteration of that loop we will multiply 2 things.

28
00:01:40,278 --> 00:01:44,466
One is the value of that element, so in this case D,

29
00:01:44,466 --> 00:01:48,798
and the second is we check which column D is in.

30
00:01:48,798 --> 00:01:54,922
In this case D is in column 0 so we're going to look up the vector element

31
00:01:54,922 --> 00:01:58,854
at position 0 and multiply D by that vector element.

32
00:01:58,854 --> 00:02:04,528
So that's this value times that vector element, and then add that to dot.

33
00:02:04,528 --> 00:02:08,539
And when we're finally done, we take our destination value y,

34
00:02:08,539 --> 00:02:11,131
add it to dot, and put it back into y.
