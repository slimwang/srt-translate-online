1
00:00:00,400 --> 00:00:03,880
This is where a game design start to
be more of an art than a science.

2
00:00:03,880 --> 00:00:07,300
But, I'd argue that GigaGal
should handle her own collisions.

3
00:00:07,300 --> 00:00:08,650
It's GigaGal's jump state and

4
00:00:08,650 --> 00:00:11,990
velocity that will need to change
based on the result of the collision.

5
00:00:11,990 --> 00:00:14,290
So making her responsible
is the logical choice.

6
00:00:15,472 --> 00:00:19,120
Leaving the collision detection up to
the level is also a reasonable choice.

7
00:00:19,120 --> 00:00:21,388
It depends on how smart you
want to make your entities.

8
00:00:21,388 --> 00:00:24,610
There are certainly cases where you want
your game entities to just hold on to

9
00:00:24,610 --> 00:00:26,220
their position, velocity,
and texture, and

10
00:00:26,220 --> 00:00:28,540
not handle any of the logic themselves.

11
00:00:28,540 --> 00:00:30,480
That's not the direction we've
gone with this game, but

12
00:00:30,480 --> 00:00:32,330
it can be a reasonable choice.

13
00:00:32,330 --> 00:00:35,350
The platforms probably shouldn't be
the one checking to see if GigaGal

14
00:00:35,350 --> 00:00:36,750
has landed on them.

15
00:00:36,750 --> 00:00:39,810
If we were organizing things that way,
the platform would need to reach

16
00:00:39,810 --> 00:00:43,630
into GigaGal to fix her fall state and
that's probably not a good idea.

17
00:00:43,630 --> 00:00:47,110
We need to be careful about what
entities can affect other entities,

18
00:00:47,110 --> 00:00:50,610
lest we end up with a complicated web
of interactions that we can no longer

19
00:00:50,610 --> 00:00:51,900
reason about.

20
00:00:51,900 --> 00:00:54,410
We'll come back to this sort of
topic when we add enemies and

21
00:00:54,410 --> 00:00:55,150
bullets to the game.
