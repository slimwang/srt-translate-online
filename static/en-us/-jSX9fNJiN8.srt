1
00:00:00,510 --> 00:00:03,830
With a math background
we can now describe

2
00:00:03,830 --> 00:00:07,410
some of the most widely
used public key algorithms.

3
00:00:07,410 --> 00:00:09,370
The first is RSA.

4
00:00:09,370 --> 00:00:10,833
Named after its inventors.

5
00:00:10,833 --> 00:00:14,250
R backup RSA is

6
00:00:14,250 --> 00:00:18,860
the most widely used public key
algorithm and one of the very first.

7
00:00:18,860 --> 00:00:24,450
RSA supports both public key
encryption and digital signature.

8
00:00:24,450 --> 00:00:29,600
The security strength of RSA is
based on the hypothesis that,

9
00:00:29,600 --> 00:00:35,040
factoring a very large number into
two primes is a very hard problem.

10
00:00:35,040 --> 00:00:37,510
This is, given a large number

11
00:00:37,510 --> 00:00:42,700
it is computationally very hard
to factor it into two primes.

12
00:00:42,700 --> 00:00:45,560
RSA can support variable key lengths.

13
00:00:45,560 --> 00:00:50,833
In practice, most people use
a key length of 1,024 bits,

14
00:00:50,833 --> 00:00:54,233
or 2,048 bits, or even 4,096 bits.

15
00:00:54,233 --> 00:00:57,190
The plaintext length
can also be variable.

16
00:00:57,190 --> 00:01:01,300
In RSA,
every data is treated as an integer

17
00:01:01,300 --> 00:01:06,620
because we can interpret any data with
bits of one and zero as an integer.

18
00:01:06,620 --> 00:01:11,426
And the requirement here is that
the plaintext input has to be smaller in

19
00:01:11,426 --> 00:01:13,960
integer value than the key.

20
00:01:13,960 --> 00:01:17,720
The size of ciphertext is
the same as the key length.

21
00:01:17,720 --> 00:01:21,040
This summarizes the RSA algorithm.

22
00:01:21,040 --> 00:01:23,690
The first step is key generation.

23
00:01:23,690 --> 00:01:27,230
First we select two prime numbers,
p and q.

24
00:01:27,230 --> 00:01:31,090
Say each of them are at
least 512 bits long.

25
00:01:31,090 --> 00:01:32,790
And then we compute p times q.

26
00:01:32,790 --> 00:01:33,950
The result's n.

27
00:01:33,950 --> 00:01:38,262
And while we have p and
q we also compute totient n.

28
00:01:38,262 --> 00:01:45,190
Which is p minus one times q minus one
because both p and q are prime numbers.

29
00:01:45,190 --> 00:01:50,110
Then we select an integer e that
is relatively prime to totient n.

30
00:01:50,110 --> 00:01:51,720
After we have selected e,

31
00:01:51,720 --> 00:01:56,990
we find the multiplicative
inverse of e marked totient n.

32
00:01:56,990 --> 00:02:01,260
Having computed n, e and d,
now we can forget about p and

33
00:02:01,260 --> 00:02:03,880
q and forget about totient n.

34
00:02:03,880 --> 00:02:06,930
The public key is e and n.

35
00:02:06,930 --> 00:02:12,830
The private key, which we have to keep
to ourself and secure it, is d and n.

36
00:02:12,830 --> 00:02:17,710
Now for encryption, suppose Alice
has published her public key.

37
00:02:17,710 --> 00:02:21,760
And Bob wishes to send a message,
M, to Alice.

38
00:02:21,760 --> 00:02:25,520
And he wants only Alice
to be able to read M.

39
00:02:25,520 --> 00:02:31,520
So Bob obtains Alice's public key and
to encrypt message M,

40
00:02:31,520 --> 00:02:36,350
Bob computes M raised to
the power of e (mod n).

41
00:02:36,350 --> 00:02:41,285
For decryption on receipt
of this ciphertext, C,

42
00:02:41,285 --> 00:02:45,414
Alice will use her own private key,
D, and

43
00:02:45,414 --> 00:02:49,700
compute C raised to
the power of d (mod n).

44
00:02:49,700 --> 00:02:53,067
And this would result in
the original plaintext M.

45
00:02:54,140 --> 00:02:58,940
The property of RSA guarantees
that only Alice Can decrypt this

46
00:02:58,940 --> 00:03:02,660
message because only
she has the private key

47
00:03:02,660 --> 00:03:07,010
that's paired with the public key
that was used to encrypt the message.

48
00:03:07,010 --> 00:03:12,620
Again, every user can publish his or
her own public key and

49
00:03:12,620 --> 00:03:16,657
keep his or her own private key
securely to himself or herself.

50
00:03:16,657 --> 00:03:23,330
To encrypt message to a user say, Alice,
Bob would obtain Alice's public key and

51
00:03:23,330 --> 00:03:29,930
compute the ciphertext by raising
the plaintext to the power of e mod n.

52
00:03:29,930 --> 00:03:33,570
To decrypt,
Alice would use her own private key

53
00:03:33,570 --> 00:03:37,190
to raise the ciphertext to
the power of d and then mod n.

54
00:03:37,190 --> 00:03:39,820
What about creating digital signature?

55
00:03:39,820 --> 00:03:43,160
Alice will use her own private key

56
00:03:43,160 --> 00:03:46,374
to raise the message m
to a power of d mod n.

57
00:03:46,374 --> 00:03:48,440
To verify,

58
00:03:48,440 --> 00:03:53,620
Bob would get Alice's public key, raise
the signature to a power of e and mod n,

59
00:03:53,620 --> 00:03:58,800
and this will produce the original
message m and verify the signature.

60
00:03:58,800 --> 00:04:03,310
Again here the property
of RSA guarantees that

61
00:04:03,310 --> 00:04:06,780
Bob will know that the signature
was created by Alice,

62
00:04:06,780 --> 00:04:10,670
because only she has the private key
that is paired with the public key

63
00:04:10,670 --> 00:04:13,610
that Bob was able to use
to verify the signature.
