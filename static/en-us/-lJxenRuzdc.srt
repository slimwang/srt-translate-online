1
00:00:00,250 --> 00:00:03,750
The second design alternative gave concurrency but

2
00:00:03,750 --> 00:00:06,490
at the cost of exposing the business

3
00:00:06,490 --> 00:00:09,020
logic, and the third design alternative that

4
00:00:09,020 --> 00:00:11,770
I'm going to explain to you, is going to

5
00:00:11,770 --> 00:00:14,430
correct that, it's using session bean with

6
00:00:14,430 --> 00:00:18,101
entity bean. The idea is that, we're going to

7
00:00:18,101 --> 00:00:21,850
associate it with each client session, a

8
00:00:21,850 --> 00:00:25,580
session facade, it's a design pattern that allows

9
00:00:25,580 --> 00:00:28,920
you to construct a session and associate it

10
00:00:28,920 --> 00:00:31,750
with a particular client. So, for instance, in

11
00:00:31,750 --> 00:00:34,555
this case, this session facade corresponds to servelet

12
00:00:34,555 --> 00:00:36,850
1, which corresponds to the client that it

13
00:00:36,850 --> 00:00:40,930
is serving similarly this session facade, serving client

14
00:00:40,930 --> 00:00:43,660
number 2. And as in the first design,

15
00:00:43,660 --> 00:00:46,360
what you see is that the web container

16
00:00:46,360 --> 00:00:50,710
contains only the servelet and the presentation logic that

17
00:00:50,710 --> 00:00:54,710
is associated with that particular servlet. Now

18
00:00:54,710 --> 00:00:57,210
the business logic, is moved back into

19
00:00:57,210 --> 00:01:02,580
the EJB container, and it sits with the session facade. And we still have the

20
00:01:02,580 --> 00:01:06,520
data access objects implemented using the entity

21
00:01:06,520 --> 00:01:08,430
beam concept that I mentioned in the

22
00:01:08,430 --> 00:01:12,530
second design alternative. So, the session facade

23
00:01:12,530 --> 00:01:16,240
is worrying about all the data access needs

24
00:01:16,240 --> 00:01:19,790
of its associated business logic. Similarly, this session

25
00:01:19,790 --> 00:01:22,400
facade is worrying about all the data access

26
00:01:22,400 --> 00:01:25,480
needs of this business logic, and what the

27
00:01:25,480 --> 00:01:27,650
session facade is going to do is, it's going to

28
00:01:27,650 --> 00:01:31,650
form out the data access requests corresponding to

29
00:01:31,650 --> 00:01:35,480
the business logic associated with this session. So,

30
00:01:35,480 --> 00:01:38,630
there's an opportunity, again, to exploit parallelism because

31
00:01:38,630 --> 00:01:41,540
you can form out parallel requests to multiple

32
00:01:41,540 --> 00:01:44,784
entity beans. That are handling the data access

33
00:01:44,784 --> 00:01:48,060
to different portions of the database and similar

34
00:01:48,060 --> 00:01:52,116
to the second, design alternative, we're going to structure

35
00:01:52,116 --> 00:01:54,690
this database to be at whatever level of

36
00:01:54,690 --> 00:01:57,830
granularity that we think is the right one.

37
00:01:57,830 --> 00:02:00,210
So this entity bean may be responsible for

38
00:02:00,210 --> 00:02:07,210
an individual role. Or a cluster of rows, and so on. And that way, we can have

39
00:02:07,210 --> 00:02:10,820
the granularity that we want for parallel access so

40
00:02:10,820 --> 00:02:13,900
that the business logic can be served in parallel,

41
00:02:13,900 --> 00:02:16,310
and at the same time, we have moved the

42
00:02:16,310 --> 00:02:19,860
business logic back into the EJB container. So, the

43
00:02:19,860 --> 00:02:23,830
business logic is not exposed outside the corporate network.

44
00:02:23,830 --> 00:02:25,690
And we have a couple of choices of how

45
00:02:25,690 --> 00:02:28,540
we want to structure the session bean with the enity

46
00:02:28,540 --> 00:02:32,790
bean. Now the whip container is going to use RMI. A

47
00:02:32,790 --> 00:02:36,640
remote interface in the distributed object framework

48
00:02:36,640 --> 00:02:39,950
of Java. In order to communicate with

49
00:02:39,950 --> 00:02:43,310
the business logic, and the session facade

50
00:02:43,310 --> 00:02:47,100
is going to communicate with the entity bean either

51
00:02:47,100 --> 00:02:49,850
using RMI. In that case, the interaction

52
00:02:49,850 --> 00:02:51,800
between the session facade and the entity bean

53
00:02:51,800 --> 00:02:54,080
is very similar to the interaction between

54
00:02:54,080 --> 00:02:57,810
the servlet and the session facade. That is,

55
00:02:57,810 --> 00:03:01,160
it'll use RMI. Or, we can choose to

56
00:03:01,160 --> 00:03:05,610
construct the interface between the session facade and

57
00:03:05,610 --> 00:03:08,690
the entity bean, using local interfaces. And the

58
00:03:08,690 --> 00:03:11,040
reason why we may want to choose one or

59
00:03:11,040 --> 00:03:14,770
the other, using the RMI allows us to,

60
00:03:14,770 --> 00:03:17,650
sort of, keep this entity bean wherever we

61
00:03:17,650 --> 00:03:20,330
want in the network. On the other hand,

62
00:03:20,330 --> 00:03:23,490
if we chose the local option, what we're seeing

63
00:03:23,490 --> 00:03:29,530
is that we will co locate the entity beans in the same EJB container as the

64
00:03:29,530 --> 00:03:32,900
business logic and the session facade. The advantage

65
00:03:32,900 --> 00:03:36,790
of doing that, is that because it is local,

66
00:03:36,790 --> 00:03:39,900
we don't have to incur network communication, in

67
00:03:39,900 --> 00:03:43,280
order to go and fetch the data from the

68
00:03:43,280 --> 00:03:45,680
entity bean. The entity bean, of course, has

69
00:03:45,680 --> 00:03:48,800
to fetch it from the database servers, but once

70
00:03:48,800 --> 00:03:51,480
it fetches it from the database servers, it

71
00:03:51,480 --> 00:03:53,810
doesn't have to go through the network in order

72
00:03:53,810 --> 00:03:55,930
to give it to the business logic if

73
00:03:55,930 --> 00:04:00,180
you're using local interfaces. So that's another bifurcation within

74
00:04:00,180 --> 00:04:03,740
this design alternative. We can choose to construct

75
00:04:03,740 --> 00:04:07,820
this portion of the application using remote interface or

76
00:04:07,820 --> 00:04:12,040
local interface. And the prose of this structure is

77
00:04:12,040 --> 00:04:14,710
in some sense getting the best of both worlds.

78
00:04:14,710 --> 00:04:18,130
We're not exposing the business logic. Which

79
00:04:18,130 --> 00:04:21,432
was the virtue of the first design alternative,

80
00:04:21,432 --> 00:04:25,616
and we're also getting concurrency through the data

81
00:04:25,616 --> 00:04:29,580
access object encoded as entity beans. So you

82
00:04:29,580 --> 00:04:31,950
get the concurrency and the fact that the

83
00:04:31,950 --> 00:04:34,520
business logic is within the corporate network. Both

84
00:04:34,520 --> 00:04:37,230
of those good features are available in this

85
00:04:37,230 --> 00:04:40,320
design alternative. Now is there a con well,

86
00:04:40,320 --> 00:04:44,700
we are incurring additional network access in order

87
00:04:44,700 --> 00:04:47,900
to do the servers that we want for

88
00:04:47,900 --> 00:04:50,810
the data access, and that can be mitigated

89
00:04:50,810 --> 00:04:54,330
by call locating, the entity bean, and the

90
00:04:54,330 --> 00:04:56,840
session facade in the same EJB container. So

91
00:04:56,840 --> 00:04:58,970
that's a choice that you can make. So

92
00:04:58,970 --> 00:05:01,520
these are the 3 design alternatives that we

93
00:05:01,520 --> 00:05:05,320
talked about. One is a coarse grain session

94
00:05:05,320 --> 00:05:09,200
bean alternative. The second is a finer

95
00:05:09,200 --> 00:05:13,380
grained data access object alternative, and the

96
00:05:13,380 --> 00:05:17,580
third is sort of putting together the first two. Putting the session bean as a

97
00:05:17,580 --> 00:05:21,250
facade. To actually access the data access

98
00:05:21,250 --> 00:05:23,700
objects, which are encoded in entity bean

99
00:05:23,700 --> 00:05:26,250
so that you can get concurrency. Notice

100
00:05:26,250 --> 00:05:31,170
that in talking about these different design alternatives,

101
00:05:31,170 --> 00:05:33,320
we're only talking about how to break up

102
00:05:33,320 --> 00:05:37,070
that application, the logic of that application, which consists

103
00:05:37,070 --> 00:05:41,830
of presentation to the client, business logic that

104
00:05:41,830 --> 00:05:45,520
has to do with decisions that this enterprise has

105
00:05:45,520 --> 00:05:48,100
to make in order to service this request,

106
00:05:48,100 --> 00:05:50,860
and database access in order to get the data

107
00:05:50,860 --> 00:05:56,370
that is needed in order to do the work that is involved. In serving up the needs

108
00:05:56,370 --> 00:06:03,040
of a particular client. Lots of things that are needed in addition to writing

109
00:06:03,040 --> 00:06:06,260
about the application logic itself. And those

110
00:06:06,260 --> 00:06:08,760
are things like security, persistence, and so

111
00:06:08,760 --> 00:06:15,440
on. The power of object technology is the fact that So that's the

112
00:06:15,440 --> 00:06:22,400
thing that I wanted to start with and I wanted to give you the different

113
00:06:22,400 --> 00:06:28,640
design alternatives that exist in structuring these complex

114
00:06:28,640 --> 00:06:34,520
services using the object technology to reuse components

115
00:06:34,520 --> 00:06:39,990
instructed in structuring complex applications.
