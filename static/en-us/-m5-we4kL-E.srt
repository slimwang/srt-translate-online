1
00:00:00,380 --> 00:00:02,760
>> I'm going to do a quick
review of function syntax and

2
00:00:02,760 --> 00:00:05,500
some of the other things
we've seen with functions.

3
00:00:05,500 --> 00:00:09,070
We know that a basic function
starts with the func keyword and

4
00:00:09,070 --> 00:00:09,970
then a function name.

5
00:00:09,970 --> 00:00:13,470
And then, anything we want in the body
of the function goes in between

6
00:00:13,470 --> 00:00:14,580
the curly braces here.

7
00:00:15,770 --> 00:00:18,890
Some other formats you may see
are like this one that takes one

8
00:00:18,890 --> 00:00:20,060
integer parameter.

9
00:00:20,060 --> 00:00:23,080
And you can see its type Int,
indicated here.

10
00:00:23,080 --> 00:00:25,790
And this last example we see
takes multiple parameters.

11
00:00:25,790 --> 00:00:30,005
We have one integer parameter and
then a second integer parameter.

12
00:00:30,005 --> 00:00:32,023
And as we've mentioned, and
you've probably noticed,

13
00:00:32,023 --> 00:00:33,765
you've been using functions
since the maze app.

14
00:00:33,765 --> 00:00:36,285
Here are two examples
of the print function.

15
00:00:36,285 --> 00:00:40,625
And you'll notice here on the right side
we can see what is being printed out.

16
00:00:40,625 --> 00:00:43,525
Or you can click these bubbles to
blow it out into the middle of

17
00:00:43,525 --> 00:00:45,135
the playground.

18
00:00:45,135 --> 00:00:48,870
Next, let's see an example of
defining our own function say hello.

19
00:00:48,870 --> 00:00:52,500
This function takes no parameters and
it prints out hello.

20
00:00:52,500 --> 00:00:53,690
Nothing too complex here.

21
00:00:54,810 --> 00:00:56,250
Let's take this one step forward and

22
00:00:56,250 --> 00:00:57,880
look at a function
that takes a parameter.

23
00:00:58,890 --> 00:01:02,930
If we scroll down a little bit we'll see
this is the function sayHelloToStudent.

24
00:01:02,930 --> 00:01:06,760
And all this boilerplate code up here at
the top is to create a Student struct

25
00:01:06,760 --> 00:01:09,940
and initialize some
Student struct instances.

26
00:01:09,940 --> 00:01:13,040
And then, in the body of the function
we've taken the student parameter and

27
00:01:13,040 --> 00:01:13,920
we're printing out it's name.

28
00:01:13,920 --> 00:01:17,730
And since it's called multiple times,
if we click

29
00:01:17,730 --> 00:01:21,450
this little white circle here to blow
it out we see the very last printout.

30
00:01:21,450 --> 00:01:24,070
But if you click value
history we can see all

31
00:01:24,070 --> 00:01:27,460
three of the printouts because
of these function calls here.

32
00:01:27,460 --> 00:01:29,970
In this next example,
we have the same student struct,

33
00:01:29,970 --> 00:01:32,620
and we have a new function
called greet student.

34
00:01:32,620 --> 00:01:33,980
It takes multiple parameters.

35
00:01:33,980 --> 00:01:37,460
It takes one student parameter and
then a boolean parameter called late for

36
00:01:37,460 --> 00:01:38,630
class.

37
00:01:38,630 --> 00:01:40,690
To call this function,
we write the function name,

38
00:01:40,690 --> 00:01:45,012
greetStudent, followed by our student
struct instance, in this case gabrielle.

39
00:01:45,012 --> 00:01:48,580
And then, we need the external
parameter name, which for

40
00:01:48,580 --> 00:01:50,750
this boolean value is late for class.

41
00:01:50,750 --> 00:01:53,670
And then, a boolean value,
in this case false.

42
00:01:53,670 --> 00:01:56,670
And here we see the output
of the three function calls.

43
00:01:56,670 --> 00:01:58,340
Let's move on to naming parameters.

44
00:01:58,340 --> 00:02:00,740
I really want to focus on this section.

45
00:02:00,740 --> 00:02:02,880
The code here at the top
is the same as before.

46
00:02:02,880 --> 00:02:06,970
We define a student struct, and then we
create some student struct instances.

47
00:02:06,970 --> 00:02:10,330
But the function definition is where
things really get interesting.

48
00:02:10,330 --> 00:02:13,820
For the student parameter we
specified both an external name and

49
00:02:13,820 --> 00:02:15,210
an internal name.

50
00:02:15,210 --> 00:02:18,370
And then the lateForClass, by default,
uses this same internal and

51
00:02:18,370 --> 00:02:21,020
external name lateForClass.

52
00:02:21,020 --> 00:02:24,240
So, we can see here at the bottom for
all three of these function calls

53
00:02:24,240 --> 00:02:27,010
we're using the external names for
both parameters.

54
00:02:27,010 --> 00:02:30,260
And remember, by default the very
first parameter normally doesn't use

55
00:02:30,260 --> 00:02:33,410
an external parameter name unless
you explicitly specify one.

56
00:02:33,410 --> 00:02:37,870
Now, I want to show you something that
took me a really long time to understand

57
00:02:37,870 --> 00:02:39,710
when I was looking at
Apple's documentation.

58
00:02:39,710 --> 00:02:42,260
And you're going to be
doing this more and more.

59
00:02:42,260 --> 00:02:44,650
We haven't started to
talk about classes yet.

60
00:02:44,650 --> 00:02:48,190
Classes can have functions known as
methods that are associated with them.

61
00:02:48,190 --> 00:02:50,665
This is the UIViewController Class.

62
00:02:50,665 --> 00:02:52,510
And let's pick one of its methods.

63
00:02:52,510 --> 00:02:55,900
I'm going to search for
viewWILLDisappear.

64
00:02:57,200 --> 00:03:00,840
If we click viewWILLDisappear it'll blow
out all the extra information about this

65
00:03:00,840 --> 00:03:02,420
particular method.

66
00:03:02,420 --> 00:03:04,902
So, we can look at its swift
definition here at the top.

67
00:03:04,902 --> 00:03:08,100
Notice how the function takes
one parameter, animated.

68
00:03:08,100 --> 00:03:10,410
And for
an external name it uses an underscore.

69
00:03:10,410 --> 00:03:14,460
When you see this on Apple's
documentation it means that default

70
00:03:14,460 --> 00:03:17,000
external parameter name should be used.

71
00:03:17,000 --> 00:03:20,980
And remember, since this is the first
parameter, the default external name for

72
00:03:20,980 --> 00:03:22,550
it is nothing.

73
00:03:22,550 --> 00:03:24,880
It just is omitted because
its the first parameter.

74
00:03:25,970 --> 00:03:29,550
And notice, the viewWillDisappear does
not use any external parameter name, and

75
00:03:29,550 --> 00:03:32,520
that's the default behavior for
the first parameter.

76
00:03:32,520 --> 00:03:33,020
And that's it.
