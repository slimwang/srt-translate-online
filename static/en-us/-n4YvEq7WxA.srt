1
00:00:00,180 --> 00:00:03,430
So, and I have a quiz, to see if you can figure out, either through experiments,

2
00:00:03,430 --> 00:00:06,420
or logic alone. But probably you'll want to do some experiments. How default

3
00:00:06,420 --> 00:00:09,892
parameters work and why there's certain pitfalls to using them. One issue some

4
00:00:09,892 --> 00:00:12,882
people have with the provided list depend method, is that it doesn't actually

5
00:00:12,882 --> 00:00:18,006
return anything. It's a really common mistake to assign to p the result of

6
00:00:18,006 --> 00:00:22,626
p.append. In this case, while p.append modifies the value of p, but it doesn't

7
00:00:22,626 --> 00:00:26,976
return the list p, it returns none. So after this the value of p will be none,

8
00:00:26,976 --> 00:00:30,894
which is probably not what we want. There are lots of situations where we might

9
00:00:30,894 --> 00:00:33,973
want to use append in this kind of functional way. We might want to pass in the

10
00:00:33,973 --> 00:00:37,150
result of appending to a new function. So I'm going to try to define a function

11
00:00:37,150 --> 00:00:41,030
that does that. So I want a function, my-append, that behaves like this. If we

12
00:00:41,030 --> 00:00:45,255
call it with just one parameter, it'll create a new list containing that as the

13
00:00:45,255 --> 00:00:48,846
only element. If we call it like this, passing in two parameters, the first one

14
00:00:48,846 --> 00:00:52,630
being orange, the second one, the result of my-append apple. Well then, what we

15
00:00:52,630 --> 00:00:57,210
would like to get is a list containing the elements apple and orange. This will

16
00:00:57,210 --> 00:01:00,670
allow us to write code in a fairly compact way. So we could try to define

17
00:01:00,670 --> 00:01:05,006
my-append like this using a default parameter. This seems to almost work. So

18
00:01:05,006 --> 00:01:09,372
here, we'll call my-append as shown above. And we do indeed get the list apple,

19
00:01:09,372 --> 00:01:12,608
orange as desired. But there's something really broken about this code. And I

20
00:01:12,608 --> 00:01:15,220
want to see if you can figure out what it is. You may need to do a few

21
00:01:15,220 --> 00:01:18,100
experiments to figure that out, but it should all make sense once you think it

22
00:01:18,100 --> 00:01:22,326
through. Here are the choices. The default parameters initialized to empty list,

23
00:01:22,326 --> 00:01:25,844
but default parameters can only be None. The second choice is the default

24
00:01:25,844 --> 00:01:29,276
parameters initialized when the function is first called, and then, that same

25
00:01:29,276 --> 00:01:32,510
value is reused each time. And the third choice is default list parameters

26
00:01:32,510 --> 00:01:35,927
initialized when the function is defined and that same object is reused for each

27
00:01:35,927 --> 00:01:39,524
call. See if you can figure out which is the reason this code doesn't behave as

28
00:01:39,524 --> 00:01:40,003
desired.
