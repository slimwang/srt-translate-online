1
00:00:00,500 --> 00:00:01,970
What did you find, David?

2
00:00:01,970 --> 00:00:05,050
>> So we've got A right here and
Y right here.

3
00:00:05,050 --> 00:00:07,920
We've got a line that goes through
the two that differentiates them

4
00:00:07,920 --> 00:00:10,060
that roughly lines up with 2E.

5
00:00:10,060 --> 00:00:13,280
So I said 2E.
>> That looks like a good answer to me.

6
00:00:13,280 --> 00:00:17,880
Recall that when we were using the table
to organize the case memory previously,

7
00:00:17,880 --> 00:00:20,639
we were very concerned that this side
of the table would grow very large.

8
00:00:22,290 --> 00:00:26,080
It will become very difficult to search
for a specific case in that table.

9
00:00:27,610 --> 00:00:29,700
The potential answer to that.

10
00:00:31,470 --> 00:00:36,380
By asking a question we are quickly
able to prune away one part of the tree.

11
00:00:36,380 --> 00:00:39,510
That makes this search
process much more efficient.

12
00:00:39,510 --> 00:00:41,790
And that's the point of
the discrimination tree.

13
00:00:41,790 --> 00:00:44,030
In both organizational scheme,
the table and

14
00:00:44,030 --> 00:00:48,527
the discrimination tree, we are trying
to accommodate and accumulate new cases.

15
00:00:48,527 --> 00:00:52,520
But in the case of the discrimination
tree, by asking the right

16
00:00:52,520 --> 00:00:56,020
questions to the right nodes, we make
the search process more efficient.

17
00:00:56,020 --> 00:00:58,480
>> So for those of you
familiar with big O notation,

18
00:00:58,480 --> 00:01:02,420
you'll notice that the efficiency of
searching the case library organized

19
00:01:02,420 --> 00:01:05,670
by indices was linear,
whereas here it's logarithmic.
