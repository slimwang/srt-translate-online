1
00:00:00,000 --> 00:00:04,000
It's time to introduce a new regular expression--plus.

2
00:00:04,000 --> 00:00:09,000
This is really handy when we want to match one or more of something.

3
00:00:09,000 --> 00:00:12,000
This is a very concise way of listing, actually, an infinite number of possibilities.

4
00:00:12,000 --> 00:00:20,000
If I write the regular expression "a" followed by a plus, it matches "a," "aa," "aaa," "aaaa."

5
00:00:20,000 --> 00:00:26,000
The plus looks back to the previous regular expression and changes the meaning.

6
00:00:26,000 --> 00:00:33,000
Instead of just matching that once, you match it once or more--as many times as you'd like.

7
00:00:33,000 --> 00:00:40,000
Here I've shown another example. We're looking for 0 through 1 repeated one or more times.

8
00:00:40,000 --> 00:00:44,000
The interpretation here is every time you repeat you can make a different choice.

9
00:00:44,000 --> 00:00:51,000
This matches "0" and "1," "00" and "11," but also "01."

10
00:00:51,000 --> 00:00:54,000
This required us to pick a 0 the first time and a 1 the second time.

11
00:00:54,000 --> 00:00:56,000
That's totally fine with the plus.

12
00:00:56,000 --> 00:00:58,000
"1010" is a favorite year of mine.

13
00:00:58,000 --> 00:01:01,000
It's about when Murasaksi Shikibu wrote The Tale of Genji.

14
00:01:01,000 --> 00:01:06,000
She is often credited with writing the first novel--the first psychological novel,

15
00:01:06,000 --> 00:01:08,000
although this is the subject of some dispute.

16
00:01:08,000 --> 00:01:12,000
There is a minor bit of ambiguity I need to clear up with this plus.

17
00:01:12,000 --> 00:01:18,000
Let's say that we're looking for numbers 0 through 9 plus in the string "13 from 1 in 1776."

18
00:01:18,000 --> 00:01:22,000
One possible answer is 13, 1, and 1776,

19
00:01:22,000 --> 00:01:24,000
but this plus just means 1 or more.

20
00:01:24,000 --> 00:01:27,000
Is there anything that says that I have to match them all at the same time

21
00:01:27,000 --> 00:01:33,000
or could I break up 1776 into four different one-letter strings.

22
00:01:33,000 --> 00:01:37,000
It turns out that there is a rule in regular expressions called "maximal munch,"

23
00:01:37,000 --> 00:01:40,000
which says that a regular expression should consume, or eat, or match

24
00:01:40,000 --> 00:01:44,000
the biggest string it can and not smaller parts.

25
00:01:44,000 --> 00:01:48,000
So we and Python and other people studying regular expressions are going to get this answer:

26
00:01:48,000 --> 00:01:56,000
13, 1, 1776, because 1776 is the maximal munch we can get here for 0 through 9 plus.

27
00:01:56,000 --> 00:01:59,000
Don't stop early. Go all the way.

28
00:01:59,000 --> 00:02:03,000
All right. Let's get a little more practice with compound regular expression matching,

29
00:02:03,000 --> 00:02:05,000
including the plus.

30
00:02:05,000 --> 00:02:10,000
Down here I've written a regular expression dot findall expression in Python

31
00:02:10,000 --> 00:02:12,000
and a bunch of possible answers.

32
00:02:12,000 --> 00:02:18,000
I'd like you to check the ones that could be elements of the return value of this Python expression.

33
00:02:18,000 --> 00:02:23,000
We're looking for 0 through 9 followed by--oh, what does this mean?

34
00:02:23,000 --> 00:02:25,000
I haven't shown this to you yet.

35
00:02:25,000 --> 00:02:27,000
We just have open brackets, a space, and a closed bracket.

36
00:02:27,000 --> 00:02:30,000
That means just match space.

37
00:02:30,000 --> 00:02:34,000
Then finally 0 through 9 plus.

38
00:02:34,000 --> 00:02:37,000
Remember the plus only applies to this last 0 through 9.

39
00:02:37,000 --> 00:02:41,000
We're looking for all of these in that torture string I made up earlier.

40
00:02:41,000 --> 00:02:43,154
Let's try it out.
