1
00:00:00,330 --> 00:00:03,090
Okay, so we saw how this
linear layout contains two

2
00:00:03,090 --> 00:00:05,270
children text views inside it.

3
00:00:05,270 --> 00:00:08,480
By the way, these background colors
are just a teaching tool to help you

4
00:00:08,480 --> 00:00:13,210
understand that these two children
text views are inside this parent.

5
00:00:13,210 --> 00:00:15,940
The red and blue colors actually
won't show up on the device

6
00:00:15,940 --> 00:00:20,100
unless you specifically set them as
background colors on these views.

7
00:00:20,100 --> 00:00:23,110
To show you what I mean let's
go to the XML Visualizer.

8
00:00:23,110 --> 00:00:25,270
If we drop in the code
to the XML Visualizer,

9
00:00:25,270 --> 00:00:27,570
this is what it looks
like on the device.

10
00:00:27,570 --> 00:00:30,020
So first we have
a LinearLayout viewgroup, and

11
00:00:30,020 --> 00:00:33,850
this is transparent because there's
no background color set on it.

12
00:00:33,850 --> 00:00:36,680
The first child is a TextView
that sets guest list, so

13
00:00:36,680 --> 00:00:38,780
that shows up at the top here.

14
00:00:38,780 --> 00:00:41,580
The second child is a TextView
that says Kunal and

15
00:00:41,580 --> 00:00:44,020
that shows up below the first TextView.

16
00:00:44,020 --> 00:00:47,540
Now, if I copy this TextView and
paste it below this one,

17
00:00:47,540 --> 00:00:49,760
what do you think will happen?

18
00:00:49,760 --> 00:00:54,270
Yup, we have another Kunal that
shows out right below the first one.

19
00:00:54,270 --> 00:00:57,340
Okay, so the pattern seems to
be if we add more TextViews,

20
00:00:57,340 --> 00:01:01,570
here, then they'll just show up
one after the other in this list.

21
00:01:01,570 --> 00:01:03,570
Now let's look at the code more closely.

22
00:01:03,570 --> 00:01:05,655
It starts with an opening
angle bracket and

23
00:01:05,655 --> 00:01:08,230
then the view name,
which is LinearLayout.

24
00:01:08,230 --> 00:01:12,260
Then it lists a bunch of attributes and
then there's a closing angle bracket.

25
00:01:12,260 --> 00:01:15,220
Notice that there's no forward slash
because this is just the opening

26
00:01:15,220 --> 00:01:16,910
tag of the LinearLayout.

27
00:01:16,910 --> 00:01:19,790
The closing tag is all
the way down here, because we

28
00:01:19,790 --> 00:01:24,470
want to insert children elements in
between the opening and the closing tag.

29
00:01:24,470 --> 00:01:28,430
But for example, for this test view,
since there are no children within that,

30
00:01:28,430 --> 00:01:31,330
then we can just use
a self closing tag for it.

31
00:01:31,330 --> 00:01:35,330
Same for this text view here,
and this text view here.

32
00:01:35,330 --> 00:01:38,410
So when we say a view group
contains children views,

33
00:01:38,410 --> 00:01:42,850
then we need to inset them in between
the opening and closing tags.

34
00:01:42,850 --> 00:01:45,900
Now, the other thing you may have
noticed is this attribute called Android

35
00:01:45,900 --> 00:01:48,670
orientation equals vertical.

36
00:01:48,670 --> 00:01:50,330
We haven't seen this before, so

37
00:01:50,330 --> 00:01:53,310
let's look at the Android documentation
like I showed you earlier.

38
00:01:54,680 --> 00:01:59,075
I open up a new browser window, and
then I type in android orientation.

39
00:01:59,075 --> 00:02:01,735
The first result is about
a LinearLayout, and

40
00:02:01,735 --> 00:02:03,555
it's on the developer.android.com site.

41
00:02:03,555 --> 00:02:04,495
So let's click on it.

42
00:02:04,495 --> 00:02:07,505
Just like the textview documentation,
it was a little overwhelming.

43
00:02:07,505 --> 00:02:09,935
We can ignore most of this text.

44
00:02:09,935 --> 00:02:13,610
We just need to verify that this indeed
is the page for LinearLayout, and

45
00:02:13,610 --> 00:02:16,150
then we scroll down and
look at the XML attributes.

46
00:02:17,210 --> 00:02:21,790
Now, we're looking for the attribute
that is called Android orientation, and

47
00:02:21,790 --> 00:02:22,390
here it is.

48
00:02:22,390 --> 00:02:24,230
So let's click on it to
look at more details.

49
00:02:25,390 --> 00:02:27,960
The description says that this attribute

50
00:02:27,960 --> 00:02:31,660
determines whether the layout
should be a column or a row.

51
00:02:31,660 --> 00:02:34,560
The value of this attribute
should be horizontal for

52
00:02:34,560 --> 00:02:37,330
a row, where the value should
be vertical for a column.

53
00:02:37,330 --> 00:02:40,480
And then it lists those two values here.

54
00:02:40,480 --> 00:02:45,530
Cool, so our code currently says that
the android orientation is vertical.

55
00:02:45,530 --> 00:02:49,410
So that explains why the views
are showing up as a column.

56
00:02:49,410 --> 00:02:53,950
Now, to satisfy our curiosity,
we should also try the other value.

57
00:02:53,950 --> 00:02:57,960
Let's set the orientation to be
horizontal and see what happens.

58
00:02:57,960 --> 00:02:59,910
I'm going to go into the code and
erase the vertical value.

59
00:02:59,910 --> 00:03:05,150
I'm going to type horizontal, and look,
now the views are in a horizontal row.

60
00:03:05,150 --> 00:03:06,810
I don't know about you, but

61
00:03:06,810 --> 00:03:09,310
I don't really like to read
my guest list horizontally.

62
00:03:09,310 --> 00:03:12,000
But there are still many other useful

63
00:03:12,000 --> 00:03:15,040
cases where you would want
a horizontal linear layout.

64
00:03:15,040 --> 00:03:18,490
For example, if you're creating a list
item, you might want an image on

65
00:03:18,490 --> 00:03:21,190
the left hand side, and then
a description on the right hand side.

66
00:03:21,190 --> 00:03:25,200
I'm going to let you try this
out on your own in a second, but

67
00:03:25,200 --> 00:03:28,210
first I want to point out
this additional line of code.

68
00:03:28,210 --> 00:03:31,260
This is the XML namespace declaration.

69
00:03:31,260 --> 00:03:36,020
We use this namespace in order to
specify that all of these attributes

70
00:03:36,020 --> 00:03:38,200
here belong to android.

71
00:03:38,200 --> 00:03:40,940
That's why they all start
with android colon.

72
00:03:40,940 --> 00:03:45,580
This is essentially short hand for this
specific URL that's unique to android.

73
00:03:45,580 --> 00:03:48,390
You can actually create
your own custom attributes.

74
00:03:48,390 --> 00:03:52,840
So to prevent name conflicts, where two
attributes are named the same thing,

75
00:03:52,840 --> 00:03:57,595
but actually have different behaviors,
we always add this prefix here,

76
00:03:57,595 --> 00:04:02,430
android:, to signify that
these are android attributes.

77
00:04:02,430 --> 00:04:06,970
So basically, always remember to
add this XML namespace declaration

78
00:04:06,970 --> 00:04:10,110
in the opening tag of the root
view of your XML file.

79
00:04:11,710 --> 00:04:12,910
Now it's your turn.

80
00:04:12,910 --> 00:04:16,860
We want you to be able to experiment
with the linear layout code now.

81
00:04:16,860 --> 00:04:19,690
Try to add more TextViews so
there's more items in this column.

82
00:04:19,690 --> 00:04:23,150
Who would you put on an exclusive
guest list for your party?

83
00:04:24,500 --> 00:04:28,450
Also try changing the linear
layout orientation attribute.

84
00:04:28,450 --> 00:04:30,770
Remember that it can be set
to vertical or horizontal.
