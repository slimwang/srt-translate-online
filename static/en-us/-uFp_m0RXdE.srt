1
00:00:00,280 --> 00:00:04,975
So the Coral key-based routing takes a different approach. In the Coral

2
00:00:04,975 --> 00:00:08,350
key-based routing, rather than being greedy,

3
00:00:08,350 --> 00:00:10,840
we are going to slowly progress towards

4
00:00:10,840 --> 00:00:18,250
our desired destination. In particular, I mentioned that the distance between

5
00:00:18,250 --> 00:00:25,310
two nodes in the node namespace is given by the XOR of the node IDs.

6
00:00:25,310 --> 00:00:30,890
So, in particular, if I look at the source 14 here, and the destination four

7
00:00:30,890 --> 00:00:36,750
here, we can compute the XOR distance between the source and the

8
00:00:36,750 --> 00:00:40,880
desired destination. And the routing table now

9
00:00:40,880 --> 00:00:42,900
is populated with numbers. And what these

10
00:00:42,900 --> 00:00:47,800
numbers show is the XOR distance from

11
00:00:47,800 --> 00:00:51,200
any particular node to the desired destination.

12
00:00:51,200 --> 00:00:57,530
So, the XOR distance from my source, which is 14, to

13
00:00:57,530 --> 00:01:04,440
the destination, which is four, is ten. The XOR distance from the node whose ID

14
00:01:04,440 --> 00:01:10,136
is 13 and the destination is four is nine. And similarly, the

15
00:01:10,136 --> 00:01:16,380
XOR distance from the node whose ID is five and the destination four, is one.

16
00:01:16,380 --> 00:01:21,970
So what I have now in my routing table

17
00:01:21,970 --> 00:01:27,550
is the XOR distance of the desired destination.

18
00:01:27,550 --> 00:01:32,080
That's what I have in this entry of this routing table

19
00:01:32,080 --> 00:01:37,880
that says what is the XOR distance for my desired destination right now from

20
00:01:37,880 --> 00:01:41,380
each of the guys that I know how to get to directly? I know

21
00:01:41,380 --> 00:01:43,230
how to get to 13. I know how to get

22
00:01:43,230 --> 00:01:46,580
to three, and two, and zero, and five. And what

23
00:01:46,580 --> 00:01:49,335
I am looking at now is if I get to

24
00:01:49,335 --> 00:01:52,740
13, what is the distance of that guy from the desired

25
00:01:52,740 --> 00:01:56,040
destination? What is the distance of this guy from the

26
00:01:56,040 --> 00:02:00,160
desired destination and so on? That's what these table entries

27
00:02:00,160 --> 00:02:02,360
are showing right now. These are the nodes that are

28
00:02:02,360 --> 00:02:06,520
directly reachable from me. And what they showing is the XOR

29
00:02:06,520 --> 00:02:08,788
distance of each of the nodes that are

30
00:02:08,788 --> 00:02:12,298
directly reachable from me to the desired destination. So

31
00:02:12,298 --> 00:02:18,140
in Coral, what we are going to do is in each hop I'm going to go to some

32
00:02:18,140 --> 00:02:20,490
node that is half the distance to the

33
00:02:20,490 --> 00:02:24,490
destination in the node ID namespace. Recall in the

34
00:02:24,490 --> 00:02:28,280
greedy approach since I have a way of getting

35
00:02:28,280 --> 00:02:32,260
to node number five, I directly went to him

36
00:02:32,260 --> 00:02:34,050
with the hope that he'll get me to my desired

37
00:02:34,050 --> 00:02:38,000
destination. Not so in Coral key-based routing. What we're going

38
00:02:38,000 --> 00:02:40,130
to do is in each hop we're going to go

39
00:02:40,130 --> 00:02:42,480
to some node that is half the distance to the

40
00:02:42,480 --> 00:02:46,680
destination in the node ID namespace. Now the XOR distance

41
00:02:46,680 --> 00:02:50,475
between the source and the destination, 14 and 4, is

42
00:02:50,475 --> 00:02:53,670
ten. So in the first hop I'll go to the

43
00:02:53,670 --> 00:02:57,280
node that is half the distance to my desired destination,

44
00:02:57,280 --> 00:03:03,020
desired destination being ten. I want to go to a node, number five. Second hop,

45
00:03:03,020 --> 00:03:07,850
I want to go to a node that is half the distance of five. That is two distant

46
00:03:08,950 --> 00:03:14,020
from the desired destination. And third hop I want to go to a node that is

47
00:03:14,020 --> 00:03:17,940
one distant. That is, finally I am home.

48
00:03:17,940 --> 00:03:22,270
So that's the idea behind the Coral key-based routing.

49
00:03:22,270 --> 00:03:26,930
But of course, when I have a particular distance metric, like ten in this case,

50
00:03:26,930 --> 00:03:31,970
and I want to go half the distance in the first hop I may not

51
00:03:31,970 --> 00:03:37,510
have a direct way of reaching the guy who is half the distance to the

52
00:03:37,510 --> 00:03:40,082
desired node. So let's see how actually

53
00:03:40,082 --> 00:03:44,350
Coral key-based routing works, given this particular example.
