1
00:00:00,220 --> 00:00:01,170
Good applications and

2
00:00:01,170 --> 00:00:04,840
user interfaces, incorporate feedback
throughout the user experience.

3
00:00:04,840 --> 00:00:07,013
If the user does not get enough
feedback they'll probably,

4
00:00:07,013 --> 00:00:08,590
end up hating the application.

5
00:00:08,590 --> 00:00:09,545
We should add a feature,

6
00:00:09,545 --> 00:00:13,305
that explicitly notifies the user that
the system has responded to their input.

7
00:00:13,305 --> 00:00:17,030
Flask provides a really simple
way to give feedback to a user.

8
00:00:17,030 --> 00:00:20,020
Message Flashing is a feature that
will prompt a message to the user

9
00:00:20,020 --> 00:00:22,780
immediately, after a certain
action has taken place, and

10
00:00:22,780 --> 00:00:25,110
then disappear the next
time the page is requested.

11
00:00:25,110 --> 00:00:28,070
We can use our templates to reveal
a flash message, wherever and

12
00:00:28,070 --> 00:00:30,460
however we want,
from within the application.

13
00:00:30,460 --> 00:00:34,140
To get started, let's import
flash from our Flask module.

14
00:00:34,140 --> 00:00:37,520
Flashing works in Flask by using
a concept, called sessions.

15
00:00:37,520 --> 00:00:39,690
This course does not go too,
in depth with sessions.

16
00:00:39,690 --> 00:00:43,100
But just know that sessions are a way,
a server can store information across

17
00:00:43,100 --> 00:00:46,740
multiple Web pages, to create a more
personalized user experience.

18
00:00:46,740 --> 00:00:50,400
In the bottom of our project.pi file,
let's first add a secret key,

19
00:00:50,400 --> 00:00:53,080
which flask will use to create
sessions for our users.

20
00:00:53,080 --> 00:00:55,020
Normally, this should be
a very secure password,

21
00:00:55,020 --> 00:00:57,190
if our application was live
on the Internet but for

22
00:00:57,190 --> 00:01:01,100
development purposes, let's just
set our key to super_secret_key.

23
00:01:01,100 --> 00:01:03,140
To flash the message
within our application,

24
00:01:03,140 --> 00:01:05,407
we simply use the flash
function like this.

25
00:01:05,407 --> 00:01:10,715
To get a hold of all of the flash
messages, we can use get_flash_messages,

26
00:01:10,715 --> 00:01:12,885
which will also work from
within our templates.

27
00:01:12,885 --> 00:01:14,515
So, from within my new menu item method,

28
00:01:14,515 --> 00:01:18,115
I will create a flash message,
right after I call, session.commit.

29
00:01:18,115 --> 00:01:21,893
I will add the message,
("new" menu item created!") now,

30
00:01:21,893 --> 00:01:26,290
in my newmenuitem.html template,
I will add the following code.

31
00:01:26,290 --> 00:01:29,720
If you are not familiar, with this
with construct in Python, don't worry.

32
00:01:29,720 --> 00:01:31,720
It's just a block that does
some automatic clean-up,

33
00:01:31,720 --> 00:01:34,730
when the block is exited, that we don't
really have to concern ourselves with.

34
00:01:34,730 --> 00:01:36,660
If you are curious about
the with method in Python,

35
00:01:36,660 --> 00:01:39,160
I will provide some resources
in the instructor notes.

36
00:01:39,160 --> 00:01:41,881
The get_flashed_messages,
is returning an array of messages,

37
00:01:41,881 --> 00:01:44,980
that's going to get stored in
this variable, called messages.

38
00:01:44,980 --> 00:01:48,070
We then loop through the array of
message, if it's not empty, and

39
00:01:48,070 --> 00:01:51,130
print it out to our HTML document
inside an Unordered List.

40
00:01:51,130 --> 00:01:53,205
Now, when I save my code,
and try making a new item,

41
00:01:53,205 --> 00:01:56,272
and flashed with a new confirmation
message on my main menu screen.
