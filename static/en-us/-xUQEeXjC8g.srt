1
00:00:00,000 --> 00:00:04,000
For this question, you're asked to define two procedures.

2
00:00:04,000 --> 00:00:12,000
The first one takes a match as its inputs along with a replacement,

3
00:00:12,000 --> 00:00:17,000
and it outputs some sort of structure, which you'll be able to use.

4
00:00:17,000 --> 00:00:23,000
In the second procedure, apply converter, which will change a string according

5
00:00:23,000 --> 00:00:26,000
to the match and replacement.

6
00:00:26,000 --> 00:00:28,000
I'll just do an example.

7
00:00:28,000 --> 00:00:37,000
aaabaa--if this is our match and replacement, the aba will be replaced with b.

8
00:00:37,000 --> 00:00:42,000
The next string we'll have will be aaba.

9
00:00:42,000 --> 00:00:46,000
Then we've got aba again, so we'll replace that with b.

10
00:00:46,000 --> 00:00:50,000
There are no more matches, so we stop.

11
00:00:50,000 --> 00:00:56,000
You can see at each step it's changed, and when we change it no more, we stop.

12
00:00:56,000 --> 00:00:58,000
What our code is going to do is continue.

13
00:00:58,000 --> 00:01:03,000
As long as we've made a replacement at the previous step, we'll do a step again.

14
00:01:03,000 --> 00:01:07,000
If we haven't made a replacement, then we'll stop.

15
00:01:07,000 --> 00:01:09,000
On to the code.

16
00:01:09,000 --> 00:01:11,000
What structure do I want?

17
00:01:11,000 --> 00:01:17,000
Well, I'm simply going to make a list where the first entry in the list is the match,

18
00:01:17,000 --> 00:01:20,000
and the second entry is the replacement.

19
00:01:20,000 --> 00:01:26,000
Apply_converter has as its input a converter which we made in make_converter.

20
00:01:26,000 --> 00:01:31,000
That's a list, and the string that we want to change.

21
00:01:31,000 --> 00:01:37,000
I said that I was going to continue changing the string as long as the string

22
00:01:37,000 --> 00:01:40,000
was not the same as it was before.

23
00:01:40,000 --> 00:01:44,000
We're going to have to keep track of the previous string.

24
00:01:44,000 --> 00:01:47,000
At the start there isn't a previous string.

25
00:01:47,000 --> 00:01:54,000
While previous is not the same as the current string, I want to carry on with the loop.

26
00:01:54,000 --> 00:01:59,000
As soon as I enter the loop, I want previous to be equal to string,

27
00:01:59,000 --> 00:02:02,000
and then I want to look for the match in the string.

28
00:02:02,000 --> 00:02:07,000
The position of the math we can find using find,

29
00:02:07,000 --> 00:02:11,000
and we're looking for the first word in the converter.

30
00:02:11,000 --> 00:02:18,000
If we find it, then we're going to replace our string with a new string,

31
00:02:18,000 --> 00:02:24,000
which is the first part of the string up to the position, not excluding it--

32
00:02:24,000 --> 00:02:27,000
the start position of our match.

33
00:02:27,000 --> 00:02:34,000
We replace that with the replacement, and finally we want to concatenate

34
00:02:34,000 --> 00:02:37,000
the part of the string after the match.

35
00:02:37,000 --> 00:02:41,000
We find it's position by starting at the beginning of the match

36
00:02:41,000 --> 00:02:45,000
and adding on the length of the match.

37
00:02:45,000 --> 00:02:48,000
Then taking that to the end of the string.

38
00:02:48,000 --> 00:02:52,000
As long as we've made a change, the loop continues.

39
00:02:52,000 --> 00:02:59,000
If we haven't made a change, the loop ends, and we return the string.
