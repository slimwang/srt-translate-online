1
00:00:00,145 --> 00:00:04,450
Let's suppose that we have a three node network with the costs on the edges as

2
00:00:04,450 --> 00:00:08,350
shown. Initially, each node has a single distance

3
00:00:08,350 --> 00:00:13,150
vector representing the shortest path cost to each other

4
00:00:13,150 --> 00:00:16,400
incident node in the graph. For example, the

5
00:00:16,400 --> 00:00:19,230
distance between x and x is obviously zero.

6
00:00:19,230 --> 00:00:21,380
And the shortest known distance between x and

7
00:00:21,380 --> 00:00:24,930
y, from x's perspective is one, the direct path.

8
00:00:24,930 --> 00:00:28,300
Similarly, the shortest known distance between x and z

9
00:00:28,300 --> 00:00:31,210
to x at the outset is five because all

10
00:00:31,210 --> 00:00:33,520
it knows is the direct path. Note that a

11
00:00:33,520 --> 00:00:36,680
shorter path between x and z exists via y,

12
00:00:36,680 --> 00:00:38,732
but x simply doesn't know about it yet. Now

13
00:00:38,732 --> 00:00:42,580
in distance vector routing, every node send its vectors

14
00:00:42,580 --> 00:00:45,830
to every other adjacent node. And each node then

15
00:00:45,830 --> 00:00:49,880
updates its routing table according to the Bellman-Ford equation.

16
00:00:49,880 --> 00:00:55,340
Let's look at what happens when node x learns of y's distance vectors. Well in

17
00:00:55,340 --> 00:01:00,870
this case, the distance from x to z will be computed as the minimum of the

18
00:01:00,870 --> 00:01:04,900
sums of all distances to z through any

19
00:01:04,900 --> 00:01:07,470
intermediate node. So the cost between x and

20
00:01:07,470 --> 00:01:15,460
y is one, and the distance between y and z as discovered by y's distance vector

21
00:01:15,460 --> 00:01:19,030
is two. Therefore, x can update its shortest

22
00:01:19,030 --> 00:01:22,920
cost distance to z as three. Similarly, x

23
00:01:22,920 --> 00:01:25,100
will receive a distance vector from z, five

24
00:01:25,100 --> 00:01:28,280
two zero, but of course, when it uses

25
00:01:28,280 --> 00:01:32,480
the Bellman-Ford equation to update its distances, again

26
00:01:32,480 --> 00:01:34,440
the distance between z and x will be

27
00:01:34,440 --> 00:01:37,200
updated from five to three. We can repeat

28
00:01:37,200 --> 00:01:40,950
this exercise at other nodes, as they receive distance

29
00:01:40,950 --> 00:01:44,050
vectors from other nodes in the topology. And quickly, every

30
00:01:44,050 --> 00:01:46,960
node in the network has a complete routing table. Now

31
00:01:46,960 --> 00:01:51,800
when costs decrease, the network converges quickly but one problem

32
00:01:51,800 --> 00:01:55,700
is that when failures occurs, bad news can actually travel slowly.
