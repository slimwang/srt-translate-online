1
00:00:00,170 --> 00:00:04,250
Now it's time to finish creating our
new view by drawing its contents.

2
00:00:04,250 --> 00:00:07,050
And we do that within our
custom view's onDraw method.

3
00:00:07,050 --> 00:00:10,760
Now the Android canvas is pretty
standard, as far as canvas APIs go.

4
00:00:10,760 --> 00:00:12,680
Used as a painter's algorithm,

5
00:00:12,680 --> 00:00:15,680
meaning that each new thing you paint
will cover anything beneath it.

6
00:00:15,680 --> 00:00:18,450
The canvas and paint classes.

7
00:00:18,450 --> 00:00:22,480
Up for a variety of brushes and
help us to draw and fill lines, boxes,

8
00:00:22,480 --> 00:00:25,780
circles, and text with colors,
patterns, gradients, and images.

9
00:00:25,780 --> 00:00:28,140
As well as offering the ability to move,
rotate, and

10
00:00:28,140 --> 00:00:30,430
scale the campus while you draw.

11
00:00:30,430 --> 00:00:33,216
And I could spend a lot of time here
detailing exactly how to use each of

12
00:00:33,216 --> 00:00:35,523
these tools, but
there's nothing unique to Android and

13
00:00:35,523 --> 00:00:38,610
it's covered really well on
the documentation link below.

14
00:00:38,610 --> 00:00:41,430
It is possible though to create
pretty advanced UIs this way.

15
00:00:41,430 --> 00:00:45,033
For example if we start by drawing
a circle and then add a second circle,

16
00:00:45,033 --> 00:00:47,820
and then you just need to finish
drawing the rest of the compass.

17
00:00:47,820 --> 00:00:49,710
Here's an example I prepared earlier.

18
00:00:49,710 --> 00:00:52,940
The specifics of what you draw are
different for every view, but one thing

19
00:00:52,940 --> 00:00:56,830
that is consistent is the resource
constraint device you're drawing on.

20
00:00:56,830 --> 00:00:59,550
And that the onDraw method will be
called every time the screen is

21
00:00:59,550 --> 00:01:00,350
refreshed.

22
00:01:00,350 --> 00:01:02,210
Potentially many times a second.

23
00:01:02,210 --> 00:01:05,360
That means any object created
here within your onDraw method,

24
00:01:05,360 --> 00:01:07,880
including things like paint
objects will be created and

25
00:01:07,880 --> 00:01:10,500
destroyed with alarming frequency.

26
00:01:10,500 --> 00:01:14,070
Object creation and destruction can
be expensive on Android, potentially

27
00:01:14,070 --> 00:01:17,510
affecting the smoothness of your UI
when garbage collection is initiated.

28
00:01:17,510 --> 00:01:18,490
The solution?

29
00:01:18,490 --> 00:01:21,740
Move the scope of any object
used within the onDraw loop.

30
00:01:21,740 --> 00:01:23,340
Into the class scope.

31
00:01:23,340 --> 00:01:26,390
Go ahead and override the onDraw
method within your new view, and

32
00:01:26,390 --> 00:01:28,190
draw the new control.

33
00:01:28,190 --> 00:01:31,370
In fact, why not take this opportunity
to create a custom control

34
00:01:31,370 --> 00:01:34,620
that can display the wind speed, and
direction fused within sunshine.

35
00:01:34,620 --> 00:01:37,920
Once you're done, you can add it to your
layout, using its full package name and

36
00:01:37,920 --> 00:01:40,740
class name in your XML, like this.

37
00:01:40,740 --> 00:01:43,790
Run it, and then post a screenshot
of your new view into the forum.
