1
00:00:00,370 --> 00:00:03,190
Now let's take a look at the life
of a Cast sender application.

2
00:00:03,190 --> 00:00:06,780
First off you should know the Cast SDK
uses an asynchronous callback design

3
00:00:06,780 --> 00:00:09,590
to inform the sender applications
of events, like connects and

4
00:00:09,590 --> 00:00:13,170
disconnects to the Cast device, as well
as whether commands were received.

5
00:00:13,170 --> 00:00:16,510
For example, let's say a Sender
app sends a message to a receiver.

6
00:00:16,510 --> 00:00:19,820
To do so, you'll implement a couple
of callbacks provided by the SDK so

7
00:00:19,820 --> 00:00:22,190
your app can be informed
of whether it was received.

8
00:00:22,190 --> 00:00:24,910
We'll go into each of the steps of
a sender life cycle by looking at

9
00:00:24,910 --> 00:00:27,975
the CastHelloText example which you
can find in the instructor notes.

10
00:00:29,060 --> 00:00:31,750
The reason I like this sample as
a teaching tool is because it contains

11
00:00:31,750 --> 00:00:35,030
a one file sender app
inside of main activity.

12
00:00:35,030 --> 00:00:39,470
The only other files we need to look
at are manifest and our menu XML.

13
00:00:39,470 --> 00:00:41,530
And again, you can find
the corresponding receiver app

14
00:00:41,530 --> 00:00:43,440
inside the receiver folder.

15
00:00:43,440 --> 00:00:44,070
Now off the bat,

16
00:00:44,070 --> 00:00:46,850
you should know that some of the code
we'll cover is going to be simplified by

17
00:00:46,850 --> 00:00:50,310
the CastCompanionLibrary which we'll get
to in the next section of the course.

18
00:00:50,310 --> 00:00:53,300
But it's important to see how it works
from the ground up when you get started.

19
00:00:53,300 --> 00:00:54,460
Also, just a reminder,

20
00:00:54,460 --> 00:00:56,850
don't use this project as the starting
point for your integration.

21
00:00:56,850 --> 00:00:58,650
Use Cast videos instead.

22
00:00:58,650 --> 00:01:00,290
Let's start with the manifest.

23
00:01:00,290 --> 00:01:02,970
The minimum Android SDK version
supported by Cast is 9,

24
00:01:02,970 --> 00:01:05,570
which is Gingerbread, or version 2.3.

25
00:01:05,570 --> 00:01:08,630
Next the applications theme
needs to be correctly set based

26
00:01:08,630 --> 00:01:10,730
on the minimum Android SDK version.

27
00:01:10,730 --> 00:01:13,970
For example you might need to use
a variant of Theme.AppCompat.

28
00:01:13,970 --> 00:01:16,450
Believe it or not that's it for
the manifest.

29
00:01:16,450 --> 00:01:19,040
Of course in a production app with
the CastCompanionLibrary you'll need

30
00:01:19,040 --> 00:01:20,120
a couple of permissions.

31
00:01:20,120 --> 00:01:21,900
And we'll get to those later on.

32
00:01:21,900 --> 00:01:25,010
Now on to the sender application
inside of main activity.

33
00:01:25,010 --> 00:01:27,860
Our first job is to initialize
the Cast API, and to do so

34
00:01:27,860 --> 00:01:30,090
we'll obtain an instance
of the media router.

35
00:01:30,090 --> 00:01:31,440
You'll need to hold on
to this instance for

36
00:01:31,440 --> 00:01:33,080
the lifetime of you sender application.

37
00:01:33,080 --> 00:01:35,830
And a good place to do it
is inside your onCreate.

38
00:01:35,830 --> 00:01:38,570
At this point, the user has
launched her sender application and

39
00:01:38,570 --> 00:01:40,320
we've initialized the API.

40
00:01:40,320 --> 00:01:43,400
Now it's time to discover
available Cast devices.

41
00:01:43,400 --> 00:01:46,090
Behind the scenes the media
router detects Cast devices,

42
00:01:46,090 --> 00:01:48,710
both of the local network and
by proximity.

43
00:01:48,710 --> 00:01:51,330
We'll need to filter those Cast devices
for just ones that can run your

44
00:01:51,330 --> 00:01:54,690
application, and to do so
we'll use the MediaRouteSelector.

45
00:01:54,690 --> 00:01:57,200
This is important because if you
have a video playing application,

46
00:01:57,200 --> 00:02:00,090
you wouldn't want to show the user
an option to Cast to a stereo.

47
00:02:00,090 --> 00:02:03,500
Our application ID by the way is
defined in our strings.xml file, but

48
00:02:03,500 --> 00:02:05,960
here it's displayed by
Android Studio for convenience.

49
00:02:05,960 --> 00:02:08,729
And remember this ID corresponds
to the customer receiver app

50
00:02:08,729 --> 00:02:10,380
already published for this application.

51
00:02:10,380 --> 00:02:12,490
But in our own app of
course we have our own.

52
00:02:12,490 --> 00:02:14,630
Next up we'll need
a MediaRouterCallback.

53
00:02:14,630 --> 00:02:17,596
This is used to inform our sender app
when the user selects a device they

54
00:02:17,596 --> 00:02:18,260
want to cast to.

55
00:02:18,260 --> 00:02:20,360
And we'll see how they do that
with Cast menu in just a sec.

56
00:02:21,610 --> 00:02:25,260
First notice that our activity
extends ActionBarActivity.

57
00:02:25,260 --> 00:02:27,430
There are a couple of different
ways to add the Cast button but

58
00:02:27,430 --> 00:02:29,706
the easiest is to use
the MediaRouter ActionBar provider.

59
00:02:31,210 --> 00:02:34,678
Here's how we add the Cast button
to the ActionBarCompat using

60
00:02:34,678 --> 00:02:37,630
the MediaRouterAction bar
provider in our menu XML.

61
00:02:37,630 --> 00:02:40,792
And inside onCreateOptionsMenu,
we assign the MediaRouteSelector to

62
00:02:40,792 --> 00:02:43,240
the MediaRouteActionProvider
in the ActionBar menu.

63
00:02:44,530 --> 00:02:46,480
Now to trigger the discovery
of Cast devices,

64
00:02:46,480 --> 00:02:49,660
we add the MediaRouterCallback
to the MediaRouter instance.

65
00:02:49,660 --> 00:02:52,060
Note that we're doing this inside
of our activities onStart method.

66
00:02:53,500 --> 00:02:57,650
To conserve battery power, we remove the
callback when our activity has stopped.

67
00:02:57,650 --> 00:03:01,620
At this point, the user can select a
Cast device using the menu in their app.

68
00:03:01,620 --> 00:03:05,530
Once they do, our sender application's
informed via the MediaRouterCallback.

69
00:03:05,530 --> 00:03:08,147
And you can see that happening here
inside the onRouteSelected method.

70
00:03:09,280 --> 00:03:11,700
Now it's time to launch
the receiver app.

71
00:03:11,700 --> 00:03:14,360
To do so, we'll need an instance
of the Google API client,

72
00:03:14,360 --> 00:03:16,620
which contains the Cast APIs.

73
00:03:16,620 --> 00:03:18,840
We use the connection callbacks
to be notified whether or

74
00:03:18,840 --> 00:03:20,050
not the connection was successful.

75
00:03:21,060 --> 00:03:22,600
And once the connection is confirmed,

76
00:03:22,600 --> 00:03:25,520
our sender application can launch
the receiver app by specifying

77
00:03:25,520 --> 00:03:28,780
the application ID we found on
the Cast developer console.

78
00:03:28,780 --> 00:03:30,730
At this time we'll set
a couple of callbacks.

79
00:03:30,730 --> 00:03:32,730
And if you see how far to
the right we're getting indented,

80
00:03:32,730 --> 00:03:34,640
you'll know this is never a good sign.

81
00:03:34,640 --> 00:03:37,570
Fortunately this task is greatly
simplified by the CastCompanionLibrary

82
00:03:37,570 --> 00:03:38,280
we'll get to in a sec.

83
00:03:39,280 --> 00:03:42,400
Now that the receiver's launched it's
time to control it by sending messages.

84
00:03:43,410 --> 00:03:46,060
To do so, we'll need to set
up a custom message channel.

85
00:03:46,060 --> 00:03:49,620
The sender can use this channel to
send string messages to the receiver.

86
00:03:49,620 --> 00:03:52,370
Each custom channel is
defined by unique namespace.

87
00:03:52,370 --> 00:03:53,960
It's possible to create
multiple channels,

88
00:03:53,960 --> 00:03:56,040
just make sure they
all have unique names.

89
00:03:56,040 --> 00:03:57,430
There's some rules about this namespace

90
00:03:57,430 --> 00:03:59,730
that you can find in
the instructor notes.

91
00:03:59,730 --> 00:04:02,510
Once the sender application is
connected to the receiver the custom

92
00:04:02,510 --> 00:04:04,040
channel can be set up.

93
00:04:04,040 --> 00:04:06,117
And as usual we create some
callbacks being informed if there

94
00:04:06,117 --> 00:04:07,780
are messages we've received.

95
00:04:07,780 --> 00:04:09,880
Again this is simplified by the CCL.

96
00:04:09,880 --> 00:04:11,249
Now that our channel's set up,

97
00:04:11,249 --> 00:04:14,460
the sender application can use it to
send string messages to the receiver.

98
00:04:14,460 --> 00:04:17,120
A good trick here,
if you need to send a complex message,

99
00:04:17,120 --> 00:04:20,459
is to simply encode it in JSON, and
then decode it on the receiver side.

100
00:04:20,459 --> 00:04:21,240
And the response from

101
00:04:21,240 --> 00:04:24,380
the receiver is then captured
using the callback we set up.

102
00:04:24,380 --> 00:04:26,682
Now it's time to handle
disconnecting from the receiver,

103
00:04:26,682 --> 00:04:28,670
when the user selects this
option on the Cast menu.

104
00:04:28,670 --> 00:04:31,680
You can see how that's done
inside our teardown method.

105
00:04:31,680 --> 00:04:34,400
That was a quick tour of the basics
of the sender lifestyle.

106
00:04:34,400 --> 00:04:37,260
Next up we'll learn about
the CastCompanionLibrary or CCL for

107
00:04:37,260 --> 00:04:39,870
short, which greatly simplifies
working with Cast on Android.

108
00:04:40,920 --> 00:04:43,450
Here's an optional learning exercise you
can do if you really want to learn how

109
00:04:43,450 --> 00:04:45,260
to write Cast applications.

110
00:04:45,260 --> 00:04:47,520
Now you know the basics of senders and
receivers.

111
00:04:47,520 --> 00:04:50,300
The best next step is to try and
write your own sender.

112
00:04:50,300 --> 00:04:52,860
What I'd recommend doing is creating
a new Android Studio project

113
00:04:52,860 --> 00:04:55,360
with a blank activity for
a phone or a tablet.

114
00:04:55,360 --> 00:04:59,040
Next, add simple Cast support to it so
you can send a message to the custom

115
00:04:59,040 --> 00:05:02,120
receiver we already have
from our HelloCast example.

116
00:05:02,120 --> 00:05:02,870
To help you with this,

117
00:05:02,870 --> 00:05:05,490
you can find links to documentation
in the instructor notes, and

118
00:05:05,490 --> 00:05:07,440
if you can do this successfully,
you should feel really good.
