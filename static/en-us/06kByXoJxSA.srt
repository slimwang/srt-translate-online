1
00:00:00,000 --> 00:00:06,000
So let's apply what we just learned to help complete our interpreter to fill out what it means

2
00:00:06,000 --> 00:00:08,000
to evaluate statements.

3
00:00:08,000 --> 00:00:12,000
Previously, we had an evaluate function expression.

4
00:00:12,000 --> 00:00:15,000
Now I'm going to make a new function for evaluating statements.

5
00:00:15,000 --> 00:00:19,000
It's going to take the abstract syntax tree and also the environment.

6
00:00:19,000 --> 00:00:21,000
We need to know the values of variables.

7
00:00:21,000 --> 00:00:25,000
As always by convention, we can get the type of the thing we're looking for

8
00:00:25,000 --> 00:00:27,000
from the 0th part of the tuple.

9
00:00:27,000 --> 00:00:31,000
We did all this work in the parser to record it. Let's totally take advantage of that.

10
00:00:31,000 --> 00:00:34,000
Well, 1 possibility is that it's an assignment statement.

11
00:00:34,000 --> 00:00:35,000
Those look something like this.

12
00:00:35,000 --> 00:00:37,000
Here's our statement type, assignment,

13
00:00:37,000 --> 00:00:42,000
and its first argument or the first part of its tuple is going to be some variable name

14
00:00:42,000 --> 00:00:45,000
that we're assigning to, and then the second part is going to be

15
00:00:45,000 --> 00:00:48,000
an arbitrary expression abstract syntax tree,

16
00:00:48,000 --> 00:00:51,000
so that corresponds to x becomes 3.

17
00:00:51,000 --> 00:00:56,000
So I'll just get out the variable name and get out the right_child abstract syntax tree.

18
00:00:56,000 --> 00:01:01,000
I'll figure out what the new value is by calling evaluate expression

19
00:01:01,000 --> 00:01:04,000
because this right-hand side part could be more complicated.

20
00:01:04,000 --> 00:01:09,000
For example, it could be a binop of a bunch of things,

21
00:01:09,000 --> 00:01:13,000
so we're going to need to walk down that tree and interpret it--translate it

22
00:01:13,000 --> 00:01:15,000
to figure out what it means.

23
00:01:15,000 --> 00:01:17,000
Now we've got the new value,

24
00:01:17,000 --> 00:01:21,000
and we'll just promise ourselves later on we're going to write some new function

25
00:01:21,000 --> 00:01:26,000
called environment update that changes the environment so that variable_name

26
00:01:26,000 --> 00:01:28,000
now points to new_value.

27
00:01:28,000 --> 00:01:32,000
This should remind you a lot of the chart update procedure that we wrote before.

28
00:01:32,000 --> 00:01:34,000
However, there are other types of statements.

29
00:01:34,000 --> 00:01:37,000
In addition to assignments, there are if-then-else.

30
00:01:37,000 --> 00:01:39,000
There are typically 3 parts of if-then-else.

31
00:01:39,000 --> 00:01:44,000
The conditional expression--suppose our if-then-else is if x 00:01:48,000
I haven't drawn in the curly braces to save space, but this is the general idea--

32
00:01:48,000 --> 00:01:52,000
then our conditional expression is x 00:01:56,000
The then statements are A. The else statements are B.

33
00:01:56,000 --> 00:02:00,000
But before we go farther, there is 1 complicating factor.

34
00:02:00,000 --> 00:02:03,000
Remember that in JavaScript, you can have multiple statements inside this

35
00:02:03,000 --> 00:02:05,000
compound statement block.

36
00:02:05,000 --> 00:02:09,000
So really, we have then statement s and else statement s.

37
00:02:09,000 --> 00:02:13,000
Your mission is to complete this code, and you can assume that there's a procedure

38
00:02:13,000 --> 00:02:20,000
called eval_stmts that takes statements as an argument and an environment.
