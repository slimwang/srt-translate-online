1
00:00:00,250 --> 00:00:02,950
What I have here is essentially just a big, long list.

2
00:00:02,950 --> 00:00:05,500
And I'm not going to go into all of them, but I will make some,

3
00:00:05,500 --> 00:00:10,480
make some comments that are appropriate to a few of them.

4
00:00:10,480 --> 00:00:15,500
The idea for throwing these at you is that as I said,

5
00:00:15,500 --> 00:00:18,670
the key to software design is having experience.

6
00:00:18,670 --> 00:00:23,430
Experience means being aware of possible solutions, and here's a catalog of

7
00:00:23,430 --> 00:00:28,420
solutions that have been applied in certain circumstances in the past.

8
00:00:28,420 --> 00:00:34,319
In the KWIC quick exercise that you undertook you saw the abstract data type

9
00:00:35,710 --> 00:00:40,290
architectural style as did the, as you did the batch sequential one.

10
00:00:40,290 --> 00:00:45,280
Blackboard architecture is one in which the various components post their

11
00:00:45,280 --> 00:00:50,220
results and their requests on some kind of common data repository, and the other

12
00:00:50,220 --> 00:00:54,280
components look at the repository and see if there's anything they can react to.

13
00:00:54,280 --> 00:00:57,560
The fourth one here, the big ball of mud is not really any architectural style

14
00:00:57,560 --> 00:00:59,460
it's an absence of one.

15
00:00:59,460 --> 00:01:04,042
It usually arises of because of the process of architectural erosion, or because

16
00:01:04,042 --> 00:01:08,920
the team didn't even have an architectural design process in the first place.

17
00:01:08,920 --> 00:01:10,820
We also have already have mentioned client server.

18
00:01:10,820 --> 00:01:15,970
We'll talk about component-based systems later in the, in the course.

19
00:01:15,970 --> 00:01:19,010
This use of the term component is somewhat different than the one we've been

20
00:01:19,010 --> 00:01:25,010
using in this particular lesson, but we'll make that clear when we get to it.

21
00:01:25,010 --> 00:01:27,490
You may not have heard about coroutines.

22
00:01:27,490 --> 00:01:30,940
So I want to ment, take a, take a second to mention that.

23
00:01:30,940 --> 00:01:32,440
With subprograms or

24
00:01:32,440 --> 00:01:37,220
subroutines we mentioned that there's this asymmetric relationship.

25
00:01:37,220 --> 00:01:39,350
There's a caller and a callee.

26
00:01:39,350 --> 00:01:41,870
With coroutines, it's a symmetric relation.

27
00:01:43,190 --> 00:01:45,830
Okay? A can call B and B can call A.

28
00:01:46,960 --> 00:01:54,460
Okay? Moreover, if A calls B for a second time, B continues

29
00:01:54,460 --> 00:01:59,910
from the point that it was last at when it returned from the first call.

30
00:01:59,910 --> 00:02:01,890
These are called coroutines.

31
00:02:01,890 --> 00:02:04,410
A primary example of coroutines.

32
00:02:04,410 --> 00:02:07,300
Think about printing out formatted data.

33
00:02:07,300 --> 00:02:11,620
With printing out formatted data such as with print F,

34
00:02:11,620 --> 00:02:18,310
typically you have a a list of formatting information and a list of data items.

35
00:02:18,310 --> 00:02:22,706
And you, the implementation proceeds by taking a, the first

36
00:02:22,706 --> 00:02:27,854
formating information and the first data item and then connecting them together.

37
00:02:27,854 --> 00:02:31,904
Then getting the second format information information and

38
00:02:31,904 --> 00:02:35,951
the second data item, and there may be some loops involved,

39
00:02:35,951 --> 00:02:40,670
some formatting information may allow for multiple occurrences.

40
00:02:40,670 --> 00:02:45,060
Moreover the data provided maybe in the form of a loop.

41
00:02:45,060 --> 00:02:49,490
So we're really going back and forth between these two streams of information,

42
00:02:49,490 --> 00:02:54,500
and a coroutine is a perfect a perfect style for

43
00:02:54,500 --> 00:02:55,780
dealing with that kind of situation.

44
00:02:56,870 --> 00:03:02,350
If you've got a sequel database and you've got some experience with this,

45
00:03:02,350 --> 00:03:05,050
you know that you can include in

46
00:03:05,050 --> 00:03:08,500
your standard sequel some other functions that you've written.

47
00:03:08,500 --> 00:03:13,070
If you do that sometimes the architectural style is called data centric, you,

48
00:03:13,070 --> 00:03:15,920
that is, you're using stored database procedures.

49
00:03:15,920 --> 00:03:19,420
In this course we won't be getting into domain modeling very much but

50
00:03:19,420 --> 00:03:22,630
there is a architectural style called domain driven design.

51
00:03:22,630 --> 00:03:27,980
And here, by a domain we mean a kind of application program.

52
00:03:27,980 --> 00:03:31,580
So think about, for example, tax processing software.

53
00:03:31,580 --> 00:03:33,270
With tax processing software,

54
00:03:33,270 --> 00:03:38,550
there's certain vocabulary that everybody's familiar with such as deductions.

55
00:03:38,550 --> 00:03:41,140
And there's typical ways of solving problems.

56
00:03:41,140 --> 00:03:44,370
So, if you've ever used your TurboTax or

57
00:03:44,370 --> 00:03:48,940
other tax preparation software, you know if you change something over here,

58
00:03:48,940 --> 00:03:51,560
other things will get changed automatically for you.

59
00:03:51,560 --> 00:03:55,660
That style of data flow updates

60
00:03:56,790 --> 00:04:02,150
is inherently part of the tax preparation software application domain.

61
00:04:02,150 --> 00:04:08,498
And so by organizing your tax appropriation software using this particular

62
00:04:08,498 --> 00:04:15,100
domain architectural style once again you can save yourself effort.

63
00:04:15,100 --> 00:04:19,140
We're going to be looking more extensively at implicit invocation.

64
00:04:19,140 --> 00:04:23,490
And, and also in the Garland and Shaw book that's listed on the resources page

65
00:04:23,490 --> 00:04:27,160
there's a very nice section that talks about all the possible options for

66
00:04:27,160 --> 00:04:29,510
implicit invocation architectural style.

67
00:04:29,510 --> 00:04:31,800
Another very popular one is layered architectures,

68
00:04:31,800 --> 00:04:38,000
in which each layer in the system acts as a virtual machine,

69
00:04:38,000 --> 00:04:39,940
providing capabilities to the layers above it.
