1
00:00:00,700 --> 00:00:04,620
So far we've strongly encouraged using
native elements because they give you

2
00:00:04,620 --> 00:00:09,260
focus, keyboard support, and
built in semantics essentially for free.

3
00:00:09,260 --> 00:00:12,670
But there are instances when
native HTML won't cut it.

4
00:00:12,670 --> 00:00:15,980
The Web Accessibility Initiatives
Accessible Rich Internet Applications

5
00:00:15,980 --> 00:00:19,320
spec is good for bridging areas
where there are accessibility

6
00:00:19,320 --> 00:00:21,570
issues that can't be
managed with native HTML.

7
00:00:21,570 --> 00:00:25,930
I don't have time to keep saying the Web
Accessibility Initiatives Accessible

8
00:00:25,930 --> 00:00:28,530
Rich Internet Applications
specification.

9
00:00:28,530 --> 00:00:31,310
So for the rest of the course, we'll
be calling it by its much friendlier

10
00:00:31,310 --> 00:00:35,460
nickname, ARIA, but you'll often see
it referred to as Wai-Aria as well,

11
00:00:35,460 --> 00:00:37,130
which is helpful if you
want to search for it.

12
00:00:38,240 --> 00:00:41,120
Aria works by allowing you to
specify attributes on elements

13
00:00:41,120 --> 00:00:45,610
which modify the way that element is
translated into the accessibility tree.

14
00:00:45,610 --> 00:00:49,060
Let's take a look at a really basic
example to show how this works.

15
00:00:49,060 --> 00:00:52,600
If we create a plain check
box we saw in less than three

16
00:00:52,600 --> 00:00:54,883
that a screen readable
announcer as a check box,

17
00:00:54,883 --> 00:00:59,420
tell you its label if it has one and
tell you whether it is checked or not.

18
00:00:59,420 --> 00:01:03,010
And similarly uses of other assistive
technologies like voice control

19
00:01:03,010 --> 00:01:04,155
will be able to operate it.

20
00:01:04,155 --> 00:01:06,230
However, what happens if for

21
00:01:06,230 --> 00:01:09,576
some reason we decide,we really need
to reimplement a basic checkbox?

22
00:01:09,576 --> 00:01:14,230
Well, for a start, we know from lesson
two that we need to make it focusable

23
00:01:14,230 --> 00:01:18,260
and handle the same keyboard
interactions as a native check box.

24
00:01:18,260 --> 00:01:21,530
But what happens if we then try
to use it with a screen reader?

25
00:01:21,530 --> 00:01:24,440
The screen reader gives us no
indication that the element is meant to

26
00:01:24,440 --> 00:01:25,840
be a check box.

27
00:01:25,840 --> 00:01:29,890
Sighted users can see the visual cues
which indicate the check box pattern,

28
00:01:29,890 --> 00:01:32,560
but nothing is announced
to screen reader users.

29
00:01:32,560 --> 00:01:36,160
Using ARIA allows us to tell the screen
reader that extra information.

30
00:01:36,160 --> 00:01:40,100
To give you an idea how it works, let's
look at this toy fake check box example.

31
00:01:40,100 --> 00:01:41,110
Just to clarify,

32
00:01:41,110 --> 00:01:43,740
there's very little reason you'd
ever want to write code like this.

33
00:01:43,740 --> 00:01:46,760
You're usually much better off
styling a regular check box, but

34
00:01:46,760 --> 00:01:49,360
this gives us a taste of
what ARIA allows us to do.

35
00:01:50,700 --> 00:01:52,798
So I'll run Chrome Vox
light on this page,

36
00:01:52,798 --> 00:01:55,328
to show what things are like
before we do anything.

37
00:01:55,328 --> 00:02:01,160
>> Tim-tams, mint slices.

38
00:02:01,160 --> 00:02:04,282
>> We have a checked and
unchecked custom check box up here.

39
00:02:04,282 --> 00:02:07,200
Chrome Vox reads out the labels
as tim-tams and mint slices,

40
00:02:07,200 --> 00:02:09,678
but doesn't give us any indication
that either one is a check box.

41
00:02:10,900 --> 00:02:12,632
If we compare that with
the native checkbox.

42
00:02:12,632 --> 00:02:15,101
>> [SOUND] Tim-Tams check box checked.

43
00:02:15,101 --> 00:02:17,913
[SOUND] Mint slices,
check box not checked.

44
00:02:17,913 --> 00:02:21,586
>> ChromeVox reads out the label,
the role, and the checked state of each,

45
00:02:21,586 --> 00:02:25,495
and plays a small earcon, which is that
small sound effect you might have heard

46
00:02:25,495 --> 00:02:29,430
at the start, to give a quick indication
of the role and checked state as well.

47
00:02:30,990 --> 00:02:37,228
So I'm going to pop open DevTools,
and add an ARIA role of check box and

48
00:02:37,228 --> 00:02:43,430
an ARIA-checked state to each
of those custom check boxes.

49
00:02:43,430 --> 00:02:46,930
So the first one gets
an aria-checked state of true and

50
00:02:46,930 --> 00:02:49,559
the second one will get
an aria-checked state of false.

51
00:02:51,080 --> 00:02:55,520
Note that I need to explicitly specify
that aria-checked is true or false.

52
00:02:55,520 --> 00:02:57,560
Just adding the attribute
with an empty string,

53
00:02:57,560 --> 00:03:01,940
like we often do with other HTML
attributes, won't do the job.

54
00:03:01,940 --> 00:03:05,120
ARIA attributes always need
to have explicit values.

55
00:03:06,660 --> 00:03:07,860
So now we're going to
close the dev tools and

56
00:03:07,860 --> 00:03:09,000
start up Chomebook slide again.

57
00:03:09,000 --> 00:03:13,979
>> [SOUND] TIm-Tams checkbox checked,
[SOUND] mint slices check

58
00:03:13,979 --> 00:03:18,479
box not checked,
[SOUND] Tim-Tams check box checked.

59
00:03:18,479 --> 00:03:22,445
>> So now we can hear that there's
really no difference from ChromeVox's

60
00:03:22,445 --> 00:03:26,490
point of view, between the fake check
boxes and the native check boxes.

61
00:03:27,530 --> 00:03:29,027
They all sound identical, so

62
00:03:29,027 --> 00:03:33,390
adding that role attribute and
that aria-checked attribute

63
00:03:33,390 --> 00:03:38,010
causes the node in the accessibility
tree to have the desired role and state,

64
00:03:38,010 --> 00:03:42,340
without changing anything else about
that node's appearance or behavior.

65
00:03:42,340 --> 00:03:44,360
In terms of the accessibility tree,

66
00:03:44,360 --> 00:03:48,150
what ARIA does is allow you to
essentially do some tree surgery.

67
00:03:48,150 --> 00:03:52,440
We take the accessibility tree as
generated from the plain HTML tree,

68
00:03:52,440 --> 00:03:56,190
add ARIA and
get a different accessibility tree.

69
00:03:56,190 --> 00:03:57,560
It may be subtly different or

70
00:03:57,560 --> 00:04:00,220
radically different depending on
what attributes we use and where.

71
00:04:01,830 --> 00:04:05,850
However, we need to keep in mind that
this is the only thing ARIA changes.

72
00:04:05,850 --> 00:04:09,140
It doesn't change anything about the
behavior of the element it's added to.

73
00:04:09,140 --> 00:04:11,450
For example, it's not going to
make the element focusable or

74
00:04:11,450 --> 00:04:13,130
add keyboard event listeners.

75
00:04:13,130 --> 00:04:16,060
We still need to do the work by making
sure we're keeping the promise we're

76
00:04:16,060 --> 00:04:19,370
making by telling assistive
technology that it has that role.

77
00:04:19,370 --> 00:04:22,140
We'll be looking closer at what that
means throughout this lesson, but

78
00:04:22,140 --> 00:04:25,030
I'll point out right now that
it's no coincidence that we're

79
00:04:25,030 --> 00:04:27,650
covering ARIA after the lesson
on focus and keyboard.
