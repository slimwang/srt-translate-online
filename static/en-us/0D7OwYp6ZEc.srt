1
00:00:00,000 --> 00:00:03,000
One way to avoid some of those problems is to use Cipher Block Chaining.

2
00:00:03,000 --> 00:00:07,000
The idea here is that we use the ciphertext from the previous block

3
00:00:07,000 --> 00:00:10,000
to impact the next block. So here's what this looks like.

4
00:00:10,000 --> 00:00:13,000
So we're still going to break our message into blocks.

5
00:00:13,000 --> 00:00:16,000
So this is the idea of Cipher Block Chaining.

6
00:00:16,000 --> 00:00:19,000
We're going to take each message block, encrypt it,

7
00:00:19,000 --> 00:00:23,000
with our encryption function, although let's assume it's still AES,

8
00:00:23,000 --> 00:00:26,000
using the same key, so we're using the same key for each block.

9
00:00:26,000 --> 00:00:28,000
We're going to get as output a cipher text.

10
00:00:28,000 --> 00:00:31,000
Instead of doing each block independently, though,

11
00:00:31,000 --> 00:00:34,000
and having the codebook property, for the second block, we're going to take

12
00:00:34,000 --> 00:00:38,000
the ciphertext that came out for the first block, EXOR that with the message block,

13
00:00:38,000 --> 00:00:41,000
and then make that the input term of the encryption function.

14
00:00:41,000 --> 00:00:44,000
So this keeps going. This means, as a result,

15
00:00:44,000 --> 00:00:47,000
in CBC or Cipher Block Chaining mode,

16
00:00:47,000 --> 00:00:52,000
the (i)th encrypted block is the result of encrypting the EXOR

17
00:00:52,000 --> 00:00:58,000
of the (i)th message block with the (i-1)th encryption block.

18
00:00:58,000 --> 00:01:01,000
We have a little bit of an issue with the first one.

19
00:01:01,000 --> 00:01:06,000
The first one, well there's no 0th block. If we just did what was shown here,

20
00:01:06,000 --> 00:01:10,000
well then we'd still have a problem that we would see repetition

21
00:01:10,000 --> 00:01:14,000
every time the first block in a file is the same as the first block in another file,

22
00:01:14,000 --> 00:01:15,000
encrypted with the same key.

23
00:01:15,000 --> 00:01:17,000
We'd get the same C_0 out.

24
00:01:17,000 --> 00:01:22,000
So we don't want that. We're going to add what's called an "initialization vector,"

25
00:01:22,000 --> 00:01:27,000
and we'll EXOR that with the first message. That keeps things consistent

26
00:01:27,000 --> 00:01:31,000
--each message is being EXOR'd with something before it is encrypted--

27
00:01:31,000 --> 00:01:35,000
and this might worry us--that we're adding more secrets--

28
00:01:35,000 --> 00:01:39,000
we want to minimize the number of secrets--to be as few as possible--

29
00:01:39,000 --> 00:01:44,000
the IV doesn't really need to be kept secret. Note that we're still

30
00:01:44,000 --> 00:01:49,000
encrypting this output. It's helpful to not reuse an IV, though.

31
00:01:49,000 --> 00:01:53,000
So it's OK to make the IV something unsecret,

32
00:01:53,000 --> 99:59:59,999
as long as it's not always the same.
