1
00:00:00,170 --> 00:00:03,760
So, let's go one step further past the decorator pattern that we

2
00:00:03,760 --> 00:00:05,180
built up just now.

3
00:00:05,180 --> 00:00:08,940
Since the object we are decorating is a brand new empty object, it

4
00:00:08,940 --> 00:00:12,730
kind of seems like we could just ask the carlike function to just build it for

5
00:00:12,730 --> 00:00:13,850
us in the first place.

6
00:00:13,850 --> 00:00:15,490
That is where classes come in.

7
00:00:15,490 --> 00:00:19,110
The only difference between the decorator code that you see here and

8
00:00:19,110 --> 00:00:23,600
a class is that a class builds the object that it's going to augment,

9
00:00:23,600 --> 00:00:28,190
whereas a decorator accepts the object it's going to augment as an input.

10
00:00:28,190 --> 00:00:31,800
So if we move the object creation into the carlike function and

11
00:00:31,800 --> 00:00:36,450
remove the obj function parameter in favor of declaring a local variable,

12
00:00:36,450 --> 00:00:38,590
then we would have what's known as a class, and

13
00:00:38,590 --> 00:00:41,710
we would give it a different sort of name to reflect that fact.

14
00:00:41,710 --> 00:00:46,190
So a class is a construct that is capable of building a fleet of

15
00:00:46,190 --> 00:00:49,970
similar objects that all conform to roughly the same interface.

16
00:00:49,970 --> 00:00:53,580
It's conventional to name your class with a capitalized noun,

17
00:00:53,580 --> 00:00:56,780
almost like a proper noun for a category of things.

18
00:00:56,780 --> 00:01:00,820
The functions that produce these fleets of similar objects are called

19
00:01:00,820 --> 00:01:02,090
Constructor Functions.

20
00:01:02,090 --> 00:01:06,790
Because their job is to construct the objects that will qualify as members of

21
00:01:06,790 --> 00:01:07,910
the class.

22
00:01:07,910 --> 00:01:12,830
So to recap, the class is the notion of a category of things that you'd like to

23
00:01:12,830 --> 00:01:16,805
build and all of the entailed code that supports that category.

24
00:01:16,805 --> 00:01:20,170
Whereas the constructor is simply the function that you use to

25
00:01:20,170 --> 00:01:22,620
produce a new instance of that class.

26
00:01:22,620 --> 00:01:27,100
The objects that get returned from these constructor function invocations,

27
00:01:27,100 --> 00:01:30,460
those are called instances, instances of the class.

28
00:01:30,460 --> 00:01:34,470
So when we call a Constructor Function in order to create an instance,

29
00:01:34,470 --> 00:01:37,440
that operation is known as Instantiating.

30
00:01:37,440 --> 00:01:41,470
At this point, we've reached an example of the functional class pattern

31
00:01:41,470 --> 00:01:45,060
because we have a simple function that produces instances of the Car class.
