1
00:00:00,690 --> 00:00:03,810
Sometimes when we code we have a typo.

2
00:00:03,810 --> 00:00:07,250
Or we forget the variable name
that we defined earlier, and

3
00:00:07,250 --> 00:00:10,150
we just had to trace back and

4
00:00:10,150 --> 00:00:15,570
use the console as a clue for us to go
back and figure out what's going on.

5
00:00:15,570 --> 00:00:17,262
>> And so,
to avoid problems like these too,

6
00:00:17,262 --> 00:00:19,481
it's helpful to have a text
editor that works with you.

7
00:00:19,481 --> 00:00:24,340
So Sublime Text for instance,
comes with a tab completion by default.

8
00:00:24,340 --> 00:00:29,266
That tab completion will use variable
names that you've used already to help

9
00:00:29,266 --> 00:00:29,880
you out.

10
00:00:29,880 --> 00:00:34,810
So definitely using all the tools at
your disposal is very, very helpful.

11
00:00:34,810 --> 00:00:39,891
>> So, I'll show you my auto completion,
I'm adding bio, bio's my object.

12
00:00:39,891 --> 00:00:42,870
I hit a dot, and here you go.

13
00:00:42,870 --> 00:00:46,694
And bio pic, I hit tab and then done.

14
00:00:46,694 --> 00:00:51,354
So it's very useful and
it's worth the time and

15
00:00:51,354 --> 00:00:55,000
effort to learn a good text editor.

16
00:00:55,000 --> 00:01:00,202
It could be any text editor, but
just make sure that this text

17
00:01:00,202 --> 00:01:05,610
editor has these capabilities
that will allow programmers and

18
00:01:05,610 --> 00:01:09,907
developers to quickly and
efficiently program.

19
00:01:09,907 --> 00:01:15,840
Such as Sublime Text, Atom, what
other text editors do you recommend?

20
00:01:15,840 --> 00:01:18,514
>> I use Vim, so
if you're willing to learn Vim,

21
00:01:18,514 --> 00:01:22,530
it's a bit of a steep learning curve,
but rewarding.

22
00:01:22,530 --> 00:01:23,240
>> It is rewarding.

23
00:01:23,240 --> 00:01:25,550
And also, if you're old school,

24
00:01:25,550 --> 00:01:29,415
you could use another type of
text editor, called Emacs.

25
00:01:29,415 --> 00:01:32,899
[LAUGH] Right, so there's there's
a lot of great, and free,

26
00:01:32,899 --> 00:01:35,250
text editors out there.

27
00:01:35,250 --> 00:01:38,605
I just recommend, just pick one and
stick with it and

28
00:01:38,605 --> 00:01:43,285
learn how to use the tools
that these editors come with.

29
00:01:43,285 --> 00:01:47,955
>> Yeah, because as a programmer you're
going to be spending hours of your day,

30
00:01:47,955 --> 00:01:49,385
every day, using it.

31
00:01:49,385 --> 00:01:51,875
So it helps to actually like
the program that you're using.

32
00:01:53,847 --> 00:01:57,997
>> And you can use the w3.org
validator for CSS.

33
00:01:57,997 --> 00:02:02,937
But something really cool that we,
here, at Udacity found was

34
00:02:02,937 --> 00:02:09,616
the csslint.net,
which is very cool in detecting errors.

35
00:02:09,616 --> 00:02:14,510
And so, this is how the website looks,
csslint.net.

36
00:02:14,510 --> 00:02:18,790
And this is where you paste your code,
CSS code here.

37
00:02:18,790 --> 00:02:21,920
And, so you can pick and
choose which errors and

38
00:02:21,920 --> 00:02:23,990
warnings you want to test for a below.

39
00:02:23,990 --> 00:02:25,270
So I would say,

40
00:02:25,270 --> 00:02:30,470
you can pick everything that is there
in our Udacity style-guide rules.

41
00:02:30,470 --> 00:02:33,740
And you can see if they match
with one of these errors and

42
00:02:33,740 --> 00:02:37,930
enable only those errors and
run your code through it.

43
00:02:37,930 --> 00:02:41,785
So, I have a very basic sample
of CSS code right here,

44
00:02:41,785 --> 00:02:44,150
that I'm just going to run it through.

45
00:02:45,430 --> 00:02:51,310
So, I just enabled all the errors here,
just to look at how I've been coding,

46
00:02:51,310 --> 00:02:56,390
and what are the best practices,
and just what errors it catches.

47
00:02:56,390 --> 00:03:01,340
So, I'm just going to go ahead and
run the linter.

48
00:03:01,340 --> 00:03:05,308
So it says CSS lint found one errors and
zero warnings, so

49
00:03:05,308 --> 00:03:07,720
let's see what this is.

50
00:03:07,720 --> 00:03:13,340
It says there is a parsing error expected
RBRACE at line three column eight.

51
00:03:13,340 --> 00:03:20,645
So it's pointing me to right here.

52
00:03:20,645 --> 00:03:25,600
>> So it looks like you're
missing a semicolon at the end

53
00:03:25,600 --> 00:03:28,050
of the font family rule.

54
00:03:28,050 --> 00:03:31,340
>> My god, yes,
I am indeed missing that.

55
00:03:31,340 --> 00:03:36,536
Ok, so let's go back and
add a semicolon here.

56
00:03:36,536 --> 00:03:39,188
Yeah, these errors can be very frustrating.

57
00:03:39,188 --> 00:03:41,880
I never catch them in time.

58
00:03:41,880 --> 00:03:46,780
Okay, so now it says CSS lint found
zero errors and zero warnings.

59
00:03:46,780 --> 00:03:50,495
So yeah, here,
looks like my code is clean now and

60
00:03:50,495 --> 00:03:53,955
I also checked it through CSS Lint,
done now.

61
00:03:53,955 --> 00:03:59,410
When you have a huge block of JSON
data just sitting inside one file and

62
00:03:59,410 --> 00:04:04,302
you are passing that data to display
render it in order

63
00:04:04,302 --> 00:04:06,960
paste it to our web page and so on.

64
00:04:06,960 --> 00:04:11,010
It can happen that yeah,
it might have a lot of errors in it,

65
00:04:11,010 --> 00:04:14,250
or you might be missing a comma or
a curly brace.

66
00:04:14,250 --> 00:04:18,000
And then curly brace,
which always happens to me.

67
00:04:18,000 --> 00:04:21,040
We actually have something
called JSONLint.

68
00:04:22,410 --> 00:04:26,599
JSONLint helps you
validate your JSON data.

69
00:04:26,599 --> 00:04:34,360
So I'm going to share my screen with
you, and take you to jsonlint.com.

70
00:04:34,360 --> 00:04:39,189
And so here,
on jsonlint.com you can see that I've

71
00:04:39,189 --> 00:04:42,607
pasted a very small bit of JSON data.

72
00:04:42,607 --> 00:04:47,482
This is basically my bio object
which you will be working on, and

73
00:04:47,482 --> 00:04:53,008
your resume created various objects for
bio, work and education.

74
00:04:53,008 --> 00:04:57,748
I can come back to that,
I'm drifting over here, from the topic.

75
00:04:57,748 --> 00:05:04,372
But yeah, so I have this JSON data
pasted inside the JSON validator.

76
00:05:04,372 --> 00:05:08,553
Now I'll let it validate, and
I see that I have an error.

77
00:05:08,553 --> 00:05:12,100
Here, under result,
it says parse error on line one.

78
00:05:13,160 --> 00:05:15,324
And it says varbio equals this.

79
00:05:15,324 --> 00:05:22,159
I think we have to separate
the variable from the object name.

80
00:05:22,159 --> 00:05:25,137
[LAUGH] We're just very
glad I found out, so

81
00:05:25,137 --> 00:05:29,953
I'm going to take just this page
right here, and then hit validate.

82
00:05:29,953 --> 00:05:35,385
[INAUDIBLE] I think they don't

83
00:05:35,385 --> 00:05:40,383
define object names inside

84
00:05:40,383 --> 00:05:44,517
your JSON Validator.

85
00:05:44,517 --> 00:05:51,540
So one can just give the JSON data
without assigning it to an object.

86
00:05:51,540 --> 00:05:54,397
And then that will just validate it
>> Yeah,

87
00:05:54,397 --> 00:05:57,470
I think that's what I
was doing wrong here.

88
00:05:57,470 --> 00:06:03,688
So, JSON objects,
don't put in the object name.

89
00:06:03,688 --> 00:06:07,709
>> Yeah, we can try that,
we can even try [CROSSTALK].

90
00:06:07,709 --> 00:06:11,788
>> It's still a.

91
00:06:11,788 --> 00:06:16,988
It's just the object,
no var no name for object.

92
00:06:16,988 --> 00:06:20,668
So it looks like this block is valid.

93
00:06:20,668 --> 00:06:22,640
It's a valid JSON file.

94
00:06:22,640 --> 00:06:25,410
It looks like my nesting is perfect.

95
00:06:25,410 --> 00:06:27,564
I have my name, I have my rule.

96
00:06:27,564 --> 00:06:31,732
My contacts has three
separate attributes, as well,

97
00:06:31,732 --> 00:06:34,550
the mobile, email, and location.

98
00:06:34,550 --> 00:06:38,340
So I can enclose it
with the curly braces.

99
00:06:38,340 --> 00:06:42,894
And then my skills are an array,
so I define it as an array and

100
00:06:42,894 --> 00:06:46,004
that way I have the square braces there.

101
00:06:46,004 --> 00:06:46,703
>> Awesome.

102
00:06:46,703 --> 00:06:47,503
>> Definitely.

103
00:06:47,503 --> 00:06:52,143
>> [LAUGH]
>> [LAUGH] Okay,

104
00:06:52,143 --> 00:06:54,675
so this is jsonlint.com.

105
00:06:54,675 --> 00:07:01,887
Whenever you find yourself getting
stuck being able to access JSON data,

106
00:07:01,887 --> 00:07:06,424
just ensure that
the structure is valid before

107
00:07:06,424 --> 00:07:11,212
you use that data inside
functions to render it.

108
00:07:11,212 --> 00:07:18,220
So, just like usual, I get small snippets
to make sure I validate something.

109
00:07:19,470 --> 00:07:24,915
>> It can get crazy when you have
a large amount of data that seems just

110
00:07:24,915 --> 00:07:30,970
like one JSON file, [INAUDIBLE] the data,
so it helps to validate those.
