1
00:00:00,000 --> 00:00:04,000
Most of you probably ran into the Fibonacci sequence of numbers,

2
00:00:04,000 --> 00:00:07,000
named after filius Bonacci in a previous computer science class.

3
00:00:07,000 --> 00:00:10,000
It's a great way to teach recursion.

4
00:00:10,000 --> 00:00:13,000
Here I've written out a Python definition for the Fibonacci sequence.

5
00:00:13,000 --> 00:00:17,000
To get the Nth Fibonacci number, well, if N is less than or equal to 2,

6
00:00:17,000 --> 00:00:22,000
we just return 1, otherwise, we return the sum of the 2 previous entries.

7
00:00:22,000 --> 00:00:25,000
So we're going to get 1, 1, 2 -- 1 + 1 = 2.

8
00:00:25,000 --> 00:00:27,000
1 + 2 = 3.

9
00:00:27,000 --> 00:00:28,000
2 + 3 = 5.

10
00:00:28,000 --> 00:00:29,000
3 + 5 = 8.

11
00:00:29,000 --> 00:00:37,000
5 + 8 = 11. That sort of thing. Did I do that correctly? Let's imagine. [Laughs]

12
00:00:37,000 --> 00:00:40,000
No, I totally didn't do that correctly. Man, you can't take me anywhere.

13
00:00:40,000 --> 00:00:43,000
[Singing--hmm, hmm, hmm] Basic math. Don't mind me. There we go.

14
00:00:43,000 --> 00:00:48,000
This looks a lot better. You saw nothing.

15
00:00:48,000 --> 00:00:49,000
Alright, so there's our Fibonacci sequence.

16
00:00:49,000 --> 00:00:53,000
In an incredible surprise move, it actually shows up a lot in nature--

17
00:00:53,000 --> 00:00:57,000
for example, in the patterns of seeds in a sunflower or in the whirls in a clamshell

18
00:00:57,000 --> 00:01:00,000
or in yellow chamomile plants or all that good stuff.

19
00:01:00,000 --> 00:01:05,000
However, Fibonacci involves a huge amount of work.

20
00:01:05,000 --> 00:01:07,000
Let's go see what goes on when we call Fibonacci.

21
00:01:07,000 --> 00:01:11,000
I'm going to abbreviate it with an f--Fibonacci of 5.

22
00:01:11,000 --> 00:01:16,000
Well, that's going to be based on Fibonacci of 4 and Fibonacci of 3.

23
00:01:16,000 --> 00:01:25,000
Now 4 is based on 3 and 2. 2 is a base case, so we're done. 3 is based on 2 and 1.

24
00:01:25,000 --> 00:01:30,000
Over here, 3 is based on Fibonacci of 2 and Fibonacci of 1.

25
00:01:30,000 --> 00:01:33,000
If you look carefully, a lot of these get repeated many times.

26
00:01:33,000 --> 00:01:38,000
We end of calling Fibonacci of 2--once, twice, 3 times I called it.

27
00:01:38,000 --> 00:01:41,000
Similarly, Fibonacci of 3 is called multiple times.

28
00:01:41,000 --> 00:01:43,000
We're redoing work.

29
00:01:43,000 --> 00:01:48,000
We're computing the value of Fibonacci of 2 and Fibonacci of 3 over and over again.

30
00:01:48,000 --> 99:59:59,999
That is wasted work. We want to be lazy and avoid that.
