1
00:00:00,390 --> 00:00:03,850
Your task was to create three histograms on one output

2
00:00:03,850 --> 00:00:06,950
plot. And to do that you needed to install the grid

3
00:00:06,950 --> 00:00:10,960
extra package and load it into R Studio. Once you've got

4
00:00:10,960 --> 00:00:12,860
that, now it's just a matter of creating each of the

5
00:00:12,860 --> 00:00:16,910
three histograms. And saving them to three variables. I'll use p1,

6
00:00:16,910 --> 00:00:19,130
p2 and p3 for each of the plots that I'm going to

7
00:00:19,130 --> 00:00:22,290
create. Now the first histogram is the same as before. We

8
00:00:22,290 --> 00:00:25,610
just have friend_count, pass to x, and pf, pass to data.

9
00:00:25,610 --> 00:00:29,630
For the second histogram, we'll take the log10 of friend_count. And remember

10
00:00:29,630 --> 00:00:31,930
to add 1 to it first, so that we don't get any

11
00:00:31,930 --> 00:00:35,760
undefined results. And finally for our third histogram, we'll simply take the

12
00:00:35,760 --> 00:00:38,540
square root of friend count. Now, if I run all these lines

13
00:00:38,540 --> 00:00:41,530
of code, I can see that I create three new variables that

14
00:00:41,530 --> 00:00:44,460
saves each of my plots. And now I just need to pass

15
00:00:44,460 --> 00:00:47,469
each of these plots to grid dot arrange. And set end col

16
00:00:47,469 --> 00:00:51,360
equal to 1, since I just want one column with all my histograms.

17
00:00:51,360 --> 00:00:53,460
And running my code, I can see that I get all

18
00:00:53,460 --> 00:00:57,840
three histograms. And here's a closer view of the three. Notice that

19
00:00:57,840 --> 00:01:00,790
our second plot is much better. Since we have a normalish

20
00:01:00,790 --> 00:01:03,090
kind of distribution. The square root transform

21
00:01:03,090 --> 00:01:04,849
is also better than no transformation

22
00:01:04,849 --> 00:01:06,740
at all, since we don't have as much of a long

23
00:01:06,740 --> 00:01:09,730
tail. We do still have a long tail, it's just that much

24
00:01:09,730 --> 00:01:13,070
lower friend count since we transformed the variable. The tilt's just

25
00:01:13,070 --> 00:01:16,420
not as bad as before. Now there was another way to create

26
00:01:16,420 --> 00:01:20,120
these same three histograms using a different type of syntax.

27
00:01:20,120 --> 00:01:23,210
Now the syntax is a little more complicated at first. But

28
00:01:23,210 --> 00:01:24,960
I want to give you a preview right now since you'll

29
00:01:24,960 --> 00:01:27,480
see it in upcoming lessons. This time, we're going to use

30
00:01:27,480 --> 00:01:31,470
the ggplot syntax to create our histogram. Ggplot is very

31
00:01:31,470 --> 00:01:34,090
similar to the q plot function, since it still takes the

32
00:01:34,090 --> 00:01:37,600
same parameters, x and data. The key difference is that we

33
00:01:37,600 --> 00:01:41,130
need to include any x or y variables inside this aesthetic

34
00:01:41,130 --> 00:01:44,440
wrapper or AES. The other thing we need to do is

35
00:01:44,440 --> 00:01:46,860
we need to tell ggplot what type of plot we want to

36
00:01:46,860 --> 00:01:50,010
create. Or what kind of geom we want. The geom that we

37
00:01:50,010 --> 00:01:53,590
want is geom histogram. Running this bit of code I can see

38
00:01:53,590 --> 00:01:55,910
that I get my original histogram. Which is the first one we

39
00:01:55,910 --> 00:01:59,230
created on friend count. Running the entire line I can save this

40
00:01:59,230 --> 00:02:02,440
histogram into p1. Now I've got a plot that I can just

41
00:02:02,440 --> 00:02:06,220
alter using scales. So for the second plot, I'm going to take my

42
00:02:06,220 --> 00:02:10,380
first plot and just add a scale_x_log10 to it. This

43
00:02:10,380 --> 00:02:13,620
is going to transform the x-axis, or the x variable, using log

44
00:02:13,620 --> 00:02:16,970
base 10. Similarly, for the third graph, I'm going to add scale

45
00:02:16,970 --> 00:02:19,940
x square root. Now, I don't want to use p2 here, since

46
00:02:19,940 --> 00:02:22,140
I've already got a scale log 10 on it. I

47
00:02:22,140 --> 00:02:25,350
want to use my original graph, p1. And add scale x square

48
00:02:25,350 --> 00:02:28,170
root. Now saving all these plots and writing our grid dot

49
00:02:28,170 --> 00:02:32,330
arrange function, we get the same output as we had before.

50
00:02:32,330 --> 00:02:34,285
Now there is a slight difference here based on the

51
00:02:34,285 --> 00:02:36,720
x-axis labeling. And I want you to see if you

52
00:02:36,720 --> 00:02:38,610
can figure that out. If you're not sure of the

53
00:02:38,610 --> 00:02:41,230
differences, don't worry. I'll explain it in the next video.
