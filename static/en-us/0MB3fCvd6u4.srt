1
00:00:00,490 --> 00:00:05,540
So let's put it all together the mechanisms exokernel offers, and how

2
00:00:05,540 --> 00:00:10,560
library operating systems can live on top of this red line, that is the

3
00:00:10,560 --> 00:00:14,070
protection boundary for exokernel. And, meaningfuly

4
00:00:14,070 --> 00:00:18,020
execute applications that belong to it on

5
00:00:18,020 --> 00:00:20,750
the hardware resources, and not interfere

6
00:00:20,750 --> 00:00:23,700
with one another. That is, achieve both

7
00:00:23,700 --> 00:00:27,800
extensibility, protection, and performance. So one of

8
00:00:27,800 --> 00:00:29,720
the hooks for getting good performance is what

9
00:00:29,720 --> 00:00:32,920
I mentioned earlier, and that is called

10
00:00:32,920 --> 00:00:36,580
that a performance critical for library operating system

11
00:00:36,580 --> 00:00:39,560
is something that can downloaded securely into

12
00:00:39,560 --> 00:00:42,720
the exokernel, so that piece of code becomes

13
00:00:42,720 --> 00:00:46,660
sort of the extension of exokernel. For a

14
00:00:46,660 --> 00:00:49,510
particular library operating system. This may be for

15
00:00:49,510 --> 00:00:55,700
OS one, this maybe for OS two and so on and so forth. So, now with this setup

16
00:00:55,700 --> 00:01:01,460
at any point of time some application process of some library operating system

17
00:01:01,460 --> 00:01:04,580
is running on the CPU. Now remember that

18
00:01:04,580 --> 00:01:08,530
Exokernel has no idea about processes within any

19
00:01:08,530 --> 00:01:11,260
of these library operating systems. All it knows

20
00:01:11,260 --> 00:01:15,200
is existence of these library operating systems and

21
00:01:15,200 --> 00:01:20,630
the fact that Exokernel has been the broker in giving some hardware

22
00:01:20,630 --> 00:01:23,870
resources. Capabilities for some hardware resources,

23
00:01:23,870 --> 00:01:26,620
I should say, to specific library operating

24
00:01:26,620 --> 00:01:34,450
systems, and it has also been the broker for downloading some code specific to

25
00:01:34,450 --> 00:01:40,320
library operating systems. Into the exokernel code base itself. Let's say that

26
00:01:40,320 --> 00:01:43,380
this particular thread belongs to this library

27
00:01:43,380 --> 00:01:46,040
operating system as long as this thread is

28
00:01:46,040 --> 00:01:48,280
well behaved by which I mean it's

29
00:01:48,280 --> 00:01:53,180
not doing anything funky. Doing normal program execution.

30
00:01:53,180 --> 00:01:56,940
Accessing memory. For which, mapping exists in

31
00:01:56,940 --> 00:01:59,290
TLB and so on. Life is good. Address

32
00:01:59,290 --> 00:02:02,550
translation happens on every memory access entirely

33
00:02:02,550 --> 00:02:05,590
in the CPU, and the process is making

34
00:02:05,590 --> 00:02:08,229
forward progress at memory speeds without intervention

35
00:02:08,229 --> 00:02:10,370
from exokernel or any of the library

36
00:02:10,370 --> 00:02:12,480
operating system. But, there could be this

37
00:02:12,480 --> 00:02:17,370
discontinuities, in the execution of this process. For

38
00:02:17,370 --> 00:02:21,340
example, let's say that this processor thread

39
00:02:21,340 --> 00:02:24,810
makes a system call, like opening a file.

40
00:02:24,810 --> 00:02:27,050
When it does that, that is a

41
00:02:27,050 --> 00:02:31,950
discontinuity in the normal execution of this process.

42
00:02:31,950 --> 00:02:37,950
Or worse yet, it may incur a page fault, meaning that not all of the pages

43
00:02:37,950 --> 00:02:41,340
for this particular process is currently In the

44
00:02:41,340 --> 00:02:43,750
mapping available to the hardware in the TLB, and

45
00:02:43,750 --> 00:02:47,400
therefore, there's a page fault. Even worse, this

46
00:02:47,400 --> 00:02:50,890
thread could do something stupid, such as divide by

47
00:02:50,890 --> 00:02:53,630
0, or something like that, that causes an

48
00:02:53,630 --> 00:02:57,650
exception. And lastly, the thread is not doing anything

49
00:02:57,650 --> 00:03:02,060
to cause the discontinuity, but there is an external interrupt that came in And

50
00:03:02,060 --> 00:03:06,970
that is going to cause a discontinuity to this execution of this

51
00:03:06,970 --> 00:03:12,200
process on the CPU. All such discontinuities essentially

52
00:03:12,200 --> 00:03:17,490
result in the CPU incurring a fault or a trap, and

53
00:03:17,490 --> 00:03:23,630
the trap is fielded by exokernel. When such discontinuities occur,

54
00:03:23,630 --> 00:03:27,590
exokernel has to pass the program discontinuity

55
00:03:27,590 --> 00:03:30,100
to the appropriate library operating system that is

56
00:03:30,100 --> 00:03:36,270
living on top of it. Now, exokernel knows, based on the linear vector of time

57
00:03:36,270 --> 00:03:38,980
slots that I mentioned earlier Which library

58
00:03:38,980 --> 00:03:42,440
operating system is currently running on the CPU.

59
00:03:42,440 --> 00:03:45,790
And therefore, it knows the right library

60
00:03:45,790 --> 00:03:49,070
operating system to which it has to pass

61
00:03:49,070 --> 00:03:53,126
the discontinuity that occurred right now for the currently executing process.

62
00:03:53,126 --> 00:04:00,190
To facilitate a finer-grain association between these different kinds of

63
00:04:00,190 --> 00:04:04,870
discontinuities. And the specific functionality

64
00:04:04,870 --> 00:04:06,540
in the library operating system for

65
00:04:06,540 --> 00:04:11,170
dealing with those discontinuities exokernel

66
00:04:11,170 --> 00:04:14,630
maintain state for each currently existing

67
00:04:14,630 --> 00:04:18,550
library operating system and we will discuss the state maintained

68
00:04:18,550 --> 00:04:22,710
by exokernel. On behalf of every library operating system next.
