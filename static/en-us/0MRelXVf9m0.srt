1
00:00:00,710 --> 00:00:05,380
So far, the issues that we've been talking about have been mostly system issues,

2
00:00:05,380 --> 00:00:08,940
things like reliability. I'd also like to spend a moment talking about

3
00:00:08,940 --> 00:00:13,530
software engineering side of things, that is building these systems.

4
00:00:13,530 --> 00:00:19,000
First category of issue has to do with requirements. Because non-functional

5
00:00:19,000 --> 00:00:24,610
requirements dominate this sort of situation, the requirements analyst has to

6
00:00:24,610 --> 00:00:29,610
elicit this information from the customers. And of course, it's axiomatic that

7
00:00:29,610 --> 00:00:33,070
the customers aren't always sure of what the requirements should be,

8
00:00:33,070 --> 00:00:38,150
particularly with respect to quality of service. That is, some kind of

9
00:00:38,150 --> 00:00:42,465
measured understanding of how the system is going to deal with these

10
00:00:42,465 --> 00:00:48,030
non-functional situations. Second concern of software architecture. Recall,

11
00:00:48,030 --> 00:00:53,020
I've been stressing throughout the course that the key element of coming up with

12
00:00:53,020 --> 00:00:56,760
a good solution architecturally is how it's going to deal with a non functional

13
00:00:56,760 --> 00:01:02,230
requirements, a corollary to that is in coming up with the architecture and

14
00:01:02,230 --> 00:01:06,390
choosing the connectors how do those connectors relate to a middleware solutions

15
00:01:06,390 --> 00:01:11,650
that we have. Can, for example, define an appropriate middleware technology for

16
00:01:11,650 --> 00:01:14,350
dealing with one of the connections we've selected to be included in

17
00:01:14,350 --> 00:01:18,380
the architecture. Third software engineering issue has to do with some design

18
00:01:18,380 --> 00:01:22,590
questions. Whenever you have a distributed application you have a network.

19
00:01:22,590 --> 00:01:27,730
Whenever you have a network you have latency. That is delays in message passing.

20
00:01:27,730 --> 00:01:32,610
How is your system going to deal at the software level with this latency.

21
00:01:32,610 --> 00:01:37,540
Are there timeouts, are there the implementation of some kind of protocol for

22
00:01:37,540 --> 00:01:42,720
resending, and so on. Another key question at the design level

23
00:01:42,720 --> 00:01:48,420
as far as distributed applications are concerned is statefulness.

24
00:01:48,420 --> 00:01:54,910
You know that the web applications often are stateless.

25
00:01:54,910 --> 00:01:58,420
That is, every time you interact with the server,

26
00:01:58,420 --> 00:02:02,410
the server has to treat your interaction as a self-contained unit without

27
00:02:02,410 --> 00:02:08,410
relying on any variables retaining values. Of course the database sitting there

28
00:02:08,410 --> 00:02:13,418
can serve as a persistent but heavyweight way of keeping track of state.

29
00:02:13,418 --> 00:02:18,070
The question from the designer then is how they're going to deal with this.

30
00:02:18,070 --> 00:02:23,090
One solution is, you've seen probably with respect to cookies,

31
00:02:23,090 --> 00:02:27,360
that is the server sends back some of its state to the client,

32
00:02:27,360 --> 00:02:31,790
which then returns that information on the next next interaction. And then

33
00:02:31,790 --> 00:02:35,330
there's just the general question of concurrency. How is synchronization going

34
00:02:35,330 --> 00:02:39,250
to be performed, how can you ensure you don't run into any of the problems like

35
00:02:39,250 --> 00:02:45,370
dead like, dead lock or making sure that everyone of the pieces of the system

36
00:02:45,370 --> 00:02:48,840
has some kind of interaction on a timely basis that is, that it's live
