1
00:00:00,580 --> 00:00:02,330
Let's look at the solution for

2
00:00:02,330 --> 00:00:06,650
our test and atomic-op quiz using load
links to our conditional instructions.

3
00:00:06,650 --> 00:00:10,150
So we said that the first to
instructions of the new test and

4
00:00:10,150 --> 00:00:12,630
atomic op approach are the same.

5
00:00:12,630 --> 00:00:17,210
Put 1 in R1 and
then load from Lockvar to R2.

6
00:00:17,210 --> 00:00:18,478
The idea of test and

7
00:00:18,478 --> 00:00:24,710
atomic-op is not to try the right
until we see that the lock is free.

8
00:00:24,710 --> 00:00:29,330
So before trying the store we should
check whether the lock is free.

9
00:00:29,330 --> 00:00:33,040
That is done by using
the B instruction here.

10
00:00:33,040 --> 00:00:35,960
So the correct answer should
have been just B here.

11
00:00:35,960 --> 00:00:39,510
And I'm going to write it out
to show you how it works.

12
00:00:39,510 --> 00:00:45,300
So [INAUDIBLE] is that if we load
a busy value, meaning a value of 1,

13
00:00:45,300 --> 00:00:48,660
then R2 is not equal to 0 and
we're just going to repeat this.

14
00:00:48,660 --> 00:00:53,230
So, as long as the lock is busy,
we just keep doing the load link.

15
00:00:53,230 --> 00:00:57,280
The load link without the corresponding
store conditional behaves just like

16
00:00:57,280 --> 00:00:58,122
a normal load.

17
00:00:58,122 --> 00:01:02,770
Yes, it's setting the link register
every time, but we're not checking it so

18
00:01:02,770 --> 00:01:04,860
it's just the same as if we didn't.

19
00:01:04,860 --> 00:01:08,180
But things get more interesting
once we actually see

20
00:01:08,180 --> 00:01:09,960
an available value of the lock.

21
00:01:11,020 --> 00:01:13,610
Then we try to do a store conditional.

22
00:01:13,610 --> 00:01:16,360
So now we should use the A instruction.

23
00:01:16,360 --> 00:01:17,880
So we have seen that the lock is free.

24
00:01:17,880 --> 00:01:20,850
Now we try to get it.

25
00:01:20,850 --> 00:01:23,530
And after this we need to check

26
00:01:23,530 --> 00:01:27,280
using instruction C whether
we actually got it.

27
00:01:27,280 --> 00:01:34,010
So if R1 is equal to 0, that means that
our store conditional didn't succeed.

28
00:01:34,010 --> 00:01:36,740
We go back to trying to
acquire the lock again.

29
00:01:36,740 --> 00:01:40,880
So we have seen that the lock is
free but between our load link and

30
00:01:40,880 --> 00:01:44,890
our store conditional somebody else
managed to write to the log so

31
00:01:44,890 --> 00:01:47,050
we need to retry the whole thing.

32
00:01:47,050 --> 00:01:50,060
So after our load link we check
whether the log was free.

33
00:01:50,060 --> 00:01:53,200
If so, we try to store conditional.

34
00:01:53,200 --> 00:01:56,000
If we succeed, then we got the lock.

35
00:01:56,000 --> 00:02:00,490
So the waiting for the lock to become
free is done using the same load link

36
00:02:00,490 --> 00:02:03,140
that will be part of
our atomic operation

37
00:02:03,140 --> 00:02:06,791
once we add the store conditional
when we see that the lock is free.
