1
00:00:00,390 --> 00:00:03,680
Let's talk about how we use
grid layout in Sunshine.

2
00:00:03,680 --> 00:00:06,840
Our key lines guide us in laying
out the top today section.

3
00:00:07,950 --> 00:00:10,590
We begin with the grid
layout declaration.

4
00:00:11,590 --> 00:00:14,200
Note that we are using
the support library version, so

5
00:00:14,200 --> 00:00:19,120
you will have to prefix grid layout
specific xml attributes with app, and

6
00:00:19,120 --> 00:00:21,740
include the res-auto schema.

7
00:00:21,740 --> 00:00:24,030
We use a column count of two.

8
00:00:24,030 --> 00:00:26,400
Adding a column count
isn't strictly necessary,

9
00:00:26,400 --> 00:00:29,290
as you can just specify the row and
column of each child, but

10
00:00:29,290 --> 00:00:31,690
it does simplify the declaration
of each of the children.

11
00:00:32,990 --> 00:00:35,860
Our first child is this space widget.

12
00:00:35,860 --> 00:00:39,730
Space is a lightweight view subclass
that is used to create gaps between

13
00:00:39,730 --> 00:00:40,860
components.

14
00:00:40,860 --> 00:00:42,200
It can be used anywhere, but

15
00:00:42,200 --> 00:00:45,410
it's actually part of the grid
layout support library.

16
00:00:45,410 --> 00:00:49,230
We'll have this space widget span
both columns with a column span of 2.

17
00:00:49,230 --> 00:00:54,090
We'll give it a column weight of 1, so
it will take up all available width, and

18
00:00:54,090 --> 00:00:55,270
a row weight of 1, so

19
00:00:55,270 --> 00:01:00,120
it will participate in getting any extra
row space when the layout is complete.

20
00:01:00,120 --> 00:01:03,420
First of all, the 16 DP spaces,

21
00:01:03,420 --> 00:01:08,380
using the padding horizontal material
constant from the support library,

22
00:01:08,380 --> 00:01:12,630
above and below the text view, are
generated from layout margin attributes.

23
00:01:12,630 --> 00:01:15,590
Remember that adding a layout
margin actually changes the borders

24
00:01:15,590 --> 00:01:17,200
around your layout.

25
00:01:17,200 --> 00:01:19,170
We're using material styles here.

26
00:01:19,170 --> 00:01:23,030
In this case, we're using the title
style and applying the standard sans

27
00:01:23,030 --> 00:01:27,160
serif font family with our secondary
text color from the material theme,

28
00:01:27,160 --> 00:01:30,850
since the title text appearance uses
a different font weight and color.

29
00:01:30,850 --> 00:01:34,010
Note the use of
the tools.text feature here.

30
00:01:34,010 --> 00:01:36,080
This allows us to populate
the view of text for

31
00:01:36,080 --> 00:01:39,510
the purposes of editing without
impacting the production code.

32
00:01:39,510 --> 00:01:42,200
This view also spans both columns.

33
00:01:42,200 --> 00:01:45,010
Because we want column weight to
be calculated for both columns,

34
00:01:45,010 --> 00:01:47,230
we must have it here and
everywhere we declare a child.

35
00:01:49,330 --> 00:01:52,240
We're finally,
actually using both columns.

36
00:01:52,240 --> 00:01:54,670
As before,
we need to declare a column weight so

37
00:01:54,670 --> 00:01:56,530
the grid view will
distribute the extra weight.

38
00:01:58,250 --> 00:02:01,550
We're finally actually
using both columns.

39
00:02:01,550 --> 00:02:04,150
As before,
we need to declare a column weight so

40
00:02:04,150 --> 00:02:06,960
the gridview will distribute
the extra weight.

41
00:02:06,960 --> 00:02:09,550
A couple of notes about the imageView.

42
00:02:09,550 --> 00:02:11,180
I'm using maxHeight and

43
00:02:11,180 --> 00:02:16,020
maxWidth along with the adjustviewBounds
to limit the size of our weather image.

44
00:02:16,020 --> 00:02:18,590
This allows more flexibility in layout.

45
00:02:18,590 --> 00:02:21,730
But still allows us to have a theme
image that may be larger than our layout

46
00:02:21,730 --> 00:02:23,210
size.

47
00:02:23,210 --> 00:02:27,300
The image view also uses a source
tag with a tools names based,

48
00:02:27,300 --> 00:02:29,320
to display an image
in the editors tools.

49
00:02:30,390 --> 00:02:34,550
We set up the forecast text view and the
low temperature text view in the same

50
00:02:34,550 --> 00:02:37,290
way as the columns in the previous row.

51
00:02:37,290 --> 00:02:41,220
Note that we were actually giving
the low temperature text zero margin,

52
00:02:41,220 --> 00:02:44,260
which is applying across both columns.

53
00:02:44,260 --> 00:02:47,570
Finally, we add another space
widget with a row weight

54
00:02:47,570 --> 00:02:51,660
to keep the rest of the content centered
within the grid layout, and that's it.

55
00:02:51,660 --> 00:02:53,260
We had the top of our detail layout,

56
00:02:53,260 --> 00:02:56,820
which is included from detail today,
grid.xml.

57
00:02:56,820 --> 00:02:57,870
The rest is up to you.
