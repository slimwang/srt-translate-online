1
00:00:00,000 --> 00:00:06,500
And the answer here is 5 to the power of n thirds, which is 1.71 to the power of n.

2
00:00:06,500 --> 00:00:09,000
Now if you compare that to the algorithm that we had before,

3
00:00:09,000 --> 00:00:14,000
that was about 1.73, so the improvement here is rather marginal.

4
00:00:14,000 --> 00:00:17,000
But there's two things to be said here--the first one is that

5
00:00:17,000 --> 00:00:21,500
the pre-processing rule that we used was actually a rather trivial one.

6
00:00:21,500 --> 00:00:24,000
It just concerned those vertices that have a single neighbor.

7
00:00:24,000 --> 00:00:26,800
There are much more complex pre-processing rules

8
00:00:26,800 --> 00:00:29,300
that will then allow you to design much better search trees.

9
00:00:29,300 --> 00:00:34,500
And the other thing is that we're using a very simple analysis of the search tree here.

10
00:00:34,500 --> 00:00:37,000
We're basically just saying there are eight possible assignments,

11
00:00:37,000 --> 00:00:41,500
and we're just using five of them; and in a more sophisticated search tree analysis,

12
00:00:41,500 --> 00:00:46,000
what you would do--you would not always have the same number of assignments

13
00:00:46,000 --> 00:00:48,000
in each of the cases that you go into.

14
00:00:48,000 --> 00:00:51,500
So you could have a search tree that, for example, in one possibility,

15
00:00:51,500 --> 00:00:54,000
only assigns two vertices a value;

16
00:00:54,000 --> 00:00:57,000
in another possibility, it assigns five vertices a value; and so on.

17
00:00:57,000 --> 00:01:01,000
And through this refined analysis, you can get much better,

18
00:01:01,000 --> 99:59:59,999
as we'll soon see for our vertex cover.
