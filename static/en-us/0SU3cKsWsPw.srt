1
00:00:00,780 --> 00:00:05,670
Now that we have filtered our data by year in our update function and

2
00:00:05,670 --> 00:00:10,100
bound our data using a key function keyed on the year,

3
00:00:10,100 --> 00:00:14,640
we're ready to start updating what's on our map as we iterate through our years.

4
00:00:14,640 --> 00:00:18,850
While it might seem like overkill to use a key binding function since we're

5
00:00:18,850 --> 00:00:22,780
only visualizing a single year with a single circle,

6
00:00:22,780 --> 00:00:26,690
we could imagine a scenario where we would have multiple elements on our page

7
00:00:26,690 --> 00:00:31,960
interacting in a complex way through updates, exits, and enters.

8
00:00:31,960 --> 00:00:36,430
To begin updating our map based on a single, we start,

9
00:00:36,430 --> 00:00:39,630
as we most always do, with our svg elements.

10
00:00:39,630 --> 00:00:43,970
In this case, we want to select all the circles that are currently on the page.

11
00:00:43,970 --> 00:00:48,600
Which in this case, is going to be every circle for every year.

12
00:00:48,600 --> 00:00:51,170
And then, rebind our new data.

13
00:00:51,170 --> 00:00:53,800
In this case, our data filtered by year.

14
00:00:53,800 --> 00:00:57,650
And to properly update our map we will use a key function.

15
00:00:57,650 --> 00:01:02,300
The same key function that we used when we initially bound our circles.

16
00:01:02,300 --> 00:01:05,150
Because we often would want these two to be the same.

17
00:01:05,150 --> 00:01:09,230
I'm going to abstract this away into a function defined above.

18
00:01:09,230 --> 00:01:14,160
In this case again, remember, we're simply extracting the key

19
00:01:14,160 --> 00:01:17,270
of the nested object that gets passed to the key function, and

20
00:01:17,270 --> 00:01:21,520
in our initial data bind we can simply pass in key_func.

21
00:01:21,520 --> 00:01:24,730
So that we're sure that when we update our data and

22
00:01:24,730 --> 00:01:29,900
rebind our filter data we can use the same key_func as well.

23
00:01:29,900 --> 00:01:34,298
Now we've been through a lot of code since we've explored it in our browser.

24
00:01:34,298 --> 00:01:36,060
So I want to take a moment to pause,

25
00:01:36,060 --> 00:01:41,090
place a debugger inside our update function and start inspecting where we are.

26
00:01:41,090 --> 00:01:44,500
Since update isn't being called currently,

27
00:01:44,500 --> 00:01:48,860
I'll also place a debugger at the end of our plot points function so

28
00:01:48,860 --> 00:01:52,240
that I can experiment with the code defined within it.

29
00:01:52,240 --> 00:01:54,790
Here you can see we have our nested object,

30
00:01:54,790 --> 00:01:59,320
which corresponds to the 20 games of the World Cup, and each nested object.

31
00:01:59,320 --> 00:02:03,030
If you remember has the key set to the year and

32
00:02:03,030 --> 00:02:07,120
the values with the total attendance x and y coordinate but

33
00:02:07,120 --> 00:02:13,030
also our new teams array, which in this case you can see the nice array of

34
00:02:13,030 --> 00:02:18,100
all the team's countries who participated in the World Cup for the given year.

35
00:02:18,100 --> 00:02:24,060
And I've added a call to the update function, with a given year so that

36
00:02:24,060 --> 00:02:29,520
we can then step into it, and see the debugger cache insider update function.

37
00:02:29,520 --> 00:02:32,660
And now if you look at our source here you

38
00:02:32,660 --> 00:02:35,720
can see that we're in the update function.

39
00:02:35,720 --> 00:02:40,370
We have filter data, which represents an array with a single object.

40
00:02:40,370 --> 00:02:43,010
That object represents a single year.

41
00:02:43,010 --> 00:02:46,370
In this case I ran update with the year 1930.

42
00:02:46,370 --> 00:02:49,780
And the values is what we would expect.

43
00:02:49,780 --> 00:02:53,140
And notice that we have this year argument available as

44
00:02:53,140 --> 00:02:57,180
well throughout the update function since we passed it in as the argument.

45
00:02:57,180 --> 00:03:01,920
Do you understand a little bit better how D3 updates work?

46
00:03:01,920 --> 00:03:03,906
Let's see what the selection currently looks like.

47
00:03:03,906 --> 00:03:09,680
A d3.selectALL on circle, returns an array of 20 circles

48
00:03:09,680 --> 00:03:15,040
which makes sense since there's 20 World Cups plotted on the map currently.

49
00:03:15,040 --> 00:03:17,880
And let's put a break point right after we

50
00:03:17,880 --> 00:03:23,700
bind data to circles to see what it looks like after we've bound new data to it.

51
00:03:23,700 --> 00:03:29,410
And if you look at the circle's variable now, where before we bound data,

52
00:03:29,410 --> 00:03:34,410
the svg.selectALL above were turning in array of 20 elements.

53
00:03:34,410 --> 00:03:37,640
With the newly bound data, filtered in this case,

54
00:03:37,640 --> 00:03:42,710
since it only has one element, returns an array with only one circle in it.

55
00:03:42,710 --> 00:03:46,280
Remember, from our previous Venn diagram.

56
00:03:46,280 --> 00:03:51,690
We know that the exit selection corresponds to every element present on the page

57
00:03:51,690 --> 00:03:56,840
that does not have any corresponding bound data in this new data bind.

58
00:03:56,840 --> 00:03:59,880
Or in our case, data bound and filtered.

59
00:03:59,880 --> 00:04:04,250
If we were to look at the enter selection on the newly bound circles,

60
00:04:04,250 --> 00:04:08,290
you can see here this corresponds to an array of a single element,

61
00:04:08,290 --> 00:04:10,150
which has an update property.

62
00:04:10,150 --> 00:04:12,700
The update property has a circle and

63
00:04:12,700 --> 00:04:16,690
that circle corresponds to the new data we're going to be adding.

64
00:04:16,690 --> 00:04:20,029
In this case, the year 1930.

65
00:04:20,029 --> 00:04:24,720
And if we inspect the exit selection on the circles it says we

66
00:04:24,720 --> 00:04:26,690
have an array of 20 elements.

67
00:04:27,940 --> 00:04:34,340
But notice near the bottom here that we have a parent node as part of the array.

68
00:04:34,340 --> 00:04:38,440
So if there's 20 elements and there's also an additional parent node

69
00:04:38,440 --> 00:04:43,760
element that we didn't have can you look at the list of circles here and

70
00:04:43,760 --> 00:04:49,410
figure out which year of the World Cup is not contained in the exit selection?

71
00:04:49,410 --> 00:04:53,960
Remember we have run update with year 1930, and

72
00:04:53,960 --> 00:04:58,860
I've shown you that the enter selection is one element under the update key.
