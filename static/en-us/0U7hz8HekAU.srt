1
00:00:00,000 --> 00:00:02,000
So this is an optional unit.

2
00:00:02,000 --> 00:00:07,000
I want you to program what you just learned in the previous units,

3
00:00:07,000 --> 00:00:10,000
and to me, this is an enormous amount of fun.

4
00:00:10,000 --> 00:00:14,000
It's challenging, especially if you don't have programming experience,

5
00:00:14,000 --> 00:00:19,000
but it's also the moment where you can really exercise and deeply understand

6
00:00:19,000 --> 00:00:22,000
some of the very basic concepts we talked about before.

7
00:00:22,000 --> 00:00:25,000
Of course these concepts weren't particularly hard.

8
00:00:25,000 --> 00:00:27,000
Really important is this is optional.

9
00:00:27,000 --> 00:00:30,000
This is not required for completing the class.

10
00:00:30,000 --> 00:00:32,000
This is really just a fun exercise,

11
00:00:32,000 --> 00:00:35,000
so feel free to go to the next unit

12
00:00:35,000 --> 00:00:37,000
if you don't want to program.

13
00:00:37,000 --> 00:00:41,000
So in the first exercise, we will calculate the mean of data.

14
00:00:41,000 --> 00:00:44,000
So we'll define what "mean" means.

15
00:00:44,000 --> 00:00:47,000
This means define mean, and mean is computed of something.

16
00:00:47,000 --> 00:00:49,000
So it's computed of data,

17
00:00:49,000 --> 00:00:51,000
and there's this funny notion of return,

18
00:00:51,000 --> 00:00:53,000
where you put the mathematic expression for the mean.

19
00:00:53,000 --> 00:00:58,000
So when you want to print, say, the mean of this specific data set here--

20
00:00:58,000 --> 00:01:00,000
let's call this "data 1"--

21
00:01:00,000 --> 00:01:03,000
you would say print mean of data 1.

22
00:01:03,000 --> 00:01:05,000
Now this is a little bit more complicated

23
00:01:05,000 --> 00:01:08,000
than the kind of instructions we did before.

24
00:01:08,000 --> 00:01:11,000
I'm actually defining what's called a function,

25
00:01:11,000 --> 00:01:15,000
and the reason why I do this is it allows us to test your function

26
00:01:15,000 --> 00:01:18,000
with different data examples to make sure it's really correct.

27
00:01:18,000 --> 00:01:21,000
But the key thing is you have to return the correct thing over here.

28
00:01:21,000 --> 00:01:23,000
I'll give you a hint:

29
00:01:23,000 --> 00:01:26,000
In Python, there are special commands.

30
00:01:26,000 --> 00:01:28,000
One is called "sum."

31
00:01:28,000 --> 00:01:30,000
Sum applies to lists like this one over here.

32
00:01:30,000 --> 00:01:33,000
It gives you the sum of all the elements.

33
00:01:33,000 --> 00:01:36,000
In this case, sum of data should give you

34
00:01:36,000 --> 00:01:38,000
the sum of those numbers over here,

35
00:01:38,000 --> 00:01:41,000
which will be 2 if you add them all up.

36
00:01:41,000 --> 00:01:43,000
The other convenient function

37
00:01:43,000 --> 00:01:46,000
that is part of the programming system of Python

38
00:01:46,000 --> 00:01:48,000
that you should just know it exists

39
00:01:48,000 --> 00:01:50,000
is called "len," short for length.

40
00:01:50,000 --> 00:01:52,000
How long is this thing?

41
00:01:52,000 --> 00:01:55,000
This thing here is 5 elements. One, two, three, four, five.

42
00:01:55,000 --> 00:01:57,000
So that'll give you 5.

43
00:01:57,000 --> 00:02:01,000
So let's dive in. Here's our programming environment with a data sequence.

44
00:02:01,000 --> 00:02:04,000
I'm setting up the mean function right over here.

45
00:02:04,000 --> 00:02:06,000
You are to return something.

46
00:02:06,000 --> 00:02:08,000
This is where you put your code.

47
00:02:08,000 --> 00:02:10,000
And then for testing, I just say

48
00:02:10,000 --> 00:02:14,000
let's run this function and print up what it returns. That's the syntax.

49
00:02:14,000 --> 00:02:16,000
So let me give you an example:

50
00:02:16,000 --> 00:02:18,000
Suppose you put a fixed value over in here,

51
00:02:18,000 --> 00:02:21,000
like 12 in this case.

52
00:02:21,000 --> 00:02:23,000
Now we hit the run button.

53
00:02:23,000 --> 00:02:26,000
Then the output would be 12, which is not the correct answer,

54
00:02:26,000 --> 00:02:29,000
but you can play with that.

55
00:02:29,000 --> 00:02:32,000
If you say return sum of data,

56
00:02:32,000 --> 00:02:37,000
which is the command I've just given you, and hit the run button,

57
00:02:37,000 --> 00:02:43,000
then for this specific data sequence you get 8 and not 16.0 as the answer.

58
00:02:43,000 --> 99:59:59,999
Now the job is yours to plug in the right answer over in here.
