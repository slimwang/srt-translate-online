1
00:00:00,500 --> 00:00:03,770
Here's the diagonalization trick
applied to Turing machines.

2
00:00:03,770 --> 00:00:08,290
We'll let M1, M2, etcetera,
be the set of all Turing machines.

3
00:00:08,290 --> 00:00:10,730
Turing machines can be
described as strings, so

4
00:00:10,730 --> 00:00:14,400
there are a countable number of them,
so we can enumerate them like this.

5
00:00:14,400 --> 00:00:17,310
And we'll create a table as before.

6
00:00:17,310 --> 00:00:22,770
I'll define the function
f(i,j) to be one, if machine i

7
00:00:22,770 --> 00:00:27,890
accepts the description of machine j and
we'll define it as zero otherwise.

8
00:00:27,890 --> 00:00:30,620
For this example I'll fill
out the table somehow.

9
00:00:30,620 --> 00:00:33,190
The actual values aren't
important right now.

10
00:00:33,190 --> 00:00:37,260
Now consider the language L
consisting of string descriptions

11
00:00:37,260 --> 00:00:40,340
of machines that do not accept
their own descriptions.

12
00:00:41,610 --> 00:00:42,980
And let's add a Turing machine,

13
00:00:42,980 --> 00:00:45,980
which we'll call ML that recognizes
this language to the grid.

14
00:00:47,080 --> 00:00:49,220
Well, again, we run into a problem.

15
00:00:49,220 --> 00:00:51,730
This row is supposed to
have the opposite values

16
00:00:51,730 --> 00:00:52,910
of what's along the diagonal.

17
00:00:53,960 --> 00:00:57,190
But what about the diagonal
element of this row?

18
00:00:57,190 --> 00:00:59,670
What does the machine do when
it's given its own description?

19
00:01:00,830 --> 00:01:05,710
If it accepts itself,
then ML is not in the language,

20
00:01:05,710 --> 00:01:08,820
so ML should not have accepted itself.

21
00:01:08,820 --> 00:01:13,150
On the other hand, if ML does not
accept its string representation,

22
00:01:13,150 --> 00:01:18,260
then ML isn't a language, so ML should
have accepted its string representation.

23
00:01:19,270 --> 00:01:22,420
Thankfully in computability,
the resolution to this paradox

24
00:01:22,420 --> 00:01:26,680
isn't as hard to see as it is in
set theory or mathematical logic.

25
00:01:26,680 --> 00:01:29,300
We just conclude that
the supposed machine

26
00:01:29,300 --> 00:01:33,170
ML that recognizes
the language L doesn't exist.

27
00:01:33,170 --> 00:01:36,000
Here, it is natural to object,
well, of course it exists.

28
00:01:36,000 --> 00:01:41,500
I just run M on itself and
if it doesn't accept, we accept.

29
00:01:41,500 --> 00:01:45,620
The problem is that M on itself
might loop, or it might just run for

30
00:01:45,620 --> 00:01:49,370
a really long time and
there's no way to tell the difference.

31
00:01:49,370 --> 00:01:53,730
The end result, then is that the
language, L, of string descriptions of

32
00:01:53,730 --> 00:01:58,620
machines that do not accept their own
descriptions is not recognizable.

33
00:01:58,620 --> 00:02:02,490
Recall that in order for a language to
be decidable, both the language and

34
00:02:02,490 --> 00:02:04,329
it's compliment have to be recognizable.

35
00:02:05,400 --> 00:02:08,919
Since L is not recognizable,
it's also not decidable.

36
00:02:10,008 --> 00:02:12,170
And neither is it's compliment,

37
00:02:12,170 --> 00:02:16,600
that is the language where the machine
does accept it's own description.

38
00:02:16,600 --> 00:02:20,380
We'll call this DTM,
D standing for diagonal.

39
00:02:20,380 --> 00:02:21,900
These facts are the foundation for

40
00:02:21,900 --> 00:02:24,010
everything that we will
argue in this lesson.

41
00:02:24,010 --> 00:02:25,950
So make sure that you
understand all these claims.
