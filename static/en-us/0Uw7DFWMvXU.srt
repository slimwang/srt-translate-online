1
00:00:00,410 --> 00:00:03,420
So now that you know a test is based
around expectations, you'll need to

2
00:00:03,420 --> 00:00:07,720
start identifying areas in our code
in which you're setting expectations.

3
00:00:07,720 --> 00:00:11,380
By doing this, you'll know exactly
what kind of test you need to run.

4
00:00:11,380 --> 00:00:14,670
Imagine I have this function
in one of my applications.

5
00:00:14,670 --> 00:00:15,720
It's pretty simple.

6
00:00:15,720 --> 00:00:17,640
It just adds two numbers together.

7
00:00:17,640 --> 00:00:20,170
And it would be called like this.

8
00:00:20,170 --> 00:00:23,430
The result of 2 plus 3 is 5.

9
00:00:23,430 --> 00:00:24,520
Pretty simple.

10
00:00:24,520 --> 00:00:27,660
But despite the simplicity of
this function, I've already set

11
00:00:27,660 --> 00:00:31,580
a whole lot of expectations about
how this function will be used.

12
00:00:31,580 --> 00:00:35,530
Right off the bat, when calling this
function, the first expectation I have

13
00:00:35,530 --> 00:00:39,760
is that the add function has been
defined and it actually exists.

14
00:00:39,760 --> 00:00:42,080
In this example, it's pretty obvious.

15
00:00:42,080 --> 00:00:46,800
But what if I had this function defined
in another file, like a library?

16
00:00:46,800 --> 00:00:49,550
This function wouldn't be so
obvious anymore.

17
00:00:49,550 --> 00:00:53,540
Secondly, I had the expectation that the
function is actually accomplishing our

18
00:00:53,540 --> 00:00:55,000
intended task.

19
00:00:55,000 --> 00:00:59,310
If this call were to return a different
number, like 6, it would be a clear

20
00:00:59,310 --> 00:01:03,540
indicator I've messed up the actual
implementation of the function somehow.

21
00:01:03,540 --> 00:01:08,000
Finally, I'm expecting this function
will always be called as I intended,

22
00:01:08,000 --> 00:01:10,090
with numbers as the parameter.

23
00:01:10,090 --> 00:01:13,130
But what if I were to call this
function with strings being

24
00:01:13,130 --> 00:01:15,240
passed in instead of numbers?

25
00:01:15,240 --> 00:01:19,410
I'd get the result 23,
which you'll notice is also a string,

26
00:01:19,410 --> 00:01:22,920
since the plus operator can
catonate strings together.

27
00:01:22,920 --> 00:01:26,770
It's important to identify each of these
expectations as early as possible so

28
00:01:26,770 --> 00:01:28,460
you can write tests against them,

29
00:01:28,460 --> 00:01:32,770
from whether the function even exists
to the output that is expected.

30
00:01:32,770 --> 00:01:36,610
This certainly isn't a comprehensive
list of every expectation, but as you

31
00:01:36,610 --> 00:01:40,770
continue to identify other expectations,
or opportunities for a test.

32
00:01:40,770 --> 00:01:42,720
You can always go back and
update your test suite.
