1
00:00:00,110 --> 00:00:03,866
We have seen a glimpse of fully
associative caches, so now let's go from

2
00:00:03,866 --> 00:00:07,883
the other direction, which is let's
first look at direct-mapped caches.

3
00:00:07,883 --> 00:00:13,121
If this is the memory, and
it contains blocks 0, 1, 2, 3,

4
00:00:13,121 --> 00:00:19,332
4, 5, 6, etc., and these are the block
numbers, not the addresses.

5
00:00:19,332 --> 00:00:23,797
So I'm assuming that this thing here is
an entire block worth of memory which

6
00:00:23,797 --> 00:00:26,200
contains multiple locations.

7
00:00:26,200 --> 00:00:29,610
And let's say we have a cache
with room for four blocks.

8
00:00:29,610 --> 00:00:36,820
We can number the lines 0, 1, 2,
and 3, and in a direct map cache,

9
00:00:36,820 --> 00:00:42,100
block 0, if it's in the cache at all,
needs to be in line number 0.

10
00:00:42,100 --> 00:00:47,458
Block 1, if it's in the cache at all,
will be in slot number 1.

11
00:00:47,458 --> 00:00:53,848
Block number 2, if it is in the cache
at all, has to be in this place here.

12
00:00:53,848 --> 00:00:57,990
Block number 3, if it is in
the cache at all, has to be here.

13
00:00:57,990 --> 00:01:04,540
And now block number 4 will, again,
get to map to line number 0.

14
00:01:04,540 --> 00:01:07,520
Block number 5 maps to line number 1.

15
00:01:07,520 --> 00:01:12,240
Block number 6 maps to line number 2,
etc.

16
00:01:12,240 --> 00:01:15,720
So, pretty much for
any given block address

17
00:01:15,720 --> 00:01:19,020
there is only one place in the cache
where that address can be.

18
00:01:19,020 --> 00:01:21,120
If we look at the memory address,

19
00:01:21,120 --> 00:01:24,170
the least significant bits
are still the block offset.

20
00:01:24,170 --> 00:01:29,410
They tell us where in the block are we,
assuming that we find the block.

21
00:01:29,410 --> 00:01:32,870
The block number now contains some bits

22
00:01:32,870 --> 00:01:37,220
that tell us where in
the cache this block can be.

23
00:01:37,220 --> 00:01:42,200
The index bits need to be sufficient to
tell us which of the lines in the cache

24
00:01:42,200 --> 00:01:43,360
are we talking about.

25
00:01:43,360 --> 00:01:45,575
So if there are four lines in the cache,

26
00:01:45,575 --> 00:01:48,880
then we need two index bits to
tell us where a block can map.

27
00:01:48,880 --> 00:01:55,311
And that is why in the block number
it was 0, 1, 2, 3, 0, 1, 2, 3, etc.

28
00:01:55,311 --> 00:01:58,511
It was determined by the lowermost
bits of the block number, and

29
00:01:58,511 --> 00:02:01,980
the remaining bits of
the address are now the tag.

30
00:02:01,980 --> 00:02:04,900
Now, there is an interesting
question of why the tag

31
00:02:04,900 --> 00:02:07,069
does not include the full block number.

32
00:02:08,340 --> 00:02:11,670
So, why doesn't the tag
cover also the index bits?

33
00:02:11,670 --> 00:02:16,670
And the answer to this is
that the tag needs to tell

34
00:02:16,670 --> 00:02:21,770
us which of the blocks do
we have in this place.

35
00:02:21,770 --> 00:02:25,980
And the answer is that the tag needs
to identify which block we have

36
00:02:25,980 --> 00:02:27,220
in the cache.

37
00:02:27,220 --> 00:02:30,000
Considering that the block would some

38
00:02:30,000 --> 00:02:33,625
in those bits has to be in one
place in the cache, the tag for

39
00:02:33,625 --> 00:02:37,200
that place in the cache doesn't need
to tell us what the index bits are.

40
00:02:37,200 --> 00:02:41,630
By looking at this particular
line we have already determined

41
00:02:41,630 --> 00:02:46,040
that these index bits have to be
the ones that correspond to that line.

42
00:02:46,040 --> 00:02:50,830
So all we have to do is tell us which
of the lines that can possibly be

43
00:02:50,830 --> 00:02:55,550
here do we really have, and for that we
only need these bits, because the index

44
00:02:55,550 --> 00:02:58,590
bits are pretty much predetermined
once we are already looking here.

45
00:02:59,660 --> 00:03:05,260
In other words,
if we stored the index bits in the tag,

46
00:03:05,260 --> 00:03:11,920
all of the tags that we could possibly
put here would have the same index bits,

47
00:03:11,920 --> 00:03:14,750
which means we don't have to store them,
because we already know them.
