1
00:00:00,280 --> 00:00:03,960
Now using object as a structuring mechanism, let's talk

2
00:00:03,960 --> 00:00:08,170
about objectization of the memory management function. We first start

3
00:00:08,170 --> 00:00:11,400
with the address space of the process. The address space

4
00:00:11,400 --> 00:00:14,020
of the process is shared by all the threads, and

5
00:00:14,020 --> 00:00:16,129
there's gotta be representation for the address space, and

6
00:00:16,129 --> 00:00:19,180
that is your process object. And it is shared by

7
00:00:19,180 --> 00:00:22,020
all the threads that are executing on the CPU. So

8
00:00:22,020 --> 00:00:25,310
we can think of this process object as somewhat equivalent

9
00:00:25,310 --> 00:00:29,340
to the process control block in a tradition

10
00:00:29,340 --> 00:00:31,980
setting. Now what we wanted to do is,

11
00:00:31,980 --> 00:00:34,460
we're going to take this address space. Remember that

12
00:00:34,460 --> 00:00:37,280
I mentioned I don't want a centralized data

13
00:00:37,280 --> 00:00:41,610
structure that describes the address space. Because, intuitively,

14
00:00:41,610 --> 00:00:44,610
if you think about the multi-traded application, the

15
00:00:44,610 --> 00:00:47,750
different trade of the application maybe accessing different

16
00:00:47,750 --> 00:00:50,310
portions of the address space and therefore, there is

17
00:00:50,310 --> 00:00:53,510
no reason to have a centralized data structure in the

18
00:00:53,510 --> 00:00:57,850
operating system to describe the entire address space of that process.

19
00:00:57,850 --> 00:00:59,660
So what we're going to do is we're going to take the

20
00:00:59,660 --> 00:01:02,920
address space. And break it into regions. So there's a green

21
00:01:02,920 --> 00:01:05,630
region here and a purple region here. So, the green

22
00:01:05,630 --> 00:01:09,510
region is a portion of the address space. The, the purple

23
00:01:09,510 --> 00:01:12,970
region is another portion of the address space. Logically, they are

24
00:01:12,970 --> 00:01:15,480
all part of the operating system, data structure of the page

25
00:01:15,480 --> 00:01:17,700
table, but what we have done is we have

26
00:01:17,700 --> 00:01:20,970
sort of detonated the page table data structure, essential

27
00:01:20,970 --> 00:01:23,250
data structure, and said that well there is a

28
00:01:23,250 --> 00:01:26,430
portion of this page table data structure The green region,

29
00:01:26,430 --> 00:01:30,130
another portion is the purple region and of course,

30
00:01:30,130 --> 00:01:33,400
these regions have to be backed by files on the

31
00:01:33,400 --> 00:01:36,670
storage sub system so, we will call them, these

32
00:01:36,670 --> 00:01:40,830
objects as File Cache Managers, so similar to breaking up

33
00:01:40,830 --> 00:01:45,660
the address space into regions, we are going to carve up the backing store also

34
00:01:45,660 --> 00:01:50,790
into what we call File Cache Manager that backs each one of these regions, so,

35
00:01:50,790 --> 00:01:55,460
for instance, This FCM1 is a piece of the storage subsystem that

36
00:01:55,460 --> 00:02:00,540
backs this region R1 and similarly FCM2 backs this region R2.

37
00:02:00,540 --> 00:02:06,080
Of course for any of these threads to do their work the

38
00:02:06,080 --> 00:02:09,160
regions that they're executing in They have to be

39
00:02:09,160 --> 00:02:11,790
in physical memory, so that they can actually get

40
00:02:11,790 --> 00:02:15,280
to the instructions and data corresponding to that portion

41
00:02:15,280 --> 00:02:18,620
of the address space, and therefore we need a page

42
00:02:18,620 --> 00:02:22,170
frame manager, and the page frame manager is also

43
00:02:22,170 --> 00:02:25,440
going to be implemented as an object, a DRAM object, and

44
00:02:25,440 --> 00:02:28,240
this DRAM object is the one that serves page

45
00:02:28,240 --> 00:02:31,310
frames, so when You, when the page fault service needs

46
00:02:31,310 --> 00:02:33,760
to get a page frame, it contacts a page

47
00:02:33,760 --> 00:02:36,180
frame DRAM object in order to get a physical

48
00:02:36,180 --> 00:02:39,690
page frame so that it can then move the

49
00:02:39,690 --> 00:02:44,590
contents of this backing file the file cache manager

50
00:02:44,590 --> 00:02:47,390
for that particular region and bring that from the

51
00:02:47,390 --> 00:02:51,170
storage subsystem Into the DRAM, for future use by

52
00:02:51,170 --> 00:02:54,270
a particular thread. So that is another object, and

53
00:02:54,270 --> 00:02:56,890
of course, you have to do the input output

54
00:02:56,890 --> 00:03:02,220
in order to move the page from the, back in store into DRAM, and so

55
00:03:02,220 --> 00:03:04,450
we going to declare that there'll be another object

56
00:03:04,450 --> 00:03:07,760
which we'll call the cached object representation COR,

57
00:03:07,760 --> 00:03:13,810
and this is the one that is going to be responsible for knowing The location of

58
00:03:13,810 --> 00:03:19,170
the object that your looking for on the backing store and do the actual page IO.
