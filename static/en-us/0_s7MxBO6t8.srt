1
00:00:00,000 --> 00:00:03,000
Do you think that doing good theoretical analysis

2
00:00:03,000 --> 00:00:06,000
and doing that in conjunction with the development of algorithms

3
00:00:06,000 --> 00:00:09,000
leads to better, more practical systems?

4
00:00:09,000 --> 00:00:11,000
Yes, of course.

5
00:00:11,000 --> 00:00:14,000
Data sets nowadays are mostly fairly big.

6
00:00:14,000 --> 00:00:21,000
You cannot just rely on hacking to get setups you need.

7
00:00:21,000 --> 00:00:25,000
You really need something which works well in an asymptotic sense.

8
00:00:25,000 --> 00:00:27,000
So, asymptotics is very, very relevant now.

9
00:00:27,000 --> 00:00:31,000
On the other hand, there is a big gap between theory and practice often,

10
00:00:31,000 --> 00:00:35,000
and we really have to close this gap.

11
00:00:35,000 --> 00:00:41,000
It's hard for developers--they don't have the background

12
00:00:41,000 --> 00:00:45,000
and also they don't have the time to read the latest paper

13
00:00:45,000 --> 00:00:51,000
within the time they have to develop a product to implement that.

14
00:00:51,000 --> 00:00:55,000
I think it's very important to come up with algorithms

15
00:00:55,000 --> 00:00:59,000
and investigate their practicality and describe their practical variance.

16
00:00:59,000 --> 00:01:01,000
Do you see that happening by people working in teams?

17
00:01:01,000 --> 00:01:06,000
Or do you think like each individual has to be expert in both

18
00:01:06,000 --> 00:01:09,000
the engineering side and also the analysis.

19
00:01:09,000 --> 00:01:15,000
No, it's best done in teams, because there are some individuals who are good at both,

20
00:01:15,000 --> 00:01:20,000
but in general there are people who are better at inventing new math,

21
00:01:20,000 --> 00:01:25,000
and there are people who are better at engineering new algorithms.

22
00:01:25,000 --> 00:01:29,000
It can be done in teams or also in a process of scientific publication.

23
00:01:29,000 --> 00:01:33,000
Someone publishes their theoretical algorithms,

24
00:01:33,000 --> 00:01:36,000
and then someone else gets a good implementation of it.

25
00:01:36,000 --> 00:01:38,000
For me, algorithms have several components.

26
00:01:38,000 --> 00:01:46,000
There is a mathematical component of algorithms, which is formal analysis of algorithms,

27
00:01:46,000 --> 00:01:51,000
and then there is an engineering aspect where you try to implement

28
00:01:51,000 --> 00:01:55,000
the fastest algorithm you can on a real problem.

29
00:01:55,000 --> 00:01:58,000
I'd like to think the approach which is data-centric method,

30
00:01:58,000 --> 00:02:01,000
which combines the two approaches.

31
00:02:01,000 --> 00:02:06,000
So, you sort of observe the real world and make some computational models,

32
00:02:06,000 --> 00:02:11,000
and then to try to design an algorithm for it and prove some things about it.

33
00:02:11,000 --> 00:02:16,000
Then we implement this algorithm and see if it performs as theory predicts,

34
00:02:16,000 --> 00:02:21,000
and if not, you try to modify the theory and does that explain that behavior

35
00:02:21,000 --> 00:02:25,000
of this algorithm or invent a better algorithm.

36
00:02:25,000 --> 00:02:28,000
How do you even measure the asymptotic running time in practice?

37
00:02:28,000 --> 00:02:32,000
Do you run bigger and bigger random examples? That sort of thing?

38
00:02:32,000 --> 00:02:35,000
It's easy on synthetic data, yeah.

39
00:02:35,000 --> 00:02:40,000
If you have a certain generator which you can set parameters,

40
00:02:40,000 --> 00:02:43,000
then you can measure how an algorithm acts.

41
00:02:43,000 --> 00:02:46,000
On real-world data it's much harder.

42
00:02:46,000 --> 00:02:50,000
Right, because it doesn't necessarily scale in a natural way.

43
00:02:50,000 --> 00:02:52,000
And also for old random examples

44
00:02:52,000 --> 00:02:54,000
there are only two natural examples.

45
00:02:54,000 --> 00:02:57,000
Namely, Europe and North America.
