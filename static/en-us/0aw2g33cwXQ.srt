1
00:00:00,000 --> 00:00:03,000
All right. Now we've got two different algorithms--naive and Russian--

2
00:00:03,000 --> 00:00:05,000
that can both be used to multiply numbers together.

3
00:00:05,000 --> 00:00:07,000
Who's better? How are we going to figure that out?

4
00:00:07,000 --> 00:00:09,000
Depends. What matters to us?

5
00:00:09,000 --> 00:00:11,000
It could be that you want the program to be really easily read,

6
00:00:11,000 --> 00:00:14,000
in which case naive is probably easier than Russian.

7
00:00:14,000 --> 00:00:16,000
But it could also depend on speed.

8
00:00:16,000 --> 00:00:19,000
Which one gives you the answer that you want fastest?

9
00:00:19,000 --> 00:00:21,000
How can we find out which one is faster?

10
00:00:21,000 --> 00:00:24,000
For starters, we can do some plotting again. Let's do that.

11
00:00:24,000 --> 00:00:27,000
I wanted to show you a plot of the running time of Russian for a range

12
00:00:27,000 --> 00:00:29,000
of different values for squaring.

13
00:00:29,000 --> 00:00:32,000
Russian(n, n) for lots of different values of n.

14
00:00:32,000 --> 00:00:34,000
But the plot was really uninteresting.

15
00:00:34,000 --> 00:00:39,000
The reason was that I just couldn't for the life of me get it to take more than 2 ms

16
00:00:39,000 --> 00:00:41,000
to multiply two numbers together.

17
00:00:41,000 --> 00:00:44,000
I used numbers as big as 2^1000, which is a very, very big number,

18
00:00:44,000 --> 00:00:47,000
and it returns instantaneously.

19
00:00:47,000 --> 00:00:50,000
After numbers get much bigger than this the plotting routine gets very confused,

20
00:00:50,000 --> 00:00:53,000
because it doesn't know how to deal with numbers this large.

21
00:00:53,000 --> 00:00:58,000
Whereas for--shall we say--only 2^23 naive was taking already 3 seconds,

22
00:00:58,000 --> 00:01:00,000
which is a lot longer.

23
00:01:00,000 --> 99:59:59,999
There's a huge difference between the running times of these algorithms.
