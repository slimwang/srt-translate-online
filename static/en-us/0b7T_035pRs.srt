1
00:00:00,150 --> 00:00:03,610
So the simplest predictor that uses history is

2
00:00:03,610 --> 00:00:07,166
called the Branch Target Buffer. What it does is

3
00:00:07,166 --> 00:00:10,462
it takes the current PC of the branch,

4
00:00:10,462 --> 00:00:14,067
and uses that to index into a table, which

5
00:00:14,067 --> 00:00:20,500
we call the BTB. And from this table, what we'll read out is our best guess

6
00:00:20,500 --> 00:00:24,870
for what the next PC will be. But how do we know what to put in this table?

7
00:00:24,870 --> 00:00:27,741
Well, we carry the PC of the branch

8
00:00:27,741 --> 00:00:32,500
and the predicted PC with it through the pipeline.

9
00:00:32,500 --> 00:00:35,590
So, this is what happens at fetch. Later on

10
00:00:35,590 --> 00:00:38,960
in the pipeline, we have the correct PCNew. At

11
00:00:38,960 --> 00:00:41,530
that point, we will compare the predicted one

12
00:00:41,530 --> 00:00:43,860
with the correct one, and if they're not equal,

13
00:00:43,860 --> 00:00:47,651
we will treat that as a misprediction. And, also,

14
00:00:47,651 --> 00:00:50,243
we will use the branches own PC to index

15
00:00:50,243 --> 00:00:53,159
again into the BTB, and write this new PC,

16
00:00:53,159 --> 00:00:56,156
that is correct, into the table so that next

17
00:00:56,156 --> 00:00:59,100
time we see this branch. We get the correct

18
00:00:59,100 --> 00:01:03,615
prediction assuming that it's jumping to the same location. But

19
00:01:03,615 --> 00:01:08,750
there is a problem with our BTB, how big does it needs to be. We want it to

20
00:01:08,750 --> 00:01:12,190
in once cycle, given the current PC predict the

21
00:01:12,190 --> 00:01:15,680
PC, so it needs to have a single cycle latency.

22
00:01:15,680 --> 00:01:17,140
That means we want it to be really

23
00:01:17,140 --> 00:01:21,810
small. However, it needs to contain an entire instruction

24
00:01:21,810 --> 00:01:25,376
address. Let's say we're using 64 bit addressing,

25
00:01:25,376 --> 00:01:28,060
that means each entry is 8 bytes. And we

26
00:01:28,060 --> 00:01:31,880
need one entry for each possible PC from

27
00:01:31,880 --> 00:01:35,360
which we can fetch. The program can be large.

28
00:01:35,360 --> 00:01:37,900
Note that an instruction can be four bytes,

29
00:01:37,900 --> 00:01:41,430
yet we need eight bytes in the BTB. So

30
00:01:41,430 --> 00:01:44,710
really the BTB needs to be as large as the program

31
00:01:44,710 --> 00:01:50,160
itself, which is really large. So we cannot have a dedicated entry

32
00:01:50,160 --> 00:01:54,410
in the BTB for every possible PC address. We need the

33
00:01:54,410 --> 00:01:57,410
BTB to be much smaller than that. How do we do that?
