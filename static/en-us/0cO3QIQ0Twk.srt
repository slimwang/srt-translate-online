1
00:00:00,300 --> 00:00:03,490
To visit all elements in a Two-D array, you want to loop over the rows and

2
00:00:03,490 --> 00:00:08,231
columns. Let's first loop over the rows. So we have a row index i that assumes

3
00:00:08,231 --> 00:00:13,796
to values zero, one, and two in this example. Similarly, we'll have a column

4
00:00:13,796 --> 00:00:18,206
index j, then in this example, we'll go from zero to one. If we had more

5
00:00:18,206 --> 00:00:22,936
columns, of course it would go further. When you have a row of column index,

6
00:00:22,936 --> 00:00:28,186
then we can access the element at the i-th row, and the j-th column. So what

7
00:00:28,186 --> 00:00:33,600
you see over here. As the general expression for an element at an arbitrary row

8
00:00:33,600 --> 00:00:39,861
and arbitrary column. In this case, we just print it and we use printf. So that

9
00:00:39,861 --> 00:00:44,686
the print out lines up nicely. So we would now print this element and print

10
00:00:44,686 --> 00:00:49,480
that element, that would finish the innerloop. Then the outer loop would pick

11
00:00:49,480 --> 00:00:53,750
the next row, we print these two, and then the outer loop picks the last row.

12
00:00:53,750 --> 00:00:57,518
And we print those two. Now, of course, we want the numbers to line up nicely,

13
00:00:57,518 --> 00:01:02,694
so after printing each row, we want to print a new line. Notice that this

14
00:01:02,694 --> 00:01:07,321
statement is contained in the outer loop, because it happens once per row. But

15
00:01:07,321 --> 00:01:10,798
its not in the inner loop because we don't want a new line after every of the

16
00:01:10,798 --> 00:01:15,861
element. Now, lets look at the missing balance here. Of course, in this simple

17
00:01:15,861 --> 00:01:19,101
example I could just say I should be less than three, J should be less than

18
00:01:19,101 --> 00:01:22,557
two, but in general, someone might just hand you a two-dimensional array and

19
00:01:22,557 --> 00:01:28,554
you should ask it how big it is. Just like with a one-dimensional array, you

20
00:01:28,554 --> 00:01:34,210
just use the length field to find out how big an array is. You can get the

21
00:01:34,210 --> 00:01:40,713
number of rows from a two-dimensional array by asking it arrayname.length. And

22
00:01:40,713 --> 00:01:43,875
the reason for this is that a two-dimensional array is actually an array of

23
00:01:43,875 --> 00:01:48,472
one-dimensional arrays. So prices, which looks like this nice tabular

24
00:01:48,472 --> 00:01:54,433
arrangement, really is an array of three arrays, one for each row. And so the

25
00:01:54,433 --> 00:02:00,045
number of rows is given by that length. Now, we need to look at how many

26
00:02:00,045 --> 00:02:04,548
columns we have. Here you have a row. And the length of that row is the number

27
00:02:04,548 --> 00:02:08,883
of columns. So in general, you should remember that, for any two-dimensional

28
00:02:08,883 --> 00:02:12,533
array, you get the number of rows with this expression, the number of columns

29
00:02:12,533 --> 00:02:17,102
with that expression. Now, let's move on to doing something more interesting

30
00:02:17,102 --> 00:02:19,380
with two-dimensional arrays and gas prices.
