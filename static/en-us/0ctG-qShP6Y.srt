1
00:00:00,410 --> 00:00:03,240
Now let's use some of
the bitwise operators.

2
00:00:03,240 --> 00:00:07,985
The first four bitwise operators that
we'll look at, not, and, or, and

3
00:00:07,985 --> 00:00:12,090
xor, are closely related to the logical
operators we've seen before

4
00:00:12,090 --> 00:00:14,350
that operate on bool values.

5
00:00:14,350 --> 00:00:18,270
The difference being that bitwise
operators manipulate bits, 1s and 0s,

6
00:00:18,270 --> 00:00:23,380
and the logical operators manipulate
bool values, true and false.

7
00:00:23,380 --> 00:00:27,633
The first bitwise operator is the not or
invert operator.

8
00:00:27,633 --> 00:00:31,706
This operator takes each binary digit,
also called a bit,

9
00:00:31,706 --> 00:00:33,343
and it flips its value.

10
00:00:33,343 --> 00:00:37,840
So if we look at this value,
we have four 0s, followed by four 1s.

11
00:00:37,840 --> 00:00:42,320
And when we use the binary not operator,
it flips these bits.

12
00:00:42,320 --> 00:00:47,290
And the new value will be equal to this,
where all the 0s have become 1s and

13
00:00:47,290 --> 00:00:50,470
all the 1s have become 0s.

14
00:00:50,470 --> 00:00:53,730
Now you'll notice that the values on
the right still show the base ten

15
00:00:53,730 --> 00:00:54,940
representation of the number,

16
00:00:54,940 --> 00:00:58,290
while their base two equivalent
is shown here in the comment.

17
00:00:58,290 --> 00:01:02,580
And it's just important to remember
that almost any value, actually I'd say

18
00:01:02,580 --> 00:01:07,830
every value on a computer, at some point
can reduce down to zeros and ones.

19
00:01:07,830 --> 00:01:11,404
Now for us it makes a whole lot more
sense to look at numbers in base ten

20
00:01:11,404 --> 00:01:15,150
than it does in binary, but at one
time that was the way we programmed.

21
00:01:16,460 --> 00:01:18,838
The next bitwise operator is AND.

22
00:01:18,838 --> 00:01:23,206
When we use Bitwise AND, it goes
bit by bit through two numbers, and

23
00:01:23,206 --> 00:01:26,970
it produces a one if both bits are one,
or zero otherwise.

24
00:01:28,060 --> 00:01:32,380
If you want to relate the bitwise AND
Operator to the logical and operator,

25
00:01:32,380 --> 00:01:37,548
we'll want to imagine that each bit is
a truth value where zero is false and

26
00:01:37,548 --> 00:01:39,000
one is true.

27
00:01:39,000 --> 00:01:42,350
And if we think of them that way,
then we can construct a truth statement.

28
00:01:42,350 --> 00:01:45,640
For example, if it's raining outside and

29
00:01:45,640 --> 00:01:48,720
it's cold outside,
then I should wear a heavy jacket.

30
00:01:49,800 --> 00:01:52,556
Let's make our first value here,

31
00:01:52,556 --> 00:01:58,463
which is a 0 that represents false
pertain to the isRaining truth value.

32
00:01:58,463 --> 00:02:00,570
So it's false that it's raining outside.

33
00:02:01,990 --> 00:02:05,430
Then let's make our second value here,
which is a 1,

34
00:02:05,430 --> 00:02:10,160
which represents true,
be part of the truth statement as well.

35
00:02:10,160 --> 00:02:12,360
So, it's true that it is cold outside.

36
00:02:13,390 --> 00:02:16,050
Now because both statements aren't true,

37
00:02:16,050 --> 00:02:19,400
then it's not true that we need
to wear a heavy jacket outside.

38
00:02:19,400 --> 00:02:20,182
It's not raining.

39
00:02:20,182 --> 00:02:24,381
It is cold, but because it's not
raining and it's cold at the same time,

40
00:02:24,381 --> 00:02:27,640
then we don't need to
wear a heavy jacket.

41
00:02:27,640 --> 00:02:31,680
And the 0 that we see here in
the result is equivalent to false.

42
00:02:31,680 --> 00:02:33,100
And we would do this process for

43
00:02:33,100 --> 00:02:37,030
each bit in both of the operands
until we get our full result.

44
00:02:37,030 --> 00:02:39,840
The same process happens for each bit.

45
00:02:39,840 --> 00:02:42,560
I've added some space before
this first number here so

46
00:02:42,560 --> 00:02:44,789
that we can see each bit
on top of one another.

47
00:02:45,920 --> 00:02:49,382
So I'm going to fill these in
one by one as we perform an AND

48
00:02:49,382 --> 00:02:51,343
operation on each pair of bits.

49
00:02:51,343 --> 00:02:55,625
So for the first we have 0 and
1, that would be 0.

50
00:02:55,625 --> 00:02:59,817
For the second one we have 1 and
1, that would be 1.

51
00:02:59,817 --> 00:03:03,371
And then I'll continue filling this
out until we get our final number.

52
00:03:03,371 --> 00:03:06,003
And I'll print out the number
just as a sanity check.

53
00:03:06,003 --> 00:03:09,667
And we get the same number here as we
do when we're actually using the AND

54
00:03:09,667 --> 00:03:10,820
operator.

55
00:03:10,820 --> 00:03:13,840
Now, the bitwise OR
operator works in a similar way.

56
00:03:13,840 --> 00:03:16,340
For each pair of bits,
if the first bit or

57
00:03:16,340 --> 00:03:19,420
the second bit is one,
then that results in a one.

58
00:03:19,420 --> 00:03:21,550
Otherwise, it results in a zero.

59
00:03:21,550 --> 00:03:24,480
So we can work our way through
this one bit at a time, and

60
00:03:24,480 --> 00:03:26,230
we get this binary number.

61
00:03:26,230 --> 00:03:28,300
And if we print it out,
we get 239 again.

62
00:03:30,330 --> 00:03:32,360
Next let's look at XOR.

63
00:03:32,360 --> 00:03:36,570
XOR is closely related to
the logical not equal to operator.

64
00:03:36,570 --> 00:03:39,570
So for each pair of bits,
if the bits are not equal to each other,

65
00:03:39,570 --> 00:03:42,630
or they don't match,
then it results in a one.

66
00:03:42,630 --> 00:03:44,950
Otherwise it results as zero.

67
00:03:44,950 --> 00:03:48,487
So for this first pair of bits
we have 1 and 1, 1 and 1.

68
00:03:48,487 --> 00:03:51,500
And those are equal to each other so
we would result in a false.

69
00:03:51,500 --> 00:03:53,220
We want them to be not
equal to each other.

70
00:03:54,450 --> 00:03:57,230
And I'll continue doing this for
the rest of the bits.

71
00:03:57,230 --> 00:03:59,200
And we get a result of 90
if we go through each bit,

72
00:03:59,200 --> 00:04:01,040
and this matches our other result.

73
00:04:02,400 --> 00:04:04,410
I'm going to go ahead and
skip to the example.

74
00:04:04,410 --> 00:04:07,200
But if you want to learn more
about these bitwise operators,

75
00:04:07,200 --> 00:04:08,800
like the left shift operator or

76
00:04:08,800 --> 00:04:12,300
the right shift operator, then check out
the links provided in the playground.
