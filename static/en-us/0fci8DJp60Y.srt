1
00:00:00,110 --> 00:00:02,870
Okay, I'm going to show you how I arrived at my answer. So

2
00:00:02,870 --> 00:00:06,689
I'm going to select this line. And I'm actually going to use the Python

3
00:00:06,689 --> 00:00:10,020
IDE, to, to figure out the kind of structure of this document.

4
00:00:10,020 --> 00:00:13,080
Here we are in the IDE. I'm going to paste in that first line.

5
00:00:13,080 --> 00:00:14,765
So I pasted in that first line. It's in a variable called

6
00:00:14,765 --> 00:00:17,850
reddit_front. We can go ahead, and run length on it. We see

7
00:00:17,850 --> 00:00:21,150
it's 26,000 characters. Okay, so the first thing I'm going to do is

8
00:00:21,150 --> 00:00:25,530
import json. And then I'm going to convert this, this document into json

9
00:00:25,530 --> 00:00:28,450
using the loads function in the json module. So now I've got

10
00:00:28,450 --> 00:00:31,810
this big dictionary: j. And it's got all this stuff in it. Actually,

11
00:00:31,810 --> 00:00:34,940
that wasn't very useful. It just printed everything. So let's look at j.keys.

12
00:00:34,940 --> 00:00:38,100
We can see there are two keys here: kind and data. Data is

13
00:00:38,100 --> 00:00:40,910
almost certainly the one we want. Let's look at that. Oh, another

14
00:00:40,910 --> 00:00:44,070
bunch of stuff. Let's look at the keys on this. This has just

15
00:00:44,070 --> 00:00:47,620
four keys: after, before, children, and modhash. Children is going to be one

16
00:00:47,620 --> 00:00:50,600
we want. The other ones are just simple little variables. So let's look

17
00:00:50,600 --> 00:00:53,690
at children. Now we're starting to get somewhere. Let's look at the keys

18
00:00:53,690 --> 00:00:56,900
of this. It's a list. So it's probably a list of lengths. Which

19
00:00:56,900 --> 00:00:59,570
is kind of what we're expecting. Let's look at one of these. Again,

20
00:00:59,570 --> 00:01:02,000
a bunch of crap. But let's look at the keys for the first

21
00:01:02,000 --> 00:01:05,030
element in the links, or in this children's list. We can see that

22
00:01:05,030 --> 00:01:08,150
it has kind and data. So let's look at the data for this

23
00:01:08,150 --> 00:01:11,430
guy. We're starting to get a little bit closer. Let's see what the

24
00:01:11,430 --> 00:01:15,720
keys are for this guy. Aha, perfect. And we can see that 'ups' is

25
00:01:15,720 --> 00:01:18,400
actually in this. So if I were to call ups, we can see that

26
00:01:18,400 --> 00:01:21,280
it is the integer of the number of ups on this link. So that's how

27
00:01:21,280 --> 00:01:25,150
I found this. So, looking at our total JSON document, were going to look at

28
00:01:25,150 --> 00:01:26,750
data, were going to look at children. And

29
00:01:26,750 --> 00:01:28,770
then for each of the children, were going to

30
00:01:28,770 --> 00:01:31,670
sum up the ups. If I were to change zero to one, to find

31
00:01:31,670 --> 00:01:34,900
the second element on the list, we can see that we get another variable. I'm

32
00:01:34,900 --> 00:01:37,960
going to take this piece of code with me into the ide, and were going to write

33
00:01:37,960 --> 00:01:40,700
a function to add up all the ups. Okay, here we are in the ide,

34
00:01:40,700 --> 00:01:43,790
and what we want to do is we want to sum up all

35
00:01:43,790 --> 00:01:46,030
of the ops. So I can say sum. So I'm going to

36
00:01:46,030 --> 00:01:52,540
say C data ups, for C in data children. Basically what

37
00:01:52,540 --> 00:01:55,500
I'm doing, is I'm iterating over the list data children, which

38
00:01:55,500 --> 00:01:58,160
we know is a list. For C, and each element in

39
00:01:58,160 --> 00:02:00,920
that list, I'm going to look up data ups on that object

40
00:02:00,920 --> 00:02:03,430
C. And then we're going to sum it up using the Python

41
00:02:03,430 --> 00:02:05,970
built in function, sum, and I'm just going to return that.

42
00:02:05,970 --> 00:02:09,770
Let's give that a run. J is not defined. That's

43
00:02:09,770 --> 00:02:12,590
means I didn't load the actual string of the Reddit

44
00:02:12,590 --> 00:02:15,420
frontpage in JSON, into a JSON object. So let's do

45
00:02:15,420 --> 00:02:19,920
that. Let's run that again. Here we go. Now, here's your

46
00:02:19,920 --> 00:02:22,860
answer, 103978. Simple enough. Now, what I wanted you to

47
00:02:22,860 --> 00:02:25,160
accomplish there was just learn how to you now load this

48
00:02:25,160 --> 00:02:28,720
into JSON, and then manipulate the data structure a little

49
00:02:28,720 --> 00:02:31,300
bit. And, you can see it's just like manipulating any Python

50
00:02:31,300 --> 00:02:35,020
data structure because JSON maps very cleanly to what we

51
00:02:35,020 --> 00:02:37,330
already have been working with in Python which is dictionaries

52
00:02:37,330 --> 00:02:39,150
and lists and integers and floats and that sort of

53
00:02:39,150 --> 00:02:42,410
thing, so. Pretty handy there. You are now a JSON expert.
