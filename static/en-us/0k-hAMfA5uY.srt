1
00:00:00,350 --> 00:00:06,480
So there are two correct answers, the third one, and

2
00:00:06,480 --> 00:00:11,140
the fifth one. And this is why a hash table is such a great

3
00:00:11,140 --> 00:00:15,790
advance over the linear index, is that we can double the number of keywords, and

4
00:00:15,790 --> 00:00:17,600
double the number of buckets, and the look up

5
00:00:17,600 --> 00:00:20,200
time stays the same. With the linear index, if we

6
00:00:20,200 --> 00:00:22,725
double the number of keywords for each look up, we

7
00:00:22,725 --> 00:00:25,280
need to go through the loop once for each keyword.

8
00:00:25,280 --> 00:00:27,760
If the keyword was near the end or one that wasn't

9
00:00:27,760 --> 00:00:30,100
in the table, the time to look up the keyword would

10
00:00:30,100 --> 00:00:32,916
double as we double the number of keywords. With a hash

11
00:00:32,916 --> 00:00:35,740
table if we also double the number of buckets when we double

12
00:00:35,740 --> 00:00:39,400
the number of keywords, well then the number of keywords in

13
00:00:39,400 --> 00:00:43,720
each bucket stays the same. We're dividing the keywords evenly between

14
00:00:43,720 --> 00:00:47,039
buckets. So this is the number, the number of keywords per

15
00:00:47,039 --> 00:00:50,540
bucket is the number of keywords divided by the number of buckets.

16
00:00:50,540 --> 00:00:54,330
Of we double both, that number stays approximately the same. The

17
00:00:54,330 --> 00:00:57,780
time to look up only depends on the number of keywords per

18
00:00:57,780 --> 00:01:01,450
bucket. The time to find the bucket is very fast, right? We

19
00:01:01,450 --> 00:01:04,420
just need to run the hash function, find that element of the

20
00:01:04,420 --> 00:01:07,730
list. Both of those don't depend on the size of the

21
00:01:07,730 --> 00:01:10,210
list, how long it takes to do that. And then we have

22
00:01:10,210 --> 00:01:13,930
to look through the bucket, the size of the bucket, we have

23
00:01:13,930 --> 00:01:16,210
to look though each element in the bucket one at a time.

24
00:01:16,210 --> 00:01:18,280
So if we keep the number of key words per bucket

25
00:01:18,280 --> 00:01:21,640
the same, the look up time stays essentially the same. So that's

26
00:01:21,640 --> 00:01:24,610
the great property that hash tables have. If we double the

27
00:01:24,610 --> 00:01:28,360
number of buckets, as we double the number of keywords, the expected

28
00:01:28,360 --> 00:01:32,860
look up time doesn't change. For the other possibilities, well if

29
00:01:32,860 --> 00:01:35,040
we double the number of keywords and keep the same number of

30
00:01:35,040 --> 00:01:38,490
buckets, that's going to get slower because the number of keywords

31
00:01:38,490 --> 00:01:41,340
per bucket will approximately double. So it's going to take about twice

32
00:01:41,340 --> 00:01:43,900
as long for each look up. If we keep the same

33
00:01:43,900 --> 00:01:47,220
number of keywords, but double the number of buckets, well then it's

34
00:01:47,220 --> 00:01:50,430
going to actually get faster. We'll have the same number of keywords, double

35
00:01:50,430 --> 00:01:53,270
the number of buckets. So, this value will be approximately half of

36
00:01:53,270 --> 00:01:56,416
what it was before. The expected lookup time will be about

37
00:01:56,416 --> 00:01:59,750
half of what is before we doubled the number of buckets. If

38
00:01:59,750 --> 00:02:02,760
we halve the number of keywords keeping the same number of buckets,

39
00:02:02,760 --> 00:02:06,640
well that has essentially the same affect. The average number of keywords

40
00:02:06,640 --> 00:02:08,020
per bucket will be half of what it

41
00:02:08,020 --> 00:02:10,800
was before, so the expected lookup time will be

42
00:02:10,800 --> 00:02:12,910
about half of what it was. And finally

43
00:02:12,910 --> 00:02:15,100
if we have both, well that's going to keep

44
00:02:15,100 --> 00:02:17,200
the ratio the same so the expected look

45
00:02:17,200 --> 00:02:19,150
up time will be about the same. So that's

46
00:02:19,150 --> 00:02:21,910
why these two are the correct answers, that those

47
00:02:21,910 --> 00:02:25,070
are expected to leave the lookup time essentially unchanged.
