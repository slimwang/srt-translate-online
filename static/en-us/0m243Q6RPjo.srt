1
00:00:00,000 --> 00:00:03,000
Somewhat orthogonal to unit testing, integration testing, and system testing

2
00:00:03,000 --> 00:00:06,000
is a testing technique called differential testing.

3
00:00:06,000 --> 00:00:09,000
In differential testing what we're doing is taking the same test input,

4
00:00:09,000 --> 00:00:12,000
delivering it to 2 different implementations of the software under test,

5
00:00:12,000 --> 00:00:14,000
and comparing them for equality.

6
00:00:14,000 --> 00:00:18,000
Differential testing is extremely powerful in the case where we have multiple versions.

7
00:00:18,000 --> 00:00:21,000
Stress testing is a kind of testing where a system is tested

8
00:00:21,000 --> 00:00:24,000
at or beyond its normal usage limits, and it's probably best described

9
00:00:24,000 --> 00:00:26,000
through a couple of examples.

10
00:00:26,000 --> 00:00:29,000
For example, with the square root function that we were talking about earlier

11
00:00:29,000 --> 00:00:32,000
we might test it with very large numbers or very tiny numbers.

12
00:00:32,000 --> 00:00:36,000
For an operating system we might test it by making a huge number of system calls

13
00:00:36,000 --> 00:00:39,000
or by making very large memory allocations or by creating

14
00:00:39,000 --> 00:00:41,000
extremely large files.

15
00:00:41,000 --> 00:00:44,000
For a web server we could stress test it by making many requests,

16
00:00:44,000 --> 00:00:47,000
or even better, by making many requests, all of which require

17
00:00:47,000 --> 00:00:50,000
the database to communicate with its back end.

18
00:00:50,000 --> 00:00:52,000
Stress testing is typically done to assess the robustness

19
00:00:52,000 --> 00:00:54,000
and reliability of the software under test.

20
00:00:54,000 --> 00:00:58,000
And finally, we have what might be my favorite kind of testing, random testing.

21
00:00:58,000 --> 00:01:01,000
In random testing we use the results of a pseudo-random number generator

22
00:01:01,000 --> 00:01:06,000
to randomly create test inputs, and we deliver those to the system under test.

23
00:01:06,000 --> 00:01:09,000
And sometimes we're just feeding raw, random bits to the software under test,

24
00:01:09,000 --> 00:01:12,000
but very often this can be much more subtle and more sophisticated

25
00:01:12,000 --> 00:01:14,000
than just throwing random bits at the software.

26
00:01:14,000 --> 00:01:18,000
And random testing is very often useful for finding corner cases

27
00:01:18,000 --> 00:01:22,000
in software systems, and the crashme program for Linux and other Unix kernels

28
00:01:22,000 --> 00:01:25,000
that we talked about earlier is a great example of a random tester,

29
00:01:25,000 --> 99:59:59,999
and we'll talk about more examples later on in this course.
