1
00:00:00,000 --> 00:00:04,000
Here's a sketch of the algorithm as we were just running it by hand.

2
00:00:04,000 --> 00:00:08,000
Largely, we're trying to find shortest distances from D to the other nodes in the graph.

3
00:00:08,000 --> 00:00:14,000
we initialize D's distance to V as 0, then we imagine that all the other distances

4
00:00:14,000 --> 00:00:19,000
to all the other nodes in the graph were as yet unknown, and each time we go through the loop,

5
00:00:19,000 --> 00:00:22,000
that there's still nodes left that haven't been completed yet.

6
00:00:22,000 --> 00:00:25,000
We find the node with the shortest known distance and then we locked it down.

7
00:00:25,000 --> 00:00:31,000
By marking it as known and then going through the list of its edges--all that edges out of W--

8
00:00:31,000 --> 00:00:35,000
for example, just some other node and we check if the new distance, the distance to W

9
00:00:35,000 --> 00:00:39,000
that we just locked down plus the weight of the edge from W to X.

10
00:00:39,000 --> 00:00:45,000
If that improves on the best known distance to X, then we update X's distance to be this new value.

11
00:00:45,000 --> 00:00:48,000
And once we've done that for all the neighbors of W, then we could finished W

12
00:00:48,000 --> 00:00:52,000
and we go back up to this loop and say not all nodes are complete.

13
00:00:52,000 --> 00:00:56,000
You get a new W, a new shortest distance to lock down. So that's the basic structure.

14
00:00:56,000 --> 00:00:58,000
Let's actually look at that in--I'm going to say Python.
