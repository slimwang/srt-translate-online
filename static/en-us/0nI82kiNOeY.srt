1
00:00:00,000 --> 00:00:03,000
We looked a couple common coverage metrics that come up in practice.

2
00:00:03,000 --> 00:00:06,000
So, we've looked at statement coverage, which is close relative to line coverage.

3
00:00:06,000 --> 00:00:09,000
We looked at branch coverage, also called decision coverage,

4
00:00:09,000 --> 00:00:14,000
and for most of you out there, these are the coverage metrics that are going to matter for everyday life.

5
00:00:14,000 --> 00:00:17,000
Now, as I said before, there are many other coverage metrics,

6
00:00:17,000 --> 00:00:19,000
and we're going to just look at a few of them.

7
00:00:19,000 --> 00:00:21,000
The reason these are interesting is not because we're going to go out and obsessively

8
00:00:21,000 --> 00:00:24,000
get 100% coverage on our code on all these metrics.

9
00:00:24,000 --> 00:00:27,000
But rather because they form part of the answer to the question

10
00:00:27,000 --> 00:00:31,000
how shall we come up with good test inputs in order to effectively find bugs in our software?

11
00:00:31,000 --> 00:00:33,000
Loop coverage is very easy.

12
00:00:33,000 --> 00:00:38,000
It simply specifies that we execute each loop 0 times, once, and more than once.

13
00:00:38,000 --> 00:00:41,000
The insight here is that loop boundary conditions are an extremely frequent source

14
00:00:41,000 --> 00:00:43,000
of bugs in real codes.

15
00:00:43,000 --> 00:00:46,000
For example, if we had this loop in our Python code,

16
00:00:46,000 --> 00:00:50,000
so for a line in open file--that is to say we want to read every line from the file

17
00:00:50,000 --> 00:00:54,000
and then process it--to get full loop coverage we would need to test this code

18
00:00:54,000 --> 00:00:59,000
using a file that contains no lines, using a file that contains just one line,

19
00:00:59,000 --> 00:01:01,000
and using a file that contains multiple lines.

20
00:01:01,000 --> 00:01:06,000
Now, let's look at a fairly heavy-weight coverage metric called modified condition decision coverage or MC/DC.

21
00:01:06,000 --> 00:01:10,000
If that seems like kind of a big mouthful, there's a reason for that,

22
00:01:10,000 --> 00:01:15,000
which is that MC/DC coverage is required for certain kinds of avionics software.

23
00:01:15,000 --> 00:01:19,000
That is, if you're going to write safety critical software, where if the software fails,

24
00:01:19,000 --> 00:01:22,000
airplanes can fall out of the sky, then one of the things you'll need to do to show

25
00:01:22,000 --> 00:01:26,000
that you're software is correct is get a high-degree of MD/DC coverage.

26
00:01:26,000 --> 00:01:31,000
It's designed to be pretty rigorous but still without blowing up into an exponential number of tests.

27
00:01:31,000 --> 00:01:35,000
MC/DC coverage basically starts off with a branch coverage,

28
00:01:35,000 --> 00:01:39,000
so I'm going to simplify here a little bit, but MC/DC coverage basically starts off with branch coverage.

29
00:01:39,000 --> 00:01:44,000
It additionally states that every condition involved in a decision takes on every possible outcome.

30
00:01:44,000 --> 00:01:48,000
Conditions are simply boolean-valued variables found in tests,

31
00:01:48,000 --> 00:01:52,000
and decisions are just the kind of tests that we see in an if statement or a while loop,

32
00:01:52,000 --> 00:01:54,000
or something like that.

33
00:01:54,000 --> 00:01:57,000
Finally, every condition used in a decision independently affects its outcome.

34
00:01:57,000 --> 00:01:59,000
So, that's kind of a mouthful.

35
00:01:59,000 --> 99:59:59,999
This is going to be hard to grasp unless we go through an example, so let's do that.
