1
00:00:00,290 --> 00:00:02,260
Does this code look familiar?

2
00:00:02,260 --> 00:00:06,560
For this quiz you'll be refactoring
it and making it actually work.

3
00:00:06,560 --> 00:00:11,350
To do so, you're going to need to create
a chain or a sequence of promises.

4
00:00:11,350 --> 00:00:16,490
I want you to loop through the array of
URLs that comes in the search results,

5
00:00:16,490 --> 00:00:17,280
create a promise for

6
00:00:17,280 --> 00:00:22,440
each one and then use that promise to
create a thumbnail once it resolves.

7
00:00:22,440 --> 00:00:26,280
There are probably a few different
ways to solve this challenge.

8
00:00:26,280 --> 00:00:29,130
You'll know you've done it correctly
when the thumbnails show up in the same

9
00:00:29,130 --> 00:00:33,740
order on the page as they did in the
original URL from the search results.

10
00:00:33,740 --> 00:00:35,750
Also, don't forget to handle errors.

11
00:00:35,750 --> 00:00:37,430
I'm going to let you decide
what you want to do with them.

12
00:00:38,660 --> 00:00:40,810
When you're done I have a question for
you.

13
00:00:41,870 --> 00:00:44,590
How are the requests executed?

14
00:00:44,590 --> 00:00:47,680
Are they executed in series or
in parallel?

15
00:00:47,680 --> 00:00:49,530
Even if you think you know the answer,

16
00:00:49,530 --> 00:00:53,720
make sure you check the network
panel because you may be surprised.

17
00:00:53,720 --> 00:00:55,770
I'm going to give you
some hints to help out.

18
00:00:55,770 --> 00:00:58,690
But if you want a challenge,
go ahead and skip to the quiz.

19
00:00:58,690 --> 00:01:01,179
Of course there's always help
in the instructor notes.

20
00:01:04,754 --> 00:01:06,260
Are you still here?

21
00:01:06,260 --> 00:01:07,680
Okay.

22
00:01:07,680 --> 00:01:10,460
I want you to think about
a loop that looks like this.

23
00:01:11,590 --> 00:01:14,110
For every iteration through the loop,

24
00:01:14,110 --> 00:01:18,520
x increases by 1 before the iteration,
x is at 0.

25
00:01:18,520 --> 00:01:20,920
Then you add 1 to x and get 1.

26
00:01:20,920 --> 00:01:23,070
You add another 1 to x and get 2.

27
00:01:23,070 --> 00:01:25,650
And then so on, add another one.

28
00:01:25,650 --> 00:01:26,690
You get 3.

29
00:01:26,690 --> 00:01:30,410
And at some point you've chained so
many ones together that you've got 10.

30
00:01:30,410 --> 00:01:35,850
I want you to treat the sequence
similarly, but don't use addition here.

31
00:01:37,010 --> 00:01:39,240
For every iteration through the loop,

32
00:01:39,240 --> 00:01:42,690
add another then to
the end of the sequence.

33
00:01:42,690 --> 00:01:45,650
Remember that for each planet
you're going to need two actions.

34
00:01:45,650 --> 00:01:49,040
You'll need to get the JSON and
create a planet thumbnail.

35
00:01:49,040 --> 00:01:51,930
In this way the sequence
will grow by one request and

36
00:01:51,930 --> 00:01:54,900
one thumbnail for every iteration.

37
00:01:54,900 --> 00:01:56,070
Okay good luck.
