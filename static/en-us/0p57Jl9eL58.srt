1
00:00:00,310 --> 00:00:01,859
Here are the answers I got.

2
00:00:01,859 --> 00:00:08,380
The magnitude of the first
vector is 7.440.

3
00:00:08,380 --> 00:00:15,747
The magnitude of the second
vector is 10.884.

4
00:00:15,747 --> 00:00:20,464
Now for the normalizations, for

5
00:00:20,464 --> 00:00:27,885
the first vector I got 0.934, -0.357.

6
00:00:27,885 --> 00:00:32,814
And for the last vector,

7
00:00:32,814 --> 00:00:39,388
I got 0.340, 0.530,

8
00:00:39,388 --> 00:00:43,394
and -0.777.

9
00:00:43,394 --> 00:00:47,150
Now let's take a look at the code
I wrote to get these answers.

10
00:00:47,150 --> 00:00:49,440
I worked on the magnitude
function first,

11
00:00:49,440 --> 00:00:52,700
since I can leverage it in
my normalized function.

12
00:00:52,700 --> 00:00:55,940
Remember that the magnitude of
a vector can be found by squaring its

13
00:00:55,940 --> 00:00:58,270
coordinates, adding them together.

14
00:00:58,270 --> 00:01:00,710
And then taking the square
root of the sum.

15
00:01:00,710 --> 00:01:02,350
Let's implement that in this function.

16
00:01:03,600 --> 00:01:07,050
First, I imported square
root from the module math

17
00:01:07,050 --> 00:01:08,430
since I'll need it in my function.

18
00:01:09,450 --> 00:01:14,020
Next, I used a list comprehension
to make a list of the squares

19
00:01:14,020 --> 00:01:18,610
of the coordinates, x** for
x in self.coordinates.

20
00:01:18,610 --> 00:01:21,400
And I called this list
coordinate_squared.

21
00:01:21,400 --> 00:01:25,140
I can find the sum of this list
using the built in sum function, and

22
00:01:25,140 --> 00:01:29,428
then I can return the square root of
the sum using the square root function.

23
00:01:29,428 --> 00:01:34,643
So it returns
sqrt(sum(coordinates_squared)).

24
00:01:34,643 --> 00:01:38,970
Now using the magnitude function,
I can code the normalized function.

25
00:01:38,970 --> 00:01:42,688
Recall that we can normalize
the vector by multiplying it by1

26
00:01:42,688 --> 00:01:43,981
over its magnitude.

27
00:01:43,981 --> 00:01:47,967
Therefore, if I let magnitude
= self.magnitude(),

28
00:01:47,967 --> 00:01:52,070
I can return
self.times_scalar(1./magnitude).

29
00:01:52,070 --> 00:01:57,930
To deal with the case that
self might be the 0 vector,

30
00:01:57,930 --> 00:02:00,520
I wrap this code in a try block.

31
00:02:00,520 --> 00:02:04,740
If self is the 0 vector,
then magnitude will become 0.

32
00:02:04,740 --> 00:02:09,247
And then dividing by magnitude
will raise a 0 division error.

33
00:02:09,247 --> 00:02:14,039
I can then catch this error with
the statement, except ZeroDivisionError.

34
00:02:14,039 --> 00:02:17,121
And then raise a new exception
with the message Cannot normalize

35
00:02:17,121 --> 00:02:18,100
the zero vector..

36
00:02:19,100 --> 00:02:22,180
Note that I'm already starting to
leverage some of our preexisting

37
00:02:22,180 --> 00:02:24,840
functions to define
the normalized function.

38
00:02:24,840 --> 00:02:28,630
This trend will continue as we
progress throughout the lesson.

39
00:02:28,630 --> 00:02:33,570
Now, using the two functions I've coded,
I can compute the magnitudes and

40
00:02:33,570 --> 00:02:37,950
normalizations of the vectors, giving
me the answers that I showed earlier.
