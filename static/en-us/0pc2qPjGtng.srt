1
00:00:00,000 --> 00:00:03,000
Here's the essence of the TLS handshake.

2
00:00:03,000 --> 00:00:06,000
To recap, the client initiates with the server.

3
00:00:06,000 --> 00:00:09,000
We're leaving out all the details about selecting the ciphers

4
00:00:09,000 --> 00:00:12,000
and the extra randomness, which is important for security.

5
00:00:12,000 --> 00:00:14,000
The server sends back a certificate.

6
00:00:14,000 --> 00:00:17,000
The client validates the certificate using a chain of certificates going back

7
00:00:17,000 --> 00:00:20,000
to some root certificate that the client trusts,

8
00:00:20,000 --> 00:00:24,000
selects a random r and then encrypts that using the public key of the server.

9
00:00:24,000 --> 00:00:27,000
The server can decrypt it, because it knows the corresponding private key.

10
00:00:27,000 --> 00:00:29,000
Then they finish the handshake.

11
00:00:29,000 --> 00:00:33,000
Now the client and server can communicate using those shared symmetric keys.

12
00:00:33,000 --> 00:00:36,000
The protocol to do that is the TLS record protocol.

13
00:00:36,000 --> 00:00:40,000
I may have made the mis-impression earlier that once you've established

14
00:00:40,000 --> 00:00:43,000
symmetric keys communication is easy and there's nothing left to work out.

15
00:00:43,000 --> 00:00:47,000
That's not the case. We're going to look at the TLS protocol next,

16
00:00:47,000 --> 00:00:50,000
and indeed it does have some vulnerabilities.
