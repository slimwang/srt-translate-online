1
00:00:00,000 --> 00:00:04,250
What I already mentioned to you is that this is of course just a worse case view.

2
00:00:04,250 --> 00:00:06,330
So this is what you just calculated here

3
00:00:06,330 --> 00:00:08,980
if we were to consider a billion different possible solutions.

4
00:00:08,980 --> 00:00:10,570
And the numbers would of course get much higher

5
00:00:10,570 --> 00:00:15,090
if we said we are ready to consider 10 billion or 100 billion possible solutions,

6
00:00:15,090 --> 00:00:17,330
but still they would not be in the thousands.

7
00:00:17,330 --> 00:00:19,100
And that's actually the surprising thing

8
00:00:19,100 --> 00:00:23,010
because if we look how well those algorithms perform in practice,

9
00:00:23,010 --> 00:00:24,910
they perform dramatically better.

10
00:00:24,910 --> 00:00:31,620
So for independent set and clique you can usually solve instances far over 1000 vertices,

11
00:00:31,620 --> 00:00:34,280
and for 3 SAT there are even annual competitions

12
00:00:34,280 --> 00:00:37,730
in which participants solve instances with, I would say,

13
00:00:37,730 --> 00:00:40,540
almost in the tens of thousands of variables.

14
00:00:40,540 --> 00:00:43,320
This varies by competition, so there are some competitions

15
00:00:43,320 --> 00:00:45,790
where it's in the hundreds, in the thousands,

16
00:00:45,790 --> 00:00:48,130
but you can solve instances up to 10000.

17
00:00:48,130 --> 00:00:52,790
And the reason for that is that it seems like most of the instances

18
00:00:52,790 --> 00:00:57,050
or inputs to NP complete problems that we encounter in practice

19
00:00:57,050 --> 00:00:59,600
are, in a way, well behaved.

20
00:00:59,600 --> 00:01:01,070
They rarely tend to be worst cases instances

21
00:01:01,070 --> 00:01:03,710
that force our algorithms to run in their maximum time.

22
00:01:03,710 --> 00:01:07,310
And there is also, besides search trees, other very interesting techniques

23
00:01:07,310 --> 00:01:10,780
that you can use to further improve your running time of your algorithms.

24
00:01:10,780 --> 00:01:13,010
I would now like to introduce to you preprocessing

25
00:01:13,010 --> 99:59:59,999
as another technique to deal with NP completeness.
