1
00:00:00,120 --> 00:00:02,700
First let's dive into the HTML.

2
00:00:02,700 --> 00:00:06,080
I took the entire div that surrounds our cat, and

3
00:00:06,080 --> 00:00:10,370
I said data bind equals with current cat.

4
00:00:10,370 --> 00:00:13,820
That means that all of the data binds inside will be

5
00:00:13,820 --> 00:00:16,170
relative to our current cat.

6
00:00:16,170 --> 00:00:20,650
So when we say h2 data bind equals text name,

7
00:00:20,650 --> 00:00:23,710
we're really saying current cat.name.

8
00:00:23,710 --> 00:00:28,340
Same with title and click count and image source and nick names.

9
00:00:28,340 --> 00:00:30,770
That's a pretty simple change.

10
00:00:30,770 --> 00:00:35,790
However, for the click binding here we need to say increment counter and

11
00:00:35,790 --> 00:00:37,780
run it on the view model.

12
00:00:37,780 --> 00:00:42,500
Not on current cat, current cat does not have an increment counter function.

13
00:00:42,500 --> 00:00:45,320
If you look through the documentation you'll find that with,

14
00:00:45,320 --> 00:00:50,090
with, you can use $parent, to get up out of the scope.

15
00:00:51,240 --> 00:00:52,760
Or in this case, instead of the word,

16
00:00:52,760 --> 00:00:55,530
scope, knockout calls it a binding context.

17
00:00:57,180 --> 00:01:01,570
Now the incrementCounter method is the real main thing that need changing in

18
00:01:01,570 --> 00:01:02,620
the app.js.

19
00:01:02,620 --> 00:01:06,507
Now it used to say this.currentcat.clickcount, and

20
00:01:06,507 --> 00:01:09,830
then this.currentcat.clickcount plus 1.

21
00:01:09,830 --> 00:01:11,720
Now this is the tricky part.

22
00:01:11,720 --> 00:01:14,000
Here's what it looked like previously.

23
00:01:14,000 --> 00:01:16,140
When we would click on the cat,

24
00:01:16,140 --> 00:01:20,040
we were clicking on the view model binding context.

25
00:01:20,040 --> 00:01:24,550
We hadn't created a new binding context with with binding yet.

26
00:01:24,550 --> 00:01:25,750
So when we clicked on the image,

27
00:01:25,750 --> 00:01:30,410
we were effectively within the binding context of the view model here.

28
00:01:30,410 --> 00:01:33,980
But when we added the with here, now when you click on

29
00:01:33,980 --> 00:01:38,520
the image you are within the binding context of currentCat.

30
00:01:38,520 --> 00:01:41,925
So here in app.js we don't need to say

31
00:01:41,925 --> 00:01:47,260
this.currentCat anymore because we're already in the currentCat binding context.

32
00:01:47,260 --> 00:01:49,620
Instead we can say this and

33
00:01:49,620 --> 00:01:54,140
this represents the binding context of the current cat.

34
00:01:54,140 --> 00:01:58,220
So this current cat binding context.click count.

35
00:01:58,220 --> 00:02:00,530
Now that's one way we could have approached this.

36
00:02:00,530 --> 00:02:02,080
Let me show a different way.

37
00:02:02,080 --> 00:02:04,292
So once again this is what we had before.

38
00:02:04,292 --> 00:02:09,190
This .currentCat.clickCount now this we've already established just

39
00:02:09,190 --> 00:02:13,490
now represents the currentCat's binding context because of

40
00:02:13,490 --> 00:02:15,970
the with in our index.html.

41
00:02:15,970 --> 00:02:20,110
So rather than say this, the currentCat context,

42
00:02:20,110 --> 00:02:25,110
we could instead say var self equals this while we're here in the view model.

43
00:02:25,110 --> 00:02:28,630
Then we can use self here and here.

44
00:02:28,630 --> 00:02:32,490
Now we're not using this which represents the binding context when you

45
00:02:32,490 --> 00:02:34,020
click on increment counter,

46
00:02:34,020 --> 00:02:38,340
we're talking about self which represents the view model here.

47
00:02:38,340 --> 00:02:40,210
Sure enough that also works.

48
00:02:40,210 --> 00:02:43,240
Now neither of these two methods are better or

49
00:02:43,240 --> 00:02:47,580
worse than the other, but it is important to know about this trick here.

50
00:02:47,580 --> 00:02:50,510
Whenever you want to access the outer this.

51
00:02:50,510 --> 00:02:54,080
In this case the view model, you can store it somewhere.

52
00:02:54,080 --> 00:02:56,250
In this case I'm storing it to self.

53
00:02:56,250 --> 00:02:59,150
And now inside of functions that are nested,

54
00:02:59,150 --> 00:03:04,320
I can say self.foo, self.var, self.currentCat.

55
00:03:04,320 --> 00:03:07,660
Now my special this keyword isn't messing me up.

56
00:03:07,660 --> 00:03:11,350
Self is always going to be defined as the view model,

57
00:03:11,350 --> 00:03:13,200
because I defined it right here.

58
00:03:13,200 --> 00:03:14,730
Keep this trick in mind.

59
00:03:14,730 --> 00:03:18,410
Some other developers write var that equals this.

60
00:03:18,410 --> 00:03:21,130
And then they use that throughout their entire function.

61
00:03:21,130 --> 00:03:25,330
But whether you call it self or that, it's a very good method for

62
00:03:25,330 --> 00:03:30,590
keeping a pointer, keeping a way of accessing our outer this, and

63
00:03:30,590 --> 00:03:33,470
not getting confused by our inner this.

64
00:03:33,470 --> 00:03:35,720
Now if you want to take a minute right now and go and

65
00:03:35,720 --> 00:03:37,870
refactor your code feel free.

66
00:03:37,870 --> 00:03:43,020
Remember that neither of these two approaches here are right or wrong.

67
00:03:43,020 --> 00:03:45,980
Both are just two different ways of solving the same problem.
