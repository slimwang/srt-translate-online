1
00:00:00,000 --> 00:00:05,000
So next, we're going to extend this idea of finding a path from V₁ to V₂

2
00:00:05,000 --> 00:00:11,000
to the idea of finding a shortest path from V₁ to all other nodes.

3
00:00:11,000 --> 00:00:18,000
And one of the reasons we want to do that is to identify central node in a social network.

4
00:00:18,000 --> 00:00:25,000
Nodes that are likely to have a lot of influence, or well-placed, or very well-connected,

5
00:00:25,000 --> 00:00:29,000
and so we're going to look now at the question of given a node V₁, how central is it?

6
00:00:29,000 --> 00:00:34,000
Now, it turns out there's lots of different ways that you can define what central means.

7
00:00:34,000 --> 00:00:37,000
We're going to write now focus on a particular one

8
00:00:37,000 --> 00:00:41,000
which is the average shortest path length to all the other nodes.

9
00:00:41,000 --> 00:00:45,000
So to find this quantity, we're going to need to calculate

10
00:00:45,000 --> 00:00:48,000
the shortest path length from V₁ to all the other nodes.

11
00:00:48,000 --> 00:00:54,000
Now, based on the analysis we've done so far, finding the shortest path length

12
00:00:54,000 --> 00:01:03,000
from some node V₁ to some other specific node V₂, takes time Θ(n+m), nodes plus edges.

13
00:01:03,000 --> 00:01:11,000
So, following sort of a naive kind of algorithm design, well, this should work and it's not so terrible.

14
00:01:11,000 --> 00:01:15,000
It's to say, well, if we want to know the shortest distance from V₁

15
00:01:15,000 --> 00:01:19,000
to each of the other nodes in the graph, we can just repeat this process

16
00:01:19,000 --> 00:01:22,000
once for each possible target node.

17
00:01:22,000 --> 00:01:31,000
So, we find the shortest path from V₁ to V₂ and from V₁ to V₃ and V₁ to V₄ and V₁ to V₅

18
00:01:31,000 --> 00:01:36,000
and we can get all these distances and then say average them to get this measure of centrality.

19
00:01:36,000 --> 00:01:42,000
The running time for that approach is going to be big Θ of n, the number of nodes

20
00:01:42,000 --> 00:01:46,000
times the time that it takes to do a shortest path search.

21
00:01:46,000 --> 00:01:52,000
So, it's really n times n plus m which is (n²+nm).

22
00:01:52,000 --> 00:02:01,000
Now, the superhero data that we're looking at the moment has only order of 6000 superhero nodes

23
00:02:01,000 --> 00:02:07,000
and 6000² is, you know, a substantial number and we'll be nice to avoid this if we could.

24
00:02:07,000 --> 00:02:13,000
So, here are some choices for you, one possibility is you can't, just deal with it.

25
00:02:13,000 --> 00:02:17,000
and this is the fastest way to do it which is essentially to repeat

26
00:02:17,000 --> 00:02:22,000
individual pair y searches until you've exhausted all the nodes.

27
00:02:22,000 --> 00:02:26,000
Another possibility is well you can make it faster by just using a smaller graph.

28
00:02:26,000 --> 00:02:32,000
Another choice would be while you're searching for V₁, when not sure what to search for,

29
00:02:32,000 --> 00:02:35,000
just search for something that's not anywhere in the graph,

30
00:02:35,000 --> 00:02:41,000
and last choice is, actually, you can speed things up by doing the search backwards.

31
00:02:41,000 --> 00:02:44,000
Now, actually all these choices sound kind of weird, don't they?

32
00:02:44,000 --> 00:02:50,000
But the right one is this third one here and the reason that this actually works,

33
00:02:50,000 --> 00:02:52,000
is if you search using the algorithm that we've been looking at,

34
00:02:52,000 --> 00:02:57,000
if you search from V₁ for something that's not in the graph at all,

35
00:02:57,000 --> 00:03:01,000
what is going to do it's just going to keep searching and searching and searching and searching

36
00:03:01,000 --> 00:03:05,000
and building shortest paths to all the nodes it encounters along the way

37
00:03:05,000 --> 00:03:09,000
until it discovers that the node that it's looking for just isn't there.

38
00:03:09,000 --> 00:03:14,000
At the end of that process, every single node in the graph will have a shortest path

39
00:03:14,000 --> 00:03:20,000
from the--will be notated, annotated with the shortest path from V₁ to that node.

40
00:03:20,000 --> 00:03:24,000
So, the running time here is just the time it takes to do a single search,

41
00:03:24,000 --> 00:03:31,000
Θ(n+m) and then you get the answer for all the nodes in the graph.
