1
00:00:00,350 --> 00:00:02,820
Now if you've been actively thinking about how threads work so far

2
00:00:02,820 --> 00:00:05,370
in this lesson, you may be wondering how does the memory for a

3
00:00:05,370 --> 00:00:08,500
thread get cleaned up after it is finished, or where does its return

4
00:00:08,500 --> 00:00:11,230
value go, or how can I make sure the thread has finished its

5
00:00:11,230 --> 00:00:14,170
work before I let the main thread terminate? We'll answer all these

6
00:00:14,170 --> 00:00:15,670
questions by looking at the distinction

7
00:00:15,670 --> 00:00:18,610
between joinable and detached threads. Let's start

8
00:00:18,610 --> 00:00:21,940
by talking about what makes a thread terminate. We'll draw the main thread

9
00:00:21,940 --> 00:00:25,650
here on the left, our thread here on the right. And maybe there

10
00:00:25,650 --> 00:00:27,530
are some other threads in between. There are really

11
00:00:27,530 --> 00:00:31,700
two cases. First, the entire process will terminate if

12
00:00:31,700 --> 00:00:37,220
any thread makes a call to exit or if main reaches the end of its code, it's or

13
00:00:37,220 --> 00:00:40,250
executes a return statement. Again this will kill all

14
00:00:40,250 --> 00:00:43,610
threads associated with the process. The second way our

15
00:00:43,610 --> 00:00:46,405
thread might terminate, is if he himself calls either

16
00:00:46,405 --> 00:00:50,340
pthread-exit or executes a return statement. The distinction between

17
00:00:50,340 --> 00:00:53,250
joinable and and detached threads is important for the second case

18
00:00:53,250 --> 00:00:56,580
here. A thread can either be created in a detached state, or

19
00:00:56,580 --> 00:00:59,870
detached later with the procedure call. When the detached thread reaches

20
00:00:59,870 --> 00:01:03,360
the end of its execution, its memory is cleaned up right away,

21
00:01:03,360 --> 00:01:06,460
and any return value just disappears. At least, no other thread

22
00:01:06,460 --> 00:01:09,200
has a way of getting at it. Moreover, we have to be

23
00:01:09,200 --> 00:01:12,130
careful that main doesn't reach the end of its execution, and

24
00:01:12,130 --> 00:01:15,460
execute a return statement, before the thread is done with its work.

25
00:01:15,460 --> 00:01:17,830
As seen in point 1, if main returns, then

26
00:01:17,830 --> 00:01:19,920
the whole process terminates. So if we want to keep

27
00:01:19,920 --> 00:01:22,780
this detached thread going, we have to terminate main

28
00:01:22,780 --> 00:01:25,910
with a special call to pthread exit. Joinable threads, y

29
00:01:25,910 --> 00:01:29,080
contrast, don't get destroyed right away when they finish.

30
00:01:29,080 --> 00:01:33,990
Instead, they stick around until another thread joins them. This

31
00:01:33,990 --> 00:01:37,130
other thread makes a call to thread join, specifying

32
00:01:37,130 --> 00:01:40,750
the thread. And also an address where the return value

33
00:01:40,750 --> 00:01:44,560
of the joinable thread will get stored. This call blocks,

34
00:01:44,560 --> 00:01:47,550
until the joinable thread is finished. Though it's okay too

35
00:01:47,550 --> 00:01:49,560
if it's finished already. So it's okay for the joined

36
00:01:49,560 --> 00:01:52,320
call to be made first. Before the join thread is

37
00:01:52,320 --> 00:01:54,990
finished. Having main join with other threads is a common

38
00:01:54,990 --> 00:01:57,190
way to make sure that main doesn't finish before the

39
00:01:57,190 --> 00:02:01,190
other threads, and kill them all via exit method one.

40
00:02:01,190 --> 00:02:03,900
By default, threads are joinable in the p threads library.
