1
00:00:00,120 --> 00:00:02,680
Aggregation in MongoDB uses a pipeline. At the

2
00:00:02,680 --> 00:00:06,840
far left is your collection, so for example tweets.

3
00:00:06,840 --> 00:00:09,590
The collection is fed into the first stage

4
00:00:09,590 --> 00:00:12,480
and the first stage processes the documents in some

5
00:00:12,480 --> 00:00:14,870
way, and passes the results onto the next

6
00:00:14,870 --> 00:00:19,400
stage. Each stage does this type of work, processes

7
00:00:19,400 --> 00:00:22,040
the documents it receives as inputs, and produces

8
00:00:22,040 --> 00:00:25,420
output documents that are passed to the next stage.

9
00:00:25,420 --> 00:00:26,450
Now in the example that we looked at in the

10
00:00:26,450 --> 00:00:29,810
previous lesson, the stages included were a group stage and

11
00:00:29,810 --> 00:00:32,800
a sort stage. It's the group stage that actually does

12
00:00:32,800 --> 00:00:35,580
the aggregation. Let's take a look at a pipeline specific to

13
00:00:35,580 --> 00:00:38,500
that example. Okay, we'll zoom into this, but this is

14
00:00:38,500 --> 00:00:42,300
a representation of the aggregation pipeline that we saw in

15
00:00:42,300 --> 00:00:46,450
our previous example. Again, that example looks like this. So,

16
00:00:46,450 --> 00:00:50,530
here is our aggregate query. Okay. So, here in this column,

17
00:00:50,530 --> 00:00:53,130
we're representing the collection being fed into that first group

18
00:00:53,130 --> 00:00:56,760
stage. And then, what the group stage then passes onto

19
00:00:56,760 --> 00:00:59,570
the sort stage. And then, this is the output of

20
00:00:59,570 --> 00:01:02,010
the group stage and then finally, the output of the sort

21
00:01:02,010 --> 00:01:03,820
stage. Let's take a look at each of these in

22
00:01:03,820 --> 00:01:07,950
just a little bit more detail. Okay, so here's our collection.

23
00:01:07,950 --> 00:01:11,610
And you can see that I've represented several documents within

24
00:01:11,610 --> 00:01:15,650
the collection, and in fact, multiple documents for some of the

25
00:01:15,650 --> 00:01:19,330
Twitter users, okay. This collection will be fed

26
00:01:19,330 --> 00:01:22,080
into the group stage. So what does group do?

27
00:01:22,080 --> 00:01:25,390
Well, group is going to find the screen

28
00:01:25,390 --> 00:01:28,450
name field for the user sub document in each

29
00:01:28,450 --> 00:01:31,610
one of our tweets. And it's going to

30
00:01:31,610 --> 00:01:34,950
aggregate together, it's going to accumulate all of those

31
00:01:34,950 --> 00:01:38,200
tweets and then count them. So, here we

32
00:01:38,200 --> 00:01:40,770
can see that for this Twitter user, we get

33
00:01:40,770 --> 00:01:43,520
a count of eight tweets. Because that's how many

34
00:01:43,520 --> 00:01:47,210
were found in the entire collection of tweets. So,

35
00:01:47,210 --> 00:01:50,230
the group stage produces documents that look like, this

36
00:01:50,230 --> 00:01:52,360
from documents that have the shape of those in

37
00:01:52,360 --> 00:01:55,420
the collection itself, in the tweets collection itself. So

38
00:01:55,420 --> 00:01:58,480
the sort stage then, takes this type of document

39
00:01:58,480 --> 00:02:02,810
as input and produces this as output. Remember, sort

40
00:02:02,810 --> 00:02:05,830
is sorting into reverse order. So, it's producing documents

41
00:02:05,830 --> 00:02:09,320
that look exactly the same as these, simply sorted,

42
00:02:09,320 --> 00:02:11,310
so that the ones that have the highest count

43
00:02:11,310 --> 00:02:13,230
are at the top. So one thing that it's

44
00:02:13,230 --> 00:02:15,320
very important to bear in mind, when you're thinking about

45
00:02:15,320 --> 00:02:18,840
the aggregation framework in MongoDB, is that. Depending on

46
00:02:18,840 --> 00:02:21,760
which operator is used in a given stage. That

47
00:02:21,760 --> 00:02:26,590
stage may be reshaping the data, sometimes quite significantly.

48
00:02:26,590 --> 00:02:31,030
The collection of tweets contains dozens of fields. What we've

49
00:02:31,030 --> 00:02:33,840
done here, what our group stage does, as it

50
00:02:33,840 --> 00:02:37,150
creates documents that look very different from these to

51
00:02:37,150 --> 00:02:39,750
do its job. So the whole idea with the

52
00:02:39,750 --> 00:02:44,120
aggregation pipeline, is that you use aggregation operators, to construct

53
00:02:44,120 --> 00:02:47,690
stages that will in a series of steps, process

54
00:02:47,690 --> 00:02:49,890
your data in such a way that it produces

55
00:02:49,890 --> 00:02:52,340
the results you need. Sometimes a single stage is

56
00:02:52,340 --> 00:02:56,350
enough, other times you need several stages. And the individual

57
00:02:56,350 --> 00:02:58,440
operators that are used in a given stage are

58
00:02:58,440 --> 00:03:02,420
entirely dependent on your application. Exactly what type of processing

59
00:03:02,420 --> 00:03:04,650
you want to do. You're not whetted to using group

60
00:03:04,650 --> 00:03:07,470
in the first stage or sort in the last stage.
