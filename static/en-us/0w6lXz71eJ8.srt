1
00:00:00,170 --> 00:00:03,600
Now that we know what the reorder buffer is supposed to look like let's see

2
00:00:03,600 --> 00:00:08,320
how it's used. For that we need a reorder buffer with its commit and

3
00:00:08,320 --> 00:00:13,460
issue points and we need the rest of the processor that we have already seen.

4
00:00:13,460 --> 00:00:18,730
The instruction queue, the reservation stations, registers and the RAT.

5
00:00:18,730 --> 00:00:22,570
Let's say that we have this add instruction here in the instruction queue.

6
00:00:22,570 --> 00:00:26,780
So now we want to see what happens once we start issuing this all

7
00:00:26,780 --> 00:00:31,120
the way to once we eventually commit this instruction. In a process that now has

8
00:00:31,120 --> 00:00:36,570
a reorder buffer. So let's see what happens when instruction issue. As before,

9
00:00:36,570 --> 00:00:41,950
when we didn't have the reorder buffer, we get a free reservation station. And

10
00:00:41,950 --> 00:00:47,950
we put our instruction in it. Now that we do have a reorder buffer we will also

11
00:00:47,950 --> 00:00:52,770
get one of those, unlike reservation station, where we just need a free one,

12
00:00:52,770 --> 00:00:57,510
it doesn't matter which one it is. Here we need to get the entry that is

13
00:00:57,510 --> 00:01:02,730
the next one at the issue point. So, R instruction will go

14
00:01:03,790 --> 00:01:08,080
here in the reorder buffer. That of course also means that our

15
00:01:08,080 --> 00:01:13,120
issue point will now move and points to the next entry in the reorder buffer. So

16
00:01:13,120 --> 00:01:17,730
now we have seven instructions that have been issued and have not yet committed.

17
00:01:17,730 --> 00:01:21,495
Another thing that we had to do, when we were issuing instructions into

18
00:01:21,495 --> 00:01:27,230
Tomasulo's algorithm, is that the RAT entry for R1. The destination

19
00:01:27,230 --> 00:01:31,830
registry of the instruction needed to be pointed to the reservation station for

20
00:01:31,830 --> 00:01:36,980
the instruction. We will still need to do this pointing, but instead of

21
00:01:36,980 --> 00:01:41,770
the reservation station, now we point the RAT entry to the ROB entry for

22
00:01:41,770 --> 00:01:46,910
the instruction. That means that this RAT entry will be now instead of pointing

23
00:01:46,910 --> 00:01:53,440
to the reservation station be pointing to this entry here.

24
00:01:53,440 --> 00:01:56,790
So overall at the end of the cycle when we issue this instruction,

25
00:01:56,790 --> 00:02:02,100
we will occupy reservation station with the values that we found for

26
00:02:02,100 --> 00:02:06,700
these registers. We will make the RAT point to the ROB6 entry. And

27
00:02:06,700 --> 00:02:12,130
in this entry, we will say that R1 will need to be written for this instruction.

28
00:02:12,130 --> 00:02:15,950
And we don't still have the value, so the done bit is 0 here for

29
00:02:15,950 --> 00:02:22,630
this instruction. Now this add here might wait for operands to become ready.

30
00:02:22,630 --> 00:02:25,980
And that happens exactly as before with Tomasulo's algorithm.

31
00:02:25,980 --> 00:02:30,540
We just capture results that we need, and we are ready to dispatch once we

32
00:02:30,540 --> 00:02:35,210
have all the operands. Eventually, the add has all the things that it needs to

33
00:02:35,210 --> 00:02:40,640
dispatch. And the dispatching works exactly the same as before. So, we check

34
00:02:40,640 --> 00:02:45,530
whether the operands are ready. And when they are, we send the instruction for

35
00:02:45,530 --> 00:02:49,830
execution. But now we can also free the reservation station as soon as we

36
00:02:49,830 --> 00:02:54,320
dispatch. Previously with Tomasulo's algorithm, we needed to wait for

37
00:02:54,320 --> 00:02:59,240
the reservation station release all the way until this instruction broadcast its

38
00:02:59,240 --> 00:03:05,770
result. That was needed because the reservation station serves as the name for

39
00:03:05,770 --> 00:03:10,160
the result. Now that the name for the result is the ROB entry,

40
00:03:10,160 --> 00:03:13,110
we no longer need the reservation stations to play the troll.

41
00:03:13,110 --> 00:03:18,140
So the reservation station now does only its primary job, which is wait for

42
00:03:18,140 --> 00:03:23,060
operands and capture them. And then, figure out which instructions to dispatch.

43
00:03:23,060 --> 00:03:26,790
After that the reservation station for the instruction is done so

44
00:03:26,790 --> 00:03:32,980
we can free it. So now we add executes and carries with it the tag of ROB6

45
00:03:32,980 --> 00:03:37,900
which is the name for it's result. Eventually it produces a result.
