1
00:00:00,000 --> 00:00:01,910
You might not be too impressed here.

2
00:00:01,910 --> 00:00:07,530
So 2 to the power of N, 1.733 to the power of N, hmm, doesn't sound too good.

3
00:00:07,530 --> 00:00:09,610
But there's 2 things to keep in mind here.

4
00:00:09,610 --> 00:00:12,010
First of all, this is a worst case analysis,

5
00:00:12,010 --> 00:00:14,760
so in practice we might be doing actually better.

6
00:00:14,760 --> 00:00:16,800
And the second thing is even in a worst case analysis,

7
00:00:16,800 --> 00:00:19,370
because we are dealing with exponential time,

8
00:00:19,370 --> 00:00:21,890
this improvement here is actually huge.

9
00:00:21,890 --> 00:00:25,290
So let's say that we're looking at an input of size 50.

10
00:00:25,290 --> 00:00:29,580
Then 2 to the power of N assignments would be 10 to the power of 15,

11
00:00:29,580 --> 00:00:33,450
about 1.13 times 10 to the power of 15.

12
00:00:33,450 --> 00:00:35,930
So this is almost infeasible.

13
00:00:35,930 --> 00:00:39,890
Maybe with a very, very, very, very, very powerful computer,

14
00:00:39,890 --> 00:00:41,430
but you probably wouldn't want to do this

15
00:00:41,430 --> 00:00:45,330
and probably also wouldn't want to do this for more than a single graph.

16
00:00:45,330 --> 00:00:50,700
If, however, you have the smarter search tree, then you have 1.733 to the power of N,

17
00:00:50,700 --> 00:00:57,440
which is 1.733 to the power of 50, and that is about 8.71 times 10 to 11.

18
00:00:57,440 --> 00:01:01,750
And the difference here is a speed-up of over 1000.

19
00:01:01,750 --> 00:01:04,790
That speed-up will become larger as N grows larger.

20
00:01:04,790 --> 00:01:08,780
And the other thing is again that this down here is only a worst case analysis.

21
00:01:08,780 --> 00:01:12,400
In many practical cases, the search tree will be much smaller

22
00:01:12,400 --> 00:01:18,440
because first of all, as we saw, it's often the case that you assign more than just 2 vertices,

23
00:01:18,440 --> 00:01:22,110
and in that case the tree doesn't become as high.

24
00:01:22,110 --> 00:01:24,810
And also you can apply various other optimizations,

25
00:01:24,810 --> 00:01:28,600
some of which we're soon going to talk about, to make the search tree even smaller,

26
00:01:28,600 --> 00:01:31,350
both in practical cases and in the worst case.

27
00:01:31,350 --> 00:01:33,530
Now, should Alice be happy about this?

28
00:01:33,530 --> 00:01:37,020
Probably not yet because already for N equal to 50,

29
00:01:37,020 --> 00:01:40,540
the running time of the algorithm here gets rather large.

30
00:01:40,540 --> 00:01:44,350
So if she is solving the problem for a telecommunications network

31
00:01:44,350 --> 00:01:48,850
with, say, 500 vertices, it will still be out of the question to find an optimal solution

32
00:01:48,850 --> 00:01:50,180
using the search tree.

33
00:01:50,180 --> 00:01:52,480
But of course there's a little hope already

34
00:01:52,480 --> 00:01:55,930
because we haven't really fully explored search trees yet.

35
00:01:55,930 --> 00:01:58,230
Maybe it's going to get even better for her.

36
00:01:58,230 --> 00:02:02,060
But before we continue helping Alice, let's have a look at Bob and Carol

37
00:02:02,060 --> 99:59:59,999
and see if can apply smart search trees also for their problems: independent set and clique.
