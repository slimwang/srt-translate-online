1
00:00:00,510 --> 00:00:07,400
The vision with a distributed file server is that there is no central server any

2
00:00:07,400 --> 00:00:15,000
more. Each file is distributed across several servers. What does it mean to

3
00:00:15,000 --> 00:00:19,840
avoid the unscalability of a central server? We want to take a file and

4
00:00:19,840 --> 00:00:22,820
distribute it across several different nodes in

5
00:00:22,820 --> 00:00:25,810
the local area network. Since the DFS is

6
00:00:25,810 --> 00:00:28,620
implemented across all the disks in the network,

7
00:00:28,620 --> 00:00:30,700
if a client wants to read or write a

8
00:00:30,700 --> 00:00:33,750
file then it actually is contacting all the

9
00:00:33,750 --> 00:00:36,960
servers, potentially, to get the data that is looking

10
00:00:36,960 --> 00:00:41,370
for. And which means that since each file

11
00:00:41,370 --> 00:00:45,160
is distributed across all of these different servers, the

12
00:00:45,160 --> 00:00:48,590
idle bandwidth that's available cumulatively across all of

13
00:00:48,590 --> 00:00:51,165
these servers can be used to serve the needs

14
00:00:51,165 --> 00:00:55,100
of every individual client. Also, this allows

15
00:00:55,100 --> 00:00:58,240
distributing the management of the metadata that

16
00:00:58,240 --> 00:01:01,460
is associated with the files among the

17
00:01:01,460 --> 00:01:04,480
server nodes that are available. Furthermore, we have

18
00:01:04,480 --> 00:01:06,270
more memories available in all of these

19
00:01:06,270 --> 00:01:09,090
servers cumulatively, which means that we have a

20
00:01:09,090 --> 00:01:12,890
bigger. Memory footprint available for implementing a

21
00:01:12,890 --> 00:01:16,680
file cache, including all of the server memories,

22
00:01:16,680 --> 00:01:18,570
plus the memories that may be there in the

23
00:01:18,570 --> 00:01:21,700
clients as well. And that's where we can actually

24
00:01:21,700 --> 00:01:25,680
go towards cooperative caching among the clients as well.

25
00:01:25,680 --> 00:01:28,890
So, in the extreme, we can treat all the

26
00:01:28,890 --> 00:01:34,290
nodes in the cluster, whether we call them. S1 or c1, we can look at all of the

27
00:01:34,290 --> 00:01:37,300
nodes and say, they're all the same with interchangeable

28
00:01:37,300 --> 00:01:41,860
roles as clients or servers. That is, we can actually

29
00:01:41,860 --> 00:01:47,810
make this DFS a serverless file system. If we allow

30
00:01:47,810 --> 00:01:54,520
the responsibility of managing the files. Saving the files, cashing

31
00:01:54,520 --> 00:01:58,140
the files, equally distributed among all the nodes of the

32
00:01:58,140 --> 00:02:01,730
class here so the nodes are interchangeable between clients and servers.
