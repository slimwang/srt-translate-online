1
00:00:00,450 --> 00:00:03,190
The solution is to override the onPostExecute method

2
00:00:03,190 --> 00:00:05,510
of the AsyncTask. And this runs on the main

3
00:00:05,510 --> 00:00:09,410
thread. We received the string array of forecast results,

4
00:00:09,410 --> 00:00:11,590
which came as a return value from the do

5
00:00:11,590 --> 00:00:15,930
in background method above. First, we clear the ForecastAdapter

6
00:00:15,930 --> 00:00:19,300
of all the previous forecast entries. Then we go

7
00:00:19,300 --> 00:00:21,810
ahead and add each new forecast entry one by

8
00:00:21,810 --> 00:00:25,500
one to the ForecastAdapter. This is what ultimately triggers

9
00:00:25,500 --> 00:00:29,050
the listView to update. Note that if you're targeting Honeycomb

10
00:00:29,050 --> 00:00:32,210
devices and above, you can use an addAll method here,

11
00:00:32,210 --> 00:00:34,430
so you don't have to add them one by one.

12
00:00:34,430 --> 00:00:38,320
You can just add it once and update the listView once.

13
00:00:38,320 --> 00:00:41,060
Once you hit Refresh, you'll see the weather forecast for

14
00:00:41,060 --> 00:00:44,700
the next seven days for your location. Even though we hit

15
00:00:44,700 --> 00:00:47,820
Refresh, we don't have any verbose logging statements being printed

16
00:00:47,820 --> 00:00:50,520
out here. We don't need them anymore, because we have a

17
00:00:50,520 --> 00:00:53,500
way to check that our code is correct by looking at the UI now.
