1
00:00:00,000 --> 00:00:03,000
So we had these app servers that were all running their own caches,

2
00:00:03,000 --> 00:00:06,000
and then we had a couple databases that were all replicas of each other.

3
00:00:06,000 --> 00:00:09,000
At this point we added a load balancer, and this load balancer probably actually ran.

4
00:00:09,000 --> 00:00:11,000
It was probably a program running on one of these app machines,

5
00:00:11,000 --> 00:00:15,000
and these guys were still keeping their caches in sync using interacting with the databases directly.

6
00:00:15,000 --> 00:00:19,000
And we had a limit ot how many app servers we can have because we had this complicated caching spread thing.

7
00:00:19,000 --> 00:00:22,000
The next thing we added was the memcache layer.

8
00:00:22,000 --> 00:00:25,000
So instead of these app services containing their end memory cache,

9
00:00:25,000 --> 00:00:27,000
they would communicate via memcache.

10
00:00:27,000 --> 00:00:31,000
So instead of having to keep their cache in sync, we just had 1 cache that was just shared among all of our app servers.

11
00:00:31,000 --> 00:00:35,000
I'm sad it took us so long to figure this out because memcache existed when we started reddit,

12
00:00:35,000 --> 00:00:37,000
and we should have been using it from the beginning.

13
00:00:37,000 --> 00:00:40,000
This is what allowed us to get all of that state, all of that cache, out of the apps and into memcached

14
00:00:40,000 --> 00:00:42,000
and allowed us to add apps arbitrarily.

15
00:00:42,000 --> 00:00:45,000
Once we had that going, that allowed us to scale our apps

16
00:00:45,000 --> 00:00:47,000
and they stayed in sync, and so we can add an app, lose an app. We didn't have to worry about it.

17
00:00:47,000 --> 00:00:49,000
The next thing we had to start 
dealing with was the database load.

18
00:00:49,000 --> 00:00:53,000
So we're already replicating for kind of 
durability and for performance reasons,

19
00:00:53,000 --> 00:00:57,000
so we can spread our reads across multiple 
machines as we started segmenting on type.

20
00:00:57,000 --> 00:01:01,000
So we'd have a database for just links; then we could separate comments out into its own database.

21
00:01:01,000 --> 00:01:04,000
And so these would still replicate to each other, but if you're only submitting a link,

22
00:01:04,000 --> 00:01:07,000
you only have to touch this database, 
and if you're only, like, reading a comment,

23
00:01:07,000 --> 00:01:09,000
for example, you only have to touch this database.

24
00:01:09,000 --> 00:01:13,000
And this is actually still basically the general setup reddit has today in terms of how the database is scaled.

25
00:01:13,000 --> 00:01:16,000
And we never wrote sharding in the beginning, and I really regret that.

26
00:01:16,000 --> 00:01:19,000
When I rewrote the ThingDB, the second version of it, I had in the back of my head,

27
00:01:19,000 --> 00:01:22,000
you know, I should add sharding, because we're going to need that someday.

28
00:01:22,000 --> 00:01:24,000
And then I just wanted to get the damn thing into production so I stopped.

29
00:01:24,000 --> 00:01:27,000
The big lession I've learned is when
you're writing a big system like that,

30
00:01:27,000 --> 00:01:31,000
if you don't do the hard parts up front, you may never get another opportunity to them,

31
00:01:31,000 --> 00:01:35,000
because now the database is so big, that if we wanted to bolt on sharding, that's a huge project.

32
00:01:35,000 --> 00:01:38,000
It's easier right now to just add bigger machines and more caching.

33
00:01:38,000 --> 00:01:40,000
It's not going to work forever, and somebody's going to have to bite the bullet and do that.

34
00:01:40,000 --> 00:01:42,000
And it would have been a lot easier to do it at the time.

35
00:01:42,000 --> 00:01:45,000
Since all of our queries, we stopped using joins when we switched to ThingDB,

36
00:01:45,000 --> 00:01:48,000
sharding's actually fairly straightforward if you kind of do it right from the beginning.

37
00:01:48,000 --> 00:01:52,000
Over time some of the software on these app servers changed so we've always been using Python.

38
00:01:52,000 --> 00:01:54,000
I don't remember what app server we used originally.

39
00:01:54,000 --> 00:01:59,000
We switched from whatever we used initially to web.py, which is a framework that we wrote at reddit.

40
00:01:59,000 --> 00:02:02,000
Aaron was basically the main author of that, and it's still out there on the Internet somewhere.

41
00:02:02,000 --> 00:02:06,000
And this is where the first time I recall seeing a framework that had kind of the notion

42
00:02:06,000 --> 00:02:09,000
of a handler class and then functions for get and post,

43
00:02:09,000 --> 00:02:12,000
and I've become kind of addicted to thinking of web applications that way.

44
00:02:12,000 --> 00:02:15,000
Actually the Google app engine, the webapp2 framework,

45
00:02:15,000 --> 00:02:17,000
inherited a lot of that design from web.py, which is nice.

46
00:02:17,000 --> 00:02:20,000
Nice for me, at least, is that design decision has kind of stuck around for a little while

47
00:02:20,000 --> 00:02:22,000
so I think that means it was a good one.

48
00:02:22,000 --> 00:02:25,000
Now Python uses a web framer called Pylons, but it uses a very old version of Pylons.

49
00:02:25,000 --> 00:02:28,000
And basically when we switched to Pylons, Aaron had stopped maintaining web.py.

50
00:02:28,000 --> 00:02:31,000
I didn't want to maintain it. We switched to something else maintained by somebody else.

51
00:02:31,000 --> 00:02:35,000
And then we basically shredded most of it and made it function just like web.py.

52
00:02:35,000 --> 00:02:38,000
In hindsight we probably should have just written our own because that's effectively what we did,

53
00:02:38,000 --> 00:02:40,000
but we did it on top of Pylons.

54
00:02:40,000 --> 00:02:43,000
So if you want to use the reddit version of Pylons, it's open source. It's online.

55
00:02:43,000 --> 00:02:47,000
But it doesn't resemble anything like the actual Pylons web framework at this point.

56
00:02:47,000 --> 00:02:51,000
And to my knowledge, that's still what they use today, this hacked up version of Pylons.
