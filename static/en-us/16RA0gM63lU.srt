1
00:00:00,000 --> 00:00:03,000
The basic trick was that we had it reversed last time.

2
00:00:03,000 --> 00:00:06,000
We want to check and see if element is less than or equal to this_element,

3
00:00:06,000 --> 00:00:08,000
not the other way around.

4
00:00:08,000 --> 00:00:11,000
And now when we run it, we find the right answer.

5
00:00:11,000 --> 00:00:15,000
Here I'm making a significantly bigger tree as a kind of a final test case.

6
00:00:15,000 --> 00:00:20,000
We start out with an empty tree, but then we add 8, 6, 7, 5, 3, 0, 9

7
00:00:20,000 --> 00:00:26,000
and then also pi, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5.

8
00:00:26,000 --> 00:00:30,000
And for each one of those we insert it into t1 and assign the result back to t1.

9
00:00:30,000 --> 00:00:32,000
So at the end of the day, t1 should have all of these.

10
00:00:32,000 --> 00:00:37,000
When we go print it out, they should be in order if our tree is working correctly.

11
00:00:37,000 --> 00:00:39,000
We should have gotten each one, and they should be in order.

12
00:00:39,000 --> 00:00:41,000
Let's go see if that works.

13
00:00:41,000 --> 00:00:46,000
Ah! 0, 1, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9. Excellent.

14
00:00:46,000 --> 00:00:50,000
This is a pretty good test case for us because it's long and it also has some duplicates,

15
00:00:50,000 --> 00:00:53,000
a bunch of duplicate numbers, to make sure we're handling less than or equal to

16
00:00:53,000 --> 00:00:55,000
or whatnot correctly.

17
00:00:55,000 --> 00:00:57,000
So now we have much more confidence in our tree insertion.

18
00:00:57,000 --> 00:01:01,000
When we were looking to see if our tree contained something,

19
00:01:01,000 --> 00:01:03,000
whenever we were looking something up in the tree,

20
00:01:03,000 --> 00:01:06,000
we could throw away half the tree from consideration at each step.

21
00:01:06,000 --> 00:01:10,000
If our target number was less, we could throw away the right tree--conceptually.

22
00:01:10,000 --> 00:01:12,000
We just forget about it for a while.

23
00:01:12,000 --> 00:01:15,000
This means that even if the tree is very large,

24
00:01:15,000 --> 00:01:18,000
we don't have to make very many recursive calls.

25
00:01:18,000 --> 00:01:21,000
That makes this tree a very efficient data structure.

26
00:01:21,000 --> 00:01:26,000
And in fact, one way for Python to implement things like dictionaries

27
00:01:26,000 --> 99:59:59,999
is using just this sort of tree.
