1
00:00:00,240 --> 00:00:04,550
Now I'll actually talk about one specific form of an edge detector.

2
00:00:04,550 --> 00:00:07,040
Perhaps the most widely used edge detector out there,

3
00:00:08,360 --> 00:00:11,050
referred to as the Canny edge detector.

4
00:00:11,050 --> 00:00:14,810
You start off by filtering the image with a derivative of a Gaussian.

5
00:00:14,810 --> 00:00:18,100
Remember, the whole concept of, actually, you can actually just

6
00:00:18,100 --> 00:00:22,140
apply the Gaussian to the derivative operator and generate a new kernel.

7
00:00:22,140 --> 00:00:23,870
And that's what this process is about.

8
00:00:23,870 --> 00:00:27,540
Basically, we would actually filter the image with a derivative of a Gaussian.

9
00:00:28,770 --> 00:00:32,780
And that will give us a magnitude and orientation of the gradient.

10
00:00:32,780 --> 00:00:34,350
So this is my original image.

11
00:00:34,350 --> 00:00:37,570
These are the two derivatives in x and y.

12
00:00:37,570 --> 00:00:41,720
Again, just for showcasing purposes, I'm showing you some results.

13
00:00:41,720 --> 00:00:45,120
They are not the actual outputs all of this using this process, but

14
00:00:45,120 --> 00:00:48,910
I want to make sure that you guys understand what's going on here more

15
00:00:48,910 --> 00:00:51,384
rather than actually giving you the actual outputs.

16
00:00:51,384 --> 00:00:53,454
This is, of course, the magnitude of the gradient.

17
00:00:53,454 --> 00:00:58,450
And, of course, the, the angle, the orientation of the gradient everywhere.

18
00:00:58,450 --> 00:01:00,360
We've looked at how to compute all of this so far.

19
00:01:01,440 --> 00:01:03,070
So these are the first two steps.

20
00:01:03,070 --> 00:01:06,530
The third step of computing edges is, again,

21
00:01:06,530 --> 00:01:11,960
taking this magnitude and doing some local processing to enhance the edges.

22
00:01:11,960 --> 00:01:16,180
So in Canny edge detector, what basically is done is non-maximum suppression.

23
00:01:16,180 --> 00:01:20,180
Which basically is all about thinning the multiple pixels.

24
00:01:20,180 --> 00:01:23,970
So there are lots of pixels, for example, here you see right next to each other.

25
00:01:23,970 --> 00:01:28,150
And taking these into a single pixel width line.

26
00:01:28,150 --> 00:01:32,030
So anywhere where I see a lot of these types of regions that seem to have more

27
00:01:32,030 --> 00:01:37,600
than one pixel, we want to kind of start combining them into single pixels and

28
00:01:37,600 --> 00:01:39,430
lines of single pixels.

29
00:01:39,430 --> 00:01:42,900
These are, again, approximations to kind of look at what's going on.

30
00:01:42,900 --> 00:01:45,640
But basically, in essence, it comes down to, just take the wide ridges,

31
00:01:45,640 --> 00:01:48,980
remember those ridges from the way we've looked at a height map of

32
00:01:48,980 --> 00:01:53,300
these types of things, and reduce them down to something that's one pixel width.

33
00:01:53,300 --> 00:01:57,580
The fourth step in Canny edge detector is taking the gradient image again and

34
00:01:57,580 --> 00:02:00,120
coming with a method of both linking and

35
00:02:00,120 --> 00:02:05,750
thresholding pixel groupings from one level to the other.

36
00:02:05,750 --> 00:02:09,460
So in essence, what we do is, anywhere out there we would define two thresholds.

37
00:02:10,620 --> 00:02:14,390
These two thresholds would be the low value and the high value.

38
00:02:14,390 --> 00:02:16,910
And then use the high threshold to start an edge.

39
00:02:16,910 --> 00:02:18,960
So wherever there's a high value information.

40
00:02:20,150 --> 00:02:22,470
again, this is just for demonstration purposes.

41
00:02:22,470 --> 00:02:24,840
I would, let's say find the high value here.

42
00:02:26,040 --> 00:02:27,970
I would start the curve at this thing.

43
00:02:27,970 --> 00:02:30,622
And basically, anywhere in the thing wherever I find low values,

44
00:02:30,622 --> 00:02:33,640
I'll continue finding the curve.

45
00:02:33,640 --> 00:02:34,980
So using this kind of a technique,

46
00:02:34,980 --> 00:02:39,690
we can actually start kind of building more local edges out of it.

47
00:02:40,910 --> 00:02:44,530
Doing this process and kind of doing various types of filtering mechanisms to

48
00:02:44,530 --> 00:02:48,500
keep on enhancing them within the thresholding that's going on,

49
00:02:48,500 --> 00:02:51,630
we should be able to generate a edge map.

50
00:02:51,630 --> 00:02:54,110
So here you see now a complete edge map.

51
00:02:54,110 --> 00:02:55,640
All of the edges are one pixel.

52
00:02:56,706 --> 00:02:59,513
Sometimes they form complete lines out of it.

53
00:02:59,513 --> 00:03:03,211
Of course, this is still an image, and these are not line segments per se, but

54
00:03:03,211 --> 00:03:06,742
then there are other methods that can be used to actually combine these into

55
00:03:06,742 --> 00:03:09,377
line segments, you know, Hough transform methods and

56
00:03:09,377 --> 00:03:11,790
stuff that you can read about on your own.

57
00:03:11,790 --> 00:03:13,130
And we will not cover them.

58
00:03:13,130 --> 00:03:17,970
We will actually come back at looking these types these types of edges for

59
00:03:17,970 --> 00:03:19,980
some other work in a later lecture.

60
00:03:19,980 --> 00:03:23,310
This, of course, is the actual output of edges of the original tiger image that

61
00:03:23,310 --> 00:03:24,400
we were looking at.

62
00:03:24,400 --> 00:03:26,570
Just to reiterate, these were the steps we went through.

63
00:03:26,570 --> 00:03:29,480
We filtered the image using a derivative for Gaussian,

64
00:03:29,480 --> 00:03:34,700
found the gradient information, did non-maximum suppression to find the ridges,

65
00:03:34,700 --> 00:03:37,860
down to single pixels, then once we took these single pixels,

66
00:03:37,860 --> 00:03:42,620
we started linking and thresholding the images, or, the the edges.

67
00:03:42,620 --> 00:03:45,800
We're basically looking at the low and high and use the high threshold to

68
00:03:45,800 --> 00:03:49,692
start edge curves and the low ones to continue it to get an output like this.
