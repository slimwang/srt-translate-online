1
00:00:00,200 --> 00:00:04,050
Let's look at the solution to
our cache incoherence quiz.

2
00:00:04,050 --> 00:00:07,670
We had three cache and three cores.

3
00:00:07,670 --> 00:00:11,490
Allocation that starts at zero and
then each core reads, increments, and

4
00:00:11,490 --> 00:00:13,530
then writes to that memory location.

5
00:00:13,530 --> 00:00:16,860
So the question is,
what's the final value we write here?

6
00:00:16,860 --> 00:00:21,070
The correct behavior would be for
core zdero to do this, and

7
00:00:21,070 --> 00:00:26,920
then it replaces this from its cache so
that core one reads A1 here.

8
00:00:26,920 --> 00:00:31,930
Increments that writes A2,
and then core two reads that,

9
00:00:31,930 --> 00:00:34,320
increments, and writes A3.

10
00:00:35,390 --> 00:00:40,515
So this three here is a possible
answer if core zero happens

11
00:00:40,515 --> 00:00:44,985
to replace this block that contains A
from it's cache before core one tries to

12
00:00:44,985 --> 00:00:49,457
read it and then core one replaces
before core two reads it and so on.

13
00:00:49,457 --> 00:00:53,307
In that case we get actually A three
here, which is the correct answer.

14
00:00:53,307 --> 00:00:55,537
So let's see now if we can get two.

15
00:00:55,537 --> 00:00:58,617
Well, if core zero does a replacement,
so

16
00:00:58,617 --> 00:01:02,971
the memory location after
this actually contains A one.

17
00:01:02,971 --> 00:01:08,673
Then core one does this but doesn't
replace the block from the cache.

18
00:01:08,673 --> 00:01:11,023
Then core two will still see a one.

19
00:01:11,023 --> 00:01:13,653
It will not see what core one produced.

20
00:01:13,653 --> 00:01:16,197
Because core one keeps
it in it's own cache.

21
00:01:16,197 --> 00:01:19,583
So core two here reads
one increments it and

22
00:01:19,583 --> 00:01:23,910
then core two ends up writing a two so
this is a possible answer and

23
00:01:23,910 --> 00:01:27,800
then we can get a one here by,
basically,

24
00:01:27,800 --> 00:01:33,190
core zero delaying the replacement, and
then core one can fetch a zero as well.

25
00:01:33,190 --> 00:01:38,410
Put a one there, but not replace until
later and that means that when core two

26
00:01:38,410 --> 00:01:44,760
reads this, it gets a zero and then puts
a one here so this is also possible.

27
00:01:44,760 --> 00:01:46,442
It is not possible for

28
00:01:46,442 --> 00:01:52,440
core two to write a zero because what
it reads it will increment and write.

29
00:01:52,440 --> 00:01:57,090
So for core two to produce a zero here,
it would need to read minus one.

30
00:01:57,090 --> 00:02:02,840
Note that each of these cores is still
behaving as a correct unit processor so

31
00:02:02,840 --> 00:02:04,790
zero is not possible.

32
00:02:04,790 --> 00:02:10,150
Similarly, four is not possible because
for four to be produced here we

33
00:02:10,150 --> 00:02:14,590
need to read a three and there is just
no way that two increments from zero can

34
00:02:14,590 --> 00:02:19,680
produce a three here and similarly
more than four is not possible.

35
00:02:19,680 --> 00:02:22,358
So the correct answers here are one,
two, and

36
00:02:22,358 --> 00:02:24,360
three are possible at this point.
