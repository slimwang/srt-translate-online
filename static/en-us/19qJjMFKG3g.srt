1
00:00:00,000 --> 00:00:02,073
Once again we've got a kernel.

2
00:00:02,073 --> 00:00:05,317
We know it's a kernel because it's been tagged with global,

3
00:00:05,317 --> 00:00:08,115
so it's going to run on the GPU but can be called from the host.

4
00:00:08,115 --> 00:00:12,983
Once again we're going to pass in a local variable, a parameter called array.

5
00:00:12,983 --> 00:00:15,149
And the trick is that this parameter is a pointer,

6
00:00:15,149 --> 00:00:19,424
and so this is actually pointing to some global memory that we've allocated elsewhere.

7
00:00:19,424 --> 00:00:21,325
I'll show you how to do that in a moment.

8
00:00:21,325 --> 00:00:25,697
Once you've got a pointer to global memory, you can manipulate the contents of that memory

9
00:00:25,697 --> 00:00:28,501
just as you would manipulate any other chunk of memory.

10
00:00:28,501 --> 00:00:31,969
In this case, I'm going to take my array,

11
00:00:31,969 --> 00:00:35,140
and I'm going to set one of its elements

12
00:00:35,140 --> 00:00:39,218
which happens to be equal to the index of this thread to some number

13
00:00:39,218 --> 00:00:42,981
which happens to be 2.0 times the index to this thread.

14
00:00:42,981 --> 00:00:46,004
Again not a very useful function but it illustrates what's happening.

15
00:00:46,004 --> 00:00:48,875
So the point really is that since all the parameters to a function

16
00:00:48,875 --> 00:00:51,210
are local variables, are private to that thread,

17
00:00:51,210 --> 00:00:55,251
if you want to manipulate global memory you're going to have to pass in a pointer to that memory.

18
00:00:55,251 --> 00:00:57,692
Of course that means you're going to have to allocate a pointer,

19
00:00:57,692 --> 00:00:59,093
so let's look at how that works.

20
00:00:59,093 --> 00:01:01,496
Here's the code to show off how we use global memory.

21
00:01:01,496 --> 00:01:05,305
The first thing I'm going to do is to clear some host memory.

22
00:01:05,305 --> 00:01:10,772
Once again I'm using a convention that's starting a variable with a prefix H_

23
00:01:10,772 --> 00:01:13,304
indicates that this is memory that lives on the host.

24
00:01:13,304 --> 00:01:15,644
Hhere's an array of 128 floats.

25
00:01:15,644 --> 00:01:19,149
I'm also going to declare a pointer that I'm going to use to point

26
00:01:19,149 --> 00:01:21,386
to the global memory that I allocate on the device.

27
00:01:21,386 --> 00:01:27,458
And once again the d_ convention indicates that this variable is on the device.

28
00:01:27,458 --> 00:01:30,191
Now I want to allocate some global memory on the device.

29
00:01:30,191 --> 00:01:32,440
I'm going to use the function cudaMalloc.

30
00:01:32,440 --> 00:01:39,205
What's happening here is that I'm passing it a pointer to this variable which is itself a pointer. Right?

31
00:01:39,205 --> 00:01:44,341
And cudaMalloc is going to allocate some memory in this case room for 128 floats,

32
00:01:44,341 --> 00:01:49,881
and stuff a pointer to that memory into the pointer d array.

33
00:01:49,881 --> 00:01:53,151
If you're allocating memory you'll probably initialize to something.

34
00:01:53,151 --> 00:01:57,001
We use cudaMemcpy for that operation.

35
00:01:57,001 --> 00:02:02,026
In this case we pass in a pointer to the destination memory,

36
00:02:02,026 --> 00:02:05,335
which is this d array that we've allocated,

37
00:02:05,335 --> 00:02:09,032
and a pointer to the source memory, which is this h array variable.

38
00:02:09,032 --> 00:02:12,490
Then the number of bytes allocate, and then we indicate

39
00:02:12,490 --> 00:02:15,621
whether we're copying from the hosted device, or vice versa.

40
00:02:15,621 --> 00:02:17,294
Oops, this is a bug.

41
00:02:17,294 --> 00:02:20,871
Now we've got a chunk of global memory, we've put something in it,

42
00:02:20,871 --> 00:02:23,935
and now we're ready to launch the kernel that's going to operate on that global memory.

43
00:02:23,935 --> 00:02:25,538
So here's the kernel that we saw earlier.

44
00:02:25,538 --> 00:02:29,541
Again, we're going to launch a single thread block, consisting of 128 threads.

45
00:02:29,541 --> 00:02:34,713
I'm going to pass in this pointer where I've allocated and initialized memory.

46
00:02:34,713 --> 00:02:40,384
After this runs, presumably this code will do something to that memory that I pass in,

47
00:02:40,384 --> 00:02:43,184
and now I'll need to copy it back onto the host.

48
00:02:43,184 --> 00:02:49,860
If I want to use the results of this kernel back on the host, then I need to copy the memory back into host memory.

49
00:02:49,860 --> 00:02:53,866
Here's that operation, once again cudaMemcpy.

50
00:02:53,866 --> 00:02:56,569
This time the destination is h array.

51
00:02:56,569 --> 00:03:01,170
The source is d array, this same number of bytes.

52
00:03:01,170 --> 00:03:05,241
Now we're copying from device to host.

53
00:03:05,241 --> 00:03:07,542
That's how you use global memory.

54
00:03:07,542 --> 00:03:11,724
The trick is that, since you can only pass in local variables in a kernel,

55
00:03:11,724 --> 00:03:14,984
you have to allocate and initialize global memory outside the kernel

56
00:03:14,984 --> 00:03:16,360
and then pass in a pointer.

57
00:03:16,360 --> 00:03:19,000
Finally, let's look at how you would use shared memory.
