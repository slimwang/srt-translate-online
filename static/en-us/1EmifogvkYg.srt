1
00:00:00,260 --> 00:00:02,480
An alternative approach to trying to create

2
00:00:02,480 --> 00:00:07,670
better solutions for sequential consistency, which programmers

3
00:00:07,670 --> 00:00:11,470
naturally might expect, is to actually relax

4
00:00:11,470 --> 00:00:14,710
the consistency. That is, we tell the programmers

5
00:00:14,710 --> 00:00:17,570
that they cannot really expect sequential consistency.

6
00:00:17,570 --> 00:00:18,970
But we can still tell them that

7
00:00:18,970 --> 00:00:22,048
they can expect something. And this relaxed

8
00:00:22,048 --> 00:00:26,080
consistency models that are not really sequential consistency,

9
00:00:26,080 --> 00:00:29,176
but they're not just like anything goes, usually

10
00:00:29,176 --> 00:00:31,696
differ in terms of what types of orderings

11
00:00:31,696 --> 00:00:34,514
due they enforce. There are really four types

12
00:00:34,514 --> 00:00:38,583
of ordering. There is ordering between writes to different

13
00:00:38,583 --> 00:00:41,813
locations. There are orderings between writes to some

14
00:00:41,813 --> 00:00:45,243
locations and reads of other locations. There is ordering

15
00:00:45,243 --> 00:00:48,392
between reads and subsequent writes in program order,

16
00:00:48,392 --> 00:00:51,940
and between reads and other reads in program order.

17
00:00:51,940 --> 00:00:56,660
Sequential consistency says that basically program execution

18
00:00:56,660 --> 00:00:59,360
must obey all four types of ordering at

19
00:00:59,360 --> 00:01:03,164
all times. If we actually reorder something, we

20
00:01:03,164 --> 00:01:06,034
have to fix any situation where that would

21
00:01:06,034 --> 00:01:09,560
result in a different outcome than program ordered

22
00:01:09,560 --> 00:01:12,631
execution. So we're allowed to reorder things, but

23
00:01:12,631 --> 00:01:14,611
we have to always hide that from anybody

24
00:01:14,611 --> 00:01:17,544
being able to see it. In relaxed consistency

25
00:01:17,544 --> 00:01:20,856
models some of these types of ordering need

26
00:01:20,856 --> 00:01:24,360
not be obeyed at all times. Usually the

27
00:01:24,360 --> 00:01:27,240
first type of ordering that will not be

28
00:01:27,240 --> 00:01:30,566
obeyed is the read-read. So if we maintain

29
00:01:30,566 --> 00:01:34,178
the ordering between writes and between writes and

30
00:01:34,178 --> 00:01:37,202
reads, but just allow reads to proceed out

31
00:01:37,202 --> 00:01:39,554
of order, then we say that we have

32
00:01:39,554 --> 00:01:42,914
a less relaxed model than if we allow reordering

33
00:01:42,914 --> 00:01:45,650
of other types. So if we told the

34
00:01:45,650 --> 00:01:49,810
programmers that you have to write programs without assuming

35
00:01:49,810 --> 00:01:52,930
that reads are done in correct order, then the

36
00:01:52,930 --> 00:01:55,730
real question is, but how do we then write

37
00:01:55,730 --> 00:01:59,020
correct programs to begin with? So for example, how

38
00:01:59,020 --> 00:02:02,960
do we do flag synchronization if we cannot expect

39
00:02:02,960 --> 00:02:08,380
that after waiting on a flag, we will be able to read the new value of the data?
