1
00:00:00,000 --> 00:00:04,000
All right, so now that we've mastered lexing

2
00:00:04,000 --> 00:00:08,000
or breaking up into words HTML,

3
00:00:08,000 --> 00:00:13,000
let's turn our attention to JavaScript, the other language we'll be considering in this class.

4
00:00:13,000 --> 00:00:16,000
And I'm going to introduce you to JavaScript by jumping

5
00:00:16,000 --> 00:00:19,000
right into an example by way of a parable.

6
00:00:19,000 --> 00:00:23,000
Over here on the left we see some webpage code,

7
00:00:23,000 --> 00:00:25,000
apparently a webpage owned by Steven.

8
00:00:25,000 --> 00:00:27,000
Welcome to Steven's webpage.

9
00:00:27,000 --> 00:00:33,000
And Steven would really like to compute five factorial, 5 times 4 times 3 times 2 times 1.

10
00:00:33,000 --> 00:00:37,000
Over here on the left, we see the HTML source code,

11
00:00:37,000 --> 00:00:40,000
and on the right we see the result as it would render.

12
00:00:40,000 --> 00:00:43,000
This p tag I haven't introduced you to yet,

13
00:00:43,000 --> 00:00:45,000
but it means begin a new paragraph.

14
00:00:45,000 --> 00:00:49,000
We'll write out the words "Welcome to." We'll show "Steven" in bold.

15
00:00:49,000 --> 00:00:52,000
We've got this five factorial, this bang.

16
00:00:52,000 --> 00:00:55,000
The exclamation mark often means factorial in mathematics.

17
00:00:55,000 --> 00:00:58,000
Printed in italics you can see it slanted.

18
00:00:58,000 --> 00:01:01,000
But unfortunately, Steven is super sad.

19
00:01:01,000 --> 00:01:04,000
He can't remember the value of five factorial.

20
00:01:04,000 --> 00:01:08,000
Well, this is exactly the sort of thing that a programming language

21
00:01:08,000 --> 00:01:10,000
like JavaScript could help us out with.

22
00:01:10,000 --> 00:01:13,000
It can carry out computations just like Python,

23
00:01:13,000 --> 00:01:16,000
so we can do work in the middle of a webpage.

24
00:01:16,000 --> 00:01:20,000
Let's write our first JavaScript script together.

25
00:01:20,000 --> 00:01:25,000
Here, this line starting with script type= "text/javascript"

26
00:01:25,000 --> 00:01:30,000
and then this document write line, and then ending here with this closing script tag,

27
00:01:30,000 --> 00:01:35,000
all of this, these 3 lines together are a JavaScript program

28
00:01:35,000 --> 00:01:39,000
embedded inside an HTML webpage.

29
00:01:39,000 --> 00:01:44,000
JavaScript programs always begin with this special script tag,

30
00:01:44,000 --> 00:01:47,000
and this tag has an argument because there might be multiple

31
00:01:47,000 --> 00:01:49,000
types of tags out there in the universe.

32
00:01:49,000 --> 00:01:53,000
We've seen tag arguments before with the anchor tag.

33
00:01:53,000 --> 00:01:56,000
Here I have an anchor tag where the argument is a hypertext reference.

34
00:01:56,000 --> 00:01:59,000
Here I have a script where we're telling the web browser

35
00:01:59,000 --> 00:02:03,000
you should treat this as a JavaScript program.

36
00:02:03,000 --> 00:02:06,000
This JavaScript program is very simple.

37
00:02:06,000 --> 00:02:10,000
It's the equivalent of print "Hello World" in Python.

38
00:02:10,000 --> 00:02:14,000
JavaScript's name for the print function is document.write,

39
00:02:14,000 --> 00:02:17,000
which we'll sometimes just abbreviate as write.

40
00:02:17,000 --> 00:02:21,000
But the semantics, the meaning is largely the same.

41
00:02:21,000 --> 00:02:24,000
It's also worth noting that we've put parentheses

42
00:02:24,000 --> 00:02:29,000
around the argument to document.write almost as if it were a mathematical function.

43
00:02:29,000 --> 00:02:33,000
We can do that in Python. It's allowed, but often we don't.

44
00:02:33,000 --> 00:02:37,000
And we've ended the line with a semi-colon, whereas at the end of a Python line

45
00:02:37,000 --> 00:02:39,000
we often don't have a semi-colon, but again,

46
00:02:39,000 --> 00:02:41,000
you can put semi-colons at the end of Python lines.

47
00:02:41,000 --> 00:02:43,000
We just typically don't.

48
00:02:43,000 --> 00:02:47,000
Now we're going to try to use the full phenomenal cosmic power of JavaScript

49
00:02:47,000 --> 00:02:50,000
to compute five factorial.

50
00:02:50,000 --> 00:02:53,000
To do so, I'm going to make a recursive function called--surprise, surprise--

51
00:02:53,000 --> 00:02:57,000
factorial that's going to compute the value.

52
00:02:57,000 --> 00:03:02,000
Let's walk through every part of this JavaScript code together.

53
00:03:02,000 --> 00:03:05,000
The word function means I'm declaring a function.

54
00:03:05,000 --> 00:03:10,000
This is very similar to def in Python.

55
00:03:10,000 --> 00:03:13,000
Then I give the name of the function, and then I write the arguments

56
00:03:13,000 --> 00:03:15,000
just like I would in Python.

57
00:03:15,000 --> 00:03:20,000
In Python I'd have a colon here, but JavaScript requires slightly different punctuation,

58
00:03:20,000 --> 00:03:25,000
this open and curly brace, and in this regard it's more like languages such as

59
00:03:25,000 --> 00:03:30,000
C or C++ or Java or C#, curly brace languages.

60
00:03:30,000 --> 00:03:34,000
Our factorial function is going to be recursive, and every recursive function

61
00:03:34,000 --> 00:03:37,000
needs a base case, a time when it stops.

62
00:03:37,000 --> 00:03:40,000
Our stopping condition is when n is 0.

63
00:03:40,000 --> 00:03:42,000
We could have picked n is less than or equal to 0,

64
00:03:42,000 --> 00:03:45,000
n is less than or equal to 1, so I have an if statement

65
00:03:45,000 --> 00:03:47,000
that's checking that.

66
00:03:47,000 --> 00:03:50,000
Again, in Python this would probably look very, very similar

67
00:03:50,000 --> 00:03:55,000
except that we'd use a colon instead of an open and curly brace.

68
00:03:55,000 --> 00:04:00,000
If n is 0, we return 1, and I have a semi-colon at the end of all my statements.

69
00:04:00,000 --> 00:04:04,000
Then in Python, I would know that I'm done with the if statement

70
00:04:04,000 --> 00:04:06,000
because of the tabbing.

71
00:04:06,000 --> 00:04:10,000
JavaScript doesn't use that sort of readable tabbing rule

72
00:04:10,000 --> 00:04:13,000
to figure out the control flow when an if statement ends,

73
00:04:13,000 --> 00:04:17,000
so instead you have to explicitly close off this open and curly brace

74
00:04:17,000 --> 00:04:21,000
just like you'd have to close off a tag in HTML

75
00:04:21,000 --> 00:04:23,000
or close off parentheses once you start them.

76
00:04:23,000 --> 00:04:26,000
We're going to study this a lot more as time goes by.

77
00:04:26,000 --> 00:04:29,000
I close off the then branch of my if.

78
00:04:29,000 --> 00:04:32,000
I have a semi-colon, and now I have a new return statement,

79
00:04:32,000 --> 00:04:34,000
and this is basically just the formula for factorial.

80
00:04:34,000 --> 00:04:38,000
It's n times the factorial of n - 1.

81
00:04:38,000 --> 00:04:42,000
This part here is a function call, in fact, a recursive function call,

82
00:04:42,000 --> 00:04:44,000
just like you'd expect to see in Python.

83
00:04:44,000 --> 00:04:46,000
I'm ending the whole thing with a semi-colon.

84
00:04:46,000 --> 00:04:49,000
This is the end of my function definition,

85
00:04:49,000 --> 00:04:52,000
and at the end of the day I print out--

86
00:04:52,000 --> 00:04:54,000
and the JavaScript version of print is document.write--

87
00:04:54,000 --> 00:04:59,000
factorial of 5, and over here on the right you can actually see it.

88
00:04:59,000 --> 00:05:03,000
We've got the 120, which is the correct value for factorial,

89
00:05:03,000 --> 00:05:07,000
so what that tells me is that if prettiness matters,

90
00:05:07,000 --> 00:05:10,000
I should delete those question marks because now we are super happy

91
00:05:10,000 --> 00:05:15,000
because we can compute five factorial using embedded JavaScript

92
00:05:15,000 --> 00:05:17,000
in the middle of a webpage, or to put it another way,

93
00:05:17,000 --> 00:05:20,000
a way that's a bit more puntastic,

94
00:05:20,000 --> 00:05:25,000
[singing] it's a good thing JavaScript can run on the page of Steven.

95
00:05:25,000 --> 99:59:59,999
And basically my voice is telling me not to quit my day job.
