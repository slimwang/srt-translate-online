1
00:00:00,000 --> 00:00:02,000
Here's the function poker.

2
00:00:02,000 --> 00:00:06,000
What am I going to do to change this to handle ties?

3
00:00:06,000 --> 00:00:08,000
It seems like it might be complicated.

4
00:00:08,000 --> 00:00:10,000
We didn't talk about ties here at all.

5
00:00:10,000 --> 00:00:13,000
The max function doesn't do anything about ties.

6
00:00:13,000 --> 00:00:15,000
How are we going to handle that?

7
00:00:15,000 --> 00:00:19,000
Well, here's my suggestion for how to handle it.

8
00:00:19,000 --> 00:00:23,000
I'm just going to say we had the right idea here

9
00:00:23,000 --> 00:00:26,000
that we want to go through all the hands, and we want to

10
00:00:26,000 --> 00:00:28,000
compare them using hand_rank.

11
00:00:28,000 --> 00:00:31,000
But instead of returning the one maximum,

12
00:00:31,000 --> 00:00:36,000
let's invent a new function called allmax

13
00:00:36,000 --> 00:00:41,000
that returns a collection--it could be a set or a list--of all the maximums.

14
00:00:41,000 --> 00:00:43,000
And now let's have you write the function allmax.

15
00:00:43,000 --> 00:00:48,000
It takes an input, which is a list or something else that you can iterate over,

16
00:00:48,000 --> 00:00:52,000
and Python uses the word "iterable" to refer to that.

17
00:00:52,000 --> 00:00:57,000
And it optionally takes a keyword argument just the way that max did.

18
00:00:57,000 --> 00:00:59,000
Max can take a key or not.

19
00:00:59,000 --> 00:01:02,000
And what we want to do is return, and let's make a commitment

20
00:01:02,000 --> 00:01:04,000
and say we're going to return a list

21
00:01:04,000 --> 00:01:06,000
of all the items in the iterable

22
00:01:06,000 --> 99:59:59,999
that are equal to the max of the iterable.
