1
00:00:00,000 --> 00:00:03,000
Here are the answers.

2
00:00:03,000 --> 00:00:08,000
CBC does require the encryption function to be invertible because to do decryption

3
00:00:08,000 --> 00:00:11,000
we need to use the inverse of the encryption function.

4
00:00:11,000 --> 00:00:16,000
CFB does not, as we saw both encryption and decryption use the encryption function

5
00:00:16,000 --> 00:00:17,000
in the forward direction.

6
00:00:17,000 --> 00:00:19,000
This has advantages--that means there are more possible functions

7
00:00:19,000 --> 00:00:21,000
that we could use for this.

8
00:00:21,000 --> 00:00:25,000
We haven't seen any yet, but soon we'll talk about hash functions,

9
00:00:25,000 --> 00:00:29,000
which could be used as the encryption function for cipher feedback mode.

10
00:00:29,000 --> 00:00:33,000
Neither of them require the IV to be kept secret.

11
00:00:33,000 --> 00:00:36,000
One way to see this is if you look at the structure of the ciphers,

12
00:00:36,000 --> 00:00:39,000
they're using the IV as though it was ciphertext block -1.

13
00:00:39,000 --> 00:00:43,000
All the other ciphertext blocks are visible to the attacker.

14
00:00:43,000 --> 00:00:48,000
So if you think about how it's used, it's used just like another ciphertext block.

15
00:00:48,000 --> 00:00:51,000
There's no security required in keeping the IV secret.

16
00:00:51,000 --> 00:00:53,000
What's important about the IV for both of these

17
00:00:53,000 --> 00:00:59,000
is that it's not reused, that a unique IV is used to avoid the possibility of the same

18
00:00:59,000 --> 00:01:01,000
block encrypted the same way.

19
00:01:01,000 --> 00:01:05,000
The big advantage of cipher feedback mode over cipher-block chaining mode

20
00:01:05,000 --> 00:01:07,000
is this ability to use small message blocks.

21
00:01:07,000 --> 00:01:13,000
We can select the value of s and only encrypt the message in chunks of size s.

22
00:01:13,000 --> 00:01:17,000
This means we can use this mode to turn a block cipher into a stream cipher,

23
00:01:17,000 --> 00:01:21,000
where we're encrypting messages 1 bite at a time, if we wanted to do that.

24
00:01:21,000 --> 00:01:26,000
It's not necessarily the best way to design a stream cipher because we're doing a lot more

25
00:01:26,000 --> 00:01:28,000
work than might be necessary.

26
00:01:28,000 --> 00:01:31,000
This one is maybe a little unfair to ask since we didn't talk about this,

27
00:01:31,000 --> 00:01:35,000
but an important point to make is that neither of these, as we've described them,

28
00:01:35,000 --> 00:01:37,000
provide any strong protection against tampering.

29
00:01:37,000 --> 00:01:41,000
An attacker can modify. The blocks can move blocks around.

30
00:01:41,000 --> 00:01:44,000
The decryption may or may not look like a valid decryption depending on

31
00:01:44,000 --> 00:01:45,000
what the contents are,

32
00:01:45,000 --> 00:01:49,000
but there's no way to easily detect that there's been tampering with either of these modes.

33
00:01:49,000 --> 00:01:55,000
We'll talk about in a future class ways to provide message authenication

34
00:01:55,000 --> 00:01:57,000
that would make it so you can detect when tampering happens.

35
00:01:57,000 --> 00:02:02,000
The final property is that the final ciphertext blocks depend on all of the message blocks.

36
00:02:02,000 --> 00:02:04,000
This is actually true for both.

37
00:02:04,000 --> 00:02:10,000
This turns out to be a property that's very useful for what I'm going to talk about next,

38
00:02:10,000 --> 00:02:13,000
which is cryptographic hash functions.
