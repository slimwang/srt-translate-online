1
00:00:00,150 --> 00:00:02,020
Let's suppose that we have a TCP sender that's

2
00:00:02,020 --> 00:00:05,590
sending packets, where the sending rate is controlled by

3
00:00:05,590 --> 00:00:08,520
the window W, and it's receiving ACKs. Now at

4
00:00:08,520 --> 00:00:11,870
any time if the window's W, only W unacknowledged

5
00:00:11,870 --> 00:00:15,590
packets may be outstanding. So the sender's sending rate,

6
00:00:15,590 --> 00:00:19,140
R, is simply the TCP window, W, divided by

7
00:00:19,140 --> 00:00:21,040
the round trip time of the path. So the

8
00:00:21,040 --> 00:00:25,310
rate is W over RTT. Now remember that TCP uses

9
00:00:25,310 --> 00:00:30,260
additive increase, multiplicative decrease, or AIMD, congestion control.

10
00:00:30,260 --> 00:00:33,810
So for every W ACKs received, we send W

11
00:00:33,810 --> 00:00:37,080
plus one packets, and our TCP sawtooth will look

12
00:00:37,080 --> 00:00:39,510
something like this. We'll start at a rate W

13
00:00:39,510 --> 00:00:44,330
max over 2, increase the window to W max and then when we see a drop we

14
00:00:44,330 --> 00:00:47,660
will apply multiplicative decrease and reduce the sender's sending

15
00:00:47,660 --> 00:00:50,430
rate to W max over 2 again. So here,

16
00:00:50,430 --> 00:00:53,100
right at the point of a packet drop, this represents

17
00:00:53,100 --> 00:00:56,190
the maximum number of packets that can be in flight. So

18
00:00:56,190 --> 00:00:59,190
again, the required buffer is the maximum number of packets

19
00:00:59,190 --> 00:01:01,350
that can be in flight, or simply the height of this

20
00:01:01,350 --> 00:01:05,230
TCP sawtooth. Now we know the rate is W over

21
00:01:05,230 --> 00:01:08,860
RTT, and we'd like the sender to send at a common

22
00:01:08,860 --> 00:01:12,050
rate, R. And if we'd like the sender to be sending

23
00:01:12,050 --> 00:01:15,910
at the same rate before and after it experiences a loss,

24
00:01:15,910 --> 00:01:18,850
then we know that the rate before the drop must

25
00:01:18,850 --> 00:01:21,470
equal the rate after the drop. So then we can set

26
00:01:21,470 --> 00:01:24,890
these two rates equal. We know that the RTT is part

27
00:01:24,890 --> 00:01:28,130
transmission delay T, and part queuing delay which is the maximum

28
00:01:28,130 --> 00:01:31,310
buffer size of the bottleneck link, divided by the capacity

29
00:01:31,310 --> 00:01:34,150
of the bottleneck link. We also know that after reducing the

30
00:01:34,150 --> 00:01:36,790
window, the queuing delay is zero. So we can replace the

31
00:01:36,790 --> 00:01:41,020
term on the left with W old over 2T plus B

32
00:01:41,020 --> 00:01:43,150
over C and we can replace the term on

33
00:01:43,150 --> 00:01:47,020
the right with W old over 2, because the congestion

34
00:01:47,020 --> 00:01:50,700
window has been reduced half divided by 2T. Simply the

35
00:01:50,700 --> 00:01:53,160
propagation delay with no queuing delay. Now if we solve

36
00:01:53,160 --> 00:01:56,200
this equation we find that the required buffering is simply

37
00:01:56,200 --> 00:01:59,050
2T times C. Now the rule of thumb makes sense

38
00:01:59,050 --> 00:02:02,215
for a single flow, but a router in a typical

39
00:02:02,215 --> 00:02:06,120
backbone network has more than 20,000 flows. And it turns

40
00:02:06,120 --> 00:02:09,300
out that this rule of thumb only really holds

41
00:02:09,300 --> 00:02:12,800
if all of the those 20,000 flows are perfectly synchronized.

42
00:02:12,800 --> 00:02:15,680
If the flows are desynchronized, then it turns out

43
00:02:15,680 --> 00:02:18,310
that this router can get away, with much less buffering.
