1
00:00:00,000 --> 00:00:02,940
So we're starting to get to the wrap-up phase of this lecture.

2
00:00:02,940 --> 00:00:06,078
And so I want to sum up what we've learned about the programming model so far.

3
00:00:06,078 --> 00:00:08,746
So I want to try to sum this up in three points.

4
00:00:08,746 --> 00:00:12,217
First, we know that when we write a kernel program

5
00:00:12,217 --> 00:00:16,052
that program looks like it's only going to run on one threads.

6
00:00:16,052 --> 00:00:19,858
However, when we launch that program and we launch the kernel from CPU code,

7
00:00:19,858 --> 00:00:22,526
we specify the launch bounds of that such that

8
00:00:22,526 --> 00:00:27,966
that program can be launched to run on any number of threads that we define.

9
00:00:27,966 --> 00:00:32,438
Finally, within the kernel program, each one of those threads knows its own index

10
00:00:32,438 --> 00:00:36,308
and its own thread block and then the grid of thread blocks,

11
00:00:36,308 --> 00:00:40,081
so that it can properly pick up the right piece of work for it to compute.

12
00:00:40,081 --> 00:00:43,882
Now, what we're going to do is take a slightly broader view of the kind of operations

13
00:00:43,882 --> 00:00:45,917
that we just did in our sample program.

14
00:00:45,917 --> 00:00:48,130
And what we're going to have is two ingredients

15
00:00:48,130 --> 00:00:53,323
that we've learned that are going to lead to an interesting abstraction that we're going to call map.
