1
00:00:00,140 --> 00:00:05,100
Memcached is a very fast in-memory cache. It was built

2
00:00:05,100 --> 00:00:09,730
by a company called Danja, to power a website called

3
00:00:09,730 --> 00:00:13,230
LiveJournal. And before Facebook took over the world, LiveJournal was

4
00:00:13,230 --> 00:00:15,910
a very popular site where people had you know, their

5
00:00:15,910 --> 00:00:19,090
own blogs. Kind of like Tumblr or Blogspot. I don't

6
00:00:19,090 --> 00:00:21,240
know a bunch of, a bunch of things have, have

7
00:00:21,240 --> 00:00:23,670
risen to take the, the place of LiveJournal. But LiveJournal

8
00:00:23,670 --> 00:00:25,750
was a very popular site back in the day. And when

9
00:00:25,750 --> 00:00:30,540
I say back in the day, I mean 2003 is when memcache was released. Now just

10
00:00:30,540 --> 00:00:34,862
about every website on the internet uses memcache

11
00:00:34,862 --> 00:00:37,030
these days. I don't know about Google but

12
00:00:37,030 --> 00:00:39,890
certainly it's used by Facebook. It's used by

13
00:00:39,890 --> 00:00:43,910
Reddit. You know, it's used by YouTube. Twitter,

14
00:00:43,910 --> 00:00:47,000
it is an essential piece of software when

15
00:00:47,000 --> 00:00:50,940
you're writing web applications. And in fact other than,

16
00:00:50,940 --> 00:00:54,470
than Linux itself memcache is probably the piece of software

17
00:00:54,470 --> 00:00:58,730
that's, most in common between every website online. It's, it's pretty

18
00:00:58,730 --> 00:01:02,710
astounding. It's very, very simple. And it's very, very effective

19
00:01:02,710 --> 00:01:05,860
at what it does. Okay. To draw a bigger version of

20
00:01:05,860 --> 00:01:07,920
that picture I did on the quiz, how memcached fits

21
00:01:07,920 --> 00:01:11,400
in, it looks something like this. Memcached is a process. Often

22
00:01:11,400 --> 00:01:13,290
you run it on its own machine. But you can also

23
00:01:13,290 --> 00:01:16,340
run it on the machines with your APP servers, and it's

24
00:01:16,340 --> 00:01:18,960
a very simple system. The algorithm doesn't change. A request

25
00:01:18,960 --> 00:01:23,490
comes in we check memcached. If a response is there, we

26
00:01:23,490 --> 00:01:25,540
send it back to the user. If it isn't there

27
00:01:25,540 --> 00:01:29,530
we check the database instead. And right to memcached, you know.

28
00:01:29,530 --> 00:01:32,500
As we've been doing, the algorithm should be pretty familiar

29
00:01:32,500 --> 00:01:34,760
to you by now. What's handy about it, is that all

30
00:01:34,760 --> 00:01:37,350
of these apps servers can interact with memcached. Memcached is

31
00:01:37,350 --> 00:01:41,460
fast enough and can support many, many sockets that it works

32
00:01:41,460 --> 00:01:45,122
very well in this scenario. Also most memcached libraries have built

33
00:01:45,122 --> 00:01:49,030
in towards this notion of having multiple memcached machines. Because memcached

34
00:01:49,030 --> 00:01:51,500
is just a key value store. Just, it's like basically a

35
00:01:51,500 --> 00:01:54,220
giant hash table. You can hash on the keys to decide which

36
00:01:54,220 --> 00:01:57,950
server to send your data to. And because it's a cache

37
00:01:57,950 --> 00:02:00,590
it's okay if you, you know, lose data from time to

38
00:02:00,590 --> 00:02:03,110
time because you'll just get it, you'll get the authoritative copy

39
00:02:03,110 --> 00:02:06,860
out of the database. And this distribution of keys over multiple servers

40
00:02:06,860 --> 00:02:09,190
is gnereally handled by the library. You know, sometimes you have to

41
00:02:09,190 --> 00:02:12,270
do it yourself. But most libraries and the Python library we'll be

42
00:02:12,270 --> 00:02:14,980
using, and this class this abstracts all of this for you so

43
00:02:14,980 --> 00:02:17,720
you don't have to deal with it. It's very common to actually

44
00:02:17,720 --> 00:02:20,860
run a little memcache server on each machine, and then have each

45
00:02:20,860 --> 00:02:24,640
app server you know, communicate to all the caches. You kind of get

46
00:02:24,640 --> 00:02:28,920
this big ball of this big ball of connections. But everything works

47
00:02:28,920 --> 00:02:31,970
out okay so. And mem cache is a very simple protocol and

48
00:02:31,970 --> 00:02:34,520
the operations it does are very simple. So, ultimately we're going to

49
00:02:34,520 --> 00:02:37,960
be storing you know keys to values. Where the keys and

50
00:02:37,960 --> 00:02:41,670
values are both strings. And the operations look something like this.

51
00:02:41,670 --> 00:02:45,520
We've got set and this takes a key and a value. And

52
00:02:45,520 --> 00:02:48,560
we've got get, this takes a key and returns a value.

53
00:02:48,560 --> 00:02:52,780
And we've got delete, which takes a key and deletes the key.

54
00:02:52,780 --> 00:02:54,490
There are other operations and there are actually a few other

55
00:02:54,490 --> 00:02:57,170
parameters here. But these are the basic ones, and you can see

56
00:02:57,170 --> 00:03:00,460
what these three main operations, set, get, and delete, we could

57
00:03:00,460 --> 00:03:04,300
actually implement all of the caching we've been doing in ASCIIchan

58
00:03:04,300 --> 00:03:06,580
in a system that will scale a lot better than having,

59
00:03:06,580 --> 00:03:09,720
you know, just a dictionary in our process. It also means

60
00:03:09,720 --> 00:03:12,090
that if, the advantage you get from using memcaches if our

61
00:03:12,090 --> 00:03:15,070
process restarts, we don't have an empty dictionary anymore, we have

62
00:03:15,070 --> 00:03:17,930
our memcached and, and our content lives on. So, what I'd

63
00:03:17,930 --> 00:03:21,390
like you to do first, is implement a fake version of memcached.
