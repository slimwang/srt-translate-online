1
00:00:00,570 --> 00:00:03,490
As I mentioned in a fully virtualized setting,

2
00:00:03,490 --> 00:00:06,520
the guest operating system has no idea about machine

3
00:00:06,520 --> 00:00:10,000
pages. It thinks that the physical page number

4
00:00:10,000 --> 00:00:13,280
that it is generating, is the real thing. But

5
00:00:13,280 --> 00:00:16,680
it is not. And therefore, there is two

6
00:00:16,680 --> 00:00:19,520
levels of indirection, one level of indirection going from

7
00:00:19,520 --> 00:00:23,320
virtual page to physical page, that's an illusion. Then

8
00:00:23,320 --> 00:00:26,470
the hypervisor has to take this physical page and

9
00:00:26,470 --> 00:00:29,840
using the shadow page table, convert it into

10
00:00:29,840 --> 00:00:32,800
the machine page. And as I said, the shadow

11
00:00:32,800 --> 00:00:35,280
page table may be the real hardware page

12
00:00:35,280 --> 00:00:37,960
table that the CPU uses as well. So this

13
00:00:37,960 --> 00:00:40,170
is the data structure that is maintained by

14
00:00:40,170 --> 00:00:44,030
the hypervisor to translate the PPN to MPN. So,

15
00:00:44,030 --> 00:00:47,630
how to make this efficient? Because on every memory

16
00:00:47,630 --> 00:00:52,100
access of a process of the guest operating system,

17
00:00:52,100 --> 00:00:54,260
the virtual address has to be converted to a

18
00:00:54,260 --> 00:00:57,170
machine address. So in other words, we want to

19
00:00:57,170 --> 00:01:00,520
avoid the one level of indirection that's happening because

20
00:01:00,520 --> 00:01:03,430
the virtual page number has to be converted to a

21
00:01:03,430 --> 00:01:07,010
physical page number. By the guest operating system and

22
00:01:07,010 --> 00:01:11,130
then it has to be looked up in the

23
00:01:11,130 --> 00:01:14,350
shadow table by the hypervisor to generate the machine

24
00:01:14,350 --> 00:01:17,510
page number. So, we would like to make this process

25
00:01:17,510 --> 00:01:20,130
more efficient because it's happening on every memory

26
00:01:20,130 --> 00:01:22,950
access by getting rid of one level of indirection

27
00:01:22,950 --> 00:01:26,010
that is, this translation by the guest operating system.

28
00:01:26,010 --> 00:01:29,150
Remember that, the guest operating system is the one

29
00:01:29,150 --> 00:01:31,760
that establishes this mapping in the first place

30
00:01:31,760 --> 00:01:34,720
between a virtual page number and a physical page

31
00:01:34,720 --> 00:01:38,930
number. By creating an entry in the page table

32
00:01:38,930 --> 00:01:42,650
for the process that is generating this virtual address

33
00:01:42,650 --> 00:01:45,230
in the first place. And updating the page

34
00:01:45,230 --> 00:01:48,970
table, is a privileged instruction. So, when the

35
00:01:48,970 --> 00:01:51,970
guest operating system tries to update the page

36
00:01:51,970 --> 00:01:55,230
table or what it thinks is the page

37
00:01:55,230 --> 00:01:58,389
table, it'll result in a trap. Any time

38
00:01:58,389 --> 00:02:01,869
the guest operating system tries to update this

39
00:02:01,869 --> 00:02:05,175
page table to establish a mapping between VPN

40
00:02:05,175 --> 00:02:07,872
and PPN, there'll be a trap and this

41
00:02:07,872 --> 00:02:10,747
trap is called by the hypervisor. And

42
00:02:10,747 --> 00:02:13,862
what the hypervisor is going to do is, it's

43
00:02:13,862 --> 00:02:18,223
basically going to say, oh this particular VPN corresponds

44
00:02:18,223 --> 00:02:20,982
to a specific entry in the shadow page

45
00:02:20,982 --> 00:02:27,102
table. So the update that guest OS is making to it's page table data structure,

46
00:02:27,102 --> 00:02:30,330
which it thinks is the real thing. It's

47
00:02:30,330 --> 00:02:33,780
not the real thing. The hypervisor is updating

48
00:02:33,780 --> 00:02:38,760
the same mapping by saying well, this particular VPN

49
00:02:38,760 --> 00:02:41,180
is going to this machine page number, that's the

50
00:02:41,180 --> 00:02:44,290
one that we're going to put as the entry here.

51
00:02:44,290 --> 00:02:46,290
So as a result, what we have done is,

52
00:02:46,290 --> 00:02:49,830
even though there is a solution, the real translations,

53
00:02:49,830 --> 00:02:52,870
that is a mapping between VPN and MPN, is

54
00:02:52,870 --> 00:02:55,330
remembered in the shadow page table. Which may be

55
00:02:55,330 --> 00:02:58,980
the hardware page table if the processor is using the

56
00:02:58,980 --> 00:03:03,980
page table for its address translation or it could be the TLB. In either case,

57
00:03:03,980 --> 00:03:10,700
the hypervisor is going to install the translation from VPN to MPN into the TLB

58
00:03:10,700 --> 00:03:14,230
and the hardware page table. So now

59
00:03:14,230 --> 00:03:18,960
we basically bypassed the guess operating system's page

60
00:03:18,960 --> 00:03:21,540
table in order to to the translation because

61
00:03:21,540 --> 00:03:24,490
every time a process generates a virtual address.

62
00:03:24,490 --> 00:03:26,130
We are not going through the guest operating

63
00:03:26,130 --> 00:03:29,020
system to do the translation, but so long as

64
00:03:29,020 --> 00:03:32,074
the translation has already been installed in the TLB

65
00:03:32,074 --> 00:03:36,030
and the hardware page table. The hypervisor without the

66
00:03:36,030 --> 00:03:38,930
intervention of the guest operating system can translate

67
00:03:38,930 --> 00:03:43,020
the virtual page number of a user level process

68
00:03:43,020 --> 00:03:45,971
running on top of the guest operating system. Lyrically

69
00:03:45,971 --> 00:03:50,660
to the machine based number. Using the TLB and

70
00:03:50,660 --> 00:03:52,310
the hardware page table. So this is

71
00:03:52,310 --> 00:03:56,170
a trick to make atis translation efficient because

72
00:03:56,170 --> 00:03:58,740
it's extremely crucial that on every memory

73
00:03:58,740 --> 00:04:01,280
access, we don't go through the guest top

74
00:04:01,280 --> 00:04:03,040
rating system to do the address translation,

75
00:04:03,040 --> 00:04:05,640
it's just not acceptable. And this is the

76
00:04:05,640 --> 00:04:10,340
trick that is used in VMware ESX server

77
00:04:10,340 --> 00:04:13,360
that is implemented on top of Intel hardware.
