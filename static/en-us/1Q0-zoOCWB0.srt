1
00:00:00,000 --> 00:00:05,000
A heap is a kind of data structure, a bunch of values that actually is a bunch of values

2
00:00:05,000 --> 00:00:10,000
arranged in a kind of a graph specifically it's a balanced binary tree

3
00:00:10,000 --> 00:00:16,000
and each of the nodes has a value in it and for the heap property to be satisfied

4
00:00:16,000 --> 00:00:23,000
the value in the node in every node in the tree has to be no bigger than the values in the children.

5
00:00:23,000 --> 00:00:28,000
Let me show you an example. Here's a balanced binary tree with 20 nodes.

6
00:00:28,000 --> 00:00:30,000
And I'm going to fill values in here that satisfy the heap property.

7
00:00:30,000 --> 00:00:38,000
And now I filled in the nodes of the tree with values in a way that satisfies the heap property.

8
00:00:38,000 --> 00:00:40,000
And so this is an interesting property.

9
00:00:40,000 --> 00:00:45,000
If you read left to right and top to bottom--13, 24, 21, 30, 29, 27--

10
00:00:45,000 --> 00:00:49,000
It's not really sorted. Alright. The numbers kind of go up and down.

11
00:00:49,000 --> 00:00:52,000
The last number reading across is 41.

12
00:00:52,000 --> 00:00:59,000
But if you read down past, there's all sorted list. 13, 24, 30, 58, 74.

13
00:00:59,000 --> 00:01:04,000
13, 21, 27, 43, and that's because as we're going down the tree

14
00:01:04,000 --> 00:01:07,000
the parent value is never bigger than the value of the child.

15
00:01:07,000 --> 00:01:12,000
That's the heap property so what that causes is that as we traverse down the tree

16
00:01:12,000 --> 00:01:14,000
we're always traversing down the sorted list.

17
00:01:14,000 --> 00:01:17,000
Because of the properties of the way that heaps are defined,

18
00:01:17,000 --> 00:01:20,000
they have some higher level properties that are going to turn out to be really important

19
00:01:20,000 --> 00:01:24,000
when they're used in algorithms.

20
00:01:24,000 --> 00:01:29,000
The way that we created nodes here is we filled them in left to right and top to bottom

21
00:01:29,000 --> 00:01:32,000
until we run out of nodes and given that that's how we do it

22
00:01:32,000 --> 00:01:39,000
what is the height from the root of the tree, the tippy top, down to the deepest leaf?

23
00:01:39,000 --> 00:01:46,000
How long is the longest pass in this heap? Is their constant depth? Square root depth?

24
00:01:46,000 --> 00:01:50,000
Logarithmic depth? Or as bad as linear depth?
