1
00:00:00,080 --> 00:00:00,720
All right.

2
00:00:00,720 --> 00:00:05,280
Now it's time to try coding the Gaussian
elimination algorithm ourselves.

3
00:00:05,280 --> 00:00:07,470
To start us off,
I've written the template for

4
00:00:07,470 --> 00:00:11,730
a python module that represents
a system of linear equations.

5
00:00:11,730 --> 00:00:13,860
I'll give a brief overview of it here.

6
00:00:13,860 --> 00:00:17,780
It is also available for download in the
downloadable section in this segment and

7
00:00:17,780 --> 00:00:19,260
the rest of the lesson.

8
00:00:19,260 --> 00:00:22,190
We can initialize a new
linear system object

9
00:00:22,190 --> 00:00:25,010
by providing a list of plain objects.

10
00:00:25,010 --> 00:00:29,120
The initializer make sure all of our
planes live in the same dimension.

11
00:00:29,120 --> 00:00:32,340
So we can't mix planes living
in three-dimensional space

12
00:00:32,340 --> 00:00:36,020
with objects such as lines
living in two-dimensional space.

13
00:00:36,020 --> 00:00:38,930
There are currently
three empty functions.

14
00:00:38,930 --> 00:00:44,830
Swap rows, multiply coefficient and
row, and add multiple times row to row.

15
00:00:44,830 --> 00:00:48,074
These will be the focus of the first
stage of building the Gaussian

16
00:00:48,074 --> 00:00:49,610
elimination algorithm.

17
00:00:49,610 --> 00:00:53,100
There's also a function which
obtains which term of each equation

18
00:00:53,100 --> 00:00:54,900
is the first non-zero term.

19
00:00:54,900 --> 00:00:58,570
This will be useful for finding
the pivot variables in each equation.

20
00:00:58,570 --> 00:01:01,920
Note that the terms are zero
index instead of one indexed.

21
00:01:01,920 --> 00:01:03,550
Though we shouldn't need
to worry about that.

22
00:01:03,550 --> 00:01:07,120
Since we won't be directly manipulating
the indices of the lists that make up

23
00:01:07,120 --> 00:01:08,240
the system.

24
00:01:08,240 --> 00:01:11,510
We also have some utility
functions available to us.

25
00:01:11,510 --> 00:01:15,294
The LEN function returns how
many planes are in the system.

26
00:01:15,294 --> 00:01:17,780
In other words,
how many equations are in the system.

27
00:01:17,780 --> 00:01:21,560
We can also use subscript notation
to access a particular plane, or

28
00:01:21,560 --> 00:01:23,020
equation in the system.

29
00:01:23,020 --> 00:01:26,380
As demonstrated in the example
code at the bottom of the module.

30
00:01:26,380 --> 00:01:29,120
There's also an str
method that lets us print

31
00:01:29,120 --> 00:01:31,480
a pretty version of
the system of equations.

32
00:01:31,480 --> 00:01:35,340
Finally, in the module I've included
a simple extension of the decimal class.

33
00:01:35,340 --> 00:01:38,570
It gives us the ability to quickly
check whether a decimal object

34
00:01:38,570 --> 00:01:40,770
is within a given tolerance to zero.

35
00:01:40,770 --> 00:01:44,470
In this case, the default
tolerance is ten to the minus ten.

36
00:01:44,470 --> 00:01:47,750
If you execute the test code given
at the bottom of the module.

37
00:01:47,750 --> 00:01:51,060
You can see the output of these
functions on an example system.

38
00:01:51,060 --> 00:01:54,310
Feel free to take some time to
play around with this example.

39
00:01:54,310 --> 00:01:57,500
For instance, by changing
the coefficients to get a feel for

40
00:01:57,500 --> 00:01:59,700
the functionality of
the linear system class.
