1
00:00:00,100 --> 00:00:02,700
All right, so now we're going to figure
out how many samples we need, and

2
00:00:02,700 --> 00:00:06,330
in particular we want to be epsilon
over 2 accurate in our estimate.

3
00:00:06,330 --> 00:00:11,690
And we want to be 1 minus delta over k
certain that our estimate is correct.

4
00:00:11,690 --> 00:00:12,330
And so just so

5
00:00:12,330 --> 00:00:17,020
substituting those values into the
hoeffding bound that we had before gives

6
00:00:17,020 --> 00:00:23,440
us one half times natural log of 2k
over delta, the search parameter.

7
00:00:23,440 --> 00:00:26,440
Divided by square root of c,
the number of times we do the sample

8
00:00:26,440 --> 00:00:28,910
is going to be less than or
equal to epsilon over 2.

9
00:00:28,910 --> 00:00:30,230
So now we just have to solve for c.

10
00:00:30,230 --> 00:00:32,270
>> Okay,
that seems pretty straight forward.

11
00:00:32,270 --> 00:00:35,705
>> All right, so
substituting these constraints.

12
00:00:35,705 --> 00:00:38,185
Epsilon over 2 and
the 1 minus delta over k

13
00:00:38,185 --> 00:00:41,745
into our hufting bound from before gives
us something that looks like this.

14
00:00:41,745 --> 00:00:45,845
The square of one half, natural log
of 2k over delta in the numerator,

15
00:00:45,845 --> 00:00:48,585
squared of the number of samples,
c, in the denominator.

16
00:00:48,585 --> 00:00:51,317
And that gives us an estimate
that's within epsilon over 2.

17
00:00:51,317 --> 00:00:54,057
So now we should be good to go.

18
00:00:54,057 --> 00:00:57,037
All we need to know is how
big does c have to be.

19
00:00:57,037 --> 00:00:58,507
So we just have to solve for c.

20
00:00:58,507 --> 00:01:00,797
>> Right, so we do some algebra and

21
00:01:00,797 --> 00:01:02,607
some other algebra and
the very thing happens.
