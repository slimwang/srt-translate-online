1
00:00:00,700 --> 00:00:04,770
In our next algorithm, we want to find the largest element in an array list.

2
00:00:04,770 --> 00:00:08,770
Again, let's look at the example of our pictures. We might want to know the

3
00:00:08,770 --> 00:00:13,074
largest one, to know how much vertical space we need on the wall. Or maybe we

4
00:00:13,074 --> 00:00:16,546
want to center them all with respect to the largest one, then we need to know

5
00:00:16,546 --> 00:00:21,960
the largest one first. In this algorithm, we start assuming. That, the first

6
00:00:21,960 --> 00:00:26,949
element, or rather the element at index 0, is the largest one. Then we look at

7
00:00:26,949 --> 00:00:30,792
all other elements, and if an element is larger, by some measure, than the

8
00:00:30,792 --> 00:00:34,824
largest element, then we change our mind, and now say the largest element, is

9
00:00:34,824 --> 00:00:40,847
the one that we've just seen. So in this example, for example, we would start

10
00:00:40,847 --> 00:00:45,530
off by saying, oh, the first one that we've seen, that's the tallest picture.

11
00:00:45,530 --> 00:00:48,602
Then we move onto the next one, and say that one is taller so I'm changing my

12
00:00:48,602 --> 00:00:52,623
mind, and now this one is now the tallest. this one is even a bit taller, so

13
00:00:52,623 --> 00:00:56,477
that one must be the tallest. Now this one here is not as tall so we no longer

14
00:00:56,477 --> 00:01:00,590
change our mind. And the last one that was considered to be the tallest is in

15
00:01:00,590 --> 00:01:05,465
fact, the one. Just like we've done before, I now leave it to you to implement

16
00:01:05,465 --> 00:01:09,235
this code in Java, and this time I want you to actually draw the tallest

17
00:01:09,235 --> 00:01:12,319
picture. Go ahead.
