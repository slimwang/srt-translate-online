1
00:00:00,000 --> 00:00:02,713
So this is an example of a really key principle in parallel programming

2
00:00:02,713 --> 00:00:05,885
and, indeed, in all of computer science.

3
00:00:05,885 --> 00:00:08,393
We call that principle Amdahl's law.

4
00:00:08,393 --> 00:00:11,968
The total speedup you get is limited by the portion of the time you spend

5
00:00:11,968 --> 00:00:14,428
doing something that can be parallelized.

6
00:00:14,428 --> 00:00:17,572
In the limit of enough parallelism, doing a good enough job with parallelism,

7
00:00:17,572 --> 00:00:22,133
having a parallel enough machine, your maximum speedup goes to 1/1/P,

8
00:00:22,133 --> 00:00:26,069
where P is defined as the percentage or portion of parallelizable time--

9
00:00:26,069 --> 00:00:28,708
time spent on this parallelizable activity.

10
00:00:28,708 --> 00:00:31,709
So it's really important that you know these limits.

11
00:00:31,709 --> 00:00:35,681
So, for example, if your application spends 50% of its time on I/O,

12
00:00:35,681 --> 00:00:40,753
reading and writing to the disk, that implies that you can't possibly do better than a 2x speedup,

13
00:00:40,753 --> 00:00:44,621
unless, that is, you can come up with a way to refactor the computation.

14
00:00:44,621 --> 00:00:47,939
For example, maybe you can read and write larger batches of data at once

15
00:00:47,939 --> 00:00:50,778
so that the GPU has more work to do on a single batch.

16
00:00:50,778 --> 00:00:54,921
And I want to say this situation comes up pretty often in practice, right?

17
00:00:54,921 --> 00:00:58,422
GPUs are so fast that often porting the hotspot to CUDA

18
00:00:58,422 --> 00:01:01,860
makes that hotspot so much faster that it's no longer the bottleneck.

19
00:01:01,860 --> 00:01:06,911
And that's why I made the point earlier that if you have a bunch of functions,

20
00:01:06,911 --> 00:01:10,815
you might need to do more than port a single hotspot to the GPU.

21
00:01:10,815 --> 00:01:14,072
You might find that after you've ported that first hotspot to the GPU,

22
00:01:14,072 --> 00:01:18,496
it's gotten so much faster that now you need to focus somewhere else.

23
00:01:18,496 --> 00:01:21,029
And remember, once you've crossed this point,

24
00:01:21,029 --> 00:01:24,229
there's little point in continuing to optimize this.

25
00:01:24,229 --> 00:01:27,398
The total time on your application is not going to go down very much

26
00:01:27,398 --> 00:01:29,731
if you continue to work on this hotspot.

27
00:01:29,731 --> 00:01:32,003
You need to shift your attention to the new bottlenecks.
