1
00:00:00,000 --> 00:00:04,000
So, here's how delta debugging works: first, we split the input

2
00:00:04,014 --> 00:00:09,938
into n subsets where initially n has a value of 2. Second, if removing

3
00:00:09,938 --> 00:00:14,000
any of these subsets fails, proceed with this very subset.

4
00:00:14,000 --> 00:00:16,000
This is what we have for our input.

5
00:00:16,000 --> 00:00:19,000
We split the input into initially two subsets,

6
00:00:19,000 --> 00:00:25,000
and if any of these subsets fails, as in here, we proceed with this very subset,

7
00:00:25,000 --> 00:00:28,000
otherwise, we simply go and increase the granularity,

8
00:00:28,000 --> 00:00:31,000
that is, we double the number of subsets

9
00:00:31,000 --> 00:00:33,000
and we go again to step one.

10
00:00:33,000 --> 00:00:36,000
Let's try this out on our input over here.

11
00:00:36,000 --> 00:00:41,000
So, at this point we already tried out removing the second half of the input

12
00:00:41,000 --> 00:00:44,000
and removing the first half of the input.

13
00:00:44,000 --> 00:00:47,000
Neither removal of these subsets would fail,

14
00:00:47,000 --> 00:00:54,000
so now we have to increase the granularity by coming up with now four subsets.

15
00:00:54,000 --> 00:00:56,000
This is a 10-character input,

16
00:00:56,000 --> 00:00:59,000
so each of our subsets will have between two and three characters.

17
00:00:59,000 --> 00:01:03,000
For a change, let's try removing the first two characters.

18
00:01:03,000 --> 00:01:06,000
Well, no select tag, no failure.

19
00:01:06,000 --> 00:01:08,000
We put them back and remove the three characters.

20
00:01:08,000 --> 00:01:13,000
Still no failure, which gets us an "s ct" tag. No failure.

21
00:01:13,000 --> 00:01:18,000
Now, again we remove the next three characters--ct and the greater tag.

22
00:01:18,000 --> 00:01:20,000
No select tag, no failure.

23
00:01:20,000 --> 00:01:22,000
Now we remove the last two characters.

24
00:01:22,000 --> 00:01:25,000
At this point, we have the select tag by itself,

25
00:01:25,000 --> 00:01:28,000
and again we have a failure.

26
00:01:28,000 --> 00:01:30,000
What should we do in this case?

27
00:01:30,000 --> 00:01:34,000
Should we now go and start again with two subsets,

28
00:01:34,000 --> 00:01:35,646
that is, setting n to 2

29
00:01:35,646 --> 00:01:39,000
or should we go and set n to the number of subsets we had before

30
00:01:39,000 --> 00:01:42,000
minus 1 because there's 1 less?

31
00:01:42,000 --> 00:01:47,000
Experiments show that it's best to stick with a granularity you once have achieved,

32
00:01:47,000 --> 00:01:52,000
because then you won't have to track back through all the levels of granularity you already have seen.

33
00:01:52,000 --> 00:01:57,000
So, we set n to n-1, which means that in our case we would have three subsets.

34
00:01:57,000 --> 00:02:00,000
However, we don't want n to be come less than 2,

35
00:02:00,000 --> 00:02:03,000
because otherwise we'd just have one subset.

36
00:02:03,000 --> 00:02:10,000
So, we set n to the maximum of n -1 and 2 such that n can never fall below 2.

37
00:02:10,000 --> 00:02:14,000
So, at this point, our input is just the select tag.

38
00:02:14,000 --> 00:02:19,000
It fails, and the number of subsets is 3.

39
00:02:19,000 --> 00:02:22,000
What is it that delta debugging would do next

40
00:02:22,000 --> 00:02:25,000
according to this description of the algorithm?

41
00:02:25,000 --> 00:02:29,000
And what is the next test that delta debugging has to conduct?

42
00:02:29,000 --> 00:02:32,000
Is this the select tag as a whole?

43
00:02:32,000 --> 00:02:35,000
Is this the select tag with the second half removed?

44
00:02:35,000 --> 00:02:39,000
Is this the select tag with the first 3rd removed?

45
00:02:39,000 --> 00:02:45,602
Or is this just ct> that is the last 3rd of the input? Over to you.
