1
00:00:00,150 --> 00:00:05,080
One of the consequences of Moore's Law and the performance improvements that

2
00:00:05,080 --> 00:00:09,600
we expect to follow is the so-called memory wall. Here's why we have it.

3
00:00:09,600 --> 00:00:14,870
The processor speed in terms of instructions per second we have already said is,

4
00:00:14,870 --> 00:00:19,640
can be expected to roughly double every, let's say two years. Memory capacity,

5
00:00:19,640 --> 00:00:23,480
which is how many gigabytes of memory can we have in the same size module,

6
00:00:24,560 --> 00:00:27,750
is also doubling every two years. But

7
00:00:27,750 --> 00:00:33,180
memory latency, that is how long does it take to do a memory operation,

8
00:00:33,180 --> 00:00:39,030
has only been improving about 1.1 times every two years.

9
00:00:39,030 --> 00:00:44,330
So over time, as years go by, if we plot the speed of processors and

10
00:00:44,330 --> 00:00:49,630
memory, we get something like this, an exponential curve for the processors.

11
00:00:49,630 --> 00:00:55,090
And we get another exponential curve, but that grows a lot slower, for

12
00:00:55,090 --> 00:00:59,800
memories. This here is the gap between processor performance and

13
00:00:59,800 --> 00:01:04,319
memory performance at some time and then several years later,

14
00:01:04,319 --> 00:01:10,630
we have a much wider gap. This problem is often called the memory wall.

15
00:01:10,630 --> 00:01:15,919
Basically, our processors are getting a lot faster than memories are, yet

16
00:01:15,919 --> 00:01:20,047
they have to access memory every so many instructions. And

17
00:01:20,047 --> 00:01:25,325
because this difference in speed has been growing very quickly over many years,

18
00:01:25,325 --> 00:01:30,005
we have been using caches as a sort of stairs for the memory wall. So

19
00:01:30,005 --> 00:01:33,862
our processors now are accessing caches, which are fast, and

20
00:01:33,862 --> 00:01:38,665
only those rare accesses that's missing the cache will end up going to the slow

21
00:01:38,665 --> 00:01:43,500
main memory. We will spend several lessons talking about how to do caches and so

22
00:01:43,500 --> 00:01:47,722
on, but this is just one of the trends that we have to worry about when we

23
00:01:47,722 --> 00:01:52,497
design processors, is that they do get faster. But if the memory doesn't get

24
00:01:52,497 --> 00:01:57,373
faster as quickly as they do, we have to continuously keep improving our caches

25
00:01:57,373 --> 00:02:02,210
just to allow the processors to not suffer from the much, much slower memory.
