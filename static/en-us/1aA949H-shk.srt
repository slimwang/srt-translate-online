1
00:00:00,430 --> 00:00:04,180
All right, enough theory,
I want to see some command line action.

2
00:00:04,180 --> 00:00:06,100
Not so fast, you might say.

3
00:00:06,100 --> 00:00:07,970
Don't we have to install Gradle first?

4
00:00:07,970 --> 00:00:09,010
Not at all.

5
00:00:09,010 --> 00:00:12,290
Gradle's first trick is that it
knows how to install itself.

6
00:00:12,290 --> 00:00:14,120
All it needs is a shell script, and

7
00:00:14,120 --> 00:00:17,510
a tiny jar that knows just enough
to download and install Gradle.

8
00:00:17,510 --> 00:00:20,530
I have in this directory,
a copy of the Gradle wrapper.

9
00:00:20,530 --> 00:00:23,020
Gradle wrapper consists
of just a shell script,

10
00:00:23,020 --> 00:00:27,100
we've got one for a Mac and
Linux and we've got one for

11
00:00:27,100 --> 00:00:30,790
Windows, and then inside the Gradle
directory you have a tiny jar.

12
00:00:30,790 --> 00:00:35,100
The way the Gradle wrapper works is
you call it with a Gradle command,

13
00:00:35,100 --> 00:00:37,130
it'll check to see if
Gradle is installed.

14
00:00:37,130 --> 00:00:39,210
If it is it'll just
pass along a command,

15
00:00:39,210 --> 00:00:43,130
if it isn't the Gradle wrapper will go
ahead and download Gradle for you first.

16
00:00:43,130 --> 00:00:46,300
Let's go ahead and run the Gradle
Shell Script and see what happens.

17
00:00:46,300 --> 00:00:49,360
We didn't already have Gradle
installed so now it's downloading it.

18
00:00:49,360 --> 00:00:51,010
You see a lot of dots.

19
00:00:51,010 --> 00:00:52,270
Even more dots.

20
00:00:52,270 --> 00:00:53,680
All right.
There we go.

21
00:00:53,680 --> 00:00:54,720
Gradle's been downloaded.

22
00:00:54,720 --> 00:00:55,370
Welcome to Gradle 2.3.

23
00:00:55,370 --> 00:00:58,850
Hm, it looks like Gradle
decided we need some help.

24
00:00:58,850 --> 00:01:02,210
This option to see a list of
all available tasks looks good.

25
00:01:02,210 --> 00:01:03,790
Let's try running this.

26
00:01:03,790 --> 00:01:08,480
So let's try running the tasks
command using the Gradle wrapper.

27
00:01:08,480 --> 00:01:11,880
Whoa, that's a whole lot of tasks
that Gradle already knows about.

28
00:01:11,880 --> 00:01:14,550
And as we scan through
all of these tasks,

29
00:01:14,550 --> 00:01:17,110
looks like there's a task
that's calling out to us.

30
00:01:17,110 --> 00:01:18,820
Let's give this one a try.

31
00:01:18,820 --> 00:01:22,300
Now let's use the Gradle
wrapper to run the hello task.

32
00:01:22,300 --> 00:01:25,190
Along with some diagnostic output,
we get a nice greeting.

33
00:01:25,190 --> 00:01:25,690
How sweet.

34
00:01:26,880 --> 00:01:29,770
Gradle has to do a significant
amount of work to start up.

35
00:01:29,770 --> 00:01:33,350
Mainly because it's required to spin up
an instance of the Java virtual machine.

36
00:01:33,350 --> 00:01:37,240
This startup time can be mitigated by
using the Gradle Demon, a demon is just

37
00:01:37,240 --> 00:01:39,760
a process that hangs around in
the background of your operating system,

38
00:01:39,760 --> 00:01:40,680
doing something useful.

39
00:01:42,440 --> 00:01:46,250
When Gradle's instructed to use a demon,
a demon process has started, and

40
00:01:46,250 --> 00:01:50,080
continuously runs in the background,
keeping the JBM instance alive, so

41
00:01:50,080 --> 00:01:53,170
that subsequent Gradle runs
can use the same instance.

42
00:01:53,170 --> 00:01:57,270
By default, Android Studio always uses
this as Gradle demon, when running

43
00:01:57,270 --> 00:02:00,990
Gradle from the command line however
you'll have to explicitly enable it.

44
00:02:00,990 --> 00:02:03,996
Simply put you should always
use a demon when possible.

45
00:02:03,996 --> 00:02:07,440
By using the demon you can take
advantage of huge performance benefits

46
00:02:07,440 --> 00:02:09,860
that are planned to get even better
in future versions of Gradle.
