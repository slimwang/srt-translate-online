1
00:00:00,500 --> 00:00:03,940
So, are you familiar with the closure?

2
00:00:03,940 --> 00:00:05,010
>> Yes.
>> All right, so,

3
00:00:05,010 --> 00:00:08,400
explain to me what a closure is,
and when would you use one?

4
00:00:08,400 --> 00:00:09,710
What are the advantages?

5
00:00:09,710 --> 00:00:11,700
>> Yeah, so basically.

6
00:00:11,700 --> 00:00:12,280
Can I erase this?

7
00:00:12,280 --> 00:00:12,910
>> Yeah, go ahead.

8
00:00:12,910 --> 00:00:13,410
>> Yeah.

9
00:00:25,960 --> 00:00:29,921
It goes back to the whole
theory of pointers.

10
00:00:29,921 --> 00:00:30,612
>> Okay.

11
00:00:30,612 --> 00:00:33,321
>> And point of references because
whenever we create a variable,

12
00:00:33,321 --> 00:00:34,030
like say, var.

13
00:00:35,880 --> 00:00:38,323
I'll create your variable, mike, right?

14
00:00:38,323 --> 00:00:38,958
>> All right.

15
00:00:38,958 --> 00:00:41,670
>> var mike = 8.

16
00:00:43,850 --> 00:00:48,020
mike is actually a reference to 8,
somewhere in our memory.

17
00:00:48,020 --> 00:00:51,210
So what mike is is actually
a point of reference,

18
00:00:51,210 --> 00:00:54,570
it's some sort of memory, like some
sort of like number that points to

19
00:00:55,770 --> 00:00:58,950
this actual 8 in this memory space.

20
00:00:58,950 --> 00:01:02,865
So whenever I, say,

21
00:01:02,865 --> 00:01:09,180
create an array, so var array =.

22
00:01:10,420 --> 00:01:11,560
And I want mike inside, right?

23
00:01:13,270 --> 00:01:15,376
This actually holds
a point of reference to 8.

24
00:01:15,376 --> 00:01:19,001
>> Mm-hm.

25
00:01:19,001 --> 00:01:21,670
>> And okay, what's so wrong about that?

26
00:01:25,350 --> 00:01:29,350
If this pointer actually starts
pointing to a different number,

27
00:01:29,350 --> 00:01:32,130
let's say if I'm looping.

28
00:01:32,130 --> 00:01:34,000
If I'm creating some sort of,

29
00:01:35,670 --> 00:01:39,310
I'm training anonymous functions,
and I want to loop through them.

30
00:01:39,310 --> 00:01:43,580
And I want to create anonymous functions
that will hold a certain variable.

31
00:01:43,580 --> 00:01:47,690
>> Okay.
>> Let's say, oops, let's say this.

32
00:01:47,690 --> 00:01:51,710
For (i=0,

33
00:01:51,710 --> 00:01:57,740
i<10, i++).

34
00:02:00,930 --> 00:02:03,700
Let's say,
let's declare this array, right?

35
00:02:06,110 --> 00:02:10,336
So i is my variable, and
i is similar to mike here,

36
00:02:10,336 --> 00:02:14,170
because like i will point
to some number in space.

37
00:02:14,170 --> 00:02:17,841
And then if I want to say,
I want to create an array that,

38
00:02:21,228 --> 00:02:23,906
Creates anonymous functions,

39
00:02:23,906 --> 00:02:29,468
I want to create a new function that
we'll say that will cause a log.

40
00:02:31,004 --> 00:02:34,880
Some sort, something very simple, i.

41
00:02:45,180 --> 00:02:50,630
What this does is that once I,
say, I create 10.

42
00:02:50,630 --> 00:02:55,466
So once I do array, (0),

43
00:02:55,466 --> 00:03:00,976
I call this an array,
say, all the way to 9,

44
00:03:00,976 --> 00:03:04,456
the number 9, I call this,

45
00:03:04,456 --> 00:03:08,665
they're all going to equal 10.

46
00:03:08,665 --> 00:03:15,411
So basically, Like at the end of my for

47
00:03:15,411 --> 00:03:20,150
loop here, the i will all point to 10.

48
00:03:21,220 --> 00:03:25,390
And since I have this function
here that references i,

49
00:03:25,390 --> 00:03:28,170
it just contains like a reference.

50
00:03:28,170 --> 00:03:32,470
And if I do this, counts of log will
all equal 10, which I don't want.

51
00:03:32,470 --> 00:03:37,444
What I want is like for
every number, I want, say,

52
00:03:37,444 --> 00:03:41,350
array 0, it will cause a log to 0.

53
00:03:41,350 --> 00:03:43,490
And then array 9, it will cause a log 9.

54
00:03:45,150 --> 00:03:49,839
So I need to create a closure, so
basically, whenever you pass a verbal

55
00:03:49,839 --> 00:03:54,384
inside a function, it creates a closure,
it closes that variable.

56
00:03:54,384 --> 00:03:56,623
So basically in a nutshell,

57
00:04:00,167 --> 00:04:06,267
Function, say, my-func,

58
00:04:06,267 --> 00:04:11,396
say some numbers, num.

59
00:04:14,771 --> 00:04:18,630
As soon as I do this in JavaScript,
this creates a closure.

60
00:04:18,630 --> 00:04:23,475
It actually copies
whatever I'm passing in,

61
00:04:23,475 --> 00:04:28,870
and it creates a new variable,
a new value.

62
00:04:28,870 --> 00:04:29,980
That stores it into memory.

63
00:04:29,980 --> 00:04:34,444
It creates its own space,
it's scoped inside there, so

64
00:04:34,444 --> 00:04:38,443
I could really then do
whatever I want with number,

65
00:04:38,443 --> 00:04:43,226
do whatever, With number.

66
00:04:47,170 --> 00:04:52,780
And not have to worry about this
number changing in the future,

67
00:04:52,780 --> 00:04:55,320
because I'm referencing this number.

68
00:04:55,320 --> 00:04:59,070
because otherwise, if I do something
like this, I'm referencing,

69
00:04:59,070 --> 00:05:02,140
I'm not creating a closure,
I'm just referencing i here.

70
00:05:02,140 --> 00:05:04,280
i will change in the future.

71
00:05:04,280 --> 00:05:05,120
And it gives me.

72
00:05:06,440 --> 00:05:09,950
And that's why it's very important,
so if I'm creating

73
00:05:09,950 --> 00:05:15,280
any sort of anonymous functions that
I want to pass in variables to it,

74
00:05:15,280 --> 00:05:19,030
I need to make sure that
like my variable reference.

75
00:05:21,000 --> 00:05:24,821
I'm actually getting the value and

76
00:05:24,821 --> 00:05:29,667
not just getting
the reference to the value.

77
00:05:29,667 --> 00:05:30,602
>> Okay.

78
00:05:30,602 --> 00:05:35,744
>> So that's that's why closures
are important when we're like ever

79
00:05:35,744 --> 00:05:42,040
creating because in JavaScript we
always create new anonymous functions.

80
00:05:42,040 --> 00:05:46,044
Whenever we try to do Ajax requests or

81
00:05:46,044 --> 00:05:50,185
anything like that sort of scenario.

82
00:05:50,185 --> 00:05:55,880
>> Okay.

83
00:05:55,880 --> 00:05:56,499
Let's see,

84
00:05:56,499 --> 00:06:00,170
so let me just make sure I'm kind of
understanding where you're going here.

85
00:06:00,170 --> 00:06:01,140
>> Yeah.

86
00:06:01,140 --> 00:06:07,053
>> So let's say, I have, excuse me.

87
00:06:15,782 --> 00:06:17,260
We have a function called rate.

88
00:06:17,260 --> 00:06:18,010
>> Yeah.

89
00:06:18,010 --> 00:06:21,510
>> And so we're going to write
a rate limiting function.

90
00:06:21,510 --> 00:06:26,670
The purpose of this function
will be to always return

91
00:06:26,670 --> 00:06:31,305
a function that's safe to call based off
of some rate limiting API, let's say.

92
00:06:31,305 --> 00:06:31,810
>> Okay.

93
00:06:31,810 --> 00:06:35,615
>> We can only call this API
a certain number of times per minute.

94
00:06:35,615 --> 00:06:36,182
>> Okay.
>> And

95
00:06:36,182 --> 00:06:41,950
we want to make sure that we're always
returning a safe to call function.

96
00:06:41,950 --> 00:06:48,529
So we'll just say time = 0, return.

97
00:06:54,886 --> 00:06:58,296
And then here, we'll have logic,

98
00:07:04,875 --> 00:07:05,662
Call.

99
00:07:05,662 --> 00:07:07,059
>> Okay.

100
00:07:07,059 --> 00:07:16,600
>> And let's just say it, Okay.

101
00:07:16,600 --> 00:07:17,170
>> Okay.

102
00:07:17,170 --> 00:07:20,284
>> So every time this function's called,

103
00:07:20,284 --> 00:07:24,650
we will increase by 50,
this variable, right?

104
00:07:24,650 --> 00:07:25,790
>> Okay, so that's a plus equal?

105
00:07:25,790 --> 00:07:28,240
>> Yeah, sorry, plus equal 50.

106
00:07:28,240 --> 00:07:32,477
So if I were to,
let's say, so now our var

107
00:07:32,477 --> 00:07:38,870
limiter equals rate.

108
00:07:38,870 --> 00:07:41,850
So now limiter is a function.

109
00:07:41,850 --> 00:07:42,390
>> Okay.

110
00:07:42,390 --> 00:07:43,702
>> So if I recall.

111
00:07:52,960 --> 00:07:56,680
If I were to call limiter twice,
what would the output of each of these,

112
00:07:56,680 --> 00:07:59,180
let's say there's a console log.

113
00:08:05,770 --> 00:08:06,410
Right, in there.

114
00:08:07,590 --> 00:08:11,678
Run me through what's occurring
on these three lines, and

115
00:08:11,678 --> 00:08:13,485
what the output would be.

116
00:08:13,485 --> 00:08:14,461
>> Right.

117
00:08:17,394 --> 00:08:19,300
So basically, you're calling rate.

118
00:08:19,300 --> 00:08:20,585
And rate will return this function.

119
00:08:20,585 --> 00:08:21,590
>> Mm-hm.

120
00:08:21,590 --> 00:08:24,170
>> So it's just a function
that will reference time.

121
00:08:24,170 --> 00:08:25,920
And what is time?

122
00:08:25,920 --> 00:08:28,140
It's referencing time
in this scope here.

123
00:08:28,140 --> 00:08:29,197
>> Okay.

124
00:08:29,197 --> 00:08:33,890
>> So right here, var, it's still
a local scope within the right scope.

125
00:08:33,890 --> 00:08:38,020
So basically,
all anonymous functions that's created

126
00:08:38,020 --> 00:08:41,727
will share the same variable,
the time variable.

127
00:08:41,727 --> 00:08:42,500
>> Okay.

128
00:08:42,500 --> 00:08:47,055
>> So if a different function accesses,
changes time,

129
00:08:47,055 --> 00:08:50,450
then this will change as well.

130
00:08:50,450 --> 00:08:52,680
So basically, I call this.

131
00:08:52,680 --> 00:08:54,460
Okay, I assign a function.

132
00:08:54,460 --> 00:08:55,690
This has not been called yet.

133
00:08:55,690 --> 00:08:56,860
So, time is still 0.

134
00:08:56,860 --> 00:09:03,270
So, I'll say time is still 0,
Once I do this.

135
00:09:04,540 --> 00:09:05,430
Now, I call this.

136
00:09:07,340 --> 00:09:09,920
Time equals 50 now.

137
00:09:12,660 --> 00:09:20,978
Once I call this,
Time is actually going to equal 100.

138
00:09:20,978 --> 00:09:26,140
>> Okay, so when you were talking
about this line right here.

139
00:09:26,140 --> 00:09:26,790
>> Yeah.

140
00:09:26,790 --> 00:09:31,710
>> Is this line changing the value
of a global variable called time, or

141
00:09:31,710 --> 00:09:34,040
is it changing this variable time?

142
00:09:34,040 --> 00:09:35,831
>> It's changing this variable.

143
00:09:35,831 --> 00:09:36,762
>> Okay, cool.

144
00:09:36,762 --> 00:09:38,190
>> Yeah.

145
00:09:38,190 --> 00:09:41,058
>> So what is, kind of getting
away from this example but

146
00:09:41,058 --> 00:09:43,049
talking about closures in general.

147
00:09:43,049 --> 00:09:43,690
>> Yeah.

148
00:09:43,690 --> 00:09:47,262
>> So we can say that a closure is
a way of maintaining state, correct?

149
00:09:47,262 --> 00:09:49,000
>> Okay.

150
00:09:49,000 --> 00:09:52,850
>> What is the downfall of
maintaining that state like this?

151
00:09:52,850 --> 00:09:54,792
>> Maintaining in this code, right?

152
00:09:54,792 --> 00:09:55,539
>> Any closure,

153
00:09:55,539 --> 00:09:59,660
[CROSSTALK] a potential downfall of a
closure if you're not careful with them.

154
00:10:03,070 --> 00:10:06,396
>> You have a ton of different variables
that you need to keep track of.

155
00:10:06,396 --> 00:10:11,526
And if that one variable, time,
which is that one time that you want to

156
00:10:11,526 --> 00:10:16,590
keep track, I know it's not global,
that's like your main time.

157
00:10:16,590 --> 00:10:21,962
But if you do a closure here,
you have like each time you run it,

158
00:10:21,962 --> 00:10:25,690
you're going to create
new time variables.

159
00:10:25,690 --> 00:10:28,378
And it's hard for you to keep
track of what's the main time.

160
00:10:28,378 --> 00:10:31,730
>> Well,
we'd only be updating the one time, but

161
00:10:31,730 --> 00:10:33,850
you're down the right track,
so we're maintaining states.

162
00:10:33,850 --> 00:10:35,868
>> Yeah.
>> So keeping variables, and

163
00:10:35,868 --> 00:10:37,880
where do variables reside?

164
00:10:37,880 --> 00:10:39,023
>> In our memory.
>> In memory, right?

165
00:10:39,023 --> 00:10:41,309
And so
if we're not careful with our closures,

166
00:10:41,309 --> 00:10:45,025
all of a sudden, we could potentially
have memory leaks when we have all these

167
00:10:45,025 --> 00:10:47,974
reference states that you're
not actually using anymore.

168
00:10:47,974 --> 00:10:49,040
>> That's true.

169
00:10:49,040 --> 00:10:52,274
Yeah, you're right, you're totally right
because like basically if we have all

170
00:10:52,274 --> 00:10:54,969
these memory states and
they're not being referenced anymore,

171
00:10:54,969 --> 00:10:56,304
like there's a lot of garbage.

172
00:10:56,304 --> 00:10:56,872
>> Mm-hm.

173
00:10:56,872 --> 00:10:57,399
>> Out there.

174
00:10:57,399 --> 00:11:01,055
>> Yep, so it can't be garbage collected
because the JavaScript processor thinks

175
00:11:01,055 --> 00:11:03,918
it's still being used,
it's still maintaining that state.

176
00:11:03,918 --> 00:11:05,788
>> That's true.
>> So you might never run through GC.

177
00:11:05,788 --> 00:11:08,685
>> So you're blowing up
your whole memory state and

178
00:11:08,685 --> 00:11:12,017
your whole application will
slow down eventually and.

179
00:11:12,017 --> 00:11:14,190
>> Not a bad thing,
you just gotta be careful with them.

180
00:11:14,190 --> 00:11:14,690
>> Got it, yeah.
