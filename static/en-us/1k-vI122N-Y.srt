1
00:00:00,550 --> 00:00:02,930
Let's first understand how the login process

2
00:00:02,930 --> 00:00:05,689
works? You walk up to a workstation and

3
00:00:05,689 --> 00:00:07,939
you login. And how do you login? Well

4
00:00:07,939 --> 00:00:11,860
you login using your username and password and

5
00:00:11,860 --> 00:00:14,790
this login process is special that runs on

6
00:00:14,790 --> 00:00:19,220
the virtue workstation. It, communicates with the login

7
00:00:19,220 --> 00:00:23,020
server that is inside the vice by presenting

8
00:00:23,020 --> 00:00:25,860
the username and password in a secure fashion.

9
00:00:25,860 --> 00:00:30,270
We'll see how that is done in a bit. So it presents the username and password

10
00:00:30,270 --> 00:00:34,930
securely over the insecure links. To the login server, and the login

11
00:00:34,930 --> 00:00:40,170
server, once it authenticates who you are, using the username and

12
00:00:40,170 --> 00:00:45,760
password, it is going to send you a pair of tokens, and remember all of this is

13
00:00:45,760 --> 00:00:50,950
happening on behalf of the user by This

14
00:00:50,950 --> 00:00:53,550
merge in the virtual workstation. The user has

15
00:00:53,550 --> 00:00:55,830
to do nothing special. All that the user

16
00:00:55,830 --> 00:00:59,820
is doing is logging in using a user

17
00:00:59,820 --> 00:01:02,420
name and password. Under the covers these things are

18
00:01:02,420 --> 00:01:06,520
happening. First, the log in process communicates securely

19
00:01:06,520 --> 00:01:09,160
with the log in server presenting the user

20
00:01:09,160 --> 00:01:12,800
name and password. And the login server then

21
00:01:12,800 --> 00:01:16,940
returns two tokens. One is called a secret token.

22
00:01:16,940 --> 00:01:19,250
The other is called a clear token. The clear

23
00:01:19,250 --> 00:01:22,860
token, is a data structure. Once again I have

24
00:01:22,860 --> 00:01:26,900
to mention that both the secret and clear tokens

25
00:01:26,900 --> 00:01:30,700
are communicated back To the log in process, by

26
00:01:30,700 --> 00:01:33,420
the log in server, in a secure manner over

27
00:01:33,420 --> 00:01:35,470
the insecure link. We'll see how that is done

28
00:01:35,470 --> 00:01:38,160
in a minute. So once, the log in process

29
00:01:38,160 --> 00:01:41,960
gets these two tokens, decrypts them and gets these two

30
00:01:41,960 --> 00:01:45,220
tokens, the log in process decrypts the

31
00:01:45,220 --> 00:01:48,800
message that contains these two tokens. And

32
00:01:48,800 --> 00:01:54,030
extracts the clear token and the secret token. The clear token is really a data

33
00:01:54,030 --> 00:01:56,580
structure which is known to the login

34
00:01:56,580 --> 00:02:00,180
process. And the data structure in particular

35
00:02:00,180 --> 00:02:03,600
contains a handshake key. We'll call it

36
00:02:03,600 --> 00:02:07,320
HKC. So from this clear token data structure,

37
00:02:07,320 --> 00:02:11,520
the login process can extract this handshake key

38
00:02:11,520 --> 00:02:13,600
And the secret token is just a bit

39
00:02:13,600 --> 00:02:15,910
string. So far as the login process is

40
00:02:15,910 --> 00:02:19,910
concerned. The weight is generated by the login server,

41
00:02:19,910 --> 00:02:27,030
is to encrypt this clear token. With a key known only to vice. It's not the

42
00:02:27,030 --> 00:02:33,050
same as HKC. It is a key that is known only to vice, to encrypt the clear token.

43
00:02:33,050 --> 00:02:38,930
And we will see how this key is going to be used, later on. So to recap,

44
00:02:38,930 --> 00:02:45,110
virtue sends securely the username and password to the login server. Login

45
00:02:45,110 --> 00:02:48,020
server securely sends secret token and clear

46
00:02:48,020 --> 00:02:50,520
token back to this login process. From

47
00:02:50,520 --> 00:02:53,630
the clear token The login process extracts

48
00:02:53,630 --> 00:02:58,320
the handshake key. And the secret token is

49
00:02:58,320 --> 00:03:02,430
basically a bitstream, which is an encryption

50
00:03:02,430 --> 00:03:05,260
of the contents of this cleared token,

51
00:03:05,260 --> 00:03:11,500
encrypted with a key that is known only to Vice. In other words, the secrettoken

52
00:03:11,500 --> 00:03:17,470
is unique for this login session, and It is a bit string, which means

53
00:03:17,470 --> 00:03:23,530
nothing to anybody that sees it on the wire. And therefore we can use this bit

54
00:03:23,530 --> 00:03:28,275
string that secrettoken represents as ephemeral

55
00:03:28,275 --> 00:03:33,020
client-id for this login session. Recall I said. We don't

56
00:03:33,020 --> 00:03:38,360
want to expose the user name and password Too often on the wire.

57
00:03:38,360 --> 00:03:43,340
This is Andrew's answer to dealing with a problem, by

58
00:03:43,340 --> 00:03:48,790
providing an ephemeral client ID for this login session. Once

59
00:03:48,790 --> 00:03:53,410
I use it as logged in, they get an ephemeral client ID, which is the secret

60
00:03:53,410 --> 00:03:58,740
token. And this can be used in the future communication between

61
00:03:58,740 --> 00:04:03,830
virtual And vice as the client ID. Now, how

62
00:04:03,830 --> 00:04:08,970
will vice know who is communicating with it when it sees this

63
00:04:08,970 --> 00:04:13,850
bit pattern? Remember that this bit pattern secret token is an an

64
00:04:13,850 --> 00:04:20,230
encryption of the clear token. And the key for decrypting it is know only to

65
00:04:20,230 --> 00:04:26,910
vice. So when the secret token comes as the client ID, vice can decrypt it

66
00:04:26,910 --> 00:04:29,370
and find out from that, what is

67
00:04:29,370 --> 00:04:32,420
the clear token associated with that particular bit

68
00:04:32,420 --> 00:04:36,290
stream which is representing the secret token. And

69
00:04:36,290 --> 00:04:39,100
once it knows that, it can also extract

70
00:04:39,100 --> 00:04:44,280
the handshake key that it gave to particular client, and that's how the

71
00:04:44,280 --> 00:04:49,800
identity of the client that is communicating with the vice in the future,

72
00:04:49,800 --> 00:04:54,970
presenting this secret token as the ephemeral client ID can

73
00:04:54,970 --> 00:04:59,840
be recognized by vice. So now, after the login is

74
00:04:59,840 --> 00:05:04,430
done, for all the future communication between Venus and

75
00:05:04,430 --> 00:05:12,310
Vice, HKC can be used as a private key for establishing a new RPC session. This

76
00:05:12,310 --> 00:05:14,780
pair of tokens, the secret token and clear

77
00:05:14,780 --> 00:05:18,890
token, is stored on the Virtue workstation by

78
00:05:18,890 --> 00:05:24,500
Venus. On behalf of this user for the entire login session. At the end of this

79
00:05:24,500 --> 00:05:26,860
login session, these two tokens will be thrown

80
00:05:26,860 --> 00:05:29,730
away by Venus. But during the login session,

81
00:05:29,730 --> 00:05:33,400
these two tokens are representing this particular

82
00:05:33,400 --> 00:05:36,210
that has logged in. And, so for the

83
00:05:36,210 --> 00:05:39,710
duration of this login session. Venus will use

84
00:05:39,710 --> 00:05:42,230
the secret token, which is a bit string

85
00:05:42,230 --> 00:05:45,210
that represents this particular user for this log

86
00:05:45,210 --> 00:05:48,240
in session, as the client ID to send

87
00:05:48,240 --> 00:05:52,220
information over to the vice. And, any information

88
00:05:52,220 --> 00:05:54,880
that Venus sends to vice to establish an

89
00:05:54,880 --> 00:06:00,000
RPC session is going to be. Encoded, with the

90
00:06:00,000 --> 00:06:05,460
private key that it had been handed now through the clear token data structure.

91
00:06:05,460 --> 00:06:10,030
That is the handshake key that had been given as part of

92
00:06:10,030 --> 00:06:15,180
this log in exchange, through the clear token data structure. At the

93
00:06:15,180 --> 00:06:20,160
core of the entire secure RPC system of. The

94
00:06:20,160 --> 00:06:25,030
Andrew file system is the bind mechanism, for setting up a client

95
00:06:25,030 --> 00:06:28,380
server connection securely, and that's what we're going to look at next.
