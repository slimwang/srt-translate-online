1
00:00:00,260 --> 00:00:04,130
So, let's say that we had these five instructions, and for now, all that matters

2
00:00:04,130 --> 00:00:07,340
for write of the write dependencies is, which registers are we writing to.

3
00:00:07,340 --> 00:00:09,690
So let's say that the first instruction is writing to R1,

4
00:00:09,690 --> 00:00:12,098
it's computing some result, it doesn't really matter what it is.

5
00:00:12,098 --> 00:00:16,810
And then the second one is writing to R4. Then we have R7 and R8 being written.

6
00:00:16,810 --> 00:00:19,610
And then the fifth instruction is also supposed to write to R4, so

7
00:00:19,610 --> 00:00:23,230
we will see that the problem will be with the second and the fifth instruction

8
00:00:23,230 --> 00:00:28,790
writing to R4. So what can happen is, let's say that there is a,

9
00:00:30,050 --> 00:00:34,410
read after write dependence between the first and the second instruction. So,

10
00:00:34,410 --> 00:00:39,640
what's now going to happen is, there will be some cycle, let's call it cycle 5,

11
00:00:39,640 --> 00:00:46,030
in which R1 is going to execute. R4 cannot execute.

12
00:00:46,030 --> 00:00:51,200
It has to wait. And it will execute here in cycle 6.

13
00:00:51,200 --> 00:00:56,210
Meanwhile these instructions will execute, because they don't have any

14
00:00:56,210 --> 00:01:00,890
dependencies. Now in our five stage pipeline what's going to happen is basically

15
00:01:00,890 --> 00:01:04,540
this instruction is going to move to the mem stage where it doesn't do anything

16
00:01:04,540 --> 00:01:09,690
because none of them are really memory instructions. And then so will these. And

17
00:01:09,690 --> 00:01:13,150
then what's going to happen is in the next cycle this instruction will write

18
00:01:13,150 --> 00:01:17,940
this results. So now, R1 gets written. This instruction is also going to write

19
00:01:17,940 --> 00:01:23,030
this results, so R7 is going to be written. This one writes R8, and

20
00:01:23,030 --> 00:01:29,770
this one writes R4. However the second instruction has executed here so

21
00:01:29,770 --> 00:01:34,060
it is going to go to the MEM stage here and write the result here and

22
00:01:34,060 --> 00:01:39,730
it is going to be R4. So if you look at what is the final result in R4.

23
00:01:39,730 --> 00:01:43,750
The final result in R4 is whatever was the last thing written to it,

24
00:01:43,750 --> 00:01:47,570
which is going to be this value. But it should have been this value.

25
00:01:48,680 --> 00:01:52,500
Because when the program that wrote this they wrote it this way so that they

26
00:01:52,500 --> 00:01:56,340
could expect that our R4 would retain the value from this fifth instruction and

27
00:01:56,340 --> 00:01:59,780
not from the instruction. So basically the programmer wanted this to become

28
00:01:59,780 --> 00:02:04,790
temporarily this. But then take a new value here and

29
00:02:04,790 --> 00:02:07,060
that's kind of the last value after these five instructions.

30
00:02:07,060 --> 00:02:11,270
But that didn't happen. So that is a problem. Why is it a problem,

31
00:02:11,270 --> 00:02:16,360
I mean why did it occur? Well because this instruction got delayed, so

32
00:02:16,360 --> 00:02:19,150
we have executed these two instructions out of order.

33
00:02:19,150 --> 00:02:24,230
This is the second instruction and it writes in the eight cycle.

34
00:02:24,230 --> 00:02:27,180
This is the fifth instruction, but it writes in the seventh cycle. So

35
00:02:27,180 --> 00:02:32,100
basically we have basically written the result in the wrong order. Our I mean,

36
00:02:32,100 --> 00:02:35,040
it's, it's an order different from the order in which they were supposed to

37
00:02:35,040 --> 00:02:41,070
execute in the program. So in order to fix this, one solution will be. So

38
00:02:41,070 --> 00:02:45,840
to fix this, one solution would be to not have this instruction write the result

39
00:02:45,840 --> 00:02:50,930
here. Instead it would have to be stalled here and here. And finally, write

40
00:02:50,930 --> 00:02:55,910
this result here. So a real processor might, see in some way, needs to figure

41
00:02:55,910 --> 00:02:59,700
out how to do this. Because these rights need to happen in the correct order.
