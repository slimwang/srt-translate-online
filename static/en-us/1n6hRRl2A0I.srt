1
00:00:00,000 --> 00:00:04,000
Let's consider a formula--I'm going to write a new one.

2
00:00:04,000 --> 00:00:09,000
Let's say You equals Me-squared.

3
00:00:09,000 --> 00:00:13,000
We're treating these formulas as strings.

4
00:00:13,000 --> 00:00:15,000
Now when we substitute numbers into this,

5
00:00:15,000 --> 00:00:22,000
we get something like 123 equals 45-squared.

6
00:00:22,000 --> 00:00:27,000
What happens when we call eval on this string?

7
00:00:27,000 --> 00:00:32,000
What eval has to do is it takes it's input, which is a string,

8
00:00:32,000 --> 00:00:37,000
and then it has a process of parsing that string into a parse tree.

9
00:00:37,000 --> 00:00:41,000
The parse tree would say something like this is a comparison,

10
00:00:41,000 --> 00:00:49,000
and it has an operator, which is a number, which is 123,

11
00:00:49,000 --> 00:00:58,000
and another operand, which is an expression which has the number 45,

12
00:00:58,000 --> 00:01:05,000
and then the exponentiation operator, and then the number 2.

13
00:01:05,000 --> 00:01:08,000
Python builds up a data structure that looks something like that.

14
00:01:08,000 --> 00:01:13,000
There's another operation of code generation in which Python takes this tree

15
00:01:13,000 --> 00:01:19,000
and says in order to evaluate this tree I'm going to do something

16
00:01:19,000 --> 00:01:28,000
like load the number 123 and then load the number 45 and then do an operation on that

17
00:01:28,000 --> 00:01:30,000
and so on and so on and then return the result.

18
00:01:30,000 --> 00:01:35,000
That's a lot of work to build up this tree, generate the code,

19
00:01:35,000 --> 00:01:40,000
and then finally, the final operation after we've come up with this,

20
00:01:40,000 --> 00:01:45,000
is to execute this code and come up with an answer,

21
00:01:45,000 --> 00:01:48,000
which in this case would be false.

22
00:01:48,000 --> 00:01:53,000
Now, this is a lot of work for eval to do, and it seems like there's a lot of duplicate work,

23
00:01:53,000 --> 00:01:56,000
because we're going to do this for every permutation of the digits,

24
00:01:56,000 --> 00:02:01,000
but each time we go through this part of the work, the parsing,

25
00:02:01,000 --> 00:02:07,000
is going to look exactly the same with the exception of the specific numbers

26
00:02:07,000 --> 00:02:12,000
down here at the bottom, but the rest of the parse tree is going to look the same.

27
00:02:12,000 --> 00:02:15,000
Similarly, this part of the work, the code generation,

28
00:02:15,000 --> 00:02:19,000
will also look the same except these numbers will differ.

29
00:02:19,000 --> 00:02:22,000
We're going to have to repeat that over and over again.

30
00:02:22,000 --> 00:02:27,000
What we'd like is an approach where we can only do these two parts once

31
00:02:27,000 --> 00:02:32,000
and then pass in the specific numbers and then get our final result back.

32
00:02:32,000 --> 00:02:37,000
But one this I should say is that the eval function doesn't take a statement,

33
00:02:37,000 --> 00:02:41,000
like this function definition. It takes an expression.

34
00:02:41,000 --> 00:02:46,000
Furthermore, we don't really need this name F. That was kind of arbitrary.

35
00:02:46,000 --> 00:02:50,000
We'd be fine with having an expression that represents a function

36
00:02:50,000 --> 00:02:52,000
but doesn't have a name associated with it.

37
00:02:52,000 --> 00:02:54,000
Then we can pass that directly to eval.

38
00:02:54,000 --> 00:02:57,000
It turns out there is a way to do that in Python.

39
00:02:57,000 --> 00:03:01,000
There is a keyword that creates a function as an expression.

40
00:03:01,000 --> 00:03:05,000
That keyword is lambda. It's kind of a funny keyword.

41
00:03:05,000 --> 00:03:11,000
I would've preferred them to use function or fun or maybe just def and leave the name out,

42
00:03:11,000 --> 00:03:17,000
but they chose lambda. It's based on the lambda calculus, the Greek letter Î»,

43
00:03:17,000 --> 00:03:21,000
which is a branch of formal mathematics defining functions.

44
00:03:21,000 --> 00:03:26,000
The syntax is fairly similar to the syntax of a definition of a function,

45
00:03:26,000 --> 00:03:31,000
except we leave the name out. It's an anonymous function with no name.

46
00:03:31,000 --> 00:03:34,000
It also turns out for some reason we leave out the parentheses.

47
00:03:34,000 --> 00:03:42,000
We just say lambda Y, O, U, M, E, then a colon, and we leave out the return,

48
00:03:42,000 --> 99:59:59,999
and then we just put in the rest of the code--100 times blah, blah, blah, blah.
