1
00:00:00,560 --> 00:00:03,910
Gradle provides two ways
to visualize dependencies.

2
00:00:03,910 --> 00:00:08,050
A traditional dependency report showing
the complete graph of dependencies and

3
00:00:08,050 --> 00:00:11,550
a dependency insight report showing how
a particular dependency is included

4
00:00:11,550 --> 00:00:12,110
in your project.

5
00:00:13,210 --> 00:00:15,900
Here we have a simple Java project
with a single dependency on

6
00:00:15,900 --> 00:00:17,930
the Spring Core Library.

7
00:00:17,930 --> 00:00:21,750
We can generate a dependency report
by running the dependencies task.

8
00:00:21,750 --> 00:00:23,810
Gradle displays
the project dependencies,

9
00:00:23,810 --> 00:00:26,160
including transitive dependencies.

10
00:00:26,160 --> 00:00:29,610
The report also breaks out
dependencies by each configuration.

11
00:00:29,610 --> 00:00:30,800
To see the dependencies for

12
00:00:30,800 --> 00:00:35,900
a particular configuration, we can use
the --configuration command line option.

13
00:00:35,900 --> 00:00:39,710
And there we go we have the dependencies
just for the run time configuration.

14
00:00:39,710 --> 00:00:43,370
The dependency insight report shows how
a particular dependency is included in

15
00:00:43,370 --> 00:00:44,340
our project.

16
00:00:44,340 --> 00:00:48,000
This report is especially helpful
when identifying version conflicts.

17
00:00:48,000 --> 00:00:51,720
To run the dependency insight task we
need to specify the dependency we're

18
00:00:51,720 --> 00:00:55,710
interested in using the dash dash
dependency command line option.

19
00:00:55,710 --> 00:00:59,120
Let's get an insight report on
the commons-logging dependency.

20
00:00:59,120 --> 00:01:02,615
We can tell from this report that
commons-logging is a dependency of

21
00:01:02,615 --> 00:01:07,520
spring-core, which in turn is a
dependency of our compile configuration.

22
00:01:07,520 --> 00:01:10,360
We mentioned that one of the main
uses of dependency reports

23
00:01:10,360 --> 00:01:13,750
is to help identify
dependency version conflicts.

24
00:01:13,750 --> 00:01:17,580
Let's introduce a conflict and see how
this affects the output of our reports.

25
00:01:17,580 --> 00:01:20,435
Let's add an explicit
dependency on version 1.2

26
00:01:20,435 --> 00:01:23,280
of the commons-logging library.

27
00:01:23,280 --> 00:01:26,805
If we now run the Gradle dependencies
task again, as you can see,

28
00:01:26,805 --> 00:01:30,550
commons-logging is now listed
twice in our dependency report.

29
00:01:30,550 --> 00:01:33,923
In this case,
you can see our project depends on 1.2,

30
00:01:33,923 --> 00:01:37,430
whereas spring-core depends on 1.1.3.

31
00:01:37,430 --> 00:01:41,280
This introduces a conflict, which
Gradle will then attempt to resolve.

32
00:01:41,280 --> 00:01:44,590
By default, Gradle resolves version
conflicts to the newest version,

33
00:01:44,590 --> 00:01:45,340
in this case 1.2.

34
00:01:45,340 --> 00:01:48,560
In our report this is
indicated by an arrow,

35
00:01:48,560 --> 00:01:53,130
showing us that version 1.2 is
being chosen over version 1.1.3.

36
00:01:53,130 --> 00:01:56,610
We can get similar information from
the dependency insight report.

37
00:01:56,610 --> 00:01:58,740
Let's run this report and
see the results.

38
00:01:58,740 --> 00:02:02,330
Again, we can see that the dependency
is shown twice in our report.

39
00:02:02,330 --> 00:02:06,530
We see that our compile configuration
depends on version 1.2, and

40
00:02:06,530 --> 00:02:09,930
that our compile configuration
also depends on spring core,

41
00:02:09,930 --> 00:02:13,134
which depends on commons-logging 1.1.3.

42
00:02:13,134 --> 00:02:15,620
Gradle noticed that there
was a version conflict, and

43
00:02:15,620 --> 00:02:18,904
resolved the conflict in
favor of version 1.2.
