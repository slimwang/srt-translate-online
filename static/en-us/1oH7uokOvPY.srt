1
00:00:00,160 --> 00:00:03,090
At this point you should have most
of the server side, Firebase, and

2
00:00:03,090 --> 00:00:04,440
Google stuff set up.

3
00:00:04,440 --> 00:00:06,150
So let's go back to our Android app and

4
00:00:06,150 --> 00:00:09,450
talk about what we need to do to
get that ready for Google login.

5
00:00:09,450 --> 00:00:13,110
The big picture goal is to get
an OAuth token from Google and

6
00:00:13,110 --> 00:00:15,300
then hand that token over to Firebase.

7
00:00:15,300 --> 00:00:17,400
And this is all going to
happen Android app side.

8
00:00:17,400 --> 00:00:18,970
Once you've gotten your OAuth token,

9
00:00:18,970 --> 00:00:22,910
the process is very similar to
logging in with email and password.

10
00:00:22,910 --> 00:00:27,195
You call Auth with OAuth token, then
Firebase uses the OAuth token to get

11
00:00:27,195 --> 00:00:31,692
data from Google, after which Firebase
creates for you that handy JWT, and

12
00:00:31,692 --> 00:00:33,681
of course your AuthData object.

13
00:00:33,681 --> 00:00:36,025
And then finally you get
your AuthData object so

14
00:00:36,025 --> 00:00:37,848
that you can update your android UI.

15
00:00:37,848 --> 00:00:40,869
Now getting an OAuth token from
Google requires a fair amount of

16
00:00:40,869 --> 00:00:41,842
boilerplate code.

17
00:00:41,842 --> 00:00:43,697
And I've linked to Google
authentication example, so

18
00:00:43,697 --> 00:00:45,510
you can take a look through it.

19
00:00:45,510 --> 00:00:47,740
Let's take a quick look at
what's going on in our app.

20
00:00:47,740 --> 00:00:49,950
Okay, so
I'm in the LoginActivity class, and

21
00:00:51,460 --> 00:00:56,090
if you scroll down you'll see that here,
prefaced by this large comment,

22
00:00:56,090 --> 00:01:01,340
is all of the boilerplate code
that I took to get the token.

23
00:01:01,340 --> 00:01:04,150
So really all this code is just
to get that OAuth token and

24
00:01:04,150 --> 00:01:06,550
it's nothing too special but
you can read through it.

25
00:01:06,550 --> 00:01:09,510
Now, I've left the interesting
part of connecting the OAuth token

26
00:01:09,510 --> 00:01:11,360
to Firebase for you to do.

27
00:01:11,360 --> 00:01:14,920
Now, there are more things that you need
to do with Google which are outlined in

28
00:01:14,920 --> 00:01:19,030
the Firebase and Google Authentication
to be able to get that token.

29
00:01:19,030 --> 00:01:23,000
These include adding some libraries to
Gradle, generating a config file, and

30
00:01:23,000 --> 00:01:24,690
adding permissions to the manifest.

31
00:01:24,690 --> 00:01:26,670
I'll provide you with
the links in the spec document

32
00:01:26,670 --> 00:01:28,230
with how to set all of that up.

33
00:01:28,230 --> 00:01:32,140
Once you've got the OAuth token, signing
into Google is almost exactly the same

34
00:01:32,140 --> 00:01:34,050
as signing in with email and password.

35
00:01:34,050 --> 00:01:37,330
Instead of an email and password,
though, you provide the provider name

36
00:01:37,330 --> 00:01:41,640
which in this case is Google and
that special OAuth Token.

37
00:01:41,640 --> 00:01:44,106
The result handler works
exactly the same though.

38
00:01:44,106 --> 00:01:45,600
If the user is logged into Google and

39
00:01:45,600 --> 00:01:49,190
give shopping list plus plus all the
correct permissions then onAuthenticator

40
00:01:49,190 --> 00:01:52,950
will be called and you'll have that
handy dandy authData parameter.

41
00:01:52,950 --> 00:01:55,980
You should do the same thing with
a user who logs in via Google

42
00:01:55,980 --> 00:01:58,460
as a user who logs in with email and
password.

43
00:01:58,460 --> 00:02:00,340
Your app should send them
to the main activity and

44
00:02:00,340 --> 00:02:03,040
not take them back to the login
page if they click the back button.

45
00:02:03,040 --> 00:02:04,000
Okay, let me send you the spec.
