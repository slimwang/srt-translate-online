1
00:00:00,590 --> 00:00:05,350
As a computer scientist, you have almost
surely written a computer program that,

2
00:00:05,350 --> 00:00:08,420
when you run it,
just sits there spinning its wheels.

3
00:00:08,420 --> 00:00:11,570
You don't know whether the program
is just taking a long time, or

4
00:00:11,570 --> 00:00:15,220
you have made some mistake in the code
and the program is in an infinite loop.

5
00:00:15,220 --> 00:00:17,700
You might have wondered why
nobody put a check in a compiler.

6
00:00:17,700 --> 00:00:21,830
That would test the code to see
whether it would stop or loop forever.

7
00:00:21,830 --> 00:00:24,760
The compiler doesn't have such
a check because it can't be done.

8
00:00:24,760 --> 00:00:27,720
It's not that the programmer's
not smart enough or

9
00:00:27,720 --> 00:00:29,410
the computer's not fast enough.

10
00:00:29,410 --> 00:00:33,060
It is simply impossible to
check arbitrary computer code

11
00:00:33,060 --> 00:00:35,300
to determine whether or
not it will halt.

12
00:00:35,300 --> 00:00:38,530
The best it can do is simulate
the program to know when it halts.

13
00:00:38,530 --> 00:00:43,130
But if it doesn't halt, you can never
be sure if it will halt in the future.

14
00:00:44,450 --> 00:00:48,440
In this lesson, we'll prove
this amazing fact, and beyond.

15
00:00:48,440 --> 00:00:51,770
Not only can you not tell
whether a computer halts, but

16
00:00:51,770 --> 00:00:55,710
you can't determine virtually anything
about the output of a computer.

17
00:00:55,710 --> 00:00:56,940
We build up to those results,

18
00:00:56,940 --> 00:01:00,550
starting with a tool we've seen from
our first lecture, diagonalization.
