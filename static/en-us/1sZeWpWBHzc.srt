1
00:00:00,133 --> 00:00:04,966
Now, the final part is when we have a character followed by a star or a question mark.

2
00:00:04,967 --> 00:00:10,132
That's a little more complicated. I won't ask you to do that yourself. I'll show you.

3
00:00:10,133 --> 00:00:15,966
Let me walk you through this. First thing we're going to do is we're going to break up the pattern into three pieces.

4
00:00:15,967 --> 00:00:26,632
The pattern was something like "A*!" And so the first part is P, which is a single character that comes before the star.

5
00:00:26,633 --> 00:00:30,699
The second part is the operator, which is either a star or a question mark,

6
00:00:30,700 --> 00:00:34,966
and the third part is the rest of the pattern: Everything else after the star or the question mark.

7
00:00:34,967 --> 00:00:42,332
Now, there's two cases. If the operator is a star, we're going to just give up and call another function here.

8
00:00:42,333 --> 00:00:47,866
And we're going to have to write that function. But rather than do it inline, we'll call it,

9
00:00:47,867 --> 00:00:51,366
which we'll need because it's going to end up being a recursive function.

10
00:00:51,367 --> 00:00:59,499
So we'll match star, which says, "Match P any number of times followed by pattern against the text."

11
00:00:59,500 --> 00:01:07,232
If the operator is a question mark, then if we can match the first character, P, against the text,

12
00:01:07,233 --> 00:01:13,899
and match the rest of the pattern after the question mark against the rest of the text, then we return "true."

13
00:01:13,900 --> 00:01:21,799
But if we can't do that, then it's also okay, if we can skip the first character P, not match the first character P,

14
00:01:21,800 --> 00:01:26,566
and go ahead and match the rest of the pattern. So this matches when the first character matches;

15
00:01:26,567 --> 00:01:29,366
this matches when the first character fails.

16
00:01:29,367 --> 00:01:33,266
That's all there is to do with match. But now we have two promises to keep:

17
00:01:33,267 --> 00:01:36,366
We have to write match one and match star.

18
00:01:36,367 --> 00:01:41,732
Again, feel free to try them on your own if you want, but I'm going to go ahead and show them to you.

19
00:01:41,733 --> 00:01:47,099
Match one is pretty easy. So we're matching a single character P against the text.

20
00:01:47,100 --> 00:01:52,066
If there is no text, a single character can't match against it, so we return "false."

21
00:01:52,067 --> 00:01:58,266
Otherwise, if the P was a dot, that matches anything, so we should return "true."

22
00:01:58,267 --> 00:02:03,866
Or if the P is exactly equal to the first character of the text, then we should return "true."

23
00:02:03,867 --> 00:02:08,899
Now here's match star. We have a character P, we want to match any number of that, zero or more,

24
00:02:08,900 --> 00:02:12,299
and then match the rest of the pattern against the text.

25
00:02:12,300 --> 00:02:16,599
So how can we do that? Well, one way we can do it is by matching P zero times.

26
00:02:16,600 --> 00:02:19,132
So that's just matching the pattern against the text.

27
00:02:19,133 --> 00:02:29,266
Or we can match P one time against the text, and then do a match star of P followed by the pattern,

28
00:02:29,267 --> 00:02:32,999
against the rest of the text after the first character.

29
00:02:33,000 --> 00:02:40,132
Notice that it wouldn't do here to do a recursive call to match; we want a recursive call to match star.

30
00:02:40,133 --> 00:02:48,999
Because we want to say we're matching either exactly zero times, or one time followed by zero or more times.

31
00:02:49,000 --> 00:02:56,532
That's it. And if we go ahead and run the test and print out the results, we find that all the tests pass.

32
00:02:56,533 --> 00:03:03,766
And I should say that the subset of the regular expression language and the approach we use to solve it,

33
00:03:03,767 --> 00:03:11,332
I owe a lot to Rob Pike, who wrote a very nice essay on how to do this, and here's a URL link to it.

34
00:03:11,333 --> 00:03:18,299
And you'll be seeing Rob in an interview at the end of this class in the final unit.

35
00:03:18,300 --> 00:03:25,099
So that should give you some idea of what regular expressions are, how to write programs to process them,

36
00:03:25,100 --> 00:03:27,866
and a little bit of the power of what they can do.

37
00:03:27,867 --> 00:03:32,066
Now, in this program, a regular expression was just a string,

38
00:03:32,067 --> 00:03:35,999
and it was easy to deal with because all we had to deal with was the first character of the string,

39
00:03:36,000 --> 00:03:40,999
the second character of the string and so on. But regular expressions can get more complicated.

40
00:03:41,000 --> 00:03:45,166
They can have nested structures that are more like trees than strings.

41
00:03:45,167 --> 00:03:53,066
And so in the rest of this unit, we'll be dealing with an internal representation of regular expressions based on trees

42
00:03:53,067 --> 00:04:00,266
that will be different from this. You can still have input in the form of strings that gets translated into trees,

43
00:04:00,267 --> 00:04:03,032
but we'll be dealing with a tree structure from now on.

44
00:04:03,033 --> 00:04:09,833
So this should give you an intro and a review that's good enough to handle the rest of the lesson.
