1
00:00:00,000 --> 00:00:04,000
Let's take it from which of these
pieces don't exist anymore.

2
00:00:04,000 --> 00:00:12,000
All right. After you left but before I started,
memcachedb hit a scaling wall,

3
00:00:12,000 --> 00:00:17,000
and it just would not go any further,
the writes just were too fast for it.

4
00:00:17,000 --> 00:00:24,000
Did you guys try adding more memcachedb boxes?

5
00:00:24,000 --> 00:00:26,107
I don't know actually. >>You went
there for that. >>Yeah.

6
00:00:26,107 --> 00:00:31,000
Memcachedb is not designed for the
heavy load we were throwing at it.

7
00:00:31,000 --> 00:00:36,000
It's basically--it was the memcache code bolted
on top of Berkeley db, which is kind of neat,

8
00:00:36,000 --> 00:00:42,000
but it wasn't really kind of design to
work at kind of our scale or use case,

9
00:00:42,000 --> 00:00:44,646
which is just basically sending as
many queries at it as you could.

10
00:00:44,646 --> 00:00:47,000
So you guys got rid of this? >>Right.

11
00:00:47,000 --> 00:00:54,261
And replace it with Cassandra.
It's a distributed, NoSQL database.

12
00:00:55,000 --> 00:00:59,000
The way it works is you have rows,

13
00:00:59,000 --> 00:01:04,260
and a row is sharded by it's key to
somewhere in the ring of servers

14
00:01:04,275 --> 00:01:08,000
so you get automatic sharding
across this entire ring

15
00:01:08,000 --> 00:01:14,000
when a row has columns inside of it and
that's where the actual data is stored.

16
00:01:14,800 --> 00:01:22,000
This moves to Cassandra and was pretty similar.

17
00:01:22,000 --> 00:01:27,000
I'll let you draw Cassandra there and
I'll explain a little bit more about--

18
00:01:27,000 --> 00:01:31,000
Remember we talked about with database as you can replicate them where you send

19
00:01:31,000 --> 00:01:37,000
the same data to multiple machines, which helps
for load and durability--this kind of picture here

20
00:01:37,000 --> 00:01:41,000
or you can shard them which is you send
some chunk of data to one machine

21
00:01:41,000 --> 00:01:43,000
and another chunk of data to another.

22
00:01:43,000 --> 00:01:49,000
Let's say we are talking about--in this case, we started using this for the precompute stuff first? >>Yeah.

23
00:01:49,000 --> 00:01:53,707
You've got these listings--every subreddit has
like a hot page and that will be precomputed

24
00:01:53,707 --> 00:01:57,000
so you can store hot pages for
some Reddits on this node

25
00:01:57,000 --> 00:02:00,000
and some hot pages for Reddits
on this node and all around.

26
00:02:00,000 --> 00:02:06,000
So, each node is not an exact copy of every other node. >>Right. >>Now, is there some overlap?

27
00:02:06,000 --> 00:02:12,000
Right. It's configurable, but in our case,
we're using a replication factor of 3,

28
00:02:12,000 --> 00:02:19,000
which means that if a piece of data lives on
this node, it is also on this one and this one

29
00:02:19,000 --> 00:02:22,000
and that happens all around the ring.

30
00:02:22,000 --> 00:02:24,000
And why do you do that?

31
00:02:24,000 --> 00:02:29,123
Simultaneously a read can be serviced
from any one of the 3 if we allow it to be,

32
00:02:29,123 --> 00:02:33,000
which means that if one node is going
slow, we don't go really slow,

33
00:02:33,000 --> 00:02:36,600
and also it means that if anyone
one node just cease to exist,

34
00:02:36,600 --> 00:02:40,000
we wouldn't lose all data for
that segment of the data.

35
00:02:40,000 --> 00:02:45,707
Let's say you have content on this guy, this guy,
and this guy, and you lose this node,

36
00:02:45,707 --> 00:02:50,000
does the content get redistributed? >>No.

37
00:02:50,000 --> 00:02:57,000
They're assigned a key space and you have to move
tokens if you want to rebalance the ring.

38
00:02:57,000 --> 00:03:00,000
Okay. That's something that you
as a developer have to do?

39
00:03:00,000 --> 00:03:03,000
Yeah, that's an operational thing
>> Or systems? >>Yeah.

40
00:03:03,000 --> 00:03:07,000
One of the things that happens as the team
grows too, as people's role has changed.

41
00:03:07,000 --> 00:03:13,000
When you're a small website, you are the designer, developer, sysadmin, all in one,

42
00:03:13,000 --> 00:03:19,000
and you guys have a whole team of
operations guys. >>Two. Yeah. >>Okay.

43
00:03:19,000 --> 00:03:23,000
You have a team of two--they're very good, from what I've heard. They're extraordinarily good.

44
00:03:23,000 --> 00:03:28,000
When I left, it was me and David
who now works with me at Hipmunk

45
00:03:28,000 --> 00:03:31,400
basically developers and OPs guys,
and we're better developers

46
00:03:31,400 --> 00:03:35,000
than we were OPs guys, so that explains some of this.
