1
00:00:00,380 --> 00:00:01,630
As you might recall from early on,

2
00:00:01,630 --> 00:00:07,280
one of the things our design calls for
is scrolling of the app bar.

3
00:00:07,280 --> 00:00:11,210
And to do this scrolling, we're going to
make use of a brand new support library

4
00:00:11,210 --> 00:00:13,520
we've created to help
with material design.

5
00:00:13,520 --> 00:00:15,220
The design library.

6
00:00:15,220 --> 00:00:20,090
This library contains tons of stuff to
help you implement material patterns.

7
00:00:20,090 --> 00:00:24,900
It supports all sorts of app bar
buttons, including collapsing

8
00:00:24,900 --> 00:00:29,510
toolbars with floating action buttons,
collapsing toolbars with pinning,

9
00:00:31,110 --> 00:00:34,180
app bar scrolling with pinned list,
parallax scrolling with underscroll,

10
00:00:34,180 --> 00:00:40,070
parallax scrolling with
collapsing app bars.

11
00:00:40,070 --> 00:00:42,040
And it's a lot more than
just app bar pattern,

12
00:00:42,040 --> 00:00:44,580
it also supports things
like navigation views.

13
00:00:44,580 --> 00:00:49,520
Snackbars and floating action buttons,
tab layouts with fixed and

14
00:00:49,520 --> 00:00:56,220
scrolling tabs, and material text
input with collapsing hint texts.

15
00:00:58,790 --> 00:01:02,450
These tools and more open up
the palette for Android developers to

16
00:01:02,450 --> 00:01:06,930
easily implement more material design
And to do so in consistent ways.

17
00:01:08,310 --> 00:01:10,970
The key to how most of this
functionality is implemented

18
00:01:10,970 --> 00:01:12,275
is the CoordinatorLayout.

19
00:01:12,275 --> 00:01:16,250
CoordinatorLayout is part
of the design library,

20
00:01:16,250 --> 00:01:19,490
its basic functionality is
similar to frame layout.

21
00:01:19,490 --> 00:01:23,960
Any views that are placed in
a CoordinatorLayout overlap by default.

22
00:01:23,960 --> 00:01:27,848
You can use layout gravity to
align the views within the layout.

23
00:01:27,848 --> 00:01:32,520
Similar to relative layout, views can
be positioned based upon sibling views,

24
00:01:32,520 --> 00:01:34,530
except in a more limited way.

25
00:01:34,530 --> 00:01:38,690
Gravity can be applied, position of
view center, up, down, left, or right,

26
00:01:38,690 --> 00:01:40,600
with regards to the parent view.

27
00:01:40,600 --> 00:01:41,811
Most interestingly,

28
00:01:41,811 --> 00:01:46,790
CoordinatorLayout supports behavior
classes that can alter the layout.

29
00:01:46,790 --> 00:01:49,480
When we use a snack bar, and
we have a floating action button

30
00:01:49,480 --> 00:01:52,590
inside of a CoordinatorLayout,
the default behavior for

31
00:01:52,590 --> 00:01:55,545
a floating action button will check
to see if there are any overlapping

32
00:01:55,545 --> 00:02:00,235
snack bars and automatically move the
floating action button out of the way.

33
00:02:00,235 --> 00:02:03,050
AppBarLayout is a special
kind of linear layout that

34
00:02:03,050 --> 00:02:06,960
works with CoordinatorLayout to animate
various kinds of toolbar patterns

35
00:02:06,960 --> 00:02:09,380
during nested scrolling
with a sibling view.

36
00:02:09,380 --> 00:02:12,980
Each child of AppBarLayout
takes layout scroll flags,

37
00:02:12,980 --> 00:02:16,560
defined the behavior when nested
scrolling is taking place.

38
00:02:16,560 --> 00:02:20,400
And the sibling to the AppBar is given
the AppBar scrolling view behavior

39
00:02:20,400 --> 00:02:22,320
to coordinate with the AppBar.

40
00:02:22,320 --> 00:02:25,000
So, this is how our AppBar will scroll
of the screen when we scroll our

41
00:02:25,000 --> 00:02:25,640
recycler view.

42
00:02:26,700 --> 00:02:29,620
We add the CollapsingToolbarLayout
to the mix for

43
00:02:29,620 --> 00:02:32,430
some of those really fancy animations.

44
00:02:32,430 --> 00:02:35,400
It allows you some really
complicated transitions.

45
00:02:35,400 --> 00:02:39,380
And the best thing is, you can create
all this complex behavior in XML layouts

46
00:02:39,380 --> 00:02:40,680
without having to touch the code.
