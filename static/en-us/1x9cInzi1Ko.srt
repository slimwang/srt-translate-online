1
00:00:00,300 --> 00:00:06,150
Another runtime security measure that
iOS uses is Data Execution Prevention.

2
00:00:06,150 --> 00:00:10,620
iOS uses the ARM processor's
eXecute Never feature,

3
00:00:10,620 --> 00:00:14,066
which marks memory
pages as nonexecutable.

4
00:00:14,066 --> 00:00:15,529
More specifically,

5
00:00:15,529 --> 00:00:20,870
iOS marks pages that are writable
in runtime as nonexecutable.

6
00:00:20,870 --> 00:00:25,630
For example, memory pages that
contain stack will not be executable.

7
00:00:25,630 --> 00:00:31,240
On the flip side, memory pages that are
executable are marked as nonwriteable.

8
00:00:31,240 --> 00:00:36,430
For example, the code pages can be
executable, but they're not writeable.

9
00:00:36,430 --> 00:00:40,860
Data Execution Prevention is
an implementation of the policy

10
00:00:40,860 --> 00:00:44,820
that makes writeable and
executable mutually exclusive.

11
00:00:44,820 --> 00:00:48,750
If a page is writeable,
meaning that a runtime, new data or

12
00:00:48,750 --> 00:00:54,367
code can be returned on that memory
page, then this page is not executable.

13
00:00:54,367 --> 00:00:58,540
This prevents code-injection
attacks because, to inject code,

14
00:00:58,540 --> 00:01:01,836
the attacker must write
code into a memory page.

15
00:01:01,836 --> 00:01:07,260
But since we make writeable and
executable mutually exclusive, after

16
00:01:07,260 --> 00:01:11,630
the code can be returned in the memory
page, that page can not be executable.

17
00:01:11,630 --> 00:01:15,550
Therefore, even if the attacker
can write code into memory,

18
00:01:15,550 --> 00:01:18,880
he cannot force execution on that page.

19
00:01:18,880 --> 00:01:21,570
Therefore, he cannot
execute his malicious code.
