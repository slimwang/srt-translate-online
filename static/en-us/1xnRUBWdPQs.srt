1
00:00:00,000 --> 00:00:05,010
So since finding a mathematical proof for showing the intractability of the problems that

2
00:00:05,010 --> 00:00:09,580
Alice, Bob, and Carol are working on seems to be rather hard,

3
00:00:09,580 --> 00:00:14,970
we're first going to start with gathering evidence that their problems might be intractable.

4
00:00:14,970 --> 00:00:18,490
Of course, we don't yet really know if their problems really are intractable

5
00:00:18,490 --> 00:00:22,760
because as we have just seen there are also arguments why their problems

6
00:00:22,760 --> 00:00:27,330
could actually be tractable because just having an exponential number of solutions

7
00:00:27,330 --> 00:00:31,550
does not necessarily mean that their problems are difficult but we're going to see how it turns out.

8
00:00:31,550 --> 00:00:37,320
So how can we gather evidence that the problems of Alice, Bob, and Carol could be intractable?

9
00:00:37,320 --> 00:00:43,000
One way could be what we have done in the last unit and that is if you recall in the last unit

10
00:00:43,000 --> 00:00:47,790
we showed that all of these three problems are either tractable or intractable.

11
00:00:47,790 --> 00:00:53,560
So one way to gather evidence that they are intractable is to find more and more problems

12
00:00:53,560 --> 00:00:56,940
for which we also don't know polynomial time algorithms

13
00:00:56,940 --> 00:00:59,610
and connect them to the problems that we know.

14
00:00:59,610 --> 00:01:06,100
So if we had this huge network of problems but we say if we find a polynomial time algorithm

15
00:01:06,100 --> 00:01:09,110
for just one of them, all of them would be solvable in polynomial time

16
00:01:09,110 --> 00:01:15,490
but nobody has yet found such an algorithm that would already be rather strong evidence that

17
00:01:15,490 --> 00:01:18,890
also clique, vertex cover, and independent set might be hard.

18
00:01:18,890 --> 00:01:23,480
So we might, for example, end up with thousands of highly relevant problems

19
00:01:23,480 --> 00:01:27,280
for which no one has so far found a polynomial time algorithm

20
00:01:27,280 --> 00:01:31,340
and if they're all connected that would be not a mathematical proof but it would be

21
00:01:31,340 --> 00:01:35,390
a somewhat convincing body of evidence for these problems' hardness.

22
00:01:35,390 --> 00:01:39,620
And in fact, I will introduce you to such a collection of problems at the end of this unit

23
00:01:39,620 --> 00:01:41,810
and we'll also have a closer look in the next units.

24
00:01:41,810 --> 00:01:45,540
But today actually, we're going to do something that is a little bolder.

25
00:01:45,540 --> 00:01:51,420
We're still not going to be able to achieve a mathematical proof of intractability

26
00:01:51,420 --> 00:01:54,720
but we're going to do something that I would say is somewhere in between

27
00:01:54,720 --> 00:01:57,320
gathering evidence and a mathematic proof.

28
00:01:57,320 --> 00:02:00,420
And the way we're going to do this is as follows.

29
00:02:00,420 --> 00:02:05,600
I'm going to introduce to you a type of computer that is extremely powerful.

30
00:02:05,600 --> 00:02:11,540
So powerful in fact that no one has ever conceived if it could actually be built.

31
00:02:11,540 --> 00:02:17,970
And then what I'll show you is that if there was a polynomial time algorithm for vertex cover

32
00:02:17,970 --> 00:02:25,190
or clique or independent set, that would be like having a blueprint for this super powerful computer.

33
00:02:25,190 --> 00:02:29,470
We won't be able to show that it's imposible to build such a computer,

34
00:02:29,470 --> 00:02:36,790
but it is pretty good evidence that those three problems up here are very tough problems to solve.

35
00:02:36,790 --> 00:02:40,450
So what makes this computer that I'm about to introduce to you so powerful?

36
00:02:40,450 --> 00:02:46,160
Well, roughly speaking, it's so powerful because it has the capability to guess things for us

37
00:02:46,160 --> 00:02:50,100
and it will guess them correctly but you're going to see in a minute what I mean by that.

38
00:02:50,100 --> 00:02:56,060
First of all, let's have a look once more at the three problems: click, vertex cover, and independent set.

39
00:02:56,060 --> 00:03:00,010
And have a look at how a machine that would be capable of guessing things for us

40
00:03:00,010 --> 00:03:04,060
could potentially make the solution to these problems very easy.

41
00:03:04,060 --> 00:03:07,930
And we're going to do this as a quiz and what I would like you to think about is

42
00:03:07,930 --> 00:03:11,300
what the three problems we have been talking about so far have in common.

43
00:03:11,300 --> 00:03:14,480
And I'm going to give you a number of choices and I would like you to tell me

44
00:03:14,480 --> 00:03:17,300
which ones of these you think are true and there can be more than one.

45
00:03:17,300 --> 00:03:20,650
So there's four possible choices here and again more than one of these can be true.

46
00:03:20,650 --> 00:03:24,440
So what do all of these three problems up here have in common?

47
00:03:24,440 --> 00:03:28,520
Choice #1, we have not found a polynomial time algorithm for them yet.

48
00:03:28,520 --> 00:03:31,000
Choice #2, they are not practically relevant.

49
00:03:31,000 --> 00:03:34,210
Choice #3, the simple algorithms that we have found so far

50
00:03:34,210 --> 00:03:36,770
go through an exponential number of solutions.

51
00:03:36,770 --> 00:03:42,880
And finally, for the simple algorithms, for any given 0 and 1 assignment to the vertices

52
00:03:42,880 --> 00:03:48,310
so we have already assigned the values of 0 and 1 to them, it is relatively easy to figure out

53
00:03:48,310 --> 00:03:50,840
if that assignment is a valid solution.

54
00:03:50,840 --> 99:59:59,999
And if it is a valid solution, how large that solution is? So please check all of these that are correct.
