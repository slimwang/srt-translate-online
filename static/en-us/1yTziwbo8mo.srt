1
00:00:00,270 --> 00:00:03,800
Now, most of the code that you've
written has been synchronous, and

2
00:00:03,800 --> 00:00:08,350
this means that each line of code gets
executed one right after another.

3
00:00:08,350 --> 00:00:11,330
And you must wait for each line to
finish executing before going on to

4
00:00:11,330 --> 00:00:16,020
the next line, but recently we've been
learning about asynchronous callbacks.

5
00:00:16,020 --> 00:00:20,380
And this means that we tell the system
we're interested in a certain event,

6
00:00:20,380 --> 00:00:23,600
like a click event, and
then tell the system to notify us,

7
00:00:23,600 --> 00:00:26,790
or call us back when that event happens.

8
00:00:26,790 --> 00:00:30,010
And in the meantime, we can go do
something else in the app, and

9
00:00:30,010 --> 00:00:32,530
that means we're not sitting
around stalled or waiting for

10
00:00:32,530 --> 00:00:35,000
the user to click on
the button on the screen.

11
00:00:35,000 --> 00:00:37,980
And when the event happens, or
if it even happens at all, then

12
00:00:37,980 --> 00:00:41,790
the system will call us back and we can
execute instructions that we specified.

13
00:00:42,800 --> 00:00:46,140
So the on click listener callback and
the list views

14
00:00:46,140 --> 00:00:50,910
on I don't click listener callback were
both examples of asynchronous callbacks.

15
00:00:50,910 --> 00:00:55,620
So for example, we only want to play the
audio file for each word when the system

16
00:00:55,620 --> 00:00:59,400
calls us back and tells us that
a certain list item was clicked on.

17
00:01:00,520 --> 00:01:04,060
This means that in that time while we're
waiting, we can still do other things

18
00:01:04,060 --> 00:01:07,290
like scroll the list, or wait for
other user input events.

19
00:01:08,380 --> 00:01:11,170
So doing something while we're
waiting for an event to happen and

20
00:01:11,170 --> 00:01:15,400
then jumping back into action is
called an asynchronous callback.

21
00:01:15,400 --> 00:01:18,910
And so for sure you might sometimes
hear it called async callbacks.

22
00:01:18,910 --> 00:01:23,980
So A-S-Y-N-C, async callback.

23
00:01:23,980 --> 00:01:26,290
Now, as you learn more
about Android development,

24
00:01:26,290 --> 00:01:29,480
you will realize that async callbacks
are a common pattern in Android for

25
00:01:29,480 --> 00:01:32,570
us to set up listeners for
events on the device.

26
00:01:32,570 --> 00:01:35,649
And so, for example, there are listeners
for when the user's location changes.

27
00:01:36,710 --> 00:01:40,610
Now in order for your app to behave as
a user expects, you need to be able to

28
00:01:40,610 --> 00:01:44,490
hook into these and
be able to handle those cases properly.

29
00:01:45,860 --> 00:01:48,220
Now, let's learn more
about another callback.

30
00:01:49,740 --> 00:01:51,950
So the media player
API offers several so

31
00:01:51,950 --> 00:01:55,980
that developers can get notified
when certain events happen.

32
00:01:55,980 --> 00:01:59,330
Specifically, there's a callback
that tells us when an audio or

33
00:01:59,330 --> 00:02:00,700
media file has finished playing.

34
00:02:02,270 --> 00:02:05,280
Can you search online to figure
out which callback method that is?

35
00:02:05,280 --> 00:02:07,200
And write that answer in
this box when you find it.

36
00:02:08,380 --> 00:02:09,330
When you found that answer,

37
00:02:09,330 --> 00:02:13,180
I like to use that information to
modify the sample music player app.

38
00:02:14,270 --> 00:02:15,560
So change the app so

39
00:02:15,560 --> 00:02:19,530
that when a song is done playing, it
pops up a toast message saying I'm done.

40
00:02:20,950 --> 00:02:22,830
Now this step can be
a little bit tricky, so

41
00:02:22,830 --> 00:02:25,650
take note of the hints that we
provided you down below this quiz.
