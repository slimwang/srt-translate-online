1
00:00:00,000 --> 00:00:05,000
The solution to this is a technique known as blind signatures.

2
00:00:05,000 --> 00:00:08,000
This gives us a way to associate a unique ID with a bill

3
00:00:08,000 --> 00:00:11,000
to be able to detect double spending but doesn't allow the bank to associate

4
00:00:11,000 --> 00:00:16,000
the unique IDs on the bills with the person who acquires that bill.

5
00:00:16,000 --> 00:00:19,000
Here's the idea--Alice will deposit her $100 in the bank,

6
00:00:19,000 --> 00:00:23,000
and along with the bill she'll generate a message that says Bill # rA--

7
00:00:23,000 --> 00:00:29,000
some unique ID generated by Alice--Invisible Primes Bank owes the bearer $100.

8
00:00:29,000 --> 00:00:35,000
She'll go to the bank, give the banker the $100 bill, and ask the bank to sign the message m.

9
00:00:35,000 --> 00:00:39,000
To make it a blind signature, though, she'll insist the bank wear a blindfold

10
00:00:39,000 --> 00:00:42,000
before bringing out the message m and the banker will have to sign it

11
00:00:42,000 --> 00:00:44,000
without being able to see this message.

12
00:00:44,000 --> 00:00:47,000
The bank will give that signed message back to Alice.

13
00:00:47,000 --> 00:00:51,000
This protocol has an obvious flaw in it. The bank doesn't know what it's signing.

14
00:00:51,000 --> 00:00:58,000
Alice could deposit $100 and ask the bank to sign a message for $100 gazillion.

15
00:00:58,000 --> 00:01:02,000
When someone deposits that bill, the banker will no longer be smiling.

16
00:01:02,000 --> 00:01:06,000
The solution to this is a technique known as cut-and-choose.

17
00:01:06,000 --> 00:01:10,000
This is somewhat similar to what we saw in auditing for mix nets.

18
00:01:10,000 --> 00:01:14,000
It has lots of applications to other cryptographic problems as well.

19
00:01:14,000 --> 00:01:18,000
The way we would do that with this scheme is instead of just generating one message like this,

20
00:01:18,000 --> 00:01:21,000
Alice would generate a large number of messages--

21
00:01:21,000 --> 00:01:24,000
let's say 100 of them--send them all to the bank.

22
00:01:24,000 --> 00:01:27,000
The banker who is no longer blind folded or frowny

23
00:01:27,000 --> 00:01:31,000
will randomly pick one of these messages.

24
00:01:31,000 --> 00:01:35,000
Let's say he picks message 38. We'll look at the other ones.

25
00:01:35,000 --> 00:01:38,000
Each one of those should have a message like this but with a different random value.

26
00:01:38,000 --> 00:01:40,000
Check that they're all okay.

27
00:01:40,000 --> 00:01:44,000
If they're all okay, then without looking at message 38, then the banker will be blindfolded

28
00:01:44,000 --> 00:01:46,000
and sign message 38.

29
00:01:46,000 --> 00:01:50,000
The point of this is that Alice generates all the messages,

30
00:01:50,000 --> 00:01:55,000
transfers them to the bank, but the bank doesn't see them until the bank randomly picks one.

31
00:01:55,000 --> 00:02:00,000
Since the bank is picking the one to sign randomly and inspecting all the others,

32
00:02:00,000 --> 00:02:06,000
the probability of Alice being able to cheat without getting caught is 1 in the number of messages.

33
00:02:06,000 --> 00:02:08,000
That could work with blindfolds.

34
00:02:08,000 --> 00:02:12,000
We'd have to be careful how we deliver the messages to the bank

35
00:02:12,000 --> 00:02:15,000
and let the banker pick one and then see them without the blindfold.

36
00:02:15,000 --> 00:02:19,000
But that could work. It's not very convenient though.

37
00:02:19,000 --> 99:59:59,999
What we want to do is figure out a way to do this using cryptography instead of blindfolds.
