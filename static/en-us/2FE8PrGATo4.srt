1
00:00:00,540 --> 00:00:02,980
Now let's discuss the primitives that are available

2
00:00:02,980 --> 00:00:07,070
in the coral for manipulating the floppy DHT

3
00:00:07,070 --> 00:00:09,560
in particular the put and get operation. The

4
00:00:09,560 --> 00:00:12,485
primitives are exactly the same, it's just that the

5
00:00:12,485 --> 00:00:15,310
semantics of the put and get are very

6
00:00:15,310 --> 00:00:18,710
different in terms of how it is actually implemented.

7
00:00:18,710 --> 00:00:21,550
So put takes on two parameters Key and

8
00:00:21,550 --> 00:00:25,710
value. Key is the content hash, and value is

9
00:00:25,710 --> 00:00:30,565
the node ID of the proxy with the content for the particular key.

10
00:00:30,565 --> 00:00:35,830
Essentially, this put is announcing the willingness of

11
00:00:35,830 --> 00:00:41,100
the proxy to serve the content whose signature is key. The

12
00:00:41,100 --> 00:00:46,620
put can be initiated by the origin server with the new content,

13
00:00:46,620 --> 00:00:51,100
or it could also be initiated by a node that

14
00:00:51,100 --> 00:00:57,300
just downloaded the content and wants to serve as a proxy to reduce the load of

15
00:00:57,300 --> 00:00:59,980
the origin server. In both cases they will

16
00:00:59,980 --> 00:01:02,600
want to do a put operation. And the result

17
00:01:02,600 --> 00:01:05,379
of doing the put operation is to store

18
00:01:05,379 --> 00:01:08,970
this key value, in some metadata server. That is

19
00:01:08,970 --> 00:01:11,510
some node that is going to serve as a

20
00:01:11,510 --> 00:01:16,730
name server that can, answer queries coming in saying,

21
00:01:16,730 --> 00:01:18,910
I am looking for this key. In that

22
00:01:18,910 --> 00:01:23,090
case, that metadata server can return the value,

23
00:01:23,090 --> 00:01:28,040
associated with that key. So what we need to do when we do a put operation, is

24
00:01:28,040 --> 00:01:31,390
to place this key value in an appropriate

25
00:01:31,390 --> 00:01:34,440
node. Now, what do we mean by an appropriate

26
00:01:34,440 --> 00:01:41,780
node? Ideally, what we want to do is, given a key, we want to store it in a node

27
00:01:41,780 --> 00:01:46,540
ID whose ID is N equal to key. That's the desired node

28
00:01:46,540 --> 00:01:50,930
where we want to place it, but we want to do this without

29
00:01:50,930 --> 00:01:56,150
really causing a metadata server overload. Now

30
00:01:56,150 --> 00:02:01,550
how do we determine if a particular node is overloaded?

31
00:02:01,550 --> 00:02:06,700
Well, what we're going to do is define two states.

32
00:02:06,700 --> 00:02:12,760
One state is called a full state, and what that is saying is a particular node,

33
00:02:12,760 --> 00:02:18,900
lets say node n, is already storing l values for a key. Remember what I said

34
00:02:18,900 --> 00:02:22,630
earlier, this key value pair can be placed

35
00:02:22,630 --> 00:02:26,240
by either the origin server that is creating

36
00:02:26,240 --> 00:02:31,700
the content. Or it could be placed by a proxy who is saying, I'm willing to

37
00:02:31,700 --> 00:02:38,840
serve as a proxy for the content. So there could be lots of nodes that

38
00:02:38,840 --> 00:02:42,606
have the content, and are willing to serve the content. All of them would have

39
00:02:42,606 --> 00:02:46,130
done put operations. So the node that

40
00:02:46,130 --> 00:02:51,200
matches exactly the key. That, is being put.

41
00:02:51,200 --> 00:02:54,380
They already have quite a few candidates, that

42
00:02:54,380 --> 00:02:57,030
are willing to serve as the content providers

43
00:02:57,030 --> 00:02:59,800
for that particular key. That's this parameter

44
00:02:59,800 --> 00:03:03,900
full that's saying, I'm willing to host up

45
00:03:03,900 --> 00:03:10,400
to L entries, for this key value pair. Anything more than that, I'm not going

46
00:03:10,400 --> 00:03:15,370
to do that. I'll get overloaded. So the full is a condition, you could say

47
00:03:15,370 --> 00:03:18,040
it's a special condition that's saying, I'm willing

48
00:03:18,040 --> 00:03:22,130
to entertain up to l content providers for

49
00:03:22,130 --> 00:03:29,220
a particular key k. The second way a particular node may get overloaded is,

50
00:03:29,220 --> 00:03:36,120
if it actually starts getting a large number of requests for a particular key.

51
00:03:36,120 --> 00:03:41,580
So, this is a time metric that says a node has a beta parameter, and the

52
00:03:41,580 --> 00:03:47,130
beta parameter is the number of requests per unit time. That a

53
00:03:47,130 --> 00:03:50,050
node is entertaining. So if it says that I'm

54
00:03:50,050 --> 00:03:54,050
already entertaining beta requests for this particular key and

55
00:03:54,050 --> 00:03:56,740
therefore, if you want me to store the same

56
00:03:56,740 --> 00:03:58,390
key, I'm going to say no, I cannot do

57
00:03:58,390 --> 00:04:00,970
it because I'll get overloaded. So this is a

58
00:04:00,970 --> 00:04:04,800
space metric that's saying, how many values I'm willing

59
00:04:04,800 --> 00:04:08,760
to store for a particular key. Loaded is stating

60
00:04:08,760 --> 00:04:12,890
how many requests per unit time I'm willing to entertain

61
00:04:12,890 --> 00:04:17,320
for a particular key. Those are the two metrics we're going to use in

62
00:04:17,320 --> 00:04:24,450
determining whether to place a key value pair at a particular destination node.
