1
00:00:00,490 --> 00:00:04,080
So now that we have seen how Tomasulo's algorithm works and what the structures

2
00:00:04,080 --> 00:00:07,400
are and so on, let's go through a long example that kind of helps you do things

3
00:00:07,400 --> 00:00:12,820
on exams when we ask you kind of, do Tomasulo's algorithm for a few cycles,

4
00:00:12,820 --> 00:00:16,980
let's see how to do that. I conveniently came up with tables like this so

5
00:00:16,980 --> 00:00:19,872
that I don't have to draw everything by hand. Here we

6
00:00:19,872 --> 00:00:23,634
have the characteristics of our processor basically this is that the load unit

7
00:00:23,634 --> 00:00:27,370
takes two cycles to execute the load. Add takes two cycles to execute adds and

8
00:00:27,370 --> 00:00:31,520
subtracts. Multiplication will take 10 cycles and divide will take 40 cycles and

9
00:00:31,520 --> 00:00:36,560
they're done in the multiplication unit and the initial content of R2, R3, and

10
00:00:36,560 --> 00:00:41,160
R4 are like this. This the table that gives us our

11
00:00:41,160 --> 00:00:44,790
instructions in order like this so this is the very first instruction.

12
00:00:44,790 --> 00:00:49,590
Here we will note in which cycle which instruction issues begin execution and

13
00:00:49,590 --> 00:00:53,440
writes the result. This is basically a graph.

14
00:00:53,440 --> 00:00:56,180
This is where we will say what cycle we are currently in and

15
00:00:56,180 --> 00:01:00,650
this is our reservation stations. These are the two load reservation stations,

16
00:01:00,650 --> 00:01:02,460
these are the three reservation stations for

17
00:01:02,460 --> 00:01:07,590
the adders and this is the multiplication units reservation stations.

18
00:01:07,590 --> 00:01:10,490
The load reservation stations are all really going to be our load queue so

19
00:01:10,490 --> 00:01:13,160
they're going to be slightly different from the others.

20
00:01:13,160 --> 00:01:18,100
Here we will just check when the instruction is in a reservation station.

21
00:01:18,100 --> 00:01:21,600
This is going to be what the operation is. This is where we

22
00:01:21,600 --> 00:01:25,520
restored the value that we have for this operand. This is the value for

23
00:01:25,520 --> 00:01:29,040
the second operand. This is what we are waiting for in the first operand,

24
00:01:29,040 --> 00:01:32,070
this is what we are waiting for for the second operand. And this is

25
00:01:32,070 --> 00:01:35,010
whether the instruction has been dispatched, so that we can keep track of it.
