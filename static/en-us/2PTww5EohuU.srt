1
00:00:00,480 --> 00:00:04,769
Hold on, we said that end queens was
a constraint satisfaction problem, but

2
00:00:04,769 --> 00:00:07,699
we covered that in the last lesson
using genetic algorithms, or

3
00:00:07,700 --> 00:00:09,919
hill climbing algorithms,
to solve the problem.

4
00:00:09,919 --> 00:00:10,500
>> That's right.

5
00:00:10,500 --> 00:00:12,629
We can randomly assign
values to the variables and

6
00:00:12,630 --> 00:00:15,900
iteratively improve the assignments
until we come to the solution.

7
00:00:15,900 --> 00:00:19,019
>> Like our previous example with
four queens, while there were four to

8
00:00:19,019 --> 00:00:23,660
the four, which equals 256 possible
states, we can quickly find

9
00:00:23,660 --> 00:00:27,490
the solution by minimizing the number
of attacks with each improvement.

10
00:00:27,489 --> 00:00:28,042
>> In fact,

11
00:00:28,042 --> 00:00:32,700
this minimizing conflict method can
solve nqueens with n equals 10 million.

12
00:00:32,700 --> 00:00:33,800
In the million queen's case,

13
00:00:33,799 --> 00:00:37,779
this min-conflicts algorithm can solve
the problem in an average of 50 moves.

14
00:00:37,780 --> 00:00:38,920
>> Wow!

15
00:00:38,920 --> 00:00:42,939
I guess that's because there's a large
number of solutions to the problem.

16
00:00:42,939 --> 00:00:43,629
>> Yup!

17
00:00:43,630 --> 00:00:46,626
Iterative improvement algorithms work
well when they are many solutions and

18
00:00:46,625 --> 00:00:48,359
where there are very few.

19
00:00:48,359 --> 00:00:51,189
However, there are problems with the
number of constraints versus the number

20
00:00:51,189 --> 00:00:55,169
of variables hit a certain ratio, and
the problem is very hard to solve.

21
00:00:55,170 --> 00:00:56,719
>> Well,
then let's just stick to the easy one.

