1
00:00:00,200 --> 00:00:04,770
Returning to the previous safe_insert example, let's demonstrate how to

2
00:00:04,770 --> 00:00:09,560
use new techniques making the operation safe_insert actually safe.

3
00:00:09,560 --> 00:00:13,206
Just like in the threads creation code we have threads T0 and

4
00:00:13,206 --> 00:00:17,890
T1 and they both want to perform the safe_insert operation.

5
00:00:17,890 --> 00:00:22,228
The parent thread T0 wants to perform safe_insert with an element 6, and

6
00:00:22,228 --> 00:00:26,320
the child thread wants to perform safe_insert with a value of 4.

7
00:00:26,320 --> 00:00:30,180
Let's assume that once the parent created the child T1

8
00:00:30,180 --> 00:00:35,130
it continued executing and was the first one to reach safe_insert with value 6.

9
00:00:35,130 --> 00:00:41,500
It will acquire the log and start inserting the element 6 on the list.

10
00:00:41,500 --> 00:00:46,070
What that means, T0 has the log and when T1, the child,

11
00:00:46,070 --> 00:00:50,530
reaches the safe_insert operation it will try to acquire the lock as well and

12
00:00:50,530 --> 00:00:52,720
it will not be successful it will be blocked.

13
00:00:52,720 --> 00:00:57,730
At some later point, T0 will release the lock, T1 will acquire the lock, and

14
00:00:57,730 --> 00:01:03,480
then T1 will be able to insert its element onto the front of the list.

15
00:01:03,480 --> 00:01:09,070
So in this case, the final ordering of the list will be 4 followed by 6.

16
00:01:09,070 --> 00:01:11,780
Since we're always inserting in the front of the list.

17
00:01:11,780 --> 00:01:14,430
That's how we describe this operation.

18
00:01:14,430 --> 00:01:18,200
So, the parent inserted its element first, and

19
00:01:18,200 --> 00:01:22,370
then the child thread was the second one to insert the value 4 into the list.
