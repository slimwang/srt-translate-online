1
00:00:00,000 --> 00:00:02,969
The minimum possible maximum depth is 1.

2
00:00:02,969 --> 00:00:06,973
So if we start with a node here that we're going to number 0,

3
00:00:06,973 --> 00:00:09,347
and then we're going to have a graph where every

4
00:00:09,347 --> 00:00:13,097
single node is attached to that root node,

5
00:00:13,097 --> 00:00:15,738
well the depth of each one of these is going to be 1.

6
00:00:15,738 --> 00:00:20,005
On the other hand, the maximum possible max depth is going to be N minus 1.

7
00:00:20,005 --> 00:00:21,951
So what's our graph look like there?

8
00:00:21,951 --> 00:00:24,053
We're going to start with the root node and then we're going to have

9
00:00:24,053 --> 00:00:28,813
a linear chain of graph nodes all the way out to N minus 1.

10
00:00:28,813 --> 00:00:30,856
Now it's important for you to realize these are

11
00:00:30,856 --> 00:00:33,802
2 very different graphs from the point of view of parallelization.

12
00:00:33,802 --> 00:00:38,341
This linear chain here--very hard to parallelize if we're doing a BFS.

13
00:00:38,341 --> 00:00:43,502
It's going to take us order of n steps to get from the start node all the way to the end node.

14
00:00:43,502 --> 00:00:45,852
Not going to get a lot of parallelization out of that.

15
00:00:45,852 --> 00:00:50,519
And clever students are going to realize, this is the worst case step complexity of the BFS.

16
00:00:50,519 --> 00:00:53,654
But if we have a graph that looks like this, a star shaped graph,

17
00:00:53,654 --> 00:00:56,773
then parallelization is a lot more straightforward.

18
00:00:56,773 --> 00:01:00,109
We can process each one of those leaves independently, in parallel.
