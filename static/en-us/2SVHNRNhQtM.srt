1
00:00:00,540 --> 00:00:03,930
To construct a jellyfish topology, one can simply take

2
00:00:03,930 --> 00:00:07,550
the following steps. First, pick a random switch pair

3
00:00:07,550 --> 00:00:10,280
with free ports for which the switch pair are

4
00:00:10,280 --> 00:00:14,160
not already neighbors. Next, join them with a link,

5
00:00:14,160 --> 00:00:17,100
and repeat this process until no further links can

6
00:00:17,100 --> 00:00:19,360
be added. If a switch remains with greater than

7
00:00:19,360 --> 00:00:22,890
or equal to two free ports, which might happen

8
00:00:22,890 --> 00:00:26,330
during the incremental expansion by adding a new switch,

9
00:00:26,330 --> 00:00:28,320
these switches can be incorporated in the

10
00:00:28,320 --> 00:00:32,549
topology by removing a uniform random existing

11
00:00:32,549 --> 00:00:35,680
link and adding links to that switch.

12
00:00:35,680 --> 00:00:39,120
For a particular equipment cost, using identical

13
00:00:39,120 --> 00:00:42,520
equipment, the jelly fish topology can achieve

14
00:00:42,520 --> 00:00:45,840
increased capacity by supporting twenty five percent

15
00:00:45,840 --> 00:00:48,950
more servers. This higher capacity is achieved

16
00:00:48,950 --> 00:00:51,690
because the paths through the topology are

17
00:00:51,690 --> 00:00:53,520
shorter than they would be in a

18
00:00:53,520 --> 00:00:56,540
Fat tree topology. Consider a topology with sixteen

19
00:00:56,540 --> 00:00:59,880
servers, twenty switches, and a fixed degree of

20
00:00:59,880 --> 00:01:02,530
four for both the fat tree topology and

21
00:01:03,550 --> 00:01:05,720
the jellyfish random graph. In the fat

22
00:01:05,720 --> 00:01:10,100
tree topology, only four of 16 servers are

23
00:01:10,100 --> 00:01:13,680
reachable in less than five hops. In contrast,

24
00:01:13,680 --> 00:01:17,180
in the jellyfish random graph, there are 12

25
00:01:17,180 --> 00:01:22,310
servers reachable. By making more servers reachable along shorter

26
00:01:22,310 --> 00:01:27,250
paths, jellyfish can increase capacity over a

27
00:01:27,250 --> 00:01:32,410
conventional Fat tree topology. So while Jellyfish shows some promise, there are

28
00:01:32,410 --> 00:01:35,220
certainly some open questions. First, how close

29
00:01:35,220 --> 00:01:37,560
are these random graphs to optimal, in

30
00:01:37,560 --> 00:01:39,230
terms of the optimal throughput that could

31
00:01:39,230 --> 00:01:42,450
be achieved for a particular set of equipment.

32
00:01:42,450 --> 00:01:44,820
Second, what about typologies where switches are

33
00:01:44,820 --> 00:01:47,750
heterogeneous with different numbers of ports or

34
00:01:47,750 --> 00:01:51,170
link speeds. From a system design perspective,

35
00:01:51,170 --> 00:01:54,370
the random topology model could create problems with

36
00:01:54,370 --> 00:01:57,280
physically cabling the datacenter network, and there

37
00:01:57,280 --> 00:01:59,790
are also questions about how to perform routing

38
00:01:59,790 --> 00:02:02,310
or congestion control without the structure of

39
00:02:02,310 --> 00:02:04,980
a conventional datacenter network like a fat tree.
