1
00:00:00,670 --> 00:00:04,059
Okay, let's talk about the possible
values that can be on the right side of

2
00:00:04,059 --> 00:00:05,592
our key value pairs.

3
00:00:05,592 --> 00:00:09,220
We've already seen in the last note that
our keys can reference primitive data

4
00:00:09,220 --> 00:00:14,720
types like numbers, booleans and
strings, but they can

5
00:00:14,720 --> 00:00:20,020
also represent more complex chunks of
data in the form of objects and arrays.

6
00:00:20,020 --> 00:00:23,620
That's right, a key can point
to other nested objects or

7
00:00:23,620 --> 00:00:25,690
arrays of other objects.

8
00:00:25,690 --> 00:00:27,870
Let's take a look at
our shoe example again.

9
00:00:27,870 --> 00:00:31,360
You might suspect that the style
key maps to a nested object.

10
00:00:31,360 --> 00:00:36,480
because the contents are enclosed in
curly braces, and you'd be right.

11
00:00:36,480 --> 00:00:39,230
Okay, so
the value is a nested JSON object.

12
00:00:40,250 --> 00:00:42,400
Well, how do I reverse it?

13
00:00:42,400 --> 00:00:44,544
Well, if you look at its contents,

14
00:00:44,544 --> 00:00:47,780
it just continues the same
key value pair structure.

15
00:00:47,780 --> 00:00:50,430
You can read it the same
way you did before.

16
00:00:50,430 --> 00:00:53,160
This time, we're just one level deeper.

17
00:00:53,160 --> 00:00:55,640
So let's look at the key categories.

18
00:00:55,640 --> 00:01:00,970
It has a value that starts with
a left bracket, has contents,

19
00:01:00,970 --> 00:01:03,410
and then closes with a right bracket.

20
00:01:03,410 --> 00:01:05,330
What do you think
the brackets represent?

21
00:01:07,020 --> 00:01:08,880
This is the syntax for an array.

22
00:01:09,960 --> 00:01:14,740
JSON arrays can contain primitive
data types or JSON objects.

23
00:01:14,740 --> 00:01:17,060
Similar to arrays that
you've seen in Java,

24
00:01:17,060 --> 00:01:20,949
you can navigate the contents
of an array using indices.

25
00:01:22,160 --> 00:01:27,400
At the initial position, which is index
zero, we have the string value of boot.

26
00:01:29,030 --> 00:01:33,850
At the following index position,
index one, we have winklepicker.

27
00:01:35,730 --> 00:01:40,940
Then we have a key color, which maps
to the primitive string of black.

28
00:01:42,270 --> 00:01:45,095
That completes our example,
JSON, describing a shoe.

29
00:01:46,440 --> 00:01:48,505
But as you can probably imagine,

30
00:01:48,505 --> 00:01:52,799
the nesting that we saw in the shoe
example can continue to compound.

31
00:01:52,799 --> 00:01:57,506
That array could have contained more
objects and arrays inside of it,

32
00:01:57,506 --> 00:02:01,175
and that means that the data
payload could get really,

33
00:02:01,175 --> 00:02:04,151
really big, and that's absolutely true.

34
00:02:04,151 --> 00:02:06,884
But the cool thing is
despite the potential size,

35
00:02:06,884 --> 00:02:10,110
we've got a dead simple way
to navigate through it.

36
00:02:10,110 --> 00:02:14,390
We just need to follow
the key value pairs.

37
00:02:15,750 --> 00:02:17,280
Not sure what I mean?

38
00:02:17,280 --> 00:02:20,330
In the next node,
we'll explore more complex examples and

39
00:02:20,330 --> 00:02:23,980
get more practice
traversing larger JSON.

40
00:02:23,980 --> 00:02:24,520
But first,

41
00:02:24,520 --> 00:02:27,660
let's get some practice identifying
different JSON components in a quiz.

42
00:02:29,330 --> 00:02:33,520
In the next quiz, you'll get to practice
distinguishing between a JSON object,

43
00:02:33,520 --> 00:02:38,560
array, or primitive by looking at
a completely different JSON response.

44
00:02:38,560 --> 00:02:41,370
This is an example from the Twitter API

45
00:02:41,370 --> 00:02:44,920
where you can request the most
recent tweets that a user has liked.

46
00:02:44,920 --> 00:02:47,100
This is the URL we query for the data,

47
00:02:47,100 --> 00:02:50,530
and the response comes
back in JSON format.

48
00:02:50,530 --> 00:02:54,230
It does require authentication, which
means you need to provide a username and

49
00:02:54,230 --> 00:02:56,370
password to access the data.

50
00:02:56,370 --> 00:02:59,060
You can't just copy
the URL into a browser and

51
00:02:59,060 --> 00:03:01,850
see the results like we did for
the earthquake data.

52
00:03:01,850 --> 00:03:05,970
Without getting bogged down into
the details of authentication,

53
00:03:05,970 --> 00:03:10,900
the documentation gives us an example
request and example response.

54
00:03:10,900 --> 00:03:14,200
This response looks similar to
the JSON we looked at earlier.

55
00:03:14,200 --> 00:03:18,759
There are key value pairs, and some of
the values are JSON objects with braces,

56
00:03:19,790 --> 00:03:23,560
and some of them are JSON
arrays with the brackets.

57
00:03:23,560 --> 00:03:28,530
Other values that you'll see in here
include strings, booleans, numbers.

58
00:03:28,530 --> 00:03:33,180
Cris and I did our own query to this
API and got back this response.

59
00:03:33,180 --> 00:03:37,230
For the quiz, look at this response and
answer the questions.

60
00:03:37,230 --> 00:03:39,970
In this quiz, I've asked you
about certain keys in the JSON

61
00:03:39,970 --> 00:03:43,500
response that we got back form
the Twitter favorites API.

62
00:03:43,500 --> 00:03:47,160
The link to my response and the original
documentation site is below.

63
00:03:48,700 --> 00:03:54,950
Determine if the given key maps
to a value that is a JSON object,

64
00:03:54,950 --> 00:03:57,470
a JSON array, or a JSON primitive.
