1
00:00:05,670 --> 00:00:08,600
Hey James, wasn't it kind of annoying that you had to type out

2
00:00:08,600 --> 00:00:10,660
the same if statement twice?

3
00:00:10,660 --> 00:00:13,810
>> Yeah. I think I broke one of the cardinal rules of programming: don't

4
00:00:13,810 --> 00:00:14,645
repeat yourself.

5
00:00:14,645 --> 00:00:15,180
>> Mm-hm.

6
00:00:15,180 --> 00:00:16,030
Yeah.

7
00:00:16,030 --> 00:00:17,100
And with that in mind,

8
00:00:17,100 --> 00:00:19,009
I think it's probably time that we should talk about loops.

9
00:00:20,310 --> 00:00:22,810
>> So is that why we're looking at an animated GIF?

10
00:00:22,810 --> 00:00:24,470
>> Okay. That's one reason.

11
00:00:24,470 --> 00:00:27,290
The second is because that is an awesome GIF.

12
00:00:27,290 --> 00:00:30,510
But really, I think the important part here is that a GIF repeats itself

13
00:00:30,510 --> 00:00:31,510
automatically.

14
00:00:31,510 --> 00:00:34,470
We don't have to tell a GIF to play itself again, it just does it.

15
00:00:34,470 --> 00:00:37,515
And in fact, JavaScript gives us a few tools to do this as well.

16
00:00:37,515 --> 00:00:41,110
And we're going to go ahead and start with a while loop.

17
00:00:41,110 --> 00:00:45,000
>> A while loop lets us repeat a piece of code so

18
00:00:45,000 --> 00:00:47,660
long as some condition evaluates to true.

19
00:00:49,160 --> 00:00:51,920
Once it doesn't evaluate to true, we exit the while loop.

20
00:00:53,470 --> 00:00:56,630
The syntax is while condition.

21
00:00:56,630 --> 00:00:59,970
And then in curly braces, some sort of code here.

22
00:00:59,970 --> 00:01:03,480
So for this one we have doSomething();.

23
00:01:03,480 --> 00:01:05,556
>> Hey let's let's show an example.

24
00:01:05,556 --> 00:01:14,200
>> Okay. While(cameron.job ==="course dev") should make courses.

25
00:01:14,200 --> 00:01:15,610
>> I like that example.

26
00:01:15,610 --> 00:01:20,425
Notice how this is similar to python, but it includes conditions in parentheses,

27
00:01:20,425 --> 00:01:24,430
and actions and curly braces, just like with if statements.

28
00:01:24,430 --> 00:01:26,670
Remember, if the condition evaluates to true,

29
00:01:26,670 --> 00:01:30,700
we'll do the action, then ask ourselves again, is the condition true?

30
00:01:30,700 --> 00:01:32,740
We'll continue following this loop.

31
00:01:32,740 --> 00:01:36,230
Until the condition is no longer true, at which point will exit the loop.

32
00:01:36,230 --> 00:01:40,260
Over here, so long as my job is course developer, I'll keep making courses.

33
00:01:40,260 --> 00:01:43,430
The while loop will ask itself again, is Cameron still a course developer?

34
00:01:43,430 --> 00:01:45,160
If so, make courses.

35
00:01:45,160 --> 00:01:45,940
Until at some point,

36
00:01:45,940 --> 00:01:50,250
when my job is no longer course developer, at which point will exit the loop.

37
00:01:50,250 --> 00:01:51,105
>> How might that happen?

38
00:01:51,105 --> 00:01:51,860
>> Hm.

39
00:01:51,860 --> 00:01:54,080
Perhaps there's a limit on how many courses I can make.

40
00:01:54,080 --> 00:01:55,690
10 courses maximum.

41
00:01:55,690 --> 00:01:57,190
You know what?

42
00:01:57,190 --> 00:01:58,310
Let's see what this looks like in code.

43
00:01:59,850 --> 00:02:00,510
Outside of the loop,

44
00:02:00,510 --> 00:02:03,530
I'll create an iterator called courses, which is going to start at 0.

45
00:02:03,530 --> 00:02:08,130
This is going to keep track of how many courses I've made.

46
00:02:08,130 --> 00:02:09,258
After making a course,

47
00:02:09,258 --> 00:02:11,960
I'm going to add 1 to the number of courses that I've made.

48
00:02:13,310 --> 00:02:16,250
Let's add an if statement to our loop that checks if the number of courses I've

49
00:02:16,250 --> 00:02:17,320
made is 10.

50
00:02:17,320 --> 00:02:20,146
And if so, changes my job to learning specialist.

51
00:02:20,146 --> 00:02:24,379
Afterwards, the loop exits.

52
00:02:24,379 --> 00:02:25,084
>> Interesting.

53
00:02:25,084 --> 00:02:26,830
Let's check to see if that works.

54
00:02:26,830 --> 00:02:31,870
Here's the make course function that console logs Made a course every time

55
00:02:31,870 --> 00:02:32,419
it's run.

56
00:02:32,419 --> 00:02:37,910
And lets console.log,(cameron.job) when we're finished running the loop.

57
00:02:39,030 --> 00:02:40,830
So, when we run it,

58
00:02:40,830 --> 00:02:46,250
we can see that it's printed made a course to the counsel log 10 times.

59
00:02:46,250 --> 00:02:48,400
And then when it finished,

60
00:02:48,400 --> 00:02:51,310
it printed out learning specialist, Cameron's new job.
