1
00:00:00,000 --> 00:00:03,000
That's the whole compiler.

2
00:00:03,000 --> 00:00:07,000
I want to show you just a little bit of the possibility of doing some compiler optimizations.

3
00:00:07,000 --> 00:00:11,000
Notice this sort of barrier here where we introduce lambda, where we introduce a function.

4
00:00:11,000 --> 00:00:14,000
Remember I said that there's two parts to a compiler.

5
00:00:14,000 --> 00:00:17,000
There's the part where we're first defining a language.

6
00:00:17,000 --> 00:00:20,000
When we call lit and give it a string,

7
00:00:20,000 --> 00:00:23,000
then we're doing some work to build up this function that's going to do the work

8
00:00:23,000 --> 00:00:25,000
every time we call it again.

9
00:00:25,000 --> 00:00:29,000
Anything that's on the right of the lambda is stuff that gets done every time.

10
00:00:29,000 --> 00:00:33,000
Anything that's to the left is stuff that gets done only once.

11
00:00:33,000 --> 00:00:38,000
Notice that there is a part here building up this set of s that I'm doing every time,

12
00:00:38,000 --> 00:00:41,000
but that's wasteful because s doesn't depend on the input.

13
00:00:41,000 --> 00:00:44,000
S is always going to be the same.

14
00:00:44,000 --> 00:00:50,000
I can pull this out and do it at compile time rather than do it every time we call the resulting function.

15
00:00:50,000 --> 00:00:57,000
I'll make this set<u>of</u>s and I'll give that a name--set<u>of</u>s.

16
00:00:57,000 --> 00:01:02,000
Over here I'll do set<u>of</u>s equals that value.

17
00:01:02,000 --> 00:01:05,000
It looks like I'd better break this up into multiple lines.

18
00:01:05,000 --> 00:01:11,000
Now I pulled out that precomputation so it only gets done once rather than gets done every time.

19
00:01:11,000 --> 00:01:13,000
You could look around for other places to do that.

20
00:01:13,000 --> 00:01:17,000
I could pull out the computation of this set of characters

21
00:01:17,000 --> 00:01:19,000
and do that only once as well.

22
00:01:19,000 --> 00:01:23,000
That's a lifting operation that stops us from repeating over and over again

23
00:01:23,000 --> 00:01:25,000
what we only need to do once.

24
00:01:25,000 --> 00:01:28,000
That's one of the advantages of having a compiler in the loop.

25
00:01:28,000 --> 99:59:59,999
There is a place to do something once rather than to have to repeat it every time.
