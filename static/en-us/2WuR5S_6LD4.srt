1
00:00:00,640 --> 00:00:02,820
So now we have a simple service.

2
00:00:02,820 --> 00:00:04,350
Wasn't that easy?

3
00:00:04,350 --> 00:00:06,840
But it still doesn't wake itself up.

4
00:00:06,840 --> 00:00:09,710
Fortunately, there's
a system service for that.

5
00:00:09,710 --> 00:00:12,860
This is a good opportunity to
introduce the alarm manager.

6
00:00:12,860 --> 00:00:15,570
The alarm manager allows you to
tell the system that you want it to

7
00:00:15,570 --> 00:00:18,740
wake a component of your application
up after a period of time and

8
00:00:18,740 --> 00:00:20,980
do some processing in the background.

9
00:00:20,980 --> 00:00:24,170
You can even have it wake up your
application periodically, but

10
00:00:24,170 --> 00:00:26,780
what do we wake up in the background?

11
00:00:26,780 --> 00:00:29,560
That would be an Android
component we haven't seen before,

12
00:00:29,560 --> 00:00:31,700
called a broadcast receiver.

13
00:00:31,700 --> 00:00:35,250
A broadcast receiver is a special
class that is used to receive

14
00:00:35,250 --> 00:00:38,750
intent broadcasts,
often from other applications.

15
00:00:38,750 --> 00:00:42,030
Typically, a broadcast receiver
will register an intent filter for

16
00:00:42,030 --> 00:00:43,610
these broadcasts.

17
00:00:43,610 --> 00:00:47,320
It's also one way the application
will listen in on alarms.

18
00:00:47,320 --> 00:00:51,560
Alarms take advantage of a new kind
of intent, called a PendingIntent.

19
00:00:51,560 --> 00:00:54,170
A PendingIntent is
a special kind of intent

20
00:00:54,170 --> 00:00:57,470
that is handed from one
application to another.

21
00:00:57,470 --> 00:01:01,310
The big difference between
a PendingIntent and a regular intent

22
00:01:01,310 --> 00:01:05,970
is that a PendingIntent gives permission
for the app using it to send data with

23
00:01:05,970 --> 00:01:10,650
the same permissions and application
identity as the app that created it.

24
00:01:10,650 --> 00:01:15,520
In Android this allows the system
process to call your application back

25
00:01:15,520 --> 00:01:20,770
in a specific asynchronous way without
compromising the Android security model.

26
00:01:20,770 --> 00:01:24,830
In alarms a pending intent
is used by the alarm manager

27
00:01:24,830 --> 00:01:27,330
to talk to the broadcast
receiver we create.

28
00:01:28,960 --> 00:01:30,790
Let's add some alarm stuff.

29
00:01:30,790 --> 00:01:34,475
First, I'm going to add
a BroadcastReceiver as a static inner

30
00:01:34,475 --> 00:01:36,970
class of SunshineService.

31
00:01:36,970 --> 00:01:39,060
Since this is an Android component,

32
00:01:39,060 --> 00:01:41,630
I'll register this broadcast
receiver in the manifest.

33
00:01:42,980 --> 00:01:46,590
Note the way a static
inner class is notated.

34
00:01:46,590 --> 00:01:47,490
Okay.

35
00:01:47,490 --> 00:01:51,570
I've given you the bones of a broadcast
receiver that can handle an alarm.

36
00:01:51,570 --> 00:01:52,450
But now it's your turn.

37
00:01:53,520 --> 00:01:56,920
You can create a PendingIntent
from an explicit intent

38
00:01:56,920 --> 00:02:00,580
to have the alarm manager
activate your broadcast receiver.

39
00:02:00,580 --> 00:02:03,920
I recommend setting the alarm
to something absurdly short,

40
00:02:03,920 --> 00:02:06,910
like five seconds, so
you can easily test that it's working.
