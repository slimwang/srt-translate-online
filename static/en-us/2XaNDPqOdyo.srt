1
00:00:00,004 --> 00:00:05,976
In Problem Set #2 you will be implementing a parallel algorithm for blurring images.

2
00:00:05,976 --> 00:00:08,408
Here is an example of the effect we're talking about.

3
00:00:08,408 --> 00:00:16,575
Here's your original image and here's the image after we apply a blur effect to that original image.

4
00:00:16,575 --> 00:00:20,849
Blurring an image involves averaging a local neighborhood of pixels,

5
00:00:20,849 --> 00:00:25,017
and it is expressed naturally using a parallel stencil operation.

6
00:00:25,017 --> 00:00:31,123
Stencil operations come up all the time in all types of application domains.

7
00:00:31,123 --> 00:00:35,268
This is why we are going to focus in on stencil in this homework.

8
00:00:35,268 --> 00:00:42,332
Let's take a closer look at a simple example demonstrating the kind of local averaging that we are talking about here.

9
00:00:42,332 --> 00:00:47,139
Suppose we have the following pixel representation of an image,

10
00:00:47,139 --> 00:00:52,683
and we want to calculate the average intensity value for this pixel right here.

11
00:00:52,683 --> 00:00:54,027
What do we do?

12
00:00:54,027 --> 00:01:03,501
First we take the value of this pixel, and then we add this value to the value of all its neighbors.

13
00:01:03,501 --> 00:01:12,001
So 10 4 6 2 1 2 3 and 6, and once when we add up all these values then we take the average.

14
00:01:12,001 --> 00:01:20,046
Since we have 9 elements or 9 pixels here, then we multiply the sum by 1/9,

15
00:01:20,046 --> 00:01:27,075
and that is how you would calculate the average intensity value for a pixel in an image.

16
00:01:27,075 --> 00:01:30,477
If we do this operation for every pixel in the image,

17
00:01:30,477 --> 00:01:34,454
we will arrive at a blurred version of input image.

18
00:01:34,454 --> 00:01:42,087
However it turns out that performing an unweighted average of pixels can sometimes look really ugly,

19
00:01:42,087 --> 00:01:47,761
and we can achieve a better looking blur by computing a weighted average of these pixels.

20
00:01:47,761 --> 00:01:51,265
What I mean by weighted average is the following.

21
00:01:51,265 --> 00:01:59,685
Rather than multiplying 1/9 to each pixel value here, we will multiply each pixel value by a different weight.

22
00:01:59,685 --> 00:02:04,724
So w1 is different than w2. And w2 may be different than w3.

23
00:02:04,724 --> 00:02:07,265
And w3 may be different than w4.

24
00:02:07,265 --> 00:02:12,032
And that is the approach that we will take in Problem Set #2.

25
00:02:12,032 --> 00:02:15,402
Here is an image produced by weighted blur,

26
00:02:15,402 --> 00:02:18,438
and here is an image produced by unweighted blur,

27
00:02:18,438 --> 00:02:21,038
and as you can see that the weighted blur

28
00:02:21,038 --> 00:02:26,178
is much smoother than the unweighted blur counterpart.

29
00:02:26,178 --> 00:02:34,207
In this problem set we will give you a small 2D array that contains weight values between 0 and 1 as follows.

30
00:02:34,207 --> 00:02:36,053
But this is just an example.

31
00:02:36,053 --> 00:02:40,568
The actual weight values that we will use will look like this:

32
00:02:40,568 --> 00:02:45,213
the smooth shape of the weights, as you can see here,

33
00:02:45,213 --> 00:02:49,116
will produce the nice looking blur effect that we saw earlier.

34
00:02:49,116 --> 00:02:51,245
And also, here's a note.

35
00:02:51,245 --> 00:02:56,012
We will blur color images by blurring each color channel independently,

36
00:02:56,012 --> 00:03:04,380
and we will include a more detailed mathematical formula on blurring computations in the instructor comments.

37
00:03:04,380 --> 00:03:08,056
This is what you need to do for Problem Set #2.

38
00:03:08,056 --> 00:03:11,460
First, you will need to write the actual blur kernel.

39
00:03:11,460 --> 00:03:19,700
Second, you will need to actually write the kernel that separates the color image to its R, G, B channels.

40
00:03:19,700 --> 00:03:26,880
And third we will give you the opportunity to allocate memory on the device for the filter,

41
00:03:26,880 --> 00:03:30,610
so you will have an opportunity to code CUDA mem copies.

42
00:03:30,610 --> 00:03:37,961
And fourth, you will have to set the correct or the optimal grid and block size for this problem set.

43
00:03:37,961 --> 00:03:41,832
And, as you remember in Problem Set #1,

44
00:03:41,832 --> 00:03:48,394
the grid and the block size has a huge impact on your program's execution time.

45
00:03:48,394 --> 00:03:52,968
Set the size correctly and be careful.

46
00:03:52,968 --> 00:03:58,675
Lastly your submission will be evaluated based on correctness and speed.

47
00:03:58,675 --> 00:04:03,012
But we recommend that you focus on correctness first.

48
00:04:03,012 --> 00:04:09,718
Then after your blurring kernal is run correctly then we recommend that you try to make it run faster.

49
00:04:09,718 --> 00:04:17,232
And lastly we have supplied serial code that you can reference and compare your solution against.

50
00:04:17,232 --> 00:04:19,983
Good luck on writing Problem Set #2.

51
00:04:19,983 --> 00:04:23,983
If you have any questions, feel free to ask in the class forums.
