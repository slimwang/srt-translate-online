1
00:00:00,270 --> 00:00:03,400
Now that you've seen how to make changes
public by sharing them on GitHub,

2
00:00:03,400 --> 00:00:07,260
I wanted to show you a work flow you can
use to get feedback on your changes to

3
00:00:07,260 --> 00:00:10,180
a project before you
update the master branch.

4
00:00:10,180 --> 00:00:14,070
As an example, here is the recipes
repository both locally on my own

5
00:00:14,070 --> 00:00:16,820
computer and my fork on GitHub.

6
00:00:16,820 --> 00:00:19,210
If I have a change I
want Sarah's feedback on,

7
00:00:19,210 --> 00:00:21,760
then first I'll make that change
locally on a separate branch.

8
00:00:22,770 --> 00:00:25,260
Next, I'll push that change to my fork.

9
00:00:25,260 --> 00:00:27,300
Now my change is shared on GitHub, so

10
00:00:27,300 --> 00:00:30,600
Sarah can see it, but
it's not in the master branch.

11
00:00:30,600 --> 00:00:33,570
That way if Sarah finds a problem
with my change when she reviews it,

12
00:00:33,570 --> 00:00:35,100
I won't have broken master.

13
00:00:36,210 --> 00:00:39,850
Next, I'll use a feature of GitHub
called pull requests that make it

14
00:00:39,850 --> 00:00:43,500
easy for Sarah to see exactly what
I've changed and leave comments.

15
00:00:43,500 --> 00:00:47,370
When we're both ready, I'll merge
this change into the master branch.

16
00:00:47,370 --> 00:00:50,860
Right now, I want to change the cake
recipe to use canola oil instead of

17
00:00:50,860 --> 00:00:53,820
vegetable oil, since it's healthier.

18
00:00:53,820 --> 00:00:56,165
First, I'll make a new
branch called different-oil.

19
00:00:57,210 --> 00:01:01,880
Then I'll check out that branch, and
I'll go ahead and make the change.

20
00:01:01,880 --> 00:01:04,340
Now, I want to show Sarah
the changes I've made, so

21
00:01:04,340 --> 00:01:08,690
I'll add them, commit them,
and push them.

22
00:01:08,690 --> 00:01:12,070
Note that this time I'm running
git push origin different-oil to

23
00:01:12,070 --> 00:01:15,070
push the different-oil
branch instead of master.

24
00:01:15,070 --> 00:01:18,530
Now that I've pushed my branch,
it's possible to see it on GitHub.

25
00:01:18,530 --> 00:01:21,930
To see what branches exist,
I can choose this drop down, and

26
00:01:21,930 --> 00:01:24,940
I can see that right now I'm
looking at the master branch.

27
00:01:24,940 --> 00:01:27,770
And here's the different-oil
branch that I just pushed.

28
00:01:27,770 --> 00:01:31,270
This list of branches is the same list
I would see if I ran get branch on

29
00:01:31,270 --> 00:01:33,250
the repository on GitHub.

30
00:01:33,250 --> 00:01:36,370
So only branches that I've
pushed to GitHub will show up.

31
00:01:36,370 --> 00:01:40,360
To see what the files look like on the
different-oil branch, I can click on it,

32
00:01:40,360 --> 00:01:42,780
which analogous to running git checkout.

33
00:01:42,780 --> 00:01:44,560
Sarah could also do this and

34
00:01:44,560 --> 00:01:48,090
then view the commit history
to see what changes I've made.

35
00:01:48,090 --> 00:01:51,740
Instead though I'm going to create
a pull request for my changes.

36
00:01:51,740 --> 00:01:55,710
I'll go back to the main page for
the repository, and I could click

37
00:01:55,710 --> 00:01:59,918
the compare and pull request button here
since I just pushed the branch recently.

38
00:01:59,918 --> 00:02:03,340
But if I'd pushed it less recently and
that button wasn't there, then I

39
00:02:03,340 --> 00:02:08,430
would check out this branch, scroll
down a little and click Pull Request.

40
00:02:08,430 --> 00:02:11,330
By default, GitHub assumes I
want to merge my changes into

41
00:02:11,330 --> 00:02:15,470
the original repository,
which is Larry's repository.

42
00:02:15,470 --> 00:02:20,170
But instead, I want to merge my changes
into the master branch of my own fork.

43
00:02:20,170 --> 00:02:22,640
So I'll scroll to right and click Edit.

44
00:02:22,640 --> 00:02:28,179
And now I can change the base
fork to cbuckey-uda/recipes.

45
00:02:28,179 --> 00:02:31,832
Now I'll scroll down and to the right,
and click Create pull request.

46
00:02:31,832 --> 00:02:35,690
Now, GitHub makes a view that shows
all of the commits that are present in

47
00:02:35,690 --> 00:02:39,560
this pull request and
all of the changes that have been made.

48
00:02:39,560 --> 00:02:41,590
If I go back up to the repository and

49
00:02:41,590 --> 00:02:46,020
scroll to the right, I can also
see a list of all Pull Requests.

50
00:02:46,020 --> 00:02:47,660
So, Sarah can check this list and

51
00:02:47,660 --> 00:02:50,950
see that I'd like to merge
these changes into master.

52
00:02:50,950 --> 00:02:53,670
Now, I'll turn you over to Sarah
while she looks at my pull request.

53
00:02:54,790 --> 00:02:58,220
>> Since I'm watching Caroline's
fork of the recipes repository,

54
00:02:58,220 --> 00:03:01,310
I got an email notifying me
when she made a pull request.

55
00:03:01,310 --> 00:03:04,753
I can click through in this email
to see the pull request on GitHub.

56
00:03:04,753 --> 00:03:07,480
You might be wondering why
these are called pull requests.

57
00:03:08,480 --> 00:03:12,600
Caroline initiated this request, but
she's not asking to pull anything.

58
00:03:12,600 --> 00:03:15,920
She's trying to merge one of
her changes into master, or

59
00:03:15,920 --> 00:03:19,380
you might think of this as her
trying to push into master.

60
00:03:19,380 --> 00:03:21,390
So why is it called a pull request?

61
00:03:21,390 --> 00:03:27,200
It's because she's requesting that I
pull her branch into the master branch.

62
00:03:27,200 --> 00:03:30,170
Another good name for
this might be a merge request.

63
00:03:30,170 --> 00:03:33,370
But, pull request is what GitHub picked,
so we'll go with that.

64
00:03:33,370 --> 00:03:36,740
So Caroline wants me to merge
her different-oil branch into

65
00:03:36,740 --> 00:03:38,140
the master branch.

66
00:03:38,140 --> 00:03:39,910
Since the master branch
is the main branch, and

67
00:03:39,910 --> 00:03:42,880
it's what people will see when
they first come to the repository,

68
00:03:42,880 --> 00:03:46,470
I want to make sure that it really looks
good before actually doing the merge.

69
00:03:46,470 --> 00:03:47,160
All right.

70
00:03:47,160 --> 00:03:52,900
It looks like she just changed
vegetable to, oh, canols?

71
00:03:52,900 --> 00:03:56,420
I think she meant canola,
based on the name of the pull request.

72
00:03:56,420 --> 00:03:59,190
I don't really want to merge this
in because it has a spelling error.

73
00:03:59,190 --> 00:04:02,300
That would probably be confusing if
anybody was looking at this later.

74
00:04:02,300 --> 00:04:05,730
So instead of merging it now,
I'm actually going to leave a comment.

75
00:04:05,730 --> 00:04:07,190
I could put my comment here,

76
00:04:07,190 --> 00:04:10,830
commenting on the whole change, or
I could do an inline comment here.

77
00:04:10,830 --> 00:04:12,230
I think I'll choose that option.

78
00:04:15,410 --> 00:04:18,060
At this point,
I'll go back to the main pull request.

79
00:04:18,060 --> 00:04:21,209
If there were more commits,
I could look at them here, but

80
00:04:21,209 --> 00:04:24,070
since there's only one,
I don't need to look at anything else.

81
00:04:24,070 --> 00:04:26,700
If I had decided that the change
was good, and ready to be pulled in

82
00:04:26,700 --> 00:04:30,840
right now, I could have pressed
this Merge pull request button.

83
00:04:30,840 --> 00:04:34,190
This will only appear when the merge
could go through without a conflict.

84
00:04:34,190 --> 00:04:37,410
So it's a nice indicator to the person
reviewing the changes, as to whether or

85
00:04:37,410 --> 00:04:38,680
not it's really ready to go.

86
00:04:39,880 --> 00:04:43,080
If the change would have created a merge
conflict, I would ask Caroline to merge

87
00:04:43,080 --> 00:04:47,480
master into her branch first, so that I
could see how she resolves the conflict.

88
00:04:47,480 --> 00:04:50,710
That way I know that when her code
finally does get added to master,

89
00:04:50,710 --> 00:04:53,030
there's no chance that something's
going to go wrong with a bad merge.

90
00:04:54,070 --> 00:04:56,231
All right,
at this point you should go ahead and

91
00:04:56,231 --> 00:04:59,855
make the change that Caroline described
by creating a new branch off of master,

92
00:04:59,855 --> 00:05:03,337
and committing a change that switches
vegetable oil out in favor of canola.

93
00:05:03,337 --> 00:05:05,100
You can make a typo or
other mistake on purpose so

94
00:05:05,100 --> 00:05:08,190
that you'll have a reason to
update the pull request later.

95
00:05:08,190 --> 00:05:09,570
You don't have to.

96
00:05:09,570 --> 00:05:12,370
Go ahead and push your new branch
to the fork, and then use GitHub to

97
00:05:12,370 --> 00:05:16,150
initiate a pull request, but make sure
not to click the Merge button yet
