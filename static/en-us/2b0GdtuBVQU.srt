1
00:00:00,000 --> 00:00:03,000
Here's one way to define factorial.

2
00:00:03,000 --> 00:00:06,000
There are lots and lots of ways to solve this, so we're going to define

3
00:00:06,000 --> 00:00:09,000
a procedure and its input is the number "n."

4
00:00:09,000 --> 00:00:12,000
What we want to do is compute this functionÃ¢ÂÂwe're going to compute

5
00:00:12,000 --> 00:00:15,000
"n" times "n" minus one times "n" minus two.

6
00:00:15,000 --> 00:00:19,000
We are going to need a variable to keep track of the results as we go,

7
00:00:19,000 --> 00:00:22,000
as well as a variable to keep track of how many times we go.

8
00:00:22,000 --> 00:00:26,000
We're going to define a procedure that computes the factorial of "n."

9
00:00:26,000 --> 00:00:29,000
What we need to do is multiply all these numbers, so we're going to have

10
00:00:29,000 --> 00:00:32,000
a variable that keeps track of the results so far.

11
00:00:32,000 --> 00:00:37,000
We'll start by initializing that to one, so we'll call that "result" and we'll

12
00:00:37,000 --> 00:00:39,000
set its initial value to one.

13
00:00:39,000 --> 00:00:44,000
We're going to keep multiplying by "n" until we get to the end.

14
00:00:44,000 --> 00:00:47,000
We're going to have our "while" loop where the test condition is as long as

15
00:00:47,000 --> 00:00:49,000
"n" is greater than equal to one.

16
00:00:49,000 --> 00:00:52,000
We're going to start with "n" as the value that was passed in.

17
00:00:52,000 --> 00:00:54,000
We're going to subtract one each time we go through the loop

18
00:00:54,000 --> 00:00:57,000
until we get down to one, and keep updating the result.

19
00:00:57,000 --> 00:01:00,000
The result keeps updating, so we want the result to be the previous

20
00:01:00,000 --> 00:01:03,000
result times "n."

21
00:01:03,000 --> 00:01:07,000
We also have to change the value of "n" to keep reducing "n" as we go.

22
00:01:07,000 --> 00:01:10,000
We subtract one from "n" every time through the loop.

23
00:01:10,000 --> 00:01:14,000
The result is multiplied by the current value of "n"Ã¢ÂÂ"n" is decreased by one.

24
00:01:14,000 --> 00:01:17,000
We keep going until we get to "n" is equal to one.

25
00:01:17,000 --> 00:01:19,000
We're not quite done yet.

26
00:01:19,000 --> 00:01:23,000
We want to return a "result," and the value that we want is stored

27
00:01:23,000 --> 00:01:27,000
in this variable "result," so we "return results" here.

28
00:01:27,000 --> 00:01:29,000
Let's try that in the Python interpreter.

29
00:01:29,000 --> 00:01:34,000
Now we'll see what happens when we have the input 4Ã¢ÂÂour child

30
00:01:34,000 --> 00:01:36,000
playing with the blocks.

31
00:01:36,000 --> 00:01:37,000
We see the results as 24.

32
00:01:37,000 --> 00:01:40,000
They're 24 different ways to arrange the four blocks.

33
00:01:40,000 --> 00:01:45,000
Factorials increase pretty quickly, so we could also use the factorial

34
00:01:45,000 --> 00:01:48,000
procedure to figure out the number of different ways to arrange a deck

35
00:01:48,000 --> 00:01:49,000
of playing cards.

36
00:01:49,000 --> 00:01:53,000
If we have a deck with 50 cards, there are 52 ways to pick the first card,

37
00:01:53,000 --> 00:01:56,000
51 ways to pick the second, and so forth.

38
00:01:56,000 --> 00:02:00,000
When we run this, we see that the factorial of 52 is this really big number.

39
00:02:00,000 --> 00:02:03,000
That's why you can have so many different card games.

40
00:02:03,000 --> 00:02:07,000
Every time you play, the arrangement of the cards is going to be different.
