1
00:00:00,000 --> 00:00:04,000
This exercise involves doubling in the games of Pig. What is doubling?

2
00:00:04,000 --> 00:00:09,000
If you're familiar with the game of backgammon, which is a gambling game with dice,

3
00:00:09,000 --> 00:00:11,000
doubling is a way to end the game early.

4
00:00:11,000 --> 00:00:15,000
And the idea is that when we start out, each game is worth 1 point.

5
00:00:15,000 --> 00:00:17,000
But in the course of the game, if 1 player is winning,

6
00:00:17,000 --> 00:00:21,000
then he can propose to double the stakes of the game

7
00:00:21,000 --> 00:00:29,000
so that it's worth 2 points--that it, say, costs $2 that the winner wins from the loser

8
00:00:29,000 --> 00:00:33,000
rather than $1 or âŹ2 or whatever currency we're playing with.

9
00:00:33,000 --> 00:00:37,000
Then when the player makes that move of doubling,

10
00:00:37,000 --> 00:00:39,000
then the opponent has a choice.

11
00:00:39,000 --> 00:00:42,000
He must immediately either accept or decline.

12
00:00:42,000 --> 00:00:47,000
If the opponent accepts, then we play the game and it's worth 2 points.

13
00:00:47,000 --> 00:00:51,000
If the opponent declines, then the proposer of the double immediately wins 1

14
00:00:51,000 --> 00:00:53,000
and the game is over.

15
00:00:53,000 --> 00:00:59,000
In backgammon, doubling can go on infinitely from 1 to 2 to 4 to 8 to 16 and so on.

16
00:00:59,000 --> 00:01:02,000
For Pig we're only going to allow 1 round of doubling.

17
00:01:02,000 --> 00:01:05,000
So the game is going to start off being worth 1 point

18
00:01:05,000 --> 00:01:08,000
and can go up to 2 points but no more than that.

19
00:01:08,000 --> 00:01:11,000
So we're going to define a whole new game.

20
00:01:11,000 --> 00:01:15,000
The top level function will be called play<u>pig</u>d--d for double--

21
00:01:15,000 --> 00:01:19,000
and all our functions will end in that d.

22
00:01:19,000 --> 00:01:25,000
A state in this game will be just like before, with 1 new value for the doubling amount.

23
00:01:25,000 --> 00:01:30,000
So a state will have the player to play, the score for me, the score for you,

24
00:01:30,000 --> 00:01:34,000
the pending score, and an extra field for the double.

25
00:01:34,000 --> 00:01:36,000
And the double can either be 1 or 2--

26
00:01:36,000 --> 00:01:39,000
and we said we're not going to allow it to go higher than that--

27
00:01:39,000 --> 00:01:41,000
or it can be the string double.

28
00:01:41,000 --> 00:01:44,000
It takes that value only at 1 point during the game.

29
00:01:44,000 --> 00:01:49,000
When the first player proposes a double and then the second player has the choice

30
00:01:49,000 --> 00:01:54,000
of accept or decline, that player will see double in the state field

31
00:01:54,000 --> 00:01:56,000
and then will have to reply.

32
00:01:56,000 --> 00:02:01,000
So what I want you to do is write these 2 functions: pig<u>actions</u>d,

33
00:02:01,000 --> 00:02:05,000
which takes a state and returns all the legal actions from that state,

34
00:02:05,000 --> 00:02:07,000
and here's the description of what they can be;

35
00:02:07,000 --> 00:02:11,000
and I want you to define some strategy function, strategy_d,

36
00:02:11,000 --> 00:02:16,000
that gives a state which is a state in the doubling Pig game

37
00:02:16,000 --> 00:02:19,000
and returns a good action.

38
00:02:19,000 --> 00:02:21,000
What do I mean by good?

39
00:02:21,000 --> 00:02:25,000
It's got to be better than this strategy function, hold<u>20</u>d,

40
00:02:25,000 --> 00:02:29,000
which holds at 20 and always accepts when offers a double,

41
00:02:29,000 --> 00:02:34,000
never doubles, and holds it at 20 or rolls otherwise.

42
00:02:34,000 --> 00:02:37,000
You should define a strategy that's better than that.

43
00:02:37,000 --> 00:02:42,000
If you want, you can try to define the optimal strategy, but you're not required to do that.

44
00:02:42,000 --> 00:02:46,000
I have defined for you the main function, play<u>pig</u>d.

45
00:02:46,000 --> 00:02:48,000
It's similar to what we had before,

46
00:02:48,000 --> 00:02:52,000
except the result that's returned is 2 values now--

47
00:02:52,000 --> 00:02:58,000
both the winning strategy and the value of the game, which will be either 1 or 2.

48
00:02:58,000 --> 00:03:02,000
And then the other difference is we got rid of the roll and hold functions,

49
00:03:02,000 --> 00:03:06,000
and now we replaced it with just 1 do function, which takes an action and a state

50
00:03:06,000 --> 00:03:12,000
and it passes along the die rolls and then does that action.

51
00:03:12,000 --> 00:03:15,000
So this is really the definition of how the game works

52
00:03:15,000 --> 00:03:20,000
where the actions can be rolling, holding, doubling, declining, and accepting.

53
00:03:21,000 --> 00:03:23,000
Then die rolls are as before.

54
00:03:23,000 --> 00:03:27,000
We define the clueless function, which just takes a random choice

55
00:03:27,000 --> 00:03:29,000
from among the legal actions.

56
00:03:29,000 --> 00:03:31,000
You should definitely be able to beat that,

57
00:03:31,000 --> 00:03:34,000
but you've also got to be able to beat the whole 20 strategy.
