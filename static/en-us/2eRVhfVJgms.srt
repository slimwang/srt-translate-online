1
00:00:00,480 --> 00:00:05,140
The next thing we are going to talk about is how can we dynamically increase

2
00:00:05,140 --> 00:00:09,080
the amount of physical memory, that's available

3
00:00:09,080 --> 00:00:12,890
to a particular operating system running on top

4
00:00:12,890 --> 00:00:15,740
of the hypervisor? As I mentioned, memory

5
00:00:15,740 --> 00:00:18,910
requirements tend to be bursty, and therefore. The

6
00:00:18,910 --> 00:00:22,080
hypervisor has to be able to allocate

7
00:00:22,080 --> 00:00:26,130
real physical memory or machine memory on demand

8
00:00:26,130 --> 00:00:29,280
to the requesting guest operating systems on top

9
00:00:29,280 --> 00:00:31,670
of it. Let's look at this picture here. Let's

10
00:00:31,670 --> 00:00:34,290
assume that this is the total amount of machine

11
00:00:34,290 --> 00:00:37,610
memory that's available to the hypervisor. And the hypervisor

12
00:00:37,610 --> 00:00:40,770
has divvied up the available machine memory among

13
00:00:40,770 --> 00:00:44,050
these two operating systems. So the house, meaning the

14
00:00:44,050 --> 00:00:47,480
hypervisor has no spare memory at all. It is

15
00:00:47,480 --> 00:00:51,010
completely divided up and given to these two guys.

16
00:00:51,010 --> 00:00:54,550
What if the windows operating system experiences

17
00:00:54,550 --> 00:00:57,750
a burst in memory usage, and therefore

18
00:00:57,750 --> 00:01:01,810
its Requiring more memory from the hypervizor.

19
00:01:01,810 --> 00:01:05,500
It may happen because of some resource hungry

20
00:01:05,500 --> 00:01:08,130
application that had been started up in

21
00:01:08,130 --> 00:01:11,130
windows, maybe a video streaming application, that

22
00:01:11,130 --> 00:01:12,690
is gobbling up a lot of physical

23
00:01:12,690 --> 00:01:16,530
memory, and therefore windows needs more memory and

24
00:01:16,530 --> 00:01:18,910
comes to the hypervizor asking for

25
00:01:18,910 --> 00:01:22,890
additional hardware resources. But unfortunately, the bank

26
00:01:22,890 --> 00:01:25,890
is empty. What the hyper-visor could do

27
00:01:25,890 --> 00:01:29,250
is recognize that. Well maybe, this operating

28
00:01:29,250 --> 00:01:34,380
system doesn't need all of the physical resources I allocated it. So I'm going

29
00:01:34,380 --> 00:01:41,590
to grab back, a portion of the physical memory that Linux has. And once

30
00:01:41,590 --> 00:01:46,680
I get back this portion of physical memory that I previously allocated to Linux,

31
00:01:46,680 --> 00:01:52,730
I can then give it to Windows to satisfy its sudden hunger for more

32
00:01:52,730 --> 00:01:55,890
memory. Well, this principle of robbing Peter

33
00:01:55,890 --> 00:02:00,280
to pay Paul. Can lead to unexpected

34
00:02:00,280 --> 00:02:04,070
and anomalous behavior, of applications running on

35
00:02:04,070 --> 00:02:06,600
the guest operating system. A standard approach of

36
00:02:06,600 --> 00:02:10,210
course would be to coach one of the guest

37
00:02:10,210 --> 00:02:13,610
operating system in this case perhaps Linux, to give up

38
00:02:13,610 --> 00:02:17,560
some of its physical memory voluntarily, To satsify the

39
00:02:17,560 --> 00:02:22,920
needs of a peer that is currently experiencing memory pressure.
