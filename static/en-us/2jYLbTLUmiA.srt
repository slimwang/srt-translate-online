1
00:00:00,150 --> 00:00:03,080
It might be helpful to cover
the basic types of relationships you

2
00:00:03,080 --> 00:00:04,800
can have in a database.

3
00:00:04,800 --> 00:00:06,400
Databases organize data.

4
00:00:06,400 --> 00:00:10,020
And these pieces of data can have
relationships with one another.

5
00:00:10,020 --> 00:00:11,530
There's one to one.

6
00:00:11,530 --> 00:00:13,300
One to many, many to one.

7
00:00:13,300 --> 00:00:15,430
And many to many relationships.

8
00:00:15,430 --> 00:00:19,620
And example of a one to one relationship
is the user and the e-mail address.

9
00:00:19,620 --> 00:00:23,750
We say one to one, because each
user has one email address and

10
00:00:23,750 --> 00:00:26,680
each email address is
associated with one user.

11
00:00:26,680 --> 00:00:30,020
At least in shopping list
plus-plus this is how it was.

12
00:00:30,020 --> 00:00:34,040
If instead, we'd allow each user
to have multiple email addresses,

13
00:00:34,040 --> 00:00:36,680
this would have been a one
to many relationship.

14
00:00:36,680 --> 00:00:40,620
Because one user could
contain many email addresses.

15
00:00:40,620 --> 00:00:43,570
Another example of this is
shopping lists and items.

16
00:00:43,570 --> 00:00:47,380
Each item exists uniquely in
exactly one shopping list, and

17
00:00:47,380 --> 00:00:50,070
therefore, has one
container shopping list.

18
00:00:50,070 --> 00:00:52,620
But if we look at a shopping
list's relation to items,

19
00:00:52,620 --> 00:00:54,550
it contains many items.

20
00:00:54,550 --> 00:00:57,810
An example of a Many to Many
relationship is the relationship between

21
00:00:57,810 --> 00:00:59,820
users and shopping lists.

22
00:00:59,820 --> 00:01:02,800
If we didn't have shared shopping
lists and you just made lists for

23
00:01:02,800 --> 00:01:06,290
yourself it would be a one
to many relationship.

24
00:01:06,290 --> 00:01:09,140
Each user would have a collection
of shopping lists they own and

25
00:01:09,140 --> 00:01:13,080
have access to and each of these
shopping lists would have exactly

26
00:01:13,080 --> 00:01:17,250
one person who could add them the owner,
but that would be a pretty lame app.

27
00:01:17,250 --> 00:01:21,470
Instead, each person has a collection
of many lists to have access to.

28
00:01:21,470 --> 00:01:25,660
And each list has a collection of
many users that have access to it.

29
00:01:25,660 --> 00:01:29,570
As you might example whereas a one to
one relationship is pretty easy to

30
00:01:29,570 --> 00:01:30,360
show in your data.

31
00:01:30,360 --> 00:01:34,630
And even a one to many relationship
is about as complicated as a list.

32
00:01:34,630 --> 00:01:38,160
Many to many relationships
get a bit more tricky.

33
00:01:38,160 --> 00:01:40,830
I've provided some links in
the instructor notes below

34
00:01:40,830 --> 00:01:43,730
that talk in more depth
about these relationships.

35
00:01:43,730 --> 00:01:47,850
When everything is constricted to tables
things get a little more interesting

36
00:01:47,850 --> 00:01:51,930
than in our Jayson world with how you
represent things like many to one and

37
00:01:51,930 --> 00:01:53,480
one to many relationships.
