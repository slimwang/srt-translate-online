1
00:00:00,320 --> 00:00:03,060
Recall that we had four copies in

2
00:00:03,060 --> 00:00:07,290
doing the client call, just transferring the arguments

3
00:00:07,290 --> 00:00:13,310
from the client to the server's domain. That was the original cost. And the four

4
00:00:13,310 --> 00:00:15,974
copies were first creating an RPC packet,

5
00:00:15,974 --> 00:00:18,860
copying that RP-, RPC packet into the kernel

6
00:00:18,860 --> 00:00:22,560
buffer. Copying the kernel buffer out into

7
00:00:22,560 --> 00:00:25,610
the server domain. And in the server domain,

8
00:00:25,610 --> 00:00:28,140
the server stub getting into action. Taking this

9
00:00:28,140 --> 00:00:30,580
information that had been passed up to it by

10
00:00:30,580 --> 00:00:33,420
the kernel, and putting it on the server stack

11
00:00:33,420 --> 00:00:36,130
to start executing the server code. So this was

12
00:00:36,130 --> 00:00:39,470
the original costs that we incurred in terms of

13
00:00:39,470 --> 00:00:43,280
copying. Now, life is much simpler. All that is

14
00:00:43,280 --> 00:00:47,030
happening is on the client side, the client's stub

15
00:00:47,030 --> 00:00:50,830
is copying the parameters into the A-stack. And I

16
00:00:50,830 --> 00:00:53,370
want to emphasize the word copying the parameters. That is

17
00:00:53,370 --> 00:00:56,460
very different from what was happening over here. Here the

18
00:00:56,460 --> 00:00:58,650
client stub was doing a lot more work. It actually

19
00:00:58,650 --> 00:01:01,620
had to serialize the data structures that are being passed

20
00:01:01,620 --> 00:01:06,110
as, as actually arguments into a sequence of bytes in

21
00:01:06,110 --> 00:01:09,170
this RPC message. Whereas here, it is simply copying it,

22
00:01:09,170 --> 00:01:13,240
because the client and the server know exactly what the

23
00:01:13,240 --> 00:01:16,300
semantics and syntax of the arguments that are being passed

24
00:01:16,300 --> 00:01:19,240
back and forth and therefore there is no need

25
00:01:19,240 --> 00:01:22,620
to serialize the data structure. It just has to create

26
00:01:22,620 --> 00:01:25,759
a copy of the parameters into the A-stack. And this

27
00:01:25,759 --> 00:01:28,560
A-stack is, of course, shared between the client and the

28
00:01:28,560 --> 00:01:31,115
server. So what the server stub is going to do

29
00:01:31,115 --> 00:01:34,350
is basically going to take the arguments that are now sitting

30
00:01:34,350 --> 00:01:38,140
in the A-stack and copy it into the E- stack.

31
00:01:38,140 --> 00:01:41,410
Remember, the execution stack provided by the kernel for executing

32
00:01:41,410 --> 00:01:44,335
the server procedure? That is a, the special

33
00:01:44,335 --> 00:01:46,990
server stack that we're going to use. So the

34
00:01:46,990 --> 00:01:50,900
arguments are copied by the server stub into

35
00:01:50,900 --> 00:01:53,490
the E-stack, and once it is done the

36
00:01:53,490 --> 00:01:55,783
server procedure is now ready to be executed

37
00:01:55,783 --> 00:01:59,000
in the server domain. So what we accomplished

38
00:01:59,000 --> 00:02:03,170
is that the entire client server interaction requires

39
00:02:03,170 --> 00:02:07,700
only two copies. One for copying the arguments

40
00:02:07,700 --> 00:02:10,139
from the client stack into the A-stack, which is

41
00:02:10,139 --> 00:02:13,780
usually called the marshal link of the arguments. And the

42
00:02:13,780 --> 00:02:18,150
second copy is taking the A-stack arguments that are

43
00:02:18,150 --> 00:02:21,990
sitting in the A-stack and copying it into the server's

44
00:02:21,990 --> 00:02:23,850
stack, that is the unmarshal link. So, these are

45
00:02:23,850 --> 00:02:27,600
the two copies involved. One on the client side and

46
00:02:27,600 --> 00:02:29,950
one on the server side, and both these copies are

47
00:02:29,950 --> 00:02:33,820
happening above the kernel. It's in the user space, right?

48
00:02:33,820 --> 00:02:37,970
It is in the space of the client that the client stub is making this copy of

49
00:02:37,970 --> 00:02:40,640
the arguments into the A-stack. And similarly, it

50
00:02:40,640 --> 00:02:45,230
is in the space of the server domain that

51
00:02:45,230 --> 00:02:47,990
the unmarshaling is happening. And, of course, this

52
00:02:47,990 --> 00:02:51,860
is the work done. So we're basically taking the

53
00:02:51,860 --> 00:02:54,750
original four copies and gotten rid of the

54
00:02:54,750 --> 00:02:59,180
two copies that were being done inside the kernel.

55
00:02:59,180 --> 00:03:02,160
One into the kernel and one out of the kernel.

56
00:03:02,160 --> 00:03:04,550
These two copies, which is done by the kernel, we

57
00:03:04,550 --> 00:03:07,160
got rid of them. And instead, we have only two

58
00:03:07,160 --> 00:03:11,320
copies. These copies, even though you're calling it copies, it is,

59
00:03:11,320 --> 00:03:15,530
it is really not as tedious as creating an RPC

60
00:03:15,530 --> 00:03:18,170
message. It is, it is a more efficient way of

61
00:03:18,170 --> 00:03:20,990
creating the information that needs to be passed back and

62
00:03:20,990 --> 00:03:25,050
forth between the client and the server using this A-stack. And

63
00:03:25,050 --> 00:03:27,850
needless to say, the same thing is going to happen in

64
00:03:27,850 --> 00:03:31,238
the reverse direction for returning the results. So it is just

65
00:03:31,238 --> 00:03:34,530
that, it is, the server stack that is going to have

66
00:03:34,530 --> 00:03:38,120
the result and the server stub is going to put it in

67
00:03:38,120 --> 00:03:40,440
the A-stack and the client stub is going to take it

68
00:03:40,440 --> 00:03:42,696
from the A-stack and give it to the client so that

69
00:03:42,696 --> 00:03:47,330
the client can state resuming its execution. So there's two

70
00:03:47,330 --> 00:03:50,975
copies involved in going from the client to the server, and

71
00:03:50,975 --> 00:03:54,580
two copies involved in going back to the client from the server.
