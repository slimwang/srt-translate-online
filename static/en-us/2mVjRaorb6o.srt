1
00:00:00,000 --> 00:00:01,000
So here's an idea.

2
00:00:01,000 --> 00:00:08,000
Let's get rid of this line, and instead, let's declare that n_ary is a decorator.

3
00:00:08,000 --> 00:00:13,000
We'll write a definition of what it means to be a decorator in terms of updating wrappers.

4
00:00:13,000 --> 00:00:15,000
Then we'll be done, and we've done it once and for all.

5
00:00:15,000 --> 00:00:19,000
We can apply it to n_ary, and we can apply it to any other decorator that we define.

6
00:00:19,000 --> 00:00:24,000
This is starting to get a little bit confusing because here we're trying to define decorator,

7
00:00:24,000 --> 00:00:26,000
and decorator is a decorator.

8
00:00:26,000 --> 00:00:29,000
Have we gone too far into recursion? Is that going to bottom out?

9
00:00:29,000 --> 00:00:32,000
Let's draw some pictures and try to make sense of it.

10
00:00:32,000 --> 00:00:38,000
So we've defined n_ary, and we've declared that as being a decorator,

11
00:00:38,000 --> 00:00:45,000
and that's the same as saying n_ary = decorator of n_ary.

12
00:00:45,000 --> 00:00:50,000
Then we've used n_ary as a decorator.

13
00:00:50,000 --> 00:00:54,000
We've defined sequence to be an n_ary function.

14
00:00:54,000 --> 00:01:01,000
That's the same as saying sequence = n_ary of sequence.

15
00:01:01,000 --> 00:01:06,000
Now we wanted to make sure that there's an update so that the documentation

16
00:01:06,000 --> 00:01:10,000
and the name of sequence gets copied over.

17
00:01:10,000 --> 00:01:13,000
We want to take it from this function, pass it over to this function

18
00:01:13,000 --> 00:01:15,000
because that's the one we're going to keep.

19
00:01:15,000 --> 00:01:18,000
While we're at it, we might as well do it for n_ary as well.

20
00:01:18,000 --> 00:01:23,000
We want to have the name of n_ary be n_ary and not something arbitrary

21
00:01:23,000 --> 00:01:24,000
that came out of decorator.

22
00:01:24,000 --> 00:01:29,000
So we've got 2 updates that we want to do for the function that we decorated

23
00:01:29,000 --> 00:01:31,000
and for the decorator itself.

24
00:01:31,000 --> 00:01:36,000
Now let's see if we can write decorator so that it does those 2 updates.

25
00:01:36,000 --> 00:01:40,000
So let's define decorator. It takes an argument (d), which is a function.

26
00:01:40,000 --> 00:01:44,000
Then we'll call the function we're going to return _d,

27
00:01:44,000 --> 00:01:47,000
and that takes a function as input.

28
00:01:47,000 --> 00:01:52,000
So it returns the update wrapper from applying the decorator to the function

29
00:01:52,000 --> 00:01:57,000
and copying over onto that decorated function, the contents of the original function's

30
00:01:57,000 --> 00:02:02,000
documentation and name, and then we also want to update the wrapper

31
00:02:02,000 --> 00:02:05,000
for the decorator itself.

32
00:02:05,000 --> 00:02:11,000
So from (d) the decorated function, we want to copy that over into _d

33
00:02:11,000 --> 00:02:13,000
and then return _d.

34
00:02:13,000 --> 00:02:15,000
Now which update is which?

35
00:02:15,000 --> 00:02:21,000
Well, this one here is the update of _d with d,

36
00:02:21,000 --> 00:02:27,000
and this one is the update of the decorated function from the function.

37
00:02:27,000 --> 00:02:32,000
So here we're saying the new n_ary that we're defining gets the name from the old n_ary,

38
00:02:32,000 --> 00:02:34,000
the name in the documentation string,

39
00:02:34,000 --> 00:02:38,000
and here we're saying the new sequence, the new n_ary sequence,

40
00:02:38,000 --> 00:02:40,000
gets its name from the old sequence.

41
00:02:40,000 --> 00:02:42,000
Here's what it all looks like.

42
00:02:42,000 --> 00:02:44,000
If you didn't quite follow that the first time, don't worry about it.

43
00:02:44,000 --> 00:02:49,000
This is probably the most confusing thing in the entire class because we've got functions

44
00:02:49,000 --> 00:02:51,000
pointing to other functions, pointing to other functions.

45
00:02:51,000 --> 00:02:55,000
Try to follow the pictures. If you can't follow the pictures, that's okay.

46
00:02:55,000 --> 00:02:58,000
Just type it into the interpreter. Put these definitions in.

47
00:02:58,000 --> 00:03:01,000
Decorate some functions. Decorate some n_ary functions.

48
00:03:01,000 --> 99:59:59,999
Take a look at them and see how it works.
