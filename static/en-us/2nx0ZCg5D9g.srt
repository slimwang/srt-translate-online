1
00:00:00,180 --> 00:00:05,520
So we will see now that, another benefit of loop unrolling it that is allows us

2
00:00:05,520 --> 00:00:10,440
also to reduce the CPI in addition, to reducing the number of instructions.

3
00:00:10,440 --> 00:00:15,120
To get some idea for how the CPI changes, we need to have a processor. So let's

4
00:00:15,120 --> 00:00:20,370
assume we have a, 4-issue in-order processor, meaning it's only able to look at

5
00:00:20,370 --> 00:00:25,520
the next four instructions to see what can be executed together. Meaning it can

6
00:00:25,520 --> 00:00:29,740
only look at the next four instructions, to see what it can execute together.

7
00:00:29,740 --> 00:00:33,180
And let's assume that the processor has perfect branch prediction. So first,

8
00:00:33,180 --> 00:00:36,930
let's look at what happens when we try to execute the original loop.

9
00:00:36,930 --> 00:00:40,780
So to see what happens with this loop in this processor, let's look cycle by

10
00:00:40,780 --> 00:00:45,360
cycle at which instructions can execute. In the very first cycle,

11
00:00:45,360 --> 00:00:49,690
we will try to do this load and then we will try to see whether we can execute

12
00:00:49,690 --> 00:00:53,330
the next instruction in order in the same cycle, but we cannot because it

13
00:00:53,330 --> 00:00:58,550
depends on the load. So, this instruction has to be done here. Now, we will look

14
00:00:58,550 --> 00:01:02,700
at the next instruction, and try to execute it in order in the same cycle, but

15
00:01:02,700 --> 00:01:08,170
we cannot because it depends on R2 again, so we move here. The next instruction,

16
00:01:08,170 --> 00:01:13,670
however, does not depend on the previous one, so we can do this add here. But

17
00:01:13,670 --> 00:01:19,630
then, for the branch, it does depend on R1 so it can be only done here.

18
00:01:19,630 --> 00:01:24,020
Because we have perfect branch prediction, this load has also been fetched from

19
00:01:24,020 --> 00:01:28,780
the next iteration and it doesn't depend on the branch that was done here so

20
00:01:28,780 --> 00:01:32,800
we will actually do the load for the next iteration. And then, we will,

21
00:01:32,800 --> 00:01:36,780
again, not be able to do the add. So the add happens in the next cycle. And

22
00:01:36,780 --> 00:01:43,140
then, in this cycle, these two happen and so on. So overall, after this initial

23
00:01:43,140 --> 00:01:47,160
load that had to be done by itself just because, there was no branch before it,

24
00:01:47,160 --> 00:01:53,000
it takes us three cycles to do all five of the instructions in the loop.

25
00:01:53,000 --> 00:01:57,760
So the CPI here, is 3 cycles for 5 instructions. But

26
00:01:57,760 --> 00:02:03,070
remember that, we can do scheduling of this loop to try to improve the CPI. So

27
00:02:03,070 --> 00:02:06,580
before we get into what's the CPI of the unrolled loop,

28
00:02:06,580 --> 00:02:11,130
let's see what the CPI is if we schedule this loop body.

29
00:02:11,130 --> 00:02:17,050
Our scheduling will start out with this loop body, and then try to maximize

30
00:02:17,050 --> 00:02:22,260
the CPI that we can get, by reordering the instructions. So, clearly,

31
00:02:22,260 --> 00:02:27,090
here, this load could, not be done in parallel with the next instruction,

32
00:02:27,090 --> 00:02:31,260
because there is a dependence there. So we need to find something, and

33
00:02:31,260 --> 00:02:34,730
it cannot be the branch, because it needs to stay at the end of the iteration.

34
00:02:34,730 --> 00:02:38,100
That we can put here, and that this ADDI can move there.

35
00:02:38,100 --> 00:02:41,860
So our scheduling algorithm will move the ADDI here. So

36
00:02:41,860 --> 00:02:47,300
now that we are subtracting 4 from R1 here, we need to adjust the store so that

37
00:02:47,300 --> 00:02:52,060
it adds back the 4 that we decremented here. Because, this store was supposed to

38
00:02:52,060 --> 00:02:56,810
store to the same element as the load. Now, however, we have moved R1, so

39
00:02:56,810 --> 00:03:00,720
to access the same element as the load, we need to add 4 here. Note that

40
00:03:00,720 --> 00:03:05,320
moving the ADDI it really the only scheduling freedom we have here because.

41
00:03:05,320 --> 00:03:10,390
We need to do the load, and the ADD, and the store in that order so

42
00:03:10,390 --> 00:03:13,840
they cannot be re-ordered, the branch needs to stay at the end of the loop, so

43
00:03:13,840 --> 00:03:17,790
pretty much the only freedom we have is where is the ADDI going to happen.

44
00:03:17,790 --> 00:03:21,920
So now let's look at what happens cycle-by-cycle. We can do the load in

45
00:03:21,920 --> 00:03:28,130
the first cycle. The ADDI can be done, together with the load. But

46
00:03:28,130 --> 00:03:34,200
the ADD to what we loaded still has to be done in the next cycle. The store

47
00:03:34,200 --> 00:03:39,110
cannot be done until this ADD is complete. The branch can still proceed

48
00:03:39,110 --> 00:03:42,750
in parallel with the store. And now, because of perfect branch prediction,

49
00:03:42,750 --> 00:03:48,680
we're going to move here, and we can try to do the load for the next iteration.

50
00:03:48,680 --> 00:03:52,950
Note that R1 has been updated here in the previous iteration, so all the way

51
00:03:52,950 --> 00:03:57,960
through here we really did not modify R1, so pretty much the store of the branch

52
00:03:57,960 --> 00:04:02,520
didn't modify R1. That's the only registered dependence that this load has, so

53
00:04:02,520 --> 00:04:07,970
the load can be done here. And then we can also do the R1 update here,

54
00:04:07,970 --> 00:04:13,480
because this ADDI only depends on R1, and the R1 has been updated here.

55
00:04:13,480 --> 00:04:17,690
So we can do this. So as you can see, now it takes two cycles,

56
00:04:17,690 --> 00:04:23,250
to do these five instructions. So the CPI we get is now 2 over 5.

57
00:04:23,250 --> 00:04:27,750
It took us two cycles to do the five instructions. This is significantly better,

58
00:04:27,750 --> 00:04:30,440
than without scheduling so, scheduling did help
