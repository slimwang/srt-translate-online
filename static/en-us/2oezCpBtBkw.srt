1
00:00:00,160 --> 00:00:04,280
Let's look at the solution to
our prefetch instructions quiz.

2
00:00:04,280 --> 00:00:08,330
Let's look first at this interloop and

3
00:00:08,330 --> 00:00:12,910
the prefetch distance for
fetching elements of the b array.

4
00:00:12,910 --> 00:00:17,800
We were told that each iteration takes
ten cycles if there are no misses.

5
00:00:17,800 --> 00:00:19,620
And we want to eliminate misses.

6
00:00:19,620 --> 00:00:24,000
So if we do prefetching correctly, there
will be ten cycles per iteration here.

7
00:00:24,000 --> 00:00:29,200
The miss penalty and the memory
latency are 200 cycles, which means

8
00:00:29,200 --> 00:00:33,660
that we should be issuing a prefetch for
a b element, and

9
00:00:33,660 --> 00:00:39,500
200 cycles before we reach it,
corresponds to 20 iterations.

10
00:00:39,500 --> 00:00:43,880
So we will prefetch twenty
iterations ahead of time, and

11
00:00:43,880 --> 00:00:47,440
we will do it,
because if we do it this way,

12
00:00:47,440 --> 00:00:51,980
the prefetch will arrive just
in time for b to get its value.

13
00:00:51,980 --> 00:00:54,810
Now we need to figure out
what to prefetch here, and

14
00:00:54,810 --> 00:00:56,720
whether we should be
doing the prefetching.

15
00:00:56,720 --> 00:01:00,760
We should not be doing the prefetching
if, by the time we reach

16
00:01:00,760 --> 00:01:04,720
the axis to the element of a,
know that this should be i plus 1, or

17
00:01:04,720 --> 00:01:09,640
something larger, this eliminates
that element from the cache.

18
00:01:09,640 --> 00:01:11,230
So the question is,

19
00:01:11,230 --> 00:01:17,000
how much cache stuff does each
iteration of this outer loop bring in?

20
00:01:17,000 --> 00:01:24,170
And the answer is, it brings 1000 eight
byte elements here, and an element of a.

21
00:01:24,170 --> 00:01:27,940
So if we prefetch with a distance of 1,

22
00:01:27,940 --> 00:01:33,740
what we get is that our prefetch
is done after 200 cycles.

23
00:01:33,740 --> 00:01:35,790
There are 10,000 cycles here, so

24
00:01:35,790 --> 00:01:41,448
it's in time to be accessing the next
iteration of the outer loop.

25
00:01:41,448 --> 00:01:44,950
The question's just does this element
get kicked out before we can use it?

26
00:01:44,950 --> 00:01:50,740
And the answer is no, because 8 times
this 1,000, ends up being 8,000.

27
00:01:50,740 --> 00:01:52,769
The cache is 16 kilobytes.

28
00:01:52,769 --> 00:01:56,981
So basically if we prefetch
here the element of the a array

29
00:01:56,981 --> 00:02:01,633
that we prefetched will still be
there when we eventually get to

30
00:02:01,633 --> 00:02:05,989
the next iteration of the outer
loop where we get to use it.

31
00:02:05,989 --> 00:02:09,169
So, the answer is we should
prefetch with i plus 1,

32
00:02:09,169 --> 00:02:11,930
and we should not be selecting this.

33
00:02:11,930 --> 00:02:15,450
Note that we should not be
prefetching with i plus 20 here.

34
00:02:15,450 --> 00:02:21,520
If we do that, there are 20 loops in
between when we prefetch and when we

35
00:02:21,520 --> 00:02:27,780
actually use it, and each of these loops
is bringing in 8,000 bytes worth of b.

36
00:02:27,780 --> 00:02:34,160
So if we prefetch that early, then
20 times 8 is larger than our cache,

37
00:02:34,160 --> 00:02:36,580
and the element we prefetch will
be kicked out from the cache.

38
00:02:36,580 --> 00:02:39,980
So that would be an example
of premature prefetching.
