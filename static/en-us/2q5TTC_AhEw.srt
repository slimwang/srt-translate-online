1
00:00:00,550 --> 00:00:02,630
When we put an app on
the Google play store,

2
00:00:02,630 --> 00:00:05,030
we'll have a whole range of users.

3
00:00:05,030 --> 00:00:08,760
It's hard to anticipate what type of
device or app we'll be running on?

4
00:00:08,760 --> 00:00:13,270
Maybe a phone or a tablet, maybe an
older version of the Android platform or

5
00:00:13,270 --> 00:00:15,189
maybe a different language
than what we're using.

6
00:00:16,320 --> 00:00:19,580
There are many best practices that you
can follow when building your app,

7
00:00:19,580 --> 00:00:22,140
to make it work well for
all these types of users.

8
00:00:23,180 --> 00:00:26,220
One best practice is
to localize your app.

9
00:00:26,220 --> 00:00:29,410
There's a handy localization
checklist that you can refer to.

10
00:00:29,410 --> 00:00:33,310
Localization means adapting your app to
different locales, meaning language and

11
00:00:33,310 --> 00:00:36,780
country combinations to make it
a positive user experience for

12
00:00:36,780 --> 00:00:38,610
all types of users.

13
00:00:38,610 --> 00:00:42,040
At the surface level this can have
an impact on the design of your app

14
00:00:42,040 --> 00:00:44,200
as well as the texturing
that appear in your app.

15
00:00:45,540 --> 00:00:48,240
For now we're going to focus on how we
can make your app support different

16
00:00:48,240 --> 00:00:49,700
languages.

17
00:00:49,700 --> 00:00:53,570
First let look at the device
experience from a user's perspective.

18
00:00:53,570 --> 00:00:57,150
If I prefer to use a different language
I can go into the settings app, and

19
00:00:57,150 --> 00:00:59,050
then tap on the language and
input setting.

20
00:01:00,390 --> 00:01:01,820
If I tap on language,

21
00:01:01,820 --> 00:01:04,819
then I see the whole list of languages
that are supported on Android.

22
00:01:05,870 --> 00:01:08,740
It includes character based languages,
like Chinese, and

23
00:01:08,740 --> 00:01:10,150
right to left languages, like Arabic.

24
00:01:11,410 --> 00:01:14,030
I'm going to change
the language to Spanish, and

25
00:01:14,030 --> 00:01:17,910
just like that, all the text
is now showing up in Spanish.

26
00:01:17,910 --> 00:01:19,500
You can see this across
the whole settings app.

27
00:01:20,628 --> 00:01:23,820
If you check the others apps on the
device, those will appear in Spanish if

28
00:01:23,820 --> 00:01:26,530
the developer chose to
support that language.

29
00:01:26,530 --> 00:01:28,970
However, when you open
up our just Java app,

30
00:01:28,970 --> 00:01:31,760
it's a jarring experience
because everything in this

31
00:01:31,760 --> 00:01:35,930
app is still in English, while the other
apps on the device are in Spanish.

32
00:01:35,930 --> 00:01:37,949
So how do we make our
app support Spanish?

33
00:01:39,080 --> 00:01:43,120
So far, we know that our app can
contain Java files and resources.

34
00:01:43,120 --> 00:01:46,810
We can provide default resources for our
app, but we can also provide alternate

35
00:01:46,810 --> 00:01:51,720
resources depending on the user's
physical device size, language setting,

36
00:01:51,720 --> 00:01:55,550
version of Android, or number of
pixels on the screen, to name a few.

37
00:01:55,550 --> 00:01:59,650
In our dress Java app, we can provide
default text strings in English.

38
00:01:59,650 --> 00:02:02,870
We can provide alternate text
strings in other languages.

39
00:02:02,870 --> 00:02:06,180
So if someone has French as
a default language on their device,

40
00:02:06,180 --> 00:02:09,479
the system will automatically
load the French translations

41
00:02:09,479 --> 00:02:12,080
instead of the default English ones.

42
00:02:12,080 --> 00:02:15,180
This article explains how you can
support multiple languages in an app.

43
00:02:16,620 --> 00:02:19,370
Scrolling down you can look
at the project structure.

44
00:02:20,660 --> 00:02:23,980
Within the res directory, you can add
another sub directory that contains

45
00:02:23,980 --> 00:02:26,310
resources for a certain language.

46
00:02:26,310 --> 00:02:27,770
This is a default values folder,

47
00:02:27,770 --> 00:02:31,230
and we're choosing to put all
the English text strings here.

48
00:02:31,230 --> 00:02:35,590
In the value's ES folder,
we have all the Spanish text strings.

49
00:02:35,590 --> 00:02:40,110
In the value's FR folder,
we have all the French translations.

50
00:02:40,110 --> 00:02:43,210
If the user chooses Spanish as
the language on their device,

51
00:02:43,210 --> 00:02:47,360
then the system will load these
resources from the value's ES folder.

52
00:02:47,360 --> 00:02:48,640
If this folder didn't exist,

53
00:02:48,640 --> 00:02:52,270
then the system will just fall
back to the default resources.

54
00:02:52,270 --> 00:02:55,100
If the user has French as default
language on their device,

55
00:02:55,100 --> 00:02:57,750
than this system will
load these resources.

56
00:02:57,750 --> 00:03:02,510
By the way, ES is the language code for
Spanish and FR is the language code for

57
00:03:02,510 --> 00:03:03,800
French.

58
00:03:03,800 --> 00:03:06,570
Android uses the ISO language codes.

59
00:03:06,570 --> 00:03:08,910
Here's some examples of languages and

60
00:03:08,910 --> 00:03:12,020
the two letter language codes
that correspond with them.

61
00:03:12,020 --> 00:03:14,900
Let's go back to implementation details,
in order for

62
00:03:14,900 --> 00:03:18,550
the system to switch out different
translations for the text in our app,

63
00:03:18,550 --> 00:03:22,430
we need to isolate all the text from
all the other logic in our app.

64
00:03:22,430 --> 00:03:26,560
We do this by creating a strings.xml
file in the values folder.

65
00:03:26,560 --> 00:03:29,740
This is an xml resource file
that contains a list of

66
00:03:29,740 --> 00:03:33,410
all the string resources that
are visible to the user.

67
00:03:33,410 --> 00:03:36,090
This is the first time we're
seeing xml be used for

68
00:03:36,090 --> 00:03:38,450
something other than defining a layout.

69
00:03:38,450 --> 00:03:41,090
This is defining a list of resources.

70
00:03:41,090 --> 00:03:42,930
This is one string resource, and

71
00:03:42,930 --> 00:03:45,260
the name that we use to
refer to it is called title.

72
00:03:45,260 --> 00:03:48,480
And the value of this
string is My Applications.

73
00:03:49,730 --> 00:03:51,920
This is another string resource and

74
00:03:51,920 --> 00:03:57,970
we refer to it using hello_world,
and actual value is hello world.

75
00:03:57,970 --> 00:04:02,390
Then, in the values-es folder, we can
create a strings.xml file, but now,

76
00:04:02,390 --> 00:04:05,850
these have the Spanish translations
of those same strings.

77
00:04:05,850 --> 00:04:09,990
This string resource still goes
by the name of title like here.

78
00:04:09,990 --> 00:04:14,542
But now, the value is Spanish
translation of my application.

79
00:04:14,542 --> 00:04:15,830
The same applies for

80
00:04:15,830 --> 00:04:20,459
the hello world string resource with
the Spanish translation here now.

81
00:04:20,459 --> 00:04:23,170
And this is one more example
of the French translation of

82
00:04:23,170 --> 00:04:24,390
the strings.xml file.

83
00:04:25,710 --> 00:04:28,140
Once our strings
are declared as resources,

84
00:04:28,140 --> 00:04:32,250
we can then refer to them in the XML or
Java using the appropriate syntax.

85
00:04:33,430 --> 00:04:36,460
In the Java code,
we refer to strings like this.

86
00:04:36,460 --> 00:04:39,880
In the Java code, this is how
we reference string resources.

87
00:04:39,880 --> 00:04:43,260
First, we call the method getResources
to get the app's resources.

88
00:04:43,260 --> 00:04:49,140
And then we call get string, and we pass
as input the resource ID of this string.

89
00:04:50,260 --> 00:04:53,550
In this case it's R dot string
dot hello underscore world.

90
00:04:53,550 --> 00:04:55,310
String is the resource type and

91
00:04:55,310 --> 00:04:57,640
hello underscore world is
the name of the resource.

92
00:04:58,690 --> 00:05:02,680
All of this on the right hand side ends
up becoming the hello world string and

93
00:05:02,680 --> 00:05:05,470
it's stored in this string variable.

94
00:05:05,470 --> 00:05:09,880
This whole expression evaluates to hello
world and gets stored in this variable.

95
00:05:09,880 --> 00:05:14,470
By the way, this is similar to how we
refer to image resources in the Java

96
00:05:14,470 --> 00:05:20,460
code using r.drawwell.photo, or
whatever the name of the image is.

97
00:05:20,460 --> 00:05:24,490
In the XML, we can refer to the strings
using the @string notation and

98
00:05:24,490 --> 00:05:26,560
then the name of the string resource.

99
00:05:26,560 --> 00:05:29,540
Now the XML and
the Java code can stay the same,

100
00:05:29,540 --> 00:05:33,460
regardless of what language the user
has chosen on their device.

101
00:05:33,460 --> 00:05:37,120
We don't need a different layout file
that has the Spanish translation for

102
00:05:37,120 --> 00:05:38,380
the text attribute here.

103
00:05:39,440 --> 00:05:41,610
Android will load
the correct translations,

104
00:05:41,610 --> 00:05:45,020
depending on the primary
language selected on the device.

105
00:05:45,020 --> 00:05:45,870
Pretty awesome, huh?
