1
00:00:00,600 --> 00:00:04,640
Notice that this algorithm does n
over 2 additions at this statement.

2
00:00:06,340 --> 00:00:09,720
Then at this statement,
it does n over 2 minus 1 additions.

3
00:00:11,410 --> 00:00:14,760
And finally, the add scan operates
on a problem that's half the size.

4
00:00:15,760 --> 00:00:16,550
So what does that mean?

5
00:00:17,650 --> 00:00:20,990
Basically, the recurrence for
the total work is this.

6
00:00:20,990 --> 00:00:23,420
So the work is linear in n.

7
00:00:23,420 --> 00:00:26,760
Before moving on to the span,
let me make a quick remark.

8
00:00:26,760 --> 00:00:28,720
I hid a constant in here.

9
00:00:28,720 --> 00:00:29,410
What's the constant?

10
00:00:30,500 --> 00:00:32,980
As it happens, the constant is about 2.

11
00:00:32,980 --> 00:00:37,700
Now that 2 is counting
only addition operations.

12
00:00:37,700 --> 00:00:39,860
Now this factor of two
is pretty interesting.

13
00:00:39,860 --> 00:00:41,890
Think about what that means for
a second.

14
00:00:41,890 --> 00:00:45,980
The purely sequential algorithm
only has a constant of about 1.

15
00:00:45,980 --> 00:00:49,390
So evidently our parallel
algorithm does twice the work.

16
00:00:49,390 --> 00:00:52,750
Now wearing your theory hat,
that's not a big deal.

17
00:00:52,750 --> 00:00:55,730
But it does raise an interesting and
more general question.

18
00:00:55,730 --> 00:00:56,730
Will you, in general,

19
00:00:56,730 --> 00:01:00,330
need to pay some sort of price
in order to get parallelism?

20
00:01:00,330 --> 00:01:03,030
Okay, Voodak, enough with
the distractions, what about the span?

21
00:01:03,030 --> 00:01:05,760
Now the first observation
is the recursive call,

22
00:01:05,760 --> 00:01:08,730
which always operates on
a sub-problem of half the size.

23
00:01:09,750 --> 00:01:13,790
So you'd naturally expect
about O (log n) levels.

24
00:01:13,790 --> 00:01:15,700
All the other operations
are data parallel.

25
00:01:17,110 --> 00:01:19,540
That means you can implement
them using parallel fours,

26
00:01:19,540 --> 00:01:22,130
which will also have logarithmic span.

27
00:01:22,130 --> 00:01:25,320
Putting that together, here's what
the recurrence might look like.

28
00:01:25,320 --> 00:01:28,925
If you solve the recurrence
you will get O(log^2n).

29
00:01:28,925 --> 00:01:32,280
Again the master theorem makes
solving it quick and easy.

30
00:01:32,280 --> 00:01:35,560
Alternatively, you should be
able to see the log squared and

31
00:01:35,560 --> 00:01:37,400
behavior intuitively.

32
00:01:37,400 --> 00:01:41,550
There's login span from the statements
within this function, and

33
00:01:41,550 --> 00:01:43,200
that's repeated log in times.
