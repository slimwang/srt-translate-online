1
00:00:00,012 --> 00:00:03,856
Well if we go too far to the left, it means that we're going to have poor peak performance

2
00:00:03,856 --> 00:00:07,555
because we'll be using the slower thread per element approach on

3
00:00:07,555 --> 00:00:11,880
data that would instead be a better fit for the faster thread per row approach.

4
00:00:11,880 --> 00:00:15,998
But if we go too far to the right, then we'll be using thread per row on

5
00:00:15,998 --> 00:00:20,426
irregular row lengths, and that's going to lead to poor load balance.

6
00:00:20,426 --> 00:00:24,010
Bell and Garland noted that thread per row is about 3 times faster than thread per

7
00:00:24,010 --> 00:00:26,125
element for matrices with balanced rows.

8
00:00:26,141 --> 00:00:28,668
So their rule of thumb for drawing the line was

9
00:00:28,668 --> 00:00:32,840
when 1/3 of the rows have non-zero elements--simple and sensible.

10
00:00:32,840 --> 00:00:37,582
You'll find their approach called hybrid, an NVIDIA cuSPARSE, sparse matrix library.
