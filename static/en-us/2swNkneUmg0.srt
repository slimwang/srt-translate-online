1
00:00:00,340 --> 00:00:03,825
By now, you should've gained everything
you need to know to understand the full

2
00:00:03,825 --> 00:00:05,790
Kernighan-Lin Algorithm.

3
00:00:05,790 --> 00:00:07,230
Recall the setup.

4
00:00:07,230 --> 00:00:11,630
You're given a graph and
a partition of its vertices, v1 and v2.

5
00:00:11,630 --> 00:00:16,510
You'll try to improve this partition by
swapping two subsets of the elements,

6
00:00:16,510 --> 00:00:18,260
x1 and x2.

7
00:00:18,260 --> 00:00:20,950
So how do you choose x1 and x2?

8
00:00:20,950 --> 00:00:23,080
Here's the KL procedure.

9
00:00:23,080 --> 00:00:27,270
First, compute the internal and
external costs for every vertex.

10
00:00:27,270 --> 00:00:30,440
Next, mark all the nodes has unvisited.

11
00:00:30,440 --> 00:00:33,090
Then, carry out an iterative procedure.

12
00:00:33,090 --> 00:00:35,510
I'll fill this condition in momentarily.

13
00:00:35,510 --> 00:00:38,080
Go through every pair
of unmarked vertices,

14
00:00:38,080 --> 00:00:40,470
and pick the one with the largest gain.

15
00:00:40,470 --> 00:00:42,690
Mark that pair as visited.

16
00:00:42,690 --> 00:00:46,820
Now go through and update all the
internal and external costs as if a and

17
00:00:46,820 --> 00:00:48,720
b had been swapped.

18
00:00:48,720 --> 00:00:51,260
Note that you aren't
actually swapping a and

19
00:00:51,260 --> 00:00:55,190
b, just updating the costs
as if you had done so.

20
00:00:55,190 --> 00:00:58,730
Then repeat this procedure until
you visited all the vertices.

21
00:00:58,730 --> 00:01:03,180
At this point, the algorithm has
computed a sequence of gains.

22
00:01:03,180 --> 00:01:05,880
That is, this is the first
part of the algorithm, and

23
00:01:05,880 --> 00:01:09,130
the output of the first part
is the sequence of gains.

24
00:01:09,130 --> 00:01:11,390
Now, for the next part of the algorithm,

25
00:01:11,390 --> 00:01:13,752
let's define something
called the cumulative gain.

26
00:01:13,752 --> 00:01:16,825
That's Gain with a capital G.

27
00:01:16,825 --> 00:01:22,285
A capital G Gain is the sum of all the
little gains up to a certain point, a j.

28
00:01:22,285 --> 00:01:23,005
Kernighan's and

29
00:01:23,005 --> 00:01:28,277
Lin's idea was to keep all the swaps
that maximized the cumulative gain.

30
00:01:28,277 --> 00:01:32,647
If this cumulative gain is non-zero,
then you have a candidate x1 and

31
00:01:32,647 --> 00:01:36,257
x2 subsets that actually
improve the partition.

32
00:01:36,257 --> 00:01:40,767
You can then swap these two subsets and
update the overall cost.

33
00:01:40,767 --> 00:01:42,647
Now for the last detail.

34
00:01:42,647 --> 00:01:46,347
You'll repeat the entire procedure
we've just described, parts one and

35
00:01:46,347 --> 00:01:49,207
part two, until there is no more gain.

36
00:01:50,260 --> 00:01:54,490
In other words, if this condition is
false, then the algorithm terminates.

37
00:01:54,490 --> 00:01:55,290
Oh, boy.

38
00:01:55,290 --> 00:01:59,100
That was a lot of steps, but
hopefully the general idea is clear.

39
00:01:59,100 --> 00:02:02,190
Now the main issue with
this algorithm is its cost.

40
00:02:02,190 --> 00:02:05,880
Its sequential running time is
big O of v squared times d.

41
00:02:05,880 --> 00:02:10,380
Where again,
d is the maximum degree of any vortex.

42
00:02:10,380 --> 00:02:13,620
There are actually some more complex
variations of this algorithm that can

43
00:02:13,620 --> 00:02:17,910
reduce the per iteration cost
to big O of the number of edges.

44
00:02:17,910 --> 00:02:20,960
Anyway, for more of my notes
on analyzing the overall cost,

45
00:02:20,960 --> 00:02:22,470
head to the Downloadables section.
