1
00:00:00,250 --> 00:00:03,840
So far you've used the API's Explorer
to test the functions in

2
00:00:03,840 --> 00:00:05,360
the conference's API.

3
00:00:05,360 --> 00:00:08,960
However the conference central
application also includes a full working

4
00:00:08,960 --> 00:00:10,050
web UI.

5
00:00:10,050 --> 00:00:13,965
Each of the pages in the web UI
sends calls into the backend API.

6
00:00:13,965 --> 00:00:16,575
As you implement the backend
functionality the web pages in the app

7
00:00:16,575 --> 00:00:17,795
will start to work.

8
00:00:17,795 --> 00:00:20,675
So far the only page that will
work is the My Profile page.

9
00:00:20,675 --> 00:00:24,515
This page calls get profile to get the
values of the logged in user's profile

10
00:00:24,515 --> 00:00:27,905
and calls save profile when you
change values and update the profile.

11
00:00:27,905 --> 00:00:30,815
Now, the goal of this course is to help
you learn how to develop app engine

12
00:00:30,815 --> 00:00:32,825
applications not to
teach you JavaScript so

13
00:00:32,825 --> 00:00:35,710
I'm not going to go into detail
on the code for the web UI.

14
00:00:35,710 --> 00:00:39,010
However, I do want to point out the code
that makes the call to get profile.

15
00:00:39,010 --> 00:00:42,710
This is located in static
slash js slash controllers.js,

16
00:00:42,710 --> 00:00:45,820
and it's the init code for
the profile page.

17
00:00:45,820 --> 00:00:50,320
You see here, there's a call to
gapi.client.conference.getProfile and

18
00:00:50,320 --> 00:00:53,980
then a little bit further down,
here we have a saveProfile.

19
00:00:53,980 --> 00:00:57,620
The Conference Central application
includes both a backend application that

20
00:00:57,620 --> 00:00:59,550
defines endpoints functions and

21
00:00:59,550 --> 00:01:02,050
a frontend application
that uses those functions.

22
00:01:02,050 --> 00:01:05,810
We'll call the application that defines
the endpoints functions a backend API.

23
00:01:05,810 --> 00:01:07,710
In this case,
the frontend application and

24
00:01:07,710 --> 00:01:12,060
the backend API are combined in a single
application but they don't have to be.

25
00:01:12,060 --> 00:01:15,350
You could have the front-end code in
a completely separate application.

26
00:01:15,350 --> 00:01:17,985
Or you could even have multiple
applications that provide different

27
00:01:17,985 --> 00:01:20,960
front-end interfaces to
the conference backend API.

28
00:01:20,960 --> 00:01:23,498
In a way, app engine doesn't
care that the front-end and

29
00:01:23,498 --> 00:01:26,710
the backend API in Conference Central
are the same application.

30
00:01:26,710 --> 00:01:29,570
You still have to authorize the
front-end application to use the backend

31
00:01:29,570 --> 00:01:32,490
API, even though they
are the same application and

32
00:01:32,490 --> 00:01:34,280
share the same application ID.

33
00:01:34,280 --> 00:01:37,300
So there are a few things you need to do
before you can start using the web pages

34
00:01:37,300 --> 00:01:39,220
in the Conference Central application.

35
00:01:39,220 --> 00:01:42,410
First, we need to tell the backend
API which clients apps are allowed to

36
00:01:42,410 --> 00:01:43,065
use it.

37
00:01:43,065 --> 00:01:45,280
You do that by specifying
the client id's,

38
00:01:45,280 --> 00:01:47,110
we need to clear the endpoints.api.

39
00:01:47,110 --> 00:01:51,090
So we've already granted access to
the API_EXPLORER_CLIENT_ID, but

40
00:01:51,090 --> 00:01:53,900
now we're going to need to set
up this WEB_CLIENT_ ID as well.

41
00:01:53,900 --> 00:01:56,700
It is a bit odd granting access
to ourself in a way, but

42
00:01:56,700 --> 00:01:59,890
as far as the endpoint's API is
concerned it doesn't know the web UI is

43
00:01:59,890 --> 00:02:01,090
in the same app.

44
00:02:01,090 --> 00:02:04,660
So in settings.py here's where
the WEB_CLIENT_ID is set up.

45
00:02:04,660 --> 00:02:08,229
And, how did I get this big
long alphanumerical value?

46
00:02:08,229 --> 00:02:11,690
Well, it's just like what we did for
the Hello app back in lesson two.

47
00:02:11,690 --> 00:02:13,210
We do it in the dev console.

48
00:02:13,210 --> 00:02:16,990
So, our first step, go to APIs & auth,
and Consent screen, and make sure

49
00:02:16,990 --> 00:02:20,640
the email address and product name are
set in the Consent screen, and hit Save.

50
00:02:20,640 --> 00:02:23,208
Second, under APIs & auth,
select Credentials.

51
00:02:23,208 --> 00:02:26,583
And under OAuth,
select Create new Client ID.

52
00:02:26,583 --> 00:02:29,565
You are creating a web application,
and then under

53
00:02:29,565 --> 00:02:33,933
AUTHORIZED JAVASCRIPT ORIGINS,
fill in your app id .appspot.com, and

54
00:02:33,933 --> 00:02:38,879
also one for your local host including
the correct port like localhost:8080.

55
00:02:38,879 --> 00:02:42,531
Once you do it it will show up over
here, then copy this client ID and

56
00:02:42,531 --> 00:02:45,120
that's what you will
put into settings.py.

57
00:02:45,120 --> 00:02:48,610
Another thing you'll need to do is add
the client ID to the JavaScript code

58
00:02:48,610 --> 00:02:51,010
that runs the authentication
process on the client's site.

59
00:02:51,010 --> 00:02:55,030
So far it hasn't mattered that the web
UI didn't have the correct client ID set

60
00:02:55,030 --> 00:02:57,360
because we've only used
the API's Explorer.

61
00:02:57,360 --> 00:02:59,420
But if you've tried logging
in using the webpages,

62
00:02:59,420 --> 00:03:01,660
you've likely noticed
it didn't quite work.

63
00:03:01,660 --> 00:03:06,560
So this code you'll find in static js,
app.js.

64
00:03:06,560 --> 00:03:09,690
And right here under
oauth2Provider is a CLIENT_ID and

65
00:03:09,690 --> 00:03:11,970
you'll paste that same
value in right here.

66
00:03:11,970 --> 00:03:15,730
After you've set those things up and
saved and deployed, you should find that

67
00:03:15,730 --> 00:03:18,540
you're now able to log in to
the Conference Central web app and

68
00:03:18,540 --> 00:03:21,860
that My Profile will now allow you
to both see and save your profile.
