1
00:00:00,120 --> 00:00:03,090
We have seen that we can If-Convert If-Then-Elses, A similar

2
00:00:03,090 --> 00:00:05,358
technique would be very useful for a loop, but can

3
00:00:05,358 --> 00:00:08,257
we [UNKNOWN] If-Convert a loop? Let's go back to our

4
00:00:08,257 --> 00:00:11,807
loop that loads from some memory address, add something to

5
00:00:11,807 --> 00:00:14,718
that, Stores that back in memory, adds 4 to the

6
00:00:14,718 --> 00:00:18,268
pointer, to the beginning of the loop, unless the pointer

7
00:00:18,268 --> 00:00:21,840
has reached some final value. Let's say that in this

8
00:00:21,840 --> 00:00:25,236
processor, every operation takes two cycle to do. So we

9
00:00:25,236 --> 00:00:28,238
will have a stall cycle here, because we need

10
00:00:28,238 --> 00:00:31,793
to use R2 two cycles later, another stall cycle here

11
00:00:31,793 --> 00:00:35,111
because the add needs to operate for one more cycle

12
00:00:35,111 --> 00:00:38,860
before the store can see that value. There is no

13
00:00:38,860 --> 00:00:41,980
stall cycle here because this add can actually proceed immediately,

14
00:00:41,980 --> 00:00:44,590
it doesn't depend on the store, and then the branch

15
00:00:44,590 --> 00:00:48,140
gets delayed by one more cycle because it's using the

16
00:00:48,140 --> 00:00:50,478
result of the add. So we have three stall cycles

17
00:00:50,478 --> 00:00:53,385
here, and again this is a process where every operation just

18
00:00:53,385 --> 00:00:56,235
takes two cycles, we have already seen that we can schedule

19
00:00:56,235 --> 00:00:59,579
this loop differently. So that we load and then we do

20
00:00:59,579 --> 00:01:02,134
the add I and then we do the add, this way we

21
00:01:02,134 --> 00:01:06,149
avoid this stall cycle here, however, after this add, the only

22
00:01:06,149 --> 00:01:09,434
things that are left to do in this situation of the loop

23
00:01:09,434 --> 00:01:12,422
are the store and the branch. We can not do the

24
00:01:12,422 --> 00:01:15,750
branch before the store, so the store has to happen here, and

25
00:01:15,750 --> 00:01:19,277
thus, we haven't eliminated this store cycle here. And

26
00:01:19,277 --> 00:01:22,244
then the branch can check R1 for whether it reached

27
00:01:22,244 --> 00:01:25,556
the final value here, because without a stall, because

28
00:01:25,556 --> 00:01:28,247
R1 has been manipulated here and then we had to

29
00:01:28,247 --> 00:01:31,352
change this store, if you remember, because the add

30
00:01:31,352 --> 00:01:34,362
of a constant has moved here. So that it uses

31
00:01:34,362 --> 00:01:37,478
a minus four offset to compensate for this, so we

32
00:01:37,478 --> 00:01:40,974
manage to eliminate two of these stall cycles, but one

33
00:01:40,974 --> 00:01:44,318
still remains, now it you look at this branch here,

34
00:01:44,318 --> 00:01:47,130
If conversion would allow us to kind of do the

35
00:01:47,130 --> 00:01:51,470
next iteration of the loop here. And then eliminate this

36
00:01:51,470 --> 00:01:54,825
branch, because it would be predicated. And then we could maybe

37
00:01:54,825 --> 00:01:57,135
find something here, that can go over here but the

38
00:01:57,135 --> 00:02:00,877
problem is that. A loop is not really suitable for if-conversion,

39
00:02:00,877 --> 00:02:03,355
because every time we have a new iteration we would

40
00:02:03,355 --> 00:02:06,423
have to introduce a new predicate and then every new iteration

41
00:02:06,423 --> 00:02:09,963
would introduce yet another predicate, and we simply cannot deal with

42
00:02:09,963 --> 00:02:12,677
so many predicates and so many things that get done only

43
00:02:12,677 --> 00:02:15,476
if the predicate is true. Pretty much if we are executing

44
00:02:15,476 --> 00:02:19,396
a million iteration loop sometimes and sometimes only one ite,ration Then almost

45
00:02:19,396 --> 00:02:22,364
a million iterations would have to be just predicated out which

46
00:02:22,364 --> 00:02:25,498
would be very, very slow. So we want to do something about

47
00:02:25,498 --> 00:02:28,144
loops that is like If conversion to allow us to kind

48
00:02:28,144 --> 00:02:31,798
of find things in future iterations to move here, but without really

49
00:02:31,798 --> 00:02:35,137
doing if conversion, So we cannot truly if convert but there is

50
00:02:35,137 --> 00:02:39,830
something else we can do. And that something will be called loop unrolling.
