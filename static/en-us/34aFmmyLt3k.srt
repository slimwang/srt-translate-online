1
00:00:00,390 --> 00:00:04,130
Now let's briefly consider just what happens to load and store instructions.

2
00:00:04,130 --> 00:00:07,910
Just like we had data dependencies that go through registers, this is for

3
00:00:07,910 --> 00:00:11,950
example, why we did register remaining to eliminate the false dependencies

4
00:00:11,950 --> 00:00:15,750
through registers and why we are doing these reservation stations and

5
00:00:15,750 --> 00:00:20,070
so on in order to kind of obey properly the true dependencies. There can be

6
00:00:20,070 --> 00:00:23,570
dependencies through memory. Because loads and stores, in this case,

7
00:00:23,570 --> 00:00:26,160
are the only instructions that can have dependencies through memory, but

8
00:00:26,160 --> 00:00:31,390
there can be dependencies. A read after write dependence occurs, if there is for

9
00:00:31,390 --> 00:00:34,830
example a stored word, to some address in memory.

10
00:00:34,830 --> 00:00:37,160
And then we do a load word from that address.

11
00:00:37,160 --> 00:00:41,800
Then there is definitely a read after write dependence between the store and

12
00:00:41,800 --> 00:00:46,050
the load. Basically the load uses the value put there by the store.

13
00:00:46,050 --> 00:00:49,150
We can also have a write after read false dependence. For example,

14
00:00:49,150 --> 00:00:52,660
we can have the program that first needs to load something then store it.

15
00:00:52,660 --> 00:00:56,010
If we reorder this, then the load gets a value from the store,

16
00:00:56,010 --> 00:01:00,350
not the value from before. And finally we can have a write after I dependency.

17
00:01:00,350 --> 00:01:04,040
There are two stores. The store to the same address. The last one should,

18
00:01:04,040 --> 00:01:07,610
can, leave the value at the end of that sequence. But

19
00:01:07,610 --> 00:01:11,270
if we reorder them then the value in the memory ends up being the, kind of,

20
00:01:11,270 --> 00:01:16,060
stale value from the first of the stores. So, obviously, dependencies from

21
00:01:16,060 --> 00:01:22,710
memory need to be obeyed or eliminate it just like register ones do.

22
00:01:22,710 --> 00:01:27,370
So what do we do about the dependencies? In Tomasulo's algorithm,

23
00:01:27,370 --> 00:01:31,010
we do loads and stores in order; basically we don't try to reorder them.

24
00:01:31,010 --> 00:01:33,750
When as we should these instructions, we put them load and

25
00:01:33,750 --> 00:01:36,930
store queue and then we just follow the order of this instruction. So for

26
00:01:36,930 --> 00:01:42,790
example, a load doesn't execute if there is a previous store pending

27
00:01:42,790 --> 00:01:46,210
even though maybe the load is ready to go but the store still is waiting for

28
00:01:46,210 --> 00:01:50,760
something. The second option is to actually identify dependency between load

29
00:01:50,760 --> 00:01:54,232
stores, et cetera, and then reorder them just like we did normal instructions,

30
00:01:54,232 --> 00:01:59,335
et cetera. But this turns out to be more complicated than doing it for

31
00:01:59,335 --> 00:02:02,765
register-based dependencies, so we are not going to do that. And that's why for

32
00:02:02,765 --> 00:02:06,070
Tomasulo's algorithm they chose not to do this for memory instructions, but

33
00:02:06,070 --> 00:02:10,419
they chose to do, do it for other instructions. Modern processors actually do

34
00:02:10,419 --> 00:02:13,410
identify dependencies, reorder, et cetera, even for loads and stores.

35
00:02:13,410 --> 00:02:17,864
But we will consider later how that is done. So, so for Tomasulo's algorithm,

36
00:02:17,864 --> 00:02:21,349
this was really kind of the, you know, option that they chose.
