1
00:00:00,380 --> 00:00:03,480
Hopefully, all your JavaScript is
running at the right time in the frame.

2
00:00:03,480 --> 00:00:04,590
And that's great.

3
00:00:04,590 --> 00:00:08,125
But now, you need to make sure that
it's not taking too long to run.

4
00:00:08,125 --> 00:00:12,731
Remember that to meet 60 frames a second
you have to fit all the work inside 16

5
00:00:12,731 --> 00:00:13,708
milliseconds.

6
00:00:13,708 --> 00:00:17,685
And that's not just JavaScript but
everything for our frame.

7
00:00:17,685 --> 00:00:20,985
In reality, we have to be inside
of ten to 12 milliseconds to

8
00:00:20,985 --> 00:00:23,475
leave the browser some time for
it's housekeeping.

9
00:00:23,475 --> 00:00:26,495
It's easy for JavaScript to
take quite some time to run,

10
00:00:26,495 --> 00:00:28,335
especially if you
are using frameworks and

11
00:00:28,335 --> 00:00:31,660
libraries because they will need
some time to do their work.

12
00:00:31,660 --> 00:00:35,960
Whether that's organizing views in your
app or handling callbacks or perhaps,

13
00:00:35,960 --> 00:00:37,380
even analyzing data.

14
00:00:37,380 --> 00:00:39,550
And now I'm back in Chrome's DevTools,
and

15
00:00:39,550 --> 00:00:42,640
I'm going to take a look
at its JavaScript profiler.

16
00:00:42,640 --> 00:00:46,090
This is going to tell us not just
that I spent time in JavaScript, but

17
00:00:46,090 --> 00:00:49,130
which functions, where,
and for how long.

18
00:00:49,130 --> 00:00:51,240
Normally, when we record and

19
00:00:51,240 --> 00:00:55,490
interact with the site we don't get
a lot of information on JavaScript.

20
00:00:55,490 --> 00:00:59,200
For example, here we can see that
I've called some JavaScript.

21
00:00:59,200 --> 00:01:02,580
We don't know anymore about
what was called or why.

22
00:01:02,580 --> 00:01:08,220
If I check this box,
in the UI, and then re-record.

23
00:01:08,220 --> 00:01:10,390
And now you can see with
the JavaScript profiler on,

24
00:01:10,390 --> 00:01:11,840
I get a lot more information.

25
00:01:11,840 --> 00:01:14,420
And if I hit the W key
to zoom in a bit more,

26
00:01:14,420 --> 00:01:20,370
we can see they called an expand
function followed by collect properties.

27
00:01:20,370 --> 00:01:23,371
The JavaScript profiler is
a great tool to use when you know

28
00:01:23,371 --> 00:01:25,584
that you have long-running JavaScript.

29
00:01:25,584 --> 00:01:27,335
You shouldn't leave it on all the time.

30
00:01:27,335 --> 00:01:30,979
You should really only look to use it
when you know you have a problem with

31
00:01:30,979 --> 00:01:33,050
long-running JavaScript.

32
00:01:33,050 --> 00:01:35,390
And now armed with
this extra information,

33
00:01:35,390 --> 00:01:37,290
I can find my bottlenecks more easily.
