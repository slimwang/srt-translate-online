1
00:00:00,400 --> 00:00:03,080
There are two other texture mapping methods that can add considerable detail to

2
00:00:03,080 --> 00:00:07,272
a model. The first is displacement mapping. Here a texture, called a height

3
00:00:07,272 --> 00:00:11,570
field, is used to change the height of the surface itself at each vertex. In

4
00:00:11,570 --> 00:00:15,230
other words, each vertex has a u v value. This value is used to retrieve the

5
00:00:15,230 --> 00:00:18,805
height value from the texture. The height value is then used to displace the

6
00:00:18,805 --> 00:00:22,846
vertex. In other words, move it upward or downward along it's normal. However,

7
00:00:22,846 --> 00:00:25,450
simply displacing the vertices does not change the shading normals of the

8
00:00:25,450 --> 00:00:28,778
surrounding surface. You would see the bumpiness and the silhouette of the

9
00:00:28,778 --> 00:00:32,107
object, but otherwise the shading would look fairly similar to the original. To

10
00:00:32,107 --> 00:00:34,836
change the shading normals themselves, another texture is applied to the

11
00:00:34,836 --> 00:00:38,762
surface. This texture is called a normal map, and is considerably different

12
00:00:38,762 --> 00:00:42,616
than other textures we've encountered up to this point. Here's the displacement

13
00:00:42,616 --> 00:00:46,172
map for the model, and here's what the normal map looks like. The grey level of

14
00:00:46,172 --> 00:00:49,053
this height field shows the amount to displace the vertex, with brighter pixels

15
00:00:49,053 --> 00:00:53,650
pushing farther above the original surface. The normal map is, in fact, derived

16
00:00:53,650 --> 00:00:57,120
from this displacement map, and there are tools to create this type of texture.

17
00:00:57,120 --> 00:01:00,240
Each normal in a normal map is found from the differences in the nearby heights

18
00:01:00,240 --> 00:01:04,482
in the displacement map. You can always tell a normal map by its distinctive

19
00:01:04,482 --> 00:01:09,774
light blue. The normal map stores an xyz direction vector at each texel. When

20
00:01:09,774 --> 00:01:14,908
we view this xyz value as an RGB color, we get this type of look. Specifically

21
00:01:14,908 --> 00:01:18,256
the red channel is x, with positive to the right, the green channel is y with

22
00:01:18,256 --> 00:01:22,914
positive up, and blue is the z axis. This xyz space is relative to the surface

23
00:01:22,914 --> 00:01:27,297
of the model and is called tangent space. If the normal is not to be changed at

24
00:01:27,297 --> 00:01:32,344
all, the normal stored is 0, 0, 1, straight at the z axis. A value of 127 in

25
00:01:32,344 --> 00:01:37,415
this texture means 0. A value of 255 means 1. The light blue then comes from an

26
00:01:37,415 --> 00:01:43,089
x and y value of 0, which gives a red and green channel of 127. The z value is

27
00:01:43,089 --> 00:01:49,125
1, giving a blue channel of 255. So an unchanged normal has an RGB of 127, 127,

28
00:01:49,125 --> 00:01:53,970
255, a light blue. The basic idea is that you're using this normal value to

29
00:01:53,970 --> 00:01:57,512
change the existing shading normal. The normal in the texture map takes the

30
00:01:57,512 --> 00:02:00,410
place of the shading normal, and relative to the shading normal's original

31
00:02:00,410 --> 00:02:04,882
direction. Here's the interesting part. Once you have the normal map, you don't

32
00:02:04,882 --> 00:02:08,013
have to apply the displacement map. They're separate processes. The

33
00:02:08,013 --> 00:02:11,444
displacement map moves the vertices. The normal map modifies the shading

34
00:02:11,444 --> 00:02:14,664
normals. Here we have, from left to right, the unmodified head, the head with

35
00:02:14,664 --> 00:02:18,748
just normal mapping, and the head with both. While the model with both mappings

36
00:02:18,748 --> 00:02:21,352
is the most convincing, using just the normal map gives you much of what you

37
00:02:21,352 --> 00:02:25,658
want but with many less triangles. In fact, artists often first create highly

38
00:02:25,658 --> 00:02:29,440
detailed geometric models. A program can then bake the normals into a normal

39
00:02:29,440 --> 00:02:33,560
map. The mesh can then be simplified, saving both processing time and memory

40
00:02:33,560 --> 00:02:37,390
while retaining much of the detail as the original. Having a surface that is

41
00:02:37,390 --> 00:02:40,096
smooth but has differing shading normals is not something we usually see in the

42
00:02:40,096 --> 00:02:44,162
real world. In reality, bumps are what cause the surface to change its

43
00:02:44,162 --> 00:02:47,347
orientation; however, it's fine in computer graphics to have one without the

44
00:02:47,347 --> 00:02:51,234
other. We've already been using the idea that the shading normal can be

45
00:02:51,234 --> 00:02:55,510
different than the geometric surface normal. Here we are extending that idea.

46
00:02:55,510 --> 00:02:58,300
Varying the shading normal per texel instead of per vertex.
