1
00:00:00,190 --> 00:00:02,560
So what would such a function look like?

2
00:00:02,560 --> 00:00:04,630
Well, it would look something like this and

3
00:00:04,630 --> 00:00:07,420
it would be, what's referred to as a Gaussian filter.

4
00:00:07,420 --> 00:00:10,080
So here's our original image, here is our filter.

5
00:00:10,080 --> 00:00:13,590
Now this is not a great Gaussian because it's only three by three.

6
00:00:13,590 --> 00:00:16,670
But you'll notice it's higher in the middle, then falls off at the edges and

7
00:00:16,670 --> 00:00:18,450
even falls off more at the corners.

8
00:00:18,450 --> 00:00:22,550
And what that is is, that's a very sort of low representation,

9
00:00:22,550 --> 00:00:25,860
very coarse representation, of a Gaussian function.

10
00:00:25,860 --> 00:00:28,610
And our Gaussian function is written here.

11
00:00:28,610 --> 00:00:31,030
This is the two-dimensional Gaussian in the u, v.

12
00:00:31,030 --> 00:00:33,730
1 over 2 pi sigma squared,

13
00:00:33,730 --> 00:00:36,620
e to the minus u squared plus v squared over sigma squared.

14
00:00:36,620 --> 00:00:40,430
That's a circularly symmetric Gaussian function.

15
00:00:40,430 --> 00:00:44,042
Get to know and love your circularly symmetric Gaussian functions.

16
00:00:44,042 --> 00:00:48,660
All right, so here I have, that's in fact what that plot was, so

17
00:00:48,660 --> 00:00:51,350
we're going to do smoothing proportional.

18
00:00:51,350 --> 00:00:53,912
So this exponentially to the minus x squared plus y

19
00:00:53,912 --> 00:00:55,920
squared over 2 sigma squared.

20
00:00:55,920 --> 00:00:58,390
And the technical description of this,

21
00:00:58,390 --> 00:01:00,890
is that it's a circularly symmetric fuzzy blob.

22
00:01:00,890 --> 00:01:03,070
That's what the Gaussian is going to be.

23
00:01:03,070 --> 00:01:04,739
So if we take that image,

24
00:01:04,739 --> 00:01:09,620
that same high textured image that we had before, and we filter that,

25
00:01:09,620 --> 00:01:13,850
with this now Gaussian blurring function, what are we going to get?

26
00:01:13,850 --> 00:01:16,320
We get something that looks like that.

27
00:01:16,320 --> 00:01:18,530
So much better, so much nicer, right?

28
00:01:18,530 --> 00:01:22,714
I mean, compare smoothing with a Gaussian to the non-Gaussian.

29
00:01:22,714 --> 00:01:24,750
Gaussian, non-Gaussian, right?

30
00:01:24,750 --> 00:01:26,280
And you can see the difference.

31
00:01:26,280 --> 00:01:30,220
In fact, in the non-Gaussian you see all these sharp edges,

32
00:01:30,220 --> 00:01:32,350
now you really seem them because they're red, all right?

33
00:01:32,350 --> 00:01:35,390
But when you do it with a Gaussian you get that nice smooth blurring.
