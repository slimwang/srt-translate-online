1
00:00:00,380 --> 00:00:03,650
So, this is the state of the processor. We have some instructions fetched.

2
00:00:03,650 --> 00:00:06,360
This is the very first one that we will be trying to issue.

3
00:00:06,360 --> 00:00:10,760
This is our reservation stations, our register file with the values,

4
00:00:10,760 --> 00:00:13,900
the RAT that says where the values are currently and

5
00:00:13,900 --> 00:00:18,170
it's pointing to the register file for now. The ROB that is empty for now.

6
00:00:18,170 --> 00:00:22,840
This is a little table that we will be writing what happens in which cycle. And

7
00:00:22,840 --> 00:00:25,300
then, this is kind of the legend for our reservation stations and

8
00:00:25,300 --> 00:00:29,940
ROBs because we need to know, which field to put which value in. So in cycle 1,

9
00:00:29,940 --> 00:00:33,110
what's going to happen is, we're going to try to issue this first instruction.

10
00:00:33,110 --> 00:00:36,630
To do that, we need. An available reservation station and

11
00:00:36,630 --> 00:00:41,510
an available ROB entry, we have both, so we are ready to go. It's a divide, and

12
00:00:41,510 --> 00:00:46,870
we're going to write the divides kind of operation here. It's writing to R2,

13
00:00:46,870 --> 00:00:50,950
so we're going to note that in the destination register over here.

14
00:00:50,950 --> 00:00:54,075
We're going to write the destination tag in the reservation station, that's

15
00:00:54,075 --> 00:01:00,270
going to be ROB1 now. Remember that. The value we broadcast the result with,

16
00:01:00,270 --> 00:01:04,430
basically the tag that everybody's trying to compare, is now going to be the ROB

17
00:01:04,430 --> 00:01:07,720
entry number, not the reservation station number. That's what allows us to free

18
00:01:07,720 --> 00:01:12,490
reservation stations very quickly. The R3 and R4 are going to be looked up here.

19
00:01:12,490 --> 00:01:16,710
We will find that it's 45 and 5, and write it here. And then,

20
00:01:16,710 --> 00:01:21,940
we are going to rename R2, so that it points to ROB1 from now on. And

21
00:01:21,940 --> 00:01:26,110
then because we said that we will be able dispatch in the very same cycle and

22
00:01:26,110 --> 00:01:30,510
begin execution in the next cycle, we have issued this instruction Cycle 1.

23
00:01:30,510 --> 00:01:33,980
It's going to begin executing in Cycle 2 because both of its operands have

24
00:01:33,980 --> 00:01:39,080
values ready to go. Now in Cycle 2 this instruction begins executing, so

25
00:01:39,080 --> 00:01:43,490
the reservation station becomes free. Before I free the reservation station I'm

26
00:01:43,490 --> 00:01:46,280
going to note that this instruction is dividing 45 and 5,

27
00:01:46,280 --> 00:01:51,060
so the result that is going to eventually end up in ROB is going to be 9,

28
00:01:51,060 --> 00:01:53,280
45 over 5. This instruction is not done so

29
00:01:53,280 --> 00:01:56,780
technically this value lands here only when it's done but I'm going to note this

30
00:01:56,780 --> 00:02:00,650
is what's going to happen because, I want to know what that value will be. And,

31
00:02:00,650 --> 00:02:04,450
with that, this reservation station becomes free. So now what's going to happen,

32
00:02:04,450 --> 00:02:09,370
this is a divide. It's going to take 40 cycles to do things so in cycle 42,

33
00:02:09,370 --> 00:02:14,420
which is the 41st cycle since we began executing. We tried to write its result.

34
00:02:14,420 --> 00:02:17,450
That's going to be a long time in the future. Meanwhile, in Cycle 2 we're

35
00:02:17,450 --> 00:02:21,785
going to try to do, the rest of the things. Can we dispatch something else,

36
00:02:21,785 --> 00:02:26,620
well nothing to dispatch? Can we issue something. Well the multiplication has

37
00:02:26,620 --> 00:02:30,800
a reservation station and ROB entry ready to be obtained, so we can do that.

38
00:02:30,800 --> 00:02:35,870
It's a MUL of R1. The tag for it is now going to be ROB2. R5 and R6, are 3 and

39
00:02:35,870 --> 00:02:41,000
4. So we have the values, we don't have to wait for

40
00:02:41,000 --> 00:02:46,760
anything. And R1 is a result. Now we need to remember that

41
00:02:46,760 --> 00:02:52,053
R1 from now on is mapped to ROB2. Basically, if anybody from now on wants to ru,

42
00:02:52,053 --> 00:02:57,080
use R1, it really needs to wait for the result of instruction in ROB2.

43
00:02:58,530 --> 00:03:02,680
So this instruction has issued in Cycle 2. It's gone up this batch,

44
00:03:02,680 --> 00:03:06,150
also in Cycle 2 because it's ready to go. So in Cycle 3,

45
00:03:06,150 --> 00:03:10,865
it's going to begin executing. And, with that, we have moved to cycle 3.
