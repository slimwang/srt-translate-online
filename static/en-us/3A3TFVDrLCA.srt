1
00:00:00,790 --> 00:00:02,560
So, so far all the computation we've done

2
00:00:02,560 --> 00:00:04,770
is operated only on numbers, and in the

3
00:00:04,770 --> 00:00:07,830
early days of computing, people thought of computers

4
00:00:07,830 --> 00:00:11,900
as super powerful calculators, for doing computations like

5
00:00:11,900 --> 00:00:16,760
simulating nuclear weapons, computing ballistic tables, or breaking

6
00:00:16,760 --> 00:00:20,300
encryptions, which was a little more than just

7
00:00:20,300 --> 00:00:23,230
arithmetic. But still was mostly about counting and

8
00:00:23,230 --> 00:00:25,790
doing simple arithmetic. We saw this quote from

9
00:00:25,790 --> 00:00:29,690
Grace Hopper earlier talking about computers could only do arithmetic, and

10
00:00:29,690 --> 00:00:32,890
this is what people thought about computers in the 1940s and

11
00:00:32,890 --> 00:00:35,990
1950s. But there's no reason to limit computers to that. They

12
00:00:35,990 --> 00:00:38,620
can operate on any kind of data we want, and it

13
00:00:38,620 --> 00:00:41,250
gets much more interesting when we operate on data besides just

14
00:00:41,250 --> 00:00:44,250
numbers. If we're going to build a search engine, most of the

15
00:00:44,250 --> 00:00:46,800
data that we want to deal with is not numbers. It's

16
00:00:46,800 --> 00:00:51,050
the letters that are contained in webpages, and in Python, that's what

17
00:00:51,050 --> 00:00:53,454
we call a string. A string is just a sequence of

18
00:00:53,454 --> 00:00:56,841
characters surrounded by quotes. So here's an example of a string

19
00:00:56,841 --> 00:00:59,529
in Python, it starts with a single quote, has a sequence

20
00:00:59,529 --> 00:01:02,441
of characters and anything that we can type on the keyboard can

21
00:01:02,441 --> 00:01:06,030
be in a string, and ends with another single quote. The

22
00:01:06,030 --> 00:01:09,890
string is the sequence of characters between the single quotes. If

23
00:01:09,890 --> 00:01:12,600
we want, we can use double quotes instead. If we use

24
00:01:12,600 --> 00:01:16,160
double quote, then the double quote starts the string. We can have

25
00:01:16,160 --> 00:01:18,670
a sequence of characters and a double quote that ends the

26
00:01:18,670 --> 00:01:22,600
string. The only requirement is that if we start the string

27
00:01:22,600 --> 00:01:24,380
with a single quote, it has to end with a single

28
00:01:24,380 --> 00:01:27,460
quote. If we start the string with a double quote, it

29
00:01:27,460 --> 00:01:30,280
has to end with a double quote. And that's actually a

30
00:01:30,280 --> 00:01:33,820
handy property. Because that means we can have the other kind

31
00:01:33,820 --> 00:01:36,690
of quote within our string. This string starts with a double

32
00:01:36,690 --> 00:01:41,390
quote. It contains a single quote inside it. But because we started

33
00:01:41,390 --> 00:01:44,280
with a double quote, that single quote doesn't end the string.

34
00:01:44,280 --> 00:01:47,060
That single quote is just like another character in the string.

35
00:01:47,060 --> 00:01:51,150
The string continues. Until the closing double quote. So let's try

36
00:01:51,150 --> 00:01:55,150
some things in the Python interpreter. So, we can print a

37
00:01:55,150 --> 00:01:57,680
string, just like we can print a number. So here I'm

38
00:01:57,680 --> 00:02:01,170
printing the string hello. And when we run this, we see

39
00:02:01,170 --> 00:02:03,780
the output hello. It's printing hello. We don't see the single

40
00:02:03,780 --> 00:02:06,770
quotes as it prints, but we know that it's a string that

41
00:02:06,770 --> 00:02:09,860
was printed. We can print a string with double quotes,

42
00:02:11,130 --> 00:02:13,260
and one thing to notice when you enter strings through the

43
00:02:13,260 --> 00:02:16,440
interpreter, the color is black now, since it's an open

44
00:02:16,440 --> 00:02:20,550
string, it hasn't been finished, once I type the final quote,

45
00:02:20,550 --> 00:02:23,820
that closes the string, the color changes to blue. So

46
00:02:23,820 --> 00:02:26,210
now when we run this, we have two prints, both that

47
00:02:26,210 --> 00:02:28,920
print hello, it looks the same both times. It doesn't matter

48
00:02:28,920 --> 00:02:32,230
if we use single quotes or double quotes around our string.

49
00:02:32,230 --> 00:02:35,920
Just to check everyone's paying attention, I'm going to try one

50
00:02:35,920 --> 00:02:38,340
more thing. And now I am printing hello without the quotes.

51
00:02:39,520 --> 00:02:42,420
You can guess what that will do. We won't make a

52
00:02:42,420 --> 00:02:45,010
quiz of this, but try to guess before I run it.

53
00:02:47,490 --> 00:02:50,200
Now that I run this, we see the result.

54
00:02:50,200 --> 00:02:52,200
We get a name error. The name Hello is not

55
00:02:52,200 --> 00:02:56,040
defined. Without the quotes, this looks just like a variable.

56
00:02:56,040 --> 00:02:58,250
It's a name, but it's a variable that we didn't

57
00:02:58,250 --> 00:03:01,150
define. So when I try to use it, I get

58
00:03:01,150 --> 00:03:04,550
an error that the variable name Hello is not defined.

59
00:03:06,350 --> 00:03:08,530
If I wanted to I could define a variable named

60
00:03:08,530 --> 00:03:13,590
hello. Let's make hello refer to the string howdy and

61
00:03:13,590 --> 00:03:17,790
now when I print hello, it works. I see the first

62
00:03:17,790 --> 00:03:20,760
two prints that printed hello, now when I print the variable hello,

63
00:03:20,760 --> 00:03:23,380
well that refers to the string howdy and I see howdy as

64
00:03:23,380 --> 00:03:26,450
the result. We usually don't want our variables to start with capital

65
00:03:26,450 --> 00:03:29,510
letters. That's just a convention, so I'm going to change this

66
00:03:29,510 --> 00:03:33,630
back to a lower case hello because it makes me feel uncomfortable

67
00:03:33,630 --> 00:03:36,410
to have a variable with a capital letter. There's no rule against

68
00:03:36,410 --> 00:03:38,980
that in Python. It's just a convention that we like to follow.
