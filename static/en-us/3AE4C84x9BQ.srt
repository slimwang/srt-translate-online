1
00:00:00,080 --> 00:00:03,408
Now to receive these callbacks. We first go back to the physics engine class

2
00:00:03,408 --> 00:00:06,288
and add a nice wrapper function that allows us to set some of the callback

3
00:00:06,288 --> 00:00:10,970
functions for box2D. In general Box2D allows you to get callbacks during

4
00:00:10,970 --> 00:00:14,859
multiple phases of collision. We have a begin contact, which occurs when things

5
00:00:14,859 --> 00:00:18,390
are touching, but the collision calculated hasn't done yet. End contact when

6
00:00:18,390 --> 00:00:21,590
the contact analysis is over, and post solve which is called once the physics

7
00:00:21,590 --> 00:00:25,953
collisions have occurred. For our purposes, we need to find a new function in

8
00:00:25,953 --> 00:00:29,345
the physics engine that allows the engine to pass in customs callbacks, to be

9
00:00:29,345 --> 00:00:34,532
executed when anyone of these phases occurs. This code is fairly simple

10
00:00:34,532 --> 00:00:38,286
although deep. We take in an object that contains callbacks we're looking for

11
00:00:38,286 --> 00:00:41,454
and define logic that will issue a callback to those functions, once the engine

12
00:00:41,454 --> 00:00:46,080
hits that phase. So, for instance, we assume that is the callbacks.PostSolve

13
00:00:46,080 --> 00:00:49,030
method exists, then we define the PostSolve method on our listener as a

14
00:00:49,030 --> 00:00:53,768
function that takes in the contact and impulse, pass for Box2D. And we'll

15
00:00:53,768 --> 00:00:56,666
actually send that to the PostSolve function in our contact, giving it the 2

16
00:00:56,666 --> 00:01:00,614
bodies for the fixtures that are touching. Now Box2D operates in a different

17
00:01:00,614 --> 00:01:03,686
environment than we do. That is that it operates in fixtures that are

18
00:01:03,686 --> 00:01:07,846
colliding, and we have to go then fetch the body object that we're using. Once

19
00:01:07,846 --> 00:01:10,786
we've set all of our callback handlers that we want, we actually can call

20
00:01:10,786 --> 00:01:15,357
world.SetContactListener and pass in the listener object. This will effectively

21
00:01:15,357 --> 00:01:18,484
bake in all of our contact objects into the world, so that any time we get

22
00:01:18,484 --> 00:01:22,451
these collision objects, we'll get collision callbacks.
