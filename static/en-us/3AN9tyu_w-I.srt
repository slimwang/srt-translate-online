1
00:00:00,410 --> 00:00:04,460
So the answer is the third choice. These data structures

2
00:00:04,460 --> 00:00:07,500
are getting complicated enough that they're fairly hard to read. We

3
00:00:07,500 --> 00:00:10,960
need to think about what components we need to represent

4
00:00:10,960 --> 00:00:14,100
the hashtable. And the main component we need is a way

5
00:00:14,100 --> 00:00:17,688
of representing a bucket. So, here's the picture of our

6
00:00:17,688 --> 00:00:21,130
hash table. What we want is a list, this is going to

7
00:00:21,130 --> 00:00:22,690
be the list where each element in the list is

8
00:00:22,690 --> 00:00:26,090
a bucket. And what a bucket is, is a list itself

9
00:00:26,090 --> 00:00:28,350
where each element in that list is a key and

10
00:00:28,350 --> 00:00:31,630
a value. In our case, the key is the word,

11
00:00:31,630 --> 00:00:34,240
the value is a list of URLs. So the structure

12
00:00:34,240 --> 00:00:37,170
that corresponds to that most closely is this one where

13
00:00:37,170 --> 00:00:41,010
we have a list. Each inner list here, so this

14
00:00:41,010 --> 00:00:44,550
corresponds to a bucket. And then within the bucket, a

15
00:00:44,550 --> 00:00:48,346
word and a list of URLs is one entry. This

16
00:00:48,346 --> 00:00:51,910
corresponds to what the entries were in our previous index

17
00:00:51,910 --> 00:00:53,360
but now because we want to make it a

18
00:00:53,360 --> 00:00:55,680
hash table, we're going to collect them in buckets.

19
00:00:55,680 --> 00:00:59,030
So list of those entries and each element

20
00:00:59,030 --> 00:01:01,320
in the outer list corresponds to one bucket.
