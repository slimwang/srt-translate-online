1
00:00:00,470 --> 00:00:05,696
Let's dig into some of the details of the DHT technology. The first name-space

2
00:00:05,696 --> 00:00:10,840
that the DHT technology has to deal with is the key-space name-space.

3
00:00:10,840 --> 00:00:15,670
So the way name-space is managed is, if you have content to

4
00:00:15,670 --> 00:00:20,980
disseminate. You generate, a unique key, for the content,

5
00:00:20,980 --> 00:00:25,478
by using some algorithm like SHA1 which generates a

6
00:00:25,478 --> 00:00:32,259
160-bit key. The number of bits in the key or the signature is big enough that

7
00:00:32,259 --> 00:00:35,950
they will not recollision even if different content

8
00:00:35,950 --> 00:00:38,620
are using the same algorithm to generate this key.

9
00:00:38,620 --> 00:00:41,280
So that is how you create a unique

10
00:00:41,280 --> 00:00:45,380
signature for a particular content, using SHA-1. The second

11
00:00:45,380 --> 00:00:46,880
name-space we have to deal with is a

12
00:00:46,880 --> 00:00:50,660
node-space. So here, what we're doing is, we are

13
00:00:50,660 --> 00:00:57,310
creating an SHA-1 hash of IP addresses of nodes that want to share content.

14
00:00:57,310 --> 00:01:02,090
So, let's say that me and my buddies. Form a social network and all our IP

15
00:01:02,090 --> 00:01:04,660
addresses, we going to use this algorithm to

16
00:01:04,660 --> 00:01:08,222
encode them into this 160-bit node id. So

17
00:01:08,222 --> 00:01:11,034
now we've got two name-spaces, one is the

18
00:01:11,034 --> 00:01:15,746
key-space, name-space and the node-space, name-space, and both

19
00:01:15,746 --> 00:01:18,710
of them are derived using the same algorithmic

20
00:01:18,710 --> 00:01:22,070
technique, let's say. So in this case we've

21
00:01:22,070 --> 00:01:24,940
created a key for the content so that

22
00:01:24,940 --> 00:01:27,490
there's a unique signature for a particular content,

23
00:01:27,490 --> 00:01:30,970
similarly, we've created a node id from the

24
00:01:30,970 --> 00:01:35,000
IP address, which is again a unique signature

25
00:01:35,000 --> 00:01:41,570
for a particular IP address. The objective is, if I have a key, I want to store.

26
00:01:41,570 --> 00:01:48,670
That key in a node id N, such that the key is very close to the node id

27
00:01:48,670 --> 00:01:52,270
N. Ideally, if you're lucky, the key is exactly

28
00:01:52,270 --> 00:01:54,870
equal to N, but, you know, it's not possible

29
00:01:54,870 --> 00:01:58,870
to guarantee that this hash and this hash will

30
00:01:58,870 --> 00:02:01,420
result in exactly the same value. So long as

31
00:02:01,420 --> 00:02:03,570
it is close enough, like in the previous example

32
00:02:03,570 --> 00:02:06,280
I showed you. That if I generated a hash 149,

33
00:02:06,280 --> 00:02:09,440
I stored it in that node 150, which is

34
00:02:09,440 --> 00:02:12,490
close enough to the hash that I created. So the

35
00:02:12,490 --> 00:02:17,210
API for manipulating this distibuted hash table data structure would

36
00:02:17,210 --> 00:02:20,910
be putkey and getkey, so putkey would take two arguments.

37
00:02:20,910 --> 00:02:23,500
The key and the value. Value can be anything

38
00:02:23,500 --> 00:02:25,790
that you want to associate with that. In the previous

39
00:02:25,790 --> 00:02:27,960
example, I've said the value may be the IP address

40
00:02:27,960 --> 00:02:31,620
of the content that is associated with the particular key.

41
00:02:31,620 --> 00:02:35,890
And getkey takes one argument, namely the key, and

42
00:02:35,890 --> 00:02:39,700
returns the value that is associated with that key-value pair.
