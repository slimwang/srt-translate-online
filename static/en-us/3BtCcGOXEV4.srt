1
00:00:00,000 --> 00:00:03,000
Here's the quiz I'd like to give you--what I've provided is a queue code

2
00:00:03,000 --> 00:00:07,000
we've already seen and also three test functions.

3
00:00:07,000 --> 00:00:10,000
The first test function is the one that I wrote and this is put here really quickly.

4
00:00:10,000 --> 00:00:15,000
It creates a three-element queue, checks that it's empty that is to save.

5
00:00:15,000 --> 00:00:19,000
It calls the empty method, and if it's not empty, that is to save.

6
00:00:19,000 --> 00:00:24,000
If the empty method doesn't return true, we print test1 not okay and return.

7
00:00:24,000 --> 00:00:29,000
Otherwise, we keep going. So we enqueue a 10, make sure that that succeeds.

8
00:00:29,000 --> 00:00:32,000
Enqueue the value 11, make sure that that succeeds.

9
00:00:32,000 --> 00:00:36,000
Call dequeue method which takes the first thing out of the queue that we put in

10
00:00:36,000 --> 00:00:38,000
which is 10, so we make sure that it's 10.

11
00:00:38,000 --> 00:00:43,000
Dequeue the next element, make sure that it is 11, and now we check again that the queue is empty.

12
00:00:43,000 --> 00:00:49,000
If all of these are true, then we print test1 okay. So, that's my test function.

13
00:00:49,000 --> 00:00:53,000
You're test function are test2 and 3--so just make sure that everything works here.

14
00:00:53,000 --> 00:00:57,000
We run the code and we see the test1 okay, test2 okay, and test3 okay.

15
00:00:57,000 --> 00:01:01,000
So you're assignment is to write functions test2 and test3.

16
00:01:01,000 --> 00:01:04,000
So just a little bit previously, I gave some examples

17
00:01:04,000 --> 00:01:08,000
of several different tasks for the queue that were equivalent to each other

18
00:01:08,000 --> 00:01:13,000
in the sense that if we run one of them then it would just about as good as running the other one.

19
00:01:13,000 --> 00:01:15,000
So, if you remember, for example, we can enqueue some numbers

20
00:01:15,000 --> 00:01:17,000
and dequeue them and check if they are correct.

21
00:01:17,000 --> 00:01:19,000
The queue code would behave exactly the same

22
00:01:19,000 --> 00:01:24,000
if we do the same exact operations but with sleeps in between them.

23
00:01:24,000 --> 00:01:27,000
So, you're going to do here is the opposite of what I was showing.

24
00:01:27,000 --> 00:01:30,000
What I want you to do is write test functions two and three

25
00:01:30,000 --> 00:01:34,000
so they're not testing equivalent functionality in the queue.

26
00:01:34,000 --> 00:01:37,000
This should be pretty easy but let me just go up and look at the code

27
00:01:37,000 --> 00:01:40,000
and we'll get some ideas about how that might work.

28
00:01:40,000 --> 00:01:44,000
So, what kind of behaviors in the code could you trigger that I didn't trigger?

29
00:01:44,000 --> 00:01:49,000
Well, it's pretty obvious. For example, I never triggered the four case for enqueue.

30
00:01:49,000 --> 00:01:53,000
I never triggered the wrap around case, I never triggered the empty case for dequeue,

31
00:01:53,000 --> 00:01:55,000
nor did I trigger the wrap around case with the head point.

32
00:01:55,000 --> 00:02:00,000
So, given those ideas, right functions test2 and test3 such that

33
00:02:00,000 --> 99:59:59,999
they are not testing equivalent queue functionality as the test1 function that I wrote.
