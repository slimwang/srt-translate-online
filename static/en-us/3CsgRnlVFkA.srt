1
00:00:00,410 --> 00:00:03,640
Now that our Java joke telling
code is really coming along,

2
00:00:03,640 --> 00:00:05,590
we've broken it out
into its own library.

3
00:00:05,590 --> 00:00:08,210
That way we can reuse
it across projects.

4
00:00:08,210 --> 00:00:10,450
Let's check out how this project works.

5
00:00:10,450 --> 00:00:14,350
Inside our Android app build directory,
we have this javaJokes directory that

6
00:00:14,350 --> 00:00:18,170
contains a stock Gradle Java project,
just like we've been building all along.

7
00:00:19,240 --> 00:00:22,740
If we use the terminal to navigate to
the javaJokes directory, we can use

8
00:00:22,740 --> 00:00:26,810
Gradle to build this project on its own,
without reference to the Android app.

9
00:00:27,980 --> 00:00:31,770
However, our app doesn't yet
know anything about this library.

10
00:00:31,770 --> 00:00:34,360
What we need to do is
declare a compile dependency

11
00:00:34,360 --> 00:00:36,740
on the output of this library project.

12
00:00:36,740 --> 00:00:39,560
To do that,
we need to add the library project

13
00:00:39,560 --> 00:00:41,860
to the same multi-project
build as our Android app.

14
00:00:42,980 --> 00:00:47,095
We can do that in the settings.gradle
file of the root project.

15
00:00:47,095 --> 00:00:51,413
The settings.gradle file is where we
tell Gradle what sub-projects to include

16
00:00:51,413 --> 00:00:53,800
in the multi-project build.

17
00:00:53,800 --> 00:00:56,680
We already have the app project for
the Android app, so

18
00:00:56,680 --> 00:00:58,010
we'll add the javaJokes project.

19
00:00:59,040 --> 00:01:00,210
There we go.

20
00:01:00,210 --> 00:01:04,658
Now if we ask Gradle what projects or
sub-projects in this multi-project

21
00:01:04,658 --> 00:01:08,150
build, Gradle tells us that there are
two sub-projects, the Android app and

22
00:01:08,150 --> 00:01:08,980
the Java library.

23
00:01:10,180 --> 00:01:13,960
Next we need to declare a project
dependency between our Android app and

24
00:01:13,960 --> 00:01:15,530
our Java library.

25
00:01:15,530 --> 00:01:18,840
We can do that in the build.gradle
file in the app directory.

26
00:01:19,940 --> 00:01:23,070
Here we simply say that our app
has a compile time dependency

27
00:01:23,070 --> 00:01:24,955
on the project javaJokes.

28
00:01:26,020 --> 00:01:29,390
Now that we've gone ahead and declared
that dependency, we can go ahead and

29
00:01:29,390 --> 00:01:32,480
import our Java library into
our Android project, and

30
00:01:32,480 --> 00:01:34,740
we can use the class
from our Java library.

31
00:01:34,740 --> 00:01:37,260
If we bust out the old test device,

32
00:01:37,260 --> 00:01:39,730
here's the joke from our Java
library inside our Android app.

33
00:01:41,480 --> 00:01:42,920
When you run this multi-project build,

34
00:01:42,920 --> 00:01:46,730
if you watch the Gradle console
you'll notice something like this.

35
00:01:46,730 --> 00:01:49,088
The app project started
running some tasks.

36
00:01:49,088 --> 00:01:53,900
Then the javaJokes project jumped in to
create a jar for the app project to use.

37
00:01:53,900 --> 00:01:55,440
Well, that's all there is to it,

38
00:01:55,440 --> 00:01:58,100
to add a Java library project
to an Android studio build.
