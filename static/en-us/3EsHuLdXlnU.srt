1
00:00:00,420 --> 00:00:04,620
So, here I am in the command
prompt within the SQLite program,

2
00:00:04,620 --> 00:00:06,130
inside the shelter database.

3
00:00:07,610 --> 00:00:10,400
So, I want to see what tables
are in my database, and I can do so

4
00:00:10,400 --> 00:00:12,660
using the .tables command.

5
00:00:12,660 --> 00:00:15,310
So, as we expect,
it shows all zero of our tables,

6
00:00:15,310 --> 00:00:17,800
because we haven't created any yet.

7
00:00:17,800 --> 00:00:19,900
So, let's take a look at how to do that.

8
00:00:19,900 --> 00:00:23,380
So, before I hit a table
within my shelter database,

9
00:00:23,380 --> 00:00:25,710
I want to actually use
the headphone scenario from before.

10
00:00:25,710 --> 00:00:28,340
And this is because later on,

11
00:00:28,340 --> 00:00:31,460
I want you to come up with
the code to create the pets table.

12
00:00:31,460 --> 00:00:34,600
So, for this example, let's take
a look at the headphone scenario.

13
00:00:36,520 --> 00:00:40,057
So, let's quit out of
the SQLite program.

14
00:00:40,057 --> 00:00:47,555
And then from here, I'm going to
create a new database called store.db.

15
00:00:47,555 --> 00:00:52,240
Nice, so now I'm in SQLite again, but
I'm operating under the store.db.

16
00:00:52,240 --> 00:00:54,380
And just to double check
what tables are under here,

17
00:00:54,380 --> 00:00:55,630
it should be zero, as we expect.

18
00:00:57,250 --> 00:01:00,930
So, before we go on to create the table
within the command prompt here,

19
00:01:00,930 --> 00:01:03,048
let's discuss some details.

20
00:01:03,048 --> 00:01:05,340
So, here'll be the names and
data types for

21
00:01:05,340 --> 00:01:06,960
each of the columns from
our headphones table.

22
00:01:09,230 --> 00:01:13,900
And this is the generic SQLite
instruction in order to create a table.

23
00:01:13,900 --> 00:01:16,680
So, we have the table name,
the column names And

24
00:01:16,680 --> 00:01:17,930
their corresponding data types.

25
00:01:19,600 --> 00:01:22,750
Now, if we decide to call the table for
our headphones specifically,

26
00:01:22,750 --> 00:01:26,660
headphones, we can modify the create
statement to look like this.

27
00:01:28,780 --> 00:01:31,985
So, notice that the SQLite
keywords are capitalized,

28
00:01:31,985 --> 00:01:32,960
[BLANK_AUDIO]

29
00:01:32,960 --> 00:01:35,912
And therefore, they're easy to identify.

30
00:01:35,912 --> 00:01:38,690
So, we have create, text and integer.

31
00:01:39,710 --> 00:01:43,510
So, similar to keywords in Java,
such as if, int, and

32
00:01:43,510 --> 00:01:47,920
for, these keywords have special
meaning in the SQL language.

33
00:01:49,600 --> 00:01:53,470
So, CREATE TABLE makes a table and
TEXT and

34
00:01:53,470 --> 00:01:56,290
INTEGER are data types,
ones that we've just talked about.

35
00:01:58,210 --> 00:02:02,327
Now here, headphones is
the name of our table, name,

36
00:02:02,327 --> 00:02:07,880
price style, in_stock and
description are all column names.

37
00:02:07,880 --> 00:02:10,720
So, before we head back into
the terminal, I'm going to go ahead and

38
00:02:10,720 --> 00:02:12,180
add one more column to this table.

39
00:02:13,240 --> 00:02:16,360
An integer called _id.

40
00:02:16,360 --> 00:02:17,840
So, note that this is
another convention.

41
00:02:18,930 --> 00:02:23,120
So, in every table, you should have an
ID that uniquely identifies the object.

42
00:02:25,330 --> 00:02:27,440
And what do I mean by
uniquely identifies?

43
00:02:28,820 --> 00:02:31,080
Well, let's think about it in
terms of our pets example.

44
00:02:32,790 --> 00:02:36,317
So, say we have two pets,
both of them named Bear.

45
00:02:36,317 --> 00:02:43,217
So, the first one is a 215 pound or
98 kilogram, English Mastiff named Bear.

46
00:02:43,217 --> 00:02:49,408
And the second one is a tiny Pomeranian
only at 2 kilograms named Bear as well.

47
00:02:49,408 --> 00:02:53,325
Now if we assume that the name
Bear is a unique identifier for

48
00:02:53,325 --> 00:02:55,590
these dogs,
we would be absolutely wrong.

49
00:02:57,058 --> 00:03:00,190
And say, an eager pet owner
named Sally came in and

50
00:03:00,190 --> 00:03:03,040
wanted to adopt Bear, well Sally could

51
00:03:03,040 --> 00:03:05,750
accidentally end up with a completely
different pet than she intended.

52
00:03:06,930 --> 00:03:12,190
So, this is why, everywhere from deli
counters to say social security numbers,

53
00:03:12,190 --> 00:03:14,810
we use uniquely numbered
entries in a system.

54
00:03:16,180 --> 00:03:19,020
So, this is common practice
that helps us store

55
00:03:19,020 --> 00:03:22,180
unique IDs to help identify products.

56
00:03:22,180 --> 00:03:26,158
So, our headphones should and
will have IDs.

57
00:03:26,158 --> 00:03:34,145
The name _id with underscore in the
beginning is a convention from Android.

58
00:03:34,145 --> 00:03:37,958
So the _id column for
IDs in the SQLite tables for

59
00:03:37,958 --> 00:03:40,566
Android are always called _id.

60
00:03:40,566 --> 00:03:42,796
[BLANK_AUDIO]

61
00:03:42,796 --> 00:03:46,206
So, I'm going to be using this term
here, in order to prepare us for

62
00:03:46,206 --> 00:03:49,000
our eventual usage of the SQL
code in the Android app.

63
00:03:50,460 --> 00:03:53,820
All right, so now I'm sure you're
eagerly waiting to see what this

64
00:03:53,820 --> 00:03:57,100
actually looks like when we enter
the command in the terminal.

65
00:03:57,100 --> 00:03:58,220
So, let's go ahead and check that out.

66
00:03:59,980 --> 00:04:01,280
All right, so
back in the command prompt.

67
00:04:01,280 --> 00:04:05,770
I'm going to create the headphones
table now inside my store database.

68
00:04:05,770 --> 00:04:08,083
I can do so
using the CREATE TABLE command.

69
00:04:08,083 --> 00:04:13,169
[BLANK_AUDIO]

70
00:04:13,169 --> 00:04:16,769
And we can check that the table
is created using .tables.

71
00:04:16,769 --> 00:04:20,230
Perfect, so it's returned to us
the name of the table, headphones.

72
00:04:20,230 --> 00:04:23,000
Well, that didn't really give
us too much information.

73
00:04:23,000 --> 00:04:24,670
But another command I can use,

74
00:04:24,670 --> 00:04:29,950
is .schema and then headphones,
the name of the table I'm interested in.

75
00:04:31,970 --> 00:04:34,250
And notice here, what this command does,

76
00:04:34,250 --> 00:04:37,500
is it shows me the statement that
was used to create the table.

77
00:04:37,500 --> 00:04:40,700
So now,
a hopeful SQL command that we could use,

78
00:04:40,700 --> 00:04:44,058
would be PRAGMA and
then followed by TABLE_INFO,

79
00:04:44,058 --> 00:04:48,850
followed by the name of the table
within the parentheses.

80
00:04:48,850 --> 00:04:51,714
So, know here,
that this is an SQL command, whereas,

81
00:04:51,714 --> 00:04:56,360
these dot commands here were
SQLite program commands.

82
00:04:56,360 --> 00:05:01,710
So, this command here shows me some
useful information about the name and

83
00:05:01,710 --> 00:05:06,290
type of all my columns, and
it's a pretty easy to read format.

84
00:05:06,290 --> 00:05:08,890
So, now the opposite of creating
a table is dropping a table.

85
00:05:08,890 --> 00:05:12,190
And this means that we're
completely erasing it.

86
00:05:12,190 --> 00:05:15,205
So, this is a command that we'll
have to use with a lot of care.

87
00:05:16,405 --> 00:05:20,205
So from here, if I type DROP TABLE

88
00:05:20,205 --> 00:05:23,785
followed by the name of the table,
hit Enter.

89
00:05:24,875 --> 00:05:27,052
And double check that
the table was removed.

90
00:05:27,052 --> 00:05:30,100
By using our .tables command here.

91
00:05:30,100 --> 00:05:33,177
And notice the headphones
table is just gone.

92
00:05:33,177 --> 00:05:37,284
All right so now you've seen how to make
a table, view a list of all the tables,

93
00:05:37,284 --> 00:05:40,511
as well as,
see what's inside your table.

94
00:05:40,511 --> 00:05:43,681
And then lastly, we've talked
about how to delete that table.

95
00:05:43,681 --> 00:05:47,266
And now since, the ultimate goal here
isn't to make the headphones store app

96
00:05:47,266 --> 00:05:49,791
instead, we want to
make the shelters app.

97
00:05:49,791 --> 00:05:50,781
I want you to go ahead and

98
00:05:50,781 --> 00:05:55,681
write the statement needed to create
a table within your shelter database.

99
00:05:55,681 --> 00:05:59,361
Before you do so, make sure that
your shelter database is open.

100
00:05:59,361 --> 00:06:03,361
So remember, we can do .open and
then open up the shelter database.

101
00:06:04,450 --> 00:06:08,840
And then from here, go ahead and create
the pets table with the correct columns.

102
00:06:08,840 --> 00:06:13,800
Once you've done that, I want you to
use the PRAGMA TABLE_INFO command, and

103
00:06:13,800 --> 00:06:17,320
make sure it matches the output that we
show you in the following quiz slide.

104
00:06:18,968 --> 00:06:21,980
Afterwards, you should copy and
the paste the SQLite

105
00:06:21,980 --> 00:06:26,420
statement that you used to generate
that table and paste it into the quiz.

106
00:06:26,420 --> 00:06:28,360
And one last thing before you head off.

107
00:06:28,360 --> 00:06:31,480
So, I kind of alluded to it earlier,
but you may have noticed the difference

108
00:06:31,480 --> 00:06:36,040
between these capitalized commands,
such as DROP TABLE or CREATE TABLE,

109
00:06:36,040 --> 00:06:40,700
these that end with the semicolon
versus these lowercase commands,

110
00:06:40,700 --> 00:06:45,420
these dot commands that I was using,
such as .table or .open.

111
00:06:45,420 --> 00:06:49,390
So, these dot commands are specific
to the SQLite program, whereas

112
00:06:49,390 --> 00:06:54,090
these capitalized statements that end
with the semicolon are SQL commands,

113
00:06:54,090 --> 00:06:56,710
remember, the structured query language.

114
00:06:56,710 --> 00:07:00,160
So, try not to get these two
types of commands mixed up but

115
00:07:00,160 --> 00:07:03,200
give this a try, and
I'll see you in the following exercise.
