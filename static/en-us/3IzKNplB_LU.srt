1
00:00:00,420 --> 00:00:03,790
Let's return to the 'Did you
feel it?' app for a moment.

2
00:00:03,790 --> 00:00:07,650
When we last left off, we observed
that the app was crashing on launch

3
00:00:07,650 --> 00:00:10,350
because of a network on
main threat exception.

4
00:00:10,350 --> 00:00:13,510
>> Yeah, Android doesn't allow
developers to do network requests on

5
00:00:13,510 --> 00:00:17,680
the main thread, because this will
make our apps unresponsive and laggy.

6
00:00:17,680 --> 00:00:20,910
>> By throwing an exception
that causes our apps to crash,

7
00:00:20,910 --> 00:00:25,220
this forces developers to follow best
practices and run networking code on

8
00:00:25,220 --> 00:00:29,020
the background thread and then
return the results to the UI thread.

9
00:00:29,020 --> 00:00:32,610
>> Yeah, so know that creating threads,
coordinating work between them, and

10
00:00:32,610 --> 00:00:34,050
communicating the results back and

11
00:00:34,050 --> 00:00:37,160
forth is one of the hardest
problems in computer science.

12
00:00:37,160 --> 00:00:41,320
>> In our case, we really don't
need the full power of threading.

13
00:00:41,320 --> 00:00:45,420
All we want to do is run a single task,
which is our HTTP request,

14
00:00:45,420 --> 00:00:49,420
on a separate thread from the one that's
handling events on our UI thread.

15
00:00:49,420 --> 00:00:52,785
>> Yes, so Android framework engineers
anticipated that this would be a common

16
00:00:52,785 --> 00:00:53,725
need and

17
00:00:53,725 --> 00:00:57,995
created a specific Java class that
makes this exact pattern really easy.

18
00:00:57,995 --> 00:01:00,325
It's called AsyncTask.

19
00:01:00,325 --> 00:01:01,725
>> Async is short for

20
00:01:01,725 --> 00:01:04,739
asynchronous which means that things
can happen at different times.

21
00:01:05,880 --> 00:01:06,580
For example,

22
00:01:06,580 --> 00:01:10,920
the video you're watching right now is
an example of an asynchronous learning.

23
00:01:10,920 --> 00:01:15,075
You don't have to be in a lecture hall
at a particular time to watch it.

24
00:01:15,075 --> 00:01:18,290
AsyncTask is great for
spurning a short lift one off task

25
00:01:18,290 --> 00:01:20,897
without the overhead of
managing a standard job thread.

26
00:01:21,980 --> 00:01:24,350
>> It is not perfect for
every threading situation,

27
00:01:24,350 --> 00:01:28,590
however, if you run into a situation
where you need threads that exist for

28
00:01:28,590 --> 00:01:32,470
more than a few seconds, you'll
need to use something more robust.

29
00:01:32,470 --> 00:01:35,200
>> Yeah, so be sure to check out
the Android Performance Pattern

30
00:01:35,200 --> 00:01:38,740
video series on threading,
linked below for more information.

31
00:01:38,740 --> 00:01:42,070
>> Anyway, since we don't want
the UI for our app to freeze up for

32
00:01:42,070 --> 00:01:46,060
a couple of seconds while the app
retrieves some data from the Internet,

33
00:01:46,060 --> 00:01:49,710
AsyncTask is a perfect fit for
this part of our app.

34
00:01:49,710 --> 00:01:51,530
>> Let's look at this in more detail.

35
00:01:51,530 --> 00:01:55,754
AsyncTask provide a way for us to easily
hand off work to a background thread and

36
00:01:55,754 --> 00:01:59,278
then receive the result whenever
its done so we can update the UI.

37
00:01:59,278 --> 00:02:02,643
Note that only a small amount of time
will be take up on the main thread to

38
00:02:02,643 --> 00:02:05,200
actually get the result and update UI.

39
00:02:05,200 --> 00:02:08,850
So after work is completed, we no longer
need the background thread anymore.
