1
00:00:00,060 --> 00:00:01,960
Now that you've got your
GitHub account set up,

2
00:00:01,960 --> 00:00:04,340
it's time to make your
first public repository,

3
00:00:04,340 --> 00:00:07,410
namely by putting your reflections
repository up on GitHub.

4
00:00:07,410 --> 00:00:09,160
Like with many cloud hosted systems,

5
00:00:09,160 --> 00:00:12,350
this will involve syncing between
the repository on your computer and

6
00:00:12,350 --> 00:00:15,850
the version hosted on GitHub, which is
the version you will see on the website.

7
00:00:15,850 --> 00:00:18,520
When interacting with GitHub,
the information you send and

8
00:00:18,520 --> 00:00:22,380
receive is in the form of git commits so
changes must be staged and

9
00:00:22,380 --> 00:00:24,530
committed before they can be sent.

10
00:00:24,530 --> 00:00:26,940
You may notice that I didn't
draw a working directory or

11
00:00:26,940 --> 00:00:29,040
staging area for the GitHub repository.

12
00:00:29,040 --> 00:00:32,700
These exist for every repository,
but since the GitHub repository is

13
00:00:32,700 --> 00:00:36,380
hosted on GitHub's servers,
they're not directly accessible.

14
00:00:36,380 --> 00:00:38,160
So they aren't really relevant here.

15
00:00:38,160 --> 00:00:41,990
Unlike with many services that sync with
cloud hosted versions of your files,

16
00:00:41,990 --> 00:00:44,070
when using GitHub,
you will need to choose when and

17
00:00:44,070 --> 00:00:46,430
how to get the two versions in sync.

18
00:00:46,430 --> 00:00:49,450
You can think of this as being similar
to how git lets you manually decide when

19
00:00:49,450 --> 00:00:50,570
to save a commit.

20
00:00:50,570 --> 00:00:54,120
If GitHub automatically got updated with
your local version after every single

21
00:00:54,120 --> 00:00:57,390
commit, you might end up making things
public before they're fully ready,

22
00:00:57,390 --> 00:00:59,730
since new features often
require multiple commits.

23
00:00:59,730 --> 00:01:02,490
So, since syncing doesn't
happen automatically, how do

24
00:01:02,490 --> 00:01:06,230
we sync between the local copy of a
repository and the one hosted on GitHub?

25
00:01:06,230 --> 00:01:09,504
In particular, how can you get the
current state of an existing repository

26
00:01:09,504 --> 00:01:11,310
onto GitHub to begin with?

27
00:01:11,310 --> 00:01:13,420
You might be tempted to answer GitClone.

28
00:01:13,420 --> 00:01:17,790
That's how it got a copy of the
repository from GitHub to local back in

29
00:01:17,790 --> 00:01:18,850
lesson one.

30
00:01:18,850 --> 00:01:20,750
This would be a pretty
reasonable guess to make, but

31
00:01:20,750 --> 00:01:24,400
it turns out that GitHub doesn't allow
directly cloning onto their servers.

32
00:01:24,400 --> 00:01:28,170
So instead, first you'll need to
create an empty repository on GitHub.

33
00:01:28,170 --> 00:01:30,300
Don't worry about actually
doing this right now.

34
00:01:30,300 --> 00:01:33,500
The important part is to think of
an empty repository in a known location,

35
00:01:33,500 --> 00:01:34,670
for the moment.

36
00:01:34,670 --> 00:01:37,150
To allow for
syncing data between two repositories,

37
00:01:37,150 --> 00:01:39,480
git has a concept of
a remote repository.

38
00:01:39,480 --> 00:01:42,390
This lets you store the location of
a repository that you will want to

39
00:01:42,390 --> 00:01:44,840
send and
receive new commits to and from.

40
00:01:44,840 --> 00:01:48,220
Git users often refer to these remote
repositories simply as remotes.

41
00:01:48,220 --> 00:01:51,260
You will see how to set up
a remote soon with Caroline.

42
00:01:51,260 --> 00:01:51,890
But for now, I'll

43
00:01:51,890 --> 00:01:54,910
represent the connection between
the two repositories with an arrow.

44
00:01:54,910 --> 00:01:57,910
So what kind of interactions
can you have with a remote?

45
00:01:57,910 --> 00:02:01,180
Well, you can push data and
you can pull data.

46
00:02:01,180 --> 00:02:04,520
I mentioned earlier that what you send
and receive from remotes are commits.

47
00:02:04,520 --> 00:02:08,106
But instead of selecting each individual
commit, the most common way to send and

48
00:02:08,106 --> 00:02:10,130
receive data is by specifying a branch.

49
00:02:10,130 --> 00:02:13,610
So in the case of this repository, and
most likely your reflection's repository

50
00:02:13,610 --> 00:02:17,640
as well, all we need to do is push the
master branch and all the commits will

51
00:02:17,640 --> 00:02:21,130
be sent since they're all reachable
by the commit at the tip of master.

52
00:02:21,130 --> 00:02:24,540
So when you push master,
both of these commits will show up.

53
00:02:24,540 --> 00:02:27,930
If either of these commits had already
been on the GitHub servers before we

54
00:02:27,930 --> 00:02:30,380
ran the push command,
git wouldn't have bothered sending it.

55
00:02:30,380 --> 00:02:33,260
You could imagine that if you had
a large repository with hundreds or

56
00:02:33,260 --> 00:02:34,420
thousands of commits,

57
00:02:34,420 --> 00:02:38,060
it would be very inefficient to send
every single commit every time.

58
00:02:38,060 --> 00:02:40,070
Just to make sure this
concept makes sense,

59
00:02:40,070 --> 00:02:41,920
let's look at a hypothetical situation.

60
00:02:41,920 --> 00:02:45,850
If I had this commit history locally,
and this GitHub repost set up

61
00:02:45,850 --> 00:02:50,760
as a remote, then pushed branch a,
which commits would need to be sent?

62
00:02:50,760 --> 00:02:53,860
Note that here I'm representing both
repositories just by showing their

63
00:02:53,860 --> 00:02:57,280
commit histories, since communication
between repositories only happens at

64
00:02:57,280 --> 00:02:58,900
the level of commit history.

65
00:02:58,900 --> 00:03:00,800
So it's not necessary to show
the working directory or

66
00:03:00,800 --> 00:03:02,480
staging area for either of them here.
