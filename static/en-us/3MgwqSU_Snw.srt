1
00:00:00,220 --> 00:00:04,150
Okay Micheal, so I've erased the screen and kept Bellman's equation,

2
00:00:04,150 --> 00:00:07,920
the most important equation ever and we are going to solve it.

3
00:00:07,920 --> 00:00:08,180
>> Oh.

4
00:00:08,180 --> 00:00:12,880
>> So, how are we going to make that work? Okay, so how many, so

5
00:00:12,880 --> 00:00:16,890
we wrote this down as a utility of s, how many S's are there?

6
00:00:16,890 --> 00:00:19,150
>> s, n, m, I don't know?

7
00:00:19,150 --> 00:00:19,910
>> Pick a letter.

8
00:00:19,910 --> 00:00:20,370
>> N.

9
00:00:20,370 --> 00:00:23,140
>> N, so we N states which means this

10
00:00:23,140 --> 00:00:25,700
isn't really one equasion. This is how many equations?

11
00:00:25,700 --> 00:00:27,170
>> N.

12
00:00:27,170 --> 00:00:29,620
>> Yes it's N equations. How many unknowns are there?

13
00:00:30,740 --> 00:00:33,950
>> Well we have U, the Rs are known, the Ts are known, the only

14
00:00:33,950 --> 00:00:36,770
things that's missing is the Us. And there's, oh and there's N of those as well.

15
00:00:36,770 --> 00:00:39,886
>> Right there's N equation in N [UNKNOWN].

16
00:00:39,886 --> 00:00:41,590
>> So we're done. Yes because we know

17
00:00:41,590 --> 00:00:44,180
how to solve n equations in n unknowns, right?

18
00:00:44,180 --> 00:00:45,700
>> If the equations were linear.

19
00:00:45,700 --> 00:00:49,000
>> If the equations were linear. Are these equations linear?

20
00:00:49,000 --> 00:00:50,610
>> I'm going to go with no.

21
00:00:50,610 --> 00:00:51,190
>> Why not?

22
00:00:51,190 --> 00:00:52,960
>> because the max is problematic.

23
00:00:52,960 --> 00:00:57,610
>> That's right. This max operation makes it nonlinear.

24
00:00:57,610 --> 00:00:59,580
So, it looks really good for a moment there. We've

25
00:00:59,580 --> 00:01:01,640
got n equations, n unknowns. We know how to solve

26
00:01:01,640 --> 00:01:05,500
that. But max makes for a very very very weird

27
00:01:05,500 --> 00:01:08,820
non linearity. And there's kind of no nice way

28
00:01:08,820 --> 00:01:11,090
to deal with this. Actually, one day, Michael, if you

29
00:01:11,090 --> 00:01:12,530
ask me, there is a cute little aside you can

30
00:01:12,530 --> 00:01:14,680
do where you can turn max into something that's differentiable.

31
00:01:14,680 --> 00:01:15,970
>> Oh.

32
00:01:15,970 --> 00:01:17,410
>> But. That

33
00:01:17,410 --> 00:01:20,110
doesn't actually help us here so I'm not going to go off on that aside yet.

34
00:01:20,110 --> 00:01:21,860
>> But even differentiable wouldn't quite be linear.

35
00:01:21,860 --> 00:01:23,760
>> That's right. And it wouldn't help us in

36
00:01:23,760 --> 00:01:25,700
this case. Yeah that's exactly right. But the fact that

37
00:01:25,700 --> 00:01:28,780
you can have differentiable maxes I think actually [UNKNOWN].

38
00:01:28,780 --> 00:01:30,993
But also unimportant for what we're talking about now. So,

39
00:01:30,993 --> 00:01:34,550
we've got n equations, n unknowns, they're nonlinear, which

40
00:01:34,550 --> 00:01:36,430
means we can't solve it the way we want to

41
00:01:36,430 --> 00:01:39,250
by like inverting matrices or like. You people are in

42
00:01:39,250 --> 00:01:42,420
the regression would normally do but it turns out that

43
00:01:42,420 --> 00:01:46,750
we can in fact, do something fairly

44
00:01:46,750 --> 00:01:48,230
similar, something that actually allows us to

45
00:01:48,230 --> 00:01:50,030
solve this even though it is nonlinear.

46
00:01:50,030 --> 00:01:51,730
And here's the equation, or the equation,

47
00:01:51,730 --> 00:01:56,880
here's, here's the algorithm you use that sort of works, okay? So it's really

48
00:01:56,880 --> 00:01:58,850
simple. Just simply start with some arbitrary

49
00:01:58,850 --> 00:02:01,250
utilities. Declare those the answer and you're done.

50
00:02:01,250 --> 00:02:04,230
>> That would be one way of doing it but it turns out we can do even better.

51
00:02:04,230 --> 00:02:07,360
>> Wait. Start off with the correct utilities.

52
00:02:07,360 --> 00:02:07,810
>> That

53
00:02:07,810 --> 00:02:09,350
would work except we don't know what they are.

54
00:02:09,350 --> 00:02:10,070
>> Oh right.

55
00:02:10,070 --> 00:02:12,150
>> So we're going to start with some arbitrary

56
00:02:12,150 --> 00:02:15,780
utilities, but then we're going to update them based on

57
00:02:15,780 --> 00:02:20,030
their neighbors. And then we'll simply lather, rinse, repeat.

58
00:02:20,030 --> 00:02:21,760
Alright, so what does that mean based on neighbors?

59
00:02:21,760 --> 00:02:25,660
>> So, it means, based on the states, you're going to update

60
00:02:25,660 --> 00:02:28,980
the utility for a state based on all of the states that

61
00:02:28,980 --> 00:02:31,410
it can reach. So, let me write down an equation that tells

62
00:02:31,410 --> 00:02:33,430
you how to update them and then maybe it'll be clear, okay?

63
00:02:33,430 --> 00:02:33,550
>> Yep.

64
00:02:33,550 --> 00:02:34,870
>> So we're going to have a bunch of

65
00:02:34,870 --> 00:02:36,560
utilities since we're going to, we're going to be looping

66
00:02:36,560 --> 00:02:38,310
through this. And let's just say every time

67
00:02:38,310 --> 00:02:42,620
we loop through, that's time t. Okay? So we

68
00:02:42,620 --> 00:02:47,170
know what the equation for utility is where the utilities are. It's just the

69
00:02:47,170 --> 00:02:53,003
equation that's written up here. So it's r of s plus gamma

70
00:02:53,003 --> 00:02:58,393
times the mass over a of. The expected

71
00:02:58,393 --> 00:03:02,640
utility. Right? Except we have some estimate of the utility

72
00:03:02,640 --> 00:03:06,760
at time t. Okay? and, probably the right thing for me

73
00:03:06,760 --> 00:03:08,170
to do would be to write this like as you

74
00:03:08,170 --> 00:03:10,210
had or something like that. This is my estimate of the

75
00:03:10,210 --> 00:03:13,750
utility. And so now using this, I'm going to want to sort

76
00:03:13,750 --> 00:03:16,660
of update the, you know all of my utilities to make

77
00:03:16,660 --> 00:03:18,740
them better. And it turns out I can do that

78
00:03:18,740 --> 00:03:24,290
by simply doing this. So I'm going to update at every iteration

79
00:03:24,290 --> 00:03:25,900
update utilities based on neighbors I'm going to

80
00:03:25,900 --> 00:03:28,620
update at every iteration, at every iteration my

81
00:03:28,620 --> 00:03:33,660
estimate of the utility of some state S by simply recalculating it to be the

82
00:03:33,660 --> 00:03:35,400
actual reward that I get for entering

83
00:03:35,400 --> 00:03:39,900
state S, plus the discounted utility that I

84
00:03:39,900 --> 00:03:42,620
expect given the original estimates of my

85
00:03:42,620 --> 00:03:44,190
utility. Does that make any sense at all?

86
00:03:44,190 --> 00:03:49,340
>> Yeah, I guess so, so. So the s, okay, so, so we

87
00:03:49,340 --> 00:03:51,770
need the whole u hat t.

88
00:03:51,770 --> 00:03:52,035
>> Mm-hm.

89
00:03:52,035 --> 00:03:55,040
>> Like at all states, because we're not just using the

90
00:03:55,040 --> 00:03:57,770
values that state s to update the values that state s.

91
00:03:57,770 --> 00:04:00,850
We're using all the values, at the, at the previous time

92
00:04:00,850 --> 00:04:03,550
step to update all the values to the current time step.

93
00:04:03,550 --> 00:04:04,050
>> Yep.

94
00:04:04,050 --> 00:04:07,060
>> So, so all these n equations, they're all tangled together.

95
00:04:07,060 --> 00:04:12,640
>> Right, because of this This, expectation. So really, just to

96
00:04:12,640 --> 00:04:15,080
make it clear, this should be a summation over s prime.
