1
00:00:00,150 --> 00:00:02,620
We will look now at instruction scheduling in the compiler.

2
00:00:02,620 --> 00:00:06,670
No that this is different from what happens in a Tomasulo type scheduler,

3
00:00:06,670 --> 00:00:09,370
where the hardware is trying to reorder instructions,

4
00:00:09,370 --> 00:00:11,800
in a different way than they were arranged by the compiler.

5
00:00:11,800 --> 00:00:16,180
Now the compiler will actually try to do a similar thing. Here's a sequence of

6
00:00:16,180 --> 00:00:22,860
instructions that can happen. We load, a value from the address in R1 into R2.

7
00:00:22,860 --> 00:00:28,410
We add R0 to that. We store the result back into that memory location.

8
00:00:28,410 --> 00:00:32,240
We next move the memory address four places forward, so

9
00:00:32,240 --> 00:00:36,150
that we are looking at the next for example, element in our array in memory. And

10
00:00:36,150 --> 00:00:41,360
then, we compare the pointer to some sort of end of array pointer, and

11
00:00:41,360 --> 00:00:45,170
if they're not equal, we jump back to the loop. So these are five instructions,

12
00:00:45,170 --> 00:00:50,350
out of which a single iteration of a loop is composed of. So let's say that we

13
00:00:50,350 --> 00:00:53,840
have a very simple processor, that can only look at the very next instruction.

14
00:00:53,840 --> 00:00:58,550
So it's not really trying to have reservation stations and execute out of order.

15
00:00:58,550 --> 00:01:02,720
In that case, what might happen is. There would be this load. And let's say,

16
00:01:02,720 --> 00:01:07,280
it takes two cycles to actually get the value into this register from the cache.

17
00:01:07,280 --> 00:01:10,150
That means that the next cycle, the processor cannot do this ADD,

18
00:01:10,150 --> 00:01:13,690
it has to stall, because the result in R2 is not available yet.

19
00:01:13,690 --> 00:01:18,520
In the next cycle, it will be adding R0 to the value in R2. Let's say now,

20
00:01:18,520 --> 00:01:22,720
that the ADD takes a few cycles. Let's say, three. So only here,

21
00:01:22,720 --> 00:01:27,010
can we store. The next instruction, doesn't depend on the store. So

22
00:01:27,010 --> 00:01:31,202
let's say we can do it in the next cycle. But then, this ADD again, takes three

23
00:01:31,202 --> 00:01:36,244
cycle, let's say. So we have two Stalls, before we can do this branch. So

24
00:01:36,244 --> 00:01:40,807
let's say that the compiler is trying to help the processor do better than this.

25
00:01:40,807 --> 00:01:44,032
If we still have the same processor. But we wanted to execute these

26
00:01:44,032 --> 00:01:46,959
instructions faster than one, two, three, four, five, six, seven, eight, nine,

27
00:01:46,959 --> 00:01:51,610
ten cycles per iteration. How can we do that? Well what the compiler will try to

28
00:01:51,610 --> 00:01:57,385
do is, it knows that after this load we cannot do this ADD until,

29
00:01:57,385 --> 00:02:01,640
two cycles later, so it's going to try to find something that can be here.

30
00:02:01,640 --> 00:02:05,770
So, we need something that doesn't depend on the load and can be done here.

31
00:02:05,770 --> 00:02:09,889
Now, we can see that the ADD does depend on the load, so it cannot go here.

32
00:02:09,889 --> 00:02:13,590
The Stall, needs the result of the ADD so it cannot more here.

33
00:02:13,590 --> 00:02:18,570
But the ADD actually can go here because the ADD doesn't depend on

34
00:02:18,570 --> 00:02:24,350
the R1 value here. So, the compiler is going to try to move this ADDI here. So

35
00:02:24,350 --> 00:02:28,770
we want a schedule in which the ADDI is here, because this processor can do only

36
00:02:28,770 --> 00:02:32,980
one instruction at a time, in the order in which they're placed in the program.

37
00:02:32,980 --> 00:02:37,900
That would mean, moving this ADD here in the program. Let's see how that,

38
00:02:37,900 --> 00:02:43,450
would be done. So conceptually, we want this ADD here.

39
00:02:44,600 --> 00:02:49,940
Note however, that while the load gets the same value of R1 that it did before,

40
00:02:49,940 --> 00:02:54,430
the Stall now gets R1 that has already been incremented by 4. So

41
00:02:54,430 --> 00:03:00,180
we have moved this ADD, because this R1 is now, larger than it should be.

42
00:03:00,180 --> 00:03:05,730
We have to fix the offset here so that, it loads from R1 minus 4.

43
00:03:05,730 --> 00:03:09,670
When we remove this ADD, the branch still sees the correct value of R1

44
00:03:09,670 --> 00:03:12,210
because it needs to see the incremented value and

45
00:03:12,210 --> 00:03:16,610
the new program looks like this. The black stuff is the stuff that has moved or

46
00:03:16,610 --> 00:03:22,200
changed. And the, blue stuff is what has remained exactly the same as before.

47
00:03:22,200 --> 00:03:25,920
Now let's see what happens to our schedule. Now we have a load.

48
00:03:25,920 --> 00:03:29,205
And, instead of the ADD here being the next instruction so

49
00:03:29,205 --> 00:03:33,220
we had to Stall, the next instruction is this ADD. This ADD,

50
00:03:33,220 --> 00:03:37,090
can proceed in parallel with the load. It doesn't depend on the, R2. So we

51
00:03:37,090 --> 00:03:43,020
can actually do this ADD here. So, instead of a Stall, we can now do our ADDI.

52
00:03:43,020 --> 00:03:47,120
This eliminates one of the Stalls. The Add here, doesn't depend on this ADD,

53
00:03:47,120 --> 00:03:51,360
so it can still stay where it is. Now, in order to get to the Stall instruction,

54
00:03:51,360 --> 00:03:55,810
we still have to do the two Stalls because the ADD here takes two cycles of

55
00:03:55,810 --> 00:03:59,750
stalling before we can use the result. So, this Stall needs to stay here.

56
00:03:59,750 --> 00:04:04,370
But at this point, we have already done this ADDI. It's moved here. Of course,

57
00:04:04,370 --> 00:04:08,330
the Stall now need to be modified this way. So this instruction is now

58
00:04:08,330 --> 00:04:13,490
like this. The ADD now goes away. So we have just removed one cycle here.

59
00:04:13,490 --> 00:04:18,290
Next, when can we do this branch? Well the ADD has happened here.

60
00:04:18,290 --> 00:04:22,750
We cannot use R1 until one, two, the third cycle from there.

61
00:04:22,750 --> 00:04:26,289
So pretty much at any point after here, the branch actually is safe to go,

62
00:04:26,289 --> 00:04:30,630
as far R1 is concerned. Note that here we have to stall because of this. So

63
00:04:30,630 --> 00:04:35,260
we have just eliminated, two more cycles here. And now we can do our branch. So

64
00:04:35,260 --> 00:04:39,210
pretty much, we had plenty of Stalls then. Now we have only two Stalls and

65
00:04:39,210 --> 00:04:44,260
the rest of the loop body is scheduled. So, pretty much, the idea of instruction

66
00:04:44,260 --> 00:04:48,690
scheduling is to find instructions that can be done in place of stalls.

67
00:04:48,690 --> 00:04:52,755
And thus, avoid having too many stalls in the processor schedule.
