1
00:00:00,130 --> 00:00:03,760
And he has a, a diagram which has these pieces in it.

2
00:00:03,760 --> 00:00:09,550
It's somewhat similar to yours and it differentiates between subroutine calls

3
00:00:09,550 --> 00:00:15,160
which are indicated here by the lines with the arrowheads, the big arrowheads.

4
00:00:15,160 --> 00:00:21,740
And accesses to the memory which are lines with the smaller arrowheads.

5
00:00:21,740 --> 00:00:25,120
And he also breaks out system IO, that is the reading and

6
00:00:25,120 --> 00:00:27,300
the input and the writing and the output.

7
00:00:27,300 --> 00:00:29,440
So that's solution number one.

8
00:00:29,440 --> 00:00:33,940
Take a minute now and see if you can come up with another solution.

9
00:00:35,260 --> 00:00:41,280
>> Okay, so for my second solution, I've tried to decentralize some of this,

10
00:00:41,280 --> 00:00:44,300
because it sounded like the system was just too, too heavy.

11
00:00:44,300 --> 00:00:50,167
So, the system is still comprised of these components for

12
00:00:50,167 --> 00:00:55,400
parsing something to circle what we parsed, and sort and then display.

13
00:00:55,400 --> 00:00:59,560
So I have the parser, the circler, the sorter and the displayer, but

14
00:00:59,560 --> 00:01:04,290
I'm trying to treat it as if it's like a running

15
00:01:04,290 --> 00:01:07,830
through a process in which the system doesn't have to negotiate everything.

16
00:01:07,830 --> 00:01:09,120
So [INAUDIBLE]. >> So, a step at a time?

17
00:01:09,120 --> 00:01:10,130
>> A step at a time.

18
00:01:10,130 --> 00:01:11,390
>> Okay. >> So we start with the parser.

19
00:01:11,390 --> 00:01:16,640
The parser does its job, passes its output to the circler.

20
00:01:16,640 --> 00:01:17,510
The circler, then,

21
00:01:17,510 --> 00:01:20,790
creates all of our different, you know, shifted versions of the lines.

22
00:01:20,790 --> 00:01:22,860
That gets passed to the sorter.

23
00:01:22,860 --> 00:01:25,400
And then, the sorter sorts it alphabetically and

24
00:01:25,400 --> 00:01:26,610
passes that on to the displayer.

25
00:01:28,670 --> 00:01:29,390
>> Okay.

26
00:01:29,390 --> 00:01:32,800
This sounds very similar to, what Parnas calls the pipe and

27
00:01:32,800 --> 00:01:35,870
filter, solution to things, so let's take a minute and look at that.
