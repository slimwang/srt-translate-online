1
00:00:00,000 --> 00:00:04,000
One way to think about this is to remember the rules for function calls.

2
00:00:04,000 --> 00:00:08,000
You take the function body and you evaluate it in the new argument.

3
00:00:08,000 --> 00:00:13,000
So the body of sayhello is print greeting + " " person,

4
00:00:13,000 --> 00:00:16,000
and we already know from seeing it in the interpreter what it's going to print out.

5
00:00:16,000 --> 00:00:21,000
It's going to print out "hello from u.p." "gracie".

6
00:00:21,000 --> 00:00:25,000
Currently I don't see gracie anywhere in this environment.

7
00:00:25,000 --> 00:00:28,000
That suggests that we're definitely going to need to add it.

8
00:00:28,000 --> 00:00:32,000
Another way to get to that is to remember the other rules for constructing environments.

9
00:00:32,000 --> 00:00:37,000
We definitely want to make space for the formal parameters, person,

10
00:00:37,000 --> 00:00:40,000
and put in the value of the actual argument, "gracie".

11
00:00:40,000 --> 00:00:43,000
So now when we go to evaluate greeting, we don't see it here

12
00:00:43,000 --> 00:00:46,000
but we'll go one up and get "hello from u.p."

13
00:00:46,000 --> 00:00:49,000
and we'll try to find person. We see it right here. We get "gracie".

14
00:00:49,000 --> 00:00:52,000
We'll compose them together and print out exactly the same behavior

15
00:00:52,000 --> 00:00:55,000
we saw on the interpreter. This quiz was pretty tricky.

16
00:00:55,000 --> 00:01:00,000
This notion of nested procedures does not come up very often in Python.

17
00:01:00,000 --> 00:01:05,000
But if we want a complete interpreter, one that understands all the nuances of a language,

18
00:01:05,000 --> 00:01:07,000
then we have to handle this.

19
00:01:07,000 --> 00:01:11,000
It's kind of like the subjunctive in a lot of romance languages.

20
00:01:11,000 --> 99:59:59,999
It doesn't come up very often in English; may come up more often than you'd think in other places.
