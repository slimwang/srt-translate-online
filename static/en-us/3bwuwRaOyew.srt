1
00:00:00,330 --> 00:00:03,320
Let's illustrate the Fast Fourier
Transform scheme by looking

2
00:00:03,320 --> 00:00:05,463
at the case where N = 4.

3
00:00:05,463 --> 00:00:11,090
That means omega = i, and
we want to evaluate our polynomial

4
00:00:11,090 --> 00:00:16,430
at the points 1, i, -1, and -i.

5
00:00:16,430 --> 00:00:20,100
Recall that we use our
even-odd decomposition.

6
00:00:20,100 --> 00:00:23,230
And that we recycle as much of
the computation as possible.

7
00:00:24,300 --> 00:00:27,420
Here I've written out
the four needed sub-problems.

8
00:00:27,420 --> 00:00:33,000
Thus, we've reduced the problem of
computing A at the 4th root subunity

9
00:00:33,000 --> 00:00:38,910
to computing Ae and
Ao at the second root subunity.

10
00:00:38,910 --> 00:00:41,390
Plus some effort to combine the results.

11
00:00:41,390 --> 00:00:44,377
To compute Ae and Ao,
at the second roots of unity,

12
00:00:44,377 --> 00:00:46,860
we apply the same strategy again.

13
00:00:46,860 --> 00:00:49,770
First writing them in
terms of the even and

14
00:00:49,770 --> 00:00:55,710
odd sub-polynomials and then recycling
as much of the computation as possible.

15
00:00:55,710 --> 00:00:59,540
Each of the two previous problems
has been reduced to evaluating

16
00:00:59,540 --> 00:01:02,540
an order one polynomial at one point.

17
00:01:03,660 --> 00:01:07,170
But this is trivial since it
only involves the constant term.

18
00:01:07,170 --> 00:01:11,380
The upward pass of the recursion then
fills in all these intermediate values,

19
00:01:11,380 --> 00:01:15,310
eventually giving us the values of
A at the fourth roots of unity.
