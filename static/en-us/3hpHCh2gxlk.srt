1
00:00:00,370 --> 00:00:04,070
After seeing the hash symbol, you might
be wondering what other kinds of symbols

2
00:00:04,070 --> 00:00:06,759
a URIMatcher uses as special symbols.

3
00:00:06,759 --> 00:00:10,890
URIMatchers have matching capabilities
similar to regex pattern matching, but

4
00:00:10,890 --> 00:00:12,080
it's a quite bit simpler.

5
00:00:12,080 --> 00:00:14,721
Regular expressions match a lot
of special characters, but

6
00:00:14,721 --> 00:00:19,160
a URIMatcher recognizes only two
wildcard characters, an asterisk and

7
00:00:19,160 --> 00:00:20,920
that hash symbol that you just saw.

8
00:00:20,920 --> 00:00:23,255
The hash symbol can stand for
an integer of any length.

9
00:00:23,254 --> 00:00:25,815
And the asterisk stands in for
a string of any length.

10
00:00:25,815 --> 00:00:28,643
And these symbols can be
combined with each other or

11
00:00:28,643 --> 00:00:32,519
specific URI path segments to
define a complete URI structure.

12
00:00:32,520 --> 00:00:33,860
Here are some examples.

13
00:00:33,859 --> 00:00:36,030
These are two specific
URIs that you've seen.

14
00:00:36,030 --> 00:00:38,230
The first one points to
the complete directory of tasks.

15
00:00:38,229 --> 00:00:41,372
And the second to a row in
the directory with ID 2.

16
00:00:41,372 --> 00:00:45,099
In the next example, I'm using the #
symbol, which matches any number.

17
00:00:45,100 --> 00:00:46,990
This path starts off with tasks.

18
00:00:46,990 --> 00:00:51,125
And this could be followed by an
integer, whether that's the id 2, 3, or

19
00:00:51,125 --> 00:00:51,780
9042.

20
00:00:51,780 --> 00:00:54,896
Because of that hash symbol,
any number will fit this pattern.

21
00:00:54,896 --> 00:00:58,170
There's also the asterisk,
which stands in for any string.

22
00:00:58,170 --> 00:01:01,250
So for this URI,
the path again starts again with tasks.

23
00:01:01,250 --> 00:01:03,460
Then it can be followed by,
well, any string.

24
00:01:03,460 --> 00:01:05,870
For example,
you could have task's priority, or

25
00:01:05,870 --> 00:01:08,239
this string could be a task description.

26
00:01:08,239 --> 00:01:09,739
Or just some random letters.

27
00:01:09,739 --> 00:01:11,489
Any string will fit this pattern.

28
00:01:11,489 --> 00:01:14,609
And then finally, here's an example
where we combine these characters,

29
00:01:14,609 --> 00:01:16,489
the hash and the asterisks, together.

30
00:01:16,489 --> 00:01:19,875
This path structure will start with any
string, then a segment named other,

31
00:01:19,876 --> 00:01:21,606
and then finally an integer at the end.

32
00:01:21,605 --> 00:01:24,798
And these wildcard characters can
be combined in any path you need to

33
00:01:24,798 --> 00:01:27,390
distinguish between
different types of URIs.

34
00:01:27,390 --> 00:01:30,879
For the todo list app, we'll be
interested in displaying the contents of

35
00:01:30,879 --> 00:01:34,039
a cursor that contains data for
all of our tasks.

36
00:01:34,040 --> 00:01:37,709
So we'll need to define a URI that
identifies the entire tasks directory.

37
00:01:37,709 --> 00:01:41,224
Then, for doing things like
deleting an individual task,

38
00:01:41,224 --> 00:01:46,240
we'll also want to define a URI that
identifies a single row of data.

39
00:01:46,239 --> 00:01:49,769
So in this next quiz, you'll be asked
to choose the best URI structures

40
00:01:49,769 --> 00:01:51,530
to represent these two types of data.

