1
00:00:00,320 --> 00:00:02,360
For more complex validation,

2
00:00:02,360 --> 00:00:06,070
you've got the constraint
validation API which allow you

3
00:00:06,070 --> 00:00:10,550
to harness the power of JavaScript
to validate inputs on the fly.

4
00:00:10,550 --> 00:00:13,330
Here let me show you how it works.

5
00:00:13,330 --> 00:00:19,830
The core of the constraint validation
API is this function, setCustomValidity.

6
00:00:19,830 --> 00:00:21,915
And as you could see,
it's getting a string.

7
00:00:21,915 --> 00:00:25,955
setCustomValidity makes
the assumption that if you

8
00:00:25,955 --> 00:00:30,096
pass a none empty string to it,
the input is invalid.

9
00:00:30,096 --> 00:00:33,470
So it displays an error message.

10
00:00:33,470 --> 00:00:36,290
That means that the opposite is true.

11
00:00:36,290 --> 00:00:40,620
If you pass an empty string to it,
then the input is valid.

12
00:00:40,620 --> 00:00:47,590
In practice, simply set a callback on an
inputs, on input event like we did here.

13
00:00:47,590 --> 00:00:52,160
And at the end of the callback,
call setCustomValidity on the input.

14
00:00:52,160 --> 00:00:56,110
If we type in something like that,
we will get the error message.

15
00:00:56,110 --> 00:00:59,600
And if we are typing correctly,
we're passing the test.

16
00:00:59,600 --> 00:01:00,130
Good job.
