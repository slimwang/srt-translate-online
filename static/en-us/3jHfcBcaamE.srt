1
00:00:00,240 --> 00:00:04,630
To alleviate all of that typing, JavaScript provides the keyword new.

2
00:00:04,630 --> 00:00:09,410
Whenever we choose to use the keyword new in front of a function invocation,

3
00:00:09,410 --> 00:00:13,960
our function is going to run in a special mode called Constructor Mode.

4
00:00:13,960 --> 00:00:18,590
In that mode, we can expect a lot of this work to be done for us automatically.

5
00:00:18,590 --> 00:00:20,830
So what is Construction Mode exactly?

6
00:00:20,830 --> 00:00:24,130
Basically, it's a way for your interpreter to insert a few lines of

7
00:00:24,130 --> 00:00:27,630
operations into your code because it knows that you're going to need them to

8
00:00:27,630 --> 00:00:30,540
be done whenever you're instantiating a new object.

9
00:00:30,540 --> 00:00:34,990
It temporarily makes your function run as if there was some extra code at

10
00:00:34,990 --> 00:00:36,160
the beginning and end.

11
00:00:36,160 --> 00:00:38,580
Even though you will never have typed that code.

12
00:00:38,580 --> 00:00:41,570
The operations it's going to insert are basically doing

13
00:00:41,570 --> 00:00:46,690
the same work as the lines you're likely to write in your prototypal classes.

14
00:00:46,690 --> 00:00:50,990
So because we're using the key word new here, we can expect this invocation of

15
00:00:50,990 --> 00:00:56,390
car to run with these extra operations inserted at the beginning and at the end.

16
00:00:56,390 --> 00:00:59,580
Whereas here, where the key word new does not show up in front of the invocation

17
00:00:59,580 --> 00:01:02,050
of car, these lines of code would not be inserted.

18
00:01:02,050 --> 00:01:06,980
So in the same program, we can expect this one function to be run with and

19
00:01:06,980 --> 00:01:09,690
without these inserted lines of code.

20
00:01:09,690 --> 00:01:13,190
Remember, they will never actually show up in the code as you type it.

21
00:01:13,190 --> 00:01:17,010
They only get run as a result of the fact that we are using the keyword new

22
00:01:17,010 --> 00:01:19,280
right before this particular invocation.

23
00:01:19,280 --> 00:01:23,090
Now even though I'm showing two different lines of code, one with and one

24
00:01:23,090 --> 00:01:26,720
without the keyword new, you would never do such a thing in your own programs.

25
00:01:26,720 --> 00:01:29,710
You're going to write functions that you expect to be run with the keyword new,

26
00:01:29,710 --> 00:01:30,850
or not run with it.

27
00:01:30,850 --> 00:01:32,750
But you would never write a function that you may or

28
00:01:32,750 --> 00:01:34,650
may not use the keyword new with.

29
00:01:34,650 --> 00:01:38,470
The purpose of it is to allow you to skip some of the work you're already doing.

30
00:01:38,470 --> 00:01:42,490
So, once you decide to use the keyword new with a given function,

31
00:01:42,490 --> 00:01:45,140
there's some inevitable refactoring you're going to have to do.

32
00:01:45,140 --> 00:01:47,220
I've added the keyword new to both cases, and

33
00:01:47,220 --> 00:01:49,870
I think it's time we delete some of the code we don't need anymore,

34
00:01:49,870 --> 00:01:51,880
since we know this is how we intend to run the function
