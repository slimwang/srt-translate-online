1
00:00:00,240 --> 00:00:01,530
Hi, my name is Dhruv.

2
00:00:01,530 --> 00:00:03,480
I'm a full-stack engineer
here you know Udacity.

3
00:00:03,480 --> 00:00:04,820
>> And I'm Philip.

4
00:00:04,820 --> 00:00:06,050
I'm a coach in the full-stack team.

5
00:00:07,080 --> 00:00:08,640
>> And
I'm going to be interviewing Philip for

6
00:00:08,640 --> 00:00:11,280
a full-stack engineering position.

7
00:00:11,280 --> 00:00:13,505
All right, with that let's get
started with the first question.

8
00:00:13,505 --> 00:00:14,620
>> Mm-hm.
>> All right.

9
00:00:14,620 --> 00:00:16,700
Are you comfortable with Python,
first of all, Philip?

10
00:00:16,700 --> 00:00:18,080
>> Yeah, I am.
>> All right, perfect.

11
00:00:18,080 --> 00:00:21,608
So our first question we're going to
be writing a simple Python method.

12
00:00:21,608 --> 00:00:23,818
I want you to write a method
that takes in a string.

13
00:00:23,818 --> 00:00:24,363
>> Okay.

14
00:00:24,363 --> 00:00:26,023
>> And tells me whether or
not it's a palindrome.

15
00:00:26,023 --> 00:00:26,941
>> Okay.

16
00:00:26,941 --> 00:00:28,721
>> Do you know what a palindrome is?

17
00:00:28,721 --> 00:00:31,710
>> Yeah it's just like a string that's
the same forwards or backwards.

18
00:00:31,710 --> 00:00:34,372
>> Right.
So examples are-

19
00:00:34,372 --> 00:00:36,850
>> Like race car was.

20
00:00:36,850 --> 00:00:39,437
Yeah.
Do you care if it has spaces in it

21
00:00:39,437 --> 00:00:40,010
or not?

22
00:00:40,010 --> 00:00:42,100
>> To begin with let's
not worry about spaces.

23
00:00:42,100 --> 00:00:43,550
We'll do that if we have time.

24
00:00:43,550 --> 00:00:44,390
>> Cool, cool.

25
00:00:44,390 --> 00:00:46,110
All right.
>> So yeah, let's get started.

26
00:00:46,110 --> 00:00:47,690
>> All right.
Do you care what I name this

27
00:00:47,690 --> 00:00:48,530
method or procedure?

28
00:00:48,530 --> 00:00:49,870
>> No, no I don't.

29
00:00:49,870 --> 00:00:50,470
>> All right then.

30
00:00:52,250 --> 00:00:54,110
>> It should return
a boolean by the way.

31
00:00:54,110 --> 00:00:55,170
>> Okay, got it.

32
00:00:55,170 --> 00:01:00,000
So we'll call it is_palindrome.

33
00:01:00,000 --> 00:01:00,500
>> Okay.

34
00:01:02,720 --> 00:01:06,500
>> You know when I name a method, I
like to give it a name that's readable.

35
00:01:06,500 --> 00:01:07,240
So yeah.

36
00:01:10,700 --> 00:01:13,160
And it'll take in the string called s.

37
00:01:13,160 --> 00:01:14,175
>> S.
Okay.

38
00:01:14,175 --> 00:01:16,865
>> Okay, so we'll just go by the
definition of palindrome just to keep

39
00:01:16,865 --> 00:01:17,538
things simple.

40
00:01:17,538 --> 00:01:23,287
We'll just

41
00:01:23,287 --> 00:01:31,345
say return s = =.

42
00:01:31,345 --> 00:01:34,610
And what I'm doing here is I'm going to
use Python string slicing notation just

43
00:01:34,610 --> 00:01:38,530
to reverse the string and see if
it's the same in either direction.

44
00:01:38,530 --> 00:01:39,580
>> Okay.

45
00:01:39,580 --> 00:01:40,240
Well that was quick.

46
00:01:40,240 --> 00:01:44,830
Can you show me what it would look
like without this double colon syntax?

47
00:01:46,115 --> 00:01:50,730
>> You mean like reverse
it in a different way?

48
00:01:50,730 --> 00:01:51,390
>> Mm-hm.

49
00:01:51,390 --> 00:01:51,890
>> Hm.

50
00:01:52,930 --> 00:01:56,910
So, presumably strings have a reverse
method on them, I might try that.

51
00:01:56,910 --> 00:01:58,410
>> Okay.
>> That might be more readable to people

52
00:01:58,410 --> 00:01:59,690
who aren't Pythonistas.

53
00:01:59,690 --> 00:02:00,280
>> Yeah exactly,

54
00:02:00,280 --> 00:02:03,930
if I'm coming from a different language,
I might not know this immediately.

55
00:02:03,930 --> 00:02:06,550
So what you're saying you would
do is you would first reverse it.

56
00:02:06,550 --> 00:02:09,600
Let's assume strings have a reverse
method and go from there.

57
00:02:09,600 --> 00:02:10,150
>> Okay.

58
00:02:10,150 --> 00:02:12,990
>> So let's say Python
gives us a reverse method,

59
00:02:12,990 --> 00:02:15,570
reverse of string gives us a new string.

60
00:02:15,570 --> 00:02:16,420
>> Yeah.

61
00:02:16,420 --> 00:02:18,180
>> And show me how you would
do it if you had that.

62
00:02:18,180 --> 00:02:18,980
>> Okay.

63
00:02:18,980 --> 00:02:25,120
So assuming we just have a method
called reverse, do you mean a method on

64
00:02:25,120 --> 00:02:28,010
the string or just a function that you
call with the string as the parameter?

65
00:02:28,010 --> 00:02:29,880
>> The function you call with
the string as a parameter.

66
00:02:29,880 --> 00:02:30,380
>> Okay, cool.

67
00:02:31,600 --> 00:02:32,664
So we just call it.

68
00:02:36,611 --> 00:02:39,978
And so this presumably returns s,
it doesn't modify s, okay.

69
00:02:39,978 --> 00:02:42,555
>> Okay, perfect.

70
00:02:42,555 --> 00:02:48,500
Now let's take into the case
where you now have spaces.

71
00:02:48,500 --> 00:02:53,810
So an example would be a sentence
like let's see can I get that.

72
00:02:53,810 --> 00:02:54,310
>> Sure.

73
00:02:55,563 --> 00:03:00,146
>> A man, a plan,

74
00:03:00,146 --> 00:03:05,802
a canal, Panama.

75
00:03:05,802 --> 00:03:07,690
>> Got it.

76
00:03:07,690 --> 00:03:13,204
>> And so if we read this backwards,
a man, a P-L-A-N, plan,

77
00:03:13,204 --> 00:03:18,320
a C-A-N-A-L, canal, P-A-N-A-M-A, Panama.

78
00:03:18,320 --> 00:03:18,892
>> Okay.

79
00:03:18,892 --> 00:03:22,160
So I guess another way to
phrase this question would be,

80
00:03:22,160 --> 00:03:24,330
is it a palindrome if
you ignore the spaces?

81
00:03:24,330 --> 00:03:24,980
>> Yes.

82
00:03:24,980 --> 00:03:27,680
>> Okay, sure I can do that.

83
00:03:27,680 --> 00:03:30,600
So the way I do it is,

84
00:03:30,600 --> 00:03:34,000
before we do this check you've got
to keep this same basic structure.

85
00:03:34,000 --> 00:03:37,270
But before we do this check what I'd
want to do is just remove the spaces

86
00:03:37,270 --> 00:03:38,090
from the string s.

87
00:03:38,090 --> 00:03:39,730
>> Okay.
>> So that would look like this.

88
00:03:39,730 --> 00:03:47,800
S, I'll assign it to s.strip,
which is another one of, or one second.

89
00:03:47,800 --> 00:03:49,090
Oops.

90
00:03:49,090 --> 00:03:50,750
Let's keep our syntax correct.

91
00:03:50,750 --> 00:03:53,380
But yeah, this is just a built-in
string method in Python so

92
00:03:53,380 --> 00:03:55,320
it's super convenient.

93
00:03:56,320 --> 00:03:57,460
Yeah, okay.

94
00:03:58,990 --> 00:03:59,770
>> Okay.

95
00:03:59,770 --> 00:04:00,490
Perfect.

96
00:04:00,490 --> 00:04:01,510
Can you write me one or

97
00:04:01,510 --> 00:04:06,380
two tests that would test this code to
make sure it's working as expected?

98
00:04:06,380 --> 00:04:06,980
>> Yeah.

99
00:04:06,980 --> 00:04:07,912
So what I would do?

100
00:04:07,912 --> 00:04:11,270
I guess I would just, let's assume
this is like a Python file, right?

101
00:04:11,270 --> 00:04:12,410
There's more code here.

102
00:04:12,410 --> 00:04:17,435
So what I would do is I would just call
the function with a is_palindrome.

103
00:04:19,370 --> 00:04:22,941
So an important thing to do is to guess
positive cases and negative cases so

104
00:04:22,941 --> 00:04:25,764
you can see if it works correctly,
if it is a palindrome and

105
00:04:25,764 --> 00:04:27,106
if it's not a palindrome.

106
00:04:27,106 --> 00:04:31,049
>> Okay
>> So I'll do both of those.

107
00:04:31,049 --> 00:04:34,370
So we'll start with the one we'd already
said from the beginning like racecar.

108
00:04:39,290 --> 00:04:41,840
When I'm nervous my handwriting gets
bad so let me know if it's okay.

109
00:04:42,840 --> 00:04:45,351
So I guess we'll just print this.

110
00:04:49,391 --> 00:04:53,452
And we can say, well I guess if this
is a real example I'd do two print

111
00:04:53,452 --> 00:04:57,390
statements like the first would
be like expected result, true.

112
00:04:57,390 --> 00:05:00,730
And that way when I print the next line,
my output's really readable.

113
00:05:00,730 --> 00:05:02,270
So yeah, we'll do that first.

114
00:05:02,270 --> 00:05:05,575
So it would be like print,

115
00:05:05,575 --> 00:05:11,201
test case one, Expected result is true.

116
00:05:19,908 --> 00:05:25,680
Yeah, and so another case,
we'll do the Panama example.

117
00:05:25,680 --> 00:05:26,280
>> Okay.

118
00:05:26,280 --> 00:05:29,826
>> Just because that gets us
the case with the spaces.

119
00:05:29,826 --> 00:05:32,230
>> Okay.

120
00:05:32,230 --> 00:05:34,540
>> And, like I said, I want to
do some negative examples, too.

121
00:05:34,540 --> 00:05:40,181
So I'd do the same thing but
my testing would be like abc.

122
00:05:40,181 --> 00:05:44,454
And I guess you could do
like an edge case too.

123
00:05:44,454 --> 00:05:45,000
>> Mm-hm.
>> So

124
00:05:45,000 --> 00:05:47,170
also test with just an empty string.

125
00:05:48,550 --> 00:05:49,230
>> Okay.

126
00:05:49,230 --> 00:05:51,110
>> Which in this,
I guess we haven't defined it but

127
00:05:51,110 --> 00:05:52,260
it should be a palindrome.

128
00:05:52,260 --> 00:05:54,230
>> Yeah, fair enough.

129
00:05:54,230 --> 00:05:55,050
Okay.
So can you tell

130
00:05:55,050 --> 00:05:57,600
me what the runtime of
this method is now?

131
00:05:57,600 --> 00:05:58,970
>> Let's see.

132
00:05:58,970 --> 00:06:01,806
So starting from the top,
we'll go line by line.

133
00:06:01,806 --> 00:06:04,103
So string.strip,

134
00:06:04,103 --> 00:06:08,500
this is in the standard library I didn't
write it but I can guess how it works.

135
00:06:08,500 --> 00:06:11,775
Like what I imagine it does is
it goes character by character,

136
00:06:11,775 --> 00:06:15,395
and it kind of builds a new string.

137
00:06:15,395 --> 00:06:17,545
So it probably has to go through
the entire string once, so

138
00:06:17,545 --> 00:06:19,025
it's probably an o of n.

139
00:06:19,025 --> 00:06:22,635
So I'll just write it over here kind of,
we have o of n.

140
00:06:22,635 --> 00:06:23,515
That's the first step.

141
00:06:24,695 --> 00:06:27,555
And then it compares the two strings
to see if they're equal for equal

142
00:06:27,555 --> 00:06:30,875
which means it has to iterate through
the two strings at the same time.

143
00:06:30,875 --> 00:06:33,035
That's also o of n on
the size of the string.

144
00:06:33,035 --> 00:06:35,272
So o of n plus o of n equals o of n.

145
00:06:35,272 --> 00:06:41,610
>> Okay perfect, and
what's the memory consumption?

146
00:06:43,220 --> 00:06:47,025
>> Okay so in the beginning we
have the size of the string s,

147
00:06:47,025 --> 00:06:50,035
which is I guess n.

148
00:06:50,035 --> 00:06:52,655
Then we have to I guess have two
versions of it the reversed and

149
00:06:52,655 --> 00:06:53,815
the normal string.

150
00:06:53,815 --> 00:06:57,445
So two n, which I guess implies
down the end and big O.

151
00:06:57,445 --> 00:06:58,005
>> Okay.

152
00:06:58,005 --> 00:06:58,835
>> Yeah.
>> All right, perfect.
