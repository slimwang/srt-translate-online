1
00:00:00,000 --> 00:00:02,000
[Dave] Now we have our get_next_target procedure,

2
00:00:02,000 --> 00:00:04,000
and we know how to use it by using multiple assignment

3
00:00:04,000 --> 00:00:06,000
to get the 2 results.

4
00:00:06,000 --> 00:00:10,000
There's 1 serious problem with the get_next_target procedure that we have to fix

5
00:00:10,000 --> 00:00:15,000
before we go on to the problem of outputting all of the links in the page.

6
00:00:15,000 --> 00:00:18,000
The problem is we didn't really think very carefully about what should happen

7
00:00:18,000 --> 00:00:22,000
if the input does not have another link.

8
00:00:22,000 --> 00:00:26,000
Let's try and see what actually happens the way we've defined it.

9
00:00:26,000 --> 00:00:29,000
Here's the code we have for get_next_target, and we're going to try an example.

10
00:00:29,000 --> 00:00:31,000
First we'll try an example where there is a link,

11
00:00:31,000 --> 00:00:35,000
so what we should get as the next target when this is the page

12
00:00:35,000 --> 00:00:38,000
that's passed in is the link that's included,

13
00:00:38,000 --> 00:00:45,000
which is between the double quotes inside the a href tag.

14
00:00:45,000 --> 00:00:48,000
When we run that, we get our 2 outputs.

15
00:00:48,000 --> 00:00:51,000
We got the string that's the link,

16
00:00:51,000 --> 00:00:54,000
and we got 37, which is the position of the end quote.

17
00:00:54,000 --> 00:00:57,000
And we can see it's printing out the 2 outputs as a tuple,

18
00:00:57,000 --> 00:01:00,000
meaning the first one, the second one

19
00:01:00,000 --> 00:01:04,000
surrounded by parentheses, and we could get those in an assignment like this.

20
00:01:04,000 --> 00:01:08,000
Instead of just printing it, we'll use our double assignment,

21
00:01:08,000 --> 00:01:12,000
getting those outputs, and we'll print the value of just the URL.

22
00:01:12,000 --> 00:01:17,000
And we get the string http://udacity.com.

23
00:01:17,000 --> 00:01:19,000
That worked well.

24
00:01:19,000 --> 00:01:21,000
Now what happens if instead of passing in a page

25
00:01:21,000 --> 00:01:24,000
that actually has a link, we pass in something that doesn't.

26
00:01:24,000 --> 00:01:28,000
Let's say our page is just the text "good."

27
00:01:28,000 --> 00:01:31,000
Now, there's no link to find,

28
00:01:31,000 --> 00:01:34,000
but the code is going to run anyway, and what we see as the result

29
00:01:34,000 --> 00:01:37,000
is we actually got the result "goo."

30
00:01:37,000 --> 00:01:39,000
Probably not what we wanted,

31
00:01:39,000 --> 00:01:43,000
and the reason we got the result "goo" is you remember the find command,

32
00:01:43,000 --> 00:01:46,000
if it does not find what it's looking for, it returns -1.

33
00:01:46,000 --> 00:01:52,000
And when we use -1 as an index, that means the last character of the string.

34
00:01:52,000 --> 00:01:56,000
So what we end up with is getting all the characters except for the last character.

35
00:01:56,000 --> 00:02:00,000
If we pass in something else that does have a double quote in it,

36
00:02:00,000 --> 00:02:05,000
so now we'll pass in 'Not "good" at all!'

37
00:02:05,000 --> 00:02:08,000
we see what we get back for the URL is Not.

38
00:02:08,000 --> 00:02:10,000
This is not very useful.

39
00:02:10,000 --> 00:02:12,000
This is pretty confusing behavior.

40
00:02:12,000 --> 00:02:15,000
It's going to be very hard to tell when we've gotten to the last target

41
00:02:15,000 --> 00:02:19,000
because maybe Not could be a valid URL, and we don't know that.

42
00:02:19,000 --> 00:02:22,000
What we want to do is make get_next_target return something more useful

43
00:02:22,000 --> 00:02:27,000
in the case where the input does not contain any link,

44
00:02:27,000 --> 00:02:30,000
and the way we're going to do that we'll leave partly up to you.

45
00:02:30,000 --> 00:02:32,000
But I'll give you a hint to get started.

46
00:02:32,000 --> 00:02:34,000
We're going to want to change the code,

47
00:02:34,000 --> 00:02:38,000
and you're going to want to put something into the code here.

48
00:02:38,000 --> 00:02:41,000
If we found a link, well, we've got a value for start_link

49
00:02:41,000 --> 00:02:43,000
that's the position of the start link.

50
00:02:43,000 --> 00:02:46,000
If we didn't find a link, what we got back from find was -1,

51
00:02:46,000 --> 00:02:50,000
and I want you to change what the get_next_target procedure does,

52
00:02:50,000 --> 00:02:52,000
so when there's no link to find,

53
00:02:52,000 --> 00:02:54,000
what we should return is the value None.

54
00:02:54,000 --> 00:02:57,000
This is the special value that means there isn't anything.

55
00:02:57,000 --> 00:03:00,000
And we'll return 0 as the endpos.

56
00:03:00,000 --> 00:03:03,000
Let me write that out more precisely, but the hint is

57
00:03:03,000 --> 00:03:05,000
you're going to have to change the code

58
00:03:05,000 --> 00:03:07,000
after you've found the start_link to figure out

59
00:03:07,000 --> 00:03:09,000
whether there is a link to find.

60
00:03:09,000 --> 00:03:12,000
Your goal for this quiz is to modify the get_next_target procedure

61
00:03:12,000 --> 00:03:14,000
that we've defined so that

62
00:03:14,000 --> 00:03:18,000
if there is a link, it behaves exactly as it does now,

63
00:03:18,000 --> 00:03:21,000
still returns the URL of the link target,

64
00:03:21,000 --> 00:03:26,000
as well as the number of that position where the end quote is.

65
00:03:26,000 --> 00:03:29,000
But if there's no link in the input string,

66
00:03:29,000 --> 00:03:31,000
it should output None as the first output

67
00:03:31,000 --> 00:03:34,000
and 0 as the second output, and None is a special value

68
00:03:34,000 --> 00:03:37,000
that means it's not actually returning anything.
