1
00:00:00,440 --> 00:00:02,300
Well that was generalization.

2
00:00:02,300 --> 00:00:06,670
Even trickier than generalization is figuring out how to implement associations.

3
00:00:06,670 --> 00:00:11,330
OO programming languages do not directly support associations so the OO

4
00:00:11,330 --> 00:00:15,410
design process must choose the best means of implementing these associations.

5
00:00:15,410 --> 00:00:19,710
Some of the factors you have to take into account, first off is directionality.

6
00:00:19,710 --> 00:00:26,720
What this means is, if your program is going to need to interact with several

7
00:00:26,720 --> 00:00:32,229
classes, is the direction of that interaction always in one particular way?

8
00:00:32,229 --> 00:00:35,100
First A and then B or might you go in either way.

9
00:00:35,100 --> 00:00:36,740
Second is cardinality.

10
00:00:36,740 --> 00:00:37,560
That is for

11
00:00:37,560 --> 00:00:42,370
particular instance of one class are there multiple instances in another class?

12
00:00:42,370 --> 00:00:45,970
And third is the kind of access you will make into classes.

13
00:00:45,970 --> 00:00:48,160
Sometimes these are called the CRUD properties.

14
00:00:48,160 --> 00:00:52,095
Where C stands for create, that is how you going to create instances, R is for

15
00:00:52,095 --> 00:00:56,310
read, that means are you just going to query or access the, the instances,

16
00:00:56,310 --> 00:01:00,390
U is for update, that is, could you change the instances and D is for delete.

17
00:01:00,390 --> 00:01:06,500
Depending on, which of these particular kinds of accesses and

18
00:01:06,500 --> 00:01:10,040
how frequently they occur, it might particularly in

19
00:01:10,040 --> 00:01:13,440
the performance area effect how you choose to implement them.

20
00:01:13,440 --> 00:01:16,870
And finally as far as invariant maintenance is concerned,

21
00:01:16,870 --> 00:01:20,970
okay associations often have invariance associated with them.

22
00:01:20,970 --> 00:01:23,250
Like referential integrity constraints and

23
00:01:23,250 --> 00:01:25,850
it's up to you as the designer and programmer,

24
00:01:25,850 --> 00:01:28,340
to build your program in such a way that these invariants are maintained
