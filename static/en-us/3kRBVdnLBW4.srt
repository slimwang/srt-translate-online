1
00:00:00,190 --> 00:00:03,370
Before we go into how
virtual memory works,

2
00:00:03,370 --> 00:00:07,200
let's first see why do we even
want to have virtual memory?

3
00:00:07,200 --> 00:00:11,400
And the short answer is that we
want to have virtual memory because

4
00:00:11,400 --> 00:00:16,280
the programmer and the hardware have
different views of what memory means.

5
00:00:16,280 --> 00:00:20,930
In the hardware view,
the machine has some memory modules

6
00:00:20,930 --> 00:00:25,080
with an actual amount of memory that
can be accessed by the real processor.

7
00:00:25,080 --> 00:00:28,450
Let's say that this
module is 2 gigabytes and

8
00:00:28,450 --> 00:00:30,960
this module is 2 gigabytes.

9
00:00:30,960 --> 00:00:35,939
So what the hardware really has
is 4 gigabytes of memory, and

10
00:00:35,939 --> 00:00:42,880
the address is for this 4 gigabytes
are going to be 0 through 4 gigabytes.

11
00:00:42,880 --> 00:00:47,744
In contrast, the programmer's view of
memory is that it's a huge array with

12
00:00:47,744 --> 00:00:53,970
address that go from 0 to a very, very
large number if it's a 64 bit machine.

13
00:00:53,970 --> 00:00:56,330
This is many, many gigabytes.

14
00:00:56,330 --> 00:00:59,760
Obviously, this is much more than
with the machine really has.

15
00:01:01,010 --> 00:01:04,170
Some of this memory might
be reserved for the system.

16
00:01:04,170 --> 00:01:07,345
Some of this memory contains
the actual program instructions.

17
00:01:07,345 --> 00:01:10,225
Some of it is for static data.

18
00:01:10,225 --> 00:01:11,295
Then we have the memory for

19
00:01:11,295 --> 00:01:17,095
the heap, which is where malloc finds
its memory, and this heap can grow.

20
00:01:17,095 --> 00:01:20,800
And then some of it, usually very
high in the memory address space,

21
00:01:20,800 --> 00:01:22,295
is the stack.

22
00:01:22,295 --> 00:01:24,695
And that typically grows this way.

23
00:01:24,695 --> 00:01:27,400
But the programmer doesn't
really want to be bothered

24
00:01:27,400 --> 00:01:31,600
by how much space is there
between the heap and the stack.

25
00:01:31,600 --> 00:01:33,340
What they want to do is simply malloc,

26
00:01:33,340 --> 00:01:39,070
or push things on the stack, and
they never run out of memory.

27
00:01:39,070 --> 00:01:40,970
And in a 64 bit of rest space,

28
00:01:40,970 --> 00:01:43,360
chances are they won't
actually run out of memory.

29
00:01:43,360 --> 00:01:48,060
But the problem is the actual amount of
memory that they're using might be less,

30
00:01:48,060 --> 00:01:53,930
or it might be much more than the actual
memory that the machine has here.

31
00:01:53,930 --> 00:01:56,470
Things are actually
much more complicated

32
00:01:56,470 --> 00:02:00,570
because we typically don't run
only run one program on a machine,

33
00:02:00,570 --> 00:02:04,670
we actually simultaneously
having multiple programs run.

34
00:02:04,670 --> 00:02:07,990
You might be having something
that browses files here,

35
00:02:07,990 --> 00:02:12,390
an MP3 player playing in the background,
and a word processor here.

36
00:02:12,390 --> 00:02:17,300
Each of these sees the address
space that begins at 0 and

37
00:02:17,300 --> 00:02:19,700
ends at the very large address.

38
00:02:19,700 --> 00:02:21,980
We don't want to write our programs so

39
00:02:21,980 --> 00:02:25,990
that this needs to run as
the first program in the system.

40
00:02:25,990 --> 00:02:28,930
This needs to run as the second
program in the system.

41
00:02:28,930 --> 00:02:33,230
You want to write the program as if it
was the only program in the system and

42
00:02:33,230 --> 00:02:35,620
then just run multiple
programs like that.

43
00:02:35,620 --> 00:02:41,140
But that means that this
program's idea of memory is

44
00:02:41,140 --> 00:02:43,780
it thinks it has all of this memory.

45
00:02:43,780 --> 00:02:47,840
This program similarly thinks
it has all of this memory.

46
00:02:47,840 --> 00:02:51,840
So as far as these two programs
are concerned, for example,

47
00:02:51,840 --> 00:02:56,135
their code might well be at the same
address in each program, although

48
00:02:56,135 --> 00:02:59,365
in fact they each have different
instructions at those addresses.

49
00:02:59,365 --> 00:03:04,675
So virtual memory is a way of
reconciling how the programmers view

50
00:03:04,675 --> 00:03:08,738
memory and how the hardware actually
needs to view memory in order to work.
