1
00:00:00,173 --> 00:00:02,138
In this lecture we're going to talk about GPU hardware

2
00:00:02,138 --> 00:00:04,078
and how that affects the programming model.

3
00:00:04,078 --> 00:00:08,447
Let's summarize what we've learned so far about the GPU programming model and start adding to it.

4
00:00:08,447 --> 00:00:12,290
In our last lecture, we learned about the programmers view of the GPU.

5
00:00:12,290 --> 00:00:15,296
I'm going to summarize that and then start adding some more details to it.

6
00:00:15,296 --> 00:00:22,560
Your job as the programmer is to divide up your program into smaller computations called kernels.

7
00:00:22,560 --> 00:00:25,797
A kernel in our case is a C or C++ function.

8
00:00:25,797 --> 00:00:29,800
The key idea of a kernel is that it's going to be performed by many threads.

9
00:00:29,800 --> 00:00:34,865
A thread is a path of execution, a thread of execution through the program code.

10
00:00:34,865 --> 00:00:38,894
I've drawn them as wiggly lines here because they're not necessarily all going

11
00:00:38,894 --> 00:00:40,829
to take the same path through that code.

12
00:00:40,829 --> 00:00:43,300
There might be branches like if statements or switch statements.

13
00:00:43,300 --> 00:00:47,258
There might be loops--for loops, to loops.

14
00:00:47,258 --> 00:00:50,373
You don't know in advance what path you're going to take.

15
00:00:50,373 --> 00:00:51,704
This is not straight-line code.

16
00:00:51,704 --> 00:00:55,910
In fact, different threads might take different paths.

17
00:00:55,910 --> 00:01:00,007
There might be a thread which takes a completely different path.

18
00:01:00,007 --> 00:01:05,218
The key thing about threads is that they come in thread blocks.

19
00:01:05,218 --> 00:01:08,923
A thread block is a group of threads that cooperate to solve a sub-problem.

20
00:01:08,923 --> 00:01:12,195
A GPU program launches many threads to run one kernel,

21
00:01:12,195 --> 00:01:15,364
and then they all run to completion and exit.

22
00:01:15,364 --> 00:01:18,842
The program launches many threads to run the next kernel like bar.

23
00:01:18,842 --> 00:01:22,572
Another thing to notice about the way I drew this is that, you notice

24
00:01:22,572 --> 00:01:24,974
I have a different number of thread blocks with a different number of threads.

25
00:01:24,974 --> 00:01:28,144
That's actually something you can pick for each kernel.

26
00:01:28,144 --> 00:01:32,324
And we'll talk later why you would choose different numbers of threads,

27
00:01:32,324 --> 00:01:34,223
different number of thread blocks, how you would organize these.

28
00:01:34,223 --> 00:01:36,687
That's the programmer's view of the GPU.
