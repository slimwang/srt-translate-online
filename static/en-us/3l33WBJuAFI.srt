1
00:00:00,240 --> 00:00:02,570
So the speed of light is a constant. But

2
00:00:02,570 --> 00:00:05,160
the important thing about variables in Python is that

3
00:00:05,160 --> 00:00:08,330
they can vary. That's why they're called variables. Once

4
00:00:08,330 --> 00:00:11,640
we define the variable, we can change the value.

5
00:00:11,640 --> 00:00:13,960
And then when we use that name again it

6
00:00:13,960 --> 00:00:16,200
refers to the new value. So let's see that

7
00:00:16,200 --> 00:00:19,255
in an interpreter. We could change the value of

8
00:00:19,255 --> 00:00:26,044
cycles_per_second. Suppose we have a faster processor. Now we've upgraded,

9
00:00:26,044 --> 00:00:29,630
we've got a 2.8 Ghz processor. Now, that doesn't

10
00:00:29,630 --> 00:00:32,500
affect the value of cycle distance. This was already computed

11
00:00:32,500 --> 00:00:36,740
with the old cycles_per_second. We still get the result, 0.111.

12
00:00:36,740 --> 00:00:39,630
We'll compute it again. This time the value of cycles

13
00:00:39,630 --> 00:00:41,940
per second is the new value since we changed

14
00:00:41,940 --> 00:00:44,820
what cycles per second refers to. And now when we

15
00:00:44,820 --> 00:00:48,216
print cycle_distance we see that the values changed. So we

16
00:00:48,216 --> 00:00:52,011
have a faster processor the second time we print cycle_distance

17
00:00:52,011 --> 00:00:55,254
now we only have 0.107 meters, less than 11

18
00:00:55,254 --> 00:00:58,560
centimeters per cycle. So what happens now that we

19
00:00:58,560 --> 00:01:01,980
have assignment, the same expression can have different meanings

20
00:01:01,980 --> 00:01:04,727
at different times we evaluate it. The value of the

21
00:01:04,727 --> 00:01:07,566
speed of light divided by cycles per second depends

22
00:01:07,566 --> 00:01:10,352
on what the current value of cycles per second is.

23
00:01:10,352 --> 00:01:13,126
When we evaluate the first one, the value was

24
00:01:13,126 --> 00:01:16,703
2 billion 700 million, so we got a different result,

25
00:01:16,703 --> 00:01:20,095
which was the 0.111 result we got the first time.

26
00:01:20,095 --> 00:01:22,790
When we evaluate the same expression the second time, the

27
00:01:22,790 --> 00:01:26,530
result's different, because the value that cycles_per_second refers to is

28
00:01:26,530 --> 00:01:29,950
different. And that's why we get the smaller cycle_distance the

29
00:01:29,950 --> 00:01:32,290
second time. So, let's see what's going on there and

30
00:01:32,290 --> 00:01:35,160
make sure we understand assignment. So, suppose we have a

31
00:01:35,160 --> 00:01:38,841
variable, days. And we'll initialize it to the value 7

32
00:01:38,841 --> 00:01:42,290
times 7. So what that does is introduce a name days.

33
00:01:42,290 --> 00:01:44,510
And it refers to a value, which is the result

34
00:01:44,510 --> 00:01:47,533
of that expression. So it refers to the value 49, and

35
00:01:47,533 --> 00:01:49,945
that means when we look at the name days, we

36
00:01:49,945 --> 00:01:53,430
see what it refers to and we get the result, 49.

37
00:01:53,430 --> 00:01:56,890
If we do another assignment. Let's say we have one

38
00:01:56,890 --> 00:02:02,100
less day. And in this case we'll assign 48 to days.

39
00:02:02,100 --> 00:02:04,625
Well, that's a new assignment. We already have a name days.

40
00:02:04,625 --> 00:02:07,840
It used to refer to 49. But after the new assignment,

41
00:02:07,840 --> 00:02:09,800
it's going to refer to this new value. Now

42
00:02:09,800 --> 00:02:13,840
it's going to refer to the value 48. The

43
00:02:13,840 --> 00:02:17,280
number 49 still exists, but days no longer refers

44
00:02:17,280 --> 00:02:21,880
to it. Now days refers to 48. Where things

45
00:02:21,880 --> 00:02:24,820
get more interesting is we can use variables in

46
00:02:24,820 --> 00:02:27,380
their own assignment statements. So here we have an

47
00:02:27,380 --> 00:02:29,680
assignment statement where we have the value days minus

48
00:02:29,680 --> 00:02:32,840
1 and we assign that to days. So what

49
00:02:32,840 --> 00:02:36,070
happens with that assignment? Well, we evaluate the right

50
00:02:36,070 --> 00:02:39,020
side first. We look for the value of days

51
00:02:39,020 --> 00:02:41,300
and we see that it refers to 48. We

52
00:02:41,300 --> 00:02:44,160
compute days minus 1 and we get the value 47.

53
00:02:44,160 --> 00:02:48,210
Then we do the assignment that will assign to

54
00:02:48,210 --> 00:02:51,450
the variable days. So now the value days refers to

55
00:02:51,450 --> 00:02:55,780
the value 47, no longer refers to 48. So

56
00:02:55,780 --> 00:02:59,080
we could keep doing that, if we did another statement,

57
00:02:59,080 --> 00:03:02,310
same exact one, that's going to change the value again.

58
00:03:02,310 --> 00:03:05,190
This time, the first time, the value days is 47,

59
00:03:05,190 --> 00:03:09,560
we'll subtract 1, we'll get the value 46. And then

60
00:03:09,560 --> 00:03:12,890
we do the assignment, that'll change the value, so now

61
00:03:12,890 --> 00:03:16,320
days refers to the value 46. So the important thing

62
00:03:16,320 --> 00:03:19,040
to notice, this is not an equal symbol. This looks

63
00:03:19,040 --> 00:03:22,320
like an equal symbol. If you studied algebra you would

64
00:03:22,320 --> 00:03:24,620
think an equation like this looks like an equality, and

65
00:03:24,620 --> 00:03:27,010
there is no way to solve an equation like that.

66
00:03:27,010 --> 00:03:30,270
In Python and in most programming language, equal does not mean

67
00:03:30,270 --> 00:03:33,670
equal. What equal means is assignment. You should really think of

68
00:03:33,670 --> 00:03:37,810
it as an arrow. It's an arrow saying put whatever value

69
00:03:37,810 --> 00:03:41,140
of the right side evaluates to, into the name on the

70
00:03:41,140 --> 00:03:43,950
left side. We don't write it as an arrow in most

71
00:03:43,950 --> 00:03:47,270
programming languages. There's some that do, just because an arrow is

72
00:03:47,270 --> 00:03:50,730
harder to type, and lots of programs have lots of assignments.

73
00:03:50,730 --> 00:03:51,870
But you should think of the equal

74
00:03:51,870 --> 00:03:54,710
sign as not meaning equal, it means assignment.
