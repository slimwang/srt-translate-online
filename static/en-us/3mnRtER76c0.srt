1
00:00:00,740 --> 00:00:01,839
Now, we've written a lot of code,

2
00:00:01,839 --> 00:00:06,000
and you must be anxious to see the list
of words start to appear on the screen.

3
00:00:06,000 --> 00:00:08,580
Well, here's a manual way
of making that happen.

4
00:00:08,580 --> 00:00:11,430
We've mentioned multiple times that
anything you write in the XML of your

5
00:00:11,430 --> 00:00:15,225
app, we can actually accomplish
in the Java code as well.

6
00:00:15,225 --> 00:00:19,415
So I could create a TextView object for
each element in this list and

7
00:00:19,415 --> 00:00:22,225
then add it as a child view
to the current layout.

8
00:00:22,225 --> 00:00:23,155
So let's try that approach.

9
00:00:24,385 --> 00:00:26,895
First off, I need to start
by checking out the layout.

10
00:00:26,895 --> 00:00:28,903
So for the NumbersActivity,

11
00:00:28,903 --> 00:00:33,570
we see that the layout is defined
in the activity_numbers XML file.

12
00:00:35,080 --> 00:00:36,684
So I'm going to open up that file, and

13
00:00:36,684 --> 00:00:40,060
then I'm going to change this
RelativeLayout to a LinearLayout.

14
00:00:40,060 --> 00:00:44,633
So every child view that I add to it
will just come one right after another

15
00:00:44,633 --> 00:00:45,942
in a single column.

16
00:00:45,942 --> 00:00:49,327
Additionally, I'm going to add the
orientation attribute to be vertical.

17
00:00:49,327 --> 00:00:52,825
Now I'm going to be adding child
views dynamically in Java code, and

18
00:00:52,825 --> 00:00:56,013
because of this, I should give
this LinearLayout a view id,

19
00:00:56,013 --> 00:00:58,590
so that I can reference it
in the Java code later.

20
00:01:00,250 --> 00:01:02,020
And I'm going to call that id rootView.

21
00:01:03,100 --> 00:01:04,485
Now let's go back to
the NumbersActivity.

22
00:01:06,538 --> 00:01:10,770
So I'm going to be adding the lines
of code to display the list of words

23
00:01:10,770 --> 00:01:12,320
at the end of the onCreate method.

24
00:01:12,320 --> 00:01:15,810
And I'm going to do this after
I've created my ArrayList.

25
00:01:15,810 --> 00:01:19,400
I can go ahead and
delete these log messages

26
00:01:19,400 --> 00:01:22,700
because I already know my
list was created properly.

27
00:01:22,700 --> 00:01:25,680
So I'm going to close the project
panel on the side, so

28
00:01:25,680 --> 00:01:26,850
we can see the code better.

29
00:01:27,850 --> 00:01:30,650
So what I need to do in the Java
code is that first, I need to

30
00:01:30,650 --> 00:01:34,670
find the LinearLayout that I called
rootView and store it in a variable.

31
00:01:35,810 --> 00:01:40,370
And then I can start creating and
adding TextViews to this LinearLayout.

32
00:01:40,370 --> 00:01:45,010
So to do so, I need to start off
by using findViewById method

33
00:01:45,010 --> 00:01:47,285
to find the view with the id rootView.

34
00:01:48,550 --> 00:01:50,190
And this will return a view to me.

35
00:01:51,430 --> 00:01:55,420
But I need to cast it specifically
into a LinearLayout data type, and

36
00:01:55,420 --> 00:01:57,999
I do so, so
that I can add child views to it.

37
00:01:59,080 --> 00:02:03,290
Now I'll store this view in the rootView
variable, so that I can use it later.

38
00:02:04,410 --> 00:02:06,404
And remember to end it with a semicolon.

39
00:02:06,404 --> 00:02:08,014
[BLANK_AUDIO]

40
00:02:08,014 --> 00:02:08,850
Nice.

41
00:02:08,850 --> 00:02:13,364
So remember this line helps me find
the LinearLayout called rootView.

42
00:02:13,364 --> 00:02:16,380
And I'm going to store it in
this variable called rootView.

43
00:02:16,380 --> 00:02:17,217
And remember next,

44
00:02:17,217 --> 00:02:20,230
I need to create and add TextViews to
this LinearLayout we just created.

45
00:02:21,720 --> 00:02:23,650
So start off by creating
the TextView object.

46
00:02:24,858 --> 00:02:26,930
So I'm going to use this constructor,

47
00:02:26,930 --> 00:02:28,770
which requires a context
as its only input.

48
00:02:29,850 --> 00:02:33,170
Remember to help us understand
which constructor to use,

49
00:02:33,170 --> 00:02:35,170
we can always check the documentation.

50
00:02:35,170 --> 00:02:37,720
So here's the documentation for
the TextView class.

51
00:02:37,720 --> 00:02:40,320
And I'm going to scroll down to
the section about public constructors.

52
00:02:41,670 --> 00:02:44,822
So here we see there are a couple
of possible constructors we could

53
00:02:44,822 --> 00:02:45,405
have used.

54
00:02:45,405 --> 00:02:49,224
And each of them has
a different number of inputs.

55
00:02:49,224 --> 00:02:51,963
But I'm going to go ahead and
use this first one,

56
00:02:51,963 --> 00:02:54,880
which takes in one input context.

57
00:02:54,880 --> 00:02:57,010
Remember that every time you
create a view in Java code,

58
00:02:57,010 --> 00:03:00,770
you need to pass in a context, so
that the view knows the theme and

59
00:03:00,770 --> 00:03:04,130
other information about the app
in which it will be displayed.

60
00:03:04,130 --> 00:03:06,710
So it gives it context as to
what's going on around it.

61
00:03:08,140 --> 00:03:13,974
Now in this case, we have this passed
in as the input for this constructor.

62
00:03:13,974 --> 00:03:17,210
And since this class is
the NumbersActivity class,

63
00:03:17,210 --> 00:03:19,130
this will also be the context.

64
00:03:20,820 --> 00:03:24,660
All right, so now this line of code
has helped me create a TextView object

65
00:03:24,660 --> 00:03:29,640
that is stored in a variable called
wordView, whose data type is a TextView.

66
00:03:30,780 --> 00:03:33,550
So to change the text that
is displayed on screen,

67
00:03:33,550 --> 00:03:37,320
I call the setText method
on the wordView object.

68
00:03:37,320 --> 00:03:40,820
And I pass in one input,
which is the desired text.

69
00:03:40,820 --> 00:03:43,390
In this case, I want the TextView
to display the string

70
00:03:43,390 --> 00:03:46,190
stored in the words list
at the zeroth index.

71
00:03:47,480 --> 00:03:51,050
And so
this should help us map to the word one.

72
00:03:51,050 --> 00:03:54,122
Now that we have a wordView object
with the correct text inside,

73
00:03:54,122 --> 00:03:59,020
I'm going to add the view as a child
to the parent view called rootView.

74
00:04:00,210 --> 00:04:02,460
So this is our child view, wordView.

75
00:04:02,460 --> 00:04:06,840
And this is our parent view, rootView.

76
00:04:06,840 --> 00:04:10,241
So I'm adding the child view, wordView,

77
00:04:10,241 --> 00:04:14,970
using the .addView method to
the parent view, rootView.

78
00:04:17,130 --> 00:04:20,420
All right, so let's run this code
in our app and see what happens.

79
00:04:20,420 --> 00:04:24,850
All right, so now when we go
into the NumbersActivity, nice.

80
00:04:24,850 --> 00:04:26,620
So we see the word one,

81
00:04:26,620 --> 00:04:30,560
which was from the zeroth
element of our word array list.

82
00:04:30,560 --> 00:04:35,020
So what we've done here is dynamically
created a TextView in Java code

83
00:04:35,020 --> 00:04:38,330
based on the first element
in the array list.

84
00:04:38,330 --> 00:04:38,920
And at this point,

85
00:04:38,920 --> 00:04:41,920
you're probably starting to
think of all the possibilities.

86
00:04:41,920 --> 00:04:46,360
So what if we repeat the same code for
all the other elements in the list?

87
00:04:46,360 --> 00:04:48,300
Then we can show a list
of words on the screen.

88
00:04:50,240 --> 00:04:52,678
So let's give that a try
with a couple more views.

89
00:04:52,678 --> 00:04:55,040
So I'm going to copy
these three lines of code

90
00:04:55,040 --> 00:04:58,300
that helped us create a TextView for
the word, one.

91
00:04:58,300 --> 00:05:02,315
Paste it below, and then modify it
to help us create a TextView for

92
00:05:02,315 --> 00:05:03,340
the word, two.

93
00:05:03,340 --> 00:05:05,600
So it looks like I'm
getting an error here.

94
00:05:05,600 --> 00:05:09,670
And it says the variable wordView
is already defined in the scope.

95
00:05:09,670 --> 00:05:13,490
And that means that you can only define
a local variable once with the same name

96
00:05:13,490 --> 00:05:14,560
within the same scope.

97
00:05:15,600 --> 00:05:19,220
And the scope that it's
referring to here is the method.

98
00:05:19,220 --> 00:05:22,580
So to help with that, I'll put
a different name and call it wordView2.

99
00:05:23,590 --> 00:05:26,680
Then I'm going to update
the code below to reflect that.

100
00:05:26,680 --> 00:05:30,385
Great, so now we have a block of
code that creates another TextView

101
00:05:30,385 --> 00:05:35,015
called wordView2, and we add that
TextView to the parent view rootView.

102
00:05:36,420 --> 00:05:37,230
But wait a second,

103
00:05:37,230 --> 00:05:42,380
I want this second TextView to display
the next word at the first index.

104
00:05:42,380 --> 00:05:46,405
So instead of words.get(0),
I'll change it to

105
00:05:46,405 --> 00:05:51,565
words.get(1) to get the string
located at the index 1 in the list.

106
00:05:52,725 --> 00:05:54,882
So now let's copy and
paste that section, and

107
00:05:54,882 --> 00:05:57,830
make some modifications to display
the third word in the list.

108
00:05:57,830 --> 00:05:59,230
[BLANK_AUDIO]

109
00:05:59,230 --> 00:06:01,735
All right, so let's give it a test and
see what happens.

110
00:06:01,735 --> 00:06:06,305
When we run the app on our device and
hit numbers, nice.

111
00:06:06,305 --> 00:06:10,110
So in the NumbersActivity,
we put out a list of one, two,

112
00:06:10,110 --> 00:06:13,270
and three, which are the first
three elements of our array list.

113
00:06:14,410 --> 00:06:18,010
All right, so we could continue this
approach of copy and pasting and

114
00:06:18,010 --> 00:06:22,938
making modifications to the text for
you and the indexes.

115
00:06:22,938 --> 00:06:25,410
But it's going to get really tedious,
and

116
00:06:25,410 --> 00:06:28,150
we also need to style these
TextViews to make them look better.

117
00:06:28,150 --> 00:06:30,405
Right now, it's just plain text.

118
00:06:30,405 --> 00:06:33,690
Well, we might have well just done
all this in XML and just copied and

119
00:06:33,690 --> 00:06:36,970
pasted the XML element over and
over and over again.

120
00:06:36,970 --> 00:06:38,970
Well, hang on for a moment.

121
00:06:38,970 --> 00:06:41,850
In writing this Java code,
we do start to see a pattern.

122
00:06:43,020 --> 00:06:47,150
So notice that each block of code for
each TextView is really similar.

123
00:06:48,400 --> 00:06:52,034
And the main difference is that
the index position is changing from one

124
00:06:52,034 --> 00:06:53,025
block to another.

125
00:06:53,025 --> 00:06:58,002
So see that we're incrementing
the index from 0,

126
00:06:58,002 --> 00:07:00,800
1, 2, and so on and so on.

127
00:07:00,800 --> 00:07:03,030
So I've rewritten the code
based on the pattern we saw.

128
00:07:04,060 --> 00:07:07,696
So what if we replace the energy
variable that tracks our current index

129
00:07:07,696 --> 00:07:10,790
position in the list and
then just update it by 1 each time?

130
00:07:11,910 --> 00:07:15,940
So notice that these blocks of code
are looking more and more similar, so

131
00:07:15,940 --> 00:07:20,970
they all call words.get, and
they pass in an index as the input.

132
00:07:20,970 --> 00:07:24,510
And we just have extra code now that
increases the index value by 1.

133
00:07:24,510 --> 00:07:27,390
So now I'm going to introduce you to
an awesome new programming concept

134
00:07:27,390 --> 00:07:28,690
called loops.

135
00:07:28,690 --> 00:07:31,950
And once you learn about loops, I'm
going to ask you to fix this code, so

136
00:07:31,950 --> 00:07:35,730
that you can display all of the words
on the screen without copying and

137
00:07:35,730 --> 00:07:39,260
pasting this block of code over and
over again ten times.
