1
00:00:00,230 --> 00:00:03,140
So this is our superscalar versus VLIW quiz

2
00:00:03,140 --> 00:00:07,120
solution. We have an [INAUDIBLE] superscalar with a 32

3
00:00:07,120 --> 00:00:10,750
bit instruction. And we have a VLIW processor,

4
00:00:10,750 --> 00:00:14,450
where it really packages up to four such instructions

5
00:00:14,450 --> 00:00:16,650
into a 128 bit instruction. If we manage

6
00:00:16,650 --> 00:00:20,130
to package four instructions into one of these. Then

7
00:00:20,130 --> 00:00:24,200
the size is the same, four of these are equal to the size of one of these.

8
00:00:25,280 --> 00:00:28,540
So the program size, at best, will be the

9
00:00:28,540 --> 00:00:33,092
same, 4000 bytes. However, it can happen for example that

10
00:00:33,092 --> 00:00:36,078
all of these instructions depend on each other. In

11
00:00:36,078 --> 00:00:38,706
which case we can specify only one of them in

12
00:00:38,706 --> 00:00:40,690
each one of these. We have to fill the

13
00:00:40,690 --> 00:00:44,830
rest of the 128 bit instruction with three no ops,

14
00:00:44,830 --> 00:00:47,090
simply because there are no two instructions from this

15
00:00:47,090 --> 00:00:50,260
program that can actually fit in the same instruction here,

16
00:00:50,260 --> 00:00:55,120
because they depend on each other. And all we can put in a VLIW instruction are

17
00:00:55,120 --> 00:01:00,150
operations. That are independent of each other. So, what could happen is that we

18
00:01:00,150 --> 00:01:06,630
have a program that is really four times larger, which is 16000 bytes.
