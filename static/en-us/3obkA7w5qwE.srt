1
00:00:00,000 --> 00:00:02,000
Anything else?

2
00:00:02,000 --> 00:00:08,000
Lock contention is a big thing for us right now.

3
00:00:08,000 --> 00:00:11,000
As I was saying with this Cassandra stuff--

4
00:00:11,000 --> 00:00:15,000
Whenever you vote on a link in a popular subreddit,

5
00:00:15,000 --> 00:00:20,000
it has to lock on that subreddit's listing.

6
00:00:20,000 --> 00:00:23,000
An example of that biting us recently--

7
00:00:23,000 --> 00:00:26,000
we have these queue processors,

8
00:00:26,000 --> 00:00:28,000
and all they do is they

9
00:00:28,000 --> 00:00:30,000
get that queue item that says that

10
00:00:30,000 --> 00:00:32,000
somebody's cast a vote.

11
00:00:32,000 --> 00:00:35,000
So you basically have a set of machines that are reading from this. >>Right.

12
00:00:35,000 --> 00:00:39,000
So all these apps are writing what happened to the queue? >>Right.

13
00:00:39,000 --> 00:00:42,000
Then you've got a bunch of machines

14
00:00:42,000 --> 00:00:44,000
that are reading from the queue.

15
00:00:44,000 --> 00:00:46,000
And what they do is, they sit there.

16
00:00:46,000 --> 00:00:50,000
They pull that out, and then they say, okay, that means I have to update these listings,

17
00:00:50,000 --> 00:00:55,000
and I have to record the vote in postscribes and cassandra.

18
00:00:55,000 --> 00:00:57,000
And they go through all of this stuff,

19
00:00:57,000 --> 00:01:00,000
and that involves a lot of the locking in here right now.

20
00:01:00,000 --> 00:01:04,000
And so we had a lot of these queue processors up for votes,

21
00:01:04,000 --> 00:01:06,000
and we get a lot of votes simultaneously,

22
00:01:06,000 --> 00:01:08,000
so we need a lot of them,

23
00:01:08,000 --> 00:01:11,000
but we had too many, it turned out,

24
00:01:11,000 --> 00:01:14,000
and they were all fighting each other for those locks.

25
00:01:14,000 --> 00:01:18,000
Just having the number of those queue processors

26
00:01:18,000 --> 00:01:21,000
actually sped up queue processing in general.

27
00:01:21,000 --> 00:01:25,000
You need enough queue processors to actually handle the depth of the queue,

28
00:01:25,000 --> 00:01:27,000
but if you have too many,

29
00:01:27,000 --> 00:01:29,000
they spend too much time fighting each other.

30
00:01:29,000 --> 00:01:31,000
And one of the ways we're working on that

31
00:01:31,000 --> 00:01:35,000
is we're getting rid of the locking in the cassandra stuff.

32
00:01:35,000 --> 00:01:38,000
And we're trying to get rid of locks as much as possible in general.

33
00:01:38,000 --> 00:01:41,000
Locking--

34
00:01:41,000 --> 00:01:43,000
It's a common theme.

35
00:01:43,000 --> 00:01:44,000
In python itself

36
00:01:44,000 --> 00:01:46,000
when we first switched to Amazon we had this weird issue where

37
00:01:46,000 --> 00:01:50,000
Python's multi-threading--running two threads at once,

38
00:01:50,000 --> 00:01:53,000
running two pieces of your program at the same time,

39
00:01:53,000 --> 00:01:56,000
is not state of the art--

40
00:01:56,000 --> 00:01:59,000
would be a nice way of putting it.

41
00:01:59,000 --> 00:02:02,000
Python was spending so much time locking its data structures

42
00:02:02,000 --> 00:02:05,000
so two threads could access the same data structure at the same time

43
00:02:05,000 --> 00:02:10,000
that it was actually slowing down the

44
00:02:10,000 --> 00:02:12,000
computer's ability read traffic over the network,

45
00:02:12,000 --> 00:02:15,000
which was causing it to spend more time

46
00:02:15,000 --> 00:02:16,000
switching between threads.

47
00:02:16,000 --> 00:02:20,000
It created this weird network/CPU thrashing issue.

48
00:02:20,000 --> 00:02:24,000
Where the way we solved that at the time was we just made python single threaded,

49
00:02:24,000 --> 00:02:26,000
and we'd only handle one request at the same time.

50
00:02:26,000 --> 00:02:29,000
I think you guys are probably still doing that.

51
00:02:29,000 --> 00:02:32,000
Yeah, we very rarely use threaded processes.

52
00:02:32,000 --> 00:02:35,000
The ad servers use threads, but other than that

53
00:02:35,000 --> 00:02:37,000
we just have lots of separate processes.

54
00:02:37,000 --> 00:02:40,000
You guys use lots of processes on 1 machine,

55
00:02:40,000 --> 00:02:44,000
and the OS then can do the task switching for you.

56
00:02:44,000 --> 00:02:46,000
The OS is Linux; these days, is pretty good at it.

57
00:02:46,000 --> 00:02:48,000
And they spend a lot of their time waiting

58
00:02:48,000 --> 00:02:50,000
for something in the back end.

59
00:02:50,000 --> 00:02:53,000
Well, this is really great. Thank you so much for coming.

60
00:02:53,000 --> 00:02:55,000
One thing I'd like to point out is that

61
00:02:55,000 --> 00:02:58,000
everything we've talked about here, the main things--

62
00:02:58,000 --> 00:03:05,000
memcache, Zookeeper, Cassandra, Hadoop, AMQP, NGINX, HAProxy--

63
00:03:05,000 --> 00:03:06,000
This is all free software.

64
00:03:06,000 --> 00:03:09,000
It's pretty wild how far you can get without paying for anything.

65
00:03:09,000 --> 00:03:11,000
The things that you have to pay for are

66
00:03:11,000 --> 00:03:13,000
the computers to run this stuff, but all of the software

67
00:03:13,000 --> 00:03:17,000
and all of the code behind all of the software is online and free.

68
00:03:17,000 --> 00:03:21,000
Also, the vast majority of reddit's code is also open source and online,

69
00:03:21,000 --> 00:03:24,000
so if you wanna look at this stuff--

70
00:03:24,000 --> 00:03:29,000
What's the URL for that? >>Github.com/reddit.

71
00:03:29,000 --> 00:03:32,000
I'm gonna make a hole right in the middle of our picture here.

72
00:03:32,000 --> 00:03:34,000
If you go into this code,

73
00:03:34,000 --> 00:03:37,000
we switched to git at some point,

74
00:03:37,000 --> 00:03:39,000
and my name isn't on a lot of this code anymore,

75
00:03:39,000 --> 00:03:41,000
but if you go in there, you will see

76
00:03:41,000 --> 00:03:43,000
a lot of the code we've written in this class for

77
00:03:43,000 --> 00:03:47,000
hashing and passwords and all of that stuff--

78
00:03:47,000 --> 00:03:49,000
It exists in reddit somewhere.

79
00:03:49,000 --> 00:03:51,000
It's really common stuff.

80
00:03:51,000 --> 00:03:55,000
It's cool, and you can see all of this stuff's also on the reddit mailing list,

81
00:03:55,000 --> 00:03:58,000
where people discuss these architecture changes and that sort of thing.

82
00:03:58,000 --> 00:04:00,000
Thanks again. Good job.

83
00:04:00,000 --> 00:04:05,000
Watching you guys grow Reddit has been really cool.

84
00:04:05,000 --> 00:04:10,000
There were some dark days, and you guys have really done an amazing job growing that site.

85
00:04:10,000 --> 00:04:13,000
It's really impressive. >>Well, it wouldn't be where it is without you.

86
00:04:13,000 --> 00:04:17,000
All right guys, thanks very much for watching, and we'll see you in the next one.
