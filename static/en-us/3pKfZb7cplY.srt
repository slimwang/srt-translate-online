1
00:00:00,530 --> 00:00:05,270
By now, I'm sure you have recognized that an operating system is a complex

2
00:00:05,270 --> 00:00:09,700
software system. Especially the protocol stack that

3
00:00:09,700 --> 00:00:12,400
sits within an operating system is several hundred

4
00:00:12,400 --> 00:00:15,630
thousand lines of code. And developing such

5
00:00:15,630 --> 00:00:19,620
a complex software system, in general, Protocol stack

6
00:00:19,620 --> 00:00:22,520
in particular, to meet specs and also

7
00:00:22,520 --> 00:00:25,080
deliver very good performance, is no mean challenge.

8
00:00:26,230 --> 00:00:30,490
Let's skip over to the other side of the fence and see how complex hardware

9
00:00:30,490 --> 00:00:35,200
systems for example, a CPU chip like this one with billions of

10
00:00:35,200 --> 00:00:40,190
transistors on it, is built. [UNKNOWN] technology uses

11
00:00:40,190 --> 00:00:45,350
component based approach to building large and complex hardware systems.

12
00:00:46,680 --> 00:00:51,490
Can we mimic the same method for building large

13
00:00:51,490 --> 00:00:57,710
complex software systems? That is, rather than start with a clean slate. Can

14
00:00:57,710 --> 00:01:01,880
we reuse software components? It's very tempting

15
00:01:01,880 --> 00:01:04,900
since component based design will be easier

16
00:01:04,900 --> 00:01:10,080
to test and optimize at an individual component level and also it'll allow

17
00:01:10,080 --> 00:01:13,730
for easy evolution and extension through the

18
00:01:13,730 --> 00:01:16,520
illusion and the leash and of components.

19
00:01:16,520 --> 00:01:19,360
The idea of component based design is

20
00:01:19,360 --> 00:01:22,910
orthogonal to the structure of the operating system

21
00:01:22,910 --> 00:01:26,080
that we've seen in previous lessons. Be it

22
00:01:26,080 --> 00:01:29,920
a monolithic kernel or a microkernel based design,

23
00:01:29,920 --> 00:01:32,850
the idea of component based design can be

24
00:01:32,850 --> 00:01:36,310
applied to each subsystem within an operating system.

25
00:01:36,310 --> 00:01:38,690
Of course, there are challenges. Can this lead

26
00:01:38,690 --> 00:01:42,040
to inefficiencies in performance due to the additional

27
00:01:42,040 --> 00:01:47,070
component level of function calls? Could it lead to loss of locality when we

28
00:01:47,070 --> 00:01:50,990
cross boundaries of components? Could it lead

29
00:01:50,990 --> 00:01:54,740
to unnecessary redundancies, such as copying, et cetera?

30
00:01:55,860 --> 00:01:58,270
Is it possible to get the advantages

31
00:01:58,270 --> 00:02:02,480
of component based design without losing performance? The

32
00:02:02,480 --> 00:02:04,440
short answer is' yes' if you can

33
00:02:04,440 --> 00:02:07,400
put theory and practice together. We will explore

34
00:02:07,400 --> 00:02:10,030
this topic more in this lesson. The

35
00:02:10,030 --> 00:02:13,920
idea is to synthesize Network Protocol Stack from

36
00:02:13,920 --> 00:02:18,540
components. How do we do that? But that's what were going to see in this lesson.

37
00:02:18,540 --> 00:02:22,410
And in this lesson, kernel's ensemble project

38
00:02:22,410 --> 00:02:26,220
is used as a backdrop to illustrate how

39
00:02:26,220 --> 00:02:29,760
to build complex systems by using components.

40
00:02:29,760 --> 00:02:32,490
And using a component based approach to putting

41
00:02:32,490 --> 00:02:35,610
together a large complex hardware system.
