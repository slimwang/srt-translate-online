1
00:00:00,450 --> 00:00:02,120
That question really put
your knowledge of for

2
00:00:02,120 --> 00:00:06,440
loops, functions, lists, and a number
of other programming foundations you've

3
00:00:06,440 --> 00:00:08,590
learned about to the test.

4
00:00:08,590 --> 00:00:11,530
I hope you were able to figure this
one out but if not, no worries.

5
00:00:11,530 --> 00:00:13,610
This was a pretty tough question.

6
00:00:13,610 --> 00:00:15,390
Let's go over the solution now.

7
00:00:15,390 --> 00:00:17,924
As we know,
we take in as inputs ml_string,

8
00:00:17,924 --> 00:00:22,330
or the string which can contain
replacement words, and parts_of_speech,

9
00:00:22,330 --> 00:00:25,500
or the list of acceptable
replacement words.

10
00:00:25,500 --> 00:00:27,350
As we work through writing code for
this function,

11
00:00:27,350 --> 00:00:31,250
here's an example ml_string and
parts_of_speech that we can reference.

12
00:00:31,250 --> 00:00:34,210
The first thing we want to do is
convert ml_string into a list so

13
00:00:34,210 --> 00:00:37,650
we can iterate over it, and we'll do
that by using the split function.

14
00:00:37,650 --> 00:00:41,560
Now, we want to iterate over
each element in ml_string.

15
00:00:41,560 --> 00:00:44,570
I set up this for-loop, which will
allow me to go through each word of

16
00:00:44,570 --> 00:00:47,360
the newly converted list, ml_string.

17
00:00:47,360 --> 00:00:48,770
Now, I assign this variable,

18
00:00:48,770 --> 00:00:53,280
replacement, equal to the value of
word_in_pos called on the current word

19
00:00:53,280 --> 00:00:57,162
we're looking at with the parts
of speech list passed in.

20
00:00:57,162 --> 00:01:00,910
So if word contains a part of speech,
replacement will be equal to that.

21
00:01:00,910 --> 00:01:04,470
So if place,
from the example ml_string was passed in

22
00:01:04,470 --> 00:01:10,080
with the example parts of speech list,
replacement would be equal to place.

23
00:01:10,080 --> 00:01:14,210
And if ADJECTIVE with an exclamation
mark, were passed with parts_of_speech,

24
00:01:14,210 --> 00:01:17,650
it would be equal to just ADJECTIVE
with no exclamation mark.

25
00:01:17,650 --> 00:01:21,830
Now, if the word wasn't in
parts_of_speech, for example is and

26
00:01:21,830 --> 00:01:26,570
really, our variable replacement
would be set to the value None.

27
00:01:26,570 --> 00:01:27,120
All right,

28
00:01:27,120 --> 00:01:30,720
now that we have our replacement
variables set, let's use it in our code.

29
00:01:30,720 --> 00:01:34,000
Here, we check if replacement
is not equal to None.

30
00:01:34,000 --> 00:01:38,910
So, if replacement is equal to a part
of speech, like PLACE or ADJECTIVE,

31
00:01:38,910 --> 00:01:43,310
we'll then replace the part of speech
in word with the string Corgi and

32
00:01:43,310 --> 00:01:45,580
this will let us keep our punctuation.

33
00:01:45,580 --> 00:01:49,130
Then, we'll add word to our
list replaced by using append,

34
00:01:49,130 --> 00:01:52,390
because we want to build up our list
in the same order as ml_string.

35
00:01:52,390 --> 00:01:53,640
All right, cool.

36
00:01:53,640 --> 00:01:57,100
Now that we've added words that contain
parts of speech to our list replaced,

37
00:01:57,100 --> 00:01:59,590
we just need to add code for
words that don't.

38
00:01:59,590 --> 00:02:02,575
So if the word doesn't contain a parts
of speech we'll just add the word to

39
00:02:02,575 --> 00:02:03,910
replaced.

40
00:02:03,910 --> 00:02:08,470
Now, we just convert the newly replaced
list to a string and then return it.

41
00:02:08,470 --> 00:02:09,288
That's it.

42
00:02:09,288 --> 00:02:12,792
We've built a madlibs generator that
will replace instances of any word in

43
00:02:12,792 --> 00:02:16,360
part of the speech with the string
Corgi, which will include punctuation.

44
00:02:17,420 --> 00:02:20,580
Now, let's find out how to run this
program on our local machines with

45
00:02:20,580 --> 00:02:24,510
user input rather than Corgi which,
as you'll see,

46
00:02:24,510 --> 00:02:26,420
will involve just adding
one line of code.
