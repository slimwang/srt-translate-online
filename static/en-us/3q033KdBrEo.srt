1
00:00:00,760 --> 00:00:03,430
Let's use the Ember CLI to
generate the service for us.

2
00:00:04,600 --> 00:00:06,140
Now that the service exists,

3
00:00:06,140 --> 00:00:10,080
we can move the data from
the individual routes into the service.

4
00:00:10,080 --> 00:00:12,710
The instructions say to put
everything in a bricks property, so

5
00:00:12,710 --> 00:00:13,810
I'll just move everything over.

6
00:00:15,560 --> 00:00:18,200
So here's the data from
the bricks a bunch store.

7
00:00:18,200 --> 00:00:21,105
And the blue and green brick data
is from the lots of brick store.

8
00:00:21,105 --> 00:00:23,790
We're actually almost
all done with this quiz.

9
00:00:23,790 --> 00:00:26,049
Now that the warehouse
manages all of the data,

10
00:00:26,049 --> 00:00:29,221
each route just needs to be updated
to retrieve the data from here.

11
00:00:32,289 --> 00:00:35,590
I've injected the brick warehouse
service into both route files, and

12
00:00:35,590 --> 00:00:37,470
I'm referencing it as just warehouse.

13
00:00:39,550 --> 00:00:41,790
Now instead of having all
of this hard coded data,

14
00:00:41,790 --> 00:00:43,280
let's just get it from the warehouse.

15
00:00:44,380 --> 00:00:45,580
In the bricks a bunch route,

16
00:00:45,580 --> 00:00:48,599
I'm calling this method, that I need
to create on the warehouse, service.

17
00:00:51,220 --> 00:00:53,650
This just returns the red
bricks from the list of bricks.

18
00:00:54,710 --> 00:00:58,210
I'm making this method on the warehouse
instead of accessing the red bricks

19
00:00:58,210 --> 00:01:02,950
directly, because we want our warehouse
to be in charge of handing out the data.

20
00:01:02,950 --> 00:01:06,320
This way, if the service needs to record
whenever the red bricks are accessed,

21
00:01:06,320 --> 00:01:08,010
we can just add a line to this function.

22
00:01:09,090 --> 00:01:10,840
It's a separation of concerns.

23
00:01:10,840 --> 00:01:15,020
The service is in charge of all the data
and the route just asks the service for

24
00:01:15,020 --> 00:01:16,760
data, instead of accessing it directly.

25
00:01:17,880 --> 00:01:20,050
Let's do the same thing with
the lots of bricks route.

26
00:01:21,060 --> 00:01:24,460
Just like with bricks a bunch, I've
replaced all the hard coded data with

27
00:01:24,460 --> 00:01:26,940
a call to a method on the warehouse.

28
00:01:26,940 --> 00:01:28,540
This function needs to
be created over there.

29
00:01:29,750 --> 00:01:32,770
So all this function does is return
the complete list of bricks.

30
00:01:33,890 --> 00:01:37,440
So, visually speaking,
our app is the same to customers.

31
00:01:37,440 --> 00:01:40,770
But architecturally it's more organized,
with a service being in charge of

32
00:01:40,770 --> 00:01:43,240
all of the data, and the routes
are just accessing that service.

33
00:01:44,250 --> 00:01:46,790
Now go forth and make your apps
more organized with services.
