1
00:00:00,370 --> 00:00:03,580
Hello, I've been doing a lot of research
into what might have gone wrong

2
00:00:03,580 --> 00:00:05,660
along with the thoughts
from the developer.

3
00:00:05,660 --> 00:00:08,710
>> Glad to hear it,
what could we have done differently?

4
00:00:08,710 --> 00:00:11,540
>> It's a bit hard to describe without
a picture here, let me show you.

5
00:00:12,780 --> 00:00:16,670
>> Firebase has the ability to
nest data up to 32 levels deep.

6
00:00:16,670 --> 00:00:18,140
But don't let that tempt you,

7
00:00:18,140 --> 00:00:22,760
generally speaking nesting data is
a bad idea in a NoSQL database.

8
00:00:22,760 --> 00:00:26,610
When you create a data structure with
deep nesting, it hurts performance and

9
00:00:26,610 --> 00:00:29,390
can result in a disastrous design.

10
00:00:29,390 --> 00:00:32,420
This is because in Firebase
when you read a data node,

11
00:00:32,420 --> 00:00:35,530
you also retrieve all of
the children of that node.

12
00:00:35,530 --> 00:00:39,200
And remember, Firebase is designed
to be a real time solution for

13
00:00:39,200 --> 00:00:40,780
mobile applications.

14
00:00:40,780 --> 00:00:42,280
Taking something like 20 seconds or

15
00:00:42,280 --> 00:00:46,100
longer to read in data
doesn't qualify as real time.

16
00:00:46,100 --> 00:00:47,850
So what's the solution
to this challenge?

17
00:00:47,850 --> 00:00:50,940
The solution is to
denormalize your data,

18
00:00:50,940 --> 00:00:54,060
which is basically the process of
ignoring how objects might normally be

19
00:00:54,060 --> 00:00:58,710
nested, such as having all items
contained within a shopping list.

20
00:00:58,710 --> 00:01:02,320
And instead focusing on
adding some extra data and

21
00:01:02,320 --> 00:01:07,780
or regrouping data to make getting the
exact data you need for your app simple.

22
00:01:07,780 --> 00:01:12,220
This results in queries that have the
needed information to return results but

23
00:01:12,220 --> 00:01:14,820
not at the expense of performance.

24
00:01:14,820 --> 00:01:18,730
So let's look at a before and
after example in Firebase.

25
00:01:18,730 --> 00:01:23,710
In shopping lists ++heyday,
there was an internal chat application.

26
00:01:23,710 --> 00:01:26,790
That's all gone now, but
we can still look at the schema.

27
00:01:26,790 --> 00:01:30,320
First, let's look at
the anti-pattern for this chat app.

28
00:01:30,320 --> 00:01:33,820
The chat app had rooms,
users, and messages.

29
00:01:33,820 --> 00:01:38,154
Let's say the main screen of the app was
a list of rooms that the user can enter

30
00:01:38,154 --> 00:01:38,841
to chat in.

31
00:01:38,841 --> 00:01:43,057
For this, we need to grab a list of
chatroom names from the database,

32
00:01:43,057 --> 00:01:46,201
which would involve us
getting the data from here.

33
00:01:46,201 --> 00:01:50,145
In the first example, we see that
in order to list the names of rooms

34
00:01:50,145 --> 00:01:54,030
requires the entire room's tree
to be downloaded to the client.

35
00:01:55,040 --> 00:01:57,920
We have all this extra
data we don't want.

36
00:01:57,920 --> 00:02:01,640
Imagine how much data would have to be
queried if you had a thousand rooms

37
00:02:01,640 --> 00:02:02,810
worth of data.

38
00:02:02,810 --> 00:02:04,860
Let's look at a denormalized example.

39
00:02:04,860 --> 00:02:08,880
Here data is split into separate paths,
which in turn allow for the information

40
00:02:08,880 --> 00:02:12,990
to be downloaded in segments related
to what the app actually needs.

41
00:02:14,020 --> 00:02:17,730
The list of users is
downloaded as needed.

42
00:02:17,730 --> 00:02:19,990
Messages are fetched separately.

43
00:02:19,990 --> 00:02:22,520
And this allows the application
to remain performant.
