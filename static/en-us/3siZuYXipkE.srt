1
00:00:00,540 --> 00:00:03,570
Google strongly recommends
using a hybridized auth flow

2
00:00:03,570 --> 00:00:06,920
in order to take advantage of all
the benefits of a Google Plus sign in.

3
00:00:06,920 --> 00:00:08,610
Let's see how this flow works.

4
00:00:08,610 --> 00:00:10,940
A user opts to log in with
the Google account, and

5
00:00:10,940 --> 00:00:14,750
is redirected to a Google Portal for
granting access to your application.

6
00:00:14,750 --> 00:00:16,990
The user authorizes your
app on the client side

7
00:00:16,990 --> 00:00:19,270
using the JavaScript API client.

8
00:00:19,270 --> 00:00:22,740
The Google server sends a one-time
code along with an access token

9
00:00:22,740 --> 00:00:23,890
back to the client.

10
00:00:23,890 --> 00:00:27,840
The client then sends this same special
one-time code back to your server.

11
00:00:27,840 --> 00:00:31,740
Then your server relays this one-time
code back to the Google API server.

12
00:00:31,740 --> 00:00:35,930
And in return, your server's given an
access token from Google, enabling it to

13
00:00:35,930 --> 00:00:40,230
make its own API calls, which can be
done even when the user is offline.

14
00:00:40,230 --> 00:00:44,860
This one-time code flow has a security
advantage over a pure server side flow.

15
00:00:44,860 --> 00:00:47,110
This is because, with one-time codes,

16
00:00:47,110 --> 00:00:50,770
Google provides tokens directly to your
server, without any intermediaries.

17
00:00:50,770 --> 00:00:52,840
Even if a one time code is discovered,

18
00:00:52,840 --> 00:00:55,950
it is extremely hard to use without
your application's client secret.

19
00:00:57,390 --> 00:01:01,140
A client secret is a special code Google
issues to verify your application.

20
00:01:02,230 --> 00:01:05,160
You will make a client secret in your
first app in just a few minutes.
