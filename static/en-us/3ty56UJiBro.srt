1
00:00:00,000 --> 00:00:05,000
Now with that in mind, I've given you the template of most of the the fill_in function,

2
00:00:05,000 --> 00:00:08,000
and I want you to just put in two missing pieces.

3
00:00:08,000 --> 00:00:11,000
What does the fill_in function do?

4
00:00:11,000 --> 00:00:16,000
First, it finds all the letters in the formula, and I want you to fill in that piece.

5
00:00:16,000 --> 00:00:22,000
Then it iterates a collection called the digits, a permutation of the digits

6
00:00:22,000 --> 00:00:29,000
taken from all the digits n at a time, and you have to fill in the right value of n.

7
00:00:29,000 --> 00:00:33,000
Then it builds a table from taking the letters.

8
00:00:33,000 --> 00:00:38,000
That means you want to make sure that the letters up here are represented

9
00:00:38,000 --> 00:00:42,000
as a string and not as some other type of collection.

10
00:00:42,000 --> 00:00:45,000
It makes a translation table from the letters

11
00:00:45,000 --> 00:00:50,000
and a string of all the digits that we got out of the permutations.

12
00:00:50,000 --> 00:00:54,000
The function itertools.permutations returns a tuple of results,

13
00:00:54,000 --> 00:00:58,000
and so we want to join together that tuple into one big string,

14
00:00:58,000 --> 00:01:03,000
make up the translation table, and then call formula with the translate method

15
00:01:03,000 --> 00:01:11,000
with that table to translate all the letters into the appropriate digits and yield that result.

16
00:01:11,000 --> 00:01:16,000
In other words, fill_in is a generator function not a function that returns a list of results.

17
00:01:16,000 --> 00:01:20,000
Why did I do it that way? Well, because you might get lucky.

18
00:01:20,000 --> 00:01:23,000
It might be that the very first formula you try or one of the few

19
00:01:23,000 --> 00:01:26,000
first formulas you try is the correct one.

20
00:01:26,000 --> 00:01:32,000
If I do for f in fill_in a formula, I ask for the first formula, and if it is valid,

21
00:01:32,000 --> 00:01:34,000
then I want to return it right away.

22
00:01:34,000 --> 00:01:38,000
I don't want to waste time calculating all the other possible fill_ins.

23
00:01:38,000 --> 00:01:40,000
That's why a generator makes more sense here.

24
00:01:40,000 --> 99:59:59,999
See if you can fill in these two missing pieces.
