1
00:00:00,160 --> 00:00:03,230
Now that I've explained the theory of k-means clustering to you,

2
00:00:03,230 --> 00:00:07,500
I'm going to show you how to use the scikit-learn implementation to deploy it

3
00:00:07,500 --> 00:00:08,780
in your own studies.

4
00:00:08,780 --> 00:00:10,340
So I start over here at Google, and

5
00:00:10,340 --> 00:00:13,810
I find that there's a whole page on clustering in scikit-learn.

6
00:00:13,810 --> 00:00:15,890
The first thing that I notice when I get to this page is

7
00:00:15,890 --> 00:00:20,020
that there are many types of clustering, besides just k-means clustering.

8
00:00:20,020 --> 00:00:23,510
So all of these different columns right here are different types of clustering.

9
00:00:23,510 --> 00:00:27,720
We won't go into all of these, instead I want to use this page to navigate to

10
00:00:27,720 --> 00:00:30,620
the k-means documentation that you can get a little bit of a better idea of

11
00:00:30,620 --> 00:00:32,509
how this is handled in scikit-learn.

12
00:00:32,509 --> 00:00:35,540
So here's a list of all of the different clustering methods that I have.

13
00:00:35,540 --> 00:00:39,320
And here the first item on the list we see is k-means, and

14
00:00:39,320 --> 00:00:41,350
some summary information about the algorithm.

15
00:00:41,350 --> 00:00:43,725
And so one of the parameters that you have to define for

16
00:00:43,725 --> 00:00:45,760
k-means is the number of clusters.

17
00:00:45,760 --> 00:00:50,330
Remember, we had to say at the outset how many clusters we want to look for and

18
00:00:50,330 --> 00:00:53,225
this is one of the things that can be most challenging actually about using

19
00:00:53,225 --> 00:00:55,870
k-means is deciding how many clusters you want to try.

20
00:00:57,170 --> 00:01:00,220
Then he gives us some information about the scalability, which basically tells

21
00:01:00,220 --> 00:01:02,700
us how the algorithm performs as you start to have lots and

22
00:01:02,700 --> 00:01:04,928
lots of data, or lots of clusters.

23
00:01:04,928 --> 00:01:08,390
A use case, which gives us a little bit of information that this is good for

24
00:01:08,390 --> 00:01:11,710
general purpose when you have clusters that have even number of

25
00:01:11,710 --> 00:01:13,510
points in them and so on.

26
00:01:13,510 --> 00:01:16,660
And, last, that the way that k-means clustering works is based on

27
00:01:16,660 --> 00:01:18,480
the distances between the points.

28
00:01:18,480 --> 00:01:21,720
So, very consistent with what we've seen so far.

29
00:01:21,720 --> 00:01:23,320
Let's dig in a little bit deeper.

30
00:01:23,320 --> 00:01:25,790
Now we're at the k-means documentation page.

31
00:01:25,790 --> 00:01:28,460
And there are three parameters in particular that I want to call your

32
00:01:28,460 --> 00:01:29,470
attention do.

33
00:01:29,470 --> 00:01:32,410
First and most important one is n_clusters.

34
00:01:32,410 --> 00:01:35,270
The default value for n_clusters is eight.

35
00:01:35,270 --> 00:01:38,970
But of course we know that the number of clusters in the algorithm is something

36
00:01:38,970 --> 00:01:42,790
that you need to set on your own based on what you think makes sense.

37
00:01:42,790 --> 00:01:45,260
This might even be a parameter that you play around with.

38
00:01:45,260 --> 00:01:47,560
So you should always be thinking about whether you actually want to

39
00:01:47,560 --> 00:01:50,910
use this default value, or if you want to change it to something else.

40
00:01:50,910 --> 00:01:53,170
I can guarantee you that you're mostly going to want to change it to

41
00:01:53,170 --> 00:01:54,320
something else.

42
00:01:54,320 --> 00:01:57,990
The second parameter that I want to call your attention to is max_iter=300.

43
00:01:57,990 --> 00:02:01,620
Remember that when we're running k-means clustering we

44
00:02:01,620 --> 00:02:05,320
have an iteration that we go through as we're finding the clusters,

45
00:02:05,320 --> 00:02:10,500
where we assign each point to a centroid and then we move the centroid.

46
00:02:10,500 --> 00:02:12,090
Then we assign the points again.

47
00:02:12,090 --> 00:02:13,770
We move the centroids again.

48
00:02:13,770 --> 00:02:17,020
And each one of those assign and move, assign and

49
00:02:17,020 --> 00:02:20,078
move steps is an iteration of the algorithm.

50
00:02:20,078 --> 00:02:23,660
And so max_iter actually says how many iterations of

51
00:02:23,660 --> 00:02:25,995
the algorithm do you want it to go through.

52
00:02:25,995 --> 00:02:29,440
300 will usually be a very reasonable value for you.

53
00:02:29,440 --> 00:02:32,120
In fact most of the time I would guess that it's going to

54
00:02:32,120 --> 00:02:35,700
terminate before it gets to this maximum number.

55
00:02:35,700 --> 00:02:38,690
But if you want to have a finer level of control over the algorithm and

56
00:02:38,690 --> 00:02:41,680
how many times it goes through that iteration process this is

57
00:02:41,680 --> 00:02:42,520
the parameter that you want.

58
00:02:42,520 --> 00:02:45,280
And then the last parameter that I'll mention,

59
00:02:45,280 --> 00:02:46,840
another one that's very important.

60
00:02:46,840 --> 00:02:50,240
Is the number of different initializations that you give it.

61
00:02:50,240 --> 00:02:53,240
Remember we said that k-means clustering has this challenge,

62
00:02:53,240 --> 00:02:55,800
that depending on exactly what the initial conditions are,

63
00:02:55,800 --> 00:02:58,220
you can sometimes end up with different clusterings.

64
00:02:58,220 --> 00:03:01,320
And so then you want to repeat the algorithm several times so

65
00:03:01,320 --> 00:03:05,250
that any one of those clusterings might be wrong, but in general,

66
00:03:05,250 --> 00:03:08,850
the ensemble of all the clusterings will give you something that makes sense.

67
00:03:08,850 --> 00:03:10,320
That's what this parameter controls.

68
00:03:10,320 --> 00:03:13,470
It's basically how many times does it initialize the algorithm,

69
00:03:13,470 --> 00:03:16,320
how many times does it come up with clusters.

70
00:03:16,320 --> 00:03:19,360
You can see that by default it goes through at ten times.

71
00:03:19,360 --> 00:03:23,750
If you think for some reason that your clustering might be particularly prone to

72
00:03:23,750 --> 00:03:25,050
bad initializations or

73
00:03:25,050 --> 00:03:29,910
challenging initializations, then this is the parameter that you want to change.

74
00:03:29,910 --> 00:03:33,570
Maybe bump the number of initializations up to a higher number.

75
00:03:33,570 --> 00:03:36,400
But again, just to reiterate, of all those parameters,

76
00:03:36,400 --> 00:03:39,580
number of clusters is definitely the one that's most important.

77
00:03:39,580 --> 00:03:41,610
And that you should be playing around with and

78
00:03:41,610 --> 00:03:43,570
thinking really hard about the most.
