1
00:00:00,070 --> 00:00:05,400
This figure shows the overall processing
of a message to produce a hash value.

2
00:00:05,400 --> 00:00:10,340
The first step is padding so
that the message is a multiple

3
00:00:10,340 --> 00:00:16,170
of 1,024 bits because the message is
going to be processed block by block.

4
00:00:16,170 --> 00:00:19,980
And each block has 1,024 bits.

5
00:00:19,980 --> 00:00:23,720
The padding bits are appended to
the last block of the message.

6
00:00:23,720 --> 00:00:28,440
First we leave the last 128
bits to store the length

7
00:00:28,440 --> 00:00:32,259
of the original message,
that is the length before the padding.

8
00:00:32,259 --> 00:00:37,500
Then for the space between the original
message and the last 128 bits

9
00:00:37,500 --> 00:00:41,988
we add one and a number of zeros
necessary to fill up the space.

10
00:00:41,988 --> 00:00:44,226
And that's how padding works.

11
00:00:44,226 --> 00:00:48,881
After padding, then the message
is processed one block at a time.

12
00:00:48,881 --> 00:00:52,012
Again, each block has 1,024 bits.

13
00:00:52,012 --> 00:00:56,657
The logic of per block processing
is described in the next slide.

14
00:00:56,657 --> 00:01:01,643
The result of processing the current
block is the input to the processing

15
00:01:01,643 --> 00:01:03,470
of the next block.

16
00:01:03,470 --> 00:01:06,070
That is when processing
the second block,

17
00:01:06,070 --> 00:01:09,700
the input includes not only
the second message block but

18
00:01:09,700 --> 00:01:13,190
also the output of the processing
of the first block.

19
00:01:13,190 --> 00:01:17,170
And for the first block,
the input includes the Iv.

20
00:01:17,170 --> 00:01:22,610
The Iv is a 512 bit value,
hard coded in the algorithm.

21
00:01:22,610 --> 00:01:26,270
Again the message is processed
one block at a time.

22
00:01:26,270 --> 00:01:30,030
At each block the input incurs
the output of the processing

23
00:01:30,030 --> 00:01:31,370
of the previous block.

24
00:01:31,370 --> 00:01:34,530
And the result of the processing
of the last block

25
00:01:34,530 --> 00:01:37,370
is the hash of the entire message.

26
00:01:37,370 --> 00:01:40,650
Now let's take a look at
the processing of a message block.

27
00:01:40,650 --> 00:01:43,780
The processing involves 80 rounds.

28
00:01:43,780 --> 00:01:47,150
The input includes not only
the current message block but

29
00:01:47,150 --> 00:01:50,570
also the result of the processing
of the previous block.

30
00:01:50,570 --> 00:01:54,600
And the result of the processing of
the current block will be the input

31
00:01:54,600 --> 00:01:56,630
to the processing of the next block.

32
00:01:56,630 --> 00:02:01,920
The result from the processing of the
previous block is a 512 bit value, and

33
00:02:01,920 --> 00:02:05,610
it is divided into 8 64 bit values.

34
00:02:05,610 --> 00:02:09,240
And they are a, b, c, d, e, f, g, and h.

35
00:02:09,240 --> 00:02:12,590
Again, the processing
involves 80 rounds and

36
00:02:12,590 --> 00:02:17,080
each round the input includes
the result from the previous round,

37
00:02:17,080 --> 00:02:22,060
some constant k, and some words derived
from the current message block.

38
00:02:22,060 --> 00:02:25,890
The constants here provide
randomized values and

39
00:02:25,890 --> 00:02:30,760
the purpose is to eliminate any
logravities with the input data.

40
00:02:30,760 --> 00:02:35,086
The operations at each round
include circular shifts and

41
00:02:35,086 --> 00:02:39,964
primitive pulling functions
based on and, or, not and x, or.

42
00:02:39,964 --> 00:02:44,400
The output of the last round is added
to the input to the first round.

43
00:02:44,400 --> 00:02:48,050
And the result will be used in the
processing of the next message block.
