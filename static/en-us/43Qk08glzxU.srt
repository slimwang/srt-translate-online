1
00:00:00,270 --> 00:00:01,110
Up until this point,

2
00:00:01,110 --> 00:00:03,690
we've simply been checking if
the error coming back is nil.

3
00:00:03,690 --> 00:00:06,610
But we can actually do more informative
robust checks to handle errors

4
00:00:06,610 --> 00:00:09,840
we may not have considered, and
to give ourselves better debug info.

5
00:00:09,840 --> 00:00:12,440
Let's start by looking at this
function here at the top.

6
00:00:12,440 --> 00:00:13,960
This function, display error,

7
00:00:13,960 --> 00:00:17,290
we've created to print out the errors
that we find, and to re-enable the UI.

8
00:00:17,290 --> 00:00:19,080
So this looks like something
we can use in all of our

9
00:00:19,080 --> 00:00:21,150
other error checks, awesome.

10
00:00:21,150 --> 00:00:23,480
Now let's go back to
the first error we check.

11
00:00:23,480 --> 00:00:27,660
It's this, the error value that gets
returned from our network request.

12
00:00:27,660 --> 00:00:30,180
Previously, we were checking if
this value equals no by using

13
00:00:30,180 --> 00:00:31,110
an if statement.

14
00:00:31,110 --> 00:00:33,240
We're now going to use a guard
statement to use this check,

15
00:00:33,240 --> 00:00:35,520
and we'll do this as well with
the other checks we're making,

16
00:00:35,520 --> 00:00:37,840
in addition to some new
errors we're checking for.

17
00:00:37,840 --> 00:00:39,580
We'll explain guard
statements a little bit, but

18
00:00:39,580 --> 00:00:41,850
if you're completely unfamiliar with
them you should definitely check out

19
00:00:41,850 --> 00:00:43,790
the guard statement swift syntax lesson.

20
00:00:43,790 --> 00:00:46,410
To explain guard statements let's look
at what we're doing with this data

21
00:00:46,410 --> 00:00:47,620
that get's returned.

22
00:00:47,620 --> 00:00:50,496
If you recall from before,
we were using optional binding.

23
00:00:50,496 --> 00:00:53,930
That's the if let's it syntax to get
our data out of optional form and

24
00:00:53,930 --> 00:00:55,050
make sure it exists.

25
00:00:55,050 --> 00:00:57,820
We're actually still checking that but
in a slightly different way.

26
00:00:57,820 --> 00:01:00,670
By using the guard statement we're
actually now only checking if the data

27
00:01:00,670 --> 00:01:01,650
doesn't exist.

28
00:01:01,650 --> 00:01:05,790
And using our display error function
to display an error if that's the case.

29
00:01:05,790 --> 00:01:08,100
If the data does exist,
we get to move on and

30
00:01:08,100 --> 00:01:09,990
the data is no longer an optional form.

31
00:01:09,990 --> 00:01:11,430
This is nice because it's quick and

32
00:01:11,430 --> 00:01:14,630
it allows us to avoid those
large nested if statements.

33
00:01:14,630 --> 00:01:17,140
You can see that down here we have
made the same small adjustment for

34
00:01:17,140 --> 00:01:19,980
photos dictionary and image URL string.

35
00:01:19,980 --> 00:01:22,600
It's a neat, effective alternative
to the if statements we have there

36
00:01:22,600 --> 00:01:23,650
previously.

37
00:01:23,650 --> 00:01:26,800
Now back up here let's put back in
the check to see if error equals nill,

38
00:01:26,800 --> 00:01:28,780
this time using a guard statement.

39
00:01:28,780 --> 00:01:31,790
Now you'll notice with all of these the
guard statement keeps the conditions and

40
00:01:31,790 --> 00:01:34,310
associative errors to
display in one place.

41
00:01:34,310 --> 00:01:36,290
Which ends up making
our code a lot cleaner.

42
00:01:36,290 --> 00:01:39,000
Lastly, let's just add in
a few more error checks,

43
00:01:39,000 --> 00:01:41,590
did we get a successful HTTP response?

44
00:01:41,590 --> 00:01:45,350
This statement checks to make sure our
status code is in the 200s range or

45
00:01:45,350 --> 00:01:46,540
the success range.

46
00:01:47,550 --> 00:01:51,290
Now let's check down here after
we've used NSJSONSerialization

47
00:01:51,290 --> 00:01:54,370
to see what we're saving in parse
result is actually okay and usable.

48
00:01:55,910 --> 00:01:58,800
Great, we're responsibly checking for
errors.

49
00:01:58,800 --> 00:02:01,620
Note that we can actually combine many
of these guard statements together,

50
00:02:01,620 --> 00:02:04,200
but we've separated each into its own
statement to make it more clear what

51
00:02:04,200 --> 00:02:05,610
their purposes are.

52
00:02:05,610 --> 00:02:07,920
If you feel comfortable with what
each of these statements does,

53
00:02:07,920 --> 00:02:09,440
you can feel free to
combine them yourself.
