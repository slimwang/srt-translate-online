1
00:00:00,000 --> 00:00:04,000
I'd like to show you some value function after convergence

2
00:00:04,000 --> 00:00:07,000
and the corresponding policies.

3
00:00:07,000 --> 00:00:11,000
If we assume gamma = 1 and our cost for the non-absorbing state

4
00:00:11,000 --> 00:00:15,000
equals -3, as before, we get the following approximate value function

5
00:00:15,000 --> 00:00:21,000
after convergence, and the corresponding policy looks as follows.

6
00:00:21,000 --> 00:00:25,000
Up here we go right until we hit the absorbing state.

7
00:00:25,000 --> 00:00:27,000
Over here we prefer to go north.

8
00:00:27,000 --> 00:00:31,000
Here we go left, and here we go north again.

9
00:00:31,000 --> 00:00:33,000
I left the policy open for the absorbing states

10
00:00:33,000 --> 00:00:36,000
because there's no action to be chosen here.

11
00:00:36,000 --> 00:00:39,000
This is a situation where

12
00:00:39,000 --> 00:00:42,000
the risk of falling into the -100 is balanced by

13
00:00:42,000 --> 00:00:45,000
the time spent going around.

14
00:00:45,000 --> 00:00:48,000
We have an action over here in this visible state here

15
00:00:48,000 --> 00:00:52,000
that risks the 10% chance of falling into the -100.

16
00:00:52,000 --> 00:00:55,000
But that's preferable under the cost model of -3

17
00:00:55,000 --> 00:00:58,000
to the action of going south.

18
00:00:58,000 --> 00:01:02,000
Now, this all changes if we assume a cost of 0

19
00:01:02,000 --> 00:01:05,000
for all the states over here, in which case,

20
00:01:05,000 --> 00:01:09,000
the value function after convergence looks interesting.

21
00:01:09,000 --> 00:01:13,000
And with some thought, you realize it's exactly the right one.

22
00:01:13,000 --> 00:01:16,000
Each value is exactly 100,

23
00:01:16,000 --> 00:01:18,000
and the reason is with a cost of 0,

24
00:01:18,000 --> 00:01:21,000
it doesn't matter how long we move around.

25
00:01:21,000 --> 00:01:24,000
Eventually we can guarantee in this case we reach the 100,

26
00:01:24,000 --> 00:01:28,000
therefore each value after backups will become 100.

27
00:01:28,000 --> 00:01:32,000
The corresponding policy is the one we discussed before.

28
00:01:32,000 --> 00:01:35,000
And the crucial thing here is that for this state,

29
00:01:35,000 --> 00:01:38,000
we go south, if you're willing to wait the time.

30
00:01:38,000 --> 00:01:40,000
For this state over here, we go west,

31
00:01:40,000 --> 00:01:42,000
willing to wait the time so as to avoid

32
00:01:42,000 --> 00:01:44,000
falling into the -100.

33
00:01:44,000 --> 00:01:46,000
And all the other states resolve

34
00:01:46,000 --> 00:01:49,000
exactly as you would expect them to resolve

35
00:01:49,000 --> 00:01:52,000
as shown over here.

36
00:01:52,000 --> 00:01:55,000
If we set the costs to -200,

37
00:01:55,000 --> 00:01:58,000
so each step itself is even more expensive

38
00:01:58,000 --> 00:02:02,000
then falling into this ditch over here,

39
00:02:02,000 --> 00:02:05,000
we get a value function that's strongly negative everywhere

40
00:02:05,000 --> 00:02:08,000
with this being the most negative state.

41
00:02:08,000 --> 00:02:11,000
But more interesting is the policy.

42
00:02:11,000 --> 00:02:14,000
This is a situation where our agent tries to end the game

43
00:02:14,000 --> 00:02:18,000
as fast as possible so as not to endure the penalty of -200.

44
00:02:18,000 --> 00:02:21,000
And even over here where it jumps itself into the -100's

45
00:02:21,000 --> 00:02:25,000
it's still better than going north and taking the excess of 200 as a penalty

46
00:02:25,000 --> 00:02:27,000
and then leave the +100.

47
00:02:27,000 --> 00:02:30,000
Similarly, over here we go straight north,

48
00:02:30,000 --> 00:02:32,000
and over here we go as fast as possible

49
00:02:32,000 --> 00:02:35,000
to the state over here.

50
00:02:35,000 --> 00:02:37,000
Now, this is an extreme case.

51
00:02:37,000 --> 00:02:39,000
I don't know why it would make sense to set a penalty for life

52
00:02:39,000 --> 00:02:45,000
that is so negative that even negative death is worse than living,

53
00:02:45,000 --> 99:59:59,999
but certainly that's the result of running value iteration in this extreme case.
