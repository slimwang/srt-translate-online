1
00:00:00,130 --> 00:00:04,140
So your app's now in the state that the saveProfile method

2
00:00:04,140 --> 00:00:06,490
knows that when it's called, it should be passed data that

3
00:00:06,490 --> 00:00:09,910
conforms to the fields to find in the profile form class,

4
00:00:09,910 --> 00:00:12,620
which in practical terms means that the input data can include

5
00:00:12,620 --> 00:00:16,820
display name and t-shirt size. If it includes anything else, those

6
00:00:16,820 --> 00:00:20,080
fields will be ignored. However, our app wants to use the

7
00:00:20,080 --> 00:00:23,180
email. And so we'll need to get the email and we'll

8
00:00:23,180 --> 00:00:25,880
do that by getting the email of the logged in user.

9
00:00:25,880 --> 00:00:29,260
This of course means the user must be logged in.

10
00:00:29,260 --> 00:00:32,320
So next we need to update saveProfile to take a

11
00:00:32,320 --> 00:00:35,250
user input argument and to throw an exception if the

12
00:00:35,250 --> 00:00:37,900
user isn't logged in. In the saveProfile method you'll be

13
00:00:37,900 --> 00:00:42,360
adding a user argument as the first argument. This means

14
00:00:42,360 --> 00:00:44,880
that when the saveProfile method is called, the user will

15
00:00:44,880 --> 00:00:47,960
be passed to it automatically. If the user isn't locked

16
00:00:47,960 --> 00:00:50,910
in, then the user argument's going to be null. It's really

17
00:00:50,910 --> 00:00:53,420
easy to get the user, all you have to do

18
00:00:53,420 --> 00:00:56,850
is to add this argument to your endpoints method. So even

19
00:00:56,850 --> 00:01:00,360
though the user gets passed in, there's no automatic check that

20
00:01:00,360 --> 00:01:02,680
the user's logged in. So we need to do that check

21
00:01:02,680 --> 00:01:05,670
ourselves. So you can add the code to check if

22
00:01:05,670 --> 00:01:08,520
the user is null and if it is, to throw an

23
00:01:08,520 --> 00:01:13,300
UnauthorizedException. We also need to update our code to use the

24
00:01:13,300 --> 00:01:16,510
email and the user ID. We can get the email and

25
00:01:16,510 --> 00:01:19,940
the user ID by calling methods on the

26
00:01:19,940 --> 00:01:24,320
user. The user ID uniquely identifies the user, and

27
00:01:24,320 --> 00:01:28,580
the email of course is their email which is going to be very handy when the app

28
00:01:28,580 --> 00:01:31,390
wants to send emails to them. The method

29
00:01:31,390 --> 00:01:34,560
for getting the user ID and the email are

30
00:01:34,560 --> 00:01:39,100
fairly intuitive. Get email. Get user ID. Wouldn't

31
00:01:39,100 --> 00:01:41,600
be too hard to guess those. We already have

32
00:01:41,600 --> 00:01:46,930
the code for getting the display name out of the profile form. But what

33
00:01:46,930 --> 00:01:51,520
if the user doesn't provide a display name? We can write code to set a

34
00:01:51,520 --> 00:01:55,220
default display name based on their email.

35
00:01:55,220 --> 00:01:58,310
The ConferenceAPI class already provides a function

36
00:01:58,310 --> 00:02:03,390
extractDefaultDisplayNameFromEmail, which basically gets your name from

37
00:02:03,390 --> 00:02:06,850
your email but leaves off the @domain part.

38
00:02:06,850 --> 00:02:10,570
So for example, if your email is lemoncake@example.com

39
00:02:10,570 --> 00:02:13,587
then the display name simply becomes lemoncake. The server's

40
00:02:13,587 --> 00:02:16,104
pretty easy to just add the code to check

41
00:02:16,104 --> 00:02:18,620
if the displayName is null, and if it is

42
00:02:18,620 --> 00:02:21,443
to call this function, we already wrote the

43
00:02:21,443 --> 00:02:24,720
function for you. Obviously, need to save all your

44
00:02:24,720 --> 00:02:30,360
changes, then redeploy, and see what happens. Now, let's

45
00:02:30,360 --> 00:02:31,980
see what happens when we try out our app

46
00:02:31,980 --> 00:02:34,450
in the APIs Explorer. Just to be sure

47
00:02:34,450 --> 00:02:36,820
you're not logged in, go to the APIs Explorer

48
00:02:36,820 --> 00:02:40,740
in an incognito window in Chrome. Okay, let's

49
00:02:40,740 --> 00:02:46,730
see. Save profile and execute. Oh, now, look. This

50
00:02:46,730 --> 00:02:49,070
method requires you to be authenticated. You may

51
00:02:49,070 --> 00:02:51,540
need to activate the Toggle Bar to authorize your

52
00:02:51,540 --> 00:02:54,710
request using OAuth 2.0. So the API's Explorer

53
00:02:54,710 --> 00:02:57,270
knows that we're not logged and that it requires

54
00:02:57,270 --> 00:03:02,560
a user. So we have to activate it. The only thing our app's doing right now with

55
00:03:02,560 --> 00:03:04,790
user information is getting their email. So it's

56
00:03:04,790 --> 00:03:07,330
asking the user to give permission for the app

57
00:03:07,330 --> 00:03:10,400
to get their email. Now, let's resubmit. Maybe

58
00:03:10,400 --> 00:03:15,853
I'll add some properties. That's teeShirtSize small and we

59
00:03:15,853 --> 00:03:19,160
execute. Now you see that the request went

60
00:03:19,160 --> 00:03:22,270
through. The request, the display name is Knikki and

61
00:03:22,270 --> 00:03:24,420
the t-shirt size is S, which is what

62
00:03:24,420 --> 00:03:28,240
I input. And you'll see the response includes

63
00:03:28,240 --> 00:03:30,860
the display name, the main email, the t-shirt

64
00:03:30,860 --> 00:03:33,940
size, and the user ID. One thing to

65
00:03:33,940 --> 00:03:37,400
notice about running your app on localhost is

66
00:03:37,400 --> 00:03:39,890
that no matter what your real email is,

67
00:03:39,890 --> 00:03:42,715
your email is going to be interpreted as

68
00:03:42,715 --> 00:03:47,650
example@example.com. And if your API doesn't throw an exception,

69
00:03:47,650 --> 00:03:50,470
if the user's not logged in, then the user's going to be set

70
00:03:50,470 --> 00:03:56,330
to test@example.com. And you can if you like, run this again without

71
00:03:56,330 --> 00:04:00,700
providing the display name. Let's execute it. And this time you see

72
00:04:00,700 --> 00:04:05,900
in the response that the display name is inferred from the email.
