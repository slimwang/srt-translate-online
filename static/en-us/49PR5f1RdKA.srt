1
00:00:00,360 --> 00:00:04,840
So, let's see if we know how to
add some prefetch instructions.

2
00:00:04,840 --> 00:00:10,860
Suppose we have a program like this
where i goes from 0 to 1000 and

3
00:00:10,860 --> 00:00:16,056
j goes from 0 to 1000 and
in every iteration of this inner

4
00:00:16,056 --> 00:00:23,030
loop we add to the ith element of
the a array the element of the b matrix.

5
00:00:23,030 --> 00:00:26,410
So what is really happening here, is
that in the first iteration of the outer

6
00:00:26,410 --> 00:00:32,540
loop, we will compute a[0],
then a[1], and so on, and we do that

7
00:00:32,540 --> 00:00:37,470
by basically adding up all the
appropriate elements from the b array.

8
00:00:37,470 --> 00:00:41,220
Let's say that the elements of the a and
b arrays are both

9
00:00:41,220 --> 00:00:45,700
floating point numbers,
that they're each 8 bytes in size.

10
00:00:45,700 --> 00:00:51,860
Let's say that the cache size is 16kB,
fully associative, with LRU replacement.

11
00:00:51,860 --> 00:00:54,850
Let's say that a single
iteration of this inner loop

12
00:00:54,850 --> 00:00:59,390
takes 10 cycles if there are no misses,
and that the miss penalty

13
00:01:03,680 --> 00:01:05,730
is 200 cycles, because the memory
latency is 200 cycles.

14
00:01:05,730 --> 00:01:13,010
The question for you is, if we insert
a prefetch instruction here so

15
00:01:13,010 --> 00:01:18,050
that we can prefetch one of
the next a elements, what should

16
00:01:18,050 --> 00:01:23,790
be the distance here or check this,
if we simply should not be doing this.

17
00:01:23,790 --> 00:01:27,450
Here, for
prefetching elements of B in this loop,

18
00:01:27,450 --> 00:01:31,240
what is the distance at which
we should be prefetching?

19
00:01:31,240 --> 00:01:33,850
Or should we just not be doing this?
