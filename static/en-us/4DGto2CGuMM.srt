1
00:00:00,000 --> 00:00:02,000
One of the cool features of our JavaScript interpreter

2
00:00:02,000 --> 00:00:06,000
is that it supports anonymous or nested functions.

3
00:00:06,000 --> 00:00:10,000
However, these features can be very hard to test, so let's try it out together.

4
00:00:10,000 --> 00:00:13,000
You'll recall this Python example from before

5
00:00:13,000 --> 00:00:19,000
where we had a nested function definition of greeter that we returned,

6
00:00:19,000 --> 00:00:23,000
and the final output of this program would be "hello" "gracie".

7
00:00:23,000 --> 00:00:25,000
I'm going to write this same program in JavaScript.

8
00:00:25,000 --> 00:00:30,000
Aside from some minor syntactic differences, the content is the same.

9
00:00:30,000 --> 00:00:35,000
We make a variable, greeting, initialize to "hola". Variable greeting is "hola".

10
00:00:35,000 --> 00:00:39,000
We're going to define this makegreeter function of 1 argument called greeting,

11
00:00:39,000 --> 00:00:43,000
define the makegreeter function of 1 argument called greeting.

12
00:00:43,000 --> 00:00:45,000
Then we're going to make this sort of nested function greeter

13
00:00:45,000 --> 00:00:51,000
that takes an argument, person, and here the local variable greeter is a function

14
00:00:51,000 --> 00:00:53,000
that takes an argument, person.

15
00:00:53,000 --> 00:00:58,000
So where in Python we used another def, in JavaScript we're using this function keyword.

16
00:00:58,000 --> 00:01:00,000
Argument person is the same.

17
00:01:00,000 --> 00:01:04,000
Instead of print we call write or document.write and we return the greeter.

18
00:01:04,000 --> 00:01:08,000
Sayhello is a variable of makegreeter("hello"),

19
00:01:08,000 --> 00:01:11,000
variable sayhello is the result of calling makegreeter on "hello"

20
00:01:11,000 --> 00:01:13,000
and then we do it at the end.

21
00:01:13,000 --> 00:01:15,000
So the real exciting part is here.

22
00:01:15,000 --> 00:01:22,000
In JavaScript you can use the word function to make a new function anywhere

23
00:01:22,000 --> 00:01:26,000
without really giving it a name, although we assigned it to the variable greeter

24
00:01:26,000 --> 00:01:28,000
almost immediately.

25
00:01:28,000 --> 00:01:32,000
So you can use it at the top level to make a function with a name,

26
00:01:32,000 --> 00:01:34,000
or you can use it lower down.

27
00:01:34,000 --> 00:01:37,000
See, here we just have function and then we're listing the arguments.

28
00:01:37,000 --> 00:01:39,000
We didn't put a name in here.

29
00:01:39,000 --> 00:01:41,000
This is sometimes called an anonymous function

30
00:01:41,000 --> 00:01:43,000
because it doesn't immediately have a name.

31
00:01:43,000 --> 00:01:47,000
So as a quiz, let's add support for those anonymous functions

32
00:01:47,000 --> 00:01:49,000
to our JavaScript interpreter.

33
00:01:49,000 --> 00:01:53,000
I'll write the first part, you fill in the key details.

34
00:01:53,000 --> 00:01:55,000
Anonymous functions are expressions.

35
00:01:55,000 --> 00:01:59,000
We know that since they can come on the right-hand side of something like this.

36
00:01:59,000 --> 00:02:03,000
Anything on the right-hand side of a var or an assignment statement is an expression.

37
00:02:03,000 --> 00:02:05,000
So there are a bunch of different types of expressions--

38
00:02:05,000 --> 00:02:08,000
numbers, strings, binary operators.

39
00:02:08,000 --> 00:02:10,000
Let's just handle the function part for now.

40
00:02:10,000 --> 00:02:14,000
So as a running example, let's say we have a function of 2 variables, x and y,

41
00:02:14,000 --> 00:02:17,000
that's going to return their sum.

42
00:02:17,000 --> 00:02:20,000
The abstract syntax tree we get for that will have function

43
00:02:20,000 --> 00:02:25,000
in this sort of identifier position telling us what this sort of node is,

44
00:02:25,000 --> 00:02:27,000
then it will have a list of the parameters,

45
00:02:27,000 --> 00:02:30,000
and then it will have the body list of statements.

46
00:02:30,000 --> 00:02:35,000
And what I'd like you to do for this quiz is fill in these 4 blanks.

47
00:02:35,000 --> 00:02:37,000
We want to return a particular value--

48
00:02:37,000 --> 00:02:40,000
value corresponding to a function.

49
00:02:40,000 --> 00:02:44,000
This is going to require you to think back to how we treated function definitions

50
00:02:44,000 --> 00:02:47,000
and function calls earlier in our interpreter.

51
00:02:47,000 --> 00:02:53,000
But here's a hint: A function was a for tuple containing the word function at the beginning

52
00:02:53,000 --> 00:02:58,000
and then also listing in some order the body, the environment, and the parameters.

53
00:02:58,000 --> 99:59:59,999
Fill it in.
