1
00:00:00,220 --> 00:00:04,270
One of the most important concepts in programming, is the notion of a Data Type.

2
00:00:04,270 --> 00:00:07,370
Which we also just call a type. You've been using types since your first

3
00:00:07,370 --> 00:00:10,594
programming, so you already know a fair bit about types. We just haven't talked

4
00:00:10,594 --> 00:00:14,150
about it explicitly until now. Understanding types more deeply, will make you a

5
00:00:14,150 --> 00:00:17,300
better programmer, will help you understand more what's going on when your

6
00:00:17,300 --> 00:00:21,390
programs run. It will also get you to the point where you can define your own

7
00:00:21,390 --> 00:00:24,679
data types. And that will be useful for making our search engine kept more

8
00:00:24,679 --> 00:00:27,795
modular, like we just talked about. So first thing I'm going to introduce some

9
00:00:27,795 --> 00:00:32,340
terminology. Everything that you can reference in a Python program is an object.

10
00:00:32,340 --> 00:00:35,147
What is the mean to be over the reference something. Well that means we can give

11
00:00:35,147 --> 00:00:38,625
it a name. There are lots of ways to give things names. You could pass it as a

12
00:00:38,625 --> 00:00:43,635
parameter, you could use it in an assignment. Anything that could be assigned to

13
00:00:43,635 --> 00:00:48,854
a name is an object in Python. Every object has a type. We can think of types as

14
00:00:48,854 --> 00:00:53,012
sets of values, and the type of an object tells us something about what we can

15
00:00:53,012 --> 00:00:56,913
do with it. There is an easy way to explore types in Python, and that's to use

16
00:00:56,913 --> 00:01:01,711
the built-in type operator. The type operator takes any object as its input, and

17
00:01:01,711 --> 00:01:06,810
produces as it's output the type of the input object. Here's an example, so here

18
00:01:06,810 --> 00:01:11,674
we're using type to find the type of the object which is the number 101. That's

19
00:01:11,674 --> 00:01:14,918
an object. We can reference it. We can assign it to a variable. We could pass as

20
00:01:14,918 --> 00:01:19,232
a parameter. So it must have a type and it has type int, which is short for

21
00:01:19,232 --> 00:01:23,802
integer. What you might find a little more surprising. Is we can do the same

22
00:01:23,802 --> 00:01:28,291
thing with functions, so we've defined the function double that takes one input

23
00:01:28,291 --> 00:01:33,240
and returns x plus x. See if you can guess what the type of double is before I

24
00:01:33,240 --> 00:01:36,363
evaluate this. It has type, and its type is function.
