1
00:00:00,210 --> 00:00:01,230
>> Okay, Michael.

2
00:00:01,230 --> 00:00:03,650
>> Okay, so problem one, where you're maximizing the

3
00:00:03,650 --> 00:00:06,970
number of 1s, to represent the optima here, or the

4
00:00:06,970 --> 00:00:10,360
influence of any given bit on the fitness value,

5
00:00:10,360 --> 00:00:14,090
they're all independent. They all just contribute whatever they contribute.

6
00:00:14,090 --> 00:00:16,620
And so I don't see any reason to capture

7
00:00:16,620 --> 00:00:20,030
other dependencies. We're, we're, you know, local information is enough.

8
00:00:20,030 --> 00:00:22,100
Is that, is that enough to say that the answer,

9
00:00:22,100 --> 00:00:24,670
that the one goes in the last box for independent?

10
00:00:24,670 --> 00:00:25,220
>> That's correct.

11
00:00:27,170 --> 00:00:28,654
>> But it's, I guess, I guess what

12
00:00:28,654 --> 00:00:30,615
I don't quite understand is in, in the case

13
00:00:30,615 --> 00:00:32,363
of the, so we want to know, what's the

14
00:00:32,363 --> 00:00:35,675
probability, yeah, it's a funny thing we're representing, right?

15
00:00:35,675 --> 00:00:36,057
>> Yeah.

16
00:00:36,057 --> 00:00:38,811
>> So if we, the, like, the third position, we're saying,

17
00:00:38,811 --> 00:00:41,511
well what's the probability that if this is a 1 that we're

18
00:00:41,511 --> 00:00:44,481
going to be above a certain value, and what's the probability if,

19
00:00:44,481 --> 00:00:47,287
if it's a zero, we're going to be above a certain value.

20
00:00:47,287 --> 00:00:48,060
>> Mm-hm.

21
00:00:48,060 --> 00:00:49,985
>> And that doesn't really exactly capture

22
00:00:49,985 --> 00:00:52,267
the way the fitness function works. But

23
00:00:52,267 --> 00:00:55,207
I guess, oh, I guess because we're drawing from, we're drawing the

24
00:00:55,207 --> 00:00:57,910
rest of the things at random, the rest of the values at random?

25
00:00:57,910 --> 00:00:59,350
>> Mm-hm. Yeah, we are.

26
00:00:59,350 --> 00:01:01,970
>> So is that where the meaning comes from, then?

27
00:01:01,970 --> 00:01:05,948
>> Yeah, think about it this way. Remember, the probability distribution

28
00:01:05,948 --> 00:01:10,264
that we care about, p sub theta, is basically uniform for all

29
00:01:10,264 --> 00:01:14,165
x's such that the fitness value is greater than or equal

30
00:01:14,165 --> 00:01:17,800
to theta. So imagine we start out with theta equal to 0,

31
00:01:17,800 --> 00:01:19,610
let's say, which is the lowest value that you could

32
00:01:19,610 --> 00:01:22,940
get? Well then, what's probability of bit 1 being a 1?

33
00:01:22,940 --> 00:01:23,940
>> Okay

34
00:01:23,940 --> 00:01:26,157
>> For all values greater than or equal to, well, it's 1/2.

35
00:01:26,157 --> 00:01:26,602
>> Okay.

36
00:01:26,602 --> 00:01:30,400
>> Because every single value is okay. And so

37
00:01:30,400 --> 00:01:32,896
in order to get a uniform distribution across n

38
00:01:32,896 --> 00:01:37,320
bits, I can sample each bit independently, uniformly, and

39
00:01:37,320 --> 00:01:40,190
that will give me an overall uniform distribution. Agreed?

40
00:01:40,190 --> 00:01:40,926
>> I do agree with that, yeah.

41
00:01:40,926 --> 00:01:42,917
>> Okay. Now, at the very, very end,

42
00:01:42,917 --> 00:01:47,150
when I have all 1s as the maximum value, that's also easy to represent.

43
00:01:47,150 --> 00:01:49,588
Because the probability, what's the probability of

44
00:01:49,588 --> 00:01:51,775
bit 1 being 1? For the optimum value.

45
00:01:51,775 --> 00:01:52,470
>> 1.

46
00:01:52,470 --> 00:01:54,628
>> Yes, the probability of bit 2 is?

47
00:01:54,628 --> 00:01:55,307
>> 1.

48
00:01:55,307 --> 00:01:57,117
>> And the probability of bit 3?

49
00:01:57,117 --> 00:01:59,530
>> Point, no, 1.

50
00:01:59,530 --> 00:02:02,710
>> Exactly, and they all can be independently represented.

51
00:02:02,710 --> 00:02:05,423
So we can definitely represent the minimum theta value.

52
00:02:05,423 --> 00:02:06,339
>> Streams, yeah.

53
00:02:06,339 --> 00:02:08,070
>> Yeah, so, we can represent the maximum.

54
00:02:08,070 --> 00:02:10,788
The question here is, or at least in terms of, you know, you're

55
00:02:10,788 --> 00:02:14,380
likely to find the answer. The question here is, can this distribution represent

56
00:02:14,380 --> 00:02:17,740
values of theta in between? So imagine theta was, let's say I had

57
00:02:17,740 --> 00:02:23,321
four bits here, like we're doing here. And let's imagine theta was 2.

58
00:02:23,321 --> 00:02:23,903
>> Good.

59
00:02:23,903 --> 00:02:28,355
>> Now, notice that when theta is 2, it's not just the number of

60
00:02:28,355 --> 00:02:33,311
points that will give you exactly 2, it's the ones that will give you

61
00:02:33,311 --> 00:02:34,700
at least 2. 2.

62
00:02:34,700 --> 00:02:38,920
>> Right. And 3, and 4. So how many

63
00:02:38,920 --> 00:02:41,770
different ways are there to get 4? Well, there's only

64
00:02:41,770 --> 00:02:44,650
one way to get a value of 4, and that

65
00:02:44,650 --> 00:02:47,385
is all 1s. How many different ways can you do

66
00:02:47,385 --> 00:02:50,520
3? Well, there's 4 ways to get 3. You

67
00:02:50,520 --> 00:02:51,975
basically have to choose the one that you give as

68
00:02:51,975 --> 00:02:55,420
0, right? And each one of those bits, each one

69
00:02:55,420 --> 00:02:58,320
of these values will be a 1, three quarters of

70
00:02:58,320 --> 00:03:02,260
the time. And how many different ways can you

71
00:03:02,260 --> 00:03:06,740
get 2? Well it's n choose 2, which is, something.

72
00:03:06,740 --> 00:03:07,075
>> 6.

73
00:03:07,075 --> 00:03:11,000
>> 6, so you can actually write all of those out and count

74
00:03:11,000 --> 00:03:14,910
the number of times that each one is a 1. And those are all

75
00:03:14,910 --> 00:03:17,990
your samples, and you just simply estimate it. And you'll end up with a

76
00:03:17,990 --> 00:03:20,938
uniform distribution which will be consistent with

77
00:03:20,938 --> 00:03:23,149
the examples that I just sampled from,

78
00:03:23,149 --> 00:03:27,723
but will probably not exactly capture p sub theta. because it will sometimes be

79
00:03:27,723 --> 00:03:32,960
able to generate with probability greater than 0, say, a value of all 0s.

80
00:03:32,960 --> 00:03:35,440
>> Yes, okay, good. That was what I was concerned about. And

81
00:03:35,440 --> 00:03:38,600
so this is, this is just an approximation, even in the simple case.

82
00:03:38,600 --> 00:03:40,965
>> Right. And so, and that's actually

83
00:03:40,965 --> 00:03:43,970
pretty interesting, right? So, yeah, we know that

84
00:03:43,970 --> 00:03:45,630
the extreme values can be represented by

85
00:03:45,630 --> 00:03:48,220
an independent distribution, but it's not clear that

86
00:03:48,220 --> 00:03:51,250
all the values in between can be represented by

87
00:03:51,250 --> 00:03:53,230
such a simple distribution. But that's always going to be

88
00:03:53,230 --> 00:03:55,700
the case. What you want is a distribution that

89
00:03:55,700 --> 00:04:01,450
will definitely capture the optimum and, or optima, and gives

90
00:04:01,450 --> 00:04:04,090
you a good chance of generating samples that get

91
00:04:04,090 --> 00:04:06,398
you closer to the optimum along the way. So even

92
00:04:06,398 --> 00:04:09,596
though in the case before where theta is 2,

93
00:04:09,596 --> 00:04:13,262
we might still generate examples where you get a fitness

94
00:04:13,262 --> 00:04:17,317
of 0 or 1, you have a high probability if you generate enough

95
00:04:17,317 --> 00:04:22,792
samples of actually getting values of theta greater than 2, 3, or 4, even.

96
00:04:22,792 --> 00:04:23,355
>> Got it.

97
00:04:23,355 --> 00:04:24,047
>> Okay.

98
00:04:24,047 --> 00:04:26,495
>> Alright, so I, so, given that, I think I can do the next

99
00:04:26,495 --> 00:04:28,630
two without too much more difficulty. So,

100
00:04:28,630 --> 00:04:31,030
for number 2 problem 2, maximize the number

101
00:04:31,030 --> 00:04:35,610
of alternations, we pointed out that it's really important to, to know who your,

102
00:04:35,610 --> 00:04:36,930
what your neighbor is, because you want

103
00:04:36,930 --> 00:04:38,360
to be a different value than your neighbor.

104
00:04:38,360 --> 00:04:38,991
>> Mm-hm.

105
00:04:38,991 --> 00:04:42,480
>> And the chain gives you exactly that information without anything extra.

106
00:04:42,480 --> 00:04:42,930
>> Right.

107
00:04:42,930 --> 00:04:44,660
>> So I would put the 2 in the first box.

108
00:04:44,660 --> 00:04:45,930
>> Yep.

109
00:04:45,930 --> 00:04:49,340
>> And finally, well, there's only one box left. So I'd put the 3

110
00:04:49,340 --> 00:04:52,890
in the middle box. But I guess the interesting to, to look at here

111
00:04:52,890 --> 00:04:55,710
is that it is surprisingly appropriate, right?

112
00:04:55,710 --> 00:04:58,070
So, that the coloring problem, it is

113
00:04:58,070 --> 00:05:01,340
specifically saying, well, the, my value depends

114
00:05:01,340 --> 00:05:03,370
on, you know, what's a good value

115
00:05:03,370 --> 00:05:06,130
for me depends on, I guess, several of my neighbors, not just one.

116
00:05:06,130 --> 00:05:07,230
>> Right.

117
00:05:07,230 --> 00:05:08,810
>> But I feel I could, you could capture a

118
00:05:08,810 --> 00:05:13,220
lot of the necessary information by finding a good dependency tree.

119
00:05:13,220 --> 00:05:18,400
>> Right. And it turns out that in practice, as our readers

120
00:05:18,400 --> 00:05:21,700
and listeners will see, from one of the resources that we're making

121
00:05:21,700 --> 00:05:25,320
available to them, that in practice, mimic does very well on problems

122
00:05:25,320 --> 00:05:28,490
like this. Even where you have really complicated graph structures. It tends

123
00:05:28,490 --> 00:05:29,890
to do much better than a lot of the other

124
00:05:29,890 --> 00:05:34,030
randomized optimization problems. And that's because what we've got here

125
00:05:34,030 --> 00:05:36,880
in this graph is structure. And what mimic is trying

126
00:05:36,880 --> 00:05:39,500
to represent, is in fact, structure. In fact, in all

127
00:05:39,500 --> 00:05:42,240
of these cases, well, except for the, the first case.

128
00:05:42,240 --> 00:05:46,250
There's not a single answer often. There are possibly many

129
00:05:46,250 --> 00:05:49,830
answers, but the answers all have in common their relationship

130
00:05:49,830 --> 00:05:53,674
to one, to some underlying structure. So in the maximizing

131
00:05:53,674 --> 00:05:59,498
alternations case, you have 010101 or 101010. These are

132
00:05:59,498 --> 00:06:02,200
two completely different values. In fact, as you pointed out

133
00:06:02,200 --> 00:06:05,890
when I asked you this earlier, they're complimentary. But,

134
00:06:05,890 --> 00:06:08,920
each one has a very simple structure, which is, every

135
00:06:08,920 --> 00:06:11,730
bit is different from its neighbor to the l,

136
00:06:11,730 --> 00:06:13,810
actually both of its neighbors. Every bit is different from

137
00:06:13,810 --> 00:06:17,150
its neighbors. And that doesn't matter what their values are.

138
00:06:17,150 --> 00:06:19,150
Given the value of one of them, it actually completely

139
00:06:19,150 --> 00:06:22,440
determines the value of everything else. And so mimic doesn't

140
00:06:22,440 --> 00:06:24,560
get lost trying to bounce back and forth between this

141
00:06:24,560 --> 00:06:28,580
possible maximum and this possible maximum. Instead, it represents both

142
00:06:28,580 --> 00:06:30,250
of them at the same time. Because the only thing

143
00:06:30,250 --> 00:06:32,810
that matters is the relationships. So, in fact, that gets

144
00:06:32,810 --> 00:06:34,990
us to the last bit of things I wanted to

145
00:06:34,990 --> 00:06:38,090
talk about, which are sort of practical features of mimic

146
00:06:38,090 --> 00:06:39,790
and what we kind of learn by thinking this way.
