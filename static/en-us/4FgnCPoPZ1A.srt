1
00:00:00,205 --> 00:00:02,896
Let's talk about some different techniques for scaling, different approaches

2
00:00:02,896 --> 00:00:05,900
you might take in, in a particular problem. So the

3
00:00:05,900 --> 00:00:08,816
first thing you should think about is optimizing your code.

4
00:00:08,816 --> 00:00:11,610
You know, if, if, if you have the option between

5
00:00:11,610 --> 00:00:16,780
buying a second machine, and figuring out how to have

6
00:00:16,780 --> 00:00:20,080
two machines working together on your website versus making your

7
00:00:20,080 --> 00:00:23,370
code twice as fast. You know, may, maybe it's, maybe

8
00:00:23,370 --> 00:00:25,230
it's easier to optimize your code. You know there are

9
00:00:25,230 --> 00:00:28,520
some trade-offs here. The cost of a machine plus the maintenance

10
00:00:28,520 --> 00:00:30,910
of having multiple machines. That means you need to figure out, you

11
00:00:30,910 --> 00:00:33,250
know, you have to administrate those machines. Make sure they're up,

12
00:00:33,250 --> 00:00:37,200
configure them, make two machines work together, all of that stuff. Versus

13
00:00:37,200 --> 00:00:40,870
cost per developer. That is development time. You know, it takes,

14
00:00:40,870 --> 00:00:43,650
takes some effort to optimize your code. And you know, paying people

15
00:00:43,650 --> 00:00:46,910
to do that or paying yourself or you know, considering the

16
00:00:46,910 --> 00:00:50,240
value of your own time for optimizing code versus adding another machine,

17
00:00:50,240 --> 00:00:51,330
you know, there's a trade-off there.

18
00:00:51,330 --> 00:00:53,060
And that's something you should think about.

19
00:00:53,060 --> 00:00:55,360
At my company, that's something we think a lot about. You know, what does

20
00:00:55,360 --> 00:00:57,880
it cost to pay a developer, and what does it cost just to add

21
00:00:57,880 --> 00:01:00,510
another machine? So, kind of a big trade off there. We're not going to spend

22
00:01:00,510 --> 00:01:04,920
a whole lot of time on this code optimization in this lecture. Because that's

23
00:01:04,920 --> 00:01:07,790
really just learning how to program better. You know, as you get more experience

24
00:01:07,790 --> 00:01:11,880
programming, you'll be able to write better and, and, and tighter code. And it,

25
00:01:11,880 --> 00:01:15,360
you know as you understand how compilers work, you can start getting even more

26
00:01:15,360 --> 00:01:17,790
clever and et cetera, et cetera. So, won't be covering it

27
00:01:17,790 --> 00:01:20,220
in this lecture, but you'll get better at it as, as

28
00:01:20,220 --> 00:01:25,080
you develop as an engineer. Another technique is caching complex operations.

29
00:01:25,080 --> 00:01:27,672
We are going to spend a lot of time on this in

30
00:01:27,672 --> 00:01:29,540
this [LAUGH] lecture so I'm not going to say a whole lot

31
00:01:29,540 --> 00:01:32,920
about it now, but this is the name of the game. Caching.

32
00:01:32,920 --> 00:01:36,640
You can upgrade your machines, which basically means, you know, you're

33
00:01:36,640 --> 00:01:40,460
replacing the machines you're using now with machines that have, more memory,

34
00:01:40,460 --> 00:01:44,120
more disk space, faster CPU. Now this is often a

35
00:01:44,120 --> 00:01:46,690
good option. Sometimes you don't have this option at all if

36
00:01:46,690 --> 00:01:49,390
you're using you know, a shared, shared platform where you don't

37
00:01:49,390 --> 00:01:51,550
have control of the machines. But again, you know, some, some

38
00:01:51,550 --> 00:01:53,830
you know, every couple of years machines get substantially faster,

39
00:01:53,830 --> 00:01:58,510
memory gets cheaper, disk space gets cheaper. CPUs come in faster

40
00:01:58,510 --> 00:02:01,880
varieties and, and greater numbers. So again, you know, just like

41
00:02:01,880 --> 00:02:06,340
you're doing the tradeoff with code optimization versus adding more machines.

42
00:02:06,340 --> 00:02:08,550
You have the same trade off here. Do we want to optimize the code,

43
00:02:08,550 --> 00:02:12,460
or do we want to just get a faster computer? This is a perfectly fine

44
00:02:12,460 --> 00:02:14,670
way to scale. In fact, it's one of the easiest ways to scale

45
00:02:14,670 --> 00:02:18,750
if you have a, a system for replacing one machine with another without breaking

46
00:02:18,750 --> 00:02:21,010
your website. Or maybe you might want to break your website for a

47
00:02:21,010 --> 00:02:23,867
little bit while you do this. So anyway, something to keep in mind. Sometimes

48
00:02:23,867 --> 00:02:27,030
it's an option, sometimes it's not. You know, It's not as fun as

49
00:02:27,030 --> 00:02:28,950
optimizing your code, but it's often cheaper

50
00:02:28,950 --> 00:02:32,200
and easier. And finally, another approach is

51
00:02:32,200 --> 00:02:35,035
to add more machines, which we will also spending a

52
00:02:35,035 --> 00:02:38,343
fair amount of time on in this lecture. You know

53
00:02:38,343 --> 00:02:41,430
that optimizing code, and upgrading machines are fairly straightforward. You

54
00:02:41,430 --> 00:02:45,100
know, do it when you can. Caching and dealing with multiple

55
00:02:45,100 --> 00:02:48,810
machines working together in a system are more difficult but

56
00:02:48,810 --> 00:02:51,680
ultimately you'll have to do them as your website gets large

57
00:02:51,680 --> 00:02:54,890
enough. And that is what we'll be spending the most

58
00:02:54,890 --> 00:02:57,340
time on in these lectures, how these two things fit together.

59
00:02:57,340 --> 00:02:59,020
Okay, so let's move on to caching.
