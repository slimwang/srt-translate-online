1
00:00:00,380 --> 00:00:02,795
Next let's talk about measurement.

2
00:00:02,795 --> 00:00:04,820
Tthis is another corporate of DevOps.

3
00:00:04,820 --> 00:00:08,950
If you want to improve something
you have to be able to measure it.

4
00:00:08,950 --> 00:00:09,670
For instance,

5
00:00:09,670 --> 00:00:14,460
suppose that a new software release is
expected to make the application faster.

6
00:00:14,460 --> 00:00:16,810
How would you know if it
actually does make it faster?

7
00:00:16,810 --> 00:00:20,080
It is not very rational to
say I expect it to be better,

8
00:00:20,080 --> 00:00:22,730
therefore it is going to
necessarily be better.

9
00:00:22,730 --> 00:00:25,000
Sometimes even an expert is wrong.

10
00:00:25,000 --> 00:00:27,760
So when we want to know how
their service is doing or

11
00:00:27,760 --> 00:00:32,150
whether we've improved it, we look to
take measurements of its performance.

12
00:00:32,150 --> 00:00:34,390
Now in traditional IT organizations,

13
00:00:34,390 --> 00:00:37,370
infrastructure monitoring has
been an Ops responsibility.

14
00:00:37,370 --> 00:00:40,070
This includes things like noticing
if a server has crashed or

15
00:00:40,070 --> 00:00:43,770
if an application is unavailable or
if a disk is filling up.

16
00:00:43,770 --> 00:00:46,410
But that's a pretty limited
view on what's worth measuring.

17
00:00:46,410 --> 00:00:49,490
The service is a lot more
than just the servers.

18
00:00:49,490 --> 00:00:53,240
With participation from the development
team, we can get much better monitoring.

19
00:00:53,240 --> 00:00:55,830
Developers can make sure that
applications export useful data,

20
00:00:55,830 --> 00:00:59,320
and they can write services with an eye
to make them integrate with systems for

21
00:00:59,320 --> 00:01:01,410
recording and analyzing that data.

22
00:01:01,410 --> 00:01:04,300
And we could also plug monitoring
into the release process.

23
00:01:04,300 --> 00:01:07,720
For instance, if a new release
causes the software to slow down,

24
00:01:07,720 --> 00:01:09,280
maybe we want to roll it back.

25
00:01:09,280 --> 00:01:13,030
Or even simpler, if we know the traffic
to our service is lowest at a particular

26
00:01:13,030 --> 00:01:15,739
time of day, maybe that's
the best time to do a release.

27
00:01:16,830 --> 00:01:20,190
But measurement actually goes
beyond even dev and ops.

28
00:01:20,190 --> 00:01:23,120
We can use the same measurement
tools to record business metrics,

29
00:01:23,120 --> 00:01:24,950
things like customer activity,

30
00:01:24,950 --> 00:01:29,340
transactions per second,
even measurements of customer happiness.

31
00:01:29,340 --> 00:01:33,100
And we could also measure
the effectiveness of our own tools.

32
00:01:33,100 --> 00:01:35,970
For instance, some dude in a purple
t-shirt might tell you that

33
00:01:35,970 --> 00:01:39,600
using certain deployment tools will
let you do releases a lot faster, but

34
00:01:39,600 --> 00:01:41,240
why should you trust that guy?

35
00:01:41,240 --> 00:01:43,660
You can measure it and
find out for sure.

36
00:01:43,660 --> 00:01:47,170
On the operations side, we can talk
about measuring errors and failures, and

37
00:01:47,170 --> 00:01:50,729
find out whether these new practices we
are adopting are actually reducing them.

38
00:01:52,050 --> 00:01:54,230
Then we'll talk some more about
measurement in lesson three,

39
00:01:54,230 --> 00:01:56,570
where you get some more
in-depth look at monitoring and

40
00:01:56,570 --> 00:01:57,960
some hands-on experience as well.
