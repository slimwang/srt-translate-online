1
00:00:00,000 --> 00:00:03,000
[Evans] There are many different ways we could solve this problem.

2
00:00:03,000 --> 00:00:06,000
First we'll look at a way of solving it using a while loop.

3
00:00:06,000 --> 00:00:08,000
We'll define our find_element procedure.

4
00:00:08,000 --> 00:00:13,000
We'll use p as the name of the list and t as the name of the target,

5
00:00:13,000 --> 00:00:15,000
the element that we want to match.

6
00:00:15,000 --> 00:00:18,000
We'll define the loop to go through the elements of p,

7
00:00:18,000 --> 00:00:22,000
similarly to the previous while loops we've seen that go through lists.

8
00:00:22,000 --> 00:00:25,000
We have our while loop. We've introduced the variable i.

9
00:00:25,000 --> 00:00:27,000
We'll use that as the index to go through the loop.

10
00:00:27,000 --> 00:00:32,000
The stopping condition for the while loop is when i reaches the len(p),

11
00:00:32,000 --> 00:00:36,000
so we want our test for the while loop to be i < len(p).

12
00:00:36,000 --> 00:00:40,000
In the block of the while loop we want to check if the current element matches t,

13
00:00:40,000 --> 00:00:47,000
so we get the current element using p[i] and then we use == to test if it's equal to t.

14
00:00:47,000 --> 00:00:51,000
If we find a match, meaning the 2 values are equal,

15
00:00:51,000 --> 00:00:53,000
then we want to return the index that we found.

16
00:00:53,000 --> 00:00:55,000
So the result should be the value of i,

17
00:00:55,000 --> 00:00:58,000
which is the index where we found the matching element.

18
00:00:58,000 --> 00:01:01,000
The risky thing about using while loops instead of for-loops

19
00:01:01,000 --> 00:01:06,000
is it's really easy to forget that you need to increase the index variable.

20
00:01:06,000 --> 00:01:08,000
If we just left the loop like this, it would run forever

21
00:01:08,000 --> 00:01:13,000
because the value of i would never change unless the first element matched,

22
00:01:13,000 --> 00:01:15,000
in which case we would return 0.

23
00:01:15,000 --> 00:01:19,000
The loop would just keep going on forever, again checking the first element.

24
00:01:19,000 --> 00:01:21,000
So we need to increase the value of i,

25
00:01:21,000 --> 00:01:23,000
and that's the end of the while block.

26
00:01:23,000 --> 00:01:27,000
The way we described what the find_element procedure should do,

27
00:01:27,000 --> 00:01:30,000
if the element was not found, it should return -1.

28
00:01:30,000 --> 00:01:32,000
If we get to the end of the while loop without returning,

29
00:01:32,000 --> 00:01:37,000
that means we've gone through the while loop for all values of i up to len(p) - 1.

30
00:01:37,000 --> 00:01:41,000
We didn't find any element that matches, so we should return -1.

31
00:01:41,000 --> 00:01:43,000
So that's one way to define find_element.

32
00:01:43,000 --> 00:01:46,000
I'll also show you a way to define it using a for-loop.

33
00:01:46,000 --> 00:01:50,000
The reason it's more natural to start thinking of defining find_element with a while loop

34
00:01:50,000 --> 00:01:54,000
than a for-loop is because the value that we want to return from find_element

35
00:01:54,000 --> 00:01:56,000
is the index itself.

36
00:01:56,000 --> 00:01:59,000
When we use a for-loop with the standard syntax of going through the elements

37
00:01:59,000 --> 00:02:02,000
of the loop, we don't keep track of the index.

38
00:02:02,000 --> 00:02:04,000
We just see each element in order.

39
00:02:04,000 --> 00:02:07,000
So we need to add something else to keep track of the index

40
00:02:07,000 --> 00:02:09,000
because that's the value we want to return.

41
00:02:09,000 --> 00:02:12,000
So we still need to use a variable to keep track of the index.

42
00:02:12,000 --> 00:02:16,000
We'll use i as that variable just like we did in the while loop version.

43
00:02:16,000 --> 00:02:19,000
Now instead of a while loop we'll have a for-loop.

44
00:02:19,000 --> 00:02:22,000
We don't need to think of the stopping condition here

45
00:02:22,000 --> 00:02:24,000
because it will just go through all the elements.

46
00:02:24,000 --> 00:02:29,000
Similarly to the body of the while loop, we check if the current element is equal to t.

47
00:02:29,000 --> 00:02:32,000
In the for-loop we can get the current element using the variable e.

48
00:02:32,000 --> 00:02:36,000
That's what gets assigned each time we go through the loop body

49
00:02:36,000 --> 00:02:38,000
to the value of the current element.

50
00:02:38,000 --> 00:02:41,000
So our test is using == to compare e and t.

51
00:02:41,000 --> 00:02:46,000
If they match, just like we did in the while version, we should return the result.

52
00:02:46,000 --> 00:02:49,000
The result we want to return is the index where we found the match.

53
00:02:49,000 --> 00:02:51,000
In the while version that was clear.

54
00:02:51,000 --> 00:02:56,000
It made sense because we were looking at element p, index i.

55
00:02:56,000 --> 00:03:00,000
In the version with the for-loop we have to be more careful to know where that index is.

56
00:03:00,000 --> 00:03:05,000
We're using the variable i to keep track of that index, so we'll return i.

57
00:03:05,000 --> 00:03:07,000
i starts at 0.

58
00:03:07,000 --> 00:03:09,000
Each time through the loop we need to increase i

59
00:03:09,000 --> 00:03:12,000
so we keep track of the current index as we go through the elements.

60
00:03:12,000 --> 00:03:16,000
As with the previous definition, when we had the while loop,

61
00:03:16,000 --> 00:03:20,000
if we got to the end without finding it, that meant that the element did not exist in p

62
00:03:20,000 --> 00:03:22,000
and we should return -1.

63
00:03:22,000 --> 00:03:25,000
We'll do the same thing here.
