1
00:00:00,230 --> 00:00:05,090
So the code that the attacker
wants to craft is basically code

2
00:00:05,090 --> 00:00:09,680
that is going to launch this command
shell that we're talking about.

3
00:00:09,680 --> 00:00:12,480
And that kind of code
is called Shell Code.

4
00:00:12,480 --> 00:00:14,480
So how do you write Shell Code?

5
00:00:14,480 --> 00:00:17,920
Well a little bit of expertise comes in.

6
00:00:17,920 --> 00:00:20,750
So the Shell Code as I
said creates a shell,

7
00:00:20,750 --> 00:00:24,350
which is going to allow you to
execute arbitrary commands.

8
00:00:24,350 --> 00:00:26,950
So any code program that we have,

9
00:00:26,950 --> 00:00:31,052
the attacker can ask that that
particular code be executed.

10
00:00:31,052 --> 00:00:35,088
So let's talk a little bit about
how do you craft the Shell Code.

11
00:00:35,088 --> 00:00:38,760
Say call you're making
to launch a shell,

12
00:00:38,760 --> 00:00:42,310
you can write the code in C for example.

13
00:00:42,310 --> 00:00:46,490
It's a fairly short piece of code,
you're just using one of the calls.

14
00:00:46,490 --> 00:00:50,520
And then let's say you compile
it into assembler instructions.

15
00:00:50,520 --> 00:00:52,530
So once you have assembly instructions,

16
00:00:52,530 --> 00:00:55,380
remember the shell code
has to be machine code.

17
00:00:55,380 --> 00:00:58,970
Because these are values and
they have to be encoded properly and

18
00:00:58,970 --> 00:01:00,110
things like that.

19
00:01:00,110 --> 00:01:03,170
These are values that you
are going to store in memory.

20
00:01:03,170 --> 00:01:04,930
That is where your shell code is.

21
00:01:04,930 --> 00:01:07,620
That's where control is
going to be transferred.

22
00:01:07,620 --> 00:01:10,462
So memory is going to
store these binary values.

23
00:01:10,462 --> 00:01:13,460
So it may look like data, but

24
00:01:13,460 --> 00:01:18,750
actually it really represents
instructions of codes.

25
00:01:18,750 --> 00:01:23,060
And if your program is instructed
to go execute from there,

26
00:01:23,060 --> 00:01:24,890
then it is going to be a program.

27
00:01:24,890 --> 00:01:28,280
So you really have to figure out
what the instructions are and

28
00:01:28,280 --> 00:01:32,490
what data those instructions
are going to use when they execute.

29
00:01:32,490 --> 00:01:36,580
And you're going to craft
that as a set of values

30
00:01:36,580 --> 00:01:38,610
that you load into this part of memory.

31
00:01:38,610 --> 00:01:42,520
And that's going to be based on the
instructional codes of the machine code

32
00:01:42,520 --> 00:01:43,440
as I've said before.

33
00:01:43,440 --> 00:01:46,690
But the way you can do that
is by writing the code in

34
00:01:46,690 --> 00:01:51,020
a high level language, Assembler,
translating that to machine code and

35
00:01:51,020 --> 00:01:56,890
that's how you figure out what is
the ShellCode that you're going to need.

36
00:01:56,890 --> 00:01:59,710
So Shell Code that we going to
place somewhere in memory,

37
00:01:59,710 --> 00:02:01,645
this is how you're going to get to it.

38
00:02:01,645 --> 00:02:04,575
Then I say,
we know how to transfer control to it,

39
00:02:04,575 --> 00:02:07,955
because we modify the return
address when the function ended,

40
00:02:07,955 --> 00:02:11,835
it will actually go to this
place where the shell code is.
