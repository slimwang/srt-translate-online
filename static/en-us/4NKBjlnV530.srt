1
00:00:00,000 --> 00:00:02,000
Here is my version of the function

2
00:00:02,000 --> 00:00:05,000
for each of the characters we need to replace:

3
00:00:05,000 --> 00:00:07,000
"&", ">". "<", "quote".

4
00:00:07,000 --> 00:00:11,000
I replace it with is appropriate escaped version of the string.

5
00:00:11,000 --> 00:00:14,000
I'm just overriding the same string, over and over again--

6
00:00:14,000 --> 00:00:17,000
which is maybe not the finest way to do it

7
00:00:17,000 --> 00:00:19,000
but it'll work, in our case.

8
00:00:19,000 --> 00:00:23,000
And keep in mind that we need to replace

9
00:00:23,000 --> 00:00:25,000
the ampersand first.

10
00:00:25,000 --> 00:00:27,000
If you did it last, for example--

11
00:00:27,000 --> 00:00:31,000
and I enumerated it last, to be a jerk--

12
00:00:31,000 --> 00:00:35,000
you would replace ">" with ">"

13
00:00:35,000 --> 00:00:38,000
and then you'd replace the ampersand in your new Escaped string

14
00:00:38,000 --> 00:00:42,000
with an "&".

15
00:00:42,000 --> 00:00:44,000
So let's test this a few times,

16
00:00:44,000 --> 00:00:46,000
make sure it's working.

17
00:00:46,000 --> 00:00:48,000
Okay. Obviously, it prints this test string test.

18
00:00:48,000 --> 00:00:50,000
Let's give this one a test.

19
00:00:50,000 --> 00:00:52,000
Okay. And this is what we get:

20
00:00:52,000 --> 00:00:55,000
We see our "<" is Escaped to "<"

21
00:00:55,000 --> 00:00:59,000
and our ">" is Escaped and so is our next "<" and our next ">".

22
00:00:59,000 --> 00:01:01,000
Let's test the other ones, to make sure everything's working.

23
00:01:01,000 --> 00:01:04,000
I'm going to get rid of these quotes and use single quotes instead

24
00:01:04,000 --> 00:01:07,000
so we can test the escaping of those.

25
00:01:07,000 --> 00:01:09,000
And what's the other one we didn't test? Aha!

26
00:01:09,000 --> 00:01:12,000
Yes, we'll do our quiz from before:

27
00:01:12,000 --> 00:01:14,000
& = &

28
00:01:14,000 --> 00:01:16,000
And we'll see how this prints.

29
00:01:16,000 --> 00:01:19,000
Okay. So here we go--Run.

30
00:01:19,000 --> 00:01:22,000
We see our double quote was replaced with: "

31
00:01:22,000 --> 00:01:24,000
and then our ampersand--

32
00:01:24,000 --> 00:01:26,000
this was the quiz question we asked before--

33
00:01:26,000 --> 00:01:33,000
so we have: & (which turns into one ampersand here) =& (that ampersand);

34
00:01:33,000 --> 00:01:35,000
just: amp--for the letters a-m-p;

35
00:01:35,000 --> 00:01:37,000
and then our closing quote.

36
00:01:37,000 --> 00:01:41,000
Okay. So let me show you one other simpler way of writing this function.

37
00:01:41,000 --> 00:01:43,000
We can replace most of this code--

38
00:01:43,000 --> 00:01:46,000
like so.

39
00:01:46,000 --> 00:01:49,000
We could say: import cgi.

40
00:01:49,000 --> 00:01:52,000
As it turns out, this function is already included in Python:

41
00:01:52,000 --> 00:01:55,000
cgi.escape (s, quote = True)

42
00:01:55,000 --> 00:01:57,000
Otherwise, it doesn't Escape the quote

43
00:01:57,000 --> 00:02:01,000
and--oops--let's return this.

44
00:02:01,000 --> 00:02:04,000
Okay. So another way of writing this function is just to use the cgi module

45
00:02:04,000 --> 00:02:07,000
that is included with Python, and let's give this a shot.

46
00:02:07,000 --> 00:02:10,000
And, as you can see, it works just the same:

47
00:02:10,000 --> 00:02:14,000
"hello, & --blah, blah, blah, blah-blah.

48
00:02:14,000 --> 00:02:16,000
We see our Escape version of our string here, and this is obviously

49
00:02:16,000 --> 00:02:18,000
a lot simpler than writing in your own.

50
00:02:18,000 --> 00:02:21,000
You may need more functionality yours, if you want to do that in the future.

51
00:02:21,000 --> 00:02:23,000
But for now, the built-in one will work just fine.

52
00:02:23,000 --> 00:02:27,000
Okay. Good job.
