1
00:00:00,220 --> 00:00:01,530
On the left side here,

2
00:00:01,530 --> 00:00:06,430
we have a box labeled Source, which we can think of as our raw data file.

3
00:00:06,430 --> 00:00:11,080
Maybe a CSV, or in this case a JSON file called my-data.

4
00:00:11,080 --> 00:00:14,770
And as we go through the pipeline of the grammar of graphics,

5
00:00:14,770 --> 00:00:18,400
we can think of it as applying a different transformation to each step.

6
00:00:18,400 --> 00:00:21,600
Going from source, to variables, to algebra and so

7
00:00:21,600 --> 00:00:25,450
forth, until we render the final graphic on a web page.

8
00:00:25,450 --> 00:00:29,900
In D3's case, the renderer is simply the web browser and

9
00:00:29,900 --> 00:00:34,300
the browser displays the final graphic in the form of a webpage.

10
00:00:34,300 --> 00:00:40,170
Going from a JSON source file, in this case my-data.json, into what the grammar

11
00:00:40,170 --> 00:00:45,870
of graphics calls Variables, is implemented by D3's data loading functions.

12
00:00:45,870 --> 00:00:50,220
Specifically, D3.json if loading a JSON file.

13
00:00:50,220 --> 00:00:52,240
When called with a data file,

14
00:00:52,240 --> 00:00:56,470
D3 makes an Ajax request to load whatever your data file is.

15
00:00:56,470 --> 00:01:03,000
In this case, my-data.json, and turns it into an array of JavaScript objects.

16
00:01:03,000 --> 00:01:06,270
I don't want to get too hung up on the specifics of each stage of

17
00:01:06,270 --> 00:01:09,810
this grammar of graphics pipeline, or try to relate them to d3

18
00:01:09,810 --> 00:01:15,200
junctions that we may not have encountered yet, such as nest, scale, and layout.

19
00:01:15,200 --> 00:01:19,040
But I did want to cover some of the more common d3 functionality and

20
00:01:19,040 --> 00:01:21,340
how it relates to the grammar of graphics.

21
00:01:21,340 --> 00:01:24,560
In this pipeline, once we have our JavaScript array of

22
00:01:24,560 --> 00:01:29,270
JavaScript object literals, nest is a function that I encourage you to look up.

23
00:01:29,270 --> 00:01:35,240
But it simply groups our data, d3.scale transforms a continuous or

24
00:01:35,240 --> 00:01:39,340
a categorical variable into something that a web page can display,

25
00:01:39,340 --> 00:01:41,860
such as a pixel value or a color.

26
00:01:41,860 --> 00:01:46,140
The d3 layout function is a convenience function that allows us to

27
00:01:46,140 --> 00:01:51,280
apply a common transformation, according to a set of predefined

28
00:01:51,280 --> 00:01:56,400
chart layouts we might want, such as a pie chart, a histogram or a graph.

29
00:01:56,400 --> 00:02:01,520
.append in d3 is what actually inserts our SVG or

30
00:02:01,520 --> 00:02:03,640
HTML elements, which we've already seen.

31
00:02:03,640 --> 00:02:09,139
In this case, .append rect puts rectangle SVG elements.

32
00:02:09,139 --> 00:02:15,880
For every data point, .attr changes some attribute of whatever we're appending.

33
00:02:15,880 --> 00:02:22,230
In this case, rectangle .attr x, changes where we want to position our

34
00:02:22,230 --> 00:02:27,170
rectangle, its x coordinate, and specify the value where we want to position it.

35
00:02:27,170 --> 00:02:28,570
And last but not least,

36
00:02:28,570 --> 00:02:33,890
we can control the aesthetics of our visualization, either through d3 and

37
00:02:33,890 --> 00:02:39,650
specifying attributes on the style, or by using CSS selectors and

38
00:02:39,650 --> 00:02:44,970
CSS specification to, in this case, fill our rectangle with a green color.
