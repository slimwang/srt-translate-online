1
00:00:00,080 --> 00:00:02,525
I think we can kind of get at some of these issues with

2
00:00:02,525 --> 00:00:06,260
a randomized hillclimbing quiz. So what was, kind of what is the

3
00:00:06,260 --> 00:00:09,230
advantage of, of doing hillclimbing and, and what does it lead to

4
00:00:09,230 --> 00:00:12,809
in terms of being able to find the maximum. So, so here, [LAUGH]

5
00:00:12,809 --> 00:00:15,018
yeah, Charles, this is going to be a quiz, and I, I guess

6
00:00:15,018 --> 00:00:17,783
you're not particularly happy about it. But let's, let's take a look

7
00:00:17,783 --> 00:00:21,856
here. We've got an input space of 1 to 28, the integers.

8
00:00:21,856 --> 00:00:25,259
And so here it is kind of out on the screen, all the

9
00:00:25,259 --> 00:00:30,623
values from 1 to 28. And here's the fitness function, or the objective

10
00:00:30,623 --> 00:00:36,298
function for each of those points. It sort of follows this, not exactly

11
00:00:36,298 --> 00:00:42,340
sawtooth, kind of piecewise, jaggy, I don't know what to call it.

12
00:00:42,340 --> 00:00:43,330
>> Drunk.

13
00:00:43,330 --> 00:00:45,510
>> [LAUGH] It is what it is.

14
00:00:45,510 --> 00:00:46,093
>> [LAUGH]

15
00:00:46,093 --> 00:00:49,170
>> And, here's the the global optimum.

16
00:00:50,200 --> 00:00:52,890
And what we're going to do is, we're going to run randomized hill

17
00:00:52,890 --> 00:00:55,760
climbing. And we're going to run it this way. We're going to assume that

18
00:00:55,760 --> 00:00:59,790
the algorithm chooses randomly, in both, if both directions improve. So

19
00:00:59,790 --> 00:01:03,920
it just flips a coin 50-50, then it does whatever evaluations it

20
00:01:03,920 --> 00:01:06,440
needs to do to figure out which way to move to

21
00:01:06,440 --> 00:01:09,266
go uphill. We'll use as of the neighborhood of x to be

22
00:01:09,266 --> 00:01:12,452
the thing immediately to its left and immediately to its right,

23
00:01:12,452 --> 00:01:15,520
unless of course you're at 1 or 28, in which case there's

24
00:01:15,520 --> 00:01:19,448
just one neighbor. So we're just going to use a simplification of the

25
00:01:19,448 --> 00:01:22,170
hillclimbing that we had before. Which is, it's going to check the neighbors,

26
00:01:22,170 --> 00:01:26,090
check both the neighbors if there's two of them, and if one of

27
00:01:26,090 --> 00:01:28,902
them is an improvement, it's going to go in that direction. If neither of

28
00:01:28,902 --> 00:01:31,620
them improvement then it's going to declare itself at a local optimum. And

29
00:01:31,620 --> 00:01:34,300
if both are an improvement, it's just going to flip a coin to decide

30
00:01:34,300 --> 00:01:38,260
where to go. And once it gets to the, to the local optimum,

31
00:01:38,260 --> 00:01:40,720
let's say it sort of climbs up this hill and ends up at this

32
00:01:40,720 --> 00:01:44,370
peak here, it's going to realize that it's at the, at

33
00:01:44,370 --> 00:01:47,630
a local optimum, and then it's going to trigger random restart

34
00:01:47,630 --> 00:01:50,650
and pick a new x position to start at. And

35
00:01:50,650 --> 00:01:54,530
now, the question is, how many function evaluations on average is

36
00:01:54,530 --> 00:01:58,110
it going to take to find x star, the, the tippy-top

37
00:01:58,110 --> 00:02:01,050
of this peak? So, you know, maybe you could write

38
00:02:01,050 --> 00:02:02,530
code to do this, or maybe you could do it

39
00:02:02,530 --> 00:02:05,800
with math. This is probably a little bit more involved than

40
00:02:05,800 --> 00:02:08,100
most of our quizzes, but it should give you a chance

41
00:02:08,100 --> 00:02:11,170
to really dive in and get a feel for this notion

42
00:02:11,170 --> 00:02:14,900
that it matters kind of where these basins of attraction are.

43
00:02:16,070 --> 00:02:18,360
Alright, you think that's clear enough to give it a shot?

44
00:02:18,360 --> 00:02:19,370
>> Sure.

45
00:02:19,370 --> 00:02:20,640
>> Alright, let's go.
