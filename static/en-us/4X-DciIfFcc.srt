1
00:00:00,000 --> 00:00:04,696
Let's look at the solution to our
consistency quiz where we have coherent

2
00:00:04,696 --> 00:00:09,620
memory but an out-of-order pair of
cores, where branches are predicted,

3
00:00:09,620 --> 00:00:13,029
stores are still done strictly
in program order, but

4
00:00:13,029 --> 00:00:16,994
loads can be reordered and
these two variables start at zero.

5
00:00:16,994 --> 00:00:21,574
What the programmer is kind of expecting
to happen is that I put put some values

6
00:00:21,574 --> 00:00:25,095
in some data, then I set a flag,
and the other core waits for

7
00:00:25,095 --> 00:00:28,840
that flag to be set so that it can
print the data that I produced.

8
00:00:29,920 --> 00:00:35,111
In program order, the only thing that
can really happen, is that we print 15.

9
00:00:35,111 --> 00:00:38,989
In the execution order,
that can also happen.

10
00:00:38,989 --> 00:00:43,335
If this core gets to this part
before we even start checking,

11
00:00:43,335 --> 00:00:47,766
we might compute 15 in the data,
set flag to one, core one,

12
00:00:47,766 --> 00:00:52,220
loops here, sees that the flag is one,
exits, brings 15.

13
00:00:52,220 --> 00:00:54,980
So, clearly 15 is possible.

14
00:00:54,980 --> 00:00:58,850
But the question is can
we get anything else?

15
00:00:58,850 --> 00:01:04,390
These are done strictly in order so
if anything else does get printed, it's

16
00:01:04,390 --> 00:01:09,970
not going to be because this core did
the data right after the flag was set.

17
00:01:09,970 --> 00:01:14,170
The flag actually gets set after
the rights are complete but

18
00:01:14,170 --> 00:01:16,120
here's what can happen.

19
00:01:16,120 --> 00:01:21,130
This loop here amounts to reading
the flag, testing if it's zero,

20
00:01:21,130 --> 00:01:23,970
and then branching based on that.

21
00:01:23,970 --> 00:01:29,520
This processor can easily predict
this branch in a way that says

22
00:01:29,520 --> 00:01:34,590
we exit before it even gets
to check what the flag was.

23
00:01:34,590 --> 00:01:39,710
So at that point we will be here and
we will fetch the data to be printed.

24
00:01:39,710 --> 00:01:42,490
The data at that point might be zero.

25
00:01:42,490 --> 00:01:47,860
So what we do is we predict it goes out
and we fetch the data at this point.

26
00:01:47,860 --> 00:01:50,450
So it's kind of step one predict,
and leave loop.

27
00:01:50,450 --> 00:01:54,920
Step two, read the data, and
it's zero at this point.

28
00:01:54,920 --> 00:01:58,210
Then let's say core 2 finishes this, and

29
00:01:58,210 --> 00:02:01,550
at that point out-of-order
processor does this load, remember,

30
00:02:01,550 --> 00:02:05,330
these are load,
they can be re-ordered, if we do this,

31
00:02:05,330 --> 00:02:11,170
we see that the flag at this point
is one so prediction was correct.

32
00:02:11,170 --> 00:02:14,170
And at this point,
we can print the data that we found.

33
00:02:14,170 --> 00:02:16,900
In this case, we will print zero.

34
00:02:16,900 --> 00:02:22,308
A similar outcome is possible for
data = 10, simply by moving this here.

35
00:02:22,308 --> 00:02:25,628
So, we can also print ten
if access number two,

36
00:02:25,628 --> 00:02:30,539
which reads the data after the
prediction of the branch happens here.

37
00:02:30,539 --> 00:02:33,985
And finally we could get 15 and
the data if we get it here, but

38
00:02:33,985 --> 00:02:35,920
we already knew we could get 15.

39
00:02:35,920 --> 00:02:39,870
Note that it's not possible
to get five or anything else.

40
00:02:39,870 --> 00:02:44,185
And the reason is that these writes on
the same core will happen in program

41
00:02:44,185 --> 00:02:44,687
order.

42
00:02:44,687 --> 00:02:48,560
It's incorrect for
a core to somehow read zero here.

43
00:02:48,560 --> 00:02:55,370
because the only way we read data here,
is if it was already written here.

44
00:02:55,370 --> 00:02:58,160
On the same core,
we have to obey the program order.

45
00:02:58,160 --> 00:03:00,280
That was never in question.

46
00:03:00,280 --> 00:03:03,420
So the data when it's
read here has to be 10.

47
00:03:03,420 --> 00:03:07,780
We can only increment it by 5 to 15,
we cannot read 0 here.

48
00:03:09,110 --> 00:03:11,140
So that's why it's possible
only to get 0, 10, or 15.

49
00:03:11,140 --> 00:03:17,870
So basically, the real problem is
that somehow, although we thought

50
00:03:17,870 --> 00:03:22,780
we are waiting for the flag to be set
before we access the data, in reality we

51
00:03:22,780 --> 00:03:26,610
managed to access the data at kind of
any point before the flag was set.

52
00:03:27,740 --> 00:03:30,900
And coherence, again,
didn't prevent this.

53
00:03:30,900 --> 00:03:33,220
What we need is consistency.
