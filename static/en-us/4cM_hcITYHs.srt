1
00:00:00,160 --> 00:00:04,314
In the latest version of our suburban scene, we had a moving car and a moving

2
00:00:04,314 --> 00:00:09,114
dog. But of course really we want all the dogs and cars to move. One way of

3
00:00:09,114 --> 00:00:13,567
doing that would be, instead of just making one car and dog move, to put all

4
00:00:13,567 --> 00:00:20,010
the cars and dogs into an array list of movable objects. But you might say we

5
00:00:20,010 --> 00:00:24,777
already have an array list of drawables, can't we reuse that? We can, but we

6
00:00:24,777 --> 00:00:29,358
have to learn a bit more about working with types and Java. Let's say I have a

7
00:00:29,358 --> 00:00:35,204
drawable, what I'd like to know is if it's a movable. The instanceof test gives

8
00:00:35,204 --> 00:00:40,336
me the answer to that. This expression is true, if d happens to belong to a

9
00:00:40,336 --> 00:00:46,808
class that also implements the moveable interface. Of course in that case, I'd

10
00:00:46,808 --> 00:00:51,894
like to then call the move method. But not so fast, I can't call d.move because

11
00:00:51,894 --> 00:00:57,802
d is not movable. I have to convert d to something that is movable. Here is how

12
00:00:57,802 --> 00:01:04,900
you do that in Java. This expression means take d and cast it into a movable.

13
00:01:04,900 --> 00:01:09,059
We've previously seen the cast notation to change a floating point number into

14
00:01:09,059 --> 00:01:14,610
an integer, it's the same notation but now with an interface type. Once it is a

15
00:01:14,610 --> 00:01:19,634
movable, then it is saved in the variable of type movable. And then we can

16
00:01:19,634 --> 00:01:23,776
invoke the move method on m. Again you couldn't have invoked on d because d

17
00:01:23,776 --> 00:01:29,500
doesn't have a move method, that's drawable. This conversion is necessary. What

18
00:01:29,500 --> 00:01:32,440
if you make a cast of something that wasn't movable such as a house then he

19
00:01:32,440 --> 00:01:36,766
would get an exception and your program would terminate. That's why it's

20
00:01:36,766 --> 00:01:41,004
important that we first check whether d in fact is movable. These instances of

21
00:01:41,004 --> 00:01:45,688
tests and casts are not very common but they do happen every so often. And it's

22
00:01:45,688 --> 00:01:49,464
good to be familiar with them. So go ahead and put this to work. In the scene

23
00:01:49,464 --> 00:01:54,590
program, go through all of the drawables. Find out which of them are moveable,

24
00:01:54,590 --> 00:01:56,159
and move them.
