1
00:00:00,390 --> 00:00:02,360
Lastly, the interpreter
does a look-up for

2
00:00:02,360 --> 00:00:06,730
foil, which falls out of the local
scope, but is found in the middle scope.

3
00:00:06,730 --> 00:00:09,600
Note that we're showing this fall
through all in one step, but

4
00:00:09,600 --> 00:00:12,870
it requires a scan of the blue context,
just as before.

5
00:00:12,870 --> 00:00:14,720
The interpreter is done with look-ups,
and

6
00:00:14,720 --> 00:00:19,230
it sends the full concatenated string
as output to the log in system.

7
00:00:19,230 --> 00:00:22,600
This was also the last line of the
function, so the interpreter can jump

8
00:00:22,600 --> 00:00:26,271
back out to where that function was
called and resume processing from there.

9
00:00:26,271 --> 00:00:27,132
Along with it,

10
00:00:27,132 --> 00:00:31,054
the focal context will shift out to
what it was before the red context.

11
00:00:31,054 --> 00:00:32,255
Up until this point,

12
00:00:32,255 --> 00:00:36,527
the picture of the in memory contexts on
the right has shaped up to look really

13
00:00:36,527 --> 00:00:40,090
similar to the picture of
the lexical scope on the left.

14
00:00:40,090 --> 00:00:44,500
The only difference so far has been that
there are actual values visible here,

15
00:00:44,500 --> 00:00:46,540
and in our code,
of course, there are none.

16
00:00:46,540 --> 00:00:50,180
But both of them show one blue
scope inside one red scope,

17
00:00:50,180 --> 00:00:51,990
inside one green scope.

18
00:00:51,990 --> 00:00:55,610
So what's the difference between
in memory scopes and lexical ones?

19
00:00:55,610 --> 00:00:59,080
This starts to become clearer when
saga runs for the second time.
