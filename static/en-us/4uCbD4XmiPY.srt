1
00:00:00,000 --> 00:00:06,000
Welcome to the 5th unit in our debugging course titled Reproducing Failures.

2
00:00:06,000 --> 00:00:10,000
In the past units we have seen a number of techniques to systematically hand down

3
00:00:10,000 --> 00:00:15,000
a failure cause by following back dependencies and applying the scientific method

4
00:00:15,000 --> 00:00:20,000
to choose between various possible origins until we find the defect.

5
00:00:20,000 --> 00:00:24,000
So far, however, we have assumed that the program fails in the lab

6
00:00:24,000 --> 00:00:29,000
and that somehow we would be able to actually access these earlier states

7
00:00:29,000 --> 00:00:31,000
or at least run appropriate experiments

8
00:00:31,000 --> 00:00:36,000
where we would be able to gather additional.

9
00:00:36,000 --> 00:00:41,000
Contrast this with a program failing in the field where all we know is that the program failed

10
00:00:41,000 --> 00:00:44,000
plus possibly a few hints from the execution,

11
00:00:44,000 --> 00:00:48,000
but all-in-all only a spottier record compared to what you get in the lab.

12
00:00:48,000 --> 00:00:51,000
This is where reproduction comes into play.

13
00:00:51,000 --> 00:00:55,000
You have to reproduce the failing run from the field in the lab

14
00:00:55,000 --> 00:00:59,000
such that you can actually do the debugging. Why do you need to do that?

15
00:00:59,000 --> 00:01:02,000
We need to be able to observe the run,

16
00:01:02,000 --> 00:01:04,000
because once we have reproduced a failure locally,

17
00:01:04,000 --> 00:01:07,000
we can observe and experiment at will.

18
00:01:07,000 --> 00:01:10,000
This, of course, is invaluable for isolating the defect.

19
00:01:10,000 --> 00:01:13,000
Second, we need to be able to check the fix.

20
00:01:13,000 --> 00:01:17,000
Only if we can reproduce a bug can we be sure that we have actually fixed it,

21
00:01:17,000 --> 00:01:20,000
namely, if the failure no longer occurs.

22
00:01:20,000 --> 00:01:24,000
Reproducing a bug can be way harder than fixing the bug.

23
00:01:24,000 --> 00:01:28,000
In programmer's jargon, bug's fall into four categories.

24
00:01:28,000 --> 00:01:32,000
First, there is the Bohr bug from Bohr's model of the atom.

25
00:01:32,000 --> 00:01:35,000
This is a repeatable bug that many manifests reliably

26
00:01:35,000 --> 00:01:39,000
under a possibly unknown but well-defined set of conditions.

27
00:01:39,000 --> 00:01:45,000
Next category is a Heisenbug from Heisenburg's uncertainty principle in quantum physics.

28
00:01:45,000 --> 00:01:50,000
This is a bug that disappears or alters its behavior when one attempts to probe

29
00:01:50,000 --> 00:01:52,000
or isolate it.

30
00:01:52,000 --> 00:01:56,000
The next one is the Mandelbug, coming from the Mandelbrot set.

31
00:01:56,000 --> 00:02:00,000
This is a bug whose underlying causes are so complex and obscure

32
00:02:00,000 --> 00:02:04,000
as to make its behavior appear chaotic or even nondeterministic.

33
00:02:04,000 --> 00:02:07,000
And last but not least there is the Schrödinbug,

34
00:02:07,000 --> 00:02:13,000
which is MIT jargon coming from Schrödinger's cat thought experiment in quantum physics.

35
00:02:13,000 --> 00:02:17,000
You know--the situation in which you have a cat in a box,

36
00:02:17,000 --> 00:02:21,000
which may be dead or which may be alive, but you don't know until you open the box.

37
00:02:21,000 --> 00:02:26,000
This is a bug in a program that doesn't manifest until someone who reads the source

38
00:02:26,000 --> 00:02:32,000
or who uses the program in an unusual way notices that the program never should have worked,

39
00:02:32,000 --> 00:02:36,000
at which point the program promptly stops working for everybody until it is fixed.

40
00:02:36,000 --> 00:02:42,000
All these bug categories refer to various levels of difficulty as it comes to reproducing the bugs.

41
00:02:42,000 --> 00:02:47,000
Here is an example of a bug that was hard to reproduce that I once encountered.

42
00:02:47,000 --> 00:02:50,000
I had a C program that crashed all the time.

43
00:02:50,000 --> 00:02:54,000
In an extremely simplified version this is what it looks like.

44
00:02:54,000 --> 00:02:57,000
If I ran this program normally, it would crash.

45
00:02:57,000 --> 00:02:59,000
The assertion would fail.

46
00:02:59,000 --> 00:03:01,000
If I ran it in a debugger, however, it worked just fine.
