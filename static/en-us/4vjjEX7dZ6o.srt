1
00:00:00,000 --> 00:00:02,000
[QUIZ Fill in the blanks. Write the simplest expression to make the equality true.]

2
00:00:02,000 --> 00:00:05,000
Well, X times 1 is just equal to X regardless of the value of X.

3
00:00:05,000 --> 00:00:08,000
If X was 55, 55 times 1 is 55.

4
00:00:08,000 --> 00:00:10,000
If X was 0, 0 times 1 is 0.

5
00:00:10,000 --> 00:00:14,000
If X was negative 2, negative 2 times 1 is negative 2. Excellent.

6
00:00:14,000 --> 00:00:18,000
X times 0 is always equal to 0.

7
00:00:18,000 --> 00:00:21,000
This is one of those mathematical identities. 55 times 0 is 0.

8
00:00:21,000 --> 00:00:23,000
Negative 1 times 0 is 0.

9
00:00:23,000 --> 00:00:26,000
0 times 0 is 0. It always works out.

10
00:00:26,000 --> 00:00:30,000
X times 2 can be rewritten as X + X. [strength reduction]

11
00:00:30,000 --> 00:00:33,000
This may not immediately seem like a useful optimization,

12
00:00:33,000 --> 00:00:36,000
Formally, we call it "strength reduction"

13
00:00:36,000 --> 00:00:39,000
in the sense that multiplication was a stronger,

14
00:00:39,000 --> 00:00:42,000
harder-to-compute operation than addition.

15
00:00:42,000 --> 00:00:45,000
On some CPUs or on some hardware platforms,

16
00:00:45,000 --> 00:00:49,000
it takes less time, fewer cycles, less energy

17
00:00:49,000 --> 00:00:52,000
to compute addition than it does to do multiplication.

18
00:00:52,000 --> 00:00:55,000
So even though both of these have 2 operands

19
00:00:55,000 --> 00:00:57,000
and they are both binary operators,

20
00:00:57,000 --> 00:01:00,000
this 1 might be faster on many platforms.

21
00:01:00,000 --> 00:01:02,000
Finally, we get to the last one

22
00:01:02,000 --> 00:01:05,000
and the one that probably is the most controversial:

23
00:01:05,000 --> 00:01:10,000
X divided by X cannot safely be replaced with anything smaller.

24
00:01:10,000 --> 00:01:14,000
You'd REALLY like it to just be 1.

25
00:01:14,000 --> 00:01:18,000
1 is SO tempting!

26
00:01:18,000 --> 00:01:21,000
5 divided by 5 equals 1.

27
00:01:21,000 --> 00:01:24,000
Negative 2 divided by negative 2 equals 1.

28
00:01:24,000 --> 00:01:26,000
Seems like it's always 1,

29
00:01:26,000 --> 00:01:28,000
except for this 1 corner case:

30
00:01:28,000 --> 00:01:32,000
0 divided by 0 does not equal 1. [exception]

31
00:01:32,000 --> 00:01:34,000
0 divided by 0 raises an exception.

32
00:01:34,000 --> 00:01:38,000
And the golden rule of Optimization Club is:

33
00:01:38,000 --> 00:01:41,000
"Always keep the same semantics."

34
00:01:41,000 --> 00:01:45,000
If there's a possibility that on some inputs we could raise an exception,

35
00:01:45,000 --> 00:01:48,000
we can't rule out that exception with our optimization.

36
00:01:48,000 --> 00:01:51,000
You'd think, "Why would anyone want to divide by 0?"

37
00:01:51,000 --> 00:01:53,000
You can't change the meaning of the program.

38
00:01:53,000 --> 00:01:56,000
You have to keep it exactly the same when you're doing optimizations.

39
00:01:56,000 --> 00:01:58,000
So 1 is very tempting,

40
00:01:58,000 --> 00:02:00,000
but it's too aggressive.

41
00:02:00,000 --> 00:02:02,000
There's a single case where it's wrong,

42
00:02:02,000 --> 99:59:59,999
so we can't use it for optimization.
