1
00:00:00,310 --> 00:00:03,983
I haven't talked about texture access in fragment shaders. The short answer is,

2
00:00:03,983 --> 00:00:06,894
you can access textures in fragment shaders. The theory of sampling and

3
00:00:06,894 --> 00:00:10,784
filtering is the same as you've already learned in previous lessons. Most of

4
00:00:10,784 --> 00:00:15,476
the rest is just the syntax of setting up the texture access. The key bit is

5
00:00:15,476 --> 00:00:19,440
that in the shader you use the texture 2D function. This gives back the color

6
00:00:19,440 --> 00:00:22,998
from the texture which you then use as you wish. Search the Three.js code base

7
00:00:22,998 --> 00:00:27,740
for this keyword and you'll find more than 40 shaders that use texture access.

8
00:00:27,740 --> 00:00:30,822
The main file for material shading is WebGLShaders.js, and it's worth your time

9
00:00:30,822 --> 00:00:35,228
to give it a look if you want to become better with shaders. The other function

10
00:00:35,228 --> 00:00:38,708
to look for is textureCube for cube maps, which takes a 3D direction as an

11
00:00:38,708 --> 00:00:43,376
input. Many of the rest of the shaders perform image processing, where the

12
00:00:43,376 --> 00:00:47,182
pixels of the image are used to form another image. Let's take a concrete

13
00:00:47,182 --> 00:00:51,006
example. You want to convert a color image to grayscale. The formula is

14
00:00:51,006 --> 00:00:54,998
luminance equals this much red, this much green, and this much blue. This

15
00:00:54,998 --> 00:00:59,370
formula is for linearized colors, and luminance is intensity, the grayscale.

16
00:00:59,370 --> 00:01:02,310
There's also another formula for luma, for when the inputs are not gamma

17
00:01:02,310 --> 00:01:05,865
corrected. It's surprising to me that in both formulas how important green is

18
00:01:05,865 --> 00:01:09,857
and how little blue matters. Whichever formula you use, you might think you

19
00:01:09,857 --> 00:01:13,980
could simply add it as a final step in a fragment shader. However, transparency

20
00:01:13,980 --> 00:01:18,568
again is a problem. You want to apply this formula as a post-process. That is,

21
00:01:18,568 --> 00:01:22,449
you want to convert to grayscale after the whole scene is rendered. But by then

22
00:01:22,449 --> 00:01:25,406
it's too late. The image has already been sent to the screen. Well, in fact,

23
00:01:25,406 --> 00:01:28,986
you can send the image off-screen and have it become a texture. This is called,

24
00:01:28,986 --> 00:01:32,981
simply, an offscreen texture, pixel buffer, or render target. This texture is

25
00:01:32,981 --> 00:01:35,848
not typically not a powers of two texture, it's not normally 512 by 512, or

26
00:01:35,848 --> 00:01:40,203
anything that you'd use to make a mipmap chain. Our goal is to perform image

27
00:01:40,203 --> 00:01:43,934
processing on this so-called texture. We want to read a pixel and convert it to

28
00:01:43,934 --> 00:01:47,275
gray. You'd think there'd be some mode that could just take one texel and spit

29
00:01:47,275 --> 00:01:49,930
it out to a new pixel, but the GPU is optimized for drawing triangles and

30
00:01:49,930 --> 00:01:54,920
accessing textures. The way we use this texture is by drawing a single

31
00:01:54,920 --> 00:01:59,162
rectangle with UV coordinates that exactly fill the screen. You'll hear this

32
00:01:59,162 --> 00:02:02,718
called a screen-filling quad. The UV values are then used in the fragment

33
00:02:02,718 --> 00:02:06,150
shader to precisely grab the single texel that corresponds to our final output

34
00:02:06,150 --> 00:02:10,725
pixel on the screen, one for one. This sounds inefficient, and in a certain

35
00:02:10,725 --> 00:02:14,588
sense it is. But this process is fast enough that often a considerable number

36
00:02:14,588 --> 00:02:18,590
of post-processing passes can be done in each frame. In Three.js, the Effect

37
00:02:18,590 --> 00:02:22,022
Composer class lets you create and chain different passes together with just a

38
00:02:22,022 --> 00:02:26,630
few lines of code. For our grayscale post-process, the vertex shader is along

39
00:02:26,630 --> 00:02:30,948
these lines. This is almost as simple as a vertex shader can get. It copies

40
00:02:30,948 --> 00:02:34,059
over the UV value and projects the screen-filling quadrilateral to clip

41
00:02:34,059 --> 00:02:38,002
coordinates. The whole point of rendering the rectangle is to force the

42
00:02:38,002 --> 00:02:41,966
fragment shader to be evaluated at every pixel. The fragment shader code is

43
00:02:41,966 --> 00:02:45,440
also quite simple. The texture is accessed by the screen location, essentially.

44
00:02:45,440 --> 00:02:49,215
So each textel will be associated with its corresponding output pixel. We use

45
00:02:49,215 --> 00:02:52,448
the color of this textel to get the grey scale color, in this case using the

46
00:02:52,448 --> 00:02:56,130
luma equation. This color is then saved to the fragment's output color and

47
00:02:56,130 --> 00:03:00,840
we're done. But we don't have to stop there. Multiple post-process passes can

48
00:03:00,840 --> 00:03:04,874
be done, and it's often necessary or even more efficient. For example, a blur

49
00:03:04,874 --> 00:03:09,134
can be done in two passes, a horizontal blur and then a vertical blur. Doing so

50
00:03:09,134 --> 00:03:12,914
results in fewer texture look-ups than a single pass. Multiple passes can be

51
00:03:12,914 --> 00:03:15,950
quite memory efficient as the input texture from one pass can become the output

52
00:03:15,950 --> 00:03:20,322
texture for the next, and vice versa. This process is called ping ponging, as

53
00:03:20,322 --> 00:03:24,236
the flow of data goes back and forth. Here the horizontal blur uses the left

54
00:03:24,236 --> 00:03:28,237
image as input, the right for output. The vertical blur uses the right as

55
00:03:28,237 --> 00:03:31,760
input, left as output. Say we now want to convert to gray scale, we'd add

56
00:03:31,760 --> 00:03:35,944
another pass and reverse the direction again. Here's an example of grayscale in

57
00:03:35,944 --> 00:03:39,324
action. The critical idea here is that we can do all sorts of things in this

58
00:03:39,324 --> 00:03:43,423
fragment shader. We can sample nearby texels and blend them together to blur

59
00:03:43,423 --> 00:03:48,016
the image, detect edges, or 100 other operations. We can chain together each

60
00:03:48,016 --> 00:03:51,713
post-process to feed the next. This demo by Felix Turner shows some of the many

61
00:03:51,713 --> 00:03:55,325
effects you can achieve. Three.js, in fact, has lots of post-processing

62
00:03:55,325 --> 00:03:59,760
operations in its library, and it's easy to add your own. I highly recommend

63
00:03:59,760 --> 00:04:03,010
looking at the additional course materials for links to Felix's tutorial and

64
00:04:03,010 --> 00:04:05,169
other worthwhile resources.
