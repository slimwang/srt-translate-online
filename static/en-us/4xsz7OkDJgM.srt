1
00:00:00,440 --> 00:00:02,860
We can represent most things by a list of properties and

2
00:00:02,860 --> 00:00:06,630
their values. Think about how you would represent you or your

3
00:00:06,630 --> 00:00:10,680
cell phone, the email in your inbox. Maybe even events, such

4
00:00:10,680 --> 00:00:13,870
as the last party you attended. Mostly a list of key value

5
00:00:13,870 --> 00:00:16,960
pairs, right. Key value pairs or dictionaries as they're called in

6
00:00:16,960 --> 00:00:19,820
Python, make a lot of sense as a way to represent data.

7
00:00:19,820 --> 00:00:22,560
Primarily because it's so natural to represent so much of the

8
00:00:22,560 --> 00:00:25,670
data we care about this way. Let's think about the you example

9
00:00:25,670 --> 00:00:27,020
for a minute. In my case, some of the

10
00:00:27,020 --> 00:00:31,130
features might be. Eyes, brown. Hair, brown. Height, 6'2.

11
00:00:31,130 --> 00:00:33,820
Weight, I'll leave that as an exercise for the

12
00:00:33,820 --> 00:00:38,550
viewer. Note that name pairs are very different from documents.

13
00:00:38,550 --> 00:00:42,330
With the document, we have sections, containing subsections, containing

14
00:00:42,330 --> 00:00:45,840
paragraphs, containing sentences. This type of nesting or tree

15
00:00:45,840 --> 00:00:48,440
structure is exactly the type of structure that XML

16
00:00:48,440 --> 00:00:50,750
was designed to work with. In practice you'll find that

17
00:00:50,750 --> 00:00:54,940
XML is used for many purposes, even those for which it's probably not the

18
00:00:54,940 --> 00:00:58,770
best choice, and others for which one could argue it's not appropriate. In order

19
00:00:58,770 --> 00:01:02,030
to ensure you're ready to wrangle XML in all its forms, we'll give you

20
00:01:02,030 --> 00:01:04,400
some practice working with applications of XML,

21
00:01:04,400 --> 00:01:06,550
to both documents and key value data.
