1
00:00:00,000 --> 00:00:04,000
Because the nodes are filled in the tree from top to bottom and left to right,

2
00:00:04,000 --> 00:00:08,000
we can number them very naturally as follows.

3
00:00:08,000 --> 00:00:17,000
We'll call this node 0, node 1, node 2, node 3, node 4, and so on.

4
00:00:17,000 --> 00:00:20,000
Because of the regularity with the way that the nodes are numbered,

5
00:00:20,000 --> 00:00:24,000
and the fact that there's always two children until you get down to the bottom

6
00:00:24,000 --> 00:00:26,000
and it kind of trails off.

7
00:00:26,000 --> 00:00:30,000
There's all sorts of relationships that you can figure out between nodes and their parents.

8
00:00:30,000 --> 00:00:33,000
We don't have to explicitly store them we can keep it implicitly

9
00:00:33,000 --> 00:00:36,000
because it can be implicit in the numbering scheme.

10
00:00:36,000 --> 00:00:40,000
I want you to stare at this for a little while and see if you can figure out the numbering scheme.

11
00:00:40,000 --> 00:00:48,000
Imagine we have a much bigger tree with, say, 500 nodes. Somewhere in that tree there is node 72.

12
00:00:48,000 --> 00:00:55,000
What would the right child of node 72 be using this numbering scheme?

13
00:00:55,000 --> 00:00:58,000
I want you to figure out the answer and write it in this box.

14
00:00:58,000 --> 00:01:07,000
But mostly, I want you to figure out the general rule and just apply that rule in the case of 72.
