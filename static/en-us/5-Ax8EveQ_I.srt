1
00:00:00,160 --> 00:00:03,026
So the two traditional
methods widely in used for

2
00:00:03,026 --> 00:00:05,776
doing any kind of warping
are forward and inverse.

3
00:00:05,776 --> 00:00:08,144
We briefly touched on
them in the last lecture,

4
00:00:08,144 --> 00:00:10,640
I'm going to now just give
you more details on them.

5
00:00:10,640 --> 00:00:14,905
So, to help us understand this, let's
start off by just having two images.

6
00:00:14,905 --> 00:00:18,132
We'll call the first image
the source and the T, the target.

7
00:00:18,132 --> 00:00:21,490
We want to be able to take information
pixels from the source, and

8
00:00:21,490 --> 00:00:25,310
create a new image or a target image,
that would have the deformations or

9
00:00:25,310 --> 00:00:27,710
the warps that we are interested in.

10
00:00:27,710 --> 00:00:32,250
For simplicity's sake, let's imagine S
basically has a coordinates base u and

11
00:00:32,250 --> 00:00:34,990
v, and the target has x and y.

12
00:00:34,990 --> 00:00:38,910
Now this is slightly a different
notation than we've used so far.

13
00:00:38,910 --> 00:00:42,120
In the previous ones,
we talked about S being basically x and

14
00:00:42,120 --> 00:00:45,100
y, and the target being x prime and
y prime.

15
00:00:45,100 --> 00:00:48,000
Just bear with me for a second, we'll
come back to that notation in a bit but

16
00:00:48,000 --> 00:00:51,440
this is just to kind of help us
understand how we can do this simply.

17
00:00:51,440 --> 00:00:55,670
So forward warping basically is taking,
generating a new x and

18
00:00:55,670 --> 00:01:00,720
y by creating a warp on X,
which is applied to u and v here.

19
00:01:00,720 --> 00:01:03,800
And warp and Y, which is also
taking u and v from this one.

20
00:01:03,800 --> 00:01:06,620
And generating a new set of coordinates,
x and y.

21
00:01:06,620 --> 00:01:08,700
So here, of course, the warp is X and

22
00:01:08,700 --> 00:01:13,480
Y, apply to the values in here,
and generating this.

23
00:01:13,480 --> 00:01:18,438
Backward or inverse is basically trying
to do the prediction of where things

24
00:01:18,438 --> 00:01:23,480
are in the target based on what are
things or pixel values in the source.

25
00:01:23,480 --> 00:01:27,618
So here, of course, we generating,
in essence, the u and v,

26
00:01:27,618 --> 00:01:31,836
by doing a deformation or
a transformation, or a warp, U and V,

27
00:01:31,836 --> 00:01:35,690
which takes values from here and
generates this image.

28
00:01:35,690 --> 00:01:36,220
So in essence,

29
00:01:36,220 --> 00:01:39,980
while we have this, we're trying to now
do the opposite of trying to figure out

30
00:01:39,980 --> 00:01:45,040
how to go from pixel values in all of
the range values here into this one.

31
00:01:45,040 --> 00:01:48,210
To help understand this,
let's take a simple example.

32
00:01:48,210 --> 00:01:51,000
Now this was, of course,
what we want to accomplish for forward.

33
00:01:51,000 --> 00:01:53,890
And this is what we want to
accomplish for inverse.

34
00:01:53,890 --> 00:01:58,590
Here I'm basically showing an input and
output, for, basically,

35
00:01:58,590 --> 00:02:03,960
the forward, and the input and output
for the backwards, or the inverse.

36
00:02:03,960 --> 00:02:07,570
And the input and output for
the inverse warp.

37
00:02:07,570 --> 00:02:09,030
Now, to help us along,

38
00:02:09,030 --> 00:02:12,690
what we can actually start imaging is,
that this could be, u,

39
00:02:12,690 --> 00:02:16,260
v could be completely integer values,
will become clear in a second.

40
00:02:16,260 --> 00:02:19,710
While, the output has
to be in real values.

41
00:02:19,710 --> 00:02:24,280
While in the case of the inverse warp,
the opposite is true.

42
00:02:24,280 --> 00:02:26,480
If I have all of this in integer values,

43
00:02:26,480 --> 00:02:29,480
I could actually now
have real values input.

44
00:02:29,480 --> 00:02:33,480
Let me start off by finding a few
pixels in the original input here and

45
00:02:33,480 --> 00:02:35,490
see what they would look
like in the output.

46
00:02:35,490 --> 00:02:38,120
Here is one, and here's the other one.

47
00:02:38,120 --> 00:02:42,150
When this pixel is moved over,
the information from this pixel is

48
00:02:42,150 --> 00:02:45,000
moved over to the output,
of course, because of the warping,

49
00:02:45,000 --> 00:02:48,750
it won't be just in the regular
grid pattern of this image anymore.

50
00:02:48,750 --> 00:02:51,410
In fact, the intensity
value should be distributed

51
00:02:51,410 --> 00:02:55,360
in the raster scan of this image, and
of course, what we now need to do is

52
00:02:55,360 --> 00:02:59,740
generate a new image that would have
the values that came in from here.

53
00:02:59,740 --> 00:03:03,000
And again, the warp would be
based on these two X and Y.

54
00:03:03,000 --> 00:03:05,110
And imagine this, is now,
of course, moving here.

55
00:03:05,110 --> 00:03:08,700
So, in essence, what we've got
is from here to there actually

56
00:03:08,700 --> 00:03:10,320
we warped the image,
and from here to there,

57
00:03:10,320 --> 00:03:14,280
we warped this part of the image,
this region, is now moved here.

58
00:03:14,280 --> 00:03:17,580
So this is basically
the forward warping process.

59
00:03:17,580 --> 00:03:20,340
In the case of the inverse,
the opposite is true.

60
00:03:20,340 --> 00:03:23,390
We would have this region,
we want to move it here, and

61
00:03:23,390 --> 00:03:25,140
we would have another one.

62
00:03:25,140 --> 00:03:28,810
So again, let's take these two pixels
again, these are integer values and

63
00:03:28,810 --> 00:03:32,830
all of the values that come from it and
we want to try to move into this range.

64
00:03:32,830 --> 00:03:35,020
Now, let's talk about the problems.

65
00:03:35,020 --> 00:03:39,200
The big problem when we do a forward
warp is, in this instance,

66
00:03:39,200 --> 00:03:41,800
I moved all of the information
to a warped region here.

67
00:03:41,800 --> 00:03:44,330
And of course, imagine if there
is another pixel or region here,

68
00:03:44,330 --> 00:03:45,260
then I want to do it here.

69
00:03:45,260 --> 00:03:47,970
Of course, if it moves here,
there might be a cause for an overlap.

70
00:03:47,970 --> 00:03:51,354
Of course, it also is possible
that this region here,

71
00:03:51,354 --> 00:03:55,640
that this region here next to it,
moves here.

72
00:03:56,950 --> 00:03:57,550
And of course,

73
00:03:57,550 --> 00:04:01,290
all of a sudden, I have no information
connecting these two parts here.

74
00:04:01,290 --> 00:04:02,760
So of course, this would be a hole.

75
00:04:02,760 --> 00:04:05,910
So overlap would, would mean they go
next to each other overlapping in

76
00:04:05,910 --> 00:04:09,750
the information or, in this case, when
they're far away there would be a hole.

77
00:04:09,750 --> 00:04:12,430
So this is one of the problems
when I go forward.

78
00:04:12,430 --> 00:04:15,520
In the other end,
when I actually am going backwards,

79
00:04:15,520 --> 00:04:19,709
that is doing the inverse warp,
I know that these pixels belong to here.

80
00:04:19,709 --> 00:04:24,190
But the problem that comes in is,
when I actually start going for

81
00:04:24,190 --> 00:04:27,335
something that becomes smaller or
the minification process.

82
00:04:27,335 --> 00:04:28,880
I'll show that in a second.

83
00:04:28,880 --> 00:04:31,200
That would result in
all kinds of artifacts.

84
00:04:31,200 --> 00:04:34,470
One of the bigger artifacts in these
processes of course is aliasing or

85
00:04:34,470 --> 00:04:35,070
blocking.
