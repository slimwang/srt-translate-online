1
00:00:00,510 --> 00:00:04,230
The plan here is to create a database
for Wittr that stores these posts.

2
00:00:04,230 --> 00:00:08,090
When Wittr loads via a service worker,
it does so without going to the network.

3
00:00:08,090 --> 00:00:11,600
It fetches the page skeleton and
assets straight from the cache.

4
00:00:11,600 --> 00:00:14,680
Now, at the moment,
we have to go to the network for posts.

5
00:00:14,680 --> 00:00:15,940
We're going to change that.

6
00:00:15,940 --> 00:00:19,300
Instead, we'll get posts from
the database and display them.

7
00:00:19,300 --> 00:00:21,950
Meaning, we're now showing post
content before we go to the network.

8
00:00:22,980 --> 00:00:25,430
Then we'll connect the web
socket to get updated posts.

9
00:00:26,430 --> 00:00:31,890
As shown here, web sockets bypass both
the service worker and the HTTP cache.

10
00:00:31,890 --> 00:00:35,310
Then as new posts arrive, we'll add
them to our database for next time.

11
00:00:36,460 --> 00:00:38,765
First thing we're going to
do is populate the database.

12
00:00:38,765 --> 00:00:40,440
We'll deal with displaying
its contents later.

13
00:00:41,480 --> 00:00:43,790
If we take a look in public > js > main,

14
00:00:43,790 --> 00:00:48,770
IndexController.js, we can see a method
is called to open the web socket.

15
00:00:48,770 --> 00:00:51,210
And in that method, we can see
a listener for the message event.

16
00:00:52,480 --> 00:00:56,187
And that hands off to onSocketMessage,
passing in the data it received.

17
00:00:56,187 --> 00:01:01,350
OnSocketMessage parses the data with
JSON, then passes it to addPosts.

18
00:01:01,350 --> 00:01:04,137
Let's take a look at that data
by putting a console.log here.

19
00:01:05,980 --> 00:01:09,290
Over in the browser, I'm going to
check Force updates on page load so

20
00:01:09,290 --> 00:01:11,070
I can get that JavaScript
change straight away.

21
00:01:12,250 --> 00:01:13,110
And there are the logs.

22
00:01:14,590 --> 00:01:19,110
We can see that posts have an ID,
a time property, data on avatar, and

23
00:01:19,110 --> 00:01:20,730
a message body.

24
00:01:20,730 --> 00:01:23,170
We want to store these objects
straight into IndexedDB.

25
00:01:23,170 --> 00:01:25,494
There's an obvious primary key here, id.

26
00:01:25,494 --> 00:01:28,167
And we'll want to be able to
display them in date order, so

27
00:01:28,167 --> 00:01:29,980
we'll need to create an index on time.

28
00:01:31,720 --> 00:01:33,810
And it looks like I get to
take the next few minutes off,

29
00:01:33,810 --> 00:01:35,720
because the Mike alarm is ringing.

30
00:01:35,720 --> 00:01:37,430
Mike, one for the student to do?

31
00:01:37,430 --> 00:01:38,640
>> Yep, it sure is.

32
00:01:38,640 --> 00:01:39,230
Let's dive in.
