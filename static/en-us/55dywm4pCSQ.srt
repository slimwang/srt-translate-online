1
00:00:00,420 --> 00:00:03,250
If you're used to working with mobile
devices then your primary input

2
00:00:03,250 --> 00:00:06,200
device is a touch screen that's
always going to be connected

3
00:00:06,200 --> 00:00:08,830
unless your device is
having a very bad day.

4
00:00:08,830 --> 00:00:10,910
By contrast, TV remote controls and

5
00:00:10,910 --> 00:00:13,800
game controllers are usually
connected via Bluetooth.

6
00:00:13,800 --> 00:00:17,050
Because they're battery powered
controllers often sleep to save power,

7
00:00:17,050 --> 00:00:19,770
shutting down their radios after
a couple minutes of unuse.

8
00:00:19,770 --> 00:00:21,700
In this lesson,
we'll learn how to handle connect and

9
00:00:21,700 --> 00:00:24,120
disconnect events from input devices.

10
00:00:24,120 --> 00:00:27,180
The InputManager fires events when
devices are connected or disconnected,

11
00:00:27,180 --> 00:00:30,540
and it provides a method for
us to register an InputDeviceListener,

12
00:00:30,540 --> 00:00:33,030
which we can use to
subscribe to these events.

13
00:00:33,030 --> 00:00:36,070
Here they are, you can probably
guess what two of these mean.

14
00:00:36,070 --> 00:00:37,180
OnInputDeviceAdded and

15
00:00:37,180 --> 00:00:41,625
onInputDeviceRemoved are triggered when
devices are connected or disconnected.

16
00:00:41,625 --> 00:00:44,100
OnInputDeviceChanged is
a little bit different.

17
00:00:44,100 --> 00:00:47,080
Typically, input devices don't
change but they certainly can.

18
00:00:48,080 --> 00:00:48,690
For example,

19
00:00:48,690 --> 00:00:51,730
you can imagine a game controller
might have two different modes.

20
00:00:51,730 --> 00:00:55,450
A good strategy for dealing with a
change event is to simply disconnect and

21
00:00:55,450 --> 00:00:57,530
then reconnect the device.

22
00:00:57,530 --> 00:00:59,480
Let's see how our asteroids
game handles this, and

23
00:00:59,480 --> 00:01:01,470
we'll start back in the GameView.

24
00:01:01,470 --> 00:01:04,510
The fist thing to notice is that our
view implements the InputDeviceListener

25
00:01:04,510 --> 00:01:07,590
interface, and we'll see where
this is defined in a sec.

26
00:01:07,590 --> 00:01:09,120
Once we've implemented that interface,

27
00:01:09,120 --> 00:01:11,870
all we need to do is override
those three methods we discussed.

28
00:01:11,870 --> 00:01:13,840
Here's onInputDeviceAdded.

29
00:01:13,840 --> 00:01:16,590
What's cool here is that when
a controller is connected our game

30
00:01:16,590 --> 00:01:18,870
gets the device ID and
then creates a ship for it.

31
00:01:19,950 --> 00:01:22,400
We maintain a mapping from
ship to input device and

32
00:01:22,400 --> 00:01:25,270
in this way we can support
multiple players easily.

33
00:01:25,270 --> 00:01:27,970
When a controller is disconnected
we simply remove the ship

34
00:01:27,970 --> 00:01:29,770
corresponding to that device ID.

35
00:01:29,770 --> 00:01:31,400
Pretty easy, right?

36
00:01:31,400 --> 00:01:33,840
Here we are in the constructor
of our game view.

37
00:01:33,840 --> 00:01:37,070
The last step is to get a reference
to the InputManager and

38
00:01:37,070 --> 00:01:39,270
then register our view as Listener for
it.

39
00:01:39,270 --> 00:01:41,790
Rather than directly
accessing the system classes,

40
00:01:41,790 --> 00:01:45,610
we use the InputManagerCompat
provided by the controller sample.

41
00:01:45,610 --> 00:01:47,400
This is code that you're free to reuse.

42
00:01:47,400 --> 00:01:48,789
It abstracts the way differences and

43
00:01:48,789 --> 00:01:52,130
how input devices are handled across
different versions of Android.

44
00:01:52,130 --> 00:01:55,110
Instead of designing your game to work
within InputManager from a specific

45
00:01:55,110 --> 00:01:59,510
Android version, you can design your
game logic against InputManagerCompat.

46
00:01:59,510 --> 00:02:02,390
This class contains a factory
method which behind the scenes

47
00:02:02,390 --> 00:02:05,100
will instantiate an appropriate
concrete implementation

48
00:02:05,100 --> 00:02:07,660
depending on which version of Android
your game happens to be running on.

49
00:02:09,008 --> 00:02:12,800
And you can see that Factory
method inside InputManagerCompat

50
00:02:12,800 --> 00:02:13,640
right down here at the bottom.

51
00:02:14,980 --> 00:02:17,550
And by the way, the Factory designed
pattern is one of my favorites, and

52
00:02:17,550 --> 00:02:19,480
I highly recommend learning it
if you haven't seen it before.
