1
00:00:00,000 --> 00:00:04,080
There's actually two correct answers here depending on how you think about it.

2
00:00:04,080 --> 00:00:15,970
Both answers in common that it's always 2<i>n+1</i>a, and depending on how you count this line here,

3
00:00:15,970 --> 00:00:22,430
it's going to be either a 0 or a 1 and the reason for that is the following--

4
00:00:22,430 --> 00:00:28,200
the first line again takes 0*6 as in all previous examples.

5
00:00:28,200 --> 00:00:38,110
For the second line, it either takes n time steps if you assume that this for loop here goes

6
00:00:38,110 --> 00:00:43,110
exactly through each character of the string and then stops immediately or it takes n+1 loops

7
00:00:43,110 --> 00:00:46,810
if you assume that it's executed like a for loop or while loop.

8
00:00:46,810 --> 00:00:52,200
This again shows that it can be very annoying to do exact time counting.

9
00:00:52,200 --> 00:00:57,980
The next step though is always execute n times because the number of times this inter loop here

10
00:00:57,980 --> 00:01:05,530
is executed does not depend on the number of time steps it takes for this line here to end.

11
00:01:05,530 --> 00:01:10,390
And finally, the counter is always increased when the algorithm encounters an a,

12
00:01:10,390 --> 00:01:14,520
so this line here is executed exactly 8 times.

13
00:01:14,520 --> 00:01:22,340
And if you sum up all of these, you get 2n+1*a, and depending on how you count this line,

14
00:01:22,340 --> 99:59:59,999
you either get a 0 or 1.
