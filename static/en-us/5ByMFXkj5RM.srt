1
00:00:00,420 --> 00:00:05,060
With this recurrence defined, we are now
ready for the Floyed-Warshall Algorithm.

2
00:00:05,060 --> 00:00:07,420
Note that if we were to simply
implement this with recursion,

3
00:00:07,420 --> 00:00:09,210
we would do a lot of recomputation.

4
00:00:10,420 --> 00:00:15,480
Delta u k, k minus one would be
computed for every vertex v.

5
00:00:16,500 --> 00:00:20,620
And delta k, v,
k minus 1 would be computed for

6
00:00:20,620 --> 00:00:23,490
every vertex u, in every iteration.

7
00:00:23,490 --> 00:00:25,520
As you might have guessed,
we're going to fill out a table.

8
00:00:26,530 --> 00:00:29,090
The sub problems here
have three indices, but

9
00:00:29,090 --> 00:00:32,089
thankfully, only two will be
required for us in the algorithm.

10
00:00:33,320 --> 00:00:35,563
We create a two-dimensional table,

11
00:00:35,563 --> 00:00:40,210
d, indexed by the source and
destination vertices of the path.

12
00:00:40,210 --> 00:00:41,770
We initialize it for k equals 0,

13
00:00:41,770 --> 00:00:46,860
where there are no vertices allowed,
just based on the edges.

14
00:00:46,860 --> 00:00:50,170
Then we add potential
intermediate vertices one by one,

15
00:00:50,170 --> 00:00:51,159
in this outer loop here.

16
00:00:52,240 --> 00:00:57,000
For each source destination pair
we account for the possibility of

17
00:00:57,000 --> 00:01:02,090
using k as an intermediate vertex,
with this update equation.

18
00:01:02,090 --> 00:01:08,250
Note that when i or j is equal to
k this weight here won't change,

19
00:01:08,250 --> 00:01:11,930
since a vertex can't be useful
in the shortest path to itself.

20
00:01:11,930 --> 00:01:16,570
Hence, we don't need to worry about
using outdated value in this loop here.

21
00:01:16,570 --> 00:01:19,260
To extract not just the weights
of the shortest paths, but

22
00:01:19,260 --> 00:01:24,810
also the paths themselves, we keep a
predecessor table, which we'll call pi,

23
00:01:24,810 --> 00:01:29,450
that contains the second to last
vertex on a path from u to v.

24
00:01:29,450 --> 00:01:32,460
Initially, when all paths
are just single edges,

25
00:01:32,460 --> 00:01:36,920
this is just the other
vertex on the incident edge.

26
00:01:36,920 --> 00:01:41,510
In the update phase, we either
leave the predecessor alone, or

27
00:01:41,510 --> 00:01:43,750
if we are going to change the path,

28
00:01:43,750 --> 00:01:49,370
then we switch it to the predecessor of
the second half of the path from k to j.
