1
00:00:00,000 --> 00:00:04,000
We just looked to an example where measuring coverage

2
00:00:04,000 --> 00:00:06,000
was useful in finding a bug in a piece of code.

3
00:00:06,000 --> 00:00:10,000
What I want to show you now is another piece of code. This would be a really quick example.

4
00:00:10,000 --> 00:00:12,000
The coverage is not particularly useful in spotting the bug.

5
00:00:12,000 --> 00:00:16,000
And so, what I have here on the screening is a broken function.

6
00:00:16,000 --> 00:00:19,000
The job is to determine whether a number is prime.

7
00:00:19,000 --> 00:00:22,000
That is to say, it doesn't correctly do its job of determining whether the number is prime.

8
00:00:22,000 --> 00:00:26,000
So, let's look at the logic in this function. So, this prime takes a number.

9
00:00:26,000 --> 00:00:32,000
If the number is less than or equal to 1 or divisible by 2, then it's not prime.

10
00:00:32,000 --> 00:00:37,000
Now, once the number passes that test, what we are going to do is loop over every number

11
00:00:37,000 --> 00:00:39,000
between 3 and the square root of the number

12
00:00:39,000 --> 00:00:42,000
and check if the original input number divides evenly by that number.

13
00:00:42,000 --> 00:00:45,000
If it does, then of course, we don't have a prime number.

14
00:00:45,000 --> 00:00:49,000
And if all of those tests failed to find a divisor, then we have a prime number.

15
00:00:49,000 --> 00:00:52,000
And so, as can you see, there is a little bit of test code here that checks

16
00:00:52,000 --> 00:00:56,000
how this function responds for the numbers 1 through 5 and 23, 24.

17
00:00:56,000 --> 00:00:58,000
And so, what to do is let's just run this code.

18
00:00:58,000 --> 00:01:07,000
This code has correctly computed that 1 is not prime, 2 is not prime, 3 is prime, 4 is not, but 5 is.

19
00:01:07,000 --> 00:01:12,000
Similarly, 20, 21, and 22 are not prime numbers. They all have divisors

20
00:01:12,000 --> 00:01:15,000
23 is prime, and 24 is not.

21
00:01:15,000 --> 00:01:20,000
So, for this 10 examples, this prime function has successfully identified

22
00:01:20,000 --> 00:01:23,000
whether the input is prime or not--so, let's run the code coverage tool.

23
00:01:23,000 --> 00:01:26,000
We got the same output. Now, let's look at the results.

24
00:01:26,000 --> 00:01:29,000
So, we can see out of the 20 statements in the file, all of them run,

25
00:01:29,000 --> 00:01:31,000
and none of them failed to be covered.

26
00:01:31,000 --> 00:01:36,000
Statement coverage gives us a perfect result for this particular code and yet another set is wrong.

27
00:01:36,000 --> 00:01:39,000
Here of the same code and ID, so let's run out.

28
00:01:39,000 --> 00:01:42,000
The output is what we expect, and what I would like you to do is do 2 things.

29
00:01:42,000 --> 00:01:47,000
First of all, at least 1 test case, where you check a value for prime and

30
00:01:47,000 --> 00:01:49,000
the code here returns the wrong result.

31
00:01:49,000 --> 00:01:54,000
And then second, create a new function is prime 2 that fixes the error.

32
00:01:54,000 --> 00:01:56,000
That is to say a correctly identifies for any natural number input.

33
00:01:56,000 --> 99:59:59,999
That is to say any input 1 or larger whether it's prime.
