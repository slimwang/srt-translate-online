1
00:00:00,450 --> 00:00:01,210
Hey, Catherine.

2
00:00:01,210 --> 00:00:04,330
So for the numbers activity, we want to
be able to display the list of numbers

3
00:00:04,330 --> 00:00:05,600
one through ten on the upstream.

4
00:00:05,600 --> 00:00:07,430
Do you have any idea
how we should do this.

5
00:00:07,430 --> 00:00:10,410
>> Yeah well in the last course we
talked about how you can store a single

6
00:00:10,410 --> 00:00:11,800
piece of information in a variable.

7
00:00:11,800 --> 00:00:13,100
>> That's right that's right.

8
00:00:13,100 --> 00:00:14,360
So we can adjust.

9
00:00:14,360 --> 00:00:15,460
We use an integer variable

10
00:00:16,590 --> 00:00:19,280
quantity to store the number of
cups of coffee the over here.

11
00:00:19,280 --> 00:00:20,020
>> Okay.
So

12
00:00:20,020 --> 00:00:22,490
in this case why don't we
just use ten string variable.

13
00:00:23,610 --> 00:00:24,340
Is this.

14
00:00:24,340 --> 00:00:27,680
So we can have a string variable for the
number one for the number two and for

15
00:00:27,680 --> 00:00:29,430
the number three and so on.

16
00:00:29,430 --> 00:00:32,600
>> You have a good idea but there's
actually a better way we could do this.

17
00:00:32,600 --> 00:00:33,980
>> What do you mean better.

18
00:00:33,980 --> 00:00:36,166
>> There was something called an array.

19
00:00:36,166 --> 00:00:38,510
>> Okay, what is that?

20
00:00:38,510 --> 00:00:40,570
>> Or
it's the real hope to store a list of.

21
00:00:41,590 --> 00:00:45,050
And help us maintain the order because
with a list of numbers like this,

22
00:00:45,050 --> 00:00:48,240
it was easy to get mixed up in
display the information all wrong.

23
00:00:48,240 --> 00:00:51,240
>> Okay that sounds good, but the since
haven't learned about a raise yet.

24
00:00:51,240 --> 00:00:52,840
So we're going to need to explain that.

25
00:00:52,840 --> 00:00:54,610
Do you have like an analogy or
something for that?

26
00:00:54,610 --> 00:00:58,870
>> As a matter of fact I do
>> The pill box.

27
00:00:58,870 --> 00:01:00,170
Where did you get that?

28
00:01:00,170 --> 00:01:03,030
That totally looks like the one
my aunt has for vitamins.

29
00:01:03,030 --> 00:01:04,750
>> Yeah know she might be calling soon.

30
00:01:04,750 --> 00:01:05,930
>> Okay anyways.

31
00:01:05,930 --> 00:01:07,790
How is the pill box like an array?

32
00:01:07,790 --> 00:01:10,940
>> Well an array is like
a container of a fixed length.

33
00:01:10,940 --> 00:01:13,950
So what is it created it
stays that length and so

34
00:01:13,950 --> 00:01:15,490
this pill box has a length of seven.

35
00:01:16,870 --> 00:01:18,790
And each slot stores a single value.

36
00:01:18,790 --> 00:01:21,240
>> Wait so
I can store anything in that slot.

37
00:01:21,240 --> 00:01:23,630
>> Well around storing
anything in there so

38
00:01:23,630 --> 00:01:26,810
you can have your uncle's
pills in your aunt's pill box.

39
00:01:26,810 --> 00:01:30,170
So once you create the ream all
about how to be of the same type.

40
00:01:30,170 --> 00:01:31,990
So we have entire array of strings,

41
00:01:31,990 --> 00:01:34,680
entire array Boolean,
entire array of integers.

42
00:01:35,970 --> 00:01:38,770
Okay, but
what if I want to store the strings?

43
00:01:40,350 --> 00:01:41,450
Like, one two and three.

44
00:01:41,450 --> 00:01:42,010
>> Mmm, good point.

45
00:01:42,010 --> 00:01:45,120
So, for
one you can store in the first index.

46
00:01:45,120 --> 00:01:49,660
>> Okay, and then in the second slot
we would store the string two and

47
00:01:49,660 --> 00:01:51,500
then third slot we would
store string three.

48
00:01:52,780 --> 00:01:55,130
>> Yeah that's precisely
how the numbers go upwards

49
00:01:56,500 --> 00:01:57,100
>> All right so

50
00:01:57,100 --> 00:01:59,310
once we have the numbers in the slot.

51
00:01:59,310 --> 00:02:01,430
We can pull all the values that we need.

52
00:02:01,430 --> 00:02:03,493
>> Later on when we
need to display that.

53
00:02:03,493 --> 00:02:04,380
>> Exactly.

54
00:02:04,380 --> 00:02:06,360
>> Wait so
we discovered a really powerful concept.

55
00:02:06,360 --> 00:02:10,320
If you want to store a list of
information you can just use an array.

56
00:02:10,320 --> 00:02:11,380
Yeah, it's a good point.

57
00:02:11,380 --> 00:02:13,930
But one important thing to
remember is that each element

58
00:02:13,930 --> 00:02:16,100
of the array has to be
of the same data type.

59
00:02:16,100 --> 00:02:17,250
>> Yeah.
And sometimes,

60
00:02:17,250 --> 00:02:18,790
if you just want to store one thing,

61
00:02:18,790 --> 00:02:22,020
like one string, then you can
just use an individual variable.

62
00:02:22,020 --> 00:02:23,130
>> Nice.
Spot on, Kathryn.

63
00:02:24,770 --> 00:02:26,090
Citing how to store your data

64
00:02:26,090 --> 00:02:28,920
is known as choosing the right
data structures for your app.

65
00:02:28,920 --> 00:02:33,120
When you need an array, and if you need
one, which type of array should it be?

66
00:02:33,120 --> 00:02:34,890
Java is a strongly typed language.

67
00:02:34,890 --> 00:02:37,340
This means that every time you
create a variable in Java you

68
00:02:37,340 --> 00:02:39,490
need to specify what data type it is.

69
00:02:39,490 --> 00:02:44,030
In the last course we work with basic
data types like integer and boolean but

70
00:02:44,030 --> 00:02:47,550
will also work with more sophisticated
object up types like TextView

71
00:02:47,550 --> 00:02:48,250
and ImageView.

72
00:02:48,250 --> 00:02:51,160
You can only do certain operations
with certain data types for

73
00:02:51,160 --> 00:02:55,020
example you can add two integers
With the plus operator.

74
00:02:55,020 --> 00:02:57,440
But it doesn't make sense
to add two Booleans.

75
00:02:57,440 --> 00:03:00,030
So when we have to set
text on a text view,

76
00:03:00,030 --> 00:03:02,740
it expects a string as an input and
not an integer.

77
00:03:02,740 --> 00:03:03,830
So Java will complain and

78
00:03:03,830 --> 00:03:06,800
give you errors if you have
data mismatches in your code.

79
00:03:06,800 --> 00:03:09,620
So to help you out we've
created this document

80
00:03:09,620 --> 00:03:14,530
that discusses some primitive data
types and some object data types.

81
00:03:14,530 --> 00:03:20,520
So you often hear primitive data types
referred to as the 8 basic data types

82
00:03:20,520 --> 00:03:26,320
and you may recognize one such as
Int which is a whole number and

83
00:03:26,320 --> 00:03:30,380
Boolean which has the values
either true or false.

84
00:03:30,380 --> 00:03:33,660
So there are some new ones here that
you may not have used before, but

85
00:03:33,660 --> 00:03:35,740
they may be helpful for
you to use in the future.

86
00:03:35,740 --> 00:03:42,120
So for example, double is a decimal and
char is a single character.

87
00:03:42,120 --> 00:03:45,210
Additionally, you'll see that string
is not listed under the Primitive

88
00:03:45,210 --> 00:03:46,430
datatypes.

89
00:03:46,430 --> 00:03:49,890
By now you should be familiar with
string as a text of any length.

90
00:03:49,890 --> 00:03:53,660
It's actually an object of a type and
not a primitive one and

91
00:03:53,660 --> 00:03:57,460
this is why we capitalize
the first letter s in string but

92
00:03:57,460 --> 00:04:02,530
we don't capitalize C and Char or
b in Boolean for example.

93
00:04:02,530 --> 00:04:06,420
even though string is an object data
type is treated in a special way in Java

94
00:04:06,420 --> 00:04:10,420
you can automatically create a new
string by enclosing the text in quotes

95
00:04:10,420 --> 00:04:13,380
instead of formally calling this
a constructor with the new keyword.

96
00:04:14,560 --> 00:04:16,870
Now you can have an array
of any data type

97
00:04:16,870 --> 00:04:20,140
from primitive types to object types.

98
00:04:20,140 --> 00:04:23,420
So for example you can have
an array of integers And or

99
00:04:23,420 --> 00:04:27,120
of characters or
even an array of floats.

100
00:04:27,120 --> 00:04:29,740
Additionally we have
a right types of objects.

101
00:04:29,740 --> 00:04:33,470
So we can have an array of strings or
even objects that are listed here

102
00:04:33,470 --> 00:04:37,350
such as an array of TextView or
an array of buttons.

103
00:04:37,350 --> 00:04:39,810
Keeping in mind what you just
learned about arrays and

104
00:04:39,810 --> 00:04:43,610
what we've reviewed about data
types try to answer this quiz.

105
00:04:43,610 --> 00:04:45,070
We've prepared a couple scenarios for

106
00:04:45,070 --> 00:04:46,960
different apps that you may
run into as a developer.

107
00:04:46,960 --> 00:04:50,690
And it's your task to decide how to
represent that information in your app.

108
00:04:51,710 --> 00:04:53,440
Now given these scenarios,

109
00:04:53,440 --> 00:04:55,846
what data structure would you use
to store the data in the app?

110
00:04:55,846 --> 00:05:00,250
Integer, Boolean, String,

111
00:05:00,250 --> 00:05:04,780
an array of integers, an array of
Strings, or maybe something else.

112
00:05:04,780 --> 00:05:07,740
So the first scenario is for
a Travel app.

113
00:05:07,740 --> 00:05:10,220
And you're storing items the pack for
traveling.

114
00:05:10,220 --> 00:05:11,410
The second scenario is for

115
00:05:11,410 --> 00:05:14,790
a YouTube app you want to know the
number of people who viewed that video.

116
00:05:15,820 --> 00:05:18,720
The third scenario for
a Settings app and

117
00:05:18,720 --> 00:05:21,529
you want to store the languages
supported on an Android device.

118
00:05:22,660 --> 00:05:25,290
The fourth one, for a shopping app.

119
00:05:25,290 --> 00:05:27,640
You want to know whether
a product is in stock or not.

120
00:05:29,060 --> 00:05:31,650
For a fifth scenario, for a lottery app.

121
00:05:31,650 --> 00:05:34,750
The winning combinations of five numbers
for a single round of the lottery.

122
00:05:34,750 --> 00:05:38,820
I the last scenario for you to
determine what data structures to use.

123
00:05:38,820 --> 00:05:40,160
For Health track app.

124
00:05:40,160 --> 00:05:43,100
The number of miles or
kilometers walk for each day this week.
