1
00:00:00,032 --> 00:00:01,994
So let's summarize how to compact.

2
00:00:01,994 --> 00:00:06,729
Conceptually, there are 4 steps, though an efficient implementation might combine these into fewer.

3
00:00:06,736 --> 00:00:10,245
First, we're going to run a predicate on each element of the input.

4
00:00:10,245 --> 00:00:14,462
Then we'll create a scan-in array equal in size to the input.

5
00:00:14,462 --> 00:00:21,333
For each element of the input, if the predicate is true, put a 1 into the scan-in array. If it's false, put a 0.

6
00:00:21,333 --> 00:00:29,077
Then we exclusive sum scan the scan in array. The output of this is scatter addresses for compacted array.

7
00:00:29,077 --> 00:00:31,711
Now, for the final step--for each element of the input,

8
00:00:31,711 --> 00:00:35,102
if the predicate is true, then scatter the input element

9
00:00:35,102 --> 00:00:38,770
into the output array, at the address in scan out.

10
00:00:38,770 --> 00:00:43,110
Let's try a little quiz to get some intuition about the run time of compact.

11
00:00:43,110 --> 00:00:46,591
We're going to compare 2 compact operations, and both

12
00:00:46,591 --> 00:00:51,132
are going to compact the list of numbers from 1 to 1 million.

13
00:00:51,132 --> 00:00:59,319
Compact operation a--let's say is divisible by 17--is only going to keep a very few of the input items.

14
00:00:59,319 --> 00:01:06,381
Whereas compact operation b--is not divisible by 31--is going to keep most of the input items.

15
00:01:06,381 --> 00:01:11,721
So for each of the predicate, scan, and scatter faces of the compact operation,

16
00:01:11,721 --> 00:01:16,266
will a run faster, b run faster or will they take the same amount of time?
