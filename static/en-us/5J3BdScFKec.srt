1
00:00:00,340 --> 00:00:02,530
So far we've been pessimistic that we may have

2
00:00:02,530 --> 00:00:06,130
crashes, but hopefully crashes are not something that happen

3
00:00:06,130 --> 00:00:09,480
very often. [LAUGH] And if crashes don't happen that

4
00:00:09,480 --> 00:00:12,380
often, crash recovery is not that important. But on the

5
00:00:12,380 --> 00:00:15,440
other hand, if crashes are not happening but the

6
00:00:15,440 --> 00:00:18,760
system is progressing along, And what is going to happen

7
00:00:18,760 --> 00:00:22,310
is that we're going to create lots of log records

8
00:00:22,310 --> 00:00:26,310
on the disk as the system is making forward progress.

9
00:00:26,310 --> 00:00:28,700
So we have external data segments, which of course

10
00:00:28,700 --> 00:00:31,610
we need because that is were the persistent objects

11
00:00:31,610 --> 00:00:34,170
are actually contained, but we are also creating these

12
00:00:34,170 --> 00:00:37,820
redo log records. There are reflections of changes that we

13
00:00:37,820 --> 00:00:41,350
made to the in memory versions of these persistent

14
00:00:41,350 --> 00:00:45,960
data structures. Eventually one of these redo logs that

15
00:00:45,960 --> 00:00:48,570
represent changes to the external data segment to be

16
00:00:48,570 --> 00:00:51,760
applied to the external data segments. Now the only time

17
00:00:51,760 --> 00:00:53,970
we're going to do that Is when a crash

18
00:00:53,970 --> 00:00:58,140
happens, that's being very pessimistic. Also, we may end

19
00:00:58,140 --> 00:01:00,210
up clogging the disk with a number of

20
00:01:00,210 --> 00:01:03,400
redo log records. We've seen the need for log

21
00:01:03,400 --> 00:01:06,310
truncation in the distributed shared memory systems as

22
00:01:06,310 --> 00:01:09,240
well. In the case of DSM, those logs were

23
00:01:09,240 --> 00:01:13,050
clogging physical memory. In the case LRVM, these logs

24
00:01:13,050 --> 00:01:17,440
are clogging the disk space. Regardless, these are unnecessary

25
00:01:17,440 --> 00:01:21,350
overhead in terms of space and clutter, and also,

26
00:01:21,350 --> 00:01:25,480
if a particular application needs to map an external

27
00:01:25,480 --> 00:01:27,980
data segment, then we have to know whether that

28
00:01:27,980 --> 00:01:30,900
data segment is up to date or not. And

29
00:01:30,900 --> 00:01:32,870
that depends on whether or not there are some

30
00:01:32,870 --> 00:01:36,510
redo logs pending. To be applied to those external

31
00:01:36,510 --> 00:01:39,330
data segments. So all of these things suggest that

32
00:01:39,330 --> 00:01:42,420
what we need to do is truncate the log periodically.

33
00:01:42,420 --> 00:01:49,650
What exactly is truncating the log? It means that we want to read the logs from

34
00:01:49,650 --> 00:01:54,220
the disk and apply them to the external data segments and get rid of them. Now

35
00:01:54,220 --> 00:01:56,130
this sounds exactly like what I described

36
00:01:56,130 --> 00:01:59,670
to you happens when we do recovery from

37
00:01:59,670 --> 00:02:03,560
a crash. Therefore for Log truncation, simply apply

38
00:02:03,560 --> 00:02:07,610
crash recovery algorithm. So any time the system,

39
00:02:07,610 --> 00:02:11,170
meaning the LRVM run time, decides that it is time

40
00:02:11,170 --> 00:02:13,160
to do some clean up, what it is going to do

41
00:02:13,160 --> 00:02:16,600
is it's going to go and pick some logs to clean,

42
00:02:16,600 --> 00:02:20,850
bring those logs into memory Read the redo log records. Apply

43
00:02:20,850 --> 00:02:23,520
them to the appropriate data segment. And throw away the lock

44
00:02:23,520 --> 00:02:26,950
record. So that's what lock truncation is all about. Of course

45
00:02:26,950 --> 00:02:29,730
we don't want to stop the world in order to do

46
00:02:29,730 --> 00:02:33,070
this lock truncation. So what we want to do we is.

47
00:02:33,070 --> 00:02:35,040
We want to do this lock truncation in

48
00:02:35,040 --> 00:02:38,790
parallel with forward processing by the application. And

49
00:02:38,790 --> 00:02:46,950
the way LRVM allows that to happen. Is it splits the log record into Epochs. It

50
00:02:46,950 --> 00:02:52,360
says this is a portion of the log record that I've chosen the cleanup and this

51
00:02:52,360 --> 00:02:58,120
is a truncation Epoch, and so this is the part that I'm going to use to read

52
00:02:58,120 --> 00:03:02,950
from the desk and apply to the external data segment. And in parallel

53
00:03:02,950 --> 00:03:07,950
with that, I'm going to allow the application to make changes. This is a current

54
00:03:07,950 --> 00:03:13,440
epoch where the application is making changes to the log record.

55
00:03:13,440 --> 00:03:18,720
And the new record which is not yet being used. So, the idea is that

56
00:03:18,720 --> 00:03:23,870
we are allowing RVM to do it's work in terms of Log

57
00:03:23,870 --> 00:03:27,400
truncation by reading a portion of this log

58
00:03:27,400 --> 00:03:29,360
which is a truncation epoch portion of the

59
00:03:29,360 --> 00:03:32,340
log, and applying to the external data segments.

60
00:03:32,340 --> 00:03:35,330
And in parallel with that, we're also allowing

61
00:03:35,330 --> 00:03:40,070
the application to make forward progress by writing

62
00:03:40,070 --> 00:03:43,110
new log records to the current epoch. So

63
00:03:43,110 --> 00:03:48,950
the crash recovery algorithm is being applied to the part of the log that is in

64
00:03:48,950 --> 00:03:52,830
this truncation epoch while allowing forward processing to the

65
00:03:52,830 --> 00:03:55,670
part of the log which is the current epoch

66
00:03:55,670 --> 00:03:58,500
that the server is working on. The biggest challenge

67
00:03:58,500 --> 00:04:02,400
in implementing LRVM is the log truncation code because there's

68
00:04:02,400 --> 00:04:05,770
so much coordination that is needed Between what the

69
00:04:05,770 --> 00:04:08,200
LRV and run time has to do and what

70
00:04:08,200 --> 00:04:11,280
the application may be doing in terms of morphing

71
00:04:11,280 --> 00:04:14,030
the current log segment. You need the log segment for

72
00:04:14,030 --> 00:04:16,779
recovery but it will also overhead when there are

73
00:04:16,779 --> 00:04:18,870
no crashes. And they take up a lot of

74
00:04:18,870 --> 00:04:22,830
disc space. And puts extra burden on mapping and

75
00:04:22,830 --> 00:04:25,600
data segment through the subsystem that wants to use

76
00:04:25,600 --> 00:04:29,630
it. So, managing the logs, truncating the log as

77
00:04:29,630 --> 00:04:32,730
efficiently as possible is one of the heaviest problems

78
00:04:32,730 --> 00:04:35,670
according to the authors of this paper in implementing

79
00:04:35,670 --> 00:04:39,460
LRVM because it directly has a consequence on the performance

80
00:04:39,460 --> 00:04:43,670
of LRVM. And in fact the bulk of the heavy lifting that is done in

81
00:04:43,670 --> 00:04:48,120
implementing LRVM run time and make it really

82
00:04:48,120 --> 00:04:51,930
lightweight and efficient goes in doing this lock

83
00:04:51,930 --> 00:04:55,640
truncation efficiently. What I've described to you here,

84
00:04:55,640 --> 00:04:59,740
is one course level of lot truncation where

85
00:04:59,740 --> 00:05:02,060
We are taking the redo logs and applying

86
00:05:02,060 --> 00:05:05,220
it. A more finer grained way of implementing

87
00:05:05,220 --> 00:05:11,420
log truncation would be to look at in memory copy of the log segment also,

88
00:05:11,420 --> 00:05:15,590
and trying to make sure that we apply it to the external data segments so that

89
00:05:15,590 --> 00:05:21,140
we don't even incur the cost of writing a disk version of the redo log. That

90
00:05:21,140 --> 00:05:25,490
is even more complicated and I welcome you to read details of that in the paper.
