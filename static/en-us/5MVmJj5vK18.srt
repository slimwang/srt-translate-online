1
00:00:00,280 --> 00:00:03,030
You'll notice that when I
re ran the application,

2
00:00:03,030 --> 00:00:04,689
it didn't require us to build again.

3
00:00:04,689 --> 00:00:08,270
And that's because break points
are created by the debugger itself and

4
00:00:08,270 --> 00:00:11,180
they're not part of your
application source.

5
00:00:11,180 --> 00:00:14,770
On the main screen, I'll select
the break point debugging scene.

6
00:00:14,770 --> 00:00:17,250
And then,
I'll tap the screen to create a spider.

7
00:00:17,250 --> 00:00:20,680
As soon as I tap, we're immediately
redirected back to Xcode.

8
00:00:20,680 --> 00:00:22,310
What's happening?

9
00:00:22,310 --> 00:00:25,450
First, don't be alarmed, your
application's actually still running.

10
00:00:25,450 --> 00:00:28,600
But the execution's been
paused at this break point.

11
00:00:28,600 --> 00:00:29,560
With your app paused,

12
00:00:29,560 --> 00:00:32,470
we can now use Xcode's debugging
tools to inspect our code.

13
00:00:32,470 --> 00:00:36,160
At the bottom of Xcode,
the debug area is revealed, and

14
00:00:36,160 --> 00:00:38,750
the bottom is split into two views.

15
00:00:38,750 --> 00:00:42,700
We have the variables view on the left,
and the console on the right.

16
00:00:42,700 --> 00:00:46,180
And you can re-veil the debug area
by clicking on this button here.

17
00:00:46,180 --> 00:00:51,410
Like so, or
by using the hot key Shift + Cmd + Y.

18
00:00:51,410 --> 00:00:54,140
Personally, I always like to reveal
the debug area when I'm running

19
00:00:54,140 --> 00:00:55,430
applications.

20
00:00:55,430 --> 00:01:00,750
To enable this feature, go back to
X code, and then go to preferences.

21
00:01:00,750 --> 00:01:05,376
Go to behaviors, and in behaviors
you want to look for running,

22
00:01:05,376 --> 00:01:10,961
the running section here, and then look
for the Starts option and select it.

23
00:01:10,961 --> 00:01:15,429
And then check the box here
that says selection, show,

24
00:01:15,429 --> 00:01:19,057
debugger with variables and
Console views.

25
00:01:19,057 --> 00:01:22,442
So like it reads when your
application starts running,

26
00:01:22,442 --> 00:01:26,240
we'll show the debugger
with these two views.

27
00:01:26,240 --> 00:01:30,010
With the debug area revealed you can use
the two buttons in the bottom right hand

28
00:01:30,010 --> 00:01:34,180
corner to hide the variables view,
and hide the console view.

29
00:01:35,320 --> 00:01:37,350
In the variables view on the left,

30
00:01:37,350 --> 00:01:40,920
we can see all the variables that
are visible in the current view mode.

31
00:01:40,920 --> 00:01:43,140
The default view mode is Auto.

32
00:01:43,140 --> 00:01:46,350
Auto shows variables that are currently
in scope that the debugger thinks you're

33
00:01:46,350 --> 00:01:51,070
most likely interested in, given the
context and current line of execution.

34
00:01:51,070 --> 00:01:54,960
The other view modes include local
variables and all variables, registers,

35
00:01:54,960 --> 00:01:56,830
globals, and statics.

36
00:01:56,830 --> 00:02:00,050
The local variables view
mode shows the variables and

37
00:02:00,050 --> 00:02:03,120
arguments that have been declared
in the current function or

38
00:02:03,120 --> 00:02:06,490
block, as well as
the special variable self.

39
00:02:06,490 --> 00:02:09,870
Self is also usually displayed
in the auto mode and

40
00:02:09,870 --> 00:02:12,930
it's an alias to the object whose
function or blocks been called.

41
00:02:14,030 --> 00:02:18,400
So in this case, self refers to
a breakpoint bug viewController.

42
00:02:18,400 --> 00:02:19,600
And it contains all the values and

43
00:02:19,600 --> 00:02:23,160
properties of this breakpoint
bug view controller.

44
00:02:23,160 --> 00:02:25,900
The last view mode displays everything.

45
00:02:25,900 --> 00:02:29,680
This includes local variables,
globals, and even registers.

46
00:02:29,680 --> 00:02:30,538
Typically, auto or

47
00:02:30,538 --> 00:02:33,370
local view modes will be all that
you need when you're debugging.

48
00:02:33,370 --> 00:02:36,090
However, this mode's
here if you need it.

49
00:02:36,090 --> 00:02:37,750
So we'll go back to auto.

50
00:02:37,750 --> 00:02:39,690
On the right is the console.

51
00:02:39,690 --> 00:02:43,110
And right now the only thing in
the console are the letters LLDB

52
00:02:43,110 --> 00:02:44,560
in parenthesis.

53
00:02:44,560 --> 00:02:49,040
These letters refer to the LLDB
debugger or low level debugger.

54
00:02:49,040 --> 00:02:51,990
Here, we're able to type
any valid LLDB commands.

55
00:02:51,990 --> 00:02:57,770
And we'll talk more in depth about these
commands and LLDB later in the course.

56
00:02:57,770 --> 00:02:58,920
Back in the main area,

57
00:02:58,920 --> 00:03:02,490
we've already seen that we can
toggle our breakpoints on and off.

58
00:03:02,490 --> 00:03:07,190
So this time let's set this breakpoint
inactive, and then click on this button

59
00:03:07,190 --> 00:03:12,080
here in the debugging bar to
continue the program's execution.

60
00:03:12,080 --> 00:03:16,230
Once the app becomes active, I'll tap
the screen, and this time the execution

61
00:03:16,230 --> 00:03:20,280
doesn't pause when I tap on the screen
because the Breakpoint's disabled.

62
00:03:20,280 --> 00:03:23,340
But you've probably also
noticed there's a problem.

63
00:03:23,340 --> 00:03:25,500
Our spiders are not appearing
on the screen again.

64
00:03:25,500 --> 00:03:29,154
And to figure out why we have this
problem, we'll make use of breakpoints,

65
00:03:29,154 --> 00:03:31,840
the variables view, and
something called a stack frame next.
