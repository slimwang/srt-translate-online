1
00:00:00,450 --> 00:00:03,018
The answer is it doesnt work very well. So the

2
00:00:03,018 --> 00:00:06,753
reason for this is that anyone observing these

3
00:00:06,753 --> 00:00:08,953
messages given that there is only a small

4
00:00:08,953 --> 00:00:12,115
set while you can compute this value given the

5
00:00:12,115 --> 00:00:16,161
public keys of C, B and A, you can compute the

6
00:00:16,161 --> 00:00:20,002
value of Xi for the three possible votes, match

7
00:00:20,002 --> 00:00:22,949
that up to the incoming votes, know exactly what

8
00:00:22,949 --> 00:00:25,597
they are so there is no anonymity for the voters,

9
00:00:25,597 --> 00:00:28,548
so either A or an eavesdropper could do this.

10
00:00:28,548 --> 00:00:30,783
The second choice is a little more ambiguous.

11
00:00:30,783 --> 00:00:32,636
See you could output any votes at once,

12
00:00:32,636 --> 00:00:34,317
there is nothing that verifies the votes that C

13
00:00:34,317 --> 00:00:37,603
outputs. But in this case because the encryption is

14
00:00:37,603 --> 00:00:41,774
broken, someone looking at that votes that come in

15
00:00:41,774 --> 00:00:44,379
knows what the votes are already and knows if C

16
00:00:44,379 --> 00:00:46,795
cheats but theres no point to the Mixnet if this is

17
00:00:46,795 --> 00:00:50,041
what we do. So we need to do something different;

18
00:00:50,041 --> 00:00:52,239
this by itself is not going to work. What we need

19
00:00:52,239 --> 00:00:56,000
to do is add some randomization to our encryption.
