1
00:00:00,170 --> 00:00:03,480
Okay, now let's remember our goal,
replacing our weather icons

2
00:00:03,480 --> 00:00:07,310
through Sunshine with images
downloaded from the internet.

3
00:00:07,310 --> 00:00:09,510
Of course,
before we can use Glide with anything,

4
00:00:09,510 --> 00:00:11,360
we'll need to add
the library to our project.

5
00:00:11,360 --> 00:00:16,390
In fact, we use the same approach as we
did with the support annotations library

6
00:00:16,390 --> 00:00:20,370
adding in the single
dependency needed for Glide.

7
00:00:20,370 --> 00:00:24,260
With just that change, we can now
use Glide throughout our project.

8
00:00:24,260 --> 00:00:29,010
So what does it take to replace our code
for loading icons with a call to Glide?

9
00:00:29,010 --> 00:00:32,570
Let's take a look at the detail
fragment, as an example.

10
00:00:32,570 --> 00:00:35,250
In this case,
we're using a utility method

11
00:00:35,250 --> 00:00:39,940
to retrieve the correct resource id,
based on the weather condition id.

12
00:00:39,940 --> 00:00:41,220
So, what does Glide look?

13
00:00:41,220 --> 00:00:44,650
Pretty similar, in fact,
we'll create a Glide instance,

14
00:00:44,650 --> 00:00:48,350
passing in either a context,
activity, or, in this case,

15
00:00:48,350 --> 00:00:53,240
a fragment, and use load,
passing in the URL of the image

16
00:00:53,240 --> 00:00:57,370
to load conveniently provided
by a different utility method.

17
00:00:57,370 --> 00:01:02,460
Then, we'll request that Glide load
that image into our image view.

18
00:01:02,460 --> 00:01:07,430
Just like that we've written everything
we need to download, cache, format,

19
00:01:07,430 --> 00:01:09,740
and display the loaded image in our app.

20
00:01:09,740 --> 00:01:11,120
Not bad for three lines of code.

21
00:01:12,320 --> 00:01:15,750
Of course we probably also want
to ensure that the app works

22
00:01:15,750 --> 00:01:19,410
even if there isn't a network connection
and we haven't cached anything.

23
00:01:19,410 --> 00:01:24,770
For that we can use the error method to
fall back to our local image resources.

24
00:01:24,770 --> 00:01:28,170
Glide offers a number of
convenience methods like this

25
00:01:28,170 --> 00:01:31,790
to allow placeholder images,
cross fading, center cropping, and

26
00:01:31,790 --> 00:01:35,380
more but this will work great for
what we need for sunshine.

27
00:01:35,380 --> 00:01:37,210
There is one caveat.

28
00:01:37,210 --> 00:01:39,940
When we use an image view
with wrap content and

29
00:01:39,940 --> 00:01:42,660
we set the image view
via set image resource,

30
00:01:42,660 --> 00:01:46,170
you're actually taking advantage of some
built in functionality where the image

31
00:01:46,170 --> 00:01:50,580
view would automatically resize itself
based on the image's dimensions.

32
00:01:50,580 --> 00:01:53,100
However, when loading
images from the network,

33
00:01:53,100 --> 00:01:57,100
we'll need to set a specific flag,
adjust view bounds.

34
00:01:57,100 --> 00:02:01,760
This ensures that after glide loads
the image from the downloaded bitmap.

35
00:02:01,760 --> 00:02:05,100
Image view will adjust
its view bounds to match.

36
00:02:05,100 --> 00:02:07,840
So what changes when we
don't have an image view?

37
00:02:07,840 --> 00:02:11,330
Brought up at the beginning to gather
images into our notifications,

38
00:02:11,330 --> 00:02:13,180
this is a slightly different problem.

39
00:02:13,180 --> 00:02:16,560
We somehow need to get a bitmap
to add as our large icon.

40
00:02:16,560 --> 00:02:18,780
What does this mean for Glide?

41
00:02:18,780 --> 00:02:22,445
Most of this should seem familiar,
create a glide instance,

42
00:02:22,445 --> 00:02:26,975
load from a URL, fall back to our
local artResource if an error occurs.

43
00:02:26,975 --> 00:02:29,555
But there's a few new methods in here.

44
00:02:29,555 --> 00:02:33,782
AsBitmap is what tells Glide to
load the image as a simple bitmap.

45
00:02:33,782 --> 00:02:38,042
Turns out that Glide can also load
animated gifs, which, unfortunately,

46
00:02:38,042 --> 00:02:40,762
don't work for
our notification large icon.

47
00:02:40,762 --> 00:02:43,482
Then instead of using
into with an image view,

48
00:02:43,482 --> 00:02:46,622
we pass in a fixed width and height.

49
00:02:46,622 --> 00:02:50,532
This is what tells Glide to
load it as a fixed size bitmap,

50
00:02:50,532 --> 00:02:54,512
rather than dynamically resizing it
based on the size of the image view.

51
00:02:54,512 --> 00:02:57,700
But how do we know what size
the large icon needs to be?

52
00:02:57,700 --> 00:03:02,980
On gingerbread and lower devices
it was a fixed size, 48 DP.

53
00:03:02,980 --> 00:03:06,380
On newer devices we can use
the provided dimensions,

54
00:03:06,380 --> 00:03:09,370
notification large icon with and

55
00:03:09,370 --> 00:03:14,600
notification large icon height to ensure
that we always get the perfect size.

56
00:03:14,600 --> 00:03:17,020
Then we use get to request the glide,

57
00:03:17,020 --> 00:03:21,370
retrieve the bitmap synchronously or
wait here until the images are treat

58
00:03:21,370 --> 00:03:24,200
as we build our notification
in our sync adapter,

59
00:03:24,200 --> 00:03:28,330
which runs on a background thread, it's
okay to block until we get a result.

60
00:03:28,330 --> 00:03:31,240
Definitely not something we
want to do on the UI thread.

61
00:03:31,240 --> 00:03:33,550
Make sure to catch
the interrupted exception and

62
00:03:33,550 --> 00:03:36,210
the execution exception from get.

63
00:03:36,210 --> 00:03:38,190
While we don't expect
these things to happen,

64
00:03:38,190 --> 00:03:42,440
it's much better to fall back on
our local art resources than crash.

65
00:03:42,440 --> 00:03:44,000
If everything goes according to plan,

66
00:03:44,000 --> 00:03:47,280
we'll have a perfectly sized bitmap
we can pass on to our notification.
