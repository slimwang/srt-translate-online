1
00:00:00,770 --> 00:00:04,240
if you spent any amount of time in Xcode
you've likely handled warnings and

2
00:00:04,240 --> 00:00:05,460
errors.

3
00:00:05,460 --> 00:00:09,140
Warnings are issues identified by the
compiler that might cause problems or

4
00:00:09,140 --> 00:00:11,840
have unintended side-effects
on your running application.

5
00:00:12,860 --> 00:00:15,780
Now you're not required to fix
warnings before running your app but

6
00:00:15,780 --> 00:00:17,310
it's highly recommended.

7
00:00:17,310 --> 00:00:18,250
Errors, on the other hand,

8
00:00:18,250 --> 00:00:21,910
are reported by the compiler and
must be fixed prior to running your app.

9
00:00:21,910 --> 00:00:24,670
If you don't fix them, the next
code can't build your source and

10
00:00:24,670 --> 00:00:25,310
can't run your code.

11
00:00:26,330 --> 00:00:28,590
Both of these types of issues,
warnings, and errors,

12
00:00:28,590 --> 00:00:32,950
are fundamentally different than the
kinds of bugs we solved in this course.

13
00:00:32,950 --> 00:00:34,100
Before we talk about bugs,

14
00:00:34,100 --> 00:00:37,990
let's take a look at the ways Xcode
shows warnings and errors to us.

15
00:00:37,990 --> 00:00:42,002
The first place is here,
where my cursor is at the top toolbar.

16
00:00:42,002 --> 00:00:44,870
Here Xcode displays the number
of warnings here and

17
00:00:44,870 --> 00:00:47,330
the number of errors in your code.

18
00:00:47,330 --> 00:00:51,290
As you can see, this project currently
has one warning and one error.

19
00:00:51,290 --> 00:00:53,490
The next place that Xcode
reports warnings and

20
00:00:53,490 --> 00:00:55,120
errors is in the issue navigator.

21
00:00:56,130 --> 00:00:59,210
You can access it by clicking
on the issue navigator button

22
00:00:59,210 --> 00:01:02,000
in the navigator panel here.

23
00:01:02,000 --> 00:01:06,150
Or, if I were to go back, you just click
one of these icons on the top tool bar,

24
00:01:06,150 --> 00:01:08,620
that'll also bring up
the issue navigator.

25
00:01:09,640 --> 00:01:12,600
If the issue navigator is currently
hidden in your set-up you might not

26
00:01:12,600 --> 00:01:15,020
have the navigator panel revealed.

27
00:01:15,020 --> 00:01:18,770
Make sure that you click this button
to reveal the navigator panel

28
00:01:18,770 --> 00:01:19,980
on the left side of Xcode.

29
00:01:21,040 --> 00:01:23,710
In the issue navigator,
Xcode pinpoints each error and

30
00:01:23,710 --> 00:01:25,580
the file where it originates.

31
00:01:25,580 --> 00:01:26,880
If you are to click one of the errors,

32
00:01:26,880 --> 00:01:30,990
it'll take you directly to the file,
and this is really useful.

33
00:01:30,990 --> 00:01:33,090
I'll go ahead and resolve these errors,

34
00:01:33,090 --> 00:01:38,140
this one error just looks like
an unwrapping problem, and there we go.

35
00:01:39,400 --> 00:01:41,600
The second here is in the story board,

36
00:01:41,600 --> 00:01:47,020
so View right here is inaccessible
because there's no segue.

37
00:01:47,020 --> 00:01:48,160
Let's go ahead and fix that.

38
00:01:49,320 --> 00:01:52,260
I'll control click, drag, and

39
00:01:52,260 --> 00:01:58,020
add back the present modal segue and
let's run the project.

40
00:01:59,310 --> 00:02:00,930
That was warnings and errors but

41
00:02:00,930 --> 00:02:04,110
let's talk about the types of problems
you'll solve with the debugging tools.

42
00:02:04,110 --> 00:02:06,075
That's runtime errors.

43
00:02:06,075 --> 00:02:08,900
These errors are fundamentally different
from the compiler warnings and

44
00:02:08,900 --> 00:02:10,288
errors we just saw.

45
00:02:10,288 --> 00:02:13,630
Specifically, these errors
occur while the app is running.

46
00:02:13,630 --> 00:02:16,090
Also, these are errors that
your users will see and

47
00:02:16,090 --> 00:02:18,830
they're going to complain about
them if you don't fix them.

48
00:02:18,830 --> 00:02:21,240
There are two types of runtime errors.

49
00:02:21,240 --> 00:02:23,960
The first is a logic error
which occurs when your app or

50
00:02:23,960 --> 00:02:25,860
program doesn't work as expected.

51
00:02:25,860 --> 00:02:30,080
For example,
I'll go to the print debugging scene and

52
00:02:30,080 --> 00:02:33,410
when I tap,
no spider appears on the screen.

53
00:02:34,510 --> 00:02:35,990
Now, this is definitely a logic error.

54
00:02:35,990 --> 00:02:39,160
When I tap, spiders should
be appearing on the screen.

55
00:02:39,160 --> 00:02:45,020
As the second type of runtime error, a
fatal error, we also call these crashes.

56
00:02:45,020 --> 00:02:47,680
To demonstrate one,
I'll click on the settings button,

57
00:02:49,420 --> 00:02:51,480
then I'll try clicking on
one of the bug types here.

58
00:02:53,980 --> 00:02:57,430
As soon as I click the button, the app
crashes, we're redirected back to Xcode,

59
00:02:57,430 --> 00:02:59,900
and we're given a crash report.

60
00:02:59,900 --> 00:03:02,690
At this point,
the app cannot continue any further but

61
00:03:02,690 --> 00:03:04,940
clicking Stop should
not be your first move.

62
00:03:04,940 --> 00:03:07,740
This is something that
I've commonly done before

63
00:03:07,740 --> 00:03:11,100
as I was learning to program,
I panicked, my app stopped working,

64
00:03:11,100 --> 00:03:13,255
I didn't know what was going on,
so I just assumed clicked Stop.

65
00:03:13,255 --> 00:03:17,460
The problem with stopping after a crash
is that it get's rid of valuable

66
00:03:17,460 --> 00:03:20,380
debugging information that
Xcode's trying to give us

67
00:03:20,380 --> 00:03:22,340
to help us fix the problem.

68
00:03:22,340 --> 00:03:26,690
So my first word of advice
about debugging is don't panic.

69
00:03:26,690 --> 00:03:28,140
It'll only raise your blood pressure and

70
00:03:28,140 --> 00:03:31,510
it doesn't actually get you any
closer to solving the problem.

71
00:03:31,510 --> 00:03:35,140
Instead, it's better to take a clear
sequence of calculated steps when you

72
00:03:35,140 --> 00:03:37,070
are debugging and we'll cover that next.
