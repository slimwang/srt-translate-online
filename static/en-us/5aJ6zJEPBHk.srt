1
00:00:00,920 --> 00:00:04,230
So to build out this layout, I like
to first think about it conceptually

2
00:00:04,230 --> 00:00:08,850
to make sure I have an idea of what
I'm going to do before I start coding.

3
00:00:08,850 --> 00:00:11,890
First, we notice that it's a vertical
linear layout because the items

4
00:00:11,890 --> 00:00:13,010
are in a vertical column.

5
00:00:13,010 --> 00:00:14,680
We have three children views.

6
00:00:14,680 --> 00:00:17,910
We have an image view,
a text view and a text view.

7
00:00:17,910 --> 00:00:21,590
The first hint that I gave you was to
first determine the width of each view.

8
00:00:22,680 --> 00:00:26,130
Since the whole layout takes up the full
width and height of the device,

9
00:00:26,130 --> 00:00:30,270
this Vertical Linear Layout has
a width and height of match_parent.

10
00:00:30,270 --> 00:00:33,810
Then for the image view, we want it
to also be as wide as the parent,

11
00:00:33,810 --> 00:00:35,920
which in turn is as wide as the device.

12
00:00:35,920 --> 00:00:38,170
So we set that to be match_parent.

13
00:00:38,170 --> 00:00:39,670
Same for the two textviews.

14
00:00:39,670 --> 00:00:43,190
We want them to match the full width
of the device, so it's match_parent.

15
00:00:43,190 --> 00:00:45,330
Then we work on the height of each view.

16
00:00:45,330 --> 00:00:49,430
These two textviews are easy because
they wrap to the content inside of them.

17
00:00:49,430 --> 00:00:53,080
So we set wrap_content for
the height of each textview.

18
00:00:53,080 --> 00:00:56,540
We also set the weight values to be zero
because we don't want these values to

19
00:00:56,540 --> 00:01:00,400
change even if there's
available space in the parent.

20
00:01:00,400 --> 00:01:02,800
Now the imageview was the hardest part.

21
00:01:02,800 --> 00:01:06,290
We want the height of the image to grow
or shrink depending on the available

22
00:01:06,290 --> 00:01:10,229
space in the parent, which depends on
the available screen size of the device.

23
00:01:11,250 --> 00:01:13,190
We use weights to accomplish this.

24
00:01:13,190 --> 00:01:16,180
We set the height of the image
view to start at zero dp but

25
00:01:16,180 --> 00:01:18,160
we give it a weight of one.

26
00:01:18,160 --> 00:01:20,720
Since none of the other
children have weight values

27
00:01:20,720 --> 00:01:24,350
then any available space in the parent
will be given to this image view.

28
00:01:24,350 --> 00:01:27,920
And the reason we set
the height to be zero dp

29
00:01:27,920 --> 00:01:29,840
is because it's
a vertical linear layout.

30
00:01:29,840 --> 00:01:32,040
So it fills itself vertically.

31
00:01:32,040 --> 00:01:35,400
And we don't know the height yet
until the weight value determines it.

32
00:01:36,530 --> 00:01:38,280
We gave you this link in
the instructor notes and

33
00:01:38,280 --> 00:01:39,940
it had some code already in it.

34
00:01:39,940 --> 00:01:43,590
The positioning of the views is
incorrect, though, so let's fix that.

35
00:01:43,590 --> 00:01:46,200
Let's start with the text views
first because those are easy.

36
00:01:46,200 --> 00:01:48,740
You can see that these text views
don't stretch across the whole width

37
00:01:48,740 --> 00:01:49,400
of the device.

38
00:01:49,400 --> 00:01:50,810
So we need to change that.

39
00:01:50,810 --> 00:01:53,410
The width should be match_parent.

40
00:01:53,410 --> 00:01:54,180
That's better.

41
00:01:54,180 --> 00:01:56,780
So now the greenish-bluish background

42
00:01:56,780 --> 00:01:59,300
goes across the whole
width of the device.

43
00:01:59,300 --> 00:02:02,670
Same for
the bonfire at the beach textview.

44
00:02:02,670 --> 00:02:03,580
Cool.
And the height

45
00:02:03,580 --> 00:02:05,860
is that content which is correct.

46
00:02:05,860 --> 00:02:09,650
Now we have all this extra vertical
space in the vertical linearlayout.

47
00:02:10,669 --> 00:02:12,140
Oh, by the way, the width and

48
00:02:12,140 --> 00:02:15,270
height of the linear layout is
set to be match parent so that

49
00:02:15,270 --> 00:02:18,780
the layout will eventually extend the
whole height and width of the screen.

50
00:02:18,780 --> 00:02:21,880
So to use this extra
height in the parent

51
00:02:21,880 --> 00:02:24,880
we want to give it to a child
that has a weight value.

52
00:02:24,880 --> 00:02:28,820
So let's change the imageview so
that it has a weight value.

53
00:02:28,820 --> 00:02:31,300
First, we can set the width
to be match_parent so

54
00:02:31,300 --> 00:02:33,390
that it also extends across
the width of the device.

55
00:02:34,430 --> 00:02:38,940
Then we set the height to be 0dp and
the weight to be 1.

56
00:02:38,940 --> 00:02:42,200
And that's the desired screenshot.

57
00:02:42,200 --> 00:02:43,330
Good job.

58
00:02:43,330 --> 00:02:47,400
Note that if I change the weight values
to be a really high number like seven or

59
00:02:47,400 --> 00:02:50,410
ten, it doesn't really
change the device preview.

60
00:02:51,500 --> 00:02:54,720
That's because this is the only
child with a weight so

61
00:02:54,720 --> 00:02:57,980
it doesn't matter if it's a really
high weight or a really low weight.

62
00:02:57,980 --> 00:03:01,530
All the extra height in the parent
will be given to this child.

63
00:03:02,680 --> 00:03:04,290
So let's just change this to be one.

64
00:03:05,500 --> 00:03:06,270
Okay, good job.
