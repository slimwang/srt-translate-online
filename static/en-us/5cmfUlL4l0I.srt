1
00:00:00,400 --> 00:00:04,420
The first one says the query will fail
because the provided login is not

2
00:00:04,420 --> 00:00:05,740
a correct user.

3
00:00:05,740 --> 00:00:08,650
Okay?
So obviously what we're providing here

4
00:00:08,650 --> 00:00:14,780
is not, doesn't match in any tuple, the
login value that is starting, restoring.

5
00:00:14,780 --> 00:00:17,400
But let's look at it a bit more closely.

6
00:00:17,400 --> 00:00:21,340
Although there isn't a match, but
then we're running into this or.

7
00:00:21,340 --> 00:00:23,680
Okay?
This is a logical expression.

8
00:00:23,680 --> 00:00:24,640
Boolean expression.

9
00:00:24,640 --> 00:00:28,990
But if either is a match,
which will, you take a tuple,

10
00:00:28,990 --> 00:00:34,060
the way you would do select is that
you look a row in the table or

11
00:00:34,060 --> 00:00:37,960
a tuple, you look at the login field and
see if this value is going to match.

12
00:00:37,960 --> 00:00:39,760
So what value are we
going to try to match?

13
00:00:39,760 --> 00:00:42,330
Well, we only match
the value up to this point.

14
00:00:42,330 --> 00:00:43,460
There is no match here.

15
00:00:43,460 --> 00:00:44,730
So that's going to be false.

16
00:00:44,730 --> 00:00:49,470
And then we continue on this, and
here we say there's an or, 1 = 1.

17
00:00:49,470 --> 00:00:50,780
Now this is always true.

18
00:00:50,780 --> 00:00:53,336
1 = 1, always evaluates to true.

19
00:00:53,336 --> 00:00:56,234
So we're either saying there's a match,
or 1 = 1,

20
00:00:56,234 --> 00:00:58,680
well together this is going to be true.

21
00:00:58,680 --> 00:01:01,959
So, although the match fails,
but because of the or,

22
00:01:01,959 --> 00:01:05,253
the full expression that we
have here is going to be true.

23
00:01:05,253 --> 00:01:08,507
And we're actually not even
going to check for password and

24
00:01:08,507 --> 00:01:12,573
PIN because whatever we put there or
did not, actually follows this two

25
00:01:12,573 --> 00:01:15,990
dashes that we said,
actually is a common field, anyway.

26
00:01:15,990 --> 00:01:19,720
So the query is actually only
going to select, be that select

27
00:01:19,720 --> 00:01:24,601
accounts from users where
log in equals this, Okay?

28
00:01:24,601 --> 00:01:28,490
That's what the query, that's going to
be submitted to the database.

29
00:01:28,490 --> 00:01:32,110
That's what is going to get executed
when it's submitted to the database.

30
00:01:32,110 --> 00:01:35,880
So the query actually will not fail,
and the reason for

31
00:01:35,880 --> 00:01:40,070
that is that in this or expression,
although the match fails,

32
00:01:40,070 --> 00:01:43,800
this side is going to be true, so the
overall expression is going to be true.

33
00:01:43,800 --> 00:01:46,680
So the first one is not correct.

34
00:01:46,680 --> 00:01:50,754
It will not fail because it doesn't,
login doesn't have to match.

35
00:01:50,754 --> 00:01:53,700
1 = 1 is why this is going to be true.

36
00:01:53,700 --> 00:01:55,900
So the first one is not
the correct answer.

37
00:01:55,900 --> 00:01:58,200
The correct answer is the second one.

38
00:01:58,200 --> 00:02:03,160
An injection attack will result In all
users' account data being returned.

39
00:02:03,160 --> 00:02:06,490
This evaluates to true
which means that tuple

40
00:02:06,490 --> 00:02:09,850
is one from which we should
be returning that request for

41
00:02:09,850 --> 00:02:12,570
information, or
the information that's being selected.

42
00:02:12,570 --> 00:02:17,630
Remember we return information
that is selected from all tuples,

43
00:02:17,630 --> 00:02:20,620
for which this expression
evaluates to true.
