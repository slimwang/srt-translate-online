1
00:00:00,540 --> 00:00:03,610
Think about the single button
that we want to place on screen.

2
00:00:03,610 --> 00:00:06,230
I've drawn the button here in green,
and the view in blue.

3
00:00:06,230 --> 00:00:09,570
Let's assume we want it on
the center of the screen,

4
00:00:09,570 --> 00:00:13,290
regardless if our app is running
on an iPhone or an iPad Pro.

5
00:00:13,290 --> 00:00:16,059
The button should always be in
the center, even when the app is on

6
00:00:16,059 --> 00:00:20,140
different device orientations,
from portrait to landscape.

7
00:00:20,140 --> 00:00:22,830
Constraints are the rules
that tell iOS how to position

8
00:00:22,830 --> 00:00:25,370
inside this particular UI element.

9
00:00:25,370 --> 00:00:28,230
So, if we were to think of placing
the record button on the center,

10
00:00:28,230 --> 00:00:31,760
we need a distance from the top, the
distance from the bottom, distance from

11
00:00:31,760 --> 00:00:35,530
the leading, and finally, the distance
from the trailing edges of the view.

12
00:00:35,530 --> 00:00:38,710
If you're following along,
you're thinking, okay, four constraints.

13
00:00:38,710 --> 00:00:42,540
And it would be correct except most user
interface elements have what we call,

14
00:00:42,540 --> 00:00:44,080
an intrinsic size.

15
00:00:44,080 --> 00:00:46,708
That is they have a built-in height and
width.

16
00:00:46,708 --> 00:00:50,960
In the button's case, this height and
width is automatically calculated

17
00:00:50,960 --> 00:00:55,450
based on the text and font size you
selected for the button's text.

18
00:00:55,450 --> 00:00:59,660
If iOS knows the height and width of
a UI element, like a record button,

19
00:00:59,660 --> 00:01:02,970
then it only needs half the constraints
to size and position it.

20
00:01:02,970 --> 00:01:03,950
That is to say,

21
00:01:03,950 --> 00:01:08,300
if I tell iOS how far from the top
of the screen the button will be,

22
00:01:08,300 --> 00:01:11,700
then it can automatically calculate how
far from the bottom it needs to be.

23
00:01:12,970 --> 00:01:16,660
If we tell it the leading constraint,
iOS can automatically calculate

24
00:01:16,660 --> 00:01:19,950
the trending constraint,
based on the width of our green button.

25
00:01:19,950 --> 00:01:23,560
So, the rule goes as follows, you need
a minimum of two constraints in each

26
00:01:23,560 --> 00:01:29,310
dimension or axis, x and y, to
properly size and layout a UI element.

27
00:01:29,310 --> 00:01:32,840
Except, if that UI element
has an intrinsic size,

28
00:01:32,840 --> 00:01:38,080
then you only need one constraint for
each dimension or axis, x and y.

29
00:01:38,080 --> 00:01:41,240
iOS can figure out the other
constraint based on the intrinsic size.

30
00:01:42,340 --> 00:01:44,700
Last thing to remember,
when sending a constraint,

31
00:01:44,700 --> 00:01:47,640
we're always comparing
one thing to another.

32
00:01:47,640 --> 00:01:51,640
The record button placement is relative
to the UI view it's contained in,

33
00:01:51,640 --> 00:01:52,860
in other words, its parent.

34
00:01:53,890 --> 00:01:57,010
I've represented the UI view by
this blue rectangle outline.

35
00:01:57,010 --> 00:01:59,318
Right now, the UI view is full screen.

36
00:01:59,318 --> 00:02:00,710
But if we make it a different size,

37
00:02:00,710 --> 00:02:03,130
the record button will be
still centered in that view.
