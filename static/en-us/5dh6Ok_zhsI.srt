1
00:00:00,250 --> 00:00:03,814
We've just talked about which display method gets called int present question

2
00:00:03,814 --> 00:00:07,890
method? The method has a parameter whose type is question. So here's the

3
00:00:07,890 --> 00:00:11,847
parameter variable. It contains an object reference which points to an object,

4
00:00:11,847 --> 00:00:15,239
an object of what type, while you think it's question, because that after all

5
00:00:15,239 --> 00:00:18,260
has the type of q, but not so fast, the type of q, the variable isn't the

6
00:00:18,260 --> 00:00:24,710
question. The type of the object is really not known. It could be any sub-type

7
00:00:24,710 --> 00:00:27,900
of question. Now the good thing is, that when the program runs it does the

8
00:00:27,900 --> 00:00:34,510
right thing. At runtime, it's determined what the exact type of this object is.

9
00:00:34,510 --> 00:00:38,352
And its display method is caught. That might be question.display, choice

10
00:00:38,352 --> 00:00:43,345
question display, or the display method of some other class. That also extends

11
00:00:43,345 --> 00:00:46,790
the question class, this is a very useful feature because it allows us to write

12
00:00:46,790 --> 00:00:50,182
generic codes such as present question that works with questions of any type

13
00:00:50,182 --> 00:00:53,415
and actually this diagram should be familiar to you, you've seen the same

14
00:00:53,415 --> 00:00:56,860
diagram when we talked about interfaces and there is the name for the fact that

15
00:00:56,860 --> 00:01:04,664
the correct version of a method Get selected at run time. Remember what that's

16
00:01:04,664 --> 00:01:11,015
called? Was it object already has programming? Incapsulation? Inheritance? Or

17
00:01:11,015 --> 00:01:12,191
Poly morphism?
