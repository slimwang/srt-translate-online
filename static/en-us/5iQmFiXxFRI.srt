1
00:00:00,560 --> 00:00:03,498
From the class P we now
turn to the class NP.

2
00:00:03,498 --> 00:00:06,827
At the beginning of the lesson I said
that NP is the class of problems

3
00:00:06,827 --> 00:00:09,200
variable in polynomial time.

4
00:00:09,200 --> 00:00:12,500
This is true but
it's not how we typically define it.

5
00:00:12,500 --> 00:00:17,170
Instead, we define NP as the class of
problems solvable in polynomial time

6
00:00:17,170 --> 00:00:19,330
on a nondeterministic Turing machine,

7
00:00:19,330 --> 00:00:20,800
a variant that we haven't
encountered before.

8
00:00:21,850 --> 00:00:24,590
Nondeterminism in computer
science is often misunderstood.

9
00:00:24,590 --> 00:00:28,250
So put aside whatever associations
you might have had with the word.

10
00:00:28,250 --> 00:00:32,400
Perhaps the best way to understand
nondeterministic Turing machines

11
00:00:32,400 --> 00:00:36,560
is by contrasting a nondeterministic
computation with a deterministic one.

12
00:00:37,870 --> 00:00:42,370
A deterministic computation starts in
some initial state, and then the next

13
00:00:42,370 --> 00:00:47,170
state is exactly and uniquely
determined by the transition function.

14
00:00:47,170 --> 00:00:50,130
There's only one possible
successor configuration.

15
00:00:50,130 --> 00:00:53,920
Into that configuration, there's
only one possible successor, and so

16
00:00:53,920 --> 00:00:57,150
on, and so forth, until an accepting or

17
00:00:57,150 --> 00:01:00,810
rejecting configuration is reached,
if one is reached at all.

18
00:01:00,810 --> 00:01:03,880
On the other hand,
in a nondeterministic computation,

19
00:01:03,880 --> 00:01:08,040
we start in a single initial
configuration, but it's possible for

20
00:01:08,040 --> 00:01:11,200
there to be multiple
successor configurations.

21
00:01:11,200 --> 00:01:15,240
In effect, the machine is able to
explore multiple possibilities at once.

22
00:01:16,570 --> 00:01:19,750
This potential splitting
continues at every step.

23
00:01:19,750 --> 00:01:23,590
Sometimes, there might just be
one possible successor state.

24
00:01:23,590 --> 00:01:25,760
Sometimes there might be three or more.

25
00:01:27,110 --> 00:01:29,890
For each press, we have all
the same possibilities as for

26
00:01:29,890 --> 00:01:31,240
the deterministic machine.

27
00:01:31,240 --> 00:01:36,060
The machine can reject,
it can loop forever, or it can accept.

28
00:01:36,060 --> 00:01:39,240
If the machine ever accepts
in any of these branches,

29
00:01:39,240 --> 00:01:41,050
then the whole machine accepts.

30
00:01:41,050 --> 00:01:44,330
The only change to the seven triple
definition of the deterministic

31
00:01:44,330 --> 00:01:48,580
machine that we need to make is to
modify the transition function.

32
00:01:48,580 --> 00:01:53,370
The range is no longer a single state,
tape symbol being red,

33
00:01:53,370 --> 00:01:57,800
direction tuple, but a whole
collection of such possibilities.

34
00:01:57,800 --> 00:02:01,470
The set of all subsets is
often called a power set.

35
00:02:01,470 --> 00:02:05,690
The only other change we need to
make is when the machine accepts.

36
00:02:05,690 --> 00:02:09,449
It accepts if there is any
valid sequence of configuration

37
00:02:09,449 --> 00:02:11,120
that results in an accepting state.

38
00:02:12,510 --> 00:02:17,750
Naturally, it also rejects only when
every branch reaches a reject state.

39
00:02:17,750 --> 00:02:20,470
If there's a branch that
hasn't rejected yet,

40
00:02:20,470 --> 00:02:23,398
then we need to keep
computing in case it accepts.

41
00:02:23,398 --> 00:02:28,100
Therefore, a nondeterministic
machine that never accepts and

42
00:02:28,100 --> 00:02:30,240
that loops on at least one branch,
will loop.
