1
00:00:00,000 --> 00:00:03,000
I would like to show you a little bit about how a tool that my research group created

2
00:00:03,000 --> 00:00:06,000
called Csmith works, and so Csmith is just a random test case generator.

3
00:00:06,000 --> 00:00:10,000
We use it to try break C compilers. Let's just take a little bit of a look and see how it works.

4
00:00:10,000 --> 00:00:13,000
What I'm going to do here is shell into a machine belonging to my group.

5
00:00:13,000 --> 00:00:17,000
And we're going to look at an in-progress Csmith run that's been going for a couple of days.

6
00:00:17,000 --> 00:00:19,000
So let's see the results. Let's see what happened. Okay.

7
00:00:19,000 --> 00:00:21,000
So here's what happened over the last couple of days with this testing run.

8
00:00:21,000 --> 00:00:27,000
So what I'm doing is making a program using Csmith and then using the latest version of GCC

9
00:00:27,000 --> 00:00:31,000
and the latest version of clang that is LLVM C front-end to compile each test case

10
00:00:31,000 --> 00:00:33,000
with a variety of optimization levels.

11
00:00:33,000 --> 00:00:35,000
And I'm not using any kind of weird optimization levels.

12
00:00:35,000 --> 00:00:38,000
I'm basically just compiling it. -00, -01, -02.

13
00:00:38,000 --> 00:00:40,000
And it doesn't matter if you're not a C compiler user.

14
00:00:40,000 --> 00:00:44,000
These are basically the sort of vanilla compiler optimization levels that any compiler user

15
00:00:44,000 --> 00:00:48,000
would probably be using so what the bottom of this output shows us is that 150 thousand tests

16
00:00:48,000 --> 00:00:53,000
have ran since I started this testing run and during this testing run GCC has failed

17
00:00:53,000 --> 00:00:57,000
a half dozen times or so, clang has failed a few times, and also we see a few Csmith failures.

18
00:00:57,000 --> 00:01:01,000
It could be that the Csmith failures are actual bugs but historically speaking most of the time

19
00:01:01,000 --> 00:01:04,000
these are timeouts and so generally all of these tools are ran in their timeouts

20
00:01:04,000 --> 00:01:08,000
when we use a random testing loop because random test tend to be really good at finding

21
00:01:08,000 --> 00:01:11,000
performance pathologies but the tool runs for a really long time.

22
00:01:11,000 --> 00:01:15,000
And that wastes time so what we do is we just kill any tool after it has ran for several minutes

23
00:01:15,000 --> 00:01:18,000
including our random test case generator itself so let's see what we can learn here.

24
00:01:18,000 --> 00:01:22,000
So what I'm going to do is look and see if we found any interesting LLVM failures.

25
00:01:22,000 --> 00:01:26,000
And so when LLVM crashes it always tells us how it crashed using an assertion violation.

26
00:01:26,000 --> 00:01:30,000
And so as I've discussed a couple of units ago, many real programs contain a lot of assertions

27
00:01:30,000 --> 00:01:32,000
and these compilers certainly have that property. Okay.

28
00:01:32,000 --> 00:01:35,000
So what we can see is that LLVM has crashed it looks like 4 times here.

29
00:01:35,000 --> 00:01:38,000
One time with a message about wrong topological sorting.

30
00:01:38,000 --> 00:01:41,000
And 3 times with a message about unknown live-in to the entry block.

31
00:01:41,000 --> 00:01:45,000
And it turns out that I happen to know that this wrong topological sorting bug is not new.

32
00:01:45,000 --> 00:01:47,000
This is the one that I reported a couple of weeks ago.

33
00:01:47,000 --> 00:01:51,000
On the other hand, this unknown live-in to the entry block bug is probably new.

34
00:01:51,000 --> 00:01:55,000
So one thing we could do is check in LLVM's Bugzilla if this actually is new,

35
00:01:55,000 --> 00:02:00,000
but what I'm going to do now is just assume that it is and let's take a little bit of a look at this bug.

36
00:02:00,000 --> 00:02:04,000
So here we are in the actual log of Csmith's output.

37
00:02:04,000 --> 00:02:09,000
And that it's telling us is what command line arguments it used when it invoked Csmith

38
00:02:09,000 --> 00:02:12,000
to generate the program that killed clang.

39
00:02:12,000 --> 00:02:16,000
And so what you can see is it contains a bunch of options but also it contains the random number

40
00:02:16,000 --> 00:02:19,000
seed that Csmith uses so we're going to need to cut and paste this,

41
00:02:19,000 --> 00:02:25,000
and we can pass this to a different script, which is going to generate this program again.

42
00:02:25,000 --> 00:02:27,000
And let's edit it. Let's look at it.
