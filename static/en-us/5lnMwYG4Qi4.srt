1
00:00:00,000 --> 00:00:02,000
So one of the topics we're covering in this course

2
00:00:02,000 --> 00:00:05,000
is Memoization or caching,

3
00:00:05,000 --> 00:00:08,000
writing down values that we've already computed

4
00:00:08,000 --> 00:00:11,000
so that we can be lazy and not have to recompute them later.

5
00:00:11,000 --> 00:00:14,000
We've used this as one implementation of parsing

6
00:00:14,000 --> 00:00:17,000
but in the Real World, it might come up in many other places.

7
00:00:17,000 --> 00:00:19,000
Brendan, have you had a chance to use it at Mozilla

8
00:00:19,000 --> 00:00:21,000
or in your other projects?

9
00:00:21,000 --> 00:00:24,000
Not so much in parsing because we are in a tight competitive regime

10
00:00:24,000 --> 00:00:30,000
with other browsers, and you have to parse very efficiently and lex very efficiently.

11
00:00:30,000 --> 00:00:36,000
But in building a browser, you end up memoizing or caching a lot.

12
00:00:36,000 --> 00:00:38,000
You end up trying to remember decisions you made

13
00:00:38,000 --> 00:00:47,000
that were expensive, that can be preserved under some rules and reused.

14
00:00:47,000 --> 00:00:51,000
We also have a memory management system that's quite complex.

15
00:00:51,000 --> 00:00:53,000
We have a garbage collector for JavaScript,

16
00:00:53,000 --> 00:00:57,000
we have a reference counting system for our C++ code.

17
00:00:57,000 --> 00:01:00,000
The two have to meet, and it's possible to form cycles,

18
00:01:00,000 --> 00:01:02,000
which then have to be collected.

19
00:01:02,000 --> 00:01:05,000
We use an old David Bacon data programming trick.

20
00:01:05,000 --> 00:01:07,000
It's Bacon and Rajan PLDI 2001, I think.

21
00:01:07,000 --> 00:01:10,000
It's a cycle collector for reference code objects,

22
00:01:10,000 --> 00:01:13,000
and it buffers pointers that it suspects of forming cycles.

23
00:01:13,000 --> 00:01:17,000
And a pointer, in a reference kind of graph, can form a cycle.

24
00:01:17,000 --> 00:01:22,000
Every reference count is going down, from above 2 to 1 or above

25
00:01:22,000 --> 00:01:27,000
so that you may still have a stuck reference there, due to a circle.

26
00:01:27,000 --> 00:01:30,000
And so we use these techniques.

27
00:01:30,000 --> 00:01:32,000
We constrain a little bit in using C++

28
00:01:32,000 --> 00:01:36,000
that has to run on Windows, Mac, and Linux.

29
00:01:36,000 --> 00:01:40,000
But in Python and JavaScript, people memoize all the time.

30
00:01:40,000 --> 00:01:47,000
And there's a craze now for PEGs--

31
00:01:47,000 --> 00:01:49,000
Parser Expression Grammars?

32
00:01:49,000 --> 00:01:51,000
I think that's the acronym; I always mix it up with something else.

33
00:01:51,000 --> 00:01:56,000
But it's a parsing technique that can use memoization

34
00:01:56,000 --> 00:01:59,000
when it's backtracking

35
00:01:59,000 --> 00:02:02,000
and accord it Choice, so

36
00:02:02,000 --> 00:02:05,000
we're familiar with this, and we try to use memoization to a good effect.

37
00:02:05,000 --> 99:59:59,999
At Mozilla we have less use in parsing--more runtime, I'd say.
