1
00:00:00,150 --> 00:00:02,390
We said that to implement locks easily, we need

2
00:00:02,390 --> 00:00:05,078
atomic instructions that are going to both read and write

3
00:00:05,078 --> 00:00:09,220
memory. There are three main types of such instructions.

4
00:00:09,220 --> 00:00:13,330
The first type is an atomic exchange instruction, something like

5
00:00:13,330 --> 00:00:17,272
this. The parameters for this instruction look like the

6
00:00:17,272 --> 00:00:19,899
parameters for a load or a store, but what an

7
00:00:19,899 --> 00:00:22,597
exchange does, it does both a load and a store

8
00:00:22,597 --> 00:00:25,295
at the same time, so that it swaps the content

9
00:00:25,295 --> 00:00:28,064
of R1 with the contents of the memory location

10
00:00:28,064 --> 00:00:31,230
that it, the address is. So a load would

11
00:00:31,230 --> 00:00:36,900
read this and put it in R1. A store would take what's in R1 and put it here.

12
00:00:36,900 --> 00:00:40,304
An exchange swaps the contents of the two. So

13
00:00:40,304 --> 00:00:43,230
the register gets what was in the memory location.

14
00:00:43,230 --> 00:00:45,440
And the memory location gets what was in the

15
00:00:45,440 --> 00:00:50,465
register. If we have an atomic exchange, what we can

16
00:00:50,465 --> 00:00:57,290
do is put 1 into R1 and then repeatedly as long as R1 is equal to 1, exchange

17
00:00:57,290 --> 00:01:04,024
R1 with that lock variable. So this is the idea, R1 being 1, we are exchanging

18
00:01:04,024 --> 00:01:09,731
our R1 with a lock variable. We start out with 1 in R1. When we swap them,

19
00:01:09,731 --> 00:01:12,611
if the memory location for the lock had

20
00:01:12,611 --> 00:01:16,121
a zero, it becomes one in the same instruction

21
00:01:16,121 --> 00:01:22,100
that gets us a zero. If we do get a zero, we exit this loop. And the lock

22
00:01:22,100 --> 00:01:28,435
variable has become 1. If however the lock was already occupied, then we swap 1

23
00:01:28,435 --> 00:01:34,878
with 1. R1 stays 1, so we keep looping. So until we succeed in obtaining a zero,

24
00:01:34,878 --> 00:01:37,637
we will loop here just as before, but

25
00:01:37,637 --> 00:01:41,731
also as we're getting our zero, we are automatically

26
00:01:41,731 --> 00:01:45,380
setting the lock variable to one, so nobody else

27
00:01:45,380 --> 00:01:48,754
can also observe a zero. Pretty much if we

28
00:01:48,754 --> 00:01:51,265
get a zero in our R1, that means that

29
00:01:51,265 --> 00:01:54,505
everybody who'll try to do this at the same time

30
00:01:54,505 --> 00:01:57,464
will get our one. If somebody else did this

31
00:01:57,464 --> 00:02:00,704
before us, then we would be getting their one in

32
00:02:00,704 --> 00:02:03,542
our R1. So the fact that we are reading

33
00:02:03,542 --> 00:02:06,942
zero here means that we are the ones who acquired

34
00:02:06,942 --> 00:02:11,400
the lock. So atomic exchange gives us this read

35
00:02:11,400 --> 00:02:13,570
and write at the same time behavior that we

36
00:02:13,570 --> 00:02:15,180
want to implement our locks and as you can

37
00:02:15,180 --> 00:02:19,360
see the lock function can now be very simple. The

38
00:02:19,360 --> 00:02:23,300
drawback of the atomic exchange operation is that it

39
00:02:23,300 --> 00:02:26,930
keeps writing to the memory location all the time, even

40
00:02:26,930 --> 00:02:29,190
while the lock is busy, while the lock has

41
00:02:29,190 --> 00:02:32,540
been locked by somebody else. So as long as we're

42
00:02:32,540 --> 00:02:35,870
doing this, we will be these writes even though we

43
00:02:35,870 --> 00:02:39,130
are just getting a one all the time. So the

44
00:02:39,130 --> 00:02:43,150
second main type of atomic instructions is a whole family

45
00:02:43,150 --> 00:02:45,380
of things that can be classified as test and then

46
00:02:45,380 --> 00:02:49,550
write. So, the idea is that we test the location

47
00:02:49,550 --> 00:02:52,340
and if it satisfies some conditions, then we are going to

48
00:02:52,340 --> 00:02:55,460
write, but we don't write all the time. So let's

49
00:02:55,460 --> 00:02:57,620
say we have some sort of a test and store

50
00:02:57,620 --> 00:03:00,932
instruction which behaves like this. We read the

51
00:03:00,932 --> 00:03:04,364
memory location that we are addressing, and if that

52
00:03:04,364 --> 00:03:07,750
location is zero then we store R1 into it.

53
00:03:07,750 --> 00:03:10,436
And in that case, R1 becomes 1, but if

54
00:03:10,436 --> 00:03:13,438
the location wasn't o ,then we don't store

55
00:03:13,438 --> 00:03:18,250
anything to that location. We just return a 0.

56
00:03:18,250 --> 00:03:22,758
So the idea here is that we are testing the whether the lock is free. If it is

57
00:03:22,758 --> 00:03:28,700
free, then we try to write a 1 in it. If it's not free, then we simply continue.

58
00:03:28,700 --> 00:03:30,290
There is no point in trying to write to

59
00:03:30,290 --> 00:03:32,990
a lock that we know is not free. So we're

60
00:03:32,990 --> 00:03:36,430
avoiding the writes that happen in the exchange, while

61
00:03:36,430 --> 00:03:39,355
the lock is actually not free. So this behaves

62
00:03:39,355 --> 00:03:42,655
very similarly to the exchange, except that it only

63
00:03:42,655 --> 00:03:45,710
does the write if the lock has the unlock state.
