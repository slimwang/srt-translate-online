1
00:00:00,440 --> 00:00:03,900
Let's now think about the problem of
sorting n elements in a two-level

2
00:00:03,900 --> 00:00:05,100
hierarchy.

3
00:00:05,100 --> 00:00:07,970
Initially, let's assume
a processor is sequential.

4
00:00:07,970 --> 00:00:11,400
Here's a natural scheme based
on the merge sort idea.

5
00:00:11,400 --> 00:00:15,710
Start by logically dividing the input
into chunks of size proportional to, but

6
00:00:15,710 --> 00:00:20,310
no greater than, z, so
that a single chunk fits in fast memory.

7
00:00:20,310 --> 00:00:24,450
Next, read a chunk of the input
from slow memory into fast memory.

8
00:00:24,450 --> 00:00:26,110
Then sort this chunk.

9
00:00:26,110 --> 00:00:30,210
I'll refer to this sorted output sitting
in fast memory as a sorted run, or

10
00:00:30,210 --> 00:00:32,180
just run for short.

11
00:00:32,180 --> 00:00:33,150
As a mnemonic,

12
00:00:33,150 --> 00:00:37,140
this left to right arrow is to remind
you that this chunk is sorted.

13
00:00:37,140 --> 00:00:40,980
Since the run is now sorted,
write it back to slow memory.

14
00:00:40,980 --> 00:00:43,950
You'll repeat this process
on each input chunk.

15
00:00:43,950 --> 00:00:47,890
Assuming each of the input chunks was of
size F times Z, where F is some constant

16
00:00:47,890 --> 00:00:54,130
less than one, then you'll end up with
about N/F times Z sorted runs in total.

17
00:00:54,130 --> 00:00:58,450
I'll refer to everything we just
did as phase one of the procedure.

18
00:00:58,450 --> 00:01:02,690
Again, that's partition the input
into approximately Z size chunks.

19
00:01:02,690 --> 00:01:06,620
And then for each chunk, you read
a chunk, sort it and write it back.

20
00:01:06,620 --> 00:01:09,030
Following the merge sort idea,
in phase two,

21
00:01:09,030 --> 00:01:13,460
you want to merge all the sorted
runs into a single final sorted run.

22
00:01:13,460 --> 00:01:17,200
Before discussing that, let's analyze
phase one the partition sorting step.
