1
00:00:00,000 --> 00:00:06,000
Here I've defined some test examples, and here I've written a simple test function.

2
00:00:06,000 --> 00:00:10,000
What does it do? It iterates through each of the possible examples.

3
00:00:10,000 --> 00:00:15,000
It prints out what the example is, the original formula.

4
00:00:15,000 --> 00:00:21,000
Then it uses the time call function that we defined in the previous lesson.

5
00:00:21,000 --> 00:00:29,000
It calls solve on the example and gets back the time it took and the possible results

6
00:00:29,000 --> 00:00:31,000
and prints that out.

7
00:00:31,000 --> 00:00:34,000
Then in the end it prints out the total elapsed time

8
00:00:34,000 --> 00:00:41,000
and does that by starting a timer at the start and taking a time at the end

9
00:00:41,000 --> 00:00:43,000
and just calculating the difference.

10
00:00:43,000 --> 00:00:47,000
It's going to tell me for each example what the answer is,

11
00:00:47,000 --> 00:00:51,000
how long it took for that example, and how long it took for all of them together.

12
00:00:51,000 --> 00:00:53,000
Here is the results of the test.

13
00:00:53,000 --> 00:00:56,000
For each example, we see the example printed,

14
00:00:56,000 --> 00:01:02,000
then the filled in example found, and you can verify that that is, in fact, correct.

15
00:01:02,000 --> 00:01:05,000
It took a tenth of a second or so.

16
00:01:05,000 --> 00:01:09,000
Some of them take less. When there's only one variable it's really fast.

17
00:01:09,000 --> 00:01:15,000
Here we find these Pythagorean triplets of 3-squared plus 4-squared equals 5-squared,

18
00:01:15,000 --> 00:01:19,000
and 5-squared plus 12-squared equals 13-squared.

19
00:01:19,000 --> 00:01:25,000
Notice that we've gone beyond the most simple of cryptarithmetic problems,

20
00:01:25,000 --> 00:01:29,000
which were just word plus word equals another word.

21
00:01:29,000 --> 00:01:34,000
Here we can allow division and exponentiation.

22
00:01:34,000 --> 00:01:41,000
Over here I've been even more complicated where I've come up with A<b>N plus B</b>N equals C**N,

23
00:01:41,000 --> 00:01:44,000
and N is greater than 1.

24
00:01:44,000 --> 00:01:49,000
The lowercase letters I have not translated, because I said the only letters

25
00:01:49,000 --> 00:01:53,000
that count as being translated by digits are going to be the upper case ones,

26
00:01:53,000 --> 00:01:58,000
so I can use any of this Python syntax like the and operator.

27
00:01:58,000 --> 00:02:04,000
Now, if you can find a solution for this when N is greater than 2, I want you to let me know.

28
00:02:04,000 --> 00:02:07,000
But here I found one when N is greater than 1.

29
00:02:07,000 --> 00:02:12,000
I've split the atom. I've determined that all that glitters is not gold.

30
00:02:12,000 --> 00:02:18,000
I've determined that 1 is less than 2 and 4 is less than 5.

31
00:02:18,000 --> 00:02:23,000
You can see a bunch of other equations that I've been able to process,

32
00:02:23,000 --> 00:02:27,000
including ODD plus ODD equals EVEN.

33
00:02:27,000 --> 99:59:59,999
And for these 14 different examples it took 2 seconds. Not too bad.
