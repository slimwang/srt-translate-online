1
00:00:00,530 --> 00:00:03,330
So the answer is the first three are all good reasons

2
00:00:03,330 --> 00:00:07,160
to focus on how time scales with input size, rather than absolute

3
00:00:07,160 --> 00:00:11,980
time. So the first reason is if we have an understanding of

4
00:00:11,980 --> 00:00:14,840
how the time depends on input size, well then, we can predict

5
00:00:14,840 --> 00:00:17,870
how long it will take before we actually execute a program. If

6
00:00:17,870 --> 00:00:19,950
we have to run the program to figure out how long it

7
00:00:19,950 --> 00:00:23,050
takes, well that's not going to be very useful because we have actually

8
00:00:23,050 --> 00:00:25,560
finished it. We have got the result we want. If we only

9
00:00:25,560 --> 00:00:28,260
learn how long it takes on that particular input, we

10
00:00:28,260 --> 00:00:30,960
haven't learned anything useful to figure out, what it will

11
00:00:30,960 --> 00:00:33,170
cost to run it on some other input. So we

12
00:00:33,170 --> 00:00:36,060
want to be able to make predictions, by understanding how the running

13
00:00:36,060 --> 00:00:38,860
time depends on the actual size of the input. The

14
00:00:38,860 --> 00:00:42,200
second reason is also true. By understanding how time scales with

15
00:00:42,200 --> 00:00:44,230
input size, we get a better idea of how the

16
00:00:44,230 --> 00:00:48,100
cost will change over time. Computers keep getting cheaper and faster.

17
00:00:48,100 --> 00:00:51,110
>> This was observed by Gordon Moore in 1965.

18
00:00:51,110 --> 00:00:54,720
And turned into the notion that we sometimes call Moore's Law

19
00:00:54,720 --> 00:00:57,320
today. It's not a law in the sense of a physical

20
00:00:57,320 --> 00:00:59,700
law, but it's a law in the sense that the history

21
00:00:59,700 --> 00:01:02,600
of computing has followed this trend, where the amount of computing

22
00:01:02,600 --> 00:01:06,150
power you get for the same cost, approximately doubles every 18

23
00:01:06,150 --> 00:01:10,650
months. So what you can get for $1,000 today is half

24
00:01:10,650 --> 00:01:12,920
what you'll be able to get for $1,000 a year and

25
00:01:12,920 --> 00:01:16,190
a half from now. That's a pretty nice property to have,

26
00:01:16,190 --> 00:01:18,990
but it means that understanding the cost of something today

27
00:01:18,990 --> 00:01:21,430
doesn't tell us very much. What we really want to understand

28
00:01:21,430 --> 00:01:24,460
is the cost in a more fundamental way. The third

29
00:01:24,460 --> 00:01:28,510
reason is also true. That by understanding how time scales with

30
00:01:28,510 --> 00:01:31,640
input size, we get a much better fundamental understanding of

31
00:01:31,640 --> 00:01:34,810
our algorithms, than if we just had some absolute time measurements

32
00:01:34,810 --> 00:01:37,450
for a few different inputs. The fourth answer is not

33
00:01:37,450 --> 00:01:41,050
correct. Abstract answers can be just as wrong as concrete answers.

34
00:01:41,050 --> 00:01:43,670
But having good abstract answers will allow us to understand

35
00:01:43,670 --> 00:01:46,950
things much more deeply, than a few specific concrete answers will.
