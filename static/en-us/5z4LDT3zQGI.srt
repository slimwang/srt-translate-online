1
00:00:00,510 --> 00:00:03,310
This lesson covers traffic engineering. Traffic

2
00:00:03,310 --> 00:00:06,770
engineering is the process of reconfiguring the

3
00:00:06,770 --> 00:00:10,140
network in response to changing traffic loads

4
00:00:10,140 --> 00:00:12,870
to achieve some operational goal. A network

5
00:00:12,870 --> 00:00:17,870
operator might want to reconfigure the network in response to changing loads to,

6
00:00:17,870 --> 00:00:21,540
for example, maintain traffic ratios in a

7
00:00:21,540 --> 00:00:25,830
peering relationship or to relieve congestion on

8
00:00:25,830 --> 00:00:28,290
certain links in the network or to balance

9
00:00:28,290 --> 00:00:31,230
load more evenly across the available links in

10
00:00:31,230 --> 00:00:34,320
the network. In this lesson we will explore

11
00:00:34,320 --> 00:00:37,490
different ways of performing traffic engineering. We will

12
00:00:37,490 --> 00:00:39,940
start by looking at conventional approaches to traffic

13
00:00:39,940 --> 00:00:43,610
engineering and we'll explore how software-defined networking is

14
00:00:43,610 --> 00:00:46,630
used to make the process of traffic engineering

15
00:00:46,630 --> 00:00:51,370
easier in both data center networks and transit networks.

16
00:00:51,370 --> 00:00:53,960
IP networks must be managed. Now, in

17
00:00:53,960 --> 00:00:58,090
some sense, IP networks manage themselves. There

18
00:00:58,090 --> 00:01:00,500
are several examples of protocols on the

19
00:01:00,500 --> 00:01:03,930
internet that in some sense manage themselves. TCP

20
00:01:03,930 --> 00:01:07,270
senders send less traffic during congestion and

21
00:01:07,270 --> 00:01:10,430
routing protocols will adapt to topology changes.

22
00:01:10,430 --> 00:01:12,560
The problem is that even though these

23
00:01:12,560 --> 00:01:16,810
protocols are designed to adapt to various changes,

24
00:01:16,810 --> 00:01:19,340
the network may not run efficiently. There

25
00:01:19,340 --> 00:01:23,150
may be congested links when idle paths exist

26
00:01:23,150 --> 00:01:25,130
or there might be a high-delay path that

27
00:01:25,130 --> 00:01:27,410
some traffic is taking when a low-delay path,

28
00:01:27,410 --> 00:01:30,190
in fact, exists. So key question that

29
00:01:30,190 --> 00:01:33,195
traffic engineering tries to address is how routing

30
00:01:33,195 --> 00:01:37,330
should adapt to traffic. In particular, traffic engineering

31
00:01:37,330 --> 00:01:41,930
attempts to avoid congested links and satisfy certain

32
00:01:41,930 --> 00:01:45,470
application requirements such as delay. These are,

33
00:01:45,470 --> 00:01:48,120
in some sense, the essential questions that traffic

34
00:01:48,120 --> 00:01:53,140
engineering attempts to answer. In the rest of this lesson we will look at how

35
00:01:53,140 --> 00:01:55,770
network operators can tune a routing protocol

36
00:01:55,770 --> 00:02:01,500
configuration to affect how network traffic traverses the

37
00:02:01,500 --> 00:02:03,740
links in the network. And in particular

38
00:02:03,740 --> 00:02:07,680
we will look at both intradomain traffic engineering,

39
00:02:07,680 --> 00:02:10,380
that is how to reconfigure the protocols

40
00:02:10,380 --> 00:02:13,390
within a single autonomous system to adjust traffic

41
00:02:13,390 --> 00:02:17,030
flows, as well as interdomain traffic engineering, or

42
00:02:17,030 --> 00:02:20,170
how to adjust how traffic flows between autonomous

43
00:02:20,170 --> 00:02:25,450
system. We will also look at multi-path routing and how it is used to achieve

44
00:02:25,450 --> 00:02:28,970
various traffic engineering goals. Let's start by looking

45
00:02:28,970 --> 00:02:33,540
how network operators can tune static link weights

46
00:02:33,540 --> 00:02:37,950
in a routing protocol like OSPF or ISIS,

47
00:02:37,950 --> 00:02:40,550
to affect how traffic flows through the network.
