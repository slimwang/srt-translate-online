1
00:00:00,240 --> 00:00:05,580
Our task is to add an instance variable that counts the number of passengers.

2
00:00:05,580 --> 00:00:11,276
Here it is. Here I want to add a passenger to this car, so we will increment

3
00:00:11,276 --> 00:00:17,586
our counter. But, of course, there's a twist. You can only add a passenger if

4
00:00:17,586 --> 00:00:22,921
there's room. So, we need to check if the number of passengers plus the one

5
00:00:22,921 --> 00:00:27,372
that I want to add is less than the number of seats. Why not less equal than

6
00:00:27,372 --> 00:00:31,148
the number of seats? I still need one seat for the driver. So only in that case

7
00:00:31,148 --> 00:00:35,361
do I increment. So when I talk about patterns in general, the pattern that I

8
00:00:35,361 --> 00:00:38,448
described here says increment the counter, but it doesn't mean that you'll

9
00:00:38,448 --> 00:00:43,132
always have to increment the counter. The patterns gives you the broad outline

10
00:00:43,132 --> 00:00:47,245
of what you have to do, and the details are different, in every situation.

11
00:00:47,245 --> 00:00:52,645
After all if it was that simple, then you wouldn't be making the big bucks

12
00:00:52,645 --> 00:00:57,870
figuring out the answers. Finally, the getPassengerCount really is as simple as

13
00:00:57,870 --> 00:01:01,344
you think, here we just return the numberOfPassengers. The point is again,

14
00:01:01,344 --> 00:01:06,154
knowing that many classes keep a counter can help you when you have a situation

15
00:01:06,154 --> 00:01:13,211
where that is appropriate. Here, at the counter, you figure how does the count

16
00:01:13,211 --> 00:01:19,836
change, that's the case here. Here we increment the counter, and then here we

17
00:01:19,836 --> 00:01:24,964
have a simple and boring method to return. In this example, we just counted the

18
00:01:24,964 --> 00:01:29,350
number of passengers. What if we wanted to know who's actually in the car?

19
00:01:29,350 --> 00:01:31,270
We'll turn to that next.
