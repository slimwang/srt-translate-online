1
00:00:00,000 --> 00:00:04,000
In this problem, we've been asked to build a simplified Sudoko checker.

2
00:00:04,000 --> 00:00:09,000
In this version, we're given an n x n matrix. In this case n equals 3.

3
00:00:09,000 --> 00:00:16,000
We're going to insure that every number appears once in every column, and once in every row.

4
00:00:16,000 --> 00:00:23,000
In this example, the 1 appears once in this column, once in this column, once in this column,

5
00:00:23,000 --> 00:00:26,000
once in this row, once in this row, and once in this row.

6
00:00:26,000 --> 00:00:31,000
We can repeat that check for every digit in the grid.

7
00:00:31,000 --> 00:00:33,000
Here's our plan of action for solving this problem.

8
00:00:33,000 --> 00:00:36,000
We're going to go through each digit, 1 through n.

9
00:00:36,000 --> 00:00:38,000
In this case, 1 through 3.

10
00:00:38,000 --> 00:00:44,000
We're going to start with 1, and we're going to go through each row and column at the same time,

11
00:00:44,000 --> 00:00:49,000
checking to see that that digit occurs once and only once in each row and column.

12
00:00:49,000 --> 00:00:54,000
Here we see 1 appears once in the first row and the first column,

13
00:00:54,000 --> 00:00:57,000
so we increment our counts by 1.

14
00:00:57,000 --> 00:01:03,000
Then we check the second entry in the row and the column and then the third entry.

15
00:01:03,000 --> 00:01:06,000
At the end of checking each entry in the row and the column

16
00:01:06,000 --> 00:01:11,000
we check our count and make sure that it equals 1 for both.

17
00:01:11,000 --> 00:01:15,000
If either one is not equal to 1, then this grid is not correct.

18
00:01:15,000 --> 00:01:18,000
Otherwise, if we go through each digit and see

19
00:01:18,000 --> 00:01:22,000
that every digit appears once and only once in every row and column,

20
00:01:22,000 --> 00:01:27,000
then this grid satisfies our modified Sudoku property, and we return True.

21
00:01:27,000 --> 00:01:29,000
Let's code this up.

22
00:01:29,000 --> 00:01:32,000
Here's the finished code for this problem.

23
00:01:32,000 --> 00:01:39,000
First we extract the size of the grid by looking simply at the length of the list p.

24
00:01:39,000 --> 00:01:42,000
Then we start with the first digit and go through each digit,

25
00:01:42,000 --> 00:01:46,000
checking each row and column at the same time.

26
00:01:46,000 --> 00:01:50,000
For each entry in the row and the column, we see if that entry equals our digit.

27
00:01:50,000 --> 00:01:53,000
If it does, we increment our counts.

28
00:01:53,000 --> 00:01:55,000
Otherwise, we just move onto the next entry.

29
00:01:55,000 --> 00:01:59,000
Once we go through that row and the column, we ensure that

30
00:01:59,000 --> 00:02:03,000
the row count and the column count both are exactly 1.

31
00:02:03,000 --> 00:02:06,000
If they aren't then we return False and stop,

32
00:02:06,000 --> 00:02:09,000
because the grid has already violated our Sudoku property.

33
00:02:09,000 --> 00:02:13,000
Otherwise, we keep going to the next row and the column

34
00:02:13,000 --> 00:02:15,000
until we've gone through each row and column for that digit.

35
00:02:15,000 --> 00:02:18,000
After we are done with that digit, we move onto the next digit.

36
00:02:18,000 --> 00:02:22,000
We go through every digit, ensuring the Sudoku property for each digit.

37
00:02:22,000 --> 00:02:25,000
We return True, because there was nothing wrong with the grid,

38
00:02:25,000 --> 00:02:28,000
so therefore it passes the test.
