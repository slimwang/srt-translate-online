1
00:00:00,650 --> 00:00:05,490
Welcome back to the next module of the advanced operating systems course. Recall

2
00:00:05,490 --> 00:00:10,600
that the Cornell experiment that we saw as the last

3
00:00:10,600 --> 00:00:15,400
piece of the previous module argues for a component based

4
00:00:15,400 --> 00:00:20,970
design to reduce the pain points in the development of complex software

5
00:00:20,970 --> 00:00:26,680
systems. And industries that are designing and commercializing

6
00:00:26,680 --> 00:00:30,300
production operating systems and distributed services

7
00:00:30,300 --> 00:00:33,090
through the client-server paradigm, there is

8
00:00:33,090 --> 00:00:39,170
another important pain point. And that is how to design for the

9
00:00:39,170 --> 00:00:43,300
continuous and incremental evolution of complex

10
00:00:43,300 --> 00:00:46,670
distributed software systems, both in terms

11
00:00:46,670 --> 00:00:52,010
of functionality and performance. The short answer to the puzzle is distributed

12
00:00:52,010 --> 00:00:55,470
object technology. We saw how object

13
00:00:55,470 --> 00:00:59,240
technology is employed in the Tornado parallel

14
00:00:59,240 --> 00:01:01,750
operating system as a structuring tool

15
00:01:01,750 --> 00:01:04,440
to allow the scalability of operating system

16
00:01:04,440 --> 00:01:10,630
services in a parallel system. In this module of the advanced operating systems

17
00:01:10,630 --> 00:01:17,200
course, we are going to see examples of how distributed object technology is

18
00:01:17,200 --> 00:01:21,800
influencing commercial offerings in the computer industry.

19
00:01:21,800 --> 00:01:24,680
We'll start this lesson module with the

20
00:01:24,680 --> 00:01:26,750
discussion of the Spring system, which was

21
00:01:26,750 --> 00:01:29,900
designed and implemented in Sun Micro Systems

22
00:01:29,900 --> 00:01:34,360
as a network operating system for use in a local area network. Later on,

23
00:01:34,360 --> 00:01:38,820
Spring was marketed as Sun's Solaris operating

24
00:01:38,820 --> 00:01:42,870
system. Before we discuss the Spring system,

25
00:01:42,870 --> 00:01:48,140
a little bit of history and some personal connection. Yousef Khalidi, one of the

26
00:01:48,140 --> 00:01:53,650
chief architects of the spring system, got his PhD from Georgia Tech in

27
00:01:53,650 --> 00:01:58,430
1989 developing the cloud's distributing operating system,

28
00:01:58,430 --> 00:02:00,840
which is an object based operating system.

29
00:02:00,840 --> 00:02:03,580
And he was my numero uno PhD

30
00:02:03,580 --> 00:02:08,139
student incidentally. Not surprisingly, the Spring system

31
00:02:08,139 --> 00:02:11,280
was heavily influenced by Yousef's work with

32
00:02:11,280 --> 00:02:15,115
clouds. And Spring came out commercially as

33
00:02:15,115 --> 00:02:21,630
Sun's Solaris MC product. And for the trivia buffs out there, Yousef is now

34
00:02:21,630 --> 00:02:26,370
heading Microsoft's Azure Cloud Computing product. By

35
00:02:26,370 --> 00:02:29,200
the way, Azure has nothing to do

36
00:02:29,200 --> 00:02:31,930
with the cloud system that Yousef developed

37
00:02:31,930 --> 00:02:34,770
as a grad student at Georgia Tech. Later

38
00:02:34,770 --> 00:02:39,620
on, when we discuss giant scale services and cloud computing, we will feature an

39
00:02:39,620 --> 00:02:43,080
interview with Yousef wherein he shares his

40
00:02:43,080 --> 00:02:47,060
thoughts on future evolution of distributed system services.
