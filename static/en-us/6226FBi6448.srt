1
00:00:00,850 --> 00:00:03,610
Now let's discuss some of the issues with

2
00:00:03,610 --> 00:00:07,030
scalability of the synchronization primitives in a shared

3
00:00:07,030 --> 00:00:10,380
memory multiprocessor. Now we already saw that locks,

4
00:00:10,380 --> 00:00:13,540
both mutual exclusion as well as shared lock is

5
00:00:13,540 --> 00:00:16,200
one type of a synchronization operation. And we

6
00:00:16,200 --> 00:00:19,660
also saw that barrier algorithms is another type of

7
00:00:19,660 --> 00:00:22,520
synchronization operations. And when you look at both

8
00:00:22,520 --> 00:00:25,950
of these guys Both of these types of synchronization

9
00:00:25,950 --> 00:00:29,451
perimeters that a parallel operating system is going to

10
00:00:29,451 --> 00:00:31,770
provide for application programmer

11
00:00:31,770 --> 00:00:35,190
developing multi-threaded applications. The sources

12
00:00:35,190 --> 00:00:37,660
of inefficiencies that come aboard is first of all

13
00:00:37,660 --> 00:00:40,790
latency. What do we mean by that? Well, If

14
00:00:40,790 --> 00:00:43,430
the thread wants to acquire this lock, it has

15
00:00:43,430 --> 00:00:45,710
to do some operation. Has to go to memory,

16
00:00:45,710 --> 00:00:48,070
get this lock, and make sure that nobody else

17
00:00:48,070 --> 00:00:51,320
is competing with it. And, so that's the the

18
00:00:51,320 --> 00:00:54,460
latency that is inherently what is the time that

19
00:00:54,460 --> 00:00:57,300
is spent by a thread in acquiring the lock.

20
00:00:57,300 --> 00:01:00,670
That's what we mean by latency. Well to be

21
00:01:00,670 --> 00:01:04,060
more precise what we mean is that latency is

22
00:01:04,060 --> 00:01:06,730
saying, lock is currently not being used. How long

23
00:01:06,730 --> 00:01:07,920
does it take for me to go and get

24
00:01:07,920 --> 00:01:12,480
it? That's really the key question that latency is,

25
00:01:12,480 --> 00:01:16,970
is trying to, look at. The second source of scalabilty

26
00:01:16,970 --> 00:01:20,723
with synchronization, is the waiting time, and that is if

27
00:01:20,723 --> 00:01:23,480
I want to go and get the lock, how long do

28
00:01:23,480 --> 00:01:26,360
I wait in order to get that lock? Well clearly

29
00:01:26,360 --> 00:01:29,372
this is not something, that you and I as the

30
00:01:29,372 --> 00:01:33,340
oldest designer has complete control over, because it really depends

31
00:01:33,340 --> 00:01:36,000
on what these threads are doing with this lock. So

32
00:01:36,000 --> 00:01:39,560
for instance, if this thread acquires this lock and, and

33
00:01:39,560 --> 00:01:42,040
then it is modifying the data for a long time before

34
00:01:42,040 --> 00:01:44,570
releasing it, and if another thread comes along

35
00:01:44,570 --> 00:01:46,390
and wants the team lock, it's going to wait for

36
00:01:46,390 --> 00:01:48,440
a long time. So the waiting time is really

37
00:01:48,440 --> 00:01:51,230
in the purview of the application. And there's not

38
00:01:51,230 --> 00:01:54,260
much you can do, as an OS designer, in

39
00:01:54,260 --> 00:01:58,480
reducing the waiting time. The third source of unscalability

40
00:01:58,480 --> 00:02:02,430
of locks is contention. What we mean by that

41
00:02:02,430 --> 00:02:06,980
is. If currently some guy is using the lock,

42
00:02:06,980 --> 00:02:10,220
and he releases it, when the lock is released, it's

43
00:02:10,220 --> 00:02:13,600
now up for grabs. Maybe there's no, I've shown you only

44
00:02:13,600 --> 00:02:15,850
one thread here, but maybe there's a bunch of threads

45
00:02:15,850 --> 00:02:19,770
waiting here to access this particular lock. If they're all waiting

46
00:02:19,770 --> 00:02:23,010
to access this lock, they're all contending for this lock.

47
00:02:23,010 --> 00:02:25,980
And how long does it take in the presence of contention

48
00:02:25,980 --> 00:02:28,140
for one of them to become the winner of the

49
00:02:28,140 --> 00:02:32,050
Lock and the others to go away? So that's the contention

50
00:02:32,050 --> 00:02:36,240
part of im, implementing a synchronization primitive.

51
00:02:37,340 --> 00:02:40,100
And all of these things, latency, waiting time

52
00:02:40,100 --> 00:02:41,640
and contention even though I mentioned it

53
00:02:41,640 --> 00:02:44,630
in the context of a mutual exclusion lock

54
00:02:44,630 --> 00:02:47,730
appears when you're talking about barrier synchronization,

55
00:02:47,730 --> 00:02:51,980
algorithms, or shared locks. So latency and contention

56
00:02:51,980 --> 00:02:54,060
are two things as all designers, we have

57
00:02:54,060 --> 00:02:57,380
to be always worried about, and implementing scalelable

58
00:02:57,380 --> 00:02:58,940
versions of synchronization primitives.
