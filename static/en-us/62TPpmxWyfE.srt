1
00:00:00,200 --> 00:00:03,485
Now we will look at two possible
optimizations of a write-update

2
00:00:03,485 --> 00:00:04,620
protocol.

3
00:00:04,620 --> 00:00:09,420
The first optimization we'll look
at is about avoiding memory writes.

4
00:00:09,420 --> 00:00:14,020
Remember that in a write-update
protocol, every write in any of

5
00:00:14,020 --> 00:00:20,260
the processors,needs to be broadcast on
the BUS and needs to update the memory.

6
00:00:20,260 --> 00:00:25,180
Because memory is big and slow, it
cannot keep up with all the writes, and

7
00:00:25,180 --> 00:00:29,560
that means that the memory throughput
becomes a bottleneck for the system.

8
00:00:29,560 --> 00:00:34,900
Pretty much it's not about how
much traffic can the BUS take,

9
00:00:34,900 --> 00:00:38,440
it's about how much traffic
can the memory take.

10
00:00:38,440 --> 00:00:41,760
So we want to avoid
unnecessary memory writes.

11
00:00:41,760 --> 00:00:46,270
These caches previously behaved
as write-through caches.

12
00:00:46,270 --> 00:00:49,420
Every write was going
through the cache to memory.

13
00:00:49,420 --> 00:00:52,490
And we have seen already that
write-through is bad for

14
00:00:52,490 --> 00:00:55,040
memory traffic even with a single core.

15
00:00:55,040 --> 00:00:59,350
Now we are adding more than one core, so
it's going to be even a bigger problem.

16
00:00:59,350 --> 00:01:03,250
So the solution to reducing memory
traffic here will be the same.

17
00:01:03,250 --> 00:01:07,480
We will add a dirty bit to each
block in each of the caches, and

18
00:01:07,480 --> 00:01:11,410
this dirty bit will allow
us to delay a memory write

19
00:01:11,410 --> 00:01:15,130
until we actually replace
a dirty block from our cache.

20
00:01:15,130 --> 00:01:18,960
So now let us see how this work and
how it avoids memory writes.

21
00:01:18,960 --> 00:01:21,880
Suppose that this cache reads A.

22
00:01:21,880 --> 00:01:26,200
It gets this value from memory,
let's say it's 6.

23
00:01:26,200 --> 00:01:28,130
The tag will be A.

24
00:01:28,130 --> 00:01:30,490
It's valid and it's not dirty.

25
00:01:30,490 --> 00:01:33,010
Now this cache writes A.

26
00:01:33,010 --> 00:01:37,670
At this point, it will broadcast
the write with the address of A and

27
00:01:37,670 --> 00:01:40,370
the value that it writes, let's say 17.

28
00:01:40,370 --> 00:01:43,700
So this cache here
would update the value.

29
00:01:43,700 --> 00:01:51,260
Now without the dirty bit, the memory
would also be updated with A = 17.

30
00:01:51,260 --> 00:01:53,370
We want to avoid that.

31
00:01:53,370 --> 00:01:53,950
Why?
Well,

32
00:01:53,950 --> 00:01:56,740
because there could be
a lot of writes here

33
00:01:56,740 --> 00:01:59,990
until we finally replace
it in a write by cache.

34
00:01:59,990 --> 00:02:05,950
So what we will do is we will write 17,
tag it this way, and mark this as dirty.

35
00:02:05,950 --> 00:02:07,770
Dirty means two things here.

36
00:02:07,770 --> 00:02:12,340
One is that the memory is not up
to date and we need to update it.

37
00:02:12,340 --> 00:02:17,580
This is exactly the same as in a normal
uniprocessor write-back cache.

38
00:02:17,580 --> 00:02:21,900
If we replace something dirty,
we have to send it right back to memory.

39
00:02:21,900 --> 00:02:24,059
In our write-update protocol,

40
00:02:24,059 --> 00:02:28,210
dirty has another meaning
that we will now illustrate.

41
00:02:28,210 --> 00:02:33,670
Suppose that this cache replaces this
block and then wants to read it again.

42
00:02:33,670 --> 00:02:37,244
So it issues a request
to read on the BUS.

43
00:02:37,244 --> 00:02:42,227
And now normally the memory
would respond with a value, but

44
00:02:42,227 --> 00:02:45,950
the memory still has
the old value of A = 6.

45
00:02:45,950 --> 00:02:49,090
This cache here has
the only up-to-date copy.

46
00:02:49,090 --> 00:02:52,040
That's what the dirty
bit also stands for.

47
00:02:52,040 --> 00:02:56,340
So now this cache needs
to snoop reads as well.

48
00:02:56,340 --> 00:03:02,320
Notice that we are reading the same
block that it has in a dirty state.

49
00:03:02,320 --> 00:03:06,260
So instead of the memory being
allowed to respond, we respond first.

50
00:03:06,260 --> 00:03:09,520
The cache is faster than the memory,
so it will respond quicker, and

51
00:03:09,520 --> 00:03:11,490
say that A is 17.

52
00:03:11,490 --> 00:03:17,080
So now here we get A becomes 17
in this cache and it's not dirty.

53
00:03:17,080 --> 00:03:22,315
Now after this, let's say that we write
a new value here of let's say 20.

54
00:03:22,315 --> 00:03:24,350
We put the new value here.

55
00:03:24,350 --> 00:03:26,780
We broadcast the new value on the BUS.

56
00:03:26,780 --> 00:03:33,350
The snooping here gets that 20, but
the memory again doesn't get updated.

57
00:03:33,350 --> 00:03:34,610
If this block, however,

58
00:03:34,610 --> 00:03:39,300
gets replace from this cache,
then an update is sent to memory.

59
00:03:39,300 --> 00:03:43,320
Another interesting situation here is
what happens if we have the block dirty

60
00:03:43,320 --> 00:03:48,550
in this cache, and
now this cache writes 30 to A.

61
00:03:49,560 --> 00:03:53,730
In that case,
this cache broadcasts the write.

62
00:03:53,730 --> 00:03:59,620
This cache snoops the right,
puts 30 in its cache.

63
00:03:59,620 --> 00:04:02,330
Now this cache is no
longer responsible for

64
00:04:02,330 --> 00:04:07,320
writing back to memory, because the new
writer takes that responsibility and

65
00:04:07,320 --> 00:04:09,740
the memory still doesn't get updated.

66
00:04:09,740 --> 00:04:14,060
So as you can see, we can now do many
writes without updating the memory.

67
00:04:14,060 --> 00:04:18,720
We can even move the responsibility for
updating memory to another cache and

68
00:04:18,720 --> 00:04:22,270
keep writing there,
without the updates to memory.

69
00:04:22,270 --> 00:04:26,930
Only when the last writer replaces
the block that is still dirty

70
00:04:26,930 --> 00:04:29,450
will we have a single write to memory.

71
00:04:29,450 --> 00:04:32,980
So the benefits of having
the dirty bit are that

72
00:04:32,980 --> 00:04:36,330
we can now write to the memory
only when the block is replaced.

73
00:04:36,330 --> 00:04:39,190
So we can do many writes
without updating the memory,

74
00:04:39,190 --> 00:04:42,000
thus saving a lot of
the writes to memory.

75
00:04:42,000 --> 00:04:46,870
And also we avoid memory reads
because now we allow reads from memory

76
00:04:46,870 --> 00:04:50,360
only when nobody has
the block in a dirty state.

77
00:04:50,360 --> 00:04:55,790
If the block is dirty, for example here,
then whoever asks for this block, this

78
00:04:55,790 --> 00:04:59,740
is the cache that will provide the value
and the memory doesn't need to do that.

79
00:04:59,740 --> 00:05:01,920
So we are also saving reads
from memory this way.
