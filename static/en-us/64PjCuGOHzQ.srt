1
00:00:00,000 --> 00:00:04,000
[Thrun] So here's my second piece of software assignments in controls.

2
00:00:04,000 --> 00:00:09,000
In the class we talked about how to make a car follow a straight line.

3
00:00:09,000 --> 00:00:11,000
We used the line x = 0

4
00:00:11,000 --> 00:00:17,000
where the crossing arrow was defined as the y difference between this axis.

5
00:00:17,000 --> 00:00:19,000
We just went off the y value.

6
00:00:19,000 --> 00:00:24,000
So now I want to make a more interesting course, a cyclic course, a racecourse.

7
00:00:24,000 --> 00:00:28,000
Here's my racecourse. It has the radius r, which you can set.

8
00:00:28,000 --> 00:00:34,000
The way I'd like to define this racecourse is through a half cycle where we use r,

9
00:00:34,000 --> 00:00:39,000
same half cycle over here, and the stretches in between I want to be 2r long.

10
00:00:39,000 --> 00:00:45,000
So for example, if this radius equals 25 meters, then this would be 50 meters.

11
00:00:45,000 --> 00:00:49,000
The whole thing would be 100 meters, and this measurement would also be 50 meters.

12
00:00:49,000 --> 00:00:53,000
I want you to program it such that the initial car is stationed right over here,

13
00:00:53,000 --> 00:00:59,000
pointed upwards, and then it drives onto the racecourse like this,

14
00:00:59,000 --> 00:01:02,000
all the way around infinitely often.

15
00:01:02,000 --> 00:01:06,000
The key in doing this is going to be to set a function.

16
00:01:06,000 --> 00:01:11,000
I have already modified for you the function run from our control class

17
00:01:11,000 --> 00:01:15,000
to use that crosstrack_error with the parameter radius,

18
00:01:15,000 --> 00:01:19,000
which we're going to set to 25, but I can pick a different value in my testing.

19
00:01:19,000 --> 00:01:23,000
And then I have modified a little bit the update over here

20
00:01:23,000 --> 00:01:27,000
to maintain the differential and the integral crosstrack_error,

21
00:01:27,000 --> 00:01:32,000
and here is our steering control law that you are familiar with.

22
00:01:32,000 --> 00:01:37,000
Instead of twiddle I'm just going to give you parameters, 10, 15, and 0.

23
00:01:37,000 --> 00:01:40,000
Those work fine for me,

24
00:01:40,000 --> 00:01:43,000
and they're actually the result of running twiddle without the integral part.

25
00:01:43,000 --> 00:01:47,000
And then when I run it, I get my output. And here it is.

26
00:01:47,000 --> 00:01:50,000
The crosstrack_error by and large is very small.

27
00:01:50,000 --> 00:01:54,000
You can see the steering tends to be on the negative side.

28
00:01:54,000 --> 00:01:57,000
Here we're steering at the first turn, here we're on the straightaway.

29
00:01:57,000 --> 00:01:59,000
You can see this by the numbers.

30
00:01:59,000 --> 00:02:03,000
Here we go into a turn again, so the turning becomes larger.

31
00:02:03,000 --> 00:02:07,000
In all of this you find the crosstrack_error to be relatively small,

32
00:02:07,000 --> 00:02:12,000
about 0.1 or so--not very much--and this continues and continues.

33
00:02:12,000 --> 00:02:16,000
The final crosstrack_error for the second half of the race is 0.005.

34
00:02:16,000 --> 00:02:19,000
So you want this number to be really, really small.

35
00:02:19,000 --> 00:02:24,000
The tricky part is when you code this up and code the function cte,

36
00:02:24,000 --> 00:02:27,000
you need a different branch for this area here, for this area over here,

37
00:02:27,000 --> 00:02:29,000
this area over here, this area over here.

38
00:02:29,000 --> 00:02:32,000
Keep in mind that the robot is going to go in a cycle.

39
00:02:32,000 --> 00:02:35,000
So it's going to traverse this one in the opposite direction with this one over here.

40
00:02:35,000 --> 99:59:59,999
So good luck coding up the correct crosstrack_error function.
