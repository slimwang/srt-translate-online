1
00:00:00,330 --> 00:00:03,180
Let's now look at another
distributed file system example,

2
00:00:03,180 --> 00:00:05,590
the Sprite Distributed File System.

3
00:00:05,590 --> 00:00:09,470
And also the decision it makes
regarding its consistency protocols.

4
00:00:09,470 --> 00:00:13,420
We will base our discussion on
the Sprite Distributed File system

5
00:00:13,420 --> 00:00:16,010
as described in the research
paper Caching in

6
00:00:16,010 --> 00:00:19,190
the Sprite Network File System
by Nelson and others.

7
00:00:19,190 --> 00:00:20,660
This is an older paper, and

8
00:00:20,660 --> 00:00:24,680
it doesn't describe a production file
system like when we talked about NFS,

9
00:00:24,680 --> 00:00:29,020
instead, Sprite was
a research-distributed file system.

10
00:00:29,020 --> 00:00:31,580
But at the same time,
it was also actually built and

11
00:00:31,580 --> 00:00:34,490
deployed at UC Berkeley,
and people were using it.

12
00:00:34,490 --> 00:00:37,960
What's really nice about this
paper is that it has a lot of

13
00:00:37,960 --> 00:00:41,920
detailed explanations of
what was the usage pattern,

14
00:00:41,920 --> 00:00:47,143
the file access pattern, that motivated
the particular design that Sprite has.

15
00:00:47,143 --> 00:00:51,095
The authors used trace data that
was gathered from users using

16
00:00:51,095 --> 00:00:55,885
a real distributed filesystem to
understand something about the usage and

17
00:00:55,885 --> 00:00:59,715
the file access patterns that
appeared in the real world.

18
00:00:59,715 --> 00:01:03,215
And then based on that,
they understood what are the actual

19
00:01:03,215 --> 00:01:06,115
design requirements for
a distributed filesystem?

20
00:01:06,115 --> 00:01:10,255
So they were able to really justify
the decisions that they made in Sprite.
