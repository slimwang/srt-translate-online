1
00:00:00,300 --> 00:00:04,285
I know exactly how many times I want to roll the die. In this case, it's four.

2
00:00:04,285 --> 00:00:08,794
Now I get the die value from my generator, which was already defined up here.

3
00:00:08,794 --> 00:00:12,514
The same way we did for the last question, and I remember to add a 1 because

4
00:00:12,514 --> 00:00:18,565
this will generate numbers between 0 and 5. Now if the die value is 6, then I

5
00:00:18,565 --> 00:00:24,952
know that he won. Initially, I was assuming that I hadn't seen any yet. So he

6
00:00:24,952 --> 00:00:30,028
hadn't won yet. So he won would start out as false. And it's a Boolean. Now I

7
00:00:30,028 --> 00:00:34,316
return whether he won or not. If any of the die values were ever 6, then he won

8
00:00:34,316 --> 00:00:38,254
would be set to true. Otherwise, it'll just be left as false, the way it

9
00:00:38,254 --> 00:00:44,831
started. Now for game 2. Game 2 has more stuff going on. I still know exactly

10
00:00:44,831 --> 00:00:49,910
how many times I want to run, but this time I have to generate two die values.

11
00:00:49,910 --> 00:00:55,688
Now, I only say that he won, if both are 6. So if first roll is 6, and second

12
00:00:55,688 --> 00:01:01,455
roll is 6. Then 'heWon' is true and I started out assuming that he haven't won

13
00:01:01,455 --> 00:01:06,278
and at the end I've returned the value of 'heWon'. Now, if I won the demo, I

14
00:01:06,278 --> 00:01:10,085
should get something like this. It's hard to tell from this output what the

15
00:01:10,085 --> 00:01:14,290
exact probability of winning would be. But if you're curious, you could run it

16
00:01:14,290 --> 00:01:18,703
a whole lot more times. And use the algorithms that you've already worked with

17
00:01:18,703 --> 00:01:23,840
to calculate the total number of wins and compare it between game 1 and game 2.

18
00:01:23,840 --> 00:01:25,810
Good work on this problem.
