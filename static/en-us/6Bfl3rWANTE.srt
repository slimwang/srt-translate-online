1
00:00:00,510 --> 00:00:04,450
Having seen an example for n equals
four, now let's state the Fast Fourier

2
00:00:04,450 --> 00:00:07,280
transform precisely for
the general case.

3
00:00:07,280 --> 00:00:12,410
As input, we have a sequence of numbers,
a 0 through a n minus one, or

4
00:00:12,410 --> 00:00:16,880
N is a power of two, and we want to
return the values of the corresponding

5
00:00:16,880 --> 00:00:20,490
polynomial at the nth roots of unity.

6
00:00:20,490 --> 00:00:23,070
We'll state this as
a recursive algorithm, and

7
00:00:23,070 --> 00:00:26,690
the base case is where n is equal to 1.

8
00:00:26,690 --> 00:00:30,950
And in that case, we want to return
the single element sequence,

9
00:00:30,950 --> 00:00:34,360
consisting just of a 0,
the constant term.

10
00:00:34,360 --> 00:00:38,420
If n is greater than 1, then we call
the Fast Fourier transformer cursively.

11
00:00:39,420 --> 00:00:42,320
Once with the even coefficients.

12
00:00:42,320 --> 00:00:44,900
And once with the odds.

13
00:00:44,900 --> 00:00:49,940
Then we combine the results,
taking care of paired values together.

14
00:00:49,940 --> 00:00:55,030
Notice the difference in the sign on
the contribution from the odd powers,

15
00:00:55,030 --> 00:00:57,660
which became S prime.

16
00:00:57,660 --> 00:00:59,370
How long does this take?

17
00:00:59,370 --> 00:01:06,156
Well, we traded one problem of size
N for two problems of size N over 2,

18
00:01:06,156 --> 00:01:11,538
plus some order N work for
all the arithmetic in this loop.

19
00:01:11,538 --> 00:01:16,690
By the master theorem, this gives us
a running time of order and log in.

20
00:01:16,690 --> 00:01:20,570
This is much better then
the N squared running time,

21
00:01:20,570 --> 00:01:25,600
from the naive evaluation by Horner's
rule or by matrix multiplication.

22
00:01:25,600 --> 00:01:28,610
There's one other wrinkle that I
want to add to the algorithm, and

23
00:01:28,610 --> 00:01:32,130
that is to say that this
omega parameter here,

24
00:01:32,130 --> 00:01:35,220
can really be any primitive
nth root of unity.

25
00:01:36,300 --> 00:01:39,620
All that matters is that all
the powers be distinct, and

26
00:01:39,620 --> 00:01:42,340
that those be the roots of unity.

27
00:01:42,340 --> 00:01:46,560
So we can add this as a parameter
to our algorithm as well.

28
00:01:46,560 --> 00:01:51,140
We now take in as well, that omega is
a primitive nth root of unity, and

29
00:01:51,140 --> 00:01:55,340
we'll use that in our
update rules in here.

30
00:01:55,340 --> 00:01:57,100
We'll see how this comes in handy later.
