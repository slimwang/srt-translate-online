1
00:00:00,000 --> 00:00:03,000
At this point we have seen how to reproduce static data

2
00:00:03,000 --> 00:00:08,000
simply by shipping the files over as the data is required by the program.

3
00:00:08,000 --> 00:00:12,000
We have seen how to record and replay user interaction.

4
00:00:12,000 --> 00:00:16,000
However, all of these are actually instances of the same class of input

5
00:00:16,000 --> 00:00:19,000
that is interaction between the program and its environment.

6
00:00:19,000 --> 00:00:22,000
The question is whether it would be possible to record

7
00:00:22,000 --> 00:00:25,000
and replay this interaction as a whole.

8
00:00:25,000 --> 00:00:27,000
A program interactions with its environment

9
00:00:27,000 --> 00:00:29,000
by means of function calls.

10
00:00:29,000 --> 00:00:32,000
We use function calls to access data.

11
00:00:32,000 --> 00:00:35,000
We use function calls to access user interaction

12
00:00:35,000 --> 00:00:38,000
or generally anything that comes form the environment.

13
00:00:38,000 --> 00:00:41,000
So, what we could do is to record and replay function calls.

14
00:00:41,000 --> 00:00:45,000
This way we would have a single mechanism to capture

15
00:00:45,000 --> 00:00:49,000
all sorts of interaction between the program and its environment.

16
00:00:49,000 --> 00:00:53,000
Our plan would be to record every function call with parameters in a log

17
00:00:53,000 --> 00:00:55,000
then later be able to replay them.

18
00:00:55,000 --> 00:00:57,000
Let's first do the recording.

19
00:00:57,000 --> 00:01:00,000
We've already seen our tracing functions where we can access

20
00:01:00,000 --> 00:01:03,000
the individual execution frames of a run.

21
00:01:03,000 --> 00:01:06,000
We know that each frame contains the function name

22
00:01:06,000 --> 00:01:08,000
as well as all local variables.

23
00:01:08,000 --> 00:01:11,000
When a method gets called this list of local variables

24
00:01:11,000 --> 00:01:14,000
is actually the list of arguments for the function.

25
00:01:14,000 --> 00:01:17,000
If, for instance, I have set up the traceit function,

26
00:01:17,000 --> 00:01:19,000
which gets called for every line as always.

27
00:01:19,000 --> 00:01:21,000
It also gets called when a function is called.

28
00:01:21,000 --> 00:01:26,000
In this case the event variable up here has a value of call.

29
00:01:26,000 --> 00:01:30,000
If this happens then we print out the name of the current function,

30
00:01:30,000 --> 00:01:32,000
and we print out the local variables,

31
00:01:32,000 --> 00:01:34,000
which should be the arguments.

32
00:01:34,000 --> 00:01:36,000
Let's try out whether this works.

33
00:01:36,000 --> 00:01:40,000
What we see here is we have a call to remove html markup function

34
00:01:40,000 --> 00:01:44,000
and s as precisely the value as here in our code.

35
00:01:44,000 --> 00:01:48,000
We would now like to turn the function name as well as the argument list

36
00:01:48,000 --> 00:01:51,000
into something that can be translated back into code.

37
00:01:51,000 --> 00:01:54,000
We want it to look precisely like this.

38
00:01:54,000 --> 00:01:57,000
If we turn this into a string that looks exactly like a function call,

39
00:01:57,000 --> 00:02:01,000
then we can pass this to the Python eval function,

40
00:02:01,000 --> 00:02:04,000
which takes a string and interprets it as code.

41
00:02:04,000 --> 00:02:07,000
This is something we will use later for replaying.

42
00:02:07,000 --> 00:02:10,000
Here you can see how the string is interpreted, and the result is printed.

43
00:02:10,000 --> 00:02:13,000
Here's the function that takes care of the printing of the local variables

44
00:02:13,000 --> 00:02:15,000
that is the arguments.

45
00:02:15,000 --> 00:02:19,000
Since we don't know the position of the individual parameters in the function,

46
00:02:19,000 --> 00:02:23,000
what we use is we print out named arguments instead.

47
00:02:23,000 --> 00:02:26,000
That is, we print out name equals value.

48
00:02:26,000 --> 00:02:28,000
This will be separated by commas.

49
00:02:28,000 --> 00:02:32,000
Now again we will remove html markup with this parameter.

50
00:02:32,000 --> 00:02:34,000
If everything goes well,

51
00:02:34,000 --> 00:02:39,000
the traceit function to print out this very call with the right argument.

52
00:02:39,000 --> 00:02:41,000
This is precisely what happens.

53
00:02:41,000 --> 00:02:45,000
You see, we print out remove html markup with the parameter s

54
00:02:45,000 --> 00:02:49,000
being the string <b>foo</b> exactly as over here

55
00:02:49,000 --> 00:02:51,000
except that we do have a named parameter

56
00:02:51,000 --> 00:02:53,000
and not a positional parameter.

57
00:02:53,000 --> 00:02:56,000
The same mechanism works for tracing or recalls

58
00:02:56,000 --> 00:02:59,000
as long as these are Python functions.

59
00:02:59,000 --> 00:03:01,000
So if we call square root of 2, for instance

60
00:03:01,000 --> 00:03:04,000
This would also get traced and reported in our output.

61
00:03:04,000 --> 00:03:09,000
As you see here, here is the count of square root and x has a value of 2.

62
00:03:09,000 --> 00:03:12,000
Now let's assume that we have a variable,

63
00:03:12,000 --> 00:03:15,000
which actually has stored all these calls.

64
00:03:15,000 --> 00:03:18,000
We could do so by recording it right away while the code is executing,

65
00:03:18,000 --> 00:03:22,000
or we could also say store this in a file and read this back from a file.

66
00:03:22,000 --> 00:03:26,000
Your job now is to write a piece of code that evaluates all these calls.

67
00:03:26,000 --> 00:03:29,000
First this one, and then the other one,

68
00:03:29,000 --> 00:03:33,000
and which prints out the appropriate results for each of these calls

69
00:03:33,000 --> 00:03:36,000
in the form function argument equals return value.

70
00:03:36,000 --> 00:03:38,000
Over to you.
