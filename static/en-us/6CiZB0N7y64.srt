1
00:00:00,190 --> 00:00:03,520
You might be wondering if you can
add two vectors, can you subtract,

2
00:00:03,520 --> 00:00:05,700
multiply or divide two vectors?

3
00:00:05,700 --> 00:00:07,190
In NumPy the answer is yes.

4
00:00:07,190 --> 00:00:09,060
You can vectorize almost any operation.

5
00:00:10,160 --> 00:00:14,120
You can add two NumPy arrays with a plus
sign, subtract with a minus sign,

6
00:00:14,120 --> 00:00:17,320
multiply with an asterisk,
divide with a slash and

7
00:00:17,320 --> 00:00:19,690
exponentiate with a double asterisk.

8
00:00:19,690 --> 00:00:22,200
These operations all work
with two NumPy arrays.

9
00:00:22,200 --> 00:00:24,220
Or with a numpy array and
a single number.

10
00:00:25,220 --> 00:00:27,340
You can also do logical operations.

11
00:00:27,340 --> 00:00:30,310
If you have two arrays of
Booleans you can use ampersand

12
00:00:30,310 --> 00:00:32,110
to take the logical and.

13
00:00:32,110 --> 00:00:35,820
And you can use this vertical bar
symbol to take the logical or.

14
00:00:35,820 --> 00:00:39,650
This is underneath the delete or
backspace key on most keyboards.

15
00:00:39,650 --> 00:00:43,160
And finally you can use the tilde
to take the logical not.

16
00:00:43,160 --> 00:00:46,270
Which is on the top
left of most keyboards.

17
00:00:46,270 --> 00:00:48,960
Now make sure your arrays contain
Booleans if you're going to perform

18
00:00:48,960 --> 00:00:50,380
these operations.

19
00:00:50,380 --> 00:00:54,100
If your arrays have integers instead
then these symbols will do something

20
00:00:54,100 --> 00:00:59,540
a bit surprising called bit wise and,
bit wise or, and bit wise not.

21
00:00:59,540 --> 00:01:02,890
You can read about those operations in
the instructor notes if you're curious.

22
00:01:02,890 --> 00:01:05,349
But it's not important for this course.

23
00:01:05,349 --> 00:01:08,640
You can also use all the standard
comparison operations.

24
00:01:08,640 --> 00:01:12,770
Now these vectorized operations make
a lot of data analysis code super clean.

25
00:01:12,770 --> 00:01:15,930
And they're also usually faster
than doing the operations manually,

26
00:01:15,930 --> 00:01:17,300
using a loop.

27
00:01:17,300 --> 00:01:20,470
By the way, there's a cheat sheet
available in the downloadable section

28
00:01:20,470 --> 00:01:22,670
that will help you
remember these operations.

29
00:01:22,670 --> 00:01:26,360
As well as a bunch of other common
bits of NumPy in Panda's code.

30
00:01:26,360 --> 00:01:29,450
On the next screen, you'll have a chance
to test out some vectorized operations

31
00:01:29,450 --> 00:01:30,660
and see how they work.

32
00:01:30,660 --> 00:01:33,810
You'll also write a function that uses
vectorized operations to calculate

33
00:01:33,810 --> 00:01:36,520
the overall school completion
rate in each country

34
00:01:36,520 --> 00:01:40,290
using the female school completion rate
and the male school completion rate.

35
00:01:40,290 --> 00:01:44,230
To do this, assume that exactly half of
the population in each country is male,

36
00:01:44,230 --> 00:01:45,010
and half is female.
