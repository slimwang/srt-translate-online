1
00:00:00,000 --> 00:00:04,000
The next mode of operation I want to talk about is called CTR mode,

2
00:00:04,000 --> 00:00:07,000
which stands for "Counter." We have a message divided into blocks,

3
00:00:07,000 --> 00:00:12,000
just as before. We'll have our encryption function, just as before,

4
00:00:12,000 --> 00:00:14,000
and we can think of it as AES or any other block cipher.

5
00:00:14,000 --> 00:00:18,000
And that takes a key as input--we'll use the same key--but instead of just

6
00:00:18,000 --> 00:00:22,000
having a message block go in, what we're going to do instead is have a counter:

7
00:00:22,000 --> 00:00:24,000
some value that cycles through the natural numbers.

8
00:00:24,000 --> 00:00:28,000
That's going to be our input message, so we'll get, out of that, some cipher text.

9
00:00:28,000 --> 00:00:33,000
And what we're going to do now--well, so far none of this has anything to do

10
00:00:33,000 --> 00:00:37,000
with the message. Right--we've just encrypted the counting values

11
00:00:37,000 --> 00:00:38,000
from Zero to n - 1.

12
00:00:38,000 --> 00:00:42,000
What we're going to do is EXOR those--EXOR the outputs, here--

13
00:00:42,000 --> 00:00:47,000
with the message, so the message box goes into these EXORs

14
00:00:47,000 --> 00:00:50,000
and what comes out is the cipher text box.

15
00:00:50,000 --> 00:00:54,000
If we did it just like this, we wouldn't have quite as much security as we would like.

16
00:00:54,000 --> 00:00:59,000
We'd be vulnerable to attacks that search the space of counters.

17
00:00:59,000 --> 00:01:03,000
We'd also be vulnerable because we're using the same sequence of counters

18
00:01:03,000 --> 00:01:06,000
for every file that we encrypt with the same key.

19
00:01:06,000 --> 00:01:11,000
So the solution to this is similar to what we did with the initialization vectors

20
00:01:11,000 --> 00:01:14,000
in the previous mode. What we're going to do is add a nonce.

21
00:01:14,000 --> 00:01:17,000
We'll append the nonce with the countervalue.

22
00:01:17,000 --> 00:01:22,000
And a nonce is very similar to a key. A nonce is a one-time, unpredictable value.

23
00:01:22,000 --> 00:01:25,000
Unlike a key, it doesn't need to be kept secret.

24
00:01:25,000 --> 00:01:28,000
The point of the nonce is to make sure every time we use

25
00:01:28,000 --> 00:01:30,000
counter mode with the same key we get different blocks out.

26
00:01:30,000 --> 00:01:37,000
So as an example with AES, if we have 128 bits as the block size,

27
00:01:37,000 --> 00:01:41,000
we might have a 64-bit nonce and a 64-bit counter.

28
00:01:41,000 --> 00:01:45,000
So let me summarize these two modes. So we saw Cipher Block Chaining mode,

29
00:01:45,000 --> 00:01:51,000
and we saw Counter mode, and CBC mode--the "i"th block of the ciphertext,

30
00:01:51,000 --> 00:01:53,000
is a result of encrypting using the key.

31
00:01:53,000 --> 00:01:59,000
The "i"th block of the message with the previous ciphertext block--

32
00:01:59,000 --> 00:02:03,000
and we need a slightly special case for zero,

33
00:02:03,000 --> 00:02:06,000
which would use, instead of the -1 ciphertext block,

34
00:02:06,000 --> 00:02:14,000
which doesn't exist, would use an initialization vector.

35
00:02:14,000 --> 00:02:21,000
With Counter mode, the "i"th ciphertext block is the result of encrypting

36
00:02:21,000 --> 00:02:23,000
the value of "i"--that's our counter--

37
00:02:23,000 --> 00:02:28,000
with some nonce, and I'm writing this as concatenation--

38
00:02:28,000 --> 00:02:34,000
so we have 64 bits here pasted next to those 64 bits

39
00:02:34,000 --> 00:02:36,000
for the counter and the nonce,

40
00:02:36,000 --> 00:02:41,000
and that is EXOR'd with the corresponding message block.

41
00:02:41,000 --> 00:02:45,000
To do decryption with Counter mode, well the "i"th message block

42
00:02:45,000 --> 00:02:50,000
is the "i"th ciphertext block, EXOR'd with this same value,

43
00:02:50,000 --> 00:02:53,000
which, as we know the key,

44
00:02:53,000 --> 00:02:58,000
we can decrypt. So that's how decryption is done.

45
00:02:58,000 --> 00:03:02,000
With CBC mode, the "i"th message block is a result of decrypting the "i"th

46
00:03:02,000 --> 00:03:06,000
ciphertext block and EXORing that with the previous ciphertext block.

47
00:03:06,000 --> 99:59:59,999
Or in the case of the very first block, EXORing that with the IV.
