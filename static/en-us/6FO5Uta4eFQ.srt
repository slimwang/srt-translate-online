1
00:00:00,370 --> 00:00:02,469
Here's another company with problem.

2
00:00:02,469 --> 00:00:04,980
Wind and
Shade Software makes a wildly popular,

3
00:00:04,980 --> 00:00:07,330
distributed, weather-forecasting app.

4
00:00:07,330 --> 00:00:08,890
They're getting ready
to build version 3,

5
00:00:08,890 --> 00:00:11,170
a major upgrade from
last year's version 2.

6
00:00:11,170 --> 00:00:16,160
But the whole company remembers the
problems that plagued the 2.0 release.

7
00:00:16,160 --> 00:00:19,680
In the first meeting after the version
two launch all of the different groups

8
00:00:19,680 --> 00:00:23,270
involves spent hours blaming
each other for the problems.

9
00:00:23,270 --> 00:00:27,098
The product team was unhappy that they
didn't get to test the apps efficiently

10
00:00:27,098 --> 00:00:29,220
before it was almost time to launch.

11
00:00:29,220 --> 00:00:31,990
So it went out with bugs and
bad performance problems.

12
00:00:31,990 --> 00:00:35,240
Version two is substantially
slower than version one.

13
00:00:35,240 --> 00:00:39,080
The ops team was unhappy because when
they finally received the app to be

14
00:00:39,080 --> 00:00:42,010
deployed in production they found
out that it used significantly

15
00:00:42,010 --> 00:00:44,180
different software than version one.

16
00:00:44,180 --> 00:00:46,950
Not all of the dependencies
were well documented.

17
00:00:46,950 --> 00:00:49,890
There were also OS specific issues
because the developers were

18
00:00:49,890 --> 00:00:53,700
using Windows while the production
servers were running Linux.

19
00:00:53,700 --> 00:00:56,630
And the performance problems meant
that they had to stay up all weekend

20
00:00:56,630 --> 00:00:59,150
deploying new servers
to handle the load.

21
00:00:59,150 --> 00:00:59,990
It turned out the devs

22
00:00:59,990 --> 00:01:03,290
had never tested it with more
than five simultaneous users.

23
00:01:03,290 --> 00:01:06,050
And the dev team had been
struggling with deadlines.

24
00:01:06,050 --> 00:01:09,090
In order to make their own process
faster, they were maintaining their own

25
00:01:09,090 --> 00:01:11,950
dev server instances without
involvement from ops.

26
00:01:11,950 --> 00:01:15,170
But their setup ended up being so
complicated that whenever they hired

27
00:01:15,170 --> 00:01:19,230
a new developer it was nearly impossible
to give that person a consistent setup.

28
00:01:19,230 --> 00:01:22,250
Especially when they tried following
ops suggestion of using Linux,

29
00:01:22,250 --> 00:01:24,010
which they didn't know that well.

30
00:01:24,010 --> 00:01:27,979
So, in the run up to version 3 they'd
really like to avoid another painful

31
00:01:27,979 --> 00:01:30,590
debacle like the version 2 launch was.

32
00:01:30,590 --> 00:01:34,430
But just pointing fingers and
laying blame just isn't going to help.

33
00:01:34,430 --> 00:01:35,740
So the teams get together and

34
00:01:35,740 --> 00:01:39,950
try to find some practical solutions
they can agree on to fix these problems.

35
00:01:39,950 --> 00:01:42,850
Which of the following solutions
do you think might help Wind and

36
00:01:42,850 --> 00:01:44,260
Shade's launch trouble?

37
00:01:44,260 --> 00:01:47,120
Should they use agile
development practices?

38
00:01:47,120 --> 00:01:51,060
Should they run production servers
using the dev's desktop OS?

39
00:01:51,060 --> 00:01:54,290
Should they involve the ops
team earlier in development?

40
00:01:54,290 --> 00:01:56,990
Should they implement
a suite of performance tests?

41
00:01:56,990 --> 00:02:01,040
Should they buy some faster server
hardware to make the app faster?

42
00:02:01,040 --> 00:02:05,160
Should they make smaller incremental
launches instead of big ones.

43
00:02:05,160 --> 00:02:08,320
Or should they require devs to only
use technologies that have been

44
00:02:08,320 --> 00:02:09,810
vetted at the start of the project.
