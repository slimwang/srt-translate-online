1
00:00:00,520 --> 00:00:04,900
Now that we know how to add two images together, and multiply image intensity

2
00:00:04,900 --> 00:00:11,390
values by a scaler, let's revisit our example of averaging two images.

3
00:00:11,390 --> 00:00:16,149
We saw that division by two can be rewritten as multiplication by 0.5.

4
00:00:16,149 --> 00:00:20,830
Now, this results in an image which has equal parts dolphin and

5
00:00:20,830 --> 00:00:22,420
equal parts bicycle.

6
00:00:22,420 --> 00:00:25,150
What if we wanted to change these ratios?

7
00:00:25,150 --> 00:00:27,370
Say we want more of dolphin.

8
00:00:27,370 --> 00:00:31,740
But note that, in order to keep the maximum intensity value the same as that of

9
00:00:31,740 --> 00:00:37,050
the original images, we should ensure that these weights sum to one.

10
00:00:37,050 --> 00:00:40,740
In general, this is known as blending two images.

11
00:00:40,740 --> 00:00:41,770
Let's see what it looks like.

12
00:00:43,060 --> 00:00:47,490
Yes, we do see a little bit more surf from the dolphin image, but

13
00:00:47,490 --> 00:00:49,470
it's a little hard to tell.

14
00:00:49,470 --> 00:00:51,961
How about we change the way it's a little farther?

15
00:00:51,961 --> 00:00:55,470
More dolphin.

16
00:00:55,470 --> 00:00:59,210
I wish we had a function to do this, which we could call like this.

17
00:00:59,210 --> 00:01:00,560
Can you write this function for me?

18
00:01:01,820 --> 00:01:03,260
Let me get you started.

19
00:01:03,260 --> 00:01:06,030
Put your code inside the function body.

20
00:01:06,030 --> 00:01:10,750
Remember, to return something, assign it to the output variable.

21
00:01:10,750 --> 00:01:15,830
Also note that a and b are the two images to be blended, and

22
00:01:15,830 --> 00:01:19,120
alpha is the weight to be applied to a.

23
00:01:19,120 --> 00:01:21,410
Once you have implemented the function,

24
00:01:21,410 --> 00:01:23,340
test it out with different values of alpha.
