1
00:00:00,480 --> 00:00:04,460
Let's take an example
site like udacity.com and

2
00:00:04,460 --> 00:00:08,460
imagine that I am a user who has
difficulty reading small print.

3
00:00:08,460 --> 00:00:12,400
Now naturally, one thing I may do to
help with this is to zoom the page.

4
00:00:12,400 --> 00:00:16,837
So let's go ahead and we'll just
zoom this page up to about 400%.

5
00:00:16,837 --> 00:00:19,255
Now an interesting thing
is going to happen,

6
00:00:19,255 --> 00:00:23,730
we're now viewing the mobile
version of the site on our desktop.

7
00:00:23,730 --> 00:00:25,890
Because the page was
designed responsively,

8
00:00:25,890 --> 00:00:29,300
the UI has rearranged itself for
the smaller viewport.

9
00:00:29,300 --> 00:00:32,350
Which is great for desktop users
who require screen magnification,

10
00:00:32,350 --> 00:00:33,340
and it's great for

11
00:00:33,340 --> 00:00:38,030
mobile screen reader users since there
are fewer elements to touch and explore.

12
00:00:38,030 --> 00:00:42,929
This is just a total win, in fact, just
by designing responsively we're meeting

13
00:00:42,929 --> 00:00:45,490
rule 1.4.4 of the WebAIM checklist.

14
00:00:45,490 --> 00:00:47,959
Which states that a page
should be readable and

15
00:00:47,959 --> 00:00:51,090
functional when the text
size is doubled.

16
00:00:51,090 --> 00:00:56,005
Now going over all of responsive design
is way outside the scope of this course.

17
00:00:56,005 --> 00:00:58,735
Fortunately, there is a separate
Udacity course just on this

18
00:00:58,735 --> 00:01:01,605
topic which you should totally
check out if you get a chance.

19
00:01:01,605 --> 00:01:04,334
I'll leave a link to this
down in the instructor notes.

20
00:01:04,334 --> 00:01:07,265
But there are a few important
points which I did want to cover

21
00:01:07,265 --> 00:01:10,725
which will be both important to
improve your responsive experience but

22
00:01:10,725 --> 00:01:14,580
also to give your users better
access to your content.

23
00:01:14,580 --> 00:01:18,500
The first of those is to make sure that
you're always using a meta viewport tag,

24
00:01:18,500 --> 00:01:21,800
and that you're setting its
width equal to device width and

25
00:01:21,800 --> 00:01:24,270
its initial scale to 1.

26
00:01:24,270 --> 00:01:27,142
The meta viewport tag gives
the browser instructions on how

27
00:01:27,142 --> 00:01:30,380
to control the page's dimensions and
its scaling.

28
00:01:30,380 --> 00:01:34,524
By setting width equal to device-width
we're telling the viewport to match

29
00:01:34,524 --> 00:01:38,300
the screen's width in
device independent pixels.

30
00:01:38,300 --> 00:01:42,390
And by setting initial-scale equal
to 1 we're establishing a one to

31
00:01:42,390 --> 00:01:47,300
one relationship between CSS pixels and
device independent pixels.

32
00:01:48,350 --> 00:01:52,560
Doing this will instruct the browser
to fit our content to the screen so

33
00:01:52,560 --> 00:01:55,280
that the user doesn't just see
a bunch of scrunched up text.

34
00:01:56,430 --> 00:02:00,340
Now one thing to note, when using the
viewport tag, make sure you don't force

35
00:02:00,340 --> 00:02:05,360
max scale to one or
set user-scalable to no.

36
00:02:05,360 --> 00:02:09,389
This is a bit of an anti-pattern
because it prevents users from easily

37
00:02:09,389 --> 00:02:11,680
pinching to zoom
the content of the page.

38
00:02:11,680 --> 00:02:14,960
Which is useful if you have a hard
time reading smaller text, so

39
00:02:14,960 --> 00:02:16,960
be mindful of this one.

40
00:02:16,960 --> 00:02:21,790
The next technique is to make sure that
you're designing with a responsive grid.

41
00:02:21,790 --> 00:02:24,780
As I demonstrated with the Udacity site,
designing with a grid

42
00:02:24,780 --> 00:02:29,490
means your content will reflow
when the page changes its size.

43
00:02:29,490 --> 00:02:33,940
So this is great for working on mobile
devices but it's also great for

44
00:02:33,940 --> 00:02:38,460
those of us who need to zoom in the page
in order to read smaller text content.

45
00:02:40,010 --> 00:02:45,300
Oftentimes these layouts are produced
using relative units, like percents,

46
00:02:45,300 --> 00:02:50,730
ems, and rems,
instead of hard coded pixel values.

47
00:02:50,730 --> 00:02:55,330
The advantage of using relative units is
that text and content can enlarge and

48
00:02:55,330 --> 00:02:57,560
force other items down the page.

49
00:02:57,560 --> 00:03:01,738
So the down order and the reading order
remains the same even if the layout

50
00:03:01,738 --> 00:03:04,080
is changing because of magnification.

51
00:03:04,080 --> 00:03:08,112
Now you might also consider using
relative units like or rem,

52
00:03:08,112 --> 00:03:13,042
specifically for text size instead of
pixel values, as some browsers support

53
00:03:13,042 --> 00:03:17,930
resizing just the text in a page
via a user preference setting.

54
00:03:17,930 --> 00:03:19,240
If you're using a pixel value for

55
00:03:19,240 --> 00:03:23,210
text, it may not zoom when
that setting is turned on.

56
00:03:23,210 --> 00:03:25,695
If, however,
you've used relative units throughout,

57
00:03:25,695 --> 00:03:29,810
then the text should update
to reflect that user setting.

58
00:03:29,810 --> 00:03:33,510
Lastly, when your design is
displaying on a mobile device,

59
00:03:33,510 --> 00:03:37,300
you need to ensure that your
interactive elements like buttons or

60
00:03:37,300 --> 00:03:40,450
links have touch targets
that are large enough.

61
00:03:40,450 --> 00:03:43,220
And have enough space around
them to make them easy to

62
00:03:43,220 --> 00:03:47,500
press without accidentally
overlapping onto other elements.

63
00:03:47,500 --> 00:03:50,320
This benefits all of your users,
but it's especially helpful for

64
00:03:50,320 --> 00:03:52,750
anyone with a motor impairment.

65
00:03:52,750 --> 00:03:57,480
A minimum recommended touch
target size is around 48 device

66
00:03:57,480 --> 00:04:01,830
independent pixels on a site with
a properly set mobile viewport.

67
00:04:02,860 --> 00:04:07,010
The 48 by 48 pixel area corresponds
to around 9 millimeters,

68
00:04:07,010 --> 00:04:09,739
which is the same size
as someone's finger pad.

69
00:04:11,010 --> 00:04:14,820
So in this case I've got two
buttons here and this top one is

70
00:04:14,820 --> 00:04:19,740
actually about 40 pixels,
the one below it is about 24 pixels.

71
00:04:19,740 --> 00:04:24,153
So to get up to this 48 device
independent pixel range what I can do is

72
00:04:24,153 --> 00:04:27,729
I can add some additional
padding to each of these to make

73
00:04:27,729 --> 00:04:31,939
sure that their final touch target
size meets this requirement.

74
00:04:31,939 --> 00:04:34,113
[BLANK_AUDIO]

75
00:04:34,113 --> 00:04:38,685
Now touch targets should also
be spaced about 32 pixels apart,

76
00:04:38,685 --> 00:04:41,560
both horizontally and vertically.

77
00:04:41,560 --> 00:04:45,270
So that a user's finger pressing
on one touch target will not

78
00:04:45,270 --> 00:04:48,410
inadvertently overlap onto another one.

79
00:04:48,410 --> 00:04:52,710
So while this icon here has
a touch target area of 48 by 48,

80
00:04:52,710 --> 00:04:58,460
I'm also going to ensure that it has 32
pixels of margining around it to make

81
00:04:58,460 --> 00:05:02,610
sure that it's not overlapping with this
other interactive element over here.

82
00:05:03,680 --> 00:05:07,320
Following this set of guidelines will
go a long way to ensure your experience

83
00:05:07,320 --> 00:05:09,370
is both easy to interact with and

84
00:05:09,370 --> 00:05:12,250
accessible regardless
of the device size.
