1
00:00:00,000 --> 00:00:04,000
So I said there were 2 main differences between strings and lists.

2
00:00:04,000 --> 00:00:07,000
The first we've seen already is that a list can hold

3
00:00:07,000 --> 00:00:11,000
anything we want, whereas a string, the elements could only be characters.

4
00:00:11,000 --> 00:00:14,000
The second big difference between lists and strings

5
00:00:14,000 --> 00:00:17,000
is that lists support mutation.

6
00:00:17,000 --> 00:00:20,000
Mutation sounds a little bit scary, and in some ways it is scary.

7
00:00:20,000 --> 00:00:24,000
It makes it much harder to understand what our programs mean,

8
00:00:24,000 --> 00:00:26,000
but it's also very powerful.

9
00:00:26,000 --> 00:00:29,000
What mutation means is we can change the value of a list

10
00:00:29,000 --> 00:00:31,000
after we've created it.

11
00:00:31,000 --> 00:00:34,000
To explain what that means and to see why it's so different

12
00:00:34,000 --> 00:00:36,000
from the behavior we can get with strings,

13
00:00:36,000 --> 00:00:38,000
let's recap what happens with strings.

14
00:00:38,000 --> 00:00:43,000
We can create a string. We can store it in a variable.

15
00:00:43,000 --> 00:00:46,000
We can change the value of the variable

16
00:00:46,000 --> 00:00:48,000
by creating a new string.

17
00:00:48,000 --> 00:00:51,000
So what's going on there, it's changing the value of s,

18
00:00:51,000 --> 00:00:53,000
but it's not changing the value of the string.

19
00:00:53,000 --> 00:00:58,000
When we did the first statement, this one,

20
00:00:58,000 --> 00:01:02,000
it created a string with the value "Hello,"

21
00:01:02,000 --> 00:01:06,000
and it introduced a variable, s, which referred to that string.

22
00:01:06,000 --> 00:01:08,000
When we execute the second statement,

23
00:01:08,000 --> 00:01:11,000
that creates a new string

24
00:01:11,000 --> 00:01:14,000
with the value "Yello," and it changes s

25
00:01:14,000 --> 00:01:16,000
to refer to that new string.

26
00:01:16,000 --> 00:01:19,000
It hasn't changed the string that we created with the value Hello.

27
00:01:19,000 --> 00:01:23,000
We just don't have a way to refer to that any more.

28
00:01:23,000 --> 00:01:27,000
With strings, we can also use the + operator to concatenate 2 strings.

29
00:01:27,000 --> 00:01:30,000
It looks like this is changing the value of the string.

30
00:01:30,000 --> 00:01:33,000
You might think that the result of this is, well, now the string

31
00:01:33,000 --> 00:01:38,000
that was previously Yello spelled wrong is now Yellow

32
00:01:38,000 --> 00:01:40,000
spelled with the w added at the end.

33
00:01:40,000 --> 00:01:42,000
But that's not actually what happens.

34
00:01:42,000 --> 00:01:44,000
We don't actually modify the string we had.

35
00:01:44,000 --> 00:01:47,000
What happens when we use the + operator,

36
00:01:47,000 --> 00:01:50,000
it creates a completely new string where the value of the new string

37
00:01:50,000 --> 00:01:54,000
is the result of concatenating the 2 input strings.

38
00:01:54,000 --> 00:01:56,000
When we execute the third statement,

39
00:01:56,000 --> 00:01:59,000
first a new string with the value w is created.

40
00:01:59,000 --> 00:02:01,000
Then when we do the concatenation,

41
00:02:01,000 --> 00:02:04,000
it doesn't modify the previous string that we've created.

42
00:02:04,000 --> 00:02:06,000
It creates a whole new string

43
00:02:06,000 --> 00:02:09,000
which will have the value "Yellow" spelled with a w.

44
00:02:09,000 --> 00:02:12,000
And then the assignment changes what s refers to

45
00:02:12,000 --> 00:02:14,000
to refer to the new string.

46
00:02:14,000 --> 00:02:17,000
Now let's see what we can do with lists.
