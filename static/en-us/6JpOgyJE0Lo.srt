1
00:00:00,390 --> 00:00:03,370
This was the motivation for coming up

2
00:00:03,370 --> 00:00:06,820
with this abstraction of distributed shared memory

3
00:00:06,820 --> 00:00:12,240
in a cluster. The idea is that we want to give the illusion to the application

4
00:00:12,240 --> 00:00:16,129
programmer writing and explicitly parallel program. That

5
00:00:16,129 --> 00:00:18,260
all of the memory that's in the

6
00:00:18,260 --> 00:00:21,120
entire cluster is shared. They are not

7
00:00:21,120 --> 00:00:25,470
physically shared, but the DSM library is going to

8
00:00:25,470 --> 00:00:28,110
give the illusion to the threads running on each

9
00:00:28,110 --> 00:00:31,270
one of these processes that all of this memory

10
00:00:31,270 --> 00:00:35,150
is shared. And therefore they have an easier transition

11
00:00:35,150 --> 00:00:38,990
path for instance, from going from a sequential program or

12
00:00:38,990 --> 00:00:41,550
going from a program that they've written on an

13
00:00:41,550 --> 00:00:45,440
SMP. To a program that runs on the cluster, because

14
00:00:45,440 --> 00:00:47,190
they don't have to think in terms of message

15
00:00:47,190 --> 00:00:50,240
passing. But they can think in terms of shared memory,

16
00:00:50,240 --> 00:00:53,630
sharing pointers across the entire cluster, and

17
00:00:53,630 --> 00:00:56,700
so on. Also, since we are providing a

18
00:00:56,700 --> 00:01:00,880
shared memory semantic in the DSM library for

19
00:01:00,880 --> 00:01:04,260
the application program There is no need for

20
00:01:04,260 --> 00:01:08,170
marshalling and unmarshalling arguments that are being passed

21
00:01:08,170 --> 00:01:10,640
from one processor to another and so on.

22
00:01:10,640 --> 00:01:15,420
All of that is being handled by the fact that there is shared memory. So when

23
00:01:15,420 --> 00:01:18,540
you make a procedure call, and that procedure

24
00:01:18,540 --> 00:01:21,680
call is touching Some portion of memory that

25
00:01:21,680 --> 00:01:24,460
happens to be on a remote memory. That

26
00:01:24,460 --> 00:01:27,440
memory is going to magically become available to the thread

27
00:01:27,440 --> 00:01:29,310
that is making the procedure call. In other

28
00:01:29,310 --> 00:01:33,780
words, the DSM abstraction gives the same level

29
00:01:33,780 --> 00:01:36,630
of comfort to a programmer who's used to

30
00:01:36,630 --> 00:01:40,440
programming on a true shared memory machine when they

31
00:01:40,440 --> 00:01:45,160
moved to cluster. Because they can use same set of primitives,

32
00:01:45,160 --> 00:01:48,630
like locks and barriers for synchronization, and the Pthread [GUESS] style of

33
00:01:48,630 --> 00:01:53,040
creating threads, that will run on different nodes of the cluster. And that's

34
00:01:53,040 --> 00:01:58,780
the advantage of DSM style of writing an explicitly parallel program.
