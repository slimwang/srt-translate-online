1
00:00:01,000 --> 00:00:03,410
Let's define a trivial
Gradle project to work with.

2
00:00:03,410 --> 00:00:05,950
This one doesn't compile or
build anything, it just tells a joke.

3
00:00:07,150 --> 00:00:09,950
And we can use it to do all the normal
gradle stuff we're used to, like,

4
00:00:11,010 --> 00:00:15,250
we can get all the tasks that this can
do, and we can run our tell-joke task.

5
00:00:16,440 --> 00:00:18,010
Awesome.
Everything's working.

6
00:00:18,010 --> 00:00:20,692
Now, let's try importing this
project into Android Studio.

7
00:00:20,692 --> 00:00:24,360
So, here's the Android Studio
splash screen.

8
00:00:24,360 --> 00:00:27,970
What we want is this import
project Eclipse ADT, Gradle, etc.

9
00:00:27,970 --> 00:00:32,885
And it tells us to go select our
build.gradle file or some other options.

10
00:00:32,885 --> 00:00:33,470
Let's go find it.

11
00:00:34,490 --> 00:00:36,770
All right, here is our super,
simple build.gradle file,

12
00:00:36,770 --> 00:00:37,850
it's the only thing in this directory.

13
00:00:39,180 --> 00:00:41,760
Android Studio will pop up a dialogue
asking you if you want to use

14
00:00:41,760 --> 00:00:42,970
the Gradle wrapper.

15
00:00:42,970 --> 00:00:46,950
Android Studio always uses the wrapper,
and always uses the Gradle build daemon.

16
00:00:46,950 --> 00:00:48,980
We'll go ahead and
let Android Studio set up the daemon.

17
00:00:50,200 --> 00:00:53,690
When Android Studio first opens,
you might not see anything interesting.

18
00:00:53,690 --> 00:00:57,030
To see what's going on with your
project, just open up the projects tab.

19
00:00:58,140 --> 00:00:59,150
You still won't see anything for

20
00:00:59,150 --> 00:01:02,070
the moment since the project pane is
configured to display only the files

21
00:01:02,070 --> 00:01:04,170
that are relevant for an Android build.

22
00:01:04,170 --> 00:01:07,380
Fix that by clicking on the Android
drop down and selecting Project.

23
00:01:08,810 --> 00:01:13,330
Now, if we expand out this directory,
we can see a whole slew of files that

24
00:01:13,330 --> 00:01:15,310
Android Studio has already created for
us.

25
00:01:16,540 --> 00:01:18,730
Note, that you can see
your build.gradle file,

26
00:01:18,730 --> 00:01:20,750
as well as the gradle W wrapper scripts.

27
00:01:22,030 --> 00:01:24,610
As well as a bunch of other stuff
that was added by Android Studio.

28
00:01:25,740 --> 00:01:28,610
There are several ways to run
Gradle tasks from Android Studio.

29
00:01:28,610 --> 00:01:30,650
The first is the terminal
down at the bottom left.

30
00:01:32,170 --> 00:01:35,680
Here we can do exactly the same stuff we
were doing from outside Android Studio.

31
00:01:35,680 --> 00:01:39,240
Note that the first time you use the
gradle wrapper created by Android Studio

32
00:01:39,240 --> 00:01:42,110
you may need to add execution permission
to the wrapper script like so.

33
00:01:43,130 --> 00:01:45,280
So, now we can get our
task list like normal.

34
00:01:45,280 --> 00:01:47,400
There we go.
And we can run our tell joke task again.

35
00:01:48,420 --> 00:01:49,260
Awesome.
So, we can

36
00:01:49,260 --> 00:01:52,090
do everything we could do from a command
line from inside Android Studio as well.

37
00:01:53,450 --> 00:01:56,680
There's also an easier way to
Gradle tasks from Android Studio.

38
00:01:56,680 --> 00:01:58,980
And that's by opening up the Gradle
pane on the right of the window.

39
00:02:00,120 --> 00:02:02,980
If we open up the Gradle
scratch directory and

40
00:02:02,980 --> 00:02:06,070
we open up the other tasks,
we find our tell joke task.

41
00:02:06,070 --> 00:02:07,030
We can double click to run it.

42
00:02:08,310 --> 00:02:10,380
Excellent, our task is still working.

43
00:02:10,380 --> 00:02:11,970
Let's open up our build.gradle file.

44
00:02:13,690 --> 00:02:16,280
Let's try adding a second
jug-towing task to our project.

45
00:02:17,660 --> 00:02:20,250
In order to get Android Studio
to recognize our second task,

46
00:02:20,250 --> 00:02:22,050
we need to hit these little
circular arrows again.

47
00:02:23,190 --> 00:02:26,890
There we go, here's our new task, and
we can run it just like the other one.

48
00:02:28,210 --> 00:02:30,880
A moment ago,
we just had to build that Gradle file.

49
00:02:30,880 --> 00:02:35,270
And now we've got a directory totally
full of obscure files and directories.

50
00:02:35,270 --> 00:02:38,260
Unfortunately, IDEs tend to do that.

51
00:02:38,260 --> 00:02:41,170
Let's take a look at these various files
and figure out why they're all there.

52
00:02:42,650 --> 00:02:45,470
The .gradle directory is where
Gradle stores information for

53
00:02:45,470 --> 00:02:46,940
incremental build support.

54
00:02:46,940 --> 00:02:49,430
So, that's your tasks inputs and
outputs, stuff like that.

55
00:02:50,540 --> 00:02:54,650
The .idea directory is where Android
Studio stores its model of your project.

56
00:02:55,870 --> 00:03:00,250
The build directory is where your build
outputs go, if this build generated any.

57
00:03:00,250 --> 00:03:02,780
For now, it's just holding onto
some information related to the

58
00:03:02,780 --> 00:03:07,560
synchronization between Gradle's project
model and Android Studios project model.

59
00:03:07,560 --> 00:03:09,770
Finally, you know the Gradle directory.

60
00:03:09,770 --> 00:03:12,270
That's where the wrapper JAR and
the wrapper properties are stored.

61
00:03:13,590 --> 00:03:14,580
In the root folder,

62
00:03:14,580 --> 00:03:17,840
we have our build.Gradle file
that we originally added.

63
00:03:17,840 --> 00:03:19,780
We also have this .iml file,

64
00:03:19,780 --> 00:03:22,800
which is again part of
Android Studio's project model.

65
00:03:22,800 --> 00:03:26,871
Finally, we have the two wrapper scripts
and then this local .properties file.

66
00:03:28,000 --> 00:03:31,020
This is how gradle can figure out where
the Android sdk is on your machine.
