1
00:00:00,000 --> 00:00:03,000
All right. Let's try another little quiz, but this one is going to move our understanding

2
00:00:03,000 --> 00:00:05,000
forward a little bit more. Here's a little bit of Python code.

3
00:00:05,000 --> 00:00:08,000
A subroutine called "countdown" takes an input x.

4
00:00:08,000 --> 00:00:11,000
It executes a statement, and then it goes into a while loop

5
00:00:11,000 --> 00:00:14,000
and repeats these two statements some number of times.

6
00:00:14,000 --> 00:00:16,000
Then when it's all done, it does one more statement.

7
00:00:16,000 --> 00:00:19,000
We can take for any given input--like this print countdown 50--

8
00:00:19,000 --> 00:00:22,000
we could count up the time--the number of statements executed--

9
00:00:22,000 --> 00:00:24,000
for this to execute. It's going to be something like this.

10
00:00:24,000 --> 00:00:29,000
We didn't talk about the number of steps that it take to do a print statement if there's a subroutine,

11
00:00:29,000 --> 00:00:32,000
but we're going to call it one for the print statement plus

12
00:00:32,000 --> 00:00:36,000
however many steps it takes to execute the subroutine call.

13
00:00:36,000 --> 00:00:38,000
In these case, countdown 50--what is it going to do?

14
00:00:38,000 --> 00:00:41,000
There's going to be 1 call there, 2 for each time that it counts down,

15
00:00:41,000 --> 00:00:43,000
which is going to be--what--10 times, right?

16
00:00:43,000 --> 00:00:46,000
It starts off at 50, going to go down by 5s until it hits 0.

17
00:00:46,000 --> 00:00:50,000
There is going to be 10 times that it's executing these two statements.

18
00:00:50,000 --> 00:00:54,000
That's 20--21, 22, and the print statement is 23.

19
00:00:54,000 --> 00:00:59,000
This--if we ask the time that this takes--is going to be 23 units.

20
00:00:59,000 --> 00:01:01,000
Here's the trickier question.

21
00:01:01,000 --> 00:01:04,000
What if we just say we don't know what n is. Someone is going to tell us n later.

22
00:01:04,000 --> 00:01:09,000
We're like to know the number of steps, the amount of time that it takes to execute this formula,

23
00:01:09,000 --> 00:01:11,000
as a function of n.

24
00:01:11,000 --> 00:01:14,000
We can't automatically grade a mathematical function--or maybe we can.

25
00:01:14,000 --> 00:01:17,000
The way that we're going to score this quiz is instead

26
00:01:17,000 --> 00:01:20,000
of you telling me a mathematical expression for this function,

27
00:01:20,000 --> 00:01:25,000
I want you to actually give me a function that takes as input n

28
00:01:25,000 --> 00:01:29,000
and produces as output the number of time steps that it will take to execute

29
00:01:29,000 --> 00:01:31,000
countdown or this entire block of code here.

30
00:01:31,000 --> 99:59:59,999
We already figured out what happens when n is 50, but we want a general form of this.
