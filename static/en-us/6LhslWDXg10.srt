1
00:00:00,000 --> 00:00:04,000
One of the trickiest things about testing software is that it's hard to know when you've done

2
00:00:04,000 --> 00:00:09,000
enough testing and the fact is, it is really easy to spend a lot of time testing

3
00:00:09,000 --> 00:00:13,000
and to start to believe that you did a good job and then to have some really nasty bug show up

4
00:00:13,000 --> 00:00:16,000
that are triggered by parts of the input space that we just didn't think to test.

5
00:00:16,000 --> 00:00:18,000
So let's look what's really going on, so we're going to start with the

6
00:00:18,000 --> 00:00:20,000
domain range diagrams that we known off.

7
00:00:20,000 --> 00:00:23,000
We're going to have some test cases into domain and after a while

8
00:00:23,000 --> 00:00:25,000
we're going to start pretty good about what we're been doing.

9
00:00:25,000 --> 00:00:29,000
What's going to turn out is without really knowing it, our testing is being compliant to some small part

10
00:00:29,000 --> 00:00:34,000
of the input domain and the problem, is that even the small part of the domain may contain

11
00:00:34,000 --> 00:00:37,000
an infinite number of test cases or else a finite numbers of test cases

12
00:00:37,000 --> 00:00:40,000
that is large enough that its for practical purposes.

13
00:00:40,000 --> 00:00:43,000
It's not distinguishable from infinity and of course what's going on is we're going to do test cases

14
00:00:43,000 --> 00:00:47,000
other parts of the domain we didn't think to test, putting the results and outputs that are not okay.

15
00:00:47,000 --> 00:00:50,000
It really depends on how we've broken up the input domain.

16
00:00:50,000 --> 00:00:53,000
For example, let's think about the case that we're testing Therac-25 radiation

17
00:00:53,000 --> 00:00:55,000
therapy machine that I used an example in the last lecture.

18
00:00:55,000 --> 00:01:00,000
It's not might be the case but all of the inputs that we are going to test, the once in this region

19
00:01:00,000 --> 00:01:03,000
are the once where we happened to type the input to the machines slowly.

20
00:01:03,000 --> 00:01:08,000
We simply didn't realize that there's a whole other part of the input space

21
00:01:08,000 --> 00:01:12,000
that has to be treated differently that happens when we type the input fast and of course

22
00:01:12,000 --> 00:01:16,000
its in that region where we triggered the raised conditions that we're leading to massive overdoses.

23
00:01:16,000 --> 00:01:18,000
Similarly, if you remember from lecture one,

24
00:01:18,000 --> 00:01:20,000
we have a small Python program called the Python runtime to crash.

25
00:01:20,000 --> 00:01:24,000
The distinguishing feature of it seem to be a large number of cascaded if statements.

26
00:01:24,000 --> 00:01:28,000
It's pretty easy if we're testing Python programs to remain in the part of this space where for example

27
00:01:28,000 --> 00:01:30,000
we have <5 nested in these statements.

28
00:01:30,000 --> 00:01:35,000
Over here is another region containing programs with 5 of more if statement nested and these are ones

29
00:01:35,000 --> 00:01:38,000
that cause for example, the Python virtual machine to crash.

30
00:01:38,000 --> 00:01:41,000
To take an even more extreme example, let's say that we're testing some software

31
00:01:41,000 --> 00:01:43,000
that somebody has inserted in the back door in.

32
00:01:43,000 --> 00:01:47,000
Well in that case, there's going to be an absolute infinite test of all part of the input domain.

33
00:01:47,000 --> 00:01:50,000
Maybe wherever here that triggers the back door cause remember if your putting a backdoor in code

34
00:01:50,000 --> 00:01:53,000
you don't want to trigger it accidentally and that's going to lead to something

35
00:01:53,000 --> 00:01:55,000
extremely bad happening over here.

36
00:01:55,000 --> 00:01:59,000
We didn't tested inputs triggering the back door because we just didn't know it was there.

37
00:01:59,000 --> 00:02:02,000
So what we'd really like is some sort of a tool or some sort of a methodology

38
00:02:02,000 --> 00:02:07,000
that if we are in fact testing only a small part of the input domain for a system what we really like

39
00:02:07,000 --> 00:02:12,000
is some sort of an automated scoring system that looks at our testing effort and says to us

40
00:02:12,000 --> 00:02:14,000
something like, your score is 14 out of 100.

41
00:02:14,000 --> 00:02:18,000
Your not doing a good job testing the system. Keep trying.

42
00:02:18,000 --> 00:02:20,000
And that's what today's lecture is going to be about.

43
00:02:20,000 --> 00:02:24,000
It turns out there's a lot of reasons we do not want to know the sign of score to our testing effort.

44
00:02:24,000 --> 00:02:29,000
Probably the main one is that this helps us find part of the input domain that need more testing.

45
00:02:29,000 --> 00:02:33,000
So for example, if we can increase our score by testing this part of the domain,

46
00:02:33,000 --> 00:02:36,000
we're naturally going to be led to do that and our testing efforts will improve.

47
00:02:36,000 --> 00:02:41,000
Other reasons to assign a score to a testing effort are that we might be able to argue to a boss

48
00:02:41,000 --> 00:02:44,000
which is some sort of a certifying authority that we've done enough testing.

49
00:02:44,000 --> 00:02:48,000
Similarly, we might want to argue that the system we're developing has not been tested well enough

50
00:02:48,000 --> 00:02:53,000
but its not yet safe to deploy and that it needs more testing and a testing score can provide

51
00:02:53,000 --> 00:02:55,000
a numerical justification of that sort of way.

52
00:02:55,000 --> 00:02:59,000
Probably, it would be nicer if we could take a large test suite one maybe that takes several days to run

53
00:02:59,000 --> 00:03:02,000
and identify parts of the test suite that are completely redundant.

54
00:03:02,000 --> 00:03:06,000
That is to say parts of the test suite that tests exactly the same parts of the input domain.

55
00:03:06,000 --> 00:03:11,000
Even though they occupy parts of the input domain have roughly the same testing effect on the system

56
00:03:11,000 --> 99:59:59,999
to assigning a score to our testing efforts and let us do that as well.
