1
00:00:00,000 --> 00:00:04,000
Now that we've mastered single character regular expressions,

2
00:00:04,000 --> 00:00:06,000
let's look into gluing them together.

3
00:00:06,000 --> 00:00:11,000
We're going to need to find important bits of punctuation like slash greater than

4
00:00:11,000 --> 00:00:16,000
or equals equals, to reason about JavaScript and HTML and thus write our web browser.

5
00:00:16,000 --> 00:00:20,000
Thus we really need the ability to concatenate or put right next to each other

6
00:00:20,000 --> 00:00:23,000
in repeat regular expressions.

7
00:00:23,000 --> 00:00:26,000
Well, with regular expressions that's actually as simple as just writing,

8
00:00:26,000 --> 00:00:29,000
two regular expressions right next to each other.

9
00:00:29,000 --> 00:00:36,000
This matches the string a1, a2, b1, b2, c1, and c2--six strings in all.

10
00:00:36,000 --> 00:00:41,000
In each one, the first letter comes in the first regular expression,

11
00:00:41,000 --> 00:00:47,000
and the second letters, 1 or 2, matches the second part of the regular expression.

12
00:00:47,000 --> 00:00:53,000
We've concatenated a through c and 1 through 2 together to match more complicated strings.

13
00:00:53,000 --> 00:00:56,000
You may have noticed that we suddenly had quite a few strings

14
00:00:56,000 --> 00:00:58,000
from a relatively small regular expression.

15
00:00:58,000 --> 00:01:01,000
In fact, if we 0 through 9 next to 0 through 9,

16
00:01:01,000 --> 00:01:05,000
there are a huge number of strings that we would match--100 in total.

17
00:01:05,000 --> 00:01:09,000
Just as this matches 10 and this matches 10 when you put them together,

18
00:01:09,000 --> 00:01:11,000
you match 10-squared strings.

19
00:01:11,000 --> 00:01:15,000
So let's look for a two-digit number in the string July 28, 1921.

20
00:01:15,000 --> 00:01:18,000
Here is a two-digit number, here is a two-digit number, and here is another one.

21
00:01:18,000 --> 00:01:25,000
We'll end up getting 28, 18, and 21.

22
00:01:25,000 --> 00:01:29,000
Now I'm looking for two-digit numbers in 12345--12 is a two-digit number,

23
00:01:29,000 --> 00:01:33,000
34 is a two-digit number, but 5 actually does not qualify.

24
00:01:33,000 --> 00:01:39,000
This regular expression requires that both subparts be matched.

25
00:01:39,000 --> 00:01:44,000
July 28, 1821 is a good day for Peruvian Independence.

26
00:01:44,000 --> 00:01:48,000
Let's brush up on matching these compound regular expressions.

27
00:01:48,000 --> 00:01:51,000
Down here I've written a Python fragment

28
00:01:51,000 --> 00:01:54,000
or Python program involving re.findall.

29
00:01:54,000 --> 00:02:00,000
We're looking for a through z followed by 0 through 9 in this artificially constructed string

30
00:02:00,000 --> 00:02:05,000
designed to be a bit tricky--a1 space 2b space cc3 space 44d.

31
00:02:05,000 --> 00:02:09,000
I'm going to write out a bunch of possible answers, and I want you to tell me--

32
00:02:09,000 --> 00:02:14,000
check all that apply which of the following are elements of the return value of this expression.

33
00:02:14,000 --> 00:02:16,000
Here I've written nine possibilities.

34
00:02:16,000 --> 00:02:18,638
Check each one that's a member of the list that's return by this Python expression.
