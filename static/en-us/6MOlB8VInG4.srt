1
00:00:00,620 --> 00:00:03,060
In your first programming class, computer memory may have been

2
00:00:03,060 --> 00:00:06,040
explained to you with a picture that looks something like this.

3
00:00:06,040 --> 00:00:09,330
We have the CPU, where your instructions get executed, and these

4
00:00:09,330 --> 00:00:12,480
instructions may read or write to either main Memory, or to

5
00:00:12,480 --> 00:00:16,300
Disk. Main memory is Fast, and you can access any element

6
00:00:16,300 --> 00:00:18,680
in the same amount of time. That's what we mean by

7
00:00:18,680 --> 00:00:22,330
Random Access. And it is Temporary in the sense that when

8
00:00:22,330 --> 00:00:25,840
the program exits or if power is lost, all the information

9
00:00:25,840 --> 00:00:29,240
stored in it disappears. The hard disk, by contrast, is

10
00:00:29,240 --> 00:00:32,770
slow. It uses Sequential Access since you have to actually

11
00:00:32,770 --> 00:00:35,210
spin the disk to the right place. And what you

12
00:00:35,210 --> 00:00:38,060
write to the disk is permanent. It will still be there

13
00:00:38,060 --> 00:00:41,020
when the program exits or if power is lost. In

14
00:00:41,020 --> 00:00:44,520
this lecture, we're going to refine this picture in two ways. First,

15
00:00:44,520 --> 00:00:47,330
we'll look at Cache Systems, which allow the CPU to

16
00:00:47,330 --> 00:00:51,150
access the same information that is in main memory, only faster.

17
00:00:51,150 --> 00:00:53,940
Understanding how cache systems work will help you optimize your

18
00:00:53,940 --> 00:00:56,850
code when you need to. Second, we will explain the Virtual

19
00:00:56,850 --> 00:01:00,278
Memory system. As you write your application and compiler compiles it

20
00:01:00,278 --> 00:01:03,140
to generate addresses for all your variables and your code, you

21
00:01:03,140 --> 00:01:05,684
don't have to worry about other programs and what memory

22
00:01:05,684 --> 00:01:09,235
addresses they might be using. In fact there's often an illusion

23
00:01:09,235 --> 00:01:12,754
that having even more main memory then exists in the system,

24
00:01:12,754 --> 00:01:16,284
and that your application has them all to yourself. W'll see

25
00:01:16,284 --> 00:01:18,579
how the operating system maintains this abstraction

26
00:01:18,579 --> 00:01:20,940
to the virtual memory system. The details are

27
00:01:20,940 --> 00:01:24,210
essential to understanding operating systems optimizations. And how

28
00:01:24,210 --> 00:01:26,980
the need to share resources affects program performance.
