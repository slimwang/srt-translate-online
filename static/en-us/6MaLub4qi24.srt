1
00:00:00,240 --> 00:00:03,010
Here is why the movie quote is still playing.

2
00:00:03,010 --> 00:00:05,520
Thus far in RecordSoundsViewController,

3
00:00:05,520 --> 00:00:08,950
we have a function called audioRecorderDidFinishRecording.

4
00:00:08,950 --> 00:00:12,570
And inside this function, what we are doing is saving the recordedAudio.

5
00:00:12,570 --> 00:00:15,010
By the way, we are tracking two things about the audio.

6
00:00:15,010 --> 00:00:17,520
Its file path and its title.

7
00:00:17,520 --> 00:00:19,990
Now, even though we are saving the recorded audio,

8
00:00:19,990 --> 00:00:23,530
we're not quite passing it from the first scene to the second.

9
00:00:23,530 --> 00:00:25,840
If you want to play the sounds in the second U controller,

10
00:00:25,840 --> 00:00:28,470
we need to pass this data to the second scene.

11
00:00:28,470 --> 00:00:29,750
Let's do that next.

12
00:00:29,750 --> 00:00:33,880
Now to do this, I will go back to RecordSoundsViewController and

13
00:00:33,880 --> 00:00:37,570
introduce you to another function that we inherit from UIViewController.

14
00:00:38,720 --> 00:00:40,220
It's called prepareForSegue.

15
00:00:41,330 --> 00:00:43,980
And as I start to type it, Xcode autocompletes it for me.

16
00:00:45,340 --> 00:00:50,500
This function, prepareForSegue, it gets called just before a segue is about to

17
00:00:50,500 --> 00:00:53,990
be performed and therefore is a great place to pass any data.

18
00:00:53,990 --> 00:00:56,520
In here, I will add an if statement and

19
00:00:56,520 --> 00:01:00,230
check to see if my segue identifier is stopRecording.

20
00:01:00,230 --> 00:01:03,280
Now this type of a check becomes really important when we

21
00:01:03,280 --> 00:01:06,590
have multiple segues connected to the same ViewController.

22
00:01:06,590 --> 00:01:09,890
All right, to pass data to this second ViewController,

23
00:01:09,890 --> 00:01:12,850
we somehow need a way to access it in code.

24
00:01:12,850 --> 00:01:15,000
And I can do that with this line.

25
00:01:15,000 --> 00:01:19,050
Here I created a constant called playSoundsVC, and then defined its

26
00:01:19,050 --> 00:01:23,880
appropriate type, and then used segue's destinationViewController property

27
00:01:23,880 --> 00:01:26,660
to get a handle on the second ViewController in our app.

28
00:01:26,660 --> 00:01:32,020
I also use the as keyword in Swift to convert this destinationViewController to

29
00:01:32,020 --> 00:01:35,570
the correct type we are expecting, which is PlaySoundsViewController.

30
00:01:36,990 --> 00:01:41,280
Okay, so now that we have a way to access playSoundsViewController in code,

31
00:01:41,280 --> 00:01:43,420
let's think about how we are going to pass data to it.

32
00:01:44,840 --> 00:01:47,970
We can get our data from this sender parameter.

33
00:01:47,970 --> 00:01:51,360
Remember that sender is the object that initiated the segue,

34
00:01:51,360 --> 00:01:53,210
which in our case was recordedAudio.

35
00:01:54,410 --> 00:01:57,880
So I can write a line of code like this to retrieve the data.

36
00:01:59,430 --> 00:02:03,280
So now I just need to pass this data to playSoundsViewController.

37
00:02:03,280 --> 00:02:06,700
But wait, this guy, playSoundsViewController,

38
00:02:06,700 --> 00:02:10,620
it doesn't really have a way of receiving any data just yet, does it?

39
00:02:10,620 --> 00:02:14,070
So to fix this, what I will do is go to playSoundsViewController from

40
00:02:14,070 --> 00:02:19,890
the navigator, and create a new variable called receivedAudio.

41
00:02:19,890 --> 00:02:22,590
Now this variable is of type, RecordedAudio.

42
00:02:22,590 --> 00:02:24,050
This was the new class we created.

43
00:02:25,270 --> 00:02:29,140
Now if you go back to prepareForSegue, I can pass the data in this manner.

44
00:02:29,140 --> 00:02:32,650
I can say playSoundsViewController.receivedAudio.

45
00:02:32,650 --> 00:02:35,710
This is the new variable we created in playSoundsViewController.

46
00:02:35,710 --> 00:02:37,310
This is now equal to data.

47
00:02:38,330 --> 00:02:39,530
Cool, let's run this project.

48
00:02:40,930 --> 00:02:42,120
All right, let me record something.

49
00:02:43,320 --> 00:02:45,390
Is the app working now?

50
00:02:45,390 --> 00:02:46,830
Let me play the sound.

51
00:02:46,830 --> 00:02:51,110
>> My momma always said life was like a box of chocolates.

52
00:02:51,110 --> 00:02:51,790
>> Hm.

53
00:02:51,790 --> 00:02:53,970
The app is still playing a movie quote.

54
00:02:53,970 --> 00:02:55,980
Care to guess why that is happening?

55
00:02:55,980 --> 00:02:57,880
Enter your response in this box.
