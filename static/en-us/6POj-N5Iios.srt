1
00:00:00,320 --> 00:00:01,589
Each type of hardware or

2
00:00:01,589 --> 00:00:05,890
hardware architecture will support
a number of atomic instructions.

3
00:00:05,890 --> 00:00:11,480
Some examples include test and set, or
read and increment, or compare and swap.

4
00:00:11,480 --> 00:00:14,850
Different instructions may be supported
on different hardware platforms.

5
00:00:14,850 --> 00:00:18,170
Not every architecture has to
support every single one of

6
00:00:18,170 --> 00:00:20,520
the available atomic
instructions out there.

7
00:00:20,520 --> 00:00:23,660
As you can tell from the names
of these instructions,

8
00:00:23,660 --> 00:00:27,810
they all perform some multi-step,
multi-cycle operation.

9
00:00:27,810 --> 00:00:30,270
But, because they're
atomic instructions,

10
00:00:30,270 --> 00:00:33,530
the hardware makes
guarantees that the set

11
00:00:33,530 --> 00:00:38,450
of operations that are included in these
instructions will happen atomically,

12
00:00:38,450 --> 00:00:42,690
so not just halfway,
the entire operation or none of it.

13
00:00:42,690 --> 00:00:47,850
That it will happen in mutual exclusion,
meaning that only one

14
00:00:47,850 --> 00:00:52,800
instruction at a time will be allowed
to perform the appropriate operation.

15
00:00:52,800 --> 00:00:56,750
And that the remaining ones will
be queued up, will have to wait.

16
00:00:56,750 --> 00:01:01,400
So if we think about this, what this
means is that the atomic instructions

17
00:01:01,400 --> 00:01:06,100
specify some operation, and
this operation is the critical section.

18
00:01:06,100 --> 00:01:10,410
And the hardware supports all of the
synchronization-related mechanisms that

19
00:01:10,410 --> 00:01:12,870
are required for that operation.

20
00:01:12,870 --> 00:01:16,920
If you look at our spin lock example,
using the first atomic test and

21
00:01:16,920 --> 00:01:21,110
set up operation, the spin lock
implementation can look as follows.

22
00:01:21,110 --> 00:01:26,110
Here test is set to automatically
returns or tests the original value

23
00:01:26,110 --> 00:01:29,970
of the memory locations that's past
this parameter, lock in this case.

24
00:01:31,260 --> 00:01:35,110
And sets the new value of this
memory location to be one.

25
00:01:35,110 --> 00:01:37,380
This happens automatically.

26
00:01:37,380 --> 00:01:40,770
Remember, one, to us,
indicates that the lock is busy.

27
00:01:40,770 --> 00:01:44,190
When we have multiple threads that
are contending for this lock,

28
00:01:44,190 --> 00:01:47,340
when they are trying to execute
this spinlock operation,

29
00:01:47,340 --> 00:01:50,850
only one needs to
successfully wire the lock.

30
00:01:50,850 --> 00:01:55,040
The very first thread that comes
to execute the test and set.

31
00:01:55,040 --> 00:01:56,430
For that thread, test and

32
00:01:56,430 --> 00:02:00,480
set will return zero because
the original value of the lock was zero.

33
00:02:00,480 --> 00:02:02,370
Originally, the lock was free.

34
00:02:02,370 --> 00:02:05,290
That thread will
therefore exit the Y loop

35
00:02:05,290 --> 00:02:10,160
because test_and_set will return zero,
read, and that is different than busy.

36
00:02:10,160 --> 00:02:10,699
Why?

37
00:02:10,699 --> 00:02:13,620
That is the only thread that
will acquire the log and

38
00:02:13,620 --> 00:02:15,460
proceed with the execution.

39
00:02:15,460 --> 00:02:19,423
All of the remaining threads that
try to execute test_and_set, or

40
00:02:19,423 --> 00:02:22,280
then test_and_set will return one,

41
00:02:22,280 --> 00:02:26,980
because this first thread already
set the value of lock to be one.

42
00:02:26,980 --> 00:02:30,490
Therefore, those remaining threads
will just continue spinning

43
00:02:30,490 --> 00:02:32,370
into this wild loop.

44
00:02:32,370 --> 00:02:35,300
Notice that in the process,
these other threads,

45
00:02:35,300 --> 00:02:38,970
they're repeatedly resetting
the value of the lock to one.

46
00:02:38,970 --> 00:02:41,930
So as they're spinning
through the while loop,

47
00:02:41,930 --> 00:02:46,310
every single time they try to
execute this test_and_set operation,

48
00:02:46,310 --> 00:02:50,790
this sets the value of lock field
to be one again and to be busy.

49
00:02:50,790 --> 00:02:52,650
However, that's okay.

50
00:02:52,650 --> 00:02:55,820
The very first thread,
when it executed test_and_set,

51
00:02:55,820 --> 00:02:59,510
they already set the value
of the log to be busy.

52
00:02:59,510 --> 00:03:03,530
And these other threads are not
really changing the fact that the log

53
00:03:03,530 --> 00:03:04,950
is indeed locked.

54
00:03:04,950 --> 00:03:08,880
Which specific atomic instructions
are available on a given platform

55
00:03:08,880 --> 00:03:10,970
varies from hardware to hardware.

56
00:03:10,970 --> 00:03:15,280
Some operations like test and
set, others like read and

57
00:03:15,280 --> 00:03:18,270
increment may not be
available on all platforms.

58
00:03:18,270 --> 00:03:22,740
And in fact we may have versions of
this, where in some cases there is

59
00:03:22,740 --> 00:03:27,510
availability of an atomic operation
that anatomically increments something

60
00:03:27,510 --> 00:03:31,320
that does not necessarily
return the old value.

61
00:03:31,320 --> 00:03:35,034
In other cases, there may be atomics
that support read_and_decrement as

62
00:03:35,034 --> 00:03:36,850
opposed to read_and_increment.

63
00:03:36,850 --> 00:03:40,840
In addition, there may be differences
in efficiencies with which

64
00:03:40,840 --> 00:03:44,840
different atomic operations execute
on different architectures.

65
00:03:44,840 --> 00:03:48,360
For this reason, software such
as synchronization constructs

66
00:03:48,360 --> 00:03:52,910
that are built using certain atomic
constructions has to be ported.

67
00:03:52,910 --> 00:03:57,440
We have to make sure that
the implementation actually uses

68
00:03:57,440 --> 00:04:01,780
one of the atomic constructions that's
available on the target platform.

69
00:04:01,780 --> 00:04:05,501
Also we have to make sure that
the implementation of software of

70
00:04:05,501 --> 00:04:08,590
these synchronizations
constructs is optimized so

71
00:04:08,590 --> 00:04:12,324
that use the most efficient
atomicity on our target platform.

72
00:04:12,324 --> 00:04:15,423
And so that it uses them in
an efficient way to begin with.

73
00:04:15,423 --> 00:04:19,481
Anderson's paper presents several
alternatives in how spinlocks can be

74
00:04:19,481 --> 00:04:22,426
implemented using available
hardware atomics, and

75
00:04:22,426 --> 00:04:25,510
we will discuss these in
the remainder of this lecture.
