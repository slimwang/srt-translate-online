1
00:00:00,300 --> 00:00:04,930
The right answer, either SPIN or monolithic, will result in the least number of

2
00:00:04,930 --> 00:00:08,771
border crossings. Why? In the microkernel based

3
00:00:08,771 --> 00:00:12,229
structure, we're assuming that each one of

4
00:00:12,229 --> 00:00:17,070
these services are available as server processes.

5
00:00:17,070 --> 00:00:19,350
In their own hardware address space and

6
00:00:19,350 --> 00:00:23,360
therefore any system service that an application

7
00:00:23,360 --> 00:00:25,710
needs may have to go through multiple

8
00:00:25,710 --> 00:00:28,540
border crossings. And by border crossing we, of

9
00:00:28,540 --> 00:00:32,250
course, mean going across different address spaces and

10
00:00:32,250 --> 00:00:36,075
the incumbent loss of locality that it entails.

11
00:00:36,075 --> 00:00:39,630
Whereas, in the case of mono, you have

12
00:00:39,630 --> 00:00:41,970
only two border crossings. One to get to

13
00:00:41,970 --> 00:00:44,630
the monolithic kernel and the other to come

14
00:00:44,630 --> 00:00:48,440
out back into the application. And by construction,

15
00:00:48,440 --> 00:00:51,050
in SPIN also, because we are taking SPIN and

16
00:00:51,050 --> 00:00:54,551
extending it with the services. They're all

17
00:00:54,551 --> 00:00:57,450
contained in the same hardware address space.

18
00:00:57,450 --> 00:00:59,890
So, even though we may be going

19
00:00:59,890 --> 00:01:04,390
through several different protection domains in satisfying the

20
00:01:04,390 --> 00:01:07,730
system call emanating from an application. Those

21
00:01:07,730 --> 00:01:10,750
prediction domains are all logical prediction domains.

22
00:01:10,750 --> 00:01:13,070
It does not involve border crossing that

23
00:01:13,070 --> 00:01:16,670
entails change of locality and loss of performance.
