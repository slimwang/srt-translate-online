1
00:00:00,180 --> 00:00:03,260
One thing I'd like to look at is the
average number of minutes students spend

2
00:00:03,260 --> 00:00:05,550
in the classroom during
their first week.

3
00:00:05,550 --> 00:00:08,570
Right now I have a bunch of engagement
records for different students, and

4
00:00:08,570 --> 00:00:10,710
they're not in any particular order.

5
00:00:10,710 --> 00:00:14,430
First, I'd like to separate out
the engagement records into groups where

6
00:00:14,430 --> 00:00:18,620
each group contains all the engagement
records for a particular student.

7
00:00:18,620 --> 00:00:21,890
I'll represent these groups using
a dictionary where the keys are student

8
00:00:21,890 --> 00:00:26,190
account keys and the values are lists
of engagement records for that student.

9
00:00:27,280 --> 00:00:30,780
Next, I'll compute the total number of
minutes spent in the classroom by each

10
00:00:30,780 --> 00:00:34,210
student by summing up the number of
minutes in each engagement record for

11
00:00:34,210 --> 00:00:35,650
that student.

12
00:00:35,650 --> 00:00:38,250
Finally, I'll compute
the average of the totals

13
00:00:38,250 --> 00:00:39,650
to get the answer I'm looking for.

14
00:00:40,670 --> 00:00:43,670
Now I'll show you the code I
used to solve this problem.

15
00:00:43,670 --> 00:00:47,170
First I created the dictionary I
mentioned to group engagement data by

16
00:00:47,170 --> 00:00:48,510
the account key.

17
00:00:48,510 --> 00:00:52,300
You can see that I used the defaultdict
instead of a vanilla dictionary.

18
00:00:52,300 --> 00:00:54,900
If you haven't seen Python's
defaultdict before, that's okay.

19
00:00:54,900 --> 00:00:58,040
It allows you to specify
a default value.

20
00:00:58,040 --> 00:00:59,896
In this case I've specified list.

21
00:00:59,896 --> 00:01:02,770
That means if I ever try to look
up a key in the dictionary and

22
00:01:02,770 --> 00:01:06,190
that key is not there,
I'll get the empty list instead.

23
00:01:06,190 --> 00:01:08,675
You'll see how this can
be helpful in a minute.

24
00:01:08,675 --> 00:01:10,935
Then I looped through each
engagement record and

25
00:01:10,935 --> 00:01:13,375
saved the account key in this variable.

26
00:01:13,375 --> 00:01:16,835
Next I looked up the list of engagement
records for that account key.

27
00:01:16,835 --> 00:01:19,495
Here's where the defaultdict that
comes in handy if I had never

28
00:01:19,495 --> 00:01:22,845
added that account key yet,
then I get the empty list.

29
00:01:22,845 --> 00:01:26,295
Then I append this engagement record
to the list of engagement records for

30
00:01:26,295 --> 00:01:27,495
that account key.

31
00:01:27,495 --> 00:01:31,030
Next I wanted to add up the number of
minutes visited by each account and

32
00:01:31,030 --> 00:01:33,440
I decided to save that
in this dictionary.

33
00:01:33,440 --> 00:01:35,460
So this dictionary
will store a number for

34
00:01:35,460 --> 00:01:38,350
each account key,
instead of a list of engagement records.

35
00:01:39,400 --> 00:01:42,310
Next I looped over the dictionary
I created previously.

36
00:01:42,310 --> 00:01:45,790
And by looping over the .items,
I got both the key and

37
00:01:45,790 --> 00:01:48,280
the value for
each entry in the dictionary.

38
00:01:48,280 --> 00:01:51,610
For each account,
the number of minutes starts at 0.

39
00:01:51,610 --> 00:01:55,060
Next I loop over each engagement record
in the list of engagement records for

40
00:01:55,060 --> 00:01:56,280
that student.

41
00:01:56,280 --> 00:01:59,240
And I add the number of minutes that
student visited in that engagement

42
00:01:59,240 --> 00:02:02,330
record to the total number
of minutes for the student.

43
00:02:02,330 --> 00:02:05,390
Finally, I store that number
of minutes under that account

44
00:02:05,390 --> 00:02:06,990
key in the new dictionary.

45
00:02:06,990 --> 00:02:09,550
Now I'm ready to take the average
of those totals, and for

46
00:02:09,550 --> 00:02:11,930
that the account keys
are no longer relevant.

47
00:02:11,930 --> 00:02:14,610
I'm just interested in
the numbers themselves.

48
00:02:14,610 --> 00:02:18,510
So I'll use the .values method to
get out just the values from that

49
00:02:18,510 --> 00:02:20,020
dictionary.

50
00:02:20,020 --> 00:02:22,520
Now I could calculate the mean by hand,
but

51
00:02:22,520 --> 00:02:24,950
instead I'm going to use
a library called numpy to do it.

52
00:02:24,950 --> 00:02:28,760
You'll be seeing a lot of
numpy later in this course.

53
00:02:28,760 --> 00:02:31,960
And I've imported it using
the line import numpy as np.

54
00:02:33,210 --> 00:02:37,810
Adding as np allows me to later
refer to the numpy library as np,

55
00:02:37,810 --> 00:02:39,850
instead of referring to it as numpy.

56
00:02:39,850 --> 00:02:42,170
It's just a little shorter and
easier to type.

57
00:02:42,170 --> 00:02:45,070
You don't have to do this, but
lots of code posted online will have

58
00:02:45,070 --> 00:02:47,990
this convention, so
it's good to have seen it before.

59
00:02:47,990 --> 00:02:51,130
Then I can take the mean
by calling np.mean and

60
00:02:51,130 --> 00:02:52,340
passing in the total minutes.

61
00:02:54,060 --> 00:02:58,375
I see that the average number
of minutes spent was 647.

62
00:02:58,375 --> 00:03:01,419
I'm interesting in knowing more
than just the mean here, though.

63
00:03:01,419 --> 00:03:04,206
I'd also like to know what's
the standard deviation and

64
00:03:04,206 --> 00:03:07,130
what's the minimum and
what's the maximum.

65
00:03:07,130 --> 00:03:09,810
It turns out numpy has functions
to calculate those as well.

66
00:03:09,810 --> 00:03:14,090
They are np.std, np.min and np.max.

67
00:03:14,090 --> 00:03:16,880
Now, you might know that Python
actually also has a min and

68
00:03:16,880 --> 00:03:20,880
max function that you can use
without importing the numpy library.

69
00:03:20,880 --> 00:03:24,510
You'll learn later why you might
want to use numpy's version instead.

70
00:03:24,510 --> 00:03:26,530
But for
now I'm just going to go ahead and

71
00:03:26,530 --> 00:03:29,380
use it since I've already
imported the library.

72
00:03:29,380 --> 00:03:32,350
And when I run this I see that
the standard deviation is pretty large,

73
00:03:32,350 --> 00:03:33,760
larger than the mean.

74
00:03:33,760 --> 00:03:38,501
The minimum is 0 and
the maximum is about 10,000 minutes.

75
00:03:38,501 --> 00:03:41,508
That's a huge maximum and
in fact there's gotta be a problem here,

76
00:03:41,508 --> 00:03:43,090
because when you calculate it out,

77
00:03:43,090 --> 00:03:46,920
that's actually slightly more than
the total number of minutes in one week.

78
00:03:46,920 --> 00:03:48,510
So something has gone wrong.
