1
00:00:00,000 --> 00:00:02,000
In order to solve this problem, you need to have a good understanding

2
00:00:02,000 --> 00:00:05,000
of what the original function, proc, does.

3
00:00:05,000 --> 00:00:10,000
So let's take the two cases that really embody the output of this function.

4
00:00:10,000 --> 00:00:14,000
There are 2 inputs, but the output only depends on the value of A.

5
00:00:14,000 --> 00:00:17,000
Specifically, the value of the function test on a.

6
00:00:17,000 --> 00:00:21,000
If test(a) is true, then we return the second parameter b.

7
00:00:21,000 --> 00:00:25,000
If test(a) is false, we return the first parameter a.

8
00:00:25,000 --> 00:00:28,000
That's what we need to check in each of these functions. Let's start looking at them.

9
00:00:28,000 --> 00:00:34,000
In proc1, if test(x), which is the first parameter is true we return y.

10
00:00:34,000 --> 00:00:36,000
This matches with the original function.

11
00:00:36,000 --> 00:00:41,000
If test of the fist parameter is true, we return the second, as we do in proc1.

12
00:00:41,000 --> 00:00:47,000
If test of the first parameter is false, we return that parameter x.

13
00:00:47,000 --> 00:00:51,000
Test x is false, which is equivalent to test a is false,

14
00:00:51,000 --> 00:00:54,000
and in both cases we return a and x,

15
00:00:54,000 --> 00:00:57,000
which are just different names for the same variable in this function.

16
00:00:57,000 --> 00:01:00,000
This is equivalent.

17
00:01:00,000 --> 00:01:02,000
Let's look at this second function--proc2.

18
00:01:02,000 --> 00:01:07,000
Notice here that this condition is based on the value of b.

19
00:01:07,000 --> 00:01:12,000
We know this can't possibly be equivalent to proc, our original function,

20
00:01:12,000 --> 00:01:16,000
because the output here is not dependent on the value of b.

21
00:01:16,000 --> 00:01:20,000
We can tell right away that this is false. This is not equivalent to our original function.

22
00:01:20,000 --> 00:01:22,000
Let's look at proc3.

23
00:01:22,000 --> 00:01:27,000
The structure here is a little different, but let's work our way through it both examples.

24
00:01:27,000 --> 00:01:33,000
In the event that test(a) is true, we set result to b and re-return result.

25
00:01:33,000 --> 00:01:37,000
As our original function did, if test(a) is true, we return b.

26
00:01:37,000 --> 00:01:42,000
If test(a) is false, we simply return result, which was set at the beginning to a.

27
00:01:42,000 --> 00:01:47,000
So the overall functionality is that if test(a) is true, we return a.

28
00:01:47,000 --> 00:01:50,000
This matches with our original function definition.

29
00:01:50,000 --> 00:01:53,000
So this is equivalent to proc.

30
00:01:53,000 --> 00:01:56,000
Now we have the last function--proc4.

31
00:01:56,000 --> 00:01:59,000
It might throw you off that you see 'udacity' in quotes here, which is not present

32
00:01:59,000 --> 00:02:02,000
in any other function, but it's important we work our way through the problem.

33
00:02:02,000 --> 00:02:07,000
If test(a) is true, then not test(a) is false.

34
00:02:07,000 --> 00:02:09,000
We return b.

35
00:02:09,000 --> 00:02:11,000
If test(a) is true, we return b.

36
00:02:11,000 --> 00:02:13,000
That matches with the original definition.

37
00:02:13,000 --> 00:02:16,000
If test(a) is false, not test(a) is true,

38
00:02:16,000 --> 00:02:20,000
so we set b to 'udacity,' but then we return a.

39
00:02:20,000 --> 00:02:23,000
If test(a) is false, we change the value of b,

40
00:02:23,000 --> 00:02:26,000
but we don't do anything with it--we just return a.

41
00:02:26,000 --> 00:02:30,000
The result is the same as our original function proc.
