1
00:00:00,470 --> 00:00:03,510
To start designing algorithms for
a cluster or a supercomputer,

2
00:00:03,510 --> 00:00:04,800
you're going to need a machine model.

3
00:00:04,800 --> 00:00:06,840
How about this one?

4
00:00:06,840 --> 00:00:07,350
In this model,

5
00:00:07,350 --> 00:00:11,940
a machine is a collection of nodes
connected by some kind of network.

6
00:00:11,940 --> 00:00:16,170
Each node consists of a processor
connected to a private memory.

7
00:00:17,270 --> 00:00:20,480
By private, I mean that the node
can only directly read or

8
00:00:20,480 --> 00:00:21,560
write its own memory.

9
00:00:21,560 --> 00:00:26,400
It can't directly access
the memory of other nodes.

10
00:00:26,400 --> 00:00:30,440
I'll refer to this type of machine
as a Distributed Memory machine.

11
00:00:30,440 --> 00:00:34,390
Now this abstraction of
private memories is critical.

12
00:00:34,390 --> 00:00:36,250
It implies that to share data,

13
00:00:36,250 --> 00:00:39,280
nodes will have to send
messages to one another.

14
00:00:39,280 --> 00:00:43,610
So for example, suppose this node
wants to send data to this node.

15
00:00:43,610 --> 00:00:45,950
The only way to do that is the sender or

16
00:00:45,950 --> 00:00:50,860
source has to package up a message and
then put it on the network.

17
00:00:50,860 --> 00:00:54,510
So this message will have to find
some path through the network to get

18
00:00:54,510 --> 00:00:56,800
from the source node to
the destination node.

19
00:00:58,000 --> 00:01:02,170
In contrast to shared memory where
we read and write shared variables,

20
00:01:02,170 --> 00:01:06,260
this style of parallel communication
is called message-passing.

21
00:01:06,260 --> 00:01:09,540
Now this machine model
has a few simple rules.

22
00:01:09,540 --> 00:01:12,850
The zeroth rule of the model is
you never talk about the model.

23
00:01:12,850 --> 00:01:16,790
By that I mean, you need to master and
internalize these rules.

24
00:01:16,790 --> 00:01:18,920
Okay, so what are the real rules?

25
00:01:18,920 --> 00:01:23,360
The first rule is that you should
assume the network is fully connected.

26
00:01:23,360 --> 00:01:26,300
That means there's always a path
from any node to any other node in

27
00:01:26,300 --> 00:01:27,570
the network.

28
00:01:27,570 --> 00:01:30,880
The second rule is that the network
links are bi-directional.

29
00:01:30,880 --> 00:01:32,890
What does that mean?

30
00:01:32,890 --> 00:01:34,900
Well, suppose I have two
nodes in the machine, and

31
00:01:34,900 --> 00:01:36,185
they're connected by a link.

32
00:01:36,185 --> 00:01:39,830
Bi-directional means that
the link can carry a message in

33
00:01:39,830 --> 00:01:42,340
both directions at the same time.

34
00:01:42,340 --> 00:01:45,840
So, while one message is going this way,
another message can be going this way.

35
00:01:47,640 --> 00:01:52,391
The third rule is that you will allow
a node to concurrently perform at most,

36
00:01:52,391 --> 00:01:55,140
1 send and 1 receive at a time.

37
00:01:55,140 --> 00:01:59,000
This rule is important because it
effects the cost of communication.

38
00:01:59,000 --> 00:02:02,000
So for example suppose this node
wants to send the message on

39
00:02:02,000 --> 00:02:04,090
each of its outgoing links.

40
00:02:04,090 --> 00:02:07,220
In order for this node to send four
messages it's going to have to send them

41
00:02:07,220 --> 00:02:13,480
one at a time by contrast it could do
one send and one receive simultaneously.

42
00:02:13,480 --> 00:02:16,680
The fourth rule is about the cost
of a simultaneous send and

43
00:02:16,680 --> 00:02:19,200
receive of n words.

44
00:02:19,200 --> 00:02:22,090
So suppose this our computer, and

45
00:02:22,090 --> 00:02:25,180
let's further supposed that this node
wants to send a message to this node.

46
00:02:25,180 --> 00:02:30,650
There are several different paths,
here is one path and here's another.

47
00:02:31,760 --> 00:02:34,420
Regardless of which
path the message takes,

48
00:02:34,420 --> 00:02:36,820
rule number four says the following.

49
00:02:36,820 --> 00:02:40,890
The time to send the message
if it contains n words, is

50
00:02:40,890 --> 00:02:45,329
a constant alpha plus another constant
beta times the size of the message.

51
00:02:46,340 --> 00:02:50,710
In other words, the cost of sending the
message is linear in the message size.

52
00:02:50,710 --> 00:02:52,960
Now, it may seem strange that this cost,
somehow,

53
00:02:52,960 --> 00:02:54,930
is independent of the path that's taken.

54
00:02:54,930 --> 00:02:57,160
Now, that's not entirely true.

55
00:02:57,160 --> 00:03:00,210
And I'll clarify a little
bit later in the lesson.

56
00:03:00,210 --> 00:03:02,610
For the time being,
let's accept the formula, as stated.

57
00:03:02,610 --> 00:03:05,730
Now, the formula has two terms.

58
00:03:05,730 --> 00:03:10,110
The first term is called the latency,
and it has units of time.

59
00:03:10,110 --> 00:03:14,420
It's a fixed cost that you pay no
matter how large the message is.

60
00:03:14,420 --> 00:03:17,230
The second term has a parameter beta.

61
00:03:17,230 --> 00:03:18,060
Beta has a name.

62
00:03:18,060 --> 00:03:20,730
We'll call it the inverse bandwidth.

63
00:03:20,730 --> 00:03:23,480
It has units of time per word.

64
00:03:23,480 --> 00:03:26,480
You'll think a little bit more about
where this cost model really comes from

65
00:03:26,480 --> 00:03:28,200
momentarily, so just sit tight.

66
00:03:29,200 --> 00:03:32,980
One subtlety is, that this fourth
rule really only applies when there

67
00:03:32,980 --> 00:03:36,530
are no messages competing for links.

68
00:03:36,530 --> 00:03:39,120
So we have a fifth rule which
tells us what to do when

69
00:03:39,120 --> 00:03:42,810
messages are trying to go over
the same link, at the same time.

70
00:03:42,810 --> 00:03:45,360
This situation is called congestion.

71
00:03:45,360 --> 00:03:48,930
This rule says if there are k
messages simultaneously competing for

72
00:03:48,930 --> 00:03:51,750
a link, then in terms of
the cost of the message,

73
00:03:51,750 --> 00:03:57,120
will change only the beta term and
in particular we'll multiply it by k.

74
00:03:57,120 --> 00:04:00,620
For instance, let's consider this
link that connects these two nodes.

75
00:04:01,810 --> 00:04:04,720
The last rule governs what
happens if two messages try

76
00:04:04,720 --> 00:04:06,720
to go over the same link simultaneously.

77
00:04:07,900 --> 00:04:10,300
So suppose there's a red
message going this way and

78
00:04:10,300 --> 00:04:11,610
a blue message going this way.

79
00:04:11,610 --> 00:04:16,720
The last rule says that the effective
cost of this operation is the same as if

80
00:04:16,720 --> 00:04:21,769
the data transmission part, which is the
beta term, is serialized over the link.

81
00:04:22,840 --> 00:04:26,510
So if these two messages
are being transmitted in parallel

82
00:04:26,510 --> 00:04:30,840
Instead of observing a parallel
execution time of alpha plus beta n,

83
00:04:30,840 --> 00:04:34,100
supposing that the messages
are the same size n.

84
00:04:34,100 --> 00:04:38,870
What you'll see instead is a cost
of alpha plus beta times n times 2.

85
00:04:38,870 --> 00:04:43,270
Okay, so take a second to look at
these rules and commit them to memory.
