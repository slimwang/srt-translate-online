1
00:00:00,019 --> 00:00:04,245
We can generalize compaction in the following way--compact is an operation that

2
00:00:04,245 --> 00:00:12,060
allocates exactly 1 item in the output for each true input and 0 items in the output for each false input.

3
00:00:12,060 --> 00:00:16,033
This is useful, of course, in compact as a really common operation.

4
00:00:16,033 --> 00:00:19,355
But more generally we can do a compact-like operation

5
00:00:19,355 --> 00:00:24,057
where the number of output items can be computed dynamically for each input item.

6
00:00:24,057 --> 00:00:27,089
Let me offer a graphics example to show why this might be useful.

7
00:00:27,089 --> 00:00:31,334
The input to most real time computer graphics pipelines is a set of triangles.

8
00:00:31,334 --> 00:00:34,700
Some of these triangles might appear on the screen and some might not.

9
00:00:34,700 --> 00:00:38,448
And so we generally test to see if each triangle is visible or not,

10
00:00:38,448 --> 00:00:41,254
before we pass it down the pipeline for later processing.

11
00:00:41,254 --> 00:00:46,534
This is a compact operation--we compact an input stream of triangles, some of which are visible

12
00:00:46,534 --> 00:00:53,108
and some are not, into a smaller output stream where all triangles in the output stream are visible.

13
00:00:53,108 --> 00:00:57,112
And we know how to do this with compact. Now, here's the more complicated problem.

14
00:00:57,112 --> 00:01:01,958
What if a triangle intersects the boundary of the screen or window,

15
00:01:01,958 --> 00:01:06,571
for example this triangle here, or this triangle here?

16
00:01:06,571 --> 00:01:09,760
In this case we apply an operation called clipping,

17
00:01:09,760 --> 00:01:14,104
where we cut the triangle with the boundary, and then triangulate the resulting shape.

18
00:01:14,104 --> 00:01:18,547
So for this triangle, for instance, we're going to convert it to this triangle right here.

19
00:01:18,547 --> 00:01:24,428
This triangle has left behind a trapezoid, and so we only want to deal with triangles.

20
00:01:24,428 --> 00:01:29,720
So instead we triangulate this trapezoid and send 2 triangles down the pipe.

21
00:01:29,720 --> 00:01:32,771
Now we have a situation where we input a set of triangles,

22
00:01:32,771 --> 00:01:38,431
and each triangle can produce 0, 1, or possibly many output triangles.

23
00:01:38,431 --> 00:01:42,522
And we want to output the resulting triangles in a dense array.

24
00:01:42,522 --> 00:01:47,186
Here's a good geometry quiz question for you that has really nothing to do with the course material,

25
00:01:47,186 --> 00:01:49,139
but it's a pretty cool question nevertheless.

26
00:01:49,139 --> 00:01:54,708
What is the maximum number of triangles that can result from clipping a triangle with a rectangle?
