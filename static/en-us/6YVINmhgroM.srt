1
00:00:00,440 --> 00:00:04,637
I've been at Venmo for two years,
and for the first 22 months,

2
00:00:04,637 --> 00:00:06,772
at Venmo, I was on the iOS team and

3
00:00:06,772 --> 00:00:10,760
I built a large part of the Apple
that exists currently today.

4
00:00:10,760 --> 00:00:12,716
And now I'm on the strategy team,

5
00:00:12,716 --> 00:00:17,045
we're focused on exploring different
monetization strategies at Venmo.

6
00:00:17,045 --> 00:00:20,926
The Venmo iOS team decided to
rewrite the Venmo app in Swift.

7
00:00:20,926 --> 00:00:25,702
Around the same time as WWGC 2015,
Swift 2 was just announced and we were

8
00:00:25,702 --> 00:00:30,272
watching all these videos about all
the cool things you can do with Swift.

9
00:00:30,272 --> 00:00:35,240
At the same time, quintessentially,
our product design teams were discussing

10
00:00:35,240 --> 00:00:38,280
new UIs and new UXs and
in the Venmo app.

11
00:00:38,280 --> 00:00:42,595
Also, at the same time, our existing
Objective-C.code base was becoming very

12
00:00:42,595 --> 00:00:46,700
unmaintainable, building new
features was taking a long time.

13
00:00:46,700 --> 00:00:52,520
If we ever wanted to do any design
changes to the app or different

14
00:00:52,520 --> 00:00:57,120
flows in the app, it would require
massive refactors because of the fact

15
00:00:57,120 --> 00:01:01,360
that our UI layers and our model
layers are so deeply coupled together.

16
00:01:02,650 --> 00:01:06,059
So, one day after the one
of the WWDC sessions,

17
00:01:06,059 --> 00:01:09,555
all of us came back to
the San Francisco office and

18
00:01:09,555 --> 00:01:15,282
just started whiteboarding what of Swift
version of the Venmo app looked like.

19
00:01:15,282 --> 00:01:20,350
We made an API layer,
we made a UI layer and

20
00:01:20,350 --> 00:01:24,090
we just opened up our computers and
started building it.

21
00:01:24,090 --> 00:01:25,750
This wasn't like an official project or
anything but

22
00:01:25,750 --> 00:01:28,930
we started we kept doing this for
about a week and a half and

23
00:01:28,930 --> 00:01:31,606
came up with a bare bones
version of the Venmo app.

24
00:01:31,606 --> 00:01:35,472
kind of just like an experiment to see
how a Swift only version of Venmo app

25
00:01:35,472 --> 00:01:39,467
feels, and how much faster we think we
can iterate on a version like this as

26
00:01:39,467 --> 00:01:41,813
opposed to the current
version of the app.

27
00:01:41,813 --> 00:01:44,271
We got to a very good point
in those two weeks, and

28
00:01:44,271 --> 00:01:48,870
finally told what we were working on and

29
00:01:48,870 --> 00:01:53,426
how this code base that's going to
maintainable for a very long time.

30
00:01:53,426 --> 00:01:58,480
And it's also going to enable us to
write features much faster, and because

31
00:01:58,480 --> 00:02:02,089
of all that, they decided to get on
board and we started building this app.

32
00:02:02,089 --> 00:02:06,670
Objective-C will stick around for
a very, very, very long time.

33
00:02:06,670 --> 00:02:09,660
All of you like it,
the foundation and I think all of

34
00:02:09,660 --> 00:02:12,261
Apple's frameworks are actually
written in the 100% Objective-C.

35
00:02:12,261 --> 00:02:16,070
I don't think Objective-C is going
anywhere for an extremely long time and

36
00:02:16,070 --> 00:02:19,440
I think that having some knowledge about
how it works is extremely important.

37
00:02:21,360 --> 00:02:24,740
I do think that as time goes on,
more and

38
00:02:24,740 --> 00:02:28,910
more Objective-C developers will be
writing Swift more and more often.

39
00:02:28,910 --> 00:02:32,640
A lot of existing companies that

40
00:02:32,640 --> 00:02:37,560
have 100% Objective-C apps will
start catching the Swift train and

41
00:02:37,560 --> 00:02:41,060
start building all their new features
in Swift, which I highly recommend.

42
00:02:41,060 --> 00:02:44,987
What I don't recommend is just rewriting
an app, a perfectly good app and

43
00:02:44,987 --> 00:02:48,110
in Objective-C and
Swift because it's going to be a very,

44
00:02:48,110 --> 00:02:52,540
very, very long project
with very little gain.

45
00:02:52,540 --> 00:02:57,600
One of the largest challenge of doing a
big rewrite is the fact that during that

46
00:02:57,600 --> 00:03:03,320
time of the rewrite, your team can't
really build new product features and

47
00:03:03,320 --> 00:03:06,600
if you are building new product
features, you have to build it twice.

48
00:03:06,600 --> 00:03:09,746
Once in the existing app,
as well as like in the new app.

49
00:03:09,746 --> 00:03:12,660
The nice thing is that when you build
it twice, you can actually see how much

50
00:03:12,660 --> 00:03:16,170
faster you're building it in a new app,
which is quite delightful and

51
00:03:16,170 --> 00:03:20,620
kind of proves your point to the rest of
the team that this is a good decision.

52
00:03:20,620 --> 00:03:25,128
But that was definitely the most
difficult part about doing this rewrite,

53
00:03:25,128 --> 00:03:30,550
but when we were being conservative on
new features in the app during this time

54
00:03:30,550 --> 00:03:35,410
and the ones that absolutely had to
get in, had to be written full times.

55
00:03:35,410 --> 00:03:36,600
We're still working on it today,
it's almost done.

56
00:03:38,540 --> 00:03:41,459
The scope of the app is also changed
a lot since we first started.

57
00:03:42,660 --> 00:03:44,662
That said,
the entire team is working on it.

58
00:03:44,662 --> 00:03:50,290
And whenever some project does come up,
like a product feature that needs

59
00:03:50,290 --> 00:03:55,670
to come out,
one of us will move off the core app,

60
00:03:55,670 --> 00:03:59,480
rewrite app and start working on that
project and then work on it twice.

61
00:03:59,480 --> 00:04:04,150
Once for the old app and
once for the new app.

62
00:04:04,150 --> 00:04:07,680
If we were hiring a new
developer at Venmo who

63
00:04:07,680 --> 00:04:12,420
primarily will be writing Swift, I
think that them having some Objective-C

64
00:04:12,420 --> 00:04:17,260
knowledge coming in to Venmo
would be really valuable to us.

65
00:04:17,260 --> 00:04:19,690
It would also differentiate
them from other candidates

66
00:04:19,690 --> 00:04:22,010
that might only also know Swift,
which is really important.

67
00:04:23,350 --> 00:04:26,772
Though our entire code
base will be 100% Swift,

68
00:04:26,772 --> 00:04:30,660
we do have a lot of dependencies
that are Objective-C, and

69
00:04:30,660 --> 00:04:34,342
sometimes you do have to go
into them and maintain them.

70
00:04:34,342 --> 00:04:38,438
We would want them to know
the syntax of Objective-C primarily,

71
00:04:38,438 --> 00:04:41,421
as well as some of
the nuances of Objective-C.

72
00:04:41,421 --> 00:04:46,245
For example, Objective-C variables
are by default always optional.

73
00:04:46,245 --> 00:04:50,970
That means that opens you up to a lot
of errors and runtime bugs which

74
00:04:50,970 --> 00:04:54,790
you don't have in Swift, and so it's
important to be even more careful, and

75
00:04:54,790 --> 00:04:58,800
check for nil before you're adding
a variable into a dictionary.

76
00:04:58,800 --> 00:05:02,860
A lot of our third party dependencies
are still in Objective-C,

77
00:05:02,860 --> 00:05:04,980
some of which we have
open source ourselves.

78
00:05:04,980 --> 00:05:08,600
So going back into those dependencies
and updating things is important.

79
00:05:08,600 --> 00:05:12,170
Knowing basic Objective-C
syntax is very important.

80
00:05:12,170 --> 00:05:15,640
Knowing how to do anullability on it
to make sure that your Swift code

81
00:05:15,640 --> 00:05:17,690
plays nice with Objective-C
is also very important.
