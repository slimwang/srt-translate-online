1
00:00:00,120 --> 00:00:04,912
I have my axis of rotation. It's negative X, Z. It's a good idea to normalize

2
00:00:04,912 --> 00:00:09,006
this, but this will do for now. If I look at my cube, it's pretty easy to figure

3
00:00:09,006 --> 00:00:13,080
out the diagonal directions themselves. Here is the easiest one. It goes from

4
00:00:13,080 --> 00:00:17,850
negative one, negative one, negative one to one, one, one. So the cylinder's

5
00:00:17,850 --> 00:00:22,139
axis is (2,2,2). We can also this vector's length to find the distance from one

6
00:00:22,139 --> 00:00:26,298
corner to another. These are the facts we need to continue. We've got the axis

7
00:00:26,298 --> 00:00:30,773
of rotation. We need the angle to rotate and the length of the cylinder itself.

8
00:00:30,773 --> 00:00:35,960
Here's three JS code that computes the cylinder's length. Three JS uses a class

9
00:00:35,960 --> 00:00:41,160
called Vector3. What you put in a vector 3 a point or a vectors coordinate is up

10
00:00:41,160 --> 00:00:44,826
to you. Perhaps a better name might have been coordinate 3 but that' pretty

11
00:00:44,826 --> 00:00:48,578
bulky most graphic systems you'll encounter will call coordinates vectors but

12
00:00:48,578 --> 00:00:52,138
it's easy enough to understand from the context what is meant. To find the

13
00:00:52,138 --> 00:00:55,920
cylinders axis direction and length I set up the 2 corner locations I then

14
00:00:55,920 --> 00:01:00,591
subtract one vector from the other using the sub vectors method. Giving a vector

15
00:01:00,591 --> 00:01:04,441
from one point to another. There are a huge number of vector and matrix

16
00:01:04,441 --> 00:01:09,073
operations supported in 3JS, subtraction is just one of many. Once we have the

17
00:01:09,073 --> 00:01:12,977
cylinder axis, this last line of code computes the length of this axis, which

18
00:01:12,977 --> 00:01:17,219
we'll need for knowing how long to make the cylinder. At this point, we have the

19
00:01:17,219 --> 00:01:21,428
axis of rotation The length of the cylinder, but we don't have the angle of

20
00:01:21,428 --> 00:01:25,132
rotation yet. However, we have everything we need to get it. Given this

21
00:01:25,132 --> 00:01:29,968
cylinder's access, we can dot product it with the y axis, which is where the

22
00:01:29,968 --> 00:01:34,414
cylinder starts at, and then, by the dot product of that and its final

23
00:01:34,414 --> 00:01:39,772
position... We will get the angle that we need to rotate. Remember that the dot

24
00:01:39,772 --> 00:01:43,428
product computes the cosine of the angle between two normalized vectors. So we

25
00:01:43,428 --> 00:01:48,279
normalize the cylinder's axis here and takes its dot product with the y axis

26
00:01:48,279 --> 00:01:52,708
vector here. This gives us the cosine of the angle. So we take the arc cosine to

27
00:01:52,708 --> 00:01:57,526
get the angle back in radiants. Using a dot product is a bit of overkill, by the

28
00:01:57,526 --> 00:02:01,964
way. Computing a dot product with a y axis like this is the same as just

29
00:02:01,964 --> 00:02:06,502
grabbing the y component of the cylAxis. We could've simply normalized and done

30
00:02:06,502 --> 00:02:10,264
this like this code here. However, unless this is a critical loop, like we're

31
00:02:10,264 --> 00:02:14,748
making a billion of these ornaments, I'd recommend using this first way. If

32
00:02:14,748 --> 00:02:18,465
someone reads or modifies this code in the future, the intent is clearer and

33
00:02:18,465 --> 00:02:22,240
more general. Now we have all the facts we need to make this object, the axis

34
00:02:22,240 --> 00:02:26,415
and angle of rotation and the length of the cylinder. So let's get cracking.

35
00:02:26,415 --> 00:02:29,442
Well, I guess I should mention that the sign of the theta might be a little bit

36
00:02:29,442 --> 00:02:32,676
questionable here. We could use the right had rule to make sure we have the

37
00:02:32,676 --> 00:02:37,546
direction of rotation right. Or we could use the principle of negate and try

38
00:02:37,546 --> 00:02:42,164
again. I learned about this practice long ago from an article in an old trade

39
00:02:42,164 --> 00:02:46,458
journal called SGI Insider. It was great to realize that someone else was doing

40
00:02:46,458 --> 00:02:50,535
what I also do. If I put a rotation in and it goes the wrong direction, just try

41
00:02:50,535 --> 00:02:54,832
the opposite. So feel free to do the same, as you're in good company. You could

42
00:02:54,832 --> 00:02:58,608
spend 15 minutes trying to figure out the sign needed after some set of matrix

43
00:02:58,608 --> 00:03:02,302
operations, and still have about a 50 percent chance of getting it right.

44
00:03:02,302 --> 00:03:06,954
Faster, more reliable is just to try it and see. That said, this practice won't

45
00:03:06,954 --> 00:03:10,671
help much if there are too many things to negate or if the rotation is part of a

46
00:03:10,671 --> 00:03:14,815
long chain of transforms. Or if you're starting from an incorrect algorithm.

47
00:03:14,815 --> 00:03:19,111
But, if you're feeling the math is solid, go ahead and just do it. Using this

48
00:03:19,111 --> 00:03:22,946
principle with my test program, I found I needed to negate the angle to move the

49
00:03:22,946 --> 00:03:26,456
rod to the correct place. I guess I could've thought it through and realized

50
00:03:26,456 --> 00:03:29,848
this is the right-hand rule, and all that kind of stuff, but nonetheless, just

51
00:03:29,848 --> 00:03:34,028
trying it made me realize we need to. To have a negative theta. I don't really

52
00:03:34,028 --> 00:03:38,444
like negative angles, I like to think positively, so I negated both the angle

53
00:03:38,444 --> 00:03:42,430
and the axis direction. This should give exactly the same rotation. If you

54
00:03:42,430 --> 00:03:47,470
rotate clockwise around one axis, rotating counter clockwise around the opposite

55
00:03:47,470 --> 00:03:49,563
axis' direction is the same thing.
