1
00:00:00,150 --> 00:00:02,370
As so often the case with our data, some entries

2
00:00:02,370 --> 00:00:05,410
or documents will have fields that other do not. In

3
00:00:05,410 --> 00:00:09,050
any project, a data model usually goes through several literations.

4
00:00:09,050 --> 00:00:12,460
MongoDB was designed to address both of these issues by providing

5
00:00:12,460 --> 00:00:16,360
a flexible schema that deals well with both individual documents

6
00:00:16,360 --> 00:00:18,930
that vary in the fields they contain as well as

7
00:00:18,930 --> 00:00:22,000
the schema for our entire collection needing to change. Let's

8
00:00:22,000 --> 00:00:25,550
take a look at person info box data, as an example.

9
00:00:25,550 --> 00:00:28,230
Now for nearly everyone, it probably makes sense to

10
00:00:28,230 --> 00:00:32,740
include fields for birth and death dates. Maybe nationality and

11
00:00:32,740 --> 00:00:36,280
even profession, but not everyone will have held office, and

12
00:00:36,280 --> 00:00:39,010
not everyone is associated with a political party. And even

13
00:00:39,010 --> 00:00:41,690
if we're talking about people who are not famous,

14
00:00:41,690 --> 00:00:43,940
some people will have spouses. Some will have more than

15
00:00:43,940 --> 00:00:47,490
one. And others won't. Some will have children and some

16
00:00:47,490 --> 00:00:50,610
will not. Leaving aside the question of what is the

17
00:00:50,610 --> 00:00:53,970
right data model for person data. In MongoDB we can

18
00:00:53,970 --> 00:00:57,480
represent each person using the fields that are appropriate to them

19
00:00:57,480 --> 00:01:01,490
even if some person documents contain fields that others don't have.

20
00:01:01,490 --> 00:01:05,670
MongoDB's indexing system and query execution system take this into account.

21
00:01:05,670 --> 00:01:08,050
So we can query a people collection for people with

22
00:01:08,050 --> 00:01:11,100
two or more children, and it will work as expected retrieving

23
00:01:11,100 --> 00:01:13,400
only data for people that have two or more entries in

24
00:01:13,400 --> 00:01:16,140
the array that serves as the value for the children field.

25
00:01:16,140 --> 00:01:19,340
Ignoring documents with fewer As well as documents that don't

26
00:01:19,340 --> 00:01:21,980
have a children field at all. What this also means is

27
00:01:21,980 --> 00:01:24,820
that it's easy to evolve your scheme as new needs emerge

28
00:01:24,820 --> 00:01:28,360
or more data becomes available. It's a simple matter to begin

29
00:01:28,360 --> 00:01:31,670
adding documents to a collection that have new fields you now

30
00:01:31,670 --> 00:01:33,930
want to track or to change the way you model existing

31
00:01:33,930 --> 00:01:37,390
fields. As an example of this, let's take a look at

32
00:01:37,390 --> 00:01:41,190
the dbpedia page, that describes the data sets that are available.

33
00:01:41,190 --> 00:01:42,970
Now, if I scroll down this page. And, I've already

34
00:01:42,970 --> 00:01:46,960
done that here, we have an example for city data.

35
00:01:46,960 --> 00:01:50,390
So, so far we've looked at automobile data, person data

36
00:01:50,390 --> 00:01:54,070
and now, city data, from the info-box data set. And, I'm

37
00:01:54,070 --> 00:01:56,765
showing this example to illustrate the fact that the scheme

38
00:01:56,765 --> 00:02:00,180
for city info boxes has evolved. And, we can see that

39
00:02:00,180 --> 00:02:03,710
in this old example for Innsbruck. And comparing it to

40
00:02:03,710 --> 00:02:06,280
the new example for Innsbruck and if you look through this

41
00:02:06,280 --> 00:02:08,788
data there are a couple of places where

42
00:02:08,788 --> 00:02:12,370
the data has changed. There's no mayor listed here

43
00:02:12,370 --> 00:02:14,690
as there is here and while there's no time

44
00:02:14,690 --> 00:02:17,440
zone listed in the old form of the data.

45
00:02:17,440 --> 00:02:20,290
The time zone for central and day light

46
00:02:20,290 --> 00:02:23,960
savings time are listed here. Small differences, but these

47
00:02:23,960 --> 00:02:25,470
are the type of subtle changes that we would

48
00:02:25,470 --> 00:02:27,450
expect to see in a schema that is evolving.
