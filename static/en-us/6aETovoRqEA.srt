1
00:00:01,450 --> 00:00:05,673
Hello and welcome to this new lesson. In the last lesson, you've used objects

2
00:00:05,673 --> 00:00:10,130
of classes that other people have created. In this lesson, you will learn how

3
00:00:10,130 --> 00:00:14,780
to write your own classes. We'll start out with the class that models a car

4
00:00:14,780 --> 00:00:18,970
that drives along. When you design a class, the first thing you ask yourself

5
00:00:18,970 --> 00:00:23,880
is. What can one do with the object? Well, imagine a car object. It can drive.

6
00:00:23,880 --> 00:00:27,760
Being a car, one will need to add gas once in a while. The object should be

7
00:00:27,760 --> 00:00:32,640
able to tell us how many miles it has driven and also how much gas is left.

8
00:00:32,640 --> 00:00:36,970
That's all that our car objects will be able to do. Now the first step is to

9
00:00:36,970 --> 00:00:42,010
take this English description of the car's capabilities and turn it into the

10
00:00:42,010 --> 00:00:46,720
Java code for the public interface. Her is how I like to do it. I first imagine

11
00:00:46,720 --> 00:00:51,800
myself being a user of this class, so I have an object, here it's my car and

12
00:00:51,800 --> 00:00:55,805
here's how I might want to call the add gas method. The name of the method,

13
00:00:55,805 --> 00:01:00,152
addGas and here I'd add 20 gallons. To make the car drive, call the drive

14
00:01:00,152 --> 00:01:04,959
method on the car and of course one has to say for how long to drive and here

15
00:01:04,959 --> 00:01:09,080
we say 100 miles. And then I might want to find out how much gas is left in the

16
00:01:09,080 --> 00:01:14,950
tank after that. So I again use the mycar object, invoke the getgasintank

17
00:01:14,950 --> 00:01:19,490
method. It returns the gas level and I store that in a variable. Well, what's

18
00:01:19,490 --> 00:01:24,380
the point? I now have more information. I can see that these two methods take

19
00:01:24,380 --> 00:01:29,010
arguments and this one doesn't. And I can see that this method here returns a

20
00:01:29,010 --> 00:01:34,020
value that's actually a number and these two don't. Now it's fairly easy to

21
00:01:34,020 --> 00:01:39,330
write up the publivc interface of the class. I have four methods. Here you see

22
00:01:39,330 --> 00:01:44,920
their names. You see that the first two methods have parameter variables and

23
00:01:44,920 --> 00:01:49,340
you see that these two methods return values. Let's see more closely on how

24
00:01:49,340 --> 00:01:53,380
this process works. Look at the add gas method here. Here, we see it takes an

25
00:01:53,380 --> 00:01:58,609
argument, the number of gallons added. I've called that here the amount and

26
00:01:58,609 --> 00:02:04,497
it's of type double. This method doesn't return any value, so it's declared as

27
00:02:04,497 --> 00:02:09,810
a void. In contrast gas getgasintank has no argument. So there's no parameter

28
00:02:09,810 --> 00:02:15,052
variable here but it returns a number. So we put the keyword double here. So

29
00:02:15,052 --> 00:02:20,428
the general process when designing a class is to first informally figure out

30
00:02:20,428 --> 00:02:24,440
what you want the class to do. Then to put yourselves in the shoe of the user

31
00:02:24,440 --> 00:02:27,950
of the class and see how those methods might be called. And then you have

32
00:02:27,950 --> 00:02:32,620
enough information to write up the public interface in Java. Sara's going to

33
00:02:32,620 --> 00:02:36,066
practice that process with you with another class.
