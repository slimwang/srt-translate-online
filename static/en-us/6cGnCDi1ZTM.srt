1
00:00:00,000 --> 00:00:02,000
Here's what gensequence looks like.

2
00:00:02,000 --> 00:00:06,000
We have a recursive base case that says, if there are no numbers that we're looking for,

3
00:00:06,000 --> 00:00:10,000
we can't generate anything of those lengths, and so return the empty set.

4
00:00:10,000 --> 00:00:17,000
Then we say the xmatches we get by applying x to any number up to the maximum of Ns,

5
00:00:17,000 --> 00:00:19,000
including the maximum of Ns,

6
00:00:19,000 --> 00:00:23,000
but then we got to do some computation to figure out what can be the allowable sizes

7
00:00:23,000 --> 00:00:30,000
for y, and we do that by saying, let's take all the possible values that came back

8
00:00:30,000 --> 00:00:35,000
from the xmatches and then for each of those values and for each of the original values

9
00:00:35,000 --> 00:00:38,000
for the lengths that we're looking for, subtract those off

10
00:00:38,000 --> 00:00:43,000
and say, total is going to be one of the things we got from x

11
00:00:43,000 --> 00:00:48,000
and one of the things we got from y, that better add up to one of the things in Ns.

12
00:00:48,000 --> 00:00:53,000
Then we call y with that set of possible ends for y and then we do the same thing

13
00:00:53,000 --> 00:00:54,000
that we were going to do before.

14
00:00:54,000 --> 00:01:01,000
We go through those matches, but this is going to be with a reduced set of possibilities

15
00:01:01,000 --> 00:01:03,000
and count those up,

16
00:01:03,000 --> 00:01:08,000
and now, the thing that makes it all work is this optional argument here,

17
00:01:08,000 --> 00:01:12,000
saying the number that we're going to start at for the possible sizes, for x

18
00:01:12,000 --> 00:01:17,000
in the default case, that's 0, and so we start the range at 0.

19
00:01:17,000 --> 00:01:22,000
But in the case where we're calling from +, we're going to set that to 1.

20
00:01:22,000 --> 00:01:24,000
Let's see what that looks like.

21
00:01:24,000 --> 00:01:27,000
Here's the constructors, the compilers for sequence and plus.

22
00:01:27,000 --> 00:01:30,000
For a regular sequence, there is no constraint on this start for x.

23
00:01:30,000 --> 00:01:34,000
X can be any size up to the maximum of the N's.

24
00:01:34,000 --> 00:01:39,000
But for plus, we're going to always ask that the x part have a length of at least 1,

25
00:01:39,000 --> 00:01:42,000
and then the y part will be whatever is left over.

26
00:01:42,000 --> 00:01:49,000
That's how we break the recursion, and we make sure that genseq will always terminate.

27
00:01:49,000 --> 00:01:52,000
Now this language generation program is a little bit complex.

28
00:01:52,000 --> 00:01:57,000
So I wanted to make sure that I wrote a test suite for it to test the generation.

29
00:01:57,000 --> 00:02:00,000
So here I've just defined some helper functions

30
00:02:00,000 --> 00:02:03,000
and then wrote a whole bunch of statements here.

31
00:02:03,000 --> 00:02:06,000
If we check one of 'ab' and limit that to size 2,

32
00:02:06,000 --> 00:02:07,000
that should be equal to this set.

33
00:02:07,000 --> 00:02:10,000
It's gone off the page. Let's put it back where it belongs.

34
00:02:10,000 --> 00:02:16,000
One element of size 0, 2 elements of size 1, and 4 elements of size 2,

35
00:02:16,000 --> 00:02:18,000
just what you would expect.

36
00:02:18,000 --> 00:02:23,000
Here are sequences of a star, b star, c star of size exactly 4.

37
00:02:23,000 --> 00:02:26,000
Here they are and so on and so on.

38
00:02:26,000 --> 00:02:27,000
We've made all these tests.

39
00:02:27,000 --> 00:02:30,000
I should probably make more than these, but this will give you some confidence

40
00:02:30,000 --> 00:02:33,000
that the program is doing the right thing

41
00:02:33,000 --> 99:59:59,999
if it passes at least this minimal test suite.
