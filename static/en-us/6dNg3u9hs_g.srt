1
00:00:00,380 --> 00:00:02,810
So let's talk about the Multiple-Writer part of

2
00:00:02,810 --> 00:00:06,080
it. Note that it could be multiple user

3
00:00:06,080 --> 00:00:10,670
data structures present in a given page X.

4
00:00:10,670 --> 00:00:13,110
If that is the case, the programmer probably

5
00:00:13,110 --> 00:00:16,980
has different locks for accessing different portions of

6
00:00:16,980 --> 00:00:19,480
the data structures that happened to all fit

7
00:00:19,480 --> 00:00:26,050
within this page X. So it is conceivable that when all of this was going on.

8
00:00:26,050 --> 00:00:29,620
There was another processor, let's say P4, and

9
00:00:29,620 --> 00:00:32,090
a thread that is running on the processor

10
00:00:32,090 --> 00:00:35,780
P4 got a completely different lock, let's say

11
00:00:35,780 --> 00:00:39,360
L2. And it is accessing some data structure that

12
00:00:39,360 --> 00:00:45,510
happens to be in the same page X. This is perfectly fine. The DSM software Is

13
00:00:45,510 --> 00:00:48,100
not going to do anything in terms of the

14
00:00:48,100 --> 00:00:51,660
diffs that it has created with respect to the

15
00:00:51,660 --> 00:00:56,190
page X because of lock acquisition L. That's

16
00:00:56,190 --> 00:01:00,940
completely different set of actions compared to a different lock acquisition,

17
00:01:00,940 --> 00:01:05,730
say L2. So if in fact that other thread that is running on P4

18
00:01:06,850 --> 00:01:11,510
executed in parallel with P1, got its lock, say L2,

19
00:01:11,510 --> 00:01:16,720
and modified x. When P2 gets its lock L, the liaison

20
00:01:16,720 --> 00:01:24,110
software is going to bring the dif only from the previous users of the same lock

21
00:01:24,110 --> 00:01:28,730
L. P4 was not using L. It was using L2 even though it accessed the same page.

22
00:01:28,730 --> 00:01:32,170
And modifying a different portion of that page.

23
00:01:32,170 --> 00:01:34,900
And therefore the DSM software is going to assume

24
00:01:34,900 --> 00:01:41,800
that that change made by P4 to x is irrelevant so far as P2's critical section

25
00:01:41,800 --> 00:01:43,810
is concerned. So that's the important thing,

26
00:01:43,810 --> 00:01:46,380
and that is where the multiple writer coherence

27
00:01:46,380 --> 00:01:50,580
protocol semantic comes in. That Simultaneously the

28
00:01:50,580 --> 00:01:54,480
same page could be modified by several different

29
00:01:54,480 --> 00:01:57,740
threads on several different processors. And that

30
00:01:57,740 --> 00:02:01,300
is perfectly fine, so long as they're using

31
00:02:01,300 --> 00:02:07,030
different locks. So the association between the set of changes to a page Is only

32
00:02:07,030 --> 00:02:13,910
to specific lock which is being used to govern that critical section and this

33
00:02:13,910 --> 00:02:19,230
is the reason why this is called a Multiple-Writer Coherence Protocol. And we

34
00:02:19,230 --> 00:02:22,630
saw how this Multiple-Writer Coherence Protocol

35
00:02:22,630 --> 00:02:25,540
lives in concert with LRC to reduce

36
00:02:25,540 --> 00:02:28,340
the amount of communication that goes on

37
00:02:28,340 --> 00:02:31,330
in executing critical sections of an application.
