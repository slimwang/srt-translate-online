1
00:00:00,240 --> 00:00:02,870
As I mentioned earlier, for going from

2
00:00:02,870 --> 00:00:05,370
the implementation to optimization, we once again

3
00:00:05,370 --> 00:00:08,740
turn to the theoretical framework. And in

4
00:00:08,740 --> 00:00:11,730
this case, we're going to use this Nuprl theorem

5
00:00:11,730 --> 00:00:15,040
proving framework. The Nuprl theorem proving framework

6
00:00:15,040 --> 00:00:17,320
is a vehicle by which you can make

7
00:00:17,320 --> 00:00:20,420
some assertions and prove some theorems about

8
00:00:20,420 --> 00:00:25,670
the equality of optimized and unoptimized code and

9
00:00:25,670 --> 00:00:28,560
let me elaborate. First of all, you start

10
00:00:28,560 --> 00:00:32,189
with this OCaml code, which is unoptimized and

11
00:00:32,189 --> 00:00:35,800
there is a tool that converts this unoptimized

12
00:00:35,800 --> 00:00:38,650
OCaml code to Nuprl Code. This is once

13
00:00:38,650 --> 00:00:41,920
again an unoptimized version of the original OCaml

14
00:00:41,920 --> 00:00:44,470
code, but it is a Nuprl code and

15
00:00:44,470 --> 00:00:48,200
this Nuprl code is one which is at

16
00:00:48,200 --> 00:00:51,820
the base of this theorem proving framework and

17
00:00:51,820 --> 00:00:57,580
what we can do with this theorem proving framework is convert this Nuprl code to

18
00:00:57,580 --> 00:01:00,240
optimized Nuprl code. And through a whole

19
00:01:00,240 --> 00:01:04,319
series of optimization theorems that are in this

20
00:01:04,319 --> 00:01:07,400
framework, we can actually show that the

21
00:01:07,400 --> 00:01:10,320
optimized Nuprl code is equivalent to the unoptimized

22
00:01:10,320 --> 00:01:13,090
Nuprl code. So we showed so far

23
00:01:13,090 --> 00:01:16,690
as the operating system design experience is concerned,

24
00:01:16,690 --> 00:01:19,940
we're going to treat this as magic. And if

25
00:01:19,940 --> 00:01:22,440
you are interested in digging deeper, I welcome you

26
00:01:22,440 --> 00:01:24,900
to do that. But for the purposes of this

27
00:01:24,900 --> 00:01:27,400
lesson, we're not going to go into the theoretical

28
00:01:27,400 --> 00:01:31,380
details of how this theorem proving framework does

29
00:01:31,380 --> 00:01:35,930
its work of ensuring that the optimized Nuprl code

30
00:01:35,930 --> 00:01:38,600
is the same as the unoptimized Nuprl code. Now,

31
00:01:38,600 --> 00:01:41,700
once this step is completed, then there is another

32
00:01:41,700 --> 00:01:44,640
tool that converts this optimized Nuprl code

33
00:01:44,640 --> 00:01:47,790
back into the optimized OCaml code. Now,

34
00:01:47,790 --> 00:01:51,030
we are ready to deploy this. So this is sort of the design cycle going

35
00:01:51,030 --> 00:01:54,470
one full round, going from specification to

36
00:01:54,470 --> 00:01:58,440
implementation, implementation to optimization and from optimization

37
00:01:58,440 --> 00:02:03,980
back to deployable code, that we can then take and put it on the system.
