1
00:00:00,008 --> 00:00:02,374
Okay, so pennants are really great for

2
00:00:02,374 --> 00:00:05,896
representing collections that
are powers of two in size.

3
00:00:05,896 --> 00:00:10,131
But a bag needs to be able to
contain any number of elements, so

4
00:00:10,131 --> 00:00:13,316
how can we use pennants
in order to build bags?

5
00:00:13,316 --> 00:00:17,781
And it turns out a basic idea from
computer science preschool is what is

6
00:00:17,781 --> 00:00:18,773
going to help us.

7
00:00:18,773 --> 00:00:22,690
First, I want you to remember a basic
fact about binary arithmetic.

8
00:00:22,690 --> 00:00:27,080
In particular, you can represent any
non-negative integer as a binary string.

9
00:00:27,080 --> 00:00:30,660
So, let's take an integer,
I don't know, how about 23.

10
00:00:30,660 --> 00:00:32,540
How do you write this in binary?

11
00:00:32,540 --> 00:00:36,070
The answer is 10111.

12
00:00:36,070 --> 00:00:37,556
In base two.

13
00:00:37,556 --> 00:00:41,530
Now each bit position represents
a distinct power of two,

14
00:00:41,530 --> 00:00:44,053
so let's number the bit positions.

15
00:00:44,053 --> 00:00:47,801
So this bit is 2 to the 0
which is equal to 1.

16
00:00:47,801 --> 00:00:53,983
The second bit is 2 to the 1 or
2 and we can go on and on and on.

17
00:00:53,983 --> 00:00:59,278
And notice that 16 plus
4 plus 2 plus 1 is 23.

18
00:00:59,278 --> 00:01:02,226
Okay.
So, what does this have to do with bags?

19
00:01:02,226 --> 00:01:03,813
Here's a collection of 23 elements.

20
00:01:03,813 --> 00:01:06,260
And let's say I want to
throw them in to a bag.

21
00:01:06,260 --> 00:01:07,375
How do I do it?

22
00:01:07,375 --> 00:01:08,118
Here's an idea!

23
00:01:08,118 --> 00:01:10,370
Let's use pennants.

24
00:01:10,370 --> 00:01:11,856
So, you can see what I've done here.

25
00:01:11,856 --> 00:01:16,736
In the same way that you can take the
integer 23 and write it as a series or

26
00:01:16,736 --> 00:01:21,456
a sequence of powers of 2, I've taken
the items in the collection and

27
00:01:21,456 --> 00:01:24,028
I've grouped them into powers of 2.

28
00:01:24,028 --> 00:01:26,593
Now I'm going to need to
connect these in some way.

29
00:01:26,593 --> 00:01:27,758
So to do that,

30
00:01:27,758 --> 00:01:33,026
I'm going to use an array of pointers
to the roots of each pennant.

31
00:01:33,026 --> 00:01:36,182
And I'll use a null pointer for
the empty bit.

32
00:01:36,182 --> 00:01:37,949
Now, this array,
I'm going to give a special name.

33
00:01:37,949 --> 00:01:40,457
I'm going to call it a spine.

34
00:01:40,457 --> 00:01:44,056
So just as a brief recap,
I've taken my collection of elements.

35
00:01:44,056 --> 00:01:47,431
I've broken it up into these
power of two sized pennants.

36
00:01:47,431 --> 00:01:50,970
And I've connected them together with
this thing that I'm calling a spine
