1
00:00:00,180 --> 00:00:03,480
For now, let's assume everyone's friendly. There are lots of ways to do

2
00:00:03,480 --> 00:00:07,580
this. And building a robust scale of a web service is challenging. For now,

3
00:00:07,580 --> 00:00:10,095
what we're just going to do is set up a simple service running

4
00:00:10,095 --> 00:00:12,820
on our own machine. Depending on how your machine is set up, and your

5
00:00:12,820 --> 00:00:15,690
internet service provider, you might be able to create a server that other

6
00:00:15,690 --> 00:00:18,750
people can use that way. But we're not going to get into that now.

7
00:00:18,750 --> 00:00:21,560
If you do want to learn how to build a scalable, robust, externally

8
00:00:21,560 --> 00:00:25,262
hosted web service. Which I hope many of you will. I would strongly encourage

9
00:00:25,262 --> 00:00:28,796
you to take Steve Huffman's course on Web Application Engineering

10
00:00:28,796 --> 00:00:31,648
which is all about how to do that after you've finished

11
00:00:31,648 --> 00:00:33,942
this course. But, it turns out that setting up a

12
00:00:33,942 --> 00:00:37,662
simple service running on our own machine is surprisingly easy. We're

13
00:00:37,662 --> 00:00:40,328
going to do this by using a tool called web.py. Despite

14
00:00:40,328 --> 00:00:43,907
being simple and small it's still quite powerful. It was originally

15
00:00:43,907 --> 00:00:47,970
built as the web application framework to run Reddit. To install

16
00:00:47,970 --> 00:00:50,620
it all you need to do is use PIP which hopefully

17
00:00:50,620 --> 00:00:53,710
you have installed from unit nine. If not go back to unit nine

18
00:00:53,710 --> 00:00:57,240
to see how to install that or follow the links here. And install

19
00:00:57,240 --> 00:01:01,000
it like this and now we have the web module available to test

20
00:01:01,000 --> 00:01:04,599
in Python. Next I'm going to go a little bit backwards from what

21
00:01:04,599 --> 00:01:06,870
we usually do. I'm going to show you all the code that we

22
00:01:06,870 --> 00:01:09,850
need to get our search engine running as a web application and then

23
00:01:09,850 --> 00:01:11,820
I'll explain some parts of it. But I think you can figure out

24
00:01:11,820 --> 00:01:15,610
a lot yourself and please try and do that. So here's all the code.

25
00:01:15,610 --> 00:01:19,020
We're importing web.py. If you have the search engine

26
00:01:19,020 --> 00:01:22,395
code and you download this code, and you've installed the

27
00:01:22,395 --> 00:01:25,160
web.py module, you should be able to try this yourself

28
00:01:25,160 --> 00:01:27,170
and see that it actually is running a web service

29
00:01:27,170 --> 00:01:29,230
on your own machine. This code is in a

30
00:01:29,230 --> 00:01:33,130
file we'll call server.py. Then we construct the web server

31
00:01:33,130 --> 00:01:36,940
in a terminal by running python server.py, and we'll see

32
00:01:36,940 --> 00:01:40,460
that it prints out that it's listening on port 8080.

33
00:01:40,460 --> 00:01:42,910
And it's still running. Note that we haven't got a

34
00:01:42,910 --> 00:01:46,050
new terminal prompt yet. So let's try using a web

35
00:01:46,050 --> 00:01:50,070
browser, to see what it's doing. And here, you can

36
00:01:50,070 --> 00:01:53,640
use any browser you want; we'll use the Firefox browser.

37
00:01:53,640 --> 00:01:56,462
And we're going to make a request to the localhost.

38
00:01:56,462 --> 00:01:58,854
So we'll make a request to our local server, we

39
00:01:58,854 --> 00:02:02,020
can get to the localhost by doing all zeroes or

40
00:02:02,020 --> 00:02:06,600
we could do localhost. And the port number, 8080. And we

41
00:02:06,600 --> 00:02:08,940
send a request. We can see the server

42
00:02:09,940 --> 00:02:12,040
printed out a message, told us something happened. And

43
00:02:12,040 --> 00:02:15,260
that's done by the web.py code. It's telling us

44
00:02:15,260 --> 00:02:17,050
that we got a request. And we got a

45
00:02:17,050 --> 00:02:22,505
response none. We could do a more interesting request. This time I'll use

46
00:02:22,505 --> 00:02:28,350
localhost. And after the server and port.

47
00:02:28,350 --> 00:02:32,500
We can put the key word wer'e searching for. So let's search for hummus. And now

48
00:02:32,500 --> 00:02:36,530
we actually see the response from our lucky search. This

49
00:02:36,530 --> 00:02:40,390
is the response we get for hummus. If we try

50
00:02:40,390 --> 00:02:44,050
another keyword that doesn't exist in our index and we

51
00:02:44,050 --> 00:02:46,550
get none. You can see in the log, the two

52
00:02:46,550 --> 00:02:48,380
requests that came in and one was a get for

53
00:02:48,380 --> 00:02:51,130
hummus. One was get for wisdom. So if you've got

54
00:02:51,130 --> 00:02:52,580
that working, you're running a web server. You're running a

55
00:02:52,580 --> 00:02:57,520
web application that responds to queries. We're not going to

56
00:02:57,520 --> 00:03:00,650
deal with the complexities of making a nice form and

57
00:03:00,650 --> 00:03:04,760
providing a pretty output in this class but you've got

58
00:03:04,760 --> 00:03:06,700
the basic functionality of a web server up and running

59
00:03:06,700 --> 00:03:09,600
and you can do searches by putting them in the URL.
