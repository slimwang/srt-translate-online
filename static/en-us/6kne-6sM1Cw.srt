1
00:00:00,000 --> 00:00:04,000
Now if you have Python installed on your own machine,

2
00:00:04,000 --> 00:00:09,000
and you have some kind of a terminal or shell in which you can get a command prompt,

3
00:00:09,000 --> 00:00:15,000
you can type the command Python, and then give it the -m flag,

4
00:00:15,000 --> 00:00:22,000
which says module, and then load what's called the cProfile module--

5
00:00:22,000 --> 00:00:24,000
lowercase c, uppercase P.

6
00:00:24,000 --> 00:00:29,000
Then the name of your file that you want to profile.

7
00:00:29,000 --> 00:00:34,000
I called my cryptarithmetic file crypt.py.

8
00:00:34,000 --> 00:00:40,000
Execute that, and you'll get a nice table of where all the time goes.

9
00:00:40,000 --> 00:00:45,000
If you don't have Python installed or you can't run a command like this,

10
00:00:45,000 --> 00:00:47,000
you can do it from within Python.

11
00:00:47,000 --> 00:00:53,000
What you'll have to do is say import the c profile module,

12
00:00:53,000 --> 00:00:59,000
and then do cProfile.run and then a string to be evaluated,

13
00:00:59,000 --> 00:01:01,000
which is the code that you want to run.

14
00:01:01,000 --> 00:01:04,000
Then you'll see output that looks like this.

15
00:01:04,000 --> 00:01:09,000
In the right had column we see the various functions that are being called.

16
00:01:09,000 --> 00:01:13,000
Within my crypt program there are three main functions--solve, fill in, and valid.

17
00:01:13,000 --> 00:01:19,000
Then within the regular expression module, I was calling search and compile,

18
00:01:19,000 --> 00:01:23,000
and then there's various other built-in methods of Python,

19
00:01:23,000 --> 00:01:30,000
such as the string maketrans function, the eval function, and so on.

20
00:01:30,000 --> 00:01:34,000
These other columns tell us the number of times each of these functions was called,

21
00:01:34,000 --> 00:01:39,000
the total time spent, some percentage--we won't worry about that.

22
00:01:39,000 --> 00:01:42,000
That's time per call.

23
00:01:42,000 --> 00:01:48,000
Then the cumulative time, the total number of times spent there.

24
00:01:48,000 --> 00:01:54,000
Mostly I was just called solve. That was about 75 seconds.

25
00:01:54,000 --> 00:01:59,000
Within that 62.7 seconds when to valid, so that's where most the time is going.

26
00:01:59,000 --> 00:02:05,000
I should say that most of these results are pretty much what I was expecting.

27
00:02:05,000 --> 00:02:13,000
I was a little bit surprised that the re search too so much time--12 seconds out of the 75.

28
00:02:13,000 --> 00:02:18,000
I was also a little bit surprised that this maketrans

29
00:02:18,000 --> 00:02:22,000
and these other methods, the translate methods,

30
00:02:22,000 --> 00:02:25,000
took so little time--just about 3 seconds all together.

31
00:02:25,000 --> 00:02:31,000
If we want to make our program faster, it seems obvious that we'd better look where the time is.

32
00:02:31,000 --> 00:02:36,000
Out of that 75 seconds, 63 of it is within valid.

33
00:02:36,000 --> 00:02:39,000
That's where we have to look.

34
00:02:39,000 --> 00:02:43,000
Of valid, 47 seconds is within eval.

35
00:02:43,000 --> 00:02:45,000
If we want to make our program faster,

36
00:02:45,000 --> 00:02:50,000
it makes sense to concentrate our efforts on the parts where most of the time is.

37
00:02:50,000 --> 00:02:54,000
It's not just a good idea. It's the law.

38
00:02:54,000 --> 00:02:59,000
It's called the Law of Diminishing Returns.

39
00:02:59,000 --> 00:03:04,000
The way the law works, if we imagine our total execution time

40
00:03:04,000 --> 00:03:11,000
as being this bar here, and if we said that goes up to 75 seconds,

41
00:03:11,000 --> 00:03:15,000
63 of those seconds was taken up by the call to valid,

42
00:03:15,000 --> 00:03:21,000
and 10 seconds was taken up by fill in, and then all the rest by everything else.

43
00:03:21,000 --> 00:03:23,000
We can see if we want to make things faster.

44
00:03:23,000 --> 00:03:28,000
We'd better make this bar shorter or maybe this bar,

45
00:03:28,000 --> 00:03:30,000
and it won't help much to make these other bars shorter.

46
00:03:30,000 --> 00:03:36,000
For example, if we made fill in and everything else vanishingly small,

47
00:03:36,000 --> 00:03:43,000
then if we didn't touch valid we'd still have an execution time of 63 seconds,

48
00:03:43,000 --> 99:59:59,999
even if we could improve these infinitely fast and we wouldn't have helped all that much.
