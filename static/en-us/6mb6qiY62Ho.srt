1
00:00:00,002 --> 00:00:02,380
At the top of the conference.py file,

2
00:00:02,380 --> 00:00:05,702
you can see several imports
from models and settings.

3
00:00:05,702 --> 00:00:06,782
Let's take a look at this.

4
00:00:06,782 --> 00:00:08,757
First, let's take a look at models.py.

5
00:00:08,757 --> 00:00:11,592
The profile class extends ndb.Model and

6
00:00:11,592 --> 00:00:14,677
defines how the user
profile will look like.

7
00:00:14,677 --> 00:00:17,535
The next classes,
extend ProtoRPC messages and

8
00:00:17,535 --> 00:00:20,680
deal with sending data to and
from the endpoints app.

9
00:00:20,680 --> 00:00:24,245
ProfileForm mirrors the fields
of the profile class.

10
00:00:24,245 --> 00:00:28,183
ProfileMiniForm has only the two
fields that are editable by users and

11
00:00:28,183 --> 00:00:31,188
TeeShirtSize holds enum values for
tee shirt sizes,

12
00:00:31,188 --> 00:00:35,612
because we don't want users to be able
to enter free form values in that field.

13
00:00:35,612 --> 00:00:37,424
Let's go back to conference.py.

14
00:00:37,424 --> 00:00:41,825
Underneath all of these imports is
the definition of the endpoint.api.

15
00:00:41,825 --> 00:00:45,455
After that we've provided a couple
helper functions for creating and

16
00:00:45,455 --> 00:00:49,162
returning the profile object and
then we have the endpoint.methods.

17
00:00:49,162 --> 00:00:51,868
Let's take a look first at
the getProfile function.

18
00:00:51,868 --> 00:00:56,723
It's defined as an endpoints.method that
supports GET requests with no arguments.

19
00:00:56,723 --> 00:00:59,962
So, its request type is
message_type set VoidMessage.

20
00:00:59,962 --> 00:01:02,130
It's response type is ProfileForm and

21
00:01:02,130 --> 00:01:05,883
it calls the private method
self._doProfile with no arguments.

22
00:01:05,883 --> 00:01:10,668
What doProfile does if called with no
arguments is first, get the profile by

23
00:01:10,668 --> 00:01:16,378
calling self._getProfileFromUser and
then returning self._copyProfileToForm.

24
00:01:16,378 --> 00:01:19,765
We first want to develop and pass
the functionality of sending data to and

25
00:01:19,765 --> 00:01:22,276
from endpoints and
this is what is implemented here.

26
00:01:22,276 --> 00:01:25,832
We'll deal with indication and
saving data in data store later and for

27
00:01:25,832 --> 00:01:29,335
testing purposes, get profile from user,
return some dummy data.

28
00:01:29,335 --> 00:01:34,212
So getProfileFromUser creates an empty
profile object and returns it.

29
00:01:34,212 --> 00:01:38,486
And copyProfileToForm, then goes over
the message fields in ProfileForm and

30
00:01:38,486 --> 00:01:41,595
copies matching fields from
the provided profile object

31
00:01:41,595 --> 00:01:43,419
to ProfileForm message fields.

32
00:01:43,419 --> 00:01:45,055
You have to use getattr here,

33
00:01:45,055 --> 00:01:48,400
you can't just get the values
from using the fields by name.

34
00:01:48,400 --> 00:01:51,198
Also, note how the enum field
is handled slightly differently.

35
00:01:51,198 --> 00:01:55,392
Now, if we look at the getProfile
method in API's explorer,

36
00:01:55,392 --> 00:01:58,628
we'll see that it works
with the void request.

37
00:01:58,628 --> 00:02:01,167
And it actually returns
a response containing two fields,

38
00:02:01,167 --> 00:02:03,412
the ones that are defined
to have some sort of value.

39
00:02:03,412 --> 00:02:08,139
DisplayName, value Test and teeShirtSize
with a value of Not_Specified.
