1
00:00:00,420 --> 00:00:04,620
So for project two your first task and

2
00:00:04,620 --> 00:00:08,770
probably the biggest hurdle is getting
set up with GitHub and if you're new to

3
00:00:08,770 --> 00:00:13,170
GitHub we encourage you to take
our intro to Git and GitHub course.

4
00:00:13,170 --> 00:00:14,310
It's really fun.

5
00:00:14,310 --> 00:00:16,850
They did a, I love that class and
I think Caroline and

6
00:00:16,850 --> 00:00:18,250
Sarah did a really nice job.

7
00:00:18,250 --> 00:00:19,690
>> I agree.
>> It's been really helpful.

8
00:00:19,690 --> 00:00:20,870
I learned a lot actually.

9
00:00:20,870 --> 00:00:23,660
>> Me too.
>> I know a lot of tricks About GitHub

10
00:00:23,660 --> 00:00:24,690
and Git.

11
00:00:24,690 --> 00:00:28,930
But yeah, you gotta get your Git and
GitHub account set up.

12
00:00:28,930 --> 00:00:33,840
And then, you're going to fork the repo,
we have a starting point for

13
00:00:33,840 --> 00:00:35,350
that resume.

14
00:00:35,350 --> 00:00:37,790
And so, you're going to fork that.

15
00:00:37,790 --> 00:00:39,970
And that creates a repo of your own.

16
00:00:39,970 --> 00:00:42,960
And that's on your
GitHub account online.

17
00:00:42,960 --> 00:00:45,720
And once you have that repo online and

18
00:00:45,720 --> 00:00:49,020
you can have account you can clone
it to your computer or locally.

19
00:00:49,020 --> 00:00:52,560
So now you have your local clone and
can work on the code mostly.

20
00:00:52,560 --> 00:00:54,000
And then push your changes back.

21
00:00:56,300 --> 00:01:00,010
>> So Version Control, Durant, I'd
like to ask you, why Version Control?

22
00:01:00,010 --> 00:01:01,730
What's the point?

23
00:01:01,730 --> 00:01:05,300
>> Yeah, so Version Control
often if you want to be able

24
00:01:05,300 --> 00:01:08,570
to go back to an old version
of something you did before.

25
00:01:08,570 --> 00:01:11,900
Maybe you're trying different branches.

26
00:01:11,900 --> 00:01:15,860
You can try A and a B and
you can work them individually, and

27
00:01:15,860 --> 00:01:18,100
you can switch back and
forth between them.

28
00:01:18,100 --> 00:01:24,070
In the simplest case or even just
a single revision history.

29
00:01:24,070 --> 00:01:26,390
You can go back to a previous version.

30
00:01:26,390 --> 00:01:29,050
Let's say you like something
that you did before.

31
00:01:29,050 --> 00:01:33,030
And you want to go back to that you
decided the new way to test ways 

32
00:01:33,030 --> 00:01:33,800
when you are.

33
00:01:33,800 --> 00:01:38,000
Go back and especially in the course
they also talk about where if there's

34
00:01:38,000 --> 00:01:40,860
a bug that was introduced,
you want to go back and find it,

35
00:01:40,860 --> 00:01:42,340
figure out where that was.

36
00:01:42,340 --> 00:01:46,840
You can fix it and you can still keep
the whole history of everything you have

37
00:01:46,840 --> 00:01:47,825
and move forward from there.

38
00:01:47,825 --> 00:01:54,070
>> Okay, so and how important is it for

39
00:01:54,070 --> 00:01:56,480
you to learn version control
in the professional world,

40
00:01:56,480 --> 00:01:59,930
once you're working with other
people because, it's good if you're.

41
00:01:59,930 --> 00:02:05,348
There is an argument, and it's a fair
argument, that if you're just working

42
00:02:05,348 --> 00:02:10,681
on it by yourself, you can just copy old
files into a folder and say okay, this

43
00:02:10,681 --> 00:02:16,046
is my old version, and I'm just going
to copy and paste into another folder.

44
00:02:16,046 --> 00:02:18,448
Well I have another version
that it will work on.

45
00:02:18,448 --> 00:02:22,246
>> Right and that's a good point
especially because when we're working

46
00:02:22,246 --> 00:02:26,375
with other people, Version Control
will also track who made what changes.

47
00:02:26,375 --> 00:02:30,835
There's something funny called git blame
where you can figure out who introduced

48
00:02:30,835 --> 00:02:32,520
what into the stream of edits.

49
00:02:32,520 --> 00:02:38,110
So it's really good when
working with other people to

50
00:02:38,110 --> 00:02:44,200
be able to track alternative versions
of, whether it's code or even documents.

51
00:02:44,200 --> 00:02:46,980
So you go back that's pretty
much requirement working

52
00:02:46,980 --> 00:02:50,230
in any kind of production
environment with other people.

53
00:02:50,230 --> 00:02:51,250
And even by yourself.

54
00:02:51,250 --> 00:02:53,790
If you want to sort of have just

55
00:02:53,790 --> 00:02:59,130
trail of breadcrumbs just to sort of go
back and see what you did or what point.

56
00:02:59,130 --> 00:03:05,030
It's basically rewind the clock to go back
in time to find older versions of us.

57
00:03:05,030 --> 00:03:09,383
There's the only other way to do would
be to like name files, maybe version

58
00:03:09,383 --> 00:03:13,820
one, version two so you to have them
a very cluttered directory structure.

59
00:03:13,820 --> 00:03:17,707
These tools make it really easy
to first, create that trail so

60
00:03:17,707 --> 00:03:21,159
that you only see the current
files in that directory.

61
00:03:21,159 --> 00:03:24,358
So it keeps everything neat and
compact in your directory and

62
00:03:24,358 --> 00:03:27,390
then also makes a way you
can share with other people.

63
00:03:27,390 --> 00:03:28,930
Like through GitHub.

64
00:03:28,930 --> 00:03:29,920
>> Right, so that's interesting.

65
00:03:29,920 --> 00:03:35,326
Let's talk more about only
saving what you need.

66
00:03:35,326 --> 00:03:38,700
In git, versus because if you think
about Version Control you may be

67
00:03:38,700 --> 00:03:44,270
thinking well let me just save the whole
version, all the files, one at a time.

68
00:03:44,270 --> 00:03:49,650
I'll archive this folder for yesterday
and then I'll copy all the files and

69
00:03:49,650 --> 00:03:55,640
then I will also then make my changes
and copy all the files again.

70
00:03:55,640 --> 00:03:58,980
So what's the difference
between what GitHub does and

71
00:03:58,980 --> 00:04:01,130
if you want to do everything manually?

72
00:04:01,130 --> 00:04:04,040
>> Right so one thing, especially now
that you're mentioning multiple files.

73
00:04:04,040 --> 00:04:04,850
That's something else.

74
00:04:04,850 --> 00:04:06,060
It's incredibly important.

75
00:04:06,060 --> 00:04:08,330
Imagine you had two different versions,
and

76
00:04:08,330 --> 00:04:10,510
the files had to be
consistent with each other.

77
00:04:10,510 --> 00:04:13,280
So you can save all these
files together in one batch or

78
00:04:13,280 --> 00:04:15,150
all files together in another batch.

79
00:04:15,150 --> 00:04:17,990
And you know that when you save
if you save them to be consistent

80
00:04:17,990 --> 00:04:22,180
you can switch back and forth between
multiple files at the same time.

81
00:04:22,180 --> 00:04:27,160
>> So one cool thing is git it
doesn't necessary save all the file,

82
00:04:27,160 --> 00:04:28,800
it saves the differences.

83
00:04:28,800 --> 00:04:29,750
>> Yes, right.

84
00:04:29,750 --> 00:04:33,190
>> Right, so if you think about it,
it's actually genius.

85
00:04:33,190 --> 00:04:35,000
It's very efficient.

86
00:04:35,000 --> 00:04:41,232
So you don't care about
redundant lines of code.

87
00:04:41,232 --> 00:04:42,290
>> Mm-hm.
>> If you

88
00:04:42,290 --> 00:04:45,770
did not touch that line of code,
Git doesn't care about it.

89
00:04:45,770 --> 00:04:46,430
>> That's right, yeah.

90
00:04:46,430 --> 00:04:49,150
>> So, only if you change
certain lines of the code,

91
00:04:49,150 --> 00:04:51,020
Git will keep track of those changes.

92
00:04:51,020 --> 00:04:52,730
>> Yeah.
>> because it will assume that if you

93
00:04:52,730 --> 00:04:58,470
have a section of the code that you
don't touch it will do anything.

94
00:04:58,470 --> 00:05:02,330
It will just assume that it
will just be there forever.

95
00:05:02,330 --> 00:05:04,130
>> Yeah, it's super smart that way.

96
00:05:04,130 --> 00:05:07,720
And also you can view the differences
between each version.

97
00:05:07,720 --> 00:05:11,310
So instead of looking these
ginormous files you can see like

98
00:05:11,310 --> 00:05:13,700
he just changed these
lines versus those lines.

99
00:05:13,700 --> 00:05:16,450
Really helpful for trying to track down.

100
00:05:16,450 --> 00:05:21,430
>> Yeah, thanks for giving us the
overview of why GitHub is important, and

101
00:05:21,430 --> 00:05:23,990
gives you control.

102
00:05:23,990 --> 00:05:26,820
>> This particular tutorial is very

103
00:05:26,820 --> 00:05:29,040
helpful in just understanding
the basics of Git.

104
00:05:29,040 --> 00:05:32,430
Just the absolute high level
of what base commands are and

105
00:05:32,430 --> 00:05:34,790
what you need to do just
to get started off.

106
00:05:34,790 --> 00:05:36,420
The link is try.github.io it would have but

107
00:05:36,420 --> 00:05:40,520
[INAUDIBLE] the first level of the first challenge.

108
00:05:40,520 --> 00:05:43,610
And I spoke about this already now

109
00:05:43,610 --> 00:05:46,640
you can see it on my screen you
can see that there's, it's got

110
00:05:46,640 --> 00:05:50,170
a terminal it's got a version of file system then you can use.

111
00:05:50,170 --> 00:05:53,465
Just to see how changes have been made.

112
00:05:53,465 --> 00:05:57,020
So when you start off the first thing
you do is you want to create a git repo

113
00:05:57,020 --> 00:05:58,010
on your system.

114
00:05:58,010 --> 00:06:00,460
So that is done by a user

115
00:06:00,460 --> 00:06:03,740
the git init command which is
the initialization should be done.

116
00:06:03,740 --> 00:06:08,166
Once you enter that on your terminal
you will see that there will be a .git

117
00:06:08,166 --> 00:06:10,199
folder that will be generated and

118
00:06:10,199 --> 00:06:14,500
inside that you can see
a whole bunch of sub branches.

119
00:06:14,500 --> 00:06:19,062
You won't have to make any changes
to these, these are just used for

120
00:06:19,062 --> 00:06:22,600
the internal git workings so
in work the git in future.

121
00:06:22,600 --> 00:06:26,900
It will be it'll be using all of
these to make changes whenever needed.

122
00:06:26,900 --> 00:06:33,497
So once you created your Git repo
the next step is to do git status so

123
00:06:33,497 --> 00:06:37,506
git status can use periodically throughout your.

124
00:06:37,506 --> 00:06:39,910
Working with Git just to see
where your system lies and

125
00:06:39,910 --> 00:06:41,510
what you're working with right now.

126
00:06:41,510 --> 00:06:43,010
So many do git status.

127
00:06:43,010 --> 00:06:46,400
You will see that it tells you
that you're on the master branch.

128
00:06:46,400 --> 00:06:47,970
And there's nothing to commit.

129
00:06:47,970 --> 00:06:49,060
So again.

130
00:06:50,450 --> 00:06:53,530
[INAUDIBLE] that I said previously.

131
00:06:53,530 --> 00:06:57,140
The branch that will be on your system,
the local branch is called master and.

132
00:06:57,140 --> 00:06:59,430
Your remote branch
will be called origins.

133
00:06:59,430 --> 00:07:01,230
These are the default names.

134
00:07:03,470 --> 00:07:04,260
So, if you go ahead and

135
00:07:04,260 --> 00:07:09,070
add the octocat.txt file, as you
can see in the works of the system.

136
00:07:09,070 --> 00:07:11,080
If you add that into your Git folder and

137
00:07:11,080 --> 00:07:15,890
you do a git status again it'll
tell you that there's a new folder,

138
00:07:15,890 --> 00:07:19,960
I mean there's a new file, and
that it's an untracked file.

139
00:07:19,960 --> 00:07:21,680
So when a file's untracked,

140
00:07:21,680 --> 00:07:25,520
what it is basically telling you to
do is it means you commit that file.

141
00:07:25,520 --> 00:07:30,160
But before you do that it's
always good practice to stage it.

142
00:07:30,160 --> 00:07:32,170
Staging a file is essentially just

143
00:07:33,490 --> 00:07:37,920
a medium where you're confirming
that the file that you want to add

144
00:07:37,920 --> 00:07:42,130
into your directory is the correct
file and it has the right changes.

145
00:07:42,130 --> 00:07:46,256
So to do that we do Git add
and the name of the file and

146
00:07:46,256 --> 00:07:52,527
that will give you a comment saying that
the file is now on the staging area.

147
00:07:52,527 --> 00:07:54,504
Again you do a Git status just to.

148
00:07:54,504 --> 00:07:57,168
ensure that there are on the web so

149
00:07:57,168 --> 00:08:03,090
it does us that the Git file that
is added now needs to be commited.

150
00:08:03,090 --> 00:08:07,231
So once the file has been
staged by using Git add,

151
00:08:07,231 --> 00:08:13,760
you'll get to commit so as you can see
the work goes from git init.

152
00:08:13,760 --> 00:08:17,630
Then you git add and
then you git commit again.

153
00:08:18,940 --> 00:08:25,322
So you commit this file and
you see that it's been added.

154
00:08:25,322 --> 00:08:30,042
So this is the basic steps that you
need to follow to ensure that the file

155
00:08:30,042 --> 00:08:34,202
that you're working with gets
added on to the staging area and

156
00:08:34,202 --> 00:08:37,241
then gets committed into your code.

157
00:08:37,241 --> 00:08:44,721
And then, it's the same process
that goes over and over again.

158
00:08:44,721 --> 00:08:47,432
You will see that if you add more files.

159
00:08:47,432 --> 00:08:51,685
If you want to stage all these
files at the same time you can do

160
00:08:51,685 --> 00:08:57,646
a Git star,

161
00:08:57,646 --> 00:09:02,120
Git add.

162
00:09:02,120 --> 00:09:06,999
Star is a wildcard that says that any
files that have the .txt extension can

163
00:09:06,999 --> 00:09:08,110
be added.

164
00:09:08,110 --> 00:09:11,815
So I do that and that will ensure that
all the files that you've added

165
00:09:11,815 --> 00:09:14,670
into your Git folder
are now in the staging area.

166
00:09:14,670 --> 00:09:16,140
And then you can do
the exact same thing.

167
00:09:16,140 --> 00:09:17,770
You can commit them.

168
00:09:17,770 --> 00:09:21,131
To ensure that they go through
a staging area into your Git code.

169
00:09:23,220 --> 00:09:24,786
And there you go.

170
00:09:24,786 --> 00:09:31,050
So far we've seen git init,
git status, git add and git commit.

171
00:09:32,610 --> 00:09:35,440
After this,
there's another command called git log.

172
00:09:35,440 --> 00:09:39,210
A git log is, it's essentially if
you want to see more information for

173
00:09:39,210 --> 00:09:41,100
each commit, you can use git log.

174
00:09:41,100 --> 00:09:43,490
You can see more information for
each commit, we're going to use git log.

175
00:09:43,490 --> 00:09:47,560
You can see where the files are added or
where files are committed.

176
00:09:47,560 --> 00:09:50,520
Uphold the basic method for
that information.

177
00:09:50,520 --> 00:09:51,630
So if I do Git log,

178
00:09:51,630 --> 00:09:58,100
you will see that every commit has
a particular code associated with it.

179
00:09:58,100 --> 00:10:02,350
And it tells you who the author was,
what date it was, and

180
00:10:02,350 --> 00:10:04,620
what changes were made in each file.

181
00:10:04,620 --> 00:10:06,450
So this is,

182
00:10:06,450 --> 00:10:10,140
I was just giving you a quick
through of this particular tutorial.

183
00:10:10,140 --> 00:10:12,220
You can go ahead and use this.

184
00:10:12,220 --> 00:10:13,530
It's not going to take you more than,

185
00:10:13,530 --> 00:10:17,700
say twenty minutes to actually
go through this entire tutorial.

186
00:10:17,700 --> 00:10:22,650
It explains how to work with more
people's hardware, basic Git Branch.

187
00:10:22,650 --> 00:10:23,910
How to do a basic Git Merge.

188
00:10:23,910 --> 00:10:30,510
>> Let's just talk
about footer to GitHub.

189
00:10:30,510 --> 00:10:36,000
because I've also noticed some
people look confused between Git and GitHub.

190
00:10:36,000 --> 00:10:36,800
>> Okay.
All right.

191
00:10:36,800 --> 00:10:38,270
>> Let's talk about that.

192
00:10:38,270 --> 00:10:41,370
Let me clarify some questions.

193
00:10:41,370 --> 00:10:44,030
That I've noticed.

194
00:10:44,030 --> 00:10:44,710
>> Yeah yeah.

195
00:10:44,710 --> 00:10:49,181
>> So what is the difference between
Git and GitHub and do you need one or

196
00:10:49,181 --> 00:10:51,611
the other or can you use one without the other,

197
00:10:51,611 --> 00:10:56,026
yeah what's the typical workflow
if you're versioning things?

198
00:10:56,026 --> 00:10:59,790
>> Right,
the relationship is that Git is

199
00:10:59,790 --> 00:11:03,160
software that anyone can use anyone
can download, it's open source and

200
00:11:03,160 --> 00:11:05,830
you can host it from any
particular website that you want.

201
00:11:05,830 --> 00:11:10,960
GitHub is a particular company and their
business model is to host, right and

202
00:11:10,960 --> 00:11:15,260
to make some extra tools to
make it easier for a using kit.

203
00:11:15,260 --> 00:11:19,510
You can do everything on the command
line but with GitHub, they just have

204
00:11:19,510 --> 00:11:24,540
a really nice interface for posting
your projects and for downloading.

205
00:11:25,840 --> 00:11:27,470
Repositories, that sort of thing.

206
00:11:27,470 --> 00:11:32,380
>> Right so to Durant's point,
just want to drive this home.

207
00:11:32,380 --> 00:11:38,170
GitHub is just an online server
where you can just host your code,

208
00:11:38,170 --> 00:11:40,420
share your code and collaborate.

209
00:11:41,940 --> 00:11:46,906
Git is actually the system
itself, the actual command line

210
00:11:46,906 --> 00:11:51,783
system that you will learn in
our Udacity course.

211
00:11:51,783 --> 00:11:56,156
So that if there was this just a dry
content relationship you how often

212
00:11:56,156 --> 00:12:00,781
developers as they actually
developed locally on their machine.

213
00:12:00,781 --> 00:12:05,673
They use Git commands to
commit, save your versions and

214
00:12:05,673 --> 00:12:11,106
once they want to share their code,
once their code is done,

215
00:12:11,106 --> 00:12:15,467
they actually write
a command called Git push.

216
00:12:15,467 --> 00:12:20,180
They'll push this code to GitHub and
from GitHub you can

217
00:12:20,180 --> 00:12:24,993
then share your code and
then GitHub will have supporting

218
00:12:24,993 --> 00:12:30,280
functions to be able to help
you collaborate with people.

219
00:12:30,280 --> 00:12:35,060
Once you've shared it
people can then download

220
00:12:35,060 --> 00:12:39,735
your code onto to their own local
machine and then they'll work on it.

221
00:12:39,735 --> 00:12:44,465
And then, and if they say okay,
I have this great function,

222
00:12:44,465 --> 00:12:47,805
addition to your code,
I'm going to upload it to my GitHub and

223
00:12:47,805 --> 00:12:51,532
then I'm going to submit
what we call pull requests.

224
00:12:51,532 --> 00:12:55,062
Where we just merge and say okay I
think this is a really good feature.

225
00:12:55,062 --> 00:12:59,841
We should add it to the main code,

226
00:12:59,841 --> 00:13:05,062
that's people work in a nutshell.

227
00:13:05,062 --> 00:13:07,120
And on Git and GitHub.

228
00:13:07,120 --> 00:13:10,760
>> And even your GitHub repository, I've
heard people say that it's almost a,

229
00:13:10,760 --> 00:13:13,170
could almost be a substitute for
a resume or

230
00:13:13,170 --> 00:13:15,140
a CV, like you'll just give someone-
>> Good point, yeah.

231
00:13:15,140 --> 00:13:19,330
>> Your GitHub Repository and
say you these are all my projects.

232
00:13:19,330 --> 00:13:20,230
Look on to all my projects.

233
00:13:20,230 --> 00:13:22,680
>> Exactly.
>> It's good, the projects speak for

234
00:13:22,680 --> 00:13:25,520
themselves, they'll look at your code,
they could ask you questions about them.

235
00:13:26,560 --> 00:13:30,280
>> Yeah, they'll ask you questions and
they'll also, if you collaborate online,

236
00:13:30,280 --> 00:13:35,310
if you collaborate with
open source projects or

237
00:13:35,310 --> 00:13:39,620
other projects, they'll be able to see
how you work with other people online or

238
00:13:39,620 --> 00:13:42,170
how you collaborate
with other developers.

239
00:13:42,170 --> 00:13:47,270
And that's a very crucial skill
that they'll be looking at so.

240
00:13:48,400 --> 00:13:53,790
We highly encourage you to start your
GitHub account, and start using Git and

241
00:13:53,790 --> 00:13:57,080
start being comfortable with it,
because it will only help you.

242
00:13:58,430 --> 00:14:00,420
If you don't use Git, you can forget.

243
00:14:00,420 --> 00:14:00,970
>> Yeah, yeah.

244
00:14:00,970 --> 00:14:03,801
>> You forget what this command you.

245
00:14:03,801 --> 00:14:08,436
I'm thinking, okay,
I want to merge this branch but I have

246
00:14:08,436 --> 00:14:12,240
this past commit for mergin how
do you want to do it?

247
00:14:12,240 --> 00:14:17,420
>> Yeah, I think it is a complicated
system but Sarah and Caroline do a great

248
00:14:17,420 --> 00:14:22,170
job of clarifying it and showing
you some real world use cases for

249
00:14:22,170 --> 00:14:25,670
it so I definitely also work your
way through the Udacity course.

250
00:14:25,670 --> 00:14:28,380
It might be a struggle because if it's
new material it will be hard to get

251
00:14:28,380 --> 00:14:30,880
through, but
it should certainly help you out.

252
00:14:32,300 --> 00:14:35,330
>> Awesome, well an application
we just found, someone just

253
00:14:35,330 --> 00:14:40,900
programmed an interactive practice tool,
like a little tool to practice with Git.

254
00:14:40,900 --> 00:14:44,200
Let's just look at,
I don't know a Git commit.

255
00:14:44,200 --> 00:14:45,490
>> Git commit, let's do it.

256
00:14:45,490 --> 00:14:48,360
Okay so I click Git commit, and
here's a little diagram, and

257
00:14:48,360 --> 00:14:49,860
there's master and head.

258
00:14:49,860 --> 00:14:51,590
And if I just Git commit.

259
00:14:54,040 --> 00:14:56,880
And I Git commit again.

260
00:14:56,880 --> 00:14:58,760
You can see the diagram updating and

261
00:14:58,760 --> 00:15:01,110
master and
head move along with the head.

262
00:15:01,110 --> 00:15:01,700
>> Exactly.
>> Yeah.

263
00:15:01,700 --> 00:15:04,220
>> So it gives you a visual
representation of actually what's going

264
00:15:04,220 --> 00:15:07,530
on with your versions
because think of every circle

265
00:15:07,530 --> 00:15:09,380
as a version of
the whole entire project.

266
00:15:09,380 --> 00:15:11,940
>> Yeah.
>> So every circle is a commit.

267
00:15:11,940 --> 00:15:14,880
AKA, it's just the version
that you see it in.

268
00:15:14,880 --> 00:15:16,870
It's a snapshot of the past.

269
00:15:16,870 --> 00:15:18,240
Basically.

270
00:15:18,240 --> 00:15:22,330
And this is basically you can think
about Git as a time machine, capsule.

271
00:15:22,330 --> 00:15:27,900
You go to launch all these
commands to manage this time machine.

272
00:15:29,250 --> 00:15:31,640
So basically,
if everyone watches Doctor Who,

273
00:15:31,640 --> 00:15:33,040
it's kind of like your Tardis.

274
00:15:33,040 --> 00:15:37,150
Everyone's Tardis here in
the software development world.

275
00:15:37,150 --> 00:15:40,725
GitHub is the ability to
see everyone else's Tardis.

276
00:15:40,725 --> 00:15:44,638
And get access to their version control,

277
00:15:44,638 --> 00:15:49,890
their commits, and their code history.

278
00:15:49,890 --> 00:15:51,260
Yeah so play around with this.

279
00:15:51,260 --> 00:15:54,590
As you're learning the commands as
you're going through the course.

280
00:15:54,590 --> 00:15:56,780
Just come back to here,
this web page, and

281
00:15:56,780 --> 00:15:59,720
it will actually dynamically
build this diagram for you.

282
00:15:59,720 --> 00:16:00,562
>> Yeah.
>> So cool Mark sent that

283
00:16:00,562 --> 00:16:03,270
to the rest of us today.

284
00:16:03,270 --> 00:16:03,810
Thanks Mark.
