1
00:00:00,000 --> 00:00:02,000
Okay, this is the unit 4 homework solution.

2
00:00:02,000 --> 00:00:05,000
To recap, the first thing I wanted to do
is make a registration page.

3
00:00:05,000 --> 00:00:09,000
This should look basically like the
homework 2, where we made the form.

4
00:00:09,000 --> 00:00:12,000
So if you type in some junk, we get
the same error messages,

5
00:00:12,000 --> 00:00:16,000
and if you type in a valid username and
password, and you submit,

6
00:00:16,000 --> 00:00:21,000
you get redirected to this welcome page, that says, 
welcome and then has the username in it,

7
00:00:21,000 --> 00:00:25,692
and the username this time is 
not included as a get parameter.

8
00:00:25,692 --> 00:00:27,876
It's actually included in a cookie,

9
00:00:27,876 --> 00:00:31,000
and I'm using this little cookie extension in 
Chrome so I can see the cookies,

10
00:00:31,000 --> 00:00:32,768
and in this case, you can see it included.

11
00:00:32,768 --> 00:00:34,000
This is supposed to be the user id 5.

12
00:00:34,000 --> 00:00:38,000
That is the hash of that as we 
discuss that technique in the lesson.

13
00:00:38,000 --> 00:00:41,000
So let's look at the code for the first problem.

14
00:00:41,000 --> 00:00:44,000
Once you solve this first registration 
part of the homework,

15
00:00:44,000 --> 00:00:47,000
the other 2 parts of the problem are 
very easy because they just kind of build

16
00:00:47,000 --> 00:00:50,000
on the same code, so we're going to be going 
through a lot of code here for this first part.

17
00:00:50,000 --> 00:00:54,000
The first thing I have is I have a secret,
which is just this random string

18
00:00:54,000 --> 00:00:56,892
that we're going to use as our
hash secret for cookies.

19
00:00:56,892 --> 00:00:59,000
Normally I wouldn't store this in the 
same file as my code,

20
00:00:59,000 --> 00:01:03,000
I'd probably store it in some other module
that's only on the production machines

21
00:01:03,000 --> 00:01:04,000
or something like that,

22
00:01:04,000 --> 00:01:06,000
but for our purposes, it's fine just to stick it in here.

23
00:01:06,000 --> 00:01:09,000
Again, a lot of this code you've seen
before, template directory stuff.

24
00:01:09,000 --> 00:01:11,000
Here are 2 functions.

25
00:01:11,000 --> 00:01:14,876
You basically had quiz problems in 
the lesson for generating these functions

26
00:01:14,876 --> 00:01:19,000
for making a secure val, which takes a val
and just returns that value--a pipe,

27
00:01:19,000 --> 00:01:21,846
and then the hmac of that val.

28
00:01:21,846 --> 00:01:24,000
We did this in the lesson, so 
you should be familiar with this.

29
00:01:24,000 --> 00:01:28,000
and then the function for taking one of 
those secure vals and making sure it's valid.

30
00:01:28,000 --> 00:01:29,000
We split on the pipe.

31
00:01:29,000 --> 00:01:33,000
If a call makes a secure val on the value
we pulled out of the string,

32
00:01:33,000 --> 00:01:37,000
if it matches that string itself, it's valid.

33
00:01:37,000 --> 00:01:38,000
You've seen this functions.

34
00:01:38,000 --> 00:01:39,646
We did them in quizzes and we're going
to be using them in here.

35
00:01:39,646 --> 00:01:41,000
Here is this bloghandler.

36
00:01:41,000 --> 00:01:44,353
This is the class I've been using, kind 
of a parent class for all of my handlers.

37
00:01:44,353 --> 00:01:46,000
I added some more functions.

38
00:01:46,000 --> 00:01:48,000
Write, render, stern, render--those are old.

39
00:01:48,000 --> 00:01:52,000
I've added a function called set<u>secure</u>cookie,

40
00:01:52,000 --> 00:01:56,000
which basically sets a cookie whose
name is name and whose value is val.

41
00:01:56,000 --> 00:02:01,000
All it does is it basically gets the secure, 
calls make<u>secure</u>val on this val,

42
00:02:01,000 --> 00:02:03,000
and then it stores that in a cookie.

43
00:02:03,000 --> 00:02:06,000
and we store a cookie by just using 
'Set-Cookie' header,

44
00:02:06,000 --> 00:02:10,000
and say name = val. Path = /.

45
00:02:10,000 --> 00:02:13,000
We could also include an expires time, 
but I didn't here so by default these cookies

46
00:02:13,000 --> 00:02:16,000
are going to expire when we close the 
browser, which is fine for our purposes.

47
00:02:16,000 --> 00:02:19,000
Then we have another function for 
reading a secure cookie.

48
00:02:19,000 --> 00:02:22,000
You give it a name, and if finds 
that cookie in the request.

49
00:02:22,000 --> 00:02:28,000
If that cookie exists, and that 
cookie passes check<u>secure</u>val,

50
00:02:28,000 --> 00:02:30,000
we return cookie_val,

51
00:02:30,000 --> 00:02:33,000
In Python you can use this kind of 
shortcut notation for saying,

52
00:02:33,000 --> 00:02:39,000
it's the equivalent of writing, if cookie<u>val 
and check</u>secure<u>val, return cookie</u>val.

53
00:02:39,000 --> 00:02:42,557
If 1 of these is false, we just return 
false or none or whatever.

54
00:02:42,557 --> 00:02:44,000
We've got this function login.

55
00:02:44,000 --> 00:02:46,000
This will be used for the second part of the
homework for actually doing logins,

56
00:02:46,000 --> 00:02:47,000
and this just sets the cookie,

57
00:02:47,000 --> 00:02:51,000
and we've got a function logout, which I 
believe is the third homework question.

58
00:02:51,000 --> 00:02:52,000
We'll come back to these.

59
00:02:52,000 --> 00:02:54,000
I added this function initialize.

60
00:02:54,000 --> 00:02:55,000
You don't strictly need this.

61
00:02:55,000 --> 00:02:59,000
Google App Engine is a function that 
gets called before every request,

62
00:02:59,000 --> 00:03:04,000
and so what I have it do is check for the 
user cookie, which was called user_id.

63
00:03:04,000 --> 00:03:10,000
If it exists, store in self.user the actual user object, 
which we'll get to this in a second.

64
00:03:10,000 --> 00:03:13,000
Now you don't have to do this, but I kind 
of did the more complicated route

65
00:03:13,000 --> 00:03:17,000
where you have to login to enter things into 
the blog, and it keeps track of all the blog pages

66
00:03:17,000 --> 00:03:19,000
where the user is and that sort of thing,

67
00:03:19,000 --> 00:03:21,000
so if you're going to have that structure where
once you're logged in every page

68
00:03:21,000 --> 00:03:24,000
is a little bit different, it's handy to have
some sort of function like this

69
00:03:24,000 --> 00:03:28,000
that gets run on every request and just 
checks to see if the user is logged in or not.

70
00:03:28,000 --> 00:03:33,000
That's what this initialize function does, and this 
function is called by the App Engine framework.

71
00:03:33,000 --> 00:03:36,000
So we still have some of our blog stuff.

72
00:03:36,000 --> 00:03:38,000
I've been doing all the
homeworks on the same file,

73
00:03:38,000 --> 00:03:40,000
so you'll see some of the other homeworks in here.

74
00:03:40,000 --> 00:03:41,000
We have this function make_salt.

75
00:03:41,000 --> 00:03:45,000
This was a quiz function, just to make a string of 5 letters.

76
00:03:45,000 --> 00:03:47,000
So that's what this does. This makes our salt.

77
00:03:47,000 --> 00:03:51,000
This function was also a quiz function, I believe,
for making a password hash.

78
00:03:51,000 --> 00:03:56,000
It takes a username and a password and
an optional parameter for salt,

79
00:03:56,000 --> 00:04:03,000
and then returns the salt, the hash version
of the name, password, and salt.

80
00:04:03,000 --> 00:04:05,000
This is what we store in the database.

81
00:04:05,000 --> 00:04:08,000
Then we have this other function, also
a quiz question from the lecture

82
00:04:08,000 --> 00:04:09,000
of how to verify a password.

83
00:04:09,000 --> 00:04:12,000
So it takes a name and a password 
and the value in the database,

84
00:04:12,000 --> 00:04:16,000
and it makes sure the hash from the 
database matches the new hash created

85
00:04:16,000 --> 00:04:18,000
based on what the user entered in.

86
00:04:18,000 --> 00:04:19,000
Again, quiz question. You've seen that before.

87
00:04:19,000 --> 00:04:25,000
Users_key--this creates the ancestor element in
the database to store all of our users.

88
00:04:25,000 --> 00:04:27,000
Again, you don't have to do this.

89
00:04:27,000 --> 00:04:28,000
I like to have things a little bit organized,

90
00:04:28,000 --> 00:04:32,000
so again, I gave it a parameter and thinking maybe 
I'll have user groups in the future.

91
00:04:32,000 --> 00:04:34,000
I don't right now. That's just how I did it.

92
00:04:34,000 --> 00:04:36,000
Okay, so now we get to some interesting code.

93
00:04:36,000 --> 00:04:40,000
This is our user objects that we'll 
be storing in the database.

94
00:04:40,000 --> 00:04:43,000
so it inherits from db_model that's what 
makes it a data store object.

95
00:04:43,420 --> 00:04:44,567
and it has three parameters:

96
00:04:44,567 --> 00:04:47,102
it has a name, which is a string
property, required,

97
00:04:47,102 --> 00:04:49,960
a password hash, which is a 
string property, also required,

98
00:04:49,960 --> 00:04:53,290
and an e-mail, which is a string
property, but not required.

99
00:04:53,290 --> 00:04:55,446
Now, remember, we don't actually 
store passwords in the database,

100
00:04:55,446 --> 00:04:58,718
we just store hash of the password. 
We can't grade that, we can't tell

101
00:04:58,718 --> 00:05:02,162
how you're storing stuff in the database,
well, we could, but you would have to

102
00:05:02,162 --> 00:05:05,294
write some other handlers or something...

103
00:05:05,294 --> 00:05:09,165
But this is how I'm doing it. 
And then I added a couple of functions

104
00:05:09,165 --> 00:05:13,275
on this class. They are kind of

105
00:05:13,275 --> 00:05:16,405
convenience functions. 
The syntax here, @classmethod

106
00:05:16,405 --> 00:05:19,679
this is called a decorator. I'm not
going to get into exactly what decorators

107
00:05:19,679 --> 00:05:25,919
are, but what classmethod does, is it says:
you can call this method, on this object.

108
00:05:25,919 --> 00:05:29,923
It doesn't have to be instance of this object.
So normally you would say the first parameter

109
00:05:29,923 --> 00:05:33,234
on a method on a class itself, 
that's referring to yourself,

110
00:05:33,234 --> 00:05:37,263
that instance. In this case I call it 
"cls" for "class", which means it's

111
00:05:37,263 --> 00:05:43,842
referring to this class user, not an
actual instance of a user, these are objects

112
00:05:43,842 --> 00:05:49,405
So we can just say, user.byid, give it an ID,
and then we'll call this get<u>by</u>id function

113
00:05:49,405 --> 00:05:53,169
to load the user on to the database.
Get<u>by</u>id is built into the datastore.

114
00:05:53,169 --> 00:05:56,597
If you recall from a previous homework, 
I had this kind of "make key" thing,

115
00:05:56,597 --> 00:05:59,511
and just called the "get" function, but 
that was before I learned about this

116
00:05:59,511 --> 00:06:03,826
get<u>by</u>id function, which is a more convenient
way of doing what we are doing now.

117
00:06:03,826 --> 00:06:06,823
I have another function called by_name, 
which looks up a user by its name.

118
00:06:06,823 --> 00:06:10,513
I'm using the datastore procedural code 
again for doing the database look up,

119
00:06:10,513 --> 00:06:14,302
instead of the GQL, because I prefer typing 
this, I think it's a little bit easier to read,

120
00:06:14,302 --> 00:06:18,220
and all you do is, you say, 
filter(name =', and then you can

121
00:06:18,220 --> 00:06:21,797
give it another parameter, so this basically 
says, "select * from user, where

122
00:06:21,797 --> 00:06:26,016
name = name." We call "get" on that, 
which returns the first instance,

123
00:06:26,016 --> 00:06:27,292
It returns that.

124
00:06:27,292 --> 00:06:31,258
Another function I've added is this 
method called register, which takes

125
00:06:31,258 --> 00:06:34,016
a name, a password, and and e-mail, 
and creates a new user object.

126
00:06:34,016 --> 00:06:37,681
So the first thing it does is create 
a password hash for that name

127
00:06:37,681 --> 00:06:41,225
and password, and then it creates a 
user object. The parent is that user key,

128
00:06:41,225 --> 00:06:45,466
not required for you guys, 
name = name, pw<u>hash = pw</u>hash

129
00:06:45,466 --> 00:06:49,953
email = email. So that creates the
user. It doesn't actually store it

130
00:06:49,953 --> 00:06:52,227
in the database yet. 
It just creates the object.

131
00:06:52,227 --> 00:06:56,111
And here's another one, called "login". 
We'll come back to this one, but

132
00:06:56,111 --> 00:06:58,145
it's fairly self-explanatory, 
for the future homework.

133
00:06:58,145 --> 00:07:01,015
So now, let's go down to the handlers. 
You can see I've added three handlers

134
00:07:01,015 --> 00:07:03,852
for each of these three homework problems.
The first one we'll talk about is "signup",

135
00:07:03,852 --> 00:07:07,340
so /signup goes to the register handler,
let's take a look at that.

136
00:07:07,340 --> 00:07:10,891
Now, the register handler here 
inherits from the class "Signup".

137
00:07:10,891 --> 00:07:15,854
"Signup" is actually up here, 
and it's identical to what I had

138
00:07:15,854 --> 00:07:19,073
or, nearly identical to what I had
for the homework 2. Since I'm

139
00:07:19,073 --> 00:07:22,422
working in the same file I didn't want to
rewrite this whole class again.

140
00:07:22,422 --> 00:07:25,513
We are still rendering signup form, 
like we were before. We are still,

141
00:07:25,513 --> 00:07:28,445
I'm not going to go through this in great 
detail, but we still get all the values

142
00:07:28,445 --> 00:07:32,238
out of the request, we still check
to see if they are all valid, and

143
00:07:32,238 --> 00:07:35,783
if there is an error, we re-render the form, 
with the error messages and the values,

144
00:07:35,783 --> 00:07:39,445
just like we did before, and if there's
not an error, I call self.done,

145
00:07:39,445 --> 00:07:44,389
which in this class "Signup", doesn't do
anything, it just raises an error.

146
00:07:44,389 --> 00:07:48,236
And then I have two other classes that inherit
from "Signup" and overwrite this function

147
00:07:48,236 --> 00:07:53,433
"done". The first one is the Unit 2 "Signup" page,
and all that one does is, it redirects this

148
00:07:53,433 --> 00:07:56,935
/unit2welcome with the "get" parameter.
That's how we did the Unit 2 homework.

149
00:07:56,935 --> 00:07:59,676
The "register" one overwrites 
"done" to have different behavior.

150
00:07:59,676 --> 00:08:03,230
First, what it does, there's an extra 
error that can occur in this one,

151
00:08:03,230 --> 00:08:07,223
in that the user can already exist, 
so what I do is I look up to see,

152
00:08:07,223 --> 00:08:11,399
"does that username already exist?"
And if it does, send an error message

153
00:08:11,399 --> 00:08:14,000
and I re-render that form.
error_username = msg, so

154
00:08:14,000 --> 00:08:17,027
I probably could have done this a little 
bit more cleanly, but this is kind of just

155
00:08:17,027 --> 00:08:22,066
tax on an extra message, so this doesn't
appear to preserve the parameters

156
00:08:22,066 --> 00:08:25,204
if you enter in a different username.
It's a little bit less than ideal, I probably

157
00:08:25,204 --> 00:08:27,216
could have put some more things in there, 
but that's how we have it.

158
00:08:27,216 --> 00:08:31,135
Otherwise, if that error doesn't exist
we register the user, which creates

159
00:08:31,135 --> 00:08:33,130
a user object, and we actually store it 
in the database here.

160
00:08:33,130 --> 00:08:37,210
And then, what I do is, I call my "Login"
function, all the "Login" function does is

161
00:08:37,210 --> 00:08:40,044
set the cookies. So, for the first homework
we may not have a "Login" function,

162
00:08:40,044 --> 00:08:43,419
you may actually just set the cookie here, and 
then we redirect it to the welcome page.

163
00:08:43,419 --> 00:08:46,385
But then I generalized it, when I did the 
"Login" version, and just made this work,

164
00:08:46,385 --> 00:08:50,933
this "login" function that multiple handlers 
can use, because we will have both the

165
00:08:50,933 --> 00:08:55,767
Sign up page for registering and signing in, 
and then we'll have just the "Login page",

166
00:08:55,767 --> 00:08:59,486
not for creating a new user, but signing
into an old one, and they can both use this

167
00:08:59,486 --> 00:09:02,351
"Login" function, and we'll go 
over that in a second.

168
00:09:02,351 --> 00:09:06,130
We redirect to /unit3welcome, 
which is down here, this handler,

169
00:09:06,130 --> 00:09:09,350
Unit3Welcome, and all this does is, 
it checks to see if self.user, and

170
00:09:09,350 --> 00:09:13,303
remember self.user gets set up in that 
initialize function, that's where it

171
00:09:13,303 --> 00:09:16,559
reads the cookie and makes sure that
the cookie is valid and sets the user

172
00:09:16,559 --> 00:09:20,310
on the handler, and since this 
Unit3Welcome inherits from BlogHandler,

173
00:09:20,310 --> 00:09:24,104
it has access to that user, we render
our Welcome HTML, you can probably

174
00:09:24,104 --> 00:09:27,440
guess what's in there. With 
username = self.user.name,

175
00:09:27,440 --> 00:09:29,276
Otherwise, we redirect to the Signup.

176
00:09:29,276 --> 00:09:32,276
Let's see that working one more time, 
again, now that you've seen the code.

177
00:09:32,276 --> 00:09:36,105
Okay, so if we enter a username
and a password, we should actually

178
00:09:36,105 --> 00:09:38,863
get an error message that this 
username already exists. And we do.

179
00:09:38,863 --> 00:09:42,283
And it cleared the form, because
I was a little bit lazy on this one,

180
00:09:42,283 --> 00:09:46,033
and didn't preserve all those parameters.
Although I easily could have, so,

181
00:09:46,033 --> 00:09:48,891
let's type a new username, and 
submit the form, and it worked!

182
00:09:48,891 --> 00:09:53,050
And if I were to, on this page, 
modify this cookie, change it to

183
00:09:53,050 --> 00:09:57,470
user id 5, which is what we had before, 
and I were to reload this page,

184
00:09:57,470 --> 00:10:00,812
we get redirected to the signup page, 
because the value in that cookie

185
00:10:00,812 --> 00:10:04,041
doesn't match the hash in that cookie, 
therefore is invalid, and we

186
00:10:04,041 --> 00:10:08,041
get bounced to the signup page.
So that is the first question in this homework.
