1
00:00:00,000 --> 00:00:02,000
In the lucky search problem, we have 3 inputs.

2
00:00:02,000 --> 00:00:08,000
The index, which is a hash table of all the keywords in the pages in which they appear.

3
00:00:08,000 --> 00:00:13,000
We have the ranks, which rank each page based on the URank algorithm

4
00:00:13,000 --> 00:00:15,000
that we discussed in lecture.

5
00:00:15,000 --> 00:00:18,000
And then we have the keyword we are searching for.

6
00:00:18,000 --> 00:00:21,000
The output is going to be the highest ranking page with that keyword.

7
00:00:21,000 --> 00:00:25,000
The steps to solve this can briefly be summarized as follows.

8
00:00:25,000 --> 00:00:29,000
We're going to go through every page that contains the keyword,

9
00:00:29,000 --> 00:00:33,000
and we're just going to find the page with the maximum rank.

10
00:00:33,000 --> 00:00:35,000
So we're going to find a maximum.

11
00:00:35,000 --> 00:00:37,000
It sounds pretty simple, but it's actually a few lines of code.

12
00:00:37,000 --> 00:00:38,000
So let's go right to the ID.

13
00:00:38,000 --> 00:00:43,000
So the first thing we're going to do is get the pages from the index with that keyword.

14
00:00:43,000 --> 00:00:46,000
If there aren't any pages, then we're going to return none,

15
00:00:46,000 --> 00:00:51,000
and if there's at least 1 page, we're going to say for now the best_page is the first one.

16
00:00:51,000 --> 00:00:55,000
And we're going to iterate through each page in the pages list,

17
00:00:55,000 --> 00:00:57,000
updating our best_page accordingly.

18
00:00:57,000 --> 00:01:02,000
So if the rank of the candidate page, the page that we're iterating through,

19
00:01:02,000 --> 00:01:07,000
is greater than the rank of our best_page, we're going to update our best_page.

20
00:01:07,000 --> 00:01:10,000
Once we're done, we're going to return the best_page.
