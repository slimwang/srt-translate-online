1
00:00:00,012 --> 00:00:02,896
So now we know that threads can access each others' results

2
00:00:02,896 --> 00:00:04,560
through shared and global memory.

3
00:00:04,560 --> 00:00:07,918
This means they can work together on a computation, but there's a problem.

4
00:00:07,918 --> 00:00:11,532
What if a thread tries to read a result before another thread

5
00:00:11,532 --> 00:00:13,490
has had a chance to compute or write it?

6
00:00:13,490 --> 00:00:15,749
This means we need synchronization.

7
00:00:15,749 --> 00:00:19,323
Threads need to synchronize with each other to avoid this situation.

8
00:00:19,323 --> 00:00:21,464
This need for synchronization

9
00:00:21,464 --> 00:00:24,594
is really one of the most fundamental problems in parallel computing.

10
00:00:24,594 --> 00:00:27,668
Now the simplest form of synchronization is called a barrier.

11
00:00:27,668 --> 00:00:29,966
A barrier is a point in the program

12
00:00:29,966 --> 00:00:32,636
where all the threads stop and wait.

13
00:00:32,636 --> 00:00:35,035
When all the threads have reached the barrier,

14
00:00:35,035 --> 00:00:37,741
they can proceed on to the rest of the code.

15
00:00:37,741 --> 00:00:39,683
Let's illustrate this.

16
00:00:39,683 --> 00:00:42,912
Here's some threads and they're all proceeding along through to code.

17
00:00:42,912 --> 00:00:45,041
I'll draw them in different colors,

18
00:00:45,041 --> 00:00:46,719
and I'm also drawing them different lengths

19
00:00:46,719 --> 00:00:49,416
so that you get the idea that they're at different places in the code.

20
00:00:49,416 --> 00:00:52,389
They're at different points in their execution of the program.

21
00:00:52,389 --> 00:00:54,871
The idea is that when they reach the barrier,

22
00:00:54,871 --> 00:00:57,121
they're going to stop and wait for all the others to catch up.

23
00:00:57,121 --> 00:01:02,866
So in my drawing, the red one reaches the barrier first and stops.

24
00:01:02,866 --> 00:01:07,938
In the meantime, the blue one is proceeding along, and the green one is proceeding along,

25
00:01:07,938 --> 00:01:10,500
and eventually the blue one arrives at the barrier

26
00:01:10,500 --> 00:01:12,407
and stops,

27
00:01:12,407 --> 00:01:16,379
and the green one is the last one to arrive at the barrier and stops.

28
00:01:16,379 --> 00:01:20,017
And now all 3 threads--in my example, say I only have 3 threads.

29
00:01:20,017 --> 00:01:24,618
Now that all of the threads have arrived at the barrier, then they're all free to go again.

30
00:01:24,618 --> 00:01:28,533
And so they'll all proceed again, and we don't actually know which one's going to go first.

31
00:01:28,533 --> 00:01:30,667
It might be that the blue one is the first out of the gate,

32
00:01:30,667 --> 00:01:33,930
maybe green is next, maybe red is last.

33
00:01:33,930 --> 00:01:37,225
So let's look at some code to illustrate this.
