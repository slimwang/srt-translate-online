1
00:00:00,000 --> 00:00:02,698
So let's take a look at the use of operators to

2
00:00:02,698 --> 00:00:06,155
support Range Queries. Let me show you what I mean. MongoDB

3
00:00:06,155 --> 00:00:09,809
provides several inequality operators that enable us to perform this type

4
00:00:09,809 --> 00:00:13,720
of query. The inequality operators we may use include greater than,

5
00:00:13,720 --> 00:00:16,000
less than, greater than or equal to, less than or equal

6
00:00:16,000 --> 00:00:18,530
to, or not equal to. There are also a couple that

7
00:00:18,530 --> 00:00:21,520
are designed for querying array fields. We'll talk about those in

8
00:00:21,520 --> 00:00:25,170
a later lesson. Now let's look at some queries against our cities

9
00:00:25,170 --> 00:00:29,530
collection that provide examples of using inequality operators. Okay.

10
00:00:29,530 --> 00:00:31,980
So imagine that we want to query for all

11
00:00:31,980 --> 00:00:35,850
cities with the population greater than a quarter million.

12
00:00:35,850 --> 00:00:38,810
Instead of specifying an exact number here, as the value

13
00:00:38,810 --> 00:00:41,030
for our query document, which is going to be passed

14
00:00:41,030 --> 00:00:44,090
to find here, or instead going to use the greater

15
00:00:44,090 --> 00:00:47,654
than operator and the value of population in a

16
00:00:47,654 --> 00:00:50,540
query document it's going to be a sub document using

17
00:00:50,540 --> 00:00:53,986
that operator. We can specify a more constrained range

18
00:00:53,986 --> 00:00:57,070
for a query like this using an additional operator.

19
00:00:57,070 --> 00:00:58,560
Now this example is very similar to what we

20
00:00:58,560 --> 00:01:01,970
just looked at, the only difference being that in the

21
00:01:01,970 --> 00:01:05,099
value for population in our query document we're specifying

22
00:01:05,099 --> 00:01:08,320
an additional operator of less than or equal to 500,000.

23
00:01:08,320 --> 00:01:12,430
Thus defining a more constrained range for this query

24
00:01:12,430 --> 00:01:15,970
here. Now this type of range based query works across

25
00:01:15,970 --> 00:01:18,680
many different data types. We can do something

26
00:01:18,680 --> 00:01:22,070
similar for strings. So here, the semantics of this

27
00:01:22,070 --> 00:01:24,350
range are give us all city names that begin

28
00:01:24,350 --> 00:01:26,670
with x. Let's go ahead and run this code.

29
00:01:28,910 --> 00:01:30,270
And here we can see that in the results we

30
00:01:30,270 --> 00:01:34,160
get back. Looks like we're getting back cities that just begin

31
00:01:34,160 --> 00:01:37,920
with the letter X. Total match of 22 cities out of

32
00:01:37,920 --> 00:01:41,130
the 20,000 or so that are in this collection. Okay, let's

33
00:01:41,130 --> 00:01:43,610
look at our code again. We can also do this

34
00:01:43,610 --> 00:01:48,170
type of query against dates. Here we're specifying a Python date

35
00:01:48,170 --> 00:01:51,160
as the lower and upper bound, and so here we're looking

36
00:01:51,160 --> 00:01:53,940
for all cities that have a founding date sometime in the

37
00:01:53,940 --> 00:01:58,810
year 1837. And actually, to be precise here, we should really have

38
00:01:58,810 --> 00:02:02,440
this be greater than or equal to. Okay, now let's run this.

39
00:02:04,600 --> 00:02:08,500
Okay, and we get three cities that match. We can see that the founding date here

40
00:02:08,500 --> 00:02:13,970
seems to be within range, as it is here, and also here, for the city of

41
00:02:13,970 --> 00:02:17,330
Chicago. Finally, we can also do things like

42
00:02:17,330 --> 00:02:19,800
use the not equals operator to for example

43
00:02:19,800 --> 00:02:21,700
in this case, find all cities with a

44
00:02:21,700 --> 00:02:23,940
country that's not equal to the United States.
