1
00:00:00,000 --> 00:00:03,000
An important part of being a software engineer is designing good data structures.

2
00:00:03,000 --> 00:00:06,000
This question asks us, how do we modify our index

3
00:00:06,000 --> 00:00:11,000
so that we can track the number of times users click a link for a given keyword?

4
00:00:11,000 --> 00:00:16,000
This allows us to sort the results in our search engine based on how popular the links are.

5
00:00:16,000 --> 00:00:18,000
Let's go through the choices one by one

6
00:00:18,000 --> 00:00:21,000
and come up with some examples to see the effects those choices can have

7
00:00:21,000 --> 00:00:24,000
on an implemented search engine.

8
00:00:24,000 --> 00:00:27,000
Given this is an answer choice, it may be a little hard to reason about what it would look like

9
00:00:27,000 --> 00:00:29,000
if you actually used it in your search engine,

10
00:00:29,000 --> 00:00:31,000
so let's come up with an example.

11
00:00:31,000 --> 00:00:34,000
The keyword "andy" is associated with 2 URLs:

12
00:00:34,000 --> 00:00:37,000
"udacity.com" and "searchwithpeter.info"

13
00:00:37,000 --> 00:00:41,000
and the keyword "irvin" is associated with "udacity.com".

14
00:00:41,000 --> 00:00:44,000
And then I have the counts, 5 and 8.

15
00:00:44,000 --> 00:00:49,000
Ideally, for this to be useful we want to count the number of times a user clicks the URL

16
00:00:49,000 --> 00:00:51,000
given a certain keyword.

17
00:00:51,000 --> 00:00:54,000
That way we can sort these 2 URLs based on the counts

18
00:00:54,000 --> 00:00:57,000
in order to serve our users better search results.

19
00:00:57,000 --> 00:01:00,000
At this stands now, there's only 1 count for each keyword.

20
00:01:00,000 --> 00:01:03,000
This might be useful to count the number of times people search things,

21
00:01:03,000 --> 00:01:07,000
but it doesn't help us solve our problem, so this is no good.

22
00:01:07,000 --> 00:01:09,000
Here I've numerated the second choice.

23
00:01:09,000 --> 00:01:16,000
What's useful about this is that we have a count for each URL and each keyword.

24
00:01:16,000 --> 00:01:19,000
This allows us to sort these 2 URLs.

25
00:01:19,000 --> 00:01:22,000
We can add "searchwithpeter.info" above "udacity.com"

26
00:01:22,000 --> 00:01:25,000
when we display our results on the web page

27
00:01:25,000 --> 00:01:28,000
because users more often click that link than the other.

28
00:01:28,000 --> 00:01:32,000
This seems like a pretty good choice, and it turns out to be the best one

29
00:01:32,000 --> 00:01:35,000
so it gets a check.

30
00:01:35,000 --> 00:01:38,000
This data structure doesn't really make that much sense.

31
00:01:38,000 --> 00:01:43,000
Why do we have multiple counts corresponding to a single URL?

32
00:01:43,000 --> 00:01:45,000
You could imagine a use for it, maybe that each count

33
00:01:45,000 --> 00:01:47,000
corresponds to a certain period of time,

34
00:01:47,000 --> 00:01:50,000
but given what we have here, it's probably not the best data structure

35
00:01:50,000 --> 00:01:54,000
for exactly what we want to do and that is just sort the queries results

36
00:01:54,000 --> 00:01:58,000
based strictly on the number of clicks.

37
00:01:58,000 --> 00:02:01,000
For this one I don't need to even go into an example.

38
00:02:01,000 --> 00:02:04,000
This is the same as the first choice,

39
00:02:04,000 --> 00:02:09,000
except keyword was moved over a position and count was also moved over.

40
00:02:09,000 --> 00:02:13,000
For the same reason as before, namely that we only have 1 count for the keyword

41
00:02:13,000 --> 00:02:16,000
instead of for each URL, this isn't the right solution.
