1
00:00:00,330 --> 00:00:02,310
The example we're looking at here, is an

2
00:00:02,310 --> 00:00:05,650
automobile info box, in particular for the Tesla Model

3
00:00:05,650 --> 00:00:08,760
S. In this lesson, we're going to use info

4
00:00:08,760 --> 00:00:12,510
box data throughout our examples, involving Mongo DB. So,

5
00:00:12,510 --> 00:00:13,800
let's take a look at the data that's

6
00:00:13,800 --> 00:00:17,800
represented in this info box. Manufacturer, we have production

7
00:00:17,800 --> 00:00:22,590
years, model years. Several different assembly plants, a designer,

8
00:00:22,590 --> 00:00:25,750
class, body style, with 2 elements, 5 door and

9
00:00:25,750 --> 00:00:29,030
liftback, and a number of other fields. So what

10
00:00:29,030 --> 00:00:30,770
I'd like to do here, is talk about how

11
00:00:30,770 --> 00:00:34,800
we might model this data in MongoDB, as documents

12
00:00:34,800 --> 00:00:38,890
using the JSON like syntax I mentioned earlier. So in

13
00:00:38,890 --> 00:00:40,930
modeling this data, let's start with some of the

14
00:00:40,930 --> 00:00:43,890
scalar valued fields that are here. Here we can see

15
00:00:43,890 --> 00:00:48,400
scalar fields for manufacturer, class, and body style. We

16
00:00:48,400 --> 00:00:50,870
can also model a couple of array fields here for

17
00:00:50,870 --> 00:00:56,190
production, model years, and layout. So here,

18
00:00:56,190 --> 00:00:58,920
in our Json like syntax, for MongoDB, we've

19
00:00:58,920 --> 00:01:03,040
modeled that same data, using array value fields.

20
00:01:03,040 --> 00:01:05,630
Now, we could model the designer field, as

21
00:01:05,630 --> 00:01:10,490
just a single string. But to show an alternative, we might also model it as

22
00:01:10,490 --> 00:01:13,920
a simple person document, as follows. And here

23
00:01:13,920 --> 00:01:16,630
we have a document with a designer field

24
00:01:16,630 --> 00:01:19,580
that has a nested document within it, for the

25
00:01:19,580 --> 00:01:23,470
designer. And last, putting the idea of array fields

26
00:01:23,470 --> 00:01:26,370
and embedded documents together. We might represent the assembly

27
00:01:26,370 --> 00:01:29,400
data in this example, like this, with an assembly

28
00:01:29,400 --> 00:01:32,790
field that has an array, containing embedded documents for

29
00:01:32,790 --> 00:01:35,900
each of the assembly plants. So, in Mango DB,

30
00:01:35,900 --> 00:01:38,520
our entire document for the Tesla Model S might

31
00:01:38,520 --> 00:01:41,740
look something like this. With a mixture of fields that

32
00:01:41,740 --> 00:01:46,670
are scalars, array valued and embedded documents. One

33
00:01:46,670 --> 00:01:48,255
of the many cool things about this, is that

34
00:01:48,255 --> 00:01:50,450
Mongo DB natively supports a very common big

35
00:01:50,450 --> 00:01:53,560
data format, that being JSON. And by support I

36
00:01:53,560 --> 00:01:56,220
mean, that we can store data items structured

37
00:01:56,220 --> 00:01:59,110
this way in our database and do queries that

38
00:01:59,110 --> 00:02:02,130
would say, for example, identify all documents where the

39
00:02:02,130 --> 00:02:06,840
city of assembly is Fremont. Driving down the hierarchy,

40
00:02:06,840 --> 00:02:10,190
to actually pull out matches for this piece of data,

41
00:02:10,190 --> 00:02:13,220
even though it's nested several layers deep within an individual document.
