1
00:00:00,480 --> 00:00:03,819
Remember when we had our simple
five move isolation board and

2
00:00:03,819 --> 00:00:05,609
we searched it to end game?

3
00:00:05,610 --> 00:00:08,910
We found that player one would
always win unless it moved to one of

4
00:00:08,910 --> 00:00:10,220
the center positions first.

5
00:00:10,220 --> 00:00:12,070
>> I see where you're going.

6
00:00:12,070 --> 00:00:15,440
The question is whether our
evaluation function of #my_ moves

7
00:00:15,439 --> 00:00:19,280
predicts which branches will lead to
a win, and which ones lead to failure.

8
00:00:19,280 --> 00:00:20,280
>> Exactly,

9
00:00:20,280 --> 00:00:23,230
I always like to test my assumptions
because they are often wrong.

10
00:00:24,300 --> 00:00:25,864
>> Okay, so here's the minimax tree,

11
00:00:25,864 --> 00:00:30,070
where I've limited the depth to three
and applied the evaluation function.

12
00:00:30,070 --> 00:00:33,380
I've also propagated the values
up the minimax tree to the top.

13
00:00:33,380 --> 00:00:35,109
>> The result looks promising.

14
00:00:35,109 --> 00:00:39,939
The two center positions have scores
of 1, while the rest of the branches,

15
00:00:39,939 --> 00:00:42,960
which we know win, have higher scores.

16
00:00:42,960 --> 00:00:44,560
Let's try another example.

17
00:00:44,560 --> 00:00:46,950
What happens if we try the same thing,
but

18
00:00:46,950 --> 00:00:49,810
assume we could only go two
levels deep on our search tree?

