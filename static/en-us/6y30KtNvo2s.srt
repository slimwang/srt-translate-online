1
00:00:00,430 --> 00:00:02,063
So, we've learned about
directions requests.

2
00:00:02,063 --> 00:00:04,345
How can we use this within our app?

3
00:00:05,570 --> 00:00:09,862
How about after users register locations
within a certain journey time from work,

4
00:00:09,862 --> 00:00:11,096
we show them the route.

5
00:00:11,096 --> 00:00:13,865
Okay, so we're going to
expand what we did last time.

6
00:00:13,865 --> 00:00:18,103
After the user looks for listings within
a 30 minute walk of their office say,

7
00:00:18,103 --> 00:00:21,899
we'll add a button inside that info
window that appears to allow them to

8
00:00:21,899 --> 00:00:24,448
display the route that
they would take to work.

9
00:00:24,448 --> 00:00:28,158
The first thing we'll do is add
a button that says view route inside

10
00:00:28,158 --> 00:00:32,215
the little info window that appears
when we search for places near work.

11
00:00:32,215 --> 00:00:35,780
This button will point to a new
function called displayDirections,

12
00:00:35,780 --> 00:00:37,259
which we'll create below.

13
00:00:37,259 --> 00:00:38,871
If you remember from last time,

14
00:00:38,871 --> 00:00:42,341
we could have multiple listings
that fall within our commute limit.

15
00:00:42,341 --> 00:00:46,134
So for each button we make,
we'll pass in that origin.

16
00:00:46,134 --> 00:00:47,963
We have some funky quotes here so

17
00:00:47,963 --> 00:00:50,756
that we can pass in
the string correctly as well.

18
00:00:50,756 --> 00:00:53,665
The origin that's passed
is the listings address,

19
00:00:53,665 --> 00:00:57,117
and the destination we'll use
is the user rendered address.

20
00:00:57,118 --> 00:00:59,832
Now we'll create our display
directions function.

21
00:00:59,832 --> 00:01:02,500
This will actually calculate
the directions and

22
00:01:02,500 --> 00:01:04,134
display the route on the map.

23
00:01:04,135 --> 00:01:07,375
We'll initialize a new direction
service instance for this,

24
00:01:07,375 --> 00:01:09,216
just like the rest of our services.

25
00:01:09,216 --> 00:01:14,879
We'll recapture the user-entered
destination and travel mode.

26
00:01:14,879 --> 00:01:17,729
We'll then calculate the route,
passing in the origin,

27
00:01:17,730 --> 00:01:20,490
the destination and the travel mode.

28
00:01:20,489 --> 00:01:24,565
When we get back the response, we'll
make sure that the status is okay, and

29
00:01:24,566 --> 00:01:27,127
then we'll create a new
directions renderer.

30
00:01:27,126 --> 00:01:31,575
Remember the detailed steps and
polyline from the web service response?

31
00:01:31,575 --> 00:01:35,050
This renderer takes care of
displaying that information.

32
00:01:35,051 --> 00:01:39,420
Now at this point, we could display
the route data to the user.

33
00:01:39,420 --> 00:01:43,543
We would just need to specify
the HTML div to put the route in

34
00:01:43,543 --> 00:01:47,852
by setting the panel parameter
in the directions renderer.

35
00:01:47,852 --> 00:01:51,596
There are some good examples of this in
our developer documentation linked in

36
00:01:51,596 --> 00:01:52,754
the instructor notes.

37
00:01:52,754 --> 00:01:55,847
I'm not going to do that, because I
don't think our user needs to see

38
00:01:55,846 --> 00:01:57,793
the step by step
directions in this case.

39
00:01:57,793 --> 00:02:01,500
But we are going to display
the resulting polyline on the map.

40
00:02:01,501 --> 00:02:04,957
I'm going to specify to
render that on our map.

41
00:02:04,956 --> 00:02:08,959
I'm going to tell it to get
the directions from our route response,

42
00:02:08,959 --> 00:02:13,199
and I'm going to specify that I want
the route to be dragable and green.

43
00:02:13,199 --> 00:02:16,878
If the routing was not successful,
we're going to let the user know and

44
00:02:16,877 --> 00:02:19,299
show them the status
code from the response.

45
00:02:19,300 --> 00:02:22,900
Okay, let's look for the listings within
the 30 minute walk of my office again.

46
00:02:22,900 --> 00:02:25,551
I'm going to view the root for this one.

47
00:02:25,551 --> 00:02:28,276
So going from our listing to the office,

48
00:02:28,276 --> 00:02:31,415
it looks like I would
walk down 16th street.

49
00:02:31,415 --> 00:02:34,593
And I think that would take me past
a crepe place which would be awesome.

50
00:02:34,593 --> 00:02:38,049
We'll talk more later about this,
but there are some specific

51
00:02:38,049 --> 00:02:42,296
features that you only get access to by
purchasing a Google Maps API license.

52
00:02:42,296 --> 00:02:46,168
I'm going to cover one of those features
now in our direction's request that

53
00:02:46,168 --> 00:02:47,590
falls in to that category.

54
00:02:47,590 --> 00:02:51,444
Real time traffic integration or
predictive traffic time allows

55
00:02:51,444 --> 00:02:55,941
us to specify additional things and
get back the predicted time in traffic.

56
00:02:55,941 --> 00:02:59,344
This is great for traffic heavy areas,
since the time in traffic

57
00:02:59,344 --> 00:03:02,194
can be drastically different
from the time without.

58
00:03:02,194 --> 00:03:05,302
If we add the driving options
parameter into the request,

59
00:03:05,302 --> 00:03:08,990
obviously the travel mode has to be
driving for this to be effective.

60
00:03:08,990 --> 00:03:11,439
We have the option to
specify a departure time,

61
00:03:11,439 --> 00:03:14,931
which is pretty cool if I want to give
users as an example the option of

62
00:03:14,931 --> 00:03:18,570
calculating a travel time en route
to the airport on Monday mornings.

63
00:03:18,570 --> 00:03:23,356
We can also specify a best guess,
optimistic or pessimistic traffic model,

64
00:03:23,356 --> 00:03:27,186
which can give us the routes and
travel times during lighter or

65
00:03:27,186 --> 00:03:28,671
heavier traffic days.

66
00:03:28,671 --> 00:03:32,578
Users may want to see a pessimistic
value if they're the nervous Nellie type

67
00:03:32,578 --> 00:03:34,383
and want to be at the airport early.

68
00:03:34,383 --> 00:03:37,953
Feel free to check out the video link
in the Instructor Notes on predictive

69
00:03:37,953 --> 00:03:38,710
traffic time.

70
00:03:38,710 --> 00:03:40,897
We won't include that
in our app right now.

71
00:03:40,896 --> 00:03:44,659
Let's test out some route
optimization using direction service


