1
00:00:00,120 --> 00:00:02,510
Let's discuss the solution to our BTB and BHT

2
00:00:02,510 --> 00:00:06,167
quiz. We have a BHT that has 16 entries and

3
00:00:06,167 --> 00:00:09,190
it's a 1-bit predictor. Each of the entries is a

4
00:00:09,190 --> 00:00:12,070
single bit that tells us what the last outcome was.

5
00:00:12,070 --> 00:00:16,059
And initially they start off at predicting, not-taken. The

6
00:00:16,059 --> 00:00:18,640
question was, how many mispredictions do we have for each

7
00:00:18,640 --> 00:00:22,520
instruction? Initially the BHT says not-taken for all of the

8
00:00:22,520 --> 00:00:25,460
entries and we have already seen that the BHT entry

9
00:00:25,460 --> 00:00:28,018
that we will use are all different. So these

10
00:00:28,018 --> 00:00:30,826
branches any other instructions are not going to interfere with

11
00:00:30,826 --> 00:00:33,038
each other. Each of them just uses its own

12
00:00:33,038 --> 00:00:37,060
BHT entry, because the initial prediction is not-taken. And

13
00:00:37,060 --> 00:00:39,894
this is indeed not a taken branch. We have

14
00:00:39,894 --> 00:00:43,713
0 missed predictions here, same here. When we enter

15
00:00:43,713 --> 00:00:46,998
the loop, this branch is actually not-taken, so we

16
00:00:46,998 --> 00:00:51,120
have no missed prediction the first time we execute it.

17
00:00:51,120 --> 00:00:54,336
This instruction here is predicted not-taken the first

18
00:00:54,336 --> 00:00:57,920
time. It's not-taken for real, so every other time

19
00:00:57,920 --> 00:01:00,116
that we execute it it's going to be predicted

20
00:01:00,116 --> 00:01:03,760
not-taken correctly, so there is 0 mispredictions. And same

21
00:01:03,760 --> 00:01:06,800
thing happens here, and here, and here. For

22
00:01:06,800 --> 00:01:11,350
this branch, things are more interesting. The initial prediction

23
00:01:11,350 --> 00:01:13,622
in the BHD is going to be not-taken, but

24
00:01:13,622 --> 00:01:16,533
this branch is taken, so we have a misprediction

25
00:01:16,533 --> 00:01:20,290
the first time this branch is taken. Then,

26
00:01:20,290 --> 00:01:23,230
the BHT entry for that instruction is updated to

27
00:01:23,230 --> 00:01:26,370
say taken, so every other time that we execute

28
00:01:26,370 --> 00:01:28,950
this instruction it's correctly predicted as taken. So we

29
00:01:28,950 --> 00:01:32,730
have only the one misprediction initially. For this

30
00:01:32,730 --> 00:01:35,870
branch, it's never taken until the very last time,

31
00:01:35,870 --> 00:01:38,710
the 101st time we do it. Every time it's

32
00:01:38,710 --> 00:01:41,570
not-taken, we have a correct prediction, because we start

33
00:01:41,570 --> 00:01:43,880
out in the not-taken state of the predictor, and

34
00:01:43,880 --> 00:01:46,570
just keep doing that. The last time we need

35
00:01:46,570 --> 00:01:49,714
to execute this branch, it is taken. And the

36
00:01:49,714 --> 00:01:53,470
last outcome that we have seen was not-taken. So

37
00:01:53,470 --> 00:01:57,280
there will be again a single misprediction here. So

38
00:01:57,280 --> 00:02:00,520
as you can see the 1-bit predictor is very

39
00:02:00,520 --> 00:02:04,306
accurate. We are executing a lot of instructions. This

40
00:02:04,306 --> 00:02:06,610
one is done a 101 times, this one is done

41
00:02:06,610 --> 00:02:11,814
a 100 times, these are done a 100 times each. So, for what amounts to more than

42
00:02:11,814 --> 00:02:16,120
600 instruction executions, we only have two mispredictions. This

43
00:02:16,120 --> 00:02:18,880
shows that the 1-bit predictor really works well for

44
00:02:18,880 --> 00:02:22,735
things like loops that execute many iterations. However,

45
00:02:22,735 --> 00:02:25,075
we will see later that it doesn't work well

46
00:02:25,075 --> 00:02:27,740
for some of the other things like, for example,

47
00:02:27,740 --> 00:02:30,710
loops don't have many iterations or if then analysis
