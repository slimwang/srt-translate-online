1
00:00:00,360 --> 00:00:02,170
Now lets take a look at the solution.

2
00:00:02,170 --> 00:00:07,610
So each row in our table will represent
product information for a headphone.

3
00:00:07,610 --> 00:00:12,210
So each headphone will have a name,
price, whether or

4
00:00:12,210 --> 00:00:15,640
not it's in stock, a style,
and a description.

5
00:00:16,750 --> 00:00:21,570
So we could see all this in our
webpage mockup, right here.

6
00:00:21,570 --> 00:00:24,410
So we have the name,
the price, whether or

7
00:00:24,410 --> 00:00:28,450
not it's in stock,
the description, and the style.

8
00:00:29,640 --> 00:00:31,700
So like I mentioned in
the instructor's notes before,

9
00:00:31,700 --> 00:00:34,780
we also have other information here
that you can see in the mock-up,

10
00:00:34,780 --> 00:00:39,300
such as the customer's username or
the URL of the website.

11
00:00:39,300 --> 00:00:42,980
But none of this has to do with
a single headphone in our table.

12
00:00:42,980 --> 00:00:47,370
Similarly, the fact that there is a buy
one get one sale for this particular

13
00:00:47,370 --> 00:00:51,200
headphone, doesn't change anything
inherent about this particular product.

14
00:00:52,350 --> 00:00:56,180
Also the quantity of the headphone
that the user wants to order,

15
00:00:56,180 --> 00:00:58,660
is definitely information
that we want to store.

16
00:00:58,660 --> 00:01:01,880
But given that there might be
hundreds of users looking to buy

17
00:01:01,880 --> 00:01:04,769
different amounts of this headphone,
it wouldn't be in the table that

18
00:01:04,769 --> 00:01:07,750
we're interested in right now,
specifically about the product.

19
00:01:07,750 --> 00:01:08,280
So likely,

20
00:01:08,280 --> 00:01:12,420
we'd have another table in the database,
helping us keep track of user orders.
