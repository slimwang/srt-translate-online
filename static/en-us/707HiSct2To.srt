1
00:00:00,000 --> 00:00:04,000
The idea for this protocol comes from Steve Bellovin and Michael Merritt back in 1992.

2
00:00:04,000 --> 00:00:07,000
There have been many, many variations on this protocol,

3
00:00:07,000 --> 00:00:10,000
many of which are still in use today.

4
00:00:10,000 --> 00:00:14,000
This protocol starts from Diffie-Hellman, which you should remember from Unit 3,

5
00:00:14,000 --> 00:00:19,000
where each party starts, they have agreed on the generator and some modulus.

6
00:00:19,000 --> 00:00:22,000
The client picks a random XA value, raises g to that power,

7
00:00:22,000 --> 00:00:25,000
sends the result to the server.

8
00:00:25,000 --> 00:00:28,000
The server picks a random XB value, raises g to that power,

9
00:00:28,000 --> 00:00:30,000
and sends the result to the client.

10
00:00:30,000 --> 00:00:33,000
They can both now compute the same key by raising the value they received

11
00:00:33,000 --> 00:00:37,000
to the power of their random value.

12
00:00:37,000 --> 00:00:40,000
The problem with Diffie-Hellman for authentication

13
00:00:40,000 --> 00:00:42,000
is if there's an active attacker,

14
00:00:42,000 --> 00:00:46,000
that attacker can change the values, send something different,

15
00:00:46,000 --> 00:00:52,000
set up a shared key independently with each party, and act as a middle attacker

16
00:00:52,000 --> 00:00:56,000
intercepting all the traffic because the attacker knows the keys on these 2 separate channels.

17
00:00:56,000 --> 00:01:00,000
The idea of encrypted key exchange is to combine this with symmetric encryption

18
00:01:00,000 --> 00:01:04,000
to allow the client and server to authenticate each other even if there is a middle attacker.

19
00:01:04,000 --> 00:01:06,000
Here's how it works.

20
00:01:06,000 --> 00:01:09,000
I assume there's some password that at the beginning of the protocol

21
00:01:09,000 --> 00:01:11,000
is known to both the client and the server.

22
00:01:11,000 --> 00:01:13,000
Then the way this protocol works,

23
00:01:13,000 --> 00:01:15,000
the message that the client will send to the server

24
00:01:15,000 --> 00:01:18,000
instead of just being the message that would be sent in Diffie-Hellman

25
00:01:18,000 --> 00:01:22,000
is now that message encrypted using the password.

26
00:01:22,000 --> 00:01:26,000
So this is symmetric encryption using p,

27
00:01:26,000 --> 00:01:30,000
the message that would have been the message in the Diffie-Hellman protocol.

28
00:01:30,000 --> 00:01:33,000
And in addition to that, we also need to send the name of the client.

29
00:01:33,000 --> 00:01:35,000
So let's say that's Alice.

30
00:01:35,000 --> 00:01:39,000
When the server receives this, it can decrypt it and knows this password,

31
00:01:39,000 --> 00:01:44,000
and so it obtains the value that would have been sent in the Diffie-Hellman protocol.

32
00:01:44,000 --> 00:01:47,000
That means it can compute a key using its secret value XB,

33
00:01:47,000 --> 00:01:50,000
combining that with the decrypted result here.

34
00:01:50,000 --> 00:01:54,000
As in the Diffie-Hellman protocol, it also sends a message back to the client.

35
00:01:54,000 --> 00:01:59,000
In Diffie-Hellman that would just be g to the XB mod q

36
00:01:59,000 --> 00:02:02,000
where XB is the secret value selected by the server.

37
00:02:02,000 --> 00:02:04,000
Now we're going to combine that with symmetric encryption,

38
00:02:04,000 --> 00:02:07,000
encrypting that with the password.

39
00:02:07,000 --> 00:02:11,000
Alice decrypts that message, so she can also obtain the value here

40
00:02:11,000 --> 00:02:15,000
and obtain the key using the normal Diffie-Hellman technique.

41
00:02:15,000 --> 00:02:19,000
So now we'll have a quiz to see if you understand the EKE protocol.

42
00:02:19,000 --> 00:02:23,000
The question is, which of these are drawbacks of using the protocol

43
00:02:23,000 --> 00:02:27,000
as we've described it here to authenticate a user--that would be Alice on this side--

44
00:02:27,000 --> 00:02:30,000
to a website--that would be the server on this side.

45
00:02:30,000 --> 00:02:34,000
The first possibility is that it's vulnerable to offline dictionary attacks.

46
00:02:34,000 --> 00:02:37,000
This is where an attacker goes through a dictionary of common passwords

47
00:02:37,000 --> 00:02:40,000
trying to guess the password of a user.

48
00:02:40,000 --> 00:02:45,000
The second choice is that it requires servers to store the passwords in clear text.

49
00:02:45,000 --> 00:02:48,000
And as we discussed in Unit 2, this is never a good idea.

50
00:02:48,000 --> 00:02:51,000
The third choice is it's vulnerable to meet in-the-middle attacks

51
00:02:51,000 --> 99:59:59,999
just like the Diffie-Hellman protocol was.
