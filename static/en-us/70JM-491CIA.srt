1
00:00:00,160 --> 00:00:03,530
At first the systems of error
catching in Objective C and

2
00:00:03,530 --> 00:00:05,860
Swift, may seem pretty different.

3
00:00:05,860 --> 00:00:09,630
But errors actually travel between
the two languages remarkably well.

4
00:00:09,630 --> 00:00:15,070
In Objective C, returning a false value
in this case would constitute an error.

5
00:00:15,070 --> 00:00:18,730
Now you might think that this BOOL
return value could cause a problem.

6
00:00:18,730 --> 00:00:21,280
But swift doesn't have
to bother with the BOOL.

7
00:00:21,280 --> 00:00:24,290
Let's take a look at how an error
causing function like this one

8
00:00:24,290 --> 00:00:26,610
would be translated in Swift.

9
00:00:26,610 --> 00:00:29,060
If we look in the generated header,

10
00:00:29,060 --> 00:00:32,430
we see that the Swift version of
the method doesn't have a BOOL.

11
00:00:32,430 --> 00:00:35,436
It just throws an error that can be
caught just like any other sort of Swift

12
00:00:35,436 --> 00:00:37,390
style error would be caught.

13
00:00:37,390 --> 00:00:40,510
Also notice,
that there's no more error parameter and

14
00:00:40,510 --> 00:00:44,320
the width error at the end of
the method name has been removed.

15
00:00:44,320 --> 00:00:47,840
In Objective C, an error can
also be signaled when a method

16
00:00:47,840 --> 00:00:51,020
with an error parameter
returns a nil value.

17
00:00:51,020 --> 00:00:52,980
Let's take a look at
the generated header for

18
00:00:52,980 --> 00:00:56,390
this perform some action
on string method.

19
00:00:56,390 --> 00:00:58,120
Now as a Swift developer.

20
00:00:58,120 --> 00:01:01,190
I'm sure your ears perked up
at the mention of a nil value.

21
00:01:01,730 --> 00:01:05,440
But don't worry, we can handle that nil
value in the same way we would handle

22
00:01:05,440 --> 00:01:08,640
any other error-throwing
function that returns a value.

23
00:01:08,640 --> 00:01:11,510
With the tri-question mark construct.

24
00:01:11,510 --> 00:01:15,390
Notice that the return type for this
function is just a plain old string.

25
00:01:15,390 --> 00:01:16,106
Not an optional.

26
00:01:16,106 --> 00:01:19,792
Since Swift generally uses enums for
errors.

27
00:01:19,792 --> 00:01:24,200
It's straightforward to catch specific
errors and define customized responses.

28
00:01:24,200 --> 00:01:28,010
And you can still do this when
your code is consuming NSErrors.

29
00:01:28,010 --> 00:01:31,150
With a defined set of
common error codes that is.

30
00:01:31,150 --> 00:01:35,030
Even though NSError doesn't
encode errors as enums.

31
00:01:35,030 --> 00:01:37,590
The properties of NSError
have been defined,

32
00:01:37,590 --> 00:01:41,630
such that the most common errors
can be accessed using dot syntax.

33
00:01:41,630 --> 00:01:44,810
Like so.
You can find a list of the available

34
00:01:44,810 --> 00:01:48,000
NSError codes in
the Foundation Constants Reference,

35
00:01:48,000 --> 00:01:49,750
linked in the accompanying text.

36
00:01:49,750 --> 00:01:53,973
The bottom line when your Swift code
is consuming errors from objective C,

37
00:01:53,973 --> 00:01:56,735
is that apart from using
the class name NSError.

38
00:01:56,735 --> 00:01:59,870
You can pretty much treat an NSError
as you would treat a SwiftError.
