1
00:00:00,000 --> 00:00:03,000
Now to show off how insanely great memo is,

2
00:00:03,000 --> 00:00:08,000
we'll want to have before and after pictures, showing the amazing weight loss of a model

3
00:00:08,000 --> 00:00:11,000
that was fat before and was thin after applying memo.

4
00:00:11,000 --> 00:00:15,000
Oh! Wait a minute. It's not weight loss. It's time loss that we're going to try to measure.

5
00:00:15,000 --> 00:00:21,000
We want to show that before, we have a function f, and that's going to run very slowly,

6
00:00:21,000 --> 00:00:23,000
making us sad.

7
00:00:23,000 --> 00:00:28,000
And after, we have a function memo of f, and that's going to run very quickly,

8
00:00:28,000 --> 00:00:29,000
making us happy.

9
00:00:29,000 --> 00:00:34,000
Now we could do that with a timer and say it took 20 seconds to do this

10
00:00:34,000 --> 00:00:37,000
and .001 seconds after,

11
00:00:37,000 --> 00:00:41,000
but instead of doing it with timing, I think it's a little bit more dramatic just to show the number

12
00:00:41,000 --> 00:00:46,000
of function calls, and I could go into my function and modify it to count the number

13
00:00:46,000 --> 00:00:47,000
of function calls,

14
00:00:47,000 --> 00:00:49,000
but you could probably guess a better way to do that.

15
00:00:49,000 --> 00:00:53,000
I'm going to define a decorator to count the calls to a function because I'm probably

16
00:00:53,000 --> 00:00:57,000
going to want to count the calls to more than 1 function as I'm trying to improve the speed

17
00:00:57,000 --> 00:00:58,000
of my programs.

18
00:00:58,000 --> 00:01:01,000
So it's nice to have that decorator around.

19
00:01:01,000 --> 00:01:03,000
So here's the decorator countcalls,

20
00:01:03,000 --> 00:01:06,000
you pass it a function, and this is the function that it returns.

21
00:01:06,000 --> 00:01:12,000
It's going to be a function that just increments entry for this function in a dictionary callcounts.

22
00:01:12,000 --> 00:01:17,000
Increment that by 1 and then go ahead and apply the function to the arguments

23
00:01:17,000 --> 00:01:19,000
and return that result.

24
00:01:19,000 --> 00:01:22,000
We have to initialize the number of calls to each funciton to be 0,

25
00:01:22,000 --> 00:01:24,000
and that's all there is to it.

26
00:01:24,000 --> 00:01:26,000
So here I've defined the Fibonacci function.

27
00:01:26,000 --> 00:01:31,000
Through cursive function it calls itself twice for each call, except for the base case.

28
00:01:31,000 --> 00:01:36,000
I can count the calls both with and without the memoized version.

29
00:01:36,000 --> 00:01:40,000
So I'm going to do before and after pictures--before and after memoizing.

30
00:01:40,000 --> 00:01:41,000
So here's before.

31
00:01:41,000 --> 00:01:48,000
I have the values of n and a value computed for Fibonacci number of n,

32
00:01:48,000 --> 00:01:52,000
the number of calls created by countcalls, and then I have the ratio

33
00:01:52,000 --> 00:01:54,000
of the number of calls to the previous number.

34
00:01:54,000 --> 00:01:59,000
We see the number of calls goes up by the time we get up to n = 20.

35
00:01:59,000 --> 00:02:00,000
We got 10,000 calls.

36
00:02:00,000 --> 00:02:05,000
We can scroll down, and by the time we're up to n = 30,

37
00:02:05,000 --> 00:02:07,000
we have 2.6 million calls.

38
00:02:07,000 --> 00:02:09,000
And here's the after.

39
00:02:09,000 --> 00:02:11,000
Now we've applied the memo decorator.

40
00:02:11,000 --> 00:02:13,000
Now the number of calls is much more modest.

41
00:02:13,000 --> 00:02:21,000
Now at 20, we're only at 39 calls, and at 30, we're at 59 calls rather than 2.6 million.

42
00:02:21,000 --> 00:02:25,000
So that's pretty amazing weight loss to go from 2.6 million down to 59,

43
00:02:25,000 --> 00:02:29,000
just by writing 1 little decorator and applying it to the function.

44
00:02:29,000 --> 00:02:33,000
Now just as an aside here, and for you math fans in the audience,

45
00:02:33,000 --> 00:02:37,000
I'm back to the before part. This is without the memoization.

46
00:02:37,000 --> 00:02:43,000
This number here in this column is the ratio of the number of calls for n = 30

47
00:02:43,000 --> 00:02:46,000
to the number of calls for n = 29.

48
00:02:46,000 --> 00:02:50,000
You can see that it's converging to this number 1.6180.

49
00:02:50,000 --> 00:02:54,000
Math fans out there, I want you to tell me if you recognize that number.

50
00:02:54,000 --> 00:02:57,000
Do you think it's converging to 1 + square root of 5 / 2,

51
00:02:57,000 --> 00:03:00,000
25.888 / 1600,

52
00:03:00,000 --> 99:59:59,999
or the square root of e?
