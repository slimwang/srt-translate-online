1
00:00:00,420 --> 00:00:03,670
When the user opens Wittr, we want
to start by showing the latest post

2
00:00:03,670 --> 00:00:06,740
the device received,
before going to the network.

3
00:00:06,740 --> 00:00:08,420
Then we make the web socket connection,
and

4
00:00:08,420 --> 00:00:10,720
we start receiving new posts one by one.

5
00:00:10,720 --> 00:00:13,830
When we receive these posts,
we want to display them of course.

6
00:00:13,830 --> 00:00:16,780
But also, we want to add them to the set
of posts we already have stored.

7
00:00:16,780 --> 00:00:20,830
We also want to remove entries that
are too old to be worth keeping.

8
00:00:20,830 --> 00:00:23,250
A database is the best model for this.

9
00:00:23,250 --> 00:00:24,170
It means we can add and

10
00:00:24,170 --> 00:00:29,020
remove individual posts as needed,
iterate over them, and query the data.

11
00:00:29,020 --> 00:00:32,189
The web platform has
a database called index DB and

12
00:00:32,189 --> 00:00:35,600
it's fair to say it has a bit
of a bad reputation, but

13
00:00:35,600 --> 00:00:38,300
hopefully we can break
through that in this chapter.

14
00:00:38,300 --> 00:00:40,240
And we're not going to touch
our service workers' script for

15
00:00:40,240 --> 00:00:44,180
a bit, we're going to concentrate on
learning IDB sharpen how it ticks.

16
00:00:44,180 --> 00:00:48,230
Then we'll integrate it into
a whole offline first experience.

17
00:00:48,230 --> 00:00:53,120
If you've used NoSQL databases before,
IDB will seem familiar.

18
00:00:53,120 --> 00:00:57,350
If you've only used relational databases
before, this might seem a little weird.

19
00:00:57,350 --> 00:01:01,040
But if you've never used databases
before, well, that might even help.

20
00:01:01,040 --> 00:01:04,120
As you can come to index DB fresh,
without trying to translate it to

21
00:01:04,120 --> 00:01:07,620
similar but ultimately different
things you've encountered.

22
00:01:07,620 --> 00:01:10,700
First up,
here's the shape of indexedDB Databases.

23
00:01:10,700 --> 00:01:11,920
With IndexedDB,

24
00:01:11,920 --> 00:01:15,350
you can have multiple databases
with whatever name you give them.

25
00:01:15,350 --> 00:01:17,450
But we're only going to be creating one.

26
00:01:17,450 --> 00:01:20,300
Generally you'll only have
one database per app.

27
00:01:20,300 --> 00:01:23,790
That database contains multiple
objects stores, generally one for

28
00:01:23,790 --> 00:01:25,910
each kind of thing you want to store.

29
00:01:25,910 --> 00:01:28,180
An object store contains
multiple values.

30
00:01:28,180 --> 00:01:32,860
These can be JavaScript objects,
strings, numbers, dates, or arrays.

31
00:01:32,860 --> 00:01:35,876
Items in the object's store can
have a separate primary key or

32
00:01:35,876 --> 00:01:38,860
you can assign a property of
the values to be the key.

33
00:01:38,860 --> 00:01:41,160
The key must be unique
within an object store.

34
00:01:41,160 --> 00:01:44,620
It becomes the way to
identify a particular object.

35
00:01:44,620 --> 00:01:45,970
Later you can get, set, add,

36
00:01:45,970 --> 00:01:50,250
remove, iterate over items in object
stores as part of a transaction.

37
00:01:50,250 --> 00:01:54,350
All read or write operations in
IndexDB must be part of a transaction.

38
00:01:54,350 --> 00:01:56,020
This means that if you
create a transaction for

39
00:01:56,020 --> 00:02:01,390
a series of steps and one of the actions
fail, none of them are applied.

40
00:02:01,390 --> 00:02:04,910
The state of the database would be
as if none of the steps happened.

41
00:02:04,910 --> 00:02:08,550
You can also create indexes within an
object store, which provides a different

42
00:02:08,550 --> 00:02:12,380
view of the same data ordered
by particular properties.

43
00:02:12,380 --> 00:02:15,860
The model here is similar to a lot of
databases which makes a lot of sense.

44
00:02:15,860 --> 00:02:19,890
The browser support is good as well
with every major browser supporting it.

45
00:02:19,890 --> 00:02:23,510
So why does IndexDB have
such a bad reputation?

46
00:02:23,510 --> 00:02:27,670
Unfortunately the API
is a little horrid, and

47
00:02:27,670 --> 00:02:29,950
often creates spaghetti code.

48
00:02:29,950 --> 00:02:34,190
It's all asynchronous which is fine,
but it predates promises.

49
00:02:34,190 --> 00:02:37,460
So it kind of invented its own
event-based promise system

50
00:02:37,460 --> 00:02:39,720
which creates really confusing code.

51
00:02:39,720 --> 00:02:43,654
Now, I'm a true believer in teaching the
web platform rather than libraries, but

52
00:02:43,654 --> 00:02:48,820
IDBs APIs is so clumsy,
I'm going to chicken out of doing that.

53
00:02:48,820 --> 00:02:51,350
We're going to use IndexDB Promised.

54
00:02:51,350 --> 00:02:55,220
This is a really small library
that mirrors the IndexDB API but

55
00:02:55,220 --> 00:02:58,030
uses promises rather than events.

56
00:02:58,030 --> 00:03:00,710
But other than that,
it's the same as IndexedDB.

57
00:03:00,710 --> 00:03:02,650
So anything you learn
using this library,

58
00:03:02,650 --> 00:03:04,880
you can apply to using
IndexedDB directly.

59
00:03:06,210 --> 00:03:08,570
In fact if you want to spoil
your day really early,

60
00:03:08,570 --> 00:03:13,110
feel free to avoid the library and
write IndexedDB code directly.

61
00:03:13,110 --> 00:03:15,680
But all the examples will
be using the library.

62
00:03:15,680 --> 00:03:18,820
In the next chapter we'll take a look
at how you'd create a real life

63
00:03:18,820 --> 00:03:20,490
index database in the browser.
