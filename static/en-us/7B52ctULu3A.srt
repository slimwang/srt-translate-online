1
00:00:00,080 --> 00:00:03,440
To see how that is really done, let's
just look at how unique started for

2
00:00:03,440 --> 00:00:03,950
example.

3
00:00:03,950 --> 00:00:06,980
So you provide a User ID and
your password.

4
00:00:06,980 --> 00:00:11,900
We use the User ID to select
the entry in the password file for

5
00:00:11,900 --> 00:00:14,000
this user that we're talking about.

6
00:00:14,000 --> 00:00:15,470
The salt is stored here.

7
00:00:15,470 --> 00:00:17,530
The hash value's stored here, isn't it?

8
00:00:17,530 --> 00:00:19,660
This is sort of the data
structure we keep.

9
00:00:19,660 --> 00:00:22,340
To log in,
you're going to supply your password, so

10
00:00:22,340 --> 00:00:24,110
we start on this side later on.

11
00:00:24,110 --> 00:00:28,300
So this is what is set up initially for
create the user account or

12
00:00:28,300 --> 00:00:29,420
set up the password.

13
00:00:29,420 --> 00:00:32,380
At that time, we determine the salt and
computer hash value and

14
00:00:32,380 --> 00:00:33,180
things like that.

15
00:00:33,180 --> 00:00:35,930
So later on a user comes
types the password.

16
00:00:35,930 --> 00:00:38,320
Well, they're saying who they are.

17
00:00:38,320 --> 00:00:40,360
You give your user id, your log in name.

18
00:00:40,360 --> 00:00:44,490
Based on that, we're going to
find the hash value and the salt.

19
00:00:44,490 --> 00:00:49,064
So the salt and the password are going
to be put through this hash function.

20
00:00:49,064 --> 00:00:52,256
And it's slow because if
somebody's doing brute force,

21
00:00:52,256 --> 00:00:53,885
it pays to slow them down.

22
00:00:53,885 --> 00:00:57,195
So we passed these two things
through the hash function.

23
00:00:57,195 --> 00:01:01,781
So this is typed by the user based on
the claim by the user, who they are.

24
00:01:01,781 --> 00:01:05,555
This is what we find in the file that
we have, where we store the salt value.

25
00:01:05,555 --> 00:01:08,015
So the two are passed as input to this.

26
00:01:08,015 --> 00:01:10,828
The result is compared
with a stored hash value.

27
00:01:10,828 --> 00:01:15,580
If the two match then we allow
authentication is successful.

28
00:01:15,580 --> 00:01:17,869
If they don't match,
then authentication fails.

29
00:01:17,869 --> 00:01:22,072
So this is what happens when we have
makers of salt to deal with different

30
00:01:22,072 --> 00:01:26,435
users making the same password and
the result having the same hash value.

31
00:01:26,435 --> 00:01:27,730
And that would be a problem.

32
00:01:27,730 --> 00:01:31,776
When you add salt, the rainbow based,
rainbow table based attack,

33
00:01:31,776 --> 00:01:34,098
think about what would happen to that.
