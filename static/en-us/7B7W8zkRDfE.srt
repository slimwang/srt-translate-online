1
00:00:00,000 --> 00:00:05,040
The correct answer here is, similar to vertex cover, those cases are actually the easy ones.

2
00:00:05,040 --> 00:00:06,780
And I'll show you why.

3
00:00:06,780 --> 00:00:10,600
Either v or u already has an assignment, and we can just consider 1 of those cases.

4
00:00:10,600 --> 00:00:14,750
So let's say v already has an assignment, here is u, and there's 2 cases.

5
00:00:14,750 --> 00:00:18,910
Either we said yes, v is in the independent set

6
00:00:18,910 --> 00:00:22,290
or we say no, v is not in the independent set.

7
00:00:22,290 --> 00:00:26,950
This case up here, that's very easy to see because if v is in the independent set

8
00:00:26,950 --> 00:00:28,740
and there's an edge here between those vertices,

9
00:00:28,740 --> 00:00:30,930
then you cannot be in the independent set.

10
00:00:30,930 --> 00:00:33,850
So that one is very clear. What about the case down here?

11
00:00:33,850 --> 00:00:35,630
That's a case that requires a little more thought.

12
00:00:35,630 --> 00:00:42,240
By itself right now, it could either be that u is in the independent set or it's not.

13
00:00:42,240 --> 00:00:44,870
And we don't know, so you might have been inclined to think

14
00:00:44,870 --> 00:00:49,430
that we need to modify the search tree or initiate some other form of brute force search,

15
00:00:49,430 --> 00:00:52,200
but actually, that's not necessary and I will show you why.

16
00:00:52,200 --> 00:00:55,280
This vertex u here, there are 2 possibilities.

17
00:00:55,280 --> 00:00:59,510
If u is not connected to any other vertices--

18
00:00:59,510 --> 00:01:03,450
so let's say all other vertices in the network are independent of u--

19
00:01:03,450 --> 00:01:07,750
then we can put u into the independent set without having to think

20
00:01:07,750 --> 00:01:10,940
because we're looking for a maximum size independent set.

21
00:01:10,940 --> 00:01:14,950
This is the only connection that u has to other vertices. Why not just take it?

22
00:01:14,950 --> 00:01:16,930
It doesn't really cause any other conflicts.

23
00:01:16,930 --> 00:01:19,990
Now, what if u is connected to other vertices?

24
00:01:19,990 --> 00:01:23,320
Here there's 3 different possibilities.

25
00:01:23,320 --> 00:01:26,980
The first possibility is that u has some neighboring vertex--

26
00:01:26,980 --> 00:01:29,060
so one that is connected by an edge--

27
00:01:29,060 --> 00:01:31,890
where we already have assigned it to be in the independent set.

28
00:01:31,890 --> 00:01:36,500
And in that case we can immediately say no, you cannot be in the independent set.

29
00:01:36,500 --> 00:01:41,050
We must assume that none of these vertices here is already in the independent set.

30
00:01:41,050 --> 00:01:43,220
So now there is 2 different cases.

31
00:01:43,220 --> 00:01:47,510
One is that 1 of these vertices here has not yet received an assignment.

32
00:01:47,510 --> 00:01:50,980
And in that case we don't have to worry about modifying the search tree

33
00:01:50,980 --> 00:01:53,270
because now we're looking at a case like this here again.

34
00:01:53,270 --> 00:01:56,670
So we can use our standard search tree to search through assignments

35
00:01:56,670 --> 00:01:58,390
for these 2 vertices here.

36
00:01:58,390 --> 00:02:01,790
If every vertex here, on the other hand, already has an assignment,

37
00:02:01,790 --> 00:02:04,880
then we just discussed, because we've just dealt with the other case,

38
00:02:04,880 --> 00:02:08,300
that all of these assignments here must be a 0.

39
00:02:08,300 --> 00:02:10,440
So all of these vertices here--and there can be more, of course--

40
00:02:10,440 --> 00:02:12,460
are not part of the independent set,

41
00:02:12,460 --> 00:02:16,020
and that means that we can take u into the independent set again.

42
00:02:16,020 --> 00:02:21,470
It might not have been obvious in terms of thinking it through what to do in this case,

43
00:02:21,470 --> 00:02:23,750
but for an algorithm we can design it in a way

44
00:02:23,750 --> 00:02:25,910
so that the algorithm always knows what it is to do.

45
00:02:25,910 --> 00:02:29,570
First of all, it looks for edges where both vertices do not have an assignment.

46
00:02:29,570 --> 00:02:31,820
And once it cannot find those edges anymore,

47
00:02:31,820 --> 00:02:35,340
then it will know how to deal with the remaining vertices.

48
00:02:35,340 --> 00:02:39,220
And this of course means that for independent set we can use a search tree that,

49
00:02:39,220 --> 00:02:45,190
just like vertex cover, always finds an assignment for at least 2 vertices.

50
00:02:45,190 --> 00:02:48,750
So its height, so to say, of the search tree is N/2.

51
00:02:48,750 --> 00:02:51,790
The size of the layers multiplies by factor 3.

52
00:02:51,790 --> 00:02:55,480
So the size of the overall tree is 3 to the power of N/2.

53
00:02:55,480 --> 00:03:00,980
For independent set we have a search tree of size 1.733 to the power of N.

54
00:03:00,980 --> 00:03:03,390
Just like vertex cover, the calculation here is the same.

55
00:03:03,390 --> 00:03:06,080
And because independent set and clique are so similar,

56
00:03:06,080 --> 00:03:08,300
we just have to transform the network to the inverse network,

57
00:03:08,300 --> 00:03:10,570
as you remember, hopefully, from the first unit.

58
00:03:10,570 --> 00:03:14,940
We also have a search tree of size 1.733 to the power of N for clique.

59
00:03:14,940 --> 00:03:18,030
Just like Alice, no reason to be super happy,

60
00:03:18,030 --> 00:03:20,550
but Bob and Carol can be a little happier now.

61
00:03:20,550 --> 99:59:59,999
And of course we're going to go on investigating.
