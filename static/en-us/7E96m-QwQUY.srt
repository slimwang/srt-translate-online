1
00:00:00,210 --> 00:00:01,930
Now for the more formal argument.

2
00:00:01,930 --> 00:00:06,011
A verifier for
language L is a deterministic

3
00:00:06,011 --> 00:00:10,421
Turing machine where L is
the set of strings w for

4
00:00:10,421 --> 00:00:16,500
which there is another string c
such that V accepts the pair w, c.

5
00:00:16,500 --> 00:00:20,262
In other words, for
every w in the language,

6
00:00:20,262 --> 00:00:26,499
there's a certificate c that can be
paired with w, so that V will accept and

7
00:00:26,499 --> 00:00:30,960
for every w not in the language L,
there's no such c.

8
00:00:30,960 --> 00:00:36,470
It's intuitive to think of w as
a statement and of c as a proof.

9
00:00:36,470 --> 00:00:39,960
If the statement is true,
then there should be a proof for

10
00:00:39,960 --> 00:00:42,200
it that the verifier V can check.

11
00:00:43,710 --> 00:00:45,854
On the other hand, if w is false,

12
00:00:45,854 --> 00:00:50,390
then no proof should be able to
convince the verifier that it's true.

13
00:00:50,390 --> 00:00:55,286
A verifier is polynomial,
if its running time is bounded

14
00:00:55,286 --> 00:00:59,170
by a polynomial in
the length of the string w.

15
00:00:59,170 --> 00:01:02,623
Note that this w is the same as
the one in the definition here,

16
00:01:02,623 --> 00:01:06,810
it's the string that's a candidate for
the language.

17
00:01:06,810 --> 00:01:09,470
If we included
the certificate in the bound,

18
00:01:09,470 --> 00:01:13,670
then it becomes meaningless since we
could make c as long as necessary.

19
00:01:13,670 --> 00:01:18,308
So that's a polynomial verifier and
we claim that the set of

20
00:01:18,308 --> 00:01:23,430
languages that have polynomial
time verifiers is the same as NP.

21
00:01:23,430 --> 00:01:27,076
The key to understanding this connection
is once again, this picture of

22
00:01:27,076 --> 00:01:30,620
the tree of computation performed
by the nondeterministic machine.

23
00:01:31,810 --> 00:01:32,970
If a language is in NP,

24
00:01:32,970 --> 00:01:37,290
then there's some nondeterministic
machine that recognizes it.

25
00:01:37,290 --> 00:01:37,800
Meaning that for

26
00:01:37,800 --> 00:01:41,096
every string in the language,
there's an accepting computation path.

27
00:01:41,096 --> 00:01:46,110
Now a verifier can't simulate the whole
tree of the nondeterministic machine

28
00:01:46,110 --> 00:01:50,470
in polynomial time, but
it can simulate a single path.

29
00:01:50,470 --> 00:01:53,609
It just needs to know which
path to simulate, but

30
00:01:53,609 --> 00:01:56,300
this is what the certificate
can tell it.

31
00:01:56,300 --> 00:02:01,051
The certificate can act as directions
for which turns to make in order to find

32
00:02:01,051 --> 00:02:05,000
the accepting computation of
the nondeterministic machine.

33
00:02:05,000 --> 00:02:08,901
Hence, if there's a nondeterministic
machine that can recognize the language,

34
00:02:08,901 --> 00:02:11,790
there's a verifier that can verify it.

35
00:02:11,790 --> 00:02:14,160
Now, argue in the other direction.

36
00:02:14,160 --> 00:02:19,088
Suppose that V verifies a language,
then we can build a nondeterministic

37
00:02:19,088 --> 00:02:23,470
machine whose computation tree
will look a bit like a jellyfish.

38
00:02:23,470 --> 00:02:28,053
At its very top, we'll have a high
degree of branching as the machine

39
00:02:28,053 --> 00:02:32,164
nondeterministically appends
a certificate c to its input,

40
00:02:32,164 --> 00:02:36,050
then it just deterministically
simulates the verifier.

41
00:02:36,050 --> 00:02:38,931
If there's any certificate
that causes V to accept,

42
00:02:38,931 --> 00:02:41,370
the nondeterministic
machine will find it.

43
00:02:42,400 --> 00:02:45,670
If there isn't one,
then the nondeterministic machine won't.
