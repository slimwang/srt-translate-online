1
00:00:00,000 --> 00:00:04,000
The example we just saw using Csmith to test C compilers represented several years of work

2
00:00:04,000 --> 00:00:07,000
by my group--it's really sort of a large effort for us.

3
00:00:07,000 --> 00:00:10,000
What I want to show now is a different example of random testing.

4
00:00:10,000 --> 00:00:14,000
We're going to test the tiny UNIX utility function using the very tiny random tester.

5
00:00:14,000 --> 00:00:18,000
And so if you remember a couple of units ago we talked about the UNIX read system call,

6
00:00:18,000 --> 00:00:20,000
so let's look at the read system call works.

7
00:00:20,000 --> 00:00:24,000
Before I get going into this example, I should apologize a bit for dropping in to see here.

8
00:00:24,000 --> 00:00:28,000
I try to work this example into Python and it really just didn't come out right--

9
00:00:28,000 --> 00:00:31,000
there just didn't feel right and it sort of inherently a C example.

10
00:00:31,000 --> 00:00:35,000
So it's not going to matter if you don't know C or shouldn't like C--I'll go through the code.

11
00:00:35,000 --> 00:00:37,000
Really it would be rather simple.

12
00:00:37,000 --> 00:00:41,000
The UNIX read system call as called from the C program tips the arguments.

13
00:00:41,000 --> 00:00:45,000
It takes fd which is a file descriptor, it takes a buf which is a 0.02, a block of memory

14
00:00:45,000 --> 00:00:50,000
into which data going to be read, and it takes a number of bytes to read from the file

15
00:00:50,000 --> 00:00:54,000
represented by the file descriptor into the memory blocked pointed to by buf.

16
00:00:54,000 --> 00:00:59,000
And now usually what the read system call does is it reads the number of bytes that you expected

17
00:00:59,000 --> 00:01:01,000
into the memory block that you provided and all was good.

18
00:01:01,000 --> 00:01:04,000
The return value of read is going to be the number of bytes read,

19
00:01:04,000 --> 00:01:06,000
so that's what usually happens, but there a couple of other things that can happen.

20
00:01:06,000 --> 00:01:10,000
A second possibility is the read system call then returns 0,

21
00:01:10,000 --> 00:01:12,000
indicating that you've reached the end of the file.

22
00:01:12,000 --> 00:01:14,000
Another thing that can happen is it can return -1 if it failed.

23
00:01:14,000 --> 00:01:18,000
But the fourth possibility and this is the one that sort of pernicious and its one that a lot of programmers

24
00:01:18,000 --> 00:01:23,000
get wrong is that read can return the number of bytes less than the number you asked for

25
00:01:23,000 --> 00:01:27,000
and this isn't a failure--this just doesn't represent any sort of out of memory condition

26
00:01:27,000 --> 00:01:30,000
or end of file or anything like that--it just means we need to try again.

27
00:01:30,000 --> 00:01:35,000
And so the little UNIX utility function that I'm going to test here is a different version of read.

28
00:01:35,000 --> 00:01:39,000
It's a version of read called read all that acts just like read except that it' not going to have

29
00:01:39,000 --> 00:01:41,000
this property of returning partial reads ever.

30
00:01:41,000 --> 00:01:46,000
So what read always going to do is in the case of a partial read is going to just issue another read call

31
00:01:46,000 --> 00:01:50,000
that picks up where the first call left off and it's going to repeatedly do that until the read is

32
00:01:50,000 --> 00:01:53,000
complete or until some sort of an error or end of file condition occurs.

33
00:01:53,000 --> 00:01:57,000
So if anything bad happens, it will just return a -1 value

34
00:01:57,000 --> 00:01:59,000
which is the sort of standard UNIX error value.

35
00:01:59,000 --> 00:02:02,000
If the read calls a succeeding but returning a partial results, we're just going to keep issuing

36
00:02:02,000 --> 00:02:06,000
read calls until we're finished, and so let's look at the code that does this.
