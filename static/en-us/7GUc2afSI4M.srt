1
00:00:00,000 --> 00:00:03,000
This is a good time to pause and summarize what we've learned so far.

2
00:00:03,000 --> 00:00:06,000
We've learned some theory and some practice.

3
00:00:06,000 --> 00:00:14,000
In theory, we've learned about patterns, which are grammars which describe languages,

4
00:00:14,000 --> 00:00:16,000
where a language is a set of strings.

5
00:00:16,000 --> 00:00:20,000
We've learned about interpreters over those languages,

6
00:00:20,000 --> 00:00:25,000
and about compilers, which can do the same thing only faster.

7
00:00:25,000 --> 00:00:31,000
In terms of practice, we've learned that regular expressions are useful for all sorts of things,

8
00:00:31,000 --> 00:00:35,000
and they're a concise language for getting work done.

9
00:00:35,000 --> 00:00:40,000
We've learned that interpreters, including compilers, can be valuable tools,

10
00:00:40,000 --> 00:00:48,000
and that they can be more expressive and more natural to describe a problem

11
00:00:48,000 --> 00:00:51,000
in terms of a native language that makes sense for the problem

12
00:00:51,000 --> 00:00:55,000
rather than in terms of Python code that doesn't necessarily make sense.

13
00:00:55,000 --> 00:01:00,000
We learned functions are more composable than other things in Python.

14
00:01:00,000 --> 00:01:05,000
For example, in Python we have expressions, and we have statements.

15
00:01:05,000 --> 00:01:09,000
They can only be composed by the Python programmer whereas functions

16
00:01:09,000 --> 00:01:11,000
can be composed dynamically.

17
00:01:11,000 --> 00:01:13,000
We can take 2 functions and put them together.

18
00:01:13,000 --> 00:01:19,000
We can take f and call g with that and then apply that to some x.

19
00:01:19,000 --> 00:01:21,000
We can do that for any value of f and g.

20
00:01:21,000 --> 00:01:25,000
We can pass those into a function and manipulate them and have different ones

21
00:01:25,000 --> 00:01:27,000
applying to x.

22
00:01:27,000 --> 00:01:29,000
We can't do that with expressions and statements.

23
00:01:29,000 --> 00:01:33,000
We can do it with the values of expressions, but we can't do it with expressions themselves.

24
00:01:33,000 --> 00:01:38,000
Functions provide a composability that we don't get elsewhere.

25
00:01:38,000 --> 00:01:43,000
Functions also provide control over time, so we can divide up the work that we want to do

26
00:01:43,000 --> 00:01:47,000
into do some now and do some later.

27
00:01:47,000 --> 00:01:48,000
A function allows us to do that.

28
00:01:48,000 --> 00:01:52,000
Expressions and statements don't do that because they just get done at 1 time

29
00:01:52,000 --> 00:01:53,000
when they're executed.

30
00:01:53,000 --> 99:59:59,999
Functions allow us to package up computation that we want to do later.
