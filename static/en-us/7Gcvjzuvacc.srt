1
00:00:00,440 --> 00:00:04,030
Okay, the next thing we're going to do, is add

2
00:00:04,030 --> 00:00:08,109
let's replace our dictionary cache in ASCII Chan with

3
00:00:08,109 --> 00:00:11,750
memcached. Okay, here we are in ASCII Chan. fortunately,

4
00:00:11,750 --> 00:00:15,630
memcached is, there's a, there's a version built into the

5
00:00:15,630 --> 00:00:17,150
App Engine that you run on your local machine,

6
00:00:17,150 --> 00:00:18,860
so you can develop against it. And then when

7
00:00:18,860 --> 00:00:22,330
you deploy your machine on App Engine, Google has

8
00:00:22,330 --> 00:00:25,460
memcache already spread out for you across many machines and

9
00:00:25,460 --> 00:00:27,320
you don't have to deal with it. So, that's a very

10
00:00:27,320 --> 00:00:29,900
nice convenience. First what we do, is we import it which is

11
00:00:29,900 --> 00:00:33,440
just, it's in the Google App Engine API memcache. So we

12
00:00:33,440 --> 00:00:37,160
do that. And now let's replace our dictionary cache with memcache. Which

13
00:00:37,160 --> 00:00:40,390
should be pretty straightforward, since the two behave very similarly. Okay,

14
00:00:40,390 --> 00:00:43,220
the first thing we could get rid of is this cache line,

15
00:00:43,220 --> 00:00:45,190
we don't need that any more. So, we got rid of

16
00:00:45,190 --> 00:00:50,620
our cache dictionary, let's use the memcache library now. Now, this syntax

17
00:00:50,620 --> 00:00:53,320
here, key in CACHE, and all that stuff, is specific

18
00:00:53,320 --> 00:00:54,770
to Python dictionaries, so we need to get rid of

19
00:00:54,770 --> 00:00:57,110
that. Instead let's try to look up arts up out

20
00:00:57,110 --> 00:00:58,802
of memcache. So it is going to be arts equals

21
00:00:58,802 --> 00:01:04,709
memcache.get key. In memchache in the official protocol, both keys

22
00:01:04,709 --> 00:01:08,480
and values need to be strings. In this library values

23
00:01:08,480 --> 00:01:12,440
can be Python DataTypes in the Memcache library. That Google

24
00:01:12,440 --> 00:01:15,870
provides, we'll convert your Python Data Type into a string.

25
00:01:15,870 --> 00:01:18,160
And then when you fetch the data out of the cache, it

26
00:01:18,160 --> 00:01:20,860
will convert it back into your Python Data Type. So we can

27
00:01:20,860 --> 00:01:24,640
still store our our objects directly in the CACHE but the keys

28
00:01:24,640 --> 00:01:27,070
need to be strings and so we're going to use top as our

29
00:01:27,070 --> 00:01:29,660
key. Now, we're going to change this if statement a little bit because

30
00:01:29,660 --> 00:01:33,050
now, we just looked up arts out of memCache. And if it's

31
00:01:33,050 --> 00:01:36,360
not in the cache Arts will be none. So let's structure this

32
00:01:36,360 --> 00:01:42,120
like so; If Arts is none or update, round the query and

33
00:01:42,120 --> 00:01:44,790
we don't need that other line. Now, so the

34
00:01:44,790 --> 00:01:48,630
query doesn't change, we need to change this line to

35
00:01:48,630 --> 00:01:53,700
set the key in the Cache. Which is memCache.set key,

36
00:01:53,700 --> 00:01:56,380
arts and that should do it. Okay, so let's go

37
00:01:56,380 --> 00:01:58,770
ahead and try this out on our browser we,

38
00:01:58,770 --> 00:02:01,120
we're in our page now. If I reload this page,

39
00:02:01,120 --> 00:02:03,750
we can go to our terminal and we can see

40
00:02:03,750 --> 00:02:07,450
that we ran a DB query on our GET request,

41
00:02:07,450 --> 00:02:09,288
and if we were to run another, if we were

42
00:02:09,288 --> 00:02:12,520
to reload that page again, I reloaded it. You would

43
00:02:12,520 --> 00:02:15,670
see that moved onto a DB Query, pretty cool huh.

44
00:02:15,670 --> 00:02:18,220
I want to show you something built in the App Engine

45
00:02:18,220 --> 00:02:21,190
is an Admin tool. If you are running App Engine

46
00:02:21,190 --> 00:02:26,100
you can go _aah/admin/memcache. You can actually view the memcache thing,

47
00:02:26,100 --> 00:02:29,640
if I reload this page, it says we have one

48
00:02:29,640 --> 00:02:32,430
item in our Cache. If I were to click Flush Cache,

49
00:02:34,270 --> 00:02:36,370
we can actually clear the Cache and if I were to

50
00:02:36,370 --> 00:02:40,280
reload this page and then check out our console. You can see

51
00:02:40,280 --> 00:02:42,610
that we ran a database query again, and if I go back

52
00:02:42,610 --> 00:02:46,550
to our page here and reload it, we can see that we

53
00:02:46,550 --> 00:02:49,010
have one item in our Cache, cause we just loaded it. This

54
00:02:49,010 --> 00:02:51,620
is kind of neat you can type in a, a k, key here

55
00:02:51,620 --> 00:02:55,990
and click Display and it'll show you the value, in that Cache.

56
00:02:55,990 --> 00:02:59,260
And in this case it as top is pickled. Pickled is the,

57
00:02:59,260 --> 00:03:03,210
Python library for converting a Python Object in to a string. And

58
00:03:03,210 --> 00:03:07,380
then the Google memcache library is automatically doing that for us. So,

59
00:03:08,890 --> 00:03:10,970
yeah pretty neat handy tool here. If you want to test your

60
00:03:10,970 --> 00:03:12,830
caching you can sit here and flush it and you can see how

61
00:03:12,830 --> 00:03:15,660
many items are in the Cache and manipulate it that way. Anyway

62
00:03:15,660 --> 00:03:18,810
that's how you implement ad memcache to your App. Once you understand the

63
00:03:18,810 --> 00:03:22,020
algorithm for caching, you know check the Cache, return the value, hit

64
00:03:22,020 --> 00:03:24,220
the deviant. You know that sort of thing, using memcache is a sinch.
