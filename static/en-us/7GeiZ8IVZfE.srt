1
00:00:00,170 --> 00:00:02,960
Both Panda's and
NumPy have special data structures,

2
00:00:02,960 --> 00:00:05,180
made to represent one-dimensional data.

3
00:00:05,180 --> 00:00:08,269
By the way, NumPy stands for
Numerical Python.

4
00:00:08,269 --> 00:00:10,914
In Pandas, this data structure
is called a series, and

5
00:00:10,914 --> 00:00:13,050
in NumPy it is called an array.

6
00:00:13,050 --> 00:00:15,355
Pandas and
NumPy also both have structures for

7
00:00:15,355 --> 00:00:18,730
two-dimensional data, which you'll
learn about in the next lesson.

8
00:00:18,730 --> 00:00:20,730
I typically prefer to
use Pandas' series,

9
00:00:20,730 --> 00:00:23,200
since they have more
features than NumPy arrays.

10
00:00:23,200 --> 00:00:26,360
But NumPy arrays are simpler, so
I'm going to cover those first.

11
00:00:26,360 --> 00:00:29,110
Panda series are built on
top of NumPy arrays, so

12
00:00:29,110 --> 00:00:33,390
it will be important to understand NumPy
arrays when you move on to using series.

13
00:00:33,390 --> 00:00:36,720
In many ways, a NumPy array
is similar to a Python list.

14
00:00:36,720 --> 00:00:39,660
It contains a sequence of elements and
those can be anything.

15
00:00:39,660 --> 00:00:42,192
But suppose you had a Numpy
array of US state codes.

16
00:00:42,192 --> 00:00:47,800
So here's Alabama, Alaska, Arizona,
Arkansas, California, and so on.

17
00:00:47,800 --> 00:00:51,460
I included quotes around these
states because they are strings.

18
00:00:51,460 --> 00:00:54,290
Like lists, the elements of
a NumPy array are in order, and

19
00:00:54,290 --> 00:00:56,910
you can access elements
by their position.

20
00:00:56,910 --> 00:00:59,660
In this NumPy array,
Alaska is at position 0,

21
00:00:59,660 --> 00:01:01,470
Arkansas is at position 1, and so on.

22
00:01:03,280 --> 00:01:05,530
So if you had a NumPy array named a,

23
00:01:05,530 --> 00:01:11,210
then a[0] would return the string AL for
Alaska.

24
00:01:11,210 --> 00:01:15,160
Also like lists, you can access a range
of elements from a NumPy array using

25
00:01:15,160 --> 00:01:17,040
something called slicing.

26
00:01:17,040 --> 00:01:18,951
Again, the syntax is the same as for
lists.

27
00:01:18,951 --> 00:01:26,610
So, a[1:3], would return an NumPy
array containing Alaska and Arizona.

28
00:01:26,610 --> 00:01:29,740
Note that just like for lists, the upper
bound is not inclusive, so I got

29
00:01:29,740 --> 00:01:34,820
the element at position 1 and position
2, but not the element at position 3.

30
00:01:34,820 --> 00:01:36,450
And finally you can use for

31
00:01:36,450 --> 00:01:40,330
loops with NumPy arrays using code like,
for x in a:.

32
00:01:40,330 --> 00:01:44,190
So, what are the differences between
a NumPy array and a Python list?

33
00:01:44,190 --> 00:01:47,630
First, NumPy arrays are designed for
each element to have the same data type.

34
00:01:48,710 --> 00:01:52,340
So, either each element should be
a string, each element should be an int,

35
00:01:52,340 --> 00:01:55,280
each element should be a boolean or
something else.

36
00:01:55,280 --> 00:01:57,700
You can create a Python list
that contains some strings,

37
00:01:57,700 --> 00:02:01,820
some ints, some booleans, and
so on, all mixed together.

38
00:02:01,820 --> 00:02:03,710
And you can still do that in NumPy, but

39
00:02:03,710 --> 00:02:06,400
it was designed for
each array to have a single data type.

40
00:02:07,660 --> 00:02:10,508
Second, NumPy includes a bunch
of convenient functions.

41
00:02:10,508 --> 00:02:14,050
For example, the functions to take
the mean into standard deviation.

42
00:02:14,050 --> 00:02:16,910
Now you saw last lesson that you
can also use these functions on

43
00:02:16,910 --> 00:02:18,130
Python lists.

44
00:02:18,130 --> 00:02:22,080
But, if your data is in NumPy array
then these functions will be faster.

45
00:02:22,080 --> 00:02:25,214
Now this is one place that
the type of the elements matters,

46
00:02:25,214 --> 00:02:29,098
since it only makes sense to take the
mean of the array if all of the elements

47
00:02:29,098 --> 00:02:29,991
are numerical.

48
00:02:29,991 --> 00:02:33,405
Another difference is that NumPy
arrays can be multidimensional.

49
00:02:33,405 --> 00:02:35,255
You'll learn more about this
in the next lesson, but

50
00:02:35,255 --> 00:02:37,795
it's similar to making
a list of lists in Python.

51
00:02:38,855 --> 00:02:41,725
On the next screen you'll be given
a chance to play around with some NumPy

52
00:02:41,725 --> 00:02:43,455
code, and see what it does.

53
00:02:43,455 --> 00:02:46,295
I recommend that you read each section
of code, and predict what will be

54
00:02:46,295 --> 00:02:51,670
printed, then change false to true, and
use Test Run to see if you were right.

55
00:02:51,670 --> 00:02:54,970
If you're not sure what will be
printed just use Test Run to find out.

56
00:02:54,970 --> 00:02:58,720
You can also add your own code and
try out other things if you're curious.

57
00:02:58,720 --> 00:03:00,480
At the bottom of the code,
there's a function for

58
00:03:00,480 --> 00:03:03,800
you to write called max_employment
to check your understanding.

59
00:03:03,800 --> 00:03:05,720
It take these arguments to NumPy arrays.

60
00:03:05,720 --> 00:03:07,540
The first one contains country names and

61
00:03:07,540 --> 00:03:10,490
the second one contains
employment data for each country.

62
00:03:10,490 --> 00:03:13,770
The country names are in the same
order as the employment data.

63
00:03:13,770 --> 00:03:17,180
The function should return the name of
the country with the highest employment,

64
00:03:17,180 --> 00:03:21,050
and the corresponding maximum employment
value based on the given data.

65
00:03:21,050 --> 00:03:24,900
When you click Test Run, in addition to
seeing the output of any code you write,

66
00:03:24,900 --> 00:03:27,630
you'll also see the result of running
your function on the full employment

67
00:03:27,630 --> 00:03:30,000
data set for a few different years.

68
00:03:30,000 --> 00:03:33,320
If you click Submit, the grader will
check whether your function is correct.

69
00:03:33,320 --> 00:03:36,000
If you want to test your function on
something smaller than the full data

70
00:03:36,000 --> 00:03:39,640
set, I recommend testing it out on
the arrays provided at the top of this

71
00:03:39,640 --> 00:03:40,680
section of code.

72
00:03:40,680 --> 00:03:43,725
This one contains the first 20
countries in the data set, and

73
00:03:43,725 --> 00:03:47,591
this one contains employment data for
those countries in the year, 2007.

74
00:03:47,591 --> 00:03:50,222
Since those arrays are named
countries and employment,

75
00:03:50,222 --> 00:03:53,288
you can test your function on those
arrays by using the line print,

76
00:03:53,288 --> 00:03:55,617
max_employment(countries, employment).
