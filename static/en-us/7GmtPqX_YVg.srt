1
00:00:00,240 --> 00:00:02,560
So in order to learn about programming, we need to learn

2
00:00:02,560 --> 00:00:05,820
new language. This will be a way to describe what we want

3
00:00:05,820 --> 00:00:08,109
the computer to do in a much more precise way than we

4
00:00:08,109 --> 00:00:11,150
could in a natural language like English. And it's a way to

5
00:00:11,150 --> 00:00:14,830
describe programs that the Python interpreter can run. One of the

6
00:00:14,830 --> 00:00:17,810
best ways to learn a programming language is to just try things.

7
00:00:17,810 --> 00:00:20,460
You can try that in the Python interpreter that's running in your

8
00:00:20,460 --> 00:00:25,380
browser. Let's, for example, try running print 2 plus 2 plus. In

9
00:00:25,380 --> 00:00:28,530
English, someone could probably guess that the value of 2 plus

10
00:00:28,530 --> 00:00:32,049
2 plus should be 4. In Python, when we try running

11
00:00:32,049 --> 00:00:34,390
this, we get an error. And the reason we get an

12
00:00:34,390 --> 00:00:37,190
error is that this is not actually part of the Python

13
00:00:37,190 --> 00:00:41,390
language. The Python interpreter only knows how to evaluate code that's

14
00:00:41,390 --> 00:00:44,570
part of the Python language. If you try to evaluate something

15
00:00:44,570 --> 00:00:47,120
that's not part of the Python language, it will give you

16
00:00:47,120 --> 00:00:50,480
an error. Errors look a bit scary, the way they print out.

17
00:00:50,480 --> 00:00:52,960
But there's nothing bad that can happen. It's perfectly okay to

18
00:00:52,960 --> 00:00:56,050
try running code. If it produces an error, that's one of

19
00:00:56,050 --> 00:00:58,840
the ways to learn about programming. The error we got here

20
00:00:58,840 --> 00:01:01,670
is what's called a syntax error. That means that what we

21
00:01:01,670 --> 00:01:05,730
tried to evaluate is not actually part of the Python language.

22
00:01:05,730 --> 00:01:08,790
Like English, Python has a grammar that defines what strings are

23
00:01:08,790 --> 00:01:11,970
in the language. In English, we can make lots of sentences

24
00:01:11,970 --> 00:01:13,610
that are not completely grammatical, and

25
00:01:13,610 --> 00:01:15,560
people still understand them, but there's

26
00:01:15,560 --> 00:01:18,770
some underlying grammar behind the language. Those of you who are

27
00:01:18,770 --> 00:01:22,110
native English speakers, might have learned rules like this in what was

28
00:01:22,110 --> 00:01:24,960
once called grammar school. Those of you who learned English as a

29
00:01:24,960 --> 00:01:26,810
second language, probably learned rules like

30
00:01:26,810 --> 00:01:28,560
this when you were learning English.

31
00:01:28,560 --> 00:01:30,200
So, English has a rule that says you can make a

32
00:01:30,200 --> 00:01:34,760
sentence. By combining a subject with a verb, followed by an object.

33
00:01:35,880 --> 00:01:38,470
Almost every language has a rule sort of like this. The order

34
00:01:38,470 --> 00:01:41,560
of the subject and the verb and the object might be different,

35
00:01:41,560 --> 00:01:43,500
but there's a way to combine those three things to

36
00:01:43,500 --> 00:01:48,370
form a sentence. The subject could be a noun. The object

37
00:01:48,370 --> 00:01:51,080
could also be a noun. And then each of these

38
00:01:51,080 --> 00:01:53,130
parts of speech, well, we have lots of things they could

39
00:01:53,130 --> 00:01:57,840
be. So a verb could be the word eat. A

40
00:01:57,840 --> 00:02:00,650
verb could also be the word like, and there are lots

41
00:02:00,650 --> 00:02:04,350
of other words that the verb could be. A noun could

42
00:02:04,350 --> 00:02:07,130
be the word I, a noun could be the word Python,

43
00:02:07,130 --> 00:02:10,032
a noun could be the word cookies. The actual English

44
00:02:10,032 --> 00:02:13,740
grammar is of course, much larger and more complex than this.

45
00:02:13,740 --> 00:02:15,650
But we can still think of it as having rules like

46
00:02:15,650 --> 00:02:18,380
this that allow us to form sentences from the parts of

47
00:02:18,380 --> 00:02:21,000
speech that we know, from the words that make those

48
00:02:21,000 --> 00:02:24,060
parts of speech. The way we're writing grammars here is a

49
00:02:24,060 --> 00:02:29,150
notation called Backus-Naur Form. And this was invented by John Backus.

50
00:02:29,150 --> 00:02:32,410
So John Backus was the lead designer of the Fortran programming

51
00:02:32,410 --> 00:02:35,980
language back in the 1950s at IBM. This was one

52
00:02:35,980 --> 00:02:39,050
of the first widely used programming languages. And the way

53
00:02:39,050 --> 00:02:42,210
they described the Fortran language was with lots of examples

54
00:02:42,210 --> 00:02:44,810
and text explaining what they meant. And this is a shot

55
00:02:44,810 --> 00:02:47,670
from the actual manual for the first version of Fortran.

56
00:02:47,670 --> 00:02:51,440
This works okay, many programmers were able to understand it and

57
00:02:51,440 --> 00:02:54,330
guess correctly what it meant, but was not nearly precise

58
00:02:54,330 --> 00:02:57,660
enough. And when it came time to design a later language,

59
00:02:57,660 --> 00:03:00,090
which was the language called ALGOL, it became

60
00:03:00,090 --> 00:03:02,730
clear that this informal way of describing languages

61
00:03:02,730 --> 00:03:05,320
wasn't precise enough. And John Backus invented the

62
00:03:05,320 --> 00:03:08,420
notation that we're using here to describe languages.
