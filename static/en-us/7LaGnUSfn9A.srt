1
00:00:00,000 --> 00:00:04,000
We see that this regular expression starts with an unmodified "a".

2
00:00:04,000 --> 00:00:10,000
So we can rule out immediately any of these strings at the bottom that start with a "b".

3
00:00:10,000 --> 00:00:12,000
They're not going to match it. The first letter has to be an "a".

4
00:00:12,000 --> 00:00:16,000
So we have an "a," and then remember that open parenthesis, question mark, colon,

5
00:00:16,000 --> 00:00:22,000
and close parenthesis are a Python syntax loosely just meaning open and close parentheses.

6
00:00:22,000 --> 00:00:27,000
So we've got an "a" followed by zero or more copies of "a? b*".

7
00:00:27,000 --> 00:00:32,000
"B*" can be no b's, and this " * " can be once,

8
00:00:32,000 --> 00:00:37,000
so this could be "a?" or just "aa," so yeah, we can match that.

9
00:00:37,000 --> 00:00:44,000
How about this, "aab"? Same strategy as before except that we make this "b*" be one "b".

10
00:00:44,000 --> 00:00:52,000
We can match this "abab"--"a", "b." We'll take one of these and then we'll repeat this whole group once.

11
00:00:52,000 --> 00:00:57,000
This time, we'll take the "a" that we really want and one more "b". Yeah, we can match this.

12
00:00:57,000 --> 00:01:03,000
"Abbabb", "a". We'll skip over this optional "a?". We will have this "*" be twice.

13
00:01:03,000 --> 00:01:05,000
We'll repeat the whole thing. We'll include the optional "a?".

14
00:01:05,000 --> 00:01:08,000
We will have this "*" be twice and now we're done. Yeah, we can match that.

15
00:01:08,000 --> 00:01:13,000
And then finally here, just like the previous string, but we want one more "a" at the end.

16
00:01:13,000 --> 99:59:59,999
Well, we'll take the outermost loop one more time. Take this. Not take the star.
