1
00:00:00,730 --> 00:00:04,310
As our builds become increasingly more
complex, we want to ensure that we don't

2
00:00:04,310 --> 00:00:08,720
redo any work that has already been done
the last time we executed our build.

3
00:00:08,720 --> 00:00:10,980
This is especially important
during development,

4
00:00:10,980 --> 00:00:15,700
when we run our builds often many times
a day with just some minor changes.

5
00:00:15,700 --> 00:00:18,160
It would be a huge impediment
to the development process

6
00:00:18,160 --> 00:00:21,570
if our build had to start
from scratch every time.

7
00:00:21,570 --> 00:00:25,080
We call the idea of only doing
the minimum amount of work necessary

8
00:00:25,080 --> 00:00:26,840
incremental builds.

9
00:00:26,840 --> 00:00:30,240
For example,
let's consider an Android application.

10
00:00:30,240 --> 00:00:34,390
Building our app requires compiling
our code, generating source files, and

11
00:00:34,390 --> 00:00:37,370
packaging static resources
into the final APK.

12
00:00:37,370 --> 00:00:40,470
If we were to say,
change one of our layout files,

13
00:00:40,470 --> 00:00:42,670
we don't want to have to
compile our code again.

14
00:00:42,670 --> 00:00:44,150
That would be unnecessary.

15
00:00:44,150 --> 00:00:48,890
Gradle accomplishes this by tracking
each task's inputs and outputs.

16
00:00:48,890 --> 00:00:53,620
Before each task is run, Gradle saves a
snapshot of the inputs used by the task.

17
00:00:53,620 --> 00:00:57,460
If that particular task doesn't have
any snap shots of its input yet, or

18
00:00:57,460 --> 00:01:01,120
if the inputs have changed,
then Gradle will run the task again.

19
00:01:01,120 --> 00:01:05,269
Gradle additionally saves a snapshot
of the outputs created by this task.

20
00:01:05,269 --> 00:01:07,530
The next time Gradle goes
to run the same task,

21
00:01:07,530 --> 00:01:10,550
it compares the inputs to
the snap shot it saved earlier.

22
00:01:10,550 --> 00:01:14,390
If the inputs match,
Gradle then also checks the outputs.

23
00:01:14,390 --> 00:01:17,850
If the outputs haven't been messed
with since the last time the task ran,

24
00:01:17,850 --> 00:01:19,670
then the task can be skipped.

25
00:01:19,670 --> 00:01:23,700
If the outputs have changed or are
missing, then the task must run again.

26
00:01:23,700 --> 00:01:26,230
When Gradle determines that
no work needs to be done and

27
00:01:26,230 --> 00:01:30,424
the task can be skipped,
the task is said to be up-to-date.
