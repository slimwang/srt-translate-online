1
00:00:00,170 --> 00:00:03,000
Now one thing that looks a little
funny about this data is that every

2
00:00:03,000 --> 00:00:04,660
value is a string.

3
00:00:04,660 --> 00:00:08,370
But days to cancel looks like
logically it could be an integer.

4
00:00:08,370 --> 00:00:10,530
Cancel date is clearly a date and

5
00:00:10,530 --> 00:00:14,895
is cancelled looks like a boolean,
but they are representative strings.

6
00:00:14,895 --> 00:00:19,585
That's because the CSV library doesn't
try to detect what type each column has.

7
00:00:19,585 --> 00:00:22,525
It's up to me to convert
these data types if I want.

8
00:00:22,525 --> 00:00:25,857
I could wait and convert them
later when I really need to.

9
00:00:25,857 --> 00:00:29,367
For example, every time I need to
check weather is cancelled is true,

10
00:00:29,367 --> 00:00:34,167
I could use the code, if is cancelled
is equal to the string true,

11
00:00:34,167 --> 00:00:38,767
rather than the simpler if is canceled
that I could use if I had a boolean.

12
00:00:38,767 --> 00:00:41,407
However, I prefer to update
all my data types upfront

13
00:00:41,407 --> 00:00:44,777
because otherwise I tend to forget that
they're not the type I expect, and

14
00:00:44,777 --> 00:00:46,847
then I waste time debugging later.

15
00:00:46,847 --> 00:00:50,000
I've written some code for you which
you can find in your starter notebook

16
00:00:50,000 --> 00:00:52,400
which updates a bunch of the types.

17
00:00:52,400 --> 00:00:53,410
Here you can see the main

18
00:00:53,410 --> 00:00:56,350
loop that's updating the types
of the enrollments data.

19
00:00:56,350 --> 00:00:59,870
I didn't update the type of account key,
because even though the account key

20
00:00:59,870 --> 00:01:03,680
looked like an integer, I'm never
going to do arithmetic with it.

21
00:01:03,680 --> 00:01:05,790
I'm not going to add up
two account keys, for

22
00:01:05,790 --> 00:01:08,390
example, so,
the types might as well remain a string.

23
00:01:09,530 --> 00:01:13,580
I did convert the cancel date to
a python date time object, and

24
00:01:13,580 --> 00:01:15,840
I wrote this function to do that for me.

25
00:01:15,840 --> 00:01:18,740
First I check whether the date
is actually the empty string,

26
00:01:18,740 --> 00:01:20,470
in which case I return none.

27
00:01:20,470 --> 00:01:21,070
For example,

28
00:01:21,070 --> 00:01:24,770
the cancel date could be an empty string
if the student hadn't cancelled yet.

29
00:01:24,770 --> 00:01:29,950
Otherwise, I use the strptime function
to parse the string as a date time.

30
00:01:29,950 --> 00:01:32,770
Don't worry if you've never
seen the strptime function.

31
00:01:32,770 --> 00:01:35,520
I'm going to take care of the date
time handling in this lesson.

32
00:01:36,800 --> 00:01:39,550
Similarly, for
the days to cancel function,

33
00:01:39,550 --> 00:01:42,330
I've written a function
called parse maybe int.

34
00:01:42,330 --> 00:01:45,610
This function takes something that
might be an integer but might not be.

35
00:01:46,710 --> 00:01:48,180
For days to cancel,

36
00:01:48,180 --> 00:01:51,590
it might not be an integer if
the student hasn't cancelled yet.

37
00:01:51,590 --> 00:01:54,750
If the argument is the empty string,
this function will return none and

38
00:01:54,750 --> 00:01:57,940
otherwise it will cast
the argument to an integer.

39
00:01:57,940 --> 00:01:59,970
Then, for the is canceled column,

40
00:01:59,970 --> 00:02:03,048
I check if the value is
equal to the string true.

41
00:02:03,048 --> 00:02:05,690
So this comparison will
return the boolean true

42
00:02:05,690 --> 00:02:09,720
if the field is equal to the string
true and false otherwise.

43
00:02:09,720 --> 00:02:12,060
The rest of the conversions are similar.

44
00:02:12,060 --> 00:02:16,090
The only other thing that's a bit
strange is in the daily engagement table

45
00:02:16,090 --> 00:02:20,350
where you can see that a few times
I've cast the number to a float first

46
00:02:20,350 --> 00:02:21,480
and then an end.

47
00:02:21,480 --> 00:02:23,020
To see why, I'm going to scroll up and

48
00:02:23,020 --> 00:02:26,200
see what the lesson's
completed value looked like.

49
00:02:26,200 --> 00:02:29,765
The first value for
lessons completed was zero point zero.

50
00:02:29,765 --> 00:02:31,015
Because of the decimal point,

51
00:02:31,015 --> 00:02:33,865
directly converting the string
to an integer would fail.

52
00:02:33,865 --> 00:02:37,515
But, logically, I know lessons completed
should be an integer since if you only

53
00:02:37,515 --> 00:02:42,115
complete half a lesson, you'll be marked
as completing zero lessons, not 0.5.

54
00:02:42,115 --> 00:02:45,245
So, once I've converted the value
to a floating point number,

55
00:02:45,245 --> 00:02:47,375
I then convert it to an integer.

56
00:02:47,375 --> 00:02:51,495
I've done the same thing for number of
courses visited and projects completed.

57
00:02:51,495 --> 00:02:54,200
This code is included in
the starter notebook.

58
00:02:54,200 --> 00:02:55,850
Once you have everything set up locally,

59
00:02:55,850 --> 00:02:59,110
you should make sure you
run each of these cells.

60
00:02:59,110 --> 00:03:01,830
That way you'll have the correct types
throughout the rest of the lesson.

61
00:03:02,970 --> 00:03:06,510
In general, make sure you run all
the provided starter code, or

62
00:03:06,510 --> 00:03:08,460
some later code may not work correctly.
