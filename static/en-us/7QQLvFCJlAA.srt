1
00:00:00,290 --> 00:00:03,630
So let's look at how
the processor sees the memory.

2
00:00:03,630 --> 00:00:08,050
The processor sees what we call,
physical memory, which is the memory

3
00:00:08,050 --> 00:00:13,240
contained in the actual memory modules,
that we bought and put in the system.

4
00:00:13,240 --> 00:00:18,140
The amount of that memory sometimes,
even lower, than 4GB.

5
00:00:18,140 --> 00:00:23,130
It is almost never 4GB per process that
we have in the system, because there

6
00:00:23,130 --> 00:00:28,490
can be tens or even hundreds of
processes in a modern operating system.

7
00:00:28,490 --> 00:00:32,080
And it is never 16 exabytes per process.

8
00:00:32,080 --> 00:00:36,540
This is how much memory we need, if we
have 2 to the 64th memory locations,

9
00:00:36,540 --> 00:00:40,150
which is what you would
have with a 64-bit address.

10
00:00:41,250 --> 00:00:46,030
So if each process in a 64-bit machine
thinks it has this much memory,

11
00:00:46,030 --> 00:00:49,910
there is just no way we can have
enough actual memory for that.

12
00:00:49,910 --> 00:00:53,680
So we conclude that the amount
of physical memory we have

13
00:00:53,680 --> 00:00:56,880
is usually less than what
all the programs can access.

14
00:00:56,880 --> 00:01:01,000
If all the programs access all
the memory they possibly can,

15
00:01:01,000 --> 00:01:04,910
they will access much, much more
than the memory we actually have.

16
00:01:04,910 --> 00:01:09,490
The addresses that the processor
uses for the physical memory

17
00:01:09,490 --> 00:01:14,340
have a one to one mapping to the bytes
or words in the physical memory.

18
00:01:14,340 --> 00:01:18,980
So a given address always goes
to the same physical location.

19
00:01:18,980 --> 00:01:23,070
And the physical location always
has exactly one physical address.
