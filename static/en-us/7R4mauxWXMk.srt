1
00:00:00,390 --> 00:00:03,740
Now that we know how to organize our
tests, let's start writing our own.

2
00:00:03,740 --> 00:00:06,260
You already wrote your first
test in a previous lesson, but

3
00:00:06,260 --> 00:00:09,180
we'll now break that test down and
explain each part.

4
00:00:10,290 --> 00:00:12,575
Each test starts with a call to expect.

5
00:00:12,575 --> 00:00:15,915
You can think of this as
the launching point of any test.

6
00:00:15,915 --> 00:00:17,865
It's what starts the process.

7
00:00:17,865 --> 00:00:21,455
The expect function accepts
a single value called the actual

8
00:00:21,455 --> 00:00:22,935
that we want to test.

9
00:00:22,935 --> 00:00:27,522
In this example,
the actual is add 0.1, 0.2.

10
00:00:27,522 --> 00:00:30,187
We then need to tell
the testing framework

11
00:00:30,187 --> 00:00:34,147
what kind of comparison we want
to use against the actual.

12
00:00:34,147 --> 00:00:37,127
The comparison method is
called the matcher and

13
00:00:37,127 --> 00:00:40,350
is a method chained after
the call to expect.

14
00:00:41,410 --> 00:00:45,260
Jasmine includes a lot of matcher
functions and you can even add your own.

15
00:00:45,260 --> 00:00:49,720
In this example our matcher is toBe
which is the equivalent of a strict

16
00:00:49,720 --> 00:00:51,550
equals comparison.

17
00:00:51,550 --> 00:00:56,790
Finally, we pass the expected value to
our matcher, in this case the value 0.3

18
00:00:56,790 --> 00:01:02,790
which is what we would expect
the add 0.1, 0.2 to return.

19
00:01:02,790 --> 00:01:06,010
All in all, you can think of this
test to look something like this

20
00:01:06,010 --> 00:01:08,042
once it has been evaluated
by the framework.

21
00:01:08,042 --> 00:01:12,603
Add 0.1, 0.2 equal, equals, equals 0.3.

22
00:01:12,603 --> 00:01:16,260
If that expression returns true,
this test passes.

23
00:01:16,260 --> 00:01:18,050
Otherwise, it fails.

24
00:01:18,050 --> 00:01:23,000
You can also negate a test by chaining
the word not, before the matcher.

25
00:01:23,000 --> 00:01:26,510
For example,
this test would evaluate to true,

26
00:01:26,510 --> 00:01:31,064
since add 0.1, 0.2 does not equal 0.1.
