1
00:00:00,400 --> 00:00:03,520
Just to put our discussion in perspective, let's look

2
00:00:03,520 --> 00:00:06,320
at a traditional structure of an operating system. In

3
00:00:06,320 --> 00:00:08,080
the traditional structure of the operating system there is

4
00:00:08,080 --> 00:00:11,140
something called a page cache, which is in DRAM, and

5
00:00:11,140 --> 00:00:15,520
this page cache is supporting both the file system

6
00:00:15,520 --> 00:00:18,810
and the virtual memory subsystem. And the file system has

7
00:00:18,810 --> 00:00:22,900
opened files explicitly from the storage and they live

8
00:00:22,900 --> 00:00:25,830
in the page cache that is in the physical memory.

9
00:00:25,830 --> 00:00:30,100
And similarly, processes are executing in the virtual memory

10
00:00:30,100 --> 00:00:33,200
and the virtual memory of every process has to

11
00:00:33,200 --> 00:00:36,770
be backed by physical memory. Therefore, the page cache

12
00:00:36,770 --> 00:00:39,640
in DRAM contains the contents of the virtual pages.

13
00:00:39,640 --> 00:00:41,690
And of course, all these virtual pages are in

14
00:00:41,690 --> 00:00:44,730
the storage subsystem. So let's, for the purpose of

15
00:00:44,730 --> 00:00:47,960
our discussion, we will focus only on the virtual

16
00:00:47,960 --> 00:00:51,270
memory subsystem. And in the virtual memory subsystem the

17
00:00:51,270 --> 00:00:54,190
data structures, that are kept per process

18
00:00:54,190 --> 00:00:56,400
in a traditional structure, is there is a

19
00:00:56,400 --> 00:00:59,780
PCB, there is a process context block, or

20
00:00:59,780 --> 00:01:03,820
process control block, that contains information specific to

21
00:01:03,820 --> 00:01:06,340
that particular process in terms of, you know,

22
00:01:06,340 --> 00:01:09,240
in terms of memory management, the memory footprint

23
00:01:09,240 --> 00:01:11,990
of that process. And a page table that

24
00:01:11,990 --> 00:01:16,450
describes the mapping between the virtual pages that

25
00:01:16,450 --> 00:01:20,350
is occupied by the process and the physical

26
00:01:20,350 --> 00:01:23,470
memory that has been allocated in the DRAM by

27
00:01:23,470 --> 00:01:26,720
the operating system for backing the virtual pages

28
00:01:26,720 --> 00:01:29,550
of that process. And if the operating system is

29
00:01:29,550 --> 00:01:33,450
also managing the TLB and software then there

30
00:01:33,450 --> 00:01:35,820
will be a global data structure that describes the

31
00:01:35,820 --> 00:01:38,250
current occupancy of the TLB for that particular

32
00:01:38,250 --> 00:01:41,830
process. So, these are the things that it has

33
00:01:41,830 --> 00:01:45,020
per process and of course all the virtual pages

34
00:01:45,020 --> 00:01:47,490
for the process are resident on the storage subsystem

35
00:01:47,490 --> 00:01:49,720
so that if there is a page fault, the

36
00:01:49,720 --> 00:01:53,400
missing virtual page can be brought from the storage subsystem

37
00:01:53,400 --> 00:01:56,165
into the page cache for future access by the

38
00:01:56,165 --> 00:01:58,892
process. So, this is your traditional structure. And what we

39
00:01:58,892 --> 00:02:01,590
want to do is, for scalability, we want to

40
00:02:01,590 --> 00:02:06,720
eliminate as much of the centralized data structures as possible.

41
00:02:06,720 --> 00:02:08,990
That's the key thing that we're going to look at. How we

42
00:02:08,990 --> 00:02:12,270
can do that so that the operating system service will be scalable.
