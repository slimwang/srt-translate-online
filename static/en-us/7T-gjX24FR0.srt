1
00:00:00,070 --> 00:00:03,400
In the multithreaded DAG model,
you represent a parallel computation by

2
00:00:03,400 --> 00:00:07,560
a directed acyclic graph or
a DAG, like this one.

3
00:00:07,560 --> 00:00:12,460
Each vertex is an operation, like a plus
or an addition or a function call or

4
00:00:12,460 --> 00:00:13,740
a branch.

5
00:00:13,740 --> 00:00:18,030
The directed edges show you how
operations depend on one another,

6
00:00:18,030 --> 00:00:20,600
where the sinks depend on the sources.

7
00:00:20,600 --> 00:00:22,710
So this would be a sink and
this would be a source.

8
00:00:22,710 --> 00:00:28,190
And this would say that c depends
on the output or result of b.

9
00:00:28,190 --> 00:00:31,900
Now to keep things simple, I'll always
ask you to assume that there's exactly

10
00:00:31,900 --> 00:00:35,250
one starting vertex and one exit vertex.

11
00:00:35,250 --> 00:00:38,560
So, in this example,
here's the start and here's the exit.

12
00:00:39,610 --> 00:00:42,760
And of course, if you have a DAG and
there are no such vertices,

13
00:00:42,760 --> 00:00:46,040
the start and exit ones,
it's pretty easy to add them.

14
00:00:46,040 --> 00:00:48,430
Now, suppose we have a PRAM machine and

15
00:00:48,430 --> 00:00:50,210
you want to use it to
run the computation.

16
00:00:51,220 --> 00:00:55,320
You start by trying to find any
operations that are ready to go.

17
00:00:55,320 --> 00:00:59,340
That is, all of their input
dependencies are satisfied.

18
00:00:59,340 --> 00:01:02,300
So, in this example,
take a look at the starting vertex.

19
00:01:02,300 --> 00:01:04,030
That one's ready to go.

20
00:01:04,030 --> 00:01:07,640
Since it's ready to go,
meaning it has no dependencies.

21
00:01:07,640 --> 00:01:12,240
We can assign it to any processor that's
free, and go ahead and start executing.

22
00:01:12,240 --> 00:01:15,200
So here, I've assigned starting
vertex s to processor three.

23
00:01:15,200 --> 00:01:17,040
And processor three will
start executing it.

24
00:01:18,150 --> 00:01:20,610
Now, as soon as a processor
finishes its operation,

25
00:01:20,610 --> 00:01:23,050
it enables any of its
successors to begin.

26
00:01:24,390 --> 00:01:27,820
So, in this example,
a and b only depend on s.

27
00:01:27,820 --> 00:01:30,460
So as soon as s is finished,
a and b can start.

28
00:01:31,530 --> 00:01:33,110
So now, a and b are ready to go.

29
00:01:34,150 --> 00:01:38,990
So we can look for any free processors
and assign a and b to them.

30
00:01:38,990 --> 00:01:42,520
So, for example, it looks like processor
one and processor three are free.

31
00:01:42,520 --> 00:01:45,050
So let's assign a and b to them.

32
00:01:45,050 --> 00:01:47,980
Now, when processor one and processor
three finish their units of work,

33
00:01:47,980 --> 00:01:51,135
then that will enable other successors.

34
00:01:51,135 --> 00:01:55,985
In this case, vertices c and d, and this
process will repeat until we finish.

35
00:01:57,025 --> 00:02:00,665
Now, at every step of the computation,
this problem of how to take free units

36
00:02:00,665 --> 00:02:04,535
of work and assign them to processors
is called a scheduling problem.

37
00:02:04,535 --> 00:02:07,985
Scheduling is a huge topic and
you will hear more about it soon enough.

38
00:02:09,435 --> 00:02:12,040
Given a DAG and a PRAM,
here's a question.

39
00:02:12,040 --> 00:02:14,790
How long will it take to run the DAG?

40
00:02:14,790 --> 00:02:17,660
To answer this question,
you need a cost model.

41
00:02:17,660 --> 00:02:21,150
For now, I'm going to use a cost
model that makes three assumptions.

42
00:02:21,150 --> 00:02:25,170
The first assumption is that all
processors run at the same speed.

43
00:02:25,170 --> 00:02:28,750
The second assumption is that each
operation takes one unit of time.

44
00:02:28,750 --> 00:02:32,610
And the last assumption is that
these edges don't have any

45
00:02:32,610 --> 00:02:35,170
cost associated with them.

46
00:02:35,170 --> 00:02:37,110
So let's start with
these assumptions and

47
00:02:37,110 --> 00:02:39,180
let's apply them to some sample DAG's.
