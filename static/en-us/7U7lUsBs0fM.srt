1
00:00:00,280 --> 00:00:03,188
Let's see how we would do this in BlueJ. Here's the loop that we had before,

2
00:00:03,188 --> 00:00:06,048
which used zero to decide when to quit, but now we want to go as long as

3
00:00:06,048 --> 00:00:10,867
there's another double. We can use the hasNextDouble method to ask the scanner

4
00:00:10,867 --> 00:00:15,098
if the next token it has is a double. Then we basically want to do the same

5
00:00:15,098 --> 00:00:19,220
stuff as before, right, asking for input and adding it to the sum in counting.

6
00:00:19,220 --> 00:00:24,102
Let's just try this. Hm, still running, still running. Okay, I think there's a

7
00:00:24,102 --> 00:00:30,114
bug here. So, let's stop this. Look at the code again. Where could this have

8
00:00:30,114 --> 00:00:33,892
got stuck? I've never seen simple variable assignments like this get stuck

9
00:00:33,892 --> 00:00:38,256
before. So, I think that's not the problem. Now, here I check if there's

10
00:00:38,256 --> 00:00:41,710
another double. Oh, there isn't another double, because I haven't asked for one

11
00:00:41,710 --> 00:00:45,050
yet. So, I'll need to ask the user for a double before I check if there is

12
00:00:45,050 --> 00:00:50,470
another double. And now, I'll have to ask again somewhere in the loop. I don't

13
00:00:50,470 --> 00:00:54,520
want to ask immediately because then I'll ask twice. So, I probably want to ask

14
00:00:54,520 --> 00:00:59,663
at the end, after I process the value I already asked for. Let's test this

15
00:00:59,663 --> 00:01:06,930
again. I can enter three, and four, and zero. Well, it looks like this message

16
00:01:06,930 --> 00:01:11,600
isn't right yet. But, if I add a q then I get my average back. That's

17
00:01:11,600 --> 00:01:15,370
interesting. This is the average of only the first two numbers, it didn't

18
00:01:15,370 --> 00:01:19,590
include the zero, I guess we're still not there yet. We're only incrementing

19
00:01:19,590 --> 00:01:21,420
the count if the value is not zero.

20
00:01:21,420 --> 00:01:21,756
[LAUGH]

21
00:01:21,756 --> 00:01:25,449
We've also got this cruft with the done, we're not going to need that anymore.

22
00:01:25,449 --> 00:01:30,432
So, I'll take out everything associated with done. Now, let's see. We have the

23
00:01:30,432 --> 00:01:35,976
user enter something If it's a number, we read it in, add it to the sum, count,

24
00:01:35,976 --> 00:01:43,372
and ask for another one. This is probably what we wanted. Now, if I enter

25
00:01:43,372 --> 00:01:47,729
three, four, and zero, that's better.
