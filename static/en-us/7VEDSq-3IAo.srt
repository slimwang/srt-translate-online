1
00:00:00,480 --> 00:00:04,780
One challenge when using arrays is that the length is fixed.

2
00:00:04,780 --> 00:00:09,100
So let's say that you need to collect some numbers and

3
00:00:09,100 --> 00:00:11,340
you don't quite know how many, you're going to have to make

4
00:00:11,340 --> 00:00:13,680
an array that's large enough to hold them all. But then

5
00:00:13,680 --> 00:00:16,680
you may have fewer numbers in the array. Then it can

6
00:00:16,680 --> 00:00:20,430
hold. We say such an array is partially filled, just like

7
00:00:20,430 --> 00:00:22,840
this beaker over here. You wouldn't want it to be filled

8
00:00:22,840 --> 00:00:25,490
up all the way to the rim. And in this situation you

9
00:00:25,490 --> 00:00:28,450
need to keep track of two things. You need,

10
00:00:28,450 --> 00:00:31,300
the overall length of the array. So here I'll

11
00:00:31,300 --> 00:00:34,290
assume I'll never have more than 1000 numbers. I

12
00:00:34,290 --> 00:00:37,890
allocate my array to have this length and then I

13
00:00:37,890 --> 00:00:42,000
keep a companion variable that I call the size

14
00:00:42,000 --> 00:00:45,070
that tells me how many elements I currently have.

15
00:00:45,070 --> 00:00:47,580
Right now, I don't have any. Whenever I need

16
00:00:47,580 --> 00:00:51,120
to insert a new element, I execute this code here.

17
00:00:51,120 --> 00:00:53,300
I move the new value into values in

18
00:00:53,300 --> 00:00:56,730
bracket size, and then I increment the size. For

19
00:00:56,730 --> 00:00:59,820
example, to insert the very first element, size

20
00:00:59,820 --> 00:01:04,530
is 0, values bracket 0, is now initialized, and

21
00:01:04,530 --> 00:01:10,740
the size becomes 1. The next time, values of 1 Gets filled and so on. Now what

22
00:01:10,740 --> 00:01:16,090
happens if I fill up the array with a thousand values and then want to add the

23
00:01:16,090 --> 00:01:19,170
thousand and first. Let's have a look at that situation.

24
00:01:19,170 --> 00:01:22,530
So here I have my partially filled beaker. I fill in

25
00:01:22,530 --> 00:01:25,760
more and more, and eventually when it gets full, what

26
00:01:25,760 --> 00:01:27,710
choice do I have? I have to get a bigger one

27
00:01:27,710 --> 00:01:30,630
and pour everything into that. It's the same with partially

28
00:01:30,630 --> 00:01:34,580
filled arrays. So, here's my array. It's almost full. Now it's

29
00:01:34,580 --> 00:01:37,920
completely full. I'd like to add another element. So, I'll

30
00:01:37,920 --> 00:01:41,270
get myself an array that's twice as long, copy over all

31
00:01:41,270 --> 00:01:43,710
the values, and now I can forget about

32
00:01:43,710 --> 00:01:47,200
the old array, and insert my next element over

33
00:01:47,200 --> 00:01:49,930
here. Of course, one can program that by hand,

34
00:01:49,930 --> 00:01:53,030
but as it happens There's a library function that

35
00:01:53,030 --> 00:01:55,460
does the work for us. Here it is. The

36
00:01:55,460 --> 00:02:00,060
copyOf function takes an array and then the desired

37
00:02:00,060 --> 00:02:02,480
length of the larger array. It then makes the

38
00:02:02,480 --> 00:02:06,160
larger array and copies the original one in there,

39
00:02:06,160 --> 00:02:09,979
returns the large array, and we just capture it here again. So that's what

40
00:02:09,979 --> 00:02:14,590
you'd have to do if you're ever faced with a situation Where you want

41
00:02:14,590 --> 00:02:18,240
to collect an arbitrary number of values. It's that kind of thing that makes

42
00:02:18,240 --> 00:02:20,210
you appreciate the array lists where you

43
00:02:20,210 --> 00:02:22,090
never have to worry about growing an array.
