1
00:00:00,000 --> 00:00:03,000
We now know that the search tree, if we design it this way,

2
00:00:03,000 --> 00:00:06,000
doesn't have to branch into eight possible assignments

3
00:00:06,000 --> 00:00:09,000
but only five possible assignments--those here.

4
00:00:09,000 --> 00:00:14,000
So now my question is, if we design a search tree using this branching here,

5
00:00:14,000 --> 00:00:16,000
how large is that going to become?

6
00:00:16,000 --> 00:00:18,000
I'm going to give you two hints; the first one is

7
00:00:18,000 --> 00:00:21,000
the height of the search tree--that will be n thirds.

8
00:00:21,000 --> 00:00:24,000
Again, we have to take a little bit of care about the details

9
00:00:24,000 --> 00:00:27,500
if we can find such a structure here, but I think I've shown you often enough

10
00:00:27,500 --> 00:00:31,000
in this unit that this is possible, so hopefully you'll just believe me this time

11
00:00:31,000 --> 00:00:34,000
that it's also possible to always find the structure or, at least,

12
00:00:34,000 --> 00:00:37,000
if you don't find one, decide for certain vertices

13
00:00:37,000 --> 00:00:39,000
if they are going to be in the vertex cover or not.

14
00:00:39,000 --> 00:00:42,000
Now how much wider does this search tree get?

15
00:00:42,000 --> 00:00:46,000
It gets very wide, actually; each time you go down into a new level,

16
00:00:46,000 --> 00:00:51,000
you branch into five additional cases times five, times five, times five, and so on.

17
00:00:51,000 --> 00:00:54,500
Now what I would like to know from you--how big is that search tree?

18
00:00:54,500 --> 00:00:57,000
And I would like you to enter your answer here.

19
00:00:57,000 --> 00:01:01,000
It will be some number to the power of n, and I would like you to provide

20
00:01:01,000 --> 99:59:59,999
two digits after the decimal and round up.
