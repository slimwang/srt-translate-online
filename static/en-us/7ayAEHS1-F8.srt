1
00:00:00,000 --> 00:00:04,000
That's all I'd like to say about shortest paths and weighted graphs in this unit.

2
00:00:04,000 --> 00:00:07,000
There's some I think interesting questions on the homework

3
00:00:07,000 --> 00:00:10,000
for you to get to know this concept better and to work with it and apply it

4
00:00:10,000 --> 00:00:12,000
to some interesting social networks.

5
00:00:12,000 --> 00:00:17,000
I'm going to take this last topic for this unit to be estimating the clustering coefficient.

6
00:00:17,000 --> 00:00:20,000
This is kind of a different idea but I wanted to introduce the idea

7
00:00:20,000 --> 00:00:28,000
of a randomized algorithm and we did that a little bit in the context of the expected

8
00:00:28,000 --> 00:00:30,000
linear time top K algorithm.

9
00:00:30,000 --> 00:00:34,000
And in that case, the answer that it returned was always the correct answer.

10
00:00:34,000 --> 00:00:38,000
But the time that it took was actually a random variable that on average was linear

11
00:00:38,000 --> 00:00:40,000
in the size of the list.

12
00:00:40,000 --> 00:00:43,000
We're going to now look at computing the clustering coefficient approximately.

13
00:00:43,000 --> 00:00:47,000
This is a really useful thing to do if the exact answer doesn't matter very much

14
00:00:47,000 --> 00:00:51,000
which often when you're doing social network analysis it doesn't really

15
00:00:51,000 --> 00:00:54,000
matter that much exactly what something like the clustering coefficient is.

16
00:00:54,000 --> 00:00:58,000
You want to just get the ballpark whether it's heavily clustered or loosely clustered

17
00:00:58,000 --> 00:01:02,000
or slightly more clustered than the movie database or not.

18
00:01:02,000 --> 00:01:05,000
So just getting it correct to a couple of digits is probably sufficient.

19
00:01:05,000 --> 00:01:07,000
But for the case of the clustering coefficient,

20
00:01:07,000 --> 00:01:10,000
getting the exact answer is actually pretty expensive.

21
00:01:10,000 --> 00:01:13,000
So just to remind you, here's some code for computing the clustering coefficient

22
00:01:13,000 --> 00:01:16,000
of a graph with respect to a particular node v.

23
00:01:16,000 --> 00:01:19,000
So given a node v or computing the clustering coefficient involves

24
00:01:19,000 --> 00:01:22,000
looking at all the neighbors of v, going through them one by one,

25
00:01:22,000 --> 00:01:25,000
and looking at the pairs of the neighbors.

26
00:01:25,000 --> 00:01:28,000
And for each pair of neighbors, it does a calculation to compute how connected it is

27
00:01:28,000 --> 00:01:32,000
and then returns a measure of how densely connected the neighbors are.

28
00:01:32,000 --> 00:01:35,000
But that's for each node we need to look at the square

29
00:01:35,000 --> 00:01:37,000
of the degree to actually compute this

30
00:01:37,000 --> 00:01:42,000
So if the degree is rather high if the graph is fairly densely connected

31
00:01:42,000 --> 00:01:46,000
or even if there's just a few nodes that have a very, very high connectivity

32
00:01:46,000 --> 00:01:49,000
like maybe not that many edges, like a star graph for example.

33
00:01:49,000 --> 00:01:52,000
The star graph has just linear number of edges

34
00:01:52,000 --> 00:01:54,000
but it also has linear degree at least in that one node.

35
00:01:54,000 --> 00:01:58,000
And so computing the clustering coefficient for that node is n²

36
00:01:58,000 --> 00:02:02,000
well I guess in this case then the total running time is not going to be n³

37
00:02:02,000 --> 00:02:04,000
because we don't have n² on each of those nodes.

38
00:02:04,000 --> 00:02:06,000
But the running time is still pretty high and n² is pretty high.

39
00:02:06,000 --> 00:02:09,000
And if this is actually a densely connected graph like a clique,

40
00:02:09,000 --> 00:02:13,000
we're talking about n² for each of the nodes in the graph

41
00:02:13,000 --> 00:02:17,000
which totals up to n³ and n³ for something like the Marvel Comics graph

42
00:02:17,000 --> 00:02:22,000
where you have 6000 nodes, 6000³ is a pretty substantial number

43
00:02:22,000 --> 00:02:24,000
even by current computing standards.

44
00:02:24,000 --> 00:02:28,000
So we'd like to have a way of getting a pretty good answer in time a lot less than this.

45
00:02:28,000 --> 00:02:31,000
Here's kind of a formula for the clustering coefficient.

46
00:02:31,000 --> 00:02:35,000
In the clustering coefficient of a graph, you have to sum all the nodes in the graph.

47
00:02:35,000 --> 00:02:37,000
We're going to average it for the n nodes in the graph.

48
00:02:37,000 --> 00:02:41,000
And then for each of those nodes what we do is we sum up for all the pairs of nodes

49
00:02:41,000 --> 00:02:43,000
that are neighbors of the node v.

50
00:02:43,000 --> 00:02:47,000
We sum up whether or not they're connected and then we scale that by

51
00:02:47,000 --> 00:02:49,000
taking the number of possible connections--

52
00:02:49,000 --> 00:02:54,000
2 over the neighbor size of v times the neighbor size of v minus 1.

53
00:02:54,000 --> 00:02:59,000
So would you think for a second about this random process that I've got this brace around here.

54
00:02:59,000 --> 00:03:02,000
So imagine that we choose a v at random from anywhere in the graph

55
00:03:02,000 --> 00:03:06,000
and then we choose a pair of neighbors of that particular chosen node v

56
00:03:06,000 --> 00:03:09,000
completely at random from the graph.

57
00:03:09,000 --> 00:03:12,000
And then we return either 1 or 0 depending whether those two nodes are connected.

58
00:03:12,000 --> 00:03:15,000
What is the average value of this quantity?

59
00:03:15,000 --> 00:03:18,000
And remember the average we're taking here is the average

60
00:03:18,000 --> 00:03:20,000
over these two sources of randomness that we're randomizing

61
00:03:20,000 --> 00:03:23,000
the overall nodes in the network and we're randomizing the overall pairs.

62
00:03:23,000 --> 00:03:28,000
So just to review the expected value of some random variable x is the sum

63
00:03:28,000 --> 00:03:33,000
of all values that the variable can take on, the value of that variable times the probability.

64
00:03:33,000 --> 00:03:38,000
So for example for a six-sided die, the expected value that we get by rolling the die

65
00:03:38,000 --> 00:03:43,000
it's the sum over all sides, the probability of getting that side which is a 6,

66
00:03:43,000 --> 00:03:47,000
times the value on that side which is the numbers 1, 2, 3, 4, 5, or 6.

67
00:03:47,000 --> 00:03:50,000
And so from that we can actually get the average value

68
00:03:50,000 --> 00:03:52,000
that comes up on the die or the expected value.

69
00:03:52,000 --> 00:03:58,000
So given that and if we're given a v, what is the expected value of c[wx]?

70
00:03:58,000 --> 00:04:01,000
Maybe I should ask you. So here's a skeleton to get you started.

71
00:04:01,000 --> 00:04:06,000
I'd like to know the expected value of the c, this connectivity variable, given a graph g

72
00:04:06,000 --> 00:04:11,000
and a node v of that graph and I'll predefine for you the set of neighbors of v

73
00:04:11,000 --> 00:04:18,000
and then the degree of v, the number of neighbors, the expression x in g(w) is true

74
00:04:18,000 --> 00:04:20,000
if x and w are connected in the graph.

75
00:04:20,000 --> 00:04:22,000
So those are the pieces that you need. Calculate this value exactly.

76
00:04:22,000 --> 00:04:26,000
The expected value of the connectivity of w and x

77
00:04:26,000 --> 00:04:30,000
for uniformly and randomly selected w and x from the set of neighbors.

78
00:04:30,000 --> 00:04:32,000
So write that code and we'll test it for you.
