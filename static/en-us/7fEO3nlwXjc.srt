1
00:00:00,400 --> 00:00:04,090
Let's return to our example earlier of me owing

2
00:00:04,090 --> 00:00:08,050
you money, and let's say it so happens that

3
00:00:08,050 --> 00:00:11,810
the mutual clock drift is 5 between you and

4
00:00:11,810 --> 00:00:14,340
me. So my clock, when it reads 3:00 PM,

5
00:00:14,340 --> 00:00:17,170
your clock reads 8:00 PM, so that is the

6
00:00:17,170 --> 00:00:19,710
mutual clock drift that we have. And let's say

7
00:00:19,710 --> 00:00:22,330
that the interprocess communication time, the lower bound on

8
00:00:22,330 --> 00:00:25,440
that is 2. So what happens is that, as I

9
00:00:25,440 --> 00:00:27,950
told you earlier, I am telling you any time

10
00:00:27,950 --> 00:00:30,180
after 5:00 PM. You can get the money from

11
00:00:30,180 --> 00:00:33,310
me, from my bank. And so you instructed your

12
00:00:33,310 --> 00:00:38,148
bank, to debit at 8:00 PM. But unfortunately, your

13
00:00:38,148 --> 00:00:41,322
8:00 PM, is my 3:00 PM, because, our mutual

14
00:00:41,322 --> 00:00:44,830
clock drift is 5. So when your request went

15
00:00:44,830 --> 00:00:46,870
out, it took 2 units of time to get

16
00:00:46,870 --> 00:00:50,480
to the server. Went out and the Central Bank got

17
00:00:50,480 --> 00:00:53,930
your message asking for a debit transaction, but the

18
00:00:53,930 --> 00:00:56,772
credit is not there yet, because I'm waiting till

19
00:00:56,772 --> 00:00:59,920
5:00 PM to actually send my credit advice to

20
00:00:59,920 --> 00:01:03,272
the bank. And therefore your request which came in at

21
00:01:03,272 --> 00:01:06,180
4:00 PM, because you sent it relative to me,

22
00:01:06,180 --> 00:01:08,800
you are five hours ahead, and in terms of

23
00:01:08,800 --> 00:01:12,220
real time, you're actually six hours ahead, and so

24
00:01:12,220 --> 00:01:15,850
the message is received at 4:00 PM, and your request

25
00:01:15,850 --> 00:01:18,250
is declined. And this is coming about, because

26
00:01:18,250 --> 00:01:21,730
of the fact that your interprocess communication time

27
00:01:21,730 --> 00:01:26,570
Mew is less than the mutual clock drift

28
00:01:26,570 --> 00:01:28,250
that we're seeing between these two clocks which

29
00:01:28,250 --> 00:01:30,990
is five. On the other hand, if the

30
00:01:30,990 --> 00:01:34,870
mutual clock drift is less than the inter-process

31
00:01:34,870 --> 00:01:37,980
communication times, in this case, let's say that

32
00:01:37,980 --> 00:01:40,880
the clocks are more well behaved. Epsilon is

33
00:01:40,880 --> 00:01:43,180
one, meaning the mutual clock drift between you

34
00:01:43,180 --> 00:01:46,480
and me is just one. And so, exactly the

35
00:01:46,480 --> 00:01:49,860
same scenario. When it is 3:00 PM, in my

36
00:01:49,860 --> 00:01:54,534
branch, your branch is saying your time is 4:00

37
00:01:54,534 --> 00:01:59,340
PM. Of course, you've given the advice to your branch to debit at 8:00 PM. So at

38
00:01:59,340 --> 00:02:01,840
my local time, 5:00 PM, I send a credit

39
00:02:01,840 --> 00:02:05,482
advice. Received by the bank, and at your time,

40
00:02:05,482 --> 00:02:08,900
8:00 PM, which is not quite in sync with

41
00:02:08,900 --> 00:02:11,680
real time, and is also drifting with respect to my

42
00:02:11,680 --> 00:02:15,265
time, but the bound is less than the lower

43
00:02:15,265 --> 00:02:18,850
bound on the interprocess communication time. And therefore when you

44
00:02:18,850 --> 00:02:21,310
send your debit request at 8:00 PM, your local

45
00:02:21,310 --> 00:02:25,440
time, which actually in real time 6:00 PM, it's perfectly

46
00:02:25,440 --> 00:02:28,020
fine because when it is received in the Central Bank,

47
00:02:28,020 --> 00:02:30,970
the real time is 8:00 PM. And it is received

48
00:02:30,970 --> 00:02:33,160
later than the current request, and so your

49
00:02:33,160 --> 00:02:34,920
request is honored, you're happy and you can

50
00:02:34,920 --> 00:02:37,540
go home. So the important takeaway is that

51
00:02:37,540 --> 00:02:42,930
in constructing distributed applications which depend on real

52
00:02:42,930 --> 00:02:46,290
time, it is important to make sure that,

53
00:02:46,290 --> 00:02:49,980
that are bounds on individual clock drift. As

54
00:02:49,980 --> 00:02:53,010
well as mutual clock drift. So individual clock

55
00:02:53,010 --> 00:02:56,280
drift is what my, my clock is reading at

56
00:02:56,280 --> 00:02:58,980
any point of time and how far off is

57
00:02:58,980 --> 00:03:02,270
it, from real time. So that is individual clock

58
00:03:02,270 --> 00:03:05,590
drift and you want that to be bound by

59
00:03:05,590 --> 00:03:08,380
some small value, which we call k. And the other

60
00:03:08,380 --> 00:03:11,030
important thing is that you want to make sure

61
00:03:11,030 --> 00:03:15,050
that the mutual clock drift is very very small also.

62
00:03:15,050 --> 00:03:18,242
So that there is no anomaly when the interactions

63
00:03:18,242 --> 00:03:21,580
like what we showed here and the whole thing hinges

64
00:03:21,580 --> 00:03:24,550
on the relationship between mutual clock

65
00:03:24,550 --> 00:03:27,750
drift, the individual clock drift k, and

66
00:03:27,750 --> 00:03:31,110
the interprocess communication time. Informally, so long

67
00:03:31,110 --> 00:03:32,770
as you make sure that the interprocess

68
00:03:32,770 --> 00:03:36,330
communication time is significantly higher than the

69
00:03:36,330 --> 00:03:39,120
clock drifts, whether it is mutual or

70
00:03:39,120 --> 00:03:41,710
individual clock drift, you can ensure that

71
00:03:41,710 --> 00:03:43,690
there are no anomalies in the system.
