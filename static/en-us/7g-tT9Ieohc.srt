1
00:00:00,300 --> 00:00:02,380
By far the best way to build
a sender application for

2
00:00:02,380 --> 00:00:06,330
Android is to use the cast companion
library, or CCL for short.

3
00:00:06,330 --> 00:00:09,860
CCL provides a collection of ready to
use components that provide features and

4
00:00:09,860 --> 00:00:12,770
behaviors recommended
by the US guidelines.

5
00:00:12,770 --> 00:00:16,450
CCL primarily helps you build media
centric apps, but it's also helpful for

6
00:00:16,450 --> 00:00:18,530
data centric use cases as well.

7
00:00:18,530 --> 00:00:21,300
In this lesson, we'll take a look at
the major features and in the next,

8
00:00:21,300 --> 00:00:23,560
we'll see how it's used in practice.

9
00:00:23,560 --> 00:00:26,240
Now as you can see,
CCL does quite a bit for you.

10
00:00:26,240 --> 00:00:28,850
The main features include a ready
to go mini-controller and

11
00:00:28,850 --> 00:00:30,250
a full screen player.

12
00:00:30,250 --> 00:00:33,100
Also included are notifications
to provide player controls when

13
00:00:33,100 --> 00:00:34,950
your app is closed or out of focus.

14
00:00:34,950 --> 00:00:36,300
Lock screen controls, so

15
00:00:36,300 --> 00:00:39,140
the user can maintain control
even if their phone is locked.

16
00:00:39,140 --> 00:00:40,520
Closed caption support and

17
00:00:40,520 --> 00:00:43,550
WiFi reconnection support in
case the connection drops.

18
00:00:43,550 --> 00:00:46,570
You control the CCL through
the VideoCastManager.

19
00:00:46,570 --> 00:00:49,310
This is a singleton and maintains
the state of the application, and

20
00:00:49,310 --> 00:00:52,520
keeps track of the connectivity to
the cast device behind the scenes.

21
00:00:52,520 --> 00:00:55,570
It also keeps track of the playback
status of the receiver for instance,

22
00:00:55,570 --> 00:00:57,300
if it's playing or paused.

23
00:00:57,300 --> 00:01:00,580
Now for data centric app you'd use
its analogue which is actually called

24
00:01:00,580 --> 00:01:03,380
the data cast manager instead
of the video cast manager.

25
00:01:03,380 --> 00:01:06,490
Before you can use it you have to
initialize it as we're doing here.

26
00:01:06,490 --> 00:01:09,520
When you initialize it, you choose
which features you want enabled.

27
00:01:09,520 --> 00:01:12,010
The first argument is your
application context and

28
00:01:12,010 --> 00:01:14,460
the second is the application
ID of your receiver.

29
00:01:14,460 --> 00:01:17,130
We'll get the third and
fourth arguments later.

30
00:01:17,130 --> 00:01:20,190
At this time you also select the types
of features you'd like enabled,

31
00:01:20,190 --> 00:01:24,550
here we're enabling quite a bit,
notifications, lock screen and so forth.

32
00:01:24,550 --> 00:01:27,940
When you use the CCL you want to create
an instance of the video cast manager

33
00:01:27,940 --> 00:01:31,470
early, typically inside your
oncreate method of your activity.

34
00:01:31,470 --> 00:01:34,030
Before you do so though it's
a good idea to call this method

35
00:01:34,030 --> 00:01:37,320
to check whether Google Play Services
is installed and updated.

36
00:01:37,320 --> 00:01:40,370
If it's not, the CCL will automatically
show the user dialog that will

37
00:01:40,370 --> 00:01:41,730
direct them to take
the appropriate action.

38
00:01:41,730 --> 00:01:44,950
The third argument when we
initialize the CCL is for

39
00:01:44,950 --> 00:01:46,680
a player control activity.

40
00:01:46,680 --> 00:01:49,410
If you leave it null,
CCL will provide one for you.

41
00:01:49,410 --> 00:01:51,960
This player shows automatically
during media playback, and

42
00:01:51,960 --> 00:01:54,410
provides controls to play,
pause, and seek.

43
00:01:54,410 --> 00:01:56,910
You can also start this
activity manually if you like,

44
00:01:56,910 --> 00:01:59,530
using the cast manager instance,
like this.

45
00:01:59,530 --> 00:02:02,220
This argument by the way is
an instance of media info and

46
00:02:02,220 --> 00:02:06,130
that's the class used by cast to keep
track of metadata for a video or song.

47
00:02:06,130 --> 00:02:08,370
Check out a link to that
in the instructor notes.

48
00:02:08,370 --> 00:02:11,240
Now the fourth argument is a name
space of a custom message channel

49
00:02:11,240 --> 00:02:13,950
if you'd like one created between
your sender and your receiver.

50
00:02:13,950 --> 00:02:16,580
Once the channel is created you
can easily send messages with just

51
00:02:16,580 --> 00:02:17,940
a single message call.

52
00:02:17,940 --> 00:02:21,500
CCL also provides call back to inform
you whether a message was received and

53
00:02:21,500 --> 00:02:22,800
whether there was an error.

54
00:02:22,800 --> 00:02:26,220
And, if you have a data centric app,
the DataCastManager makes it easy for

55
00:02:26,220 --> 00:02:29,220
you to add a number of channels,
each with their own name space.

56
00:02:29,220 --> 00:02:33,170
One of the ready to use components
CCL provides is the mini-controller.

57
00:02:33,170 --> 00:02:36,020
This is a small controller that can
be added to the layout XML of your

58
00:02:36,020 --> 00:02:37,640
different activities.

59
00:02:37,640 --> 00:02:40,910
It's purpose is to allow the user to
browse to different pages of your app

60
00:02:40,910 --> 00:02:42,660
while still being able
to control the cast.

61
00:02:43,850 --> 00:02:46,470
If you use this component,
in addition to the XML, you'll need to

62
00:02:46,470 --> 00:02:50,520
register it with the Video Cast Manager
inside your activities oncreate method.

63
00:02:50,520 --> 00:02:53,340
Also remember to
unregister in ondestroy.

64
00:02:53,340 --> 00:02:56,590
Behind the scenes, the Cast Manager
handles everything else including

65
00:02:56,590 --> 00:02:59,640
updating its metadata, its playback
state, as well as hiding it when no

66
00:02:59,640 --> 00:03:03,640
media is playing and for details on all
of this, check out the instructor notes.

67
00:03:03,640 --> 00:03:06,950
Another great ready to go
component is notifications.

68
00:03:06,950 --> 00:03:10,040
CCL shows these automatically when your
app is in the background or killed.

69
00:03:10,040 --> 00:03:12,660
All you have to do is indicate you
want this feature when you initialize

70
00:03:12,660 --> 00:03:14,120
the video cast manager.

71
00:03:14,120 --> 00:03:17,370
Then, you need to keep CCL informed
when your app is active or not, and

72
00:03:17,370 --> 00:03:18,520
you do this by incrementing or

73
00:03:18,520 --> 00:03:22,500
decrementing the UI counter inside
your onStart and onStop method.

74
00:03:22,500 --> 00:03:25,870
Another excellent ready to go
feature are lock screen controls.

75
00:03:25,870 --> 00:03:28,890
When you enable this feature when you
initialize the video cast manager,

76
00:03:28,890 --> 00:03:31,900
a play pause button will automatically
go on Android devices running

77
00:03:31,900 --> 00:03:33,140
Jellybean or higher.

78
00:03:33,140 --> 00:03:36,510
And as a added bonus, CCL
automatically provides the ability for

79
00:03:36,510 --> 00:03:39,270
users to control the cast
device's system volume,

80
00:03:39,270 --> 00:03:40,950
even if your application
is in the background and

81
00:03:40,950 --> 00:03:43,179
you're screen is locked by using
the hardware controls on your phone.

82
00:03:44,190 --> 00:03:46,950
CCL makes reconnecting to
a running cast sessions easy, for

83
00:03:46,950 --> 00:03:48,780
instance if the WiFi drops.

84
00:03:48,780 --> 00:03:51,950
To do so, it starts up a reconnection
service behind the scenes, and you have

85
00:03:51,950 --> 00:03:54,870
to indicate you want this functionality
both when you initialize the video Cast

86
00:03:54,870 --> 00:03:58,120
manager, and also by adding these
lines to your Android manifest.

87
00:03:58,120 --> 00:03:59,800
You need these permissions as well.

88
00:03:59,800 --> 00:04:01,560
Then, inside your on-create method,

89
00:04:01,560 --> 00:04:05,010
indicate that you want to reconnect
to an existing session if possible.

90
00:04:05,010 --> 00:04:07,540
In this parameter here is
a time out in seconds.

91
00:04:07,540 --> 00:04:09,600
In addition to helping you
out of the wi-fi drops,

92
00:04:09,600 --> 00:04:12,470
the reconnection services is also great
if your app is killed before you can

93
00:04:12,470 --> 00:04:14,500
gracefully exit the cache section.

94
00:04:14,500 --> 00:04:16,279
If the user then restarts your app,

95
00:04:16,279 --> 00:04:19,050
you can automatically rejoin
the existing session.

96
00:04:19,050 --> 00:04:20,740
That's the CCL in a nutshell,

97
00:04:20,740 --> 00:04:23,940
we have an extensive PDF guide you can
find in the structure notes that will

98
00:04:23,940 --> 00:04:26,920
provide details on how to use all
of these features in your app.

99
00:04:26,920 --> 00:04:29,710
And again, if you're building or
extending an Android app to work with

100
00:04:29,710 --> 00:04:32,980
Cast the CCL is definitely
your best way to go.

101
00:04:32,980 --> 00:04:35,650
Another great resource is
the Cast video sample.

102
00:04:35,650 --> 00:04:39,230
This contains a handy guide on
downloading and installing the CCL and

103
00:04:39,230 --> 00:04:41,880
connecting it to another
project inside Android Studio.
