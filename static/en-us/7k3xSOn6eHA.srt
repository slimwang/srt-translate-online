1
00:00:00,140 --> 00:00:04,130
Before we can discuss some of the design
and implementation challenges

2
00:00:04,130 --> 00:00:08,780
with the models of remote services that
we described in the previous videos,

3
00:00:08,780 --> 00:00:12,960
we need to distinguish among
stateless and stateful file servers.

4
00:00:12,960 --> 00:00:16,230
First, the stateless server is
one which doesn't maintain any

5
00:00:16,230 --> 00:00:19,670
information regarding which
clients access which files,

6
00:00:19,670 --> 00:00:22,510
how many different clients are serviced,
nothing.

7
00:00:22,510 --> 00:00:26,610
Every request has to be self-described,
self-contained, so that it has

8
00:00:26,610 --> 00:00:30,750
all of the parameters regarding
the filings being accessed, the absolute

9
00:00:30,750 --> 00:00:35,240
offset within that file, along with
any data that needs to be written.

10
00:00:35,240 --> 00:00:38,540
This model is suitable for
the upload-download model, or

11
00:00:38,540 --> 00:00:42,570
the other extreme,
true remote file access service.

12
00:00:42,570 --> 00:00:45,472
But, it cannot be used for
the more practical model,

13
00:00:45,472 --> 00:00:48,248
which relies on caching,
because without state,

14
00:00:48,248 --> 00:00:53,050
we cannot achieve consistency management
in the distributed file system.

15
00:00:53,050 --> 00:00:55,660
This is one of the biggest
negatives of this approach.

16
00:00:55,660 --> 00:00:57,260
It prevents the use of caching,

17
00:00:57,260 --> 00:01:00,330
which is an important performance
optimization technique.

18
00:01:00,330 --> 00:01:02,310
The other downside is,

19
00:01:02,310 --> 00:01:06,880
because all of the requests have to be
self-contained, there will be more bits

20
00:01:06,880 --> 00:01:10,670
that will need to be transferred
in order to describe each request.

21
00:01:10,670 --> 00:01:12,590
There are benefits to
the approach as well.

22
00:01:12,590 --> 00:01:16,490
For instance, since there is no state
that's maintained on the file server,

23
00:01:16,490 --> 00:01:21,480
no resources will be consumed on
the server side to maintain that state.

24
00:01:21,480 --> 00:01:24,150
No memory will be used,
no CPU will be spent,

25
00:01:24,150 --> 00:01:28,870
in order to make sure that the state
is consistent, so that's one benefit.

26
00:01:28,870 --> 00:01:31,690
The most important benefit
of the approach is that,

27
00:01:31,690 --> 00:01:35,950
because it is stateless, and
because the requests are self-contained,

28
00:01:35,950 --> 00:01:39,790
this leads to a very resilient
design in terms of failures.

29
00:01:39,790 --> 00:01:43,450
If the server crashes, it just needs
to be restarted, and it can continue to

30
00:01:43,450 --> 00:01:47,600
service all of the future client
requests without any potential errors.

31
00:01:47,600 --> 00:01:51,980
Sure, the clients will need to reissue
any of the requests that have timed out,

32
00:01:51,980 --> 00:01:56,140
but they will ultimately receive
the exact same type of answers,

33
00:01:56,140 --> 00:01:59,060
regardless of the fact that
the server has failed.

34
00:01:59,060 --> 00:02:03,410
Neither the clients, nor the server,
will need to do anything else special

35
00:02:03,410 --> 00:02:07,400
in order to recover from this failure,
just restart.

36
00:02:07,400 --> 00:02:11,440
In contrast to this, a stateful server
is one that maintains information

37
00:02:11,440 --> 00:02:14,700
about the clients in the system,
what are the files they're accessing,

38
00:02:14,700 --> 00:02:18,380
what types of accesses they're
performing, reads versus writes.

39
00:02:18,380 --> 00:02:19,580
For instance, for each file,

40
00:02:19,580 --> 00:02:24,060
the file system may track information,
who has portions of the file cached,

41
00:02:24,060 --> 00:02:28,060
who has read or written to it recently,
or similar information.

42
00:02:28,060 --> 00:02:31,740
Because of this state, it becomes
possible for the file server to allow

43
00:02:31,740 --> 00:02:36,170
data to be cached and at the same
time to guarantee consistency.

44
00:02:36,170 --> 00:02:39,400
Something that wasn't possible
with the stateless server.

45
00:02:39,400 --> 00:02:42,480
And also to provide other benefits,
like locking.

46
00:02:42,480 --> 00:02:46,800
We need state to make sure that we can
keep track of who has locked the file,

47
00:02:46,800 --> 00:02:48,580
and whether or not the file is locked.

48
00:02:48,580 --> 00:02:52,000
Incremental operations is another
thing that can be supported

49
00:02:52,000 --> 00:02:53,460
by having some state.

50
00:02:53,460 --> 00:02:55,380
A client can issue a request,

51
00:02:55,380 --> 00:02:59,720
I want to read the next kilobyte
of data from this file.

52
00:02:59,720 --> 00:03:01,200
With a stateless design,

53
00:03:01,200 --> 00:03:04,910
there is no concept of what
the next kilobyte would be.

54
00:03:04,910 --> 00:03:07,840
You have to describe every
single request fully,

55
00:03:07,840 --> 00:03:12,060
with the offset of the file, with the
specific file handle, and everything.

56
00:03:12,060 --> 00:03:14,290
The problem with this
is that on failure,

57
00:03:14,290 --> 00:03:17,770
all that state that the server
maintains needs to be recovered, so

58
00:03:17,770 --> 00:03:21,600
that the file system overall is
still in a consistent state.

59
00:03:21,600 --> 00:03:24,330
That requires some more complex
mechanisms, for instance,

60
00:03:24,330 --> 00:03:26,190
the state needs to be checkpointed.

61
00:03:26,190 --> 00:03:28,790
We have to have to
some way to rebuild it

62
00:03:28,790 --> 00:03:31,320
in order to have a good
representation of

63
00:03:31,320 --> 00:03:34,970
what it is that the clients were
doing before the failure occurred.

64
00:03:34,970 --> 00:03:38,240
And of course, the runtime
overheads with the stateful server

65
00:03:38,240 --> 00:03:40,170
because it needs to maintain this state,
and

66
00:03:40,170 --> 00:03:43,530
also execute all of the necessary
consistency protocols.

67
00:03:43,530 --> 00:03:47,920
Exactly what those overheads will be,
will depend on the details of how

68
00:03:47,920 --> 00:03:52,180
caching is enabled, when and how it can
occur, and then what are the consistency

69
00:03:52,180 --> 00:03:55,540
requirements that the distributed
file system needs to support.

70
00:03:55,540 --> 00:03:58,210
We will look at what are some
of the options in this space

71
00:03:58,210 --> 00:03:59,240
in the next videos.
