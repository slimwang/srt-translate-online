1
00:00:00,240 --> 00:00:03,824
Lets start with the most interesting method, in the checkAnswer method, I am

2
00:00:03,824 --> 00:00:07,128
given the response which is a string, I convert it to a number by calling

3
00:00:07,128 --> 00:00:10,712
DoubleparseDouble and now I check whether that number is close enough to the

4
00:00:10,712 --> 00:00:13,960
actual answer, we've learned in lesson four how to do that, we take the

5
00:00:13,960 --> 00:00:17,376
difference of the two numbers that you want to compare, take the absolute

6
00:00:17,376 --> 00:00:24,962
value. And check whether that's most the given tolerance. Now, there's just one

7
00:00:24,962 --> 00:00:28,524
catch. What's this answer here? Well, it's whatever was supplied in the set

8
00:00:28,524 --> 00:00:33,101
answer method. Interestingly, the set answer method here takes a double, so

9
00:00:33,101 --> 00:00:36,871
it's not a string. And that means it's different from the set answer method

10
00:00:36,871 --> 00:00:40,892
that was defined in the question class. That method took a string. Now I

11
00:00:40,892 --> 00:00:44,125
could've converted this number into a string, and then passed it on to the

12
00:00:44,125 --> 00:00:47,358
setAnswer method of the question class, and let the question store it as a

13
00:00:47,358 --> 00:00:50,538
string, and then I could've converted it back from a string to a number, I

14
00:00:50,538 --> 00:00:53,930
suppose, except when I tried that it didn't work, because the question class

15
00:00:53,930 --> 00:01:01,546
has no way of giving me back the answer. It's used inside it's own check answer

16
00:01:01,546 --> 00:01:05,025
method. But that one is worthless to me, because it doesn't take the tolerance

17
00:01:05,025 --> 00:01:10,510
into account. So instead, I just store the answer as a double in the numeric

18
00:01:10,510 --> 00:01:12,401
question.
