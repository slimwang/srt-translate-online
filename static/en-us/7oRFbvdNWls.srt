1
00:00:00,090 --> 00:00:03,800
The first statement,
the one-way hash function is important

2
00:00:03,800 --> 00:00:07,780
not only in message authentication but
also in digital signatures.

3
00:00:07,780 --> 00:00:10,850
The one-way property of
hash function says that

4
00:00:10,850 --> 00:00:15,600
it is very efficient to compute a hash
value of a given input message.

5
00:00:15,600 --> 00:00:17,910
On the other hand, given a hash value,

6
00:00:17,910 --> 00:00:22,900
it is computationally infeasible to
find the original input message.

7
00:00:22,900 --> 00:00:25,520
Hash function can be used
in message authentication.

8
00:00:25,520 --> 00:00:28,820
For example, if Alice and
Bob share a secret key,

9
00:00:28,820 --> 00:00:32,759
then Alice can authenticate herself
by sending a hello message and

10
00:00:32,759 --> 00:00:36,150
hash the hello message along
with a share secret key.

11
00:00:36,150 --> 00:00:39,860
And when Bob received this hash value,
along with a hello message

12
00:00:39,860 --> 00:00:45,110
in plain text, Bob can hash the hello
message along with a shared key and

13
00:00:45,110 --> 00:00:49,910
see whether that hash value matches with
the hash value that he just received.

14
00:00:49,910 --> 00:00:54,300
And if they match, then Bob knows
that this message is from Alice.

15
00:00:54,300 --> 00:00:57,180
In other words, Alice is authenticated.

16
00:00:57,180 --> 00:01:00,880
Now if the one-way property of
hash function does not hold.

17
00:01:00,880 --> 00:01:04,507
That means the attacker
intercepting the hello message and

18
00:01:04,507 --> 00:01:08,740
the hash value can then
reverse the hash function and

19
00:01:08,740 --> 00:01:13,830
find that the secret key that was used
to hash along with the hello message.

20
00:01:13,830 --> 00:01:17,400
Therefore, the attacker would
able to obtain the share key.

21
00:01:17,400 --> 00:01:21,610
Therefore, the one way property
of hash function is important for

22
00:01:21,610 --> 00:01:23,190
message authentication.

23
00:01:23,190 --> 00:01:25,030
Now what about digital signatures?

24
00:01:25,030 --> 00:01:28,040
Here's typically how
digital signature works.

25
00:01:28,040 --> 00:01:32,020
Alice can create a digital signature for
message, say m.

26
00:01:32,020 --> 00:01:37,800
She first hashes m, and then sign
the hash value of m using a product key.

27
00:01:37,800 --> 00:01:42,220
Then she sends the message m in
plain text along with a signature,

28
00:01:42,220 --> 00:01:46,961
therefore the one way property of hash
function is not important here because

29
00:01:46,961 --> 00:01:50,960
the input plain text
message is sent anyway.

30
00:01:50,960 --> 00:01:54,700
To recap, this statement is not true
because the one way property is

31
00:01:54,700 --> 00:01:59,170
important for message authentication but
not in digital signatures.

32
00:01:59,170 --> 00:02:04,010
Second statement, SHA processes
the input one block at a time but

33
00:02:04,010 --> 00:02:06,860
each block goes through
the same processing.

34
00:02:06,860 --> 00:02:10,389
This is true because
this is how SHA works.

35
00:02:10,389 --> 00:02:15,230
Third, HMAC is secure provided
that the embedded hash function

36
00:02:15,230 --> 00:02:19,850
has good cryptographic strengths, such
as one-way, and collision resistant.

37
00:02:19,850 --> 00:02:21,430
This is true, that is,

38
00:02:21,430 --> 00:02:25,930
if the underlying has function is not
secure, the HMAC would not be secure.

39
00:02:25,930 --> 00:02:29,930
On the other hand, as we have discussed,
HMAC is more secure

40
00:02:29,930 --> 00:02:33,990
than a cryptographic hash function
because of the use of a secret key.
