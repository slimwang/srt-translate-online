1
00:00:00,070 --> 00:00:01,710
Okay. What I'd like you to do is implement the

2
00:00:01,710 --> 00:00:04,867
functions gets and cas. I'm in the file with our toy

3
00:00:04,867 --> 00:00:09,130
memcached. We've got our other functions set, get, delete. And cache

4
00:00:09,130 --> 00:00:12,610
is just a dictionary, which, whose behavior mimics memcached for the

5
00:00:12,610 --> 00:00:15,290
most part. What I'd like you to do is implement gets

6
00:00:15,290 --> 00:00:18,890
and cas. So, gets takes one parameter called key, and it

7
00:00:18,890 --> 00:00:23,110
returns a tuple of the value stored in the cache and

8
00:00:23,110 --> 00:00:25,280
a hash to that value. A simple hash we can use,

9
00:00:25,280 --> 00:00:28,170
is you can use the built-in Python function hash on

10
00:00:28,170 --> 00:00:32,360
the built-in function called repr on the value. Repr turns

11
00:00:32,360 --> 00:00:34,970
any Python object into a string representation of it, which

12
00:00:34,970 --> 00:00:37,021
will work for our little test case here. And hash just

13
00:00:37,021 --> 00:00:41,130
returns a simple hash of that, of that string. And

14
00:00:41,130 --> 00:00:43,020
if the value is not in the cache, you just

15
00:00:43,020 --> 00:00:46,640
return none. Now, cas is the more complicated function. This

16
00:00:46,640 --> 00:00:50,340
sets the key to equal value in our cache, and return

17
00:00:50,340 --> 00:00:54,310
true if the cas unique matches the hash of the value that's

18
00:00:54,310 --> 00:00:56,810
already in the cache. If the cas unique does not match the

19
00:00:56,810 --> 00:01:00,420
hash we don't set anything and we return false. If you look

20
00:01:00,420 --> 00:01:03,615
down here, we've got our test functions. The top few are the

21
00:01:03,615 --> 00:01:06,475
same ones before and down here you can see what we've, what,

22
00:01:06,475 --> 00:01:09,612
what we've got. So, here's setting x to two. And then we

23
00:01:09,612 --> 00:01:12,732
print gets x and this is going to print two and then a

24
00:01:12,732 --> 00:01:15,270
hash. It's not going to print the word hash. It's going to print a number.

25
00:01:15,270 --> 00:01:18,272
And then we're going to call cas try to set x

26
00:01:18,272 --> 00:01:20,845
to three. And in this case, I'm going to send in just

27
00:01:20,845 --> 00:01:22,740
zero, which I know won't be the hash and the cache

28
00:01:22,740 --> 00:01:25,130
would return false. And then if we run cas again with

29
00:01:25,130 --> 00:01:28,420
the correct hash, the one that was returned from gets, we

30
00:01:28,420 --> 00:01:31,450
should update the cache and return true. And if we print,

31
00:01:31,450 --> 00:01:34,840
get x, we should see the value of four, because that's

32
00:01:34,840 --> 00:01:37,020
what we set it to here. Okay, good luck with this.
