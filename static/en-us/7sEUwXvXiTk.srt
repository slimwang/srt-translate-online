1
00:00:00,330 --> 00:00:02,910
The first statement applies to threads.

2
00:00:02,910 --> 00:00:06,930
Each thread belonging to a process shares the virtual address space with

3
00:00:06,930 --> 00:00:09,250
other threads in that process.

4
00:00:09,250 --> 00:00:11,680
And because threads share an address space,

5
00:00:11,680 --> 00:00:15,610
the context switch among them happens faster than processes.

6
00:00:15,610 --> 00:00:18,420
So, processes take longer to context switch.

7
00:00:18,420 --> 00:00:19,510
Both threads and

8
00:00:19,510 --> 00:00:24,840
processes have their execution context described with stack and registers.

9
00:00:24,840 --> 00:00:30,110
Because threads share the virtual address space, it is more likely that when

10
00:00:30,110 --> 00:00:34,610
multiple threads execute concurrently, the data that's needed by

11
00:00:34,610 --> 00:00:38,570
one thread is already in the cache, brought in by another thread.

12
00:00:38,570 --> 00:00:41,840
So, they typically result in hotter caches.

13
00:00:41,840 --> 00:00:45,590
Among processes, such sharing is really not possible.

14
00:00:45,590 --> 00:00:47,750
And then the last answer is B.

15
00:00:47,750 --> 00:00:51,540
We already saw that for processes, it makes sense for

16
00:00:51,540 --> 00:00:56,720
the operating system to support certain interprocess communication mechanisms.

17
00:00:56,720 --> 00:01:01,270
And we'll see that there are mechanisms for threads to communicate and

18
00:01:01,270 --> 00:01:03,310
coordinate and synchronize amongst each other.
