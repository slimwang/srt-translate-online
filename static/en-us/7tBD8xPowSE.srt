1
00:00:00,470 --> 00:00:04,320
The Recommendations Row is a central
feature of the Android TV home screen.

2
00:00:04,320 --> 00:00:07,540
You can place recommendations here
to prominently feature content, and

3
00:00:07,540 --> 00:00:10,480
to enable your users to
effortlessly start playback.

4
00:00:10,480 --> 00:00:13,640
Notice that when the recommendation
part is selected the background image of

5
00:00:13,640 --> 00:00:16,000
the home screen changes to reflect it.

6
00:00:16,000 --> 00:00:18,770
In code,
recs work a lot like notifications.

7
00:00:18,770 --> 00:00:22,300
Basically, you issue a recommendation
by creating a notification.

8
00:00:22,300 --> 00:00:23,630
Cool, right?

9
00:00:23,630 --> 00:00:27,480
As apps issue notifications, they're
collected by the Notification Manager.

10
00:00:28,580 --> 00:00:32,560
The Leanback Launcher then displays
these notifications as recommendation

11
00:00:32,560 --> 00:00:36,070
cards in the recommendations row
on the Android TV home screen.

12
00:00:36,070 --> 00:00:38,610
To create a good user experience,
Android TV

13
00:00:38,610 --> 00:00:42,370
looks at all the available recs and
ranks them using an internal algorithm.

14
00:00:42,370 --> 00:00:44,750
The more often a user picks
one of your recommendations,

15
00:00:44,750 --> 00:00:47,170
the more prominently they'll
be displayed in the future.

16
00:00:47,170 --> 00:00:49,470
Also, it's best practice not
to have more than two or

17
00:00:49,470 --> 00:00:52,580
three recommendations
active at a single time.

18
00:00:52,580 --> 00:00:54,780
Let's take a look at
how this works in code.

19
00:00:54,780 --> 00:00:56,640
To make issuing recommendations easier,

20
00:00:56,640 --> 00:00:59,219
the Leanback sample provides
the recommendation builder class.

21
00:01:00,540 --> 00:01:03,830
This class uses the builder design
pattern to construct recommendations and

22
00:01:03,830 --> 00:01:06,640
if you're curious check
out the instructor notes.

23
00:01:06,640 --> 00:01:08,840
You can reuse this in your own code.

24
00:01:08,840 --> 00:01:10,770
Let's take a look at how it works for
completeness.

25
00:01:11,770 --> 00:01:15,060
First we'll issue notifications
using notification compat

26
00:01:15,060 --> 00:01:16,290
which you saw on the wearables section.

27
00:01:17,310 --> 00:01:20,840
This class is included with
the Android V4 support library.

28
00:01:20,840 --> 00:01:23,480
Lets take a look inside the build
method to see how we construct our

29
00:01:23,480 --> 00:01:25,390
recommendation notification.

30
00:01:25,390 --> 00:01:28,020
Scrolling down a bit you'll see here's
where we start construction our

31
00:01:28,020 --> 00:01:28,660
notification.

32
00:01:29,720 --> 00:01:33,650
You might be aware that notifications
have four available styles BigPicture,

33
00:01:33,650 --> 00:01:36,020
BigText, Inbox, and Media.

34
00:01:36,020 --> 00:01:39,980
Here we always use BigPicture, so we can
set a background image for the card.

35
00:01:39,980 --> 00:01:42,700
Details on each style are in
the notes in you're curious.

36
00:01:42,700 --> 00:01:45,730
Scrolling down a bit more to indicate
this notification is actually

37
00:01:45,730 --> 00:01:46,710
a recommendation.

38
00:01:46,710 --> 00:01:49,240
We set a category like this.

39
00:01:49,240 --> 00:01:51,277
We need to set both a Large and
Small icon.

40
00:01:52,482 --> 00:01:56,267
The SmallIcon is drawable resource for
a badge icon on the card, and

41
00:01:56,267 --> 00:01:59,672
the LargeIcon is used as
the card background image.

42
00:01:59,672 --> 00:02:02,650
We setLocalOnly to true to
indicate this notification is for

43
00:02:02,650 --> 00:02:04,510
the current device only.

44
00:02:04,510 --> 00:02:05,950
To learn more about the other fields,

45
00:02:05,950 --> 00:02:08,038
check out the link in
the instructor notes.

46
00:02:08,038 --> 00:02:10,810
Also notice that when
a recommendation card is selected,

47
00:02:10,810 --> 00:02:15,050
the background image of the Android TV
home screen changes to reflect it.

48
00:02:15,050 --> 00:02:18,550
The image we used for
the background image is a large bitmap.

49
00:02:18,550 --> 00:02:20,550
It's too big for a notification.

50
00:02:20,550 --> 00:02:24,390
Instead, we'll use a content
URI to provide its location.

51
00:02:24,390 --> 00:02:27,570
But first, to serve this image,
we'll use a sample content provider and

52
00:02:27,570 --> 00:02:29,980
implement only its open file method.

53
00:02:29,980 --> 00:02:32,660
We'll do this right inside
the recommendation builder class and

54
00:02:32,660 --> 00:02:34,860
here's how our bare bones
content provider looks.

55
00:02:35,880 --> 00:02:38,982
The only method with
implementation is Open File.

56
00:02:38,982 --> 00:02:41,090
A ParcelFileDescriptor by the way,

57
00:02:41,090 --> 00:02:44,170
is used to send a file descriptor
across different file processes.

58
00:02:44,170 --> 00:02:47,780
In this case, from our sample app
to the Leanback Launcher app.

59
00:02:47,780 --> 00:02:51,480
Moving back to the build method,
here's how we get a background image.

60
00:02:51,480 --> 00:02:55,050
Notice by the way that this method is
also called insider content provider

61
00:02:55,050 --> 00:02:57,070
to resolve the background
image from an ID.

62
00:02:58,240 --> 00:03:02,480
At this point, we can create a content
URI that indicates the background image.

63
00:03:02,480 --> 00:03:05,020
We put this notification
into the bundle using

64
00:03:05,020 --> 00:03:07,740
the Extra_Background_Image_URI key.

65
00:03:07,740 --> 00:03:10,550
Finally, we'll set a pending
intent to take users straight to

66
00:03:10,550 --> 00:03:12,889
the details fragment when they
select our recommendation.

67
00:03:14,300 --> 00:03:17,190
If you prefer, you can also
jump directly into playback.

68
00:03:17,190 --> 00:03:19,900
To see how this works we'll need to
take a look at another class called

69
00:03:19,900 --> 00:03:22,170
UpdateRecommendationService.

70
00:03:22,170 --> 00:03:25,070
We'll use this class to keep our
recommendations current by updating

71
00:03:25,070 --> 00:03:25,850
them from time to time.

72
00:03:25,850 --> 00:03:29,540
And performing small job regularly
sounds like a perfect job for

73
00:03:29,540 --> 00:03:30,900
an intent service.

74
00:03:30,900 --> 00:03:33,530
We'll actually start this service
when an Android TV boots up and

75
00:03:33,530 --> 00:03:35,320
we'll see how to do that shortly.

76
00:03:35,320 --> 00:03:36,600
First, let's cover what it does.
