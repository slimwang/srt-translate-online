1
00:00:00,070 --> 00:00:02,800
There are many popular hash algorithms and, and, of course, you can

2
00:00:02,800 --> 00:00:06,070
write your own, but you should never write your own. The first

3
00:00:06,070 --> 00:00:10,110
lesson you'll learn in, in CS 387 is don't write your own,

4
00:00:10,110 --> 00:00:13,540
at least for our purposes. Of course, if you're building a hashtable,

5
00:00:13,540 --> 00:00:15,970
you know, you can, you can do whatever you want. But if

6
00:00:15,970 --> 00:00:19,946
you're going to use it for security purposes, don't write your own. Then,

7
00:00:19,946 --> 00:00:21,746
you know, if you want to learn how to make a hashtable, knock

8
00:00:21,746 --> 00:00:25,138
yourself out. Of course, somebody's probably already done it better, but hey,

9
00:00:25,138 --> 00:00:29,398
you never know. So anyways, some popular algorithms are crc32,

10
00:00:29,398 --> 00:00:33,936
which is basically designed for for checksums. If you were to

11
00:00:33,936 --> 00:00:36,344
send somebody a bunch of data, you know, like a big

12
00:00:36,344 --> 00:00:40,040
file you know, you might also include a crc of of,

13
00:00:40,040 --> 00:00:42,672
of that file and that, you know, is, is basically just

14
00:00:42,672 --> 00:00:45,192
a simple way to verify that you've got the entire file

15
00:00:45,192 --> 00:00:48,048
and it's not corrupted because you know, you can send a

16
00:00:48,048 --> 00:00:50,288
c you can send a hash easier than you can send

17
00:00:50,288 --> 00:00:52,510
a whole file. You know, you can copy and paste a

18
00:00:52,510 --> 00:00:55,979
hash, it's just a few bits. You can verify that the file

19
00:00:55,979 --> 00:00:58,562
that you received has the same crc as the file they

20
00:00:58,562 --> 00:01:00,740
sent. And then you don't have to, you know, verify bit for

21
00:01:00,740 --> 00:01:03,490
bit that you have the correct file. So, crc is really

22
00:01:03,490 --> 00:01:07,730
fast. Its really, its really only purpose is for doing checksums, basically

23
00:01:07,730 --> 00:01:10,980
creating a hash of a large file. Its security properties are not

24
00:01:10,980 --> 00:01:15,540
very good. It's very easy to find what we call a collision,

25
00:01:15,540 --> 00:01:18,200
which is when you know, when, when, when two things hash

26
00:01:18,200 --> 00:01:20,270
to the same value, which is, you know, the whole point

27
00:01:20,270 --> 00:01:22,130
of a hash is that we can get a, a different

28
00:01:22,130 --> 00:01:26,320
value for almost anything that we're going to hash. Now, obviously if,

29
00:01:26,320 --> 00:01:29,720
if the size of the input is substantially greater than the

30
00:01:29,720 --> 00:01:33,810
size of the output yes, there are going to be collisions. The

31
00:01:33,810 --> 00:01:37,150
whole point is that it's hard to find them. And with

32
00:01:37,150 --> 00:01:40,840
crc32, it's very easy to find them. The reason you'd use crc

33
00:01:40,840 --> 00:01:42,920
is because you don't care about collisions, you

34
00:01:42,920 --> 00:01:45,440
just care about speed. And crc is very

35
00:01:45,440 --> 00:01:48,050
fast. The most popular hashing algorithm out there

36
00:01:48,050 --> 00:01:52,170
is still md5, which used to be used because

37
00:01:52,170 --> 00:01:58,220
it was both fast, you know, ish, not as fast as crc32 but pretty fast, and

38
00:01:58,220 --> 00:02:01,320
people you know, thought it was pretty secure,

39
00:02:01,320 --> 00:02:06,050
except it's not. Md5 has been broken repeatedly over

40
00:02:06,050 --> 00:02:08,660
the last few years. And it's very easy to

41
00:02:08,660 --> 00:02:12,600
find md5 collisions. You know, given you know, an

42
00:02:12,600 --> 00:02:15,590
x that hashes into a y, it's very easy

43
00:02:15,590 --> 00:02:19,160
given this y to find another x that hashes into

44
00:02:19,160 --> 00:02:22,940
it which is, as you'll see, a big problem.

45
00:02:22,940 --> 00:02:25,495
So, we won't be using md5 for much at all

46
00:02:25,495 --> 00:02:28,690
in this class. Well, it, it has its use

47
00:02:28,690 --> 00:02:31,095
cases, right? If, if you have a limited input it's

48
00:02:31,095 --> 00:02:33,835
hard to find a collision. The certain class of attacks, you

49
00:02:33,835 --> 00:02:36,490
know, when making x longer and longer and longer and longer, that's

50
00:02:36,490 --> 00:02:38,590
a really easy way to find a collision in md5. But if

51
00:02:38,590 --> 00:02:41,236
you limit the length of x, then you, you, you don't have

52
00:02:41,236 --> 00:02:44,555
to worry too much about that vulnerability. So, anyway, just keep that

53
00:02:44,555 --> 00:02:49,070
in mind. When you really care about the data, don't use md5.

54
00:02:49,070 --> 00:02:51,970
The second most popular hash is called sha1. This is not as

55
00:02:51,970 --> 00:02:56,397
fast, but it's fairly secure. Just now are we starting to kind of

56
00:02:56,397 --> 00:03:00,057
hear, you know, demonstrations of people finding collisions in

57
00:03:00,057 --> 00:03:03,110
sha1. It's still pretty good. It's, it's actually is

58
00:03:03,110 --> 00:03:06,080
the second most used hash behind md5. But for

59
00:03:06,080 --> 00:03:08,590
things going forward, you should really use something like for

60
00:03:08,590 --> 00:03:12,802
example sha256, which is, as you might guess, just

61
00:03:12,802 --> 00:03:15,450
kind of a bigger version of sha1. It's actually not

62
00:03:15,450 --> 00:03:18,550
the algorithm I believe has changed as well. So

63
00:03:18,550 --> 00:03:21,960
we'll say this one is secure-ish and this one is

64
00:03:21,960 --> 00:03:24,930
pretty good. It's going to it's going to take some time. Now, of

65
00:03:24,930 --> 00:03:27,546
course, the, the trade off is speed, you know? So the,

66
00:03:27,546 --> 00:03:31,360
the better hashing algorithm right now, the slower it is. So

67
00:03:31,360 --> 00:03:34,380
these are kind of, these are basically organized in cost and

68
00:03:34,380 --> 00:03:37,700
in security. So, no big surprise there that there's kind of

69
00:03:37,700 --> 00:03:41,350
an inverse correlation between cost and security, but that's the name

70
00:03:41,350 --> 00:03:44,170
of the game. So depending on what problem you're working on

71
00:03:44,170 --> 00:03:47,180
you may to need, may need to actually make a decision. But,

72
00:03:47,180 --> 00:03:50,752
for our purposes, we're not going to get a whole lot of traffic. We'll probably

73
00:03:50,752 --> 00:03:54,493
sha256 for most things. So, let me show you how you would use this.
