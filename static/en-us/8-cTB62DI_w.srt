1
00:00:00,110 --> 00:00:04,220
Okay, so I talked about memory,
I talked about isolation.

2
00:00:04,220 --> 00:00:08,630
Transferring control
from user to OS part of

3
00:00:08,630 --> 00:00:14,020
the system that we have, a memory
where OS coordinator structure is.

4
00:00:14,020 --> 00:00:18,330
We want to sort of dig deeper into it
and really think about how do we define

5
00:00:18,330 --> 00:00:23,480
what data and code a certain process or
application can access.

6
00:00:23,480 --> 00:00:27,110
I said one of the jobs the operating
system has is give you high level

7
00:00:27,110 --> 00:00:28,490
obstructions.

8
00:00:28,490 --> 00:00:31,705
Okay, so we don't talked about
particular memory location that we

9
00:00:31,705 --> 00:00:33,900
happen to have right now.

10
00:00:33,900 --> 00:00:37,490
With each process we said sort
of can believe as if it has

11
00:00:37,490 --> 00:00:39,230
the whole computer to itself.

12
00:00:39,230 --> 00:00:44,130
In particular, each process wants
to feel that it has the memory

13
00:00:44,130 --> 00:00:48,020
that it needs, where its data and
code is going to go, it has to itself.

14
00:00:48,020 --> 00:00:52,370
And actually, each process does have
something of that sort for itself, and

15
00:00:52,370 --> 00:00:54,340
that's called an Address Space.

16
00:00:54,340 --> 00:00:56,337
Address Space is sort of a container.

17
00:00:56,337 --> 00:01:00,377
It's a sequence of memory locations.

18
00:01:00,377 --> 00:01:04,018
It's a collection,
which is a sequence of memory locations,

19
00:01:04,018 --> 00:01:08,483
that define a collection of those memory
locations, it defines a space, and

20
00:01:08,483 --> 00:01:13,695
each of this location can be address so
that's what makes it an address space.

21
00:01:13,695 --> 00:01:18,635
because each process has an abstraction
of memory that is an Address Space,

22
00:01:18,635 --> 00:01:22,960
an Address Space actually is going
to be a unit of isolation, so

23
00:01:22,960 --> 00:01:24,980
when we talked about isolation.

24
00:01:24,980 --> 00:01:29,730
Now we're talking about sort of
isolate what from what else, and

25
00:01:29,730 --> 00:01:32,300
we're going to talk about
isolating Address Space.

26
00:01:32,300 --> 00:01:37,160
Address Space completely defines
the data and code that is there for

27
00:01:37,160 --> 00:01:38,880
a given application.

28
00:01:38,880 --> 00:01:42,600
The data and code is going to reside
in the bunch of memory locations and

29
00:01:42,600 --> 00:01:45,880
those memory locations together
make up an Address Space

30
00:01:45,880 --> 00:01:48,830
that belongs to a particular process or
application.

31
00:01:48,830 --> 00:01:51,780
So that's why we have to sort
of [INAUDIBLE] solation.

32
00:01:51,780 --> 00:01:54,728
We have to dig deeper a little bit and
think about the Address Spaces.

33
00:01:54,728 --> 00:01:59,080
So if a processes essentially going to
think that it has the memory to itself,

34
00:01:59,080 --> 00:02:04,070
it's going to think of this memory as
a contiguous set of locations going from

35
00:02:04,070 --> 00:02:07,060
some starting address zero to some max.

36
00:02:07,060 --> 00:02:10,389
And it's going to think that it
has this set of memory locations,

37
00:02:10,389 --> 00:02:14,330
not only the contiguous, but they could
even be more than the total memory

38
00:02:14,330 --> 00:02:17,540
that we have, physical memory
that we have in a computer.

39
00:02:17,540 --> 00:02:21,330
If you done your operating systems
class, you heard about virtual memory,

40
00:02:21,330 --> 00:02:25,920
which most operating systems
actually support virtual memory.

41
00:02:25,920 --> 00:02:29,994
That could be more than
the physical memory that we have.

42
00:02:29,994 --> 00:02:32,658
Address Space that we're talking about,

43
00:02:32,658 --> 00:02:36,361
when a process is a contiguous
container of memory, okay?

44
00:02:36,361 --> 00:02:37,826
That can be addressed,

45
00:02:37,826 --> 00:02:42,662
which is going from zero to some maximum
address that we can have and it doesn't

46
00:02:42,662 --> 00:02:47,800
have to be constrained by the physical
amount of physical memory that we have.

47
00:02:47,800 --> 00:02:53,980
So the address space actually usually,
it it's a 32-bit architecture,

48
00:02:53,980 --> 00:02:57,910
basically means addresses in
that case are 32-bit long.

49
00:02:57,910 --> 00:03:00,180
Or it could be 64-bit architecture.

50
00:03:00,180 --> 00:03:02,680
In that case they'll be 64-bit long.

51
00:03:02,680 --> 00:03:07,310
They go typically form zero through two
to the third minus to minus one, or

52
00:03:07,310 --> 00:03:08,890
two to the 64 minus one.

53
00:03:08,890 --> 00:03:12,700
Your addresses and number bits, and
based on that you can have two to

54
00:03:12,700 --> 00:03:17,740
the n different locations that you can
address with that size of an address.

55
00:03:17,740 --> 00:03:20,530
We said that Address Space
is a contender for

56
00:03:20,530 --> 00:03:24,540
anything that has to be stored
in memory for a process.

57
00:03:24,540 --> 00:03:27,340
Remember, process has to
fetch instruction data,

58
00:03:27,340 --> 00:03:31,550
so that information has to be in
memory before we can execute it.

59
00:03:31,550 --> 00:03:33,680
So we have to prepare
an Address Space for

60
00:03:33,680 --> 00:03:36,480
a process before it starts execution.

61
00:03:36,480 --> 00:03:39,040
And we tell the process,
here is an Address Space for

62
00:03:39,040 --> 00:03:42,190
you, you can address the location
zero through something, and

63
00:03:42,190 --> 00:03:45,620
you decide to put your data and
code in these locations.
