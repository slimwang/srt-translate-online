1
00:00:00,080 --> 00:00:03,130
Let's think about what the two different
versions of Caroline's repository look

2
00:00:03,130 --> 00:00:04,490
like at this point.

3
00:00:04,490 --> 00:00:07,430
Here's what the local version looked
like before Caroline interacted with

4
00:00:07,430 --> 00:00:08,630
GitHub at all.

5
00:00:08,630 --> 00:00:10,678
Then, she pushed the master branch.

6
00:00:10,678 --> 00:00:14,980
And then, since the commits were on
the master branch, everything got sent.

7
00:00:14,980 --> 00:00:17,890
So at that point,
they had exactly the same history.

8
00:00:17,890 --> 00:00:21,200
Then Caroline edited a file
directly on GitHub and

9
00:00:21,200 --> 00:00:24,870
made a commit on the master branch,
updating master.

10
00:00:24,870 --> 00:00:26,800
So, this is where we are now.

11
00:00:26,800 --> 00:00:31,060
Her local version is out of date
with the remote GitHub version.

12
00:00:31,060 --> 00:00:33,070
To get the repositories back into sync,

13
00:00:33,070 --> 00:00:36,530
she'll need to pull her master
back into the local version.

14
00:00:36,530 --> 00:00:40,240
This will bring the new commit into
the local version and update master.

15
00:00:40,240 --> 00:00:44,290
Now I'll hand you off to Caroline
to see this on the command line.

16
00:00:44,290 --> 00:00:45,400
>> Thanks, Sarah.

17
00:00:45,400 --> 00:00:46,610
Now, like you saw,

18
00:00:46,610 --> 00:00:49,830
the commit that I just made is shown in
the commit history on the GitHub site.

19
00:00:51,000 --> 00:00:53,110
However, when I run git log,

20
00:00:53,110 --> 00:00:56,010
I can see that that commit isn't
present in my local repository.

21
00:00:57,040 --> 00:00:59,230
To get it, I'll run git pull.

22
00:00:59,230 --> 00:01:01,760
Like when I run git push,
I need to specify the remote,

23
00:01:01,760 --> 00:01:03,630
which I've named origin.

24
00:01:03,630 --> 00:01:07,220
For pull, I'll also need to
specify the branch I want to pull,

25
00:01:07,220 --> 00:01:09,620
which is the master
branch on the remote.

26
00:01:09,620 --> 00:01:10,910
Before I ran git pull,

27
00:01:10,910 --> 00:01:14,500
I had some commits in my local
repository which I'd pushed to git hub.

28
00:01:14,500 --> 00:01:15,975
I also had a new commit on GitHub,

29
00:01:15,975 --> 00:01:18,830
adding the lesson three
reflections file.

30
00:01:18,830 --> 00:01:22,480
When I pulled the master branch from
the origin repository, that is,

31
00:01:22,480 --> 00:01:26,200
my repository on GitHub, it pulled
all of the commits reachable from

32
00:01:26,200 --> 00:01:29,900
the master branch on GitHub
down into my local repository.

33
00:01:29,900 --> 00:01:32,980
In this case,
I had the master branch checked out, so

34
00:01:32,980 --> 00:01:37,510
git also updated my local master branch
label to point to the new command.

35
00:01:37,510 --> 00:01:38,790
Now, it's not necessary for

36
00:01:38,790 --> 00:01:42,480
these two names to be the same,
but they usually are.

37
00:01:42,480 --> 00:01:44,680
Then, I'll run git log again, and

38
00:01:44,680 --> 00:01:47,690
I can see that my new commit is
present in my local repository now.

39
00:01:48,820 --> 00:01:49,580
Now go ahead and

40
00:01:49,580 --> 00:01:52,590
pull the changes you just made in
GitHub into your local repository.

41
00:01:53,700 --> 00:01:55,530
When you're finished,
which of the following is true?

42
00:01:56,760 --> 00:01:57,510
Are there changes in

43
00:01:57,510 --> 00:02:01,070
your local repository that
are not present on GitHub?

44
00:02:01,070 --> 00:02:05,000
Are there changes on GitHub that
are not in your local repository?

45
00:02:05,000 --> 00:02:06,230
Or is neither true?

46
00:02:06,230 --> 00:02:09,830
All the changes in your local repository
are present on GitHub and vice versa.
