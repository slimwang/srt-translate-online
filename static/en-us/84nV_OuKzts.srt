1
00:00:00,000 --> 00:00:03,000
One thing that's come up a lot in this class
--a question I've seen a lot on the forums--

2
00:00:03,000 --> 00:00:05,000
is how do I organize code.

3
00:00:05,000 --> 00:00:08,000
You don't want to keep all your stuff in one Python file. What's the correct way to organize things.

4
00:00:08,000 --> 00:00:10,000
The first thing I had to say is there is no correct answer.

5
00:00:10,000 --> 00:00:13,000
Code organization--whether you're writing web apps or 
any other type of software--

6
00:00:13,000 --> 00:00:16,000
is something that comes from experience 
and you can develop your own style.

7
00:00:16,000 --> 00:00:19,000
When I'm building a web app, generally 
things start off in one file,

8
00:00:19,000 --> 00:00:23,000
and in this file we probably have 
a section for handlers.

9
00:00:23,000 --> 00:00:26,000
These are the classes that define what 
we do when a particular URL is hit.

10
00:00:26,000 --> 00:00:30,000
Almost every framework I've worked in 
has this notion of a handler.

11
00:00:30,000 --> 00:00:33,000
It also has this notion of a URL mapping.

12
00:00:33,000 --> 00:00:36,000
This maps a URL to a particular handler.

13
00:00:36,000 --> 00:00:38,000
We've dealt with this a lot in this lecture.

14
00:00:38,000 --> 00:00:41,000
There is also some DB stuff, some objects, the 
models, the things we're actually working on--

15
00:00:41,000 --> 00:00:46,000
blog posts, pieces of art from ASCII Chan, links 
and comments, and that sort of thing.

16
00:00:46,000 --> 00:00:50,000
Then almost immediately I have 
separate files for static content--

17
00:00:50,000 --> 00:00:54,000
things like CSS, JavaScript.

18
00:00:54,000 --> 00:00:56,646
We haven't done any JavaScript in this class really.

19
00:00:56,646 --> 00:01:00,000
Images I store separately. You could encode them 
into your file, but that doesn't make sense.

20
00:01:00,000 --> 00:01:02,215
You just store them separately. Generally 
you serve them separately as well.

21
00:01:02,215 --> 00:01:04,000
App Engine makes it easy to do that.

22
00:01:04,000 --> 00:01:07,000
Another thing that's almost always separate 
from the beginning are templates.

23
00:01:07,000 --> 00:01:08,784
I almost always separate templates from the beginning.

24
00:01:08,784 --> 00:01:12,000
I didn't teach them from the beginning in 
this class because I didn't want to explain

25
00:01:12,000 --> 00:01:17,000
HTML and new Python and also this new 
mini-language of templates all at the same time.

26
00:01:17,000 --> 00:01:20,000
I've never actually taught templates directly in this class,

27
00:01:20,000 --> 00:01:22,000
although most of you seem to be using them at this point.

28
00:01:22,000 --> 00:01:24,000
You've found the documentation. 
People have talked about them in forums.

29
00:01:24,000 --> 00:01:25,707
These are always separate.

30
00:01:25,707 --> 00:01:28,000
As things grow, this file here is actually my main file.

31
00:01:28,000 --> 00:01:31,000
It's actually often called main.py, at least for me.

32
00:01:31,000 --> 00:01:33,000
The first thing I do is I pull out the DB models.

33
00:01:33,000 --> 00:01:36,000
I generally have one file if it's required. 
We don't need this in App Engine.

34
00:01:36,000 --> 00:01:38,000
Refer to it as the ORM.

35
00:01:38,000 --> 00:01:41,000
I almost always write my own ORM. I don't 
really like the home-brewed ones.

36
00:01:41,000 --> 00:01:43,000
ORM stands for oject-relational mapping.

37
00:01:43,000 --> 00:01:46,000
This is a piece of code that basically 
maps your Python objects

38
00:01:46,000 --> 00:01:48,000
to the relational database.

39
00:01:48,000 --> 00:01:52,000
Often it'll have a little query language that 
compiles into SQL--that sort of thing.

40
00:01:52,000 --> 00:01:54,000
We haven't had to deal with any of that in this class,

41
00:01:54,000 --> 00:01:56,000
because the App Engine provides it to us.

42
00:01:56,000 --> 00:01:59,000
The db.model thing we've been using 
to interact with the Google datastore--

43
00:01:59,000 --> 00:02:01,000
that's basically an ORM.

44
00:02:01,000 --> 00:02:03,000
The data model underlying it isn't strictly relational.

45
00:02:03,000 --> 00:02:07,000
Effectively what it's doing is taking your 
Python objects and abstracting away

46
00:02:07,000 --> 00:02:11,000
querying and cursoring and all of that stuff you 
have to do to get stuff in and out of the database.

47
00:02:11,000 --> 00:02:14,000
I generally have a separate file for each type of data.

48
00:02:14,000 --> 00:02:17,000
In our case, we've been talking about posts and art.

49
00:02:17,000 --> 00:02:20,000
As our systems grow and you have 
more datatypes and users ,

50
00:02:20,000 --> 00:02:25,000
I generally pull those apart into different files 
and have a bunch of class-specific

51
00:02:25,000 --> 00:02:29,000
functions in each of these--password hashing and 
all that stuff would go in a users file.

52
00:02:29,000 --> 00:02:32,000
Functions to get the top post and top arts 
would go in those separate files.

53
00:02:32,000 --> 00:02:34,000
I kind of pull all of that out.

54
00:02:34,000 --> 00:02:36,000
The next thing I almost always have is some sort of utils.

55
00:02:36,000 --> 00:02:40,000
I usually have a utils file or utils module
--a series of files in a directory--

56
00:02:40,000 --> 00:02:44,000
that basically have all the random stuff
--things like make<u>secure</u>val

57
00:02:44,000 --> 00:02:48,000
and make<u>salt and random</u>string. 
Handy things.

58
00:02:48,000 --> 00:02:53,000
Generally, I want to put as much into 
utils as I can--just a list of flat functions

59
00:02:53,000 --> 00:02:56,000
that have no dependencies on any other part of the project.

60
00:02:56,000 --> 00:02:59,000
The reason I do this is so that I can test these things.

61
00:02:59,000 --> 00:03:03,000
These are often little helpful files that 
any piece of the project can manage.

62
00:03:03,000 --> 00:03:05,000
I have a lot of date manipulation stuff in these files,

63
00:03:05,000 --> 00:03:09,000
a lot of string manipulation, escaping stuff
--all those sort of functions that I write

64
00:03:09,000 --> 00:03:12,000
I usually put in a file. It usually starts out called utils.py.

65
00:03:12,000 --> 00:03:14,000
It's really important that it's always a one-way inheritance.

66
00:03:14,000 --> 00:03:17,000
Handlers can import from utils. 
Databases can import from utils.

67
00:03:17,000 --> 00:03:20,000
Anything can import from utils, but utils 
never brings in other parts of the project.

68
00:03:20,000 --> 00:03:22,000
That just kind of keeps things simple,

69
00:03:22,000 --> 00:03:24,000
and if you think about it that way, 
you'll have this nice, clean file

70
00:03:24,000 --> 00:03:26,000
with a bunch of handy functions.

71
00:03:26,000 --> 00:03:29,000
If you look at Reddit's source code, there is 
maybe about 100 handy little functions

72
00:03:29,000 --> 00:03:31,000
that we use all over the code. I 
usually throw that in one spot.

73
00:03:31,000 --> 00:03:35,000
Then the final thing I do, and this usually 
takes more time as the project grows

74
00:03:35,000 --> 00:03:37,000
is I take handlers out of main.py.

75
00:03:37,000 --> 00:03:39,000
You might have separate files for each type of handler.

76
00:03:39,000 --> 00:03:43,000
For the homeworks I may have 
a separate file for just the blog,

77
00:03:43,000 --> 00:03:45,000
a separate file for ASCII Chan,

78
00:03:45,000 --> 00:03:47,000
a separate file for those Unit 2 ones--the rot13 stuff,

79
00:03:47,000 --> 00:03:51,000
and then main.py is basically the url mapping 
and then a bunch of imports.

80
00:03:51,000 --> 00:03:54,000
Then these guys would import whatever 
database pieces they need.

81
00:03:54,000 --> 00:03:56,000
It kind of keeps things separate.

82
00:03:56,000 --> 00:03:59,000
Sometimes it's really hard to enforce this, 
and you can have what's called

83
00:03:59,000 --> 00:04:03,000
a circular import where one file--rot13 
may depend on some generic files

84
00:04:03,000 --> 00:04:07,000
that are defined in main.py, which depends 
on the actual handlers in rot13 itself.

85
00:04:07,000 --> 00:04:09,000
You get this kind of circular import.

86
00:04:09,000 --> 00:04:12,000
Generally when you start having circular imports 
that means it's time to pull some

87
00:04:12,000 --> 00:04:15,000
common piece of functionality out so 
the inheritance only goes one way.

88
00:04:15,000 --> 00:04:18,000
For example, I have that generic handler
--I think I've been calling it blog_handler

89
00:04:18,000 --> 00:04:22,000
in my homework solutions--that just 
kind of has all that helpful stuff on it.

90
00:04:22,000 --> 00:04:26,000
That would get pulled out into its own file so that 
main.py could import it, if it needs it at all.

91
00:04:26,000 --> 00:04:29,000
The big groups of handlers can import from there as well.

92
00:04:29,000 --> 00:04:31,000
This is basically how I organize things.

93
00:04:31,000 --> 00:04:33,000
I'm going to draw a slight different picture 
of how the file system might look.

94
00:04:33,000 --> 00:04:36,000
We'll leave it at that. Now, again, this may not 
apply to you, but this is what's worked for me.

95
00:04:36,000 --> 00:04:38,000
Usually at my top level I have /main.py.

96
00:04:38,000 --> 00:04:41,000
I probably have some sort of common file 
that's called like handlers.py

97
00:04:41,000 --> 00:04:44,000
or something of that nature that 
basically has the generic handler--

98
00:04:44,000 --> 00:04:46,000
things that happen on every single request.

99
00:04:46,000 --> 00:04:50,000
Then I'll probably have a directory called /lib 
that might have some of the DB stuff,

100
00:04:50,000 --> 00:04:52,000
which may have all of my models.

101
00:04:52,000 --> 00:04:56,000
I may have utils.py and any of the 
specific stuff that we're doing.

102
00:04:56,000 --> 00:04:58,000
Got that generic handlers.py.

103
00:04:58,000 --> 00:05:03,000
It might have the other handler as the blog.py, 
the rot13.py--that sort of thing.

104
00:05:03,000 --> 00:05:07,000
The bulk of the code is either in handlers.py 
or in each of these specific things.

105
00:05:07,000 --> 00:05:10,000
These are the pieces that import from 
all the other parts of my projects.

106
00:05:10,000 --> 00:05:13,000
That's generally kind of how I start. 
Things grow from there.

107
00:05:13,000 --> 00:05:17,000
Of course, I have directories for templates and static. 
I'll keep things organized that way.

108
00:05:17,000 --> 00:05:19,000
If we need subdirectories in either of this, I may add them.

109
00:05:19,000 --> 00:05:22,000
But actually generally for me my templates directory 
is just a monster pile of templates.

110
00:05:22,000 --> 00:05:26,000
Of course, as you get more advanced with templates, 
these can start inheriting from each other.

111
00:05:26,000 --> 00:05:29,000
I almost always have something like a base.html.

112
00:05:29,000 --> 00:05:31,000
Then most of my main templates will inherit from this.

113
00:05:31,000 --> 00:05:35,000
There you go. I hope that helps. Many of you have 
been asking. Let's move onto the next piece.
