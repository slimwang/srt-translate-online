1
00:00:00,025 --> 00:00:04,640
What would be more general is to have the transparent filter's color affect the

2
00:00:04,640 --> 00:00:09,086
color behind it. In other words, we want to blend the two colors. In blending in

3
00:00:09,086 --> 00:00:12,690
computer graphics, the original color is called the "destination" and the color of

4
00:00:12,690 --> 00:00:16,402
the transparent object we're looking through is called the "source" color. We'd

5
00:00:16,402 --> 00:00:20,954
also like to control how much can be seen through this filter. In computer

6
00:00:20,954 --> 00:00:26,818
graphics this control value is called "alpha". Here it represents our filter's

7
00:00:26,818 --> 00:00:31,495
opacity. When alpha is one, the filter is fully opaque and does not let any

8
00:00:31,495 --> 00:00:35,819
light through. As this value decreases, more of the destination color becomes

9
00:00:35,819 --> 00:00:39,464
visible. Here I'm just showing how the red is affected; the blue would show

10
00:00:39,464 --> 00:00:44,710
through. When alpha is zero, our filter is entirely transparent and has no

11
00:00:44,710 --> 00:00:49,088
effect. A typical way to blend these colors is by using this equation. Here, the

12
00:00:49,088 --> 00:00:53,136
color of the source of our filter is multiplied by the source's alpha. This

13
00:00:53,136 --> 00:00:57,340
gives how much the source will affect the final color. The larger alpha is, the

14
00:00:57,340 --> 00:01:02,183
more the source color affects the final color. To counterbalance this, this same

15
00:01:02,183 --> 00:01:06,739
alpha is subtracted from one, and this value determines how much the destination

16
00:01:06,739 --> 00:01:11,100
color influences the result. This type of blend is called an "over" operator, as

17
00:01:11,100 --> 00:01:15,440
it gives the effect of putting one color over another. The alpha of the source,

18
00:01:15,440 --> 00:01:20,781
our transparent filter, can be any value from zero to one. If the value is zero,

19
00:01:20,781 --> 00:01:24,750
this equation simply becomes "C" is equal to the destination color, since the

20
00:01:24,750 --> 00:01:29,338
source filter is entirely transparent. If the value of alpha is one, the source

21
00:01:29,338 --> 00:01:34,486
is fully opaque and hides what ever it's being placed over. The equation

22
00:01:34,486 --> 00:01:38,300
simplifies as expected, with the final color being the same as the source color.

23
00:01:38,300 --> 00:01:43,657
The alpha value blends between these two colors. Another way to say it is that

24
00:01:43,657 --> 00:01:49,389
the equation performs linear interpolation. As one color's influence increases,

25
00:01:49,389 --> 00:01:54,624
the other color's effect drops off in proportion. This idea of having a control

26
00:01:54,624 --> 00:01:59,310
value, in this case, alpha, that varies between zero and one is commonly used in

27
00:01:59,310 --> 00:02:03,524
many areas of computer graphics. Expect to see this sort of equation elsewhere

28
00:02:03,524 --> 00:02:09,098
as you explore the field. The over operator is useful for transparency. However

29
00:02:09,098 --> 00:02:13,099
there are many other blend modes available on WebGL. For example, one blend mode

30
00:02:13,099 --> 00:02:17,156
is called "add" as it adds the source and destination colors together. In three.js the

31
00:02:17,156 --> 00:02:21,585
blend mode used is specified with the material's blending parameter. Here we see

32
00:02:21,585 --> 00:02:26,124
the over equation in action. By varying the alpha, we fade the effect of the

33
00:02:26,124 --> 00:02:29,324
transparent object on and off. Try it yourself.
