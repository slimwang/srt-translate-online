1
00:00:00,560 --> 00:00:02,760
I've opened up Backbone
source code here.

2
00:00:02,760 --> 00:00:06,750
And let's refresh the page so that we
know that we're starting from scratch.

3
00:00:06,750 --> 00:00:08,760
And now let's set up that object again.

4
00:00:08,760 --> 00:00:10,250
We need a break point here so

5
00:00:10,250 --> 00:00:13,700
that chrome will pause when we
try to call on from the console.

6
00:00:13,700 --> 00:00:16,600
Great, now we can call on
to get the ball rolling.

7
00:00:16,600 --> 00:00:19,180
There will be several function
calls in quick succession.

8
00:00:19,180 --> 00:00:21,960
The important thing to notice
is that new information is being

9
00:00:21,960 --> 00:00:23,920
passed along with each call.

10
00:00:23,920 --> 00:00:27,430
First, InternalOn is called,
and adds this object.

11
00:00:27,430 --> 00:00:30,530
InternalOn adds an events
property to the object,

12
00:00:30,530 --> 00:00:33,870
which is the result of
the call to Events API.

13
00:00:33,870 --> 00:00:37,960
EventsAPI is called and
passes the on API function.

14
00:00:37,960 --> 00:00:41,550
The existing events,
if there are any, or an empty object.

15
00:00:41,550 --> 00:00:45,820
The event name, the callback,
and some other contextual data.

16
00:00:45,820 --> 00:00:47,850
Let's step into eventsAPI.

17
00:00:47,850 --> 00:00:51,080
EventsAPI checks if
the event name is an object.

18
00:00:51,080 --> 00:00:55,990
A string of multiple space
separated events, or a single name.

19
00:00:55,990 --> 00:00:57,290
Our event is log.

20
00:00:57,290 --> 00:00:58,680
So we end up down here.

21
00:00:58,680 --> 00:01:03,000
The empty list of events, name,
and callback are passed to OnAPI.

22
00:01:04,650 --> 00:01:07,710
When we started by calling
on down here in the console,

23
00:01:07,710 --> 00:01:11,070
everything up to this point has
been verifying information and

24
00:01:11,070 --> 00:01:14,180
adding new things that
are getting passed along.

25
00:01:14,180 --> 00:01:16,210
We finally reach
the bottom of the stack.

26
00:01:16,210 --> 00:01:18,530
Pay attention to what's
going on in this function.

27
00:01:18,530 --> 00:01:22,540
Since this is our first time through,
events name doesn't exist yet so

28
00:01:22,540 --> 00:01:24,310
an empty array is created.

29
00:01:24,310 --> 00:01:28,120
Both events name and
handlers points to this same array.

30
00:01:28,120 --> 00:01:31,630
We didn't pass any options,
so these are just undefined.

31
00:01:31,630 --> 00:01:33,940
Handlers is the new array
that was just created and

32
00:01:33,940 --> 00:01:36,460
an object containing the callback
function is added to it.

33
00:01:38,010 --> 00:01:41,590
If we look at the current scope, you'll
see that there's an event's object

34
00:01:41,590 --> 00:01:45,300
with a log property that's
an array of one object.

35
00:01:45,300 --> 00:01:47,080
That object has the callback inside it.

36
00:01:48,100 --> 00:01:51,110
The rest of the process is
returning this events object.

37
00:01:52,280 --> 00:01:55,330
Lastly and most importantly,
remember that this event's object

38
00:01:55,330 --> 00:01:57,539
is stored as a property
on the original object.

39
00:01:58,830 --> 00:02:03,840
And that's it, so Backbones on method
adds an events object to the object.

40
00:02:03,840 --> 00:02:06,500
Each key is the name of
an event to listen for.

41
00:02:06,500 --> 00:02:09,008
And each value is a list
of callbacks to run
