1
00:00:00,120 --> 00:00:01,430
So let's have a look at some of the

2
00:00:01,430 --> 00:00:05,830
implications of using multiple filters. This one is a concern.

3
00:00:05,830 --> 00:00:10,340
Deployed apps must have composite indexes for all filter combinations.

4
00:00:10,340 --> 00:00:12,340
If you try to run a query for which the

5
00:00:12,340 --> 00:00:15,200
composite index does not exist, you will get an

6
00:00:15,200 --> 00:00:17,880
error. Your users will see the error on the deployed

7
00:00:17,880 --> 00:00:21,360
app, so be very careful about that. Do the multiple

8
00:00:21,360 --> 00:00:25,680
filters per query increase data store writes? Definitely they do,

9
00:00:25,680 --> 00:00:29,320
so for the conference for every time you write an

10
00:00:29,320 --> 00:00:32,600
index entry, you have multiple writes every time you save

11
00:00:32,600 --> 00:00:36,460
the conference. And again, the more index entries you have

12
00:00:36,460 --> 00:00:39,350
the more space they take up in the data store. So

13
00:00:39,350 --> 00:00:41,730
let's take a look at what the index configuration file

14
00:00:41,730 --> 00:00:44,520
might look like. We have a lot of different index

15
00:00:44,520 --> 00:00:47,120
entries in here. I'm not going to read through them all

16
00:00:47,120 --> 00:00:50,640
but you can see that, know we have one for conference,

17
00:00:50,640 --> 00:00:53,990
filter by city, sorting by name, conference, filtering

18
00:00:53,990 --> 00:00:56,300
by top pick, sorting by name, and so on

19
00:00:56,300 --> 00:00:59,120
and so on. So, for every possible combination that

20
00:00:59,120 --> 00:01:01,890
you going to allow the user to filter on, you

21
00:01:01,890 --> 00:01:05,050
need to add that combination to your index

22
00:01:05,050 --> 00:01:09,450
configuration file. And here we're looking at the indexes

23
00:01:09,450 --> 00:01:13,130
in the data store viewer and the admin console.

24
00:01:13,130 --> 00:01:16,150
I just uploaded my app with all the indexes.

25
00:01:16,150 --> 00:01:18,900
And you see they're busy preparing. But you see how

26
00:01:18,900 --> 00:01:21,150
many of them there are. You need to be aware of

27
00:01:21,150 --> 00:01:24,170
the need for indexes. Every query that your users are going

28
00:01:24,170 --> 00:01:26,610
to make has to have an index. And if it requires

29
00:01:26,610 --> 00:01:28,830
a composite index, you're going to need to make sure that

30
00:01:28,830 --> 00:01:33,680
the composite index exists on your application. And although this combination

31
00:01:33,680 --> 00:01:37,300
of filters uses many indexes, the results of the queries are

32
00:01:37,300 --> 00:01:41,490
fast because every search is pre-indexed so the query performance scales

33
00:01:41,490 --> 00:01:44,070
with the size of the result set, not the input

34
00:01:44,070 --> 00:01:46,810
data set. It's one of the great things about App Engine.
