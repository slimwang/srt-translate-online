1
00:00:00,420 --> 00:00:07,450
So the upshot of the logical protection domain is the ability to extend SPIN

2
00:00:07,450 --> 00:00:13,700
to include operating system services and make that all part of the same

3
00:00:13,700 --> 00:00:15,770
hardware address space, so no border

4
00:00:15,770 --> 00:00:19,610
crossing between the services or the mechanisms

5
00:00:19,610 --> 00:00:26,130
provided by SPIN. So here is one example where all these system services are

6
00:00:26,130 --> 00:00:31,210
implemented as protection domain and using create, resolve and

7
00:00:31,210 --> 00:00:36,770
combine. We've created all these services as logical extensions

8
00:00:36,770 --> 00:00:42,140
of SPIN. Here is another extension living on top

9
00:00:42,140 --> 00:00:46,750
of the same hardware, concurrently with the first

10
00:00:46,750 --> 00:00:52,010
extension. And as you see, each of these mounds represent

11
00:00:52,010 --> 00:00:55,700
a completely different operating system. And each

12
00:00:55,700 --> 00:00:58,540
of these mounds may have their own

13
00:00:58,540 --> 00:01:01,750
subsystems for the same functionality. For instance,

14
00:01:01,750 --> 00:01:05,050
this process uses memory manager two. This

15
00:01:05,050 --> 00:01:08,050
process uses memory manager one. Both of

16
00:01:08,050 --> 00:01:11,110
them implement the same functionality. But very

17
00:01:11,110 --> 00:01:14,460
differently, hopefully, to cater to the needs

18
00:01:14,460 --> 00:01:17,990
of the applications that need those services.

19
00:01:17,990 --> 00:01:19,925
But they may also have common

20
00:01:19,925 --> 00:01:23,560
subsystems. For example, the network protocol stack,

21
00:01:23,560 --> 00:01:30,160
may be shared by both extensions that live on top the same hardware framework.
