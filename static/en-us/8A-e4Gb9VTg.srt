1
00:00:00,310 --> 00:00:02,540
Notice how things change in our diagram.

2
00:00:02,540 --> 00:00:06,790
Whereas previously, we were copying all the properties from Car.methods,

3
00:00:06,790 --> 00:00:08,920
over to the new instance objects.

4
00:00:08,920 --> 00:00:11,800
Now, we're simply going to make those new instance objects,

5
00:00:11,800 --> 00:00:14,170
delegate their field lookups to Car.methods.

6
00:00:14,170 --> 00:00:18,910
This is an important shift in that it allows us, to skip an expensive step of

7
00:00:18,910 --> 00:00:21,950
copying properties over, when we build a new object.

8
00:00:21,950 --> 00:00:25,400
It's interesting to note that if Netscape hadn't pushed for adding Javaesque

9
00:00:25,400 --> 00:00:28,960
keywords and features to the language way back in 1995, we might have

10
00:00:28,960 --> 00:00:32,750
been writing code very much like this for all of our JavaScript classes.

11
00:00:32,750 --> 00:00:36,850
The steps for making the class in this prototypal pattern are pretty clear.

12
00:00:36,850 --> 00:00:40,180
All you need is a function that allows you to make instances, a line in

13
00:00:40,180 --> 00:00:44,680
that function that generates the new instance object, a delegation from the new

14
00:00:44,680 --> 00:00:49,080
object to some prototype object, and some logic for augmenting the object with

15
00:00:49,080 --> 00:00:52,840
properties that make it unique from all the other objects of the same class.

16
00:00:52,840 --> 00:00:54,140
Since this pattern is so

17
00:00:54,140 --> 00:00:59,100
common, the language designer decided to add official conventions to support it.

18
00:00:59,100 --> 00:01:01,470
You see how we're making the methods objects here,

19
00:01:01,470 --> 00:01:04,489
and adding it as a property of the Car function object?

20
00:01:04,489 --> 00:01:06,060
If we plan to use prototypes for

21
00:01:06,060 --> 00:01:09,800
all of our classes, we'll probably be doing this every time.

22
00:01:09,800 --> 00:01:11,950
Since building a holder object for methods and

23
00:01:11,950 --> 00:01:14,810
attaching it as a property to the constructor function is so

24
00:01:14,810 --> 00:01:18,240
common, the language does this for you automatically.

25
00:01:18,240 --> 00:01:22,430
Whenever a function is created, it'll have an object attached to it,

26
00:01:22,430 --> 00:01:25,330
that you can use as a container for methods just in case you

27
00:01:25,330 --> 00:01:28,960
plan on using that function, to build instances of a class.

28
00:01:28,960 --> 00:01:32,540
The crazy thing is, this occasionally handy property,

29
00:01:32,540 --> 00:01:37,730
the one the language is going to build for you, is not stored at the key.method.

30
00:01:37,730 --> 00:01:41,680
Although we had chosen to store our handy method container object at

31
00:01:41,680 --> 00:01:43,520
the key.methods.

32
00:01:43,520 --> 00:01:46,450
The default object that comes with every function,

33
00:01:46,450 --> 00:01:48,900
is stored at the key.prototype.

34
00:01:48,900 --> 00:01:52,310
It's just a naming choice, but it has been a very confusing naming

35
00:01:52,310 --> 00:01:55,410
choice throughout the history of the language, and I'll explain why.

36
00:01:55,410 --> 00:01:58,200
But first let's refactor our code to make use of the fact that we're

37
00:01:58,200 --> 00:02:02,820
given this free, .prototype property, where we can store all of our methods.

38
00:02:02,820 --> 00:02:05,555
Since I know this object is going to be created for me, and

39
00:02:05,555 --> 00:02:10,050
all I really need to do is add a move method, I can take out the object literal.

40
00:02:10,050 --> 00:02:11,430
And all I really need to do,

41
00:02:11,430 --> 00:02:14,903
is define this .move method on an existing .prototype object.

42
00:02:14,903 --> 00:02:17,930
But Car.methods doesn't exist anymore, so

43
00:02:17,930 --> 00:02:21,080
we need to refactor the rest of our code to reflect the use,

44
00:02:21,080 --> 00:02:25,144
of the provided container object, which is now stored at Car.prototype.
