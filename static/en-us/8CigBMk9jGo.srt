1
00:00:00,290 --> 00:00:04,292
Alright, so let's take a look at this monster of a function. Once again we

2
00:00:04,292 --> 00:00:07,464
start by defining whether or not this is a static or dynamic object, and of

3
00:00:07,464 --> 00:00:12,710
course setting the proper flag to the body definition type. So the first thing

4
00:00:12,710 --> 00:00:15,516
we do is we actually start off by defining whether or not this is a static or

5
00:00:15,516 --> 00:00:18,322
dynamic body and assign a particular flag to the type property of the body

6
00:00:18,322 --> 00:00:23,185
definition. Next, since the calling function probably has information about

7
00:00:23,185 --> 00:00:26,161
where they want this object to be spawned, we go ahead and set the position x

8
00:00:26,161 --> 00:00:29,281
and position y value so that the physics object can actually exist in the world

9
00:00:29,281 --> 00:00:34,234
in correct place. From there we call registry body function which will of

10
00:00:34,234 --> 00:00:37,114
course invoke box 2D to create a physics object and return to us a handler

11
00:00:37,114 --> 00:00:42,360
representation of it and then we go through with creating a fixture definition.

12
00:00:42,360 --> 00:00:45,241
Now, the defaults for a fixture definition object are generally pretty good and

13
00:00:45,241 --> 00:00:49,028
that's what we use for most objects and grids. However, for the bouncy fixture

14
00:00:49,028 --> 00:00:51,800
we actually changed the density, friction and restitution, so that when an

15
00:00:51,800 --> 00:00:56,242
object hits a wall, it'll contain a lot of its velocity moving away. This means

16
00:00:56,242 --> 00:00:59,410
that bouncy bullets maintain a high velocity and ability to kill other players

17
00:00:59,410 --> 00:01:03,878
since they don't lose any energy in impacts with walls. Finally, what we'll do

18
00:01:03,878 --> 00:01:07,050
is actually create a shape object with a new polygon shape as standard API

19
00:01:07,050 --> 00:01:10,378
calling defines, and then we'll call SetAsBox passing in half width and half

20
00:01:10,378 --> 00:01:15,690
height. From there we call the CreateFixture objects which attaches this

21
00:01:15,690 --> 00:01:19,745
definition to the body object and return it out to the calling class. And if

22
00:01:19,745 --> 00:01:21,640
you got all that, then you deserve a cookie.
