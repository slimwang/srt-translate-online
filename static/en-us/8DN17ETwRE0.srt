1
00:00:00,000 --> 00:00:02,000
I made up a bigger test.

2
00:00:02,000 --> 00:00:09,000
I made up a dictionary of hands that map from a hand to a set of words that I found.

3
00:00:09,000 --> 00:00:13,000
The idea here is that this test is not so much proving that I've got the right answer,

4
00:00:13,000 --> 00:00:16,000
because I don't know for sure that this is the right answers.

5
00:00:16,000 --> 00:00:22,000
Rather, this is what we call a regression test, meaning as we change our program

6
00:00:22,000 --> 00:00:26,000
we want to make sure that we haven't broken any of these--that we haven't made changes to our functions.

7
00:00:26,000 --> 00:00:32,000
Even if I don't know this is exactly the right set, I want to know when I made a change,

8
00:00:32,000 --> 00:00:34,000
have I changed the result here.

9
00:00:34,000 --> 00:00:37,000
I'll be able to rerun this and say, have we done exactly the same thing.

10
00:00:37,000 --> 00:00:42,000
I'll also be able to time the results of running these various hands

11
00:00:42,000 --> 00:00:44,000
and see if we can make our function faster.

12
00:00:44,000 --> 00:00:51,000
Here is my list of hands. I've got eight hands.

13
00:00:51,000 --> 00:00:53,000
Then I did some further tests here.

14
00:00:53,000 --> 00:00:56,000
I'm testing removing letters--got all those right.

15
00:00:56,000 --> 00:01:02,000
Then I'm going through the hands, and I'm using my timedcall() function that we build last time.

16
00:01:02,000 --> 00:01:05,000
That returnsin lapsed time and a set of results.

17
00:01:05,000 --> 00:01:08,000
I make sure all the results are what I expected.

18
00:01:08,000 --> 00:01:14,000
Then I return the time elapsed for finding all the words in those eight hands.

19
00:01:14,000 --> 00:01:16,000
It turns out it takes half a second.

20
00:01:16,000 --> 00:01:18,000
That kind of worries me. That doesn't sound very good.

21
00:01:18,000 --> 00:01:24,000
Sure, if I was playing Scrabble with a friend and they reply in a half second, that'd be pretty good.

22
00:01:24,000 --> 00:01:26,000
Much better than me, for example.

23
00:01:26,000 --> 00:01:31,000
In this game here it says that I haven't replied to my friend Ken in 22 hours.

24
00:01:31,000 --> 00:01:35,000
This is a lot better, but still, if we're going to be doing a lot of work

25
00:01:35,000 --> 00:01:40,000
and trying to find the best possible play, half a second to evaluate eight hands--

26
00:01:40,000 --> 00:01:42,000
that doesn't seem fast enough.

27
00:01:42,000 --> 00:01:44,000
Why is find_words() so slow?

28
00:01:44,000 --> 00:01:49,000
One thing is that it's got a lot of nested loops, and it always does all of them.

29
00:01:49,000 --> 00:01:51,000
A lot of that is going to be wasteful.

30
00:01:51,000 --> 00:01:57,000
For example, let's say the first two letters in the hand were z and q.

31
00:01:57,000 --> 00:02:03,000
At the very start here w is z + q, and now I loop through all the other combinations

32
00:02:03,000 --> 00:02:08,000
of all the other letters in the hand trying to find words that start with z + q,

33
00:02:08,000 --> 00:02:12,000
but there aren't any words in the dictionary that start with zq.

34
00:02:12,000 --> 00:02:15,000
As soon as I got here, I should be able to figure that out

35
00:02:15,000 --> 99:59:59,999
and not do all of the rest of these nested loops.
