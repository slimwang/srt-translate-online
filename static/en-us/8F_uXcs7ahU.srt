1
00:00:00,110 --> 00:00:03,150
But as soon as we write any code that relies on the differences that

2
00:00:03,150 --> 00:00:07,280
exist between a regular car and a cop car, then we have a bit of a problem.

3
00:00:07,280 --> 00:00:11,360
We can't really add a cal method to every car instance because we don't

4
00:00:11,360 --> 00:00:14,450
really think that non-cop cars deserve that method.

5
00:00:14,450 --> 00:00:18,550
One naive solution would be to copy all of the code from the car class into

6
00:00:18,550 --> 00:00:20,860
a second class and then re-factor it.

7
00:00:20,860 --> 00:00:23,930
We'd probably give the two functions different names to reflect that they

8
00:00:23,930 --> 00:00:25,640
are different classes.

9
00:00:25,640 --> 00:00:28,830
Then in each function, we would add the code that would make that particular

10
00:00:28,830 --> 00:00:30,910
class different from the other.

11
00:00:30,910 --> 00:00:31,550
In this case,

12
00:00:31,550 --> 00:00:34,760
imagine that the grab method is something only vans should be able to do

13
00:00:34,760 --> 00:00:38,100
because it's the way in which the van is going to be able to attack the player.

14
00:00:38,100 --> 00:00:41,610
By contrast, this cal method is something that's only available to cops.

15
00:00:41,610 --> 00:00:44,660
Because it represents the way in which the player can get access to

16
00:00:44,660 --> 00:00:46,190
help from a cop.

17
00:00:46,190 --> 00:00:49,800
In this scenario we would have two different constructor functions that both

18
00:00:49,800 --> 00:00:53,820
produced objects that were basically identical with the exception of this new

19
00:00:53,820 --> 00:00:56,630
method, either grab or cal.

20
00:00:56,630 --> 00:00:57,960
This solution works.

21
00:00:57,960 --> 00:01:00,770
But as you can see, there's a lot of duplicated code here.

22
00:01:00,770 --> 00:01:03,450
Let's look for a solution that allows us to reuse that code,

23
00:01:03,450 --> 00:01:04,489
rather than type it twice
