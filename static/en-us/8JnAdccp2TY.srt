1
00:00:00,280 --> 00:00:04,130
Here's our first simple app,
which we're calling Click Counter.

2
00:00:04,130 --> 00:00:06,830
It has one button and one label.

3
00:00:06,830 --> 00:00:11,060
When you tap the button, the label
shows an integer value that increments.

4
00:00:11,060 --> 00:00:13,155
This app is extremely simple.

5
00:00:13,155 --> 00:00:15,315
In fact, you might think you
could build it in your sleep.

6
00:00:15,315 --> 00:00:19,045
But we want you to get in to the habit
of diagraming all the objects used to

7
00:00:19,045 --> 00:00:19,605
create an app.

8
00:00:19,605 --> 00:00:22,715
Let's give this a try for
each of the objects in Click Counter.

9
00:00:22,715 --> 00:00:26,462
We can draw each of the objects
we're interested in as a rectangle.

10
00:00:26,462 --> 00:00:30,180
And we'll represent object
properties with circles like this.

11
00:00:30,180 --> 00:00:32,890
All ViewControllers
inherit a view property.

12
00:00:32,890 --> 00:00:34,920
This points to the root view of a page.

13
00:00:34,920 --> 00:00:37,980
In this case, the view that
paints the white background.

14
00:00:37,980 --> 00:00:41,920
Our diagram needs two more view objects,
a button to click and

15
00:00:41,920 --> 00:00:43,150
a label to show the click count.

16
00:00:43,150 --> 00:00:46,340
We will draw objects that
paint the view in blue.

17
00:00:46,340 --> 00:00:49,520
These view objects contain
the complex code required to get

18
00:00:49,520 --> 00:00:52,048
all the pixels painted
in the right colors.

19
00:00:52,048 --> 00:00:54,670
These are UIKit objects
that we use off the shelf

20
00:00:54,670 --> 00:00:56,310
as they've been written by Apple.

21
00:00:56,310 --> 00:00:57,970
Do we need a model object?

22
00:00:57,970 --> 00:01:00,600
In this case, our app only
needs to remember one number so

23
00:01:00,600 --> 00:01:01,760
that it can increment.

24
00:01:01,760 --> 00:01:04,209
Let's make an int property
in our ViewController.

25
00:01:04,209 --> 00:01:05,630
We'll call it count.

26
00:01:05,630 --> 00:01:08,170
This is the basic
architecture of our app.

27
00:01:08,170 --> 00:01:11,680
We've got our model that stores the
click count, our view objects that paint

28
00:01:11,680 --> 00:01:15,230
the screen ,and our ViewController
that ties everything together.

29
00:01:15,230 --> 00:01:19,690
These objects get created and connected
right before this page is displayed.

30
00:01:19,690 --> 00:01:23,110
Now let's say the user clicks
the button after the page is displayed.

31
00:01:23,110 --> 00:01:25,520
Those button tabs turn into events, so

32
00:01:25,520 --> 00:01:27,870
we'll indicate that in
our diagram as well.

33
00:01:27,870 --> 00:01:31,000
So what else will these objects
need in order for the app to work?

34
00:01:31,000 --> 00:01:34,040
Let's think through the sequence of
events that happens as the user taps

35
00:01:34,040 --> 00:01:35,280
the screen.

36
00:01:35,280 --> 00:01:39,200
The user taps a button on the screen and
that button interprets that

37
00:01:39,200 --> 00:01:43,640
tap as an event, invoking
an action in the ViewController.

38
00:01:43,640 --> 00:01:46,750
Now we're in our control code,
our custom code.

39
00:01:46,750 --> 00:01:49,430
Here the Viewcvontroller
updates the model.

40
00:01:49,430 --> 00:01:50,834
After updating the model,

41
00:01:50,834 --> 00:01:54,460
the ViewController needs to also
update the text of this label.

42
00:01:54,460 --> 00:01:59,240
But right now, the ViewController
doesn't have a way to access that text.

43
00:01:59,240 --> 00:02:01,530
In order to accomplish this last step,

44
00:02:01,530 --> 00:02:03,832
we need to add a label property
to the ViewController.

45
00:02:03,832 --> 00:02:05,070
All right.

46
00:02:05,070 --> 00:02:06,900
Now that we got a plan,

47
00:02:06,900 --> 00:02:09,900
let's go recreate these objects
in the viewcontroller.swift file
