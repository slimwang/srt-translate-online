1
00:00:00,530 --> 00:00:05,830
Remember the goal is performance efficient implementation of RVM.

2
00:00:05,830 --> 00:00:10,740
The restricted semantics of transaction help a lot in making sure

3
00:00:10,740 --> 00:00:15,570
that what we are designing as a reliable virtual memory is

4
00:00:15,570 --> 00:00:20,840
not very heavyweight. But the implementation of that

5
00:00:20,840 --> 00:00:25,800
used semantic, as to be efficient as well, and that's part of the reason

6
00:00:25,800 --> 00:00:28,020
why this is called light weight reliable virtual

7
00:00:28,020 --> 00:00:30,840
memory to indicate that it's light weight in

8
00:00:30,840 --> 00:00:33,540
terms of transaction properties. Now how to make

9
00:00:33,540 --> 00:00:36,690
it really perform well? The first thing is

10
00:00:36,690 --> 00:00:39,970
the strategy that they use for recording changes

11
00:00:39,970 --> 00:00:43,470
to the persistent portion of the virtual memory.

12
00:00:43,470 --> 00:00:46,435
The logging strategy is what is called no

13
00:00:46,435 --> 00:00:51,140
undo/redo value logging. No undo, meaning that we

14
00:00:51,140 --> 00:00:54,360
are creating an undo record of the changes that we're

15
00:00:54,360 --> 00:00:57,500
going to make to virtual memory, but it is not a log

16
00:00:57,500 --> 00:01:00,380
that is persistent on the disk. It is just an in-memory

17
00:01:00,380 --> 00:01:03,720
copy that is kept only for the duration of the transaction,

18
00:01:03,720 --> 00:01:06,510
and at the end of the transaction either it commits or

19
00:01:06,510 --> 00:01:10,350
aborts. We throw away that undo copy that we created. On

20
00:01:10,350 --> 00:01:13,750
the other hand, redo is the log that you create. First

21
00:01:13,750 --> 00:01:17,100
of all, in memory of the data structure in RBM, and

22
00:01:17,100 --> 00:01:19,680
we commit those data structure to memory, and

23
00:01:19,680 --> 00:01:23,080
in committing the changes of the redo logs, we

24
00:01:23,080 --> 00:01:26,830
are only writing the new value records of committed

25
00:01:26,830 --> 00:01:30,160
transactions to the log. So, even though the redo

26
00:01:30,160 --> 00:01:33,590
log. Consists of a transaction start and the

27
00:01:33,590 --> 00:01:36,850
changes that you're making, only new value records of

28
00:01:36,850 --> 00:01:39,290
commuter transactions are written to the log. Now this

29
00:01:39,290 --> 00:01:42,160
is the reason you have forward displacements, that a

30
00:01:42,160 --> 00:01:45,690
that we know where to append to the log segment

31
00:01:45,690 --> 00:01:47,910
on the disk there is a in memory version of

32
00:01:47,910 --> 00:01:50,580
the log segment too which you are writing the redo

33
00:01:50,580 --> 00:01:54,090
logs. And once you've written the redo logs, you're flushing

34
00:01:54,090 --> 00:01:57,135
it to the disk. On the disk, you have a

35
00:01:57,135 --> 00:02:00,600
on-disk version of this redo log record for this particular

36
00:02:00,600 --> 00:02:03,960
process, and what you're doing at a commit point is

37
00:02:03,960 --> 00:02:07,880
only writing the new value records of the committed transactions.

38
00:02:07,880 --> 00:02:13,030
A detail of the log segment. So we are only appending to that log segment the

39
00:02:13,030 --> 00:02:15,470
new changes that have been made within this

40
00:02:15,470 --> 00:02:19,430
transaction. So upon commit, what we need to do

41
00:02:19,430 --> 00:02:23,110
is we have to replace the old value

42
00:02:23,110 --> 00:02:25,740
records in the virtual memory with the new value

43
00:02:25,740 --> 00:02:29,210
records. But this is automatic because the way

44
00:02:29,210 --> 00:02:32,950
LRVM works is that it is created an undo

45
00:02:32,950 --> 00:02:35,770
record of the old value records of that

46
00:02:35,770 --> 00:02:37,810
portion of the virtual address base and all

47
00:02:37,810 --> 00:02:40,810
the changes that the developers making to the

48
00:02:40,810 --> 00:02:46,150
persistence data structures in memory are happening in memory

49
00:02:46,150 --> 00:02:49,510
and therefore replacing the old value records by

50
00:02:49,510 --> 00:02:51,890
the new value records in the virtual memory is

51
00:02:51,890 --> 00:02:54,660
automatic. Only if you abort, you have to

52
00:02:54,660 --> 00:02:57,990
undo the changes. But if you're committing then your

53
00:02:57,990 --> 00:03:00,090
virtual memory is already ready to go in

54
00:03:00,090 --> 00:03:03,260
terms of the changes that are being made

55
00:03:03,260 --> 00:03:05,450
within the transaction. At that point you have

56
00:03:05,450 --> 00:03:08,240
to force the redo log records to the

57
00:03:08,240 --> 00:03:12,980
log on the disc, and as I mentioned earlier, the optimization that's

58
00:03:12,980 --> 00:03:18,490
available in the implementation is to get transactions on the cheap.

59
00:03:18,490 --> 00:03:23,770
In particular, the no restore optimization allows implementation not

60
00:03:23,770 --> 00:03:27,400
to create an in memory undo record. That's

61
00:03:27,400 --> 00:03:30,470
time saved in terms of copying. And that

62
00:03:30,470 --> 00:03:34,660
means better performance for the application. And similarly,

63
00:03:34,660 --> 00:03:38,410
no flush, a commit point tells RBM that

64
00:03:38,410 --> 00:03:43,940
it can write the redo log to the disk lazily. It does not have to block

65
00:03:43,940 --> 00:03:46,510
the process that is making that call, the

66
00:03:46,510 --> 00:03:49,190
end transaction call. And that is an opportunity

67
00:03:49,190 --> 00:03:53,090
again to make that implementation more performance-conscious. So

68
00:03:53,090 --> 00:03:56,330
this lazy commitment of course has its downside,

69
00:03:56,330 --> 00:03:58,550
there is this window of vulnerability that I

70
00:03:58,550 --> 00:04:01,770
mentioned, and that is, there is a time window

71
00:04:01,770 --> 00:04:05,680
between n transaction and the point at which

72
00:04:05,680 --> 00:04:08,360
the redo log has been forced to the disc

73
00:04:08,360 --> 00:04:10,690
and this is the window of vulnerability and

74
00:04:10,690 --> 00:04:14,260
if The system caches within this time, then we

75
00:04:14,260 --> 00:04:19,220
have lost the redo records that we wrote to in memory. And that is important to

76
00:04:19,220 --> 00:04:21,320
understand, that there is a price you pay,

77
00:04:21,320 --> 00:04:24,600
in order to get this flexibility and performance

78
00:04:24,600 --> 00:04:26,960
in the implementation. You can see that this,

79
00:04:26,960 --> 00:04:30,490
redo log data structure, allows traversal in both

80
00:04:30,490 --> 00:04:34,890
directions. And this is for flexibility in implementing

81
00:04:34,890 --> 00:04:39,930
the RVM runtime. In particular writing to the

82
00:04:39,930 --> 00:04:42,520
on disk version of this redo log,

83
00:04:42,520 --> 00:04:45,190
having these forward displacements allows you to know

84
00:04:45,190 --> 00:04:47,330
where exactly you want to append to

85
00:04:47,330 --> 00:04:50,790
the existing redo log record from the changes

86
00:04:50,790 --> 00:04:52,800
that are being done in this particular

87
00:04:52,800 --> 00:04:55,430
transaction, and being committed at this point in

88
00:04:55,430 --> 00:04:58,470
time. And similarly the diverse displacements are

89
00:04:58,470 --> 00:05:02,280
helpful in traversing the log record during recovery.
