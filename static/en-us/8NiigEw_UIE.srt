1
00:00:00,000 --> 00:00:01,946
You can also encounter thread divergence due to loops.

2
00:00:01,946 --> 00:00:03,569
Here's a somewhat contrived example.

3
00:00:03,569 --> 00:00:05,638
We have some pre-loop code in our kernel.

4
00:00:05,638 --> 00:00:08,714
All the threads are going to do this code, and then they're going to reach this for loop.

5
00:00:08,714 --> 00:00:11,804
And the way I've constructed it is, they're going to go through this loop

6
00:00:11,804 --> 00:00:13,873
a number of times equal to their thread index.

7
00:00:13,873 --> 00:00:16,239
So thread 0 will execute this code once.

8
00:00:16,239 --> 00:00:20,383
Thread 1 will execute it twice. Thread 2 will execute it 3 times and so on.

9
00:00:20,383 --> 00:00:25,148
And then eventually they're all going to exit the loop and proceed and do some post loop stuff.

10
00:00:25,148 --> 00:00:29,141
So what does this look like? Here's a bunch of threads and they're all in the same thread block.

11
00:00:29,141 --> 00:00:31,446
I've just color coded them so you can see what they do more easily.

12
00:00:31,446 --> 00:00:33,989
And they're all going to be executing this pre-loop code,

13
00:00:33,989 --> 00:00:35,996
and then they're going to reach the loop.

14
00:00:35,996 --> 00:00:42,090
So thread 0 is going to proceed into this loop code. And they just keep going.

15
00:00:42,090 --> 00:00:46,553
Thread 1 is going to execute the loop code, and then execute again, and keep going.

16
00:00:46,553 --> 00:00:52,152
Thread 2 will execute the loop code again and again, and keep going.

17
00:00:52,152 --> 00:00:54,790
And thread 3 will execute the loop code 4 times.

18
00:00:54,790 --> 00:00:57,055
So if we think about these threads a little differently in terms

19
00:00:57,055 --> 00:01:00,362
of what they're doing over time, the first order is executing the pre-loop code,

20
00:01:00,362 --> 00:01:02,756
then goes ahead and executes the loop code.

21
00:01:02,756 --> 00:01:04,971
And then it really just kind of sits around.

22
00:01:04,971 --> 00:01:08,929
Okay, it doesn't have anything to do for a while because, in the mean time,

23
00:01:08,929 --> 00:01:13,581
thread 1 has executed the pre-loop code and then the loop code

24
00:01:13,581 --> 00:01:15,496
and then executes the loop code again.

25
00:01:15,496 --> 00:01:18,661
The 3rd thread executes the pre-loop code, the loop code,

26
00:01:18,661 --> 00:01:22,900
the loop code, then executes the loop code again.

27
00:01:22,900 --> 00:01:28,128
And the final thread executes pre-loop code, and then executes the loop code 4 times.

28
00:01:28,143 --> 00:01:32,948
And finally, all the threads can go ahead and proceed with post-loop code.

29
00:01:32,948 --> 00:01:36,146
This diagram, when you draw it like this, kind of gives you a sense

30
00:01:36,146 --> 00:01:39,607
of why loop divergence is a bad thing, why it slows you down.

31
00:01:39,607 --> 00:01:43,078
Because it turns out that the hardware likes to run these threads together,

32
00:01:43,078 --> 00:01:46,067
and as long as they're doing the same thing, as long as they're executing the same code,

33
00:01:46,067 --> 00:01:48,215
then it has the ability to do that.

34
00:01:48,215 --> 00:01:53,018
But in this case, the blue thread proceeds for a while, and then, because it's not

35
00:01:53,018 --> 00:01:57,384
going to do the loop again, it just ends up waiting around while the other threads do so.

36
00:01:57,384 --> 00:02:00,478
And then the red thread waits for a little while. The green thread waits a little bit.

37
00:02:00,478 --> 00:02:04,752
And only the purple thread was executing, at full efficiency the whole time.

38
00:02:04,752 --> 00:02:07,718
And so you can imagine that if the hardware gets some

39
00:02:07,718 --> 00:02:10,401
efficiency out of running all 4 of these threads at the same time,

40
00:02:10,401 --> 00:02:14,757
then that efficiency has been lost during this portion of the loop.
