1
00:00:00,080 --> 00:00:03,056
With magnification we've found that if a texel covered too many pixels, we

2
00:00:03,056 --> 00:00:06,176
could just make our original checkered texter larger and larger so that about

3
00:00:06,176 --> 00:00:11,296
one texel covered one pixel. With minification we'd like each pixel to cover no

4
00:00:11,296 --> 00:00:15,106
more than one texel. The GPU has built into it, special functionality that

5
00:00:15,106 --> 00:00:19,497
implements an algorithm called mip mapping. With mip mapping the GPU computes

6
00:00:19,497 --> 00:00:24,128
approximately what the texel to pixel ratio is. If this ratio is less than one

7
00:00:24,128 --> 00:00:29,480
Magnification happens and the mag filter takes effect. If this ratio is greater

8
00:00:29,480 --> 00:00:33,714
than one, minification is happening. This is where mid mapping comes in. What

9
00:00:33,714 --> 00:00:38,155
the GPU does, is determines the ratio of texels to pixels. If this ratio gets

10
00:00:38,155 --> 00:00:41,494
much larger than one to one A lower resolution version of the texture is used

11
00:00:41,494 --> 00:00:46,544
instead. As this ratio gets higher and higher, a lower and lower resolution of

12
00:00:46,544 --> 00:00:51,810
the texture gets used. These textures can be thought of as forming a pyramid.

13
00:00:51,810 --> 00:00:55,204
For example, say a pixel needs the texture color. Instead of taking whatever

14
00:00:55,204 --> 00:00:59,050
texel happens to cover the center of the pixel down at the bottom level. The

15
00:00:59,050 --> 00:01:02,770
GPU determines the texel to pixel ratio for this pixel to see how high up the

16
00:01:02,770 --> 00:01:08,725
pyramid to go. The texture at this level of the pyramid is then sampled. Since

17
00:01:08,725 --> 00:01:11,958
the ratio of texels to pixels is about one to one for this lower resolution

18
00:01:11,958 --> 00:01:17,894
texture, the rendering looks much better without the noise we saw before. In

19
00:01:17,894 --> 00:01:20,667
fact, for even better quality rendering, we can set the GPU to linearly

20
00:01:20,667 --> 00:01:26,741
interpolate between levels. This is called trilinear filtering. Say our ratio

21
00:01:26,741 --> 00:01:30,590
is in between two pyramid levels. We then sample the texture above and below

22
00:01:30,590 --> 00:01:33,442
from where our sample is in the pyramid, and interpolate between these two

23
00:01:33,442 --> 00:01:39,137
samples. My example pyramid was not drawn to scale. Within the GPU, the pyramid

24
00:01:39,137 --> 00:01:44,034
is created and stored in powers of 2. That is, if you start with a texture

25
00:01:44,034 --> 00:01:48,192
that's 64 by 64, the pyramid is formed with this texture, a 32 by 32 texture, a

26
00:01:48,192 --> 00:01:55,190
16 by 16 texture, 8 by 8. Four by four, two by two and one by one at the end.

27
00:01:55,190 --> 00:01:59,328
This sort of textures is called the mipmap pyramid or the mipmap chain. Each

28
00:01:59,328 --> 00:02:02,514
smaller texture is derived from the larger one. One technique is to simply

29
00:02:02,514 --> 00:02:05,842
average the four texels of the larger texture to make the smaller which can be

30
00:02:05,842 --> 00:02:10,830
done in advance or by the GPU itself. There are some subtleties, such as gamma

31
00:02:10,830 --> 00:02:14,300
correction, that can change how these levels are formed. That's for a later

32
00:02:14,300 --> 00:02:19,165
lesson. This is an important point, so pay attention. You want to make your

33
00:02:19,165 --> 00:02:23,482
textures to be powers of two in size, both in rows and columns. You will not be

34
00:02:23,482 --> 00:02:26,745
able to use mipmapping if you don't. GPUs generally expect powers of two, so

35
00:02:26,745 --> 00:02:29,753
don't disappoint them, unless you know what you're doing and have a very good

36
00:02:29,753 --> 00:02:34,502
reason for doing so. Give the new version of the demo a try. You can now pick

37
00:02:34,502 --> 00:02:37,483
mipmapping as a filtering option for minification.
