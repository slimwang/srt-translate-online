1
00:00:00,330 --> 00:00:03,395
Let's look at the solution to our
message passing versus shared memory

2
00:00:03,395 --> 00:00:06,840
quiz.If we have one core
initializing an array, and

3
00:00:06,840 --> 00:00:09,680
then all others reading
the entire array.

4
00:00:09,680 --> 00:00:13,480
Data distribution, the number of
lines of code you need to do it

5
00:00:13,480 --> 00:00:17,020
in message passing, is significant.

6
00:00:17,020 --> 00:00:18,830
The number of lines of code we need for

7
00:00:18,830 --> 00:00:22,960
that in shared memory is
really zero lines of code

8
00:00:22,960 --> 00:00:27,930
because once the array is initialized
in memory others can simply read it.

9
00:00:27,930 --> 00:00:30,910
They don't need to really
distribute the data in any way.

10
00:00:30,910 --> 00:00:34,990
In contrast, in message passing
the core that initializes the array

11
00:00:34,990 --> 00:00:38,690
now needs to send it explicitly
to all the other cores and

12
00:00:38,690 --> 00:00:41,620
the other cores need to
receive it explicitly.

13
00:00:41,620 --> 00:00:45,560
So there is definitely more
lines of code in message passing

14
00:00:45,560 --> 00:00:47,230
than in shared memory.

15
00:00:47,230 --> 00:00:50,710
Once you have the data distribution for

16
00:00:50,710 --> 00:00:53,640
shared memory you don't
need do anything for it.

17
00:00:53,640 --> 00:00:56,160
For message passing you need to send and
receive.

18
00:00:56,160 --> 00:01:01,020
Synchronization that makes sure the
array is initialized before we get to

19
00:01:01,020 --> 00:01:04,650
read it, adds how many lines of code?

20
00:01:04,650 --> 00:01:10,340
In message passing, it adds 0 lines
of code because the sends and

21
00:01:10,340 --> 00:01:15,380
receives that we needed to to do to
the receive the data already insure

22
00:01:15,380 --> 00:01:18,580
that until we receive the array,
we cannot read it.

23
00:01:18,580 --> 00:01:22,240
So when we get to read it after the
receive, we know that it's been already

24
00:01:22,240 --> 00:01:25,620
initialized, because the send
happens after the initialization.

25
00:01:25,620 --> 00:01:30,110
In shared memory, however,
while the initialization is happening,

26
00:01:30,110 --> 00:01:32,910
the other threads could
just begin reading it, so

27
00:01:32,910 --> 00:01:37,320
we need to add some explicit
synchronization out to make sure that

28
00:01:37,320 --> 00:01:40,390
the reader's wait while
the initialization is happening.

29
00:01:40,390 --> 00:01:43,660
So we here have more
than 0 lines of code.

30
00:01:43,660 --> 00:01:46,610
In this case the message
passing code is simpler

31
00:01:46,610 --> 00:01:51,050
as far as synchronization is concerned
than the shared memory code.

32
00:01:51,050 --> 00:01:54,020
This is typically going to be what
happens between shared memory and

33
00:01:54,020 --> 00:01:55,150
message passing.

34
00:01:55,150 --> 00:01:58,380
Message passing needs to
distribute data, but in doing so

35
00:01:58,380 --> 00:02:00,240
it also synchronizes.

36
00:02:00,240 --> 00:02:04,800
Shared memory doesn't need to distribute
data, but if synchronization is needed

37
00:02:04,800 --> 00:02:08,240
after the distribution it needs
to add explicit code to do that.
