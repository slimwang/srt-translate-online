1
00:00:00,380 --> 00:00:03,280
Now that we've motivated the vision, let's see how

2
00:00:03,280 --> 00:00:06,640
we can implement the vision. In order to implement

3
00:00:06,640 --> 00:00:10,360
this vision, the operating system should provide quality of

4
00:00:10,360 --> 00:00:14,120
service APIs to the application. And these quality of service

5
00:00:14,120 --> 00:00:17,130
APIs could be things like, oh, this particular network

6
00:00:17,130 --> 00:00:21,120
flow that I'm creating has certain real time constraints, because

7
00:00:21,120 --> 00:00:23,047
it has video data and so on and so

8
00:00:23,047 --> 00:00:25,740
forth. And those are the hints that the operating system

9
00:00:25,740 --> 00:00:28,604
is going to use, in terms of synthesizing

10
00:00:28,604 --> 00:00:31,950
code that corresponds to the API that the

11
00:00:31,950 --> 00:00:35,300
operating system is providing you, to give hints

12
00:00:35,300 --> 00:00:38,000
to the network. So, the code that the

13
00:00:38,000 --> 00:00:41,760
operating system is going to synthesize is essentially

14
00:00:41,760 --> 00:00:44,960
taking the quality of service constraints, and putting

15
00:00:44,960 --> 00:00:51,078
them as executable code that can be, then passed it on as part of the packet.

16
00:00:51,078 --> 00:00:53,130
So in other words, the protocol stack of the

17
00:00:53,130 --> 00:00:56,150
operating system has to be enhanced to service these

18
00:00:56,150 --> 00:01:00,430
quality of service requirements, and generally to synthesize the

19
00:01:00,430 --> 00:01:02,550
code that has to be part of the payload.

20
00:01:02,550 --> 00:01:05,980
So the application is not only providing a payload,

21
00:01:05,980 --> 00:01:08,630
but it is giving quality of service constraints. And

22
00:01:08,630 --> 00:01:11,900
the operating system, in addition to the payload, generates

23
00:01:11,900 --> 00:01:15,988
or synthesizes code corresponding to this quality of service instructions.

24
00:01:15,988 --> 00:01:19,380
And this slaps on the IP header for where

25
00:01:19,380 --> 00:01:22,590
this particular message is eventually to be delivered, and

26
00:01:22,590 --> 00:01:24,570
hands it over to the Internet. And in the

27
00:01:24,570 --> 00:01:28,730
Internet, if we assume that the Internet routers are capable

28
00:01:28,730 --> 00:01:32,890
of executing this specialized code, then depending on the

29
00:01:32,890 --> 00:01:36,820
nature of what is being requested, a particular order may

30
00:01:36,820 --> 00:01:39,010
say, oh this particular packet I have to send

31
00:01:39,010 --> 00:01:41,560
it to multiple destinations, so let me send this down

32
00:01:41,560 --> 00:01:44,610
this link, down this link, and similarly when it

33
00:01:44,610 --> 00:01:47,750
comes over here, this router may say, oh, this packet

34
00:01:47,750 --> 00:01:50,460
has to go to multiple destinations. And so on and

35
00:01:50,460 --> 00:01:54,440
that we can see that intelligent routing decisions can be

36
00:01:54,440 --> 00:01:56,982
taken in the network. That's out of the road

37
00:01:56,982 --> 00:01:59,540
map of how we can take this vision and try

38
00:01:59,540 --> 00:02:03,150
to implement it. But the problem with carrying out the

39
00:02:03,150 --> 00:02:07,070
vision, in terms of this implementation that I just sketched,

40
00:02:07,070 --> 00:02:10,910
is that changing the operating system is non-trivilous,

41
00:02:10,910 --> 00:02:13,680
especially the protocol stackers, they have already mentioned TCP

42
00:02:13,680 --> 00:02:16,540
IP has several hundred thousand lines of code, so

43
00:02:16,540 --> 00:02:18,800
it is non trivial to change the protocol stack

44
00:02:18,800 --> 00:02:23,030
of every node in the entire universe. To handle

45
00:02:23,030 --> 00:02:26,460
active networks. And also, the second part of the

46
00:02:26,460 --> 00:02:30,040
challenge is that the network routers are not open.

47
00:02:30,040 --> 00:02:32,080
So, in other words, we cannot expect that every

48
00:02:32,080 --> 00:02:35,360
router on the Internet is capable of processing the code that

49
00:02:35,360 --> 00:02:38,760
I'm going on slap on to this payload and be able

50
00:02:38,760 --> 00:02:42,996
to make intelligent routing decisions. So there is a impedance mismatch

51
00:02:42,996 --> 00:02:46,780
between the vision and the implementation that I've sketched right here.
