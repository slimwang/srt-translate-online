1
00:00:00,450 --> 00:00:04,370
My name is Andy Isaacson, and
I'm a Fullstack engineer at Udacity.

2
00:00:04,370 --> 00:00:05,700
When I say I'm a Fullstack engineer,

3
00:00:05,700 --> 00:00:07,540
it kind of means I do a little
bit of the both, right.

4
00:00:07,540 --> 00:00:10,300
I kind of do some front end and
some back end.

5
00:00:10,300 --> 00:00:12,540
My background,
when I first started out programming,

6
00:00:12,540 --> 00:00:14,920
I was doing hardcore computer science.

7
00:00:14,920 --> 00:00:19,450
And I kind of got interested in
thinking about the user more, so

8
00:00:19,450 --> 00:00:21,770
looking at aspects of psychology.

9
00:00:21,770 --> 00:00:24,090
Thinking about how people learn and

10
00:00:24,090 --> 00:00:28,825
how people think about
the systems that they're using.

11
00:00:28,825 --> 00:00:33,350
I really was interested in building
interfaces that worked well for people.

12
00:00:33,350 --> 00:00:34,410
And the more projects that I did,

13
00:00:34,410 --> 00:00:37,650
the more I found myself kind of
floating to that role within my team,

14
00:00:37,650 --> 00:00:41,880
being the guy who put together the
system that everything was talking to.

15
00:00:41,880 --> 00:00:46,250
And actually since coming to Udacity,
my sweet spot is really thinking about

16
00:00:46,250 --> 00:00:50,110
how to build the systems
that power the front ends.

17
00:00:50,110 --> 00:00:53,450
The front end is cool because it exists

18
00:00:53,450 --> 00:00:54,805
right in the moment that
someone's using it.

19
00:00:54,805 --> 00:00:56,670
It's right just on their screen.

20
00:00:56,670 --> 00:00:59,620
But the back end sort of covers
everybody who's using a big system

21
00:00:59,620 --> 00:01:00,168
at the same time.

22
00:01:00,168 --> 00:01:04,800
And so it's really kind of fun
to build the sort of larger

23
00:01:05,840 --> 00:01:08,600
piece that's kind of
underpinning everything, and

24
00:01:08,600 --> 00:01:11,070
thinking about some of the unique
problems that come up there.

25
00:01:11,070 --> 00:01:15,190
One of the backend pieces that I'm
working on right now is what's going to

26
00:01:15,190 --> 00:01:18,610
be the foundation of the next
iteration of the Udacity platform.

27
00:01:19,920 --> 00:01:24,948
So we're migrating from what was
kind of a monolithic application

28
00:01:24,948 --> 00:01:29,880
on top of Google app engine into
a network of micro services.

29
00:01:29,880 --> 00:01:33,650
And so, putting all the backend
underpinnings in place,

30
00:01:33,650 --> 00:01:37,440
before we can even think about
building out the interfaces.

31
00:01:37,440 --> 00:01:40,090
With the backend you really want to
take that step back and think critically

32
00:01:40,090 --> 00:01:45,110
about is this going to slowly eat up
all my memory and destroy my server?

33
00:01:45,110 --> 00:01:49,350
Is this going to create a security
hole that somebody might be

34
00:01:49,350 --> 00:01:51,350
able to use to get
information they shouldn't?

35
00:01:51,350 --> 00:01:53,030
Or is this going

36
00:01:54,070 --> 00:01:57,740
to be a performance bottleneck
that'll screw everything else up?

37
00:01:57,740 --> 00:02:03,180
And so, yeah, there's a little
more kind of structured thinking,

38
00:02:03,180 --> 00:02:04,050
I think, that goes into that.

39
00:02:04,050 --> 00:02:07,990
If you've got a problem with a frontend
system, and you're debugging it

40
00:02:07,990 --> 00:02:11,080
in your machine in front of you, you can
put a breakpoint in, you can stop it in

41
00:02:11,080 --> 00:02:13,700
the middle, you can just kind of
poke in and see what's happening.

42
00:02:13,700 --> 00:02:17,550
And you're going to figure out on a very
detailed level what the issues are.

43
00:02:17,550 --> 00:02:23,760
But with a production system, you can't
really just stop it and go with that.

44
00:02:23,760 --> 00:02:28,380
You want it to keep serving,
keep running, keep possibly working for

45
00:02:28,380 --> 00:02:30,610
all the other people who are using it.

46
00:02:30,610 --> 00:02:35,230
And so some of the tools that I'll
employ, I mean, first off, there's logs.

47
00:02:35,230 --> 00:02:39,350
That's number one, hands down, the way
you're going to look at any problem.

48
00:02:39,350 --> 00:02:43,195
Look back at the logs and
see did the usual thing

49
00:02:43,195 --> 00:02:47,540
happen,or was an error thrown
somewhere along the way?

50
00:02:47,540 --> 00:02:49,690
But sometimes the logs look fine.

51
00:02:49,690 --> 00:02:50,880
And it doesn't help you any.

52
00:02:50,880 --> 00:02:54,970
All it says is maybe it's really slow,
maybe this step took ten minutes and

53
00:02:54,970 --> 00:02:56,400
you don't really know why.

54
00:02:56,400 --> 00:02:59,380
It definitely takes putting on
your detective hat sometimes and

55
00:02:59,380 --> 00:03:04,040
thinking really carefully about what
the code is doing under the hood.

56
00:03:04,040 --> 00:03:06,990
It's not like you get
direct access all the time.

57
00:03:06,990 --> 00:03:10,290
Sometimes you have to be
a little indirect about

58
00:03:10,290 --> 00:03:11,470
poking at it from outside.
