1
00:00:00,270 --> 00:00:05,207
Awesome. So now Box2D is created and can be updated each frame. Our next step

2
00:00:05,207 --> 00:00:09,050
is to add physics body to the world, so that we can simulate them properly. To

3
00:00:09,050 --> 00:00:13,130
create a physics object, we have to jump through a few hoop. The first thing we

4
00:00:13,130 --> 00:00:16,885
need to do is actually create a BodyDef object. Now Body Definition object is

5
00:00:16,885 --> 00:00:20,248
going to be used later to actually create our body. But what we do in here is

6
00:00:20,248 --> 00:00:23,690
that we actually set some specific properties on it. For example, whether or

7
00:00:23,690 --> 00:00:27,092
not its dynamic or static. Think of static objects as the ones that will never

8
00:00:27,092 --> 00:00:31,300
move in your environment. Walls, trees, stone chickens, things like that.

9
00:00:31,300 --> 00:00:34,757
Dynamic bodies are the ones that move and can react to physics. Once you've set

10
00:00:34,757 --> 00:00:37,884
your properties for your body definition, you need then to call

11
00:00:37,884 --> 00:00:42,066
world.CreateBody. This will actually tell Box2D to create a, Physics object

12
00:00:42,066 --> 00:00:46,024
based on the definitions that you just passed into it. And of course, it will

13
00:00:46,024 --> 00:00:49,888
return a handle to this object, so that you can use it too. Once your object

14
00:00:49,888 --> 00:00:53,112
has actually been created, the next thing you need to do is actually set the

15
00:00:53,112 --> 00:00:58,040
physics properties on the object. Box2D does this using what they would call a

16
00:00:58,040 --> 00:01:02,525
Fixture Definition. Now fixture definition defines properties that allow you to

17
00:01:02,525 --> 00:01:06,960
set the density, friction, restitution, mass, things along these lines.

18
00:01:06,960 --> 00:01:09,669
Basically how this object is going to interact with the physics of the world

19
00:01:09,669 --> 00:01:13,858
around it. Generally in a game, you'll have groups of objects that all resemble

20
00:01:13,858 --> 00:01:17,988
the same similar physical characteristics. As such, you may want to go through

21
00:01:17,988 --> 00:01:21,608
and actually group them into certain types of fixtures. For Grits/g, we

22
00:01:21,608 --> 00:01:24,414
actually have the majority of objects in the world use a specific fixture

23
00:01:24,414 --> 00:01:28,342
object that react to the world in the same way. However, we have one type of

24
00:01:28,342 --> 00:01:31,114
bullet that can be launched from the bouncy bullet gun, that actually uses a

25
00:01:31,114 --> 00:01:35,248
different fixture. As such, we allow the entity Def object, passed in from the

26
00:01:35,248 --> 00:01:38,512
user, to actually have a flag defining whether of not this is a BouncyFixture

27
00:01:38,512 --> 00:01:42,860
object. From there we can actually set the density and friction differently, so

28
00:01:42,860 --> 00:01:46,610
that it hits the wall and contains its velocity moving forward. As you write

29
00:01:46,610 --> 00:01:49,691
your game application, it's probably worth while to take into account. How all

30
00:01:49,691 --> 00:01:51,819
things should react in the environment and use different fixtures

31
00:01:51,819 --> 00:01:55,756
appropriately. Now, once you've defined the fixture information about how the

32
00:01:55,756 --> 00:01:58,486
world should react with the object, we actually need to define the shape of the

33
00:01:58,486 --> 00:02:02,324
object. The shape is the most critical, as it defines how this object should

34
00:02:02,324 --> 00:02:06,358
interact with the rest of the world. Now, Box2D has support for polygons,

35
00:02:06,358 --> 00:02:10,633
circles and oddly enough, boxes, right, who'd the thunk/g? Now it's worth

36
00:02:10,633 --> 00:02:14,471
pointing out, that most physics engines support a suite of whole definitions.

37
00:02:14,471 --> 00:02:17,591
But give huge performance winds to simplistic wholes like spheres, circles,

38
00:02:17,591 --> 00:02:21,129
boxes and cubes. Polygons are always an option, but expect to pay a performance

39
00:02:21,129 --> 00:02:25,019
penalty for the flexibility you're gaining. The fixture definition supports a

40
00:02:25,019 --> 00:02:28,537
suite of these API's. Such as the SetAsBox method, which of course will define

41
00:02:28,537 --> 00:02:32,314
the fixture definition as a box. Once you've got all these parameters set, you

42
00:02:32,314 --> 00:02:35,152
call the CreateFixture method on side of the Body Definition that's been given

43
00:02:35,152 --> 00:02:39,430
to you. And this will effectively attach the shape and information, to the body

44
00:02:39,430 --> 00:02:42,762
definition. From there, you're pretty much done. You've got a physics object

45
00:02:42,762 --> 00:02:45,610
that'll react to the world and do all the things you tell it to do. So go ahead

46
00:02:45,610 --> 00:02:47,410
and return it out to the calling function.
