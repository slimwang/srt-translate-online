1
00:00:00,330 --> 00:00:03,480
So that's your minimum intervening scheduling policy that

2
00:00:03,480 --> 00:00:07,330
is ensuring that the processor that is picked

3
00:00:07,330 --> 00:00:09,500
for T i to run on has the

4
00:00:09,500 --> 00:00:13,380
highest affinity for T i. That's the minimum intervening.

5
00:00:13,380 --> 00:00:15,800
And there's a variant of minimum intervening, which

6
00:00:15,800 --> 00:00:18,810
is called limited min, minimum intervening, which is essentially

7
00:00:18,810 --> 00:00:21,550
saying that if I have lets say, 1,000

8
00:00:21,550 --> 00:00:25,440
processes in the multiprocessor then the amount of information

9
00:00:25,440 --> 00:00:27,290
that I want to keep for every one of these

10
00:00:27,290 --> 00:00:30,340
threads is huge, right? For every processor that is

11
00:00:30,340 --> 00:00:33,510
available in the multiprocessor, I need to keep this

12
00:00:33,510 --> 00:00:36,890
affinity index for this thread. At maybe too much meta

13
00:00:36,890 --> 00:00:40,140
data that this scheduler has to maintain on behalf

14
00:00:40,140 --> 00:00:43,310
of every thread. And therefore, that means there's a variant

15
00:00:43,310 --> 00:00:46,850
of minimum intervening which is called limited minimum intervening.

16
00:00:46,850 --> 00:00:50,520
Which is saying, don't keep this infinity index for all

17
00:00:50,520 --> 00:00:53,990
the processors. Just keep it for the top

18
00:00:53,990 --> 00:00:57,410
few processors. So if the infinity index, if it

19
00:00:57,410 --> 00:01:02,980
is two or three, those are the ones that I care about. If the infinity index is

20
00:01:02,980 --> 00:01:04,290
20 or 30 I'm not going to pick that,

21
00:01:04,290 --> 00:01:07,700
so why bother keeping all of the affinity index

22
00:01:07,700 --> 00:01:11,220
for a particular thread? Just keep the top candidates.

23
00:01:11,220 --> 00:01:15,940
That's the idea behind limited minimum intervening scheduling policy.

24
00:01:15,940 --> 00:01:18,790
The last policy I'm going to introduce you to. It's called

25
00:01:18,790 --> 00:01:22,810
Minimum Intervening Plus Queueing. The idea is still the same

26
00:01:22,810 --> 00:01:26,000
that I want to look at whether Intervening Threads that

27
00:01:26,000 --> 00:01:29,100
ran on a particular processor with respect to this thread

28
00:01:29,100 --> 00:01:30,670
that I am trying to schedule at this point of

29
00:01:30,670 --> 00:01:33,360
time. But when I make a scheduling decision that Ti

30
00:01:33,360 --> 00:01:36,590
is going to run on a particular processor It may be

31
00:01:36,590 --> 00:01:41,160
that this particular processor Pj may already have some other threads

32
00:01:41,160 --> 00:01:43,460
that are going to run on it, and that's the

33
00:01:43,460 --> 00:01:47,330
idea behind minimum intervening plus queue. Again, I want to explain

34
00:01:47,330 --> 00:01:49,240
this in a little bit more detail. So in

35
00:01:49,240 --> 00:01:54,320
minimum intervening scheduling plus queuing wouldn't be the same as

36
00:01:54,320 --> 00:01:57,670
It's not only the affinity index of Ti with

37
00:01:57,670 --> 00:02:00,600
respect to a particular processor I'm going to look at, but

38
00:02:00,600 --> 00:02:03,350
I'm also going to look at the queue for this particular

39
00:02:03,350 --> 00:02:06,320
processor. Why do we need to know do that? Well,

40
00:02:06,320 --> 00:02:09,389
if Ti is going to be scheduled on,

41
00:02:09,389 --> 00:02:12,570
on this particular processor PJ. Maybe there's a

42
00:02:12,570 --> 00:02:15,970
scheduling queue associated with PJ, which already has

43
00:02:15,970 --> 00:02:18,020
some number of threads to be run. And

44
00:02:18,020 --> 00:02:21,660
therefore, even though I'm picking the process of

45
00:02:21,660 --> 00:02:25,300
PJ based on cash affinity. By the time

46
00:02:25,300 --> 00:02:28,860
TI gets to actually run. Two other threads

47
00:02:28,860 --> 00:02:31,450
are going to run before it, so this was

48
00:02:31,450 --> 00:02:35,370
when Ti ran last, and I might find the

49
00:02:35,370 --> 00:02:39,270
definitive for Ti with respect to Pj, is two,

50
00:02:39,270 --> 00:02:41,540
just like in this previous example that I gave

51
00:02:41,540 --> 00:02:44,290
you, the affinity is two, so it looks like

52
00:02:44,290 --> 00:02:50,130
a good choice to put ti on, on pj, if this turns out to be There are the

53
00:02:50,130 --> 00:02:53,600
minimum, but when I made that decision, what I'm

54
00:02:53,600 --> 00:02:57,370
going to do is I'm going to stick this thread Ti in

55
00:02:57,370 --> 00:03:02,950
the scheduling queue of Pj and if the scheduling queue of Pj has Tm and Tn

56
00:03:02,950 --> 00:03:06,670
already populated, then what's going to happen Time is

57
00:03:06,670 --> 00:03:10,120
now, but by the time Ti gets to

58
00:03:10,120 --> 00:03:17,740
run on the process of Pj, Tm and Tn would also have run on the processor. Right?

59
00:03:17,740 --> 00:03:22,540
So even though the affinity index that I computed at the point of the scheduling

60
00:03:22,540 --> 00:03:27,140
decision, the scheduling decision, at the scheduling decision I made the

61
00:03:27,140 --> 00:03:32,290
decision to put Ti on Pj based on its affinity with respect to

62
00:03:32,290 --> 00:03:37,710
processor Pj. But unfortunately, the reality is that Ti is not going to

63
00:03:37,710 --> 00:03:39,850
run immediately, but it is going to run much later

64
00:03:39,850 --> 00:03:41,960
in time, and by the time it gets to

65
00:03:41,960 --> 00:03:44,770
run, two other threads that are already sitting in

66
00:03:44,770 --> 00:03:47,820
the Q of Pj, they're going to run. And therefore,

67
00:03:47,820 --> 00:03:50,580
the cache will be more polluted [LAUGH] than what

68
00:03:50,580 --> 00:03:52,300
we thought it was going to be at this point

69
00:03:52,300 --> 00:03:55,460
of time. So that's the reason that this scheduling

70
00:03:55,460 --> 00:03:59,420
policy's called minimum intervening plus Q, saying that. Not only

71
00:03:59,420 --> 00:04:03,820
should you ta, take into account the affinity index

72
00:04:03,820 --> 00:04:07,680
of a thread with respect to a particular processor, but

73
00:04:07,680 --> 00:04:09,630
you should also look at the Q of the

74
00:04:09,630 --> 00:04:13,740
processor. And ask the question, is the Q already populated?

75
00:04:13,740 --> 00:04:19,180
In that case, the, the processor that I want to pick Ti to run on is the min

76
00:04:19,180 --> 00:04:24,220
of i plus q where i if the affinity index and q is the size

77
00:04:24,220 --> 00:04:27,610
of the scheduling q associated with this particular

78
00:04:27,610 --> 00:04:31,240
processor pj. So that's the last scheduling policy.

79
00:04:31,240 --> 00:04:34,546
So basically have introduced five different scheduling policies,

80
00:04:34,546 --> 00:04:38,970
first come first serve. Fixed processor, last processor,

81
00:04:38,970 --> 00:04:42,480
minimum intervening, and minimum intervening plus queuing and as

82
00:04:42,480 --> 00:04:46,770
I mentioned, these two scheduling policies will really not be

83
00:04:46,770 --> 00:04:51,080
having the information for a thread with respect to all

84
00:04:51,080 --> 00:04:53,260
the processors in the system, because in a large scale

85
00:04:53,260 --> 00:04:55,730
process it may be invisible to do that. So

86
00:04:55,730 --> 00:04:58,620
what you do is, you limit the amount of information

87
00:04:58,620 --> 00:05:01,250
that you keep for every one of these threads. Remember

88
00:05:01,250 --> 00:05:03,980
one of the attributes of a good operating system is

89
00:05:03,980 --> 00:05:06,000
to make a decision really quickly and get out of

90
00:05:06,000 --> 00:05:08,930
the way, and from that point of view the less

91
00:05:08,930 --> 00:05:10,950
information it has to sift through in order to make

92
00:05:10,950 --> 00:05:13,980
a scheduling decision, the faster it can do it's work.
