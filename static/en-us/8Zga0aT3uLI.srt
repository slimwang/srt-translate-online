1
00:00:00,190 --> 00:00:02,830
Do you remember this diagram from lesson one? The adapter

2
00:00:02,830 --> 00:00:05,520
has a reference to the raw data. And has instructions on

3
00:00:05,520 --> 00:00:09,020
how to build each list item layout. These layouts eventually make

4
00:00:09,020 --> 00:00:11,840
it into the list view here. But what happens if any

5
00:00:11,840 --> 00:00:15,490
of this data changes. Let's say for example, there's a fourth

6
00:00:15,490 --> 00:00:19,120
contact named Don. The adapter knows how to create a list

7
00:00:19,120 --> 00:00:22,090
item layout for Don. But now the list view is outdated

8
00:00:22,090 --> 00:00:26,170
because it only has three items. Somehow, we need the adapter.

9
00:00:26,170 --> 00:00:28,190
To notify the list view that things have

10
00:00:28,190 --> 00:00:31,728
changed. And lucky for us, there's a method

11
00:00:31,728 --> 00:00:37,590
called: adapter.notifyDatasetChanged( ). This notifies any attached observers,

12
00:00:37,590 --> 00:00:40,460
like this one, that the underlying adapter data has

13
00:00:40,460 --> 00:00:43,340
changed. Then the list view needs to populate

14
00:00:43,340 --> 00:00:46,100
its children again. So it asks the adapter

15
00:00:46,100 --> 00:00:47,990
how many items there are? And the adapter

16
00:00:47,990 --> 00:00:51,210
responds with four. Then the ListView goes and fetches

17
00:00:51,210 --> 00:00:53,940
each one individually until it fills up the screen.

18
00:00:54,940 --> 00:00:57,300
And it's through that method that the ListView is able

19
00:00:57,300 --> 00:01:00,250
to get all its list items. But now you

20
00:01:00,250 --> 00:01:03,270
must be thinking. How did we actually update the ListView

21
00:01:03,270 --> 00:01:06,230
successfully, without adding this line of code in our

22
00:01:06,230 --> 00:01:09,290
app? Well, with a ray adapter, whenever you add or

23
00:01:09,290 --> 00:01:14,190
remove elements from it, it internally calls notifyDataSetChanged. That means

24
00:01:14,190 --> 00:01:16,260
we don't have to do anything. But how can be

25
00:01:16,260 --> 00:01:20,050
confirm this? Well, we can check the actual implementation

26
00:01:20,050 --> 00:01:23,470
of the ArrayAdapter class in the framework. And here's

27
00:01:23,470 --> 00:01:26,190
the code for the ArrayAdapter class within the Android

28
00:01:26,190 --> 00:01:29,930
framework. You can follow along with the link below.

29
00:01:29,930 --> 00:01:32,910
First, we're going to search for the Add method. Remember,

30
00:01:32,910 --> 00:01:35,730
we added forecast strings. To the adapter using this

31
00:01:35,730 --> 00:01:38,790
method. And sure enough we see that, the notify

32
00:01:38,790 --> 00:01:42,140
data set changed method is called internally. But you

33
00:01:42,140 --> 00:01:44,740
might be thinking what about this Boolean here. Well

34
00:01:44,740 --> 00:01:47,180
let's look it up. If you scroll to the top

35
00:01:47,180 --> 00:01:50,270
you'll see that, notify on change is declared as

36
00:01:50,270 --> 00:01:53,640
true initially. As you go through your other references you'll

37
00:01:53,640 --> 00:01:56,800
see that it's only changed here. In this set

38
00:01:56,800 --> 00:02:01,410
notify on change method. Since we don't call this public

39
00:02:01,410 --> 00:02:04,600
method, with the value false, then we know that we're

40
00:02:04,600 --> 00:02:07,440
going to be safely notified each time the adapter updates.

41
00:02:08,850 --> 00:02:11,220
Now let's go back to the add method. I want to

42
00:02:11,220 --> 00:02:14,280
show you one more thing. You'll notice in the add

43
00:02:14,280 --> 00:02:17,660
all method, it only notifies its observers once. Whereas in

44
00:02:17,660 --> 00:02:20,930
the add method every time you call this it will update

45
00:02:20,930 --> 00:02:24,700
it's observers. That means that our code actually is refreshing

46
00:02:24,700 --> 00:02:28,350
the list every time. So, if you're targeting honeycomb of above

47
00:02:28,350 --> 00:02:30,180
you can use this method to be a little more

48
00:02:30,180 --> 00:02:33,890
efficient. In general don't be afraid to try and do this

49
00:02:33,890 --> 00:02:38,710
on your own. As a general pro tip, if you're ever unsure about something,

50
00:02:38,710 --> 00:02:39,930
feel free to go and check the

51
00:02:39,930 --> 00:02:42,760
Android source code. Don't treat the framework code

52
00:02:42,760 --> 00:02:47,320
like a black box. Take advantage of the fact that Android is open source. The

53
00:02:47,320 --> 00:02:48,910
more you learn about the platform the

54
00:02:48,910 --> 00:02:50,690
better of an Android developer you can become.
