1
00:00:00,410 --> 00:00:02,850
Now that you've got significant functionality working in

2
00:00:02,850 --> 00:00:05,220
your application, this would be a good time

3
00:00:05,220 --> 00:00:07,780
to add some unit tests. In the lesson

4
00:00:07,780 --> 00:00:10,780
three folder, of the code that you downloaded from

5
00:00:10,780 --> 00:00:14,370
Udacity's GitHub, you'll find the test folder. This

6
00:00:14,370 --> 00:00:18,040
folder contains tests that are applicable up to the

7
00:00:18,040 --> 00:00:20,560
end of lesson three. Basically, tests for the

8
00:00:20,560 --> 00:00:25,111
profile functionality. Probably can't see, but we've got ProfileTest.java,

9
00:00:25,111 --> 00:00:32,790
we've got ConferenceApiTest.java. So go ahead and copy the test folder into the

10
00:00:32,790 --> 00:00:38,890
SRC source folder where you have your projects, the Conference Central. So you

11
00:00:38,890 --> 00:00:44,640
can just drag and drop it. There it is. Now I just want you to go ahead

12
00:00:44,640 --> 00:00:50,170
and delete the target directory in this folder. Whenever you

13
00:00:50,170 --> 00:00:52,910
run your project, or you run it on Dev Server

14
00:00:52,910 --> 00:00:55,670
or you deploy it to appspot, the output from the

15
00:00:55,670 --> 00:00:58,830
build all goes into the target directory. And it gets,

16
00:00:58,830 --> 00:01:02,830
it'll get recreated if you delete it. And sometimes the old

17
00:01:02,830 --> 00:01:05,870
build and the old output files and the new output

18
00:01:05,870 --> 00:01:09,540
files don't work well together. So, when in doubt, delete

19
00:01:09,540 --> 00:01:12,310
the target directory. Since we're adding test, we want to make

20
00:01:12,310 --> 00:01:15,220
sure we're starting with a clean slate. So I'm going to

21
00:01:15,220 --> 00:01:17,870
delete it, and there it is. Looks like it's

22
00:01:17,870 --> 00:01:21,000
gone, won't stay gone for long, but it's gone for

23
00:01:21,000 --> 00:01:24,780
now. Okay. Now let's go to Eclipse. Going to refresh

24
00:01:24,780 --> 00:01:28,390
the project, since we've added the test directory. And deleted

25
00:01:28,390 --> 00:01:31,950
the target directory. Okay. So target on, target's still

26
00:01:31,950 --> 00:01:34,660
there. So whenever you do delete the target directory, it

27
00:01:34,660 --> 00:01:37,560
actually pretty much automatically gets recreated right away with a

28
00:01:37,560 --> 00:01:40,400
couple of things in it. But it doesn't have everything

29
00:01:40,400 --> 00:01:43,790
that's needed. Here down in the source directory,

30
00:01:43,790 --> 00:01:47,710
you'll see the test folder now, and it has

31
00:01:47,710 --> 00:01:50,549
two tests. It has ProfileTest.java in the domain

32
00:01:50,549 --> 00:01:54,410
package, and it has ConferenceApiTest.java in the SPI packet.

33
00:01:55,550 --> 00:01:56,930
So let's take a look at the tests.

34
00:01:56,930 --> 00:02:00,200
First, I'm going to look at ProfileTest.java. Here we have

35
00:02:00,200 --> 00:02:03,140
our class ProfileTest. So I'll start by defining

36
00:02:03,140 --> 00:02:05,680
some values that we're going to need in our tasks.

37
00:02:05,680 --> 00:02:10,080
And we do the setup, and all we're doing this set, for setup here is we create a

38
00:02:10,080 --> 00:02:14,689
new profile and we supply some values. Then we

39
00:02:14,689 --> 00:02:17,276
have to tear down method, which one we need. And

40
00:02:17,276 --> 00:02:20,440
then here's our first test. We're testing the Getters.

41
00:02:20,440 --> 00:02:24,400
Very simple. Just checking, that the values in the profile

42
00:02:24,400 --> 00:02:27,280
are in fact values we put in the profile.

43
00:02:27,280 --> 00:02:31,230
Then we check what happens when we update the profile.

44
00:02:31,230 --> 00:02:33,230
So what we're going to do, is update the display

45
00:02:33,230 --> 00:02:36,040
name and the t-shirt size. And then we want to

46
00:02:36,040 --> 00:02:39,105
check that the display name is updated, and the

47
00:02:39,105 --> 00:02:42,300
t-shirt size is updated. But in fact, the user ID

48
00:02:43,450 --> 00:02:45,720
and the email, don't get updated. They need to

49
00:02:45,720 --> 00:02:49,440
remain as they were. And then this other function here

50
00:02:49,440 --> 00:02:52,040
is commented out, because it tests some functionality that you

51
00:02:52,040 --> 00:02:56,320
haven't implemented yet, so the test wouldn't work. Now let's

52
00:02:56,320 --> 00:02:59,700
look at ConferenceApiTest.java. So here we are,

53
00:02:59,700 --> 00:03:02,760
ConferenceApiTest, and again, the first thing we do

54
00:03:02,760 --> 00:03:08,920
is set up some values for testing on. Have our service helper. Do the setup.

55
00:03:08,920 --> 00:03:12,010
And in this case, the main thing we're doing is creating a new user with

56
00:03:12,010 --> 00:03:21,640
an email, and a user ID. We have the tearDown method. And then we stop testing.

57
00:03:21,640 --> 00:03:23,640
So the first thing we do is testing getting the

58
00:03:23,640 --> 00:03:29,340
profile first time. Now we test saving the profile. Now we

59
00:03:29,340 --> 00:03:32,710
test saving the profile with null values and, so on. Have

60
00:03:32,710 --> 00:03:35,050
a look at the different tests that we do, and then

61
00:03:35,050 --> 00:03:37,540
you get to a point where it's commented out, and that's

62
00:03:37,540 --> 00:03:39,160
because they're testing functionality you

63
00:03:39,160 --> 00:03:41,080
haven't implemented. Like, you can't test

64
00:03:41,080 --> 00:03:44,120
creating a conference, because we haven't written function to create a

65
00:03:44,120 --> 00:03:46,850
conference here. And as you go through the lesson, you can

66
00:03:46,850 --> 00:03:51,130
come back into ConferenceApiTest.java. And comment the testing

67
00:03:51,130 --> 00:03:53,620
functions, as the functions are ready for testing.

68
00:03:54,730 --> 00:03:56,920
Okay. Now we're going to look at running

69
00:03:56,920 --> 00:03:59,140
the project when we've got tests. So if we

70
00:03:59,140 --> 00:04:01,670
go up to Conference Central, this time I'm

71
00:04:01,670 --> 00:04:06,230
going to choose Run As and then Run Configurations. And

72
00:04:06,230 --> 00:04:08,840
this is my configuration to run the, run

73
00:04:08,840 --> 00:04:11,742
the Dev Server on localhost. And you see here,

74
00:04:11,742 --> 00:04:15,990
there is Skip Tests check box. So by default, tests

75
00:04:15,990 --> 00:04:19,140
are not skipped. It hasn't mattered up until now, because we

76
00:04:19,140 --> 00:04:22,170
haven't had any tests in there. So it didn't matter

77
00:04:22,170 --> 00:04:24,590
whether they were skipped or not. But now, the tests will

78
00:04:24,590 --> 00:04:26,860
be run. If, if at any point you find that

79
00:04:26,860 --> 00:04:29,940
the tests are blocking you or you want to deploy without

80
00:04:29,940 --> 00:04:33,290
the test, you can come and click this Skip Tests, but

81
00:04:33,290 --> 00:04:36,880
let's not do that. Okay. So I'm going to run. Now

82
00:04:36,880 --> 00:04:42,498
I'm running as per normally see the tests? Okay. My Dev Server is

83
00:04:42,498 --> 00:04:47,420
running. Let me scroll back up and see what the results of the tests were. Okay.

84
00:04:47,420 --> 00:04:49,750
So it run seven tests. There were

85
00:04:49,750 --> 00:04:54,620
zero failures. Zero errors, zero skipped, and it

86
00:04:54,620 --> 00:04:56,890
took 0.415 seconds, and then here's the

87
00:04:56,890 --> 00:05:01,750
summary. Okay, good. Okay. We'll that's all fine.

88
00:05:01,750 --> 00:05:06,540
But what happens if you actually do have an error? So to test that, to

89
00:05:06,540 --> 00:05:10,790
test the tests. Let's introduce an error. So

90
00:05:10,790 --> 00:05:14,090
since we're testing the profile functionality, I'm going

91
00:05:14,090 --> 00:05:15,760
to make one of the functions to do

92
00:05:15,760 --> 00:05:21,060
with profiles return an unexpected result. Okay. So

93
00:05:21,060 --> 00:05:23,740
we have the getProfile method, and this gets

94
00:05:23,740 --> 00:05:26,920
the profile associated with the logged in user.

95
00:05:28,200 --> 00:05:29,765
And to get the profile entity out of the

96
00:05:29,765 --> 00:05:34,030
datastore, we have to first create a key. And

97
00:05:34,030 --> 00:05:36,713
we specify the class, which is profile.class. And then

98
00:05:36,713 --> 00:05:39,780
the see it's the key, user ID. But let's

99
00:05:39,780 --> 00:05:43,040
say we made a mistake, and we put the

100
00:05:43,040 --> 00:05:45,960
user ID inside a string. Which is something that

101
00:05:45,960 --> 00:05:49,450
does happen. Now, there's no error here. This is

102
00:05:49,450 --> 00:05:53,250
a valid kind of value here, so. It doesn't

103
00:05:53,250 --> 00:05:57,670
show me an error. Now lets' see what happens when we run our tests.

104
00:05:59,350 --> 00:06:04,870
Now I'm going to run the project, on localhost. Okay. This time we've

105
00:06:04,870 --> 00:06:10,870
got an, an error. Failed to execute, and we got an error in the test.

106
00:06:12,860 --> 00:06:18,229
And we got the error in testGetProfile. No huge surprise there.

107
00:06:19,460 --> 00:06:23,880
So, you see we have the stack trace. But at the bottom, we have a nice summary

108
00:06:23,880 --> 00:06:29,820
where it shows the tests, the gave in error, and how many failures. And now, the

109
00:06:29,820 --> 00:06:35,330
other thing I want to show you, it's over in your target directory.

110
00:06:36,450 --> 00:06:41,920
May need to refresh your project here. In the target directory, you

111
00:06:41,920 --> 00:06:46,670
see a folder called surefire-reports.

112
00:06:46,670 --> 00:06:50,970
And this directory contains results of the report.

113
00:06:50,970 --> 00:06:54,380
So if we look at ProfileTest.txt, this is not

114
00:06:54,380 --> 00:06:57,360
where we had our errors. Zero failures, zero errors.

115
00:06:57,360 --> 00:07:02,210
If we look at ConferenceApiTest.txt, whoo, lots of errors.

116
00:07:02,210 --> 00:07:05,410
But here, failures. There was, there's actually only one

117
00:07:05,410 --> 00:07:08,500
error, but this is stack trace. But now, if

118
00:07:08,500 --> 00:07:09,700
we come down, I want you to look at

119
00:07:09,700 --> 00:07:12,190
the, the, see what happens with the XML files.

120
00:07:12,190 --> 00:07:17,240
If I click on ConferenceApiTest.xml, it'll show me

121
00:07:17,240 --> 00:07:21,530
the functions that got called, and the ones

122
00:07:21,530 --> 00:07:23,640
with the error, or the failures. In this

123
00:07:23,640 --> 00:07:26,710
case here, it takes me straight to where

124
00:07:26,710 --> 00:07:32,520
I had the error. The problem I can see right here is that, is that the user ID

125
00:07:32,520 --> 00:07:37,390
did not match what was expected. So, I'm going to go ahead now actually and just

126
00:07:37,390 --> 00:07:41,424
fix my code before I forget. Okay. There's my code

127
00:07:41,424 --> 00:07:43,660
we'll fix. Now when I run it, I won't get

128
00:07:43,660 --> 00:07:46,770
any errors. As you continue through the lesson, be sure

129
00:07:46,770 --> 00:07:48,860
to add the test for the new functionality as you

130
00:07:48,860 --> 00:07:51,760
implement it. In some cases, you'll need to get the

131
00:07:51,760 --> 00:07:55,130
test file from the appropriate lesson folders. As you implement

132
00:07:55,130 --> 00:07:57,680
new endpoint functions, you can simply uncommon the tests that

133
00:07:57,680 --> 00:08:03,180
are already in Conference API Tests. And if you deviate from

134
00:08:03,180 --> 00:08:05,530
the code that we have you write, like if you add

135
00:08:05,530 --> 00:08:08,800
your own functions or you change what the functions do, then you're

136
00:08:08,800 --> 00:08:12,620
going to need to update the tests and add your own tests

137
00:08:12,620 --> 00:08:16,140
to make sure that you're testing the functionality that's in your application.
