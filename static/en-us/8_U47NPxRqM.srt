1
00:00:00,080 --> 00:00:02,460
We've looked at creating modules and
controllers, and

2
00:00:02,460 --> 00:00:06,630
applying them to templates using Angular
specific attributes, called directives.

3
00:00:06,630 --> 00:00:09,460
But how does Angular actually make
the connection between the data

4
00:00:09,460 --> 00:00:10,970
and the template?

5
00:00:10,970 --> 00:00:12,780
When data changes in the website.

6
00:00:12,780 --> 00:00:14,750
How does it update in the controller?

7
00:00:14,750 --> 00:00:17,140
It all depends on Angular scope.

8
00:00:17,140 --> 00:00:20,650
Angular scope is an object that
refers to an applications data.

9
00:00:20,650 --> 00:00:23,470
It's the bridge between the template and
the controller.

10
00:00:23,470 --> 00:00:26,450
And is the vehicle for
Angular's two-way data binding.

11
00:00:26,450 --> 00:00:28,610
Data gets set initially
in the controller,

12
00:00:28,610 --> 00:00:31,710
then when the engine controller
directive is added to the template.

13
00:00:31,710 --> 00:00:34,560
The template now has a context for
its expressions.

14
00:00:34,560 --> 00:00:38,190
When the expressions change in
the template, the controller is updated.

15
00:00:38,190 --> 00:00:39,560
Let's see all this in action.

16
00:00:39,560 --> 00:00:42,455
See how Angular added
an ng-scope class to this div?

17
00:00:43,800 --> 00:00:46,880
When Angular compiled this template,
it solved this directive.

18
00:00:46,880 --> 00:00:49,710
And created a scope object that's
associated with this element.

19
00:00:49,710 --> 00:00:51,840
So when it came to
the expressions in the template,

20
00:00:51,840 --> 00:00:53,180
it could resolve them from the scope.

21
00:00:54,540 --> 00:00:57,060
Checking the scope for
the divs shows us a lot of information.

22
00:00:57,060 --> 00:01:00,230
The scope has an ID.

23
00:01:00,230 --> 00:01:01,480
It also has a parent scope.

24
00:01:03,308 --> 00:01:06,350
Inside our parent scope is our
menu property with the data from

25
00:01:06,350 --> 00:01:07,238
the controller.

26
00:01:09,820 --> 00:01:13,680
In the list of properties on
the scope object is $$watchers.

27
00:01:13,680 --> 00:01:14,580
Watchers.

28
00:01:14,580 --> 00:01:18,330
This is a list of things that angular
is watching for, for changes.

29
00:01:18,330 --> 00:01:20,008
There is one watcher for
each expression.

30
00:01:22,620 --> 00:01:26,260
Here's the one to watch the menu
image property for changes.

31
00:01:26,260 --> 00:01:28,330
If Angular sees a change
in one of the watchers,

32
00:01:28,330 --> 00:01:31,089
then it will update the property in
either the controller or the template.

33
00:01:32,230 --> 00:01:35,330
At first, it's hard to understand
how two-way data binding works

34
00:01:35,330 --> 00:01:37,840
between templates and
controllers in Angular.

35
00:01:37,840 --> 00:01:40,140
Scope is the key that
binds them together and

36
00:01:40,140 --> 00:01:42,110
performs updates when
either side changes.
