1
00:00:00,270 --> 00:00:03,220
Okay, and the solution is like so. Gets is pretty simple.

2
00:00:03,220 --> 00:00:06,200
First we just call normal get on the cache, and if

3
00:00:06,200 --> 00:00:10,700
there was a value, return that value plus hash repr v

4
00:00:10,700 --> 00:00:13,100
which will just return a nice hash to the value for us.

5
00:00:13,100 --> 00:00:17,330
Now, here's the cas function. First we call gets. And if

6
00:00:17,330 --> 00:00:19,930
the value is actually in the cache. We have our value in

7
00:00:19,930 --> 00:00:22,058
our unique and then we compare the unique we got from

8
00:00:22,058 --> 00:00:25,300
our cache to the unique that was passed in and if they

9
00:00:25,300 --> 00:00:28,200
match, we call set and we return the value of

10
00:00:28,200 --> 00:00:31,343
set which in our case always returns true. Otherwise, we return

11
00:00:31,343 --> 00:00:34,370
false. Simple enough. Let's go ahead and give this a test.

12
00:00:34,370 --> 00:00:37,350
Okay, first off I'm going to run the basic functions. No, it

13
00:00:37,350 --> 00:00:42,324
should print through one, none, none and then a [UNKNOWN] of

14
00:00:42,324 --> 00:00:44,730
two and our hash which in this case is this number

15
00:00:44,730 --> 00:00:46,720
here and then it should print false. Because we tried to

16
00:00:46,720 --> 00:00:50,380
overwrite x with the value three giving it the wrong hash.

17
00:00:50,380 --> 00:00:52,935
In this case zero. And now that we have our hash.

18
00:00:52,935 --> 00:00:56,550
Let's go ahead and paste that into here and see if

19
00:00:56,550 --> 00:00:59,930
these next two statements run. Okay, so I click run again

20
00:00:59,930 --> 00:01:03,810
and we can see that we're printing all the original command still

21
00:01:03,810 --> 00:01:06,780
run, the hash is still the same. This cas command here,

22
00:01:06,780 --> 00:01:09,720
set x to three, with cache val, cache unique value zero,

23
00:01:09,720 --> 00:01:12,980
prints false. Because unique doesn't match, what it, what the unique

24
00:01:12,980 --> 00:01:15,550
should be is this value here. And when we try to set

25
00:01:15,550 --> 00:01:20,460
x to four we see true. And we get x we can see that it was probably set

26
00:01:20,460 --> 00:01:23,230
to four. So that's how gets in cas works.

27
00:01:23,230 --> 00:01:24,730
They are built in the mem cache, you won't ever

28
00:01:24,730 --> 00:01:27,140
have to implement them but now that you know

29
00:01:27,140 --> 00:01:28,810
how they work. You'll be able to use them

30
00:01:28,810 --> 00:01:31,040
in production that much better. And you have another

31
00:01:31,040 --> 00:01:34,580
tool in your toolbox for dealing with complicated caching issues.
