1
00:00:00,330 --> 00:00:04,309
In order to build a UI in Android,
we use Views.

2
00:00:04,309 --> 00:00:08,129
Views are just rectangles that
appear on the screen, and you may or

3
00:00:08,130 --> 00:00:10,640
may not see the boarders
of those rectangles.

4
00:00:10,640 --> 00:00:13,460
Essentially, a View handles drawing and

5
00:00:13,460 --> 00:00:18,969
event handling and all the basic widgets
in Android extend from this base class.

6
00:00:18,969 --> 00:00:23,129
The Android developer's website has
visual guides on how to use those basic

7
00:00:23,129 --> 00:00:23,769
widgets.

8
00:00:23,769 --> 00:00:27,910
For example, the text field which allows
the user to input text to your app,

9
00:00:27,910 --> 00:00:31,240
can be configured to either
single line or multi-line.

10
00:00:31,239 --> 00:00:34,299
It also offers something,
text selection for copying and

11
00:00:34,299 --> 00:00:36,959
pasting and text auto-completion.

12
00:00:36,960 --> 00:00:41,679
You get to also specify the keyboard
type between just normal text or

13
00:00:41,679 --> 00:00:43,929
a phone number or an email address.

14
00:00:43,929 --> 00:00:45,589
Another common view is the Button.

15
00:00:45,590 --> 00:00:50,440
And the website comes with instructions
on how to use the OnClickListener

16
00:00:50,439 --> 00:00:53,099
along with some styling recommendations.

17
00:00:53,100 --> 00:00:56,325
Other input widgets
include Radio Buttons,

18
00:00:56,325 --> 00:01:00,680
Checkboxes, as well as date and
time Pickers.

19
00:01:00,679 --> 00:01:04,379
And also,
Spinners which act like drop down menus.

20
00:01:04,379 --> 00:01:07,560
When it comes down to the style and
design of those widgets,

21
00:01:07,560 --> 00:01:11,549
you should absolutely check out
this Android material design guide.

22
00:01:11,549 --> 00:01:14,619
This will be covered in more
depth in the next lesson.

23
00:01:14,620 --> 00:01:18,469
So for now, let's focus on
building a functional UI first.

24
00:01:18,469 --> 00:01:22,629
Now, if you want to display multiple
views together, you need a ViewGroup.

25
00:01:22,629 --> 00:01:25,640
A ViewGroup is a container for
children views and

26
00:01:25,640 --> 00:01:28,769
its the base class for
all the layouts in Android.

27
00:01:28,769 --> 00:01:31,539
Let's have a look at some of
the most commonly used layouts.

28
00:01:31,540 --> 00:01:33,940
The first time is the FrameLayout.

29
00:01:33,939 --> 00:01:36,689
A child that gets added
to the FrameLayout

30
00:01:36,689 --> 00:01:40,109
will be placed into the default
position at the top left corner.

31
00:01:40,109 --> 00:01:43,900
If you add another view, it will be
placed on top of that first one.

32
00:01:43,900 --> 00:01:47,900
So typically, FrameLayouts are used
to block out an area on the screen to

33
00:01:47,900 --> 00:01:49,900
just display one single item.

34
00:01:49,900 --> 00:01:52,070
Next we have the LinearLayout,

35
00:01:52,069 --> 00:01:56,219
which simply organizes its children
either vertically or horizontally.

36
00:01:56,219 --> 00:01:58,599
You can also specify a weight for
each child,

37
00:01:58,599 --> 00:02:01,629
giving it more or
less space than others.

38
00:02:01,629 --> 00:02:05,659
And then, we have the RelativeLayout,
where you can specify that a view should

39
00:02:05,659 --> 00:02:09,560
be aligned to the parents, left,
top, right, or bottom edge.

40
00:02:09,560 --> 00:02:13,250
You can also specify that one view
should be relative to another view.

41
00:02:13,250 --> 00:02:16,719
It doesn't fill up the space as nicely,
compared to a linear layout.

42
00:02:16,719 --> 00:02:18,979
But there's pros and cons to each.

43
00:02:18,979 --> 00:02:23,780
There is also a GridLayout where the
views just fills up cells in a grid and

44
00:02:23,780 --> 00:02:26,830
you could also have views
that span multiple cells.

45
00:02:26,830 --> 00:02:31,020
It's worth mentioning here that a view
group enhanced all the layouts extend

46
00:02:31,020 --> 00:02:36,150
from the base view class, which means
that any layout is a view in itself.

47
00:02:36,150 --> 00:02:40,319
That means you can nest view groups and
layouts within each other, opening up

48
00:02:40,319 --> 00:02:45,780
tons of possibilities of designing any
layouts you can imagine but be careful.

49
00:02:45,780 --> 00:02:48,080
Nesting too many layouts in one another,

50
00:02:48,080 --> 00:02:50,690
may effect the overall
performance when rendered.

51
00:02:50,689 --> 00:02:54,259
That's why Android offers one more
layout type called the constraint

52
00:02:54,259 --> 00:02:54,569
layout.

53
00:02:54,569 --> 00:02:57,669
The constraint layout just
like the relative layout

54
00:02:57,669 --> 00:03:01,349
allows you to place child views
relative to the parent or each other.

55
00:03:01,349 --> 00:03:05,599
However, the constraint layout
uses constraints to specify how

56
00:03:05,599 --> 00:03:09,579
each view should be positioned and
scaled relative to the other views.

57
00:03:09,580 --> 00:03:12,960
This offers the ability to create
pretty complicated layouts

58
00:03:12,960 --> 00:03:17,120
as we will see later on without having
to nest layouts within each other.

59
00:03:17,120 --> 00:03:21,159
The reason we care much about
parent child view relationships

60
00:03:21,159 --> 00:03:24,819
is because the way a child gets
laid out depends on its parent.

61
00:03:24,819 --> 00:03:28,989
The simplest example of this is
specifying the view's, width and height.

62
00:03:28,990 --> 00:03:33,039
This diagram shows all possible
combinations of using wrap_content or

63
00:03:33,038 --> 00:03:33,969
match_parent.

64
00:03:33,969 --> 00:03:37,849
However, if you ran this on a device,
all of these would look

65
00:03:37,849 --> 00:03:41,799
visually the same, simply because
you won't be seeing the boundaries.

66
00:03:41,800 --> 00:03:44,219
So, why does it matter
which one we pick?

67
00:03:44,219 --> 00:03:47,830
Well, it matters when there are other
children placed next to these ones.

68
00:03:47,830 --> 00:03:51,410
And another reason would be,
if you want to specify gravity.

69
00:03:51,409 --> 00:03:54,909
Say for example, you have this
text view within a frame layout.

70
00:03:54,909 --> 00:03:59,674
By default, the text is left aligned and
in this case, no gravity is set.

71
00:03:59,675 --> 00:04:02,295
If we specify gravity to be center,

72
00:04:02,294 --> 00:04:05,594
then it will center the content
within the textview itself.

73
00:04:05,594 --> 00:04:09,907
Vertically, it can move because the text
is already centered inside the textview

74
00:04:09,907 --> 00:04:13,127
but horizontally it does shift
over to be in the middle.

75
00:04:13,127 --> 00:04:17,826
Instead of this, if we specify a layer
gravity to be center, that will center

76
00:04:17,826 --> 00:04:21,969
the entire textview horizontally and
vertically within the parent.

77
00:04:21,970 --> 00:04:25,870
Since this text view with the center
match parent, it can't really move

78
00:04:25,870 --> 00:04:30,519
sideways, so it would only move it down
towards the center of the entire layout.

79
00:04:30,519 --> 00:04:33,524
But say, if the text view
was set to wrap content,

80
00:04:33,524 --> 00:04:37,310
then it would move to align itself
in the center horizontally as well.

81
00:04:37,310 --> 00:04:40,720
You can also specify padding and
margin on views.

82
00:04:40,720 --> 00:04:44,250
Padding tends to shift the content
inside the textview itself.

83
00:04:44,250 --> 00:04:47,959
Expanding the border, if you said
the the layout margin to be x and

84
00:04:47,959 --> 00:04:50,560
the parent will be the one
interpreting this parameter

85
00:04:50,560 --> 00:04:53,439
adding a margin of x
around the entire view.

86
00:04:53,439 --> 00:04:57,100
Again, when you render both of these,
they will visually look the same.

87
00:04:57,100 --> 00:05:00,840
But there will be an obvious difference,
if there was any background color for

88
00:05:00,839 --> 00:05:04,489
example, for these views or
of the text slightly getting longer and

89
00:05:04,490 --> 00:05:05,980
they were wrapped differently.

90
00:05:05,980 --> 00:05:08,090
All views have a visibility property.

91
00:05:08,089 --> 00:05:12,589
For this image here,
it could be visible, invisible or gone.

92
00:05:12,589 --> 00:05:15,279
If it's invisible,
then it's not shown but

93
00:05:15,279 --> 00:05:19,469
it's still got a placeholder that
affects the entire views around it.

94
00:05:19,470 --> 00:05:23,020
If it's set to gone,
then it will be no longer in the layout.

95
00:05:23,019 --> 00:05:25,959
It's as if it didn't even
exist in the XML at all.

96
00:05:25,959 --> 00:05:30,259
You can also toggle the visibility of
a view dynamically during run time.

97
00:05:30,259 --> 00:05:34,469
The developer website lists all the
possible XML attributes that you could

98
00:05:34,470 --> 00:05:36,180
set for each view class.

99
00:05:36,180 --> 00:05:39,939
It also shows the Inherited
attribute from its base class,

100
00:05:39,939 --> 00:05:43,209
all that along with
the corresponding Java methods.

101
00:05:43,209 --> 00:05:47,029
So that was a brief rundown
to help us get started but

102
00:05:47,029 --> 00:05:50,179
definitely do check out the developer
website for more details later.

