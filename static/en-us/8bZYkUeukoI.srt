1
00:00:00,000 --> 00:00:03,000
Our goal is to avoid the message guessing attack.

2
00:00:03,000 --> 00:00:05,000
The key idea is just to add some random padding

3
00:00:05,000 --> 00:00:08,000
to make the message large and unpredictable.

4
00:00:08,000 --> 00:00:10,000
There are lots of different ways to do this.

5
00:00:10,000 --> 00:00:13,000
One is the public key cryptography standard number 1,

6
00:00:13,000 --> 00:00:20,000
which is to replace the original message with 0 padding followed by a 10,

7
00:00:20,000 --> 00:00:29,000
followed by some random bits, followed by a bite of 0s, followed by the original message.

8
00:00:29,000 --> 00:00:31,000
This uses at least 64 random bits.

9
00:00:31,000 --> 00:00:35,000
Depending on the length of the message and the size of n, it may use more.

10
00:00:35,000 --> 00:00:38,000
This prevents the small message-space attack,

11
00:00:38,000 --> 00:00:41,000
since even if the set of possible messages is fairly small,

12
00:00:41,000 --> 00:00:45,000
an attacker needs to try all possible choices for the random bits,

13
00:00:45,000 --> 00:00:50,000
which is at last 2^64 of them in order to test those messages.

14
00:00:50,000 --> 00:00:52,000
There's a better way to do this,

15
00:00:52,000 --> 00:00:55,000
which is known as optimal asymmetric encryption padding--OAEP.

16
00:00:55,000 --> 00:00:59,000
I won't go into the details of that, but the main idea is to XOR the message

17
00:00:59,000 --> 00:01:03,000
with the output of a cryptographic hash function that takes in a random value.

18
00:01:03,000 --> 00:01:07,000
But the recipient can still decrypt the message,

19
00:01:07,000 --> 00:01:10,000
because they can obtain the random value and XOR out

20
00:01:10,000 --> 99:59:59,999
the result of the cryptographic hash.
