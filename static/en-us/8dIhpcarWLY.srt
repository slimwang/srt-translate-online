1
00:00:00,000 --> 00:00:02,000
So now we can handle expressions like

2
00:00:02,000 --> 00:00:05,000
(2 + 3) or (x + 1)

3
00:00:05,000 --> 00:00:08,000
but if you think about most of the Python programs you've written,

4
00:00:08,000 --> 00:00:10,000
they've got quite a bit more going on--

5
00:00:10,000 --> 00:00:13,000
things like "if" statements or assignment statements

6
00:00:13,000 --> 00:00:17,000
that influence the state or change which parts of the program are executed.

7
00:00:17,000 --> 00:00:20,000
Formally, we say that statements or program parts,

8
00:00:20,000 --> 00:00:23,000
like "if" or "while" or "return"

9
00:00:23,000 --> 00:00:25,000
change the flow of control, and a potential

10
00:00:25,000 --> 00:00:28,000
reasonable analogy for control flow is a river.

11
00:00:28,000 --> 00:00:32,000
Here, I've written a relatively simple bit of Python code.

12
00:00:32,000 --> 00:00:34,000
But we could sort of trace through it,

13
00:00:34,000 --> 00:00:36,000
noting which lines get visited.

14
00:00:36,000 --> 00:00:38,000
We're definitely going to visit: x = 1.

15
00:00:38,000 --> 00:00:40,000
We'll take a look at this "if"

16
00:00:40,000 --> 00:00:42,000
because (x) is 1, it's less than 5

17
00:00:42,000 --> 00:00:45,000
so we're going to curve in here and evaluate this "print".

18
00:00:45,000 --> 00:00:47,000
But then we're going to kind of skip over

19
00:00:47,000 --> 00:00:49,000
this whole "else" branch

20
00:00:49,000 --> 00:00:51,000
and rejoin things here--so you've got this flow

21
00:00:51,000 --> 00:00:53,000
that sometimes branches, seems to fork,

22
00:00:53,000 --> 00:00:56,000
rejoins at the end--Control Flow.

23
00:00:56,000 --> 00:00:58,000
Which part of the program do we execute?

24
00:00:58,000 --> 00:01:00,000
If I'm to keep my finger on the line

25
00:01:00,000 --> 00:01:03,000
that we're currently worried about, how does my finger move around?

26
00:01:03,000 --> 00:01:05,000
We're going to need to handle this sort of things

27
00:01:05,000 --> 00:01:08,000
if we're building an interpreter for JavaScript and HTML.

28
00:01:08,000 --> 00:01:10,000
So things like "if", "while", and "return"

29
00:01:10,000 --> 00:01:12,000
change the flow of control.

30
00:01:12,000 --> 00:01:14,000
These things are called "statements"

31
00:01:14,000 --> 00:01:17,000
to distinguish them from "expressions".

32
00:01:17,000 --> 00:01:19,000
Expressions are typically a bit simpler.

33
00:01:19,000 --> 00:01:23,000
They're more like noun phrases in a natural language.

34
00:01:23,000 --> 00:01:26,000
A statement is more like an entire sentence.

35
00:01:26,000 --> 00:01:29,000
It's going to contain a verb as well or some instruction,

36
00:01:29,000 --> 00:01:31,000
like change the value of (x)

37
00:01:31,000 --> 00:01:33,000
or jump over here.

38
00:01:33,000 --> 00:01:35,000
Statements often contain expressions

39
00:01:35,000 --> 00:01:37,000
but not the other way around.

40
00:01:37,000 --> 00:01:39,000
And you can think of this as being a bit of a hierarchy.

41
00:01:39,000 --> 00:01:41,000
This whole thing is a statement.

42
00:01:41,000 --> 00:01:45,000
The usual abbreviation for a statement is "stmt".

43
00:01:45,000 --> 00:01:48,000
But just this little part down here is an expression--

44
00:01:48,000 --> 00:01:52,000
just like a whole sentence may contain one or two nouns.

45
00:01:52,000 --> 00:01:54,000
So let's say we have an environment that maps

46
00:01:54,000 --> 00:01:56,000
the variable, (x), to the value, 2--

47
00:01:56,000 --> 00:01:59,000
and now I've written a JavaScript program below it

48
00:01:59,000 --> 00:02:03,000
that contains an if-then-else statement--it should remind you a lot of Python.

49
00:02:03,000 --> 00:02:08,000
If (x < 5), the variable, (y), is going to be assigned to "don";

50
00:02:08,000 --> 00:02:11,000
otherwise, the variable, (y), is going to be assigned "quixote".

51
00:02:11,000 --> 00:02:13,000
In our environment, where (x) is 2,

52
00:02:13,000 --> 00:02:17,000
(x < 5) will be evaluated to True.

53
00:02:17,000 --> 00:02:20,000
So the flow of control will visit here

54
00:02:20,000 --> 00:02:26,000
and here, but will skip these two and rejoin us down here at the bottom.

55
00:02:26,000 --> 00:02:29,000
And hopefully, at the end of the day, we'll have a new environment

56
00:02:29,000 --> 00:02:33,000
where (x) maps to 2, and the variable (y) maps to "don".

57
00:02:33,000 --> 00:02:35,000
"Don Quixote" is a classic novel,

58
00:02:35,000 --> 00:02:38,000
written by Miguel de Cervantes around 1605.

59
00:02:38,000 --> 00:02:41,000
We get a number of expressions from it, like

60
00:02:41,000 --> 00:02:43,000
"Tilting at windmills" , in English;

61
00:02:43,000 --> 00:02:46,000
the protagonist believes a windmill to be a mortal foe,

62
00:02:46,000 --> 00:02:49,000
perhaps a dragon, and he charges up but gets knocked down

63
00:02:49,000 --> 00:02:51,000
by the whirling arms each time.

64
00:02:51,000 --> 00:02:53,000
These days, "tilting at windmills" means

65
00:02:53,000 --> 00:02:55,000
trying something over and over again,

66
00:02:55,000 --> 99:59:59,999
even though you know you're never going to succeed--an impossible task.
