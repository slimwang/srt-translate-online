1
00:00:00,640 --> 00:00:05,960
Now let's look at how a developer may use this primitus in building a sub

2
00:00:05,960 --> 00:00:11,770
system. The first part of the code is going to be the initialization portion

3
00:00:11,770 --> 00:00:15,630
where the developer is mapping the address

4
00:00:15,630 --> 00:00:19,520
space of his process to external segments.

5
00:00:19,520 --> 00:00:22,020
Chosen regions of the address base to

6
00:00:22,020 --> 00:00:26,420
external data segments. And also specifying what

7
00:00:26,420 --> 00:00:29,100
the log segment is going to be for this

8
00:00:29,100 --> 00:00:31,840
particular code base that he or she is writing.

9
00:00:31,840 --> 00:00:33,820
And in the body of the code, there are

10
00:00:33,820 --> 00:00:38,320
going to be regions where they want to manipulate persistent data

11
00:00:38,320 --> 00:00:42,350
structures. And for that portion of the code they're

12
00:00:42,350 --> 00:00:45,580
going to say begin transaction, end transaction and within there

13
00:00:45,580 --> 00:00:47,590
the first thing that we'll do is set the

14
00:00:47,590 --> 00:00:51,640
range to indicate what is the block of contiguous

15
00:00:51,640 --> 00:00:56,580
adversities that they plan to modify in this critical

16
00:00:56,580 --> 00:00:59,380
section. And of course this block of adversaries should

17
00:00:59,380 --> 00:01:03,590
be contained in the range that has been mapped

18
00:01:03,590 --> 00:01:05,830
to an external data segment. And once they have

19
00:01:05,830 --> 00:01:07,680
done that, then the rest of the code is

20
00:01:07,680 --> 00:01:09,920
normal code that they write in terms of manipulating

21
00:01:09,920 --> 00:01:13,270
data structures. So they may be writing to a

22
00:01:13,270 --> 00:01:16,670
data structure m1, which is really a metadata that

23
00:01:16,670 --> 00:01:21,700
needs to persisted. And, if that is the case it is important that the

24
00:01:21,700 --> 00:01:27,010
user ensure that this data structure m1 is contained

25
00:01:27,010 --> 00:01:31,930
in the range that they specified at the beginning. And similarly m2 if it is

26
00:01:31,930 --> 00:01:34,470
a another persistent data structure that they're modifiying, it

27
00:01:34,470 --> 00:01:37,090
better be contained in the range again that they set

28
00:01:37,090 --> 00:01:39,580
out in the beginning. And similarly, when they are done

29
00:01:39,580 --> 00:01:41,760
with all of the changes and they want to commit,

30
00:01:41,760 --> 00:01:43,820
they can call end transaction and at that

31
00:01:43,820 --> 00:01:47,400
point all the changes that they made to

32
00:01:47,400 --> 00:01:49,790
these data structures are going to be written

33
00:01:49,790 --> 00:01:52,930
as a redo log into the log segment.

34
00:01:52,930 --> 00:01:55,610
So the first thing that LRVM would do

35
00:01:55,610 --> 00:01:59,550
inside this transaction code, is when you execute

36
00:01:59,550 --> 00:02:02,970
the set range call, it says, aha, this

37
00:02:02,970 --> 00:02:06,930
is the portion of the address range that the

38
00:02:06,930 --> 00:02:10,190
developer is going to modify within this critical section. And

39
00:02:10,190 --> 00:02:13,430
it's possible that this transaction, which is beginning now,

40
00:02:13,430 --> 00:02:17,210
may commit or abort. If in fact it aborts,

41
00:02:17,210 --> 00:02:20,050
then I have to make sure that all the changes

42
00:02:20,050 --> 00:02:22,610
that are made to persist in data structures are

43
00:02:22,610 --> 00:02:25,220
thrown away at the point of abort. And therefore the

44
00:02:25,220 --> 00:02:28,660
first thing that LRVM does is create what is

45
00:02:28,660 --> 00:02:32,110
called an undo record, which is really a copy of

46
00:02:32,110 --> 00:02:34,480
the virtual address base starting at this base

47
00:02:34,480 --> 00:02:37,950
address for this number of bytes. That's the portion

48
00:02:37,950 --> 00:02:41,210
of the address base that the developer intends

49
00:02:41,210 --> 00:02:44,780
to modify within this critical section. So LRVM makes

50
00:02:44,780 --> 00:02:48,070
an undo record which is the original version

51
00:02:48,070 --> 00:02:50,980
of that portion of the address base. So this

52
00:02:50,980 --> 00:02:54,230
under record is an in memory copy of the

53
00:02:54,230 --> 00:02:57,120
virtual address base starting here, for some number of

54
00:02:57,120 --> 00:03:01,710
bites specified by this number of bytes. And this is a temporary record, and in

55
00:03:01,710 --> 00:03:07,920
fact LRVM will create this under record only if it is needed by

56
00:03:07,920 --> 00:03:10,930
this transaction semantic. In the bigger transaction,

57
00:03:10,930 --> 00:03:13,610
there is a mode specifier, that the

58
00:03:13,610 --> 00:03:18,680
user can specify to the RVM whether

59
00:03:18,680 --> 00:03:22,430
this particular transaction is going ever abort.

60
00:03:22,430 --> 00:03:24,230
So in other words, if the developer is

61
00:03:24,230 --> 00:03:28,070
absolutely certain. That his transaction is never going

62
00:03:28,070 --> 00:03:31,810
to abort, then he can specifiy and know

63
00:03:31,810 --> 00:03:35,900
restore mode for this transaction, which tells RVM,

64
00:03:35,900 --> 00:03:38,240
that, look this transaction is never going to

65
00:03:38,240 --> 00:03:41,370
abort, therefore no need for you to create

66
00:03:41,370 --> 00:03:44,190
an undo record. That's the intent of that.

67
00:03:44,190 --> 00:03:47,540
So, again, we want to make sure that these

68
00:03:47,540 --> 00:03:49,630
primitives are performant. This is one of the

69
00:03:49,630 --> 00:03:52,980
ways by which the application developer can make

70
00:03:52,980 --> 00:03:56,620
sure that LRVM does not do unnecessary work.

71
00:03:56,620 --> 00:03:58,650
And in this case, if this transaction is never

72
00:03:58,650 --> 00:04:01,130
going to abort, then there is no reason

73
00:04:01,130 --> 00:04:04,410
to create an undo record. So that's the idea

74
00:04:04,410 --> 00:04:07,220
behind the no restore mode in the begin

75
00:04:07,220 --> 00:04:12,700
transaction. In any event, if the transaction eventually commits,

76
00:04:12,700 --> 00:04:14,920
at that point LRVM with throw away

77
00:04:14,920 --> 00:04:17,640
this undo record. This undo record is meaningful

78
00:04:17,640 --> 00:04:20,360
only if the transaction aborts because in

79
00:04:20,360 --> 00:04:24,680
that case. What LRVM would do is restore

80
00:04:24,680 --> 00:04:28,760
the original version of this portion of

81
00:04:28,760 --> 00:04:31,840
the virtual address space by copying the undo

82
00:04:31,840 --> 00:04:35,630
record back into that space. So during the

83
00:04:35,630 --> 00:04:38,450
body of this critical section, when the application

84
00:04:38,450 --> 00:04:42,870
is modifying These in-memory version of persistent data structure,

85
00:04:42,870 --> 00:04:47,190
no action by LRVM. All these changes are happening directly

86
00:04:47,190 --> 00:04:51,780
to the virtual address space of that particular process exactly

87
00:04:51,780 --> 00:04:55,470
where these in-memory copy of persistent data structures are living.
