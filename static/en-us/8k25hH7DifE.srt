1
00:00:00,000 --> 00:00:03,000
Now we know we have an algorithm that can solve any game tree,

2
00:00:03,000 --> 00:00:07,000
that can propagate the terminal values back up to the top

3
00:00:07,000 --> 00:00:10,000
and tell us the value for any position.

4
00:00:10,000 --> 00:00:13,000
It's theoretically complete, but now we need to know

5
00:00:13,000 --> 00:00:16,000
the complexity of the algorithm to figure out if it's practical.

6
00:00:16,000 --> 00:00:20,000
Let's look at an analysis of how long it's going to take.

7
00:00:20,000 --> 00:00:22,000
Let's say that the average branching factor--

8
00:00:22,000 --> 00:00:28,000
the number of possible moves or actions coming out of a position--is b.

9
00:00:28,000 --> 00:00:30,000
Here b would be 4.

10
00:00:30,000 --> 00:00:37,000
And let's say that the depth of the tree is m, so b wide and m deep.

11
00:00:37,000 --> 00:00:41,000
Now what I want you to tell me is what would be the computational complexity

12
00:00:41,000 --> 00:00:46,000
of searching through all the paths and backing the values up to the top.

13
00:00:46,000 --> 00:00:52,000
Would it be of the order of b times m or the order of be to the mth power

14
00:00:52,000 --> 99:59:59,999
or the order of m to the b power? Chose one of these.
