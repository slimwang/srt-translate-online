1
00:00:00,420 --> 00:00:02,480
Since all of these changes
depend on UI router,

2
00:00:02,480 --> 00:00:06,570
I installed that first and added as
a dependency to the apps module.

3
00:00:06,570 --> 00:00:10,056
I set up the configuration for the
module and injected state provider and

4
00:00:10,056 --> 00:00:11,620
URL router provider.

5
00:00:11,620 --> 00:00:13,120
Next I added a home state and

6
00:00:13,120 --> 00:00:17,050
made sure that any unknown states
redirected to the root floating bricks

7
00:00:17,050 --> 00:00:20,560
slash red is supposed to show us all
the red bricks so I set up a state for

8
00:00:20,560 --> 00:00:24,740
that, this loads the bricks template and
uses the red bricks controller.

9
00:00:24,740 --> 00:00:27,720
I did the same thing for
the blue and green bricks.

10
00:00:27,720 --> 00:00:30,560
Notice that i use the same template for
each, but

11
00:00:30,560 --> 00:00:32,860
each one has a different controller.

12
00:00:32,860 --> 00:00:37,340
I was able to do this because I set
the variable name for each one to brick.

13
00:00:37,340 --> 00:00:39,450
And finally i added the current state.

14
00:00:39,450 --> 00:00:43,270
With all the states that have added
navigation links to the index file.

15
00:00:43,270 --> 00:00:47,670
The links use the UIS ref directive and
point to the appropriate state name.

16
00:00:47,670 --> 00:00:49,900
Each item now has its own page.

17
00:00:49,900 --> 00:00:53,650
But i still need to add the cart to
each item page as a nested view.

18
00:00:53,650 --> 00:00:58,140
Remember that a nested view uses
the name of the parent a dot and

19
00:00:58,140 --> 00:01:01,590
then its name, so I used redBrick.cart.

20
00:01:01,590 --> 00:01:04,239
Since this is displaying the same
information as the cart page.

21
00:01:04,239 --> 00:01:06,580
I gave it the same template and
controller.

22
00:01:06,580 --> 00:01:09,275
Then I created nested card pages for
both the blue brick and

23
00:01:09,275 --> 00:01:10,835
the green brick pages.

24
00:01:10,835 --> 00:01:14,595
For the cart to display on the item
page, I used ui-view again.

25
00:01:14,595 --> 00:01:17,885
And then I added a link to
navigate to the nested state.

26
00:01:17,885 --> 00:01:22,030
Since all brick items share this view,
I couldn't make this red brick.cart.

27
00:01:22,030 --> 00:01:25,790
Because that would load the nested
cart view only on the Red Bricks page.

28
00:01:25,790 --> 00:01:29,030
So I left the main state
dynamic by not providing it.

29
00:01:29,030 --> 00:01:31,675
So this will load redBrick.cart
on the Red Brick page,

30
00:01:31,675 --> 00:01:34,580
blueBrick.cart on the Blue Brick page.

31
00:01:34,580 --> 00:01:38,950
And greenBrick.cart on
the Green Brick page and we're done.

32
00:01:41,400 --> 00:01:44,160
For a bonus though there's a lot
of duplication going on between

33
00:01:44,160 --> 00:01:47,140
the red brick, blue brick and
green brick states.

34
00:01:47,140 --> 00:01:50,440
Instead I created one brick state
that determines the controller to

35
00:01:50,440 --> 00:01:51,770
use by the URL.

36
00:01:51,770 --> 00:01:53,519
Since we only have one brick state now,

37
00:01:53,519 --> 00:01:56,079
I can clean up all the nested
card states down to just one.

38
00:01:59,224 --> 00:02:02,372
Since there are no longer
individual states for the items.

39
00:02:02,372 --> 00:02:06,420
I needed to update the links to
pass along the data in the URL.

40
00:02:06,420 --> 00:02:08,889
This is a much more organized
state management structure.
