1
00:00:00,340 --> 00:00:03,270
Knockout handles models a little bit differently.

2
00:00:03,270 --> 00:00:08,380
Instead of storing our data in a plain old object, or as a simple value,

3
00:00:08,380 --> 00:00:12,430
we use a special kind of Knockout object to keep track of our data.

4
00:00:12,430 --> 00:00:14,430
That's called an observable.

5
00:00:14,430 --> 00:00:16,610
If you open up the Knockout home page and

6
00:00:16,610 --> 00:00:20,810
pull up the terminal, you can actually run Knockout code.

7
00:00:20,810 --> 00:00:24,220
Now, before we actually get into how observables work,

8
00:00:24,220 --> 00:00:26,800
I want to dispel any magic.

9
00:00:26,800 --> 00:00:29,780
Observables are not magical objects.

10
00:00:29,780 --> 00:00:33,080
These are just objects with special functions on them.

11
00:00:33,080 --> 00:00:33,630
Let's go ahead and

12
00:00:33,630 --> 00:00:38,570
make an observable in the console here and run console.dir on it.

13
00:00:38,570 --> 00:00:41,390
I've made var foo equals ko.observable.

14
00:00:41,390 --> 00:00:44,090
I'm giving it a default value of 0.

15
00:00:44,090 --> 00:00:46,300
And if I run console.dir on foo,

16
00:00:46,300 --> 00:00:50,150
we will see all of the stuff that's inside of it.

17
00:00:52,020 --> 00:00:54,280
As you can see, foo is a function, so

18
00:00:54,280 --> 00:00:58,240
we can run it, and there's also all kinds of stuff on it.

19
00:00:59,420 --> 00:01:03,130
Now, we don't know what any of these functions do yet, but

20
00:01:03,130 --> 00:01:05,440
that's what the documentation is for.

21
00:01:05,440 --> 00:01:08,091
The point is there is no actual magic going on.

22
00:01:08,091 --> 00:01:09,351
This is just JavaScript.

23
00:01:09,351 --> 00:01:12,809
Now, I'm not going to cover everything about observables, but

24
00:01:12,809 --> 00:01:15,470
I will cover the basics of them for you.

25
00:01:15,470 --> 00:01:19,470
If you want more detail, take a look at the Knockout documentation.

26
00:01:19,470 --> 00:01:22,900
Let's make an observable to keep track of our favorite number.

27
00:01:22,900 --> 00:01:27,300
When we make an observable with Knockout, we pass in the initial value.

28
00:01:27,300 --> 00:01:33,400
If we want to get the value, we just run it, favNum with no argument inside.

29
00:01:33,400 --> 00:01:34,240
It returns 42.

30
00:01:34,240 --> 00:01:39,360
So rather than saying var num equals 42, and

31
00:01:39,360 --> 00:01:44,860
then just getting the value by typing num, I've created a ko.observable, and

32
00:01:44,860 --> 00:01:49,480
to get the value, I need to run it as a function with no arguments.

33
00:01:49,480 --> 00:01:54,000
Now, why is it that we need to run this function rather than just get

34
00:01:54,000 --> 00:01:55,440
the value directly?

35
00:01:55,440 --> 00:01:59,310
Well, as it turns out, there isn't currently a great cross-browser way

36
00:01:59,310 --> 00:02:03,710
to run some code when a value updates normally.

37
00:02:03,710 --> 00:02:09,610
So let's say that var num equals 42 is being shown somewhere in the view.

38
00:02:09,610 --> 00:02:15,240
If I change num to 43, the view has no way of knowing that that is changed.

39
00:02:15,240 --> 00:02:17,380
All we did is change a value.

40
00:02:17,380 --> 00:02:19,910
We didn't actually run any code.

41
00:02:19,910 --> 00:02:22,620
The way Knockout gets around this is by making it so

42
00:02:22,620 --> 00:02:26,530
you have to run a function in order to change any values.

43
00:02:26,530 --> 00:02:32,490
So if I want to change my favNum to 43, all I do is run favNum,

44
00:02:32,490 --> 00:02:35,760
and instead of passing in nothing, I'll pass in 43.

45
00:02:35,760 --> 00:02:40,294
When I do that, now favNum is 43.

46
00:02:41,620 --> 00:02:45,030
Now, the point is, I've run code when I ran this.

47
00:02:45,030 --> 00:02:47,020
favNum is a function.

48
00:02:47,020 --> 00:02:50,440
When favNum gets run, and something get passed in,

49
00:02:50,440 --> 00:02:54,530
it changes the value that's stored inside the model somewhere.

50
00:02:54,530 --> 00:03:00,970
And it runs some special code which notifies anyone who's using favNum,

51
00:03:00,970 --> 00:03:04,600
whether that's another model or the view.

52
00:03:04,600 --> 00:03:09,650
See, observers notify the view model when the model changes.

53
00:03:09,650 --> 00:03:14,400
And what's more, Knockout runs some extra code that figures out what parts of

54
00:03:14,400 --> 00:03:18,710
the view need to be updated when the view model has been notified.

55
00:03:18,710 --> 00:03:20,720
It's actually really, really cool.

56
00:03:20,720 --> 00:03:25,230
Back before, we had to call view.render anytime something would change.

57
00:03:25,230 --> 00:03:30,210
But Knockout is smart enough to know that when these things change here,

58
00:03:30,210 --> 00:03:32,790
certain other things need to be notified, and

59
00:03:32,790 --> 00:03:35,780
then eventually something needs to get re-rendered.

60
00:03:35,780 --> 00:03:38,860
So if you use normal values here,

61
00:03:38,860 --> 00:03:41,730
Knockout won't be keeping track of them for you.

62
00:03:41,730 --> 00:03:45,310
If you use observables, Knockout will keep track of them for

63
00:03:45,310 --> 00:03:50,770
you, and it will intelligently manage any views that need to get changed or

64
00:03:50,770 --> 00:03:53,440
other models that depend on our data that just changed.
