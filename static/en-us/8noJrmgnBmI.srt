1
00:00:00,000 --> 00:00:04,000
We're trying to figure out what the running time is asymptotically Θ

2
00:00:04,000 --> 00:00:11,000
for selection and insertion as a function of n and K and then we can substitute in the value of K.

3
00:00:11,000 --> 00:00:15,000
If there's n elements in our list and we're interested in the top K,

4
00:00:15,000 --> 00:00:19,000
what the selection algorithm does is it goes through the elements one at a time

5
00:00:19,000 --> 00:00:25,000
and for each of these n elements it tries to figure out where in this list of K it needs to go.

6
00:00:25,000 --> 00:00:30,000
For each of these n, it does an insertion or a selection.

7
00:00:30,000 --> 00:00:37,000
Okay, let's do insertion first. It does an insertion in this list. That insertion takes Θ(k).

8
00:00:37,000 --> 00:00:40,000
It's basically running through this list, figuring out where the value goes,

9
00:00:40,000 --> 00:00:42,000
sticking it in, and shifting everything else over.

10
00:00:42,000 --> 00:00:53,000
The insertion algorithm is going to take n times that for a total of Θ(nk). Now, selection is the same.

11
00:00:53,000 --> 00:00:57,000
What happens in selection is you run through this list of n,

12
00:00:57,000 --> 00:01:02,000
and you pull out the maximum and delete so that takes Θ(n)

13
00:01:02,000 --> 00:01:05,000
and you repeat that once for each of the elements you want to pull out.

14
00:01:05,000 --> 00:01:08,000
It becomes also Θ(nk).

15
00:01:08,000 --> 00:01:15,000
Sorting on the other hand sorts this entire list, which I said before was n log n.

16
00:01:15,000 --> 00:01:20,000
Then, well, it's kind of done at that point but you could imagine also looping that through

17
00:01:20,000 --> 00:01:23,000
like the first K elements but we basically have them at that point

18
00:01:23,000 --> 00:01:29,000
and K is smaller than n so asymptotically that's the whole running time.

19
00:01:29,000 --> 00:01:35,000
Now, if K is n/2 that's n times n/2 where n².

20
00:01:35,000 --> 00:01:40,000
This is Θ(n²). This is Θ(nlogn). We're much better with n log n.

21
00:01:40,000 --> 00:01:44,000
With the very long list that were wanting to tap values of,

22
00:01:44,000 --> 00:01:46,000
you might as well just sort the whole thing.

23
00:01:46,000 --> 00:01:56,000
√n, well what happens with √n? √n where look we're comparing n log n to n(√n) which is n³/².

24
00:01:56,000 --> 00:02:02,000
n³/² is asymptotically larger than n log n so we're still better off just sorting the whole list.

25
00:02:02,000 --> 00:02:05,000
Now, let's go to the other side of the spectrum. What if there's 100 elements in the list?

26
00:02:05,000 --> 00:02:11,000
Well if K is a constant, K is 100. Then the big theta of this is just Θ(n). It's a linear time.

27
00:02:11,000 --> 00:02:16,000
So linear beats nlogn. So we'll definitely want to choose these algorithms

28
00:02:16,000 --> 00:02:20,000
over sorting if it's a small number of elements that you want to know.

29
00:02:20,000 --> 00:02:26,000
loglogn is similar. We end up with n(loglogn), which is better than nlogn.

30
00:02:26,000 --> 00:02:32,000
And finally I guess it'd be kind of obvious at this point if we substitute logn in for K,

31
00:02:32,000 --> 00:02:39,000
we have nlogn for selection insertion but we also have nlogn for sorting so they're actually the same.
