1
00:00:00,140 --> 00:00:02,029
Most data needs a closer look and at least a few

2
00:00:02,029 --> 00:00:05,590
fixes. For example, this is a picture of my house. Well,

3
00:00:05,590 --> 00:00:08,390
actually it's not my house it's actually the house next door.

4
00:00:08,390 --> 00:00:11,200
But in it's street map view, Google Maps believes this is

5
00:00:11,200 --> 00:00:15,020
actually my house. Here's another quick example. So this is the

6
00:00:15,020 --> 00:00:18,310
Wikipedia page for the Volkswagen Beetle. And probably the most common

7
00:00:18,310 --> 00:00:21,990
name for the beatle is bug. And you can see here

8
00:00:21,990 --> 00:00:25,220
that the nickname is bg. It's just a type but a

9
00:00:25,220 --> 00:00:28,630
great example of the kinds of errors you can get anytime

10
00:00:28,630 --> 00:00:33,010
humans are involved in producing data. Which is always. Let's take

11
00:00:33,010 --> 00:00:35,300
a look at one more example before we move on. This

12
00:00:35,300 --> 00:00:38,660
is some financial data that I worked with several years ago and

13
00:00:38,660 --> 00:00:41,690
a couple of interesting things to note here. One is that

14
00:00:41,690 --> 00:00:45,830
this line here is missing values for most of the fields, there

15
00:00:45,830 --> 00:00:48,000
are lots of reasons why that might be the case, this

16
00:00:48,000 --> 00:00:50,650
is the type of thing that we've got to look for anytime

17
00:00:50,650 --> 00:00:54,670
we're dealing with data. Another example here Has to do

18
00:00:54,670 --> 00:00:57,400
with what assumptions we might have about the dates. If you

19
00:00:57,400 --> 00:01:00,590
look at these we might assume that this actually means

20
00:01:00,590 --> 00:01:04,599
August 4th, 2008, certainly if you're an American, that's the type

21
00:01:04,599 --> 00:01:06,060
of assumption that you'd make. But then we get to

22
00:01:06,060 --> 00:01:09,340
dates like this and there's another example here, where it becomes

23
00:01:09,340 --> 00:01:13,000
pretty clear that this is probably a date format In which

24
00:01:13,000 --> 00:01:16,000
the day comes first. So we've got to be careful about

25
00:01:16,000 --> 00:01:18,140
any assumptions we bring with us into a data

26
00:01:18,140 --> 00:01:21,070
wrangling task. So let's go ahead and spell this

27
00:01:21,070 --> 00:01:23,440
out. We need to asses our data in order

28
00:01:23,440 --> 00:01:26,840
to test assumptions about the values that are there. The

29
00:01:26,840 --> 00:01:30,840
data types for those values and the shape of

30
00:01:30,840 --> 00:01:35,340
our data. We also need to identity errors or outliers

31
00:01:35,340 --> 00:01:38,180
in our data. We're going to look at several ways

32
00:01:38,180 --> 00:01:41,060
of testing our data to see whether there are errors

33
00:01:41,060 --> 00:01:44,030
present or whether we have data that's really outside the range

34
00:01:44,030 --> 00:01:47,640
of expected values. And finally, we need to access whether there are

35
00:01:47,640 --> 00:01:50,890
any missing values within our data. In addition to all of

36
00:01:50,890 --> 00:01:54,020
this, we also need to make sure that our data will support

37
00:01:54,020 --> 00:01:56,680
the type of queries that we need to make. The idea

38
00:01:56,680 --> 00:02:00,100
here is to eliminate surprises leading to bad analysis later. We'll go

39
00:02:00,100 --> 00:02:03,360
into all of this in lesson three, but before can clean any

40
00:02:03,360 --> 00:02:06,400
data, we need to make sure we know how to gather data.

41
00:02:06,400 --> 00:02:07,830
And that's what we're going to be looking at in

42
00:02:07,830 --> 00:02:10,060
the rest of this lesson, and the lesson that follows.
