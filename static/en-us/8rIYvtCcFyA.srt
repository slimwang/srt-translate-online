1
00:00:01,710 --> 00:00:03,660
You have done well to get this far.

2
00:00:03,660 --> 00:00:07,630
Your skills, they are strong,
you are ready.

3
00:00:07,630 --> 00:00:11,508
It is time, time to disable
Force update on page load.

4
00:00:11,508 --> 00:00:14,593
Now the service worker
lifecycle is back to normal,

5
00:00:14,593 --> 00:00:17,198
which is how real users
will experience it.

6
00:00:17,198 --> 00:00:20,660
You see, force update is
great during development.

7
00:00:20,660 --> 00:00:22,750
Say we wanted to change
the theme of the app.

8
00:00:22,750 --> 00:00:27,370
The theme colors are in
public/scss/theme.scss.

9
00:00:27,370 --> 00:00:30,311
These are a set of Sass variables
referenced throughout the rest of

10
00:00:30,311 --> 00:00:31,158
the style sheets.

11
00:00:31,158 --> 00:00:36,258
If I change the primary color to
red then go back to the browser

12
00:00:36,258 --> 00:00:41,458
with force update enabled and
refresh, boom, red toolbar.

13
00:00:41,458 --> 00:00:45,114
But this is because force update
reloads the service worker

14
00:00:45,114 --> 00:00:47,380
from the network on every refresh and

15
00:00:47,380 --> 00:00:51,418
causes it to install even if
the service worker hasn't changed.

16
00:00:51,418 --> 00:00:54,850
Let's say I change the whole theme by
uncommenting this other set of variables

17
00:00:54,850 --> 00:00:57,350
here, which should make the theme green.

18
00:00:57,350 --> 00:01:00,340
But this time,
I'll disable Force update on page load.

19
00:01:00,340 --> 00:01:03,610
Refresh the page, and still red.

20
00:01:03,610 --> 00:01:06,448
No matter how many times I refresh,
still red.

21
00:01:06,448 --> 00:01:11,170
If I Shift+refresh and bypass
the service worker, I see the changes.

22
00:01:11,170 --> 00:01:13,250
But normal refreshing gets me nowhere,

23
00:01:13,250 --> 00:01:16,080
because our cache still
contains the old CSS.

24
00:01:16,080 --> 00:01:18,860
Our cached CSS is updated as
part of the install step.

25
00:01:18,860 --> 00:01:20,080
But that isn't happening,

26
00:01:20,080 --> 00:01:22,680
because there's no new
service worker to install.

27
00:01:22,680 --> 00:01:26,400
We can see from dev tools,
there's no new service worker waiting.

28
00:01:26,400 --> 00:01:28,490
Without force update,
the browser checks for

29
00:01:28,490 --> 00:01:30,830
an update to the service
worker per page load.

30
00:01:30,830 --> 00:01:34,220
But I didn't change the service worker,
I only changed the CSS, so

31
00:01:34,220 --> 00:01:35,958
there's nothing new to install.

32
00:01:35,958 --> 00:01:38,910
We need to work with the service
worker to get it to pick up changes,

33
00:01:38,910 --> 00:01:40,950
because we're developers, right?

34
00:01:40,950 --> 00:01:42,498
We change code all the time.

35
00:01:42,498 --> 00:01:45,850
And we need users to get those
changes as soon as possible with

36
00:01:45,850 --> 00:01:47,108
minimum disruption.

37
00:01:47,108 --> 00:01:49,540
Here's how we work with
the service worker lifecycle.

38
00:01:50,750 --> 00:01:54,360
To get the CSS to update, we need to
make a change to the service worker.

39
00:01:54,360 --> 00:01:57,908
The browser will then treat this
updated worker as a new version.

40
00:01:57,908 --> 00:02:01,833
Because it's new, it'll get its own
install event where it'll fetch

41
00:02:01,833 --> 00:02:06,400
the JavaScript, HTML, and our updated
CSS and put them in a new cache.

42
00:02:06,400 --> 00:02:08,919
It won't put them in a different
cache automatically.

43
00:02:08,919 --> 00:02:11,358
We changed the name of our
cache to make this happen.

44
00:02:11,358 --> 00:02:15,082
We create a new cache because we don't
want to disrupt the cache that's already

45
00:02:15,082 --> 00:02:18,318
there being used by the old service
worker and the pages it controls.

46
00:02:18,318 --> 00:02:22,479
Then, once the old service worker is
released and we're ready to take over,

47
00:02:22,479 --> 00:02:26,704
we delete the old cache so the next page
load gets resources from the new cache,

48
00:02:26,704 --> 00:02:29,050
meaning it gets the latest CSS.

49
00:02:29,050 --> 00:02:30,422
Job done.

50
00:02:30,422 --> 00:02:33,171
We've already covered most of
the parts needed to make this happen.

51
00:02:33,171 --> 00:02:36,307
We know that a change to the service
worker will cause it to spin up a new

52
00:02:36,307 --> 00:02:36,858
instance.

53
00:02:36,858 --> 00:02:41,037
And that change can just be
renaming the cache from v1 to v2.

54
00:02:41,037 --> 00:02:45,278
The bit we haven't covered is how
to get rid of that old cache.

55
00:02:45,278 --> 00:02:48,008
The first piece of the puzzle
is the activate event.

56
00:02:48,008 --> 00:02:50,091
We've already seen the install event,

57
00:02:50,091 --> 00:02:54,011
which fires when the browser sets up
a new service worker for the first time,

58
00:02:54,011 --> 00:02:57,933
whereas the activate event fires when
this service worker becomes active,

59
00:02:57,933 --> 00:03:01,818
when it's ready to control pages and
the previous service worker is gone.

60
00:03:01,818 --> 00:03:05,130
This makes it the perfect time
to get rid of old caches.

61
00:03:05,130 --> 00:03:06,420
Like the install event,

62
00:03:06,420 --> 00:03:10,260
you can use event.waitUntil to
signal the length of the process.

63
00:03:10,260 --> 00:03:11,380
While you're activating,

64
00:03:11,380 --> 00:03:14,780
the browser will queue other service
worker events such as fetch.

65
00:03:14,780 --> 00:03:17,540
So by the time your service
worker receives its first fetch,

66
00:03:17,540 --> 00:03:20,450
you know you have the caches
how you want them.

67
00:03:20,450 --> 00:03:22,670
You can delete caches
using caches.delete,

68
00:03:22,670 --> 00:03:24,530
passing in the name of the cache.

69
00:03:24,530 --> 00:03:28,490
You can also get the names of all
your caches using caches.keys.

70
00:03:28,490 --> 00:03:30,320
Both of these methods return promises.
