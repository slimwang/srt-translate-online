1
00:00:00,000 --> 00:00:02,000
All right. So how should we solve it?

2
00:00:02,000 --> 00:00:04,000
My approach is going to be to use a tree.

3
00:00:04,000 --> 00:00:09,000
Or another way to think of this is to use recursion.

4
00:00:09,000 --> 00:00:16,000
Let's say that we start out with our possible guests remaining to be LM, ECS, and SBA,

5
00:00:16,000 --> 00:00:19,000
and the people who've showed up, let's say right now that's 0.

6
00:00:19,000 --> 00:00:23,000
I'm going to walk through and diagram a tree that shows all 8 possibilities.

7
00:00:23,000 --> 00:00:28,000
Say I start out with 3 guests to invite, and I'm going to pick the first one right now.

8
00:00:28,000 --> 00:00:33,000
One possibility is that LM shows up; another possibility is that LM does not.

9
00:00:33,000 --> 00:00:35,000
So now I have 2 other worlds to consider.

10
00:00:35,000 --> 00:00:38,000
In this first one, LM has showed up,

11
00:00:38,000 --> 00:00:42,000
and I still have to invite ECS and SBA and see what happens.

12
00:00:42,000 --> 00:00:47,000
Over here no one has showed up, but I still have to invite ECS and SBA.

13
00:00:47,000 --> 00:00:50,000
Let's work here on the left first. Now it's time to invite ECS.

14
00:00:50,000 --> 00:00:52,000
One possibility is that she shows up;

15
00:00:52,000 --> 00:00:55,000
another possibility is that she does not.

16
00:00:55,000 --> 00:00:57,000
But since LM showed up earlier, she's still here.

17
00:00:57,000 --> 00:01:01,000
In any event, I still have to invite or consider SBA.

18
00:01:01,000 --> 00:01:03,000
Let's say I do invite SBA.

19
00:01:03,000 --> 00:01:08,000
One possibility is that she shows up; another possibility is that she does not.

20
00:01:08,000 --> 00:01:12,000
Now I'm out of people to consider inviting, so we're done over here on the left.

21
00:01:12,000 --> 00:01:15,000
Back over here in this possible world, only LM has shown up so far.

22
00:01:15,000 --> 00:01:17,000
Let's go invite SBA.

23
00:01:17,000 --> 00:01:21,000
One possibility is that SBA shows up; another possibility is that she does not.

24
00:01:21,000 --> 00:01:24,000
And you can see how this pattern would repeat in the other side of the tree.

25
00:01:24,000 --> 00:01:26,000
I'll just do it here quickly.

26
00:01:26,000 --> 00:01:29,000
And now at the bottom of the tree you can see all 8 of our answers--

27
00:01:29,000 --> 00:01:35,000
1, 2, 3, 4, 5, 6, 7, 8--ranging from everyone shows up to no one shows up.

28
00:01:35,000 --> 00:01:38,000
In this tree, every time we go down a level,

29
00:01:38,000 --> 00:01:41,000
every time we consider another guest, we have 2 branches.

30
00:01:41,000 --> 00:01:47,000
So the size of the tree doubles each time, which is just what we reasoned about before.

31
00:01:47,000 --> 00:01:51,000
In this particular running example, my 3 friends that I invited for dinner,

32
00:01:51,000 --> 00:01:55,000
LM, ECS, and SBA, were Lucretia Mott, Elizabeth Cady Stanton,

33
00:01:55,000 --> 00:02:00,000
and Susan B. Anthony, 3 American abolitionists--that is, they opposed slavery--

34
00:02:00,000 --> 00:02:02,000
who then went on to champion women's right to vote.

35
00:02:02,000 --> 00:02:04,000
All right. So how am I going to implement this?

36
00:02:04,000 --> 00:02:09,000
I'm going to make a recursive procedure that has 2 arguments:

37
00:02:09,000 --> 00:02:12,000
1 corresponding to the remaining people to invite

38
00:02:12,000 --> 00:02:16,000
and another corresponding to who has showed up so far.

39
00:02:16,000 --> 00:02:18,000
Unlike many other recursive procedures,

40
00:02:18,000 --> 00:02:21,000
I'm going to call myself recursively twice:

41
00:02:21,000 --> 00:02:25,000
once in the case where the current person accepts, once in the case where they don't.

42
00:02:25,000 --> 00:02:29,000
So here we are in the interpreter, the integrated development environment.

43
00:02:29,000 --> 00:02:32,000
We're going to write a procedure that accepts a list as an argument

44
00:02:32,000 --> 99:59:59,999
and then prints out all the subsets of that list.
