1
00:00:00,410 --> 00:00:03,830
The fundamental idea behind the firm timer

2
00:00:03,830 --> 00:00:08,780
design is to provide accurate timing with very

3
00:00:08,780 --> 00:00:14,830
low overhead. And what it does is it combines the good points of the one shot

4
00:00:14,830 --> 00:00:20,170
timer and the soft timers. As I mentioned, the one shot timer, its virtue is the

5
00:00:20,170 --> 00:00:22,760
fact that we can have the timer interrupt

6
00:00:22,760 --> 00:00:26,030
happen exactly at the time that we want.

7
00:00:26,030 --> 00:00:27,690
In other words, we get rid of

8
00:00:27,690 --> 00:00:31,700
the timer inaccuracy that we mentioned earlier. That

9
00:00:31,700 --> 00:00:35,730
plagues normal timer design in general purpose operating

10
00:00:35,730 --> 00:00:38,010
systems. The con that we said with the

11
00:00:38,010 --> 00:00:40,340
oneshot timer, is that there is overhead

12
00:00:40,340 --> 00:00:45,190
associated with processing oneshot timer events. As well

13
00:00:45,190 --> 00:00:48,220
as reprogramming them. So for that reason, what

14
00:00:48,220 --> 00:00:51,880
they do in TS Linux with the firm

15
00:00:51,880 --> 00:00:55,450
timer design is to have a knob, which is

16
00:00:55,450 --> 00:00:58,560
called the overshoot knob, and the idea is the

17
00:00:58,560 --> 00:01:01,530
one shot timer expired here. This is the point

18
00:01:01,530 --> 00:01:04,780
at which the event happened, but what we're going

19
00:01:04,780 --> 00:01:07,770
to do is. We're going to have a parameter

20
00:01:07,770 --> 00:01:11,130
associated with the one shot timer called the overshoot

21
00:01:11,130 --> 00:01:14,780
parameter and what that overshoot parameter is allowing you

22
00:01:14,780 --> 00:01:17,080
to do is, even though this is the point

23
00:01:17,080 --> 00:01:19,850
at which the event happened, the one-shot timer is

24
00:01:19,850 --> 00:01:22,010
programmed to go off at this point. So there

25
00:01:22,010 --> 00:01:25,840
is a distance between the actual event happening and

26
00:01:25,840 --> 00:01:28,600
the point at which the one-shot timer has been programmed

27
00:01:28,600 --> 00:01:31,740
to interrupt the CPU. This is the overshoot parameter.

28
00:01:31,740 --> 00:01:34,450
You may wonder, what is the advantage of this

29
00:01:34,450 --> 00:01:39,680
overshoot parameter? Well, within this overshoot parameter window, there

30
00:01:39,680 --> 00:01:42,970
could be a system call, which is a soft interrupt.

31
00:01:42,970 --> 00:01:47,410
We mentioned that applications typically make system

32
00:01:47,410 --> 00:01:51,100
calls, or there could be an external interrupt.

33
00:01:51,100 --> 00:01:56,470
Any of those things can bring you into the kernel, and so you may be already

34
00:01:56,470 --> 00:01:59,000
in the kernel at this point during this

35
00:01:59,000 --> 00:02:02,030
overshoot window. So what we could do now

36
00:02:02,030 --> 00:02:05,570
is, we'll dispatch the expired timers at this

37
00:02:05,570 --> 00:02:09,330
point of time and also we will reprogram

38
00:02:09,330 --> 00:02:13,300
the one-shot timer that expired for the next time

39
00:02:13,300 --> 00:02:17,740
that we need the one-shot timer to interrupt. Normally, the

40
00:02:17,740 --> 00:02:20,380
one shot timer would have gone off here because

41
00:02:20,380 --> 00:02:23,450
this is the overshoot window, but even before that, since

42
00:02:23,450 --> 00:02:26,060
the system call happened, at this point, we'll going to

43
00:02:26,060 --> 00:02:28,070
see that oh, there is this one shot timer that

44
00:02:28,070 --> 00:02:31,490
has already expired, its going to interrupt me not in

45
00:02:31,490 --> 00:02:34,480
the too distant future, might as well dispatch that expired

46
00:02:34,480 --> 00:02:39,730
timer right now and reprogram that one shot timer so that it is now ready

47
00:02:39,730 --> 00:02:44,230
for the next one-shot timer interrupt. The upshot

48
00:02:44,230 --> 00:02:47,900
of doing this, dispatching the expired timer at

49
00:02:47,900 --> 00:02:49,880
the point of the system call that

50
00:02:49,880 --> 00:02:53,790
is happening within this overshoot window, is that

51
00:02:53,790 --> 00:02:56,310
at the point at which this one-shot timer

52
00:02:56,310 --> 00:02:59,680
has been programmed to interrupt, that is gone.

53
00:02:59,680 --> 00:03:01,900
It'll not cause an interrupt because we've reprogrammed

54
00:03:01,900 --> 00:03:05,600
this one-shot timer to interrupt at the next one-shot

55
00:03:05,600 --> 00:03:10,020
timer expiry event. Because whatever action that needed to

56
00:03:10,020 --> 00:03:13,740
be taken with respect to this particular one-shot timer

57
00:03:13,740 --> 00:03:16,420
expiration has already been taken at this point

58
00:03:16,420 --> 00:03:18,991
and therefore at this point we will not get

59
00:03:18,991 --> 00:03:22,320
another interrupt. So we have saved on the one-shot

60
00:03:22,320 --> 00:03:24,690
timer interrupt that would have happened at this point

61
00:03:24,690 --> 00:03:27,550
of time by combining the hard and soft

62
00:03:27,550 --> 00:03:30,656
timer in this manner. I mentioned that fielding

63
00:03:30,656 --> 00:03:34,300
a one-shot timer interrupt is expensive. We avioded

64
00:03:34,300 --> 00:03:37,887
that. Because, fielding the interrupt happened as part

65
00:03:37,887 --> 00:03:40,095
of handling the system call and at this

66
00:03:40,095 --> 00:03:43,545
point itself, we have re-programmed the one-shot timer

67
00:03:43,545 --> 00:03:50,140
for the next event as well. So you can see that the firm timer design combines

68
00:03:50,140 --> 00:03:55,278
the good points of both the one-shot timer as well as the soft timer. It is

69
00:03:55,278 --> 00:03:57,978
giving us the accuracy that we want from

70
00:03:57,978 --> 00:04:01,130
the one-shot timer but at the same time, we

71
00:04:01,130 --> 00:04:05,410
are avoiding the overhead associated with one-shot timer

72
00:04:05,410 --> 00:04:08,790
by processing that interrupt using this over shoot

73
00:04:08,790 --> 00:04:11,590
parameter. Of course, with, within this over shoot

74
00:04:11,590 --> 00:04:15,560
parameter, there is no system call or external interrupt

75
00:04:15,560 --> 00:04:19,970
that brings us into the kernel, then we will have this one-shot timer

76
00:04:19,970 --> 00:04:24,010
going off at this point. But the hope is that by choosing this

77
00:04:24,010 --> 00:04:29,890
knob appropriately, between hard and soft timers, we can make sure that we

78
00:04:29,890 --> 00:04:32,720
reduce the number of times we get

79
00:04:32,720 --> 00:04:35,752
the one shot timer interrupts actually occurring.
