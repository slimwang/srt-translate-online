1
00:00:00,190 --> 00:00:02,270
So to be able to move
between different states,

2
00:00:02,270 --> 00:00:06,360
we need a MediaPlayer object that is
initialized for a certain audio file.

3
00:00:06,360 --> 00:00:10,190
Then we can call methods on that
object to move between the states.

4
00:00:10,190 --> 00:00:14,510
So we created a MediaPlayer object by
calling the MediaPlayer.create method.

5
00:00:14,510 --> 00:00:16,940
Notice that this is
using a factory method

6
00:00:16,940 --> 00:00:19,420
instead of a constructor
to create our object.

7
00:00:19,420 --> 00:00:21,270
If you recall from the last course,

8
00:00:21,270 --> 00:00:24,830
we learned about factory methods
as another way to create objects.

9
00:00:24,830 --> 00:00:28,176
And so for example,
to create a toast message object,

10
00:00:28,176 --> 00:00:32,200
we've already been using
the Toast.makeText factory method.

11
00:00:32,200 --> 00:00:36,310
So to clarify, when you call the static
method, you call on the class.

12
00:00:36,310 --> 00:00:39,120
And remember, that has to be
exact name of the Java class.

13
00:00:39,120 --> 00:00:42,570
Now when you call a regular method or
one that's not declared as static,

14
00:00:42,570 --> 00:00:45,390
you can call the method on
an object instance of the class.

15
00:00:45,390 --> 00:00:49,540
So this name can change depending on
the name of your object variable.

16
00:00:49,540 --> 00:00:52,010
To learn more details about
media playback on Android,

17
00:00:52,010 --> 00:00:55,840
I highly recommend Ian Lake's talk,
titled media playback the right way,

18
00:00:55,840 --> 00:00:58,000
that he gave at
the Big Android BBQ conference.

19
00:00:58,000 --> 00:01:00,120
You can find the link for it down below.

20
00:01:01,420 --> 00:01:02,920
In the developer documentation for

21
00:01:02,920 --> 00:01:06,900
MediaPlayer, the create methods are
shown here in the public method section.

22
00:01:07,960 --> 00:01:11,410
So the choice to use a factory
method versus a constructor

23
00:01:11,410 --> 00:01:14,650
in order to create new objects was
decided by the original developer

24
00:01:14,650 --> 00:01:16,910
who wrote out this MediaPlayer code.

25
00:01:16,910 --> 00:01:20,780
Instead of having different constructors
on the MediaPlayer class, the developer

26
00:01:20,780 --> 00:01:24,180
chose to have different create methods
that could have different sets of

27
00:01:24,180 --> 00:01:28,460
parameters depending on if you want to
play an audio file included in the app,

28
00:01:28,460 --> 00:01:32,470
or stream that audio from another
data source like the Internet.

29
00:01:32,470 --> 00:01:35,050
So in our case, we use this constructor.

30
00:01:35,050 --> 00:01:40,300
So create and it takes in context
context, and res id of type integer.

31
00:01:41,300 --> 00:01:44,800
So we call this create method and
pass in its two inputs.

32
00:01:44,800 --> 00:01:48,600
So the current context and the resource
id for the file that we want to play,

33
00:01:48,600 --> 00:01:53,130
and the return value of this method
is a brand new media player object.

34
00:01:53,130 --> 00:01:56,870
So you may have noticed here that
the create method is a static method.

35
00:01:56,870 --> 00:02:01,760
Just like how static variables belong to
a class and not to individual instances,

36
00:02:01,760 --> 00:02:05,220
static methods are methods that
are bound to the class itself.

37
00:02:05,220 --> 00:02:08,800
So one neat advantage of this is
that we can call the methods without

38
00:02:08,800 --> 00:02:10,910
ever making an instance of the class.

39
00:02:10,910 --> 00:02:15,110
Now if we return back to the media
player API guide, in the code here,

40
00:02:15,110 --> 00:02:17,120
we can call the static method like this.

41
00:02:17,120 --> 00:02:20,410
So we can use the exact name
of the class MediaPlayer and

42
00:02:20,410 --> 00:02:22,770
not need to use the name
of an object variable.

43
00:02:22,770 --> 00:02:26,170
We can use the same dot operator that
we would use on an instance, and

44
00:02:26,170 --> 00:02:28,786
then follow it with the name
of the static method.

45
00:02:28,786 --> 00:02:31,501
So we pass in the context and
the resource identifier for

46
00:02:31,501 --> 00:02:33,888
the sound file that we want to play.

47
00:02:33,888 --> 00:02:37,600
So the MediaPlayer needs a context in
order to access shared resources on

48
00:02:37,600 --> 00:02:40,820
the device and to know what
environment it's being used in.

49
00:02:40,820 --> 00:02:44,178
And after that, we can tell the media
player to begin playback by calling

50
00:02:44,178 --> 00:02:45,550
it's start method.

51
00:02:45,550 --> 00:02:48,790
So note that this comment here points
that there's no need to call the prepare

52
00:02:48,790 --> 00:02:51,430
method explicitly because
the create method

53
00:02:51,430 --> 00:02:54,000
already helps us prepare
the audio file for us.

54
00:02:54,000 --> 00:02:58,150
So we can call a create method and
then immediately call the start method.

55
00:02:58,150 --> 00:03:00,877
And after that,
we can call other MediaPlayer methods.
