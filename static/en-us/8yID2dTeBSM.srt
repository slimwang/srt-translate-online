1
00:00:01,409 --> 00:00:06,820
The answer is that in Sibiu, the action
function gives us four actions

2
00:00:06,820 --> 00:00:09,740
corresponding to traveling
along these four roads.

3
00:00:09,740 --> 00:00:14,696
So we have to add in paths for
each of those actions.

4
00:00:14,696 --> 00:00:17,064
One of those paths goes here.

5
00:00:17,065 --> 00:00:21,855
The other path continues from Arad and
goes out here.

6
00:00:21,855 --> 00:00:25,737
The third path continues out here.

7
00:00:25,736 --> 00:00:32,080
And then the fourth path
goes from Arad to Sibiu,

8
00:00:32,081 --> 00:00:36,589
and then backtracks back to Arad.

9
00:00:36,588 --> 00:00:41,339
Now, it may seem silly and redundant
to have a path that starts in Arad,

10
00:00:41,340 --> 00:00:44,540
goes to Sibiu, and returns to Arad.

11
00:00:44,539 --> 00:00:49,049
How can that help us get to
our destination in Bucharest?

12
00:00:49,049 --> 00:00:52,469
But we can see,
if we're dealing with a tree search,

13
00:00:52,469 --> 00:00:56,320
why it's natural to have this
type of formulation, and

14
00:00:56,320 --> 00:01:00,250
why the tree search doesn't even
notice that it's backtracked.

15
00:01:00,250 --> 00:01:03,549
What the tree search does is superimpose

16
00:01:03,549 --> 00:01:07,709
on top of a state space
a tree of searches.

17
00:01:07,709 --> 00:01:09,739
And the trees looks like this.

18
00:01:09,739 --> 00:01:15,280
We start off in state A, and
in state A, there were three actions.

19
00:01:15,280 --> 00:01:22,060
So it gave us paths going to Z, S and T.

20
00:01:22,060 --> 00:01:25,310
And from S, there were four actions.

21
00:01:25,310 --> 00:01:30,424
So that gave us paths going to O, F, R,

22
00:01:30,424 --> 00:01:37,406
and A, and then the tree
would continue on from here.

23
00:01:37,406 --> 00:01:43,018
We take one of the next items,
and we move it and continue on.

24
00:01:43,018 --> 00:01:49,653
But notice that we return to
the A state in the state space.

25
00:01:49,653 --> 00:01:55,007
But in the tree,
it's just another item in the tree.

26
00:01:55,007 --> 00:01:58,026
Now here's another representation
of the search space.

27
00:01:58,025 --> 00:02:02,000
And what's happening is as we
start to explore the state,

28
00:02:02,000 --> 00:02:04,117
we keep track of the Frontier.

29
00:02:04,117 --> 00:02:08,329
Which is the set of states that
are at the ends of the paths that

30
00:02:08,329 --> 00:02:10,239
we haven't explored yet.

31
00:02:10,239 --> 00:02:14,938
And behind that frontier is
the set of the explored states and

32
00:02:14,937 --> 00:02:18,729
ahead of the frontier is
the unexplored states.

33
00:02:18,729 --> 00:02:23,601
Now the reason we keep track
of the explored states is that

34
00:02:23,602 --> 00:02:27,573
when we want to expand and
we find a duplicate.

35
00:02:27,573 --> 00:02:32,342
So say when we expand from here,
if we pointed

36
00:02:32,342 --> 00:02:37,612
back to state T,
if we hadn't kept track of that,

37
00:02:37,611 --> 00:02:43,189
we would have to add in a new state for
T down here.

38
00:02:43,189 --> 00:02:45,253
But because we've already seen it,

39
00:02:45,253 --> 00:02:50,149
we know that it is actually a regressive
step into the already explored state.

40
00:02:50,150 --> 00:02:53,319
Now, because we've kept track of that,
we don't need it anymore.

41
00:02:53,319 --> 00:02:54,748
[BLANK_AUDIO]

