1
00:00:00,220 --> 00:00:02,660
So, the answer is the first one. This is just

2
00:00:02,660 --> 00:00:05,290
a number three. And we can get three from expression

3
00:00:05,290 --> 00:00:09,660
by following this rule. Starting from expression, replacing with number,

4
00:00:09,660 --> 00:00:13,880
and then replacing number with the number three. The second one

5
00:00:13,880 --> 00:00:16,250
is not valid. And the way to see that is

6
00:00:16,250 --> 00:00:19,650
if we start from expression, we only have three choices. We

7
00:00:19,650 --> 00:00:23,130
can replace it with expression operator expression. We can replace

8
00:00:23,130 --> 00:00:25,420
it with number, or we can replace it with a left

9
00:00:25,420 --> 00:00:28,630
paren, expression, right paren. Since the expression we're trying

10
00:00:28,630 --> 00:00:31,020
to match starts with a left paren, the only

11
00:00:31,020 --> 00:00:33,320
way to get it left paren is to eventually

12
00:00:33,320 --> 00:00:36,220
have this rule that replaces expression with left paren. When

13
00:00:36,220 --> 00:00:37,920
we use that rule, what we get is the

14
00:00:37,920 --> 00:00:44,170
left paren followed by expression. Now we have expression here.

15
00:00:44,170 --> 00:00:47,220
From here, we've matched the far left paren and

16
00:00:47,220 --> 00:00:50,070
the far right paren. What we have left is this.

17
00:00:51,330 --> 00:00:54,610
We can replace this expression with paren expression,

18
00:00:54,610 --> 00:00:58,770
and we have paren that's replacing this expression using

19
00:00:58,770 --> 00:01:01,150
this rule. And then we still have the

20
00:01:01,150 --> 00:01:04,670
second right paren that we had before. This isn't

21
00:01:04,670 --> 00:01:06,958
going to match here because we need two right

22
00:01:06,958 --> 00:01:10,640
parens to match. And the essence of this rule

23
00:01:10,640 --> 00:01:13,440
is that every time we open a parenthesis we

24
00:01:13,440 --> 00:01:16,690
have to eventually close it. So we can't product

25
00:01:16,690 --> 00:01:19,590
expressions where the parenthesis aren't balanced. So this

26
00:01:19,590 --> 00:01:23,000
is not a valid Python expression. We can

27
00:01:23,000 --> 00:01:26,240
produce the third one, this has many nested

28
00:01:26,240 --> 00:01:30,120
expressions. We have three perens that are open, but

29
00:01:30,120 --> 00:01:31,790
we have balanced and closed perens. And the

30
00:01:31,790 --> 00:01:33,960
way we can derive this expression, we'll start

31
00:01:33,960 --> 00:01:36,780
with one expression that's our starting point. We

32
00:01:36,780 --> 00:01:41,530
use this rule to replace it paren expression, paren.

33
00:01:41,530 --> 00:01:43,270
Now, we have an expression that starts with a one,

34
00:01:43,270 --> 00:01:45,900
so we want to replace this expression with expression operator

35
00:01:45,900 --> 00:01:48,640
expression. We still have the outer parens that we had

36
00:01:48,640 --> 00:01:52,020
before. Now, we're working on this part. We want to to

37
00:01:52,020 --> 00:01:55,170
replace this expression with a number and then with the

38
00:01:55,170 --> 00:01:58,920
number one. We're going to replace the Op, the following

39
00:01:58,920 --> 00:02:02,220
operator goes to times rule. That's going to be replaced

40
00:02:02,220 --> 00:02:06,470
with times And now we've got to replace this expression.

41
00:02:06,470 --> 00:02:08,720
We're trying to produce this whole thing, so we're going to replace

42
00:02:08,720 --> 00:02:12,320
this with, using the parentheses rule. And we can keep going,

43
00:02:12,320 --> 00:02:13,820
we're going to replace this expression

44
00:02:13,820 --> 00:02:16,565
with expression operator expression. Eventually get

45
00:02:16,565 --> 00:02:19,425
the two times and then do that replacement with parens again,

46
00:02:19,425 --> 00:02:22,430
to get the three times four. And not going to fill in

47
00:02:22,430 --> 00:02:25,000
all the steps here because they won't fit on the screen.

48
00:02:25,000 --> 00:02:26,600
But I hope you get the basic idea that we can

49
00:02:26,600 --> 00:02:31,510
keep doing the replacements, making complex expressions like this one. So the

50
00:02:31,510 --> 00:02:35,555
fourth possibility is not a valid expression. There's no way

51
00:02:35,555 --> 00:02:37,960
that we can get An operator in front with this

52
00:02:37,960 --> 00:02:40,850
rule. There actually are rules in Python that allow us

53
00:02:40,850 --> 00:02:44,150
to have an expression go to operator expression. But we

54
00:02:44,150 --> 00:02:47,690
have two expressions here. There's a three space three. If

55
00:02:47,690 --> 00:02:50,330
it was just the number 33, this would actually be

56
00:02:50,330 --> 00:02:53,810
a valid Python expression. Not something that we can produce

57
00:02:53,810 --> 00:02:57,020
with this grammar though. And the first one is valid It's

58
00:02:57,020 --> 00:02:59,770
not sensible, or necessary, to have er, nested

59
00:02:59,770 --> 00:03:02,810
parentheses like this, but we could always keep using

60
00:03:02,810 --> 00:03:05,520
this rule, so we can derive that expression starting

61
00:03:05,520 --> 00:03:08,740
from expression using the last rule with the parens,

62
00:03:08,740 --> 00:03:10,896
and we're going to end up with paren,

63
00:03:10,896 --> 00:03:15,540
expression, paren, close paren. We can use that rule

64
00:03:15,540 --> 00:03:19,010
again, we're going to replace the middle expression with expression

65
00:03:19,010 --> 00:03:22,990
paren expression. Replacing this expression with the last rule.

66
00:03:22,990 --> 00:03:27,640
That'll give us expression surrounded by parens, and we still have

67
00:03:27,640 --> 00:03:30,910
the two outer parens on each side. So we can have

68
00:03:30,910 --> 00:03:34,020
as many necessary parens as we want. It's not necessary, it

69
00:03:34,020 --> 00:03:35,960
doesn't make a lot of sense. We would never actually want

70
00:03:35,960 --> 00:03:38,530
to write code that way. But it's still a valid Python

71
00:03:38,530 --> 00:03:42,660
expression. So recursive grammar rules like these are very powerful. We

72
00:03:42,660 --> 00:03:45,850
only need a few simple rules to describe a big language,

73
00:03:45,850 --> 00:03:48,120
and the whole Python language that we're going to learn in

74
00:03:48,120 --> 00:03:50,340
this course can be described this way.

75
00:03:50,340 --> 00:03:52,230
We're not going to describe the entire Python language

76
00:03:52,230 --> 00:03:55,630
this way, but what I hope is that you have a good sense for how grammars

77
00:03:55,630 --> 00:03:57,370
work, and you can see that, even as

78
00:03:57,370 --> 00:03:59,950
we introduce constructs somewhat more informally as we

79
00:03:59,950 --> 00:04:02,070
go on, that they could be broken down

80
00:04:02,070 --> 00:04:03,780
into these kinds of formal or placement rules.
