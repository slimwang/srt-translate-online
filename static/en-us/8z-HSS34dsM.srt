1
00:00:00,540 --> 00:00:01,780
In most programming languages,

2
00:00:01,780 --> 00:00:04,250
you have to declare a function
before you can call it.

3
00:00:04,250 --> 00:00:07,459
Basically the idea is that code's
read from top to bottom, so

4
00:00:07,459 --> 00:00:11,060
there's no way that we should be able
to call this findAverage function

5
00:00:11,060 --> 00:00:12,690
if it hasn't even been declared yet.

6
00:00:12,689 --> 00:00:16,864
Like literally, how can we call
findAverage when the function

7
00:00:16,864 --> 00:00:20,674
is being declared lower than when
the call's happening in the code.

8
00:00:20,675 --> 00:00:22,464
So this shouldn't work, right?

9
00:00:22,464 --> 00:00:24,554
Well, actually it does and

10
00:00:24,554 --> 00:00:28,489
this is because of one really corky
feature in JavaScript called hoisting.

11
00:00:28,489 --> 00:00:31,239
And it has to do with how JavaScript
code is being interpreted.

12
00:00:31,239 --> 00:00:34,750
Basically before any code is executed,

13
00:00:34,750 --> 00:00:39,640
all function declarations are hoisted
to the top of the current scope.

14
00:00:39,640 --> 00:00:41,189
I know, this is weird, right?

15
00:00:41,189 --> 00:00:44,750
Now just to be clear, the code you
write is actually not going to change.

16
00:00:44,750 --> 00:00:47,640
The code's still going to look
exactly how you wrote it.

17
00:00:47,640 --> 00:00:50,000
Its just when the code is being
interpreted when the function of

18
00:00:50,000 --> 00:00:52,119
declaration is actually
getting hoisted to the top.

19
00:00:52,119 --> 00:00:55,879
So still going to look the same and this
function is actually going to get called

20
00:00:55,880 --> 00:00:57,520
and its going to return
back the correct value.

21
00:00:58,600 --> 00:01:01,130
Hoisting also happens with
variable declarations,

22
00:01:01,130 --> 00:01:03,200
let's take a look at
this simple example.

23
00:01:03,200 --> 00:01:06,609
If we call the sayGreeting function
the way that it exists now,

24
00:01:06,609 --> 00:01:08,560
we're going to get back
a reference error and

25
00:01:08,560 --> 00:01:12,549
that's because the variable greeting has
not been defined or declared anywhere.

26
00:01:12,549 --> 00:01:15,322
How can we print out greeting
if it doesn't exist?

27
00:01:15,322 --> 00:01:18,188
To fix this error, we can declare
greeting pretty much anywhere in

28
00:01:18,188 --> 00:01:19,724
the function because ultimately,

29
00:01:19,724 --> 00:01:23,479
we know that it's going to get hoisted
to the top of the function scope.

30
00:01:23,480 --> 00:01:26,504
For example, if I was to
declare greeting on line three,

31
00:01:26,504 --> 00:01:29,528
we know that ultimately when
the code gets interpreted,

32
00:01:29,528 --> 00:01:32,246
it's going to get hoisted
to the top of the function.

33
00:01:32,246 --> 00:01:36,123
Of course, when this code is ran it
would still look the exact same way as I

34
00:01:36,123 --> 00:01:39,319
wrote it, but now this time
it's printing out undefined.

35
00:01:40,319 --> 00:01:42,889
So I guess that makes sense because

36
00:01:42,890 --> 00:01:45,799
we haven't really given
greeting a value yet.

37
00:01:45,799 --> 00:01:47,969
So let's try to give it a value and
then see what happens.

38
00:01:47,969 --> 00:01:52,453
So instead of just greeting by itself,
let's assign the greeting and

39
00:01:52,453 --> 00:01:54,179
the string hello.

40
00:01:54,180 --> 00:01:56,137
Okay, so we get it undefined again.

41
00:01:56,137 --> 00:01:58,780
This is actually a bug
because of hoisting.

42
00:01:58,780 --> 00:02:03,230
The variable greeting is getting hoisted
to the top of the function scope, but

43
00:02:03,230 --> 00:02:06,469
the assignment is staying
exactly where it is.

44
00:02:06,469 --> 00:02:09,405
Because the variable declaration
is getting hosted to the top,

45
00:02:09,405 --> 00:02:11,918
gets declared here but
the value's still undefined.

46
00:02:11,918 --> 00:02:15,719
And then when we print it,
it's giving us back undefined.

47
00:02:15,719 --> 00:02:20,090
So the moral of the story here is that
to avoid bugs like this JavaScript

48
00:02:20,090 --> 00:02:23,189
programmers usually declare functions
at the top of their scripts, and

49
00:02:23,189 --> 00:02:25,240
variables at the top of their functions.

50
00:02:25,240 --> 00:02:28,150
That way the way the code looks,
and the way the code behaves,

51
00:02:28,150 --> 00:02:29,330
are consistent with each other.

