1
00:00:01,020 --> 00:00:03,400
So this was a really tough question, and I'll admit I

2
00:00:03,400 --> 00:00:06,340
got it wrong twice myself in trying to answer it. But I'm

3
00:00:06,340 --> 00:00:08,640
pretty sure I know the correct answer now. Which is that

4
00:00:08,640 --> 00:00:13,150
none of these are actually equivalent to s.find t,i. If you didn't

5
00:00:13,150 --> 00:00:15,990
get that, that's okay. Two of em are pretty close, and

6
00:00:15,990 --> 00:00:18,580
the two that are pretty close are the first and the third.

7
00:00:18,580 --> 00:00:21,350
But none of them are exactly correct and let's go through

8
00:00:21,350 --> 00:00:26,580
an example to understand why. So let's suppose we started with s

9
00:00:26,580 --> 00:00:32,330
as udacity. Let's make

10
00:00:32,330 --> 00:00:38,110
t city and make i three.

11
00:00:38,110 --> 00:00:42,857
So if we do s.find t,i, what we're going to get starting

12
00:00:42,857 --> 00:00:48,008
from position i which is n, s looking for city, we're going to

13
00:00:48,008 --> 00:00:53,056
find it right there. The output of s.find

14
00:00:53,056 --> 00:00:57,120
t,i with these variables is going to be three. So

15
00:00:57,120 --> 00:00:59,600
it, search is starting from position three, but it's still

16
00:00:59,600 --> 00:01:01,700
going to give us the output where that's position three. It

17
00:01:01,700 --> 00:01:04,090
gives us output in terms of the positions in the

18
00:01:04,090 --> 00:01:09,190
original string, s. So the first one, si:, where i

19
00:01:09,190 --> 00:01:12,940
is three, is going to be this string. So when we

20
00:01:12,940 --> 00:01:15,620
do the find where that's the string, we find city

21
00:01:15,620 --> 00:01:18,220
at position zero, and the result of this is zero.

22
00:01:18,220 --> 00:01:20,780
That's not the same as the result we expect

23
00:01:20,780 --> 00:01:24,570
which is three. The second one doesn't actually make

24
00:01:24,570 --> 00:01:29,180
any sense. So here s.find evaluates to a number,

25
00:01:29,180 --> 00:01:31,890
and then we're trying to index from a number, that

26
00:01:31,890 --> 00:01:34,160
doesn't make any sense. We can only index from

27
00:01:34,160 --> 00:01:37,590
a string, select a sub-sequence of characters, there's no way

28
00:01:37,590 --> 00:01:40,120
to select a sub-sequence of characters from a number.

29
00:01:40,120 --> 00:01:43,300
So this is invalid, definitely doesn't produce the same output

30
00:01:43,300 --> 00:01:49,100
as s.find t,i. The third one's the trickiest one. This is one

31
00:01:49,100 --> 00:01:53,590
that I originally thought would be equal and for this particular case it is. In

32
00:01:53,590 --> 00:01:58,530
this case when we do s 3 colon.find t well

33
00:01:58,530 --> 00:02:00,730
that's going to produce the result zero we that

34
00:02:00,730 --> 00:02:02,925
we saw before. And then when we add i to

35
00:02:02,925 --> 00:02:05,120
it; we're going to get the value three. So in

36
00:02:05,120 --> 00:02:08,350
cases where we find the string t, in s starting

37
00:02:08,350 --> 00:02:14,358
from position i; this will be equivalent. If we made t something else, so let's

38
00:02:14,358 --> 00:02:20,742
suppose we made t dog, well then what's going to happen is the result

39
00:02:20,742 --> 00:02:28,600
of s.find, t,i when t is dog, that result would be negative one. Find always

40
00:02:28,600 --> 00:02:33,606
returns negative one, when the string we're searching for is not found. In this

41
00:02:33,606 --> 00:02:36,246
case, we'd have negative one as the result for

42
00:02:36,246 --> 00:02:38,710
this, add i to it. That would give us the

43
00:02:38,710 --> 00:02:41,570
number two. That's not the same as negative one because

44
00:02:41,570 --> 00:02:44,790
this also is not equivalent. In cases where t is

45
00:02:44,790 --> 00:02:47,420
found, it is equivalent, but in cases where t is

46
00:02:47,420 --> 00:02:50,620
not found, it's not equivalent. The fourth one is also

47
00:02:50,620 --> 00:02:55,310
not equivalent. For the fourth one we're starting from selecting

48
00:02:55,310 --> 00:02:58,810
the sub-sequence of s, starting from position i. And we're

49
00:02:58,810 --> 00:03:04,070
looking for the string t where we sub-sequence from t starting from position i,

50
00:03:04,070 --> 00:03:08,960
this won't give us the same result as s.find t,i. So this was

51
00:03:08,960 --> 00:03:11,420
kind of a tricky question. You are not upset if you didn't get it

52
00:03:11,420 --> 00:03:16,746
right but the answer is none of these are actually equivalent to s.find t,i.
