1
00:00:00,000 --> 00:00:03,000
First we're going to look at a protocol that's not quite TLS.

2
00:00:03,000 --> 00:00:07,000
This'll give you a basic idea of how TLS works, but there is some vulnerability in the protocol,

3
00:00:07,000 --> 00:00:09,000
which we'll talk about fixing next.

4
00:00:09,000 --> 00:00:15,000
Here's our client, which is typically a web browser, and a our server, which is a web server.

5
00:00:15,000 --> 00:00:19,000
The first step in the protocol is the client connects to the server, sending a message "hello"

6
00:00:19,000 --> 00:00:21,000
--without the exclamation point.

7
00:00:21,000 --> 00:00:25,000
It also sends information about what ciphers it is able to use.

8
00:00:25,000 --> 00:00:28,000
Different versions of browsers will have different ciphers implemented.

9
00:00:28,000 --> 00:00:32,000
The server and the client need to agree on a particular server

10
00:00:32,000 --> 00:00:37,000
The client will also send a list of the ciphers and the hash functions that it has implemented.

11
00:00:37,000 --> 00:00:40,000
Different browsers will have different ciphers implemented.

12
00:00:40,000 --> 00:00:43,000
It's up to the client and server to agree on the one to use.

13
00:00:43,000 --> 00:00:47,000
In the second step, the server responds. That response includes several things.

14
00:00:47,000 --> 00:00:51,000
It will pick the cipher and the hash function to use.

15
00:00:51,000 --> 00:00:56,000
Those'll be selected from the list that the client sent based on the ones the server can use.

16
00:00:56,000 --> 00:00:59,000
It should pick the strongest ones that are acceptable to both.

17
00:00:59,000 --> 00:01:01,000
It also sends a certificate.

18
00:01:01,000 --> 00:01:06,000
What that certificate is is something that gives the public key of the server to the client

19
00:01:06,000 --> 00:01:08,000
in a way that the client can trust it.

20
00:01:08,000 --> 00:01:11,000
What's in the certificate is the domain, the name of the server,

21
00:01:11,000 --> 00:01:13,000
as well as its public key.

22
00:01:13,000 --> 00:01:17,000
There is some other information like expiration times--these certificates expire.

23
00:01:17,000 --> 00:01:22,000
The important thing about the certificate is that it's signed by a certificate authority.

24
00:01:22,000 --> 00:01:27,000
We'll talk more about certificates later, but the important thing the certificate does

25
00:01:27,000 --> 00:01:30,000
is give the client access to the servers public key

26
00:01:30,000 --> 00:01:33,000
in a way that the client can trust it.

27
00:01:33,000 --> 00:01:35,000
The next step is for the client to verify the certificate.

28
00:01:35,000 --> 00:01:40,000
Since the certificate is signed by the private key of some certificate authority,

29
00:01:40,000 --> 00:01:44,000
that means the client needs the corresponding public key to verify the signature.

30
00:01:44,000 --> 00:01:48,000
The client also extracts the public key from that certificate.

31
00:01:48,000 --> 00:01:51,000
The next thing the client will do is select a random number--

32
00:01:51,000 --> 00:01:55,000
some random value that will be used to generate the session key.

33
00:01:55,000 --> 00:01:59,000
In the third step the client wants to send back that random value to the server,

34
00:01:59,000 --> 00:02:01,000
but in a way that's secure.

35
00:02:01,000 --> 00:02:04,000
Let's make that a quiz to see if you can figure out how to do that.

36
00:02:04,000 --> 00:02:08,000
The question is how should the client securely send the random value to the server.

37
00:02:08,000 --> 99:59:59,999
Check the best answer from the list below.
