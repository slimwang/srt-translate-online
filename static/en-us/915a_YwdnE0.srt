1
00:00:00,490 --> 00:00:03,479
In theory you could take an output image and use gamma correction on it as a

2
00:00:03,479 --> 00:00:07,498
post process. I mentioned that there's a problem with trying to gamma correct

3
00:00:07,498 --> 00:00:11,476
if you have just eight bits per channel. Let's put a number on it, your job is

4
00:00:11,476 --> 00:00:15,173
to figure out that number. Say we walk through all possible channel levels,

5
00:00:15,173 --> 00:00:18,949
zero through 255 and gamma correct each value. Here's an example for an input

6
00:00:18,949 --> 00:00:22,500
of one. There are few steps to convert a channel. First, if you convert to

7
00:00:22,500 --> 00:00:26,380
floating point number by dividing by 255. Then use the gamma correction value

8
00:00:26,380 --> 00:00:31,218
to raise it to a power. Convert back the range zero through 255, by multiply by

9
00:00:31,218 --> 00:00:35,022
255. Then round the fraction to get the channel number. If the input is zero

10
00:00:35,022 --> 00:00:39,290
this converts to zero on output. No surprises there. With one we jumped up to a

11
00:00:39,290 --> 00:00:44,362
level of 21 on output. Level two jumps to 28. At these lower levels we have to

12
00:00:44,362 --> 00:00:47,134
boost the output considerably to get the equivalent gamma corrected value for

13
00:00:47,134 --> 00:00:51,905
display. Out of the first 29 output levels, zero through 28, we've used only

14
00:00:51,905 --> 00:00:57,346
three. Already there are 26 levels out of 255 we'll never use. On the low end,

15
00:00:57,346 --> 00:01:01,500
some levels are never used. On the high end, you can have the opposite. That a

16
00:01:01,500 --> 00:01:04,964
number of different input levels map to a single output level. The question to

17
00:01:04,964 --> 00:01:09,182
you is, how many unique output levels are there? I'm expecting an integer value

18
00:01:09,182 --> 00:01:13,256
and it's clearly less than 256. Use whatever means you like to figure out this

19
00:01:13,256 --> 00:01:16,810
answer, any programming language you like. This is an actual, real life

20
00:01:16,810 --> 00:01:20,810
programming assignment. I personally wrote a little JavaScript program. I used

21
00:01:20,810 --> 00:01:24,430
this bit of code to show me in the debug console, the answer it computed.
