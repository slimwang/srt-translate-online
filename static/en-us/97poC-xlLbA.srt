1
00:00:00,000 --> 00:00:04,000
What we have here is a Python encoding of the breadth-first search algorithm

2
00:00:04,000 --> 00:00:08,000
we've been talking about for finding shortest paths in these kind of graphs.

3
00:00:08,000 --> 00:00:13,000
In this particular case, there are some infrastructure in the beginning for reading the data

4
00:00:13,000 --> 00:00:16,000
for the comic book characters from a file.

5
00:00:16,000 --> 00:00:21,000
The one that we're using here is tens of thousands of lines long.

6
00:00:21,000 --> 00:00:23,000
So, it would be very awkward to put it directly into Python.

7
00:00:23,000 --> 00:00:27,000
A pretty simple code, we're just going to reading it and then making links into graph G.

8
00:00:27,000 --> 00:00:30,000
That graph is stored as marvelG.

9
00:00:30,000 --> 00:00:33,000
That's the graph of the comic book characters and the comic books.

10
00:00:33,000 --> 00:00:42,000
Then, we've got a subroutine called path (G, V₁,V₂) and what that does is it takes graph G, a start node,

11
00:00:42,000 --> 00:00:46,000
let's say a character in the comic book and an ending node in another character in the comic book

12
00:00:46,000 --> 00:00:48,000
and it tries t find the shortest path between them.

13
00:00:48,000 --> 00:00:51,000
In fact, it will, unless there isn't one.

14
00:00:51,000 --> 00:00:56,000
So, in this particular case, the code here is only going to tell us the length of the shortest path.

15
00:00:56,000 --> 00:01:01,000
It turns out that's a pretty straight forward thing to do, but it's not that hard to augment this

16
00:01:01,000 --> 00:01:05,000
to actually produce the path itself but let's just start of with the--the length.

17
00:01:05,000 --> 00:01:07,000
So, we create a data structure distance from the start

18
00:01:07,000 --> 00:01:12,000
which is going to map the nodes of the graph to how far away they are from (V₁).

19
00:01:12,000 --> 00:01:17,000
We have an open_list, just like we've been taking about and it's initialized to just the very first node,

20
00:01:17,000 --> 00:01:21,000
and the distance from the start from that node is zero because it is the node itself.

21
00:01:21,000 --> 00:01:26,000
Now, we're going to proceed by checking to see whether the open_list is empty.

22
00:01:26,000 --> 00:01:29,000
If it's not, then we go into loop here that says--

23
00:01:29,000 --> 00:01:35,000
first we're going to pull off the very beginning element of the open_list, and call that current.

24
00:01:35,000 --> 00:01:39,000
And then we're going to delete the very first element to the open_list, so that it's gone.

25
00:01:39,000 --> 00:01:43,000
We are going to talk a little bit later about how to try to make this operation as efficient as possible.

26
00:01:43,000 --> 00:01:45,000
But for now, this is--this is okay.

27
00:01:45,000 --> 00:01:50,000
It's going to be fast enough, so it takes that off the open list and now what we're supposed to do,

28
00:01:50,000 --> 00:01:54,000
we loop through the neighbors, so here we have a statement that says,

29
00:01:54,000 --> 00:01:57,000
for each neighbor in the list of neighbors (current),

30
00:01:57,000 --> 00:01:59,000
What is it going to do? It's going to check to see

31
00:01:59,000 --> 00:02:02,000
whether or not that neighbor's been assigned the distance so far.

32
00:02:02,000 --> 00:02:08,000
If it has not been assigned a distance, is because it's not been visited. It's not been marked.

33
00:02:08,000 --> 00:02:12,000
And if that's the case, then what we're going to do is we're going to

34
00:02:12,000 --> 00:02:16,000
calculate the distance from the start for that node or what is it going to be?

35
00:02:16,000 --> 00:02:19,000
The neighbor--the one--the node--the new node that we just discovered

36
00:02:19,000 --> 00:02:24,000
is just one step farther from the start than the node that we're expanding.

37
00:02:24,000 --> 00:02:28,000
So, we take the distance from the start to where we are now.

38
00:02:28,000 --> 00:02:31,000
Add one to it and that's the start to this neighbor that we're considering.

39
00:02:31,000 --> 00:02:36,000
So this is really the key step. It is finding the distance of the shortest path.

40
00:02:36,000 --> 00:02:38,000
Once that distance has been assigned, we check

41
00:02:38,000 --> 00:02:43,000
"Hey, was that the neighbor the one we're actually searching for?" If it is, we can just be done.

42
00:02:43,000 --> 00:02:46,000
We can just return that distance for that node;

43
00:02:46,000 --> 00:02:48,000
otherwise, we have to proceed and we take that neighbor

44
00:02:48,000 --> 00:02:52,000
and we just stick it on the end bar open_list, so that we'll catch up with it later.

45
00:02:52,000 --> 00:02:55,000
And then we're back into the loop and it's just going to continue pulling things off the open list.

46
00:02:55,000 --> 00:03:00,000
assigning the distances until finally we discover the node they were looking for,

47
00:03:00,000 --> 00:03:03,000
or if the open list eventually goes completely empty.

48
00:03:03,000 --> 00:03:06,000
All this falls all the way through the while loop is done

49
00:03:06,000 --> 00:03:11,000
and it returns false, so instead of actually returning a distance, it's going to return false meaning

50
00:03:11,000 --> 00:03:13,000
I wasn't able to find a path.

51
00:03:13,000 --> 00:03:19,000
This could also be infinity which indicates that there is no bound on the length

52
00:03:19,000 --> 00:03:21,000
of the shortest path--it's infinitely large.

53
00:03:21,000 --> 00:03:24,000
This particular case I'm running it with finding the path

54
00:03:24,000 --> 00:03:29,000
from a comic book character called A to one called ZZZAX.

55
00:03:29,000 --> 00:03:32,000
I figured that was pretty comprehensive if we go from A to ZZZAX.

56
00:03:32,000 --> 00:03:37,000
And it's had three or four step chain that you get when you do this with the data that we've got.

57
00:03:37,000 --> 00:03:39,000
All right, so let's go through the changes we need to make

58
00:03:39,000 --> 00:03:42,000
to actually return the path instead of the distance.

59
00:03:42,000 --> 00:03:46,000
What I'm going to do is actually ??? this variable distance from the start.

60
00:03:46,000 --> 00:03:48,000
It's not going to be a distance anymore.

61
00:03:48,000 --> 00:03:51,000
It's actually going to be the path, so instead of it starting at zero,

62
00:03:51,000 --> 00:04:00,000
it starts as just a list consisting of (V₁) by itself and the only other change that we need to do is

63
00:04:00,000 --> 00:04:07,000
when we extend it because we've discovered a path from the beginning through a current,

64
00:04:07,000 --> 00:04:11,000
now goes to neighbor, all we need to do is that.

65
00:04:11,000 --> 00:04:16,000
It says, this--this now being a list, when we add another list to it,

66
00:04:16,000 --> 00:04:21,000
it's just depending to the--to the end of it, which is what we want in this case.

67
00:04:21,000 --> 00:04:23,000
It might not be the most efficient way to do it but

68
00:04:23,000 --> 00:04:26,000
things don't get very large, and it actually works pretty well.
