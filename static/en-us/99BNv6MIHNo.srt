1
00:00:00,000 --> 00:00:04,442
It's important to be able to reason about this the way that I just described to you, right?

2
00:00:04,442 --> 00:00:05,776
So we sort of walked our way through.

3
00:00:05,776 --> 00:00:10,847
We figured out what kind of bandwidth we were getting and what percentage of theoretical peak that was.

4
00:00:10,847 --> 00:00:16,337
We saw that it was really quite low and we said, why would we be getting low bandwidth-to-global memory?

5
00:00:16,337 --> 00:00:19,386
Well, the first thing you always look at there is coalescing.

6
00:00:19,386 --> 00:00:22,226
And then we inspected the code and convinced ourselves that, yes,

7
00:00:22,226 --> 00:00:25,262
there's bad coalescing happening when we write to the output matrix.

8
00:00:25,262 --> 00:00:31,204
But, I also want to make the point that you don't have to do this from scratch every time.

9
00:00:31,204 --> 00:00:35,405
Right? Doing all these calculations is a little bit like rubbing two sticks together to start a fire;

10
00:00:35,405 --> 00:00:38,240
it's good to know how, but there are tools to help you do this.

11
00:00:38,240 --> 00:00:41,176
The tool that we're going to be using is called nSight.

12
00:00:41,176 --> 00:00:44,590
This is an Nvidia product, there's also third-party products.

13
00:00:44,590 --> 00:00:47,749
Maybe I'll give some links to those in supplementary material.

14
00:00:47,749 --> 00:00:54,155
And if you're using Linux or a Mac like I'm using, then you'll be using the nSight Eclipse edition.

15
00:00:54,155 --> 00:00:58,661
If you were using Windows, you'd by using nSight Visual Studio edition.

16
00:00:58,661 --> 00:01:04,099
These are integrated debuggers and profilers, they're full-blown development environments.

17
00:01:04,099 --> 00:01:09,246
The part that we're going to use is called the Nvidia Visual Profiler, or NVPP.

18
00:01:09,246 --> 00:01:11,340
Let's fire that up now.
