1
00:00:00,330 --> 00:00:01,390
So here's what we're going to do.

2
00:00:01,390 --> 00:00:04,900
First thing we're going to note is
that if each of these things could be

3
00:00:04,900 --> 00:00:09,820
represented by a bag of vectors max over
a bag of vectors then all the other ones

4
00:00:09,820 --> 00:00:13,870
can disappear represented as
max over a bag of vectors.

5
00:00:13,870 --> 00:00:17,820
So the easiest one is the very first
one the first one says that the value

6
00:00:17,820 --> 00:00:21,960
function at time sub t is the max over
actions of some other kind of thing.

7
00:00:21,960 --> 00:00:27,470
If this is represented as the max of a
bunch of dot products over belief states

8
00:00:27,470 --> 00:00:30,840
then think about what happens if
you just take all the vectors for

9
00:00:30,840 --> 00:00:33,560
all the different actions and
throw them into one big bag.

10
00:00:33,560 --> 00:00:37,720
So imagine that we've got one set of
vectors that represents a value function

11
00:00:37,720 --> 00:00:41,170
And then we have another set of vectors
this is for one particular action

12
00:00:41,170 --> 00:00:43,700
then we have a set of vectors that
represent the value function for

13
00:00:43,700 --> 00:00:45,060
different action called a2.

14
00:00:45,060 --> 00:00:50,030
So the thing to note is that the max

15
00:00:50,030 --> 00:00:54,888
over the bag of vectors this upper
surface Is actually the right thing.

16
00:00:54,888 --> 00:00:59,152
That if a1 gives the highest answer
in one case then we get that.

17
00:00:59,152 --> 00:01:01,860
If a2 gives a higher answer
in another case we get that.

18
00:01:01,860 --> 00:01:05,820
We can just pull all the vectors
together so this is just a union

19
00:01:05,820 --> 00:01:08,610
over all actions of the bag of
vectors for each of those actions.

20
00:01:09,720 --> 00:01:15,250
This is a way of writing max as at
the operation over sets of vectors.

21
00:01:15,250 --> 00:01:17,180
>> Sure I believe that,
that all makes sense.

22
00:01:17,180 --> 00:01:21,670
>> The next piece is that the value
function for an action a timestamp t for

23
00:01:21,670 --> 00:01:26,210
a belief state b we said that
it was the sum over observations

24
00:01:26,210 --> 00:01:29,690
of some particular vector that
we get for that observation.

25
00:01:29,690 --> 00:01:35,670
If these can be represented using
bags of vectors then this sum, over

26
00:01:35,670 --> 00:01:39,390
observations, can also be represented
using operations over bags of vectors.

27
00:01:39,390 --> 00:01:41,400
And in particular what we
wound up having to do,

28
00:01:41,400 --> 00:01:45,260
is take those bags of vectors and
compute what I like to call across sum.

29
00:01:45,260 --> 00:01:48,650
It's basically, the sum where we
choose for each of the observations,

30
00:01:48,650 --> 00:01:51,260
we choose a vector and
then we add those factors together.

31
00:01:51,260 --> 00:01:53,890
It ends up producing
the same effect as this sum.

32
00:01:53,890 --> 00:01:57,370
So what we're doing here is now
given a set of vectors one set for

33
00:01:57,370 --> 00:01:59,570
each action observation pair.

34
00:01:59,570 --> 00:02:03,700
We're going to create a bag of vectors
just for an action by taking this

35
00:02:03,700 --> 00:02:06,720
sort of cross sum, summing out
all the different observations.

36
00:02:06,720 --> 00:02:09,690
Because that's really what we're doing,
we're summing out over the observations.

37
00:02:09,690 --> 00:02:11,970
>> So that's just really advance what
we're writing which is you wrote.

38
00:02:11,970 --> 00:02:15,330
>> Yeah but again it's just
letting us go from this function v

39
00:02:15,330 --> 00:02:20,170
which is over an infinite state space
b to just a finite set of vectors.

40
00:02:20,170 --> 00:02:23,380
We have a set of vectors and we generate
from that a new finite set of vectors.

41
00:02:23,380 --> 00:02:26,540
So in this case the number of vectors
this first step, the number of vectors

42
00:02:26,540 --> 00:02:32,300
is the sum of the size of the sum number
of the vectors In all the sets gamma at.

43
00:02:32,300 --> 00:02:36,380
Here were actually multiplying,
so it's the product of the sizes

44
00:02:36,380 --> 00:02:39,500
of all the sets which is finite but
it could get actually quite big.

45
00:02:39,500 --> 00:02:42,420
>> Given what you say that we should
say out loud that you're making

46
00:02:42,420 --> 00:02:45,190
assumptions that everything else is
finite to like the number of actions.

47
00:02:46,540 --> 00:02:47,400
Sure.
That was

48
00:02:47,400 --> 00:02:50,510
already built into the definition of
MDP's that we were talking about them.

49
00:02:50,510 --> 00:02:51,060
>> Fair enough.

50
00:02:51,060 --> 00:02:53,990
>> But yeah it's probably worth
repeating that certainly if the number

51
00:02:53,990 --> 00:02:56,600
of actions is infinite
then this is problematic.

52
00:02:56,600 --> 00:02:59,160
This union is problematic.

53
00:02:59,160 --> 00:03:02,420
And if the number of observations
is infinite then this cross sum is

54
00:03:02,420 --> 00:03:03,520
problematic.

55
00:03:03,520 --> 00:03:04,900
So all but, yeah.

56
00:03:04,900 --> 00:03:09,090
Finite state space, finite action space,
finite observations space.

57
00:03:09,090 --> 00:03:10,420
>> Okay, so I'm getting the idea.

58
00:03:10,420 --> 00:03:13,700
Basically if you can start
out with something finite

59
00:03:13,700 --> 00:03:15,740
at every step of the way
you might grow but

60
00:03:15,740 --> 00:03:19,130
you're never going to grow
an infinite amount in a single step.

61
00:03:19,130 --> 00:03:22,930
And therefore, so long as the number
of steps is finite, or bounded or

62
00:03:22,930 --> 00:03:29,510
somewhere like that you will maintain
a finite number things in your bag.

63
00:03:29,510 --> 00:03:31,170
That's kind of what you're
doing that by step.

64
00:03:31,170 --> 00:03:32,900
Okay.
>> That's what we're going and and

65
00:03:32,900 --> 00:03:36,270
yeah and if it feels like there could
be a lot of vectors this is true

66
00:03:36,270 --> 00:03:39,660
it actually can grow doubly
exponentially with t.

67
00:03:39,660 --> 00:03:42,120
The number of iterations of
value iteration we're doing.

68
00:03:42,120 --> 00:03:45,080
But for now we're pretending
that's not a problem.

69
00:03:45,080 --> 00:03:48,681
>> Yeah, I mean look exponential is bad
unless you're comparing it to infinite.

70
00:03:48,681 --> 00:03:50,704
>> [LAUGH] That's right, that's right.

71
00:03:50,704 --> 00:03:53,646
We set things up so
that exponential's actually awesome.

72
00:03:53,646 --> 00:03:54,749
>> Yeah, because it's finite.
