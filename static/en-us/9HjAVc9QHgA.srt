1
00:00:00,390 --> 00:00:05,510
So once, these locksense flags have been flipped, then all of the processors

2
00:00:05,510 --> 00:00:10,280
that have been waiting on these locksense as respective nodes, they're going

3
00:00:10,280 --> 00:00:15,069
to be released and everybody is now awake. So the tree barrier is a, a fairly

4
00:00:15,069 --> 00:00:20,740
intuitive algorithm that builds on the simple centralized

5
00:00:20,740 --> 00:00:26,570
sense reversal barrier except that it breaks up this And

6
00:00:26,570 --> 00:00:30,730
processes into K-Sized groups, so that they can

7
00:00:30,730 --> 00:00:35,130
all do spinning on a less contentious set

8
00:00:35,130 --> 00:00:37,818
of shared variables. So that's good, that is

9
00:00:37,818 --> 00:00:40,570
a, it's a recursive algorithm that builds on

10
00:00:40,570 --> 00:00:44,830
the centralized sensor [UNKNOWN] algorithm, and allows scaling

11
00:00:44,830 --> 00:00:46,970
up to a large number of processes. Because

12
00:00:46,970 --> 00:00:51,530
the amount of shading is limited to k, and so long as the k is small,

13
00:00:51,530 --> 00:00:54,060
like two or four, then the amount of contention

14
00:00:54,060 --> 00:00:57,310
for shared variables is limited to, to that number.

15
00:00:57,310 --> 00:00:59,630
So that's, those are all good things about that,

16
00:00:59,630 --> 00:01:02,490
but there are lots of problems as well. The first

17
00:01:02,490 --> 00:01:04,980
problem that I want you to notice is that

18
00:01:04,980 --> 00:01:10,130
the spin location is not statically determined for each processor.

19
00:01:10,130 --> 00:01:14,050
So for instance, if you take this particular execution

20
00:01:14,050 --> 00:01:16,710
that I've shown you in this picture, P0 happens to

21
00:01:16,710 --> 00:01:19,740
arrive later than P1. So P1 is the first

22
00:01:19,740 --> 00:01:22,540
to arrive here and so when P1 arrived here, it

23
00:01:22,540 --> 00:01:25,060
decremented count and it realized that oh, the count

24
00:01:25,060 --> 00:01:27,850
is not zero, I'm going to spend here. And P0 arrived

25
00:01:27,850 --> 00:01:30,800
later. And that's why it went up to the

26
00:01:30,800 --> 00:01:34,410
next level. And, and it is spinning on this locksense

27
00:01:34,410 --> 00:01:37,270
variable over here. So, in another execution of the same

28
00:01:37,270 --> 00:01:41,870
program, it is possible that P0 arrives first. If P0

29
00:01:41,870 --> 00:01:46,200
arrives first, then it'll spin on its locksense variable

30
00:01:46,200 --> 00:01:48,850
that is in this data structure. And p one

31
00:01:48,850 --> 00:01:51,110
will be the second guy to arrive, and therefore,

32
00:01:51,110 --> 00:01:52,920
he'll be the guy that will move up. And

33
00:01:52,920 --> 00:01:54,770
he'll be the guy that will be spinning on

34
00:01:54,770 --> 00:01:58,740
this locksense flag. So, the locksense flag that a

35
00:01:58,740 --> 00:02:02,770
particular processor is going to spin on, is not

36
00:02:02,770 --> 00:02:07,370
statically detemined. But it is dynamically determined depending on

37
00:02:07,370 --> 00:02:10,229
the arrival pattern of all these processes at a

38
00:02:10,229 --> 00:02:12,840
barrier. And the arrival pattern, obviously, is going to be

39
00:02:12,840 --> 00:02:15,860
different for different runs of the program. Since it

40
00:02:15,860 --> 00:02:19,360
depends on the amount of code that is getting executed

41
00:02:19,360 --> 00:02:22,450
on each one of these processors. And and other

42
00:02:22,450 --> 00:02:25,812
variables such as how busy the processor is and so

43
00:02:25,812 --> 00:02:29,008
on. And the second source of problem, is that

44
00:02:29,008 --> 00:02:32,810
the airiness of the tree determines the amount of contention

45
00:02:32,810 --> 00:02:34,790
for shared variables. I've mentioned that, you know, here it

46
00:02:34,790 --> 00:02:38,310
is show, shown with two, two processors. But if you

47
00:02:38,310 --> 00:02:40,650
increase the airiness of the tree to be key to

48
00:02:40,650 --> 00:02:43,750
be something more than to maybe four or eight or something

49
00:02:43,750 --> 00:02:47,700
like that. And if you have a large-scale multiprocessor with

50
00:02:48,770 --> 00:02:51,680
with 1000 processors the editors of the tree may be much

51
00:02:51,680 --> 00:02:54,270
more than 2, and in that case, the mode of

52
00:02:54,270 --> 00:02:58,280
contention for said data structures is, is going be significant and

53
00:02:58,280 --> 00:03:02,250
that can result in more contention on the network

54
00:03:02,250 --> 00:03:05,920
as well. The other issue with this Tree Barrier

55
00:03:05,920 --> 00:03:09,610
is that it depends on whether our multiprocessor that

56
00:03:09,610 --> 00:03:12,460
we are executing this algorithm on is cache coherent

57
00:03:12,460 --> 00:03:14,510
or not cache coherent. If it is cache coherent

58
00:03:14,510 --> 00:03:17,730
multiprocessor, then, you know, the spin, even though it's

59
00:03:17,730 --> 00:03:20,640
on a particular variable, it could be encached in

60
00:03:20,640 --> 00:03:23,430
a private cache, and therefore, the cache coherent hardware

61
00:03:23,430 --> 00:03:29,030
will indicate when the spin variable changes value. But if it's a non

62
00:03:29,030 --> 00:03:33,540
cache coherent, multiprocessor, the fact the spin

63
00:03:33,540 --> 00:03:37,000
variable that we have to associate with

64
00:03:37,000 --> 00:03:39,040
a particular processor is not static, but

65
00:03:39,040 --> 00:03:42,650
dynamic. Means that the spin may actually

66
00:03:42,650 --> 00:03:49,190
be happening for P0 on a remote memory. Remember I mentioned to you that

67
00:03:49,190 --> 00:03:50,920
one of the styles of architecture is a

68
00:03:50,920 --> 00:03:54,620
distributive shared memory architecture? Sometimes the distributive shared

69
00:03:54,620 --> 00:03:58,480
memory architecture is also called a non-uniform memory

70
00:03:58,480 --> 00:04:02,210
access architecture, or NUMA And the reason it is

71
00:04:02,210 --> 00:04:06,230
called numer architecture is because the access to

72
00:04:06,230 --> 00:04:08,900
local memory for a particular processor is going to

73
00:04:08,900 --> 00:04:11,412
be faster than the processor's access to a

74
00:04:11,412 --> 00:04:14,950
remote memory. And if you don't have cache coherence,

75
00:04:14,950 --> 00:04:19,660
then the spinning that has to be done, has to be done on a remote memory, and

76
00:04:19,660 --> 00:04:23,690
that goes through the network. And so static association

77
00:04:23,690 --> 00:04:26,820
of the spin location of the processor is very,

78
00:04:26,820 --> 00:04:31,220
very crucial if it's a non-cache-coherent shared memory

79
00:04:31,220 --> 00:04:33,940
machine. So the next algorithm that I'm going to

80
00:04:33,940 --> 00:04:36,930
describe to you is due to the authors of

81
00:04:36,930 --> 00:04:39,950
the paper that we are reviewing in this lesson,

82
00:04:39,950 --> 00:04:45,420
which is [UNKNOWN] and Scott, and for this reason, that algorithm is

83
00:04:45,420 --> 00:04:51,240
going to be called MCS barrier. It's also a tree barrier but you'll see that

84
00:04:51,240 --> 00:04:56,920
in the MCS algorithm, the spin location is statically determined as opposed to

85
00:04:56,920 --> 00:05:02,270
the dynamic situation that you have in the hierarchy of the tree barrier here.
