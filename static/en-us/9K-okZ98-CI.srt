1
00:00:00,560 --> 00:00:02,650
When we put an app on
the Google Play store.

2
00:00:02,650 --> 00:00:04,980
We'll have a whole range of users.

3
00:00:04,980 --> 00:00:08,770
It's hard to anticipate, what type of
device our app will be running on.

4
00:00:08,770 --> 00:00:13,220
Maybe a phone or a tablet, maybe an
older version of the Android platform,

5
00:00:13,220 --> 00:00:15,270
or maybe a different language
than what we're using.

6
00:00:16,340 --> 00:00:19,600
There are many best practices that you
can follow when building your app.

7
00:00:19,600 --> 00:00:22,150
To make it work well for
all these types of users.

8
00:00:23,220 --> 00:00:26,240
One best practice,
is to localize your app.

9
00:00:26,240 --> 00:00:29,430
There's a handy localization
checklist that you can refer to.

10
00:00:29,430 --> 00:00:32,540
Localization means, adapting your
app to different locales else.

11
00:00:32,540 --> 00:00:35,720
Meaning language and country
combinations to make it a positive

12
00:00:35,720 --> 00:00:38,640
user experience for all types of users.

13
00:00:38,640 --> 00:00:42,060
At the surface level, this can have
an impact on the design of your app,

14
00:00:42,060 --> 00:00:44,210
as well, as the texturing
that appear in your app.

15
00:00:45,550 --> 00:00:47,440
For now, we're going to focus
on how we can make your

16
00:00:47,440 --> 00:00:48,610
app support different languages.

17
00:00:49,710 --> 00:00:53,580
First, let's look at the device
experience from a user's perspective.

18
00:00:53,580 --> 00:00:57,170
If I prefer to use a different language,
I can go into the Settings app and

19
00:00:57,170 --> 00:00:59,060
then tap on the Language
an Input setting.

20
00:01:00,410 --> 00:01:01,820
If I tap on Language,

21
00:01:01,820 --> 00:01:04,830
then I see the whole list of languages
that are supported on Android.

22
00:01:05,890 --> 00:01:08,750
It includes character based
language,s like Chinese and

23
00:01:08,750 --> 00:01:10,160
right to left languages like Arabic.

24
00:01:11,430 --> 00:01:14,050
I'm going to change
the language to Spanish, and

25
00:01:14,050 --> 00:01:17,930
just like that all the text
is now showing up in Spanish.

26
00:01:17,930 --> 00:01:19,550
You can see this across
the whole Settings app.

27
00:01:20,650 --> 00:01:23,710
If you check the other apps on
the device those will appear in Spanish,

28
00:01:23,710 --> 00:01:26,540
if the developer chose to
support that language.

29
00:01:26,540 --> 00:01:29,020
However, when you open
up our Just Java app,

30
00:01:29,020 --> 00:01:31,800
it's a jarring experience
because everything in this

31
00:01:31,800 --> 00:01:35,950
app is still in English, while the other
apps in the device are in Spanish.

32
00:01:35,950 --> 00:01:39,090
So how do we make our
app support Spanish?

33
00:01:39,090 --> 00:01:43,130
So far, we know that our app can
contain Java files and Resources.

34
00:01:43,130 --> 00:01:46,820
We can provide default resources for our
app, but we can also provide alternate

35
00:01:46,820 --> 00:01:51,730
resources depending on the user's
physical device size, language setting,

36
00:01:51,730 --> 00:01:55,570
version of Android, or number of
pixels on the screen, to name a few.

37
00:01:55,570 --> 00:01:59,660
In our gesture shove app, we can
provide default text rings in English.

38
00:01:59,660 --> 00:02:02,880
We can provide alternate text
strings in other languages.

39
00:02:02,880 --> 00:02:06,210
So if someone has French as
a default language on their device,

40
00:02:06,210 --> 00:02:09,500
the system will automatically
load the French Translations

41
00:02:09,500 --> 00:02:12,100
instead of the default English ones.

42
00:02:12,100 --> 00:02:15,210
This article explains how you can
support multiple languages in an app.

43
00:02:16,630 --> 00:02:19,400
Scrolling down we can look
at the project structure.

44
00:02:20,680 --> 00:02:23,560
Within the res directory you can
add another subdirectory that

45
00:02:23,560 --> 00:02:26,330
contains resources for
a certain language.

46
00:02:26,330 --> 00:02:28,090
This is the default values folder and

47
00:02:28,090 --> 00:02:30,416
when choosing to put all
the English text strings here.

48
00:02:30,416 --> 00:02:34,988
In the values es folder,
we have all the Spanish text strings.

49
00:02:34,988 --> 00:02:40,130
In the values dash fr folder,
we have all the French translations.

50
00:02:40,130 --> 00:02:43,210
If the user chooses Spanish as
a language on their device,

51
00:02:43,210 --> 00:02:47,400
then the system will load these
resources from the values es folder.

52
00:02:47,400 --> 00:02:48,930
If this folder don't exist,

53
00:02:48,930 --> 00:02:52,290
then the system which is fallback
to the default resources.

54
00:02:52,290 --> 00:02:55,120
If the user has French as a default
language on their device,

55
00:02:55,120 --> 00:02:57,770
then the system will
load these resources.

56
00:02:57,770 --> 00:03:02,520
By the way es is the language code for
Spanish and fr is the language code for

57
00:03:02,520 --> 00:03:03,810
French.

58
00:03:03,810 --> 00:03:05,620
Android uses the ISO language codes.

59
00:03:05,620 --> 00:03:08,700
Here are some examples of languages.

60
00:03:08,700 --> 00:03:12,030
And the two letter language
codes that correspond with them.

61
00:03:12,030 --> 00:03:14,530
Let's go back to implementation details.

62
00:03:14,530 --> 00:03:17,800
In order for the system to switch out
different translations for the text in

63
00:03:17,800 --> 00:03:22,440
our app, we need to isolate all the text
from all the other logic in our app.

64
00:03:22,440 --> 00:03:26,580
We do this by creating a string
set XML file in the values folder.

65
00:03:26,580 --> 00:03:29,750
This is an XML resource file
that contains a list of

66
00:03:29,750 --> 00:03:33,420
all the string resources that
are visible to the user.

67
00:03:33,420 --> 00:03:36,100
This is the first time we're
seeing XML be used for

68
00:03:36,100 --> 00:03:38,440
something other than defining a layout.

69
00:03:38,440 --> 00:03:41,110
This is defining a list of resources.

70
00:03:41,110 --> 00:03:44,580
This is one string resource, and
the name that we used to refer to it

71
00:03:44,580 --> 00:03:48,530
is called Title and the value of
this string is my application.

72
00:03:49,740 --> 00:03:53,748
This is another string resource and
we referred to it using,

73
00:03:53,748 --> 00:03:57,950
hello underscore world and
the actual value is hello world.

74
00:03:57,950 --> 00:04:01,540
Then in the values es folder we can
create a strings dot xml file, but

75
00:04:01,540 --> 00:04:05,860
now these have the Spanish
translations of those same strings.

76
00:04:05,860 --> 00:04:10,180
This string resource still goes by
the name of title, like here, but

77
00:04:10,180 --> 00:04:14,750
now the value is the Spanish
translation of my application.

78
00:04:14,750 --> 00:04:15,827
The same applies for

79
00:04:15,827 --> 00:04:19,829
the hello world string resource with
the Spanish translation here now.

80
00:04:19,829 --> 00:04:23,815
And this is one more example of the
French translations of the strings dot

81
00:04:23,815 --> 00:04:24,410
xml file.

82
00:04:25,740 --> 00:04:28,150
Once our strings
are declared as resources,

83
00:04:28,150 --> 00:04:33,450
we can then refer to them in the XML or
Java using the appropriate syntax.

84
00:04:33,450 --> 00:04:36,480
In the Java code,
we refer to strings like this.

85
00:04:36,480 --> 00:04:39,925
In the Java code, this is how
we reference string resources.

86
00:04:39,925 --> 00:04:43,160
Firs,t we call the method getResources
to get the apps resources.

87
00:04:43,160 --> 00:04:49,160
And then, we call getString and we pass
as input the resource ID of the string.

88
00:04:50,280 --> 00:04:53,560
In this case, it's R dot string
dot hello underscore world.

89
00:04:53,560 --> 00:04:55,808
String is a resource type and

90
00:04:55,808 --> 00:04:58,680
hello underscore world is
the name of the resource.

91
00:04:58,680 --> 00:05:00,500
All of these on the right hand side,

92
00:05:00,500 --> 00:05:04,420
ends up becoming the hello world string
and it's stored in this string variable.

93
00:05:05,490 --> 00:05:09,830
This whole expression evaluates to hello
world and gets stored in this variable.

94
00:05:09,830 --> 00:05:11,030
By the way,

95
00:05:11,030 --> 00:05:15,270
this is similar to how we refer to
image resources in the Java code.

96
00:05:15,270 --> 00:05:20,478
You can add dot drawable dot photo or
whatever, the name of the image is.

97
00:05:20,478 --> 00:05:24,510
In the XML, we can refer to the strings
using the add string notation and

98
00:05:24,510 --> 00:05:25,936
then the name of the string resource.

99
00:05:25,936 --> 00:05:29,550
Now, the XML and
the Java code can stay the same,

100
00:05:29,550 --> 00:05:33,480
regardless of what language the user
has chosen on their device.

101
00:05:33,480 --> 00:05:37,130
We don't need a different layout file
that has the Spanish translation for

102
00:05:37,130 --> 00:05:38,370
the text attribute here.

103
00:05:39,460 --> 00:05:42,840
Android will load the correct
translations depending on the primary

104
00:05:42,840 --> 00:05:44,150
language selected on the device.

105
00:05:44,150 --> 00:05:45,880
It's pretty awesome?

106
00:05:47,170 --> 00:05:48,630
Let's walk through each of these steps,
so

107
00:05:48,630 --> 00:05:50,790
that you can see how to localize
the strings in your app.

108
00:05:51,880 --> 00:05:54,870
First, we want to extract all
the hardcoded strings from the XML and

109
00:05:54,870 --> 00:05:58,370
Java files into a default
strings dot xml file.

110
00:05:58,370 --> 00:05:59,670
Then we're going to update the XML and

111
00:05:59,670 --> 00:06:02,300
Java files to refer to
the appropriate string resources.

112
00:06:03,490 --> 00:06:05,450
And then, we're going to provide
alternate translations in

113
00:06:05,450 --> 00:06:06,070
another language.

114
00:06:06,070 --> 00:06:11,210
Let's start with step one:
interactivity main layout.

115
00:06:11,210 --> 00:06:15,190
Let's look at the strings that are
currently hard coded into our layout.

116
00:06:15,190 --> 00:06:18,990
We have a text view that displays
the word toppings as a header in the ui.

117
00:06:19,990 --> 00:06:22,960
Currently the English word is
hard coded into the layout, and

118
00:06:22,960 --> 00:06:26,330
we even get a warning from
Android studio talking about it.

119
00:06:26,330 --> 00:06:29,150
And it recommends that we use a at
string resource, so let's do that now.

120
00:06:30,390 --> 00:06:31,600
When I delete this and

121
00:06:31,600 --> 00:06:35,730
then type in @string/toppings
as the name of the resource.

122
00:06:35,730 --> 00:06:38,810
But now, I get an error saying that
Android Studio doesn't recognize

123
00:06:38,810 --> 00:06:39,950
this resource.

124
00:06:39,950 --> 00:06:43,060
I need to go into the strings
dot xml file and define it.

125
00:06:43,060 --> 00:06:45,340
Looking at the file
structure of our app,

126
00:06:45,340 --> 00:06:49,776
I can go into the res values folder and
look for the strings dot xml file.

127
00:06:49,776 --> 00:06:52,380
There are a couple of strings that
are already populated here and

128
00:06:52,380 --> 00:06:53,470
I'm going to add another one.

129
00:06:54,650 --> 00:06:58,300
I just declared a new string
resource with the name toppings and

130
00:06:58,300 --> 00:07:00,910
the value is the English word for
toppings.

131
00:07:00,910 --> 00:07:03,370
The name of the string resource
isn't going to change.

132
00:07:03,370 --> 00:07:07,330
But that chance added value will
change depending on the language.

133
00:07:07,330 --> 00:07:11,300
Notice, that I added a comment here to
describe where the string is being used

134
00:07:11,300 --> 00:07:11,822
in app.

135
00:07:11,822 --> 00:07:16,130
This will help the translator or the
translation service who's helping out,

136
00:07:16,130 --> 00:07:20,650
to understand the context in which
this string is being used in our app.

137
00:07:20,650 --> 00:07:22,910
We also specify a character limit.

138
00:07:22,910 --> 00:07:26,660
This is also helpful for the translator,
when space in the UI is limited.

139
00:07:27,960 --> 00:07:31,330
For example, the translator won't
pick a really long translation

140
00:07:31,330 --> 00:07:34,720
if they understand that we have
limited screen real estate.

141
00:07:34,720 --> 00:07:36,330
Going back to our layout file,

142
00:07:36,330 --> 00:07:39,370
now the error is gone because
the string resource exists.

143
00:07:40,420 --> 00:07:43,600
Now, how about hard coded
strings within our Java files?

144
00:07:44,730 --> 00:07:47,160
Let's take a look at our
create order summary method,

145
00:07:47,160 --> 00:07:49,650
which has a bunch of English
strings hard coded in.

146
00:07:50,710 --> 00:07:55,160
Let's start by moving the phrase,
thank you to the strings dot xml file.

147
00:07:55,160 --> 00:07:59,350
And, here's a new string resource
with the name thank underscore you.

148
00:07:59,350 --> 00:08:00,830
Then we can update the Java statement,

149
00:08:00,830 --> 00:08:04,460
to refer to the new string
resource by its name.

150
00:08:04,460 --> 00:08:07,220
We're using the getString method
within the activity class,

151
00:08:07,220 --> 00:08:11,160
which takes as input a string
resource and returns a string.

152
00:08:11,160 --> 00:08:13,590
The thank you string is then
added on to this whole message.

153
00:08:15,100 --> 00:08:19,650
In certain cases, you might not want
to translate part of a text string.

154
00:08:19,650 --> 00:08:22,260
For example,
you might want to create a string and

155
00:08:22,260 --> 00:08:25,040
then leave spots that can be
filled in later with variables.

156
00:08:26,400 --> 00:08:29,920
In that case, you want to mark off
the spots that shouldn't be translated

157
00:08:29,920 --> 00:08:31,150
with an x lift tag.

158
00:08:31,150 --> 00:08:35,080
It wouldn't make sense to
translate the user's name, but

159
00:08:35,080 --> 00:08:37,027
it would make sense to translate name.

160
00:08:38,225 --> 00:08:43,480
S,o when used properly this whole string
resource would show up as named colon

161
00:08:43,480 --> 00:08:45,090
and then the person's name like Amy.

162
00:08:46,160 --> 00:08:50,080
With the x lift tag,
you give it an id which is name and

163
00:08:50,080 --> 00:08:52,370
then you can specify
an example like Amy.

164
00:08:53,910 --> 00:08:57,910
Inside the xliff tags, you would put
the string that shouldn't be translated.

165
00:08:58,970 --> 00:09:02,830
In this case, where using
the percent s formatter symbol,

166
00:09:02,830 --> 00:09:06,440
which specifies that a string will
be substituted in here later.

167
00:09:07,450 --> 00:09:10,530
If you're wondering why we don't just
add the strings using the plus symbol in

168
00:09:10,530 --> 00:09:11,890
the Java code.

169
00:09:11,890 --> 00:09:14,580
The reason is because declaring
it as a string resource

170
00:09:14,580 --> 00:09:19,540
allows the translator to decide if
this is the right format for the text.

171
00:09:19,540 --> 00:09:22,920
The translator may decide to flip
the order of some of these words so

172
00:09:22,920 --> 00:09:24,979
that it makes more sense
in the local context.

173
00:09:26,120 --> 00:09:30,800
The translator only has control over
the words in the strings dot xml file.

174
00:09:30,800 --> 00:09:33,480
They don't have control
over the Java code.

175
00:09:33,480 --> 00:09:36,420
For the xliff tag to be
recognized you also want to

176
00:09:36,420 --> 00:09:39,834
add this thing to the resources
tag in your strings dot xml file.

177
00:09:41,190 --> 00:09:44,230
Now, the Java code we're going to
replace this part of the order summary

178
00:09:44,230 --> 00:09:45,250
with our string resource.

179
00:09:46,320 --> 00:09:49,640
Now, we're using the order
summary name string resource and

180
00:09:49,640 --> 00:09:53,080
we're filling in the blank
using the name variable.

181
00:09:54,140 --> 00:09:56,770
Normally, this gets string
method in the activity

182
00:09:56,770 --> 00:10:01,480
would take as argument one input,
which is just the string resource.

183
00:10:01,480 --> 00:10:05,690
But now it takes into arguments, because
we want to pass in the name variable and

184
00:10:05,690 --> 00:10:10,510
have that be inserted into
the blank spot in this string.

185
00:10:10,510 --> 00:10:13,820
If your string resource had two
spots that needs to be filled and

186
00:10:13,820 --> 00:10:16,580
then you would pass in two
additional inputs here, so

187
00:10:16,580 --> 00:10:20,240
that would be a total of three
inputs to the method call.

188
00:10:20,240 --> 00:10:21,120
And so on from there.

189
00:10:22,240 --> 00:10:26,240
If you want any more clarification on
how to use xliff tags, you can check

190
00:10:26,240 --> 00:10:29,320
the Localization Checklist, which is
linked in the instructor notes below.

191
00:10:30,560 --> 00:10:33,650
So far, we've covered these two steps,
and now we're going to look at providing

192
00:10:33,650 --> 00:10:36,560
alternate translations
in another language.

193
00:10:36,560 --> 00:10:37,480
So in Android Studio,

194
00:10:37,480 --> 00:10:40,660
there's actually a neat little tool
called the translations editor.

195
00:10:40,660 --> 00:10:45,610
You can access it by clicking on
Open editor or you can right click

196
00:10:45,610 --> 00:10:50,750
on the strings dot xml file and
then click on open translations editor.

197
00:10:50,750 --> 00:10:53,460
There's a column for
the name of the string resource, and

198
00:10:53,460 --> 00:10:56,530
then the default value, which is
the English translation right now.

199
00:10:57,920 --> 00:11:01,939
Each row corresponds to another string
resource that we defined in our strings

200
00:11:01,939 --> 00:11:03,340
dot xml file.

201
00:11:03,340 --> 00:11:06,470
If we click on the globe icon here,
we can add a new language.

202
00:11:07,720 --> 00:11:10,980
I type Spanish and add Spanish.

203
00:11:12,290 --> 00:11:15,640
You can click on the cell here to
provide the Spanish translation for

204
00:11:15,640 --> 00:11:17,040
the string resource thank you.

205
00:11:17,040 --> 00:11:19,560
I'm going to type in gracias,

206
00:11:19,560 --> 00:11:22,240
which means thank you in
my terrible Spanish accent.

207
00:11:23,300 --> 00:11:25,450
We can do the same for
our toppings header, and

208
00:11:25,450 --> 00:11:27,310
this is the Spanish translation.

209
00:11:27,310 --> 00:11:29,490
I'm not even going to
try to pronounce that.

210
00:11:29,490 --> 00:11:30,960
Now, let's rebuild our app.

211
00:11:30,960 --> 00:11:33,630
My device still has Spanish
as a default language.

212
00:11:33,630 --> 00:11:34,885
And when I open up our app,

213
00:11:34,885 --> 00:11:39,360
wow I see that the toppings
header is translated in Spanish.

214
00:11:39,360 --> 00:11:41,440
The rest is still in English
because I haven't finished it yet.

215
00:11:41,440 --> 00:11:45,300
And then, when I click on the order
button, then I see Gracias.

216
00:11:47,230 --> 00:11:48,940
It's awesome, that it worked.

217
00:11:48,940 --> 00:11:52,490
Behind the scenes the translation
editor did a couple of things for us.

218
00:11:52,490 --> 00:11:56,269
It created the Spanish version
of the strings dot xml file.

219
00:11:56,269 --> 00:11:59,250
When you click on that you can
see that it automatically added

220
00:11:59,250 --> 00:12:00,200
the translations in.

221
00:12:01,430 --> 00:12:03,580
If we didn't provide
Spanish translations,

222
00:12:03,580 --> 00:12:05,220
then it doesn't appear here.

223
00:12:05,220 --> 00:12:09,030
As a developer, you have the option of
modifying the strings file directly or

224
00:12:09,030 --> 00:12:10,489
using the translations editor.

225
00:12:11,570 --> 00:12:15,060
If you want to add more languages, you
can simply click on the globe icon here.

226
00:12:16,210 --> 00:12:17,960
Cool you have just finished
all three steps for

227
00:12:17,960 --> 00:12:20,940
localizing a couple of
strings into Spanish.

228
00:12:20,940 --> 00:12:23,630
Now, there are a few other hard
coded strings that we missed, but

229
00:12:23,630 --> 00:12:27,185
this time, I'd like you to take
the lead in localizing them.

230
00:12:27,185 --> 00:12:28,915
You'll find Spanish translations for

231
00:12:28,915 --> 00:12:31,165
these text strings in
the instructor notes below.

232
00:12:31,165 --> 00:12:34,175
But you're welcome to pick
another language of your choice.

233
00:12:34,175 --> 00:12:38,435
At the end, your app should look like
this assuming that you chose Spanish.

234
00:12:38,435 --> 00:12:41,405
And then when you hit the order button,
the email subject line and

235
00:12:41,405 --> 00:12:43,405
the message body are both in Spanish.
