1
00:00:00,320 --> 00:00:02,550
Great job making it this far into the course.

2
00:00:02,550 --> 00:00:04,790
Let's take a look at the solution to this XORD

3
00:00:04,790 --> 00:00:08,160
exercise. So here's our parse file function, and you

4
00:00:08,160 --> 00:00:10,760
can see that what we've done here, is use this

5
00:00:10,760 --> 00:00:14,990
column slicing trick. We've used the call values method

6
00:00:14,990 --> 00:00:18,670
on sheet to pull out all of the values in

7
00:00:18,670 --> 00:00:22,250
column one. Column one being the coast column within

8
00:00:22,250 --> 00:00:25,460
that data set. Then, we're simply using max and min

9
00:00:25,460 --> 00:00:30,170
here on this list that we've pulled out, in order to get the max val and min

10
00:00:30,170 --> 00:00:34,420
val in that entire column. We're using the index

11
00:00:34,420 --> 00:00:37,340
method on lists, to figure out where that max

12
00:00:37,340 --> 00:00:40,935
val is in the CV list. Now, because the

13
00:00:40,935 --> 00:00:43,779
data that we have actually begins on row one

14
00:00:43,779 --> 00:00:47,255
of the spreadsheet rather than row zero, we've got

15
00:00:47,255 --> 00:00:50,760
to add a one here. So that within our

16
00:00:50,760 --> 00:00:53,390
spreadsheet, we end up with the right position for

17
00:00:53,390 --> 00:00:55,680
that value, that is to say, the right row

18
00:00:55,680 --> 00:00:59,330
number. Okay, then what we're going to do here is

19
00:00:59,330 --> 00:01:02,730
for the position or the row on which the

20
00:01:02,730 --> 00:01:07,520
max value appears, we're going to take the value

21
00:01:07,520 --> 00:01:09,780
in column zero. That will give us the max

22
00:01:09,780 --> 00:01:12,650
time. Okay? And then what we're going to do,

23
00:01:12,650 --> 00:01:15,830
is turn that time, which we'll get as a floating

24
00:01:15,830 --> 00:01:20,020
point number, into an actual time tuple. We'll

25
00:01:20,020 --> 00:01:21,929
do that same process with the min value.

26
00:01:23,210 --> 00:01:26,060
In generating our data dictionary that we'll end

27
00:01:26,060 --> 00:01:28,700
up returning from this function, we can simply

28
00:01:28,700 --> 00:01:31,530
plug in the realtime, maxval, realmintime, and minval,

29
00:01:31,530 --> 00:01:34,620
and then to get the average, we're simply

30
00:01:34,620 --> 00:01:36,820
going to calculate it right here, and make

31
00:01:36,820 --> 00:01:41,300
it the value of this key, avgcoast. Okay,

32
00:01:41,300 --> 00:01:44,040
let's run this. I just want to point out that I'm using the p print

33
00:01:44,040 --> 00:01:47,510
module here, so that we get our data printed out in a nicely structured way.

34
00:01:50,050 --> 00:01:52,090
And we can see that we get good values here.

35
00:01:52,090 --> 00:01:53,870
And if you take a look in the spreadsheet itself

36
00:01:53,870 --> 00:01:56,650
and do something like sort the spreadsheet, you'll see that

37
00:01:56,650 --> 00:02:01,530
the maximum times and the maximum values are calculated correctly. One

38
00:02:01,530 --> 00:02:04,980
thing I want to note is that, in our assertion here,

39
00:02:04,980 --> 00:02:07,080
we're doing a rounding so that we don't have any

40
00:02:07,080 --> 00:02:09,970
issues with floating point values being slightly off as we

41
00:02:09,970 --> 00:02:11,810
get further and further to the right of the decimal point.
