1
00:00:00,000 --> 00:00:04,990
The way to avoid stupid choices in the algorithm and actually we can make Alice

2
00:00:04,990 --> 00:00:08,700
a little bit more happy because we're soon going to show her that we're not going to make her

3
00:00:08,700 --> 00:00:11,770
totally happy but at least neutral because we're now going to show her

4
00:00:11,770 --> 00:00:13,400
a better technique than brute force.

5
00:00:13,400 --> 00:00:18,200
And that better technique is known as a search tree and you would soon see why it's called a tree.

6
00:00:18,200 --> 00:00:22,860
If you were solving vertex cover by yourself, you would probably take the following approach.

7
00:00:22,860 --> 00:00:27,270
You would not see for all vertices together if they are in the vertex cover or not

8
00:00:27,270 --> 00:00:32,439
but rather you would look at a single vertex, say this one here, and then split it into two possibilities.

9
00:00:32,439 --> 00:00:36,790
One, you're going to say, "Yes, let's make this vertex part of the vertex cover."

10
00:00:36,790 --> 00:00:41,010
And the other one, you would say, "No, I do not want this vertex to be part of the vertex cover."

11
00:00:41,010 --> 00:00:46,660
And then, you're going to split down further so on this side here and on this side here.

12
00:00:46,660 --> 00:00:48,870
Let's look at this vertex here next.

13
00:00:48,870 --> 00:00:52,260
We're just going to draw it a little bit smaller so that we don't run out of space.

14
00:00:52,260 --> 00:00:57,060
We already know that this vertex here is in the vertex cover

15
00:00:57,060 --> 00:00:59,630
and we're now deciding for this vertex here on the left.

16
00:00:59,630 --> 00:01:04,110
So we'll have one case where we do put it into the vertex cover and another one where

17
00:01:04,110 --> 00:01:06,130
we don't put it into the vertex cover.

18
00:01:06,130 --> 00:01:09,780
And then for each of these cases again we can split into two possibilities.

19
00:01:09,780 --> 00:01:13,380
And this time we're going to look at the vertex down here. Same here.

20
00:01:13,380 --> 00:01:19,050
One case where we put it into the vertex cover and another case where we don't.

21
00:01:19,050 --> 00:01:25,180
Now here for this case already, we can stop. We have found a solution of size 3.

22
00:01:25,180 --> 00:01:30,450
All edges are covered. We do not even need to consider the possibilities for this vertex here.

23
00:01:30,450 --> 00:01:34,680
Over here, we still have to consider two possibilities so we still need to make a decision

24
00:01:34,680 --> 00:01:39,770
here on the right side so we can either put it into the vertex cover or not put it into the vertex cover.

25
00:01:39,770 --> 00:01:43,570
And so this solution here or it's not solution because it's not valid.

26
00:01:43,570 --> 00:01:47,610
And here again we have found a solution of size 3 or a vertex cover of size 3.

27
00:01:47,610 --> 00:01:51,180
So I'm just going to leave this check mark here and have this account for both.

28
00:01:51,180 --> 00:01:56,320
So now we still have to continue here for these four points where we left off earlier

29
00:01:56,320 --> 00:02:01,020
and again we're going to do the same thing so we're going to consider one possibility where

30
00:02:01,020 --> 00:02:04,470
this vertex down here is not in the vertex cover and again we see.

31
00:02:04,470 --> 00:02:07,650
Oops! This is invalid so we do not need to continue any further.

32
00:02:07,650 --> 00:02:10,199
The next time we're going to put this vertex into the vertex cover.

33
00:02:10,199 --> 00:02:12,990
And yes, we have a valid solution of size 2.

34
00:02:12,990 --> 00:02:16,590
Continuing over here. We're going to consider this vertex here again.

35
00:02:16,590 --> 00:02:23,210
So one possibility would be to not put it into the vertex cover but that is already invalid.

36
00:02:23,210 --> 00:02:28,220
And another one would be to put it into the vertex cover, which again leads us to further

37
00:02:28,220 --> 00:02:31,970
possibilities to check and we're going to check them for this one down here.

38
00:02:31,970 --> 00:02:37,050
So same game. Invalid solution over here. Still valid over here.

39
00:02:37,050 --> 00:02:39,450
And we need to consider two more cases.

40
00:02:39,450 --> 00:02:42,460
And you already know that this case here is going to be invalid.

41
00:02:42,460 --> 00:02:46,760
And over here we're finding a solution of size 3. So that's all that.

42
00:02:46,760 --> 00:02:52,960
Originally, we had with brute force 16 assignments of 0 and 1 to the vertices that we needed to check

43
00:02:52,960 --> 00:02:56,990
and now this algorithm here only considered 9 assignments.

44
00:02:56,990 --> 00:03:00,640
So I told you at the beginning of this course that constant factor speedups

45
00:03:00,640 --> 00:03:04,580
probably don't matter that much when we're dealing with exponential time algorithms.

46
00:03:04,580 --> 00:03:07,990
So we will have to do some further analysis on this one.

47
00:03:07,990 --> 00:03:12,950
And you also noticed that there could be certain other techniques that we can use for speedups.

48
00:03:12,950 --> 00:03:17,490
So for example here, we had already found a solution of size 2.

49
00:03:17,490 --> 00:03:20,760
So we probably could've even stopped our algorithm a little bit earlier

50
00:03:20,760 --> 00:03:22,550
over here but we're going to get into this.

51
00:03:22,550 --> 00:03:26,460
The main thing that I would like you to understand is the technique of the search tree

52
00:03:26,460 --> 00:03:31,800
and we're now going to analyze this search tree further and try to improve it.

53
00:03:31,800 --> 00:03:34,980
And of course, I should also tell you why it is called a search tree.

54
00:03:34,980 --> 00:03:39,370
And to show you this, draw lines along where the algorithm was searching

55
00:03:39,370 --> 00:03:44,790
and then we're going to rotate this picture by 180 degrees and now here you can see

56
00:03:44,790 --> 00:03:50,550
a beautiful tree with the solution as the leaves or the fruit or whatever you will.

57
00:03:50,550 --> 00:03:53,180
But this is why it's called a search tree.

58
00:03:53,180 --> 00:03:55,760
It's basically a tree that hangs upside down.

59
00:03:55,760 --> 00:03:58,540
I don't know what the terminology tells you about computer scientists

60
00:03:58,540 --> 99:59:59,999
but that's not my concern here.
