1
00:00:00,060 --> 00:00:02,810
And the answer is all the above. As we just spoke

2
00:00:02,810 --> 00:00:07,550
about, it's nice when you have a separate app server, database, cache,

3
00:00:07,550 --> 00:00:10,310
all of the, all of those separate pieces because different web

4
00:00:10,310 --> 00:00:13,900
applications have different needs and over time you may add features that

5
00:00:13,900 --> 00:00:16,440
strain the system in different ways. So having all of these

6
00:00:16,440 --> 00:00:17,600
separate systems means they can be

7
00:00:17,600 --> 00:00:19,660
scaled and operated independently. Increasing fault

8
00:00:19,660 --> 00:00:22,170
tolerance is a great reason. You know you don't want to

9
00:00:22,170 --> 00:00:25,120
have, the fact that your caches are bad, to ruin you know,

10
00:00:25,120 --> 00:00:27,160
all the parts of your website, you know maybe parts of your

11
00:00:27,160 --> 00:00:29,640
application don't need the database, so don't need the cache, there's no

12
00:00:29,640 --> 00:00:33,160
reason why one system should you know, ruin another. Or if you

13
00:00:33,160 --> 00:00:36,160
lose them you know, one cache machine, you shouldn't lose the ability to

14
00:00:36,160 --> 00:00:39,470
handle app server requests as well. So two different processes aren't competing

15
00:00:39,470 --> 00:00:42,970
for resources, whenever we talk about this one, but you know we've

16
00:00:42,970 --> 00:00:45,760
got an apps server and a database on the same machine. They

17
00:00:45,760 --> 00:00:50,315
use your computer in very different ways and having two machines running one

18
00:00:50,315 --> 00:00:52,420
an app server and one a database. And ma-, many

19
00:00:52,420 --> 00:00:55,800
cases under high load will actually doubly out perform a single

20
00:00:55,800 --> 00:00:59,350
machine. Because you've got the machine can make use of its

21
00:00:59,350 --> 00:01:02,300
own caching. You know, the processor cache and the OS cache

22
00:01:02,300 --> 00:01:04,580
and all that sort of stuff. That will be constantly being

23
00:01:04,580 --> 00:01:07,880
trampled by, you know, your app server tramping, your database caching

24
00:01:07,880 --> 00:01:12,290
and vice versa. So separating processes that behave wildly differently from

25
00:01:12,290 --> 00:01:15,370
each other onto separate physical machines makes a lot of sense.

26
00:01:15,370 --> 00:01:18,300
And also so these systems can be updated independently. Say you want to

27
00:01:18,300 --> 00:01:21,220
switch from PostgreSQL to MySQL or you want to switch from Memcache to Redis

28
00:01:21,220 --> 00:01:23,590
or something like that. Well, there is no reason why you need to

29
00:01:23,590 --> 00:01:26,305
take down the rest of your site to do that. You can update these

30
00:01:26,305 --> 00:01:29,927
pieces one at a time you know as, as you need to. So,

31
00:01:29,927 --> 00:01:33,523
these are all reasons why you want to separate your services and it's good

32
00:01:33,523 --> 00:01:36,887
even if you have all these services on the same machine initially that

33
00:01:36,887 --> 00:01:38,999
there's some kind of walls between them.

34
00:01:38,999 --> 00:01:40,727
So that, you know, have them communicate

35
00:01:40,727 --> 00:01:43,463
over tcp or communicate over some other sub system such that when you

36
00:01:43,463 --> 00:01:46,727
switch to having separate machines, you don't have to rewrite your whole web

37
00:01:46,727 --> 00:01:48,311
application, you know you don't have

38
00:01:48,311 --> 00:01:50,087
to re architect everything, you just kind of

39
00:01:50,087 --> 00:01:52,469
moving different programs around. So that's kind of

40
00:01:52,469 --> 00:01:54,060
one of the big keys to scaling.
