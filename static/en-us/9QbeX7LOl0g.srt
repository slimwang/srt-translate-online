1
00:00:00,000 --> 00:00:07,000
Raymond has a question to do with the use of non-US alphabet characters.

2
00:00:07,000 --> 00:00:12,000
When he first wrote programs with text in Spanish and ran them using Python,

3
00:00:12,000 --> 00:00:17,000
he got an error--syntax error "non-ASCII character."

4
00:00:17,000 --> 00:00:23,000
He did not get that error when running the same code in IDLE. It worked as it should.

5
00:00:23,000 --> 00:00:28,000
He solved this by changing the encoding.

6
00:00:28,000 --> 00:00:33,000
So as we're building a search engine that will scan pages in different languages

7
00:00:33,000 --> 00:00:39,000
and perhaps use different language interfaces, how should we change our code

8
00:00:39,000 --> 00:00:46,000
so that it does not run into problems with encoding? What should our default character set be?

9
00:00:46,000 --> 00:00:49,000
Thanks for the question, Raymond. This is a really good point to bring up.

10
00:00:49,000 --> 00:00:54,000
As you take inputs that include more languages than just English

11
00:00:54,000 --> 00:00:56,000
the character sets are different.

12
00:00:56,000 --> 00:00:59,000
If you look at a webpage, there's a header in the webpage

13
00:00:59,000 --> 00:01:02,000
that identifies what characters set it's using.

14
00:01:02,000 --> 00:01:07,000
This is part of the HTTP protocol to have a header that describes the content type,

15
00:01:07,000 --> 00:01:09,000
which includes the character set.

16
00:01:09,000 --> 00:01:12,000
The character set can be selected from a few different ones.

17
00:01:12,000 --> 00:01:15,000
The most common one is called UTF-8.

18
00:01:15,000 --> 00:01:21,000
That's using a way of encoding characters that makes the simple characters

19
00:01:21,000 --> 00:01:23,000
that can be encoded in just 7 bits.

20
00:01:23,000 --> 00:01:27,000
This is the character set that is known as ASCII.

21
00:01:27,000 --> 00:01:29,000
These are characters that are common in English.

22
00:01:29,000 --> 00:01:32,000
It doesn't cover all the characters that are used in all other languages,

23
00:01:32,000 --> 00:01:37,000
but those 7-bit characters can be encoded using a small amount of space.

24
00:01:37,000 --> 00:01:41,000
The standard we've been using in Python with standard strings is that they're all ASCII.

25
00:01:41,000 --> 00:01:43,000
Each character is 1 byte.

26
00:01:43,000 --> 00:01:48,000
There's only 255 possible characters that can be encoded in 1 byte though.

27
00:01:48,000 --> 00:01:53,000
If you're wanting to deal with more languages, you need to use different characters.

28
00:01:53,000 --> 00:01:55,000
The way to do that is called Unicode.

29
00:01:55,000 --> 00:01:59,000
Unicode is a character set that can support large numbers of characters.

30
00:01:59,000 --> 00:02:02,000
It's actually a way of encoding characters that doesn't have a limit on

31
00:02:02,000 --> 00:02:04,000
how many characters you can support.

32
00:02:04,000 --> 00:02:08,000
A way of encoding those that makes it efficient when the characters are small

33
00:02:08,000 --> 00:02:12,000
but allows you to still encode a large number of characters is called UTF-8,

34
00:02:12,000 --> 00:02:15,000
which is what most web browsers use.

35
00:02:15,000 --> 00:02:20,000
To deal with this in Python, what you'd have to deal with instead of standard strings is Unicode strings.

36
00:02:20,000 --> 00:02:23,000
There is a built-in type for Unicode characters.

37
00:02:23,000 --> 00:02:26,000
You can convert a string to Unicode by using Unicode.

38
00:02:26,000 --> 00:02:30,000
Then there are ways of encoding Unicode in other character sets.

39
00:02:30,000 --> 00:02:34,000
If you wanted to build a web search engine that can deal with text that's not using

40
00:02:34,000 --> 00:02:38,000
the standard English character set, you definitely need to worry about handling Unicode

41
00:02:38,000 --> 00:02:41,000
and all these different character encodings.
