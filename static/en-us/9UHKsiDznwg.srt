1
00:00:00,120 --> 00:00:02,730
Now, we talked earlier in this lecture about kind

2
00:00:02,730 --> 00:00:07,130
of the, the basic approaches to Scaling. We said, the

3
00:00:07,130 --> 00:00:10,500
first one was optimize the code. And when we're

4
00:00:10,500 --> 00:00:13,050
talking about a database we're probably not optimizing code but

5
00:00:13,050 --> 00:00:16,930
this, this was, this stage of thinking means, you

6
00:00:16,930 --> 00:00:19,820
know, have the appropriate indexes. You know, make sure the

7
00:00:19,820 --> 00:00:22,190
query is sane. You know, make sure you're only querying

8
00:00:22,190 --> 00:00:25,350
for things that you actually need. If the query's simple,

9
00:00:25,350 --> 00:00:27,420
and all those types of things. We're not going to do that here,

10
00:00:27,420 --> 00:00:30,730
because our query is actually very simple, and Google App Engine makes our

11
00:00:30,730 --> 00:00:33,320
indices for us. But this is always the first thing you want to

12
00:00:33,320 --> 00:00:36,330
check. If the index App Engine makes isn't optimal for the query you're

13
00:00:36,330 --> 00:00:39,910
running, you may have to make something by hand. You should always start

14
00:00:39,910 --> 00:00:42,770
here. You know, the first step is limit the work the database needs

15
00:00:42,770 --> 00:00:45,710
to do in the worst case. Let's assume we've already done that, because

16
00:00:45,710 --> 00:00:47,640
we have, for ASCII chan. Something else

17
00:00:47,640 --> 00:00:50,540
we talked about was, adding more machines.

18
00:00:50,540 --> 00:00:53,380
We don't really have control over that, in this particular situation

19
00:00:53,380 --> 00:00:56,450
App Engine manages that for us. If you're not using App Engine,

20
00:00:56,450 --> 00:00:58,360
maybe you need to add more machines. Maybe you need to start

21
00:00:58,360 --> 00:01:02,970
doing replication, or sharding, or those techniques. Now, if you've ever tried

22
00:01:02,970 --> 00:01:05,510
to do those techniques on your own you know, that they're very

23
00:01:05,510 --> 00:01:09,390
difficult, they're very complex. An this is usually, adding more machines when

24
00:01:09,390 --> 00:01:12,240
you're talking about a database, is kind of the last resort for

25
00:01:12,240 --> 00:01:15,950
scaling. Something else we talked about was using big machines again we

26
00:01:15,950 --> 00:01:18,050
don't have a whole lot of control over that in App Engine. I

27
00:01:18,050 --> 00:01:20,590
think you can upgrade machines a little bit but, you know, let's, let's

28
00:01:20,590 --> 00:01:23,460
say we're, we're, we're done messing with that, or maybe we're tired of

29
00:01:23,460 --> 00:01:27,110
paying for database queries, an we just want to get to the, the fun part.

30
00:01:27,110 --> 00:01:29,590
The, what we're going to spend this lecture talking about, we' re just cache

31
00:01:29,590 --> 00:01:32,810
it. A very simple thing we can do after we've optimized the database,

32
00:01:32,810 --> 00:01:37,200
and we don't want to fiddle with more system administration is Cache this query.

33
00:01:37,200 --> 00:01:38,960
You know in ASCIIchan the front page

34
00:01:38,960 --> 00:01:40,840
of ASCIIchan only changes when somebody submits.

35
00:01:40,840 --> 00:01:43,960
So that means it's a good opportunity to Cache what we

36
00:01:43,960 --> 00:01:46,460
actually store. And that is what I'm going to do right now,

37
00:01:46,460 --> 00:01:49,710
is add a little bit of Cache to ASCIIchan. Okay, you

38
00:01:49,710 --> 00:01:54,070
all remember ASCIIchan, it's online at ASCIIchan.com. You remember how it works

39
00:01:54,070 --> 00:01:56,910
we can type in a title and then we can draw

40
00:01:56,910 --> 00:01:59,790
some ASCII art or in my case Paste it. And when

41
00:01:59,790 --> 00:02:02,560
you submit the art you see a listing of all the

42
00:02:02,560 --> 00:02:06,050
previous arts submitted to ASCIIChan. The way this works in the code,

43
00:02:06,050 --> 00:02:08,560
when you do a get on ASCIIChan, when you call

44
00:02:08,560 --> 00:02:11,795
this function called render_front, which is defined here. Okay, so this

45
00:02:11,795 --> 00:02:14,530
render_front function, basically, what it does is it runs this

46
00:02:14,530 --> 00:02:17,430
data star query, written in Gql, that looks up the ten

47
00:02:17,430 --> 00:02:20,520
most recent pieces of art. So limit ten, that's how

48
00:02:20,520 --> 00:02:23,350
we know we're looking up ten. Order by created descending, so

49
00:02:23,350 --> 00:02:26,940
that orders them by the time they were created. This

50
00:02:26,940 --> 00:02:32,220
where ancestor equals art key is a data store technique for

51
00:02:32,220 --> 00:02:36,610
basically insuring your query is consistent. I kind of wanted to talk

52
00:02:36,610 --> 00:02:38,460
about that in unit 3 but things seem to be getting a

53
00:02:38,460 --> 00:02:42,380
little complex. If you read the data store docs you, and kind

54
00:02:42,380 --> 00:02:45,100
of search for the word consistent, you will see what this technique is

55
00:02:45,100 --> 00:02:49,210
referring to so anyway not super important for our purposes so you

56
00:02:49,210 --> 00:02:52,370
know why that's there, it's not required. If I got rid of this

57
00:02:52,370 --> 00:02:54,950
at our scale, this site would behave exactly the same. So then

58
00:02:54,950 --> 00:02:57,650
what we do is we actually run that query, remember, this just defines

59
00:02:57,650 --> 00:02:59,770
the query. When you iterate over the query, or in my

60
00:02:59,770 --> 00:03:02,000
case turn it into a list, that's when you actually go

61
00:03:02,000 --> 00:03:05,790
to the database and, and get the results back. Remember I

62
00:03:05,790 --> 00:03:09,170
turn it into a list here so that I don't accidently run

63
00:03:09,170 --> 00:03:12,780
the query twice when I iterate over it again here, and

64
00:03:12,780 --> 00:03:15,430
then again when we actually render the page. I just want to

65
00:03:15,430 --> 00:03:19,410
run the query once. So, what we want to do is cache

66
00:03:19,410 --> 00:03:22,860
this query because our front page isn't going to change very often. Most

67
00:03:22,860 --> 00:03:26,020
Users come to ASCIIChen and just look at the front page.

68
00:03:26,020 --> 00:03:27,700
We don't need to hit the database over, and over, and

69
00:03:27,700 --> 00:03:30,500
over again every time a user does that. That's just going to

70
00:03:30,500 --> 00:03:34,140
cost us money, you know, waste Google's resources, and generally just make

71
00:03:34,140 --> 00:03:36,610
the world a worst place, so. First thing I'm going to do,

72
00:03:36,610 --> 00:03:40,310
is I'm going to pull out this piece of code into it's

73
00:03:40,310 --> 00:03:43,770
own function so it's a little easier to manage. Okay, I'm

74
00:03:43,770 --> 00:03:47,880
going to call this function Top arts. It's not going to take any parameters

75
00:03:47,880 --> 00:03:50,070
because we're just returning we know what the query's going to be,

76
00:03:50,070 --> 00:03:53,020
the query's going to be the same every time. Okay so all I've

77
00:03:53,020 --> 00:03:57,490
done is I've created this function top_arts and I copied this code.

78
00:03:57,490 --> 00:04:01,040
Actually I cut this code from render_front and moved it into this

79
00:04:01,040 --> 00:04:04,860
function and then we we make the query, we run the

80
00:04:04,860 --> 00:04:07,950
query, and then we return the result. And then in render front,

81
00:04:07,950 --> 00:04:11,240
we just call the top arts function, so everything should behave as

82
00:04:11,240 --> 00:04:13,440
it did before. We can go ahead and give that a test.

83
00:04:13,440 --> 00:04:16,920
Here's a front page with our art, and if I were to

84
00:04:16,920 --> 00:04:21,040
reload this page, we see that nothing's changed. So, nothing big there,

85
00:04:21,040 --> 00:04:24,040
we didn't expect anything to change, and nothing did, okay? So let's

86
00:04:24,040 --> 00:04:27,010
go back to the code and start making our improvements. Now, one thing

87
00:04:27,010 --> 00:04:29,340
we're going to want to do is we want to have a way

88
00:04:29,340 --> 00:04:33,560
of telling ourselves when we're actually running this query so we can actually

89
00:04:33,560 --> 00:04:35,710
test to make sure our code is working. Now I am not

90
00:04:35,710 --> 00:04:38,610
a Google App Engine pro, but I am going to add a little

91
00:04:38,610 --> 00:04:42,360
statement like this. Login.error and we will say that this

92
00:04:42,360 --> 00:04:46,200
db query. This will print in our error console, the string

93
00:04:46,200 --> 00:04:49,410
db query. Now normally you should use login.debug for this

94
00:04:49,410 --> 00:04:52,190
purpose. But the debug mode in app engine is driving me

95
00:04:52,190 --> 00:04:54,620
nuts right now. So, this'll be a little bit easier

96
00:04:54,620 --> 00:04:57,230
for me to demonstrate. I'm going to have to also import the

97
00:04:57,230 --> 00:04:59,270
logging module for this to work. I'll go ahead and do

98
00:04:59,270 --> 00:05:03,570
that, just import logging. So, this should print in the console,

99
00:05:03,570 --> 00:05:05,400
every time we run a DB query. And let's see if that

100
00:05:05,400 --> 00:05:10,020
works. So, here is ASCIIchan and I am going to hit reload on

101
00:05:10,020 --> 00:05:12,080
this page and I am going to go to the terminal, and you

102
00:05:12,080 --> 00:05:15,190
can see that I am printing error and DB query that is my

103
00:05:15,190 --> 00:05:18,660
string and we can also see the browser fetched slash which is the

104
00:05:18,660 --> 00:05:22,450
actual request to asciichan, and also the request of favicon since I haven't

105
00:05:22,450 --> 00:05:26,100
created it. Just 404s. So now we have this printing and we can

106
00:05:26,100 --> 00:05:28,580
see that everytime I reload the page in the browser and we get

107
00:05:28,580 --> 00:05:31,600
these lines again and I see we get the words DB Query, right

108
00:05:31,600 --> 00:05:34,350
before the request. What we want to do is we want to get rid of

109
00:05:34,350 --> 00:05:36,010
these words without just commenting out

110
00:05:36,010 --> 00:05:37,830
the logging statement. Okay, so let's add

111
00:05:37,830 --> 00:05:40,700
some caching and we're going to use the same algorithm that we used on that

112
00:05:40,700 --> 00:05:41,970
quiz that, that you guys just

113
00:05:41,970 --> 00:05:44,090
implemented. We're going to create a dictionary and

114
00:05:44,090 --> 00:05:48,030
we're going to call it cache. Now, we have to have a key to cache,

115
00:05:48,030 --> 00:05:50,090
I usually like to store my keys in a variable. In this case

116
00:05:50,090 --> 00:05:53,780
I'm just going to call the key Top. This is how we're going to store the,

117
00:05:53,780 --> 00:05:55,890
how we're going to reference the result of this query

118
00:05:55,890 --> 00:05:58,510
in our cache. And then I'm just going to change we're

119
00:05:58,510 --> 00:06:00,760
just going to rewrite this function to use the caching

120
00:06:00,760 --> 00:06:06,230
algorithm. So if key in cache, arts equals CACH key.

121
00:06:06,230 --> 00:06:09,070
Else, we want to run our query. So, we run

122
00:06:09,070 --> 00:06:11,540
our query in the out statement and of course we

123
00:06:11,540 --> 00:06:15,490
want to store the result of our query in

124
00:06:15,490 --> 00:06:18,670
the cache. And then we return our arts. Okay, so,

125
00:06:18,670 --> 00:06:21,950
pretty simple change. Now we're caching the result of this one query.

126
00:06:21,950 --> 00:06:24,230
Let's see if it works, we go to our browser, I hit

127
00:06:24,230 --> 00:06:27,420
reload. The page loads with no error, so that's good. And then

128
00:06:27,420 --> 00:06:30,310
I go to my console and I see that it printed out

129
00:06:30,310 --> 00:06:33,220
DB QUERY, and has the results. Now if I were to reload

130
00:06:33,220 --> 00:06:37,720
this page again again, no error. And I go back to the

131
00:06:37,720 --> 00:06:41,170
console, and I can see that we made a, a second request.

132
00:06:41,170 --> 00:06:44,170
Here it is, GET slash, but this time there's no DB QUERY. So

133
00:06:44,170 --> 00:06:47,310
if I were to go to our front page and hit Reload

134
00:06:47,310 --> 00:06:49,270
Trust me that I'm doing it. You can kind of see it

135
00:06:49,270 --> 00:06:51,730
blinking a little bit over and over again and then, I go

136
00:06:51,730 --> 00:06:54,990
back to the console, I can see a bunch of requests that

137
00:06:54,990 --> 00:06:58,140
note, DB queries. That's pretty cool, huh? So now our front page

138
00:06:58,140 --> 00:07:01,265
is a lot faster, let's submit a new piece of art to

139
00:07:01,265 --> 00:07:04,440
ASCIIchan here, or at least, my local ASCIIChan. It's going to be a

140
00:07:04,440 --> 00:07:09,430
picture of beer, looks like it's from Hofbra House. I click submit,

141
00:07:09,430 --> 00:07:12,040
huh my beer did not appear I still have

142
00:07:12,040 --> 00:07:14,690
my original art from before. What do you think happened.
