1
00:00:00,440 --> 00:00:05,750
For threads, the first construct that Birrell advocates is mutual exclusion.

2
00:00:05,750 --> 00:00:07,980
And that's a binary operation.

3
00:00:07,980 --> 00:00:09,570
A resource is either free or

4
00:00:09,570 --> 00:00:14,210
you can access it, or it's locked and busy and you have to wait.

5
00:00:14,210 --> 00:00:19,090
Once the resource becomes free, you get a chance to try to access the resource.

6
00:00:19,090 --> 00:00:23,280
However, what if the processing that you wish to perform needs to

7
00:00:23,280 --> 00:00:27,430
occur only under certain circumstances, under certain conditions.

8
00:00:27,430 --> 00:00:31,080
For instance, what if we have a number of threads that are inserting data to

9
00:00:31,080 --> 00:00:32,000
a list.

10
00:00:32,000 --> 00:00:34,850
These are producers of list items.

11
00:00:34,850 --> 00:00:40,290
And then we have one special consumer thread that has to print out and

12
00:00:40,290 --> 00:00:44,350
then clear the contents of this list once it reaches a limit.

13
00:00:44,350 --> 00:00:46,330
Once, for instance, it is full.

14
00:00:46,330 --> 00:00:51,920
We'd like to make sure that this consumer thread only really gets to execute

15
00:00:51,920 --> 00:00:57,580
its operation under these certain conditions when the list is actually full.

16
00:00:57,580 --> 00:01:01,230
Let's look at this producer/consumer pseudocode example.

17
00:01:01,230 --> 00:01:02,320
In the main code,

18
00:01:02,320 --> 00:01:07,200
we create several producer threads and then one consumer thread.

19
00:01:07,200 --> 00:01:11,780
All of the producer threads will perform the safe_insert operation, and

20
00:01:11,780 --> 00:01:15,610
the consumer thread will print, will perform an operation print and

21
00:01:15,610 --> 00:01:16,950
clear the list.

22
00:01:16,950 --> 00:01:21,510
And this operation, as we said, needs to happen once the list is full only.

23
00:01:21,510 --> 00:01:25,920
For producers, the safe_insert operation is slightly modified from what we

24
00:01:25,920 --> 00:01:26,930
saw before.

25
00:01:26,930 --> 00:01:31,040
Here, we don't specify the argument to safe_insert when

26
00:01:31,040 --> 00:01:33,770
the producer thread is created.

27
00:01:33,770 --> 00:01:38,670
Instead, every single one of the threads needs to insert an element that

28
00:01:38,670 --> 00:01:41,300
has a value of the thread identifier.

29
00:01:41,300 --> 00:01:46,420
For the consumer thread here, it continuously waits on the lock, and

30
00:01:46,420 --> 00:01:51,370
when the mutex is free, it goes and checks if the list is full.

31
00:01:51,370 --> 00:01:54,660
If so, it prints and clears up the element of the list.

32
00:01:54,660 --> 00:01:57,580
Otherwise, it immediately releases the lock and

33
00:01:57,580 --> 00:02:00,130
then tries to reacquire it again.

34
00:02:00,130 --> 00:02:05,180
Operating this way is clearly wasteful, and it would be much more efficient if

35
00:02:05,180 --> 00:02:09,180
we could just tell the consumer when the list is actually full,

36
00:02:09,180 --> 00:02:12,580
so that it can at that point go ahead and process the list.
