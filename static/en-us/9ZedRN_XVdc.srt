1
00:00:00,740 --> 00:00:05,939
Service Oriented Architecture is, is often of interest at the enterprise level.

2
00:00:05,939 --> 00:00:10,510
That is, big corporations or organizations who have a suite of

3
00:00:10,510 --> 00:00:16,480
applications that they want to adapt to internet type situations and

4
00:00:16,480 --> 00:00:20,350
rather than rewriting the whole suite from scratch, they want to re-architect it

5
00:00:20,350 --> 00:00:25,170
into a service oriented configuration. This can be tricky, as you might imagine.

6
00:00:25,170 --> 00:00:28,610
Any time you're dealing with large amounts of code and rearchitecting them.

7
00:00:29,980 --> 00:00:36,420
You can run into issues of, of reliability. And there's many a story of

8
00:00:36,420 --> 00:00:42,450
a lot of wasted money leading to systems that don't work as expected. So, in,

9
00:00:42,450 --> 00:00:47,290
in doing such rearchitecting, ultimately you have to take code that maybe was

10
00:00:47,290 --> 00:00:53,540
used to running on a mainframe in which a code was controlling it's own fate.

11
00:00:53,540 --> 00:00:58,590
It was in charge control-wise for calling the various pieces. Have a service

12
00:00:58,590 --> 00:01:03,950
oriented type architecture over the internet, and it's intended to be providing

13
00:01:03,950 --> 00:01:08,420
user functions, then it may have to be switched in to a reactive type system.

14
00:01:08,420 --> 00:01:12,890
That is, responding to the user interactions. This is a major change to

15
00:01:12,890 --> 00:01:16,700
any system to do this. The point I'm making here is that there's a cost in

16
00:01:16,700 --> 00:01:20,210
doing this and there's a high degree of risk because of that cost.
