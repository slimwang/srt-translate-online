1
00:00:00,000 --> 00:00:02,000
What I'd like to talk about now is a little bit more detail

2
00:00:02,000 --> 00:00:04,000
on some of the different ways that we have to generate random inputs

3
00:00:04,000 --> 00:00:06,000
to our software under test.

4
00:00:06,000 --> 00:00:08,000
So let's start off with our diagram showing the random test case generator.

5
00:00:08,000 --> 00:00:11,000
If you recall from the diagram a little bit earlier in this unit,

6
00:00:11,000 --> 00:00:13,000
this test case generator has 2 inputs.

7
00:00:13,000 --> 00:00:15,000
It takes pseudo-random numbers from a pseudo-random number generator,

8
00:00:15,000 --> 00:00:18,000
and it's also predicated on some amount of knowledge of the input domain,

9
00:00:18,000 --> 00:00:20,000
and that's supplied by a human.

10
00:00:20,000 --> 00:00:22,000
We already looked at one example--testing the outer--

11
00:00:22,000 --> 00:00:24,000
where essentially no domain knowledge was needed.

12
00:00:24,000 --> 00:00:28,000
That is to say, the random test case generator pretty much took its pseudo-random numbers

13
00:00:28,000 --> 00:00:31,000
and used them directly as test cases.

14
00:00:31,000 --> 00:00:35,000
We looked at a different example--that is to say, the credit card number generator--

15
00:00:35,000 --> 00:00:37,000
where pseudo-random numbers, part of the input,

16
00:00:37,000 --> 00:00:39,000
and they weren't directly parroted to the output

17
00:00:39,000 --> 00:00:43,000
but rather they parameterized an algorithm which created valid credit card numbers.

18
00:00:43,000 --> 00:00:45,000
And of course it's possible to carry that kind of logic farther,

19
00:00:45,000 --> 00:00:48,000
as in the example of where we're testing a file system

20
00:00:48,000 --> 00:00:50,000
and we need to generate valid sequences of API calls

21
00:00:50,000 --> 00:00:54,000
or testing a web browser where we need to actually generate well-formed HTML

22
00:00:54,000 --> 00:00:56,000
in order to test certain parts of the browser.

23
00:00:56,000 --> 00:01:00,000
But it turns out all of these ways of generating input are variations on a single theme

24
00:01:00,000 --> 00:01:02,000
which we call generative random testing.

25
00:01:02,000 --> 00:01:06,000
Generative random testing simply means that inputs are created from scratch.

26
00:01:06,000 --> 00:01:10,000
There's an entirely different approach called mutation-based random testing.

27
00:01:10,000 --> 00:01:14,000
Inputs are created by randomly modifying existing non-randomly created inputs

28
00:01:14,000 --> 00:01:16,000
to the software under test.

29
00:01:16,000 --> 00:01:19,000
And so what that does is changes our diagram a little bit

30
00:01:19,000 --> 00:01:22,000
so that we have a separate source of input which is the existing test case.

31
00:01:22,000 --> 00:01:25,000
One thing we might ask ourselves is, which approach is better?

32
00:01:25,000 --> 00:01:27,000
As far as I know, there is no cut-and-dried answer to that.

33
00:01:27,000 --> 00:01:29,000
Sometimes generative works really well;

34
00:01:29,000 --> 00:01:31,000
sometimes mutation-based testing works really well,

35
00:01:31,000 --> 00:01:34,000
and it really just depends on the situation and how much time you have to spend.

36
00:01:34,000 --> 00:01:38,000
In general, my view is that generative testing might be a little bit better

37
00:01:38,000 --> 00:01:43,000
at ferreting out really weird errors, but it's a lot more work to create entire random tests--

38
00:01:43,000 --> 00:01:48,000
at least if there are sophisticated constraints on their form--from scratch.

39
00:01:48,000 --> 00:01:51,000
Mutation testing, on the other hand, has a different strength, so let's take a look at that.
