1
00:00:00,270 --> 00:00:04,700
As you might have guessed, we want to use normalized cross correlation.

2
00:00:04,700 --> 00:00:08,650
This correlates the template t over the signal s and

3
00:00:08,650 --> 00:00:11,460
returns a normalized set of values.

4
00:00:11,460 --> 00:00:16,750
You can find out the maximum value in this result set using the max function.

5
00:00:16,750 --> 00:00:20,250
This corresponds to the best match location.

6
00:00:20,250 --> 00:00:24,810
When given two output arguments max can actually return the index of

7
00:00:24,810 --> 00:00:26,680
the max value as well.

8
00:00:26,680 --> 00:00:28,470
Isn't that what we wanted?

9
00:00:28,470 --> 00:00:30,270
Let's look at the result.

10
00:00:30,270 --> 00:00:33,050
So we see that the returned index is seven.

11
00:00:33,050 --> 00:00:35,230
But the correct answer should be five.

12
00:00:35,230 --> 00:00:36,320
What happened?

13
00:00:36,320 --> 00:00:40,500
The correlation function actually starts comparing from the first point of

14
00:00:40,500 --> 00:00:43,310
overlap between the template and the signal.

15
00:00:43,310 --> 00:00:45,740
Here the template has three elements.

16
00:00:45,740 --> 00:00:49,570
So comparison starts where the third element overlaps with

17
00:00:49,570 --> 00:00:51,810
the first element of the signal.

18
00:00:51,810 --> 00:00:56,650
And the window moves from that point forward til the end and beyond.

19
00:00:56,650 --> 00:01:00,030
The operation stops at the last point of overlap.

20
00:01:00,030 --> 00:01:04,340
Let's look at the values of c to figure out if this is really the case.

21
00:01:04,340 --> 00:01:08,000
We use the same trick here to display column numbers, and

22
00:01:08,000 --> 00:01:11,120
let's comment out other output code for clarity.

23
00:01:11,120 --> 00:01:14,320
As we can see here, we have 16 values.

24
00:01:14,320 --> 00:01:16,210
Our signal had 14.

25
00:01:16,210 --> 00:01:20,448
The first two coefficients are from positions where the template was

26
00:01:20,448 --> 00:01:23,038
partially outside the signal.

27
00:01:23,038 --> 00:01:27,610
Therefore, index three, which is the length of the template corresponds to

28
00:01:27,610 --> 00:01:29,490
the first position in the signal.

29
00:01:29,490 --> 00:01:34,050
We have to account for this offset when returning index value.

30
00:01:34,050 --> 00:01:37,486
One way to think about this is that the index value returned by

31
00:01:37,486 --> 00:01:40,080
max is the rawIndex.

32
00:01:40,080 --> 00:01:42,450
In order to get the correct index,

33
00:01:42,450 --> 00:01:46,720
we need to subtract the size of the template and add one.

34
00:01:46,720 --> 00:01:51,810
Let us restore our original output lines and look at the output.

35
00:01:51,810 --> 00:01:54,490
Now we have the correct index, five.

36
00:01:54,490 --> 00:01:58,890
This is the starting position of the template found in the signal.

37
00:01:58,890 --> 00:02:01,160
Let's try a different template.

38
00:02:01,160 --> 00:02:01,930
All right.

39
00:02:01,930 --> 00:02:05,140
As expected, the template is found at position seven.

40
00:02:05,140 --> 00:02:09,410
Note that we are not constrained by templates that have exact matches.

41
00:02:09,410 --> 00:02:13,269
For instance, we can try a template that only partially occurs in the signal.

42
00:02:14,320 --> 00:02:15,460
Quite impressive.

43
00:02:15,460 --> 00:02:19,470
The template is found in the correct position, even though there is a mismatch.

44
00:02:19,470 --> 00:02:23,090
A partial mismatch would result in a correlation coefficient that is

45
00:02:23,090 --> 00:02:24,080
less than one.

46
00:02:24,080 --> 00:02:28,090
But it might still be the maximum across all other elements.
