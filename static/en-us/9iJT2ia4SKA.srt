1
00:00:00,000 --> 00:00:05,000
Now let's look at a couple applications, if we could build a cryptosystem like this.

2
00:00:05,000 --> 00:00:08,000
First we'll look at a standard use of it to send private messages.

3
00:00:08,000 --> 00:00:12,000
This is what our goal was initially for the symmetric cryptosystems.

4
00:00:12,000 --> 00:00:15,000
That assumed that we had a shared key to begin with.

5
00:00:15,000 --> 00:00:17,000
Now let's assume that we don't.

6
00:00:17,000 --> 00:00:20,000
Let's assume Alice wants to send a private message to Bob.

7
00:00:20,000 --> 00:00:23,000
She doesn't have a secure channel, and she doesn't have a key shared with Bob,

8
00:00:23,000 --> 00:00:26,000
but she does know Bob's public key.

9
00:00:26,000 --> 00:00:27,000
We'll call that KUB.

10
00:00:27,000 --> 00:00:33,000
Bob knows his private key that corresponds to the public key that Alice

11
00:00:33,000 --> 00:00:37,000
as well as anyone else who wants to know knows is associated with Bob.

12
00:00:37,000 --> 00:00:40,000
Now Alice can send a message to Bob,

13
00:00:40,000 --> 00:00:45,000
encrypting it with Bob's public key knowing that the only one who can decrypt it

14
00:00:45,000 --> 00:00:50,000
is someone who knows Bob's private key, which should be only known to Bob.

15
00:00:50,000 --> 00:00:54,000
Bob decrypts the message using his private key.

16
00:00:54,000 --> 00:00:59,000
Now we'll have a quiz to see that everyone is understanding asymmetric cryptosystems.

17
00:00:59,000 --> 00:01:02,000
What correctness property does this rely on?

18
00:01:02,000 --> 00:01:04,000
Here are the three choices.

19
00:01:04,000 --> 99:59:59,999
Pick the one that this private messaging system is relying about the E and the D functions.
