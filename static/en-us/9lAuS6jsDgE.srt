1
00:00:00,440 --> 00:00:02,160
Now, in real life if I want to keep other people

2
00:00:02,160 --> 00:00:05,090
from taking my things or messing with things they shouldn't, I use

3
00:00:05,090 --> 00:00:07,510
a lock to stop them. In threaded programming, we use a

4
00:00:07,510 --> 00:00:11,240
similar concept to protect memory. Let's say that inside some procedure, there's

5
00:00:11,240 --> 00:00:14,410
a block where I manipulate some data, in our example, the

6
00:00:14,410 --> 00:00:17,588
variable a. And I need to be sure that no other thread

7
00:00:17,588 --> 00:00:21,580
touches this variable while I am working on it. Whether executing

8
00:00:21,580 --> 00:00:25,870
this procedure or another one. Well then, I can declare a lock

9
00:00:25,870 --> 00:00:28,900
variable, which should reside in shared memory, and put

10
00:00:28,900 --> 00:00:31,550
the lock on before I have it do my manipulation,

11
00:00:31,550 --> 00:00:33,900
and unlock it afterwards. And I should do the

12
00:00:33,900 --> 00:00:37,470
same wherever I manipulate this variable a. If some other

13
00:00:37,470 --> 00:00:41,260
thread running this code simply accesses the shared resource

14
00:00:41,260 --> 00:00:43,930
without using the lock, it won't be able to stop

15
00:00:43,930 --> 00:00:46,760
him. But if he does try to acquire the lock

16
00:00:46,760 --> 00:00:51,420
first, then this call to mutex lock will block until

17
00:00:51,420 --> 00:00:54,590
the lock variable shows that has been unlocked. And

18
00:00:54,590 --> 00:00:57,350
only then will this code proceed. And, of course, if

19
00:00:57,350 --> 00:01:00,220
the schedule had worked things out so that this call

20
00:01:00,220 --> 00:01:03,050
had been called first, then he would get the lock.

21
00:01:03,050 --> 00:01:06,520
And this call to acquire the mutex lock would block

22
00:01:06,520 --> 00:01:10,320
until this data manipulation was finished, and the mutex variable

23
00:01:10,320 --> 00:01:13,320
had been unlocked. And this way the threads are able

24
00:01:13,320 --> 00:01:16,490
to mutually exclude each other from using resources, hence these

25
00:01:16,490 --> 00:01:17,570
are called mutex locks.
