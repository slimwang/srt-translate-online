1
00:00:00,940 --> 00:00:02,319
Let's dive into Firebase storage and

2
00:00:02,319 --> 00:00:04,669
security rules by learning
about the keyword match.

3
00:00:06,190 --> 00:00:10,470
The match of a rule matches
a specific storage path so

4
00:00:10,470 --> 00:00:13,330
that you can apply
a rule to that location.

5
00:00:13,330 --> 00:00:15,820
Every path starts with a forward slash.

6
00:00:15,820 --> 00:00:17,800
Followed by a path segment.

7
00:00:17,800 --> 00:00:19,560
And there are three
types of path segments.

8
00:00:20,719 --> 00:00:23,160
Here's the first type of path segment.

9
00:00:23,160 --> 00:00:25,140
It's called a single segment.

10
00:00:25,140 --> 00:00:29,030
A single segment is a literal
reference to a single path name.

11
00:00:29,030 --> 00:00:34,039
For example,
this images/profilePhoto.png matches

12
00:00:34,039 --> 00:00:38,119
the specific file named profilephoto.png
in the images directory.

13
00:00:39,189 --> 00:00:42,469
The second type of path segment is
called a single segment wild card.

14
00:00:43,560 --> 00:00:48,170
This is a variable that can refer
to any path at that path level.

15
00:00:48,170 --> 00:00:51,109
The variable name is
surrounded by curly braces.

16
00:00:51,109 --> 00:00:54,450
This is often used to
match multiple file pads.

17
00:00:54,450 --> 00:00:58,480
For example if you wanted to match all
files that were stored directly within

18
00:00:58,479 --> 00:01:02,229
the images path you could use
this match statement here.

19
00:01:02,229 --> 00:01:06,219
Two notes,
first the variable name can be anything.

20
00:01:06,219 --> 00:01:11,099
Second, storage rules do not cascade
in the same way database roles do.

21
00:01:11,099 --> 00:01:16,159
So for example, this rule here
would match images/lyla.jpg.

22
00:01:16,159 --> 00:01:21,439
But it would not match
images/profilepictures/lyla.jpg which is

23
00:01:21,439 --> 00:01:26,929
why we have the next match option which
is called the multisegment wildcard.

24
00:01:26,930 --> 00:01:30,750
The multisegment wildcard matches
any number of past segments at or

25
00:01:30,750 --> 00:01:32,750
below the specified path.

26
00:01:32,750 --> 00:01:36,019
The syntax is almost the same as
the single segment wildcard but

27
00:01:36,019 --> 00:01:38,121
it ends with a =**.

28
00:01:38,121 --> 00:01:40,620
The multi-segment wildcard rule

29
00:01:40,620 --> 00:01:43,380
is handy because it does
cascade to everything below it.

30
00:01:43,379 --> 00:01:47,599
A multi-segment wildcard let's
you declare cascading explicitly.

31
00:01:47,599 --> 00:01:52,644
In this case, if you wanted to
match both images/jarrod.jpg and

32
00:01:52,644 --> 00:01:55,545
images/profilePics/lyla.jpg.

33
00:01:55,546 --> 00:01:58,630
The multi segment wildcard
is the way to go.

34
00:01:58,629 --> 00:02:03,110
It would even match
images/profliePics/January/User1/Puf.-

35
00:02:03,111 --> 00:02:03,520
jpg.

36
00:02:03,519 --> 00:02:09,189
The only constraint for matching is that
it has to start with this images path,

37
00:02:09,189 --> 00:02:13,210
after that the multicard segment
wildcard will match everything.

38
00:02:13,210 --> 00:02:15,210
Now that you know a little
bit more about matching and

39
00:02:15,210 --> 00:02:18,390
Firebase Storage,
let's play matchmaker in this next quiz.

