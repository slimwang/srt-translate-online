1
00:00:00,570 --> 00:00:05,520
The Promise object is used for
deferred and asynchronous computations.

2
00:00:05,520 --> 00:00:06,820
Okay, great.

3
00:00:06,820 --> 00:00:10,870
This statement is less than helpful
if you're understanding of the word

4
00:00:10,870 --> 00:00:13,410
asynchronous is less than certain.

5
00:00:13,410 --> 00:00:17,190
So, the question is,
what is asynchronous work?

6
00:00:17,190 --> 00:00:21,590
Asynchronous work happens at
an unknown or unpredictable time.

7
00:00:21,590 --> 00:00:23,900
Normally code is synchronise.

8
00:00:23,900 --> 00:00:26,950
One statement executes, like this one,
and there's a guarantee that

9
00:00:26,950 --> 00:00:29,590
the next statement executes
immediately afterwards.

10
00:00:30,620 --> 00:00:34,020
Threading on processors doesn't
necessarily guarantee that, however,

11
00:00:34,020 --> 00:00:36,860
the JavaScript threading model
ensures that for all intents and

12
00:00:36,860 --> 00:00:39,730
purposes, JavaScript runs
in a single timeline.

13
00:00:40,840 --> 00:00:42,540
Unlike synchronise code.

14
00:00:42,540 --> 00:00:47,630
Asynchronous code is not guaranteed to
execute in a single unbroken timeline.

15
00:00:47,630 --> 00:00:50,780
In fact,
you should assume that you have no idea

16
00:00:50,780 --> 00:00:53,680
when asynchronous
operations will complete.

17
00:00:53,680 --> 00:00:57,440
In a situation like this, for example,
you can't even assume that just because

18
00:00:57,440 --> 00:01:01,630
you sent out the first request first and
the second request second,

19
00:01:01,630 --> 00:01:04,650
that the first request will
overturn sooner than the second.

20
00:01:05,700 --> 00:01:09,780
Assume that either order is equally
likely, as the fact that one or

21
00:01:09,780 --> 00:01:12,650
both requests just
might fail altogether.

22
00:01:12,650 --> 00:01:16,670
Network requests aren't the only
examples of asynchronous code.

23
00:01:16,670 --> 00:01:20,380
Any code that relies on processes like
these, like events, like threads, or

24
00:01:20,380 --> 00:01:25,450
just some kind of unknowable
finishing time are asynchronous.

25
00:01:25,450 --> 00:01:30,480
So, the big question is, what is the
best way to handle asynchronous code?

26
00:01:33,450 --> 00:01:35,830
Okay, the answer is obviously promises.

27
00:01:35,830 --> 00:01:36,430
That's why you're here.
