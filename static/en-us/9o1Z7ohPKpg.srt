1
00:00:00,180 --> 00:00:00,920
OK.

2
00:00:00,920 --> 00:00:03,390
Hopefully your SavedGifsViewsController
is ready to go.

3
00:00:03,390 --> 00:00:07,160
Now let's add the ability
to manage a collection.

4
00:00:07,160 --> 00:00:08,815
If we look in the Objective C project,

5
00:00:08,815 --> 00:00:11,354
we can see that
the SavedGifsViewsController conforms to

6
00:00:11,354 --> 00:00:12,858
the UICollectionViewDelegate,

7
00:00:12,858 --> 00:00:17,500
the CollectionViewDataSource, and
the UICollectionViewDelegateFlowLayout.

8
00:00:17,500 --> 00:00:20,890
So when I add all three of
those to the Swift file.

9
00:00:20,890 --> 00:00:22,550
Now let's take a look
at the implementation.

10
00:00:23,640 --> 00:00:26,780
If we scroll down to where
the datasource methods are,

11
00:00:26,780 --> 00:00:28,590
we can see our familiar friends.

12
00:00:28,590 --> 00:00:32,580
NumberOfItemsInSection and
cellForItemAtIndexPath.

13
00:00:32,580 --> 00:00:34,590
Cool, no surprises there.

14
00:00:34,590 --> 00:00:37,720
Let's switch back to the swift project,
add our protocols and

15
00:00:37,720 --> 00:00:39,030
then implement those methods.

16
00:00:41,380 --> 00:00:46,160
I've got a mark here for
the delegate and data source methods.

17
00:00:46,160 --> 00:00:50,830
And now we want to add collectionView,

18
00:00:50,830 --> 00:00:54,930
numberOfItemsInSection, and
cellForItemsAtIndexPath.

19
00:00:56,570 --> 00:00:58,130
For numberOfItemsInSection,

20
00:00:58,130 --> 00:01:00,909
we're just going to want to
return the number of saved gifts.

21
00:01:01,940 --> 00:01:06,130
And oops we're not really ready to
implement self into the next path yet

22
00:01:06,130 --> 00:01:08,200
because we haven't made our custom cell.

23
00:01:08,200 --> 00:01:10,300
So let's make our custom cell.

24
00:01:10,300 --> 00:01:14,890
Go ahead and add the GifCell class and
have it inherit from CollectionViewCell.

25
00:01:14,890 --> 00:01:19,160
Open up storyboard and
find the scene called my collection.

26
00:01:19,160 --> 00:01:22,550
Inside the collection view,
you'll see the GifCell now go ahead and

27
00:01:22,550 --> 00:01:26,930
drag an outlet from the GIF image
view into the GifCell class.

28
00:01:26,930 --> 00:01:29,770
And then also in the GifCell class
we're going to need a function

29
00:01:29,770 --> 00:01:33,890
called configureForGif and
this is where we'll set the GIF image.

30
00:01:34,960 --> 00:01:37,770
And now let's switch back to
the saved GIF view controller.

31
00:01:38,860 --> 00:01:41,430
And of course if we want to
be able to see our GifCell,

32
00:01:41,430 --> 00:01:42,890
we should give it a size.

33
00:01:42,890 --> 00:01:44,380
So let's go here to our mark for

34
00:01:44,380 --> 00:01:47,580
the CollectionViewFlowLayout and
here we are.

35
00:01:47,580 --> 00:01:50,460
Here's the method for
sizeForItemAtIndexPath.

36
00:01:51,780 --> 00:01:56,240
So the width of our cell is going to
be approximately half the width of

37
00:01:56,240 --> 00:01:58,485
the collectionView.frame.

38
00:01:58,485 --> 00:02:02,910
But of course this method
expects us to return a size and

39
00:02:02,910 --> 00:02:06,070
we're going to need a margin as well.

40
00:02:06,070 --> 00:02:08,460
So let's go up to
the top of our class and

41
00:02:08,460 --> 00:02:12,280
create a constant to hold the margin.

42
00:02:12,280 --> 00:02:16,790
You'll want to make this
cell margin a CgFloat so

43
00:02:16,790 --> 00:02:23,520
that it plays nicely with the CgSize and
we incorporate it into our widths.

44
00:02:23,520 --> 00:02:26,950
And then, of course,
we'll want to return the size,

45
00:02:26,950 --> 00:02:29,560
and we should be good to go.

46
00:02:29,560 --> 00:02:33,010
So this ought to give us two columns
of cells in our collectionView.

47
00:02:33,010 --> 00:02:35,870
And let's not forget to implement
cellForItemAtIndexPath.

48
00:02:37,200 --> 00:02:42,024
So of course we want to dequeue a cell
we want to cast it to a GifCell.

49
00:02:42,024 --> 00:02:45,495
We'll grab a gif from
the savedGifs array and

50
00:02:45,495 --> 00:02:48,337
we'll figure the cell for that gif.

51
00:02:48,337 --> 00:02:49,802
[BLANK_AUDIO]

52
00:02:49,802 --> 00:02:54,116
Now sometimes when I just want to see my
cells before I have data a put in them

53
00:02:54,116 --> 00:02:57,470
I'll make them a weird color so
they stand out.

54
00:02:57,470 --> 00:03:00,460
So I just went into storyboard and
I made them this blue color.

55
00:03:01,480 --> 00:03:03,300
And just for testing purposes,

56
00:03:03,300 --> 00:03:06,260
I'm returning 5 here in
number OfItemsInSection,

57
00:03:06,260 --> 00:03:11,170
and then I commented out these two
lines in cell for item index path.

58
00:03:11,170 --> 00:03:15,500
And then when I run the app what I see
is this so I can see my collectionView

59
00:03:15,500 --> 00:03:19,340
and I can see my cells and I can tell
that their space the way I want them.

60
00:03:19,340 --> 00:03:23,120
I can also see that this view is
kind of blocking my collection.

61
00:03:23,120 --> 00:03:25,010
If you look in the Objective C project.

62
00:03:25,010 --> 00:03:28,470
You'll notice that this view that has
the pink squares is called the empty

63
00:03:28,470 --> 00:03:32,690
view, because it's the view that's meant
to appear when the collection is empty.

64
00:03:32,690 --> 00:03:34,730
My collection isn't empty right now.

65
00:03:34,730 --> 00:03:36,850
So I'm going to go ahead and
add an outlet for

66
00:03:36,850 --> 00:03:41,760
this empty view and
I'll add a line to viewWillAppear so

67
00:03:41,760 --> 00:03:45,662
that when the number of savedGifs does
not equal zero the emptyView is hidden.

68
00:03:47,120 --> 00:03:51,030
Go ahead and add an outlet to
storyboard for the collectionView and

69
00:03:51,030 --> 00:03:55,150
then while we're here and
viewWillAppear we can call reload data.

70
00:03:55,150 --> 00:03:57,690
And now you can move on to work
on the preview controller.
