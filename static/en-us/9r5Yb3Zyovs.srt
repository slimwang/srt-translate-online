1
00:00:00,000 --> 00:00:07,150
And the answer here is that the approximation factor is 2.38, so it's performing worse

2
00:00:07,150 --> 00:00:11,410
than that take two algorithm, which have an approximation factor of 2.

3
00:00:11,410 --> 00:00:16,760
So what that means is that the greedy algorithm, although the strategy might sound good,

4
00:00:16,760 --> 00:00:20,480
doesn't perform as well as the take 2 algorithm, which is guaranteed to have

5
00:00:20,480 --> 00:00:26,830
an approximation factor of 2 and that's why it's so important to prove properties of algorithms

6
00:00:26,830 --> 00:00:30,260
and not just saying--well, this is a sound strategy, this one sounds good,

7
00:00:30,260 --> 00:00:36,360
because while it may sound good, it can actually in some cases perform really bad.

8
00:00:36,360 --> 00:00:38,520
So does this mean that the greedy algorithm is useless and we should always use

9
00:00:38,520 --> 00:00:40,720
and we should always use the take 2 algorithm.

10
00:00:40,720 --> 00:00:47,250
Well, not really because actually for most instances that you would encounter in a real world setting,

11
00:00:47,250 --> 00:00:51,240
so for example a telecommunications networks as Alice is trying to do--

12
00:00:51,240 --> 99:59:59,999
this algorithm here will perform very well, but it is not guaranteed to perform very well.
