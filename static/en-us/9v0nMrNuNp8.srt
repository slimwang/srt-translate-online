1
00:00:00,000 --> 00:00:05,000
In this problem, we're going to build on some of the JavaScript lesson

2
00:00:05,000 --> 00:00:06,000
we did in the previous one,

3
00:00:06,000 --> 00:00:10,000
and we're going to handle identifiers, numbers, and strings.

4
00:00:10,000 --> 00:00:15,000
Real quick, let's ask ourself, what are the differences between those?

5
00:00:15,000 --> 00:00:19,000
So we have an identifier, and as we talked about it in lecture,

6
00:00:19,000 --> 00:00:23,000
identifier is a name for something, usually a function or a variable.

7
00:00:23,000 --> 00:00:27,000
We then have numbers, and we're going to be able to handle numbers such as

8
00:00:27,000 --> 00:00:33,000
-1, 2., 3.5, etc.

9
00:00:33,000 --> 00:00:35,000
Then we have strings.

10
00:00:35,000 --> 00:00:42,000
This string contains the word, "Blah, an escaped quote--so the string contains this double quote,

11
00:00:42,000 --> 00:00:47,000
Blah, question mark--I don't know if you heard my raised pitch at the end. Blah?--

12
00:00:47,000 --> 00:00:51,000
and then another double quote, and it ends.

13
00:00:51,000 --> 00:00:54,000
We indicate the end of the string with unescaped double quotes.

14
00:00:54,000 --> 00:00:58,000
So we want to write regular expressions to match these things

15
00:00:58,000 --> 00:01:03,000
because that's how we're going to write the functions that tell the lexer how to tokenize it.

16
00:01:03,000 --> 00:01:06,000
So let's do the identifier first.

17
00:01:06,000 --> 00:01:08,000
This one's pretty straight forward.

18
00:01:08,000 --> 00:01:11,000
We need at least 1 letter, and it can't be an underscore,

19
00:01:11,000 --> 00:01:13,000
but the casing doesn't matter.

20
00:01:13,000 --> 00:01:17,000
After that, it can be as long as we want, and it can have as many underscores as we want

21
00:01:17,000 --> 00:01:21,000
and then letters as well where the casing doesn't matter.

22
00:01:21,000 --> 00:01:24,000
So that's our regular expression for the identifier.

23
00:01:24,000 --> 00:01:27,000
For the number, it might be a little trickier.

24
00:01:27,000 --> 00:01:34,000
Let's say we have this number--542.555.

25
00:01:34,000 --> 00:01:37,000
We're going to write a regular expression to match this as well as all the other numbers,

26
00:01:37,000 --> 00:01:42,000
but this has all the pieces that we need to consider in a regular expression.

27
00:01:42,000 --> 00:01:44,000
The first thing is the minus sign.

28
00:01:44,000 --> 00:01:48,000
The minus sign can only occur at the beginning, and it's also optional.

29
00:01:48,000 --> 00:01:54,000
We then can match at least 1 but possibly more numbers up into a decimal point

30
00:01:54,000 --> 00:01:58,000
if it exists, but it also can just end there such as the -1 we have here.

31
00:01:58,000 --> 00:02:02,000
So the numbers [0 - 9], and it has to be 1 or more of them.

32
00:02:02,000 --> 00:02:05,000
This goes there. This matches that part.

33
00:02:05,000 --> 00:02:09,000
Now we're going to have a chunk that's optional.

34
00:02:09,000 --> 00:02:13,000
If we go down this route, we have to have a period,

35
00:02:13,000 --> 00:02:17,000
and we have to escape the period because it has meaning in a regular expression.

36
00:02:17,000 --> 00:02:22,000
But after the period, we can only have numbers, and there can be 0 or more of them.

37
00:02:22,000 --> 00:02:27,000
0 for the case in where you just end in a period, which is often denoted to mean

38
00:02:27,000 --> 00:02:28,000
you want a floating point.

39
00:02:28,000 --> 00:02:32,000
But in this case, we're going to treat everything as a floating point.

40
00:02:32,000 --> 00:02:33,000
And then a star.

41
00:02:33,000 --> 00:02:36,000
So that's a regular expression.

42
00:02:36,000 --> 00:02:42,000
To go back, the dot goes here and these 5's go there.

43
00:02:42,000 --> 00:02:44,000
Now we just want to do strings.

44
00:02:44,000 --> 00:02:46,000
We have a regular expression.

45
00:02:46,000 --> 00:02:50,000
The first thing and the last thing we have to match are going to be the double quotes,

46
00:02:50,000 --> 00:02:54,000
and I use a single quote because I don't have to escape the double quotes in this,

47
00:02:54,000 --> 00:02:56,000
and that makes it nice.

48
00:02:56,000 --> 00:03:03,000
In between the double quotes, we can have 0 or more characters inside of them.

49
00:03:03,000 --> 00:03:07,000
Those characters can be in 2 groups.

50
00:03:07,000 --> 00:03:13,000
It's either escaped--like we have here--or it's just a character by itself--all the other letters.

51
00:03:13,000 --> 00:03:16,000
So let's do the not escaped first.

52
00:03:16,000 --> 00:03:20,000
That's going to be anything that's not a double quote or a backslash.

53
00:03:20,000 --> 00:03:24,000
We have to escape the backslash if we want to match that,

54
00:03:24,000 --> 00:03:26,000
so anything but those.

55
00:03:26,000 --> 00:03:32,000
So it's going to be everything here, all of this, but not these quotes right here

56
00:03:32,000 --> 00:03:35,000
because there's a backslash or a quote there.

57
00:03:35,000 --> 00:03:40,000
If we get any one of those, we're going to match a different rule

58
00:03:40,000 --> 00:03:44,000
where we have to have a backslash, but after that backslash, we can have any character,

59
00:03:44,000 --> 00:03:45,000
and that's what the period means.

60
00:03:45,000 --> 00:03:49,000
And I forgot to put my question mark. There we go.

61
00:03:49,000 --> 00:03:51,000
That's the regular expression that we're going to use.

62
00:03:51,000 --> 00:03:55,000
As you can see, as these regular expressions get more complicated, doing more complex things,

63
00:03:55,000 --> 00:04:00,000
they get messy. Messy--very, very quickly.

64
00:04:00,000 --> 00:04:04,000
Sometimes it's really conventient to write a regular expression like this.

65
00:04:04,000 --> 00:04:06,000
Sometimes you might just write a bit of code to do the same thing.

66
00:04:06,000 --> 00:04:10,000
But in this case, regular expressions are super powerful and super fun,

67
00:04:10,000 --> 00:04:12,000
and that's what we're doing here.

68
00:04:12,000 --> 00:04:14,000
Here I have my solution.

69
00:04:14,000 --> 00:04:16,000
I'm going to have 3 types of tokens--

70
00:04:16,000 --> 00:04:19,000
the identifier, the number, and the string, which we went over.

71
00:04:19,000 --> 00:04:24,000
I have the identifier, which is exactly the regular expression we came up with.

72
00:04:24,000 --> 00:04:26,000
All we do is identify that type.

73
00:04:26,000 --> 00:04:30,000
For the number, when it matches, we're going to call float,

74
00:04:30,000 --> 00:04:36,000
which converts the string value that is in the token when we get it

75
00:04:36,000 --> 00:04:38,000
to an actual floating-point number.

76
00:04:38,000 --> 00:04:42,000
And then for the string case, we're going to strip off the quotes and just get the contents

77
00:04:42,000 --> 00:04:44,000
of the string itself--

78
00:04:44,000 --> 00:04:45,000
that's what matters most--

79
00:04:45,000 --> 99:59:59,999
ignore whitespace, have to deal with new lines and the errors as well.
