1
00:00:00,420 --> 00:00:03,460
For the solution within forecast fragment, we

2
00:00:03,460 --> 00:00:08,310
implemented FetchWeather/task, which extends AsyncTask. The generics

3
00:00:08,310 --> 00:00:13,518
we use are just Void, and this is fine for now. Then within the doInBackground

4
00:00:13,518 --> 00:00:16,014
method, we copied our networking codes snippet,

5
00:00:16,014 --> 00:00:18,610
here. It's the same, except [INAUDIBLE] in

6
00:00:18,610 --> 00:00:21,600
certain cases we return null instead of

7
00:00:21,600 --> 00:00:24,010
setting the forecast JSON string to be null.

8
00:00:25,010 --> 00:00:28,770
Previously, the code was an on create view, which expected us

9
00:00:28,770 --> 00:00:31,370
inflate and return a view. So it's important that it got

10
00:00:31,370 --> 00:00:33,510
to the rest of the code. Even if there was an

11
00:00:33,510 --> 00:00:37,110
error in the networking code. Now that the networking code is in

12
00:00:37,110 --> 00:00:40,060
a sync task, there's really nothing that comes after this in

13
00:00:40,060 --> 00:00:42,890
the given background method. So it's fine to just bail early

14
00:00:42,890 --> 00:00:46,430
whenever there's an error. Also know that for our log messages,

15
00:00:46,430 --> 00:00:50,230
we've defined a log tag constant. At the top of this task.

16
00:00:51,640 --> 00:00:55,940
This log tag is defined to be the name of the FetchWeatherTask.class. The

17
00:00:55,940 --> 00:00:57,670
reason we use this syntax instead

18
00:00:57,670 --> 00:01:01,170
of declaring a string FetchWeatherTask, it because

19
00:01:01,170 --> 00:01:04,370
we want these two to be in sync. If you ever rename the

20
00:01:04,370 --> 00:01:07,630
class then it will throw an exception unless you also update it here.
