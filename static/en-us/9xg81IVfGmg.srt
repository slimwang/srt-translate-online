1
00:00:00,025 --> 00:00:03,103
So let's think about how chaining would behave in a parallel setting.

2
00:00:03,103 --> 00:00:07,811
For construction, that means we have many items to put into the hash table, 1 per thread.

3
00:00:07,811 --> 00:00:12,650
Per look up, that means we have many keys to look up in the hash table; again, 1 per thread.

4
00:00:12,650 --> 00:00:14,792
And chaining has 2 main disadvantages.

5
00:00:14,792 --> 00:00:18,320
Number 1, let's say we're looking up many items, 1 per thread,

6
00:00:18,320 --> 00:00:20,388
and we know to look up 1 item,

7
00:00:20,388 --> 00:00:22,461
we calculate the hash function for that item.

8
00:00:22,461 --> 00:00:25,176
That paralyzes nicely. It's just a map operation.

9
00:00:25,176 --> 00:00:28,924
More problematic, however, is searching the link list in the bucket.

10
00:00:28,924 --> 00:00:31,201
So we have a number of threads here.

11
00:00:31,201 --> 00:00:33,926
Each thread ends up looking in a different bucket.

12
00:00:33,926 --> 00:00:36,310
This particular bucket has 3 items.

13
00:00:36,310 --> 00:00:38,280
The bucket for thread 2 has 2 items,

14
00:00:38,280 --> 00:00:41,380
but the bucket for thread 1 has many, many, many items.

15
00:00:41,380 --> 00:00:44,254
Some threads, like thread 2, might find their item right away.

16
00:00:44,254 --> 00:00:47,093
Some threads, like thread 1, for instance,

17
00:00:47,093 --> 00:00:51,859
might have to visit many or even all the items in a lengthy link list before finding its item.

18
00:00:51,859 --> 00:00:54,623
Because threads within a warp run in lock step,

19
00:00:54,623 --> 00:00:59,568
the run time of a warp is completely dependent on the slowest lookup within the warp.

20
00:00:59,568 --> 00:01:03,393
The other threads in the warp have to wait until the slowest item is found,

21
00:01:03,408 --> 00:01:06,633
and this behavior, as you might imagine, is bad.
