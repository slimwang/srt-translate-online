1
00:00:00,000 --> 00:00:03,000
To recap a little bit, we have our software under test,

2
00:00:03,000 --> 00:00:05,000
and it provides some APIs.

3
00:00:05,000 --> 00:00:11,000
Each API's collection of functions and most of the work that we have during testing

4
00:00:11,000 --> 00:00:15,000
is going to be calling these functions with various values and looking at the results.

5
00:00:15,000 --> 00:00:19,000
Additionally, the software under test is going to use APIs provided by, for example,

6
00:00:19,000 --> 00:00:22,000
the operating system or the programming language runtime,

7
00:00:22,000 --> 00:00:27,000
and a separate kind of testing is looking at how the software under test

8
00:00:27,000 --> 00:00:33,000
responds to return codes and similar given to it by the APIs that it uses.

9
00:00:33,000 --> 00:00:36,000
That would be great if both of these kinds of testing

10
00:00:36,000 --> 00:00:40,000
represented a complete picture of everything that we need to test,

11
00:00:40,000 --> 00:00:42,000
but in fact, that's not the case, and there are some added complications

12
00:00:42,000 --> 00:00:44,000
that we're going to talk about now.

13
00:00:44,000 --> 00:00:48,000
The issue is that the overt explicit interfaces that we see here

14
00:00:48,000 --> 00:00:52,000
don't represent all the possible inputs and outputs that we might care about.

15
00:00:52,000 --> 00:00:57,000
For example, on the input side it's completely possible that our software under test

16
00:00:57,000 --> 00:00:59,000
cares about the time at which inputs arrive.

17
00:00:59,000 --> 00:01:04,000
So it might be the case that our software responds differently

18
00:01:04,000 --> 00:01:07,000
if 2 inputs arrive very close together

19
00:01:07,000 --> 00:01:11,000
than it does if 2 inputs arrive separated by a large amount of time.

20
00:01:11,000 --> 00:01:13,000
And if this seems silly, just consider, for example,

21
00:01:13,000 --> 00:01:16,000
the software that processes mouse clicks.

22
00:01:16,000 --> 00:01:18,000
Two clicks very close together represent a double click,

23
00:01:18,000 --> 00:01:23,000
and that's interpreted very differently from 2 mouse clicks that occur farther apart in time

24
00:01:23,000 --> 00:01:26,000
which count as 2 single mouse clicks.

25
00:01:26,000 --> 00:01:28,000
Another example is something like a web browser

26
00:01:28,000 --> 00:01:35,000
where if the data corresponding to a web page is returned in a short window of time,

27
00:01:35,000 --> 00:01:38,000
this data will get rendered as a web page.

28
00:01:38,000 --> 00:01:44,000
But if the data that comes from the network is scattered across too much time,

29
00:01:44,000 --> 00:01:46,000
this is going to result in some sort of a time-out--

30
00:01:46,000 --> 00:01:49,000
that is to say, the software under test, which is our web browser,

31
00:01:49,000 --> 00:01:51,000
will render some sort of an error page

32
00:01:51,000 --> 00:01:54,000
instead of actually rendering the data if it comes too slowly.

33
00:01:54,000 --> 00:01:57,000
Both of these examples that we just looked at are fairly easy to test

34
00:01:57,000 --> 00:02:01,000
because in each case, we have this sort of binary distinction

35
00:02:01,000 --> 00:02:03,000
between, in one case, the data arriving quickly--

36
00:02:03,000 --> 00:02:07,000
that is to say, a double click or a complete web page arriving before the time-out--

37
00:02:07,000 --> 00:02:10,000
and in the other case, we have data arriving too slowly--

38
00:02:10,000 --> 00:02:15,000
that is to say, 2 single clicks or a web page that takes so long to arrive that we time out.

39
00:02:15,000 --> 99:59:59,999
In other cases, the timing-dependent input can make our lives significantly more complicated.
