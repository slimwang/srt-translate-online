1
00:00:00,048 --> 00:00:02,528
So to implement this I’ve modified the RAN

2
00:00:02,528 --> 00:00:05,383
procedure to input a parameter vector of three

3
00:00:05,383 --> 00:00:08,124
parameters. And for reasons that will be obvious

4
00:00:08,124 --> 00:00:11,123
later, I have a print flag that I default to false.

5
00:00:11,123 --> 00:00:14,293
I have the same initial parameters as before,

6
00:00:14,293 --> 00:00:16,300
speed and arrow cross stick arrow – into the

7
00:00:16,300 --> 00:00:19,198
cross stick arrow, I set my fifth parameter

8
00:00:19,198 --> 00:00:21,416
and to make it a little bit more obvious how

9
00:00:21,416 --> 00:00:23,261
what the effect of parameter selection has on

10
00:00:23,261 --> 00:00:26,267
my arrow. I also set the total number equations

11
00:00:26,267 --> 00:00:29,690
to N times 2 and when I count the total cross

12
00:00:29,690 --> 00:00:32,518
stick arrow, I only counted from step N 1,

13
00:00:32,518 --> 00:00:34,902
so I give the algorithm a chance to convert to

14
00:00:34,902 --> 00:00:37,243
zero for N steps, they don’t count the cross

15
00:00:37,243 --> 00:00:39,450
stick arrow, but like to know how the cross

16
00:00:39,450 --> 00:00:41,546
stick arrow evolves quite dramatically from

17
00:00:41,546 --> 00:00:46,164
step 101 on to 200. If the print flag is set, I

18
00:00:46,164 --> 00:00:49,617
set the output here in degrees and not in variance

19
00:00:49,617 --> 00:00:52,828
and I return my average arrow before value.

20
00:00:52,828 --> 00:00:55,533
So I wanted to write the routine twiddle and

21
00:00:55,533 --> 00:00:57,570
the routine should find the optimal parameters

22
00:00:57,570 --> 00:00:59,241
and return them to me. So I want you to

23
00:00:59,241 --> 00:01:02,130
implement the twiddle with a tolerance and

24
00:01:02,130 --> 00:01:06,168
threshold of 0.001. In one twiddle, it shows

25
00:01:06,168 --> 00:01:10,050
the parameters over time and the cross

26
00:01:10,050 --> 00:01:12,593
stick arrow. And this cross stick arrow

27
00:01:12,593 --> 00:01:16,136
very quickly goes to zero. In fact after a

28
00:01:16,136 --> 00:01:20,031
few iterations, 107 in my implementation

29
00:01:20,031 --> 00:01:23,621
we get a cross stick arrow of 3.611 to the

30
00:01:23,621 --> 00:01:26,060
minus 17th. And here is the typical control

31
00:01:26,060 --> 00:01:29,364
one, you see my X, my Y, my orientation,

32
00:01:29,364 --> 00:01:31,309
my drift is constant, that’s my constant

33
00:01:31,309 --> 00:01:33,713
drift parameters and the beginning of the

34
00:01:33,713 --> 00:01:37,625
arrows are 195 on average. But after a short

35
00:01:37,625 --> 00:01:40,725
amount of time, you find that my Y arrow

36
00:01:40,725 --> 00:01:43,458
goes down to 10 to the minus 6 and stays

37
00:01:43,458 --> 00:01:45,788
there, which means our controller is really,

38
00:01:45,788 --> 00:01:49,604
really good in tracking our desired location.

39
00:01:49,604 --> 00:01:52,273
In our final control error between time step

40
00:01:52,273 --> 00:01:55,999
100 and 200 is 3.611. So I wanted to

41
00:01:55,999 --> 00:01:58,748
implement twiddle, we might change something

42
00:01:58,748 --> 00:02:01,470
on the vowel set up, but when you run it,

43
00:02:01,470 --> 00:02:03,859
it will be such that if you want a full PED

44
00:02:03,859 --> 00:02:05,866
controller and find the optimal parameters

45
00:02:05,866 --> 00:02:07,890
that the final control error, will be really, really

46
00:02:07,890 --> 00:02:10,830
small and that’s how we’ll checking.
