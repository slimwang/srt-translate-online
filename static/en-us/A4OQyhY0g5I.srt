1
00:00:00,260 --> 00:00:04,810
Now, many of you, because this is
a graduate course intended for computer

2
00:00:04,810 --> 00:00:08,340
science, I'm going to assume you've seen
some form of an algorithms class, and

3
00:00:08,340 --> 00:00:11,360
you may have heard that there's
something called a graph cut algorithm.

4
00:00:11,360 --> 00:00:14,150
And a graph cut algorithm
does exactly what you think.

5
00:00:14,150 --> 00:00:15,130
It cuts a graph.

6
00:00:15,130 --> 00:00:18,870
So here I've got a graph and
the idea was originally it had lots of

7
00:00:18,870 --> 00:00:22,960
connections in it, and when I'm all
done, I've decided to break this graph

8
00:00:22,960 --> 00:00:26,590
on those four links to create two s,
different graphs, a and b.

9
00:00:26,590 --> 00:00:28,740
And they're totally d, disconnected, so

10
00:00:28,740 --> 00:00:30,330
those would be two
segments in our image.

11
00:00:31,630 --> 00:00:36,190
And the idea is that the cost
of a cut is quite simply just

12
00:00:36,190 --> 00:00:39,750
the cost of all of
the segments that you broke.

13
00:00:39,750 --> 00:00:42,090
So that's what this thing shows you,
here.

14
00:00:42,090 --> 00:00:45,430
I take, for all of the,
if there's a p in a, and q in b,

15
00:00:45,430 --> 00:00:47,360
and I've separated a and b.

16
00:00:47,360 --> 00:00:50,610
What's the cost between all of those?

17
00:00:50,610 --> 00:00:54,490
And a graph cut would give you
a segmentation of the image.

18
00:00:54,490 --> 00:00:59,150
So the question becomes, what is a good
graph cut, and how do you find one?

19
00:00:59,150 --> 00:01:03,130
So there are algorithms called min-cut
algorithms, sometimes called max-flow

20
00:01:03,130 --> 00:01:07,200
because they're they're duels of each
other, they're the same, that allow you

21
00:01:07,200 --> 00:01:12,646
to find that segmentation in
a relatively not too complex a matter.

22
00:01:12,646 --> 00:01:16,400
Fast min-cut algorithms exist.

23
00:01:16,400 --> 00:01:19,350
So the original min-cut Fulkem,
Fulk, Fulk and

24
00:01:19,350 --> 00:01:24,670
Fulkerson, you may have learned there
are subsequent more rapid ones.

25
00:01:24,670 --> 00:01:26,510
We're not going to go into those here.

26
00:01:26,510 --> 00:01:30,220
All you need to know is that you can
go to your local algorithm store and

27
00:01:30,220 --> 00:01:32,570
buy yourself a good
graph cut algorithm and

28
00:01:32,570 --> 00:01:35,810
the more you can spend the faster
a graph cut algorithm you can get.

29
00:01:35,810 --> 00:01:38,370
And the idea is that,
that would partition your graph.

30
00:01:38,370 --> 00:01:42,300
A problem though,
if we just use min-cut for

31
00:01:42,300 --> 00:01:47,550
doing segmentation, is that
min-cut by definition is going to

32
00:01:47,550 --> 00:01:52,670
try to pull out little segments that
have as few connections as possible.

33
00:01:52,670 --> 00:01:57,540
So what it tends to do, is it tends to
pull off very small little segments.

34
00:01:57,540 --> 00:02:01,890
because by definition a little segment
will only connect to a small number of

35
00:02:01,890 --> 00:02:03,050
other nodes.

36
00:02:03,050 --> 00:02:05,800
So, really what you want to do is
you want to something a little bit

37
00:02:05,800 --> 00:02:07,090
smarter than that.

38
00:02:07,090 --> 00:02:07,680
In an intent,

39
00:02:07,680 --> 00:02:11,290
in fact, what you want to do is what's
referred to as normalized cuts.
