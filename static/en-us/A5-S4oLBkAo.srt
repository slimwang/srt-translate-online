1
00:00:00,240 --> 00:00:03,815
You've just written the same algorithm twice, once for countries and then for

2
00:00:03,815 --> 00:00:07,673
cars. And you probably passionately wish to never again have to do that for any

3
00:00:07,673 --> 00:00:11,817
other class. So, let's see how we can come up with a generic way of computing

4
00:00:11,817 --> 00:00:17,486
averages. The trouble was that the cars and countries had different ways of

5
00:00:17,486 --> 00:00:22,912
measuring whatever it is that they wanted to be measured by. By with the car it

6
00:00:22,912 --> 00:00:27,455
was the fuel efficiency, with the country it was the area. But let's say they

7
00:00:27,455 --> 00:00:31,702
both agreed on what it meant for them to be measured. Let's say, they both

8
00:00:31,702 --> 00:00:36,787
implemented a common interface. I call this interface measurable. Let's look

9
00:00:36,787 --> 00:00:41,858
inside. It just has a single method, getMeasure. We expect each class that

10
00:00:41,858 --> 00:00:44,834
implements this interface to provide an appropriate implementation for

11
00:00:44,834 --> 00:00:51,193
getMeasure. For example, the country class implements getMeasure to return the

12
00:00:51,193 --> 00:00:57,943
area. The car class has the same method, return miles per gallon. Now, we can

13
00:00:57,943 --> 00:01:01,365
implement a single method in the data class that would take an array of

14
00:01:01,365 --> 00:01:06,715
measurable objects and it will compute the average measure. That's for you to

15
00:01:06,715 --> 00:01:10,514
complete. In the tester, we'll call this method, first on an array of

16
00:01:10,514 --> 00:01:16,063
countries, then we call the same method again on an array of cars. That's what

17
00:01:16,063 --> 00:01:19,969
I mean with the reuse, this method only has to be written once and we can call

18
00:01:19,969 --> 00:01:25,645
it with data sets containing objects of different classes. Now go ahead and

19
00:01:25,645 --> 00:01:29,049
complete the implementation of the average method.
