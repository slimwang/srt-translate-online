1
00:00:00,320 --> 00:00:02,840
Making a web app work offline or

2
00:00:02,840 --> 00:00:07,340
have amazing performance on slow
networks used to be extremely hard.

3
00:00:07,340 --> 00:00:10,130
But service workers changed that.

4
00:00:10,130 --> 00:00:13,850
I've asked Jake Archibald to
explain service workers for us.

5
00:00:13,850 --> 00:00:14,950
Jake, take it away.

6
00:00:16,530 --> 00:00:19,650
&gt;&gt; Service workers is a JavaScript realm
execution context in an environment

7
00:00:19,650 --> 00:00:23,020
settings object with its own event
loop and node document dependency.

8
00:00:23,020 --> 00:00:25,850
Unlike similar context,
which is shared workers, this context's

9
00:00:25,850 --> 00:00:29,380
life cycle is dictated by life cycle and
functional extendable events and

10
00:00:29,380 --> 00:00:32,130
their associated array of
extended life cycle promises.

11
00:00:32,130 --> 00:00:35,166
Although, the user agent may apply
a grace period to avoid startup shutdown

12
00:00:35,166 --> 00:00:36,268
overhead between events.

13
00:00:36,268 --> 00:00:38,428
[BLANK_AUDIO]

14
00:00:38,428 --> 00:00:40,560
&gt;&gt; Okay, that made no sense.

15
00:00:40,560 --> 00:00:43,430
Let's try this from a different angle.

16
00:00:43,430 --> 00:00:48,090
A service worker is a JavaScript
file that is run by your browser

17
00:00:48,090 --> 00:00:51,140
in the background,
separate from your webpage.

18
00:00:51,140 --> 00:00:56,480
And handles events fired either
by the browser or your webpage.

19
00:00:56,480 --> 00:01:00,920
Since it's run in the background it
doesn't need the webpage to be open.

20
00:01:00,920 --> 00:01:03,380
And it doesn't show any markup.

21
00:01:03,380 --> 00:01:07,490
Where it really shines is
the events that it can listen for.

22
00:01:07,490 --> 00:01:11,700
One of the most exciting is
the ability to handle fetch events,

23
00:01:11,700 --> 00:01:15,850
intercepting and
responding to network requests.

24
00:01:15,850 --> 00:01:20,820
This puts the service worker virtually
between the network and the browser.

25
00:01:20,820 --> 00:01:24,820
Allowing the service worker to
provide content even when offline.

26
00:01:25,830 --> 00:01:29,870
Because the service worker can listen
for an event, even when the page isn't

27
00:01:29,870 --> 00:01:35,480
open, they can respond to push messages
sent from the server to the browser.

28
00:01:35,480 --> 00:01:40,720
Imagine a chat web client that let's you
know you've got a new unread message.

29
00:01:40,720 --> 00:01:43,740
This simply was impossible before.

30
00:01:43,740 --> 00:01:48,160
In the future, service workers will
support other things like periodic sync,

31
00:01:48,160 --> 00:01:50,260
geofencing, and more.

32
00:01:50,260 --> 00:01:53,590
In the past, you could have
tried using app cache to try and

33
00:01:53,590 --> 00:01:56,730
make an app work offline but
it was a pain.

34
00:01:56,730 --> 00:02:00,120
There were too many gotchas and
it didn't have the power or

35
00:02:00,120 --> 00:02:02,260
flexibility that service workers brings.
