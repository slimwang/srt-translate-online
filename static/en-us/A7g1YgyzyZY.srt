1
00:00:00,000 --> 00:00:02,950
One model is the so-called
Passthrough Model.

2
00:00:02,950 --> 00:00:07,328
The way the pass through model
works is that the VMM level driver

3
00:00:07,328 --> 00:00:12,129
is responsible for configuring
the access permissions for device.

4
00:00:12,129 --> 00:00:16,852
For instance, it will allow a Guest VM
to have access to the memory where

5
00:00:16,852 --> 00:00:20,250
the control registers for
the device are.

6
00:00:20,250 --> 00:00:24,302
There are clearly benefits to this
approach, one is for instance,

7
00:00:24,302 --> 00:00:28,370
that the guest VM has exclusive
access to a particular device.

8
00:00:28,370 --> 00:00:32,633
It's the only one that can manipulate
its state, it can control it and

9
00:00:32,633 --> 00:00:34,810
it's the only one that will use it.

10
00:00:34,810 --> 00:00:39,702
Also, the VM's accesses to the device
completely bypass the hypervisor, so

11
00:00:39,702 --> 00:00:42,309
there are direct accesses to the device.

12
00:00:42,309 --> 00:00:44,990
This model is also called
the VMM bypass model.

13
00:00:44,990 --> 00:00:49,190
Now clearly, once we start providing
VMs with exclusive access,

14
00:00:49,190 --> 00:00:52,950
figuring out a way to share
devices will become difficult.

15
00:00:52,950 --> 00:00:56,368
Well, basically have to
continuously reassign,

16
00:00:56,368 --> 00:01:01,059
which particular VM it can access
a particular device over time.

17
00:01:01,059 --> 00:01:04,750
But the sharing will not happen
simultaneously, concurrently.

18
00:01:04,750 --> 00:01:07,681
That in some cases is,
is really not doable,

19
00:01:07,681 --> 00:01:10,470
because of the limitations
of the device.

20
00:01:10,470 --> 00:01:16,110
In other cases, it can be done, but it
will be very high overhead operations.

21
00:01:16,110 --> 00:01:20,990
So, in practice really device sharing
with this model is not feasible.

22
00:01:20,990 --> 00:01:24,563
Now because the hypervisor is
completely out of the way,

23
00:01:24,563 --> 00:01:29,029
it means that the Guest VM and the
Device Driver that's in the Guest VM,

24
00:01:29,029 --> 00:01:33,210
directly operates and
controls the particular physical device.

25
00:01:33,210 --> 00:01:38,471
So that means that when we're launching
this Guest VM, there better be a device

26
00:01:38,471 --> 00:01:43,350
of the exact same type as expected by
the Guest OS on the physical machine.

27
00:01:43,350 --> 00:01:47,705
In some cases, maybe in the server space
that's not as critical of a requirement

28
00:01:47,705 --> 00:01:52,010
just because there are fewer types of
devices that are commonly present there.

29
00:01:52,010 --> 00:01:55,969
But in other environments, this is
really not a practical constraint.

30
00:01:55,969 --> 00:02:00,374
Remember, we're not talking about
the fact that there needs to be

31
00:02:00,374 --> 00:02:04,950
a network interface, or
a disk device or hard disk device.

32
00:02:04,950 --> 00:02:09,566
We're talking about the exact same,
particular type of network card or

33
00:02:09,566 --> 00:02:12,441
hard disk drive that
the Guest VM expects

34
00:02:12,441 --> 00:02:15,330
depending on the device
drivers that it has.

35
00:02:15,330 --> 00:02:19,033
Also, we mentioned that one of
the benefits of virtualization is that

36
00:02:19,033 --> 00:02:22,250
the Guest VM started decouples
from the physical hardware.

37
00:02:22,250 --> 00:02:26,109
And therefore, we can migrate them
easily to other nodes in the system.

38
00:02:26,109 --> 00:02:29,818
Well, this pass through really
breaks that decoupling,

39
00:02:29,818 --> 00:02:32,550
because it directly
binds a device to a VM.

40
00:02:32,550 --> 00:02:35,551
This makes migration
difficult in particular,

41
00:02:35,551 --> 00:02:38,989
because there may be some
device specific state and

42
00:02:38,989 --> 00:02:43,673
potentially even device resident state
that would also need to be copied and

43
00:02:43,673 --> 00:02:48,137
migrated and then properly configured
at the destination mount and then

44
00:02:48,137 --> 00:02:53,209
basically that turns VM migration not in
a hyperviser and VM specific operation.

45
00:02:53,209 --> 00:02:57,935
But it needs to be implemented in a way
that knows how to deal with the device

46
00:02:57,935 --> 00:03:02,140
specifics of all of the particular
devices that are of interest.
