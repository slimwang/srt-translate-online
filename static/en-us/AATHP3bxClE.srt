1
00:00:00,380 --> 00:00:04,610
We will not talk about RAID 3
because it's very rarely used today.

2
00:00:04,610 --> 00:00:06,560
So we will go to RAID 4,

3
00:00:06,560 --> 00:00:11,160
which is actually not very often used,
but it helps understand how it works,

4
00:00:11,160 --> 00:00:15,670
to understand how RAID 5,
which is more often used, works.

5
00:00:15,670 --> 00:00:20,110
Raid 4 uses a technique called
block interleaved parity.

6
00:00:20,110 --> 00:00:26,310
It uses N disks and N minus 1, all but
1 of these disks contain data,

7
00:00:26,310 --> 00:00:31,560
which is right across these disks just
like in RAID 0 and then the last disk

8
00:00:31,560 --> 00:00:38,080
has the parity blocks that protects all
of the blocks of the N minus 1 disks.

9
00:00:38,080 --> 00:00:40,379
So let's look at an example
with four disks.

10
00:00:41,420 --> 00:00:44,580
So we said that three of
the disks contain data, so

11
00:00:44,580 --> 00:00:46,710
this would be stripe zero.

12
00:00:46,710 --> 00:00:50,840
Then here we have stripe three,
four, and five, and so on.

13
00:00:50,840 --> 00:00:54,700
So we just distribute out
data across all but one disk.

14
00:00:54,700 --> 00:00:57,055
And then we take
the date of stripe zero,

15
00:00:57,055 --> 00:01:01,410
xor the whole stripe bit
by bit with stripe one.

16
00:01:01,410 --> 00:01:08,730
Xor the whole thing with stripe two and
what we get will be as long as a stripe.

17
00:01:08,730 --> 00:01:11,660
And that gives us the parity stripe for
zero, one,

18
00:01:11,660 --> 00:01:14,600
and two and
we put that on the fourth disc.

19
00:01:15,920 --> 00:01:21,780
Then we go to the next stripe
on each disc, xor them and

20
00:01:21,780 --> 00:01:28,460
that gives us the parity stripe,
for these three stripes and so on.

21
00:01:28,460 --> 00:01:32,880
So the idea here is that if,
let's say one disk fails,

22
00:01:32,880 --> 00:01:36,910
we have the data of the two disks here,
and we have the parity.

23
00:01:36,910 --> 00:01:42,990
We can reconstruct what was on the first
disk by exporting these three.

24
00:01:42,990 --> 00:01:47,460
Or if there is an error in just for
example this one stripe gets too damaged

25
00:01:47,460 --> 00:01:51,420
to reconstruct by using the error
correction code of this disk

26
00:01:51,420 --> 00:01:54,890
in that case again, we can read this
stripe, this stripe and the parity.

27
00:01:55,920 --> 00:01:58,930
And then reconstruct what should
have been the bits of this.

28
00:01:58,930 --> 00:02:03,980
So effectively, now we can tolerate
the failure of any one disk.

29
00:02:03,980 --> 00:02:10,080
But the cost is not two times as many
disk as we need to store the data.

30
00:02:10,080 --> 00:02:14,080
Here for example, we are paying only one
quarter of the whole system is spent on

31
00:02:14,080 --> 00:02:16,980
parity, and three quarters on the data.

32
00:02:16,980 --> 00:02:18,040
Whereas with mirroring,

33
00:02:18,040 --> 00:02:24,840
we would've spent half of the overall
capacity of the system on the mirroring.

34
00:02:24,840 --> 00:02:30,220
You can think of Raid 4 as kind of
a more general technique than mirroring,

35
00:02:30,220 --> 00:02:34,700
because in reality using two discs for
RAID 4,

36
00:02:34,700 --> 00:02:40,520
it's very similar to mirroring because
here we will store the bits of the data,

37
00:02:40,520 --> 00:02:43,820
and here we will store the same bits.

38
00:02:43,820 --> 00:02:48,670
Because a bit, when you don't export
it with anything, you just put it here.

39
00:02:48,670 --> 00:02:53,930
So mirroring is just an extreme
case of RAID 4 when N is just two,

40
00:02:53,930 --> 00:02:57,870
but you want to go to more than two with
RAID 4 because that allows you to have

41
00:02:57,870 --> 00:03:02,870
lower costs while still being able
to recover from losing one disc.

42
00:03:02,870 --> 00:03:05,920
So now, what does a write do?

43
00:03:05,920 --> 00:03:11,960
It must write one of the data disc and
it must read and write the parity disc.

44
00:03:11,960 --> 00:03:13,290
To update the parity.

45
00:03:13,290 --> 00:03:15,800
Because one of the stripes have changed.

46
00:03:15,800 --> 00:03:21,070
A read, however, only needs to read the
data from the disk where the data is.

47
00:03:21,070 --> 00:03:24,660
We will only reconstruct
the data if that read fails.

48
00:03:24,660 --> 00:03:28,390
But in the normal scenario,
where we get the data we want,

49
00:03:28,390 --> 00:03:30,780
we don't even have to consult
the parity bit for reads.
