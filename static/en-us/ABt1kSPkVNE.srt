1
00:00:00,260 --> 00:00:02,530
Now the topic of data persistence,
or the need for

2
00:00:02,530 --> 00:00:05,850
data to stick around,
is not a uniquely Android problem.

3
00:00:05,850 --> 00:00:08,020
If you've ever used any desktop apps,

4
00:00:08,020 --> 00:00:10,740
you're probably familiar
with the Save screen.

5
00:00:10,740 --> 00:00:14,280
So, when I click on the Save button,
what exactly is it saving?

6
00:00:14,280 --> 00:00:15,600
Well, it's essentially saying,

7
00:00:15,600 --> 00:00:19,110
I want the computer to take
the state of my program as it is and

8
00:00:19,110 --> 00:00:22,710
save it off into permanent
storage in something like a file.

9
00:00:22,710 --> 00:00:25,970
The state of my program could mean
something like a document that I type up

10
00:00:25,970 --> 00:00:29,680
in a text editor, or perhaps the
progress that I've made on a video game.

11
00:00:31,280 --> 00:00:34,750
So, Android does provide a few
different data persistent options for

12
00:00:34,750 --> 00:00:36,310
storing to local storage.

13
00:00:36,310 --> 00:00:40,320
Now this is different from, if you've
heard the term, saving off to the cloud.

14
00:00:40,320 --> 00:00:43,720
That method is more complicated, and
it requires Internet connection.

15
00:00:44,980 --> 00:00:48,240
So, in this lesson,
we'll just be focusing on saving data

16
00:00:48,240 --> 00:00:50,900
directly onto your Android device,
and that way,

17
00:00:50,900 --> 00:00:54,320
you can access the data whether or
not you have Internet connection.

18
00:00:55,510 --> 00:00:58,710
We'll be focusing on these
three Android options

19
00:00:58,710 --> 00:01:01,850
that allow us to save data
directly onto our device.

20
00:01:01,850 --> 00:01:05,800
So, first off are files, you're
probably pretty familiar with files and

21
00:01:05,800 --> 00:01:08,420
you've likely used them in
apps that you use daily.

22
00:01:08,420 --> 00:01:12,308
For example, in apps like Instagram,
where you're adding your favorite filter

23
00:01:12,308 --> 00:01:16,170
onto your photo and
then saving that off into a file.

24
00:01:16,170 --> 00:01:19,890
So, saving information to a file is
a great option if you need to, say,

25
00:01:19,890 --> 00:01:26,270
save off a large media file, images,
books, songs, or video files.

26
00:01:26,270 --> 00:01:29,420
For example,
the Camera app saves photos as files

27
00:01:29,420 --> 00:01:32,080
that you can later
view in the Photos app.

28
00:01:32,080 --> 00:01:35,530
Additionally, if you're using
Google Play Music and using it offline,

29
00:01:35,530 --> 00:01:38,650
that music is saved off as files so
that it can be downloaded.

30
00:01:39,810 --> 00:01:42,337
Our next option is SharedPreferences, so

31
00:01:42,337 --> 00:01:47,136
SharedPreferences were built to store
user preferences within the app.

32
00:01:47,136 --> 00:01:48,500
Now an example of this is,

33
00:01:48,500 --> 00:01:51,300
say you have a Maps app that
would have a preference screen.

34
00:01:51,300 --> 00:01:54,180
So, in this preference
screen amongst other things,

35
00:01:54,180 --> 00:01:55,930
I'm allowed to set my distance units,

36
00:01:55,930 --> 00:02:00,320
and my distance units can either be
Automatic, Kilometers, or Miles.

37
00:02:00,320 --> 00:02:04,300
This preference will be remembered
even when I close off the Maps app.

38
00:02:04,300 --> 00:02:06,260
This means I don't need
to keep going back and

39
00:02:06,260 --> 00:02:08,970
saying, I want my distance
to be kilometers.

40
00:02:08,970 --> 00:02:12,790
So, the developers of this map app
could have used SharedPreferences

41
00:02:12,790 --> 00:02:13,795
to save all this data.

42
00:02:13,795 --> 00:02:19,530
SharedPreferences store a small amount
of data using what's known as key

43
00:02:19,530 --> 00:02:24,630
value pairs, so in this situation the
key will always be a unique string and

44
00:02:24,630 --> 00:02:26,740
will be tied to a value.

45
00:02:26,740 --> 00:02:29,680
That's what we're actually saving off,
so it's your preferences.

46
00:02:29,680 --> 00:02:33,390
Our values can be primitive types,
which include ints,

47
00:02:33,390 --> 00:02:36,740
booleans, couple of others, and strings.

48
00:02:36,740 --> 00:02:39,340
Remember, you can use
a key to save the data

49
00:02:39,340 --> 00:02:41,690
as well as to identify the value
that you want to open.

50
00:02:42,780 --> 00:02:46,940
So, our next example, the key might
be something like distance units and

51
00:02:46,940 --> 00:02:49,380
the value could be kilometers.

52
00:02:49,380 --> 00:02:52,820
Now, if the user decides to select
a different type of distance units, so

53
00:02:52,820 --> 00:02:53,937
they changed to miles.

54
00:02:53,937 --> 00:02:58,459
Notice that the keys stays the same,
but the value updates here to miles.

55
00:02:58,459 --> 00:03:00,956
So, if you like my examples of
how to use SharedPreferences,

56
00:03:00,956 --> 00:03:03,900
I suggest checking out
the link in the notes below.

57
00:03:03,900 --> 00:03:07,628
Now the final option for permanent
storage is the SQLite Database.

58
00:03:07,628 --> 00:03:12,390
Now SQLite Databases are a type of
database, as the name implies, but

59
00:03:12,390 --> 00:03:14,340
what exactly is a database?

60
00:03:14,340 --> 00:03:16,910
A database Is an organized
collection of data.

61
00:03:18,090 --> 00:03:20,420
With this information
properly organized,

62
00:03:20,420 --> 00:03:24,310
we can extract out what we need and
analyze that information.

63
00:03:24,310 --> 00:03:27,230
That was just talking about
databases broadly, but

64
00:03:27,230 --> 00:03:31,460
like I mentioned, we want to focus
specifically on SQLite databases.

65
00:03:31,460 --> 00:03:35,650
So, SQLite Databases are just
a specific example of databases, and

66
00:03:35,650 --> 00:03:39,160
they can be made up of one table,
or even multiple tables.

67
00:03:40,630 --> 00:03:45,260
However, I should note here that not all
databases organize data in the same way

68
00:03:45,260 --> 00:03:47,070
as a spreadsheet does.

69
00:03:47,070 --> 00:03:52,120
However, SQLite Databases do, so
for the purpose of this lesson,

70
00:03:52,120 --> 00:03:55,280
you can picture the table of your
SQLite Database as a spreadsheet.

71
00:03:56,560 --> 00:03:59,960
So, SQLite Databases
are divided into tables, and

72
00:03:59,960 --> 00:04:03,418
these can have rows and columns.

73
00:04:03,418 --> 00:04:07,850
A table will usually represent a list
of objects where each row of the table

74
00:04:07,850 --> 00:04:10,000
represents a single object.

75
00:04:10,000 --> 00:04:11,580
Let's see an example of that.

76
00:04:11,580 --> 00:04:15,819
So in this situation, if we have
the database table that is keeping

77
00:04:15,819 --> 00:04:20,303
track of coffee orders, each row
will contain a single coffee order.

78
00:04:20,303 --> 00:04:23,524
So, in a single row, we see that
we have the name of the customer,

79
00:04:23,524 --> 00:04:27,213
the type of milk they want in their
coffee, whether or not they want sugar,

80
00:04:27,213 --> 00:04:29,960
and whether or
not they want decaf coffee.

81
00:04:29,960 --> 00:04:33,600
Each of these columns represents
different attributes of the object, and

82
00:04:33,600 --> 00:04:36,400
our object in this case
is our coffee order.

83
00:04:36,400 --> 00:04:40,150
So, by organizing large amounts of
information, databases make it easy for

84
00:04:40,150 --> 00:04:42,710
us to search and
sort through all this information,

85
00:04:42,710 --> 00:04:45,360
much like how you would sort through
the column of a spreadsheet.

86
00:04:45,360 --> 00:04:49,440
For example, because our coffee order
information is in a spreadsheet,

87
00:04:49,440 --> 00:04:52,340
it's easy to see which
customer wanted soy milk.

88
00:04:52,340 --> 00:04:55,670
Additionally, we could've seen which
customers wanted decaf coffees that day.

89
00:04:55,670 --> 00:05:00,300
So, SQLite Databases,
SharedPreferences, and files

90
00:05:00,300 --> 00:05:04,570
can all store the same type of data,
things such as strings and integers.

91
00:05:04,570 --> 00:05:09,020
But we'll choose which one to use
depending on the situation we're in.

92
00:05:09,020 --> 00:05:12,656
So, a key characteristic of our SQLite
Database is that it makes it easy to

93
00:05:12,656 --> 00:05:15,472
share large amounts of related and
structured data, and

94
00:05:15,472 --> 00:05:17,548
this information is commonly text data.

95
00:05:17,548 --> 00:05:21,320
If you remember back to our coffee
table example, where each coffee order

96
00:05:21,320 --> 00:05:23,820
had the same structure and
the rows were all related and

97
00:05:23,820 --> 00:05:28,780
that they all represented coffee orders,
another key fact about SQLite databases

98
00:05:28,780 --> 00:05:31,830
is that they store data
that's able to grow in size.

99
00:05:31,830 --> 00:05:34,730
Over the course of using our coffee
ordering app, we will get more and

100
00:05:34,730 --> 00:05:38,040
more coffee orders, so the information
will continue to grow, but

101
00:05:38,040 --> 00:05:41,830
it will be easily searchable
in SQLite Database structure.

102
00:05:41,830 --> 00:05:44,910
Now moving on to SharedPreferences,
these are better for single,

103
00:05:44,910 --> 00:05:46,420
important pieces of information.

104
00:05:46,420 --> 00:05:50,070
For example, in Settings we know
the fix keys ahead of time, so

105
00:05:50,070 --> 00:05:53,410
this isn't really meant for
storing lots of user data.

106
00:05:53,410 --> 00:05:56,640
That means, if you find that your
data that are easily thought of,

107
00:05:56,640 --> 00:05:57,660
structured in rows and

108
00:05:57,660 --> 00:06:01,650
columns like a spreadsheet, then SQLite
Database is probably your way to go.

109
00:06:03,050 --> 00:06:06,120
So now we know about these three
different persistent data storage

110
00:06:06,120 --> 00:06:09,960
options and how each one should
be used in a different situation.

111
00:06:09,960 --> 00:06:14,600
You should note that using files and
databases are not specific to Android.

112
00:06:14,600 --> 00:06:17,860
For example, all the large
media platforms that you use or

113
00:06:17,860 --> 00:06:19,580
even antivirus programs, well,

114
00:06:19,580 --> 00:06:23,200
these are just some of the products
that'll likely use SQLite to store

115
00:06:23,200 --> 00:06:27,260
everything from user information To
even the data that we're inputting.

116
00:06:27,260 --> 00:06:30,140
It's important to note that many Android
apps will use a combination of those

117
00:06:30,140 --> 00:06:31,440
three approaches.

118
00:06:31,440 --> 00:06:32,810
Take for example the camera app.

119
00:06:32,810 --> 00:06:35,140
It could use files to
save pictures locally,

120
00:06:35,140 --> 00:06:39,310
while also using an SQLite
database to save off meta data.

121
00:06:39,310 --> 00:06:42,520
So meta data means information
about information.

122
00:06:42,520 --> 00:06:48,290
So perhaps time, location, description
information about our picture.

123
00:06:48,290 --> 00:06:51,740
To give you some practice determining
which data storage option

124
00:06:51,740 --> 00:06:55,630
is best given the scenario, I'd like
you to go through this exercise.

125
00:06:55,630 --> 00:07:01,340
So for each of these app situations,
decide whether it's best to use files,

126
00:07:01,340 --> 00:07:07,230
share preferences or SQLite databases
to store off this information So

127
00:07:07,230 --> 00:07:10,630
our first scenario of our Video
Everywhere App, this application lets

128
00:07:10,630 --> 00:07:13,550
you film short video segments
when you're on vacation and

129
00:07:13,550 --> 00:07:17,800
then it will automatically plot your
location and date of a film onto a map.

130
00:07:17,800 --> 00:07:18,900
So which option should we use?

131
00:07:20,100 --> 00:07:23,860
In the Baking Conversion App, this app
offers various conversions needed for

132
00:07:23,860 --> 00:07:27,890
baking, such as cups to millimeters or
teaspoons to cups.

133
00:07:27,890 --> 00:07:31,380
Which of these is the best way to
store off our users preference for

134
00:07:31,380 --> 00:07:33,050
using the units?

135
00:07:33,050 --> 00:07:37,010
In our third scenario of our Music Share
app, say this app lets you buy and

136
00:07:37,010 --> 00:07:40,290
download a song that can be
used across any application,

137
00:07:40,290 --> 00:07:42,595
which would be the best
way to store The song.

138
00:07:42,595 --> 00:07:45,405
And lastly, say you have
an app that stores information

139
00:07:45,405 --> 00:07:47,965
about pets coming into
an animal shelter.

140
00:07:47,965 --> 00:07:50,855
What's the best way to structure
the information of all those pets?

141
00:07:51,905 --> 00:07:54,765
All right, so give these scenarios a try
and I'll see you in the next video.
