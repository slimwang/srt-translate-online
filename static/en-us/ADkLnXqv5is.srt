1
00:00:00,310 --> 00:00:03,969
XDR provides the RPC runtime
with some helpful routines.

2
00:00:03,969 --> 00:00:08,810
For instance,
after we compile a .h XDR file,

3
00:00:08,810 --> 00:00:12,840
the compiler will generate a number of
routines that are used for marshalling

4
00:00:12,840 --> 00:00:17,500
or unmarshalling, the various
data types in the RPC operations.

5
00:00:17,500 --> 00:00:21,390
In the example that we talked about,
the square rpc example,

6
00:00:21,390 --> 00:00:25,970
these will all be found
in the square_xdr.c file.

7
00:00:25,970 --> 00:00:30,820
In addition, the compiler will generate
certain clean up operations like xdr

8
00:00:30,820 --> 00:00:36,370
free, that are used to deallocate to
free up memory regions that are used for

9
00:00:36,370 --> 00:00:41,030
the data structures,
the arguments in the RPC operations.

10
00:00:41,030 --> 00:00:45,363
These routines will typically
be called within a procedure

11
00:00:45,363 --> 00:00:50,227
that the name of the procedure
typically ends with _freeresult.

12
00:00:50,227 --> 00:00:57,146
For instance, in our square program
it will be square_prog_1_freeresult.

13
00:00:57,146 --> 00:01:00,098
And this is yet
another user defined procedure,

14
00:01:00,098 --> 00:01:04,706
where the user can specify what are all
of the different data structures, or

15
00:01:04,706 --> 00:01:07,335
pieces of state,
that need to be freed up.

16
00:01:07,335 --> 00:01:08,495
And the allocated,

17
00:01:08,495 --> 00:01:14,265
after the runtime is done servicing
RPC request and returning results.

18
00:01:14,265 --> 00:01:18,025
So the RPC runtime will
automatically call this procedure

19
00:01:18,025 --> 00:01:19,575
after it's done computing the result.
