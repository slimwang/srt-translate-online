1
00:00:00,410 --> 00:00:04,380
Okay, so now we're going to
create a simple shader.

2
00:00:04,380 --> 00:00:08,050
First, let's go to file, and new scene.

3
00:00:09,130 --> 00:00:11,580
Just make sure you're
in a brand new scene.

4
00:00:11,580 --> 00:00:17,690
And then, in the project pane, Select
your assets folder and then go to create

5
00:00:17,690 --> 00:00:23,150
and then this time, go to shader and
then standard surface shader.

6
00:00:24,850 --> 00:00:33,452
Okay, go ahead and name your new shader
My first surface shader, okay, great.

7
00:00:33,452 --> 00:00:38,740
Now double-click on the shader
to open it in either

8
00:00:38,740 --> 00:00:42,400
MonoDevelop or Visual Studio, depending
on how your computer is set up.

9
00:00:43,750 --> 00:00:46,150
Okay, wow.

10
00:00:46,150 --> 00:00:47,110
Look at all that code!

11
00:00:48,210 --> 00:00:51,780
This shader is written in
a language called HLSL or

12
00:00:51,780 --> 00:00:52,838
High Level Shader Language.

13
00:00:52,838 --> 00:00:55,870
We're not going to cover HLSL right now,

14
00:00:55,870 --> 00:00:59,510
but I wanted you to see what
shader code actually looks like.

15
00:00:59,510 --> 00:01:02,780
It's similar to see and
it's actually a fairly simple language.

16
00:01:02,780 --> 00:01:06,060
You know what,
let's make one simple change.

17
00:01:06,060 --> 00:01:08,910
Just so you can get a taste
of shader programming.

18
00:01:08,910 --> 00:01:11,140
Go ahead and scroll down to line 32.

19
00:01:11,140 --> 00:01:18,480
You'll see it's the line that sais,
to own dot albedo is equal to C dot RGB.

20
00:01:19,610 --> 00:01:22,859
Remember how the albedo basically
controls the main color of the material?

21
00:01:23,910 --> 00:01:27,740
Well, this is where the shader
receives that Albedo color.

22
00:01:27,740 --> 00:01:33,970
This line actually says,
set the shader's Albedo value to be red,

23
00:01:33,970 --> 00:01:39,425
green, and
blue value of the main material's color.

24
00:01:39,425 --> 00:01:45,375
So really,
you can change this to be any color and

25
00:01:45,375 --> 00:01:47,825
it will change the material's color.

26
00:01:47,825 --> 00:01:48,695
That's pretty cool, right?

27
00:01:48,695 --> 00:01:49,598
So let's do that.

28
00:01:49,598 --> 00:01:54,809
Let's say, O dot albedo is equal

29
00:01:54,809 --> 00:01:59,672
to float3010 semi colon.

30
00:01:59,672 --> 00:02:04,440
So what that actually is saying is,

31
00:02:04,440 --> 00:02:09,050
set the color, the albedo,
to bright green,

32
00:02:09,050 --> 00:02:13,330
because this is red,
this is green and this is blue.

33
00:02:14,640 --> 00:02:20,070
So, let's see if that work, go ahead and
save this change and go back to Unity.

34
00:02:21,750 --> 00:02:26,595
And let's go ahead create a new
material Called, "test material".

35
00:02:26,595 --> 00:02:28,915
So, go to "create" and
then "material" and

36
00:02:28,915 --> 00:02:31,635
then name your material "test material".

37
00:02:31,635 --> 00:02:32,315
Awesome.

38
00:02:32,315 --> 00:02:34,695
And then,
if it hasn't already been selected,

39
00:02:34,695 --> 00:02:37,765
go over to the shader drop-down box.

40
00:02:37,765 --> 00:02:42,005
Go to "custom" and
then select "my first surface shader".

41
00:02:42,005 --> 00:02:47,010
And so now the shader for
this material is set to

42
00:02:47,010 --> 00:02:50,700
the surface shader that you just wrote
and you'll see it's bright green.

43
00:02:50,700 --> 00:02:54,410
Let's go ahead and
assign that to an object just to see it.

44
00:02:55,640 --> 00:03:00,450
Go over to your hierarchy,
go to 3D object and then cube

45
00:03:01,710 --> 00:03:05,980
and drag your test material onto
the cube and there it is bright green.

46
00:03:07,110 --> 00:03:11,880
And no matter what color you
change your albeta to it's

47
00:03:11,880 --> 00:03:15,100
always going to be bright green
because you coded it that way.

48
00:03:15,100 --> 00:03:16,580
Pretty cool?

49
00:03:16,580 --> 00:03:18,200
Let's take one step further.

50
00:03:19,290 --> 00:03:22,350
Double click your shader
to open it back up and

51
00:03:22,350 --> 00:03:27,170
now we're going to change
that color even more.

52
00:03:27,170 --> 00:03:32,250
Let's change line 32 to say,
o dot albedo is equal to

53
00:03:32,250 --> 00:03:36,940
float 3 and then the r value,
the red value is 0,

54
00:03:36,940 --> 00:03:41,720
the green value is going to be
something a little bit more elaborate.

55
00:03:41,720 --> 00:03:48,700
So let's say ABS and
that's short for absolute value.

56
00:03:48,700 --> 00:03:55,270
And then let's say SIN,
and that's short for sine.

57
00:03:56,720 --> 00:04:03,102
And inside of this, let's do
underscore Time with a capital T,

58
00:04:03,102 --> 00:04:08,180
dot .Z, close paren, close paren.

59
00:04:09,670 --> 00:04:11,830
And then the blue value will be zero.

60
00:04:11,830 --> 00:04:13,980
So what does this mean?

61
00:04:13,980 --> 00:04:15,260
Let's break it down.

62
00:04:15,260 --> 00:04:17,470
Let's start from the inside out.

63
00:04:17,470 --> 00:04:23,320
So _Time dot z,
that's a built-in unity shader variable.

64
00:04:23,320 --> 00:04:27,410
But it all means is it's the number of
seconds elapse since you pressed play.

65
00:04:27,410 --> 00:04:30,330
So you press play and
then it starts counting.

66
00:04:30,330 --> 00:04:33,120
And then this is just the number
of seconds that it passed.

67
00:04:34,200 --> 00:04:39,110
Sign is the regular math sign function,
it's just going to give us a number that

68
00:04:39,110 --> 00:04:44,110
goes smoothly back and forth between
negative one and one, so as time passes

69
00:04:44,110 --> 00:04:48,450
we're going to get a number that goes up
to one and then back down, negative one,

70
00:04:48,450 --> 00:04:52,560
and then up to one, then back down
to negative one forever and ever.

71
00:04:52,560 --> 00:04:57,350
And then the absolute value of
that makes it so that instead

72
00:04:57,350 --> 00:05:01,250
of going from 1 to -1, it just goes
from 1 to 0, and then back to 1 again.

73
00:05:01,250 --> 00:05:09,290
So this says as time passes, go from
one to zero to one to zero forever.

74
00:05:09,290 --> 00:05:14,120
So we put that as our green value, which
means that our green is going to go

75
00:05:14,120 --> 00:05:17,970
from one which is bright
green to zero which is black.

76
00:05:17,970 --> 00:05:20,260
And back and forth and back and forth.

77
00:05:20,260 --> 00:05:24,910
And as long as you type that correctly,
you can go back to Unity,

78
00:05:24,910 --> 00:05:30,040
press Play, and there it goes.

79
00:05:30,040 --> 00:05:33,090
You can watch your cube
pulse forever and ever.

80
00:05:33,090 --> 00:05:34,780
Pretty neat?

81
00:05:34,780 --> 00:05:38,960
And what's really cool is all of this
animation is running On your GPU.

82
00:05:40,040 --> 00:05:44,360
So shader programing is the secret
to special effects like water,

83
00:05:44,360 --> 00:05:48,220
elaborate particles,
believable shadows, and more.

84
00:05:48,220 --> 00:05:51,990
So every virtual reality developer
should know a bit about them.

85
00:05:51,990 --> 00:05:52,490
Great job.
