1
00:00:00,220 --> 00:00:02,930
All of the samples we've
tested on Android Wear so far.

2
00:00:02,930 --> 00:00:05,440
I've designed to be used for
a very short period of time.

3
00:00:05,440 --> 00:00:08,720
If you run an app like this and
let it sit for a few seconds.

4
00:00:08,720 --> 00:00:11,490
Eventually the watch display
will enter ambient mode and

5
00:00:11,490 --> 00:00:14,710
the watch will switch back
to the default watch face.

6
00:00:14,710 --> 00:00:16,640
You're watch activity
will be destroyed and

7
00:00:16,640 --> 00:00:19,160
the user will have to
restart it again if needed.

8
00:00:19,160 --> 00:00:22,050
So what do you do if you want to keep
an app running on the display for

9
00:00:22,050 --> 00:00:23,490
a long period of time?

10
00:00:23,490 --> 00:00:25,730
Such as showing the number
of steps while on a run.

11
00:00:26,730 --> 00:00:29,590
One option is to grab a Wake Lock and
keep the display on.

12
00:00:29,590 --> 00:00:31,550
But that will keep
the watch fully powered up,

13
00:00:31,550 --> 00:00:32,980
draining the battery very quickly.

14
00:00:32,980 --> 00:00:34,840
So, that's not a good way to do things.

15
00:00:34,840 --> 00:00:38,065
The proper way is to use
a feature called always on mode.

16
00:00:38,065 --> 00:00:40,895
This mode allows your app to control
what is shown on the watch screen

17
00:00:40,895 --> 00:00:42,025
while the watch is in ambient mode.

18
00:00:42,025 --> 00:00:45,675
It works very similar to a watch face,
in that the power usage of the display

19
00:00:45,675 --> 00:00:48,205
and processor is kept to a minimum,
saving power.

20
00:00:48,205 --> 00:00:51,035
You should only refresh
the screen infrequently, and

21
00:00:51,035 --> 00:00:53,080
try to avoid doing any processing.

22
00:00:53,080 --> 00:00:55,680
Later on in this course,
we're going to discuss watch faces.

23
00:00:55,680 --> 00:00:57,150
Which run all down a watch and

24
00:00:57,150 --> 00:00:59,550
it's the default to show when
nothing else is running.

25
00:00:59,550 --> 00:01:02,130
But always on mode here is useful for
activities that run for

26
00:01:02,130 --> 00:01:03,080
an extended period of time.

27
00:01:03,080 --> 00:01:05,930
Where you want the watch to
go into ambient mode, but

28
00:01:05,930 --> 00:01:08,930
you don't want it to run 24
hours a day like a watch face.

29
00:01:08,930 --> 00:01:11,470
Here's the documentation that you
can refer to for more details.

30
00:01:11,470 --> 00:01:15,170
Let's work through an example of how
to add always on support to a basic

31
00:01:15,170 --> 00:01:16,420
wearable sample.

32
00:01:16,420 --> 00:01:18,350
So let's create a new wearable project.

33
00:01:18,350 --> 00:01:21,070
File, new, new project.

34
00:01:21,070 --> 00:01:22,600
Use the defaults.

35
00:01:22,600 --> 00:01:25,340
Make sure you create a wear
project with a min SDK of 21.

36
00:01:25,340 --> 00:01:29,820
And we'll leave everything as is.

37
00:01:29,820 --> 00:01:34,720
Now that the project is ready, open up
the Wearable Android Manifesto XML file.

38
00:01:34,720 --> 00:01:39,040
We need to add a dependency to the
Android Wear Shared Wearable library.

39
00:01:39,040 --> 00:01:41,310
The shared library is needed for
backwards compatibility.

40
00:01:41,310 --> 00:01:44,680
So that older Android wear devices
that do not implement always on,

41
00:01:44,680 --> 00:01:47,480
can still run your application
as a regular activity.

42
00:01:47,480 --> 00:01:48,760
You need to request Wake Lock

43
00:01:48,760 --> 00:01:51,580
permissions in
the AndroidManifest.XML as well.

44
00:01:51,580 --> 00:01:53,600
Make sure you add this
to the phone app too.

45
00:01:53,600 --> 00:01:57,300
Since wearable permissions must always
be a subset of phone permissions.

46
00:01:57,300 --> 00:02:00,324
We need to have this here as well
to make it install correctly.

47
00:02:00,324 --> 00:02:03,086
We also need to go to
the wearable build.gradle file.

48
00:02:03,086 --> 00:02:06,707
We also need to declare our
targetSdkVersion to being 22,

49
00:02:06,707 --> 00:02:10,692
since this is the first API release
when Always-on is supported.

50
00:02:10,692 --> 00:02:13,420
In your build.gradle,
you also need to make sure that you're

51
00:02:13,420 --> 00:02:16,090
including the wearable
support library correctly.

52
00:02:16,090 --> 00:02:19,110
You also need to make sure you
include this new provided entry.

53
00:02:19,110 --> 00:02:21,750
Which deals with some other
dependency issues when you want to

54
00:02:21,750 --> 00:02:22,890
do release builds with proguard.

55
00:02:22,890 --> 00:02:25,220
But you don't need to worry
about that right now.

56
00:02:25,220 --> 00:02:27,520
We use the plus here to grab
the latest versions but

57
00:02:27,520 --> 00:02:30,040
you can specify an exact
version if you want.

58
00:02:30,040 --> 00:02:32,640
At this point, you should be able
to build and install everything.

59
00:02:32,640 --> 00:02:34,450
You won't notice any differences yet but

60
00:02:34,450 --> 00:02:37,240
at least you can check you did
everything right up until now.

61
00:02:37,240 --> 00:02:41,360
Let's go and modify our activity so
that it can stay always on.

62
00:02:41,360 --> 00:02:43,050
Click on the activity here.

63
00:02:43,050 --> 00:02:46,800
Modify the activity so
that it extends WearableActivity.

64
00:02:46,800 --> 00:02:49,650
You need to call setAmbientEnabled
to indicate that you

65
00:02:49,650 --> 00:02:51,860
want to keep your activity
running in ambient mode.

66
00:02:51,860 --> 00:02:54,380
Instead of going back to
the default watch face.

67
00:02:54,380 --> 00:02:57,260
You then need to override
the onEnterAmbient method.

68
00:02:57,260 --> 00:02:59,760
Which it's called as the watch
is going into ambient mode.

69
00:02:59,760 --> 00:03:01,880
You can implement whatever
changes you want to your UI.

70
00:03:01,880 --> 00:03:03,970
You need to present
a much simpler UI here.

71
00:03:03,970 --> 00:03:06,850
So you should turn off
any unnecessary details.

72
00:03:06,850 --> 00:03:08,330
Reduce the colors used and

73
00:03:08,330 --> 00:03:11,220
keep the number of pixels
eliminated to a minimum.

74
00:03:11,220 --> 00:03:14,870
Now let's set the TextView, so
we can when we're ambient or not.

75
00:03:14,870 --> 00:03:18,560
Next, override the onUpdateAmbient
method to receive system delivered

76
00:03:18,560 --> 00:03:19,750
ticks every minute.

77
00:03:19,750 --> 00:03:22,240
This is useful if you want to show
an updating clock in your UI.

78
00:03:22,240 --> 00:03:25,990
Which is important since the watch face
is not visible when your app is running

79
00:03:25,990 --> 00:03:27,100
like this.

80
00:03:27,100 --> 00:03:30,020
Finally, you override
the on/exit ambient method.

81
00:03:30,020 --> 00:03:32,263
Which it's called when the user
touches the watch display.

82
00:03:32,263 --> 00:03:35,020
And when we need to restore
the users interface back to normal.

83
00:03:35,020 --> 00:03:38,040
So we need to undo everything
we did in on enter ambient.

84
00:03:38,040 --> 00:03:41,480
Also, if you need to query this
information, you can call isAmbient.

85
00:03:41,480 --> 00:03:44,110
To find the current state of
Ambient mode for your activity.

86
00:03:44,110 --> 00:03:47,210
Although you shouldn't need to do this
if you track state in the previously

87
00:03:47,210 --> 00:03:48,160
overwritten methods.

88
00:03:49,170 --> 00:03:51,350
So let's now start up our app and
observe it in action.

89
00:03:51,350 --> 00:03:52,750
The screen is in ambient mode right now,

90
00:03:52,750 --> 00:03:55,100
and you can see that
shown on the screen.

91
00:03:55,100 --> 00:03:57,870
when you touch it,
it wakes up in interactive mode.

92
00:03:57,870 --> 00:04:00,330
You could slide the app away
if you wanted to as well.

93
00:04:00,330 --> 00:04:01,770
When you do the palm gesture,

94
00:04:01,770 --> 00:04:05,250
it goes back into ambient mode and
our app stays running on the screen.

95
00:04:05,250 --> 00:04:06,740
And you can see the color and

96
00:04:06,740 --> 00:04:11,020
size changes that take effect as we
switch between the different modes.

97
00:04:11,020 --> 00:04:13,460
Finally, if you want to see
a more complex example.

98
00:04:13,460 --> 00:04:16,779
We have a full sample demonstrating
how always on mode works.

99
00:04:16,779 --> 00:04:18,350
That you can look at as well.

100
00:04:18,350 --> 00:04:21,760
So go to File, Import Sample, and
search for Always On to find it.
