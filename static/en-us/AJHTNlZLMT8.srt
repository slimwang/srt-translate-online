1
00:00:00,000 --> 00:00:04,000
There is one additional nice thing about Heun's method,

2
00:00:04,000 --> 00:00:10,000
it gives us Heun's estimate for the next step and in parallel, we get Euler's estimate for free

3
00:00:10,000 --> 00:00:15,000
and we can compare these estimates to find out the error that we are making.

4
00:00:15,000 --> 00:00:19,000
By the way, the technical term for this type of method is an embedded

5
00:00:19,000 --> 00:00:22,000
Runge-Kutta method if you want to look that up.

6
00:00:22,000 --> 00:00:26,000
Remember the two types of errors are introduced before.

7
00:00:26,000 --> 00:00:32,000
The one type of error that we're actually interested in, in the end, is the GTE,

8
00:00:32,000 --> 00:00:37,000
the global truncation error by how far are we off after a finite's time?

9
00:00:37,000 --> 00:00:43,000
What Heun's method allows us is to estimate the LTE, the local truncation error--

10
00:00:43,000 --> 00:00:45,000
the error that we are making at each step.

11
00:00:45,000 --> 00:00:55,000
Consider the distance between the Euler result for that step and the Heun result for that step.

12
00:00:55,000 --> 00:01:01,000
As we saw earlier, Heun's result is much more accurate than Euler's result.

13
00:01:01,000 --> 00:01:06,000
So what we see here is about the error of Euler's method.

14
00:01:06,000 --> 00:01:14,000
The LTE of Euler's methods. I'm cheating a little here. I must take the velocity into account.

15
00:01:14,000 --> 00:01:18,000
Of course, we have several dimensions, two dimensions concerning x

16
00:01:18,000 --> 00:01:21,000
and two dimensions concerning velocity.

17
00:01:21,000 --> 00:01:23,000
We have to take all of them into account.

18
00:01:23,000 --> 00:01:31,000
So this term as well by how far is the Euler estimate follow velocity of from Heun's estimate?

19
00:01:31,000 --> 00:01:36,000
You could simply form the sum here but that would look strange for physicists.

20
00:01:36,000 --> 00:01:41,000
These are meters and these are meters per second--that does not work.

21
00:01:41,000 --> 00:01:46,000
The most simple idea is to introduce a time in here and time of that simulation.

22
00:01:46,000 --> 00:01:50,000
It did makes sense when the velocity is off by a certain amount,

23
00:01:50,000 --> 00:01:56,000
but early in that simulation, that error did grow over the course of that simulation.

24
00:01:56,000 --> 00:02:01,000
There's other ways of combining these differences--you could form the square here,

25
00:02:01,000 --> 00:02:06,000
the square there, and then take the square root but to make things simple,

26
00:02:06,000 --> 00:02:13,000
I'm simply using this distance plus the simulation time times that distance.

27
00:02:13,000 --> 00:02:21,000
We know that the GTE, the global truncation error for Euler's method is a constant times the step size.

28
00:02:21,000 --> 00:02:28,000
We can also show that the local truncation error is another constant times the step size squared.

29
00:02:28,000 --> 00:02:33,000
You can check the plausibility of hÂ˛ appearing here.

30
00:02:33,000 --> 00:02:40,000
If I double the step size, I only need half as many steps. Each step has four times the error.

31
00:02:40,000 --> 00:02:44,000
I need half as many steps which means that the total error is

32
00:02:44,000 --> 00:02:52,000
multiplied by two which we know is the case, but I can do know is to change the step size as I go.

33
00:02:52,000 --> 00:02:55,000
I do not need to specify the step size in advance.

34
00:02:55,000 --> 00:03:00,000
Once method is able to estimate the perfect step size for a given accuracy,

35
00:03:00,000 --> 00:03:05,000
assume that I did the first step with some step size whichever one I chose,

36
00:03:05,000 --> 00:03:12,000
but what I want is that this error, the local truncation error of Euler's method is of a fixed size.

37
00:03:12,000 --> 00:03:17,000
Let's call that tolerance. What I want is to find the step size.

38
00:03:17,000 --> 00:03:25,000
Let's call it hÂ˛ new, so that this error is off the fixed size called tolerance

39
00:03:25,000 --> 00:03:29,000
which would be measured in meters, by the way with this type of error.

40
00:03:29,000 --> 00:03:33,000
I can compute C from that very first step.

41
00:03:33,000 --> 00:03:41,000
It would be the local truncation error divided by hÂ˛ old and I can solve for the new step size.

42
00:03:41,000 --> 00:03:47,000
So the method actually determines the right step size I should be taking given the tolerance.

43
00:03:47,000 --> 00:03:52,000
I can solve for the new step size and find that the new step size is the old step size times

44
00:03:52,000 --> 00:03:57,000
the square root of the tolerance divided by this local truncation error

45
00:03:57,000 --> 00:04:00,000
that I can compute numerically.

46
00:04:00,000 --> 00:04:07,000
So after we did the first step with the old step size, we got an estimate for a perfect step size

47
00:04:07,000 --> 00:04:13,000
that produce the local truncation error of such tolerance for Euler's method

48
00:04:13,000 --> 00:04:15,000
and we can keep doing that as we go.

49
00:04:15,000 --> 00:04:19,000
The step size will be adjusted automatically. We do not have to worry about it.

50
00:04:19,000 --> 00:04:21,000
The method would choose the step size for us.

51
00:04:21,000 --> 00:04:27,000
One benefit of this method choosing the perfect step size for us,

52
00:04:27,000 --> 00:04:29,000
is that we do not have to choose it upfront.

53
00:04:29,000 --> 00:04:38,000
The other benefit is that the solution we'll be stepping at appropriate step sizes for instance,

54
00:04:38,000 --> 00:04:45,000
when we come close to a planet and the trajectory gets more bent, we need more steps.

55
00:04:45,000 --> 00:04:53,000
This method will automatically choose smaller steps as we go and eventually use larger steps again.
