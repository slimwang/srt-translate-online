1
00:00:00,220 --> 00:00:04,510
This is a VLIW target market quiz solution. So,

2
00:00:04,510 --> 00:00:07,160
the question was, what is VLIW best for, among

3
00:00:07,160 --> 00:00:09,960
these three options? We already know that VLIW is

4
00:00:09,960 --> 00:00:12,940
best for things where the compiler can figure the

5
00:00:12,940 --> 00:00:16,980
program out. Adding many numbers together is a very

6
00:00:16,980 --> 00:00:19,210
easy thing for the compiler to figure out. Typically,

7
00:00:19,210 --> 00:00:21,480
we are talking about a small loop with very

8
00:00:21,480 --> 00:00:25,319
well controlled dependencies, and so on. In contrast, figuring out

9
00:00:25,319 --> 00:00:27,902
the best path in a maze typically involves a lot of

10
00:00:27,902 --> 00:00:30,296
decisions, and then we will have to do a lot of

11
00:00:30,296 --> 00:00:34,328
if-conversions and so on, so it's going to be relatively inefficient, because

12
00:00:34,328 --> 00:00:37,478
a lot of the instructions that you do are going to be predicated

13
00:00:37,478 --> 00:00:40,532
out. And then counting elements in a linked list is going to

14
00:00:40,532 --> 00:00:43,330
have probably a lot of load instructions. Some of them will

15
00:00:43,330 --> 00:00:46,712
miss, some of them are not. So our compilers scheduling will

16
00:00:46,712 --> 00:00:50,910
be greatly effected by the cache misses and so on. So this

17
00:00:50,910 --> 00:00:56,600
is probably the best scenario for a VLIW. Followed probably by something

18
00:00:56,600 --> 00:01:00,610
like this and it's unlikely to do well on something like this.
