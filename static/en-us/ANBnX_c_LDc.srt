1
00:00:00,130 --> 00:00:03,503
With that reasoning in mind, we might expect the keyword this to be

2
00:00:03,503 --> 00:00:05,803
inaccessible from the global scope as well.

3
00:00:05,803 --> 00:00:09,196
Instead however, the language has historically been set up so

4
00:00:09,196 --> 00:00:12,120
that you can refer to this from the global scope.

5
00:00:12,120 --> 00:00:15,890
And doing so, gives you that default binding, which is to the global object.

6
00:00:15,890 --> 00:00:19,900
This is another confusing aspect of the language and luckily that behavior was

7
00:00:19,900 --> 00:00:23,280
removed in the more modern specifications of the language.

8
00:00:23,280 --> 00:00:26,540
Finally, I'd like to cover one last way that the parameter this gets

9
00:00:26,540 --> 00:00:28,120
a different sort of binding.

10
00:00:28,120 --> 00:00:31,510
The pattern we're about to see here is built to support mechanisms,

11
00:00:31,510 --> 00:00:32,913
we haven't explored yet and

12
00:00:32,913 --> 00:00:36,492
will look at in more detail in the lesson on pseudo-classical classes.

13
00:00:36,492 --> 00:00:40,460
In this situation, we're calling our function with the key word new before it.

14
00:00:40,460 --> 00:00:44,670
And that will have an effect on how the keyword this receives its binding.

15
00:00:44,670 --> 00:00:48,700
The positional parameters are, of course, unaffected by the keyword new.

16
00:00:48,700 --> 00:00:52,080
They get passed along in exactly the same way as they always are.

17
00:00:52,080 --> 00:00:55,510
But the binding for the keyword this is likely to surprise you.

18
00:00:55,510 --> 00:00:57,460
It's quite possible you've encountered discussions on

19
00:00:57,460 --> 00:00:59,560
the internet of how the keyword new works.

20
00:00:59,560 --> 00:01:03,270
And if so, you might take a moment to conjecture what you think the binding for

21
00:01:03,270 --> 00:01:05,780
this might be under these circumstances.
