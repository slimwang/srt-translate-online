1
00:00:00,150 --> 00:00:04,460
To summarize a common condition variable API, we'll look as follows.

2
00:00:04,460 --> 00:00:09,000
First, we must be able to create these data structures that correspond to

3
00:00:09,000 --> 00:00:10,600
the condition variable, so

4
00:00:10,600 --> 00:00:14,460
there must be some type that corresponds to condition variables.

5
00:00:14,460 --> 00:00:19,760
Then there is the wait construct that takes as arguments the mutex and

6
00:00:19,760 --> 00:00:21,510
the condition variable.

7
00:00:21,510 --> 00:00:24,155
Where a mutex is automatically released and

8
00:00:24,155 --> 00:00:28,380
re-acquired if we have to wait for this condition to occur.

9
00:00:28,380 --> 00:00:31,710
When a notification for a particular condition needs to be issued,

10
00:00:31,710 --> 00:00:35,970
it would be useful to be able to wake up threads one at a time.

11
00:00:35,970 --> 00:00:39,340
And for this, Birrell proposes a signal API.

12
00:00:39,340 --> 00:00:43,300
Or it could also be useful to wake up all of the threads that are waiting on

13
00:00:43,300 --> 00:00:48,420
a particular condition, and for this, Birrell proposes a broadcast API.

14
00:00:48,420 --> 00:00:54,100
The condition variable as a data structure, it must have basically a list of

15
00:00:54,100 --> 00:00:59,790
the waiting threads that should be notified in the event the condition is met.

16
00:00:59,790 --> 00:01:03,200
It also must have a reference to the mutex that's associated with

17
00:01:03,200 --> 00:01:08,010
the condition so that this wait operation can be implemented correctly so

18
00:01:08,010 --> 00:01:11,750
that this mutex can be both released and re-acquired as necessary.

19
00:01:11,750 --> 00:01:16,750
As a reference, the way the wait operation would be implemented in

20
00:01:16,750 --> 00:01:20,350
a operation system or in a threading library that supports threads and

21
00:01:20,350 --> 00:01:22,790
that support this condition variable.

22
00:01:22,790 --> 00:01:27,230
It would mean that, in the implementation, the very first thing that happened is

23
00:01:27,230 --> 00:01:32,800
that the mutex that's associated with the condition variable is released and

24
00:01:32,800 --> 00:01:36,510
this thread is placed on this wait queue of waiting threads.

25
00:01:36,510 --> 00:01:39,370
And then at some point when a notification is received,

26
00:01:39,370 --> 00:01:43,970
what would have to happen is that the thread is removed from the queue and

27
00:01:43,970 --> 00:01:48,360
this mutex is reacquired and then only then do we exit the wait,

28
00:01:48,360 --> 00:01:52,630
so only then will a thread return from this wait operation.

29
00:01:52,630 --> 00:01:56,330
One thing to note here is that, you know, when on a signal or

30
00:01:56,330 --> 00:01:59,380
broadcast we remove a thread from the queue, and

31
00:01:59,380 --> 00:02:03,550
then the first thing that this thread needs to do is to re-acquire the mutex.

32
00:02:03,550 --> 00:02:07,300
So what that really also means is that on broadcast,

33
00:02:07,300 --> 00:02:11,580
although we are able to wake up all the threads at the same time,

34
00:02:11,580 --> 00:02:14,530
the mutex, it requires mutual exclusion.

35
00:02:14,530 --> 00:02:18,780
So they will be able to acquire the mutex only one thread at a time.

36
00:02:18,780 --> 00:02:22,370
So only one thread at a time will be re-acquiring the mutex and

37
00:02:22,370 --> 00:02:24,860
exiting this wait operation.

38
00:02:24,860 --> 00:02:26,680
So it's a little bit unclear,

39
00:02:26,680 --> 00:02:31,220
that it's always useful to broadcast, if you're really not going to

40
00:02:31,220 --> 00:02:35,540
be able to do much work once you wake up with more than one thread at a time.
