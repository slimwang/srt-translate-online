1
00:00:00,450 --> 00:00:03,860
In this video we will apply what we
learned about updating a variable

2
00:00:03,860 --> 00:00:06,760
within the context of the Just-Java app.

3
00:00:06,760 --> 00:00:11,210
Once a variable is created we can update
its value using assignment operator,

4
00:00:11,210 --> 00:00:14,460
that we learned earlier
when creating variables.

5
00:00:14,460 --> 00:00:19,270
The format is to have a variable name on
the left, followed by the equal sign and

6
00:00:19,270 --> 00:00:21,130
then the new value.

7
00:00:21,130 --> 00:00:24,650
The statement also ends with
a semi-colon as always.

8
00:00:24,650 --> 00:00:25,930
This line means that,

9
00:00:25,930 --> 00:00:29,710
we're assigning the new value of 3
into the variable called quantity.

10
00:00:30,800 --> 00:00:34,770
Going back to our box analogy,
int quantity equals 2 creates a new

11
00:00:34,770 --> 00:00:37,600
variable called quantity,
and puts the value 2 inside.

12
00:00:38,650 --> 00:00:44,000
When we say quantity equals 3, we set
a new value of 3 inside the variable.

13
00:00:44,000 --> 00:00:45,110
We also take out the old value,

14
00:00:45,110 --> 00:00:47,770
because the variable can only
hold one value at a time.

15
00:00:48,840 --> 00:00:50,080
When we say quantity equals 4,

16
00:00:50,080 --> 00:00:53,730
then we put in a new value
of 4 inside the variable.

17
00:00:53,730 --> 00:00:56,890
We also remove what use to be in there,
which is the 3.

18
00:00:56,890 --> 00:01:01,330
Then when we say quantity equals 5,
we assign the variable a new value.

19
00:01:01,330 --> 00:01:04,790
Note that we only need to specify
the data type of the variable,

20
00:01:04,790 --> 00:01:06,825
which is integer in this case, once.

21
00:01:06,825 --> 00:01:10,750
On subsequent lines of code
where we refer to the variable,

22
00:01:10,750 --> 00:01:13,080
we don't need to specify that data type.

23
00:01:13,080 --> 00:01:15,590
If we did write int
again on that 2nd line,

24
00:01:15,590 --> 00:01:19,560
then the computer would think we want
to create another quantity variable.

25
00:01:19,560 --> 00:01:23,890
However, we're not allowed to create
two variables with the same name and

26
00:01:23,890 --> 00:01:26,690
the same method,
that would give an error.

27
00:01:26,690 --> 00:01:30,490
So when you declare a variable,
that's when you specify the data type.

28
00:01:30,490 --> 00:01:33,590
When you update it,
you don't need to specify the data type.

29
00:01:33,590 --> 00:01:36,790
Now I'm going to open up the main
activity Java file and modify

30
00:01:36,790 --> 00:01:41,120
the increment method to take advantage
of the ability to update variables.

31
00:01:41,120 --> 00:01:43,870
When the plus button is clicked
it will trigger this method, and

32
00:01:43,870 --> 00:01:47,710
I'm going to initialize
the quantity variable to be 2.

33
00:01:47,710 --> 00:01:52,020
Then I'm going to add a new line of code
that updates the quantity variable to 3.

34
00:01:52,020 --> 00:01:55,310
Then we display the latest
quantity value to the screen.

35
00:01:55,310 --> 00:01:56,690
When we run it on our device,

36
00:01:56,690 --> 00:02:00,630
if I click on the + button,
then it updates to a quantity of 3.

37
00:02:00,630 --> 00:02:04,610
This is because the latest value
in the quantity variable is 3 by

38
00:02:04,610 --> 00:02:07,530
the time we try to
display it on the screen.

39
00:02:07,530 --> 00:02:11,020
How do we know that the app didn't just
skip to setting the value to be 3?

40
00:02:11,020 --> 00:02:14,360
Well, we can use the debugging
tool that we introduced earlier,

41
00:02:14,360 --> 00:02:16,920
to check the value of the quantity
variable at each line.

42
00:02:16,920 --> 00:02:20,390
Let's add a break point in the first
line of the increment method.

43
00:02:20,390 --> 00:02:22,880
Then I can run the app in debug mode.

44
00:02:22,880 --> 00:02:26,660
Okay, Android Studio says that
the debugger has been connected.

45
00:02:26,660 --> 00:02:29,510
I can click on this Debug tab
to open the debug window.

46
00:02:29,510 --> 00:02:33,660
Now when I click on the plus button,
it triggers the increment method and

47
00:02:33,660 --> 00:02:35,190
the break point at line 25.

48
00:02:35,190 --> 00:02:38,080
At this point the first
line has been executed, so

49
00:02:38,080 --> 00:02:40,700
we've created a quantity
variable with a value of 2.

50
00:02:40,700 --> 00:02:42,620
If we skip to the next line,

51
00:02:42,620 --> 00:02:45,640
then quantity equals 3 would
have already been executed, and

52
00:02:45,640 --> 00:02:48,750
then we do see that the quantity
variable has been updated to 3.

53
00:02:48,750 --> 00:02:50,890
At this point it should
display on the screen, and

54
00:02:50,890 --> 00:02:53,020
we can just hit Resume,
to resume the app.

55
00:02:53,020 --> 00:02:57,850
And then you see that the screen
has updated to the value of 3.

56
00:02:57,850 --> 00:03:01,420
I'd like to show you more examples
of updating the quantity variable.

57
00:03:01,420 --> 00:03:04,350
Even though it doesn't make much sense
from a functionality point of view of

58
00:03:04,350 --> 00:03:08,040
the app to have the plus button
increase the number of coffees

59
00:03:08,040 --> 00:03:09,690
by more than one cup.

60
00:03:09,690 --> 00:03:13,370
From a code perspective if you wanted
to, you could add additional lines of

61
00:03:13,370 --> 00:03:15,819
code to update the variable
several more times.

62
00:03:17,010 --> 00:03:19,260
Then run the app in debug mode again.

63
00:03:19,260 --> 00:03:23,000
If I click on the + button,
then the break point will be triggered.

64
00:03:23,000 --> 00:03:26,810
If I step to the next line then this
first line has finished executing,

65
00:03:26,810 --> 00:03:30,320
and we've created a quantity
variable with an initial value 2.

66
00:03:30,320 --> 00:03:33,910
We go to the next line then
quantity updates to a value of 3.

67
00:03:33,910 --> 00:03:38,100
At the next step quantity variables
updated to a value of 4 and then 5.

68
00:03:39,350 --> 00:03:42,110
If I hit resume execution, then

69
00:03:42,110 --> 00:03:45,845
the screen will finally update to show
the latest quantity value, which is 5.

70
00:03:47,110 --> 00:03:50,790
Now on your computer make these changes
to the increment method in the main

71
00:03:50,790 --> 00:03:52,350
activity file.

72
00:03:52,350 --> 00:03:54,080
Then use the debugger
to step through and

73
00:03:54,080 --> 00:03:58,300
verify that the quantity variable
is being updated as expected.

74
00:03:58,300 --> 00:04:01,490
Then repeat the above steps but
for the decrement method.

75
00:04:01,490 --> 00:04:04,540
Within that method, initialize
the quantity variable to 2, and

76
00:04:04,540 --> 00:04:08,900
then update it so
it goes down to one cup of coffee.

77
00:04:08,900 --> 00:04:11,080
When you run it on your device,
the app should open and

78
00:04:11,080 --> 00:04:13,250
start with a quantity of two.

79
00:04:13,250 --> 00:04:16,980
If you hit the minus button,
then it changes down to a quantity of 1.

80
00:04:16,980 --> 00:04:20,320
If you hit the plus button it
changes to a quantity of 3.

81
00:04:20,320 --> 00:04:23,620
The quantity picker isn't working
exactly like we want yet, but

82
00:04:23,620 --> 00:04:25,485
we're just learning
concepts one at a time and

83
00:04:25,485 --> 00:04:28,230
slowly building up to
the right functionality.

84
00:04:28,230 --> 00:04:31,170
For now you can leave whatever behavior
you currently have hooked up for

85
00:04:31,170 --> 00:04:34,600
the order button,
because that will eventually change.

86
00:04:34,600 --> 00:04:36,600
When you're done,
check this boxes to continue.
