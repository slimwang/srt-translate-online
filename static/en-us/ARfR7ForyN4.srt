1
00:00:00,000 --> 00:00:04,307
The final sort algorithm we'll discuss is one of the most efficient ones for serial processors;

2
00:00:04,307 --> 00:00:07,979
this is quick sort. It is a more complex algorithm on GPUs

3
00:00:07,979 --> 00:00:12,957
because of the control complexity of the algorithm, so let's recap what the quick sort algorithm does.

4
00:00:12,957 --> 00:00:17,987
First, it chooses a pivot element, one particular element from within its input,

5
00:00:17,987 --> 00:00:21,430
then it compares all of the elements in its input to the pivot,

6
00:00:21,430 --> 00:00:25,897
and it uses that comparison to divide the input into 3 sub-arrays.

7
00:00:25,897 --> 00:00:29,067
Those that are less than the pivot, those that are equal to the pivot,

8
00:00:29,089 --> 00:00:33,150
and those that are greater than the pivot, and then it calls quick sort on each of these sub-arrays

9
00:00:33,150 --> 00:00:36,059
and continues until the entire input is sorted.

10
00:00:36,059 --> 00:00:40,925
As an example, let's look at a particular array and choose that the pivot is equal to 3.

11
00:00:40,925 --> 00:00:44,757
So what we're going to do here is compare each one of these elements to the pivot,

12
00:00:44,757 --> 00:00:50,478
and we're going to decide if they're equal to, greater than, or less than the pivot.

13
00:00:50,478 --> 00:00:54,482
Then we'll divide it into 3 arrays, those that are less than the pivot,

14
00:00:54,482 --> 00:00:57,908
those that are equal to the pivot, and those that are greater than the pivot,

15
00:00:57,908 --> 00:01:01,485
and we'll call quick sort on each of these arrays and do the same thing.

16
00:01:01,485 --> 00:01:04,679
So when we have 2 and 1, let's say we choose 2 as the pivot,

17
00:01:04,679 --> 00:01:08,652
then we'll divide this into smaller than the pivot and equal to the pivot.

18
00:01:08,652 --> 00:01:12,490
This doesn't need to be recursed because it only has a single element.

19
00:01:12,490 --> 00:01:18,061
And let's say we choose 4 as the pivot here, this is greater than the pivot, this is equal to the pivot,

20
00:01:18,061 --> 00:01:20,312
and now we have a completely sorted array.

21
00:01:20,312 --> 00:01:23,600
So this is a very challenging algorithm to implement on the GPU.

22
00:01:23,600 --> 00:01:28,005
The other algorithms that we've looked at are pretty simple to describe, and they don't recurse.

23
00:01:28,005 --> 00:01:33,343
This one is more complex, and until very recently GPUs didn't support recursion at all.

24
00:01:33,343 --> 00:01:38,062
Indeed, the GPUs we use in this class don't support recursion currently.

25
00:01:38,062 --> 00:01:45,190
So how can we take this seemingly recursive-only algorithm and map it to the GPU using the primitives that we've learned?

26
00:01:45,190 --> 00:01:47,425
So I'm bringing up this example for two reasons.

27
00:01:47,425 --> 00:01:53,264
The first is that you have already learned all the pieces that you need to implement quick sort on the GPU,

28
00:01:53,264 --> 00:02:00,037
and the second is to motivate the benefits of new GPU capabilities that do natively support recursion.

29
00:02:00,037 --> 00:02:04,976
So we can implement quick sort without recursion by using the idea of segments.

30
00:02:04,976 --> 00:02:10,033
Recall that segmented operations, like scans, only operate within a single segment;

31
00:02:10,033 --> 00:02:13,198
operations on one segment don't affect other segments.

32
00:02:13,198 --> 00:02:17,221
That sounds a little bit like recursion, and in fact it maps in a similar way.

33
00:02:17,221 --> 00:02:20,457
For quick sort, when we begin to process the initial array,

34
00:02:20,457 --> 00:02:27,264
we're going to use distributes, maps, and compacts to eventually divide it into 3 segments.

35
00:02:27,264 --> 00:02:32,203
We can use segmented scans to do all the necessary operations that we need to make this work,

36
00:02:32,203 --> 00:02:37,646
including distributing a pivot across a segment for comparisons and splitting a segment,

37
00:02:37,646 --> 00:02:41,413
which is similar to the way that we split on a particular bit in radix sort.

38
00:02:41,413 --> 00:02:45,282
Quick sort is interesting because it shows you how useful segments can be,

39
00:02:45,282 --> 00:02:50,461
that they can let you mirror the same approach you use in recursion, without actually using recursion.

40
00:02:50,461 --> 00:02:52,930
But, and I gotta be perfectly honest here,

41
00:02:52,930 --> 00:02:56,829
it's really a challenge to implement and equally challenging to make it fast.

42
00:02:56,829 --> 00:03:03,501
So it's very exciting that the newest in video GPUs support a more flexible programming model where kernels can actually call,

43
00:03:03,501 --> 00:03:08,072
can launch other kernels, which makes quick sort's recursive calls much more straightforward.

44
00:03:08,072 --> 00:03:10,837
We're not using this new capability in the class.

45
00:03:10,837 --> 00:03:16,016
The Amazon instances where our code is running don't have these new GPUs that support this capability at this time,

46
00:03:16,016 --> 00:03:18,824
but it's really exciting, and so when we get to unit 7,

47
00:03:18,824 --> 00:03:22,319
we'll see exactly what it looks like and how it applies to Quick sort.
