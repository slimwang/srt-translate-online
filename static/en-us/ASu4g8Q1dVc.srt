1
00:00:00,380 --> 00:00:05,753
The abstractions that the transport layer provides are endpoint,

2
00:00:05,753 --> 00:00:10,440
transport, channel, and connection. And I'll talk

3
00:00:10,440 --> 00:00:11,800
about each of these things in a little

4
00:00:11,800 --> 00:00:14,980
bit more detail. Endpoint you can think of

5
00:00:14,980 --> 00:00:19,920
as nothing but a protection domain or you can say it is a Java virtual machine.

6
00:00:19,920 --> 00:00:25,670
And it has a table of remote objects that it can access. And so this gives

7
00:00:25,670 --> 00:00:32,580
you a protection domain or a sandbox for execution of a server cord or

8
00:00:32,580 --> 00:00:37,040
a client cord can exist within the sandbox. That's what end point. Its basically

9
00:00:37,040 --> 00:00:40,290
a protection domain. Connection management, is the

10
00:00:40,290 --> 00:00:43,120
interesting piece that is what is about

11
00:00:43,120 --> 00:00:46,510
all the details of connecting these end

12
00:00:46,510 --> 00:00:51,640
points together. And in particular, the connection management

13
00:00:51,640 --> 00:00:57,850
of the transport layer of the Java Runtime system is responsible for setting up

14
00:00:57,850 --> 00:01:01,990
connections, tearing down connections, listening for incoming

15
00:01:01,990 --> 00:01:05,580
connections, and establishing the connection. And when a

16
00:01:05,580 --> 00:01:09,250
connection is established. Between two end points

17
00:01:09,250 --> 00:01:11,120
there's a distraction that I mentioned called

18
00:01:11,120 --> 00:01:14,200
transport comes into play. So, for instant

19
00:01:14,200 --> 00:01:17,610
between this end point, and this end point,

20
00:01:17,610 --> 00:01:21,120
thec connection manager decided to have udp

21
00:01:21,120 --> 00:01:25,230
transport. So a channel is established between this

22
00:01:25,230 --> 00:01:27,340
end point and this end point to do

23
00:01:27,340 --> 00:01:30,790
udp transport between these two end points. And

24
00:01:30,790 --> 00:01:33,720
so this is the functionality of the UDP

25
00:01:33,720 --> 00:01:37,540
transport that is incorporated in this transport layer.

26
00:01:37,540 --> 00:01:40,570
And similarly, between this endpoint and this endpoint,

27
00:01:40,570 --> 00:01:42,880
the connection manager decided to use a TCP

28
00:01:42,880 --> 00:01:45,270
channel, so the transport that is being used

29
00:01:45,270 --> 00:01:48,370
here is a TCP connection, both ends. We have

30
00:01:48,370 --> 00:01:50,960
a TCB connection at both ends to connecting

31
00:01:50,960 --> 00:01:54,340
this endpoint with this endpoint. Notice that a given

32
00:01:54,340 --> 00:01:57,660
endpoint, can have different transport for talking to

33
00:01:57,660 --> 00:02:01,370
different endpoints depending on a variety of parameters. What

34
00:02:01,370 --> 00:02:04,730
is the best way for this endpoint to talk

35
00:02:04,730 --> 00:02:08,250
to this endpoint may decide what kind of connection.

36
00:02:08,250 --> 00:02:13,160
This end point is going to establish with this end point. That is all part of

37
00:02:13,160 --> 00:02:16,190
connection management that is happening in the transport

38
00:02:16,190 --> 00:02:18,270
layer of the Java run time. And the

39
00:02:18,270 --> 00:02:22,820
connection manager is also responsible for locating the

40
00:02:22,820 --> 00:02:28,320
dispatcher for a remote method that is being invoked on this end point.

41
00:02:28,320 --> 00:02:33,930
So. A transport is listening on a channel. And when

42
00:02:33,930 --> 00:02:36,870
an invocation comes in, then this transport

43
00:02:36,870 --> 00:02:42,220
is responsible for identifying, or locating, the dispatcher

44
00:02:42,220 --> 00:02:44,990
on this domain, which will know how to

45
00:02:44,990 --> 00:02:47,910
carry out that invocation. And the connection managers

46
00:02:47,910 --> 00:02:50,870
also responsible for managing the liveness of the

47
00:02:50,870 --> 00:02:54,120
connection. Because, if any point goes away, it

48
00:02:54,120 --> 00:02:56,860
needs to know that and inform this domain

49
00:02:56,860 --> 00:02:58,840
that, oh this particular end point is gone.

50
00:02:58,840 --> 00:03:03,990
So, take the appropriate action. So that kind of liveness monitoring is part of

51
00:03:03,990 --> 00:03:06,960
connection management. So the last abstraction I

52
00:03:06,960 --> 00:03:09,640
mentioned is the notion of connection itself.

53
00:03:09,640 --> 00:03:16,130
So once a channel has been established. Then the transport can do IO on

54
00:03:16,130 --> 00:03:19,290
this channel using connections. So, the path

55
00:03:19,290 --> 00:03:23,900
for the transport layer is in connection management.

56
00:03:23,900 --> 00:03:27,410
It listens for an incoming request. When

57
00:03:27,410 --> 00:03:30,580
an incoming request comes in. It then establishes

58
00:03:30,580 --> 00:03:34,230
a channel, and the channel that is established

59
00:03:34,230 --> 00:03:37,080
for communication, which is a mutual agreement between

60
00:03:37,080 --> 00:03:39,630
these two endpoints. It choses a transport

61
00:03:39,630 --> 00:03:43,260
that is most appropriate for that and once

62
00:03:43,260 --> 00:03:46,580
the channel has been established, a connection. Is

63
00:03:46,580 --> 00:03:49,320
now made between this endpoint and this endpoint

64
00:03:49,320 --> 00:03:52,330
through this channel. And now these two endpoints

65
00:03:52,330 --> 00:03:54,750
can do I/O on the channel using the

66
00:03:54,750 --> 00:03:57,990
connection. So that's how the transport mechanism of

67
00:03:57,990 --> 00:04:02,660
RMI works. As we saw, the transport mechanism sits

68
00:04:02,660 --> 00:04:06,690
below the RRL layer. And so it allows

69
00:04:06,690 --> 00:04:09,320
all the object invocations to happen through the

70
00:04:09,320 --> 00:04:12,170
transport layer. And the RRL layer is the

71
00:04:12,170 --> 00:04:14,980
one that is deciding, what are the right transport

72
00:04:14,980 --> 00:04:19,089
to use depending on the location of the

73
00:04:19,089 --> 00:04:22,130
two endpoints, where the client is and where

74
00:04:22,130 --> 00:04:25,440
the server is. Depending on that, it might

75
00:04:25,440 --> 00:04:27,740
decide what would be the right transport to use.

76
00:04:27,740 --> 00:04:30,300
Whether it should use TCP or UDP and

77
00:04:30,300 --> 00:04:34,060
so on. And gives that command to the connection

78
00:04:34,060 --> 00:04:36,210
manager which is part of the transport layer

79
00:04:36,210 --> 00:04:40,120
of the software stack. So that the established channel

80
00:04:40,120 --> 00:04:46,290
can be established and then a connection can be used for actual transport. Of

81
00:04:46,290 --> 00:04:48,810
the implementation between the client and server.

82
00:04:49,810 --> 00:04:52,810
So in summary, the distributed object model of

83
00:04:52,810 --> 00:04:56,660
Java is a powerful vehicle for constructing

84
00:04:56,660 --> 00:05:00,170
network services and what we say in this

85
00:05:00,170 --> 00:05:03,290
lesson. Is a glimpse of the classes

86
00:05:03,290 --> 00:05:05,720
that are available in the distributed object model

87
00:05:05,720 --> 00:05:07,660
that makes the life of the developer

88
00:05:07,660 --> 00:05:11,300
easy in terms of creating network objects and

89
00:05:11,300 --> 00:05:17,540
making it visible for clients to use anywhere. And the power of the RRL layer in

90
00:05:17,540 --> 00:05:22,550
dynamically deciding how to make the client-server relationship.

91
00:05:22,550 --> 00:05:24,660
Similar to the sub contract mechanism that we

92
00:05:24,660 --> 00:05:26,710
saw in spring and we also saw the

93
00:05:26,710 --> 00:05:30,840
flexibility in the connection management. Allowing different kinds

94
00:05:30,840 --> 00:05:36,010
of transport exist between the client and the server depending on

95
00:05:36,010 --> 00:05:39,660
the location of the client and network conditions and so on.
