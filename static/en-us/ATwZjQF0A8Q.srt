1
00:00:00,430 --> 00:00:04,430
Traffic engineering has three steps: measuring

2
00:00:04,430 --> 00:00:06,820
the network to figure out the current

3
00:00:06,820 --> 00:00:09,410
traffic loads, forming a model of

4
00:00:09,410 --> 00:00:13,330
how configuration affects the underlying paths in

5
00:00:13,330 --> 00:00:16,460
the network, and then ultimately reconfiguring

6
00:00:16,460 --> 00:00:20,350
the network to exert control over how

7
00:00:20,350 --> 00:00:22,440
the traffic flows through the network. An

8
00:00:22,440 --> 00:00:26,200
operator might measure the topology and traffic,

9
00:00:26,200 --> 00:00:28,455
feed the topology and traffic to a

10
00:00:28,455 --> 00:00:32,189
what-if model that predicts what will happen under

11
00:00:32,189 --> 00:00:35,490
various type of configuration changes, decide which

12
00:00:35,490 --> 00:00:38,780
changes to affect on the network, and then,

13
00:00:38,780 --> 00:00:42,600
ultimately, control the network behavior by readjusting

14
00:00:42,600 --> 00:00:45,340
link weights. So in summary, we have measurement,

15
00:00:45,340 --> 00:00:48,410
modeling and control. Each of these three components

16
00:00:48,410 --> 00:00:51,820
requires a significant amount of heavy lifting to

17
00:00:51,820 --> 00:00:54,545
make both practical and accurate in practice.

18
00:00:54,545 --> 00:00:58,360
Intradomain traffic engineering attempts to solve an

19
00:00:58,360 --> 00:01:05,430
optimization problem, where the input is the graph G, where R is the set

20
00:01:05,430 --> 00:01:11,580
of routers, and L is the set of unidirectional links. Each link L also

21
00:01:11,580 --> 00:01:17,180
has a fix capacity. Another input is the traffic matrix or offered traffic load,

22
00:01:17,180 --> 00:01:24,490
where Mij represent the traffic load from router i to router j. The output

23
00:01:24,490 --> 00:01:29,420
of the optimization problem is a set of link weights, where wl is the weight

24
00:01:29,420 --> 00:01:32,970
on any unidirectional link l in the

25
00:01:32,970 --> 00:01:36,410
network topology. Ultimately, the setting of these

26
00:01:36,410 --> 00:01:42,520
link weights should result in a fraction of the traffic from i to j traversing

27
00:01:42,520 --> 00:01:48,183
each link l, such that those fractions satisfy the network-wide

28
00:01:48,183 --> 00:01:52,350
objective function. Defining an objective function is tricky. We could

29
00:01:52,350 --> 00:01:57,550
talk about, for example, minimizing the maximum congested link in

30
00:01:57,550 --> 00:02:01,550
the network, evenly splitting traffic loads across links, and so forth.
