1
00:00:00,360 --> 00:00:02,250
I want you to recall one particular

2
00:00:02,250 --> 00:00:04,640
memory consistency model that I've discussed with you

3
00:00:04,640 --> 00:00:08,080
before, that is sequential consistency. And in sequential

4
00:00:08,080 --> 00:00:11,480
consistency, the idea is very simple. The idea

5
00:00:11,480 --> 00:00:15,640
is that every process is making some memory

6
00:00:15,640 --> 00:00:17,940
accesses, all of these, let's say, are shared

7
00:00:17,940 --> 00:00:21,590
memory accesses. And from the perspective of the

8
00:00:21,590 --> 00:00:26,140
programmer, the expectation is that, these memory accesses

9
00:00:26,140 --> 00:00:29,270
are happening in the textual order that you see

10
00:00:29,270 --> 00:00:31,430
here and that's the expecation so far as this

11
00:00:31,430 --> 00:00:34,530
programmer is concerned. Similarly, if you see the set

12
00:00:34,530 --> 00:00:37,080
of memory accesses that are happening on a different process

13
00:00:37,080 --> 00:00:40,770
of p2. Once again, the expectation is that the

14
00:00:40,770 --> 00:00:44,490
order in which these memory accesses are happening are

15
00:00:44,490 --> 00:00:47,980
the textual order. Now, the real question is, what

16
00:00:47,980 --> 00:00:51,810
happens to the accesses that are happening on one processor

17
00:00:51,810 --> 00:00:53,760
with respect to the accesses that are happening

18
00:00:53,760 --> 00:00:56,630
on another processor if they are accessing exactly

19
00:00:56,630 --> 00:00:59,030
the same memory location? For instance, P1 is

20
00:00:59,030 --> 00:01:02,290
reading memory location a, P2 is writing to

21
00:01:02,290 --> 00:01:07,970
memory location a. What is the order between this read by P1 and this write by

22
00:01:07,970 --> 00:01:12,040
P2? This is where sequential consitency model says

23
00:01:12,040 --> 00:01:17,130
that the interleaving of memory accesses between multiple processors,

24
00:01:17,130 --> 00:01:22,040
here I'm showing you two, but you can have n number of those processors. Making

25
00:01:22,040 --> 00:01:25,190
accesses to shared memory all in parallel.

26
00:01:25,190 --> 00:01:28,420
When that happens you want to observe the textual

27
00:01:28,420 --> 00:01:30,680
program order for the accesses and the

28
00:01:30,680 --> 00:01:35,290
individual processes but the interleaving of the memory

29
00:01:35,290 --> 00:01:39,800
accesses coming from the different processors is arbitrary.

30
00:01:39,800 --> 00:01:42,200
So in other words, the sequential memory consistency

31
00:01:42,200 --> 00:01:45,960
model builds on the atomicity for individual read-write

32
00:01:45,960 --> 00:01:49,770
operations and says that, individual read-write operations are atomic

33
00:01:49,770 --> 00:01:52,560
on any given processor, and the program order has

34
00:01:52,560 --> 00:01:55,760
to be preserved. And, in order to think about

35
00:01:55,760 --> 00:01:58,530
the in, interleaving of the memory axises that are

36
00:01:58,530 --> 00:02:02,000
happening on different processors. That can be arbitrary and

37
00:02:02,000 --> 00:02:04,460
that should be consistent with the thinking of the

38
00:02:04,460 --> 00:02:07,228
programmer. And I also gave you the analogy of

39
00:02:07,228 --> 00:02:13,015
a card shark to illustrate what is going on with a sequential consistency model.

40
00:02:13,015 --> 00:02:20,250
So the card shark is taking two splits of a card deck and, doing a perfect

41
00:02:20,250 --> 00:02:22,930
merge shuffle of the two splits, and

42
00:02:22,930 --> 00:02:26,550
that's exactly what's going on with sequential consistency.

43
00:02:26,550 --> 00:02:32,410
If you can think of these memory accesses on an individual processor as the card

44
00:02:32,410 --> 00:02:34,410
split but instead of a two-way split you have

45
00:02:34,410 --> 00:02:36,930
an n-way split, and we are doing a merge

46
00:02:36,930 --> 00:02:40,780
way shuffle of all the n-ways. Splits off the

47
00:02:40,780 --> 00:02:44,840
memory accesses to get the sequentially consistent memory model.
