1
00:00:00,000 --> 00:00:03,000
In this problem we're tasked with creating a function

2
00:00:03,000 --> 00:00:07,000
that determines whether or not a context-free grammar is infinite.

3
00:00:07,000 --> 00:00:11,000
We say an infinite grammar is one that accepts an infinite number of strings.

4
00:00:11,000 --> 00:00:13,000
So let's come up with an example.

5
00:00:13,000 --> 00:00:20,000
Here is a grammar that accepts strings that spell out ba--different length of a, 3 a's--

6
00:00:20,000 --> 00:00:24,000
and this can be possibly an infinite number of a's that follow the b.

7
00:00:24,000 --> 00:00:28,000
In an example of a finite grammar, I simply took the infinite grammar,

8
00:00:28,000 --> 00:00:32,000
removed the a right here, and this grammar only accepts the string b.

9
00:00:32,000 --> 00:00:37,000
Since the number of strings that this grammar accepts is finite--it's not infinite--

10
00:00:37,000 --> 00:00:39,000
it's not an infinite grammar.

11
00:00:39,000 --> 00:00:42,000
So before I go on with how we're going to approach this problem,

12
00:00:42,000 --> 00:00:46,000
I'm going to go over one of the assumptions that you were given in the problem specification.

13
00:00:46,000 --> 00:00:50,000
That assumption is that for every non-terminal in the grammar,

14
00:00:50,000 --> 00:00:54,000
it derives at least 1 non-empty--that's critical--string.

15
00:00:54,000 --> 00:00:59,000
If you see S, you can assume that there's at least 1 non-empty string that S derives.

16
00:00:59,000 --> 00:01:01,000
So how does that help us?

17
00:01:01,000 --> 00:01:04,000
The way we're going to approach this problem is that we're going to try to see

18
00:01:04,000 --> 00:01:10,000
if we can rewrite Q where Q is any non-terminal in our grammar

19
00:01:10,000 --> 00:01:16,000
in the form of some terminal x, Q again, and some terminal y

20
00:01:16,000 --> 00:01:18,000
where either x or y is non-empty--

21
00:01:18,000 --> 00:01:23,000
that is, the length of x and y together is greater than 0.

22
00:01:23,000 --> 00:01:26,000
So they both can't be empty because that's not a very helpful rule

23
00:01:26,000 --> 00:01:30,000
if Q goes to Q. That's not going to make us any progress.

24
00:01:30,000 --> 00:01:33,000
The reason that this is important is that if we have this rule

25
00:01:33,000 --> 00:01:39,000
or can rewrite Q in this form, we're back to the ba rule that we had originally.

26
00:01:39,000 --> 00:01:44,000
If we have this rule, we can build up an infinite string by simply repeating it

27
00:01:44,000 --> 00:01:48,000
over and over again and adding x's to the beginning or y's to the end.

28
00:01:48,000 --> 00:01:50,000
And so that's how we get an infinite grammar.

29
00:01:50,000 --> 00:01:55,000
The assumption comes in again because if we see this rule,

30
00:01:55,000 --> 00:02:01,000
we've assumed that Q can derive at least 1 non-empty string.

31
00:02:01,000 --> 00:02:05,000
We don't have to run what we wrote earlier in the homework, cfgempty, on Q;

32
00:02:05,000 --> 00:02:07,000
we can just assume it.

33
00:02:07,000 --> 00:02:10,000
So I don't actually even have to check if Q can eventually finish.

34
00:02:10,000 --> 00:02:15,000
If I find Q, I've found that the grammar is infinite as long as this property holds.

35
00:02:15,000 --> 00:02:17,000
So let's go over the game plan.

36
00:02:17,000 --> 00:02:20,000
I'm going to go through each non-terminal in the grammar

37
00:02:20,000 --> 00:02:22,000
because it doesn't really matter where I start.

38
00:02:22,000 --> 00:02:27,000
Any one of them is a valid way to generate an infinite grammar.

39
00:02:27,000 --> 00:02:31,000
Then I'm going to check for each of those non-terminals if it's possible

40
00:02:31,000 --> 00:02:35,000
to form something in the manner of this rewrite rule. So how do I do this part?

41
00:02:35,000 --> 00:02:38,000
I'm going to write a recursive helper function,

42
00:02:38,000 --> 00:02:40,000
and I'm going to check if that rule is of that form.

43
00:02:40,000 --> 00:02:45,000
If it's not, I'm going to recurse; if it is, I'm going to stop. Let's go to the code.

44
00:02:45,000 --> 00:02:47,000
Here I've declared my function, cfginfinite,

45
00:02:47,000 --> 00:02:50,000
where I take in a Python representation of the grammar.

46
00:02:50,000 --> 00:02:52,000
I'm going to go through every rule in the grammar--

47
00:02:52,000 --> 00:02:54,000
that's what this list comprehension does--

48
00:02:54,000 --> 00:02:58,000
and Q is going to be the left-hand side symbol in that rule.

49
00:02:58,000 --> 00:03:01,000
So this may be new to you.

50
00:03:01,000 --> 00:03:05,000
What I've done is I've declared a function within my function.

51
00:03:05,000 --> 00:03:10,000
The effect of this is that I can only call the helper function that I'm creating

52
00:03:10,000 --> 00:03:12,000
within the function cfginfinite.

53
00:03:12,000 --> 00:03:19,000
One advantage of doing this is that this function is not useful to any other code

54
00:03:19,000 --> 00:03:22,000
because I wrote it specifically for cfginfinite.

55
00:03:22,000 --> 00:03:25,000
So I can restrict access so that it's not misused in other places

56
00:03:25,000 --> 00:03:27,000
or depended on in other places.

57
00:03:27,000 --> 00:03:30,000
One disadvantage is that it kind of makes the code harder to read,

58
00:03:30,000 --> 00:03:33,000
and it makes it more difficult to understand where functions can be called

59
00:03:33,000 --> 00:03:35,000
and where they can't.

60
00:03:35,000 --> 00:03:40,000
Regardless, I'm using this helper function to determine whether or not the symbol Q

61
00:03:40,000 --> 00:03:49,000
can be rewritten in our form of x Q y where the length of x and y together is greater than 0.

62
00:03:49,000 --> 00:03:52,000
The 3 parameters are the current symbol we're at, the symbols we visited--

63
00:03:52,000 --> 00:03:55,000
we don't want to loop around; otherwise, the helper function won't finish--

64
00:03:55,000 --> 00:03:59,000
and the size of x and y in that case. It's this value.

65
00:03:59,000 --> 00:04:02,000
If I've looped around and I've already visited something,

66
00:04:02,000 --> 00:04:06,000
I'm going to return whether or not the size of x and y is greater than 0.

67
00:04:06,000 --> 00:04:11,000
If it is, we've found the rule that we're looking for and the helper will return True.

68
00:04:11,000 --> 00:04:15,000
If it's not, we're going to return False because we're not making the progress

69
00:04:15,000 --> 00:04:19,000
towards an infinite number of strings that we wanted to.

70
00:04:19,000 --> 00:04:22,000
Otherwise, we're going to have to parse through the rewrite rules

71
00:04:22,000 --> 00:04:25,000
that apply to that symbol current.

72
00:04:25,000 --> 00:04:27,000
I'm going to update my list of visited symbols,

73
00:04:27,000 --> 00:04:30,000
and then I'm going to go through each rewrite rule.

74
00:04:30,000 --> 00:04:36,000
So here, this for loop iterates through the right-hand sides of every rewrite rule

75
00:04:36,000 --> 00:04:38,000
that the current symbol applies to.

76
00:04:38,000 --> 00:04:41,000
Where the current symbol is equal to the left-hand side of that rule,

77
00:04:41,000 --> 00:04:44,000
it returns the right-hand side. Just another way to say it.

78
00:04:44,000 --> 00:04:46,000
I'm going to go through every symbol on the right-hand side,

79
00:04:46,000 --> 00:04:49,000
and I'm going to recurse on that symbol

80
00:04:49,000 --> 00:04:52,000
where the current of the recursive call is the symbol I'm on,

81
00:04:52,000 --> 00:04:57,000
updated symbols I've visited, and I'm updating the size of x and y

82
00:04:57,000 --> 00:05:03,000
that was passed in before with the length of the right-hand side minus 1.

83
00:05:03,000 --> 00:05:08,000
We do the minus 1 to exclude what we're recurring on, the Q.

84
00:05:08,000 --> 00:05:10,000
In this case, Q is symbol.

85
00:05:10,000 --> 00:05:13,000
When I do prove that Q can go back to Q,

86
00:05:13,000 --> 00:05:18,000
I can then check the size of everything else that I found before I found that loop.

87
00:05:18,000 --> 00:05:21,000
If helper is never true, then I'm just going to return False.

88
00:05:21,000 --> 00:05:24,000
So now that I've defined my helper function, I need to use it.

89
00:05:24,000 --> 00:05:29,000
For each symbol Q which this list comprehension returns,

90
00:05:29,000 --> 00:05:31,000
I'm going to try my helper function on that symbol.

91
00:05:31,000 --> 00:05:34,000
If that's ever true, I'm going to return True.

92
00:05:34,000 --> 00:05:38,000
If for every symbol I never find the helper function to be true, I'm going to return False.

93
00:05:38,000 --> 99:59:59,999
And I'm done.
