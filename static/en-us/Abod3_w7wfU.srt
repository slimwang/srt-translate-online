1
00:00:00,000 --> 00:00:04,000
The next issue we're going to explore is basically purely selling my own views and opinions,

2
00:00:04,000 --> 00:00:07,000
but the next issue we're going to explore is the question,

3
00:00:07,000 --> 00:00:09,000
Can random testing inspire confidence?

4
00:00:09,000 --> 00:00:13,000
And so what I said earlier in this course is the purpose of testing is to maximize

5
00:00:13,000 --> 00:00:16,000
the number of bugs found per amount of effort spent testing,

6
00:00:16,000 --> 00:00:18,000
and so that's really what testing is all about.

7
00:00:18,000 --> 00:00:21,000
On the other hand, when we start to do a better and better job testing

8
00:00:21,000 --> 00:00:24,000
especially using random testing, we start to get tempted to use those results

9
00:00:24,000 --> 00:00:26,000
as justification to believe that we're creating good software.

10
00:00:26,000 --> 00:00:31,000
What I want to talk about now is, is that ever justified, is that an inference that we can make?

11
00:00:31,000 --> 00:00:38,000
What I think I can give is sort of a highly qualified yes answer to this question.

12
00:00:38,000 --> 00:00:40,000
Let's go through the qualifications.

13
00:00:40,000 --> 00:00:44,000
If we have an API that we understand really well and we have a relatively small piece of code

14
00:00:44,000 --> 00:00:50,000
For example we're doing unit testing of a data structure like a balanced tree

15
00:00:50,000 --> 00:00:54,000
and we have a strong and well-chosen collection of assertion embedded in that code

16
00:00:54,000 --> 00:00:59,000
and we have a mature, well-tuned random tester, and we've measured coverage

17
00:00:59,000 --> 00:01:03,000
and shown that coverage is good then at least in some cases, I think we can conclude

18
00:01:03,000 --> 00:01:05,000
that the software is pretty good.

19
00:01:05,000 --> 00:01:09,000
What I mean basically by this is that I could or any of you could take the splay tree

20
00:01:09,000 --> 00:01:12,000
that we looked at for the queue or red ??? or something.

21
00:01:12,000 --> 00:01:15,000
Do all of these things and develop a reasonably high degree of confidence as described.

22
00:01:15,000 --> 00:01:18,000
If any of these conditions isn't met, I would strongly doubt

23
00:01:18,000 --> 00:01:20,000
whether random testing can inspire confidence.

24
00:01:20,000 --> 00:01:22,000
If you don't have a small code, let's say that instead of small code

25
00:01:22,000 --> 00:01:26,000
we have would be acrobat reader, there's no way, even if we have all these other things

26
00:01:26,000 --> 00:01:29,000
that we could possibly get any confidence in the quality of that software using random testing.

27
00:01:29,000 --> 00:01:33,000
For example, if we don't have a small code, if we have for example adobe acrobat reader

28
00:01:33,000 --> 00:01:35,000
then even all of these other things were true,

29
00:01:35,000 --> 00:01:38,000
there is no way that random testing would inspire the confidence in the quality of the product.

30
00:01:38,000 --> 00:01:42,000
The thing we should keep in mind is since these conditions for inspiring confidence

31
00:01:42,000 --> 00:01:45,000
are quite restrictive, we never just do random testing.

32
00:01:45,000 --> 00:01:48,000
We always use it to augment other testing methods that might be even better

33
00:01:48,000 --> 00:01:50,000
at showing up some of the weakness of random testing.
