1
00:00:00,120 --> 00:00:05,720
So the next technique in Stratton's Optimization Taxonomy is called the scatter-to-gather transformation.

2
00:00:05,720 --> 00:00:08,743
Now most interesting computations involve a step

3
00:00:08,743 --> 00:00:12,860
where many input elements contribute to the computation of an output element.

4
00:00:12,860 --> 00:00:16,420
So in this example the elements labeled blue in the input array

5
00:00:16,420 --> 00:00:19,633
are contributing to the blue element in the output array,

6
00:00:19,633 --> 00:00:24,126
and the elements labeled green in the input array are contributing to the green in the output array and so forth.

7
00:00:24,126 --> 00:00:28,131
And examples from you homework included blurring the image or computing a histogram.

8
00:00:28,131 --> 00:00:31,932
And sometimes, of course, the locations of the input elements

9
00:00:31,932 --> 00:00:34,710
that will contribute to particular output element

10
00:00:34,710 --> 00:00:37,607
aren't know ahead of time like in a histogram example.

11
00:00:37,607 --> 00:00:40,649
And we've talked about the difference between scatter and gather.

12
00:00:40,649 --> 00:00:43,845
In scatter the threads are assigned to the input elements,

13
00:00:43,845 --> 00:00:47,560
and each one is deciding where it needs to write.

14
00:00:47,560 --> 00:00:50,186
In gather the threads were signed to the output elements,

15
00:00:50,186 --> 00:00:53,428
and each one decides where he needs to go read from.

16
00:00:53,428 --> 00:00:55,846
So here's a quick quiz which should be pure review.

17
00:00:55,846 --> 00:00:59,997
Which code snippet represents a gather, and which one will run more efficiently?

18
00:00:59,997 --> 00:01:03,697
Here's code snippet 1, and here's code snippet 2.

19
00:01:03,697 --> 00:01:06,117
In each of these cases you can assume that out and in

20
00:01:06,117 --> 00:01:10,300
are arrays of floating point numbers and that i represents the thread index.
