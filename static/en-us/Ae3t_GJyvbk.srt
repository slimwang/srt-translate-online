1
00:00:00,000 --> 00:00:03,000
All of that was just introducing these two functions, and so the deal is,

2
00:00:03,000 --> 00:00:06,000
is this really easy to write straightforward code for this?

3
00:00:06,000 --> 00:00:08,000
Let's take a quick look. So, here's high<u>common</u>bits.

4
00:00:08,000 --> 00:00:13,000
All we're going to do is walk through the bits in the input here. I'm assuming a 64-bit input.

5
00:00:13,000 --> 00:00:16,000
We're going to walk through the input, reversed, so from 63 to 0.

6
00:00:16,000 --> 00:00:22,000
And every time we see 2 bits being the same in a and b, we copy that bits to the output.

7
00:00:22,000 --> 00:00:25,000
As soon as we see 2 bits at the same position that are different in a and b,

8
00:00:25,000 --> 00:00:29,000
we set that bit position in the output and return it, and low<u>common</u>bits are just the same.

9
00:00:29,000 --> 00:00:33,000
The only thing that is different is we looped from 0 to 63 instead of 63 to 0,

10
00:00:33,000 --> 00:00:35,000
but we do exactly the same thing we're copying bits in the output

11
00:00:35,000 --> 00:00:37,000
as long as they are common between a and b.

12
00:00:37,000 --> 00:00:40,000
And as soon as we see a difference, setting the bit and return it.

13
00:00:40,000 --> 00:00:42,000
What we have here is a really slow implementation.

14
00:00:42,000 --> 00:00:46,000
Even if we translate this implementation straightforwardly to see,

15
00:00:46,000 --> 00:00:49,000
it's still going to be really slow compared to optimized implementation.

16
00:00:49,000 --> 00:00:52,000
Optimized implementations of this are going to be potentially more complicated

17
00:00:52,000 --> 00:00:56,000
and potentially harder to get it right, but it might execute in just a handful of clock cycles

18
00:00:56,000 --> 00:01:00,000
as opposed to maybe a hundred clock cycles for the optimized C versions

19
00:01:00,000 --> 00:01:02,000
and probably thousands of clock cycles for the Python.

20
00:01:02,000 --> 00:01:04,000
Of course, performances are really going to be our concern here.

21
00:01:04,000 --> 00:01:09,000
We're just using this to illustrate initially that comes up and extremely optimize chart codes.

22
00:01:09,000 --> 00:01:12,000
The factor we're trying so hard to optimize these codes means

23
00:01:12,000 --> 00:01:14,000
we're going to have some concerns about whether they are correct or not.

24
00:01:14,000 --> 00:01:16,000
Let's talk about how we're going to deal with that.

25
00:01:16,000 --> 00:01:18,000
What we're probably going to do is write a random tester.

26
00:01:18,000 --> 00:01:20,000
The reason we're going to write a random tester is with 64-bit inputs,

27
00:01:20,000 --> 00:01:24,000
the input demand for either of these functions is going to contain

28
00:01:24,000 --> 00:01:27,000
220 elements so it's far too big, too exhaustible test.

29
00:01:27,000 --> 00:01:30,000
We're going to be forced to do some sort of either systematic testing or random testing.

30
00:01:30,000 --> 00:01:33,000
There's is no way out of partial testing of these functions.

31
00:01:33,000 --> 00:01:36,000
The most obvious kind of random tester array

32
00:01:36,000 --> 00:01:39,000
would be make a random 64-bit integer, make another one.

33
00:01:39,000 --> 00:01:43,000
Now assert that our super super optimized high<u>common</u>bits function called with a and b

34
00:01:43,000 --> 00:01:46,000
returned the same results as a reference implementation

35
00:01:46,000 --> 00:01:50,000
that showed through Python version but sort of simple incredibly obvious code

36
00:01:50,000 --> 00:01:52,000
and maybe reference implementation at C, it doesn't really matter.

37
00:01:52,000 --> 00:01:56,000
We're just going to randomly test all sorts of configuration of the function.

38
00:01:56,000 --> 00:01:58,000
The question we're going to ask is, is this a good random tester?

39
00:01:58,000 --> 00:02:01,000
And what we might do is run the code coverage tool so let's go ahead and do that.
