1
00:00:00,150 --> 00:00:01,950
The next thing we will discuss is the

2
00:00:01,950 --> 00:00:05,340
so called, Iron Law of Performance. For a large

3
00:00:05,340 --> 00:00:07,290
part of this class we will be looking only

4
00:00:07,290 --> 00:00:10,642
at the processor itself. So the processor time can

5
00:00:10,642 --> 00:00:14,414
be expressed as the number of instructions per program

6
00:00:14,414 --> 00:00:17,940
times the number of cycles we spent per instruction

7
00:00:17,940 --> 00:00:21,390
times the clock cycle time. Or the number of

8
00:00:21,390 --> 00:00:25,230
seconds per clock cycle. To understand why this is

9
00:00:25,230 --> 00:00:28,090
CPU time, we can do the following. The number

10
00:00:28,090 --> 00:00:30,510
of instructions per program. Let's say this the number of

11
00:00:30,510 --> 00:00:36,520
instructions per program, times the cycles per instruction, times

12
00:00:36,520 --> 00:00:39,140
the number of seconds we spend per cycle. And then

13
00:00:39,140 --> 00:00:41,850
the cycle here, we can cross them out. The

14
00:00:41,850 --> 00:00:43,880
instruction here, we can cross them out. Then we get

15
00:00:43,880 --> 00:00:46,450
how many seconds per program, which is the CPU time.

16
00:00:47,450 --> 00:00:50,510
So why do we want to think of processor time

17
00:00:50,510 --> 00:00:53,230
in terms of instructions per program, cycles per instruction

18
00:00:53,230 --> 00:00:56,570
and clock cycle time, instead of just measuring the overall

19
00:00:56,570 --> 00:01:01,400
time? Well, because these three components allow us to think

20
00:01:01,400 --> 00:01:05,209
about different aspects of the computer architecture and surrounding areas

21
00:01:05,209 --> 00:01:07,850
that we can change. So the number of instructions

22
00:01:07,850 --> 00:01:10,750
per program is generally affected by the algorithm we use,

23
00:01:10,750 --> 00:01:12,630
and by the compiler we use. If we have a

24
00:01:12,630 --> 00:01:15,580
better compiler it might result in a more efficient program

25
00:01:15,580 --> 00:01:18,490
that needs fewer instructions to do the same thing.

26
00:01:18,490 --> 00:01:22,324
And also our instruction set might affect how many instructions

27
00:01:22,324 --> 00:01:24,900
we need to execute in a program. For example, if

28
00:01:24,900 --> 00:01:27,490
we have very, very simple instructions, it might take more

29
00:01:27,490 --> 00:01:29,760
of them to execute the same thing. The number

30
00:01:29,760 --> 00:01:33,310
of cycles per instruction is also affected by the instruction

31
00:01:33,310 --> 00:01:37,530
set. This time the simpler instructions might take fewer cycles

32
00:01:37,530 --> 00:01:40,669
to do, but also our processor design can affect how

33
00:01:40,669 --> 00:01:43,690
many cycles we need per instruction. We will

34
00:01:43,690 --> 00:01:48,300
see several techniques that allow a processor design to

35
00:01:48,300 --> 00:01:51,410
spend fewer cycles per instruction without changing the instruction

36
00:01:51,410 --> 00:01:54,440
set. And finally, clock cycle time is also effected

37
00:01:54,440 --> 00:01:57,393
by processor design. We can design a processor so

38
00:01:57,393 --> 00:02:00,435
that it does very little per clock cycle, thus

39
00:02:00,435 --> 00:02:03,850
spending less time per clock cycle. And also our

40
00:02:03,850 --> 00:02:06,720
clock cycle time can be affected by circuit design.

41
00:02:06,720 --> 00:02:09,470
If we have faster circuits, they will need less time

42
00:02:09,470 --> 00:02:10,940
to do the same thing that needs to be done

43
00:02:10,940 --> 00:02:14,090
in the clock cycle, and also by transistor physics, because

44
00:02:14,090 --> 00:02:18,110
they allow us to build faster circuits. So really, computer

45
00:02:18,110 --> 00:02:22,480
architecture will affect the instruction set. And here we have

46
00:02:22,480 --> 00:02:26,070
a choice of having complex instructions, where we spend fewer

47
00:02:26,070 --> 00:02:28,840
of them per program but takes more cycles to do

48
00:02:28,840 --> 00:02:31,750
each, or we can have simpler instructions, where we have

49
00:02:31,750 --> 00:02:33,550
more of them in a program, but we spend

50
00:02:33,550 --> 00:02:37,631
fewer cycles per instruction. And also computer architecture is

51
00:02:37,631 --> 00:02:42,230
affected by processor design. So in processor design we

52
00:02:42,230 --> 00:02:44,790
have a choice of making a processor that has

53
00:02:44,790 --> 00:02:48,000
very short clock cycle at the expense possibly of

54
00:02:48,000 --> 00:02:51,284
spending more cycles per instruction. Or we can have

55
00:02:51,284 --> 00:02:53,652
a processor that spends a lot of work in

56
00:02:53,652 --> 00:02:56,908
a cycle, thus reducing the number of cycles it needs

57
00:02:56,908 --> 00:03:01,370
per instruction. A good design, in terms of processor design, will balance

58
00:03:01,370 --> 00:03:05,160
the two. A good design in an instruction set will balance the two.
