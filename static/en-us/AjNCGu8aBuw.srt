1
00:00:00,340 --> 00:00:03,620
Now we will argue that
the simplex algorithm is correct,

2
00:00:03,620 --> 00:00:07,400
giving us a basic feasible solution for
bounded linear programs, and

3
00:00:07,400 --> 00:00:10,580
reporting that unbounded
ones are unbounded.

4
00:00:10,580 --> 00:00:12,900
Let's consider the bounded case first.

5
00:00:12,900 --> 00:00:16,370
First we recognize that at each
step we make some progress,

6
00:00:16,370 --> 00:00:18,850
usually improving the objective value.

7
00:00:18,850 --> 00:00:22,410
We have to be careful here in the case
of degenerate basic solutions.

8
00:00:23,510 --> 00:00:27,150
Going back to the algorithm, remember
that we picked a new column to go into

9
00:00:27,150 --> 00:00:33,700
the basis because it had a positive
corresponding value in R D,

10
00:00:33,700 --> 00:00:37,480
and hence increasing it,
increased the objective value.

11
00:00:37,480 --> 00:00:41,390
The trouble is that if the current
basic solution is degenerate,

12
00:00:41,390 --> 00:00:45,330
that is to say that v has a zero entry,

13
00:00:45,330 --> 00:00:48,840
it's possible that we won't get
to move in this direction at all.

14
00:00:49,920 --> 00:00:53,420
The nightmare scenario is that
we end up in some kind of cycle.

15
00:00:53,420 --> 00:00:55,910
There are two ways of
coping with this challenge.

16
00:00:55,910 --> 00:00:58,579
One is to perturb
the constraints slightly.

17
00:00:59,680 --> 00:01:04,569
The other is to give preference to lower
indexed columns for both entering and

18
00:01:04,569 --> 00:01:06,040
leaving the basis.

19
00:01:06,040 --> 00:01:08,170
This is known as blands rule.

20
00:01:08,170 --> 00:01:12,280
In either case we can be assured of
making some progress in each step, but

21
00:01:12,280 --> 00:01:16,040
I'll put an asterisk here because
the notion is a little tricky.

22
00:01:16,040 --> 00:01:18,290
Clearly, we have a finite
number of steps,

23
00:01:18,290 --> 00:01:21,700
because there are only n
choose m possible bases.

24
00:01:21,700 --> 00:01:25,390
And because we make progress,
we don't cycle among them.

25
00:01:25,390 --> 00:01:27,520
Now we just need to make sure
we don't stop too early.

26
00:01:27,520 --> 00:01:31,410
There are two possible ways
the algorithm can terminate,

27
00:01:31,410 --> 00:01:34,450
either because u is nonpositive or
rD is.

28
00:01:34,450 --> 00:01:39,500
Let's consider the termination
because of u first.

29
00:01:39,500 --> 00:01:41,660
This turns out to be pretty trivial.

30
00:01:41,660 --> 00:01:47,410
If u is non-positive,
then we get to keep going

31
00:01:47,410 --> 00:01:52,530
in the direction of dq here,
as much as we want.

32
00:01:52,530 --> 00:01:54,970
Increase of the objective
value the whole way.

33
00:01:54,970 --> 00:01:57,780
So clearly the problem is unbounded.

34
00:01:57,780 --> 00:01:59,460
And of course that can't happen,

35
00:01:59,460 --> 00:02:03,210
because we've assumed that
the linear program is bounded.

36
00:02:03,210 --> 00:02:07,760
Let's consider what happens when we
terminated on the RD condition then.

37
00:02:07,760 --> 00:02:13,030
We'll let x star be and optimal feasible
solution that's not necessarily basic.

38
00:02:13,030 --> 00:02:16,830
And we'll let x be a basic
sub optimal solution.

39
00:02:16,830 --> 00:02:20,960
While using the basis for
this basic sub optimal solution,

40
00:02:20,960 --> 00:02:25,130
I can write xb star in these terms here.

41
00:02:25,130 --> 00:02:28,440
This just comes from
the equality constraint.

42
00:02:28,440 --> 00:02:31,660
And the feasibility of x star.

43
00:02:31,660 --> 00:02:36,030
Substituting this expression
back into the objective function

44
00:02:36,030 --> 00:02:38,610
gives me this result here.

45
00:02:38,610 --> 00:02:44,120
This expression here is the same rD
that we obtained in the simplex method,

46
00:02:44,120 --> 00:02:50,200
and because x is suboptimal, we then
have this strict inequality here.

47
00:02:51,200 --> 00:02:54,330
Because x is basic and B is its basis,

48
00:02:54,330 --> 00:02:59,120
however XD is 0, so
we can simply annihilate this term.

49
00:03:00,150 --> 00:03:04,180
Also, XD star is non negative, so for

50
00:03:04,180 --> 00:03:10,390
the strict inequality to hold, at least
one entry of rD must be positive.

51
00:03:10,390 --> 00:03:14,730
Hence, if there's a better solution,
the simplex algorithm won't terminate.

52
00:03:14,730 --> 00:03:17,790
That wraps up the case where
the program is bounded.

53
00:03:17,790 --> 00:03:19,770
How about when it's unbounded?

54
00:03:19,770 --> 00:03:21,860
Well by the same argument just given,

55
00:03:21,860 --> 00:03:26,080
we won't hit the case
where rD is non-positive.

56
00:03:26,080 --> 00:03:29,720
And the algorithm can't run forever,
because it avoids cycling.

57
00:03:29,720 --> 00:03:34,820
And thus can only visit
each of the bases once.

58
00:03:34,820 --> 00:03:40,930
The only remaining possibility is that
u will be non-positive at some point.

59
00:03:40,930 --> 00:03:45,070
And we'll report that the problem
is unbounded, which, indeed, it is.
