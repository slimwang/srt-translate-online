1
00:00:00,000 --> 00:00:03,136
So if you're used to more flexible
query languages, like SQL,

2
00:00:03,136 --> 00:00:05,413
these limitations may
come as a big surprise.

3
00:00:05,413 --> 00:00:06,914
To understand them a bit more,

4
00:00:06,914 --> 00:00:10,045
let's change up our query here
in the query playground method.

5
00:00:10,045 --> 00:00:14,493
Let's say that instead of querying for
June, let's filter for big conferences.

6
00:00:14,493 --> 00:00:20,439
Let's say conferences whose
maxAttendees is greater than 10.

7
00:00:20,439 --> 00:00:23,187
And save this and
then try this one out on localhost,

8
00:00:23,187 --> 00:00:26,071
just to prove that it's not
an index related problem.

9
00:00:26,071 --> 00:00:29,159
Once this is up and running,
we'll go to the API's explorer.

10
00:00:29,159 --> 00:00:32,642
Filter playground on local host,
execute, and we get an error.

11
00:00:32,642 --> 00:00:35,684
Once again, the error message we
see here is not very informative.

12
00:00:35,684 --> 00:00:38,633
But if you take a look at the logs,
you'll see something else.

13
00:00:38,633 --> 00:00:41,015
Based on the logs,
what's the cause of this error?

14
00:00:41,015 --> 00:00:43,011
Is it that a composite
index doesn't exist?

15
00:00:43,011 --> 00:00:44,682
Is it that the sort order is named but

16
00:00:44,682 --> 00:00:46,752
the inequality filter
is on maxAttendees?

17
00:00:46,752 --> 00:00:49,270
Or is it too many inequality
filters in one query?
