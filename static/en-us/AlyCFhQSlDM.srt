1
00:00:00,590 --> 00:00:02,790
Writing to a file by a client is fairly

2
00:00:02,790 --> 00:00:07,220
straightforward. What the client is doing is actually aggregating

3
00:00:07,220 --> 00:00:10,420
all the writes that is going on into this

4
00:00:10,420 --> 00:00:13,770
Log Segment Data Structure, which is in its memory.

5
00:00:13,770 --> 00:00:17,450
And at some point, it decides that it wants

6
00:00:17,450 --> 00:00:20,440
to flush this Log Segment. And put it on

7
00:00:20,440 --> 00:00:23,250
the disk. And when it decides to do that,

8
00:00:23,250 --> 00:00:25,940
it knows the Stripe Group, this particular Log Segment

9
00:00:25,940 --> 00:00:31,070
it belongs to, and so it is going to take this Log Segment and stripe it on the

10
00:00:31,070 --> 00:00:34,130
Storage Servers that are part of the Stripe

11
00:00:34,130 --> 00:00:37,560
Group. So once it does this write to its

12
00:00:37,560 --> 00:00:41,120
Stripe Group. The client will notify the manager

13
00:00:41,120 --> 00:00:44,420
on the lock segments that are being flushed to

14
00:00:44,420 --> 00:00:47,120
the disc so that the manager has up-to-date information

15
00:00:47,120 --> 00:00:51,450
about the status of the files it manages. So

16
00:00:51,450 --> 00:00:55,040
XFS is a research prototype of a Distributed

17
00:00:55,040 --> 00:00:57,650
File System. There have been other instances of

18
00:00:57,650 --> 00:01:00,240
Distributed File Systems such as. The Android File

19
00:01:00,240 --> 00:01:02,500
System and the Coder File System that were

20
00:01:02,500 --> 00:01:10,450
built at CMU and in fact the Android File System served a community of Users in

21
00:01:10,450 --> 00:01:13,130
the CMU campus in a little lesson we

22
00:01:13,130 --> 00:01:16,440
will return to discussing Distributed File Systems again.

23
00:01:16,440 --> 00:01:18,950
Specifically we'll look at Andrew File System and

24
00:01:18,950 --> 00:01:21,570
discuss the issue of security and privacy for

25
00:01:21,570 --> 00:01:23,940
User Files in a Distributed System. But I

26
00:01:23,940 --> 00:01:26,100
want to leave you with some closing thoughts on the

27
00:01:26,100 --> 00:01:29,080
Exophus File System. First of all, Log based

28
00:01:29,080 --> 00:01:32,880
striping, and particularly sub-setting the Storage Servers over

29
00:01:32,880 --> 00:01:35,890
which you'll stripe the Log. That's a Technical

30
00:01:35,890 --> 00:01:42,580
Innovation. The second Technical Innovation is combining Cooperative Caching

31
00:01:42,580 --> 00:01:45,290
with Dynamic Management of Data and Metadata.

32
00:01:45,290 --> 00:01:49,380
And the last technical nugget is the distributive

33
00:01:49,380 --> 00:01:53,060
Log cleaning, making sure that the responsibility

34
00:01:53,060 --> 00:01:55,180
for cleaning up the Logs on the Disk

35
00:01:55,180 --> 00:01:58,270
is not. Left to one Node, but

36
00:01:58,270 --> 00:02:01,870
it is actually distributed and especially taking advantage

37
00:02:01,870 --> 00:02:04,140
of the fact that the clients, who are

38
00:02:04,140 --> 00:02:07,670
the mutators for the file system, meaning they

39
00:02:07,670 --> 00:02:11,740
are the guys that are writing to the file system, they can keep a count of the

40
00:02:11,740 --> 00:02:14,880
changes that they are making. To the Log Segments

41
00:02:14,880 --> 00:02:18,610
and use that information in the Log Cleaning effectively.
