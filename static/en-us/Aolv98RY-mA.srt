1
00:00:00,000 --> 00:00:04,000
So, we're going to change this to breadth first search, but we're going to do it really easily,

2
00:00:04,000 --> 00:00:09,000
at least for the people version, by grabbing the first element off the open list

3
00:00:09,000 --> 00:00:11,000
instead of the last element off the open list.

4
00:00:11,000 --> 00:00:13,000
Let's take a look at how that changes things.

5
00:00:13,000 --> 00:00:19,000
We start off with d as the first thing added to the list and d on the open list, and now

6
00:00:19,000 --> 00:00:24,000
what we do is, well the first and the last element are the same, so nothing changed yet.

7
00:00:24,000 --> 00:00:28,000
We grab d off, we mark any unmarked neighbors of that node of d,

8
00:00:28,000 --> 00:00:34,000
which in this case are e and c just as before and that's done for this time through.

9
00:00:34,000 --> 00:00:37,000
And now, we go back up to the top and things get a little different.

10
00:00:37,000 --> 00:00:42,000
This time, well, actually not that different, the order was sort of

11
00:00:42,000 --> 00:00:44,000
arbitrary and so first and last are sort of arbitrary.

12
00:00:44,000 --> 00:00:48,000
We're going to grab the first thing off the list just like the instruction say and that's e,

13
00:00:48,000 --> 00:00:54,000
add its neighbors in, they still get added to the end of the list, so that's a little different in terms

14
00:00:54,000 --> 00:01:00,000
of the numbering so far, but now it's where we go back up to the top and we grab the first

15
00:01:00,000 --> 00:01:05,000
element of the list in which this case is c, so we're alternating.

16
00:01:05,000 --> 00:01:08,000
Instead of continuing in one direction, we're actually expanding outward from d,

17
00:01:08,000 --> 00:01:12,000
with the d and then c and e, and then b and f.

18
00:01:12,000 --> 00:01:18,000
And now, what happens next if we expand from f with expanded g, add it to the open list,

19
00:01:18,000 --> 00:01:22,000
but now, before we touch g, we're always pulling off the front of the list now, we get to b.

20
00:01:22,000 --> 00:01:24,000
Right now, we've visited everything.

21
00:01:24,000 --> 00:01:28,000
The next thing we pull off is g, we notice that it has no open neighbors, then we pull off a,

22
00:01:28,000 --> 00:01:35,000
we notice that it has no open neighbors, and the open list is empty, the search is finish.

23
00:01:35,000 --> 00:01:41,000
You can see what happens in this case is we expanded out from d and now a and g,

24
00:01:41,000 --> 00:01:47,000
well the sum of the a and g are 13 instead of 12, which is not a really significant or

25
00:01:47,000 --> 00:01:51,000
meaningful difference at this point but it is indicating that the search is proceeding differently

26
00:01:51,000 --> 00:01:55,000
and the way it's proceeding importantly is out from the center.

27
00:01:55,000 --> 00:01:58,000
All the paths that it found, all the edges that it expanded

28
00:01:58,000 --> 00:02:01,000
in new shortest distances it was away from the beginning state.

29
00:02:01,000 --> 00:02:05,000
So, this is going to give us what we need to actually find shortest paths.
