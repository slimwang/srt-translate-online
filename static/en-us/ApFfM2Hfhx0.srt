1
00:00:00,074 --> 00:00:06,088
All right, welcome to Unit 4. Today we're going to talk about fundamental GPU algorithms, part 2.

2
00:00:06,095 --> 00:00:11,129
We're going to start with scan, which we talked about last week, and look at specific applications of scan.

3
00:00:11,129 --> 00:00:14,578
And then we're going to turn to looking at how to sort on a GPU.

4
00:00:14,578 --> 00:00:17,500
So in the last unit we learned about fundamental GPU algorithms.

5
00:00:17,500 --> 00:00:21,584
And the last one, and the most important one for this lecture, was scan.

6
00:00:21,584 --> 00:00:24,438
Scan is an efficient way to paralyze a certain class of

7
00:00:24,438 --> 00:00:27,220
parallel problems that otherwise seem difficult to paralyze.

8
00:00:27,220 --> 00:00:30,029
We usually refer to these as recurrence relationships.

9
00:00:30,029 --> 00:00:32,830
One of the use cases for scan is for problems that keep

10
00:00:32,830 --> 00:00:35,567
some sort of running total, such as a running sum.

11
00:00:35,567 --> 00:00:40,569
We can also use other binary associative operators like Max, Min and Most Logical operations.

12
00:00:40,569 --> 00:00:45,329
So, as a quiz, let's recall 2 of the important properties of scan.

13
00:00:45,329 --> 00:00:48,514
So we're looking at a scan of n elements.

14
00:00:48,514 --> 00:00:51,889
And so, in the best GPU scan implementations,

15
00:00:51,889 --> 00:00:56,322
what is the amount of work to do the scan, and what is the number of steps to do the scan?

16
00:00:56,322 --> 00:00:59,902
Your choices are proportional to log n, proportional to n,

17
00:00:59,902 --> 00:01:04,168
proportional to n log n, and proportional to n squared.

18
00:01:04,168 --> 00:01:09,437
So we'd like you to check the box that corresponds to what the work complexity of the algorithm is

19
00:01:09,437 --> 00:01:11,661
and what the step complexity of the algorithm is.
