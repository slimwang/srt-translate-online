1
00:00:00,025 --> 00:00:03,319
We just saw that because of Polymorphism, one can write a program that can

2
00:00:03,319 --> 00:00:07,670
handle any mix of quiz questions. Let's try that out and develop another

3
00:00:07,670 --> 00:00:11,496
question type. A numeric question expects an answer from the user that is a

4
00:00:11,496 --> 00:00:16,341
number. For example here we ask what is the area of a circle with radius one.

5
00:00:16,341 --> 00:00:19,330
And the answer is of course pi, but that might be hard to enter, and we can't

6
00:00:19,330 --> 00:00:22,368
really expect the user to type in the exact value of pi, and as you know, this

7
00:00:22,368 --> 00:00:28,135
is not even the exact value, either. It goes on forever. We just want the user

8
00:00:28,135 --> 00:00:33,575
to be able to enter, say, 3.14 or 3.14159, depending on how well they remember

9
00:00:33,575 --> 00:00:39,506
those digits. Either one of those answers should be fine. In fact, we'll take

10
00:00:39,506 --> 00:00:43,166
any answer, that's up to point oh one away, from the answer, that the user

11
00:00:43,166 --> 00:00:48,010
provides. In a different numeric question we might use a different tolerance.

12
00:00:48,010 --> 00:00:51,780
Your task is to implement this new question type. We've give you the

13
00:00:51,780 --> 00:00:56,291
constructor, your job is to provide the set answer method. And the check answer

14
00:00:56,291 --> 00:00:59,968
method. And the check answer method, you need to take the tolerance into

15
00:00:59,968 --> 00:01:03,440
account, you need to check whether the given number is not too far away from

16
00:01:03,440 --> 00:01:08,342
the response. So, technically the response is a a string, you need to convert

17
00:01:08,342 --> 00:01:12,740
it to a number. And we show you here how to do that. You may need additional

18
00:01:12,740 --> 00:01:16,051
instance variables. And then you should put them here. Go ahead, give this a

19
00:01:16,051 --> 00:01:16,540
try.
