1
00:00:00,000 --> 00:00:04,000
So now we have the phenomenal cosmic power to define functions.

2
00:00:04,000 --> 00:00:07,000
Once we have them, we can call them with actual arguments,

3
00:00:07,000 --> 00:00:11,000
and then inside the function body we can return with the return value.

4
00:00:11,000 --> 00:00:16,000
Function bodies are statements which can contain expressions.

5
00:00:16,000 --> 00:00:19,000
So we'll be evaluating or interpreting quite a bit.

6
00:00:19,000 --> 00:00:21,000
And this is a lot of power.

7
00:00:21,000 --> 00:00:25,000
In fact, it's going to turn out that this is really all you need, pretty much,

8
00:00:25,000 --> 00:00:29,000
to be just as powerful as any other programming language.

9
00:00:29,000 --> 00:00:33,000
Recursive functions pack a wallop. There's a lot going on.

10
00:00:33,000 --> 00:00:37,000
And that means that this is actually a double-edged sword.

11
00:00:37,000 --> 00:00:42,000
With great power comes ... let's say lots of care that we have to take.

12
00:00:42,000 --> 00:00:47,000
We've been writing together in Python a program that simulates,

13
00:00:47,000 --> 00:00:50,000
interprets, evaluates JavaScript,

14
00:00:50,000 --> 00:00:53,000
and this means that anything that JavaScript could do

15
00:00:53,000 --> 00:00:55,000
we could also do in Python,

16
00:00:55,000 --> 00:00:59,000
because if for some reason we didn't really know how to write it in Python,

17
00:00:59,000 --> 00:01:05,000
we would just leave it in JavaScript and run our written in Python JavaScript interpreter.

18
00:01:05,000 --> 00:01:10,000
It's a bit like that MC Escher drawing where 1 hand is drawing another hand

19
00:01:10,000 --> 00:01:13,000
that's actually drawing the first in a bit of a recursive loop.

20
00:01:13,000 --> 00:01:17,000
We can use language A to simulate or interpret language B.

21
00:01:17,000 --> 00:01:20,000
So on the 1 hand, if you'll permit me,

22
00:01:20,000 --> 00:01:23,000
I can write a Python program that simulates any JavaScript program.

23
00:01:23,000 --> 00:01:28,000
That means that Python is at least as powerful as JavaScript.

24
00:01:28,000 --> 00:01:30,000
We'll abbreviate JavaScript with JS.

25
00:01:30,000 --> 00:01:34,000
It also turns out--not shown here, but it's actually very similar--

26
00:01:34,000 --> 00:01:38,000
that I could write in JavaScript an interpreter for Python.

27
00:01:38,000 --> 00:01:41,000
So JavaScript is at least as powerful as Python.

28
00:01:41,000 --> 00:01:46,000
Both of these claims ignore speed because our interpreter or our web browser

29
00:01:46,000 --> 00:01:51,000
might be a little slower than just running the appropriate code natively,

30
00:01:51,000 --> 00:01:56,000
just as translating natural language text from Spanish into Mandarin Chinese

31
00:01:56,000 --> 00:01:58,000
takes some amount of time.

32
00:01:58,000 --> 00:02:02,000
But there's a strong sense in which these languages are equally expressive.

33
00:02:02,000 --> 00:02:07,000
Any computation I could carry out in Python I could also carry out in JavaScript.

34
00:02:07,000 --> 00:02:11,000
Any computation I could carry out in JavaScript I could also carry out in Python.

35
00:02:11,000 --> 00:02:15,000
I can be just as creative in either language.

36
00:02:15,000 --> 00:02:17,000
Now, one language may look prettier than another,

37
00:02:17,000 --> 00:02:21,000
one language may take a little less time to say a certain thought,

38
00:02:21,000 --> 00:02:27,000
to have a creative idea, but ultimately, I can express the same range of work,

39
00:02:27,000 --> 00:02:30,000
emotions, desires in Python and in JavaScript.

40
00:02:30,000 --> 99:59:59,999
This is pretty powerful stuff.
