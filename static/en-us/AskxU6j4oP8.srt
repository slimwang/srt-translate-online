1
00:00:00,000 --> 00:00:02,170
Let's take a look at the code.

2
00:00:02,170 --> 00:00:06,450
Now the first thing we do is we set a variable called rules affable to be true.

3
00:00:06,450 --> 00:00:10,820
And this is so that we know when we can continue applying to the given rules

4
00:00:10,820 --> 00:00:13,870
and that way we know when we can simply be done with the function.

5
00:00:13,870 --> 00:00:17,410
We also get a temporary assignment to all of the variables of none

6
00:00:17,410 --> 00:00:21,610
since we haven't assigned that neither true or false values yet.

7
00:00:21,610 --> 00:00:24,490
Now in this loop, well, we can still apply rules.

8
00:00:24,490 --> 00:00:30,380
We first set rules affable to false and let's say that unless we come into a situation

9
00:00:30,380 --> 00:00:33,340
where we might be able to apply the rules again,

10
00:00:33,340 --> 00:00:37,240
we just assume that this is the last time we'll be able to do this.

11
00:00:37,240 --> 00:00:40,730
We first deal with single occurrence variables,

12
00:00:40,730 --> 00:00:46,190
so we set a counter to be zero for each of the variables here

13
00:00:46,190 --> 00:00:51,550
and we'll also set the variable setting to none for each of the variables.

14
00:00:51,550 --> 00:00:56,000
And then, for each of the clauses and each variable in each clause,

15
00:00:56,000 --> 00:01:03,300
we set the absolute value of the variable and then we increment variable counter of that variable

16
00:01:03,300 --> 00:01:09,160
by 1 since we've seen that variable now and we set this variable to 1

17
00:01:09,160 --> 00:01:13,110
if it does greater than 0 or 0, otherwise.

18
00:01:13,110 --> 00:01:18,280
Or we set it to 1 is 0 to represent true or false if it is positive or negative.

19
00:01:18,280 --> 00:01:22,480
Now, we enumerate all of the variable counters with i and var,

20
00:01:22,480 --> 00:01:26,340
and if var is not equal to 1 then we go ahead and just continue.

21
00:01:26,340 --> 00:01:31,120
And if our temporary assignment is not none, that is it's already going to assign to something,

22
00:01:31,120 --> 00:01:34,200
we also continue, otherwise, we fall through

23
00:01:34,200 --> 00:01:38,950
and we set the contemporary assignment to the current setting available.

24
00:01:38,950 --> 00:01:42,250
In here, we try to deal with single variable clauses.

25
00:01:42,250 --> 00:01:48,390
Now, for each clause in the list of clauses, we first check that the length of the clause is not zero.

26
00:01:48,390 --> 00:01:53,240
If the length of the clause is greater than 1, we go ahead and just continue to do it.

27
00:01:53,240 --> 00:01:57,280
We don't need to check any further; otherwise, we set the variable

28
00:01:57,280 --> 00:02:01,610
equal to the only element in the list in the clause

29
00:02:01,610 --> 00:02:05,320
and we set a var to the absolute value of that variable.

30
00:02:05,320 --> 00:02:08,380
Now if the temporary assignment of avar is not none,

31
00:02:08,380 --> 00:02:13,390
if it's already assigned something, then if the temporary assignment of avar is not equal to 1,

32
00:02:13,390 --> 00:02:18,550
if the variable is greater than 0 else 0, then we return 1, -1

33
00:02:18,550 --> 00:02:22,930
and this is because that means that the variable cannot be satisfied.

34
00:02:22,930 --> 00:02:27,600
This clause and that cannot be satisfied, and if not, then we go ahead and fall through

35
00:02:27,600 --> 00:02:31,990
and we set the temporary assignment of this variable to 1

36
00:02:31,990 --> 00:02:34,430
if the variable is greater than 0 and else 0.

37
00:02:34,430 --> 00:02:38,040
Now, we need to go ahead and clean up all of these clauses.

38
00:02:38,040 --> 00:02:44,290
In order to do this, we are going to accumulate all of the current clauses into a new list of clauses,

39
00:02:44,290 --> 00:02:48,570
so that we can remove the ones that we don't need to worry about anymore.

40
00:02:48,570 --> 00:02:54,450
And we enumerate all the current clauses and we also enumerate all the variables in each clause

41
00:02:54,450 --> 00:02:59,520
and we set the assignment equal to the temporary assignment for each of these variables.

42
00:02:59,520 --> 00:03:04,660
If the assignment is none, then we go ahead and append that variable to the new clause

43
00:03:04,660 --> 00:03:07,510
because it's still haven't determined what it should be, otherwise,

44
00:03:07,510 --> 00:03:11,710
we said that, well, we might be able to continue applying rules here

45
00:03:11,710 --> 00:03:14,190
because we're about to remove some clauses.

46
00:03:14,190 --> 00:03:21,360
Now, if the current variable is assigned true, 1 and the variable is greater than 0

47
00:03:21,360 --> 00:03:26,080
or the assignment is false, 0 and the variable is less than 0,

48
00:03:26,080 --> 00:03:30,160
that is it's negated then we can go ahead and remove the entire clause.

49
00:03:30,160 --> 00:03:33,740
So we set this new clause equal to none and we continue on.

50
00:03:33,740 --> 00:03:38,790
Otherwise, well, then we just have to remove the variable and we pass through.

51
00:03:38,790 --> 00:03:44,290
Now, if clause could not be satisfied then if the new clause is the empty set

52
00:03:44,290 --> 00:03:48,780
then we go ahead and return 1, -1 to indicate they cannot be satisfied.

53
00:03:48,780 --> 00:03:51,950
Now if the clause instead is greater than 0 then we go ahead

54
00:03:51,950 --> 00:03:56,870
and append this clause to the new list of clauses and at the end of this double for loop,

55
00:03:56,870 --> 00:04:03,520
we set the current list of clauses to the new list of clauses and if we have set rules applicable to true,

56
00:04:03,520 --> 00:04:07,530
then we go ahead and loop that through until that is not true.

57
00:04:07,530 --> 99:59:59,999
At the end of all this, we go ahead and return the list of clauses and that's it.
