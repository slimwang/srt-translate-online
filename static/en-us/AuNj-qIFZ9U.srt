1
00:00:00,090 --> 00:00:02,450
Let's have the solution for our PSHARE versus

2
00:00:02,450 --> 00:00:06,210
GSHARE quiz. The question is, for all of

3
00:00:06,210 --> 00:00:10,670
the branches in this code, how much history do we need to make them all very

4
00:00:10,670 --> 00:00:15,386
well predicted? We have 1, 2, 3 branches. This

5
00:00:15,386 --> 00:00:20,910
branch here is easily predictable even without any history. So for this one,

6
00:00:20,910 --> 00:00:25,702
any history will work. The exit branch. We do 1,000

7
00:00:25,702 --> 00:00:29,310
iteration, each time it's not taken except the

8
00:00:29,310 --> 00:00:33,760
last time. So for this branch again we

9
00:00:33,760 --> 00:00:36,216
don't need much history. Even with no history

10
00:00:36,216 --> 00:00:38,246
using just a 2 bit counter we will predict

11
00:00:38,246 --> 00:00:40,914
this branch accurately 1000 times followed by one

12
00:00:40,914 --> 00:00:43,829
misprediction so it's a very good prediction rate still.

13
00:00:44,850 --> 00:00:48,276
This branch however, requires some history. This is

14
00:00:48,276 --> 00:00:50,916
the even-odd branch, so we really need to know

15
00:00:50,916 --> 00:00:53,622
whether the previous outcome was even or odd, so

16
00:00:53,622 --> 00:00:56,646
that we can do the opposite. For PShare, the

17
00:00:56,646 --> 00:00:59,544
even-odd handling can be done with just a history

18
00:00:59,544 --> 00:01:01,821
length of 1 and the history length of 1

19
00:01:01,821 --> 00:01:07,495
will work well for these two as well. So we just need a history length of 1. For

20
00:01:07,495 --> 00:01:11,295
GShare, when we are doing this branch, we want

21
00:01:11,295 --> 00:01:15,960
its previous outcome to be part of the global history.

22
00:01:15,960 --> 00:01:21,112
If we look at what the global history looks like, this branch is not

23
00:01:21,112 --> 00:01:26,090
taken, so the global history will be 0. This branch in the very

24
00:01:26,090 --> 00:01:31,040
first iteration, because i.e is 1000, that's divisible

25
00:01:31,040 --> 00:01:36,060
by 2, is taken because the number is even. This branch is is

26
00:01:36,060 --> 00:01:41,105
then taken. Then we have this branch 0. Now it's going to be

27
00:01:41,105 --> 00:01:45,044
not taken here, followed by a taken here, and

28
00:01:45,044 --> 00:01:49,362
this pattern will repeat. So really, we need this to

29
00:01:49,362 --> 00:01:53,130
be part of the history when we're predicting this. We

30
00:01:53,130 --> 00:01:55,100
need this to be part of the history when we're

31
00:01:55,100 --> 00:01:57,701
predicting this and so on. In order to do

32
00:01:57,701 --> 00:02:00,263
that, we need the history to contain at least this

33
00:02:00,263 --> 00:02:03,598
much which is 3 bits. And similarly here we need

34
00:02:03,598 --> 00:02:06,630
this to be our history, so it catches this bit.

35
00:02:06,630 --> 00:02:09,685
Know that really, there are only 2 possible histories

36
00:02:09,685 --> 00:02:12,106
for this branch. One is the 1, 1, 0 and

37
00:02:12,106 --> 00:02:14,416
the other is 0, 1, 0 because the other

38
00:02:14,416 --> 00:02:17,650
two branches are just having the same outcome every time,

39
00:02:17,650 --> 00:02:20,490
so we need a 3-bit history. As you can

40
00:02:20,490 --> 00:02:25,480
see, GShare can do a similar job to PShare except

41
00:02:25,480 --> 00:02:28,480
that it needs a longer history. Even for branches that

42
00:02:28,480 --> 00:02:31,790
are actually kind of self determining. Note that GShare can

43
00:02:31,790 --> 00:02:34,830
also do those correlative branches that PShare cannot do.
