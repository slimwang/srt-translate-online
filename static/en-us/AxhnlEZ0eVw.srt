1
00:00:00,380 --> 00:00:04,440
Let us now consider a third method for
adapting cases.

2
00:00:04,440 --> 00:00:08,010
This method uses heuristics
expressed in the form of rules.

3
00:00:09,080 --> 00:00:10,930
A heuristic is a rule of thumb.

4
00:00:10,930 --> 00:00:12,520
Let's take an example.

5
00:00:12,520 --> 00:00:14,500
Imagine that you went to a new city, and

6
00:00:14,500 --> 00:00:16,430
you wanted to find out
where the downtown was.

7
00:00:16,430 --> 00:00:18,130
How could you do that?

8
00:00:19,430 --> 00:00:22,490
A simple heuristic is that
you just look around and

9
00:00:22,490 --> 00:00:24,590
you find where
the tallest buildings are.

10
00:00:24,590 --> 00:00:28,790
At least in North America, the tallest
buildings tend to be in the center,

11
00:00:28,790 --> 00:00:30,800
in the downtown of the city.

12
00:00:30,800 --> 00:00:33,010
And this heuristic doesn't
work all the time.

13
00:00:33,010 --> 00:00:35,090
Outside North America,
this heuristic sometimes fails.

14
00:00:35,090 --> 00:00:36,750
And that's the point.

15
00:00:36,750 --> 00:00:40,050
A heuristic is a rule of thumb
that works often, but not always.

16
00:00:41,080 --> 00:00:43,140
To see how the heuristic
method works for

17
00:00:43,140 --> 00:00:45,270
adapting cases, consider our problem.

18
00:00:46,490 --> 00:00:49,160
Imagine that we're at a restaurant and
we need to go back home.

19
00:00:50,250 --> 00:00:54,100
Recall that we just found a solution for
going from the home to the restaurant.

20
00:00:54,100 --> 00:00:56,590
Having found that solution,
having evaluated it and

21
00:00:56,590 --> 00:01:00,180
executed it,
we stored it as a case in memory.

22
00:01:00,180 --> 00:01:03,150
So now when we have to go back
from the restaurant to the home,

23
00:01:03,150 --> 00:01:07,550
we can retrieve that previous case of
going from home to the restaurant.

24
00:01:07,550 --> 00:01:08,930
Given a new problem and

25
00:01:08,930 --> 00:01:11,930
a case, how do we adapt the case
to achieve the new problem?

26
00:01:13,110 --> 00:01:16,440
In this case, we may have a heuristic
which says that to go back

27
00:01:16,440 --> 00:01:21,210
from where you came originally, you
simple have to flip back all the terms.

28
00:01:21,210 --> 00:01:24,080
This might give us a solution
that is shown here.

29
00:01:24,080 --> 00:01:26,010
Note that this heuristic
may not always work.

30
00:01:26,010 --> 00:01:27,380
It's a rule of thumb.

31
00:01:27,380 --> 00:01:29,200
It works often, but of course,

32
00:01:29,200 --> 00:01:32,380
we know that we cannot reverse
all the turns all the time.

33
00:01:32,380 --> 00:01:35,960
>> So to return to our programming
example, we were doing file input, and

34
00:01:35,960 --> 00:01:40,310
file input is often a very
resource intensive process.

35
00:01:40,310 --> 00:01:42,030
So let's say I'm designing
a new program and for

36
00:01:42,030 --> 00:01:46,110
this new program,
efficiency is a much bigger concern.

37
00:01:46,110 --> 00:01:50,800
I might have a rule that says when doing
file input, it's more efficient to read

38
00:01:50,800 --> 00:01:55,170
entire arrays of data at a time instead
of just reading one byte at a time.

39
00:01:55,170 --> 00:01:58,390
The previous case that I'm adapting
might have had file input as 1 byte

40
00:01:58,390 --> 00:01:59,340
at a time.

41
00:01:59,340 --> 00:02:02,460
But I'm going to use that rule to
adapt the case to read arrays of

42
00:02:02,460 --> 00:02:03,540
data at a time.

43
00:02:03,540 --> 00:02:04,329
So, in that way,

44
00:02:04,329 --> 00:02:08,330
that rule has helped me design a file
input method that's more efficient.

45
00:02:08,330 --> 00:02:10,960
>> David,
to generalize on your answer to design.

46
00:02:10,960 --> 00:02:14,500
>> Designers often use heuristics
of the kind that you mentioned.

47
00:02:14,500 --> 00:02:17,890
For example,
if you want to make an artifact lighter,

48
00:02:17,890 --> 00:02:19,390
try a different material.

49
00:02:19,390 --> 00:02:21,680
It's a heuristic expressed as a rule.
