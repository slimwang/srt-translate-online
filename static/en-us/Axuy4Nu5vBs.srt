1
00:00:00,310 --> 00:00:03,050
We're not storing a key piece
of data in our weather table,

2
00:00:03,050 --> 00:00:05,850
the location at which
the weather is going to occur.

3
00:00:05,850 --> 00:00:10,140
This is because we are going to use
a separate table for weather locations.

4
00:00:10,140 --> 00:00:13,070
Using a separate table
has several advantages.

5
00:00:13,070 --> 00:00:16,875
In addition to being more efficient
because we do not duplicate our location

6
00:00:16,875 --> 00:00:20,503
data with each record, it also allows
us to update information about our

7
00:00:20,503 --> 00:00:23,906
location without having to update
every weather forecast record.

8
00:00:23,906 --> 00:00:27,975
To implement this, we're going to create
a relation between our weather and

9
00:00:27,975 --> 00:00:31,856
location tables by adding a column to
the weather table that refers to an ID

10
00:00:31,856 --> 00:00:33,750
in the location table.

11
00:00:33,750 --> 00:00:37,820
This column is created with a constraint
that identifies it as a foreign key,

12
00:00:37,820 --> 00:00:40,290
which is a unique ID from another table.

13
00:00:40,290 --> 00:00:42,120
What does this look like?

14
00:00:42,120 --> 00:00:45,400
Our list of columns in the weather
table has a location ID,

15
00:00:45,400 --> 00:00:48,410
which points to IDs in
the location table.

16
00:00:48,410 --> 00:00:53,315
We can use this location ID to perform
an operation known as an inner join.

17
00:00:53,315 --> 00:00:57,190
Inner joins combine the data queried
from two rows in different tables into

18
00:00:57,190 --> 00:00:58,720
one row in the results.

19
00:00:58,720 --> 00:01:02,070
When we create our tables in this
way we can get any combination of

20
00:01:02,070 --> 00:01:03,150
columns from both tables.

21
00:01:04,150 --> 00:01:08,090
In this case we're getting the location
query from the location table, and

22
00:01:08,090 --> 00:01:11,700
the date, description, and min and
max temperature from the weather table
