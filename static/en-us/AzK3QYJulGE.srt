1
00:00:00,150 --> 00:00:03,080
So here's how we relate the K-step
estimators that we just

2
00:00:03,080 --> 00:00:04,580
talked about with TD lambda.

3
00:00:04,580 --> 00:00:09,500
So the idea is this, we're actually
going to be using a weighted combination

4
00:00:09,500 --> 00:00:13,780
of all of the estimators for
any one of these TD lambda algorithms.

5
00:00:14,880 --> 00:00:16,710
And the weights are going
to look like this,

6
00:00:16,710 --> 00:00:20,600
one minus lambda for
the one step estimator.

7
00:00:20,600 --> 00:00:24,030
Lambda times one minus lambda for
the two step estimator.

8
00:00:24,030 --> 00:00:27,440
Lambda squared times one minus
lambda for the three step estimator.

9
00:00:27,440 --> 00:00:30,900
Lambda to the K minus one times one
minus lambda for the K step estimator

10
00:00:30,900 --> 00:00:34,340
and then all the way down to
the essentially lambda the infinity, but

11
00:00:34,340 --> 00:00:36,840
of course that wouldn't,
literally doesn't get any weight.

12
00:00:36,840 --> 00:00:40,370
>> Wait, what's
>> Except, well, let's leave it at that

13
00:00:40,370 --> 00:00:43,830
for now and then we'll explain why
that's an okay thing to say in a second.

14
00:00:43,830 --> 00:00:44,580
>> Okay.

15
00:00:44,580 --> 00:00:47,510
So, so far everything you said makes
sense except you haven't told me what

16
00:00:47,510 --> 00:00:48,430
you're weighting exactly.

17
00:00:49,460 --> 00:00:52,810
>> Oh, so what we're going to
do is when we move the value,

18
00:00:52,810 --> 00:00:58,080
when we change the value of a state,
we're going to

19
00:00:58,080 --> 00:01:00,760
change it by all
the different estimators.

20
00:01:00,760 --> 00:01:03,360
All the different estimators
are going to give us their own

21
00:01:03,360 --> 00:01:06,450
preferences to what we should
be moving the value toward.

22
00:01:06,450 --> 00:01:08,750
And we're just going to
take a convex combination,

23
00:01:08,750 --> 00:01:10,760
a weighted combination of all of them.

24
00:01:10,760 --> 00:01:13,360
Each time that we do an update for
the value of a state.

25
00:01:13,360 --> 00:01:14,650
>> Oh, I see.

26
00:01:14,650 --> 00:01:18,080
>> Now we don't literally get to lift
all these and update based on them.

27
00:01:18,080 --> 00:01:20,500
But equivalently this
is what we're doing.

28
00:01:20,500 --> 00:01:24,280
So there's a couple things
that we should probably check.

29
00:01:24,280 --> 00:01:26,695
One is we should probably make sure
that these weights sum up to one.

30
00:01:26,695 --> 00:01:29,080
>> Mm-hm.

31
00:01:29,080 --> 00:01:31,230
>> So, how do we do that?

32
00:01:31,230 --> 00:01:33,700
Let's see.
>> You write a summation?

33
00:01:33,700 --> 00:01:34,800
Good idea.

34
00:01:34,800 --> 00:01:38,589
So the summation is the all
the different estimators from one

35
00:01:38,589 --> 00:01:41,931
to infinity of the weight
applied to that estimator,

36
00:01:41,931 --> 00:01:45,436
which this formula works for
all different values of K.

37
00:01:45,436 --> 00:01:50,630
For K equals one it's lambda to the zero
which is one times one minus lambda.

38
00:01:50,630 --> 00:01:53,920
So we can now factor out
the one minus lambda.

39
00:01:53,920 --> 00:01:57,590
As long as lambda's less than one,
we can use this as a geometric series.

40
00:01:57,590 --> 00:02:01,220
And we get one over one minus lambda,
and that's going to cancel with this one

41
00:02:01,220 --> 00:02:03,420
minus lambda and so
the weights sum up to one.

42
00:02:03,420 --> 00:02:06,910
If lambda equals 1 though,
what happens then?

43
00:02:06,910 --> 00:02:09,060
These are all zeros and

44
00:02:09,060 --> 00:02:11,790
this infinity one is one to
the infinity which is just one.

45
00:02:11,790 --> 00:02:17,210
So when lambda is one we put all of
our wait on this last estimator.

46
00:02:17,210 --> 00:02:19,140
And what happens if lambda is zero?

47
00:02:19,140 --> 00:02:20,909
Sp if lambda is zero in this case,

48
00:02:20,909 --> 00:02:24,514
we get a weight of one on the first
estimator and zero on all the rest,

49
00:02:24,514 --> 00:02:27,240
which I'll write this way,
>> Mm-hm.

50
00:02:27,240 --> 00:02:31,860
>> And when lambda is one we get zero
for all these except for the last one.

51
00:02:33,920 --> 00:02:37,490
Which let's say at least
in the limit would be one.

52
00:02:37,490 --> 00:02:41,380
So this is actually as we said
this is giving us TD(0) and

53
00:02:41,380 --> 00:02:44,973
this is giving us TD(1).

54
00:02:44,973 --> 00:02:48,320
So if we just use lambda
in place of one and zero,

55
00:02:48,320 --> 00:02:51,440
which works, then we get td lambda.

56
00:02:51,440 --> 00:02:55,507
But the important thing is for in
between values of lambda, like a half,

57
00:02:55,507 --> 00:02:57,740
or .3 or something like that.

58
00:02:57,740 --> 00:03:00,130
We actually get weights on
all of these to some degree.

59
00:03:01,570 --> 00:03:05,000
And it's combining all those
different estimators together.

60
00:03:05,000 --> 00:03:06,290
>> And that seems okay.

61
00:03:06,290 --> 00:03:10,590
Any good characterization of
what that weight looks like.

62
00:03:10,590 --> 00:03:14,973
So if lambda were equal to one-half, is
that exactly halfway between TD(0) and

63
00:03:14,973 --> 00:03:15,630
TD(1)?

64
00:03:15,630 --> 00:03:17,700
>> Well, when lambda's a half,
what do our weights look like?

65
00:03:17,700 --> 00:03:19,335
We get a weight of a half on this one.

66
00:03:19,335 --> 00:03:20,340
>> Mm-hm.

67
00:03:20,340 --> 00:03:24,255
>> We get a weight of a half times
a half, or a quarter, on this one.

68
00:03:24,255 --> 00:03:25,240
>> Mm-hm.

69
00:03:25,240 --> 00:03:28,260
>> We get a weight of a half
times a half times a half, or

70
00:03:28,260 --> 00:03:29,570
an eighth, on this one.

71
00:03:29,570 --> 00:03:37,530
So we get this sequence of decreasing
weight, exponentially decreasing weight.

72
00:03:37,530 --> 00:03:39,520
Is that halfway between
these two things?

73
00:03:39,520 --> 00:03:41,380
I don't know.

74
00:03:41,380 --> 00:03:43,160
I suppose you could define it to be.

75
00:03:43,160 --> 00:03:44,540
But it is just what it is.

76
00:03:44,540 --> 00:03:48,860
It's a combination of a whole
bunch of estimators together.

77
00:03:48,860 --> 00:03:51,400
>> Right.
That eventually gets to zero.

78
00:03:51,400 --> 00:03:56,090
>> Sure, but again, we're combining
the outputs of all these estimators.

79
00:03:56,090 --> 00:04:00,000
We're using whatever update they're
suggesting and moving a little bit

80
00:04:00,000 --> 00:04:02,550
in the direction of the first one and
a little less in the direction of

81
00:04:02,550 --> 00:04:06,850
the second one, a little bit less in the
direction of the third one and so on.

82
00:04:06,850 --> 00:04:09,310
So, yeah,
in the limit we're not actually doing

83
00:04:09,310 --> 00:04:12,940
the e infinity estimator at all, but
that's okay because we're doing all

84
00:04:12,940 --> 00:04:15,630
these estimators that
kind of lead up to it.

85
00:04:15,630 --> 00:04:18,680
So I don't know, does that help
you understand TD(lambda) better?

86
00:04:18,680 --> 00:04:23,010
This is the way I think about it, is
to say well, it's a little bit hard to

87
00:04:23,010 --> 00:04:26,130
interpret but what we're really doing is
doing a weighted combination of a bunch

88
00:04:26,130 --> 00:04:31,640
of step estimators instead of this
sort of strange, continuous parameter.

89
00:04:31,640 --> 00:04:32,660
>> Well, I guess so.

90
00:04:32,660 --> 00:04:36,090
I mean, when I think about it the way
you put it I guess what you're saying

91
00:04:36,090 --> 00:04:39,800
is, look, you could do one step look
ahead or you can do two step look ahead.

92
00:04:39,800 --> 00:04:44,010
Or you can go all the way into the end
of your episode which may last forever

93
00:04:44,010 --> 00:04:45,200
and you can pick any of those.

94
00:04:45,200 --> 00:04:49,010
Or you can say each one of those
gives me some information and

95
00:04:49,010 --> 00:04:51,460
I should just figure out
some way to combine them.

96
00:04:51,460 --> 00:04:54,650
And I can pick various ways for
combining them and I know particularly

97
00:04:54,650 --> 00:04:58,880
know how to turn the way I combine
them into simple English sentence.

98
00:04:58,880 --> 00:05:02,970
But I am finding ways to combine various
ones of them and I should pick some

99
00:05:02,970 --> 00:05:05,700
values of lambda that seems to work for
the problem that I care about.

100
00:05:05,700 --> 00:05:06,370
>> Yeah.

101
00:05:06,370 --> 00:05:07,720
>> So here we go.
>> All right, so

102
00:05:07,720 --> 00:05:12,420
now given that we don't actually have a
crisp characterization of what something

103
00:05:12,420 --> 00:05:17,680
like lambda equals one or sorry, lambda
equals a half, really gives us in words.

104
00:05:17,680 --> 00:05:19,880
Why do we care about these
intermediate values?

105
00:05:19,880 --> 00:05:21,680
So I'm going to make a transition and

106
00:05:21,680 --> 00:05:25,370
talk about next what happens
empirically when you use TD lambda.

107
00:05:25,370 --> 00:05:25,870
>> Okay.
