1
00:00:00,230 --> 00:00:03,880
So earlier, when I said
the CursorAdapter contains instructions

2
00:00:03,880 --> 00:00:08,500
on how to make a list item view,
well, what exactly does that entail?

3
00:00:08,500 --> 00:00:11,320
Well, let's dive in and
explore this area in more detail.

4
00:00:11,320 --> 00:00:13,830
So let's assume that the list
view just requested for

5
00:00:13,830 --> 00:00:15,225
the list item at position 0.

6
00:00:16,290 --> 00:00:20,480
So now the CursorAdapter needs to
first create a blank list item.

7
00:00:20,480 --> 00:00:23,680
And this involves inflating
one from the XML layout.

8
00:00:23,680 --> 00:00:26,689
The layout that we want contains
a vertical linear layout

9
00:00:26,690 --> 00:00:30,200
with two text views,
one that looks like this.

10
00:00:30,200 --> 00:00:32,500
Then we'll need to populate
these two text views

11
00:00:32,500 --> 00:00:34,230
with the correct data from the Cursor.

12
00:00:35,870 --> 00:00:38,849
So, since we're interested
in the pet at position 0,

13
00:00:38,850 --> 00:00:40,875
we'll move the Cursor to row 0.

14
00:00:41,980 --> 00:00:45,970
And then we extract out the name column,
which turns out to be Tommy, and

15
00:00:45,970 --> 00:00:47,720
set that to the first text view.

16
00:00:47,720 --> 00:00:50,629
Afterwards, we'll extract
the breed column, and

17
00:00:50,630 --> 00:00:53,470
get the breed to be Pomeranian, and
set that to our second text view.

18
00:00:54,800 --> 00:00:56,169
Now on the list view request for

19
00:00:56,170 --> 00:01:00,580
the list item at position 1, we'll also
need to create another blank list item.

20
00:01:01,630 --> 00:01:04,325
Then we'll also move
the Cursor to position 1.

21
00:01:04,325 --> 00:01:08,464
And then again bind the data
from this Cursor onto the views.

22
00:01:08,464 --> 00:01:14,830
So, say we have a name of Garfield and
a breed of Tabby.

23
00:01:14,830 --> 00:01:18,443
So, in code these two steps can
be separated into two methods.

24
00:01:18,443 --> 00:01:22,472
First, the newView() method, and
then, the bindView() method.

25
00:01:22,472 --> 00:01:25,883
So, the CursorAdapter class is actually
is actually an abstract class,

26
00:01:25,883 --> 00:01:28,259
which means that not all
the methods are complete.

27
00:01:28,260 --> 00:01:32,190
And that also means that we need
to create our own custom class.

28
00:01:32,190 --> 00:01:35,250
So, for example,
we can call it PetCursorAdapter, and

29
00:01:35,250 --> 00:01:37,230
extend that from
the CursorAdapter class.

30
00:01:37,230 --> 00:01:39,802
Then we'll need to write code
that implements a logic for

31
00:01:39,802 --> 00:01:41,849
the newView() and bindView() methods.

32
00:01:43,500 --> 00:01:46,899
So sometimes, the newView()
method might not even be called.

33
00:01:46,900 --> 00:01:51,730
And in those cases, the bindView()
method is called using an old view for

34
00:01:51,730 --> 00:01:52,650
a previous pet.

35
00:01:52,650 --> 00:01:56,770
For example, the user made have scrolled
the Tommy list item view off the screen,

36
00:01:56,770 --> 00:02:00,850
and that means we can recycle that
list item view, and use it for

37
00:02:00,850 --> 00:02:04,929
another pet in this list that is
about to be scrolled onto the screen.

38
00:02:04,930 --> 00:02:07,770
So, we set different values
onto these text views, and

39
00:02:07,770 --> 00:02:10,380
then, show this view on screen again.

40
00:02:11,330 --> 00:02:13,729
And so, that's why it's useful
to have a newView() and

41
00:02:13,729 --> 00:02:16,510
bindView() method be
two separate methods.

42
00:02:17,700 --> 00:02:18,285
So, in our case,

43
00:02:18,285 --> 00:02:21,668
we're going to be creating a class
called the PetCursorAdapter class,

44
00:02:21,668 --> 00:02:26,140
which I kind of mentioned before, will
extend from the CursorAdapter class.

45
00:02:26,140 --> 00:02:29,250
Notice that it contains a constructor,
which has caused the super class

46
00:02:29,250 --> 00:02:31,356
constructor in order
to initialize itself.

47
00:02:31,356 --> 00:02:35,540
Then, we as developers need to
fill in the NewView method,

48
00:02:35,540 --> 00:02:39,179
which creates and
returns a blank new list item for

49
00:02:39,180 --> 00:02:42,400
the current row being
pointed to by the Cursor.

50
00:02:42,400 --> 00:02:44,320
And we also need to fill
in the bindView method,

51
00:02:44,320 --> 00:02:48,600
in order to read data in
the current row in the Cursor, and

52
00:02:48,600 --> 00:02:50,920
set it to the views within
this list item view.

53
00:02:52,510 --> 00:02:55,649
So, the CursorAdapater class
handles some of the logic for

54
00:02:55,650 --> 00:02:59,440
us, such as moving the Cursor
to the correct position.

55
00:02:59,440 --> 00:03:02,150
So, we don't need to move
the Cursor to the correct position

56
00:03:02,150 --> 00:03:03,420
within these two methods.

57
00:03:04,880 --> 00:03:08,549
So, to show you an example of
a fully implemented CursorAdapter,

58
00:03:08,550 --> 00:03:10,150
let's take a look at an online tutorial.

59
00:03:11,820 --> 00:03:14,209
So, this tutorial is from CodePath and

60
00:03:14,210 --> 00:03:17,410
explains how to populate
a ListView with a CursorAdapter.

61
00:03:19,000 --> 00:03:21,630
So the goal of the example
that will be shown below

62
00:03:21,630 --> 00:03:25,490
is to show a to-do list
in the Adapter view.

63
00:03:25,500 --> 00:03:28,970
So, in this situation, the Adapter
view is a list view, and it's using

64
00:03:28,970 --> 00:03:34,220
the Adapter to pull information from
a data source, which will be a cursor.

65
00:03:34,220 --> 00:03:36,118
So let's assume that
the cursor looks like this.

66
00:03:36,118 --> 00:03:40,130
So each to-do item has a body for

67
00:03:40,130 --> 00:03:43,220
the task description,
as well as a numerical priority.

68
00:03:44,620 --> 00:03:47,540
So start, we need to find
what a list item looks like.

69
00:03:47,540 --> 00:03:49,340
So, we create a list item layout,

70
00:03:49,340 --> 00:03:54,100
which here is referred to as a template,
in order to display a single to-do item.

71
00:03:54,100 --> 00:03:57,905
We define the layout in a file
called item_todo.xml, and

72
00:03:57,905 --> 00:04:01,340
this is defined within
the res/layout folder.

73
00:04:01,340 --> 00:04:05,245
Now the convention has used the word
item in the file name itself

74
00:04:05,246 --> 00:04:09,810
to indicate that it's a layout for
a single list item.

75
00:04:09,810 --> 00:04:11,690
Now, in the XML file,

76
00:04:11,690 --> 00:04:16,610
we can see that this list item layout
consists of a horizontal linear layout.

77
00:04:16,610 --> 00:04:21,480
So, this outer view out here which
contains two text views, so one for

78
00:04:21,480 --> 00:04:24,570
the body, and then one for the priority.

79
00:04:25,870 --> 00:04:29,410
So, here's a screenshot of what
the app will eventually look like.

80
00:04:29,410 --> 00:04:33,350
We see that each list item, so
each row here, shows the task body and

81
00:04:33,350 --> 00:04:34,390
the priority.

82
00:04:34,390 --> 00:04:37,700
Now, to make all this work,
we need to find a custom CursorAdapter,

83
00:04:37,700 --> 00:04:40,599
which we're going to
call TodoCursorAdapter.

84
00:04:40,600 --> 00:04:45,160
And this adapter will be responsible for
changing each todoCursor into a list

85
00:04:45,160 --> 00:04:49,370
item view, using the item to do template
layout that we created in the file.

86
00:04:50,680 --> 00:04:54,490
So now, let's take a look at the code
with a todoCursorAdapter class.

87
00:04:54,490 --> 00:04:57,210
So, we'll scroll down here to
the Defining the Adapter section.

88
00:04:58,380 --> 00:05:01,950
So, we notice that the TodoCursorAdapter
extends from the framework class

89
00:05:01,950 --> 00:05:02,969
CursorAdapter.

90
00:05:02,970 --> 00:05:05,120
And notice there are two important
methods that are required to be

91
00:05:05,120 --> 00:05:08,200
implemented, the newView method and
the bindView method.

92
00:05:09,510 --> 00:05:11,610
So, the newView method inflates,

93
00:05:11,610 --> 00:05:15,728
which means that it creates a new list
item view object from our XML file.

94
00:05:15,728 --> 00:05:17,950
So our item_todo XML file.

95
00:05:17,950 --> 00:05:20,760
So the listView item it
creates is blank, and

96
00:05:20,760 --> 00:05:24,110
it doesn't contain information
about the to-do item just yet.

97
00:05:24,110 --> 00:05:26,810
Doing so
will be the job of the bindView method.

98
00:05:26,810 --> 00:05:32,277
Instead the newView method returns
a blank list item as its return value.

99
00:05:32,277 --> 00:05:34,940
And, with that, we're done
setting up the newView method.

100
00:05:36,250 --> 00:05:39,900
So, the bindView method actually
takes the data from the cursor,

101
00:05:39,900 --> 00:05:44,210
and then assigns it to the text
views within the list item view.

102
00:05:44,210 --> 00:05:47,320
Now, notice that a cursor,
and a list set, and

103
00:05:47,320 --> 00:05:50,469
view are passed into
the bindView method.

104
00:05:50,470 --> 00:05:52,260
So, the view is the list set and

105
00:05:52,260 --> 00:05:54,550
view, which is generated
from our newView method.

106
00:05:54,550 --> 00:05:58,540
And the cursor is a cursor that's
pointing to a particular row you're

107
00:05:58,540 --> 00:05:59,950
interested in making a view for.

108
00:06:01,210 --> 00:06:04,900
So, for example, it might be
pointing at this row up here, so

109
00:06:04,900 --> 00:06:07,700
the Get milk body with
a priority of two.

110
00:06:08,890 --> 00:06:11,530
Now back down to the bindView method.

111
00:06:11,530 --> 00:06:14,976
So the first thing you want to do in
this code is to find the two test views,

112
00:06:14,976 --> 00:06:16,590
using the findViewByID method.

113
00:06:16,590 --> 00:06:19,666
[BLANK_AUDIO]

114
00:06:19,666 --> 00:06:21,780
And into it we pass the view IDs.

115
00:06:23,680 --> 00:06:26,527
>From there we have the references
to our two text view objects.

116
00:06:26,527 --> 00:06:30,490
Next, we want to get the value
of the priority and the body for

117
00:06:30,490 --> 00:06:33,260
the current row from the cursor,
so these two lines.

118
00:06:35,600 --> 00:06:37,250
After that, we take the text
views that we got up here,

119
00:06:37,250 --> 00:06:42,900
and then set their text to
the values of the priority and

120
00:06:42,900 --> 00:06:45,960
body from the cursor, so
these two lines here.

121
00:06:48,120 --> 00:06:52,355
So, after that, we have our
CursorAdapter, list item layout, and

122
00:06:52,355 --> 00:06:56,280
listView all set up, and
now we need to hook them all together.

123
00:06:56,280 --> 00:06:59,719
So, let's scroll down here
to the Attaching the Adapter

124
00:06:59,720 --> 00:07:00,600
to a ListView section.

125
00:07:01,740 --> 00:07:04,610
So, doing so
will be done in the activity class.

126
00:07:04,610 --> 00:07:09,560
And usually, we set it up in the UI,
usually in the onCreate method.

127
00:07:09,560 --> 00:07:12,970
So, attaching the adapter to
the ListView requires these three steps.

128
00:07:14,900 --> 00:07:17,119
So first, we need to get
a reference of the ListView, and

129
00:07:17,120 --> 00:07:19,820
you need to have a ListView as part
of the layout for your activity.

130
00:07:21,000 --> 00:07:24,730
Next, we need to create a new adapter
by calling the TodoAdapter constructor,

131
00:07:24,730 --> 00:07:27,300
and then passing in
the current activity context,

132
00:07:27,300 --> 00:07:31,830
which we reference with this as well as
the cursor containing the to-do items.

133
00:07:31,830 --> 00:07:35,490
And then finally,
we set the adapter on to the ListView so

134
00:07:35,490 --> 00:07:41,430
they can begin populating it
with this line here, setAdapter.

135
00:07:41,430 --> 00:07:44,130
Now it's your turn to do the same for
the Pets app.

136
00:07:44,130 --> 00:07:47,370
So first thing we need to do
is to create a new layout file

137
00:07:47,370 --> 00:07:51,720
called list_item.xml for
the list item layout.

138
00:07:51,720 --> 00:07:54,680
And since you're already familiar with
creating layouts, I went ahead and

139
00:07:54,680 --> 00:07:57,660
defined the item layout for
you in the code gist linked below.

140
00:07:57,660 --> 00:08:00,790
And that means you can just copy and
paste from there.

141
00:08:00,790 --> 00:08:05,180
Afterwards, you need to create a new
PetCursorAdapter class, so the provided

142
00:08:05,180 --> 00:08:08,970
gist also includes some starter code for
you as well for this task.

143
00:08:08,970 --> 00:08:12,650
And be sure to fill the logic for the
newView() and the bindView() methods.

144
00:08:13,890 --> 00:08:17,450
So once you're done with that, I want
you to modify the CatalogActivity, so

145
00:08:17,450 --> 00:08:19,630
that you can hook all
the pieces up together.

146
00:08:19,630 --> 00:08:23,800
Start by modifying
the activity_catalog.xml file

147
00:08:23,800 --> 00:08:27,550
to include the a ListView instead
of the existing TextView.

148
00:08:27,550 --> 00:08:31,960
Then, in the displayDatabaseInfo()
method of the CatalogActivity, you need

149
00:08:31,960 --> 00:08:36,630
to setup a PetCursorAdapter using
the Cursor returned from the provider.

150
00:08:36,630 --> 00:08:39,350
Remember to set the adapter
onto the ListView.

151
00:08:39,350 --> 00:08:42,870
And at this time, you can also remove
all code related to displaying any pet

152
00:08:42,870 --> 00:08:44,380
information in the TextView.

153
00:08:44,380 --> 00:08:46,134
Can you use some help?

154
00:08:46,134 --> 00:08:48,900
Feel free to reference the tutorial,
which we've linked down below.

