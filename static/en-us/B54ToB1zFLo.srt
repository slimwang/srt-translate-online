1
00:00:00,000 --> 00:00:07,000
So this gives me a great idea! Let's use memoization to make parsing very fast.

2
00:00:07,000 --> 00:00:12,000
Let's cast our minds back to the glory days of regular expressions and finite state machines.

3
00:00:12,000 --> 00:00:17,000
In order to see if a string was accepted by a finite state machine,

4
00:00:17,000 --> 00:00:21,000
we'd essentially keep our finger on the state.

5
00:00:21,000 --> 00:00:27,000
So on input abb-a, b, b--I just sort of keep my finger on this middle state

6
00:00:27,000 --> 00:00:29,000
to see where things were going.

7
00:00:29,000 --> 00:00:32,000
If I stop here, then the string is not in the language.

8
00:00:32,000 --> 00:00:40,000
but if I add 1 more character, c--a, b, b, c--I just put my finger on it, and I can tell, we accept.

9
00:00:40,000 --> 00:00:44,000
We're going to use this same "put your finger on it" trick for parsing

10
00:00:44,000 --> 00:00:48,000
to keep track of where we are, to keep track of which state we're in.

11
00:00:48,000 --> 00:00:50,000
Now for finite state machine state, that was pretty easy.

12
00:00:50,000 --> 00:00:52,000
They were the circles.

13
00:00:52,000 --> 00:00:55,000
For our parser state, this is not so clear.

14
00:00:55,000 --> 00:00:58,000
We're also going to solve parsing by "putting our finger on it."

15
00:00:58,000 --> 00:01:03,000
But just like how how nondeterministic finite state machines might require 2 or 3 fingers,

16
00:01:03,000 --> 00:01:06,000
parsing might also require a number of fingers.

17
00:01:06,000 --> 00:01:08,000
It's going to be somewhat complicated.

18
00:01:08,000 --> 00:01:13,000
Consider this simple arithmetic expression grammar--has a starting nonterminal,

19
00:01:13,000 --> 00:01:15,000
but then quickly goes to E.

20
00:01:15,000 --> 00:01:20,000
E + E, E - E, and 1 and 2 instead of number. Let's just make it finite.

21
00:01:20,000 --> 00:01:25,000
Suppose the entire input is 1 + 2, which is in the language of the grammar.

22
00:01:25,000 --> 00:01:29,000
Currently, we've only seen the 1 and the +.

23
00:01:29,000 --> 00:01:33,000
Remember that to figure out if something was in the language of a finite state machine,

24
00:01:33,000 --> 00:01:34,000
we look at 1 character at a time.

25
00:01:34,000 --> 00:01:36,000
We're going to do pretty much the same thing for parsing.

26
00:01:36,000 --> 00:01:39,000
We're going to look at 1 token at a time.

27
00:01:39,000 --> 00:01:43,000
But the question is, where are we now?

28
00:01:43,000 --> 00:01:45,000
Well, we don't have states that look like circles,

29
00:01:45,000 --> 00:01:48,000
but we do have these rules.

30
00:01:48,000 --> 00:01:50,000
In fact, we've got 5 of them written over here,

31
00:01:50,000 --> 00:01:54,000
and if we've already seen the 1 and the +, we're about to see the 2.

32
00:01:54,000 --> 00:01:59,000
I claim that there are 1 or 2 of these rules that match more closely than others.

33
00:01:59,000 --> 00:02:04,000
For example, S goes to E--that doesn't seem particularly relevant.

34
00:02:04,000 --> 00:02:07,000
Now a minus sign--that doesn't seem particularly relevant.

35
00:02:07,000 --> 00:02:12,000
E goes to 1--if we've already seen the 1 and the +, we're kind of passed that.

36
00:02:12,000 --> 00:02:16,000
But these 2--E + E and 2--that's kind of where the action is.

37
00:02:16,000 --> 00:02:18,000
That's where we are now in some strong sense.

38
00:02:18,000 --> 00:02:22,000
In fact, I'm going to claim that we're right here.

39
00:02:22,000 --> 00:02:27,000
In the rules, E goes to E + E, we've already seen the E and the +.

40
00:02:27,000 --> 00:02:30,000
Here's my finger, and we're about to see the next E.

41
00:02:30,000 --> 00:02:32,000
Since I can't always leave my finger on the slide,

42
00:02:32,000 --> 00:02:39,000
we often formally draw a red dot in the middle of 1 of these rules to keep track of where we are.

43
00:02:39,000 --> 00:02:43,000
This is 1 example of a parsing state.

44
00:02:43,000 --> 00:02:47,000
The first E is going to correspond to or come from the 1 of the input.

45
00:02:47,000 --> 00:02:50,000
Ideally, the second E will match up with 2 in the input.

46
00:02:50,000 --> 00:02:54,000
We've already seen everything to the left of the red dot.

47
00:02:54,000 --> 00:02:57,000
We have not yet seen everything to the right of the red dot.

48
00:02:57,000 --> 00:02:59,000
The red dot is right where we are now.

49
00:02:59,000 --> 99:59:59,999
This is the past. This is the future. This is now.
