1
00:00:00,260 --> 00:00:03,957
You'll soon notice an issue with our setup. If we walk through our entities and

2
00:00:03,957 --> 00:00:07,402
render them in the list as they've been allocated, then we get into situations

3
00:00:07,402 --> 00:00:10,741
that some objects will render above or below other objects, which may cause

4
00:00:10,741 --> 00:00:17,135
visual issues. For instance, explosions should draw above everything else. But

5
00:00:17,135 --> 00:00:20,060
with our current setup, this won't happen, depending on how our entity list is

6
00:00:20,060 --> 00:00:24,109
sorted. The classic solution to this problem is to introduce a z index property

7
00:00:24,109 --> 00:00:28,970
to each entity, that describes in what order an object should be rendered. If

8
00:00:28,970 --> 00:00:32,104
we assume the map is at z index equal to zero, then our engine will draw

9
00:00:32,104 --> 00:00:35,735
entities with lower z indexes first, such that they appear underneath objects

10
00:00:35,735 --> 00:00:41,525
with higher z order values. Once we've added the z index value to each of our

11
00:00:41,525 --> 00:00:45,100
entities, we have to modify the game engine class's draw function to take this

12
00:00:45,100 --> 00:00:49,838
into account. So, looking at the code here, first, our draw function will, of

13
00:00:49,838 --> 00:00:53,887
course, go through and draw the map. Then, as before, we walk through each of

14
00:00:53,887 --> 00:00:58,210
our entities. And if it's within our viewRect, we render it to the screen. Now,

15
00:00:58,210 --> 00:01:02,710
your job is to figure out how to modify this code Sort of we properly reder

16
00:01:02,710 --> 00:01:05,411
zindex into account
