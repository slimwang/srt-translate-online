1
00:00:00,008 --> 00:00:04,920
The second core service of course is CPU scheduling. And

2
00:00:04,920 --> 00:00:10,150
exokernel in order to facilitate this core service, maintains

3
00:00:10,150 --> 00:00:15,714
a linear vector of time slots. So, time is divided into these

4
00:00:15,714 --> 00:00:20,710
epochs T1, T2, T3 and so on, and every time quantum has a begin and an

5
00:00:20,710 --> 00:00:25,940
end. And these time quantums represent the time

6
00:00:25,940 --> 00:00:28,660
that is allocated to the library operating systems

7
00:00:28,660 --> 00:00:31,770
that live on top of exokernel. And the

8
00:00:31,770 --> 00:00:35,260
time quantum is bound by the begin end

9
00:00:35,260 --> 00:00:39,760
markers for each library operating system. Each library operating

10
00:00:39,760 --> 00:00:42,895
system gets to mark its time quantum at

11
00:00:42,895 --> 00:00:46,430
startup in this linear vector of time slots.

12
00:00:46,430 --> 00:00:51,470
So, for instance, OS1 may say that I get this time slot, I get this time slot,

13
00:00:51,470 --> 00:00:53,390
maybe some of the time slot and so on.

14
00:00:53,390 --> 00:00:58,430
And similarly, OS2 marks its spots in the linear

15
00:00:58,430 --> 00:01:02,490
vector time slots. So CPU scheduling in exokernel is

16
00:01:02,490 --> 00:01:05,950
essentially looking at this linear vector of time slots and

17
00:01:05,950 --> 00:01:08,970
asking the question, in this time quantum, which is

18
00:01:08,970 --> 00:01:11,630
the library operating system that should be running on the

19
00:01:11,630 --> 00:01:14,690
processor? And there is a start time for the

20
00:01:14,690 --> 00:01:17,220
time quantum. There's an end time for the time quantum.

21
00:01:17,220 --> 00:01:22,930
And Let's say, OS1 is now running on the CPU. When the timer interrupt goes

22
00:01:22,930 --> 00:01:27,210
off, at this endpoint, control is transferred

23
00:01:27,210 --> 00:01:30,440
by exokernal to the library operating system to

24
00:01:30,440 --> 00:01:36,460
do any saving that it has to do of the context. And the time that is

25
00:01:36,460 --> 00:01:42,750
allowed for a library operating system to do the saving and restoring of context

26
00:01:42,750 --> 00:01:44,960
at the point of a context switch is

27
00:01:44,960 --> 00:01:48,790
bounded. And if an operating system misbehaves, let's say

28
00:01:48,790 --> 00:01:53,670
that OS1, when exokernel says it's time for you

29
00:01:53,670 --> 00:01:56,680
to save your context and give back the processor

30
00:01:56,680 --> 00:01:58,700
to me so that I can schedule it,

31
00:01:58,700 --> 00:02:00,990
for some of the operating systems. And let's say

32
00:02:00,990 --> 00:02:05,000
OS1 takes more time than is allowed to at

33
00:02:05,000 --> 00:02:08,180
the point of this context, which, in that case,

34
00:02:08,180 --> 00:02:11,490
what will happen is exokernel will remember that

35
00:02:11,490 --> 00:02:14,200
OS1 misbehaved And it will take time off of

36
00:02:14,200 --> 00:02:16,590
OS1 the next time it is scheduled. For there's

37
00:02:16,590 --> 00:02:20,390
a penalty associated with exceeding the time quantum. The

38
00:02:20,390 --> 00:02:24,120
time quantum is bound. During this time quantum, OS1

39
00:02:24,120 --> 00:02:27,370
has complete control of the processor, and exokernel is

40
00:02:27,370 --> 00:02:29,770
not going to get in the middle of it, unless

41
00:02:29,770 --> 00:02:33,346
a process that is running on behalf of OS1

42
00:02:33,346 --> 00:02:36,480
incurs a page fault. In that case, exokernel has

43
00:02:36,480 --> 00:02:38,330
to come in the middle in order to field

44
00:02:38,330 --> 00:02:40,720
that page fault and pass it up to the

45
00:02:40,720 --> 00:02:44,990
operating system. And otherwise, during this time quantum, the operating

46
00:02:44,990 --> 00:02:48,890
system is entirely at liberty to use a processor

47
00:02:48,890 --> 00:02:51,680
for running whatever processes it wants to. At the

48
00:02:51,680 --> 00:02:54,380
end of the time quantum, the time integer goes

49
00:02:54,380 --> 00:02:58,380
off. Exokernel feels it and kicks it up to the

50
00:02:58,380 --> 00:03:04,520
operating system and tells the operating system to clean up its act. Save

51
00:03:04,520 --> 00:03:10,665
any context it wants so that the CPU can be reallocated to the next library

52
00:03:10,665 --> 00:03:16,340
operating system. And that's where the time is bounded, as to how much time

53
00:03:16,340 --> 00:03:21,320
the library operating system can take in order to do that saving of the context.
