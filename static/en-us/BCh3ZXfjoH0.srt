1
00:00:00,610 --> 00:00:04,210
What's actually happening
when a TCP connection opens?

2
00:00:04,210 --> 00:00:06,260
Well what has to happen?

3
00:00:06,260 --> 00:00:07,830
The two endpoints, the client and

4
00:00:07,830 --> 00:00:11,760
server, have to get into agreement
that a connection exists.

5
00:00:11,760 --> 00:00:15,020
Well what information has to be
exchanged in order for that to happen?

6
00:00:15,020 --> 00:00:18,990
Before anything happens, the client
knows the server's IP address and

7
00:00:18,990 --> 00:00:21,920
port number, but the server doesn't
know anything about the client.

8
00:00:21,920 --> 00:00:24,900
So the client has to send
the server a message with,

9
00:00:24,900 --> 00:00:28,450
among other things,
its IP address and port number,

10
00:00:28,450 --> 00:00:31,940
saying that it wants to connect
to the server on its IP and port.

11
00:00:31,940 --> 00:00:33,840
But TCP does more than that.

12
00:00:33,840 --> 00:00:36,960
It also keeps track of the data
that each end point is sent.

13
00:00:36,960 --> 00:00:39,737
And make sure that the other
end point has received it, and

14
00:00:39,737 --> 00:00:43,366
make sure that the application sees that
data in order even if the underlying

15
00:00:43,366 --> 00:00:45,540
network reorders the packets.

16
00:00:45,540 --> 00:00:49,710
The way that it does this is by putting
a sequence number on each packet.

17
00:00:49,710 --> 00:00:53,010
Each endpoint sends an acknowledgement
indicating when its

18
00:00:53,010 --> 00:00:57,750
received a particular sequence number,
and if a packet goes missing the other

19
00:00:57,750 --> 00:01:01,390
end point will notice there's no
acknowledgement and will re-transmit it.

20
00:01:01,390 --> 00:01:03,700
Also, sequence numbers start
out at a random number so

21
00:01:03,700 --> 00:01:06,620
they're very unlikely to get confused
between one connection and another.

22
00:01:07,800 --> 00:01:10,900
So when the client sends
this first packet,

23
00:01:10,900 --> 00:01:14,690
it has a sequence number on it like
number one two three four five.

24
00:01:14,690 --> 00:01:18,150
And when the server sends back its first
response that has a different sequence

25
00:01:18,150 --> 00:01:23,110
number, like nine, eight, seven, six,
it also contains an acknowledgement,

26
00:01:23,110 --> 00:01:25,450
saying that the server has
received packets up to but

27
00:01:25,450 --> 00:01:28,090
not including number one,
two, three, four, six.

28
00:01:28,090 --> 00:01:32,930
And then subsequently each packet either
end sends has an acknowledgement or

29
00:01:32,930 --> 00:01:33,970
ack for short.

30
00:01:33,970 --> 00:01:36,630
That indicates one more than
the greatest sequence number.

31
00:01:36,630 --> 00:01:39,390
For which it knows it doesn't
need anything re sent.

32
00:01:39,390 --> 00:01:41,970
When the client sends the packet
containing its request.

33
00:01:41,970 --> 00:01:47,550
The server acknowledges that request
even before it sends the response.

34
00:01:47,550 --> 00:01:49,260
Then it will send the response and

35
00:01:49,260 --> 00:01:51,810
the client will acknowledge each
packet that's used to send then.

36
00:01:52,862 --> 00:01:55,390
For a realistically sized
file there will be many,

37
00:01:55,390 --> 00:01:57,930
many more of these before we're done.

38
00:01:57,930 --> 00:02:00,820
And since there will be many
more of these it's not just that

39
00:02:00,820 --> 00:02:03,040
the server will be sending
a lot of data to the client.

40
00:02:03,040 --> 00:02:06,140
The client will also be sending
an Ack back to the server for

41
00:02:06,140 --> 00:02:07,190
each packet of that data.

42
00:02:07,190 --> 00:02:10,770
And because that data is going to
be broken up into a lot of packets

43
00:02:10,770 --> 00:02:13,500
each with its own sequence number on
it there are going to be a lot of

44
00:02:13,500 --> 00:02:14,280
ack's flowing back.

45
00:02:15,320 --> 00:02:19,580
Even though the client isn't
transmitting any application data back.

46
00:02:19,580 --> 00:02:21,370
All those packets will
have data length zero.

47
00:02:21,370 --> 00:02:24,270
They'll still be telling
the server how much data has been

48
00:02:24,270 --> 00:02:25,330
successfully received.
