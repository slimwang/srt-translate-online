1
00:00:00,580 --> 00:00:06,590
In a para virtualized setting on the other hand the operating system knows that

2
00:00:06,590 --> 00:00:10,130
its physical memory is not contiguous. And

3
00:00:10,130 --> 00:00:14,480
there for this burden of efficient mapping

4
00:00:14,480 --> 00:00:16,930
can be shifted into the guest operating

5
00:00:16,930 --> 00:00:19,730
system itself. So now the guest operating

6
00:00:19,730 --> 00:00:22,590
system is going to maintain. Contiguous physical

7
00:00:22,590 --> 00:00:25,740
memory makes it simpler in terms of

8
00:00:25,740 --> 00:00:31,830
all the other subsystems to do that. But it is also going to know that its

9
00:00:31,830 --> 00:00:37,460
notion of physical memory, is not the same as machine memory, and so it will map

10
00:00:37,460 --> 00:00:40,870
the discontiguous physical memory to real hardware

11
00:00:40,870 --> 00:00:45,820
pages. So that burden of doing the PPN

12
00:00:45,820 --> 00:00:48,160
to MPN mapping can be pushed into the

13
00:00:48,160 --> 00:00:51,510
guest operating system in a very virtualized setting.

14
00:00:51,510 --> 00:00:57,200
So on an architecture like Intel, where the page table is a data

15
00:00:57,200 --> 00:01:02,600
structure of the operating system. And it is also used by the hardware to do

16
00:01:02,600 --> 00:01:07,910
the address translation. The responsibility of allocating

17
00:01:07,910 --> 00:01:10,890
and managing the hardware page table data

18
00:01:10,890 --> 00:01:13,440
structure can be shifted into the guest

19
00:01:13,440 --> 00:01:16,540
operating system. In a fully virtualized setting,

20
00:01:16,540 --> 00:01:19,110
it's not possible to do that because the

21
00:01:19,110 --> 00:01:21,930
operating system in a fully virtualized setting is

22
00:01:21,930 --> 00:01:24,510
unaware of the fact that it is not

23
00:01:24,510 --> 00:01:27,530
running on bare metal. But in a paravirtualized

24
00:01:27,530 --> 00:01:29,560
setting, since it is possible to do that,

25
00:01:29,560 --> 00:01:33,280
it is more efficient to push this efficient

26
00:01:33,280 --> 00:01:37,080
mapping handling into the guest operating system. For

27
00:01:37,080 --> 00:01:42,580
example, in Xen, which is a paravirtualized hypervisor

28
00:01:42,580 --> 00:01:48,850
it provides a set of Hypercalls for the guest operating system to tell the

29
00:01:48,850 --> 00:01:51,870
Hypervisor about changes to the hardware page

30
00:01:51,870 --> 00:01:54,540
table. So, for instance, there is a call

31
00:01:54,540 --> 00:02:00,720
that says create page table and this allows a guest operating system to allocate

32
00:02:00,720 --> 00:02:04,440
and initialize a page frame that it

33
00:02:04,440 --> 00:02:07,610
has previously acquired a real page frame that

34
00:02:07,610 --> 00:02:13,360
it is previously acquired from the hypervisor as a hardware resource. It can

35
00:02:13,360 --> 00:02:20,190
target that physical page frame as a page table data structure. Recall that

36
00:02:20,190 --> 00:02:25,690
each guest operating system, would have gotten a bunch of physical memory from

37
00:02:25,690 --> 00:02:29,000
the hypervisor at the beginning of

38
00:02:29,000 --> 00:02:32,700
establishing its foot print on the hypervisor.

39
00:02:32,700 --> 00:02:38,680
And so it can use one of those real physical memories to host a pay stable

40
00:02:38,680 --> 00:02:41,410
data structure, on behalf of a new process

41
00:02:41,410 --> 00:02:45,230
that it launches now. So anytime a new process

42
00:02:45,230 --> 00:02:48,080
starts up in the guest operating system, the

43
00:02:48,080 --> 00:02:51,470
guest operating system will make a hypercall to xen

44
00:02:51,470 --> 00:02:55,090
saying. Please create a page table for me,

45
00:02:55,090 --> 00:02:57,980
and this is the page frame that I'm giving

46
00:02:57,980 --> 00:03:03,320
you to use as the page table. So, when the guest operating system has to operate

47
00:03:03,320 --> 00:03:07,420
this particular process which got launched, then it

48
00:03:07,420 --> 00:03:11,530
can make another hypercall to the hypervisor saying

49
00:03:11,530 --> 00:03:14,400
please switch to page table, and here is

50
00:03:14,400 --> 00:03:17,560
the location of the page table. The hypervisor

51
00:03:17,560 --> 00:03:19,640
doesn't know about all these processes. All it

52
00:03:19,640 --> 00:03:23,240
understands is that there's a hypercall that says change

53
00:03:23,240 --> 00:03:28,020
the page table from whatever it used to be to this new page table. And

54
00:03:28,020 --> 00:03:31,940
that essentially results in this guest operating system,

55
00:03:31,940 --> 00:03:36,220
switching the address space. Of the currently running

56
00:03:36,220 --> 00:03:41,970
process on the the bare hardware on the bare metal to P1 by this switch page

57
00:03:41,970 --> 00:03:45,070
table hypercall. Xen will do that appropriate thing,

58
00:03:45,070 --> 00:03:48,640
of setting the hardware register of the processor

59
00:03:48,640 --> 00:03:51,620
to point to this page table data structure.

60
00:03:51,620 --> 00:03:54,430
In response to this hypercall from the guest operating

61
00:03:54,430 --> 00:03:57,630
system. If the process P1 one were to page

62
00:03:57,630 --> 00:03:59,920
fault at some point of time, the page fault

63
00:03:59,920 --> 00:04:03,000
would be handled by the guest operating system. We'll

64
00:04:03,000 --> 00:04:05,350
talk about how it does that later on. But

65
00:04:05,350 --> 00:04:08,820
once it handles that page fault for P1 and

66
00:04:08,820 --> 00:04:14,310
says, oh, this particular virtual page of this process

67
00:04:14,310 --> 00:04:19,810
is now going to correspond to a physical frame that I own. I'm going to tell the

68
00:04:19,810 --> 00:04:27,230
hypervisor that the mapping in the page table, has to be set for

69
00:04:27,230 --> 00:04:30,670
this translation that I just established for

70
00:04:30,670 --> 00:04:33,550
the faulted page for this process. So

71
00:04:33,550 --> 00:04:36,750
there's another hypercall that's available for updating

72
00:04:36,750 --> 00:04:39,490
a given page table data structure. And using

73
00:04:39,490 --> 00:04:42,750
this the guest operating system can deal

74
00:04:42,750 --> 00:04:46,190
with modifications to the base table data structure.

75
00:04:46,190 --> 00:04:52,565
All the things that an operating system would have to do in a normal setting on

76
00:04:52,565 --> 00:04:58,030
bare metal. You have to be able to do in the setting where you have the

77
00:04:58,030 --> 00:05:01,940
hypervisor sitting between the real hardware and the

78
00:05:01,940 --> 00:05:04,560
guest operating system. And the three things that

79
00:05:04,560 --> 00:05:06,740
are required to be done in the conflicts of

80
00:05:06,740 --> 00:05:10,660
memory management, in a para virtualized setting, is being able

81
00:05:10,660 --> 00:05:14,870
to create a brand new hardware address space for

82
00:05:14,870 --> 00:05:18,460
a newly launched process which involves creating a page table.

83
00:05:18,460 --> 00:05:20,980
That's a hypercall that's available. When you do a

84
00:05:20,980 --> 00:05:24,320
conflict switch, you want to switch the page table. That's a

85
00:05:24,320 --> 00:05:26,710
hypercall that's available when you do a conflict switch in

86
00:05:26,710 --> 00:05:29,690
the guest operating system from P1 to P2, the guest

87
00:05:29,690 --> 00:05:35,050
can tell the hypervisor that the page table to use from now on is such and so.

88
00:05:35,050 --> 00:05:38,150
That's the way the guest can do a contact

89
00:05:38,150 --> 00:05:42,820
switch from one process to another. And, thirdly, since

90
00:05:42,820 --> 00:05:45,310
not all of the address space or the

91
00:05:45,310 --> 00:05:49,060
memory footprint of a process would be physical memory,

92
00:05:49,060 --> 00:05:52,600
if the currently running process were to incur at

93
00:05:52,600 --> 00:05:54,760
page four, that has to be handled by the

94
00:05:54,760 --> 00:05:57,520
guest operating system. In handling that, it

95
00:05:57,520 --> 00:06:01,520
establishes a mapping between the messy virtual page

96
00:06:01,520 --> 00:06:05,880
for this process and the physical frame in which the contents of the page is

97
00:06:05,880 --> 00:06:09,840
now contained. That mapping has been put

98
00:06:09,840 --> 00:06:12,340
into the page table for this particular process.

99
00:06:12,340 --> 00:06:17,020
Again that's something that only the hypervisor can

100
00:06:17,020 --> 00:06:20,640
do, because it is a privileged operation happening

101
00:06:20,640 --> 00:06:24,000
inside the hardware. And for that purpose, the

102
00:06:24,000 --> 00:06:27,250
hypervisor provides a hyper call that allows a

103
00:06:27,250 --> 00:06:30,028
guest operating system to update the base table

104
00:06:30,028 --> 00:06:32,360
data structure. So at the outset I said that

105
00:06:32,360 --> 00:06:35,560
handling virtual memory is a thorny issue. Doing

106
00:06:35,560 --> 00:06:38,590
the mapping from virtual to physical on every

107
00:06:38,590 --> 00:06:42,880
memory access, with all the intervention of the

108
00:06:42,880 --> 00:06:47,140
guest operating system is the key to good performance.

109
00:06:47,140 --> 00:06:51,010
And it can be done both in fully virtualized and

110
00:06:51,010 --> 00:06:54,170
paravirtualized setting by the tricks that we talked about just now.
