1
00:00:00,000 --> 00:00:03,000
Now let's scroll down and look at the group function.

2
00:00:03,000 --> 00:00:07,000
What group does is it takes a list of items

3
00:00:07,000 --> 00:00:11,000
and then returns a list of counts of items and the item itself.

4
00:00:11,000 --> 00:00:14,000
It just goes through the set of items

5
00:00:14,000 --> 00:00:18,000
and returns pairs of the count

6
00:00:18,000 --> 00:00:21,000
and the set and then sorts them in reverse order

7
00:00:21,000 --> 00:00:23,000
so that the highest comes first.

8
00:00:23,000 --> 00:00:26,000
And now this returns a list of pairs,

9
00:00:26,000 --> 00:00:30,000
and we'd like to turn that into a pair of lists,

10
00:00:30,000 --> 00:00:32,000
and the unzip function does that.

11
00:00:32,000 --> 00:00:34,000
It's a little bit tricky.

12
00:00:34,000 --> 00:00:37,000
You have to look up the zip function and apply it

13
00:00:37,000 --> 00:00:41,000
to the destructured list of the pairs,

14
00:00:41,000 --> 00:00:44,000
but rest assured that that just pulls out,

15
00:00:44,000 --> 00:00:49,000
converts a list of pairs into a pair of lists,

16
00:00:49,000 --> 00:00:52,000
and we call that up here in order to get the right answer.

17
00:00:52,000 --> 00:00:54,000
Now, I'm always thinking about refactoring.

18
00:00:54,000 --> 00:00:58,000
I'm also always thinking of when are you done, and when is it time not to refactor anymore?

19
00:00:58,000 --> 00:01:02,000
But I was having so much fun with this, I just wanted to try one more possibility,

20
00:01:02,000 --> 00:01:05,000
and that's to say rather than have a long case statement

21
00:01:05,000 --> 00:01:08,000
of the different results, can we just have them in a look-up table?

22
00:01:08,000 --> 00:01:12,000
And so what I did is I took all 7 of the partitions of the numbers

23
00:01:12,000 --> 00:01:17,000
of the number 5 and put them into a table called "count_rankings"

24
00:01:17,000 --> 00:01:20,000
and then had the corresponding poker ranking,

25
00:01:20,000 --> 00:01:25,000
0 for a high card, 1 for a pair, 2 for two pair, and so on.

26
00:01:25,000 --> 00:01:31,000
And now instead of having a statement here that's a long case statement

27
00:01:31,000 --> 00:01:35,000
for all of the 9 possibilities, I can just say

28
00:01:35,000 --> 00:01:39,000
that the result is the maximum of taking the counts,

29
00:01:39,000 --> 00:01:42,000
looking them up in this table, and that will give you a value

30
00:01:42,000 --> 00:01:45,000
for anything having to do with pairs or 3 or 4 of a kind.

31
00:01:45,000 --> 00:01:49,000
And take the maximum of that, and this expression here,

32
00:01:49,000 --> 00:01:53,000
which says 4 times straight plus 5 times flush.

33
00:01:53,000 --> 00:01:56,000
Now, that might seem a little confusing, but what that's doing is

34
00:01:56,000 --> 00:02:00,000
it's using automatic conversion of booleans into integers

35
00:02:00,000 --> 00:02:03,000
and saying if straight is true, that corresponds to 1,

36
00:02:03,000 --> 00:02:06,000
and if false, that corresponds to 0.

37
00:02:06,000 --> 00:02:09,000
So if straight alone is true, that will give you a 4,

38
00:02:09,000 --> 00:02:11,000
and that's the right ranking for straight.

39
00:02:11,000 --> 00:02:16,000
If 5 alone is true, that will give you a 5, and that's the right ranking for flush.

40
00:02:16,000 --> 00:02:20,000
And if straight and flush are true, that will give you a 9.

41
00:02:20,000 --> 00:02:24,000
And what we had to do here, in the previous results

42
00:02:24,000 --> 00:02:28,000
straight flush was supposed to be 8, but it's okay if it's 9.

43
00:02:28,000 --> 00:02:30,000
All we have to do is take 5 of a kind and bump that up to 10,

44
00:02:30,000 --> 00:02:34,000
and now we get the right rankings by taking the maximum of that.

45
00:02:34,000 --> 00:02:36,000
We still have to return the ranks to break the ties,

46
00:02:36,000 --> 00:02:40,000
but now in 1 line we did what took 9 lines before,

47
00:02:40,000 --> 00:02:42,000
and you can decide is this what you like?

48
00:02:42,000 --> 00:02:44,000
It's nice and concise.

49
00:02:44,000 --> 00:02:48,000
Or do you like the previous approach because it was more explicit?

50
00:02:48,000 --> 00:02:51,000
And that's a question of taste. It's up to you which one you prefer.

51
00:02:51,000 --> 00:02:54,000
Now let's look at our lessons learned.

52
00:02:54,000 --> 00:02:57,000
We always start by understanding the problem.

53
00:02:57,000 --> 00:03:00,000
Look at the specification. See if it makes sense.

54
00:03:00,000 --> 00:03:02,000
If it doesn't make sense, talk to people.

55
00:03:02,000 --> 00:03:06,000
Try to figure it out. Consider different ways of trying to make sense of it.

56
00:03:06,000 --> 00:03:08,000
Then define the pieces of the problem.

57
00:03:08,000 --> 00:03:13,000
For our problem we had cards and hands and ranks and suits and so on.

58
00:03:13,000 --> 00:03:17,000
Figure out everything there is to represent in the problem.

59
00:03:17,000 --> 00:03:20,000
As much as you can, try to reuse the pieces that you have.

60
00:03:20,000 --> 00:03:22,000
We used the max function.

61
00:03:22,000 --> 00:03:24,000
We used the random shuffle function.

62
00:03:24,000 --> 00:03:27,000
Those were sort of standard pieces that we already knew about.

63
00:03:27,000 --> 00:03:29,000
Make sure you write tests.

64
00:03:29,000 --> 00:03:31,000
You don't know what you've done.

65
00:03:31,000 --> 00:03:34,000
You don't know what your program does unless you can specify it

66
00:03:34,000 --> 00:03:37,000
both in terms of the pieces that you're defining

67
00:03:37,000 --> 00:03:41,000
and in terms of the test that tells you what is it that this program does?

68
00:03:41,000 --> 00:03:44,000
And then explore the design space.

69
00:03:44,000 --> 00:03:47,000
We have many dimensions for the design space.

70
00:03:47,000 --> 00:03:52,000
We have to deal with correctness, with efficiency,

71
00:03:52,000 --> 00:03:54,000
with elegance, and with features.

72
00:03:54,000 --> 00:03:56,000
Decide where in the design space you want to be.

73
00:03:56,000 --> 00:04:00,000
Keep moving in the right direction, and use good taste to know when to stop.

74
00:04:00,000 --> 00:04:03,000
I hope we've learned something from this.

75
00:04:03,000 --> 00:04:06,000
Now let's take a look at some homework problems to really

76
00:04:06,000 --> 99:59:59,999
reinforce these lessons learned.
