1
00:00:00,140 --> 00:00:02,040
Responding with web pages is great, but

2
00:00:02,040 --> 00:00:05,490
sometimes all that needs to be
communicated is information.

3
00:00:05,490 --> 00:00:09,020
For example, let's say that there's
a web application out there called Yum

4
00:00:09,020 --> 00:00:11,330
that wants to collect
our restaurant menus and

5
00:00:11,330 --> 00:00:13,940
advertise them to mobile clients
based on their location.

6
00:00:13,940 --> 00:00:15,860
Free advertising, all right!

7
00:00:15,860 --> 00:00:19,290
This app wants to see the restaurants
and menus available in our database but

8
00:00:19,290 --> 00:00:21,460
doesn't really need to
parse through HTML or

9
00:00:21,460 --> 00:00:23,770
waste bandwidth receiving CSS files.

10
00:00:23,770 --> 00:00:25,710
It just wants the data.

11
00:00:25,710 --> 00:00:28,550
For this reason,
developers have created APIs, or

12
00:00:28,550 --> 00:00:32,610
Application Programming Interfaces,
that allow external applications to use

13
00:00:32,610 --> 00:00:34,680
public information our
apps want to share,

14
00:00:34,680 --> 00:00:36,210
without all the bells and whistles.

15
00:00:36,210 --> 00:00:39,984
When an API is communicated over the
Internet, following the rules of HTTP,

16
00:00:39,984 --> 00:00:41,330
we call this a restful API.

17
00:00:41,330 --> 00:00:46,230
One of the most popular ways of sending
data with a restful architecture is with

18
00:00:46,230 --> 00:00:50,070
a format called JSON, which stands for
JavaScript object notation.

19
00:00:50,070 --> 00:00:53,730
JSON uses attribute value pairings
which are delimited by a colon.

20
00:00:53,730 --> 00:00:56,500
Brackets are used to
encapsulate individual objects.

21
00:00:56,500 --> 00:00:59,830
Let's start coding to add this
JSON feature to our application.

22
00:00:59,830 --> 00:01:02,570
Before we write the JSON
function in our Flask menu app,

23
00:01:02,570 --> 00:01:06,490
let's first open up the database
setup.pi and add a decorator method.

24
00:01:06,490 --> 00:01:10,470
This serializable function will help
define what data we want to send across,

25
00:01:10,470 --> 00:01:13,020
and put it in a format
that Flask can easily use.

26
00:01:13,020 --> 00:01:15,130
Flask has a built-in package,
called jsonify,

27
00:01:15,130 --> 00:01:19,370
that will allow us to easily configure
an API endpoint for our application.

28
00:01:19,370 --> 00:01:22,752
I will go ahead and import this
package now in my project.py file.

29
00:01:22,752 --> 00:01:26,240
For this lesson we are only going to
focus on using a get request to get

30
00:01:26,240 --> 00:01:27,960
a collection of restaurant menu items.

31
00:01:27,960 --> 00:01:30,560
But know that other types of
requests can be implemented as well.

32
00:01:30,560 --> 00:01:33,920
I will now create a route similar
to my restaurant menu page

33
00:01:33,920 --> 00:01:36,000
with /JSON at the end.

34
00:01:36,000 --> 00:01:39,190
I then create a function and
name it restaurant menu JSON and

35
00:01:39,190 --> 00:01:42,260
then perform the same query as
in my restaurant menu class.

36
00:01:42,260 --> 00:01:45,760
But instead of returning a template,
I will return this jsonify class and

37
00:01:45,760 --> 00:01:48,740
use this loop to serialize
all of my database entries.

38
00:01:48,740 --> 00:01:55,140
Now, if I save and go to local host
port 5000/restaurants/1/menu/json,

39
00:01:55,140 --> 00:01:58,110
I return with the pure data form
of my menu in a format that can

40
00:01:58,110 --> 00:02:01,080
easily be read by humans and
easily parsed by other computers
