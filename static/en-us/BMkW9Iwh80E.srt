1
00:00:00,120 --> 00:00:02,350
So let's look at one example of why we may need

2
00:00:02,350 --> 00:00:05,700
synchronization. So let's say we have two threads and what they

3
00:00:05,700 --> 00:00:09,890
are doing is counting occurrences of different letters in a letter.

4
00:00:09,890 --> 00:00:13,130
The first thread, let's call it thread A, is counting in the

5
00:00:13,130 --> 00:00:16,490
first half of the document. So it's going to count occurrences

6
00:00:16,490 --> 00:00:19,456
of each letter in the first half of the document. And the

7
00:00:19,456 --> 00:00:22,368
second thread, let's call that thread B, is counting in the

8
00:00:22,368 --> 00:00:25,392
second half of the document, and then they will put these counts

9
00:00:25,392 --> 00:00:28,470
together somehow. So, the code might look like

10
00:00:28,470 --> 00:00:32,380
this. A thread will load a letter, load from

11
00:00:32,380 --> 00:00:35,850
memory the count for that letter, add one to

12
00:00:35,850 --> 00:00:38,840
that count, and then store the new count back

13
00:00:38,840 --> 00:00:41,845
into memory. While thread A is doing this,

14
00:00:41,845 --> 00:00:45,210
thread B might be doing this. It loads a

15
00:00:45,210 --> 00:00:47,590
letter from its own part of the array. Note

16
00:00:47,590 --> 00:00:50,430
that R1 and R2 are different in these threads.

17
00:00:50,430 --> 00:00:52,240
This is kind of the pointer to where I got

18
00:00:52,240 --> 00:00:54,280
in this part of the array, this is the pointer where

19
00:00:54,280 --> 00:00:56,798
this thread got in its part of the array. So

20
00:00:56,798 --> 00:00:59,742
this thread is doing exactly the same work as this one,

21
00:00:59,742 --> 00:01:03,006
and as long as the letters they're processing are different

22
00:01:03,006 --> 00:01:07,120
this is going to work. This thread is incrementing one part of

23
00:01:07,120 --> 00:01:10,910
the count array, this one is incrementing something else in the

24
00:01:10,910 --> 00:01:16,120
count array. But what if this thread sees letter A. And

25
00:01:16,120 --> 00:01:20,530
this thread, at the same time, sees another letter A in its own part of

26
00:01:20,530 --> 00:01:24,820
the array. Then what happens is they both try to load the same element from the

27
00:01:24,820 --> 00:01:30,350
count array. Let's say the count was 15, so this one will load 15 and this one

28
00:01:30,350 --> 00:01:35,862
will load 15. Now we add one and we get 16, and we do the same

29
00:01:35,862 --> 00:01:41,200
here. Finally, we store 16 to memory, and here

30
00:01:41,200 --> 00:01:44,010
we also store 16 to memory. So now there

31
00:01:44,010 --> 00:01:47,330
were two occurrences of letter A, but the value

32
00:01:47,330 --> 00:01:50,152
in the array ends up being 16, which is

33
00:01:50,152 --> 00:01:53,313
only one more than the original 15. So after

34
00:01:53,313 --> 00:01:56,193
both of these threads are done updating the counter,

35
00:01:56,193 --> 00:01:58,945
the counter should have been 17, so clearly this

36
00:01:58,945 --> 00:02:02,634
is incorrect behavior. What we need is really that

37
00:02:02,634 --> 00:02:06,242
this happens and then this happens, or the other way

38
00:02:06,242 --> 00:02:09,193
around, but these should not be happening

39
00:02:09,193 --> 00:02:12,884
simultaneously because then we can get the incorrect

40
00:02:12,884 --> 00:02:16,240
result. If for example, this happens first,

41
00:02:16,240 --> 00:02:20,220
we load, we get 15. Increment store 16.

42
00:02:20,220 --> 00:02:25,560
Now when we load this here, cache coherence ensures that we load 16

43
00:02:25,560 --> 00:02:31,540
and we end up with 17 here which is a correct result. Similarly if we did this

44
00:02:31,540 --> 00:02:34,560
first it would produce 16 in memory, then we

45
00:02:34,560 --> 00:02:37,350
would load that in increment to 17. So no matter

46
00:02:37,350 --> 00:02:40,138
which one of these happens first we should get the

47
00:02:40,138 --> 00:02:43,198
correct result, but we don't get the correct if they

48
00:02:43,198 --> 00:02:47,025
happen in an interleaved fashion. They should happen one at

49
00:02:47,025 --> 00:02:49,040
a time, I did this and this, or all of

50
00:02:49,040 --> 00:02:53,210
this and then all of this. So these things that

51
00:02:53,210 --> 00:02:56,870
have to execute kind of one at a time are

52
00:02:56,870 --> 00:03:01,240
called atomic or critical sections. So we have one

53
00:03:01,240 --> 00:03:04,330
critical section here and another one here. They can actually

54
00:03:04,330 --> 00:03:06,262
be the same code, it's just that both threads are

55
00:03:06,262 --> 00:03:08,660
currently in the same piece of code. But as you

56
00:03:08,660 --> 00:03:13,360
can see, if we have a section that should behave

57
00:03:13,360 --> 00:03:16,510
as a critical session, meaning, we do this without interference

58
00:03:16,510 --> 00:03:19,710
from any other thread. If we just let it happen,

59
00:03:19,710 --> 00:03:22,640
it's not going to be done correctly. So what we need

60
00:03:22,640 --> 00:03:26,960
is synchronization. We need additional code that ensures that only

61
00:03:26,960 --> 00:03:30,100
one thread gets to do this at any given time.
