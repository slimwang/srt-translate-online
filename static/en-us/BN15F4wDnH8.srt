1
00:00:00,139 --> 00:00:01,306
So, here's an issue.

2
00:00:01,306 --> 00:00:05,820
What happens when the size at which you
want to draw a texture is different from

3
00:00:05,820 --> 00:00:07,840
the size the texture actually is?

4
00:00:07,840 --> 00:00:12,349
For instance, this center image is
the actual size of the GigaGal texture.

5
00:00:12,349 --> 00:00:16,110
That's one pixel in the texture
is one pixel on the screen.

6
00:00:16,110 --> 00:00:21,066
Well we have two very different ways
of drawing GigaGal at six times her

7
00:00:21,066 --> 00:00:22,080
normal size.

8
00:00:22,080 --> 00:00:26,276
The way we choose the color of the extra
pixels that are added when we scale up

9
00:00:26,276 --> 00:00:28,086
a texture is called filtering.

10
00:00:28,086 --> 00:00:31,569
On the left, we're using
nearest neighbor interpolation.

11
00:00:31,569 --> 00:00:34,420
That is to say that we
just pick the nearest

12
00:00:34,420 --> 00:00:39,393
pixel in the original image to figure
out what color to color a new pixel.

13
00:00:39,393 --> 00:00:42,190
Over here, we're using linear filtering,

14
00:00:42,190 --> 00:00:46,840
which uses a linear combination of
the nearby pixels to select a new color.

15
00:00:46,840 --> 00:00:48,454
Basically, average it.

16
00:00:48,454 --> 00:00:52,592
Now, in most cases, especially if you're
only making the texture a little bit

17
00:00:52,592 --> 00:00:55,883
bigger, linear filtering will
tend to preserve more detail.

18
00:00:55,883 --> 00:00:59,881
But it's also a little bit more
costly from a graphics point of view.

19
00:00:59,881 --> 00:01:03,834
However, since all the textures for
GigaGal are in this pixel art style,

20
00:01:03,834 --> 00:01:06,579
we'll be using nearest
neighbor interpolation or

21
00:01:06,579 --> 00:01:09,415
nearest neighbor filtering for
most of this class.

22
00:01:09,415 --> 00:01:13,355
LibGDX provides a third type of
filtering called MIP mapping.

23
00:01:13,355 --> 00:01:17,865
And that is where it precomputes a bunch
of versions of the texture at different

24
00:01:17,865 --> 00:01:18,422
scales.

25
00:01:18,422 --> 00:01:21,624
This is most useful when the size of
a texture is going to be changing

26
00:01:21,624 --> 00:01:25,701
dramatically over the course of a game,
which mostly happens in 3D applications.

27
00:01:25,701 --> 00:01:27,110
So we're not going to
worry about it here,
