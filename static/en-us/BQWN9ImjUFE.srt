1
00:00:00,390 --> 00:00:06,060
I don't want to focus on the CSS code above or the data loading below.

2
00:00:06,060 --> 00:00:09,980
For this example I only want to focus on the draw function.

3
00:00:09,980 --> 00:00:13,400
If you're curious about what exactly the CSS or

4
00:00:13,400 --> 00:00:16,870
the data loading functions were doing, I suggest reading

5
00:00:16,870 --> 00:00:20,990
through Mike Bostock's tutorial, which is linked to in the instructor notes.

6
00:00:22,050 --> 00:00:26,950
We have already seen many of the functions that Mike uses in his tutorial.

7
00:00:26,950 --> 00:00:34,780
We have scales and range, select and attributes, a domain, and also .text.

8
00:00:34,780 --> 00:00:39,870
The first two lines define the width for the chart and the height for the bars.

9
00:00:39,870 --> 00:00:44,640
A second chunk of code here creates a linear scale and

10
00:00:44,640 --> 00:00:48,460
sets the range to be zero to the width of our chart.

11
00:00:48,460 --> 00:00:52,850
If you think about these values of zero and width, it makes perfect sense.

12
00:00:52,850 --> 00:00:58,330
We don't want any of our data points to get placed past zero on our chart, or

13
00:00:58,330 --> 00:00:59,880
in the negative region.

14
00:00:59,880 --> 00:01:03,250
Nor do we want any data points to extend beyond the right

15
00:01:03,250 --> 00:01:05,269
most edge of our chart.

16
00:01:05,269 --> 00:01:09,480
A subtlety of this code here is that while I've labeled it

17
00:01:09,480 --> 00:01:13,990
as the x-axis scale and while the variable of storing is x, there

18
00:01:13,990 --> 00:01:20,220
is nothing specific to this code or its functions which define it as the x-axis.

19
00:01:20,220 --> 00:01:25,360
We will see later that how we use it, however, creates the x values.

20
00:01:25,360 --> 00:01:30,720
The third group of code sets the width on our SVG chart element.

21
00:01:30,720 --> 00:01:35,740
If you remember we hard coded into the HTML an SVG element that had

22
00:01:35,740 --> 00:01:37,350
the class chart.

23
00:01:37,350 --> 00:01:41,180
So, here we're selecting that chart with d3.select and

24
00:01:41,180 --> 00:01:44,810
then changing the width attribute to the width variable.

25
00:01:44,810 --> 00:01:46,770
In this case, 420.

26
00:01:46,770 --> 00:01:52,300
Keep in mind that this code corresponds to the blue bars I showed earlier, and

27
00:01:52,300 --> 00:01:56,880
the blue bars extended from left to right horizontally according to

28
00:01:56,880 --> 00:01:58,670
the value of the data.

29
00:01:58,670 --> 00:02:03,530
On line 28 here the call to the domain method on X

30
00:02:03,530 --> 00:02:05,800
has quite a lot of things going on with it.

31
00:02:05,800 --> 00:02:10,030
First off, X was created above here as a linear scale.

32
00:02:10,030 --> 00:02:15,100
Remember, however, what I said earlier about d3's chainable syntax.

33
00:02:15,100 --> 00:02:22,580
Even though d3.scale.linear.range is a method call, it returns the scale object.

34
00:02:22,580 --> 00:02:26,760
So x is actually a scale and not a range.

35
00:02:26,760 --> 00:02:32,760
So this call here is actually calling domain on the scale of x.

36
00:02:32,760 --> 00:02:38,620
The domain of our data represents the min and max of our data values.

37
00:02:38,620 --> 00:02:42,800
You can see here that we simply hard code a value of 0 as

38
00:02:42,800 --> 00:02:44,960
the minimum of our domain.

39
00:02:44,960 --> 00:02:49,440
The d3 max function takes our data as the first argument and

40
00:02:49,440 --> 00:02:53,510
a function to call on that data as a second argument.

41
00:02:53,510 --> 00:02:57,080
Notice here that the function takes a single argument, d.

42
00:02:57,080 --> 00:03:01,770
What gets passed to this function is actually every datum, so a single piece of

43
00:03:01,770 --> 00:03:07,500
data, from our data array, and the function gets executed once for each.

44
00:03:07,500 --> 00:03:09,420
So inside of this function,

45
00:03:09,420 --> 00:03:14,910
d actually corresponds to a single data point and we get its value.

46
00:03:14,910 --> 00:03:17,990
The reason we need to pass a function is that d3,

47
00:03:17,990 --> 00:03:21,230
being the data-driven library it is,

48
00:03:21,230 --> 00:03:26,100
could have different ways of defining the max of the domain for a given data.

49
00:03:26,100 --> 00:03:31,440
So this function, passed as a second argument, allows a generalized max function

50
00:03:31,440 --> 00:03:35,480
to work no matter what your data looks like or what the structure is.

51
00:03:35,480 --> 00:03:40,210
Inside this function, you simply need to return whichever value from each

52
00:03:40,210 --> 00:03:45,980
data point you want to use as the value to compare in the max calculation.

53
00:03:45,980 --> 00:03:52,030
Notice also that we don't store the return value of x.domain in any variable.

54
00:03:52,030 --> 00:03:54,680
This is because both domain and

55
00:03:54,680 --> 00:03:58,550
range mutate the internal state of the scale object,

56
00:03:58,550 --> 00:04:03,150
setting some properties on the object itself rather than returning a value.
