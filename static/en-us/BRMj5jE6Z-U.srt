1
00:00:00,000 --> 00:00:02,000
The hard problem that is closely related

2
00:00:02,000 --> 00:00:04,000
to the Diffie-Hellman security property

3
00:00:04,000 --> 00:00:06,000
is the discrete log problem.

4
00:00:06,000 --> 00:00:08,000
Discrete logs are like continuous logs

5
00:00:08,000 --> 00:00:10,000
but over a discrete group.

6
00:00:10,000 --> 00:00:13,000
So continuous log if we have a to the x equals b,

7
00:00:13,000 --> 00:00:16,000
and we know a and b, we can solve for x.

8
00:00:16,000 --> 00:00:19,000
That's the log base a of b,

9
00:00:19,000 --> 00:00:22,000
and they're well know efficient ways to compute these logarithms.

10
00:00:22,000 --> 00:00:24,000
One of the earliest use of computers

11
00:00:24,000 --> 00:00:27,000
was to compute these tables of logarithms.

12
00:00:27,000 --> 00:00:30,000
With discrete numbers, this gets much more interesting.

13
00:00:30,000 --> 00:00:32,000
So now we have a to the x equals b,

14
00:00:32,000 --> 00:00:34,000
modulo sum value n,

15
00:00:34,000 --> 00:00:36,000
and our goal is to solve for x,

16
00:00:36,000 --> 00:00:39,000
which is the discrete log base a of b,

17
00:00:39,000 --> 00:00:42,000
and this turns out to be, as far as everyone can tell,

18
00:00:42,000 --> 00:00:45,000
a very hard problem when n is a large prime number.

19
00:00:45,000 --> 00:00:47,000
It's not clear that discrete log always exists,

20
00:00:47,000 --> 00:00:51,000
and for certain choices of a, b, and n, it would not exists,

21
00:00:51,000 --> 00:00:53,000
but if we choose n as a large

22
00:00:53,000 --> 00:00:55,000
prime number and a as a generator,

23
00:00:55,000 --> 00:00:57,000
well then by definition, it must exist.

24
00:00:57,000 --> 00:00:59,000
What it means for our number to be a generator

25
00:00:59,000 --> 00:01:03,000
is that if we raise g to each power,

26
00:01:03,000 --> 00:01:06,000
what we get is the permutation of the numbers in the group Zn.

27
00:01:06,000 --> 00:01:09,000
So as a little demonstration, certainly not a proof,

28
00:01:09,000 --> 00:01:12,000
here's a code that produces the permutation

29
00:01:12,000 --> 00:01:16,000
for given some generator and some modulus,

30
00:01:16,000 --> 00:01:19,000
raises the generator to every power

31
00:01:19,000 --> 00:01:21,000
between 1 and the modulus minus 1.

32
00:01:21,000 --> 00:01:23,000
So we can try that with a fairly

33
00:01:23,000 --> 00:01:26,000
small prime number so you can see the results.

34
00:01:26,000 --> 00:01:29,000
We'll use 277 as our prime number

35
00:01:29,000 --> 00:01:32,000
and 5 as a generator for 277.

36
00:01:32,000 --> 00:01:34,000
One could check that in a root force way

37
00:01:34,000 --> 00:01:37,000
just to show that it all produces all the numbers,

38
00:01:37,000 --> 00:01:40,000
and we'll see that in the output for generator permutation.

39
00:01:40,000 --> 00:01:42,000
These are the results and

40
00:01:42,000 --> 00:01:45,000
you can see the first 1 is 5, that's 5 to the 1;

41
00:01:45,000 --> 00:01:49,000
25 is 5 to the 2; 125 is 5 to the 3.

42
00:01:49,000 --> 00:01:54,000
The next one is 71 because 5 to the 4 mod to 77 is 71,

43
00:01:54,000 --> 00:01:56,000
and if we look at all the numbers here,

44
00:01:56,000 --> 00:02:00,000
it would be a permutation on the numbers from 1 to 276.

45
00:02:00,000 --> 00:02:02,000
Other than the early ones,

46
00:02:02,000 --> 00:02:04,000
it would be fairly hard to predict where

47
00:02:04,000 --> 00:02:06,000
a number is in this sequence.

48
00:02:06,000 --> 00:02:08,000
You could certainly compute the whole sequence to find it.

49
00:02:08,000 --> 00:02:11,000
The question the discrete log is asking

50
00:02:11,000 --> 00:02:13,000
is given a number, can you figure out

51
00:02:13,000 --> 00:02:15,000
where it would be in this sequence

52
00:02:15,000 --> 00:02:17,000
or can you figure out the power that you need

53
00:02:17,000 --> 00:02:19,000
to raise the generator to find it,

54
00:02:19,000 --> 00:02:21,000
and the claim is that that's hard to do.

55
00:02:21,000 --> 00:02:23,000
Showing this sequence really is not enough

56
00:02:23,000 --> 00:02:25,000
to convince you that that's hard to do,

57
00:02:25,000 --> 00:02:27,000
and there's no proof that it's hard.

58
00:02:27,000 --> 00:02:29,000
The reason people believe it's hard

59
00:02:29,000 --> 00:02:31,000
is that many smart people have tried to find

60
00:02:31,000 --> 00:02:33,000
good ways of doing this, and none of the

61
00:02:33,000 --> 00:02:35,000
solutions rendered polynomial time

62
00:02:35,000 --> 00:02:38,000
that the fastest known solutions are exponential.

63
00:02:38,000 --> 00:02:41,000
That means essentially that the only way to solve

64
00:02:41,000 --> 00:02:44,000
this is to try all possible powers

65
00:02:44,000 --> 00:02:46,000
until you find the one that works.

66
00:02:46,000 --> 00:02:48,000
You can do a little better than that by trying

67
00:02:48,000 --> 00:02:50,000
powers in a clever way, and you can

68
00:02:50,000 --> 00:02:52,000
exclude some of the powers more quickly,

69
00:02:52,000 --> 00:02:55,000
but you can't do any better than doing this exponential search,

70
00:02:55,000 --> 00:02:58,000
which is exponential in the size of n

71
00:02:58,000 --> 00:03:00,000
so this is something we have to be careful about when we

72
00:03:00,000 --> 00:03:02,000
talk about hard problems.

73
00:03:02,000 --> 00:03:05,000
When we say it's exponential, well it's not exponential in the value of n.

74
00:03:05,000 --> 00:03:07,000
It's linear in the value of n.

75
00:03:07,000 --> 00:03:10,000
We just need to try n operations,

76
00:03:10,000 --> 00:03:12,000
but the magnitude of n

77
00:03:12,000 --> 00:03:17,000
grows as 2 to the number of bits needed to break down n.

78
00:03:17,000 --> 00:03:20,000
So as long as that's the best solution to discrete log,

79
00:03:20,000 --> 00:03:22,000
then for very large n,

80
00:03:22,000 --> 00:03:25,000
it is intractable no matter how many computer resources you have,

81
00:03:25,000 --> 00:03:27,000
you can't do this exponential search.

82
00:03:27,000 --> 00:03:29,000
You can't find the value of x that's the

83
00:03:29,000 --> 00:03:32,000
discrete log of b, base a, mod n.

84
00:03:32,000 --> 00:03:34,000
So as long as no one can find a

85
00:03:34,000 --> 00:03:37,000
fast way to solve the discrete log problem,

86
00:03:37,000 --> 00:03:39,000
as long as n is large and is an

87
00:03:39,000 --> 00:03:41,000
arbitrary instance of this problem,

88
00:03:41,000 --> 00:03:43,000
we think that it should be hard to

89
00:03:43,000 --> 00:03:46,000
compute x given a and b and the modulus.

90
00:03:46,000 --> 00:03:48,000
So for this quiz, we will assume that we have

91
00:03:48,000 --> 00:03:50,000
and advisory that's passive

92
00:03:50,000 --> 00:03:53,000
so all it can do is ease drop on the messages,

93
00:03:53,000 --> 00:03:55,000
but they also have access to a powerful computer resource,

94
00:03:55,000 --> 00:03:58,000
they have a procedure dlog that is

95
00:03:58,000 --> 00:04:00,000
a fast procedure for computing discrete

96
00:04:00,000 --> 00:04:02,000
logs that works on any inputs,

97
00:04:02,000 --> 00:04:04,000
and they have modular exponentiation,

98
00:04:04,000 --> 00:04:06,000
a fast procedure that outputs

99
00:04:06,000 --> 00:04:08,000
base to the power mod modules.

100
00:04:08,000 --> 00:04:11,000
And now the question is can they break a Diffie-Hellman key?

101
00:04:11,000 --> 00:04:14,000
So we're assuming that they're passive attackers,

102
00:04:14,000 --> 00:04:17,000
so they've eased dropped on all the

103
00:04:17,000 --> 00:04:19,000
messages between Alice and Bob,

104
00:04:19,000 --> 00:04:22,000
so they have all these values that were sent over the secure channel,

105
00:04:22,000 --> 00:04:24,000
and the possible answers are no

106
00:04:24,000 --> 00:04:26,000
that it's impossible with no

107
00:04:26,000 --> 00:04:29,000
more resources or information,

108
00:04:29,000 --> 00:04:31,000
or yes there is a way to do it,

109
00:04:31,000 --> 99:59:59,999
and here's the way that she would compute that.
