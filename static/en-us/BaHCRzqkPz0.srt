1
00:00:00,000 --> 00:00:04,000
Now, one of the big draws of having a universal parser like this

2
00:00:04,000 --> 00:00:10,000
was that I could fill in any context-free grammar and check any string of tokens against it.

3
00:00:10,000 --> 00:00:14,000
For example, here I've defined a new grammar that accepts the word "prisoner"

4
00:00:14,000 --> 00:00:17,000
followed by a list of numbers.

5
00:00:17,000 --> 00:00:21,000
N is a list of numbers. It's at least 1, but you can have more.

6
00:00:21,000 --> 00:00:24,000
This is a recursive rule so we can have as many as we want,

7
00:00:24,000 --> 00:00:29,000
and I've gotten lazy. We only put in 0, 1, 2, 3, 4, 5, 6, but I could go all the way 7, 8, 9, 10.

8
00:00:29,000 --> 00:00:32,000
One of my favorite prisoners is number 6.

9
00:00:32,000 --> 00:00:38,000
Let's go see if this string, prisoner 6, is accepted by this grammar.

10
00:00:38,000 --> 00:00:42,000
Here the chart is a bit bigger, because we have sort of a separate state for each one of these.

11
00:00:42,000 --> 00:00:45,000
This makes us glad that the computer is doing the memorization

12
00:00:45,000 --> 00:00:47,000
instead of us doing it by hand.

13
00:00:47,000 --> 00:00:49,000
But down here at the end we accept.

14
00:00:49,000 --> 00:00:53,000
By contrast if I just have the word "prisoner," this shouldn't work,

15
00:00:53,000 --> 00:00:57,000
because this list requires 1 or more integers.

16
00:00:57,000 --> 00:01:00,000
And in fact down here we can see that it is not accepted.

17
00:01:00,000 --> 00:01:02,000
Let's do just one more of these.

18
00:01:02,000 --> 00:01:05,000
If there were another prisoner vying for the affection of my heart,

19
00:01:05,000 --> 00:01:07,000
I'd ask you to bring me prisoner 24601.

20
00:01:07,000 --> 00:01:11,000
Perhaps his time is up and his parole has begun.You know what that means.

21
00:01:11,000 --> 00:01:13,000
Let's check and see if the string is accepted by the language of the grammar.

22
00:01:13,000 --> 00:01:18,000
Here, all the way down at the end of the day, we see that prisoner 24601,

23
00:01:18,000 --> 00:01:22,000
famously Jean Valjean from Victor Hugo's Les Miserables,

24
00:01:22,000 --> 00:01:26,000
a nice piece of French literature, is accepted by the language of this grammar.

25
00:01:26,000 --> 00:01:35,000
But we have a large number of chart states--5, 4, 3, 2, 1, 0--to accept this string.

26
00:01:35,000 --> 00:01:39,000
Let's do one more of these just to show off our very arbitrary power.

27
00:01:39,000 --> 00:01:41,000
Now I've put in the B grammar from before.

28
00:01:41,000 --> 00:01:45,000
We know how this one is supposed to work because we did it out together on paper.

29
00:01:45,000 --> 00:01:50,000
The input string I've put in is abbc, and that string is in the language of the grammar.

30
00:01:50,000 --> 00:01:53,000
If I forget one of the b's, we expect it not to be.

31
00:01:53,000 --> 00:01:56,000
When I forget one of the b's it is not in the language of the grammar.

32
00:01:56,000 --> 00:01:59,000
The real trick is basically that you have done it.

33
00:01:59,000 --> 00:02:04,000
This is enough of a parser to be given a formal grammar for JavaScript or HTML

34
00:02:04,000 --> 99:59:59,999
and determine if a string, a webpage, a program is in that language. This is very exciting.
