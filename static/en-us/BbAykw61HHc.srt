1
00:00:00,490 --> 00:00:03,910
Because access to the singleton is through a class, and

2
00:00:03,910 --> 00:00:08,520
class names are normally known globally, singletons somehow,

3
00:00:08,520 --> 00:00:13,660
sometimes act like global state instead of the traditional owned instances that

4
00:00:13,660 --> 00:00:18,440
we see in other uses of, of classes in object-oriented languages.

5
00:00:18,440 --> 00:00:23,860
We can also run into trouble in situations where the clients are multithreaded.

6
00:00:23,860 --> 00:00:26,950
That is, several threads may be trying to create that

7
00:00:26,950 --> 00:00:28,670
single instance at one time.

8
00:00:28,670 --> 00:00:32,380
Leading to the production of multiple singletons.

9
00:00:32,380 --> 00:00:36,010
Question arises as to when you create the single instance.

10
00:00:36,010 --> 00:00:37,980
One strategy is to do it at startup.

11
00:00:37,980 --> 00:00:40,540
Which you could think of as eager construction.

12
00:00:40,540 --> 00:00:44,140
Or do you wait until the first use to, to create it,

13
00:00:44,140 --> 00:00:46,310
which could be called lazy construction.

14
00:00:46,310 --> 00:00:49,970
Then some issues with respect to what it actually means to be a singleton.

15
00:00:49,970 --> 00:00:55,310
Does singleton a word mean at most once or exactly once?

16
00:00:55,310 --> 00:01:00,470
Similarly, does singleton mean only one ever or only one at a time?

17
00:01:00,470 --> 00:01:04,989
In languages with destructors, like C++, you could get rid of the instance and

18
00:01:04,989 --> 00:01:07,900
then later create another instance of that same singleton

19
00:01:07,900 --> 00:01:11,770
without violating the rule that there's at most one such instance.
