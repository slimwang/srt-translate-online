1
00:00:00,198 --> 00:00:02,760
>> So,
the service worker think is pretty good.

2
00:00:02,760 --> 00:00:05,298
I mean, it's really good.

3
00:00:05,298 --> 00:00:08,783
But all it is a simple JavaScript
file that sits between you and

4
00:00:08,783 --> 00:00:09,928
network requests.

5
00:00:09,928 --> 00:00:11,288
It's a type of web worker.

6
00:00:11,288 --> 00:00:13,488
Meaning, it runs
separately from your page.

7
00:00:13,488 --> 00:00:15,008
It isn't visible to the user.

8
00:00:15,008 --> 00:00:19,308
It can't access the DOM, but
it does control pages and by control.

9
00:00:19,308 --> 00:00:22,738
I mean, intercepts requests
as the browser makes them.

10
00:00:22,738 --> 00:00:26,038
From there, you can do, well,
whatever you want really.

11
00:00:26,038 --> 00:00:29,040
You can send the request off to
the network, as per usual or

12
00:00:29,040 --> 00:00:30,398
you can skip the network.

13
00:00:30,398 --> 00:00:33,890
Go to some kind of cache or
create a custom random response, or

14
00:00:33,890 --> 00:00:35,850
any combination of those things.

15
00:00:37,530 --> 00:00:39,763
You register for
a service worker like this,

16
00:00:39,763 --> 00:00:42,308
giving the location of your
service work a script.

17
00:00:42,308 --> 00:00:43,589
It returns a promise.

18
00:00:43,589 --> 00:00:46,582
So, you get call backs for
success and failure.

19
00:00:46,582 --> 00:00:48,922
If you're unfamiliar with promises,
don't worry.

20
00:00:48,922 --> 00:00:52,328
We'll guide you through the bits you
need to know throughout the course.

21
00:00:52,328 --> 00:00:56,168
If you call register when the service
work is already registered, that's fine.

22
00:00:56,168 --> 00:00:57,728
The browser won't re-register it.

23
00:00:57,728 --> 00:01:01,628
It'll just return a promise for
the existing registration.

24
00:01:01,628 --> 00:01:03,548
You can also provide a scope.

25
00:01:03,548 --> 00:01:07,042
The service worker will control any
page whose URL begins with the scope and

26
00:01:07,042 --> 00:01:09,190
it will ignore any that don't.

27
00:01:09,190 --> 00:01:13,060
So for this example, the service worker
will control a page at this URL and

28
00:01:13,060 --> 00:01:17,150
also anything with a deeper URL, but
not anything with a shallower URL.

29
00:01:17,150 --> 00:01:19,840
The service worker doesn't
get to control this one, nor

30
00:01:19,840 --> 00:01:21,740
will it control an unrelated URL.

31
00:01:22,775 --> 00:01:25,804
But be aware that this service
worker won't control this URL,

32
00:01:25,804 --> 00:01:27,758
as it doesn't have the trailing slash.

33
00:01:27,758 --> 00:01:30,598
So it counts, as a shallower URL.

34
00:01:30,598 --> 00:01:33,778
You can have multiple service
workers with different scopes,

35
00:01:33,778 --> 00:01:35,038
which is really handy for

36
00:01:35,038 --> 00:01:39,615
something like GitHub pages when
multiple projects share the same origin.

37
00:01:39,615 --> 00:01:43,471
Scopes let you have a different
service worker for each project.

38
00:01:43,471 --> 00:01:47,513
The default scope is determined by the
location of the service worker script.

39
00:01:47,513 --> 00:01:50,398
It's basically the path
that script sits in.

40
00:01:50,398 --> 00:01:52,208
Usually, you don't
need to set the scope.

41
00:01:52,208 --> 00:01:55,415
Just put the service worker
script in the right place, but

42
00:01:55,415 --> 00:01:57,718
what happens within the service worker?

43
00:01:57,718 --> 00:02:00,070
Well, you listen for particular events.

44
00:02:00,070 --> 00:02:03,135
Just like other JavaScript events,
you can react to them or

45
00:02:03,135 --> 00:02:05,598
even prevent the default and
do your own thing.

46
00:02:05,598 --> 00:02:09,542
We'll introduce these events one
by one as the cost progresses,

47
00:02:09,542 --> 00:02:11,558
but what about browser support?

48
00:02:11,558 --> 00:02:15,698
This site is service worker ready has
a breakdown of support by features.

49
00:02:15,698 --> 00:02:18,340
There's a link to that
in the presenter notes.

50
00:02:18,340 --> 00:02:20,803
Every browser has expressed
some interest in implementing.

51
00:02:20,803 --> 00:02:24,982
But as of 2015, service worker
is only support it in Chrome and

52
00:02:24,982 --> 00:02:27,603
Opera with Firefox support soon to land.

53
00:02:27,603 --> 00:02:30,522
But just because a technology
isn't universally supported,

54
00:02:30,522 --> 00:02:32,125
it doesn't mean you should wait.

55
00:02:32,125 --> 00:02:34,975
The service worker is entirely
progressive enhancement friendly.

56
00:02:34,975 --> 00:02:38,683
Meaning, we can use it in browsers that
support it without disrupting users of

57
00:02:38,683 --> 00:02:39,535
older browsers.

58
00:02:39,535 --> 00:02:41,495
They just won't get the benefits.

59
00:02:41,495 --> 00:02:44,887
In fact, using the stuff today to
improve the user experience will

60
00:02:44,887 --> 00:02:47,307
encourage of a browser to implement it.

61
00:02:47,307 --> 00:02:49,535
So, their users get the benefit too.

62
00:02:49,535 --> 00:02:52,639
To use service worker in a safe
progressive enhancing way,

63
00:02:52,639 --> 00:02:55,628
just make sure you write code
in a simple feature detect.

64
00:02:55,628 --> 00:02:57,906
If a browser doesn't
support service workers,

65
00:02:57,906 --> 00:03:01,358
navigator.serviceWorker will be
undefined, which is a faulty value.

66
00:03:01,358 --> 00:03:04,646
So, older browsers will skip
everything within the if statements and

67
00:03:04,646 --> 00:03:08,115
avoid trying to call functions
that aren't defined.

68
00:03:08,115 --> 00:03:11,275
That's most of the nitty-gritty
details covered.

69
00:03:11,275 --> 00:03:15,061
So let's all hold hands chance and
summon our Resident Quizmaster,

70
00:03:15,061 --> 00:03:15,783
Mike Wales.

71
00:03:15,783 --> 00:03:18,463
Mike, can you hear me
from beyond the Atlantic?

72
00:03:18,463 --> 00:03:19,403
>> I certainly can.

73
00:03:19,403 --> 00:03:20,489
It's time to get quizzical.
