1
00:00:01,000 --> 00:00:04,000
Letâ€™s say we have a list of numbers, and we wanted to find the odd numbers in that list.

2
00:00:04,000 --> 00:00:09,000
One way to do this is to use list comprehensions as we've learned earlier in the class.

3
00:00:09,000 --> 00:00:16,000
Here, the list of odds is only going to be the values of n,

4
00:00:16,000 --> 00:00:23,000
where n is an element in numbers and that n is odd, which is what this statement results in.

5
00:00:23,000 --> 00:00:26,000
We can also use the same construction to turn this list of numbers

6
00:00:26,000 --> 00:00:30,000
into a list of squares of each number.

7
00:00:30,000 --> 00:00:34,000
These types of operations are so common. In computer science, we give them a name.

8
00:00:34,000 --> 00:00:37,000
This is usually referred to as a filter, and there's a map.

9
00:00:37,000 --> 00:00:41,000
When we're filtering, we take in a list of numbers and some criteria

10
00:00:41,000 --> 00:00:45,000
and only return the numbers that satisfy that criteria.

11
00:00:45,000 --> 00:00:48,000
In a mapping, we take a list of elements and some operation

12
00:00:48,000 --> 00:00:51,000
and we perform that operation on each element.

13
00:00:51,000 --> 00:00:54,000
Python actually gives us built-in functions to do this.

14
00:00:54,000 --> 00:01:01,000
Another way to write odds is to use the built-in function filter where we give in two arguments.

15
00:01:01,000 --> 00:01:05,000
The first is a function that we've created anonymously

16
00:01:05,000 --> 00:01:08,000
using the lambda notation that return true or false.

17
00:01:08,000 --> 00:01:13,000
True if the n is odd, and false if n is even.

18
00:01:13,000 --> 00:01:18,000
The second parameter is the numbers, so filter is going to return all the numbers

19
00:01:18,000 --> 00:01:23,000
that when inputted into our first parameter, this function returns true.

20
00:01:23,000 --> 00:01:26,000
Here's how we generate the squares using the map operation.

21
00:01:26,000 --> 00:01:31,000
We pass in two parameters just like we did with filter where the first one is a function

22
00:01:31,000 --> 00:01:38,000
and the second one is a list, and map returns a new list that is the result of applying each element

23
00:01:38,000 --> 00:01:42,000
in numbers to the first parameter that we gave the function.

24
00:01:42,000 --> 00:01:47,000
This problem asks us to create what is known as a higher order of function

25
00:01:47,000 --> 00:01:52,000
that is we're going to create a function that generates a function that saves us time from having

26
00:01:52,000 --> 00:01:59,000
to repeat this first part of the filter and the map every time we want to use the same operation.

27
00:01:59,000 --> 00:02:06,000
Ideally, instead of writing filter of lambda n and mod 2 equals equal one.

28
00:02:06,000 --> 00:02:09,000
We're just going to create an odd filter.

29
00:02:09,000 --> 00:02:16,000
Here our filter maker creates a new function that takes in one parameter--numbers--

30
00:02:16,000 --> 00:02:23,000
and applies filter in the same way as we have up here because we've already passed in

31
00:02:23,000 --> 00:02:26,000
to the filter maker the function the we wanted to use filter on.

32
00:02:26,000 --> 00:02:31,000
There are two ways you can solve this. The first, would be using the lambda notation.

33
00:02:31,000 --> 00:02:37,000
And the second is using inline function defines. Here, we're creating a function using lambda.

34
00:02:37,000 --> 00:02:41,000
That's what lambda does. It's a function that creates a function that is a list comprehension

35
00:02:41,000 --> 00:02:47,000
for every element in our list, which is the one parameter into our lambda function L.

36
00:02:47,000 --> 00:02:52,000
We're going to leave it in the new function created by this list comprehension

37
00:02:52,000 --> 00:02:55,000
if that element satisfies our function F.

38
00:02:55,000 --> 00:02:58,000
In this alternative solution, I am using a nested function declaration

39
00:02:58,000 --> 00:03:04,000
where we're creating a function that takes in the list and returns the result of filter of the original function

40
00:03:04,000 --> 00:03:10,000
that we used to create our special filter f in the list that we just passed into this function.

41
00:03:10,000 --> 00:03:14,000
So that's how we do this for filter. Let's do the same thing for mapping.

42
00:03:14,000 --> 00:03:18,000
And just like before, we can solve this in two ways. First, we'll go over how to do a lambda.

43
00:03:18,000 --> 00:03:22,000
And then we'll briefly go over how to do it with a function declaration.

44
00:03:22,000 --> 00:03:27,000
Here I am creating a function that is just a list comprehension that returns the result of applying

45
00:03:27,000 --> 00:03:30,000
each element in l to function f.

46
00:03:30,000 --> 00:03:35,000
In this alternative solution, we're defining a function yourmap that simply returns the result

47
00:03:35,000 --> 00:03:38,000
in using Phyton's built-in map with parameters f

48
00:03:38,000 --> 00:03:42,000
and the list that is passed in with applying yourmap.

49
00:03:42,000 --> 99:59:59,999
And the last line is returning the mapping function we created.
