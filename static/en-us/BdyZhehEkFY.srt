1
00:00:00,520 --> 00:00:02,858
JavaScript profiling
takes some practice, but

2
00:00:02,858 --> 00:00:04,917
now you know the tools
you need to succeed.

3
00:00:04,917 --> 00:00:07,167
Hey, that rhymes, so it's clearly true.

4
00:00:07,167 --> 00:00:09,400
>> It sure does.

5
00:00:09,400 --> 00:00:12,530
So, have a look at your own projects and
see if you have some long-running

6
00:00:12,530 --> 00:00:15,200
JavaScript or
some badly timed JavaScript.

7
00:00:15,200 --> 00:00:17,910
See where you can reschedule it,
reduce its impact, or

8
00:00:17,910 --> 00:00:19,920
just remove it all together.

9
00:00:19,920 --> 00:00:21,840
>> Now, a lot of people
often think at this point,

10
00:00:21,840 --> 00:00:23,667
they're done with their
performance work.

11
00:00:23,667 --> 00:00:25,786
And, you know, and
if the JavaScript runs well,

12
00:00:25,786 --> 00:00:27,458
well there's nothing else left to do.

13
00:00:27,458 --> 00:00:28,750
But that's not at all true.

14
00:00:28,750 --> 00:00:32,915
As you saw earlier, there's a whole
pipeline after the JavaScript runs, and

15
00:00:32,915 --> 00:00:36,470
that also needs to fit into that
ten to 12-millisecond window.

16
00:00:36,470 --> 00:00:39,370
As the developer,
you're in control of that pipeline.

17
00:00:39,370 --> 00:00:42,950
You're the one who decides what
the browser does and when.

18
00:00:42,950 --> 00:00:43,450
>> Yes.

19
00:00:43,450 --> 00:00:46,970
So in next lesson, we'll be taking a
look at the different kinds of work that

20
00:00:46,970 --> 00:00:48,780
JavaScript often triggers.

21
00:00:48,780 --> 00:00:51,520
It could trigger style calculations,
layout, and paint.

22
00:00:51,520 --> 00:00:52,060
Let's get started.
