1
00:00:00,290 --> 00:00:03,130
Okay, here are my answers. As you can see basically, you know, mem

2
00:00:03,130 --> 00:00:06,520
cache got's the hash table and dictionaries in Python are hash tables as

3
00:00:06,520 --> 00:00:09,340
well. The semantics line up really nicely. So all of these functions are

4
00:00:09,340 --> 00:00:13,280
very simple. Set cache key to value. No problem return true. To get,

5
00:00:13,280 --> 00:00:15,690
we actually can use the get function that's built in the Python dictionaries,

6
00:00:15,690 --> 00:00:18,450
which is basically says get key. And if the key is not there,

7
00:00:18,450 --> 00:00:21,500
it will return none. If we've typed something like this, this would raise

8
00:00:21,500 --> 00:00:25,480
an exception. If, if the key isn't in the cache, Python would complain.

9
00:00:25,480 --> 00:00:28,320
And the get function is used to avoid that problem. Deleting a key

10
00:00:28,320 --> 00:00:30,640
in the cache. So, first of all what we would do is, if the

11
00:00:30,640 --> 00:00:33,460
key is in the cache, then delete it. And this is the Python

12
00:00:33,460 --> 00:00:35,450
syntax for deleting something from a dictionary.

13
00:00:35,450 --> 00:00:36,450
Another way of doing this would be,

14
00:00:36,450 --> 00:00:39,972
to use the pop function. Which is built in the Python and what

15
00:00:39,972 --> 00:00:44,390
basi, basically this says is, find the key in, in the dictionary. And if

16
00:00:44,390 --> 00:00:47,750
it's there, return it, otherwise return false. And if you don't have this false,

17
00:00:47,750 --> 00:00:50,530
this will raise an exception. I find this approach to be a little bit

18
00:00:50,530 --> 00:00:52,860
more readable, however. So which is why I did it that way.

19
00:00:52,860 --> 00:00:55,620
And of course flushing a cache is easy. You just call clear

20
00:00:55,620 --> 00:00:57,950
on the dictionary. And let's give all these a run real quick

21
00:00:57,950 --> 00:01:02,140
to see if they work. I'm going to go down to my test little

22
00:01:02,140 --> 00:01:07,070
test harness here. And uncomment all these operations and then we'll give

23
00:01:07,070 --> 00:01:09,340
this a run. And we can see that things work. We set

24
00:01:09,340 --> 00:01:12,150
x to 1. And we get back true, which is what we

25
00:01:12,150 --> 00:01:15,670
expected, we get x. And we can see that the value is one.

26
00:01:15,670 --> 00:01:18,760
We get y. The value is none, because y is not in the

27
00:01:18,760 --> 00:01:22,215
cache. And then we delete x and then try to get it. And

28
00:01:22,215 --> 00:01:25,010
we see that x is now none. Okay. So our basic cache is

29
00:01:25,010 --> 00:01:30,165
working. Good job on that. And let's move on to some more advanced mem-cache.
