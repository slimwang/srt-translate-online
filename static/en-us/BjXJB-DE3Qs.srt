1
00:00:00,370 --> 00:00:02,430
And I'll get us back to a known state.

2
00:00:02,430 --> 00:00:04,019
Well, there we go.

3
00:00:04,019 --> 00:00:07,550
Now, the next command that I want
to show you is print object.

4
00:00:07,550 --> 00:00:11,490
And print object displays a description
of an object that you specified.

5
00:00:11,490 --> 00:00:14,952
And the output that you'll get is
similar to what would happen if you used

6
00:00:14,952 --> 00:00:18,650
the expression command and
then use print LN, like we just saw.

7
00:00:18,650 --> 00:00:22,770
Now, the abbreviation for
print object can all be done with PO,

8
00:00:22,770 --> 00:00:25,670
instead of just P,
space, O, it's all PO.

9
00:00:25,670 --> 00:00:28,150
And we'll run this for the bugs array.

10
00:00:28,150 --> 00:00:30,530
And we can see that it is empty again.

11
00:00:30,530 --> 00:00:33,273
Now let's try running PO for self.

12
00:00:33,273 --> 00:00:36,746
And this time, LLDB does its best to
give us description, just like we saw

13
00:00:36,746 --> 00:00:39,950
earlier when we were implementing
printable and debug printable.

14
00:00:39,950 --> 00:00:43,779
But because those things are not
implemented, this is the best it can

15
00:00:43,779 --> 00:00:48,151
do so it gives us the type, breakpoint
bug view controller, and the address.

16
00:00:48,151 --> 00:00:51,687
Now if we were to implement
printable and debug printable,

17
00:00:51,687 --> 00:00:54,869
like we saw earlier,
then when we use the PO command,

18
00:00:54,869 --> 00:00:59,206
LLDB will choose the most specific
protocol and show that description.

19
00:00:59,206 --> 00:01:02,890
So, Debug printable is considered
more specific than printable.

20
00:01:02,890 --> 00:01:05,840
So if Debug printable was implemented,
it would show it.

21
00:01:05,840 --> 00:01:07,650
If printable is the only
thing implemented,

22
00:01:07,650 --> 00:01:10,740
then PO would just display
the printable description.

23
00:01:10,740 --> 00:01:12,950
So, we'll show that as
an example real quick.

24
00:01:12,950 --> 00:01:16,030
I'll stop, and
we'll go to the bottom of this file.

25
00:01:16,030 --> 00:01:19,120
And let's implement these
protocols in an extension.

26
00:01:30,827 --> 00:01:34,084
And now that we've implemented
both the Printable and

27
00:01:34,084 --> 00:01:38,060
DebugPrintable protocols,
let's try printing out self again.

28
00:01:38,060 --> 00:01:41,510
And we see that because debugDescription
is the more specific, or

29
00:01:41,510 --> 00:01:45,520
DebugPrintable is the more specific
protocol, that's what's used.

30
00:01:45,520 --> 00:01:47,620
So, hello from DebugPrintable.

31
00:01:47,620 --> 00:01:53,050
And I'll stop, and let's comment this
out, and only implement Printable.

32
00:01:53,050 --> 00:01:55,530
Let's bring back up the same situation.

33
00:01:57,890 --> 00:02:01,740
Now, if we PO self,
we get hello from Printable.

34
00:02:02,740 --> 00:02:05,660
So, that was pretty cool, but now I
really want to show off the flexibility

35
00:02:05,660 --> 00:02:07,570
of the command line interface.

36
00:02:07,570 --> 00:02:10,770
This next example's going to be
a little advanced, so don't worry if

37
00:02:10,770 --> 00:02:13,560
you don't follow everything
the first time I show it to you.

38
00:02:13,560 --> 00:02:16,720
We're going to use it again in
an example later in the lesson.

39
00:02:16,720 --> 00:02:20,960
So, to start, what I've done
is kind of set us up again.

40
00:02:20,960 --> 00:02:24,880
We're in the add bug to view, and
we have a breakpoint set that we've

41
00:02:24,880 --> 00:02:28,420
reached, and I've already allowed it to
run so that all these bugs were created,

42
00:02:28,420 --> 00:02:32,870
and then I've triggered it again by
tapping when the breakpoint was active.

43
00:02:32,870 --> 00:02:36,020
And the reason that I did that was
I wanted to be able to print out

44
00:02:36,020 --> 00:02:37,760
the bug object.

45
00:02:37,760 --> 00:02:39,700
And you can see all these
image views here, and

46
00:02:39,700 --> 00:02:41,960
we're going to use one
of these raw addresses.

47
00:02:41,960 --> 00:02:46,640
So, I'm going to copy this for
later use, and let's go ahead and

48
00:02:46,640 --> 00:02:47,720
clear this out.

49
00:02:47,720 --> 00:02:48,730
Make sure it's copied.

50
00:02:48,730 --> 00:02:50,230
Okay, there we go.

51
00:02:50,230 --> 00:02:53,880
So, we're going to start with
the expression command, but this time,

52
00:02:53,880 --> 00:02:58,390
we're going to use Swift's
unsafe Bitcast function.

53
00:02:58,390 --> 00:03:02,070
And the unsafe Bitcast function,
it's going to allow us to convert

54
00:03:02,070 --> 00:03:05,870
the raw address into an object that
we can actually interact with.

55
00:03:05,870 --> 00:03:08,650
And this might be really useful in cases
where you have the memory address for

56
00:03:08,650 --> 00:03:12,120
an object, but you're unable to
access its properties and values.

57
00:03:12,120 --> 00:03:13,430
So, let's see.

58
00:03:13,430 --> 00:03:15,600
Can I actually look at bugs?

59
00:03:15,600 --> 00:03:17,030
There's one of them.

60
00:03:17,030 --> 00:03:18,740
And yeah,
we can interact with some of it.

61
00:03:18,740 --> 00:03:20,730
But let's imagine that we couldn't.

62
00:03:20,730 --> 00:03:23,300
And there are cases where
this will be handy.

63
00:03:23,300 --> 00:03:24,900
So, here's how it can be used.

64
00:03:24,900 --> 00:03:29,260
The first argument is going
to be our raw address.

65
00:03:29,260 --> 00:03:33,610
And this is the raw address that we
saw earlier for one of our bugs,

66
00:03:33,610 --> 00:03:34,270
in the bugs array.

67
00:03:34,270 --> 00:03:38,890
And we know that this address
refers to a UIImageView,

68
00:03:38,890 --> 00:03:40,930
because that's what is
contained in the bugs array.

69
00:03:40,930 --> 00:03:44,270
And so, for the first argument
we have the raw address, and

70
00:03:44,270 --> 00:03:48,060
then in the second argument we
have the UIImageView.self),

71
00:03:48,060 --> 00:03:52,370
which is going to allow us to cast
the address into a UI image view object.

72
00:03:52,370 --> 00:03:53,830
And we'll hit enter.

73
00:03:53,830 --> 00:03:55,241
So boom, there we go.

74
00:03:55,241 --> 00:04:01,201
LLDB has just converted our raw address
into a UI image view object and

75
00:04:01,201 --> 00:04:06,590
it's even stored it into
a temporary variable called $R4.

76
00:04:06,590 --> 00:04:12,324
Now, if we wanted to instead use our
own variable name instead of the $R4,

77
00:04:12,324 --> 00:04:15,101
or whatever it ends up assigning it,

78
00:04:15,101 --> 00:04:20,310
we can instead run the same expression,
and we'll use let $bug1.

79
00:04:20,310 --> 00:04:25,623
You need to do use the $, that's
special for the console debugger here.

80
00:04:25,623 --> 00:04:29,964
Hit Enter, and now,
if we run the expression

81
00:04:29,964 --> 00:04:34,580
println with our variable, there we go.

82
00:04:34,580 --> 00:04:40,080
So, notice here the print output is
the exact same output that we would get

83
00:04:40,080 --> 00:04:47,760
if we print out bugs, or we scroll
up to the top, lot of bugs here.

84
00:04:47,760 --> 00:04:52,900
Here we go, so, for the first one,
I think it stops right there.

85
00:04:52,900 --> 00:04:57,830
There's our first UIImageView, and
this matches exactly the UI image

86
00:04:57,830 --> 00:05:01,210
view here that's now contained
in the variable above one.

87
00:05:01,210 --> 00:05:04,621
And I can even change bug one's values.

88
00:05:04,621 --> 00:05:09,216
So we'll run another expression, so

89
00:05:09,216 --> 00:05:13,970
we'll say $bug1.frame = CGRect.

90
00:05:13,970 --> 00:05:16,970
And let's print this guy back out.

91
00:05:16,970 --> 00:05:20,310
And there we can see that the frame
has now been updated to have X and

92
00:05:20,310 --> 00:05:23,090
Y of 0, and a width and height of 64.

93
00:05:23,090 --> 00:05:27,200
And because we know that bug one refers
to the same thing as the first bug in

94
00:05:27,200 --> 00:05:29,530
the array,
if we are to print out the bug's array,

95
00:05:29,530 --> 00:05:31,450
we should see the same thing.

96
00:05:31,450 --> 00:05:32,380
And there we go.

97
00:05:32,380 --> 00:05:36,210
So the frame for
the first bug, (0 0; 64 64).

98
00:05:36,210 --> 00:05:40,580
Now, again, don't worry if this example
is kind of hard to follow at first.

99
00:05:40,580 --> 00:05:43,360
We're going to demonstrate using
this again later in the lesson.
