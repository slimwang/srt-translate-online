1
00:00:00,000 --> 00:00:03,000
And the answer is you can. It must be 1100.

2
00:00:03,000 --> 00:00:09,000
The way to see that is if you look at the x values, there are three that match 0111.

3
00:00:09,000 --> 00:00:12,000
Those must correspond to the output where x = 0,

4
00:00:12,000 --> 00:00:16,000
because we know an AND gate has three outputs that have a value 0.

5
00:00:16,000 --> 00:00:20,000
And then there's one that has the value 1011

6
00:00:20,000 --> 00:00:24,000
that must correspond to the x value having the output 1,

7
00:00:24,000 --> 00:00:29,000
and that means the only way the output could be 1 is if both of these represent 1.

8
00:00:29,000 --> 00:00:32,000
That means we know the value of b1. That's this one.

9
00:00:32,000 --> 00:00:35,000
The value of b0 must be the other one, which is 1100.

10
00:00:35,000 --> 00:00:40,000
We can, in fact, deduce all the lines in the truth table from this pattern.

11
00:00:40,000 --> 00:00:42,000
So obviously this doesn't work.

12
00:00:42,000 --> 00:00:46,000
We're not hiding in the patterns that are inherent in the logic functions we're computing

13
00:00:46,000 --> 00:00:52,000
by replacing them with random numbers as we have to do something so this table is harder to see.

14
00:00:52,000 --> 00:00:55,000
And what we have to do is make it so the outputs are encrypted,

15
00:00:55,000 --> 00:01:00,000
so that we can't tell the values of the other entries in the truth table.

16
00:01:00,000 --> 00:01:03,000
We can only tell the value of the one that we actually evaluate

17
00:01:03,000 --> 99:59:59,999
and that hides whether it matches any of the other values.
