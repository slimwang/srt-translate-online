1
00:00:00,400 --> 00:00:02,850
Okay let me get back to where I was.

2
00:00:02,850 --> 00:00:07,730
Okay, so we declared the two variables, and then there's two print lines

3
00:00:07,730 --> 00:00:14,590
the first one >> Excuse me did, did the recorder correct the comments?

4
00:00:14,590 --> 00:00:17,920
To make, make note of the errors in the comments that,

5
00:00:17,920 --> 00:00:19,590
that >> Slash asterisk should our new standard coding as well.

6
00:00:19,590 --> 00:00:22,410
>> Yeah these easier being pointed out, that we should be,

7
00:00:22,410 --> 00:00:26,070
it's said that they're characters but they were declared as integers.

8
00:00:26,070 --> 00:00:28,323
>> For int next, it says next character is that it?

9
00:00:28,323 --> 00:00:29,402
>> Yeah. >> Put a line through.

10
00:00:29,402 --> 00:00:33,082
>> The implication is that you're confused about characters versus integers.

11
00:00:33,082 --> 00:00:36,018
>> Mm-hm, even though the representation was also signed.

12
00:00:36,018 --> 00:00:39,214
>> Okay so as I was saying there is two print statement,

13
00:00:39,214 --> 00:00:44,443
the first one prints to the user, enter a sentence ending with a period, and

14
00:00:44,443 --> 00:00:48,027
the second one says, follow each character buy a return.

15
00:00:48,027 --> 00:00:48,615
>> We have a typo.

16
00:00:48,615 --> 00:00:52,943
>> Yeah, I guess, buy should not really be buy, >> And

17
00:00:52,943 --> 00:00:55,201
also probably, follow, should be capitalized, right?

18
00:00:55,201 --> 00:00:56,696
I mean it's a separate sentence so

19
00:00:56,696 --> 00:00:59,127
you're trying to [COUGH] write it as a sentence.

20
00:00:59,127 --> 00:01:01,356
>> Or it should be all on one line, because you're,

21
00:01:01,356 --> 00:01:05,040
you're breaking at interest and it's ending with a period oh, okay, I see.

22
00:01:05,040 --> 00:01:06,855
>> But it also, it's interesting,

23
00:01:06,855 --> 00:01:10,547
Interest in it is ending with a period doesn't have a delimiter at

24
00:01:10,547 --> 00:01:14,817
the end where it's follow each character by a return does have a delimiter.

25
00:01:14,817 --> 00:01:16,281
>> Should that be, have a colon there?

26
00:01:16,281 --> 00:01:18,485
>> It seems like we're really getting stuck on minor details.

27
00:01:18,485 --> 00:01:21,305
>> I think so too, let's move on, let's move on back to Dr.

28
00:01:21,305 --> 00:01:22,523
Bug, please continue.

29
00:01:22,523 --> 00:01:26,105
>> So a character is, misspelled.

30
00:01:26,105 --> 00:01:27,946
>> It's charcter.

31
00:01:27,946 --> 00:01:31,374
>> Just making, I think it's making for bad user experience, we don't, we don't,

32
00:01:31,374 --> 00:01:33,519
you know >> Yeah, actually I think I was just copy and

33
00:01:33,519 --> 00:01:37,200
paste in here from someone elses code, but that's fine.

34
00:01:37,200 --> 00:01:38,510
Yeah, I think it's. [LAUGH] >> Is that what we do now?

35
00:01:38,510 --> 00:01:39,834
Is we copy, copy from other people's [CROSSTALK].

36
00:01:39,834 --> 00:01:41,195
>> Well, it's just this, you know?

37
00:01:41,195 --> 00:01:41,731
This was [CROSSTALK].

38
00:01:41,731 --> 00:01:43,700
>> Whose was it that we copied from?

39
00:01:43,700 --> 00:01:48,895
>> It was part of a log, I mean, I think it was actually Crazy Bob's code, but

40
00:01:48,895 --> 00:01:50,050
[LAUGH] I could be wrong.

41
00:01:50,050 --> 00:01:51,810
>> It wasn't my code because it's not in native.

42
00:01:51,810 --> 00:01:52,499
[LAUGH] >> Yeah. >> It was a native piece of code.

43
00:01:52,499 --> 00:01:55,651
>> In fact, if we could just back go back and revisit, 13 and

44
00:01:55,651 --> 00:01:59,120
14, you know, this initialization problem wouldn't even be

45
00:01:59,120 --> 00:02:02,232
occurring because you can't have uninitialized data in aid.

46
00:02:02,232 --> 00:02:04,080
So if we'd actually done what we said,

47
00:02:04,080 --> 00:02:07,166
what I said originally, we wouldn't be having these problems.

48
00:02:07,166 --> 00:02:09,479
>> You, you're absolutely right, I forgot about that.

49
00:02:10,800 --> 00:02:11,550
Crazy Bob bring,

50
00:02:11,550 --> 00:02:16,110
brings up some excellent points, about this lousy code we're looking at.

51
00:02:16,110 --> 00:02:19,470
>> I have to say, actually, I'm pretty sure that in Java, when you

52
00:02:19,470 --> 00:02:24,300
declare a lock of variable like this, it gets initialized automatically to zero.

53
00:02:24,300 --> 00:02:25,910
But I might be wrong.

54
00:02:25,910 --> 00:02:28,590
>> That's the instance variables that are initialized, and

55
00:02:28,590 --> 00:02:31,420
the local variables are not initialized.

56
00:02:31,420 --> 00:02:35,706
>> Okay, maybe I'm wrong then >> Even if there are automatically initialized,

57
00:02:35,706 --> 00:02:39,038
good code behavior would be that you actually initialize them so

58
00:02:39,038 --> 00:02:42,257
everybody doesn't have to remember whether it works or not.

59
00:02:42,257 --> 00:02:45,902
>> Well, just, you know, I was used to developing data, so that's reality.

60
00:02:45,902 --> 00:02:47,658
>> Yeah [LAUGH].

61
00:02:47,658 --> 00:02:49,321
>> Okay, let us continue Dr. Bug.
