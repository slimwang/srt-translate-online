1
00:00:00,220 --> 00:00:02,719
Now that users can log in to my system,

2
00:00:02,719 --> 00:00:05,860
I should make a way to protect
the resources they can access.

3
00:00:05,860 --> 00:00:09,570
For this example, let's assume there's
a resource exposed by this API that

4
00:00:09,570 --> 00:00:12,730
needs to be available
only to registered users.

5
00:00:12,730 --> 00:00:17,350
This resource is accessed at
the end point /protected_resource.

6
00:00:17,350 --> 00:00:18,570
To protect this resource,

7
00:00:18,570 --> 00:00:21,884
I'm going to use an extension
in Flask called Flask-HTTPAuth.

8
00:00:23,230 --> 00:00:27,230
Flask httpauth is a simple
extension that provides basic and

9
00:00:27,230 --> 00:00:30,930
digest http authentication for
Flask routes.

10
00:00:30,930 --> 00:00:32,740
With Flask httpauth,

11
00:00:32,740 --> 00:00:37,205
an end point is protected by adding
the auth.login_requried decerator to it.

12
00:00:37,205 --> 00:00:41,300
Flask.httpauth needs to be
given some more information,

13
00:00:41,300 --> 00:00:43,650
to know how to validate
user credentials,

14
00:00:43,650 --> 00:00:47,200
which is implemented through
the verify password call back.

15
00:00:47,200 --> 00:00:49,120
It is given a username and password and

16
00:00:49,120 --> 00:00:52,920
returns true if the combination
is valid and false if not.

17
00:00:52,920 --> 00:00:56,130
Flask HTTP off invokes
this callback function

18
00:00:56,130 --> 00:00:59,600
whenever it needs to validate
a username and password pair.

19
00:00:59,600 --> 00:01:02,540
This function simply finds
the user by their username,

20
00:01:02,540 --> 00:01:05,900
verifies the password using
the verify password method.

21
00:01:05,900 --> 00:01:08,640
And if the credentials are valid,
then the user has stored it in

22
00:01:08,640 --> 00:01:12,110
FLASK's G object, so
that the view function can use it.

23
00:01:12,110 --> 00:01:14,630
Let's send a request to my server now,
and

24
00:01:14,630 --> 00:01:18,330
first see what happens if I use
an incorrect username or password.

25
00:01:18,330 --> 00:01:19,680
I can't access the resource.

26
00:01:21,130 --> 00:01:22,630
But using the correct username and

27
00:01:22,630 --> 00:01:25,900
password, my request gets
the protected resource for the user.

28
00:01:27,290 --> 00:01:30,170
Check out the instructor notes to see
the code implemented in this video.
