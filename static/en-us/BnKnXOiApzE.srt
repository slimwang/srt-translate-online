1
00:00:00,200 --> 00:00:03,360
So at this point, once the kernel has

2
00:00:03,360 --> 00:00:06,570
doctored this client thread to start executing the

3
00:00:06,570 --> 00:00:09,950
server procedure, it can transfer control to the

4
00:00:09,950 --> 00:00:12,960
server. So it transfers the control to the

5
00:00:12,960 --> 00:00:16,490
server, and so now, now we're starting to

6
00:00:16,490 --> 00:00:19,930
execute the server procedure in the server's address

7
00:00:19,930 --> 00:00:22,615
space. And in the server's address space because

8
00:00:22,615 --> 00:00:25,230
A-stack has been mapped in, this is also available

9
00:00:25,230 --> 00:00:29,680
to the server domain. And the first thing

10
00:00:29,680 --> 00:00:32,650
that's going to happen in the server domain is

11
00:00:32,650 --> 00:00:35,440
our server stub is going to get into action

12
00:00:35,440 --> 00:00:38,160
and take the arguments that are sitting in

13
00:00:38,160 --> 00:00:42,230
the A-stack, and copy them into the stack

14
00:00:42,230 --> 00:00:44,750
that the server procedure's going to use. Remember I

15
00:00:44,750 --> 00:00:47,410
told you the kernel provides a special stack

16
00:00:47,410 --> 00:00:50,680
for the purpose an E- stack, execution stack and

17
00:00:50,680 --> 00:00:53,666
that is a stack into which the client,

18
00:00:53,666 --> 00:00:56,500
the server stub is going to copy the A-stack

19
00:00:56,500 --> 00:00:59,800
argument into that E-stack and then at that

20
00:00:59,800 --> 00:01:03,440
point the procedure foo is ready start executing.

21
00:01:03,440 --> 00:01:06,420
So at this point, procedure foo is like

22
00:01:06,420 --> 00:01:09,090
any normal procedure, it finds the information it

23
00:01:09,090 --> 00:01:12,060
wants on the stack, it does its job.

24
00:01:12,060 --> 00:01:16,170
Once it is done with executing this procedure,

25
00:01:16,170 --> 00:01:20,280
it has to pass back the results to the client and what is going to happen is

26
00:01:20,280 --> 00:01:23,700
that the server stub is going to take the results

27
00:01:23,700 --> 00:01:27,225
of this procedure execution and copy them into the

28
00:01:27,225 --> 00:01:30,130
A-stack. And of course, all of this action is

29
00:01:30,130 --> 00:01:33,830
happening in the server domain without any mediation by

30
00:01:33,830 --> 00:01:38,150
the kernel. So once the server stub has copied

31
00:01:38,150 --> 00:01:41,410
the results into the A-stack, at that point it

32
00:01:41,410 --> 00:01:44,270
can trap into the kernel, and this is

33
00:01:44,270 --> 00:01:47,740
the vehicle by which the kernel can transfer control

34
00:01:47,740 --> 00:01:50,090
back to the client so it, it does a

35
00:01:50,090 --> 00:01:53,850
return trap. Now, when this return trap happens, there

36
00:01:53,850 --> 00:01:56,980
is no need for the kernel to validate this

37
00:01:56,980 --> 00:02:00,930
trap as opposed to the call trap, because the

38
00:02:00,930 --> 00:02:03,040
up call was made by the kernel in the

39
00:02:03,040 --> 00:02:07,350
very first place, and therefore it is expecting this

40
00:02:07,350 --> 00:02:09,870
return trap to happen, and so the kernel doesn't have

41
00:02:09,870 --> 00:02:13,230
to do any special validation for this. And at this point,

42
00:02:13,230 --> 00:02:15,630
what the kernel is going to do, is it is basically

43
00:02:15,630 --> 00:02:19,600
going to re-doctor the thread to start executing the client address

44
00:02:19,600 --> 00:02:23,310
space. So basically it knows the return address where it has

45
00:02:23,310 --> 00:02:26,660
to go back in order to start executing the client code,

46
00:02:26,660 --> 00:02:29,170
and it knows the client's address space so it's going to

47
00:02:29,170 --> 00:02:32,760
redoctor the thread to start executing in the client address space.

48
00:02:32,760 --> 00:02:36,440
So when the client thread is rescheduled to

49
00:02:36,440 --> 00:02:39,630
execute, at that point, the client stub gets

50
00:02:39,630 --> 00:02:42,650
back into action, copies the results that are

51
00:02:42,650 --> 00:02:46,310
sitting in the A-stack into the stack of the

52
00:02:46,310 --> 00:02:49,130
client, and once it has done that, the

53
00:02:49,130 --> 00:02:53,110
client thread can continue on with its normal execution.

54
00:02:53,110 --> 00:02:54,930
So that's what is going on. And the

55
00:02:54,930 --> 00:02:58,040
important point that you notice is that the copying

56
00:02:58,040 --> 00:03:00,000
through the kernel that used to happen

57
00:03:00,000 --> 00:03:02,300
is now completely eliminated, because your arguments are

58
00:03:02,300 --> 00:03:05,770
passed through the A-stack into the server. And

59
00:03:05,770 --> 00:03:08,840
similarly the result is passed through the A-stack

60
00:03:08,840 --> 00:03:11,940
into the client. So let's analyze what we've

61
00:03:11,940 --> 00:03:16,110
accomplished in terms of reducing the cost of

62
00:03:16,110 --> 00:03:18,820
the RPC in the actual calls that are

63
00:03:18,820 --> 00:03:20,570
being made between the client and the server.
