1
00:00:00,270 --> 00:00:03,650
First I'll look at what happens if I
add two series with the same index.

2
00:00:03,650 --> 00:00:08,250
So here are both series 1 and
series 2 have the index a, b, c, d.

3
00:00:09,690 --> 00:00:12,980
When I add these series together,
the results aren't surprising.

4
00:00:12,980 --> 00:00:15,500
The first element from each
series is added together,

5
00:00:15,500 --> 00:00:19,000
the second element from each series
is added together and so on.

6
00:00:19,000 --> 00:00:22,330
Now we'll take a look at a case where
the two series have the same indexes,

7
00:00:22,330 --> 00:00:24,828
but the values are in a different order.

8
00:00:24,828 --> 00:00:28,140
So series 1 still has the index a,
b, c, d, but

9
00:00:28,140 --> 00:00:30,390
series 2 now has the index b, d, a, c.

10
00:00:31,490 --> 00:00:33,480
Now when I add these
two series together,

11
00:00:33,480 --> 00:00:38,010
I can see that the matching up has been
done by index rather than by position.

12
00:00:38,010 --> 00:00:41,470
Instead of adding the first two
values together, both values for

13
00:00:41,470 --> 00:00:44,260
index a have been added together,
both values for

14
00:00:44,260 --> 00:00:46,300
index b have been added together,
and so on.

15
00:00:46,300 --> 00:00:50,060
Now we'll take a look at two series
where the indexes don't have exactly

16
00:00:50,060 --> 00:00:51,480
the same values.

17
00:00:51,480 --> 00:00:56,400
Here, both series 1 and series 2 have c
and d, but only series 1 has a and b,

18
00:00:56,400 --> 00:00:58,590
and only series 2 has e and f.

19
00:00:58,590 --> 00:01:02,320
When I add these two series,
I see that c and d,

20
00:01:02,320 --> 00:01:05,870
the index values in common,
have been matched up.

21
00:01:05,870 --> 00:01:09,930
For index values that were only
present in one series, a, b, e and

22
00:01:09,930 --> 00:01:14,070
f, NaN is the result,
which stands for not a number.

23
00:01:14,070 --> 00:01:15,800
Given that, I have a hypothesis for

24
00:01:15,800 --> 00:01:19,330
what will happen when I add series with
indexes that don't overlap at all.

25
00:01:19,330 --> 00:01:21,100
But I'll still try it and see.

26
00:01:21,100 --> 00:01:25,040
So in this case,
series 1 has index values a, b, c and d.

27
00:01:25,040 --> 00:01:27,030
And series 2 has index e, f, g, and h.

28
00:01:28,150 --> 00:01:29,590
Sure enough, when I add them together,

29
00:01:29,590 --> 00:01:33,730
I get all the index values from both
series and value in each case is NaN.

30
00:01:33,730 --> 00:01:37,840
By the way, other vectorized operations
with series work the same way.

31
00:01:37,840 --> 00:01:41,050
Values are matched up based
on index not position.

32
00:01:41,050 --> 00:01:43,330
And if an index value is
present in one series but

33
00:01:43,330 --> 00:01:46,380
not another, the resulting value
will be NaN, for not a number.
