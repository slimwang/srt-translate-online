1
00:00:00,100 --> 00:00:05,566
If you haven't heard of regular expressions or used them before, then this review is for you.

2
00:00:05,567 --> 00:00:09,232
If you have, feel free to skip to the next video.

3
00:00:09,233 --> 00:00:15,332
Let's start by reviewing what you know about finding a substring within a string.

4
00:00:15,333 --> 00:00:22,199
Suppose we have a string called S in Python. Now, you may know that we can find a substring within it--

5
00:00:22,200 --> 00:00:34,299
For example, s.find of 'word' will return the position in which the string 'word' occurs within s and return that index if it exists.

6
00:00:34,300 --> 00:00:41,232
So in fact, where it does exist, so it will return that index, 0-1-2-3-4 and so on.

7
00:00:41,233 --> 00:00:51,899
It turns out the answer is 21. And if it didn't exist at all, then by convention, it would return -1 to indicate failure,

8
00:00:51,900 --> 00:00:54,866
because -1 is not a valid index.

9
00:00:54,867 --> 00:00:59,466
But suppose we aren't looking for exactly one individual word.

10
00:00:59,467 --> 00:01:02,366
Suppose there's a whole family of words that we want to find.

11
00:01:02,367 --> 00:01:07,732
Take a crazy example: Let's say we're interested in the family of words used by sheep. There's a sheep.

12
00:01:07,733 --> 00:01:16,599
And what do they say? Well, the sheep can say, "Baa!" or "baaaa!" and so on.

13
00:01:16,600 --> 00:01:27,032
Let's say we're interested in the family of words that have a B and an A and then any number of more As, and then an exclamation point.

14
00:01:27,033 --> 00:01:35,266
We can't specify that as a single word for "find" or even as a finite set of words, because there's an infinite set of words.

15
00:01:35,267 --> 00:01:43,132
And so what a regular expression is is a way of describing that infinite set of words in an interface that allows you to find them.

16
00:01:43,133 --> 00:01:50,599
So a regular expression, which we'll also call a pattern, is a way of describing this infinite set of possible words.

17
00:01:50,600 --> 00:01:58,132
We'll describe it as a string, and a string starts with a B and is necessarily followed by an A,

18
00:01:58,133 --> 00:02:06,832
and then followed by any number of subsequent As, and for that we'll use a special notation, A*.

19
00:02:06,833 --> 00:02:11,199
The asterisk means, "Any number of the preceding character."

20
00:02:11,200 --> 00:02:14,966
And then it has to end in an exclamation point. So that's there.

21
00:02:14,967 --> 00:02:21,732
So the asterisk is a special character. The exclamation point, the As and the Bs are normal characters.

22
00:02:21,733 --> 00:02:32,600
And this regular expression or pattern specifies this infinite language of "baa"s with any number of As more than one.
