1
00:00:00,000 --> 00:00:05,000
The answer is the last two could work. Let's go through the other answers.

2
00:00:05,000 --> 00:00:09,000
The first one, we're encrypting using a1 the value of X0

3
00:00:09,000 --> 00:00:12,000
concatenating that with encrypting X0 using b0.

4
00:00:12,000 --> 00:00:19,000
This means if the evaluator here is either a1 or b0, they would be able to learn the value of X0.

5
00:00:19,000 --> 00:00:23,000
That would enable the evaluator to decrypt more than one entry in this truth table

6
00:00:23,000 --> 00:00:26,000
if the other entries were encrypted the same way.

7
00:00:26,000 --> 00:00:29,000
The second possibility has a similar problem.

8
00:00:29,000 --> 00:00:32,000
If the evaluator knows a1, they can obtain the value of X0,

9
00:00:32,000 --> 00:00:37,000
that's not secure because they can decrypt two outputs in this table.

10
00:00:37,000 --> 00:00:42,000
The other two make it so that obtaining X0 depends on both keys.

11
00:00:42,000 --> 00:00:45,000
It depends on knowing both a1 and b0.

12
00:00:45,000 --> 00:00:51,000
An evaluator who knows only one of those can't determine the key for this encryption

13
00:00:51,000 --> 00:00:54,000
since this is the XOR of those two values and it depends on both of them.

14
00:00:54,000 --> 00:00:56,000
They also couldn't do both of these.

15
00:00:56,000 --> 00:01:00,000
They could do the first one if they know a1, but they just get an encrypted value there,

16
00:01:00,000 --> 00:01:05,000
and they couldn't decrypt the second one to get the value of X0--so, either of these can work.

17
00:01:05,000 --> 00:01:09,000
This first one is going to be more efficient because it only involves one encryption.

18
00:01:09,000 --> 99:59:59,999
There might be other ways to combine the keys that would be better and provide more security.
