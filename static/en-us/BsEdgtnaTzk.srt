1
00:00:00,400 --> 00:00:04,160
Once you've stored data in an array,
you then want to be able to access and

2
00:00:04,160 --> 00:00:07,459
manipulate each element in the array
without having to operate on

3
00:00:07,459 --> 00:00:09,660
each element one at a time.

4
00:00:09,660 --> 00:00:12,960
For instance, if this was our
original donuts array and

5
00:00:12,960 --> 00:00:15,800
we decided to make all of
the same donut types but

6
00:00:15,800 --> 00:00:19,350
sell them as donut holes instead,
we could write the following code.

7
00:00:19,350 --> 00:00:23,420
This code seems simple enough but
it's actually pretty horrible.

8
00:00:23,420 --> 00:00:27,600
It's repetitive and not scalable for
large number of donuts.

9
00:00:27,600 --> 00:00:30,750
But the good news is,
you don't have to do this.

10
00:00:30,750 --> 00:00:33,350
You have a better tool that
you've seen before, loops.

11
00:00:34,369 --> 00:00:37,449
Here's a for loop that we can use
to loop over the array of donuts.

12
00:00:38,469 --> 00:00:39,890
To loop over the array,

13
00:00:39,890 --> 00:00:42,960
you can use a variable to
represent the index in the array.

14
00:00:42,960 --> 00:00:46,390
And then loop over that index to
perform whatever manipulations

15
00:00:46,390 --> 00:00:47,950
your heart desires.

16
00:00:47,950 --> 00:00:48,958
in this example,

17
00:00:48,957 --> 00:00:52,597
the variable i is being used to
represent the index of the array.

18
00:00:52,597 --> 00:00:57,875
The loop keeps going until just
before donuts.Length is reached and

19
00:00:57,875 --> 00:01:01,973
then donuts i is used to
change the names in the array.

20
00:01:01,973 --> 00:01:05,918
So, this is pretty cool but
since we're working with an array,

21
00:01:05,918 --> 00:01:08,926
we have something even
better that we could use.

22
00:01:08,926 --> 00:01:13,510
Arrays actually have a set of methods
like can be used when looping over them.

23
00:01:13,510 --> 00:01:16,989
Here's an example of
a method called forEach.

24
00:01:16,989 --> 00:01:20,253
forEach can be used to loop over
the elements and the array.

25
00:01:20,253 --> 00:01:24,438
myAwesomeFunction is just
the function that you defined and

26
00:01:24,438 --> 00:01:29,459
that will be used to perform some
operation on each element in the array.

27
00:01:29,459 --> 00:01:34,559
Note that myAwesomeFunction has three
parameters, element, which refers

28
00:01:34,560 --> 00:01:39,420
to the actual value of the element
in the array, not the array index.

29
00:01:39,420 --> 00:01:43,780
For the array index, we have
a different parameter called index,

30
00:01:43,780 --> 00:01:46,439
which refers to the elements index.

31
00:01:46,439 --> 00:01:49,667
And finally array, which is just
the array that you started with.

32
00:01:49,668 --> 00:01:50,282
[BLANK_AUDIO]

33
00:01:50,281 --> 00:01:53,719
Here's an example of for
each with the donuts array from before.

34
00:01:53,719 --> 00:01:56,980
See how the printDonuts function is
passed into the for each method?

35
00:01:56,980 --> 00:02:01,300
The for each method will execute that
function for each element in the array.

36
00:02:01,299 --> 00:02:05,489
You can also see that the printDonuts
function has only one parameter,

37
00:02:05,489 --> 00:02:09,888
donut, which corresponds to each
donut element in the array.

38
00:02:09,889 --> 00:02:11,990
There's no need for
index variables here or

39
00:02:11,990 --> 00:02:15,590
the array parameter so,
we're going to leave those out.

40
00:02:15,590 --> 00:02:17,780
This code is looking
pretty good right now but

41
00:02:17,780 --> 00:02:19,710
there's one more thing we can do.

42
00:02:19,710 --> 00:02:23,570
Since we know that this printDonuts
function is never really going to be use

43
00:02:23,569 --> 00:02:24,939
anywhere else in our code,

44
00:02:24,939 --> 00:02:29,419
we could define it as an inline
function expression like this.

45
00:02:29,419 --> 00:02:30,759
See, much cleaner.

