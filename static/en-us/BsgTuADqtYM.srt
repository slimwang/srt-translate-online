1
00:00:00,340 --> 00:00:02,960
Most of you have probably seen
switch statements before.

2
00:00:02,960 --> 00:00:06,010
They're used in Java,
C based languages, Ruby.

3
00:00:06,010 --> 00:00:09,820
But they are arguably less
intuitive than if else statements.

4
00:00:09,820 --> 00:00:11,830
You'll be seeing a lot of
them in Swift though, and

5
00:00:11,830 --> 00:00:14,570
hopefully come to appreciate
their conciseness.

6
00:00:14,570 --> 00:00:18,210
Switch statements are great when you're
trying to assess multiple conditions.

7
00:00:18,210 --> 00:00:21,970
Especially when you're conditioning on
multiple values of a given variable.

8
00:00:21,970 --> 00:00:23,860
Here's an example of
an if else statement,

9
00:00:23,860 --> 00:00:26,600
that might be better written
as a switch statement.

10
00:00:26,600 --> 00:00:29,440
It's a statement about the years
of the Chinese Zodiac.

11
00:00:29,440 --> 00:00:32,280
You can see that even though I'm
just looking at a few values that

12
00:00:32,280 --> 00:00:34,320
match the years of the monkey and
the years of the goat,

13
00:00:34,320 --> 00:00:37,340
my statement is already
getting a bit cumbersome.

14
00:00:38,660 --> 00:00:42,140
If we write this as a switch
statement it's easier to manage.

15
00:00:42,140 --> 00:00:46,170
Switch statements take the form switch,
then a type name, the type whose

16
00:00:46,170 --> 00:00:51,680
value you're conditioning on, case,
the first value possible for this type,

17
00:00:51,680 --> 00:00:55,870
colon, then the statement that'll
be executed if this case is true.

18
00:00:55,870 --> 00:00:57,240
Note that you can combine two or

19
00:00:57,240 --> 00:01:01,060
more values into the same case,
as in this third case.

20
00:01:01,060 --> 00:01:03,540
At the end of the statement
comes a default case.

21
00:01:03,540 --> 00:01:07,220
This last statement is executed if
none of the other cases are true.

22
00:01:07,220 --> 00:01:10,890
It's important to include this default
case, because a switch statement must

23
00:01:10,890 --> 00:01:13,910
account for
every possible value of a given type.

24
00:01:13,910 --> 00:01:16,760
Every value must match
at least one case.

25
00:01:16,760 --> 00:01:19,060
So for our Chinese zodiac example,

26
00:01:19,060 --> 00:01:22,768
you can see that the statement switches
on the value of the variable birth year.

27
00:01:22,768 --> 00:01:24,140
If birth year has a value of 1992,
1980, or 1968,

28
00:01:24,140 --> 00:01:28,160
this print statement is executed.

29
00:01:28,160 --> 00:01:30,970
You were born in the year of the monkey.

30
00:01:30,970 --> 00:01:33,350
If birth year has a value of 1991,
1979, or 1967,

31
00:01:33,350 --> 00:01:38,680
the second print statement is executed.

32
00:01:38,680 --> 00:01:40,770
So let's change birth year to 1991.

33
00:01:40,770 --> 00:01:46,110
And we can see you were born
in the year of the goat.

34
00:01:46,110 --> 00:01:49,610
And if the value of birth year
doesn't match any of these six values,

35
00:01:49,610 --> 00:01:51,505
the default statement is executed.

36
00:01:51,505 --> 00:01:56,045
So if this was 1993,
the default would be executed.

37
00:01:57,895 --> 00:01:59,845
Let's scroll down and
look at another example.

38
00:02:02,555 --> 00:02:05,100
Here's a program that
depicts the visible spectrum.

39
00:02:05,100 --> 00:02:06,570
It sets a variable, called color,

40
00:02:06,570 --> 00:02:09,970
based on the value of a variable
representing light wavelength.

41
00:02:09,970 --> 00:02:11,850
Here we can see the ellipsis again.

42
00:02:11,850 --> 00:02:14,610
Remember that in Swift this
is the range operator.

43
00:02:14,610 --> 00:02:17,350
So these values represent ranges
of wavelength within which

44
00:02:17,350 --> 00:02:18,910
certain colors fall.

45
00:02:18,910 --> 00:02:21,630
If we alter the value of
the wavelength variable, we can see

46
00:02:21,630 --> 00:02:24,690
different values being assigned to
the color variable in the sidebar.

47
00:02:25,860 --> 00:02:28,910
Notice that the value of wavelength
doesn't have to match the specified

48
00:02:28,910 --> 00:02:31,600
range, it just has to fall within it.

49
00:02:31,600 --> 00:02:34,500
One aspect that distinguishes
switch statements in Swift,

50
00:02:34,500 --> 00:02:37,280
from switch statements in C for example,

51
00:02:37,280 --> 00:02:41,550
is that the flow of control does not
fall through from one case to the next.

52
00:02:41,550 --> 00:02:43,730
What do I mean by fall through?

53
00:02:43,730 --> 00:02:46,890
Well, imagine moving through
the switch statement, and

54
00:02:46,890 --> 00:02:49,070
checking each case in turn.

55
00:02:49,070 --> 00:02:51,670
What should happen when
a condition is met?

56
00:02:51,670 --> 00:02:54,540
Should execution of the statement stop,
or

57
00:02:54,540 --> 00:02:56,950
move on to evaluate
the rest of the cases?

58
00:02:56,950 --> 00:03:01,430
To fall through is to continue
to evaluate the remaining cases.

59
00:03:01,430 --> 00:03:05,310
In Swift, if the conditions of one
case are met, the statement is done.

60
00:03:06,470 --> 00:03:09,180
Let's look a little closer at what
happens when switch statements don't

61
00:03:09,180 --> 00:03:10,620
fall through.

62
00:03:10,620 --> 00:03:12,970
This example switch is on temperature.

63
00:03:12,970 --> 00:03:17,170
I live in California, so I'm pretty
much a wimp when it comes to the cold.

64
00:03:17,170 --> 00:03:22,130
Here you can see that 55 degrees appears
in both the first and the second case.

65
00:03:22,130 --> 00:03:23,820
So what will be the output?

66
00:03:23,820 --> 00:03:27,210
When the temperature's 55
the console prints out brrr, and

67
00:03:27,210 --> 00:03:29,700
then it's finished
evaluating the statement.

68
00:03:29,700 --> 00:03:30,510
It's done.

69
00:03:30,510 --> 00:03:34,800
The second case is never evaluated, the
console never prints out comfortable.

70
00:03:34,800 --> 00:03:37,170
Even though 55 does
match that second case.

71
00:03:38,640 --> 00:03:40,190
So what if I left a statement out?

72
00:03:40,190 --> 00:03:41,870
What would happen?

73
00:03:41,870 --> 00:03:42,390
Let's find out.

74
00:03:43,760 --> 00:03:45,450
What if I left out this statement?

75
00:03:47,140 --> 00:03:48,150
Okay, we get an error.

76
00:03:48,150 --> 00:03:49,150
What does it say?

77
00:03:49,150 --> 00:03:53,080
Case label in a switch should have
at least one executable statement.

78
00:03:53,080 --> 00:03:56,820
Every case needs an accompanying
statement, because with no fall through,

79
00:03:56,820 --> 00:04:00,700
if a case matches, the program needs
to be able to execute a statement and

80
00:04:00,700 --> 00:04:01,200
then be done.

81
00:04:02,750 --> 00:04:04,700
That's all for now on control flow.

82
00:04:04,700 --> 00:04:08,490
Be sure to complete the exercises to get
lots of practice with for in loops and

83
00:04:08,490 --> 00:04:09,690
switch statements.

84
00:04:09,690 --> 00:04:12,040
And stay tuned for
the next lesson on functions.
