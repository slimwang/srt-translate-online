1
00:00:00,410 --> 00:00:02,140
Let me show you something cool.

2
00:00:02,140 --> 00:00:05,800
In Chrome tab tools we can easily open up the source code for a website.

3
00:00:05,800 --> 00:00:09,675
All we need to do is open up DevTools which I will be doing by Cmd+Option+I.

4
00:00:11,120 --> 00:00:12,490
And then we'll go to the sources pane.

5
00:00:14,910 --> 00:00:16,059
Here, in sources,

6
00:00:16,059 --> 00:00:20,010
we can see all of the source code that led to the website we see behind us.

7
00:00:20,010 --> 00:00:24,230
So Index.html should look pretty familiar and we can open up javascripts and

8
00:00:24,230 --> 00:00:28,550
we can see helper.js, jquery and resumebuilder.js.

9
00:00:28,550 --> 00:00:31,020
Let's open up helper.js.

10
00:00:31,020 --> 00:00:31,840
Over here we can see it.

11
00:00:31,840 --> 00:00:36,610
Lets give ourselves a little more room, and I'm going to scroll down.

12
00:00:36,610 --> 00:00:38,840
Inside helperjs, we've got all of the strings,

13
00:00:38,840 --> 00:00:41,840
containing the html we want to add to the page.

14
00:00:41,840 --> 00:00:43,680
And we can find some functions down at the bottom.

15
00:00:44,910 --> 00:00:48,010
This job script down here is actually creating the map that we see on the page,

16
00:00:48,010 --> 00:00:49,920
but there'll be more on that in a little bit.

17
00:00:49,920 --> 00:00:52,640
For right now, let's pay attention to this line right here.

18
00:00:53,990 --> 00:00:56,460
Inside this function called locationFinder,

19
00:00:56,460 --> 00:00:59,029
we see this statement that says return locations.

20
00:01:00,060 --> 00:01:01,830
We've seen this return keyword a few times so

21
00:01:01,830 --> 00:01:04,459
far, but we haven't really delved into it's purpose yet.

22
00:01:05,620 --> 00:01:06,900
It's called a return statement, and

23
00:01:06,900 --> 00:01:10,230
its purpose is to make the function give back a value.

24
00:01:10,230 --> 00:01:11,880
>> I think I know what you're getting at.

25
00:01:11,880 --> 00:01:13,660
Won't you explain it a bit more.

26
00:01:13,660 --> 00:01:15,640
>> Well, remember console.log?

27
00:01:15,640 --> 00:01:19,080
It doesn't return anything, which means if we were to create a new variable,

28
00:01:19,080 --> 00:01:20,540
like this.

29
00:01:20,540 --> 00:01:25,740
Var hello equals console dot log hello will get undefined when we try to run it.

30
00:01:25,740 --> 00:01:28,320
We wee that console dot log worked and

31
00:01:28,320 --> 00:01:32,190
printed hello, but then we see this undefined below it.

32
00:01:32,190 --> 00:01:35,270
If we try to examine the variable later by just typing out hello and

33
00:01:35,270 --> 00:01:38,340
pressing enter, we see undefined.

34
00:01:38,340 --> 00:01:40,900
That's because console dot log didn't return anything,

35
00:01:40,900 --> 00:01:42,019
it didn't give anything back.

36
00:01:43,070 --> 00:01:46,230
However, most functions actually do return values.

37
00:01:46,230 --> 00:01:48,340
>> Like a lot of string methods?

38
00:01:48,340 --> 00:01:50,770
>> Yeah, let's look at string dot split.

39
00:01:50,770 --> 00:01:52,790
First we'll create a string like this one.

40
00:01:52,790 --> 00:01:54,660
I've created a string called myString and

41
00:01:54,660 --> 00:01:56,720
set it equal to, This is my favorite string!

42
00:01:56,720 --> 00:02:01,080
Then we are going to go ahead and separate the string on spaces.

43
00:02:01,080 --> 00:02:03,800
Meaning that we'll get each word by itself.

44
00:02:03,800 --> 00:02:05,290
Split works like so.

45
00:02:05,290 --> 00:02:06,690
It's going to act on the string here.

46
00:02:06,690 --> 00:02:09,204
And it's going to separate it based on the parameter here.

47
00:02:09,204 --> 00:02:12,009
This parameter is just a single space so

48
00:02:12,009 --> 00:02:16,420
we should get an array of the words from myString.

49
00:02:16,420 --> 00:02:19,810
Let's go ahead and save it to the variable myArray and press enter.

50
00:02:19,810 --> 00:02:24,460
Okay, and when we try to access myArray, we see and array of strings.

51
00:02:24,460 --> 00:02:26,440
This, is, my, favorite, string.

52
00:02:26,440 --> 00:02:28,160
Each of the words from myString before.

53
00:02:29,180 --> 00:02:30,360
In other words,

54
00:02:30,360 --> 00:02:35,010
split returned an array of strings which is now equal to myArray.

55
00:02:35,010 --> 00:02:35,860
>> Oh, I see!

56
00:02:35,860 --> 00:02:38,610
When we write functions that we want to turn into a value,

57
00:02:38,610 --> 00:02:40,670
they must give us back a value.

58
00:02:40,670 --> 00:02:43,370
Looking at this function as a whole.

59
00:02:43,370 --> 00:02:45,580
The parameter is the input.

60
00:02:45,580 --> 00:02:50,770
The function does something using that parameter on the actual string and

61
00:02:50,770 --> 00:02:52,340
then it gives us some sort of value.

62
00:02:53,800 --> 00:02:57,210
>> Let's think about the resumes j's on data and all the location in it.

63
00:02:57,210 --> 00:03:02,520
For this quiz I want you to write a function called locationizer.

64
00:03:02,520 --> 00:03:04,830
It's going to take in the work object.

65
00:03:04,830 --> 00:03:10,500
Locationizer should return an array of the locations in your work object.

66
00:03:10,500 --> 00:03:13,470
Remember work contains all the jobs that you've had in the past and

67
00:03:13,470 --> 00:03:15,810
each one of which should have a location associated with it.

68
00:03:16,820 --> 00:03:19,860
We want you to return an array of those locations.

69
00:03:19,860 --> 00:03:23,310
You might find it's helpful to use the array.push method which

70
00:03:23,310 --> 00:03:26,120
is going to add values to the end of the array.

71
00:03:26,120 --> 00:03:26,920
When you get to the quiz,

72
00:03:26,920 --> 00:03:29,850
you'll see a sample json that your code will iterate through.

73
00:03:29,850 --> 00:03:30,350
Good luck.
