1
00:00:00,430 --> 00:00:04,120
For the grand finale,
we finally come to closures.

2
00:00:04,120 --> 00:00:07,820
Closures are similar to blocks in
Objective C, or lambdas as in Python,

3
00:00:07,820 --> 00:00:09,140
Java and Ruby.

4
00:00:09,140 --> 00:00:12,210
Closures, like functions,
are self-contained blocks of code.

5
00:00:13,400 --> 00:00:16,750
So what's the difference between
a closure and a function?

6
00:00:16,750 --> 00:00:18,390
Well, global functions and

7
00:00:18,390 --> 00:00:21,540
nested functions, which we didn't
have a chance to talk about, but

8
00:00:21,540 --> 00:00:25,140
if you're curious, follow the link
in the instructor's notes.

9
00:00:25,140 --> 00:00:28,490
Anyway, global functions and
nested functions are closures.

10
00:00:28,490 --> 00:00:31,860
But most of the time when a person
refers to a closure in Swift,

11
00:00:31,860 --> 00:00:34,360
they're referring to
a closure expression.

12
00:00:34,360 --> 00:00:37,750
In this lesson, we'll be
focusing on closure expressions.

13
00:00:37,750 --> 00:00:39,100
So what's a closure expression?

14
00:00:39,100 --> 00:00:43,770
A closure expression is an unnamed
self-contained block of code

15
00:00:43,770 --> 00:00:45,960
that can be passed as
an argument to a function.

16
00:00:46,990 --> 00:00:49,550
Closure expressions are unique
in that they're unnamed.

17
00:00:50,840 --> 00:00:54,200
Okay, but
what are closure expressions good for?

18
00:00:54,200 --> 00:00:57,660
Well, this ability to pass
a block of code to a function

19
00:00:57,660 --> 00:01:02,080
makes it easy to specify an action to
be executed sometime in the future.

20
00:01:02,080 --> 00:01:03,450
Let's look at a couple examples.
