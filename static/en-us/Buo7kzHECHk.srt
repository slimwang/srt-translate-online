1
00:00:00,680 --> 00:00:04,090
The simplicity of hitting run and having your app appear on an emulator,

2
00:00:04,090 --> 00:00:08,335
hides a lot of complexity. Remember that Android is a full software stack.

3
00:00:08,335 --> 00:00:12,190
Adspace is a Linux Kernel,

4
00:00:12,190 --> 00:00:16,329
which handles low level tasks like hardware fibers and panel management.

5
00:00:16,329 --> 00:00:20,757
On top of that, are some core C and C plus plus libraries like Libsc and

6
00:00:20,757 --> 00:00:25,920
SQLite and the Android Runtime. That includes cool Android libraries and

7
00:00:25,920 --> 00:00:31,240
the Android virtual machines, Dalvik or more recently ART. Your apps run

8
00:00:31,240 --> 00:00:36,000
within its own instance of the VM using the classes and services provided here

9
00:00:36,000 --> 00:00:40,570
in the application framework. On top of that, sits the application layer,

10
00:00:40,570 --> 00:00:44,970
which includes your app and every other app that's installed on the device. So,

11
00:00:44,970 --> 00:00:48,800
when you hit Run in Android Studio, the first thing that happens is your code

12
00:00:48,800 --> 00:00:53,320
gets compiled into byte code that can be run in the Android Virtual Machine.

13
00:00:53,320 --> 00:00:58,030
That then gets installed onto the device. In Android Studio,

14
00:00:58,030 --> 00:01:02,020
this is done using gradle, a build tool kit that manages dependencies and

15
00:01:02,020 --> 00:01:03,830
allows you to define custom build logic.

16
00:01:03,830 --> 00:01:09,660
You can manually start a gradle build in the IDE by selecting make project.

17
00:01:09,660 --> 00:01:13,060
You can also do this by going to the build menu and selecting make project from

18
00:01:13,060 --> 00:01:16,980
there, or you can use the gradle console to observe any logs or

19
00:01:16,980 --> 00:01:22,070
build errors, or open the gradle tasks window to see any available tasks.

20
00:01:22,070 --> 00:01:24,930
Double clicking on any of them will execute it. This will work from

21
00:01:24,930 --> 00:01:29,270
the command line too. Once you've navigated to the root of your project folder,

22
00:01:29,270 --> 00:01:34,810
you can run gradlew tasks to see all the tasks that you can run. You can learn

23
00:01:34,810 --> 00:01:39,350
more about gradle by checking out the links in the instructor notes. For now,

24
00:01:39,350 --> 00:01:43,310
note that we start with the project, which gradle then builds and

25
00:01:43,310 --> 00:01:47,820
then packages the byte code along with the external resources such as images,

26
00:01:47,820 --> 00:01:52,530
strings, and uixml into an application package. This is called an APK, and

27
00:01:52,530 --> 00:01:57,270
it's a specially formatted zip file. Once you've got your APK ready to go,

28
00:01:57,270 --> 00:02:02,210
it's signed and then pushed to the device using the Android Debug Bridge or

29
00:02:02,210 --> 00:02:07,020
ADB. If we return to the terminal, you can see that ADB lets you interact and

30
00:02:07,020 --> 00:02:10,810
debug apps on any device, physical or virtual. Things like pushing and

31
00:02:10,810 --> 00:02:13,730
pulling files, viewing logcat output, or

32
00:02:13,730 --> 00:02:19,280
even running a remote shell. So once Android's GDO has ADB installed the APK,

33
00:02:19,280 --> 00:02:23,410
it uses ADB again to launch the app by sending a stock command via the remote

34
00:02:23,410 --> 00:02:27,430
shell, by identifying the package and class name of your main activity.
