1
00:00:00,490 --> 00:00:05,480
I can see that this might be useful
in a situation where you're dealing

2
00:00:05,480 --> 00:00:11,100
with a potential customer, and they
want to do some some forecasting, but

3
00:00:11,100 --> 00:00:15,780
their needs aren't exactly
what your existing system is.

4
00:00:15,780 --> 00:00:20,170
You want to get some idea of how
much work it's going to be to

5
00:00:20,170 --> 00:00:21,250
produce a variant for them.

6
00:00:23,030 --> 00:00:27,490
Can we use these specifications
to determine that?

7
00:00:27,490 --> 00:00:29,560
>> Yeah, indeed you can.

8
00:00:29,560 --> 00:00:34,770
And in fact, that

9
00:00:34,770 --> 00:00:40,230
exact problem is one of the things that
motivated us to invest in this approach.

10
00:00:40,230 --> 00:00:43,480
So, if you look at the slide,
you'll see Hello World and

11
00:00:43,480 --> 00:00:46,290
Guten Tag Welt,
those two assembly specifications.

12
00:00:46,290 --> 00:00:48,550
And you can notice a couple of things.

13
00:00:48,550 --> 00:00:51,020
First off, they have a lot in common.

14
00:00:51,020 --> 00:00:57,235
So, Guten Tag Welt reuses two of
Hello World's components, the bFcst And

15
00:00:57,235 --> 00:01:03,190
mults components and it also uses both
of its refinements incr and fcst.

16
00:01:03,190 --> 00:01:06,660
Where they differ is
also very clear to see.

17
00:01:06,660 --> 00:01:12,030
So the Hello World has this iFcst and
this batch component

18
00:01:12,030 --> 00:01:16,710
where as Guten Tag Welt has
the diFcst and batchAdj component.

19
00:01:16,710 --> 00:01:21,260
And Guten Tag Welt has this mods and
overrides.

20
00:01:21,260 --> 00:01:22,550
Component interface respectively.

21
00:01:22,550 --> 00:01:25,760
So you can see from this
just by comparing exactly

22
00:01:27,200 --> 00:01:30,260
what two variants have in common and
exactly how they differ.

23
00:01:30,260 --> 00:01:32,950
>> Okay, Kurt can you tell us
something about now that you've

24
00:01:32,950 --> 00:01:36,440
had some experience with using
layer blocks over the last year or

25
00:01:36,440 --> 00:01:40,440
so about the benefits
you've seen from its use?

26
00:01:40,440 --> 00:01:43,440
>> So, there are several
benefits that we can get from it;

27
00:01:43,440 --> 00:01:46,390
the most obvious one is that
we get a lot of code reviews.

28
00:01:47,440 --> 00:01:49,320
I can try to quantify that a little bit.

29
00:01:49,320 --> 00:01:54,280
When we had multiple different
implementations of these variants and

30
00:01:54,280 --> 00:01:55,070
we replaced them,

31
00:01:55,070 --> 00:01:58,600
which is how we originally
brought layer blocks into being.

32
00:01:58,600 --> 00:02:02,003
We replaced them with with a Layer
layer blocks based solution,

33
00:02:02,003 --> 00:02:04,930
we've cut our code footprint
by about five times.

34
00:02:04,930 --> 00:02:09,836
So, it was a substantial amount of code
reduction that we got in [CROSSTALK].

35
00:02:09,836 --> 00:02:11,507
>> You mean 80% in code base?

36
00:02:11,507 --> 00:02:12,500
>> Yeah, that's right.

37
00:02:12,500 --> 00:02:13,235
>> Fantastic.

38
00:02:13,235 --> 00:02:14,980
>> 80% reduction in code base.

39
00:02:14,980 --> 00:02:20,040
In addition, the virtue of
it is that it's designed to

40
00:02:20,040 --> 00:02:24,440
do programming by generating variance,
rather than writing one off programs.

41
00:02:24,440 --> 00:02:28,780
And so that approach, and
that way of doing engineering

42
00:02:28,780 --> 00:02:33,050
actually helps the scale much better
to building a large complex software.

43
00:02:33,050 --> 00:02:34,500
It just adds a discipline on it.

44
00:02:34,500 --> 00:02:36,590
Now when developers
are working on this code base,

45
00:02:36,590 --> 00:02:40,510
instead of thinking about how
to go write the new method or

46
00:02:42,010 --> 00:02:46,890
make this new tweak, they think,
could I or should I make this

47
00:02:46,890 --> 00:02:51,750
a different refinement of an existing
interface or different feature.

48
00:02:53,280 --> 00:02:57,363
So you get a lot of simplicity
in a design by virtue of that.

49
00:02:57,363 --> 00:03:02,270
The scalability of the whole

50
00:03:02,270 --> 00:03:06,390
approach really owes to this idea of
feature refinements being so reusable.

51
00:03:06,390 --> 00:03:11,160
As you saw in the examples, and
there are many more, each of

52
00:03:11,160 --> 00:03:14,870
those little generators
gets reused quite a bit.

53
00:03:14,870 --> 00:03:19,700
So you don't need that many of them, and
you can build a pretty interesting and

54
00:03:19,700 --> 00:03:23,232
rich library of variance.

55
00:03:23,232 --> 00:03:27,580
In addition, features,
if you design them

56
00:03:27,580 --> 00:03:31,490
by doing a feature analysis are very
robust abstractions in a domain, and

57
00:03:31,490 --> 00:03:35,300
so they tend to give you
the kind of reuse that we get.

58
00:03:35,300 --> 00:03:40,040
So if you couple a good feature analysis
with applying an approach like this,

59
00:03:40,040 --> 00:03:42,700
you're going to have some

60
00:03:42,700 --> 00:03:46,050
good idea that you're going to be able
to get this kind of reuse in a project.

61
00:03:47,280 --> 00:03:51,140
And then finally,
I think maybe the last big benefit is,

62
00:03:51,140 --> 00:03:54,780
it's really beneficial for
understanding and for training.

63
00:03:54,780 --> 00:03:57,400
So if a new developer has
to come onto a project, and

64
00:03:57,400 --> 00:03:59,610
they've never see a forecaster before.

65
00:03:59,610 --> 00:04:02,420
But they have an assembly spec which
is something that's pretty small,

66
00:04:03,590 --> 00:04:05,600
just a few lines.

67
00:04:05,600 --> 00:04:08,980
And particularly if they see two or
three of them for different variants.

68
00:04:08,980 --> 00:04:12,540
They can very quickly get
an idea of how to do, a sort of,

69
00:04:12,540 --> 00:04:18,476
top down step wise
refinement of a variant as

70
00:04:18,476 --> 00:04:23,890
a sequence of refinements of a very
common easy to understand program.

71
00:04:23,890 --> 00:04:31,130
That turns out to have really nice
understanding and training benefits.

72
00:04:31,130 --> 00:04:35,280
>> But historically, in software
engineering when a code generation

73
00:04:35,280 --> 00:04:40,210
technology or a very general solution
to things is proposed, there's often

74
00:04:40,210 --> 00:04:46,505
a performance hit in the generated
code that you have to trade off.

75
00:04:46,505 --> 00:04:47,640
Has that been your experience here?

76
00:04:49,040 --> 00:04:52,120
>> So, ironically,
it's actually been the opposite.

77
00:04:52,120 --> 00:04:53,400
Let me try to explain why.

78
00:04:54,630 --> 00:04:59,080
So we are doing a lot of generation,
you're correct.

79
00:05:00,320 --> 00:05:00,900
But in fact,

80
00:05:00,900 --> 00:05:06,390
because we're generating variants that
contain really only what's needed.

81
00:05:06,390 --> 00:05:08,260
They contain only those features and

82
00:05:08,260 --> 00:05:11,910
only those capabilities that
are actually needed for

83
00:05:11,910 --> 00:05:14,840
a given variant, and they don't
have any extra cruft with them.

84
00:05:14,840 --> 00:05:16,560
They have been running more efficiently.

85
00:05:16,560 --> 00:05:21,170
In fact, when we replaced these
hand written forecasters with ones

86
00:05:21,170 --> 00:05:24,640
we generated from this library, we saw
pretty dramatic performance improvements

87
00:05:24,640 --> 00:05:30,540
just by reducing the amount of business
logic that we had to install into our

88
00:05:30,540 --> 00:05:34,050
database, and which of course then had
to always be running and calculating.

89
00:05:34,050 --> 00:05:38,100
So in that case,
we've actually seen the opposite.

90
00:05:38,100 --> 00:05:38,850
>> So win win.

91
00:05:38,850 --> 00:05:39,560
>> Win win, yeah.
