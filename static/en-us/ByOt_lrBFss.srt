1
00:00:00,000 --> 00:00:03,000
So here is my solution: I've takan all the input parameters,

2
00:00:03,000 --> 00:00:06,000
and the very first thing is I've set the dimension of the matrix and the vector:

3
00:00:06,000 --> 00:00:10,000
the length of the Path, plus the number of Landmarks--

4
00:00:10,000 --> 00:00:13,000
times 2--because I'm modeling x and y

5
00:00:13,000 --> 00:00:15,000
for each of those, in the same data structures.

6
00:00:15,000 --> 00:00:19,000
I then create a matrix for Omega and a vector for Xi,

7
00:00:19,000 --> 00:00:21,000
give it the appropriate dimensions,

8
00:00:21,000 --> 00:00:25,000
and subsequently I introduce the constraint

9
00:00:25,000 --> 00:00:28,000
that the initial positions have to be world-size/2.0,

10
00:00:28,000 --> 00:00:30,000
with a strength value of 1.0,

11
00:00:30,000 --> 00:00:33,000
That tells it this has no bearing on the final solutions

12
00:00:33,000 --> 00:00:35,000
because it's the only absolute constraint.

13
00:00:35,000 --> 00:00:37,000
But you can see--I add 1.0 over here in the main diagonal:

14
00:00:37,000 --> 00:00:39,000
1 for x and 1 for y--

15
00:00:39,000 --> 00:00:42,000
and then now add the same thing over here.

16
00:00:42,000 --> 00:00:46,000
It's important to understand how I set up the data structure.

17
00:00:46,000 --> 00:00:49,000
There's our positions--and let me just, for a second, call them "S".

18
00:00:49,000 --> 00:00:51,000
And there's our landmarks.

19
00:00:51,000 --> 00:00:54,000
Each of those have an x-component and a y-component.

20
00:00:54,000 --> 00:00:57,000
So in doing this, I'm taking this matrix and I'm setting it up,

21
00:00:57,000 --> 00:01:01,000
not by a matrix of Path length plus the number of landmarks,

22
00:01:01,000 --> 00:01:04,000
but each of those becomes a 2 by 2 matrix,

23
00:01:04,000 --> 00:01:08,000
where I explicitly retain the x and the y value.

24
00:01:08,000 --> 00:01:12,000
So the dimension here is 2 times N--the Path length--

25
00:01:12,000 --> 00:01:14,000
plus the number of landmarks.

26
00:01:14,000 --> 00:01:18,000
And the 2 is the result of modeling x and y: xy, xy, xy.

27
00:01:18,000 --> 00:01:20,000
That's really important for my solution.

28
00:01:20,000 --> 00:01:22,000
You might have done this differently--you might have said:

29
00:01:22,000 --> 00:01:26,000
I'm going to build 1 matrix for x and 1 matrix for y.

30
00:01:26,000 --> 00:01:28,000
and then each of those becomes just a single value,

31
00:01:28,000 --> 00:01:31,000
which is closer to the way we discussed it in class.

32
00:01:31,000 --> 00:01:33,000
And that's fine, in this case.

33
00:01:33,000 --> 00:01:35,000
In general, it has disadvantages

34
00:01:35,000 --> 00:01:38,000
in that it cannot correlate X and Ys.

35
00:01:38,000 --> 00:01:41,000
So for a real robot that has real rotations, this doesn't work.

36
00:01:41,000 --> 00:01:44,000
My solution is better, but for this specific example

37
00:01:44,000 --> 00:01:46,000
this would have been perfectly fine.

38
00:01:46,000 --> 00:01:49,000
Coming back to my example, I now process the data.

39
00:01:49,000 --> 00:01:51,000
I go through all the data items

40
00:01:51,000 --> 00:01:54,000
and my Path index is now the data item, times 2--

41
00:01:54,000 --> 00:01:57,000
which is the xy thing.

42
00:01:57,000 --> 00:01:59,000
I extract my measurements from the data--

43
00:01:59,000 --> 00:02:01,000
my motion from the data--

44
00:02:01,000 --> 00:02:03,000
using this command over here;

45
00:02:03,000 --> 00:02:06,000
and then I go through all the measurements,

46
00:02:06,000 --> 00:02:08,000
of which they are my multiple ones.

47
00:02:08,000 --> 00:02:10,000
I find the index in my matrix of the measurement,

48
00:02:10,000 --> 00:02:14,000
which is the Path plus the measurement index,

49
00:02:14,000 --> 00:02:16,000
times 2--because there are X and Ys again.

50
00:02:16,000 --> 00:02:19,000
And then the next routine just implements

51
00:02:19,000 --> 00:02:22,000
the simple addition with the measurement_noise

52
00:02:22,000 --> 00:02:25,000
as the inverse weighting factor.

53
00:02:25,000 --> 00:02:27,000
So it adds: 1, 1, -1, -1

54
00:02:27,000 --> 00:02:30,000
to the corresponding elements in the submatrix,

55
00:02:30,000 --> 00:02:32,000
and in the vector, it adds the measurement--

56
00:02:32,000 --> 00:02:36,000
all divided by the strength of the noise variable.

57
00:02:36,000 --> 00:02:38,000
If you look at this carefully,

58
00:02:38,000 --> 00:02:40,000
you'll take a minute to digest it

59
00:02:40,000 --> 00:02:42,000
and what was the use in the auxilliary variable, b,

60
00:02:42,000 --> 00:02:46,000
to account for the effect of this x and y.

61
00:02:46,000 --> 00:02:48,000
So b goes from zero to 1.

62
00:02:48,000 --> 00:02:50,000
And these are all the combinations.

63
00:02:50,000 --> 00:02:53,000
You have to stare at them to make sure they are all correct,

64
00:02:53,000 --> 00:02:56,000
but I can promise you--they're actually all correct.

65
00:02:56,000 --> 00:02:58,000
Motion is handled very much the same way:

66
00:02:58,000 --> 00:03:01,000
I extract the Motion command,

67
00:03:01,000 --> 00:03:03,000
I add among, the main diagonal--

68
00:03:03,000 --> 00:03:06,000
between the 2 variables that are being tied together--a "+1",

69
00:03:06,000 --> 00:03:09,000
and then I add, in the off-diagonal elements,"-1".

70
00:03:09,000 --> 00:03:11,000
So again, you have to stare at this

71
00:03:11,000 --> 00:03:13,000
very carefully to see they're all correct.

72
00:03:13,000 --> 00:03:17,000
And then I add the Motion itself to the vector, Xi.

73
00:03:17,000 --> 00:03:19,000
That's what I had to implement.

74
00:03:19,000 --> 00:03:22,000
I then solve, as before, and return the solution.

75
00:03:22,000 --> 00:03:26,000
And that's exactly what's being printed out down here.

76
00:03:26,000 --> 00:03:29,000
I have to say, we got this correct--I'm mightily impressed.

77
00:03:29,000 --> 00:03:31,000
You understood a lot about Mapping

78
00:03:31,000 --> 00:03:34,000
and you solved a really hard programming problem.

79
00:03:34,000 --> 00:03:36,000
I'm responding to some of you online

80
00:03:36,000 --> 00:03:38,000
who asked for challenging programming problems.

81
00:03:38,000 --> 00:03:40,000
This is a challenging piece of code to write.

82
00:03:40,000 --> 00:03:43,000
It took myself a number of hours to write,

83
00:03:43,000 --> 99:59:59,999
and that would be wonderful if you got it right.
