1
00:00:00,000 --> 00:00:03,000
The answer is only the second one is true.

2
00:00:03,000 --> 00:00:05,000
The first answer is not true.

3
00:00:05,000 --> 00:00:08,000
In fact, the EKE protocol is designed primarily with this goal

4
00:00:08,000 --> 00:00:11,000
of not being vulnerable to offline dictionary attacks.

5
00:00:11,000 --> 00:00:15,000
The reason for that is if you look at the 2 messages that are sent,

6
00:00:15,000 --> 00:00:20,000
the value that's encrypted with a password is the result of a Diffie-Hellman exponentiation.

7
00:00:20,000 --> 00:00:24,000
If we believe the Diffie-Hellman assumption, that's indistinguishable from random.

8
00:00:24,000 --> 00:00:27,000
An attacker who intercepts these messages

9
00:00:27,000 --> 00:00:30,000
could try all possible passwords in the dictionary.

10
00:00:30,000 --> 00:00:33,000
Even if one of those is correct, the attacker couldn't tell which.

11
00:00:33,000 --> 00:00:39,000
The attacker obtains the encrypted messages, which are these Diffie-Hellman exponentials.

12
00:00:39,000 --> 00:00:42,000
From those there's no way to obtain the key, so there's no way to know

13
00:00:42,000 --> 00:00:47,000
if the guess was correct, and it should be indistinguishable from any other guess.

14
00:00:47,000 --> 00:00:49,000
So that's a good property.

15
00:00:49,000 --> 00:00:52,000
It also satisfies this other property that it is actually not vulnerable

16
00:00:52,000 --> 00:00:56,000
to the meet-in-the-middle attack that Diffie-Hellman was vulnerable to

17
00:00:56,000 --> 00:01:01,000
because in this case if the attacker tries to relay something without knowing the password,

18
00:01:01,000 --> 00:01:05,000
that will lead to some other key being computed not known to the attacker,

19
00:01:05,000 --> 00:01:08,000
and the attacker won't be able to set up the middle attack.

20
00:01:08,000 --> 00:01:14,000
The main drawback of this protocol is it does require the server to keep the password.

21
00:01:14,000 --> 00:01:17,000
In order to decrypt this message encrypted with a password,

22
00:01:17,000 --> 00:01:20,000
the server needs to use the password to do decryption.

23
00:01:20,000 --> 00:01:24,000
So this means the server would need to store all the passwords in clear text.

24
00:01:24,000 --> 00:01:26,000
This is highly undesirable.

25
00:01:26,000 --> 99:59:59,999
If the server was compromised, all the passwords would be lost.
