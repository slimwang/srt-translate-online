1
00:00:00,500 --> 00:00:02,049
So here's our Sudoku puzzle.

2
00:00:02,049 --> 00:00:05,500
After running constraint propagation by
iterating the functions eliminate and

3
00:00:05,500 --> 00:00:07,810
only choice, we get to this point,

4
00:00:07,809 --> 00:00:11,939
where in each box we're recorded
the values that are allowed in that box.

5
00:00:11,939 --> 00:00:16,119
And let's pick one at random,
say this one with values eight and nine.

6
00:00:16,120 --> 00:00:17,859
Since we don't know what
value will go here yet,

7
00:00:17,859 --> 00:00:19,989
we'll just consider both possibilities.

8
00:00:19,989 --> 00:00:24,189
We'll try to solve the Sudoku obtained
if this value is an eight and

9
00:00:24,190 --> 00:00:27,810
also the Sudoku contained
if this value is a nine.

10
00:00:27,809 --> 00:00:31,160
Thus, we start to create
a tree of possibilities.

11
00:00:31,160 --> 00:00:33,119
Obviously we could have
picked any other box and

12
00:00:33,119 --> 00:00:36,704
split it to it's available values, but
the reason we picked the box with only

13
00:00:36,704 --> 00:00:39,359
two values is because
this will be less work.

14
00:00:39,359 --> 00:00:40,320
So let's recap.

15
00:00:40,320 --> 00:00:44,570
Here we have our original Sudoku and
the two possibilities for

16
00:00:44,570 --> 00:00:46,740
this box, eight and nine.

17
00:00:46,740 --> 00:00:50,630
For each of the two possibilities,
we again run constraint propagation.

18
00:00:50,630 --> 00:00:52,289
Let's say we run one on the left.

19
00:00:52,289 --> 00:00:56,320
After running constraint propagation,
we see that we're still not done.

20
00:00:56,320 --> 00:00:59,740
We look at one of the boxes with
the fewest number of possibilities,

21
00:00:59,740 --> 00:01:03,886
and let's say this box here, with three
possibilities, one, five, and nine.

22
00:01:03,886 --> 00:01:05,912
Well now we branch out
our tree again and

23
00:01:05,912 --> 00:01:08,625
try to solve the three
Sudoku's obtained this way.

24
00:01:08,625 --> 00:01:12,311
[BLANK_AUDIO]

25
00:01:12,311 --> 00:01:14,222
Let's say we try to solve
the one on the left and

26
00:01:14,222 --> 00:01:16,450
that ones doesn't give us a solution.

27
00:01:16,450 --> 00:01:18,778
No problem, we'll try the next one.

28
00:01:18,778 --> 00:01:20,829
Let's say this one splits
into two Sudoku's.

29
00:01:20,828 --> 00:01:24,434
[BLANK_AUDIO]

30
00:01:24,435 --> 00:01:27,292
And again, let's say the one on
the left doesn't reach a solution but

31
00:01:27,292 --> 00:01:28,799
the one on the right does.

32
00:01:28,799 --> 00:01:30,879
Hooray, we've reached a solution.

33
00:01:30,879 --> 00:01:32,390
This will be the general procedure.

34
00:01:32,390 --> 00:01:35,209
If we don't solve the Sudoku and
we get a few possibilities for

35
00:01:35,209 --> 00:01:39,109
some boxes, we'll branch out and try to
solve the Sudoku's obtained this way.

36
00:01:40,230 --> 00:01:42,280
If we reach a Sudoku
that can't be solved,

37
00:01:42,280 --> 00:01:46,530
then we move to the next one, and
we do this until we reach a solution.

38
00:01:46,530 --> 00:01:49,210
This procedure is called
depth first search.

39
00:01:50,959 --> 00:01:53,599
The depth first search
algorithm works as follows.

40
00:01:53,599 --> 00:01:57,669
We start by the root and traverse the
tree, always in the left most fashion.

41
00:01:57,670 --> 00:02:02,180
When we reach an end, we go to the next
branch to the right and keep going.

42
00:02:02,180 --> 00:02:05,450
We'll have the chance to learn this
more detailed later in the 90 degree.

