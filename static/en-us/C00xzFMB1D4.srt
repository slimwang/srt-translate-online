1
00:00:00,220 --> 00:00:02,220
Now that you've seen all
the parts of a function,

2
00:00:02,220 --> 00:00:03,745
let's put those pieces together.

3
00:00:03,745 --> 00:00:07,210
We'll write a few function definitions
together and then call those functions.

4
00:00:07,210 --> 00:00:10,250
We'll start with a description of the
task the function should accomplish, and

5
00:00:10,250 --> 00:00:11,180
go from there.

6
00:00:11,180 --> 00:00:12,960
Here's one you may have seen before.

7
00:00:12,960 --> 00:00:14,860
Write a function that
takes in the string and

8
00:00:14,860 --> 00:00:17,300
returns the first
character of that string.

9
00:00:17,300 --> 00:00:20,364
Again we start with the func,
and then we need a name.

10
00:00:20,364 --> 00:00:24,040
I'm going to call this
one firstCharacterOf.

11
00:00:24,040 --> 00:00:27,030
I'll add my parentheses and
my curly braces.

12
00:00:27,030 --> 00:00:29,410
In general,
don't shy away from long names,

13
00:00:29,410 --> 00:00:32,240
especially in the age of code
completion, it's more important to be

14
00:00:32,240 --> 00:00:35,980
descriptive than it is to save
yourself a few milliseconds of typing.

15
00:00:35,980 --> 00:00:39,160
It also would have been fine to call
this function firstCharacter, but

16
00:00:39,160 --> 00:00:42,840
I want to emphasize that the naming
convention in Objective C in Swift

17
00:00:42,840 --> 00:00:46,720
is to use prepositions and function
names to refer to the first parameter.

18
00:00:46,720 --> 00:00:48,460
In this case, a string.

19
00:00:48,460 --> 00:00:51,780
Here this function is returning
the first character of

20
00:00:51,780 --> 00:00:52,910
the string being passed in.

21
00:00:54,110 --> 00:00:55,390
So we have our name.

22
00:00:55,390 --> 00:00:58,160
Next comes the parameter
between parentheses.

23
00:00:58,160 --> 00:01:00,900
Let's call the string we're
going to pass in, word.

24
00:01:02,550 --> 00:01:04,650
That'll be its local parameter name.

25
00:01:04,650 --> 00:01:07,620
And then we specify its type, string.

26
00:01:09,030 --> 00:01:12,000
And next comes an arrow and
the return type.

27
00:01:12,000 --> 00:01:15,463
Our return type in this case
is going to be character.

28
00:01:15,463 --> 00:01:19,431
And I'm just going to write return "x"
here so that we can quiet that error for

29
00:01:19,431 --> 00:01:20,310
the time being.

30
00:01:21,840 --> 00:01:24,130
And finally we get to
the meat of the function.

31
00:01:24,130 --> 00:01:27,000
In between curly braces here we'll put
the statements we want to execute.

32
00:01:28,010 --> 00:01:31,448
There are a number of ways to get the
first character of a string in Swift.

33
00:01:31,448 --> 00:01:35,480
I'm going to use subscript syntax
with the index start index.

34
00:01:35,480 --> 00:01:38,820
And of course once we get that value,
we want to return it.

35
00:01:38,820 --> 00:01:40,115
Okay, now it's time to call it.

36
00:01:40,115 --> 00:01:43,810
firstCharacterOf is a global function,
so in order to call it,

37
00:01:43,810 --> 00:01:48,510
we just write its name and then pass
in a parameter between parentheses.

38
00:01:48,510 --> 00:01:49,860
And over here in the sidebar,

39
00:01:49,860 --> 00:01:52,680
we can see that the first character
of Mom is being returned.

40
00:01:54,130 --> 00:01:57,670
Now, notice that we didn't give
our parameter an external name,

41
00:01:57,670 --> 00:02:00,220
we only gave it the local name, word.

42
00:02:00,220 --> 00:02:04,060
Thus when we called it, we just
passed it in the parameter itself.

43
00:02:04,060 --> 00:02:06,702
Let's go ahead and
add an external name to our parameter.

44
00:02:06,702 --> 00:02:10,360
It's kind of hard to come up
with another word for word, so

45
00:02:10,360 --> 00:02:11,416
I'm just going to use word again.

46
00:02:11,416 --> 00:02:14,720
And now that we've specified
an external parameter name,

47
00:02:14,720 --> 00:02:18,310
we need to use that external
parameter name in the function call.

48
00:02:18,310 --> 00:02:21,540
Now you've probably noticed that the
compiler is complaining about something.

49
00:02:21,540 --> 00:02:22,540
Let's see what it has to say.

50
00:02:23,910 --> 00:02:28,290
Word word can be expressed
more succinctly as #word.

51
00:02:28,290 --> 00:02:30,100
It wants us to use the shortcut for

52
00:02:30,100 --> 00:02:33,900
external parameter names that
are the same as local parameter names.

53
00:02:33,900 --> 00:02:37,450
If we just place a hash mark in front
of the local parameter name, we let

54
00:02:37,450 --> 00:02:41,270
the compiler know that the external and
the local parameter names are the same.
