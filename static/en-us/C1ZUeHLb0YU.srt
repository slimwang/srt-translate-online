1
00:00:00,180 --> 00:00:03,760
The vertex shader performs the transform of the vertex position to the screen.

2
00:00:03,760 --> 00:00:06,820
Its inputs are the vertex from the triangle along with whatever data the

3
00:00:06,820 --> 00:00:11,307
programmer wants to provide. For example, matrices and the colorful material

4
00:00:11,307 --> 00:00:15,160
could be passed in. The output of the vertex shader is a vertex with a

5
00:00:15,160 --> 00:00:20,352
transformed position. And possibly other information, such as the normal. The

6
00:00:20,352 --> 00:00:24,820
transform triangle is then rasterized. Triangle set up sends the data at each

7
00:00:24,820 --> 00:00:29,148
pixel inside a triangle to another programmable unit, the fragment shader. If

8
00:00:29,148 --> 00:00:33,612
you use Microsoft's DirectX API, this is called the pixel shader. Here's the

9
00:00:33,612 --> 00:00:38,180
layout for the fragment shader. This shader is handed various information from

10
00:00:38,180 --> 00:00:41,780
the triangle being processed. Somewhere to the vertex shader, the programmer

11
00:00:41,780 --> 00:00:45,910
can feed in any other data needed to process the triangles data at each pixel.

12
00:00:45,910 --> 00:00:49,528
The fragment shader's program is run, and the output not surprisingly, called a

13
00:00:49,528 --> 00:00:52,930
fragment Is typically a color and a z-depth, and possibly an alpha if you're

14
00:00:52,930 --> 00:00:57,514
using transparency. By the way, the reason we call it a fragment is that it

15
00:00:57,514 --> 00:01:01,908
represents the piece of the triangle covered by the pixel. At this point, this

16
00:01:01,908 --> 00:01:06,670
fragment color plus z-depth, is compared to the stored depth in the z-buffer.

17
00:01:06,670 --> 00:01:10,553
If the fragment is closer than the z-depth previously stored. The triangle is

18
00:01:10,553 --> 00:01:14,243
visible at this pixel and its color values are saved. The z-buffer test is

19
00:01:14,243 --> 00:01:18,290
again a fixed function bit of hardware. Notice how the fragment shader is

20
00:01:18,290 --> 00:01:22,343
pretty similar to the vertex shader in the way it functions. In fact, modern

21
00:01:22,343 --> 00:01:27,030
GPUs use what is called a unified shader in the hardware itself. These shader

22
00:01:27,030 --> 00:01:30,080
processors are assigned on the fly by the GPU, to execute vertex shader or

23
00:01:30,080 --> 00:01:34,480
fragment shader programs, depending on where the bottleneck is found.
