1
00:00:00,009 --> 00:00:01,791
Now, we're going to look at actual code.

2
00:00:02,897 --> 00:00:04,003
We're showing this in the class IDE.

3
00:00:04,003 --> 00:00:07,178
We're going to walk through it very quickly and then run it in a shell window.

4
00:00:07,178 --> 00:00:09,945
And then we'll come back and look at specific bits of the code,

5
00:00:09,945 --> 00:00:12,616
so you're sure you know what all of these calls do.

6
00:00:12,616 --> 00:00:16,584
Then when we're done with that, we're going to ask you to make some changes and run it yourself.

7
00:00:16,584 --> 00:00:19,063
So this is the actual class IDE.

8
00:00:19,063 --> 00:00:20,825
I'm scrolling up and down.

9
00:00:20,825 --> 00:00:23,103
Here is our main routine. That's what we're going to run.

10
00:00:23,103 --> 00:00:25,233
Let me briefly go through what we're looking at

11
00:00:25,233 --> 00:00:29,175
and then I'll switch over to a shell window and show you how it actually runs.

12
00:00:29,175 --> 00:00:30,979
We're going to start off by running code here

13
00:00:30,979 --> 00:00:33,375
that's going to generate the input array on the host.

14
00:00:33,375 --> 00:00:35,905
Then we will declare the GPU memory pointers,

15
00:00:35,905 --> 00:00:38,506
allocate the memory for those pointers,

16
00:00:38,506 --> 00:00:41,777
copy our host array over to the device.

17
00:00:41,777 --> 00:00:43,321
Here's where the magic happens.

18
00:00:43,321 --> 00:00:45,847
This is where we actually launch the kernel.

19
00:00:45,847 --> 00:00:49,483
We then take the results here and copy them back to the CPU

20
00:00:49,483 --> 00:00:53,965
and then we print out the resulting array, free the memory, and return 0.

21
00:00:53,965 --> 00:00:56,024
And if we go way back up to the top here,

22
00:00:56,024 --> 00:00:58,460
here's the actual kernel that we're going to run.

23
00:00:58,460 --> 00:01:00,102
Notice it's very simple.

24
00:01:00,102 --> 00:01:02,836
Recall that we write a serial program here,

25
00:01:02,836 --> 00:01:07,233
and we know that all that program is going to do is square its input and return it into output.

26
00:01:07,233 --> 00:01:09,171
Now, let's actually run this code.

27
00:01:09,171 --> 00:01:14,397
What we see here is me connected to a Cuda capable computer, actually in our lab at UC Davis.

28
00:01:14,397 --> 00:01:19,082
We're going to first look at the code itself just so you know I'm compiling the real thing.

29
00:01:23,358 --> 00:01:24,917
Okay, here's our program.

30
00:01:24,917 --> 00:01:28,455
Now we're going to compile it, and here is the command to compile it.

31
00:01:28,455 --> 00:01:31,691
You don't have to worry about this in the class IDE,

32
00:01:31,691 --> 00:01:35,260
but I'm just showing you what this looks like if you're running things on your own computer.

33
00:01:35,260 --> 00:01:41,666
What we see here is instead of running the regular C compiler we're running NVCC, the Nvidia C Compiler.

34
00:01:41,666 --> 00:01:47,140
The output is going to go an executable called square and our input file is square.cu.

35
00:01:47,140 --> 00:01:52,946
Dot cu is the convention for how we name Cuda files when we're saving them in a file system, okay?

36
00:01:52,946 --> 00:01:54,346
So, it completes pretty quickly.

37
00:01:54,346 --> 00:01:56,660
Then I'm going to run the program square.

38
00:01:56,660 --> 00:01:58,659
What's square done?

39
00:01:58,659 --> 00:02:03,090
It's taken our 64 element input array of the numbers 0 to 63,

40
00:02:03,090 --> 00:02:05,992
and it squared each one of those and printed out the output.

41
00:02:05,992 --> 00:02:11,363
We see 0, 1, 4, 9, 16, and so on, all the way up to 63 squared.

42
00:02:11,363 --> 00:02:15,574
Now, again, you'll do this in the class IDE and some of the later examples that we do in this class

43
00:02:15,574 --> 00:02:17,471
will show how you do it in the class IDE.

44
00:02:17,471 --> 00:02:21,320
But just for now I'm showing you the results of this program done in a shell window.

45
00:02:21,320 --> 00:02:22,818
Let's go back to our code.
