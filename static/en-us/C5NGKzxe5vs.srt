1
00:00:00,360 --> 00:00:03,890
Testing asynchronous functions is a bit
different, because we need some way

2
00:00:03,890 --> 00:00:08,400
to inform the testing framework that our
asynchronous function has completed.

3
00:00:08,400 --> 00:00:14,270
Let's imagine our application needs
to make an API call to a server

4
00:00:14,270 --> 00:00:19,930
to retrieve a list of initial contacts
to put back into our application.

5
00:00:19,930 --> 00:00:23,480
Let's write a new test suite to work
on our new asynchronous functionality.

6
00:00:23,480 --> 00:00:26,270
We're just going to fake our
asynchronous functionality.

7
00:00:26,270 --> 00:00:29,580
So, in this case, we'll have to
write our implementation first.

8
00:00:29,580 --> 00:00:33,890
Normally, you'd be given an asynchronous
method from an API provider,

9
00:00:33,890 --> 00:00:36,650
like this push method from Firebase.

10
00:00:36,650 --> 00:00:40,490
We'll write a getInitialContacts
function, and to make it asynchronous,

11
00:00:40,490 --> 00:00:42,570
we'll just use setTimeout.

12
00:00:42,570 --> 00:00:43,990
You can ignore most of this.

13
00:00:43,990 --> 00:00:46,880
A lot of it's just boilerplate to
make this function act as if it's

14
00:00:46,880 --> 00:00:47,980
asynchronous.

15
00:00:47,980 --> 00:00:51,520
The important part is
the self.intialComplete=true

16
00:00:51,520 --> 00:00:53,090
within the callback.

17
00:00:53,090 --> 00:00:56,810
This is what our fake API call will
do when the asynchronous function

18
00:00:56,810 --> 00:00:58,240
is complete.

19
00:00:58,240 --> 00:01:02,290
You can also see I set an initial
value of false within the constructor.
