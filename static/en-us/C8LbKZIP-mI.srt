1
00:00:00,410 --> 00:00:04,830
So we mentioned earlier that you can
store pretty much any data in an array.

2
00:00:04,830 --> 00:00:06,919
You can even store arrays
inside of an array.

3
00:00:08,349 --> 00:00:12,269
An array of arrays can be represented
as a grid like structure,

4
00:00:12,269 --> 00:00:15,730
where each element of the array
corresponds to a row of cells.

5
00:00:16,769 --> 00:00:19,820
Iterating over a two dimensional
array can be tricky.

6
00:00:19,820 --> 00:00:22,480
So it's helpful to think about
the whole thing as a grid,

7
00:00:22,480 --> 00:00:25,620
where each row of the grid is an array,
and

8
00:00:25,620 --> 00:00:29,030
each of those arrays is
an element of the larger array.

9
00:00:30,120 --> 00:00:34,082
You can use a single loop to access each
row of the grid, as you can see here.

10
00:00:34,082 --> 00:00:36,454
[BLANK_AUDIO]

11
00:00:36,454 --> 00:00:40,262
And you can use nested loops,
or a loop inside of a loop,

12
00:00:40,262 --> 00:00:44,130
to loop over each elements
of each of those rows.

13
00:00:44,130 --> 00:00:48,719
The outer loop will cycle though each
row and then in the row that's currently

14
00:00:48,719 --> 00:00:53,420
being iterated over, the inner
loop will iterate over each cell.

15
00:00:53,420 --> 00:00:57,240
It can help to use easy to recognize,
distinct variable names for

16
00:00:57,240 --> 00:00:58,911
your outer and inner loops.

17
00:00:58,911 --> 00:01:02,472
I usually like to use variable
names like row or column, or

18
00:01:02,472 --> 00:01:06,905
in this case I used r and c, since this
will help you visualize the rows and

19
00:01:06,905 --> 00:01:09,829
columns of the grid that
your code represents.

