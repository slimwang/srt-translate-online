1
00:00:00,260 --> 00:00:02,750
Now we're ready to describe
how to build this all powerful

2
00:00:02,750 --> 00:00:03,870
universal Turing machine.

3
00:00:05,090 --> 00:00:07,230
As input to the universal machine,

4
00:00:07,230 --> 00:00:11,200
we give the description of
the machine we want to simulate, and

5
00:00:11,200 --> 00:00:16,260
the input we want to simulate it on,
these two things separated by a #.

6
00:00:16,260 --> 00:00:20,060
The goal is to simulate m's
execution when given the input w.

7
00:00:21,210 --> 00:00:27,130
That means we loop, accept, or
reject, just as M would on w.

8
00:00:27,130 --> 00:00:31,610
And if M does halt,
we want the universal machine to output

9
00:00:31,610 --> 00:00:37,020
the encoding of the tape
contents that M would have on w.

10
00:00:37,020 --> 00:00:39,130
We'll describe as three
tape Turing machine.

11
00:00:39,130 --> 00:00:41,300
That achieves this goal
of simulating M on W.

12
00:00:42,450 --> 00:00:44,590
The input comes in on the first tape.

13
00:00:44,590 --> 00:00:47,400
And here I've just written out
the mathematical description.

14
00:00:47,400 --> 00:00:51,000
And first, we'll copy this
description to the second tape.

15
00:00:51,000 --> 00:00:54,330
And we'll put the initial
state on the third tape.

16
00:00:54,330 --> 00:00:58,040
For example, the tape contents
might end up like this.

17
00:00:58,040 --> 00:01:00,280
Then we rewind the heads and

18
00:01:00,280 --> 00:01:02,980
begin the second phase of actually
simulating the execution.

19
00:01:03,990 --> 00:01:07,460
Here we searched for the appropriate
tupal in the description of the machine.

20
00:01:08,700 --> 00:01:13,260
The first element has to match
the current state stored on tape three.

21
00:01:13,260 --> 00:01:17,610
And the symbol part has to
match the encoding on tape one.

22
00:01:17,610 --> 00:01:20,870
If no match is found,
then we just halt the simulation, and

23
00:01:20,870 --> 00:01:24,610
put the universal machine in
an accepting or rejecting state,

24
00:01:24,610 --> 00:01:27,650
according to the current state of
the machine being interpreted.

25
00:01:28,760 --> 00:01:33,090
If there is a match, however, then we
apply the changes to the first tape.

26
00:01:33,090 --> 00:01:37,870
Moving ahead to the right position and
so forth, and then repeat this process.

27
00:01:37,870 --> 00:01:38,440
So, actually,

28
00:01:38,440 --> 00:01:42,290
interpreting a Turing machine
description is surprisingly easy.

29
00:01:42,290 --> 00:01:45,173
We've just seen how Turing machines
are indeed reprogrammable,

30
00:01:45,173 --> 00:01:47,460
just like real world computers.

31
00:01:47,460 --> 00:01:50,410
This lends further support to
the Church Turing Thesis, but

32
00:01:50,410 --> 00:01:52,010
it also has a significance beyond that.

33
00:01:53,050 --> 00:01:56,910
Since the input to a Turing Machine can
be interpreted as a Turing Machine,

34
00:01:56,910 --> 00:01:59,120
this suggests that programs
are a type of data.

35
00:02:00,320 --> 00:02:03,400
But arbitrary data can also
be interpreted as a possibly

36
00:02:03,400 --> 00:02:04,300
invalid Turing Machine.

37
00:02:05,370 --> 00:02:08,419
So is there any difference
between data and program?

38
00:02:08,419 --> 00:02:11,020
I'll leave this for you to discuss
with your friends over lunch or

39
00:02:11,020 --> 00:02:11,630
in the forums.
