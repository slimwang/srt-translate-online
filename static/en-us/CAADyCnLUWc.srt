1
00:00:00,310 --> 00:00:03,250
In objective C,
a pointer to an error is generally

2
00:00:03,250 --> 00:00:06,380
passed as the last parameter
to a method that could fail.

3
00:00:06,380 --> 00:00:10,980
If the method does indeed fail, a value
can be assigned to the error pointer.

4
00:00:10,980 --> 00:00:12,770
Let's take a look at an example.

5
00:00:12,770 --> 00:00:13,550
This method,

6
00:00:13,550 --> 00:00:18,240
do something that might fail with error
could be used something like this.

7
00:00:18,240 --> 00:00:22,060
Note that because we're passing a
pointer to a pointer, we use the double

8
00:00:22,060 --> 00:00:27,510
asterisks in the method definition and
we use the ampersand in the method call.

9
00:00:27,510 --> 00:00:31,350
If you take a look at the NSError class
reference, you'll notice that NSError

10
00:00:31,350 --> 00:00:36,240
has three properties: domain,
code, and a user info dictionary.

11
00:00:36,240 --> 00:00:39,140
These properties are access to
get additional information about

12
00:00:39,140 --> 00:00:41,080
the cause of an error.

13
00:00:41,080 --> 00:00:45,372
A similar error causing function
in Swift would look like this.

14
00:00:45,372 --> 00:00:49,780
Swift uses the keyword throws
rather than an error parameter.

15
00:00:49,780 --> 00:00:52,290
And here's what the method
call might look like.

16
00:00:52,290 --> 00:00:54,430
Notice the do catch statement.

17
00:00:54,430 --> 00:00:58,510
In Swift, if you have a method that
throws an error it's required that that

18
00:00:58,510 --> 00:01:02,640
error be handled either with a try or
a do catch statement.

19
00:01:02,640 --> 00:01:04,569
And Objective C on the other hand,

20
00:01:04,569 --> 00:01:07,260
it's perfectly acceptable to
ignore an error completely.

21
00:01:09,040 --> 00:01:12,655
The error itself might
look something like this.

22
00:01:12,655 --> 00:01:15,870
You'll often see each error case
handled individually, like so.

23
00:01:17,430 --> 00:01:21,440
Remember that enum members can
be associated with values.

24
00:01:21,440 --> 00:01:25,990
One can use associated values to
provide information about errors.

25
00:01:25,990 --> 00:01:27,260
And if we run this,

26
00:01:27,260 --> 00:01:31,040
we can see the string associated with
each error printed to the console.
