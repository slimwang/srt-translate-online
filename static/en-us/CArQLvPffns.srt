1
00:00:00,000 --> 00:00:04,000
What the Big Theta allows us to do is basically write complicated functions

2
00:00:04,000 --> 00:00:06,000
in a much simpler way.

3
00:00:06,000 --> 00:00:12,000
We can take a function like ½n² and just think of it as Θ(n²).

4
00:00:12,000 --> 00:00:15,000
And 8√n we can think of a just Θ(√n).

5
00:00:15,000 --> 00:00:20,000
Our equation from before, 2n - 2√n just becomes Θ(n).

6
00:00:20,000 --> 00:00:23,000
It's just a linear function asymptotically.

7
00:00:23,000 --> 00:00:28,000
A complicated expression like this where we have n⁴, which is the term that grows the fastest,

8
00:00:28,000 --> 00:00:30,000
becomes Θ(n).

9
00:00:30,000 --> 00:00:37,000
The ln n--in fact, any base log n is Big Theta of any other base log n as long as it's a constant.

10
00:00:37,000 --> 00:00:42,000
I like to think in terms of base 2 logs, because I'm a computer scientist.

11
00:00:42,000 --> 00:00:44,000
That's what we do.

12
00:00:44,000 --> 00:00:49,000
π² is something that doesn't grow with n, and it ends up being in the set Θ(1).

13
00:00:49,000 --> 00:00:51,000
It's just another constant.

14
00:00:51,000 --> 00:00:55,000
Just to beat this dead horse a little bit longer, let's use the definition of Big Theta

15
00:00:55,000 --> 00:00:59,000
to show that this expression that we determine for the growth in edges in a grid--

16
00:00:59,000 --> 00:01:05,000
2n - 2√n--really is just a linear function. It grows like Θ(n).

17
00:01:05,000 --> 00:01:11,000
The game plan is that we need to find constant c₁ and c₂--bigger than 0

18
00:01:11,000 --> 00:01:15,000
and a threshold N₀ so that for all the n bigger than n₀, the function that we care about

19
00:01:15,000 --> 00:01:17,000
is sandwiched between these two scalings.

20
00:01:17,000 --> 00:01:19,000
Let's focus on this one first.

21
00:01:19,000 --> 00:01:24,000
What c₂ can we plug in here so that we're guaranteed that this will be above this expression.

22
00:01:24,000 --> 00:01:28,000
If we just copy this inequality down just flipping it around to make it a little easier to think about,

23
00:01:28,000 --> 00:01:33,000
we want c₂ so that c₂n is bigger than this. Divide through by n

24
00:01:33,000 --> 00:01:38,000
Now we need a c₂ that is bigger than 2 minus something that's actually growing.

25
00:01:38,000 --> 00:01:40,000
Two should work for that.

26
00:01:40,000 --> 00:01:42,000
If we set c₂ to 2, it will satisfy this inequality.

27
00:01:42,000 --> 00:01:44,000
Let's just summarize all that

28
00:01:44,000 --> 00:01:46,000
We can set c₂ = 2. What about c₁?

29
00:01:46,000 --> 00:01:48,000
Well, let's take c₁ to be 1.

30
00:01:48,000 --> 00:01:53,000
Intuitively, the idea being this function is growing like 2n minus something smaller than that.

31
00:01:53,000 --> 00:01:55,000
So, n should be underneath that.

32
00:01:55,000 --> 00:02:00,000
But let's just make show if c₁ is equal to 1, then we need n to be less than or equal

33
00:02:00,000 --> 00:02:02,000
to this expression. For what values of n is that going to be true?

34
00:02:02,000 --> 00:02:05,000
It's not true of all of them, but it's true for some of them.

35
00:02:05,000 --> 00:02:10,000
We can add 2√n to both sides, subtract n from both sides, and we get that.

36
00:02:10,000 --> 00:02:19,000
If we divide through by √n, we get 2 ≤ n/√n and divided by √n is actually √n.

37
00:02:19,000 --> 00:02:21,000
So, we have 2 ≤ √n.

38
00:02:21,000 --> 00:02:26,000
We square both sides. We have 4 ≤ n, or--flipping that around the other way--

39
00:02:26,000 --> 00:02:30,000
if n ≥ 4, then this is true

40
00:02:30,000 --> 00:02:32,000
That means we have to throw away the smaller values of n,

41
00:02:32,000 --> 00:02:36,000
and we can do that very simply by setting n₀ to 4.

42
00:02:36,000 --> 00:02:40,000
This only has to hold for n that are bigger than n₀.

43
00:02:40,000 --> 00:02:42,000
That's what we've got there.

44
00:02:42,000 --> 00:02:44,000
There we have it.

45
00:02:44,000 --> 00:02:47,000
If we set the constants this way, n₀, c₁, and c₂, then what we find is

46
00:02:47,000 --> 00:02:51,000
that for big enough n this more complicated expression is sandwiched between

47
00:02:51,000 --> 00:02:56,000
two simple linear functions or to say it another way--
