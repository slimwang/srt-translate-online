1
00:00:00,210 --> 00:00:02,670
The first thing we'll do is add functionality to

2
00:00:02,670 --> 00:00:06,360
create conferences. Here's the Create a Conference page in the

3
00:00:06,360 --> 00:00:08,930
UI for the web app. Where you see enter the

4
00:00:08,930 --> 00:00:12,190
name, the city, the description. If we were to go

5
00:00:12,190 --> 00:00:15,030
ahead and enter these values now the conference wouldn't

6
00:00:15,030 --> 00:00:17,840
get created because this page sends a call to the

7
00:00:17,840 --> 00:00:21,290
Create Conference function. And it's going to be your job to

8
00:00:21,290 --> 00:00:25,300
implement that function but it's not implemented yet. We're going

9
00:00:25,300 --> 00:00:28,080
to create conference entities in such a way that each

10
00:00:28,080 --> 00:00:31,000
one has a parent and that parent is a profile of

11
00:00:31,000 --> 00:00:34,130
the user who created it. The reason for doing this is

12
00:00:34,130 --> 00:00:37,000
it makes it very easy to quickly find all the conferences

13
00:00:37,000 --> 00:00:40,550
that are particularly user created. For example, you'll be able to

14
00:00:40,550 --> 00:00:44,050
very quickly find all the conferences that you created. Now let's

15
00:00:44,050 --> 00:00:46,530
take a look at the code. So here I have the

16
00:00:46,530 --> 00:00:52,020
class conference. And you'll see that it has this @Parent property.

17
00:00:52,020 --> 00:00:57,020
Using objectify, the way you create an entity with a parent is that you use the

18
00:00:57,020 --> 00:01:00,600
annotation @Parent to annotate one property as the

19
00:01:00,600 --> 00:01:03,900
parent. So in this case, we've annotated profileKey

20
00:01:04,920 --> 00:01:07,650
as the property that's going to hold the

21
00:01:07,650 --> 00:01:10,180
parent, so profileKey is going to be the

22
00:01:10,180 --> 00:01:13,930
key of the profile entity that's the parent

23
00:01:13,930 --> 00:01:17,140
of this conference. Now when you created profile

24
00:01:17,140 --> 00:01:20,740
entities, you specified user ID as a property

25
00:01:20,740 --> 00:01:24,500
to use as the ID. For conference entities, we

26
00:01:24,500 --> 00:01:27,960
don't have any specific thing that we can use

27
00:01:27,960 --> 00:01:31,280
as the key that uniquely identifies the conference. So

28
00:01:31,280 --> 00:01:33,190
we're going to let App Engine allocate the

29
00:01:33,190 --> 00:01:37,050
key for off. However, using objectify, you still need

30
00:01:37,050 --> 00:01:40,000
to identify one property as the property to hold

31
00:01:40,000 --> 00:01:42,360
the ID. So in this case, we're going to use

32
00:01:42,360 --> 00:01:46,020
the cunningly named property ID and mark it

33
00:01:46,020 --> 00:01:49,070
as @ID. So this is the property that uses

34
00:01:49,070 --> 00:01:51,890
the ID for the key. If you remember for

35
00:01:51,890 --> 00:01:56,080
profile entities the ID property was a string and

36
00:01:56,080 --> 00:01:58,640
here for conference it's a long. That's long with

37
00:01:58,640 --> 00:02:01,010
an L, there's three kinds of types that your

38
00:02:01,010 --> 00:02:03,900
property annotated by @Id can be. It can be

39
00:02:03,900 --> 00:02:07,270
a long, capital L long, little L or string

40
00:02:07,270 --> 00:02:10,650
capital S. So one more annotation that we didn't use

41
00:02:10,650 --> 00:02:14,870
in the profile class is @Index. You'll notice that some

42
00:02:14,870 --> 00:02:19,050
of the fields in the conference have this @index annotation

43
00:02:19,050 --> 00:02:21,390
and what that means is we want to index property.

44
00:02:21,390 --> 00:02:23,940
And the reason we do this is that later on

45
00:02:23,940 --> 00:02:26,440
we're going to be searching on that property. We're going to be

46
00:02:26,440 --> 00:02:29,850
searching on the name, for example, we won't be searching

47
00:02:29,850 --> 00:02:32,440
on the description. So what I'm going to do is just

48
00:02:32,440 --> 00:02:35,250
quickly scroll through this code and explain what

49
00:02:35,250 --> 00:02:38,950
it does. We already talked about the @Parent. The

50
00:02:38,950 --> 00:02:40,930
profile key is the key of the parent

51
00:02:40,930 --> 00:02:46,440
of this entity, topics, every conference can optionally have

52
00:02:46,440 --> 00:02:48,190
one or more topics that it's about. For

53
00:02:48,190 --> 00:02:50,990
example, your conference might be about medical innovations or

54
00:02:50,990 --> 00:02:53,810
web technologies or maybe it's about both web

55
00:02:53,810 --> 00:02:57,810
technologies and programming languages. So, this is a multi-valued

56
00:02:57,810 --> 00:03:01,850
property, it's a list of strings. We have the city,

57
00:03:01,850 --> 00:03:04,120
we have the start date of the conference, the end

58
00:03:04,120 --> 00:03:07,040
date. We're also going to keep track of the month

59
00:03:07,040 --> 00:03:09,130
so that we can issue queries such as show me

60
00:03:09,130 --> 00:03:13,010
all the conferences in December. So max attendees is the

61
00:03:13,010 --> 00:03:16,220
maximum capacity of the conference. We're also going to have the

62
00:03:16,220 --> 00:03:19,360
seats available, which keeps track of how many seats are

63
00:03:19,360 --> 00:03:23,200
still available. Obviously at the very beginning, the seats available

64
00:03:23,200 --> 00:03:25,250
is the same as the capacity but as

65
00:03:25,250 --> 00:03:28,290
people sign up to attend the conference. The seats

66
00:03:28,290 --> 00:03:30,619
available is going to go down. For entities in

67
00:03:30,619 --> 00:03:34,752
general, the default constructor is private and here we

68
00:03:34,752 --> 00:03:38,626
have the constructor for the conference and what this

69
00:03:38,626 --> 00:03:41,552
constructor does is it sets the Id to then

70
00:03:41,552 --> 00:03:44,133
pass to Id and it also figures out the

71
00:03:44,133 --> 00:03:48,330
profile key by calling Key.create on Profile. It also

72
00:03:48,330 --> 00:03:53,490
figures out the profileKey of the parent profile and sets it and then it

73
00:03:53,490 --> 00:03:56,410
just sets the organizerUserId and then it

74
00:03:56,410 --> 00:04:00,050
calls this updateWithConferenceForm to set the other

75
00:04:00,050 --> 00:04:03,674
values in the conference. Here we've got

76
00:04:03,674 --> 00:04:06,572
some getter method. We get the profileKey

77
00:04:06,572 --> 00:04:10,310
here. This getWebsafeKey just basically returns a

78
00:04:10,310 --> 00:04:13,590
string of the conference's key. So that

79
00:04:13,590 --> 00:04:16,769
it can be passed around through forms and

80
00:04:16,769 --> 00:04:19,610
through the browser, if necessary. And this one

81
00:04:19,610 --> 00:04:23,170
here, the getOrganizerDisplayName. The display name's calculated on

82
00:04:23,170 --> 00:04:25,280
the fly when we need it. Just in

83
00:04:25,280 --> 00:04:28,910
case the organizer updates their display name. Okay.

84
00:04:28,910 --> 00:04:30,860
Just some more getters, getTopics, we get a

85
00:04:30,860 --> 00:04:34,690
defensive copy of the list, getCity, you need

86
00:04:34,690 --> 00:04:39,680
to get the start date, the end date, getMonth

87
00:04:39,680 --> 00:04:44,230
and so on. The updateWithConferenceForm method takes value

88
00:04:44,230 --> 00:04:47,710
send in the conference form and update the conference

89
00:04:47,710 --> 00:04:50,830
entity with those values. For example, here you

90
00:04:50,830 --> 00:04:53,890
see how we calculate which month conference is occurring

91
00:04:53,890 --> 00:04:55,630
in and set the value of the month

92
00:04:55,630 --> 00:04:58,800
field. There's a couple more methods that we'll be

93
00:04:58,800 --> 00:05:01,770
using later, there's bookSeats so that when the user

94
00:05:01,770 --> 00:05:04,920
registers to attend the conference, we need to keep

95
00:05:04,920 --> 00:05:07,470
track of how many seats are available. So we

96
00:05:07,470 --> 00:05:10,910
decrease the number of seats available by the number booked.

97
00:05:10,910 --> 00:05:13,800
And then give back seats if someone registers for

98
00:05:13,800 --> 00:05:16,830
a conference and changes their mind and unregisters then we

99
00:05:16,830 --> 00:05:19,920
need to reset the seats available. And then this

100
00:05:19,920 --> 00:05:22,350
toString is just a function so that you can get

101
00:05:22,350 --> 00:05:26,312
a string of the entire conference. Now, we actually

102
00:05:26,312 --> 00:05:30,030
wrote all the code for conference.java for you. I want

103
00:05:30,030 --> 00:05:34,590
you to make sure that you take a look and read it and understand it. Now let's

104
00:05:34,590 --> 00:05:37,440
take a quick look at the ConferenceForm class. Again,

105
00:05:37,440 --> 00:05:40,580
we've written this class for you. This class defines

106
00:05:40,580 --> 00:05:44,100
the input parameters to the createConference function just like

107
00:05:44,100 --> 00:05:48,270
ProfileForm defined the input parameters to the function saveProfile.

108
00:05:48,270 --> 00:05:51,350
So basically contains the fields that are going to be

109
00:05:51,350 --> 00:05:55,560
passed in the form or whatever input method to

110
00:05:55,560 --> 00:05:58,040
the create conference function. And if you're

111
00:05:58,040 --> 00:05:59,550
getting worried that we wrote too much

112
00:05:59,550 --> 00:06:00,830
for you, don't worry, you're going to

113
00:06:00,830 --> 00:06:02,850
be writing the create conference method yourself
