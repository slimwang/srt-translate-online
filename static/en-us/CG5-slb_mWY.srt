1
00:00:00,300 --> 00:00:02,750
So now that I have a good
understanding of do_GET,

2
00:00:02,750 --> 00:00:06,460
let's take this web server to the next
level with some post functionality.

3
00:00:06,460 --> 00:00:09,600
Gets are good for viewing information
all ready on the server, but

4
00:00:09,600 --> 00:00:12,120
posts are what allow the user to
customize their web experience.

5
00:00:13,160 --> 00:00:16,630
Get requests happen simply by
visiting the URL in a browser, but

6
00:00:16,630 --> 00:00:20,910
post requests from a browser require
data to be submitted, like with a form.

7
00:00:20,910 --> 00:00:24,505
I'm going to add a post method such that
our server doesn't just say hello or

8
00:00:24,505 --> 00:00:27,125
hola, but whatever the user
prompts as a salutation.

9
00:00:27,125 --> 00:00:28,810
On the same level as my do_GET method,

10
00:00:28,810 --> 00:00:32,180
I will create another method called
do_POST, which overrides the method in

11
00:00:32,180 --> 00:00:36,205
the base http request handler
superclass, just like doGet.

12
00:00:36,205 --> 00:00:39,715
I'll make another try except block,
similar to my do_GET method.

13
00:00:39,715 --> 00:00:41,245
When I receive a post request,

14
00:00:41,245 --> 00:00:44,655
I'll send off the response code
that indicates a successful post.

15
00:00:44,655 --> 00:00:48,015
Next, I need to decipher the message
that was sent from the server.

16
00:00:48,015 --> 00:00:51,305
In order to do this, I'm going to
use some message from the CGI,

17
00:00:51,305 --> 00:00:54,100
or common gateway interface,
library in Python.

18
00:00:54,100 --> 00:00:57,010
So I'll add import cgi
to the top of my file.

19
00:00:57,010 --> 00:00:59,920
Let's take a look at the following
chunk of code I'm going to add.

20
00:00:59,920 --> 00:01:05,120
This cgi.parse_header function parses an
HTML form header, such as content type,

21
00:01:05,120 --> 00:01:07,790
into a main value and
dictionary of parameters.

22
00:01:07,790 --> 00:01:11,020
After that, we check and
see if this is form data being received.

23
00:01:11,020 --> 00:01:12,740
I then make a variable called fields,

24
00:01:12,740 --> 00:01:16,980
which we use the cgi.parse_multipart
to collect all of the fields in a form.

25
00:01:16,980 --> 00:01:20,130
Then I will make a variable called
messagecontent to get out the value of

26
00:01:20,130 --> 00:01:22,830
a specific field or set of fields and
store them in an array.

27
00:01:22,830 --> 00:01:27,570
I will call this field message here,
and when I create my HTML form.

28
00:01:27,570 --> 00:01:29,540
So now that I've
received a post request,

29
00:01:29,540 --> 00:01:32,200
I can decide what to tell the client
with the new information I've received.

30
00:01:32,200 --> 00:01:35,260
I will create an empty string
named output again and

31
00:01:35,260 --> 00:01:37,540
then add some opening HTML tags to it.

32
00:01:37,540 --> 00:01:41,130
I'll have my server respond with,
okay, how about this.

33
00:01:41,130 --> 00:01:43,540
And then return the first value of
the array that was created when I

34
00:01:43,540 --> 00:01:44,310
submitted the form.

35
00:01:45,430 --> 00:01:46,040
Hm?

36
00:01:46,040 --> 00:01:50,270
Well you might be thinking, hey, you
haven't even created an HTML form, but

37
00:01:50,270 --> 00:01:52,240
keep talking about it
in the post handler.

38
00:01:52,240 --> 00:01:53,170
And you'd be right.

39
00:01:53,170 --> 00:01:54,840
So I'll go ahead and do that now.

40
00:01:54,840 --> 00:01:58,740
In this line of HTML code, I'm adding a
post request along with the header tag,

41
00:01:58,740 --> 00:02:00,970
to prompt the user to input some data.

42
00:02:00,970 --> 00:02:04,840
Here, I wrote the name of my input
field as message, to coincide with

43
00:02:04,840 --> 00:02:08,538
the message field I'm extracting
data from in the post request.

44
00:02:08,538 --> 00:02:11,845
I'm going to copy this line of code and
paste it into my hello and

45
00:02:11,845 --> 00:02:15,690
hola get requests, so this form will
be present on their pages as well.

46
00:02:15,690 --> 00:02:17,840
I will also separate out my opening and

47
00:02:17,840 --> 00:02:20,960
closing HTML tags on
their own line of code.

48
00:02:20,960 --> 00:02:24,930
Let me not forget to close the body and
html tags in my post handler.

49
00:02:24,930 --> 00:02:28,720
Send the output out to the server and
print out the output for debugging.

50
00:02:28,720 --> 00:02:31,780
In my exception block,
I will just leave it as pass for now.

51
00:02:31,780 --> 00:02:34,120
Let's see these new changes in
action from the web browser.
