1
00:00:00,380 --> 00:00:03,490
All right, we probably already gave it
away based on the earlier videos, but

2
00:00:03,490 --> 00:00:07,040
we need to create a string array to
store the list of English words for

3
00:00:07,040 --> 00:00:08,530
the numbers one through ten.

4
00:00:08,530 --> 00:00:10,710
An array is ideal for this situation,

5
00:00:10,710 --> 00:00:14,520
because there are related groups of
words that we need to keep together.

6
00:00:14,520 --> 00:00:16,970
We also want to maintain
the order of the words.

7
00:00:16,970 --> 00:00:22,090
So we ensure that the order goes 1,
2, 3 and so on.

8
00:00:22,090 --> 00:00:25,330
And it would be weird if the words
were displayed out of order.

9
00:00:25,330 --> 00:00:29,860
Since there are ten words, we initialize
the array to be of size ten, so

10
00:00:29,860 --> 00:00:31,290
we have ten slots.

11
00:00:31,290 --> 00:00:34,320
We also give the array variable a name,
words.

12
00:00:34,320 --> 00:00:38,060
As for the data type of this variable,
you need to be an array of strings.

13
00:00:38,060 --> 00:00:40,650
Because we want to store text
at each element of the array.

14
00:00:40,650 --> 00:00:43,730
And if each word were one character
long, we could just gone and

15
00:00:43,730 --> 00:00:46,090
use char and created a char array.

16
00:00:46,090 --> 00:00:48,690
Then remember char is another
primitive data type, but

17
00:00:48,690 --> 00:00:52,700
these words are much longer,
so we use a string array.

18
00:00:52,700 --> 00:00:56,010
Let's add code in the numbers
activity to create a new words array.

19
00:00:57,090 --> 00:01:02,050
To create the array variable we'll start
with a capital letter S for string.

20
00:01:02,050 --> 00:01:05,110
And remember this is because
string is an object data type and

21
00:01:05,110 --> 00:01:06,970
not a primitive data type.

22
00:01:06,970 --> 00:01:07,980
Following that,

23
00:01:07,980 --> 00:01:11,640
we'll need to add brackets to
indicate that it's a string array.

24
00:01:11,640 --> 00:01:16,788
We'll give the variable a name called
words, and then I'll write in the equal

25
00:01:16,788 --> 00:01:21,546
sign followed by new space String
with a value 10 within the brackets.

26
00:01:21,546 --> 00:01:25,860
So 10 here indicates
the size of the array.

27
00:01:25,860 --> 00:01:29,303
And remember that we always end our
statements with the semi-colon.

28
00:01:29,303 --> 00:01:33,659
So once we've created an empty string
array we can start assigning values into

29
00:01:33,659 --> 00:01:36,639
each position by specifying
the value at each index.

30
00:01:37,920 --> 00:01:42,460
So, for example, at the 0th index,
assigning the value one,

31
00:01:43,750 --> 00:01:46,680
and remember that this value
here is a text string.

32
00:01:47,860 --> 00:01:51,493
So I'm going to do that for each index
and until we reach the text string 10.

33
00:01:51,493 --> 00:01:53,341
[BLANK_AUDIO]

34
00:01:53,341 --> 00:01:56,504
So here's how the full
solution will look once we've

35
00:01:56,504 --> 00:02:00,450
added all ten words into our app and
store them into a string array.

36
00:02:00,450 --> 00:02:04,960
I know this might look a little bit
strange, because we had the value one

37
00:02:04,960 --> 00:02:10,150
stored at the 0th index and our ending
value ten stored at the 9th index.

38
00:02:10,150 --> 00:02:12,170
But this is correct, and

39
00:02:12,170 --> 00:02:16,200
you'll get used to arrays starting at
the 0th next as you use them more.

40
00:02:17,600 --> 00:02:20,410
So great work, now we have
an array of words in our app.
