1
00:00:00,190 --> 00:00:01,400
Now that's a contract.

2
00:00:02,600 --> 00:00:05,270
At this point, we define
the names of the columns we want,

3
00:00:05,270 --> 00:00:08,535
but we still don't have a database.

4
00:00:08,535 --> 00:00:14,080
To actually make a database, we're gong
to extend Android's SQLiteOpenHelper.

5
00:00:14,080 --> 00:00:17,470
SQLiteOpenHelper contains cool
stuff to create the database and

6
00:00:17,470 --> 00:00:19,500
help us handle database versioning.

7
00:00:19,500 --> 00:00:21,735
As we make changes to our
database in the future,

8
00:00:21,735 --> 00:00:24,490
tt will help us modify our tables.

9
00:00:24,490 --> 00:00:25,320
For many apps,

10
00:00:25,320 --> 00:00:28,730
being able to upgrade to a new
version without data loss is critical.

11
00:00:28,730 --> 00:00:32,500
For Sunshine, we just want to make
sure that upgrades in that involve

12
00:00:32,500 --> 00:00:34,730
schema changes happen smoothly.

13
00:00:34,730 --> 00:00:38,825
Let's take a look at SQLiteOpenHelper
more closely in action.

14
00:00:38,825 --> 00:00:41,735
We're going to be working in the
WeatherDBHelper class that you've been

15
00:00:41,735 --> 00:00:44,815
given which extends SQLiteOpenHelper.

16
00:00:44,815 --> 00:00:48,780
It contains code to create and
initialize the weather database.

17
00:00:48,780 --> 00:00:49,880
Let's examine it.

18
00:00:49,880 --> 00:00:53,465
At the beginning of the DbHelper, you
can see that we've defined constants for

19
00:00:53,465 --> 00:00:55,682
DATABASE_VERSION and DATABASE_NAME.

20
00:00:55,682 --> 00:01:00,450
The DATABASE_VERSION typically starts
at version 1 and must be manually

21
00:01:00,450 --> 00:01:04,790
incremented each time we release an
updated APK with a new database schema.

22
00:01:04,790 --> 00:01:09,150
The DATABASE_NAME is the name of the
actual database file in the file system,

23
00:01:09,150 --> 00:01:11,680
which will be weather.db in our case.

24
00:01:11,680 --> 00:01:15,810
Note that we're using version 2 since
this revision of the course uses

25
00:01:15,810 --> 00:01:17,660
an updated database version.

26
00:01:17,660 --> 00:01:21,130
These values get passed
into the constructor

27
00:01:21,130 --> 00:01:23,580
to initialize the database helper.

28
00:01:23,580 --> 00:01:26,220
Next we have the onCreate method.

29
00:01:26,220 --> 00:01:28,900
This is where the SQL we've
been talking about and

30
00:01:28,900 --> 00:01:31,760
our new contract class
are used together.

31
00:01:31,760 --> 00:01:34,582
The first time the database is used,

32
00:01:34,582 --> 00:01:37,920
SQLiteOpenHelper's onCreate
will be called.

33
00:01:37,920 --> 00:01:40,550
We need to write the correct
SQL statement string so

34
00:01:40,550 --> 00:01:43,300
that we can create
the table sunshine needs.

35
00:01:43,300 --> 00:01:48,960
We then have the system execute
this SQL by calling db dot execSQL.

36
00:01:48,960 --> 00:01:52,540
Note how we're using all of the weather
entry constants to write our

37
00:01:52,540 --> 00:01:53,890
sequel statements.

38
00:01:53,890 --> 00:01:57,870
Also note that we use lots of not
null constraints on this table.

39
00:01:57,870 --> 00:02:01,800
These constraints help prevent us from
inserting records without columns being

40
00:02:01,800 --> 00:02:05,770
filled out into the database,
and that helps to prevent bugs.

41
00:02:05,770 --> 00:02:09,070
Here is the implementation of the
FOREIGN KEY constraint from the not yet

42
00:02:09,070 --> 00:02:11,038
created location entry table.

43
00:02:11,038 --> 00:02:14,280
This means that we cannot insert
a weather entry into the database until

44
00:02:14,280 --> 00:02:17,450
a location entry for
the weather location has been inserted.

45
00:02:17,450 --> 00:02:20,270
And we cannot delete locations
while there exist weather

46
00:02:20,270 --> 00:02:21,680
entries that point to them.

47
00:02:21,680 --> 00:02:24,410
That being said,
it's going to be a while before we

48
00:02:24,410 --> 00:02:27,810
have UI that can demonstrate that
our database code is working.

49
00:02:27,810 --> 00:02:31,190
Fortunately, there's a way we can
have Android run any code we want,

50
00:02:31,190 --> 00:02:32,920
even if there's no UI yet ready.

51
00:02:33,990 --> 00:02:37,970
Android has a built in testing framework
that allows us to create a test APK that

52
00:02:37,970 --> 00:02:42,580
executes a JUnit test that call
into classes in our main APK.

53
00:02:42,580 --> 00:02:44,970
If you aren't already
familiar with JUnit,

54
00:02:44,970 --> 00:02:48,730
it is a testing framework that allows
you to write automated test suites.

55
00:02:48,730 --> 00:02:51,060
You can run your automated tests easily.

56
00:02:51,060 --> 00:02:54,960
You can find your tests in this
section of the Android Studio project.

57
00:02:54,960 --> 00:02:58,630
Just right-click on the test package and
select Run.

58
00:02:58,630 --> 00:03:00,060
Once the test pass or

59
00:03:00,060 --> 00:03:04,050
fail, you'll see the output down
here at the bottom of the screen.

60
00:03:04,050 --> 00:03:06,990
I'm not going to display the emulator
on our screen because it won't actually

61
00:03:06,990 --> 00:03:08,540
show that we're doing anything.

62
00:03:08,540 --> 00:03:11,050
The tests we're running don't
have any user interface.

63
00:03:11,050 --> 00:03:14,680
But you can see here in the test runner,
we're instantiating tests.

64
00:03:14,680 --> 00:03:19,280
An empty window and
a green result means the test succeeded.

65
00:03:19,280 --> 00:03:21,800
Let's look at the TestPractice class.

66
00:03:21,800 --> 00:03:25,470
You can see it sits in the data
package of our test project and

67
00:03:25,470 --> 00:03:27,420
extends AndroidTestCase.

68
00:03:27,420 --> 00:03:29,020
When you extend AndroidTestaCase,

69
00:03:29,020 --> 00:03:34,050
you can implement the setUp method
which will be run before each test.

70
00:03:34,050 --> 00:03:38,100
You can also implement tearDown
which we run after each test.

71
00:03:38,100 --> 00:03:42,866
Similar to JUnit test, you simply add
new methods in the class with the prefix

72
00:03:42,866 --> 00:03:46,310
test such as
testThatDemonstratesAssertions.

73
00:03:46,310 --> 00:03:49,430
And those will automatically
be run by the test processor.

74
00:03:49,430 --> 00:03:51,055
Some other things to note.

75
00:03:51,055 --> 00:03:54,855
The FullTestSuite class contains
code to include all of the Java

76
00:03:54,855 --> 00:03:59,315
test classes in its package into
a suite of tests the JUnit will run.

77
00:03:59,315 --> 00:04:01,815
This allows us to easily
add additional tests,

78
00:04:01,815 --> 00:04:05,255
by just adding additional Java
class files to our test directory.

79
00:04:05,255 --> 00:04:08,385
You'll likely have a class like
this in each test project you make.

80
00:04:08,385 --> 00:04:10,555
They aren't typically project specific.

81
00:04:10,555 --> 00:04:12,870
So you can literally
just copy this file.

82
00:04:12,870 --> 00:04:16,380
Each test should have at least
one check which uses an assert

83
00:04:16,380 --> 00:04:19,390
to see if the program
applies the correct output.

84
00:04:19,390 --> 00:04:22,170
An assert is just that,
it's a declaration that

85
00:04:22,170 --> 00:04:26,600
the outcome after part of a test
is run matches our expectations.

86
00:04:26,600 --> 00:04:29,450
If the assert does not match,
the test will fail.

87
00:04:29,450 --> 00:04:32,211
Let's look at our
testThatDemonstratesAssertions in

88
00:04:32,211 --> 00:04:33,890
TestPractice.java.

89
00:04:33,890 --> 00:04:38,240
AssertEquals asserts that the expected
value equals the actual value.

90
00:04:38,240 --> 00:04:40,770
If they are not equal than
an assertion failed error is

91
00:04:40,770 --> 00:04:42,700
thrown with the given string message.

92
00:04:42,700 --> 00:04:45,744
Other useful methods
include assertEquals,

93
00:04:45,744 --> 00:04:49,530
assertFalse, assertNull, or

94
00:04:49,530 --> 00:04:53,660
we can just call fail if a certain code
path should never have been reached.

95
00:04:53,660 --> 00:04:56,970
Feel free to write your own test
cases to play with assertions.

96
00:04:56,970 --> 00:04:59,700
Let's see what happens
when we make a test fail.

97
00:04:59,700 --> 00:05:01,810
As you can see our results are now red,
and

98
00:05:01,810 --> 00:05:05,560
we can see exactly where in
the test are application failed.

99
00:05:05,560 --> 00:05:10,680
Let's uncomment out the testCreateDb
function inside of the TestDb class.

100
00:05:10,680 --> 00:05:13,528
You might have to import a few
classes to get this to compile.

101
00:05:13,528 --> 00:05:18,069
Let's also uncomment out
the createNorthPoleLocationValues and

102
00:05:18,069 --> 00:05:23,900
the insertNorthPoleLocationValues
functions from within TestUtilities.

103
00:05:23,900 --> 00:05:26,690
This is the last chance to fix
up your location contract if

104
00:05:26,690 --> 00:05:28,270
things don't compile.

105
00:05:28,270 --> 00:05:30,495
So let's run our new
test with our TestDb.

106
00:05:31,640 --> 00:05:35,540
As you can see, we get a pretty good
error message back, that our database

107
00:05:35,540 --> 00:05:39,010
was created without both the location
entry and weather entry tables.

108
00:05:39,010 --> 00:05:40,010
Don't worry.

109
00:05:40,010 --> 00:05:40,700
We can fix it.
