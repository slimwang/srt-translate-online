1
00:00:00,170 --> 00:00:02,415
So this is what a typical
frame looks like for

2
00:00:02,415 --> 00:00:06,350
as developers when things
are more than just a static page.

3
00:00:06,350 --> 00:00:09,020
It looks like the pipeline
I talked about just before

4
00:00:09,020 --> 00:00:11,950
except I've now chucked
JavaScript at the front.

5
00:00:11,950 --> 00:00:14,590
Normally, you're going to use
JavaScript to handle work

6
00:00:14,590 --> 00:00:16,520
that will result in visual changes.

7
00:00:16,520 --> 00:00:20,060
Whether it's jQuery's animate function,
sorting a data set, or

8
00:00:20,060 --> 00:00:22,080
adding DOM elements to the page.

9
00:00:22,080 --> 00:00:26,040
But you don't have to use JavaScript for
your visual changes.

10
00:00:26,040 --> 00:00:26,710
In fact, for

11
00:00:26,710 --> 00:00:30,770
many applications developers use
CSS animations, transitions, or

12
00:00:30,770 --> 00:00:34,870
even the new Web Animations API to
make visual changes to their page.

13
00:00:34,870 --> 00:00:38,750
Now with that out of the way, we can
talk about the pipeline a bit more.

14
00:00:38,750 --> 00:00:42,790
The changes we make here won't
necessarily trigger every part

15
00:00:42,790 --> 00:00:44,610
of the pipeline either.

16
00:00:44,610 --> 00:00:48,560
In fact, there are three ways
the pipeline normally plays out for

17
00:00:48,560 --> 00:00:49,770
a given frame.

18
00:00:49,770 --> 00:00:51,890
So let's talk about those for a second.

19
00:00:51,890 --> 00:00:57,070
So number one, you make a visual
change either with CSS Or JavaScript.

20
00:00:57,070 --> 00:01:01,510
The browser must recalculate the styles
of the elements that were affected.

21
00:01:01,510 --> 00:01:03,680
Now if you changed a layout property, so

22
00:01:03,680 --> 00:01:07,830
that's one that changed an element's
geometry like its width, height, or

23
00:01:07,830 --> 00:01:11,430
position with relation to another
element like left or top,

24
00:01:11,430 --> 00:01:15,690
then the browser will have to check all
the other elements and re-flow the page.

25
00:01:15,690 --> 00:01:19,080
Any affected areas will
need to be repainted.

26
00:01:19,080 --> 00:01:23,770
And the final painted elements will
need to be composited back together.

27
00:01:23,770 --> 00:01:28,080
The second way the pipeline gets used is
when you change a paint only property,

28
00:01:28,080 --> 00:01:31,930
like background image,
text color, or shadows.

29
00:01:31,930 --> 00:01:37,330
This time, we make the change,
the styles are calculated,

30
00:01:37,330 --> 00:01:42,100
we don't do layout because we didn't
change the geometry of any elements.

31
00:01:42,100 --> 00:01:46,050
We do paint and we do composite.

32
00:01:46,050 --> 00:01:50,380
And the last way involves changing
something that requires neither layout,

33
00:01:50,380 --> 00:01:53,040
nor paint, just compositing.

34
00:01:53,040 --> 00:01:55,770
Compositing is where the browser
puts the individual layers

35
00:01:55,770 --> 00:01:57,370
of the page together.

36
00:01:57,370 --> 00:02:01,120
And that requires layer management to
ensure we have the right layers, and

37
00:02:01,120 --> 00:02:02,320
in the correct order.

38
00:02:02,320 --> 00:02:04,030
So we make our change.

39
00:02:04,030 --> 00:02:07,900
We do style calculations,
but we only do composite.

40
00:02:07,900 --> 00:02:11,400
You probably noticed that
style was always included for

41
00:02:11,400 --> 00:02:13,170
each of those variations.

42
00:02:13,170 --> 00:02:16,520
Different styles affect which
parts of the pipeline we touch?

43
00:02:16,520 --> 00:02:19,490
And therefore the performance
characteristics of our apps.
