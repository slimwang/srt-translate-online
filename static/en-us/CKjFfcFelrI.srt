1
00:00:00,470 --> 00:00:02,400
Before we go ahead and build a content provider

2
00:00:02,400 --> 00:00:05,280
you wouldn't be out of line to ask, well why.

3
00:00:07,250 --> 00:00:09,060
The simplest answer is that it allows you to

4
00:00:09,060 --> 00:00:12,540
share your data safely and efficiently across app boundaries by

5
00:00:12,540 --> 00:00:15,520
abstracting the underlying data source, be it SQLite like

6
00:00:15,520 --> 00:00:19,080
this or files or really anything else. So that other

7
00:00:19,080 --> 00:00:21,870
apps can access it without really needing to understand how

8
00:00:21,870 --> 00:00:25,650
you stored it. In fact, the calendar, SMS, and contacts

9
00:00:25,650 --> 00:00:29,620
APIs work that way, using shared content providers.

10
00:00:29,620 --> 00:00:31,780
We're going to share our weather database later, but if

11
00:00:31,780 --> 00:00:34,370
you're not planning to expose your app's data, you're

12
00:00:34,370 --> 00:00:38,160
probably thinking you can skip this bit, right? Well,

13
00:00:38,160 --> 00:00:40,770
almost, in a lot of cases you could,

14
00:00:40,770 --> 00:00:44,970
but really shouldn't. For example, in Sunshine we're using

15
00:00:44,970 --> 00:00:47,380
SQ Lite. But you could be storing data in

16
00:00:47,380 --> 00:00:50,680
files, dynamic run-time data or even just a different

17
00:00:50,680 --> 00:00:55,040
database library. By using content providers, it's easier for

18
00:00:55,040 --> 00:00:57,380
you to potentially switch out the data source and

19
00:00:57,380 --> 00:00:59,740
much easier for someone other than you to manage

20
00:00:59,740 --> 00:01:02,410
the UI layer code without them having to understand

21
00:01:02,410 --> 00:01:05,459
the depths of your data storage implementation. On the

22
00:01:05,459 --> 00:01:09,070
UI layer, it's a generic mechanism that returns cursors.

23
00:01:09,070 --> 00:01:12,270
The same of those returned by SQLite databases. So,

24
00:01:12,270 --> 00:01:15,690
if your data layer implementation changes, then your content provider

25
00:01:15,690 --> 00:01:19,390
is effected. Still, it's just you writing the code right

26
00:01:19,390 --> 00:01:21,520
now and that's a lot of boilerplate for the sake of

27
00:01:21,520 --> 00:01:24,690
following a neat design pattern. Well, keep in mind that

28
00:01:24,690 --> 00:01:27,730
as far as the framework is concerned, all data is handled

29
00:01:27,730 --> 00:01:31,027
through content providers. So, if you want to interact with

30
00:01:31,027 --> 00:01:33,790
anything outside of your app, such as sending data to a

31
00:01:33,790 --> 00:01:37,770
widget or returning search results from the newer app, you'll need

32
00:01:37,770 --> 00:01:40,770
a content provider for that too. In fact, that's how the

33
00:01:40,770 --> 00:01:43,760
Google play store and Gmail widgets work. As well as the

34
00:01:43,760 --> 00:01:47,920
ability to get search results from Google Play. Similarly, there's a bunch

35
00:01:47,920 --> 00:01:51,960
of APIs designed to optimize the process of synching and querying data,

36
00:01:51,960 --> 00:01:56,580
and updating UI accordingly. And all of them also expect content providers.

37
00:02:00,490 --> 00:02:03,950
That includes sync adapters and cursor loaders. Which make your

38
00:02:03,950 --> 00:02:07,140
app able to efficiently sync with your server, load data in

39
00:02:07,140 --> 00:02:10,360
your UI layer, and which include built in content observers that

40
00:02:10,360 --> 00:02:14,167
will update your UI automatically when the underlying data changes. You

41
00:02:14,167 --> 00:02:17,680
could, of course, build all of that yourself but at

42
00:02:17,680 --> 00:02:20,350
a certain point the advantage you gained by not writing a

43
00:02:20,350 --> 00:02:23,280
content provider to begin with is lost in the process of

44
00:02:23,280 --> 00:02:26,900
having to recreate all of the useful clusters that utilize it.

45
00:02:26,900 --> 00:02:30,160
We'll take a look at publishing your content provider and using Lotus

46
00:02:30,160 --> 00:02:33,980
to access it efficiently later in this lesson. And we'll explore sync adapters

47
00:02:33,980 --> 00:02:37,820
in lesson six when we look at doing efficient background updates. But

48
00:02:37,820 --> 00:02:41,390
first, Dan is going to show you how to actually build a content provider.
