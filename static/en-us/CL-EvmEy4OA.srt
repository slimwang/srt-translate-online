1
00:00:00,330 --> 00:00:02,476
So let's look at the problem of multi-core

2
00:00:02,476 --> 00:00:06,960
and many-core power and performance. The problem is this.

3
00:00:06,960 --> 00:00:09,080
We have one core. Let's say it can

4
00:00:09,080 --> 00:00:11,340
spend 100 watts, which is the power budget for

5
00:00:11,340 --> 00:00:14,297
the entire chip. And that power of the

6
00:00:14,297 --> 00:00:17,391
one core is really some sort of a constant

7
00:00:17,391 --> 00:00:21,577
times the voltage squared, times the frequency of the

8
00:00:21,577 --> 00:00:25,430
core. Let's say that we get 100 watts consumption

9
00:00:25,430 --> 00:00:28,022
when we set the voltage and the frequency,

10
00:00:28,022 --> 00:00:31,600
such that we can operate at 3.8 GHz. Now,

11
00:00:31,600 --> 00:00:34,000
let's say that we get two cores. In

12
00:00:34,000 --> 00:00:37,290
that case, each gets half the power budget of

13
00:00:37,290 --> 00:00:43,264
the chip. The per core power in the two core case is one half of the single

14
00:00:43,264 --> 00:00:46,488
cores power, so we need to reduce the

15
00:00:46,488 --> 00:00:50,544
voltage and frequency such that we get one half

16
00:00:50,544 --> 00:00:58,150
of the power. Remember that voltage can be reduced in proportion to frequency.

17
00:00:58,150 --> 00:01:02,870
So the frequency at which we can run a core in a two core system is going to

18
00:01:02,870 --> 00:01:07,910
be cubed root of one half times the frequency at which we can operate a single

19
00:01:07,910 --> 00:01:10,470
core in a single core system, which is

20
00:01:10,470 --> 00:01:14,674
this frequency. And that ends up being 0.8,

21
00:01:14,674 --> 00:01:19,770
approximately times f1 or three gigahertz. So as you can

22
00:01:19,770 --> 00:01:22,202
see, if we now use only one of these cores, we

23
00:01:22,202 --> 00:01:24,954
get to run it at three gigahertz as opposed to 3.8

24
00:01:24,954 --> 00:01:29,250
gigahertz that we could get here. So this is noticeably slower.
