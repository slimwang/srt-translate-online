1
00:00:00,500 --> 00:00:04,050
One idea for this virtualization framework

2
00:00:04,050 --> 00:00:06,740
is what is called full virtualization, and

3
00:00:06,740 --> 00:00:09,580
in full virtualization the idea is to

4
00:00:09,580 --> 00:00:13,160
leave the operating system pretty much untouched.

5
00:00:13,160 --> 00:00:18,200
So you can run the unchanged binary of the operating system on top of

6
00:00:18,200 --> 00:00:21,700
the hypervisor. This is called full virtualization

7
00:00:21,700 --> 00:00:25,240
because the operating system is completely untouched.

8
00:00:25,240 --> 00:00:29,820
Nothing has been changed. Not even a single line of code is modified in these

9
00:00:29,820 --> 00:00:33,210
operating systems in order to run on the

10
00:00:33,210 --> 00:00:36,530
hypervisor simultaneously. But we have to be a

11
00:00:36,530 --> 00:00:38,860
little bit clever to get this to work,

12
00:00:38,860 --> 00:00:42,630
however. Operating systems running on top of the

13
00:00:42,630 --> 00:00:47,600
hypervisor are run as user-level processes. They're not

14
00:00:47,600 --> 00:00:51,430
running at the same level of privilege as

15
00:00:51,430 --> 00:00:53,240
a Linux operating system that is running

16
00:00:53,240 --> 00:00:55,820
on bare metal. But if the operating system

17
00:00:55,820 --> 00:00:59,380
code is unchanged, it doesn't know that it

18
00:00:59,380 --> 00:01:01,710
does not have the privilege for doing certain

19
00:01:01,710 --> 00:01:06,610
things that it would do normally on bare metal hardware. In

20
00:01:06,610 --> 00:01:11,900
other words, when the operating system executes some privileged

21
00:01:11,900 --> 00:01:16,850
instructions, meaning they have to be, in a privileged mode or kernel

22
00:01:16,850 --> 00:01:19,500
mode to run on bare metal in

23
00:01:19,500 --> 00:01:23,970
order to execute those instructions. Those instructions

24
00:01:23,970 --> 00:01:26,360
will create a trap that goes into

25
00:01:26,360 --> 00:01:30,050
the hypervisor and the hypervisor will then emulate

26
00:01:30,050 --> 00:01:33,958
the intended functionality of the operating system.

27
00:01:33,958 --> 00:01:35,780
And this is what is called the

28
00:01:35,780 --> 00:01:40,150
trap and emulate strategy. Essentially, each operating

29
00:01:40,150 --> 00:01:42,810
system thinks it is running on bare metal.

30
00:01:42,810 --> 00:01:45,500
And therefore, it does exactly what it

31
00:01:45,500 --> 00:01:49,790
would have done on a bare-metal processor, meaning

32
00:01:49,790 --> 00:01:53,360
that it'll try to execute certain privileged instructions

33
00:01:53,360 --> 00:01:56,140
thinking it has the right privilege. But it

34
00:01:56,140 --> 00:01:57,910
does not have the right privilege, because

35
00:01:57,910 --> 00:02:01,090
it's run as a user-level process on top

36
00:02:01,090 --> 00:02:04,290
of the hypervisor. And therefore, when they try

37
00:02:04,290 --> 00:02:08,160
to do something that requires. A high level

38
00:02:08,160 --> 00:02:13,020
of privilege than the user level, it will result in a trap into

39
00:02:13,020 --> 00:02:16,470
the hypervisor, and the hypervisor will then

40
00:02:16,470 --> 00:02:20,100
emulate the intended functionality of the particular

41
00:02:20,100 --> 00:02:23,490
operating system. There are some thorny issues

42
00:02:23,490 --> 00:02:25,960
with this trap and emulate strategy of

43
00:02:25,960 --> 00:02:28,740
full virtualization, and that is. In some

44
00:02:28,740 --> 00:02:33,980
architectures, some privilege instructions may fail silently.

45
00:02:33,980 --> 00:02:36,410
What that means is, you would think

46
00:02:36,410 --> 00:02:39,030
that the instruction actually succeeded, but it

47
00:02:39,030 --> 00:02:43,580
did not. And you may never know about it. And in order to get around

48
00:02:43,580 --> 00:02:48,640
this problem, in fully virtualized systems, the hypervisor will resort

49
00:02:48,640 --> 00:02:54,170
to a binary translation strategy, meaning. It knows what

50
00:02:54,170 --> 00:02:59,030
are the things that might fail silently in the architecture.

51
00:02:59,030 --> 00:03:06,440
Look for those gotchas in each of these individual binaries of the unmodified

52
00:03:06,440 --> 00:03:13,330
guest operating systems. And through binary editing strategy. They will ensure

53
00:03:13,330 --> 00:03:19,970
that those instructions are dealt with careful, so that if those instructions

54
00:03:19,970 --> 00:03:24,670
fail silently, the hypervisor can catch it and take the appropriate action.

55
00:03:24,670 --> 00:03:30,360
And this was a problem in early instances of Intel architecture. Both Intel and

56
00:03:30,360 --> 00:03:34,200
AMD have since started adding virtualization support

57
00:03:34,200 --> 00:03:37,040
to the hardware, so that such problems

58
00:03:37,040 --> 00:03:43,490
don't exist any more. But in the early going, when virtualization technology was

59
00:03:43,490 --> 00:03:50,520
experimented with, in the late 90's and the early 2000s. This was a problem that

60
00:03:50,520 --> 00:03:53,690
virtualization technology had to overcome in order to make

61
00:03:53,690 --> 00:03:57,820
sure that you can run operating systems as unchanged

62
00:03:57,820 --> 00:04:03,540
binaries on a fully virtualized hypervisor. Full virtualization is

63
00:04:03,540 --> 00:04:06,910
the technology that is employed in the vmware system.
