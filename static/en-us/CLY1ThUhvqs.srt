1
00:00:00,000 --> 00:00:01,241
These kernels look similar.

2
00:00:01,241 --> 00:00:02,904
Both of them are reading 5 values for memory,

3
00:00:02,904 --> 00:00:06,737
performing the same arithmetic operations, and writing a single value to memory.

4
00:00:06,737 --> 00:00:08,685
And you'll get good coalescing in both cases.

5
00:00:08,685 --> 00:00:11,523
But the second kernel has a great deal of reuse.

6
00:00:11,523 --> 00:00:15,494
Two adjacent threads will be reading 4 of the same 5 values.

7
00:00:15,494 --> 00:00:18,962
So tiling the n array by copying it into shared memory

8
00:00:18,962 --> 00:00:23,330
before performing the averaging operation will capture that reuse and make the code run faster.

9
00:00:23,330 --> 00:00:29,439
In the first kernel, each value from the A, B, C, D and E arrays gets used only once.

10
00:00:29,439 --> 00:00:33,093
So tiling will just add an extra step without allowing any reuse.

11
00:00:33,093 --> 00:00:37,182
So the second code snippet will benefit from tiling and the first won't.

12
00:00:37,182 --> 00:00:39,151
In fact, the first will probably slow down.
