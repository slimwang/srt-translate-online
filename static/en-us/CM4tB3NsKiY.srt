1
00:00:00,000 --> 00:00:02,992
So you can see where a transpose might come up when you're doing

2
00:00:02,992 --> 00:00:08,259
array operations, matrix operations, image operations.

3
00:00:08,259 --> 00:00:11,863
But the concept is generally applicable to all kinds of data structures.

4
00:00:11,863 --> 00:00:15,898
Let me give an example. Here's some sort of structure you might have, right?

5
00:00:15,898 --> 00:00:20,204
It's a perfectly reasonably structure foo. It's got a float field and an integer field.

6
00:00:20,204 --> 00:00:24,209
And say that you have an array of a thousand of these. Well what does that look like in memory?

7
00:00:24,209 --> 00:00:27,978
You're going to have the floats and the integers interspersed throughout memory.

8
00:00:27,978 --> 00:00:31,021
And as we will talk about later, it can be more efficient to access--

9
00:00:31,021 --> 00:00:33,199
if you're going to do a lot of processing on the floats,

10
00:00:33,199 --> 00:00:36,703
it can be more efficient to access all of the floats contiguously.

11
00:00:36,703 --> 00:00:41,054
You're going to want some operation that lets you take your--

12
00:00:41,054 --> 00:00:46,720
what's called an array of structures representation, and turn it into a structure of arrays.

13
00:00:46,720 --> 00:00:50,777
And that operation is, again, a transpose.

14
00:00:50,777 --> 00:00:55,978
By the way, these two terms are so common that array of structures is often abbreviated AOS.

15
00:00:55,978 --> 00:00:58,908
And structure of arrays is often abbreviated SOA.

16
00:00:58,908 --> 00:01:02,368
You'll see these terms come up frequently in parallel computing.

17
00:01:02,368 --> 00:01:05,256
So, to summarize, the transpose operation is

18
00:01:05,256 --> 00:01:08,756
where tasks reorder data elements in memory.
