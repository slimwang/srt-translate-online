1
00:00:00,109 --> 00:00:02,025
Okay, so let's see ho we'd solve this problem.

2
00:00:02,025 --> 00:00:06,275
The first thing we're going to do is to change the square routine into a cubed routine

3
00:00:06,275 --> 00:00:07,879
and change the math accordingly.

4
00:00:07,879 --> 00:00:09,848
So now we're going to change square to cube.

5
00:00:09,848 --> 00:00:15,323
And instead of computing f x f, now we simply compute f x f x f.

6
00:00:15,323 --> 00:00:19,158
Now, since our new name is cube here, we are going to have to scroll all the way back down here.

7
00:00:19,158 --> 00:00:24,025
And instead of launching square, we've now launched q.

8
00:00:24,025 --> 00:00:26,531
The next thing we have to change is the allocation.

9
00:00:26,531 --> 00:00:31,970
Now, instead of running this on 64 elements, we want to run this on 96 elements.

10
00:00:31,970 --> 00:00:39,043
We've conveniently written this code such that everything is done in terms of array size, including the allocations.

11
00:00:39,043 --> 00:00:40,879
That should be all that we need to do.

12
00:00:40,879 --> 00:00:44,282
Now, let's go over to my shell window and demonstrate that this works, okay?

13
00:00:44,282 --> 00:00:46,752
Now we're going to do it in our own terminal window.

14
00:00:46,752 --> 00:00:50,956
First, I'll make sure to show you that I actually made the changes in this file.

15
00:00:50,956 --> 00:00:56,161
Notice that we now have a cube routine, f x f x f and now 96.

16
00:00:56,161 --> 00:00:59,796
Now, we're going to compile it into a cube executable.

17
00:00:59,796 --> 00:01:02,101
Then we're going to run it.

18
00:01:02,101 --> 00:01:07,564
Notice that instead of printing out squares now it prints 0, 1, 8, 27 and so on.

19
00:01:07,564 --> 00:01:09,340
Ninety-six cubes altogether.

20
00:01:09,340 --> 00:01:11,814
Okay, good work. Let's move on.
