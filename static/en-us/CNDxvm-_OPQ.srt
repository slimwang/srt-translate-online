1
00:00:00,000 --> 00:00:05,000
Here's a little bit of Python code. Very simple to do exactly this.

2
00:00:05,000 --> 00:00:10,000
Here's our list from the example, and we want to know where 84 will fall.

3
00:00:10,000 --> 00:00:14,000
What position 84 will be in in the sorted list? All we need to do is count.

4
00:00:14,000 --> 00:00:20,000
We start off with this pos variable set to 0. We loop through all the values in the list.

5
00:00:20,000 --> 00:00:24,000
And for each one we say, "Well, is it smaller than the value we're asking about?"

6
00:00:24,000 --> 00:00:29,000
If so, we increment the position and sort of bump it one space to the right in the sorted list.

7
00:00:29,000 --> 00:00:35,000
And then when we're done, we'll just return in that position. So in this list, 84 will be in position 10.

8
00:00:35,000 --> 00:00:39,000
We're going to use this idea now to do something a little more clever.

9
00:00:39,000 --> 00:00:43,000
Let's imagine we've got some list and it has some value V in it.

10
00:00:43,000 --> 00:00:47,000
We know now how we can actually figure out where V will go in the sorted list.

11
00:00:47,000 --> 00:00:52,000
Let's actually put it there. Let's actually put that value in the list at that position.

12
00:00:52,000 --> 00:00:55,000
We'll generate a new list Lâ

13
00:00:55,000 --> 00:00:59,000
and we're going to put in that list what's going to be a permutation of these values.

14
00:00:59,000 --> 00:01:04,000
We're going to shuffle around these values, but we're going to put V in its final resting place

15
00:01:04,000 --> 00:01:08,000
as it were the final sorted position and make sure that to its left are all things

16
00:01:08,000 --> 00:01:12,000
less than V and to its right are all things greater than V.

17
00:01:12,000 --> 00:01:15,000
And apart from that, we don't care what the order inside is.

18
00:01:15,000 --> 00:01:20,000
It's kind of a partially sorted list, and we call this partitioning around V.

19
00:01:20,000 --> 00:01:25,000
What I'd like you to do is modify the Python code that we're just looking at

20
00:01:25,000 --> 00:01:30,000
to take the list L and the value of V and return a new list Lâ that has the property

21
00:01:30,000 --> 00:01:35,000
that V is in its final sorted place, everything to the left of it is to the left of it,

22
00:01:35,000 --> 00:01:38,000
and everything to the right of it is to the right of it.
