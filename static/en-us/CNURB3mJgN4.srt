1
00:00:02,186 --> 00:00:03,868
Welcome to the fourth Office Hours.

2
00:00:03,868 --> 00:00:05,771
We are doing this episode a little different

3
00:00:05,771 --> 00:00:06,923
than we have done them in the past

4
00:00:06,923 --> 00:00:09,615
because a lot of people hang out with a bunch of

5
00:00:09,615 --> 00:00:11,903
students and Peter is doing too.

6
00:00:11,903 --> 00:00:14,034
Alright. I hope the technology is going to work and

7
00:00:14,034 --> 00:00:15,972
it’s good to see you all there.

8
00:00:15,972 --> 00:00:19,669
I see a bunch of smiling faces. Let’s get started.

9
00:00:19,669 --> 00:00:24,204
So I think the first question, who is it from?

10
00:00:24,204 --> 00:00:25,537
Let’s let Amy asked the first question.

11
00:00:25,537 --> 00:00:29,673
Okay.

12
00:00:29,673 --> 00:00:32,054
I am just curious if you are going to have a

13
00:00:32,054 --> 00:00:34,425
programming contest or final project like

14
00:00:34,425 --> 00:00:37,503
you did in CS 101?

15
00:00:37,503 --> 00:00:39,394
Yeah, I think that’s a great idea.

16
00:00:39,394 --> 00:00:42,380
So we will do something and I think it will be

17
00:00:42,380 --> 00:00:46,811
open ended like in 101so the contest will be

18
00:00:46,811 --> 00:00:48,852
impress us with something cool.

19
00:00:48,852 --> 00:00:55,093
So we will go ahead and get that going for you.

20
00:00:55,093 --> 00:00:58,751
Next, Deep, why don’t you ask your question?

21
00:00:58,751 --> 00:01:01,880
So in what instances are – is functional programming

22
00:01:01,880 --> 00:01:06,152
a better solution than imperative programming?

23
00:01:06,152 --> 00:01:07,404
That’s a great question.

24
00:01:07,404 --> 00:01:09,960
If you want to start some long battles,

25
00:01:09,960 --> 00:01:11,639
you can bring that up,

26
00:01:11,639 --> 00:01:16,510
and people will take their sides.

27
00:01:16,510 --> 00:01:20,904
I see – I am not dogmatic about any one approach.

28
00:01:20,904 --> 00:01:23,388
I think there is – you could use all the tools

29
00:01:23,388 --> 00:01:26,895
you have.. So why would you want to use

30
00:01:26,895 --> 00:01:28,501
functional programming?

31
00:01:28,501 --> 00:01:32,753
I think one of the best arguments for it is that

32
00:01:32,753 --> 00:01:37,820
it’s easier to test in that functional programming is a

33
00:01:37,820 --> 00:01:39,832
it inputs to the program, test if I’ve got the

34
00:01:39,832 --> 00:01:43,316
right outputs, that’s all I need to know.

35
00:01:43,316 --> 00:01:45,744
The imperative programming is not just one

36
00:01:45,744 --> 00:01:48,258
of the inputs and outputs but is

37
00:01:48,258 --> 00:01:51,153
what happened to me recently.

38
00:01:51,153 --> 00:01:53,996
I need a whole history of statements and

39
00:01:53,996 --> 00:01:56,593
what the current state is and then I can tell you

40
00:01:56,593 --> 00:01:58,224
the stuff that I need to do but that's a little bit

41
00:01:58,224 --> 00:02:02,722
harder to come and set up the test.

42
00:02:02,722 --> 00:02:04,701
Then – so then the question is why would somebody

43
00:02:04,701 --> 00:02:06,649
want to do imperative programming and

44
00:02:06,649 --> 00:02:09,912
I think the answer is – there is two,

45
00:02:09,912 --> 00:02:13,193
one is an efficiency issue that sometimes

46
00:02:13,193 --> 00:02:16,391
it’s easier to modify an existing structure than

47
00:02:16,391 --> 00:02:21,064
create a new one. So for example in functional

48
00:02:21,064 --> 00:02:23,986
programming, if you have a database

49
00:02:23,986 --> 00:02:26,577
especially the million elements amongst you want to add

50
00:02:26,577 --> 00:02:30,145
one but use it in the functional way you have to create

51
00:02:30,145 --> 00:02:33,406
a new database that has a million and one elements.

52
00:02:33,406 --> 00:02:38,858
Sometimes it’s a little hard to do that.

53
00:02:38,858 --> 00:02:41,615
And other, besides efficiency, there’s also sort of a

54
00:02:41,615 --> 00:02:45,672
naturalness idea; that some problems are easily

55
00:02:45,672 --> 00:02:47,907
expressed as a mathematical function

56
00:02:47,907 --> 00:02:50,044
and other problems are expressed as a

57
00:02:50,044 --> 00:02:51,950
set of actions, a recipe,

58
00:02:51,950 --> 00:02:53,857
first you do this, then you do this,

59
00:02:53,857 --> 00:02:55,378
then you do the next thing.

60
00:02:55,378 --> 00:02:58,301
And you want it to be as natural and you want to

61
00:02:58,301 --> 00:03:00,578
have a close as a match as you can

62
00:03:00,578 --> 00:03:03,603
between problem and solution

63
00:03:03,603 --> 00:03:06,010
so that’s I think the main way to fix them.

64
00:03:06,010 --> 00:03:08,615
I guess another issue that’s starting to come up more

65
00:03:08,615 --> 00:03:12,249
and more is how to deal with parallel program.

66
00:03:12,249 --> 00:03:14,929
And that’s one reason why I think you see functional

67
00:03:14,929 --> 00:03:18,035
programming making a come back that had been

68
00:03:18,035 --> 00:03:21,843
mostly kind of an academic thing throughout

69
00:03:21,843 --> 00:03:27,118
like the ‘70s and ‘80s, now it’s seen as more practical

70
00:03:27,118 --> 00:03:32,683
because people have access to parallel machines

71
00:03:32,683 --> 00:03:36,130
and it’s harder to deal with states in imperative

72
00:03:36,130 --> 00:03:39,507
programming when you have to say, well,

73
00:03:39,507 --> 00:03:41,677
now one processor is operating on my data to

74
00:03:41,677 --> 00:03:45,260
make sure it doesn’t step on the other processor.

75
00:03:45,260 --> 00:03:47,875
But functional is easier to deal with in that way

76
00:03:47,875 --> 00:03:49,491
because you just compute one function on one

77
00:03:49,491 --> 00:03:52,936
machine, another function on another machine and

78
00:03:52,936 --> 00:03:54,680
if you are passing in the right data, then there is

79
00:03:54,680 --> 00:03:57,201
no way that they can interfere with them.

80
00:03:57,201 --> 00:03:59,059
So those are some of the issues involved and then

81
00:03:59,059 --> 00:04:01,559
I think beyond those issues, a lot of it is

82
00:04:01,559 --> 00:04:06,846
just experience, whether you are used it.

83
00:04:06,846 --> 00:04:10,244
Alright, great, thanks. Neal, what about you?

84
00:04:10,244 --> 00:04:13,964
You had some questions that you sent me.

85
00:04:13,964 --> 00:04:16,236
I think I might have accidentally muted you.

86
00:04:16,236 --> 00:04:16,980
This isn’t what I wanted.

87
00:04:16,980 --> 00:04:18,405
Well, I turn myself on, can you hear me now?

88
00:04:18,405 --> 00:04:19,181
Okay.

89
00:04:19,181 --> 00:04:19,972
Yeah.

90
00:04:19,972 --> 00:04:22,325
Alright, here it is. I will see if the Internet connection

91
00:04:22,325 --> 00:04:26,427
holds up. In the answer to Unit 4.8, Peter, says

92
00:04:26,427 --> 00:04:28,964
everything is in flux.

93
00:04:28,964 --> 00:04:31,644
The solution that he was going through,

94
00:04:31,644 --> 00:04:33,549
it was a little messy by his standards. I guess it

95
00:04:33,549 --> 00:04:36,032
wasn’t on one line and it has more than seven

96
00:04:36,032 --> 00:04:41,398
characters. So he – the implication was that as

97
00:04:41,398 --> 00:04:45,637
you code, you find out whether your representation

98
00:04:45,637 --> 00:04:48,988
is any good. And then if you don’t like how the code

99
00:04:48,988 --> 00:04:50,563
is working out, you go back and change the

100
00:04:50,563 --> 00:04:54,713
representation. And the overwhelming thing for me

101
00:04:54,713 --> 00:04:56,727
experienced the program is to solving a problem is

102
00:04:56,727 --> 00:04:58,653
the feeling that everything is in flux.

103
00:04:58,653 --> 00:05:00,617
You don’t know where to start, you don’t know

104
00:05:00,617 --> 00:05:03,636
what to decide you are going to sit,

105
00:05:03,636 --> 00:05:06,226
while you vary other things around it.

106
00:05:06,226 --> 00:05:08,940
So it’s a general question. But is there

107
00:05:08,940 --> 00:05:11,017
any guidelines for you, how you get started

108
00:05:11,017 --> 00:05:13,503
on a workable representation if that’s the first

109
00:05:13,503 --> 00:05:15,631
thing that you are going to pin down?

110
00:05:15,631 --> 00:05:16,684
Yeah.

111
00:05:16,684 --> 00:05:20,107
And you talked about listing concepts, but that’s

112
00:05:20,107 --> 00:05:23,625
hard to decide what a concept is?

113
00:05:23,625 --> 00:05:25,826
That’s right. And I think –

114
00:05:25,826 --> 00:05:29,113
so this is another question of style, which is maybe

115
00:05:29,113 --> 00:05:32,839
even more important than the imperative versus

116
00:05:32,839 --> 00:05:36,845
functional and this is kind of the exploratory versus

117
00:05:36,845 --> 00:05:41,552
the waterfall model. Obviously the waterfall model

118
00:05:41,552 --> 00:05:45,506
is you finish one stage and then water starts

119
00:05:45,506 --> 00:05:48,167
flowing over the dam on to the next stage.

120
00:05:48,167 --> 00:05:50,409
So the first stage would be you specify the problem

121
00:05:50,409 --> 00:05:52,918
and you do that completely and then when it

122
00:05:52,918 --> 00:05:57,175
specifies, then you start to design your classes

123
00:05:57,175 --> 00:05:59,569
and functions and then when you have the design,

124
00:05:59,569 --> 00:06:01,597
then you start to do the coding, then when you have

125
00:06:01,597 --> 00:06:04,251
the coding, then you start to do the testing and so on.

126
00:06:04,251 --> 00:06:07,019
One step at a time. And in the past

127
00:06:07,019 --> 00:06:10,958
that was a recommended approach.

128
00:06:10,958 --> 00:06:13,140
These days I think it’s more common to use

129
00:06:13,140 --> 00:06:15,974
an exploratory approach where you say, well,

130
00:06:15,974 --> 00:06:19,287
if I do that, I may spend a lot of time at one level

131
00:06:19,287 --> 00:06:22,722
and then three levels later find out that

132
00:06:22,722 --> 00:06:25,785
everything is wrong and I have to go back.

133
00:06:25,785 --> 00:06:28,460
And so the more exploratory approach says let’s use

134
00:06:28,460 --> 00:06:31,172
all our tools at once. Why spend all this time

135
00:06:31,172 --> 00:06:34,140
writing a paper document that describes what I am

136
00:06:34,140 --> 00:06:38,379
going to do when I have a computer at my fingertips.

137
00:06:38,379 --> 00:06:40,845
We are fine with it. And try something out,

138
00:06:40,845 --> 00:06:43,733
see if it was like it’s working, computer will help tell me

139
00:06:43,733 --> 00:06:45,566
if it’s a good design or not.

140
00:06:45,566 --> 00:06:48,669
And yes, I can do some of that design in my head

141
00:06:48,669 --> 00:06:51,924
and try to imagine it sort of good but sometimes

142
00:06:51,924 --> 00:06:54,796
doing it with a computer really helps because

143
00:06:54,796 --> 00:06:58,585
you start out and you find out that it’s too efficient

144
00:06:58,585 --> 00:07:01,395
or the code – the detail code you have to write is

145
00:07:01,395 --> 00:07:03,606
messier than you thought and if you thought the

146
00:07:03,606 --> 00:07:06,886
overall high level design was good, but then the

147
00:07:06,886 --> 00:07:09,863
details of how you manipulate it not so good.

148
00:07:09,863 --> 00:07:12,069
And then – so it’s look like it’s not going in a

149
00:07:12,069 --> 00:07:14,794
good direction, why not back up now.

150
00:07:14,794 --> 00:07:17,730
Don’t live with your bad mistake.

151
00:07:17,730 --> 00:07:21,290
Go back and fix your mistake.

152
00:07:21,290 --> 00:07:28,476
Alright, Next Jeff, looks like you have a question.

153
00:07:28,476 --> 00:07:33,447
I think I have him muted again, I am sorry about that.

154
00:07:33,447 --> 00:07:34,192
I am trying, yeah.

155
00:07:34,192 --> 00:07:35,340
No, I think you muted him.

156
00:07:35,340 --> 00:07:36,991
My question for Andy is, are we going to

157
00:07:36,991 --> 00:07:38,584
have any new glossary sections or

158
00:07:38,584 --> 00:07:41,120
Andy’s corner videos coming up soon?

159
00:07:41,120 --> 00:07:46,017
Yes, I have one in the mix on scoping and specifically

160
00:07:46,017 --> 00:07:48,369
there was a lot of questions in the forms about

161
00:07:48,369 --> 00:07:53,340
decorate or decorator. And I think it’s a

162
00:07:53,340 --> 00:07:55,357
- a part of it - it’s actually not that complex,

163
00:07:55,357 --> 00:07:58,778
it’s going on there but it’s in dealing with all the code

164
00:07:58,778 --> 00:08:01,032
that I think it’s worth explaining.

165
00:08:01,032 --> 00:08:02,312
Yeah, it looks really cool,

166
00:08:02,312 --> 00:08:08,428
and I am looking forward to seeing that video.

167
00:08:08,428 --> 00:08:11,370
Next Alan had a question and Alan I am not sure if

168
00:08:11,370 --> 00:08:15,061
your audio is working right now, so maybe I will

169
00:08:15,061 --> 00:08:16,825
raise it for you but…

170
00:08:16,825 --> 00:08:21,538
Go ahead and try.

171
00:08:21,538 --> 00:08:24,451
You are not coming through for some reason.

172
00:08:24,451 --> 00:08:26,419
So Andy why don’t you read it for him?

173
00:08:26,434 --> 00:08:29,625
Yeah, sure. Okay Alan’s question is – no, actually

174
00:08:29,625 --> 00:08:32,845
Jeff’s lowest cost search function, and he eliminated

175
00:08:32,845 --> 00:08:36,097
the add frontier function by adding next day one as

176
00:08:36,097 --> 00:08:40,422
an explorer continue. And so for certain methods,

177
00:08:40,422 --> 00:08:42,658
Peter you mentioned in the forum I think that this

178
00:08:42,658 --> 00:08:48,005
method may not be ideal and so can you explain why?

179
00:08:48,005 --> 00:08:51,290
I guess, I remember that something was in the forum

180
00:08:51,290 --> 00:08:53,642
but without the code in front of me right now

181
00:08:53,642 --> 00:08:56,548
I am in a little trouble figuring it if –

182
00:08:56,548 --> 00:08:59,755
Jeff maybe you could explain it a little bit more, I don’t have

183
00:08:59,755 --> 00:09:02,316
Yeah, what we did is we took out the

184
00:09:02,316 --> 00:09:04,619
sorting function and use the heap instead.

185
00:09:04,619 --> 00:09:07,000
Oh yeah.

186
00:09:07,000 --> 00:09:09,020
And I didn’t do any filtering before

187
00:09:09,020 --> 00:09:10,193
I approve things on the heap,

188
00:09:10,193 --> 00:09:12,837
I just threw items on the heap one after another

189
00:09:12,837 --> 00:09:15,059
and then relied on the order in the heap to ensure

190
00:09:15,059 --> 00:09:17,284
that I got the lowest item first.

191
00:09:17,284 --> 00:09:18,034
Okay.

192
00:09:18,034 --> 00:09:19,570
And I put a little filter on, yeah,

193
00:09:19,570 --> 00:09:22,308
but it’s not great for all cases is what you got at.

194
00:09:22,308 --> 00:09:24,157
Right. So, a couple of points there.

195
00:09:24,157 --> 00:09:28,812
The one point is the heap absolutely is a right data

196
00:09:28,812 --> 00:09:31,351
script. I wanted to keep the thing simple, you

197
00:09:31,351 --> 00:09:34,567
already knew about sort, so I said that was just

198
00:09:34,567 --> 00:09:37,708
sorted and then we will sort it as often as possible

199
00:09:37,708 --> 00:09:39,043
just to make sure it doesn’t get messed up.

200
00:09:39,043 --> 00:09:42,524
In fact we are sorting it more often than necessary.

201
00:09:42,524 --> 00:09:44,493
But you are right instead of – in a

202
00:09:44,493 --> 00:09:49,135
real implementation a heap or sort of a more abstract

203
00:09:49,135 --> 00:09:51,580
form as we call it a priority queue and then a heap is

204
00:09:51,580 --> 00:09:53,874
a way of implementing a priority queue.

205
00:09:53,874 --> 00:09:55,416
The priority queue is something that –

206
00:09:55,416 --> 00:09:59,663
where you can pull off the best element and

207
00:09:59,663 --> 00:10:01,776
add elements in and you can pull off the best one,

208
00:10:01,776 --> 00:10:03,661
one at a time. But, you don’t have to keep it completely

209
00:10:03,661 --> 00:10:05,837
sorted. So, it’s a little bit more efficient.

210
00:10:05,837 --> 00:10:08,366
So that was a great choice on your part.

211
00:10:08,366 --> 00:10:09,403
So that was one thing.

212
00:10:09,403 --> 00:10:11,154
That was one clear improvement.

213
00:10:11,154 --> 00:10:14,169
Now, the other part is not a clear

214
00:10:14,169 --> 00:10:16,734
improvement but it really depends on the particular

215
00:10:16,734 --> 00:10:20,507
problem where you were saying, if you had two paths

216
00:10:20,507 --> 00:10:22,543
through the same location,

217
00:10:22,543 --> 00:10:24,886
should we do the work of trying to see if there’s

218
00:10:24,886 --> 00:10:27,854
duplicates and if there is, patching it up to make sure

219
00:10:27,854 --> 00:10:30,882
we get the best one through that path or could we

220
00:10:30,882 --> 00:10:32,970
just throw them all on there and say, yeah,

221
00:10:32,970 --> 00:10:36,056
there’s going to be some duplicates but let’s not

222
00:10:36,056 --> 00:10:39,362
worry about it because the sorting function or the

223
00:10:39,362 --> 00:10:42,866
heap will make sure that we get the best one first.

224
00:10:42,866 --> 00:10:44,701
And, the choice between those two really depends on

225
00:10:44,701 --> 00:10:47,444
the problem that if there are lots and lots of

226
00:10:47,444 --> 00:10:50,158
duplicates then probably you want to eliminate.

227
00:10:50,158 --> 00:10:51,617
If there’s only a few duplicates,

228
00:10:51,617 --> 00:10:53,551
then why bother complicating the code.

229
00:10:53,551 --> 00:10:58,694
So, it’s – we like to have one solution

230
00:10:58,694 --> 00:11:01,562
that’s perfectly general and solves every problem.

231
00:11:01,562 --> 00:11:04,452
But, really, different problems have different trade-offs

232
00:11:04,452 --> 00:11:09,252
in terms of the topology of the search space and you want to

233
00:11:09,302 --> 00:11:13,436
choose the implementation that’s right for that

234
00:11:13,436 --> 00:11:15,161
topology, at least when you have a big problem.

235
00:11:15,161 --> 00:11:17,341
If you have a small problem, then it doesn’t matter.

236
00:11:17,341 --> 00:11:21,894
Any algorithm will solve it fast and get it done.

237
00:11:21,894 --> 00:11:28,233
– Alright, looks like Neil has another question. Neil, go ahead.

238
00:11:28,233 --> 00:11:33,139
Yeah, I was going to raise the specter of grading

239
00:11:33,139 --> 00:11:36,392
because people are asking about it and it is,

240
00:11:36,392 --> 00:11:38,852
obviously, one of those things that’s in flux.

241
00:11:38,852 --> 00:11:41,985
But, the overhaul to grading I thought was great.

242
00:11:41,985 --> 00:11:46,102
I thought it was a big improvement to,

243
00:11:46,102 --> 00:11:48,216
you know, to show people that they are right

244
00:11:48,216 --> 00:11:54,295
when they are right and to give them a chance to try again.

245
00:11:54,295 --> 00:11:56,391
But, people like to compare themselves to other people

246
00:11:56,391 --> 00:12:00,912
and when you let everybody get everything 100% right,

247
00:12:00,912 --> 00:12:02,664
then there’s no way that they can

248
00:12:02,664 --> 00:12:04,131
line themselves up against other people.

249
00:12:04,131 --> 00:12:06,815
So, they go to the forums and they wave

250
00:12:06,815 --> 00:12:09,036
their algorithms at each other.

251
00:12:09,036 --> 00:12:13,022
But, how are they – can people find some way of

252
00:12:13,022 --> 00:12:16,491
comparing themselves to each other using the

253
00:12:16,491 --> 00:12:20,048
grading system that’s not being used?

254
00:12:20,048 --> 00:12:22,863
And, has the grading settled down enough so

255
00:12:22,863 --> 00:12:26,385
you can make some definitive ruling about what’s

256
00:12:26,385 --> 00:12:29,827
going on and let everybody know?

257
00:12:29,827 --> 00:12:33,131
And, finally, with the official certification,

258
00:12:33,131 --> 00:12:35,152
is there any progress since -

259
00:12:35,152 --> 00:12:36,755
just anything to be said about whether

260
00:12:36,755 --> 00:12:41,170
there will be at some stage official certification?

261
00:12:41,170 --> 00:12:43,640
– Andy, maybe you know more about this stuff than I do.

262
00:12:43,640 --> 00:12:44,823
– I’ve been and actually programmed the case, so…

263
00:12:44,823 --> 00:12:47,566
Okay. So, there are a lot of questions in there.

264
00:12:47,566 --> 00:12:49,445
So, about the – I’ll go backwards.

265
00:12:49,445 --> 00:12:53,581
I remember that I did expect that, okay.

266
00:12:53,581 --> 00:12:57,661
So, certifications, I think the certifications –

267
00:12:57,661 --> 00:13:01,273
right now if you took 2 – 101 or a 273,

268
00:13:01,273 --> 00:13:04,407
you complete the class you have of PDF I think

269
00:13:04,407 --> 00:13:07,696
it is that says you completed the class with ecstas.

270
00:13:07,696 --> 00:13:09,511
We’re going to do the same thing for this class and

271
00:13:09,511 --> 00:13:13,582
probably go to the next one but don’t hold me to that.

272
00:13:13,582 --> 00:13:15,818
And, eventually we’re going to move to a

273
00:13:15,818 --> 00:13:18,456
testing center sort of module where, if you want,

274
00:13:18,456 --> 00:13:20,160
you can go and get an official certification there and

275
00:13:20,160 --> 00:13:21,573
then we’ll have a little more weight to it –

276
00:13:21,573 --> 00:13:25,220
I know people are worried about the credibility of

277
00:13:25,220 --> 00:13:29,409
these certificates but there’s nothing you can achieve in

278
00:13:29,409 --> 00:13:30,643
at least that would give a little more weight to those certificates.

279
00:13:30,643 --> 00:13:32,210
For now, though, we’re going to do the same thing we did in

280
00:13:32,210 --> 00:13:35,977
101 and 373 and I think at these levels of distinctions and

281
00:13:35,977 --> 00:13:37,914
we haven’t set those specials yet.

282
00:13:37,914 --> 00:13:41,635
We’ll do that and message it to you as soon as we

283
00:13:41,635 --> 00:13:43,985
figure out what we want to do but it will be

284
00:13:43,985 --> 00:13:46,389
based basically on the final because, like you said,

285
00:13:46,389 --> 00:13:48,743
there is no reason someone who wants to get 100

286
00:13:48,743 --> 00:13:53,378
on their homework to not get 100.

287
00:13:53,378 --> 00:13:55,230
Remind me what your question two and

288
00:13:55,230 --> 00:13:56,601
one were or one of them at least.

289
00:13:56,601 --> 00:13:59,284
Now, you’re making me go backwards.

290
00:13:59,284 --> 00:14:00,150
– Yeah.

291
00:14:00,150 --> 00:14:02,818
– Yeah.

292
00:14:02,818 --> 00:14:03,738
Now you’re making me go backwards. What did I say?

293
00:14:03,738 --> 00:14:07,534
The – has the grading – the model settled down now

294
00:14:07,534 --> 00:14:09,510
so people will know what it is?

295
00:14:09,510 --> 00:14:12,779
People were saying do I get graded on the homework,

296
00:14:12,779 --> 00:14:16,950
do I get graded on the exam at the end,

297
00:14:16,950 --> 00:14:19,616
how do I tell what my grade is, how do I

298
00:14:19,616 --> 00:14:22,288
tell how I’m doing.

299
00:14:22,288 --> 00:14:24,270
– Right, yeah. The short answer is no.

300
00:14:24,270 --> 00:14:26,971
We’re grading using the re-sit exam.

301
00:14:26,971 --> 00:14:27,674
– We’re still working on it.

302
00:14:27,674 --> 00:14:30,596
– Yes. As people have noticed, coding is a hard thing to

303
00:14:30,596 --> 00:14:34,582
do algorithmically and so what we want is –

304
00:14:34,582 --> 00:14:38,771
I think for this round of classes you can count on the final exam….

305
00:14:38,771 --> 00:14:39,553
Alright.

306
00:14:39,553 --> 00:14:42,071
– …which I think is a great exam.

307
00:14:42,071 --> 00:14:43,670
Alright.

308
00:14:43,670 --> 00:14:47,942
– And, I think as we get experience we’ll get better at the exams.

309
00:14:47,942 --> 00:14:50,043
I also think that you should think of what you come

310
00:14:50,043 --> 00:14:52,626
away with these classes, not just a grade,

311
00:14:52,626 --> 00:14:55,433
but also portfolio of things; here are some things

312
00:14:55,433 --> 00:15:00,636
I’ve done and when it comes to showing off to

313
00:15:00,636 --> 00:15:04,507
somebody else, yes, it’s nice to say I’ve got a

314
00:15:04,507 --> 00:15:07,255
certificate that says high distinction on it.

315
00:15:07,255 --> 00:15:11,078
But, ultimately, the point where you’ve got this

316
00:15:11,078 --> 00:15:12,912
portfolio – or notebook,

317
00:15:12,912 --> 00:15:15,099
here’s all the stuff I’ve done and you can

318
00:15:15,099 --> 00:15:16,511
show that to somebody else and

319
00:15:16,511 --> 00:15:22,156
that may be more convincing than just having a grade.

320
00:15:22,156 --> 00:15:24,980
Right. Thank you.

321
00:15:24,980 --> 00:15:26,450
– Next one, we’ll take – Prajit,

322
00:15:26,450 --> 00:15:28,196
looks like you have another question.

323
00:15:28,196 --> 00:15:31,647
Hi. So, I was thinking – so, obviously,

324
00:15:31,647 --> 00:15:34,534
you can’t look through your whole code just to find one bug.

325
00:15:34,534 --> 00:15:37,164
So, how would you narrow down your search space to

326
00:15:37,164 --> 00:15:38,228
look for a bug?

327
00:15:38,228 --> 00:15:39,669
Is there some sort of, like, process?

328
00:15:39,669 --> 00:15:43,402
Or, is it just, like, intuition?

329
00:15:43,402 --> 00:15:46,523
– The first place to start is to write lots of tests.

330
00:15:46,523 --> 00:15:49,454
I’ve been trying to emphasize that.

331
00:15:49,454 --> 00:15:51,837
I’ve been going a little bit quick in class so I haven’t

332
00:15:51,837 --> 00:15:54,681
done as many as I probably should.

333
00:15:54,681 --> 00:15:58,667
But, as you write each function, an important part is

334
00:15:58,667 --> 00:16:01,750
writing tests for that function.

335
00:16:01,750 --> 00:16:07,439
And, then if the tests are all passing, then you know

336
00:16:07,439 --> 00:16:09,425
that you have at least some constraints on where

337
00:16:09,425 --> 00:16:13,893
the bug could be and then you’ve asked, well,

338
00:16:13,893 --> 00:16:16,204
does some function have a bug.

339
00:16:16,204 --> 00:16:18,068
Yes, let’s concentrate there.

340
00:16:18,068 --> 00:16:19,759
No functions have a bug but I’m still not getting the

341
00:16:19,759 --> 00:16:23,669
right answer, then either one of my functions

342
00:16:23,669 --> 00:16:26,604
I haven’t tested well enough or it could be something

343
00:16:26,604 --> 00:16:29,851
wrong or an input that I haven’t looked at.

344
00:16:29,851 --> 00:16:34,583
One of my tests is just wrong; I tested does

345
00:16:34,583 --> 00:16:39,919
two plus two equal five and my program said yes,

346
00:16:39,919 --> 00:16:43,420
so I’m happy; then yes, fix the test.

347
00:16:43,420 --> 00:16:46,541
Or, maybe it’s some interaction between something

348
00:16:46,541 --> 00:16:49,625
that you didn’t quite understand and then you –

349
00:16:49,625 --> 00:16:51,753
I think the first place to look is start having other

350
00:16:51,753 --> 00:16:54,872
tests that say go about the individual functions,

351
00:16:54,872 --> 00:16:58,083
how they work together.

352
00:16:58,083 --> 00:17:00,536
So that’s one way of looking forward in

353
00:17:00,536 --> 00:17:02,190
terms of debugging.

354
00:17:02,190 --> 00:17:05,953
But, also backwards that you run something and

355
00:17:05,953 --> 00:17:07,662
either you get an error message and then you can

356
00:17:07,662 --> 00:17:09,488
look and say where am I,

357
00:17:09,488 --> 00:17:11,549
what was the error message, usually it’s

358
00:17:11,549 --> 00:17:15,750
something like some function or some line of code

359
00:17:15,750 --> 00:17:20,817
where it’s passed a value that I didn’t expect, and

360
00:17:20,817 --> 00:17:23,678
then you can start saying where did that come from

361
00:17:23,678 --> 00:17:27,030
and you can either add more tests and break it down

362
00:17:27,030 --> 00:17:28,953
and test each part of the program to see if it’s

363
00:17:28,953 --> 00:17:30,833
generating the right thing.

364
00:17:30,833 --> 00:17:34,819
You can put in some print statements into your functions that’s

365
00:17:34,819 --> 00:17:38,816
saying okay, I have an error here.

366
00:17:38,816 --> 00:17:40,252
What was happening there?

367
00:17:40,252 --> 00:17:43,347
And, you have a choice of either –

368
00:17:43,347 --> 00:17:44,913
there are debuggers that you can run that

369
00:17:44,913 --> 00:17:47,921
can calculate loss in an app and show where you are

370
00:17:47,921 --> 00:17:51,548
right now or you can rerun the program after putting

371
00:17:51,548 --> 00:17:54,719
in print statements and examine the output.

372
00:17:54,719 --> 00:17:57,716
So, I think those are the main strategies.

373
00:17:57,716 --> 00:18:02,393
– Alright. Amy, you have a question. You can go ahead.

374
00:18:02,393 --> 00:18:06,343
I was confessing earlier that on the bridge problem

375
00:18:06,343 --> 00:18:09,417
my test was completely wrong and so I

376
00:18:09,417 --> 00:18:12,016
came up with the wrong answer for the best solution.

377
00:18:12,016 --> 00:18:14,454
How do you go about validating your tests if you

378
00:18:14,454 --> 00:18:16,349
don’t have a domain expert available or if you

379
00:18:16,349 --> 00:18:19,285
don’t really know it well enough yourself?

380
00:18:19,285 --> 00:18:22,326
Yeah, That’s a great question because I did the same thing.

381
00:18:22,326 --> 00:18:24,056
I cheated too, right?

382
00:18:24,056 --> 00:18:25,700
I didn’t know what the right test was – or

383
00:18:25,700 --> 00:18:27,546
I had – I put in a couple of little tests, right?

384
00:18:27,546 --> 00:18:29,956
I know what the right answer is when it’s one

385
00:18:29,956 --> 00:18:34,020
step away but, when it’s eight steps away,

386
00:18:34,020 --> 00:18:35,709
I didn’t know what the right answer was.

387
00:18:35,709 --> 00:18:38,761
So, I just ran my function and said, okay, that’s my test.

388
00:18:38,761 --> 00:18:42,286
And, this is a good way to indicate that

389
00:18:42,286 --> 00:18:44,190
there are two types of tests, right?

390
00:18:44,190 --> 00:18:51,956
thing and then there are regression tests that ask

391
00:18:51,956 --> 00:18:53,764
has something changed.

392
00:18:53,764 --> 00:18:55,685
And, the regression tests, you are trying to prove

393
00:18:55,685 --> 00:18:58,380
that I got the right answer but you’re just saying,

394
00:18:58,380 --> 00:19:00,067
anytime I make a change to my program,

395
00:19:00,067 --> 00:19:03,859
run these things over again and see if the results

396
00:19:03,859 --> 00:19:06,538
I get are different than they were before

397
00:19:06,538 --> 00:19:08,809
so there’s an indication that you broke something.

398
00:19:08,809 --> 00:19:10,067
– Does that make sense?

399
00:19:10,067 --> 00:19:11,258
– If you don’t know what the right answer is,

400
00:19:11,258 --> 00:19:13,610
you can at least have this regression path.

401
00:19:13,610 --> 00:19:15,652
But, you really want to know what the right answer is.

402
00:19:15,652 --> 00:19:17,248
And, you can break – you can search

403
00:19:17,248 --> 00:19:18,900
and break it down into pieces.

404
00:19:18,900 --> 00:19:22,947
So, one thing that I probably should have showed but I didn’t

405
00:19:22,947 --> 00:19:25,674
is I should have had a function that says is this a

406
00:19:25,674 --> 00:19:31,854
valid solution to say given a problem and a solution,

407
00:19:31,854 --> 00:19:34,840
does this path that is the solution,

408
00:19:34,840 --> 00:19:38,307
is that valid and are all the actions legal and

409
00:19:38,307 --> 00:19:40,493
does it reach the goal at stake.

410
00:19:40,493 --> 00:19:44,070
And if you have that, then you can say –

411
00:19:44,070 --> 00:19:49,054
the first assertion you can make is valid solution

412
00:19:49,054 --> 00:19:53,410
of search from start-to-go is true.

413
00:19:53,410 --> 00:19:55,541
And, if that’s true, then at least you know that the

414
00:19:55,541 --> 00:19:59,158
thing that you’re returning didn’t make any mistakes.

415
00:19:59,158 --> 00:20:01,602
Now, you don’t know that the thing you’re returning is

416
00:20:01,602 --> 00:20:04,675
the shortest test or the best test but at least you’ve

417
00:20:04,675 --> 00:20:08,186
gotten partway there by saying at least it’s not wrong.

418
00:20:08,186 --> 00:20:12,549
And I think that’s another way to kind of approach it.

419
00:20:12,549 --> 00:20:17,838
Then I guess another approach would be exhaustive of –

420
00:20:17,838 --> 00:20:21,682
you can take a small problem and say, now,

421
00:20:21,682 --> 00:20:23,700
I got to write another function which generates all

422
00:20:23,700 --> 00:20:29,484
possible paths between A and B and checks to see if

423
00:20:29,484 --> 00:20:31,946
they are valid and reduce the cost and figure out

424
00:20:31,946 --> 00:20:33,879
which is the best one and then you can say

425
00:20:33,879 --> 00:20:38,377
okay, that should be my answer when I applied a search.

426
00:20:38,377 --> 00:20:42,969
So you can write a separate program that’s going to

427
00:20:42,969 --> 00:20:45,088
compute the answer for you that’s solely for the

428
00:20:45,088 --> 00:20:50,750
purpose of testing and I think this is like building scaffolding.

429
00:20:50,750 --> 00:20:55,374
When you’re constructing a multistory building with a lot

430
00:20:55,374 --> 00:20:58,992
of scaffolding that gets built on the outside just so

431
00:20:58,992 --> 00:21:01,451
that the construction workers can step around

432
00:21:01,451 --> 00:21:03,372
and not falloff,

433
00:21:03,372 --> 00:21:05,855
but then when you done you take all the scaffolding down.

434
00:21:05,855 --> 00:21:07,772
So testing is a lot like that, you may end up

435
00:21:07,772 --> 00:21:10,184
writing functions that are only good for testing,

436
00:21:10,184 --> 00:21:13,985
they don’t end up as part of your final program,

437
00:21:13,985 --> 00:21:16,316
but of course you don’t have to take them down,

438
00:21:16,316 --> 00:21:18,473
you can still leave them in your program,

439
00:21:18,473 --> 00:21:21,063
because you may want to test again later.

440
00:21:21,063 --> 00:21:23,721
Cool. Thank you.

441
00:21:23,721 --> 00:21:30,299
Jeff, you had another question?

442
00:21:30,299 --> 00:21:31,817
A lot of questions, I have to go back and

443
00:21:31,817 --> 00:21:33,766
try to remember which one it is.

444
00:21:33,766 --> 00:21:36,238
I think this one is, after this class is over,

445
00:21:36,238 --> 00:21:38,825
there is a lot of different things we could do on,

446
00:21:38,825 --> 00:21:41,439
so follow up on it, we could learn a new language,

447
00:21:41,439 --> 00:21:44,572
we could learn more data structures, more algorithms and

448
00:21:44,572 --> 00:21:48,342
I was wondering what you would recommend that

449
00:21:48,342 --> 00:21:51,450
we do and also what is you’d ask they going to offer

450
00:21:51,450 --> 00:21:57,690
on ERM versus the tape. Thanks.

451
00:21:57,690 --> 00:21:59,305
I can talk about what you’d ask he’s going to offer?

452
00:21:59,305 --> 00:22:00,096
Yeah, go ahead.

453
00:22:00,096 --> 00:22:01,556
So, as far as computer science is concerned,

454
00:22:01,556 --> 00:22:04,548
we have algorithms and data structure class,

455
00:22:04,548 --> 00:22:05,800
software design and the

456
00:22:05,800 --> 00:22:07,767
software testing class coming up.

457
00:22:07,767 --> 00:22:09,528
We’re also doing a little bit of branching:

458
00:22:09,528 --> 00:22:11,918
we’re going to go into stats and because, of course,

459
00:22:11,918 --> 00:22:14,617
which actually I will be teaching and discrete

460
00:22:14,617 --> 00:22:18,021
math course, so once we actually get

461
00:22:18,021 --> 00:22:22,356
some more interns and stuff.

462
00:22:22,356 --> 00:22:25,897
Yeah, I think you should be driven by your own

463
00:22:25,897 --> 00:22:29,920
interest and I guess from my point of view,

464
00:22:29,920 --> 00:22:31,389
if you want to learn programming,

465
00:22:31,389 --> 00:22:35,769
the best thing to do is program and so find a project

466
00:22:35,769 --> 00:22:37,531
that you are interesting in that you want to do

467
00:22:37,531 --> 00:22:41,033
and start doing it and then figure out what if

468
00:22:41,033 --> 00:22:45,872
it is that we don’t know and find a class or

469
00:22:45,872 --> 00:22:48,859
book or a website or a friend that

470
00:22:48,859 --> 00:22:53,543
together you can learn what’s missing.

471
00:22:53,543 --> 00:23:05,314
Alright. So next, it looks like Neil you have another question?

472
00:23:05,314 --> 00:23:08,600
My microphone is on now. Okay. Can you hear me?

473
00:23:08,600 --> 00:23:08,985
Yeah.

474
00:23:08,985 --> 00:23:12,401
Yeah, this was in unit 4,

475
00:23:12,401 --> 00:23:15,092
just about brute-force versus analysis because we

476
00:23:15,092 --> 00:23:18,942
had these two problems, there was the glass pouring

477
00:23:18,942 --> 00:23:21,487
and there was the bridge, but the bridge there is a

478
00:23:21,487 --> 00:23:24,806
simple insight you can have as a –

479
00:23:24,806 --> 00:23:27,362
you can realize the slowest people have to go across

480
00:23:27,362 --> 00:23:32,033
together and that’s something that a brute-force

481
00:23:32,033 --> 00:23:34,540
simple search doesn’t realize,

482
00:23:34,540 --> 00:23:39,687
it just tries everything and finds us the best result.

483
00:23:39,687 --> 00:23:42,031
But a little bit more analysis might have given you a

484
00:23:42,031 --> 00:23:44,929
clue to go somewhere else with the solution

485
00:23:44,929 --> 00:23:46,110
you looked for.

486
00:23:46,110 --> 00:23:47,867
And the same with the glass pouring because you

487
00:23:47,867 --> 00:23:55,782
can think about it and ST Powchar found simple

488
00:23:55,782 --> 00:23:59,229
mathematical solution to it and I looked at it and

489
00:23:59,229 --> 00:24:05,018
found a loop in – a loop of states that lets you cut

490
00:24:05,018 --> 00:24:07,252
by half the number of places you have to explore and

491
00:24:07,252 --> 00:24:09,464
really you only go in one or two directions, so.

492
00:24:09,464 --> 00:24:11,008
Right.

493
00:24:11,008 --> 00:24:15,872
So the question is, how do you figure out whether –

494
00:24:15,872 --> 00:24:19,130
you can throw these general tools at something,

495
00:24:19,130 --> 00:24:23,894
like a brute-force search or you can analyze further,

496
00:24:23,894 --> 00:24:26,796
think more about the individual problem,

497
00:24:26,796 --> 00:24:29,623
so what do you do?

498
00:24:29,623 --> 00:24:31,237
I guess in the sense of what

499
00:24:31,237 --> 00:24:32,803
we’re trying to do to some extent,

500
00:24:32,803 --> 00:24:34,355
and it depends on the problem.

501
00:24:34,355 --> 00:24:37,270
So for all the things we did,

502
00:24:37,270 --> 00:24:39,955
you can apply brute-force search and you get an answer

503
00:24:39,955 --> 00:24:43,579
within a second, so if you get an answer in a second

504
00:24:43,579 --> 00:24:47,186
why bother spending hours working on it.

505
00:24:47,186 --> 00:24:52,116
Now, that’s not completely clear cut because yes we

506
00:24:52,116 --> 00:24:53,825
can get an answer quickly, go ahead and do it,

507
00:24:53,825 --> 00:24:56,534
but if you spend time thinking about it,

508
00:24:56,534 --> 00:24:59,997
then you’d be more prepared to solve bigger problems,

509
00:24:59,997 --> 00:25:01,832
bigger problems with the same kind,

510
00:25:01,832 --> 00:25:03,817
or problems of the different kind,

511
00:25:03,817 --> 00:25:06,714
if you have that kind of analysis for you.

512
00:25:06,714 --> 00:25:09,289
So I think you need to decide where do you –

513
00:25:09,289 --> 00:25:11,195
when you’re stuck,

514
00:25:11,195 --> 00:25:13,247
when the tools you have aren’t working,

515
00:25:13,247 --> 00:25:15,094
aren’t scaling up the larger problems

516
00:25:15,094 --> 00:25:17,228
then you have to think harder.

517
00:25:17,228 --> 00:25:22,214
Now, there are ways of having a combination of

518
00:25:22,214 --> 00:25:27,600
sort of this novel mathematical analysis and the fully

519
00:25:27,600 --> 00:25:32,916
automated analysis that I showed where you can give

520
00:25:32,916 --> 00:25:36,016
your algorithms hints rather than give them complete

521
00:25:36,016 --> 00:25:38,742
solutions and we didn’t show any of that. Right?

522
00:25:38,742 --> 00:25:42,739
So we showed sort of – we’re about halfway there

523
00:25:42,739 --> 00:25:44,413
and we said we have an algorithm

524
00:25:44,413 --> 00:25:45,814
that’s smart enough to

525
00:25:45,814 --> 00:25:49,261
only consider the shortest task first.

526
00:25:49,261 --> 00:25:50,290
But if you think about it,

527
00:25:50,290 --> 00:25:54,146
you want to get from start state to a goal and

528
00:25:54,146 --> 00:25:57,003
where’s shortest path first, so we’re starting at

529
00:25:57,003 --> 00:26:01,409
the start and we’re like going out in concentric circles

530
00:26:01,409 --> 00:26:03,601
and that’s good so we aren’t going a really long

531
00:26:03,601 --> 00:26:06,662
ways and not getting anywhere but we’re going in concentric

532
00:26:06,662 --> 00:26:08,128
circles in all directions,

533
00:26:08,128 --> 00:26:09,274
so we’re really like to go in

534
00:26:09,274 --> 00:26:11,773
concentric circles more in this direction,

535
00:26:11,773 --> 00:26:13,309
towards the goal and not in

536
00:26:13,309 --> 00:26:15,428
concentric goals in the other directions.

537
00:26:15,428 --> 00:26:17,434
And there are algorithms that do that,

538
00:26:17,434 --> 00:26:20,965
that allow you to specify a function which is an

539
00:26:20,965 --> 00:26:23,826
estimate of how far away the goal is,

540
00:26:23,826 --> 00:26:25,708
if you knew exactly how far away the goal is,

541
00:26:25,708 --> 00:26:27,803
the problem would be easy because you just follow

542
00:26:27,803 --> 00:26:30,555
that path, but if you have an estimate then

543
00:26:30,555 --> 00:26:33,679
you can make the search be more of it.

544
00:26:33,679 --> 00:26:37,121
And so there is all sorts of techniques that saying,

545
00:26:37,121 --> 00:26:39,238
well, what types of estimates do I have and

546
00:26:39,238 --> 00:26:41,519
if I have that, what types of search

547
00:26:41,519 --> 00:26:45,211
algorithms can I apply given that?

548
00:26:45,211 --> 00:26:50,740
Now – but all these sort of techniques apply given a

549
00:26:50,740 --> 00:26:53,395
representation of the state space and

550
00:26:53,395 --> 00:26:55,823
I think part of what you are talking about is

551
00:26:55,823 --> 00:26:59,870
you come up with a novel understanding of the problem

552
00:26:59,870 --> 00:27:03,808
of the state space then you can bypass

553
00:27:03,808 --> 00:27:05,866
a lot of these searches and maybe come up with

554
00:27:05,866 --> 00:27:09,131
a state space in which there is far less branching:

555
00:27:09,131 --> 00:27:12,194
it’s only one or two branches big point.

556
00:27:12,194 --> 00:27:15,767
So I think it’s a mix of intuition and

557
00:27:15,767 --> 00:27:18,729
brute-force and kind of guidance

558
00:27:18,729 --> 00:27:21,904
that makes the brute-force more intelligent.

559
00:27:21,904 --> 00:27:22,321
Thanks.

560
00:27:22,328 --> 00:27:23,768
And if you’re interested in learning

561
00:27:23,768 --> 00:27:25,595
a little bit more about sir,

562
00:27:25,595 --> 00:27:30,248
CS 373 I think it’s unit 4 is all about search so A*

563
00:27:30,248 --> 00:27:32,449
and programming that first.

564
00:27:32,449 --> 00:27:38,020
Alright, so maybe we should do one more question.

565
00:27:38,020 --> 00:27:41,610
looks like you have one?

566
00:27:41,610 --> 00:27:44,524
So you always talk about how we had to tackle on

567
00:27:44,524 --> 00:27:47,393
projects to like expand your skill.

568
00:27:47,393 --> 00:27:49,519
So how do you find such open source projects,

569
00:27:49,519 --> 00:27:52,060
would you go to like GitHub or something like that

570
00:27:52,060 --> 00:27:54,299
and just look around or what we’re going to do?

571
00:27:54,299 --> 00:27:57,950
Well, I think GitHub is a good place to look.

572
00:27:57,950 --> 00:28:00,491
You can also start a project on your own if

573
00:28:00,491 --> 00:28:03,287
there is something you want to do,

574
00:28:03,287 --> 00:28:05,863
join somebody else because you learn from other

575
00:28:05,863 --> 00:28:08,280
programmers if you work with somebody to see what

576
00:28:08,280 --> 00:28:11,860
they are doing and get new ideas and just nice to be social

577
00:28:11,860 --> 00:28:15,628
and have somebody else to get partner with.

578
00:28:15,628 --> 00:28:20,070
I know Google does this Summer of Code thing where

579
00:28:20,070 --> 00:28:25,848
we actually pay interns to work on open source projects.

580
00:28:25,848 --> 00:28:29,035
And so that’s a good place to look at it if

581
00:28:29,035 --> 00:28:31,163
you are looking for an internship job, but it is also

582
00:28:31,163 --> 00:28:34,173
a good place to work just because it’s a collection of

583
00:28:34,173 --> 00:28:42,263
open source projects that had been deemed worthy of some funds.

584
00:28:42,263 --> 00:28:47,812
So you can search through there and find a big lesson.

585
00:28:47,812 --> 00:29:01,732
Alright. Seems like Jamie has a question? Jamie?

586
00:29:01,732 --> 00:29:10,129
Hi. I wanted to know if there are thoughts of offering

587
00:29:10,129 --> 00:29:14,850
again the introduction to artificial intelligence schools.

588
00:29:14,850 --> 00:29:19,735
Yeah. So that’s definitely I’d like to do it.

589
00:29:19,735 --> 00:29:21,888
We’re all learning a lot here.

590
00:29:21,888 --> 00:29:23,878
I am learning a lot from doing these classes and

591
00:29:23,878 --> 00:29:26,093
one of the things I’d like to learn is,

592
00:29:26,093 --> 00:29:29,891
is it actually easier the second time around? It’s not.

593
00:29:29,891 --> 00:29:32,625
Boy, it’s going to be bad.

594
00:29:32,625 --> 00:29:34,859
So we want to find out how much and so

595
00:29:34,859 --> 00:29:37,471
I do want to do it at some point.

596
00:29:37,471 --> 00:29:39,700
Sebastian also wants to do it.

597
00:29:39,700 --> 00:29:41,318
It’s just a question of when.

598
00:29:41,318 --> 00:29:44,185
We both have day jobs.

599
00:29:44,185 --> 00:29:46,108
When we did in it in the past,

600
00:29:46,108 --> 00:29:48,386
we did it in conjunction with Stanford,

601
00:29:48,386 --> 00:29:50,555
we don’t know yet Stanford’s schedule,

602
00:29:50,555 --> 00:29:53,657
whether they are going to invite us to teach again or

603
00:29:53,657 --> 00:29:57,969
whether it’s some other professors turn to teach that class.

604
00:29:57,969 --> 00:30:00,776
So we will wait and see what happens there.

605
00:30:00,776 --> 00:30:04,657
And then whether or not we teach at Stanford,

606
00:30:04,688 --> 00:30:08,437
we will at some point definitely do it through udacity

607
00:30:08,437 --> 00:30:13,071
but our schedules aren’t set yet.

608
00:30:13,071 --> 00:30:16,289
Yeah, understood.

609
00:30:16,289 --> 00:30:16,872
So…

610
00:30:16,872 --> 00:30:21,716
Thanks. I am waiting for it.

611
00:30:21,716 --> 00:30:24,906
You could go and you know the material is archived

612
00:30:24,906 --> 00:30:26,470
there so you could look through it, but…

613
00:30:26,470 --> 00:30:29,703
No, I did it the first time.

614
00:30:29,703 --> 00:30:31,135
So you won’t do it again, okay.

615
00:30:31,135 --> 00:30:33,042
We’ll have to make it better than second time then

616
00:30:33,042 --> 00:30:35,776
to make it work really well.

617
00:30:35,776 --> 00:30:38,833
Okay.

618
00:30:38,833 --> 00:30:39,461
Well, thank you.

619
00:30:39,461 --> 00:30:41,155
Will be nice to see it.

620
00:30:41,155 --> 00:30:44,421
Thanks to all of you for joining us and to everyone.

621
00:30:44,421 --> 00:30:46,572
We current have 10 viewers but I suspect

622
00:30:46,572 --> 00:30:49,839
that will go up once this gets posted.

623
00:30:49,839 --> 00:30:50,436
Thanks for watching.

624
00:30:50,436 --> 00:30:55,270
Okay, great. And I also wanted to say, thank you to everybody

625
00:30:55,270 --> 00:30:57,730
here for your participation in the forum.

626
00:30:57,730 --> 00:31:02,410
The forum is really an important part of the class.

627
00:31:02,410 --> 00:31:06,994
In any class you want to have that interaction,

628
00:31:06,994 --> 00:31:09,438
you can come up to me at the end of the lecture

629
00:31:09,438 --> 00:31:12,506
and talk so the forums are the next best thing and

630
00:31:12,506 --> 00:31:15,635
all of have made great contributions,

631
00:31:15,635 --> 00:31:17,870
both in terms of the technical content,

632
00:31:17,870 --> 00:31:19,868
you’re jumping in there and you’re answering questions

633
00:31:19,868 --> 00:31:22,796
and you’re helping people out and also all of you

634
00:31:22,796 --> 00:31:25,098
and the others have really set the tone to

635
00:31:25,098 --> 00:31:28,333
have a very welcoming and supportive forum.

636
00:31:28,333 --> 00:31:32,353
There is nobody complaining or jumping

637
00:31:32,353 --> 00:31:35,735
on other people or being mean and abusive,

638
00:31:35,735 --> 00:31:39,494
I am really impressed with how helpful

639
00:31:39,494 --> 00:31:43,559
and supportive you all have been. So thank you all for that.

640
00:31:43,559 --> 00:31:46,636
Alright, see you in class. Thanks and good luck.

641
00:31:46,636 --> 00:31:53,762
Great. See you. Bye.
