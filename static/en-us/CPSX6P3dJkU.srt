1
00:00:00,000 --> 00:00:04,000
This brings us to a slightly more interesting problem called the Top K Problem.

2
00:00:04,000 --> 00:00:11,000
Here's the idea. Imagine we've got our list of values L, and there's n values in the list.

3
00:00:11,000 --> 00:00:16,000
We can compute the max or the second max, the second largest, just like we've been doing,

4
00:00:16,000 --> 00:00:20,000
but in some sense, it doesn't really give you a very representative sample of what the list is about.

5
00:00:20,000 --> 00:00:23,000
Sometimes, it's nice to have a bit more.

6
00:00:23,000 --> 00:00:28,000
Let's imagine that this list is sorted though it turns out at one half to actually be sorted.

7
00:00:28,000 --> 00:00:36,000
And imagine, they're going to focus on just the ones that would be at the k best out of the n.

8
00:00:36,000 --> 00:00:44,000
It could be the k small as to the k largest depending on the particular application that you're considering.

9
00:00:44,000 --> 00:00:46,000
But knowing a bunch of the ones near the top

10
00:00:46,000 --> 00:00:50,000
instead of just the very tippe top can very instructive.

11
00:00:50,000 --> 00:00:56,000
One natural strategy is to iterate the max procedure so go through the list, find the max,

12
00:00:56,000 --> 00:01:01,000
pull it out of the list, so the list is now in -1 long and then repeat this.

13
00:01:01,000 --> 00:01:05,000
Each time we compute the max, it will be actually the second, the third, the fourth largest

14
00:01:05,000 --> 00:01:08,000
from original list, but it's always the max of the current list.

15
00:01:08,000 --> 00:01:12,000
The simply pretty reasonable thing to do especially if k is small.

16
00:01:12,000 --> 00:01:16,000
You just need one or two or three at the top values.

17
00:01:16,000 --> 00:01:18,000
Another natural thing to do is just sort the whole list.

18
00:01:18,000 --> 00:01:24,000
Once we sorted the whole list, the first k elements of that sorted list are exactly the ones that we want.

19
00:01:24,000 --> 00:01:26,000
This is actually a very simple way of doing it.

20
00:01:26,000 --> 00:01:32,000
In Python, it can just be essentially one or two statements. Insertion is another strategy.

21
00:01:32,000 --> 00:01:37,000
This is the generalization of the solution that I gave for the find the second best example before.

22
00:01:37,000 --> 00:01:41,000
In that example, I kept track of both of the best and the second best,

23
00:01:41,000 --> 00:01:44,000
and then it was running through the list.

24
00:01:44,000 --> 00:01:49,000
In each new element of a list that was encountered, figure out where it would fit into that top two lists.

25
00:01:49,000 --> 00:01:52,000
If it was smaller than both of those, ignore it.

26
00:01:52,000 --> 00:01:56,000
If it's bigger than both of those, put it at the top of the list and bump the list down and so forth.

27
00:01:56,000 --> 00:02:00,000
As always, we're trying to find the best algorithm that we can use to run on our data.

28
00:02:00,000 --> 00:02:03,000
Which of these algorithms has the best Θ?

29
00:02:03,000 --> 00:02:11,000
And I'm going to give a hint. We're looking for the top k out of the list of n elements,

30
00:02:11,000 --> 00:02:14,000
but we're going to look at this question for different values of k.

31
00:02:14,000 --> 00:02:22,000
In particular, if k is half of the list, we want the largest half of the list.

32
00:02:22,000 --> 00:02:26,000
The question is are we better of using selection or insertion?

33
00:02:26,000 --> 00:02:32,000
Both of these are going to have the same Θ for all these examples so I just grouped them together

34
00:02:32,000 --> 00:02:41,000
or is it better to sort the whole list keeping in mind that sorting is a Θ of a log n operation.

35
00:02:41,000 --> 00:02:48,000
Let's say you want to find the best root and items. Is it better to use selection or sorting?

36
00:02:48,000 --> 00:02:57,000
If you want the top log n items, which one is better? This function is the logarithm of the logarithm of n.

37
00:02:57,000 --> 00:03:02,000
As slow growing as logarithm turns out to be, this is even slower or growing,

38
00:03:02,000 --> 00:03:06,000
the logarithm of the logarithm of n, so which one would you choose?

39
00:03:06,000 --> 00:03:10,000
In that case, n finally, let's say you want the top 100.

40
00:03:10,000 --> 00:03:15,000
This is a common thing that you see on the internet a lot, the top 100 movies,

41
00:03:15,000 --> 00:03:20,000
the top 100 Beatles songs, the top 100 times I've used the phrase top 100.

42
00:03:20,000 --> 00:03:23,000
There's a lot of different contexts in which this appears.

43
00:03:23,000 --> 00:03:27,000
And if you're going to do that, are you better of using a selection

44
00:03:27,000 --> 00:03:31,000
or insertion algorithm or to sort the whole list?

45
00:03:31,000 --> 00:03:36,000
What I would like you to do is for each of these columns,

46
00:03:36,000 --> 00:03:42,000
check this box or that box or if they are Θ of each other.

47
00:03:42,000 --> 00:03:46,000
In other words, from an asymptotic standpoint, in this algorithm,

48
00:03:46,000 --> 00:03:54,000
we'll run the same worse case asymptotically then check both of the boxes.
