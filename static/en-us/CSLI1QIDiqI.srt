1
00:00:00,000 --> 00:00:04,000
To be able to solve this, it'll be helpful to go back and take a good look at the algorithm.

2
00:00:04,000 --> 00:00:07,000
There's really two little blocks of things that are going on.

3
00:00:07,000 --> 00:00:12,000
For each node, we check all of its neighbors and once you add that up over all possible nodes

4
00:00:12,000 --> 00:00:18,000
whether all the neighbors of all the nodes, that's (M), so it's constant work for each of those edges.

5
00:00:18,000 --> 00:00:22,000
But for each of the node, we also have to do this shortest distance-so-far operation

6
00:00:22,000 --> 00:00:28,000
and also to remove the shortest distance-so-far operation and so that is, for each node,

7
00:00:28,000 --> 00:00:33,000
It has to do this which using the implementation that we're looking at is another end.

8
00:00:33,000 --> 00:00:39,000
However, the number of edges is always going to be between 0 and n² roughly.

9
00:00:39,000 --> 00:00:46,000
So this quantity really is somewhere between n² and 2(n²). All that is Θ(n²).

10
00:00:46,000 --> 00:00:50,000
So going back to the set of choices, Θ(n²) is what we're looking for.

11
00:00:50,000 --> 00:00:53,000
Now that's a larger running time than most of the things we've look at so far

12
00:00:53,000 --> 00:00:58,000
and in fact, we can do better and I'm hoping that you've already made the realization that

13
00:00:58,000 --> 00:01:03,000
if you got a bunch of values and the two things you want to do with them is, well, more than two things,

14
00:01:03,000 --> 00:01:07,000
you want to be able to find the smallest, you want to be able to delete the smallest,

15
00:01:07,000 --> 00:01:10,000
and you want to be able to take a value that's already in there

16
00:01:10,000 --> 00:01:12,000
and possibly change it to some other value.

17
00:01:12,000 --> 00:01:15,000
That seems like the sort of things that a heap would be really good at.

18
00:01:15,000 --> 00:01:18,000
All right, so let's actually figure out how we can use a heap

19
00:01:18,000 --> 00:01:21,000
in this particular algorithm to get a better running time.
