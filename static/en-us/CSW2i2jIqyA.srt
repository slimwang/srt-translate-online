1
00:00:00,270 --> 00:00:03,170
To solve this problem,
I decided to first create a set of all

2
00:00:03,170 --> 00:00:06,350
students who pass the subway
project at some point.

3
00:00:06,350 --> 00:00:09,640
First I looped over each submission
in the paid_submissions table, which

4
00:00:09,640 --> 00:00:13,660
contains all the project submissions
from students that we're analyzing.

5
00:00:13,660 --> 00:00:15,780
Next I pull out the project
key into the rating.

6
00:00:16,800 --> 00:00:20,660
Next I wanted to check if this
project was the subway_project, and

7
00:00:20,660 --> 00:00:23,490
I could have done that by separately
comparing is this project

8
00:00:23,490 --> 00:00:27,910
the first project in the list, or
is it the second project in the list?

9
00:00:27,910 --> 00:00:31,110
This would work, but there's actually an
easier way to do this if you're familiar

10
00:00:31,110 --> 00:00:32,840
with Python's in keyword.

11
00:00:32,840 --> 00:00:37,830
So instead I checked if this project's
in the list subway_project_lesson_keys.

12
00:00:37,830 --> 00:00:40,510
Next I wanted to check if
the student passed the project, so

13
00:00:40,510 --> 00:00:43,970
I added a condition that
rating is equal to pass.

14
00:00:43,970 --> 00:00:47,060
However, this isn't actually
the only way to pass the project.

15
00:00:47,060 --> 00:00:51,770
In the table description, it mentions
that past means meets specifications,

16
00:00:51,770 --> 00:00:55,050
but distinction means
exceeds specifications.

17
00:00:55,050 --> 00:00:58,540
So I also wanted to consider a rating of
distinction to be passing the project.

18
00:00:59,640 --> 00:01:02,750
Finally, when using multiple ands and
ors in the same check,

19
00:01:02,750 --> 00:01:05,790
it's always important to add
parentheses appropriately.

20
00:01:05,790 --> 00:01:09,950
In this case I wanted to check that
the project was the subway project and

21
00:01:09,950 --> 00:01:12,390
that the student had passed the project.

22
00:01:12,390 --> 00:01:13,040
If so,

23
00:01:13,040 --> 00:01:17,600
then I added this student's account
key to the past subway project set.

24
00:01:17,600 --> 00:01:20,500
Finally, I wanted to check how many
unique students had passed the subway

25
00:01:20,500 --> 00:01:23,610
project, and that turned out
to be 647 in this data set.

26
00:01:25,260 --> 00:01:28,246
Next, I was ready to split the data
in the passing_engagement and

27
00:01:28,246 --> 00:01:31,460
non_passing_engagement and
I started each office the empty list.

28
00:01:33,030 --> 00:01:36,997
I looped over each engagement record
in the paid engagement_in _first_week

29
00:01:36,997 --> 00:01:40,020
table, and I check if the account
key for that engagement record

30
00:01:40,020 --> 00:01:43,370
was one of the account keys that
had passed the subway project.

31
00:01:43,370 --> 00:01:47,920
If so, I appended this engagement
record to the passing_engagement table.

32
00:01:47,920 --> 00:01:51,580
Otherwise, I appended it to
the non_passing_engagement table.

33
00:01:51,580 --> 00:01:54,650
Then I printed out the number
of entries in both tables.

34
00:01:54,650 --> 00:01:57,800
There are about 4,500 entries in
the passing_engagement table and

35
00:01:57,800 --> 00:02:00,901
about 2,300 in the non_passing table
