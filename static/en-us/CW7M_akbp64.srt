1
00:00:00,390 --> 00:00:03,980
So far we've learned that a linear
layout can have a vertical orientation,

2
00:00:03,980 --> 00:00:06,140
or a horizontal orientation.

3
00:00:06,140 --> 00:00:09,380
We've also learned that individual
views can have weight values

4
00:00:09,380 --> 00:00:11,350
to fill up the extra
space in the parent.

5
00:00:12,710 --> 00:00:14,520
Now we;re going to spend
some time learning about

6
00:00:14,520 --> 00:00:16,450
the relative layout view group.

7
00:00:16,450 --> 00:00:19,910
This will help you build
even more flexible layouts.

8
00:00:19,910 --> 00:00:22,140
Do remember Ray the relative layout.

9
00:00:22,140 --> 00:00:25,590
He's the dad, and he's represented
by this view group here.

10
00:00:25,590 --> 00:00:29,250
He helps the children views,
be positioned within this container.

11
00:00:29,250 --> 00:00:32,360
With the relative layout,
you can position children relative to

12
00:00:32,360 --> 00:00:34,840
the parent, such as the top of
the parent or the bottom of the parent.

13
00:00:35,850 --> 00:00:39,680
The other option is to position children
views relative to other children.

14
00:00:39,680 --> 00:00:40,920
Like this.

15
00:00:40,920 --> 00:00:44,520
Let's focus first on the case where
views can be positioned relative to

16
00:00:44,520 --> 00:00:45,780
the parent.

17
00:00:45,780 --> 00:00:50,220
For this example, this parent relative
that is set to have with a batch parent,

18
00:00:50,220 --> 00:00:53,550
and height of match parent,
so it's as big as the device.

19
00:00:53,550 --> 00:00:56,660
The children inside a relative layout,
can be positioned

20
00:00:56,660 --> 00:01:00,880
relative to the parent's left,
top, right or bottom edges.

21
00:01:00,880 --> 00:01:04,519
This is the code for it,
on the child view x amount elements.

22
00:01:04,519 --> 00:01:08,540
For example for the emoji or TextView,
you would add these attributes.

23
00:01:08,540 --> 00:01:14,440
The attribute name follows this
format android:layout_alignParentTop.

24
00:01:14,440 --> 00:01:17,120
This attribute determines
whether the Child view

25
00:01:17,120 --> 00:01:19,400
is align to the parents top edge or not.

26
00:01:19,400 --> 00:01:22,640
So the possible values are true or
false.

27
00:01:22,640 --> 00:01:25,780
If it's true, then the view should
be aligned to the parent's top edge.

28
00:01:25,780 --> 00:01:28,540
If it's false,
then it shouldn't be aligned.

29
00:01:28,540 --> 00:01:30,990
There are attributes for
all the other edges as well.

30
00:01:30,990 --> 00:01:34,800
For example alignParentBottom, for
aligning to the parent's bottom edge.

31
00:01:34,800 --> 00:01:37,460
There's align parent left, for
aligning to the parent's left edge.

32
00:01:37,460 --> 00:01:41,000
And then there's align parent right, for
aligning to the parent's right edge.

33
00:01:42,050 --> 00:01:44,970
You can mix and match, and use multiple
of these attributes at a time.

34
00:01:45,980 --> 00:01:47,680
Take this image view as an example.

35
00:01:47,680 --> 00:01:52,370
We would set the attribute
align parent top to be true,

36
00:01:52,370 --> 00:01:54,850
because it's aligned to
the parent's top edge.

37
00:01:54,850 --> 00:01:57,510
It's also aligned to the parent's
left and right edges.

38
00:01:57,510 --> 00:02:00,220
So we set left to be true,
and right to be true as well.

39
00:02:01,270 --> 00:02:04,896
It's not aligned to the parent's bottom
edge, so we set that to be false.

40
00:02:04,896 --> 00:02:08,410
And so the this text view down here,

41
00:02:08,410 --> 00:02:11,430
it's aligned to parent's bottom edge,
right edge and left edge.

42
00:02:12,580 --> 00:02:15,910
So alignParentBottom would be true,
alignParentLeft would be true,

43
00:02:15,910 --> 00:02:19,809
alignParentRight would be true,
but alignParentTop would be false.

44
00:02:21,280 --> 00:02:24,640
In addition to positioning
a child at the top portion, or

45
00:02:24,640 --> 00:02:28,440
the bottom portion of the screen,
you can also do specific corners.

46
00:02:28,440 --> 00:02:31,850
If we want to position the birthday
text view in the top left corner,

47
00:02:31,850 --> 00:02:36,190
we say align parent top to be true, and
then align parent left to also be true.

48
00:02:37,350 --> 00:02:39,560
To position a view in
the top right corner,

49
00:02:39,560 --> 00:02:43,450
we want to align it to the parent's
top edge and right edges.

50
00:02:43,450 --> 00:02:46,280
So align parent top equals true,
and align parent right equals true.

51
00:02:46,280 --> 00:02:50,850
For the bottom left corner, we're
aligned to the parent's left edge and

52
00:02:50,850 --> 00:02:51,430
bottom edge.

53
00:02:52,780 --> 00:02:54,490
So we say align parent
bottom equals true.

54
00:02:54,490 --> 00:02:56,210
True, and
a line parent left equals true.

55
00:02:57,240 --> 00:03:00,480
These values are false, and
they're false by default, so

56
00:03:00,480 --> 00:03:02,240
you don't need to include
them in the XML code.

57
00:03:02,240 --> 00:03:06,170
And then for the very last corner, it's
aligned to the parent's right edge and

58
00:03:06,170 --> 00:03:07,030
bottom edge.

59
00:03:07,030 --> 00:03:10,940
So align parent bottom and
align parent right are equal to true.

60
00:03:10,940 --> 00:03:12,210
The other two are false.

61
00:03:12,210 --> 00:03:14,180
So we can leave them out of the code.

62
00:03:14,180 --> 00:03:17,140
Believe it or not there's even more
attributes that you could set.

63
00:03:17,140 --> 00:03:20,190
You can also center
the view horizontally, so

64
00:03:20,190 --> 00:03:23,030
you said, android layout under
score horizontal to be true.

65
00:03:23,030 --> 00:03:27,530
And you can also add it to the existing
attributes we learned before.

66
00:03:27,530 --> 00:03:30,550
So if this is a line to the bottom,
and it's centered horizontally,

67
00:03:30,550 --> 00:03:32,220
it would look like this.

68
00:03:32,220 --> 00:03:34,870
The last one I'm going to show
you is layout_centerVertical.

69
00:03:34,870 --> 00:03:39,445
If this is set to true, then it centers
the view vertically within the parent.

70
00:03:39,445 --> 00:03:43,015
The reason why this TextView is aligned
to the left edge of the parent, even if

71
00:03:43,015 --> 00:03:47,085
we didn't set this value, is because all
views that are added to the relative

72
00:03:47,085 --> 00:03:51,550
layout, are positioned by default in
the top left corner of the view group.

73
00:03:51,550 --> 00:03:54,300
All of these attributes are called
view group layout parameters.

74
00:03:54,300 --> 00:03:58,100
Even though they're declared
on the child XML elements,

75
00:03:58,100 --> 00:04:02,440
they're used by the parent view group
to know how to position the children.

76
00:04:02,440 --> 00:04:05,098
Thus, they all start
with layout underscore.

77
00:04:05,098 --> 00:04:08,050
This also follows the pattern
of layout underscore width, and

78
00:04:08,050 --> 00:04:10,960
layout underscore height,
which you are already familiar with.

79
00:04:10,960 --> 00:04:14,810
Those two attributes are also view group
layout perimeters, because they are used

80
00:04:14,810 --> 00:04:17,920
by the view group parent, in order
to position and size the children.

81
00:04:17,920 --> 00:04:22,089
And here's the XML for
relative layout and its children.

82
00:04:22,089 --> 00:04:24,450
You can follow along in the link below.

83
00:04:24,450 --> 00:04:28,110
We have an opening relative layout tag,
and we have a closing tag at the bottom

84
00:04:28,110 --> 00:04:30,740
here, and
all the children are in between.

85
00:04:30,740 --> 00:04:31,250
The width and

86
00:04:31,250 --> 00:04:34,490
height of the RelativeLayout
is set to be match_parent.

87
00:04:34,490 --> 00:04:35,620
Since this is the layout for

88
00:04:35,620 --> 00:04:39,070
our whole app,
it's going to take up the whole screen.

89
00:04:39,070 --> 00:04:42,310
There are three child texts
used inside the RelativeLayout.

90
00:04:42,310 --> 00:04:45,380
The first one is a TextView
that says Happy.

91
00:04:45,380 --> 00:04:49,090
The width and height are wrap_content,
and we have these additional attributes

92
00:04:49,090 --> 00:04:53,520
to help the relative layout, know where
to position this child text view.

93
00:04:53,520 --> 00:04:56,060
We tell it to align it to
the parent's right edge, and

94
00:04:56,060 --> 00:04:58,290
to align to the parent's top edge.

95
00:04:58,290 --> 00:05:01,900
So that puts the happy text view in
the top right corner of the screen.

96
00:05:01,900 --> 00:05:05,670
For the birthday text view, the width
and height are also wrap content.

97
00:05:05,670 --> 00:05:09,100
Then we want it to align to
the parent's bottom and left edges.

98
00:05:09,100 --> 00:05:12,750
So the bottom and left edges
leads to this corner down here.

99
00:05:12,750 --> 00:05:16,690
This last text view that says,
To You, doesn't have any specific

100
00:05:16,690 --> 00:05:19,750
attributes specifying where
it is relative to the parent.

101
00:05:19,750 --> 00:05:22,410
All we know is that the width and
height should be wrap content.

102
00:05:22,410 --> 00:05:25,703
As I mentioned earlier, if you don't
specify where a child view should go,

103
00:05:25,703 --> 00:05:29,267
by default, the relative will add it
to the top left corner of the screen.
