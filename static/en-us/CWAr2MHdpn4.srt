1
00:00:00,690 --> 00:00:04,402
Okay, so now that we have seen two types of dependencies and

2
00:00:04,402 --> 00:00:09,379
how can they affect the scheduling of instructions in a processor just trying to

3
00:00:09,379 --> 00:00:13,705
do more than an instruction per cycle, let's do a dependency quiz.

4
00:00:13,705 --> 00:00:17,589
Let's say we have a processor with a classical five-stage pipeline,

5
00:00:17,589 --> 00:00:21,021
meaning that in one cycle it fetches, then reads registers and

6
00:00:21,021 --> 00:00:24,906
decodes, then executes, then performs a memory access and finally,

7
00:00:24,906 --> 00:00:30,220
writes registers. Let's also say that the processor has forwarding that can,

8
00:00:30,220 --> 00:00:33,850
if the result has been produced, it's going to feed it to the instruction

9
00:00:33,850 --> 00:00:37,450
correctly even though maybe the result has not been written to a register yet.

10
00:00:37,450 --> 00:00:40,330
But the result has to have been produced, meaning that the instruction that

11
00:00:40,330 --> 00:00:44,790
produces the result had to either finish the execute stage if the result is

12
00:00:44,790 --> 00:00:49,250
something like a plus or had to finish the memory stage if this is a load

13
00:00:49,250 --> 00:00:53,580
instruction. So, we can basically then fit that result to the instruction that

14
00:00:53,580 --> 00:00:57,420
executes in the next cycle without having to wait for the producing instruction

15
00:00:57,420 --> 00:01:02,110
to get to the right register stage, just as we discussed before. And finally,

16
00:01:03,260 --> 00:01:07,190
let's say that this processor can execute ten instructions in each stage. So,

17
00:01:07,190 --> 00:01:11,040
theoretically it could in one cycle fetch ten instructions, then decode all ten,

18
00:01:11,040 --> 00:01:13,610
then execute all ten if there are no dependencies, and so on.

19
00:01:13,610 --> 00:01:17,710
So, in five cycles it's going to execute all ten instructions.

20
00:01:17,710 --> 00:01:20,950
If we have 20 instructions, the first ten would be fetched in the first cycle.

21
00:01:20,950 --> 00:01:23,510
It would immediately in the next cycle fetch the ten. So

22
00:01:23,510 --> 00:01:28,360
theoretically, it would be able to finish all 20 in six cycles because we still

23
00:01:28,360 --> 00:01:33,590
have to get to the right reg stage. The question is, when do we execute and

24
00:01:33,590 --> 00:01:38,570
write back each of these instructions? So we have these six instructions and

25
00:01:38,570 --> 00:01:41,640
the question is when do we execute them. To help you get started, let's say

26
00:01:41,640 --> 00:01:46,790
that the very first cycle is cycle zero, so that is when we fetch them all.

27
00:01:46,790 --> 00:01:51,710
It reads registers in cycle one, so it will execute definitely in cycle two.

28
00:01:51,710 --> 00:01:56,730
Also, because the ADD here is using R2, it has to wait for

29
00:01:56,730 --> 00:02:01,480
the MUL to execute and then forwarding will produce MUL's value to the ADD. So

30
00:02:01,480 --> 00:02:05,880
the ADD has to wait and execute in cycle three. If you look at the MUL because

31
00:02:05,880 --> 00:02:09,945
it has executed in cycle two, it will go through the MEM stage in cycle three

32
00:02:09,945 --> 00:02:14,690
and write its result in cycle four. The questions is, when are these others and

33
00:02:14,690 --> 00:02:19,000
what cycles are they producing and writing the results?
