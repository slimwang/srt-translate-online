1
00:00:00,110 --> 00:00:02,670
As you can see, the receiver 
itself is pretty simple.

2
00:00:03,270 --> 00:00:07,334
Extend the broadcast receiver class 
and override the onreceive handle

3
00:00:07,334 --> 00:00:10,790
as you can see here. 
Receivers are lightweight components

4
00:00:10,790 --> 00:00:14,590
meant to listen for broadcasts, 
react, and complete within five seconds

5
00:00:14,940 --> 00:00:18,350
that usually means simply starting
a service or sending a notification.

6
00:00:18,380 --> 00:00:21,120
To have your receiver start listening
for broadcasts, you need

7
00:00:21,120 --> 00:00:24,900
to register it either through an entry 
in your manifest like this

8
00:00:24,900 --> 00:00:27,850
or dynamically within 
another application component,

9
00:00:27,850 --> 00:00:32,479
usually an activity like this. 
Then you define the intent filter

10
00:00:32,920 --> 00:00:35,770
that specifies the broadcast event 
you want to receive.

11
00:00:36,220 --> 00:00:38,460
You can do that either here 
in the manifest,

12
00:00:38,460 --> 00:00:41,470
or if you're registering your receiver 
with an application component

13
00:00:41,470 --> 00:00:45,180
such as an activity, you can create
your new intent filter like this.

14
00:00:45,780 --> 00:00:48,640
The biggest difference
between manifest and dynamic receivers

15
00:00:48,640 --> 00:00:50,330
is when they're triggered.

16
00:00:50,330 --> 00:00:53,620
A programmatically-registered receiver 
will only receive broadcasts

17
00:00:53,620 --> 00:00:58,490
while the app is running, 
while a manifest declared reciever

18
00:00:58,490 --> 00:01:03,010
will start your app specifically 
to receive your broadcasts.

19
00:01:03,140 --> 00:01:06,819
For example, I usually code 
with my noise cancelling headphones on,

20
00:01:06,830 --> 00:01:10,620
so a music app app like this 
might want to register a runtime reciever

21
00:01:10,620 --> 00:01:13,780
to listen to the system intent broadcast
that announces when headphones

22
00:01:13,780 --> 00:01:15,590
are unplugged. 
That will allow it

23
00:01:15,590 --> 00:01:18,750
to automatically pause playback 
when your audio routing switches

24
00:01:18,750 --> 00:01:21,790
from headphone to speakers. 
In this case, we can use

25
00:01:21,790 --> 00:01:24,460
a runtime receiver
because the app is guaranteed

26
00:01:24,460 --> 00:01:28,430
to be running if music is playing. 
On the other hand, if I'm using

27
00:01:28,430 --> 00:01:31,600
Google Cloud Messaging 
to listen for new data from my server,

28
00:01:31,600 --> 00:01:34,690
I want to register a manifest receiver 
that always listens

29
00:01:34,690 --> 00:01:37,360
for incoming tickles 
from my server and will wake up

30
00:01:37,360 --> 00:01:40,740
my app if it's being terminated 
to trigger the update code,

31
00:01:40,740 --> 00:01:43,060
usually a sync adapter, 
which is something we will discuss

32
00:01:43,060 --> 00:01:46,580
later in lesson six. 
There's a bunch of system broadcasts

33
00:01:46,580 --> 00:01:49,520
you can monitor to help your app react 
to changes in the system.

34
00:01:49,770 --> 00:01:53,060
You can see the system broadcast actions 
within the intent documentation

35
00:01:53,060 --> 00:01:57,025
at developer.android.com. 
One great use for broadcast receivers

36
00:01:57,025 --> 00:01:59,770
is to monitor for changes 
to internet connectivity

37
00:01:59,770 --> 00:02:03,140
or charging status. 
Imagine your app has to upload a movie

38
00:02:03,140 --> 00:02:06,030
or calculate the next 10,000 moves 
in a game of chess.

39
00:02:06,030 --> 00:02:09,620
How might you use a receiver to wait 
until the device is plugged in

40
00:02:09,620 --> 00:02:12,600
before starting that process? 
Should it be a manifest receiver

41
00:02:12,600 --> 00:02:14,060
or a broadcast receiver?
