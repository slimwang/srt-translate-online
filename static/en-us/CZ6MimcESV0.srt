1
00:00:00,000 --> 00:00:06,000
Let's start this solution video off by looking through all of the incorrect

2
00:00:06,000 --> 00:00:11,000
implementations of the queue, and then we'll see how we actually caught all of the bugs.

3
00:00:11,000 --> 00:00:18,000
The first queue has an error where you enqueue and it only stores integers

4
00:00:18,000 --> 00:00:24,000
up to 2^16 and that's roughly 32,000.

5
00:00:24,000 --> 00:00:30,000
When you enqueue things it's just silently wraps it back around to zero if you go over that.

6
00:00:30,000 --> 00:00:35,000
The second queue silently fails to create queues with more than 15 elements.

7
00:00:35,000 --> 00:00:42,000
So in the initializer, if the max size is greater than 15, then it just sets it to 15

8
00:00:42,000 --> 00:00:45,000
and doesn't tell you about it at all.

9
00:00:45,000 --> 00:00:54,000
The third queue is a little tricky--it implements the empty method by trying to dequeue an element

10
00:00:54,000 --> 00:00:57,000
and checking if the dequeue is none.

11
00:00:57,000 --> 00:01:02,000
If it is, then it returns true. If it isn't, then it returns false.

12
00:01:02,000 --> 00:01:09,000
And because the empty method changes the state of the queue when it shouldn't,

13
00:01:09,000 --> 00:01:11,000
this is going to cause buggy behavior.

14
00:01:11,000 --> 00:01:15,000
The fourth queue has a bug in the dequeue method.

15
00:01:15,000 --> 00:01:20,000
When you try to dequeue from an empty queue it returns false

16
00:01:20,000 --> 00:01:24,000
where it should, according to the specification, return' none.

17
00:01:24,000 --> 00:01:31,000
The final queue just holds one less element than you tell it to hold.

18
00:01:31,000 --> 00:01:37,000
So it's just decrement size max when you pass it in by one and then stores that many elements

19
00:01:37,000 --> 00:01:40,000
instead of how many you told it to.

20
00:01:40,000 --> 00:01:42,000
Now let's try to catch all of these bugs.

21
00:01:42,000 --> 00:01:48,000
The first queue can be caught by just trying to enqueue a value greater than 2^16

22
00:01:48,000 --> 00:01:52,000
and then dequeuing it and check that the value is correct.

23
00:01:52,000 --> 00:01:57,000
The second queue, you try to enqueue more than 15 elements--

24
00:01:57,000 --> 00:02:01,000
remember that was the one that only stored 15 without telling you.

25
00:02:01,000 --> 00:02:08,000
As soon as you go past 15, this assertion should fail. The third queue is a little bit trickier.

26
00:02:08,000 --> 00:02:14,000
We create a queue with two elements and we try to enqueue 10 which should succeed fine,

27
00:02:14,000 --> 00:02:20,000
and we check that, then we assert that the queue is not empty which it shouldn't be,

28
00:02:20,000 --> 00:02:25,000
but remember that this empty function checks that it's empty by trying to dequeue,

29
00:02:25,000 --> 00:02:28,000
which removes 10 from the queue.

30
00:02:28,000 --> 00:02:34,000
Now when we try to dequeue a second time, now the queue is empty.

31
00:02:34,000 --> 00:02:39,000
It's not going to return 10, it's going to return none. This assertion is going to fail.

32
00:02:39,000 --> 00:02:45,000
The fourth queue returns false instead of none when you try to dequeue from an empty queue.

33
00:02:45,000 --> 00:02:52,000
To test this, we instantiate a 2-element queue, and we try to immediately dequeue

34
00:02:52,000 --> 00:02:56,000
from that empty queue, and we should get none, which is what we're checking.

35
00:02:56,000 --> 00:02:59,000
but instead we get false, so this assertion will fail.

36
00:02:59,000 --> 00:03:06,000
Now the final queue just holds one last item than intended, so we created 2-element queue,

37
00:03:06,000 --> 00:03:15,000
and we try to enqueue two elements, and this will fail for the second since this queue will only hold

38
00:03:15,000 --> 00:03:20,000
one element not two, so this second attempt will fail.

39
00:03:20,000 --> 00:03:23,000
Okay, I hope you enjoyed catching all those bugs.

40
00:03:23,000 --> 00:03:28,000
This is something that comes up fairly frequently when you have to do blackbox testing

41
00:03:28,000 --> 00:03:34,000
when you don't actually know the code that you're running against, you don't have access to it.

42
00:03:34,000 --> 00:03:40,000
We'll talk a bit more about that in Unit 2 and I hope to see you there. Thanks!
