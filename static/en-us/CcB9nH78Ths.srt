1
00:00:00,000 --> 00:00:04,000
The scheme we look at for doing this is built on RSA,

2
00:00:04,000 --> 00:00:09,000
and it uses RSA signatures as we've seen in Unit 4.

3
00:00:09,000 --> 00:00:11,000
But this time, instead of using them normally,

4
00:00:11,000 --> 00:00:15,000
we'll use them in a way that blinds the message from the signer.

5
00:00:15,000 --> 00:00:20,000
Here's the protocol--we'll assume Alice wants the bank to sign a message,

6
00:00:20,000 --> 00:00:23,000
and Alice knows the bank's public key.

7
00:00:23,000 --> 00:00:26,000
It's an RSA key pair with the exponent and a modulus.

8
00:00:26,000 --> 00:00:34,000
So m is the message Alice wants the bank to sign. Alice also picks a random value, we'll call that k.

9
00:00:34,000 --> 00:00:40,000
Next, Alice will compute t by multiplying the message by k raised to the eb power.

10
00:00:40,000 --> 00:00:45,000
If k is random, select it from the integers from 1 up to nB-1.

11
00:00:45,000 --> 00:00:50,000
And it is also relatively prime to nB, well that would make keB mod nB

12
00:00:50,000 --> 00:00:57,000
A permutation of the values of ZnB. That means that this is also random in that range.

13
00:00:57,000 --> 00:01:05,000
And so, m multiplied by this is random. This doesn't reveal to the bank the value of m.

14
00:01:05,000 --> 00:01:08,000
We can safely send that to the bank without leaking any information.

15
00:01:08,000 --> 00:01:13,000
And the bank will sign that message using its private key--its private exponent dB.

16
00:01:13,000 --> 00:01:20,000
That produces the value t^dB power mod n, which the bank sends back to Alice.

17
00:01:20,000 --> 00:01:25,000
As far as the bank is concern, it just signed the random value and it sent that back to Alice.

18
00:01:25,000 --> 00:01:27,000
Is there anything Alice can do with this that is useful?

19
00:01:27,000 --> 00:01:32,000
The question is, which of these is equivalent to the value produced by the bank.

20
00:01:32,000 --> 99:59:59,999
Here are the choices. To answer this question, think about the properties of RSA.
