1
00:00:00,190 --> 00:00:02,410
Now, let's look at the counter measures.

2
00:00:02,410 --> 00:00:03,910
The first is prevention.

3
00:00:03,910 --> 00:00:04,630
For example,

4
00:00:04,630 --> 00:00:08,760
we can limit the content of a computer
to the untrusted outside world.

5
00:00:08,760 --> 00:00:12,240
Meaning that it would not accept
documents or programs, or

6
00:00:12,240 --> 00:00:15,000
any active contents
from other computers.

7
00:00:15,000 --> 00:00:19,290
And of course, this will impose major
inconvenience to a computer user.

8
00:00:19,290 --> 00:00:21,300
The second approach is detection.

9
00:00:21,300 --> 00:00:24,370
This means that we use
a monitor to watch out for

10
00:00:24,370 --> 00:00:27,010
telltale signs of malware infection.

11
00:00:27,010 --> 00:00:29,220
The third approach is removal,

12
00:00:29,220 --> 00:00:32,360
meaning that once we detect
that there's malware infection,

13
00:00:32,360 --> 00:00:36,960
we will remove the malware and
perhaps we should also patch the system.

14
00:00:36,960 --> 00:00:40,205
Given that prevention severely
hampers productivity,

15
00:00:40,205 --> 00:00:44,150
detections really the main counter
measure that we can use, and

16
00:00:44,150 --> 00:00:49,980
there are four generations of antivirus
software, or malware detection software.

17
00:00:49,980 --> 00:00:52,240
The first is malware scanners.

18
00:00:52,240 --> 00:00:54,460
These scanners use signatures or

19
00:00:54,460 --> 00:00:59,610
patterns of known viruses to scan
program files to find matches.

20
00:00:59,610 --> 00:01:00,920
And if there's a match,

21
00:01:00,920 --> 00:01:05,440
that means that this program file
has been infected by a known virus.

22
00:01:05,440 --> 00:01:08,460
One of the examples of
signatures of viruses.

23
00:01:08,460 --> 00:01:12,750
A signature of a virus is typically
the unique sequence of instructions of

24
00:01:12,750 --> 00:01:17,270
the virus code or the unique infection
marker that the virus would use.

25
00:01:17,270 --> 00:01:22,100
These simple scanners are not
effective against polymorphic viruses.

26
00:01:22,100 --> 00:01:23,410
And the reason is that for

27
00:01:23,410 --> 00:01:28,020
polymorphic virus each instance is
encrypted with randomly generated key,

28
00:01:28,020 --> 00:01:34,160
such that there's no unique signature
across all instances of the same virus.

29
00:01:34,160 --> 00:01:36,500
The second is the heuristic scanners,

30
00:01:36,500 --> 00:01:39,530
they are based on possible
effects of infection.

31
00:01:39,530 --> 00:01:43,570
For example, if a program file has
been infected with a virus code

32
00:01:43,570 --> 00:01:47,040
the checksum of the original
file will have changed

33
00:01:47,040 --> 00:01:50,200
because new contents has
been added to the file.

34
00:01:50,200 --> 00:01:54,610
However, this approach can be
defeated if the malware deliberately

35
00:01:54,610 --> 00:01:58,650
makes sure that the checksum
after infection remains the same.

36
00:01:58,650 --> 00:01:59,450
For example,

37
00:01:59,450 --> 00:02:04,450
the malware can include some additional
bytes at the end of the file to make

38
00:02:04,450 --> 00:02:09,500
sure that the checksum remains the same
as the file before its infection.

39
00:02:09,500 --> 00:02:11,687
The third is activity traps.

40
00:02:11,687 --> 00:02:16,305
These detectors look for
particular kind of activities that

41
00:02:16,305 --> 00:02:19,035
malware will typically
perform on a system.

42
00:02:19,035 --> 00:02:23,915
Such as modifying the Windows registry
file, or reading the password file and

43
00:02:23,915 --> 00:02:26,507
sending it to the Internet, and so on.

44
00:02:26,507 --> 00:02:30,597
These detectors are based on our
knowledge of malware activities,

45
00:02:30,597 --> 00:02:33,347
therefore, these detectors
are not effective

46
00:02:33,347 --> 00:02:37,977
against malware that performs new
kinds of malicious activities.

47
00:02:37,977 --> 00:02:39,557
The fourth is the so called,

48
00:02:39,557 --> 00:02:42,887
full feature analysis,
which is the state of the art.

49
00:02:42,887 --> 00:02:46,080
It typically involves
multiple approaches.

50
00:02:46,080 --> 00:02:50,060
For example, it typically
includes host-based monitoring.

51
00:02:50,060 --> 00:02:53,530
That in turn includes activity traps and
scanners.

52
00:02:53,530 --> 00:02:58,240
It also includes network-based monitors
that analyze traffic to the Internet.

53
00:02:58,240 --> 00:03:02,550
For example, if there's a traffic that
contains password file to Internet

54
00:03:02,550 --> 00:03:07,150
server, that can be a telltale sign
that a malware has infected and

55
00:03:07,150 --> 00:03:10,510
host, and is attempting to
steal the password file.

56
00:03:10,510 --> 00:03:14,816
Similarly, if there's a connection to a
website that is well-known for a malware

57
00:03:14,816 --> 00:03:19,250
download, there's also a telltale sign
that the end host has been infected.

58
00:03:19,250 --> 00:03:23,090
And the malware on that host is
attempting to download an update.

59
00:03:23,090 --> 00:03:26,960
And you can also include
a sandboxing-based analysis approach.

60
00:03:26,960 --> 00:03:31,300
A sandbox is typically used to
run a piece of executable, for

61
00:03:31,300 --> 00:03:33,600
example, an attachment from an e-mail,

62
00:03:33,600 --> 00:03:38,320
to see whether this executable would
exhibit any malicious activities.

63
00:03:38,320 --> 00:03:41,170
By executing this executable
in a sandbox, we can make

64
00:03:41,170 --> 00:03:45,580
sure that there's no permanent
damage to our system and network.

65
00:03:45,580 --> 00:03:50,060
And we can observe the behaviors of
the executable from outside a sandbox.

66
00:03:50,060 --> 00:03:54,160
So that we can be certain whether
this executable is a malware or not.
