1
00:00:00,173 --> 00:00:05,478
The URIMatcher we just coded is central
to coding our Content Provider.

2
00:00:05,478 --> 00:00:09,652
And will be used in the implementation
of our core Content Provider methods.

3
00:00:09,652 --> 00:00:13,936
We've given you Tests to help you along
the way as you code Weather Provider.

4
00:00:13,936 --> 00:00:17,169
Since several of these tests
have been re-purposed from

5
00:00:17,169 --> 00:00:19,264
the database test you helped write.

6
00:00:19,264 --> 00:00:23,411
You may want to look at how the content
provider calls replace the SQL

7
00:00:23,411 --> 00:00:28,088
database calls in tasks such as test
location table and test weather table.

8
00:00:28,088 --> 00:00:31,888
But before we can start implementing
step four in testing our content

9
00:00:31,888 --> 00:00:35,295
provider, we need to register
it to the AndroidManifest, so

10
00:00:35,295 --> 00:00:36,945
that Android knows about it.

11
00:00:36,945 --> 00:00:41,191
Once the weather provider has been
registered with the package manager, we

12
00:00:41,191 --> 00:00:45,450
can use an Android utility class called
the ContentResolver to refer to it.

13
00:00:45,450 --> 00:00:50,455
The ContentResolver locates our class
using the Content Authority and

14
00:00:50,455 --> 00:00:54,555
makes direct calls to the weather
provider on our behalf.

15
00:00:54,555 --> 00:00:58,897
Add a provider tag into
the androidmanifest.xml file to register

16
00:00:58,897 --> 00:01:03,317
the WeatherProvider class with
the Content Authority as defined in

17
00:01:03,317 --> 00:01:04,881
the WeatherContract.

18
00:01:04,881 --> 00:01:09,500
Note that the two fields you need
to populate in the provider tag

19
00:01:09,500 --> 00:01:12,915
are android:name and android:authority.

20
00:01:12,915 --> 00:01:16,552
Uncomment the testProviderRegistry test
within TestProvider,

21
00:01:16,552 --> 00:01:19,005
to test to see if you've
done this correctly.
