1
00:00:00,650 --> 00:00:03,230
Let's code this in Java. I can see here

2
00:00:03,230 --> 00:00:05,530
that I have the number of students and the

3
00:00:05,530 --> 00:00:09,800
number of topics and the two-dimensional array of grades.

4
00:00:09,800 --> 00:00:13,530
I can ignore the student names and the topics for

5
00:00:13,530 --> 00:00:16,390
now. What I'm really interested in is implementing the

6
00:00:16,390 --> 00:00:19,690
total for student method. To do this, the important thing

7
00:00:19,690 --> 00:00:22,790
to recognize is that I want to access all of

8
00:00:22,790 --> 00:00:26,330
the grades in one row. The grades in one row

9
00:00:26,330 --> 00:00:30,030
all share their first index, but their second index

10
00:00:30,030 --> 00:00:33,380
varies because that tells which column. So I'll loop

11
00:00:33,380 --> 00:00:35,410
over all of the columns starting at the first

12
00:00:35,410 --> 00:00:39,200
one and since there's a column for each topic, I'll

13
00:00:39,200 --> 00:00:42,180
keep going as long as my column is less

14
00:00:42,180 --> 00:00:44,700
than the number of topics. I'll need a variable to

15
00:00:44,700 --> 00:00:47,480
hold the sum. And for each item, I'll add

16
00:00:47,480 --> 00:00:52,030
the grade in the studentIndex row in the column column.

17
00:00:52,030 --> 00:00:54,450
And when I'm done, I'll return the sum. Just

18
00:00:54,450 --> 00:00:57,650
to be safe, if somebody gives me a bad studentIndex.

19
00:00:57,650 --> 00:01:00,850
I want to return minus one. So if studentIndex is less

20
00:01:00,850 --> 00:01:03,290
than zero or greater than or equal to the number

21
00:01:03,290 --> 00:01:06,750
of students, I return minus one. This is always a

22
00:01:06,750 --> 00:01:09,340
good idea when somebody else is calling your method. You

23
00:01:09,340 --> 00:01:11,430
want to think about the things that they could do wrong,

24
00:01:11,430 --> 00:01:13,220
and agree on a good way to handle those cases.
