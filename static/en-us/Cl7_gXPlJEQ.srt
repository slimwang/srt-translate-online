1
00:00:00,400 --> 00:00:01,910
So the way that you run a transaction

2
00:00:01,910 --> 00:00:06,710
in Objectify, is equal ofy().transact, at the start of

3
00:00:06,710 --> 00:00:10,470
the transaction and you specify new work and

4
00:00:10,470 --> 00:00:12,880
if you don't want the transaction to return anything,

5
00:00:12,880 --> 00:00:15,020
then you would use new void work instead

6
00:00:15,020 --> 00:00:18,790
of work. And then you call the run method,

7
00:00:18,790 --> 00:00:21,600
and then inside the run method you do the

8
00:00:21,600 --> 00:00:25,760
stuff you want done inside the transaction, and if

9
00:00:25,760 --> 00:00:28,960
your transaction expects a return result. Don't forget

10
00:00:28,960 --> 00:00:31,530
to return it. There are some things that are

11
00:00:31,530 --> 00:00:34,500
different in transactions in Objectify and in the raw

12
00:00:34,500 --> 00:00:38,660
Java store API. For example, Objectify does not use

13
00:00:38,660 --> 00:00:41,740
snapshot isolation. This can affect the outcome of

14
00:00:41,740 --> 00:00:45,140
queries and gets inside a transactions. My advice is

15
00:00:45,140 --> 00:00:47,730
to try to limit your use of transactions. So

16
00:00:47,730 --> 00:00:50,940
that you only do updates inside a transaction because

17
00:00:50,940 --> 00:00:52,790
it can be confusing to know exactly, what the

18
00:00:52,790 --> 00:00:55,660
outcome of queries will be. Anyway, I encourage you

19
00:00:55,660 --> 00:00:58,280
to read about transactions in the Objectify developer guide.

20
00:00:59,660 --> 00:01:02,960
So go ahead and implement the to do's in register

21
00:01:02,960 --> 00:01:06,870
for conference. And when you've implemented the function, run

22
00:01:06,870 --> 00:01:09,040
the app on local host and try registering for

23
00:01:09,040 --> 00:01:12,490
conference. You could use the API's explorer to test

24
00:01:12,490 --> 00:01:16,060
out the new functionality to register for conference. I find

25
00:01:16,060 --> 00:01:19,880
it's easiest to query conferences and then to copy

26
00:01:19,880 --> 00:01:22,530
one of the website's key strings of the conference

27
00:01:22,530 --> 00:01:24,620
that I'm going to want to attend. Now I

28
00:01:24,620 --> 00:01:27,790
can go and register for the conference. You have to

29
00:01:27,790 --> 00:01:30,460
have the web safe key string. So, I'm going to

30
00:01:30,460 --> 00:01:33,840
enter it here and I'm going to execute function and

31
00:01:33,840 --> 00:01:37,640
we'll see what got back. Result, true. So, hopefully

32
00:01:37,640 --> 00:01:40,609
that means I am in fact registered for that conference.

33
00:01:41,630 --> 00:01:45,770
Let's take a look in the datastore admin. I'm on

34
00:01:45,770 --> 00:01:48,020
local hosts, I'm going to go to the admin console

35
00:01:48,020 --> 00:01:52,570
on local hosts, and list the profiles and there I

36
00:01:52,570 --> 00:01:55,550
am, and I'm registered for conference. You can see that

37
00:01:55,550 --> 00:01:57,680
I can't tell from here what the name of the

38
00:01:57,680 --> 00:02:01,380
conference is. But programmatically, you can take the conference key

39
00:02:01,380 --> 00:02:03,500
and from that, you can define the conference name, if

40
00:02:03,500 --> 00:02:06,870
you wanted to. You should also find that the UI

41
00:02:06,870 --> 00:02:09,740
works, for registering for a conference. And you see that

42
00:02:09,740 --> 00:02:13,040
it says that you can unregister from a conference. Well actually,

43
00:02:13,040 --> 00:02:15,920
it won't work to unregister from a conference because you haven't

44
00:02:15,920 --> 00:02:19,640
yet, implemented the functionality to do that. So now its your

45
00:02:19,640 --> 00:02:21,750
turn to go ahead and write the code for implement

46
00:02:21,750 --> 00:02:26,450
register for a conference. For the profile class need to have

47
00:02:26,450 --> 00:02:29,530
the conference keys to attend property and your also going to

48
00:02:29,530 --> 00:02:33,110
need to write the methods to get add and remove values.

49
00:02:33,110 --> 00:02:35,240
Then you're going to need to copy the

50
00:02:35,240 --> 00:02:39,650
skeleton code for register for conference into conference API.

51
00:02:39,650 --> 00:02:43,070
And then fill in the ToDo's in registerForConference in

52
00:02:43,070 --> 00:02:46,520
the Conference API class. Don't forget when you copy

53
00:02:46,520 --> 00:02:49,120
over the registerForConference skeleton, you're going to need to

54
00:02:49,120 --> 00:02:51,700
make sure you also copy over the wrapped boolean

55
00:02:51,700 --> 00:02:55,800
class. When you implement registerForConference, you'll notice that the

56
00:02:55,800 --> 00:02:58,220
method is defined to throw some exceptions, and you

57
00:02:58,220 --> 00:03:00,790
need to honor that. If you change the way the method

58
00:03:00,790 --> 00:03:04,150
behaves, for example, you change the exceptions that it throws, or

59
00:03:04,150 --> 00:03:06,330
it throws different exceptions, or it doesn't throw them in the

60
00:03:06,330 --> 00:03:10,370
right place, the UI for registering for conferences won't work properly.

61
00:03:10,370 --> 00:03:13,280
And then to check what happens when you try to register

62
00:03:13,280 --> 00:03:16,080
for a conference that has no seats available. Just create a

63
00:03:16,080 --> 00:03:19,980
conference with zero seats left. The easiest way to create a

64
00:03:19,980 --> 00:03:23,310
conference with zero seats left is that when you create the conference

65
00:03:23,310 --> 00:03:26,240
just set max attendees to zero. If you want to see

66
00:03:26,240 --> 00:03:28,740
what happens if you try to register for a conference that you've

67
00:03:28,740 --> 00:03:32,290
already registered for you'll need to use the API's Explorer. Because

68
00:03:32,290 --> 00:03:35,300
the conference page in the UI will know if you've already registered

69
00:03:35,300 --> 00:03:38,190
and won't offer you the option to register again. So how

70
00:03:38,190 --> 00:03:41,270
did you check that your code worked? Did you check that the

71
00:03:41,270 --> 00:03:45,620
conference keys to attend property of the profile entity, contains a string

72
00:03:45,620 --> 00:03:48,380
of the conference key? Or did you look to see if the

73
00:03:48,380 --> 00:03:53,120
conference keys to attend property of the profile, contains the conference

74
00:03:53,120 --> 00:03:57,630
name? Did you check, if the seats available of the conference? Is

75
00:03:57,630 --> 00:04:00,830
one less than the max of the attendees of the conference.

76
00:04:00,830 --> 00:04:03,950
And did you try registering for a conference that you had created?
