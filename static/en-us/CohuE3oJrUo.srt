1
00:00:00,350 --> 00:00:02,495
As you might have intuited
from the exercise,

2
00:00:02,495 --> 00:00:05,697
some more cleverness will be needed
to make this process efficient.

3
00:00:05,697 --> 00:00:09,345
Even the evaluation of polynomials
at arbitrary points will

4
00:00:09,345 --> 00:00:11,690
take quadratic time.

5
00:00:11,690 --> 00:00:14,954
For each point, we need to do
a number of multiplications and

6
00:00:14,954 --> 00:00:18,413
additions that is proportional
to the number of coefficients.

7
00:00:18,413 --> 00:00:21,413
The most efficient way to do
this is via Horner's rule.

8
00:00:21,413 --> 00:00:24,250
You can find the link in
the instructor's notes.

9
00:00:24,250 --> 00:00:27,020
You can also think about filling
out the Vandermonde matrix and

10
00:00:27,020 --> 00:00:29,150
then doing the matrix multiplication.

11
00:00:29,150 --> 00:00:33,290
Regardless, for arbitrary points, we
end up with the quadratic running time.

12
00:00:33,290 --> 00:00:37,340
Multiplying in the value
domain takes order (n+m) time.

13
00:00:37,340 --> 00:00:39,410
Since we just multiply the values for

14
00:00:39,410 --> 00:00:44,550
the corresponding inputs,
xj, this part is fine.

15
00:00:44,550 --> 00:00:48,340
Interpolation involves solving
a system of equations with

16
00:00:48,340 --> 00:00:52,920
n + m equations and n + m unknowns.

17
00:00:52,920 --> 00:00:54,525
By Gaussian elimination,

18
00:00:54,525 --> 00:00:58,091
this would take order (n + m)
cubed time in the worst case.

19
00:00:58,091 --> 00:01:01,705
For Vandermonde matrices, however,
there's also a method called Lagrange

20
00:01:01,705 --> 00:01:05,740
interpolation that allows us to do
this in time that's just quadratic.

21
00:01:05,740 --> 00:01:08,470
Note, however,
that this still isn't good enough.

22
00:01:08,470 --> 00:01:13,500
In fact, we're at essentially the same
running time as we have for convolution.

23
00:01:13,500 --> 00:01:15,050
Is there any hope?

24
00:01:15,050 --> 00:01:16,400
Well, yes there is.

25
00:01:16,400 --> 00:01:21,790
All of these running times pertain to
an arbitrary set of values for X here.

26
00:01:21,790 --> 00:01:24,560
But since we're only interested in
the coefficients of the product,

27
00:01:24,560 --> 00:01:28,390
polynomial C,
we get to choose all these X.

28
00:01:28,390 --> 00:01:31,400
And as it turns out,
this freedom is very, very powerful.
