1
00:00:00,170 --> 00:00:02,690
Having understood inodes and the basic characteristics of the

2
00:00:02,690 --> 00:00:06,060
extended file system, let's now consider its merits and compare

3
00:00:06,060 --> 00:00:09,190
it with FAT system. File creating means grabbing an inode

4
00:00:09,190 --> 00:00:12,310
and updating the parent directory. This is not substantially different

5
00:00:12,310 --> 00:00:15,570
from FAT. File growth, just means grabbing a new

6
00:00:15,570 --> 00:00:19,220
data block and updating the inode, no big deal. We

7
00:00:19,220 --> 00:00:21,830
are still efficient in terms of space. There's a little

8
00:00:21,830 --> 00:00:25,230
waste in potentially unused fields in the inodes, and the

9
00:00:25,230 --> 00:00:28,370
indirection tables are space that would not be used if the

10
00:00:28,370 --> 00:00:31,210
file were stored in a FAT system, but this is usually

11
00:00:31,210 --> 00:00:34,890
going to be small compared to the whole size of a file.

12
00:00:34,890 --> 00:00:37,390
As for access time, it is true that the inodes add

13
00:00:37,390 --> 00:00:40,090
an extra layer of indirection as we go through the directory

14
00:00:40,090 --> 00:00:43,700
tree. A directory points to the inode for a file, rather

15
00:00:43,700 --> 00:00:46,350
than to the first state of the block. Because inodes are

16
00:00:46,350 --> 00:00:50,560
cached in memory, however, this performance cost is minimal. Much more important

17
00:00:50,560 --> 00:00:53,440
is that the inodes link the data blocks together in a treelike

18
00:00:53,440 --> 00:00:58,740
structure, with a high branching factor, as many as an indirection table can

19
00:00:58,740 --> 00:01:02,920
hold. This makes for much better random access than one gets from

20
00:01:02,920 --> 00:01:05,880
the linked list chaining of the FAT format, at least for large files.
