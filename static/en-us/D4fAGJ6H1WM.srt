1
00:00:00,170 --> 00:00:01,068
Welcome, everybody.

2
00:00:01,068 --> 00:00:05,060
We have Dhruv here with us today and
he's a product engineer at Udacity.

3
00:00:05,060 --> 00:00:08,490
So Dhruv, tell us the story about how
you learned your first framework.

4
00:00:08,490 --> 00:00:12,088
>> The first framework I used was
in college, it was Ruby on Rails.

5
00:00:12,088 --> 00:00:16,015
And people will usually teach you
frameworks as a starting point into

6
00:00:16,015 --> 00:00:20,553
building your first application because
it takes away a lot of the decisions and

7
00:00:20,553 --> 00:00:22,230
complexities for you.

8
00:00:22,230 --> 00:00:24,300
So you can just jump into a framework,
learn it,

9
00:00:24,300 --> 00:00:27,040
and ideally get building your first
application in a couple days.

10
00:00:28,270 --> 00:00:31,008
So that was the first
general framework I used.

11
00:00:31,008 --> 00:00:34,618
The first front-end specific
framework I used was Angular.

12
00:00:34,618 --> 00:00:39,310
I used it in a summer
internship in my senior year.

13
00:00:39,310 --> 00:00:43,190
And again, at the time I thought it
was like nothing I'd ever seen, but

14
00:00:43,190 --> 00:00:46,682
it helped me get moving quickly
into routing, building views,

15
00:00:46,682 --> 00:00:51,690
and generally getting the fundamental
design patterns of the web quickly.

16
00:00:51,690 --> 00:00:53,770
>> So now that you're
working with one framework,

17
00:00:53,770 --> 00:00:57,290
how difficult was it to
switch to a new framework?

18
00:00:57,290 --> 00:00:59,180
>> The truth is a lot of
these frameworks come from

19
00:00:59,180 --> 00:01:00,780
radically different paradigms.

20
00:01:00,780 --> 00:01:06,830
So Angular and React have very
different philosophies about things.

21
00:01:06,830 --> 00:01:09,030
But a lot of them do
share commonalities.

22
00:01:09,030 --> 00:01:11,410
So for instance,
if you go between Angular and

23
00:01:11,410 --> 00:01:15,010
Ember, both are generally MVC
frameworks, and if you know one,

24
00:01:15,010 --> 00:01:18,750
you get the guiding principles or
the idea behind the others.

25
00:01:18,750 --> 00:01:23,440
A framework like React comes at
it from a very different way.

26
00:01:23,440 --> 00:01:28,200
But knowing another framework helps you
evaluate another framework you're using.

27
00:01:28,200 --> 00:01:32,720
So knowing Angular helped me understand
a lot more about why React is useful,

28
00:01:32,720 --> 00:01:35,370
what were the guiding philosophies
that made it unique and

29
00:01:35,370 --> 00:01:38,520
appealing to developers, and
understanding the trade-offs

30
00:01:38,520 --> 00:01:42,510
that came with it compared to
a system like Angular or Ember.

31
00:01:42,510 --> 00:01:44,276
>> Okay, so
if you are learning frameworks,

32
00:01:44,276 --> 00:01:47,128
you shouldn't just find your first
one and stick with that for life.

33
00:01:47,128 --> 00:01:50,776
You should experience the other ones,
build something with them, see what

34
00:01:50,776 --> 00:01:54,548
are the needs of your application, and
then pick the best framework for that.

35
00:01:54,548 --> 00:01:56,890
>> Definitely,
I think that's a very good answer.

36
00:01:56,890 --> 00:01:59,390
There are some frameworks
that are fairly impractical,

37
00:01:59,390 --> 00:02:01,610
but I learned them anyways because they,
again,

38
00:02:01,610 --> 00:02:05,330
teach you philosophies and ideas of
approaching programming that are unique.

39
00:02:05,330 --> 00:02:08,019
So in particular I checked out Elm lang,

40
00:02:08,019 --> 00:02:12,777
which is a very functional approach
to doing front-end programming.

41
00:02:12,777 --> 00:02:14,589
I've looked at ClojureScript a lot,

42
00:02:14,589 --> 00:02:17,940
again, another very functional
perspective to doing programming.

43
00:02:17,940 --> 00:02:21,580
And these have all affected how I
view the frameworks I use today.

44
00:02:22,840 --> 00:02:25,510
And in addition to just
looking at what works for

45
00:02:25,510 --> 00:02:27,010
you at this given point in time,

46
00:02:27,010 --> 00:02:31,550
it's also worth looking at what the
general community is working towards.

47
00:02:31,550 --> 00:02:33,300
Because if you work with the community,

48
00:02:33,300 --> 00:02:35,830
you're going to get a lot of tools,
a lot of resources

49
00:02:35,830 --> 00:02:39,090
that you wouldn't get otherwise if
you choose a very niche framework.

50
00:02:39,090 --> 00:02:43,300
So there's a lot of considerations
to make, but understanding that

51
00:02:43,300 --> 00:02:46,800
not all frameworks are perfect and that
every framework might not be perfect for

52
00:02:46,800 --> 00:02:49,350
the job you're choosing is
a very good place to start.

53
00:02:49,350 --> 00:02:51,850
>> So what is some advice that you would
give to students that are looking to

54
00:02:51,850 --> 00:02:53,550
dive into the world of frameworks?

55
00:02:53,550 --> 00:02:58,460
>> To start by not looking at the
fine-grain details of how to implement

56
00:02:58,460 --> 00:03:01,720
X, Y, or Z in a framework, although
you'll have to do that in your app.

57
00:03:01,720 --> 00:03:03,970
But at some point,
to take a step back and try and

58
00:03:03,970 --> 00:03:06,870
figure out what's the philosophy
of this framework.

59
00:03:06,870 --> 00:03:09,740
A framework is essentially some
really smart people somewhere have

60
00:03:09,740 --> 00:03:13,660
designed this intricate system to
help you accomplish something.

61
00:03:13,660 --> 00:03:16,523
There's a lot to learn in just
looking at how it was designed, and

62
00:03:16,523 --> 00:03:19,346
you can reuse a lot of those
concepts in future things you build.

63
00:03:19,346 --> 00:03:23,618
So the first thing is just looking at
the framework, understanding it, and

64
00:03:23,618 --> 00:03:27,108
understanding how it was created or
what the decisions were.

65
00:03:27,108 --> 00:03:29,960
Frameworks are always going to be good
at some things and bad at some things.

66
00:03:29,960 --> 00:03:33,020
Understanding those trade-offs and
learning to appreciate those.
