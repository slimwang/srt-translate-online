1
00:00:00,360 --> 00:00:02,650
If you checked all three of them, you're

2
00:00:02,650 --> 00:00:04,920
exactly on the right track. Let's talk about

3
00:00:04,920 --> 00:00:09,400
it. First of all, you know that with

4
00:00:09,400 --> 00:00:13,270
this, with the naive implementation there is going to

5
00:00:13,270 --> 00:00:15,760
be too much contention for the lock when

6
00:00:15,760 --> 00:00:18,000
the lock is released. Because everybody, both t2

7
00:00:18,000 --> 00:00:21,260
and t3 in the previous example, jumped in

8
00:00:21,260 --> 00:00:26,000
and started looking at the test and set instruction,

9
00:00:26,000 --> 00:00:28,520
trying to acquire the lock. And there are thousands

10
00:00:28,520 --> 00:00:31,232
of processes, everybody is going to be executing this

11
00:00:31,232 --> 00:00:33,240
test and set instruction, so there is going to

12
00:00:33,240 --> 00:00:36,380
be plenty of contention on the network, in order to

13
00:00:36,380 --> 00:00:39,640
get to that shared variable, that's the first problem.

14
00:00:39,640 --> 00:00:41,700
Now, let's talk abolut why the second answer is

15
00:00:41,700 --> 00:00:45,610
also the right answer. You know from the previous

16
00:00:45,610 --> 00:00:51,520
lesson that a shared memory multiprocessor has private caches associated

17
00:00:51,520 --> 00:00:54,420
with every one of the processors. And it is

18
00:00:54,420 --> 00:00:57,870
often the case that the caches may be kept

19
00:00:57,870 --> 00:01:01,570
coherent by the hardware. Now if the private caches

20
00:01:01,570 --> 00:01:05,950
associated with every processor and if a value from

21
00:01:05,950 --> 00:01:08,600
memory can be cached in that, there is an

22
00:01:08,600 --> 00:01:11,260
issue with test and set instruction. And that is,

23
00:01:11,260 --> 00:01:13,910
test and set instruction cannot use the cached value,

24
00:01:13,910 --> 00:01:16,590
because it has to make sure that the memory

25
00:01:16,590 --> 00:01:20,180
value is modified atomically when, when it is inspecting

26
00:01:20,180 --> 00:01:23,510
the memory. And therefore. By definition, a test and set

27
00:01:23,510 --> 00:01:27,370
of instruction, is not going to exploit caches, it is

28
00:01:27,370 --> 00:01:30,060
going to bypass the cache and go to memory, in

29
00:01:30,060 --> 00:01:32,880
order to do the test and set operation. And therefore

30
00:01:32,880 --> 00:01:36,722
yes, this is also true, that the spin algorithm that

31
00:01:36,722 --> 00:01:38,870
I gave you, spin on test and set, is not

32
00:01:38,870 --> 00:01:41,628
going to be able to exploit the caches. The third

33
00:01:41,628 --> 00:01:44,706
problem is, is the fact that it might disrupt

34
00:01:44,706 --> 00:01:47,430
useful work. And it's also a good answer and

35
00:01:47,430 --> 00:01:52,750
the reason is because, when a processor releases the

36
00:01:52,750 --> 00:01:56,310
lock. After releasing the lock, that processor wants to

37
00:01:56,310 --> 00:01:59,660
go on and do some useful work. And similarly.

38
00:01:59,660 --> 00:02:01,940
If, let's say there are four processors trying to

39
00:02:01,940 --> 00:02:03,910
acquire the lock. Only one of them is going

40
00:02:03,910 --> 00:02:06,650
to get it, and the others are going to have to

41
00:02:06,650 --> 00:02:09,449
back off, because they're not going to have the lock.

42
00:02:09,449 --> 00:02:11,570
Now the one, one guy that did get the

43
00:02:11,570 --> 00:02:14,730
lock has useful work to do. But, because of

44
00:02:14,730 --> 00:02:16,960
the fact that there's a lot of contention, the

45
00:02:16,960 --> 00:02:20,360
guy that can actually do useful work is being

46
00:02:20,360 --> 00:02:23,880
impeded from doing useful work because the contention that

47
00:02:23,880 --> 00:02:28,140
is there. In all the other processors trying to

48
00:02:28,140 --> 00:02:31,720
go and get the lock when it is not available.

49
00:02:31,720 --> 00:02:33,889
So, this is really the problem, that the test

50
00:02:33,889 --> 00:02:37,420
and set instructions, because it is bypassing the caches,

51
00:02:37,420 --> 00:02:39,630
it's first of all causing a lot of contention

52
00:02:39,630 --> 00:02:43,200
on the network and it is also impeding some

53
00:02:43,200 --> 00:02:46,580
of the useful processor from carrying on with its

54
00:02:46,580 --> 00:02:49,910
work. Which may advance the cause of the parallel

55
00:02:49,910 --> 00:02:52,970
program. So all of these are good answers in

56
00:02:52,970 --> 00:02:56,160
terms of the problems with this, with this naive spinlock.
