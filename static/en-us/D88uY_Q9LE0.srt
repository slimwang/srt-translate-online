1
00:00:00,420 --> 00:00:02,410
As you probably realized
a few videos ago,

2
00:00:02,410 --> 00:00:06,550
or maybe even longer,
XHRs are really annoying.

3
00:00:06,550 --> 00:00:09,510
Even the simplest use case
is fairly verbose, and

4
00:00:09,510 --> 00:00:14,430
it only gets worse as you address edge
cases and browser compatibility issues.

5
00:00:14,430 --> 00:00:17,400
Fetching resources really
just shouldn't be this hard.

6
00:00:17,400 --> 00:00:23,130
Luckily there's a new API that
simplifies XHRs, the fetch API.

7
00:00:23,130 --> 00:00:26,060
Currently it's natively
supported by Chrome, Firefox,

8
00:00:26,060 --> 00:00:28,255
Opera and Android browsers.

9
00:00:28,255 --> 00:00:29,340
Its support is growing, and

10
00:00:29,340 --> 00:00:33,840
it's incredibly useful,
also it's built on native promises.

11
00:00:34,940 --> 00:00:37,900
This is going to be a two step quiz.

12
00:00:37,900 --> 00:00:41,960
On the first part you're going to
re-factor GET with the Fetch API and

13
00:00:41,960 --> 00:00:46,250
in the second part, you're going to be
creating a new wrapper called getJSON.

14
00:00:46,250 --> 00:00:49,540
getJSON should return a Promise and
it should return a promise,

15
00:00:49,540 --> 00:00:51,020
that's two steps.

16
00:00:51,020 --> 00:00:55,230
The first part should be getting the URL
and use the get method for that.

17
00:00:55,230 --> 00:00:58,039
And the second part should be
parsing the JSON response.

18
00:00:59,240 --> 00:01:02,877
I want you test getJSON by
adding a search header in

19
00:01:02,877 --> 00:01:05,746
counsole.longing the parse of JSON.

20
00:01:05,746 --> 00:01:10,150
When you do so, you should see an object
with search data appear on the console.

21
00:01:10,150 --> 00:01:12,090
If there is an error, catch it.

22
00:01:12,090 --> 00:01:16,310
Pass unknown as the search header and
then counsel.log the error.

23
00:01:16,310 --> 00:01:19,100
As always see the instructor notes for
more information and good luck.
