1
00:00:00,300 --> 00:00:02,740
>> Here's a skeleton of the al, of an algorithm that implements

2
00:00:02,740 --> 00:00:05,810
a, a GA. So, [COUGH] what we need to do is we

3
00:00:05,810 --> 00:00:09,270
start off with some inital population and usually the population size is

4
00:00:09,270 --> 00:00:12,202
fixed to some constant. We'll call it K. So we just generate

5
00:00:12,202 --> 00:00:15,628
a bunch of, of random individuals to get things started. Then what

6
00:00:15,628 --> 00:00:18,296
we're going to do is we're going to repeat until essentially things

7
00:00:18,296 --> 00:00:21,726
converge. We're going to compute the fitness of all of the individuals

8
00:00:21,726 --> 00:00:26,130
in the population. And then we're going to select the most fit individuals.

9
00:00:26,130 --> 00:00:28,910
So, how do you suppose we might decide on which ones are the most fit?

10
00:00:28,910 --> 00:00:31,660
>> The ones you're most likely to go to the prom with?

11
00:00:33,120 --> 00:00:35,230
>> Some people choose people differently than

12
00:00:35,230 --> 00:00:37,450
just whether they're fit. I guess it

13
00:00:37,450 --> 00:00:40,980
depends what you mean by fit. Do you mean like fit, like physical fitness?

14
00:00:40,980 --> 00:00:43,310
>> Well, I meant fit like well, I did. But I

15
00:00:43,310 --> 00:00:46,480
guess fit, like, whatever the fitness function tells you is fit.

16
00:00:46,480 --> 00:00:49,190
>> Great! Okay, so, since we applied the

17
00:00:49,190 --> 00:00:51,180
fitness function f to all the individuals we

18
00:00:51,180 --> 00:00:52,870
have scores for them, and if we want to

19
00:00:52,870 --> 00:00:55,150
select the ones that are most fit, which ones

20
00:00:55,150 --> 00:00:56,310
do you think those would be? I guess you're

21
00:00:56,310 --> 00:00:58,050
saying those would be the ones with the highest scores.

22
00:00:58,050 --> 00:00:59,140
>> Yeah.

23
00:00:59,140 --> 00:01:02,460
>> So that is, that's definitely one way to do it, where what happens is

24
00:01:02,460 --> 00:01:07,290
you take the, say, top half of the population in terms of their scores, and we

25
00:01:07,290 --> 00:01:11,020
declare them to be the most fit and everybody else to be the least fit. But

26
00:01:11,020 --> 00:01:12,000
there's other ways you can do it as

27
00:01:12,000 --> 00:01:16,460
well. One, this is sometimes called truncation selection.

28
00:01:16,460 --> 00:01:20,590
But there's also an idea called roulette wheel selection where what you

29
00:01:20,590 --> 00:01:25,330
do is you actually select individuals at random but you give the higher

30
00:01:25,330 --> 00:01:29,450
scoring individuals a higher probability of actually being selected. So we don't

31
00:01:29,450 --> 00:01:34,170
just strictly choose the best ones, we choose weighted by who's the best.

32
00:01:34,170 --> 00:01:37,360
>> So does this get back to exploitation versus exploration then?

33
00:01:38,430 --> 00:01:39,802
>> I think it does. I think it, I was

34
00:01:39,802 --> 00:01:41,540
certainly having that thought when I was saying it out loud.

35
00:01:41,540 --> 00:01:43,220
That this is a, it's a similar kind of

36
00:01:43,220 --> 00:01:46,490
idea and in fact you can use Boltzmann distribution type

37
00:01:46,490 --> 00:01:48,600
ideas similar to the annealing type idea for doing this

38
00:01:48,600 --> 00:01:51,264
selection where you have a temperature parameter. If you set

39
00:01:51,264 --> 00:01:54,540
the temperature parameter to zero then you get something

40
00:01:54,540 --> 00:01:57,270
like just choosing the top half. And if you set

41
00:01:57,270 --> 00:02:00,050
the temperature to be something like infinity then you're just

42
00:02:00,050 --> 00:02:05,150
going to randomly choose samples from the population irregardless, no.

43
00:02:05,150 --> 00:02:06,420
>> Irregardless is a word.

44
00:02:06,420 --> 00:02:06,572
>> Is

45
00:02:06,572 --> 00:02:07,340
it really?

46
00:02:07,340 --> 00:02:08,258
>> Yes it's actually a word.

47
00:02:08,258 --> 00:02:09,910
>> Irrespective is what I wanted to

48
00:02:09,910 --> 00:02:12,800
say. Irrespective of the fitness of those individuals.

49
00:02:12,800 --> 00:02:15,450
>> Well irregardless I understand what you mean.

50
00:02:15,450 --> 00:02:18,346
>> Alright, so then that's going to, we declare some of them as most

51
00:02:18,346 --> 00:02:22,240
fit. Then what we're going to do is pair up those most fit individuals. This

52
00:02:22,240 --> 00:02:24,290
is like a dating service now. And

53
00:02:24,290 --> 00:02:27,960
let them produce offspring using crossover and maybe

54
00:02:27,960 --> 00:02:31,875
a little bit of mutation to. So instead of just taking the combination of the

55
00:02:31,875 --> 00:02:35,180
two parent individuals, we take their combination and then we make

56
00:02:35,180 --> 00:02:38,270
little, little local changes to it, to mute, mutate them. And

57
00:02:38,270 --> 00:02:41,040
we let that, the, the value of that pair that, that

58
00:02:41,040 --> 00:02:44,560
new offspring replace one of the least fit individuals in the population.

59
00:02:44,560 --> 00:02:45,970
>> So Michael, can I ask you a question?

60
00:02:45,970 --> 00:02:46,600
>> Sure.

61
00:02:46,600 --> 00:02:48,250
>> I'm having a hard time what is

62
00:02:48,250 --> 00:02:51,120
crossover means. Can you draw me a little picture?

63
00:02:51,120 --> 00:02:56,220
>> Sure. That we, this might be, you know rated R.

64
00:02:56,220 --> 00:02:57,110
>> That's fine.

65
00:02:57,110 --> 00:02:59,960
>> No, no, no. No, you're right because we're going to do it well

66
00:02:59,960 --> 00:03:03,390
so, it turns out that this is sort of generic, we can define crossover in

67
00:03:03,390 --> 00:03:05,560
many different ways. But I think you're

68
00:03:05,560 --> 00:03:07,020
right, I think it's worth looking at some

69
00:03:07,020 --> 00:03:09,040
concrete examples because it gives you some

70
00:03:09,040 --> 00:03:11,520
insight into why this operation might be useful.

71
00:03:11,520 --> 00:03:12,220
>> Okay.
