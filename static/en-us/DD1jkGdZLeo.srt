1
00:00:00,430 --> 00:00:03,480
But the problem doesn't stop there. Metadata is

2
00:00:03,480 --> 00:00:07,030
overloaded, but my video has gotten popular. And

3
00:00:07,030 --> 00:00:10,240
so all of these guys want to download

4
00:00:10,240 --> 00:00:12,870
the content from me, which means that everybody

5
00:00:12,870 --> 00:00:18,860
is coming to me, and I have an itsy bitsy server in my basement. And that

6
00:00:18,860 --> 00:00:21,230
is going to get inundated with all of

7
00:00:21,230 --> 00:00:25,820
these download requests from all of these different clients

8
00:00:25,820 --> 00:00:32,119
that want to get this video from me. So, there is a metadata overload and there

9
00:00:32,119 --> 00:00:34,725
is a content overload that is coming about

10
00:00:34,725 --> 00:00:38,990
because of the fact that something became really hot

11
00:00:38,990 --> 00:00:41,590
and everybody wants to get that content. And

12
00:00:41,590 --> 00:00:43,980
this is what is called the origin server

13
00:00:43,980 --> 00:00:46,870
overload. In general, there are two solutions to

14
00:00:46,870 --> 00:00:51,250
the origin server overload problem. The first solution is

15
00:00:51,250 --> 00:00:53,010
to have a web proxy. And you might

16
00:00:53,010 --> 00:00:56,490
be familiar with this already because every organization tends

17
00:00:56,490 --> 00:01:01,970
to have a web proxy so that they can limit the amount of requests that have to

18
00:01:01,970 --> 00:01:07,360
go out of an organization. And that way if users of an organization

19
00:01:07,360 --> 00:01:12,430
are trying to access popular content from the Internet, the local web proxy

20
00:01:12,430 --> 00:01:17,000
that's available in the organization can directly serve

21
00:01:17,000 --> 00:01:20,860
that content to the requesters. But it turns out that

22
00:01:20,860 --> 00:01:23,540
the web proxy solution is not good enough for what

23
00:01:23,540 --> 00:01:26,970
is called a Slashdot effect. And that is, if there

24
00:01:26,970 --> 00:01:30,760
is a breaking news and everyone wants to get the

25
00:01:30,760 --> 00:01:34,080
content, they will have to get the fresh content. A

26
00:01:34,080 --> 00:01:37,540
proxy's not good enough for that. Let's say that there's

27
00:01:37,540 --> 00:01:39,860
a Super Bowl going on and everybody wants to watch

28
00:01:39,860 --> 00:01:42,150
the Super Bowl, or at least get the latest updates

29
00:01:42,150 --> 00:01:44,110
from that. In that case, the web proxy's

30
00:01:44,110 --> 00:01:46,480
not going to be good, because the content

31
00:01:46,480 --> 00:01:49,600
in the web proxy is cached content. You

32
00:01:49,600 --> 00:01:52,550
want the live content. And the live content is

33
00:01:52,550 --> 00:01:55,200
only available at the origin server, not at

34
00:01:55,200 --> 00:01:58,520
the proxies, and therefore the origin server will get

35
00:01:58,520 --> 00:02:02,895
overloaded when we have such dynamic content. Content

36
00:02:02,895 --> 00:02:07,910
that is resulting from either breaking news, or live

37
00:02:07,910 --> 00:02:09,970
programming, and so on. And this is

38
00:02:09,970 --> 00:02:13,470
where the content distribution networks come into play.

39
00:02:13,470 --> 00:02:16,200
The idea is that the content is

40
00:02:16,200 --> 00:02:20,200
automatically mirrored from the origin server at selected

41
00:02:20,200 --> 00:02:24,600
geographical locations. And those locations are constantly

42
00:02:24,600 --> 00:02:28,090
getting updated from the origin server. So that

43
00:02:28,090 --> 00:02:33,440
going to any of the mirrored content is the same as going to the origin server.

44
00:02:34,580 --> 00:02:36,990
And then what happens is that, in

45
00:02:36,990 --> 00:02:41,120
the content distribution network, depending on the geographical

46
00:02:41,120 --> 00:02:43,830
area from which a particular user request

47
00:02:43,830 --> 00:02:47,518
originates, the user request is dynamically re-routed to

48
00:02:47,518 --> 00:02:50,670
the geo-local mirror of the content so

49
00:02:50,670 --> 00:02:53,920
that the origin server need not be overloaded.

50
00:02:53,920 --> 00:02:57,190
You may be familiar with companies like Akamai

51
00:02:57,190 --> 00:02:59,655
which have come about for the purposes of

52
00:02:59,655 --> 00:03:03,150
providing content distribution network for popular

53
00:03:03,150 --> 00:03:06,920
content providers, like CNN or broadcast television

54
00:03:06,920 --> 00:03:13,750
channels like CBS, NBC, and so on. And what these organizations, that is

55
00:03:13,750 --> 00:03:18,930
the content providers, do is get into an agreement with a content distribution

56
00:03:18,930 --> 00:03:25,175
network provider like Akamai, so that they don't have to worry about origin

57
00:03:25,175 --> 00:03:29,510
server overload because the content distribution network

58
00:03:29,510 --> 00:03:32,360
provider like Akamai have the solution for

59
00:03:32,360 --> 00:03:34,740
taking the content of the origin and

60
00:03:34,740 --> 00:03:38,991
automatically mirroring it in geo-local sites so

61
00:03:38,991 --> 00:03:44,240
that the origin server never gets overloaded. So, this is good if you are a big

62
00:03:44,240 --> 00:03:50,830
organization like CNN, or CBS. You can afford to pay the content

63
00:03:50,830 --> 00:03:55,620
distribution network provider to do this automatic mirroring, but

64
00:03:55,620 --> 00:03:59,610
how can we democratize content distribution. How am I,

65
00:03:59,610 --> 00:04:03,080
in my basement, generating a piece of video and

66
00:04:03,080 --> 00:04:04,980
I want to share it with the world, how

67
00:04:04,980 --> 00:04:07,410
am I going to make that available to everybody?

68
00:04:07,410 --> 00:04:09,220
If it gets hot, I don't want to get

69
00:04:09,220 --> 00:04:13,160
overloaded. I want the content distribution network to work

70
00:04:13,160 --> 00:04:16,140
without having to pay big bucks to a content

71
00:04:16,140 --> 00:04:19,519
distribution network provider like Akamai. And this

72
00:04:19,519 --> 00:04:22,220
is where the Coral System comes in. This

73
00:04:22,220 --> 00:04:23,590
is a paper that I've assigned you

74
00:04:23,590 --> 00:04:27,670
to read which has a technique for democratizing

75
00:04:27,670 --> 00:04:31,100
content distribution. And the details of the

76
00:04:31,100 --> 00:04:32,820
Coral System, and what we're going to look

77
00:04:32,820 --> 00:04:37,660
at next. So the Coral System addresses two

78
00:04:37,660 --> 00:04:41,600
issues. The first issue is the fact that

79
00:04:41,600 --> 00:04:47,690
if I generate some content, and I want to store the key value pair

80
00:04:47,690 --> 00:04:54,250
associated with the content in a DHT, I have to have a scalable way of

81
00:04:54,250 --> 00:04:59,160
doing it without saturating any particular node

82
00:04:59,160 --> 00:05:01,770
which can serve as a metadata server. So

83
00:05:01,770 --> 00:05:06,920
we want to avoid the tree-saturation effect and the second thing we want to do

84
00:05:06,920 --> 00:05:10,120
is also avoid the origin server overload.

85
00:05:10,120 --> 00:05:12,810
So both of those things are being addressed

86
00:05:12,810 --> 00:05:16,190
in providing a democratic solution for content

87
00:05:16,190 --> 00:05:19,340
distribution for the average Joe that may want

88
00:05:19,340 --> 00:05:23,250
to generate some content, and want to share it with the rest of the world.

89
00:05:23,250 --> 00:05:27,440
We will look at the details of the Coral System in the rest of this lecture.
