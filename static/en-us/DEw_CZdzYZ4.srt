1
00:00:00,138 --> 00:00:04,497
So let's look back at
the TMDBClient.swift file.

2
00:00:04,497 --> 00:00:08,813
There are two commented methods in
this file called taskForGETMethod and

3
00:00:08,813 --> 00:00:11,020
taskForPOSTMethod.

4
00:00:11,020 --> 00:00:14,857
The goals of these methods is to take
the duplicate code that exists for

5
00:00:14,857 --> 00:00:19,085
the GET request the the POST requests
that we're making to the movie database

6
00:00:19,085 --> 00:00:20,338
and moving them here.

7
00:00:20,338 --> 00:00:22,488
Now, you could create different
methods for this goal.

8
00:00:22,488 --> 00:00:26,238
They don't have to be called
taskForGETMethod and taskForPOSTMethod.

9
00:00:26,238 --> 00:00:29,218
Those were just some names that
we chose for this example.

10
00:00:29,218 --> 00:00:32,523
Now you could even split these
methods taskForGETMethod and

11
00:00:32,523 --> 00:00:36,089
taskForPOSTMethod into smaller methods,
each specialized for

12
00:00:36,089 --> 00:00:38,438
a different part of
making a network task.

13
00:00:38,438 --> 00:00:41,388
So maybe building the URL,
making the task and then you

14
00:00:41,388 --> 00:00:45,578
could have something that checks the
errors and I'd highly encourage that.

15
00:00:45,578 --> 00:00:48,258
But for now, we're just going to
work with these two methods.

16
00:00:48,258 --> 00:00:50,696
I'm going to delete these real quick and

17
00:00:50,696 --> 00:00:55,198
use them as a way of giving you an idea
of how this kind of process works.

18
00:00:55,198 --> 00:00:59,528
How this process of better
architecturing our apps work.

19
00:00:59,528 --> 00:01:00,989
Because at the end of the day,

20
00:01:00,989 --> 00:01:04,688
what we're really trying to accomplish
here is better design of our code.

21
00:01:04,688 --> 00:01:08,622
And if you talk to ten different
developers, you might get ten different

22
00:01:08,622 --> 00:01:12,508
ideas about what better design is,
but that's kind of another topic.

23
00:01:12,508 --> 00:01:15,997
For now, let's just focus on what
these methods take as parameters and

24
00:01:15,997 --> 00:01:20,000
what they return, so that we can
work on this specific example.

25
00:01:20,000 --> 00:01:23,450
Each method takes a string
parameter called method.

26
00:01:23,450 --> 00:01:27,470
The intent of this parameter is to
represent the API method that should be

27
00:01:27,470 --> 00:01:29,130
used by the request.

28
00:01:29,130 --> 00:01:34,120
So remember these are things like,
what was it, authentication,

29
00:01:34,120 --> 00:01:37,018
validate with token or slash account.

30
00:01:37,018 --> 00:01:39,912
These were the methods
that we're talking about,

31
00:01:39,912 --> 00:01:44,152
then our second parameter for lack of
a better word is called parameters and

32
00:01:44,152 --> 00:01:48,326
it's a variable parameter and it takes
any of the parameters that we want to

33
00:01:48,326 --> 00:01:50,503
specify in the URL such as the ApIKey.

34
00:01:50,503 --> 00:01:54,428
These are things that go in
the query portion of the URL.

35
00:01:54,428 --> 00:01:56,614
Next, for the taskForPOSTMethod,

36
00:01:56,614 --> 00:02:01,558
we have this extra parameter that's not
included in taskForGET called jsonBody.

37
00:02:01,558 --> 00:02:06,230
And of course, this parameter allows
us to pass in values into the HTTP body

38
00:02:06,230 --> 00:02:09,358
of a post request and
we'll look at it more later.

39
00:02:09,358 --> 00:02:13,510
Now, the last parameter is where these
two methods get really interesting.

40
00:02:13,510 --> 00:02:16,700
Both methods end with
a closure parameter

41
00:02:16,700 --> 00:02:19,890
called a completionHandlerForGET
in this case and

42
00:02:19,890 --> 00:02:24,080
completionHandlerForPOST in
the taskForPOSTMethod.

43
00:02:24,080 --> 00:02:27,150
Now remember,
a closure is just a block of code.

44
00:02:27,150 --> 00:02:30,230
If you need a refresher on closures,
I recommend that you go back and

45
00:02:30,230 --> 00:02:34,150
watch the SWF syntax section
that we have on closures.

46
00:02:34,150 --> 00:02:37,020
Now these closures that we've
called completion handlers, they're

47
00:02:37,020 --> 00:02:40,850
very similar to the completion handlers
that you seen before when we used

48
00:02:40,850 --> 00:02:46,030
the NSURLSessionDataTask for request and
we can look an example at over here.

49
00:02:46,030 --> 00:02:50,250
Remember, those completion handlers,
they had the data, response and

50
00:02:50,250 --> 00:02:54,810
error parameters and these completion
handlers aren't run until the data task

51
00:02:54,810 --> 00:02:58,168
itself completes and
then it executes this block of code.

52
00:02:58,168 --> 00:03:00,238
These things are very
similar here on the left.

53
00:03:00,238 --> 00:03:02,295
These completion handlers very similar,
but

54
00:03:02,295 --> 00:03:05,280
the signature is just
a little bit different.

55
00:03:05,280 --> 00:03:09,110
These completion handlers take result,
which could be AnyObject and

56
00:03:09,110 --> 00:03:13,070
an optional NSError and
a return void or nothing.

57
00:03:14,282 --> 00:03:18,040
We're going to use these completion
handlers to pass back the resulting data

58
00:03:18,040 --> 00:03:22,580
from our network requests in the result
parameter or if an error happens for

59
00:03:22,580 --> 00:03:26,900
our request, then we'll pass back back
the error in the error parameter.

60
00:03:26,900 --> 00:03:29,494
If that was hard to follow,
then let's pause and

61
00:03:29,494 --> 00:03:32,229
let's take a look at
the taskFor GetImageMethod.

62
00:03:32,229 --> 00:03:35,321
It's already implemented and
it has a similar completion handler,

63
00:03:35,321 --> 00:03:37,403
it's called
completionHandlerForImage and

64
00:03:37,403 --> 00:03:40,508
it's going to look very much like
what we'll do for these two methods.

65
00:03:40,508 --> 00:03:42,160
So, let's take a look
at this one real quick.

66
00:03:43,630 --> 00:03:48,640
So in this method,
we start by building the URL,

67
00:03:48,640 --> 00:03:51,320
so we can make a network request for
some image.

68
00:03:53,980 --> 00:03:56,140
Keep scrolling, there we go.

69
00:03:56,140 --> 00:04:00,114
It makes the request and then
the completion handler for the request,

70
00:04:00,114 --> 00:04:04,152
it starts with our series of guard
statements to make sure that there was

71
00:04:04,152 --> 00:04:07,586
no error and then assuming all
these guard statements pass,

72
00:04:07,586 --> 00:04:10,378
then it calls
the completionHandlerForImage.

73
00:04:10,378 --> 00:04:14,552
And it passes the resulting data,
the imageData and because there was no

74
00:04:14,552 --> 00:04:18,726
error, it passes nil for the error and
then it calls the resume method for

75
00:04:18,726 --> 00:04:22,438
the task to make sure it runs and
then we return the network task.

76
00:04:22,438 --> 00:04:26,150
Now the network task being returned
here is just an implementation detail,

77
00:04:26,150 --> 00:04:27,778
don't worry about that for now.

78
00:04:27,778 --> 00:04:31,658
Let's focus on this call to
the completionHandlerForImage.

79
00:04:31,658 --> 00:04:37,328
This line of code, it calls the closure
that's passed Into taskForGETImage.

80
00:04:37,328 --> 00:04:38,588
It's calling this closure.

81
00:04:41,218 --> 00:04:44,588
So, let's see what this looks like
if we're call taskForGETImage.

82
00:04:44,588 --> 00:04:47,530
It's going to make this make
a lot more sense, I think.

83
00:04:47,530 --> 00:04:48,860
Now back in our loginViewController,

84
00:04:48,860 --> 00:04:51,040
let's pretend that I want to
call taskForGETImage.

85
00:04:52,410 --> 00:04:55,370
So to call this, I'm going to specify
some phony size and file path and

86
00:04:55,370 --> 00:04:58,251
then we'll get to the
completionHandlerForImage closure part.

87
00:04:59,380 --> 00:05:02,130
Now, this is where we get a real
opportunity to see the power of

88
00:05:02,130 --> 00:05:03,520
closures.

89
00:05:03,520 --> 00:05:06,500
Here where I'm calling taskForGetImage,

90
00:05:06,500 --> 00:05:10,109
I want to specify what I want to
happen when this task completes.

91
00:05:11,260 --> 00:05:15,001
Closure, which we've specified
as a trailing closure,

92
00:05:15,001 --> 00:05:19,428
it has access to the imageData and
any error that may have occurred and

93
00:05:19,428 --> 00:05:21,278
you can get rid of Void here.

94
00:05:21,278 --> 00:05:25,281
If you think about it, this is the exact
same behavior that we want with our

95
00:05:25,281 --> 00:05:27,748
taskForGETMethod and taskForPOSTMethod.

96
00:05:27,748 --> 00:05:31,588
Inside of our view controller, so this
is our loginViewController remember,

97
00:05:31,588 --> 00:05:34,238
we want to be able to make
our request using the client.

98
00:05:34,238 --> 00:05:38,440
So that TMDB client's being used and
then when the request completes,

99
00:05:38,440 --> 00:05:42,303
we can use the resulting data or
the error in the view controller.

100
00:05:42,303 --> 00:05:45,046
And this helps reduce the complexity
of our view controllers,

101
00:05:45,046 --> 00:05:47,643
because it puts all of
the networking code into the client.

102
00:05:47,643 --> 00:05:49,183
We don't see any networking code here.

103
00:05:49,183 --> 00:05:52,288
We just see the tasks that we're
wanting to call and we see, hey,

104
00:05:52,288 --> 00:05:54,728
we're going to get some data back or
some error back.

105
00:05:54,728 --> 00:05:56,348
What do you want to do with it?

106
00:05:56,348 --> 00:05:58,605
So from the perspective
of the view controller,

107
00:05:58,605 --> 00:06:01,240
we don't really care how
the networking works.

108
00:06:01,240 --> 00:06:04,464
We just want to know are there
results or was there an error and

109
00:06:04,464 --> 00:06:07,008
then we can handle those
cases appropriately.

110
00:06:07,008 --> 00:06:10,268
So that was a lot to take in, so
let's just pause for a second.

111
00:06:10,268 --> 00:06:12,930
If you need to take a deep breath,
if you need to go back and

112
00:06:12,930 --> 00:06:16,250
rewatch this video from the beginning,
feel free.

113
00:06:16,250 --> 00:06:17,320
When you're ready to move forward,

114
00:06:17,320 --> 00:06:19,191
we're going to get started
with tasksForGETMethod and

115
00:06:19,191 --> 00:06:22,810
it's going to look a lot like this
taskForGETImage in the sense that it's

116
00:06:22,810 --> 00:06:26,040
going to allow our view controllers
to just make the call and

117
00:06:26,040 --> 00:06:29,070
then have our completion handler,
our closure here,

118
00:06:29,070 --> 00:06:31,070
specify what we want to
do with the results.
