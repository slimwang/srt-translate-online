1
00:00:00,180 --> 00:00:04,560
Now that we've finished defining the MDP
in burlap, we can use a planning or

2
00:00:04,560 --> 00:00:08,520
reinforcement algorithm,
provided by burlap, to solve this MDP.

3
00:00:08,520 --> 00:00:09,420
For this tutorial,

4
00:00:09,420 --> 00:00:14,280
we'll use a value iteration to find
the values of states S1, S2, and S3.

5
00:00:15,330 --> 00:00:17,640
Whichever of these states
has the highest value,

6
00:00:17,640 --> 00:00:22,740
will tell us which action, a, b, or c,
we most prefer for our initial action.

7
00:00:22,740 --> 00:00:25,350
Value iteration is
a class in burlap which

8
00:00:25,350 --> 00:00:28,600
implements the value iteration
algorithm from lecture.

9
00:00:28,600 --> 00:00:32,189
It does all the work of iterative
bellman equation updates for us.

10
00:00:32,189 --> 00:00:36,740
To instantiate it, we need to pass
the domain reward function and

11
00:00:36,740 --> 00:00:39,490
terminal function we previously defined.

12
00:00:39,490 --> 00:00:42,110
We also need to pass
a few more parameters.

13
00:00:42,110 --> 00:00:45,960
A double gamma, which is
the discount factor between zero and

14
00:00:45,960 --> 00:00:50,970
one, a state hash factory object,
which I'll talk about in a moment,

15
00:00:52,410 --> 00:00:56,640
a double maxDelta and
an int maxIterations.

16
00:00:56,640 --> 00:01:00,320
Which are two stopping conditions for
the value iteration procedure.

17
00:01:00,320 --> 00:01:04,750
The procedure will stop if no state's
value changes by more than maxDelta

18
00:01:04,750 --> 00:01:06,720
in a single iteration.

19
00:01:06,720 --> 00:01:11,040
And the procedure will also stop
after running max iterations times.

20
00:01:11,040 --> 00:01:15,320
The state hash factory is an interface
providing the method hash state,

21
00:01:15,320 --> 00:01:19,560
which takes a state object and
produces a state hash tuple.

22
00:01:19,560 --> 00:01:20,240
This allows for

23
00:01:20,240 --> 00:01:24,570
fast retrieval of state objects
during the value iteration procedure.

24
00:01:24,570 --> 00:01:28,780
Since our MDP consists of a finite
number of discrete states,

25
00:01:28,780 --> 00:01:35,030
we will pass a DiscreteStateHashFactory
to the value iteration constructor.

26
00:01:35,030 --> 00:01:35,820
Let's go ahead and

27
00:01:35,820 --> 00:01:39,780
add a DiscreteStateHashFactory
to our first MDP class.

28
00:01:39,780 --> 00:01:43,630
And later we'll pass this object to
the value iteration constructor.

29
00:01:43,630 --> 00:01:46,330
Note that we'll need to add
these import statements to

30
00:01:46,330 --> 00:01:49,770
use the discrete hash factory and
the value iteration objects.

31
00:01:49,770 --> 00:01:53,970
The packages you need to import can be
found by browsing the documentation.

32
00:01:53,970 --> 00:01:56,230
Or if you are using an IDE,

33
00:01:56,230 --> 00:02:00,570
the appropriate import statements can
likely be added automatically as needed.

34
00:02:00,570 --> 00:02:05,270
Next, lets add the member field
hashfactory, and then in the first MDB

35
00:02:05,270 --> 00:02:11,090
constructor, initialize hashFactory to
a new DiscreteStateHashFactory object.

36
00:02:11,090 --> 00:02:13,160
Now that we've created our hashFactory,

37
00:02:13,160 --> 00:02:15,820
we're in the position to
perform value iteration.

38
00:02:15,820 --> 00:02:20,065
Let's write a private method,
computeValue that will be used to return

39
00:02:20,065 --> 00:02:24,400
a ValueIteration object,
available internally to the class.

40
00:02:24,400 --> 00:02:28,340
Let's make the method dependent on
just the single parameter gamma.

41
00:02:28,340 --> 00:02:32,151
For our purposes,
we'll just set the maxDelta and

42
00:02:32,151 --> 00:02:37,570
maxIterations parameters
by hand to 0.0001 and 1000.

43
00:02:37,570 --> 00:02:40,370
Then we'll pass all the required
parameters to a new

44
00:02:40,370 --> 00:02:42,290
ValueIteration object.

45
00:02:42,290 --> 00:02:45,750
Now I'd like you to fill in this blank
in the code to perform the value

46
00:02:45,750 --> 00:02:50,150
iteration procedure on our MDP
before returning the object vi.

47
00:02:50,150 --> 00:02:54,500
Feel free to refer to the value
iteration documentation as needed.
