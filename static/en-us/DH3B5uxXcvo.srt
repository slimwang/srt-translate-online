1
00:00:00,238 --> 00:00:02,139
Welcome to Problem Set #1.

2
00:00:02,139 --> 00:00:05,742
I'm Chin Hun and I'm your TA for the class.

3
00:00:05,742 --> 00:00:09,212
Today I will be walking you through Problem Set #1.

4
00:00:09,212 --> 00:00:17,787
And for Problem Set #1, our goal is convert an image from color to black and white.

5
00:00:17,787 --> 00:00:22,392
To convert an image from color to black and white,

6
00:00:22,392 --> 00:00:26,995
we first have to understand how colored digital images are represented.

7
00:00:26,995 --> 00:00:35,421
The most common format is to specify how much red, green, and blue is presented at each pixel.

8
00:00:35,421 --> 00:00:37,879
Each color is called a channel.

9
00:00:37,879 --> 00:00:46,240
Zero means that a color is fully absent, whereas 255 means that color is fully saturated.

10
00:00:46,240 --> 00:00:51,011
Therefore, if at a pixel all three channels—red, green, and blue—

11
00:00:51,011 --> 00:00:55,582
are zero means that pixel is black, like such.

12
00:00:55,582 --> 00:01:03,156
Or if all three channels—red, green, and blue—are 255 that pixel is fully white,

13
00:01:03,156 --> 00:01:05,974
just like the background of this slide.

14
00:01:05,974 --> 00:01:08,637
So how are pixels represented in CUDA?

15
00:01:08,637 --> 00:01:14,687
In CUDA code each pixel is represented as an unsigned char4 struct.

16
00:01:14,687 --> 00:01:21,463
This structure has four unsigned char components named x, y, z, and w.

17
00:01:21,463 --> 00:01:31,908
X is your red channel, Y is your green channel, Z is your blue channel, and W is your alpha channel.

18
00:01:31,908 --> 00:01:37,058
The fourth component, char W here, is reserved for the Alpha channel,

19
00:01:37,058 --> 00:01:40,169
which carries the transparency information.

20
00:01:40,169 --> 00:01:42,567
We will ignore this component throughout our homework,

21
00:01:42,567 --> 00:01:48,775
as this does not pertain to transforming the image from color to greyscale.

22
00:01:48,775 --> 00:01:53,180
How do we convert a color image to a black and white image?

23
00:01:53,180 --> 00:01:59,053
One possibility was simply to take the average of all of the three color channels.

24
00:01:59,053 --> 00:02:02,622
For example, add R to G to B—

25
00:02:02,622 --> 00:02:07,461
the channels R stands for red, G stands for green, and B stands for blue—

26
00:02:07,461 --> 00:02:09,895
and simply divide it by three.

27
00:02:09,895 --> 00:02:14,316
But it turns out that our eyes don't respond to all colors equally.

28
00:02:14,316 --> 00:02:21,724
We're more sensitive to the color green than red and more sensitive to the color red than to the color blue.

29
00:02:21,724 --> 00:02:26,135
Taking into account our varying sensitivities to the different color channels,

30
00:02:26,135 --> 00:02:29,063
we are going to use this following formula instead.

31
00:02:29,063 --> 00:02:34,620
We are going to multiply the color channel red by 0.299,

32
00:02:34,620 --> 00:02:39,986
we are going to multiply the color channel green by 0.587,

33
00:02:39,986 --> 00:02:46,059
and we are going to multiply the color channel blue by 0.114.

34
00:02:46,059 --> 00:02:48,096
So let's look at Problem Set #1,

35
00:02:48,096 --> 00:02:51,865
and let's look at the code that you will actually have to write for this assignment.

36
00:02:51,865 --> 00:02:55,836
For Problem Set #1, you have two jobs that you have to do.

37
00:02:55,836 --> 00:03:02,343
For the first part, your job is to fill in this RGBA to greyscale function.

38
00:03:02,343 --> 00:03:09,190
We will pass you in an array of uchar4 which represents the pixel in the color image,

39
00:03:09,190 --> 00:03:15,897
and your job is to convert each pixel in this 2D array into an intensity value

40
00:03:15,897 --> 00:03:20,595
that you will write back to this 1D array called greyImage.

41
00:03:20,595 --> 00:03:26,169
You will follow the formula that we talked about in the previous slide, as seen here.

42
00:03:26,169 --> 00:03:32,649
In part two, the kernel's already filled in for you but with incorrect dimensions and spot is empty.

43
00:03:32,649 --> 00:03:36,718
So your job for part two is to fill in the body of the kernel

44
00:03:36,718 --> 00:03:42,091
and to correct the dimension of block size and grid size.

45
00:03:42,091 --> 00:03:47,730
We have included reference code that performs the same calculation of serial on the CPU for your reference,

46
00:03:47,730 --> 00:03:51,353
and if you have any questions or if you run into any problems,

47
00:03:51,353 --> 00:03:54,335
feel free to post on the forums, and I'll be there to help you.

48
00:03:54,335 --> 00:03:59,272
Lastly, I would like to thank Eric Elson of Royal Caliber and Mike Roberts

49
00:03:59,272 --> 00:04:02,209
for their fantastic job with writing the homeworks.

50
00:04:02,209 --> 00:04:06,046
They have also written the script for this video today as well,

51
00:04:06,046 --> 00:04:09,000
so thank you Eric and Mike.
