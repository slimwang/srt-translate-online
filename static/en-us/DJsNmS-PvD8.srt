1
00:00:00,340 --> 00:00:03,270
Static data is not all that useful,
I know.

2
00:00:03,270 --> 00:00:07,370
Luckily, you have this content provider
that has the exact data we need.

3
00:00:07,370 --> 00:00:09,460
Let's put these things together.

4
00:00:09,460 --> 00:00:11,340
But wait, we took all this effort and

5
00:00:11,340 --> 00:00:13,880
sunshine to not run queries
on the main thread.

6
00:00:13,880 --> 00:00:19,600
AsyncTasks, IntentServices, Loaders,
and SyncAdapters were all used.

7
00:00:19,600 --> 00:00:22,410
What can we do here, or
is there even a problem?

8
00:00:22,410 --> 00:00:25,980
Let's go back to when we added our
app widget provider to the manifest.

9
00:00:25,980 --> 00:00:29,370
The app widget provider class is
actually a thin wrapper around

10
00:00:29,370 --> 00:00:33,890
one of the basic types of components
on Android, a broadcast receiver.

11
00:00:35,215 --> 00:00:40,105
Broadcast receiver is a short lived
component that receives broadcasts

12
00:00:40,105 --> 00:00:44,875
from other components, or other apps,
through its onReceive method.

13
00:00:44,875 --> 00:00:49,754
App widget provider harnesses
the broadcast sent by the Android system

14
00:00:49,754 --> 00:00:54,887
provides us with a simpler to use
onUpdate() method among other things.

15
00:00:54,887 --> 00:00:57,387
Turns out the onReceive() method and

16
00:00:57,387 --> 00:01:01,665
hence our onUpdate() method
get called on the UI thread.

17
00:01:01,665 --> 00:01:04,650
Doing anything that might take a while,
is probably not a good idea.

18
00:01:06,300 --> 00:01:10,890
A very common pattern, one you need to
do more work in response to a broadcast,

19
00:01:10,890 --> 00:01:15,800
is the broadcast receiver starting
an Intent Service, do to heavy lifting.

20
00:01:15,800 --> 00:01:17,340
Intent Services are great for

21
00:01:17,340 --> 00:01:21,750
this kind of work because the On Handle
Intent, runs on a Background Thread.

22
00:01:21,750 --> 00:01:24,380
And the service is automatically
stopped once done.

23
00:01:24,380 --> 00:01:27,580
No need to keep the service around
when there's nothing to do.

24
00:01:27,580 --> 00:01:32,800
So we'll write an intense service that
does everything our onUpdate method did

25
00:01:32,800 --> 00:01:34,870
and change our onUpdate
to CallStartService.

26
00:01:35,880 --> 00:01:39,530
Now, we can use the same technique we
used elsewhere to retrieve data from our

27
00:01:39,530 --> 00:01:42,450
content provider,
query to retrieve our data,

28
00:01:42,450 --> 00:01:44,350
then extract the information we need.

29
00:01:45,680 --> 00:01:49,840
So now, we can see our app widget
provider is calling our intent service.

30
00:01:49,840 --> 00:01:55,070
Our IntentService is then querying for
the data and getting a response back.

31
00:01:55,070 --> 00:01:58,650
As our AppWidgetProvider is
a broadcast receiver at its core,

32
00:01:58,650 --> 00:02:03,010
our SyncAdapter could send
a data changed broadcast

33
00:02:03,010 --> 00:02:07,600
to our AppWidgetProvider to update the
widgets exactly when we have new data.

34
00:02:08,880 --> 00:02:12,440
We'll add a new constant
to our SyncAdapter.

35
00:02:12,440 --> 00:02:18,420
Then use that constant as the action for
the broadcast we send out.

36
00:02:18,420 --> 00:02:20,520
Then we'll update our manifest entry for

37
00:02:20,520 --> 00:02:24,170
the app widget provider to
receive the new action.

38
00:02:26,260 --> 00:02:31,400
Finally to actually handle our message,
we override the onReceive method

39
00:02:31,400 --> 00:02:35,860
to look for our action and start the
Intent Service to update the widgets.
