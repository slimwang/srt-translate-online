1
00:00:00,250 --> 00:00:03,682
Now that we've got the helper procedure, defining date between dates is pretty

2
00:00:03,682 --> 00:00:07,624
simple. We have our while loop condition, checking of date 1 is before date 2.

3
00:00:07,624 --> 00:00:12,935
And then, we update the year1, month1, and day1 values with the next day. And we

4
00:00:12,935 --> 00:00:17,218
add 1 to the number of days. So, let's try a few examples. And this was the one

5
00:00:17,218 --> 00:00:21,365
we worked out by hand earlier. We get 155. That's not exactly correct, but

6
00:00:21,365 --> 00:00:25,810
that's pretty close. We got 156 when we tried this by hand, and given that our

7
00:00:25,810 --> 00:00:29,778
next day assumes all months have 30 days, it's not surprising, we don't get

8
00:00:29,778 --> 00:00:34,339
exactly the right answer. Let's try another example. This will be a good sanity

9
00:00:34,339 --> 00:00:38,788
check that our solution's still fast enough. We've got 100 years here, and we

10
00:00:38,788 --> 00:00:44,017
got 36000 days, it seems correct, right with our 12 months of 30 days are year

11
00:00:44,017 --> 00:00:49,080
is 360 days long, instead of the correct length of the year. Let's try one more

12
00:00:49,080 --> 00:00:52,911
example, try to guess what will happen here before I run it. I get the answer 0.

13
00:00:52,911 --> 00:00:56,516
It's not really correct, right, those aren't the same day. Its a valid answer in

14
00:00:56,516 --> 00:01:00,664
the sense that the statement of what days between dates should do we could

15
00:01:00,664 --> 00:01:04,866
assume the first date is not after the second date. In this case the first date

16
00:01:04,866 --> 00:01:08,314
is after the second date, but it's not a very satisfactory answer. We really

17
00:01:08,314 --> 00:01:12,060
don't want to get the answer 0. We could change the specification to say that if

18
00:01:12,060 --> 00:01:15,745
the first date is after the second date, then, the result is 0. But that's sort

19
00:01:15,745 --> 00:01:19,418
of a strange way of looking things. But would make more sense would be either to

20
00:01:19,418 --> 00:01:23,060
give a negative result for this, that's going to make our code more complicated.

21
00:01:23,060 --> 00:01:27,122
We'll leave that as an exercise for you to do after this lesson. What I'm going

22
00:01:27,122 --> 00:01:30,847
to advocate instead is to program defensively. If the assumptions that the

23
00:01:30,847 --> 00:01:34,879
function depends on are not satisfied by the inputs, it's lot more helpful to

24
00:01:34,879 --> 00:01:38,848
have raise an assertion to give a failure, rather than to continue and give a

25
00:01:38,848 --> 00:01:42,948
mysterious result or behave in some other unexpected way. So, I'm going to ask

26
00:01:42,948 --> 00:01:44,633
you to do that yourself in a quiz.
