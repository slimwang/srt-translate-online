1
00:00:00,390 --> 00:00:03,070
So virtual memory management is part of the

2
00:00:03,070 --> 00:00:05,860
kernel of spring, and now we will talk

3
00:00:05,860 --> 00:00:08,800
about how virtual memory management happens in the

4
00:00:08,800 --> 00:00:12,290
spring operating system. There is a per machine virtual

5
00:00:12,290 --> 00:00:15,750
memory manager, and the virtual memory manager is

6
00:00:15,750 --> 00:00:19,740
in charge of managing the linear address space

7
00:00:19,740 --> 00:00:22,650
Of every process. As we know, the linear

8
00:00:22,650 --> 00:00:25,550
address space of a process is what the architecture

9
00:00:25,550 --> 00:00:29,350
gives you, and what the virtual memory manager does

10
00:00:29,350 --> 00:00:32,960
is to break this linear address space into regions. And

11
00:00:32,960 --> 00:00:34,400
you can think of regions as a set of

12
00:00:34,400 --> 00:00:37,320
pages. So you take the linear address space given by

13
00:00:37,320 --> 00:00:40,230
the architecture, that's the process address space Break that

14
00:00:40,230 --> 00:00:43,760
up into regions, but each region is a set of

15
00:00:43,760 --> 00:00:47,440
pages. And each region can be of different sizes.

16
00:00:47,440 --> 00:00:50,960
The second obstraction in the virtual memory management system is

17
00:00:50,960 --> 00:00:52,750
what is called a memory object, and the

18
00:00:52,750 --> 00:00:55,570
idea of breaking up this linear address space into

19
00:00:55,570 --> 00:00:59,100
regions. Is to allow these regions to be mapped

20
00:00:59,100 --> 00:01:03,190
to different memory objects. So, for instance, this region

21
00:01:03,190 --> 00:01:05,730
is mapped to this memory object. This region is

22
00:01:05,730 --> 00:01:09,020
mapped to a portion of this memory object. And

23
00:01:09,020 --> 00:01:12,310
these two regions Different regions of the same address

24
00:01:12,310 --> 00:01:16,200
space are mapped to the same memory object and

25
00:01:16,200 --> 00:01:18,520
this is perfectly fine. So, this is how the

26
00:01:18,520 --> 00:01:21,620
Virtual Memory Manager takes the linear address space and

27
00:01:21,620 --> 00:01:24,380
maps it to these memory objects. And what are

28
00:01:24,380 --> 00:01:28,210
these memory objects? The abstraction of a memory oject

29
00:01:28,210 --> 00:01:32,430
allows a region of virtual memory to be associated

30
00:01:32,430 --> 00:01:35,000
with a backing file. Or it could be the

31
00:01:35,000 --> 00:01:37,390
swap space on the disk, and things like this.

32
00:01:37,390 --> 00:01:41,950
So this memory object is the mechanism by which portions

33
00:01:41,950 --> 00:01:44,360
of the address space can be mapped to

34
00:01:44,360 --> 00:01:48,230
different Entities, which maybe on the dis as

35
00:01:48,230 --> 00:01:52,050
swap space or files in a file system.

36
00:01:52,050 --> 00:01:54,760
All of those are available to the abstraction

37
00:01:54,760 --> 00:01:59,750
of the memory object, so that regions in an address piece can be mapped to the

38
00:01:59,750 --> 00:02:03,480
backing entities. And it is also perfectly possible

39
00:02:03,480 --> 00:02:06,950
that multiple memory objects may map to the same

40
00:02:06,950 --> 00:02:09,900
backing file that is also perfectly possible. so

41
00:02:09,900 --> 00:02:12,240
the way to think about these abstractions is

42
00:02:12,240 --> 00:02:15,710
linear address space broken into regions, regions mapped

43
00:02:15,710 --> 00:02:19,260
to memory objects, and memory object is an abstraction

44
00:02:19,260 --> 00:02:23,110
for Things living on backing store, meaning a

45
00:02:23,110 --> 00:02:25,590
disc. It could be the swap space on

46
00:02:25,590 --> 00:02:28,890
the disc, or it could be specific files

47
00:02:28,890 --> 00:02:32,640
that are being memory mapped in order to access

48
00:02:32,640 --> 00:02:35,410
from a process address space. Those are the

49
00:02:35,410 --> 00:02:38,350
abstractions available in the virtual memory management system,

50
00:02:38,350 --> 00:02:42,360
now we'll see how these memory objects Are

51
00:02:42,360 --> 00:02:46,280
then paged in and brought into the physical memory.
