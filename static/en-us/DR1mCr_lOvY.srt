1
00:00:00,630 --> 00:00:03,210
So can say that from when computing the ILP.

2
00:00:03,210 --> 00:00:06,980
We completely ignore false dependencies among data dependencies. And

3
00:00:06,980 --> 00:00:13,050
only consider true or flaw or read after write data dependencies. So

4
00:00:13,050 --> 00:00:15,860
ILP really only looks at those data dependencies but

5
00:00:15,860 --> 00:00:19,490
there are two other types of dependencies in addition to data dependencies.

6
00:00:19,490 --> 00:00:22,740
There are structural dependencies and control dependencies.

7
00:00:22,740 --> 00:00:27,590
How do they affect ILP? And the answer is that first of all,

8
00:00:27,590 --> 00:00:31,590
when looking at ILP, there are no structural dependencies.

9
00:00:31,590 --> 00:00:36,760
Structural dependencies occur when we don't have enough hardware to do

10
00:00:36,760 --> 00:00:42,770
things in the same cycle. When computing the ILP, we're assuming ideal hardware,

11
00:00:42,770 --> 00:00:47,230
and as part of being ideal, it has no structural dependencies.

12
00:00:47,230 --> 00:00:51,460
Meaning, any instruction that could possibly execute in the same cycle,

13
00:00:51,460 --> 00:00:56,490
will execute in that cycle, and not have to wait. On some resource, like for

14
00:00:56,490 --> 00:01:00,760
example, there being only one adder, so we can do only one add in a cycle.

15
00:01:00,760 --> 00:01:03,220
We can assume that we have an infinite number of adders, so

16
00:01:03,220 --> 00:01:07,570
if we want to do an add, we do it. For control dependencies,

17
00:01:07,570 --> 00:01:11,620
we assume that we have perfect same-cycle branch prediction.

18
00:01:11,620 --> 00:01:16,640
Meaning that branches. Are predicted in the same cycle in which we fetch them.

19
00:01:16,640 --> 00:01:20,090
So we see all the correct instructions after the branch,

20
00:01:20,090 --> 00:01:25,120
in the same cycle in which we see a branch. Let's see an example of this where

21
00:01:25,120 --> 00:01:30,310
we have a program that has a flow dependence, and also an output dependence. And

22
00:01:30,310 --> 00:01:37,100
then we have a branch that has a flow dependence. On R1 and

23
00:01:37,100 --> 00:01:42,940
branches to label, if the condition is satisfied otherwise continues on.

24
00:01:42,940 --> 00:01:45,390
And after the branch in the program you have,

25
00:01:45,390 --> 00:01:49,970
an instruction, and at the label we have another instruction. So

26
00:01:49,970 --> 00:01:54,370
now let's see how we compute isle B here, and these are again cycles. So

27
00:01:54,370 --> 00:01:58,050
what happens is, in the first cycle we can definitely do this.

28
00:01:58,050 --> 00:02:02,180
We cannot do the MUL in the first cycle, because it, it depends on the add.

29
00:02:02,180 --> 00:02:06,280
So we will have to wait until the second cycle to do it. The branch can actually

30
00:02:06,280 --> 00:02:10,610
not be done until the third cycle, because that's where we compare this.

31
00:02:11,650 --> 00:02:17,450
Now let's say that this branch is actually taken. What we can assume is that.

32
00:02:17,450 --> 00:02:22,900
Although the branch cannot execute until the third cycle from the beginning.

33
00:02:22,900 --> 00:02:27,790
Since we started fetching the program, we know what the branch is going to do.

34
00:02:27,790 --> 00:02:31,970
So we know that the branch is going to go to the label. And thus this

35
00:02:31,970 --> 00:02:37,130
instruction, because it has no data dependencies on any other instruction, will

36
00:02:37,130 --> 00:02:41,440
actually execute in the first cycle. Although it has a control dependencies. So

37
00:02:41,440 --> 00:02:46,540
as you can see, not only are control dependencies not resulting in any delays

38
00:02:46,540 --> 00:02:52,540
after the branch happens. Actually, we are assuming perfect branch prediction,.

39
00:02:53,620 --> 00:02:57,900
And that means that this branch is predicted, even before it's executed, so

40
00:02:57,900 --> 00:03:01,540
that we can just do depend on the instructions. Pretty much,

41
00:03:01,540 --> 00:03:06,624
we can completely ignore Control Dependencies. The Branch acts as an instruction

42
00:03:06,624 --> 00:03:10,860
that simply produces no results. So it eventually has to execute but

43
00:03:10,860 --> 00:03:15,430
it has really no impact as far as the line Other Instructions is concerned. So

44
00:03:15,430 --> 00:03:19,770
in this case, not only does the multiply instruction execute.

45
00:03:19,770 --> 00:03:24,493
Even before the branch on which it has a controlled dependence executes.

46
00:03:24,493 --> 00:03:28,374
Also the instructions at this MUL will feed values to who can execute before

47
00:03:28,374 --> 00:03:33,640
the branch. So pretty much a branch itself might be delayed because

48
00:03:33,640 --> 00:03:38,310
of true dependence. But it's control dependencies on that branch have absolutely

49
00:03:38,310 --> 00:03:43,190
no impact on what the IP will be. Because we are assuming perfect branch

50
00:03:43,190 --> 00:03:47,550
prediction where all the branches in the program are perfectly predicted.

51
00:03:47,550 --> 00:03:51,650
In the same cycle. As soon as we begin fetching the program. And

52
00:03:51,650 --> 00:03:55,330
from the beginning of the program, we knew exactly which instructions will

53
00:03:55,330 --> 00:03:59,580
execute. So that we can just do them according to data dependencies
