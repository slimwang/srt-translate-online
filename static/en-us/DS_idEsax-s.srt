1
00:00:00,310 --> 00:00:05,370
So, the Spring Approach to building operating system is to build strong

2
00:00:05,370 --> 00:00:10,290
interfaces for each sub-system. What that means is, the only thing that is

3
00:00:10,290 --> 00:00:15,470
exposed outside a sub-system is what services are provided by

4
00:00:15,470 --> 00:00:20,260
the sub-system but not how. In other words, the how part of it can be changed at

5
00:00:20,260 --> 00:00:22,940
any time, so long as the external interface remains

6
00:00:22,940 --> 00:00:25,520
unchanged. So that is what is meant by strong

7
00:00:25,520 --> 00:00:30,110
interfaces, and this naturally leads to object orientation.

8
00:00:30,110 --> 00:00:32,330
And they also wanted to make sure that the

9
00:00:32,330 --> 00:00:35,570
system is open and flexible. And this is

10
00:00:35,570 --> 00:00:38,330
important if you're an operating system vendor and you

11
00:00:38,330 --> 00:00:40,610
want to integrate third party software into your

12
00:00:40,610 --> 00:00:43,700
operating system. You want to make sure that your

13
00:00:43,700 --> 00:00:47,150
interfaces are open and flexible and at the same

14
00:00:47,150 --> 00:00:50,870
time, you want to maintain the integrity of your

15
00:00:50,870 --> 00:00:53,930
subsystems, and that's why strong interfaces are extremely

16
00:00:53,930 --> 00:00:57,900
important. And being open and flexible also suggests

17
00:00:57,900 --> 00:01:00,190
that you don't want everything to be written

18
00:01:00,190 --> 00:01:02,460
in one language. You don't want to be tied

19
00:01:02,460 --> 00:01:05,300
to a particular language for implementing all the

20
00:01:05,300 --> 00:01:08,850
system components, and this is the reason that in

21
00:01:08,850 --> 00:01:12,720
Spring they chose to use IDL, which is

22
00:01:12,720 --> 00:01:15,940
the interface definition language, and this is from the

23
00:01:15,940 --> 00:01:19,122
OMG group. There are IDL compilers that

24
00:01:19,122 --> 00:01:22,772
are available from several third party software vendors,

25
00:01:22,772 --> 00:01:27,530
and what that allows you to do is, you can define your interfaces using IDL.

26
00:01:27,530 --> 00:01:30,522
And third party software vendors can use

27
00:01:30,522 --> 00:01:33,866
that IDL definition of the interfaces and use

28
00:01:33,866 --> 00:01:37,298
them in building their own subsystems that can

29
00:01:37,298 --> 00:01:41,005
integrate with the Spring system. And the other

30
00:01:41,005 --> 00:01:44,101
part of a Spring approach is extensibility

31
00:01:44,101 --> 00:01:48,917
and extensibility naturally leads to microkernel based approach

32
00:01:48,917 --> 00:01:51,810
and that's what you see here. This is

33
00:01:51,810 --> 00:01:55,680
the structure of the Spring system and what

34
00:01:55,680 --> 00:02:00,600
you see below this red line is Spring's idea of a microkernel and in fact there

35
00:02:00,600 --> 00:02:06,260
are two parts to it. There is a nucleus, which in Spring is the entity that

36
00:02:06,260 --> 00:02:10,080
provides the abstractions of threads and interprocess communication among

37
00:02:10,080 --> 00:02:12,250
the threads. And the kernel itself is made up

38
00:02:12,250 --> 00:02:15,680
of nucleus plus the virtual memory manager. So if

39
00:02:15,680 --> 00:02:18,100
you have put these two things together, the nucleus

40
00:02:18,100 --> 00:02:20,080
gives you threads and IPC and the VM manager

41
00:02:20,080 --> 00:02:23,410
gives you memory management. And if you remember back

42
00:02:23,410 --> 00:02:27,409
to our good old friend Liedtke's principle of what

43
00:02:27,409 --> 00:02:31,599
a microkernel should provide. You see that what is below

44
00:02:31,599 --> 00:02:34,641
this red line is exactly Liedtke's principle

45
00:02:34,641 --> 00:02:38,151
that is the microkernel is providing the abstraction

46
00:02:38,151 --> 00:02:40,491
of threads in IPC and an abstraction

47
00:02:40,491 --> 00:02:43,980
of memory. And everything else is outside the

48
00:02:43,980 --> 00:02:48,890
kernel. All the things that are above the red line are outside the kernel, and,

49
00:02:48,890 --> 00:02:52,875
in particular, I mention that Spring is Sun

50
00:02:52,875 --> 00:02:56,500
Microsystems' answer to building a network operating system.

51
00:02:56,500 --> 00:02:58,910
Because this is a time when transitioning was happening

52
00:02:58,910 --> 00:03:02,580
to services that are being provided on the network.

53
00:03:02,580 --> 00:03:05,780
And so, they wanted to go from an operating

54
00:03:05,780 --> 00:03:07,590
system that runs on a single node to a

55
00:03:07,590 --> 00:03:11,610
network operating system using the same interface. Namely the

56
00:03:11,610 --> 00:03:15,600
Unix interface, and so this entity that you see

57
00:03:15,600 --> 00:03:17,940
here, which is called the network proxy. We'll see

58
00:03:17,940 --> 00:03:22,170
that, more of it, in later discussion in this lesson.

59
00:03:22,170 --> 00:03:25,010
This is the entity that allows machines to be

60
00:03:25,010 --> 00:03:27,680
connected to one another. All the ovals that you're

61
00:03:27,680 --> 00:03:31,560
seeing that are outside the kernel provide different services

62
00:03:31,560 --> 00:03:34,770
that you might need in your desktop environment. For

63
00:03:34,770 --> 00:03:39,010
instance an X11 server is a display manager and

64
00:03:39,010 --> 00:03:42,740
you may need ability to do shell level programming,

65
00:03:42,740 --> 00:03:44,680
and you need file system, and you need a

66
00:03:44,680 --> 00:03:47,010
way by which you can communicate in the network,

67
00:03:47,010 --> 00:03:49,000
meaning that you need a protocol stack.
