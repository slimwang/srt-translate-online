1
00:00:00,036 --> 00:00:06,482
So the thing to understand about this first example is that the maximum slowdown is 32.

2
00:00:06,482 --> 00:00:10,448
There are only 32 threads in a warp, so no matter how many cases there are,

3
00:00:10,448 --> 00:00:14,354
no matter how many ways you can branch, you're not going to

4
00:00:14,354 --> 00:00:18,519
branch more than 32 ways in a single warp because there's only 32 threads in that warp.

5
00:00:18,519 --> 00:00:24,433
So again, the maximum here is going to be 32x slowdown for just this segment of code,

6
00:00:24,433 --> 00:00:27,831
right, for this switch statement in particular. What about this case?

7
00:00:27,831 --> 00:00:29,867
We're going to switch on the thread index of Y,

8
00:00:29,867 --> 00:00:35,517
so the thing you need to understand is that CUDA assigns thread ideas to warps in such as a way that the X ID varies fastest,

9
00:00:35,517 --> 00:00:42,114
the Y ID varies slower, the Z ID varies slowest, and this is much more clear if I use a concrete example.

10
00:00:42,114 --> 00:00:49,050
So in my quiz question I have a 64 by 16 thread block. So let's just draw that out.

11
00:00:49,050 --> 00:00:55,458
Here's a thread with X ID 0, X ID 1, X ID 2 and so forth, and these are the Y IDs.

12
00:00:55,458 --> 00:01:00,397
This first row has Y ID 1, the second row has Y ID 2, all the way down to Y ID 16,

13
00:01:00,397 --> 00:01:10,437
and when CUDA assigns these to warps, it will launch a warp with 32 threads comprising X IDs 0 through 31,

14
00:01:10,437 --> 00:01:18,085
then another warp, again with 32 threads containing thread IDs 32 through 63,

15
00:01:18,085 --> 00:01:25,439
and yet another warp with Y ID equal to 1 and X ID varying from 0 to 31, and so forth.

16
00:01:25,439 --> 00:01:27,554
So now we know the answer to our question.

17
00:01:27,554 --> 00:01:33,354
All of the threads in a given warp, in this case, belong to the same Y ID, they all have the same Y ID,

18
00:01:33,354 --> 00:01:38,500
and that means that we'll get no slowdown at all because all of the threads will be branching to the same place.

19
00:01:38,500 --> 00:01:42,805
What about this next case where we've got a smaller thread block that has 16 by 16 threads?

20
00:01:42,805 --> 00:01:49,019
So, in this case, we only have 16 X IDs that it can assign to a warp before

21
00:01:49,019 --> 00:01:52,783
it has to change to the next Y ID and start assigning the next set of X IDs,

22
00:01:52,783 --> 00:01:57,288
so all of these threads will be placed into a single warp.

23
00:01:57,288 --> 00:02:01,293
The first 16 in the first half of the warp, the next 16 in the next half of the warp,

24
00:02:01,293 --> 00:02:04,627
next all of these threads will be placed in a warp, and so on.

25
00:02:04,627 --> 00:02:10,601
And so now, as you can see, there are 2 different Y IDs for the threads in a single warp.

26
00:02:10,601 --> 00:02:16,772
We'll end up having to execute this code twice for this warp, once with 1 Y ID,

27
00:02:16,772 --> 00:02:20,777
once with a second Y ID, and we'll end up with a total of a 2x slowdown.
