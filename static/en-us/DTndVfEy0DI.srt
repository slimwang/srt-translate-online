1
00:00:00,560 --> 00:00:04,525
Now, before we get into some of the minute details of using our physics engine,

2
00:00:04,525 --> 00:00:08,429
let's take a minute, and go through our wish list of what we'd like our physics

3
00:00:08,429 --> 00:00:15,271
engine to do for us. And why it makes our lives a lot simpler. The first thing

4
00:00:15,271 --> 00:00:18,044
is, that we like to be able to create physics objects for each of our game

5
00:00:18,044 --> 00:00:22,796
entities that needs them. We'd also like to be able to update the physics

6
00:00:22,796 --> 00:00:26,444
engine each frame, or rather, we'd like to be able to allow the physics engine

7
00:00:26,444 --> 00:00:32,134
to update itself, and take care of most of the work for us. We'd also to be

8
00:00:32,134 --> 00:00:36,226
able to fire off collision events between different physics objects, and then

9
00:00:36,226 --> 00:00:41,410
respond to them arbitrarily. And finally, we'd really like to be able to pull

10
00:00:41,410 --> 00:00:46,700
updated position information for each of our game physics objects, each frame.

11
00:00:46,700 --> 00:00:50,220
That means effectively, that we can use the physics engines calculations to

12
00:00:50,220 --> 00:00:55,174
feed position information into our rendering engine for drawing next frame. So

13
00:00:55,174 --> 00:00:58,956
to accomplish all of this for grids, we decided to go with a physics engine

14
00:00:58,956 --> 00:01:00,806
called Box2D.
