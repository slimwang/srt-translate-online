1
00:00:00,130 --> 00:00:03,010
So we have been talking about
implementation of access control and

2
00:00:03,010 --> 00:00:06,560
the resources and request for
those resources and

3
00:00:06,560 --> 00:00:10,740
we said well in Linux based systems,
resources look like files.

4
00:00:10,740 --> 00:00:14,850
So let's actually see how the resources
are used and you know what

5
00:00:14,850 --> 00:00:19,330
kind of calls we make for accessing them
and what happens during those calls.

6
00:00:19,330 --> 00:00:22,840
So, first of all, of course,
resource has to be created.

7
00:00:22,840 --> 00:00:26,250
So the process that creates
this resource is the owner.

8
00:00:26,250 --> 00:00:29,810
That owner can have whatever set of
access rights they want to have.

9
00:00:29,810 --> 00:00:33,116
In a Unix-like system, you probably
know the number of ways in which you can

10
00:00:33,116 --> 00:00:35,150
create a file, for example.

11
00:00:35,150 --> 00:00:37,230
So once a file exists and

12
00:00:37,230 --> 00:00:39,955
we want to access it,
you do what is called open the file.

13
00:00:39,955 --> 00:00:42,690
S this is sort of like
prepping the file.

14
00:00:42,690 --> 00:00:45,220
If it doesn't exist,
then file gets created.

15
00:00:45,220 --> 00:00:49,020
When you do that,
file has a name and mode here says,

16
00:00:49,020 --> 00:00:53,070
do you want to read this file or
do you want to write it or execute it.

17
00:00:53,070 --> 00:00:54,200
What are you opening it for?

18
00:00:54,200 --> 00:00:55,722
How do you want to access it?

19
00:00:55,722 --> 00:00:59,350
Once that file exists,
the first thing we do is open it.

20
00:00:59,350 --> 00:01:03,330
When you open it the operating system
returns to you a descriptor which is

21
00:01:03,330 --> 00:01:08,360
a small number, and we'll see what
the use of that is, but as a result

22
00:01:08,360 --> 00:01:13,240
we'll see that to be able to access or
get the data that's in the file,

23
00:01:13,240 --> 00:01:16,110
write it into the file, we're
going to need the file's descriptor.

24
00:01:16,110 --> 00:01:19,870
So the descriptor comes when you
open the file, you prep it or

25
00:01:19,870 --> 00:01:21,260
get it ready for access.

26
00:01:21,260 --> 00:01:24,610
So a system call you make saying,
this is the file I want to access,

27
00:01:24,610 --> 00:01:25,940
this is how I access it.

28
00:01:25,940 --> 00:01:28,100
The operating system
prepares the file for

29
00:01:28,100 --> 00:01:32,470
accessing, returns you this file
descriptor that you then hold on to.

30
00:01:32,470 --> 00:01:35,190
So if you want to read this
file in the read call,

31
00:01:35,190 --> 00:01:37,110
this is another system
call that you have.

32
00:01:37,110 --> 00:01:38,640
You have to go to the system.

33
00:01:38,640 --> 00:01:41,420
You specify what file
using a descriptor.

34
00:01:41,420 --> 00:01:43,230
This is what was returned here.

35
00:01:43,230 --> 00:01:44,890
It's a small number.

36
00:01:44,890 --> 00:01:47,070
So this could be file for example.

37
00:01:47,070 --> 00:01:50,360
If you're reading you are to specify
where the read data should be put,

38
00:01:50,360 --> 00:01:51,950
how much data you are reading.

39
00:01:51,950 --> 00:01:54,590
That's the buffer, and the size.

40
00:01:54,590 --> 00:01:56,210
Data is going to come from the file.

41
00:01:56,210 --> 00:01:56,990
Where is this data?

42
00:01:56,990 --> 00:02:02,000
Well, the file we know, unless file
point or that points at the next

43
00:02:02,000 --> 00:02:05,040
place from where your data is going to
come and it is advance that you read.

44
00:02:05,040 --> 00:02:08,979
So whatever data follows the file,
current file pointer,

45
00:02:08,979 --> 00:02:12,120
we are going to pull that data,
lays that in the buffer and

46
00:02:12,120 --> 00:02:14,240
that's what the recall is going to do.

47
00:02:14,240 --> 00:02:17,620
Similarly there's a write call, except
that the data flows in the opposite

48
00:02:17,620 --> 00:02:20,820
direction, so the data is here then
it's going to go into the file.

49
00:02:20,820 --> 00:02:23,710
And how much data,
that's what we specify in this call.

50
00:02:23,710 --> 00:02:28,110
So an open is followed by one or
more read or writes.

51
00:02:28,110 --> 00:02:30,710
And when you're done you close the file.

52
00:02:30,710 --> 00:02:33,550
And once you close the file,
again the input

53
00:02:33,550 --> 00:02:36,800
here is the descriptor that says
what file that you had open before.

54
00:02:36,800 --> 00:02:40,160
Then this file we are basically telling
the system is that we're not going to

55
00:02:40,160 --> 00:02:42,220
need to access it anymore.

56
00:02:42,220 --> 00:02:46,680
So the system can,
if I'd set up some data structures,

57
00:02:46,680 --> 00:02:49,560
it can essentially free
those up at that point.

58
00:02:49,560 --> 00:02:51,020
A resource is a file.

59
00:02:51,020 --> 00:02:55,880
Users have UID, we also talked about
group ID, and to access a resource,

60
00:02:55,880 --> 00:02:59,940
this is what we basically have to go
through, file exists, they'll open it,

61
00:02:59,940 --> 00:03:03,100
then then they have to say read or
write it, and then you close it.

62
00:03:03,100 --> 00:03:05,260
If you forget to close it and
the process terminates,

63
00:03:05,260 --> 00:03:08,580
it's implicitly closed, but
this is how a file gets used.
