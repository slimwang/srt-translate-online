1
00:00:00,000 --> 00:00:06,000
The idea is to use this trace-it function to build your own interactive debugger.

2
00:00:06,000 --> 00:00:13,000
We're going to call this my spyder for my simple Python debugger

3
00:00:13,000 --> 00:00:18,000
with the idea of a spider being something that catches all the bugs.

4
00:00:18,000 --> 00:00:22,000
My spyder is a super simple debugger as it says in the name.

5
00:00:22,000 --> 00:00:27,000
My spyder is a command line debugger, so it prompts you to enter a command

6
00:00:27,000 --> 00:00:31,000
and the command can be something like break in line 70.

7
00:00:31,000 --> 00:00:36,000
Run the program and when it reaches line 70, it stops and as it has stopped,

8
00:00:36,000 --> 00:00:42,000
we can print individual variables--for instance, an x and x saying has a value of 42.

9
00:00:42,000 --> 00:00:48,000
How do we do that? We need the number of variables that controls how the debugger works.

10
00:00:48,000 --> 00:00:53,000
First, a variable name stepping which tells us whether we are

11
00:00:53,000 --> 00:00:58,000
stepping line by line through the program or whether we're just running the program.

12
00:00:58,000 --> 00:01:02,000
We also have a list of breakpoints, actually it's a mapping

13
00:01:02,000 --> 00:01:11,000
of individual line numbers to arbitrary values, but if this mapping say has an entry for the number 7,

14
00:01:11,000 --> 00:01:17,000
this means that whenever the debugger reaches line 7, then execution should stop.

15
00:01:17,000 --> 00:01:23,000
For our current setting, we'll make a lot simple. We'll have a number of predefined breakpoints.

16
00:01:23,000 --> 00:01:29,000
We will have for instance a breakpoint in line 9, and possibly another one in line 14.

17
00:01:29,000 --> 00:01:36,000
Our trace-it function is being called for every single line and of course we want our debugger to stop

18
00:01:36,000 --> 00:01:42,000
whenever either a breakpoint is reached or when we're stepping from one line to the next.

19
00:01:42,000 --> 00:01:46,000
We want to access these global variables, so we need to declare them accordingly.

20
00:01:46,000 --> 00:01:50,000
If the event is that we reached a new line, we check if we're stepping

21
00:01:50,000 --> 00:01:55,000
or if our breakpoints dictionary has a value for the current line

22
00:01:55,000 --> 00:01:59,000
and if this actually is the case, we print out a proper diagnostic information

23
00:01:59,000 --> 00:02:03,000
which may be helpful for the debugger--what has happened, where we currently are,

24
00:02:03,000 --> 00:02:05,000
the functions that executed as well as the local variables.
