1
00:00:00,270 --> 00:00:04,010
There are several syntactical tricks
available to make closure expressions

2
00:00:04,010 --> 00:00:05,670
super concise.

3
00:00:05,670 --> 00:00:09,640
In fact, this is one of the coolest
aspects of closure expressions in Swift

4
00:00:09,640 --> 00:00:12,700
and at times,
one of the most confounding.

5
00:00:12,700 --> 00:00:15,710
I want to walk you through some of these
tricks using the filter method from

6
00:00:15,710 --> 00:00:17,270
the array class.

7
00:00:17,270 --> 00:00:21,040
The filter method is called by
an instance of the array class.

8
00:00:21,040 --> 00:00:23,470
As an argument,
It takes in a condition and

9
00:00:23,470 --> 00:00:26,730
returns an array that's been
filtered based on that condition.

10
00:00:26,730 --> 00:00:29,220
The condition is passed in as a closure.

11
00:00:29,220 --> 00:00:31,610
Here i have an array of exam grades.

12
00:00:31,610 --> 00:00:34,710
I'm going to filter this array for
all the grades above 70.

13
00:00:34,710 --> 00:00:37,440
We'll call those grades, passing grades.

14
00:00:37,440 --> 00:00:40,960
So I call the filter method with
the object, exam grades and

15
00:00:40,960 --> 00:00:44,450
I pass in a closure representing
the filter condition.

16
00:00:44,450 --> 00:00:47,060
The closure takes in a grade and it and

17
00:00:47,060 --> 00:00:50,410
returns a bull representing
whether the condition is true.

18
00:00:50,410 --> 00:00:54,540
At this point, this looks a lot
like the syntax we saw for sorted.

19
00:00:54,540 --> 00:00:56,030
Here's the first trick.

20
00:00:56,030 --> 00:00:58,990
The compiler can infer
a closure expression types

21
00:00:58,990 --> 00:01:02,520
based on what parameter type
a given function expects.

22
00:01:02,520 --> 00:01:06,620
In this case, the compiler can infer
that the closure expression for filter

23
00:01:06,620 --> 00:01:10,260
will take in a parameter that matches
the type of the array being filtered.

24
00:01:10,260 --> 00:01:14,390
And the compiler can also infer that
this closure will return a bull.

25
00:01:14,390 --> 00:01:17,650
That means we can leave out
the words int and bull and

26
00:01:17,650 --> 00:01:19,240
still get the same result.

27
00:01:19,240 --> 00:01:22,280
Here in the sidebar you can see
what the result is if we filter for

28
00:01:22,280 --> 00:01:23,870
failing grades.

29
00:01:23,870 --> 00:01:25,650
On to the next trick.

30
00:01:25,650 --> 00:01:28,720
If a closure is a single
expression like this one.

31
00:01:28,720 --> 00:01:32,390
It can be inferred that the result of
that expression should be returned.

32
00:01:32,390 --> 00:01:36,390
So we can remove the word return,
again in the sidebar,

33
00:01:36,390 --> 00:01:38,900
you can see that our filter still works.

34
00:01:38,900 --> 00:01:43,190
And now for the trick that's been known
to make some code readers head spin.

35
00:01:43,190 --> 00:01:45,570
Shorthand argument names.

36
00:01:45,570 --> 00:01:49,270
Swift provides default argument
names for closure expressions.

37
00:01:49,270 --> 00:01:51,760
So instead of specifying
a first argument,

38
00:01:51,760 --> 00:01:53,766
the first argument is known as $0.

39
00:01:53,766 --> 00:01:58,680
The second argument is known as $1 and
so on.

40
00:01:58,680 --> 00:02:00,190
So here, for example,

41
00:02:00,190 --> 00:02:04,000
the compiler can infer that this closure
expression takes one argument and

42
00:02:04,000 --> 00:02:08,360
that its type, int, matches the type
of the elements in the array.

43
00:02:08,360 --> 00:02:10,710
So we don't have to give it a name,
grade.

44
00:02:10,710 --> 00:02:13,618
We just use the default name for
the first argument, $0.

45
00:02:13,618 --> 00:02:17,670
And since we're not giving
grade a name anymore

46
00:02:17,670 --> 00:02:20,900
we can omit the word grade
along with the word in.

47
00:02:22,000 --> 00:02:24,830
Let's see all those short
cuts again one more time.

48
00:02:24,830 --> 00:02:27,920
We'll go back to the alphabetical
soup example from your quiz.

49
00:02:27,920 --> 00:02:31,680
The closure expression parameter and
return types can be inferred.

50
00:02:31,680 --> 00:02:35,010
So we can take out String,
String and Bool.

51
00:02:36,810 --> 00:02:38,890
Since this is a single
expression closure.

52
00:02:38,890 --> 00:02:42,390
It can be inferred that it returns
the result of that single expression.

53
00:02:42,390 --> 00:02:44,150
So we can also leave out return.

54
00:02:45,380 --> 00:02:48,871
We can use the shorthand argument
names for soup one and soup two.

55
00:02:50,050 --> 00:02:53,900
And we're left with a statement
that truly is amazingly concise.
