1
00:00:00,000 --> 00:00:02,610
So now it's time for us to put all of our building blocks together

2
00:00:02,610 --> 00:00:05,790
and we're just this close to showing that

3
00:00:05,790 --> 00:00:08,820
SAT is indeed NP complete.

4
00:00:08,820 --> 00:00:11,180
So we started out with a problem in NP

5
00:00:11,180 --> 00:00:16,040
and input fallout problem; of course, this here can be any problem in NP

6
00:00:16,040 --> 00:00:18,780
and this here can be any input fallout problem

7
00:00:18,780 --> 00:00:19,640
and what do we then do?

8
00:00:19,640 --> 00:00:21,440
We said if the problem is in NP,

9
00:00:21,440 --> 00:00:24,110
then there must be some algorithm for that problem

10
00:00:24,110 --> 00:00:26,780
which runs in polynomial time on a non deterministic RAM,

11
00:00:26,780 --> 00:00:28,530
so an algorithm or a program

12
00:00:28,530 --> 00:00:30,530
you can call it any way you want,

13
00:00:30,530 --> 00:00:32,280
so that will run in polynomial time,

14
00:00:32,280 --> 00:00:34,790
and the algorithm at some lines of the code

15
00:00:34,790 --> 00:00:37,260
either says yes or says no,

16
00:00:37,260 --> 00:00:40,520
but it's running in polynomial time in any case,

17
00:00:40,520 --> 00:00:42,200
and of course the input for the problem,

18
00:00:42,200 --> 00:00:44,320
well that is basically just the number of variables

19
00:00:44,320 --> 00:00:47,160
in the memory of the machine as it starts out.

20
00:00:47,160 --> 00:00:50,190
Then we took all this and of course it's a huge Boolean formula

21
00:00:50,190 --> 00:00:53,120
and you would probably never really want to write it out explicitly,

22
00:00:53,120 --> 00:00:57,280
but it exists and it contains a number of components that we have discussed.

23
00:00:57,280 --> 00:01:00,620
So one part of the Boolean formula encodes snapshots

24
00:01:00,620 --> 00:01:03,340
of the algorithm as it runs on the machine.

25
00:01:03,340 --> 00:01:06,180
Then we said we have to have 1 part that ensures that

26
00:01:06,180 --> 00:01:09,930
the first snapshot properly represents the starting conditions

27
00:01:09,930 --> 00:01:13,090
so that it properly the algorithm starting at line one

28
00:01:13,090 --> 00:01:16,110
and also the memory representing the input for the problem.

29
00:01:16,110 --> 00:01:18,150
Then what we just discussed is that

30
00:01:18,150 --> 00:01:21,330
through a number of rules that look like if-then,

31
00:01:21,330 --> 00:01:25,070
you can ensure that the snapshot is at a certain point in time t

32
00:01:25,070 --> 00:01:28,290
and at the following time point fit together,

33
00:01:28,290 --> 00:01:30,330
and then finally,

34
00:01:30,330 --> 00:01:32,440
since this here is a decision problem,

35
00:01:32,440 --> 00:01:34,960
we want to ensure that the Boolean formula

36
00:01:34,960 --> 00:01:36,960
can only be satisfied

37
00:01:36,960 --> 00:01:38,650
if at certain point in time

38
00:01:38,650 --> 00:01:40,660
the algorithm returns yes,

39
00:01:40,660 --> 00:01:43,980
so this is the last part we have to add to the Boolean formula,

40
00:01:43,980 --> 00:01:45,690
and this is actually quite easy to ensure,

41
00:01:45,690 --> 00:01:48,540
because once the algorithm reaches this line of the code,

42
00:01:48,540 --> 00:01:51,440
wherever it may be, and you can even have multiple lines

43
00:01:51,440 --> 00:01:53,020
where the algorithm returns yes,

44
00:01:53,020 --> 00:01:55,340
but once such line has been reached,

45
00:01:55,340 --> 00:01:57,420
the algorithm returns yes and stops,

46
00:01:57,420 --> 00:02:00,260
so this her is very easy to ensure.

47
00:02:00,260 --> 00:02:02,900
You just have to make sure that there's one snapshot

48
00:02:02,900 --> 00:02:06,120
where the algorithm is in a line that returns a yes.

49
00:02:06,120 --> 00:02:08,449
So once we have constructed this Boolean formula,

50
00:02:08,449 --> 00:02:11,650
what happens if we solve SAT for this formula?

51
00:02:11,650 --> 00:02:13,450
Then there's 2 cases that can happen,

52
00:02:13,450 --> 00:02:15,120
because SAT is also a decision problem,

53
00:02:15,120 --> 00:02:18,400
so either SAT returns yes

54
00:02:18,400 --> 00:02:20,170
or it returns no.

55
00:02:20,170 --> 00:02:22,240
What if it returns yes?

56
00:02:22,240 --> 00:02:26,020
If it returns yes, that means that there is a satisfying assignment

57
00:02:26,020 --> 00:02:29,090
for this Boolean formula, and a satisfying assignment

58
00:02:29,090 --> 00:02:30,350
will have the following property.

59
00:02:30,350 --> 00:02:33,610
First of all, it will encode valid snapshots

60
00:02:33,610 --> 00:02:35,240
of where the algorithm is

61
00:02:35,240 --> 00:02:36,810
and whats in the memory.

62
00:02:36,810 --> 00:02:39,920
Secondly, it will also ensure that the machine starts out

63
00:02:39,920 --> 00:02:41,040
in the right place,

64
00:02:41,040 --> 00:02:43,090
meaning it starts out at line 1 of the code

65
00:02:43,090 --> 00:02:45,530
and representing the input for the problem,

66
00:02:45,530 --> 00:02:47,740
it will ensure that all the snapshots

67
00:02:47,740 --> 00:02:49,820
that it has figured out will fit together

68
00:02:49,820 --> 00:02:52,070
and it can only return yes

69
00:02:52,070 --> 00:02:55,130
if the algorithm returns yes at some point in time.

70
00:02:55,130 --> 00:02:57,060
So if we have a yes here,

71
00:02:57,060 --> 00:03:00,740
we also know that this problem or the decision problem here

72
00:03:00,740 --> 00:03:04,380
is one where a non deterministic RAM would also answer yes.

73
00:03:04,380 --> 00:03:06,230
If it says no, on the other hand,

74
00:03:06,230 --> 00:03:08,080
what does that mean?

75
00:03:08,080 --> 00:03:12,340
Well, we know that we always can encode the snapshots,

76
00:03:12,340 --> 00:03:16,060
so it's not going to say no, because it can not encode a snapshot,

77
00:03:16,060 --> 00:03:18,240
because that's possible always.

78
00:03:18,240 --> 00:03:21,670
It also won't say no due to this property here,

79
00:03:21,670 --> 00:03:24,590
because well, we have ensured

80
00:03:24,590 --> 00:03:26,210
that the snapshot can properly encoded,

81
00:03:26,210 --> 00:03:30,060
so there's no mistake in the formula here, so it can not say no because of this here.

82
00:03:30,060 --> 00:03:32,240
It also can not say no because of this here,

83
00:03:32,240 --> 00:03:34,280
because the machine will always run

84
00:03:34,280 --> 00:03:36,090
and you can make the snapshots fit together.

85
00:03:36,090 --> 00:03:40,560
The only reason why there can be no satisfying assignment

86
00:03:40,560 --> 00:03:45,100
is if the algorithm does not return yes at a certain point in time

87
00:03:45,100 --> 00:03:49,370
and since this algorithm solve this problem here,

88
00:03:49,370 --> 00:03:51,220
if it can not reach yes,

89
00:03:51,220 --> 00:03:53,770
then this means that this decision problem here

90
00:03:53,770 --> 00:03:55,730
is also a no.

91
00:03:55,730 --> 00:03:57,910
So satisfiability

92
00:03:57,910 --> 00:04:00,600
only if this problem given this input here

93
00:04:00,600 --> 00:04:02,540
is a yes.

94
00:04:02,540 --> 00:04:04,470
So now that we have put it together,

95
00:04:04,470 --> 00:04:08,030
here's our final quiz for proving that SAT is NP complete,

96
00:04:08,030 --> 00:04:11,000
and what I would like you to do is to recap

97
00:04:11,000 --> 00:04:13,550
the properties of this Boolean formula here.

98
00:04:13,550 --> 00:04:15,680
First of all, what is the size of this Boolean formula

99
00:04:15,680 --> 00:04:18,660
for an input of size n

100
00:04:18,660 --> 00:04:20,820
and remember this algorithm here

101
00:04:20,820 --> 00:04:22,420
runs in polynomial time.

102
00:04:22,420 --> 00:04:25,830
So is this Boolean formula up here

103
00:04:25,830 --> 00:04:27,160
constant in size,

104
00:04:27,160 --> 00:04:30,230
polynomial in size, or exponential in size

105
00:04:30,230 --> 00:04:32,330
with respect to n?

106
00:04:32,330 --> 00:04:35,460
and then can this Boolean formula encode

107
00:04:35,460 --> 00:04:39,220
any algorithm at least for a problem that is an NP?

108
00:04:39,220 --> 00:04:43,440
Can it encode any input of size n that were given to that problem?

109
00:04:43,440 --> 00:04:46,440
Finally is this Boolean formula satisfiable if

110
00:04:46,440 --> 00:04:49,470
the input here is a yes

111
00:04:49,470 --> 00:04:51,480
to not decision problem here

112
00:04:51,480 --> 00:04:53,310
or are there any other cases where

113
00:04:53,310 --> 00:04:55,190
we could also have satisfiabilty.

114
00:04:55,190 --> 99:59:59,999
So please check all of these that are true.
