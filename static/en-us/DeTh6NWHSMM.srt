1
00:00:00,590 --> 00:00:04,188
Well, they're actually both right, let's see why. Let's look at the blue code

2
00:00:04,188 --> 00:00:10,940
first. When we start, the value is 100. We go to the loop, value is greater or

3
00:00:10,940 --> 00:00:17,600
equal than 100. In fact, we've set it, to make sure we enter the loop. We ask

4
00:00:17,600 --> 00:00:23,534
the user to enter a value. Let's say the user is uncooperative and enters 200,

5
00:00:23,534 --> 00:00:28,620
then we go back up. Now, the value is still greater or equal than 100. And we

6
00:00:28,620 --> 00:00:31,544
go back in the loop. That was the whole purpose really, of this while loop. We

7
00:00:31,544 --> 00:00:35,574
wanted to keep asking the user while the value is greater equal than 100, since

8
00:00:35,574 --> 00:00:40,798
our target is to get a value less than 100. Remember, the while condition is

9
00:00:40,798 --> 00:00:45,740
always the opposite of the target. So now, let's say the user is doing better,

10
00:00:45,740 --> 00:00:51,081
enters 99. I'll go back to the top of the loop. 99 is less than 100. And we

11
00:00:51,081 --> 00:00:56,664
follow through, so it worked. So this one was a good solution. Now, let's look

12
00:00:56,664 --> 00:01:01,205
at the black solution. This one is a little different, we ask the user to enter

13
00:01:01,205 --> 00:01:08,244
a value less than 100 and let's say they do, then now comes the loop. This loop

14
00:01:08,244 --> 00:01:13,450
is never entered. And in this case we get the right behavior. So, let's look at

15
00:01:13,450 --> 00:01:19,993
another situation where the user doesn't makes a mistake first. So, we're again

16
00:01:19,993 --> 00:01:24,987
at the top. We ask the user to enter a value less than 100. The user enters

17
00:01:24,987 --> 00:01:29,158
200. Now, that's greater or equal with N100, So now, we get into the loop and

18
00:01:29,158 --> 00:01:33,765
we ask the user again and say no if they give the right answer. Then we go back

19
00:01:33,765 --> 00:01:37,446
to the top and now we're satisfied, so this also works. But both of the

20
00:01:37,446 --> 00:01:42,200
solutions are a little unsatisfactory. Look at the first one here. We have this

21
00:01:42,200 --> 00:01:45,720
trick where we're setting the value to an artificial value not to a user input

22
00:01:45,720 --> 00:01:51,572
so that we enter the loop the first time, it's a bit ugly. The second one we

23
00:01:51,572 --> 00:01:56,182
repeat part of the code. Look at this statement here and the statements here,

24
00:01:56,182 --> 00:01:59,350
they're exactly the same statements and we need to repeat them because we first

25
00:01:59,350 --> 00:02:04,564
need to get the user input before we can see whether it's any good. And then,

26
00:02:04,564 --> 00:02:08,863
we need to keep bugging the user until it's any good. That repetition is also,

27
00:02:08,863 --> 00:02:13,084
somewhat undesirable. There is a Java statement that can take care of this

28
00:02:13,084 --> 00:02:14,159
issue.
