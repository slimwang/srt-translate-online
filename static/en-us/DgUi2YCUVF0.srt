1
00:00:00,180 --> 00:00:03,740
The view is a bit more complicated than the model in this application.

2
00:00:03,740 --> 00:00:07,000
It's an object, as you can see by this open bracket right here,

3
00:00:07,000 --> 00:00:11,350
and it has two methods, init and render.

4
00:00:11,350 --> 00:00:16,340
We call init to get things set up, and we call render to update our view.

5
00:00:16,340 --> 00:00:21,550
Now, the HTML is also part of the view, so I've opened up index.html.

6
00:00:21,550 --> 00:00:26,090
You can see we have a button here and an unordered list for all of our pizzas.

7
00:00:26,090 --> 00:00:31,270
There's also this script template down here, which is just a fancy word for some

8
00:00:31,270 --> 00:00:34,765
HTML that we're going to use again and again when we make the pizza objects.

9
00:00:34,765 --> 00:00:36,991
Let's hop back into our app.js.

10
00:00:36,991 --> 00:00:40,103
First, let's go over our init function here.

11
00:00:40,103 --> 00:00:43,911
Now, for the moment, I'll ask you not to get too mired in the details.

12
00:00:43,911 --> 00:00:47,973
We're really looking at the overarching organization of the application, okay?

13
00:00:47,973 --> 00:00:52,010
So, simplified and glossing over details, we're doing the following.

14
00:00:52,010 --> 00:00:54,050
First, we're adding an event listener for

15
00:00:54,050 --> 00:00:56,670
the button which runs the addPizza function.

16
00:00:56,670 --> 00:00:58,760
Then we're grabbing some things from the DOM and

17
00:00:58,760 --> 00:01:02,680
we're storing them to variables, so that way, we can use them in our next step.

18
00:01:02,680 --> 00:01:06,530
Then we're adding a click listener for the pizza list.

19
00:01:06,530 --> 00:01:09,140
And if we're clicking on a remove pizza button,

20
00:01:09,140 --> 00:01:12,490
we're running the function that figures out what we've clicked on, and

21
00:01:12,490 --> 00:01:15,660
then ultimately calls the removePizza function.

22
00:01:15,660 --> 00:01:18,440
And lastly, we're telling the view to render itself.

23
00:01:18,440 --> 00:01:22,890
So, speaking of rendering itself, what does that render function actually do?

24
00:01:22,890 --> 00:01:26,435
In a nutshell, it clears the pizza list entirely and

25
00:01:26,435 --> 00:01:28,500
re-renders all the visible pizzas.

26
00:01:28,500 --> 00:01:31,710
Not very smart or optimized, but it works just fine.

27
00:01:31,710 --> 00:01:35,830
So, clearing the pizza list, and here,

28
00:01:35,830 --> 00:01:40,200
getting the visible pizzas from our octopus, which we'll talk about later.

29
00:01:40,200 --> 00:01:45,150
And for each one of those pizzas, doing the following, filling in the template

30
00:01:45,150 --> 00:01:49,840
HTML with the pizza ID and then adding it to the pizza list in the DOM.

31
00:01:49,840 --> 00:01:52,890
So, this view here is not particularly smart.

32
00:01:52,890 --> 00:01:56,810
But it is separated out, and that's what's most important.

33
00:01:56,810 --> 00:01:59,190
All of our view logic is in one place,

34
00:01:59,190 --> 00:02:02,330
rather than scattered throughout our entire application.

35
00:02:02,330 --> 00:02:04,610
We'll see the ramifications of this in the next node.
