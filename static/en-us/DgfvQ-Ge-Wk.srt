1
00:00:00,590 --> 00:00:02,690
Search is a big part of Android TV.

2
00:00:02,690 --> 00:00:05,882
Let's see it in action, cat videos.

3
00:00:09,016 --> 00:00:10,010
Neat right.

4
00:00:10,010 --> 00:00:12,310
You can use search to expose
content from your app so

5
00:00:12,310 --> 00:00:14,110
users can get to it straight
from the home screen.

6
00:00:15,770 --> 00:00:17,400
Here's how search works.

7
00:00:17,400 --> 00:00:19,560
Android TV shows search
results from Google,

8
00:00:19,560 --> 00:00:22,890
as well as locally
installed searchable apps.

9
00:00:22,890 --> 00:00:24,010
To make our apps searchable,

10
00:00:24,010 --> 00:00:27,760
we implement a content provider to
provide search results for a query.

11
00:00:27,760 --> 00:00:31,600
Android TV combines these results
into a search results page.

12
00:00:31,600 --> 00:00:34,560
Users now have one click access
to launch content you return,

13
00:00:34,560 --> 00:00:36,490
using a pending intent you provide.

14
00:00:36,490 --> 00:00:37,080
For this to work,

15
00:00:37,080 --> 00:00:41,600
we'll have to map our data into a cursor
format that's expected by the system.

16
00:00:41,600 --> 00:00:44,210
If you've previously worked with
search on Android, for example,

17
00:00:44,210 --> 00:00:47,650
on a mobile device, then you should know
that Android TV uses exactly the same

18
00:00:47,650 --> 00:00:50,950
search interface that you might have
already built for another form factor.

19
00:00:50,950 --> 00:00:53,140
In this section I'll describe
the key steps involved, and

20
00:00:53,140 --> 00:00:55,790
you can check out the instructor
notes for more detail.

21
00:00:55,790 --> 00:00:58,310
Before we go any further,
we should talk about privacy.

22
00:00:58,310 --> 00:01:02,510
Protecting user privacy is key, and many
users consider their activities on TV,

23
00:01:02,510 --> 00:01:05,220
including searches,
to be private information.

24
00:01:05,220 --> 00:01:08,980
Here are two tips, never send personal
information over the network.

25
00:01:08,980 --> 00:01:11,770
For example, if a user is searching for
a pizza restaurant near them,

26
00:01:11,770 --> 00:01:15,570
you don't need to send their user ID to
the server, along with their zip code.

27
00:01:15,570 --> 00:01:17,670
Now in the rare case that you
have to send personal info,

28
00:01:17,670 --> 00:01:19,380
you should never log it.

29
00:01:19,380 --> 00:01:22,290
And if for some reason you do have to
log it, then you should protect that

30
00:01:22,290 --> 00:01:25,550
data extremely carefully and
erase it as soon as possible.

31
00:01:25,550 --> 00:01:29,190
Also be sure to provide users with an
easy way to clear their search history.

32
00:01:29,190 --> 00:01:33,010
The first step is to define an activity
to respond to the search request.

33
00:01:33,010 --> 00:01:34,780
Here we are inside of our manifest.

34
00:01:34,780 --> 00:01:37,380
The first step will be to define
an activity that will be launched

35
00:01:37,380 --> 00:01:40,750
when the user selects one of our
results from the TV home screen.

36
00:01:40,750 --> 00:01:43,835
We declare this activity to accept
the action.SEARCH intent using this

37
00:01:43,835 --> 00:01:44,335
intent-filter.

38
00:01:45,670 --> 00:01:48,530
We also have to specify
the search configuration to use

39
00:01:48,530 --> 00:01:50,740
using this meta data element and
this XML.

40
00:01:51,800 --> 00:01:54,420
You can find this data inside
of searchable.xml, and

41
00:01:54,420 --> 00:01:57,180
see the instructor notes for
a description of the fields.

42
00:01:57,180 --> 00:01:59,108
Now, when our
MovieDetailsActivity is launched,

43
00:01:59,108 --> 00:02:02,325
we need to resolve the search data and
display the corresponding movie.

44
00:02:02,325 --> 00:02:05,105
You can see how we do that inside
the checkGlobalSearchIntent method.

45
00:02:06,275 --> 00:02:09,413
Here we check to see if the intent
action corresponds to global search, and

46
00:02:09,413 --> 00:02:11,835
if so, we pull the selected
movie id out of the intent.

47
00:02:13,105 --> 00:02:15,985
Next we need to define a content
provider which returns search results

48
00:02:15,985 --> 00:02:18,205
to the Android TV search dialogue.

49
00:02:18,205 --> 00:02:20,135
We only need to implement a part of it,
and

50
00:02:20,135 --> 00:02:23,630
the necessary columns
are already defined by the SDK.

51
00:02:23,630 --> 00:02:26,320
And, you can find a step by step
guide for building a ContentProvider

52
00:02:26,320 --> 00:02:29,590
in the instructor notes or
the Android Fundamentals course.

53
00:02:29,590 --> 00:02:32,270
First, let's define
a ContentProvider in the manifest.

54
00:02:32,270 --> 00:02:34,780
Here we'll use the VideoContentProvider.

55
00:02:34,780 --> 00:02:36,880
Also make sure that
exported is set to true so

56
00:02:36,880 --> 00:02:39,690
Android TV global search
can use the results.

57
00:02:39,690 --> 00:02:40,930
You should see
the instructor results for

58
00:02:40,930 --> 00:02:42,686
more info about securing
your ContentProvider.

59
00:02:44,070 --> 00:02:46,170
Here we are inside our
VideoContentProvider, and

60
00:02:46,170 --> 00:02:48,660
the first step is to
implement the query method.

61
00:02:48,660 --> 00:02:51,210
Now, usually this takes five arguments.

62
00:02:51,210 --> 00:02:53,600
Our provider though, only needs
to provide search results, and

63
00:02:53,600 --> 00:02:55,509
the only argument we need
to handle is selectionArgs.

64
00:02:56,800 --> 00:02:59,350
This contains the search
terms from the user.

65
00:02:59,350 --> 00:03:02,460
Because of the way we configured out
searchable.xml, it will only contain

66
00:03:02,460 --> 00:03:04,810
a single element which represents
the entire search string.

67
00:03:06,020 --> 00:03:08,650
The last thing we need to do to finish
our search provider, is to pack

68
00:03:08,650 --> 00:03:11,750
the search results into the cursor
format that's expected by Android TV.

69
00:03:12,970 --> 00:03:16,820
The data fields expected are represented
as columns of a SQL like database.

70
00:03:16,820 --> 00:03:18,890
And regardless of your
data's original format,

71
00:03:18,890 --> 00:03:21,690
you must map your data
fields to these columns.

72
00:03:21,690 --> 00:03:24,010
You can find a description of all
of these in the instructor notes.

73
00:03:25,070 --> 00:03:29,060
To polish your search results,
you can also add a Watch Action Link.

74
00:03:29,060 --> 00:03:32,020
As you can see here, this search
result actually came from Google.

75
00:03:32,020 --> 00:03:34,450
But when a use clicks this button,
it will launch your app.

76
00:03:35,530 --> 00:03:36,620
In order for this to work,

77
00:03:36,620 --> 00:03:40,100
these three field return by your search
data much match those from Google.

78
00:03:41,210 --> 00:03:44,370
When these three fields match,
Android TV will automatically attach

79
00:03:44,370 --> 00:03:46,980
the Watch Action Link to
the search result card.

80
00:03:46,980 --> 00:03:47,910
So it's in your favor to

81
00:03:47,910 --> 00:03:49,890
provide accurate metadata
with your search results.

82
00:03:51,000 --> 00:03:53,050
There's one last thing you can
do to polish your app, and

83
00:03:53,050 --> 00:03:54,890
here's in app search.

84
00:03:54,890 --> 00:03:57,230
Notice that here we've added the search
button to the browse fragment.

85
00:03:58,290 --> 00:04:01,560
At this point we've already got our
ContentProvider working, and all we

86
00:04:01,560 --> 00:04:05,210
have to do is add a fragment provided
by the Leanback Support Library.

87
00:04:05,210 --> 00:04:07,110
That fragment is the search fragment,
and

88
00:04:07,110 --> 00:04:09,980
you can see details on how to
use it in the instructor notes.

89
00:04:09,980 --> 00:04:12,700
The pattern is exactly the same as
we've seen previously in this course.
