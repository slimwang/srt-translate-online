1
00:00:01,060 --> 00:00:03,750
Now I want to take some time to
show you how to use variables and

2
00:00:03,750 --> 00:00:05,520
constants in a playground.

3
00:00:05,520 --> 00:00:08,570
I've gone ahead and
opened this empty playground, and

4
00:00:08,570 --> 00:00:10,695
we'll get started by
declaring some variables.

5
00:00:10,695 --> 00:00:15,310
We know to create a variable that we
need to use something like the following

6
00:00:15,310 --> 00:00:18,845
syntax; we have the keyword var,
then some name for

7
00:00:18,845 --> 00:00:20,555
the variable and its value.

8
00:00:21,595 --> 00:00:22,145
For example,

9
00:00:22,145 --> 00:00:26,355
I'll create this variable called
myJerseyNumber with a value of five.

10
00:00:26,355 --> 00:00:31,280
This creates, or declares a variable
with the name myJerseyNumber and

11
00:00:31,280 --> 00:00:35,150
when we write this code Swift works
behind the scenes in a furze that my

12
00:00:35,150 --> 00:00:39,990
jersey numbers type is an integer,
because five is an integer.

13
00:00:39,990 --> 00:00:45,410
And we can check this if we
hold down the option key and

14
00:00:45,410 --> 00:00:48,460
go up to the variable name and
we click it.

15
00:00:48,460 --> 00:00:50,670
We can see that it's been
declared as an INT value.

16
00:00:51,970 --> 00:00:55,770
When Swift automatically infers
the type of the variable,

17
00:00:55,770 --> 00:00:59,650
in this case the INT,
we call this inferred typing.

18
00:00:59,650 --> 00:01:00,700
So let's do another example.

19
00:01:01,860 --> 00:01:04,510
So we will create this variable
called myCoolVariable and

20
00:01:04,510 --> 00:01:07,860
give it a value of a and double quotes.

21
00:01:07,860 --> 00:01:10,790
So if you've created a variable like
this before where you use the double

22
00:01:10,790 --> 00:01:16,390
quotes, you may already know what Swift
may infer this to be, but we can check.

23
00:01:16,390 --> 00:01:20,170
And it looks like Swift has
interpreted this as a string variable.

24
00:01:20,170 --> 00:01:22,820
So myCoolVariable contains a string and
that makes sense,

25
00:01:22,820 --> 00:01:26,370
that's what this double quotes mean,
that means a string.

26
00:01:26,370 --> 00:01:28,760
But this string is just one character,.

27
00:01:28,760 --> 00:01:32,170
What if we wanted the variable to be
of character type because it represents

28
00:01:32,170 --> 00:01:33,410
a single character,

29
00:01:33,410 --> 00:01:37,060
instead of a string type which can
represent multiple characters?

30
00:01:37,060 --> 00:01:39,080
Is there a way that we
can help Swift do this?

31
00:01:40,110 --> 00:01:41,848
Actually there is, and here's how.

32
00:01:41,848 --> 00:01:44,660
We'll modify our
variable declaration and

33
00:01:44,660 --> 00:01:48,180
add a colon after the name and
then specify the type that we want.

34
00:01:49,260 --> 00:01:52,710
So this is a slightly different
syntax than we saw before, but

35
00:01:52,710 --> 00:01:53,930
it removes the need for

36
00:01:53,930 --> 00:01:57,810
Swift to guess the variables type
because we're explicitly stating it.

37
00:01:57,810 --> 00:01:59,930
In this case we want
to be a character and

38
00:01:59,930 --> 00:02:06,040
when we take the guesswork out of typing
for Swift, we call this explicit typing.

39
00:02:06,040 --> 00:02:10,030
And if I use the option click, we can
see that this is now a character and

40
00:02:10,030 --> 00:02:10,840
no longer a string.

41
00:02:12,670 --> 00:02:16,340
In general, Swift does a great job at
inferring the types of our variables so

42
00:02:16,340 --> 00:02:19,480
explicit typing is
usually not necessary.

43
00:02:19,480 --> 00:02:23,070
However, in some cases, like this one,
you want to use explicit typing so

44
00:02:23,070 --> 00:02:26,610
that the compiler knows exactly what
type you intend for the variable.
