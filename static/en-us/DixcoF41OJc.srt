1
00:00:02,050 --> 00:00:06,000
And the answer is no, there is no
solution that the agent can come up with

2
00:00:06,000 --> 00:00:08,860
because Bucharest doesn't
appear on the map and so

3
00:00:08,860 --> 00:00:12,400
the agent doesn't know any
actions that can arrive there.

4
00:00:12,400 --> 00:00:14,360
So let's give the agent a better chance.

5
00:00:19,080 --> 00:00:22,740
Now we've given the agent
the full map of Romania.

6
00:00:22,740 --> 00:00:27,650
The start is in Arad and
the destination, or

7
00:00:27,650 --> 00:00:32,619
goal, is in Bucharest and
the agent is given the problem

8
00:00:32,619 --> 00:00:37,520
of coming up with a sequence of actions
that will arrive at the destination.

9
00:00:37,520 --> 00:00:39,790
Now is it possible for
the agent to solve this problem?

10
00:00:43,560 --> 00:00:44,590
And the answer is yes.

11
00:00:44,590 --> 00:00:47,170
There are many routes or steps or

12
00:00:47,170 --> 00:00:50,720
sequences of actions that will
arrive at the destination.

13
00:00:50,720 --> 00:00:51,610
Here's one of them.

14
00:00:53,260 --> 00:00:58,530
Starting out in Arad taking
this step first, then this one.

15
00:00:59,750 --> 00:01:03,170
And then this one, then this one,
and then this one,

16
00:01:03,170 --> 00:01:04,830
to arrive at the destination.

17
00:01:04,830 --> 00:01:07,960
So that would count as
a solution to the problem.

18
00:01:07,960 --> 00:01:09,180
So, sequence of actions,

19
00:01:09,180 --> 00:01:11,890
chained together, that are guaranteed
to get us to the goal.

20
00:01:14,660 --> 00:01:17,584
Now, let's formally define
what a problem looks like.

21
00:01:17,584 --> 00:01:21,243
A problem can be broken down
into a number of components.

22
00:01:21,243 --> 00:01:25,670
First, the initial state that
the agent starts out with.

23
00:01:25,670 --> 00:01:27,560
In our route finding problem,

24
00:01:27,560 --> 00:01:31,465
the initial state was the agent
being in the city of Arad.

25
00:01:32,740 --> 00:01:38,810
Next a function actions that
takes a status input and

26
00:01:38,810 --> 00:01:42,220
returns a set of

27
00:01:42,220 --> 00:01:47,040
possible actions that the agent can
execute when the agent is in the state.

28
00:01:50,088 --> 00:01:51,024
In some problems,

29
00:01:51,024 --> 00:01:54,073
the agent will have the same
actions available in all states.

30
00:01:54,073 --> 00:01:57,448
And in other problems they'll have
different actions dependent on

31
00:01:57,448 --> 00:01:58,047
the state.

32
00:01:58,047 --> 00:02:02,200
In the route finding problem,
the actions are dependent on the state.

33
00:02:02,200 --> 00:02:06,200
When we're in one city we can take the
routes to the neighboring cities, but

34
00:02:06,200 --> 00:02:07,840
we can't go to any other cities.

35
00:02:09,220 --> 00:02:10,701
Next, we have.

36
00:02:12,723 --> 00:02:17,700
A function called result
which takes as input a state.

37
00:02:18,740 --> 00:02:23,580
And an action and
delivers as its output, a new state.

38
00:02:24,760 --> 00:02:30,804
So for example,
if the agent is in the city of Arad,

39
00:02:30,804 --> 00:02:37,300
and, that would be the state, and
takes the action of driving along

40
00:02:37,300 --> 00:02:43,490
route E671 towards Timisoara, then the
result of applying that action in that

41
00:02:43,490 --> 00:02:48,855
state would be the new state where
the agent is in the city of Timisoara.

42
00:02:51,320 --> 00:02:54,340
Next, we need a function.

43
00:02:57,167 --> 00:02:59,889
Called GoalTest which takes a state.

44
00:03:01,950 --> 00:03:06,350
And returns a boolean value true or
false,

45
00:03:06,350 --> 00:03:09,310
telling us if this data is a goal or
not.

46
00:03:09,310 --> 00:03:10,980
In a route finding problem,

47
00:03:10,980 --> 00:03:15,810
the only goal would be being in the
destination city, the city of Bucharest,

48
00:03:15,810 --> 00:03:18,650
and all the other states would
return false for the goal test.

49
00:03:20,012 --> 00:03:25,180
And finally, one more thing,
which is a path

50
00:03:25,180 --> 00:03:31,220
cost function which takes a path,

51
00:03:31,220 --> 00:03:36,660
a sequence of state action transitions

52
00:03:40,460 --> 00:03:43,040
and returns a number which
is the cost of that path.

53
00:03:44,360 --> 00:03:48,970
Now for most of the problems we'll deal
with we'll make the path cost function

54
00:03:48,970 --> 00:03:56,670
be additive so that the cost of the path
is just the sum of the individual steps.

55
00:03:56,670 --> 00:04:00,020
And so
we'll implement this path cost function

56
00:04:00,020 --> 00:04:04,150
in terms of a step cost function.

57
00:04:04,150 --> 00:04:07,990
The step cost function takes a state,

58
00:04:09,030 --> 00:04:12,830
an action, and
the resulting state from that action.

59
00:04:14,070 --> 00:04:18,159
And returns a number n which
is the cost of that action.

60
00:04:18,159 --> 00:04:23,307
In the route finding example, the cost
might be the number of miles traveled,

61
00:04:23,307 --> 00:04:27,680
or maybe the number of minutes it
takes to get to that destination.
