1
00:00:00,260 --> 00:00:03,032
If you've ever bought something online, you know how annoying it is to enter

2
00:00:03,032 --> 00:00:07,160
all those numbers on a credit card. It's pretty easy to mess up one or two.

3
00:00:07,160 --> 00:00:09,760
It's even more annoying for the people trying to charge the credit card so they

4
00:00:09,760 --> 00:00:12,860
can sell you things. Luckily, the designers of credit cards back in the day

5
00:00:12,860 --> 00:00:16,472
thought about this. All credit card numbers have to follow a kind of pattern,

6
00:00:16,472 --> 00:00:19,370
and there's an algorithm that uses the pattern to figure out if the customer

7
00:00:19,370 --> 00:00:23,932
has accidentally switched 2 numbers in their credit card. The algorithm has a

8
00:00:23,932 --> 00:00:27,592
similar structure for the code for calculating the sum of digits. It starts

9
00:00:27,592 --> 00:00:31,188
with the sum of zero, and a count of zero. And then for each digit, starting

10
00:00:31,188 --> 00:00:34,248
from the right, we increment the count, and if the count is odd, we add the

11
00:00:34,248 --> 00:00:39,630
digit to the sum. Else, if the count is not odd, and the digit is less than 5,

12
00:00:39,630 --> 00:00:45,852
we add twice the digit to the sum. Else, if count is even and the digit is

13
00:00:45,852 --> 00:00:53,200
greater than 5, we add twice the digit to the sum and subtract 9. And then,

14
00:00:53,200 --> 00:00:58,510
after all of that, if the last digit of the sum is 0, the card number is valid.

15
00:00:58,510 --> 00:01:02,638
How would you write java code for this algorithm? We'll give you the code for

16
00:01:02,638 --> 00:01:05,725
so many digits so you can adapt it, and also, you have this credit card number

17
00:01:05,725 --> 00:01:10,999
that you can use to test. And here's a hint: credit card numbers are too big to

18
00:01:10,999 --> 00:01:14,624
fit in an int. This problem is tricky, there are a lot of ways to write code

19
00:01:14,624 --> 00:01:18,698
which almost works, but not quite. It will be very important to use a tester

20
00:01:18,698 --> 00:01:22,198
program. Also, you can write print line statements to get an idea of what's

21
00:01:22,198 --> 00:01:24,578
happening while your code is running.
