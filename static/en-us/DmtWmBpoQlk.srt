1
00:00:00,000 --> 00:00:02,000
We're going to write a Python program

2
00:00:02,000 --> 00:00:05,000
to check and see or to enumerate strings in this language

3
00:00:05,000 --> 00:00:07,000
so that we can check strings for validity.

4
00:00:07,000 --> 00:00:11,000
Here I've written a grammar, but it's on kind of a pencil and paper format

5
00:00:11,000 --> 00:00:13,000
with these arrows and what-not.

6
00:00:13,000 --> 00:00:16,000
I'm going to need to encode it so that Python can understand it

7
00:00:16,000 --> 00:00:19,000
just like we had to encode the edges in our finite state machine

8
00:00:19,000 --> 00:00:21,000
so that Python could understand them.

9
00:00:21,000 --> 00:00:25,000
Here on the right I've written a potential Python encoding for this grammar.

10
00:00:25,000 --> 00:00:27,000
Expression goes to expression plus expression.

11
00:00:27,000 --> 00:00:30,000
The way I'm going to encode this is

12
00:00:30,000 --> 00:00:37,000
if we had A goes to B, C, I'm going to make that the rule A goes to B, C.

13
00:00:37,000 --> 00:00:41,000
We've got the left-hand side and the right-hand side,

14
00:00:41,000 --> 00:00:43,000
left-hand side and the right-hand side.

15
00:00:43,000 --> 00:00:45,000
Expression goes to expression plus expression.

16
00:00:45,000 --> 00:00:48,000
Expression can also go to expression minus expression

17
00:00:48,000 --> 00:00:51,000
or expression in parentheses, or just number,

18
00:00:51,000 --> 00:00:55,000
and here I'm writing all of my terminals and non-terminals as strings

19
00:00:55,000 --> 00:00:58,000
just to make equality checking easier.

20
00:00:58,000 --> 00:01:02,000
Then given a seed utterance like print exp followed by semi-colon,

21
00:01:02,000 --> 00:01:05,000
we would represent that as a list of 3 strings,

22
00:01:05,000 --> 00:01:10,000
and what I want to do is take our grammar rules like this one

23
00:01:10,000 --> 00:01:14,000
and our utterances like this one and combine them together

24
00:01:14,000 --> 00:01:18,000
to get--I've replaced the expression that was already in here.

25
00:01:18,000 --> 00:01:24,000
Using this rule, I've replaced it with expression minus expression.

26
00:01:24,000 --> 00:01:27,000
Well, if I've stored this in a Python variable called "utterance,"

27
00:01:27,000 --> 00:01:32,000
and the position I want to change is position 1--that's where I'm going to apply this rule--

28
00:01:32,000 --> 00:01:37,000
I can get out this cool result with this Python

29
00:01:37,000 --> 00:01:39,000
that uses list selection.

30
00:01:39,000 --> 00:01:42,000
Utterance from 0 up to but not including pos,

31
00:01:42,000 --> 00:01:47,000
this part here corresponds to this part in our example,

32
00:01:47,000 --> 00:01:50,000
the word "print," something that came before the part we were interested in.

33
00:01:50,000 --> 00:01:54,000
The right-hand side of the rule was expression minus expression,

34
00:01:54,000 --> 00:01:57,000
and then the rest of the utterance, this semi-colon,

35
00:01:57,000 --> 99:59:59,999
something else we weren't concerned with this time.
