1
00:00:00,410 --> 00:00:03,315
We're going to do another
programming exercise here.

2
00:00:08,387 --> 00:00:12,890
Now this exercise will
be pure JavaScript.

3
00:00:12,890 --> 00:00:15,390
Are you familiar with
what a palindrome is?

4
00:00:15,390 --> 00:00:15,890
>> Yeah.

5
00:00:15,890 --> 00:00:17,280
>> Okay.
So a word that can be spelled forward

6
00:00:17,280 --> 00:00:18,420
and backward the same way.

7
00:00:18,420 --> 00:00:21,500
>> Yeah.
>> I would like you to build a function

8
00:00:21,500 --> 00:00:23,360
that returns true or false.

9
00:00:23,360 --> 00:00:25,780
If a string is a palindrome.

10
00:00:25,780 --> 00:00:28,490
>> Okay, how detailed do you
want the JavaScript to be?

11
00:00:28,490 --> 00:00:29,640
Can I write pseudocode?

12
00:00:29,640 --> 00:00:34,060
Or do you want me to see
the actual JavaScript code?

13
00:00:34,060 --> 00:00:37,420
>> Eventually, we would like to
see the actual JavaScript, but

14
00:00:37,420 --> 00:00:40,090
if you want to step through
pseudocode first, that's fine.

15
00:00:40,090 --> 00:00:42,150
>> I always like to step
through pseudocode myself,

16
00:00:42,150 --> 00:00:44,370
just to tell you my thinking process.

17
00:00:44,370 --> 00:00:44,880
>> Okay.

18
00:00:44,880 --> 00:00:45,970
So basically.

19
00:00:45,970 --> 00:00:47,935
I will have a function here.

20
00:00:47,935 --> 00:00:56,798
[NOISE]
Is palindrome.

21
00:00:56,798 --> 00:00:58,370
And it will take a string.

22
00:01:01,090 --> 00:01:02,050
Okay?
>> Okay.

23
00:01:02,050 --> 00:01:03,420
>> So that's my silica.

24
00:01:03,420 --> 00:01:10,050
And I'm going to do Then it's like
how I would approach a palindrome.

25
00:01:10,050 --> 00:01:11,300
Because.

26
00:01:11,300 --> 00:01:13,360
Let's just confirm
the definition of a palindrome.

27
00:01:13,360 --> 00:01:15,770
Palindrome is basically
if I have a string here.

28
00:01:16,800 --> 00:01:20,000
Say gog.

29
00:01:21,520 --> 00:01:22,640
Backwards or forwards.

30
00:01:22,640 --> 00:01:24,000
It will be the same right?

31
00:01:24,000 --> 00:01:24,590
>> Correct.
>> So

32
00:01:24,590 --> 00:01:27,120
if I were to somehow transform this.

33
00:01:27,120 --> 00:01:28,230
If I were to reverse this.

34
00:01:31,160 --> 00:01:32,490
And then do an if statement.

35
00:01:32,490 --> 00:01:38,320
So, if gog is the equals of reverse of
gog, that's my logic, that's a palantir.

36
00:01:38,320 --> 00:01:38,980
>> Okay.
>> So,

37
00:01:38,980 --> 00:01:42,450
what I would do is I would need to
figure how to reverse the strings.

38
00:01:42,450 --> 00:01:46,720
So, I'll probably do a reverse string,
I'll call it a function.

39
00:01:46,720 --> 00:01:54,025
So are reverse string,

40
00:01:54,025 --> 00:02:01,704
equals reverse string.

41
00:02:01,704 --> 00:02:04,972
My string.

42
00:02:04,972 --> 00:02:08,470
So if So, what's at my reverse rate?

43
00:02:08,470 --> 00:02:15,263
So, if string equals reverse

44
00:02:15,263 --> 00:02:20,525
string, return

45
00:02:20,525 --> 00:02:27,480
true else return.

46
00:02:27,480 --> 00:02:27,980
False.

47
00:02:29,350 --> 00:02:32,170
Okay so this logic is done.

48
00:02:32,170 --> 00:02:35,890
I always need to make sure
you need to figure out this.

49
00:02:35,890 --> 00:02:36,680
So how do I do that?

50
00:02:36,680 --> 00:02:40,160
So I will write,
already with my pseudocode

51
00:02:40,160 --> 00:02:44,330
to space the code as well I
would write when you see this.

52
00:02:44,330 --> 00:02:44,969
I would write.

53
00:02:46,120 --> 00:02:48,538
A function on top here
called reverse string.

54
00:02:54,517 --> 00:02:58,850
Reverse string.

55
00:02:58,850 --> 00:03:03,780
Takes a string variable and reverse it.

56
00:03:03,780 --> 00:03:07,240
So, I know that there is no,

57
00:03:07,240 --> 00:03:11,870
correct me if I am wrong
there is no library,

58
00:03:11,870 --> 00:03:15,730
in the stream library there
is no way to reverse it.

59
00:03:15,730 --> 00:03:18,300
>> A stream has a native of method for
reverse.

60
00:03:18,300 --> 00:03:20,107
>> So there is a [INAUDIBLE] method.

61
00:03:20,107 --> 00:03:21,520
>> So let's kill off this here.

62
00:03:21,520 --> 00:03:22,020
>> Ok.

63
00:03:24,450 --> 00:03:31,161
And we'll just do.str.reverse.

64
00:03:31,161 --> 00:03:32,250
>> Okay.

65
00:03:32,250 --> 00:03:35,250
>> But that's not something you would
look up anyway in documentation so.

66
00:03:35,250 --> 00:03:39,634
>> Right.
>> Okay, got it.

67
00:03:39,634 --> 00:03:42,460
>> So, this is your test case here.

68
00:03:42,460 --> 00:03:43,130
Right?
>> Right.

69
00:03:43,130 --> 00:03:46,190
>> So I'm going to introduce
another test case.

70
00:03:54,549 --> 00:03:56,650
>> And want to ignore punctuation
>> I see.

71
00:03:57,880 --> 00:04:00,980
>> And actually let me, another case.

72
00:04:02,090 --> 00:04:06,900
We would like to ignore punctuation and
case sensitivity.

73
00:04:06,900 --> 00:04:08,320
>> Okay.

74
00:04:08,320 --> 00:04:13,330
So does your current solution meet that?

75
00:04:13,330 --> 00:04:14,070
>> No.
>> Okay.

76
00:04:14,070 --> 00:04:15,390
>> Of course not, so my current-

77
00:04:15,390 --> 00:04:16,990
>> So how would you change it?

78
00:04:16,990 --> 00:04:19,810
>> How would I change it?

79
00:04:21,690 --> 00:04:25,450
Okay, so now this would probably
be good for me to actually.

80
00:04:26,980 --> 00:04:29,219
Rename my reverse clean,
reverse clean up.

81
00:04:29,219 --> 00:04:32,320
>> [LAUGH]
>> [LAUGH] I would do that.

82
00:04:32,320 --> 00:04:37,206
I would name this to reverse

83
00:04:37,206 --> 00:04:42,860
clean up string.

84
00:04:42,860 --> 00:04:46,390
I'll keep this whole logic
because it's a good logic.

85
00:04:46,390 --> 00:04:46,950
To follow.

86
00:04:46,950 --> 00:04:48,950
And I'll go back up here.

87
00:04:48,950 --> 00:04:52,296
And figure out how to get
rid of my punctuation here.

88
00:04:52,296 --> 00:04:57,703
Reverse cleanup.

89
00:05:02,304 --> 00:05:07,144
All right so the first step already
is like I'm basically going to

90
00:05:07,144 --> 00:05:09,264
reverse this first string.

91
00:05:09,264 --> 00:05:14,998
So reverse string

92
00:05:14,998 --> 00:05:22,260
equals string reverse.

93
00:05:22,260 --> 00:05:26,000
Now, I know that string will has some
new best methods called lower string to

94
00:05:26,000 --> 00:05:27,480
lower to lower stress.

95
00:05:27,480 --> 00:05:33,513
So, I need to look up the exact
definition but basically reverse String.

96
00:05:33,513 --> 00:05:39,404
Equals rough string

97
00:05:39,404 --> 00:05:43,220
to lowercase.

98
00:05:43,220 --> 00:05:45,990
Now I need to figure out these
punctuation marks there.

99
00:05:45,990 --> 00:05:46,760
How would I do that?

100
00:05:46,760 --> 00:05:53,190
So let's let's think about I
need to write all these test

101
00:05:53,190 --> 00:05:56,990
cases like what makes a punctuation,
what are these punctuation marks?

102
00:05:56,990 --> 00:05:59,400
So puncts.

103
00:05:59,400 --> 00:06:06,781
Period, comma, semicolon.

104
00:06:06,781 --> 00:06:09,042
Shoot.

105
00:06:09,042 --> 00:06:12,501
Yeah-
>> [INAUDIBLE]

106
00:06:12,501 --> 00:06:17,770
>> Quotes, double quotes, single quotes.

107
00:06:17,770 --> 00:06:18,660
I have comma already.

108
00:06:22,440 --> 00:06:27,270
Comma, let me see, let me think of
other punctuation, yeah, question mark.

109
00:06:28,810 --> 00:06:32,760
Back tick,
all the things that is not alphanumeric.

110
00:06:33,930 --> 00:06:37,020
So I'm going to ask you.

111
00:06:37,020 --> 00:06:41,640
Can I assume that I
have alpha characters,

112
00:06:41,640 --> 00:06:43,280
can there be numeric characters as well.

113
00:06:43,280 --> 00:06:45,580
>> We will say no numbers, just alpha.

114
00:06:45,580 --> 00:06:46,590
>> Just alpha.

115
00:06:46,590 --> 00:06:48,710
So I know that I'm going to
use a reader expressions.

116
00:06:48,710 --> 00:06:49,530
>> Okay.
>> Probably,

117
00:06:49,530 --> 00:06:54,110
so probably
>> Oops in.

118
00:06:54,110 --> 00:06:56,660
I want you to look this up
>> That's fine.

119
00:06:56,660 --> 00:06:57,240
>> My new expression.

120
00:06:57,240 --> 00:07:00,210
I just knew that i would
know that i would choose

121
00:07:00,210 --> 00:07:02,460
something probably the W word.

122
00:07:02,460 --> 00:07:04,390
>> Okay
>> I would need to figure out where

123
00:07:04,390 --> 00:07:09,810
the word has two merits if not
then actually I think includes.

124
00:07:09,810 --> 00:07:11,330
Yeah im glad i use it.

125
00:07:11,330 --> 00:07:16,886
Right now expression, a to z, and

126
00:07:16,886 --> 00:07:22,454
do probably
>> That's fine.

127
00:07:22,454 --> 00:07:23,960
>> Yeah.
>> You're on the right track.

128
00:07:23,960 --> 00:07:29,470
>> Yeah, I did a to z and we'll to do
some sort of regular expression like,

129
00:07:29,470 --> 00:07:30,210
re match.

130
00:07:32,300 --> 00:07:32,800
Last string..

131
00:07:41,190 --> 00:07:42,620
So I'm rusty a moderate of expression.

132
00:07:42,620 --> 00:07:43,228
No, that's fine.

133
00:07:43,228 --> 00:07:44,211
We'll just.

134
00:07:44,211 --> 00:07:46,130
>> Yes so
basically I use regular expressions and

135
00:07:46,130 --> 00:07:49,740
then find find the ones that are not.

136
00:07:50,790 --> 00:07:54,520
Belong to A to Z and then reply and

137
00:07:54,520 --> 00:07:57,310
didn't get rid of them or
replace them in a way.

138
00:07:57,310 --> 00:08:01,710
And then, that will get rid of all
our punctuation because based on just

139
00:08:01,710 --> 00:08:08,430
looking for
all instances of characters A to Z.

140
00:08:08,430 --> 00:08:09,680
>> Right.

141
00:08:09,680 --> 00:08:12,810
So I see a potential for a bug here.

142
00:08:12,810 --> 00:08:13,310
>> Okay.

143
00:08:14,310 --> 00:08:19,140
>> Use the var statement here but you're
not using a var statement up here,

144
00:08:19,140 --> 00:08:22,290
what is the significance
of that var statement?

145
00:08:22,290 --> 00:08:24,280
>> The var statement is
actually really crucial so

146
00:08:24,280 --> 00:08:28,310
I would actually correct them,
correct my statement.

147
00:08:30,890 --> 00:08:35,669
Because that will guarantee that
I'm creating a local, variable.

148
00:08:35,669 --> 00:08:39,350
>> Without the what happens?

149
00:08:39,350 --> 00:08:44,810
>> It will first try to access any
global variables that it sees.

150
00:08:44,810 --> 00:08:50,695
If not, it will create the current
global variable which is that there.

151
00:08:50,695 --> 00:08:56,950
[LAUGH] Okay overall this
looks good just I guess to

152
00:08:58,090 --> 00:09:04,070
explain a little better,
these functions here.

153
00:09:04,070 --> 00:09:06,800
We'll illiterate over the entire
string every single time.

154
00:09:06,800 --> 00:09:10,150
So, this isn't the most efficient way,
but it does get the job done.

155
00:09:10,150 --> 00:09:10,650
>> Right.
>> So,

156
00:09:10,650 --> 00:09:13,460
what we should do is this would
iterate over the whole string, then.

157
00:09:13,460 --> 00:09:15,580
And then you'd get iterate
the whole string again.

158
00:09:15,580 --> 00:09:16,090
>> Again.

159
00:09:16,090 --> 00:09:19,150
>> And then you'd iterate it
again trying to get your matches.

160
00:09:19,150 --> 00:09:20,170
>> Yeah.

161
00:09:20,170 --> 00:09:23,820
>> A more efficient way to go
about this, the red x is correct

162
00:09:25,305 --> 00:09:29,920
>> You could match that way, and

163
00:09:29,920 --> 00:09:34,340
then you could iterate over the string

164
00:09:35,410 --> 00:09:40,350
forward using left and backwards, and
just check character by character.

165
00:09:40,350 --> 00:09:43,790
And then you're only iterating
over the string one time, but

166
00:09:43,790 --> 00:09:44,760
this works perfectly fine.

167
00:09:44,760 --> 00:09:45,270
>> I see.
