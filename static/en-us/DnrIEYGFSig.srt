1
00:00:00,400 --> 00:00:03,340
Since we're using dynamic programming
the first thing we look for

2
00:00:03,340 --> 00:00:05,810
is some optimal similar substructure.

3
00:00:05,810 --> 00:00:10,109
Recall that the key realization in
understanding the single source shortest

4
00:00:10,109 --> 00:00:12,026
path algorithms like Dijkstra and

5
00:00:12,026 --> 00:00:16,840
Bellman Ford was that subpath of
shortest paths are our shortest path.

6
00:00:16,840 --> 00:00:23,300
So if this is a shortest path between U
V and it happens to go between X and Y.

7
00:00:23,300 --> 00:00:27,340
Then the subpath must be
a shortest path between X and Y.

8
00:00:27,340 --> 00:00:32,439
If there were a shorter one,
then it could replace this subpath in

9
00:00:32,439 --> 00:00:39,640
the path from U to V, and that would
then give us a shorter path from U to V.

10
00:00:39,640 --> 00:00:43,360
This type of argument is called cut and
paste for obvious reasons.

11
00:00:43,360 --> 00:00:46,170
By the way, throughout,
I'll use squiggly lines to indicate

12
00:00:46,170 --> 00:00:51,570
the path between two vertices, and
straight ones to indicate a single edge.

13
00:00:51,570 --> 00:00:55,030
Unfortunately, by itself,
this structure is not enough.

14
00:00:55,030 --> 00:00:58,520
Sure, we might be able to argue
that a shortest path from U to V

15
00:00:59,560 --> 00:01:03,980
must take a shortest path from
U to a neighbor of V first, but

16
00:01:03,980 --> 00:01:06,110
how do we find the shortest path?

17
00:01:06,110 --> 00:01:09,440
The sub problems end up
having circular dependencies.

18
00:01:09,440 --> 00:01:12,590
One idea is to include
the notion of path length,

19
00:01:12,590 --> 00:01:14,380
defined by the number of edges used.

20
00:01:15,520 --> 00:01:19,440
If we knew all shortest path that
only used k minis one edges,

21
00:01:19,440 --> 00:01:21,130
then by examining the neighbors of V,

22
00:01:21,130 --> 00:01:25,280
we could figure out the shortest
path with K edges to V.

23
00:01:25,280 --> 00:01:29,958
We'll let delta U V F K be
the weight of the shortest path

24
00:01:29,958 --> 00:01:32,940
that uses at most K edges.

25
00:01:32,940 --> 00:01:38,840
Then the recurrence is that delta U V K
is the minimum of delta U V K minus one.

26
00:01:38,840 --> 00:01:42,560
This is where we don't use
that potential kth edge.

27
00:01:43,630 --> 00:01:47,090
Or it's the minimum of
the distances from.

28
00:01:47,090 --> 00:01:52,530
U to one of the neighbors of V
using only k minus one edges.

29
00:01:52,530 --> 00:01:55,230
Plus the weight of that
last edge to get us to V.

30
00:01:55,230 --> 00:02:00,230
This strategy works, and it yields
the matrix multiplication shortest path

31
00:02:00,230 --> 00:02:03,740
algorithm that runs in
time V cubed log V.

32
00:02:04,850 --> 00:02:08,810
See Cormen, Leiserson,
Rivest, Stein for details.

33
00:02:08,810 --> 00:02:11,650
We're going to take a different approach
that will yield a slightly faster

34
00:02:11,650 --> 00:02:15,120
algorithm, and
allow us to remove this log factor.

35
00:02:15,120 --> 00:02:19,130
We're going to recurse on the the set
of potential intermediate vertices

36
00:02:19,130 --> 00:02:20,880
used in the shortest path.

37
00:02:20,880 --> 00:02:25,340
Without loss of generality, we'll assume
that the vertices are one through N for

38
00:02:25,340 --> 00:02:29,610
the convenience of notation,
consider the last step of the algorithm,

39
00:02:29,610 --> 00:02:33,920
where we've allowed vertices one
through N to be intermediate vertices.

40
00:02:33,920 --> 00:02:36,940
And just now we're considering
the effect of allowing

41
00:02:36,940 --> 00:02:39,298
N to be an intermediate vertex.

42
00:02:39,298 --> 00:02:42,620
Clearly our choices either
using the old path, or

43
00:02:42,620 --> 00:02:45,430
taking the shortest path from U to N.

44
00:02:45,430 --> 00:02:47,370
And then from N to V.

45
00:02:47,370 --> 00:02:52,262
In fact, this is the choice not just for
N, but for any K between one and N.

46
00:02:53,650 --> 00:02:59,050
To get from U to V using only
intermediate vertices one through K,

47
00:02:59,050 --> 00:03:05,310
we can either use K by taking these
shortest paths, or not use it.

48
00:03:05,310 --> 00:03:08,430
Therefore, we define delta U V F K,

49
00:03:08,430 --> 00:03:11,320
to be the minimum weight
of a path from U to V.

50
00:03:11,320 --> 00:03:15,550
Using only one through K as
the intermediate vertices.

51
00:03:15,550 --> 00:03:18,750
Then, the recurrence
becomes delta U V F K.

52
00:03:18,750 --> 00:03:23,570
Is the minimum of delta U V K
minus one that is not using K.

53
00:03:23,570 --> 00:03:26,260
That is an intermediate vertex.

54
00:03:26,260 --> 00:03:31,830
And using K that is taking the shortest
allowed path to K from U and

55
00:03:31,830 --> 00:03:34,420
then going as quickly as
possible from K to V.

56
00:03:35,500 --> 00:03:39,580
In the base case where no intermediate
vertices are allowed the weights and

57
00:03:39,580 --> 00:03:41,870
the edges provide all
the needed information.
