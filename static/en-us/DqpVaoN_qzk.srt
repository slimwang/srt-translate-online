1
00:00:00,070 --> 00:00:02,950
We saw examples of inference attacks.

2
00:00:02,950 --> 00:00:08,260
The two quick examples when
the query was an average of an exam

3
00:00:08,260 --> 00:00:13,650
grade that was authorized but the result
was disclosing somebody's grade,

4
00:00:13,650 --> 00:00:16,440
which we didn't want that to happen.

5
00:00:16,440 --> 00:00:21,220
So obviously, we want to have defenses
against these kind of inference attacks.

6
00:00:21,220 --> 00:00:24,490
These defenses are actually pretty hard.

7
00:00:24,490 --> 00:00:29,330
In general, if you can submit
an arbitrary number of such queries

8
00:00:29,330 --> 00:00:33,850
You can always make an inference based
on the results those queries return.

9
00:00:33,850 --> 00:00:38,580
But there are some things that we
can do to reduce the likelihood

10
00:00:38,580 --> 00:00:42,458
of somebody finding sensitive
information by using such queries

11
00:00:42,458 --> 00:00:44,710
with at least limited amount of effort.

12
00:00:44,710 --> 00:00:47,640
What kind of defenses
can we have in place?

13
00:00:47,640 --> 00:00:52,020
So remember the way we do
these aggregate queries that

14
00:00:52,020 --> 00:00:56,890
are allowed is that the query sort
of says, select a set of tuples.

15
00:00:56,890 --> 00:01:01,243
So, for example, that case we had where
we looking for Junior's standing, we're

16
00:01:01,243 --> 00:01:05,370
going to pull out all the tuples where
the standing attribute value is Junior.

17
00:01:05,370 --> 00:01:08,540
So we're going to pull out
all the tuples that match

18
00:01:08,540 --> 00:01:10,160
this query in some sense.

19
00:01:10,160 --> 00:01:12,850
And then we're going to
aggregate the exam score.

20
00:01:12,850 --> 00:01:16,940
So one way to make sure that
inference is more difficult

21
00:01:16,940 --> 00:01:21,780
is that we don't do that when the number
of tuples that are selected is too few.

22
00:01:21,780 --> 00:01:25,750
The idea here is when it's too few,
extreme case when it's one,

23
00:01:25,750 --> 00:01:30,380
then we know that the average actually
discloses the score that we have.

24
00:01:30,380 --> 00:01:34,930
But if it's a small number of tuples,
the average is going to be close to

25
00:01:34,930 --> 00:01:39,380
the score of every person who is
selected or whose tuples are selected.

26
00:01:39,380 --> 00:01:43,880
So average for a small set essentially
tells us what those values are and

27
00:01:43,880 --> 00:01:47,050
we don't want to do this average
score when the number is too small.

28
00:01:47,050 --> 00:01:51,220
Well you can think of other
cases where if you asking for

29
00:01:51,220 --> 00:01:55,280
some property, and that selected
set of tuples is very large,

30
00:01:55,280 --> 00:01:57,560
then that sort of holds for everyone.

31
00:01:57,560 --> 00:02:01,700
And if it holds for everyone,
then it holds for a given user as well.

32
00:02:01,700 --> 00:02:06,620
So both too small and too large actually
lead to this inference problem.

33
00:02:06,620 --> 00:02:09,449
I'll let you think about
the too large part.

34
00:02:09,449 --> 00:02:14,150
So you should see the aggregation
is happening over a set of tuples.

35
00:02:14,150 --> 00:02:18,360
And does it include every tuple, or
almost every tuple, in the database?

36
00:02:18,360 --> 00:02:20,380
Or, does it include very few?

37
00:02:20,380 --> 00:02:24,330
And depending on the nature of the query
that we have, you may say that,

38
00:02:24,330 --> 00:02:27,430
we can't run that query because
of the number of these tuples,

39
00:02:27,430 --> 00:02:29,160
that it's going to aggregate all.

40
00:02:29,160 --> 00:02:31,810
So that's one way to do that.

41
00:02:31,810 --> 00:02:35,730
The other defense that we
typically do is saying well,

42
00:02:35,730 --> 00:02:41,500
we can transform the database and can
remove all the identifying information.

43
00:02:41,500 --> 00:02:44,360
Think about the exam score
that I was talking about.

44
00:02:44,360 --> 00:02:47,960
Let's say we dropped the student ID and
standing,

45
00:02:47,960 --> 00:02:51,810
even if you're concerned about too few
students with a certain standing, and

46
00:02:51,810 --> 00:02:55,230
then we just post in the exams
score without the names or the IDs.
