1
00:00:00,000 --> 00:00:02,450
For this problem we’ve been tasked with finding

2
00:00:02,450 --> 00:00:06,286
the longest common substring. The longest common

3
00:00:06,286 --> 00:00:08,947
substring is going to be the longest

4
00:00:08,947 --> 00:00:13,113
substring found in two or more given strings.

5
00:00:13,113 --> 00:00:15,733
Let’s go through an example and be pretty clear.

6
00:00:15,733 --> 00:00:17,869
So here referring two words that I’m not going

7
00:00:17,869 --> 00:00:21,141
to pronounce and if you look closely the longest

8
00:00:21,141 --> 00:00:23,633
sequence of characters that they’ve in common

9
00:00:23,633 --> 00:00:26,728
can be found right here APACH. There is no

10
00:00:26,728 --> 00:00:30,068
other substring longer than five characters

11
00:00:30,068 --> 00:00:33,674
found in both words. And in this problem

12
00:00:33,674 --> 00:00:36,236
we need to find the length of the longest common

13
00:00:36,236 --> 00:00:41,009
substring. So in this case it would be five

14
00:00:41,009 --> 00:00:42,969
. So when I ease solution to this problem,

15
00:00:42,969 --> 00:00:45,426
which should be really, really slow if we

16
00:00:45,426 --> 00:00:48,892
calculate every single possible substring in

17
00:00:48,892 --> 00:00:51,820
one word and check if its contained in the

18
00:00:51,820 --> 00:00:54,488
other word. So I would start with T, then I might

19
00:00:54,488 --> 00:01:00,609
do TA and then I might do AP, PA, AC, etcetera,

20
00:01:00,609 --> 00:01:02,642
etcetera and then I go to three letters and four

21
00:01:02,642 --> 00:01:04,873
letters and five letters and so on. And

22
00:01:04,873 --> 00:01:06,915
each time I would check if it’s in the other word.

23
00:01:06,915 --> 00:01:09,751
If it is in the other word, I would check to see

24
00:01:09,751 --> 00:01:12,350
if it’s the longest substring I’ve found so far.

25
00:01:12,350 --> 00:01:15,401
And I would update it. So this is pretty slow.

26
00:01:15,401 --> 00:01:17,634
We’re going to do something a little different.

27
00:01:17,634 --> 00:01:20,037
We’re going to write three functions. The first

28
00:01:20,037 --> 00:01:24,435
function C suffix, finds the longest common suffix

29
00:01:24,435 --> 00:01:27,382
. So given two words, like the ones we have here,

30
00:01:27,382 --> 00:01:30,005
the longest common suffix would be either the

31
00:01:30,005 --> 00:01:32,822
empty string or none. That mean there is no suffix

32
00:01:32,822 --> 00:01:35,255
they have in common. But if we ignored,

33
00:01:35,255 --> 00:01:38,428
the last few characters let’s say we had this,

34
00:01:38,428 --> 00:01:42,522
the longest common suffix is going to be APACH.

35
00:01:42,522 --> 00:01:44,853
So we’re going to find a function that finds a

36
00:01:44,853 --> 00:01:48,036
suffix, which is going to be a step in the direction

37
00:01:48,036 --> 00:01:50,578
of finding the more general longest common

38
00:01:50,578 --> 00:01:52,568
substring. The second function we are going

39
00:01:52,568 --> 00:01:55,791
to write creates a risk of all the prefixes for a

40
00:01:55,791 --> 00:02:00,025
given string. So if we take in a word say,

41
00:02:00,025 --> 00:02:03,077
CAT and calculate the prefixes of CAT, we

42
00:02:03,077 --> 00:02:06,567
will get a list exactly like this one. Notice

43
00:02:06,567 --> 00:02:08,553
that if there are three characters in the input

44
00:02:08,553 --> 00:02:11,448
string, the list is going to be of length three.

45
00:02:11,448 --> 00:02:14,416
And the last function is going to find the length

46
00:02:14,416 --> 00:02:16,924
of the longest common substring. The way we’re

47
00:02:16,924 --> 00:02:20,872
going to do that is by finding the largest common

48
00:02:20,872 --> 00:02:24,216
suffix of all the prefixes. So we’re going to go

49
00:02:24,216 --> 00:02:26,606
through each prefix, calculate the largest

50
00:02:26,606 --> 00:02:29,107
common suffix, and then keep track of the

51
00:02:29,107 --> 00:02:32,295
largest one we found and the length of the largest

52
00:02:32,295 --> 00:02:34,980
common suffix of all the prefixes quite an

53
00:02:34,980 --> 00:02:38,092
awful is going to be the longest common substring.

54
00:02:38,092 --> 00:02:42,128
So let’s get coding this. So ever in my function

55
00:02:42,128 --> 00:02:46,241
decoration for the common suffix. And one thing

56
00:02:46,241 --> 00:02:48,858
that was noted in a hint is that we’re probably

57
00:02:48,858 --> 00:02:52,202
going to want to cash the results of this function

58
00:02:52,202 --> 00:02:55,970
in a chart to save time and be more efficient.

59
00:02:55,970 --> 00:02:57,441
So let’s create that chart and then we’re

60
00:02:57,441 --> 00:03:00,394
going to check in the first line of our function

61
00:03:00,394 --> 00:03:02,304
whether or not we can reuse a value that we’ve

62
00:03:02,304 --> 00:03:06,595
already calculated. This is called memoisation.

63
00:03:06,595 --> 00:03:09,922
So here I make sure that X and Y are in the empty

64
00:03:09,922 --> 00:03:13,357
string and if they aren’t I’m going to check the C

65
00:03:13,357 --> 00:03:16,894
if the last value in each string is matching. If

66
00:03:16,894 --> 00:03:20,592
they do match, my total length of the common

67
00:03:20,592 --> 00:03:23,392
suffix is going to increase by one because the

68
00:03:23,392 --> 00:03:25,960
last characters match. And then I’m going to

69
00:03:25,960 --> 00:03:29,626
recursively call C suffix on everything, but

70
00:03:29,626 --> 00:03:33,041
the last character in the string. So five CAT

71
00:03:33,041 --> 00:03:35,603
and HAT, the first recursive call is going

72
00:03:35,603 --> 00:03:39,271
to check the T in CAT and the T in HAT.

73
00:03:39,271 --> 00:03:42,579
We’re going to see are they match at one and then

74
00:03:42,579 --> 00:03:48,095
recurse on CAT and HAT do the same thing? Recurse

75
00:03:48,095 --> 00:03:51,972
in C and H were not going to find a match, so

76
00:03:51,972 --> 00:03:54,803
we’re going to return the answer. And of course

77
00:03:54,803 --> 00:03:57,142
we have to remember to update our chart if we did

78
00:03:57,142 --> 00:04:00,803
find the answer. And that’s the common suffix.

79
00:04:00,803 --> 00:04:04,174
Lets move on to the next one and as spoiler each

80
00:04:04,174 --> 00:04:06,223
of the remaining functions is exactly one line

81
00:04:06,223 --> 00:04:09,273
long. So here is the code for a prefixes function

82
00:04:09,273 --> 00:04:12,252
. As a reminder, it takes in a string and outputs

83
00:04:12,252 --> 00:04:16,599
a list of all the prefixes for that string. So

84
00:04:16,599 --> 00:04:19,039
let’s take a look at this output. Given an input

85
00:04:19,039 --> 00:04:24,914
of CAT we have C, CA, CAT. If we are going to

86
00:04:24,914 --> 00:04:28,072
relate this to our code, CAT is X and we want to

87
00:04:28,072 --> 00:04:31,234
see what substring operations we can do on X

88
00:04:31,234 --> 00:04:35,086
to get these strings. So here we’re going to

89
00:04:35,086 --> 00:04:38,418
return everything from index 0, remember its

90
00:04:38,418 --> 00:04:42,616
0-1-2 to 1, not including the 1. So it’s just

91
00:04:42,616 --> 00:04:45,299
going to be the first the 0 character. If we

92
00:04:45,299 --> 00:04:47,249
increment that by 1, we’re going to get the

93
00:04:47,249 --> 00:04:50,859
Increment by 1 again and we get the T

94
00:04:50,859 --> 00:04:53,612
. And so what this was comprehension does

95
00:04:53,612 --> 00:04:57,315
is it goes from 0 to the length of X, so

96
00:04:57,315 --> 00:05:00,097
its going to go from 0 to 2 and we’re going to

97
00:05:00,097 --> 00:05:02,633
take the substring from the beginning all

98
00:05:02,633 --> 00:05:06,301
the way to I plus 1, so its going to go to

99
00:05:06,301 --> 00:05:10,300
1-2-3, just like we have here. Pretty simple.

100
00:05:10,300 --> 00:05:13,647
So given our two functions we’re going to rate L

101
00:05:13,647 --> 00:05:17,071
substring. And as I said before, this is going to

102
00:05:17,071 --> 00:05:22,363
be the maximum length of the common suffixes for

103
00:05:22,363 --> 00:05:25,945
all the prefixes both X and Y. If you didn’t

104
00:05:25,945 --> 00:05:27,633
follow along the code, it’s probably going to be

105
00:05:27,633 --> 00:05:30,585
clear. So here I’m taking the maximum of the list

106
00:05:30,585 --> 00:05:34,097
generated by this comprehension and what we’re

107
00:05:34,097 --> 00:05:38,266
going to do is find every combination to prefixes

108
00:05:38,266 --> 00:05:41,595
for X and Y together, find the common suffix of

109
00:05:41,595 --> 00:05:44,821
them and the maximum of that list is going to be

110
00:05:44,821 --> 00:05:48,381
the longest common substring of the entire word.And

111
00:05:48,381 --> 00:05:52,381
that is how you find the longest common substring.
