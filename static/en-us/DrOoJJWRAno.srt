1
00:00:00,510 --> 00:00:05,688
To parse the date column, we're going to be using D3's built-in time

2
00:00:05,688 --> 00:00:10,430
formatting accessed through d3.time.format and similar to

3
00:00:10,430 --> 00:00:16,570
the time format extreme we used in our dimple.js code for d3's formatting.

4
00:00:16,570 --> 00:00:21,630
We give it a similar string, which uses strftime variables.

5
00:00:21,630 --> 00:00:27,645
In this case, the things here, which are preceded by a percent.

6
00:00:27,645 --> 00:00:33,300
%d-%m-%Y and so forth, which each correspond to a day,

7
00:00:33,300 --> 00:00:36,000
month, year or time format.

8
00:00:36,000 --> 00:00:40,720
And then d3 simply pattern matches the pattern we told it to expect our

9
00:00:40,720 --> 00:00:41,880
dates in.

10
00:00:41,880 --> 00:00:43,770
And the actual date string.

11
00:00:43,770 --> 00:00:49,110
Here I've put an example of the format of dates in our data file where we have

12
00:00:49,110 --> 00:00:55,800
the day as a two digit integer, a dash, the month as a two digit integer.

13
00:00:55,800 --> 00:01:00,740
A dash, the year as a four digit integer and then the hour and

14
00:01:00,740 --> 00:01:04,050
minute of the day contained within these parentheses.

15
00:01:04,050 --> 00:01:10,450
So going to our format string, percent d corresponds to a two digit day.

16
00:01:10,450 --> 00:01:13,490
The dash corresponds to a dash.

17
00:01:13,490 --> 00:01:15,960
And since we don't want it to actually.

18
00:01:15,960 --> 00:01:19,480
Pull out the dash into the date object that gets returned.

19
00:01:19,480 --> 00:01:21,555
It simply skips over that.

20
00:01:21,555 --> 00:01:25,780
%M corresponds to the two digit month.

21
00:01:25,780 --> 00:01:28,875
A dash simply says skip the dash.

22
00:01:28,875 --> 00:01:35,230
%Y matches a four digit year and then we have a space

23
00:01:35,230 --> 00:01:40,660
left parenthesis two digit hour between zero and 23,

24
00:01:40,660 --> 00:01:45,790
a colon, and then a two digit minute, and then rest, a space, H,

25
00:01:45,790 --> 00:01:49,790
and right parenthesis, are simply the trail of the string.

26
00:01:49,790 --> 00:01:54,350
And to use this formatting, we simply, on the format object,

27
00:01:54,350 --> 00:01:58,230
call the parse function and pass in the string we'd like to convert.

28
00:01:58,230 --> 00:02:03,760
In this case, D bracket date corresponds to some string

29
00:02:03,760 --> 00:02:07,330
that'll look similar to this that I've shown here as an example date.

30
00:02:07,330 --> 00:02:11,540
Gets patterned matched to extract the appropriate day, month, year and time.

31
00:02:12,800 --> 00:02:15,790
And then we restore that in the date column.

32
00:02:15,790 --> 00:02:19,190
So in this case we're over writing the data column which is

33
00:02:19,190 --> 00:02:24,470
a string initially here, with a date java script object.

34
00:02:24,470 --> 00:02:29,120
One little nuance that I feel I should mention is that the time of the game is

35
00:02:29,120 --> 00:02:33,110
actually the local time of the country where the game's held.

36
00:02:33,110 --> 00:02:34,730
Or for simplicity.

37
00:02:34,730 --> 00:02:38,450
And since, for a single year or a single World Cup

38
00:02:38,450 --> 00:02:43,610
we only care about the relative times of each game, we can simplify things and

39
00:02:43,610 --> 00:02:47,810
not worry about converting all of the local time zones across all of the years.
