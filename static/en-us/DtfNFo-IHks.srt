1
00:00:00,240 --> 00:00:03,710
Let's suppose that computer A wants to send a

2
00:00:03,710 --> 00:00:06,790
file to computer B. The file transfer program on

3
00:00:06,790 --> 00:00:09,150
A asks the file system to read the file

4
00:00:09,150 --> 00:00:12,390
from the disk. The communication system then sends the

5
00:00:12,390 --> 00:00:16,990
file, and finally the communication system sends the packets.

6
00:00:16,990 --> 00:00:19,630
On the receiving side, the communication system. Gives the

7
00:00:19,630 --> 00:00:22,680
file to the file transfer program on B, and

8
00:00:22,680 --> 00:00:25,330
that file transfer program asks to have the file

9
00:00:25,330 --> 00:00:27,610
written to disk. So what can go wrong in

10
00:00:27,610 --> 00:00:30,890
this simple file transfer setup? Well first, reading and

11
00:00:30,890 --> 00:00:34,060
writing from the file system can result in errors.

12
00:00:34,060 --> 00:00:37,420
There may be errors in breaking up and reassembling the

13
00:00:37,420 --> 00:00:39,670
file. And finally there may be errors in the

14
00:00:39,670 --> 00:00:44,300
communication system itself. Now, one possible solution is to ensure

15
00:00:44,300 --> 00:00:46,800
that each step has some form of error checking,

16
00:00:46,800 --> 00:00:50,780
such as, duplicate copies, redundancy, time out and retry, so

17
00:00:50,780 --> 00:00:53,250
forth. One might even do packet error checking

18
00:00:53,250 --> 00:00:55,380
at each hop of the network. One could send

19
00:00:55,380 --> 00:00:59,340
every packet three times. One might acknowledge packet reception

20
00:00:59,340 --> 00:01:01,870
at each hop along the network. But the problem

21
00:01:01,870 --> 00:01:04,890
is that none of these solutions are complete.

22
00:01:04,890 --> 00:01:08,500
They still require application level checking. Therefore it may

23
00:01:08,500 --> 00:01:12,030
not be economical to perform redundant checks at different

24
00:01:12,030 --> 00:01:16,630
layers and at different places of this particular operation.

25
00:01:16,630 --> 00:01:19,810
Another possible solution is an end-to-end check and retry

26
00:01:19,810 --> 00:01:23,250
where the application commits or retries based on the

27
00:01:23,250 --> 00:01:25,850
check sum of the file. If errors along the

28
00:01:25,850 --> 00:01:28,510
way are rare, this will most likely finish on the

29
00:01:28,510 --> 00:01:30,960
first try. Now, this is not to say that

30
00:01:30,960 --> 00:01:34,870
we shouldn't take steps to correct errors at any one

31
00:01:34,870 --> 00:01:38,290
of these stages. Error correction at lower levels can

32
00:01:38,290 --> 00:01:41,790
sometimes be an effective performance booster. And the trade off

33
00:01:41,790 --> 00:01:44,670
here is based on performance, not correctness. So

34
00:01:44,670 --> 00:01:47,170
whether or not one should implement additional correctness

35
00:01:47,170 --> 00:01:49,680
checks at these layers depends on whether or

36
00:01:49,680 --> 00:01:51,980
not the amount of effort put into the reliability

37
00:01:51,980 --> 00:01:56,810
gains are worth the extra trouble. Another example where the intend

38
00:01:56,810 --> 00:02:01,660
arguement applies is with encryption, where keys are maintained by the end

39
00:02:01,660 --> 00:02:07,260
applications, and cypher text is generated Before the application sends

40
00:02:07,260 --> 00:02:09,710
the message across the network. Now one of the

41
00:02:09,710 --> 00:02:11,920
key questions in the end to end argument is

42
00:02:11,920 --> 00:02:15,550
identifying the ends. The end to end argument says

43
00:02:15,550 --> 00:02:18,210
that the complexity should be implemented at the ends

44
00:02:18,210 --> 00:02:20,910
but not in the middle, but the ends may

45
00:02:20,910 --> 00:02:24,010
vary depending on what the application is. So for

46
00:02:24,010 --> 00:02:28,500
example, if the application or protocol involves Internet routing,

47
00:02:28,500 --> 00:02:32,410
the ends may be routers, or they might be ISPs.

48
00:02:32,410 --> 00:02:36,810
If the application or protocol is a transport

49
00:02:36,810 --> 00:02:40,600
protocol, the ends might be end hosts. So, identifying

50
00:02:40,600 --> 00:02:43,480
the ends in the end-to-end argument is always

51
00:02:43,480 --> 00:02:46,540
a thorny question that you have to answer first.
