1
00:00:00,310 --> 00:00:02,050
Okay.
To get more information on the state of

2
00:00:02,050 --> 00:00:02,840
our memory and

3
00:00:02,840 --> 00:00:06,900
the objects that are taking up space, we
can use a handy tool called Heap Viewer.

4
00:00:06,900 --> 00:00:07,660
Now with Heap Viewer,

5
00:00:07,660 --> 00:00:11,720
you can see how much memory a process
is using at certain points in time.

6
00:00:11,720 --> 00:00:14,880
Now as before, if you want to follow
along, go ahead and start Android Studio

7
00:00:14,880 --> 00:00:17,800
and bring sunshine to the foreground
on your connected device.

8
00:00:17,800 --> 00:00:21,200
In order to start Heap Viewer, you'll
want to start Android Device Monitor

9
00:00:21,200 --> 00:00:23,170
first and
there are a few options to do that.

10
00:00:24,450 --> 00:00:29,690
One way is through the tools menu
where you can click on tools, android,

11
00:00:29,690 --> 00:00:31,830
and android device monitor.

12
00:00:31,830 --> 00:00:35,940
Or, you can click on this nifty android
icon here in your tool bar at the top.

13
00:00:37,020 --> 00:00:39,250
So I'm going to do that and
android device monitor is starting,

14
00:00:40,300 --> 00:00:43,560
then we're going to want to go ahead and
click the DDMS tab.

15
00:00:43,560 --> 00:00:46,340
The heap viewer is one
of the DDMS tools and

16
00:00:46,340 --> 00:00:48,190
we're going to go over here to the left.

17
00:00:48,190 --> 00:00:51,640
And we're going to select
the app we want to profile, so

18
00:00:51,640 --> 00:00:56,300
we're going to select Sunshine now I'm
going to pull up this panel down here.

19
00:00:56,300 --> 00:00:59,782
So once you have Sunshine selected
you're going to want to select this heap

20
00:00:59,782 --> 00:01:01,900
tab to get more information.

21
00:01:01,900 --> 00:01:04,930
Now initially you might not see much,
but you notice this little.

22
00:01:04,930 --> 00:01:09,430
Hint here at the top that reads Heap
updates will happen after every GC for

23
00:01:09,430 --> 00:01:10,750
this client.

24
00:01:10,750 --> 00:01:14,810
Why don't we go ahead and click on this
and cause a GC to update your data.

25
00:01:14,810 --> 00:01:15,450
Whoa, look.

26
00:01:15,450 --> 00:01:18,090
We have all this new information now.

27
00:01:18,090 --> 00:01:21,420
Now the table updated and shows you
what data is currently available and

28
00:01:21,420 --> 00:01:22,720
alive on the Heap.

29
00:01:22,720 --> 00:01:26,440
If you want to get some more details
go ahead and select a single data type.

30
00:01:26,440 --> 00:01:28,640
I'm going to click this class object.

31
00:01:28,640 --> 00:01:32,290
Now you'll see a lot of data will
update in the panel down below.

32
00:01:32,290 --> 00:01:35,500
You can now see a histogram for
the number of allocations and

33
00:01:35,500 --> 00:01:38,480
also the specific memory size for
that data type.

34
00:01:38,480 --> 00:01:40,850
In this case we're talking
about the class object.

35
00:01:40,850 --> 00:01:42,680
Now the heap viewer is
really helpful to see what.

36
00:01:42,680 --> 00:01:46,130
Types of objects your
application has allocated,

37
00:01:46,130 --> 00:01:51,040
as well as how many and
what sizes they are on the heap.

38
00:01:51,040 --> 00:01:54,080
Again here, see we see the total sizes.

39
00:01:54,080 --> 00:01:56,360
Of particular types on our heap.

40
00:01:56,360 --> 00:02:00,970
Like for example there's over 1400
two biter arrays on our heap,

41
00:02:00,970 --> 00:02:03,830
that's taking about 120 kilobytes.

42
00:02:03,830 --> 00:02:07,080
Whereas there are only
27 one byte arrays and

43
00:02:07,080 --> 00:02:10,669
it's roughly only taking
up about two megabytes.

44
00:02:10,669 --> 00:02:13,620
Now the heap viewer is really helpful
to see what types of objects.

45
00:02:13,620 --> 00:02:15,500
You application is allocated.

46
00:02:15,500 --> 00:02:19,420
As well as how many, and
their respective sizes on the heap.

47
00:02:19,420 --> 00:02:22,150
For example, if we look here we

48
00:02:22,150 --> 00:02:26,630
have 27 one byte arrays that are taking
up roughly two megabytes of data.

49
00:02:26,630 --> 00:02:29,710
And then we have about 2000 four

50
00:02:29,710 --> 00:02:34,260
byte arrays that are taking up
currently 228 kilobytes of data.

51
00:02:34,260 --> 00:02:36,720
This information is super helpful
when you're trying to track down

52
00:02:36,720 --> 00:02:37,300
memory leaks.
