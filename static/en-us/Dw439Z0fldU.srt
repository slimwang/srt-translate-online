1
00:00:00,510 --> 00:00:05,110
If you picked any or more or all of

2
00:00:05,110 --> 00:00:08,070
the choices that I gave you, you're not completely

3
00:00:08,070 --> 00:00:11,300
off base. Let me just talk through each of

4
00:00:11,300 --> 00:00:14,150
these choices and why it may be a perfectly

5
00:00:14,150 --> 00:00:17,010
valid choice for the scheduler in picking the next

6
00:00:17,010 --> 00:00:19,282
thread to run on the processor. First come first

7
00:00:19,282 --> 00:00:22,140
search says well, you know there is an, an

8
00:00:22,140 --> 00:00:25,630
order of arrival into the processor, there's a fairness issue,

9
00:00:25,630 --> 00:00:29,140
I'm going to pick the one that became runnable at the

10
00:00:29,140 --> 00:00:32,432
earliest, so there is a first come first serve policy, [INAUDIBLE]

11
00:00:32,432 --> 00:00:35,150
in that. The second is, well somebody paid a lot

12
00:00:35,150 --> 00:00:38,060
of money to run the program, and so I'm going to give

13
00:00:38,060 --> 00:00:41,190
it a priority that it statically assigned with every process

14
00:00:41,190 --> 00:00:43,420
or thread. And I'm going to pick the one that has the

15
00:00:43,420 --> 00:00:47,470
highest priority, so that's also a valid choice. The third possibility

16
00:00:47,470 --> 00:00:50,930
is, a thread's priority is not static. It may be born

17
00:00:50,930 --> 00:00:53,870
with a certain priority, but over time, it

18
00:00:53,870 --> 00:00:56,770
might change. Why might it, might the thread's priority

19
00:00:56,770 --> 00:01:00,490
change over time? Well, for one thing, operating systems

20
00:01:00,490 --> 00:01:05,550
typically tend to give priority to jobs or processes,

21
00:01:05,550 --> 00:01:07,310
or threads what do we even want to

22
00:01:07,310 --> 00:01:10,170
call them that tend to be interactive. That tend

23
00:01:10,170 --> 00:01:12,980
to take a short amount of time on the

24
00:01:12,980 --> 00:01:15,780
CPU and then go off and IO or synchronization.

25
00:01:16,810 --> 00:01:20,250
Those kinds of threads are shortest amount of time that

26
00:01:20,250 --> 00:01:22,860
it takes on the processor, the schedule may want to

27
00:01:22,860 --> 00:01:24,770
boost up the priority of the process and give it

28
00:01:24,770 --> 00:01:27,860
a higher priority, even if it was born with a

29
00:01:27,860 --> 00:01:31,840
smaller static priority. And that maybe a reason why it

30
00:01:31,840 --> 00:01:35,550
might choose a higher dynamic priority. That's a third choice.

31
00:01:35,550 --> 00:01:38,230
And the fourth choice is pick the one whose memory

32
00:01:38,230 --> 00:01:42,770
contents in the CPU cache is likely to be the highest.

33
00:01:42,770 --> 00:01:45,800
What that means is the that thread that has

34
00:01:45,800 --> 00:01:49,500
the cache warn for its working set is likely

35
00:01:49,500 --> 00:01:51,690
to do really well when it gets scheduled on

36
00:01:51,690 --> 00:01:55,500
a processor. And so it makes sense to suggest that

37
00:01:55,500 --> 00:01:58,030
this might be a good choice as well. So,

38
00:01:58,030 --> 00:02:00,460
all of these four choices, one can't argue for

39
00:02:00,460 --> 00:02:04,790
and, for and against. But in this particular lecture,

40
00:02:04,790 --> 00:02:08,130
what we're going to think about is particularly look at this

41
00:02:08,130 --> 00:02:11,900
last choice and that is picking the thread whose memory

42
00:02:11,900 --> 00:02:14,369
contents are likely to be in the CPU cache. Picking

43
00:02:14,369 --> 00:02:16,781
that as a choice, why that makes a lot sense

44
00:02:16,781 --> 00:02:21,337
especially in a multiprocessor, where there's going to be several levels

45
00:02:21,337 --> 00:02:24,151
of caches and, and cohesivenesses and so on and so

46
00:02:24,151 --> 00:02:28,050
forth. We'll discuss more about that in the rest of

47
00:02:28,050 --> 00:02:30,120
this lecture, but I wanted to warm you up with

48
00:02:30,120 --> 00:02:33,940
this particular quiz In which we have all these different choices.

49
00:02:33,940 --> 00:02:37,630
And one can, as I said, argue for or against

50
00:02:37,630 --> 00:02:40,380
every one of these choices, and there are valid arguments

51
00:02:40,380 --> 00:02:42,995
both for and against. But, this is the choice that

52
00:02:42,995 --> 00:02:45,090
we're going to focus on for the rest of this lecture.
