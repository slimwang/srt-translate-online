1
00:00:00,483 --> 00:00:02,823
Now let me show you a bit of code for
the scale and

2
00:00:02,823 --> 00:00:05,106
shear transformations
applied to an image.

3
00:00:05,106 --> 00:00:08,925
The usual preamble of loading
computer vision and numpy, and

4
00:00:08,925 --> 00:00:10,840
wrote reading the image.

5
00:00:10,840 --> 00:00:15,499
And here basically what we do now is
we want to actually be able to apply

6
00:00:15,499 --> 00:00:19,668
a resize scale,
by basically what we're applying is,

7
00:00:19,668 --> 00:00:22,545
transformations in x and y, 1.5.

8
00:00:22,545 --> 00:00:24,144
These are various types of,

9
00:00:24,144 --> 00:00:28,590
additional information we can to our
resize function to be able to scale it.

10
00:00:28,590 --> 00:00:31,270
And that basically allows it to
kind of change the image and

11
00:00:31,270 --> 00:00:32,259
scale the image here.

12
00:00:32,259 --> 00:00:35,040
And I can, of course,
just show the image, by just scaling it.

13
00:00:36,050 --> 00:00:37,100
This one of course if you notice,

14
00:00:37,100 --> 00:00:39,850
I didn't spend time building
a transformation matrix because this

15
00:00:39,850 --> 00:00:42,980
piece of code already takes
care of this kind of stuff.

16
00:00:42,980 --> 00:00:45,230
The next example is where
we can apply a shear or

17
00:00:45,230 --> 00:00:48,120
a skew in the horizontal axis only.

18
00:00:48,120 --> 00:00:49,470
So of course now, for this,

19
00:00:49,470 --> 00:00:54,130
we will create a matrix,
the diagonals are still ones.

20
00:00:54,130 --> 00:00:56,430
We don't want to do any
kind of scaling here.

21
00:00:56,430 --> 00:00:59,220
But of course now I'm applying
in the off diagonal terms,

22
00:00:59,220 --> 00:01:02,550
a small scale in this case,
just in the x direction.

23
00:01:02,550 --> 00:01:04,000
And I've given it a 0.5.

24
00:01:04,000 --> 00:01:06,390
And using that now you've
actually computed a or or

25
00:01:06,390 --> 00:01:08,545
come up with a new
transformation matrix.

26
00:01:08,545 --> 00:01:14,430
You can print it and then apply it using
again our affine, warpAffine function,

27
00:01:14,430 --> 00:01:17,690
take the image, and now here, we
basically just do some different types

28
00:01:17,690 --> 00:01:21,090
of transformations, apply it,
and of course, can see the image.

29
00:01:21,090 --> 00:01:22,620
Let's see what this looks like.

30
00:01:22,620 --> 00:01:25,340
Here is just the printout
of the shear matrix.

31
00:01:25,340 --> 00:01:27,160
This is the original image.

32
00:01:27,160 --> 00:01:29,172
This is the original image scaled by 1,

33
00:01:29,172 --> 00:01:34,180
1.5, that is, basically we've just
added a little bit more size to it.

34
00:01:34,180 --> 00:01:37,780
And this is the output of a shear
transformation where we basically have

35
00:01:37,780 --> 00:01:40,290
applied a 0.5 shear just in
the horizontal direction.
