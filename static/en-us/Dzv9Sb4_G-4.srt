1
00:00:00,000 --> 00:00:04,000
Okay, the next question was about larger applications

2
00:00:04,000 --> 00:00:07,000
where you inherently have to deal with more than one table.

3
00:00:07,000 --> 00:00:11,000
Earlier in the course you mentioned that doing joins was a very bad idea

4
00:00:11,000 --> 00:00:13,000
and could be very expensive.

5
00:00:13,000 --> 00:00:18,000
How do you get around that when you inherently are dealing with difficult types of data.

6
00:00:18,000 --> 00:00:24,000
That's another interesting question, and the answer isn't super simple.

7
00:00:24,000 --> 00:00:28,000
In App Engine you can't do joins, but you can also store complicated objects

8
00:00:28,000 --> 00:00:35,000
that have nest structures, so you can have lists, for example, as a property in your App Engine object.

9
00:00:35,000 --> 00:00:39,000
You can actually get around a lot of the need for joins by using that sort of thing.

10
00:00:39,000 --> 00:00:42,000
But let's say you're just using SQL and you want to scale it across many machines.

11
00:00:42,000 --> 00:00:46,000
Joins are really tough, which means having these foreign relationships

12
00:00:46,000 --> 00:00:49,000
in your database are really tough.

13
00:00:49,000 --> 00:00:52,000
The way it was phrased in the question was basically like do we store data

14
00:00:52,000 --> 00:00:56,000
in multiple places to to avoid multiple queries? The answer is sometimes yes.

15
00:00:56,000 --> 00:01:00,000
Other times you do multiple queries.

16
00:01:00,000 --> 00:01:05,000
What I usually do when I'm writing this sort of thing is I cache the bejesus out of all of my queries.

17
00:01:05,000 --> 00:01:08,000
I try to structure all of my queries to have generally the same structure,

18
00:01:08,000 --> 00:01:13,000
which is look up something by ID or by a few constraints.

19
00:01:13,000 --> 00:01:21,000
For example, if we're loading Reddit's front page, I'll do a query for each of the Reddits

20
00:01:21,000 --> 00:01:24,000
to get the top post in each Reddit, and then I'll merge them,

21
00:01:24,000 --> 00:01:26,000
and that'll be cached.

22
00:01:26,000 --> 00:01:30,000
From them on, I'll just pull from that cache.

23
00:01:30,000 --> 00:01:33,000
Then there's all these extra little properties that link can have per user.

24
00:01:33,000 --> 00:01:37,000
Did you like it? Did you up vote it? Did you down vote it? Did you save it?

25
00:01:37,000 --> 00:01:40,000
Did you submit it. All those things.

26
00:01:40,000 --> 00:01:44,000
I'd probably do another query to a separate table to get all that information for that user

27
00:01:44,000 --> 00:01:47,000
and then I would cache that so that in the future most of that stuff

28
00:01:47,000 --> 00:01:51,000
is just bouncing off memcached.

29
00:01:51,000 --> 00:01:54,000
On the first version of Reddit, we actually did a big join there and it became too slow.

30
00:01:54,000 --> 00:01:59,000
The users table of all this information--uploads and downloads and all that stuff--

31
00:01:59,000 --> 00:02:02,000
moved to its own machine, so we couldn't do joins easily anymore.

32
00:02:02,000 --> 00:02:07,000
Yeah, it turned into multiple queries, sometimes storing extra little pieces of information

33
00:02:07,000 --> 00:02:11,000
in different places, so it makes your writes more expensive and a little bit more complex,

34
00:02:11,000 --> 00:02:16,000
but it makes your reads, while more numerous, simpler and easier to cache.

35
00:02:16,000 --> 00:02:20,000
Because if you keep your queries to key value, those queries are very, very fast,

36
00:02:20,000 --> 00:02:23,000
and they're also very easy to cache.

37
00:02:23,000 --> 00:02:27,000
Just key to value. It mirrors what you're cache is doing.

38
00:02:27,000 --> 00:02:31,000
It's actually a complicated question with a complicated answer.

39
00:02:31,000 --> 00:02:35,000
What you just need to be thinking is what makes sense in that particular situation.

40
00:02:35,000 --> 00:02:40,000
There is certainly a situation where the features is never going to be a big-scale,

41
00:02:40,000 --> 00:02:44,000
and you can just put everything in one database and use joins and do it that way if you want.

42
00:02:44,000 --> 00:02:46,000
You just need to kind of have in mind how big this is going to be

43
00:02:46,000 --> 00:02:49,000
and how many of these decisions do I need to make right now

44
00:02:49,000 --> 00:02:51,000
versus just getting it working.

45
00:02:51,000 --> 00:02:53,000
I hope that helps.

46
00:02:53,000 --> 00:02:58,000
There isn't an easy answer to that because every problem is a little bit different.

47
00:02:58,000 --> 00:03:01,000
Do what works best. Do what works for now.

48
00:03:01,000 --> 00:03:06,000
If you have to scale it later, good luck. Congratulations.
