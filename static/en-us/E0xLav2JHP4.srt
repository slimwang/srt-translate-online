1
00:00:00,450 --> 00:00:05,740
Welcome back, and as before, you have
a rich playground for future reference.

2
00:00:05,740 --> 00:00:08,810
Check it out, we will go through
all the code right here.

3
00:00:08,810 --> 00:00:13,150
So far, it looks like a closure, and is
a function with a few extra features and

4
00:00:13,150 --> 00:00:15,240
a slightly different syntax.

5
00:00:15,240 --> 00:00:17,630
Not so, little grasshopper.

6
00:00:17,630 --> 00:00:21,210
Functions and
closures are exactly the same thing.

7
00:00:21,210 --> 00:00:23,280
They just have a different syntax.

8
00:00:23,280 --> 00:00:29,470
Therefore, all the extras that closures
pack are also available to functions.

9
00:00:29,470 --> 00:00:33,490
Closures and functions are just like
our alter egos for the same thing.

10
00:00:33,490 --> 00:00:35,870
Like Peter Parker and Spiderman.

11
00:00:35,870 --> 00:00:40,280
So the function enclosure that
I'm going to show you right now

12
00:00:40,280 --> 00:00:42,620
are exactly equivalent.

13
00:00:42,620 --> 00:00:44,380
They don't just do the same thing.

14
00:00:44,380 --> 00:00:45,270
Check them out.

15
00:00:45,270 --> 00:00:47,440
They are the same thing.

16
00:00:47,440 --> 00:00:51,287
So we have first a function
that takes an integer and

17
00:00:51,287 --> 00:00:54,428
returns an integer and it adds 42 to it.

18
00:00:54,428 --> 00:00:57,670
And then we have a closure that
does exactly the same thing.

19
00:00:57,670 --> 00:01:00,960
They look equivalent, but actually
they are more than just equivalent.

20
00:01:00,960 --> 00:01:03,300
They are exactly the same thing.

21
00:01:03,300 --> 00:01:08,720
Actually when the compiler finds
a function declaration such as foo

22
00:01:08,720 --> 00:01:11,460
over here,
it will take the following steps.

23
00:01:11,460 --> 00:01:15,670
First of all, create a closure
that takes an integer and

24
00:01:15,670 --> 00:01:17,845
returns 42 + that integer.

25
00:01:17,845 --> 00:01:22,270
And then assign that closure
to a constant called foo.

26
00:01:22,270 --> 00:01:24,180
Sounds familiar, yeah.

27
00:01:24,180 --> 00:01:27,960
That's exactly what you've done here for
bar.

28
00:01:27,960 --> 00:01:32,850
So the bottom line is since functions
and closures are the same thing,

29
00:01:32,850 --> 00:01:36,450
you should use whatever syntax
makes more sense at a given time.

30
00:01:36,450 --> 00:01:40,880
It's up to you to choose which one
you prefer at any given point.

31
00:01:40,880 --> 00:01:44,520
So if closures and functions are exactly
the same thing we should be able to

32
00:01:44,520 --> 00:01:47,270
add functions to a collection,
such as an array,

33
00:01:47,270 --> 00:01:51,710
as we did with the closures in
the previous playground certainly.

34
00:01:51,710 --> 00:01:53,740
So lets give it a try.

35
00:01:53,740 --> 00:01:58,350
I'm going to show you a few functions
and then we'll add them to an array and

36
00:01:58,350 --> 00:02:02,410
iterate through the array, and call
the functions, just as we did before.

37
00:02:02,410 --> 00:02:07,260
So, here we have three functions that
take an integer, and return an integer.

38
00:02:07,260 --> 00:02:09,380
Just like those that we've seen before.

39
00:02:09,380 --> 00:02:13,080
And we're going to add them to an array,
and see if it works.

40
00:02:13,080 --> 00:02:14,600
And it certainly does work.

41
00:02:14,600 --> 00:02:18,720
Here we have the three
functions with in the array.

42
00:02:18,720 --> 00:02:25,270
So could we add the bar closure
over here to this array?

43
00:02:25,270 --> 00:02:26,550
Think about it.

44
00:02:26,550 --> 00:02:27,170
Yes.

45
00:02:27,170 --> 00:02:29,880
They have the same type and
it doesn't matter

46
00:02:29,880 --> 00:02:34,120
if they were defined using the closure
syntax or the functioned one.

47
00:02:34,120 --> 00:02:35,790
Let's add it.

48
00:02:35,790 --> 00:02:38,795
And now we can just call
all those functions and

49
00:02:38,795 --> 00:02:41,118
closures that are inside stooges.

50
00:02:41,118 --> 00:02:46,100
So for, and
again it works exactly as expected.

51
00:02:46,100 --> 00:02:49,790
And we can display it
also as a line graph.

52
00:02:49,790 --> 00:02:51,610
So now I have a question for you.

53
00:02:51,610 --> 00:02:58,550
Could we add the function baz
that is here, to this array?

54
00:02:58,550 --> 00:03:02,770
Think about it, or try it if you must,
but you shouldn't need it by now.
