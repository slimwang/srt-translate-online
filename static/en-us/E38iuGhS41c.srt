1
00:00:00,120 --> 00:00:02,240
But you remember when we were learning HTML and we had to

2
00:00:02,240 --> 00:00:06,330
escape our HTML content so it renders appropriately in the browser? If

3
00:00:06,330 --> 00:00:10,120
not, we covered that in unit two I believe. JSON has, has

4
00:00:10,120 --> 00:00:12,820
a similar issue. So, you know, if we have this little JSON

5
00:00:12,820 --> 00:00:16,320
blob, you have a little dictionary that takes the key story and

6
00:00:16,320 --> 00:00:18,610
maps it to the string once upon a time. You know, this

7
00:00:18,610 --> 00:00:21,910
is valid JSON. Our key is surrounded by double quotes and our

8
00:00:21,910 --> 00:00:25,210
value is surrounded by double quotes. What if we want to include double

9
00:00:25,210 --> 00:00:28,490
quotes in our value? Now if I were to just put a

10
00:00:28,490 --> 00:00:32,200
double quote in here, this would cause an invalid JSON because this

11
00:00:32,200 --> 00:00:34,430
quote actually ends the string, and then we've got a bunch of

12
00:00:34,430 --> 00:00:37,410
garbage after the string. You know, we'd need a comma and another opening

13
00:00:37,410 --> 00:00:40,090
curly brace. You know, all sorts of things. That totally screwed things

14
00:00:40,090 --> 00:00:42,250
up. Let's see what would happen if we tried to use that in

15
00:00:42,250 --> 00:00:45,130
our terminal real quick. So I'm going to take that JSON string

16
00:00:45,130 --> 00:00:50,520
that we just loaded. So this actually works. I'm using our Python string

17
00:00:50,520 --> 00:00:53,950
is actually this whole piece. This is the, this is the

18
00:00:53,950 --> 00:00:57,061
JSON string we're sending in to Python, and it's surrounded by single

19
00:00:57,061 --> 00:01:00,760
quotes. Remember in Python you can use either single quotes or

20
00:01:00,760 --> 00:01:03,760
double quotes to delineate a string, and that's what we're going to

21
00:01:03,760 --> 00:01:05,349
use here. We're going to use single quotes so we can

22
00:01:05,349 --> 00:01:08,830
use double quotes inside the JSON, and that works just fine. And

23
00:01:08,830 --> 00:01:10,820
if I were to do what I just did in the editor,

24
00:01:10,820 --> 00:01:15,950
and replace this p with a quote, let's see what happens. Explosion.

25
00:01:15,950 --> 00:01:19,140
You know, the, the, the, JSON parser didn't like that at

26
00:01:19,140 --> 00:01:21,750
all. The way we get around that is we escape this

27
00:01:21,750 --> 00:01:24,900
quote by putting a slash in front of it. This escapes

28
00:01:24,900 --> 00:01:28,390
the quote in Python, but what this turns into is still basically

29
00:01:28,390 --> 00:01:30,460
the same string we had before, which is just the quote.

30
00:01:30,460 --> 00:01:34,450
I actually have to escape both the slash and the quote

31
00:01:34,450 --> 00:01:38,150
for this to work in Python. So, basically this slash is

32
00:01:38,150 --> 00:01:41,070
the Python escape for this slash, which basically says we are inserting

33
00:01:41,070 --> 00:01:43,160
a slash in the string, and yes, we mean to do that. The

34
00:01:43,160 --> 00:01:47,340
JSON interpreter will see that slash. And say, okay, they must mean to include

35
00:01:47,340 --> 00:01:50,170
this quote. And let's give this a run. There we go. The other way

36
00:01:50,170 --> 00:01:52,960
to do this in Python that's a little simpler, instead of using double slashes,

37
00:01:52,960 --> 00:01:55,290
which is kind of confusing, is, we could put an r in front

38
00:01:55,290 --> 00:01:58,860
of our string, which says, this is a raw string, which basically means, Python,

39
00:01:58,860 --> 00:02:02,510
ignore any escaping we're doing in here for the purposes of Python, and let

40
00:02:02,510 --> 00:02:06,470
the json module interpret this slash however it will. And if we run this,

41
00:02:06,470 --> 00:02:09,389
it also works, with our quote in the value. The answer as

42
00:02:09,389 --> 00:02:12,260
we just saw, if want to include a quote in our value,

43
00:02:12,260 --> 00:02:14,780
is to input a slash in front of it. And that's the

44
00:02:14,780 --> 00:02:17,920
u that we had there before. So we have to escape our quotes

45
00:02:17,920 --> 00:02:20,260
with a slash. This is not a thing if you want to read

46
00:02:20,260 --> 00:02:22,820
in JSON, because we assume that the JSON we're going to be reading

47
00:02:22,820 --> 00:02:26,180
is valid, and if its not valid, our JSON module will tell

48
00:02:26,180 --> 00:02:28,160
us, it, it will throw an exception when we try to read it.
