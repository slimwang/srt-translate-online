1
00:00:00,360 --> 00:00:05,790
In an earlier part of this lesson module, we saw how to build a subsystem

2
00:00:05,790 --> 00:00:11,330
that takes advantage of idle memory in peer nodes on a local area network,

3
00:00:11,330 --> 00:00:17,590
namely, using remote memory as a paging device, instead of the local disk. The

4
00:00:17,590 --> 00:00:20,940
intuition behind that idea was the fact

5
00:00:20,940 --> 00:00:25,470
that networks have gotten faster. And therefore access

6
00:00:25,470 --> 00:00:32,409
to remote memory may be faster than access to an electromechanical local disk.

7
00:00:32,409 --> 00:00:34,820
Continuing with this lesson, we will look

8
00:00:34,820 --> 00:00:37,560
at another way to exploit remote memories,

9
00:00:37,560 --> 00:00:41,160
namely, software implementation of distributed shared

10
00:00:41,160 --> 00:00:44,355
memory. That is, create an operating system

11
00:00:44,355 --> 00:00:47,740
abstraction that provides an illusion of shared

12
00:00:47,740 --> 00:00:50,605
memory to the applications, even though the

13
00:00:50,605 --> 00:00:55,600
nodes in the local area network do not physically share memory. So distributed

14
00:00:55,600 --> 00:00:57,950
shared memory asks the question, if

15
00:00:57,950 --> 00:01:01,370
shared memory makes life simple for application

16
00:01:01,370 --> 00:01:07,330
development in a multiprocessor, can we try to provide that same abstraction

17
00:01:07,330 --> 00:01:11,890
in a distributed system, and make the cluster look like a shared memory machine?
