1
00:00:00,008 --> 00:00:02,610
In the un-marshalling code in contrast,

2
00:00:02,610 --> 00:00:06,740
we take the buffer that's
provided by the network protocol.

3
00:00:06,740 --> 00:00:09,540
And then based on
the procedure descriptor and

4
00:00:09,540 --> 00:00:13,480
the data types that we know are required
for that procedure descriptor,

5
00:00:13,480 --> 00:00:16,670
we parse the rest of the byte
stream from that buffer.

6
00:00:16,670 --> 00:00:21,560
We extract correct number of bytes and
we use those bytes to initialize

7
00:00:21,560 --> 00:00:24,810
data structures that correspond
to the argument types.

8
00:00:24,810 --> 00:00:28,050
As a result of the un-marshal
link process, these I and

9
00:00:28,050 --> 00:00:31,190
J will be allocated somewhere
in the server address space, and

10
00:00:31,190 --> 00:00:34,230
they will be initialized to
values that corresponds to

11
00:00:34,230 --> 00:00:38,260
whatever was placed in the message
that was received by the server.

12
00:00:38,260 --> 00:00:39,812
Now again, the marshal link and

13
00:00:39,812 --> 00:00:43,140
un-marshal link routines aren't
something that the developer

14
00:00:43,140 --> 00:00:47,990
will explicitly have to write, instead
the RPC systems typically include

15
00:00:47,990 --> 00:00:53,250
a special compiler that takes an IDL
specification, a specification that

16
00:00:53,250 --> 00:00:57,900
describes the procedure prototype and
the data types for the arguments.

17
00:00:57,900 --> 00:01:02,770
And from that it generates the marshal
link and the unmarshal link routines

18
00:01:02,770 --> 00:01:06,070
that are used in the steps to
perform these translations.

19
00:01:06,070 --> 00:01:08,870
These routines are also responsible to

20
00:01:08,870 --> 00:01:12,110
generate the appropriate
encoding related actions.

21
00:01:12,110 --> 00:01:15,640
So exactly how will
an array be represented

22
00:01:15,640 --> 00:01:17,770
when its encoded in a byte stream.

23
00:01:17,770 --> 00:01:22,860
That's an example what will take place
in these auto generated routines and

24
00:01:22,860 --> 00:01:25,770
there are other examples of
what constitutes encoding.

25
00:01:25,770 --> 00:01:30,380
For instance, converting
integers like this value i from

26
00:01:30,380 --> 00:01:34,910
one NDN format another NDN format,
like from big NDN to little

27
00:01:34,910 --> 00:01:39,220
NDN depending on what's required by the
server or by the client for the results.

28
00:01:39,220 --> 00:01:43,030
That's an example of a automated
action that would be incorporated

29
00:01:43,030 --> 00:01:44,650
into the marshal encode.

30
00:01:44,650 --> 00:01:49,040
Once this IDL is compiled and all of
the code is generated that provides

31
00:01:49,040 --> 00:01:52,470
the implementation for the marshal
link and un-marshal link routines,

32
00:01:52,470 --> 00:01:55,280
all the developer needs to
do is to take that code and

33
00:01:55,280 --> 00:01:57,360
just to make sure that it links it.

34
00:01:57,360 --> 00:01:59,840
With the program files for
the server, or

35
00:01:59,840 --> 00:02:02,520
the client codes when
generating executables.
