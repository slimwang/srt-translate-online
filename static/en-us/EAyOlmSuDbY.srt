1
00:00:00,360 --> 00:00:02,000
Responsive design.

2
00:00:02,000 --> 00:00:04,089
I know it's fun to resize
your web browser and

3
00:00:04,089 --> 00:00:06,449
see which sites resize gracefully and

4
00:00:06,450 --> 00:00:10,120
which sites remain defiantly large
with gross horizontal scroll bars.

5
00:00:10,119 --> 00:00:12,679
But responsive design is not just for
the web.

6
00:00:12,679 --> 00:00:15,709
Today, the lines between phones and
tablets are disappearing.

7
00:00:15,710 --> 00:00:19,339
So it's important to think about how
your reliable scale in our multi-screen

8
00:00:19,339 --> 00:00:20,250
world.

9
00:00:20,250 --> 00:00:21,660
Don't be overwhelmed.

10
00:00:21,660 --> 00:00:25,600
Just like designing responsive layouts
for the web, build your layouts to be

11
00:00:25,600 --> 00:00:28,350
reasonably flexible for
within a common device size.

12
00:00:28,350 --> 00:00:31,230
Well then you can set break points,
providing alternative layouts for

13
00:00:31,230 --> 00:00:33,219
those various sizes.

14
00:00:33,219 --> 00:00:37,531
Think about it this way,
small phone, large phone,

15
00:00:37,531 --> 00:00:41,529
medium tablet, and large tablet.

16
00:00:41,530 --> 00:00:44,109
FrameLayout, LinearLayout and
ConstraintLayout,

17
00:00:44,109 --> 00:00:47,899
are three of the most common layouts
you'll use when building up your UI.

18
00:00:47,899 --> 00:00:51,369
And these all descent for the view
group class, designed to contained and

19
00:00:51,369 --> 00:00:52,724
give order to child views.

20
00:00:52,725 --> 00:00:56,237
They each of their strengths and you
should always try to use the simplest

21
00:00:56,237 --> 00:00:58,539
layout that will get the job done.

22
00:00:58,539 --> 00:01:02,479
Frame layout is great for simple layouts
when you only have one child view,

23
00:01:02,479 --> 00:01:05,369
like a list view that fills
the entire content area.

24
00:01:05,370 --> 00:01:08,219
If you add multiple items to it,
they overlap.

25
00:01:08,219 --> 00:01:11,920
You can tell it to position other views
relative to itself such as in the upper

26
00:01:11,920 --> 00:01:13,870
right hand corner or
lower left hand corner.

27
00:01:15,180 --> 00:01:16,319
Linear loud is perfect for

28
00:01:16,319 --> 00:01:19,129
stacking views vertically or
horizontally one after another.

29
00:01:19,129 --> 00:01:22,478
It also has powerful features to
breakup the display proportionally.

30
00:01:23,912 --> 00:01:28,780
Constraint layout is powerful, but a bit
more complicated compared to the others.

31
00:01:28,780 --> 00:01:31,224
Throw bunch of views inside
a constraint layout,

32
00:01:31,224 --> 00:01:34,481
then you can figure each view's
position relative to the parent,

33
00:01:34,481 --> 00:01:38,700
the constraint layout, or the sibling
views, tons of possibilities.

34
00:01:38,700 --> 00:01:42,082
We'll explore these layouts in greater
detail when we build more complex

35
00:01:42,081 --> 00:01:42,579
screens.

