1
00:00:00,210 --> 00:00:02,460
What does each node in the distributed

2
00:00:02,460 --> 00:00:06,220
system know? Every node knows its own events,

3
00:00:06,220 --> 00:00:08,660
meaning, what are the computational events that are

4
00:00:08,660 --> 00:00:12,380
happening in its own execution. It also knows

5
00:00:12,380 --> 00:00:15,710
about its communication events with the rest

6
00:00:15,710 --> 00:00:18,300
of the nodes in the distributed system. So,

7
00:00:18,300 --> 00:00:21,570
for instance, if this process Pi sends a

8
00:00:21,570 --> 00:00:25,280
message to process Pj, that's a send event.

9
00:00:25,280 --> 00:00:30,280
Pi knows about that. And similarly Pj when it gets this event, it's a

10
00:00:30,280 --> 00:00:35,850
receive event. It knows about that. So, these are the only two kinds of events

11
00:00:35,850 --> 00:00:38,530
that every node knows about, its own

12
00:00:38,530 --> 00:00:42,080
computational events, and its communication events with its

13
00:00:42,080 --> 00:00:45,400
peers. For instance, process Pj has no

14
00:00:45,400 --> 00:00:49,810
idea about the local computational events of Pi.

15
00:00:49,810 --> 00:00:53,670
Lamport's logical clock builds on this very simple

16
00:00:53,670 --> 00:00:56,130
idea, and the idea is that we want to

17
00:00:56,130 --> 00:00:59,120
associate a timestamp with every one of the

18
00:00:59,120 --> 00:01:02,970
events that are happening in every process in the

19
00:01:02,970 --> 00:01:05,019
entire distributed system. How are we going to

20
00:01:05,019 --> 00:01:08,334
do that? Well, we're going to have a local

21
00:01:08,334 --> 00:01:12,310
clock, Ci over here, And Cj over here. And

22
00:01:12,310 --> 00:01:15,480
this local clock can be anything, can be counter,

23
00:01:15,480 --> 00:01:18,010
it can be a simple counter and what we

24
00:01:18,010 --> 00:01:20,740
are doing is when I want to associate a timestamp

25
00:01:20,740 --> 00:01:23,240
with a particular event that's happening in my process what

26
00:01:23,240 --> 00:01:25,100
I'm going to do is I'm going to look at

27
00:01:25,100 --> 00:01:30,660
this counter and see what the value of the counter is, associate that counter

28
00:01:30,660 --> 00:01:35,635
value as a timestamp for this event A. So for this instance here I've said that

29
00:01:35,635 --> 00:01:41,040
timestamp for a is two. And this counter monotonically increases

30
00:01:41,040 --> 00:01:44,240
as we pile up events in our system. So

31
00:01:44,240 --> 00:01:48,090
once I've associated this timestamp two with this event

32
00:01:48,090 --> 00:01:51,050
a, I cannot associate the same timestamp with other

33
00:01:51,050 --> 00:01:53,730
meaningful events that are happening in my process. And

34
00:01:53,730 --> 00:01:57,530
therefore, I'll increment the timestamp. It's completely up to

35
00:01:57,530 --> 00:02:02,050
your implementation as to whether you want to increase

36
00:02:02,050 --> 00:02:04,360
this counter value by one, or two, by a

37
00:02:04,360 --> 00:02:06,220
thousand, it doesn't really matter. So, in this case

38
00:02:06,220 --> 00:02:10,810
for instance I've incremented the timestamp counter by two,

39
00:02:10,810 --> 00:02:12,180
and so the next even that I'm going to

40
00:02:12,180 --> 00:02:14,454
have in my process B is going to have

41
00:02:14,454 --> 00:02:17,130
a timestamp of 4. So that's the idea behind

42
00:02:17,130 --> 00:02:22,520
having a monotonically increasing counter to associate logical timestamps

43
00:02:22,520 --> 00:02:25,850
with the events that are happening in my process.

44
00:02:25,850 --> 00:02:29,000
Now, what about these communication events? Well, in particular,

45
00:02:29,000 --> 00:02:32,446
let's look at this case here. A is a communication

46
00:02:32,446 --> 00:02:36,230
event on process Pi. And this communication event

47
00:02:36,230 --> 00:02:38,910
is going to have a timestamp of two associated

48
00:02:38,910 --> 00:02:40,910
with it, because that's the time that I

49
00:02:40,910 --> 00:02:44,720
generated this communication event, sent this message over. Comes

50
00:02:44,720 --> 00:02:48,376
over to process Pj. When process Pj receives

51
00:02:48,376 --> 00:02:51,490
this, that's an event. And so let's say we

52
00:02:51,490 --> 00:02:54,150
call it event number d. And we have

53
00:02:54,150 --> 00:02:57,570
to associate now a timestamp with, with event d.

54
00:02:57,570 --> 00:02:59,334
How do I go about assigning a timestamp with

55
00:02:59,334 --> 00:03:03,436
this? Well, we know that this timestamp that I'm going

56
00:03:03,436 --> 00:03:06,258
to associate with this event d, has to be

57
00:03:06,258 --> 00:03:10,408
greater than the timestamp associated with the send of that

58
00:03:10,408 --> 00:03:13,730
message, right? Obviously you cannot receive a message that

59
00:03:13,730 --> 00:03:16,346
has not been sent yet. And therefore, we're going to

60
00:03:16,346 --> 00:03:19,120
say that d should have a timestamp which is

61
00:03:19,120 --> 00:03:22,600
at least greater than a for sure. Now, what else

62
00:03:22,600 --> 00:03:26,030
does d depend on? Well, it depends on other things

63
00:03:26,030 --> 00:03:28,540
that are happening in my own process. For that, I

64
00:03:28,540 --> 00:03:31,510
need to know what the current state of my local

65
00:03:31,510 --> 00:03:35,280
counter is. So for instance, in my execution as I'm showing

66
00:03:35,280 --> 00:03:39,150
you here I haven't done anything meaningful yet and therefore

67
00:03:39,150 --> 00:03:42,400
my local counter is still pointing to zero indicating that

68
00:03:42,400 --> 00:03:44,950
there have been no meaningful events here. So when this

69
00:03:44,950 --> 00:03:47,990
message comes, that's the first time I'm going to do something

70
00:03:47,990 --> 00:03:50,380
meaningful in this process. And I have to associate

71
00:03:50,380 --> 00:03:53,670
a timestamp with d but I cannot associate the timestamp

72
00:03:53,670 --> 00:03:56,460
of zero with it because the timestamp that I associate

73
00:03:56,460 --> 00:03:59,510
with d has got to be greater than the timestamp

74
00:03:59,510 --> 00:04:04,130
that is associated with the send event on process Pi.

75
00:04:04,130 --> 00:04:07,450
And since the send event has this timestamp two, I

76
00:04:07,450 --> 00:04:09,900
have to associate something higher than that. And so I

77
00:04:09,900 --> 00:04:13,380
associate a timestamp three, with the receipt of this message.

78
00:04:13,380 --> 00:04:16,300
That is, this particular event is going to have

79
00:04:16,300 --> 00:04:20,660
a timestamp of, of three. So, the two conditions that

80
00:04:20,660 --> 00:04:24,260
we have talked about. One is that events that are

81
00:04:24,260 --> 00:04:27,670
happening in the same process I'm going to have a monotonically

82
00:04:27,670 --> 00:04:31,145
increasing counter and I'm going to use that to associate

83
00:04:31,145 --> 00:04:33,770
timestamps with the events that are happening in the same

84
00:04:33,770 --> 00:04:36,335
process. That's the first thing. That is if I have

85
00:04:36,335 --> 00:04:39,870
two events a and b in the same process and

86
00:04:39,870 --> 00:04:44,040
I know that a happened before b, because, textually,

87
00:04:44,040 --> 00:04:46,720
in the process because the process is sequential, a

88
00:04:46,720 --> 00:04:50,390
happened before b and therefore the condition is that

89
00:04:50,390 --> 00:04:54,060
the timestamp associated with a has got to be less

90
00:04:54,060 --> 00:04:57,020
than the timestamp associated with b. Pretty straightforward. And

91
00:04:57,020 --> 00:04:59,630
similarly the second condition is that if I have

92
00:04:59,630 --> 00:05:02,310
two events, a and b, and a happens to

93
00:05:02,310 --> 00:05:05,040
be a send event on some process and d happens

94
00:05:05,040 --> 00:05:08,060
to be the receive event on another process then

95
00:05:08,060 --> 00:05:10,810
we know that the receive event has to be

96
00:05:10,810 --> 00:05:13,730
after the send event. And therefore the second condition

97
00:05:13,730 --> 00:05:17,460
is that Ci(a), that is a timestamp associated with

98
00:05:17,460 --> 00:05:19,990
a send event, has got to be less than

99
00:05:19,990 --> 00:05:22,640
the timestamp associated with the receipt of the same

100
00:05:22,640 --> 00:05:26,940
message, Cj(d). So in order to make this condition,

101
00:05:26,940 --> 00:05:30,113
the second condition, valid, we're going to choose the

102
00:05:30,113 --> 00:05:33,140
timestamp to associate with the receipt of a message

103
00:05:33,140 --> 00:05:36,990
d as the max of the timestamp that is

104
00:05:36,990 --> 00:05:41,380
associated with the send event incremented by some quantity.

105
00:05:41,380 --> 00:05:44,480
Ci(a) plus plus. So in this case, it happens

106
00:05:44,480 --> 00:05:48,625
to be two. So increment it and then say three and then you want to know what the

107
00:05:48,625 --> 00:05:52,000
local counter is saying. So, Cj, so what we

108
00:05:52,000 --> 00:05:55,250
pick as a timestamp to associate with d is

109
00:05:55,250 --> 00:05:58,780
the max of the incoming timestamp with the

110
00:05:58,780 --> 00:06:01,620
message and the local counter, whatever it is

111
00:06:01,620 --> 00:06:03,960
pointing to. So that's how I'll pick the

112
00:06:03,960 --> 00:06:07,530
timestamp to associate with a receive event. This brings

113
00:06:07,530 --> 00:06:09,490
up a very interesting question and that is,

114
00:06:09,490 --> 00:06:12,530
what about timestamps of events are happening concurrently in

115
00:06:12,530 --> 00:06:14,900
a distributed system, and before I talk about

116
00:06:14,900 --> 00:06:16,880
that, I want to give you a little quiz.
