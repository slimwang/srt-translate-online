1
00:00:00,000 --> 00:00:03,000
How much more work would we have to do to turn our course projects

2
00:00:03,000 --> 00:00:06,000
into something more like the web browsers we use everyday?

3
00:00:06,000 --> 00:00:13,000
That is a nice question, and it's great to see students enthusiastic about extending the course project.

4
00:00:13,000 --> 00:00:17,000
To get the key ideas across in the amount of time given,

5
00:00:17,000 --> 00:00:21,000
we restricted attention in the course project to building a static web browser

6
00:00:21,000 --> 00:00:25,000
like the sort of web browser you'd see on an electronic book reader

7
00:00:25,000 --> 00:00:30,000
not particularly interactive, more concerns with downloading the web page and rendering it.

8
00:00:30,000 --> 00:00:35,000
Let say though that we wanted to work on the project in our spare time and extend it

9
00:00:35,000 --> 00:00:38,000
to become something a little more interactive.

10
00:00:38,000 --> 00:00:43,000
If you're interested in that, I would encourage you to look at two old-styled web browsers,

11
00:00:43,000 --> 00:00:50,000
Elinks and Mosaic, the precursor to Netscape or Firefox.

12
00:00:50,000 --> 00:00:53,000
Elinks is an old text-based web browser.

13
00:00:53,000 --> 00:00:57,000
Mosaic was one of the first visual web browsers.

14
00:00:57,000 --> 00:01:02,000
Take a look at those and see the sorts of user interface options that they offer

15
00:01:02,000 --> 00:01:06,000
to get an idea for what the bare minimum is for working web browser.

16
00:01:06,000 --> 00:01:10,000
Let say though that we want to do it together.

17
00:01:10,000 --> 00:01:17,000
In my mind, the first step would be to add the ability to have the user click on links.

18
00:01:17,000 --> 00:01:22,000
We can already read in a web page. We can already render it out to a nice image.

19
00:01:22,000 --> 00:01:25,000
Let's say, though, that we didn't worry about back buttons.

20
00:01:25,000 --> 00:01:27,000
We're not worrying about bookmarks. No cookies.

21
00:01:27,000 --> 00:01:29,000
Nothing fun like that. No foreign input.

22
00:01:29,000 --> 00:01:35,000
We just want the user to be able to navigate around the web by clicking on links. How do we do it?

23
00:01:35,000 --> 00:01:40,000
Well, right now our web browser is more of a batch processor.

24
00:01:40,000 --> 00:01:44,000
You give an input to web page, and it produces the image and then it's done.

25
00:01:44,000 --> 00:01:47,000
We want to add a little loop at the bottom that said

26
00:01:47,000 --> 00:01:52,000
"Wait for user input. Wait for the user to click on the screen."

27
00:01:52,000 --> 00:01:56,000
And let's imagine that through our GLE library or our graphics library

28
00:01:56,000 --> 00:02:00,000
or through talking to the operating system or the windowing system,

29
00:02:00,000 --> 00:02:05,000
we would receive some sort of notification whenever the user clicks in our window

30
00:02:05,000 --> 00:02:09,000
and probably we get information like the X and Y coordinate of the mouse click

31
00:02:09,000 --> 00:02:12,000
and whether or not it was a left or right click.

32
00:02:12,000 --> 00:02:20,000
So we need to build up some sort of mapping from locations on the screen

33
00:02:20,000 --> 00:02:26,000
to whether or not they correspond to href tags, links, the text displayed underneath them,

34
00:02:26,000 --> 00:02:30,000
and we could do that while we were displaying the text on the screen.

35
00:02:30,000 --> 00:02:33,000
If it's mostly images up here but then suddenly there is a link in the middle,

36
00:02:33,000 --> 00:02:39,000
we want to remember, by the way about half way down the page, if the user clicks there,

37
00:02:39,000 --> 00:02:42,000
it's a link, and we should know where to go next.

38
00:02:42,000 --> 00:02:48,000
How do we know where to go next? That's just the href argument from that particular tag.

39
00:02:48,000 --> 00:02:51,000
We already got that information at the lecture level.

40
00:02:51,000 --> 00:02:54,000
We passed it to the parser, and we have it when we're interpreting.

41
00:02:54,000 --> 00:02:57,000
We just stored in some sort of mapping off to the side.

42
00:02:57,000 --> 00:03:03,000
Let's imagine that the user clicks. We check our little page to link mapping.

43
00:03:03,000 --> 00:03:08,000
If the user is clicking in the margins or in the white space off to the side, we don't do anything.

44
00:03:08,000 --> 00:03:14,000
But if the user is clicking in an area corresponding to a link, we fetch the value of the target location.

45
00:03:14,000 --> 00:03:19,000
We say "Oh, it's something like http.google.com.index.html."

46
00:03:19,000 --> 00:03:24,000
And we open up a network connection in order to fetch that web page.

47
00:03:24,000 --> 00:03:28,000
If you took CS101 at Udacity, you may remember how to do that.

48
00:03:28,000 --> 00:03:31,000
But if not, it does not take that long to pick it up.

49
00:03:31,000 --> 00:03:35,000
And ultimately, we'd end up getting out a new string, a new file,

50
00:03:35,000 --> 00:03:38,000
corresponding to the contents of that web page,

51
00:03:38,000 --> 00:03:42,000
" Welcome to my web page", that sort of thing.

52
00:03:42,000 --> 00:03:48,000
Then we just call ourselves again and render that new web page and display it on the screen

53
00:03:48,000 --> 00:03:54,000
and then refresh our little mapping off to the side that maps screen coordinates to links.

54
00:03:54,000 --> 00:03:59,000
And if we have this kind of power, then the user could click and navigate their way through the web

55
00:03:59,000 --> 00:04:02,000
and then maybe eventually we want to add things like back button,

56
00:04:02,000 --> 00:04:10,000
which would just require us to store lists, even lists of strings, of places the user had visited previously.

57
00:04:10,000 --> 00:04:16,000
You can imagine starting to add abilities like clicking to navigate through the web,

58
00:04:16,000 --> 00:04:21,000
going backwards, going forwards again to the framework that we've already set up.

59
00:04:21,000 --> 00:04:24,000
And it would be pretty much as simple as adding a controlled loop

60
00:04:24,000 --> 00:04:28,000
to the bottom of our existing batch web browser.

61
00:04:28,000 --> 00:04:32,000
Now, let me give an idea of something a little more complicated under the hood

62
00:04:32,000 --> 00:04:38,000
The graphics library that we are using to lay out text actually does a pretty good job of--

63
00:04:38,000 --> 00:04:40,000
if you're saying a lot of words, "Welcome to my web page,"

64
00:04:40,000 --> 00:04:45,000
eventually will reach the end of the screen, and it will wrap over to the next line.

65
00:04:45,000 --> 00:04:48,000
Just like the word processor or a normal web browser.

66
00:04:48,000 --> 00:04:51,000
You might wonder, how do I do that?

67
00:04:51,000 --> 00:04:57,000
If I know the pages 18 inches wide, and I have a lot of text, and I know how big the font is.

68
00:04:57,000 --> 00:05:00,000
It's a 12 point font all of the letters to this wide.

69
00:05:00,000 --> 00:05:03,000
How do I figure out how many words to put on the first line?

70
00:05:03,000 --> 00:05:06,000
How many words to put on the second line? That sort of thing.

71
00:05:06,000 --> 00:05:09,000
That problem is called the word wrapping problem

72
00:05:09,000 --> 00:05:12,000
or perhaps more formerly the minimum ruggedness word wrapping problem.

73
00:05:12,000 --> 00:05:18,000
And it turns out that the human eye prefers column layouts that are not rugged on the side.

74
00:05:18,000 --> 00:05:21,000
You don't want it to be over or under--that kind of thing.

75
00:05:21,000 --> 00:05:25,000
Instead you want nice, even columns like a newspaper

76
00:05:25,000 --> 00:05:27,000
or like a magazine article that looks more pleasing to the eye.

77
00:05:27,000 --> 00:05:32,000
Well, in an incredible surprise move, it turns out that we can solve this problem using--

78
00:05:32,000 --> 00:05:35,000
guess it--dynamic programming, memoization.

79
00:05:35,000 --> 00:05:38,000
There is a mathematical equation you can write down

80
00:05:38,000 --> 00:05:42,000
that sort of penalizes you for not having smooth columns

81
00:05:42,000 --> 00:05:47,000
and then we can try a bunch of different layouts--which words I put on which lines--

82
00:05:47,000 --> 00:05:51,000
and just memorize their "badness" values, how ugly they would look to the human eye.

83
00:05:51,000 --> 00:05:55,000
And at the end of the day, we just take the one that looks the least ugly.

84
00:05:55,000 --> 00:05:59,000
And it turns out that that's actually how professional typesetting pieces of software

85
00:05:59,000 --> 00:06:03,000
like LaTeX or Microsoft Word solved this problem.

86
00:06:03,000 --> 00:06:07,000
We want to do some of those things under the hood to make our output look good,

87
00:06:07,000 --> 00:06:12,000
and we want to add support for things like clicking and following mouse clicks to navigate the web.

88
00:06:12,000 --> 00:06:15,000
But ultimately, we are pretty much there with having a web browser

89
00:06:15,000 --> 00:06:21,000
that similar to some of the earliest historical web browsers like ELinks and Mosaic.
