1
00:00:00,370 --> 00:00:04,240
In our introductory lecture on threads and concurrency, we talked about the fact

2
00:00:04,240 --> 00:00:08,029
that threads can be implemented at the kernel level, at the user level, or both.

3
00:00:09,140 --> 00:00:12,940
In this lesson we will re-visit that statement and see what it is that is

4
00:00:12,940 --> 00:00:17,510
necessary in terms of data structures and mechanisms from the operating system.

5
00:00:17,510 --> 00:00:18,190
In order for

6
00:00:18,190 --> 00:00:21,370
us to be able to implement threads at both the kernel and the user level.

7
00:00:22,550 --> 00:00:23,600
During this discussion,

8
00:00:23,600 --> 00:00:27,650
we will also look at two notification mechanisms that are supported by OSs.

9
00:00:27,650 --> 00:00:31,160
And that includes interrupts and signals.

10
00:00:31,160 --> 00:00:33,500
To make the discussion in this lecture more concrete,

11
00:00:33,500 --> 00:00:35,230
we will use two older papers,

12
00:00:35,230 --> 00:00:40,230
the Eykholt paper Beyond Multiprocessing: Multithreading the Sun OS Kernel and

13
00:00:40,230 --> 00:00:43,140
the Stein and Shah paper on implementing lightweight threads.

14
00:00:44,390 --> 00:00:48,460
These are older papers, but they provide us with some historic information on

15
00:00:48,460 --> 00:00:51,430
how threading systems evolved over time.

16
00:00:51,430 --> 00:00:54,920
There are links to both of these papers in the Instructor's Notes.

17
00:00:54,920 --> 00:00:58,510
We will end this lecture with a brief summary of the current threading model in

18
00:00:58,510 --> 00:00:59,750
the Linux operating system.
