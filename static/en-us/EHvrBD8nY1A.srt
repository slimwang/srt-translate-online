1
00:00:00,000 --> 00:00:04,000
With all of that in mind, let's encode our finite state machine in Python.

2
00:00:04,000 --> 00:00:08,000
Here I've redrawn our finite state machine for "a+1+",

3
00:00:08,000 --> 00:00:12,000
and we said before that we were going to make the edges a mapping or a dictionary.

4
00:00:12,000 --> 00:00:20,000
Well, one of our edges is at state 1 on 'a.' State 1 on input 'a' goes to state 2.

5
00:00:20,000 --> 00:00:24,000
And another one is at state 2 on 'a' stays in state 2.

6
00:00:24,000 --> 00:00:25,000
That's our self-loop.

7
00:00:25,000 --> 00:00:29,000
If we were on state 2 and we see a 1, we go to state 3.

8
00:00:29,000 --> 00:00:32,000
State 3 on 1 stays the same.

9
00:00:32,000 --> 00:00:33,000
Let me just highlight one of these.

10
00:00:33,000 --> 00:00:42,000
This particular edge from 2 to 3 on 1 corresponds to this entry in our edges mapping.

11
00:00:42,000 --> 00:00:45,000
I also need to know which states are the accepting states.

12
00:00:45,000 --> 00:00:48,000
Previously, I denoted that by drawing double lines,

13
00:00:48,000 --> 00:00:50,000
but again we can't pass a picture into Python, so I'll just make a list

14
00:00:50,000 --> 00:00:52,000
of all the things it accepts.

15
00:00:52,000 --> 00:00:54,000
Then actually that's it.

16
00:00:54,000 --> 00:00:56,000
You'd think we'd need a list of nodes, but you're going to see that we're actually

17
00:00:56,000 --> 00:01:01,000
able to finesse it because all the nodes we really care about

18
00:01:01,000 --> 00:01:03,000
already appear in this edges listing.

19
00:01:03,000 --> 00:01:06,000
So here we are writing our finite state machine simulator,

20
00:01:06,000 --> 00:01:10,000
and this is actually super exciting because it previews one of the concepts

21
00:01:10,000 --> 00:01:13,000
that we're going to have later in the course--interpreting another program.

22
00:01:13,000 --> 00:01:16,000
It's like the junior grade version of it, even this will be a lot of fun.

23
00:01:16,000 --> 00:01:22,000
So together, we're going to write a procedure called fsmsim for FSM simulation,

24
00:01:22,000 --> 00:01:24,000
finite state machine simulator.

25
00:01:24,000 --> 00:01:30,000
You pass in the input string, the start state or the current state, the edges,

26
00:01:30,000 --> 00:01:34,000
and the accepting states, and it returns true if that string is accepted

27
00:01:34,000 --> 00:01:36,000
by the finite state machine and false otherwise.

28
00:01:36,000 --> 00:01:38,000
We'll do it together.

29
00:01:38,000 --> 00:01:43,000
Submit via the interpreter--I'll write the first half of this procedure with you.

30
00:01:43,000 --> 00:01:46,000
So let's get started on our finite state machine simulation quiz.

31
00:01:46,000 --> 00:01:51,000
Here I'm just recopying the edges definition so that we'll have a test input to work with.

32
00:01:51,000 --> 00:01:55,000
These 2--the edges and the accepting state--correspond to the regular expression

33
00:01:55,000 --> 00:02:00,000
"a+1+", and now we're going to define our procedure, finite state machine simulator

34
00:02:00,000 --> 00:02:05,000
given a string, the current state, the edges--these ones up here--and the accepting state.

35
00:02:05,000 --> 00:02:06,000
What do we do?

36
00:02:06,000 --> 00:02:10,000
Well, one possibility is that we're already at the end of the input,

37
00:02:10,000 --> 00:02:14,000
at which point we should just check to see if our current state is an accepting state or not.

38
00:02:14,000 --> 00:02:18,000
If we're at the end of the input and we are state 3, then we return true.

39
00:02:18,000 --> 00:02:20,000
Otherwise, we should be returning false.

40
00:02:20,000 --> 00:02:26,000
If the string isn't empty, then I can get the current letter as the 0th position from the string.

41
00:02:26,000 --> 00:02:27,000
And now, here's your part.

42
00:02:27,000 --> 00:02:30,000
We know the current input letter we're looking at,

43
00:02:30,000 --> 00:02:33,000
the current state we're in, all of the edges are available to us--

44
00:02:33,000 --> 00:02:36,000
you fill out the rest of this code.

45
00:02:36,000 --> 00:02:37,000
Here's a hint.

46
00:02:37,000 --> 00:02:42,000
Find out if there's a valid edge leaving from this state on this letter.

47
00:02:42,000 --> 00:02:45,000
If there is, you should take that edge and keep walking.

48
00:02:45,000 --> 00:02:49,000
If there is not, we fall off the end of the finite state machine and die,

49
00:02:49,000 --> 00:02:50,000
so you should return false.

50
00:02:50,000 --> 00:02:54,000
And the big hint for you is recursion, which is always the hint in computer science

51
00:02:54,000 --> 00:02:56,000
because it's the secret of all power and knowledge in the universe.

52
00:02:56,000 --> 00:02:58,000
Recursion, use it.

53
00:02:58,000 --> 00:03:00,000
Oh, and I can't even spell it!

54
00:03:00,000 --> 99:59:59,999
Alright, recursion. You should use it and spell it correctly, unlike me.
