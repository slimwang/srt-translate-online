1
00:00:00,000 --> 00:00:02,200
And there's 2 correct answers here.

2
00:00:02,200 --> 00:00:06,080
The first one is that the size of this huge Boolean formula here

3
00:00:06,080 --> 00:00:08,910
is polynomial in n, and I will show you why.

4
00:00:08,910 --> 00:00:13,350
First of all, how large is each one of these formulas that we're building?

5
00:00:13,350 --> 00:00:17,100
Well, there's a constant number of variables

6
00:00:17,100 --> 00:00:19,300
and as I showed you before,

7
00:00:19,300 --> 00:00:22,720
if you want to ensure that for a constant number of variables,

8
00:00:22,720 --> 00:00:24,960
only exactly one of them

9
00:00:24,960 --> 00:00:26,510
can be set to true,

10
00:00:26,510 --> 00:00:28,390
then the resulting formula

11
00:00:28,390 --> 00:00:31,830
is about the square of the number of variables that you have

12
00:00:31,830 --> 00:00:33,930
and since we have a constant number of variables,

13
00:00:33,930 --> 00:00:39,010
each formula here is about the size of the square of that constant,

14
00:00:39,010 --> 00:00:41,170
so we have--

15
00:00:41,170 --> 00:00:45,080
it's kind of O of c squared, and c does not depend on the size of the inputs,

16
00:00:45,080 --> 00:00:49,860
so in a way, we can even write this as O of 1.

17
00:00:49,860 --> 00:00:52,870
Now we have a polynomial number

18
00:00:52,870 --> 00:00:55,100
of these Boolean formulas,

19
00:00:55,100 --> 00:00:58,740
so we have a polynomial n times the constant;

20
00:00:58,740 --> 00:01:00,690
this is again a polynomial of n,

21
00:01:00,690 --> 00:01:03,040
so we're fine on this side here.

22
00:01:03,040 --> 00:01:06,150
We're also fine on this side here, because the formulas again are

23
00:01:06,150 --> 00:01:08,300
of constant size;

24
00:01:08,300 --> 00:01:10,300
it can, of course, be a huge size,

25
00:01:10,300 --> 00:01:14,070
especially if you have a system that can carry very large variables,

26
00:01:14,070 --> 00:01:16,120
but nevertheless, it's a constant size,

27
00:01:16,120 --> 00:01:19,370
and that's all we care about; it does not depend on the size of the input,

28
00:01:19,370 --> 00:01:22,420
and we have a polynomial number of them again here.

29
00:01:22,420 --> 00:01:27,550
And finally, the code also has a constant number of lines,

30
00:01:27,550 --> 00:01:31,010
and so the Boolean formula resulting from that

31
00:01:31,010 --> 00:01:33,550
will also have constant size,

32
00:01:33,550 --> 00:01:35,760
so overall, this huge formula here

33
00:01:35,760 --> 00:01:38,880
has a size that is polynomial in n.

34
00:01:38,880 --> 00:01:41,530
Does this formula have only one satisfying assignment?

35
00:01:41,530 --> 00:01:45,640
No, it doesn't; it has a huge number of satisfying assignments,

36
00:01:45,640 --> 00:01:48,030
but each of those satisfying assginments

37
00:01:48,030 --> 00:01:52,460
will ensure that exactly one of the variables here is set to true and so on,

38
00:01:52,460 --> 00:01:54,950
and this gives us the third property,

39
00:01:54,950 --> 00:01:57,800
which means that this satisfying assignment

40
00:01:57,800 --> 00:02:01,920
defines a snapshot, because it will tell you exactly what's in this memory cell here

41
00:02:01,920 --> 00:02:04,180
and so on.

42
00:02:04,180 --> 00:02:06,780
It will tell you exactly where the program is at

43
00:02:06,780 --> 00:02:09,430
and it will also tell you exactly

44
00:02:09,430 --> 00:02:11,460
what's here in this memory.

45
00:02:11,460 --> 00:02:13,180
And once we have this,

46
00:02:13,180 --> 00:02:16,680
you have actually completed the most difficult step of this unit

47
00:02:16,680 --> 00:02:18,290
in my mind,

48
00:02:18,290 --> 00:02:20,670
and we are now ready to show that

49
00:02:20,670 --> 99:59:59,999
sat is np complete.
