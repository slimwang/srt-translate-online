1
00:00:00,460 --> 00:00:02,950
Let's get started with
the serial version.

2
00:00:02,950 --> 00:00:07,650
First of all, we have the three
ID actions, synchronousDownload,

3
00:00:07,650 --> 00:00:11,110
this is the first button,
simpleasynchronousDownload,

4
00:00:11,110 --> 00:00:12,940
this is the second button.

5
00:00:12,940 --> 00:00:15,120
And asynchronousDownload.

6
00:00:15,120 --> 00:00:19,840
This is the one that will
use completion block.

7
00:00:19,840 --> 00:00:22,580
So let's get started
with a synchronous one.

8
00:00:22,580 --> 00:00:25,400
And we need to do four steps.

9
00:00:25,400 --> 00:00:29,620
These are the four steps that we need
in order to download this image.

10
00:00:29,620 --> 00:00:33,850
So first of all,
we need to get the URL for the image.

11
00:00:33,850 --> 00:00:40,790
Then once we have the URL, we will need
to obtain the NS data for the image.

12
00:00:40,790 --> 00:00:43,380
And we don't really care for NS data.

13
00:00:43,380 --> 00:00:45,560
What we really need is a UI image.

14
00:00:45,560 --> 00:00:48,720
So we have to turn this
NS data into a UI image.

15
00:00:48,720 --> 00:00:51,410
And finally, we're going to display it.

16
00:00:51,410 --> 00:00:54,330
So, let's just insert the code.

17
00:00:54,330 --> 00:00:56,600
Okay, so this is the source code.

18
00:00:56,600 --> 00:01:00,100
As I said previously,
the first steps you get the URL, and

19
00:01:00,100 --> 00:01:00,995
there is a catch here.

20
00:01:00,995 --> 00:01:04,810
NSURL may return an.

21
00:01:04,810 --> 00:01:07,860
So, this actually won't be a URL,

22
00:01:07,860 --> 00:01:11,500
it's going to be an optional
with a URL inside.

23
00:01:11,500 --> 00:01:15,530
Then, we have to turn
this URL in to a NSdata.

24
00:01:15,530 --> 00:01:18,610
We have to fetch this
image from the URL.

25
00:01:18,610 --> 00:01:21,480
And we're using NS data contents of URL,

26
00:01:21,480 --> 00:01:24,650
which only accepts a URL,
not an optional.

27
00:01:24,650 --> 00:01:26,670
So we have to unwrap it.

28
00:01:26,670 --> 00:01:29,040
Once we have the NS data,

29
00:01:29,040 --> 00:01:33,770
we need to turn this NS data into
something that we can use, a UI image.

30
00:01:33,770 --> 00:01:37,560
Again, just as before,
the method that we're going to use,

31
00:01:37,560 --> 00:01:39,060
does not accept an optional.

32
00:01:39,060 --> 00:01:41,150
So we have to unwrap it.

33
00:01:41,150 --> 00:01:43,860
And provide the NSData.

34
00:01:43,860 --> 00:01:47,810
So, this is not very nice,
what we're doing here.

35
00:01:47,810 --> 00:01:49,790
Having all these unwrapping's.

36
00:01:49,790 --> 00:01:54,500
But I want to have it line by line, so
you can easily spot who's the culprit.

37
00:01:54,500 --> 00:01:58,270
Start thinking who might
block In this code.

38
00:01:58,270 --> 00:02:02,060
And last but not least,
we have to display the image.

39
00:02:02,060 --> 00:02:07,090
So, once you have this code written
down, let's run the simulator,

40
00:02:07,090 --> 00:02:09,169
and make sure if it blocks or not.

41
00:02:09,169 --> 00:02:13,790
It should, and indeed it does.

42
00:02:13,790 --> 00:02:16,700
As you see when I click here,
it should just blink.

43
00:02:16,700 --> 00:02:19,080
Instead, it remains inactive for

44
00:02:19,080 --> 00:02:22,540
a certain time,
while the image is being downloaded.

45
00:02:22,540 --> 00:02:27,990
And while that happens, you can't
do anything, the GUI is blocked and

46
00:02:27,990 --> 00:02:31,580
it's blocked for
a user perceivable amount of time.

47
00:02:31,580 --> 00:02:36,740
So, congratulations you have just
been rejected from the app store.

48
00:02:36,740 --> 00:02:41,060
We cannot deliver code that behaves
like this, under no circumstances.

49
00:02:41,060 --> 00:02:43,170
Fortunately, after all the wax on,

50
00:02:43,170 --> 00:02:47,250
wax off of the last lesson,
we now have all the tools to fix this.

51
00:02:47,250 --> 00:02:52,430
However, before we do it in the next
video, see if you can refactor this

52
00:02:52,430 --> 00:02:58,440
code, and put everything inside
of a single if let statement.

53
00:02:58,440 --> 00:03:02,450
It is not good practice to have all
these exclamation points into your

54
00:03:02,450 --> 00:03:03,570
Swift code.

55
00:03:03,570 --> 00:03:06,470
And besides, it's also unsafe.

56
00:03:06,470 --> 00:03:09,860
So, before you move on
try to refactor this.

57
00:03:09,860 --> 00:03:13,940
Put it into a single if let statement,
and we'll continue on the next video.
