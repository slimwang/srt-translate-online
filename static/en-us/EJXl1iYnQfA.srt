1
00:00:00,330 --> 00:00:04,240
While you're making a contribution to
the create your own adventure story, you

2
00:00:04,240 --> 00:00:08,220
may find that your pull request can't
be merged because of merge conflicts.

3
00:00:08,220 --> 00:00:10,850
Here's how that could happen and
how you could fix it.

4
00:00:10,850 --> 00:00:14,960
Suppose you fork the original
repository on GitHub, clone your fork,

5
00:00:14,960 --> 00:00:19,280
then make a change in a new branch,
and push that change to your fork.

6
00:00:19,280 --> 00:00:23,310
In the meantime, someone else changes
the original repository on GitHub.

7
00:00:23,310 --> 00:00:25,500
If there are merge conflicts
between their change and

8
00:00:25,500 --> 00:00:29,760
your change, then your pull request will
not be able to be automatically merged.

9
00:00:29,760 --> 00:00:33,180
Since there's no way to resolve
merge conflicts on the GitHub site,

10
00:00:33,180 --> 00:00:36,670
you'll need to resolve the conflicts
within the clone on your computer.

11
00:00:36,670 --> 00:00:39,550
To do that, you'll need to get the
conflicting changes from the original

12
00:00:39,550 --> 00:00:44,540
repository into your local repository,
which you can do by adding a remote.

13
00:00:44,540 --> 00:00:47,410
Recall that you already have
a remote set up called origin that

14
00:00:47,410 --> 00:00:48,860
points to your fork.

15
00:00:48,860 --> 00:00:53,030
But you'll still need to add a remote
that points to the original repository.

16
00:00:53,030 --> 00:00:56,090
And many people name
this remote upstream.

17
00:00:56,090 --> 00:00:58,995
Adding and fetching the upstream
remote will add branches like

18
00:00:58,995 --> 00:01:02,530
upstream/master into
your local repository, so

19
00:01:02,530 --> 00:01:05,049
that you can merge the upstream
branch with your local branch.

20
00:01:06,180 --> 00:01:10,688
For example, I created a pull request
to add an option of stop, drop, and

21
00:01:10,688 --> 00:01:13,688
roll to a page of the story
where there was a fire.

22
00:01:13,688 --> 00:01:16,887
In the meantime, though, another
change was made to the same file to

23
00:01:16,887 --> 00:01:20,150
add an option to turn on
the chocolate sprinkler.

24
00:01:20,150 --> 00:01:21,990
That change conflicts with mine, so

25
00:01:21,990 --> 00:01:25,800
I need to resolve the conflicts
before my pull request can be merged.

26
00:01:25,800 --> 00:01:30,060
So in this diagram, this is the commit
adding the chocolate sprinkler, and

27
00:01:30,060 --> 00:01:31,460
also this one.

28
00:01:31,460 --> 00:01:34,870
And my change was to add a stop,
drop, and roll option.

29
00:01:34,870 --> 00:01:37,680
These commits were the same
in all the versions.

30
00:01:37,680 --> 00:01:40,780
Since I created my change in
a separate branch, I want to

31
00:01:40,780 --> 00:01:45,010
make my master branch the same as
the master in the original repository.

32
00:01:45,010 --> 00:01:48,640
So, I'll run git pull upstream/master
to update my master branch to

33
00:01:48,640 --> 00:01:51,890
the latest commit from
the original repository.

34
00:01:51,890 --> 00:01:55,630
Then I'll merge the master branch
into my changed branch, and

35
00:01:55,630 --> 00:01:59,730
I'll push both the changed branch and
the master branch to my fork.

36
00:01:59,730 --> 00:02:03,650
I didn't need to push the master branch,
but I thought it might be nice.

37
00:02:03,650 --> 00:02:06,420
Now since this whole process only
contains commands that you've

38
00:02:06,420 --> 00:02:09,660
already learned, I want you to try
doing this on your own before I

39
00:02:09,660 --> 00:02:12,430
demonstrate how to do
it on the command line.

40
00:02:12,430 --> 00:02:15,240
As a reminder,
the steps you'll need to carry out are,

41
00:02:15,240 --> 00:02:18,800
first, add the original repository
as a remote in your clone.

42
00:02:18,800 --> 00:02:22,305
Next pull the master branch from
the original repository into your

43
00:02:22,305 --> 00:02:23,860
clone's master.

44
00:02:23,860 --> 00:02:26,950
Merge the master branch into
your change branch locally.

45
00:02:26,950 --> 00:02:29,170
And resolve any merge conflicts.

46
00:02:29,170 --> 00:02:31,370
And finally,
push your change branch to your fork,

47
00:02:31,370 --> 00:02:34,260
which will automatically
update your pull request.

48
00:02:34,260 --> 00:02:35,280
If you run into trouble,

49
00:02:35,280 --> 00:02:38,730
I'll demonstrate how to carry out
this process in the solution.

50
00:02:38,730 --> 00:02:42,223
If you didn't run into this problem
because your pull request was

51
00:02:42,223 --> 00:02:45,779
merged without conflicts,
I encourage you to get some practice by

52
00:02:45,779 --> 00:02:49,033
making a new change and
then not making a pull request for it.

53
00:02:49,033 --> 00:02:51,409
Then you can wait for
someone else to make a change and

54
00:02:51,409 --> 00:02:54,640
then get some practice
bringing your fork up to date.

55
00:02:54,640 --> 00:02:57,510
Even if there are no merge conflicts,
you can still get practice merging.

56
00:02:58,510 --> 00:03:00,570
Once you've finished this process,
check this box
