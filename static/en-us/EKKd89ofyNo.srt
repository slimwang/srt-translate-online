1
00:00:00,000 --> 00:00:01,842
In this homework assignment, we asked you

2
00:00:01,842 --> 00:00:06,093
to do a few optimizations. The very basic

3
00:00:06,093 --> 00:00:07,888
optimizations you can do are very, very

4
00:00:07,888 --> 00:00:13,390
simple optimizations on binary operations, on

5
00:00:13,421 --> 00:00:16,966
basic arithmetic, and the ones we specifically

6
00:00:16,966 --> 00:00:21,326
asked you to do are these right here as well as

7
00:00:21,326 --> 00:00:24,684
replacing expressions with constants when

8
00:00:24,684 --> 00:00:28,373
applicable. So we gave you this one right here

9
00:00:28,373 --> 00:00:32,136
and then, to add in the others, we just do this

10
00:00:32,136 --> 00:00:34,299
great big ‘else… if…’ statement. So the first

11
00:00:34,345 --> 00:00:37,155
one, we check that the operation is times, we

12
00:00:37,155 --> 00:00:40,481
check that A is a number and it’s a number

13
00:00:40,481 --> 00:00:42,749
equal to one. And if it is, well, one times

14
00:00:42,749 --> 00:00:46,062
anything is that second thing, is B. So we just

15
00:00:46,062 --> 00:00:50,058
returned B. We don’t have to wait and run this

16
00:00:50,058 --> 00:00:52,617
through once we’re interpreting. That would

17
00:00:52,617 --> 00:00:54,532
take more effort than we need to. Now we do

18
00:00:54,532 --> 00:00:56,416
the same thing with the next one if B is one

19
00:00:56,416 --> 00:00:59,752
and A is something else. We can just return A.

20
00:00:59,752 --> 00:01:03,149
Now we can do the same thing with addition

21
00:01:03,149 --> 00:01:05,366
and 0. We just check if the operation is equal

22
00:01:05,366 --> 00:01:08,156
to plus and that A is a number and it’s a

23
00:01:08,156 --> 00:01:10,730
number equal to 0, then we return B. If B is a

24
00:01:10,730 --> 00:01:14,153
number equal to zero, then we return A. And

25
00:01:14,153 --> 00:01:17,646
finally, the last one that we asked you to

26
00:01:17,646 --> 00:01:22,617
implement is a number minus itself is 0. So

27
00:01:22,617 --> 00:01:25,590
that’s fairly straightforward too. Check if the

28
00:01:25,590 --> 00:01:28,894
operation’s equal to minus and then if A

29
00:01:28,894 --> 00:01:30,827
equals B – and remember, you can do that

30
00:01:30,827 --> 00:01:33,536
because you can check if Python tuples are

31
00:01:33,536 --> 00:01:37,367
equal to each other, not just numbers – then

32
00:01:37,367 --> 00:01:41,444
we return a tuple of number and 0 to indicate

33
00:01:41,444 --> 00:01:44,288
the number 0 in our abstract syntax tree. Now

34
00:01:44,288 --> 00:01:47,224
the constant folding is a little bit more work,

35
00:01:47,224 --> 00:01:50,764
but really not too much. First, we check that

36
00:01:50,764 --> 00:01:54,518
the first element of the tuples A and B are

37
00:01:54,518 --> 00:01:58,590
number. Then if the operation is addition, if

38
00:01:58,590 --> 00:02:01,055
the operation equals plus, then we return

39
00:02:01,055 --> 00:02:06,107
number and second element of A and B added

40
00:02:06,107 --> 00:02:09,598
together. So that way, we don’t have to run

41
00:02:09,598 --> 00:02:12,688
that operation later on when we are actually

42
00:02:12,688 --> 00:02:15,062
running the program. And we can do the same

43
00:02:15,062 --> 00:02:17,840
thing if we check if the operation is minus,

44
00:02:17,840 --> 00:02:20,619
then we run – then we return tuple of number

45
00:02:20,619 --> 00:02:24,097
and the second element of A and B subtracted

46
00:02:24,097 --> 00:02:27,162
and similarly for multiplication. We can just

47
00:02:27,162 --> 00:02:28,703
do the same thing for the second elements of

48
00:02:28,703 --> 00:02:32,486
A and B, multiply together. And then once we

49
00:02:32,486 --> 00:02:35,769
have hoped that the operations have been

50
00:02:35,769 --> 00:02:39,515
optimized in some way, we wrap it back up in

51
00:02:39,515 --> 00:02:43,525
a binary operation and a tuple of BinOp, AOP

52
00:02:43,525 --> 00:02:46,451
and B, and return that. And if none of this

53
00:02:46,451 --> 00:02:50,175
worked, if we didn’t even get a BinOp to

54
00:02:50,175 --> 00:02:53,234
begin with, then we just return the expression

55
00:02:53,234 --> 00:02:55,473
because those are all the optimizations that we

56
00:02:55,473 --> 00:02:58,918
have done. So let’s try that with a few of these

57
00:02:58,918 --> 00:03:01,452
test cases and these are the test cases that we

58
00:03:01,483 --> 00:03:05,322
provided you with. So we have zero, one and

59
00:03:05,322 --> 00:03:09,470
two, numbers equal to 0.0, 1.0 and 2.0, and a

60
00:03:09,470 --> 00:03:12,202
few variables that are ancient kings and

61
00:03:12,202 --> 00:03:14,627
queens of Persia and Macedonia – Xerxes,

62
00:03:14,627 --> 00:03:18,080
Darius, Antiochus and Musa – and then we’re

63
00:03:18,095 --> 00:03:21,500
going to define a plus operation, just so we

64
00:03:21,500 --> 00:03:23,758
don’t have to keep writing this tuple out, and a

65
00:03:23,758 --> 00:03:25,952
minus operation and a times operation

66
00:03:25,952 --> 00:03:27,801
similarly, just to save some key strokes. And

67
00:03:27,801 --> 00:03:31,107
then we’re going to check whether an

68
00:03:31,107 --> 00:03:34,044
expression that we’ve said, which is times 2

69
00:03:34,044 --> 00:03:36,510
and 0 is equal to 0. That is their optimization

70
00:03:36,510 --> 00:03:39,739
actually ran. We’re going to do the same thing

71
00:03:39,739 --> 00:03:42,285
with a minus operation and a slightly more

72
00:03:42,285 --> 00:03:44,840
complicated operation. Expression three is

73
00:03:44,840 --> 00:03:47,964
minus plus zero plus one plus two zero two.

74
00:03:47,995 --> 00:03:50,607
That was a quite a big mouthful, so let’s go

75
00:03:50,607 --> 00:03:53,438
through it just a bit more in-depth. Plus two

76
00:03:53,438 --> 00:03:56,568
and zero, so two plus zero and then we wrap it

77
00:03:56,568 --> 00:03:59,380
in this call to plus, so two plus zero plus one

78
00:03:59,396 --> 00:04:02,495
and we wrap it again in a plus zero, and then

79
00:04:02,495 --> 00:04:05,131
we wrap all of this up and subtract two from

80
00:04:05,131 --> 00:04:08,092
whatever this is. So this really should just be

81
00:04:08,092 --> 00:04:12,243
three minus two. Once you get past all of the

82
00:04:12,243 --> 00:04:14,557
massive amounts of parentheses. So we print

83
00:04:14,557 --> 00:04:16,942
out and make sure that that is indeed equal to

84
00:04:16,942 --> 00:04:18,813
one. We do the same thing for these

85
00:04:18,813 --> 00:04:22,225
expressions as well. So when we run this, we

86
00:04:22,225 --> 00:04:25,278
see that we pass all of our test cases. And this

87
00:04:25,278 --> 00:04:28,025
– our test cases involved a bunch of hand-

88
00:04:28,025 --> 00:04:33,168
checking, where we just made all these up and

89
00:04:33,168 --> 00:04:35,486
hand-checked that this is what they’re suppose

90
00:04:35,486 --> 00:04:37,105
to be and then verified that the optimization

91
00:04:37,105 --> 00:04:39,201
actually does what we think it’s going to do.

92
00:04:39,216 --> 00:04:40,698
This isn’t necessarily how you would

93
00:04:40,698 --> 00:04:43,733
normally do it, but it’s good enough to serve

94
00:04:43,748 --> 00:04:46,000
our purposes right now.
