1
00:00:00,000 --> 00:00:05,000
Well it turns out all these are sort of right.

2
00:00:05,000 --> 00:00:10,000
You really do need to give the answer. Well this isn't quite right. You can't guess the answer.

3
00:00:10,000 --> 00:00:13,000
If you have an algorithm that just guesses the answers,

4
00:00:13,000 --> 00:00:15,000
that algorithm is going to wrong some other time

5
00:00:15,000 --> 00:00:19,000
and we're not talking about the complexity of algorithms that are allowed to be wrong.

6
00:00:19,000 --> 00:00:21,000
We're talking about the complexity of algorithms that have to be right.

7
00:00:21,000 --> 00:00:23,000
So what about this tournament argument?

8
00:00:23,000 --> 00:00:27,000
Well, in a parallel computing scenario, you actually can do something like this

9
00:00:27,000 --> 00:00:31,000
where you have the list of numbers that you're trying to compute the max of.

10
00:00:31,000 --> 00:00:34,000
You can separate this in two lists.

11
00:00:34,000 --> 00:00:38,000
Ask some group of processors to compute the answer for this half of the list

12
00:00:38,000 --> 00:00:42,000
and some other processors or group of processors to compute the answer for this half of the list

13
00:00:42,000 --> 00:00:45,000
and then you only have to do one comparison to find the max.

14
00:00:45,000 --> 00:00:49,000
The number of rounds that this takes actually really is (log n).

15
00:00:49,000 --> 00:00:52,000
So this problem is solvable in (log n) time

16
00:00:52,000 --> 00:00:54,000
but not under the computation model we've been talking about.

17
00:00:54,000 --> 00:00:59,000
It's a computation model where there's kind of an infinite number of processors

18
00:00:59,000 --> 00:01:01,000
that can share information between them.

19
00:01:01,000 --> 00:01:07,000
This Θ(n) argument is actually correct and just to kind of spell it out for you,

20
00:01:07,000 --> 00:01:13,000
imagine we've got an algorithm that runs faster than Θ(n).

21
00:01:13,000 --> 00:01:16,000
So that's means it can't possibly look at every element in the list.

22
00:01:16,000 --> 00:01:20,000
So whatever that algorithm has done, let's say, it's looked at a couple different elements of the list

23
00:01:20,000 --> 00:01:22,000
and it has a guess as to what the max is.

24
00:01:22,000 --> 00:01:27,000
We can make sure that this is always wrong by hiding a value

25
00:01:27,000 --> 00:01:31,000
in one of the spots in the list that the algorithm didn't check in.

26
00:01:31,000 --> 00:01:34,000
And if that number is bigger than everybody else,

27
00:01:34,000 --> 00:01:38,000
it can't have answered the question correctly without looking at it.

28
00:01:38,000 --> 00:01:43,000
So that's really cool actually because finding the max of a list, we have an upper bound of Θ(n)

29
00:01:43,000 --> 00:01:46,000
and we have a lower bound of Θ(n) and they match each other.

30
00:01:46,000 --> 00:01:51,000
Another algorithm that you could get matching upper and lower bound without too much work is

31
00:01:51,000 --> 00:01:54,000
first, sorting at least under the model where we're counting

32
00:01:54,000 --> 00:01:59,000
the number of comparisons of elements you have to do and it turns out that in fact,

33
00:01:59,000 --> 00:02:04,000
sorting under a comparison model has matching upper and lower bounds of (n log n).

34
00:02:04,000 --> 00:02:09,000
So this (n log n) that we've been having for sorting is essentially the best you can do.
