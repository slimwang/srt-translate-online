1
00:00:00,420 --> 00:00:03,620
A discrimination tree is
a knowledge structure,

2
00:00:03,620 --> 00:00:08,440
in which the cases themselves
are the leaf nodes of the tree.

3
00:00:08,440 --> 00:00:13,000
At the root node, and at all
the intimated nodes are questions.

4
00:00:13,000 --> 00:00:15,920
The questions of the root node and
the intimidated node pertain

5
00:00:15,920 --> 00:00:19,040
to the pertain to the indexical
structures of the cases.

6
00:00:19,040 --> 00:00:20,090
So recall that,

7
00:00:20,090 --> 00:00:25,500
we were using the origins of the cases
as the index equal structure.

8
00:00:25,500 --> 00:00:28,401
Let's stay with that point
just a while longer.

9
00:00:28,401 --> 00:00:33,113
So now I might have a question that the
root node which says is the origin not

10
00:00:33,113 --> 00:00:33,647
of 5N?

11
00:00:33,647 --> 00:00:37,950
If the answer to that question is yes,
then it brings us to this branch.

12
00:00:37,950 --> 00:00:40,170
If the answer is no,
it takes us to the other branch.

13
00:00:41,380 --> 00:00:46,540
At this node I might ask,
is the origin east of 5 of E?

14
00:00:46,540 --> 00:00:48,750
If yes, it brings us to this branch.

15
00:00:48,750 --> 00:00:50,810
If no, it brings us to that branch.

16
00:00:50,810 --> 00:00:53,360
In this way we are able to
discriminate between C and

17
00:00:53,360 --> 00:00:57,460
A, in fact we able to disconnect
with C not all of the cases.

18
00:00:57,460 --> 00:00:59,059
Similarly for this part of the graph.

19
00:00:59,059 --> 00:01:00,847
So now that we have learned,

20
00:01:00,847 --> 00:01:04,498
what is the knowledge structure
discrimination trees for

21
00:01:04,498 --> 00:01:09,352
organization the case memory, let us now
look at how will we store a new case.

22
00:01:09,352 --> 00:01:13,803
How will we incrementally learn this
knowledge structure as new cases are put

23
00:01:13,803 --> 00:01:15,670
into the case library?

24
00:01:15,670 --> 00:01:18,710
Imagine that there is a new case, X.

25
00:01:18,710 --> 00:01:21,820
So we can navigate this tree using X.

26
00:01:21,820 --> 00:01:25,510
Is the origin of X North of 5 of A?

27
00:01:25,510 --> 00:01:26,400
Yes it is.

28
00:01:26,400 --> 00:01:27,370
So we come to this branch.

29
00:01:28,760 --> 00:01:31,660
Is the origin of X East of 5 of E?

30
00:01:32,790 --> 00:01:35,280
No it is not, so we come to this branch.

31
00:01:35,280 --> 00:01:36,770
But now we have a problem.

32
00:01:36,770 --> 00:01:40,470
Both A and X, have the same
answer no to this question.

33
00:01:41,540 --> 00:01:44,510
We must find a way of
discriminating between A and X, so

34
00:01:44,510 --> 00:01:46,440
we'll add a new question here.

35
00:01:46,440 --> 00:01:48,250
Perhaps we can add a new question.

36
00:01:48,250 --> 00:01:50,980
Is the origin East of 3 of E?

37
00:01:50,980 --> 00:01:52,740
In the case of X, the answer is yes.

38
00:01:52,740 --> 00:01:54,680
In the case of A, the answer is no.

39
00:01:54,680 --> 00:01:57,270
That's why adding a right
node at the right place,

40
00:01:57,270 --> 00:02:00,630
we have found a way of
discriminating between X and A.

41
00:02:00,630 --> 00:02:03,000
This now is a modified
discrimination tree.

42
00:02:03,000 --> 00:02:05,210
Each time we add a location to memory,

43
00:02:05,210 --> 00:02:08,199
the organization of
the case of memory changes.

44
00:02:08,199 --> 00:02:10,508
This is an example of
incremental learning,

45
00:02:10,508 --> 00:02:15,540
with the addition of each case some
new knowledge structure is learned.

46
00:02:15,540 --> 00:02:18,480
We learn more about incremental
learning in the next lesson.

47
00:02:18,480 --> 00:02:21,330
>> So going back to our programming
example, we were dealing with cases

48
00:02:21,330 --> 00:02:24,520
of file input, and we could use
the same indexical structure

49
00:02:24,520 --> 00:02:28,210
according to which we organize our cases
to now design a discrimination tree.

50
00:02:28,210 --> 00:02:33,240
At the very top level I would probably
ask, what language is the casing?

51
00:02:33,240 --> 00:02:35,808
Is it in Java, C++, Python?

52
00:02:35,808 --> 00:02:39,880
Now the discrimination trees don't have
to be binary like they are right here.

53
00:02:39,880 --> 00:02:42,030
We can have more than
two answers coming out.

54
00:02:42,030 --> 00:02:45,680
So at the top level, I could have
a question of what language is the case

55
00:02:45,680 --> 00:02:50,010
in, and the branches could be JAVA,
C++, and Python, and so on.

56
00:02:50,010 --> 00:02:54,420
I could similarly have questions about,
is it an efficient solution, is it for

57
00:02:54,420 --> 00:02:57,760
a big problem or a small problem,
is it for my personal use or is it for

58
00:02:57,760 --> 00:03:02,480
consumer use, and so on until I get
down to individual cases that represent

59
00:03:02,480 --> 00:03:05,810
different things I might want to
consider when I'm doing a new solution.

60
00:03:05,810 --> 00:03:10,468
>> David a point you make about this
not being a but a very important one.

61
00:03:10,468 --> 00:03:15,210
Let's go back to our original example,
where we had a micro world of blocks and

62
00:03:15,210 --> 00:03:17,040
the blocks had different colors.

63
00:03:17,040 --> 00:03:20,296
So I can ask a question at the root
node, what is the color of the block?

64
00:03:20,296 --> 00:03:23,129
And have a large number of branches
coming out of it corresponding

65
00:03:23,129 --> 00:03:24,116
to different colors.

66
00:03:24,116 --> 00:03:28,061
Here's an example of a discrimination
tree, not a binary print.
