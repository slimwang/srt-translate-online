1
00:00:00,339 --> 00:00:02,676
Let's turn to the technology side a little bit.

2
00:00:02,676 --> 00:00:06,222
Ten years ago if I wanted a faster computer,

3
00:00:06,222 --> 00:00:10,304
then what I would do is wait 6 months and then the clock speed of the CPUs I could buy

4
00:00:10,304 --> 00:00:12,579
would be 30% higher than it was,

5
00:00:12,579 --> 00:00:16,282
and I'd go down to the local store and buy a new faster processor.

6
00:00:16,282 --> 00:00:22,763
And that was largely determined by just a faster clock that I'd go from 1 to 2 to 3 GHz.

7
00:00:22,763 --> 00:00:24,289
That's not happening anymore.

8
00:00:24,289 --> 00:00:25,223
How come?

9
00:00:25,223 --> 00:00:25,923
Yeah, so it's interesting.

10
00:00:25,923 --> 00:00:29,859
A lot of people refer to that scaling in CPU performance as Moore's Law,

11
00:00:29,859 --> 00:00:31,501
which is a little bit of a misnomer.

12
00:00:31,501 --> 00:00:36,314
Moore's Law really predicts a growth rate in the number of devices you can fabricate on a chip.

13
00:00:36,314 --> 00:00:37,647
And Moore's Law is actually alive and well.

14
00:00:37,647 --> 00:00:41,230
We can still, every generation of technology, fabricate more devices

15
00:00:41,230 --> 00:00:44,750
and assuming extra chip, that's still growing exponentially.

16
00:00:44,750 --> 00:00:49,552
What stopped around 2005 was what's called the Nard scaling,

17
00:00:49,552 --> 00:00:54,156
which was scaling the voltages that we operate our chips at as we scaled the dimensions

18
00:00:54,156 --> 00:00:56,758
that we make the transistors at.

19
00:00:56,758 --> 00:01:00,062
And this stopped because of weakened current in the devices.

20
00:01:00,062 --> 00:01:05,666
And without going too technically into it, what that meant is that now when we get a new generation of chip,

21
00:01:05,666 --> 00:01:12,521
let's say we produced a line width by from say unit to 0.7 of whatever that unit was.

22
00:01:12,521 --> 00:01:18,593
A recent jump is from 28 nanometers to 20 nanometers.

23
00:01:18,593 --> 00:01:22,731
When we do that, we now get twice as many devices in the same amount of area.

24
00:01:22,731 --> 00:01:26,570
In the old days we would scale the voltage by 0.7

25
00:01:26,570 --> 00:01:33,898
and since the power goes as CV squared, C would go at 0.7 the voltage will go by 0.7 squared.

26
00:01:33,898 --> 00:01:37,334
We'd wind up with the, I should say energy goes to CV squared.

27
00:01:37,334 --> 00:01:43,873
We would wind up with energy of switching the device being about a third of what it was before âˆš8,

28
00:01:43,873 --> 00:01:51,677
so we'd get this 3x improvement in performace per watt of a basic unit,

29
00:01:51,677 --> 00:01:53,512
and then you can take that and use it in various ways.

30
00:01:53,512 --> 00:01:55,815
One of the ways we used it was to crank clock rate up.

31
00:01:55,815 --> 00:01:57,851
Now that's not happening anymore.

32
00:01:57,851 --> 00:02:05,395
Now that we're holding voltage constant, we're getting a little bit of energy gain from the 0.7 in capacity.

33
00:02:05,395 --> 00:02:09,062
But even that, we're not really getting the whole 0.7, we're getting maybe half of that.

34
00:02:09,062 --> 00:02:18,316
We get perhaps in a generation of technology a 15% improvement in the basic underlying technology.

35
00:02:18,316 --> 00:02:21,411
So that's why you can't take the same old serial processor

36
00:02:21,411 --> 00:02:23,013
and just have it go faster anymore.

37
00:02:23,013 --> 00:02:25,251
You're not going to get any of the frequency improvement.

38
00:02:25,251 --> 00:02:27,184
Frequencies are largely flattened out.

39
00:02:27,184 --> 00:02:34,233
You get more parallelism but it's no longer that factor of 3 each generation that you used to get.

40
00:02:34,233 --> 00:02:42,267
It's now you know perhaps 15% or so before you start applying architecture and circuit innovation.

41
00:02:42,267 --> 00:02:45,231
If you just relied on process, that's all you would get.

42
00:02:45,231 --> 00:02:50,206
Even though each one of those transistors is a little smaller and sucks up a little less power,

43
00:02:50,206 --> 00:02:53,308
that's not nearly enough to change the fact that you're making these bigger

44
00:02:53,308 --> 00:02:54,687
and more parallel every generation.

45
00:02:54,687 --> 00:03:01,964
That's right. The better way to think about it is suppose you got the whole 0.7 on capacitance in that scaling.

46
00:03:01,964 --> 00:03:05,887
That means you now sort of are 30% less energy.

47
00:03:05,887 --> 00:03:09,592
So you can now put 30% more units on.

48
00:03:09,592 --> 00:03:15,330
You would only grow 30% more parallelism in a power constrained environment on that same dime.

49
00:03:15,330 --> 00:03:19,702
You could take that 30% either in clock rate or in more units.

50
00:03:19,702 --> 00:03:24,007
Although it's harder to take in clock rate because that scaling is less linear.

51
00:03:24,007 --> 00:03:27,577
Now, you don't get the whole 30%. You may get half of that for various reasons.

52
00:03:27,577 --> 00:03:32,515
But that's what you're getting to play with each generation until you start innovating.

53
00:03:32,515 --> 00:03:34,956
That's why it's actually kind of fun to be a computer architect these days,

54
00:03:34,956 --> 00:03:36,820
because that's where the value is.

55
00:03:36,820 --> 00:03:42,867
It used be largely in process, and so companies that had a proprietary process kind of an advantage ,

56
00:03:42,867 --> 00:03:44,356
and they still have a little bit of an advantage

57
00:03:44,356 --> 00:03:47,960
but that advantage has really shrunk since process matters less these days.

58
00:03:47,960 --> 00:03:50,355
And what you do with the process, the architecture and circuits

59
00:03:50,355 --> 00:03:52,699
and programming system matters a lot more.
