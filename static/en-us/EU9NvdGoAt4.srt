1
00:00:00,000 --> 00:00:05,000
In lecture, Dave pointed out that these 2 functions,

2
00:00:05,000 --> 00:00:07,000
hashtable_update and hashtable_lookup,

3
00:00:07,000 --> 00:00:09,000
use some similar functionality

4
00:00:09,000 --> 00:00:13,000
that instead we could place in a separate procedure.

5
00:00:13,000 --> 00:00:16,000
Looking at the hashtable_update and lookup procedures here,

6
00:00:16,000 --> 00:00:21,000
we see code that's identical between them, namely these 2 lines.

7
00:00:21,000 --> 00:00:25,000
In both functions, these 2 lines of code go through a given bucket

8
00:00:25,000 --> 00:00:28,000
searching for an entry whose first value is the key.

9
00:00:28,000 --> 00:00:31,000
And so what we're going to do is we're going to take this code

10
00:00:31,000 --> 00:00:34,000
and move it into a separate helper function.

11
00:00:34,000 --> 00:00:36,000
This is known as refactoring.

12
00:00:36,000 --> 00:00:38,000
Refactoring is a common software engineering practice

13
00:00:38,000 --> 00:00:41,000
where we change the code without changing the functionality.

14
00:00:41,000 --> 00:00:43,000
There's a number of reasons to do so.

15
00:00:43,000 --> 00:00:47,000
For example, here we're doing it to minimize duplicated code.

16
00:00:47,000 --> 00:00:51,000
This is desirable, because if we want to change how these 2 lines of code work--

17
00:00:51,000 --> 00:00:53,000
perhaps we change the structure of the bucket--

18
00:00:53,000 --> 00:00:56,000
we don't want to look through every hash table function

19
00:00:56,000 --> 00:00:58,000
searching for how this works and updating them.

20
00:00:58,000 --> 00:01:00,000
Rather, we just want to update it in 1 place.

21
00:01:00,000 --> 00:01:04,000
This minimizes bugs and saves time. So let's give it a try.

22
00:01:04,000 --> 00:01:06,000
Here I've created a new function called bucket_find.

23
00:01:06,000 --> 00:01:11,000
You should see that it's very similar to the code that we have in update and lookup

24
00:01:11,000 --> 00:01:14,000
in that we're going to go through the bucket searching for the entry

25
00:01:14,000 --> 00:01:18,000
whose first value is the key and then returning the entire entry

26
00:01:18,000 --> 00:01:21,000
so that we can use it accordingly in both update and lookup.

27
00:01:21,000 --> 00:01:25,000
So now that we have the helper function, let's change our hash table functions to use it.

28
00:01:25,000 --> 00:01:29,000
The resulting code is going to be both simpler and shorter.

29
00:01:29,000 --> 00:01:31,000
I've changed hashtable_update.

30
00:01:31,000 --> 00:01:33,000
We find the bucket in the first line,

31
00:01:33,000 --> 00:01:37,000
then within the bucket we're searching for the key,

32
00:01:37,000 --> 00:01:40,000
and if we find that entry we're going to update the value.

33
00:01:40,000 --> 00:01:44,000
Otherwise we're going to append the key and the value to the end of the bucket.

34
00:01:44,000 --> 00:01:46,000
It looks quite a bit simpler than the original function.

35
00:01:46,000 --> 00:01:48,000
Let's do the same thing to lookup.

36
00:01:48,000 --> 00:01:50,000
In the new hashtable_lookup, we first find the bucket

37
00:01:50,000 --> 00:01:52,000
and then within the bucket we search for the entry.

38
00:01:52,000 --> 00:01:55,000
If the entry is not None, we return the second value.

39
00:01:55,000 --> 00:01:58,000
Otherwise we return None.
