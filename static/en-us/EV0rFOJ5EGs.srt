1
00:00:00,230 --> 00:00:03,266
Now let's talk about a Return Address Stack predictor

2
00:00:03,266 --> 00:00:06,038
or RAS. We have seen that there are several types

3
00:00:06,038 --> 00:00:09,300
of branches that we need to predict. For conditional

4
00:00:09,300 --> 00:00:12,610
branches, we need to predict the direction. Is it taken

5
00:00:12,610 --> 00:00:14,667
or not? And by now, we have seen a

6
00:00:14,667 --> 00:00:18,144
number of predictors that predict direction reasonable well from these

7
00:00:18,144 --> 00:00:21,635
types of things. If this branch is taken, we will

8
00:00:21,635 --> 00:00:25,170
need to also predict the target address. And for that,

9
00:00:25,170 --> 00:00:27,450
a simple BTB that just remembers the previous

10
00:00:27,450 --> 00:00:29,670
target when the branch was taken will do just

11
00:00:29,670 --> 00:00:32,990
fine because we always have the same target.

12
00:00:32,990 --> 00:00:36,530
Another type of branches are unconditional jumps, function calls,

13
00:00:36,530 --> 00:00:39,529
et cetera. As far as their direction is

14
00:00:39,529 --> 00:00:43,590
concerned, it's trivial; they're always taken. So even the

15
00:00:43,590 --> 00:00:46,960
simplest predictor of the direction predictor type will do

16
00:00:46,960 --> 00:00:50,290
well on these. As far as the target prediction

17
00:00:50,290 --> 00:00:52,570
is concerned, most of these either jump to

18
00:00:52,570 --> 00:00:55,870
a label or call a specific function. So

19
00:00:55,870 --> 00:00:58,900
simple BTB just remembers the previous target when

20
00:00:58,900 --> 00:01:02,740
this instruction was executed will do just fine. So

21
00:01:02,740 --> 00:01:05,250
it looks like we have handled both the

22
00:01:05,250 --> 00:01:07,930
direction and the target for most of the common

23
00:01:07,930 --> 00:01:10,824
branch types. However, there is a type of

24
00:01:10,824 --> 00:01:15,504
branch, specifically the function returns, which is always taken,

25
00:01:15,504 --> 00:01:19,620
so the direction prediction will do just fine. But

26
00:01:19,620 --> 00:01:22,772
the target is often difficult to predict. If this

27
00:01:22,772 --> 00:01:25,720
function is always called from the same place, then

28
00:01:25,720 --> 00:01:28,802
the return will always jump back to the same location,

29
00:01:28,802 --> 00:01:31,270
and in that case, the BTB will do fine.

30
00:01:31,270 --> 00:01:33,958
But usually, we create the function so that it can

31
00:01:33,958 --> 00:01:37,761
be called from multiple in the program. Something like

32
00:01:37,761 --> 00:01:40,611
this, we have an instruction that can call this function;

33
00:01:40,611 --> 00:01:42,891
somewhere else in the program, we have another

34
00:01:42,891 --> 00:01:46,020
instruction that can call the same function. This

35
00:01:46,020 --> 00:01:49,850
function has a return instruction, and now the

36
00:01:49,850 --> 00:01:53,270
problem is that this return instruction should either

37
00:01:53,270 --> 00:01:59,760
jump here or here, depending on where it was called from. The BTB, in this case,

38
00:01:59,760 --> 00:02:02,887
will not do too well. Why? Well, because

39
00:02:02,887 --> 00:02:05,652
when we call this and return here, the BTB

40
00:02:05,652 --> 00:02:09,970
will remember that this is the target address. Then

41
00:02:09,970 --> 00:02:13,230
we reach this point, call again, return. We should

42
00:02:13,230 --> 00:02:15,809
be returning here, but the BTB is predicting this.

43
00:02:17,060 --> 00:02:19,940
So, we have a misprediction. The BTB now will learn

44
00:02:19,940 --> 00:02:22,686
that this is the correct target. Next, we come

45
00:02:22,686 --> 00:02:25,017
back to this code again, and again, the BTB

46
00:02:25,017 --> 00:02:27,726
is predicting here what we should be returning here

47
00:02:27,726 --> 00:02:31,120
and then again and again. So, it never predicts correctly.

48
00:02:31,120 --> 00:02:35,270
So the question is how can we predict returns accurately?
