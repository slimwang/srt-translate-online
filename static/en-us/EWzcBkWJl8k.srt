1
00:00:00,000 --> 00:00:04,000
But now the important thing is this. Just because I have given you 1 example

2
00:00:04,000 --> 00:00:09,000
where greedy works extremely well doesn't mean that this algorithm will perform well

3
00:00:09,000 --> 00:00:14,000
on any network. We haven't yet proven that it has a good approximation quality.

4
00:00:14,000 --> 00:00:20,000
And a good way to test approximation quality is to always try and construct an input

5
00:00:20,000 --> 00:00:24,000
for which the algorithm will perform really, really bad. So basically we are now

6
00:00:24,000 --> 00:00:28,000
going to try and trick this algorithm here--the greedy algorithm--into picking

7
00:00:28,000 --> 00:00:35,000
suboptimal vertices, basically using this greedy strategy against it. And if we do this

8
00:00:35,000 --> 00:00:40,000
basically using this greedy strategy against it, that will give us some indication on

9
00:00:40,000 --> 00:00:44,000
where this algorithm could fail and how badly it could fail. So if it's

10
00:00:44,000 --> 00:00:50,000
a factor 2 approximation algorithm, if it's a factor 1.5 approximation algorithm maybe,

11
00:00:50,000 --> 00:00:55,000
or if it's actually not a good approximation algorithm at all although it sounds good.

12
00:00:55,000 --> 00:00:58,000
And of course this is similar to some of the problems we have already had

13
00:00:58,000 --> 00:01:03,000
in this course. Finding out how to trick this algorithm, that takes a bit of playing around.

14
00:01:03,000 --> 00:01:07,000
So next to the screen here I have lying about 4 or 5 sheets of paper on which I

15
00:01:07,000 --> 00:01:12,000
experimented around to find out how I could trick this algorithm, and whenever you

16
00:01:12,000 --> 00:01:16,000
want to trick an approximation algorithm, it just takes a bit of time to sink your teeth

17
00:01:16,000 --> 00:01:21,000
into that. But here is something that I have come up with, and it's very similar

18
00:01:21,000 --> 00:01:26,000
of course to the ideas that other people have also had to try and trick the greedy

19
00:01:26,000 --> 00:01:33,000
algorithm. So I'll start out with the amazing number of 24 vertices. Now as if this

20
00:01:33,000 --> 00:01:39,000
weren't enough, I will now add 12 additional vertices. You can now see why I

21
00:01:39,000 --> 00:01:43,000
used up so much paper playing around with this. And then I'm going to connect them

22
00:01:43,000 --> 00:01:48,000
like this. Now my question to you is, how many vertices would greedy choose

23
00:01:48,000 --> 99:59:59,999
if we gave it this graph here as an input? And please enter your answer here.
