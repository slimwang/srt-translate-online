1
00:00:00,140 --> 00:00:05,190
Let's now look at the solution for our N-Bit history predictor quiz.

2
00:00:05,190 --> 00:00:09,395
We said that we want to have an N-Bit history predictor 2-bit counters per

3
00:00:09,395 --> 00:00:13,760
possible history and we need 1,024 entries like that. And now we want to

4
00:00:13,760 --> 00:00:19,372
compute the cost for these predictors, how well they do on the N N N T pattern,

5
00:00:19,372 --> 00:00:24,170
and also how many of the 2-bit counters do they actually use in the NT

6
00:00:24,170 --> 00:00:30,160
repeating pattern. The cost can be computed as simply the size of the history,

7
00:00:30,160 --> 00:00:37,802
plus we need 2 to the nth 2-bit counters for each entry. And

8
00:00:37,802 --> 00:00:42,693
if you compute what this is,

9
00:00:42,693 --> 00:00:48,930
it amounts to 532,480 bits. So this is around

10
00:00:48,930 --> 00:00:53,430
half a megabit of predictor stuff for just 1,024 entries.

11
00:00:54,440 --> 00:00:59,813
With N equals 16, we're talking about

12
00:00:59,813 --> 00:01:06,350
134,234,112 bits. So this is many,

13
00:01:06,350 --> 00:01:13,160
many megabits worth of predictor stuff. Again, for the same number of entries.

14
00:01:13,160 --> 00:01:17,940
As you can see, this is probably not a realistic predictor at all. And

15
00:01:17,940 --> 00:01:21,170
even this one probably you don't want to spend that much harder on

16
00:01:21,170 --> 00:01:25,360
just branch prediction. Let's now see how well they do on the N N N T pattern.

17
00:01:25,360 --> 00:01:30,550
This is a pattern of length four, so anything that has N equal three or

18
00:01:30,550 --> 00:01:35,690
more will handle it well. So from that perspective, all three of these will

19
00:01:35,690 --> 00:01:40,910
do well. These two will do well on even longer patterns, and

20
00:01:40,910 --> 00:01:44,920
finally how many of those two big counters did we have are we actually using for

21
00:01:44,920 --> 00:01:49,230
the, not taken taken not taken, taken. Think about it this way, for

22
00:01:49,230 --> 00:01:54,140
the N equals 1, when we need to predict the taken branch.

23
00:01:54,140 --> 00:01:58,540
We have a history of just 0, because it's a single bit history.

24
00:01:58,540 --> 00:02:01,890
When we need to predict the no taken branch, we have a history of just 1,

25
00:02:01,890 --> 00:02:05,747
so we're using both of these. When we have N equals 4 and

26
00:02:05,747 --> 00:02:11,220
trying to predict this not taken branch, our history is 0 1 0 1.

27
00:02:11,220 --> 00:02:15,960
When we're trying to predict the taken branch, the history will be 1 0 1 0.

28
00:02:15,960 --> 00:02:19,550
When we're trying to predict the next not taken branch, the history again,

29
00:02:19,550 --> 00:02:25,165
will be 0 1 0 1. So as you can see, really, we will only be using

30
00:02:25,165 --> 00:02:30,520
entries 0 1 0 1. And 1 0 1 0. So we're still using only two

31
00:02:31,780 --> 00:02:37,748
of the 16 2-bit counters. If you look at the 8th-bit history,

32
00:02:37,748 --> 00:02:43,000
the history will just be 0 1 0 1 0 1 0 1 and 1 0 1 0 1 0 1 0 here. So

33
00:02:43,000 --> 00:02:50,370
we will still be using only 2. Of now, 256 2-bit counters.

34
00:02:50,370 --> 00:02:56,570
So, we are now using less than 1% of the counters we have in each entry.

35
00:02:56,570 --> 00:03:01,710
And finally, for this history, you can see the trend here, we will be using

36
00:03:01,710 --> 00:03:07,150
only two 2-bit counters of more than 65,000 that we have in each entry.
