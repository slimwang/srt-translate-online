1
00:00:00,000 --> 00:00:03,000
...is investigate in more detail random testing of a specific API,

2
00:00:03,000 --> 00:00:06,000
and that's the bounded queue that we've already looked at a couple times in this class.

3
00:00:06,000 --> 00:00:08,000
So let's take a minute and review the code for the bounded queue.

4
00:00:08,000 --> 00:00:11,000
So what the queue is is an abstract data type. It's providing several methods.

5
00:00:11,000 --> 00:00:15,000
So for example, we have a constructor, an empty call full.

6
00:00:15,000 --> 00:00:17,000
Enqueue adds something, dequeue removes something,

7
00:00:17,000 --> 00:00:21,000
and checkRep is our assertion checker that does sanity checking

8
00:00:21,000 --> 00:00:23,000
over the internal state of the queue.

9
00:00:23,000 --> 00:00:25,000
So now let's look at the simple test routine that I wrote.

10
00:00:25,000 --> 00:00:28,000
What it does is it creates a queue of 2 elements, adds some stuff to it,

11
00:00:28,000 --> 00:00:31,000
asserts that the proper values are returned,

12
00:00:31,000 --> 00:00:33,000
and removes those things from the queue,

13
00:00:33,000 --> 00:00:35,000
again asserting that the proper things were returned.

14
00:00:35,000 --> 00:00:38,000
And notice also that we're calling checkRep after every queue operation.

15
00:00:38,000 --> 00:00:40,000
So this is a non-random test for the queue.

16
00:00:40,000 --> 00:00:44,000
What I'd like to do now is, using the Udacity API, write a random tester for the queue.

17
00:00:44,000 --> 00:00:47,000
So let's just talk about this a little bit--how should it work?

18
00:00:47,000 --> 00:00:49,000
It's clear that the random test, like the deterministic test here,

19
00:00:49,000 --> 00:00:51,000
is going to need to start off by creating a queue.

20
00:00:51,000 --> 00:00:54,000
It's also clear that after performing any queue operation,

21
00:00:54,000 --> 00:00:56,000
the random test should call checkRep.

22
00:00:56,000 --> 00:01:00,000
The thing that's not clear is how do we decide what API function to call,

23
00:01:00,000 --> 00:01:02,000
and how do we know whether the result is correct?

24
00:01:02,000 --> 00:01:04,000
One thing you can do is randomly call functions in the queue's API

25
00:01:04,000 --> 00:01:08,000
with random arguments and just keep asserting checkRep and not really care what comes out.

26
00:01:08,000 --> 00:01:11,000
That is to say, you can just randomly invoke queue operations in a loop

27
00:01:11,000 --> 00:01:13,000
and wait for checkRep to fail.

28
00:01:13,000 --> 00:01:15,000
On the other hand, it's not that hard to do better.

29
00:01:15,000 --> 00:01:19,000
The first thing is we know how many elements the queue holds,

30
00:01:19,000 --> 00:01:21,000
and we also know whether any particular addition

31
00:01:21,000 --> 00:01:23,000
or removal from the queue succeeds or fails.

32
00:01:23,000 --> 00:01:27,000
And so it's pretty easy using an integer to keep track of how many elements

33
00:01:27,000 --> 00:01:29,000
are currently used in the queue.

34
00:01:29,000 --> 00:01:33,000
And what we'd like to do in that case is assert that any enqueue operation

35
00:01:33,000 --> 00:01:37,000
to a non-full queue succeeds and any enqueue operation to a full queue fails.

36
00:01:37,000 --> 00:01:41,000
Similarly, any dequeue operation from an empty queue needs to fail,

37
00:01:41,000 --> 00:01:44,000
as we see a little bit below,

38
00:01:44,000 --> 00:01:47,000
and any dequeue operation from a non-empty queue should succeed.

39
00:01:47,000 --> 00:01:50,000
So the third thing you can do--and you don't need to do this to pass the quiz,

40
00:01:50,000 --> 00:01:52,000
but it's something that would be nice--

41
00:01:52,000 --> 00:01:55,000
is actually keep track of what values should be coming out of dequeue operations.

42
00:01:55,000 --> 00:01:57,000
And so let's just take a minute to see what that would look like.

43
00:01:57,000 --> 00:01:59,000
The bounded queue that you're testing is based on a Python array,

44
00:01:59,000 --> 00:02:03,000
but it turns out that it's really easy to emulate the operation of that queue

45
00:02:03,000 --> 00:02:05,000
using native Python data structures.

46
00:02:05,000 --> 00:02:09,000
So basically, if you wanted to do this, what you would do is you would declare a Python list

47
00:02:09,000 --> 00:02:13,000
that's initially empty, and every time I want to enqueue something in our bounded queue

48
00:02:13,000 --> 00:02:15,000
we also append it to the list.

49
00:02:15,000 --> 00:02:17,000
We have to be a little bit more careful than this

50
00:02:17,000 --> 00:02:20,000
because if the enqueueing of an item fails, we don't want to append sums to our list.

51
00:02:20,000 --> 00:02:23,000
Similarly, when we dequeue something for the bounded queue,

52
00:02:23,000 --> 00:02:28,000
if the dequeue operation succeeds, we want to issue l.pop(0).

53
00:02:28,000 --> 00:02:31,000
The way this works is when something gets appended to a list,

54
00:02:31,000 --> 00:02:34,000
it gets appended at the end, and l.pop(0) takes something off the beginning.

55
00:02:34,000 --> 00:02:36,000
So basically, we're emulating a queue using native Python data structures,

56
00:02:36,000 --> 00:02:39,000
and our emulated queue isn't going to be as fast as the native queue

57
00:02:39,000 --> 00:02:42,000
which is based on the array, but that doesn't matter for testing purposes.

58
00:02:42,000 --> 00:02:45,000
And so if we do these kind of operations and we do them in a random testing loop

59
00:02:45,000 --> 00:02:48,000
and we insert the appropriate checkReps,

60
00:02:48,000 --> 00:02:51,000
then we can build really a quite effective random tester for the bounded queue

61
00:02:51,000 --> 00:02:53,000
using not that many lines of code.

62
00:02:53,000 --> 00:02:58,000
So what I'd like you to do now is go to the API and write a small random tester for the queue.
