1
00:00:00,740 --> 00:00:04,570
Protocols and extensions are both
tools Swift uses to package modules of

2
00:00:04,570 --> 00:00:09,430
functionality that expand upon classes,
enumerations and structs.

3
00:00:09,430 --> 00:00:11,760
Protocols can be shared
across classes and

4
00:00:11,760 --> 00:00:15,160
extensions are used to
customize existing classes.

5
00:00:15,160 --> 00:00:17,720
They both provide ways to reuse code and

6
00:00:17,720 --> 00:00:20,400
adhere to the principle
of dry programming.

7
00:00:20,400 --> 00:00:22,439
That is to say, don't repeat yourself.

8
00:00:23,920 --> 00:00:26,610
Let's focus on protocols for the moment.

9
00:00:26,610 --> 00:00:31,430
If you're familiar with Java or C#,
you may have heard of interfaces before.

10
00:00:31,430 --> 00:00:36,100
A protocol, much like an interface,
is a list of related method signatures.

11
00:00:37,100 --> 00:00:41,390
When a Swift class enumeration or
struct adopts a protocol,

12
00:00:41,390 --> 00:00:46,830
they're signing a contract to implement
every method belonging to said protocol.

13
00:00:46,830 --> 00:00:50,580
This provides us a very powerful
high level abstraction.

14
00:00:50,580 --> 00:00:53,050
For example, we can reason.

15
00:00:53,050 --> 00:00:58,010
Anything that conforms to Apple's
built-in comparable protocol can be

16
00:00:58,010 --> 00:00:58,817
compared.

17
00:00:58,817 --> 00:00:59,996
And iOS development,

18
00:00:59,996 --> 00:01:03,349
protocols are an essential
component of the delegate pattern,

19
00:01:03,349 --> 00:01:08,300
the pattern by which one type calls upon
another type to perform some operation.

20
00:01:08,300 --> 00:01:10,470
For a deeper dive into
the delegate pattern,

21
00:01:10,470 --> 00:01:12,750
follow the links in
the instructor's notes.

22
00:01:12,750 --> 00:01:17,019
Here, we're going to focus on
the syntax of defining, adopting, and

23
00:01:17,019 --> 00:01:18,717
implementing protocols.
