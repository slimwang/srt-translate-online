1
00:00:00,120 --> 00:00:03,406
Now that you know a little bit about ArrayLists, it's time to revisit an old

2
00:00:03,406 --> 00:00:08,055
friend, the Person class. I removed some of the methods and added one new one.

3
00:00:08,055 --> 00:00:13,810
GetFriend gets the ith friend, but as you can see it's a pretty ugly method.

4
00:00:13,810 --> 00:00:17,411
This is bad code. I wasn't careful when I wrote it and it's messy. It would

5
00:00:17,411 --> 00:00:21,739
work alright if my friends are named Madonna, Sting, and Cher. But most people

6
00:00:21,739 --> 00:00:26,008
have spaces in their names. Maybe I could fix this by separating the names with

7
00:00:26,008 --> 00:00:30,478
commas or semicolons. I could change the separator here. But that won't really

8
00:00:30,478 --> 00:00:33,648
fix the underlying problem. The underlying problem is that reality has

9
00:00:33,648 --> 00:00:37,320
structure and we need to choose the right data types to model that structure.

10
00:00:37,320 --> 00:00:41,504
In our case we have multiple individual people. A string of names isn't the

11
00:00:41,504 --> 00:00:45,230
right way to save a bunch of individuals who all play a similar role. An

12
00:00:45,230 --> 00:00:49,303
ArrayList would be much better for this. Saving an ArrayList of Person objects,

13
00:00:49,303 --> 00:00:53,980
instead of just a string of friends would allow us to do a lot of cool things.

14
00:00:53,980 --> 00:00:58,857
For example, we could add a string nationality to each person. And then you can

15
00:00:58,857 --> 00:01:01,665
get a list of all the countries your friends are from. But let's work our way

16
00:01:01,665 --> 00:01:05,831
up to problems like that. First, let's store the friends in an ArrayList of

17
00:01:05,831 --> 00:01:10,630
strings without changing the observable behavior. In software engineering this

18
00:01:10,630 --> 00:01:15,001
would be called refactoring. Refactoring is when you reorganize code. The

19
00:01:15,001 --> 00:01:18,769
implementation changes. The observable behavior does not change. Often we do

20
00:01:18,769 --> 00:01:22,485
this to make it easier to add new features. Now I want you to refactor the

21
00:01:22,485 --> 00:01:26,200
person class. I'll give you some tests so you can make sure nothing breaks in

22
00:01:26,200 --> 00:01:30,785
the process. You'll need to update the instance variables. Save the friend's

23
00:01:30,785 --> 00:01:34,731
names in an ArrayList of strings. You'll need to update addFriend, getFriend

24
00:01:34,731 --> 00:01:38,643
and getFriends. We'll skip unfriend for the moment, but we will come back to it

25
00:01:38,643 --> 00:01:42,680
later. And I'm going to give you a hint. Do you remember the toString method

26
00:01:42,680 --> 00:01:46,145
from lesson two? ToString returns a representation of the object, and works

27
00:01:46,145 --> 00:01:50,343
pretty well for ArrayList of strings. Let me show you what it does. If I create

28
00:01:50,343 --> 00:01:53,820
an ArrayList, strs, and add a couple of strings to it, like this, and then I

29
00:01:53,820 --> 00:01:59,150
call the toString method. The toString method returns, a string, that has the

30
00:01:59,150 --> 00:02:04,602
values separated by commas and spaces and then surrounded by brackets. This is

31
00:02:04,602 --> 00:02:08,368
pretty close to what you want for the getFriends method. For the getFriends

32
00:02:08,368 --> 00:02:13,268
method, you just want the values separated by commas and spaces. And here's one

33
00:02:13,268 --> 00:02:17,520
last hint. If you get an error that Java doesn't know what an ArrayList is, you

34
00:02:17,520 --> 00:02:19,699
might need to import it.
