1
00:00:00,910 --> 00:00:02,960
Let's take another look at
our coconut moving code.

2
00:00:04,160 --> 00:00:09,240
Remember how we multiplied
-2.5 by Time.deltaTime?

3
00:00:09,240 --> 00:00:10,530
Let's talk about that.

4
00:00:10,530 --> 00:00:14,493
Remember that the Update Method
is called every frame.

5
00:00:14,493 --> 00:00:17,556
That means, if we're running
at 60 frames per second,

6
00:00:17,556 --> 00:00:21,040
it gets called around
every 16 milliseconds.

7
00:00:21,040 --> 00:00:26,010
For VR, update might be called 60
times a second, 90 times a second, or

8
00:00:26,010 --> 00:00:28,420
even 120 times a second.

9
00:00:28,420 --> 00:00:31,154
You really can't be certain how
often update will be called.

10
00:00:31,154 --> 00:00:34,619
Since we don't know how
often update will be called,

11
00:00:34,619 --> 00:00:38,945
we have to use Time.deltaTime to
smooth out the motion over time.

12
00:00:38,945 --> 00:00:44,040
Time.deltaTime gives you
framerate-independent animation.

13
00:00:44,040 --> 00:00:48,450
It contains the fraction of a second
that it took the previous frame to draw.

14
00:00:48,450 --> 00:00:51,860
That's why I can just multiply
it with a factor like 2.5 to

15
00:00:51,860 --> 00:00:53,196
achieve a constant motion.

16
00:00:53,196 --> 00:00:57,800
The reason is if my frame
takes double as long to draw,

17
00:00:57,800 --> 00:01:01,100
I should move the object double as far.

18
00:01:01,100 --> 00:01:02,060
It's a smart idea, right?

19
00:01:03,080 --> 00:01:06,430
This means that even if you run
it at 300 frames per second,

20
00:01:06,430 --> 00:01:10,810
your coconut will always fall
at 2.5 meters per second.

21
00:01:10,810 --> 00:01:13,320
No faster, no slower.

22
00:01:13,320 --> 00:01:16,550
Okay, now you know how to program
smooth animation over time.
