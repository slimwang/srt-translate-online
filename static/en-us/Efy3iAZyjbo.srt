1
00:00:00,420 --> 00:00:03,420
We tested that the database
was created successfully.

2
00:00:03,420 --> 00:00:05,290
But now we should test
that reading from and

3
00:00:05,290 --> 00:00:08,800
writing to the sunshine
database works as expected.

4
00:00:08,800 --> 00:00:11,890
I'll show you how we insert a row
of data into the database, and

5
00:00:11,890 --> 00:00:14,740
then query the database
to read it back out.

6
00:00:14,740 --> 00:00:18,810
First, we get a reference to
the database from our SQLI Open Helper.

7
00:00:18,810 --> 00:00:21,960
Which is an instance of
an SQLI database object.

8
00:00:21,960 --> 00:00:24,740
We use this in test create DB.

9
00:00:24,740 --> 00:00:26,270
Since we're writing to the database,

10
00:00:26,270 --> 00:00:30,170
as well as reading,
we're going to get a writable database.

11
00:00:30,170 --> 00:00:33,390
If we were only reading,
then we should use a readable database.

12
00:00:33,390 --> 00:00:36,600
To represent the row of data,
we want to insert into the database,

13
00:00:36,600 --> 00:00:38,870
we use a content values object.

14
00:00:38,870 --> 00:00:40,160
We create one of these,

15
00:00:40,160 --> 00:00:43,650
in the create North pole
location values utility function.

16
00:00:44,830 --> 00:00:48,550
Content values,
contain a set of key value pairs.

17
00:00:48,550 --> 00:00:53,059
You put a key string associated with
the value, into the content value set.

18
00:00:53,059 --> 00:00:56,763
The key string is contain the names
of columns in your database.

19
00:00:56,763 --> 00:01:00,490
The value can contain many
different data types.

20
00:01:00,490 --> 00:01:04,140
Content values,
are used to write databases in Android.

21
00:01:04,140 --> 00:01:06,021
Once we've created our content values.

22
00:01:06,021 --> 00:01:08,465
We call database.insert,

23
00:01:08,465 --> 00:01:12,775
with the table name and content values
to actually create the new row of data.

24
00:01:12,775 --> 00:01:15,475
The return value,
from our insertion is a long,

25
00:01:15,475 --> 00:01:19,435
that contains the new row
ID from the _ID column.

26
00:01:19,435 --> 00:01:23,450
If there's an error inserting,
the return value is negative 1.

27
00:01:23,450 --> 00:01:28,050
Now that we have a row ID,
we can query the database for that row.

28
00:01:28,050 --> 00:01:32,080
There are several query methods that
take in different numbers of parameters.

29
00:01:32,080 --> 00:01:34,780
A query method,
is just a helper function to make it

30
00:01:34,780 --> 00:01:37,770
easier to construct and
execute a select statement.

31
00:01:37,770 --> 00:01:40,800
Let's show how the query
function constructs a statement.

32
00:01:40,800 --> 00:01:44,920
Here's what the base, SQLiteDatabase
query function looks like.

33
00:01:44,920 --> 00:01:48,107
The most basic query we can make
with this only has a table name.

34
00:01:48,107 --> 00:01:50,970
And it returns all columns and
all records.

35
00:01:50,970 --> 00:01:52,040
The rest of the parameters,

36
00:01:52,040 --> 00:01:54,750
would modifying filter
the output of this query.

37
00:01:54,750 --> 00:01:57,881
Adding a projection,
in array of columns, we wish to return,

38
00:01:57,881 --> 00:02:00,786
changes what we are selecting
in select statement below.

39
00:02:00,786 --> 00:02:03,510
The selection parameter
filters the results.

40
00:02:04,560 --> 00:02:08,120
One can optionally also use
the selection arguments to replace any

41
00:02:08,120 --> 00:02:10,020
question marks in the query.

42
00:02:10,020 --> 00:02:12,380
Android creates these
as bound parameters,

43
00:02:12,380 --> 00:02:16,260
in a low level interface to SQLite,
which means, we don't have to worry

44
00:02:16,260 --> 00:02:19,530
about things like escaping
the strings to keep the query valid.

45
00:02:19,530 --> 00:02:21,660
We can also change
the selection arguments,

46
00:02:21,660 --> 00:02:24,040
after our query has been made this way.

47
00:02:24,040 --> 00:02:28,770
The last parameter, as you would expect,
affects the order by cause of our query,

48
00:02:28,770 --> 00:02:32,260
causing it to sort our result
in descending order by date.

49
00:02:32,260 --> 00:02:35,720
The query functions all
return a database cursor.

50
00:02:35,720 --> 00:02:40,190
A cursor object, is a control structure,
that enables traversal over the rows and

51
00:02:40,190 --> 00:02:42,420
columns of our query results set.

52
00:02:42,420 --> 00:02:46,590
Typically, we'll start traversing
results set by calling cursor.move

53
00:02:46,590 --> 00:02:50,440
to first, which will return false if
there were no rows in the result,

54
00:02:50,440 --> 00:02:52,670
which means nothing matched
the query parameters.

55
00:02:52,670 --> 00:02:56,245
We can then call move to next,
iterate through each row.

56
00:02:56,245 --> 00:02:59,745
Once the cursor points to a valid row,
one can call get

57
00:02:59,745 --> 00:03:04,215
column index to return the index of each
database column within the results set.

58
00:03:04,215 --> 00:03:07,952
You can save these values and
use them for every row in the result.

59
00:03:07,952 --> 00:03:09,492
And then you can call get or methods,

60
00:03:09,492 --> 00:03:13,822
that retrieve the values from
that row based upon column index.

61
00:03:13,822 --> 00:03:16,232
Everything we've covered so
far, is how we read and

62
00:03:16,232 --> 00:03:18,392
write from the database in our app.

63
00:03:18,392 --> 00:03:19,832
In tests and in our app code.

64
00:03:21,010 --> 00:03:22,170
For our unit test, though,

65
00:03:22,170 --> 00:03:25,530
we add a step to validate the values
from the cursor with the ones we

66
00:03:25,530 --> 00:03:30,470
originally created the contentValues
object with, by using assert statements.

67
00:03:30,470 --> 00:03:32,770
And, when we're finished we
should close our cursor and

68
00:03:32,770 --> 00:03:35,770
database to release the system
resources as soon as possible
