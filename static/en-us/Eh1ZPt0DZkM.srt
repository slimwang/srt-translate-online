1
00:00:00,460 --> 00:00:03,500
We covered a lot of ground discussing different

2
00:00:03,500 --> 00:00:07,162
synchronization algorithms for parallel machines, both mutual exclusion lock

3
00:00:07,162 --> 00:00:09,000
and [INAUDIBLE] barriers, but now it's time to talk

4
00:00:09,000 --> 00:00:12,030
a little about performance evaluation. As always designers, of

5
00:00:12,030 --> 00:00:14,680
course, they're always concerned about the performance of these

6
00:00:14,680 --> 00:00:18,800
algorithms, because all the applications that sit on top

7
00:00:18,800 --> 00:00:22,230
of the processor. Is going to be using the algorithms

8
00:00:22,230 --> 00:00:25,600
that you've designed. [INAUDIBLE] Designer. And so the performance

9
00:00:25,600 --> 00:00:27,910
of these algorithms are very, very critical in

10
00:00:27,910 --> 00:00:31,780
determining how good the applications are going to be performing.

11
00:00:31,780 --> 00:00:36,960
So we looked at a whole lot of spin algorithms from, a very simple spin on test

12
00:00:36,960 --> 00:00:41,210
and set to spin with delay and, spin.

13
00:00:41,210 --> 00:00:45,820
Algorithms that respect the order of arrival of fairness

14
00:00:45,820 --> 00:00:47,950
if you will. Starting from ticket lock and

15
00:00:47,950 --> 00:00:50,950
the queue-based locks, all of these are different kinds

16
00:00:50,950 --> 00:00:54,930
of spin algorithms that we looked at. And we also looked at a whole number

17
00:00:54,930 --> 00:00:59,360
of barrier synchronization algorithms, starting from a simple

18
00:00:59,360 --> 00:01:02,380
shared counter to a tree algorithm, to an

19
00:01:02,380 --> 00:01:05,780
MCS tree. A tournament and dissemination. And I

20
00:01:05,780 --> 00:01:08,570
also introduced you to several different kinds of

21
00:01:08,570 --> 00:01:12,790
padlock architectures. Shared memory multiprocessor that is cache

22
00:01:12,790 --> 00:01:16,280
coherent. Which may be a symmetric multiprocessor or

23
00:01:16,280 --> 00:01:20,290
it could be a non-uniform memory access multiprocessor.

24
00:01:20,290 --> 00:01:22,930
And you can also have non-cache coherence shared

25
00:01:22,930 --> 00:01:25,970
memory multiprocessor. And of course, the last thing

26
00:01:25,970 --> 00:01:28,410
that I mentioned to you, is the mul, message

27
00:01:28,410 --> 00:01:31,260
passing clusters. So these are the different flavors

28
00:01:31,260 --> 00:01:34,970
of architectures that parallel machines can be built

29
00:01:34,970 --> 00:01:37,760
today. And the question you want to ask is,

30
00:01:37,760 --> 00:01:41,290
if you implement the different types of. Spin algorithms

31
00:01:41,290 --> 00:01:44,430
that I've been discussing with you. Which would be

32
00:01:44,430 --> 00:01:47,330
the winner on these machine? Well the answer is

33
00:01:47,330 --> 00:01:50,180
not so obvious. It depends really on the kind

34
00:01:50,180 --> 00:01:55,270
of architecture. So as OS designers, it is extremely important

35
00:01:55,270 --> 00:01:58,790
for us to take these different spin algorithms and

36
00:01:58,790 --> 00:02:01,740
implement them on these different flavors of architectures. To

37
00:02:01,740 --> 00:02:03,740
ask the question, which one is the winner? It

38
00:02:03,740 --> 00:02:06,360
may not always be the same. Algorithm that may be

39
00:02:06,360 --> 00:02:09,410
the winner on these different types of machine. And

40
00:02:09,410 --> 00:02:11,480
the same thing you should do for the barrier algorithms

41
00:02:11,480 --> 00:02:13,690
as well. So the barrier algorithms, all the way

42
00:02:13,690 --> 00:02:18,450
from the counter to the dissemination barrier, all the different

43
00:02:18,450 --> 00:02:20,220
flavors of algorithm. And you have to ask the

44
00:02:20,220 --> 00:02:24,880
question, which would be most appropriate to implement on these

45
00:02:24,880 --> 00:02:28,880
different flavors of architectures? As always, I've been emphasizing

46
00:02:28,880 --> 00:02:32,300
that when you look at performance evaluation that is reported

47
00:02:32,300 --> 00:02:35,120
in any research paper, you have to always look at

48
00:02:35,120 --> 00:02:38,120
the trends. The trends are more important than the absolute

49
00:02:38,120 --> 00:02:41,850
numbers because the dated nature of the architecture on which

50
00:02:41,850 --> 00:02:45,590
a particular evaluation may have been done. Make the absolute numbers

51
00:02:45,590 --> 00:02:48,650
not that relevant, but what is important is trends. Because

52
00:02:48,650 --> 00:02:51,600
these kinds of architectures that I mentioned to you, they're still

53
00:02:51,600 --> 00:02:54,000
relevant to this day. And therefore what you want to

54
00:02:54,000 --> 00:02:57,940
ask is the question, if different types of spin algorithms and

55
00:02:57,940 --> 00:03:00,700
barrier algorithms. When you implement it on different kinds of

56
00:03:00,700 --> 00:03:04,460
architectures, which one of those algorithms are going to be the winners?

57
00:03:05,500 --> 00:03:06,730
>> That completes the discussion of

58
00:03:06,730 --> 00:03:09,990
synchronization algorithms for parallel machines. I

59
00:03:09,990 --> 00:03:11,820
encourage you to think about the

60
00:03:11,820 --> 00:03:15,390
characteristics of the different spin lock algorithms

61
00:03:15,390 --> 00:03:19,790
and the barrier synchronization algorithms that you studied in this lesson. And

62
00:03:19,790 --> 00:03:23,440
we also looked at two different types of architectures. One was a symmetric

63
00:03:23,440 --> 00:03:26,390
multiprocessor, the other was a non-uniform memory

64
00:03:26,390 --> 00:03:29,670
access architecture. Given the nature of the two

65
00:03:29,670 --> 00:03:32,510
architectures, try to form an intuition on your

66
00:03:32,510 --> 00:03:35,520
own on which one will win in each

67
00:03:35,520 --> 00:03:39,300
of these styles of architectures. Verify whether the

68
00:03:39,300 --> 00:03:42,400
results that are reported in the MCS paper

69
00:03:42,400 --> 00:03:46,330
matches your intuition. Such an analysis will help

70
00:03:46,330 --> 00:03:48,390
you very much in doing the second project.
