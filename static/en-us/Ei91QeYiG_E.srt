1
00:00:00,150 --> 00:00:04,225
Let's try to write down an algorithm that systematizes how we solve it. And

2
00:00:04,225 --> 00:00:07,726
we're going to write this as pseudocode. That means we're not worrying about the

3
00:00:07,726 --> 00:00:11,656
details of how to write exactly correct Python. We're trying to get the idea

4
00:00:11,656 --> 00:00:15,083
down and see if it makes sense. So let's think about how we solve the problem as

5
00:00:15,083 --> 00:00:18,872
a human again. Here's how we start it. We looked at our start date, which was

6
00:00:18,872 --> 00:00:23,042
January 24. And we counted the number of days remaining in January. We do that

7
00:00:23,042 --> 00:00:26,353
by just counting up. If we started earlier we might not want to have counted

8
00:00:26,353 --> 00:00:29,938
every day. So we can subtract the total number of days in January from the day

9
00:00:29,938 --> 00:00:33,582
we started. So that will be our starting point. And we're going to keep the

10
00:00:33,582 --> 00:00:38,070
results in a variable called days and we'll start by initializing days into the

11
00:00:38,070 --> 00:00:42,604
number of days in the current month minus the day that we're starting on. So, for

12
00:00:42,604 --> 00:00:49,004
the example, that was 31, for the number of days in January, minus 24, which, I

13
00:00:49,004 --> 00:00:53,860
believe is 7. And once we've done that, well, we finished month1, so we should

14
00:00:53,860 --> 00:00:57,808
increase the value of month1 by 1. So now we were at February and now we started

15
00:00:57,808 --> 00:01:00,974
going through the months, until we got to the month we are on. So we went

16
00:01:00,974 --> 00:01:04,628
through each month until we got up to the month we were looking for, which was

17
00:01:04,628 --> 00:01:08,380
June. So that's sort of like a while loop. We're doing something over and over

18
00:01:08,380 --> 00:01:11,376
again until we get to the stopping condition. So we can write that as

19
00:01:11,376 --> 00:01:17,428
pseudocode. We're going to keep going while the current month is less than the

20
00:01:17,428 --> 00:01:21,774
target month. We're going to add the number of days in the current month. And

21
00:01:21,774 --> 00:01:25,369
we're going to increase the current month by 1. Now, we're not quite done we

22
00:01:25,369 --> 00:01:29,310
still need to account for the day in the month that we arrived at. And there we

23
00:01:29,310 --> 00:01:32,752
just add that day so if it was day one of June then we would add one. If we

24
00:01:32,752 --> 00:01:37,437
didn't actually get in to June. Now, we're going to add 29 since the 29th was

25
00:01:37,437 --> 00:01:41,302
our target day. We haven't yet accounted for years, for this example it was

26
00:01:41,302 --> 00:01:44,902
okay. But, for other cases, we're going to need to account for years, so let's

27
00:01:44,902 --> 00:01:48,548
think about how to do that. We can do it similarly to how we accounted for

28
00:01:48,548 --> 00:01:52,548
month. Well, we're not up to the same year. We're going to add the number of

29
00:01:52,548 --> 00:01:53,713
days in that year.
