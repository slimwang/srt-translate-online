1
00:00:00,150 --> 00:00:03,050
A tricky issue when it comes
to RPC's is the use of

2
00:00:03,050 --> 00:00:05,500
pointers as arguments to procedures.

3
00:00:05,500 --> 00:00:10,670
In regular procedures it makes perfect
sense to have procedures like this foo

4
00:00:10,670 --> 00:00:13,210
that takes two arguments,
an integer, and

5
00:00:13,210 --> 00:00:18,160
the second argument is a pointer to
an integer or even an integer array.

6
00:00:18,160 --> 00:00:19,740
When this procedure is called.

7
00:00:19,740 --> 00:00:23,690
The second argument,
is a pointer to some address,

8
00:00:23,690 --> 00:00:26,100
in the address base of
the calling process,

9
00:00:26,100 --> 00:00:30,460
where the particular,
the area about this argument is stored.

10
00:00:30,460 --> 00:00:35,740
However, in RPC, passing a pointer
to the remote server makes no sense.

11
00:00:35,740 --> 00:00:40,550
Since this pointer points to some
location in the caller address space,

12
00:00:40,550 --> 00:00:43,880
the server cannot possibly get to
the contents that are stored at this

13
00:00:43,880 --> 00:00:45,230
particular address.

14
00:00:45,230 --> 00:00:49,350
To solve this problem, RPC systems
can make one of two decisions.

15
00:00:49,350 --> 00:00:51,480
The first decision is not to allow for

16
00:00:51,480 --> 00:00:55,190
pointers to be use this
argument of any procedure that

17
00:00:55,190 --> 00:00:59,550
an RPC procedure that will be exported
and can be called in remotely.

18
00:00:59,550 --> 00:01:03,340
The second solution is to
allow pointers to be used but

19
00:01:03,340 --> 00:01:08,320
in the RPC run time to ensure that
the marshalling code that gets generated

20
00:01:08,320 --> 00:01:11,310
understands the fact that
the argument is a pointer.

21
00:01:11,310 --> 00:01:14,015
And that,
instead of just taking that argument and

22
00:01:14,015 --> 00:01:19,265
copying it into the send buffer,
that it actually serializes the pointer.

23
00:01:19,265 --> 00:01:22,225
What that means that it
will copy the reference,

24
00:01:22,225 --> 00:01:24,680
the pointed to data structure,.

25
00:01:24,680 --> 00:01:28,180
Into the data buffer into
one serial representation.

26
00:01:28,180 --> 00:01:31,410
On the server side,
the RPC runtime will first have to

27
00:01:31,410 --> 00:01:34,770
unpack all the data to create
the same data structure.

28
00:01:34,770 --> 00:01:39,360
Then it will record the address to this
data structure and that is the value

29
00:01:39,360 --> 00:01:43,860
that's the pointer that it will use as
an argument when it makes the call to

30
00:01:43,860 --> 00:01:47,060
the actual local implementation
of this particular operation.
