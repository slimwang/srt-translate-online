1
00:00:00,270 --> 00:00:07,060
So the first technique for reducing the
miss rate is using larger cache blocks.

2
00:00:07,060 --> 00:00:11,280
They help the miss
rate because more words

3
00:00:11,280 --> 00:00:16,520
are brought in when we have a miss so
subsequent axises

4
00:00:16,520 --> 00:00:20,219
that might access those additional words
that we brought will not be misses.

5
00:00:21,530 --> 00:00:24,980
And they would be misses if we
had the smaller cache block.

6
00:00:24,980 --> 00:00:29,750
So this does reduce the miss rate, but
only when spatial locality is good.

7
00:00:29,750 --> 00:00:35,040
But when spatial locality is poor,
the miss rate will increase,

8
00:00:35,040 --> 00:00:40,140
because now what happens is we bring
in the word we need, and along with it,

9
00:00:40,140 --> 00:00:45,110
now, we bring more words that we
didn't need, so effectively our cache

10
00:00:45,110 --> 00:00:49,120
now looks like a lower capacity cache
because it has more junk in it.

11
00:00:49,120 --> 00:00:53,610
So, we end up suffering more
of those capacity misses.

12
00:00:54,710 --> 00:01:00,099
So, if we plot the miss rate and how
it changes as the block size changes.

13
00:01:01,560 --> 00:01:04,390
For a small cache we might
get something like this.

14
00:01:04,390 --> 00:01:08,100
Where the miss rate drops as we
increase the block size, but

15
00:01:08,100 --> 00:01:13,570
then starts increasing as we exhaust
the amount of spatial locality

16
00:01:13,570 --> 00:01:15,110
that the cache can support.

17
00:01:16,560 --> 00:01:21,140
But then it starts to grow
as we start to suffer

18
00:01:21,140 --> 00:01:25,650
from the miss rate increase because
there is not enough special locality.

19
00:01:25,650 --> 00:01:32,014
For a 4KB cash, this might happen for
example with the block size of 64.

20
00:01:32,014 --> 00:01:35,524
Interestingly however,
for larger caches,

21
00:01:35,524 --> 00:01:39,844
we will start out with the lower
miss rate to begin with and

22
00:01:39,844 --> 00:01:44,520
it will continue to drop
up to larger block sizes.

23
00:01:44,520 --> 00:01:47,340
Eventually, it's going to
start to increase.

24
00:01:47,340 --> 00:01:51,440
But here we might be looking at for
example, 256 byte block size.

25
00:01:52,870 --> 00:01:57,380
This effect has to do with,
how much junk

26
00:01:57,380 --> 00:02:01,750
are we putting in the cache, and
how much room there is in the cache.

27
00:02:01,750 --> 00:02:04,940
So some blocks will have
more locality than others.

28
00:02:04,940 --> 00:02:07,510
And then in a small cache,

29
00:02:07,510 --> 00:02:11,560
those that don't have enough spatial
locality are creating some junk.

30
00:02:11,560 --> 00:02:16,090
And those that do have a lot of spatial
locality are being placed in the cache,

31
00:02:16,090 --> 00:02:19,240
but there is not enough room for
them because of all the junk.

32
00:02:19,240 --> 00:02:21,900
When we have a larger cache,
for example 256 KB,

33
00:02:21,900 --> 00:02:25,430
then what happens is
those blocks that don't

34
00:02:25,430 --> 00:02:28,800
have enough locality put some junk in
the cache, but the cache is bigger.

35
00:02:28,800 --> 00:02:32,960
So it can also contain those blocks
that do have spatial locality, so

36
00:02:32,960 --> 00:02:36,670
the cache tolerates
a slightly bigger block size.

37
00:02:36,670 --> 00:02:40,000
Overall, we can reduce the miss rate,

38
00:02:40,000 --> 00:02:43,800
especially in a larger cache
if we increase the block size.
