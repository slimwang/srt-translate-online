1
00:00:00,338 --> 00:00:02,969
So now let's look at the whole pipeline of how we would go for

2
00:00:02,969 --> 00:00:05,689
an image, to extract an edge image out of it.

3
00:00:05,689 --> 00:00:08,440
Again an edge image would be basically showcasing where most of

4
00:00:08,440 --> 00:00:11,120
the contrast changes are in an image and

5
00:00:11,120 --> 00:00:16,059
best represents the changes in the spatial x and y of an image like this.

6
00:00:17,780 --> 00:00:20,852
As we noticed before first thing we want to do is we want to suppress noise.

7
00:00:20,852 --> 00:00:24,710
You want to run some sort of a smoothing operation, a blur kernel

8
00:00:24,710 --> 00:00:29,650
using a Gaussian kernel to be able to get rid of some of the information because

9
00:00:29,650 --> 00:00:33,930
as we noticed, the gradient image calculation is really sensitive to noise.

10
00:00:35,120 --> 00:00:39,640
Of course, next step is we compute the gradient image after the image has been

11
00:00:39,640 --> 00:00:41,100
smoothed out a little bit.

12
00:00:41,100 --> 00:00:44,500
And you would get something like this where all of the intensity information,

13
00:00:44,500 --> 00:00:50,060
basically where the gradient is the largest, is shown by the white lines here.

14
00:00:50,060 --> 00:00:52,180
And this is a gradient magnitude image.

15
00:00:52,180 --> 00:00:55,180
Third step is we apply some sort of edge enhancement,

16
00:00:55,180 --> 00:00:58,930
which basically means is that we will filter this image for contrast.

17
00:00:58,930 --> 00:01:02,270
Bring out the most value of where the gradients are much,

18
00:01:02,270 --> 00:01:04,849
much more higher than anything else.

19
00:01:04,849 --> 00:01:07,380
Otherwise, if you notice, this image is basically just black and

20
00:01:07,380 --> 00:01:09,390
white, with lot less white.

21
00:01:09,390 --> 00:01:12,230
We want to bring out the white information here to actually have

22
00:01:12,230 --> 00:01:14,580
more local information around the whites.

23
00:01:14,580 --> 00:01:17,760
because we don't want to lose any information because we've just linearly

24
00:01:17,760 --> 00:01:19,694
looked at the space between zero to 255.

25
00:01:19,694 --> 00:01:23,520
So we want to kind of enhance this data structure,

26
00:01:23,520 --> 00:01:26,560
which is basically an intermediate one from here to there so

27
00:01:26,560 --> 00:01:29,350
we can actually start looking for edges more carefully.

28
00:01:29,350 --> 00:01:32,140
Next thing we want to do is we want to start localizing edges.

29
00:01:32,140 --> 00:01:37,190
Which basically means is we need to determine which local maximum from

30
00:01:37,190 --> 00:01:42,770
any filter output is actually referring to edges as opposed to noise.

31
00:01:42,770 --> 00:01:44,640
So in essence we want to kind of look for

32
00:01:44,640 --> 00:01:49,010
filter responses, and start attracting it various types of ways.

33
00:01:49,010 --> 00:01:52,780
A differential that lets us get rid of noise and pay attention to edges.

34
00:01:52,780 --> 00:01:54,370
Many different methods for this exist.

35
00:01:54,370 --> 00:01:56,390
I recommend you to look at the text for this.

36
00:01:56,390 --> 00:01:58,530
I'll just showcase one of them in a bit.

37
00:01:58,530 --> 00:02:02,450
Finally, the last step is, we want to threshold information after we've done all

38
00:02:02,450 --> 00:02:06,280
of this, and also sometimes do something which is referred to as thinning,

39
00:02:06,280 --> 00:02:10,080
which is a morphological operator on images that basically lets you

40
00:02:10,080 --> 00:02:15,190
combine pixels and close bytes into a much more thinner representation.

41
00:02:15,190 --> 00:02:16,522
because in essence we're looking for

42
00:02:16,522 --> 00:02:21,510
a fine resolution image where the edges are likely to be in this, image.

43
00:02:22,550 --> 00:02:25,970
The output of course is a image like this, which looks similar but

44
00:02:25,970 --> 00:02:30,480
if you notice now it's mostly just one pixels of lines everywhere.

45
00:02:30,480 --> 00:02:33,550
It's very hard to see because again the way it's represented here,

46
00:02:33,550 --> 00:02:34,390
in black and white.

47
00:02:34,390 --> 00:02:38,890
But you'll see many examples of this as you do this work yourself.

48
00:02:38,890 --> 00:02:41,600
But, this is one of the best ways to look for an edge image.
