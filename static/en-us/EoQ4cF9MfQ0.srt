1
00:00:00,160 --> 00:00:03,240
So far we've seen that HTTP
can be used to request content

2
00:00:03,240 --> 00:00:07,320
like what's in a web page,
images, text, video.

3
00:00:07,320 --> 00:00:08,800
But for the apps that we'll be writing,

4
00:00:08,800 --> 00:00:11,870
we'll use HTTP in
a slightly different way.

5
00:00:11,870 --> 00:00:16,300
Instead of using URL's like Udacity.com,
we'll use special URL's that correspond

6
00:00:16,300 --> 00:00:21,070
to methods like getImageData,
that are made available by web services.

7
00:00:21,070 --> 00:00:25,790
Web services sometimes are also referred
to as APIs but don't get confused,

8
00:00:25,790 --> 00:00:26,710
they mean the same thing.

9
00:00:26,710 --> 00:00:29,800
I'm going to take a look at
an example from the Flickr API.

10
00:00:29,800 --> 00:00:33,790
We're going to look at
flicker.people.getPublicPhotos.

11
00:00:33,790 --> 00:00:37,650
This method returns some kind of image
data back to our client or an app.

12
00:00:37,650 --> 00:00:40,620
We're going to look at flickr's
documentation for this method now.

13
00:00:40,620 --> 00:00:43,080
I posted a link in the instructor notes.

14
00:00:43,080 --> 00:00:47,320
So this is the documentation for get
public photos and there's something I

15
00:00:47,320 --> 00:00:50,630
want to draw to your attention first,
and that is the use of arguments.

16
00:00:50,630 --> 00:00:53,710
So the arguments listed here are a lot
like the arguments that you'd see for

17
00:00:53,710 --> 00:00:55,250
a swift function call.

18
00:00:55,250 --> 00:00:58,360
And you'll also notice that some
of them are required like APIK

19
00:00:58,360 --> 00:01:00,410
while others are not like safe search.

20
00:01:01,650 --> 00:01:05,370
Now, this is really cool here at
the bottom, this is the API explorer.

21
00:01:05,370 --> 00:01:08,870
Not all API's have this, but
flicker does and it's extremely useful.

22
00:01:10,120 --> 00:01:14,098
The API explorer allows us to test
the API's methods before using them

23
00:01:14,098 --> 00:01:15,340
in our apps.

24
00:01:15,340 --> 00:01:20,070
For this method, it shows the only
required argument is the user ID.

25
00:01:20,070 --> 00:01:23,590
This is only a half truth,
the API key is also required but

26
00:01:23,590 --> 00:01:27,669
in the API explorer, it automatically
includes a test API key for us.

27
00:01:28,890 --> 00:01:31,110
For the user ID argument,
I'll go ahead and

28
00:01:31,110 --> 00:01:33,456
use my user ID that I've
copied ahead of time.

29
00:01:33,456 --> 00:01:40,509
And then under the extras argument,
I'll type url_m.

30
00:01:40,509 --> 00:01:45,163
If you read the documentation,
the url_m option specifies that we want

31
00:01:45,163 --> 00:01:49,570
the result of this method to
include URL's for medium images.

32
00:01:49,570 --> 00:01:51,480
You'll see that in just a second.

33
00:01:51,480 --> 00:01:56,120
And last, we want to change the output
to JSON, our JavaScript object notation

34
00:01:56,120 --> 00:01:59,110
which we'll talk about
more later in this lesson.

35
00:01:59,110 --> 00:02:00,040
And let's call the method.

36
00:02:02,830 --> 00:02:04,610
And after it's called,
we can see the results below.

37
00:02:05,790 --> 00:02:08,380
In the results we see this
information about photos and

38
00:02:08,380 --> 00:02:11,910
then within photos it looks like
there's a group of individual photos.

39
00:02:13,160 --> 00:02:15,649
And judging by the total
value we see here of 13,

40
00:02:15,649 --> 00:02:18,150
it appears there's
probably 13 total photos.

41
00:02:19,680 --> 00:02:24,720
For each photo we can see this owner
ID which is the same as my user ID.

42
00:02:24,720 --> 00:02:26,260
And we also see an ID for the image.

43
00:02:27,570 --> 00:02:31,120
If we keep scrolling to the right
there's more values, and

44
00:02:31,120 --> 00:02:35,478
here is the URL underscore in value that
we specified in the extras argument.

45
00:02:35,478 --> 00:02:42,270
If we copy one of these, we can paste
it into the browser to see the image.

46
00:02:45,780 --> 00:02:47,730
The URL seems to be not working.

47
00:02:47,730 --> 00:02:51,160
And I think it's because these extra
slash characters that have been added

48
00:02:51,160 --> 00:02:52,730
before each of the forward slashes.

49
00:02:52,730 --> 00:02:53,968
So let me remove these.

50
00:02:56,345 --> 00:02:58,955
And I'm removing them manually now,
but normally,

51
00:02:58,955 --> 00:03:02,500
these slash characters will get removed
when we create an NS URL in code.

52
00:03:04,080 --> 00:03:05,850
And let's try this.

53
00:03:05,850 --> 00:03:06,550
Nice!

54
00:03:06,550 --> 00:03:10,100
This is a picture of Eloise,
this is my wife's cat.

55
00:03:10,100 --> 00:03:12,610
I actually didn't really like
Eloise very much at first, but

56
00:03:12,610 --> 00:03:13,960
she's kind of grown on me over time.

57
00:03:15,590 --> 00:03:18,460
Back in the API explorer,
let's recap on what's happening.

58
00:03:19,690 --> 00:03:24,540
The results being returned by this, get
public photos method is this Jayson data

59
00:03:24,540 --> 00:03:27,130
representing the photos in
my public photo stream.

60
00:03:27,130 --> 00:03:32,080
And, they're being returned as Jayson
because that's what we specified

61
00:03:32,080 --> 00:03:32,770
here, in the output.

62
00:03:32,770 --> 00:03:39,005
If we scroll all the way to the bottom,
we see this really long and ugly URL.

63
00:03:41,120 --> 00:03:43,330
I'll copy this and
paste it back into our browser.

64
00:03:45,350 --> 00:03:46,350
If we visit this link,

65
00:03:46,350 --> 00:03:49,480
we get the exact same thing that
we saw in the API explorer.

66
00:03:49,480 --> 00:03:52,150
In fact,
the URL that we're using here is

67
00:03:52,150 --> 00:03:56,020
extremely similar to the URL our app
will use to receive data from Flickr.

68
00:03:57,850 --> 00:04:00,260
Now if we look more
closely at the URL itself,

69
00:04:00,260 --> 00:04:02,540
we can see the arguments
that we passed in.

70
00:04:02,540 --> 00:04:06,020
We didn't pass in the method argument
that was implicit in the explorer.

71
00:04:06,020 --> 00:04:10,297
But if we keep scrolling here
to the right past the API key,

72
00:04:10,297 --> 00:04:12,230
we can see my user ID here.

73
00:04:16,514 --> 00:04:20,334
And then we can see the extras
argument and the url_m.

74
00:04:22,210 --> 00:04:25,820
There are also these ampersands
that seem to separate the different

75
00:04:25,820 --> 00:04:26,910
argument values.

76
00:04:26,910 --> 00:04:32,950
So there's one there, there's one there,
and you can see them continuing on.

77
00:04:34,960 --> 00:04:37,910
Now the ampersands themselves
are part of a standard for

78
00:04:37,910 --> 00:04:39,700
how arguments are sent in an URL.

79
00:04:41,750 --> 00:04:44,240
Speaking of standards,
I should note that URL's can

80
00:04:44,240 --> 00:04:47,450
only be sent over the Internet
using the ASCII character set.

81
00:04:49,660 --> 00:04:52,870
The ASCII character set is a simple
way of representing characters on

82
00:04:52,870 --> 00:04:57,632
a computer, where character values can
also be represented using a number.

83
00:04:57,632 --> 00:05:01,060
Here are some example ASCII characters
and their corresponding values.

84
00:05:02,760 --> 00:05:04,856
I've posted a link in the instructor
notes if you want to read

85
00:05:04,856 --> 00:05:05,480
more about them.

86
00:05:05,480 --> 00:05:10,440
In some cases we may want to use
URL that contains characters that

87
00:05:10,440 --> 00:05:13,958
are considered unsafe asking
characters such as the plus sign.

88
00:05:13,958 --> 00:05:16,680
When this happens we have to encode or

89
00:05:16,680 --> 00:05:20,910
escape these unsafe characters into
valid ASCII characters in the URL.

90
00:05:22,200 --> 00:05:25,594
The escape version of a plus
sign is percent sign, two B, and

91
00:05:25,594 --> 00:05:29,722
each of those characters, the percent
sign, the two and the B are valid,

92
00:05:29,722 --> 00:05:36,140
safe ASCII characters
Here's another example.

93
00:05:36,140 --> 00:05:40,390
This is a URL that uses Flickr's
flickr.photos.search method.

94
00:05:41,560 --> 00:05:44,410
One of the arguments in this
message is called text,

95
00:05:44,410 --> 00:05:46,720
which is a string
representing a text search.

96
00:05:48,300 --> 00:05:53,214
In this URL the text is equal
to red percent, two, B blue.

97
00:05:57,430 --> 00:05:58,670
This is the escaped or

98
00:05:58,670 --> 00:06:02,690
encoded version of the actual
text which is red plus blue.

99
00:06:02,690 --> 00:06:07,128
Since the plus sign is considered unsafe
ASCII it's escaped with the characters

100
00:06:07,128 --> 00:06:10,525
percent, two B.
