1
00:00:00,000 --> 00:00:02,000
This homework concerns anagrams.

2
00:00:02,000 --> 00:00:06,000
Now, an anagram is a rearrangement of letters in a word or phrase

3
00:00:06,000 --> 00:00:09,000
to form new words or phrases.

4
00:00:09,000 --> 00:00:15,000
For example, an anagram of the phrase ANAGRAMS could be--

5
00:00:15,000 --> 00:00:24,000
we'd start pulling out letters and we could say AN, and then maybe ARM,

6
00:00:24,000 --> 00:00:31,000
and then we're left with GAS--or we could write that as SAG.

7
00:00:31,000 --> 00:00:37,000
This phrase is an anagram of that one, because it uses all and no more of the letters.

8
00:00:37,000 --> 00:00:41,000
It's okay to have extra spaces in between the words here.

9
00:00:41,000 --> 00:00:43,000
There could have been extra spaces between the words here.

10
00:00:43,000 --> 00:00:49,000
It could have been a multi-word phrase. Spaces don't matter. Just that you use up all the letters.

11
00:00:49,000 --> 00:00:52,000
Your task is going to be to write the function anagrams(),

12
00:00:52,000 --> 00:00:57,000
which takes as input a phrase, which is a string like the string ANAGRAMS

13
00:00:57,000 --> 00:01:00,000
or it could be a string with multiple words separated by spaces,

14
00:01:00,000 --> 00:01:06,000
and then an optional argument saying what's the shortest word you're going to accept in the answer?

15
00:01:06,000 --> 00:01:10,000
Here we allow two-letter words and up.

16
00:01:10,000 --> 00:01:15,000
If we wanted we could say we'll only allow three letter words and up or so on.

17
00:01:15,000 --> 00:01:22,000
This is going to return a set of phrases which may be multi-word phrases like that.

18
00:01:22,000 --> 00:01:26,000
Now, we'll be generating all possibilities from the words in the dictionary,

19
00:01:26,000 --> 00:01:29,000
so these words are all in the dictionary.

20
00:01:29,000 --> 00:01:35,000
But notice that for these three words, they could appear in any of six possible orders--

21
00:01:35,000 --> 00:01:41,000
3! possible orders--and it would be kind of boring and repetitious to see all of those.

22
00:01:41,000 --> 00:01:45,000
We're only going to show out of each of those six possibilities--

23
00:01:45,000 --> 00:01:50,000
or N! possibilities for an N word phrase--

24
00:01:50,000 --> 00:01:53,000
only show the one that's in alphabetical order.

25
00:01:53,000 --> 00:01:57,000
Here the word AN is alphabetically before the word ARM,

26
00:01:57,000 --> 00:02:02,000
which is alphabetically before the word SAG, so that's the representation we've shown

27
00:02:02,000 --> 00:02:04,000
out of the six possibilities.

28
00:02:04,000 --> 00:02:08,000
I want you to generate that set, and you can use things that we've had before

29
00:02:08,000 --> 00:02:13,000
like the set of words and prefixes that we've already defined.

30
00:02:13,000 --> 00:02:17,000
You might find it useful to reuse functions such as find_words().

31
00:02:17,000 --> 00:02:21,000
Here's a skeleton of the function with its signature.

32
00:02:21,000 --> 00:02:25,000
It's going to return a set of words and here are some examples

33
00:02:25,000 --> 00:02:31,000
of calling anagrams(), checking to see some of the results are a member of the set,

34
00:02:31,000 --> 00:02:36,000
and here we've listed the complete set against our small dictionary of works

35
00:02:36,000 --> 00:02:39,000
for anagrams of the words PYTHONIC.

36
00:02:39,000 --> 00:02:44,000
I notice here that we have HYP NO TIC, but not HYPNOTIC,

37
00:02:44,000 --> 00:02:47,000
because HYPNOTIC happened not to be in our dictionary

38
00:02:47,000 --> 00:02:50,000
even though HYPNOTIC is an anagram of PYTHONIC.

39
00:02:50,000 --> 00:02:54,000
Go ahead and write your code here and feel free to copy and paste

40
00:02:54,000 --> 99:59:59,999
whatever previous code you need.
