1
00:00:00,330 --> 00:00:01,920
Okay, so what's a bag?

2
00:00:01,920 --> 00:00:04,370
A bag is a container having
the following properties, and

3
00:00:04,370 --> 00:00:06,860
these properties will
make it just perfect for

4
00:00:06,860 --> 00:00:09,740
holding the frontier
in our parallel BFS.

5
00:00:09,740 --> 00:00:14,210
First, a bag will be unordered and
will allow repetition.

6
00:00:14,210 --> 00:00:17,012
Remember that a BFS has to
maintain a frontier, so

7
00:00:17,012 --> 00:00:19,460
it enables as much
parallelism as possible,

8
00:00:19,460 --> 00:00:23,420
we should allow redundant insertions
of the same vertex if need be.

9
00:00:23,420 --> 00:00:26,360
So here, for example,
you can see that this bag has

10
00:00:26,360 --> 00:00:30,590
three copies of the element c,
and that's okay, why?

11
00:00:30,590 --> 00:00:34,650
Because even if we process
c at the same time, by say,

12
00:00:34,650 --> 00:00:37,540
different threads They should
all get assigned the same level.

13
00:00:37,540 --> 00:00:43,140
Now the second thing a bag will allow
is fast denumeration of its elements.

14
00:00:43,140 --> 00:00:46,630
Remember, the BFS has to traverse
all the vertices in the frontier, so

15
00:00:46,630 --> 00:00:50,080
being able to do so
quickly will be extremely helpful.

16
00:00:50,080 --> 00:00:53,480
Now, also remember that our best
parallelization technique so

17
00:00:53,480 --> 00:00:55,880
far has been divide and conquer.

18
00:00:55,880 --> 00:00:59,900
So one really special operation on a bag
is the idea of splitting it into two

19
00:00:59,900 --> 00:01:01,870
roughly equal pieces.

20
00:01:01,870 --> 00:01:05,620
And, of course, the inverse operation
should also be fast, and that's union.

21
00:01:06,680 --> 00:01:10,900
Now union will also be special in that
it will be logically associative.

22
00:01:10,900 --> 00:01:12,440
So what does that mean?

23
00:01:12,440 --> 00:01:14,270
Suppose I call this A and I call this B.

24
00:01:15,520 --> 00:01:20,940
Logical associativity means that A union
B is exactly the same as B union A,

25
00:01:20,940 --> 00:01:25,130
at least logically even if that's
not physically how we store things.

26
00:01:25,130 --> 00:01:28,380
Now logical associativity will
also give us the property or

27
00:01:28,380 --> 00:01:31,190
the ability to apply
reducer hyperobjects.
