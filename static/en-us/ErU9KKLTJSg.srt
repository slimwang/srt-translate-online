1
00:00:00,280 --> 00:00:03,830
In Swift, structs are much more
powerful than in other languages.

2
00:00:03,830 --> 00:00:06,110
Their capabilities
approach those of classes.

3
00:00:06,110 --> 00:00:09,600
In addition to their own properties,
they can also have their own methods,

4
00:00:09,600 --> 00:00:13,130
and can expand functionality
through extensions and protocols.

5
00:00:13,130 --> 00:00:15,380
Let's take a look at
a couple of examples.

6
00:00:15,380 --> 00:00:17,310
Here's a struct called picture frame.

7
00:00:17,310 --> 00:00:19,000
It has three stored properties.

8
00:00:19,000 --> 00:00:23,670
Width, height and thickness, and
one computed property, area.

9
00:00:23,670 --> 00:00:27,087
As with enumerations structs can
have customized emit methods.

10
00:00:27,087 --> 00:00:31,018
But they also come with automatically
generated member wise initializers,

11
00:00:31,018 --> 00:00:32,820
like this one here.

12
00:00:32,820 --> 00:00:33,930
In this line of code,

13
00:00:33,930 --> 00:00:37,830
I'm initializing a ten by eight
picture frame with a thickness of 1.5.

14
00:00:37,830 --> 00:00:41,358
And this is how I access
the computed property, area, and

15
00:00:41,358 --> 00:00:45,370
up here you can see the area
properties custom getter.

16
00:00:45,370 --> 00:00:50,230
Here's another example, this beer struct
has three stored properties, style,

17
00:00:50,230 --> 00:00:53,210
percent alcohol, and
an international cheers dictionary.

18
00:00:54,440 --> 00:00:57,970
Cheers dict is a type property,
it also has a computed property,

19
00:00:57,970 --> 00:00:59,780
suggested volume per serving.

20
00:00:59,780 --> 00:01:03,170
The volume per serving goes down,
as the alcohol percentage goes up.

21
00:01:03,170 --> 00:01:06,180
Some of the Belgian beers at the pub
around the corner from my house

22
00:01:06,180 --> 00:01:07,650
are super strong.

23
00:01:07,650 --> 00:01:10,890
If I was drinking whole pints of those,
I might be in trouble.

24
00:01:10,890 --> 00:01:14,220
The beer struct also has its
own type method called Cheers.

25
00:01:14,220 --> 00:01:18,030
It takes in a language and prints out
a phrase to toast with in that language.

26
00:01:18,030 --> 00:01:21,230
And this is what initialization
looks like for the beer struct.

27
00:01:21,230 --> 00:01:25,160
Again, I'm using the automatically
generated member y's initializer

28
00:01:25,160 --> 00:01:28,340
to set our style and
percentAlcohol properties.

29
00:01:28,340 --> 00:01:29,340
And here in the sidebar,

30
00:01:29,340 --> 00:01:33,360
you can see that a lager with 6%
alcohol has been instantiated.

31
00:01:33,360 --> 00:01:35,770
As usual,
we can access the computed property,

32
00:01:35,770 --> 00:01:38,860
suggestedVolumePerServing with
dot syntax.

33
00:01:38,860 --> 00:01:43,030
Now I want to open up the console for
a second, so we can see our results.

34
00:01:43,030 --> 00:01:46,010
Remember that because
Cheers is a type method,

35
00:01:46,010 --> 00:01:49,270
we call it on the struct itself,
so we call it on beer.

36
00:01:50,820 --> 00:01:53,830
And then, let's pick a language
we want to toast in,

37
00:01:53,830 --> 00:01:55,540
let's toast in Japanese.

38
00:01:56,780 --> 00:02:00,700
And then we can look over in
our console and see kompai.
