1
00:00:00,500 --> 00:00:05,375
First we make a copy of the data frame,
where we can save computed values.

2
00:00:05,375 --> 00:00:09,280
Dataframe.copy will help us with that.

3
00:00:09,280 --> 00:00:11,880
For the next part, let's consider this.

4
00:00:11,880 --> 00:00:15,570
Suppose we want daily returns for
date at index T,

5
00:00:15,570 --> 00:00:21,480
then we need to divide the value at
index T by the value at index T minus 1.

6
00:00:21,480 --> 00:00:22,750
And subtract 1.

7
00:00:22,750 --> 00:00:26,660
We want to do that for all the dates,
starting with index 1.

8
00:00:26,660 --> 00:00:29,168
Now let's code this.

9
00:00:29,168 --> 00:00:34,220
Here, df[1:] picks all
the rows from 1 till the end.

10
00:00:34,220 --> 00:00:40,810
And df[:-1] picks all the rows
from 0 till 1 less than the end.

11
00:00:40,810 --> 00:00:43,640
This operation cannot
be done at index zero

12
00:00:43,640 --> 00:00:47,300
since we do not have the price
of the stock prior to this day.

13
00:00:47,300 --> 00:00:51,450
So we set the values at
the zero throw to all zeros.

14
00:00:51,450 --> 00:00:54,330
Finally, we return this data frame.

15
00:00:54,330 --> 00:00:58,310
You must be wondering why did
we use dot values attribute of

16
00:00:58,310 --> 00:01:01,200
one of the intermediate data frames.

17
00:01:01,200 --> 00:01:04,620
The reason is to access
the underlying numpy array.

18
00:01:04,620 --> 00:01:10,000
This is necessary because when given two
data frames, Pandas will try to match

19
00:01:10,000 --> 00:01:14,850
each row based on index when performing
element wise arithmetic operations.

20
00:01:14,850 --> 00:01:19,295
So all our effort in shifting the values
by one will be lost if we do not use

21
00:01:19,295 --> 00:01:21,270
.values attribute.

22
00:01:21,270 --> 00:01:23,110
Okay, now let's run this.

23
00:01:23,110 --> 00:01:28,560
Here is what the daily returns look like
compared to the original stock prices.

24
00:01:28,560 --> 00:01:34,930
As you can see, the original prices
of SPY and XOM are quite different.

25
00:01:34,930 --> 00:01:38,910
However since the daily returns
are implicitly normalized,

26
00:01:38,910 --> 00:01:41,770
they show up at a comparable scale.

27
00:01:41,770 --> 00:01:44,320
Each daily return value
is either positive or

28
00:01:44,320 --> 00:01:47,930
negative fraction related to
the previous day's value.

29
00:01:47,930 --> 00:01:50,480
This reveals that XOM or

30
00:01:50,480 --> 00:01:55,570
XOM moving actually matches ups and
downs of the SPY quite closely.

31
00:01:56,720 --> 00:02:00,040
There is another way to
compute daily returns.

32
00:02:00,040 --> 00:02:03,080
This time,
directly using Pandas data frame.

33
00:02:03,080 --> 00:02:07,920
Here is how we can do it using
Pandas data frame function, shift.

34
00:02:07,920 --> 00:02:13,570
Note that we still have to replace
the values at the zero true with zeroes.

35
00:02:13,570 --> 00:02:15,690
The reason for doing this is,

36
00:02:15,690 --> 00:02:19,730
Pandas leaves these unknown
values as NaN by default.

37
00:02:19,730 --> 00:02:20,880
Now let's check the output.

38
00:02:22,330 --> 00:02:24,810
As you can see the result
is same as before.
