1
00:00:00,390 --> 00:00:04,014
Now, let's turn to the implementation of the display method. It's supposed to

2
00:00:04,014 --> 00:00:08,326
display a choice question in this format. First, the text of the question. Then

3
00:00:08,326 --> 00:00:11,807
all of the choices, and we put a 1, 2, 3, 4 in front of each of the choices in

4
00:00:11,807 --> 00:00:18,100
case the poor test taker is too frazzled to figure out the numbers themselves.

5
00:00:18,100 --> 00:00:21,606
It's easy enough to do this part. All we have to do is loop through the choices

6
00:00:21,606 --> 00:00:26,074
and print them with a number in front of them. And since this has nothing to do

7
00:00:26,074 --> 00:00:29,530
with learning about inheritance, I'm just going to give you this code. It's

8
00:00:29,530 --> 00:00:35,502
right here. So we print the number of the ith choice and the ith item. actually

9
00:00:35,502 --> 00:00:39,750
not quite because in Java the choices have indexes, zero, one, two, and three.

10
00:00:39,750 --> 00:00:43,314
And we chose the more traditional one, two, three, four, which accounts for the

11
00:00:43,314 --> 00:00:48,689
i plus 1 over here. The hard part is to display the text of the question. And

12
00:00:48,689 --> 00:00:52,595
again, the question text is in the Superclass object, and we can't get at it

13
00:00:52,595 --> 00:00:59,816
directly. Let's have a look at the Super class. Here is the question text, do

14
00:00:59,816 --> 00:01:04,760
we have any method that lets us read it? there is, And we could call display,

15
00:01:04,760 --> 00:01:10,401
and then it would print it. That's just what we need. Lets do it. Here I call

16
00:01:10,401 --> 00:01:14,781
display that should display the text and then here I am displaying these

17
00:01:14,781 --> 00:01:20,217
choices around the demo. Oh! something very bad happened, I got a

18
00:01:20,217 --> 00:01:25,395
StackOverflowError. Now, that's technical link of for having a method that

19
00:01:25,395 --> 00:01:31,828
keeps calling itself. why itself? See the method is called display and here it

20
00:01:31,828 --> 00:01:37,150
calls itself. That's a problem, I didn't want to call my own method, I wanted

21
00:01:37,150 --> 00:01:42,726
to call the display method of the Question class. So my difficulty is that I

22
00:01:42,726 --> 00:01:47,717
have two methods called display in the Superclass and in the Subclass. And they

23
00:01:47,717 --> 00:01:51,197
have the same name. That's exactly what always happens when you overwrite a

24
00:01:51,197 --> 00:01:55,210
method. Now, there's a special syntax for invoking the Superclass method and it

25
00:01:55,210 --> 00:02:01,145
looks like that. You simply say super.display. Go ahead and give that a try and

26
00:02:01,145 --> 00:02:03,861
fix up the display method.
