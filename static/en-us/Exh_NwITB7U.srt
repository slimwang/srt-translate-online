1
00:00:00,000 --> 00:00:02,000
Now let's get a little more practice with debugging.

2
00:00:02,000 --> 00:00:05,000
Suppose someone asks you to write a sudoku checker.

3
00:00:05,000 --> 00:00:09,000
Sudoku is a common pencil and paper game, also often seen on the computer,

4
00:00:09,000 --> 00:00:12,000
in which you fill in grids with numbers according to certain rules.

5
00:00:12,000 --> 00:00:15,000
If you haven't seen Sudoku before, it doesn't matter.

6
00:00:15,000 --> 00:00:19,000
We're not going to do full Sudoku. We're going to do a very simple subset of it.

7
00:00:19,000 --> 00:00:22,000
People would normally write out these almost Tic-Tac-Toe-like board.

8
00:00:22,000 --> 00:00:25,000
We will represent that as a list of lists.

9
00:00:25,000 --> 00:00:32,000
Our first row is the list [1, 2, 3], our next row is the list [4, 5, 6], and our last row is [7, 8, 9].

10
00:00:32,000 --> 00:00:37,000
What I want to do is just check that horizontally all the numbers are different.

11
00:00:37,000 --> 00:00:40,000
This is good, because 1 is different from 2 which is different from 3.

12
00:00:40,000 --> 00:00:42,000
This is good, 4, 5, and 6 are all not equal.

13
00:00:42,000 --> 00:00:45,000
This is good--7, 8, and 9 are all not equal.

14
00:00:45,000 --> 00:00:47,000
But this makes me super sad, because I've reused 1.

15
00:00:47,000 --> 00:00:50,000
This is our horizontal Sudoku checker.

16
00:00:50,000 --> 00:00:53,000
I'm going to write one with a bug, and you're going to help me fix it.

17
00:00:53,000 --> 00:00:57,000
Here I've written out our horizontal Sudoku checker, but I'm going to do it probably

18
00:00:57,000 --> 00:01:00,000
a little differently than you might have in the past.

19
00:01:00,000 --> 00:01:04,000
I'm going to use a more complicated algorithm to make it a little harder to debug

20
00:01:04,000 --> 00:01:06,000
to give you a feel for how this might go in the real world.

21
00:01:06,000 --> 00:01:08,000
I've written a helper procedure called count.

22
00:01:08,000 --> 00:01:12,000
Given a number and a row, a row is just a list.

23
00:01:12,000 --> 00:01:16,000
It returns the number of time that number appears--whoa, that's ambiguous!

24
00:01:16,000 --> 00:01:21,000
If, for example, you're asking for 5, it occurs once in [1, 2, 3, 4, 5],

25
00:01:21,000 --> 00:01:24,000
but it's count is now two in [1, 2, 3, 4, 5, 5].

26
00:01:24,000 --> 00:01:28,000
I'm doing this using reduce from functional programming.

27
00:01:28,000 --> 00:01:35,000
I'm intentionally throwing in lambda, Python's equivalent of JavaScript's function expression.

28
00:01:35,000 --> 00:01:39,000
Reduce and map and list comprehension are aspects of functional programming

29
00:01:39,000 --> 00:01:44,000
used by companies like Google to make their search engines faster and more parallelizable.

30
00:01:44,000 --> 00:01:48,000
What this does is starting with the number zero,

31
00:01:48,000 --> 00:01:54,000
I'm going to go over every element in the row, and I'm going to call the current element this,

32
00:01:54,000 --> 00:01:57,000
and I'm going to call what I have so far the accumulator.

33
00:01:57,000 --> 00:02:02,000
If the current element is equal to the number that I want, I'll return 1+ the accumulator.

34
00:02:02,000 --> 00:02:04,000
Otherwise, I'll just return the accumulator.

35
00:02:04,000 --> 00:02:11,000
Let me walk you through it on checking the count of 5 in 1, 2, 3, 4, 5.

36
00:02:11,000 --> 00:02:13,000
The number that we want is 5.

37
00:02:13,000 --> 00:02:17,000
The current element starts out at 1, so I'm going leave the accumulator alone.

38
00:02:17,000 --> 00:02:23,000
Next, the current element is 2. That's not 5, so I leave the current accumulator alone.

39
00:02:23,000 --> 00:02:28,000
Next, the current element is 3. That's not still not 5, so I leave the accumulator alone.

40
00:02:28,000 --> 00:02:33,000
Next, the current element is 5. Still not 5, I leave the accumulator alone.

41
00:02:33,000 --> 00:02:37,000
Then, the current element is 5--whoa! Happy day in jubilation.

42
00:02:37,000 --> 00:02:41,000
I turn the accumulator into 1+ the accumulator, so just 1.

43
00:02:41,000 --> 00:02:44,000
Then in this particular list there is actually another 5 right after that.

44
00:02:44,000 --> 00:02:48,000
This is 5 again, so I'll have 1 + 1, which becomes 2.

45
00:02:48,000 --> 00:02:55,000
I'm walking down this list. How many 5s have I seen? Zero, zero, zero, zero, 1, 2, great.

46
00:02:55,000 --> 00:02:58,000
You could have written this with a simple for loop without using reduce,

47
00:02:58,000 --> 00:03:00,000
but often when you have to debug a program

48
00:03:00,000 --> 00:03:04,000
it's after you've been away for awhile, and it looks a bit unfamiliar.

49
00:03:04,000 --> 99:59:59,999
I'm intentionally giving you code that's not your usual style.
