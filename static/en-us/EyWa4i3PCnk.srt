1
00:00:00,190 --> 00:00:02,810
Now it's your turn to implement the functionality to

2
00:00:02,810 --> 00:00:06,383
set and get announcements. So first you're going to need

3
00:00:06,383 --> 00:00:08,890
to define the announcement class. This is a very

4
00:00:08,890 --> 00:00:13,720
simple class. It just basically has one field, message and

5
00:00:13,720 --> 00:00:16,149
the constructor needs to take the message and put

6
00:00:16,149 --> 00:00:19,560
it in the message field. We need this class,

7
00:00:19,560 --> 00:00:22,000
only because the end point functions must return an

8
00:00:22,000 --> 00:00:25,240
object with a field, rather than a string. And you're

9
00:00:25,240 --> 00:00:28,820
going to need to implement the SetAnnouncementServelet, you'll have

10
00:00:28,820 --> 00:00:31,352
to implement the doGet method, you'll need to get the

11
00:00:31,352 --> 00:00:34,090
memcache service. You'll actually have to write the logic to

12
00:00:34,090 --> 00:00:36,960
construct the announcement. And then you are going to need

13
00:00:36,960 --> 00:00:39,845
to put the announcement in memcache, keyed off the recent

14
00:00:39,845 --> 00:00:43,120
announcements key. And then do not forget to configure your

15
00:00:43,120 --> 00:00:48,110
sever in web.xml. There is a skeleton implementation of SetAnnouncementServer

16
00:00:48,110 --> 00:00:50,650
available to you. If you'd like to use it, and

17
00:00:50,650 --> 00:00:53,100
you can find that in the Lesson 5 folder.

18
00:00:53,100 --> 00:00:54,960
You're also welcome to create it from scratch if

19
00:00:54,960 --> 00:00:58,770
you want. And then in the ConferenceAPI class, you

20
00:00:58,770 --> 00:01:01,900
need to add the getAnnouncement function, which is an endpoint

21
00:01:01,900 --> 00:01:05,260
function, which gets the announcement out of Memcache, and

22
00:01:05,260 --> 00:01:09,880
returns it, as an announcement object. And after you've tested

23
00:01:09,880 --> 00:01:11,990
it and it's working on localhost, go ahead and

24
00:01:11,990 --> 00:01:16,890
deploy it to appspot. And then you go to cron/set_announcement

25
00:01:16,890 --> 00:01:21,360
to actually run the setAnnouncement function and again,

26
00:01:21,360 --> 00:01:23,300
the web browser is not going to change. Whatever it's

27
00:01:23,300 --> 00:01:25,390
showing when you go to this URL, it'll continue

28
00:01:25,390 --> 00:01:28,550
to show after it executes the function. And in

29
00:01:28,550 --> 00:01:32,570
the APIs explorer, you can test the getAnnouncement function

30
00:01:32,570 --> 00:01:34,765
to get the values of the announcement out of

31
00:01:34,765 --> 00:01:37,586
memcache. And then use memcache viewer to check that

32
00:01:37,586 --> 00:01:42,080
your announcements are in memcache. Obviously they will be

33
00:01:42,080 --> 00:01:44,930
if getAnnouncement works but it's good to practice using

34
00:01:44,930 --> 00:01:48,150
the memcache viewer. And you can actually get the value

35
00:01:48,150 --> 00:01:51,570
of the entry that's keyed by recent announcements. So

36
00:01:51,570 --> 00:01:54,920
go ahead and do that. And then when everything's working,

37
00:01:54,920 --> 00:01:57,580
on your app, deployed on appspot, go ahead and

38
00:01:57,580 --> 00:02:00,545
enter your app ID here. As you're testing the get

39
00:02:00,545 --> 00:02:03,790
and setAnnouncement functionm you're going to obviously need to make

40
00:02:03,790 --> 00:02:07,450
sure that you have some conferences where the seats available

41
00:02:07,450 --> 00:02:10,650
is between 0 and 5. Otherwise, you won't get

42
00:02:10,650 --> 00:02:12,980
any results and you won't get any announcement saved.
