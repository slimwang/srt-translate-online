1
00:00:00,240 --> 00:00:04,200
Now let's look at all the heavy lifting that needs to be done by runtime in

2
00:00:04,200 --> 00:00:08,090
order to facilitate this map-produced style of programming.

3
00:00:08,090 --> 00:00:10,810
The app developer writes his map function and reduce

4
00:00:10,810 --> 00:00:15,260
function, and instantiates the programming library by calling

5
00:00:15,260 --> 00:00:19,610
map produce. And the programming library splits the input

6
00:00:19,610 --> 00:00:22,430
files that is provided by the user, that

7
00:00:22,430 --> 00:00:24,830
is a key value space provided by the user,

8
00:00:24,830 --> 00:00:32,159
into M splits. The number of splits of the input key value pairs,namely M,

9
00:00:32,159 --> 00:00:38,010
can be automatic by the programming system. Or M can also be specified by

10
00:00:38,010 --> 00:00:43,870
the user. In any case, once M is specified or automatically determined by the

11
00:00:43,870 --> 00:00:46,720
programming framework, it splits the input key

12
00:00:46,720 --> 00:00:49,870
value space into M splits. The next

13
00:00:49,870 --> 00:00:53,000
thing that happens in the programming environment

14
00:00:53,000 --> 00:00:56,710
is to spawn the master for this particular

15
00:00:56,710 --> 00:00:59,420
map reduced computation, and all the worker

16
00:00:59,420 --> 00:01:02,380
threads That are going to carry out the

17
00:01:02,380 --> 00:01:05,470
work involved in map functions and reduce

18
00:01:05,470 --> 00:01:09,650
functions. The master is special because the master

19
00:01:09,650 --> 00:01:11,680
is the one that is sort of overseeing

20
00:01:11,680 --> 00:01:15,310
the whole operation and keeping tab on which

21
00:01:15,310 --> 00:01:17,905
workers are doing what functions, when are they

22
00:01:17,905 --> 00:01:22,040
done,when to start new work, when to say

23
00:01:22,040 --> 00:01:24,240
that the computation is done. All of those

24
00:01:24,240 --> 00:01:28,583
chores are being orchestrated by this master. The next

25
00:01:28,583 --> 00:01:31,190
thing that happens is that the master is

26
00:01:31,190 --> 00:01:34,192
going to assign some number of worker threads

27
00:01:34,192 --> 00:01:37,036
as the mapper worker threads and the number

28
00:01:37,036 --> 00:01:40,670
of mapper working threads may correspond to the number

29
00:01:40,670 --> 00:01:45,477
of splits that it has done in the beginning. So there are M splits, then M

30
00:01:45,477 --> 00:01:48,517
worker threads are going to be assigned to mapping

31
00:01:48,517 --> 00:01:52,017
function. So each worker thread is going to take

32
00:01:52,017 --> 00:01:55,086
one portion of the input file split that

33
00:01:55,086 --> 00:01:58,434
have been done, and apply the map function

34
00:01:58,434 --> 00:02:02,160
on that particular input split. The next thing

35
00:02:02,160 --> 00:02:06,030
that happens is that the master assigns reduce

36
00:02:06,030 --> 00:02:10,860
tasks to some number of worker threads and the number of reducers to be

37
00:02:10,860 --> 00:02:16,350
assigned to the workers, R, is something that is decided by the application.

38
00:02:16,350 --> 00:02:21,400
Recall in the example that I gave you about looking for specific names. In

39
00:02:21,400 --> 00:02:26,400
an input corpus, the number of unique names is something that

40
00:02:26,400 --> 00:02:31,240
the app developer is specifying. That's where the

41
00:02:31,240 --> 00:02:33,720
number R comes from. That's the number

42
00:02:33,720 --> 00:02:37,110
of splits that the user is specifying, and

43
00:02:37,110 --> 00:02:39,265
that parameter is going to be used by the

44
00:02:39,265 --> 00:02:43,270
master to assign some number of workers as

45
00:02:43,270 --> 00:02:49,110
reducers. The next thing that the master does. Is to plumb the mapper to the

46
00:02:49,110 --> 00:02:52,560
reducers. Because now when the mappers produce that

47
00:02:52,560 --> 00:02:56,730
output. That output has to be sent over

48
00:02:56,730 --> 00:02:59,660
to the consumers of the intermediate results of

49
00:02:59,660 --> 00:03:03,130
the mapper, namely the reducers. And setting up this

50
00:03:03,130 --> 00:03:07,300
communication path between the producers of data The

51
00:03:07,300 --> 00:03:10,930
mappers and the consumers of data that it uses

52
00:03:10,930 --> 00:03:15,990
is the plumbing that the master does as the next thing. Now it's time to get to

53
00:03:15,990 --> 00:03:18,210
work. The map phase, what it is going to

54
00:03:18,210 --> 00:03:22,010
do is, it is going to read its respective split.

55
00:03:22,010 --> 00:03:24,270
So each of these workers is assigned to the

56
00:03:24,270 --> 00:03:27,370
mapping function. So each of the worker is working

57
00:03:27,370 --> 00:03:30,060
on a particular split. And what they're going to do

58
00:03:30,060 --> 00:03:34,080
is read from the local disc, the split that

59
00:03:34,080 --> 00:03:38,100
they've been assigned, parse the input, and then call

60
00:03:38,100 --> 00:03:41,670
the user defined map function. The user defined map

61
00:03:41,670 --> 00:03:44,660
function is the one that is doing the core

62
00:03:44,660 --> 00:03:47,060
of the work that needs to be done on the

63
00:03:47,060 --> 00:03:50,400
input data set to produce the intermediate output.

64
00:03:50,400 --> 00:03:52,720
The rest of it are things that needs to

65
00:03:52,720 --> 00:03:55,810
be done in order to facilitate the work

66
00:03:55,810 --> 00:03:58,000
to be carried out by the domain expert in

67
00:03:58,000 --> 00:04:00,920
the map function. And the intermediate key value

68
00:04:00,920 --> 00:04:04,790
pairs that we produced by the mapper will be

69
00:04:04,790 --> 00:04:07,640
buffered in memory, so each one of these workers

70
00:04:07,640 --> 00:04:12,170
Is doing a portion of processing the input key

71
00:04:12,170 --> 00:04:15,630
value place and producing the respective

72
00:04:15,630 --> 00:04:20,920
outputs. And periodically the intermediate results are

73
00:04:20,920 --> 00:04:25,980
going to be written to files, which are on the local disks of the

74
00:04:25,980 --> 00:04:31,130
worker or the respective workers. For this guy, on its local disk, its

75
00:04:31,130 --> 00:04:34,470
going to write intermediate files corresponding to the

76
00:04:34,470 --> 00:04:37,330
output of the map function. Similarly this

77
00:04:37,330 --> 00:04:43,200
worker is going to write to its local disk, the intermediate files and so on.

78
00:04:43,200 --> 00:04:49,330
And because the application developer has specified that there are R splits in

79
00:04:49,330 --> 00:04:53,150
the reducers. Each worker, meaning each

80
00:04:53,150 --> 00:04:55,440
map function that is associated with that

81
00:04:55,440 --> 00:05:03,480
worker, is going to produce R intermediate file. One for each of the R workers

82
00:05:03,480 --> 00:05:06,720
that are going to be doing the reduce operation.

83
00:05:06,720 --> 00:05:10,030
And all these intermediate files are stored on

84
00:05:10,030 --> 00:05:13,090
the local disk associated with each of these

85
00:05:13,090 --> 00:05:17,160
computational nodes carrying out the worker function corresponding to

86
00:05:17,160 --> 00:05:19,890
the map phase. And when they are done

87
00:05:19,890 --> 00:05:22,950
with the map operation for the split that they

88
00:05:22,950 --> 00:05:25,530
are handling, the worker will inform the master

89
00:05:25,530 --> 00:05:28,910
that i'm done. And what the master's waiting on

90
00:05:28,910 --> 00:05:35,430
is waiting on all of these mappers to get done before letting the workers to get

91
00:05:35,430 --> 00:05:41,290
going on the input data set. So in this sense, the master is like the conductor

92
00:05:41,290 --> 00:05:44,230
of an orchestra. He is started this mapping

93
00:05:44,230 --> 00:05:46,550
function waiting for all of these guys to

94
00:05:46,550 --> 00:05:50,130
get done, and when they indicate that they

95
00:05:50,130 --> 00:05:54,250
have done the work by notifying the master.

96
00:05:54,250 --> 00:05:57,420
And all of the M mappers that have

97
00:05:57,420 --> 00:05:59,390
been assinged to these workers have completed that

98
00:05:59,390 --> 00:06:04,620
work, then the masters say, okay now it is time to move on to the reduced phase.
