1
00:00:00,000 --> 00:00:04,000
These are two pretty fundamental problems.

2
00:00:04,000 --> 00:00:07,000
That's not going to work, so we need to make some improvements here.

3
00:00:07,000 --> 00:00:12,000
The way to solve this problem is to include more randomness in the key here,

4
00:00:12,000 --> 00:00:17,000
so an attacker who can replace this won't be able to trick the parties into agreeing

5
00:00:17,000 --> 00:00:22,000
to a different key, and then they can verify that they've agreed on the same key.

6
00:00:22,000 --> 00:00:26,000
What we're going to do is add extra random nonsense to these steps.

7
00:00:26,000 --> 00:00:32,000
In addition to the messages, the client will generate a random value--we'll call that rc--

8
00:00:32,000 --> 00:00:34,000
that will be added to this message.

9
00:00:34,000 --> 00:00:38,000
The server will generate a random value rs that will be added to this message.

10
00:00:38,000 --> 00:00:40,000
This value will still be created.

11
00:00:40,000 --> 00:00:43,000
This is what's call the premaster secret.

12
00:00:43,000 --> 00:00:48,000
What we're going to send here is going to include a little extra information.

13
00:00:48,000 --> 00:00:53,000
It's still going to include r--the premaster secret. We need to share that with the server.

14
00:00:53,000 --> 00:00:55,000
We're going to pad this.

15
00:00:55,000 --> 00:00:59,000
This will make search attacks more difficult, prevent some of the weaknesses.

16
00:00:59,000 --> 00:01:02,000
If this is a message, happens to be a small number.

17
00:01:02,000 --> 00:01:06,000
We're going to use the PKCS protocol that we talked about in Unit 4

18
00:01:06,000 --> 00:01:08,000
to use RSA more securely.

19
00:01:08,000 --> 00:01:12,000
If this were some other cipher, we could use a different way of padding it.

20
00:01:12,000 --> 00:01:15,000
We're also going to add to r something about the client version,

21
00:01:15,000 --> 00:01:21,000
and this will be useful for verifying the previous steps have not been tampered with.

22
00:01:21,000 --> 00:01:24,000
Instead of making the key just r,

23
00:01:24,000 --> 00:01:27,000
the key is going to combine all the randomness that we've used so far.

24
00:01:27,000 --> 00:01:32,000
The way we'll compute the key, which is now called the master secret,

25
00:01:32,000 --> 00:01:35,000
is by using a pseudo-random function--this is like a hash function--

26
00:01:35,000 --> 00:01:40,000
where what it takes as inputs are the premaster secret--that's r--

27
00:01:40,000 --> 00:01:46,000
and it also takes a label, which is just identifying this as the master secret,

28
00:01:46,000 --> 00:01:53,000
which gets combined with the value of rc--the client's randomness--and the value of rs--

29
00:01:53,000 --> 00:01:55,000
the servers randomness.

30
00:01:55,000 --> 00:01:59,000
What H is is a way of using a combination of hash functions where it takes a key

31
00:01:59,000 --> 00:02:02,000
as well as the value that you're hashing.

32
00:02:02,000 --> 00:02:09,000
What it produces is 384 bits, which gets divided into three 128-bit keys.

33
00:02:09,000 --> 00:02:12,000
One of these will be used as the key for symmetric encryption,

34
00:02:12,000 --> 00:02:15,000
and that's using an algorithm like RC4, typically.

35
00:02:15,000 --> 00:02:22,000
One of these will become the IV, and that's the initialization vector which we need for CBC--

36
00:02:22,000 --> 00:02:24,000
cipher block chaining mode--that we'll use.

37
00:02:24,000 --> 00:02:27,000
We'll talk about the protocol, how it uses that, later.

38
00:02:27,000 --> 00:02:30,000
The other one would be a key that's used for a keyed hash.

39
00:02:30,000 --> 00:02:33,000
We've previously talked about hash functions that didn't use a key.

40
00:02:33,000 --> 00:02:38,000
The important property of the hash function is it gives us a one-way mapping.

41
00:02:38,000 --> 00:02:40,000
A keyed hash function--that mapping depends on the key.

42
00:02:40,000 --> 00:02:43,000
One way to think about that, which is not quite the way these work,

43
00:02:43,000 --> 00:02:47,000
but it's really concatenating that key with the value we're hashing.

44
00:02:49,000 --> 00:02:52,000
If it's a strong cryptographic hash function, that should be effectively equivalent to a keyed hash function.

45
00:02:52,000 --> 00:02:58,000
This change means if an active attacker can interfere with this message,

46
00:02:58,000 --> 00:03:01,000
they still can't control what gets computed here.

47
00:03:01,000 --> 00:03:04,000
This depends on the randomness used in the previous two steps.

48
00:03:04,000 --> 00:03:08,000
What happens before the channel is used for anything secure

49
00:03:08,000 --> 00:03:12,000
is the client and server need to verify that they got the same key.

50
00:03:12,000 --> 00:03:15,000
We add a step here to finish the handshake.

51
00:03:15,000 --> 00:03:19,000
The way that step works is we encrypt the finished message,

52
00:03:19,000 --> 00:03:22,000
using the key extracted from the master secret.

53
00:03:22,000 --> 00:03:25,000
That means if any of these values were tampered with

54
00:03:25,000 --> 00:03:29,000
that key would be different, the handshake would never be finished,

55
00:03:29,000 --> 00:03:33,000
and there would never be any secure communication sent using that key,

56
00:03:33,000 --> 00:03:37,000
because both parties verify the handshake before continuing.

57
00:03:37,000 --> 00:03:39,000
This fixes the first problem.

58
00:03:39,000 --> 00:03:43,000
Now there's no way for the middle attacker to hijack the session.

59
00:03:43,000 --> 00:03:50,000
If they tamper with this message, it will be detected when the handshake finish is done

60
00:03:50,000 --> 00:03:53,000
using a key that depended on all these values.

61
00:03:53,000 --> 00:03:56,000
Depending on the random values here also prevents replay attacks.

62
00:03:56,000 --> 00:03:59,000
Since new random values are used for each protocol execution,

63
00:03:59,000 --> 00:04:01,000
there is no way to replay it.

64
00:04:01,000 --> 00:04:05,000
The key depends on these values that were used previously.
