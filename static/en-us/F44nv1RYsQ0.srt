1
00:00:00,237 --> 00:00:02,609
So the idea of the data layout transformation

2
00:00:02,609 --> 00:00:06,986
is to reorganize the way data is laid out in memory to facilitate better memory performance.

3
00:00:06,986 --> 00:00:10,248
So a really common example of this data layout transformation

4
00:00:10,248 --> 00:00:12,452
is something we've seen before where we take data,

5
00:00:12,452 --> 00:00:15,385
which is laid out as an array of structures, like so.

6
00:00:15,385 --> 00:00:17,266
An array of structures.

7
00:00:17,266 --> 00:00:20,389
And transform it into a structure of arrays.

8
00:00:20,389 --> 00:00:22,725
Here's what those layouts would look like in memory.

9
00:00:22,725 --> 00:00:24,503
In the first case,

10
00:00:24,503 --> 00:00:27,498
the different fields in the structure are laid out one after another.

11
00:00:27,498 --> 00:00:29,556
Each structure is adjacent.

12
00:00:29,556 --> 00:00:32,674
In the next case, they're all laid out adjacently.

13
00:00:32,674 --> 00:00:34,176
So as a quick quiz,

14
00:00:34,176 --> 00:00:39,283
which of these 2 layouts: the array of structures or AOS or the structure of arrays, SOA,

15
00:00:39,283 --> 00:00:41,712
will perform better on the little code snippets I've given here?

16
00:00:41,712 --> 00:00:44,486
So you set i equal to the thread index.

17
00:00:44,486 --> 00:00:48,689
And then we access field a for a given thread.

18
00:00:48,689 --> 00:00:53,001
And then we access field b, c, and d.

19
00:00:53,001 --> 00:00:54,729
And then over here I've done the same code,

20
00:00:54,729 --> 00:00:57,262
but I've transformed it to use this data layout.

21
00:00:57,262 --> 00:01:02,330
So the question is to check off, which of these 2 data layouts you think will perform better?
