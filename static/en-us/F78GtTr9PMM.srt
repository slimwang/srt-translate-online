1
00:00:00,690 --> 00:00:04,800
Our fifth architectural style is implicit invocation.

2
00:00:04,800 --> 00:00:08,680
And here let's first examine the question of reliability.

3
00:00:08,680 --> 00:00:11,330
Well, if you're approached to event delivery,

4
00:00:11,330 --> 00:00:15,230
in an implicit invocation style it's centralized you are more easily able to

5
00:00:15,230 --> 00:00:19,270
deal with unexpected events, thereby improving reliability.

6
00:00:20,320 --> 00:00:24,100
On the other hand, because interactions are implicit, overall system

7
00:00:24,100 --> 00:00:27,860
understandability is reduced, potentially compromising reliability.

8
00:00:28,860 --> 00:00:32,890
Or the other four system qualities, performance, might be

9
00:00:32,890 --> 00:00:36,240
compromised because of the extra communication due to the bookkeeping and

10
00:00:36,240 --> 00:00:41,005
indirection can lead to context swapping problems.

11
00:00:41,005 --> 00:00:44,510
Maintainability, there may be increased reuse due to the independents of

12
00:00:44,510 --> 00:00:46,030
the components.

13
00:00:46,030 --> 00:00:48,460
On the other hand, as far as safety is concerned,

14
00:00:48,460 --> 00:00:52,464
increased interaction complexity may make it harder to ensure safety.

15
00:00:52,464 --> 00:00:56,510
And with to respect security as we saw with object orientated,

16
00:00:56,510 --> 00:01:01,430
object orientation, the fragmentation of an implicit location architectural

17
00:01:01,430 --> 00:01:05,950
style can cause problems, but encapsulation can help to mitigate them.
