1
00:00:00,840 --> 00:00:03,940
We want to figure out what the sum of all of the numbers that are entered is.

2
00:00:03,940 --> 00:00:07,245
And also what the count is. So, we can use them to calculate the average and

3
00:00:07,245 --> 00:00:11,316
return it. We can use a do loop to collect the user input. Somewhere in the do

4
00:00:11,316 --> 00:00:15,414
loop we'll have to update value by getting the next user input. So, we'll need

5
00:00:15,414 --> 00:00:18,378
to ask the user for a double, and then read in the next double using the

6
00:00:18,378 --> 00:00:22,700
scanner. If the value is 0, then we want to quit, but if it's not, we want to

7
00:00:22,700 --> 00:00:29,080
increment count and add to the sum. So, count goes up, and sum goes up. So, how

8
00:00:29,080 --> 00:00:35,180
long do we want to keep going? We want to keep going as long as value is not 0.

9
00:00:35,180 --> 00:00:39,581
Because if value is 0, that means we read a 0 from the user. So, we continue

10
00:00:39,581 --> 00:00:44,232
doing these steps, as long as value is not 0. Let's try this, after I fix up my

11
00:00:44,232 --> 00:00:50,772
syntax errors. Running the main method. If I enter 2, it doesn't quit. Negative

12
00:00:50,772 --> 00:00:55,238
3, it doesn't quit. 0, it stops. And it gives me an average. Let's look at the

13
00:00:55,238 --> 00:00:58,600
program again though. There's some repetition here. We have to check that the

14
00:00:58,600 --> 00:01:03,092
value is not equal to 0 in two different places. We could change this so

15
00:01:03,092 --> 00:01:06,936
instead of using a do while loop it would just use a while loop and only check

16
00:01:06,936 --> 00:01:12,875
the value as not equal to 0 in one place. We would declare a Boolean to track

17
00:01:12,875 --> 00:01:17,092
whether we're done or not yet. Initially, we're not done. So, it starts as

18
00:01:17,092 --> 00:01:20,854
false. Then, as long as we're not done, we would keep doing the things in the

19
00:01:20,854 --> 00:01:24,640
loop. So, we wouldn't need the while at the bottom. As is, this loop would go

20
00:01:24,640 --> 00:01:29,180
forever because we never change the value of done. So, when do we want to say

21
00:01:29,180 --> 00:01:33,520
that we're done? Well, we want to say that we're done if somebody puts in a 0.

22
00:01:33,520 --> 00:01:38,090
So, if the value is 0, then we set done to true. This will work the same way.

23
00:01:38,090 --> 00:01:41,810
When I run the main method, it'll ask for doubles until I enter 0, and then

24
00:01:41,810 --> 00:01:47,029
give the average. You can structure any loop and a half this way using a

25
00:01:47,029 --> 00:01:50,313
Boolean to guard your condition.
