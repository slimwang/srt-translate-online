1
00:00:00,000 --> 00:00:05,000
Here's the strategy that I would suggest. There's probably a couple of different ways to do this.

2
00:00:05,000 --> 00:00:11,000
We could take the original graph that we know there is some length l path, simple path from U to V

3
00:00:11,000 --> 00:00:16,000
and what we can do is for each edge in the graph say, well, what if we delete that edge?

4
00:00:16,000 --> 00:00:21,000
Is there still a path? And if the answer is yes, then we just leave it deleted.

5
00:00:21,000 --> 00:00:30,000
But if the answer is no, that we've now actually broken a path from the last path from U to V

6
00:00:30,000 --> 00:00:34,000
of length at least l in G, then we need to leave it in there.

7
00:00:34,000 --> 00:00:37,000
We keep repeating this until all the edges have been considered

8
00:00:37,000 --> 00:00:41,000
and all that's left at the end will be the simple path.

9
00:00:41,000 --> 00:00:45,000
Why, because if there's any edges in there that's not on the simple path then

10
00:00:45,000 --> 00:00:48,000
we can delete it and there still is a simple path

11
00:00:48,000 --> 00:00:52,000
and certainly we can't delete any of the ones on that simple path and still have it work.

12
00:00:52,000 --> 00:00:56,000
What's left is exactly what we need.

13
00:00:56,000 --> 00:01:01,000
Here's my attempted datas Python code, so again,

14
00:01:01,000 --> 00:01:07,000
we check first to make sure that there really is such a path and if there isn't,

15
00:01:07,000 --> 00:01:13,000
then we just quit before we try to find it, but if there is, so somewhere in there, the path exists,

16
00:01:13,000 --> 00:01:18,000
what we're going to do is run through all the edges, so node1 in G, look at all the neighbors.

17
00:01:18,000 --> 00:01:25,000
Look at node2 which is the neighbor of node1. So now node1, node2 is an edge in the graph

18
00:01:25,000 --> 00:01:30,000
and we're going to break the link. I probably should've mentioned that earlier

19
00:01:30,000 --> 00:01:37,000
but there is actually a break-the-link piece of code int he skeleton that I gave you.

20
00:01:37,000 --> 00:01:41,000
In graph G, get rid of the edge from node1 to node2.

21
00:01:41,000 --> 00:01:45,000
You can do that in constant time and then we ask,

22
00:01:45,000 --> 00:01:51,000
is it the case that there is still a long and simple path, we ask for the decision.

23
00:01:51,000 --> 00:01:56,000
Is there a long and simple path in G from U to V of length l?

24
00:01:56,000 --> 00:02:00,000
And if the answer is no, if there's not such a path then we need to put that edge

25
00:02:00,000 --> 00:02:03,000
back in the graph; otherwise, we just leave it out.

26
00:02:03,000 --> 00:02:09,000
We'll repeat this for all the nodes, all the edges, and then we're basically done.

27
00:02:09,000 --> 00:02:13,000
All that's left in G is exactly the simple path and now we have to read it out.

28
00:02:13,000 --> 00:02:21,000
It's a little bit messier than I thought it would be, but it's definitely doable.

29
00:02:21,000 --> 00:02:26,000
You could run that graph search on this graph and that would work

30
00:02:26,000 --> 00:02:31,000
Because all that's left is the path that you want but another way to do it

31
00:02:31,000 --> 00:02:36,000
that's more specific to this case is we start off building our path from U,

32
00:02:36,000 --> 00:02:42,000
we're going to have a variable node which is a particular point in the chain.

33
00:02:42,000 --> 00:02:46,000
In the variable next which is the next point in the chain

34
00:02:46,000 --> 00:02:49,000
and we start that off with whatever is the neighbor of U.

35
00:02:49,000 --> 00:02:54,000
Notice there can only be one neighbor of U because all that's left is the simple path from U to V.

36
00:02:54,000 --> 00:03:01,000
Okay, all right, so now, we say as long as that next node that we're looking for isn't V,

37
00:03:01,000 --> 00:03:07,000
we append next to the path so far so we have the first two steps and now we're at a new node,

38
00:03:07,000 --> 00:03:13,000
this node next is going to have two neighbors, one is going to be the node we just came from, node.

39
00:03:13,000 --> 00:03:16,000
And the other one is going to be a new node that we haven't considered yet.

40
00:03:16,000 --> 00:03:21,000
To figure out which one it is, what I did is I just pulled the two of them off.

41
00:03:21,000 --> 00:03:27,000
I said let the nextnext0 be one of those neighbors and nextnext1 be the other.

42
00:03:27,000 --> 00:03:34,000
If nextnext0 is the node we just came from, then we're going to move one step along the chain.

43
00:03:34,000 --> 00:03:40,000
Node gets next and next gets nextnext1, the one that we haven't visited and; otherwise,

44
00:03:40,000 --> 00:03:45,000
next gets nextnext0, the one we haven't visited.

45
00:03:45,000 --> 00:03:51,000
When that loop is all through, then next is V, the very last step on the path

46
00:03:51,000 --> 00:03:55,000
and which add that into our path and return it.
