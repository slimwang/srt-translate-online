1
00:00:00,120 --> 00:00:01,990
Let's take a step back and look at our scatter

2
00:00:01,990 --> 00:00:05,200
plot between friend count and age. This scatter plot keeps

3
00:00:05,200 --> 00:00:08,370
us really close to the data because we are visualizing

4
00:00:08,370 --> 00:00:11,640
every point in the data set. In general, it's not possible

5
00:00:11,640 --> 00:00:15,430
to judge important quantities from such a display. Sometimes you

6
00:00:15,430 --> 00:00:18,590
want to understand how the mean or median of a variable.

7
00:00:18,590 --> 00:00:21,520
Varies with another variable. That is it can be helpful

8
00:00:21,520 --> 00:00:25,500
to summarize the relationship between two variables in other ways rather

9
00:00:25,500 --> 00:00:28,880
than just always plotting every single point. For example we can

10
00:00:28,880 --> 00:00:32,790
ask how does the average friend count vary over age. To

11
00:00:32,790 --> 00:00:35,810
do this, we could start by creating a table that for

12
00:00:35,810 --> 00:00:39,140
each age it gives us the mean and median for income.

13
00:00:39,140 --> 00:00:41,520
To do this we're going to need to learn some new code.

14
00:00:41,520 --> 00:00:44,090
To create the table, we're going to use the R package called

15
00:00:44,090 --> 00:00:48,180
D Plyr. I'm going to install and load that package now.

16
00:00:48,180 --> 00:00:50,730
The D Plyr package lets us split up a data frame and

17
00:00:50,730 --> 00:00:53,560
apply a function to some parts of the data. Some

18
00:00:53,560 --> 00:00:57,090
of the common functions you might use are filter, group

19
00:00:57,090 --> 00:01:01,400
by, mutate and arrange. You can learn more about the

20
00:01:01,400 --> 00:01:04,480
deplier package and browse there some examples from the links and

21
00:01:04,480 --> 00:01:07,280
the instructor notes. For now we'll work through an example

22
00:01:07,280 --> 00:01:09,850
together. So the first thing that I want to do is that

23
00:01:09,850 --> 00:01:13,380
I want to group my data frame by age. I'm going

24
00:01:13,380 --> 00:01:16,640
to save this grouping in a new variable called age groups.

25
00:01:16,640 --> 00:01:20,020
Next I want to summarize this new group in enough data And

26
00:01:20,020 --> 00:01:24,150
create new variables of mean thread count, median friend count and

27
00:01:24,150 --> 00:01:27,860
the number people in each group. So we're going to summarize our

28
00:01:27,860 --> 00:01:31,530
variable that we just created, age groups. Now right after I enter

29
00:01:31,530 --> 00:01:33,570
the data frame that I want to work on. I'm going to

30
00:01:33,570 --> 00:01:36,220
enter the variables that I want to create. So I want

31
00:01:36,220 --> 00:01:38,780
the friend count mean, and I get that by just taking

32
00:01:38,780 --> 00:01:41,720
the mean of the variable friend count. And I want the friend

33
00:01:41,720 --> 00:01:44,580
count median. And finally I want the number of users

34
00:01:44,580 --> 00:01:47,610
in each group. This in function can only be used for

35
00:01:47,610 --> 00:01:50,360
summarise, and it reports how many people are really in

36
00:01:50,360 --> 00:01:53,270
each group. The last thing I want to do is save this

37
00:01:53,270 --> 00:01:56,570
result into a new variable. I'll use the same dataframe

38
00:01:56,570 --> 00:02:00,210
abbreviation, and then add FCbyAge, since we have friend count by

39
00:02:00,210 --> 00:02:02,750
age. Running this code, I can see that I get a

40
00:02:02,750 --> 00:02:08,250
new dataframe with 101 observations, or groups, and four different variables.

41
00:02:08,250 --> 00:02:10,389
Using the head command, I can print out the first couple

42
00:02:10,389 --> 00:02:14,590
rows to examine the data from. So notice, I have age,

43
00:02:14,590 --> 00:02:18,260
friend count mean, friend count median, and n, the number of

44
00:02:18,260 --> 00:02:21,610
users in each group. Now the state of frame isn't in any

45
00:02:21,610 --> 00:02:24,070
order. So I'm going to rearrange my data frame so that way

46
00:02:24,070 --> 00:02:27,590
the ages go from lowest to high. I'll just use the arrange

47
00:02:27,590 --> 00:02:30,780
function on the current data frame and arrange it by age.

48
00:02:30,780 --> 00:02:34,080
I'll save the result over the variable I just had and now

49
00:02:34,080 --> 00:02:36,700
heading out the data frame I can see that I have everything in

50
00:02:36,700 --> 00:02:40,360
order. Now this may seem like a lot of codes, so I really

51
00:02:40,360 --> 00:02:43,270
encourage you to take your time and to review the code and the

52
00:02:43,270 --> 00:02:46,970
example. Make sure that you know what each piece is doing. So that

53
00:02:46,970 --> 00:02:49,780
way you can write this code on your own. The two things that

54
00:02:49,780 --> 00:02:52,080
I really want to point out is that we need to pass in a

55
00:02:52,080 --> 00:02:56,000
data frame, or a grouping, at the beginning of each function. We also

56
00:02:56,000 --> 00:02:59,200
need to save the result into a new variable, and we pass that

57
00:02:59,200 --> 00:03:02,060
into the next function. This is what makes it difficult

58
00:03:02,060 --> 00:03:04,920
to understand this code at first, so I'm going to show you

59
00:03:04,920 --> 00:03:08,180
one other way to get this same table. To start, we're

60
00:03:08,180 --> 00:03:10,680
just going to take our data set and apply some function to

61
00:03:10,680 --> 00:03:14,300
it. To do that, I'm going to use the percent period percent

62
00:03:14,300 --> 00:03:18,460
symbol. This allows me to chain functions onto our data set.

63
00:03:18,460 --> 00:03:20,990
So I'm going to perform one function at a time. One after

64
00:03:20,990 --> 00:03:24,220
another on pf. The first thing I'll do is group my

65
00:03:24,220 --> 00:03:26,570
data set by age. Now I'm going to chain on one

66
00:03:26,570 --> 00:03:30,400
more function. I'm going to summarize the result using friend count mean.

67
00:03:30,400 --> 00:03:33,610
Friend count median, and an. And finally, I'll add one

68
00:03:33,610 --> 00:03:37,710
more function, using this chain command, the percent period percent, and

69
00:03:37,710 --> 00:03:40,790
this time I'll arrange my data frame, by age. All

70
00:03:40,790 --> 00:03:43,340
of this code will produce, this exact data frame, so I

71
00:03:43,340 --> 00:03:45,850
want to make sure I save it to a variable.

72
00:03:45,850 --> 00:03:49,280
I'll save it to pf, friend count by age, and I'll

73
00:03:49,280 --> 00:03:51,250
head the data frame just like before so that way

74
00:03:51,250 --> 00:03:54,190
we can check our result. Running this code, we see that

75
00:03:54,190 --> 00:03:57,270
we get the same exact result, we have age, friend

76
00:03:57,270 --> 00:04:00,760
count mean, friend count median, and, and the number of users

77
00:04:00,760 --> 00:04:04,110
in each age group. Printing out more rows, we can

78
00:04:04,110 --> 00:04:07,860
carefully scrutinize the table to learn about the relationship between age

79
00:04:07,860 --> 00:04:11,650
and friend count. We can already notice that on average. Users

80
00:04:11,650 --> 00:04:14,320
who are age 13 have slightly lower friend counts than those

81
00:04:14,320 --> 00:04:17,040
who are 14. It also looks like the mean friend

82
00:04:17,040 --> 00:04:21,320
count peaks at age 16 and age 17. Now, of course,

83
00:04:21,320 --> 00:04:23,510
we don't want to be summarizing and digging through tables

84
00:04:23,510 --> 00:04:27,270
like this. This is very tedious. We could show these observations

85
00:04:27,270 --> 00:04:30,480
more effectively with a visualization. So let's plot this table

86
00:04:30,480 --> 00:04:34,170
of averages. This is going to be your next programming assignment.

87
00:04:34,170 --> 00:04:36,770
I want you to plot the average friend count versus

88
00:04:36,770 --> 00:04:40,070
age. Make sure that you use the the appropriate data set.

89
00:04:40,070 --> 00:04:41,660
We're using this new data set here that we

90
00:04:41,660 --> 00:04:44,280
just created. And be sure that you have the appropriate

91
00:04:44,280 --> 00:04:47,460
variable names. They're different from before. Create your plot

92
00:04:47,460 --> 00:04:49,840
in RStudio and then check your work with ours.
