1
00:00:00,420 --> 00:00:05,150
So we already said you could just do nearest neighbor, right?

2
00:00:05,150 --> 00:00:06,380
I got a point here.

3
00:00:06,380 --> 00:00:07,500
I key point here.

4
00:00:07,500 --> 00:00:10,580
I search every key point over there to find out which one is best.

5
00:00:10,580 --> 00:00:12,200
And by the way as I mentioned before,

6
00:00:12,200 --> 00:00:16,379
those of you doing the problem set will probably end up doing just this.

7
00:00:16,379 --> 00:00:18,190
But as we pointed out that could be really expensive.

8
00:00:18,190 --> 00:00:20,100
You might have thousands of points here,

9
00:00:20,100 --> 00:00:22,670
and thousands there, and that's awfully lot of combinations.

10
00:00:24,090 --> 00:00:27,850
So we're going to do something a little bit smarter, okay?

11
00:00:27,850 --> 00:00:31,430
We're going to use a approximation to a nearest neighbor search.

12
00:00:31,430 --> 00:00:34,570
And the idea is that we generate hypotheses from

13
00:00:34,570 --> 00:00:38,670
an approximate nearest neighbor, matching for each of the vectors.

14
00:00:38,670 --> 00:00:43,900
And it's essentially in, SIFT uses this algorithm by Beis and

15
00:00:43,900 --> 00:00:48,240
Lowe called best-bin, and it's a modification to the k-d tree algorithm.

16
00:00:48,240 --> 00:00:51,660
And I'm going to assume those of you who are in computer science,

17
00:00:51,660 --> 00:00:54,250
that you have some familiarity with what k-d trees are.

18
00:00:54,250 --> 00:00:57,310
It's, it's essentially you can think of it as in a binary world,

19
00:00:57,310 --> 00:01:00,630
just binary splitting things, k stands for k-dimensional.

20
00:01:00,630 --> 00:01:02,210
Tree where you, you split them along.

21
00:01:02,210 --> 00:01:07,200
It allows you to access points in essentially a a log n

22
00:01:07,200 --> 00:01:09,410
instead of a something proportional to n.

23
00:01:10,770 --> 00:01:12,630
And they did a little modification of that.

24
00:01:12,630 --> 00:01:19,070
That allowed you to sort of sort your bins that you're searching for quickly.

25
00:01:19,070 --> 00:01:21,660
And two points are important about this.

26
00:01:21,660 --> 00:01:23,690
One is that it is.

27
00:01:23,690 --> 00:01:26,230
A pretty good algorithm for the SIFT search.

28
00:01:26,230 --> 00:01:30,150
And it's reported anywhere from two to three orders of magnitude speed-up.

29
00:01:30,150 --> 00:01:31,270
And anytime you can buy two or

30
00:01:31,270 --> 00:01:34,300
three orders of magnitude speed-up, you should do that.

31
00:01:34,300 --> 00:01:36,670
Now of course, you can't cheat the piper.

32
00:01:37,890 --> 00:01:41,620
You know, nearest neighbor is certain algorithm in complexity.

33
00:01:41,620 --> 00:01:42,890
By doing it this way,

34
00:01:42,890 --> 00:01:46,070
you find the nearest neighbor, the one that actually matter.

35
00:01:46,070 --> 00:01:50,460
On approximately, again currently they'll tell you 95% of the time.

36
00:01:50,460 --> 00:01:53,160
So, you have to wonder, you know, exactly what it is.

37
00:01:53,160 --> 00:01:56,560
It can't be guaranteed but the idea is that for sort of well behaved

38
00:01:56,560 --> 00:02:01,490
systems you're getting in the 90 plus percentile, which is good because if

39
00:02:01,490 --> 00:02:04,660
you remember before, we said the descriptors aren't perfect anyway.

40
00:02:04,660 --> 00:02:07,350
So some of our matches are going to just be wrong.

41
00:02:07,350 --> 00:02:13,280
So we're finding 95% of the right matches, that's going to be pretty good.

42
00:02:13,280 --> 00:02:17,750
This figure here sort of shows you a little bit of what's going on.

43
00:02:17,750 --> 00:02:19,650
Again, this comes from, from their paper.

44
00:02:19,650 --> 00:02:21,930
The algorithm is called Best Bin First.

45
00:02:21,930 --> 00:02:24,710
The idea is, if this was your probe point, and

46
00:02:24,710 --> 00:02:29,650
you found this point D when you do normal k-D trees.

47
00:02:29,650 --> 00:02:34,820
You essentially recourse up the trees and, and, and branch out looking for

48
00:02:34,820 --> 00:02:35,930
nearest points, and

49
00:02:35,930 --> 00:02:39,710
all that they did is they had a way of sorting through the bins.

50
00:02:39,710 --> 00:02:42,350
So they would order the bins themselves, so

51
00:02:42,350 --> 00:02:44,940
they didn't just recourse through the tree.

52
00:02:44,940 --> 00:02:48,370
And it gave them this speed-up.

53
00:02:48,370 --> 00:02:52,650
And this listed here is the, the reference to the paper, and

54
00:02:52,650 --> 00:02:55,400
it just makes it easier to find the nearest neighbors.

55
00:02:55,400 --> 00:02:58,080
To, usually find the nearest neighbors.
