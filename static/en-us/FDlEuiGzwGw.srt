1
00:00:00,430 --> 00:00:02,550
So there is a problem with the centralized barrier.

2
00:00:02,550 --> 00:00:06,870
That is that when, the count has become 0, if

3
00:00:06,870 --> 00:00:10,790
these guys immediately are allow-, allowed to go on

4
00:00:10,790 --> 00:00:14,930
executing before the count has been reset to N, then

5
00:00:14,930 --> 00:00:16,690
they can all reach the next barrier and then

6
00:00:16,690 --> 00:00:19,170
they fall through. And that is a problem. So the

7
00:00:19,170 --> 00:00:22,290
key thing to do To avoid this problem, or to

8
00:00:22,290 --> 00:00:26,030
overcome this problem, is to make sure that the threads

9
00:00:26,030 --> 00:00:28,630
that are waiting here, they don't leave the barrier before

10
00:00:28,630 --> 00:00:31,950
the count has been reset to N. Right? So they're all

11
00:00:31,950 --> 00:00:35,180
waiting here for the count to become zero, and once

12
00:00:35,180 --> 00:00:37,910
the count has become zero they are ready to go, but,

13
00:00:37,910 --> 00:00:40,250
we don't want to let the go yet. We want to let

14
00:00:40,250 --> 00:00:43,460
them go only after the count has been reset to N.

15
00:00:43,460 --> 00:00:46,060
So what we're going to do is, we're going to add another

16
00:00:46,060 --> 00:00:51,150
spin loop here. And that is, after they recognize that the

17
00:00:51,150 --> 00:00:54,590
count has become 0, they're going to wait till the count

18
00:00:54,590 --> 00:00:57,940
is not N yet. And so this ordering of these two

19
00:00:57,940 --> 00:01:01,370
statements is very important, obviously. So, we want to wait till

20
00:01:01,370 --> 00:01:04,660
the count has become 0. At that point we know that

21
00:01:04,660 --> 00:01:07,830
the value is over, but we want to make sure that

22
00:01:07,830 --> 00:01:10,620
the counter has been reset to N by the last guy,

23
00:01:10,620 --> 00:01:13,370
and once that has been done, then we are ready to

24
00:01:13,370 --> 00:01:16,620
go on executing the code that we need to execute til,

25
00:01:16,620 --> 00:01:18,650
til we get to the next barrier. So we solve

26
00:01:18,650 --> 00:01:21,350
the problem with the first version of the centralized barrier,

27
00:01:21,350 --> 00:01:24,470
and that is the counting barrier. By having a second

28
00:01:24,470 --> 00:01:27,630
spindle. That's the problem, right? There are two spin loops

29
00:01:27,630 --> 00:01:31,440
for every barrier in the counting algorithm, and ideally, we

30
00:01:31,440 --> 00:01:34,550
would like to have a single spindle. And and that's

31
00:01:34,550 --> 00:01:36,890
the reason that we have this particular algorithm, which is

32
00:01:36,890 --> 00:01:41,790
called sense reversing barrier. If you recall in the counting barrier,

33
00:01:41,790 --> 00:01:44,640
we needed two spinning episodes. The first spinning episode

34
00:01:44,640 --> 00:01:48,010
was When you arrive at the barrier, decrement the count,

35
00:01:48,010 --> 00:01:50,330
and wait for the count to become 0. That's

36
00:01:50,330 --> 00:01:53,830
the first spinning episode. And the second spinning episode to

37
00:01:53,830 --> 00:01:56,510
leave the barrier, what you need to do was

38
00:01:56,510 --> 00:01:59,930
to make sure that the count has become N, right?

39
00:01:59,930 --> 00:02:02,140
Those were the two spinning episodes that were there

40
00:02:02,140 --> 00:02:06,850
in the counting barrier. And in the sense reversal, Barrier,

41
00:02:06,850 --> 00:02:09,740
we're going to get rid of one of those

42
00:02:09,740 --> 00:02:14,040
spinning episodes. The arrival one. We'll get rid of

43
00:02:14,040 --> 00:02:17,360
it. So we don't have to spin on count

44
00:02:17,360 --> 00:02:20,600
becoming zero. And we'll see how that is done.

45
00:02:20,600 --> 00:02:22,720
So what you notice is that in addition

46
00:02:22,720 --> 00:02:25,040
to the count, there is a sense variable, in

47
00:02:25,040 --> 00:02:28,510
the shared variables that we have, we included a

48
00:02:28,510 --> 00:02:31,880
new variable called sense variable that's also shared by

49
00:02:31,880 --> 00:02:35,410
all the processes that want to accomplish a barrier

50
00:02:35,410 --> 00:02:39,890
synchronization. And the idea behind the sense variable is

51
00:02:39,890 --> 00:02:43,240
that the sense variable is going to be true for

52
00:02:43,240 --> 00:02:47,340
One barrier episode, and it's going to be false for

53
00:02:47,340 --> 00:02:50,540
the next barrier. So because we, at most you

54
00:02:50,540 --> 00:02:52,960
have one barrier at a time, and therefore, if

55
00:02:52,960 --> 00:02:55,290
you call this barrier the true barrier, the next

56
00:02:55,290 --> 00:02:57,180
barrier is going to be the false barrier So that's

57
00:02:57,180 --> 00:03:02,290
the way we can identify which barrier we are in at any particular point of

58
00:03:02,290 --> 00:03:06,300
time so far as a given thread is concerned by looking at the sense variable.
