1
00:00:00,110 --> 00:00:04,540
To answer a question,
both are okay options.

2
00:00:04,540 --> 00:00:09,520
This option is called software TLB
mishandling and it has the advantage of

3
00:00:09,520 --> 00:00:13,410
letting the operating system use
any sort of page-table that it

4
00:00:13,410 --> 00:00:16,970
wants because the hardware doesn't
really need to access the page-table.

5
00:00:16,970 --> 00:00:19,000
The hardware simply has the TLB.

6
00:00:19,000 --> 00:00:22,300
And the job of the operating
system is to put the correct

7
00:00:22,300 --> 00:00:24,300
translations into the TLB.

8
00:00:24,300 --> 00:00:28,510
But you can use any organization for
the page table it wants.

9
00:00:28,510 --> 00:00:29,440
So the operating system,

10
00:00:29,440 --> 00:00:32,840
for example, may not even have
the page table in form of a table.

11
00:00:32,840 --> 00:00:37,450
It can use a binary tree, or
a hash table, or anything else it wants.

12
00:00:37,450 --> 00:00:40,800
The second option, where the processor
automatically reads page tables and

13
00:00:40,800 --> 00:00:45,500
updates the TLB is called
hardware TLB miss handling.

14
00:00:45,500 --> 00:00:49,120
In this case, the page tables need to be

15
00:00:49,120 --> 00:00:52,050
in a form that is easily
accessible by the hardware.

16
00:00:52,050 --> 00:00:53,563
So we will have a flat or

17
00:00:53,563 --> 00:00:59,370
a multi-level page table like we have
seen already in our previous videos.

18
00:00:59,370 --> 00:01:02,770
This approach does require more
hardware, because the hardware now needs

19
00:01:02,770 --> 00:01:06,900
to actually be able to access the page
tables and sequence the accesses to

20
00:01:06,900 --> 00:01:11,300
the multiple levels and so on, but
it is faster than software handling.

21
00:01:11,300 --> 00:01:13,637
This is treated kind of
like a cache miss almost,

22
00:01:13,637 --> 00:01:16,723
whereas here we need to execute
a little program to fill the TLB.

23
00:01:16,723 --> 00:01:21,834
So because this is faster and
because hardware is cheap these days,

24
00:01:21,834 --> 00:01:26,230
most high performance processors
like x86 will use this

25
00:01:26,230 --> 00:01:29,940
approach of hardware TLB mishandling.

26
00:01:29,940 --> 00:01:34,510
But some embedded processors will
use the software TLB mishandling

27
00:01:34,510 --> 00:01:37,790
because they're concerned
about the hardware cost.

28
00:01:37,790 --> 00:01:40,420
So they want to be as
simple as possible.

29
00:01:40,420 --> 00:01:43,410
And also because in this
embedded processors,

30
00:01:43,410 --> 00:01:48,500
TLB misses occur frequently because they
are running more regular applications.
