1
00:00:00,012 --> 00:00:02,047
Okay, so the next step of the algorithm

2
00:00:02,047 --> 00:00:05,008
is to the compute the nodes that are 4 hops away,

3
00:00:05,008 --> 00:00:07,193
and we're going to be able to do this in a similar way.

4
00:00:07,193 --> 00:00:12,274
Say we are starting with node 0 and we want the node that is 4 hops away from node 0.

5
00:00:12,274 --> 00:00:17,386
So we know the node that's 2 hops away and then the node that is 2 hops away from node 2 is node 4.

6
00:00:17,386 --> 00:00:18,858
We'll fill in a 4 here.

7
00:00:18,858 --> 00:00:20,888
To find the node that is 4 hops away from node 1,

8
00:00:20,888 --> 00:00:23,861
we know the node that's 2 hops away,

9
00:00:23,861 --> 00:00:26,398
and the node that's 2 hops away from it is node 0 and so on.

10
00:00:26,398 --> 00:00:29,185
And then we'll do the same thing for the last line here

11
00:00:29,185 --> 00:00:33,150
and find the nodes that are 8 hops away from each of these starting nodes.

12
00:00:33,150 --> 00:00:36,210
And we'll continue this progress as long as the number of hops away

13
00:00:36,210 --> 00:00:37,883
isn't greater than the number of nodes.

14
00:00:37,883 --> 00:00:40,141
In our example here, for instance, we have 10 nodes,

15
00:00:40,141 --> 00:00:43,544
so we will compute the nodes that are 1, 2, 4, and 8 hops away,

16
00:00:43,544 --> 00:00:46,911
but if we computed more, we would be going all the way around the list and beyond.

17
00:00:46,911 --> 00:00:49,921
How much work does it take to compute this entire table

18
00:00:49,921 --> 00:00:54,877
for N nodes proportional to N, N log N, N-squared, or N-cubed?
