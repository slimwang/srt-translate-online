1
00:00:00,000 --> 00:00:03,000
The final strong oracle I want to talk about

2
00:00:03,000 --> 00:00:06,000
is what I'm going to call a null space transformation.

3
00:00:06,000 --> 00:00:09,000
This is where we take a random test case or any test case, of course,

4
00:00:09,000 --> 00:00:13,000
and we make some sort of a change to it that shouldn't affect how it's treated

5
00:00:13,000 --> 00:00:15,000
by the software under test.

6
00:00:15,000 --> 00:00:17,000
And so one thing we could do just as a trivial example

7
00:00:17,000 --> 00:00:19,000
is we could start with a simple Python function.

8
00:00:19,000 --> 00:00:21,000
This is the input to the null space transformation.

9
00:00:21,000 --> 00:00:24,000
So here we have foo of a and b. It returns the sum of a and b.

10
00:00:24,000 --> 00:00:26,000
And one possible null space transformation on this

11
00:00:26,000 --> 00:00:29,000
would be to add a level of parentheses or maybe several.

12
00:00:29,000 --> 00:00:32,000
This is a null space transformation because we've transformed the test case,

13
00:00:32,000 --> 00:00:36,000
possibly in a non-trivial way, although here we've done something pretty trivial,

14
00:00:36,000 --> 00:00:38,000
but we've transformed it in such a way that we know that the meaning of the test case

15
00:00:38,000 --> 00:00:40,000
shouldn't have changed.

16
00:00:40,000 --> 00:00:42,000
So now we can do something very much like differential testing,

17
00:00:42,000 --> 00:00:45,000
but instead of taking the same program and running it through 2 implementations of Python

18
00:00:45,000 --> 00:00:47,000
we're going to take 2 programs which are semantically identical

19
00:00:47,000 --> 00:00:50,000
and run it through the same implementation of Python.

20
00:00:50,000 --> 00:00:52,000
And if that implementation of Python treats this differently--

21
00:00:52,000 --> 00:00:56,000
that is to say, it interprets this code in such a way that it returns some different answer--

22
00:00:56,000 --> 00:00:58,000
then we've found a bug in it.

23
00:00:58,000 --> 00:01:01,000
So of course we could always do things even more elaborate.

24
00:01:01,000 --> 00:01:03,000
Here we're calling some sort of an identity function on a--

25
00:01:03,000 --> 00:01:06,000
that is to say, some function that is guaranteed to return the same value of a

26
00:01:06,000 --> 00:01:10,000
that it's called with, although of course that's not going to be apparent to the interpreter--

27
00:01:10,000 --> 00:01:13,000
and then instead of adding b to a, we're going to subtract -b from a.

28
00:01:13,000 --> 00:01:15,000
So another little null space transformation.

29
00:01:15,000 --> 00:01:17,000
I've heard of these kind of things.

30
00:01:17,000 --> 00:01:19,000
I don't have any personal experience using null space transformations to find bugs,

31
00:01:19,000 --> 00:01:22,000
but I've heard of people doing this kind of thing, and apparently it can be useful.

32
00:01:22,000 --> 00:01:24,000
So what have we done here?

33
00:01:24,000 --> 00:01:26,000
What we've done is seen that in realistic situations,

34
00:01:26,000 --> 00:01:29,000
there are a lot of potential oracles available for performing random testing.

35
00:01:29,000 --> 00:01:33,000
And so the conventional wisdom--at least as it's expressed in that article

36
00:01:33,000 --> 00:01:35,000
or that chapter on random testing--that oracles are almost never available

37
00:01:35,000 --> 00:01:37,000
I think is probably not right.

38
00:01:37,000 --> 00:01:39,000
It's often the case that if we think about it for a while,

39
00:01:39,000 --> 00:01:42,000
that if we're potentially willing to invest some time in creating a good oracle,

40
00:01:42,000 --> 00:01:45,000
then we can very often find something to use for random testing.
