1
00:00:00,000 --> 00:00:05,000
My name is Andreas Zeller. I'm a researcher at Saarland University in Germany.

2
00:00:05,000 --> 00:00:11,000
And I am researching large programs and why they fail.

3
00:00:11,000 --> 00:00:19,000
I have done some fail work in automatic debugging, also in mining the histories of programs.

4
00:00:19,000 --> 00:00:23,000
I've been working with companies such as Microsoft, SAP, or Google,

5
00:00:23,000 --> 00:00:30,000
examined their bugs, finding out what was wrong, and it struck me

6
00:00:30,000 --> 00:00:38,000
that there's almost no teaching material available on debugging and how to debug programs.

7
00:00:38,000 --> 00:00:45,000
So today, I'm going start with you a course on how to do debugging systematically,

8
00:00:45,000 --> 00:00:51,000
effectively, and in many cases, even automatically--enjoy.

9
00:00:51,000 --> 00:00:54,000
Welcome to the Udacity course on debugging.

10
00:00:54,000 --> 00:00:58,000
The aim of this course is to teach a systematic approach to debugging

11
00:00:58,000 --> 00:01:04,000
and we're even going to explore a number of automatic tools that do the debugging for you.

12
00:01:04,000 --> 00:01:07,000
We're going to explore how debuggers work.

13
00:01:07,000 --> 00:01:11,000
In particular, the scientific method of debugging by which

14
00:01:11,000 --> 00:01:15,000
through a series of experiments we gradually refine a hypothesis

15
00:01:15,000 --> 00:01:19,000
until we end up with a diagnosis on why the program failed.

16
00:01:19,000 --> 00:01:23,000
On top of that, we're going to build our own interactive debugger in Python.

17
00:01:23,000 --> 00:01:25,000
In the next unit, I'm going to introduce you to one of the most

18
00:01:25,000 --> 00:01:29,000
powerful debugging tools ever invented, that is assertions.

19
00:01:29,000 --> 00:01:33,000
Assertions are statements in the program that automatically check

20
00:01:33,000 --> 00:01:36,000
whether the state of the program is still correct.

21
00:01:36,000 --> 00:01:39,000
That is, while you're program is executing, the computer constantly monitors

22
00:01:39,000 --> 00:01:42,000
the program on whether a bug has occurred.

23
00:01:42,000 --> 00:01:48,000
This allows you to very quickly and effectively find out where a bug was first introduced.

24
00:01:48,000 --> 00:01:54,000
On top of that, we're going to build a tool that makes you infer assertions from executions.

25
00:01:54,000 --> 00:01:58,000
In unit 3, I'm going to show you a technique named delta debugging

26
00:01:58,000 --> 00:02:01,000
which automatically simplifies problems.

27
00:02:01,000 --> 00:02:07,000
For instance, here's this 900-line HTML file which causes to crash in a program which processes it.

28
00:02:07,000 --> 00:02:10,000
With delta debugging, you can reduce this to just the eight characters

29
00:02:10,000 --> 00:02:14,000
that produce the bug just as well and all of this automatically.

30
00:02:14,000 --> 00:02:21,000
In the next unit, I'm going to show you how to find out where a specific failure came from.

31
00:02:21,000 --> 00:02:23,000
You see an execution as a series of states.

32
00:02:23,000 --> 00:02:26,000
We are going to explore techniques that help you in tracking

33
00:02:26,000 --> 00:02:29,000
the way of an error all through the program execution.

34
00:02:29,000 --> 00:02:35,000
And on top of that, we're going to build a tool that isolates such cause effect chamge automatically.

35
00:02:35,000 --> 00:02:39,000
In unit 5, we've been looking at reproducing failures.

36
00:02:39,000 --> 00:02:43,000
We're going to look at all the various input sources for your program

37
00:02:43,000 --> 00:02:47,000
and discuss how to capture and replay them such that you can faithfully

38
00:02:47,000 --> 00:02:49,000
reproduce a failure that happens in the field.

39
00:02:49,000 --> 00:02:54,000
Plus, we're going to explore statistical debugging which collects data from the field

40
00:02:54,000 --> 00:03:00,000
to tell you which parts of your program are most likely to be related to the failure.

41
00:03:00,000 --> 00:03:04,000
In unit 6, we're going to see how to mine information

42
00:03:04,000 --> 00:03:08,000
from bug data bases and change data bases in order to figure out

43
00:03:08,000 --> 00:03:13,000
where bugs have been in your program in the past, where they accumulate,

44
00:03:13,000 --> 00:03:18,000
and which parts of your program therefore are going to be the most back prone in the future.

45
00:03:18,000 --> 00:03:21,000
And again this is a fully automatic technique.

46
00:03:21,000 --> 00:03:28,000
This is so far, you've had no fun in debugging because it just sucks the life out of you.

47
00:03:28,000 --> 00:03:33,000
The aim of this course is to get most of the debugging effort off your shoulders

48
00:03:33,000 --> 00:03:38,000
because you can have the computer take care of most of the debugging work.

49
00:03:38,000 --> 00:03:42,000
So your mind is free for doing something more creative than debugging.
