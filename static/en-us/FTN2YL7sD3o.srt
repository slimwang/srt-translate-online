1
00:00:00,730 --> 00:00:03,977
>> I've found that really understanding what the interpreter is doing when it

2
00:00:03,977 --> 00:00:06,312
executes my code and understanding variable scope and

3
00:00:06,312 --> 00:00:09,101
closures, really helps me in writing concise applications that

4
00:00:09,101 --> 00:00:11,658
other developers can easily read through and understand.

5
00:00:11,658 --> 00:00:14,651
How can our students use these features to their advantage in

6
00:00:14,651 --> 00:00:15,890
writing their own code?

7
00:00:15,890 --> 00:00:18,359
>> Well, it should become much clearer when we get to later lessons,

8
00:00:18,359 --> 00:00:21,650
where we start writing functions that would turn objects with methods on them.

9
00:00:21,650 --> 00:00:25,033
Meaning, functions that are stored as properties of the object.

10
00:00:25,033 --> 00:00:25,974
But more generally,

11
00:00:25,974 --> 00:00:29,430
any time you see a function with an input parameter that's quite static.

12
00:00:29,430 --> 00:00:32,970
Meaning, you don't expect the parameter to take on a new value every time you

13
00:00:32,970 --> 00:00:34,120
call the function.

14
00:00:34,120 --> 00:00:36,350
That's an opportunity to re-factor your code,

15
00:00:36,350 --> 00:00:39,860
such that you store the value in a variable from an outer scope.

16
00:00:39,860 --> 00:00:43,080
Because of the way closures work, the inner function will always have access to

17
00:00:43,080 --> 00:00:47,260
the outer scope variable even after the outer function returns.

18
00:00:47,260 --> 00:00:49,510
Like I said, we are going to see plenty of examples of this in

19
00:00:49,510 --> 00:00:50,470
the upcoming lessons.
