1
00:00:00,510 --> 00:00:04,480
Let's see what implementing
instructive motion might look like.

2
00:00:04,480 --> 00:00:08,490
In this example, we have a full bleed
image and some content below it.

3
00:00:08,490 --> 00:00:12,000
There's a tension here,
we want to show the image in full, but

4
00:00:12,000 --> 00:00:15,470
we also want to indicate that
there's more text available.

5
00:00:15,470 --> 00:00:19,420
And perhaps, we want to show some of
that text content right away too.

6
00:00:19,420 --> 00:00:23,060
What we can do is start off with
the image fully visible, but

7
00:00:23,060 --> 00:00:27,670
then immediately slide up some of the
text to indicate there's more content.

8
00:00:27,670 --> 00:00:31,090
Let's see how we can implement
this pretty simple form

9
00:00:31,090 --> 00:00:33,130
of instructive motion.

10
00:00:33,130 --> 00:00:34,690
Let's start with the layout.

11
00:00:34,690 --> 00:00:38,780
Nothing fancy here, just a frame
layout with a fixed height image, and

12
00:00:38,780 --> 00:00:40,480
a scroll view in front of it.

13
00:00:40,480 --> 00:00:44,620
The linear layout in the scroll view
will contain our text content, and

14
00:00:44,620 --> 00:00:46,380
have a white background.

15
00:00:46,380 --> 00:00:49,590
We'll give the linear layout
a little elevation to make it clear

16
00:00:49,590 --> 00:00:52,040
that it's a distinct surface.

17
00:00:52,040 --> 00:00:55,040
Now, at the default scroll position,
you see the full image,

18
00:00:55,040 --> 00:00:57,520
but very little text content.

19
00:00:57,520 --> 00:01:00,740
All we need to do is
animate the scroll position

20
00:01:00,740 --> 00:01:06,610
as the screen first opens to a position
that shows more of the text content.

21
00:01:06,610 --> 00:01:11,050
Here we're using an ObjectAnimator
to animate the scrollY property

22
00:01:11,050 --> 00:01:12,480
of the ScrollView.

23
00:01:12,480 --> 00:01:16,030
We could just use the ScrollView's
smoothScrollTo method, but

24
00:01:16,030 --> 00:01:19,250
this gives you a bit more
control over that animation.

25
00:01:19,250 --> 00:01:23,850
We start the animation inside of
onEnterAnimationComplete to ensure that

26
00:01:23,850 --> 00:01:27,910
the window transition ends first
before we start the animation.

27
00:01:27,910 --> 00:01:31,100
This is only available in
Android 5.0 and later, but

28
00:01:31,100 --> 00:01:34,920
you could fake it on earlier versions
using something like a start delay.

29
00:01:34,920 --> 00:01:38,590
The effect is that you get a quick
preview of the image before you start

30
00:01:38,590 --> 00:01:40,020
reading about it.

31
00:01:40,020 --> 00:01:42,940
And you quickly realize you could
quickly scroll up to see that

32
00:01:42,940 --> 00:01:45,850
image in full again or
down to read more.
