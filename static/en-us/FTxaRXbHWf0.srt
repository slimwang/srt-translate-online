1
00:00:00,008 --> 00:00:04,005
So the ideal number of keys per bucket is simply n over b.

2
00:00:04,005 --> 00:00:11,119
If every bucket has n over b items, then the items are all evenly spread between buckets.

3
00:00:11,119 --> 00:00:13,482
So this is largely a function of this hash function.

4
00:00:13,482 --> 00:00:18,860
Did we do a good job choosing a hash function that will evenly distribute all the keys among the buckets?

5
00:00:18,860 --> 00:00:22,992
If we pick a bad hash function, maybe we end up with all the items in 1 bucket,

6
00:00:22,992 --> 00:00:27,606
and this is bad because any lookups into that bucket might have to look at all n items,

7
00:00:27,606 --> 00:00:31,290
or we could end up with no items in a bucket, and that's a waste of a bucket.

8
00:00:31,290 --> 00:00:35,605
Ideally, a hash function distributes all input keys evenly across buckets,

9
00:00:35,605 --> 00:00:38,680
so every bucket ends up with roughly the same number of items.
