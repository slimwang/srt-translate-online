1
00:00:00,540 --> 00:00:03,650
So at this point,
you know what you can afford to do and

2
00:00:03,650 --> 00:00:06,170
when you can do it,
which is pretty handy.

3
00:00:06,170 --> 00:00:08,200
>> Yeah.
Now one thing to bear in mind

4
00:00:08,200 --> 00:00:11,250
is just because you can,
say, paint or do layouts or

5
00:00:11,250 --> 00:00:14,860
even run JavaScript doesn't mean
you have an unlimited budget.

6
00:00:14,860 --> 00:00:16,510
Layouts and style calculation times for

7
00:00:16,510 --> 00:00:20,820
example, both depend on the number
of elements that are affected.

8
00:00:20,820 --> 00:00:23,990
As you'll see soon, one of the ways
you can keep that time down

9
00:00:23,990 --> 00:00:26,690
is to reduce the number of elements
on which they have to work.

10
00:00:26,690 --> 00:00:27,980
>> Mm.

11
00:00:27,980 --> 00:00:29,510
Check out the instructor notes below,

12
00:00:29,510 --> 00:00:32,770
where you'll find a table with time
allowances for different tasks.

13
00:00:32,770 --> 00:00:34,870
It'll help you set a budget for
each of those tasks.

14
00:00:34,870 --> 00:00:35,730
So that you and

15
00:00:35,730 --> 00:00:38,870
any other developers you're working
with are all on the same page.

16
00:00:38,870 --> 00:00:39,680
>> Hm.

17
00:00:39,680 --> 00:00:43,170
Now that you have a better idea of how
to think about your app as a whole.

18
00:00:43,170 --> 00:00:46,820
It's time to drill into the specifics
of resolving performance issues.

19
00:00:46,820 --> 00:00:49,760
>> In the next lesson you'll be taking a
look at the tools that you have at your

20
00:00:49,760 --> 00:00:52,450
disposal for
identifying jenk in your apps.

21
00:00:52,450 --> 00:00:55,440
The first step in reducing
jank is identifying its cause

22
00:00:55,440 --> 00:00:56,640
which is exactly what you'll do.
