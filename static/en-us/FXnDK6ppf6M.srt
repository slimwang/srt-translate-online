1
00:00:00,000 --> 00:00:04,000
Let's take a break and talk a bit about computer security--

2
00:00:04,000 --> 00:00:07,000
a topic we really haven't touched on much in this unit so far.

3
00:00:07,000 --> 00:00:11,000
Security can sometimes be defined as computing in the presence of an adversary--

4
00:00:11,000 --> 00:00:15,000
someone else using a computer or a network or resources

5
00:00:15,000 --> 00:00:18,000
who means you hard or hopes to exploit or take advantage of resources

6
00:00:18,000 --> 00:00:20,000
resources that you've put out there.

7
00:00:20,000 --> 00:00:24,000
It just so happens--you'll be surprised to discover I am breaking this news--

8
00:00:24,000 --> 00:00:26,000
that the internet is not secure.

9
00:00:26,000 --> 00:00:32,000
Malicious agents or adversaries can write malicious webpages or JavaScript fragments.

10
00:00:32,000 --> 00:00:37,000
The simplest way to do this would be to write a JavaScript fragment that loops forever--

11
00:00:37,000 --> 00:00:40,000
some sort of version of Fibonacci that has no stopping condition

12
00:00:40,000 --> 00:00:42,000
that just keeps going and going and going.

13
00:00:42,000 --> 00:00:46,000
Then as soon as you've directed your browser to that page, it would stall,

14
00:00:46,000 --> 00:00:49,000
and you'd be denied some server. You wouldn't be able to use your computer.

15
00:00:49,000 --> 00:00:54,000
In practice, browsers often put some sort of timeout on script execution.

16
00:00:54,000 --> 00:00:59,000
I'll run your script for 3 or 4 seconds, and after that if it hasn't finished, I'd better stop.

17
00:00:59,000 --> 00:01:03,000
that's one of the reasons why optimization is so important, but it also has this security angle.

18
00:01:03,000 --> 00:01:07,000
If we make any mistakes when we're designing our web browser,

19
00:01:07,000 --> 00:01:12,000
then outside agents might break in to our computers and gain access

20
00:01:12,000 --> 00:01:15,000
to sensitive documents--our tax returns, our personal email, or whatnot.

21
00:01:15,000 --> 00:01:17,000
We want to make sure that that doesn't happen.

22
00:01:17,000 --> 00:01:21,000
Let's listen to someone who knows quite a bit more about security than I do

23
00:01:21,000 --> 00:01:24,000
talk about how this plays out in the real world with web browsers.

24
00:01:24,000 --> 00:01:27,000
The web can be a great place but it can also be a dangerous place.

25
00:01:27,000 --> 00:01:32,000
Nothing stops users from posting malicious code or websites

26
00:01:32,000 --> 00:01:37,000
or writing scripts that will trying to take advantage of your computer or your browser.

27
00:01:37,000 --> 00:01:41,000
There might be security holes or exploits, they're sometimes called, that allow this.

28
00:01:41,000 --> 00:01:45,000
I was wondering if you might talk a bit about security at the language or implementation level

29
00:01:45,000 --> 00:01:47,000
from the perspective of Mozilla.

30
00:01:47,000 --> 00:01:52,000
Absolutely. Security is a prevalent concern at Mozilla.

31
00:01:52,000 --> 00:01:56,000
When I was growing up, the idea of getting a piece of software was that you actually

32
00:01:56,000 --> 00:02:01,000
drove to a store and you looked at a shelf and you pulled a box off the shelf

33
00:02:01,000 --> 00:02:04,000
and you paid somebody and you took it home and that piece of software was sold to you

34
00:02:04,000 --> 00:02:08,000
by a company that you trusted, by a third party that you trusted,

35
00:02:08,000 --> 00:02:12,000
so you had some sense of this piece of software that I'm about to put on my computer

36
00:02:12,000 --> 00:02:16,000
is something that I can believe is going to do something on behalf,

37
00:02:16,000 --> 00:02:18,000
not something against me.

38
00:02:18,000 --> 00:02:20,000
The web doesn't work like that way at all.

39
00:02:20,000 --> 00:02:24,000
The way web applications work is you can go to any website anywhere in the world,

40
00:02:24,000 --> 00:02:29,000
and somebody you've never met and never seen and that nobody can vouch for you

41
00:02:29,000 --> 00:02:34,000
is going to run some of their code that they wrote on your computer.

42
00:02:34,000 --> 00:02:36,000
So that changes the game.

43
00:02:36,000 --> 00:02:43,000
That means that in order to build a serious platform where programs can do important things

44
00:02:43,000 --> 00:02:49,000
on your behalf, we need to make sure that they can't also do important things against you.

45
00:02:49,000 --> 00:02:53,000
The more people put valuable parts of their lives onto the web like their bank account,

46
00:02:53,000 --> 00:02:58,000
for example, the more we have important assets to defend.

47
00:02:58,000 --> 00:03:04,000
One of the concepts people talk about a lot in security is the notion of the trust computing base.

48
00:03:04,000 --> 00:03:08,000
When you download some code from some third party that you don't know,

49
00:03:08,000 --> 00:03:13,000
if we're being kind of maximally pessimistic we say, well, I don't trust this code completely.

50
00:03:13,000 --> 00:03:18,000
I'd like it to do something for me but I don't know for sure that it's not malicious.

51
00:03:18,000 --> 00:03:21,000
However, that code is running inside of a web browser like Firefox,

52
00:03:21,000 --> 00:03:28,000
and I do trust the code that was written by Mozilla. I do trust Firefox.

53
00:03:28,000 --> 00:03:33,000
In order to be able to say as much as we can about the security of a system,

54
00:03:33,000 --> 00:03:37,000
we'd like for the parts of the system that we need to trust the most

55
00:03:37,000 --> 00:03:41,000
to be as small as possible, so we talk about shrinking the trusted computing base,

56
00:03:41,000 --> 00:03:48,000
as being a goal of having the smallest possible amount of software where if it goes wrong

57
00:03:48,000 --> 00:03:53,000
disaster can ensue--like somebody can steal or credit card information or your bank account.

58
00:03:53,000 --> 00:03:56,000
All modern web browsers are implemented in C++.

59
00:03:56,000 --> 00:04:00,000
Now, C++ is a very powerful language. There are a lot of things that you can do with it.

60
00:04:00,000 --> 00:04:02,000
But it's also not a particularly safe language.

61
00:04:02,000 --> 00:04:07,000
It's a language where if you make one wrong move, if you make one little programming mistake,

62
00:04:07,000 --> 00:04:13,000
you can actually leave parts of your system open to malicious programs.

63
00:04:13,000 --> 00:04:21,000
For example, if you write a program in C++ and you have an array of data

64
00:04:21,000 --> 00:04:26,000
and you forget to make sure that the program doesn't go beyond the end of that array,

65
00:04:26,000 --> 00:04:29,000
in most programming languages you'll get a runtime error that says,

66
00:04:29,000 --> 00:04:32,000
"Oops. You tried to access beyond the end of the array."

67
00:04:32,000 --> 00:04:34,000
C++ doesn't give you that protection.

68
00:04:34,000 --> 00:04:37,000
What C++ does is it just keeps reading what ever happens to be in memory

69
00:04:37,000 --> 00:04:39,000
at the end of that array.

70
00:04:39,000 --> 00:04:44,000
Well, whatever happens to be in memory could actually be some part of the browser

71
00:04:44,000 --> 00:04:47,000
that has internal information like a password.

72
00:04:47,000 --> 00:04:50,000
It could also be some other program running on the system,

73
00:04:50,000 --> 00:04:55,000
and there are a lot of people out there who work on finding ways to exploit

74
00:04:55,000 --> 00:05:02,000
these kinds of bugs to use them to take control of your computer or to get access to your private data.

75
00:05:02,000 --> 00:05:05,000
The project of building a web browser that people can trust

76
00:05:05,000 --> 00:05:08,000
and building a web browser that operates on user's behalf

77
00:05:08,000 --> 00:05:11,000
is also one of building software that they can trust.

78
00:05:11,000 --> 00:05:13,000
In order to build software that they can trust,

79
00:05:13,000 --> 00:05:16,000
it needs to be built on top of programming technologies

80
00:05:16,000 --> 00:05:22,000
that we know we can work with effectively to build software that's not unsafe.

81
00:05:22,000 --> 00:05:28,000
We've been discussing malicious code like JavaScript written by evildoers

82
00:05:28,000 --> 00:05:32,000
that we would run in our interpreter. Running evil code seems really bad.

83
00:05:32,000 --> 00:05:36,000
Can't I just look at the source code and tell if it's bad before I run it

84
00:05:36,000 --> 00:05:40,000
and then not run the bad code? Why doesn't Mozilla do something like that.

85
00:05:40,000 --> 00:05:44,000
Unfortunately, it turns out that there's a lot of good theoretical computer science

86
00:05:44,000 --> 00:05:49,000
that shows us that that is a provably impossible problem.

87
00:05:49,000 --> 00:05:54,000
I don't know if you've discussed the halting program. >>We may have.

88
00:05:54,000 --> 00:06:00,000
It turns out that if I were able to prove that any particular piece of code was not malicious

89
00:06:00,000 --> 00:06:02,000
I would also be able to solve the halting problem,

90
00:06:02,000 --> 00:06:06,000
and we already know that that's an unsolvable problem in computer science.

91
00:06:06,000 --> 00:06:09,000
Looking at this maybe from a more positive side,

92
00:06:09,000 --> 00:06:11,000
that means that I'll always have a job.

93
00:06:11,000 --> 99:59:59,999
The law of compiler writer employability. >>Exactly.
