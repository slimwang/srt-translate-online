1
00:00:00,090 --> 00:00:02,020
So let's begin to look in more detail at some

2
00:00:02,020 --> 00:00:05,010
of the aggregation operators we just touched on. Now, you

3
00:00:05,010 --> 00:00:07,580
just had a quiz on this question. We're going to

4
00:00:07,580 --> 00:00:10,810
look at first, the dollar match operator, and then the

5
00:00:10,810 --> 00:00:14,780
dollar project operator, in the context of this question. So

6
00:00:14,780 --> 00:00:17,350
the question is ,who has the highest followers to friends

7
00:00:17,350 --> 00:00:20,830
ratio? The data that we're working with is from the

8
00:00:20,830 --> 00:00:25,880
version 1.1 Twitter API, and here, friends means who I'm following.

9
00:00:25,880 --> 00:00:28,170
So, another way of expressing this is who has

10
00:00:28,170 --> 00:00:33,190
the highest followers to following ratio. Okay, so here's our

11
00:00:33,190 --> 00:00:37,120
complete solution to addressing this problem using the aggregation framework.

12
00:00:37,120 --> 00:00:39,060
Let's take a look at how the match operator is

13
00:00:39,060 --> 00:00:41,930
used here in the first stage of the pipeline.

14
00:00:41,930 --> 00:00:45,840
Now as I mentioned, match is a filtering operation, and

15
00:00:45,840 --> 00:00:47,850
something that's very important to bear mind that really clears

16
00:00:47,850 --> 00:00:51,120
things up I think with match, is that for match,

17
00:00:51,120 --> 00:00:54,290
for the value of the match operator, you use

18
00:00:54,290 --> 00:00:56,740
the same syntax that you would use for find

19
00:00:56,740 --> 00:01:00,020
operations or read operations. So in this case what

20
00:01:00,020 --> 00:01:03,280
we're specifying is constraints on the type of document

21
00:01:03,280 --> 00:01:06,220
that we want to allow through this match stage.

22
00:01:06,220 --> 00:01:08,985
What we're saying here is, I only want to

23
00:01:08,985 --> 00:01:12,224
consider those who have both of friends count and

24
00:01:12,224 --> 00:01:16,560
the followers count, that's greater than zero. And if

25
00:01:16,560 --> 00:01:17,880
you think back to when we were talking

26
00:01:17,880 --> 00:01:20,710
about queries, in the last lesson, you can

27
00:01:20,710 --> 00:01:22,960
see that all we're really doing here is,

28
00:01:22,960 --> 00:01:26,890
specifying a specific field in each case, and then

29
00:01:26,890 --> 00:01:30,060
using an inequality operator to express a constraint

30
00:01:30,060 --> 00:01:32,480
on the value for first friends count and then

31
00:01:32,480 --> 00:01:35,340
followers count. And, in fact, match functions, very

32
00:01:35,340 --> 00:01:38,880
similarly to find as part of the aggregation framework.
