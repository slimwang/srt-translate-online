1
00:00:00,220 --> 00:00:03,000
The last barrier algorithm I'm going to describe

2
00:00:03,000 --> 00:00:05,100
to you is what is called a Dissemination

3
00:00:05,100 --> 00:00:09,750
Barrier. And it works by information diffusion in

4
00:00:09,750 --> 00:00:13,320
an ordered manner among the set of participating

5
00:00:13,320 --> 00:00:16,620
processes. And, what you will see is that

6
00:00:16,620 --> 00:00:19,356
it is not pairwise communication as you saw

7
00:00:19,356 --> 00:00:21,864
in the tree barriers and the NCS barrier

8
00:00:21,864 --> 00:00:25,310
or the tournament barrier. But it is through

9
00:00:25,310 --> 00:00:28,610
information diffusion. The other nice thing about

10
00:00:28,610 --> 00:00:32,439
this particular barrier the dissemination barrier, is that

11
00:00:32,439 --> 00:00:34,550
it is since it is based on ordered

12
00:00:34,550 --> 00:00:38,250
communication among participating nodes. It's all like a,

13
00:00:38,250 --> 00:00:43,010
a well-orchestrated gossip protocol. And therefore, N

14
00:00:43,010 --> 00:00:44,840
need not be a power of 2. And

15
00:00:44,840 --> 00:00:47,450
you will see why this condition need not

16
00:00:47,450 --> 00:00:50,650
be satisfied as I start describing the algorithm

17
00:00:50,650 --> 00:00:53,220
to you. So what's going to happen is that,

18
00:00:53,220 --> 00:00:56,090
there's going to be information diffusion that's going to happen

19
00:00:56,090 --> 00:01:00,140
among these processors in several different routes. And

20
00:01:00,140 --> 00:01:03,130
in each round what's going to happen is that

21
00:01:03,130 --> 00:01:06,460
a processor is going to send a message to

22
00:01:06,460 --> 00:01:10,130
another ordained processor. And the particular processor that

23
00:01:10,130 --> 00:01:13,010
it's going to choose to send it is dependent

24
00:01:13,010 --> 00:01:16,450
on the round which we're in. So, the idea

25
00:01:16,450 --> 00:01:19,780
is that processor Pi will send a message to

26
00:01:19,780 --> 00:01:23,720
processor Pi plus 2 to the k mod N. This

27
00:01:23,720 --> 00:01:26,440
is the peer to which Pi is going to send

28
00:01:26,440 --> 00:01:29,460
a message to. And of course you know an example

29
00:01:29,460 --> 00:01:32,210
is always more illustrative. So since we have five

30
00:01:32,210 --> 00:01:34,810
processors here, we can then figure what's going to happen in

31
00:01:34,810 --> 00:01:37,750
every round. And Round 0 k is going to be zero.

32
00:01:37,750 --> 00:01:41,370
So what's going to happen, is that since k is zero,

33
00:01:41,370 --> 00:01:47,940
Round 0, P0 is going to be sending a message to Pi plus 2k, k being zero,

34
00:01:47,940 --> 00:01:53,364
is going to send it to P1. So, P0 sends a message to P1. Similarly P1 sends a

35
00:01:53,364 --> 00:01:59,030
message to P2, P2 sends to P2 to P3 and P3 to P4. And the arrangement is

36
00:01:59,030 --> 00:02:03,580
that this is cyclically arranged. That if before

37
00:02:03,580 --> 00:02:07,290
the neighbor for him is going to be in the

38
00:02:07,290 --> 00:02:10,610
cyclic order whoever is the next neighbor. So, in this

39
00:02:10,610 --> 00:02:14,090
case since there is mod function that we using before is

40
00:02:14,090 --> 00:02:18,297
going to be sending Its message to processor P5 mod. N,

41
00:02:18,297 --> 00:02:20,988
N being, N, N being 5, it will be sending the

42
00:02:20,988 --> 00:02:23,970
message to P0. So this is Round 0 of the

43
00:02:23,970 --> 00:02:26,060
communication. So the key thing that I want you to get

44
00:02:26,060 --> 00:02:28,490
is that in every round, we're going to see more rounds

45
00:02:28,490 --> 00:02:32,580
in a minute in every round a processor is sending a

46
00:02:32,580 --> 00:02:36,240
message to an ordained processor based on their own number.

47
00:02:36,240 --> 00:02:38,710
But depending on their own numbers, their own number zero,

48
00:02:38,710 --> 00:02:41,200
P0 sending to P1 and so on and so forth.

49
00:02:41,200 --> 00:02:45,600
And that is what's going on. So this completes one round

50
00:02:45,600 --> 00:02:48,470
of gossip. And what you, what you want to see

51
00:02:48,470 --> 00:02:51,540
it that. All of these communications that I'm showing you

52
00:02:51,540 --> 00:02:54,800
are parallel communications. They're not waiting on each other. So

53
00:02:54,800 --> 00:02:57,630
P1, whenever it's ready to arrive at a barrier it's going to

54
00:02:57,630 --> 00:02:59,840
tell the next gay, P2 is going to tell the next

55
00:02:59,840 --> 00:03:01,940
guy when hes ready and so on. Now how will these

56
00:03:01,940 --> 00:03:05,780
guys know that Round 0 is done well, if you take

57
00:03:05,780 --> 00:03:08,790
any particular process here let's say P2, as soon as it

58
00:03:08,790 --> 00:03:12,890
gets a message from P1 and it has sent a message

59
00:03:12,890 --> 00:03:15,840
to P3. It knows that Round 0 has done so far

60
00:03:15,840 --> 00:03:18,670
is as P2 is concerned, it can progress to the next

61
00:03:18,670 --> 00:03:22,770
level, or next round of the dissemination. So, each of these

62
00:03:22,770 --> 00:03:25,320
processes are independently making a decision that

63
00:03:25,320 --> 00:03:27,100
the round is over based on two

64
00:03:27,100 --> 00:03:30,500
things. One is, they have sent a message to the peer and they want

65
00:03:30,500 --> 00:03:33,830
to receive the message from the ordain neighbor that they're supposed to get it

66
00:03:33,830 --> 00:03:36,520
from. At the end of that, they can move on to the next round.
