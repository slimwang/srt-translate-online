1
00:00:00,000 --> 00:00:03,000
Due to their structure, we only executed further into the for loops

2
00:00:03,000 --> 00:00:05,000
and implemented these functions when bits were the same.

3
00:00:05,000 --> 00:00:10,000
If every bit was independently different, then the probability of executing further into these functions

4
00:00:10,000 --> 00:00:14,000
dropped off exponentially, and so at 64 bits, the probability dropped off too fast

5
00:00:14,000 --> 00:00:16,000
for us to ever execute the case where a and b were the same.

6
00:00:16,000 --> 00:00:19,000
Based on that knowledge, based on some domain specific knowledge, we made a new

7
00:00:19,000 --> 00:00:24,000
random tester whereby flipping a random number of bits did a much more even exploration

8
00:00:24,000 --> 00:00:27,000
of the iteration spaces of those loops including reaching the ending state, which is what we saw

9
00:00:27,000 --> 00:00:30,000
on that GCC documentation was the state that we actually wanted to test.

10
00:00:30,000 --> 00:00:33,000
This has been a pretty elaborate exercise for what in the end

11
00:00:33,000 --> 00:00:37,000
are two pretty simple functions and what this just shows is that you can do okay

12
00:00:37,000 --> 00:00:40,000
with a really simple random tester and not understanding what's going on, but if you wanted

13
00:00:40,000 --> 00:00:43,000
to do a better job we really need to think about what it is that we're testing,

14
00:00:43,000 --> 00:00:46,000
how the code is structured, and how we're going to execute all the way through it,

15
00:00:46,000 --> 00:00:48,000
and this is just sort of a fundamental limitation of random testing.
