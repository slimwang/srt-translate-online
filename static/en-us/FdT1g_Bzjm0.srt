1
00:00:00,000 --> 00:00:04,000
Here's my implementation, which should be relatively straight forward.

2
00:00:04,000 --> 00:00:07,000
We have a value function that is the same size as my world,

3
00:00:07,000 --> 00:00:10,000
and I initialize with 99 everywhere.

4
00:00:10,000 --> 00:00:15,000
This has to be evaluated as large enough it doesn't conflict with any actual value.

5
00:00:15,000 --> 00:00:19,000
I now update the value function a number times--I don't know how often--

6
00:00:19,000 --> 00:00:22,000
but as long as change something, I update it.

7
00:00:22,000 --> 00:00:26,000
Therefore, I introduced the variable "change," which I set to True in the beginning.

8
00:00:26,000 --> 00:00:30,000
While change is the case, I update, but I neatly set change to False.

9
00:00:30,000 --> 00:00:34,000
The only way to come back to True is that I actually changed something.

10
00:00:34,000 --> 00:00:38,000
Now I go through all the grid cells in a fixed order.

11
00:00:38,000 --> 00:00:42,000
It happens to be not very efficient, but certainly gets the job done.

12
00:00:42,000 --> 00:00:46,000
I first check if the grid cell I'm considering is the goal.

13
00:00:46,000 --> 00:00:49,000
Here is a typical case where I check for change.

14
00:00:49,000 --> 00:00:53,000
If the value is presently correctly set to 0, I don't do anything.

15
00:00:53,000 --> 00:00:59,000
If it's larger than 0, such as 99, then I set it down to 0, and I've just changed something.

16
00:00:59,000 --> 00:01:02,000
Therefore, I set the change flag back to True.

17
00:01:02,000 --> 00:01:07,000
If it's not a goal cell, then here is my full update function.

18
00:01:07,000 --> 00:01:10,000
I go through all the actions.

19
00:01:10,000 --> 00:01:14,000
I project a potential next state upon executing an action

20
00:01:14,000 --> 00:01:17,000
by adding the corresponding delta to the x and y.

21
00:01:17,000 --> 00:01:20,000
That gives me x2 and y2.

22
00:01:20,000 --> 00:01:24,000
I test whether x2 and y2 are legitimate states.

23
00:01:24,000 --> 00:01:26,000
For that they have to be inside the grid.

24
00:01:26,000 --> 00:01:31,000
I check whether the numbers are larger than 0 and smaller than the dimension of the grid.

25
00:01:31,000 --> 00:01:34,000
And it has to be an action that action navigable grid cell.

26
00:01:34,000 --> 00:01:38,000
Therefore, I check that the coordinates in the grid has a 0.

27
00:01:38,000 --> 00:01:41,000
If that's the case, I can propagate back the value.

28
00:01:41,000 --> 00:01:46,000
My new value is the value of this future grid cell plus the cost per step,

29
00:01:46,000 --> 00:01:48,000
which happens to be 1.

30
00:01:48,000 --> 00:01:53,000
Now, if this value is better than the value I have already, which means it is smaller,

31
00:01:53,000 --> 00:02:01,000
then I assign this new value to my original grid cell x and y, plus of course the cost step.

32
00:02:01,000 --> 00:02:04,000
Then I know I've changed something.

33
00:02:04,000 --> 00:02:08,000
Therefore I set change to "True," and the procedure repeats.

34
00:02:08,000 --> 00:02:11,000
The only thing missing at the very end when I'm done,

35
00:02:11,000 --> 00:02:14,000
I print out the value function using these commands over here.

36
00:02:14,000 --> 00:02:17,000
I should warn you this is not very efficient.

37
00:02:17,000 --> 00:02:20,000
The reason why it is not efficient is that value slowly propagates

38
00:02:20,000 --> 00:02:23,000
from the end towards the beginning.

39
00:02:23,000 --> 00:02:26,000
But leaving this concern aside, it actually computes the correct value function.

40
00:02:26,000 --> 00:02:28,000
There are ways to make it more efficient.

41
00:02:28,000 --> 00:02:33,000
It's also interesting to see what happens if I cut off any path to the goal.

42
00:02:33,000 --> 00:02:37,000
The the resulting value function will retain 99s for most of the state variables--

43
00:02:37,000 --> 99:59:59,999
exactly those where there is no valid path to the goal.
