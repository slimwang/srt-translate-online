1
00:00:00,000 --> 00:00:08,000
Like I said in the problem, I'm going to show you a fairly naive brute-force solution to this

2
00:00:08,000 --> 00:00:12,000
that is definitely vulnerable to some things.

3
00:00:12,000 --> 00:00:17,000
First of, we start up with the check Sudoku function from the first problem.

4
00:00:17,000 --> 00:00:23,000
Exact same function as the base for solving this real board.

5
00:00:23,000 --> 00:00:31,000
After that solve Sudoku is actually fairly short if not exactly pretty or copy in sys here

6
00:00:31,000 --> 00:00:36,000
and copy is the only needed here, sys is used down below

7
00:00:36,000 --> 00:00:40,000
for something that is entirely for testing purposes.

8
00:00:40,000 --> 00:00:43,000
First we check the grid then check Sudoku

9
00:00:43,000 --> 00:00:48,000
and if check Sudoku returns none or false, we returned the result.

10
00:00:48,000 --> 00:00:53,000
You could also assert here, I wanted to be able to continue on

11
00:00:53,000 --> 00:01:00,000
for testing purposes so I just return the result instead of asserting that,

12
00:01:00,000 --> 00:01:04,000
although asserting would definitely be a good idea here as well

13
00:01:04,000 --> 00:01:08,000
and we used deep copy to copy this over

14
00:01:08,000 --> 00:01:14,000
and not going to get into what exactly the copy package and deep copy is.

15
00:01:14,000 --> 00:01:21,000
Surprise to say that we made a copy of the initial input into another.

16
00:01:21,000 --> 00:01:25,000
Now, we check through the grid for zero elements

17
00:01:25,000 --> 00:01:33,000
and we change them to each of 1 through 9 and then recursively call solve Sudoku on the results.

18
00:01:33,000 --> 00:01:43,000
This is a very very slow brute-force process but its also fairly easy to call that as well.

19
00:01:43,000 --> 00:01:53,000
Each element in the grid, which I put zero and then for all and in the range 1 through 10

20
00:01:53,000 --> 00:02:02,000
so all elements 1 through 9 then we set that grid position to that number

21
00:02:02,000 --> 00:02:05,000
and then we call solve Sudoku again.

22
00:02:05,000 --> 00:02:10,000
If this new grid isn't false, then we return it.

23
00:02:10,000 --> 00:02:20,000
Otherwise, we backtrack and that it's it. It's all there is too bad. It's really pretty simple.

24
00:02:20,000 --> 00:02:26,000
There are a lot of ways you could really really mess with this if you wanted it to

25
00:02:26,000 --> 00:02:30,000
take a very very long time for instance and right here break it into forms.

26
00:02:30,000 --> 00:02:35,000
Just to check real quick, let's check that my solution actually works.

27
00:02:35,000 --> 00:02:42,000
and this is for all of the inputs that we gave as example test cases.

28
00:02:42,000 --> 00:02:49,000
You can see that it does verify that the first two,

29
00:02:49,000 --> 00:02:54,000
the L form and the invalid ones didn't work and then for the valid one and easy,

30
00:02:54,000 --> 00:02:57,000
we didn't do ALG simply because it would take this out

31
00:02:57,000 --> 00:03:03,000
on a little bit longer to do that and I didn't want to wait

32
00:03:03,000 --> 00:03:10,000
so that it shows that the valid and already solved board is the exactly the same

33
00:03:10,000 --> 00:03:17,000
and the easy board is filled out with a valid Sudoku board solution.

34
00:03:17,000 --> 00:03:24,000
I hope you enjoyed that and I hope you looking at everyone else's code

35
00:03:24,000 --> 00:03:27,000
and seeing how everyone thought about the problem and how you might think

36
00:03:27,000 --> 00:03:31,000
about testing the problem itself.

37
00:03:31,000 --> 00:03:36,000
I hope you had a lot of fun with that. See you in the next unit.
