1
00:00:00,000 --> 00:00:04,000
Here we have a grammar that represents some made-up language,

2
00:00:04,000 --> 00:00:07,000
kind of a cross between--I don't know--Python and JavaScript.

3
00:00:07,000 --> 00:00:10,000
It has a lot of keywords that are found in a lot of languages.

4
00:00:10,000 --> 00:00:12,000
Let's say we add a new rule.

5
00:00:12,000 --> 00:00:18,000
The question we need to answer is whether adding this new rule to this grammar

6
00:00:18,000 --> 00:00:20,000
creates an ambiguous grammar.

7
00:00:20,000 --> 00:00:26,000
As a reminder, an ambiguous grammar is one that given a string in that language,

8
00:00:26,000 --> 00:00:31,000
there are 2 parse trees, there are 2 ways to traverse the grammar and create that string.

9
00:00:31,000 --> 00:00:37,000
As we'll see later, this is really bad for languages that we want to interpret

10
00:00:37,000 --> 00:00:42,000
because it can result in the situation where 1 string, 1 program,

11
00:00:42,000 --> 00:00:47,000
1 HTML document has 2 valid meanings.

12
00:00:47,000 --> 00:00:49,000
And so you can't really choose one,

13
00:00:49,000 --> 00:00:51,000
and that's not what we like.

14
00:00:51,000 --> 00:00:54,000
We use these precise languages such as HTML and JavaScript

15
00:00:54,000 --> 00:00:57,000
so that we know exactly what we want to be displayed

16
00:00:57,000 --> 00:01:01,000
or the exact actions that we want to be performed. We don't want ambiguity.

17
00:01:01,000 --> 00:01:05,000
Computers don't handle ambiguity very well. Their little brains explode.

18
00:01:05,000 --> 00:01:08,000
We can sit and stare and think about this for a while,

19
00:01:08,000 --> 00:01:13,000
but I'll just give you an example string that actually shows that adding this rule

20
00:01:13,000 --> 00:01:15,000
makes the grammar ambiguous.

21
00:01:15,000 --> 00:01:18,000
That gets us a check. Let's go over that.

22
00:01:18,000 --> 00:01:22,000
Here I have the string, and what we need to do is show that there's 2 ways

23
00:01:22,000 --> 00:01:24,000
using this grammar to generate the string.

24
00:01:24,000 --> 00:01:28,000
One way is using the if-then-else construct

25
00:01:28,000 --> 00:01:35,000
where this if, this then, and this else match here, here, and here.

26
00:01:35,000 --> 00:01:42,000
That means this part of the string corresponds to this C,

27
00:01:42,000 --> 00:01:49,000
this one goes here, and this one is from the E right there. That's 1 way to do it.

28
00:01:49,000 --> 00:01:54,000
The second way is using the if-then, do these 2 symbols,

29
00:01:54,000 --> 00:01:57,000
and then the if-then-else here,

30
00:01:57,000 --> 00:02:01,000
meaning that this corresponds to that S,

31
00:02:01,000 --> 00:02:03,000
this corresponds to that E,

32
00:02:03,000 --> 00:02:06,000
and then we have an if-then-else as that S.

33
00:02:06,000 --> 00:02:10,000
So here's 2 valid ways using this grammar to generate the same string.

34
00:02:10,000 --> 00:02:13,000
This shows that the grammar is ambiguous when we add this rule.

35
00:02:13,000 --> 00:02:15,000
Let's do another.

36
00:02:15,000 --> 00:02:17,000
Let's say we add this rule.

37
00:02:17,000 --> 00:02:19,000
B goes to a B and then a B.

38
00:02:19,000 --> 00:02:21,000
This is also ambiguous.

39
00:02:21,000 --> 00:02:29,000
Say we have print 4; print 4.

40
00:02:29,000 --> 00:02:31,000
So now we have 2 ways to create this.

41
00:02:31,000 --> 00:02:33,000
One way is to start with a B.

42
00:02:33,000 --> 00:02:35,000
From there we go to S and B.

43
00:02:35,000 --> 00:02:37,000
From here we can do print 4.

44
00:02:37,000 --> 00:02:41,000
We can replace the B--oh, I forgot to add that.

45
00:02:41,000 --> 00:02:43,000
We can replace the S with the print 4.

46
00:02:43,000 --> 00:02:49,000
An alternative way is basically do something very similar

47
00:02:49,000 --> 00:02:53,000
where we start with the B and we go to B B,

48
00:02:53,000 --> 00:02:58,000
but this time we replace each B with the S;

49
00:02:58,000 --> 00:03:00,000
That's our second way.

50
00:03:00,000 --> 00:03:02,000
Here there are 2 more rules.

51
00:03:02,000 --> 00:03:04,000
Neither of these rules makes the grammar ambiguous.

52
00:03:04,000 --> 00:03:08,000
When we add the keyword int, this is the only way to get an int.

53
00:03:08,000 --> 00:03:12,000
So there's not going to be a second way to generate strings with int.

54
00:03:12,000 --> 00:03:16,000
The same basic logic applies to the parentheses as well.

55
00:03:16,000 --> 00:03:18,000
This is the only way I have parentheses,

56
00:03:18,000 --> 00:03:21,000
and there's not going to be a second way there.

57
00:03:21,000 --> 00:03:24,000
All it does is add parentheses on the outside of a statement.

58
00:03:24,000 --> 00:03:26,000
And we can do it as many times as we want,

59
00:03:26,000 --> 00:03:31,000
but given x number of parentheses, you just apply this x number of times.

60
00:03:31,000 --> 00:03:33,000
Not a whole lot of fancy stuff going here.

61
00:03:33,000 --> 00:03:38,000
The fact that they match also is kind of a key contributor to this.

62
00:03:38,000 --> 00:03:41,000
If you had a parenthesis on 1 side and you had another rule with the other side,

63
00:03:41,000 --> 00:03:47,000
then you could maybe get some ambiguity depending on how you word it.

64
00:03:47,000 --> 00:03:50,000
But that's how this is. Let's go on to the last one.

65
00:03:50,000 --> 00:03:52,000
This should look familiar.

66
00:03:52,000 --> 00:03:56,000
I believe we went over this in lecture or something very similar to this,

67
00:03:56,000 --> 00:03:59,000
and this is definitely ambiguous.

68
00:03:59,000 --> 00:04:02,000
I'll come up with 1 example.

69
00:04:02,000 --> 00:04:07,000
Say we have 1 + 2 + 3. We can do this in 2 ways.

70
00:04:07,000 --> 00:04:16,000
We have E goes to E + E goes to 1, and this eventually goes to 2 + 3.

71
00:04:16,000 --> 00:04:21,000
An alternative way is that we have the 2 on the left-hand side and then we have the 3.

72
00:04:21,000 --> 00:04:24,000
Although the meaning of a plus, the associativity of addition

73
00:04:24,000 --> 00:04:29,000
allows us to do it in any order, from the perspective of a language of strings,

74
00:04:29,000 --> 00:04:34,000
perspective of determining whether or not the context-free grammar is ambiguous,

75
00:04:34,000 --> 99:59:59,999
the meaning of a plus is irrelevant here.
