1
00:00:00,638 --> 00:00:02,677
>> And so let me conclude with another question.

2
00:00:02,677 --> 00:00:05,136
What advice do you have for students that are taking this course

3
00:00:05,136 --> 00:00:08,311
and learning parallel programming maybe for the first time?

4
00:00:08,311 --> 00:00:14,626
>> I think parallel programming requires you to think about your program in a different way.

5
00:00:14,626 --> 00:00:19,393
And the thing that I see most when I go out and I--

6
00:00:19,393 --> 00:00:22,792
I spend a lot of my time talking to people who are trying to use

7
00:00:22,792 --> 00:00:28,131
not just GPUs but clustered computer systems and multi-core systems.

8
00:00:28,131 --> 00:00:32,869
And I spend--a lot of my job is finding out the problems people are facing.

9
00:00:32,869 --> 00:00:36,908
A lot of the problems boil down to not NPI is hard

10
00:00:36,908 --> 00:00:40,109
or clusters are hard or networking is hard.

11
00:00:40,109 --> 00:00:42,858
It actually boils down to parallel programming is hard.

12
00:00:42,858 --> 00:00:46,120
And it's hard because a lot of them are thinking in terms of,

13
00:00:46,120 --> 00:00:49,453
"I know how to write a serial program.

14
00:00:49,453 --> 00:00:51,721
I assume parallel programming must be the same."

15
00:00:51,721 --> 00:00:54,792
But often you need to think about your problem in a different way.

16
00:00:54,792 --> 00:00:59,961
You need to think about, "How do I break my problem up into independent pieces?"

17
00:00:59,961 --> 00:01:03,364
Because the way that you get your parallel problem solved

18
00:01:03,364 --> 00:01:11,578
is to have lots of independent pieces which only come together either in small subsets or infrequently.

19
00:01:11,578 --> 00:01:13,614
Because (inaudible) will always kill you in the end.

20
00:01:13,614 --> 00:01:15,745
And so you got to find a way around that,

21
00:01:15,745 --> 00:01:21,657
and if you start out thinking of your problem in parallel terms instead of in serial terms,

22
00:01:21,657 --> 00:01:24,657
you can--you will end up with a much better solution to your problem.

23
00:01:24,657 --> 00:01:28,263
Sort of analogous to how if you're trying to think of solve a problem in C++--

24
00:01:28,263 --> 00:01:30,662
maybe this does not actually apply to the listeners--I'm not sure.

25
00:01:30,662 --> 00:01:33,804
If you're trying solve if you're trying to solve your problem in C++,

26
00:01:33,804 --> 00:01:36,206
don't start thinking about it in C,

27
00:01:36,206 --> 00:01:39,837
because although you can express C in C++,

28
00:01:39,837 --> 00:01:44,377
your solution in C++ will be a very different design to how you resolved it in C.

29
00:01:44,377 --> 00:01:46,252
Same goes for parallel serial programming.

30
00:01:46,252 --> 00:01:48,612
So it's not--this is not just Cuda advice in general.

31
00:01:48,612 --> 00:01:50,317
This is parallel programming advice in general.

32
00:01:50,317 --> 00:01:52,815
Sit down and think about your problem in terms of,

33
00:01:52,815 --> 00:01:55,756
"Where can I extract the independent work?"

34
00:01:55,756 --> 00:01:59,655
Rather than, "How do I do the work? Now how do I multiply it by 10?"

35
00:01:59,655 --> 00:02:02,892
>> Steven, thanks so much for coming in today. We appreciate your time.

36
00:02:02,892 --> 00:02:04,000
>> It's a pleasure.
