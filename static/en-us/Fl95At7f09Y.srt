1
00:00:00,110 --> 00:00:06,939
Okay, so lets look at what happens,
I call this Logical Address process.

2
00:00:06,939 --> 00:00:09,832
So we always talk about
physical addresses,

3
00:00:09,832 --> 00:00:14,680
those are addresses that point
to locations in physical memory.

4
00:00:14,680 --> 00:00:18,878
Locations in address space
are logical its a logical or

5
00:00:18,878 --> 00:00:23,700
virtual address because it's going to
map to, okay so this mapping that we're

6
00:00:23,700 --> 00:00:28,200
talking about here, it's going to map
to some physical memory location.

7
00:00:28,200 --> 00:00:31,970
Eventually everything has to
be stored in physical memory.

8
00:00:31,970 --> 00:00:36,890
So we can say logical address 2000
in process one's address space

9
00:00:36,890 --> 00:00:41,810
is currently lives in physical
location 5000 or something like that.

10
00:00:41,810 --> 00:00:45,460
So process the address space
that we're talking about and

11
00:00:45,460 --> 00:00:50,710
the addresses that make up that address
space, zero through I said two to the n

12
00:00:50,710 --> 00:00:54,900
minus one, n is 32 or 64,
these are called logical addresses.

13
00:00:54,900 --> 00:00:59,660
This is in these logical addresses, or
the logical space that we define for

14
00:00:59,660 --> 00:01:00,600
a process.

15
00:01:00,600 --> 00:01:04,569
The process is going to put it's code,
and it's going to put it's data.

16
00:01:04,569 --> 00:01:08,110
So, when we talk about an address
space as a unit of isolation, so

17
00:01:08,110 --> 00:01:12,700
that if you start with this
process had its own container

18
00:01:12,700 --> 00:01:17,550
of memory where it can address different
parts of it in particular different

19
00:01:17,550 --> 00:01:21,160
locations where it's going to
place its code and data, and

20
00:01:21,160 --> 00:01:26,070
these are logical, or in case of
virtual memory, virtual addresses.

21
00:01:26,070 --> 00:01:30,450
Eventually, remember the operating
system has to use physical resources

22
00:01:30,450 --> 00:01:34,250
to implement these abstractions or
virtual resources.

23
00:01:34,250 --> 00:01:39,210
Well address space is a virtual
resource that abstracts memory.

24
00:01:39,210 --> 00:01:42,425
So this address space or
whatever that we have here,

25
00:01:42,425 --> 00:01:46,580
the information that we stored in
this address space, eventually

26
00:01:46,580 --> 00:01:50,920
we have to use physical memory,
okay, that's RAM or physical memory,

27
00:01:50,920 --> 00:01:54,860
to actually implement this
abstraction we call an address space.

28
00:01:54,860 --> 00:01:56,570
So you enter the logical address,

29
00:01:56,570 --> 00:02:00,840
you say I want to access
logical location 2000.

30
00:02:00,840 --> 00:02:05,100
We have to say well that currently
lives somewhere in this physical memory

31
00:02:05,100 --> 00:02:06,126
we have here.

32
00:02:06,126 --> 00:02:11,520
So this code and data eventually has
to be placed in different places in

33
00:02:11,520 --> 00:02:13,400
the memory that we have.

34
00:02:13,400 --> 00:02:16,270
This address space has to be backed up,

35
00:02:16,270 --> 00:02:20,110
physically has to be supported with
the physical memory that we have.

36
00:02:20,110 --> 00:02:23,860
And this physical memory could be
multiple processes having their address

37
00:02:23,860 --> 00:02:28,840
spaces concurrently being or existing
in this physical memory that we have.

38
00:02:28,840 --> 00:02:33,880
So one of the things,
isolation we're talking about is that

39
00:02:33,880 --> 00:02:38,350
if I'm giving up some physical memory
for address space to do process A, and

40
00:02:38,350 --> 00:02:42,100
I give some physical memory
to another process B,

41
00:02:42,100 --> 00:02:46,190
it then uses that memory to store some
of its stuff from its address space.

42
00:02:46,190 --> 00:02:48,920
I have to isolate
the two address spaces,

43
00:02:48,920 --> 00:02:52,890
I actually have to isolate both
physical memory can process

44
00:02:52,890 --> 00:02:57,360
A access versus what physical
memory can process B access.

45
00:02:57,360 --> 00:02:59,420
So the operating system has to do that.

46
00:02:59,420 --> 00:03:03,950
I think isolation, the way to think
about this is when process A is running,

47
00:03:03,950 --> 00:03:06,900
it's adding space is in some
parts of this physical memory,

48
00:03:06,900 --> 00:03:09,405
it should only be able
to go to those parts.

49
00:03:09,405 --> 00:03:13,080
When process B is running, it should
be able to go to only those parts that

50
00:03:13,080 --> 00:03:15,490
are currently allocated to it.

51
00:03:15,490 --> 00:03:19,120
And they never run into each other
unless they choose to share,

52
00:03:19,120 --> 00:03:21,170
which is always sort of an exception.

53
00:03:22,290 --> 00:03:26,640
So when you talk about isolation,
think of an address space

54
00:03:26,640 --> 00:03:31,250
that's what a process thinks it has,
implementing that address space by

55
00:03:31,250 --> 00:03:34,860
storing pieces of pieces of indifferent
parts of memory, and then making sure

56
00:03:34,860 --> 00:03:37,810
that the process can only go to
physical memory that belongs to it.

57
00:03:37,810 --> 00:03:41,000
And that's how we get this isolation.

58
00:03:41,000 --> 00:03:44,230
So one of the things we want to do
is how exactly does it work, so

59
00:03:44,230 --> 00:03:45,300
to get some sense of that.
