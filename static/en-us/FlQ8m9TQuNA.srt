1
00:00:00,008 --> 00:00:04,220
Spring is a network operating system and the clients

2
00:00:04,220 --> 00:00:06,950
and the servers can be on the same machine, can

3
00:00:06,950 --> 00:00:09,490
be on different nodes on a local area network and

4
00:00:09,490 --> 00:00:12,610
in the Spring system, what they wanted to do was

5
00:00:12,610 --> 00:00:15,880
this idea of extensibility. They wanted to carry it to

6
00:00:15,880 --> 00:00:19,010
saying the client and the server should be impervious to

7
00:00:19,010 --> 00:00:22,150
where they are in the entire network. So the interaction

8
00:00:22,150 --> 00:00:25,150
should be freed. Or in other words, the client server

9
00:00:25,150 --> 00:00:28,720
interaction should be freed from the physical location of

10
00:00:28,720 --> 00:00:31,820
the clients and the servers. So for instance, in

11
00:00:31,820 --> 00:00:34,410
this picture, the clients and the servers are on

12
00:00:34,410 --> 00:00:37,730
the same machine. We've decided to replicate the servers

13
00:00:37,730 --> 00:00:40,380
in order to increase the availability, and now we

14
00:00:40,380 --> 00:00:43,900
have several copies of the servers and the clients

15
00:00:43,900 --> 00:00:48,220
are dynamically loaded to different servers for load distribution.

16
00:00:48,220 --> 00:00:50,160
And for those of you who are familiar with,

17
00:00:50,160 --> 00:00:53,810
you know, how services like Google work today,

18
00:00:53,810 --> 00:00:57,390
this is exactly what happens in services that we

19
00:00:57,390 --> 00:01:00,370
use on an everyday basis when we access Google.

20
00:01:00,370 --> 00:01:04,569
Our client requests are being routed to different servers

21
00:01:04,569 --> 00:01:05,940
and this is the same sort of thing

22
00:01:05,940 --> 00:01:08,480
that is happening in the Spring system that once

23
00:01:08,480 --> 00:01:12,190
you replicate the server, you want the client request

24
00:01:12,190 --> 00:01:15,470
to be routed to different servers depending on the

25
00:01:15,470 --> 00:01:18,640
physical proximity of the client to the servers, as

26
00:01:18,640 --> 00:01:22,340
well as the load that is currently being handled by

27
00:01:22,340 --> 00:01:25,765
one server versus another. Another variation of the same

28
00:01:25,765 --> 00:01:29,520
theme is where the server is not replicated, but the

29
00:01:29,520 --> 00:01:31,310
server is cached, for instance if it is a

30
00:01:31,310 --> 00:01:34,020
web server. Then there could be a proxy for the

31
00:01:34,020 --> 00:01:37,410
web, web server that is cached, and in that case

32
00:01:37,410 --> 00:01:40,540
the client request need not go to the origin web

33
00:01:40,540 --> 00:01:42,420
server, but it can go to the cached

34
00:01:42,420 --> 00:01:45,630
copies that are available. And so here again this

35
00:01:45,630 --> 00:01:48,240
decision of routing a client request to a

36
00:01:48,240 --> 00:01:52,540
particular cached copy of the server is dynamically taken.

37
00:01:52,540 --> 00:01:54,340
Not all of this sounds like magic in

38
00:01:54,340 --> 00:01:58,970
terms of how this client server relationship is being

39
00:01:58,970 --> 00:02:02,570
dynamically orchestrated, whether are in the same machine, or

40
00:02:02,570 --> 00:02:06,680
whether we dynamically decide to replicate the servers and

41
00:02:06,680 --> 00:02:10,610
decide to route the request to different servers, or we want to

42
00:02:10,610 --> 00:02:14,600
cache the servers and route the client request to different cache copies.

43
00:02:14,600 --> 00:02:18,390
All of these are dynamic decision that are taken. And how is

44
00:02:18,390 --> 00:02:20,840
this done? Well that's the part that we're going to see next.
