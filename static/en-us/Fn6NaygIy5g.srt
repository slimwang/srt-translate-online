1
00:00:00,000 --> 00:00:04,000
So let's do it! We're just going to get started writing an interpreter together.

2
00:00:04,000 --> 00:00:07,000
I'm going to write the first half of it, and for this quiz, you're going to finish it off.

3
00:00:07,000 --> 00:00:11,000
We're going to write a recursive procedure called interpret that's going to walk over

4
00:00:11,000 --> 00:00:15,000
abstract syntax trees and figure out what they mean.

5
00:00:15,000 --> 00:00:19,000
What figure out what they mean is, calls the graphics library to render a webpage.

6
00:00:19,000 --> 00:00:22,000
That's the meaning of HTML.

7
00:00:22,000 --> 00:00:24,000
The reason why we're operating on trees instead of just 1,

8
00:00:24,000 --> 00:00:26,000
this is mostly just how I'm labeling it.

9
00:00:26,000 --> 00:00:31,000
But remember, that HTML can be a collection of elements rather than just 1.

10
00:00:31,000 --> 00:00:34,000
For example, you could write out a webpage that said, "Hello, Friend",

11
00:00:34,000 --> 00:00:37,000
and it would be a list of 2 elements.

12
00:00:37,000 --> 00:00:41,000
So I want to make sure that we're prepared to take a list instead of just a single thing.

13
00:00:41,000 --> 00:00:44,000
We'll immediately dispense with that however by considering them one at a time.

14
00:00:44,000 --> 00:00:47,000
So now, for example, we'll just do the "Hello".

15
00:00:47,000 --> 00:00:50,000
Remember for us though, it would look something like this.

16
00:00:50,000 --> 00:00:54,000
We've decided to represent our abstract syntax trees as tuples.

17
00:00:54,000 --> 00:01:02,000
So I'm going to need to pull out the 0th element of this tree to see what sort of thing it is.

18
00:01:02,000 --> 00:01:03,000
So I'm going to pull out the nodetype.

19
00:01:03,000 --> 00:01:07,000
In our running example, it's word-element, but it could be Javascript element,

20
00:01:07,000 --> 00:01:09,000
tag element--bunch of possibilities.

21
00:01:09,000 --> 00:01:11,000
If it is a word element, I know what to do.

22
00:01:11,000 --> 00:01:14,000
I'm going to call our graphics library and say print out a word,

23
00:01:14,000 --> 00:01:18,000
and the word that I want you to print out is the second child of the tree.

24
00:01:18,000 --> 00:01:20,000
So in this example, it's "Hello,".

25
00:01:20,000 --> 00:01:23,000
Another possibility is that someone has given us a tag element--

26
00:01:23,000 --> 00:01:29,000
something like this--bold tag begins, some HTML in the center, bold tag ends.

27
00:01:29,000 --> 00:01:32,000
Well, we went to all the work to storing this information in our parser,

28
00:01:32,000 --> 00:01:34,000
so let's get it out now.

29
00:01:34,000 --> 00:01:38,000
The name of the tag we're entering is the first part of the abstract syntax tree.

30
00:01:38,000 --> 00:01:41,000
In this strong text example, it's just a b.

31
00:01:41,000 --> 00:01:44,000
There may well be some number of tag arguments.

32
00:01:44,000 --> 00:01:48,000
For the bold tag, no arguments, but for something like the anchor tag,

33
00:01:48,000 --> 00:01:49,000
there might be more.

34
00:01:49,000 --> 00:01:55,000
Then there's a list of HTML elements that we'll have to interpret later--

35
00:01:55,000 --> 00:01:56,000
strong text, in this example,

36
00:01:56,000 --> 00:01:58,000
and then there's the closing tag name.

37
00:01:58,000 --> 00:02:00,000
Here's what I want you to do for the quiz--

38
00:02:00,000 --> 00:02:01,000
2 different things.

39
00:02:01,000 --> 00:02:06,000
I want you to check that the tags match and interpret the subtree.

40
00:02:06,000 --> 00:02:10,000
If the trees don't match, use graphics.warning to make that really obvious.

41
00:02:10,000 --> 00:02:14,000
Otherwise, interpret the subtree. Hint: call interpret recursively.
