1
00:00:00,000 --> 00:00:03,000
So the answer is we don't need 20 multiplications; we only need 4.

2
00:00:03,000 --> 00:00:09,000
And the property we're taking advantage of is that X to the 2A is equal to X to the A squared.

3
00:00:09,000 --> 00:00:13,000
That means we can break 2 to the 20 down into parts--

4
00:00:13,000 --> 00:00:15,000
it's equal to 2 to the 10th squared

5
00:00:15,000 --> 00:00:18,000
which is equal to 2 to the 5 squared squared

6
00:00:18,000 --> 00:00:23,000
which is equal to--now 2 to the 5 is not divisible by 2--

7
00:00:23,000 --> 00:00:30,000
so that's equal to 2 to the 4 times 2 squared and squared.

8
00:00:30,000 --> 00:00:32,000
And so the number of multiplications--

9
00:00:32,000 --> 00:00:35,000
well what we're computing is each square involves a multiplication--

10
00:00:35,000 --> 00:00:39,000
so there's 1 multiplication there, there's 1 multiplication there,

11
00:00:39,000 --> 00:00:43,000
there's 1 multiplication there, and there's 1 multiplication there--

12
00:00:43,000 --> 00:00:44,000
so 4 total multiplications.

13
00:00:44,000 --> 00:00:48,000
So this does not scale exponentially in the size of the power.

14
00:00:48,000 --> 00:00:51,000
So this means computing A to the N power requires

15
00:00:51,000 --> 00:00:54,000
on the order of log N multiplications.

16
00:00:54,000 --> 00:00:56,000
In terms of the size of N, that means it's linear

17
00:00:56,000 --> 00:01:00,000
in terms of the number of bits needed to represent the power.
