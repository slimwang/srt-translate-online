1
00:00:00,000 --> 00:00:02,000
Welcome back.

2
00:00:02,000 --> 00:00:07,000
In our last exciting episode we learned about regular expressions,

3
00:00:07,000 --> 00:00:14,000
a concise notation as a way to write down or denote or match a number of strings.

4
00:00:14,000 --> 00:00:20,000
This 4 through 7 in brackets corresponds to 4 different strings 4, 5, 6, and 7.

5
00:00:20,000 --> 00:00:24,000
We learned to write more complicated regular expressions like this one--

6
00:00:24,000 --> 00:00:28,000
"b a +."--this plus means one or more copies of a's,

7
00:00:28,000 --> 00:00:35,000
yielding words like ba, baa, baaa, and eventually yielding my sheep.

8
00:00:35,000 --> 00:00:40,000
I assert that it's a sheep. You can tell because of the label. Those labels never lie.

9
00:00:40,000 --> 00:00:47,000
We also learned how you can use regular expressions in Python by importing,

10
00:00:47,000 --> 00:00:52,000
bring in, the functions and data types from the regular expression library.

11
00:00:52,000 --> 00:00:58,000
An example of such a function was findall, which, given a sort of needle regular expression,

12
00:00:58,000 --> 00:01:03,000
would return all of the places in the haystack that it matched.

13
00:01:03,000 --> 00:01:09,000
We also learned that you could turn regular expressions into finite state machines.

14
00:01:09,000 --> 00:01:14,000
This finite state machine accepts the same language as our ba, baa, baaa

15
00:01:14,000 --> 00:01:16,000
regular expression from above.

16
00:01:16,000 --> 00:01:19,000
Starting in a start state, on a b we transition to the middle state,

17
00:01:19,000 --> 00:01:22,000
on an a we end up in the third state, which is an accepting state.

18
00:01:22,000 --> 00:01:25,000
You can tell by the double circle. Then there's a self loop back.

19
00:01:25,000 --> 99:59:59,999
That was last time.
