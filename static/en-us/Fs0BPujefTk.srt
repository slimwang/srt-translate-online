1
00:00:00,000 --> 00:00:04,000
So we want to understand the relationship between Identifier or variable names

2
00:00:04,000 --> 00:00:08,000
(this means the same thing) and storage places,

3
00:00:08,000 --> 00:00:12,000
particular values as we're running our program; the state of the world.

4
00:00:12,000 --> 00:00:15,000
If I write something like this in Javascript, it's going to return 2.

5
00:00:15,000 --> 00:00:20,000
Conceptually, somewhere there's a box where we've made enough room

6
00:00:20,000 --> 00:00:23,000
to store the value 2, and we've labeled that with x.

7
00:00:23,000 --> 00:00:29,000
Since this is a place for storing a value, we might call it a storage location or storage place.

8
00:00:29,000 --> 00:00:35,000
If I write x=3, we need to go back to this box and update it with the new value,

9
00:00:35,000 --> 00:00:39,000
because x can only have 1 value at a time in the same context.

10
00:00:39,000 --> 00:00:45,000
So, if I declare another variable, it's going to make another box, another storage location.

11
00:00:45,000 --> 00:00:48,000
We'll need to use more memory in the computer to store this value.

12
00:00:48,000 --> 00:00:50,000
Let's see a more complete example.

13
00:00:50,000 --> 00:00:53,000
Here in this program we start off by initializing y to 2,

14
00:00:53,000 --> 00:00:57,000
we declare a myfun function of x, it prints out x and then it prints out y,

15
00:00:57,000 --> 00:00:59,000
and then we call a myfun of y plus 5.

16
00:00:59,000 --> 00:01:03,000
A little reasoning suggests that this is going to print out first the value of x,

17
00:01:03,000 --> 00:01:06,000
x is y plus 5, y is 2, so first we're going to print out 7,

18
00:01:06,000 --> 00:01:10,000
and then we're going to print out y which was 2, 7 and 2.

19
00:01:10,000 --> 00:01:12,000
So, initially maybe our world looks a bit like this.

20
00:01:12,000 --> 00:01:16,000
Y has the value of 2. But then when we call this function,

21
00:01:16,000 --> 00:01:18,000
we're moving into a slightly new context

22
00:01:18,000 --> 00:01:22,000
that has to have room for x, it's actual argument.

23
00:01:22,000 --> 00:01:28,000
The particular value we put in there is y plus 5, or 7, but we want to remember our roots.

24
00:01:28,000 --> 00:01:35,000
I defined this function here right next to the place where y was equal to 2,

25
00:01:35,000 --> 00:01:38,000
so when I'm in this context, printing out x and y,

26
00:01:38,000 --> 00:01:44,000
I can get the value of x right here, and I may have to look a little farther to get the value of y,

27
00:01:44,000 --> 00:01:47,000
but I can just trace the arrows and do it.

28
00:01:47,000 --> 00:01:52,000
Whenever we make a function call, it's going to get us a new box, new storage locations,

29
00:01:52,000 --> 00:01:55,000
and I'm going to firm up this intuition in just a bit.

30
00:01:55,000 --> 00:01:57,000
I realize it's very hand-wavy now.

31
00:01:57,000 --> 00:02:02,000
Here's the quiz. I've written a Python program that has 3 print statements.

32
00:02:02,000 --> 99:59:59,999
I'd like you to tell me what each one prints out. Fill in the blanks.
