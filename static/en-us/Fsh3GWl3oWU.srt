1
00:00:00,540 --> 00:00:04,280
Let's write down some pseudocode for
a sequential BFS algorithm.

2
00:00:04,280 --> 00:00:08,240
This algorithm will take as input
a graph G represented by its vertices

3
00:00:08,240 --> 00:00:09,050
and edges.

4
00:00:09,050 --> 00:00:11,340
As well as a source vertex S.

5
00:00:11,340 --> 00:00:14,690
What it will produce is
a map of distances D

6
00:00:14,690 --> 00:00:19,570
where D of a vertex X is
the distance from S to X.

7
00:00:19,570 --> 00:00:22,290
Now initially,
we don't know any of the distances.

8
00:00:22,290 --> 00:00:27,450
So we'll initialize D to be infinity for
all vertices except S.

9
00:00:27,450 --> 00:00:30,240
S is just zero edges away from itself.

10
00:00:30,240 --> 00:00:33,500
Notice that according to this
initialization convention,

11
00:00:33,500 --> 00:00:38,090
if there is no path from S to X,
then we'll get an infinity at D of X.

12
00:00:38,090 --> 00:00:42,980
Now the algorithm will also maintain
a Q F of unvisited vertices.

13
00:00:42,980 --> 00:00:45,850
Initially, F just contains the source s.

14
00:00:45,850 --> 00:00:49,700
Now as long as F is not empty,
the algorithm does the following.

15
00:00:49,700 --> 00:00:53,180
It first extracts an unvisited vertex v.

16
00:00:53,180 --> 00:00:55,790
It then loops over all of v's neighbors.

17
00:00:55,790 --> 00:00:58,170
Let's call a given neighbor w.

18
00:00:58,170 --> 00:01:00,180
If w does not have a distance yet,

19
00:01:00,180 --> 00:01:04,269
meaning its distance is set to infinity,
then, we will update it's distance to be

20
00:01:04,269 --> 00:01:08,390
the distance of v plus one since
w is just one edge away from v.

21
00:01:08,390 --> 00:01:13,010
In addition, if it didn't have
a distance yet, then it wasn't visited.

22
00:01:13,010 --> 00:01:16,290
Therefore, we should throw
w into the visited queue.

23
00:01:16,290 --> 00:01:19,490
In this example, I have given
this vertex a label of a and

24
00:01:19,490 --> 00:01:21,460
I have thrown it into f.

25
00:01:21,460 --> 00:01:24,940
Now let's consider the next
neighbor of the current vertex V.

26
00:01:24,940 --> 00:01:26,800
It's also unvisited.

27
00:01:26,800 --> 00:01:31,230
So we repeat this process of updating
its distance and adding it to F.

28
00:01:31,230 --> 00:01:34,010
Now would be a good time for
you to pause and continue to trace

29
00:01:34,010 --> 00:01:37,210
the algorithm, to see how it works and
convince yourself that it's correct.

30
00:01:38,290 --> 00:01:40,990
Now what is the cost of this algorithm?

31
00:01:40,990 --> 00:01:45,040
Since you traced it's execution as I
suggested, then you observe that it only

32
00:01:45,040 --> 00:01:49,010
inserts a vertex into F if
it has not yet been visited.

33
00:01:49,010 --> 00:01:52,370
Therefore the number of iterations of
the while loop shouldn't be more than

34
00:01:52,370 --> 00:01:54,370
the number of vertices or the size of V.

35
00:01:55,380 --> 00:01:59,350
And since each vertex appears in F at
most once, we'll visit each edge at most

36
00:01:59,350 --> 00:02:03,930
once if the graph is directed, or
twice if the graph is undirected.

37
00:02:03,930 --> 00:02:07,590
That means that the body of
the innermost for loop will be executed

38
00:02:07,590 --> 00:02:12,420
a total number of times that is at
most big O of the number of edges.

39
00:02:12,420 --> 00:02:13,250
In other words,

40
00:02:13,250 --> 00:02:18,460
the total cost of the algorithm is big
O of the size of v plus the size of E.

41
00:02:18,460 --> 00:02:21,630
Again, if you trace through the
algorithm yourself on a sample graph,

42
00:02:21,630 --> 00:02:22,920
you'll see how this happens.
