1
00:00:00,271 --> 00:00:07,111
In Problem Set number 6, you will be implementing a fast parallel algorithm for seamless image cloning.

2
00:00:07,111 --> 00:00:14,216
Seamless image cloning is a modern algorithm for pasting one image into another in a very subtle way.

3
00:00:14,216 --> 00:00:17,227
Here is an example of seamless image cloning.

4
00:00:17,227 --> 00:00:20,019
For example, you have a bear, a swimming pool.

5
00:00:20,019 --> 00:00:23,891
With seamless image cloning, you now have a polar bear in a swimming pool.

6
00:00:23,891 --> 00:00:26,928
Our algorithm for seamless image cloning uses

7
00:00:26,928 --> 00:00:32,503
a technique called "double buffering" to iteratively compute a solution.

8
00:00:32,503 --> 00:00:37,008
The main idea behind double buffering in the context of this homework

9
00:00:37,008 --> 00:00:42,834
is that we store an approximate solution to a problem in one buffer.

10
00:00:42,834 --> 00:00:50,959
Then we use that approximate solution to compute a better solution which we will store in another buffer.

11
00:00:50,959 --> 00:00:53,695
Then we go in the other direction,

12
00:00:53,695 --> 00:00:56,005
computing an even better solution,

13
00:00:56,005 --> 00:00:59,228
and store that solution in the first buffer.

14
00:00:59,228 --> 00:01:06,335
After going back and forth many times, we will arrive at an ideal solution to our problem.

15
00:01:06,335 --> 00:01:10,840
This style of computation arises in many parallel algorithms,

16
00:01:10,840 --> 00:01:15,843
which is why we think it will make a really interesting homework assignment.

17
00:01:15,843 --> 00:01:21,748
Before we implement seamless image cloning, let's take a closer look at our inputs.

18
00:01:21,748 --> 00:01:27,956
We are given as inputs a source image, a target image, and a mask.

19
00:01:27,956 --> 00:01:34,704
We want to copy the masked value from the source image into the target image in a subtle way.

20
00:01:34,704 --> 00:01:42,367
To do this, we hard code the values on the inside border of the masked region to be the same as the target image,

21
00:01:42,367 --> 00:01:51,210
then what we do is to solve for the unknown pixel values in the strict interior of the masked region.

22
00:01:51,210 --> 00:01:57,687
How do we find these unknown pixel values in the strict interior portion of the masked image?

23
00:01:57,687 --> 00:01:59,022
We can do that as follows.

24
00:01:59,022 --> 00:02:05,762
First step, we will make a guess for the unknown pixel values, and that's called our initial guess I0.

25
00:02:05,762 --> 00:02:08,517
I0 doesn't have to be a very good guess,

26
00:02:08,517 --> 00:02:16,026
so we can set I0 to be all zeros in the strict interior portion of our masked image.

27
00:02:16,026 --> 00:02:22,865
But note that 0 will be a very bad guess, because it would not be very subtle

28
00:02:22,865 --> 00:02:26,309
and it also would not conform to the source image very well.

29
00:02:26,309 --> 00:02:31,113
Now suppose we are given a guess solution IK to our problem,

30
00:02:31,113 --> 00:02:35,846
we can compute a better guess IK + 1 as follows.

31
00:02:35,846 --> 00:02:44,319
For some pixel i(k + 1) in I(k + 1) in the strict interior region of the mask,

32
00:02:44,319 --> 00:02:51,894
we can compute the value of i of K + 1 as A + B + C divided by D.

33
00:02:51,894 --> 00:02:57,440
And let's go through each of A and B and C and D one at a time.

34
00:02:57,440 --> 00:03:01,103
A is the sum of iK's neighbors.

35
00:03:01,103 --> 00:03:05,707
We don't include iK in the sum, and we only include iK's neighbors

36
00:03:05,707 --> 00:03:10,087
if they are in the strict interior portion of the masked region.

37
00:03:10,087 --> 00:03:15,584
B is the sum of t's neighbors where t is the corresponding pixel value in the target image,

38
00:03:15,584 --> 00:03:18,387
and the target image in our case is the swimming pool.

39
00:03:18,387 --> 00:03:24,058
And we only include t's neighbors if they are in the inside border of the masked region.

40
00:03:24,058 --> 00:03:30,337
And C is the sum of the difference between S and S's neighbors

41
00:03:30,337 --> 00:03:34,806
where S in this case is the corresponding pixel value in the source image

42
00:03:34,806 --> 00:03:38,174
and the source image in our case is the polar bear.

43
00:03:38,174 --> 00:03:43,479
Finally, D is the number of iK's neighbors,

44
00:03:43,479 --> 00:03:47,479
and iK's neighbors can be less than 4 if iK is on the border of the image.
