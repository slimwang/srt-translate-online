1
00:00:00,310 --> 00:00:02,800
So, now let's look at cycle three. In cycle three,

2
00:00:02,800 --> 00:00:06,700
we will try to issue the next instruction which is this multiplication.

3
00:00:06,700 --> 00:00:09,995
We will look at whether we have a unit, yes we do.

4
00:00:09,995 --> 00:00:17,110
Is going to be a multiply instruction. F2 and F4 are LD2 and

5
00:00:17,110 --> 00:00:22,170
the actual value of F4. So here, we will mark the actual value of F4,

6
00:00:22,170 --> 00:00:28,360
this is our second operand as 2.5, because that's what this says.

7
00:00:28,360 --> 00:00:31,660
And then for the first operand, we will mark that we are waiting for LD2.

8
00:00:31,660 --> 00:00:35,150
This is going to make it very easy to determine which things are,

9
00:00:35,150 --> 00:00:38,290
ready to execute, because the instruction should not really have anything here

10
00:00:38,290 --> 00:00:42,430
if it's ready to execute. And this instruction is, not going to be ready yet,

11
00:00:42,430 --> 00:00:47,740
because it's waiting for the second load. And, then we're going to rename F0 so

12
00:00:47,740 --> 00:00:51,200
that it points to, the reservation station, in this case,

13
00:00:51,200 --> 00:00:56,220
ML1, that contains this, instruction. In this third cycle, the first load is

14
00:00:56,220 --> 00:01:00,180
still executing, now the question is, can the second load begin execution?

15
00:01:00,180 --> 00:01:03,680
If we have a pipeline load store unit, then, yes, it would be.

16
00:01:03,680 --> 00:01:06,270
Because in the previous cycle, we have begun this instruction.

17
00:01:06,270 --> 00:01:10,400
It's in the second stage now. So now we can begin the first stage for

18
00:01:10,400 --> 00:01:14,710
this instruction. But lets say we don't have a pipeline load story on it.

19
00:01:14,710 --> 00:01:18,350
That only our add unit is pipelined. In which case,

20
00:01:18,350 --> 00:01:23,240
this load will not be able to dispatch into the execution unit until cycle four

21
00:01:23,240 --> 00:01:27,620
because basically the execution unit will be occupied in cycles two and

22
00:01:27,620 --> 00:01:33,227
three by, the first load. So, we will, [SOUND] kind of mark that in cycle four,

23
00:01:33,227 --> 00:01:38,407
we will be able to, begin execution of this if, everything else is ready. And

24
00:01:38,407 --> 00:01:41,740
nothing is still broadcast in the result. The first load is still,

25
00:01:41,740 --> 00:01:46,090
executing in cycle three. So, now we go to cycle four. In cycle four,

26
00:01:46,090 --> 00:01:49,510
we will try to issue the next instruction, which is this subtract.

27
00:01:49,510 --> 00:01:55,580
It's going to use. And add R unit, so this is, just to mark it as a subtract,

28
00:01:55,580 --> 00:02:00,474
we are going to issue it in this cycle. F2 and F6, or LD2 and LD1, so

29
00:02:00,474 --> 00:02:05,766
this one is actually waiting like this and we also have to,

30
00:02:05,766 --> 00:02:12,960
mark the F8 as renamed. To 81 so this completes the issuing in this cycle.

31
00:02:12,960 --> 00:02:18,625
Now let's see, if we can dispatch something. Well, this is cycle four.

32
00:02:18,625 --> 00:02:22,670
In cycles two and three the first load has been executing now it's ready to

33
00:02:22,670 --> 00:02:26,550
write so basically we can begin execution of this instruction so

34
00:02:26,550 --> 00:02:30,150
it's been dispatched in cycle four now we no longer need this.

35
00:02:30,150 --> 00:02:34,610
Are any of the other instructions ready to execute? Well, not in this cycle so

36
00:02:34,610 --> 00:02:38,370
now we're going to write the result, in LD1. LD1 here,

37
00:02:38,370 --> 00:02:42,570
we kind of note it here that it's going to write the result in cycle four

38
00:02:42,570 --> 00:02:46,690
which is now, so now we're going to write to, the result of this instruction. So

39
00:02:46,690 --> 00:02:51,070
we can mark here that we are writing that result. And, what's going to happen

40
00:02:51,070 --> 00:02:54,930
now is basically is going to broke us with a type of LD1 and the value will be

41
00:02:54,930 --> 00:02:58,670
loaded from memory from this address and that value is going to be put to F6.

42
00:02:59,720 --> 00:03:05,150
So, what we do now is we're going to broke that value and, capture that

43
00:03:05,150 --> 00:03:11,110
value everywhere, where we have LD1 in this table. So, each of these is going to

44
00:03:11,110 --> 00:03:15,790
compare its tag to LD1 and whatever we see in LD1 we're going to get that value.

45
00:03:15,790 --> 00:03:21,180
So. In this case, only this particular instruction is going to latch its value.

46
00:03:21,180 --> 00:03:27,370
So let's say that the value is 7.1. Okay. That completes the result capture.

47
00:03:27,370 --> 00:03:32,720
We still have to put 7.1 in the actual register F6. So

48
00:03:32,720 --> 00:03:39,040
somewhere in F6. We have 7.1 now, because this was pointing to LD1.

49
00:03:39,040 --> 00:03:44,270
LD1 is done now, so, now we can find that value in the register file. And

50
00:03:44,270 --> 00:03:48,140
now we can free this reservation station. So, when you free a reservation

51
00:03:48,140 --> 00:03:52,700
station, what you really do is, you just, turn off the valid bit for the entry,

52
00:03:52,700 --> 00:03:56,210
you don't really have to erase the whole entry. So I'm going to,

53
00:03:56,210 --> 00:03:59,530
erase it just to prepare for the next instruction, but keep in mind that,

54
00:03:59,530 --> 00:04:03,820
in real hardware there is just a single bit that just gets marked zero, and that

55
00:04:03,820 --> 00:04:09,790
is considered to free the reservation station. Now in this cycle, in cycle four,

56
00:04:09,790 --> 00:04:13,260
we have issued an instruction, we have tried to dispatch an instruction, and

57
00:04:13,260 --> 00:04:18,240
we've found that only the load really can be dispatched. And, we have written a,

58
00:04:18,240 --> 00:04:21,700
our result back. Only one result can be written per cycle anyway.

59
00:04:21,700 --> 00:04:25,110
So, that's it for this cycle. So, let's move on to cycle five.
