1
00:00:00,000 --> 00:00:02,490
So far you've added Record button that's

2
00:00:02,490 --> 00:00:04,500
perfectly centered on screen for both

3
00:00:04,500 --> 00:00:08,400
the iPhone and iPad. Now we need a way to

4
00:00:08,400 --> 00:00:10,800
connect the Record button here in the

5
00:00:10,800 --> 00:00:12,120
View to the code in the ViewController.swift file.

6
00:00:12,120 --> 00:00:15,509
we need a way to work

7
00:00:15,509 --> 00:00:17,340
with both the view that we see here in

8
00:00:17,340 --> 00:00:19,619
Interface Builder and the code for the

9
00:00:19,619 --> 00:00:23,340
View Controller at the same time.

10
00:00:23,340 --> 00:00:25,170
There's a great way to do this in Xcode, and it's

11
00:00:25,170 --> 00:00:27,960
called the assistant editor.

12
00:00:27,960 --> 00:00:29,550
Before I show it to you, I’m going to reveal the

13
00:00:29,550 --> 00:00:33,360
Navigator panel again. We can do that by

14
00:00:33,360 --> 00:00:36,180
clicking this button here. So to use the

15
00:00:36,180 --> 00:00:37,829
assistant editor, first we want to make

16
00:00:37,829 --> 00:00:39,900
sure that we have our

17
00:00:39,900 --> 00:00:42,899
Main.storyboard file selected, then in the

18
00:00:42,899 --> 00:00:44,760
upper right-hand corner of the editor,

19
00:00:44,760 --> 00:00:45,930
we want to click on the button that looks

20
00:00:45,930 --> 00:00:48,239
like two circles intertwined.

21
00:00:48,239 --> 00:00:52,980
This will show the assistant editor.

22
00:00:52,980 --> 00:00:55,110
Great. Ok this looks like a lot of madness on

23
00:00:55,110 --> 00:00:56,579
the screen, so let's hide away a couple

24
00:00:56,579 --> 00:00:57,989
things so that we know what we're

25
00:00:57,989 --> 00:01:00,449
looking at. I’m going to get rid of the

26
00:01:00,449 --> 00:01:05,188
inspector panel or the utilities.

27
00:01:05,188 --> 00:01:06,630
I’m also going to hide the debug area on the

28
00:01:06,630 --> 00:01:07,409
bottom.

29
00:01:07,409 --> 00:01:11,640
Great this is what we want to see.

30
00:01:11,640 --> 00:01:14,189
The assistant editor splits Xcode in half.

31
00:01:14,189 --> 00:01:16,290
And on the right side right now, we have

32
00:01:16,290 --> 00:01:18,420
our code for the View Controller.

33
00:01:18,420 --> 00:01:21,900
And on the left side we have our interface.

34
00:01:21,900 --> 00:01:23,250
I’m also going to reduce the size of the

35
00:01:23,250 --> 00:01:28,110
Document Outline. And scroll around to

36
00:01:28,110 --> 00:01:30,600
center our interface in the interface

37
00:01:30,600 --> 00:01:31,140
editor here.

38
00:01:31,140 --> 00:01:34,490
Ok now we're going to use something

39
00:01:34,490 --> 00:01:36,000
called an IBAction to connect the

40
00:01:36,000 --> 00:01:39,810
button to our View Controller.

41
00:01:39,810 --> 00:01:41,790
It's going to link the pressing of the button to a

42
00:01:41,790 --> 00:01:44,400
function that's actually inside

43
00:01:44,400 --> 00:01:45,720
our View Controller in code.

44
00:01:45,720 --> 00:01:48,990
This is known as a Target-action.

45
00:01:48,990 --> 00:01:51,479
The target is the View Controller and

46
00:01:51,479 --> 00:01:53,159
the action is the function we're about to create.

47
00:01:53,159 --> 00:01:56,310
Select the Record button in

48
00:01:56,310 --> 00:01:57,840
the Storyboard and then we want to

49
00:01:57,840 --> 00:01:59,820
control drag it over to the View

50
00:01:59,820 --> 00:02:01,920
Controller’s code until it's right above

51
00:02:01,920 --> 00:02:05,430
the last curly brace. So I’ll hold control

52
00:02:05,430 --> 00:02:09,300
and then I’ll click drag and let's hover

53
00:02:09,300 --> 00:02:11,220
it right here right above this last

54
00:02:11,220 --> 00:02:13,500
curly brace and then let go.

55
00:02:13,500 --> 00:02:16,410
In the dialog that appears, we want to

56
00:02:16,410 --> 00:02:22,200
select Action and not Outlet.

57
00:02:22,200 --> 00:02:28,170
Then for the name, let's type recordAudio.

58
00:02:28,170 --> 00:02:29,520
This will be the name of the function that's

59
00:02:29,520 --> 00:02:32,520
going to be created. And click Connect.

60
00:02:32,520 --> 00:02:35,550
Now we see that Xcode created a

61
00:02:35,550 --> 00:02:38,400
function for us called recordAudio and

62
00:02:38,400 --> 00:02:39,480
it's connected the button to this

63
00:02:39,480 --> 00:02:41,190
function in the ViewController.swift file.

64
00:02:41,190 --> 00:02:44,100
We can see that the function

65
00:02:44,100 --> 00:02:45,840
is connected back to our interface

66
00:02:45,840 --> 00:02:47,670
because of this filled in circle next to

67
00:02:47,670 --> 00:02:50,370
the function. When I hover over it, we can

68
00:02:50,370 --> 00:02:52,290
see that the button is highlighted in

69
00:02:52,290 --> 00:02:54,959
the Interface Builder. So now every time

70
00:02:54,959 --> 00:02:57,000
a user presses the Record button, this

71
00:02:57,000 --> 00:02:59,850
function will be called. A good practice

72
00:02:59,850 --> 00:03:01,650
for software development is to test your

73
00:03:01,650 --> 00:03:03,959
code often and PitchPerfect is no

74
00:03:03,959 --> 00:03:05,760
exception.

75
00:03:05,760 --> 00:03:07,950
Let's add a line of what I call caveman

76
00:03:07,950 --> 00:03:09,870
debugging to this function to print out

77
00:03:09,870 --> 00:03:11,280
to the console that the button was pressed.

78
00:03:11,280 --> 00:03:15,300
So we'll type

79
00:03:15,300 --> 00:03:17,430
print(“record button was pressed”).

80
00:03:17,430 --> 00:03:19,110
And this should be printed each time

81
00:03:19,110 --> 00:03:19,769
the user taps the button.

82
00:03:19,769 --> 00:03:22,830
Ok let's press Run and run PitchPerfect

83
00:03:22,830 --> 00:03:27,120
in the iOS simulator. First I need to go

84
00:03:27,120 --> 00:03:29,280
back to iPhone 7, that's what I

85
00:03:29,280 --> 00:03:35,100
want to use. And run. All right before I

86
00:03:35,100 --> 00:03:36,900
click the Record button to test this,

87
00:03:36,900 --> 00:03:38,459
if you're not seeing the debug area,

88
00:03:38,459 --> 00:03:41,549
make sure that it's revealed in Xcode.

89
00:03:41,549 --> 00:03:43,790
You can toggle it on and off by clicking this

90
00:03:43,790 --> 00:03:47,400
button in the top right hand corner.

91
00:03:47,400 --> 00:03:48,390
And I’ll drag it up to give it a little bit

92
00:03:48,390 --> 00:03:51,209
more screen real estate. And we'll go

93
00:03:51,209 --> 00:03:53,940
back to our simulator. Now when I press

94
00:03:53,940 --> 00:03:55,890
the Record button, I can see the message

95
00:03:55,890 --> 00:03:59,400
is appearing in the console. If I press the

96
00:03:59,400 --> 00:04:00,930
button again, it prints out again

97
00:04:00,930 --> 00:04:02,549
So we can tell that it's calling our

98
00:04:02,549 --> 00:04:05,730
recordAudio function. You may be wondering why

99
00:04:05,730 --> 00:04:08,400
do I call this print statement caveman debugging?

100
00:04:08,400 --> 00:04:10,650
Well it's the oldest and

101
00:04:10,650 --> 00:04:12,209
simplest form of debuging your code

102
00:04:12,209 --> 00:04:14,579
just by logging something to the screen.

103
00:04:14,579 --> 00:04:16,798
As you progress with content you'll

104
00:04:16,798 --> 00:04:18,810
learn some really powerful ways to watch,

105
00:04:18,810 --> 00:04:21,120
debug and step into the execution of

106
00:04:21,120 --> 00:04:23,250
your code. For now we're fine to use

107
00:04:23,250 --> 00:04:25,410
caveman debugging to ensure the recordAudio

108
00:04:25,410 --> 00:04:31,940
function is getting called.

