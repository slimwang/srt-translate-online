1
00:00:00,170 --> 00:00:03,760
Okay, let's take a look at an example of applying this procedure

2
00:00:03,760 --> 00:00:06,070
we've just talked about. Now in this case, what I want to

3
00:00:06,070 --> 00:00:09,190
do is work with the OpenStreetMap data for the city

4
00:00:09,190 --> 00:00:12,950
of Chicago, Illinois in the United States, I chose this because Chicago is

5
00:00:12,950 --> 00:00:16,950
my hometown. Now looked at an example from this data set in

6
00:00:16,950 --> 00:00:21,330
a previous lesson when we were talking about extracting data from XML.

7
00:00:21,330 --> 00:00:23,290
Now, in this example, we're going to take a look at a

8
00:00:23,290 --> 00:00:25,280
small part of the cleaning that we would need to do for this

9
00:00:25,280 --> 00:00:28,060
data set. This is all human-entered data. Or, for the

10
00:00:28,060 --> 00:00:32,390
most part, human-entered data. So, it is especially dirty. What I'd

11
00:00:32,390 --> 00:00:35,000
like to look at here is auditing street types. So,

12
00:00:35,000 --> 00:00:38,190
for example, avenue. One thing we might be interested in doing

13
00:00:38,190 --> 00:00:41,210
with a data set like this is harmonizing all of

14
00:00:41,210 --> 00:00:44,740
the data, so that we have just one way of writing

15
00:00:44,740 --> 00:00:48,530
something that's an avenue. Alternatively, what we might actually be interested

16
00:00:48,530 --> 00:00:50,960
in doing is encoding the fact that this is an avenue

17
00:00:50,960 --> 00:00:55,130
somewhere in the tag set for this particular address. Or, encoding

18
00:00:55,130 --> 00:00:58,290
it in some other way. Okay? So, the type of data

19
00:00:58,290 --> 00:01:01,930
that we're going to be getting in to our auditing routine

20
00:01:01,930 --> 00:01:04,239
is an entire street name. And what we're going to be

21
00:01:04,239 --> 00:01:08,920
extracting is just the street type. And, then, taking a look

22
00:01:08,920 --> 00:01:11,450
at all of the different street types that are mentioned in

23
00:01:11,450 --> 00:01:13,120
the data set that we have. Now the data set that

24
00:01:13,120 --> 00:01:16,020
we're going to work with here Is actually only a fraction of

25
00:01:16,020 --> 00:01:18,778
the complete Chicago OpenStreetMap data set. In this case,

26
00:01:18,778 --> 00:01:21,022
we're going to be working with about 20% of the total data

27
00:01:21,022 --> 00:01:24,480
set. The entire data set is almost 2 gigabytes. So for text,

28
00:01:24,480 --> 00:01:28,330
that's a pretty large data set. Okay, back to the code. So,

29
00:01:28,330 --> 00:01:30,600
as I mentioned, we're going to be getting street names, and

30
00:01:30,600 --> 00:01:34,250
what we want to do is recognize types from street names. Now,

31
00:01:34,250 --> 00:01:38,250
I'm going to use Python's regular expression module in order to parse out

32
00:01:38,250 --> 00:01:41,090
the street types. So, let's take a look at the regular expression

33
00:01:41,090 --> 00:01:44,770
that's here. Okay. We're going to match a sequence

34
00:01:44,770 --> 00:01:48,740
of non-white space characters optionally followed by a period.

35
00:01:48,740 --> 00:01:51,650
This is to catch abbreviations like ave or st

36
00:01:51,650 --> 00:01:55,400
as an abbreviation for street, and this match must occur

37
00:01:55,400 --> 00:01:58,450
at the end of the string. And we're going

38
00:01:58,450 --> 00:02:01,661
to use this regular expression right here. And each time

39
00:02:01,661 --> 00:02:03,979
this function audit street type is going to be

40
00:02:03,979 --> 00:02:06,460
parse the street name. We're going to do a match

41
00:02:06,460 --> 00:02:10,350
against that string looking for something like ave or avenue

42
00:02:10,350 --> 00:02:13,890
or street. Okay. Let's take out more holistic look at this

43
00:02:13,890 --> 00:02:16,120
particular piece of code. Now, again, this is just a

44
00:02:16,120 --> 00:02:18,500
small portion of the type of auditing that we would want to

45
00:02:18,500 --> 00:02:21,200
do, so the way I've set this up is the

46
00:02:21,200 --> 00:02:24,360
main routine here is called audit, and what audit is doing

47
00:02:24,360 --> 00:02:27,280
is it's looping through this XML file using the Sax

48
00:02:27,280 --> 00:02:32,060
parser that's part of the element tree module. From Python. Let's

49
00:02:32,060 --> 00:02:34,980
just take a look there. See? And in this case I'm

50
00:02:34,980 --> 00:02:39,120
actually using the C implementation of this particular module. So I'd

51
00:02:39,120 --> 00:02:41,610
encourage you again to go take a look at the documentation

52
00:02:41,610 --> 00:02:46,540
for XML etree, in particular the element tree module. Okay, now

53
00:02:46,540 --> 00:02:49,080
what we're going to be doing here is looping through that

54
00:02:49,080 --> 00:02:52,240
file. We're going to get one tag at a time here.

55
00:02:52,240 --> 00:02:54,800
And, what I'm doing each time is asking the question, is

56
00:02:54,800 --> 00:02:57,080
this a street name? Now, if we were doing a full

57
00:02:57,080 --> 00:03:00,250
auditing parse, we might actually have multiple things that

58
00:03:00,250 --> 00:03:03,770
we're checking here and be generating multiple types of

59
00:03:03,770 --> 00:03:06,150
audit data. In our case, what we're going to

60
00:03:06,150 --> 00:03:09,530
be doing is essentially creating a record of all

61
00:03:09,530 --> 00:03:12,500
street types that we find in this data set.

62
00:03:12,500 --> 00:03:16,000
So, let's go ahead and run this. Okay, and

63
00:03:16,000 --> 00:03:18,970
here's out output. Now, what I did here, was

64
00:03:18,970 --> 00:03:22,100
essentially keep a record of the number of times I

65
00:03:22,100 --> 00:03:25,380
saw all the different street types. And my parser recognizes the

66
00:03:25,380 --> 00:03:28,120
street type from the street name. We can see that we've

67
00:03:28,120 --> 00:03:32,360
got four different forms. Of avenue, the most common one being

68
00:03:32,360 --> 00:03:35,840
the full word avenue and then ave as an abbreviation without a

69
00:03:35,840 --> 00:03:38,130
period, although there were several that had a period. And again

70
00:03:38,130 --> 00:03:41,400
remember this is only 20% of the data type. Okay, the other

71
00:03:41,400 --> 00:03:43,950
thing that's nice about auditing the data this way is I

72
00:03:43,950 --> 00:03:47,180
would have forgotten about street types like court. For example, and I've

73
00:03:47,180 --> 00:03:50,630
actually got three different types of court represented here, and

74
00:03:50,630 --> 00:03:52,990
probably also boulevard. And we can see that that also

75
00:03:52,990 --> 00:03:55,840
is represented. So what we've done here is essentially audit

76
00:03:55,840 --> 00:03:59,535
all of the street types as entered by the human editors

77
00:03:59,535 --> 00:04:01,690
over the OpenStreetMap data. Now what we would

78
00:04:01,690 --> 00:04:05,400
do with this particular type of data Is then decide,

79
00:04:05,400 --> 00:04:07,470
okay, what type of cleaning is necessary? Do we want

80
00:04:07,470 --> 00:04:12,530
to convert all forms of avenue into the full word avenue.

81
00:04:12,530 --> 00:04:15,950
And, do something similar with all of the other street

82
00:04:15,950 --> 00:04:19,940
types. What type of capitalization do we want? Do we want

83
00:04:19,940 --> 00:04:21,760
something that looks like this? Or, do we want just the

84
00:04:21,760 --> 00:04:25,600
first letter capitalized? And then finally, we can see that there

85
00:04:25,600 --> 00:04:27,990
are lots of things that actually matched our parser, which

86
00:04:27,990 --> 00:04:30,050
are not in-fact, street types. So, we need to be careful

87
00:04:30,050 --> 00:04:32,640
about that, as we're actually doing the cleaning. So that we

88
00:04:32,640 --> 00:04:37,690
don't In fact, introduce further errors into the process. Okay? So,

89
00:04:37,690 --> 00:04:40,160
I'd encourage you to take a look at this

90
00:04:40,160 --> 00:04:42,980
code which is shared with you and make sure you

91
00:04:42,980 --> 00:04:45,760
understand how it works. The next step then, would

92
00:04:45,760 --> 00:04:48,580
be to actually use the audit data. That we have

93
00:04:48,580 --> 00:04:51,950
here, in order to figure out some cleaning tasks,

94
00:04:51,950 --> 00:04:55,360
for street types. And again, as I mentioned, this is

95
00:04:55,360 --> 00:04:57,080
just a small portion of the type of cleaning that

96
00:04:57,080 --> 00:04:59,270
we would have to do for this particular data set.
