1
00:00:00,190 --> 00:00:03,320
The vertex shader only knows about a single vertex at a time. It normally

2
00:00:03,320 --> 00:00:07,511
doesn't know about the whole triangle. So this statement is false. The vertex

3
00:00:07,511 --> 00:00:12,076
shader is given just one vertex at a time, so has only its position. The second

4
00:00:12,076 --> 00:00:15,130
statement is true. The vertex shader can output the shading normal, which is

5
00:00:15,130 --> 00:00:18,538
then interpolated across the triangle's surface. The fragment shader will

6
00:00:18,538 --> 00:00:21,730
probably want to normalize the shading normal before using it. The third

7
00:00:21,730 --> 00:00:24,998
statement is also true. Even though the vertex itself does not have a color

8
00:00:24,998 --> 00:00:29,714
stored in it, the vertex shader can compute and output anything it wants. Even

9
00:00:29,714 --> 00:00:32,927
though we call the outputs things like position, normal, color and so on, as

10
00:00:32,927 --> 00:00:37,385
far as the GPU is concerned, it's all just data to interpolate. The fourth

11
00:00:37,385 --> 00:00:40,676
statement is false for the same reason the first is false. Each vertex is

12
00:00:40,676 --> 00:00:43,652
processed separately by the vertex shader, so data from a specific vertex

13
00:00:43,652 --> 00:00:48,518
cannot be passed to the fragment shader in this way. You could work around this

14
00:00:48,518 --> 00:00:51,507
limitation by doing expensive things like storing the data for all three

15
00:00:51,507 --> 00:00:55,862
verticies at every vertex and have the vertex shader sort it out. A better

16
00:00:55,862 --> 00:00:59,344
solution is to use the geometry shader if available. Currently it's not

17
00:00:59,344 --> 00:01:03,068
supported by WebGL. How many times have I said this? But I really do expect

18
00:01:03,068 --> 00:01:06,712
this will change in the future. When available, the geometry shader is optional

19
00:01:06,712 --> 00:01:10,465
and is applied after the vertex shader. It allows you to access the data for

20
00:01:10,465 --> 00:01:14,143
the triangle as a whole. You can in fact use the geometry shader to create new

21
00:01:14,143 --> 00:01:16,140
points, lines and triangles.
