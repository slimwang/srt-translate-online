1
00:00:00,540 --> 00:00:02,960
Now that we know how to create a dataframe,

2
00:00:02,960 --> 00:00:05,380
why don't we talk about how we can access the data.

3
00:00:07,010 --> 00:00:10,700
We can operate on specific columns by calling on them as if they were a key in

4
00:00:10,700 --> 00:00:11,920
the dictionary.

5
00:00:11,920 --> 00:00:15,310
For example, if we wanted just the name column of this dataframe,

6
00:00:15,310 --> 00:00:17,340
I could simply type df name.

7
00:00:17,340 --> 00:00:20,200
I could also grab more than one column by passing in a list of

8
00:00:20,200 --> 00:00:22,280
column names as opposed to just one column name.

9
00:00:23,350 --> 00:00:27,130
For example, say I wanted the name and age columns.

10
00:00:27,130 --> 00:00:29,680
I could say df name, age.

11
00:00:32,299 --> 00:00:36,060
I can also call on specific rows by calling the dataframe objects load

12
00:00:36,060 --> 00:00:39,590
method and passing the row index as an argument.

13
00:00:39,590 --> 00:00:44,320
For example, if I only wanted the row corresponding to passenger Braund,

14
00:00:44,320 --> 00:00:48,297
whose index is a, I could simply say df.loc a.

15
00:00:50,410 --> 00:00:53,862
We can also use true false statements regarding columns of the dataframe to

16
00:00:53,862 --> 00:00:55,670
subset the dataframe.

17
00:00:55,670 --> 00:00:59,010
For example let's say I wanted rows of this dataframe only

18
00:00:59,010 --> 00:01:02,700
where the passenger age was greater than or equal to 30.

19
00:01:02,700 --> 00:01:10,436
I could simply say, df where df age greater than or equal to 30.

20
00:01:13,875 --> 00:01:16,805
You can see here that I've only picked out rows b and d,

21
00:01:16,805 --> 00:01:20,400
which were the rows where our passenger is in fact older than 30.

22
00:01:20,400 --> 00:01:24,110
This ability to subset our dataframe based on true false statements in

23
00:01:24,110 --> 00:01:27,400
the index is not limited to the entire row.

24
00:01:27,400 --> 00:01:31,110
I can also perform this operation on particular columns.

25
00:01:31,110 --> 00:01:34,350
For example let's say I only wanted this survived information for

26
00:01:34,350 --> 00:01:35,840
these two rows, b and d.

27
00:01:36,840 --> 00:01:42,368
I can simply say, df survived df age greater than or equal to 30.

28
00:01:42,368 --> 00:01:43,873
Let's pick apart what this statement is

29
00:01:43,873 --> 00:01:45,576
doing since it's a little bit complicated.

30
00:01:45,576 --> 00:01:48,890
First, df survived is going to

31
00:01:48,890 --> 00:01:52,350
pick out only the survived column of our dataframe.

32
00:01:52,350 --> 00:01:53,510
This section here says,

33
00:01:53,510 --> 00:01:58,080
I basically only want the indices where df age is great than or equal to 30.

34
00:01:58,080 --> 00:02:03,170
Then I say, of this array of values, give me only the values where

35
00:02:03,170 --> 00:02:05,960
the indices are equal to the indices where this statement is true.
