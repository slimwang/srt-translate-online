1
00:00:00,220 --> 00:00:05,990
Another variation is
that overflow occurs.

2
00:00:05,990 --> 00:00:10,745
So, by overflow we mean,
we write it to beyond the point that

3
00:00:10,745 --> 00:00:15,790
this variable getting written,
has been allocated space.

4
00:00:15,790 --> 00:00:20,380
So, I said data also gets allocated
on the heap in a program.

5
00:00:20,380 --> 00:00:23,300
So long-lived data, for
example, global variables, and

6
00:00:23,300 --> 00:00:26,140
so on, get stored on the heap.

7
00:00:26,140 --> 00:00:28,780
So, one crucial difference
between the heap and

8
00:00:28,780 --> 00:00:32,720
stack is that heap does
not have a return address.

9
00:00:32,720 --> 00:00:36,830
So, you cannot hijack the control
flow of the program, and

10
00:00:36,830 --> 00:00:40,230
take it some place where
you have your own codes, or

11
00:00:40,230 --> 00:00:44,540
a library function, or
return-to-lib kind of attacks.

12
00:00:44,540 --> 00:00:47,440
But in the heap we do
have function pointers

13
00:00:47,440 --> 00:00:51,440
depending on what kind of language,
and how they implemented and so on.

14
00:00:51,440 --> 00:00:55,050
So data can be these tables
of function pointers.

15
00:00:55,050 --> 00:00:58,800
And there you can modify
a function pointer, and

16
00:00:58,800 --> 00:01:03,800
by doing that you can transfer control,
it's actually a lot harder than

17
00:01:03,800 --> 00:01:05,770
the stack buffer overflows
we were are talking about.

18
00:01:05,770 --> 00:01:09,280
Heap overflows require sort of more
sophisticated in some sense and require

19
00:01:09,280 --> 00:01:13,540
more work, but you can by modifying,
figuring out where a certain function

20
00:01:13,540 --> 00:01:17,940
is, and modifying the function pointer,
you can transfer control to somewhere

21
00:01:17,940 --> 00:01:22,720
else where this new address that you
place in the function pointer points to.

22
00:01:22,720 --> 00:01:24,190
So heap overflow is,

23
00:01:24,190 --> 00:01:28,210
again, we're corrupting memory
in some sense as we did before,

24
00:01:28,210 --> 00:01:32,610
but this happens to be memory that is
in the heap part of the address space.
