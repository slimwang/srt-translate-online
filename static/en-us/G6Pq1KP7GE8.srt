1
00:00:00,460 --> 00:00:04,320
So we know that randn generates Gaussian noise.

2
00:00:04,320 --> 00:00:06,910
Let's see how it actually works.

3
00:00:06,910 --> 00:00:11,136
If you call randn without any parameters, then it returns a random number.

4
00:00:11,136 --> 00:00:14,550
Here we get 0.76388.

5
00:00:14,550 --> 00:00:15,766
Run it again.

6
00:00:15,766 --> 00:00:20,490
A different number, 1.3958.

7
00:00:20,490 --> 00:00:24,370
You can pass in dimensions to randn to generate a vector or

8
00:00:24,370 --> 00:00:27,370
matrix filled with random numbers.

9
00:00:27,370 --> 00:00:31,760
Letâ€™s say we want a row vector of five columns.

10
00:00:31,760 --> 00:00:34,775
So one row, five columns.

11
00:00:34,775 --> 00:00:38,020
Each time we run this, we get different sets of numbers.

12
00:00:38,020 --> 00:00:39,200
As you might have guessed,

13
00:00:39,200 --> 00:00:43,310
we can generate a two dimensional matrix of random numbers as well.

14
00:00:43,310 --> 00:00:46,800
Say we want two rows and three columns.

15
00:00:46,800 --> 00:00:51,670
Since these are a bunch of random numbers, we call this noise.

16
00:00:51,670 --> 00:00:57,480
What is interesting is that randn draws these numbers from a Gaussian or

17
00:00:57,480 --> 00:01:00,210
a random normal distribution.

18
00:01:00,210 --> 00:01:01,540
Hence, the n in randn.

19
00:01:01,540 --> 00:01:07,051
A Gaussian distribution has a probability distribution function that

20
00:01:07,051 --> 00:01:08,438
looks like this.

21
00:01:08,438 --> 00:01:12,078
The center, or mean, for randn is zero, and the standard deviation is one.

22
00:01:12,078 --> 00:01:19,930
The standard deviation is a measure of how spread out the distribution is.

23
00:01:19,930 --> 00:01:22,740
I mentioned this is a probability distribution,

24
00:01:22,740 --> 00:01:27,370
which means getting back numbers that are close to zero is highly likely,

25
00:01:27,370 --> 00:01:31,860
whereas numbers far away from zero are less likely.

26
00:01:31,860 --> 00:01:32,600
How do we do know for

27
00:01:32,600 --> 00:01:37,110
sure that randn is actually sampling from a Gaussian distribution?

28
00:01:37,110 --> 00:01:39,290
Well, if we had enough samples and

29
00:01:39,290 --> 00:01:44,700
distributed them among bins and we counted how many numbers landed in each bin,

30
00:01:44,700 --> 00:01:49,040
then we would see a pattern similar to the probability distribution function.

31
00:01:49,040 --> 00:01:49,660
Let's try that.

32
00:01:50,740 --> 00:01:53,780
How about we start with a vector of hundred numbers?

33
00:01:53,780 --> 00:01:58,050
Instead of displaying the numbers directly, let's compute a histogram.

34
00:01:58,050 --> 00:02:03,210
Hist accepts a vector or matrix of numbers as a first argument and

35
00:02:03,210 --> 00:02:07,970
as an optional second argument, you can pass in bin centers.

36
00:02:07,970 --> 00:02:13,000
Let's say we want the centers to be integers, from minus three to plus three.

37
00:02:13,000 --> 00:02:14,870
Hist returns two values.

38
00:02:14,870 --> 00:02:20,500
One is the count of elements, which we want, and the second is the bin centers.

39
00:02:20,500 --> 00:02:25,050
Let us display the bin centers and the columns in a tabular form.

40
00:02:25,050 --> 00:02:27,790
We will create a small, temporary matrix,

41
00:02:27,790 --> 00:02:32,390
with the first row being the bin centers and the second row being the counts.

42
00:02:35,830 --> 00:02:40,040
As expected, the center has a high count, and the ends have low,

43
00:02:40,040 --> 00:02:42,550
in fact, zero counts.

44
00:02:42,550 --> 00:02:45,206
You see the same behavior no matter how many times you run it.

45
00:02:46,910 --> 00:02:52,285
For a visual representation of what's going on, how about we plot these numbers?

46
00:02:52,285 --> 00:02:57,365
X-axis will contain our bin centers, and the counts will be on the y-axis.

47
00:02:58,520 --> 00:03:02,169
We see something that vaguely resembles the Gaussian probability distribution.

48
00:03:03,590 --> 00:03:07,090
To get a better picture, we need more bins.

49
00:03:07,090 --> 00:03:11,460
You can generate a sequence of uniformly spaced numbers using the lint

50
00:03:11,460 --> 00:03:12,890
space function.

51
00:03:12,890 --> 00:03:17,481
Here we can replace this vector by writing minus three to plus three,

52
00:03:17,481 --> 00:03:19,620
seven different numbers.

53
00:03:19,620 --> 00:03:21,630
That is including zero.

54
00:03:21,630 --> 00:03:24,250
Let's make sure this is the same as before.

55
00:03:24,250 --> 00:03:27,540
Note here that the bin centers are same, as expected.

56
00:03:27,540 --> 00:03:30,330
Now we can easily increase the number of events.

57
00:03:30,330 --> 00:03:31,710
Say, we want 21 one of them.

58
00:03:32,760 --> 00:03:36,720
I'm going for odd numbers because I want to include the zero in the middle.

59
00:03:36,720 --> 00:03:39,300
Displaying so many numbers wouldn't be useful, so

60
00:03:39,300 --> 00:03:42,830
let's comment that out and see what the plot looks like.

61
00:03:42,830 --> 00:03:46,350
Clearly, we have better resolution along the x-axis, but

62
00:03:46,350 --> 00:03:48,620
what's going on with these spikes?

63
00:03:48,620 --> 00:03:55,230
I think we need more data, let's bump up the vector to 1,000 numbers.

64
00:03:55,230 --> 00:03:58,010
Now you see the familiar bell curve slowly emerging.

65
00:03:59,090 --> 00:04:01,020
Let's increase the number of samples further.

66
00:04:02,280 --> 00:04:02,850
There you go.

67
00:04:04,810 --> 00:04:09,200
In addition to randn, you can find other random number generation functions in

68
00:04:09,200 --> 00:04:12,720
Octave or MATLAB such as just rand.

69
00:04:12,720 --> 00:04:15,339
This samples numbers from a uniform distribution.

70
00:04:16,570 --> 00:04:19,700
Randi generates random integers.

71
00:04:19,700 --> 00:04:21,579
Feel free to play with these functions.
