1
00:00:00,450 --> 00:00:04,591
Here's an abstract specification
of a knowledge-based AI method for

2
00:00:04,591 --> 00:00:06,390
doing configuration design.

3
00:00:06,390 --> 00:00:08,828
The process starts with
some specifications.

4
00:00:08,828 --> 00:00:12,899
These might be the specifications of all
the constraints on this configuration

5
00:00:12,899 --> 00:00:16,170
problem, for example the constraints
on David's basement.

6
00:00:16,170 --> 00:00:20,050
The output is an arrangement model,
a model of the arrangement of

7
00:00:20,050 --> 00:00:23,090
all the components with the components
already known, for example,

8
00:00:23,090 --> 00:00:25,470
the arrangement of David's basement.

9
00:00:25,470 --> 00:00:27,510
In this matter, for
some configuration design,

10
00:00:27,510 --> 00:00:31,540
we begin with some very abstract,
and perhaps partial solutions.

11
00:00:31,540 --> 00:00:32,310
This abstract and

12
00:00:32,310 --> 00:00:36,650
partial solution may be represented
in the form of a design plan.

13
00:00:36,650 --> 00:00:41,350
So, an abstract and journal plan for
basements of houses.

14
00:00:41,350 --> 00:00:45,160
Each plan specifies a subset
of all the variables.

15
00:00:45,160 --> 00:00:47,430
We assign values to
the variables in that plan.

16
00:00:49,070 --> 00:00:50,300
The plan is now complete.

17
00:00:50,300 --> 00:00:54,138
A completed plan can now be refined and
expanded.

18
00:00:54,138 --> 00:00:58,689
At the next lower level,
the plan specifies more variables.

19
00:00:58,689 --> 00:01:00,965
We assign values to those variables.

20
00:01:00,965 --> 00:01:03,554
Now that plan at the next
level is complete, and

21
00:01:03,554 --> 00:01:07,977
we continue this iterative process until
we have a complete arrangement model.

22
00:01:07,977 --> 00:01:11,133
As an example, if somebody was
building a residential home,

23
00:01:11,133 --> 00:01:15,080
like David is doing right now, then the
abstract plan may deal with the number

24
00:01:15,080 --> 00:01:16,988
of stories that the house will have.

25
00:01:16,988 --> 00:01:21,190
Once we assign to the variable
number of stories,

26
00:01:21,190 --> 00:01:25,580
then we get a more expanded and
refined plan where we have a plan for

27
00:01:25,580 --> 00:01:28,410
each of the stories
including the basement.

28
00:01:28,410 --> 00:01:30,000
For example, for the main floor,

29
00:01:30,000 --> 00:01:33,480
there might be a plan which specifies
something about a kitchen area,

30
00:01:33,480 --> 00:01:35,740
something about a living area,
something about a bedroom area.

31
00:01:36,970 --> 00:01:39,880
As we assign values to the variables
that define the living area, and

32
00:01:39,880 --> 00:01:43,260
the kitchen area, and the bedroom area,
this plan gets completed.

33
00:01:43,260 --> 00:01:46,640
And now we might refine it further, a
more detailed plan for the living area,

34
00:01:46,640 --> 00:01:47,840
for example.

35
00:01:47,840 --> 00:01:51,536
This abstraction hierarchy is
a diagrammatic representation of this

36
00:01:51,536 --> 00:01:54,380
plan's arrangement
from those abstraction.

37
00:01:54,380 --> 00:01:57,427
I begin with the most abstract plan,
then I refine them and

38
00:01:57,427 --> 00:01:59,630
expand them as I go down.

39
00:01:59,630 --> 00:02:01,930
As I said earlier in
configuration design,

40
00:02:01,930 --> 00:02:03,310
all the components are already known.

41
00:02:04,420 --> 00:02:08,860
Nevertheless, in some cases it might
be able to also select the components.

42
00:02:08,860 --> 00:02:12,520
So for example, I might not only
be able to reconfigure the TV,

43
00:02:12,520 --> 00:02:16,290
I might also be able to
pick a specific kind of TV.

44
00:02:16,290 --> 00:02:19,780
So this might be a TV in general and
a more specific kind of TV and

45
00:02:19,780 --> 00:02:22,340
more specific kind of TV and so on.

46
00:02:22,340 --> 00:02:26,170
Note that the arrows coming
here are two way arrows.

47
00:02:26,170 --> 00:02:27,682
This is intentional.

48
00:02:27,682 --> 00:02:31,130
In particular, let us look at the two
way arrows between the arrangement model

49
00:02:31,130 --> 00:02:34,400
and the process of configuration and
the specifications and

50
00:02:34,400 --> 00:02:36,140
the configuration process.

51
00:02:36,140 --> 00:02:39,880
Once this process has
yielded an arrangement model,

52
00:02:39,880 --> 00:02:44,410
then we can assess the arrangement model
and if needed go back to the process.

53
00:02:44,410 --> 00:02:45,100
As an example,

54
00:02:45,100 --> 00:02:49,420
the configuration process says that
the TV is 12 feet away from the couch.

55
00:02:49,420 --> 00:02:52,440
And we assess it, and we decide
the couch is too close to the TV.

56
00:02:52,440 --> 00:02:54,040
Then we can go back to the process and

57
00:02:54,040 --> 00:02:57,390
say, make the couch more than
12 feet away from the TV.

58
00:02:58,510 --> 00:03:01,530
That then becomes an additional
specification here.

59
00:03:01,530 --> 00:03:04,090
And this is the meaning
of the two way arrow.

60
00:03:04,090 --> 00:03:08,043
It is not just that we start with
specifications and the configuration

61
00:03:08,043 --> 00:03:12,666
process works to satisfy them, but also,
as the configuration process works and

62
00:03:12,666 --> 00:03:15,958
results in solutions,
we can evaluate those solutions.

63
00:03:15,958 --> 00:03:18,164
And the specifications may change.

64
00:03:18,164 --> 00:03:20,671
This is a very common
property of all design.

65
00:03:20,671 --> 00:03:22,888
One of the major differences
between design and

66
00:03:22,888 --> 00:03:24,995
problem solving is that
in problem solving,

67
00:03:24,995 --> 00:03:28,990
the problem typically remains fixed
when we come up with a solution.

68
00:03:28,990 --> 00:03:33,460
In contrast in design, the problem
evolves as the solution evolves.

69
00:03:33,460 --> 00:03:35,660
The problem and the solution co-evolve.

70
00:03:35,660 --> 00:03:39,580
So we start with a problem of satisfying
certain constraints, but as the solution

71
00:03:39,580 --> 00:03:44,000
evolves, the evolution of the solution
results in the evolution of a problem.

72
00:03:44,000 --> 00:03:46,710
As an example,
let us suppose that the configuration

73
00:03:46,710 --> 00:03:49,850
problem is to configure the parts
of a computer processor so

74
00:03:49,850 --> 00:03:51,700
that the processor can work
at a particular speed.

75
00:03:52,870 --> 00:03:55,240
To do so, you come up with
an arrangement model, but

76
00:03:55,240 --> 00:03:58,800
when you evaluate it,
you find that the processor overheats.

77
00:03:58,800 --> 00:04:01,900
In that case, you may change
the specification and say that

78
00:04:01,900 --> 00:04:05,480
the specification is not only that
the processor should be fast enough, but

79
00:04:05,480 --> 00:04:07,460
also that it should not overheat.

80
00:04:07,460 --> 00:04:10,800
This is an example of problem
evolution and solution evolution.

81
00:04:12,050 --> 00:04:15,150
Now that the problem has evolved,
you may come up with a new solution for

82
00:04:15,150 --> 00:04:15,937
the processor design.

83
00:04:16,959 --> 00:04:20,160
This now is an example of problem
evolution and solution evolution.

84
00:04:21,170 --> 00:04:23,310
>> So for an example that might hit
a little bit closer to home for

85
00:04:23,310 --> 00:04:26,030
many of you, as you've been
designing your agents that can solve

86
00:04:26,030 --> 00:04:29,240
the Raven's test, you've done
a process somewhat like this.

87
00:04:29,240 --> 00:04:32,390
You started with some specifications,
general specifications, that your agent

88
00:04:32,390 --> 00:04:35,876
must be able to solve as many problems
on the Raven's test as possible.

89
00:04:35,876 --> 00:04:38,860
You then start with an abstract solution
of just a general problem solving

90
00:04:38,860 --> 00:04:42,680
process that you may have then refined
to be more specific about the particular

91
00:04:42,680 --> 00:04:44,050
transformations to look for or

92
00:04:44,050 --> 00:04:46,350
the particular problem
solving methods to use.

93
00:04:46,350 --> 00:04:47,940
That got you to your final result.

94
00:04:47,940 --> 00:04:50,780
But when you ran your file result, you
may have found something like it would

95
00:04:50,780 --> 00:04:54,880
work but it would take a very,
very long time to run, weeks or months.

96
00:04:54,880 --> 00:04:57,220
So that then causes you to
revise your specifications.

97
00:04:57,220 --> 00:05:00,430
You not only need an agent that can
solve as many problems as possible, but

98
00:05:00,430 --> 00:05:02,310
you also need one that can
solve it in minutes or

99
00:05:02,310 --> 00:05:03,900
seconds instead of weeks or months.
