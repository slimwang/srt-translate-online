1
00:00:00,100 --> 00:00:03,134
So the cycles, per instruction, we spent in the

2
00:00:03,134 --> 00:00:05,724
pipe line should be one once we have filled

3
00:00:05,724 --> 00:00:09,520
our pipe line. Note that we have building instructions

4
00:00:09,520 --> 00:00:12,750
to process in a program usually. So the first

5
00:00:12,750 --> 00:00:15,201
few cycles are negligible, we can just ignore them

6
00:00:15,201 --> 00:00:17,253
and say that in the steady state we're just

7
00:00:17,253 --> 00:00:21,320
finishing one instruction every cycle. Is that true, however?

8
00:00:21,320 --> 00:00:25,103
So the reasons why we don't always get the flow

9
00:00:25,103 --> 00:00:28,110
rate of one are the initial filling of

10
00:00:28,110 --> 00:00:32,390
the pipeline. But even with the initial fill, the

11
00:00:32,390 --> 00:00:34,880
CPI will get closer and closer to one

12
00:00:34,880 --> 00:00:38,532
as the number of instructions grows, and because we

13
00:00:38,532 --> 00:00:41,935
have many, many instructions this is not really

14
00:00:41,935 --> 00:00:44,340
a big problem. Our CPI could be set to

15
00:00:44,340 --> 00:00:50,490
be one in spite of this. The CPI in the steady state is not one also because

16
00:00:50,490 --> 00:00:54,080
of pipeline stalls. Think about, for example, a car

17
00:00:54,080 --> 00:00:56,900
production line where the first stage is to install the

18
00:00:56,900 --> 00:01:00,340
doors. The second stage is to install front wheels,

19
00:01:00,340 --> 00:01:02,930
the next stage is to install the rear wheels and

20
00:01:02,930 --> 00:01:05,510
there are many more stages. And let's say that

21
00:01:05,510 --> 00:01:08,800
at some point we have a black car here, with

22
00:01:08,800 --> 00:01:12,730
the front wheels already installed, a purple car here, waiting

23
00:01:12,730 --> 00:01:16,480
to install the front wheels and the green car here,

24
00:01:16,480 --> 00:01:19,620
still without the doors. It's installing the doors. Let's

25
00:01:19,620 --> 00:01:23,650
say that during the installation of the front wheels here,

26
00:01:23,650 --> 00:01:26,780
the machine damages the wheel. So now what happens

27
00:01:26,780 --> 00:01:30,830
is when the production line can move on because the

28
00:01:30,830 --> 00:01:33,540
rear wheels have been installed on the black car,

29
00:01:33,540 --> 00:01:36,370
the black car can move on to the next stage,

30
00:01:36,370 --> 00:01:39,140
and it has the rear wheels installed,. But we don't

31
00:01:39,140 --> 00:01:41,500
want to move the purple car here because it still

32
00:01:41,500 --> 00:01:44,370
doesn't have the front wheels. If we let that happen

33
00:01:44,370 --> 00:01:46,450
we'll end up with a car that has no front

34
00:01:46,450 --> 00:01:49,720
wheels. So the purple cars will stay in this install

35
00:01:49,720 --> 00:01:54,140
front wheels stage for one more cycle to have a new

36
00:01:54,140 --> 00:01:57,640
set of wheels installed. Because the purple car didn't move

37
00:01:57,640 --> 00:02:00,428
on, the worker over here is idle because there is

38
00:02:00,428 --> 00:02:03,012
no car to install the rear wheels in this cycle

39
00:02:03,012 --> 00:02:06,412
and because the purple car didn't move on, the green car,

40
00:02:06,412 --> 00:02:09,860
whose doors have been installed, cannot move on. So

41
00:02:09,860 --> 00:02:12,480
we have an idle stage here, too. Let's say that

42
00:02:12,480 --> 00:02:15,760
the wheels are correctly installed this time here. Now the

43
00:02:15,760 --> 00:02:18,810
purple car moves on. The next stage of the pipeline,

44
00:02:18,810 --> 00:02:22,620
however, gets to do nothing because no car has moved

45
00:02:22,620 --> 00:02:25,722
on. The green car will now move here. And we

46
00:02:25,722 --> 00:02:28,510
will begin a new car here for installing the doors.

47
00:02:28,510 --> 00:02:31,630
So the problem is that when the black car leaves

48
00:02:31,630 --> 00:02:34,430
the pipeline there will be one car worth of

49
00:02:34,430 --> 00:02:37,390
time where we don't finish car and only then

50
00:02:37,390 --> 00:02:40,134
the purple car will come. So every one of

51
00:02:40,134 --> 00:02:43,984
these breaks in the pipeline, that stall the pipeline, it

52
00:02:43,984 --> 00:02:46,987
cannot move on, will result in not finishing a

53
00:02:46,987 --> 00:02:50,206
car, when a car should have been finished. If

54
00:02:50,206 --> 00:02:53,692
these stalls happen on a regular basis, the CP,I

55
00:02:53,692 --> 00:02:56,710
will not be one, it will be lower than one.

56
00:02:56,710 --> 00:03:02,941
For example, if every five cars we have this, then really takes, six cycles to

57
00:03:02,941 --> 00:03:09,000
finish five cars. So the CPI is six cycles over five cars, and we end up

58
00:03:09,000 --> 00:03:15,195
with a CPI of 1.2 not one. So even the steady state pipeline CPI will

59
00:03:15,195 --> 00:03:18,577
be larger than one, meaning we don't finish

60
00:03:18,577 --> 00:03:23,370
an instruction every cycle because of pipeline stalls.

61
00:03:23,370 --> 00:03:25,642
So we have seen how a stall can happen in

62
00:03:25,642 --> 00:03:29,152
a car pipeline because of broken wheels or something. But

63
00:03:29,152 --> 00:03:32,068
in a processor pipeline how can it be that we

64
00:03:32,068 --> 00:03:35,390
have a stall? So what goes broken with an instruction?
