1
00:00:00,450 --> 00:00:02,294
For the Sleeping in the Library app,

2
00:00:02,294 --> 00:00:06,240
we're going to use
the flickr.galleries.getPhotos method.

3
00:00:06,240 --> 00:00:09,160
Let's play around with this method
in the Flickr's API explorer before

4
00:00:09,160 --> 00:00:09,760
we start coding.

5
00:00:11,740 --> 00:00:15,480
Aside from the API key, this method
only has one required argument,

6
00:00:15,480 --> 00:00:20,374
the gallery_id.

7
00:00:22,540 --> 00:00:25,881
I've gone ahead and copy the gallery_id
you'll use in this project and

8
00:00:25,881 --> 00:00:26,547
pasted it in.

9
00:00:31,509 --> 00:00:36,180
Like before, we need to provide
url_m in the extras argument.

10
00:00:36,180 --> 00:00:39,910
Otherwise theirs responsible had URLs
for the images we want to display.

11
00:00:41,130 --> 00:00:41,881
Now let's call the method.

12
00:00:46,329 --> 00:00:47,170
This is strange.

13
00:00:47,170 --> 00:00:51,289
This doesn't quite look like what we had
with my public photo stream when we were

14
00:00:51,289 --> 00:00:52,280
testing earlier.

15
00:00:52,280 --> 00:00:56,190
And that's because we forgot to
change the response format to JSON,

16
00:00:56,190 --> 00:00:59,390
and we're currently looking
at an XML response.

17
00:00:59,390 --> 00:01:03,662
Now you'll notice the XML looks quite
similar to JSON, and I'm showing this on

18
00:01:03,662 --> 00:01:06,849
purpose to again reinforce
the idea that data can be sent and

19
00:01:06,849 --> 00:01:09,799
received in many different
formats over the network.

20
00:01:12,175 --> 00:01:14,673
Let's switch this back to JSON and
then call the method again.

21
00:01:17,968 --> 00:01:20,044
Now this is what we expected.

22
00:01:20,044 --> 00:01:25,126
These results are almost identical to
what we saw with my public photo stream.

23
00:01:25,126 --> 00:01:27,467
But how are we going to get
this data loaded into our app?

24
00:01:34,005 --> 00:01:37,349
Well, my recommendation is that
we start with the URL itself,

25
00:01:37,349 --> 00:01:39,380
the one that we see here on the bottom.

26
00:01:41,820 --> 00:01:44,150
Let's copy it and
look at it piece by piece.

27
00:01:47,300 --> 00:01:50,425
Everything leading up to
the question mark specifies the API.

28
00:01:55,458 --> 00:01:56,992
Then after the question mark,

29
00:01:56,992 --> 00:02:01,580
we have a series of argument names
followed by equal signs and their value.

30
00:02:01,580 --> 00:02:05,030
Each argument value pair is
separated also by an ampersand.

31
00:02:07,830 --> 00:02:11,474
I'm going to fix this URL by removing
the last argument value because it's

32
00:02:11,474 --> 00:02:13,335
only necessary in the API explorer.

33
00:02:13,335 --> 00:02:19,094
For the Sleeping In The Library app we
just need these argument value pairs.

34
00:02:19,094 --> 00:02:21,719
And remember,
when you build your version of the app,

35
00:02:21,719 --> 00:02:24,800
you'll need to use your own API
key because the one provided here

36
00:02:24,800 --> 00:02:27,219
is just a temporary one
given by the API explorer.

37
00:02:30,016 --> 00:02:35,848
Now let's test a URL like this using
the Postman tool that we saw earlier.

38
00:02:35,848 --> 00:02:36,870
And the results look good.

39
00:02:36,870 --> 00:02:39,740
These are essentially the same results
that we had in the API explorer,

40
00:02:39,740 --> 00:02:41,970
except they're formatted
a little bit nicer.

41
00:02:44,280 --> 00:02:46,830
And with that I think we're ready
to get started doing this in code.
