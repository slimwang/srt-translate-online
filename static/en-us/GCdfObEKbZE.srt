1
00:00:00,070 --> 00:00:02,874
Let me give a few examples on the GPU.

2
00:00:02,874 --> 00:00:08,712
So, on the GPU, picking good algorithms really means picking algorithms that are fundamentally parallel.

3
00:00:08,712 --> 00:00:13,522
My favorite example of this is related to the example I gave for the CPU where I compared mergesort,

4
00:00:13,522 --> 00:00:17,918
which is order n log n with insertion sort, which is order n squared.

5
00:00:17,918 --> 00:00:23,155
Now, in fact, most CPU algorithm texts would probably tell you that heapsort,

6
00:00:23,155 --> 00:00:26,492
which is also order n log in, is a better choice than either of these.

7
00:00:26,492 --> 00:00:32,031
It tends to run a little better on the CPU, but it turns out that heapsort is all about

8
00:00:32,031 --> 00:00:35,004
updating this shared data structure called the heap,

9
00:00:35,004 --> 00:00:39,876
and that's a very hard thing to do in parallel. And so, in practice, a mergesort is a much better choice

10
00:00:39,876 --> 00:00:42,116
on a parallel machine like the GPU.

11
00:00:42,116 --> 00:00:45,781
In terms of basic principles for efficiency, we've already discussed some of these.

12
00:00:45,781 --> 00:00:49,955
A big one is coalescing global memory accesses, and another is using shared memory,

13
00:00:49,955 --> 00:00:53,390
which is faster for frequently accessed data within a thread block.

14
00:00:53,390 --> 00:00:58,735
We'll just touch on a few GPU ninja topics like optimizing bank conflicts and shared memory

15
00:00:58,735 --> 00:01:05,165
and optimizing the use of registers, and I've certainly seen my share of GPU bit twiddling micro optimization.

16
00:01:05,165 --> 00:01:09,838
One example that comes to mind is the use of floating-point denorms

17
00:01:09,838 --> 00:01:15,539
in order to abuse the floating-point arithmetic units for additional integer math performance,

18
00:01:15,539 --> 00:01:18,582
and this kind of stuff is just firmly in the ninja category.

19
00:01:18,582 --> 00:01:21,658
You know, it's almost never worth the time or the code obfuscation that results,

20
00:01:21,658 --> 00:01:24,524
and we won't be talking about them at all today.
