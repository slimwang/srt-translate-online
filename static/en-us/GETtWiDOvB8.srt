1
00:00:00,000 --> 00:00:04,000
Here's the answer to turn this parser from a slow one to a fast one

2
00:00:04,000 --> 00:00:06,000
that doesn't repeat its work.

3
00:00:06,000 --> 00:00:08,000
All we need are these five characters.

4
00:00:08,000 --> 00:00:12,000
All we have to do is say let's apply the memo decorator to parse_atom, and then we're done.

5
00:00:12,000 --> 00:00:18,000
The recursive call to parse_atom with term and the remainder as inputs.

6
00:00:18,000 --> 00:00:20,000
We've done it once. This'll be the same call here.

7
00:00:20,000 --> 00:00:24,000
We just look it up in the cache table, and we've got the result.

8
00:00:24,000 --> 00:00:29,000
Notice in order to make that work, I had to make this function, parse_atom,

9
00:00:29,000 --> 00:00:31,000
be something that had arguments that were hashable.

10
00:00:31,000 --> 00:00:35,000
The atom and the text are both strings and those are both hashable,

11
00:00:35,000 --> 00:00:40,000
but the original call to parse that had a grammar as the third argument--

12
00:00:40,000 --> 00:00:44,000
well, the grammar is a dictionary, and dictionaries are mutable, so they're not hashable.

13
00:00:44,000 --> 00:00:48,000
I couldn't memoize the the whole parse function, and then have parse be called recursively here.

14
00:00:48,000 --> 00:00:52,000
That's why I had to have parse_atom and parse_sequence

15
00:00:52,000 --> 00:00:55,000
be internal functions inside the definition of parse,

16
00:00:55,000 --> 00:01:00,000
so that the grammar would be a variable that this function knows about,

17
00:01:00,000 --> 00:01:05,000
but it's not one of the arguments so that the memo decorator works.
