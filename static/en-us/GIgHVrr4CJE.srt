1
00:00:00,000 --> 00:00:06,110
Now you can learn about the basics of analyzing algorithms, and we introduced three simplifications

2
00:00:06,110 --> 00:00:09,330
that make our life going forward much easier.

3
00:00:09,330 --> 00:00:13,310
The first one was the RAM model so that we can analyze algorithms

4
00:00:13,310 --> 00:00:15,260
without actually having to implement them.

5
00:00:15,260 --> 00:00:18,400
The second one was the concept of worst-case running time

6
00:00:18,400 --> 00:00:23,450
so only having to consider the worst possible inputs and not the best ones, not the average ones,

7
00:00:23,450 --> 00:00:30,510
such as really the bad ones, and finally, we introduced big O notation or Landau notation

8
00:00:30,510 --> 00:00:35,480
to be able to ignore all unnecessary details in the algorithm analysis.

9
00:00:35,480 --> 00:00:39,490
Let's go back to the example from before when we tried to count the number of times

10
00:00:39,490 --> 00:00:45,370
that the sequence a b appears in the string of length n using this algorithm down here.

11
00:00:45,370 --> 00:00:49,490
And as you remember from the quiz, this was actually quite painful

12
00:00:49,490 --> 00:00:52,410
because we had to figure out what is the wort-case input,

13
00:00:52,410 --> 00:00:57,400
and we noticed that this is actually not easy to figure out and even if you have this figured out.

14
00:00:57,400 --> 00:01:01,810
There is a lot of detailed counting that you need to do, and there are details you need to take care of

15
00:01:01,810 --> 00:01:07,520
such as how often is this line here actually executed and so on.

16
00:01:07,520 --> 00:01:12,420
So now that we have big O notation available, our task is much easier

17
00:01:12,420 --> 00:01:17,490
because we can just make two observations and will be able to state the running time.

18
00:01:17,490 --> 00:01:23,360
So the first observation you can make is that the algorithm will actually go through the string

19
00:01:23,360 --> 00:01:29,790
one by one by one, and since it always just looks at a single character and the next character,

20
00:01:29,790 --> 00:01:33,550
the algorithm will look at each character and again put string at most twice.

21
00:01:33,550 --> 00:01:39,450
And the second thing to notice is that each time the algorithm does consider a character

22
00:01:39,450 --> 00:01:44,530
so it starts out to zero, one, two, three and so on, it will perform a constant number of operations.

23
00:01:44,530 --> 00:01:49,300
So if it finds an a, it will do either one or two additional operations,

24
00:01:49,300 --> 00:01:54,360
and if it does not find an a, it will do zero additional operations.

25
00:01:54,360 --> 00:01:59,430
So for each character in the input string, a constant number of steps is performed

26
00:01:59,430 --> 00:02:04,510
and this is exactly advantage here because with big O notation, we can ignore constant.

27
00:02:04,510 --> 00:02:11,460
So overall, this means that if you have an input of length n, the algorithm will perform

28
00:02:11,460 --> 00:02:18,660
a number of steps that some constant times n plus some constant for all the rest of the operations,

29
00:02:18,660 --> 00:02:24,410
but using big O notation, we already know that this is O of n.

30
00:02:24,410 --> 00:02:30,400
So we do not need to care anymore about the detailed number of times this here is executed.

31
00:02:30,400 --> 00:02:34,550
We do not need to care about the detail such as how often this line here is executed.

32
00:02:34,550 --> 00:02:37,380
We can just say that the running time of this algorithm is O of n,

33
00:02:37,380 --> 99:59:59,999
which would also be referred to as a liner algorithm.
