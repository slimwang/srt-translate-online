1
00:00:00,250 --> 00:00:03,360
We'd like the cross bar switching algorithm to achieve

2
00:00:03,360 --> 00:00:07,260
what's called a maximal matching. Conceptually we have a router

3
00:00:07,260 --> 00:00:10,000
with n inputs and n outputs, but of course the

4
00:00:10,000 --> 00:00:13,130
inputs are also outputs. It's just easier to think about

5
00:00:13,130 --> 00:00:15,580
the inputs and the outputs being separate when we

6
00:00:15,580 --> 00:00:18,690
talk about the switching problem. Now in each time slot,

7
00:00:18,690 --> 00:00:22,600
we would like to achieve a one-to-one mapping between inputs

8
00:00:22,600 --> 00:00:25,770
and outputs, which is a matching. And our goal is

9
00:00:25,770 --> 00:00:27,950
that the matching should be maximal. So in a

10
00:00:27,950 --> 00:00:30,300
particular time slot, we might have a certain set

11
00:00:30,300 --> 00:00:33,950
of traffic demands, or traffic at certain input ports,

12
00:00:33,950 --> 00:00:37,220
that is destined for certain output ports. And our goal

13
00:00:37,220 --> 00:00:40,650
is, given these demands, to produce a matching that

14
00:00:40,650 --> 00:00:44,340
is maximal and fair. Now, given demands for a particular

15
00:00:44,340 --> 00:00:47,360
time slot and the resulting matching, notice that certain

16
00:00:47,360 --> 00:00:51,150
demands were not satisfied. These packets that arrived at inputs

17
00:00:51,150 --> 00:00:53,840
must wait until the next time slot to be

18
00:00:53,840 --> 00:00:56,430
forwarded to the appropriate output port, because they couldn't

19
00:00:56,430 --> 00:00:59,210
be matched in the same time slot as those

20
00:00:59,210 --> 00:01:01,525
shown here. Remember that there must be exactly a

21
00:01:01,525 --> 00:01:05,810
one-to-one matching between any inputs and outputs in a

22
00:01:05,810 --> 00:01:09,060
particular time slot. Most router crossbars have a notion

23
00:01:09,060 --> 00:01:13,000
of speedup whereby multiple matchings can be performed in

24
00:01:13,000 --> 00:01:16,420
the same time slot. So for example, if the line

25
00:01:16,420 --> 00:01:20,100
cards are running at, say, ten gigabits per

26
00:01:20,100 --> 00:01:23,980
second, then running the interconnect twice as fast

27
00:01:23,980 --> 00:01:27,180
would allow matchings to occur twice as fast

28
00:01:27,180 --> 00:01:29,960
as packets would arrive on the inputs or be

29
00:01:29,960 --> 00:01:32,280
forwarded from the outputs. It is thus common

30
00:01:32,280 --> 00:01:35,150
practice to run the interconnect at a higher

31
00:01:35,150 --> 00:01:37,870
speed than the input and output ports. Just

32
00:01:37,870 --> 00:01:41,570
speeding up the interconnect does not solve all problems.

33
00:01:41,570 --> 00:01:43,640
Note, for example, that in this set of

34
00:01:43,640 --> 00:01:47,220
demands we have packets arriving at this input

35
00:01:47,220 --> 00:01:50,950
port destined for this output port, but if

36
00:01:50,950 --> 00:01:53,610
there's only a single queue at this input,

37
00:01:53,610 --> 00:01:56,740
the packets that are destined for the output

38
00:01:56,740 --> 00:02:00,200
port, circled in orange, might actually be blocked

39
00:02:00,200 --> 00:02:06,570
behind a set of packets that are destined for other output ports. So even if we

40
00:02:06,570 --> 00:02:11,600
could induce a speed up at the interconnect, certain packets may be blocked

41
00:02:11,600 --> 00:02:16,130
in the queue by packets ahead of them destined for other output ports.
