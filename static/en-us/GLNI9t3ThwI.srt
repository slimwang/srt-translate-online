1
00:00:00,480 --> 00:00:03,356
So, really, when we do relaxed consistency,

2
00:00:03,356 --> 00:00:08,370
we allow a reordering of normal accesses

3
00:00:08,370 --> 00:00:12,704
according to the four types of ordering. So, for example, our reads can now be

4
00:00:12,704 --> 00:00:15,152
reordered, but only if these are normal

5
00:00:15,152 --> 00:00:18,800
accesses. But then we add special non-reorderable

6
00:00:18,800 --> 00:00:22,125
accesses. And the programmer must use these

7
00:00:22,125 --> 00:00:26,520
non-reorderable accesses when ordering in the program matters.

8
00:00:26,520 --> 00:00:34,070
An example of such non-reorderable accesses is the x86 MSYNC instruction. Here

9
00:00:34,070 --> 00:00:40,580
in normal execution all accesses are reorderable. We cannot rely on any specific

10
00:00:40,580 --> 00:00:46,160
in order behavior as far as consistency concerned, but no reordering can

11
00:00:46,160 --> 00:00:51,683
happen across a MSYNC instruction. so we can have any axis that we want

12
00:00:51,683 --> 00:00:55,496
reordered anywhere in here. But in problem order

13
00:00:55,496 --> 00:00:59,654
then comes the MSYNC instruction. The process guarantees that

14
00:00:59,654 --> 00:01:04,107
all of these are going to be done before we do MSYNC. And that the MSYNC will be

15
00:01:04,107 --> 00:01:06,339
done before we begin the next cloud of

16
00:01:06,339 --> 00:01:10,280
instructions that can again be ordered with each other.

17
00:01:10,280 --> 00:01:13,560
So how does that help? It helps because

18
00:01:13,560 --> 00:01:16,770
now we can write flag synchronization correctly. The correct

19
00:01:16,770 --> 00:01:20,250
wait for a flag now includes an MSYNC instruction.

20
00:01:20,250 --> 00:01:23,518
It basically says that, Wait for the flag to become

21
00:01:23,518 --> 00:01:27,020
zero, make that happen and then use the data.

22
00:01:27,020 --> 00:01:30,030
Now the processor will first make sure that the flag

23
00:01:30,030 --> 00:01:32,200
is red, and only then that the data is

24
00:01:32,200 --> 00:01:36,121
red. Because we cannot reorder the rates to the flag

25
00:01:36,121 --> 00:01:38,510
and data cross them Msync. But it is still

26
00:01:38,510 --> 00:01:43,590
allows all sorts of performance optimizations where we reorder instructions.

27
00:01:43,590 --> 00:01:45,730
In situations where we are not trying

28
00:01:45,730 --> 00:01:48,320
to use memory for synchronization like this.
