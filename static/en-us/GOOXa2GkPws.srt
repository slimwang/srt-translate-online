1
00:00:00,250 --> 00:00:02,370
A solution that provides the best of both

2
00:00:02,370 --> 00:00:06,000
worlds is called finger tables, where every node

3
00:00:06,000 --> 00:00:08,630
knows m other nodes in the ring. And

4
00:00:08,630 --> 00:00:12,100
the distance of the nodes that it knows increases

5
00:00:12,100 --> 00:00:15,710
exponentially. So, for example, node 10 would maintain

6
00:00:15,710 --> 00:00:19,370
mappings for 10 plus 2 to the 0, 10

7
00:00:19,370 --> 00:00:25,370
plus 2 to the 1, and so forth, where finger i Points to the successor of n

8
00:00:25,370 --> 00:00:30,720
plus 2i. So finger 0 would point to the successor of 11, which is 32. Finger 1

9
00:00:30,720 --> 00:00:37,350
would also point to 32 and so forth. Finger 5 would point to 43. Now every

10
00:00:37,350 --> 00:00:40,480
node knows it's immediate successor. So what you

11
00:00:40,480 --> 00:00:43,870
want to do, is find the predecessor for a

12
00:00:43,870 --> 00:00:47,700
particular ID. And then ask for the successor

13
00:00:47,700 --> 00:00:50,610
of that ID. So let's suppose that node 10

14
00:00:50,610 --> 00:00:56,710
wanted to look up a key corresponding to the id of 42. It can use the

15
00:00:56,710 --> 00:01:02,490
finger tables to find the predecessor of that node. Which in this case, is 32.

16
00:01:02,490 --> 00:01:08,450
It's finger tables have the mapping of that nodes location as well. It then, can

17
00:01:08,450 --> 00:01:12,390
ask, node 32, for it's successor. At this

18
00:01:12,390 --> 00:01:15,390
point, we can move forward around the ring,

19
00:01:15,390 --> 00:01:18,820
looking for the node, whose successor's ID is

20
00:01:18,820 --> 00:01:21,880
bigger than the ID of the data, which

21
00:01:21,880 --> 00:01:24,980
in this case, is node 43. Due to

22
00:01:24,980 --> 00:01:26,900
the structure of the finger table, these look ups

23
00:01:26,900 --> 00:01:31,110
require order of login hops. This results in

24
00:01:31,110 --> 00:01:33,830
efficient look ups, order log in messages per

25
00:01:33,830 --> 00:01:36,492
look up. And the size the finger table

26
00:01:36,492 --> 00:01:40,540
is order of login state per node. Another consideration

27
00:01:40,540 --> 00:01:42,570
that we have to take into account Is what

28
00:01:42,570 --> 00:01:46,230
happens when nodes join, and leave the network. When new

29
00:01:46,230 --> 00:01:50,290
node joins, we first have to initialize the fingers

30
00:01:50,290 --> 00:01:54,480
of this new node. Then we must update the fingers

31
00:01:54,480 --> 00:01:57,330
of existing nodes, so that they know that they

32
00:01:57,330 --> 00:02:00,120
can point. To the node with the new ID. And

33
00:02:00,120 --> 00:02:02,940
finally, the third step is to transfer the keys

34
00:02:02,940 --> 00:02:05,600
from the successor to the new node. In this case,

35
00:02:05,600 --> 00:02:10,970
the key that we must transfer from the successor, one is the data with ID

36
00:02:10,970 --> 00:02:14,290
of 54. In this case, each node's successor

37
00:02:14,290 --> 00:02:18,510
is maintained and the successor of any particular

38
00:02:18,510 --> 00:02:25,310
ID k is always responsible for k. A fallback for handling leaves is to ensure

39
00:02:25,310 --> 00:02:28,340
that any particular node not only keeps track

40
00:02:28,340 --> 00:02:30,670
of its own finger table, but also of

41
00:02:30,670 --> 00:02:33,180
the fingers of any successor. So that if a

42
00:02:33,180 --> 00:02:36,400
node should fail at any time, then the predecessor node

43
00:02:36,400 --> 00:02:39,520
in the ring also knows how to reach the nodes

44
00:02:39,520 --> 00:02:43,680
corresponding to the entries in the failed nodes finger table.
