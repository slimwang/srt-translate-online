1
00:00:00,000 --> 00:00:02,000
Here's one way to define "print_numbers":

2
00:00:02,000 --> 00:00:06,000
so we're going to make a procedure using "def".

3
00:00:06,000 --> 00:00:08,000
It takes 1 input.

4
00:00:08,000 --> 00:00:10,000
We'll use the name "n" for our input.

5
00:00:10,000 --> 00:00:12,000
That's the number that we go up to.

6
00:00:12,000 --> 00:00:14,000
Now, to do the loop, we need to have a new variable

7
00:00:14,000 --> 00:00:17,000
that keeps track of the loop iterations.

8
00:00:17,000 --> 00:00:21,000
We'll use "i" for that, and we start with 1--that's the first number to print out.

9
00:00:21,000 --> 00:00:24,000
We need the loop now, so we have the "while"

10
00:00:24,000 --> 00:00:26,000
and the test that we want is we want to keep going,

11
00:00:26,000 --> 00:00:29,000
up to and including the number, "n".

12
00:00:29,000 --> 00:00:34,000
So we want to print the numbers, all the way from 1 up to and including "n".

13
00:00:34,000 --> 00:00:38,000
So our test will now be a less than or equal to test.

14
00:00:38,000 --> 00:00:40,000
We want to keep going as long as "i" is less than or equal to "n".

15
00:00:40,000 --> 00:00:43,000
Once "i" gets bigger than "n", that's when we should stop.

16
00:00:43,000 --> 00:00:46,000
What we do in the loop body is print the value of "i"

17
00:00:46,000 --> 00:00:48,000
and add 1 to "i".

18
00:00:48,000 --> 00:00:51,000
We don't need to return anything; the only point of the procedure,

19
00:00:51,000 --> 00:00:54,000
as we were asked to write it, was to print out the numbers.

20
00:00:54,000 --> 00:00:58,000
So now let's do a test: we'll print the numbers up to 3,

21
00:00:58,000 --> 00:01:01,000
and there we get the output, printing the numbers 1, 2, 3.

22
00:01:01,000 --> 00:01:03,000
There are lots of other ways we could have written this.

23
00:01:03,000 --> 00:01:07,000
Another approach would be to start with "i" equals zero,

24
00:01:07,000 --> 00:01:10,000
make the test condition "i" is less than "n".

25
00:01:10,000 --> 00:01:13,000
So now we're stopping as soon as "i" is equal to "n".

26
00:01:13,000 --> 00:01:17,000
For this to print out the correct numbers, though, now we need to move the print.

27
00:01:17,000 --> 00:01:20,000
We want the print to be after we added 1 to "i",

28
00:01:20,000 --> 00:01:24,000
so the first number we print is supposed to be a 1, which will be the case here.

29
00:01:24,000 --> 00:01:28,000
And the final number we print should be "n", which is the case here.

30
00:01:28,000 --> 00:01:31,000
Once the value of "i" is "n", this test will be False

31
00:01:31,000 --> 00:01:33,000
and we don't go through the loop anymore--so

32
00:01:33,000 --> 00:01:36,000
when we run this, we get the same result, printing 1, 2, 3.

33
00:01:36,000 --> 00:01:40,000
So as another test, let's see what happens when we pass in zero.

34
00:01:40,000 --> 00:01:43,000
And when we run this, it doesn't print anything.

35
00:01:43,000 --> 00:01:48,000
That's because when "i" is zero, "i" less than "n" evaluates to False.

36
00:01:48,000 --> 00:01:51,000
Zero is not less than zero, so we don't go through the loop at all

37
00:01:51,000 --> 00:01:53,000
and don't print anything--which seems like a pretty sensible thing.

38
00:01:53,000 --> 00:01:56,000
Since we said print the numbers between 1 and the target number,

39
00:01:56,000 --> 00:01:59,000
if the target number is zero, not printing anything sort of makes sense.
