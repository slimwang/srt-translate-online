1
00:00:00,000 --> 00:00:02,000
So let's summarize what we did in this Unit.

2
00:00:02,000 --> 00:00:04,000
We learned that probability is a powerful tool

3
00:00:04,000 --> 00:00:06,000
for tackling problems with uncertainty.

4
00:00:06,000 --> 00:00:09,000
We learned that we can do Search with uncertainty,

5
00:00:09,000 --> 00:00:11,000
like we did Search in the previous Unit,

6
00:00:11,000 --> 00:00:15,000
over Exact Certain domains.

7
00:00:15,000 --> 00:00:17,000
Here, we can handle uncertainty in our Search.

8
00:00:17,000 --> 00:00:19,000
We learned that the notion of Utility

9
00:00:19,000 --> 00:00:23,000
gives us a powerful and beautiful general approach

10
00:00:23,000 --> 00:00:25,000
to solving the Search problems.

11
00:00:25,000 --> 00:00:27,000
It gives us the best-action function

12
00:00:27,000 --> 00:00:29,000
with which we can solve any problem

13
00:00:29,000 --> 00:00:31,000
that can be specified in the form

14
00:00:31,000 --> 00:00:33,000
that best-action expects,

15
00:00:33,000 --> 00:00:36,000
and that's a wide variety of problems.

16
00:00:36,000 --> 00:00:38,000
Now, some of them are so complex that they

17
00:00:38,000 --> 00:00:41,000
can't be computed in a feasible amount of time.

18
00:00:41,000 --> 00:00:43,000
And there are more advanced techniques

19
00:00:43,000 --> 00:00:45,000
for dealing with approximations to that.

20
00:00:45,000 --> 00:00:48,000
But it's incredibly powerful because it separates out

21
00:00:48,000 --> 00:00:50,000
the How versus the What.

22
00:00:50,000 --> 00:00:55,000
You only have to tell the computer what the situation is.

23
00:00:55,000 --> 00:00:57,000
You don't have to tell it how to find the best answer,

24
00:00:57,000 --> 00:00:59,000
and it automatically finds the best answer.

25
00:00:59,000 --> 00:01:02,000
And we learned you can deal with probability

26
00:01:02,000 --> 00:01:05,000
through simulation, making repeated random choices,

27
00:01:05,000 --> 00:01:10,000
and just counting up in how many one answer occurs, versus another.

28
00:01:10,000 --> 00:01:13,000
And we learned that if the total number of possibilities is small,

29
00:01:13,000 --> 00:01:15,000
you can just enumerate them.

30
00:01:15,000 --> 00:01:18,000
You can count them all, and you can get an exact answer,

31
00:01:18,000 --> 00:01:22,000
as an exact fraction rather than an approximation.

32
00:01:22,000 --> 00:01:24,000
And we learned some general strategies

33
00:01:24,000 --> 00:01:26,000
that don't have to do with probability.

34
00:01:26,000 --> 00:01:29,000
When we were trying to figure out how to add printing to our game,

35
00:01:29,000 --> 00:01:32,000
we looked at the notion of a wrapper function.

36
00:01:32,000 --> 00:01:35,000
That is, how we inject functionality

37
00:01:35,000 --> 00:01:37,000
into an existing function,

38
00:01:37,000 --> 00:01:40,000
by sneaking it in on top of one of the arguments.

39
00:01:40,000 --> 00:01:43,000
And this is an example of aspect-oriented programming,

40
00:01:43,000 --> 00:01:47,000
where we take the aspect of printing out what's happening

41
00:01:47,000 --> 00:01:50,000
and keep that separate from the main logic of the program.

42
00:01:50,000 --> 00:01:53,000
We learned that you can do exploratory data analysis.

43
00:01:53,000 --> 00:01:56,000
When I was looking at the two strategies for playing PIG

44
00:01:56,000 --> 00:01:58,000
and where they differed, that was a completely different question

45
00:01:58,000 --> 00:02:01,000
than what I'd designed the PIG program for.

46
00:02:01,000 --> 00:02:03,000
Because I had put together the right pieces,

47
00:02:03,000 --> 00:02:06,000
it was easy to do the exploration and come to an understanding.

48
00:02:06,000 --> 00:02:08,000
And we learned--or, at least, I learned

49
00:02:08,000 --> 00:02:10,000
because I was the one who made the mistake--

50
00:02:10,000 --> 00:02:12,000
that errors can pop up,

51
00:02:12,000 --> 00:02:15,000
particularly in the types of arguments

52
00:02:15,000 --> 00:02:17,000
and results that functions expect in return--

53
00:02:17,000 --> 00:02:20,000
and that you have to be careful, Python, to deal with that

54
00:02:20,000 --> 00:02:23,000
because Python doesn't give you the seatbelts

55
00:02:23,000 --> 00:02:26,000
that other languages have, to protect yourself from those type of errors.

56
00:02:26,000 --> 00:02:28,000
So you have to be vigilant, on your own.

57
00:02:28,000 --> 00:02:31,000
And finally, that was a lot to cram into one Unit.

58
00:02:31,000 --> 00:02:34,000
So if you followed along all of that--

59
00:02:34,000 --> 00:02:36,000
congratulations, for the work you've done.

60
00:02:36,000 --> 00:02:38,000
You've learned a lot.

61
00:02:38,000 --> 99:59:59,999
Have fun with the homework; we'll see you in the next Unit.
