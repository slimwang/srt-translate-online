1
00:00:00,130 --> 00:00:03,614
This animation works, but it has a potential problem. We're basing the

2
00:00:03,614 --> 00:00:07,627
animation entirely off of the number of frames rendered. Each frame rotated the

3
00:00:07,627 --> 00:00:11,126
bird half a degree. However, what if your machine runs this demo at 60 frames

4
00:00:11,126 --> 00:00:15,236
per second, and mine runs it at 30 frames per second? This means your drinking

5
00:00:15,236 --> 00:00:19,919
bird is rotating 30 degrees a second. Mine is rotating only 15. This might be

6
00:00:19,919 --> 00:00:22,220
fine for drinking birds but say we had a facial animation play and it was

7
00:00:22,220 --> 00:00:26,062
supposed to be synced with the sound file of the character's voice. This would

8
00:00:26,062 --> 00:00:29,489
be a disaster. What we really want to do is use the real world time to know how

9
00:00:29,489 --> 00:00:34,434
far to rotate before rendering the next frame. For example, say our target rate

10
00:00:34,434 --> 00:00:37,658
is 60 frames per second, meaning that the bird should rotate 30 degrees per

11
00:00:37,658 --> 00:00:42,235
second. We'd like to know how much time has gone by since the last frame. In a

12
00:00:42,235 --> 00:00:44,892
moment, I'll show you how this is done. As you can see from demo, once we

13
00:00:44,892 --> 00:00:47,900
switch to the timed version of the code, the rate of the drinking birds motion

14
00:00:47,900 --> 00:00:53,020
is unaffected by the frames per second shown. Give this demo a try yourself.
