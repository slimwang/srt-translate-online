1
00:00:00,000 --> 00:00:04,000
The second part of the answer to this problem is to do a good job is that as the person

2
00:00:04,000 --> 00:00:07,000
running the random tester--you need to do a pretty good job filtering the bugs that you find

3
00:00:07,000 --> 00:00:10,000
so that you only pass the ones that look important.

4
00:00:10,000 --> 00:00:13,000
The ones that look like there might be critical or security problems or something

5
00:00:13,000 --> 00:00:17,000
onto the developers, and if you find a bunch of bugs that they never see, this isn't a problem.

6
00:00:17,000 --> 00:00:20,000
If you find a bunch of bugs that they're never going to see,

7
00:00:20,000 --> 00:00:24,000
this isn't necessarily a problem but it uses your time.

8
00:00:24,000 --> 00:00:29,000
If you find a bunch of bugs that you never pass on to developers, this isn't necessarily a problem.

9
00:00:29,000 --> 00:00:33,000
You've learned interesting things about the software under test and if you make the decision

10
00:00:33,000 --> 00:00:36,000
to not pass this on then that's probably okay.

11
00:00:36,000 --> 00:00:40,000
It's not uncommon for a simple random tester to spend all its time performing boring tests.

12
00:00:40,000 --> 00:00:43,000
For example, if we do a bad job generating html then maybe all our test

13
00:00:43,000 --> 00:00:47,000
result in rejection by the html cursor and we never find anything interesting.

14
00:00:47,000 --> 00:00:49,000
I have two responses to this kind of thing.

15
00:00:49,000 --> 00:00:51,000
One response is to simply put more resources into the random tester.

16
00:00:51,000 --> 00:00:53,000
For example, we can use more course.

17
00:00:53,000 --> 00:00:57,000
We can use machines with more memory or maybe we can just make random tester faster

18
00:00:57,000 --> 00:00:59,000
by reusing the size of the inputs through a generator.

19
00:00:59,000 --> 00:01:01,000
The other response as we've discussed several times

20
00:01:01,000 --> 00:01:03,000
is to make the random test case generator smarter.

21
00:01:03,000 --> 00:01:06,000
That is to say to use our human expertise or human knowledge of the domain of interest

22
00:01:06,000 --> 00:01:09,000
in order to generate manual test cases that aren't boring.

23
00:01:09,000 --> 00:01:12,000
Random tester may find the same bug many many many times

24
00:01:12,000 --> 00:01:16,000
and if we're going to automatically reject repeated instances of a bug, this isn't a problem.

25
00:01:16,000 --> 00:01:19,000
On the other hand, if we don't have an automated way to do triage of issues that we found,

26
00:01:19,000 --> 00:01:25,000
then this can really waste somebody's time and this issue, we'll talk about explicitly a little bit later.
