1
00:00:05,084 --> 00:00:08,042
Like most other programming languages,

2
00:00:08,042 --> 00:00:12,760
JavaScript gives us evaluators
to compare expressions.

3
00:00:12,760 --> 00:00:16,910
We can see if data are less than,
greater than, equal to, or

4
00:00:16,910 --> 00:00:19,710
some combination of those three.

5
00:00:19,710 --> 00:00:22,600
For this lesson we'll be
sticking with equality.

6
00:00:22,600 --> 00:00:26,990
>> And equal to uses three equal signs,
not two.

7
00:00:26,990 --> 00:00:32,530
>> Sort of, it can use either
three equal signs or two.

8
00:00:33,680 --> 00:00:36,940
But the three equal sign
version is slightly safer.

9
00:00:36,940 --> 00:00:42,520
There's a link in the instructors
notes explaining the difference.

10
00:00:42,520 --> 00:00:45,320
To check out the syntax and
give evaluation a try.

11
00:00:46,400 --> 00:00:49,980
>> Like, if some condition is true,
then do something.

12
00:00:51,410 --> 00:00:54,970
There's an if statement within the
parentheses and then, if it evaluates to

13
00:00:54,970 --> 00:00:58,390
true, we perform whatever action
comes between the curly braces.

14
00:00:59,560 --> 00:01:01,710
If the condition isn't equal to true,

15
00:01:01,710 --> 00:01:04,940
we can use an else statement
to do something else.

16
00:01:04,940 --> 00:01:08,860
In that case we simply use the key
word else, add another curly brace and

17
00:01:08,860 --> 00:01:11,280
then an alternate set of
commands that performs

18
00:01:11,280 --> 00:01:13,250
if this original condition is not true.

19
00:01:14,560 --> 00:01:15,500
This syntax for

20
00:01:15,500 --> 00:01:19,380
if statements follows the same
patterns as if statements in Python.

21
00:01:19,380 --> 00:01:22,650
But notice that we have to include
our conditions in parentheses here.

22
00:01:22,650 --> 00:01:25,870
And that the statements that
perform if this condition is true

23
00:01:25,870 --> 00:01:27,930
come between curly braces.

24
00:01:27,930 --> 00:01:31,700
Also note, there's no colon after
the condition in JavaScript.

25
00:01:31,700 --> 00:01:33,360
>> Here's an example.

26
00:01:33,360 --> 00:01:38,929
If ( tired === true) { drinkCoffee();
}else{ drinkWater(); }.

27
00:01:38,929 --> 00:01:43,420
If I'm tired I'll go drink some coffee.

28
00:01:43,420 --> 00:01:44,850
Otherwise I'll drink water.

29
00:01:46,710 --> 00:01:49,630
So how do you think we'll use if
statements to build the resume?

30
00:01:51,230 --> 00:01:55,170
Looking at our header,
we've got these skills, which we may or

31
00:01:55,170 --> 00:01:57,220
may not want to include.

32
00:01:57,220 --> 00:02:00,900
If we do decide to include this list,
we'll first need to create it, and

33
00:02:00,900 --> 00:02:03,760
we'll need to create this
skills at a glance heading.

34
00:02:03,760 --> 00:02:06,230
So, how can we see if we
need to create the list?

35
00:02:06,230 --> 00:02:08,229
I think we should use an if statement.

36
00:02:08,229 --> 00:02:10,590
You know what?
This is going to make a good quiz.

37
00:02:10,590 --> 00:02:12,130
>> Yeah, I think so too.

38
00:02:12,130 --> 00:02:15,010
>> Write an if statement that
checks whether there are any skills

39
00:02:15,010 --> 00:02:16,410
in the bio object.

40
00:02:16,410 --> 00:02:19,300
If there are skills, the if statement
should evaluate to true and

41
00:02:19,300 --> 00:02:23,470
then .append()HTMLskillsStart
to the div with the id=header.

42
00:02:23,470 --> 00:02:28,070
Once that's done, .append() each
skill to the element id=skills

43
00:02:28,070 --> 00:02:30,790
by formatting them with HTMLskills.

44
00:02:30,790 --> 00:02:33,470
You could find HTML skills in
helper.js if you're interesting in

45
00:02:33,470 --> 00:02:34,580
what it looks like.

46
00:02:34,580 --> 00:02:37,780
When you've finished up, and you can see
the skills on the page, check this box.
