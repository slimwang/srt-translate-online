1
00:00:00,110 --> 00:00:02,880
So the correct answer is the second one. So hopefully, no one picked

2
00:00:02,880 --> 00:00:06,070
the first answer. We usually do try to do things the easy way.

3
00:00:06,070 --> 00:00:08,600
There is sort of an exception to that in this whole unit. That

4
00:00:08,600 --> 00:00:12,850
we're learning ourselves how to define a hash table. Even though Python provides

5
00:00:12,850 --> 00:00:15,200
a dictionary type, which I'll talk about at the very end of the

6
00:00:15,200 --> 00:00:18,920
unit. That makes things much easier than what we're doing ourselves, but we

7
00:00:18,920 --> 00:00:21,910
really want to understand a lot of computer science by building our own hash

8
00:00:21,910 --> 00:00:25,230
table, and then we won't actually need to use it because there's a built-in

9
00:00:25,230 --> 00:00:28,000
type that works much better. But the answer is

10
00:00:28,000 --> 00:00:30,600
the second answer, and here's the reason why. So what

11
00:00:30,600 --> 00:00:34,800
happens when we evaluate this list multiplication, well, we have

12
00:00:34,800 --> 00:00:38,800
this empty list, let's draw it like this. And we

13
00:00:38,800 --> 00:00:41,410
create a new list, which is three copies of that

14
00:00:41,410 --> 00:00:44,690
list. But it's not copies, it's three references to it.

15
00:00:44,690 --> 00:00:47,260
So here's the new list. It has three elements. Each

16
00:00:47,260 --> 00:00:51,270
one of those elements refers to the same empty list.

17
00:00:51,270 --> 00:00:54,658
Then when we did table index 1 append, well, what

18
00:00:54,658 --> 00:00:58,845
happened is we follow this reference to whatever table index

19
00:00:58,845 --> 00:01:02,330
1 is, this object we appended to it, added a

20
00:01:02,330 --> 00:01:05,760
new element. But because the references at position zero, one, and

21
00:01:05,760 --> 00:01:08,150
two, all refer to the same object, that changed all

22
00:01:08,150 --> 00:01:11,180
of those values, not just the value of table index 1.

23
00:01:11,180 --> 00:01:12,670
And we can see that if we print out the

24
00:01:12,670 --> 00:01:16,310
whole table, that the table contains three elements. But they're all

25
00:01:16,310 --> 00:01:19,100
the same. And they all refer to the same object.

26
00:01:19,100 --> 00:01:21,490
So any change we make to one changes all of them.
