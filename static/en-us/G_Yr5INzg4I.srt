1
00:00:00,340 --> 00:00:03,310
Threads can have many different relationship patterns. For much of the rest

2
00:00:03,310 --> 00:00:05,810
of the unit, we will look at an example of the producer

3
00:00:05,810 --> 00:00:09,080
consumer pattern. Before going into that however, I want to put it

4
00:00:09,080 --> 00:00:12,990
in context by taking a broader view of possible thread relationships. To

5
00:00:12,990 --> 00:00:15,680
give our thread something to do, we'll imagine that we are servicing

6
00:00:15,680 --> 00:00:18,800
some requests that come through a queue. In the team model, we

7
00:00:18,800 --> 00:00:22,200
have a pool of worker threads that all look in the queue,

8
00:00:22,200 --> 00:00:25,790
fetch the next request, and service it. This idea of a worker pool

9
00:00:25,790 --> 00:00:28,480
is common to many patterns. The costs of creating a new

10
00:00:28,480 --> 00:00:31,350
thread are fairly high, so rather than spending time creating and

11
00:00:31,350 --> 00:00:35,010
destroying threads, applications will simply let the threads wait around until

12
00:00:35,010 --> 00:00:37,340
there is work for them to do. A model similar to

13
00:00:37,340 --> 00:00:40,330
the team model is the dispatcher model. Here instead of having

14
00:00:40,330 --> 00:00:43,175
a whole team of threads constantly looking at our queue and

15
00:00:43,175 --> 00:00:47,500
possibly creating some contention, we have a single dispatcher thread looking

16
00:00:47,500 --> 00:00:51,050
at the queue. He finds an available worker and passes the request

17
00:00:51,050 --> 00:00:53,570
off to the worker to be serviced. Instead

18
00:00:53,570 --> 00:00:55,950
of dividing up the work by requests, it's also

19
00:00:55,950 --> 00:00:58,560
possible to divide it up by subtask. This is

20
00:00:58,560 --> 00:01:01,630
the strategy employed in the pipeline model. One thread

21
00:01:01,630 --> 00:01:03,910
DQs a request, does part of the work,

22
00:01:03,910 --> 00:01:05,970
and then passes it on to another thread who

23
00:01:05,970 --> 00:01:08,780
does part of the work, passes it on, etc.

24
00:01:08,780 --> 00:01:10,780
So, all three of these models are commonly used.
