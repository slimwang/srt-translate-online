1
00:00:00,540 --> 00:00:04,370
So far, you added a record button
that is perfectly centered on screen,

2
00:00:04,370 --> 00:00:06,870
on both an iPhone and an iPad.

3
00:00:06,870 --> 00:00:10,170
This is in the view of
the viewController.swift class.

4
00:00:10,170 --> 00:00:12,940
Now we need a way to connect
the record button to the code

5
00:00:12,940 --> 00:00:13,920
in the view controller.

6
00:00:14,940 --> 00:00:17,810
Since we need to work with both the view
and the view controller at the same

7
00:00:17,810 --> 00:00:22,240
time, we need a way to show them
both simultaneously in Xcode.

8
00:00:22,240 --> 00:00:26,280
There's a great way to do this in
Xcode called the assistant editor.

9
00:00:26,280 --> 00:00:30,300
To switch to it, first make sure that
we've selected the main.storyboard file

10
00:00:30,300 --> 00:00:34,230
as you can see here, and
it's showing in the content editor.

11
00:00:34,230 --> 00:00:37,890
Then click the assistant editor
button here on the top right.

12
00:00:37,890 --> 00:00:41,000
It's the one that looks like
two circles, intertwined.

13
00:00:41,000 --> 00:00:43,690
Then, make sure that we have
the view controller selected here.

14
00:00:44,800 --> 00:00:47,420
Things are getting a bit
crowded in our Xcode window.

15
00:00:47,420 --> 00:00:49,100
Let's close out
the inspectors window for

16
00:00:49,100 --> 00:00:53,140
now with the key shortcut, Cmd+Opt+0.

17
00:00:53,140 --> 00:00:57,170
Let's also hide the debug area for now
by pressing the button here to hide it.

18
00:00:59,300 --> 00:01:02,080
We're going to use something called
an ib action to link the button

19
00:01:02,080 --> 00:01:03,370
to the view controller.

20
00:01:03,370 --> 00:01:07,780
It links to pressing of the button to
a function inside the view controller.

21
00:01:07,780 --> 00:01:10,130
This is known as a target action.

22
00:01:10,130 --> 00:01:12,120
The target is the view controller, and

23
00:01:12,120 --> 00:01:13,930
the action is the function
we are about to create.

24
00:01:15,040 --> 00:01:16,510
Select the record button.

25
00:01:16,510 --> 00:01:18,580
You can do it here in
the document outline and

26
00:01:18,580 --> 00:01:22,620
then holding down the Ctrl key, drag
it over until it's right above the last

27
00:01:22,620 --> 00:01:25,562
curly brace inside
the ViewController.swift file.

28
00:01:26,600 --> 00:01:29,510
Let go and then from the drop down,
select Action.

29
00:01:30,570 --> 00:01:33,170
Let's give this action a name,
such as recordAudio.

30
00:01:35,480 --> 00:01:36,630
And then click the Connect button.

31
00:01:37,870 --> 00:01:41,387
You can see Xcode has created
a function for us called recordAudio,

32
00:01:41,387 --> 00:01:45,610
and has connected this button to this
function in the viewController class.

33
00:01:45,610 --> 00:01:48,510
We can see this function is connected
because it has this filled in circle

34
00:01:48,510 --> 00:01:50,190
here on the left side of the bar.

35
00:01:51,390 --> 00:01:54,480
This filled in circle indicates that
this is a special type of function,

36
00:01:54,480 --> 00:01:59,220
called an IB action, that has a button
or other UI element connected to it.

37
00:01:59,220 --> 00:02:01,460
Now every time the user
presses the record button,

38
00:02:01,460 --> 00:02:02,770
this function is going to get called.

39
00:02:03,960 --> 00:02:07,280
A good practice in software development
is to test your code often.

40
00:02:07,280 --> 00:02:09,710
Our pitch perfect app is no exception.

41
00:02:09,710 --> 00:02:13,860
Let's add a line of what I like to call
caveman debugging to this function,

42
00:02:13,860 --> 00:02:16,720
to print out to the console
that the button was pressed.

43
00:02:16,720 --> 00:02:19,150
Inside this function let's
add a print command.

44
00:02:19,150 --> 00:02:20,150
So that we can just print out,

45
00:02:20,150 --> 00:02:23,170
record button was pressed,
every time the user presses this button.

46
00:02:24,210 --> 00:02:27,330
Let's press the run button and
test this app out.

47
00:02:27,330 --> 00:02:30,599
In my case I've selected the iPhone
6S as the simulator to use.

48
00:02:32,290 --> 00:02:34,210
Now when I press the record button,

49
00:02:34,210 --> 00:02:38,260
I can see the record button
pressed is showing in the console.

50
00:02:38,260 --> 00:02:40,370
Press it again,
I can see that it's happening there.

51
00:02:40,370 --> 00:02:41,750
It's listing here on the right.

52
00:02:43,100 --> 00:02:45,040
Why do i call it caveman debugging?

53
00:02:45,040 --> 00:02:48,060
Well, it's the oldest and
simplest form of debugging your code,

54
00:02:48,060 --> 00:02:50,510
just by logging
something to the console.

55
00:02:50,510 --> 00:02:53,600
Later in these courses, you're going to
learn some really powerful ways to

56
00:02:53,600 --> 00:02:57,060
watch, debug, and
step into the execution of your code.

57
00:02:57,060 --> 00:03:00,040
For now, we can be content
with using caveman debugging

58
00:03:00,040 --> 00:03:02,650
to ensure that the record audio
function is getting called.
