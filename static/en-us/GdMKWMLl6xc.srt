1
00:00:00,000 --> 00:00:03,000
So what does this have to do with approximation algorithms?

2
00:00:03,000 --> 00:00:08,000
Well, it shows that even though a problem can be very hard initially,

3
00:00:08,000 --> 00:00:12,000
once you know just small parts of the solution

4
00:00:12,000 --> 00:00:15,000
it can become rather easy to obtain a complete solution.

5
00:00:15,000 --> 00:00:19,000
So the deep resolve that underlies the statement here

6
00:00:19,000 --> 00:00:21,000
basically works the same way.

7
00:00:21,000 --> 00:00:24,000
It says that if you know a small part

8
00:00:24,000 --> 00:00:27,000
of the solution of Clique and Independent Set,

9
00:00:27,000 --> 00:00:30,000
then you can use this to construct an optimal solution.

10
00:00:30,000 --> 00:00:32,000
The real proof of this is much more complex,

11
00:00:32,000 --> 00:00:34,000
but that is the basic idea.

12
00:00:34,000 --> 00:00:37,000
Having a constant factor approximation algorithm for Clique or Independent Set

13
00:00:37,000 --> 00:00:41,000
would reveal so much information about a perfect solution

14
00:00:41,000 --> 00:00:45,000
that you could construct a polynomial time algorithm from this.

15
00:00:45,000 --> 00:00:48,000
And actually there's a similar result for Vertex Cover,

16
00:00:48,000 --> 00:00:51,000
surprisingly, but Alice doesn't need to worry that much,

17
00:00:51,000 --> 00:00:53,000
so for Vertex Cover

18
00:00:53,000 --> 00:00:56,000
there is not constant factor approximation

19
00:00:56,000 --> 00:00:59,000
that is better than 1.36,

20
00:00:59,000 --> 00:01:01,000
unless P=NP.

21
00:01:01,000 --> 00:01:04,000
And actually, many people believe that this number here should be higher,

22
00:01:04,000 --> 99:59:59,999
but this is the highest number that has been proven so far.
