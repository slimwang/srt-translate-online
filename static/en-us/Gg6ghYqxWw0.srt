1
00:00:00,000 --> 00:00:03,759
For this homework, we asked you to remove dead code.

2
00:00:03,759 --> 00:00:07,067
That is code that could not have any effect

3
00:00:07,067 --> 00:00:10,989
on the final return result of the method we’re

4
00:00:10,989 --> 00:00:13,742
interested in. So, let’s go ahead and just dive right

5
00:00:13,742 --> 00:00:17,252
into this. We take a fragment; if you remember

6
00:00:17,252 --> 00:00:23,025
the fragments are of this shape where the first part

7
00:00:23,041 --> 00:00:27,746
of the tuple is the variable to be assigned to and

8
00:00:27,746 --> 00:00:32,305
then the next part of the tuple is the expression

9
00:00:32,305 --> 00:00:35,485
that is being assigned to it, in this case one is

10
00:00:35,485 --> 00:00:39,261
being assigned to A or A operational, one is being

11
00:00:39,261 --> 00:00:42,071
assigned to B, 2 is being assigned to C etcetera.

12
00:00:42,071 --> 00:00:45,217
Now we’re not really concerned with what

13
00:00:45,217 --> 00:00:47,948
specifically the operations are. We don’t care

14
00:00:47,948 --> 00:00:50,491
what operations are being done. We just care that

15
00:00:50,491 --> 00:00:53,756
something is being done to these variables,

16
00:00:53,756 --> 00:00:56,054
because if there is something being done, even if

17
00:00:56,054 --> 00:00:59,185
it ends up setting them to the exact same thing, we

18
00:00:59,185 --> 00:01:02,000
can’t necessarily know that ahead of time. So, if

19
00:01:02,000 --> 00:01:06,868
you have a fragment of this shape, then we store

20
00:01:06,868 --> 00:01:09,425
that as the old fragment, as the un-optimized

21
00:01:09,425 --> 00:01:12,549
fragment. And that’s the first argument to this

22
00:01:12,549 --> 00:01:18,352
method. And the return is the end return value;

23
00:01:18,352 --> 00:01:21,352
it’s the list of variables returned at the end of the

24
00:01:21,352 --> 00:01:23,858
fragment. And if they’re returned at the end of the

25
00:01:23,858 --> 00:01:26,262
fragment, they’re automatically live, as we said

26
00:01:26,262 --> 00:01:29,970
up here. Now we want to create a new optimized

27
00:01:29,970 --> 00:01:33,838
fragment of just the live variables. So we start off

28
00:01:33,838 --> 00:01:39,653
by initializing that to an empty list. And we set a

29
00:01:39,653 --> 00:01:43,091
variable called live equal to the returned live

30
00:01:43,091 --> 00:01:45,602
variables, because we know those are live.

31
00:01:45,602 --> 00:01:49,666
Now for every statement in the fragment starting from

32
00:01:49,666 --> 00:01:52,200
the back, so we’re working backwards from the

33
00:01:52,200 --> 00:01:55,881
return statement, back up to the top, we check if

34
00:01:55,881 --> 00:01:59,700
the first element of the tuple statement, that is the

35
00:01:59,700 --> 00:02:03,740
left hand side of the statement, is already in live.

36
00:02:03,740 --> 00:02:06,596
That is, it is one of the live variables currently.

37
00:02:06,596 --> 00:02:12,198
If it is, then we add that statement to the new

38
00:02:12,198 --> 00:02:15,604
optimized fragment. Otherwise we fall through

39
00:02:15,604 --> 00:02:19,573
and now we take the list of live variables and we

40
00:02:19,573 --> 00:02:24,131
remove the variables that we’re now assigning to.

41
00:02:24,131 --> 00:02:26,934
So we take all those out. From there, we update

42
00:02:26,934 --> 00:02:30,693
the live list with all the variables that are currently

43
00:02:30,693 --> 00:02:32,989
on the right hand side of statement. We run

44
00:02:33,005 --> 00:02:36,397
through the entire fragment doing that over and

45
00:02:36,397 --> 00:02:38,485
over until we get back to the top. Once we’re

46
00:02:38,485 --> 00:02:40,298
done with that, we check if the new fragment is

47
00:02:40,298 --> 00:02:43,646
equal to the old fragment. If it is, then we return

48
00:02:43,646 --> 00:02:45,826
the new fragment. We didn’t change anything.

49
00:02:45,826 --> 00:02:49,564
So we just return and stop and we’re done. If it isn’t,

50
00:02:49,564 --> 00:02:51,819
well, then we might have further optimizations as

51
00:02:51,819 --> 00:02:55,184
we discussed earlier. Then we return, removing

52
00:02:55,184 --> 00:02:57,447
dead of the new fragment in return. So we

53
00:02:57,447 --> 00:03:00,425
recursively call this until we don’t get any

54
00:03:00,425 --> 00:03:02,817
further changes, because hopefully we can

55
00:03:02,817 --> 00:03:05,141
optimize further. Now we’re going to check that

56
00:03:05,141 --> 00:03:08,305
removed dead gives us what we would expect if

57
00:03:08,305 --> 00:03:11,594
we ran through all the optimizations by hand, and

58
00:03:11,594 --> 00:03:15,247
I’m not going to bother going through all of these.

59
00:03:15,247 --> 00:03:17,517
You can read them fairly easily and when we do

60
00:03:17,517 --> 00:03:20,744
that, we see that we get true values for each of

61
00:03:20,744 --> 00:03:24,071
these. This is a fairly involved little bit of code.

62
00:03:24,071 --> 00:03:25,869
It takes a little bit to think about and this is a

63
00:03:25,869 --> 00:03:29,805
very useful optimization because we can

64
00:03:29,805 --> 00:03:32,683
potentially get rid of a lot of code doing this.
