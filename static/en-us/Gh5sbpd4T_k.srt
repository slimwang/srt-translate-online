1
00:00:00,150 --> 00:00:01,659
This implicitly of hitting run and

2
00:00:01,659 --> 00:00:05,250
having your app appear on an emulator
hides a lot of complexity.

3
00:00:05,250 --> 00:00:09,230
Remember that Android is a full
software stack and its base is a Linux

4
00:00:09,230 --> 00:00:13,760
kernel that handles low level tasks like
hardware, drivers and power management.

5
00:00:13,759 --> 00:00:18,019
On top of that are some core
C/C++ libraries like LibsC and

6
00:00:18,019 --> 00:00:22,350
SQLite and the Android run time along
with the core Android libraries.

7
00:00:22,350 --> 00:00:25,990
Your app runs within its own instance
of the run time using the classes and

8
00:00:25,989 --> 00:00:28,759
services provided here in
the application framework.

9
00:00:28,760 --> 00:00:32,368
On top of that, it's the application
layer, including your app and

10
00:00:32,368 --> 00:00:34,369
every other app that's installed.

11
00:00:34,369 --> 00:00:36,009
So when you hit run in Android studio,

12
00:00:36,009 --> 00:00:39,089
the first thing that happens is your
code gets compiled into byte code

13
00:00:39,090 --> 00:00:41,340
that can be run in the run
time on the device.

14
00:00:41,340 --> 00:00:45,080
In Android Studio this is done using
Gradel, a build tool kit that manages

15
00:00:45,079 --> 00:00:48,259
dependencies and
allows you to define custom build logic.

16
00:00:48,259 --> 00:00:51,420
For now, note that we start with your
project, which Gradel builds and

17
00:00:51,420 --> 00:00:54,590
then packages the Byte Code along
with your applications resources,

18
00:00:54,590 --> 00:00:58,609
externalized images, UI, XML, into
an Android Application Package file.

19
00:00:58,609 --> 00:01:02,579
And APK which is especially
formatted ZIP file.

20
00:01:02,579 --> 00:01:06,090
Once you got a APK ready to go,
Android Studio signs it and

21
00:01:06,090 --> 00:01:10,234
then pushes it to the device using
the Android Debug Bridge or ADB.

22
00:01:10,234 --> 00:01:13,719
IF we return to the terminal, you can
see that ADB let's you interact and

23
00:01:13,719 --> 00:01:16,709
debug apps on any device,
physical or virtual.

24
00:01:16,709 --> 00:01:20,149
Things like pushing and pulling files,
viewing log cat output or

25
00:01:20,150 --> 00:01:21,990
even running a remote shell.

26
00:01:21,989 --> 00:01:27,079
So once Android Studio has ADB
installed, the APK it uses ADB

27
00:01:27,079 --> 00:01:30,640
again to launch the app by sending
a start command via the remote shell

28
00:01:30,640 --> 00:01:33,349
by identifying the package and
class name of your main activity.

