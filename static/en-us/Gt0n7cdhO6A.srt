1
00:00:00,250 --> 00:00:03,849
Here's a summary of the various three.js settings for magnification,

2
00:00:03,849 --> 00:00:08,237
minification, and anisotropy. The minimal settings are listed first. The higher

3
00:00:08,237 --> 00:00:11,892
quality ones, further down. Quality does cost more GPU processing time, so you

4
00:00:11,892 --> 00:00:16,248
have to decide what settings you can justify. The norm nowadays is to have

5
00:00:16,248 --> 00:00:20,103
linear magnification and the best quality mipmap filtering on. I should note

6
00:00:20,103 --> 00:00:24,594
that anisotropic sampling does not exist on older GPUs. Though it's an

7
00:00:24,594 --> 00:00:27,792
extension in Web GL. Each vendor has its own secret sauce as to how they

8
00:00:27,792 --> 00:00:31,779
implement this algorithm. So rendering quality can vary. The maximum

9
00:00:31,779 --> 00:00:36,650
anisotropic sampling rate can also vary from GPU to GPU. Calling the

10
00:00:36,650 --> 00:00:39,884
getMaxAnisotropy function gives the maximum rate possible on the GPU running

11
00:00:39,884 --> 00:00:45,139
the program. This is usually a power of 2 and usually no higher than 16. You

12
00:00:45,139 --> 00:00:48,605
can set the value higher if you want. Three.js will use the highest level

13
00:00:48,605 --> 00:00:52,508
available on the card. More samples cost more processing power so, again, you

14
00:00:52,508 --> 00:00:56,580
need to decide what rate is reasonable. There are yet still better sampling

15
00:00:56,580 --> 00:01:00,344
methods possible, anisotropic filtering is not the ultimate answer. I went into

16
00:01:00,344 --> 00:01:04,936
perhaps excessive detail on this aspect of the GPU, but for a good reason. This

17
00:01:04,936 --> 00:01:08,219
whole process of sampling and filtering comes up again and again throughout all

18
00:01:08,219 --> 00:01:12,503
of computer graphics. If you take too many samples you're wasting time and

19
00:01:12,503 --> 00:01:17,558
possibly causing other problems. Too few and you can get artifacts. Where the

20
00:01:17,558 --> 00:01:20,873
samples are taken and how the samples are combined or filtered, can also make a

21
00:01:20,873 --> 00:01:25,260
huge difference. Many processes can be though of in these terms. Did I

22
00:01:25,260 --> 00:01:28,789
tessellate the surface enough to capture its essence? Should my computation

23
00:01:28,789 --> 00:01:32,460
happen in the vertex shader or the fragment shader? Should my shadow buffer

24
00:01:32,460 --> 00:01:36,450
have a higher resolution, or should I use a different algorithm? When I think

25
00:01:36,450 --> 00:01:39,375
of computer graphics and rendering as a whole, I think of it primarily in terms

26
00:01:39,375 --> 00:01:44,406
of sampling and filtering. Give the demo a try. It will show you the valid

27
00:01:44,406 --> 00:01:48,278
levels for your GPU. If you only see a value 1, it means your GPU does not

28
00:01:48,278 --> 00:01:50,814
support anisotropic filtering.
