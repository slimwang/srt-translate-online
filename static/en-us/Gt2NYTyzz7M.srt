1
00:00:00,120 --> 00:00:03,850
So when talking about the level of
assurance that we have in the system and

2
00:00:03,850 --> 00:00:05,710
we said, well, we can do testing.

3
00:00:05,710 --> 00:00:08,230
You can do formal verification.

4
00:00:08,230 --> 00:00:10,700
So let's talk about why that is harder,

5
00:00:10,700 --> 00:00:15,330
some of the challenges that we may
face when we're trying to do that.

6
00:00:15,330 --> 00:00:17,520
Well, when you're doing tests,

7
00:00:17,520 --> 00:00:22,600
you have to then rate the right
set of tests to your test cases.

8
00:00:22,600 --> 00:00:26,210
Test cases are supposed to show
the existence of a problem.

9
00:00:26,210 --> 00:00:29,290
If you don't have a good
set of these test cases,

10
00:00:29,290 --> 00:00:32,840
then a problem that you may
have may go undiscovered.

11
00:00:32,840 --> 00:00:35,140
In other words you want to
have good code coverage.

12
00:00:35,140 --> 00:00:39,450
You won't execute the code that we have
in the software system and the kind of

13
00:00:39,450 --> 00:00:43,760
execution paths we may be able to take
when the system is actually deployed.

14
00:00:43,760 --> 00:00:47,670
The problem with this is that there
could be a very large impact on

15
00:00:47,670 --> 00:00:50,750
exponential number of different
executions that are possible.

16
00:00:50,750 --> 00:00:55,345
And these different execution paths
we're talking about could change when we

17
00:00:55,345 --> 00:00:57,930
have different execution environments.

18
00:00:57,930 --> 00:00:59,890
So we talked about
the other kind of testing,

19
00:00:59,890 --> 00:01:01,990
which is the penetration testing, okay.

20
00:01:01,990 --> 00:01:07,690
So that is the adversary actually or
somebody else trying to find one way.

21
00:01:07,690 --> 00:01:09,830
Here when we're doing
testing as a good guide,

22
00:01:09,830 --> 00:01:14,810
we have to make sure that every possible
execution path we know that is good.

23
00:01:14,810 --> 00:01:18,480
So you have the burden of showing that
no matter how the system executes,

24
00:01:18,480 --> 00:01:21,060
things will not go wrong.

25
00:01:21,060 --> 00:01:23,770
If you're doing Pen testing,
the problem is different.

26
00:01:23,770 --> 00:01:26,730
You're not concerned about
every possible execution path.

27
00:01:26,730 --> 00:01:31,660
You're actually concerned about some
execution path where a problem shows up,

28
00:01:31,660 --> 00:01:35,050
some vulnerability you discover
that can be exploited.

29
00:01:35,050 --> 00:01:39,860
One way we do that is if ethical,
hopefully, hackers,

30
00:01:39,860 --> 00:01:44,310
they attempt to defeat the security
measures that we have in place.

31
00:01:44,310 --> 00:01:48,120
If they're successful that means
that we have a problem with

32
00:01:48,120 --> 00:01:52,340
the security measures that
we use in our system, okay?

33
00:01:52,340 --> 00:01:56,470
If they can't find any, that doesn't
mean that somebody else can't find them

34
00:01:56,470 --> 00:02:00,990
two weeks from today, but if they
can defeat the security measures,

35
00:02:00,990 --> 00:02:02,690
then we know that we have a problem.

36
00:02:02,690 --> 00:02:06,610
Keep in mind that,
even with pen testing, as in testing,

37
00:02:06,610 --> 00:02:11,550
we only talking about showing the
existence of a problem that is there.

38
00:02:11,550 --> 00:02:12,810
That a problem exists.

39
00:02:12,810 --> 00:02:15,660
We can never demonstrate
the absence of a problem.

40
00:02:15,660 --> 00:02:17,840
And that is formal verification.

41
00:02:17,840 --> 00:02:21,980
Formal verification is essentially
the mathematical specification of what

42
00:02:21,980 --> 00:02:23,880
the program is supposed to do, and

43
00:02:23,880 --> 00:02:28,720
what security assertions have to hold,
what security properties have to hold.

44
00:02:28,720 --> 00:02:34,450
And it's a proof, and the proof is about
the correct behavior of the program or

45
00:02:34,450 --> 00:02:37,360
any executions that
the program may go through.

46
00:02:37,360 --> 00:02:39,100
Through.
So, how can we do this?

47
00:02:39,100 --> 00:02:42,200
Well, there are automated
theorem proving techniques,

48
00:02:42,200 --> 00:02:44,250
things like model checking and all.

49
00:02:44,250 --> 00:02:48,355
What they typically do is,
at our program or code that we have,

50
00:02:48,355 --> 00:02:52,370
we'll have a bunch of state variables
with some initial assignment or values.

51
00:02:52,370 --> 00:02:55,380
And program instructions or
statements or

52
00:02:55,380 --> 00:02:58,690
the code that we have actually
change these state variables.

53
00:02:58,690 --> 00:03:01,640
Depending on what the instruction or
the statement is,

54
00:03:01,640 --> 00:03:06,520
it's maybe assigning new variables or

55
00:03:06,520 --> 00:03:09,900
altering, or computing and
things like that, whatever it is doing.

56
00:03:09,900 --> 00:03:14,145
But the state changes and
then we have some boolean predicates.

57
00:03:14,145 --> 00:03:19,065
The correctness is sort of captured
in predicates that hold on the state

58
00:03:19,065 --> 00:03:20,495
variables that we have.

59
00:03:20,495 --> 00:03:25,235
And so essentially, model checking or
theorem proving, basically is saying

60
00:03:25,235 --> 00:03:30,695
that certain security assertion we have
is going to hold as the program executes

61
00:03:30,695 --> 00:03:33,925
or as the state variables change,
due to the execution of the program.

62
00:03:33,925 --> 00:03:35,670
The assertions remain true.

63
00:03:35,670 --> 00:03:38,850
Okay, if you can show that for
everything that the program does

64
00:03:38,850 --> 00:03:42,339
of course, all of its statements,
starting in some initial state.

65
00:03:42,339 --> 00:03:44,804
That is a proof of correctness, or

66
00:03:44,804 --> 00:03:49,720
formal verification that whatever
that we wanted actually holds.

67
00:03:49,720 --> 00:03:54,330
Well the problem is that model checking,
the same sort of difficulty we had with

68
00:03:54,330 --> 00:03:59,050
testing is that the state
space can actually explode.

69
00:03:59,050 --> 00:04:02,470
And worst case complexity is,again,
exponential.

70
00:04:02,470 --> 00:04:06,230
However, there are strides being
made in this field, Verification.

71
00:04:06,230 --> 00:04:11,400
The problem that we have with it is
would it scale to really large systems.

72
00:04:11,400 --> 00:04:14,730
And your operating system, of course,
is one of those large systems.

73
00:04:14,730 --> 00:04:18,060
It doesn't quite scale
to that size system,

74
00:04:18,060 --> 00:04:20,649
but as I said, strides are being made.

75
00:04:20,649 --> 00:04:22,980
We can check where these
kind of properties, and

76
00:04:22,980 --> 00:04:24,640
this kind of work actually.

77
00:04:24,640 --> 00:04:28,640
So the model checking pioneers won the
highest award that computer science has,

78
00:04:28,640 --> 00:04:32,630
the Turing Award, in particular in 2007.

79
00:04:32,630 --> 00:04:37,960
Because of the importance or impact this
kind of work could have in, not just

80
00:04:37,960 --> 00:04:42,360
building or writing software that
implements the functionality we desire,

81
00:04:42,360 --> 00:04:46,630
but also implements the security
requirements that we want to have or

82
00:04:46,630 --> 00:04:49,430
security properties that we
want to have in the system.
