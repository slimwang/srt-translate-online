1
00:00:00,220 --> 00:00:03,800
Now that we're at the pixel level, let's talk a bit about Anti-aliasing. By

2
00:00:03,800 --> 00:00:08,480
default, when we rasterize a scene, we find what's at the center of each pixel.

3
00:00:08,480 --> 00:00:11,580
This can give some fairly bad results, as edges of triangles will either be

4
00:00:11,580 --> 00:00:16,529
considered to fully cover a pixel, or not cover it at all. The binary nature of

5
00:00:16,529 --> 00:00:20,250
this process causes what's called Aliasing, giving a ragged look to edges.

6
00:00:20,250 --> 00:00:24,260
Informally, this problem is called the Jaggies or Stairstepping. When you see

7
00:00:24,260 --> 00:00:27,896
it in animation, it's called the Crawlies. What we'd like to do is get a nice

8
00:00:27,896 --> 00:00:30,886
smooth result, where each edge pixel is shaded proportionately to how much of

9
00:00:30,886 --> 00:00:35,431
it is covered by each object overlapping it. If the pixel is mostly covered by

10
00:00:35,431 --> 00:00:40,404
a triangle, use more of the triangle's color, less, use less. The hard part is

11
00:00:40,404 --> 00:00:43,380
in figuring out this coverage, it's expensive to compute, store and blend

12
00:00:43,380 --> 00:00:48,108
triangle areas for each pixel. Though maybe this will happen someday, about the

13
00:00:48,108 --> 00:00:51,738
same time we get personal jet packs. In the meantime there have been a huge

14
00:00:51,738 --> 00:00:55,800
number of Anti-aliasing schemes proposed for interactive 3D graphics. On one

15
00:00:55,800 --> 00:00:59,090
end of the spectrum is Supersampling. Where you simply create a higher

16
00:00:59,090 --> 00:01:02,570
resolution image, and then use all these extra samples to make the final image.

17
00:01:02,570 --> 00:01:05,706
For example, for 1000 by 1000 pixel image, you might render it at a resolution

18
00:01:05,706 --> 00:01:11,350
of 4000 by 4000. Now each pixel has 16 pixels associate with it in the high res

19
00:01:11,350 --> 00:01:16,872
image. Blend these together and you get a better result. This scheme is

20
00:01:16,872 --> 00:01:21,348
considered a bad idea, for a number of reasons. One is that it's expensive both

21
00:01:21,348 --> 00:01:25,332
in memory and processing cost. Another is that sampling in a little 4 by 4 grid

22
00:01:25,332 --> 00:01:28,236
is not much help in fixing the jaggies for nearly horizontal or nearly vertical

23
00:01:28,236 --> 00:01:34,000
lines. A scheme commonly supported by the GPU is called Multi-sampling

24
00:01:34,000 --> 00:01:38,115
Anti-aliasing or MSAA. The idea here is to compute a shade for the whole

25
00:01:38,115 --> 00:01:42,166
fragment once, and to compute the geometric coverage separately. In addition, a

26
00:01:42,166 --> 00:01:45,046
different sampling pattern than a grid is used, doing so helps narrowly

27
00:01:45,046 --> 00:01:49,449
horizontal and vertical lines considerably. This sampling pattern does vary

28
00:01:49,449 --> 00:01:53,465
depending on the hardware company making the GPU. The main costs here are

29
00:01:53,465 --> 00:01:56,165
processing and storage, but these costs are considerably less and give

30
00:01:56,165 --> 00:02:00,870
considerably more bang for the buck than brute force super-sampling. This is

31
00:02:00,870 --> 00:02:05,118
generally the form of Anti-aliasing used by default by WebGL. I say generally

32
00:02:05,118 --> 00:02:08,702
because there's a toggle for Anti-aliasing on or off, and it's not specified

33
00:02:08,702 --> 00:02:13,910
what form of Anti-aliasing is used. To turn Anti-aliasing on in 3GS consists of

34
00:02:13,910 --> 00:02:18,602
setting a simple Boolean parameter called antialias. I should note that turning

35
00:02:18,602 --> 00:02:21,802
this on doesn't necessarily do anything. It depends upon whether the GPU

36
00:02:21,802 --> 00:02:25,286
supports Anti-aliasing, most should, and whether the browser decides to allow

37
00:02:25,286 --> 00:02:30,653
it. Sometimes there are bugs that make it safer to keep Anti-aliasing off.

38
00:02:30,653 --> 00:02:33,662
Sadly most of the video lessons we've made showing 3GS demos do not have

39
00:02:33,662 --> 00:02:38,008
Anti-aliasing on, just because of such a bug. Welcome to the bleeding edge of

40
00:02:38,008 --> 00:02:41,704
technology, no one said there would be cake. Another class of algorithms for

41
00:02:41,704 --> 00:02:44,786
Anti-aliasing perform filtering on the image, this is a relatively new class of

42
00:02:44,786 --> 00:02:50,678
techniques. The first of these called Morphological Anti-aliasing, or MLAA, was

43
00:02:50,678 --> 00:02:55,040
developed in 2009. The idea is to use the existing image and possibly other

44
00:02:55,040 --> 00:02:59,050
data to detect sharp edges. When these are found, try to smooth just these

45
00:02:59,050 --> 00:03:03,750
edges by using nearby pixels. Amazingly, such techniques work pretty well,

46
00:03:03,750 --> 00:03:07,826
though can fail on thin lines, text, and other special cases. One of the most

47
00:03:07,826 --> 00:03:11,712
popular fitting techniques is called FXAA, which just needs the image itself to

48
00:03:11,712 --> 00:03:17,030
operate. I've used it myself in products and it's even included in 3GS. I think

49
00:03:17,030 --> 00:03:20,080
part of the popularity is the author Timothy Lates put a serious amount of

50
00:03:20,080 --> 00:03:23,280
effort into both making this shader run on just about every GPU known to human

51
00:03:23,280 --> 00:03:29,140
kind and thoroughly documenting the code itself. Just to spell it out in case

52
00:03:29,140 --> 00:03:32,340
you didn't get the hint, please do document your code, especially if you plan

53
00:03:32,340 --> 00:03:35,440
on having anyone else see it, which of course, anyone can do if you're using

54
00:03:35,440 --> 00:03:40,049
WebGL or 3GS. So, I'll say it again, document your code.
