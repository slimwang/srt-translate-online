1
00:00:00,000 --> 00:00:02,873
So how do we do this? Well, we find the smallest element,

2
00:00:02,873 --> 00:00:06,507
and we know that it must move to the smallest output location.

3
00:00:06,507 --> 00:00:11,529
So, in that case, that's going to be a zero here. This is the smallest element out of all of these.

4
00:00:11,529 --> 00:00:16,187
It's going to be scattered to output location zero. The next smallest element is here,

5
00:00:16,187 --> 00:00:23,106
and then here, and then here, and then here, here, here, and here.

6
00:00:23,106 --> 00:00:29,063
So the key here is, how do we get these numbers? That's the important part of the merge algorithm here.

7
00:00:29,063 --> 00:00:33,500
So we're going to put ourselves in the mental position of one of these elements in the first list.

8
00:00:33,500 --> 00:00:36,074
So we're going to pick this particular element right here,

9
00:00:36,074 --> 00:00:41,077
and we're going to say, "Hey, what position am I in my own list?

10
00:00:41,077 --> 00:00:46,482
Well, I'm a position 2 because there are 2 elements in front of me in my list."

11
00:00:46,482 --> 00:00:51,024
So, he would be at position zero, he would be at position 1, and I'm at position 2.

12
00:00:51,024 --> 00:00:56,926
Now here's the cool part. This guy has to ask, "Where would I be in the other list?"

13
00:00:56,926 --> 00:01:01,663
Well, if I look at this list I would need to be right here.

14
00:01:01,663 --> 00:01:08,366
So if I was in that list I would also be at position number 2 because there would be 2 elements in front of me.

15
00:01:08,366 --> 00:01:13,750
This guy would be at position 0, this guy would be at position 1, and I would be at position 2,

16
00:01:13,750 --> 00:01:17,652
so in the overall list I know I'm behind 2 elements here,

17
00:01:17,652 --> 00:01:22,285
and I know I'm behind 2 elements here, so I can add those things together

18
00:01:22,285 --> 00:01:27,724
and discover that in the final sorted list I would be at position number 4,

19
00:01:27,724 --> 00:01:34,130
and that is the scatter address that I need to put him in the right position in the output list.

20
00:01:34,130 --> 00:01:37,441
So how do we know our position in our own list? Well, that's very simple.

21
00:01:37,441 --> 00:01:41,571
We've launched these threads as a contiguous block with 1 element per thread.

22
00:01:41,571 --> 00:01:45,949
So I'm going to be exactly at my thread ID. He's thread ID 0,

23
00:01:45,949 --> 00:01:51,814
he's thread ID 1, and he's thread ID 2. So how do we know our position in the other list?

24
00:01:51,814 --> 00:01:53,947
That's a little bit more complex.

25
00:01:53,947 --> 00:01:58,053
What we need to do to make this work is to do a binary search in the other list.

26
00:01:58,053 --> 00:02:04,797
So, this element will look in the other list, move down as a binary search until it finds out where it's going

27
00:02:04,813 --> 00:02:09,833
to belong in the other list. Every thread does an independent binary search in

28
00:02:09,833 --> 00:02:14,357
parallel in the other list. So for a sorted list of length n,

29
00:02:14,357 --> 00:02:19,373
that will take log n steps per element, and all of those elements will do the search in parallel,

30
00:02:19,373 --> 00:02:22,810
and that's a very fast operation if we're doing it out of shared memory.

31
00:02:22,810 --> 00:02:25,979
Now, for sorting more elements that can fit in shared memory,

32
00:02:25,979 --> 00:02:29,884
then what we generally do is read in only a chunk of each sorted list,

33
00:02:29,884 --> 00:02:33,487
compute the first part of the output, write it back into main memory,

34
00:02:33,487 --> 00:02:36,357
refill the input arrays with more elements, and repeat until done.
