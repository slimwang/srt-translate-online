1
00:00:00,000 --> 00:00:03,000
[Evans] There are many other ways to define find_element.

2
00:00:03,000 --> 00:00:07,000
I'm going to show you 1 way that takes advantage of another built-in list operation

3
00:00:07,000 --> 00:00:11,000
that we haven't introduced yet but that makes it much easier to write find_element.

4
00:00:11,000 --> 00:00:14,000
The operation is called index.

5
00:00:14,000 --> 00:00:16,000
The index method is invoked on a list.

6
00:00:16,000 --> 00:00:22,000
You pass in a value, and the output in index is the position that that value exists in the list.

7
00:00:22,000 --> 00:00:26,000
So the built-in index almost solves find_element exactly the way we want.

8
00:00:26,000 --> 00:00:31,000
The difference is when we invoke index on a list that doesn't contain the value we pass in.

9
00:00:31,000 --> 00:00:35,000
Index doesn't return -1. What it does is gives us an error.

10
00:00:35,000 --> 00:00:39,000
So let's look at what happens in the Python interpreter.

11
00:00:39,000 --> 00:00:45,000
I'll define a variable p and give it the value of the list 0, 1, 2.

12
00:00:45,000 --> 00:00:50,000
If we invoke index on p, passing in 2, we get as the result 2,

13
00:00:50,000 --> 00:00:54,000
which is the position in p where the value 2 occurs.

14
00:00:54,000 --> 00:00:57,000
For the second example we'll add more 2s in the list,

15
00:00:57,000 --> 00:01:00,000
and we see that it always gives us the first one.

16
00:01:00,000 --> 00:01:06,000
So the result returned by p index is the first place in the list where that occurs.

17
00:01:06,000 --> 00:01:09,000
Now we'll try an element that doesn't exist in the list.

18
00:01:09,000 --> 00:01:14,000
What we see is instead of getting -1 as a result we get an error

19
00:01:14,000 --> 00:01:17,000
that the target element that we looked for doesn't appear in the list.

20
00:01:17,000 --> 00:01:21,000
So if we want find_element to have the behavior that's described,

21
00:01:21,000 --> 00:01:24,000
we can't quite do it using index directly.

22
00:01:24,000 --> 00:01:27,000
There are some other list operations that might be very helpful, though.

23
00:01:27,000 --> 00:01:30,000
So to summarize the behavior of the index method,

24
00:01:30,000 --> 00:01:36,000
if the value passed in is in the list, it returns the first position where the value is found.

25
00:01:36,000 --> 00:01:38,000
This is exactly what we wanted for find_element.

26
00:01:38,000 --> 00:01:42,000
The problem is if the value is not found in the list, it produces an error.

27
00:01:42,000 --> 00:01:47,000
There's another list operation that will be useful to allow us to use index to find_element,

28
00:01:47,000 --> 00:01:51,000
and it's useful for many other things, and that's the in word.

29
00:01:51,000 --> 00:01:54,000
We've already seen in being used in the for-loop.

30
00:01:54,000 --> 00:01:59,000
Here we use the same word in, but in this context it means something different.

31
00:01:59,000 --> 00:02:05,000
The syntax is to have a value to the left of the in word followed by the list.

32
00:02:05,000 --> 00:02:08,000
The syntax is a bit strange compared to the other things we've seen in Python.

33
00:02:08,000 --> 00:02:13,000
It doesn't look like a procedure call, but it's very natural in terms of how it corresponds

34
00:02:13,000 --> 00:02:15,000
to how we would say this in English.

35
00:02:15,000 --> 00:02:18,000
If we say something like, "Is 3 in the list?"

36
00:02:18,000 --> 00:02:21,000
we would write that in Python as 3 in p.

37
00:02:21,000 --> 00:02:25,000
So let's see how that works in the interpreter.

38
00:02:25,000 --> 00:02:29,000
Now I'm printing the result of 3 in p.

39
00:02:29,000 --> 00:02:32,000
3 is not in the list, so it prints out False.

40
00:02:32,000 --> 00:02:37,000
If I change this to print the result of 2 in p,

41
00:02:37,000 --> 00:02:40,000
we get the value True.

42
00:02:40,000 --> 00:02:43,000
So to summarize the behavior of the in operator,

43
00:02:43,000 --> 00:02:46,000
if the value is in the list, the output is true.

44
00:02:46,000 --> 00:02:48,000
Otherwise the output is false.

45
00:02:48,000 --> 00:02:51,000
Similarly, we can use not in.

46
00:02:51,000 --> 00:02:53,000
Not in has the opposite meaning of in.

47
00:02:53,000 --> 00:02:58,000
If the value is not in the list, the result of value not in list is true.

48
00:02:58,000 --> 00:03:03,000
If the value is in the list, then the result of value not in list is false.

49
00:03:03,000 --> 00:03:10,000
The value not in list is exactly equivalent to saying not value in list.

50
00:03:10,000 --> 00:03:15,000
The only reason to have the not in is it's more natural to read it this way in English

51
00:03:15,000 --> 00:03:19,000
than having the not between the value and the in.

52
00:03:19,000 --> 00:03:24,000
So now to check that you understand index and in and not in operations,

53
00:03:24,000 --> 00:03:27,000
I want you to try to define the find_element procedure again.

54
00:03:27,000 --> 00:03:31,000
It should have the same exact behavior as the ones we've defined before.

55
00:03:31,000 --> 00:03:35,000
It should give us the position of the element we're searching for if it exists,

56
00:03:35,000 --> 00:03:38,000
and it should give us -1 if it doesn't exist.

57
00:03:38,000 --> 00:03:41,000
But this time instead of using a while loop or a for-loop to define it

58
00:03:41,000 --> 00:03:44,000
see if you can define it using index.
