1
00:00:00,670 --> 00:00:02,390
Let's discuss another collective.

2
00:00:02,390 --> 00:00:06,070
It's called
the All-to-all Personalized Exchange.

3
00:00:06,070 --> 00:00:09,273
In the business, you can just refer
to this as all-to-all, for short.

4
00:00:09,273 --> 00:00:10,390
In an all-to-all,

5
00:00:10,390 --> 00:00:12,960
every node wants to send a unique
message to every other node.

6
00:00:12,960 --> 00:00:14,860
Now, this picture is not quite accurate,

7
00:00:14,860 --> 00:00:18,790
because each node is just sort of
shouting a message to all other nodes.

8
00:00:18,790 --> 00:00:22,300
But in fact,
in an all-to-all personalized exchange,

9
00:00:22,300 --> 00:00:26,160
every node has a personal message
to send to every other node.

10
00:00:26,160 --> 00:00:29,620
As an example,
consider a matrix transpose.

11
00:00:29,620 --> 00:00:32,200
Start with a matrix,
initialize to some set of values.

12
00:00:33,500 --> 00:00:35,560
A transpose rotates the elements.

13
00:00:36,910 --> 00:00:41,385
More formally, every element A(i,j)
swaps positions with A(j,i).

14
00:00:42,630 --> 00:00:45,420
Now suppose our initial
matrix A is distributed

15
00:00:45,420 --> 00:00:48,410
column wise among several
nodes in a linear network.

16
00:00:49,460 --> 00:00:51,550
So that might look like this.

17
00:00:51,550 --> 00:00:54,610
After the transpose we want
the system to look like this.

18
00:00:54,610 --> 00:00:55,580
So how do you implement it?

19
00:00:56,720 --> 00:00:59,900
To make this a little easier to see
let's switch from a linear network

20
00:00:59,900 --> 00:01:00,800
to a ring network.

21
00:01:02,030 --> 00:01:05,000
And let's suppose that the size of
the data that every node wants to

22
00:01:05,000 --> 00:01:07,140
send to every other node is m.

23
00:01:08,340 --> 00:01:11,710
So each of these little
boxes is of size m and

24
00:01:11,710 --> 00:01:16,350
the total length of a vector on
any node is n which is m times p.

25
00:01:16,350 --> 00:01:19,250
Before I give you an algorithm I want
you to come up with a performance

26
00:01:19,250 --> 00:01:20,540
target.

27
00:01:20,540 --> 00:01:22,960
Start by considering one of these nodes,

28
00:01:22,960 --> 00:01:27,520
and the P- 1 messages
that it wants to send.

29
00:01:27,520 --> 00:01:28,780
So, let's start with node 0 and

30
00:01:28,780 --> 00:01:32,310
let's look at the ith message
that it needs to send.

31
00:01:33,450 --> 00:01:36,670
The ith message needs to go to node i.

32
00:01:36,670 --> 00:01:38,940
So, how far away is that node?

33
00:01:38,940 --> 00:01:43,330
I claim that that distance is min(i,
P- i).

34
00:01:43,330 --> 00:01:44,340
Why?

35
00:01:44,340 --> 00:01:47,240
On a ring,
the message could go either this way or

36
00:01:47,240 --> 00:01:49,250
this way,
depending on which one is shorter.

37
00:01:50,430 --> 00:01:51,850
Now, from this fact,

38
00:01:51,850 --> 00:01:55,160
you can estimate the average
distance that a message must travel.

39
00:01:56,330 --> 00:02:01,510
So, each of the messages from 1 to P-1
need to travel a distance of this.

40
00:02:02,560 --> 00:02:04,309
We take the average over all messages.

41
00:02:05,400 --> 00:02:08,750
For simplicity, this calculation
assumes that P-1 is even.

42
00:02:09,780 --> 00:02:12,710
If you work it all out,
the average turns out to be P over 4.

43
00:02:12,710 --> 00:02:16,010
So let's remember this handy fact.

44
00:02:16,010 --> 00:02:21,010
Now all P nodes in the network
need to do these sends.

45
00:02:21,010 --> 00:02:23,960
What's the total volume of traffic
that the network has to carry?

46
00:02:25,080 --> 00:02:30,240
Well, it's the number of nodes
times the total volume per node for

47
00:02:30,240 --> 00:02:34,340
all messages times the average
distance per message.

48
00:02:34,340 --> 00:02:36,100
Here's another question,

49
00:02:36,100 --> 00:02:40,020
how much bandwidth is available
to carry all of this traffic?

50
00:02:40,020 --> 00:02:43,820
Well the total bandwidth is
the number of links in the network

51
00:02:43,820 --> 00:02:48,500
times the speed per link, which is
just one over the inverse bandwidth.

52
00:02:48,500 --> 00:02:50,330
Again we're setting
a performance target, so

53
00:02:50,330 --> 00:02:52,750
we're making optimistic assumptions.

54
00:02:52,750 --> 00:02:54,150
Now from these two facts,

55
00:02:54,150 --> 00:02:57,880
we can estimate a lower bound
on the communication time.

56
00:02:57,880 --> 00:03:00,840
It's just the total volume
divided by the total speed.

57
00:03:01,930 --> 00:03:04,840
So now what we want to do is
write down an algorithm and

58
00:03:04,840 --> 00:03:08,150
then compare that algorithm
to this lower bound.

59
00:03:08,150 --> 00:03:10,750
Okay, let's talk about
a specific algorithm.

60
00:03:10,750 --> 00:03:15,230
Here's an idea, which is to perform
a sequence of circular shifts.

61
00:03:15,230 --> 00:03:17,130
Here's the initial state.

62
00:03:17,130 --> 00:03:23,730
In the first step, each node will send m
times P-1 of it's data to its neighbor.

63
00:03:23,730 --> 00:03:27,990
For example, node 0 will send
these words to the right.

64
00:03:27,990 --> 00:03:31,150
What it is sending is all of
the data that needs to go somewhere.

65
00:03:31,150 --> 00:03:35,500
So while node 0 is doing that, node
1 is doing basically the same thing.

66
00:03:35,500 --> 00:03:40,000
It's packing up the data that needs
to go to other nodes and sending it.

67
00:03:40,000 --> 00:03:41,970
Node 2 does the same thing.

68
00:03:41,970 --> 00:03:44,850
It keeps the one piece of data
it's supposed to hang onto and

69
00:03:44,850 --> 00:03:47,080
ships off everything else.

70
00:03:47,080 --> 00:03:48,660
And so on.

71
00:03:48,660 --> 00:03:52,420
Here's what the system will look
like at the end of this first step.

72
00:03:52,420 --> 00:03:55,180
Compare this to our goal output.

73
00:03:55,180 --> 00:03:56,100
So after one step,

74
00:03:56,100 --> 00:03:59,900
you can see that every node has two of
the elements that it needs to retain.

75
00:04:00,930 --> 00:04:07,980
So node 0 has a0 and e0, node 1 has
a1 and b1, node 2 has b2 and c2.

76
00:04:07,980 --> 00:04:11,030
This is exactly what they
need in the final output.

77
00:04:11,030 --> 00:04:15,060
So that means in the next step,
we could repeat the same process, again

78
00:04:15,060 --> 00:04:18,469
retaining the data we're supposed to
keep and shipping off everything else.

79
00:04:19,470 --> 00:04:24,410
So in step two, every node
would send m(P-2) of its data.

80
00:04:25,450 --> 00:04:28,140
And this process will
repeat until we're done.

81
00:04:28,140 --> 00:04:31,410
To analyze the cost of this algorithm,
let's consider some round.

82
00:04:31,410 --> 00:04:32,230
Call it i.

83
00:04:33,280 --> 00:04:38,920
In round i, a node sends m times
P-i of it's data to a neighbor.

84
00:04:38,920 --> 00:04:41,760
So how much time does
this whole thing take.

85
00:04:41,760 --> 00:04:45,330
First, the overall
scheme needs P-1 steps.

86
00:04:45,330 --> 00:04:51,800
In each step i, nodes send m times
P-i words, so plug in our usual

87
00:04:51,800 --> 00:04:57,740
per message cost model, then simplify
and finally enjoy your handiwork.

88
00:04:57,740 --> 00:05:01,810
Now remember, our usual convention
is to let total size n be m times P.

89
00:05:02,860 --> 00:05:05,310
So then this expression
becomes n over 2.

90
00:05:05,310 --> 00:05:09,410
So notice that the bandwidth
term is now linear mP.

91
00:05:09,410 --> 00:05:11,580
Compare that to this lower bound.

92
00:05:11,580 --> 00:05:13,700
Hey, your algorithm seems pretty good.

93
00:05:13,700 --> 00:05:16,790
It's within a factor of 2 of
our lower bound estimate.

94
00:05:16,790 --> 00:05:19,750
Tofu the parting hypercube says oh yeah.

95
00:05:19,750 --> 00:05:21,580
You know I 'm SCS no one
knows you're a tofu.
