1
00:00:00,160 --> 00:00:01,970
Here are the answers I got.

2
00:00:01,970 --> 00:00:07,660
For the first question,
I got 7.089 minus 7.230.

3
00:00:07,660 --> 00:00:14,435
For the second question,
I got 15.342, 7.337.

4
00:00:14,435 --> 00:00:19,791
For the last question, I got 12.382,

5
00:00:19,791 --> 00:00:23,569
-7.499, -2.356.

6
00:00:23,569 --> 00:00:29,470
I could have computed these
relatively easily by hand but

7
00:00:29,470 --> 00:00:33,390
I'd like to go ahead and code functions
to compute sums, differences in scalar

8
00:00:33,390 --> 00:00:37,310
products of vectors that way I
can use these functions later.

9
00:00:37,310 --> 00:00:41,230
To fill in the plus function
I used a list comprehension

10
00:00:41,230 --> 00:00:45,130
after zipping together
the coordinates of self and v.

11
00:00:45,130 --> 00:00:48,160
This allows me to add
corresponding coordinates and

12
00:00:48,160 --> 00:00:50,290
form a list from the sums.

13
00:00:50,290 --> 00:00:53,530
If you're not familiar with
list comprehension in Python or

14
00:00:53,530 --> 00:00:58,600
if you're using a different language you
could obtain the same result using a for

15
00:00:58,600 --> 00:01:02,750
loop to loop through each of the two
vectors coordinate lists and

16
00:01:02,750 --> 00:01:05,870
insert their sum into
another data structure.

17
00:01:05,870 --> 00:01:09,310
We can mimic this pattern
in the minus function.

18
00:01:09,310 --> 00:01:11,780
I again used a list comprehension.

19
00:01:11,780 --> 00:01:13,930
But this time instead of adding,

20
00:01:13,930 --> 00:01:18,730
I just subtracted the corresponding
coordinates of the vectors self and v.

21
00:01:18,730 --> 00:01:21,040
Finally, in the time scalar function.

22
00:01:21,040 --> 00:01:25,470
I again used a list comprehension
to compute the product

23
00:01:25,470 --> 00:01:29,010
of each coordinate of the vector self,
with the number c.

24
00:01:29,010 --> 00:01:32,475
One difference this time is, since I'm
only dealing with one vector in this

25
00:01:32,475 --> 00:01:37,015
function, I didn't need to use
zip in the list comprehension.

26
00:01:37,015 --> 00:01:41,175
Now if I execute this code
below the class definition,

27
00:01:41,175 --> 00:01:43,535
I see the output of
the vectors as expected.
