1
00:00:00,000 --> 00:00:02,000
And here's my solution.

2
00:00:02,000 --> 00:00:05,000
First I compute the mean using the mean function.

3
00:00:05,000 --> 00:00:08,000
Assign it to a new variable that I make up called mu.

4
00:00:08,000 --> 00:00:10,000
So this is now inside the variance; I now know the mean.

5
00:00:10,000 --> 00:00:13,000
Here's how I construct my new lists--my ndata lists.

6
00:00:13,000 --> 00:00:15,000
I first set it to the empty lists.

7
00:00:15,000 --> 00:00:20,000
Then I go through every index in the original data structure.

8
00:00:20,000 --> 00:00:23,000
So len(data) as we know gives me the number of elements.

9
00:00:23,000 --> 00:00:26,000
Range constructs a list of indices from zero to one minus that.

10
00:00:26,000 --> 00:00:28,000
Then I go through it sequentially,

11
00:00:28,000 --> 00:00:31,000
and that allows me to index the i'th item in my data structure.

12
00:00:31,000 --> 00:00:33,000
Now I take the i'th item.

13
00:00:33,000 --> 00:00:35,000
I subtract the mean.

14
00:00:35,000 --> 00:00:37,000
This is a very short notation for squaring it.

15
00:00:37,000 --> 00:00:40,000
I could've just done the same times itself.

16
00:00:40,000 --> 00:00:44,000
But this is my new i'th element that I append into my ndata set.

17
00:00:44,000 --> 00:00:46,000
So we're doing this with a for loop.

18
00:00:46,000 --> 00:00:48,000
I get a parallel data set called ndata

19
00:00:48,000 --> 00:00:51,000
that is data minus the mean, squared.

20
00:00:51,000 --> 00:00:56,000
Now I compute the mean of that new ndata and return it; that's my variance.

21
00:00:56,000 --> 00:01:01,000
It turns out there's an even more elegant version to do this in Python.

22
00:01:01,000 --> 00:01:04,000
It requires a good amount of programming skills

23
00:01:04,000 --> 00:01:07,000
that are probably way beyond most beginners' programming skills.

24
00:01:07,000 --> 00:01:09,000
Here is how it goes:

25
00:01:09,000 --> 00:01:11,000
You can do this in two lines.

26
00:01:11,000 --> 00:01:14,000
You can compute the mean, as we've done before

27
00:01:14,000 --> 00:01:16,000
with our function mean that we programmed ourselves.

28
00:01:16,000 --> 00:01:18,000
And here is the tricky part.

29
00:01:18,000 --> 00:01:20,000
We're now going to compute the mean of a new list.

30
00:01:20,000 --> 00:01:24,000
We can construct this new list in a single line--that's the key thing here.

31
00:01:24,000 --> 00:01:27,000
The way we construct it is we go through all the data items

32
00:01:27,000 --> 00:01:30,000
for x in the data

33
00:01:30,000 --> 00:01:32,000
and we construct a new list out of it

34
00:01:32,000 --> 00:01:37,000
where the math for constructing the new list is x minus mu to the square.

35
00:01:37,000 --> 00:01:42,000
So this loops through all the data items, applies this equation to each data item,

36
00:01:42,000 --> 00:01:46,000
constructs the new lists, passes these lists on to the mean function,

37
00:01:46,000 --> 00:01:48,000
and returns the correct value.

38
00:01:48,000 --> 99:59:59,999
So this is one of the compact ways of programming the variance.
