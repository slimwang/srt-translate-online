1
00:00:00,000 --> 00:00:05,000
[Thrun] This is a great segue to one of the most successful algorithms

2
00:00:05,000 --> 00:00:09,000
in artificial intelligence and robotics called particle filters.

3
00:00:09,000 --> 00:00:13,000
Again, the topic here is robot localization,

4
00:00:13,000 --> 00:00:17,000
and here we're dealing with a real robot with actual sensor data.

5
00:00:17,000 --> 00:00:20,000
The robot is lost in this building.

6
00:00:20,000 --> 00:00:24,000
You can see different rooms, and you can see corridors,

7
00:00:24,000 --> 00:00:26,000
and the robot is equipped with range sensors.

8
00:00:26,000 --> 00:00:31,000
These are sound sensors that measure the range to nearby obstacles.

9
00:00:31,000 --> 00:00:35,000
Its task is to figure out where it is.

10
00:00:35,000 --> 00:00:39,000
The robot will move along the black line over here, but it doesn't know this.

11
00:00:39,000 --> 00:00:41,000
It has no clue where it is.

12
00:00:41,000 --> 00:00:43,000
It has to figure out where it is.

13
00:00:43,000 --> 00:00:48,000
The key thing in particle filters is the representation of the belief.

14
00:00:48,000 --> 00:00:54,000
Whereas before we had discrete worlds like our sun and rain example

15
00:00:54,000 --> 00:00:59,000
or we had a histogram approach where we cut the space into small bins,

16
00:00:59,000 --> 00:01:02,000
particle filters have a very different representation.

17
00:01:02,000 --> 00:01:07,000
They represent the space by a collection of points or particles.

18
00:01:07,000 --> 00:01:12,000
Each of these small dots over here is a hypothesis where the robot might be.

19
00:01:12,000 --> 00:01:19,000
It's a concrete value of its X location and its Y location and its heading direction

20
00:01:19,000 --> 00:01:21,000
in this environment.

21
00:01:21,000 --> 00:01:23,000
So it's a vector of 3 values.

22
00:01:23,000 --> 00:01:30,000
The sum or set of all those vectors together form the belief space.

23
00:01:30,000 --> 00:01:33,000
So particle filters approximate a posterior

24
00:01:33,000 --> 00:01:36,000
by many, many, many guesses,

25
00:01:36,000 --> 00:01:41,000
and the density of those guesses represents the posterior probability

26
00:01:41,000 --> 00:01:44,000
of being at a certain location.

27
00:01:44,000 --> 00:01:47,000
To illustrate this, let me run the video.

28
00:01:47,000 --> 00:01:51,000
You can see in a very short amount of time the range sensors,

29
00:01:51,000 --> 00:01:57,000
even though they're very noisy, force the particles to collect in the corridor.

30
00:01:57,000 --> 00:02:01,000
There's 2 symmetrical point dots--this one over here and this one over here--

31
00:02:01,000 --> 00:02:04,000
that come from the fact that the corridor itself is symmetric.

32
00:02:04,000 --> 00:02:08,000
But as the robot moves into the office, the symmetry is broken.

33
00:02:08,000 --> 00:02:11,000
This office looks very different from this office over here,

34
00:02:11,000 --> 00:02:14,000
and those particles die out.

35
00:02:14,000 --> 00:02:16,000
What's happening here?

36
00:02:16,000 --> 00:02:21,000
Intuitively speaking, each particle is a representation of a possible state,

37
00:02:21,000 --> 00:02:24,000
and the more consistent the particle with the measurement,

38
00:02:24,000 --> 00:02:29,000
the more the sonar measurement fits into the place where the particle says the robot is,

39
00:02:29,000 --> 00:02:31,000
the more likely it is to survive.

40
00:02:31,000 --> 00:02:34,000
This is the essence of particle filters.

41
00:02:34,000 --> 00:02:38,000
Particle filters use many particles to represent a belief,

42
00:02:38,000 --> 00:02:44,000
and they will let those particles survive in proportion to the measurement probability.

43
00:02:44,000 --> 00:02:49,000
And the measurement probability here is nothing else but the consistency

44
00:02:49,000 --> 00:02:53,000
of the sonar range measurements with the map of the environment

45
00:02:53,000 --> 00:02:55,000
given the particle place.

46
00:02:55,000 --> 00:02:57,000
Let me play this again.

47
00:02:57,000 --> 00:03:00,000
Here's the maze. The robot is lost in space.

48
00:03:00,000 --> 00:03:05,000
Again, you can see how within very few steps the particles

49
00:03:05,000 --> 00:03:10,000
consistent with the range measurements all accumulate in the corridor.

50
00:03:10,000 --> 00:03:14,000
As the robot hits the end of the corridor, only 2 particle clouds survive

51
00:03:14,000 --> 00:03:19,000
due to the symmetry of the corridor, and the particles finally die out.

52
00:03:19,000 --> 00:03:21,000
This algorithm is beautiful,

53
00:03:21,000 --> 00:03:27,000
and you can implement it in less than 10 lines of program code.

54
00:03:27,000 --> 00:03:32,000
So given all the difficulty of talking of probabilities and Bayes network

55
00:03:32,000 --> 00:03:36,000
and hidden Markov models, you will now find a way

56
00:03:36,000 --> 00:03:41,000
to implement one of the most amazing algorithms for filtering and state estimation

57
00:03:41,000 --> 00:03:45,000
in less than 10 lines of C code.

58
00:03:45,000 --> 99:59:59,999
Isn't that amazing?
