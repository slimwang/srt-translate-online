1
00:00:00,000 --> 00:00:05,790
There's three simplifications that we'll introduce to make analyzing algorithms easier for us.

2
00:00:05,790 --> 00:00:11,450
The first one is we will talk about a way that we can analyze algorithms without actually having

3
00:00:11,450 --> 00:00:15,120
to implement them, which we already that a lot of times.

4
00:00:15,120 --> 00:00:20,890
The second simplification is going to be that we're not going to consider all possible inputs

5
00:00:20,890 --> 00:00:27,100
that an algorithm can be run on, but we're going to only consider the worst possible inputs

6
00:00:27,100 --> 00:00:29,600
and I'll say more about what that means too.

7
00:00:29,600 --> 00:00:35,420
And finally, I'll introduce a notation to you called Big O-notation that will allow us to ignore

8
00:00:35,420 --> 00:00:40,110
details that for now we'll call unnecessary, so that we can really focus on the parts

9
00:00:40,110 --> 00:00:45,350
that are important for an algorithm and ignore those that we're not interested in.

10
00:00:45,350 --> 00:00:49,300
What do these simplifications actually look like or how are we going

11
00:00:49,300 --> 00:00:51,770
to go about those simplifications.

12
00:00:51,770 --> 00:00:55,650
First of all, to analyze an algorithm without implementing, we're going to consider

13
00:00:55,650 --> 00:00:59,810
a special kind of computer, which is not really a computer but a model that comes pretty close

14
00:00:59,810 --> 00:01:02,070
and that model is called the RAM.

15
00:01:02,070 --> 00:01:06,560
Looking at the worst possible inputs is a concept called worst-case running time,

16
00:01:06,560 --> 00:01:11,910
and finally to be able to ignore all unnecessary details, we'll use a type of notation

17
00:01:11,910 --> 00:01:16,280
called Big O-notation or Landau notation.

18
00:01:16,280 --> 99:59:59,999
So let's start out with our theoretical computer called the RAM.
