1
00:00:00,370 --> 00:00:03,566
It's time to expose the ingernexs
prostate cuff configmat and

2
00:00:03,566 --> 00:00:09,040
[INAUDIBLE] assert secrets to
secure monolith pot at runtime.

3
00:00:09,040 --> 00:00:11,540
Examine the secure monolith
pocket figuration file.

4
00:00:12,610 --> 00:00:15,345
This is our first multi-container pod.

5
00:00:15,345 --> 00:00:19,365
You'll see that we have the nginx and
monolith containers in here.

6
00:00:19,365 --> 00:00:22,325
These containers are deployed
in the same pod because they

7
00:00:22,325 --> 00:00:23,795
depend on each other.

8
00:00:23,795 --> 00:00:25,315
We've talked about the monolith before.

9
00:00:25,315 --> 00:00:26,345
So let's focus on nginx.

10
00:00:26,345 --> 00:00:29,785
There are two things
interesting to note here.

11
00:00:29,785 --> 00:00:32,785
One, we've added a graceful
shutdown to the container by

12
00:00:32,785 --> 00:00:34,445
adding a life cycle hook.

13
00:00:34,445 --> 00:00:37,150
So on shutdown,
we want to run that command.

14
00:00:37,150 --> 00:00:41,310
This will allow ingernex to do the right
thing, handle all remaining traffic and

15
00:00:41,310 --> 00:00:42,940
shutdown cleanly.

16
00:00:42,940 --> 00:00:45,490
Two, at the bottom of our
pod configuration file.

17
00:00:45,490 --> 00:00:48,010
You'll see we added
corresponding volumes.

18
00:00:48,010 --> 00:00:52,490
So that the internet's container Can
now access our secrets and configs.

19
00:00:52,490 --> 00:00:56,030
Create the secure model
of pod using kubectl.

20
00:00:57,070 --> 00:00:59,440
If we examine the secure-monolith pod,

21
00:00:59,440 --> 00:01:02,070
we'll notice that it has two
containers running inside of it now.

22
00:01:02,070 --> 00:01:04,970
Now that the secure-monolith
pod is up and

23
00:01:04,970 --> 00:01:09,150
running we can access it using
kubectl port-forward command.

24
00:01:09,150 --> 00:01:10,853
In a second terminal,

25
00:01:10,853 --> 00:01:17,352
let's forward local port 10443 to
443 of the secure mine with pod.

26
00:01:17,352 --> 00:01:20,700
Remember, 443 is what our Internet's
container is listening on.

27
00:01:22,020 --> 00:01:26,430
Use a curl command to test the http
end point in another terminal.

28
00:01:26,430 --> 00:01:29,000
And now we get a response
back from the server.

29
00:01:29,000 --> 00:01:32,510
Over the secure https connection.

30
00:01:32,510 --> 00:01:37,290
We can use the kuectl command to verify
traffic to the Internet container on

31
00:01:37,290 --> 00:01:39,370
the secure monolith part.

32
00:01:39,370 --> 00:01:41,708
The kubernetes ttl port
forwarding command is great for

33
00:01:41,708 --> 00:01:43,320
testing pods directly.

34
00:01:43,320 --> 00:01:47,000
But in production,
you want to expose pod using services.
