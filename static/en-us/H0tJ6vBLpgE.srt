1
00:00:00,000 --> 00:00:04,000
So we're using these token definitions in regular expressions

2
00:00:04,000 --> 00:00:08,000
to break down HTML and JavaScript into important words.

3
00:00:08,000 --> 00:00:12,000
As we've seen before, there can be lots of extra space

4
00:00:12,000 --> 00:00:14,000
between various tokens.

5
00:00:14,000 --> 00:00:19,000
We really want to skip or pass over spaces

6
00:00:19,000 --> 00:00:22,000
and possibly newline characters and tabs.

7
00:00:22,000 --> 00:00:24,000
More on that later.

8
00:00:24,000 --> 00:00:27,000
We do that using the same sort of token definition as before,

9
00:00:27,000 --> 00:00:31,000
so here I've made a regular expression that just matches a single space,

10
00:00:31,000 --> 00:00:35,000
but instead of returning the token, we pass it by.

11
00:00:35,000 --> 00:00:37,000
This is the power.

12
00:00:37,000 --> 00:00:40,000
Let's test out our knowledge with a quiz.

13
00:00:40,000 --> 00:00:43,000
We've already seen how to do left and right angle bracket sorts of tokens.

14
00:00:43,000 --> 00:00:46,000
We've taken a look at strings before.

15
00:00:46,000 --> 00:00:51,000
And now let's do words, which are almost everything else on a web page.

16
00:00:51,000 --> 00:00:54,000
Let's say that we want a word to be any number of characters

17
00:00:54,000 --> 00:00:58,000
except a left angle bracket, a right angle bracket,

18
00:00:58,000 --> 00:01:01,000
or a space, and here I really mean the single character

19
00:01:01,000 --> 00:01:05,000
pressing the space bar, not this 5-character word, but it's hard to write out.

20
00:01:05,000 --> 00:01:08,000
And when you're writing your function to match word tokens,

21
00:01:08,000 --> 00:01:12,000
you should leave the value unchanged.

22
00:01:12,000 --> 99:59:59,999
Submit a definition for t_word using the interpreter.
