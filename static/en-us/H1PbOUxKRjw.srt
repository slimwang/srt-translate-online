1
00:00:00,280 --> 00:00:03,920
So let's return to our memory management subsystem.

2
00:00:03,920 --> 00:00:06,810
And of course the whole idea of objectization

3
00:00:06,810 --> 00:00:09,740
of the memory management subsystem, or any subsystem

4
00:00:09,740 --> 00:00:13,630
for that matter, is to increase the concurrency for

5
00:00:13,630 --> 00:00:16,880
system services that we're going to offer for

6
00:00:16,880 --> 00:00:20,170
the threads that are executing on the processors.

7
00:00:20,170 --> 00:00:22,330
So in the memory management subsystem, the main

8
00:00:22,330 --> 00:00:25,320
service that we're offering is the page fault service.

9
00:00:25,320 --> 00:00:28,160
And lets say that in this example, there are

10
00:00:28,160 --> 00:00:31,130
two threads T1 and T2. Let's assume that they've

11
00:00:31,130 --> 00:00:34,370
been mapped to the same processor, which means with

12
00:00:34,370 --> 00:00:38,470
the objectization that I described to you they are sharing

13
00:00:38,470 --> 00:00:40,910
a process object. So if T1 incurs a page

14
00:00:40,910 --> 00:00:43,610
fault it's going to through the process object to the

15
00:00:43,610 --> 00:00:46,990
region that corresponds to this particular page fault. And

16
00:00:46,990 --> 00:00:50,450
now let's think about what needs to happen in order

17
00:00:50,450 --> 00:00:53,410
to service this page fault. We might do hierarchical

18
00:00:53,410 --> 00:00:56,550
lockings or for instance if I want to do

19
00:00:56,550 --> 00:00:59,870
some modifications to the region object to indicate that

20
00:00:59,870 --> 00:01:03,420
I'm modifying the data structure that corresponds to this

21
00:01:03,420 --> 00:01:05,950
portion of the address piece, I might say that

22
00:01:05,950 --> 00:01:08,850
well, let's lock the process object. Let's lock the

23
00:01:08,850 --> 00:01:12,000
region object that it corresponds to. Let, let's lock

24
00:01:12,000 --> 00:01:16,460
the FCM object that is backed by this region.

25
00:01:16,460 --> 00:01:20,200
And let's lock the COR object that are actually going to

26
00:01:20,200 --> 00:01:22,600
do the I/O for me. If I do this, and now

27
00:01:22,600 --> 00:01:26,260
let's say the operating system is incurring a page fault

28
00:01:26,260 --> 00:01:30,400
for this second thread P T2. And let's say that this

29
00:01:30,400 --> 00:01:33,370
page fault because it is happening on the same processor,

30
00:01:33,370 --> 00:01:36,650
it shares the same process object, but maybe this page fault

31
00:01:36,650 --> 00:01:38,430
is not for this region, but it is for a

32
00:01:38,430 --> 00:01:41,600
different region, let's say region 2. But if we have locked

33
00:01:41,600 --> 00:01:45,520
the process object in servicing this page fault,

34
00:01:45,520 --> 00:01:48,640
then we cannot get past this process object, because

35
00:01:48,640 --> 00:01:51,590
the lock is held on behalf of servicing

36
00:01:51,590 --> 00:01:54,440
this particular page fault. And therefore, the operating system

37
00:01:54,440 --> 00:01:57,860
cannot process this page fault, even though you

38
00:01:57,860 --> 00:02:00,940
may have multiple cores on the processor. And these

39
00:02:00,940 --> 00:02:03,170
threads are executing on different cores of the same

40
00:02:03,170 --> 00:02:06,650
processor. You don't have the concurrency that you wanted.

41
00:02:06,650 --> 00:02:10,560
So this hierarchical locking kills concurrency and that's a

42
00:02:10,560 --> 00:02:13,730
bad idea. So, what you don't want to do is

43
00:02:13,730 --> 00:02:17,260
do this hierarchical locking. But it seems like, in order

44
00:02:17,260 --> 00:02:19,640
to service this page fault, if I want integrity for

45
00:02:19,640 --> 00:02:22,250
these objects, I want to be able to lock

46
00:02:22,250 --> 00:02:26,160
the critical data structures. But if the path that is

47
00:02:26,160 --> 00:02:29,010
taken by this page fault is different from the path

48
00:02:29,010 --> 00:02:31,660
that is taken by this page fault, why lock this

49
00:02:31,660 --> 00:02:33,500
object in the first place? So we don't have to

50
00:02:33,500 --> 00:02:36,600
lock this object because the path taken by the page

51
00:02:36,600 --> 00:02:40,790
fault service is different from this, and so hierarchical locking

52
00:02:40,790 --> 00:02:44,240
is a bad idea. It kills concurrency. But you do need

53
00:02:44,240 --> 00:02:47,680
integrity of this process object, and in particular if the

54
00:02:47,680 --> 00:02:51,060
reason why we locked this process object is in some sense

55
00:02:51,060 --> 00:02:54,470
to ensure that this process object doesn't go away. How

56
00:02:54,470 --> 00:02:56,680
can it go away? Well, one of the things that can

57
00:02:56,680 --> 00:03:00,010
happen under the covers while page fault service is

58
00:03:00,010 --> 00:03:03,860
happening, there could be a decision to migrate a process

59
00:03:03,860 --> 00:03:06,880
from one processor to another processor. And if that

60
00:03:06,880 --> 00:03:10,540
happens, then the process object may be migrated. And that's

61
00:03:10,540 --> 00:03:12,410
the reason that you have to worry about the

62
00:03:12,410 --> 00:03:15,820
integrity of this process object. When something is happening that

63
00:03:15,820 --> 00:03:18,970
is going to modify something in this process object, you

64
00:03:18,970 --> 00:03:22,800
don't want this process object to go away. That's actually

65
00:03:22,800 --> 00:03:25,920
to do with existence guarantee. So, what we're

66
00:03:25,920 --> 00:03:28,130
going to do is, we're going to associate a

67
00:03:28,130 --> 00:03:31,540
reference count with the object, and rather than

68
00:03:31,540 --> 00:03:35,240
do hierarchical locking, what we're going to do is

69
00:03:35,240 --> 00:03:39,980
put an existence guarantee. Every time this object

70
00:03:39,980 --> 00:03:42,200
is being used, there's a reference count that is

71
00:03:42,200 --> 00:03:45,410
associated with that, and the reference count is

72
00:03:45,410 --> 00:03:48,000
a way of guaranteeing the existence of this object.

73
00:03:48,000 --> 00:03:51,720
So, let's come back to this example again. So if T1

74
00:03:51,720 --> 00:03:54,030
has a page fault, it first go to this, goes to

75
00:03:54,030 --> 00:03:57,210
this process object before it goes to the region object, because

76
00:03:57,210 --> 00:04:00,270
this particular page fault is going to be serviced through this region

77
00:04:00,270 --> 00:04:02,910
object path, but it is not going to hold lock on

78
00:04:02,910 --> 00:04:05,080
this object. What it is going to do is, it is

79
00:04:05,080 --> 00:04:08,850
going to increment a reference count for this object, saying that

80
00:04:08,850 --> 00:04:12,740
this object is in use, please don't get rid of it. And,

81
00:04:12,740 --> 00:04:16,529
subsequently, if this page fault happens, accesses the same

82
00:04:16,529 --> 00:04:19,589
process object, it's also going to increment the reference count.

83
00:04:19,589 --> 00:04:21,800
It is not going to lock this object because

84
00:04:21,800 --> 00:04:24,440
its path is different. It is going through this path

85
00:04:24,440 --> 00:04:26,750
in order to service its page fault, which is

86
00:04:26,750 --> 00:04:30,330
for a completely different page. The whole point of having

87
00:04:30,330 --> 00:04:33,940
a reference count is now, if let's say some

88
00:04:33,940 --> 00:04:38,200
other entity in the operating system, such as a process

89
00:04:38,200 --> 00:04:41,850
migration facility that says, I need to balance the

90
00:04:41,850 --> 00:04:46,420
load on this multiprocessor by moving some process from

91
00:04:46,420 --> 00:04:48,610
this processor to a different one. If it looks

92
00:04:48,610 --> 00:04:50,250
at this process object and it will say well,

93
00:04:50,250 --> 00:04:52,540
I cannot touch this process object, because its reference

94
00:04:52,540 --> 00:04:55,460
count is not zero. Which means that this process

95
00:04:55,460 --> 00:05:00,640
object is currently servicing some requests locally. And that

96
00:05:00,640 --> 00:05:03,490
is the way we can, we can ensure the

97
00:05:03,490 --> 00:05:06,990
existence guarantee for this objects and integrity of

98
00:05:06,990 --> 00:05:09,880
this, of this object. And that can allow

99
00:05:09,880 --> 00:05:12,100
us to get rid of hierarchical locking and

100
00:05:12,100 --> 00:05:15,470
promote concurrency for service activities that can be

101
00:05:15,470 --> 00:05:17,900
provided by the operating system for the same

102
00:05:17,900 --> 00:05:20,840
service, but where there is concurrency that is

103
00:05:20,840 --> 00:05:23,980
possible. In this case page fault service that

104
00:05:23,980 --> 00:05:28,750
can be happening in parallel for independent regions of

105
00:05:28,750 --> 00:05:32,730
the address space touched by the threads that are running on the

106
00:05:32,730 --> 00:05:37,280
same processor, but executing on different cores perhaps of the same processor.
