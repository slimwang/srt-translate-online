1
00:00:00,310 --> 00:00:03,000
Now it's not very practical to
write down every running time

2
00:00:03,000 --> 00:00:08,039
function exactly, so computer scientists
use various levels of approximation.

3
00:00:08,039 --> 00:00:11,150
For complexity,
we use asymptotic analysis.

4
00:00:11,150 --> 00:00:12,966
I'm going to do a very
brief review here, but

5
00:00:12,966 --> 00:00:16,196
if you haven't seen this idea before,
you should take a few minutes to study

6
00:00:16,196 --> 00:00:18,334
it on your own before
proceeding with the lesson.

7
00:00:18,334 --> 00:00:23,377
We define big O of a function
F to be the set of functions

8
00:00:23,377 --> 00:00:29,203
G where there are numbers C and
big N such that for all little N,

9
00:00:29,203 --> 00:00:34,161
at least as big as big N,
G of N is at most C times F of N.

10
00:00:34,161 --> 00:00:39,041
In other words,
C times F of N is at least G of N for

11
00:00:39,041 --> 00:00:41,850
all sufficiently large N.

12
00:00:41,850 --> 00:00:45,324
Even though we've
defined big O as a set,

13
00:00:45,324 --> 00:00:52,050
we write g(n) = O (f(n)) instead
of using the inclusion sign.

14
00:00:52,050 --> 00:00:54,560
We also say that G is order F.

15
00:00:55,600 --> 00:00:57,980
This definition can be
a little confusing.

16
00:00:57,980 --> 00:01:01,770
But it should feel like the definition
of a limit from your calculus class.

17
00:01:01,770 --> 00:01:05,940
In fact, we can re-state this
condition to say that the ratio

18
00:01:05,940 --> 00:01:10,930
of G over F converges to
a constant under the lim soup.

19
00:01:10,930 --> 00:01:12,820
An example also, helps.

20
00:01:12,820 --> 00:01:18,030
Take this function, g of n is equal
to n squared minus n plus ten.

21
00:01:18,030 --> 00:01:22,830
We can argue that this is order n
squared, by choosing c is equal to one.

22
00:01:22,830 --> 00:01:24,210
And big N equal to ten.

23
00:01:25,660 --> 00:01:29,870
For every little n greater than ten,
N squared,

24
00:01:29,870 --> 00:01:34,420
this red line here, is bigger than
the function g, the blue line.

25
00:01:34,420 --> 00:01:37,570
We also could have chosen
c equal to ten and

26
00:01:37,570 --> 00:01:41,170
big N equal to one again in that case.

27
00:01:41,170 --> 00:01:44,870
The red line, the c times n squared,

28
00:01:44,870 --> 00:01:48,640
is bigger than the function g,
the blue line.

29
00:01:48,640 --> 00:01:52,140
Note that the big O notation does
not have to create a tight bound.

30
00:01:52,140 --> 00:01:56,480
Thus, g(n) is also order n squared,

31
00:01:56,480 --> 00:02:00,760
setting c equal to 1 and
N equal to 3 works for this.
