1
00:00:00,260 --> 00:00:04,410
So the simple barrier operation doesn't work entirely.

2
00:00:04,410 --> 00:00:07,320
And we look now at why it doesn't work.

3
00:00:07,320 --> 00:00:10,670
Let's consider only two cores. Core 0, which we

4
00:00:10,670 --> 00:00:13,750
will show in blue color what it's doing. And

5
00:00:13,750 --> 00:00:15,900
core 1, which we will show in this

6
00:00:15,900 --> 00:00:19,230
color what it's doing. What they're both doing initially

7
00:00:19,230 --> 00:00:22,390
is doing something before they arrive to the barrier.

8
00:00:22,390 --> 00:00:26,050
And let's say that Core 0 arrives here first.

9
00:00:26,050 --> 00:00:32,619
So what Core 0 does, is resets release to 0, increments the count to 1, unlocks

10
00:00:32,619 --> 00:00:35,290
the lock, checks whether the count is equal

11
00:00:35,290 --> 00:00:38,100
to 2, and starts spinning, waiting for the

12
00:00:38,100 --> 00:00:44,392
release to become 1. So now, release is still 0 because we just reset it. And

13
00:00:44,392 --> 00:00:51,390
core 0 is going to to stay here spinning. So, what core 0 does is it essentially

14
00:00:51,390 --> 00:00:57,580
does a load word of release, sees 0, and will check again. And it keeps

15
00:00:57,580 --> 00:01:00,535
doing that. Now, let's see what happens

16
00:01:00,535 --> 00:01:04,269
when core 1 arrives. Normally, what should happen

17
00:01:04,269 --> 00:01:06,580
is, core 1 arrives, doesn't do this

18
00:01:06,580 --> 00:01:09,390
because count is now 1. Increments the count,

19
00:01:09,390 --> 00:01:16,610
exits the critical section. Sees that the count is equal to 2, resets the count,

20
00:01:16,610 --> 00:01:19,790
sets the release to 1, and now core

21
00:01:19,790 --> 00:01:23,920
1 proceeds past the barrier. What should happen

22
00:01:23,920 --> 00:01:28,810
now is core 0 should see this release that we just set to 1. And also proceed

23
00:01:28,810 --> 00:01:35,251
past the barrier. So, what should happen is really that we set the release to 1

24
00:01:35,251 --> 00:01:38,650
here and core 0 sees that. Exits the

25
00:01:38,650 --> 00:01:41,730
barrier and from then, everything will actually be correct.

26
00:01:41,730 --> 00:01:44,166
But let's say that core 0 has been

27
00:01:44,166 --> 00:01:48,702
checking the release, however, when the store happens, core

28
00:01:48,702 --> 00:01:52,066
0 is delayed. For example, it's executing some sort

29
00:01:52,066 --> 00:01:54,434
of an interrupt function so for a while it's

30
00:01:54,434 --> 00:01:56,866
suspended in this place in the code and cannot

31
00:01:56,866 --> 00:02:00,180
read the release fast enough. In that case, we

32
00:02:00,180 --> 00:02:03,310
don't have this, and core 0 is still stuck

33
00:02:03,310 --> 00:02:06,775
here. In a correct barrier implementation, core 0 will

34
00:02:06,775 --> 00:02:11,260
eventually, at some point, it will return from the interrupt, read the release

35
00:02:11,260 --> 00:02:16,158
that is 1, and proceed. However, what happens if core 0

36
00:02:16,158 --> 00:02:21,246
is waiting here while core 1, after releasing and exiting the

37
00:02:21,246 --> 00:02:26,526
barrier, does very little work and then comes back to the barrier

38
00:02:26,526 --> 00:02:31,820
again? It sees that the count is 0, because it reset

39
00:02:31,820 --> 00:02:34,270
it to 0 when it was releasing the barrier.

40
00:02:34,270 --> 00:02:37,038
And sets the release to 1. And now it writes

41
00:02:37,038 --> 00:02:39,918
0 to the release variable and now, even if core

42
00:02:39,918 --> 00:02:42,726
0 checks the release here and sees what it is,

43
00:02:42,726 --> 00:02:45,740
it's going to see the 0. So, core 0 is

44
00:02:45,740 --> 00:02:48,800
going to proceed to wait here for a very long

45
00:02:48,800 --> 00:02:54,322
time. Meanwhile, core 1 increments the count to 1. Checks

46
00:02:54,322 --> 00:02:56,935
if it's equal to 2 for the second iteration of

47
00:02:56,935 --> 00:02:59,960
the barrier. It's not 2, so core 1 is

48
00:02:59,960 --> 00:03:03,445
now going to spin waiting for somebody to release

49
00:03:03,445 --> 00:03:06,845
the second instance of the barrier while core 0

50
00:03:06,845 --> 00:03:09,820
is going to be waiting there, in the first

51
00:03:09,820 --> 00:03:14,454
instance of the barrier, and never being released. So

52
00:03:14,454 --> 00:03:16,562
the only thing that can really core 1 now

53
00:03:16,562 --> 00:03:18,670
is if core 0 somehow left and entered the

54
00:03:18,670 --> 00:03:22,072
second instance of the barrier. The only thing that

55
00:03:22,072 --> 00:03:26,360
can release core 0, however, is if somebody comes and releases here, but

56
00:03:26,360 --> 00:03:30,030
that's not going to be core 2. So, now we have a deadlock situation.
