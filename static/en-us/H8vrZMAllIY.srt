1
00:00:00,300 --> 00:00:02,110
So the goal for the rest of this unit

2
00:00:02,110 --> 00:00:04,910
is to modify our search engine code to implement

3
00:00:04,910 --> 00:00:09,450
the PageRank algorithm. We have one little problem. PageRank

4
00:00:09,450 --> 00:00:12,340
is a registered trademark of Google. So we're not going to

5
00:00:12,340 --> 00:00:15,110
call our algorithm PageRank, even though it will do

6
00:00:15,110 --> 00:00:20,340
the same thing. We'll call it URank. The first thing

7
00:00:20,340 --> 00:00:21,860
we need to be able to do, to implement

8
00:00:21,860 --> 00:00:24,930
this ranking algorithm, is keep track of the link graph.

9
00:00:26,190 --> 00:00:31,500
So our popularity of pages depends on the link structure. So that means, we need

10
00:00:31,500 --> 00:00:37,620
to keep track of, what pages link to what pages. So, for each link, there is

11
00:00:37,620 --> 00:00:40,610
a connection between pages and we can think

12
00:00:40,610 --> 00:00:43,410
of that, as a graph. Abstractly, a graph

13
00:00:43,410 --> 00:00:45,020
is just a set of nodes, we'll draw

14
00:00:45,020 --> 00:00:47,900
those as circles, with edges between the nodes.

15
00:00:49,930 --> 00:00:53,150
And because our edges go one way, just like

16
00:00:53,150 --> 00:00:55,350
links in a page, we call this a directed

17
00:00:55,350 --> 00:00:59,170
graph. So, in order to represent our web link

18
00:00:59,170 --> 00:01:03,150
structure we need to build the directed graph. The pages

19
00:01:03,150 --> 00:01:05,910
in the graph are the nodes. For each page,

20
00:01:05,910 --> 00:01:08,850
we need to keep track of the edges that connect

21
00:01:08,850 --> 00:01:11,090
that node to other nodes. And so the way

22
00:01:11,090 --> 00:01:15,030
that we're going to do this is to keep a dictionary.

23
00:01:16,330 --> 00:01:18,700
So we're going to have a dictionary where the entries

24
00:01:18,700 --> 00:01:21,200
in the dictionary are the node, which is the URL,

25
00:01:21,200 --> 00:01:25,190
that's the page. And for each URL, we'll have a

26
00:01:25,190 --> 00:01:27,440
list of all the pages that it links to. So

27
00:01:27,440 --> 00:01:31,430
if this was say node a, and these were nodes

28
00:01:31,430 --> 00:01:33,990
b, c, and d, our entry for node a would

29
00:01:33,990 --> 00:01:37,750
contain the list b, c, d. And our entry for

30
00:01:37,750 --> 00:01:41,380
node b, well, there are no edges out of b,

31
00:01:41,380 --> 00:01:47,690
so it would be an empty list. And finishing the example, C has an out link to

32
00:01:47,690 --> 00:01:52,560
one node, and D has no out links. So

33
00:01:52,560 --> 00:01:54,480
that's our goal. We want to build a structure

34
00:01:54,480 --> 00:01:57,100
like this that shows the structure of the

35
00:01:57,100 --> 00:01:59,840
webpages that we crawl, and we see that structure

36
00:01:59,840 --> 00:02:03,530
because we're following the links in our crawler. So

37
00:02:03,530 --> 00:02:06,830
our goal is to modify the crawl web procedure

38
00:02:06,830 --> 00:02:10,139
that we defined at the end of Unit Five. And to

39
00:02:10,139 --> 00:02:13,940
modify it so that instead of just producing an index, it

40
00:02:13,940 --> 00:02:17,340
also produces a graph. So we're going to modify crawl web. It's

41
00:02:17,340 --> 00:02:20,730
going to still take a seed page as its start. But what

42
00:02:20,730 --> 00:02:23,560
it's going to produce now is both an index and a

43
00:02:23,560 --> 00:02:26,960
graph. And the graph is a structure that gives a mapping

44
00:02:26,960 --> 00:02:29,960
from each node to the pages that it links to. So

45
00:02:29,960 --> 00:02:31,690
let's look at the code that we had at the end of

46
00:02:31,690 --> 00:02:34,900
Unit Five and see how we need to change that. So

47
00:02:34,900 --> 00:02:37,820
here's the code, that we had at the end of unit five,

48
00:02:37,820 --> 00:02:41,370
for crawling the web. And as a reminder, we're keeping track

49
00:02:41,370 --> 00:02:44,370
of the pages left to crawl in the list tocrawl starting with

50
00:02:44,370 --> 00:02:46,740
the seed page, and we're building up the index as a

51
00:02:46,740 --> 00:02:49,910
dictionary. And as long as there are pages left to crawl, we

52
00:02:49,910 --> 00:02:53,740
go through the y loop, which finds a page to crawl,

53
00:02:53,740 --> 00:02:56,590
popping the list of pages to crawl. As long as this one,

54
00:02:56,590 --> 00:02:59,060
we haven't crawled before, it gets the content from that

55
00:02:59,060 --> 00:03:01,640
page. It adds it to the index. It finds all the

56
00:03:01,640 --> 00:03:05,400
links, using get_all_links, passing in the content on the page and

57
00:03:05,400 --> 00:03:08,660
unions those with tocrawl to update the tocrawl list and then

58
00:03:08,660 --> 00:03:10,830
it appends this page to the list of pages, that have

59
00:03:10,830 --> 00:03:15,130
already been crawled. So to change this to build a graph,

60
00:03:15,130 --> 00:03:18,070
we're going to keep most of the code the same. In addition

61
00:03:18,070 --> 00:03:21,610
to producing just index, we're going to produce a graph. And the

62
00:03:21,610 --> 00:03:24,180
graph is also going to be a dictionary. And the reason the

63
00:03:24,180 --> 00:03:26,990
graph is a dictionary is that the mapping from nodes, which

64
00:03:26,990 --> 00:03:30,300
are urls, to the list of edges that go out from

65
00:03:30,300 --> 00:03:34,690
that node. So we'll create the graph as an empty dictionary.

66
00:03:34,690 --> 00:03:36,630
And as we find new pages, we're going to add them to

67
00:03:36,630 --> 00:03:39,980
the graph. And we're going to also change the return to return

68
00:03:39,980 --> 00:03:43,500
both the index and the graph. I'm going to make one more

69
00:03:43,500 --> 00:03:46,640
change before we give you a quiz. And the change I'm

70
00:03:46,640 --> 00:03:49,840
going to make is, instead of calling get_ all_links here,

71
00:03:49,840 --> 00:03:53,550
Since both the graph building and the tocrawl list depend

72
00:03:53,550 --> 00:03:56,110
on knowing all the links, we're going to create a

73
00:03:56,110 --> 00:03:59,710
new variable. And we'll assign the result of get_all_links(content) to

74
00:03:59,710 --> 00:04:02,970
that variable. That means we can use those links

75
00:04:02,970 --> 00:04:05,990
as the input to content. But we can also use

76
00:04:05,990 --> 00:04:10,110
them to build the graph. And I'm going to leave

77
00:04:10,110 --> 00:04:11,920
the line that we need to build a graph for

78
00:04:11,920 --> 00:04:14,650
you to complete. So we'll make that a quiz, to finish

79
00:04:14,650 --> 00:04:18,209
this code. Write the line that we need to update the graph.
