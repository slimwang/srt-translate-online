1
00:00:00,000 --> 00:00:03,000
One of the other big architecture pieces 
we've added to help us scale

2
00:00:03,000 --> 00:00:05,000
was this notion of a precomputed cache.

3
00:00:05,000 --> 00:00:07,323
We found ourselves running these queries 
to generate the hot page

4
00:00:07,323 --> 00:00:09,000
for Reddit over and over and over again.

5
00:00:09,000 --> 00:00:13,000
You may cache it for a minute but then once that 
minute expired we had to recalculate it.

6
00:00:13,000 --> 00:00:16,000
We had a job--a kind of job that would 
run and just compute it

7
00:00:16,000 --> 00:00:19,000
and then put the stored value in memcached--
that worked okay

8
00:00:19,000 --> 00:00:22,000
but then we had to do it, we 
had all of our users pages.

9
00:00:22,000 --> 00:00:24,000
Every user had their own listings of 
things they've submitted and liked

10
00:00:24,000 --> 00:00:28,692
and their top things, and every Reddit had a new 
page and a hot page and a bunch of different sorts

11
00:00:28,692 --> 00:00:30,000
So we stared precomputing everything.

12
00:00:30,000 --> 00:00:34,000
The way we did that is that we have 
this whole other database stack.

13
00:00:34,000 --> 00:00:37,000
These are the replicas of the link database--basically, 
more link databases.

14
00:00:37,000 --> 00:00:39,000
They could lag a little bit. It wasn't a big deal.

15
00:00:39,000 --> 00:00:43,000
Every time a vote would come in, we put in this queue--queue is just a list of things to be done--

16
00:00:43,000 --> 00:00:46,000
and we have this machine that basically 
manages huge list of things,

17
00:00:46,000 --> 00:00:49,000
and we had a couple of other machines 
that we called the precompute servers.

18
00:00:49,000 --> 00:00:53,000
What these things would do is they take jobs 
off the queue. This link has been voted on.

19
00:00:53,000 --> 00:00:55,415
Actually, what the apps would do is 
when a link was voted on,

20
00:00:55,415 --> 00:00:58,000
they would add a number of jobs to the queue.

21
00:00:58,000 --> 00:01:03,000
The jobs might be to recompute Reddit's front page, 
recompute this user's liked page,

22
00:01:03,000 --> 00:01:06,000
recompute this user's top page, 
recompute Reddit's top page.

23
00:01:06,000 --> 00:01:09,000
There are all sorts of different listings 
that are affected by a particular vote.

24
00:01:09,000 --> 00:01:11,000
These machines would pull off these jobs

25
00:01:11,000 --> 00:01:13,000
and then they would run those 
queries against the database.

26
00:01:13,000 --> 00:01:16,000
They would just mercilessly as fast as 
they could take a job off the queue

27
00:01:16,000 --> 00:01:18,000
run the query against these databases.

28
00:01:18,000 --> 00:01:22,000
These databases were really, really hot 
and had no real-time requests.

29
00:01:22,000 --> 00:01:25,000
No request from the Internet actually ever 
touched these precompute machines.

30
00:01:25,000 --> 00:01:28,000
It's only these guys, these precompute servers would 
touch these preocompute databases.

31
00:01:28,000 --> 00:01:31,000
When the job was done running, we would take 
the results and store them to memcached.

32
00:01:31,000 --> 00:01:36,000
That way almost every page you looked at on Reddit 
would be fetched out from memcached.

33
00:01:36,000 --> 00:01:40,000
There are very few things you could do on Reddit that would actually directly manipulate a database.

34
00:01:40,000 --> 00:01:43,000
Once we got to that point of scaling, 
things got a lot easier.

35
00:01:43,000 --> 00:01:48,000
These are really just kind of the last resort 
primary sources of data,

36
00:01:48,000 --> 00:01:51,000
but any data you can access on Reddit in real time 
is actually served out of memcache.

37
00:01:51,000 --> 00:01:56,000
Every single listing is precomputed and stored in memcached for Reddit on the whole site.

38
00:01:56,000 --> 00:01:58,000
This is the reason why now you can't go back beyond

39
00:01:58,000 --> 00:02:00,000
about a thousand links on any particular listing.

40
00:02:00,000 --> 00:02:03,000
It used to be, you can go to Reddit's front page and 
hit next, next, next, next, next

41
00:02:03,000 --> 00:02:06,000
and then go all the way back to the beginning of time, 
which will just really, really trounce

42
00:02:06,000 --> 00:02:10,000
our databases, do a lot of damage, slow the site down, 
etc, etc--you can't do that anymore.

43
00:02:10,000 --> 00:02:14,000
We only store the top thousand for each sort, 
which is one of the limitations of doing this

44
00:02:14,000 --> 00:02:17,000
precompute thing, but on the upside 
the cycle is very, very fast.

45
00:02:17,000 --> 00:02:22,000
There are very few legitimate reasons to go all the way back to the beginning of time on Reddit anyway.

46
00:02:22,000 --> 00:02:26,000
This worked out really nicely, and the site to this day 
still has this general structure,

47
00:02:26,000 --> 00:02:30,000
although a lot of the technologies have changed, and 
that's what we're going to talk to Neil about.
