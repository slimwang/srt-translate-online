1
00:00:00,300 --> 00:00:02,680
So the developer and
I have written all of these rules.

2
00:00:02,680 --> 00:00:05,460
Good job by the way, and
the rules are in the app.

3
00:00:05,460 --> 00:00:07,740
>> Well that's a load off my
shoulders while I get packed.

4
00:00:07,740 --> 00:00:09,830
>> Wait up.
You didn't let me finish my sentence.

5
00:00:09,830 --> 00:00:12,296
All of your hulabaloo about
security has me paranoid.

6
00:00:12,296 --> 00:00:14,848
>> You're welcome.

7
00:00:14,848 --> 00:00:15,364
>> Mm.

8
00:00:15,364 --> 00:00:16,250
>> Okay.
Okay.

9
00:00:16,250 --> 00:00:18,230
I guess it is my fault you're
on this security kick.

10
00:00:18,230 --> 00:00:19,640
What's the problem?

11
00:00:19,640 --> 00:00:21,910
>> Here I'll walk you through it.

12
00:00:21,910 --> 00:00:25,990
Our decision to use email as the key for
the user is causing a lot of issues.

13
00:00:25,990 --> 00:00:30,165
This boils down to the fact that
the only secure and verified method for

14
00:00:30,165 --> 00:00:34,425
knowing who a person is in the security
rules, is using the off dot UID.

15
00:00:34,425 --> 00:00:38,050
You don't automatically have any sort
of email associated with the account.

16
00:00:38,050 --> 00:00:42,080
And this is of course why we made
our mapping node from UID to email.

17
00:00:42,080 --> 00:00:47,090
Unfortunately, this connection here
is a very hard thing to secure.

18
00:00:47,090 --> 00:00:48,640
Let me walk you through an example.

19
00:00:48,640 --> 00:00:50,140
So, we have our hacker here.

20
00:00:50,140 --> 00:00:53,690
She has no sort of special permissions
to access our Firebase app.

21
00:00:53,690 --> 00:00:55,650
But she is JavaScript and
Firebase savvy,

22
00:00:55,650 --> 00:00:59,770
so she could execute some arbitrary
JavaScript code on our app.

23
00:00:59,770 --> 00:01:02,850
And she could write pretty much
any JavaScript code that she likes

24
00:01:02,850 --> 00:01:06,160
as long as our database rules permit
her to either do the read or the right.

25
00:01:06,160 --> 00:01:08,130
So let's take a look at the rules
that we have right now for

26
00:01:08,130 --> 00:01:09,200
the UID mapping node.

27
00:01:10,490 --> 00:01:14,770
Our rules say that anyone logged in can
read a single UID from the UID mappings

28
00:01:14,770 --> 00:01:18,590
node and if you are the user
who's associated with that node,

29
00:01:18,590 --> 00:01:19,980
you can write data to it.

30
00:01:19,980 --> 00:01:22,270
As long as you're adding data for
the first time.

31
00:01:22,270 --> 00:01:25,710
And we further have a validate rule
just to make sure that the value is

32
00:01:25,710 --> 00:01:27,860
in the form of the encoded email.

33
00:01:27,860 --> 00:01:28,580
Okay.

34
00:01:28,580 --> 00:01:32,930
So the first thing that our hacker could
do is execute a create account command.

35
00:01:32,930 --> 00:01:35,480
The first issue that
I'm seeing here is that

36
00:01:35,480 --> 00:01:37,760
since she's doing this
outside of our Android app.

37
00:01:37,760 --> 00:01:40,750
She could basically bypass
that whole nice reset password

38
00:01:40,750 --> 00:01:42,560
logon flow that we have.

39
00:01:42,560 --> 00:01:45,720
So there's nothing that's really forcing
her to prove that she actually owns

40
00:01:45,720 --> 00:01:47,720
the email that she claims that she owns.

41
00:01:47,720 --> 00:01:49,750
But she calls this create user command.

42
00:01:49,750 --> 00:01:51,020
And this should work.

43
00:01:51,020 --> 00:01:54,110
The Firebase backend will
return to her a you UID.

44
00:01:54,110 --> 00:01:57,890
So now she has a UID that she
has legitimate access to.

45
00:01:57,890 --> 00:02:02,410
So, here's a sample of a UID mappings
table, and the question is, is there

46
00:02:02,410 --> 00:02:07,210
anything in the rules that stops the
hacker from making an entry like this?

47
00:02:07,210 --> 00:02:11,480
Basically an entry where she uses
the legitimate UID that she got for

48
00:02:11,480 --> 00:02:15,340
herself and then associates it
with some email such as my email.

49
00:02:16,370 --> 00:02:17,540
>> No I guess not.

50
00:02:17,540 --> 00:02:20,680
After all the only rule is that
they're adding an entry associate with

51
00:02:20,680 --> 00:02:23,300
their own user and that's a new entry.

52
00:02:23,300 --> 00:02:26,680
So yes, that seems bad, but
what does it mean for the app?

53
00:02:26,680 --> 00:02:29,640
>> It means terrible, terrible things.

54
00:02:29,640 --> 00:02:31,420
Here, let's take a look at the database.

55
00:02:31,420 --> 00:02:34,050
Literally every rule trusts
that the UID mapping

56
00:02:34,050 --> 00:02:36,760
tells you what email
the UID is associated with.

57
00:02:36,760 --> 00:02:40,510
So if we can hack that mapping it
essentially gives our hacker complete

58
00:02:40,510 --> 00:02:43,180
access to all of my shopping lists.

59
00:02:43,180 --> 00:02:45,240
And that's a pretty major issue.

60
00:02:45,240 --> 00:02:48,090
So again,
issue number one is that there's

61
00:02:48,090 --> 00:02:51,190
not really a real way to
enforce our reset login flow

62
00:02:51,190 --> 00:02:55,470
if somebody is executing code outside of
the Shopping List plus plus Android app.

63
00:02:55,470 --> 00:02:59,930
And issue number two is that with
just a little bit of JavaScript code

64
00:02:59,930 --> 00:03:02,340
a hacker could easily
impersonate another user.

65
00:03:02,340 --> 00:03:06,193
And that's because our UID mappings
table is currently insecure and

66
00:03:06,193 --> 00:03:07,988
it's actually pretty tricky or

67
00:03:07,988 --> 00:03:11,258
potentially impossible to
secure in our security rules.

68
00:03:11,258 --> 00:03:13,847
>> And you're launching version .5 when?

69
00:03:13,847 --> 00:03:14,426
>> In a week.

70
00:03:14,426 --> 00:03:16,356
[SOUND]
>> Sweet Nexus that's my ride

71
00:03:16,356 --> 00:03:17,550
to the airport.

72
00:03:17,550 --> 00:03:18,590
Okay, I'll tell you what.

73
00:03:18,590 --> 00:03:20,510
I think I can ask Puff to chat with you.

74
00:03:20,510 --> 00:03:23,310
He's actually in the SF office today and
might be able to swing by your office.

75
00:03:24,430 --> 00:03:26,410
Well, that's actually
incredibly convenient.

76
00:03:26,410 --> 00:03:29,254
And my cribbage match got
rescheduled so, awesome.

77
00:03:29,254 --> 00:03:30,850
>> Well then I'll tell
him to take the company.

78
00:03:30,850 --> 00:03:33,348
Two person man experimental
flying electric vehicle.

79
00:03:33,348 --> 00:03:34,143
>> Excellent.

80
00:03:34,143 --> 00:03:36,010
Thanks JP and safe travels.
