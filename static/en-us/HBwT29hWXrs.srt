1
00:00:00,250 --> 00:00:02,270
So here's the answer. We'll try it and see what we

2
00:00:02,270 --> 00:00:06,060
get. And while it's running, let's think about what we should

3
00:00:06,060 --> 00:00:08,370
get. So we can look at the examples that we did

4
00:00:08,370 --> 00:00:11,120
so far and try to make some predictions. So we saw

5
00:00:11,120 --> 00:00:14,300
when the value passed in was 10 to the 5, that

6
00:00:14,300 --> 00:00:18,960
the time it took to execute was 0.005. When the time

7
00:00:18,960 --> 00:00:21,970
passed in was 10 to the 6, so 1 million. We

8
00:00:21,970 --> 00:00:26,280
saw that the time to execute was 0.05, and now we're trying

9
00:00:26,280 --> 00:00:28,970
to predict 10 to the nine. If we look at

10
00:00:28,970 --> 00:00:32,130
the pattern here, every time we increase n by a

11
00:00:32,130 --> 00:00:36,590
factor of 10, the time also multiplies by a factor

12
00:00:36,590 --> 00:00:40,624
of 10. And, that's not surprising because the loop is going

13
00:00:40,624 --> 00:00:44,002
around ten more times. The times, number of times we

14
00:00:44,002 --> 00:00:46,510
go through the loop, scales as a factor of the

15
00:00:46,510 --> 00:00:48,556
input value n, so if we increase n by a

16
00:00:48,556 --> 00:00:51,592
factor of 10, the time will also increase by a factor

17
00:00:51,592 --> 00:00:53,900
of 10. And we see we have got our

18
00:00:53,900 --> 00:00:57,150
result now, so if we increase by another factor

19
00:00:57,150 --> 00:01:00,820
of 10, we would expect that this would also

20
00:01:00,820 --> 00:01:03,010
increase, that it would take about half a second to

21
00:01:03,010 --> 00:01:07,310
do 10 million. If we increased by another factor

22
00:01:07,310 --> 00:01:10,270
of 10 we would expect the running time would

23
00:01:10,270 --> 00:01:13,280
also multiple by 10, so we'd be up to

24
00:01:13,280 --> 00:01:17,050
about 5 seconds. And if we increased by another factor

25
00:01:17,050 --> 00:01:20,100
of 10 which is the billion that we tried, we'd

26
00:01:20,100 --> 00:01:23,980
expect it to also increase by another factor of 10.

27
00:01:23,980 --> 00:01:27,190
Getting to be something around 50 seconds. So it's not

28
00:01:27,190 --> 00:01:30,060
exactly a 1,000 times what we had when we did

29
00:01:30,060 --> 00:01:32,770
spin loop passing in a million, but it's pretty close

30
00:01:32,770 --> 00:01:36,260
to that. Now it's taking almost a minute, 1,000 times

31
00:01:36,260 --> 00:01:39,000
this would be 54 seconds, so it's a little bit

32
00:01:39,000 --> 00:01:42,120
off from that. But very close, and if we tried it

33
00:01:42,120 --> 00:01:44,980
a few more times, we might get a slightly different result.

34
00:01:44,980 --> 00:01:47,710
Let's try is one more time. So we tried it again

35
00:01:47,710 --> 00:01:52,140
and this time we got 55.89 seconds, pretty close to what

36
00:01:52,140 --> 00:01:55,160
we got the previous time. The important point here is that

37
00:01:55,160 --> 00:01:57,890
the running time depends on the value of the input to

38
00:01:57,890 --> 00:02:01,270
spin loop and it depends on in a linear way. As

39
00:02:01,270 --> 00:02:04,730
we increase the magnitude of n, the higher number of times

40
00:02:04,730 --> 00:02:08,919
through the loop, the running time scales linearly with that value.
