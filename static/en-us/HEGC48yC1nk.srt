1
00:00:00,070 --> 00:00:01,205
Before we get started,

2
00:00:01,205 --> 00:00:05,720
let's look at memory management from a
high level with another visual metaphor.

3
00:00:05,720 --> 00:00:07,140
Here is an idea.

4
00:00:07,140 --> 00:00:11,750
Operating systems and toy shops
each have some sorts of mechanisms

5
00:00:11,750 --> 00:00:15,790
to manage the state that's required for
their processing actions.

6
00:00:15,790 --> 00:00:17,730
In the case of the operating systems,

7
00:00:17,730 --> 00:00:20,490
this state is captured
in the system memory.

8
00:00:20,490 --> 00:00:24,170
In the case of the toy shops, this
state is captured in the various parts

9
00:00:24,170 --> 00:00:26,390
that are needed for
the toy production process.

10
00:00:26,390 --> 00:00:29,690
Beginning with the toy shop,
here are few elements required for

11
00:00:29,690 --> 00:00:31,820
its part management system.

12
00:00:31,820 --> 00:00:36,040
First, the process uses
intelligently sized containers.

13
00:00:36,040 --> 00:00:39,940
Second, not all parts
are needed at the same time.

14
00:00:39,940 --> 00:00:44,180
And finally, the process is optimized
for achieving high performance.

15
00:00:44,180 --> 00:00:47,690
So what do we mean by
intelligently sized containers?

16
00:00:47,690 --> 00:00:49,670
Well, for storage purposes,

17
00:00:49,670 --> 00:00:54,280
it's convenient to make sure that every
container is of the same size so that

18
00:00:54,280 --> 00:00:58,370
it's easier to manage those containers
in and out of the storage room.

19
00:00:58,370 --> 00:01:01,880
Regarding the next point, you can
imagine how certain types of toys,

20
00:01:01,880 --> 00:01:04,629
like teddy bears,
would require fabric and

21
00:01:04,629 --> 00:01:09,820
threads, whereas other types of toys may
require wooden parts or something else.

22
00:01:09,820 --> 00:01:13,720
Given that toy orders
are completed in stages and not

23
00:01:13,720 --> 00:01:18,430
every single one of the toy orders is
processed at the exact same time, these

24
00:01:18,430 --> 00:01:23,570
parts can be brought in and out of these
containers as necessary, for instance.

25
00:01:23,570 --> 00:01:25,600
How that's done should be optimized for

26
00:01:25,600 --> 00:01:30,070
performance because if we can reduce the
wait time for bringing the parts in and

27
00:01:30,070 --> 00:01:33,930
out of the containers,
ultimately we can make more toys.

28
00:01:33,930 --> 00:01:38,290
The memory management subsystems
that are part of operating systems

29
00:01:38,290 --> 00:01:39,880
have some similar types of goals.

30
00:01:41,040 --> 00:01:42,340
In an operating system,

31
00:01:42,340 --> 00:01:46,440
memories typically manage
the granularity of pages or segments.

32
00:01:46,440 --> 00:01:48,400
We will discuss this more later on, but

33
00:01:48,400 --> 00:01:53,070
the size of these containers can be
an important design consideration.

34
00:01:53,070 --> 00:01:56,550
Like with the analogy of the toy
orders and the parts needed for

35
00:01:56,550 --> 00:02:01,750
the toy orders, similarly processes
that execute in a computing system

36
00:02:01,750 --> 00:02:04,890
don't require all of
the memory at the same time.

37
00:02:04,890 --> 00:02:07,310
Some subsets of the state
that's needed for

38
00:02:07,310 --> 00:02:11,760
the computation of the task can be
brought in and out of memory as needed,

39
00:02:11,760 --> 00:02:14,710
depending on what
the task is performing.

40
00:02:14,710 --> 00:02:18,910
And finally, how the state that's
required for these tasks is brought in

41
00:02:18,910 --> 00:02:24,530
and out of memory and into memory
pages or segments is optimized so

42
00:02:24,530 --> 00:02:28,750
as to reduced the time that's
require to access that state.

43
00:02:28,750 --> 00:02:31,690
The end result again is improve
performance for the system.

44
00:02:32,730 --> 00:02:36,849
For instance, to achieve some of
the performance related optimizations,

45
00:02:36,849 --> 00:02:41,095
memory management subsystems rely on
hardware support like, for instance,

46
00:02:41,095 --> 00:02:44,350
translation lookaside buffers, or TLBs.

47
00:02:44,350 --> 00:02:48,016
They rely on caches and
also in software algorithms such as for

48
00:02:48,016 --> 00:02:50,704
page replacement or
for memory allocation.
