1
00:00:00,320 --> 00:00:05,045
Here's what a scaling matrix looks like. Set all three values here to one and

2
00:00:05,045 --> 00:00:09,940
you get the identity matrix. If you want to uniformly scale something to be

3
00:00:09,940 --> 00:00:14,927
three times as large as before, set SX, SY, and SZ to all be three. If you want

4
00:00:14,927 --> 00:00:19,672
to instead just stretch something up along the Y axis so that it's five times as

5
00:00:19,672 --> 00:00:24,132
tall, set SX and SZ to be one, and SY to be five. There's just one funny thing

6
00:00:24,132 --> 00:00:28,667
that happens with scaling in particular. It can mess up normals. Remember we're

7
00:00:28,667 --> 00:00:32,561
not just transforming points with matrices, we're also transforming shading

8
00:00:32,561 --> 00:00:36,071
normals. If you run normals through a translation matrix, nothing happens to

9
00:00:36,071 --> 00:00:39,822
them. They're vectors so they don't get touched. If you run normals though a

10
00:00:39,822 --> 00:00:44,350
rotation matrix, things are fine. Here's a triangle from a side view, looking

11
00:00:44,350 --> 00:00:48,487
along it's plane, along with it's normal. If you uniformally scale this object

12
00:00:48,487 --> 00:00:52,960
to be larger, look what happens. The object grows larger, as does the normal.

13
00:00:52,960 --> 00:00:56,740
The good news is that the normal doesn't change direction, so all we have to do

14
00:00:56,740 --> 00:01:00,160
is re-normalize it before using it in any lighting equations. If you

15
00:01:00,160 --> 00:01:04,733
non-uniformally scale an object, In other words, stretch or squish it. Things

16
00:01:04,733 --> 00:01:09,800
get weird. Here I stretch the triangle in one direction. The normal vector has

17
00:01:09,800 --> 00:01:13,567
also stretched upwards and is clearly no longer pointing in the right direction.

18
00:01:13,568 --> 00:01:17,443
To solve this problem, we need to inverse and transpose a matrix.
