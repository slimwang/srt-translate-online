1
00:00:00,000 --> 00:00:02,000
For this problem, we're going to be doing something

2
00:00:02,000 --> 00:00:05,000
similar to what we've done in a previous homework where you were given

3
00:00:05,000 --> 00:00:09,000
a magic function to use for a reduction.

4
00:00:09,000 --> 00:00:11,000
You're provided with a function solve_vc

5
00:00:11,000 --> 00:00:14,000
which solves vertex cover for a given graph represented

6
00:00:14,000 --> 00:00:17,000
as an adjacency matrix, as we've seen previously.

7
00:00:17,000 --> 00:00:21,000
Now, it returns a minimum cover of the graph as a list of 0s and 1s

8
00:00:21,000 --> 00:00:25,000
where 1 means the corresponding vertex is in the cover,

9
00:00:25,000 --> 00:00:28,000
and 0 means that it is not.

10
00:00:28,000 --> 00:00:31,000
Now, what you should do here is use solve_vc

11
00:00:31,000 --> 00:00:35,000
to write a function multisolve which takes as its inputs

12
00:00:35,000 --> 00:00:37,000
an adjacency matrix and a string.

13
00:00:37,000 --> 00:00:40,000
The adjacency matrix is simply a graph,

14
00:00:40,000 --> 00:00:44,000
and the string is either vertex cover, independent set, or clique,

15
00:00:44,000 --> 00:00:47,000
and it returns a list of 0s and 1s, which are assignments of the vertices

16
00:00:47,000 --> 00:00:51,000
where 1 means the corresponding vertex is in the solution

17
00:00:51,000 --> 00:00:55,000
to the corresponding problem, and 0 means that it is not.

18
00:00:55,000 --> 00:00:59,000
Now, you can feel free to use any additional functions you might feel are necessary.

19
00:00:59,000 --> 99:59:59,999
But to be graded correctly, you have to use solve_vc in the solution to your problem.
