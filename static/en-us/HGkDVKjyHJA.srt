1
00:00:00,280 --> 00:00:03,002
This is a simple example of the Geolocation API, you

2
00:00:03,002 --> 00:00:07,280
call getCurrentPosition and pass it a call back and the

3
00:00:07,280 --> 00:00:10,230
call back is called when it gets your location and

4
00:00:10,230 --> 00:00:12,830
gives you your latitude and longitude. There's also a very

5
00:00:12,830 --> 00:00:16,500
similar watch position call, which does the same thing except

6
00:00:16,500 --> 00:00:19,940
continually calls you every time the position is updated. Let's

7
00:00:19,940 --> 00:00:22,490
walk through how we use this API in our conference

8
00:00:22,490 --> 00:00:25,890
app. First, we added a button to the map page

9
00:00:25,890 --> 00:00:28,810
that triggers the Geolocation procedure. When this button

10
00:00:28,810 --> 00:00:31,900
is pressed, the triggerGeolocation method in our code

11
00:00:31,900 --> 00:00:34,600
is called. This code is the heavy lifting

12
00:00:34,600 --> 00:00:38,570
of the triggerGeolocation method. This uses the HTML5

13
00:00:38,570 --> 00:00:42,800
Geolocation method API method, getCurrentPosition. And passes it

14
00:00:42,800 --> 00:00:46,250
a success call back and an error callback.

15
00:00:46,250 --> 00:00:51,110
It also enables high accuracy and sets a time out. In case of failure, we print

16
00:00:51,110 --> 00:00:54,140
a generic, Sorry, we couldn't find your location.

17
00:00:54,140 --> 00:00:56,750
On the other hand, if we succeed, we call

18
00:00:56,750 --> 00:01:01,840
a method called elaborateDistance. ElaborateDistance uses the root

19
00:01:01,840 --> 00:01:05,010
method from the Google Maps direction service to obtain

20
00:01:05,010 --> 00:01:07,490
an object containing information about the route between

21
00:01:07,490 --> 00:01:10,980
the user's position and the venue. It then displays

22
00:01:10,980 --> 00:01:13,560
some of this information and allows you to

23
00:01:13,560 --> 00:01:16,530
open up Google Maps with the route already set.

24
00:01:16,530 --> 00:01:18,800
Obviously, this is frequently the way that you'll

25
00:01:18,800 --> 00:01:21,260
use Geolocation data, that is, passing it off

26
00:01:21,260 --> 00:01:23,940
to another control. Most of us don't, write

27
00:01:23,940 --> 00:01:26,900
code that uses this latitude and longitude directly.
