1
00:00:00,165 --> 00:00:04,650
A* Search works by always expanding
the path that has a minimum value of

2
00:00:04,650 --> 00:00:10,870
the function f, which is defined as
a sum of the g and h components.

3
00:00:10,869 --> 00:00:16,140
Now, the function g of a path,
it's just the path cost.

4
00:00:16,140 --> 00:00:20,609
And the function h of a path is equal to

5
00:00:21,730 --> 00:00:26,690
the h value of the state,
which is the final state of the path,

6
00:00:26,690 --> 00:00:29,950
which is equal to the estimated
distance to the goal.

7
00:00:31,989 --> 00:00:34,439
Here's an example of how A* works.

8
00:00:34,439 --> 00:00:38,848
Suppose we found this path through
the state space to a state X, and

9
00:00:38,848 --> 00:00:42,648
we're trying to give a measure
to the value of this path.

10
00:00:42,649 --> 00:00:47,120
The measure f is a sum of g,
the path cost so far, and h,

11
00:00:47,119 --> 00:00:51,787
which is the estimated distance
that the path will take to

12
00:00:51,787 --> 00:00:54,328
complete its path to the goal.

13
00:00:54,329 --> 00:00:59,100
Now, minimizing g helps
us keep the path short.

14
00:00:59,100 --> 00:01:03,850
And minimizing h helps us keep
focused on finding the goal.

15
00:01:03,850 --> 00:01:07,840
The result is a search strategy
that is the best possible,

16
00:01:07,840 --> 00:01:10,900
in the sense that it finds
the shortest length path

17
00:01:10,900 --> 00:01:13,400
while expanding the minimum
number of paths possible.

18
00:01:14,569 --> 00:01:18,446
It could be called best estimated
total path cost first, but

19
00:01:18,447 --> 00:01:20,355
the name A* is traditional.

20
00:01:20,355 --> 00:01:24,469
Now let's go back to Romania and
apply the A* algorithm.

21
00:01:24,469 --> 00:01:25,980
And we're going to use a heuristic,

22
00:01:25,980 --> 00:01:29,960
which is a straight line distance
between a state and the goal.

23
00:01:29,959 --> 00:01:32,399
The goal, again, is Bucharest, and so

24
00:01:32,400 --> 00:01:34,520
the distance from Bucharest to
Bucharest is, of course, 0.

25
00:01:35,819 --> 00:01:36,089
And for

26
00:01:36,090 --> 00:01:40,370
all the other states, I've written
in red the straight line distance.

27
00:01:40,370 --> 00:01:42,079
For example, straight across like that.

28
00:01:43,230 --> 00:01:47,719
Now, I should say that all the roads
here I've drawn as straight lines, but

29
00:01:47,719 --> 00:01:49,989
actually roads are going to
be curved to some degree.

30
00:01:49,989 --> 00:01:52,697
So the actual distance along
the roads is going to be

31
00:01:52,697 --> 00:01:55,019
longer than the straight line distance.

32
00:01:55,019 --> 00:01:59,949
Now, we start out as usual,
we'll start in Arad as a start state.

33
00:01:59,950 --> 00:02:03,347
And we'll expand out Arad,
and so we'll add three paths.

34
00:02:03,347 --> 00:02:08,455
And the evaluation function, f, will
be the sum of the path length, which

35
00:02:08,455 --> 00:02:13,580
is given in black, and the estimated
distance, which is given in red.

36
00:02:13,580 --> 00:02:18,942
And so, the path link from this

37
00:02:18,942 --> 00:02:26,792
path will be 140 plus 253, or 393.

38
00:02:26,792 --> 00:02:33,466
For this path, 75 plus 374, 449.

39
00:02:33,466 --> 00:02:41,009
And for this path, 118 plus 329, 447.

40
00:02:41,008 --> 00:02:45,955
And now, the question is, out of all
the paths that are on the frontier,

41
00:02:45,955 --> 00:02:49,789
which path will we expand
next under the A* algorithm?

