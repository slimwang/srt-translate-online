1
00:00:00,170 --> 00:00:03,469
Now that we looked different scheduling policies, let's discuss

2
00:00:03,469 --> 00:00:06,939
the implementation issues of these scheduling policies in an operating

3
00:00:06,939 --> 00:00:11,480
system. One possibility is, the operating system can maintain

4
00:00:11,480 --> 00:00:14,570
a global queue of all the threads that are runnable

5
00:00:14,570 --> 00:00:17,530
in the system. And, what these processes might do

6
00:00:17,530 --> 00:00:19,890
is. When they're ready for work, they'll go to this

7
00:00:19,890 --> 00:00:23,160
global queue and pick the next available thread from

8
00:00:23,160 --> 00:00:25,310
this queue, and run that on itself. And the way

9
00:00:25,310 --> 00:00:29,200
we organize the queues is orthogonal to the

10
00:00:29,200 --> 00:00:32,130
scheduling policy itself. But if the policy is

11
00:00:32,130 --> 00:00:34,830
something like FCFS, it makes sort of logical

12
00:00:34,830 --> 00:00:37,740
sense to have. A global queue and let the

13
00:00:37,740 --> 00:00:40,040
processes pick from the queue the head of

14
00:00:40,040 --> 00:00:43,620
the queue is the earliest arriving thread and therefore

15
00:00:43,620 --> 00:00:46,250
first come first serve policy we use this

16
00:00:46,250 --> 00:00:50,760
global queue policy. This global queue becomes very infeasible

17
00:00:50,760 --> 00:00:54,010
as an implementation vehicle. When the size of

18
00:00:54,010 --> 00:00:56,820
the multiprocessor is really big. Because then, it's

19
00:00:56,820 --> 00:00:59,570
a huge data structure that all these guys

20
00:00:59,570 --> 00:01:02,850
have to access centrally and so on. So typically,

21
00:01:02,850 --> 00:01:06,150
what is done is to keep local queues

22
00:01:06,150 --> 00:01:08,830
with every processor. And these local queues are

23
00:01:08,830 --> 00:01:12,480
going to be based on affinity. And the particular

24
00:01:12,480 --> 00:01:15,980
organization of the queues. In each of these processes.

25
00:01:15,980 --> 00:01:18,360
These local queues for each of these processes

26
00:01:18,360 --> 00:01:22,540
is going to depend on the specific policy that you're

27
00:01:22,540 --> 00:01:26,200
going to use. So, if it is last processor, or

28
00:01:26,200 --> 00:01:29,090
is it, is it fixed processor, is it a

29
00:01:29,090 --> 00:01:32,960
minimum intervening, or is it minimum intervening plus queuing?

30
00:01:32,960 --> 00:01:35,220
All of those things will decide how these local

31
00:01:35,220 --> 00:01:38,680
queues are going to be maintained. But important point I

32
00:01:38,680 --> 00:01:41,220
want to get across is that. In implementing the scheduling

33
00:01:41,220 --> 00:01:44,450
policies, you have to have a ready queue of threads

34
00:01:44,450 --> 00:01:47,480
from which the processor will pick the next piece of

35
00:01:47,480 --> 00:01:51,130
work to do. And the organization of these queues will

36
00:01:51,130 --> 00:01:54,430
be based on the specific scheduling policy that you might

37
00:01:54,430 --> 00:01:57,060
choose to employ for the scheduler. And it might be

38
00:01:57,060 --> 00:02:00,240
that processor p2 runs out of work completely, nothing in

39
00:02:00,240 --> 00:02:03,785
its local queue. In that case it might pull its

40
00:02:03,785 --> 00:02:06,350
peers' queues in order to get some work from other

41
00:02:06,350 --> 00:02:08,120
guys and run it in that processor. Now

42
00:02:08,120 --> 00:02:10,300
that's something that might be done and that is

43
00:02:10,300 --> 00:02:12,510
what is called work stealing in the scheduling

44
00:02:12,510 --> 00:02:15,700
literature. So that might be something that is commonly

45
00:02:15,700 --> 00:02:20,310
employed in a multiprocessor scheduler. So I mentioned

46
00:02:20,310 --> 00:02:24,270
that the. Way these queues are organized is based

47
00:02:24,270 --> 00:02:28,225
on policies that scheduler picks which might be

48
00:02:28,225 --> 00:02:31,730
affinity-based or might be fairness based and so on.

49
00:02:31,730 --> 00:02:34,530
But in addition to the policy specific

50
00:02:34,530 --> 00:02:38,340
attribute, it might also use additional information

51
00:02:38,340 --> 00:02:44,000
in order to organize its queue In particular, a priority of a thread is

52
00:02:44,000 --> 00:02:48,430
determined by three components. Now one component

53
00:02:48,430 --> 00:02:50,580
is the affinity component assuming it's an

54
00:02:50,580 --> 00:02:53,760
affinity based scheduling policy. But in addition

55
00:02:53,760 --> 00:02:56,820
to that, it might also use additional information.

56
00:02:56,820 --> 00:02:59,940
So for instance every thread may be born with a

57
00:02:59,940 --> 00:03:03,220
certain priority, so that is the base priority that. A

58
00:03:03,220 --> 00:03:06,960
particular thread has when it is started up, and as

59
00:03:06,960 --> 00:03:11,040
I mentioned, it might depend on whether you know they

60
00:03:11,040 --> 00:03:13,910
usually give a huge amount of money you know, to

61
00:03:13,910 --> 00:03:16,360
run this particular thread. So that is the base priority

62
00:03:16,360 --> 00:03:19,270
that you associate with the thread, and, and, of course,

63
00:03:19,270 --> 00:03:21,920
then you take the affinity into a, into account. And in

64
00:03:21,920 --> 00:03:25,640
addition to that, there is age coming in. And this

65
00:03:25,640 --> 00:03:29,130
is sort of like a senior citizen discount. If a, if

66
00:03:29,130 --> 00:03:31,870
a thread Ti has been in the system for a long,

67
00:03:31,870 --> 00:03:34,280
long time, you want to get it out of the system as

68
00:03:34,280 --> 00:03:37,990
quickly as possible. So what you do is equivalent to giving

69
00:03:37,990 --> 00:03:41,290
a senior citizen discount. You boost the priority of the thread

70
00:03:41,290 --> 00:03:44,950
by At certain amount, so that it gets to, to be

71
00:03:44,950 --> 00:03:47,140
at the head of the queue, and it will get scheduled

72
00:03:47,140 --> 00:03:50,070
on the process of p2. So basically, the

73
00:03:50,070 --> 00:03:54,170
priority attribute is what determines the position in the

74
00:03:54,170 --> 00:03:56,900
queue in the particular thread. And as I said,

75
00:03:56,900 --> 00:03:59,050
three attributes that go with it is a base

76
00:03:59,050 --> 00:04:01,190
priority that you may associate with a thread,

77
00:04:01,190 --> 00:04:05,440
then it is. First created, the affinity it has

78
00:04:05,440 --> 00:04:09,180
for a particular processor, and also the senior citizen

79
00:04:09,180 --> 00:04:12,450
discount that it might give to a particular thread

80
00:04:12,450 --> 00:04:15,050
depending on how long it's been on the system.
