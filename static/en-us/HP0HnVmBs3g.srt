1
00:00:00,000 --> 00:00:04,000
What we need is something called oblivious transfer, and in particular,

2
00:00:04,000 --> 00:00:07,000
we need what we'll call "one-out-of-two oblivious transfer"

3
00:00:07,000 --> 00:00:11,000
and what that means is Alice can create two values, X0 and X1.

4
00:00:11,000 --> 00:00:16,000
Bob will obtain one of those values, but Alice doesn't learn which one Bob learned.

5
00:00:16,000 --> 00:00:21,000
Bob can only obtain one of the two values but Alice doesn't know which one Bob obtained.

6
00:00:21,000 --> 00:00:23,000
There are lots of different protocols that provide this.

7
00:00:23,000 --> 00:00:28,000
The one I'm going to describe was invented by Even, Goldreich, and Lempel in 1985.

8
00:00:28,000 --> 00:00:31,000
It builds on RSA encryption and we're going to look at it

9
00:00:31,000 --> 00:00:34,000
as we need to use it in the garbled circuit protocol.

10
00:00:34,000 --> 00:00:40,000
Our goal is that Alice has two wire labels; this correspond to the inputs to some gate,

11
00:00:40,000 --> 00:00:45,000
and she wants to transfer one of them to Bob without revealing the other one.

12
00:00:45,000 --> 00:00:47,000
We're going to use Alice's public key.

13
00:00:47,000 --> 00:00:50,000
We'll assume that is known to Bob before the protocol starts.

14
00:00:50,000 --> 00:00:55,000
Our goal is to transfer one of these two wire labels to Bob.

15
00:00:55,000 --> 00:00:57,000
The first step is to create two random values.

16
00:00:57,000 --> 00:01:01,000
These are separate from the wire labels. These are going to be transferred to Bob.

17
00:01:01,000 --> 00:01:05,000
These have no meaning. They're just two random nonces created by Alice.

18
00:01:05,000 --> 00:01:10,000
Depending on which wire label Bob wants, Bob has some input either zero or one.

19
00:01:10,000 --> 00:01:15,000
He's going to pick either the first or the second of these. So, he is going to pick Xb.

20
00:01:15,000 --> 00:01:21,000
Is it equal to either X0 or X1, depending on his value of b.

21
00:01:21,000 --> 00:01:26,000
Then Bob will pick some random value r. Bob is going to use this to blind the response.

22
00:01:26,000 --> 00:01:32,000
He can allow Alice to learn whether he pick X0 or X1. That would reveal his input.

23
00:01:32,000 --> 00:01:35,000
What he's going to do instead is use this random value to blind the response.

24
00:01:35,000 --> 00:01:41,000
He'll compute this new value, which is the value of the X that he selected

25
00:01:41,000 --> 00:01:46,000
plus the random value raised to that public exponent modn.

26
00:01:46,000 --> 00:01:52,000
We're going to hide the value of Xb by adding a random value raised to the e power to it.

27
00:01:52,000 --> 00:01:58,000
That value is what sent back to Alice, and Alice is going to perform two different RSA decryptions.

28
00:01:58,000 --> 00:02:01,000
She knows the values that she selected for X0 and X1.

29
00:02:01,000 --> 00:02:04,000
She's going to subtract each of those from V.

30
00:02:04,000 --> 00:02:08,000
She'll decrypt it using her private key and we'll call the first one K0,

31
00:02:08,000 --> 00:02:11,000
that was the one constructed using X0, and the second one, K1,

32
00:02:11,000 --> 00:02:14,000
that was the one constructed using X1.

33
00:02:14,000 --> 00:02:18,000
The question is if b selected, what is it's input?

34
00:02:18,000 --> 00:02:21,000
That means b has the value for Xb is equal to X1.

35
00:02:21,000 --> 00:02:27,000
What are the values of K0 and K1? Select the best answer for each choice.

36
00:02:27,000 --> 99:59:59,999
It could be meaningless, it could match X0, X1, or r.
