1
00:00:00,000 --> 00:00:02,000
This time, let's talk about some they called partitioning the input domain.

2
00:00:02,000 --> 00:00:07,000
So, we are going to start with some software under test and itâs going to have a set of possible inputs,

3
00:00:07,000 --> 00:00:12,000
an input domain, and of course, this input domain usually consist of so many possible test cases,

4
00:00:12,000 --> 00:00:14,000
but thereâs no way we can possibly test them all.

5
00:00:14,000 --> 00:00:17,000
Speaking historically, well people would've often been interested in

6
00:00:17,000 --> 00:00:19,000
his ways to partition the input domain

7
00:00:19,000 --> 00:00:24,000
for piece of software under test into a number of different classes so that all of the points

8
00:00:24,000 --> 00:00:28,000
within each class are treated the same but the system under task.

9
00:00:28,000 --> 00:00:30,000
And while constructing these classes, we are allowed to look at the

10
00:00:30,000 --> 00:00:33,000
implementation of the software, we are allowed to look at the specification,

11
00:00:33,000 --> 00:00:36,000
we are allowed to use even our vague suspicions that we have.

12
00:00:36,000 --> 00:00:39,000
We can use anything we want in order to create these partitions.

13
00:00:39,000 --> 00:00:42,000
So, for example, we will have some subset of the input domain.

14
00:00:42,000 --> 00:00:45,000
For purposes of finding defects in the system under test,

15
00:00:45,000 --> 00:00:49,000
any point within that subdomain is as good as any other point within that subdomain.

16
00:00:49,000 --> 00:00:54,000
So, basically, when testing the system, which pick an orbitary point, execute the system on it.

17
00:00:54,000 --> 00:00:58,000
Look at the output, and if it is acceptable, then weâre done testing that class of inputs.

18
00:00:58,000 --> 00:01:02,000
So, obviously, in practice, sometimes this partition is going to fail,

19
00:01:02,000 --> 00:01:07,000
and by fail, I mean that the thing that we thought was are class of inputs that are all equivalent

20
00:01:07,000 --> 00:01:11,000
with respect to the system under test isnât really, and in fact, there is a different class

21
00:01:11,000 --> 00:01:16,000
hiding within this class which triggers a bug even though the original test case didnât.

22
00:01:16,000 --> 00:01:19,000
And so, when that happens, we can sort of blame the partitioning scheme.

23
00:01:19,000 --> 00:01:21,000
We can say that we improperly partition the input.

24
00:01:21,000 --> 00:01:24,000
The problem with this sort of scheme is that we can always blame the partitioning,

25
00:01:24,000 --> 00:01:27,000
and the unfortunate fact is the original definition of this partitioning scheme

26
00:01:27,000 --> 00:01:30,000
didnât really give us extremely good guidance in how to actually do the partitioning.

27
00:01:30,000 --> 00:01:32,000
All that settle as we had to do it.

28
00:01:32,000 --> 00:01:35,000
In fact, this sort of scheme hasnât worked out for large systems under test.

29
00:01:35,000 --> 00:01:38,000
Weâre talking complex software like real time imbedded systems

30
00:01:38,000 --> 99:59:59,999
or operating systems or other things.
