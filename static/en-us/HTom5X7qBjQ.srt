1
00:00:00,200 --> 00:00:03,045
The answer that I'm looking for is the last one.

2
00:00:03,045 --> 00:00:05,290
But let's go through the other ones. Could we avoid

3
00:00:05,290 --> 00:00:09,070
a cache stampede by replicating a database? Yeah in theory.

4
00:00:09,070 --> 00:00:11,390
it, but, but, it's, it's not a very good solution

5
00:00:11,390 --> 00:00:13,870
because as we said there's a, there's a cost to

6
00:00:13,870 --> 00:00:18,990
maintaining multiple machines. To running database queries It's, it's probably

7
00:00:18,990 --> 00:00:21,595
not the right approach. But, it could work if you

8
00:00:21,595 --> 00:00:25,020
had enough databases to handle all of the reading you're doing.

9
00:00:25,020 --> 00:00:28,132
Only allow one req, web request at a time. Now this could

10
00:00:28,132 --> 00:00:31,200
kind of sort of work but it means, you know, when a request

11
00:00:31,200 --> 00:00:34,950
comes, you, you basically queue up all of the simultaneous requests that

12
00:00:34,950 --> 00:00:37,830
you're receiving so that only one person is, only one person is hitting

13
00:00:37,830 --> 00:00:40,580
the database at a time. This could also work in theory but

14
00:00:40,580 --> 00:00:42,760
then you've gotta queue up these users somewhere and it slows down your

15
00:00:42,760 --> 00:00:47,190
site and. It's generally, probably going to be fairly painful. Only allow one

16
00:00:47,190 --> 00:00:50,780
database request at a time. This is similar to what I just mentioned.

17
00:00:50,780 --> 00:00:54,720
We'd have to basically have all these requests basically block, or

18
00:00:54,720 --> 00:00:58,022
wait on, on one request that's actually updated in the cache.

19
00:00:58,022 --> 00:01:00,875
For doing the query that sort of thing. You can either

20
00:01:00,875 --> 00:01:03,350
blo, do it in your web application, which, which would be

21
00:01:03,350 --> 00:01:05,080
tricky. Or you can have some sort of lock in your

22
00:01:05,080 --> 00:01:08,836
database. Either way. It's, it's, it's not going to work out as,

23
00:01:08,836 --> 00:01:11,860
as well as you would like. And finally, you know, we,

24
00:01:11,860 --> 00:01:15,640
just don't clear the cache. instead, overwrite the cache with new data.

25
00:01:15,640 --> 00:01:18,810
So there's never this in-between time, between when we write to the

26
00:01:18,810 --> 00:01:22,340
database and when we read from it again, where the cache is empty.

27
00:01:22,340 --> 00:01:26,260
Make sure the cache is always, always full or, or warm. You know,

28
00:01:26,260 --> 00:01:29,180
basically, we refer to a, a, a cache hit as, you know, it's

29
00:01:29,180 --> 00:01:31,510
hit a, it's hit a hot cache or a warm cache. That means

30
00:01:31,510 --> 00:01:34,060
the data is already in there. And this is a very simple approach,

31
00:01:34,060 --> 00:01:36,760
and this is what we'll go with. Let's go ahead and implement this

32
00:01:36,760 --> 00:01:40,690
in AsciiChan. Okay, so, here we are in our AsciiChan code. This is

33
00:01:40,690 --> 00:01:43,000
our line where we clear the cache. We don't want to do this

34
00:01:43,000 --> 00:01:45,980
anymore. Instead, we want the cache to just go ahead and update when

35
00:01:45,980 --> 00:01:49,150
we submit a new, a new piece of art. We're in our post

36
00:01:49,150 --> 00:01:53,010
function for set creating art. So the way I want to do it here,

37
00:01:53,010 --> 00:01:55,590
is I'm going to make a function, I'm going to make this function top_arts

38
00:01:55,590 --> 00:01:59,130
take a parameter called Update. And what this parameter is going to signify is

39
00:01:59,130 --> 00:02:02,560
that, if update is false, it's going to behave normally. But if update is

40
00:02:02,560 --> 00:02:05,880
true, we're going to update the cache, we're never going to read from the cache

41
00:02:05,880 --> 00:02:10,750
if update is true. So, I'm going to use that parameter here, if not update, so

42
00:02:10,750 --> 00:02:15,670
basically if update is false and the key is in the CACHE, return the

43
00:02:15,670 --> 00:02:21,020
CACHE, otherwise run the query. So basically if we set update to true, we'll

44
00:02:21,020 --> 00:02:22,850
always run the query. And then what we can do

45
00:02:22,850 --> 00:02:25,233
is we can go down, we don't need to change the

46
00:02:25,233 --> 00:02:27,920
reading, cause this basically says update false. We don't want to

47
00:02:27,920 --> 00:02:31,128
update the CACHE. Every time we don't want to force that update,

48
00:02:31,128 --> 00:02:33,832
we want to go down here instead of calling CACHE clear, we want to

49
00:02:33,832 --> 00:02:37,410
say top_arts true. This going to rerun the query and update the cache,

50
00:02:37,410 --> 00:02:41,040
so that means the user who does the submitting, triggers the re-running

51
00:02:41,040 --> 00:02:43,350
of the front page query. And any users who are reading at

52
00:02:43,350 --> 00:02:46,750
the same time, who are loading the front page at the same,

53
00:02:46,750 --> 00:02:50,510
won't ever hit the database. That means a page view will never

54
00:02:50,510 --> 00:02:53,270
hit the database. That's a very good quality to have. Let's go

55
00:02:53,270 --> 00:02:55,960
ahead, and make sure things still work. So, I reload the page,

56
00:02:55,960 --> 00:02:58,175
everything still works. So I look at the terminal. We see

57
00:02:58,175 --> 00:03:00,720
that there was a, a DB query that we just ran.

58
00:03:00,720 --> 00:03:03,680
Reload the page again. We see that there's no database query.

59
00:03:03,680 --> 00:03:07,400
Now let's go ahead, and submit a, a new piece of art.

60
00:03:07,400 --> 00:03:09,970
Okay, I'm going to submit a new piece of art. This is

61
00:03:09,970 --> 00:03:14,660
of the, the linux penguin tux. Now, when I submit this, what's

62
00:03:14,660 --> 00:03:17,095
happening is we're inserting the new piece of art into the

63
00:03:17,095 --> 00:03:21,680
database and updating the cache. Now we can see that the redirect

64
00:03:21,680 --> 00:03:24,180
the page reload worked and our, and our little tux was in

65
00:03:24,180 --> 00:03:26,590
fact submitted, and we go to our terminal we look at what

66
00:03:26,590 --> 00:03:28,805
happened. We can see the start of our query we've got this,

67
00:03:28,805 --> 00:03:32,050
this little error message from when we looked up the IP from that

68
00:03:32,050 --> 00:03:34,650
feature we had last week. We can see that in our console,

69
00:03:34,650 --> 00:03:39,580
we're printing DB Query in the POST request. This, these log lines aren't

70
00:03:39,580 --> 00:03:43,400
written until after the request is finished. So we're, we're writing tucks

71
00:03:43,400 --> 00:03:46,710
to the database. Then we're reading the database to get the most recent,

72
00:03:46,710 --> 00:03:49,410
the ten most recent items, and then we're redirecting the user,

73
00:03:49,410 --> 00:03:52,310
that's the 302. And then on our next front page request

74
00:03:52,310 --> 00:03:56,450
to get slash, there's no database write. So that means we're

75
00:03:56,450 --> 00:03:58,530
still doing the same number of database reads as we were

76
00:03:58,530 --> 00:04:01,880
doing before with the other solution, except the database read is

77
00:04:01,880 --> 00:04:05,680
triggered on submission, and not on page load. Which has a

78
00:04:05,680 --> 00:04:09,285
really nice property, and that there's no database read for the,

79
00:04:09,285 --> 00:04:11,980
the front page load ever unless the cache is completely empty.
