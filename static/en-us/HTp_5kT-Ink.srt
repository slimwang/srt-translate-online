1
00:00:00,000 --> 00:00:04,000
In debugging, simplicity eases our lives from the very beginning.

2
00:00:04,000 --> 00:00:07,000
As an example, consider bug reports.

3
00:00:07,000 --> 00:00:12,000
If you ever maintain a big piece of software with dozens and dozens

4
00:00:12,000 --> 00:00:15,000
and maybe even thousands and thousands of users,

5
00:00:15,000 --> 00:00:19,000
you may have gotten feedback from users--that is, bug reports.

6
00:00:19,000 --> 00:00:24,000
In the early 2000s, I coauthored a debugger named GNU DDD.

7
00:00:24,000 --> 00:00:31,000
It was pretty successful, so it had many users and I also got lots and lots of bug reports from the field.

8
00:00:31,000 --> 00:00:35,000
These bug reports--even in these early times--of course came electronic mail.

9
00:00:35,000 --> 00:00:38,000
But I'm drawing actual snail mail, because it's cuter.

10
00:00:38,000 --> 00:00:43,000
Some of these bug reports would just contain the required information,

11
00:00:43,000 --> 00:00:47,000
such as the steps needed to reproduce the problem

12
00:00:47,000 --> 00:00:49,000
as well as the observed behavior,

13
00:00:49,000 --> 00:00:53,000
but then there would also be people who would send in their entire programs

14
00:00:53,000 --> 00:00:55,000
that they were currently debugging.

15
00:00:55,000 --> 00:01:00,000
Some would send in their entire home directory or even the contents of their entire hard disk

16
00:01:00,000 --> 00:01:04,000
just in case this would be needed to reproduce the problem.

17
00:01:04,000 --> 00:01:08,000
And others would send in just the one liner, "Your program crashed,"

18
00:01:08,000 --> 00:01:11,000
which was less information than I would need.

19
00:01:11,000 --> 00:01:16,000
What you'd like to have in a bug report is information that is relevant.

20
00:01:16,000 --> 00:01:21,000
Here relevant means if it's different then it changes the behavior.

21
00:01:21,000 --> 00:01:24,000
Of course, when users are submitting bug reports

22
00:01:24,000 --> 00:01:28,000
they don't necessarily know whether their information changes the behavior,

23
00:01:28,000 --> 00:01:33,000
so to stay on the safe side they supply more information than would actually be required,

24
00:01:33,000 --> 00:01:37,000
but in order to have a simple bug report or a simple test case,

25
00:01:37,000 --> 00:01:40,000
we want information in there to be relevant.

26
00:01:40,000 --> 00:01:42,000
This calls for a quiz.

27
00:01:42,000 --> 00:01:47,000
When we simplify a test case, just as we did before for the HTML input,

28
00:01:47,000 --> 00:01:51,000
then everything is what?

29
00:01:51,000 --> 00:01:53,000
Simple, correct, relevant, or elegant? Over to you.
