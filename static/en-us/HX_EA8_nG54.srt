1
00:00:00,290 --> 00:00:03,050
So far, we've been dealing with this

2
00:00:03,050 --> 00:00:06,910
funny virtual time or logical time. But there

3
00:00:06,910 --> 00:00:10,890
are many real-world scenarios where this logical time

4
00:00:10,890 --> 00:00:12,850
may not be good enough. And in such

5
00:00:12,850 --> 00:00:18,330
situations, this logical clock may not be sufficient. I'll give you an example.

6
00:00:18,330 --> 00:00:25,510
Let's say that I owe you some money. And I tell you by calling you on the phone,

7
00:00:25,510 --> 00:00:29,110
that I'm going to credit my account in my local

8
00:00:29,110 --> 00:00:32,380
branch at 5 p.m. I'm telling you on the phone

9
00:00:32,380 --> 00:00:35,050
that I'm going to credit my account at 5 p.m.,

10
00:00:35,050 --> 00:00:38,350
and so any time after 5 p.m., you can withdraw

11
00:00:38,350 --> 00:00:42,100
money from my bank, and we'll be square. Now

12
00:00:42,100 --> 00:00:44,490
you're a nice guy, so you want to give me

13
00:00:44,490 --> 00:00:47,110
some leeway. So you tell your branch that, you

14
00:00:47,110 --> 00:00:50,830
know, at 8:00 PM, go ahead and debit from Kishore's

15
00:00:50,830 --> 00:00:53,750
account the money that he owes me. So your branch is

16
00:00:53,750 --> 00:00:57,050
going to basically do a debit call to the central bank

17
00:00:57,050 --> 00:01:00,890
server asking for the money that is owed by Kishore to

18
00:01:00,890 --> 00:01:03,660
be transferred to your account, so that's what is going to happen. And

19
00:01:03,660 --> 00:01:06,230
so you schedule that at 8 p.m. You've given me enough

20
00:01:06,230 --> 00:01:09,770
time to make sure that you have indicated to your bank,

21
00:01:09,770 --> 00:01:12,770
you have enough money, so that my debit transaction can go

22
00:01:12,770 --> 00:01:15,870
through. And you would think it should go through, right? But it

23
00:01:15,870 --> 00:01:19,670
turns out, that your branch's local time is

24
00:01:19,670 --> 00:01:23,150
far ahead of real time. Well, it thought it

25
00:01:23,150 --> 00:01:26,300
was 8 p.m., it was not quite 8 p.m.,

26
00:01:26,300 --> 00:01:29,840
yet. Because it's way ahead of real time. And

27
00:01:29,840 --> 00:01:33,080
so I am exactly at 5 p.m., keeping my

28
00:01:33,080 --> 00:01:35,950
word, exactly at 5 p.m., my branch happens to

29
00:01:35,950 --> 00:01:40,830
be good with the time. It's, it's in sync with the real time. And so at 5 p.m.,

30
00:01:40,830 --> 00:01:43,680
I've done the credit of the amount that I

31
00:01:43,680 --> 00:01:47,580
owe you to my central bank server. But unfortunately,

32
00:01:47,580 --> 00:01:50,330
the central bank server, in real time, it got

33
00:01:50,330 --> 00:01:54,260
your message much earlier than the time at which I

34
00:01:54,260 --> 00:01:57,940
sent my message. It's not looking at any logical

35
00:01:57,940 --> 00:02:00,460
time. It is looking at real time, saying, well, there's

36
00:02:00,460 --> 00:02:02,820
a debit transaction coming in. Is there money in

37
00:02:02,820 --> 00:02:05,940
the bank for paying those debit transactions? No, it isn't.

38
00:02:05,940 --> 00:02:11,250
So your request is declined. And this is coming about because of the fact that

39
00:02:11,250 --> 00:02:13,960
in real world scenarios, logical clocks are not

40
00:02:13,960 --> 00:02:18,260
good enough. And in particular, what caused this

41
00:02:18,260 --> 00:02:21,250
problem is the fact that your notion,

42
00:02:21,250 --> 00:02:25,560
your branch's notion, of real time is completely

43
00:02:25,560 --> 00:02:28,170
at odds with real time. And the reason

44
00:02:28,170 --> 00:02:31,590
that can happen is because the computer at

45
00:02:31,590 --> 00:02:35,750
your local bank may have a clock that is drifting

46
00:02:35,750 --> 00:02:39,160
with respect to real time. So is drifting meaning that it

47
00:02:39,160 --> 00:02:41,440
is not keeping up with the real time. It's either

48
00:02:41,440 --> 00:02:44,340
going faster than real time or it is going slower than

49
00:02:44,340 --> 00:02:47,140
the real time. It so happens that my, my branch's

50
00:02:47,140 --> 00:02:50,140
time is is perfectly in sync with the real time, but

51
00:02:50,140 --> 00:02:52,450
that doesn't help me. And this is a real world

52
00:02:52,450 --> 00:02:57,130
scenario that you have to worry about. And such anomalies occur

53
00:02:57,130 --> 00:03:04,093
due to two things. One is individual clock drifts. Because if you think about a

54
00:03:04,093 --> 00:03:07,369
clock, clock is a piece of circuitry, and

55
00:03:07,369 --> 00:03:10,372
you expect that for every second of real

56
00:03:10,372 --> 00:03:15,889
time, your clock is also going to click a tick by the same one second. But

57
00:03:15,889 --> 00:03:18,865
if it doesn't, your idea of real time

58
00:03:18,865 --> 00:03:22,744
is going to slowly drift. That is called individual

59
00:03:22,744 --> 00:03:26,250
clock drift. And also, there is a possibility that

60
00:03:26,250 --> 00:03:29,384
there could be a relative drift between the clocks

61
00:03:29,384 --> 00:03:33,140
that are there in different processors. This clock can

62
00:03:33,140 --> 00:03:36,150
be ticking at a particular rate, and this clock

63
00:03:36,150 --> 00:03:37,930
would be ticking at a different rate from my

64
00:03:37,930 --> 00:03:40,750
clock, and that can cause a second source of

65
00:03:40,750 --> 00:03:44,810
discrepancy. And these anomalies are nasty things that we

66
00:03:44,810 --> 00:03:47,800
have to avoid in order to make sure that in

67
00:03:47,800 --> 00:03:50,389
real world we can have some guarantees about what goes on.
