1
00:00:00,690 --> 00:00:03,240
Let's have a little bit
more fun with operators.

2
00:00:03,240 --> 00:00:05,760
We'll start by using just
literals to demonstrate,

3
00:00:05,760 --> 00:00:08,480
but these operators work with variables,
constants, and

4
00:00:08,480 --> 00:00:12,370
if you're accessing struct property
values like we've seen so far.

5
00:00:12,370 --> 00:00:17,111
First let's add two numbers together and
as you expect, 5 + 3 = 8.

6
00:00:17,111 --> 00:00:19,427
We can subtract two numbers.

7
00:00:19,427 --> 00:00:23,608
And notice if we use subtraction
between these two numbers, 5 and 2.5,

8
00:00:23,608 --> 00:00:27,478
where one is a floating point number,
we get a floating point result.

9
00:00:27,478 --> 00:00:31,098
And that's because Swift compiler's
smart enough to know the difference

10
00:00:31,098 --> 00:00:34,603
between subtracting two integers here
and getting an integer result and

11
00:00:34,603 --> 00:00:39,340
subtracting out a floating point value
here to compute a floating point result.

12
00:00:39,340 --> 00:00:41,240
We'll go ahead and do the same for
multiplication and

13
00:00:41,240 --> 00:00:45,360
division but here's something
that's a little bit interesting.

14
00:00:45,360 --> 00:00:49,920
How come when we divide 5 by 3,
we just get the value of 1?

15
00:00:49,920 --> 00:00:54,230
Well since the Swift compiler knows
both these literal values are integers,

16
00:00:54,230 --> 00:00:57,820
when it performs the division it
does not include the decimal part.

17
00:00:57,820 --> 00:00:59,690
Instead, it truncates
the decimal part and

18
00:00:59,690 --> 00:01:02,220
leaves you with this whole value of 1.

19
00:01:02,220 --> 00:01:05,090
Now let's see what happens with
the dreaded divide by 0 case.

20
00:01:05,090 --> 00:01:08,610
It looks like the Swift compiler
is smart enough to know

21
00:01:08,610 --> 00:01:12,550
that this is a divide by 0 and
it can't execute this.

22
00:01:12,550 --> 00:01:15,560
But enough with these literals,
let's try some actual variables now.

23
00:01:15,560 --> 00:01:19,540
I created these ahead of time so
I'm just going to paste them in, and

24
00:01:19,540 --> 00:01:22,880
we have a variable for
the value 5, 3, and 0.

25
00:01:22,880 --> 00:01:27,651
And now we're trying to do the same
5 / 0, or a divide by 0 case,

26
00:01:27,651 --> 00:01:30,530
but what's going on this time?

27
00:01:30,530 --> 00:01:34,410
Last time the Swift compiler was
able to detect the divide by 0.

28
00:01:34,410 --> 00:01:36,960
Well this time since
we're using a variable,

29
00:01:36,960 --> 00:01:40,730
the Swift compiler cannot
automatically detect the issue.

30
00:01:40,730 --> 00:01:44,390
Instead, the playground file tries to
run this code, and as you can see,

31
00:01:44,390 --> 00:01:48,420
the execution's interrupted
because it can't execute this.

32
00:01:48,420 --> 00:01:51,410
And we can tell that the execution of
the playground stopped, because if I try

33
00:01:51,410 --> 00:01:56,720
to go a line below and do anything, we
can see that it never reaches this line.

34
00:01:56,720 --> 00:01:58,610
It stops right here.

35
00:01:58,610 --> 00:02:00,919
So let's just remove this.

36
00:02:02,010 --> 00:02:03,080
And comment this line out.

37
00:02:04,120 --> 00:02:07,360
There's one more operator I want to
introduce which belongs with add,

38
00:02:07,360 --> 00:02:09,780
subtract, multiply and divide and

39
00:02:09,780 --> 00:02:14,160
that's the remainder operator,
also called the modulus operator.

40
00:02:14,160 --> 00:02:17,120
Many times you'll hear it called mod for
short.

41
00:02:17,120 --> 00:02:19,680
The mod operator allows us
to perform division and

42
00:02:19,680 --> 00:02:21,210
then return only the remainder.

43
00:02:21,210 --> 00:02:25,180
And this operator's really useful
when determining multiples or

44
00:02:25,180 --> 00:02:26,790
if a number's even or odd.

45
00:02:28,240 --> 00:02:31,070
By the way, the modulus
operator is the percent sign,

46
00:02:31,070 --> 00:02:35,540
and we can see if we mod 10 by
the number 2, the remainder is 0.

47
00:02:35,540 --> 00:02:38,340
So we know that 10's an even number.

48
00:02:38,340 --> 00:02:39,540
Let's try this with an odd number.

49
00:02:40,590 --> 00:02:43,400
And in this case, cause the result is 1,
we know that the number is odd.

50
00:02:44,500 --> 00:02:47,750
But you don't just have to do even and
odd, let's try and example for say,

51
00:02:47,750 --> 00:02:49,400
multiples of 5.

52
00:02:49,400 --> 00:02:52,760
We know that 5 is a multiple of 5,
but 6, 7, and 8 are not, and

53
00:02:52,760 --> 00:02:54,330
we can see the reminders here.
