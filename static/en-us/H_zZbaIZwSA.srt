1
00:00:00,120 --> 00:00:04,040
Here you can see Hierarchy Viewer,
lets you select from a list of devices

2
00:00:04,040 --> 00:00:06,080
both physical and virtual on the left,

3
00:00:06,090 --> 00:00:08,350
each of which then contains,
each of the running activities

4
00:00:08,350 --> 00:00:11,150
and applications running on that device.

5
00:00:11,150 --> 00:00:13,400
You simply select the activity 
from the application

6
00:00:13,400 --> 00:00:15,120
that you want to profile.

7
00:00:15,120 --> 00:00:19,150
Then the LoadView Hierarchy button here,
and you'll see a representation

8
00:00:19,150 --> 00:00:22,020
of the selected activity's 
entire View hierarchy

9
00:00:22,020 --> 00:00:24,720
represented here in the TreeView,
from left to right.

10
00:00:24,720 --> 00:00:28,110
You can see that the entire hierarchy
is also show here, in the overview,

11
00:00:28,110 --> 00:00:30,780
and the layout itself 
is shown in a wireframe here.

12
00:00:30,780 --> 00:00:33,293
Clicking on any view, 
at any point within the hierarchy,

13
00:00:33,293 --> 00:00:35,096
will show you what is displayed,

14
00:00:35,096 --> 00:00:37,699
showing us the number of Views 
which are contained within the hierarchy

15
00:00:37,699 --> 00:00:39,766
from this point onwards.

16
00:00:39,766 --> 00:00:41,863
You can also obtain
the performance metrics

17
00:00:41,863 --> 00:00:44,500
to find out how long it takes 
to measure, layout and draw

18
00:00:44,500 --> 00:00:46,650
each element of the hierarchy.

19
00:00:46,650 --> 00:00:49,410
It's a powerful tool, and you can
find out more about how to use it

20
00:00:49,410 --> 00:00:51,880
to optimize your layouts and Views
in the videos and guides

21
00:00:51,880 --> 00:00:54,140
linked to from the instructor notes below.

22
00:00:54,140 --> 00:00:58,490
For now, note that we can use it 
to find surprisingly deeply nested layouts

23
00:00:58,490 --> 00:00:59,984
that need to be flattened.

24
00:00:59,984 --> 00:01:02,116
For example, here we have
a layout we can describe

25
00:01:02,116 --> 00:01:03,900
using one of two techniques.

26
00:01:03,900 --> 00:01:07,590
One solution is using 
two nested LinearLayouts.

27
00:01:07,590 --> 00:01:10,716
But a better solution would be
using a RelativeLayout.

28
00:01:10,716 --> 00:01:13,280
The RelativeLayout is one level shallower.

29
00:01:13,280 --> 00:01:16,660
Another tip is to avoid using
the FrameLayout as the root for layout

30
00:01:16,660 --> 00:01:19,620
that will always be inserted 
as a child into another one.

31
00:01:19,620 --> 00:01:23,570
In these circumstances, the merge tag
is a better alternative.

32
00:01:23,570 --> 00:01:27,040
This will be eliminated when the layout 
is included into the parents' hierarchy.

33
00:01:27,040 --> 00:01:29,050
To help you remember
all of these tips and tips,

34
00:01:29,050 --> 00:01:32,270
Android has a powerful
static analysis tool called Lint.

35
00:01:32,270 --> 00:01:35,960
As you can see here in the Lint window,
in addition to the layout warnings

36
00:01:35,960 --> 00:01:37,990
we've already talked about, 
it also checks from everything

37
00:01:37,990 --> 00:01:40,833
from accessibility problems, 
missing translations,

38
00:01:40,833 --> 00:01:42,136
and hard coded strings.

39
00:01:42,136 --> 00:01:45,680
You can find all the things lint checks for
at the developer tools page

40
00:01:45,680 --> 00:01:47,510
linked to in the instructor notes.
