1
00:00:00,170 --> 00:00:01,120
For this module,

2
00:00:01,120 --> 00:00:05,080
you'll want to open up the playground
file entitled Lesson1_Strings.

3
00:00:05,080 --> 00:00:10,180
And then of course, you'll want to check
in your Editor's menu that down here at

4
00:00:10,180 --> 00:00:14,310
the second to the last item says,
Show Raw Markup.

5
00:00:14,310 --> 00:00:15,930
If you see a bunch of green comments,

6
00:00:15,930 --> 00:00:19,480
you're going to want to
click Show Rendered Markup.

7
00:00:19,480 --> 00:00:21,750
There's a lot of fun to be
had playing the strings and

8
00:00:21,750 --> 00:00:23,640
Swift strings are no exception.

9
00:00:23,640 --> 00:00:27,280
Earlier, you saw strings
defined as string literals.

10
00:00:27,280 --> 00:00:31,150
And you also saw Swift
style string concatenation.

11
00:00:31,150 --> 00:00:34,593
Because Swift string class is
built from Unicode scalar values,

12
00:00:34,593 --> 00:00:37,918
one can type emoji directly into
string literals, like this.

13
00:00:43,119 --> 00:00:47,322
Oh yeah, to bring up the emoji keyboard
like that, I do control, command,

14
00:00:47,322 --> 00:00:47,990
space bar.

15
00:00:49,240 --> 00:00:50,290
And then I can choose the heart.

16
00:00:51,460 --> 00:00:54,620
Another time saving feature of
Swift strings is support for

17
00:00:54,620 --> 00:00:56,710
string interpolation.

18
00:00:56,710 --> 00:00:59,730
In other words,
inserting values of variables and

19
00:00:59,730 --> 00:01:02,550
expressions directly
into string literals.

20
00:01:02,550 --> 00:01:06,429
Let's say we have a statement about how
much a particular dog eats per month.

21
00:01:07,520 --> 00:01:10,450
And remember you can
always see the result of

22
00:01:10,450 --> 00:01:12,200
the executed code over
here in the sidebar.

23
00:01:13,400 --> 00:01:16,530
Now let's say instead of Lulu
we want to know how much Ferris

24
00:01:16,530 --> 00:01:18,770
the Springerdoodle eats per month.

25
00:01:18,770 --> 00:01:21,790
Here I've declared
dogName as a variable and

26
00:01:21,790 --> 00:01:23,690
then I've inserted it into my string.

27
00:01:24,980 --> 00:01:28,770
And over here on the right you can see
that the string evaluates to Ferris eats

28
00:01:28,770 --> 00:01:31,570
25 pounds of dog food per month.

29
00:01:31,570 --> 00:01:33,930
We can add expressions
to our string as well.

30
00:01:33,930 --> 00:01:36,680
Let's say we're really only paying
attention to how much Ferris

31
00:01:36,680 --> 00:01:38,500
eats per day.

32
00:01:38,500 --> 00:01:42,130
This monthly consumption rate
can actually be evaluated as

33
00:01:42,130 --> 00:01:43,720
the string is built.

34
00:01:43,720 --> 00:01:49,150
And of course, I do that by typing
backslash, and then parentheses.

35
00:01:49,150 --> 00:01:54,020
And then between the parentheses,
I put the expression I want to evaluate.

36
00:01:54,020 --> 00:01:59,899
So pounds per day, Times days per month.

37
00:02:03,090 --> 00:02:05,960
And again, you can see
the output hasn't changed much.

38
00:02:07,290 --> 00:02:10,770
Now our doggie diet string
is much more customizable.

39
00:02:10,770 --> 00:02:15,810
For example if we want to calculate the
pounds per month eaten by little Frankie

40
00:02:15,810 --> 00:02:20,380
here, all we have to do is change
the value of pounds per day.

41
00:02:20,380 --> 00:02:25,320
Reassigned the dog named variable and
then re-evaluate our doggie diet string.

42
00:02:25,320 --> 00:02:27,790
And then over here we can

43
00:02:27,790 --> 00:02:31,190
see that little Frankie eats 7.5
pounds of dog food per month.
