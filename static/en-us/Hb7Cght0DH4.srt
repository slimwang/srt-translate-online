1
00:00:00,485 --> 00:00:03,620
Leanback provides a set of pre-built
widgets that are specially designed to

2
00:00:03,620 --> 00:00:05,450
help you create an Android TV app.

3
00:00:05,450 --> 00:00:08,600
Particularly, but not exclusively
one that's designed to browse and

4
00:00:08,600 --> 00:00:09,610
play media.

5
00:00:09,610 --> 00:00:12,760
This UI that you see here was
created entirely with Leanback.

6
00:00:12,760 --> 00:00:15,090
All we have to do is provide
the assets like images and

7
00:00:15,090 --> 00:00:17,210
instruct Leanback how
we want them laid out.

8
00:00:17,210 --> 00:00:19,885
We also get all of this
smooth animation for free.

9
00:00:19,885 --> 00:00:22,160
Let's talk briefly about
the principal widgets.

10
00:00:22,160 --> 00:00:24,660
Everything on the screen that you
see here is the browse fragment.

11
00:00:24,660 --> 00:00:26,220
It provides our basic layout.

12
00:00:26,220 --> 00:00:28,490
On the left, you can see
a bunch of column headers, and

13
00:00:28,490 --> 00:00:30,420
on the right you can see rows.

14
00:00:30,420 --> 00:00:33,610
Conceptually and behind the scenes, the
browse fragment is composed of a headers

15
00:00:33,610 --> 00:00:35,830
fragment on the left and
a rows fragment on the right.

16
00:00:35,830 --> 00:00:38,100
This is only important to know
because the headers fragment can be

17
00:00:38,100 --> 00:00:39,140
hidden if you'd like.

18
00:00:39,140 --> 00:00:41,888
And of course, each header is
tied to its own individual row.

19
00:00:41,888 --> 00:00:45,480
Beyond layout, browse fragment does
way more for us behind the scenes, and

20
00:00:45,480 --> 00:00:48,390
it actually contains the code for
all of these animations as well as for

21
00:00:48,390 --> 00:00:51,710
very efficient display of
large lists and media items.

22
00:00:51,710 --> 00:00:54,820
This is a card, and cards are a very
important part of the Leanback library.

23
00:00:54,820 --> 00:00:56,750
A card constitutes a small view.

24
00:00:56,750 --> 00:00:58,300
In the media browser application,

25
00:00:58,300 --> 00:01:00,920
you might use cards like this
to display songs and movies.

26
00:01:00,920 --> 00:01:03,230
If we select a card,
we'll see the details fragment.

27
00:01:03,230 --> 00:01:06,310
It's useful for, you guess it
showing more details about a card.

28
00:01:06,310 --> 00:01:09,810
In addition to details about a card,
the details fragment contains actions.

29
00:01:09,810 --> 00:01:12,400
Like watching a trailer or
buying or renting a movie.

30
00:01:12,400 --> 00:01:15,680
And if you scroll down,
to see a row of related videos.

31
00:01:15,680 --> 00:01:19,390
If we decide to watch a trailer,
we'll see the playback overlay fragment.

32
00:01:19,390 --> 00:01:22,520
Not surprisingly, this provides
controls for playing back media.

33
00:01:22,520 --> 00:01:23,580
Let's try it out.

34
00:01:23,580 --> 00:01:27,135
[SOUND] You'll notice that
after about five seconds,

35
00:01:27,135 --> 00:01:30,858
the UI will fade away so
the content is front and center.

36
00:01:30,858 --> 00:01:32,364
In addition to playback controls,

37
00:01:32,364 --> 00:01:34,840
you can add custom buttons
to the overlay fragment.

38
00:01:34,840 --> 00:01:36,670
For instance, to like or dislike media.

39
00:01:37,770 --> 00:01:40,280
The basic strategy for
building an app with Leanback

40
00:01:40,280 --> 00:01:44,160
is to wrap your media library, so it can
be displayed as a series of headers and

41
00:01:44,160 --> 00:01:46,160
cards on the browse fragment.

42
00:01:46,160 --> 00:01:48,250
We'll see how this works in
code in the next lesson, but

43
00:01:48,250 --> 00:01:50,920
first let's see how it works by design.

44
00:01:50,920 --> 00:01:54,520
Leanback follows the model view
presenter design pattern and

45
00:01:54,520 --> 00:01:57,440
if you're not familiar with them, a
design pattern is just a high level way

46
00:01:57,440 --> 00:01:59,770
of describing how code is structured.

47
00:01:59,770 --> 00:02:01,260
There are three pieces to start, and

48
00:02:01,260 --> 00:02:03,740
the good news is that they
pretty much all just sit there.

49
00:02:03,740 --> 00:02:06,060
By that I mean, they don't
take any actions on their own.

50
00:02:06,060 --> 00:02:07,510
First, we have a model.

51
00:02:07,510 --> 00:02:11,230
A model is just a fancy word for
a database, or a content provider, or

52
00:02:11,230 --> 00:02:13,900
however you decided to organize and
store your data.

53
00:02:13,900 --> 00:02:16,510
In this case,
let's say we have a database of movies.

54
00:02:16,510 --> 00:02:19,090
Each individual movie in the database
might have a text field for

55
00:02:19,090 --> 00:02:22,110
the title and a bitmap for
the box artwork.

56
00:02:22,110 --> 00:02:24,820
You can see a single movie
here displayed on this view.

57
00:02:24,820 --> 00:02:28,620
And a view is just a regular Android
view that's used to display some data.

58
00:02:28,620 --> 00:02:32,180
Here, let's say we use an image card
view that's included with Leanback.

59
00:02:32,180 --> 00:02:34,590
On your UI,
you create one of these views for

60
00:02:34,590 --> 00:02:36,440
each movie you'd like to display.

61
00:02:36,440 --> 00:02:40,290
Now, a presenter's job is to take an
item from the model, say, a movie, and

62
00:02:40,290 --> 00:02:41,540
map it to the view.

63
00:02:41,540 --> 00:02:44,830
Basically, all the presenter does is
say the title should go here, and

64
00:02:44,830 --> 00:02:46,500
the box artwork should go here.

65
00:02:46,500 --> 00:02:48,030
Simple, right?

66
00:02:48,030 --> 00:02:51,310
Now as I said at runtime,
all these pieces just hang out.

67
00:02:51,310 --> 00:02:54,830
They're orchestrated by another
class called an ObjectAdapter.

68
00:02:54,830 --> 00:02:56,990
An ObjectAdapter has two jobs.

69
00:02:56,990 --> 00:03:02,140
One, it collects item from the model,
and two it creates a view for each item.

70
00:03:02,140 --> 00:03:05,180
In order to create that
view it uses the presenter.

71
00:03:05,180 --> 00:03:08,150
In our application code,
we create an object adapter and

72
00:03:08,150 --> 00:03:10,330
give it a presenter in its constructor.

73
00:03:10,330 --> 00:03:13,200
Next, we add items from our
model to the ObjectAdapter

74
00:03:13,200 --> 00:03:14,930
that we'd like to be displayed.

75
00:03:14,930 --> 00:03:18,670
At runtime, Leanback uses our
object adapter to create views for

76
00:03:18,670 --> 00:03:20,310
our items on its fragments.

77
00:03:20,310 --> 00:03:22,500
In the next lesson, we'll see
how these concepts work in code.
