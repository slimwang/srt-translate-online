1
00:00:00,480 --> 00:00:04,458
So let's look at an example of how we use try. So here we've created a try block

2
00:00:04,458 --> 00:00:08,746
and everything inside this block will execute and it'll execute normally until

3
00:00:08,746 --> 00:00:12,349
there's an exception raised. If there's an exception raised, it will jump to

4
00:00:12,349 --> 00:00:16,610
look for an exception handler. And in this case we have an exception handler for

5
00:00:16,610 --> 00:00:20,509
the IO error exception. So if that's raised, it'll be handled here. And then

6
00:00:20,509 --> 00:00:25,255
after the tri block finishes we'll continue with the print. Note there's a few

7
00:00:25,255 --> 00:00:28,174
things in this code you might now have seen yet. You should be starting to get

8
00:00:28,174 --> 00:00:33,121
comfortable with that. If you are confused by things like, for example this line

9
00:00:33,121 --> 00:00:36,570
here. You can probably figure out on your what it does. Either looking through

10
00:00:36,570 --> 00:00:40,181
the documentation or trying it in the interpreter. So, lets try running this

11
00:00:40,181 --> 00:00:44,469
code, and I'm trying it in a directory that does not have Any trippy file and we

12
00:00:44,469 --> 00:00:48,891
can see what happens when this line executed, the exception was thrown it was an

13
00:00:48,891 --> 00:00:53,112
I O error exception that got bound to the variable E and then when we print out

14
00:00:53,112 --> 00:00:57,467
there, we can see error reading file, the message that came with the exception

15
00:00:57,467 --> 00:01:01,889
and then after that it doesn't return here, execution continues following the

16
00:01:01,889 --> 00:01:06,803
try block. The print statement. One of the things exceptions do, is make it much

17
00:01:06,803 --> 00:01:11,020
harder to follow the flow of execution of a program. Code can jump all around.

18
00:01:11,020 --> 00:01:15,253
It's different from procedures, which do make code jump around. But when we call

19
00:01:15,253 --> 00:01:18,517
a procedure normally and it returns normally, we know it's always going to come

20
00:01:18,517 --> 00:01:22,625
back to the same point. With exceptions, anywhere in here can jump to another

21
00:01:22,625 --> 00:01:28,590
place. So now, I've created a file called trippy, but I've made it unreadable.

22
00:01:28,590 --> 00:01:32,558
Don't worry if you don't understand these commands, these are just ways to

23
00:01:32,558 --> 00:01:37,391
create and file make it unreadable. And now, I am going to try again and we see,

24
00:01:37,391 --> 00:01:42,620
we still got the IO error exception but the message is different, Now we got a

25
00:01:42,620 --> 00:01:47,107
permission failure. Because we don't have permission to read the file that

26
00:01:47,107 --> 00:01:52,587
exists there. Let's make the file readable and try again. Now, we get something

27
00:01:52,587 --> 00:01:57,193
different. So now the open succeeded. We got to the next line. The next line

28
00:01:57,193 --> 00:02:02,727
does a read line. That succeeded. We read in the line, what a trip. And then we

29
00:02:02,727 --> 00:02:07,253
got to the next line which tries to convert that line, to a number, using the

30
00:02:07,253 --> 00:02:11,581
int constructer. That's through a Value Error exception. And so when an

31
00:02:11,581 --> 00:02:15,694
exception is raised inside a triblock, it jumps to the exception handlers. The

32
00:02:15,694 --> 00:02:20,025
IOError exception handler doesn't match the Value Error. So it doesn't handle

33
00:02:20,025 --> 00:02:24,306
it. There's no exception handler that does handle value error. So, that

34
00:02:24,306 --> 00:02:29,230
exception gets raised to the next level. In this case, causing the program to

35
00:02:29,230 --> 00:02:34,560
crash, and that's why instead of ever getting to continuing, we got this error

36
00:02:34,560 --> 00:02:36,293
when we ran the program.
