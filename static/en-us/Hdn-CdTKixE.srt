1
00:00:00,043 --> 00:00:02,221
So the first 2 we're talking about the amount of work.

2
00:00:02,221 --> 00:00:05,431
And the correct answer is it takes n - 1 operations.

3
00:00:05,431 --> 00:00:09,360
To add up n elements takes n - 1 adds.

4
00:00:09,360 --> 00:00:13,259
Next, is its work complexity order of n? Yes, it is.

5
00:00:13,259 --> 00:00:17,119
So the amount of work that we do is linear with respect to the size of the input.

6
00:00:17,119 --> 00:00:18,535
If we double the size of the input,

7
00:00:18,535 --> 00:00:21,760
we're going to double the number of additions that we do.

8
00:00:21,760 --> 00:00:25,795
Is its step complexity O(1), meaning independent of the size of input?

9
00:00:25,795 --> 00:00:30,085
No, its step complexity is also linear in the size of the input.

10
00:00:30,085 --> 00:00:35,126
As we double the size of the input, we'll double the number of steps to take to reduce all these items.

11
00:00:35,710 --> 00:00:41,027
So to sum up, our serial reduction algorithm has a work complexity of O(n).

12
00:00:41,027 --> 00:00:45,430
What that means is that the amount of work is linear in the size of the input.

13
00:00:45,430 --> 00:00:49,262
If we double the size of the input, we double the number of operations that we're doing.

14
00:00:49,262 --> 00:00:55,301
Our step complexity is also O(n), meaning again that if we double the size of the input

15
00:00:55,301 --> 00:00:58,772
we double the number of steps it takes to compute the output.
