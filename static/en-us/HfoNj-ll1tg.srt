1
00:00:00,000 --> 00:00:06,010
Let's consider the following graph and suppose we want to find a shortest tour for this graph,

2
00:00:06,010 --> 00:00:09,860
and in order to help with that, we first find the minimum spanning tree for the graph.

3
00:00:09,860 --> 00:00:14,810
So let's mark the edges that are part of the minimum spanning tree in purple here like so.

4
00:00:14,810 --> 00:00:19,490
So, if you are to take a tour along this minimum spanning tree, let's say starting at A,

5
00:00:19,490 --> 00:00:24,770
we might do something like this starting at A then through D and G and back to D

6
00:00:24,770 --> 00:00:32,670
through E through H back to E, B, C, F, and then all the way back along the route, back up to A.

7
00:00:32,670 --> 00:00:35,760
So, maybe you can see that there are some redundancies in this tour,

8
00:00:35,760 --> 00:00:40,140
for example, we go to D back down to G and then back up to D.

9
00:00:40,140 --> 00:00:43,520
So, instead of going along this tree route, let's optimize a bit,

10
00:00:43,520 --> 00:00:47,540
but instead of always following the minimum spanning tree,

11
00:00:47,540 --> 00:00:49,520
let's compute this tree route first,

12
00:00:49,520 --> 00:00:56,860
but then, instead of following it, we look at the next vertex in the tree route that we haven't gone to yet

13
00:00:56,860 --> 00:00:58,930
and we take the shortest path there.

14
00:00:58,930 --> 00:01:04,840
So, for example, we would start out at A and then the next vertex along the path is D, so we go there,

15
00:01:04,840 --> 00:01:06,910
and then G, so we go there,

16
00:01:06,910 --> 00:01:12,490
but then the next vertex that we haven't visited yet along the tree path is E not D

17
00:01:12,490 --> 00:01:14,990
and we can go there just by short circuiting here.

18
00:01:14,990 --> 00:01:18,460
So we cut D out and go straight to E and then we'd go to H,

19
00:01:18,460 --> 00:01:23,780
and again, the next unvisited vertex along the tree path is B not E,

20
00:01:23,780 --> 00:01:29,280
but there's no shorter path in this from H to B, so we would still follow it in this case.

21
00:01:29,280 --> 00:01:33,770
Then C and F would still be unvisited, so we would follow them exactly,

22
00:01:33,770 --> 00:01:36,060
but then the next unvisited vertex,

23
00:01:36,060 --> 00:01:40,910
well, is all the way back at A since we'd just say that the first vertex is unvisited.

24
00:01:40,910 --> 00:01:46,390
Well then, what we really want is the shortest path from F to A not necessarily along the tree route

25
00:01:46,390 --> 00:01:49,240
and you can see that shortest path is actually along up here.

26
00:01:49,240 --> 00:01:51,160
So, instead of following this tree path,

27
00:01:51,160 --> 00:01:55,040
we have a slightly shorter tour that sticks close to the tree path

28
00:01:55,040 --> 00:01:57,110
but it doesn't necessarily follow it exactly.

29
00:01:57,110 --> 00:02:01,200
Now, my questions then are what percentage improvement do we get

30
00:02:01,200 --> 00:02:04,600
in this tour versus the original tree path?

31
00:02:04,600 --> 00:02:09,389
And second, what approximation factor do we achieve in this specific instance?

32
00:02:09,389 --> 00:02:13,140
Now remember, in order to figure out the approximation factor,

33
00:02:13,140 --> 00:02:17,060
you'll need to calculate the optimal tour length for this graph.

34
00:02:17,060 --> 99:59:59,999
Please input your answers in the two boxes.
