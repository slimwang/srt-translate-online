1
00:00:00,000 --> 00:00:08,000
Since 3 coloring is an NP and SAT is NP complete, meaning that it's NP hard,

2
00:00:08,000 --> 00:00:13,000
it has to be the case that we could use SAT to solve 3 coloring problems,

3
00:00:13,000 --> 00:00:16,000
but it's actually a little bit interesting to see how you might do that.

4
00:00:16,000 --> 00:00:23,000
So let's take a look, here's a simple little graph and one, two, three, four nodes, four edges

5
00:00:23,000 --> 00:00:27,000
and imagine that we want to try to 3-color this graph.

6
00:00:27,000 --> 00:00:31,000
What we're going to do is we're going to create a ??? formula that is satisfiable

7
00:00:31,000 --> 00:00:36,000
if and only if this graph is 3 colorable, so that it's really the same problem,

8
00:00:36,000 --> 00:00:40,000
and the way that we're going to do that is we're going to create a bunch of boolean variables,

9
00:00:40,000 --> 00:00:47,000
12 of them to be exact, corresponding to each of the four nodes--a, b, c, and d,

10
00:00:47,000 --> 00:00:50,000
and for each node, we'll a boolean variable saying whether that node is

11
00:00:50,000 --> 00:00:54,000
red or green or yellow, the three colors.

12
00:00:54,000 --> 00:01:01,000
For example, assigning the variable a red to true, a green to false and a yellow to false

13
00:01:01,000 --> 00:01:06,000
means that we're coloring the a node red, and so once we've assigned true values,

14
00:01:06,000 --> 00:01:11,000
trues and falses to all 12 of these variables that corresponds perhaps to some coloring.

15
00:01:11,000 --> 00:01:16,000
In fact, you have to be a little bit careful here because if we assigned two of these to true,

16
00:01:16,000 --> 00:01:20,000
which is a perfectly reasonable thing to do in a boolean formula, you can't really interpret this

17
00:01:20,000 --> 00:01:27,000
as a coloring except for may be a is orange, but that's not really allowed.

18
00:01:27,000 --> 00:01:37,000
What we have to do now is given these 12 variables, we have to create a formula that is true

19
00:01:37,000 --> 00:01:46,000
if and only if it corresponds to a valid coloring, meaning that both exactly one of each of these

20
00:01:46,000 --> 00:01:49,000
triples the variables are true and there's no collisions--

21
00:01:49,000 --> 00:01:55,000
for example, we can't have a colored red and b colored red because they're connected by an edge.

22
00:01:55,000 --> 00:01:58,000
They will have to be different if they're connected by an edge.

23
00:01:58,000 --> 00:02:05,000
The formula for this can be generated automatically and I'll give you glimpse at it.

24
00:02:05,000 --> 00:02:12,000
Here it is, at least one version of it, and it's a little bit weird and complicated,

25
00:02:12,000 --> 00:02:16,000
but it actually falls into some nice structures.

26
00:02:16,000 --> 00:02:25,000
First there's a bunch of logic to say that it should be the case that say--

27
00:02:25,000 --> 00:02:30,000
the a red, a green, and a yellow variables, one of them should be true.

28
00:02:30,000 --> 00:02:37,000
If they're all false, then it's not telling us what color a should be, and it also has to be case

29
00:02:37,000 --> 00:02:41,000
that no pair of colors can be true for a given node.

30
00:02:41,000 --> 00:02:45,000
It can't be the case that both a red is true and a green is true, so that's bad.

31
00:02:45,000 --> 00:02:51,000
There has to be at least one true and not the case that both a is both red and green

32
00:02:51,000 --> 00:02:57,000
not the case that a is both red and yellow and not the case that both a is green and yellow,

33
00:02:57,000 --> 00:03:02,000
and we do that for all four of the nodes and that tells us that

34
00:03:02,000 --> 00:03:07,000
there's a meaningful color assignment to the nodes.

35
00:03:07,000 --> 00:03:10,000
Then we have some additional clauses that say--

36
00:03:10,000 --> 00:03:14,000
what can't be the case that a is red and b is red at the same time.

37
00:03:14,000 --> 00:03:19,000
It can't be the case that a is green and b is green at the same time and it can't be the case

38
00:03:19,000 --> 00:03:21,000
that a is yellow and b is yellow at the same time.

39
00:03:21,000 --> 00:03:25,000
What is that saying, that saying the color--whatever the color happens to be--

40
00:03:25,000 --> 00:03:32,000
for a it can't match the color of b and that's because they share an edge in the graph.

41
00:03:32,000 --> 00:03:38,000
For each of the edges in the graph, we have three of these statements to rule out

42
00:03:38,000 --> 00:03:42,000
all possible color matches, so there's three of these for one edge, two edge, three edge--

43
00:03:42,000 --> 00:03:45,000
there's four edges in the graph so we have four blocks of these.

44
00:03:45,000 --> 00:03:50,000
In this formula now as a whole has a satisfying assignment, has an assignment that makes

45
00:03:50,000 --> 00:03:56,000
this whole expression true if and only if there's a coloring, a 3 coloring of that graph.

46
00:03:56,000 --> 00:04:00,000
Now, in this case, I generated this formula by carefully looking at the graph

47
00:04:00,000 --> 00:04:04,000
and going back and forth in making the formula, but you can automate this idea

48
00:04:04,000 --> 00:04:06,000
by just generalizing the way that I did this here.

49
00:04:06,000 --> 00:04:10,000
Why don't you think about how to do that and I'll ask you a question

50
00:04:10,000 --> 00:04:12,000
just to make sure that you got the idea.
