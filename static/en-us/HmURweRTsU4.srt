1
00:00:00,390 --> 00:00:05,620
So we begin executing this instruction. It's a subtraction of 36 minus 3.

2
00:00:05,620 --> 00:00:11,230
That's, our result is going to be 33. And it takes only 1 cycle to do adds and

3
00:00:11,230 --> 00:00:14,450
subtracts. So this result will be broadcast in cycle 26.

4
00:00:14,450 --> 00:00:19,620
So now, the next thing that will happen is either this or

5
00:00:19,620 --> 00:00:25,470
this will broadcast. Cycle 26 is the next cycle. So let's see what happens then.

6
00:00:25,470 --> 00:00:30,800
In cycle 26, the subtract broadcast a value of 33. Under the name of ROB5.

7
00:00:30,800 --> 00:00:35,380
So we mark it as done. 33 gets put here and

8
00:00:35,380 --> 00:00:41,450
33 under the name ROB5 gets broadcast. And this instruction here is waiting for.

9
00:00:41,450 --> 00:00:45,720
That value. So we get 33 here, are no longer waiting for

10
00:00:45,720 --> 00:00:50,880
it. Oh, yes, and because this instruction has been dispatched during cycle 24.

11
00:00:50,880 --> 00:00:55,030
In cycle 25 and after was this reservation station has really been free.

12
00:00:55,030 --> 00:00:59,670
So this instruction, although it got now 33, still is not ready to dispatch,

13
00:00:59,670 --> 00:01:03,710
because it's still waiting for ROB1, so it cannot go. Okay? So

14
00:01:03,710 --> 00:01:08,840
in cycle 27,. Nothing happens. 28, nothing happens. In fact,

15
00:01:08,840 --> 00:01:12,830
the first time when something does happen from now is going to be cycle 42 when

16
00:01:12,830 --> 00:01:17,010
the result of ROB1 is brokers. So ledger's going to fast forward there. So

17
00:01:17,010 --> 00:01:22,620
let's say we are now in cycle 42, this divide finally brokers the value of nine,

18
00:01:22,620 --> 00:01:28,400
under the name ROB1. What happens is. When that happens, is we put the 9 here,

19
00:01:28,400 --> 00:01:34,840
we mark it as done and the 9 with ROB1 tag is broadcast on the Bus.

20
00:01:34,840 --> 00:01:37,620
And all the instructions that are waiting for that is going to,

21
00:01:37,620 --> 00:01:41,650
are going to capture that value. The only that really needs anything is this and

22
00:01:41,650 --> 00:01:46,130
it captures the value of 9 and is no longer waiting for anything. So

23
00:01:46,130 --> 00:01:52,070
in cycle 43, finally this ROB6 instruction, is going to begin execution.

24
00:01:52,070 --> 00:01:55,742
So with that let's move to Cycle 43.

25
00:01:55,742 --> 00:02:00,614
In cycle 43, we begin execution of this instruction. It's an add 33 and 9 so

26
00:02:00,614 --> 00:02:05,930
we end up with a 42 value here. This reservation station is now free.

27
00:02:05,930 --> 00:02:10,850
This is an add, so it's going to finish in cycle 44. There is another thing that

28
00:02:10,850 --> 00:02:15,470
happens in cycle 43, which is, all this time, we have been waiting to commit

29
00:02:15,470 --> 00:02:19,320
this instruction, because none of the other ones can commit until it commits.

30
00:02:19,320 --> 00:02:22,910
Finally, we have been in cycle 42 to write the results, so

31
00:02:22,910 --> 00:02:26,530
in cycle 43 we can actually commit this instruction, it's been marked as done.

32
00:02:26,530 --> 00:02:29,870
So pretty much the commit logic is kind of staring at this entry and waiting to

33
00:02:29,870 --> 00:02:34,780
see a cycle where, this entry has a check mark next to it. So what happens is

34
00:02:34,780 --> 00:02:40,100
finally we commit this in cycle 43. Now that this instruction commits in 43,

35
00:02:40,100 --> 00:02:44,460
what's going to happen is several things. First, the ROB entry for

36
00:02:44,460 --> 00:02:48,080
this instruction will be freed, but before we free the ROB entry, we need to

37
00:02:48,080 --> 00:02:51,490
update the register files, so what's going to happen is we take this 9,

38
00:02:51,490 --> 00:02:56,640
and we're going to write it to register R2. So register R2 is now going to

39
00:02:56,640 --> 00:03:01,510
be written as 9. Next, we're going to look at the RAT entry for R2,

40
00:03:01,510 --> 00:03:06,860
and see whether it's pointing to our ROB entry. Yes it is. So

41
00:03:06,860 --> 00:03:11,710
from now on, ROB1 will be free after this cycle. What we have to do,

42
00:03:11,710 --> 00:03:16,010
is make this R2 entry point back to the register file. You know,

43
00:03:16,010 --> 00:03:20,780
so the value of 9, that since recently has been, basically pointing to,

44
00:03:20,780 --> 00:03:26,050
you know, like. R2 is here. Now, it's no longer going to be here,

45
00:03:26,050 --> 00:03:30,190
so we need to make it point to R2 is here. I just kind of, deleted this, but

46
00:03:30,190 --> 00:03:32,720
this really means you can find it in the register file.

47
00:03:32,720 --> 00:03:36,640
So now really, we are ready to delete this stuff here.

48
00:03:36,640 --> 00:03:41,920
And now finally. The divide has fully committed. Okay? So now,

49
00:03:41,920 --> 00:03:46,160
if we had an exception or something, basically the divide looks like it's done.

50
00:03:46,160 --> 00:03:51,930
All of the other instructions really are done, except for the last one.

51
00:03:51,930 --> 00:03:55,840
But they're not considered done as far as the program order is concerned.

52
00:03:55,840 --> 00:03:59,780
Basically the commit didn't get there yet. So now let's move the cycle 44 and

53
00:03:59,780 --> 00:04:00,540
see what happens.
