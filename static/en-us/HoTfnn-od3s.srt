1
00:00:00,000 --> 00:00:04,000
It's not all perfect and easier and improved.

2
00:00:04,000 --> 00:00:06,000
Maybe we could talk about some of kind of the downsides,

3
00:00:06,000 --> 00:00:10,000
the things that are a little more difficult in App Engine

4
00:00:10,000 --> 00:00:16,000
as a result of how it's set up and how it's designed.

5
00:00:16,000 --> 00:00:20,000
The happy path is paved with concrete, and it has chains along the side,

6
00:00:20,000 --> 00:00:24,000
and so you really can't leave the happy path.

7
00:00:24,000 --> 00:00:29,000
So that's something you have to keep in mind.

8
00:00:29,000 --> 00:00:35,000
And there are failures from time to time.

9
00:00:35,000 --> 00:00:38,000
A query can work just fine, and then all of a sudden the next time

10
00:00:38,000 --> 00:00:42,000
you make exactly the same call, it doesn't work.

11
00:00:42,000 --> 00:00:47,000
And those are just things that you get in a big, eventually consistent

12
00:00:47,000 --> 00:00:50,000
kind of amorphous sort of machine.

13
00:00:50,000 --> 00:00:55,000
And so you have to deal with those, and so you start to a lot of times

14
00:00:55,000 --> 00:00:58,000
kind of want to do a looping sort of query

15
00:00:58,000 --> 00:01:01,000
where you're willing to do the query 3 times.

16
00:01:01,000 --> 00:01:04,000
And within the 3 times, you'll probably get the result,

17
00:01:04,000 --> 00:01:06,000
and the first one might fail.

18
00:01:06,000 --> 00:01:11,000
You just re-perform the same query before you let your request handler

19
00:01:11,000 --> 00:01:14,000
send an error response back to the user,

20
00:01:14,000 --> 00:01:16,000
which is actually kind of a good pattern

21
00:01:16,000 --> 00:01:20,000
because distributed computing, you're going to encounter failures.

22
00:01:20,000 --> 00:01:25,000
And you need to program defensively for those, like, system sort of failures,

23
00:01:25,000 --> 00:01:32,000
so being ready to do an issue and a retry and putting that into your normal call stack

24
00:01:32,000 --> 00:01:34,000
or your framework, I guess.

25
00:01:34,000 --> 00:01:39,000
It's easy to do, but it is something that when you really want your app to start running smoothly.

26
00:01:39,000 --> 00:01:44,000
And those are the sorts of things Udacity is dealing with or learning about now--

27
00:01:44,000 --> 00:01:48,000
to do the retries on things like queries.

28
00:01:48,000 --> 00:01:53,000
You have to be cognizant of how long a long-running task on a back end is going to take.

29
00:01:53,000 --> 00:01:58,000
You get a limit of--I think it's 10 minutes, which seems like a long time,

30
00:01:58,000 --> 00:02:03,000
but on a highly virtualized system, you can actually have a 10-minute long-running task.

31
00:02:03,000 --> 00:02:06,000
So you have to be prepared to shut it off early and then be ready to pick it back up

32
00:02:06,000 --> 00:02:13,000
with a subsequent request.

33
00:02:13,000 --> 00:02:18,000
One of the other things, I guess, would be a lot of people,

34
00:02:18,000 --> 00:02:23,000
when you get a bigger Python system, you want to have C modules pre-compiled,

35
00:02:23,000 --> 00:02:25,000
and you don't get that.

36
00:02:25,000 --> 00:02:31,000
So you kind of forget about those sorts of things.

37
00:02:31,000 --> 00:02:35,000
And then the biggest one, which I know that Google is addressing--

38
00:02:35,000 --> 00:02:42,000
and they have a beta program, and I'm very hopeful that it happens soon--

39
00:02:42,000 --> 00:02:48,000
is better SSL certificate support, especially for the custom domain.

40
00:02:48,000 --> 00:02:51,000
You get SSL on domain.appspot.com,

41
00:02:51,000 --> 00:02:55,000
but if you point a custom domain to it, you don't get SSL support for that,

42
00:02:55,000 --> 00:03:00,000
which is a big drawback, and it's something they obviously recognize and they are fixing.

43
00:03:00,000 --> 00:03:04,000
So hopefully in time--please, Google--that will be there.

44
00:03:04,000 --> 00:03:08,000
So one thing that I was skeptical about coming in is the database

45
00:03:08,000 --> 00:03:11,000
and how much access you have to your own data.

46
00:03:11,000 --> 00:03:15,000
Are there any limitations there that need to be thought about?

47
00:03:15,000 --> 00:03:17,000
Definitely.

48
00:03:17,000 --> 00:03:20,000
It's something that's probably worthy of a whole unit

49
00:03:20,000 --> 00:03:23,000
in a course about going deeper with App Engine.

50
00:03:23,000 --> 00:03:26,000
There are a few things that you kind of have to come to terms with,

51
00:03:26,000 --> 00:03:32,000
and they're trade-offs. Every life is trade-offs, especially with scaling a website.

52
00:03:32,000 --> 00:03:38,000
And for a lot. You have to put up with things like all queries have a limit of 1000 records.

53
00:03:38,000 --> 00:03:41,000
And that's before paging, which kind of sucks.

54
00:03:41,000 --> 00:03:47,000
So you could potentially pull out a result set that was 1000,

55
00:03:47,000 --> 00:03:49,000
none of--with just empty records.

56
00:03:49,000 --> 00:03:53,000
And then you have to page to the next one to get the 3 that match

57
00:03:53,000 --> 00:04:00,000
depending on how it is that the indexing and your collections or your model is structured.

58
00:04:00,000 --> 00:04:04,000
The backup and restore thing is real awkward.

59
00:04:04,000 --> 00:04:07,000
There's some backup and restore utilities built in

60
00:04:07,000 --> 00:04:11,000
but not if you wanted to just take the data on a nightly basis

61
00:04:11,000 --> 00:04:18,000
and sync it to a testing kind of QA, sort of, like a Prod-QA sort of version of your app.

62
00:04:18,000 --> 00:04:25,000
There are some tools out there that basically allow you to export the data as Python code,

63
00:04:25,000 --> 00:04:30,000
and then you could run it and import it into another app.

64
00:04:30,000 --> 00:04:33,000
But in the back of your head--

65
00:04:33,000 --> 00:04:36,000
On the one hand, it's nice to have some transparent costs.

66
00:04:36,000 --> 00:04:41,000
We can tell you pretty much exactly how much every one of our queries costs, which is great.

67
00:04:41,000 --> 00:04:43,000
The downside is that when you're doing something like a backup,

68
00:04:43,000 --> 00:04:47,000
in the back of your mind you're going, "Man, this is costing a lot of money."

69
00:04:47,000 --> 00:04:57,000
And so it's things you can get around but not as smoothly as just taking a hot backup

70
00:04:57,000 --> 00:05:02,000
of your local files on a MySQL database or something like that.

71
00:05:02,000 --> 00:05:06,000
The other one is that there's no real great data viewer.

72
00:05:06,000 --> 00:05:11,000
There are times when you're troubleshooting you really don't know what's going on.

73
00:05:11,000 --> 00:05:15,000
You want to just issue some SQL queries or some Mongo queries directly against the data

74
00:05:15,000 --> 00:05:17,000
to see what the data looks like.

75
00:05:17,000 --> 00:05:23,000
There is a data viewer on the dashboard,

76
00:05:23,000 --> 00:05:28,000
but it's not that great, and it only works with certain kinds of data types,

77
00:05:28,000 --> 00:05:30,000
and you can't really update anything.

78
00:05:30,000 --> 00:05:34,000
So if you really just need to flip some field--the status of something--

79
00:05:34,000 --> 00:05:38,000
and that way you can keep processing and then you can work on fixing your bug

80
00:05:38,000 --> 00:05:40,000
and getting it out later that day or tomorrow or whatever,

81
00:05:40,000 --> 00:05:45,000
you can't do that, which is frustrating.

82
00:05:45,000 --> 00:05:51,000
But on the other hand, it might force you to build some more administrative kind of features

83
00:05:51,000 --> 00:05:54,000
that if you can fix things easily with some duct tape,

84
00:05:54,000 --> 00:05:57,000
you end up kind of not really building a good administrative interface.

85
00:05:57,000 --> 00:06:02,000
So sometimes the only way you can do it is by building an administrative interface.

86
00:06:02,000 --> 00:06:07,000
Okay, yeah. So some of those limitations seem to not be without reason,

87
00:06:07,000 --> 00:06:10,000
but they are limitations. >>Yeah.

88
00:06:10,000 --> 00:06:13,000
It was funny when we were talking before this.

89
00:06:13,000 --> 00:06:17,000
Some of the Udacity guys had mentioned that if they were building a website

90
00:06:17,000 --> 00:06:21,000
that needed to scale to many, many users, App Engine would be a great choice.

91
00:06:21,000 --> 00:06:24,000
And then I kind of mentioned if I was building a toy website,

92
00:06:24,000 --> 00:06:28,000
App Engine would be my first go-to so I don't have to deal with any of that crud

93
00:06:28,000 --> 00:06:32,000
of installing databases and memcached and app service and frameworks and all that stuff.

94
00:06:32,000 --> 00:06:34,000
Setting up a deploy process, all that. >>Oh yeah.

95
00:06:34,000 --> 00:06:39,000
Deployment--man, that's something we haven't touched on in this or in any of my units

96
00:06:39,000 --> 00:06:42,000
is when you start having multiple machines,

97
00:06:42,000 --> 00:06:46,000
deploying code across multiple machines is something that you have to think about.

98
00:06:46,000 --> 00:06:49,000
And there's different strategies, and the versioning stuff is cool in App Engine.

99
00:06:49,000 --> 00:06:53,000
So I want to thank you for doing this with us. This is really cool.

100
00:06:53,000 --> 00:06:58,000
I've learned a lot from talking to you guys about how App Engine works,

101
00:06:58,000 --> 00:07:01,000
and I hope the students have got some better perspective

102
00:07:01,000 --> 00:07:04,000
on whether App Engine is the right choice for them.

103
00:07:04,000 --> 00:07:07,000
Absolutely. Thank you for having me, and thank you for your class.

104
00:07:07,000 --> 00:07:11,000
We've had really great feedback, and it's been fun having this sort of class. >>Cool.

105
00:07:11,000 --> 00:07:16,000
Glad to hear it. And so that wraps it up for Unit 7, which wraps it up for the whole course.

106
00:07:16,000 --> 00:07:19,000
So thank you, everybody, for participating this far.

107
00:07:19,000 --> 00:07:23,000
If you made it this far, you are a champion of web applications.

108
00:07:23,000 --> 00:07:27,000
And the only thing left for you is the final, which we'll get to next.
