1
00:00:00,235 --> 00:00:10,234
[MUSIC]

2
00:00:18,835 --> 00:00:22,990
My name's Keith Smiley and
I am an iOS Engineer at Lyft.

3
00:00:22,989 --> 00:00:27,498
I work on our iOS Platform Team so I
work on a lot of the infrastructure and

4
00:00:27,498 --> 00:00:29,392
architecture of the iOS app.

5
00:00:29,393 --> 00:00:39,496
[MUSIC]

6
00:00:39,496 --> 00:00:43,164
We decided to rewrite the Lyft app
in Swift for a lot of reasons.

7
00:00:43,164 --> 00:00:47,436
One of which was that as a team we were
extremely excited about the future of

8
00:00:47,436 --> 00:00:52,390
iOS development with Swift,
and another big portion was

9
00:00:52,390 --> 00:00:57,270
the code base that we were working in
that existed from the beginning at Lyft

10
00:00:57,270 --> 00:01:01,240
wasn't the best as we
continued scaling the team.

11
00:01:01,240 --> 00:01:04,650
It worked really well to
get Lyft off the ground and

12
00:01:04,650 --> 00:01:09,850
to where it was when I joined, but
it became immediately apparent as our

13
00:01:09,849 --> 00:01:15,019
team grew from three to ten people, that
it wasn't going to be productive for

14
00:01:15,019 --> 00:01:17,879
us to work day to day in the code base.

15
00:01:17,879 --> 00:01:19,519
So that was a huge portion of it.

16
00:01:19,519 --> 00:01:24,009
I think making the decision
to do a Swift re-write is

17
00:01:24,010 --> 00:01:26,680
definitely a big thing that you
really have to consider a lot of

18
00:01:26,680 --> 00:01:29,020
angles because it can be
extremely risky for the company,

19
00:01:29,019 --> 00:01:33,949
if your app is already 100,000 lines
of code in Objective C or something,

20
00:01:33,950 --> 00:01:37,620
just deciding to rewrite it
isn't the easiest thing to do.

21
00:01:37,620 --> 00:01:41,650
So, we were extremely lucky
to get off the ground and

22
00:01:41,650 --> 00:01:45,530
be successful with the rewrite whereas
a lot of times when you hear about

23
00:01:45,530 --> 00:01:49,269
all out rewrites you hear about them
in more of a negative light and

24
00:01:49,269 --> 00:01:53,479
I think it's just extremely lucky that
ours worked out the way that it did.

25
00:01:53,480 --> 00:01:56,120
I don't think there were too many
specific features that they gave

26
00:01:56,120 --> 00:01:58,540
us a lot of trouble.

27
00:01:58,540 --> 00:02:02,900
Whenever we had to interrupt with
some third party Objective-C library,

28
00:02:02,900 --> 00:02:05,180
we ran into some issues
there in the early days.

29
00:02:05,180 --> 00:02:10,110
But we weren't really using
the old implementation

30
00:02:10,110 --> 00:02:12,910
as kind of a reference
implementation for the rewrite.

31
00:02:12,909 --> 00:02:17,419
So, we kind of leaned on our QA team a
lot to be able to tell us how something

32
00:02:17,419 --> 00:02:20,409
should work as opposed to just
looking at the old code and

33
00:02:20,409 --> 00:02:23,520
trying to reason about it,
which I think helps a lot.

34
00:02:23,520 --> 00:02:27,185
So we were kind of,
instead of looking at how it was and

35
00:02:27,185 --> 00:02:28,520
just redoing it in the same way,

36
00:02:28,520 --> 00:02:31,909
we were totally rethinking how it was
written the first time and how we could

37
00:02:31,909 --> 00:02:35,250
rewrite it now to be better since we
knew more about the problems today.

38
00:02:36,500 --> 00:02:39,765
The benefits of rewriting our app
in Swift were pretty massive.

39
00:02:39,765 --> 00:02:43,509
Our app is 100% Swift,
we have no first party Objective-C code.

40
00:02:43,509 --> 00:02:46,629
Although of course we do rely on
a lot of third party libraries

41
00:02:46,629 --> 00:02:48,849
that are still written in Objective-C.

42
00:02:48,849 --> 00:02:51,799
Some of the issues that we've ran into
with the third party code has mostly

43
00:02:51,800 --> 00:02:56,060
been because the third party
libraries haven't been annotated for

44
00:02:56,060 --> 00:02:59,340
whether a type is optional or not,
when it's being imported into Swift.

45
00:02:59,340 --> 00:03:03,724
And, because of that, if we guessed
wrong about whether it was optional or

46
00:03:03,724 --> 00:03:05,375
not the app could crash at run time.

47
00:03:05,375 --> 00:03:08,935
So instead,
when we run into those cases we kind of

48
00:03:08,935 --> 00:03:12,295
treat everything as optional and just
have to deal with that in Swift, but

49
00:03:12,294 --> 00:03:14,484
at least we know we're
not going to crash.

50
00:03:14,485 --> 00:03:17,911
I think that the community is doing
a great job of convincing the objective

51
00:03:17,911 --> 00:03:21,299
seed developers to add null-ability
limitations to their libraries.

52
00:03:21,299 --> 00:03:24,625
Mainly because Swift has become so
pervasive that people keep asking for it

53
00:03:24,625 --> 00:03:28,290
on all of these popular libraries that
were originally written in Objective-C.

54
00:03:28,290 --> 00:03:35,539
[MUSIC]

55
00:03:35,539 --> 00:03:38,462
I pretty rarely find myself reading and
writing Objective-C,

56
00:03:38,462 --> 00:03:40,530
definitely reading it
more than writing it.

57
00:03:40,530 --> 00:03:44,370
Of course lots of stuff like
historical stack overflow questions and

58
00:03:44,370 --> 00:03:46,810
stuff like that is still
all written in Objective-C.

59
00:03:46,810 --> 00:03:49,729
And like I said, we do depend on
a lot of third party libraries

60
00:03:49,729 --> 00:03:51,000
that are written in Objective-C and

61
00:03:51,000 --> 00:03:53,960
often we need to dive into them to
try to find the source of a bug.

62
00:03:53,960 --> 00:03:56,760
I don't really miss
anything Objective-C.

63
00:03:56,759 --> 00:03:59,560
I didn't absolutely hate it
before Swift came around, but

64
00:03:59,560 --> 00:04:03,569
once you really work on an all Swift
app like ours where you can use

65
00:04:03,569 --> 00:04:05,739
all the Swift features as
soon as they're released,

66
00:04:05,740 --> 00:04:10,210
without having to worry about
interop issues it's really freeing.

67
00:04:10,210 --> 00:04:13,115
I think it's going to be a long
time before Swift entirely replaces

68
00:04:13,115 --> 00:04:19,079
Objective-C, mainly because there's so
much Objective-C code out there already.

69
00:04:19,079 --> 00:04:24,436
Not only third party apps, but also all
of the first party, like the iOS STK

70
00:04:24,435 --> 00:04:29,939
itself, or all of iOS presumably
is written in Objective-C as well.

71
00:04:29,939 --> 00:04:33,848
So I think that even if the third party
developers all switched to only using

72
00:04:33,848 --> 00:04:38,254
Swift, Apple's going to have to continue
maintaining Objective-C for a long time,

73
00:04:38,254 --> 00:04:39,513
just for their own use.

74
00:04:39,512 --> 00:04:46,944
[MUSIC]

75
00:04:46,944 --> 00:04:50,510
When we're hiring a developer for the
Lyft iOS team I think one of the most

76
00:04:50,511 --> 00:04:53,497
important things is your
collaboration skills, whether or

77
00:04:53,497 --> 00:04:57,400
not we think that we'd be able to work
with you day to day on a feature.

78
00:04:57,399 --> 00:04:59,899
Another big thing that I
don't think always comes up

79
00:04:59,899 --> 00:05:03,319
in the iOS community is a general
acumen for software engineering.

80
00:05:04,610 --> 00:05:05,600
Not particularly,

81
00:05:05,600 --> 00:05:08,640
how do you write different sorting
algorithms from scratch or something,

82
00:05:08,639 --> 00:05:13,669
but at least being able to think about
high level architecture of problems.

83
00:05:13,670 --> 00:05:17,300
So that when you go to implement a new
feature you can identify places that

84
00:05:17,300 --> 00:05:22,850
need to be improved, or rewritten
entirely depending on the case.

85
00:05:22,850 --> 00:05:26,780
When we're hiring developers
to work on our entirely Swift

86
00:05:26,779 --> 00:05:30,639
app we kind of expect them to have
some background in Objective-C

87
00:05:30,639 --> 00:05:33,240
just because that's been
the norm up to now.

88
00:05:33,240 --> 00:05:36,269
But that's not a huge requirement for
us anymore.

89
00:05:36,269 --> 00:05:40,209
As long as you have a very good
understanding of the iOS STK in general

90
00:05:40,209 --> 00:05:44,909
and then some of the gotchus around the
platform such as memory management which

91
00:05:44,910 --> 00:05:48,935
was more painfully obvious in
Objective-C than it is in Swift,

92
00:05:48,935 --> 00:05:52,098
then you totally have the skills
to be productive on our team.

93
00:05:52,098 --> 00:05:57,129
I think for developers who are starting
the iOS community having only

94
00:05:57,129 --> 00:06:00,029
really written Swift,
it is still important to at least

95
00:06:00,029 --> 00:06:04,569
spend some time knowing that you can
read Objective-C here if you need to,

96
00:06:04,569 --> 00:06:06,980
become at least familiar
with the syntax.

97
00:06:06,980 --> 00:06:09,740
And once you've learned Swift and
the iOS STK in general,

98
00:06:09,740 --> 00:06:15,069
it should be pretty easy to pick
up within some amount of time.

99
00:06:15,069 --> 00:06:18,111
And hopefully you can find a position
where you don't have to write

100
00:06:18,112 --> 00:06:18,771
it full time.

101
00:06:18,771 --> 00:06:21,600
But with many companies now,
that's not entirely

102
00:06:21,600 --> 00:06:25,758
the case because lots of companies
have some Swift and some Objective-C.

103
00:06:25,757 --> 00:06:28,342
So it might still be useful
to be able to write it.

104
00:06:28,343 --> 00:06:38,343
[MUSIC]

