1
00:00:00,300 --> 00:00:03,260
Let's look at how nested
ViewGroups would apply to our app.

2
00:00:03,260 --> 00:00:06,540
The information in our app looks like
it's arranged in a vertical column.

3
00:00:06,540 --> 00:00:09,120
So we can use a vertical
LinearLayout for this.

4
00:00:09,120 --> 00:00:09,770
This looks good so

5
00:00:09,770 --> 00:00:14,140
far because we have one view per
row in the vertical LinearLayout.

6
00:00:14,140 --> 00:00:17,630
But when we get to this row,
it's actually made up of multiple views.

7
00:00:17,630 --> 00:00:21,640
We can use a horizontal LinearLayout to
build out this row composed of a button,

8
00:00:21,640 --> 00:00:23,080
a TextView, and a button.

9
00:00:23,080 --> 00:00:25,711
So this LinearLayout would
be the second child in

10
00:00:25,711 --> 00:00:27,710
the bigger vertical LinearLayout.

11
00:00:28,910 --> 00:00:32,030
In a moment, I'm going to show you
three different XML layout files, and

12
00:00:32,030 --> 00:00:35,050
I want to ask you which one
you think accurately builds up

13
00:00:35,050 --> 00:00:36,860
the layout that we want.

14
00:00:36,860 --> 00:00:38,860
The catch is I don't want
you to copy these files and

15
00:00:38,860 --> 00:00:40,460
run them in Android Studio.

16
00:00:40,460 --> 00:00:43,160
I want you to make an educated
guess based off of reading and

17
00:00:43,160 --> 00:00:44,239
understanding this code.

18
00:00:45,460 --> 00:00:47,940
You can find this link
in instructor notes.

19
00:00:47,940 --> 00:00:54,950
It has three options listed,
Option A, Option B, and Option C.

20
00:00:54,950 --> 00:00:57,960
One of these options correctly
builds out the layout that we want.

21
00:00:59,500 --> 00:01:02,460
This is going to be challenging because
we haven't previously encountered

22
00:01:02,460 --> 00:01:04,000
XML with nested ViewGroups.

23
00:01:04,000 --> 00:01:07,440
We're going to split this
challenge across two quizzes, so

24
00:01:07,440 --> 00:01:09,800
I won't ask you to make a decision yet.

25
00:01:09,800 --> 00:01:13,390
For this first quiz, I want you to
sketch out the view hierarchy diagram

26
00:01:13,390 --> 00:01:15,600
for each of the XML files.

27
00:01:15,600 --> 00:01:18,550
Here's a quick spiel on
what view hierarchy means.

28
00:01:19,860 --> 00:01:20,720
You'll need paper and

29
00:01:20,720 --> 00:01:23,940
something to write with in order
to sketch out these diagrams.

30
00:01:23,940 --> 00:01:28,340
The way that Android organizes all these
views on screen is in a view hierarchy,

31
00:01:28,340 --> 00:01:30,650
or a tree structure of views.

32
00:01:30,650 --> 00:01:34,010
This is simply a diagram that
represents the view hierarchy.

33
00:01:34,010 --> 00:01:37,870
It shows the parent and
child relationships among the views.

34
00:01:37,870 --> 00:01:41,720
The root view of this whole
layout is a LinearLayout.

35
00:01:41,720 --> 00:01:45,770
It has three children, a RelativeLayout,
a TextView, and another TextView.

36
00:01:45,770 --> 00:01:49,842
And then this RelativeLayout in turn
has its own children, an ImageView and

37
00:01:49,842 --> 00:01:51,450
a TextView.

38
00:01:51,450 --> 00:01:53,170
For our Puddles the Pig app,

39
00:01:53,170 --> 00:01:56,620
this is the view hierarchy
that gets created by Android.

40
00:01:56,620 --> 00:02:00,999
We have a RelativeLayout as a root view,
and it has four children, an ImageView,

41
00:02:00,999 --> 00:02:03,606
a couple TextViews,
as well as a LinearLayout.

42
00:02:03,606 --> 00:02:07,210
And this LinearLayout, in turn,
has two ImageViews as its children.

43
00:02:08,820 --> 00:02:11,540
Now you understand what
a view hierarchy diagram is.

44
00:02:11,540 --> 00:02:14,800
By sketching out the diagram for
each of these XML layouts,

45
00:02:14,800 --> 00:02:19,650
you'll better understand which view is
the parent view, who the children are,

46
00:02:19,650 --> 00:02:21,830
and whether those children
have children views or not.

47
00:02:23,230 --> 00:02:27,520
If you still need a hint, here are some
examples of how to go from XML layouts

48
00:02:27,520 --> 00:02:29,050
to drawing a view hierarchy diagram.

49
00:02:30,200 --> 00:02:33,250
In this layout,
we have a root view of a LinearLayout.

50
00:02:33,250 --> 00:02:34,130
By the way, I added these

51
00:02:34,130 --> 00:02:36,650
dots here because I couldn't
fit all the code here.

52
00:02:36,650 --> 00:02:39,800
With a root view as a LinearLayout,
you draw that at the top of the tree.

53
00:02:40,900 --> 00:02:43,250
And then it contains two
children TextViews, so

54
00:02:43,250 --> 00:02:46,970
you draw those as children
underneath that, and that's it.

55
00:02:46,970 --> 00:02:49,230
This is a more complicated layout.

56
00:02:49,230 --> 00:02:51,602
We have a root view that's
a LinearLayout, and

57
00:02:51,602 --> 00:02:55,636
it contains three direct children,
two TextViews, and a RelativeLayout, and

58
00:02:55,636 --> 00:02:59,870
then inside that RelativeLayout, we have
an ImageView and a TextView as children.

59
00:02:59,870 --> 00:03:03,100
When you're done drawing out
the view hierarchy diagram for

60
00:03:03,100 --> 00:03:06,030
each option, then go ahead and
check these boxes to continue.

61
00:03:06,030 --> 00:03:09,230
In the following quiz,
I'll ask you to make a selection

62
00:03:09,230 --> 00:03:12,440
on which option is best, but for now,
you don't have to make a decision.
