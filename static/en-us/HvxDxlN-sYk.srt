1
00:00:00,880 --> 00:00:03,870
Before you go any further, let's take
a quick moment to look at the truth

2
00:00:03,870 --> 00:00:07,490
tables for Logical AND and Logical OR.

3
00:00:07,490 --> 00:00:10,179
Now truth tables are just the way
of representing all the possible

4
00:00:10,179 --> 00:00:13,179
combinations of inputs for
a logical expression.

5
00:00:13,179 --> 00:00:17,339
Here, I have the truth tables for
Logical AND and Logical OR.

6
00:00:17,339 --> 00:00:20,289
The way to read these tables is
the first two columns, A and

7
00:00:20,289 --> 00:00:23,390
B, are representative of Boolean values.

8
00:00:23,390 --> 00:00:27,519
When both of these values are combined,
the third column represents what

9
00:00:27,519 --> 00:00:31,062
the resulting outcome would be for
Logical AND and Logical OR.

10
00:00:31,062 --> 00:00:33,543
Now, what is interesting
about these tables, and

11
00:00:33,543 --> 00:00:36,775
you might have noticed this already
is that in some combinations,

12
00:00:36,776 --> 00:00:40,850
the value of B has no impact on
the result of the logical expression.

13
00:00:40,850 --> 00:00:44,140
Let me highlight these tables in
another way so you can see what I mean.

14
00:00:44,140 --> 00:00:45,000
There we go.

15
00:00:45,000 --> 00:00:46,250
So, if you look at these rows,

16
00:00:46,250 --> 00:00:50,579
you'll notice that regardless of the
value of B, the value of A is the value

17
00:00:50,579 --> 00:00:54,239
that's actually determining
the result of the logical expression.

18
00:00:54,240 --> 00:01:00,050
For logical AND, if the value of A is
false, the value of B doesn't matter.

19
00:01:00,049 --> 00:01:02,669
The combined value will always be false.

20
00:01:02,670 --> 00:01:06,763
And for Logical OR, if the value for
A is true, then the value of B doesn't

21
00:01:06,763 --> 00:01:09,884
matter because the combined
value will always be true.

22
00:01:09,885 --> 00:01:12,920
And this makes sense,
just think about it.

23
00:01:12,920 --> 00:01:15,590
In our previous example,
where we were trying to decide if

24
00:01:15,590 --> 00:01:19,560
Julia was going to the park,
two conditions needed to be true.

25
00:01:19,560 --> 00:01:23,049
Colt had to not be busy and
the weather had to be nice.

26
00:01:23,049 --> 00:01:26,140
If the value for the variable Colt
happened to be anything other than not

27
00:01:26,140 --> 00:01:29,594
busy, it wouldn't have mattered if
the weather was going to be nice.

28
00:01:29,594 --> 00:01:33,629
Julia would not have gone to the park
because both conditions weren't true.

29
00:01:33,629 --> 00:01:36,349
This type of behavior is
called short circuiting,

30
00:01:36,349 --> 00:01:40,399
because later arguments in a logical
expression are not considered because

31
00:01:40,400 --> 00:01:43,330
the first argument already
satisfies the condition.

32
00:01:43,329 --> 00:01:45,552
For logical AND,
if the first value is false,

33
00:01:45,552 --> 00:01:48,879
you don't need to see what
the later argument is going to be.

34
00:01:48,879 --> 00:01:52,069
The entire expression will
always evaluate to false.

35
00:01:52,069 --> 00:01:55,129
And for logical OR,
if the first value is true,

36
00:01:55,129 --> 00:01:57,729
you don't need to see what the later
arguments are going to be because

37
00:01:57,730 --> 00:02:00,140
the entire expression will
always evaluate to true.

