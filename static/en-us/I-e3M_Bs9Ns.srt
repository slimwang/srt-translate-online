1
00:00:00,690 --> 00:00:03,240
Let's have a little bit
more fun with operators.

2
00:00:03,240 --> 00:00:05,970
We'll start by using just
literals to demonstrate but

3
00:00:05,970 --> 00:00:07,610
these operators work with variables,

4
00:00:07,610 --> 00:00:11,885
constants and if you're accessing struct
property values like we've seen so far.

5
00:00:11,885 --> 00:00:14,473
First, let's add two numbers together.

6
00:00:14,473 --> 00:00:17,165
And as you expect, 5 + 3 is 8.

7
00:00:17,165 --> 00:00:18,695
We can subtract two numbers.

8
00:00:19,755 --> 00:00:22,295
And notice if we use subtraction
between these two numbers,

9
00:00:22,295 --> 00:00:27,275
5 and 2.5, where one is a floating point
number, we get a floating point result.

10
00:00:27,275 --> 00:00:30,715
And that's because the Swift compiler
is smart enough to know the difference

11
00:00:30,715 --> 00:00:34,480
between subtracting two integers here
and getting an integer result and

12
00:00:34,480 --> 00:00:39,340
subtracting out a floating point value
here to compute a floating point result.

13
00:00:39,340 --> 00:00:42,500
We'll go ahead and do the same for
multiplication and division.

14
00:00:42,500 --> 00:00:45,360
But here's something that's
a little bit interesting.

15
00:00:45,360 --> 00:00:49,930
How come when we divide 5 by
3 we just get the value of 1?

16
00:00:49,930 --> 00:00:53,020
Well, since the Swift compiler
knows both of these literal values

17
00:00:53,020 --> 00:00:54,230
are integers.

18
00:00:54,230 --> 00:00:57,820
When it performs the division,
it does not include the decimal part.

19
00:00:57,820 --> 00:01:00,005
Instead it truncates
the decimal part and

20
00:01:00,005 --> 00:01:02,072
leaves you with this whole value of 1.

21
00:01:02,072 --> 00:01:06,187
Now let's see what happens with
the dreaded divide by 0 case.

22
00:01:06,187 --> 00:01:10,394
It looks like the Swift compiler's smart
enough to know that this is a divide by

23
00:01:10,394 --> 00:01:13,860
0 and it can't execute this,
but enough with these literals.

24
00:01:13,860 --> 00:01:16,010
Let's try some actual variables now.

25
00:01:16,010 --> 00:01:19,440
I've created these ahead of time so
I'm just going to paste them in.

26
00:01:19,440 --> 00:01:22,860
And we have a variable for
the value 5, 3 and 0.

27
00:01:22,860 --> 00:01:26,424
And now we're trying to do
the same 5 divided by 0 or

28
00:01:26,424 --> 00:01:30,530
a divide by 0 case but,
what's going on this time?

29
00:01:30,530 --> 00:01:34,410
Last time the Swift compiler was
able to detect the divide by 0.

30
00:01:34,410 --> 00:01:36,960
Well this time since
we're using a variable,

31
00:01:36,960 --> 00:01:40,730
the Swift compiler cannot
automatically detect the issue.

32
00:01:40,730 --> 00:01:44,390
Instead, the playground file tries
to run this code and as you can see,

33
00:01:44,390 --> 00:01:48,420
the execution's interrupt
because it can't execute this.

34
00:01:48,420 --> 00:01:51,410
And we can tell that the execution of
the playground stopped because if I try

35
00:01:51,410 --> 00:01:53,160
to go a line below and

36
00:01:53,160 --> 00:01:58,610
do anything, we can see that it never
reaches this line, it stops right here.

37
00:01:58,610 --> 00:02:02,907
So let's just remove this and
comment this line out.

38
00:02:04,120 --> 00:02:07,360
There's one more operator I want to
introduce which belongs with add,

39
00:02:07,360 --> 00:02:09,820
subtract, multiply and divide and

40
00:02:09,820 --> 00:02:14,170
that's the remainder operator,
also called the modulus operator.

41
00:02:14,170 --> 00:02:17,120
Many times you'll hear it called mod for
short.

42
00:02:17,120 --> 00:02:19,670
The mod operator allows us
to perform division and

43
00:02:19,670 --> 00:02:22,920
then return only the remainder and
this operator's

44
00:02:22,920 --> 00:02:26,790
really useful when determining
multiples or if a number's even or odd.

45
00:02:28,280 --> 00:02:32,655
By the way, the modulus operator is the
percent sign and we can see if we mod

46
00:02:32,655 --> 00:02:38,340
10 by the number 2, the remainder is 0
so we know that 10's an even number.

47
00:02:38,340 --> 00:02:40,475
Let's try this with an odd number.

48
00:02:40,475 --> 00:02:44,265
And in this case, because the result
is 1, we know that the number's odd.

49
00:02:44,265 --> 00:02:45,980
But you don't just have to do even and
odd.

50
00:02:45,980 --> 00:02:49,400
Let's try an example for,
say, multiples of 5.

51
00:02:49,400 --> 00:02:52,635
We know that 5 is a multiple of five but
6, 7 and 8 are not and

52
00:02:52,635 --> 00:02:54,330
we can see the remainders here.
