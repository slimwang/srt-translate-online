1
00:00:00,000 --> 00:00:03,000
The architecture originally looked something like this
--we basically had one machine

2
00:00:03,000 --> 00:00:07,000
that we were renting from this company--I'm not even
going to mention their name, they're so bad.

3
00:00:07,000 --> 00:00:09,000
I'll try to only mention companies I like.

4
00:00:09,000 --> 00:00:12,000
But we are renting one machine and let's 
basically ran this, and this is all of Reddit.

5
00:00:12,000 --> 00:00:15,000
We're also running post quiz on this 
machine and that was it.

6
00:00:15,000 --> 00:00:18,000
We didn't have any fancy caching. 
I just used in-memory hash tables.

7
00:00:18,000 --> 00:00:21,000
The database had a fairly guessable structure.

8
00:00:21,000 --> 00:00:26,000
We had a table for links, we had a table for votes, 
and a table for users.

9
00:00:26,000 --> 00:00:28,000
That may have been it to begin with. 
There wasn't a whole lot to Reddit.

10
00:00:28,000 --> 00:00:30,000
We didn't have any comments for a long while, 
and the links and votes tables

11
00:00:30,000 --> 00:00:33,000
were basically kind of as I represented them in this lecture.

12
00:00:33,000 --> 00:00:37,000
These had things like score, title, URL. 
Vote basically had a length ID, a direction.

13
00:00:37,000 --> 00:00:40,000
User had a name and a password.

14
00:00:40,000 --> 00:00:43,000
Notice I didn't say password hash--
I actually stored the password

15
00:00:43,000 --> 00:00:45,000
and told you that story how I'd gotten 
trouble as a result of doing that.

16
00:00:45,000 --> 00:00:49,000
We actually did a lot of joins--this lasted 
probably about for 6 months or so.

17
00:00:49,000 --> 00:00:52,000
After 6 months, we hired a couple guys
--well, we kind of merged our company

18
00:00:52,000 --> 00:00:55,000
with another company called Infogami 
and that brought us another engineer

19
00:00:55,000 --> 00:00:59,000
named Aaron Swartz and we hired Chris Slowe 
who was doing a PHD at the time.

20
00:00:59,000 --> 00:01:03,000
So the four of us--me, Alexis, Aaron and Chris--
worked on Reddit then.

21
00:01:03,000 --> 00:01:06,000
And the first change that Aaron and I made together was

22
00:01:06,000 --> 00:01:08,000
we reroute Reddit from Lisp to Python.

23
00:01:08,000 --> 00:01:12,000
And then at about the same time, we pulled 
the database out of that one machine

24
00:01:12,000 --> 00:01:14,492
and put it on the second machine, 
and so now we had two machines

25
00:01:14,492 --> 00:01:17,000
with this hosting company--our app server and our DB.

26
00:01:17,000 --> 00:01:20,000
And the switch from Lisp to Python 
was kind of performance agnostic.

27
00:01:20,000 --> 00:01:23,000
Lisp was a faster language but our 
rewrite of Python was better,

28
00:01:23,000 --> 00:01:25,000
so the code actually run at about the same speed.

29
00:01:25,000 --> 00:01:30,000
Going from one machine to two machines gave us something on the order of 4x speed improvement.

30
00:01:30,000 --> 00:01:34,000
Remember how I talked in the last lecture about 
separation of services--separating our app server

31
00:01:34,000 --> 00:01:39,000
from our database gave us a tremendous 
speed improvement because these two

32
00:01:39,000 --> 00:01:43,000
pieces of software run totally different
--use computers in a totally different way.

33
00:01:43,000 --> 00:01:45,000
That was the first architecture change we made.

34
00:01:45,000 --> 00:01:48,000
I think we upgraded this machine once or twice 
to like a more beefy machine.

35
00:01:48,000 --> 00:01:52,000
At the time we are still plagued by downtime, 
whether it was our Lisp or a Python program,

36
00:01:52,000 --> 00:01:57,000
it would occasionally just crash and we'd have to get notified--more often I'd just get called.

37
00:01:57,000 --> 00:02:00,000
I would check the site or somebody would call me 
to tell me the site was down and I'd bring it back up.

38
00:02:00,000 --> 00:02:02,000
There's so many easy ways to avoid this scenario.

39
00:02:02,000 --> 00:02:06,000
It makes me cringe when I think about how much 
time and stress I spent on

40
00:02:06,000 --> 00:02:08,000
not knowing whether our website was running.

41
00:02:08,000 --> 00:02:11,000
The way we do it now is we use a 
piece of software called Supervise,

42
00:02:11,000 --> 00:02:15,000
which we integrated shortly thereafter. Basically what supervise does is that it watches a program.

43
00:02:15,000 --> 00:02:18,000
It runs a program, and if that program crashes, 
it restarts it.

44
00:02:18,000 --> 00:02:21,000
And that's really a nice setup to have, and we actually got to the point where we'd run

45
00:02:21,000 --> 00:02:25,000
two Python programs on one machine and 
then we had a little mini load balancer

46
00:02:25,000 --> 00:02:29,000
kind of running on that machine as well that would 
send traffic to both of these Pythons

47
00:02:29,000 --> 00:02:33,000
and if one of them died, Supervisor bring it back up.

48
00:02:33,000 --> 00:02:36,000
And so unless the whole machine died--luckily, 
it never actually happened to us.

49
00:02:36,000 --> 00:02:39,000
On the website would stay running. At that time, we still 
only had one database machine.

50
00:02:39,000 --> 00:02:43,000
We were very lucky, and we're very lucky that 
neither of these machines ever died

51
00:02:43,000 --> 00:02:47,000
Because if you lost this machine, the website would 
have been down until we could get a new one,

52
00:02:47,000 --> 00:02:49,000
and our hosting provider was very slow--it would've 
been very difficult.

53
00:02:49,000 --> 00:02:53,000
And if we had lost this one, our database machine, 
we would've lost the data--like forever.

54
00:02:53,000 --> 00:02:57,000
We weren't doing good backups back then and 
it was really fortunate that Reddit turned into a

55
00:02:57,000 --> 00:03:00,000
popular thing, and it's really cool that 
we still have those archived

56
00:03:00,000 --> 00:03:03,000
as a result of luck that we didn't lose those 
because you will lose machines.

57
00:03:03,000 --> 00:03:05,000
Machines die all the time. This is kind of a fact of life.

58
00:03:05,000 --> 00:03:09,000
I mean you're running these machines around 
the clock, high load, hard disk can fell,

59
00:03:09,000 --> 00:03:12,000
memory can fell--there's lots of things that can go wrong

60
00:03:12,000 --> 00:03:16,000
if you use a machine constantly on high load.
