1
00:00:00,250 --> 00:00:03,250
By the very nature, transactions are distributed

2
00:00:03,250 --> 00:00:06,430
at each node, and the transaction manager is

3
00:00:06,430 --> 00:00:10,360
responsible for all the clients over interactions that

4
00:00:10,360 --> 00:00:14,107
touches that particular node. For example, the client

5
00:00:14,107 --> 00:00:16,956
at this node could have done the following,

6
00:00:16,956 --> 00:00:19,728
he could have opened the window for reading

7
00:00:19,728 --> 00:00:21,967
Gmail. It could of opened a window in

8
00:00:21,967 --> 00:00:25,260
which is accessing file for editing,. Now the

9
00:00:25,260 --> 00:00:28,290
transaction manager node A, has to manage

10
00:00:28,290 --> 00:00:31,520
the transaction keys corresponding to each of the

11
00:00:31,520 --> 00:00:35,070
client server interactions, that is initiated by

12
00:00:35,070 --> 00:00:38,440
this client. Opening a window for Gmail is

13
00:00:38,440 --> 00:00:41,650
one interaction. Opening another window. Which is

14
00:00:41,650 --> 00:00:44,380
accessing a file for everything with another interaction.

15
00:00:44,380 --> 00:00:47,330
The transaction manager is responsible for maintaining the

16
00:00:47,330 --> 00:00:50,210
transaction trees for each one of those separately.

17
00:00:50,210 --> 00:00:53,520
And the transaction manager where the client

18
00:00:53,520 --> 00:00:57,090
server interaction originates. Is the owner as

19
00:00:57,090 --> 00:01:01,190
well as the coordinator. But it is designatable to some of the node as I

20
00:01:01,190 --> 00:01:04,257
mentioned already. And there is a graph

21
00:01:04,257 --> 00:01:08,010
structure for the transaction tree. And this is

22
00:01:08,010 --> 00:01:10,960
very useful in terms of reducing network

23
00:01:10,960 --> 00:01:15,510
communication because all the transaction manages. That form

24
00:01:15,510 --> 00:01:19,100
this interaction, don't have to always communicate

25
00:01:19,100 --> 00:01:22,570
with the coordinator. For instance, the transaction managers

26
00:01:22,570 --> 00:01:28,520
at nodes C and D, have been contacted because of IPC that originated at node B,

27
00:01:28,520 --> 00:01:33,880
to node C and D respectively. In that case, they only have to report To node

28
00:01:33,880 --> 00:01:36,910
B and they don't have to necessarily report

29
00:01:36,910 --> 00:01:40,400
to coordinator of the whole transaction sheet. So,

30
00:01:40,400 --> 00:01:43,170
this is helpful in reducing the amount of network

31
00:01:43,170 --> 00:01:47,160
communication. All transaction managers are not equal. I mentioned

32
00:01:47,160 --> 00:01:50,140
earlier that Brittle nodes in the system are the

33
00:01:50,140 --> 00:01:54,390
client nodes, and therefore, it is possible that a transaction

34
00:01:54,390 --> 00:01:58,210
manager, that originated at a client node may designate

35
00:01:58,210 --> 00:02:00,620
the coordinator to be a more robust node like

36
00:02:00,620 --> 00:02:02,670
the file server. And there are different kind of

37
00:02:02,670 --> 00:02:05,570
failures that can happen. There could be a failure of

38
00:02:05,570 --> 00:02:08,750
a participant node In the transaction. Or there

39
00:02:08,750 --> 00:02:10,710
could be a connection failure. Or it is

40
00:02:10,710 --> 00:02:14,840
possible that one of the subordinate transaction manager

41
00:02:14,840 --> 00:02:17,390
failed to report. All of these are sources

42
00:02:17,390 --> 00:02:20,090
of failure. Now, one of the things that

43
00:02:20,090 --> 00:02:22,320
the transaction manager at each node has to

44
00:02:22,320 --> 00:02:26,490
do, is to log periodically to persistent store,

45
00:02:26,490 --> 00:02:31,050
state that is created on behalf of the client.

46
00:02:31,050 --> 00:02:35,850
Or on behalf of the server whatever is happening at that node this transaction

47
00:02:35,850 --> 00:02:39,780
manager is responsible for creating checkpoint records

48
00:02:39,780 --> 00:02:43,190
for recovability reasons. And these checkpoint records

49
00:02:43,190 --> 00:02:48,932
will be useful for warding off against failures or partial recovery of work. So

50
00:02:48,932 --> 00:02:51,560
the distributed system failures can happen at

51
00:02:51,560 --> 00:02:55,750
any point. If for instance this node fails,

52
00:02:55,750 --> 00:02:58,070
then the transaction manager of this node has

53
00:02:58,070 --> 00:03:01,270
also failed, and this is something that this transaction

54
00:03:01,270 --> 00:03:03,840
manager is going to find out about because it doesn't

55
00:03:03,840 --> 00:03:07,880
hear any response from this transaction manager, but a

56
00:03:07,880 --> 00:03:11,270
transaction represented by this graph here, is not

57
00:03:11,270 --> 00:03:15,050
aborted at the first indication of failure of a

58
00:03:15,050 --> 00:03:17,990
node. And the reason is because you don't want

59
00:03:17,990 --> 00:03:21,390
error reporting to stop as a result of failure.

60
00:03:21,390 --> 00:03:24,070
You want the transaction to be aborted only

61
00:03:24,070 --> 00:03:28,770
upon termination as requested by the transaction manager,

62
00:03:28,770 --> 00:03:31,390
the coordinator of the transaction tree. And the

63
00:03:31,390 --> 00:03:33,790
reason is as I said, is to make sure

64
00:03:33,790 --> 00:03:37,150
that partial failures,they may have left states. You

65
00:03:37,150 --> 00:03:38,840
want to clean up all of that, and

66
00:03:38,840 --> 00:03:43,160
that will happen when a coordinator initiates termination

67
00:03:43,160 --> 00:03:44,820
of the transaction. We'll see that in a minute.
