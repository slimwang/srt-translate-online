1
00:00:00,450 --> 00:00:04,483
So we will have a running example of, how that the muscles [UNKNOWN] work so

2
00:00:04,483 --> 00:00:07,660
that whenever we do something, kind of, to explain it, we

3
00:00:07,660 --> 00:00:12,030
will also show how it works. So, this is an example of how the issue is working.

4
00:00:12,030 --> 00:00:17,000
First, this is going to be our issue Q. I'm showing four instructions here.

5
00:00:17,000 --> 00:00:20,060
This is the first instruction. This is the second one, third one and so on.

6
00:00:20,060 --> 00:00:23,380
So, we will issue in program order which means the first instruction that we're

7
00:00:23,380 --> 00:00:27,240
going to be issue is going to be this F2 equals F4 plus F1.

8
00:00:27,240 --> 00:00:30,320
This is really an add but I'm writing it this way because it's more compact.

9
00:00:31,380 --> 00:00:36,020
Next, for each of the faulting point registers which we're going to name F1,

10
00:00:36,020 --> 00:00:40,144
F2, F3 and F4. There is a register alias table, or

11
00:00:40,144 --> 00:00:44,849
RAT where we're going to keep which instructions supposed to produce that

12
00:00:44,849 --> 00:00:49,050
register. If there is nothing here, that actually points to the register file,

13
00:00:49,050 --> 00:00:52,290
so pretty much if there is nothing here in F1, that's going to mean that you

14
00:00:52,290 --> 00:00:56,530
can just find the value for F1 in the actual F1 in the register file.

15
00:00:56,530 --> 00:01:01,480
This is a register file we have four registers and this is their actual values.

16
00:01:01,480 --> 00:01:04,099
When we go through the example we will actually compute with them.

17
00:01:04,099 --> 00:01:09,140
So again this is the register file. Again the RAT when it's empty says that

18
00:01:09,140 --> 00:01:13,130
basically this means F1 can just be that from the register file. You don't have

19
00:01:13,130 --> 00:01:17,710
wait for it. And finally we are going to have our reservation stations.

20
00:01:17,710 --> 00:01:22,140
We going to name them RS1, 2, 3 for the other reservation stations and 4 and

21
00:01:22,140 --> 00:01:25,860
5 for the multiplication reservation station. So we really have 5 reservation

22
00:01:25,860 --> 00:01:31,650
stations, but note that you can use only these three for adds and only three for

23
00:01:31,650 --> 00:01:35,810
multiply and divides. Now we are ready to actually issue an instruction so

24
00:01:35,810 --> 00:01:40,870
again this is going to be the first one we issue. The first step is to

25
00:01:40,870 --> 00:01:46,300
take it from the instruction buffer. The next step is to look at the RAT and

26
00:01:46,300 --> 00:01:51,040
find whether our inputs are ready or not. And in this case,

27
00:01:51,040 --> 00:01:56,170
both of the inputs are ready. F1 and F4 are both available. So

28
00:01:56,170 --> 00:02:02,650
we're going to say that this is. And add and we are going to take the value for,

29
00:02:02,650 --> 00:02:08,130
in this case, F4 and F1, and that is going to be 0.71 and

30
00:02:08,130 --> 00:02:12,590
it is going to be 3.14, and place the instruction in the reservation station,

31
00:02:12,590 --> 00:02:15,590
of course that assumes that there is a reservation station available, we

32
00:02:15,590 --> 00:02:20,170
will see eventually, what happens when there isn't any. And the final step for

33
00:02:20,170 --> 00:02:25,200
register renaming is to say that the result of the instruction F2 is going to

34
00:02:25,200 --> 00:02:30,940
come from now on, from reservation station 1. So here, we will write, RS1.

35
00:02:30,940 --> 00:02:37,130
So future instructions that want F2 are not going to read minus 1.

36
00:02:37,130 --> 00:02:39,670
There going to wait for this result to be produced.

37
00:02:39,670 --> 00:02:44,500
So this is the reining in of the very first instruction. One final step that we

38
00:02:44,500 --> 00:02:48,450
will do of course is remove this instruction from the issue queue and

39
00:02:48,450 --> 00:02:51,480
what's going to happen now is this is going to shift down but for

40
00:02:51,480 --> 00:02:53,940
my example that's going to be very difficult to do so

41
00:02:53,940 --> 00:02:56,490
I'm just going to kind of cross out this instruction. So this is,

42
00:02:56,490 --> 00:02:59,840
this just means that you know, this instruction has been removed from the issue

43
00:02:59,840 --> 00:03:03,810
queue. To make things more interesting for the remaining instructions and

44
00:03:03,810 --> 00:03:07,850
also to see what happens when an instruction is renamed, let's issue one or

45
00:03:07,850 --> 00:03:12,110
two more instructions. So let's issue the next instruction, which is this one.

46
00:03:12,110 --> 00:03:15,990
This is a divide. We need to find the free reservation station here,

47
00:03:17,110 --> 00:03:22,050
say it's a divide. F2 and F3 are going to be the parameters for

48
00:03:22,050 --> 00:03:27,370
this instruction. F2 comes from RS1 so we cannot simply read this value here.

49
00:03:27,370 --> 00:03:32,240
We're going to say here that RS1 is what we are waiting for

50
00:03:32,240 --> 00:03:35,878
but F3 is available so we're going to get 2.72 from the registry file,

51
00:03:35,878 --> 00:03:41,940
and we now mark this instruction as,

52
00:03:41,940 --> 00:03:45,330
we're going to basically take it out of the issue queue and this is so

53
00:03:45,330 --> 00:03:50,720
very easy to forget but when we do that. We need to mark that the result,

54
00:03:52,830 --> 00:03:57,130
the F1 is from now on not going to be coming from here. It's going to be coming

55
00:03:57,130 --> 00:04:02,590
from reservation station 4. And we're going to issue this instruction too.

56
00:04:02,590 --> 00:04:09,520
It's a subtraction so it's going to go here. F1 and F2 are the parameters,

57
00:04:09,520 --> 00:04:12,720
we see that neither of those two can be read from the register files, so

58
00:04:12,720 --> 00:04:15,410
what we'll going to do is were going to mark here that that,

59
00:04:15,410 --> 00:04:19,820
that the first parameter is going to be produced by RS4, the second one is

60
00:04:19,820 --> 00:04:25,800
going to be produced by RS1, we'll going to then mark it. F4 is coming

61
00:04:25,800 --> 00:04:29,950
from RS2,. And we're going to remove this instruction from the issue queue.

62
00:04:29,950 --> 00:04:33,870
Of course, more instructions are probably going to come this way, but we're

63
00:04:33,870 --> 00:04:37,668
not going to look at that. Because again, that, that too many instructions for

64
00:04:37,668 --> 00:04:43,650
this example. Now let's say that there wasn't an issue slot here. We then.

65
00:04:43,650 --> 00:04:47,960
Couldn't issue the next instruction in the next cycle, until we are actually

66
00:04:47,960 --> 00:04:51,540
done executing one, one of these two. I'm not going to do that but just,

67
00:04:51,540 --> 00:04:54,550
just keep in mind that when you want to issue an instruction you first have to

68
00:04:54,550 --> 00:04:59,020
check whether reservation station is available. If not then we simply cannot

69
00:04:59,020 --> 00:05:03,340
issue that instruction. Let's issue it now because we do have room for it.

70
00:05:03,340 --> 00:05:10,510
It's an addition. Of F2 and F3. F2 comes from reservation station 1.

71
00:05:10,510 --> 00:05:15,350
F3 comes from the register file. So we're just going to take the 2.72.

72
00:05:15,350 --> 00:05:20,300
We're going to then rename F1 to point to this result. And

73
00:05:20,300 --> 00:05:25,303
now we see that F1 is already renamed to reservation station 4.

74
00:05:25,303 --> 00:05:31,350
That's basically, if you want to use F1, since this instruction,

75
00:05:31,350 --> 00:05:35,820
you would be waiting for it's result, but now F1 is being basically renamed to

76
00:05:35,820 --> 00:05:38,540
another reservation station, so this is how registering and

77
00:05:38,540 --> 00:05:43,190
naming here works in Tomasulo's algorithm, so what we are going to do is we

78
00:05:43,190 --> 00:05:47,420
are going to basically override this. With the name of this reservation station,

79
00:05:47,420 --> 00:05:52,530
which is RS3. And now we have issued all of our four instructions.

80
00:05:52,530 --> 00:05:58,640
In a real processor you would issue one instruction each cycle.

81
00:05:58,640 --> 00:06:01,890
And probably some of these instructions would have executed by the time we

82
00:06:01,890 --> 00:06:04,640
issue all of them but I just wanted to show you how issue works if,

83
00:06:04,640 --> 00:06:07,250
for example, nothing could execute for some reason. Now that we

84
00:06:07,250 --> 00:06:11,230
have gone through an example of issuing, let's see what the next step is
