1
00:00:00,000 --> 00:00:03,000
Now, I should say that if we take this grammar here,

2
00:00:03,000 --> 00:00:08,000
and if I have this function to define grammars, and if I write a function to parse,

3
00:00:08,000 --> 00:00:14,000
I can take this and if I have an expression like m * x + b, I'm going to parse it just great.

4
00:00:14,000 --> 00:00:18,000
Unfortunately, with this description just as it is,

5
00:00:18,000 --> 00:00:23,000
I would have trouble with m * x + b with spaces in between it,

6
00:00:23,000 --> 00:00:27,000
because nowhere here did I say that spaces can occur between tokens.

7
00:00:27,000 --> 00:00:31,000
In some grammars you're free to put spaces everywhere,

8
00:00:31,000 --> 00:00:33,000
and in other grammars you aren't.

9
00:00:33,000 --> 00:00:39,000
If I want this grammar function to be useful, I should be able to tell which is which.

10
00:00:39,000 --> 00:00:43,000
I'm going to show a new version of grammar that takes that into account.

11
00:00:43,000 --> 00:00:47,000
Here it is. There are two things you should notice about it right away.

12
00:00:47,000 --> 00:00:50,000
First is that I add an optional parameter to say you can specify

13
00:00:50,000 --> 00:00:53,000
what white space is allowed in between tokens.

14
00:00:53,000 --> 00:00:58,000
Here it's saying s* is allowed--any number of spaces--zero or more.

15
00:00:58,000 --> 00:01:01,000
You could change that if you have a different type of grammar you're defining.

16
00:01:01,000 --> 00:01:04,000
Secondly, have much longer documentation here--

17
00:01:04,000 --> 00:01:07,000
a documentation string describing what the language is.

18
00:01:07,000 --> 00:01:12,000
Third, I've added one more statement here, which says if there are any tabs in the input,

19
00:01:12,000 --> 00:01:15,000
replace them with spaces. Why did I do that?

20
00:01:15,000 --> 00:01:20,000
Notice that I'm splitting here an arrow surrounded by spaces

21
00:01:20,000 --> 00:01:22,000
and an or bar surrounded by spaces.

22
00:01:22,000 --> 00:01:26,000
If somebody had written something and used a tab there rather than a space,

23
00:01:26,000 --> 00:01:30,000
that would be really hard to debug. I don't want to have to force them to debug it.

24
00:01:30,000 --> 00:01:34,000
I want to do the debugging for them and make that not be an error at all.
