1
00:00:00,212 --> 00:00:04,380
So let's summarize the big ideas of all-pairs N-body include.

2
00:00:04,380 --> 00:00:07,149
This might not be the most efficient algorithm. It's not.

3
00:00:07,149 --> 00:00:09,227
But it's both simple and high performance.

4
00:00:09,227 --> 00:00:11,761
So if you implement this, you'll find that you're actually able

5
00:00:11,761 --> 00:00:15,953
to sustain a significant fraction of the peak theoretical value of the GPU.

6
00:00:15,953 --> 00:00:19,995
The real advantage here is that we have a very large amount of parallelism in this problem

7
00:00:19,995 --> 00:00:22,795
that we're able to exploit well in our implementation.

8
00:00:22,795 --> 00:00:26,629
The interesting part of this implementation is how to structure the ample parallelism

9
00:00:26,629 --> 00:00:28,407
that is available in this problem.

10
00:00:28,407 --> 00:00:30,307
And the big idea we discussed is the tradeoff

11
00:00:30,307 --> 00:00:34,940
between exploiting the maximum amount of parallelism and doing more work per thread.

12
00:00:34,940 --> 00:00:38,080
And there's many problems where increasing the amount of work per thread

13
00:00:38,080 --> 00:00:41,326
and reducing the amount of parallelism is really the right thing to do

14
00:00:41,326 --> 00:00:45,124
because of the speed of communicating results within a single thread

15
00:00:45,124 --> 00:00:48,000
is faster than communicating between threads.
