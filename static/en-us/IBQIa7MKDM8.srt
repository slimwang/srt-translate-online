1
00:00:00,012 --> 00:00:03,192
>> With this in mind, your next assignment requires you to use the data file

2
00:00:03,192 --> 00:00:06,417
you've parsed to render the few images on the screen. You're going to need to

3
00:00:06,417 --> 00:00:09,686
fill out the two functions below to properly draw images on the screen. Now,

4
00:00:09,686 --> 00:00:13,272
before you get started, let's talk about something real quick. Note that, before

5
00:00:13,272 --> 00:00:16,820
now, your artists were actually generating assets referencing loose files. And

6
00:00:16,820 --> 00:00:19,778
artists create some sort of texture, they put it on disk, and then they

7
00:00:19,778 --> 00:00:23,766
reference an object to that texture. Well, of course, there's a post-process.

8
00:00:23,766 --> 00:00:27,182
We've all crammed that all into a small little box, and we now have a missing

9
00:00:27,182 --> 00:00:30,788
correlation. The artist file still is going to reference the loose asset. But

10
00:00:30,788 --> 00:00:34,215
we've got it sitting around in a larger texture. How do we make a connection

11
00:00:34,215 --> 00:00:38,161
between the two? The drawSprite function needs to fix this. It assumes that it's

12
00:00:38,161 --> 00:00:41,943
going to be given a spritename, which represents the name of the loose asset

13
00:00:41,943 --> 00:00:45,787
file as well as the position X and position Y on where it wants to render it on

14
00:00:45,787 --> 00:00:49,432
the canvas. Since we're just given a spitename, we need to map where that

15
00:00:49,432 --> 00:00:53,232
spritename exists inside of the atlases that we've loaded. Now, for your

16
00:00:53,232 --> 00:00:57,097
benefit, we're going to help you out with this. Taking a look at the top of the

17
00:00:57,097 --> 00:01:01,123
file, we define a global dictionary object that represents every sprite sheet

18
00:01:01,123 --> 00:01:05,424
that's been loaded. In the load function for sprite sheet, we go ahead and add

19
00:01:05,424 --> 00:01:09,712
this sprite sheet into the global array, setting the sheet name as the key for

20
00:01:09,712 --> 00:01:13,587
the dictionary element. What this will allow you to do is when you're given the

21
00:01:13,587 --> 00:01:16,997
spritename inside of the draw function, you can iterate through all of the

22
00:01:16,997 --> 00:01:20,462
sprite sheets and for each sprite sheet, determine whether or not the given

23
00:01:20,462 --> 00:01:24,062
spritename exists in the sprites that have been defined for that sheet. This

24
00:01:24,062 --> 00:01:27,857
should be pretty straightforward since we've already covered the defined sprite

25
00:01:27,857 --> 00:01:31,628
function and you already have a list that includes a name. Once the drawSprite

26
00:01:31,628 --> 00:01:35,340
function figures out what atlas this given sprite is actually in, it can pass

27
00:01:35,340 --> 00:01:39,342
that data to drawSpriteInternal, handing off the sprite information, what atlas

28
00:01:39,342 --> 00:01:42,996
sheet its coming from, as well as the position X and Y that was given to us from

29
00:01:42,996 --> 00:01:46,750
drawSprite. Drawspriteinternal should actually do the heavy lifting of

30
00:01:46,750 --> 00:01:50,650
positioning the element, and drawing it to the world, taking advantage of the

31
00:01:50,650 --> 00:01:54,490
draw image API that we just covered with all of its new fancy bells and whistle

32
00:01:54,490 --> 00:01:55,230
parameters.
