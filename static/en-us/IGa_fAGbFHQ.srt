1
00:00:01,160 --> 00:00:03,469
Structs are a great way to
encapsulate values, but

2
00:00:03,469 --> 00:00:05,410
we can take this one step further.

3
00:00:05,410 --> 00:00:08,610
Let's modify the original syntax for
creating a struct.

4
00:00:08,610 --> 00:00:12,110
Right now, we know that a struct
has the struct keyword, and

5
00:00:12,110 --> 00:00:15,380
then we give the name of the struct,
followed by variables or

6
00:00:15,380 --> 00:00:20,210
constants of any type, as many as we
want, and these are known as properties.

7
00:00:20,210 --> 00:00:22,830
So I'm going to go ahead and
make a quick change to this.

8
00:00:22,830 --> 00:00:24,060
Here's the difference.

9
00:00:24,060 --> 00:00:27,500
With this syntax, we can see that
a struct can not only contain variables

10
00:00:27,500 --> 00:00:30,820
and constants, but
instances of any type.

11
00:00:30,820 --> 00:00:34,630
That means you can have structs that
contain structs that contain structs.

12
00:00:34,630 --> 00:00:37,630
Essentially structs on
structs on structs.

13
00:00:37,630 --> 00:00:40,650
Let's say we have this struct
representing a song, and

14
00:00:40,650 --> 00:00:45,520
inside the struct we have property for
the song's title, its length, and

15
00:00:45,520 --> 00:00:48,410
also properties for
the artist's first and last name.

16
00:00:49,540 --> 00:00:53,670
So as we define a struct like this,
maybe we decide that we want to include

17
00:00:53,670 --> 00:00:57,230
some more information about the artist,
like their age, and their hometown.

18
00:00:58,300 --> 00:01:01,490
We can go ahead and
add these properties like so, but

19
00:01:01,490 --> 00:01:05,349
this is beginning to look exactly like
the problem we had before structs.

20
00:01:05,349 --> 00:01:07,350
We just have a bunch of variables and
constants,

21
00:01:07,350 --> 00:01:09,920
and they're starting to
get a little disorganized.

22
00:01:09,920 --> 00:01:12,700
And all this related information
could continue to grow and

23
00:01:12,700 --> 00:01:14,600
get more unmanageable.

24
00:01:14,600 --> 00:01:18,390
The best way to handle this is by
pulling the artist data out of the song

25
00:01:18,390 --> 00:01:21,710
struct and creating a separate
struct that represents an artist.

26
00:01:22,970 --> 00:01:25,560
There we go, now we have
an artist struct with first name,

27
00:01:25,560 --> 00:01:27,940
last name, age, and home town.

28
00:01:27,940 --> 00:01:28,590
And actually,

29
00:01:28,590 --> 00:01:33,030
we could probably get rid of this
prefix because that would be redundant.

30
00:01:33,030 --> 00:01:34,600
Now here's the powerful part.

31
00:01:34,600 --> 00:01:39,680
Within the song struct, we can have our
own property, which itself is a struct.

32
00:01:39,680 --> 00:01:41,570
So, let's do that now.

33
00:01:41,570 --> 00:01:44,570
So now the song struct itself
contains an artist, and

34
00:01:44,570 --> 00:01:46,510
this is really nice and elegant.

35
00:01:46,510 --> 00:01:49,430
And as we'll see later,
expanding this to support

36
00:01:49,430 --> 00:01:53,980
multiple artists is actually
a quite intuitive process as well.

37
00:01:53,980 --> 00:01:58,060
So how would we access the properties
of a struct within a struct?

38
00:01:58,060 --> 00:02:00,610
Let's go ahead and
see a code example to explain.

39
00:02:01,740 --> 00:02:03,830
First, we'll create an artist struct.

40
00:02:03,830 --> 00:02:06,150
How about country music
artist Garth Brooks?

41
00:02:07,190 --> 00:02:09,699
We will use the syntax
we've seen before.

42
00:02:09,699 --> 00:02:11,120
For the first name, we've given Garth.

43
00:02:11,120 --> 00:02:13,710
For the last name, Brooks.

44
00:02:13,710 --> 00:02:17,030
Age 53, and hometown is Tulsa, Oklahoma.

45
00:02:17,030 --> 00:02:21,270
And this is according to Wikipedia when
I looked it up a couple of minutes ago.

46
00:02:21,270 --> 00:02:22,730
And now that we have our artist struct,

47
00:02:22,730 --> 00:02:25,870
creating a song struct
becomes pretty simple.

48
00:02:25,870 --> 00:02:28,337
Let's create a struct for
his song Thunder Rolls.

49
00:02:29,490 --> 00:02:32,210
So, we'll use the song
name Thunder Rolls,

50
00:02:32,210 --> 00:02:36,230
which has a length of 3:42, and
we could represent this as a number,

51
00:02:36,230 --> 00:02:39,240
but we're choosing to do it
as a string for right now.

52
00:02:39,240 --> 00:02:43,170
And the last property that this
initializer needs is an artist, and

53
00:02:43,170 --> 00:02:46,930
lo and behold, we have this artist
instance right here, called Garth.

54
00:02:46,930 --> 00:02:49,900
So, we'll use Garth, and there we go.

55
00:02:49,900 --> 00:02:52,110
We have an instance of a song struct.

56
00:02:52,110 --> 00:02:55,550
Now, to access the information about
the artist contained within is

57
00:02:55,550 --> 00:02:58,210
pretty straightforward and
uses the dot operator again.

58
00:02:59,260 --> 00:03:03,990
So we'll start with thunderRolls.artist.

59
00:03:03,990 --> 00:03:06,705
And if we go and
we look to see what it contains,

60
00:03:06,705 --> 00:03:09,960
we can see all the properties
of the artists within.

61
00:03:09,960 --> 00:03:13,120
And if we want to take this one step
further, we can use another dot

62
00:03:13,120 --> 00:03:16,050
operator to access one of
the properties within artist,

63
00:03:16,050 --> 00:03:18,960
like last name in this case,
which is Brooks.

64
00:03:18,960 --> 00:03:21,980
So I'm sure you can start thinking
of some pretty complex and

65
00:03:21,980 --> 00:03:24,810
cool relationship of
structs within structs.
