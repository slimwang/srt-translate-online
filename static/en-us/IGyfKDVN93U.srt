1
00:00:00,150 --> 00:00:01,260
In an earlier lesson,

2
00:00:01,260 --> 00:00:04,950
we described the process like
an order of toys in a toy shop.

3
00:00:04,950 --> 00:00:07,760
In this lesson, we will see how
processes can communicate with

4
00:00:07,760 --> 00:00:10,110
each other during their execution.

5
00:00:10,110 --> 00:00:13,960
But first let's see how inter-process
communication is achieved in a toy shop

6
00:00:13,960 --> 00:00:15,280
illustration.

7
00:00:15,280 --> 00:00:18,560
IPC is like working
together in the toy shop.

8
00:00:18,560 --> 00:00:21,670
First, the workers can
share the work areas.

9
00:00:21,670 --> 00:00:23,840
The workers can call each other.

10
00:00:23,840 --> 00:00:28,130
And finally, the interactions among the
workers requires some synchronization.

11
00:00:28,130 --> 00:00:31,560
Looking at this list, it is fairly
obvious that the workers have many

12
00:00:31,560 --> 00:00:35,380
options in terms of how they
can interact with one another.

13
00:00:35,380 --> 00:00:39,390
When sharing a work area, the workers
can communicate amongst each other

14
00:00:39,390 --> 00:00:44,450
by leaving common parts and tools on
the table to be shared among them.

15
00:00:44,450 --> 00:00:48,480
Second, the workers can directly
communicate by explicitly requesting

16
00:00:48,480 --> 00:00:52,640
something from one another, and
then getting the required response.

17
00:00:52,640 --> 00:00:56,240
And finally, good communication
using either one of these methods

18
00:00:56,240 --> 00:01:00,200
requires some synchronization so that
a worker knows when the other one has

19
00:01:00,200 --> 00:01:03,610
finished talking or the other one
has finished with a particular tool.

20
00:01:03,610 --> 00:01:07,760
One way of thinking about this is that
a worker may say I will start a step

21
00:01:07,760 --> 00:01:09,500
once you finish yours.

22
00:01:09,500 --> 00:01:12,960
As we will see, processes can also
interact amongst each other and

23
00:01:12,960 --> 00:01:15,430
work together in similar ways.

24
00:01:15,430 --> 00:01:19,290
First, processes can have a portion
of physically shared memory,

25
00:01:19,290 --> 00:01:24,650
and any data they both need to access
will be placed in such shared memory.

26
00:01:24,650 --> 00:01:27,230
We will discuss this
further in this lesson.

27
00:01:27,230 --> 00:01:31,550
Second, processes can explicitly
exchange messages, requests, and

28
00:01:31,550 --> 00:01:34,390
responses via message passing

29
00:01:34,390 --> 00:01:38,650
mechanisms that are supported through
certain APIs like like sockets.

30
00:01:38,650 --> 00:01:42,480
For both of these methods, processes
may need to wait on one another and

31
00:01:42,480 --> 00:01:46,510
may need to rely on some synchronization
mechanism like mutexes to

32
00:01:46,510 --> 00:01:49,370
make sure that the communication
proceeds in a correct manner.
