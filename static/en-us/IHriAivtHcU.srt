1
00:00:00,790 --> 00:00:02,150
Hey there, I'm sitting with Puff, and

2
00:00:02,150 --> 00:00:06,460
he is a Firebase engineer at Google who
will hopefully be able to help me with

3
00:00:06,460 --> 00:00:08,170
a security issue that
I'm having with my app.

4
00:00:09,170 --> 00:00:10,010
>> Let's try.

5
00:00:10,010 --> 00:00:13,770
>> Yes, so let me explain a little
bit about what's going on.

6
00:00:13,770 --> 00:00:17,490
So I basically have two issues
that are very interconnected, and

7
00:00:17,490 --> 00:00:22,590
they all boil down to the fact that I'm
using the user's e-mail as basically

8
00:00:22,590 --> 00:00:23,430
in place of their uid.

9
00:00:23,430 --> 00:00:26,170
So the first thing that we do in the app

10
00:00:26,170 --> 00:00:28,452
is when they sign up with an e-mail and
password.

11
00:00:28,452 --> 00:00:31,470
I have this really nice
flow where I basically

12
00:00:31,470 --> 00:00:34,130
use Firebase's reset
password functionality

13
00:00:34,130 --> 00:00:38,370
to make sure that the user actually owns
the e-mail that they say that they do.

14
00:00:38,370 --> 00:00:42,700
But I realized when I was writing
the security rules, that if somebody

15
00:00:42,700 --> 00:00:47,645
isn't using my client app, and they're
instead either just writing their own

16
00:00:47,645 --> 00:00:52,650
JavaScript or using a badly made app
of some other variety, that they

17
00:00:52,650 --> 00:00:56,810
could get around this flow that I have,
this really nice flow that I've set up.

18
00:00:56,810 --> 00:00:59,506
So I realize there's no way to
really trust that the user owns

19
00:00:59,506 --> 00:01:01,730
the email that they said they did.

20
00:01:01,730 --> 00:01:03,150
And that on top of that,

21
00:01:03,150 --> 00:01:06,630
I've got the email basically
everywhere in the security rules.

22
00:01:06,630 --> 00:01:09,280
And I just don't know
how secure that is,

23
00:01:09,280 --> 00:01:12,248
how to make that secure
in the security rules.

24
00:01:12,248 --> 00:01:15,128
So you are a security rules guru.

25
00:01:15,128 --> 00:01:16,300
Can you help me?

26
00:01:17,580 --> 00:01:19,350
>> That sounds to like a good challenge.

27
00:01:19,350 --> 00:01:21,006
Okay, let's take it one step at a time.

28
00:01:21,006 --> 00:01:22,346
>> Okay [LAUGH].

29
00:01:22,346 --> 00:01:27,440
>> So the first thing is indeed your
e-mail verification flow, right?

30
00:01:27,440 --> 00:01:32,280
Because you are using
Firebase's reset password flow,

31
00:01:32,280 --> 00:01:36,580
which is great and it's a great use
of that flow in your Android app.

32
00:01:36,580 --> 00:01:40,460
But the problem that you run into
now is thhat since the code runs

33
00:01:40,460 --> 00:01:42,650
on the user's phone
in their Android app,

34
00:01:42,650 --> 00:01:47,540
you have to trust the user to write back
their e-mail address into the database.

35
00:01:47,540 --> 00:01:51,580
And that is where you now have
a security problem is that correct?

36
00:01:51,580 --> 00:01:55,160
>> Yes, I mean if they're using the app,
things should be fine, but

37
00:01:55,160 --> 00:01:58,090
if they're not using the app,
if they just write their own JavaScript.

38
00:01:58,090 --> 00:01:59,160
>> Exactly, so and

39
00:01:59,160 --> 00:02:04,240
this is what we see very, very often
with developers that are using Firebase.

40
00:02:04,240 --> 00:02:08,139
You want to trust that it's your
code modifying the database.

41
00:02:08,139 --> 00:02:10,590
But there's really, since Firebase
is a cloud-based database,

42
00:02:10,590 --> 00:02:14,280
there is no way to be guaranteed
that it's your code that's writing.

43
00:02:14,280 --> 00:02:18,360
The only thing you know is which
user is writing to that database.

44
00:02:18,360 --> 00:02:20,620
And that's what you see with
the Android app, right?

45
00:02:20,620 --> 00:02:24,730
You can verify that it's the user
that signed into the Android app

46
00:02:24,730 --> 00:02:26,520
that is writing the e-mail address.

47
00:02:26,520 --> 00:02:29,359
And you can do the same, no matter if
they wrote their own Android app or

48
00:02:29,359 --> 00:02:31,208
even if they were using
a JavaScript client.

49
00:02:31,208 --> 00:02:34,720
You can verify that it's that user
that's writing the email address.

50
00:02:34,720 --> 00:02:39,820
What you can even validate is that what
they're writing is an email address.

51
00:02:39,820 --> 00:02:42,508
You can validate that
there's a at in there, right.

52
00:02:42,508 --> 00:02:45,728
You can validate the value.

53
00:02:45,728 --> 00:02:49,568
But you cannot verify that it's
actually the correct email address.

54
00:02:49,568 --> 00:02:53,580
That that's where you're essentially
losing the security battle.

55
00:02:53,580 --> 00:02:55,420
>> Yeah, I mean we're doing
that type of stuff for

56
00:02:55,420 --> 00:02:57,940
validating that it looks
like an e-mail address.

57
00:02:57,940 --> 00:03:02,910
So basically what I'm hearing is that
it is either very hard or impossible

58
00:03:02,910 --> 00:03:07,050
to do this kind of stuff on the client
side or with the security rules.

59
00:03:07,050 --> 00:03:07,720
Is that true?

60
00:03:07,720 --> 00:03:12,320
>> Yeah, the problem indeed is that
you must verify the e-mail address

61
00:03:12,320 --> 00:03:13,950
in an environment that you trust.

62
00:03:13,950 --> 00:03:18,250
And you should not trust
the user's Android phone.

63
00:03:18,250 --> 00:03:21,560
So the only option there is actually
to take the same flow that you have

64
00:03:21,560 --> 00:03:25,230
on the phone and
move it to a trusted environment.

65
00:03:25,230 --> 00:03:27,235
And typically then you
think of a server,

66
00:03:27,235 --> 00:03:30,858
right, where you essentially take
the same flow, and you run through it.

67
00:03:30,858 --> 00:03:32,694
So the user, right,

68
00:03:32,694 --> 00:03:38,510
you sent them an email with
a password reset type thing in there.

69
00:03:38,510 --> 00:03:40,690
Essentially a shared secret.

70
00:03:40,690 --> 00:03:45,636
And they can only validate that
they own that e-mail address by

71
00:03:45,636 --> 00:03:50,598
typing that secret code into
some interface that you defined.

72
00:03:50,598 --> 00:03:52,518
The flow is exactly what you do today.

73
00:03:52,518 --> 00:03:56,991
The difference is that it now runs on
an environment that you can trust, and

74
00:03:56,991 --> 00:04:00,670
that means that it runs under
somebody else's identity.

75
00:04:00,670 --> 00:04:03,480
So that's also how you secure
this flow in the security rules,

76
00:04:03,480 --> 00:04:08,270
is that you verify that it's
written from a trusted identity and

77
00:04:08,270 --> 00:04:12,960
not from just the user that is
running the app on his Android phone.

78
00:04:12,960 --> 00:04:16,050
>> So I really like what you're saying
that basically the flow itself doesn't

79
00:04:16,050 --> 00:04:16,740
have to change,

80
00:04:16,740 --> 00:04:20,190
we can probably use at least similar
code to what we already have.

81
00:04:20,190 --> 00:04:23,340
The thing that makes me nervous
is when you say a server.

82
00:04:23,340 --> 00:04:28,370
So how sort of hheavyweight
are we talking about?

83
00:04:28,370 --> 00:04:30,730
What would I need to do to
set up something like this?

84
00:04:30,730 --> 00:04:34,700
>> Yeah, and this is a very common
question we get them on firebase,

85
00:04:34,700 --> 00:04:37,650
as soon as we mention
Running server code.

86
00:04:37,650 --> 00:04:40,590
This is not your typical
infrastructure server.

87
00:04:40,590 --> 00:04:43,740
This is essentially a trusted device

88
00:04:43,740 --> 00:04:47,870
that runs to same type of code that
you would run on the Android phone or

89
00:04:47,870 --> 00:04:51,030
on a web page, but
it's now runs in a trusted environment.

90
00:04:51,030 --> 00:04:53,000
So you could run this,

91
00:04:53,000 --> 00:04:57,130
I always say that a lot of my
maintenance scripts run in JSFiddles.

92
00:04:57,130 --> 00:04:58,490
I'm not saying you should do that.

93
00:04:58,490 --> 00:05:01,580
But since I don't myself run,
these are for

94
00:05:01,580 --> 00:05:06,270
my own research type databases,
since DRs are not really production.

95
00:05:06,270 --> 00:05:09,070
I just run to maintenance
whenever I feel like it.

96
00:05:09,070 --> 00:05:13,230
But it is trusted, because only
I have access to these scripts.

97
00:05:13,230 --> 00:05:15,168
So only I can run them.

98
00:05:15,168 --> 00:05:19,073
Just like that you could run them on
a small Google Compute Engine instance,

99
00:05:19,073 --> 00:05:21,036
for example, or on an EC2 instance.

100
00:05:21,036 --> 00:05:24,501
And it can really be like this smallest
one you that you can get there because

101
00:05:24,501 --> 00:05:26,096
you don't need to do a lot of work.

102
00:05:26,096 --> 00:05:30,016
Or if you really want to, you could
even run it on your own Android phone.

103
00:05:30,016 --> 00:05:31,340
You'd have the exact same code.

104
00:05:31,340 --> 00:05:34,280
It runs on your phone and
since it doesn't run on my phone,

105
00:05:34,280 --> 00:05:35,310
you know that you can trust it.

106
00:05:35,310 --> 00:05:36,000
>> Interesting.

107
00:05:36,000 --> 00:05:38,600
I guess I just have to keep my
Android phone on all the time.

108
00:05:38,600 --> 00:05:41,290
>> Yeah,
that's the only thing you need to do.

109
00:05:41,290 --> 00:05:45,365
>> So I mean that doesn't sound like
the scary type of server, I suppose.

110
00:05:45,365 --> 00:05:47,600
But we're kind of already
in the thick of things.

111
00:05:47,600 --> 00:05:49,511
Are there any options for

112
00:05:49,511 --> 00:05:54,918
working without a server that could
still get us where we want to go?

113
00:05:54,918 --> 00:05:57,780
>> Yeah.
This is going to get more challenging.

114
00:05:57,780 --> 00:06:02,030
So this is where you need definitely to
add some steps into the current flow.

115
00:06:02,030 --> 00:06:04,630
So right now the program that you have,

116
00:06:04,630 --> 00:06:09,470
seems to be that you trust that if
two accounts have the same email

117
00:06:09,470 --> 00:06:14,540
address written into their profile data,
that it's the same user.

118
00:06:14,540 --> 00:06:17,040
And that those are the accounts
that you want to merge.

119
00:06:17,040 --> 00:06:19,460
And this is something that
you you should not do,

120
00:06:19,460 --> 00:06:22,010
because right as we covered before, you

121
00:06:22,010 --> 00:06:25,080
cannot trust that the email address they
write is an email address that they own.

122
00:06:26,360 --> 00:06:30,220
So you really must find another
way to get these people to

123
00:06:30,220 --> 00:06:32,220
agree to merge these accounts.

124
00:06:32,220 --> 00:06:34,890
So a very common approach
would be to actually put in

125
00:06:34,890 --> 00:06:38,830
a mutual agreements
type of flow in there.

126
00:06:38,830 --> 00:06:41,790
So instead of merging
the accounts like you do now,

127
00:06:41,790 --> 00:06:46,470
you actually require that a use
proposes to merge an account.

128
00:06:46,470 --> 00:06:46,995
And that then,

129
00:06:46,995 --> 00:06:52,452
the account that they want to merge
into has to accept that proposed merge.

130
00:06:52,452 --> 00:06:55,570
And since you already have your friends
list, you sort of have the mechanism

131
00:06:55,570 --> 00:06:59,170
in place there to identify which
account you want to merge.

132
00:06:59,170 --> 00:07:02,500
So you don't even have to rely
on the email address there.

133
00:07:02,500 --> 00:07:06,328
You can also have them select the
accounts that they want to merge into.

134
00:07:06,328 --> 00:07:09,656
>> Okay, so a lot of extra code
on the client side is in there.

135
00:07:09,656 --> 00:07:11,670
>> Yes, definitely.

136
00:07:11,670 --> 00:07:14,625
>> So besides adding sort of
bulk of the client side app,

137
00:07:14,625 --> 00:07:18,371
would this add any kind of bulk to
the security rules themselves, or

138
00:07:18,371 --> 00:07:20,051
what would that look like?

139
00:07:20,051 --> 00:07:21,278
>> Yeah definitely.

140
00:07:21,278 --> 00:07:23,689
You need to write some
security rules for it,

141
00:07:23,689 --> 00:07:27,698
like the place where these users meet
up and agree to merge their accounts.

142
00:07:27,698 --> 00:07:29,844
And I've written some examples for that,

143
00:07:29,844 --> 00:07:32,538
to to essentially highlight
how that would work.

144
00:07:32,538 --> 00:07:33,490
>> That's super helpful.

145
00:07:33,490 --> 00:07:35,510
I guess we'll take a look
at those later, so
