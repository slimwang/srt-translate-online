1
00:00:00,000 --> 00:00:02,000
[Norvig] Now, one more thing.

2
00:00:02,000 --> 00:00:06,000
Note that the shuffle routine--both the ones that we wrote

3
00:00:06,000 --> 00:00:11,000
and the random.shuffle from the standard Python library--return None.

4
00:00:11,000 --> 00:00:15,000
That is, they don't return a useful value; they just return nothing.

5
00:00:15,000 --> 00:00:20,000
And the idea of the shuffle routine is that they modify the input.

6
00:00:20,000 --> 00:00:26,000
So there's this eternal tension in programming between computing a result

7
00:00:26,000 --> 00:00:29,000
and doing something.

8
00:00:29,000 --> 00:00:35,000
So functions like square root and sine function and so on

9
00:00:35,000 --> 00:00:38,000
take an input and return a result.

10
00:00:38,000 --> 00:00:43,000
They don't modify the input, and they create a new value as a result.

11
00:00:43,000 --> 00:00:49,000
But functions or subroutines or methods like shuffle are different.

12
00:00:49,000 --> 00:00:51,000
They take an input and modify that input.

13
00:00:51,000 --> 00:00:55,000
They take the state of the world and do something to the state of the world

14
00:00:55,000 --> 00:00:59,000
rather than just compute a result.

15
00:00:59,000 --> 00:01:04,000
We talk of these functions that compute a result as pure functions

16
00:01:04,000 --> 00:01:07,000
and these that do something as impure,

17
00:01:07,000 --> 00:01:10,000
and I like to talk of them as subroutines rather than functions

18
00:01:10,000 --> 00:01:13,000
because they aren't functions in the mathematical sense;

19
00:01:13,000 --> 00:01:16,000
they have an effect on the world.

20
00:01:16,000 --> 00:01:20,000
You'll see that most of the code that I show in this class

21
00:01:20,000 --> 00:01:24,000
is of the computing type rather than the doing type.

22
00:01:24,000 --> 00:01:30,000
The main reason for this is that the computing code is easier to test.

23
00:01:30,000 --> 00:01:35,000
So if I wanted to write a test for a computing function, for a pure function,

24
00:01:35,000 --> 00:01:51,000
I can do something like assert sorted of the list ([3, 2, 1]) = [1, 2, 3].

25
00:01:51,000 --> 00:01:53,000
A single line and I'm done.

26
00:01:53,000 --> 00:01:58,000
On the other hand, if I want to test a subroutine that does something,

27
00:01:58,000 --> 00:02:02,000
that affects the state of the world, I have to first set up some state.

28
00:02:02,000 --> 00:02:10,000
So let's say input = [3, 2, 1].

29
00:02:10,000 --> 00:02:13,000
Then I have to call the subroutine or method,

30
00:02:13,000 --> 00:02:17,000
say input.sort,

31
00:02:17,000 --> 00:02:20,000
and then I have to inspect the state to see what happened.

32
00:02:20,000 --> 00:02:26,000
So I would assert that input is now equal to--oops.

33
00:02:26,000 --> 00:02:30,000
Let's make sure we have double equals signs there.

34
00:02:30,000 --> 00:02:35,000
Input is now equal to [1, 2, 3].

35
00:02:35,000 --> 00:02:38,000
In this case there's not that much difference.

36
00:02:38,000 --> 00:02:43,000
We have a library method sort and a built-in function sorted.

37
00:02:43,000 --> 00:02:46,000
With the built-in function it's a single line to test.

38
00:02:46,000 --> 00:02:51,000
With the doing subroutine it's 3 lines to test.

39
00:02:51,000 --> 00:02:58,000
But in general, as we add more state and we have functions that do rather than compute,

40
00:02:58,000 --> 00:03:03,000
it's going to be more work to set up the state, invoke the method, and then test it,

41
00:03:03,000 --> 00:03:07,000
and it's easier to do the test for pure functions.

42
00:03:07,000 --> 00:03:10,000
And that's why I prefer them when they make sense

43
00:03:10,000 --> 00:03:15,000
and stick to the doing approach only when necessary.

44
00:03:15,000 --> 00:03:18,000
When there's a lot of state that we have to deal with,

45
00:03:18,000 --> 00:03:22,000
then we go ahead and write methods or subroutines that modify the state

46
00:03:22,000 --> 00:03:25,000
rather than write pure functions.
