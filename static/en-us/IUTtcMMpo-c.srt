1
00:00:00,330 --> 00:00:03,040
What we're doing now is we're storing, we have a cookie that

2
00:00:03,040 --> 00:00:05,650
looks something like this. And on the service side when we receive this

3
00:00:05,650 --> 00:00:08,900
cookie we make sure hashing one gives us this has value, and if

4
00:00:08,900 --> 00:00:12,600
it doesn't we throw it away. Now, does this really solve our problem?

5
00:00:12,600 --> 00:00:15,250
A little bit, but if they, you know, if this, if they

6
00:00:15,250 --> 00:00:19,310
know we're using MD5, which is, you know, pretty easy to guess, it's

7
00:00:19,310 --> 00:00:22,450
easy to forge a cookie, right? You can just, change the cookie value

8
00:00:22,450 --> 00:00:25,340
to whatever you want, run MD5 on it, append that, and now you've

9
00:00:25,340 --> 00:00:28,720
forged the cookie. So, how do we solve this problem?

10
00:00:28,720 --> 00:00:30,880
Let me show you. What we need to do, is

11
00:00:30,880 --> 00:00:33,580
we need to add, we need to have some secret

12
00:00:33,580 --> 00:00:36,800
knowledge here. So instead of hashing, you know, the number

13
00:00:36,800 --> 00:00:39,402
one into our hash, what we want to do is we

14
00:00:39,402 --> 00:00:43,670
want to hash a secret string plus the number one into

15
00:00:43,670 --> 00:00:47,270
a hash. So as long as this secret stays secret

16
00:00:47,270 --> 00:00:50,760
a would be attacker even if they know our algorithm won't

17
00:00:50,760 --> 00:00:54,310
be able to forge a hash. Because remember one of the

18
00:00:54,310 --> 00:00:59,340
properties of a hashing algorithms is it's very difficult to find,

19
00:00:59,340 --> 00:01:02,080
you know, find two inputs that equal the same hash. Or

20
00:01:02,080 --> 00:01:05,870
to find a specific input for a specific hash and, and

21
00:01:05,870 --> 00:01:08,660
vice versa. So, you know, they'll see in our cookie, you

22
00:01:08,660 --> 00:01:11,080
know, they'll still see a cookie you know, the browser will

23
00:01:11,080 --> 00:01:13,190
still see a cookie that looks like this, but instead of

24
00:01:13,190 --> 00:01:15,880
hashing this one we added an extra little secret. And as long

25
00:01:15,880 --> 00:01:17,520
as the attacker doesn't know the secret they won't

26
00:01:17,520 --> 00:01:20,191
be able to generate the same hash. So let's build

27
00:01:20,191 --> 00:01:23,080
the this functionality in bit by bit. There's one,

28
00:01:23,080 --> 00:01:24,800
one last thing in Python I want to introduce you

29
00:01:24,800 --> 00:01:27,400
to. So we've been using hashlib to run basic

30
00:01:27,400 --> 00:01:33,480
hashes. There's a second library, specifically for doing message authentication

31
00:01:33,480 --> 00:01:37,650
called HMAC, hash-based message authentication code. This is basically a,

32
00:01:37,650 --> 00:01:40,880
a special algorithm. It's built in the Python, for when

33
00:01:40,880 --> 00:01:43,810
you want to combine a, a key with your value to

34
00:01:43,810 --> 00:01:47,580
create a hash. There's a series of different types of attacks

35
00:01:47,580 --> 00:01:50,330
where you, you know, if you just put your key plus

36
00:01:50,330 --> 00:01:52,950
the value you can find a collision by just kind of

37
00:01:52,950 --> 00:01:55,600
extending your value. And similarly, if you put your value

38
00:01:55,600 --> 00:01:58,230
and then the key there's, there's other attacks you can do.

39
00:01:58,230 --> 00:02:01,010
An HMAC is basically just an algorithm that you know, looks

40
00:02:01,010 --> 00:02:06,780
something approximately, like this: hmac, a secret, a key, hashing function,

41
00:02:06,780 --> 00:02:10,910
returns a hash. So it, it'll, it'll look just like

42
00:02:10,910 --> 00:02:14,930
using hashlib, except it'll take an extra parameter for secret,

43
00:02:14,930 --> 00:02:17,190
which it'll incorporate in a secure manner. Now, you could

44
00:02:17,190 --> 00:02:19,410
just call, you know, use a hashlib function, with, you know,

45
00:02:19,410 --> 00:02:22,222
secret plus value. And that it gets you pretty close.

46
00:02:22,222 --> 00:02:24,780
And for our purposes, it'll actually probably work just fine.

47
00:02:24,780 --> 00:02:27,140
But HMAC is, is the proper to thing to use

48
00:02:27,140 --> 00:02:31,880
here. Again you can, you can learn more about HMAC you

49
00:02:31,880 --> 00:02:34,780
know, on Wikipedia or something. There's a wealth of information of what the

50
00:02:34,780 --> 00:02:38,890
algorithm actually is. But it's basically a special way of using a particular

51
00:02:38,890 --> 00:02:42,110
hashing function with the secret key. I'll show you that real quick in

52
00:02:42,110 --> 00:02:44,650
Python how we, how we use it. Okay, let's review some of the

53
00:02:44,650 --> 00:02:47,135
things we've talked about. If we were to make a hash the way

54
00:02:47,135 --> 00:02:50,304
we've been doing it, you know, we'd use hashlib. I'll create an MD5

55
00:02:50,304 --> 00:02:53,257
of a string. And call Hex Digest on it and we get you

56
00:02:53,257 --> 00:02:57,075
know, the hex output. We can use the HMAC library to accomplish something

57
00:02:57,075 --> 00:03:01,360
sim-, similar but HMAC takes an extra parameter for a secret and combines it

58
00:03:01,360 --> 00:03:06,950
securely. You know, we could say hmac.new and we give it a secret. Then give it

59
00:03:06,950 --> 00:03:12,590
udacity. We say hexdigest. And, and we

60
00:03:12,590 --> 00:03:14,080
get a, you know, we get a similar output

61
00:03:14,080 --> 00:03:15,800
except this is more secure. Of course we could

62
00:03:15,800 --> 00:03:20,150
have done something like this. Secret plus udacity. And

63
00:03:20,150 --> 00:03:23,600
as long as secret stays the same, when we verify

64
00:03:23,600 --> 00:03:26,040
you know, our algorithm will still work. But, hmac

65
00:03:26,040 --> 00:03:29,875
is just basically a more secure way of accomplishing secret

66
00:03:29,875 --> 00:03:32,650
plus udacity. Let's use this new hmac function and a

67
00:03:32,650 --> 00:03:35,440
new secret key to improve our make secure value function.
