1
00:00:00,000 --> 00:00:02,000
So let's test out our knowledge of this with a quiz.

2
00:00:02,000 --> 00:00:05,000
We're going to go back to our JavaScript interpreter

3
00:00:05,000 --> 00:00:09,000
and add support for looking up variables like (x) and (y).

4
00:00:09,000 --> 00:00:12,000
The first change is that our

5
00:00:12,000 --> 00:00:14,000
recursive Evaluate_Expression procedure

6
00:00:14,000 --> 00:00:19,000
now takes 2 arguments: the Abstract Syntax Tree--and the environment

7
00:00:19,000 --> 00:00:22,000
because we've just established that the meaning of an expression

8
00:00:22,000 --> 00:00:25,000
depends on the context in the World--depends on the environment.

9
00:00:25,000 --> 00:00:27,000
We've already seen these 2 cases before.

10
00:00:27,000 --> 00:00:31,000
We peel apart our abstract syntax tree, which is just a bunch of nested tuples.

11
00:00:31,000 --> 00:00:34,000
We look in the zeroth component for the type.

12
00:00:34,000 --> 00:00:37,000
If it's a "number" node, then we just return

13
00:00:37,000 --> 00:00:41,000
the string value, converted to an integer.

14
00:00:41,000 --> 00:00:43,000
If it's a binary operator, like (+) or (-),

15
00:00:43,000 --> 00:00:45,000
we'll have to do the Addition or Subtraction.

16
00:00:45,000 --> 00:00:47,000
Here, I'm skipping a few steps, compared to last time.

17
00:00:47,000 --> 00:00:50,000
Last time, we assigned tree[1] to left_child

18
00:00:50,000 --> 00:00:52,000
and then called eval_exp on it.

19
00:00:52,000 --> 00:00:55,000
I'm going to do it all on one line now, just to say a little space.

20
00:00:55,000 --> 00:01:00,000
But notice that when I make my recursive calls to eval_exp,

21
00:01:00,000 --> 00:01:02,000
I have to pass in this environment

22
00:01:02,000 --> 00:01:05,000
in order to have my subchildren--the subparts of the AST--

23
00:01:05,000 --> 00:01:07,000
know what the values of variables are.

24
00:01:07,000 --> 00:01:10,000
And since there haven't been any intervening assignment statements,

25
00:01:10,000 --> 00:01:12,000
the environment stays the same--whatever I was given

26
00:01:12,000 --> 00:01:15,000
is whatever I will pass on to my subtrees.

27
00:01:15,000 --> 00:01:18,000
So now I just check to see: if the operator is a JavaScript Plus,

28
00:01:18,000 --> 00:01:20,000
I evaluate it, using Python Plus.

29
00:01:20,000 --> 00:01:22,000
If the operator is JavaScript Minus,

30
00:01:22,000 --> 00:01:24,000
I evaluate it, using Python Minus.

31
00:01:24,000 --> 00:01:27,000
I translate these basic universal concepts,

32
00:01:27,000 --> 00:01:30,000
like Addition and Subtraction, from one language to another.

33
00:01:30,000 --> 00:01:32,000
I'm writing an interpreter.

34
00:01:32,000 --> 00:01:36,000
But what if, instead of being a "number" or a "binop"

35
00:01:36,000 --> 00:01:38,000
our nodetype = "identifier"

36
00:01:38,000 --> 00:01:40,000
is actually a reference to a variable?

37
00:01:40,000 --> 00:01:42,000
And just to remind you here,

38
00:01:42,000 --> 00:01:45,000
I've written out our Abstract Syntax Tree

39
00:01:45,000 --> 00:01:47,000
for (X) + 2.

40
00:01:47,000 --> 00:01:49,000
At the highest level, it's a binary operator

41
00:01:49,000 --> 00:01:51,000
where the left_child is the ("identifier", "x"),

42
00:01:51,000 --> 00:01:53,000
and the right_child is the ("number", "2").

43
00:01:53,000 --> 00:01:55,000
So we started up here with "binop"

44
00:01:55,000 --> 00:01:59,000
but that involves calling ourselves, recursively, to evaluate our left_child.

45
00:01:59,000 --> 00:02:02,000
When we do, the nodetype for our left_child is "identifier"

46
00:02:02,000 --> 00:02:05,000
so we're going to have to figure out what the value of (x) is.

47
00:02:05,000 --> 00:02:10,000
So your mission is to complete the code for this case,

48
00:02:10,000 --> 00:02:12,000
by finding the identifier name,

49
00:02:12,000 --> 00:02:14,000
looking it up in the environment and returning it.
