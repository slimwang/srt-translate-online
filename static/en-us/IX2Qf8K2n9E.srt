1
00:00:00,230 --> 00:00:02,270
The couple of other techniques.

2
00:00:02,270 --> 00:00:05,780
In fact the next one we're going to
talked about is hardly used.

3
00:00:05,780 --> 00:00:09,590
A number of operating systems now and so
one thing that's going to be different

4
00:00:09,590 --> 00:00:13,680
about the next two techniques we'll
talked about is that they going to use.

5
00:00:13,680 --> 00:00:17,280
Support from the operating
system/hardware that we have

6
00:00:17,280 --> 00:00:21,590
to deal with buffer overflow or
to thwart buffer overflow attacks.

7
00:00:21,590 --> 00:00:25,450
So the first one, as which I
said many operating systems use,

8
00:00:25,450 --> 00:00:29,370
is what is called
Address Space Layout Randomization.

9
00:00:29,370 --> 00:00:30,360
ASLR.

10
00:00:30,360 --> 00:00:31,370
So remember,

11
00:00:31,370 --> 00:00:36,280
in an address space, some place stack
is space where stack is allocated.

12
00:00:36,280 --> 00:00:37,820
So, stack starts at certain place.

13
00:00:37,820 --> 00:00:42,410
Somewhere the library code goes, another
place where the heap goes, and so on.

14
00:00:42,410 --> 00:00:47,180
What if we randomize the places
where these areas of memory start.

15
00:00:47,180 --> 00:00:52,140
Remember that hacker had to actually
guess where key information is.

16
00:00:52,140 --> 00:00:57,790
So if I wanted to do return to libc
attack, I had to know where the library

17
00:00:57,790 --> 00:01:02,400
is, where a certain function may be, so
I know the address of that function.

18
00:01:02,400 --> 00:01:07,700
And I can use that as I overflow the
return address field in the stack frame.

19
00:01:07,700 --> 00:01:09,900
So, I need to know these address.

20
00:01:09,900 --> 00:01:15,390
And what ASLR does, it makes hard,
because of the randomization that we do,

21
00:01:15,390 --> 00:01:20,070
it makes hard for the attacker to
find these important locations.

22
00:01:20,070 --> 00:01:23,270
Where the address that
the attacker is interested in

23
00:01:23,270 --> 00:01:25,170
is going to over the information,

24
00:01:25,170 --> 00:01:28,690
address of the information that that
hacker is interested in is not know.

25
00:01:28,690 --> 00:01:30,240
So as I said.

26
00:01:30,240 --> 00:01:33,805
A number of operating systems
these days actually do that to

27
00:01:33,805 --> 00:01:38,870
protect the programs and processes from
these buffer overflow kind of attacks.

28
00:01:38,870 --> 00:01:43,720
So this just makes it harder for the
hacker to successfully craft an attack

29
00:01:43,720 --> 00:01:48,870
where can return, or manage, or direct
control of the program to the certain

30
00:01:48,870 --> 00:01:55,580
known place that could be used to let
the attacker execute arbitrary code.

31
00:01:55,580 --> 00:01:59,695
This one other defense against
stack buffer overflow.

32
00:01:59,695 --> 00:02:03,345
When the shell code itself
is stored on the stack.

33
00:02:03,345 --> 00:02:08,365
So remember if I don't do return
to libc then my return address has

34
00:02:08,365 --> 00:02:13,795
to point me to some place where
the shell code lives, or is stored, and

35
00:02:13,795 --> 00:02:19,485
you could write that shell code
into some area of the stack itself.

36
00:02:19,485 --> 00:02:21,920
And then you can execute off the stack.

37
00:02:21,920 --> 00:02:23,520
There's no legitimate reason for

38
00:02:23,520 --> 00:02:26,860
us to execute instructions
that are stored on the stack.

39
00:02:26,860 --> 00:02:30,970
So one thing we can do is we can
make the stack non executable.

40
00:02:30,970 --> 00:02:34,950
Basically says the system is
not going to allow you to fetch

41
00:02:34,950 --> 00:02:38,040
instructions from the stack area or
the stack segment.

42
00:02:38,040 --> 00:02:41,780
If you do that then you
can't execute on the stack.

43
00:02:41,780 --> 00:02:44,430
So your shell code
cannot be on the stack.

44
00:02:44,430 --> 00:02:48,680
You have to find some other place to put
your shell code and maybe that's why you

45
00:02:48,680 --> 00:02:52,100
have to try tricks, like return
to libc and things like that.

46
00:02:52,100 --> 00:02:55,830
And use a library function
to transfer control to

47
00:02:55,830 --> 00:02:58,090
the code that attacker ones executed.

48
00:02:58,090 --> 00:03:03,330
So here I guess we talked about sort
of security is increasing assurance.

49
00:03:03,330 --> 00:03:06,800
Making the attacker's
job more difficult.

50
00:03:06,800 --> 00:03:10,430
And making the legitimate, in this
case here we're talking programmers,

51
00:03:10,430 --> 00:03:11,880
their task somewhat easier.

52
00:03:11,880 --> 00:03:16,180
So ASLR obviously is making
the attackers job more difficult because

53
00:03:16,180 --> 00:03:18,280
key addresses that they need to know,

54
00:03:18,280 --> 00:03:20,740
they don't know exactly where
they are in the address space.

55
00:03:20,740 --> 00:03:23,630
And they can't put code on the stack and

56
00:03:23,630 --> 00:03:28,340
hope to get it executed because we have
the hardware operating system says

57
00:03:28,340 --> 00:03:33,230
not supposed to fetch instructions from
the stack area of the address space.

58
00:03:33,230 --> 00:03:38,200
So these are techniques for
actually dealing with buffer overflows.

59
00:03:38,200 --> 00:03:43,180
As we said, one makes it harder for
the attacker, by making it difficult for

60
00:03:43,180 --> 00:03:47,587
him to find the right addresses, or be
able to use the stack flow shell code.
