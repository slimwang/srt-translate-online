1
00:00:00,440 --> 00:00:03,840
Unfortunately, we don't know what
kind of result will be returned

2
00:00:03,840 --> 00:00:05,450
by the place picker.

3
00:00:05,450 --> 00:00:09,130
If we get a place, we know that we'll
have an address, but that address could

4
00:00:09,130 --> 00:00:14,190
be anything, from a city name to
a business name, or even empty string.

5
00:00:14,190 --> 00:00:17,696
So we can't reliably form a request
to the weather service off of this

6
00:00:17,696 --> 00:00:19,290
string alone.

7
00:00:19,290 --> 00:00:23,905
However, a place object also
contains a latitude and a longitude.

8
00:00:23,905 --> 00:00:26,910
And open weather map supports
queries by LatLong, so

9
00:00:26,910 --> 00:00:30,780
what we need to do is to store
the address as our location string, but

10
00:00:30,780 --> 00:00:33,610
store the LatLong as our location query.

11
00:00:33,610 --> 00:00:36,850
To do this,
let's begin with the simple things.

12
00:00:36,850 --> 00:00:41,330
First, we need to declare two
new preference keys, one for

13
00:00:41,330 --> 00:00:43,570
latitude and one for longitude.

14
00:00:43,570 --> 00:00:47,060
Then we can create new utility
methods to help us out.

15
00:00:47,060 --> 00:00:49,980
One each to get the value
of the latitude and

16
00:00:49,980 --> 00:00:52,170
longitude out of their preferences.

17
00:00:52,170 --> 00:00:56,730
And then a third method to check for
the existence of these preferences.

18
00:00:56,730 --> 00:00:59,740
And these preferences will be our
indicator that we are using a place

19
00:00:59,740 --> 00:01:03,290
picker location, instead of
a user entered string location.

20
00:01:03,290 --> 00:01:06,660
If the user decides to replace their
location with the string later on, we'll

21
00:01:06,660 --> 00:01:10,237
wipe these preferences, as a signal to
stop forming the query with a LatLong.

22
00:01:11,720 --> 00:01:12,730
In sync adapter,

23
00:01:12,730 --> 00:01:16,250
instead of always building the query
based off of the location string,

24
00:01:16,250 --> 00:01:19,970
we want to, potentially,
build the query using a LatLong value.

25
00:01:19,970 --> 00:01:24,070
So first, we need to check if
we have a LatLong to work with.

26
00:01:24,070 --> 00:01:27,860
And if we do, we're going to build
the request using LAT and LON.

27
00:01:27,860 --> 00:01:28,990
However, if we don't,

28
00:01:28,990 --> 00:01:32,850
we're going to build it the way we were
before, using our location string.

29
00:01:32,850 --> 00:01:35,710
The rest of the URI
builder remains unchanged.

30
00:01:35,710 --> 00:01:39,590
However, since we are dependant on
the existence of a LatLong preference,

31
00:01:39,590 --> 00:01:43,110
as a signal that we are using
a place picker location, we need to

32
00:01:43,110 --> 00:01:47,120
wipe those preferences when the user
enters the location string manually.

33
00:01:47,120 --> 00:01:50,910
So in settings activity in,
onSharedPreferenceChanged,

34
00:01:50,910 --> 00:01:53,830
you'll need to do this whenever
the location is updated.

35
00:01:53,830 --> 00:01:57,055
This method is an automatic callback
that is invoked by the dialog

36
00:01:57,055 --> 00:01:58,120
preference class.

37
00:01:58,120 --> 00:02:00,900
Because our place picker was an intent
launched by settings activity,

38
00:02:00,900 --> 00:02:02,860
it won't ever trigger this call back.

39
00:02:02,860 --> 00:02:07,210
And so, this is a safe place to
reliably wipe the Place Picker LatLong,

40
00:02:07,210 --> 00:02:09,340
whenever we have a manual entry.

41
00:02:09,340 --> 00:02:12,780
Because we don't trigger their callback
when returning from the Place Picker,

42
00:02:12,780 --> 00:02:16,419
we'll need to tell our sync adapter that
something has changed in on activity

43
00:02:16,419 --> 00:02:17,000
result.

44
00:02:17,000 --> 00:02:21,000
First, we'll update the preference
summary string in our settings UI, and

45
00:02:21,000 --> 00:02:25,420
then we'll ask our sync adapter
to fetch new weather data.

46
00:02:25,420 --> 00:02:29,160
This should all happen after
the new preferences are written.

47
00:02:29,160 --> 00:02:31,800
And that is why we use commit,
instead of apply,

48
00:02:31,800 --> 00:02:34,300
when we're writing to
our shared preferences.

49
00:02:34,300 --> 00:02:37,760
Commit ensures that the preferences
are ready in time for our sync it after

50
00:02:37,760 --> 00:02:42,070
update, whereas, apply is asynchronous,
and can't make the same guarantee.

51
00:02:42,070 --> 00:02:45,830
Now as for, actually, writing the long
preferences, I'm leaving that to you.
