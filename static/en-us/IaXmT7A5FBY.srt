1
00:00:00,080 --> 00:00:02,940
Now that you have a sense of what a merging strategy could look like for

2
00:00:02,940 --> 00:00:05,960
a simple file, let's take a look at how Git could use this type of

3
00:00:05,960 --> 00:00:08,900
strategy to allow you to merge two branches together.

4
00:00:08,900 --> 00:00:12,480
Right now, I want to create a combined version of my coins branch and

5
00:00:12,480 --> 00:00:13,560
the master branch.

6
00:00:13,560 --> 00:00:17,300
If all Git had was these two commits, it wouldn't be able to tell how to merge

7
00:00:17,300 --> 00:00:21,000
them together, just like you couldn't tell earlier whether Jake added a line or

8
00:00:21,000 --> 00:00:22,440
whether Rachel deleted it.

9
00:00:22,440 --> 00:00:25,710
Luckily, Git also has a record of what the code looked like before the two

10
00:00:25,710 --> 00:00:27,250
branches diverged.

11
00:00:27,250 --> 00:00:29,170
This is analogous to the file that Rachel and

12
00:00:29,170 --> 00:00:31,300
Jake had at the beginning of the day.

13
00:00:31,300 --> 00:00:34,670
Using these three commits, Git can create a combined version of

14
00:00:34,670 --> 00:00:38,320
the two branches using a similar strategy to the one you used earlier.

15
00:00:38,320 --> 00:00:41,190
Commits are the basic building block of Git, so it probably isn't that

16
00:00:41,190 --> 00:00:44,260
surprising to you that this combined version will also be a commit.

17
00:00:44,260 --> 00:00:46,860
But what will be the parent of this new commit?

18
00:00:46,860 --> 00:00:50,360
As it turns out, when you use Git to create a merge commit, that commit

19
00:00:50,360 --> 00:00:55,720
stores information about both of its parents, so I'll add arrows to both.

20
00:00:55,720 --> 00:00:59,290
Since the goal of this merge is to get the content from the coins branch

21
00:00:59,290 --> 00:01:03,060
into the master branch, I'm going to want this new commit to be the new

22
00:01:03,060 --> 00:01:07,350
tip of the master branch since the master branch is the one getting updated.

23
00:01:07,350 --> 00:01:11,090
Git practitioners will often refer to this process as merging the coin

24
00:01:11,090 --> 00:01:13,880
branch into the master branch.

25
00:01:13,880 --> 00:01:16,810
After the merge, the master branch will include all the changes that had

26
00:01:16,810 --> 00:01:19,550
before plus the changes from the coins branch.

27
00:01:19,550 --> 00:01:22,460
It's sort of like creating a new commit with all the changes from the coin

28
00:01:22,460 --> 00:01:26,090
branch, except that I still have access to each of these old commits.

29
00:01:26,090 --> 00:01:29,550
Note that this is very different from what we would see if we took the state of

30
00:01:29,550 --> 00:01:32,950
the files at this point, at the end of the coin branch, and

31
00:01:32,950 --> 00:01:35,130
made a commit with that on top of master.

32
00:01:35,130 --> 00:01:39,010
All that would do is basically set master to be the same state as coins, but

33
00:01:39,010 --> 00:01:40,240
that's not what we want to do.

34
00:01:40,240 --> 00:01:43,400
We want to have all of these changes merged in as well.

35
00:01:43,400 --> 00:01:45,850
Once we've successfully merged the two branches,

36
00:01:45,850 --> 00:01:48,320
we won't need an easy reference to this commit anymore.

37
00:01:48,320 --> 00:01:50,470
We'll be able to reach it through the master.

38
00:01:50,470 --> 00:01:52,930
So once we're done with the merge, we can delete the coin branch.

39
00:01:52,930 --> 00:01:57,210
Note that when we talk about deleting branches, we mean deleting the label.

40
00:01:57,210 --> 00:01:59,450
The commits will still be there in the history.

41
00:01:59,450 --> 00:02:01,940
However, if no branches can reach the commit,

42
00:02:01,940 --> 00:02:04,850
deleting a branch does effectively discard its commits.

43
00:02:04,850 --> 00:02:08,300
So if you deleted the coins branch without merging it in first, you would

44
00:02:08,300 --> 00:02:12,260
essentially be abandoning these commits since they would all become unreachable.

45
00:02:12,260 --> 00:02:15,410
After you create the merge commit, which commits do you think would be included

46
00:02:15,410 --> 00:02:17,960
if we ran git log on the master branch?

47
00:02:17,960 --> 00:02:21,080
For each of the commits with the checkbox next to it, check whether or

48
00:02:21,080 --> 00:02:22,340
not you think it would be included.
