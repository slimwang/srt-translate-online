1
00:00:00,006 --> 00:00:03,157
In Android 4.4 KitKat or API level 19,

2
00:00:03,157 --> 00:00:08,800
Android started getting really
serious about coordinated motion.

3
00:00:08,800 --> 00:00:11,930
The new scenes and
transitions API made it much

4
00:00:11,930 --> 00:00:15,160
easier to define how UI
elements should move together.

5
00:00:15,160 --> 00:00:15,680
Let's take a look.

6
00:00:16,700 --> 00:00:20,580
The scenes and transitions API
introduced a new paradigm for

7
00:00:20,580 --> 00:00:22,690
animating objects in your UI.

8
00:00:22,690 --> 00:00:25,320
James gave you a glimpse into this API,
but

9
00:00:25,320 --> 00:00:27,920
it actually lets you
do a whole lot more.

10
00:00:27,920 --> 00:00:31,995
The API allows you to define different
states for your UI, called scenes.

11
00:00:31,995 --> 00:00:34,930
There's actually two scenes
in this example here.

12
00:00:34,930 --> 00:00:38,910
And also, let you define ways to
transition between those scenes,

13
00:00:38,910 --> 00:00:41,720
coordinating several
UI elements at once.

14
00:00:41,720 --> 00:00:45,170
So, when UI elements appear,
disappear, move,

15
00:00:45,170 --> 00:00:50,000
or otherwise change, you could
easily define the animations to use.

16
00:00:50,000 --> 00:00:53,150
In this example, you can see
some of those elements moving,

17
00:00:53,150 --> 00:00:56,400
some elements appearing,
and some disappearing.

18
00:00:56,400 --> 00:01:01,980
Pressing the info or close button,
switches between those two scenes.

19
00:01:02,990 --> 00:01:06,941
The way this works, is you have two
layouts which describe the two scenes.

20
00:01:06,941 --> 00:01:08,420
Here's what they look like.

21
00:01:08,420 --> 00:01:10,600
They're pretty simple,
just some linear layouts,

22
00:01:10,600 --> 00:01:14,770
some relative layouts, image views,
text views, and buttons.

23
00:01:14,770 --> 00:01:18,710
Now the magic happens here
in the onClick handlers.

24
00:01:18,710 --> 00:01:23,004
When you press the info button,
we use this new TransitionManager class,

25
00:01:23,004 --> 00:01:25,865
to change from the current
scene to the other one,

26
00:01:25,865 --> 00:01:28,064
as defined by the second layout file.

27
00:01:28,064 --> 00:01:30,088
If we don't specify anything else,

28
00:01:30,088 --> 00:01:34,020
Android will automatically figure
out some nice transitions for you.

29
00:01:34,020 --> 00:01:36,748
Moving elements shared
between the scenes.

30
00:01:36,748 --> 00:01:40,710
Fading new elements in, and
fading old elements out.

31
00:01:40,710 --> 00:01:43,800
But let's say we wanted to
customize the transition.

32
00:01:43,800 --> 00:01:45,900
We could do things like
stagger the transition so

33
00:01:45,900 --> 00:01:48,450
that not everything happens all at once.

34
00:01:48,450 --> 00:01:52,034
For that, you could your describe
custom transitions in XML, and

35
00:01:52,034 --> 00:01:55,400
pass them into the TransitionManager,
like so.

36
00:01:55,400 --> 00:01:59,010
And here's an example of
the custom transition XML.

37
00:01:59,010 --> 00:02:02,920
There's some similarities with the
animation XML we talked about before.

38
00:02:02,920 --> 00:02:04,480
But the primitives you're working with,

39
00:02:04,480 --> 00:02:08,560
like changeBounds and
fade, are a bit different.

40
00:02:08,560 --> 00:02:11,580
As you can see, the animation
capabilities in Android have been

41
00:02:11,580 --> 00:02:15,340
evolving, from basic
animations in early Android

42
00:02:15,340 --> 00:02:20,180
to much richer capabilities in Ice
Cream Sandwich, Jelly Bean and KitKat.

43
00:02:20,180 --> 00:02:21,090
Let's go to Nick,

44
00:02:21,090 --> 00:02:25,877
who will tell us about the new animation
capabilities in Android 5.0, Lollipop.
