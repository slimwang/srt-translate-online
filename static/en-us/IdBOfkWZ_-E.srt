1
00:00:00,130 --> 00:00:03,010
Building Java projects are relatively
simple when compared to

2
00:00:03,010 --> 00:00:03,810
Android projects.

3
00:00:03,810 --> 00:00:07,140
It is still a multi step process
that we prefer to automate.

4
00:00:07,140 --> 00:00:09,620
Gradle provides full support for
Java projects.

5
00:00:09,620 --> 00:00:12,980
To include compiling our sources,
creating a jar file,

6
00:00:12,980 --> 00:00:16,258
generating documentation,
running test, and creating reports.

7
00:00:16,258 --> 00:00:19,490
Gradle models the java build
process by creating tasks for

8
00:00:19,490 --> 00:00:23,090
each of these steps and wiring up
the necessary dependencies for us.

9
00:00:23,090 --> 00:00:26,790
A typical Java build will usually
involve compiling our source code and

10
00:00:26,790 --> 00:00:28,270
processing resources.

11
00:00:28,270 --> 00:00:32,040
And packaging those resources and
Java class files into a jar.

12
00:00:32,040 --> 00:00:35,200
It can also include test code,
which will need to be compiled, and

13
00:00:35,200 --> 00:00:37,150
then the tests run themselves.

14
00:00:37,150 --> 00:00:40,210
Optionally a Java project may also
include generating Java docs or

15
00:00:40,210 --> 00:00:41,870
packaging source jars.

16
00:00:41,870 --> 00:00:44,080
Gradle also creates lifecycle tasks for
us.

17
00:00:44,080 --> 00:00:47,750
Describe common build outputs
like assembling our artifacts.

18
00:00:47,750 --> 00:00:50,270
Running project checks or
doing a complete build.

19
00:00:51,270 --> 00:00:53,450
All this functionality is
provided by free Gradle,

20
00:00:53,450 --> 00:00:56,430
in the form of a plug-in,
which can be applied to to your project.

21
00:00:56,430 --> 00:00:58,940
Now let's take a look at how to
add a Java plug-in to our build.
