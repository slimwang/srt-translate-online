1
00:00:00,070 --> 00:00:02,920
We have our basic response status line and

2
00:00:02,920 --> 00:00:06,310
just like the request, the status line is followed

3
00:00:06,310 --> 00:00:08,700
by a number of headers. I give you

4
00:00:08,700 --> 00:00:11,390
a few examples. Here are some headers that are

5
00:00:11,390 --> 00:00:14,840
commonly included with http responses. Now just like

6
00:00:14,840 --> 00:00:18,780
the client request, the headers that you see aren't

7
00:00:18,780 --> 00:00:22,100
always the same. Some of them are required

8
00:00:22,100 --> 00:00:25,129
and when I say required I mean usually they

9
00:00:25,129 --> 00:00:28,340
are, but the web has evolved organically over time, so

10
00:00:28,340 --> 00:00:31,810
many of the headers that are you know, required are

11
00:00:31,810 --> 00:00:33,870
you know, often not there or things will work without

12
00:00:33,870 --> 00:00:36,900
them but anyway, okay. So date is there all the

13
00:00:36,900 --> 00:00:39,350
time. That's when the request happens. You know, no surprise

14
00:00:39,350 --> 00:00:43,160
there. Server, this is similar to the user agent header

15
00:00:43,160 --> 00:00:46,050
on the request. This is the, generally the name and

16
00:00:46,050 --> 00:00:49,600
version number of the server that's handling the response. Now,

17
00:00:49,600 --> 00:00:53,270
personally, I try to never include this. Or if

18
00:00:53,270 --> 00:00:55,320
I do include it, I make something up, because

19
00:00:55,320 --> 00:00:59,110
otherwise you're just giving free information to you know,

20
00:00:59,110 --> 00:01:02,100
a would-be, a would-be hacker who wants to know, you

21
00:01:02,100 --> 00:01:05,820
know, which vulnerabilities work against you. Content type, very

22
00:01:05,820 --> 00:01:08,770
popular. This is the type of document that's being

23
00:01:08,770 --> 00:01:10,950
returned. This is so your browser knows how to

24
00:01:10,950 --> 00:01:14,720
display it. So text html is a common one, obviously,

25
00:01:14,720 --> 00:01:17,280
you know, that, that's what an HTML page would be.

26
00:01:17,280 --> 00:01:21,890
You could see image PNG or, you know, image GIF,

27
00:01:21,890 --> 00:01:23,640
you know, if, if, if it's an image that sort

28
00:01:23,640 --> 00:01:26,260
of thing. And content length is how long the document that

29
00:01:26,260 --> 00:01:30,600
follows this. Content length is often included but it's not

30
00:01:30,600 --> 00:01:34,400
strictly required because the browser will know when the document's done

31
00:01:34,400 --> 00:01:36,810
receiving data because the connection may close. There are other

32
00:01:36,810 --> 00:01:39,880
ways of also telling the browser that I am done sending

33
00:01:39,880 --> 00:01:42,670
data, but it is not super relevant right

34
00:01:42,670 --> 00:01:46,470
this second. We have discussed the basic requests and

35
00:01:46,470 --> 00:01:49,390
responses. Let's let's play around in the terminal

36
00:01:49,390 --> 00:01:52,360
a little bit and you know, practice with these

37
00:01:52,360 --> 00:01:55,370
a bit. Okay, so open up a terminal

38
00:01:55,370 --> 00:01:58,900
if that is not straight forward on your machine

39
00:01:58,900 --> 00:02:01,010
we'll have some class notes on on how to

40
00:02:01,010 --> 00:02:04,940
do that. You Windows users might have some challenges

41
00:02:04,940 --> 00:02:07,460
in front of you. So we're in our terminal

42
00:02:07,460 --> 00:02:09,440
and we're going to use a program called tell

43
00:02:09,440 --> 00:02:13,680
net to make some Internet requests to web servers

44
00:02:13,680 --> 00:02:16,550
and watch the http go by. So we can see

45
00:02:16,550 --> 00:02:19,230
them in practice. Okay. So, let's make a request.

46
00:02:20,680 --> 00:02:24,360
Okay. I'm making a request to udacity.com port 80. This

47
00:02:24,360 --> 00:02:26,310
is the request your browser will be making if

48
00:02:26,310 --> 00:02:30,025
you are loading udacity.com in it. Here we connected to

49
00:02:30,025 --> 00:02:32,300
udacity.com port 80 which, if you recall, 80 is the

50
00:02:32,300 --> 00:02:35,710
default. Okay, so I'll hit enter. We connect and I'm going to

51
00:02:35,710 --> 00:02:39,580
send the request line that we talked about before. And I'm

52
00:02:39,580 --> 00:02:42,090
going to send an HTTP 1.0 and I'll explain why in a

53
00:02:42,090 --> 00:02:45,670
second. And I'm going to include the host header. Google wants

54
00:02:45,670 --> 00:02:47,980
this because, as we discussed before, it's hosting a lot of

55
00:02:47,980 --> 00:02:50,980
different web servers on a machine. Now, let's scroll back up

56
00:02:50,980 --> 00:02:55,061
to the top of this. You can see the request we

57
00:02:55,061 --> 00:03:00,540
made, get/HTTP 1.0, host udacity.com. Now, why did I do 1.0?

58
00:03:00,540 --> 00:03:03,850
Because the default behavior in 1.1 is to, is for the

59
00:03:03,850 --> 00:03:06,610
server to not close the connection. To allow the browser to

60
00:03:06,610 --> 00:03:10,420
make multiple requests from multiple things. Which is an optimization, but

61
00:03:10,420 --> 00:03:13,230
when you're testing by hand, it means the connection stays open,

62
00:03:13,230 --> 00:03:15,770
and then you have to close the connection on your machine,

63
00:03:15,770 --> 00:03:18,290
which is, you know, when you're using telnet is sometimes a

64
00:03:18,290 --> 00:03:20,620
little bit of a pain. So we see our response or

65
00:03:20,620 --> 00:03:24,171
our request, 1.0, host, udacity.com, and then you see

66
00:03:24,171 --> 00:03:27,665
the response from the server. Here's the status line.

67
00:03:27,665 --> 00:03:31,780
HTTP/1.0 200 OK. So, that means it worked, and

68
00:03:31,780 --> 00:03:33,760
now you can see a bunch of headers. Some

69
00:03:33,760 --> 00:03:36,580
of these headers we've, we've seen and discussed before.

70
00:03:36,580 --> 00:03:39,460
Here's date. Here is the server, it's Google front

71
00:03:39,460 --> 00:03:43,210
end. Here's the content type, text HTML, that means

72
00:03:43,210 --> 00:03:45,780
we're receiving HTML, which is no big surprise. And if

73
00:03:45,780 --> 00:03:48,540
we scroll down following the status line on the headers,

74
00:03:48,540 --> 00:03:53,220
we see the actual response document. And this is HTML. This

75
00:03:53,220 --> 00:03:55,670
is the type of stuff we were working on before.

76
00:03:55,670 --> 00:03:59,110
This is complex but you get the idea. Lots of HTML.
