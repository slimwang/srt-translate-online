1
00:00:00,520 --> 00:00:03,410
Now I'm going to walk you through the
process of getting your workspace set

2
00:00:03,410 --> 00:00:04,620
up on Windows.

3
00:00:04,620 --> 00:00:07,880
There are also written instructions
in the instructor's notes.

4
00:00:07,880 --> 00:00:11,470
If you're using Mac or
Linux you should skip to the next video.

5
00:00:11,470 --> 00:00:14,940
First I'm going to configure git
bash to use a white background.

6
00:00:14,940 --> 00:00:18,110
If you prefer to use a dark
background you can skip this step.

7
00:00:18,110 --> 00:00:22,690
I'll click this icon, select
Defaults and go to the Colors tab.

8
00:00:22,690 --> 00:00:27,460
Then I'll set the screen background to
white and the screen text to black.

9
00:00:27,460 --> 00:00:30,190
Then I'll close and reopen Git Bash and
the screen is white now.

10
00:00:31,210 --> 00:00:33,590
Next I'm going to download
two files that are needed for

11
00:00:33,590 --> 00:00:35,390
the setup I showed you earlier.

12
00:00:35,390 --> 00:00:40,160
One to enable tab completion, and one to
enable the git features in the prompt.

13
00:00:40,160 --> 00:00:42,790
The links to these files
are in the instructor's notes.

14
00:00:42,790 --> 00:00:44,355
To download each file,
I'll visit the page,

15
00:00:44,355 --> 00:00:47,100
right-click anywhere on the page,
and select Save as.

16
00:00:48,230 --> 00:00:51,230
I'll save the file to
my Downloads directory.

17
00:00:51,230 --> 00:00:54,780
Next, I'll use Git Bash to move
the file to my home directory.

18
00:00:54,780 --> 00:00:57,880
My home directory is where I
start out when I open Git Bash.

19
00:00:57,880 --> 00:01:01,700
Or I can move to it by
typing cd ~ if I need to.

20
00:01:01,700 --> 00:01:03,960
Now I'll use the command
mv which stands for

21
00:01:03,960 --> 00:01:06,850
move to move the file I just
saved to my home directory.

22
00:01:06,850 --> 00:01:10,480
Now the first argument is
the file I want to move,

23
00:01:10,480 --> 00:01:15,832
which is in my Downloads directory and
it's named git-completion.bash.txt.

24
00:01:15,832 --> 00:01:21,460
Now the .txt was created by the web
browser, but I don't actually want that.

25
00:01:21,460 --> 00:01:25,250
So I'll choose the name
git-completion.bash as the new name.

26
00:01:25,250 --> 00:01:28,610
And without specifying a directory it
will automatically get saved to my

27
00:01:28,610 --> 00:01:29,970
current directory.

28
00:01:29,970 --> 00:01:32,580
Then I'll go through the same
process to save the second file in

29
00:01:32,580 --> 00:01:35,014
the instructor's notes as git-prompt.sh.

30
00:01:36,280 --> 00:01:39,580
Next I'm going to create a file
called .bash profile which

31
00:01:39,580 --> 00:01:42,340
contains configuration for Git Bash.

32
00:01:42,340 --> 00:01:45,730
I recommend using the configuration file
that I used when filming this course.

33
00:01:46,800 --> 00:01:49,910
To do this you can download the file
called bash_profile_course in

34
00:01:49,910 --> 00:01:50,946
the downloadables section.

35
00:01:50,946 --> 00:01:55,938
Then use Git Bash to move the file from
your Downloads directory or wherever you

36
00:01:55,938 --> 00:02:00,860
downloaded it to, to your home
directory and name it .bash_profile.

37
00:02:00,860 --> 00:02:02,550
Don't forget the dot at
the beginning of the name.

38
00:02:03,850 --> 00:02:08,410
If you already have a bash profile,
then don't run this command.

39
00:02:08,410 --> 00:02:09,669
Instead you can copy and

40
00:02:09,669 --> 00:02:13,170
paste the content from my bash profile
into your existing one if you like.

41
00:02:14,520 --> 00:02:17,380
I don't see any changes to my prompt yet
and that's because I'll need to

42
00:02:17,380 --> 00:02:20,510
close and reopen Git Bash
before the changes take effect.

43
00:02:20,510 --> 00:02:21,800
I'll do that at the end of the video.

44
00:02:23,110 --> 00:02:26,840
In case you're curious about what's in
this batch profile, or if you'd like to

45
00:02:26,840 --> 00:02:30,880
pick and choose which lines to keep,
I'll go through what each line does.

46
00:02:30,880 --> 00:02:33,720
Don't worry if you don't understand
how each line works though.

47
00:02:33,720 --> 00:02:36,980
Even experienced UNIX programmers
frequently copy and paste this kind of

48
00:02:36,980 --> 00:02:40,020
thing from their friends,
rather than writing it from scratch.

49
00:02:40,020 --> 00:02:42,710
This first line loads one of
the files you downloaded earlier, and

50
00:02:42,710 --> 00:02:44,600
enables tab completion.

51
00:02:44,600 --> 00:02:48,050
These lines define some colors,
which will be used in your prompt.

52
00:02:48,050 --> 00:02:51,500
This line loads the other file you
downloaded earlier, and it's necessary

53
00:02:51,500 --> 00:02:55,170
for the git related stuff, like commit
IDs, to show up in your prompt.

54
00:02:55,170 --> 00:02:58,300
This line makes it so that an asterisk
will show up in your prompt if you

55
00:02:58,300 --> 00:03:00,740
change something in a git repository.

56
00:03:00,740 --> 00:03:02,790
And this line sets the prompt.

57
00:03:02,790 --> 00:03:06,068
It will show your user name in purple,
the commit you have checked out and

58
00:03:06,068 --> 00:03:07,788
other git related stuff in green, and

59
00:03:07,788 --> 00:03:11,790
the directory you're currently in
followed by a dollar sign in blue.

60
00:03:11,790 --> 00:03:14,710
Anything after that will be
displayed in the default color.

61
00:03:14,710 --> 00:03:17,570
If you're curious to learn more
about how prompts work in bash,

62
00:03:17,570 --> 00:03:19,270
check out the link in
the instructor's notes.

63
00:03:19,270 --> 00:03:22,100
But it's not necessary for
the rest of this course.

64
00:03:22,100 --> 00:03:24,630
Now I'll configure git to
use Sublime as my editor for

65
00:03:24,630 --> 00:03:26,530
things like commit messages.

66
00:03:26,530 --> 00:03:29,620
You'll want to configure git to
use whatever editor you like, but

67
00:03:29,620 --> 00:03:30,780
the process should be similar.

68
00:03:31,830 --> 00:03:34,570
First, I'll need to figure out
where Sublime was installed.

69
00:03:34,570 --> 00:03:39,100
For many people this is under
C:\Program Files\Sublime Text 2.

70
00:03:39,100 --> 00:03:42,230
And that's the case for me.

71
00:03:42,230 --> 00:03:47,080
If it's not here, you might also try
looking under C:\Program Files (x86).

72
00:03:47,080 --> 00:03:52,800
Then I'll run the command git config
--global core.editor followed

73
00:03:52,800 --> 00:03:54,450
by the text editor that I
want to use in double quotes.

74
00:03:55,830 --> 00:03:59,720
For me, this is Sublime, and I'll need
to specify the full path to Sublime.

75
00:03:59,720 --> 00:04:03,320
But for now, I'm just going to
type sublime as a placeholder,

76
00:04:03,320 --> 00:04:04,578
followed by -n -w.

77
00:04:04,578 --> 00:04:08,120
The -n means Sublime will
open in a new window and

78
00:04:08,120 --> 00:04:12,610
the -w means git will wait for you to
close Sublime before trying to continue.

79
00:04:12,610 --> 00:04:16,480
Now, I'm going to replace sublime with
the full path to Sublime in single

80
00:04:16,480 --> 00:04:20,260
quotes, starting with
the directory you saw earlier, and

81
00:04:20,260 --> 00:04:21,769
then I'll add sublimetext.exe.

82
00:04:21,769 --> 00:04:25,100
I know you can't see
the whole command here.

83
00:04:25,100 --> 00:04:28,830
You can copy and paste it from the
instructor's notes, although you'll have

84
00:04:28,830 --> 00:04:31,820
to modify it if Sublime is installed
in a different location for

85
00:04:31,820 --> 00:04:35,740
you, or if you're using a text
editor other than Sublime.

86
00:04:35,740 --> 00:04:38,700
It's also a good idea to make sure
you can launch your text editor from

87
00:04:38,700 --> 00:04:40,410
within Git Bash.

88
00:04:40,410 --> 00:04:42,300
I'll show how to do this for Sublime.

89
00:04:42,300 --> 00:04:43,910
If you use another text editor,

90
00:04:43,910 --> 00:04:48,310
I recommend you use Google to figure out
how to launch it from within Git Bash.

91
00:04:48,310 --> 00:04:52,400
I can already launch Sublime within
Git Bash by typing the full path to it,

92
00:04:52,400 --> 00:04:54,340
but I'd like to have a shortcut.

93
00:04:54,340 --> 00:04:58,230
To create one I'm going to add a line
to my bash profile using Sublime.

94
00:04:58,230 --> 00:05:02,470
Now opening the bash profile is going to
be a little tricky because anything with

95
00:05:02,470 --> 00:05:04,750
a dot at the beginning of
the name is a hidden file and

96
00:05:04,750 --> 00:05:07,910
it won't show up in most
file system explorers.

97
00:05:07,910 --> 00:05:11,820
To get around that I'm going to
temporarily rename the file to not

98
00:05:11,820 --> 00:05:15,790
have a dot at the beginning of the name,
then I'll change it back once I finish.

99
00:05:16,820 --> 00:05:19,570
Then I'll open up Sublime and
open the file.

100
00:05:19,570 --> 00:05:25,209
I'll navigate to my home directory
under Computer > C:\Users\cbuckey.

101
00:05:25,209 --> 00:05:28,340
And then I'll select the bash_profile.

102
00:05:28,340 --> 00:05:31,710
Then I'll add this line to
create a command called subl,

103
00:05:31,710 --> 00:05:33,700
which will open Sublime.

104
00:05:33,700 --> 00:05:35,290
If you use Sublime, you can copy and

105
00:05:35,290 --> 00:05:37,350
paste this line from
the instructor's notes.

106
00:05:37,350 --> 00:05:40,560
Although again you might need to modify
it to be the location Sublime is

107
00:05:40,560 --> 00:05:42,000
installed for you.

108
00:05:42,000 --> 00:05:45,170
Note that this command also won't work
until you close and reopen Git Bash.

109
00:05:46,190 --> 00:05:46,790
Now that I'm done,

110
00:05:46,790 --> 00:05:50,340
I'll rename the file to have a dot
at the beginning of the name again.

111
00:05:50,340 --> 00:05:51,290
If I didn't do this,

112
00:05:51,290 --> 00:05:55,210
then this file won't automatically
be loaded when Git Bash starts up.

113
00:05:55,210 --> 00:05:58,170
Next, I'll run two more Git
config commands that will come in

114
00:05:58,170 --> 00:05:59,990
handy later this course.

115
00:05:59,990 --> 00:06:02,730
I'm going to run them now so
that all the configuration advice for

116
00:06:02,730 --> 00:06:04,510
the course will be in one place.

117
00:06:04,510 --> 00:06:07,830
You can copy and paste these commands
from the instructor's notes.

118
00:06:07,830 --> 00:06:10,410
Finally, I'll close Git Bash and
reopen it.

119
00:06:10,410 --> 00:06:12,800
Now, I can see that my
prompt has changed.

120
00:06:12,800 --> 00:06:16,060
And if I want to view my
bash profile using Sublime,

121
00:06:16,060 --> 00:06:18,800
I can run subl .bash_profile.

122
00:06:18,800 --> 00:06:19,710
Remember to close and

123
00:06:19,710 --> 00:06:22,530
reopen Git Bash when you're finished or
your changes won't take effect.
