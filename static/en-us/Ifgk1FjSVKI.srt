1
00:00:00,330 --> 00:00:04,149
Here's half of my array. I'll just pick up parts for the second half so I can

2
00:00:04,149 --> 00:00:09,294
tell them apart. Here's the other half of my array. Now what could I do? It

3
00:00:09,294 --> 00:00:13,200
looks like it would be helpful if I could swap these two elements, cause that

4
00:00:13,200 --> 00:00:19,945
way I would get this element in place, and also this one. Let's do it again,

5
00:00:19,945 --> 00:00:25,690
that's good. Now these two elements are in place. And so are these. Another

6
00:00:25,690 --> 00:00:30,429
swap, and another, and another, and presto! I'm done. I have what used to be

7
00:00:30,429 --> 00:00:33,963
the second half now in the first half, what used to be in the first half now in

8
00:00:33,963 --> 00:00:39,168
the second half, in exactly the right order. Well that's great, now I can start

9
00:00:39,168 --> 00:00:43,430
writing pseudocode. So which elements did I swap? The one in positions zero and

10
00:00:43,430 --> 00:00:52,556
five. 1 and 6, 2 and 7, 3 and 8, 4 and 9. So each time I swapped position i

11
00:00:52,556 --> 00:00:59,485
with position i plus 5. What's five? That's the length of each sub-array, or

12
00:00:59,485 --> 00:01:05,357
one half the length of the original array. So i started at zero. We'll figure

13
00:01:05,357 --> 00:01:08,834
out in a minute how far it went, and then I'll swap the element at position i

14
00:01:08,834 --> 00:01:12,368
with, well I can't say i plus 5 in the pseudo-code, because the pseudo-code

15
00:01:12,368 --> 00:01:19,090
needs to explain the general situation. So, it was length over 2, now, how far

16
00:01:19,090 --> 00:01:27,120
does i go? In this case, it went from zero to four. So in general, it'll go to

17
00:01:27,120 --> 00:01:32,778
length over 2 minus 1. Now that was the hard part, the easy part is to program

18
00:01:32,778 --> 00:01:35,859
that in Java, and I'll leave that to you.
