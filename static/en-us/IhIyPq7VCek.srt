1
00:00:00,095 --> 00:00:03,270
You can't resist talking about one final optimization. Looking at

2
00:00:03,270 --> 00:00:06,070
this load method, notice how the translation to the physical

3
00:00:06,070 --> 00:00:10,280
address and cache look-up happen in sequence. We could speed

4
00:00:10,280 --> 00:00:12,390
up our implementation if we could find a way to do

5
00:00:12,390 --> 00:00:15,970
this in parallel. At first this might seem impossible. After

6
00:00:15,970 --> 00:00:19,000
all, the cache is indexed by the physical address We don't

7
00:00:19,000 --> 00:00:22,420
know this until we've done the translation. Recall, however, that

8
00:00:22,420 --> 00:00:25,140
only the higher order bits are changed when we go from

9
00:00:25,140 --> 00:00:28,200
the virtual address to the physical address. The offsets

10
00:00:28,200 --> 00:00:31,610
within the page stays exactly the same. Which bits are

11
00:00:31,610 --> 00:00:34,630
important for extracting data from the cache? Well it's

12
00:00:34,630 --> 00:00:37,700
these middlest bits that come after the offset for the

13
00:00:37,700 --> 00:00:40,510
cache block. As long as the index bits for

14
00:00:40,510 --> 00:00:44,420
the cache don't extend beyond the offset for the page,

15
00:00:44,420 --> 00:00:47,420
this little red line here, then we can extract data

16
00:00:47,420 --> 00:00:51,280
from the cache. Before we know the full physical address.

17
00:00:51,280 --> 00:00:52,910
Conceptually, we're going to do something like

18
00:00:52,910 --> 00:00:55,380
this where the virtual page number

19
00:00:55,380 --> 00:00:59,860
goes to the TLB and the page offset goes to the cache. The

20
00:00:59,860 --> 00:01:03,950
tag, or tags in the said associative case, then gets compared with

21
00:01:03,950 --> 00:01:08,630
the page frame number from the TLB, and the correct data is returned.
