1
00:00:00,000 --> 00:00:03,000
In this summing numbers problem, we're given a string

2
00:00:03,000 --> 00:00:06,000
such as the one I have here, "hello 2 all of you 44."

3
00:00:06,000 --> 00:00:11,000
And we output the sum of all the integer numbers in the string.

4
00:00:11,000 --> 00:00:15,000
So here we have 2 and 44,

5
00:00:15,000 --> 00:00:18,000
and we're going to return the number 2 + 44,

6
00:00:18,000 --> 00:00:22,000
and with some advanced math, is 46.

7
00:00:22,000 --> 00:00:24,000
How are we going to solve this?

8
00:00:24,000 --> 00:00:27,000
Well, one way, using only the totals you had in CS101,

9
00:00:27,000 --> 00:00:30,000
might be to iterate through the string character by character,

10
00:00:30,000 --> 00:00:35,000
checking if the current character is a number

11
00:00:35,000 --> 00:00:39,000
and then continue concatenating that string of numbers

12
00:00:39,000 --> 00:00:44,000
until we don't reach a number, so we'd have 2, and then we'd hit a space,

13
00:00:44,000 --> 00:00:47,000
and then we add 2 to our total running sum.

14
00:00:47,000 --> 00:00:49,000
That isn't a very elegant way to do that.

15
00:00:49,000 --> 00:00:52,000
We'd rather use regular expressions to help us out,

16
00:00:52,000 --> 00:00:56,000
so to get us there, let's think of a regular expression

17
00:00:56,000 --> 00:00:59,000
that matches the numbers that we are looking for.

18
00:00:59,000 --> 00:01:04,000
Well, numbers range 0-9,

19
00:01:04,000 --> 00:01:07,000
and we want 1 or more of them, and that's it.

20
00:01:07,000 --> 00:01:11,000
We're going to use our friend re.findall with this regular expression

21
00:01:11,000 --> 00:01:15,000
in the input string, and for everything that's matched,

22
00:01:15,000 --> 00:01:17,000
we add it to our running sum.

23
00:01:17,000 --> 00:01:19,000
Let's write a bit of code to do just that.

24
00:01:19,000 --> 00:01:22,000
I remember to import the re library, and I've defined

25
00:01:22,000 --> 00:01:27,000
my procedure sumnums that takes in 1 parameter that is the sentence.

26
00:01:27,000 --> 00:01:32,000
I've now written the regular expression that we came up with previously,

27
00:01:32,000 --> 00:01:35,000
and I initialize my sum to 0.

28
00:01:35,000 --> 00:01:39,000
And now I'm going to run find all with this regular expression

29
00:01:39,000 --> 00:01:46,000
on the input sentence, and it's going to return a list of all the occurrences

30
00:01:46,000 --> 00:01:49,000
of that regular expression, in this case, a list of all the numbers.

31
00:01:49,000 --> 00:01:52,000
So found is going to equal one at a time

32
00:01:52,000 --> 00:01:55,000
all the numbers found in our input sentence,

33
00:01:55,000 --> 00:01:58,000
and remember from the hint given in the problem,

34
00:01:58,000 --> 00:02:01,000
the int procedure will turn a string

35
00:02:01,000 --> 00:02:04,000
into an integer if it so applies,

36
00:02:04,000 --> 00:02:08,000
and so we're going to update our sum with the integers that we find in the string,

37
00:02:08,000 --> 00:02:10,000
and once we're done, we're going to return the sum.
