1
00:00:00,440 --> 00:00:01,870
In our discussion of computability and

2
00:00:01,870 --> 00:00:05,470
complexity, we focused
on deciding languages.

3
00:00:05,470 --> 00:00:08,270
As we began our discussion of
algorithms, however, we began to talk

4
00:00:08,270 --> 00:00:12,980
about optimization problems instead
without ever formally defining them.

5
00:00:12,980 --> 00:00:16,300
This was fine then, but
as we discuss approximation algorithms,

6
00:00:16,300 --> 00:00:20,100
we're going to circle back to some of
the ideas we encountered in complexity.

7
00:00:20,100 --> 00:00:21,360
And we need a formal
way to connect them.

8
00:00:22,420 --> 00:00:25,510
Therefore we're going to
define an optimization problem

9
00:00:25,510 --> 00:00:29,170
using the min vertex cover
as an example to illustrate.

10
00:00:29,170 --> 00:00:31,520
And this will allow us to
give a formal definition

11
00:00:31,520 --> 00:00:33,400
of an approximation algorithm.

12
00:00:33,400 --> 00:00:36,070
The first thing we need to
define an optimization problem

13
00:00:36,070 --> 00:00:38,440
is a set of valid instances.

14
00:00:38,440 --> 00:00:43,080
For the minimum vertex cover problem
this is just a set of undirected graphs.

15
00:00:43,080 --> 00:00:45,390
For each instance,
there's a set of feasible solutions.

16
00:00:46,400 --> 00:00:51,210
For Min Vertex Cover, this is the set
of vertex covers for the graph.

17
00:00:51,210 --> 00:00:54,950
And we need an objective function,
the thing we're trying to optimize.

18
00:00:54,950 --> 00:00:58,610
For min vertex cover,
this is just the size of the cover.

19
00:00:58,610 --> 00:01:01,080
And of course we need to say
whether we're minimizing or

20
00:01:01,080 --> 00:01:03,420
maximizing this objective function.

21
00:01:03,420 --> 00:01:06,770
Naturally for min vertex cover,
we're minimizing.

22
00:01:06,770 --> 00:01:09,000
Relating this back to our
treatment of complexity,

23
00:01:09,000 --> 00:01:11,390
we say that an MP optimization problem

24
00:01:11,390 --> 00:01:15,129
is one where these first three criteria
are computable in polynomial time.

25
00:01:16,320 --> 00:01:19,500
That is to say, there's
a polynomial algorithm that tells

26
00:01:19,500 --> 00:01:21,170
whether the input instance is valid.

27
00:01:22,280 --> 00:01:25,820
There's one that can check whether
a solution is feasible for

28
00:01:25,820 --> 00:01:32,130
the given instance, and there's one that
can evaluate the objective function.

29
00:01:32,130 --> 00:01:34,360
All these things being
done in polynomial time.

30
00:01:34,360 --> 00:01:38,810
Now every optimization problem
has a decision version of a form

31
00:01:38,810 --> 00:01:42,920
is the optimum value at most
sum value for the min, and

32
00:01:42,920 --> 00:01:45,380
a least sum value for the max.

33
00:01:45,380 --> 00:01:47,180
For minimum vertex cover,

34
00:01:47,180 --> 00:01:51,150
we ask is there a cover of size
less than some threshold T?

35
00:01:51,150 --> 00:01:52,900
With this in mind,

36
00:01:52,900 --> 00:01:58,360
we say that an optimization problem is
NP-hard if it's decision version is.

37
00:01:58,360 --> 00:01:59,440
Our problem is NP-hard,

38
00:01:59,440 --> 00:02:03,370
by the way, if an NP complete
problem can be reduced to it.

39
00:02:03,370 --> 00:02:08,300
In our example, min vertex cover is
NP-hard because the decision version is.

40
00:02:08,300 --> 00:02:12,930
Remember that we reduced maximum
independent set to vertex cover.

41
00:02:12,930 --> 00:02:15,040
So that's how optimization
relates to complexity.
