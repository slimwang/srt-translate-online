1
00:00:00,460 --> 00:00:02,350
Before you can do any
mapping applications,

2
00:00:02,350 --> 00:00:06,660
you need to get a key that gives you
access to the google maps android API.

3
00:00:06,660 --> 00:00:08,029
This is pretty easy to do, but

4
00:00:08,029 --> 00:00:11,870
it involves taking a few steps out of
Android studio for the time being.

5
00:00:11,870 --> 00:00:14,250
You're going to be working in terminal.

6
00:00:14,250 --> 00:00:16,110
So as you can see,
I've opened my terminal here.

7
00:00:16,110 --> 00:00:20,000
The first thing you need is
the SHA1 fingerprint for your app.

8
00:00:20,000 --> 00:00:23,720
Google maps uses this as a way
to identify your application, so

9
00:00:23,720 --> 00:00:25,770
it can give your app good service.

10
00:00:25,770 --> 00:00:29,345
This fingerprint is a machine readable
attribute of a certificate and

11
00:00:29,345 --> 00:00:32,384
a certificate is a way of
determining that your app is real.

12
00:00:32,384 --> 00:00:35,665
Just like in the real world,
a certificate is a sign of an authority,

13
00:00:35,665 --> 00:00:38,778
where you can call upon a third party
to certify that you are who you

14
00:00:38,778 --> 00:00:40,140
say you are.

15
00:00:40,140 --> 00:00:43,140
Now we're just going to use a debug
certificate for this as it's easier for

16
00:00:43,140 --> 00:00:44,550
learning purposes.

17
00:00:44,550 --> 00:00:47,900
The debug certificate is
issued to you by yourself.

18
00:00:47,900 --> 00:00:50,490
Now later, if you want to release
your app to the play store,

19
00:00:50,490 --> 00:00:54,090
you'll need a publication certificate
which is verified by Google.

20
00:00:54,090 --> 00:00:54,950
If you want to do that,

21
00:00:54,950 --> 00:00:58,490
follow the instructions on
the developer website linked below.

22
00:00:58,490 --> 00:01:01,960
The first thing that you'll need to do
is to locate your key store file for

23
00:01:01,960 --> 00:01:04,540
debugging using the terminal.

24
00:01:04,540 --> 00:01:08,470
It's called, imaginatively enough,
debug.keystore.

25
00:01:08,470 --> 00:01:13,770
On a Mac or Linux,
it's at cd ~/.android.

26
00:01:13,770 --> 00:01:17,110
So note that when you put a dot in front
of a folder like this it's usually

27
00:01:17,110 --> 00:01:19,700
hidden so just know that
you may need to unhide it.

28
00:01:19,700 --> 00:01:25,970
If you're using Windows it'll be at
c:/user/ your user name /.android.

29
00:01:25,970 --> 00:01:28,290
Remember it could also
be hidden on windows.

30
00:01:28,290 --> 00:01:31,440
This is the directory that
contains the debug.keystore

31
00:01:31,440 --> 00:01:33,340
nad I can use this to
get the fingerprint.

32
00:01:33,340 --> 00:01:35,010
And I'll show you how to do that next.

33
00:01:35,010 --> 00:01:37,820
The command to get the certificate
is the keytool command.

34
00:01:37,820 --> 00:01:40,460
And the keytool command,
you tell it your keystore.

35
00:01:40,460 --> 00:01:44,750
And you can see the keystore
location is .android/debug.keystore.

36
00:01:44,750 --> 00:01:46,120
You also just give it an alias.

37
00:01:46,120 --> 00:01:48,120
I'm calling it the androiddebugkey.

38
00:01:48,120 --> 00:01:52,060
And the password and username is just
android when you're using debug.

39
00:01:52,060 --> 00:01:57,160
So, when I press Enter, you'll see my
SHA key is listed in the certificate.

40
00:01:57,160 --> 00:02:01,986
The certificate fingerprints are here,
MD5, SHA1, and SHA256.

41
00:02:01,986 --> 00:02:04,370
So, just keep track of the SHA1 key.

42
00:02:04,370 --> 00:02:07,620
I would just recommend leaving the
terminal window open because you will be

43
00:02:07,620 --> 00:02:09,020
needing that data in a moment.
