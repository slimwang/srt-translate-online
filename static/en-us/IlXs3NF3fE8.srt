1
00:00:00,190 --> 00:00:05,500
So now having seen the sequential memory consistency model, what we can do is go

2
00:00:05,500 --> 00:00:09,160
back to our original example, and ask the

3
00:00:09,160 --> 00:00:12,460
question, what are all the possible outcomes for

4
00:00:12,460 --> 00:00:16,079
this particular set of memory accesses performed on

5
00:00:16,079 --> 00:00:19,050
p1 and p2? Now what possible values can

6
00:00:19,050 --> 00:00:25,120
d and c get? Well obviously, you can get the first choice, no problem with that.

7
00:00:25,120 --> 00:00:26,820
Can get the second choice, it can get

8
00:00:26,820 --> 00:00:29,740
the third choice, and as we illustrated earlier,

9
00:00:29,740 --> 00:00:32,360
all of these are just interleaving of these

10
00:00:32,360 --> 00:00:35,860
memory accesses on P1 and P2. But the fourth

11
00:00:35,860 --> 00:00:39,470
one Is not possible with sequential consistency, because

12
00:00:39,470 --> 00:00:42,030
there's no interleaving of these memory axes and these

13
00:00:42,030 --> 00:00:46,370
memory axes that'll result in this particular outcome.

14
00:00:46,370 --> 00:00:50,440
That's comforting, that's exactly what we thought would be

15
00:00:50,440 --> 00:00:52,335
a useful thing to have in a

16
00:00:52,335 --> 00:00:57,210
memory-consistency model that gives only intuitive results and,

17
00:00:57,210 --> 00:01:00,140
and makes sure that non-intuitive results don't happen.

18
00:01:00,140 --> 00:01:03,936
Memory consistency model is what the application programmer

19
00:01:03,936 --> 00:01:06,126
needs to be aware of, to develop his

20
00:01:06,126 --> 00:01:08,827
code and know that it will execute correctly

21
00:01:08,827 --> 00:01:12,430
on the shared memory machine. As operating system

22
00:01:12,430 --> 00:01:15,480
designers, however, we need to help make sure

23
00:01:15,480 --> 00:01:18,510
that this code runs quickly. To do that,

24
00:01:18,510 --> 00:01:21,260
we need to understand how to implement the model

25
00:01:21,260 --> 00:01:25,140
efficiently. And also the relationship between hardware and software

26
00:01:25,140 --> 00:01:28,080
that makes it possible to achieve this goal. So

27
00:01:28,080 --> 00:01:32,360
now, we understand the memory consistency model. What

28
00:01:32,360 --> 00:01:34,800
is the model that is presented to the programmer?

29
00:01:34,800 --> 00:01:37,960
That's what memory consistency model is. On the other

30
00:01:37,960 --> 00:01:41,200
hand, cache coherence is how is the system implementing

31
00:01:41,200 --> 00:01:42,820
the model in the presence of private

32
00:01:42,820 --> 00:01:46,150
caches? So this is a handshake, a partnership

33
00:01:46,150 --> 00:01:49,110
between hardware and software, between the application

34
00:01:49,110 --> 00:01:51,660
programmer and the system, in order to make

35
00:01:51,660 --> 00:01:54,730
sure that the consistency model is actually

36
00:01:54,730 --> 00:01:58,390
implemented correctly by the cache coherence mechanism that

37
00:01:58,390 --> 00:02:01,450
is ingrained in the system. And the system

38
00:02:01,450 --> 00:02:06,250
implementation of cache coherence. Is itself a hardware-software

39
00:02:06,250 --> 00:02:09,550
trade off. Now for instance one possibility, is

40
00:02:09,550 --> 00:02:13,810
that the hardware is only giving shared address

41
00:02:13,810 --> 00:02:16,980
space. It's not giving you any way of

42
00:02:16,980 --> 00:02:19,670
making sure that the caches are coherent, but it

43
00:02:19,670 --> 00:02:22,030
is giving you the shared address space. And

44
00:02:22,030 --> 00:02:24,710
it is letting the software, the system software

45
00:02:24,710 --> 00:02:28,640
ensure that this contract is somewhat satisfied. And

46
00:02:28,640 --> 00:02:31,340
the working of the cache coherence maintained in software

47
00:02:31,340 --> 00:02:36,610
by the system. That's one possibility, and that is what is called a non-cache

48
00:02:36,610 --> 00:02:40,550
coherent shared address multiprocessor. Meaning that There

49
00:02:40,550 --> 00:02:43,250
is shared address space, that's available for all

50
00:02:43,250 --> 00:02:48,250
the processors, there is private caches for holding data that you bring from

51
00:02:48,250 --> 00:02:56,390
memory, but, if you modify data, it is a problem of the system software to make

52
00:02:56,390 --> 00:03:01,270
sure that the caches remain coherent. So it's non-cache coherent. That is called

53
00:03:01,270 --> 00:03:06,100
NCC shared memory multi-processor. The other possibility

54
00:03:06,100 --> 00:03:08,020
of course is that, the hardware does

55
00:03:08,020 --> 00:03:10,730
everything. It provides the shared address space,

56
00:03:10,730 --> 00:03:12,850
but it also maintains cache coherence in

57
00:03:12,850 --> 00:03:15,350
hardware. And that's what is called a

58
00:03:15,350 --> 00:03:20,723
cache coherent multi-processor, or a CC multi-processor.
