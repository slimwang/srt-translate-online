1
00:00:00,300 --> 00:00:03,100
For the next metal to reuse hit time,

2
00:00:03,100 --> 00:00:07,030
let's revisit the relationship between
the associativity and hit time.

3
00:00:07,030 --> 00:00:11,860
So if we have high associativity in the
cache, we will have fewer conflicts for

4
00:00:11,860 --> 00:00:15,990
the set in the cache when multiple
blocks go to the same set.

5
00:00:15,990 --> 00:00:18,240
Which leads to a lower miss rate.

6
00:00:18,240 --> 00:00:19,690
And that, we like.

7
00:00:19,690 --> 00:00:23,710
With high associativity we have just
seen, we can build larger, virtually,

8
00:00:23,710 --> 00:00:28,130
index physically, type caches,
which reduces the miss rate, and so

9
00:00:28,130 --> 00:00:29,540
we like that too.

10
00:00:29,540 --> 00:00:33,030
But high associativity
leads to slower hits.

11
00:00:33,030 --> 00:00:36,080
The hit time goes up,
and that we don't like.

12
00:00:36,080 --> 00:00:40,430
On the other hand, if we go all
the way to direct mapped caches,

13
00:00:40,430 --> 00:00:44,640
the miss rate goes up for
these two reasons, and that is bad.

14
00:00:44,640 --> 00:00:48,740
But the hit time is reduced, because a
direct mapped cache has only place where

15
00:00:48,740 --> 00:00:52,090
a block can be, so we can quickly
check whether it's there or not.

16
00:00:52,090 --> 00:00:53,480
And we like that.

17
00:00:53,480 --> 00:00:58,540
So we can see that high associativity in
our cache improves the miss rate, but

18
00:00:58,540 --> 00:01:00,420
makes the hit time worse.

19
00:01:00,420 --> 00:01:03,210
While simple direct mapped caches,

20
00:01:03,210 --> 00:01:06,570
sacrifice the miss rate
to improve hit time.

21
00:01:06,570 --> 00:01:09,940
So now we will see if
we can get this and

22
00:01:09,940 --> 00:01:13,980
this simultaneously,
by kind of cheating associativity.
