1
00:00:00,520 --> 00:00:03,270
In the last video, I briefly
mentioned that a constructor is

2
00:00:03,270 --> 00:00:07,910
defined within the class, and it's used
to actually create the object instances.

3
00:00:07,910 --> 00:00:10,610
So, we call the TextView constructor
to create this instance,

4
00:00:10,610 --> 00:00:14,220
and we call it again to create
another instance, and so on.

5
00:00:14,220 --> 00:00:17,190
Let's look at the code for
how to actually call a constructor.

6
00:00:18,250 --> 00:00:22,280
Do you remember how we created a new
integer variable named quantity and

7
00:00:22,280 --> 00:00:24,960
we set it to have
an initial value of two?

8
00:00:24,960 --> 00:00:26,340
Creating a new object and

9
00:00:26,340 --> 00:00:29,120
storing it inside a variable is
going to follow a similar format.

10
00:00:30,200 --> 00:00:32,200
It'll look something like this.

11
00:00:32,200 --> 00:00:36,150
Instead of the int data type though,
we have an object data type.

12
00:00:36,150 --> 00:00:38,770
The object data type is whatever
we call the class name.

13
00:00:38,770 --> 00:00:41,650
In this case, it's TextView.

14
00:00:41,650 --> 00:00:45,700
It can be anything as long as it follows
the conventions for variable names.

15
00:00:45,700 --> 00:00:47,720
So, we just call it priceTextView.

16
00:00:47,720 --> 00:00:49,600
Then we set it equal to new object.

17
00:00:49,600 --> 00:00:51,740
But we can break down this
right hand side further.

18
00:00:52,800 --> 00:00:58,060
The right hand side follows the format
of new followed by the object data type,

19
00:00:58,060 --> 00:01:00,190
which is TextView in this case.

20
00:01:00,190 --> 00:01:03,510
This is calling the constructor
defined in a TextView class so

21
00:01:03,510 --> 00:01:07,940
we have parentheses with the input
arguments to the constructor.

22
00:01:07,940 --> 00:01:10,790
So, if the constructor
requires a context object,

23
00:01:10,790 --> 00:01:13,490
then we need to pass a context here.

24
00:01:13,490 --> 00:01:18,120
Remember that the context object helps
you access application resources and

25
00:01:18,120 --> 00:01:19,870
other things about
the application environment.

26
00:01:20,940 --> 00:01:24,140
So, altogether this is
creating a new TextView object

27
00:01:24,140 --> 00:01:26,060
by calling the constructor and

28
00:01:26,060 --> 00:01:31,200
then it's storing this new object
inside a variable called priceTextView.

29
00:01:31,200 --> 00:01:34,830
And this variable can only
hold a single TextView object

30
00:01:34,830 --> 00:01:36,080
as defined by its data type.

31
00:01:37,210 --> 00:01:39,850
Here's another example of
creating an ImageView object and

32
00:01:39,850 --> 00:01:41,840
storing it inside a variable.

33
00:01:41,840 --> 00:01:45,770
The data type is ImageView,
the variable name is coffeeImageView.

34
00:01:45,770 --> 00:01:50,450
And then we have the assignment
operator followed by new ImageView.

35
00:01:50,450 --> 00:01:53,830
This is spelled the same exact
way as the object data type here.

36
00:01:53,830 --> 00:01:57,320
Since we're calling the constructor and
we have to pass in any inputs,

37
00:01:57,320 --> 00:02:00,620
we have parentheses and
then we put the inputs in there.

38
00:02:00,620 --> 00:02:03,420
Here's a third example that
creates a button object and

39
00:02:03,420 --> 00:02:05,700
stores it in this variable.

40
00:02:05,700 --> 00:02:08,479
The date type is Button,
the variable name is submitOrderButton,

41
00:02:08,479 --> 00:02:11,950
and then we say,
new Button to call the constructor.

42
00:02:13,140 --> 00:02:15,850
You can even define your
own object data types.

43
00:02:15,850 --> 00:02:19,820
Say, for example, I created
a class definition for CatView.

44
00:02:19,820 --> 00:02:22,820
Then I could use this line
to create a new CatView.

45
00:02:22,820 --> 00:02:25,380
In this case, the constructor
requires an input string for

46
00:02:25,380 --> 00:02:29,180
the name of the cat so that's why
I put Tiger in parentheses and

47
00:02:29,180 --> 00:02:32,280
pass that in to the CatView constructor.

48
00:02:32,280 --> 00:02:35,690
To determine what to pass as
input to these constructors you

49
00:02:35,690 --> 00:02:41,450
have to look at either the class
Javadoc file or the class source file.

50
00:02:41,450 --> 00:02:45,680
All these cases use the word
new to create a new object.

51
00:02:45,680 --> 00:02:47,730
If we go back to the Java keyword list,

52
00:02:47,730 --> 00:02:51,040
then indeed we do find that
the word new is in that list.

53
00:02:52,190 --> 00:02:54,710
Sometimes when you're
looking at the documentation,

54
00:02:54,710 --> 00:02:58,820
it may advise you to use a factory
method to create an object.

55
00:02:58,820 --> 00:03:01,510
That is instead of a constructor.

56
00:03:01,510 --> 00:03:02,710
Here's an example.

57
00:03:02,710 --> 00:03:04,290
To create a new MediaPlayer,

58
00:03:04,290 --> 00:03:09,040
the documentation advises you to
use the method MediaPlayer.create.

59
00:03:09,040 --> 00:03:13,250
And this returns a MediaPlayer object
that can be stored inside this variable.

60
00:03:13,250 --> 00:03:17,176
It follows the format of object
data type, the MediaPlayer with

61
00:03:17,176 --> 00:03:22,720
a capital m dot and the factory method
name, which is create in this case.

62
00:03:22,720 --> 00:03:26,110
Then you pass in the input arguments
to initialize that media player.

63
00:03:27,390 --> 00:03:29,710
Here's another example of
how to create a Toast.

64
00:03:30,900 --> 00:03:33,700
A toast is a message that pops
up temporarily in your app and

65
00:03:33,700 --> 00:03:34,389
then disappears.

66
00:03:35,420 --> 00:03:38,540
So the code starts with Toast
with a capital T because

67
00:03:38,540 --> 00:03:39,800
this is the object data type.

68
00:03:39,800 --> 00:03:44,050
And then we have a dot and then makeText
which is the factory method name.

69
00:03:44,050 --> 00:03:48,730
And then we pass the input
arguments to create this Toast.

70
00:03:48,730 --> 00:03:51,800
To know what the factory method name
is and what the input arguments are,

71
00:03:51,800 --> 00:03:55,280
you have to check the documentation for
the Toast class.

72
00:03:55,280 --> 00:03:58,440
In general, in order to know whether
you should create an object using

73
00:03:58,440 --> 00:04:01,780
a constructor or with a factory method,
you can just Google search for

74
00:04:01,780 --> 00:04:03,640
how to create that object.

75
00:04:03,640 --> 00:04:06,940
Using a constructor is the most
common way to create a new object.

76
00:04:06,940 --> 00:04:10,180
It's less common that you would need to
use a factory method, but to know for

77
00:04:10,180 --> 00:04:12,690
sure which one you should use,
you can just Google search for

78
00:04:12,690 --> 00:04:13,820
how to create that object.

79
00:04:15,000 --> 00:04:18,180
Here's a chance to practice
with creating objects.

80
00:04:18,180 --> 00:04:20,050
In each of these lines of code,
there's an error.

81
00:04:21,160 --> 00:04:22,380
Figure out what the error is and

82
00:04:22,380 --> 00:04:24,770
then write the correct line
of code in these boxes below.
