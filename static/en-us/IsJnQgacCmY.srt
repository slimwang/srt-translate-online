1
00:00:00,330 --> 00:00:02,560
Now that we understand the distributed object model

2
00:00:02,560 --> 00:00:06,160
of Java and how to build services using

3
00:00:06,160 --> 00:00:08,940
the distributed Java object model and publish it

4
00:00:08,940 --> 00:00:11,340
and make it accessible to the clients. Lets look

5
00:00:11,340 --> 00:00:14,880
at how the RMI is actually implemented? At

6
00:00:14,880 --> 00:00:18,770
the core of the RMI implementation is this layer

7
00:00:18,770 --> 00:00:22,820
called Remote Reference Layer, RRL. And that's the

8
00:00:22,820 --> 00:00:25,470
place where a lot of magic happens. The client

9
00:00:25,470 --> 00:00:28,940
site stub, is going to initiate a

10
00:00:28,940 --> 00:00:32,490
remote method invocation call using this Remote

11
00:00:32,490 --> 00:00:36,070
Reference Layer, and all of the magic

12
00:00:36,070 --> 00:00:39,330
with respect to marshaling the arguments. In

13
00:00:39,330 --> 00:00:44,330
order to send it over the network and so on is handled entirely by

14
00:00:44,330 --> 00:00:47,370
this Remote Reference Layer. And similarly when

15
00:00:47,370 --> 00:00:50,960
the result comes back unmarshaling the results

16
00:00:50,960 --> 00:00:55,700
into the data structures, that the client understands is once

17
00:00:55,700 --> 00:01:01,060
again accomplished using this RRL layer. On the server side. The

18
00:01:01,060 --> 00:01:06,310
skeleton that exists is therefore unmarshaling the

19
00:01:06,310 --> 00:01:09,380
arguments that comes from the client. And

20
00:01:09,380 --> 00:01:11,190
in order to unmarshal the argument, the

21
00:01:11,190 --> 00:01:14,080
skeleton uses a Remote Reference Layer, because

22
00:01:14,080 --> 00:01:17,300
a Remote Reference Layer knows how to unmarshal

23
00:01:17,300 --> 00:01:20,040
the arguments that are coming in. And the the

24
00:01:20,040 --> 00:01:23,200
skeleton then makes the call up to the server

25
00:01:23,200 --> 00:01:27,180
that is implementing the remote object. Once the server

26
00:01:27,180 --> 00:01:30,959
is done with the service, the skeleton marshals the

27
00:01:30,959 --> 00:01:33,690
result, and once again goes through the Remote Reference

28
00:01:33,690 --> 00:01:36,240
Layer to send it over to the client. And

29
00:01:36,240 --> 00:01:39,180
when it comes back, the Remote Reference Layer and

30
00:01:39,180 --> 00:01:42,850
the stub work together to deliver the results in

31
00:01:42,850 --> 00:01:48,030
a digestible format to the client. So, marshaling and unmarshaling,

32
00:01:48,030 --> 00:01:52,830
they're also called serializing and deserialization in the Java world.

33
00:01:52,830 --> 00:01:57,660
Marshaling and unmarshaling are also called. Serializing and

34
00:01:57,660 --> 00:02:02,810
deserializing Java objects, and all of that is being

35
00:02:02,810 --> 00:02:07,880
done by the RRL layer. So basically, the objects that

36
00:02:07,880 --> 00:02:10,860
are being passed this arguments, they are

37
00:02:10,860 --> 00:02:16,310
serialized by the RRL, and deserialized. On the

38
00:02:16,310 --> 00:02:21,850
server end, and given to the server. And similarly, the result, which is also an

39
00:02:21,850 --> 00:02:25,440
object, is serialized using the Remote Reference

40
00:02:25,440 --> 00:02:28,190
Layer. And when it arrives on the client

41
00:02:28,190 --> 00:02:31,130
side, it is deserialized, and delivered as

42
00:02:31,130 --> 00:02:34,140
a result object back up to the client.

43
00:02:34,140 --> 00:02:36,360
Now where are the clients and the servers? Are

44
00:02:36,360 --> 00:02:39,260
they on the same machine, on a different machine?

45
00:02:39,260 --> 00:02:43,550
Of course we're talking about networked services, and, so

46
00:02:43,550 --> 00:02:45,980
the server's going to be remote. But the server could

47
00:02:45,980 --> 00:02:49,500
have several instances. There could be a single instance

48
00:02:49,500 --> 00:02:51,950
of a server, or there could be multiple instances

49
00:02:51,950 --> 00:02:55,211
of the server and the server may have ability

50
00:02:55,211 --> 00:02:59,148
for doing persistence and so on. Where is all that

51
00:02:59,148 --> 00:03:03,130
magic happening? Well, similar to the subcontract layer

52
00:03:03,130 --> 00:03:05,800
that we discussed in the spring system, the Remote

53
00:03:05,800 --> 00:03:08,210
Reference Layer is doing all the magic with

54
00:03:08,210 --> 00:03:11,760
respect to. Where the server is? How the server

55
00:03:11,760 --> 00:03:15,410
is handling request? Is it replicated? Is it

56
00:03:15,410 --> 00:03:18,320
a singleton server? All of these things are being

57
00:03:18,320 --> 00:03:20,660
handled through the Remote Reference Layer. So what

58
00:03:20,660 --> 00:03:24,690
that means is it allows for various invocation protocols

59
00:03:24,690 --> 00:03:30,590
between the client and the servers. And all of those things are buried in the

60
00:03:30,590 --> 00:03:34,680
Remote Reference Layer. And the actual clients and

61
00:03:34,680 --> 00:03:38,660
the servers can be impervious to those details.

62
00:03:38,660 --> 00:03:44,050
So, the Java run time stack, the RRL layer is a very crucial layer. And it

63
00:03:44,050 --> 00:03:47,520
has functionalities very similar to the subcontract mechanism

64
00:03:47,520 --> 00:03:50,140
and the spring system. And as I mentioned

65
00:03:50,140 --> 00:03:56,406
earlier Java RMI derives a lot from the subcontract mechanism.

66
00:03:56,406 --> 00:03:59,160
And, so there is not much surprise that there are

67
00:03:59,160 --> 00:04:03,840
similarities between the RRL layer and the subcontract mechanism. Having

68
00:04:03,840 --> 00:04:07,460
discussed RRL, let's go and talk about, the transport layer.
