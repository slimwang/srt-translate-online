1
00:00:00,000 --> 00:00:05,000
And what's cool about this algorithm is it finds the Top K elements in no particular order

2
00:00:05,000 --> 00:00:08,000
in Î(n) independent of K.

3
00:00:08,000 --> 00:00:12,000
Now remember, the best that we could do for the previous algorithm is if K is large

4
00:00:12,000 --> 00:00:15,000
we ended up using sorting which is n log n.

5
00:00:15,000 --> 00:00:19,000
This is always Î(n) or at least expected top running time.

6
00:00:19,000 --> 00:00:22,000
The worst case can be bad, but there's a way of fixing that as well.

7
00:00:22,000 --> 00:00:26,000
This is pretty remarkable, and you might find this to be quite counter-intuitive.

8
00:00:26,000 --> 00:00:33,000
For example, if the list has n elements in it, it takes us n log n time to sort it.

9
00:00:33,000 --> 00:00:39,000
How could it take us less than that to find the Top K if k = n?

10
00:00:39,000 --> 00:00:43,000
Well, it's actually this phrase here that's really important. In no particular order.

11
00:00:43,000 --> 00:00:48,000
Basically, if you ask me to find the top 100 elements in a list of like 100,

12
00:00:48,000 --> 00:00:52,000
I don't have to do anything, right. I can just give you back the original list even if it's not sorted.

13
00:00:52,000 --> 00:00:56,000
The top 100 is exactly these elements. This is what you asked for.

14
00:00:56,000 --> 00:00:59,000
That's why this is not actually equivalent to sorting.

15
00:00:59,000 --> 00:01:01,000
It can be actually much more efficient than sorting.

16
00:01:01,000 --> 00:01:05,000
Now, what happens in the case where we're looking for the top half?

17
00:01:05,000 --> 00:01:07,000
It seems a little trickier, right?

18
00:01:07,000 --> 00:01:11,000
In the top half case, we can still do this in linear time even though sorting the whole list

19
00:01:11,000 --> 00:01:16,000
is the natural way to do this to split the top half and the bottom half and that takes n log n.

20
00:01:16,000 --> 00:01:22,000
The key step to this algorithm is going to be the following simple subproblem.

21
00:01:22,000 --> 00:01:25,000
Kind of interesting maybe but a slightly counter-intuitive problem.

22
00:01:25,000 --> 00:01:30,000
And that is finding the rank of a given value in a sorted list.

23
00:01:30,000 --> 00:01:36,000
We're given L unsorted and we're given the value of V and we'd like to find out

24
00:01:36,000 --> 00:01:39,000
where V would appear if L were sorted.

25
00:01:39,000 --> 00:01:43,000
It's not sorted but if it were sorted where would this value V appear on the list.

26
00:01:43,000 --> 00:01:46,000
Now just for the simplicity of the discussion for now

27
00:01:46,000 --> 00:01:49,000
let's assume that all the values in the list are distinct.

28
00:01:49,000 --> 00:01:53,000
We're imagining here we've got our list L and we pick out some value V.

29
00:01:53,000 --> 00:01:57,000
It doesn't actually have to be in the list but let's say it's in the list

30
00:01:57,000 --> 00:02:00,000
and what we want to know is where would V appear in L

31
00:02:00,000 --> 00:02:03,000
if L were sorted say smallest to largest?

32
00:02:03,000 --> 00:02:08,000
Now, one way to solve this problem of course is to sort L and then look for V.

33
00:02:08,000 --> 00:02:13,000
But the insight here is that we don't need to do nearly that much work. So how do we do it?

34
00:02:13,000 --> 00:02:19,000
Let's look at a concrete example. Here's L. This is an unsorted list of unique numbers.

35
00:02:19,000 --> 00:02:23,000
They're all 2 digit numbers just for my own sanity in writing them down.

36
00:02:23,000 --> 00:02:29,000
And then this is the sorted list L. It's the same elements but I've put them in order.

37
00:02:29,000 --> 00:02:38,000
And let's consider number 66 say. So here's 66 in the original list.

38
00:02:38,000 --> 00:02:45,000
How can we figure out just by scanning through L where 66 is going to end up in this list?

39
00:02:45,000 --> 00:02:51,000
Well what makes it end up there. It's in position what? 0, 1, 2, 3, 4, 5, 6, 7, 8.

40
00:02:51,000 --> 00:02:55,000
It's in position 8. So why is it in position 8?

41
00:02:55,000 --> 00:03:03,000
Well, it's in position 8 because there are exactly 8 elements in the list that are smaller than 66.

42
00:03:03,000 --> 00:03:06,000
Right? Because once it's sorted, those 8 elements are going to be to its left

43
00:03:06,000 --> 00:03:09,000
and that's what's going to put 66 in the 8th position.

44
00:03:09,000 --> 00:03:15,000
We can just go through this list making note of the elements that are smaller than 66.

45
00:03:15,000 --> 00:03:27,000
31. 45. Not 91. Yes 51. Not 82. Yes 28. Yes 33. Yes 11. No. No. Yes. Yes.

46
00:03:27,000 --> 00:03:32,000
For a total of 1, 2, 3, 4, 5, 6 , 7, 8 elements.

47
00:03:32,000 --> 00:03:36,000
That's how we can know where 66 is going to be in the sorted list

48
00:03:36,000 --> 00:03:43,000
even if I don't tell you the sorted list in advance.
