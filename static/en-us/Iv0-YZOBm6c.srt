1
00:00:00,380 --> 00:00:03,450
The first thing to realize when
designing your application architecture,

2
00:00:03,450 --> 00:00:07,240
is that your phone typically has
a much more powerful processor, and

3
00:00:07,240 --> 00:00:09,450
a much larger battery
than your wearable.

4
00:00:09,450 --> 00:00:12,350
You want to offload as much as
possible away from the wearable

5
00:00:12,350 --> 00:00:14,520
to try to get the most
battery life out of it.

6
00:00:14,520 --> 00:00:18,040
Another key part of the application
architecture is that the phone

7
00:00:18,040 --> 00:00:22,040
has direct access to the Internet,
while the wearable over here does not.

8
00:00:22,040 --> 00:00:25,560
So let's imagine a scenario where you'll
building an app to show weather updates

9
00:00:25,560 --> 00:00:26,450
on a wearable.

10
00:00:26,450 --> 00:00:29,100
The phone will need to make
the request to fetch the data,

11
00:00:29,100 --> 00:00:32,030
and then send that to
the wearable via data relay API.

12
00:00:32,030 --> 00:00:34,980
There are many ways you
can implement this, but

13
00:00:34,980 --> 00:00:38,060
if you do not design this
carefully it may perform poorly.

14
00:00:38,060 --> 00:00:40,670
So how do we implement
an efficient solution to this?

15
00:00:40,670 --> 00:00:43,260
One of the first improvements comes
from changing how you wake up

16
00:00:43,260 --> 00:00:44,370
the wearable device.

17
00:00:44,370 --> 00:00:46,950
Rather then having the wearable
wake up every 10 seconds or so,

18
00:00:46,950 --> 00:00:49,960
and request an update of
information from the phone,

19
00:00:49,960 --> 00:00:53,650
instead allow the phone to drive
updates to the wearable device.

20
00:00:53,650 --> 00:00:56,800
The simple action of keeping
the watch asleep as long as possible

21
00:00:56,800 --> 00:00:58,640
will help conserve battery life.

22
00:00:58,640 --> 00:01:02,110
So once you've made the weather update
request from the phone to the internet,

23
00:01:02,110 --> 00:01:04,150
you may get back outdated information.

24
00:01:04,150 --> 00:01:07,380
An important step to do here is
to compare this with the previous

25
00:01:07,380 --> 00:01:08,810
information downloaded earlier.

26
00:01:08,810 --> 00:01:12,440
If there's no change to the information,
you should not update the watch.

27
00:01:12,440 --> 00:01:15,960
There's no point waking it up just
to tell it that nothing has changed.

28
00:01:15,960 --> 00:01:18,920
We want the watch sleeping
as much as possible.

29
00:01:18,920 --> 00:01:20,440
If you have detected a change,

30
00:01:20,440 --> 00:01:24,080
it's important to minimize the amount of
data we actually send to the wearable.

31
00:01:24,080 --> 00:01:26,710
It would be a bad idea to send
the entire weather query result to

32
00:01:26,710 --> 00:01:29,980
the wearable, since it probably
includes a lot of extra information,

33
00:01:29,980 --> 00:01:31,450
such as what you see here.

34
00:01:31,450 --> 00:01:33,840
Instead, we should pass
it on the phone and

35
00:01:33,840 --> 00:01:38,340
send just a single temperature value,
like this one here, to the wearable.

36
00:01:38,340 --> 00:01:41,340
Remember, we're trying to minimize the
amount of work done on the wearable, and

37
00:01:41,340 --> 00:01:45,020
even things that might seem
trivial will add up eventually.

38
00:01:45,020 --> 00:01:47,250
So how should we send
data to the wearable?

39
00:01:47,250 --> 00:01:49,320
If you had to send a large
amount of temperature data for

40
00:01:49,320 --> 00:01:52,640
a time range, it might be tempting
to create separate data items for

41
00:01:52,640 --> 00:01:55,520
each time and temperature and
send them separately.

42
00:01:55,520 --> 00:01:58,670
However for each piece of data,
set between the phone and

43
00:01:58,670 --> 00:02:03,390
the wearable, there are overheads
added by the platform and the network.

44
00:02:03,390 --> 00:02:07,170
These overheads include headers for
packets, acknowledgments per packet, and

45
00:02:07,170 --> 00:02:09,320
energy required for every packet sent.

46
00:02:09,320 --> 00:02:11,520
As well as activating
the wireless hardware.

47
00:02:11,520 --> 00:02:13,780
When designing code to
send out over a network,

48
00:02:13,780 --> 00:02:16,380
taking these overheads into
consideration is important.

49
00:02:16,380 --> 00:02:20,430
So by storing many numeric values into
a single message, there'll be much less

50
00:02:20,430 --> 00:02:23,310
data sent and processed,
than sending each one separately.

51
00:02:23,310 --> 00:02:26,770
The results can be quite considerable,
as you can see here.

52
00:02:26,770 --> 00:02:29,690
Once you've sent the item to the
wearable, you might be tempted to add

53
00:02:29,690 --> 00:02:32,010
an acknowledgement to
check it was received.

54
00:02:32,010 --> 00:02:34,840
However, if you're using data items,
they are guaranteed by

55
00:02:34,840 --> 00:02:37,810
the framework to be synchronized
when the wearable is paired up, so

56
00:02:37,810 --> 00:02:40,120
you can be sure they'll
eventually be received.

57
00:02:40,120 --> 00:02:43,360
If you're using messages, then you will
need to check that they were received,

58
00:02:43,360 --> 00:02:46,930
since transmission is never guaranteed
if the device is disconnected, or

59
00:02:46,930 --> 00:02:47,910
something else happens.
