1
00:00:00,370 --> 00:00:03,680
Previously I mentioned that REST
is more a set of guidelines than

2
00:00:03,680 --> 00:00:05,510
a protocol itself.

3
00:00:05,510 --> 00:00:07,998
This is because it takes
the HTTP protocol and

4
00:00:07,998 --> 00:00:12,395
applies a few constraints to clarify
communication and resource management.

5
00:00:12,395 --> 00:00:16,430
In this video, I will go more in depth
as to what these constraints mean for

6
00:00:16,430 --> 00:00:17,677
us as API developers.

7
00:00:17,677 --> 00:00:21,113
The first constraint of a REST full
implementation is the separation of

8
00:00:21,113 --> 00:00:23,100
clients and servers.

9
00:00:23,100 --> 00:00:26,290
A client is defined as
a machine requesting a resource

10
00:00:26,290 --> 00:00:30,070
where the server is the machine that
responds with the requested resource.

11
00:00:30,070 --> 00:00:34,096
A machine can function as a client and
as a server, but for the duration of

12
00:00:34,096 --> 00:00:37,924
an HTTP request and response cycle,
it must assume the role as either

13
00:00:37,924 --> 00:00:41,765
the requester of the information or
the holder of that information.

14
00:00:41,765 --> 00:00:46,280
A stateful architecture remembers
a client's activity between requests.

15
00:00:46,280 --> 00:00:48,520
If you've ever used a website
where you have shopping cart or

16
00:00:48,520 --> 00:00:51,890
login session, it appears as though
the server is remembering your activity

17
00:00:51,890 --> 00:00:53,760
throughout the duration of
your time on the website.

18
00:00:54,940 --> 00:00:58,835
A truly RESTful architecture, however,
is not allowed to retain information

19
00:00:58,835 --> 00:01:02,337
about the state of another machine
during the communication process.

20
00:01:02,337 --> 00:01:05,726
Each request from a client to a server
must be treated as though it was

21
00:01:05,726 --> 00:01:08,768
the first request the server
has ever seen from that client.

22
00:01:08,768 --> 00:01:11,960
A server should not remember its clients
and readjust its state accordingly.

23
00:01:12,980 --> 00:01:17,300
The server may only give back up to date
state about its state to the client and

24
00:01:17,300 --> 00:01:20,110
allow for modifications,
if it is authorized to do so.

25
00:01:21,180 --> 00:01:22,008
In lesson four,

26
00:01:22,008 --> 00:01:25,557
you will see how using tokens is a good
way to have a stateless design that

27
00:01:25,557 --> 00:01:28,948
can create an experience that seems
state remembering to the user.

28
00:01:28,948 --> 00:01:32,883
Response messages from the server to
the client are explicitly labeled as

29
00:01:32,883 --> 00:01:34,602
cacheable or non-cacheable.

30
00:01:34,602 --> 00:01:38,037
This way, responses can me cached by the
client if the information on the server

31
00:01:38,037 --> 00:01:40,710
hasnâ€™t changed since the last request.

32
00:01:40,710 --> 00:01:43,600
RESTful architectures must have
a uniform interface between

33
00:01:43,600 --> 00:01:45,340
all clients and servers.

34
00:01:45,340 --> 00:01:49,350
For example, a server must not require
a different way of accessing data

35
00:01:49,350 --> 00:01:52,890
if a client has a Windows laptop
verses an iPhone or a Unix server.

36
00:01:54,010 --> 00:01:56,000
Gaining access to these
end points is the same for

37
00:01:56,000 --> 00:01:58,720
any machine trying to
access this information.

38
00:01:58,720 --> 00:02:01,530
A layered system means that
a client can have access to

39
00:02:01,530 --> 00:02:05,230
endpoint that relies on other
endpoints without having to understand

40
00:02:05,230 --> 00:02:07,360
all of the underlying implementations.

41
00:02:07,360 --> 00:02:10,139
If client A wants to
communicate with server B and

42
00:02:10,139 --> 00:02:11,850
that server goes out to Google or

43
00:02:11,850 --> 00:02:15,910
some other database in order to generate
a response, client A should not have to

44
00:02:15,910 --> 00:02:20,350
accommodate for any other technologies
besides accessing server B's endpoint.

45
00:02:20,350 --> 00:02:24,021
Layering allows very complicated tasks
to be completed without having to

46
00:02:24,021 --> 00:02:27,396
understand all of the underlying
complexities that are required to

47
00:02:27,396 --> 00:02:28,656
generate the response.

48
00:02:28,656 --> 00:02:32,445
Code on Demand is an optional constraint
for RESTful applications, but

49
00:02:32,445 --> 00:02:35,799
it opens a possibility for
code like JavaScript, for example,

50
00:02:35,799 --> 00:02:38,861
from the server to be sent off
to the client for execution.

51
00:02:38,861 --> 00:02:40,495
For more about the RESTful constraints,

52
00:02:40,495 --> 00:02:43,540
feel free to follow some of the links
I've provided in the instructor notes.
