1
00:00:00,530 --> 00:00:05,140
Okay so we have seen that there is a problem when multiple instructions execute

2
00:00:05,140 --> 00:00:08,350
in the same cycle. And the problem occurs because we need to

3
00:00:08,350 --> 00:00:12,020
read registers before the previous instructions have written them. Because those

4
00:00:12,020 --> 00:00:15,410
previous instructions now execute at the same time as our instruction.

5
00:00:15,410 --> 00:00:19,450
And then we can see that problem really occurs in the execute stage because we

6
00:00:19,450 --> 00:00:23,550
are just operating on wrong value. So let's see in the execute stage if

7
00:00:23,550 --> 00:00:27,100
forwarding can help us with this. If you remember your pipelining.

8
00:00:27,100 --> 00:00:31,900
What forwarding does is it feeds the value from the previous instruction to

9
00:00:31,900 --> 00:00:35,480
the subsequent instructions because those values have actually been written to

10
00:00:35,480 --> 00:00:38,510
register. So let's see if that helps. If you remember,

11
00:00:38,510 --> 00:00:43,390
we had our instructions and now we are just going to look at the execute stage,

12
00:00:43,390 --> 00:00:49,484
and we are going to have our instruction just be I1, I2, I3, I4 and

13
00:00:49,484 --> 00:00:54,460
I5, and remember that there was a dependence from I1 to I2. So

14
00:00:54,460 --> 00:00:59,400
now what would happen is, we execute I1 at some point, and

15
00:00:59,400 --> 00:01:04,730
in the same cycle we execute I2. So the problem with forwarding is

16
00:01:04,730 --> 00:01:09,760
that it would be able to feed this value to the instruction in the next cycle.

17
00:01:10,980 --> 00:01:14,730
But not to an instruction in the same cycle. Cause basically if you look at

18
00:01:14,730 --> 00:01:19,400
the timeline for the cycle. This is the kind of beginning of the execute stage.

19
00:01:19,400 --> 00:01:22,590
This is the end of the execute stage. In here somewhere,

20
00:01:22,590 --> 00:01:27,100
we are kind of taking two values, operating on them, producing the result.

21
00:01:27,100 --> 00:01:30,510
This result is available kind of here, at the end of the cycle.

22
00:01:30,510 --> 00:01:34,970
Meanwhile, the other instruction is taking its values during the subtraction,

23
00:01:34,970 --> 00:01:41,150
producing a result. And this is where forwarding can provide this value.

24
00:01:41,150 --> 00:01:44,790
If forwarding worked, it would have to provide the value here, and

25
00:01:44,790 --> 00:01:48,530
any arrow that goes backward here means basically time travel. So pretty much

26
00:01:48,530 --> 00:01:52,360
you would produce a result and, you know, one cycle send it back in time one

27
00:01:52,360 --> 00:01:55,980
nanosecond earlier, so that it can be used here which is of course impossible.

28
00:01:55,980 --> 00:02:01,910
So we cannot do that. What we will do is not execute this instruction here.

29
00:02:01,910 --> 00:02:05,990
We will have to stall meaning this instruction has to be delayed it just cannot

30
00:02:05,990 --> 00:02:11,230
execute in this cycle. It will execute in the next cycle. If I3,

31
00:02:11,230 --> 00:02:15,740
I4 and I5 don't have any dependencies with I1, they can still execute you

32
00:02:15,740 --> 00:02:20,050
know they have read the register values they're going to be able to execute. So

33
00:02:20,050 --> 00:02:26,476
now what we have is really. We spent two cycles executing five instructions,

34
00:02:26,476 --> 00:02:29,510
okay? So if we ignore the filling of the pipeline and so on,

35
00:02:29,510 --> 00:02:36,700
basically what we have now is the CPI is equal to two over five in this case,

36
00:02:36,700 --> 00:02:42,360
which is approximately 0.4. Actually, it is 0.4. So what we have is a CPI of,

37
00:02:42,360 --> 00:02:47,010
you know, instead of it being 0.2 for these five instructions, it would be 0.4.

38
00:02:47,010 --> 00:02:51,730
If we have a lot of instructions, there will be a lot of these dependencies. So

39
00:02:51,730 --> 00:02:55,220
we will actually have to spend, you know, we will have a CPI that is not zero,

40
00:02:55,220 --> 00:02:59,060
even if we had an infinite number of execution units.
