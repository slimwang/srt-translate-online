1
00:00:00,090 --> 00:00:02,790
We have already seen that a VLIW instruction

2
00:00:02,790 --> 00:00:06,386
really specifies several operations. Each of which operations would

3
00:00:06,386 --> 00:00:08,887
have taken a normal instruction in a normal super

4
00:00:08,887 --> 00:00:12,940
scalar processor. The instructions set for a VLIW processor

5
00:00:12,940 --> 00:00:15,600
typically has all the normal ISA opcodes, so

6
00:00:15,600 --> 00:00:18,890
each of the VLIW instructions can typically do whatever

7
00:00:18,890 --> 00:00:21,760
normal instructions would have been able to do in

8
00:00:21,760 --> 00:00:25,671
and out of normal processor. A typical VLIW processor

9
00:00:25,671 --> 00:00:28,582
will also have support for full predication, or

10
00:00:28,582 --> 00:00:32,380
at least very extensive predication support. This is

11
00:00:32,380 --> 00:00:35,250
because it relies on the compiler to expose

12
00:00:35,250 --> 00:00:38,470
parallelism. One of the ways the compiler does that

13
00:00:38,470 --> 00:00:41,380
is through scheduling instructions, so we really want

14
00:00:41,380 --> 00:00:44,210
the compiler to be able to predicate and thus

15
00:00:44,210 --> 00:00:48,220
expose more opportunities for instruction scheduling. A VLIW

16
00:00:48,220 --> 00:00:52,169
ISA also, typically, includes a lot of architectural registers.

17
00:00:53,180 --> 00:00:55,060
The reason for this is at that a lot

18
00:00:55,060 --> 00:00:59,350
of the scheduling optimizations require use of additional registers. We

19
00:00:59,350 --> 00:01:02,160
have already seen some examples of this in the

20
00:01:02,160 --> 00:01:05,400
compiler support for IOP lesson. What we have seen, that

21
00:01:05,400 --> 00:01:08,860
sometimes we have to put somethings in other registers,

22
00:01:08,860 --> 00:01:12,461
when we're rearranging instructions. So to help the compiler do

23
00:01:12,461 --> 00:01:15,877
instruction scheduling, we need more registers than usual and we

24
00:01:15,877 --> 00:01:18,317
really, really want the compiler to do a god job

25
00:01:18,317 --> 00:01:19,842
here so we will provide a lot of

26
00:01:19,842 --> 00:01:25,000
registers to it. Another frequently seen type of

27
00:01:25,000 --> 00:01:27,770
ISA support for compiler work are the branch

28
00:01:27,770 --> 00:01:30,840
hints, where the compiler can specify to the hardware

29
00:01:30,840 --> 00:01:33,806
what it thinks the branches will do. This

30
00:01:33,806 --> 00:01:36,790
helps the branch vectors. And we also often

31
00:01:36,790 --> 00:01:40,080
see some sort of compaction mechanism for VLIW

32
00:01:40,080 --> 00:01:43,750
instructions. For example, if we have a four operation

33
00:01:43,750 --> 00:01:47,080
instruction, and we have something like this, we do

34
00:01:47,080 --> 00:01:49,470
some operation and then the next operation needs to

35
00:01:49,470 --> 00:01:51,980
be here and thus we have to put NOPs

36
00:01:51,980 --> 00:01:57,002
in here. The actual VLIW instruction might include some sort

37
00:01:57,002 --> 00:02:00,434
of a stop date for every instruction, in which

38
00:02:00,434 --> 00:02:03,426
case we can put OP1 here, then mark this

39
00:02:03,426 --> 00:02:09,497
as a stop, and then we can put OP2, and OP3, like this, mark this as a stop, and

40
00:02:09,497 --> 00:02:13,113
even squeeze in maybe something else here. So,

41
00:02:13,113 --> 00:02:15,289
the idea is that instead of having a lot

42
00:02:15,289 --> 00:02:17,941
of NOPs in our instruction, now the processor

43
00:02:17,941 --> 00:02:21,273
fetches this instruction, checks for the stop bits, and

44
00:02:21,273 --> 00:02:25,557
in the first cycle does this, in the second cycle does up to the next stop and

45
00:02:25,557 --> 00:02:29,020
so on. So, this helps a lot in reducing

46
00:02:29,020 --> 00:02:31,921
the number of NOPs and thus, the code bloat
