1
00:00:00,500 --> 00:00:03,790
In the credit card class, we can look at the pseudo

2
00:00:03,790 --> 00:00:06,990
code, and find that it first sets sum, and count to zero.

3
00:00:06,990 --> 00:00:10,030
That's already there. These lines are the same as what we

4
00:00:10,030 --> 00:00:13,530
had before, for computing the sum of every other digit. The for

5
00:00:13,530 --> 00:00:16,040
each digit starting from the right part, is getting pretty familiar

6
00:00:16,040 --> 00:00:19,572
now. I'll keep the code for controlling the number of erasions in

7
00:00:19,572 --> 00:00:22,620
place. But now, instead of just always adding digit to the

8
00:00:22,620 --> 00:00:25,840
sum. I need to check whether the count is even or odd.

9
00:00:25,840 --> 00:00:27,457
And before I even get the digit, I want to

10
00:00:27,457 --> 00:00:31,330
make sure I remember the increment count. Now [SOUND], if

11
00:00:31,330 --> 00:00:33,530
count is odd [SOUND], I add the digit to

12
00:00:33,530 --> 00:00:38,350
the sum. Otherwise, count is even and if the digit

13
00:00:38,350 --> 00:00:41,470
is less than five, I add twice the digit

14
00:00:41,470 --> 00:00:44,910
to the sum. In the last case. Count is even

15
00:00:44,910 --> 00:00:47,290
and the digit is greater than five [SOUND]. And I

16
00:00:47,290 --> 00:00:51,970
want to add twice the digit [SOUND], and then subtract nine.

17
00:00:51,970 --> 00:00:54,300
This is all just matching that pseudo code.

18
00:00:54,300 --> 00:00:57,000
Now, instead of just returning false, I need to

19
00:00:57,000 --> 00:01:00,998
return [SOUND] whether the last digit of n. Is

20
00:01:00,998 --> 00:01:04,610
zero, or not. The last digit of n is

21
00:01:04,610 --> 00:01:12,533
zero when sum mod ten is zero. For example, if sum were 24, then sum mod ten

22
00:01:12,533 --> 00:01:17,160
would be four, which is not zero, and the card would not be valid. But if sum is

23
00:01:17,160 --> 00:01:20,650
40, then sum mod ten is zero. And the

24
00:01:20,650 --> 00:01:24,360
card is valid. So this would return true. Looks

25
00:01:24,360 --> 00:01:25,890
like I forgot to change my pseudo code into

26
00:01:25,890 --> 00:01:30,500
real code. Count is odd, if count mod two is

27
00:01:30,500 --> 00:01:33,920
one. And now I'll run the tester. And it

28
00:01:33,920 --> 00:01:35,740
looks like, for at least the examples that we've

29
00:01:35,740 --> 00:01:38,650
used, my code is returning true when true is

30
00:01:38,650 --> 00:01:42,160
expected. And false when false is expected. Here's some food

31
00:01:42,160 --> 00:01:45,120
for thought. Does this guarantee that my code is correct?
