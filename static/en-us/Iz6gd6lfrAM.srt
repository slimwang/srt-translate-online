1
00:00:00,630 --> 00:00:02,790
Earlier in the lesson we
learned about how to declare or

2
00:00:02,790 --> 00:00:04,088
create an integer variable.

3
00:00:04,088 --> 00:00:07,520
We're going to follow the same
format to create a variable, but

4
00:00:07,520 --> 00:00:11,480
this time the variable holds
text because it's a string.

5
00:00:11,480 --> 00:00:13,815
This is the code we added to our app.

6
00:00:13,815 --> 00:00:16,995
This creates a new string
variable called priceMessage.

7
00:00:16,995 --> 00:00:19,715
And the value that it
holds is the text Free.

8
00:00:20,825 --> 00:00:24,605
It follows a specific format according
to the syntax rules of Java.

9
00:00:24,605 --> 00:00:26,025
First, we specify the data type.

10
00:00:26,025 --> 00:00:28,515
In this case, it's a string.

11
00:00:28,515 --> 00:00:31,485
Remember that a string is just
a sequence of characters.

12
00:00:31,485 --> 00:00:34,939
Then it's followed by the variable name,
which is priceMessage in this case.

13
00:00:36,080 --> 00:00:38,850
Then it's followed by an equal sign,
initial value,

14
00:00:38,850 --> 00:00:41,330
and a semicolon to indicate
the end of the statement.

15
00:00:42,490 --> 00:00:46,280
Saying that the data type is a string
limits what type of information can go

16
00:00:46,280 --> 00:00:47,780
inside this variable.

17
00:00:47,780 --> 00:00:50,780
Only one string can be
stored in it at a time.

18
00:00:50,780 --> 00:00:53,830
A string can be made up of letters,
numbers, or symbols.

19
00:00:54,860 --> 00:00:58,770
You may recall that a variable name is
the name that we give this variable, so

20
00:00:58,770 --> 00:01:03,160
we can refer to it later, to get
the value out or to update the value.

21
00:01:03,160 --> 00:01:04,650
It's like giving
the variable a name tag.

22
00:01:05,920 --> 00:01:08,620
When you're picking a variable name,
it's important to choose something

23
00:01:08,620 --> 00:01:12,950
that's descriptive, that describes what
type of information it will be holding.

24
00:01:12,950 --> 00:01:15,660
I could call this variable
name Catherine, but

25
00:01:15,660 --> 00:01:18,520
it really does not reflect
the information inside of it.

26
00:01:18,520 --> 00:01:20,530
It makes my code harder to read as well,

27
00:01:20,530 --> 00:01:24,820
because no one knows why there's
a string variable called Catherine.

28
00:01:24,820 --> 00:01:25,450
On the other hand,

29
00:01:25,450 --> 00:01:28,990
a variable name like priceMessage is
a little more helpful, because you know

30
00:01:28,990 --> 00:01:32,530
there's a message inside of it that's
related to the price probably.

31
00:01:32,530 --> 00:01:36,280
We looked at this earlier, but there are
naming conventions for variable names.

32
00:01:36,280 --> 00:01:38,990
If you forget what those are,
you can always look them up.

33
00:01:38,990 --> 00:01:42,350
I just search for
variable name Java in Google Search.

34
00:01:42,350 --> 00:01:45,690
I can scroll down here to
where it talks about naming.

35
00:01:45,690 --> 00:01:47,780
It says that variable names
are case-sensitive, and

36
00:01:47,780 --> 00:01:49,850
you usually start with
a lowercase letter.

37
00:01:49,850 --> 00:01:52,520
And then you use camel case
if there's multiple words.

38
00:01:53,950 --> 00:01:57,420
Next we have the assignment operator,
or the equal sign here.

39
00:01:57,420 --> 00:02:00,830
This operator is in charge of
assigning a value to a variable.

40
00:02:00,830 --> 00:02:02,860
So you take this value on
the right-hand side and

41
00:02:02,860 --> 00:02:04,910
you assign it into
the variable priceMessage.

42
00:02:06,100 --> 00:02:09,400
We specify the initial value of
this string to be some text and

43
00:02:09,400 --> 00:02:10,949
double quotes.

44
00:02:10,949 --> 00:02:15,800
This is called a string literal,
because a literal has a fixed value.

45
00:02:15,800 --> 00:02:20,060
We first heard about literals when we
were learning about integer variables.

46
00:02:20,060 --> 00:02:24,190
A fixed value like two or five or
ten are all integer literal

47
00:02:24,190 --> 00:02:29,060
values because they don't change, as
opposed to a variable which does change.

48
00:02:29,060 --> 00:02:31,480
Going back to our box analogy,
the value,

49
00:02:31,480 --> 00:02:34,020
Free, would go inside this variable.

50
00:02:34,020 --> 00:02:36,830
And last but not least, we also have
a semicolon at the end of the statement.

51
00:02:38,040 --> 00:02:41,310
Now that we understand this line of
code a little better, go ahead and

52
00:02:41,310 --> 00:02:43,860
try to experiment with different values.

53
00:02:43,860 --> 00:02:47,890
You can try to change the initial value
here or change the variable name.

54
00:02:47,890 --> 00:02:50,420
For example,
you can use a short string like Free or

55
00:02:50,420 --> 00:02:52,460
change it to be a longer string.

56
00:02:52,460 --> 00:02:55,220
You could make it a completely
empty string as well,

57
00:02:55,220 --> 00:02:58,830
which leaves no characters in
between the two quote signs.

58
00:02:58,830 --> 00:03:03,120
You could add a space, or
you could add numbers as well, or

59
00:03:03,120 --> 00:03:04,250
you could add symbols.

60
00:03:05,920 --> 00:03:08,930
When you're creating your
string literal, just be careful

61
00:03:08,930 --> 00:03:12,640
that there are certain characters
that you need to deal with specially.

62
00:03:12,640 --> 00:03:16,040
For example, if you use
the quote sign in your string,

63
00:03:16,040 --> 00:03:18,970
then you're going to run
into an error that says,

64
00:03:18,970 --> 00:03:24,090
can't resolve symbol dollar and
a semicolon is expected.

65
00:03:24,090 --> 00:03:27,360
This is because the compiler doesn't
know that the whole string is supposed

66
00:03:27,360 --> 00:03:29,150
to be this whole thing.

67
00:03:29,150 --> 00:03:30,950
To solve this problem,
let's do a Google search.

68
00:03:32,190 --> 00:03:34,720
In Google, search for
Java escape characters.

69
00:03:38,090 --> 00:03:41,750
And scroll down to a section
called escape sequences.

70
00:03:41,750 --> 00:03:44,920
In Java,
certain characters mean special things.

71
00:03:44,920 --> 00:03:49,210
The start and end quote symbols
are to denote a string in Java, but

72
00:03:49,210 --> 00:03:52,160
if you want to actually put
a quote inside your string,

73
00:03:52,160 --> 00:03:55,090
you'll need to use an escape sequence.

74
00:03:55,090 --> 00:03:59,330
An escape sequence is a character
preceded by a backslash, and

75
00:03:59,330 --> 00:04:01,990
the Java compiler will
interpret it in a special way.

76
00:04:03,030 --> 00:04:06,520
If we use a backslash with a double
quote, that indicates that we actually

77
00:04:06,520 --> 00:04:11,460
want to use the quote symbol, not
the quote that means it's a text string.

78
00:04:11,460 --> 00:04:12,350
Let me show you what I mean.

79
00:04:13,480 --> 00:04:16,160
In Android Studio I can add
a backslash before each

80
00:04:16,160 --> 00:04:19,079
quote mark that I actually
want to appear in the text.

81
00:04:20,200 --> 00:04:24,520
Now, the whole initial value of this
variable will be this whole string,

82
00:04:24,520 --> 00:04:26,880
because it's marked off by
the certain end quotes.

83
00:04:28,570 --> 00:04:31,390
And inside that text string,
I also want to use quotes, but

84
00:04:31,390 --> 00:04:34,720
I mark those by using a backslash
in front of each quote.

85
00:04:35,760 --> 00:04:39,220
If I run on my device,
I see the quotes around one dollar, but

86
00:04:39,220 --> 00:04:42,130
I don't see the quotes around the full
thing ,which is what we expect.

87
00:04:43,240 --> 00:04:46,510
Another useful escape sequence
to know is this backslash n,

88
00:04:46,510 --> 00:04:50,360
which inserts a new line so that the
text will continue on to the next line.

89
00:04:51,610 --> 00:04:53,180
You can try this one out
in your code as well.

90
00:04:54,230 --> 00:04:57,730
Remember that the semicolon should
always be at the end of the statement.

91
00:04:57,730 --> 00:04:59,700
Even though in English it's
grammatically correct to put the

92
00:04:59,700 --> 00:05:04,050
punctuation inside the quote, you want
to put it on the outside of the quote.

93
00:05:04,050 --> 00:05:07,620
Anything in between here
is part of the text string.

94
00:05:07,620 --> 00:05:10,540
And you need to put the semicolon on
the outside for the Java compiler.

95
00:05:10,540 --> 00:05:13,360
You can also modify the variable name.

96
00:05:13,360 --> 00:05:17,440
If I change this to something like
message, then this gives me an error

97
00:05:17,440 --> 00:05:20,200
here, because it can't resolve
the symbol price message.

98
00:05:20,200 --> 00:05:22,150
So I just need to copy it and
put it down here as well.

99
00:05:22,150 --> 00:05:23,790
And this should run on your device.

100
00:05:24,790 --> 00:05:26,860
You can't change the data type, though.

101
00:05:26,860 --> 00:05:30,110
It must be spelled string
exactly like this.

102
00:05:30,110 --> 00:05:32,245
String is capitalized here
because it's an object.

103
00:05:32,245 --> 00:05:34,700
We'll learn about objects in Lesson 3,
but for

104
00:05:34,700 --> 00:05:37,230
now just type string with a capital S.

105
00:05:37,230 --> 00:05:38,960
When we were working
with integers earlier,

106
00:05:38,960 --> 00:05:41,889
we would declare integers
with a lowercase i for int.

107
00:05:42,960 --> 00:05:45,570
It's lowercase because it's
a primitive data type,

108
00:05:45,570 --> 00:05:48,540
where primitive means it's one
of the basic Java data types.

109
00:05:49,730 --> 00:05:51,470
Experiment with different
variable names and

110
00:05:51,470 --> 00:05:54,980
initial values until you're comfortable
with creating string variables.

111
00:05:54,980 --> 00:05:57,680
Then I want you to tell me what's
incorrect about each of these string

112
00:05:57,680 --> 00:05:59,670
declarations listed below.

113
00:05:59,670 --> 00:06:02,320
I want you to point out the error
in each of these lines of code.
