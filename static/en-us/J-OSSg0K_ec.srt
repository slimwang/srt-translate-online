1
00:00:00,470 --> 00:00:01,290
All right.

2
00:00:01,290 --> 00:00:04,830
So I think we have a better
idea now of when we should and

3
00:00:04,830 --> 00:00:06,400
should not use arrays.

4
00:00:06,400 --> 00:00:07,600
>> Yeah.
But we haven't talked about how to

5
00:00:07,600 --> 00:00:08,410
use arrays in code.

6
00:00:08,410 --> 00:00:11,100
Like do each of these thoughts
have a variable name?

7
00:00:11,100 --> 00:00:12,050
>> Well not exactly.

8
00:00:12,050 --> 00:00:14,570
So the entire array
itself has a single name.

9
00:00:14,570 --> 00:00:18,170
So, for example, we can call
this array something like words.

10
00:00:18,170 --> 00:00:20,000
>> Okay.
So the whole array is called words.

11
00:00:20,000 --> 00:00:22,820
But how do I get access to
the string in each slot.

12
00:00:22,820 --> 00:00:26,110
>> Well each slot is called an element
of the array and we can access each

13
00:00:26,110 --> 00:00:29,919
element by referring to its numerical
position or index in the array.

14
00:00:29,919 --> 00:00:31,130
>> Wait, index?

15
00:00:31,130 --> 00:00:34,250
>> Yeah, so each position is numbered,
It's kind of weird but

16
00:00:34,250 --> 00:00:38,240
we start with the next zero and
then move up to next one, two and so

17
00:00:38,240 --> 00:00:40,290
on until we reach the end of the array.

18
00:00:40,290 --> 00:00:44,070
>> Okay, so for an array of length
seven we start at index zero and

19
00:00:44,070 --> 00:00:45,080
we end at index six.

20
00:00:45,080 --> 00:00:46,400
>> Yeah, precisely.

21
00:00:46,400 --> 00:00:49,230
And all these numbers
together are called indices.

22
00:00:49,230 --> 00:00:51,130
>> Because the plural word for
index is indices.

23
00:00:52,390 --> 00:00:53,540
Okay so it makes sense.

24
00:00:53,540 --> 00:00:57,380
Now my question is how do we put values
into the array in the first place?

25
00:00:57,380 --> 00:00:58,980
>> Well, similar thing.

26
00:00:58,980 --> 00:01:03,030
So we refer to a specific index of
the array by using the equal sign

27
00:01:03,030 --> 00:01:07,500
which remember is the Simon operator and
we assign the value into that position.

28
00:01:07,500 --> 00:01:10,110
>> Wait I think I need to see
this written down can I look at

29
00:01:10,110 --> 00:01:11,280
the code for this?

30
00:01:11,280 --> 00:01:11,880
>> Yeah for sure.

31
00:01:11,880 --> 00:01:13,280
Anything for you, Kay.

32
00:01:13,280 --> 00:01:15,530
I'm going to walk you through
some code samples now and

33
00:01:15,530 --> 00:01:18,730
I don't want to give away
the solution for the me walk up.

34
00:01:18,730 --> 00:01:20,590
So I'm going to be using
a different example.

35
00:01:20,590 --> 00:01:23,520
So say we have an app where
users can buy shoes online and

36
00:01:23,520 --> 00:01:26,770
our app needs to keep track of which
types of shoes are still in stock.

37
00:01:26,770 --> 00:01:29,790
So one particular type of
shoe is really popular but

38
00:01:29,790 --> 00:01:31,640
we only have three sizes left.

39
00:01:31,640 --> 00:01:33,210
How should we store that information?

40
00:01:33,210 --> 00:01:36,020
Well since this is all related
information about the same

41
00:01:36,020 --> 00:01:37,300
pair of shoes.

42
00:01:37,300 --> 00:01:38,930
We should keep them in an array.

43
00:01:38,930 --> 00:01:42,220
Later, this makes it easier to
figure out which sizes are available

44
00:01:42,220 --> 00:01:44,920
because we can refer to
the single array variable

45
00:01:44,920 --> 00:01:47,380
instead of checking a bunch
of separate variables.

46
00:01:47,380 --> 00:01:50,240
So first we start off
by creating the array.

47
00:01:50,240 --> 00:01:55,010
Since there are three sizes left, we'll
create an integer array of length three.

48
00:01:55,010 --> 00:01:59,420
Each element of the array will be
one shoe size that is available and

49
00:01:59,420 --> 00:02:01,480
the shoe size is an integer.

50
00:02:01,480 --> 00:02:04,430
I know the syntax can be a little
tricky, it may look a little

51
00:02:04,430 --> 00:02:09,410
overwhelming because there's brackets
and spaces all in weird places but

52
00:02:09,410 --> 00:02:13,060
creating this array variable is similar
to how we've created integer and

53
00:02:13,060 --> 00:02:14,760
string variables in the past.

54
00:02:14,760 --> 00:02:16,940
On the left here, we have the data type.

55
00:02:16,940 --> 00:02:19,260
Which in this case is an integer array.

56
00:02:19,260 --> 00:02:23,730
It's the name of the data type which is
the word int, followed by the open and

57
00:02:23,730 --> 00:02:24,820
close bracket.

58
00:02:24,820 --> 00:02:27,190
Then, we have the name
of the array variable,

59
00:02:27,190 --> 00:02:31,940
which is shoe sizes available, followed
by an equal sign then the new cue word

60
00:02:31,940 --> 00:02:34,240
followed by the data
type of the array again.

61
00:02:34,240 --> 00:02:36,950
Int, with the open and
close brackets again.

62
00:02:36,950 --> 00:02:41,220
But this time, notice that we put the
length of the array inside the bracket.

63
00:02:41,220 --> 00:02:43,620
Now we have an empty
array of length three.

64
00:02:43,620 --> 00:02:47,020
So if you ever wanted to change
the type of data in this array,

65
00:02:47,020 --> 00:02:49,990
such as having it store
Booleans to be a Boolean array,

66
00:02:49,990 --> 00:02:53,680
then you would put Boolean here and
here.

67
00:02:53,680 --> 00:02:56,480
Now we can assign values to
each element of the array

68
00:02:56,480 --> 00:02:58,270
based on the index position.

69
00:02:58,270 --> 00:03:01,960
For the given array,
the recalling shoe sizes available here.

70
00:03:01,960 --> 00:03:06,420
We use the open and close brackets
with the index number in the middle.

71
00:03:06,420 --> 00:03:10,360
Example we've, and in this first
example, we've assigned the number

72
00:03:10,360 --> 00:03:15,040
5 into the index 0 slot of the array
by using the equal sign and so

73
00:03:15,040 --> 00:03:18,055
in this case the equal sign
is the assignment operator.

74
00:03:18,055 --> 00:03:22,720
Notice that there is no space between
the name of the array and the brackets.

75
00:03:22,720 --> 00:03:27,090
So when these three statements have
been executed the array looks like this.

76
00:03:27,090 --> 00:03:31,070
Later if you need to retrieve or access
elements of the array use the name of

77
00:03:31,070 --> 00:03:35,090
the array variable followed by
the brackets and index in the middle.

78
00:03:35,090 --> 00:03:38,630
So this line of code here, will retrieve
the first element of the array.

79
00:03:38,630 --> 00:03:40,830
And the result of this call, is 5.

80
00:03:40,830 --> 00:03:45,200
Remember that indices start at 0 and
increment consecutively.

81
00:03:45,200 --> 00:03:48,650
So this is index zero, one and two.

82
00:03:48,650 --> 00:03:52,810
And similarly the result of
the next line of code is 7 and

83
00:03:52,810 --> 00:03:54,330
the following one is 10.

84
00:03:54,330 --> 00:03:56,950
If you need to get the size of the array

85
00:03:56,950 --> 00:04:00,620
write out the name of the array
variable and then call .length.

86
00:04:00,620 --> 00:04:03,740
In this case this expression
yields the number three for

87
00:04:03,740 --> 00:04:05,090
the three slots in the array.

88
00:04:06,220 --> 00:04:07,990
So here's some practice
on how to use an array.

89
00:04:07,990 --> 00:04:12,290
There are many real world things
that can be represented as an array.

90
00:04:12,290 --> 00:04:15,055
For example,
think of a soccer team with 11 players,

91
00:04:15,055 --> 00:04:18,240
where each member has
a different jersey number.

92
00:04:18,240 --> 00:04:20,910
We want to assign the number of
their soccer jerseys at each

93
00:04:20,910 --> 00:04:22,170
place in this integer array.

94
00:04:23,200 --> 00:04:26,500
Assume we've chosen four players for
the roster already.

95
00:04:26,500 --> 00:04:29,000
We can store the jersey numbers
of these four players at

96
00:04:29,000 --> 00:04:30,820
four different array indices.

97
00:04:30,820 --> 00:04:32,920
So for the purpose of this exercise.

98
00:04:32,920 --> 00:04:36,070
We'll put the jersey numbers
in random spots of the array.

99
00:04:36,070 --> 00:04:39,340
Look at the different options
of code in the provided gist and

100
00:04:39,340 --> 00:04:42,460
pick the option that contains the code
that would create the array above.
