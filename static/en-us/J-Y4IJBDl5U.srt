1
00:00:00,140 --> 00:00:05,630
So now we will look at one of the so
called LRU approximation algorithms,

2
00:00:05,630 --> 00:00:10,160
which this one is called NMRU or
Not Most Recently Used.

3
00:00:10,160 --> 00:00:14,330
And it's trying to approximate
the performance of LRU but

4
00:00:14,330 --> 00:00:16,340
with less activity on his.

5
00:00:16,340 --> 00:00:20,380
So again, NMRU stands for
Not Most Recently Used.

6
00:00:20,380 --> 00:00:24,890
The way it would work is that we would
track which one block in the set

7
00:00:24,890 --> 00:00:27,360
is the most recently used one,
at any given time.

8
00:00:27,360 --> 00:00:30,640
And then,
when we need to replace something,

9
00:00:30,640 --> 00:00:34,540
we pick a block that is not the block
that is the most recently used.

10
00:00:34,540 --> 00:00:38,870
So, for example, we can pick
randomly among, the other blocks,

11
00:00:38,870 --> 00:00:44,320
but we save the most recently used
block from eviction from the cache.

12
00:00:44,320 --> 00:00:48,100
So how do we track which block is MRU?

13
00:00:48,100 --> 00:00:50,910
Let's say we have an N-way
set-associative cache and

14
00:00:50,910 --> 00:00:54,470
we want to track the MRU block for
each set.

15
00:00:54,470 --> 00:00:57,940
We need only one MRU pointer per set.

16
00:00:57,940 --> 00:01:00,880
We only need to know
which block has been

17
00:01:00,880 --> 00:01:03,820
the most recently
accessed one in the set.

18
00:01:03,820 --> 00:01:06,910
So for example, if we have a two
way set-associative cache,

19
00:01:06,910 --> 00:01:11,649
we only need one bit to tell us which of
the two is the most recently accessed.

20
00:01:12,660 --> 00:01:17,340
If we have a four way set associative
cache we will have a two bit pointer

21
00:01:17,340 --> 00:01:23,030
that tells us which of the four has been
the most recently accessed and so on.

22
00:01:23,030 --> 00:01:28,121
Compare this to N LRU counters that
we need percent\g in a four way

23
00:01:28,121 --> 00:01:33,870
associative cache, we would need
a two bit pointer for NMRU.

24
00:01:33,870 --> 00:01:39,110
We would need four two bit
LRU counters to maintain LRU.

25
00:01:39,110 --> 00:01:43,464
So this policy keeps N
times less state for

26
00:01:43,464 --> 00:01:48,140
an N way set associative cache,
then the true LRU policy.

27
00:01:48,140 --> 00:01:51,120
It turns out that this policy
works reasonably well.

28
00:01:51,120 --> 00:01:56,090
It does have a hit rate that is
slightly lower than a true LRU,

29
00:01:56,090 --> 00:01:59,710
but if this is what it
takes to make our cache

30
00:01:59,710 --> 00:02:04,510
go from two cycles hit time to one
cycle hit time, It might be worth it.

31
00:02:04,510 --> 00:02:07,710
A disadvantage of this policy is that

32
00:02:07,710 --> 00:02:13,130
although it prevents the most recently
accessed line from being evicted,

33
00:02:13,130 --> 00:02:15,640
it doesn't know what the order
is among the rest of them.

34
00:02:16,650 --> 00:02:21,280
So there is a truly least recently
used block among these three for

35
00:02:21,280 --> 00:02:23,300
example, but we don't know which one.

36
00:02:23,300 --> 00:02:25,060
So we will pick one of these three and

37
00:02:25,060 --> 00:02:27,900
might select something that is
not the least recently used.

38
00:02:27,900 --> 00:02:31,940
So although this works well because the
most frequently accessed thing well be

39
00:02:31,940 --> 00:02:36,430
saved in the cache, it is slightly
weaker than through LRU because of this.

40
00:02:36,430 --> 00:02:39,800
Because it doesn't know which
one is the really recently used.

41
00:02:39,800 --> 00:02:44,320
So what we might want to have is
a policy that is still simpler than LRU

42
00:02:45,390 --> 00:02:49,440
but keeps more track about what's
less recently used than the MRU
