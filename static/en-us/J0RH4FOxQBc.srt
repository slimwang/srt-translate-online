1
00:00:00,350 --> 00:00:03,600
There's some other terms related to architecture that I"d like to mention for

2
00:00:03,600 --> 00:00:07,910
a minute just so that if we come across them later, you'll know what I was

3
00:00:07,910 --> 00:00:13,713
intending. The first one is conceptual architecture. Obviously, the word

4
00:00:13,713 --> 00:00:19,026
conceptual connotes that it's vague or high level. The reason is fake or

5
00:00:19,026 --> 00:00:23,785
high level is that it's often produced very early in the development process,

6
00:00:23,785 --> 00:00:28,600
in fact before you may even have a complete idea of what the requirements are.

7
00:00:28,600 --> 00:00:33,485
Conceptual architectures are often produces a way to begin the planning process.

8
00:00:33,485 --> 00:00:37,650
Okay, by having an idea of what at a very high level the components and

9
00:00:37,650 --> 00:00:41,730
connectors are going to be, you can begin to block out what the teams might look

10
00:00:41,730 --> 00:00:46,120
like and how long it's going to take to produce the ultimate program. A pair of

11
00:00:46,120 --> 00:00:52,087
other terms to be aware of is the As-Intended versus the As-Built architecture.

12
00:00:52,087 --> 00:00:55,793
During the planning process, the architectural planning process in

13
00:00:55,793 --> 00:01:00,248
which the architectural team decides on what the architecture is going to be and

14
00:01:00,248 --> 00:01:02,007
produces some documentation for

15
00:01:02,007 --> 00:01:06,900
that, the result is the As-Intended architecture. However, during the course of

16
00:01:06,900 --> 00:01:10,620
actual construction of the program, something else may be built, and

17
00:01:10,620 --> 00:01:13,940
we'll call that the As-Built architecture. There are several reasons why

18
00:01:13,940 --> 00:01:19,250
the As-Built may not match ideally with the As-Intended. It may be the case, for

19
00:01:19,250 --> 00:01:25,860
example, that during the course of refinement, the development team

20
00:01:25,860 --> 00:01:30,120
comes across a available component, whether it's open source or

21
00:01:30,120 --> 00:01:34,800
from another group, that can short cut the development process by

22
00:01:34,800 --> 00:01:40,660
providing some needed functionality. But that additional piece may not match

23
00:01:40,660 --> 00:01:45,640
identically with what was intended in the architectural plan.

24
00:01:45,640 --> 00:01:52,040
This process by which the As-Intended becomes the As-Built is sometimes called

25
00:01:52,040 --> 00:01:57,010
architectural drift. And if it happens during software maintenance, that is,

26
00:01:57,010 --> 00:02:02,310
after the program is released and the maintenance team then is dealing with bugs

27
00:02:02,310 --> 00:02:07,690
and enhancement suggestions, the term is sometimes called architectural erosion.

28
00:02:07,690 --> 00:02:11,970
This may arise because the maintenance team, under time pressure to

29
00:02:11,970 --> 00:02:16,990
get the fixes out to the customers, may not make the ideal fix that

30
00:02:18,850 --> 00:02:23,130
would be done if, if the original development were done in a way that was aware

31
00:02:23,130 --> 00:02:28,110
of this particular problem or enhancement. and, perhaps also didn't go back and

32
00:02:28,110 --> 00:02:30,860
make the appropriate changes to the architectural documentation.
