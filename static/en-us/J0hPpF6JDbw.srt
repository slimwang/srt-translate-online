1
00:00:00,270 --> 00:00:02,050
In Part 1 navigate to Lesson 3,

2
00:00:02,050 --> 00:00:06,720
Stage 6 and simply import both spouts and add them to your topology.

3
00:00:07,770 --> 00:00:12,015
So we navigate to our exclamation topology and add import statements for

4
00:00:12,015 --> 00:00:16,560
udacity.storm.spout, MyNames, and MyLikesSpout.

5
00:00:16,560 --> 00:00:21,540
Next we scroll down to our topology builder section, comment out our word, and

6
00:00:21,540 --> 00:00:22,940
simply add the spouts.

7
00:00:22,940 --> 00:00:26,370
I added a parallelism of 10, but you could have chosen what you liked.

8
00:00:26,370 --> 00:00:29,525
And here's the MyLikeSpout, MyNameSpout, and

9
00:00:29,525 --> 00:00:33,000
I have chosen component IDs my-likes and my-names.

10
00:00:33,000 --> 00:00:37,440
So in the remainder of the solution, I left the component ID up to

11
00:00:37,440 --> 00:00:43,170
you just to demonstrate that whatever component ID you choose in your topology,

12
00:00:43,170 --> 00:00:46,790
you'll then need to use that in your definition of each bolt.

13
00:00:46,790 --> 00:00:49,060
So my-likes and my-names are mine.

14
00:00:49,060 --> 00:00:55,530
And in Part 2 we connect the report bolt to exclaim1, not exclaim2.

15
00:00:55,530 --> 00:00:58,750
And we update the report bolt using integer count of 30.

16
00:00:58,750 --> 00:01:04,900
And a way I approach this is, is I first commented out our word tuple.

17
00:01:04,900 --> 00:01:07,660
And I instead use getValue at position zero and

18
00:01:07,660 --> 00:01:10,540
cast it to a string and use that as our word.

19
00:01:10,540 --> 00:01:12,240
I commented the count.

20
00:01:12,240 --> 00:01:14,190
And simply uncommented in the integer count.

21
00:01:14,190 --> 00:01:17,190
Remember that the count drives the visualization, but

22
00:01:17,190 --> 00:01:19,580
here we're not longer counting using a count bolt.

23
00:01:19,580 --> 00:01:22,360
We're simply displaying it and so we need to synthesize.

24
00:01:22,360 --> 00:01:27,298
And finally, I connect the report bolt to exclaim1 using the globalGrouping.

25
00:01:27,298 --> 00:01:30,850
In part 3 without modifying the ExclamationBolt,

26
00:01:30,850 --> 00:01:33,820
I use two shuffle groupings to join and connect exclaim1.

27
00:01:33,820 --> 00:01:37,180
You can refer to the streaming join syntax video, but

28
00:01:37,180 --> 00:01:43,830
this is simply shuffle grouping my-likes and shuffle grouping my-names.

29
00:01:43,830 --> 00:01:45,720
And don't forget your semicolon.

30
00:01:45,720 --> 00:01:47,920
And remember that this is the streaming join syntax,

31
00:01:47,920 --> 00:01:51,020
when tuples have the same characteristics.

32
00:01:51,020 --> 00:01:55,500
So I'll be accessing the first position in each of these.

33
00:01:55,500 --> 00:01:58,520
We simply use making package and submit.

34
00:01:58,520 --> 00:02:04,510
And we see that our visualization has names, but also names and favorites pairs.

35
00:02:04,510 --> 00:02:08,949
And finally the exclamation bold already appends three exclamations.

36
00:02:08,949 --> 00:02:14,490
In step 4 we modify the MyLikeSpout to emit name and favorite instead of a pair.

37
00:02:14,490 --> 00:02:17,990
And remember that this requires the declare output field to be updated.

38
00:02:17,990 --> 00:02:20,040
We navigate to the MyLikeSpout.

39
00:02:20,040 --> 00:02:22,180
I'll comment out the collector emit statement, and

40
00:02:22,180 --> 00:02:25,450
instead we emit name and favorite.

41
00:02:25,450 --> 00:02:28,350
And instead of outputting the fields pair,

42
00:02:28,350 --> 00:02:30,638
we output the fields name and favorite.

43
00:02:30,638 --> 00:02:35,880
In part 5, we modify the exclaim bolt to create a favorite map,

44
00:02:35,880 --> 00:02:40,590
when a name and favorite tuple is received from the MyLikeSpout.

45
00:02:40,590 --> 00:02:43,190
We first navigate to the exclamation topology and

46
00:02:43,190 --> 00:02:46,930
at the class level we declare a favorites map, or

47
00:02:46,930 --> 00:02:50,350
whatever you called it, as a map that takes in a string and a string.

48
00:02:50,350 --> 00:02:52,590
Remember that this will the name and the favorites.

49
00:02:53,730 --> 00:02:57,330
Next in the prepare method we initialize our map.

50
00:02:57,330 --> 00:02:58,810
I called it favoritesMap.

51
00:02:58,810 --> 00:03:01,800
That's a new hash map that takes in a string in a string.

52
00:03:01,800 --> 00:03:04,830
And the execute method would we define what

53
00:03:04,830 --> 00:03:08,010
happens when the ExclamationBolt receives a tuple.

54
00:03:08,010 --> 00:03:12,760
You can use the component hint and simply declare a string.

55
00:03:12,760 --> 00:03:15,940
I called it componentId, that takes in the tuple received and

56
00:03:15,940 --> 00:03:18,400
used the getSourceComponent method.

57
00:03:18,400 --> 00:03:20,950
Next we can remove the previous logic.

58
00:03:20,950 --> 00:03:23,690
And use the componentId to modify the behavior,

59
00:03:23,690 --> 00:03:25,860
depending on where the tuple came from.

60
00:03:25,860 --> 00:03:29,461
First, if the componentId equals my-likes, and

61
00:03:29,461 --> 00:03:33,814
remember, if we scroll down to our topology that my-likes is

62
00:03:33,814 --> 00:03:38,190
the componentId that we chose for the MyLikesSpout.

63
00:03:38,190 --> 00:03:43,170
We know that the tuple is of the form name favorite.

64
00:03:43,170 --> 00:03:46,060
And therefore at position zero we have name and

65
00:03:46,060 --> 00:03:49,570
at position one we have favorite in both our strings.

66
00:03:49,570 --> 00:03:53,530
Therefore we're able to query the tuple and

67
00:03:53,530 --> 00:03:57,150
get back the string name and string favorite.

68
00:03:57,150 --> 00:04:01,660
Next we simply check if the name exists in our favorites map, and if it

69
00:04:01,660 --> 00:04:07,020
does not then we simply put the name and the favorite as our key and value.

70
00:04:07,020 --> 00:04:12,090
And finally, notice that if we receive a tuple from my-likes we do not emit.

71
00:04:12,090 --> 00:04:15,640
In the next step, if the tuple is received from the MyNameSpout,

72
00:04:15,640 --> 00:04:19,269
we instead check our favoriteMaps to see if the name exists.

73
00:04:19,269 --> 00:04:23,680
And if so, we emit the sentence of names favorite is favorite.

74
00:04:23,680 --> 00:04:28,050
And finally we append three exclamation marks to the end of the sentence.

75
00:04:28,050 --> 00:04:31,280
In code we simply add in an else if statement that checks if

76
00:04:31,280 --> 00:04:37,620
the componentId that we obtained from the tuple equals my-names.

77
00:04:37,620 --> 00:04:41,310
And remember, again, that my-names is the component id that I selected when I

78
00:04:41,310 --> 00:04:44,560
defined my MyNamesSpout in our builder.

79
00:04:44,560 --> 00:04:46,950
And finally, we build in the logic or

80
00:04:46,950 --> 00:04:50,000
what we do if we receive a tuple for my-names.

81
00:04:50,000 --> 00:04:54,690
We simply extract the name, and we see if the name is in our favoritesMap, and

82
00:04:54,690 --> 00:04:58,250
if it exist we simply query the map to get our favorite.

83
00:04:58,250 --> 00:05:02,710
Remember that this map was constructed from tuples received for my-likes.

84
00:05:02,710 --> 00:05:03,820
And then we build our sentence.

85
00:05:05,097 --> 00:05:07,460
We simply create our exclamated favorites,

86
00:05:07,460 --> 00:05:13,380
we append the name, name's favorite, favorite with three exclamation points.

87
00:05:13,380 --> 00:05:17,506
And to complete, remember that we need to emit in this stage our new values,

88
00:05:17,506 --> 00:05:19,386
which are exclamated favorites.

89
00:05:19,386 --> 00:05:23,185
And for completion I am still using the exclamated word as

90
00:05:23,185 --> 00:05:25,092
our declare output fields.

91
00:05:25,092 --> 00:05:29,828
And finally we package and run our initialization and we see that our name and

92
00:05:29,828 --> 00:05:32,566
favorites are constructed to create kind of

93
00:05:32,566 --> 00:05:36,120
fun sentences with three exclamation points appended.

94
00:05:37,380 --> 00:05:41,918
In part 6, we connect our report poll to exclaim2 now.

95
00:05:41,918 --> 00:05:45,920
Modify the ExclamationBolt again to append three more exclamation points for

96
00:05:45,920 --> 00:05:47,020
a total of six.

97
00:05:47,020 --> 00:05:49,590
We scroll down to our topology builder section and

98
00:05:49,590 --> 00:05:53,811
simply change exclaim1 to exclaim2, and in our ExclamationBolt definition we

99
00:05:53,811 --> 00:05:57,624
simply add in our new else if clause if the componentId equals exclaim1.

100
00:05:59,100 --> 00:06:02,460
Finally if the tuple comes from exclaim1 we extract the sentence from

101
00:06:02,460 --> 00:06:05,135
the tuple at position zero, create our exclaim,

102
00:06:05,135 --> 00:06:09,690
exclamative word, and append three additional exclamation marks to it and emit.

103
00:06:11,230 --> 00:06:14,100
Finally, after building and submitting, your final visualization should

104
00:06:14,100 --> 00:06:18,700
have our words with names and favorites constructed into a sentence.

105
00:06:18,700 --> 00:06:22,760
And six exclamation marks appended to the end.

106
00:06:22,760 --> 00:06:25,925
Optionally, in stage seven you can update your MyLikeSpouts and

107
00:06:25,925 --> 00:06:28,320
MyNameSpouts to personalize your sentences.

108
00:06:28,320 --> 00:06:32,690
And take a screenshot or a screencast and put it up on the forum.

109
00:06:32,690 --> 00:06:34,790
Congratulations on finishing lesson three.
