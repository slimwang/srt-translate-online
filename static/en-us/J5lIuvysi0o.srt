1
00:00:00,180 --> 00:00:04,740
First, RSA is a block cipher
in which the plaintext and

2
00:00:04,740 --> 00:00:08,528
ciphertext are integers between 0 and
n- 1 for some n.

3
00:00:08,528 --> 00:00:15,670
This is true because for
RSA we require that the plaintext input

4
00:00:15,670 --> 00:00:20,690
is smaller than n and the server text
has the same length as the plaintext.

5
00:00:20,690 --> 00:00:24,110
Therefore the servertext
is also smaller than n.

6
00:00:24,110 --> 00:00:27,620
Second, if someone invents
a very efficient method to

7
00:00:27,620 --> 00:00:31,470
factor large integers then
RSA becomes insecure.

8
00:00:31,470 --> 00:00:36,770
This is true because if you can factor
efficiently that means for public key n,

9
00:00:36,770 --> 00:00:41,560
you can factor n equal to p times
q where p and q are prime numbers.

10
00:00:41,560 --> 00:00:44,647
And knowing p and q,
you can compute [INAUDIBLE] n.

11
00:00:44,647 --> 00:00:49,180
And given the public key e,
then you can compute a private key d,

12
00:00:49,180 --> 00:00:54,461
which is the multiplicative
inverse of e, marked n.

13
00:00:54,461 --> 00:00:57,380
In short, if you can factor efficiently,

14
00:00:57,380 --> 00:01:00,800
that means you can recover
the RSA private key.

15
00:01:00,800 --> 00:01:04,047
Third, The Diffie-Hellman
algorithm depends for

16
00:01:04,047 --> 00:01:09,060
its effectiveness on the difficulty
of computing discrete logarithms.

17
00:01:09,060 --> 00:01:13,990
This is true, because if it is easy
to compute discrete logarithms,

18
00:01:13,990 --> 00:01:17,062
then given the publicly
exchanged value cya,

19
00:01:17,062 --> 00:01:20,880
an adversary can compute
the local secret xa.

20
00:01:20,880 --> 00:01:25,468
And knowing the xa, the adversary
can then compute a [INAUDIBLE] s.

21
00:01:25,468 --> 00:01:29,920
Four, the Diffie-Hellman key
exchange protocol is vulnerable

22
00:01:29,920 --> 00:01:34,700
to man-in-the-middle attack because it
does not authenticate the participants.

23
00:01:34,700 --> 00:01:35,820
This is true.

24
00:01:35,820 --> 00:01:38,310
Because the protocol
does not authenticate.

25
00:01:38,310 --> 00:01:39,900
When Alice receives a message,

26
00:01:39,900 --> 00:01:43,660
she has no way of knowing that
the message is really from Bob.

27
00:01:43,660 --> 00:01:48,210
That is, Alice has no way of
knowing that the value of y b,

28
00:01:48,210 --> 00:01:52,830
which she uses to compute a shared
secret s, is really from Bob.

29
00:01:52,830 --> 00:01:57,170
Which means Trudy can
send y x to Alice and

30
00:01:57,170 --> 00:02:00,700
fool Alice to believe that it is y b.

31
00:02:00,700 --> 00:02:05,060
Fifth, RSA and Diffie-Hellman
are the only public-key algorithms.

32
00:02:05,060 --> 00:02:06,200
This is false.

33
00:02:06,200 --> 00:02:09,538
For example,
there are other public key algorithms

34
00:02:09,538 --> 00:02:13,880
such as the digital signature standard
and the elliptic curve cryptography.
