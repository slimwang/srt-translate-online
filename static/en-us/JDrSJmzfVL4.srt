1
00:00:00,000 --> 00:00:02,000
Let's go run it and see.

2
00:00:02,000 --> 00:00:05,000
On the buggy code we get -1, -1, -1, -1.

3
00:00:05,000 --> 00:00:10,000
But if I fix the bug, then I get 5, -1, 8, -1.

4
00:00:10,000 --> 00:00:12,000
That means these first two--

5
00:00:12,000 --> 00:00:14,000
"haystack", "a" and "haystack", "empty"

6
00:00:14,000 --> 00:00:16,000
show off the bug,

7
00:00:16,000 --> 00:00:19,000
and the last two do not.

8
00:00:19,000 --> 00:00:21,000
So the correct answer was, first one

9
00:00:21,000 --> 00:00:23,000
and this other one on the left, but not the ones on the right.

10
00:00:23,000 --> 00:00:28,000
You can also reason through the program qualitatively to get a handle on this.

11
00:00:28,000 --> 00:00:31,000
We're only going to see this difference

12
00:00:31,000 --> 00:00:35,000
if last_pos is not equal to this_pos.

13
00:00:35,000 --> 00:00:38,000
Remember, this was the bug, and this version is correct.

14
00:00:38,000 --> 00:00:40,000
So in order to see the bug, this_pos

15
00:00:40,000 --> 00:00:42,000
will have to be different from last_pos,

16
00:00:42,000 --> 00:00:44,000
which means we will have to have

17
00:00:44,000 --> 00:00:47,000
found the string at least once.

18
00:00:47,000 --> 00:00:50,000
We find the "a"--we find the other "a"--so this is a good example,

19
00:00:50,000 --> 00:00:53,000
and then in fact you have to know a bit about Python to know

20
00:00:53,000 --> 00:00:55,000
what it means to try to find the empty string in something.

21
00:00:55,000 --> 00:00:58,000
But Python always says the empty string is present--

22
00:00:58,000 --> 00:01:02,000
present at offset zero--it's going to be present at offset 1--at offset 2--

23
00:01:02,000 --> 00:01:05,000
just like epsilon, it fits anywhere.

24
00:01:05,000 --> 00:01:07,000
So there's more than one "a" in the string.

25
00:01:07,000 --> 00:01:10,000
There's more than one empty string in "haystack".

26
00:01:10,000 --> 00:01:13,000
So these are both good test inputs to show off this bug.

27
00:01:13,000 --> 00:01:15,000
Since there's no "z" in "haystack",

28
00:01:15,000 --> 00:01:18,000
last_pos and this_pos are both -1, so we can't tell the difference.

29
00:01:18,000 --> 00:01:20,000
And since there's no "needle" in the empty string,

30
00:01:20,000 --> 00:01:22,000
last_pos and this_pos are both -1,

31
00:01:22,000 --> 00:01:24,000
so we can't tell the difference.

32
00:01:24,000 --> 99:59:59,999
Testing is not easy.
