1
00:00:00,650 --> 00:00:02,719
So unfortunately we're not
quite ready to be all smiley.

2
00:00:03,840 --> 00:00:06,462
Sebastian tells me it's going to be
a few years before I can get my own

3
00:00:06,462 --> 00:00:10,930
self-driving car, but
the bigger problem is we haven't yet

4
00:00:10,930 --> 00:00:12,870
talked about how to
actually use a procedure.

5
00:00:12,870 --> 00:00:15,110
All we've done is make them.

6
00:00:15,110 --> 00:00:16,960
Until we can actually use them,

7
00:00:16,960 --> 00:00:19,180
we don't have a good reason
to be really happy yet.

8
00:00:19,180 --> 00:00:20,690
But we're going to learn
how to use them next, and

9
00:00:20,690 --> 00:00:22,610
then we'll be back to being smiley.

10
00:00:22,610 --> 00:00:24,690
So now we're going to learn
how to use a procedure.

11
00:00:26,810 --> 00:00:29,245
The way to use a procedure,
we need the name of the procedure,

12
00:00:29,245 --> 00:00:34,780
followed by a left paren,
followed by a list of inputs.

13
00:00:35,800 --> 00:00:37,590
And there could be any number of inputs,
but

14
00:00:37,590 --> 00:00:40,880
it has to match the number of
inputs the procedure expects.

15
00:00:40,880 --> 00:00:43,480
These inputs are sometimes called,
operands.

16
00:00:43,480 --> 00:00:45,440
They're sometimes called, arguments.

17
00:00:45,440 --> 00:00:47,260
But, we're not going to
argue about that.

18
00:00:47,260 --> 00:00:48,910
We're just going to call them inputs.

19
00:00:48,910 --> 00:00:51,910
So you've actually already done
something quite similar to this.

20
00:00:51,910 --> 00:00:55,530
Back in unit one,
you learned about using find on strings.

21
00:00:55,530 --> 00:00:58,730
And with find,
you would pass in one or two inputs.

22
00:00:58,730 --> 00:01:00,670
The first input was a string.

23
00:01:00,670 --> 00:01:02,790
That was the string that
you're looking for.

24
00:01:02,790 --> 00:01:03,590
That's the first input.

25
00:01:03,590 --> 00:01:05,620
And the second input could be a number,

26
00:01:05,620 --> 00:01:08,380
the position where you start looking for
that string.

27
00:01:08,380 --> 00:01:12,270
And so we used find in many
ways in unit one as well as you

28
00:01:12,270 --> 00:01:14,280
used it yourself in the homework for
unit one.

29
00:01:14,280 --> 00:01:17,160
Find is a little different from
the procedures that you define yourself.

30
00:01:17,160 --> 00:01:18,550
First of all, it's built in.

31
00:01:18,550 --> 00:01:21,700
The other thing that was different
is that instead of just having find,

32
00:01:21,700 --> 00:01:25,270
we had another input that
was really over here.

33
00:01:25,270 --> 00:01:26,700
Right.
We had the string that we're doing

34
00:01:26,700 --> 00:01:31,430
the find in,
lets say it was in the variable page.

35
00:01:31,430 --> 00:01:33,860
That's really another input to find.

36
00:01:33,860 --> 00:01:37,210
We'll talk in a later class about
why that's done differently, but

37
00:01:37,210 --> 00:01:40,890
it's very similar to calling a procedure
where one of the inputs is over here,

38
00:01:40,890 --> 00:01:42,880
the other two are here.

39
00:01:42,880 --> 00:01:46,350
It's a little different from that and
we won't get into that in this course.

40
00:01:46,350 --> 00:01:50,690
But in a later course, you'll learn
more about what this really means.

41
00:01:50,690 --> 00:01:53,400
For all the procedures
that you define yourself,

42
00:01:53,400 --> 00:01:56,070
we won't have any object
to invoke them on.

43
00:01:56,070 --> 00:02:00,050
We'll just have to procedure to call and
the arguments or operands, or

44
00:02:00,050 --> 00:02:03,340
inputs, as you like to call them,
to pass in.

45
00:02:03,340 --> 00:02:05,560
So let's see how that works
with a simple procedure.

46
00:02:05,560 --> 00:02:08,860
I'm going to find the procedure
Rest_of_string and

47
00:02:08,860 --> 00:02:10,880
we'll give it the parameter s.

48
00:02:10,880 --> 00:02:13,450
So that means it takes one input and
we're going to use the name,

49
00:02:13,450 --> 00:02:15,480
s, to refer to the value of that input.

50
00:02:15,480 --> 00:02:20,980
And we'll make it return the string
from the first character to the end.

51
00:02:20,980 --> 00:02:24,647
So we'll use the string
indexing operator, return s 1:.

52
00:02:24,647 --> 00:02:29,540
This will evaluate to the string,
with the first letter removed, so

53
00:02:29,540 --> 00:02:33,280
all strings from position one
until the end of the string.

54
00:02:33,280 --> 00:02:36,730
And that's what we return, so
that's the output of rest_of_string,

55
00:02:36,730 --> 00:02:41,480
is that new string that starts from
the second letter in the input string.

56
00:02:42,740 --> 00:02:45,340
Here's an example of how
to use this procedure.

57
00:02:45,340 --> 00:02:47,440
So we could call it directly.

58
00:02:47,440 --> 00:02:51,580
So we could say, print rest_of_string.

59
00:02:51,580 --> 00:02:52,770
So that's our procedure.

60
00:02:52,770 --> 00:02:56,330
Now we're going to have our paren,
and we're going to pass in an input.

61
00:02:56,330 --> 00:03:00,930
There's one parameter to rest_of_string,
so we need one input to pass in, and

62
00:03:00,930 --> 00:03:02,240
it should be a string.

63
00:03:02,240 --> 00:03:05,020
So I'll pass in the string, audacity.

64
00:03:05,020 --> 00:03:07,450
What happens when we call
a procedure like this?

65
00:03:07,450 --> 00:03:09,940
Execution will jump into
the body of the procedure.

66
00:03:09,940 --> 00:03:13,780
So we can think of what the interpreter
is doing is, now instead of

67
00:03:13,780 --> 00:03:18,600
running the code here, the interpreter
will move when we call a procedure.

68
00:03:18,600 --> 00:03:21,510
It will jump to run the code
inside the procedure.

69
00:03:21,510 --> 00:03:25,320
It will assign to the parameters,
the values passed in as the inputs.

70
00:03:25,320 --> 00:03:28,080
So we can think of this as
there being an assignment

71
00:03:28,080 --> 00:03:33,140
that says now the value of s is the
value of this input that was passed in.

72
00:03:33,140 --> 00:03:35,640
And now we're going to evaluate
the body of the procedure.

73
00:03:35,640 --> 00:03:38,950
In this case, there's only one
statement, is this return statement.

74
00:03:38,950 --> 00:03:41,750
We're going to find this value,
so s[1:],

75
00:03:41,750 --> 00:03:46,645
the result of that is going to
be the string, udacity.

76
00:03:47,670 --> 00:03:49,430
And then we got to the return.

77
00:03:49,430 --> 00:03:51,850
What return means is
we're going to jump back.

78
00:03:51,850 --> 00:03:55,180
We're jumping back to where
we called the procedure, but

79
00:03:55,180 --> 00:03:57,390
now we actually have a result.

80
00:03:57,390 --> 00:04:00,660
So when we jump back the value that this

81
00:04:00,660 --> 00:04:04,010
evaluates to is whatever
value we returned.

82
00:04:04,010 --> 00:04:06,670
In this case, it's the string udacity.

83
00:04:06,670 --> 00:04:09,560
So, we don't have our self-driving car,
but now you can define and

84
00:04:09,560 --> 00:04:10,660
use procedures.

85
00:04:10,660 --> 00:04:12,580
This is a really powerful concept.

86
00:04:12,580 --> 00:04:14,510
Anything that we're going to do
in the rest of the course, and

87
00:04:14,510 --> 00:04:17,240
anything almost anyone does
in programming computers

88
00:04:17,240 --> 00:04:20,540
is all about defining procedures and
using procedures.

89
00:04:20,540 --> 00:04:22,470
So now we should have a big smile.

90
00:04:22,470 --> 00:04:26,820
We can think of our procedures in
terms of mapping inputs to outputs.

91
00:04:26,820 --> 00:04:30,190
We can think of our humans as
also mapping inputs to outputs.

92
00:04:30,190 --> 00:04:33,370
We have inputs coming in through
the eyes, through the mouth,

93
00:04:33,370 --> 00:04:35,180
maybe we even have a nose.

94
00:04:35,180 --> 00:04:38,310
And, I won't try to draw any of
the outputs of our human procedure.

95
00:04:38,310 --> 00:04:40,125
But, since procedures are such
an important concept,

96
00:04:40,125 --> 00:04:43,340
we're going to have several quizzes now,
to check that you understand them well.
