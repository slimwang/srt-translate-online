1
00:00:01,230 --> 00:00:06,492
So yeah,
here I have my terminal open, and

2
00:00:06,492 --> 00:00:14,107
I've actually gone into the repo
where the webpage resides.

3
00:00:14,107 --> 00:00:19,789
And here, what I'm going to do, is I'm
going to host my page on the local host.

4
00:00:19,789 --> 00:00:27,606
So, the command for
that is python -m SimpleHTTPServer 8080,

5
00:00:27,606 --> 00:00:32,066
8080 is the port that I specified.

6
00:00:32,066 --> 00:00:40,020
So now I get a message that it's
Serving HTTP on 0.0.0 port 8080.

7
00:00:40,020 --> 00:00:45,160
So when I go to local
host on my web browser,

8
00:00:45,160 --> 00:00:49,625
I can see a webpage does show up.

9
00:00:49,625 --> 00:00:51,965
>> Mm-hm.
>> But for PageSpeed Insights,

10
00:00:51,965 --> 00:00:56,017
you cannot test your webpages
locally because this is offline.

11
00:00:56,017 --> 00:01:00,840
And so, what I need to do
is get this page online.

12
00:01:00,840 --> 00:01:03,779
And that's the reason why we use ngrok.

13
00:01:03,779 --> 00:01:08,643
>> And other way to do it instead of
downloading the entire folder and

14
00:01:08,643 --> 00:01:12,984
working with ngrok,
is hosting your page on github.io.

15
00:01:12,984 --> 00:01:18,088
And the way you do it is you
just want to go to GitHub and

16
00:01:18,088 --> 00:01:21,916
create a new repo with
your user name and

17
00:01:21,916 --> 00:01:25,880
github.io or your username on GitHub.

18
00:01:25,880 --> 00:01:30,716
And that could create that repo and
then you can actually go

19
00:01:30,716 --> 00:01:35,758
your username github.io and
then your projects/branch.

20
00:01:35,758 --> 00:01:40,958
>> Yeah so GitHub pages is just
creating another branch that has all

21
00:01:40,958 --> 00:01:46,638
the content in your master branch,
pushing it all into a new branch and

22
00:01:46,638 --> 00:01:50,876
hosting it online using
the github.io extension,

23
00:01:50,876 --> 00:01:54,680
which automatically
makes it into a webpage.

24
00:01:54,680 --> 00:01:56,979
That's what github.io does.

25
00:01:58,090 --> 00:01:59,689
So yeah-
>> If you don't want to do that,

26
00:01:59,689 --> 00:02:00,941
[LAUGH] ngrok is going to help.

27
00:02:00,941 --> 00:02:03,817
>> Yeah,
if you don't want to use GitHub or

28
00:02:03,817 --> 00:02:08,820
if you're not too comfortable using
GitHub, definitely use ngrok.

29
00:02:09,910 --> 00:02:14,173
So now I'm going to open
another tab on my terminal and

30
00:02:14,173 --> 00:02:20,380
what I'm going to do is I'm going to
call ngrok from where it resides.

31
00:02:20,380 --> 00:02:25,080
So for me, I have my ngrok
downloaded in my Downloads folder.

32
00:02:25,080 --> 00:02:28,090
So I'm going to go there
in my Downloads folder and

33
00:02:28,090 --> 00:02:32,770
just do ./ngrok and I specify the port.

34
00:02:32,770 --> 00:02:37,570
Which means, I'm taking in
whatever is there in port 8080 and

35
00:02:37,570 --> 00:02:40,467
pushing it online into a-
>> [CROSSTALK]

36
00:02:40,467 --> 00:02:42,324
>> Now there is a tunnel between,

37
00:02:42,324 --> 00:02:46,765
that ngrok is making between the public
Internet and this specific port.

38
00:02:46,765 --> 00:02:48,843
>> That's right, yeah, yeah.

39
00:02:48,843 --> 00:02:54,510
So when I click that,
I get the tunnel status as online.

40
00:02:54,510 --> 00:02:57,775
And then I have a version and
then Forwarding.

41
00:02:57,775 --> 00:03:02,392
Forwarding actually denotes
the website where we have

42
00:03:02,392 --> 00:03:06,735
published online
the webpage provided to us.

43
00:03:06,735 --> 00:03:11,287
So there are two forwardings,
one uses a normal HTTP protocol and

44
00:03:11,287 --> 00:03:14,767
the other one uses
a HTTPS secure protocol.

45
00:03:14,767 --> 00:03:18,597
And so what I'm going to do is
I'm going to take this website,

46
00:03:18,597 --> 00:03:21,927
I'm going to go in my browser and
open it on here.

47
00:03:25,478 --> 00:03:29,133
So as here you can see,
the same webpage comes up.

48
00:03:29,133 --> 00:03:31,182
>> [CROSSTALK]
>> Yeah,

49
00:03:31,182 --> 00:03:36,646
now it's on the public Internet and you
can analyze it on PageSpeed Insights.

50
00:03:36,646 --> 00:03:42,140
So when you actually Google for
PageSpeed Insight, the first thing that

51
00:03:42,140 --> 00:03:47,650
comes up is the Google Developers
webpage that has PageSpeed insights.

52
00:03:47,650 --> 00:03:49,930
So what I'm going to do is here,

53
00:03:49,930 --> 00:03:56,030
I'm going to enter the ngrok URL and
then hit ANALYZE.

54
00:03:56,030 --> 00:03:57,755
So this analyzes the website.

55
00:03:57,755 --> 00:03:59,520
>> Mm-hm.

56
00:03:59,520 --> 00:04:01,015
>> It's not a very pretty score.

57
00:04:01,015 --> 00:04:04,730
>> [LAUGH]
>> Okay, so

58
00:04:04,730 --> 00:04:10,500
on the mobile, I can see I
have a speed of 73 out of 100.

59
00:04:10,500 --> 00:04:14,630
Now the greatest advantage
using the PageSpeed Insights,

60
00:04:14,630 --> 00:04:17,620
is that I can see what I should fix.

61
00:04:17,620 --> 00:04:22,300
And it gives suggestions on what
can be improved in your page.

62
00:04:22,300 --> 00:04:26,824
So, I can see that it says eliminate
render-blocking JavaScript and

63
00:04:26,824 --> 00:04:29,363
CSS in the above-the-fold content.

64
00:04:29,363 --> 00:04:34,876
And it actually gives me a small
solution on how I can do that by loading

65
00:04:34,876 --> 00:04:41,240
JavaScript files asynchronously
which has been taught in the past.

66
00:04:41,240 --> 00:04:45,980
So using the async attribute in your
script tags is going to help you

67
00:04:47,340 --> 00:04:48,980
fix this is part.

68
00:04:48,980 --> 00:04:49,876
>> The speed part of it.

69
00:04:49,876 --> 00:04:51,176
>> Yeah, mm-hm, yeah.

70
00:04:51,176 --> 00:04:56,011
And then when I go down, I see that
the user experience is 100/100,

71
00:04:56,011 --> 00:04:57,990
which is great.

72
00:04:57,990 --> 00:05:00,815
Which means that, yeah,
I've been doing a lot of things right.

73
00:05:00,815 --> 00:05:04,430
[LAUGH]
>> Okay and you want to go and and

74
00:05:04,430 --> 00:05:05,950
see what the desktops is?

75
00:05:05,950 --> 00:05:11,236
>> So yeah, the desktops not too
bad with speed, it's around 89/100.

76
00:05:11,236 --> 00:05:13,904
I think it gives an overall score,

77
00:05:13,904 --> 00:05:18,416
unlike the mobile where it's
user experience and speed.

78
00:05:18,416 --> 00:05:22,876
>> Mm-hm, I think user
experience matters a lot more on

79
00:05:22,876 --> 00:05:27,248
smaller devices because,
they're a lot smaller.

80
00:05:27,248 --> 00:05:28,758
>> [LAUGH]
>> Okay,

81
00:05:28,758 --> 00:05:33,600
so here you have all
suggestions to fix it.

82
00:05:33,600 --> 00:05:37,750
So it's going be pretty
straightforward to actually go about

83
00:05:37,750 --> 00:05:42,060
getting the score to 90 or
even above that.

84
00:05:42,060 --> 00:05:45,220
I've got a lot of the value
submissions from students

85
00:05:45,220 --> 00:05:48,720
who have PageSpeed
scores are up over 90.

86
00:05:48,720 --> 00:05:50,520
>> Yep.
>> It always happens.

87
00:05:50,520 --> 00:05:55,560
They have over 90 if they exceed
specifications in that section.

88
00:05:55,560 --> 00:05:56,520
Awesome.

89
00:05:56,520 --> 00:06:00,178
>> So, once you make that fix, you're
in with the first part of your project

90
00:06:00,178 --> 00:06:02,132
which is the critical rendering path.

91
00:06:02,132 --> 00:06:07,004
And if you're checking that you know
how good of a job you did by making

92
00:06:07,004 --> 00:06:12,210
sure that you go and paste your
web address in PageSpeed Insights.

93
00:06:12,210 --> 00:06:15,556
Again, the requirement is only in .HTML.
