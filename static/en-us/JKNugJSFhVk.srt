1
00:00:00,000 --> 00:00:02,160
The first statement is false.

2
00:00:02,160 --> 00:00:06,010
All problems solvable in exponential time by a deterministic RAM

3
00:00:06,010 --> 00:00:10,220
take polynomial time on a nondeterministic RAM. This is not true.

4
00:00:10,220 --> 00:00:14,980
There are problems that would still take exponential time on both a deterministric RAM

5
00:00:14,980 --> 00:00:17,210
and a nondeterministric RAM.

6
00:00:17,210 --> 00:00:22,200
For example, if you wanted to find every sublist of a list.

7
00:00:22,200 --> 00:00:26,520
This is going to exponential time even on a nondeterministic RAM.

8
00:00:26,520 --> 00:00:28,750
The second statement is also false,

9
00:00:28,750 --> 00:00:33,970
because if randomized algorithms could solve some NP-complete problems,

10
00:00:33,970 --> 00:00:39,130
let's say vertex cover, in expected polynomial time, well by the definition of NP-completeness

11
00:00:39,130 --> 00:00:44,910
then we could reduce any other NP-complete problem to vertex cover

12
00:00:44,910 --> 00:00:48,350
and then solve that in expected polynomial time.

13
00:00:48,350 --> 00:00:51,360
There's no evidence that this is actually the case.

14
00:00:51,360 --> 00:00:53,450
The final statement is true.

15
00:00:53,450 --> 00:00:58,860
If Pâ‰ NP, then there are some NP-complete problems that don't have constant-factor

16
00:00:58,860 --> 00:01:02,620
approximation algorithms that can run in polynomial time.

17
00:01:02,620 --> 00:01:04,370
The reason for this is actually the converse.

18
00:01:04,370 --> 00:01:08,130
We know that if we can find a constant-factor approximation algorithm

19
00:01:08,130 --> 99:59:59,999
that runs in polynomial time for any NP-complete problem, then that implies that P=NP.
