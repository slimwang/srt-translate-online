1
00:00:00,290 --> 00:00:04,514
To explore these various input methods,
we'll use the same test bed throughout

2
00:00:04,514 --> 00:00:08,128
this lesson, which is based on
the screen saver we built last level.

3
00:00:08,128 --> 00:00:11,068
Now, instead of the ball just
moving in a straight line forever,

4
00:00:11,068 --> 00:00:15,560
we'll control its movement with key
presses, touches, and the accelerometer.

5
00:00:15,560 --> 00:00:17,610
Let's explore the test bed a bit.

6
00:00:17,610 --> 00:00:21,020
First, our application listener
is called InputTestBed, and

7
00:00:21,020 --> 00:00:22,640
it extends Game.

8
00:00:22,640 --> 00:00:25,940
The only thing we have to do in
this file is set the game screen,

9
00:00:25,940 --> 00:00:28,420
which we set to a new
instance of BallScreen.

10
00:00:28,420 --> 00:00:30,045
Let's check that out next.

11
00:00:30,045 --> 00:00:34,310
BallScreen is responsible for setting up
a place to draw, and then delegates all

12
00:00:34,310 --> 00:00:39,250
the logic about what the ball actually
does to this BouncingBall class.

13
00:00:39,250 --> 00:00:43,150
BallScreen extends ScreenAdapter
which is a convenient implementation

14
00:00:43,150 --> 00:00:45,000
of the screen interface.

15
00:00:45,000 --> 00:00:47,660
ScreenAdapter provides
blank implementations of

16
00:00:47,660 --> 00:00:49,590
all the screens required methods,

17
00:00:49,590 --> 00:00:52,720
which means we can just override
the ones that we're interested in.

18
00:00:52,720 --> 00:00:56,544
There's a few new things here, the first
of which is this AutoShapeType.

19
00:00:56,544 --> 00:00:59,228
When ShapeRenderer is
in AutoShapeType mode,

20
00:00:59,228 --> 00:01:03,250
that means we can change shape
types in the middle of a batch.

21
00:01:03,250 --> 00:01:05,928
This is incredibly convenient
when you are passing

22
00:01:05,928 --> 00:01:08,926
your shape render into other
objects to use for drawing.

23
00:01:08,926 --> 00:01:13,716
Note we use an extend viewport to make
the shortest access of the world equal

24
00:01:13,716 --> 00:01:14,890
to WORLD_SIZE.

25
00:01:14,890 --> 00:01:19,320
Also note that every time the window
is resized, we just reset the ball.

26
00:01:19,320 --> 00:01:22,410
Then down here in render,
we do all the normal stuff.

27
00:01:22,410 --> 00:01:26,530
Applying the viewport, clearing the
screen, setting the ProjectionMatrix.

28
00:01:26,530 --> 00:01:30,820
Then we tell the ball to update itself,
we start a shape renderer batch, and

29
00:01:30,820 --> 00:01:34,610
we tell the ball to go ahead and
draw itself using our shape renderer.

30
00:01:34,610 --> 00:01:36,698
Let's check out what the ball is doing.

31
00:01:36,698 --> 00:01:40,809
So this BouncingBall class is quite long
and I encourage you to just open up this

32
00:01:40,809 --> 00:01:43,627
demo in the course code and
check it out for yourself.

33
00:01:43,627 --> 00:01:46,549
The behavior of this ball should
be pretty familiar from the screen

34
00:01:46,549 --> 00:01:47,950
saver example.

35
00:01:47,950 --> 00:01:50,770
There are two new things, drag and

36
00:01:50,770 --> 00:01:54,660
the periodic kicks that the ball
receives to show off that drag.

37
00:01:54,660 --> 00:01:58,610
Down here in update If its been
sufficiently long since we last gave

38
00:01:58,610 --> 00:02:00,980
the ball a kick, then we go ahead and
give the ball a new kick.

39
00:02:02,140 --> 00:02:04,370
And here is where we apply drag.

40
00:02:04,370 --> 00:02:07,720
Every frame the velocity is
reduced by an amount proportional

41
00:02:07,720 --> 00:02:09,365
to the current velocity.

42
00:02:09,365 --> 00:02:10,500
Let's see this all in action.

43
00:02:11,500 --> 00:02:15,128
So, we see we've got a little red
ball that occasionally gets kicked in

44
00:02:15,128 --> 00:02:16,221
a random direction.

45
00:02:16,221 --> 00:02:18,265
Then, it slowly comes to a stop.

46
00:02:18,265 --> 00:02:21,631
It kind of looks like an air
hockey table, and if we resize it,

47
00:02:21,631 --> 00:02:24,320
it just resets itself to the middle.

48
00:02:24,320 --> 00:02:27,380
All right, so this is fun,
but it's not interactive yet.

49
00:02:27,380 --> 00:02:28,220
Well, let's fix that.
