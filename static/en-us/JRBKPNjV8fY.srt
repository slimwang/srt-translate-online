1
00:00:00,350 --> 00:00:02,940
Next we turn to the problem of mapping. That is given an

2
00:00:02,940 --> 00:00:05,590
address, how do I find out whether the data is in the

3
00:00:05,590 --> 00:00:08,476
cache, and how do I retrieve it? We'll start with a direct

4
00:00:08,476 --> 00:00:11,810
mapped cache and a little notation. Let's suppose that we have two

5
00:00:11,810 --> 00:00:15,600
to the m addresses that our cache block or cache line is

6
00:00:15,600 --> 00:00:18,830
two to the n bytes. And that our cache has space for

7
00:00:18,830 --> 00:00:21,800
two decay entries. All of these are always the power of two.

8
00:00:21,800 --> 00:00:25,430
With these definitions, we'll call the lowest n bits the offset. They tell

9
00:00:25,430 --> 00:00:28,560
us where within a given cache block, the memory we want,

10
00:00:28,560 --> 00:00:31,450
is. And the rest of the bits, tell us the block

11
00:00:31,450 --> 00:00:34,260
number. But how do we know where to look for this

12
00:00:34,260 --> 00:00:38,200
block in the cache? We need some kind of hashing function.

13
00:00:38,200 --> 00:00:40,770
Well, the easiest hashing function just looks at the lower order

14
00:00:40,770 --> 00:00:44,210
bits and that is exactly what a direct mapping does. The

15
00:00:44,210 --> 00:00:47,340
next k bit's the address tells the right index to look

16
00:00:47,340 --> 00:00:50,470
for our data in, in the cache. Of course, this means

17
00:00:50,470 --> 00:00:53,420
that multiple addresses will get hashed to the same location

18
00:00:53,420 --> 00:00:56,080
within the cache. Given that our cache had to be

19
00:00:56,080 --> 00:00:58,260
small, this was inevitable. But we need a way to

20
00:00:58,260 --> 00:01:01,880
distinguish them. The solution is to use the tag, or the

21
00:01:01,880 --> 00:01:04,150
higher order bit, to the address as a kind of

22
00:01:04,150 --> 00:01:08,010
confirmation. Let's do a quick example. Suppose that we have an

23
00:01:08,010 --> 00:01:11,885
m bit address space. And our cache block is two

24
00:01:11,885 --> 00:01:15,390
bytes long, so we just have one bit for the offset,

25
00:01:15,390 --> 00:01:17,310
and that there are four entries in our cache. So

26
00:01:17,310 --> 00:01:21,320
we want two bits for our index. Then a direct mapping

27
00:01:21,320 --> 00:01:24,610
would look something like this, where all the blue addresses would

28
00:01:24,610 --> 00:01:27,850
get mapped to the blue block of the cache. The green

29
00:01:27,850 --> 00:01:31,290
addresses would get mapped to the green, and so forth. We

30
00:01:31,290 --> 00:01:33,590
can tell which of the color blocks is actually in the

31
00:01:33,590 --> 00:01:36,620
cache by consulting the tag associated with the data in the

32
00:01:36,620 --> 00:01:40,610
cache. In this example, the tag for the blue is zero,

33
00:01:40,610 --> 00:01:45,220
because it's the 0th blue block that's in the cache.

34
00:01:45,220 --> 00:01:48,970
Similarly, the tag for the green block is one. Because

35
00:01:48,970 --> 00:01:52,180
it's the oneth green block that's in the cache and

36
00:01:52,180 --> 00:01:54,910
the same principle holds for all the other colors, as well.
