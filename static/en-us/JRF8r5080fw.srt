1
00:00:00,270 --> 00:00:03,950
Now we talked about what the trusted
computing base has to do.

2
00:00:03,950 --> 00:00:07,010
Whether we take the security
kernel approach or we don't but

3
00:00:07,010 --> 00:00:09,680
we largely sort of focused
on what it has to do.

4
00:00:09,680 --> 00:00:11,570
When we say revisiting assurance,

5
00:00:11,570 --> 00:00:15,310
what we're really talking about
is how well does it do that?

6
00:00:15,310 --> 00:00:19,040
As the example we used before,
somebody's trying to sell you

7
00:00:19,040 --> 00:00:24,170
an operating system, which is as we said
is the defector trusted computing base.

8
00:00:24,170 --> 00:00:27,820
And they're making all kinds of
claims about how trusted it is.

9
00:00:27,820 --> 00:00:32,930
When we say we want to get a sense
of the level of assurance,

10
00:00:32,930 --> 00:00:35,270
somebody has to sort of convince us.

11
00:00:35,270 --> 00:00:38,510
So let's just sort of quickly
talk about a couple of sort of

12
00:00:38,510 --> 00:00:41,238
ways in which assurance can be provided.

13
00:00:41,238 --> 00:00:45,990
One thing they can do is saying
you know we did implement it is

14
00:00:45,990 --> 00:00:50,990
a software system but we extensively,
thoroughly tested it.

15
00:00:50,990 --> 00:00:53,480
So testing is normal testing.

16
00:00:53,480 --> 00:00:57,470
You do it for right functionality,
things like that.

17
00:00:57,470 --> 00:01:00,650
But there's also also pen testing or
penetration testing.

18
00:01:00,650 --> 00:01:04,450
Penetration testing basically refers to
sort of you come with the adversarial

19
00:01:04,450 --> 00:01:09,070
mindset, saying what vulnerabilities
can I discover in this system?

20
00:01:09,070 --> 00:01:14,020
If you can, better is to actually
have a proof that cannot be refuted.

21
00:01:14,020 --> 00:01:16,780
So you have a formal verification.

22
00:01:16,780 --> 00:01:21,040
It's a theorem that we prove saying this
is what my system is supposed to do and

23
00:01:21,040 --> 00:01:25,620
here you can check that it does
exactly that and nothing else.

24
00:01:25,620 --> 00:01:30,190
Other things we can do is, you know,
some sort of a checking that developers

25
00:01:30,190 --> 00:01:33,860
have actually implemented all
the requirements that we had.

26
00:01:33,860 --> 00:01:37,955
And we talked about a bunch of different
functions that are trusted computing

27
00:01:37,955 --> 00:01:41,080
base or have requirements for
a trusted computing base.

28
00:01:41,080 --> 00:01:43,290
So, when it comes to assurance and

29
00:01:43,290 --> 00:01:46,630
it comes to testing,
a word of caution here.

30
00:01:46,630 --> 00:01:52,540
We should look into what exactly does
testing give us in terms of assurance.

31
00:01:52,540 --> 00:01:57,410
So remember, testing is good for
showing that there is a problem.

32
00:01:57,410 --> 00:02:00,810
Testing obviously cannot
demonstrate absence of a problem.

33
00:02:00,810 --> 00:02:04,600
You can't say, well I ran all these
tests, so there are no problems.

34
00:02:04,600 --> 00:02:08,538
Tests can only demonstrate
problems that you can find.

35
00:02:08,538 --> 00:02:09,979
And the variety of testing,

36
00:02:09,979 --> 00:02:14,230
the testing is something that we do
fairly frequently in the software

37
00:02:14,230 --> 00:02:19,000
development process, in the QA process,
Quality Assessment process.

38
00:02:19,000 --> 00:02:21,110
And one kind of testing, for example,

39
00:02:21,110 --> 00:02:24,730
is regression testing that
says when we enhance a system,

40
00:02:24,730 --> 00:02:28,650
add features to it, patch it, well it's
a new system, it's a different system.

41
00:02:28,650 --> 00:02:32,900
So regression testing says, you run
the test that we have to make sure that

42
00:02:32,900 --> 00:02:35,650
these alterations that we did or
these changes that you made

43
00:02:35,650 --> 00:02:38,720
don't break functionality or
it could improve performance.

44
00:02:38,720 --> 00:02:43,900
However, the key take away from here is
really the first two bullets which is

45
00:02:43,900 --> 00:02:45,380
testing is important.

46
00:02:45,380 --> 00:02:47,630
It's useful to discover problems.

47
00:02:47,630 --> 00:02:51,120
If you've done a lot of testing,
it increases your level of assurance or

48
00:02:51,120 --> 00:02:53,950
confidence, but
of course it doesn't guarantee that

49
00:02:53,950 --> 00:02:56,670
there are no more problems that
may be left with the system.
