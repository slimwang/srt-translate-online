1
00:00:00,240 --> 00:00:05,026
The predictor that fixes the two mis-predictions per anomaly behavior of the one

2
00:00:05,026 --> 00:00:10,205
bit predictor is called a two bit predictor. Often we write that as

3
00:00:10,205 --> 00:00:15,550
2BP,or even a 2BC which stands for

4
00:00:15,550 --> 00:00:21,460
a 2-bit counter. We will see that this predictor behaves like a 2-bit counter.

5
00:00:21,460 --> 00:00:25,115
The 2-bit predictor has possible values zero, zero, zero, one, one, zero, and

6
00:00:25,115 --> 00:00:30,460
one, one. The way it works, is that the more

7
00:00:30,460 --> 00:00:35,680
significant bit of the predictor tells us what the prediction should be.

8
00:00:35,680 --> 00:00:40,230
So this is what we will call the prediction bit, the more significant bit of

9
00:00:40,230 --> 00:00:43,835
this predictor. This prediction bit really functions similarly to.

10
00:00:43,835 --> 00:00:49,210
How the 1-bit predictor functions. This lower bit, here,

11
00:00:49,210 --> 00:00:54,740
is called the Histeresis or Conviction Bit. This tells us

12
00:00:54,740 --> 00:00:59,630
how sure are we that we should be predicting what the prediction bit is saying.

13
00:00:59,630 --> 00:01:06,390
Usually, the state zero, zero is treated as a strong not-taken state.

14
00:01:06,390 --> 00:01:10,270
This means that we will be predicting not taken. And

15
00:01:10,270 --> 00:01:14,930
we are fairly convinced that not taken is the dominant behavior of this branch.

16
00:01:14,930 --> 00:01:20,300
The zero one state will be the weak not taken prediction state.

17
00:01:20,300 --> 00:01:22,500
Were still going to predict not taken but

18
00:01:22,500 --> 00:01:27,610
this time we are less sure that that's the dominant behavior. Similarly here for

19
00:01:27,610 --> 00:01:34,050
the, predict taken, states we have, Weak Taken, and the Strong Taken state.

20
00:01:34,050 --> 00:01:39,203
So how does this predictor work? The 1-bit predictor only had the, not-taken and

21
00:01:39,203 --> 00:01:45,230
the taken state. If, our state is zero, we will predict not-taken.

22
00:01:45,230 --> 00:01:50,070
If we indeed see the not-taken decision later, we stay in this state.

23
00:01:50,070 --> 00:01:54,600
Next time we'll predict not-taken too. If however, we're predicting not-taken,

24
00:01:54,600 --> 00:01:57,950
but this decision turns out to be taken, we change our mind and

25
00:01:57,950 --> 00:02:03,310
move to the taken state. In the taken state, we stay there if the branches

26
00:02:03,310 --> 00:02:08,610
in it taken, but if we predict taken and see that the branch is not-taken,

27
00:02:08,610 --> 00:02:12,550
we go back to the not-taken state and state predicting that. So pretty much,

28
00:02:12,550 --> 00:02:16,740
one outcome changes our mind completely about what to do with a branch.

29
00:02:16,740 --> 00:02:20,830
And that has resulted in two mis-predictions per anomaly.

30
00:02:20,830 --> 00:02:24,980
Lets say that the dominant behavior is not-taken, the first time the branch

31
00:02:24,980 --> 00:02:29,740
is seen to be taken we move here and then the branch moves back to the dominant

32
00:02:29,740 --> 00:02:34,330
behavior we will predict taken and mis-predict again before we move here.

33
00:02:34,330 --> 00:02:39,770
With 2-bit predictor we have four states. Zero zero, zero one,

34
00:02:39,770 --> 00:02:45,360
one zero, and one one. Now this is our strong not-taken state. And

35
00:02:45,360 --> 00:02:51,070
of course if we see a not-taken decision we stay there. We were convinced

36
00:02:51,070 --> 00:02:55,540
that the branch will be not taken and the outcome really confirms that.

37
00:02:55,540 --> 00:03:00,260
If we see a single taken decision from the strong not taken state we move to

38
00:03:00,260 --> 00:03:06,250
the weak not taken. So now we're predicting that the branch is still not-taken,

39
00:03:06,250 --> 00:03:10,540
but we are less convinced about that. In the case when the not-taken behavior is

40
00:03:10,540 --> 00:03:14,712
the dominant one this would be the anomaly and we would move back to the strong

41
00:03:14,712 --> 00:03:19,610
not-taken state. Once we see that the branch is not-taken, so the idea is that,

42
00:03:19,610 --> 00:03:24,380
unlike here, where the anomaly itself will result in a mis-prediction, and

43
00:03:24,380 --> 00:03:26,620
then we will predict differently so

44
00:03:26,620 --> 00:03:30,170
that the dominant behavior again will be mis-predicted for once.

45
00:03:30,170 --> 00:03:36,450
Here, this taken while in the strong not-taken state will be a mis-prediction.

46
00:03:36,450 --> 00:03:41,550
But then, we will predict not-taken. It's just a weak prediction. So we will be

47
00:03:41,550 --> 00:03:46,410
right for this not-taken outcome. So if the branch really is mostly not-taken,

48
00:03:46,410 --> 00:03:51,400
we only have a mis-prediction. When the anomaly happens, not also,

49
00:03:51,400 --> 00:03:55,540
not when the dominant behavior happens after the anomaly. Similarly,

50
00:03:55,540 --> 00:04:01,550
if we are in the strong taken state, we believe now that the taken behavior

51
00:04:01,550 --> 00:04:06,300
is the dominant one. A single not taken will result in a mis-prediction, but

52
00:04:06,300 --> 00:04:11,770
move us to a weak taken state. So that if we see a taken outcome again,

53
00:04:11,770 --> 00:04:14,910
we don't mis-predict and we move back to the strong taken state.

54
00:04:14,910 --> 00:04:18,260
Of course we stay in the strong taken state as long as we are seeing the taken

55
00:04:18,260 --> 00:04:23,360
outcome. So the idea is that if not-taken is a dominant behavior, we expect

56
00:04:23,360 --> 00:04:27,600
the predictor to stay in these two states. If taken is the dominant behavior, we

57
00:04:27,600 --> 00:04:33,350
expect the predictor to stay in these two states. Either way, it's predicting so

58
00:04:33,350 --> 00:04:37,510
that only the anomaly gets mis-predicted, but not the dominant behavior that

59
00:04:37,510 --> 00:04:42,750
follows the anomaly. However, we can have a branch that, for example,

60
00:04:42,750 --> 00:04:47,070
tends to be not-taken for a while, and then changes its mind about it and

61
00:04:47,070 --> 00:04:51,200
starts being taken for a while. Thus, if we are in the weak taken state, and

62
00:04:51,200 --> 00:04:57,120
we see another taken outcome, we will go to one of the taken states,

63
00:04:57,120 --> 00:05:02,050
and similarly, if we are in a weak taken state, and we see another not-taken,

64
00:05:02,050 --> 00:05:06,730
we will move to one of the not taken states. So, the idea is,

65
00:05:06,730 --> 00:05:11,940
if we see a branch that is mostly not taken. Periodically it's maybe taken and

66
00:05:11,940 --> 00:05:15,600
then again stays not taken. We stay in these two states and keep predicting not

67
00:05:15,600 --> 00:05:20,350
taken. But if the branch starts being taken very often from now on,

68
00:05:20,350 --> 00:05:25,210
it will take one, two mis-predictions before we are in the taken states and

69
00:05:25,210 --> 00:05:30,095
start predicting taken again. So somehow, a single anomaly will cost us one

70
00:05:30,095 --> 00:05:35,840
mis-prediction. A switch in behavior will cost us two mis-predictions. So

71
00:05:35,840 --> 00:05:41,480
why we call this a 2-bit counter is because if you look at what this is doing,

72
00:05:41,480 --> 00:05:46,690
is, it's a counter that counts up. When the branch is taken, and

73
00:05:46,690 --> 00:05:51,540
saturates at three. And counts down when it's not-taken, and

74
00:05:51,540 --> 00:05:55,920
saturates at zero. So really it's a 2-bit counter that just

75
00:05:55,920 --> 00:06:01,260
counts up when the branch is taken, and counts down as the branch is not-taken.

76
00:06:01,260 --> 00:06:06,700
This also means that this is a relatively easy behavior to implement.

77
00:06:06,700 --> 00:06:09,020
Basically it's very easy to implement this type of predictor
