1
00:00:00,440 --> 00:00:02,840
One way to solve the problem is to simply stop using the

2
00:00:02,840 --> 00:00:06,790
mutext lock on the while statement. This sets off something called the sync

3
00:00:06,790 --> 00:00:10,130
race where one thread is quickly reading a variable and a while loop,

4
00:00:10,130 --> 00:00:12,880
or spinning on it, as it waits for another thread to change the

5
00:00:12,880 --> 00:00:15,800
value of a variable. Because the spinning thread is just checking the

6
00:00:15,800 --> 00:00:19,590
valuable of a variable over and over. It can't possibly interfere with anything

7
00:00:19,590 --> 00:00:22,500
the other thread is doing. So we can be reasonably confident this is

8
00:00:22,500 --> 00:00:26,050
correct. This turns out to be a fine way for threads to communicate,

9
00:00:26,050 --> 00:00:29,180
this sync race, that is. Actually, if

10
00:00:29,180 --> 00:00:31,300
this spinning thread has its own processor or

11
00:00:31,300 --> 00:00:34,750
core to run on, then it will resume its execution very quickly, which can be

12
00:00:34,750 --> 00:00:36,750
a good thing. However, if processing time

13
00:00:36,750 --> 00:00:38,520
is at premium, then all this spinning is

14
00:00:38,520 --> 00:00:41,140
just wasted. Hence the motivation for another

15
00:00:41,140 --> 00:00:44,200
important feature of thread libraries, conditional wait variables.
