1
00:00:00,370 --> 00:00:02,760
How about data transfer. Well once again,

2
00:00:02,760 --> 00:00:05,480
when you think about full virtualization, data transfer

3
00:00:05,480 --> 00:00:08,180
is implicit. Any data movement that has to

4
00:00:08,180 --> 00:00:11,480
happen between they hypovisor and the fully virtualized

5
00:00:11,480 --> 00:00:14,700
outputting system happens implicitly. In a para

6
00:00:14,700 --> 00:00:17,870
virtual setting, for example in xen, there's an

7
00:00:17,870 --> 00:00:22,100
opportunity again, to innovate because you can be

8
00:00:22,100 --> 00:00:25,500
explicit about the data movement from the guest

9
00:00:25,500 --> 00:00:29,090
operating system into the hypervisor, and vice-versa. There

10
00:00:29,090 --> 00:00:32,875
are two aspects to resource management and accountability

11
00:00:32,875 --> 00:00:35,920
,when it comes to data transfer. The first

12
00:00:35,920 --> 00:00:38,540
is, the CPU time. So when ,an interrupt

13
00:00:38,540 --> 00:00:41,460
comes in, for instance, from a device, hypervisor

14
00:00:41,460 --> 00:00:45,030
has to demultiplex the data That is coming

15
00:00:45,030 --> 00:00:48,040
from the device to the domains very quickly

16
00:00:48,040 --> 00:00:51,320
upon an interrupt. And that is CPU time involved,

17
00:00:51,320 --> 00:00:55,140
in making such copies. And, the hypervisor

18
00:00:55,140 --> 00:00:57,890
has to account for the computation time from

19
00:00:57,890 --> 00:01:01,690
managing the buffers on behalf of the virtualized

20
00:01:01,690 --> 00:01:05,349
operating system above it. The CPU time accountability

21
00:01:05,349 --> 00:01:07,140
is crucial from the point of your

22
00:01:07,140 --> 00:01:10,320
billing and data centers, and therefore hypervisors pay

23
00:01:10,320 --> 00:01:13,540
a lot of attention to, how CPU time

24
00:01:13,540 --> 00:01:16,540
is accounted for and charged to the appropriate

25
00:01:16,540 --> 00:01:19,830
virtual machines. The second aspect of a data transfer

26
00:01:19,830 --> 00:01:22,570
is how the memory buffers are managed. There is

27
00:01:22,570 --> 00:01:25,260
a space issue. The first is a time issue.

28
00:01:25,260 --> 00:01:29,490
CPU time issue. The second is a space issue. Meaning,

29
00:01:29,490 --> 00:01:31,860
how are the memory buffers allocated? And how are

30
00:01:31,860 --> 00:01:35,330
they managed, either by the guest operating system or

31
00:01:35,330 --> 00:01:38,560
by the hypovisor? As I said in the context,

32
00:01:38,560 --> 00:01:42,210
the full virtualization that is available to scope for innovation.

33
00:01:42,210 --> 00:01:44,710
But in the context of paravirtualization, there's

34
00:01:44,710 --> 00:01:46,670
a lot of scope for innovation in the

35
00:01:46,670 --> 00:01:49,590
way memory buffers are handled. Between the

36
00:01:49,590 --> 00:01:53,380
guest operating system and the hypervisor. Specifically, looking

37
00:01:53,380 --> 00:01:55,110
at Xen as an instance of para

38
00:01:55,110 --> 00:02:00,370
virtualization, let's look at the opportunities for innovation

39
00:02:00,370 --> 00:02:03,940
in the guest OS to Xen communication.

40
00:02:03,940 --> 00:02:07,220
Xen provides asynchronous IO rings, which is basically

41
00:02:07,220 --> 00:02:10,330
a data structure that is shared Between

42
00:02:10,330 --> 00:02:13,680
the guest and the Xen for communication. Any

43
00:02:13,680 --> 00:02:19,620
number of these, data structures, that is any number of these I/O rings can be

44
00:02:19,620 --> 00:02:23,700
allocated for handling all the device I/O

45
00:02:23,700 --> 00:02:27,020
needs of a particular guest domain. The I/O

46
00:02:27,020 --> 00:02:29,270
ring itself. Is just a set of

47
00:02:29,270 --> 00:02:33,280
descriptors. What you see here, they're all descriptors

48
00:02:33,280 --> 00:02:36,760
that are available in this data structure. And

49
00:02:36,760 --> 00:02:38,620
it's a ring data structure, that's why it's

50
00:02:38,620 --> 00:02:43,220
called IO ring. And we'll talk about how it is used in a minute. The idea

51
00:02:43,220 --> 00:02:47,620
is, requests from the guest can be placed

52
00:02:47,620 --> 00:02:51,030
in this IO ring by populating these descriptors.

53
00:02:51,030 --> 00:02:54,790
Every descriptor is a unique I/O request coming

54
00:02:54,790 --> 00:02:58,200
from the guest operating system. So every request,

55
00:02:58,200 --> 00:03:02,030
is going to have a unique ID associated with

56
00:03:02,030 --> 00:03:04,310
that particular request coming from the guest operating

57
00:03:04,310 --> 00:03:09,970
system. And recall, what I said earlier that is the I/O ring is specific to a

58
00:03:09,970 --> 00:03:15,820
guest. So every guest can declare a set of I/O rings As data structures for its

59
00:03:15,820 --> 00:03:19,600
communication with xen. Now, in responding to the

60
00:03:19,600 --> 00:03:23,770
request from the guest, xen, after it completes

61
00:03:23,770 --> 00:03:30,720
processing the request, it'll place a response back in the same I/O ring in one

62
00:03:30,720 --> 00:03:34,080
of these descriptors, and that. This pointer's going to

63
00:03:34,080 --> 00:03:36,900
have the same unique ID that was used

64
00:03:36,900 --> 00:03:39,800
to communicate the request in the first place.

65
00:03:39,800 --> 00:03:42,340
So ,it's sort of a symmetric relationship between

66
00:03:42,340 --> 00:03:44,980
the guest and Xen, in terms of request

67
00:03:44,980 --> 00:03:48,880
and response for things that the guest wants

68
00:03:48,880 --> 00:03:54,110
Xen to get done on its behalf. And for Xen to communicate back ,to the guest

69
00:03:54,110 --> 00:03:57,920
that has completed what was requested of them.

70
00:03:57,920 --> 00:04:00,690
So the guest is the producer of requests.

71
00:04:00,690 --> 00:04:07,220
So it has a pointer, into this data structure that says ,where it has to place

72
00:04:07,220 --> 00:04:10,190
the next request. So, this is a pointer

73
00:04:10,190 --> 00:04:14,560
that is manipulated, meaning modified, by the guest.

74
00:04:14,560 --> 00:04:17,079
But it is readable by Xen. So there's only

75
00:04:17,079 --> 00:04:19,745
one guy that can modify, that is a guest. But

76
00:04:19,745 --> 00:04:22,290
Xen can look at this pointer. It's a shared pointer

77
00:04:22,290 --> 00:04:26,270
in that sense. For example, the guest operating system may

78
00:04:26,270 --> 00:04:29,530
have placed new requests, and that's why it has

79
00:04:29,530 --> 00:04:32,080
moved it's pointer to here, indicating that it has placed

80
00:04:32,080 --> 00:04:34,910
new requests. This is the next empty spot, where it

81
00:04:34,910 --> 00:04:39,660
can place new requests, after these two requests. The consumer

82
00:04:39,660 --> 00:04:42,240
for the request produced by the guest operating

83
00:04:42,240 --> 00:04:44,840
system, is of course Xen. And it is

84
00:04:44,840 --> 00:04:47,360
processing requests in the order in which, they've

85
00:04:47,360 --> 00:04:50,900
been produced by the guest operating system. And

86
00:04:50,900 --> 00:04:54,170
therefore, it has the pointer into this IO

87
00:04:54,170 --> 00:04:58,080
ring data structure, saying Where exactly it is

88
00:04:58,080 --> 00:05:01,770
presently servicing requests from this guest operating system.

89
00:05:01,770 --> 00:05:05,350
So right now ,the pointer is pointing here indicating

90
00:05:05,350 --> 00:05:11,280
that Xen is yet to process these two requests that have been queued by the

91
00:05:11,280 --> 00:05:15,055
producer. Meaning, the guest operating system, into this

92
00:05:15,055 --> 00:05:18,280
I/O ring data structure. So this pointer that

93
00:05:18,280 --> 00:05:23,770
the request consumer has is private to Xen. It is just telling Xen ,where it is

94
00:05:23,770 --> 00:05:26,980
in processing requests from the producer. And the

95
00:05:26,980 --> 00:05:30,350
difference between these two pointers is telling how

96
00:05:30,350 --> 00:05:32,450
many requests are outstanding so far as

97
00:05:32,450 --> 00:05:35,660
Xen is concerned, in terms of processing. Request

98
00:05:35,660 --> 00:05:39,950
emanating from the guest. Similar to request production,

99
00:05:39,950 --> 00:05:41,730
Xen is going to be the guy that is

100
00:05:41,730 --> 00:05:44,850
offering responses back to the guest operating system.

101
00:05:44,850 --> 00:05:47,750
So Xen, is the response producer. So it's

102
00:05:47,750 --> 00:05:50,990
going to have a pointer, where it can place

103
00:05:50,990 --> 00:05:56,220
new responses. So once again, this pointer is

104
00:05:56,220 --> 00:06:01,930
a shared pointer updated by Xen, but can be read by the guest. So these are two

105
00:06:01,930 --> 00:06:08,100
new responses that Xen has placed in the I/O Ring in response to request

106
00:06:08,100 --> 00:06:10,410
that it has already processed, but these

107
00:06:10,410 --> 00:06:14,470
responses have not yet been picked up. By

108
00:06:14,470 --> 00:06:17,600
the producer. The guest operating system has a

109
00:06:17,600 --> 00:06:21,425
pointer that says where it is in this

110
00:06:21,425 --> 00:06:23,830
I/O ring data structure, in terms of picking

111
00:06:23,830 --> 00:06:27,400
up the responses coming from Xen. Xen has produced

112
00:06:27,400 --> 00:06:29,960
these two new responses as a result of

113
00:06:29,960 --> 00:06:34,050
processing some prior requests. From the guest operating system,

114
00:06:34,050 --> 00:06:36,150
but the guest operating system is yet to

115
00:06:36,150 --> 00:06:39,640
process this request. So, this pointer is private to

116
00:06:39,640 --> 00:06:42,820
the guest operating system that is telling it, where

117
00:06:42,820 --> 00:06:46,760
it is in processing responses coming back from Xen.

118
00:06:46,760 --> 00:06:50,950
The difference between this pointer and this pointer

119
00:06:50,950 --> 00:06:54,940
is the number of Responses that are yet to

120
00:06:54,940 --> 00:06:57,660
be picked-up by the guest operating system. Just to

121
00:06:57,660 --> 00:07:00,890
recap, the difference between these two pointers is the

122
00:07:00,890 --> 00:07:03,350
number of requests that are yet to be processed

123
00:07:03,350 --> 00:07:06,390
by Xen. And the difference between these two pointers

124
00:07:06,390 --> 00:07:08,630
is the number of responses that are yet to

125
00:07:08,630 --> 00:07:11,930
be picked-up by the guest. And these slots ,are

126
00:07:11,930 --> 00:07:15,040
the empty slots. Into which ,new requests

127
00:07:15,040 --> 00:07:17,320
can be placed by the request producers. The

128
00:07:17,320 --> 00:07:19,780
request producer moves like this. And the

129
00:07:19,780 --> 00:07:23,580
response ,taker moves like this. And, the response

130
00:07:23,580 --> 00:07:25,670
producer moves like this. And the request

131
00:07:25,670 --> 00:07:28,580
consumer moves like this. And these are the

132
00:07:28,580 --> 00:07:32,870
empty slots into which. Xen can place additional

133
00:07:32,870 --> 00:07:37,320
responses as it processes more requests from the

134
00:07:37,320 --> 00:07:41,710
guest operating system. That's the idea behind this higher ring data structure.

135
00:07:41,710 --> 00:07:44,800
Very powerful extraction that allows the

136
00:07:44,800 --> 00:07:49,410
guest to place requests [UNKNOWN], and for

137
00:07:49,410 --> 00:07:53,810
Xen to place responses [UNKNOWN], into

138
00:07:53,810 --> 00:07:57,020
the data structure. As I mentioned already,

139
00:07:57,020 --> 00:08:02,870
the guests can identify the request for which a particular response is intended,

140
00:08:02,870 --> 00:08:06,200
because the id that is associated. With the

141
00:08:06,200 --> 00:08:08,930
response is going to be exactly the same, as

142
00:08:08,930 --> 00:08:11,680
the ID that was associated with the request in

143
00:08:11,680 --> 00:08:14,370
the first place. The other thing that, we should

144
00:08:14,370 --> 00:08:18,010
remember is that these are just descriptors of

145
00:08:18,010 --> 00:08:21,970
the requests and responses. Any data, that has to

146
00:08:21,970 --> 00:08:24,970
be passed from the guest to Xen will just

147
00:08:24,970 --> 00:08:28,260
be a pointer from these descriptors to a machine

148
00:08:28,260 --> 00:08:35,210
page that the guest owns, so that Xen can pick up the data directly, from

149
00:08:35,210 --> 00:08:38,650
that machine page without any copy. Similarly,

150
00:08:38,650 --> 00:08:41,919
if the responses given by Xen is going to

151
00:08:41,919 --> 00:08:44,100
have data associated with it, that will

152
00:08:44,100 --> 00:08:47,590
again be A pointer from the descriptive data

153
00:08:47,590 --> 00:08:50,300
structure to the machine page that contains the

154
00:08:50,300 --> 00:08:53,300
data that Xen wants to pass up to

155
00:08:53,300 --> 00:08:59,500
the guest. In other words, this asynchronous I/O rings is a powerful mechanism,

156
00:08:59,500 --> 00:09:05,820
both for efficient communication between the guest and Xen. And for

157
00:09:05,820 --> 00:09:10,355
also, avoiding. Copying overhead between the

158
00:09:10,355 --> 00:09:14,170
para-virtualized guest operating system and Xen,

159
00:09:14,170 --> 00:09:19,410
which is the virtualization layer. We will look at two specific examples,

160
00:09:19,410 --> 00:09:23,970
on how these I/O rings are used for guest and Xen communication.
