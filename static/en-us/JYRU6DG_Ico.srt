1
00:00:00,000 --> 00:00:06,000
Let's start with the first piece, which is going to be implementing a function

2
00:00:06,000 --> 00:00:09,000
that looks up the IP. Let's look at our code.

3
00:00:09,000 --> 00:00:13,000
Here is our code for ASCII Chan. It's not a lot of code--64 lines, it looks like.

4
00:00:13,000 --> 00:00:16,000
Most of it is contained in this main page handler.

5
00:00:16,000 --> 00:00:20,000
Remember the get function just called render_front, which is this function.

6
00:00:20,000 --> 00:00:28,000
All render_front does is run a basic query to get the 10 most recent pieces of art.

7
00:00:28,000 --> 00:00:34,000
This Google database object here renders front.html, which is my template that draws

8
00:00:34,000 --> 00:00:37,000
that whole form and the 10 most recent arts.

9
00:00:37,000 --> 00:00:41,000
The post function here grabs the title and the art work from the request,

10
00:00:41,000 --> 00:00:45,000
and if we have both of them, creates a new art object and puts it in a database

11
00:00:45,000 --> 00:00:49,000
and reloads the page by doing a redirect. Otherwise it draws an error.

12
00:00:49,000 --> 00:00:52,000
What we're going to do is we're going to change our code like this.

13
00:00:52,000 --> 00:00:54,000
I'll just kind of put in comments what we want to do.

14
00:00:54,000 --> 00:00:59,000
We want to look up the user's coordinates from their IP.

15
00:00:59,000 --> 00:01:02,000
If we have coordinates, add them to the art.

16
00:01:02,000 --> 00:01:04,000
That's going to be our first phase.

17
00:01:04,000 --> 00:01:07,000
Let's work on the first part of this. Look up the user's coordinates from their IP.

18
00:01:07,000 --> 00:01:11,000
We're going to need a function. We'll go ahead and throw it at the top here.

19
00:01:11,000 --> 00:01:15,000
We'll call this "get_cords," and this is the first function we're going to be implementing.

20
00:01:15,000 --> 00:01:20,000
This is going to take an IP, and it's going to make a request to hostip.info.

21
00:01:20,000 --> 00:01:22,000
That request is going to look something like this.

22
00:01:22,000 --> 00:01:24,000
Here is our API documentation.

23
00:01:24,000 --> 00:01:28,000
We're just going to take this URL, and we're going to paste it here.

24
00:01:28,000 --> 00:01:32,000
We don't want to use their IP. We want to use any IP. That's the URL we'll be requesting.

25
00:01:32,000 --> 00:01:36,000
We're going to be requesting this URL using URL obtuse.

26
00:01:36,000 --> 00:01:39,000
Let's go ahead and import that. We're going to be parsing the response.

27
00:01:39,000 --> 00:01:41,000
It's in XML, if you recall.

28
00:01:41,000 --> 00:01:45,000
We'll verify that. We're going the parsing this XML using minidom.

29
00:01:45,000 --> 00:01:47,000
Let's go ahead and import that.

30
00:01:47,000 --> 00:01:49,000
We know how to make a basic URL request.

31
00:01:49,000 --> 00:01:53,000
I'm going to show you a few things we do in the real world to be a little less error prone.

32
00:01:53,000 --> 00:01:56,000
The first thing we want to do is we want to store the content

33
00:01:56,000 --> 00:01:59,000
of the URL in a variable called "content.:

34
00:01:59,000 --> 00:02:01,000
The we're going to load the URL.

35
00:02:01,000 --> 00:02:04,000
We're going to urllib2.urlopen, like we've been using this whole time.

36
00:02:04,000 --> 00:02:07,000
We're going to call read on that response.

37
00:02:07,000 --> 00:02:11,000
Now, if this URL is invalid or that website is down, this is actually going to raise an exception

38
00:02:11,000 --> 00:02:15,000
I happen to know what that exception is, so I will go ahead and--.

39
00:02:15,000 --> 00:02:18,000
If there is URL error--I found this by trial and error when I was working on this the first time--

40
00:02:18,000 --> 00:02:20,000
we'll just go ahead and return. There are no coordinates.

41
00:02:20,000 --> 00:02:22,000
That's if somehow this service is broken.

42
00:02:22,000 --> 00:02:24,000
Normally we might log this.

43
00:02:24,000 --> 00:02:27,000
If we were making a bigger site, I'd probably put some logging in here so that

44
00:02:27,000 --> 00:02:32,000
if I'm maintaining the site, I can see that the geocoding is broken for some reason.

45
00:02:32,000 --> 00:02:35,000
For our purposes right now, we'll just return none, because we'll be watching it.

46
00:02:35,000 --> 00:02:38,000
Then down here we can say if content--there is a chance that the page

47
00:02:38,000 --> 00:02:41,000
is broken in some other way and we just get an empty response,

48
00:02:41,000 --> 00:02:44,000
so we want to make sure there actually is content.

49
00:02:44,000 --> 00:02:47,000
Then in here, we're going to parse the XML and find the coordinates,

50
00:02:47,000 --> 00:02:51,000
which you are the lucky person who is going to write that code for me.

51
00:02:51,000 --> 00:02:53,000
What I'd like you to do is implement this get_coords function.

52
00:02:53,000 --> 00:02:55,000
It's going to take a blob of XML.

53
00:02:55,000 --> 00:02:59,000
Here is an example chunk of XML that comes from that website that should work.

54
00:02:59,000 --> 00:03:03,000
What this function should do is it should return the coordinates found in this XML.

55
00:03:03,000 --> 00:03:06,000
Keep in mind the coordinates here are longitude-latitude,

56
00:03:06,000 --> 00:03:08,000
and I'd like you to return a tuple of latitude-longitude.

57
00:03:08,000 --> 00:03:10,000
You're going to have to reverse them.

58
00:03:10,000 --> 00:03:13,000
If there are no coordinates in the XML--say, for example, we get a response

59
00:03:13,000 --> 00:03:17,000
that looks like this--I changed the IP to 0, 0, 0, 0, and you can see the response here.

60
00:03:17,000 --> 00:03:20,000
There are not coordinates in here. This is a case we're going to have to handle.

61
00:03:20,000 --> 00:03:23,000
Because hostip.info is a free service,

62
00:03:23,000 --> 00:03:26,000
and it only has the locations for IPs that people have entered.

63
00:03:26,000 --> 00:03:29,000
It'd also be worth your while to go ahead and go to that site

64
00:03:29,000 --> 00:03:31,000
and enter your location if it doesn't know it.

65
00:03:31,000 --> 00:03:33,000
I'd like you to implement that function.

66
00:03:33,000 --> 00:03:35,000
If it receives XML that looks like this, it returns the coordinates

67
00:03:35,000 --> 00:03:38,000
in the proper order--latitude, longitude.

68
00:03:38,000 --> 00:03:41,375
if it doesn't find coordinates, it just returns None. Good luck.
