1
00:00:00,000 --> 00:00:02,000
Assertions are an important enough topic

2
00:00:02,000 --> 00:00:04,000
that we're going to want to cover them separately.

3
00:00:04,000 --> 00:00:06,000
What an assertion is is an executable check

4
00:00:06,000 --> 00:00:09,000
for a property that must be true of your code.

5
00:00:09,000 --> 00:00:11,000
For the square root example that we have been using,

6
00:00:11,000 --> 00:00:13,000
we're defining a function called "sqrt,"

7
00:00:13,000 --> 00:00:15,000
which takes an argument.

8
00:00:15,000 --> 00:00:17,000
We're going to use that argument to compute our result,

9
00:00:17,000 --> 00:00:20,000
and here we're going to assert that the result is greater

10
00:00:20,000 --> 00:00:22,000
than or equal to zero.

11
00:00:22,000 --> 00:00:24,000
So let's return to the square root example we've been using.

12
00:00:24,000 --> 00:00:26,000
Here we're going to define a Python function called

13
00:00:26,000 --> 00:00:28,000
sqrt, which takes an argument.

14
00:00:28,000 --> 00:00:30,000
There's going to be some code at the top which computes the result

15
00:00:30,000 --> 00:00:33,000
And now what we're going to assume is that if the

16
00:00:33,000 --> 00:00:35,000
argument to the square root was negative--this bailed

17
00:00:35,000 --> 00:00:37,000
out with some sort of exception--so if we reach

18
00:00:37,000 --> 00:00:39,000
this line in the code, then we successfully computed

19
00:00:39,000 --> 00:00:41,000
a square root result, and what we're going to do

20
00:00:41,000 --> 00:00:45,000
is assert that that result is greater than or equal to 0 and then return it.

21
00:00:45,000 --> 00:00:48,000
Why did we assert that the square root was always greater than or equal to 0?

22
00:00:48,000 --> 00:00:51,000
Because we know, by definition, our square root function

23
00:00:51,000 --> 00:00:53,000
is returning the positive square root of its argument.

24
00:00:53,000 --> 00:00:56,000
At this point in the code, we know that

25
00:00:56,000 --> 00:00:58,000
we must've computed a positive number.

26
00:00:58,000 --> 00:01:00,000
So it's good to go ahead and assert that.

27
00:01:00,000 --> 00:01:02,000
So let's look at some basic guidelines for

28
00:01:02,000 --> 00:01:04,000
putting assertions into code.

29
00:01:04,000 --> 00:01:06,000
The first rule is that assertions are not for error handling.

30
00:01:06,000 --> 00:01:09,000
So, for example, it would've been a mistake

31
00:01:09,000 --> 00:01:11,000
at the beginning of this routine probably

32
00:01:11,000 --> 00:01:13,000
to assert that (arg) was greater than or equal to 0.

33
00:01:13,000 --> 00:01:15,000
That would reflect a condition that we want to

34
00:01:15,000 --> 00:01:17,000
handle with an exception--

35
00:01:17,000 --> 00:01:20,000
that is to say with Python's established error handling mechanism--

36
00:01:20,000 --> 00:01:22,000
and not with an assertion.

37
00:01:22,000 --> 00:01:24,000
The assertion that we put into the code asserts the

38
00:01:24,000 --> 00:01:27,000
result of our logic that we wrote as seen.

39
00:01:27,000 --> 00:01:29,000
It's not asserting something about

40
00:01:29,000 --> 00:01:32,000
the behavior of some other entity in the program.

41
00:01:32,000 --> 00:01:35,000
That would generally be more in the domain of error checking.

42
00:01:35,000 --> 00:01:37,000
Rule 2--and this is really important--

43
00:01:37,000 --> 00:01:40,000
is never make assertion calls that have side effects.

44
00:01:40,000 --> 00:01:42,000
An example of a side affecting assertion would be

45
00:01:42,000 --> 00:01:45,000
asserting that a function foo returns the value of 0

46
00:01:45,000 --> 00:01:48,000
but where foo changes the value of global variable.

47
00:01:48,000 --> 00:01:51,000
And the problem with side effects and assertions are

48
00:01:51,000 --> 00:01:53,000
when we turn on optimization in Python,

49
00:01:53,000 --> 00:01:55,000
it's going to drop all of the assertions in our program.

50
00:01:55,000 --> 00:01:57,000
So what we're going to have is a program

51
00:01:57,000 --> 00:01:59,000
which happens to work correctly,

52
00:01:59,000 --> 00:02:01,000
because the assertion changes a value

53
00:02:01,000 --> 00:02:03,000
in some way that's needed.

54
00:02:03,000 --> 00:02:05,000
But, on the other hand, when we turn on optimizations

55
00:02:05,000 --> 00:02:07,000
and drop all of the asserts, then

56
00:02:07,000 --> 00:02:09,000
the program's going to stop working.

57
00:02:09,000 --> 00:02:11,000
And this makes the assertions worse than useless.

58
00:02:11,000 --> 00:02:13,000
This is almost the worst possible thing you can do with an assertion

59
00:02:13,000 --> 00:02:15,000
is have an assertion in your code that

60
00:02:15,000 --> 00:02:18,000
changes the global state in some observable fashion.

61
00:02:18,000 --> 00:02:22,000
So we definitely don't want to do this.

62
00:02:22,000 --> 00:02:24,000
Now rule 3 is we don't want to put

63
00:02:24,000 --> 00:02:26,000
silly assertions into our code.

64
00:02:26,000 --> 00:02:28,000
And let me give an example.

65
00:02:28,000 --> 00:02:30,000
So here we're asserting that 1 + 1 = 2

66
00:02:30,000 --> 00:02:32,000
Now is it conceivable that in some Python program,

67
00:02:32,000 --> 00:02:34,000
1 + 1 was not equal to 2?

68
00:02:34,000 --> 00:02:37,000
Sure, it's conceivable if the Python interpreter is incredibly broken.

69
00:02:37,000 --> 00:02:39,000
But, on the other hand, if the Python interpreter is

70
00:02:39,000 --> 00:02:41,000
that broken, nothing is going to work.

71
00:02:41,000 --> 00:02:43,000
Our program isn't going to run at all, so in any case,

72
00:02:43,000 --> 00:02:46,000
there's no point whatsoever in doing a silly assertion like this.

73
00:02:46,000 --> 00:02:48,000
The best assertions are those which check

74
00:02:48,000 --> 00:02:51,000
a nontrivial property that could be wrong

75
00:02:51,000 --> 00:02:54,000
but only if we actually made a mistake in our logic.

76
00:02:54,000 --> 00:02:56,000
It's not something that could be wrong

77
00:02:56,000 --> 00:02:58,000
if the user did something wrong,

78
00:02:58,000 --> 00:03:00,000
and it's not something that's wrong that's

79
00:03:00,000 --> 00:03:02,000
just completely silly to check.

80
00:03:02,000 --> 99:59:59,999
Now I'm going to let you guys write some assertions.
