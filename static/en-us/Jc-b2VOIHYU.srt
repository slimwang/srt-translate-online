1
00:00:00,000 --> 00:00:01,000
Here's the answer.

2
00:00:01,000 --> 00:00:05,000
We're going to define a procedure, so we use the def followed by the name.

3
00:00:05,000 --> 00:00:08,000
We'll use the name square, followed by the left parenthesis,

4
00:00:08,000 --> 00:00:10,754
and now we need to decide what the parameters are.

5
00:00:10,754 --> 00:00:13,831
And remember when we define procedures, we should always be thinking about

6
00:00:13,831 --> 00:00:15,754
what the inputs are and what the outputs are.

7
00:00:15,754 --> 00:00:17,769
In this case, the input is one number.

8
00:00:17,769 --> 00:00:20,000
We see in our example, it was the number 5.

9
00:00:20,000 --> 00:00:22,000
We can give that any name we want.

10
00:00:22,000 --> 00:00:24,000
N is usually a good name for a number.

11
00:00:24,000 --> 00:00:26,554
So we'll use (n) and then we have the colon,

12
00:00:26,554 --> 00:00:28,754
and now we're ready to define the body of square.

13
00:00:28,754 --> 00:00:32,000
What we want square to compute is the square of the number,

14
00:00:32,000 --> 00:00:34,815
so we want to multiply n by n, and that's the output.

15
00:00:34,815 --> 00:00:36,000
We can do everything with 1 statement.

16
00:00:36,000 --> 00:00:42,000
It's going to be a return statement where the expression that we're returning is n times n.

17
00:00:42,000 --> 00:00:47,000
We want to get the value of n squared, and that's what we return.

18
00:00:47,000 --> 00:00:49,000
Here's how that looks in the interpreter.

19
00:00:49,000 --> 00:00:54,000
We're defining square. Our body returned n * n, and we're going to print the result of square (5).

20
00:00:54,000 --> 00:00:57,000
We get 25. We can use a variable.

21
00:00:57,000 --> 00:00:58,846
Let's say, x has the value 37.

22
00:00:58,846 --> 00:01:00,000
We can print the result of square (x).

23
00:01:00,000 --> 00:01:03,800
We get a bigger number that's 37 x 37,

24
00:01:03,800 --> 00:01:05,000
and we could also do this.

25
00:01:05,000 --> 00:01:08,000
Let's say we assign y the result of square (x),

26
00:01:08,000 --> 00:01:11,000
and then let's print the result of squaring y.

27
00:01:11,000 --> 00:01:15,000
That will give us 37 squared, and then we're going to square it again.

28
00:01:15,000 --> 00:01:19,000
That gets quite a large number--1.8 million or so.

29
00:01:19,000 --> 00:01:21,000
We could do those compositions without variables.

30
00:01:21,000 --> 00:01:23,000
We could do this directly.

31
00:01:23,000 --> 00:01:26,385
We could print the square of the square of (x),

32
00:01:26,385 --> 00:01:28,000
so we're calling square twice here.

33
00:01:28,000 --> 00:01:30,000
The first time we're passing in 37,

34
00:01:30,000 --> 00:01:34,000
then we're getting the output of that, and then we're passing it in to square again.

35
00:01:34,000 --> 00:01:36,000
This is called procedure composition.

36
00:01:36,000 --> 00:01:40,000
This is the way most programs are written, that we're going to write little procedures.

37
00:01:40,000 --> 00:01:43,000
Each procedure is going to take some inputs and produce some output,

38
00:01:43,000 --> 00:01:46,000
But then we're going to use the outputs that we get the first time we use a procedure

39
00:01:46,000 --> 00:01:47,846
as the inputs to the next procedure.

40
00:01:47,846 --> 00:01:49,277
In this case, we only have 1 procedure defined,

41
00:01:49,277 --> 00:01:52,000
so I've used square twice.

42
00:01:52,000 --> 00:01:55,015
When we run this, we see the value of 37 squared,

43
00:01:55,015 --> 00:01:56,669
which is quite a big number.

44
00:01:56,669 --> 00:01:59,600
We'll see lots more examples of how we can compose procedures

45
00:01:59,600 --> 00:02:03,000
using the outputs of 1 procedure as the inputs to the next procedure

46
00:02:03,000 --> 00:02:05,000
to get lots more interesting things done,

47
00:02:05,000 --> 00:02:09,000
and you'll write some procedures that do that yourself pretty soon.
