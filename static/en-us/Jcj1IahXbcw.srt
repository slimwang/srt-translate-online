1
00:00:00,630 --> 00:00:03,650
Now we turn to our last example
of dynamic programming, and

2
00:00:03,650 --> 00:00:06,220
consider the problem of
finding shortest paths between

3
00:00:06,220 --> 00:00:07,530
all pairs of vertices in the graph.

4
00:00:08,780 --> 00:00:12,890
If you're resting on ideas like paths
and graphs, or Dijkstra's algorithm, it

5
00:00:12,890 --> 00:00:16,290
might help to review these ideas before
proceeding with this part of the lesson.

6
00:00:17,830 --> 00:00:21,910
Note that the idea of shortest,
is given in terms of weights or

7
00:00:21,910 --> 00:00:23,670
costs on the edges.

8
00:00:23,670 --> 00:00:24,950
These might be negative, so

9
00:00:24,950 --> 00:00:29,310
we don't refer to them as lengths or
distances themselves to avoid confusion.

10
00:00:29,310 --> 00:00:32,320
But we retain the word
shortest with regards to path,

11
00:00:32,320 --> 00:00:34,940
instead of saying lightest or cheapest.

12
00:00:34,940 --> 00:00:37,390
Unfortunately, the use of this
mixed metaphor is standard.

13
00:00:39,020 --> 00:00:44,470
We're given a graph G and a weight is
associated with every edge in the graph.

14
00:00:44,470 --> 00:00:49,820
And our goal is to find a shortest path
between every pair u and v in the graph.

15
00:00:49,820 --> 00:00:50,320
That is to say,

16
00:00:50,320 --> 00:00:55,420
a path that minimizes the sum of
the weights involved in the path.

17
00:00:55,420 --> 00:00:59,690
Note that the idea of shortest here,
is in terms of these weights.

18
00:00:59,690 --> 00:01:01,360
These weights might be negative, so

19
00:01:01,360 --> 00:01:05,680
we don't refer to them as lengths or
distances to try to avoid confusion.

20
00:01:06,800 --> 00:01:09,993
But on the other hand, we still
refer to the paths as the shortest,

21
00:01:09,993 --> 00:01:12,620
instead of saying lightest or cheapest.

22
00:01:12,620 --> 00:01:15,260
Unfortunately, the use of this
mixed metaphor is standard.

23
00:01:16,276 --> 00:01:19,240
Recall that for the single source
problem, where we want to figure out

24
00:01:19,240 --> 00:01:24,580
the shortest path from one vertex to all
others, we can use Dijkstra's Algorithm.

25
00:01:24,580 --> 00:01:30,150
Which takes V times log V plus E time,
when used with the Fibonacci cube.

26
00:01:30,150 --> 00:01:33,200
But this algorithm requires that
the weights all be non-negative,

27
00:01:33,200 --> 00:01:35,710
an assumption that we
don't want to make.

28
00:01:35,710 --> 00:01:39,380
For graphs with negative weights,
the standard single-source solution

29
00:01:39,380 --> 00:01:44,260
is the Bellman-Ford algorithm,
which takes order V times E time.

30
00:01:44,260 --> 00:01:46,820
Now we can run these
algorithm multiple times.

31
00:01:46,820 --> 00:01:49,650
Once with each vertex as the source.

32
00:01:49,650 --> 00:01:53,450
If we visualize the problem of finding
the shortest path between all pairs,

33
00:01:53,450 --> 00:01:55,406
as filling out a grid like this one.

34
00:01:55,406 --> 00:01:56,884
Then Dijkstra or

35
00:01:56,884 --> 00:02:02,730
Bellman-Ford would correspond to
filling out this one row at a time.

36
00:02:02,730 --> 00:02:06,420
One call to the algorithm to
fill out one row of the table.

37
00:02:06,420 --> 00:02:09,967
This strategy involves running
each of these algorithms v times.

38
00:02:09,967 --> 00:02:12,830
So we could just add a factor
of v to their running times,

39
00:02:12,830 --> 00:02:16,150
to get the all pairs
shortest path version.

40
00:02:16,150 --> 00:02:17,590
Where the weights are non-negative,

41
00:02:17,590 --> 00:02:21,450
this strategy of using Dijkstra's
algorithm is quite competitive.

42
00:02:22,720 --> 00:02:26,040
For the case where the weights
could be negative, however, and

43
00:02:26,040 --> 00:02:28,770
especially when the graph is dense,
we're looking at

44
00:02:28,770 --> 00:02:33,570
an algorithm that is on the order of
v to the fourth for Bellman-Ford.

45
00:02:33,570 --> 00:02:35,990
Using dynamic programming,
we're going to be able to do better.
