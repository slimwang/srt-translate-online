1
00:00:00,000 --> 00:00:04,950
For some problems, there's no constant factor approximation algorithm unless P=NP

2
00:00:04,950 --> 00:00:07,990
or there are constant factor approximation algorithms

3
00:00:07,990 --> 00:00:11,620
but we know certain limits for how good that constant factor can get.

4
00:00:11,620 --> 00:00:16,940
There are other problems that allow for what is called a Polynomial-Time Approximation Scheme

5
00:00:16,940 --> 00:00:20,850
and the idea behind the polynomial-time approximation scheme is basically

6
00:00:20,850 --> 00:00:24,820
that if you put in more running time in to your algorithm,

7
00:00:24,820 --> 00:00:27,870
and that algorithm is called a polynomial-time approximation scheme,

8
00:00:27,870 --> 00:00:32,530
then you will get a better solution or a better guarantee for your solution,

9
00:00:32,530 --> 00:00:36,160
and depending on how good you want that guarantee to be,

10
00:00:36,160 --> 00:00:39,780
then again certain implications for the running time you have to put in.

11
00:00:39,780 --> 00:00:41,470
So, for an almost perfect solution,

12
00:00:41,470 --> 00:00:46,700
you will likely have to put in time that is pretty close to exponential time or even exponential time

13
00:00:46,700 --> 00:00:52,970
and for a solution that is--well, maybe only within a rather course bound of an optimal solution,

14
00:00:52,970 --> 00:00:54,660
you will need less time.

15
00:00:54,660 --> 00:00:57,380
Now, the NP complete problems that we have encountered so far

16
00:00:57,380 --> 00:01:02,090
obviously fall either into the category of having a constant factor approximation algorithm

17
00:01:02,090 --> 00:01:04,690
or admitting no such algorithm

18
00:01:04,690 --> 00:01:10,720
and that is why I'm going to introduce a new NP complete problem to you now called knapsack.

19
00:01:10,720 --> 00:01:12,870
A knapsack is a very simple to describe.

20
00:01:12,870 --> 00:01:17,740
Knapsack gives you as input a set of objects such as these here

21
00:01:17,740 --> 00:01:21,940
and each object has a size and a value and those are both integer number,

22
00:01:21,940 --> 00:01:26,130
so you have an integer size and an integer value and we're soon going to do an example for this,

23
00:01:26,130 --> 00:01:30,660
and then, additionally, you have given a container and that container has a limited capacity,

24
00:01:30,660 --> 00:01:33,420
and that capacity again is an integer,

25
00:01:33,420 --> 00:01:36,840
and the question you're trying to answer with knapsack is actually very simple,

26
00:01:36,840 --> 00:01:38,610
you're trying to ask the question,

27
00:01:38,610 --> 00:01:46,170
"What is the maximum value that I can put into this bag here while observing the limited capacity?"

28
00:01:46,170 --> 00:01:50,760
So the total sum of the size of the objects that I select to be in the knapsack,

29
00:01:50,760 --> 00:01:54,790
so say I select this object to be in the knapsack and this one here

30
00:01:54,790 --> 00:01:56,420
but I don't want this one here,

31
00:01:56,420 --> 00:02:02,650
then that means that the total size of these two objects cannot exceed the capacity of the container

32
00:02:02,650 --> 00:02:05,700
and among all other possibilities of putting objects

33
00:02:05,700 --> 00:02:08,250
into the container without exceeding maximum capacity,

34
00:02:08,250 --> 00:02:11,070
this gives me the best possible value,

35
00:02:11,070 --> 00:02:15,240
and of course, here for the values, we again do the sum to calculate the total value.

36
00:02:15,240 --> 00:02:17,280
Knapsack is known to be NP complete

37
00:02:17,280 --> 00:02:21,300
and now let's do a little example for this problem just to familiarize yourself with this

38
00:02:21,300 --> 00:02:24,250
and I'm going to give you a number of objects here, and of course,

39
00:02:24,250 --> 00:02:26,820
each of these objects has a size and a value.

40
00:02:26,820 --> 00:02:32,940
Now, my question to you is if I give you a container and that container has size 10,

41
00:02:32,940 --> 00:02:37,090
which objects out of these seven here should you put in to the container

42
00:02:37,090 --> 00:02:40,720
to maximize the value without exceeding the size here.

43
00:02:40,720 --> 99:59:59,999
Please check all the items that you should put in to the container to maximize the value.
