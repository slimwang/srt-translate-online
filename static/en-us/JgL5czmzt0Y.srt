1
00:00:00,190 --> 00:00:06,391
So, Vista is the RVM library that has been implemented on top of the Rio file

2
00:00:06,391 --> 00:00:08,830
cache, and let's see how that works. The

3
00:00:08,830 --> 00:00:12,410
semantics of RVM that is implemented in this

4
00:00:12,410 --> 00:00:19,550
is exactly the same as what we saw in the previous lesson, namely LRVM. It is

5
00:00:19,550 --> 00:00:21,890
just that the implementation takes advantage of the

6
00:00:21,890 --> 00:00:25,670
fact that it is sitting on top of

7
00:00:25,670 --> 00:00:28,400
a Rio file cache. So what we're going to

8
00:00:28,400 --> 00:00:31,930
do in implementing RVM using the Rio file cache

9
00:00:31,930 --> 00:00:35,280
is to map the data segment to the virtual

10
00:00:35,280 --> 00:00:38,330
memory. Exactly similar to what was done in the

11
00:00:38,330 --> 00:00:42,190
LRVM primitive. So, when we map the external data

12
00:00:42,190 --> 00:00:46,120
segment to virtual memory, by definition now, this portion

13
00:00:46,120 --> 00:00:48,390
of the memory becomes persistent because it is contained

14
00:00:48,390 --> 00:00:51,410
in the file cache and the file cache survives

15
00:00:51,410 --> 00:00:53,960
power failure because of the battery backup. And

16
00:00:53,960 --> 00:00:56,231
therefore, now we have made this portion of

17
00:00:56,231 --> 00:00:58,280
the virtual memory, that is mapped to the

18
00:00:58,280 --> 00:01:02,280
data segment, persistent. So when we hit the begin

19
00:01:02,280 --> 00:01:05,480
transaction call in the application, what we're going to

20
00:01:05,480 --> 00:01:10,330
do is make a before image of the portion

21
00:01:10,330 --> 00:01:12,930
of the virtual memory that we're going to modify

22
00:01:12,930 --> 00:01:17,100
during this transaction. Remember that in the RVM library,

23
00:01:17,100 --> 00:01:18,790
the set of operations that you do

24
00:01:18,790 --> 00:01:21,840
to virtual memory between begin transaction and end

25
00:01:21,840 --> 00:01:26,070
transaction. The user's intent is that those changes

26
00:01:26,070 --> 00:01:29,150
are for persistent data structures. And the persistent

27
00:01:29,150 --> 00:01:31,800
data structures that they want to modify, they

28
00:01:31,800 --> 00:01:35,070
would execute a set range call to say

29
00:01:35,070 --> 00:01:38,010
what portion of that address range needs to

30
00:01:38,010 --> 00:01:42,100
persistent. So. What we do in this Vista,

31
00:01:42,100 --> 00:01:44,860
which is an implementation of RVM is, at

32
00:01:44,860 --> 00:01:47,600
the point of begin transaction, we're going to make

33
00:01:47,600 --> 00:01:50,850
a before image, a copy, in-memory copy, of

34
00:01:50,850 --> 00:01:53,820
the portion of the address space that we intend

35
00:01:53,820 --> 00:01:57,280
to modify during this transaction. That will serve

36
00:01:57,280 --> 00:02:00,470
as the undo log. Now, note that this is

37
00:02:00,470 --> 00:02:08,180
also mapped to the file cache, so the undo log is mapped to the file cache and

38
00:02:08,180 --> 00:02:12,230
therefore this undo log, is by definition, persistent

39
00:02:12,230 --> 00:02:14,490
node. So the undo record that we create

40
00:02:14,490 --> 00:02:19,910
in memory, we back it up on the file cache and therefore this undo log that

41
00:02:19,910 --> 00:02:23,540
we have created is actually persistent. It'll survive

42
00:02:23,540 --> 00:02:26,760
failures. So when the program is executing the

43
00:02:26,760 --> 00:02:29,330
body of the transaction, it's doing normal program

44
00:02:29,330 --> 00:02:33,400
rights to a portion of the virtual address space

45
00:02:33,400 --> 00:02:36,180
where it has persistent data structures as well.

46
00:02:36,180 --> 00:02:38,460
So when it does this normal program rights to

47
00:02:38,460 --> 00:02:42,260
this virtual memory. The portion of the virtual memory

48
00:02:42,260 --> 00:02:45,320
that is mapped to this external data segment is,

49
00:02:45,320 --> 00:02:48,580
by definition, persistent and so these normal programs

50
00:02:48,580 --> 00:02:51,490
rights actually get into the data segment, their being

51
00:02:51,490 --> 00:02:55,370
persistent automatically because this portion of the virtual address

52
00:02:55,370 --> 00:02:59,000
space is mapped to this data segment. Which is

53
00:02:59,000 --> 00:03:02,000
in the file cache and therefore persistent because

54
00:03:02,000 --> 00:03:04,510
of the battery backing. So all the changes

55
00:03:04,510 --> 00:03:07,990
that we are making during the execution of

56
00:03:07,990 --> 00:03:11,340
the body of the transaction code is actually getting

57
00:03:11,340 --> 00:03:15,120
persisted in the original data segment. For which

58
00:03:15,120 --> 00:03:18,010
this was an in-memory copy, but the in-memory copy

59
00:03:18,010 --> 00:03:20,720
is actually sitting in file cache, which is

60
00:03:20,720 --> 00:03:24,090
battery backed. Then we reach the end transaction in

61
00:03:24,090 --> 00:03:26,230
the application code, and remember, in the end

62
00:03:26,230 --> 00:03:28,750
transaction is when a change has had to

63
00:03:28,750 --> 00:03:31,540
be committed. Well, you know what? The changes

64
00:03:31,540 --> 00:03:34,380
are already committed because that is the semantic

65
00:03:34,380 --> 00:03:38,970
of mapping the latest segment in virtual memory.

66
00:03:38,970 --> 00:03:43,020
And because the file cache is persistent, all

67
00:03:43,020 --> 00:03:45,290
the changes that we made to the virtual

68
00:03:45,290 --> 00:03:49,270
memory during these normal program writes are actually reflected

69
00:03:49,270 --> 00:03:51,650
in the data segment. So the end transaction

70
00:03:51,650 --> 00:03:53,720
at commit point, you don't have to do

71
00:03:53,720 --> 00:03:56,320
anything other than getting rid of this undo

72
00:03:56,320 --> 00:04:00,100
log, because the transaction is committed and therefore you

73
00:04:00,100 --> 00:04:02,770
can throw away this undo log and all

74
00:04:02,770 --> 00:04:06,560
the changes are already in there by design, by

75
00:04:06,560 --> 00:04:09,460
construction. Just as an aside, if you think

76
00:04:09,460 --> 00:04:14,700
about LRV implementation, commit point is the point where

77
00:04:14,700 --> 00:04:16,899
there is heavy lifting to be done. Because

78
00:04:16,899 --> 00:04:19,600
in LRVM, at the commit point, the redo

79
00:04:19,600 --> 00:04:22,810
log, which had been created by LRVM, to

80
00:04:22,810 --> 00:04:26,780
reflect the changes to the persistent data structures in

81
00:04:26,780 --> 00:04:29,750
memory, have to be forced to the disk.

82
00:04:29,750 --> 00:04:33,580
But in Vista, which is implementation of RVM

83
00:04:33,580 --> 00:04:37,710
on a persistent file cashe, no work needs

84
00:04:37,710 --> 00:04:39,710
to be done at the point of end transaction

85
00:04:39,710 --> 00:04:44,060
for commit because all the changes that the

86
00:04:44,060 --> 00:04:47,130
application developer intended to be committed to the

87
00:04:47,130 --> 00:04:50,490
data segment are already in there. And therefore,

88
00:04:50,490 --> 00:04:52,480
at commit point, all that needs to be

89
00:04:52,480 --> 00:04:58,100
done by Vista is to get rid of this undo log. On the other hand, if the

90
00:04:58,100 --> 00:05:04,720
transaction aborts, in that case, what needs to be done is the undo record that

91
00:05:04,720 --> 00:05:07,390
we created at the beginning of the transaction, the

92
00:05:07,390 --> 00:05:10,530
before image, we are to take that and copy

93
00:05:10,530 --> 00:05:13,730
it back into the portion of the virtual memory

94
00:05:13,730 --> 00:05:17,140
that we modified, because that is a semantic of RBM.

95
00:05:17,140 --> 00:05:20,740
That if the transaction aborts, we restore the virtual

96
00:05:20,740 --> 00:05:24,570
memory back to it's original state before the beginning of

97
00:05:24,570 --> 00:05:27,510
the transaction. So the before image that we saved

98
00:05:27,510 --> 00:05:29,980
at the beginning of the transaction, we copy it back

99
00:05:29,980 --> 00:05:32,992
into this portion of the virtual memory that

100
00:05:32,992 --> 00:05:35,980
has been modified during this transaction. And once we

101
00:05:35,980 --> 00:05:38,040
do that, we can throw away the undo log.

102
00:05:38,040 --> 00:05:41,560
And when we restore the before image into the

103
00:05:41,560 --> 00:05:45,490
virtual memory that we're also correcting whatever changes we

104
00:05:45,490 --> 00:05:49,460
made to the data segment automatically. Because, remember that

105
00:05:49,460 --> 00:05:53,350
this picture is just showing the virtual address space

106
00:05:53,350 --> 00:05:55,300
of the process and this is really the physical

107
00:05:55,300 --> 00:06:01,680
memory which is being used as a file cache battery backed and a portion of

108
00:06:01,680 --> 00:06:04,480
the virtual address space is in this battery

109
00:06:04,480 --> 00:06:07,290
pack file cache, rest of the address base

110
00:06:07,290 --> 00:06:09,375
of the application, does not need persistence,

111
00:06:09,375 --> 00:06:12,180
that can be a normal physical memory. Only

112
00:06:12,180 --> 00:06:16,460
the portion of the application memory that has

113
00:06:16,460 --> 00:06:20,360
persistence guarantees through the data segment needs to

114
00:06:20,360 --> 00:06:24,760
be mapped to this portion of the physical memory

115
00:06:24,760 --> 00:06:27,552
that is battery backed. So just to recap what happens

116
00:06:27,552 --> 00:06:29,872
at end transaction, if it's a commit, no work

117
00:06:29,872 --> 00:06:31,670
to be done except to get rid of the undo

118
00:06:31,670 --> 00:06:36,010
record. All the changes to persistent data structures are

119
00:06:36,010 --> 00:06:38,860
already in there in the data segment. On the other

120
00:06:38,860 --> 00:06:42,740
hand, if it aborts, restore the old image back

121
00:06:42,740 --> 00:06:45,652
into the virtual memory, I am back in business as

122
00:06:45,652 --> 00:06:48,880
though these transaction never happened. The implication of

123
00:06:48,880 --> 00:06:52,950
this Vista implementation, which is RVM on top of

124
00:06:52,950 --> 00:06:57,210
Rio file cache, is that there is no disk IO at all. And there is no redo

125
00:06:57,210 --> 00:06:59,250
log, because we directly writing into the data

126
00:06:59,250 --> 00:07:04,040
segments All the external data segments that we define

127
00:07:04,040 --> 00:07:07,200
in the initialization of the RVM library on

128
00:07:07,200 --> 00:07:10,870
the disk, they become memory resident when you map

129
00:07:10,870 --> 00:07:14,510
them into the virtual address space of the

130
00:07:14,510 --> 00:07:18,990
application. So the external data segments become persistent because

131
00:07:18,990 --> 00:07:22,030
of being brought into the file cache. And mapped

132
00:07:22,030 --> 00:07:25,070
into the virtual memory space of the server application.
