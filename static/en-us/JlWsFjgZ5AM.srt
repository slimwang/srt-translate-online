1
00:00:00,210 --> 00:00:02,911
Our first solution to this problem is that we

2
00:00:02,911 --> 00:00:06,488
don't do out of order load/store execution, instead we

3
00:00:06,488 --> 00:00:10,160
do in order load/store execution. This is what happens

4
00:00:10,160 --> 00:00:13,830
in that case. The load is a miss, the add

5
00:00:13,830 --> 00:00:16,680
is stalled, the store is stalled because of that,

6
00:00:16,680 --> 00:00:19,130
because they're both, both waiting for the load to eventually

7
00:00:19,130 --> 00:00:22,200
finish. The subtraction gets done. We now know the

8
00:00:22,200 --> 00:00:25,732
address for this load. At that point in the load/store

9
00:00:25,732 --> 00:00:28,924
queue, we will check whether there are any preceding instructions

10
00:00:28,924 --> 00:00:32,174
that might eventually resolve to the same address. Or even worse,

11
00:00:32,174 --> 00:00:35,590
we check whether there is just all preceding instructions are done.

12
00:00:35,590 --> 00:00:38,692
Because this load is not done, we are not going to consider

13
00:00:38,692 --> 00:00:42,124
this store for execution, that is for producing the value for

14
00:00:42,124 --> 00:00:45,028
this address, and as a result, we are also not going to

15
00:00:45,028 --> 00:00:48,270
do this load. So pretty much what now happens is this

16
00:00:48,270 --> 00:00:50,740
load here doesn't go to memory although it knows where the

17
00:00:50,740 --> 00:00:55,470
address is. Eventually this mess is resolved.

18
00:00:55,470 --> 00:00:58,870
We compute R7 and then very quickly afterwards

19
00:00:59,980 --> 00:01:05,220
we are going to compute the address for the store. So now what we have is,

20
00:01:05,220 --> 00:01:07,880
this load gets done. This instruction was

21
00:01:07,880 --> 00:01:10,380
already done. Eventually, the add gets done, and

22
00:01:10,380 --> 00:01:12,820
eventually the store gets done. The store is

23
00:01:12,820 --> 00:01:15,840
considered done, not when it commits, but when

24
00:01:15,840 --> 00:01:18,680
it actually knows the address, and knows the value that is

25
00:01:18,680 --> 00:01:21,895
going to go to that address. At that point only, this load

26
00:01:21,895 --> 00:01:24,982
is allowed to proceed because at that point, it can just go

27
00:01:24,982 --> 00:01:28,510
up and check whether any stores produced the values for the address

28
00:01:28,510 --> 00:01:31,219
that we are interested in, and if so, just grab the

29
00:01:31,219 --> 00:01:34,850
value. So the load can only finish after the store has finished.

30
00:01:34,850 --> 00:01:37,600
And the store will not do anything until this load is done,

31
00:01:37,600 --> 00:01:40,870
et cetera. So really, we are executing most of the instructions out

32
00:01:40,870 --> 00:01:43,810
of order here. But loads and stores are still proceeding in

33
00:01:43,810 --> 00:01:47,007
order. Of course you can see that this is suboptimal if

34
00:01:47,007 --> 00:01:49,930
this store doesn't store to the same address. We have been

35
00:01:49,930 --> 00:01:53,450
waiting here for a very time and thus we have delayed

36
00:01:53,450 --> 00:01:56,013
all of the instructions that depend on the load. Worse, if

37
00:01:56,013 --> 00:01:59,256
the load would have been a cache miss. We were sitting

38
00:01:59,256 --> 00:02:02,480
there not trying to order things from memory, until many many

39
00:02:02,480 --> 00:02:05,952
cycles later potentially, and only then we realize we have a cache

40
00:02:05,952 --> 00:02:10,169
miss and have to wait many many cycles more. So this is of

41
00:02:10,169 --> 00:02:14,470
course not a very high performance solution, but it is a correct solution.
