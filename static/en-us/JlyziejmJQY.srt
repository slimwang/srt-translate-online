1
00:00:00,280 --> 00:00:03,710
I recently read a post on
Humans of New York page, and

2
00:00:03,710 --> 00:00:08,660
this woman mentioned in her
interview that programming is magic.

3
00:00:08,660 --> 00:00:11,410
It allows us to make things with words.

4
00:00:11,410 --> 00:00:12,580
Isn't that true?

5
00:00:12,580 --> 00:00:14,490
So let's create our own magic.

6
00:00:14,490 --> 00:00:16,420
Let's make histogram.

7
00:00:16,420 --> 00:00:19,830
Firstly, let's check out
the ingredients needed

8
00:00:19,830 --> 00:00:22,660
to make histogram of daily returns.

9
00:00:22,660 --> 00:00:26,650
To calculate daily returns,
we need to get stock prices first.

10
00:00:26,650 --> 00:00:32,280
To start with, we get stock prices for
the SPY for a period of three years.

11
00:00:32,280 --> 00:00:35,220
Next step is to calculate daily return.

12
00:00:35,220 --> 00:00:37,820
This is similar to what
we saw in lesson four.

13
00:00:37,820 --> 00:00:41,670
Now we call this function and
pass a DataFrame to it.

14
00:00:41,670 --> 00:00:46,120
We also plot the daily return value
by passing the daily return DataFrame

15
00:00:46,120 --> 00:00:47,775
to our plot data_function.

16
00:00:48,970 --> 00:00:53,589
This graph show the prices of
the SPY stock over three years.

17
00:00:54,620 --> 00:00:57,280
And this is the daily return graph for
SPY.

18
00:00:58,720 --> 00:01:02,450
Now we have our base ready,
so let's make our histogram.

19
00:01:02,450 --> 00:01:03,690
And after five lessons,

20
00:01:03,690 --> 00:01:07,270
you must have guessed that even
this can be done in just one line.

21
00:01:08,540 --> 00:01:10,370
Here is our histogram.

22
00:01:10,370 --> 00:01:12,890
Professor explained
the concept about bins.

23
00:01:12,890 --> 00:01:16,590
We did not mention the number of
bins while plotting the histogram.

24
00:01:16,590 --> 00:01:19,000
The default number of bins is 10.

25
00:01:19,000 --> 00:01:22,610
If you look closely,
you will observe 10 sets of ranges.

26
00:01:22,610 --> 00:01:23,400
Can you see this?

27
00:01:23,400 --> 00:01:26,710
1, 2, 3, 4 and so on.

28
00:01:26,710 --> 00:01:28,350
If you count, there would be ten.

29
00:01:28,350 --> 00:01:30,840
But as usual, Python is flexible and

30
00:01:30,840 --> 00:01:35,510
allows us to change the number of bins,
using the bin keyword.

31
00:01:35,510 --> 00:01:40,360
We inform the histogram function that
we need to empty bins by passing

32
00:01:40,360 --> 00:01:43,500
a parameter bins and
assigning it a value 20.

33
00:01:43,500 --> 00:01:46,800
Now let's check our changed histogram.

34
00:01:46,800 --> 00:01:49,920
Notice that the width of
each bar has reduced.

35
00:01:49,920 --> 00:01:52,340
And the number of bars has increased.

36
00:01:52,340 --> 00:01:54,830
If you read this graph,
it would say that

37
00:01:54,830 --> 00:01:59,480
there are approximately 300
values which lie near 0.

38
00:01:59,480 --> 00:02:02,250
Next we compute some statistics
on the daily return.
