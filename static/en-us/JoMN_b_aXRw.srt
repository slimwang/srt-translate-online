1
00:00:00,090 --> 00:00:03,740
What approach is a window based [UNKNOWN]?

2
00:00:03,740 --> 00:00:06,640
In this approach, a sender can only have

3
00:00:06,640 --> 00:00:09,230
a certain number of packets outstanding or

4
00:00:09,230 --> 00:00:13,470
quote, in flight. And the sender uses acknowledgement

5
00:00:13,470 --> 00:00:16,800
from the receiver to clock the retransmission

6
00:00:16,800 --> 00:00:19,330
of new data. So let's suppose that the

7
00:00:19,330 --> 00:00:22,920
sender's window was four packets. At this point,

8
00:00:22,920 --> 00:00:25,590
there are four packets outstanding in the network.

9
00:00:25,590 --> 00:00:29,240
And the sender cannot send additional packets,

10
00:00:29,240 --> 00:00:32,020
until it has received an acknowledgement from the

11
00:00:32,020 --> 00:00:35,370
receiver. When it recieves an acknoweldgemnt on ACK

12
00:00:35,370 --> 00:00:39,800
from the reciever. The sender, can then, send

13
00:00:39,800 --> 00:00:41,660
another packet. So at this point there are

14
00:00:41,660 --> 00:00:45,910
still four outstanding or four unacknowledged packets in

15
00:00:45,910 --> 00:00:48,560
flight. In this case if a sender wants

16
00:00:48,560 --> 00:00:51,390
to increase the rate at which it's sending,

17
00:00:51,390 --> 00:00:56,840
it simply needs to increase the window size. So for example, if the sender wants

18
00:00:56,840 --> 00:01:01,450
to send at a faster rate, it can increase the window size from four, to five.

19
00:01:01,450 --> 00:01:06,370
A sender might increase it's rate anytime it sees an

20
00:01:06,370 --> 00:01:11,350
acknowledgement from the receiver. In TCP every time a sender

21
00:01:11,350 --> 00:01:16,450
receives an acknowledgement, it increases the window size. Upon a successful

22
00:01:16,450 --> 00:01:21,660
receipt, we want the sender to increase its window

23
00:01:21,660 --> 00:01:26,840
by one packet per round trip. So for example in this case, if the sender's

24
00:01:26,840 --> 00:01:32,321
window was initially four packets, then at the end,of

25
00:01:32,321 --> 00:01:37,540
a single round trip's worth of sending, we want the next

26
00:01:37,540 --> 00:01:41,960
set of transmissions to allow five packets to be outstanding;

27
00:01:41,960 --> 00:01:46,700
this is call Additive Increase. If a packet is not acknowledged, the window

28
00:01:46,700 --> 00:01:48,940
size is reduced by half, this is

29
00:01:48,940 --> 00:01:53,170
called Multiplicative Decrease. So TCP's congestion control

30
00:01:53,170 --> 00:01:56,400
is called additive increase multiplicative decrease,

31
00:01:56,400 --> 00:02:00,750
or AIMD. The other approach to adjusting

32
00:02:00,750 --> 00:02:04,860
rates is an explicit rate-based congest control

33
00:02:04,860 --> 00:02:07,270
album. In this case the sender monitors

34
00:02:07,270 --> 00:02:12,210
the loss rate and uses a timer to modulate the transmission rate. Window based

35
00:02:12,210 --> 00:02:15,950
congestion controal, or AIMD, is the common

36
00:02:15,950 --> 00:02:18,490
way of performing congestion control in today's

37
00:02:18,490 --> 00:02:23,990
computer networks. In the next lesson we will talk about the two goals of

38
00:02:23,990 --> 00:02:28,460
TCP congestion control further, efficiency and fairness.

39
00:02:28,460 --> 00:02:31,140
And explore how TCP achieves those goals.
