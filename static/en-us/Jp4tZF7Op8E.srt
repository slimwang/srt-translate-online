1
00:00:00,480 --> 00:00:03,960
Let's discuss Key Based Routing. First, we'll talk

2
00:00:03,960 --> 00:00:07,620
about the greedy approach. What I'm showing you here

3
00:00:07,620 --> 00:00:09,932
is the state of the routing table at

4
00:00:09,932 --> 00:00:13,820
the source node, which is fourteen. And the key

5
00:00:13,820 --> 00:00:16,200
that I'm looking for, let's say is four,

6
00:00:16,200 --> 00:00:19,070
and therefore in the greedy approach, I would assume

7
00:00:19,070 --> 00:00:25,740
that The key K, that is K being four, will be stored at a destination whose node

8
00:00:25,740 --> 00:00:28,170
ID is four. And what this table is

9
00:00:28,170 --> 00:00:31,720
showing, is the routing table at the source, and

10
00:00:31,720 --> 00:00:34,770
in particular, the entry that you have here,

11
00:00:34,770 --> 00:00:38,170
where you have a valid entry, those are the

12
00:00:38,170 --> 00:00:42,800
nodes that are reachable from. Node fourteen. So

13
00:00:42,800 --> 00:00:45,760
from the source node fourteen I know how to

14
00:00:45,760 --> 00:00:48,550
reach node number thirteen, I know how to

15
00:00:48,550 --> 00:00:51,010
reach node number three, I know how to reach

16
00:00:51,010 --> 00:00:57,510
node number two, zero and five. I don't know yet how to reach node number four

17
00:00:57,510 --> 00:01:02,220
because that is not in my routing table at this point of time. The intuition

18
00:01:02,220 --> 00:01:08,230
in the greedy approach is if I'm looking for a particular key, K, in this case,

19
00:01:08,230 --> 00:01:15,980
K is 4, then I know that the node that is likely to have that key,

20
00:01:15,980 --> 00:01:22,780
K, in this case 4, is going to be the node whose ID is also 4 and so this

21
00:01:22,780 --> 00:01:26,510
is my desired destination, but what I'm going to do

22
00:01:26,510 --> 00:01:29,250
in the greedy approach is get as close to the

23
00:01:29,250 --> 00:01:33,290
desired destination in the node_id namespace. If I look at

24
00:01:33,290 --> 00:01:35,550
the state of my routing table, I don't know how

25
00:01:35,550 --> 00:01:39,080
to get to 4, which is my desired destination, but

26
00:01:39,080 --> 00:01:41,430
I know how to get to 5 which is close

27
00:01:41,430 --> 00:01:45,650
to The desired destination in the name space of the

28
00:01:45,650 --> 00:01:48,030
node ID's, so what I am going to do, is

29
00:01:48,030 --> 00:01:50,650
ask this guy, because I know how to reach him,

30
00:01:50,650 --> 00:01:53,710
and he is close to my desired destination, do you

31
00:01:53,710 --> 00:01:58,140
have a way of getting to destination number 4? And

32
00:01:58,140 --> 00:02:00,740
my hope is that he may know the route to

33
00:02:00,740 --> 00:02:03,880
get me to the desired destination, and I'll be done.

34
00:02:03,880 --> 00:02:07,320
And getting the key value pair that I'm looking for.

35
00:02:07,320 --> 00:02:13,230
That's the idea in greedy routing. Take the minimum number of hops to get to

36
00:02:13,230 --> 00:02:16,620
the desired destination by using information that

37
00:02:16,620 --> 00:02:20,060
is available in my user level routing table,

38
00:02:20,060 --> 00:02:22,070
that has information about which are the

39
00:02:22,070 --> 00:02:25,220
nodes that are reachable from me directly. So

40
00:02:25,220 --> 00:02:29,550
the objective in the greedy approach to routing

41
00:02:29,550 --> 00:02:32,340
is reaching the destination with the fewest number

42
00:02:32,340 --> 00:02:39,270
of hops. That's the key. So in other words I am optimizing my own look up. This

43
00:02:39,270 --> 00:02:43,340
"me first" approach we know can lead to congestion

44
00:02:43,340 --> 00:02:45,940
and particularly the tree saturation that I mentioned earlier.
