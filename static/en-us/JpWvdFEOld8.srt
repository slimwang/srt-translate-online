1
00:00:00,024 --> 00:00:02,948
At the end of this lesson, we will discuss some other

2
00:00:02,948 --> 00:00:07,142
IPC-Enhancing Compiler Techniques. That we will not discuss in detail, but

3
00:00:07,142 --> 00:00:11,250
you can find other techniques like this is more advanced compiler classes.

4
00:00:11,250 --> 00:00:16,140
The first technique is Software Pipelining. It's a technique that helps schedule

5
00:00:16,140 --> 00:00:21,530
loops, like these in a way that doesn't greatly increase the code size.

6
00:00:21,530 --> 00:00:24,566
But it allows us to get the effect of unrolling many times.

7
00:00:24,566 --> 00:00:29,571
Again, I'm not going to discuss this technique completely but the idea of it,

8
00:00:29,571 --> 00:00:33,657
is to treat the loop as a pipeline. Where this is the first stage,

9
00:00:33,657 --> 00:00:38,620
this is the second, this is third stage and so on. And then schedule the code so

10
00:00:38,620 --> 00:00:44,290
that we do the last stage of a third iteration while doing

11
00:00:44,290 --> 00:00:49,030
the second stage of the next iteration and the first stage of the next,

12
00:00:49,030 --> 00:00:52,590
next iteration. Why do this this way? Well, because here,

13
00:00:52,590 --> 00:00:57,760
we have dependencies, whereas here we don't. This store here is storing a value

14
00:00:57,760 --> 00:01:02,020
to which we have been adding in the previous iteration of the loop. And this ADD

15
00:01:02,020 --> 00:01:06,580
is using the value that we have loaded in the previous iteration of the loop,

16
00:01:06,580 --> 00:01:10,250
and so on. So it kind of forms a pipeline out of the loop.

17
00:01:10,250 --> 00:01:14,450
And then it allows us to do parts of different iterations concurrently with each

18
00:01:14,450 --> 00:01:19,550
other. And another technique that is very powerful is trace scheduling.

19
00:01:19,550 --> 00:01:24,410
You can think of trace scheduling as if conversion on steroids.

20
00:01:24,410 --> 00:01:28,360
Conceptually we take a code that has branches because of if then elses and

21
00:01:28,360 --> 00:01:32,477
other things. We find what the common path through this code is, and

22
00:01:32,477 --> 00:01:36,768
the blocks that are on the common path are. Then put together like this, without

23
00:01:36,768 --> 00:01:41,548
the branches in between. Now we can freely schedule instructions in between

24
00:01:41,548 --> 00:01:46,348
this, and we also put checks if the common path is not being executed for

25
00:01:46,348 --> 00:01:51,049
example here. What if this path should have been executed, if that happens we

26
00:01:51,049 --> 00:01:55,579
branch out of this scheduled code. And at the point when we are branching out,

27
00:01:55,579 --> 00:01:59,819
because we have intermixed these instructions, we first have to fix it.

28
00:01:59,819 --> 00:02:03,360
Basically undo the effects of instructions that we shouldn't have done.

29
00:02:03,360 --> 00:02:06,250
So the compiler, it needs to create some coded compensates for

30
00:02:06,250 --> 00:02:10,150
that. Then we can execute this block that should have executed. And then,

31
00:02:10,150 --> 00:02:12,820
we execute the next block that is on the common path.

32
00:02:12,820 --> 00:02:17,510
But we cannot execute it here, because we have interchanged these instructions.

33
00:02:17,510 --> 00:02:20,330
And then, we can jump to the continuation of this.

34
00:02:20,330 --> 00:02:25,537
So simply, we form a likely trace. We execute that with an excellent schedule.

35
00:02:25,537 --> 00:02:30,037
But any departure from the trace requires us to not only execute instructions in

36
00:02:30,037 --> 00:02:34,590
a slightly less efficient way. because we couldn't reschedule as well. But also,

37
00:02:34,590 --> 00:02:38,970
we need to execute some compensatory code. Basically, fix things that we messed

38
00:02:38,970 --> 00:02:43,970
up by reordering instructions. Again, this is not the full explanation of

39
00:02:43,970 --> 00:02:47,310
trace scheduling. I just wanted to give you some idea about how it works.

40
00:02:47,310 --> 00:02:50,670
But if you're interested in techniques, like software pipelining and

41
00:02:50,670 --> 00:02:53,670
trace scheduling. Then I strongly encourage you to take

42
00:02:53,670 --> 00:02:57,130
an advanced compiler class, where these techniques will be discussed in detail.
