1
00:00:00,000 --> 00:00:05,000
What we have seen now is how delta debugging can take a specific test

2
00:00:05,000 --> 00:00:09,000
and use this specific test in order to automatically simplify

3
00:00:09,000 --> 00:00:14,000
a fairly complex input to an input where every single character is relevant.

4
00:00:14,000 --> 00:00:19,000
So far, however, we need to set up a specific test function for every failure.

5
00:00:19,000 --> 00:00:26,000
Is there a way to come up with generic tests that can be used for arbitrary situation?

6
00:00:26,000 --> 00:00:29,000
Here again, we have a testing function.

7
00:00:29,000 --> 00:00:33,000
And we want to turn this testing function into something that is more generic.

8
00:00:33,000 --> 00:00:36,000
For instance that simply checks whether some assertion has been raised.

9
00:00:36,000 --> 00:00:41,000
Here, I have converted this testing function into something way more generic.

10
00:00:41,000 --> 00:00:48,000
All that's left in here is the call to the function I want to test. In this case, remove HTML marker.

11
00:00:48,000 --> 00:00:54,000
If this function raises an assertion error--for instance because the built-in assertion failed,

12
00:00:54,000 --> 00:00:56,000
then the test fails as well.

13
00:00:56,000 --> 00:01:00,000
If there is no assertion that failed, then this simply return pass.

14
00:01:00,000 --> 00:01:06,000
This test function now can be adapted again and again for arbitrary function

15
00:01:06,000 --> 00:01:11,000
as long as they have an assertion or some other run time check that makes them fail.

16
00:01:11,000 --> 00:01:16,000
Here is a remove HTML marker function from the previous units

17
00:01:16,000 --> 00:01:22,000
and it has an assertion to make sure that the result no longer contain any HTML mark.

18
00:01:22,000 --> 00:01:24,000
And this is precisely what we can test in here.

19
00:01:24,000 --> 00:01:31,000
If the assertion fails and the test will fail and if the assertion does not fail, then the test passes.

20
00:01:31,000 --> 00:01:38,000
Remember this notorious input "HTML to regular text HTML marker."

21
00:01:38,000 --> 00:01:41,000
Which would not work at all when removing HTML marker.

22
00:01:41,000 --> 00:01:47,000
Indeed, this would make the assertion fail because the output would still contain HTML marker.

23
00:01:47,000 --> 00:01:51,000
Now let's go and use delta debugging to minimize this input

24
00:01:51,000 --> 00:01:57,000
such that every character in the input is relevant for producing the error.

25
00:01:57,000 --> 00:02:03,000
For a remove HTML marker, what is the minimal substring of this string

26
00:02:03,000 --> 00:02:07,000
including the double quotes that triggers the failure and as a hint

27
00:02:07,000 --> 00:02:09,000
it's just two characters long--over to you.
