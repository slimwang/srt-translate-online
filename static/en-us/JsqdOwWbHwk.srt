1
00:00:01,030 --> 00:00:02,743
Inexact repeating alarms.

2
00:00:02,743 --> 00:00:04,725
Infinitely better than 
exact repeating alarms,

3
00:00:04,725 --> 00:00:06,707
but still far from ideal.

4
00:00:06,707 --> 00:00:08,860
The problem with any kind 
of repeating alarm

5
00:00:08,860 --> 00:00:12,340
is that it's still polling 
your server to check for updates.

6
00:00:12,340 --> 00:00:15,680
So the more frequently you poll, 
the fresher the data you can display

7
00:00:15,680 --> 00:00:17,870
but the higher the cost in battery life.

8
00:00:17,870 --> 00:00:20,740
You can pull as frequently 
to conserve battery

9
00:00:20,740 --> 00:00:22,670
but that just means
your content will be stale

10
00:00:22,670 --> 00:00:23,400
for longer.

11
00:00:23,400 --> 00:00:25,143
You could just let the user decide

12
00:00:25,143 --> 00:00:26,796
the update frequency themselves,

13
00:00:26,796 --> 00:00:28,570
but then you lose the magic.

14
00:00:28,570 --> 00:00:30,263
If only there was a better way.

15
00:00:30,263 --> 00:00:33,156
Is such a thing possible?
Yes it is.

16
00:00:33,156 --> 00:00:36,440
Google cloud messaging 
lets your server notify your app

17
00:00:36,440 --> 00:00:39,340
directly when there's data ready 
to be downloaded.

18
00:00:39,340 --> 00:00:41,010
Or it can even 
include the new data

19
00:00:41,010 --> 00:00:42,936
in the message payload itself.

20
00:00:42,936 --> 00:00:45,642
Using Google Cloud Messaging, 
you can send messages from

21
00:00:45,642 --> 00:00:47,558
your server to any installed instance

22
00:00:47,558 --> 00:00:49,774
of your app via the Google Cloud.

23
00:00:49,774 --> 00:00:51,650
As a result, you can stop polling,

24
00:00:51,650 --> 00:00:53,778
which will immediately 
improve battery life

25
00:00:53,778 --> 00:00:55,906
and also improve 
the freshness of your app.

26
00:00:55,906 --> 00:00:58,036
And instead, rely on your server

27
00:00:58,036 --> 00:01:00,890
notifying clients when 
there's data to sync.

28
00:01:00,890 --> 00:01:03,003
These messages can be simple tickles,

29
00:01:03,003 --> 00:01:05,346
that trigger a sync adapter 
by notifying your app

30
00:01:05,346 --> 00:01:07,450
that there is new data 
or need to download.

31
00:01:07,450 --> 00:01:10,560
Or you can include the new data 
within the message payload.

32
00:01:10,560 --> 00:01:14,140
In the sunshine example, 
we're using someone else's server.

33
00:01:14,140 --> 00:01:16,470
But even then, 
it may make sense to create

34
00:01:16,470 --> 00:01:18,743
your own middle tier 
that pulls the source

35
00:01:18,743 --> 00:01:21,026
and notifies your installed app instances

36
00:01:21,026 --> 00:01:22,764
when it notices a change.

37
00:01:22,764 --> 00:01:25,362
Now we're not going to set up 
a server in this lesson,

38
00:01:25,362 --> 00:01:26,985
but you can see the full details

39
00:01:26,985 --> 00:01:28,506
for using Google cloud messaging

40
00:01:28,506 --> 00:01:31,000
from the developer guide 
linked to instructor nets.
