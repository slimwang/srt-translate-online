1
00:00:00,140 --> 00:00:04,730
Now unfortunately, the basic form of the functional class pattern does result in

2
00:00:04,730 --> 00:00:09,020
duplicated method, as we saw with the earlier form of the decorator pattern.

3
00:00:09,020 --> 00:00:13,570
The line adding .move as a property of Car creates a brand new

4
00:00:13,570 --> 00:00:16,870
function every time we invoke the Car constructor function.

5
00:00:16,870 --> 00:00:19,720
Looking at the diagram again, you can see that every instance of

6
00:00:19,720 --> 00:00:23,640
the Car class has its own unique version of the move method.

7
00:00:23,640 --> 00:00:27,720
We may prefer instead, to have it be the case that one function object is

8
00:00:27,720 --> 00:00:30,379
shared across all Car objects to save memory.

9
00:00:30,379 --> 00:00:31,266
To avoid having so

10
00:00:31,266 --> 00:00:35,106
many duplicate versions of the move method, we'll need to move the code that

11
00:00:35,106 --> 00:00:38,848
defines the move method outside the body of the Car constructor function.

12
00:00:38,848 --> 00:00:41,934
In this way, the interpreter will only visit that code one time.

13
00:00:41,934 --> 00:00:45,398
And therefore, only build one such function to be shared across all

14
00:00:45,398 --> 00:00:46,390
the instances.

15
00:00:46,390 --> 00:00:49,240
Rather than building a new one every time we invoke a Car.

16
00:00:49,240 --> 00:00:54,240
But notice, if we have moved the definition of the move method outside of

17
00:00:54,240 --> 00:00:57,670
the body of the constructor, then this function should no

18
00:00:57,670 --> 00:01:01,460
longer have closure scope access to the obj variable.

19
00:01:01,460 --> 00:01:05,120
The obj variable's where we'll be storing the instance of the car.

20
00:01:05,120 --> 00:01:08,740
So if this is off limits, the move method won't work at all.

21
00:01:08,740 --> 00:01:11,300
How can we write this function such that

22
00:01:11,300 --> 00:01:14,500
all the instances of Car could make use of it, even though it

23
00:01:14,500 --> 00:01:18,070
won't have access to the closure scope that those instances were created in
