1
00:00:00,370 --> 00:00:04,550
So let's look at the answer to
our simple implementation quiz.

2
00:00:04,550 --> 00:00:08,700
If we issue the next access only when
all prior accesses are complete,

3
00:00:09,950 --> 00:00:12,380
what is the memory level
parallelism we get?

4
00:00:12,380 --> 00:00:17,190
And the answer is, the memory
level parallelism is exactly 1.

5
00:00:17,190 --> 00:00:20,840
Remember that memory level
parallelism is about

6
00:00:20,840 --> 00:00:25,960
having a load that misses and
gets sent to memory.

7
00:00:25,960 --> 00:00:30,930
And then our processor continues
finding independent instructions

8
00:00:30,930 --> 00:00:35,410
here in the hope of finding
another load that is a miss and

9
00:00:35,410 --> 00:00:39,090
sending it to memory while
the first miss is still going.

10
00:00:39,090 --> 00:00:43,340
What that does, is that if we look
at all the misses in our program,

11
00:00:43,340 --> 00:00:48,970
we will do some execution, and
then wait for memory to respond.

12
00:00:48,970 --> 00:00:53,330
And then do some execution, and
then wait for memory to respond.

13
00:00:53,330 --> 00:00:57,420
Then sometimes a very little execution,
and wait for memory to respond.

14
00:00:57,420 --> 00:01:04,140
So basically, our execution with memory
level parallelism of 1 ends up being

15
00:01:04,140 --> 00:01:09,870
the execution without the misses
plus the time to access memory,

16
00:01:09,870 --> 00:01:13,450
which is very large,
times the number of misses we have.

17
00:01:13,450 --> 00:01:17,880
With memory level parallelism,
we execute,

18
00:01:17,880 --> 00:01:21,200
we send the request to memory,
now we'll wait for it.

19
00:01:21,200 --> 00:01:26,780
But meanwhile, we execute a little bit
more and hopefully find that next miss.

20
00:01:26,780 --> 00:01:29,140
In which case, we can overlap misses,

21
00:01:29,140 --> 00:01:32,580
and hopefully we will
find more than just two.

22
00:01:32,580 --> 00:01:37,900
So, in this case,
we have that the cost of each miss

23
00:01:37,900 --> 00:01:41,420
in terms of memory access
was not paid every time.

24
00:01:42,602 --> 00:01:45,770
We paid really the cost of
maybe something like one and

25
00:01:45,770 --> 00:01:48,890
a half misses total, but
we satisfied three misses here.
