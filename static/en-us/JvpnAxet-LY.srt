1
00:00:00,000 --> 00:00:03,000
This time we're going to leave the left child unchanged

2
00:00:03,000 --> 00:00:05,000
and build up a new tree based on this new right child.

3
00:00:05,000 --> 00:00:07,000
So now let's test it.

4
00:00:07,000 --> 00:00:10,000
I'm going to make a very simple tree that has midpoint right at the root,

5
00:00:10,000 --> 00:00:15,000
and let's say that I insert atwood, margaret into this tree.

6
00:00:15,000 --> 00:00:19,000
We think it should go on the left because atwood is less than midpoint.

7
00:00:19,000 --> 00:00:21,000
A comes before M. So let's try it out.

8
00:00:21,000 --> 00:00:24,000
And in fact, it did. Here's our answer.

9
00:00:24,000 --> 00:00:29,000
Here's our answer down here in Python tuple form, and here's the tree it corresponds to.

10
00:00:29,000 --> 00:00:33,000
Midpoint at the top with atwood, margaret as the left child.

11
00:00:33,000 --> 00:00:37,000
Midpoint at the top with atwood, margaret as the left child.

12
00:00:37,000 --> 00:00:41,000
No right child for midpoint, no children at all for atwood, margaret.

13
00:00:41,000 --> 00:00:44,000
Now let's try inserting zuma, jacob into this tree.

14
00:00:44,000 --> 00:00:47,000
Here is a pictorial representation of what we want to get out.

15
00:00:47,000 --> 00:00:53,000
Midpoint has only a right child. That right child is zuma, jacob--jacob, which I can't spell.

16
00:00:53,000 --> 00:00:56,000
Down here is the Python nested tuple interpretation.

17
00:00:56,000 --> 00:01:01,000
Midpoint has no left child, but it does have a right child: zuma, jacob.

18
00:01:01,000 --> 00:01:04,000
But reading this Python tuple stuff, that's really hard,

19
00:01:04,000 --> 00:01:08,000
so let's write a procedure to walk down one of these trees and print out everything in order.

20
00:01:08,000 --> 00:01:10,000
Again, this is a recursive procedure.

21
00:01:10,000 --> 00:01:12,000
If we've reached the end of the line, we don't do anything,

22
00:01:12,000 --> 00:01:15,000
but otherwise, here's what I'm going to do.

23
00:01:15,000 --> 00:01:17,000
Remember our rule for these trees.

24
00:01:17,000 --> 00:01:19,000
All of my left children are less than or equal to me.

25
00:01:19,000 --> 00:01:21,000
So I'll print them out first with a recursive call,

26
00:01:21,000 --> 00:01:25,000
then I'll print out myself, and then because all of my right children are greater than

27
00:01:25,000 --> 00:01:27,000
or equal to me, I'll print them out last.

28
00:01:27,000 --> 00:01:30,000
Now let's try this out with a little more complicated test case.

29
00:01:30,000 --> 00:01:34,000
I have taken a tree that has a midpoint, and then I'm inserting both Jacob Zuma

30
00:01:34,000 --> 00:01:36,000
and also Margaret Atwood into it.

31
00:01:36,000 --> 00:01:40,000
It would be a rare tree that would contain both the author of The Blind Assassin

32
00:01:40,000 --> 00:01:44,000
and also a South African president in 2009, but you never know.

33
00:01:44,000 --> 00:01:48,000
And now when we print out the tree, we get all of the elements in alphabetical order.

34
00:01:48,000 --> 00:01:52,000
Huh. Actually, if we didn't know any other way to sort things,

35
00:01:52,000 --> 99:59:59,999
this tree could be a way to put any arbitrary elements in ascending order.
