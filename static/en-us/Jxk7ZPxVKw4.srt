1
00:00:00,120 --> 00:00:03,550
So now we have seen that we really want to have a better predictor, but

2
00:00:03,550 --> 00:00:06,750
the question is how. We have seen that the predict,

3
00:00:06,750 --> 00:00:11,940
taken predictor computes the next PC as a function of the current PC,

4
00:00:11,940 --> 00:00:17,700
by just incrementing it. So question is, if all we know is the current PC,

5
00:00:17,700 --> 00:00:22,100
is there any better function that we can use to form a better prediction

6
00:00:22,100 --> 00:00:27,600
of what's coming next? And the answer is, if all you know is the current PC,

7
00:00:27,600 --> 00:00:32,080
then probably you cannot make much of a better prediction. It will help us,

8
00:00:32,080 --> 00:00:35,690
if we knew, is the instruction a branch. But we don't know that,

9
00:00:35,690 --> 00:00:38,960
we're still fetching the instruction while we are making the prediction.

10
00:00:38,960 --> 00:00:43,690
Is this instruction going to be taken, as a branch? Again, we have no clue about

11
00:00:43,690 --> 00:00:48,860
that. What is the offset field of the instruction? If this is a branch,

12
00:00:48,860 --> 00:00:53,270
this is what will be added to the PC to form the target address if it's taken.

13
00:00:53,270 --> 00:00:56,280
But we don't know that either because we haven't fetched the instruction. So

14
00:00:56,280 --> 00:01:01,540
really, we don't know for sure anything that might be really useful in

15
00:01:01,540 --> 00:01:06,490
forming the [UNKNOWN] prediction. So it seems like it's hopeless, but it's not.

16
00:01:06,490 --> 00:01:12,840
So what do we know if we don't know anything for certain. What we do know

17
00:01:12,840 --> 00:01:18,460
is what the current PC is. But we also know something about how that branch at

18
00:01:18,460 --> 00:01:24,200
this PC was behaving in the past. And we can use that because it turns out

19
00:01:24,200 --> 00:01:29,500
that branches tend to behave the same way over and over again. So really that

20
00:01:29,500 --> 00:01:34,400
is what we can use. We don't know for sure what this branch is going to do but

21
00:01:34,400 --> 00:01:39,750
we can know what it did the few previous times when it was executed.
