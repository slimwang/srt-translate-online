1
00:00:00,270 --> 00:00:03,070
In the tablet wire frames,
when a list item is selected,

2
00:00:03,070 --> 00:00:05,790
it shows this blue
activated state background.

3
00:00:05,790 --> 00:00:08,430
This can be done by setting
the background of the list item to be

4
00:00:08,430 --> 00:00:09,590
a state drawable.

5
00:00:09,590 --> 00:00:10,900
We can look at the documentation for

6
00:00:10,900 --> 00:00:12,988
this StateListDrawable,
which is linked below.

7
00:00:12,988 --> 00:00:16,590
Essentially, a StateListDrawable allows
you to specify different drawables

8
00:00:16,590 --> 00:00:18,740
based on the state of the view.

9
00:00:18,740 --> 00:00:21,120
We provide you a code for
the StateListDrawable.

10
00:00:21,120 --> 00:00:24,520
Drop it in by creating a drawable
folder under the res directory.

11
00:00:24,520 --> 00:00:28,580
When set as the background of a list
item, we see that the background is just

12
00:00:28,580 --> 00:00:32,330
transparent by default such
as this today lay out here.

13
00:00:32,330 --> 00:00:34,970
When the view is pressed,
then we see a grey background.

14
00:00:34,970 --> 00:00:38,640
When the view is activated,
then we see this blue color.

15
00:00:38,640 --> 00:00:42,940
This is also indicating that it's
the selected item in the two pane mode.

16
00:00:42,940 --> 00:00:45,970
We also have a second version
of the touch_selector file for

17
00:00:45,970 --> 00:00:48,000
Lollipop devices and above.

18
00:00:48,000 --> 00:00:50,630
This is saved in
the drawable-v21 folder.

19
00:00:50,630 --> 00:00:52,950
Set on platforms API level 21 and

20
00:00:52,950 --> 00:00:56,490
above, it will use this
version of the touch_selector.

21
00:00:56,490 --> 00:01:00,050
On older devices it will fall back
to the touch_selector in the base

22
00:01:00,050 --> 00:01:01,300
drawable folder.

23
00:01:01,300 --> 00:01:05,250
One of the main principles of material
design is responsive interaction.

24
00:01:05,250 --> 00:01:08,950
One way to accomplish this is that
when a user touches a device,

25
00:01:08,950 --> 00:01:10,770
the device will acknowledge
the interaction, and

26
00:01:10,770 --> 00:01:13,690
a ripple will radiate out
from the touch point.

27
00:01:13,690 --> 00:01:15,880
This is done with a ripple drawable.

28
00:01:15,880 --> 00:01:19,480
You can add a ripple element in
your state list drawable xml.

29
00:01:19,480 --> 00:01:25,160
For the v21 touch selector, it's the
same except that for the pressed state,

30
00:01:25,160 --> 00:01:28,890
we have a ripple drawable with
a grey color for touch feedback.

31
00:01:28,890 --> 00:01:31,070
And on a Lollypop device,
you can see the ripple.

32
00:01:31,070 --> 00:01:34,350
In the list item layout, we set the
background to be this touch_selector.

33
00:01:34,350 --> 00:01:37,530
We do the same for
the list_item_forecast_today layout.

34
00:01:37,530 --> 00:01:41,460
Back in the touch_selector file, I want
to note that there's some colors here.

35
00:01:41,460 --> 00:01:45,800
The @android color notation is for
a framework defined color.

36
00:01:45,800 --> 00:01:50,250
The other colors are ones that we
defined in the colors.xml file.

37
00:01:50,250 --> 00:01:53,740
This file is located in
the Values folder of your app.

38
00:01:53,740 --> 00:01:56,570
It's useful to store colors
in a central location

39
00:01:56,570 --> 00:01:59,590
if you need a reference colors
multiple times in your app.

40
00:01:59,590 --> 00:02:00,410
As a hint.

41
00:02:00,410 --> 00:02:04,090
to make a list item show its activated
state, you can look at the documentation

42
00:02:04,090 --> 00:02:07,400
for the XML attribute choiceMode for
the ListView.

43
00:02:07,400 --> 00:02:09,949
Once you find the right attribute,
you'll realize that you want different

44
00:02:09,949 --> 00:02:11,880
behavior for
one pane versus two pane mode.

45
00:02:11,880 --> 00:02:15,760
While you could change the behaviour
programatically in the Java code,

46
00:02:15,760 --> 00:02:19,748
we'd like you to do it purely via
the resource XML files using a style.

47
00:02:19,748 --> 00:02:22,960
Read this doc to learn about how
styles can be defined in XML.

48
00:02:22,960 --> 00:02:26,320
And use what you learned earlier about
defining alternative resources for

49
00:02:26,320 --> 00:02:27,850
different size devices.

50
00:02:27,850 --> 00:02:31,090
In general, styles are a way that
you can group together attributes

51
00:02:31,090 --> 00:02:31,960
for a view.

52
00:02:31,960 --> 00:02:36,072
For example, these text attributes
are replaced by this style CodeFont.

53
00:02:36,072 --> 00:02:39,540
The CodeFont style is defined
in the styles.xml file

54
00:02:39,540 --> 00:02:41,580
located in the Values folder.

55
00:02:41,580 --> 00:02:45,240
You can also have styles inherit other
styles by specifying the parent.

56
00:02:45,240 --> 00:02:48,740
There are a couple of other examples
you can check out on this page.

57
00:02:48,740 --> 00:02:50,880
This is what the app should
look like when you're done.

58
00:02:50,880 --> 00:02:53,940
In one pane mode,
we don't see the activated state.

59
00:02:53,940 --> 00:02:56,570
But there's still the regular
press state with the ripple and

60
00:02:56,570 --> 00:02:57,250
then it goes away
