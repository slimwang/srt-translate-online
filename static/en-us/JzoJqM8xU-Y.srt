1
00:00:00,590 --> 00:00:06,870
Now don't worry. This is not your computer misbehavior. How many times have

2
00:00:06,870 --> 00:00:12,710
you see often windows like what I'm showing you on this screen? Why does this

3
00:00:12,710 --> 00:00:16,040
happen? The simple answer, programs are not

4
00:00:16,040 --> 00:00:18,970
being hygienic, that is, they are not

5
00:00:18,970 --> 00:00:21,920
cleaning up after themselves. Now, you can

6
00:00:21,920 --> 00:00:26,380
not fault the applications themselves. If an application

7
00:00:26,380 --> 00:00:30,330
encounters an error or the user decides to

8
00:00:30,330 --> 00:00:34,700
kill an application, either ways, the system services

9
00:00:34,700 --> 00:00:37,500
that the application was using have to have

10
00:00:37,500 --> 00:00:40,750
a way of gracefully terminating and getting rid

11
00:00:40,750 --> 00:00:46,210
of the state, that is the bread crumbs it created along the way. And it may

12
00:00:46,210 --> 00:00:49,720
have strewn such breadcrumbs all over the computer.

13
00:00:49,720 --> 00:00:52,620
Some may be in data structures in memory,

14
00:00:52,620 --> 00:00:57,310
some may be visible, like the orphan windows that I'm showing you on the screen,

15
00:00:57,310 --> 00:01:02,750
and so on. Bottom line is these breadcrumbs are using

16
00:01:02,750 --> 00:01:08,690
up precious resources in the computer. It may be visible resources like real

17
00:01:08,690 --> 00:01:11,770
estate, on your display of failed

18
00:01:11,770 --> 00:01:17,280
applications or invisible resources like memory leaks,

19
00:01:17,280 --> 00:01:19,530
network bandwidth that is being chewed up

20
00:01:19,530 --> 00:01:22,470
by connections that are persisting beyod the life

21
00:01:22,470 --> 00:01:25,510
of an application. Persistent data structures on

22
00:01:25,510 --> 00:01:28,930
the disk and so on. LRVN and [UNKNOWN]

23
00:01:28,930 --> 00:01:31,290
which is really and implementation of the

24
00:01:31,290 --> 00:01:35,590
RVN semantics on top of a persistent file

25
00:01:35,590 --> 00:01:38,610
cache, took a very narrow view of

26
00:01:38,610 --> 00:01:42,340
recoverability, namely recovering the state that need to

27
00:01:42,340 --> 00:01:46,480
be persistent across system crashes. Either becaue

28
00:01:46,480 --> 00:01:49,350
of software failure or power failure. But

29
00:01:49,350 --> 00:01:52,030
imagine a system service that spans several

30
00:01:52,030 --> 00:01:54,450
machines and network file server is a

31
00:01:54,450 --> 00:01:57,140
good example. NFS is suppoed to be

32
00:01:57,140 --> 00:02:01,730
stateless which means that the client-server interaction

33
00:02:01,730 --> 00:02:07,350
maintains no state at the server, pertaining to the clients. So what that means

34
00:02:07,350 --> 00:02:10,770
is, taking down a file server and bringing

35
00:02:10,770 --> 00:02:14,160
up The file server again does not need any

36
00:02:14,160 --> 00:02:18,130
coordination with the clients that this file server

37
00:02:18,130 --> 00:02:20,390
may be serving at any point of time. But

38
00:02:20,390 --> 00:02:22,740
look at what is happening from the point

39
00:02:22,740 --> 00:02:26,780
of view of the system, especially the client boxes

40
00:02:26,780 --> 00:02:29,730
that are interacting with the file system. In

41
00:02:29,730 --> 00:02:32,350
this case, there are clients all over the network

42
00:02:32,350 --> 00:02:34,860
so far as this file server is concerned.

43
00:02:34,860 --> 00:02:39,770
And indirectly, and if a server is leaving breadcrumbs

44
00:02:39,770 --> 00:02:43,780
all over the LAN because of accesses that

45
00:02:43,780 --> 00:02:46,340
a client may have made with a file server,

46
00:02:46,340 --> 00:02:48,900
in each one of these boxes. Imagine what

47
00:02:48,900 --> 00:02:52,590
happens when a client program that initiated a file

48
00:02:52,590 --> 00:02:55,130
system call quits in the middle of its

49
00:02:55,130 --> 00:02:57,510
exchange with the file server? How will the file

50
00:02:57,510 --> 00:03:00,390
server know how to clean up all the mess?

51
00:03:00,390 --> 00:03:03,080
And in fact, with a stateless file server, doesn't even

52
00:03:03,080 --> 00:03:06,360
know that there have been breadcrumbs created on this

53
00:03:06,360 --> 00:03:10,520
node. The short answer is, the file system cannot know

54
00:03:10,520 --> 00:03:13,330
about these kinds of breadcrumbs that have been created

55
00:03:13,330 --> 00:03:15,630
all over the network. And I'm giving you a file

56
00:03:15,630 --> 00:03:18,770
server as one example, but in general, all of

57
00:03:18,770 --> 00:03:22,920
the system services that a client program is reliant on

58
00:03:22,920 --> 00:03:26,200
create state, and this partial states may live

59
00:03:26,200 --> 00:03:29,640
forever if an application crashes in the middle.

60
00:03:29,640 --> 00:03:32,810
Worse yet, you as a user may be

61
00:03:32,810 --> 00:03:36,640
asked by the operating system to do some cleanup,

62
00:03:36,640 --> 00:03:39,470
not knowing what the cleanup may entail for

63
00:03:39,470 --> 00:03:43,420
you, personally. Am I going to lose two hours

64
00:03:43,420 --> 00:03:47,960
of work that I just completed? I have no idea what will happen when I click the

65
00:03:47,960 --> 00:03:48,940
"OK" button here.
