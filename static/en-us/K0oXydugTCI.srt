1
00:00:00,050 --> 00:00:04,390
The gang of four book, includes descriptions of 11 behavioral patterns which I

2
00:00:04,390 --> 00:00:06,980
briefly survey here, and then we have an example of one.

3
00:00:06,980 --> 00:00:10,140
First of is the chain of responsibility pattern which allows you to

4
00:00:10,140 --> 00:00:14,690
separate a request from the mechanism by which the request is handler, and

5
00:00:14,690 --> 00:00:18,640
also allows for you to have multiple handlers for a given request.

6
00:00:18,640 --> 00:00:22,770
Second is the command pattern, which takes what sounds like a verb, and

7
00:00:22,770 --> 00:00:27,360
converts it into a noun. That is, you can have objects that represent commands.

8
00:00:27,360 --> 00:00:30,590
Third is the interpreter pattern, which is quite complex because it

9
00:00:30,590 --> 00:00:34,070
provides a mechanism, essentially, to have an interpreter for

10
00:00:34,070 --> 00:00:39,100
a language. You can represent the grammar and interpret its instances based upon

11
00:00:39,100 --> 00:00:43,420
whatever operations are expressed in the language. Next is the iterator over

12
00:00:43,420 --> 00:00:47,975
enumeration pattern of course, now languages like Java and

13
00:00:47,975 --> 00:00:53,040
C++ have iterators and enumerations. But at the time the book was written,

14
00:00:53,040 --> 00:00:56,280
they weren't part of the language and hence they were described there,

15
00:00:56,280 --> 00:01:01,640
you might think of, the occurrence of that pattern in the book as a motivation

16
00:01:01,640 --> 00:01:06,220
by which the eventual feature was added to the other programming languages.

17
00:01:06,220 --> 00:01:10,120
A Mediator pattern is a powerful way of encapsulating object interactions,

18
00:01:10,120 --> 00:01:14,800
into an object. The Memento pattern captures an object's internal state for

19
00:01:14,800 --> 00:01:20,310
later restore. Think here about undo and redo, you want to capture the state so

20
00:01:20,310 --> 00:01:23,670
you can go back to it if you do an undo. Next is the Observer pattern,

21
00:01:23,670 --> 00:01:27,770
sometimes called the Listener pattern, which is a way by which classes can

22
00:01:27,770 --> 00:01:31,830
notify dependent classes when an object changes. The state pattern is

23
00:01:31,830 --> 00:01:35,520
an interesting one, in which we've alluded to before, that you could use in

24
00:01:35,520 --> 00:01:40,040
situations where you might like to change the class of a particular object.

25
00:01:40,040 --> 00:01:44,080
Example I think we gave before had to do with library books, in which they went

26
00:01:44,080 --> 00:01:47,870
from being one week books to two week books to four week books. Of course,

27
00:01:47,870 --> 00:01:52,640
in most object oriented languages you can't change the class of a object,

28
00:01:52,640 --> 00:01:54,550
State Pattern is a way of doing that.

29
00:01:54,550 --> 00:01:59,640
The next pair of classes are often useful for representing algorithms.

30
00:01:59,640 --> 00:02:03,060
The Strategy Pattern is a family of algorithms with the same purpose and

31
00:02:03,060 --> 00:02:06,350
interface. An instance of the pattern is a specific algorithm.

32
00:02:06,350 --> 00:02:08,330
Related to that is the Template Method Pattern,

33
00:02:08,330 --> 00:02:12,090
which is a skeleton of an algorithm with hooks for the specific step.

34
00:02:12,090 --> 00:02:15,610
Finally, the Visitor pattern is a way of applying a method to elements in

35
00:02:15,610 --> 00:02:18,910
the structure and we're going to use this as an example of a behavioral pattern.
