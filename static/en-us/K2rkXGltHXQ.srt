1
00:00:00,265 --> 00:00:02,472
Alright, so I’ve redrawn the graph from the previous

2
00:00:02,472 --> 00:00:05,989
examples just to make a little bit more room and

3
00:00:05,989 --> 00:00:10,116
what we’ve got so far is the original graph and the –

4
00:00:10,116 --> 00:00:14,197
a tree version of the graph that we built by search,

5
00:00:14,197 --> 00:00:16,328
some kind of data depth-first, breadth-first – any kind

6
00:00:16,328 --> 00:00:19,277
of search actually will do, as long as we now have

7
00:00:19,277 --> 00:00:21,734
these green edges pointing downward and these red

8
00:00:21,734 --> 00:00:25,781
no-tree edges connecting nodes that need to be

9
00:00:25,781 --> 00:00:28,838
connected if the edge wasn’t actually part of this

10
00:00:28,838 --> 00:00:32,747
tree. Then we post ordered the nodes and now what

11
00:00:32,747 --> 00:00:34,745
do we do next.We now compute the number of

12
00:00:34,745 --> 00:00:37,611
descendents for each node in the graph and the

13
00:00:37,611 --> 00:00:41,675
number of descendents is the number of nodes that

14
00:00:41,675 --> 00:00:44,294
are either the node or reachable from the node by

15
00:00:44,294 --> 00:00:48,630
following green edges only. So this is easiest to start

16
00:00:48,630 --> 00:00:51,824
at the bottom here, F has just the node itself and no

17
00:00:51,824 --> 00:00:54,638
descendants, so it’s got a number of descendant of

18
00:00:54,638 --> 00:00:59,138
one, same thing with G.E has one descendant, one

19
00:00:59,138 --> 00:01:02,490
descendent plus itself for three. D has the three

20
00:01:02,490 --> 00:01:06,601
descendants of E plus itself for four. C has the four

21
00:01:06,616 --> 00:01:09,471
descendants of D plus itself is five. B has just itself

22
00:01:09,471 --> 00:01:14,893
and A has B’s descendants, C’s descendants plus

23
00:01:14,893 --> 00:01:17,101
itself for seven. So the next thing we’re going to

24
00:01:17,101 --> 00:01:19,380
compute is for each of the nodes, we’re going to

25
00:01:19,380 --> 00:01:22,674
consider the set of nodes that are descendants of

26
00:01:22,674 --> 00:01:26,415
the node or reachable from the descendants of the

27
00:01:26,415 --> 00:01:30,811
node by one hop of a non-tree edge and of all those

28
00:01:30,811 --> 00:01:32,812
nodes that are reachable, we’re going to look at the

29
00:01:32,812 --> 00:01:35,758
post-order value that is the smallest, we’ll call that L.

30
00:01:35,758 --> 00:01:39,362
So in the case of F, F has itself and it also can reach

31
00:01:39,362 --> 00:01:42,662
G, the smallest value there is two. G has no

32
00:01:42,662 --> 00:01:45,646
descendants but it can reach by one red edge F. So

33
00:01:45,646 --> 00:01:49,709
the smallest least values two and three is two. E has

34
00:01:49,709 --> 00:01:51,881
F and G and itself that it can reach no other nodes

35
00:01:51,881 --> 00:01:53,768
by non-tree edges and the smallest of those

36
00:01:53,768 --> 00:01:57,940
numbers is two. D can reach all of these nodes in

37
00:01:57,940 --> 00:02:00,675
itself but also by a non-tree edge it can reach this

38
00:02:00,675 --> 00:02:04,477
node and the smallest of those numbers is one. C

39
00:02:04,477 --> 00:02:07,861
can reach all of these nodes and through one of

40
00:02:07,861 --> 00:02:11,500
those nodes one tree edge gets it to one. B values

41
00:02:11,500 --> 00:02:14,460
itself as one so that’s going to be the smallest. And

42
00:02:14,460 --> 00:02:17,479
A includes everything, so that’s going to include the

43
00:02:17,479 --> 00:02:20,177
one, so that’ll be the smallest. H is the same idea

44
00:02:20,177 --> 00:02:22,870
except of those that same set that we computed for

45
00:02:22,870 --> 00:02:25,820
L, we want to know the largest value. For G between

46
00:02:25,820 --> 00:02:29,569
F and G the largest value is three. For E between E,

47
00:02:29,569 --> 00:02:34,615
F and G the largest value is four. For D, D,E,F, G

48
00:02:34,615 --> 00:02:37,517
and B reachable by a red edge, the largest value is

49
00:02:37,517 --> 00:02:42,209
itself five. C same set for adding in C now and the

50
00:02:42,209 --> 00:02:44,885
largest value becomes six and A set contains

51
00:02:44,885 --> 00:02:47,486
everybody so that’s going to include itself with the

52
00:02:47,486 --> 00:02:49,751
value of seven. Alright, now we’ve decorated these

53
00:02:49,751 --> 00:02:52,801
nodes with lots of interesting numbers, now we can

54
00:02:52,801 --> 00:02:55,055
get to the last step. So given all these nicely

55
00:02:55,055 --> 00:02:57,514
decorated nodes, we now have a rule for figuring out

56
00:02:57,514 --> 00:02:59,915
which ones are the bridge edges and this is the rule.

57
00:02:59,915 --> 00:03:03,309
All the bridge edges are ones that are green, they

58
00:03:03,309 --> 00:03:05,980
have to be three edges and the green number is

59
00:03:05,980 --> 00:03:08,926
less or equal black number and the red number is

60
00:03:08,926 --> 00:03:11,307
bigger than the blue number minus the black

61
00:03:11,307 --> 00:03:15,656
number or in words the – each value has to be less

62
00:03:15,656 --> 00:03:19,297
or equal to the post order value, the lowest value

63
00:03:19,297 --> 00:03:22,755
has to be bigger than the number of descendants

64
00:03:22,755 --> 00:03:25,265
minus the post order value. So apart from the fact

65
00:03:25,265 --> 00:03:27,949
that it’s not immediately obvious why this is the right

66
00:03:27,949 --> 00:03:31,073
rule let’s apply it to the tree to see what gets picked

67
00:03:31,073 --> 00:03:32,801
out. So, what we’re doing here is we’re looking at

68
00:03:32,801 --> 00:03:34,836
each green edge and we’re checking the numbers

69
00:03:34,836 --> 00:03:37,937
on the downward part of the edge. So here is a

70
00:03:37,937 --> 00:03:40,169
green edge and let’s look at the numbers here and

71
00:03:40,169 --> 00:03:42,524
see if they fit the pattern. We need the green

72
00:03:42,524 --> 00:03:44,525
number to be less or equal to the black number. So

73
00:03:44,525 --> 00:03:46,691
that doesn’t work, right. Here is another green edge.

74
00:03:46,691 --> 00:03:48,087
You need the green number to be less or equal to

75
00:03:48,087 --> 00:03:50,183
the black number, oh that works. So the red number

76
00:03:50,183 --> 00:03:51,977
needs to be bigger than the difference between the

77
00:03:51,977 --> 00:03:53,893
black and the blue. So black and the blue the

78
00:03:53,893 --> 00:03:56,241
difference is two. The red number is two, so that

79
00:03:56,241 --> 00:04:00,009
doesn’t work. Alright next edge to check is this one,

80
00:04:00,009 --> 00:04:02,832
so we need to check is green less or equal to black,

81
00:04:02,832 --> 00:04:07,111
yes. Is red bigger than black minus blue? Two is

82
00:04:07,111 --> 00:04:10,758
bigger than one, so yes. So this edge has been

83
00:04:10,758 --> 00:04:13,429
identified as a tree edge. That’s the right answer and

84
00:04:13,429 --> 00:04:15,366
none of the other edges are tree edges but let’s just

85
00:04:15,366 --> 00:04:18,050
check them just to be sure. For this edge, we have –

86
00:04:18,050 --> 00:04:20,314
we need green to be less or equal to black which we

87
00:04:20,314 --> 00:04:23,701
have. And we need red to be bigger than the

88
00:04:23,701 --> 00:04:25,699
difference between blue and black but one is not

89
00:04:25,699 --> 00:04:28,802
bigger than one, so this edge is out. How about this?

90
00:04:28,802 --> 00:04:31,599
We need green less or equal to black, yes. We need

91
00:04:31,599 --> 00:04:34,848
red bigger than the difference, no. Green number is

92
00:04:34,848 --> 00:04:37,802
five because the D node is reachable by a non-tree

93
00:04:37,802 --> 00:04:40,436
edge. Alright, so green less or equal to black, no.

94
00:04:40,436 --> 00:04:42,534
Alright, well that’s it. Those are all the edges. So in

95
00:04:42,534 --> 00:04:45,010
this example anyway the one edge that the

96
00:04:45,010 --> 00:04:47,518
algorithm finds is exactly the bridge edge. Can we

97
00:04:47,518 --> 00:04:50,734
get a handle on why this works? It seems kind of

98
00:04:50,734 --> 00:04:54,734
magic at this point.
