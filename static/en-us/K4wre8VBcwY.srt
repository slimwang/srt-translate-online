1
00:00:00,460 --> 00:00:03,718
Now it's time to actually write
the adapter portion of our recycler view

2
00:00:03,718 --> 00:00:05,129
pattern that we just talked about.

3
00:00:06,570 --> 00:00:10,160
I'm starting with our GreenAdapter
class, which also contains the code for

4
00:00:10,160 --> 00:00:11,990
our view holder as an inner class.

5
00:00:13,089 --> 00:00:16,300
This adapter won't be backed by
any sort of special data source.

6
00:00:16,300 --> 00:00:19,810
It will just create views that hold
the string representation of a number.

7
00:00:21,530 --> 00:00:25,330
We first need to specify how many
views the adapter will hold.

8
00:00:25,329 --> 00:00:30,054
And we'll do this with a private int
member variable named mNumberItems.

9
00:00:31,480 --> 00:00:34,070
Then we need to populate that
variable in the constructor.

10
00:00:35,380 --> 00:00:38,920
So let's create the constructor for
GreenAdapter that accepts the number of

11
00:00:38,920 --> 00:00:44,100
items to display and
sets our member variable to that value.

12
00:00:44,100 --> 00:00:48,429
Next we'll have our GreenAdapter
extend RecyclerView.Adapter,

13
00:00:48,429 --> 00:00:53,079
taking in the type parameter of
GreenAdapter.NumberViewHolder.

14
00:00:53,079 --> 00:00:56,070
This way we know that we're working
with the right kind of ViewHolder.

15
00:00:56,070 --> 00:00:57,310
Type safety is great to have.

16
00:00:58,320 --> 00:01:00,390
Then Android Studio gives us an error,

17
00:01:00,390 --> 00:01:03,640
because now we'll need to override some
of the functions that adapters require.

18
00:01:05,109 --> 00:01:08,519
Let's start with overriding
the onCreateViewHolder method.

19
00:01:08,519 --> 00:01:11,959
The onCreateViewHolder method
will return a view holder object.

20
00:01:13,030 --> 00:01:17,284
And in here we inflate our item
view using a LayoutInflater.

21
00:01:17,284 --> 00:01:20,170
LayoutInflater is a bit
of a new concept for you.

22
00:01:20,170 --> 00:01:24,269
Its inflate method takes in
the ID of a layout in XML.

23
00:01:24,269 --> 00:01:26,750
In our case,
this is the number list item layout.

24
00:01:27,879 --> 00:01:31,769
Then it inflates or converts this
into a collection of view groups and

25
00:01:31,769 --> 00:01:34,299
views that represent it in Java code.

26
00:01:34,299 --> 00:01:37,989
The last parameter this inflate method
takes in is set to false, so that

27
00:01:37,989 --> 00:01:41,939
the inflated layout isn't immediately
attached to its parent view group.

28
00:01:41,939 --> 00:01:44,269
And this is the setting
you generally want to use.

29
00:01:44,269 --> 00:01:47,409
So the inflater takes in our
layout XML and returns a view.

30
00:01:48,540 --> 00:01:52,020
Then we'll pass this view into
the constructor of our NumberViewHolder.

31
00:01:53,150 --> 00:01:55,130
And finally,
we'll return that new view holder.

32
00:01:56,219 --> 00:01:59,060
Next, we'll override onBindViewHolder.

33
00:01:59,060 --> 00:02:02,787
And since we added the bind function
to our NumberViewHolder itself,

34
00:02:02,787 --> 00:02:05,771
we can just call this bind
method in onBindViewHolder.

35
00:02:05,771 --> 00:02:10,758
So in onBindViewHolder, we just call
our view holder's bind method and

36
00:02:10,758 --> 00:02:14,090
pass in the int position as a parameter.

37
00:02:14,090 --> 00:02:18,330
And last but certainly not least,
we need to override getItemCount.

38
00:02:18,330 --> 00:02:22,219
In this method, we'll just return
the mNumberItems variable.

39
00:02:22,219 --> 00:02:24,359
And that completes the basic code for
this adapter.

