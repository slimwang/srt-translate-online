1
00:00:00,000 --> 00:00:04,000
This next exercise involves planning routes on a subway system.

2
00:00:04,000 --> 00:00:10,000
This is a map of the subway system for my hometown of Boston.

3
00:00:10,000 --> 00:00:12,000
We're going to have a representation of this map,

4
00:00:12,000 --> 00:00:15,000
and then we're going to be able to ask questions of what's the shortest path

5
00:00:15,000 --> 00:00:18,000
to get from A to B.

6
00:00:18,000 --> 00:00:23,000
Now I'm going to show you what I decided as the format for how I represent the subway line

7
00:00:23,000 --> 00:00:26,000
and the functions I want you to write.

8
00:00:26,000 --> 00:00:30,000
I'm going represent it as--we call this function "subway,"

9
00:00:30,000 --> 00:00:32,000
which builds up a data structures and assigns that--

10
00:00:32,000 --> 00:00:36,000
we're going to assign it to the variable "boston."

11
00:00:36,000 --> 00:00:41,000
And the arguments to this function are a bunch of keyword argument.

12
00:00:41,000 --> 00:00:45,000
Blue is the list of stations separated by spaces--

13
00:00:45,000 --> 00:00:47,000
just regular words separated by spaces.

14
00:00:47,000 --> 00:00:51,000
The orange line, red line, and green line are similar.

15
00:00:51,000 --> 00:00:55,000
Now, here is the signature for this function subway.

16
00:00:55,000 --> 00:01:00,000
It takes this double-asterisk parameter name notation.

17
00:01:00,000 --> 00:01:06,000
If you haven't seen that before, what that means is that these are the keyword arguments.

18
00:01:06,000 --> 00:01:10,000
Two asterisks means everything that's left is going to be a keyword argument.

19
00:01:10,000 --> 00:01:13,000
I'm not going to tell you what they are. They can be anything.

20
00:01:13,000 --> 00:01:19,000
Collect them into this parameter called lines and make that be a dictionary--

21
00:01:19,000 --> 00:01:23,000
a dictionary where in this case the keys of the dictionary would be the strings

22
00:01:23,000 --> 00:01:25,000
blue, orange, green, and red,

23
00:01:25,000 --> 00:01:29,000
and the values of the dictionary would be these corresponding strings.

24
00:01:29,000 --> 00:01:31,000
That's what lines is.

25
00:01:31,000 --> 00:01:35,000
Then you do whatever you want to lines and return the result.

26
00:01:35,000 --> 00:01:39,000
If you want, you just return the lines dictionary as-is. That would be fine.

27
00:01:39,000 --> 00:01:43,000
But if you did that you'd probably need to do more complicated processing

28
00:01:43,000 --> 00:01:48,000
on the values later one, so you might want to do some of the processing up front

29
00:01:48,000 --> 00:01:51,000
and return some other type of data structure for subway,

30
00:01:51,000 --> 00:01:54,000
because you're going to need it down here.

31
00:01:54,000 --> 00:01:58,000
Down here we're going to write the ride function that says how do we get from here to there.

32
00:01:58,000 --> 00:02:00,000
Here and there are going to be stops.

33
00:02:00,000 --> 00:02:08,000
For example, how do we get from Oak Grove to Downtown Station or stop?

34
00:02:08,000 --> 00:02:11,000
Those are just strings that represent the stops.

35
00:02:11,000 --> 00:02:16,000
The system, which in this case defaults to Boston--

36
00:02:16,000 --> 00:02:18,000
the subway system that we previously defined.

37
00:02:18,000 --> 00:02:20,000
You write your code there.

38
00:02:20,000 --> 00:02:23,000
Presumably, you're going to have some sort of call to a search function.

39
00:02:23,000 --> 00:02:28,000
You're going to need to define a successor function that'll be appropriate.

40
00:02:28,000 --> 00:02:32,000
So you need to decide what is the representation you'll come up with for subway

41
00:02:32,000 --> 00:02:36,000
that will be useful to the successor function that you're going to use here.

42
00:02:36,000 --> 00:02:40,000
Then just for fun, let's also write the function longest_ride,

43
00:02:40,000 --> 00:02:44,000
which takes as input a subway system such as Boston

44
00:02:44,000 --> 00:02:47,000
and tells you what's the longest ride you can get.

45
00:02:47,000 --> 00:02:54,000
From all the pairs of stations going from one to the other, what's the longest one?

46
00:02:54,000 --> 00:02:59,000
And I helped you out a little bit here by writing just a small number of test cases.

47
00:02:59,000 --> 00:03:05,000
You can try that out. You can also write more test cases on your own.
