1
00:00:00,000 --> 00:00:03,000
We've seen a little bit of testing, but let's look at testing from another angle.

2
00:00:03,000 --> 00:00:07,000
Let's say this is the program or the thing that we're considering testing.

3
00:00:07,000 --> 00:00:10,000
We want to test our JavaScript interpreter,

4
00:00:10,000 --> 00:00:15,000
and we're going to feed it this factorial definition and this call to document write.

5
00:00:15,000 --> 00:00:21,000
And by thinking hard about the problem, we know the answer we should get is 120.

6
00:00:21,000 --> 00:00:24,000
5 times 4 times 3 times 2 times 1--5 factorial.

7
00:00:24,000 --> 00:00:26,000
Here's the quiz.

8
00:00:26,000 --> 00:00:29,000
Let's say this is our test case and that's the input we're comparing against.

9
00:00:29,000 --> 00:00:33,000
I want to know which parts of the program we gain confidence about.

10
00:00:33,000 --> 00:00:37,000
So here I've written 6 important parts of our JavaScript interpreter:

11
00:00:37,000 --> 00:00:42,000
handling function calls; handling environment lookups for variable values;

12
00:00:42,000 --> 00:00:47,000
handling string constants like hello; local variable declarations like var temp = 3;

13
00:00:47,000 --> 00:00:52,000
assignment statements like z = 2; and binary operations like addition.

14
00:00:52,000 --> 00:00:56,000
And what I want to know is, if this is our test input

15
00:00:56,000 --> 00:00:59,000
and we're comparing the answer to 120,

16
00:00:59,000 --> 00:01:02,000
which of these features in our interpreter will be tested?

17
00:01:02,000 --> 00:01:05,000
If something isn't tested, we can't hope to find a bug in it.

18
00:01:05,000 --> 00:01:08,000
As a hint, another way of looking at this problem is to imagine,

19
00:01:08,000 --> 00:01:13,000
let's say, that our code for function calls totally didn't work.

20
00:01:13,000 --> 00:01:16,000
Would we get 120?

21
00:01:16,000 --> 99:59:59,999
If the answer is no, then we're testing function calls.
