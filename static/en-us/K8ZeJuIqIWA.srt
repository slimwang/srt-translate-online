1
00:00:00,000 --> 00:00:03,050
So the times you see are two given vertices are connected.

2
00:00:03,050 --> 00:00:09,610
Well, if we can access every element of the adjacency matrix in constant time,

3
00:00:09,610 --> 00:00:15,200
well then we can just check that given element in the matrix in constant time.

4
00:00:15,200 --> 00:00:19,110
Similarly, the time required to add and edge between two vertices--

5
00:00:19,110 --> 00:00:24,670
well, we can access that element in constant time and then just change it from 0 to 1

6
00:00:24,670 --> 00:00:31,310
that's constant time, and similarly, we can change from 1 to 0 to remove an edge

7
00:00:31,310 --> 00:00:33,060
between two vertices.

8
00:00:33,060 --> 00:00:35,810
Now, the time to find the degree of a vertex.

9
00:00:35,810 --> 00:00:39,570
It's a little bit harder to find the degree of a vertex where the degree is

10
00:00:39,570 --> 00:00:41,790
the number of vertices that are connected to it.

11
00:00:41,790 --> 00:00:47,370
In order to find all the vertices that are connected to a given vertex, well, we have to go down

12
00:00:47,370 --> 00:00:51,100
that row or that column one by one.

13
00:00:51,100 --> 00:00:56,220
Since we have to do this n times, well this is what it end at least.

14
00:00:56,220 --> 00:01:00,930
Now, these questions are somewhat tricky and memory required to represent a graph

15
00:01:00,930 --> 00:01:06,540
with O(n) edges as an adjacency matrix and O(n²) edges as an adjacency matrix.

16
00:01:06,540 --> 00:01:12,590
This is a bit of a trick question. If we have n vertices, then we have an n x n,

17
00:01:12,590 --> 00:01:15,430
which is n² total elements.

18
00:01:15,430 --> 00:01:21,440
So we're going to need n² memory slots to put each of those elements in.

19
00:01:21,440 --> 00:01:29,630
You can pare that down a little bit if you're really clever, but if any of adjacency matrix approach,

20
00:01:29,630 --> 00:01:33,770
then the memory required isn't really a function of the number of edges

21
00:01:33,770 --> 00:01:36,180
so much as it is the number of vertices.

22
00:01:36,180 --> 00:01:39,840
So we want to go ahead and put n² for both of those.
