1
00:00:00,150 --> 00:00:02,630
We can see in Amdahl's Law. Let's talk

2
00:00:02,630 --> 00:00:06,720
about what it implies for our improvements. So our

3
00:00:06,720 --> 00:00:10,470
Amdahl's Law says that Speedup is equal to

4
00:00:10,470 --> 00:00:14,000
1 over 1 minus fraction enhanced, this is the

5
00:00:14,000 --> 00:00:16,170
part of the program that we didn't enhance

6
00:00:16,170 --> 00:00:19,410
and it just figures here, plus the fraction that

7
00:00:19,410 --> 00:00:23,220
we did enhance. And that fraction became so much

8
00:00:23,220 --> 00:00:26,270
faster because of the speed up on the path.

9
00:00:26,270 --> 00:00:30,280
So now, let's compare two possible enhancements. This

10
00:00:30,280 --> 00:00:32,259
is the first enhancement, this will be the

11
00:00:32,259 --> 00:00:36,161
second enhancement. The first enhancement is giving us

12
00:00:36,161 --> 00:00:38,689
a speedup of 20 which is an extremely

13
00:00:38,689 --> 00:00:43,093
large speedup on 10% of execution time. Enhancement

14
00:00:43,093 --> 00:00:45,697
2 is giving us a speedup of 1.6

15
00:00:45,697 --> 00:00:49,545
on 80% of execution time. Using Amdahl's Law,

16
00:00:49,545 --> 00:00:51,360
we can now compute, what is the overall

17
00:00:51,360 --> 00:00:56,720
speedup resulting from these enhancements? Here, we have 1 over

18
00:00:56,720 --> 00:01:01,328
unaffected is 90% of execution time. Affected is

19
00:01:01,328 --> 00:01:06,151
0.1. And it's shorter by 20 times. You can compute

20
00:01:06,151 --> 00:01:11,370
this, and get 1.105. Here, we get 1 over, the

21
00:01:11,370 --> 00:01:16,440
unenhanced fraction is 0.2, the enhanced

22
00:01:16,440 --> 00:01:23,200
fraction is 0.8 and we speed that up by the 1.6 factor and

23
00:01:23,200 --> 00:01:29,833
we get 1.43. As you can see, it is usually better to have a smaller speedup on

24
00:01:29,833 --> 00:01:36,200
most of your execution time, than a huge speedup on a very small part of it.

25
00:01:36,200 --> 00:01:42,260
In fact, even if we have an infinite speedup on this 10% of execution

26
00:01:42,260 --> 00:01:48,623
time, we would get 1 over unenhanced 0.9, enhanced 0.1 divided by

27
00:01:48,623 --> 00:01:55,818
infinity, so it becomes 0. And we still get 1.111. Now, it is very, very

28
00:01:55,818 --> 00:01:58,674
difficult to get huge speedups like this

29
00:01:58,674 --> 00:02:01,730
on anything. And it's, of course, impossible

30
00:02:01,730 --> 00:02:07,438
to get infinite speedups. So, what this means, is that if you put significant

31
00:02:07,438 --> 00:02:10,389
effort to speedup something that is a small

32
00:02:10,389 --> 00:02:13,178
part of the execution time you will still

33
00:02:13,178 --> 00:02:17,078
not get a very large overall improvement. In

34
00:02:17,078 --> 00:02:20,038
contrast, if you're affecting a large part of

35
00:02:20,038 --> 00:02:23,294
execution time then even a reasonably small speedup

36
00:02:23,294 --> 00:02:25,662
will still result in a similar speed up

37
00:02:25,662 --> 00:02:29,636
overall. So the overall conclusion from this is

38
00:02:29,636 --> 00:02:32,452
that Amdahl's Law tells us to make the

39
00:02:32,452 --> 00:02:35,860
common case fast. Whatever spends the most of our

40
00:02:35,860 --> 00:02:38,635
execution time is what should we be trying to

41
00:02:38,635 --> 00:02:41,210
speedup. And we should not focus too much on

42
00:02:41,210 --> 00:02:43,970
stuff that consumes very little of our execution time.
