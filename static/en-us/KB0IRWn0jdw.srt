1
00:00:00,360 --> 00:00:03,430
With respect to the three other solutions, we have advantages and

2
00:00:03,430 --> 00:00:05,280
disadvantages as well.

3
00:00:05,280 --> 00:00:10,160
As far as the ADT, Abstract Data Type solution, it's very good,

4
00:00:10,160 --> 00:00:12,520
as far as maintainability and reuse.

5
00:00:12,520 --> 00:00:17,560
Those particular components could be used in other applications by just,

6
00:00:17,560 --> 00:00:18,450
just plucking them out.

7
00:00:18,450 --> 00:00:20,780
Remember, they've hidden away details.

8
00:00:20,780 --> 00:00:24,425
On the other hand because things are hidden away you have to

9
00:00:24,425 --> 00:00:28,790
invoke them through function call interfaces which might be more expensive, so

10
00:00:28,790 --> 00:00:31,010
you might pay a price in performance.

11
00:00:31,010 --> 00:00:33,065
With respect to implicit implication,

12
00:00:33,065 --> 00:00:38,160
okay it has also maintainability advantages.

13
00:00:39,280 --> 00:00:45,480
If you change the representation because the, the, the clients and the servers

14
00:00:45,480 --> 00:00:49,720
don't know much about each other you only have to change them in one place.

15
00:00:49,720 --> 00:00:54,300
You don't have to change change the others, which also facilitates reuse.

16
00:00:54,300 --> 00:00:57,440
On the other hand, because it's implicit invocation and

17
00:00:57,440 --> 00:00:59,700
you don't know who you're talking to a lot of times,

18
00:00:59,700 --> 00:01:03,810
it's sometimes difficult to think about or control what's going on.

19
00:01:03,810 --> 00:01:07,300
And if you had to do some kind of debugging it might be tricky to know,

20
00:01:07,300 --> 00:01:12,100
you know, which of the components was responsible for some kind of problem.

21
00:01:12,100 --> 00:01:16,670
Also, as with the ADT solution, because you have these more or

22
00:01:16,670 --> 00:01:20,610
less abstract interfaces between things there may be a performance hit.

23
00:01:20,610 --> 00:01:22,760
With respect to pipe and filter, pipe and

24
00:01:22,760 --> 00:01:25,450
filter is very intuitive, easy to think about.

25
00:01:25,450 --> 00:01:29,690
It's also easy to reuse because each of the filters along the way,

26
00:01:29,690 --> 00:01:33,150
you can plunk out and put into another, another solution.

27
00:01:33,150 --> 00:01:35,320
On the other hand if we wanted to make changes,

28
00:01:35,320 --> 00:01:39,570
such as making the system interactive pipe and filter wouldn't work at all.

29
00:01:39,570 --> 00:01:43,510
It, it's going to stream things, stream things through.

30
00:01:43,510 --> 00:01:47,000
also, it's not particularly space efficient because you have

31
00:01:48,280 --> 00:01:52,050
no no place for you to store the data, which means you

32
00:01:52,050 --> 00:01:55,590
might have multiple copies of that data floating around as you're processing.

33
00:01:55,590 --> 00:02:00,410
So, each of the particular solutions has advantages and disadvantages, and

34
00:02:00,410 --> 00:02:04,280
in any particular sit, situation you want to look at what's important to you.

35
00:02:04,280 --> 00:02:05,810
Is performance important?

36
00:02:05,810 --> 00:02:08,139
Is memory footprint important?

37
00:02:08,139 --> 00:02:12,975
And, pick a solution that has the particular advantages that you need and

38
00:02:12,975 --> 00:02:15,310
avoids the particular disadvantages that might bother you.
