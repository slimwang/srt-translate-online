1
00:00:00,012 --> 00:00:03,140
Okay. Well, in this case we're really just picking whether or not the thread is even or odd.

2
00:00:03,140 --> 00:00:07,212
Each warp will have some even threads and some odd threads, so it's a total slowdown of 2.

3
00:00:07,212 --> 00:00:09,965
Here we're doing an integer divide, okay?

4
00:00:09,965 --> 00:00:15,052
So threads 0 through 31, when divided by 32, will return case 0,

5
00:00:15,052 --> 00:00:21,431
and threads 32 through 63 will return this expression, will evaluate to 1.

6
00:00:21,431 --> 00:00:25,677
They'll evaluate case 1 and so forth. So, here we're getting no slowdown at all.

7
00:00:25,677 --> 00:00:30,745
All the threads in a 32-thread warp will still end up taking the same case.

8
00:00:30,745 --> 00:00:33,446
And finally, threadIdx.x/8.

9
00:00:33,446 --> 00:00:38,388
So now there will be 4 different distinct values

10
00:00:38,388 --> 00:00:41,703
that this expression evaluates to for the threads in a warp.

11
00:00:41,703 --> 00:00:46,954
And so we'll end up evaluating cases 0, 1, 2, and 3 in the 1st warp,

12
00:00:46,954 --> 00:00:51,128
4, 5, 6, 7 in the 2nd warp, and so forth.

13
00:00:51,128 --> 00:00:53,365
So this time we'll take a 4x slowdown.
