1
00:00:00,500 --> 00:00:02,960
To structure the N-tier applications we're going to

2
00:00:02,960 --> 00:00:06,040
talk about one particular framework as an example.

3
00:00:06,040 --> 00:00:07,700
It's just as an example, there are

4
00:00:07,700 --> 00:00:11,680
other frameworks that provide similar functionality to the

5
00:00:11,680 --> 00:00:13,820
JEE framework which is called the Java

6
00:00:13,820 --> 00:00:18,450
Enterprise Edition framework. And in the JEE framework

7
00:00:18,450 --> 00:00:22,230
there are four containers for constructing an application

8
00:00:22,230 --> 00:00:25,970
service. And containers you can think of as

9
00:00:25,970 --> 00:00:28,950
protection domains implemented typically in a Java

10
00:00:28,950 --> 00:00:32,090
virtual machine. In the JEE version of, of

11
00:00:32,090 --> 00:00:35,840
building N-tier applications there are four containers there

12
00:00:35,840 --> 00:00:38,320
are the client contain and there is an

13
00:00:38,320 --> 00:00:41,870
applet container for the client, which will

14
00:00:41,870 --> 00:00:44,240
reside typically on a web server. And this

15
00:00:44,240 --> 00:00:47,600
is the one that - Interacts with the

16
00:00:47,600 --> 00:00:51,450
browser on the end client. And the presentation

17
00:00:51,450 --> 00:00:54,380
logic that I mentioned to you earlier is

18
00:00:54,380 --> 00:00:56,580
provided in a container, which is called a web

19
00:00:56,580 --> 00:00:58,570
container, and this is the guy that is

20
00:00:58,570 --> 00:01:02,880
responsible for dynamically perhaps creating the pages that have

21
00:01:02,880 --> 00:01:08,610
to be sent by the web server back to the browser of the client. And there is

22
00:01:08,610 --> 00:01:11,820
an EJB container, which is the one that

23
00:01:11,820 --> 00:01:16,500
manages the business logic that corresponds to what needs

24
00:01:16,500 --> 00:01:19,400
to be done in order to carry out the

25
00:01:19,400 --> 00:01:23,040
request that is come in from the end client.

26
00:01:23,040 --> 00:01:25,110
And there may be a database server, that the

27
00:01:25,110 --> 00:01:28,790
business logic is communicating with in order to Get access

28
00:01:28,790 --> 00:01:31,630
to the data that it needs to process the

29
00:01:31,630 --> 00:01:33,705
request that came in. So these are the four

30
00:01:33,705 --> 00:01:36,850
containers: the client container, the applet container, the web

31
00:01:36,850 --> 00:01:41,690
container and the EJB container that are, the containers that

32
00:01:41,690 --> 00:01:44,930
are available for packaging the objects

33
00:01:44,930 --> 00:01:48,950
that constitute. The entire application for

34
00:01:48,950 --> 00:01:52,350
providing a particular service, for example,

35
00:01:52,350 --> 00:01:55,020
airline reservation service or a hotel reservation

36
00:01:55,020 --> 00:02:01,550
service. The key hope is that we want to exploit as much as possible, reuse

37
00:02:01,550 --> 00:02:06,990
components, and for this purpose continuing sort of the coffee analogy starting

38
00:02:06,990 --> 00:02:13,980
with Java. The word bean is used to indicate a unit of reels, that is, a bundle

39
00:02:13,980 --> 00:02:19,510
of Java objects providing a specific functionality. For example, there may be

40
00:02:19,510 --> 00:02:21,860
a bean that provides the shopping cart

41
00:02:21,860 --> 00:02:25,450
function. So that becomes a unit that reuse

42
00:02:25,450 --> 00:02:28,920
in constructing an N-tier application. The containers

43
00:02:28,920 --> 00:02:31,920
that I talked about here host the beans.

44
00:02:31,920 --> 00:02:34,870
That is, a container allows you to package

45
00:02:34,870 --> 00:02:37,770
a whole bunch of Java beans and make it

46
00:02:37,770 --> 00:02:41,570
available in this container, in the JEE framework.

47
00:02:41,570 --> 00:02:44,920
There are four types of beans, one type of

48
00:02:44,920 --> 00:02:47,910
bean is called an entity bean. For instance

49
00:02:47,910 --> 00:02:51,430
an entity bean maybe a row of a database.

50
00:02:51,430 --> 00:02:54,530
If you think about the database holding employee records

51
00:02:54,530 --> 00:02:57,370
for instance, one drawer of the database may correspond

52
00:02:57,370 --> 00:03:00,260
to all the employees whose last names

53
00:03:00,260 --> 00:03:02,700
start with the alphabet," a". And typically

54
00:03:02,700 --> 00:03:05,740
entity beans are persistent objects with primary

55
00:03:05,740 --> 00:03:10,740
keys. And the persistence for the entity bean

56
00:03:10,740 --> 00:03:16,190
may be built into the bean itself and that is what is called bean management

57
00:03:16,190 --> 00:03:22,680
persistence, or it may be built into the container into which that entity bean

58
00:03:22,680 --> 00:03:26,220
is instantiated. In either case Since we are

59
00:03:26,220 --> 00:03:30,230
dealing with objects that may need persistence, it

60
00:03:30,230 --> 00:03:33,410
is important that the persistance for that object

61
00:03:33,410 --> 00:03:36,050
is handled somewhere either in the entity itself

62
00:03:36,050 --> 00:03:39,350
or the container into which that entity is

63
00:03:39,350 --> 00:03:42,130
being hosted. The second type bean is what

64
00:03:42,130 --> 00:03:44,360
is called a session bean. And the session

65
00:03:44,360 --> 00:03:49,400
bean typically is associated with a particular client.

66
00:03:49,400 --> 00:03:52,930
And a particular session, meaning a temporal

67
00:03:52,930 --> 00:03:55,770
window over which a client is interacting with

68
00:03:55,770 --> 00:04:00,690
the service. That is what a session bean may be holding. And a session bean

69
00:04:00,690 --> 00:04:04,900
could be a stateful session bean, meaning,

70
00:04:04,900 --> 00:04:07,360
for instance, I am ordering, let's say, a

71
00:04:07,360 --> 00:04:11,640
computer, by contacting a portal for Del.

72
00:04:11,640 --> 00:04:15,010
In that case, the session that I'm establishing

73
00:04:15,010 --> 00:04:20,930
with the Del portal, that session has to be stateful, because it has to remember

74
00:04:20,930 --> 00:04:27,270
what choices I'm making. I may actually keep those choices alive, go away for a

75
00:04:27,270 --> 00:04:29,180
while, come back the next day, and

76
00:04:29,180 --> 00:04:32,790
continue with my purchase. So, sessions could be

77
00:04:32,790 --> 00:04:35,940
stateful. There could also be stateless sessions. For

78
00:04:35,940 --> 00:04:40,380
instance if I start an email session using

79
00:04:40,380 --> 00:04:45,740
my browser with Google using Gmail, that session maybe

80
00:04:45,740 --> 00:04:49,500
stateless. I go away, everything that I did during

81
00:04:49,500 --> 00:04:51,250
that session can be thrown away because I'm going

82
00:04:51,250 --> 00:04:54,030
to start a brand new session when I re initiate

83
00:04:54,030 --> 00:04:56,880
a connection with a G mail server. So in

84
00:04:56,880 --> 00:05:00,110
that sense, a session bean could be a state-full session

85
00:05:00,110 --> 00:05:02,770
bean or a stateless session bean. And the third

86
00:05:02,770 --> 00:05:07,006
type of bean is what is called a message-driven bean.

87
00:05:07,006 --> 00:05:10,350
This kind of bean is useful for asynchronous

88
00:05:10,350 --> 00:05:14,180
behavior. For instance, I might be interested in

89
00:05:14,180 --> 00:05:16,520
getting the stock quotes, I might have a

90
00:05:16,520 --> 00:05:19,960
stock quote ticker on my browser and I might

91
00:05:19,960 --> 00:05:22,840
want to get updates on the movement of

92
00:05:22,840 --> 00:05:25,500
stocks of a particular company that I'm interested

93
00:05:25,500 --> 00:05:28,370
in. And that would be something that is

94
00:05:28,370 --> 00:05:32,360
accomplished using a message bean. Which is having this

95
00:05:32,360 --> 00:05:35,780
asyncrhonous behavior. Stock ticker is an example,

96
00:05:35,780 --> 00:05:38,560
news feed is an example, RSS feeds that

97
00:05:38,560 --> 00:05:40,530
you typically are using, these days, are

98
00:05:40,530 --> 00:05:43,780
examples of message driven beans. And the finer

99
00:05:43,780 --> 00:05:50,190
we make these beans, each of these beans is denoting a functionality, but if you

100
00:05:50,190 --> 00:05:53,250
can have fine grained Versions of these

101
00:05:53,250 --> 00:05:57,440
beans. That gives a greater opportunity to enhance

102
00:05:57,440 --> 00:06:00,910
a concurrency for dealing with an individual request

103
00:06:00,910 --> 00:06:03,800
that's coming into your application's server, or there could

104
00:06:03,800 --> 00:06:06,900
be concurrent requests. In addition to my own request,

105
00:06:06,900 --> 00:06:09,440
there could be parallel requests coming in. All of

106
00:06:09,440 --> 00:06:13,270
those can be dealt with more concurrently if

107
00:06:13,270 --> 00:06:17,190
we implement these beans at a finer level of

108
00:06:17,190 --> 00:06:19,780
granularity. But if you implement the bean at a

109
00:06:19,780 --> 00:06:22,710
finer level of granularity that means that the business

110
00:06:22,710 --> 00:06:25,150
logic is also getting more complex. So, there

111
00:06:25,150 --> 00:06:27,940
is always this trade off in structuring end clear

112
00:06:27,940 --> 00:06:31,070
applications that we made have a complex business

113
00:06:31,070 --> 00:06:34,440
logic In order to support finer grain concurrency or

114
00:06:34,440 --> 00:06:36,930
I might choose to keep the business logic

115
00:06:36,930 --> 00:06:40,400
very simple and use [UNKNOWN] beans. And this is

116
00:06:40,400 --> 00:06:43,670
where the core of what we are going to discuss

117
00:06:43,670 --> 00:06:47,870
lies, and that is. We are going to discuss.

118
00:06:47,870 --> 00:06:52,900
Different design alternatives for structuring such entity application servers.
