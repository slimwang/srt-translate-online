1
00:00:00,571 --> 00:00:03,459
As app developers, it's our job 
to maintain the illusion

2
00:00:03,459 --> 00:00:07,074
that once started, every app 
is waiting patiently in the background

3
00:00:07,074 --> 00:00:09,703
looking for its chance to be the star
when called on.

4
00:00:10,205 --> 00:00:13,233
So whenever the user switches back
to your app, whether or not the system

5
00:00:13,233 --> 00:00:14,687
is killed during in the interim,

6
00:00:14,687 --> 00:00:18,129
they should be presented 
with the same UI they had when they left.

7
00:00:18,146 --> 00:00:22,027
To help, Android has a pair of handlers
specifically for persisting state

8
00:00:22,027 --> 00:00:23,559
in these circumstances.

9
00:00:23,559 --> 00:00:26,913
OnSaveInstanceState is called 
immediately before onPause.

10
00:00:26,917 --> 00:00:29,687
So, as soon as your app 
is no longer active,

11
00:00:32,723 --> 00:00:36,959
an onRestoreInstanceState 
is called immediately after onCreate,

12
00:00:37,103 --> 00:00:39,520
but only if the app is being restarted

13
00:00:39,520 --> 00:00:41,623
after having been terminated
by the system.

14
00:00:42,217 --> 00:00:45,835
That means you can read the bundle 
of state information saved the last time

15
00:00:45,835 --> 00:00:48,855
your app was moved 
to the foreground here.

16
00:00:48,855 --> 00:00:51,614
The next time, 
you'll use the switches to your app

17
00:00:51,614 --> 00:00:53,811
even if it was killed by the system
in the mean time.

18
00:00:54,310 --> 00:00:57,778
Using that bundle, you can return 
your UI to the same state it was

19
00:00:57,778 --> 00:01:00,469
the last time the user saw it,
creating a seamless transition

20
00:01:00,469 --> 00:01:04,230
that hides the resource management
happening under the covers.

21
00:01:04,489 --> 00:01:06,648
That's enough of the "why,"
let's go back to Dan

22
00:01:06,648 --> 00:01:09,385
and see how to put this theory
into practice.
