1
00:00:00,910 --> 00:00:05,070
As you just read, code coverage is
an important tool but easily misused.

2
00:00:05,070 --> 00:00:09,340
Code coverage is tricky because it
cannot test for faults of omission.

3
00:00:09,340 --> 00:00:13,730
Here might be all of your team's code
and here's the code that's been tested.

4
00:00:13,730 --> 00:00:16,950
A fault of omission is something
that you forgot to write and

5
00:00:16,950 --> 00:00:20,090
there's no way that code
coverage tools can catch this.

6
00:00:20,090 --> 00:00:23,790
A coverage tool tells you how much of
the code you'd written was run by tests,

7
00:00:23,790 --> 00:00:27,000
but it can't point out when you're
missing coder statements entirely.

8
00:00:27,000 --> 00:00:31,820
It also can't tell you if you've
actually tested your code sensibly.

9
00:00:31,820 --> 00:00:34,240
A test that simply runs some code and

10
00:00:34,240 --> 00:00:38,200
doesn't have any sort of assertions
about that code is pointless, but

11
00:00:38,200 --> 00:00:42,360
it will come up as having tested more
code in your code coverage tool.

12
00:00:42,360 --> 00:00:45,720
This can lead to a sort of
false sense of security.

13
00:00:45,720 --> 00:00:50,480
Striving for high code coverage can
actually incentivize writing bad tests.

14
00:00:50,480 --> 00:00:53,670
For example,
developers can write bad tests

15
00:00:53,670 --> 00:00:57,580
simply to try to get some sort
of high code coverage score.

16
00:00:57,580 --> 00:01:00,700
Lower percentage of code coverage
isn't necessarily terrible.

17
00:01:00,700 --> 00:01:05,000
Merit differentiates between high,
medium and low risk areas of code.

18
00:01:05,000 --> 00:01:08,740
High risk areas of code involve code
which if written wrong could lose your

19
00:01:08,740 --> 00:01:13,610
company money, affect a large number of
users or even seriously injure someone.

20
00:01:13,610 --> 00:01:15,460
And since time is a finite resource,

21
00:01:15,460 --> 00:01:19,130
it's infinitely more important to focus
on the testing code that's high risk.

22
00:01:19,130 --> 00:01:21,990
So how could code coverage be useful?

23
00:01:21,990 --> 00:01:25,510
When code coverage is used as
an expectation and not as a requirement,

24
00:01:25,510 --> 00:01:27,060
it's more useful.

25
00:01:27,060 --> 00:01:31,440
For example, you can have two
similar code coverage situations

26
00:01:31,440 --> 00:01:34,370
that should be dealt with
in very different ways.

27
00:01:34,370 --> 00:01:38,270
Code coverage allows you to detect
a generally weak test suite.

28
00:01:38,270 --> 00:01:42,360
If your devs are not gaming the system,
these weaknesses in the test suite can

29
00:01:42,360 --> 00:01:46,440
be used to make decisions about where
you should go to fix high risk code.

30
00:01:46,440 --> 00:01:51,090
For example, code coverage metrics can
identify what are known as black holes.

31
00:01:51,090 --> 00:01:53,910
Black holes in your testing
suite are things like complete

32
00:01:53,910 --> 00:01:56,030
features which you've forgotten to test.

33
00:01:56,030 --> 00:02:00,270
In the end, code coverage tools are just
what their name implies, they're tools.

34
00:02:00,270 --> 00:02:03,740
And helpfulness is based
primarily on who is using the tool

35
00:02:03,740 --> 00:02:05,780
rather than the tool itself.

36
00:02:05,780 --> 00:02:09,070
You might be wondering when to
actually employ code coverage.

37
00:02:09,070 --> 00:02:13,100
You generally want to run code coverage
right after running unit tests.

38
00:02:13,100 --> 00:02:15,410
There are plenty of code
coverage tools out there and

39
00:02:15,410 --> 00:02:17,740
they usually depend on
your target language.

40
00:02:17,740 --> 00:02:21,347
I've gone ahead and included an overview
of some common tools in the notes.

41
00:02:21,347 --> 00:02:22,779
[BLANK_AUDIO]
