1
00:00:00,000 --> 00:00:05,000
In this problem, we ask you to implement Euclid's algorithm using JavaScript.

2
00:00:05,000 --> 00:00:07,000
We're not expecting you to be a JavaScript guru,

3
00:00:07,000 --> 00:00:12,000
but it's useful to know the basic constructs when we're developing our interpreter for it.

4
00:00:12,000 --> 00:00:16,000
Perhaps, the best way to get familiar is by programming something.

5
00:00:16,000 --> 00:00:18,000
Euclid's algorithm is incredibly simple.

6
00:00:18,000 --> 00:00:22,000
It computes the GCD, or the greatest common divisor.

7
00:00:22,000 --> 00:00:27,000
Let's call our function gcd. It takes 2 inputst that are integers--a and b.

8
00:00:27,000 --> 00:00:30,000
If a = b, we're going to return a.

9
00:00:30,000 --> 00:00:36,000
If a > b, we're going to calculate the gcd of a - b and b.

10
00:00:36,000 --> 00:00:39,000
Taking a step back, this first one made sense.

11
00:00:39,000 --> 00:00:43,000
If you're given 2 numbers--36 and 36--it's pretty clear that the greatest common divisor is 36.

12
00:00:43,000 --> 00:00:47,000
So we're just going to pick 1. It could have been b, it doesn't really matter.

13
00:00:47,000 --> 00:00:52,000
This next one may not be as clear, but you probably have some intuition why it's true.

14
00:00:52,000 --> 00:00:56,000
We're going to reserve a proof for it for an algebra class that you might take

15
00:00:56,000 --> 00:00:59,000
in college or in high school.

16
00:00:59,000 --> 00:01:03,000
If a is less than b, we're going to calculate gcd of a and b - a.

17
00:01:03,000 --> 00:01:08,000
So looking at all of this together, it kind of looks like pseudocode,

18
00:01:08,000 --> 00:01:10,000
and actually it looks very close to the code that we're going to write

19
00:01:10,000 --> 00:01:13,000
be it in Python or JavaScript.

20
00:01:13,000 --> 00:01:18,000
So let's get right to it, and I'll go over some of the JavaScript notations and conventions

21
00:01:18,000 --> 00:01:20,000
as I code this up.

22
00:01:20,000 --> 00:01:22,000
But really this is it.

23
00:01:22,000 --> 00:01:26,000
So to declare a JavaScript function, we use the keyword function,

24
00:01:26,000 --> 00:01:29,000
and then the name of a function, which we call gcd.

25
00:01:29,000 --> 00:01:33,000
We're going to take in 2 inputs--a and b.

26
00:01:33,000 --> 00:01:36,000
Now we have our function body.

27
00:01:36,000 --> 00:01:39,000
Unlike Python where we can just use tabbing and whitespace to indicate

28
00:01:39,000 --> 00:01:45,000
what parts of the code are blocks or subparts of the rest of the code,

29
00:01:45,000 --> 00:01:49,000
we use braces, and forgive my poor bracing technique.

30
00:01:49,000 --> 00:01:51,000
I've never gotten very good at this.

31
00:01:51,000 --> 00:01:55,000
Now the first thing we're going to do is an if--if a = b, we're going to return a.

32
00:01:55,000 --> 00:01:58,000
If you haven't already figured it out, this is a recursive definition,

33
00:01:58,000 --> 00:02:01,000
and we're going to use it to write a recursive function.

34
00:02:01,000 --> 00:02:05,000
If a = b, we're going to return a, just like we've said.

35
00:02:05,000 --> 00:02:10,000
Oh yeah, and don't forget your semicolons just like I just did.

36
00:02:10,000 --> 00:02:13,000
Otherwise, else.

37
00:02:13,000 --> 00:02:18,000
If a > b, we're going to do gcd of a - b and b.

38
00:02:18,000 --> 00:02:22,000
Always add your semicolon. Finish your brace.

39
00:02:22,000 --> 99:59:59,999
We have 1 last case. Another else, and we're done.
