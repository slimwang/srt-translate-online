1
00:00:00,130 --> 00:00:04,300
Another example of prefetching would
be the so-called Hardware Prefetching.

2
00:00:04,300 --> 00:00:08,270
Where the program doesn't change,
and the hardware itself, either

3
00:00:08,270 --> 00:00:13,210
the processor or the cache is trying
to guess what will be accessed soon.

4
00:00:13,210 --> 00:00:16,980
There are a number of harder
prefetchers that work reasonably well.

5
00:00:16,980 --> 00:00:17,940
For example,

6
00:00:17,940 --> 00:00:22,610
many current processors include what's
called a Stream Buffer prefetcher.

7
00:00:22,610 --> 00:00:26,760
Other popular types of prefetchers
include a Stride Prefetcher and

8
00:00:26,760 --> 00:00:29,270
what is called a Correlating Prefetcher.

9
00:00:29,270 --> 00:00:33,670
All of these try to guess what
is going to be accessed next

10
00:00:33,670 --> 00:00:36,180
based on some sort of locality property.

11
00:00:36,180 --> 00:00:39,890
So a Stream Buffer is
sequential in nature.

12
00:00:39,890 --> 00:00:43,140
It's trying to see whether
once we access a blog and

13
00:00:43,140 --> 00:00:45,790
then the next block that follows it.

14
00:00:45,790 --> 00:00:48,858
We are likely to access
the next next block and so on.

15
00:00:48,858 --> 00:00:52,050
So it's just trying to fetch
several blocks in advance

16
00:00:52,050 --> 00:00:54,015
in order to not be too late.

17
00:00:54,015 --> 00:00:58,700
A stride based prefetcher is
monitoring accesses to see if memory

18
00:00:58,700 --> 00:01:03,940
accesses we are doing, are at
the fixed distance from each other.

19
00:01:03,940 --> 00:01:07,150
So if their addresses
differ by the same amount.

20
00:01:07,150 --> 00:01:10,760
It's going to guess,
that we will just continue doing that.

21
00:01:10,760 --> 00:01:16,880
And it starts prefetching with
the distance of D times something.

22
00:01:16,880 --> 00:01:19,830
And it determines how
many of these in advance.

23
00:01:19,830 --> 00:01:21,380
Such that it's just in time.

24
00:01:22,510 --> 00:01:26,570
A Correlating Prefetcher is
trying to predict sequences

25
00:01:26,570 --> 00:01:31,120
of accesses that are not sequential or
at the same distance from each other.

26
00:01:31,120 --> 00:01:35,350
The way it does this is when
we see A and B accessed,

27
00:01:36,400 --> 00:01:43,470
it remembers in some sort of a table
that, when A comes then B comes.

28
00:01:43,470 --> 00:01:47,890
Then when C comes it remembers
that after B comes C and so on.

29
00:01:47,890 --> 00:01:52,510
And then later on if we see A,
it's going to look here and

30
00:01:52,510 --> 00:01:54,700
issue prefetch for B.

31
00:01:54,700 --> 00:01:58,180
If we do access B it's going to
look here and issue a prefetch for

32
00:01:58,180 --> 00:01:59,110
C and so on.

33
00:01:59,110 --> 00:02:02,400
So it can prefetch an arbitrary
sequence of accesses

34
00:02:02,400 --> 00:02:04,305
as long as that sequence repeats.

35
00:02:04,305 --> 00:02:05,670
So it's very good for example for

36
00:02:05,670 --> 00:02:09,210
linklist which are not necessarily
sequential in memory and

37
00:02:09,210 --> 00:02:13,300
are not at fixed strides, but
if you access the first note, then

38
00:02:13,300 --> 00:02:17,660
the second or third note and you do it
again, it's going to prefetch correctly.
