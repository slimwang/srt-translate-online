1
00:00:00,005 --> 00:00:03,833
In the real world, bad things do happen, like files not being writeable or disks

2
00:00:03,833 --> 00:00:07,232
being full. And we don't want our program to just crash one that happens, we

3
00:00:07,232 --> 00:00:11,218
want to deal with it. Many programming languages, including Python, provide a

4
00:00:11,218 --> 00:00:14,886
way of doing this and its called an exception. Here's an example of whats going

5
00:00:14,886 --> 00:00:21,394
on. I'm going to open the file called blim.py to read from the current directory

6
00:00:21,394 --> 00:00:26,895
and when I do this I get an error. The file didn't exist. And the error I got is

7
00:00:26,895 --> 00:00:32,078
called an IOError. And it gives me a message. This is really a crash. I did this

8
00:00:32,078 --> 00:00:36,046
in the Python interpreter, but if this happened inside a program, well, that

9
00:00:36,046 --> 00:00:40,062
would end execution and we'd be done. If we want our programs to work or at

10
00:00:40,062 --> 00:00:44,278
least fail gracefully in the real world where things like this can happen,

11
00:00:44,278 --> 00:00:48,430
instead of allowing this failure to happen, what we need to do is catch it.

12
00:00:48,430 --> 00:00:52,395
There's no way for open to return a file object, coz we asked for a file that

13
00:00:52,395 --> 00:00:56,580
doesn't exist and that can't be read. So, there's no way to do this assignment.

14
00:00:56,580 --> 00:00:59,895
We can imagine a different interface to open where it would return null or some

15
00:00:59,895 --> 00:01:04,223
special object. And then, we'd have to test every time we did an open to see if

16
00:01:04,223 --> 00:01:07,260
it worked. Since we assume it normally works, we don't have to do that test all

17
00:01:07,260 --> 00:01:12,053
the time. Instead, we want to deal with fillers like this as exceptional cases.

18
00:01:12,053 --> 00:01:16,616
So, here's what happened in the example, we're calling the open operation which

19
00:01:16,616 --> 00:01:20,913
leads to call in the file module. Normally, that would return a file instance

20
00:01:20,913 --> 00:01:24,880
which would be a sign to the variable f. In this case, something went wrong,

21
00:01:24,880 --> 00:01:28,650
there's no file that can be returned. Instead, what happens is an exception will

22
00:01:28,650 --> 00:01:33,097
be thrown. This isn't a normal return. So, execution doesn't continue as it

23
00:01:33,097 --> 00:01:37,636
would with assignment, it continues somewhere else. Instead of being returned

24
00:01:37,636 --> 00:01:41,638
normally, this exception doesn't continue execution normally, it gets caught by

25
00:01:41,638 --> 00:01:45,846
an exception handler, if there is one. They can have more than five fingers. If

26
00:01:45,846 --> 00:01:50,014
there are no exception handler, it causes the program to crash. And that's what

27
00:01:50,014 --> 00:01:53,794
we saw in interpreter and I am sure you've seen programs that end in that type

28
00:01:53,794 --> 00:01:57,956
of crash already. How do we make these handlers to try to prevent the program

29
00:01:57,956 --> 00:02:02,579
from crashing? To do that, we need a try catch block. Here's the syntax, we use

30
00:02:02,579 --> 00:02:07,635
try to introduce a block, anything that happens in that block, if it raises an

31
00:02:07,635 --> 00:02:12,264
exception, it will jump to the exception handlers. If there's a handler that

32
00:02:12,264 --> 00:02:15,558
matches the exception that was raised, and we'll talk more about how that

33
00:02:15,558 --> 00:02:19,160
matching happens, then the exception handler will run. So, we can jump from

34
00:02:19,160 --> 00:02:23,255
anywhere in the middle of this block, wherever an exception is raised to the

35
00:02:23,255 --> 00:02:25,387
handler that handles that exception.
