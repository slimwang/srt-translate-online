1
00:00:00,280 --> 00:00:03,120
So now, we know the toolbox provided

2
00:00:03,120 --> 00:00:06,500
by SPIN for building an operating system. Now,

3
00:00:06,500 --> 00:00:11,410
one can build each of the services we talked about early on, that an operating

4
00:00:11,410 --> 00:00:14,340
system should provide. Such as memory management,

5
00:00:14,340 --> 00:00:18,990
CPU scheduling, threads, file system, network protocol stack,

6
00:00:18,990 --> 00:00:22,090
and so on, from scratch, as extensions

7
00:00:22,090 --> 00:00:25,740
to SPIN. As we know, memory management and

8
00:00:25,740 --> 00:00:29,360
CPU scheduling are core services that

9
00:00:29,360 --> 00:00:32,610
any operating system should provide. However,

10
00:00:32,610 --> 00:00:35,050
an extensible operating system should not

11
00:00:35,050 --> 00:00:38,720
dictate how these services should be implemented.

12
00:00:38,720 --> 00:00:42,395
SPIN provides interface procedures for implementing

13
00:00:42,395 --> 00:00:44,720
these services in the operating system.

14
00:00:44,720 --> 00:00:48,020
Physical memory is a precious resource.

15
00:00:48,020 --> 00:00:50,990
We know that native operating systems such

16
00:00:50,990 --> 00:00:58,720
as Linux or Windows manages the physical memory that is available from the

17
00:00:58,720 --> 00:01:05,450
hardware. SPIN wants to allow extensions to manage physical memory allocated to

18
00:01:05,450 --> 00:01:10,970
them in whatever fashion they choose to. The macro-allocation of a bunch

19
00:01:10,970 --> 00:01:16,140
of physical memory to an extension, it's outside the scope of this discussion.

20
00:01:16,140 --> 00:01:21,528
But, assume that the allocation of a bunch of physical memory happens when an

21
00:01:21,528 --> 00:01:26,950
extension's charged up. The discussion in this tablet frame is to do with the

22
00:01:26,950 --> 00:01:30,630
management of the pre-allocated physical memory by

23
00:01:30,630 --> 00:01:33,890
the extension. The interface functions that I'm

24
00:01:33,890 --> 00:01:36,073
showing you here from memory management are

25
00:01:36,073 --> 00:01:40,430
simply header files provided by SPIN. For example,

26
00:01:40,430 --> 00:01:45,590
allocating a page frame. Deallocating a page frame. Reclaiming

27
00:01:45,590 --> 00:01:50,410
a page frame. Similarly, allocating a virtual page or

28
00:01:50,410 --> 00:01:56,000
deallocating a virtual page which might be used for dynamic memory allocation.

29
00:01:56,000 --> 00:02:01,050
Translating, has to do with creating and destroying address

30
00:02:01,050 --> 00:02:05,840
spaces, adding or removing mapping between virtual

31
00:02:05,840 --> 00:02:08,780
pages, and physical frames. All of those

32
00:02:08,780 --> 00:02:12,580
are interface functions, that are provided as header

33
00:02:12,580 --> 00:02:16,760
files by SPIN. And memory management, because of

34
00:02:16,760 --> 00:02:20,160
what we said earlier about overcommitment of memory.

35
00:02:20,160 --> 00:02:23,690
Not all of a processor's address space

36
00:02:23,690 --> 00:02:25,820
is going to be fitting in physical memory.

37
00:02:25,820 --> 00:02:28,640
So, there are event handlers, that are provided

38
00:02:28,640 --> 00:02:31,370
as part of the core service of SPIN

39
00:02:31,370 --> 00:02:36,280
for handling page fault, access fault, meaning, if you had

40
00:02:36,280 --> 00:02:40,820
a page that is write protected and if a process tries to write to it, that's an

41
00:02:40,820 --> 00:02:46,150
access violation. Or, if a process is trying to access a region of

42
00:02:46,150 --> 00:02:51,510
memory that it doesn't have access to, generating a bad

43
00:02:51,510 --> 00:02:56,970
address exception. All of these are interface functions that

44
00:02:56,970 --> 00:03:01,020
are defined as core services of memory

45
00:03:01,020 --> 00:03:04,290
management in the SPIN operation system. It

46
00:03:04,290 --> 00:03:06,760
is not saying anything about how these

47
00:03:06,760 --> 00:03:10,280
services are implemented, but it is giving you

48
00:03:10,280 --> 00:03:16,090
just a header file. The implementer of an extension has to write the actual

49
00:03:16,090 --> 00:03:18,590
code for these header functions and create

50
00:03:18,590 --> 00:03:22,100
a logical protection domain that corresponds to physical

51
00:03:22,100 --> 00:03:26,060
address management, virtual address management, translation

52
00:03:26,060 --> 00:03:29,210
management, and the handler functions for

53
00:03:29,210 --> 00:03:31,270
dealing with these different types of

54
00:03:31,270 --> 00:03:35,100
events. Once the logical protection domain is

55
00:03:35,100 --> 00:03:39,270
dynamically instantiated, it becomes an extension

56
00:03:39,270 --> 00:03:41,870
of SPIN, and after that there's

57
00:03:41,870 --> 00:03:44,920
no border crossing between a particular

58
00:03:44,920 --> 00:03:47,770
service that has been so instantiated and

59
00:03:47,770 --> 00:03:50,720
SPIN itself. And all of these

60
00:03:50,720 --> 00:03:54,530
functions are invoked automatically when the hardware

61
00:03:54,530 --> 00:03:59,220
events occur, corresponding to a page fault or access violation fault and so on.
