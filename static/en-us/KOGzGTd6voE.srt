1
00:00:00,590 --> 00:00:05,500
Recall our situation where we want to loop through all of

2
00:00:05,500 --> 00:00:10,930
the elements in all the instances of class B.

3
00:00:10,930 --> 00:00:13,290
And they're pointed to by instances of class A.

4
00:00:13,290 --> 00:00:16,960
What this means is we have to loop through all the A's in order to get to

5
00:00:16,960 --> 00:00:19,420
all of the B's and do whatever we're going to do with them.

6
00:00:19,420 --> 00:00:22,350
This approach if which is involves pointers in

7
00:00:22,350 --> 00:00:25,280
one direction only can be cumbersome and costly.

8
00:00:25,280 --> 00:00:30,065
Instead, you could implement the association between classes foo and bar by

9
00:00:30,065 --> 00:00:36,080
intros, by introducing a new class an association class that has two attributes.

10
00:00:37,250 --> 00:00:40,660
One is a name of or pointer to foo instance and

11
00:00:40,660 --> 00:00:43,230
the other is a pointer to the bar instance.

12
00:00:43,230 --> 00:00:48,730
That is, the instances are essentially a set of pairs.

13
00:00:48,730 --> 00:00:53,860
We have reified or made our association itself into an object.

14
00:00:53,860 --> 00:00:56,910
It's then an easy matter to link through all the possibilities, to loop through

15
00:00:56,910 --> 00:01:01,450
all the possibilities, because they're all instances of this association class.

16
00:01:01,450 --> 00:01:03,010
There is a cost associated with,

17
00:01:03,010 --> 00:01:06,970
with doing this, it, the cost takes the form of an extra step.

18
00:01:06,970 --> 00:01:12,260
If we want to go from a particular foo to a particular bar, instead of having a,

19
00:01:12,260 --> 00:01:17,450
a reference or a pointer directly to it, we have to go to the association

20
00:01:17,450 --> 00:01:22,250
object, look up that particular instance of the foo class,

21
00:01:22,250 --> 00:01:27,070
find the associated instance of the bar class and traverse in an extra step.
