1
00:00:02,450 --> 00:00:06,930
So this is the abstraction layer seen by the application that is giving this

2
00:00:06,930 --> 00:00:13,980
illusion of a global virtual memory. This layer is the DSM software

3
00:00:13,980 --> 00:00:18,740
implementation layer that implements this global

4
00:00:18,740 --> 00:00:22,040
virtual memory abstraction. In particular, this DSM

5
00:00:22,040 --> 00:00:24,750
software layer, which exists on every one

6
00:00:24,750 --> 00:00:27,750
of these processors, knows that the point

7
00:00:27,750 --> 00:00:31,060
of access to a page by a processor, who

8
00:00:31,060 --> 00:00:34,160
exactly to contact, as the owner of the page,

9
00:00:34,160 --> 00:00:36,500
to get the current copy of the page. For

10
00:00:36,500 --> 00:00:40,230
instance, let's say that there was a page fault on

11
00:00:40,230 --> 00:00:45,350
this processor one. For a particular portion of the

12
00:00:45,350 --> 00:00:48,170
global address space. That portion of the global address space

13
00:00:48,170 --> 00:00:50,680
is currently not resident here in the physical memory

14
00:00:50,680 --> 00:00:52,970
of processor one. So, there is a page fault over

15
00:00:52,970 --> 00:00:56,170
here and there is cooperation, as I mentioned earlier,

16
00:00:56,170 --> 00:01:00,520
between the operating system and the DSM. So, when

17
00:01:00,520 --> 00:01:02,700
the page fault happens, that page fault is going

18
00:01:02,700 --> 00:01:06,130
to be communicated by the operating system to the DSM

19
00:01:06,130 --> 00:01:09,080
software saying that here is the page fault, you

20
00:01:09,080 --> 00:01:11,610
handle it. What the DSM software is going to do

21
00:01:11,610 --> 00:01:15,470
is, it knows the owner of the page, and

22
00:01:15,470 --> 00:01:18,230
so it's going to contact the owner of the page.

23
00:01:18,230 --> 00:01:20,370
And ask the owner of the page to get the current

24
00:01:20,370 --> 00:01:22,750
copy of the page. So the current copy of the page

25
00:01:22,750 --> 00:01:26,720
resides over here. So the owner, either it itself has the

26
00:01:26,720 --> 00:01:31,120
current copy of the page or it knows which node currently has

27
00:01:31,120 --> 00:01:33,460
the current copy of the page, and so it's going to

28
00:01:33,460 --> 00:01:36,770
send the page over to the node that is requesting it. The

29
00:01:36,770 --> 00:01:39,330
current copy of the page is over here. It's going to

30
00:01:39,330 --> 00:01:43,860
come over to this guy, and recall what I said about ownership

31
00:01:43,860 --> 00:01:46,970
of the pages. The residency of this page doesn't

32
00:01:46,970 --> 00:01:49,930
necessarily mean that this is the owner of the page.

33
00:01:49,930 --> 00:01:52,240
The owner of this page could have been this

34
00:01:52,240 --> 00:01:56,200
node, so the DSM software would have contacted the owner.

35
00:01:56,200 --> 00:01:57,660
And the owner would have said, oh you know

36
00:01:57,660 --> 00:02:01,410
what. That particular place to cut and copy is on

37
00:02:01,410 --> 00:02:05,790
this node. So the DSM software would go to

38
00:02:05,790 --> 00:02:09,430
this note, and fetch this page, and put it into

39
00:02:09,430 --> 00:02:13,160
this processor. So that this processor is happy.

40
00:02:13,160 --> 00:02:15,300
So once the page has been brought in to

41
00:02:15,300 --> 00:02:19,220
the physical memory, then the DSN software contacts the

42
00:02:19,220 --> 00:02:23,130
virtual memory manager and says, I've completed now, processing

43
00:02:23,130 --> 00:02:26,190
the page fault, brought the page that is missing

44
00:02:26,190 --> 00:02:28,670
and put it into a particular location in the

45
00:02:28,670 --> 00:02:31,800
physical memory. Would you please update the page table

46
00:02:31,800 --> 00:02:35,340
for this guy, so that he can resume execution?

47
00:02:35,340 --> 00:02:38,320
Well, then the VM manager gets into action.

48
00:02:38,320 --> 00:02:41,800
And updates to page table for this thread

49
00:02:41,800 --> 00:02:45,860
to indicate that the faulty virtual page is

50
00:02:45,860 --> 00:02:48,380
now mapped to a physical page, and then

51
00:02:48,380 --> 00:02:51,460
the process or the thread can resume its

52
00:02:51,460 --> 00:02:54,760
execution. So this is a way coherence is

53
00:02:54,760 --> 00:02:57,310
going to be maintained by the DSM software. The

54
00:02:57,310 --> 00:03:01,260
cooperation between DSM software and the VM manager.

55
00:03:01,260 --> 00:03:06,490
And the coherence maintenance is happening at the level of individual pages. An

56
00:03:06,490 --> 00:03:11,038
early examples of systems that built software DSM include

57
00:03:11,038 --> 00:03:16,690
Ivy from Yale, Clouds from Georgia Tech

58
00:03:16,690 --> 00:03:21,190
Mirage from UPenn, and Munin from Rice. All of

59
00:03:21,190 --> 00:03:26,350
these are distributed shared memory systems and they all used coherence

60
00:03:26,350 --> 00:03:30,980
maintenance at the granularity of an individual page, and they

61
00:03:30,980 --> 00:03:35,870
used a protocol which is often referred to as a single writer protocol. That

62
00:03:35,870 --> 00:03:40,870
is, I mentioned that the directory associated with the portion

63
00:03:40,870 --> 00:03:46,260
of the virtual memory space managed by each one of these nodes

64
00:03:46,260 --> 00:03:51,350
and the directory has information as to who all are sharing a page at any point

65
00:03:51,350 --> 00:03:55,010
of time. Multiple readers can share a page

66
00:03:55,010 --> 00:03:58,900
at any point of time, but a single writer

67
00:03:58,900 --> 00:04:00,870
is only allowed to have the page at any

68
00:04:00,870 --> 00:04:03,242
point of time. So, if there is the writer

69
00:04:03,242 --> 00:04:06,894
for a particular page, let's say that loose page,

70
00:04:06,894 --> 00:04:09,799
which is now currently in the memory of two

71
00:04:09,799 --> 00:04:13,451
different processors, if this guy wants to write to

72
00:04:13,451 --> 00:04:16,522
this page, then he has to inform through the

73
00:04:16,522 --> 00:04:20,807
DSM software abstraction, inform the owner for this page.

74
00:04:20,807 --> 00:04:23,348
Let's say this guy is the owner for this

75
00:04:23,348 --> 00:04:25,812
page, that I want to write to this page

76
00:04:25,812 --> 00:04:28,969
and at that point the owner is going to invalidate

77
00:04:28,969 --> 00:04:31,510
all copies of that page that exist in the

78
00:04:31,510 --> 00:04:34,975
entire system, so that this guy has exclusive access

79
00:04:34,975 --> 00:04:38,055
to that page so that they can make modifications

80
00:04:38,055 --> 00:04:41,690
to it. So this is what is called single writer

81
00:04:41,690 --> 00:04:46,160
multiple reader protocol. Easy to implement. At the point of

82
00:04:46,160 --> 00:04:49,250
right to a page, what you do is, you go

83
00:04:49,250 --> 00:04:53,330
through the DSM software, contact the owner. And the owner

84
00:04:53,330 --> 00:04:55,730
says, I know who all have copies of the page, I'll

85
00:04:55,730 --> 00:04:58,760
invalidate all of them. Once it has invalidated all the

86
00:04:58,760 --> 00:05:01,780
copies, then the guy who wants to write to that

87
00:05:01,780 --> 00:05:04,040
page can go ahead and write to it, because that'll

88
00:05:04,040 --> 00:05:06,830
be the only copy. Now the problem with the single writer

89
00:05:06,830 --> 00:05:10,080
protocol is that there is potential for

90
00:05:10,080 --> 00:05:12,410
what is called fault sharing. We've talked

91
00:05:12,410 --> 00:05:14,160
about this already in the context of

92
00:05:14,160 --> 00:05:17,960
shared memory multiprocessors. Basically the idea of fault

93
00:05:17,960 --> 00:05:24,730
sharing, or the concept of fault sharing, is that data appears to be shared even

94
00:05:24,730 --> 00:05:27,800
though programmatically, they are not. Let's consider

95
00:05:27,800 --> 00:05:32,155
this page-based coherence maintenance. In the page-based coherence

96
00:05:32,155 --> 00:05:35,467
maintenance, the coherence maintenance that is done by

97
00:05:35,467 --> 00:05:38,503
the software, DSM software, is of the granularity

98
00:05:38,503 --> 00:05:40,730
of a single page. A page may be

99
00:05:40,730 --> 00:05:43,450
4K bytes or 8K bytes,depending on the architecture

100
00:05:43,450 --> 00:05:47,010
we're talking about. And within a page, lots

101
00:05:47,010 --> 00:05:50,396
of different data structures can actually fit. So,

102
00:05:50,396 --> 00:05:53,778
if the coherence maintenance is being done at

103
00:05:53,778 --> 00:05:57,160
the level of an individual page, then we're

104
00:05:57,160 --> 00:06:00,809
invalidating copies of the page in several nodes

105
00:06:00,809 --> 00:06:03,123
in order to allow one guy to make

106
00:06:03,123 --> 00:06:06,871
modifications to some portion of that page. And

107
00:06:06,871 --> 00:06:09,103
that can be very severe in a page based

108
00:06:09,103 --> 00:06:11,695
system due to the coarse granularity of the

109
00:06:11,695 --> 00:06:15,638
coherence information. So for example, this one page may

110
00:06:15,638 --> 00:06:19,456
contain ten different data structures, each of which

111
00:06:19,456 --> 00:06:22,213
is governed by a distinct lock. So far as

112
00:06:22,213 --> 00:06:26,180
the application programmer is concerned. But, even if I get

113
00:06:26,180 --> 00:06:29,720
a lock, which is for a particular data structure that

114
00:06:29,720 --> 00:06:32,770
happens to be in this page. And this guy has

115
00:06:32,770 --> 00:06:36,100
a lock for a different data structure which is also on

116
00:06:36,100 --> 00:06:38,862
the same page. When I get the lock that is

117
00:06:38,862 --> 00:06:41,810
going to manipulate a particular data structure in this page,

118
00:06:41,810 --> 00:06:44,021
and if I want to make modifications for it, I am

119
00:06:44,021 --> 00:06:47,310
going go and invalidate all the other copies. When he wants

120
00:06:47,310 --> 00:06:51,670
to make a change, he's going to come and invalidate my copy of the page. So

121
00:06:51,670 --> 00:06:55,000
the page can be ping-ponging between, between multiple

122
00:06:55,000 --> 00:06:58,730
processes. Even though they are modifying different portions

123
00:06:58,730 --> 00:07:03,750
of the same page, still the coherence granularity

124
00:07:03,750 --> 00:07:06,175
being a page, will result in this page

125
00:07:06,175 --> 00:07:08,750
shuttling back and forth between these two guys,

126
00:07:08,750 --> 00:07:12,620
even though the application program is perfectly well behaved

127
00:07:12,620 --> 00:07:16,030
in terms of using locks to govern

128
00:07:16,030 --> 00:07:19,845
access to different data structures. Unfortunately, all of

129
00:07:19,845 --> 00:07:22,110
those data structures happened to fit within

130
00:07:22,110 --> 00:07:25,510
the same page. Resulting in this fault sharing.

131
00:07:25,510 --> 00:07:29,110
So, page level granularity and single writer

132
00:07:29,110 --> 00:07:32,840
multiple reader protocol don't live happily together. They

133
00:07:32,840 --> 00:07:37,630
will lead to fault sharing. And they will lead to ping ponging of the pages,

134
00:07:37,630 --> 00:07:39,440
due to the fault sharing among the

135
00:07:39,440 --> 00:07:42,800
threads of the application across the entire network.
