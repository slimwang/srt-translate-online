1
00:00:00,210 --> 00:00:03,742
In this question, the number of triangles doesn't matter. Since the number of

2
00:00:03,742 --> 00:00:08,278
vertices lit and the number of pixels lit varies directly with the number of

3
00:00:08,278 --> 00:00:12,457
triangles. But it's a bit confusing to just think about five triangles. So I

4
00:00:12,457 --> 00:00:17,034
like to pick a big nice round number. Let's say 100 triangles. 100 triangles

5
00:00:17,034 --> 00:00:22,260
times 3 vertices per triangle gives 300 vertices. We know that each vertex's

6
00:00:22,260 --> 00:00:27,024
material calculation will be shared by 5 triangles. So that gives 300 vertices

7
00:00:27,024 --> 00:00:31,934
divided by 5 triangles that are sharing a vertex. And that gives 60 evals. In

8
00:00:31,934 --> 00:00:36,059
other words, 60 material calculations that are needed. For the fragment shader,

9
00:00:36,059 --> 00:00:42,128
where we're shading per pixel, there's no sharing. So 100 triangles times 60

10
00:00:42,128 --> 00:00:47,710
pixels per triangle gives 6,000 evals. In other words, 6,000 material

11
00:00:47,710 --> 00:00:54,739
calculations we need to do. 6,000 pixel evaluations versus 60 vertex evaluations

12
00:00:54,739 --> 00:01:00,294
gives a ratio of 100 to 1. As you can see it can be considerably more costly to

13
00:01:00,294 --> 00:01:05,065
evaluate per pixel than per vertex. Note that this doesn't mean that the program

14
00:01:05,065 --> 00:01:08,900
itself runs 100 times slower. There are mitigating factors and other parts of

15
00:01:08,900 --> 00:01:13,684
the pipeline can be the bottleneck. Which changes this ratio on practice.
