1
00:00:00,640 --> 00:00:04,200
To figure out why option C was
the best on the last quiz,

2
00:00:04,200 --> 00:00:08,420
let's review the actual syntax rules
in Jjava for defining a method.

3
00:00:08,420 --> 00:00:10,820
This is also known as
the method signature.

4
00:00:12,090 --> 00:00:13,460
This is the method signature for

5
00:00:13,460 --> 00:00:16,239
the calculate price method
that we saw earlier.

6
00:00:16,239 --> 00:00:20,100
You might be wondering why the order
of the words are a certain way.

7
00:00:20,100 --> 00:00:24,470
Well, they follow a specific format,
and it looks something like this.

8
00:00:24,470 --> 00:00:27,050
I know this looks really overwhelming,
but don't worry.

9
00:00:27,050 --> 00:00:29,040
We're going to go through each one,
one at at time.

10
00:00:30,550 --> 00:00:34,250
The first part in this method
signature is the word private.

11
00:00:34,250 --> 00:00:36,400
This is known as the JAVA
access modifier.

12
00:00:37,410 --> 00:00:41,400
It determines who has access to
this method, calculatePrice.

13
00:00:41,400 --> 00:00:46,290
The most common access modifiers that
you'll see are public or private.

14
00:00:46,290 --> 00:00:51,010
This method is marked as private,
that means that calculatePrice

15
00:00:51,010 --> 00:00:55,590
can only be called within other
methods of the main activity.

16
00:00:55,590 --> 00:00:56,830
Outside of the main activity,

17
00:00:56,830 --> 00:01:00,750
like another activities,
you won't be able to call this method.

18
00:01:00,750 --> 00:01:03,340
It's private to the main activity.

19
00:01:03,340 --> 00:01:04,180
On the other hand,

20
00:01:04,180 --> 00:01:09,100
if you mark this as a public method,
then anyone could call this method,

21
00:01:09,100 --> 00:01:12,560
whether you're inside the main activity,
or you're in other activities.

22
00:01:13,710 --> 00:01:15,120
It's kind of like this analogy.

23
00:01:15,120 --> 00:01:18,530
If you're celebrity and public,
then everyone knows about you.

24
00:01:18,530 --> 00:01:19,730
If your private and

25
00:01:19,730 --> 00:01:24,420
you live inside your house all the time,
then only a couple people know you.

26
00:01:24,420 --> 00:01:27,930
So for the calculate price method,
we are going to keep it private, so

27
00:01:27,930 --> 00:01:30,440
it is only used within
the main activity.

28
00:01:30,440 --> 00:01:33,770
Next we have "int" which
is the return data type.

29
00:01:33,770 --> 00:01:35,560
Do you remember our
diagram from earlier?

30
00:01:35,560 --> 00:01:38,360
Where we said that when you call
a method you pass it inputs and

31
00:01:38,360 --> 00:01:39,910
you get an output back?

32
00:01:39,910 --> 00:01:44,140
Well the return data type is a type of
data that is returned in the output.

33
00:01:44,140 --> 00:01:48,020
And the data types we've learned
about so far are Int and

34
00:01:48,020 --> 00:01:49,730
String from the last lesson.

35
00:01:49,730 --> 00:01:52,410
This can also return
an object data type, and

36
00:01:52,410 --> 00:01:54,449
we'll learn more about
objects later in the lesson.

37
00:01:55,700 --> 00:01:58,150
In our case, this calculatePrice method

38
00:01:58,150 --> 00:02:02,030
is returning the total price of
the order, which is an integer.

39
00:02:02,030 --> 00:02:06,540
In a social media app, if I had a method
to get the number of friends I have on

40
00:02:06,540 --> 00:02:11,130
Facebook, it could return an integer,
which is the number of friends.

41
00:02:11,130 --> 00:02:15,390
Next we have the method name,
which is calculatePrice in this case.

42
00:02:15,390 --> 00:02:19,730
Just like how we can refer to variables
with their name, we can refer to methods

43
00:02:19,730 --> 00:02:23,790
with their name so that we can execute
the instructions in this method.

44
00:02:23,790 --> 00:02:28,120
In the same documentation about defining
method, we can scroll to the bottom and

45
00:02:28,120 --> 00:02:30,690
see a section about naming methods.

46
00:02:30,690 --> 00:02:34,450
You can read about this in more detail
later, but basically it says that method

47
00:02:34,450 --> 00:02:39,030
names should begin with a verb like
run or get, or compare or set.

48
00:02:39,030 --> 00:02:40,880
It starts with a lowercase letter and

49
00:02:40,880 --> 00:02:43,360
then use camel case if
there's multiple words.

50
00:02:43,360 --> 00:02:46,400
After the method name we
have the list of inputs

51
00:02:46,400 --> 00:02:50,350
which are denoted within the opening and
closing parenthesis.

52
00:02:50,350 --> 00:02:52,670
You can have as many inputs as you want.

53
00:02:52,670 --> 00:02:57,010
If you don't want any inputs, you just
have an empty set of parentheses.

54
00:02:57,010 --> 00:02:59,150
If you have one input,
it looks like this.

55
00:02:59,150 --> 00:03:00,730
If you have multiple inputs,

56
00:03:00,730 --> 00:03:03,890
you just separate them with
commas in between each input.

57
00:03:03,890 --> 00:03:07,110
Let's look at the case
where we have one input,

58
00:03:07,110 --> 00:03:10,070
which is also known as
an input parameter.

59
00:03:10,070 --> 00:03:14,060
We define an input parameter by
specifying its data type and

60
00:03:14,060 --> 00:03:16,460
a variable name that we choose for it.

61
00:03:16,460 --> 00:03:18,170
So from the diagram of inputs and

62
00:03:18,170 --> 00:03:22,370
output, this is going to be
the first input to the method.

63
00:03:23,560 --> 00:03:28,030
Within this method, then you can
refer to the quantity variable.

64
00:03:28,030 --> 00:03:30,190
And it's just like any other variable,

65
00:03:30,190 --> 00:03:32,930
where it already has
a value inside of it.

66
00:03:32,930 --> 00:03:36,990
The value comes from when you
initially call the method and

67
00:03:36,990 --> 00:03:38,570
you pass that input in.

68
00:03:40,030 --> 00:03:43,850
If we want to modify the method
signature to add a second input param,

69
00:03:43,850 --> 00:03:47,290
we have to specify the data type and
the variable name for

70
00:03:47,290 --> 00:03:48,980
that second input param.

71
00:03:48,980 --> 00:03:52,200
Then within this method we
can refer to the quantity or

72
00:03:52,200 --> 00:03:55,940
price of one cup variables just
like the regular variables.

73
00:03:55,940 --> 00:03:59,220
When you call this method
you have to remember to pass

74
00:03:59,220 --> 00:04:02,790
the right number of inputs to
the method that it's expecting, and

75
00:04:02,790 --> 00:04:06,980
the inputs must be of the right
data type and in the right order.

76
00:04:06,980 --> 00:04:08,380
You can't flip the order of these.

77
00:04:08,380 --> 00:04:11,650
Otherwise, the method is going
to interpret them incorrectly.

78
00:04:11,650 --> 00:04:15,210
After you list out your inputs,
add a closing parentheses and

79
00:04:15,210 --> 00:04:16,980
then an opening brace.

80
00:04:16,980 --> 00:04:20,640
This starts the list of all
the instructions within your method.

81
00:04:20,640 --> 00:04:21,660
After all of that,

82
00:04:21,660 --> 00:04:25,270
then just add a closing brace,
to mark the end of your method.

83
00:04:25,270 --> 00:04:27,060
Going back to our documentation,

84
00:04:27,060 --> 00:04:30,470
now this method declaration
will make a lot more sense.

85
00:04:30,470 --> 00:04:32,760
First we have the access modifier.

86
00:04:32,760 --> 00:04:35,120
Then we have a return data type.

87
00:04:35,120 --> 00:04:39,100
The method name,
followed by the list of all the inputs.

88
00:04:39,100 --> 00:04:42,760
In this case there are four
different input parameters.

89
00:04:42,760 --> 00:04:46,260
And they each have a data type and
a variable name.

90
00:04:46,260 --> 00:04:48,720
And then we have an opening brace.

91
00:04:48,720 --> 00:04:50,610
The list of all
the instructions inside of it.

92
00:04:50,610 --> 00:04:51,990
And then a closing brace.

93
00:04:53,100 --> 00:04:54,480
And this is a method declaration.

94
00:04:55,640 --> 00:04:59,060
In this quiz you'll have a chance to
practice identifying the different parts

95
00:04:59,060 --> 00:05:00,850
of method declaration.

96
00:05:00,850 --> 00:05:04,120
We're going to provide some code
to you in instructor notes.

97
00:05:04,120 --> 00:05:08,000
The code contains a bunch of methods
that could appear in any app.

98
00:05:08,000 --> 00:05:11,010
For each case,
can you tell me what is the method name?

99
00:05:11,010 --> 00:05:12,800
The list of input parameters?

100
00:05:12,800 --> 00:05:14,010
And the return data type.

101
00:05:15,030 --> 00:05:16,130
Let's do the sample together.

102
00:05:17,910 --> 00:05:19,710
Here's an example method.

103
00:05:19,710 --> 00:05:23,520
The goal is to create a custom greeting
message based on the given name.

104
00:05:23,520 --> 00:05:27,270
The return value is going to be
a greeting in the form of some text.

105
00:05:27,270 --> 00:05:29,580
Now let's ignore the comment for now.

106
00:05:29,580 --> 00:05:32,570
First we have the method name,
which is in camelCase here, and

107
00:05:32,570 --> 00:05:35,130
it says createCustonGreeting.

108
00:05:35,130 --> 00:05:37,650
Next we have the list of inputs.

109
00:05:37,650 --> 00:05:39,780
This is the first input parameter.

110
00:05:39,780 --> 00:05:42,490
The data type is String and
the variable name is firstName.

111
00:05:43,520 --> 00:05:45,570
Next we have the second input parameter.

112
00:05:45,570 --> 00:05:48,390
This is the data type, and
this is the variable name.

113
00:05:48,390 --> 00:05:51,580
And the two inputs are separated
by a single comma, and

114
00:05:51,580 --> 00:05:55,290
they're enclosed within the opening and
closing parenthesis.

115
00:05:55,290 --> 00:05:57,350
Then we have the output here.

116
00:05:57,350 --> 00:06:00,605
The data type of the return
value is String,

117
00:06:00,605 --> 00:06:03,685
because we want to return a greeting,
which is a string,

118
00:06:03,685 --> 00:06:07,365
and this is what it looks
like filled into the table.

119
00:06:08,725 --> 00:06:11,245
Now, go ahead and fill in the blanks for
the remaining three methods.
