1
00:00:00,170 --> 00:00:04,370
The solution to this is to provide some kind of northbound API, which is a

2
00:00:04,370 --> 00:00:07,580
programming interface that allows applications and other kinds

3
00:00:07,580 --> 00:00:10,890
of orchestration systems to program the network. So

4
00:00:10,890 --> 00:00:13,170
where we have at the low-level the

5
00:00:13,170 --> 00:00:17,690
controller updating state in the switch using OpenFlow

6
00:00:17,690 --> 00:00:21,090
flow modification rules we may have applications or

7
00:00:21,090 --> 00:00:25,460
orchestration systems that need to perform more sophisticated

8
00:00:25,460 --> 00:00:29,310
tasks, such as path computation, loop avoidance,

9
00:00:29,310 --> 00:00:31,850
and so forth. But we need a higher-level

10
00:00:31,850 --> 00:00:35,390
programming interface that allows these applications to talk

11
00:00:35,390 --> 00:00:38,498
to the controller so the application isn't writing

12
00:00:38,498 --> 00:00:42,880
low-level OpenFlow rules, but rather is expressing what

13
00:00:42,880 --> 00:00:44,908
it wants to have happen in terms of

14
00:00:44,908 --> 00:00:48,130
higher-level behaviors without regard to such things as

15
00:00:48,130 --> 00:00:50,690
whether or not the rules are being installed

16
00:00:50,690 --> 00:00:53,740
in a consistent, and correct fashion. Various people

17
00:00:53,740 --> 00:00:56,940
may write these applications including network operators, service

18
00:00:56,940 --> 00:00:59,920
providers, researchers, and really anyone who wants to

19
00:00:59,920 --> 00:01:03,690
develop capabilities on top of OpenFlow. The benefits

20
00:01:03,690 --> 00:01:07,140
of such a northbound API are vendor independence,

21
00:01:07,140 --> 00:01:09,490
as well as the ability to quickly modify

22
00:01:09,490 --> 00:01:13,570
or customize control through various popular programming languages.

23
00:01:13,570 --> 00:01:15,730
The idea is that these applications might be

24
00:01:15,730 --> 00:01:18,090
written in high-level programming languages, such

25
00:01:18,090 --> 00:01:21,120
as Python, and wouldn't actually have to

26
00:01:21,120 --> 00:01:24,370
perform low-level switch modifications, but rather could

27
00:01:24,370 --> 00:01:27,968
express policies in terms of much higher-level

28
00:01:27,968 --> 00:01:32,210
abstractions. Examples of such applications include the

29
00:01:32,210 --> 00:01:35,130
implementation of a large virtual switch abstraction,

30
00:01:35,130 --> 00:01:38,370
security applications, and services that may need

31
00:01:38,370 --> 00:01:41,840
to integrate traffic processing with middle boxes.

32
00:01:41,840 --> 00:01:43,770
This programmatic interface is called the

33
00:01:43,770 --> 00:01:46,430
northbound API and currently there's no

34
00:01:46,430 --> 00:01:51,400
standard for the northbound API, as there is for the southbound API

35
00:01:51,400 --> 00:01:55,470
in OpenFlow. But we'll look at various APIs in programming languages that

36
00:01:55,470 --> 00:01:57,900
each compile to OpenFlow rules that

37
00:01:57,900 --> 00:02:00,090
are installed on switches across the network.
