1
00:00:00,430 --> 00:00:02,969
Let's go back to the main
activity of our Just Java app.

2
00:00:02,969 --> 00:00:06,190
Specifically we were looking at
the display message method and

3
00:00:06,190 --> 00:00:08,570
trying to figure out everything
that was going on in here.

4
00:00:08,570 --> 00:00:13,870
Even though the findViewById method is
not declared within this class we know

5
00:00:13,870 --> 00:00:18,740
now that it's actually defined in the
super class in the AppCompatActivity.

6
00:00:18,740 --> 00:00:20,440
Same for setContentView.

7
00:00:20,440 --> 00:00:23,820
This is defined within
the AppCompatActivity class.

8
00:00:23,820 --> 00:00:26,710
But what exactly is happening
in this method, and

9
00:00:26,710 --> 00:00:29,300
why do we need to pass in a resource ID?

10
00:00:29,300 --> 00:00:31,930
Why do we have extra parentheses here?

11
00:00:31,930 --> 00:00:34,410
To answer that question, I'm going to
summarize everything we've learned so

12
00:00:34,410 --> 00:00:37,720
far and
lead you to why this code exists here.

13
00:00:38,870 --> 00:00:40,350
Do you remember this diagram?

14
00:00:40,350 --> 00:00:44,910
When you click on the app icon on the
device it opens up the main activity.

15
00:00:44,910 --> 00:00:48,650
Within our code the onCreate method
of the main activity gets called by

16
00:00:48,650 --> 00:00:49,770
the system.

17
00:00:49,770 --> 00:00:53,220
Within this method we have
a method called to setContentView

18
00:00:53,220 --> 00:00:55,340
with the resource layout ID.

19
00:00:55,340 --> 00:00:59,710
In an earlier exercise we passed in
a single text view for set content view.

20
00:00:59,710 --> 00:01:01,950
But we want more than one view for
our app.

21
00:01:01,950 --> 00:01:04,650
So we pass in a layout resource ID.

22
00:01:04,650 --> 00:01:06,980
This maps to an XML file.

23
00:01:06,980 --> 00:01:09,560
Once we set the content view,
the activity goes and

24
00:01:09,560 --> 00:01:13,200
finds the XML layout file and
then reads through each line.

25
00:01:13,200 --> 00:01:18,140
For each view, it inflates, or
creates, a Java object for it.

26
00:01:18,140 --> 00:01:19,860
It goes through the XML file, and

27
00:01:19,860 --> 00:01:23,040
then builds up this whole
hierarchy of Java objects.

28
00:01:23,040 --> 00:01:27,090
When it's inflating each of these views,
it's actually calling the constructor,

29
00:01:27,090 --> 00:01:31,600
NewTextView or NewLinearLayout, and then
it's passing in all these attributes

30
00:01:31,600 --> 00:01:34,760
into the Java object, so
that it can be set up properly.

31
00:01:34,760 --> 00:01:38,700
Notice that we didn't have to write code
for NewTextView or NewLinearLayout, and

32
00:01:38,700 --> 00:01:40,650
to set the font size.

33
00:01:40,650 --> 00:01:44,540
All of it was handled by the inflation
process of the activity.

34
00:01:44,540 --> 00:01:48,290
To interact with these views while the
app is running and to change them, for

35
00:01:48,290 --> 00:01:49,830
example, to change the text or

36
00:01:49,830 --> 00:01:54,480
to change the buttons,
then we need to find these Java objects.

37
00:01:54,480 --> 00:01:58,560
Once we find them, we can store them
as variables in the main activity.

38
00:01:58,560 --> 00:02:01,360
Remember, we're not creating
new TextViews from scratch,

39
00:02:01,360 --> 00:02:04,310
we're just finding the existing
ones in this view hierarchy.

40
00:02:06,060 --> 00:02:08,639
These are the variables we've used so
far in the main activity.

41
00:02:08,639 --> 00:02:13,160
We have a variable for quantity,
price, and price message.

42
00:02:13,160 --> 00:02:15,830
This is a mix of local and
global variables.

43
00:02:15,830 --> 00:02:19,520
To interact with the views in the view
hierarchy we should create variables

44
00:02:19,520 --> 00:02:21,149
that reference these specific views.

45
00:02:22,500 --> 00:02:25,765
For example, we can create a variable
called quantity text view,

46
00:02:25,765 --> 00:02:28,580
that would refer to this TextView here.

47
00:02:28,580 --> 00:02:31,340
If you click on the plus or
minus buttons in the UI,

48
00:02:31,340 --> 00:02:34,340
then you can change the TextView
text to show a different number.

49
00:02:36,220 --> 00:02:39,340
We can also have a variable
called orderSummaryTextView

50
00:02:39,340 --> 00:02:41,730
that points to this TextView.

51
00:02:41,730 --> 00:02:44,590
When you click on the order button
then the orderSummaryTextView

52
00:02:44,590 --> 00:02:47,660
will change its text to
show the new order summary.

53
00:02:47,660 --> 00:02:51,680
So you can see how having variables
that point to some of these views would

54
00:02:51,680 --> 00:02:55,440
be useful for
changing the UI when the app is running.

55
00:02:55,440 --> 00:02:59,430
But how do we make the connection
between this variable here

56
00:02:59,430 --> 00:03:00,790
to this TextView?

57
00:03:00,790 --> 00:03:03,780
And how do we make the connection
between orderSummaryTextView, here, and

58
00:03:03,780 --> 00:03:04,495
this TextView?

59
00:03:06,250 --> 00:03:08,139
Back in the layout XML file,

60
00:03:08,139 --> 00:03:11,699
remember that we assigned
view IDs to certain views?

61
00:03:12,953 --> 00:03:17,400
For this TextView, we gave it
a view ID of quantity.text.view.

62
00:03:17,400 --> 00:03:21,340
For this view we gave it an ID
order.summary.text.view.

63
00:03:21,340 --> 00:03:24,240
It's optional to assign IDs to views and

64
00:03:24,240 --> 00:03:28,760
you only should assign a view ID if
you need to refer to that view later.

65
00:03:28,760 --> 00:03:33,180
For example you can assign view IDs to
everything, but that's unnecessary.

66
00:03:33,180 --> 00:03:37,470
We only really need to refer to these
two views later in our Java code.

67
00:03:37,470 --> 00:03:39,860
So let's just assign
IDs to these two views.

68
00:03:40,880 --> 00:03:43,900
Okay, we've established
that views have view IDs so

69
00:03:43,900 --> 00:03:46,700
that we can refer to them
later in the Java code.

70
00:03:46,700 --> 00:03:51,350
We also established that we want
variables that point to these views so

71
00:03:51,350 --> 00:03:53,740
that we can manipulate these views.

72
00:03:53,740 --> 00:03:57,680
But we still don't exactly know
how to make the connection between

73
00:03:57,680 --> 00:04:01,160
this variable and
this specific Java object.

74
00:04:01,160 --> 00:04:04,700
And same for this variable and
this Java object.

75
00:04:04,700 --> 00:04:08,820
In the AppCompatActivity class,
I want to show you a specific method.

76
00:04:08,820 --> 00:04:12,560
It's called findViewById and
it takes as input a resource ID.

77
00:04:13,810 --> 00:04:16,290
The findViewById method

78
00:04:16,290 --> 00:04:21,220
finds a view that corresponds with
the ID that is passed as an input.

79
00:04:21,220 --> 00:04:23,790
And the activity searches for this view

80
00:04:23,790 --> 00:04:28,890
in the view hierarchy from the XML that
was processed in the onCreate method.

81
00:04:28,890 --> 00:04:30,560
So like I was mentioning earlier,

82
00:04:30,560 --> 00:04:34,350
the activity onCreate method
sets up a view hierarchy and

83
00:04:34,350 --> 00:04:39,405
then the findViewByID method goes and
finds a view within that view hierarchy.

84
00:04:39,405 --> 00:04:43,615
The return value of this method
is an object of type view.

85
00:04:43,615 --> 00:04:47,415
This left hand column shows the return
value for all of these methods.

86
00:04:47,415 --> 00:04:51,815
This means that within our activity
code we can call findViewById,

87
00:04:51,815 --> 00:04:56,670
pass in the resource ID of the view
that we want, and then it will return

88
00:04:56,670 --> 00:04:59,980
a view object and then we can store
that as a variable within the activity.

89
00:05:02,170 --> 00:05:04,300
The MainActivity Java code
would look like this.

90
00:05:05,360 --> 00:05:07,230
We can call findViewById and

91
00:05:07,230 --> 00:05:12,140
then pass in as an input the resource
ID of the view that we want.

92
00:05:12,140 --> 00:05:15,050
We gave this TextView an ID
of order.summary.text.view.

93
00:05:15,050 --> 00:05:19,370
So here we reference it as
R.id.order_summary_text_view.

94
00:05:19,370 --> 00:05:23,490
This method will go and traverse the
whole view hierarchy and then look for

95
00:05:23,490 --> 00:05:24,930
the view with this ID.

96
00:05:26,110 --> 00:05:31,030
Then it will return this Java object
as a return value of this method.

97
00:05:31,030 --> 00:05:34,790
We can store the return value into
this variable on the left-hand side,

98
00:05:34,790 --> 00:05:39,290
called orderSummaryTextView, and
this is a variable of type View.

99
00:05:39,290 --> 00:05:42,610
So, this returns a view and
we store it inside a view variable.

100
00:05:42,610 --> 00:05:47,280
Later in the MainActivity, we can also
call findViewById and then pass in this

101
00:05:47,280 --> 00:05:53,120
resource ID, R.id.quantity_text_view,
which refers to this TextView here.

102
00:05:53,120 --> 00:05:55,610
This is the TextView in
the quantity picker.

103
00:05:55,610 --> 00:05:58,847
When this is called the activity will
search through the view hierarchy and

104
00:05:58,847 --> 00:06:01,460
then try to find the view with this ID.

105
00:06:01,460 --> 00:06:03,265
Then it will return this view and

106
00:06:03,265 --> 00:06:07,190
then we can store that in a variable
called quantity_text_view.

107
00:06:07,190 --> 00:06:09,490
This variable also has
a data type of View.

108
00:06:10,490 --> 00:06:13,440
This explains how you can
have quantityTextView and

109
00:06:13,440 --> 00:06:17,190
orderSummaryTextView variables
within the MainActivity and that

110
00:06:17,190 --> 00:06:20,800
these variables can connect to these
Java objects in the view hierarchy.

111
00:06:20,800 --> 00:06:21,396
By the way,

112
00:06:21,396 --> 00:06:25,460
I listed the data types here of each of
these variables in the left-hand column.

113
00:06:26,690 --> 00:06:29,750
So these two variables have
a type View as declared here.
