1
00:00:00,400 --> 00:00:03,570
So we have already seen
that a multiprocessor

2
00:00:03,570 --> 00:00:06,720
can easily win in performance nowadays,

3
00:00:06,720 --> 00:00:10,580
assuming that you have a program
that can use multiple cores.

4
00:00:10,580 --> 00:00:13,600
So there are some
disadvantages to going to

5
00:00:13,600 --> 00:00:16,870
multiprocessors from
single core processors.

6
00:00:16,870 --> 00:00:22,250
One is that the so-called sequential or
single-threaded code is easier

7
00:00:22,250 --> 00:00:27,810
to develop for programmers, and
actually it's a lot easier to develop.

8
00:00:27,810 --> 00:00:31,370
So there is significant
cost involved in making

9
00:00:31,370 --> 00:00:35,570
an application multithreaded where
originally it was single-threaded.

10
00:00:35,570 --> 00:00:41,310
Even when you do write a parallel
application you will have some bugs.

11
00:00:41,310 --> 00:00:46,920
The debugging of parallel code is much
more difficult than sequential code,

12
00:00:46,920 --> 00:00:50,900
and even if you have a program
that works correctly and

13
00:00:50,900 --> 00:00:55,350
uses a lot of threads,
chances are that it will still be

14
00:00:55,350 --> 00:00:59,140
very hard to get what is
called performance scaling.

15
00:00:59,140 --> 00:01:02,630
And performance scaling is
a property of the program that,

16
00:01:02,630 --> 00:01:08,270
as we increase the number of cores,
if its overall performance

17
00:01:08,270 --> 00:01:11,805
keeps improving,
this will be ideal performance scaling.

18
00:01:11,805 --> 00:01:14,890
You'll get more performance in
proportion to the number of

19
00:01:14,890 --> 00:01:16,450
cores you are given.

20
00:01:16,450 --> 00:01:20,390
Unfortunately, most programs, when you
write them, do something like this,

21
00:01:20,390 --> 00:01:22,780
they scale for while and
then stop scaling and

22
00:01:22,780 --> 00:01:27,150
eventually you stop getting more
performance from the number of cores.

23
00:01:27,150 --> 00:01:29,930
You can spend a lot of time
improving this program and

24
00:01:29,930 --> 00:01:34,210
get something like this, where it
scales up to some larger number of

25
00:01:34,210 --> 00:01:39,470
cores reasonably well, but
each of these increments in scaling

26
00:01:39,470 --> 00:01:43,810
is going to result in a lot of work for
you to achieve it.

27
00:01:43,810 --> 00:01:49,460
And very, very few programs achieve
good scaling to a huge number of cores,

28
00:01:49,460 --> 00:01:52,190
and those that do usually
took years to develop.
