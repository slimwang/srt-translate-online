1
00:00:00,420 --> 00:00:02,790
You've just learned how to
protect yourself from syntax and

2
00:00:02,790 --> 00:00:04,230
coding style issues.

3
00:00:04,230 --> 00:00:07,520
But as you know, this doesn't ensure
your code does what it's supposed to do.

4
00:00:08,540 --> 00:00:12,910
In order to test the functionality of
your code, you should create unit tests.

5
00:00:12,910 --> 00:00:16,870
Unit tests are essentially JavaScript
functions that pragmatically test an API

6
00:00:16,870 --> 00:00:18,630
or aspect of your project.

7
00:00:18,630 --> 00:00:20,020
And if this topic is new to you,

8
00:00:20,020 --> 00:00:22,845
I encourage you to check out the Java
Script testing course here at Udacity.

9
00:00:24,130 --> 00:00:25,640
For the purpose of this course,

10
00:00:25,640 --> 00:00:28,750
we just assume that you know
the basics over learned in layout.

11
00:00:28,750 --> 00:00:31,650
And thus we provided a sample
test suit as part of our sub lab.

12
00:00:33,180 --> 00:00:35,980
Unit test, like Linton,
are here to prevent mistakes.

13
00:00:37,050 --> 00:00:39,070
Wouldn't it be cool if you
could automate running them

14
00:00:39,070 --> 00:00:41,290
just like everything else was set up so
far with our built.

15
00:00:42,700 --> 00:00:44,770
Well there's one issue with that.

16
00:00:44,770 --> 00:00:48,710
The unit test for your front end only
makes sense if they run in a browser.

17
00:00:48,710 --> 00:00:52,720
Thus, running them from the terminal
environment won't do any good.

18
00:00:52,720 --> 00:00:55,500
But this doesn't mean it's impossible,
it's just slightly more tricky.

19
00:00:56,620 --> 00:00:57,360
Here's how it works.
