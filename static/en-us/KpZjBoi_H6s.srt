1
00:00:00,540 --> 00:00:03,780
There's one more refinement to
the algorithm that I can't resist, and

2
00:00:03,780 --> 00:00:05,370
that's due to Dinic.

3
00:00:05,370 --> 00:00:10,020
He actually published his algorithm in
1970, two years before Edmonds-Karp.

4
00:00:10,020 --> 00:00:13,090
His key insight is that the work
of computing the shortest path

5
00:00:13,090 --> 00:00:17,610
can be recycled so that a full
recomputation only needs to happen when

6
00:00:17,610 --> 00:00:22,110
the shortest path distance changes,
not for every augmenting path.

7
00:00:22,110 --> 00:00:26,190
As with all augmenting path strategies,
we start with an initial flow of 0.

8
00:00:26,190 --> 00:00:28,300
Then we repeat the following.

9
00:00:28,300 --> 00:00:31,860
We build the level graph from
the residual flow network, and

10
00:00:31,860 --> 00:00:35,420
let k be the shortest
path length from s to t.

11
00:00:35,420 --> 00:00:40,030
Then, while there's a path from source
to sink in the level graph that has

12
00:00:40,030 --> 00:00:44,730
length k, we will augment
the flow along that path and

13
00:00:44,730 --> 00:00:47,640
then update the residual capacities.

14
00:00:47,640 --> 00:00:53,530
And we repeat this until there are no
more s-t paths in the residual network.

15
00:00:53,530 --> 00:00:56,050
And finally we just return the flow.

16
00:00:56,050 --> 00:00:57,100
Turning to the analysis,

17
00:00:57,100 --> 00:00:59,940
we will call one iteration
of this outer loop a phase.

18
00:00:59,940 --> 00:01:03,380
And we will be able to argue that
each phase increases the length

19
00:01:03,380 --> 00:01:07,310
of the shortest s-t path in
the residual network by one.

20
00:01:07,310 --> 00:01:09,940
The principle here is the same as for
Edmonds-Karp.

21
00:01:09,940 --> 00:01:12,770
Augmenting by a shortest
path flow doesn't create

22
00:01:12,770 --> 00:01:14,940
a shorter augmenting flow.

23
00:01:14,940 --> 00:01:18,100
Hence, once we've exhausted
all paths of a given length,

24
00:01:18,100 --> 00:01:21,450
the next shortest path
must be one edge longer.

25
00:01:21,450 --> 00:01:25,080
Within a phase, the level graph is
built by breadth-first search, so

26
00:01:25,080 --> 00:01:27,550
that only costs order E time.

27
00:01:27,550 --> 00:01:32,490
The hardest part of the argument will
be that this loop altogether takes only

28
00:01:32,490 --> 00:01:34,160
E times V time.

29
00:01:34,160 --> 00:01:35,650
We'll see this argument in a second.

30
00:01:35,650 --> 00:01:41,380
Altogether, we will show that Dinic's
algorithm takes E times V squared time,

31
00:01:41,380 --> 00:01:46,544
which is an improvement over the E
squared V time of Edmonds-Karp.
