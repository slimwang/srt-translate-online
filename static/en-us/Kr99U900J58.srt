1
00:00:00,580 --> 00:00:04,280
Let's look at the solution to the second part of this quiz,

2
00:00:05,320 --> 00:00:09,310
which is about figuring out, when do these two instructions issue dispatch and

3
00:00:09,310 --> 00:00:13,750
write results. We first have to figure out when the add here will issue.

4
00:00:15,080 --> 00:00:19,340
Normally, it would issue in cycle five, assuming that the reservation station is

5
00:00:19,340 --> 00:00:25,170
available. Let's check whether a reservation station is available in cycle five.

6
00:00:26,390 --> 00:00:29,670
At this time we have already issued two ADDs, so

7
00:00:29,670 --> 00:00:33,990
we can occupy both of the reservation stations. So one is available here,

8
00:00:33,990 --> 00:00:39,920
only if one of these two ADDs frees our reservation station before a cycle five.

9
00:00:41,510 --> 00:00:44,940
So reservation station is available only if one of these two frees its

10
00:00:44,940 --> 00:00:49,800
reservation station before cycle five. Note that our reservation station needs

11
00:00:49,800 --> 00:00:54,580
to be freed a cycle earlier than when we allocate it, so if we are going to

12
00:00:54,580 --> 00:00:59,040
use it in cycle five, it needs to be freed in cycle four. Unfortunately,

13
00:00:59,040 --> 00:01:03,980
these two adds do not release their reservation stations until cycles 10 and 12.

14
00:01:03,980 --> 00:01:09,630
The first one that becomes available will be freed in cycle ten.

15
00:01:09,630 --> 00:01:15,040
It cannot be allocated to this add immediately. So

16
00:01:15,040 --> 00:01:20,130
this add can only issue in cycle 11 because it needs this reservation station.

17
00:01:21,690 --> 00:01:27,570
Once this add issues, it might dispatch in cycle 12, assuming

18
00:01:27,570 --> 00:01:33,360
that it has no dependencies. And indeed, it doesn't. So it issues in cycle 12,

19
00:01:33,360 --> 00:01:40,300
and then executes for one cycle, and broadcasts its result in cycle 13.

20
00:01:40,300 --> 00:01:44,350
The next add here will issue in cycle 12,

21
00:01:44,350 --> 00:01:48,950
because issue needs to be done in order. So if this one issues in cycle 11,

22
00:01:48,950 --> 00:01:51,650
the next add in the program order will not be considered for

23
00:01:51,650 --> 00:01:55,730
issuing until cycle 12. So we will try cycle 12, but

24
00:01:55,730 --> 00:02:00,870
we have to check whether a reservation station is available. This add by then

25
00:02:00,870 --> 00:02:05,110
has freed the reservation station but these two are still holding onto theirs.

26
00:02:05,110 --> 00:02:10,280
Note that this add here is freeing its reservation station in cycle 12, but

27
00:02:10,280 --> 00:02:14,850
it cannot be allocated to a new instruction in the same cycle. So

28
00:02:14,850 --> 00:02:19,980
this add here actually issues in cycle 13, and then it doesn't wait for

29
00:02:19,980 --> 00:02:24,920
anything because F3 and F4 are not produced by previous instructions. So

30
00:02:24,920 --> 00:02:30,784
it will dispatch in cycle 14 and finally write it's result in cycle 15.
