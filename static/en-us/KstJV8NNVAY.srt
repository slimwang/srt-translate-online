1
00:00:00,240 --> 00:00:04,019
Now that you've seen user input, let's turn to another topic, formatted output.

2
00:00:04,019 --> 00:00:07,160
Let me show you why we need to know about it. Let's look at this program here.

3
00:00:07,160 --> 00:00:18,440
I want to buy 100 cans of my super premium cat food at $4.35 a can. So, my

4
00:00:18,440 --> 00:00:23,370
total price is going to be the quantity times the unit price. So, I'll print

5
00:00:23,370 --> 00:00:28,926
it. There's also 8% tax so, here I'm figuring up the tax, and then I'm printing

6
00:00:28,926 --> 00:00:34,354
that. Let's see what this program does. Well, look at it. It's ugly, ugly.

7
00:00:34,354 --> 00:00:40,306
Here, I expected to see $435, and the tax, you never see tax like that on your

8
00:00:40,306 --> 00:00:48,134
store receipt. It would say $34.80. So that's what I want. And by the way, I

9
00:00:48,134 --> 00:00:52,261
want these decimal points here to line up. It turns out, that's pretty easy to

10
00:00:52,261 --> 00:00:57,218
do. Here, instead of just calling println, we'll call a different method. It's

11
00:00:57,218 --> 00:01:01,538
called printf for print formatted, and here, we need to add a formatting

12
00:01:01,538 --> 00:01:07,090
string. The formatting string is here, it looks a little arcane. The percent

13
00:01:07,090 --> 00:01:11,823
says we're now going to be printing something. The 8 means we want it to be 8

14
00:01:11,823 --> 00:01:19,018
characters wide, the 0.2 means, we went 2 digits after the decimal point. The f

15
00:01:19,018 --> 00:01:23,824
means it's a floating point or decimal number. The \n means, and afterwards,

16
00:01:23,824 --> 00:01:28,439
please give us a new line. As you can see, there's a whole mini language in

17
00:01:28,439 --> 00:01:31,703
these formatting strings and you'll practice a few of them with Sarah, after

18
00:01:31,703 --> 00:01:38,384
I'm done here. But truth be told, if you simply memorize this one. Or even

19
00:01:38,384 --> 00:01:43,520
better just copy and paste it when you need it. That's 90% of what you need.

20
00:01:43,520 --> 00:01:46,628
Let me do just that. So, here again, I'm going to be using a printer. I'm

21
00:01:46,628 --> 00:01:53,244
saying I want field with 8. 2 digits after decimal point. Now, when we run the

22
00:01:53,244 --> 00:01:57,227
program everything is nice and beautiful. Both numbers have two digits after

23
00:01:57,227 --> 00:02:04,080
the decimal point. Both of them occupy eight characters. As a general rule,

24
00:02:04,080 --> 00:02:09,636
whenever you display prices, go ahead and use printf. You'll practice that with

25
00:02:09,636 --> 00:02:10,859
Sara right now.
