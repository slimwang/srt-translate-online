1
00:00:00,580 --> 00:00:04,230
Let's imagine I wanted to send a message
to Cameron without anyone else being to

2
00:00:04,230 --> 00:00:05,790
see that message.

3
00:00:05,790 --> 00:00:09,190
If I were to just place this note on
Cameron's desk, anyone could come by and

4
00:00:09,190 --> 00:00:10,580
read it.

5
00:00:10,580 --> 00:00:14,060
I could find a box with a lock and
lock the message away but

6
00:00:14,060 --> 00:00:16,658
then I have to somehow
get this key to Cameron.

7
00:00:16,658 --> 00:00:19,580
That's not going to work because
anyone will be able to come by and

8
00:00:19,580 --> 00:00:20,170
grab the key.

9
00:00:21,410 --> 00:00:24,370
But what if Cameron already
had a box set up on his desk,

10
00:00:24,370 --> 00:00:28,840
with his own lock, and the key to unlock
that box is always in Cameron's pocket?

11
00:00:28,840 --> 00:00:31,080
He never shares that key with anyone.

12
00:00:31,080 --> 00:00:34,330
I can then come by his desk, place
my message in the box, and lock it.

13
00:00:34,330 --> 00:00:36,030
And no one else can
ever see that message.

14
00:00:37,350 --> 00:00:40,620
In this example,
the box is called the public key.

15
00:00:40,620 --> 00:00:44,900
The box can be left out in the open,
shared around without any consequence.

16
00:00:44,900 --> 00:00:47,900
The key in Cameron's pocket
is called a private key.

17
00:00:47,900 --> 00:00:51,150
Cameron never lets anybody else
borrow that key or see it.

18
00:00:51,150 --> 00:00:52,530
This combination of public and

19
00:00:52,530 --> 00:00:56,160
private keys allows me to securely
communicate with Cameron.

20
00:00:56,160 --> 00:01:01,570
This same cryptography trick can be used
to authenticate a client with a server.

21
00:01:01,570 --> 00:01:05,560
The server will send a random
message to the client.

22
00:01:05,560 --> 00:01:09,200
The client will encrypt that
message with their private key, and

23
00:01:09,200 --> 00:01:12,030
then send that encrypted
message back to the server.

24
00:01:13,730 --> 00:01:17,180
The server will decrypt this
message with their public key and

25
00:01:17,180 --> 00:01:21,400
if that value equals the same value they
sent, then everything checks out and

26
00:01:21,400 --> 00:01:22,600
the client has authenticated.
