1
00:00:00,000 --> 00:00:04,610
To figure this out, let's have a look back at our picture from before.

2
00:00:04,610 --> 00:00:11,000
We said that in a set formula each clause must be satisfied and set this is kind of similar

3
00:00:11,000 --> 00:00:15,650
to the requirement that each city must be visited at least once.

4
00:00:15,650 --> 00:00:20,330
This would suggest to add some additional vertices to the picture that represent clauses.

5
00:00:20,330 --> 00:00:25,340
So let's say we have one vertex here that represents clause #1

6
00:00:25,340 --> 00:00:27,970
and another vertex here for clause #2 and so on.

7
00:00:27,970 --> 00:00:35,520
What we could say is that visiting this vertex here represent satisfying that clause and then of course,

8
00:00:35,520 --> 00:00:41,180
we need to make sure that we can only visit the city here if the corresponding variable

9
00:00:41,180 --> 00:00:45,560
or if one of the corresponding variables of that clause is satisfied in the right way.

10
00:00:45,560 --> 00:00:52,110
What about a construction that looks like this--I connect the vertex that represents the clause

11
00:00:52,110 --> 00:00:58,990
to this one here and I connect it to this vertex here and I connect it to this vertex here.

12
00:00:58,990 --> 00:01:04,160
What I would like you to think about now is the following, there are 2^n shortest paths

13
00:01:04,160 --> 00:01:08,300
between A and B if we do not regard this vertex here.

14
00:01:08,300 --> 00:01:13,830
If we do not have clause 1 and I realize it's not the best name for that vertex but that's okay.

15
00:01:13,830 --> 00:01:18,290
If we have to visit this vertex here, so it's now become part of our graph.

16
00:01:18,290 --> 00:01:23,100
How many shortest paths from A to B do you have then that visit all vertices.

17
00:01:23,100 --> 99:59:59,999
Is it still 2^n, is is 2^n⁺¹, or is it 2^n⁻¹.
