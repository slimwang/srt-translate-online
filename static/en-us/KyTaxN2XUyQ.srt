1
00:00:00,360 --> 00:00:03,792
Before explaining how projection works, let's talk about how the perspective

2
00:00:03,792 --> 00:00:07,800
camera is set in 3Js. It's similar to the Orthographic Camera, in fact, the

3
00:00:07,800 --> 00:00:12,724
creation call has few parameters. We know what the last three are. The aspect

4
00:00:12,724 --> 00:00:16,027
ratio is the image width divided by height, followed by the near and far

5
00:00:16,027 --> 00:00:21,715
planes. Remember the view frustum? It's back at last. The near and far

6
00:00:21,715 --> 00:00:24,685
distances are measured from the tip of the pyramid, where the camera is placed,

7
00:00:24,685 --> 00:00:29,065
down a central axis. Back when I was a young man, we called near and far by the

8
00:00:29,065 --> 00:00:33,844
names hither and yon, which I think is more poetic. You'll still occasionally

9
00:00:33,844 --> 00:00:37,450
see the terms hither and yon used in products, so keep an eye out. The first

10
00:00:37,450 --> 00:00:41,084
argument for the perspective camera is the field of view. This is the angle

11
00:00:41,084 --> 00:00:45,470
between the top and bottom planes of the view pyramid. Notice that in 3JS, this

12
00:00:45,470 --> 00:00:49,850
number is specified in degrees, unlike many other angles, which use radians.

13
00:00:49,850 --> 00:00:52,905
The field of view along with the aspect ratio fully described the locations of

14
00:00:52,905 --> 00:00:57,068
the four sides of the pyramid. For the orthographic camera, we define the

15
00:00:57,068 --> 00:01:01,410
location of every side of our volume box. Here the view is assumed to be

16
00:01:01,410 --> 00:01:05,030
symmetric around the central axis. In other words, instead of, a top an a

17
00:01:05,030 --> 00:01:09,960
bottom value, we need just a single angle describing both, the field of view.

18
00:01:09,960 --> 00:01:12,522
Same thing with the right an left, the aspect ratio along with the angle is

19
00:01:12,522 --> 00:01:17,390
enough. This is 3.js's way of doing things, an 99.9% of the time it's what you

20
00:01:17,390 --> 00:01:22,540
want. That said, it's entirely possible to specify each side of the pyramid.

21
00:01:22,540 --> 00:01:27,404
And webgl itself has a frustum that does just this. If you later change values

22
00:01:27,404 --> 00:01:30,628
on the camera itself, such as the field of view near or far planes, in 3js you

23
00:01:30,628 --> 00:01:33,956
need to call camera, update projection matrix in order to have these changes

24
00:01:33,956 --> 00:01:39,062
take effect. For most demos these camera parameters are usually set once on

25
00:01:39,062 --> 00:01:42,377
creation and rarely touched, so 3js doesn't spend any time checking them each

26
00:01:42,377 --> 00:01:47,371
frame. If you change these values while running your program, calling update

27
00:01:47,371 --> 00:01:50,311
projection matrix has three js evaluate these parameters and form a new

28
00:01:50,311 --> 00:01:52,470
projection matrix.
