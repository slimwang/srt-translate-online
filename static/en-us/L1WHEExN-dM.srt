1
00:00:00,650 --> 00:00:03,960
Until now we've only been building and
running pre-made images.

2
00:00:03,960 --> 00:00:06,130
In this case, nginx.

3
00:00:06,130 --> 00:00:08,115
It's time to learn how
to build our own images.

4
00:00:08,115 --> 00:00:12,110
As a best practice, we're not
building our application with Docker.

5
00:00:12,110 --> 00:00:15,510
No, instead, we're taking a binary that
could have come from our continuous

6
00:00:15,510 --> 00:00:17,130
integration pipeline.

7
00:00:17,130 --> 00:00:20,324
Then we use Docker to package our
application as a container image, and

8
00:00:20,324 --> 00:00:22,140
to do that, we use a Dockerfile.

9
00:00:23,160 --> 00:00:26,850
Dockerfiles are text documents that
contain all of the necessary steps for

10
00:00:26,850 --> 00:00:29,030
building an image from the command line.

11
00:00:29,030 --> 00:00:29,730
A Dockerfile,

12
00:00:29,730 --> 00:00:33,710
when used with the Docker build command,
automates that process by executing

13
00:00:33,710 --> 00:00:36,550
these command line instructions
to build the resulting image.

14
00:00:36,550 --> 00:00:38,090
Let's look at one of ours.

15
00:00:38,090 --> 00:00:42,570
Really quick aside,
Dockerfiles are always named Dockerfile.

16
00:00:42,570 --> 00:00:45,310
That's because when the Docker
build command kicks off,

17
00:00:45,310 --> 00:00:49,280
the command that uses our Docker file
to create an image, it also creates

18
00:00:49,280 --> 00:00:52,383
a context of all the files in our
directory and its subdirectories.

19
00:00:52,383 --> 00:00:56,520
The build daemon will then search for
a file called Dockerfile, although,

20
00:00:56,520 --> 00:00:59,980
in practice it's best to just start
with an empty directory as context and

21
00:00:59,980 --> 00:01:01,580
keep your Dockerfile there.

22
00:01:01,580 --> 00:01:02,300
In that directory,

23
00:01:02,300 --> 00:01:06,340
you only need to add the files necessary
for building your Docker image.

24
00:01:06,340 --> 00:01:08,590
Okay, so let's pull up our Dockerfile.

25
00:01:08,590 --> 00:01:11,410
After running the cat command you
can see the entire Dockerfile

26
00:01:11,410 --> 00:01:12,740
for Hello image.

27
00:01:12,740 --> 00:01:15,230
Each line in a Dockerfile
starts with a command.

28
00:01:15,230 --> 00:01:18,478
This Dockerfile just uses four,
the FROM, MAINTINER, ADD, and

29
00:01:18,478 --> 00:01:19,640
ENTRYPOINT commands.

30
00:01:20,650 --> 00:01:23,270
By the way,
Dockerfiles can have comments, and

31
00:01:23,270 --> 00:01:26,000
they start with a pound sign,
just like bash comments.

32
00:01:26,000 --> 00:01:29,110
You can use comments to make your
life as the maintainer easier, and

33
00:01:29,110 --> 00:01:31,460
to make it easier for the people
trying to decipher your Dockerfiles.

34
00:01:32,470 --> 00:01:33,050
Quick question.

35
00:01:33,050 --> 00:01:36,810
Do you think Kelsey didn't use comments
in writing this Dockerfile because

36
00:01:36,810 --> 00:01:39,540
this is a really,
really simple Dockerfile?

37
00:01:39,540 --> 00:01:41,720
Or because his comments are so

38
00:01:41,720 --> 00:01:45,342
profound that many programmers
decide to retire after reading one?

39
00:01:45,342 --> 00:01:47,842
You decide.

40
00:01:47,842 --> 00:01:49,140
Moving on.

41
00:01:49,140 --> 00:01:52,280
The first command in a Dockerfile
is the FROM command.

42
00:01:52,280 --> 00:01:57,250
This tells Docker which base image
to build our new image on top of.

43
00:01:57,250 --> 00:02:00,250
These days it's always best to
use Alpine Linux as your base.

44
00:02:00,250 --> 00:02:02,630
Because it's small,
has a package manager,

45
00:02:02,630 --> 00:02:05,860
and it allows you to debug
your containers in production.

46
00:02:05,860 --> 00:02:09,800
Alpine is also used by default for
all the official Docker images.

47
00:02:09,800 --> 00:02:11,290
We could optimize and

48
00:02:11,290 --> 00:02:14,830
use the scratch space image, which
amounts to a no op, but then you lose

49
00:02:14,830 --> 00:02:19,580
the ability to do basic debugging like
pinging from inside of your container.

50
00:02:19,580 --> 00:02:21,800
Besides, if you're using
the same base image,

51
00:02:21,800 --> 00:02:23,640
Docker only has to pull that once.

52
00:02:23,640 --> 00:02:27,110
So we're only pulling that 5
megabyte cost once per machine.

53
00:02:28,300 --> 00:02:30,300
Next we have the MAINTAINER command.

54
00:02:30,300 --> 00:02:33,368
That just tells us that Kelsey is
the author and maintainer of this image.

55
00:02:33,368 --> 00:02:36,710
Following that you'll see the ADD
command, which takes a file or

56
00:02:36,710 --> 00:02:38,662
directory is from our host machine and

57
00:02:38,662 --> 00:02:42,370
adds them to the file system of
the container at the specified location.

58
00:02:42,370 --> 00:02:45,505
In this case, we're copying over
the hello bin from our continuous

59
00:02:45,505 --> 00:02:48,432
integration or our go build
earlier into our container image.

60
00:02:48,432 --> 00:02:50,974
Finally, ENTRYPOINT.

61
00:02:50,974 --> 00:02:53,440
This lets our container
run as an executable.

62
00:02:53,440 --> 00:02:56,048
So when our container starts,
it's going to run the hello app.

63
00:02:56,048 --> 00:02:58,398
There are more commands you
can put into a Dockerfile and

64
00:02:58,398 --> 00:03:00,882
you'll probably see some
of them in the wild.

65
00:03:00,882 --> 00:03:03,040
Before our course,
this is everything you need to know.
