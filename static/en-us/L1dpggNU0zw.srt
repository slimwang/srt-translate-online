1
00:00:00,000 --> 00:00:05,000
Why do you believe the future of programming language design lies in domain specific languages

2
00:00:05,000 --> 00:00:11,000
when we can just do operator overloading and APIs in a general language like C?

3
00:00:11,000 --> 00:00:16,000
Well, that’s a tough question and actually there is a bit of philosophy or opinion here.

4
00:00:16,000 --> 00:00:22,000
In class, we keep brushing against Turing completeness, and it turns out that languages like

5
00:00:22,000 --> 00:00:26,000
C++ or C# or Java or MATLAB are all going to allow us to express

6
00:00:26,000 --> 00:00:30,000
the same computations ultimately--that is,

7
00:00:30,000 --> 00:00:34,000
if it’s possible to do it in one language, it’s also possible to do it in the other,

8
00:00:34,000 --> 00:00:39,000
but that doesn’t say anything about how easy it is, how much help the language

9
00:00:39,000 --> 00:00:45,000
will give you about making mistakes, and how quick the final result will be.

10
00:00:45,000 --> 00:00:52,000
In my opinion, three important features that the domain specific language gives you over just

11
00:00:52,000 --> 00:00:57,000
coding up special types or operations in a general purpose language like C++ or C#

12
00:00:57,000 --> 00:01:03,000
are the conciseness of the representation, the ability to do type checking or run-time checking

13
00:01:03,000 --> 00:01:10,000
or otherwise have safety built-in, and the ability of the compiler or run-time system to do optimization.

14
00:01:10,000 --> 00:01:15,000
Let's take something like MATLAB, which is very good at doing mathematical operations

15
00:01:15,000 --> 00:01:22,000
or matrices or matrix multiply in a concise manner, and take it as sort of a running example.

16
00:01:22,000 --> 00:01:27,000
You could code up the same sorts of operations, matrix multiply,

17
00:01:27,000 --> 00:01:30,000
and language like C or C++ and C#,

18
00:01:30,000 --> 00:01:33,000
and you might start out by having them the functions that take a number of arguments

19
00:01:33,000 --> 00:01:35,000
in making your own data types.

20
00:01:35,000 --> 00:01:38,000
And to that, it’s relatively clear that languages like MATLAB,

21
00:01:38,000 --> 00:01:44,000
which just like to use the star to multiply two matrices, is going to be more concise.

22
00:01:44,000 --> 00:01:49,000
However, once you start adding operator overloading or feature of languages like

23
00:01:49,000 --> 00:01:54,000
C++ or C# that allows you to change the meaning of symbols

24
00:01:54,000 --> 00:01:58,000
like plus or stars that they, in essence, call functions you define.

25
00:01:58,000 --> 00:02:04,000
Then, the conciseness argument is more of a wash sort of a tie for both ends.

26
00:02:04,000 --> 00:02:12,000
However, the other two aspects, type safety or type checking and optimization, are still really critical.

27
00:02:12,000 --> 00:02:17,000
A language specifically designed to handle Mathematics or matrices something like MATLAB

28
00:02:17,000 --> 00:02:20,000
is going to be able to notice potentially more easily

29
00:02:20,000 --> 00:02:24,000
if you make mistakes related to that particular domain.

30
00:02:24,000 --> 00:02:32,000
For example, in C or C++, often a two-dimensional matrix in array

31
00:02:32,000 --> 00:02:36,000
is really just a single array carefully embedded.

32
00:02:36,000 --> 00:02:42,000
There's some sort of stride or approach where we reuse the elements of the indices

33
00:02:42,000 --> 00:02:46,000
in a very long one-dimensional array as if it were a two-dimensional array.

34
00:02:46,000 --> 00:02:52,000
And it is really easy to make mistakes to pass in arrays or matrices that have the wrong dimensions

35
00:02:52,000 --> 00:02:58,000
to matrix-matrix multiply, to confuse row major order and column major order, and language like

36
00:02:58,000 --> 00:03:02,000
C or C++ depending on which matrix implementation you're using

37
00:03:02,000 --> 00:03:04,000
won’t give you any support with that.

38
00:03:04,000 --> 00:03:07,000
It will silently let you shoot yourself in the foot. Compute the wrong answer.

39
00:03:07,000 --> 00:03:10,000
You might not even crash. You might just get something you’re not expecting.

40
00:03:10,000 --> 00:03:14,000
And that’s really problematic because these days the constraint is often

41
00:03:14,000 --> 00:03:17,000
programmer time rather than CPU time.

42
00:03:17,000 --> 00:03:21,000
I’d rather use a language where these things are built-in as first-class citizens,

43
00:03:21,000 --> 00:03:24,000
and there’s the possibility that it will alert me to error.

44
00:03:24,000 --> 00:03:31,000
Many of you may have a favorite C++ or C# or Java matrix library that would catch those errors.

45
00:03:31,000 --> 00:03:35,000
Again, ultimately, since these languages have equivalent expressive power,

46
00:03:35,000 --> 00:03:38,000
you can add that sort of error checking to any language or library.

47
00:03:38,000 --> 00:03:46,000
But often domain-specific languages do a better job at it. And the third example is then optimization.

48
00:03:46,000 --> 00:03:50,000
The higher-level instructions you give to a compiler or interpreter,

49
00:03:50,000 --> 00:03:53,000
the more scope it has for creativity,

50
00:03:53,000 --> 00:03:58,000
the more chances it has to reorder your statements or implement them in other way,

51
00:03:58,000 --> 00:04:01,000
the closer you can get to just being declarative.

52
00:04:01,000 --> 00:04:04,000
I want to multiply these matrices, and I don’t care how you do it.

53
00:04:04,000 --> 00:04:10,000
The more the compiler under the hood is able to take advantage of things like memory hierarchies,

54
00:04:10,000 --> 00:04:13,000
caches, special multimedia instructions you might have

55
00:04:13,000 --> 00:04:16,000
in order to get that sort of thing done well under the hood.

56
00:04:16,000 --> 00:04:20,000
If you actually write out your matrix-matrix multiply as three nested for loops,

57
00:04:20,000 --> 00:04:25,000
you’re forcing the compiler to generate code for that particular implementation.

58
00:04:25,000 --> 00:04:28,000
Often domain specific languages allow you to express things like

59
00:04:28,000 --> 00:04:31,000
matrix transposition or multiplication at a very high level.

60
00:04:31,000 --> 00:04:35,000
And thus, they actually end up generating better code for new target architectures

61
00:04:35,000 --> 00:04:38,000
than you might do if you were to code it up yourself.

62
00:04:38,000 --> 00:04:40,000
So you end up spending less time writing. It’s concise.

63
00:04:40,000 --> 00:04:43,000
You get guarantees, and it’s faster.

64
00:04:43,000 --> 00:04:46,000
And in fact, you can view the push to domain specific languages

65
00:04:46,000 --> 00:04:51,000
as just an extension of the push from assembly languages to high level languages.

66
00:04:51,000 --> 00:04:55,000
One of the first arguments made in favor of higher level languages

67
00:04:55,000 --> 00:05:00,000
were early studies in computer science that found that the number of lines of code

68
00:05:00,000 --> 00:05:04,000
that programmers could write per day essentially over the lifetime of a project

69
00:05:04,000 --> 00:05:08,000
was constant regardless of what language you are using.

70
00:05:08,000 --> 00:05:11,000
You could either pay your programmers and get ten lines of assembly

71
00:05:11,000 --> 00:05:16,000
or you could pay your programmers and get ten lines of C or ten lines of Python or some such.

72
00:05:16,000 --> 00:05:21,000
And if you have experience with multiple languages, typically you can get significantly

73
00:05:21,000 --> 00:05:27,000
more done in ten lines of Python than you can in ten lines of assembly because of built-in support

74
00:05:27,000 --> 00:05:32,000
for dictionaries or lambda, higher order data types, object-oriented programming, that sort of thing.

75
00:05:32,000 --> 00:05:36,000
Ultimately, you can get everything done with assembly, but it would take longer.

76
00:05:36,000 --> 00:05:40,000
The same argument here applies to domain specific languages.

77
00:05:40,000 --> 00:05:44,000
If I have a new more exotic domain-specific language, let’s pick MacroLab.

78
00:05:44,000 --> 00:05:47,000
That's a favorite one of mine for programming wireless sensor networks

79
00:05:47,000 --> 00:05:51,000
for moving data around and performing distributed computations.

80
00:05:51,000 --> 00:05:55,000
Let’s say for example that you want to keep track of people passing through

81
00:05:55,000 --> 00:05:59,000
your storefront advertising window to see if it’s actually working in attracting people.

82
00:05:59,000 --> 00:06:01,000
You might make up some sort of wireless sensor network to keeps track.

83
00:06:01,000 --> 00:06:03,000
You want to write programs for that.

84
00:06:03,000 --> 00:06:05,000
You could do them and see your assembly language

85
00:06:05,000 --> 00:06:07,000
or you could use this sort of domain specific language

86
00:06:07,000 --> 00:06:10,000
since it has notions of distributed computation

87
00:06:10,000 --> 00:06:14,000
where data lives, sending information back and forth, built-in as primitives.

88
00:06:14,000 --> 00:06:18,000
It’s able to check mistakes for you, generate good code for you,

89
00:06:18,000 --> 00:06:20,000
and in general, improve your productivity.

90
00:06:20,000 --> 00:06:24,000
Could you get all of that done with a well-crafted library? Yes.

91
00:06:24,000 --> 00:06:27,000
And in some sense, ultimately at the end of the day, maybe there is no difference between

92
00:06:27,000 --> 00:06:30,000
the well-crafted library and a domain specific language.

93
00:06:30,000 --> 00:06:34,000
But I think we'll see a lot of the initial effort or improvement

94
00:06:34,000 --> 00:06:39,000
common to domain specific language side and then the libraries will follow and catch up.
