1
00:00:00,000 --> 00:00:02,000
Here's my answer. We got all the pieces.

2
00:00:02,000 --> 00:00:04,000
We call all plays. We get back.

3
00:00:04,000 --> 00:00:06,000
There is a collection of plays.

4
00:00:06,000 --> 00:00:09,000
We sort them and take the last one--that'll be the highest.

5
00:00:09,000 --> 00:00:11,000
We don't even have to specify what to sort by,

6
00:00:11,000 --> 00:00:14,000
because of the score was the first element of the play,

7
00:00:14,000 --> 00:00:16,000
so we're automatically sorting by that,

8
00:00:16,000 --> 00:00:19,000
and then return the best one if there are any plays otherwise.

9
00:00:19,000 --> 00:00:23,000
Otherwise, then I specified no play here in case I change my mind,

10
00:00:23,000 --> 00:00:26,000
but I can say no play equals None.

11
00:00:26,000 --> 00:00:28,000
Now, I could write something that plays a complete game,

12
00:00:28,000 --> 00:00:30,000
but instead I'm just going to have a simple function show_best,

13
00:00:30,000 --> 00:00:36,000
which takes a hand and a board, displays the current board, and then displays the best play.

14
00:00:36,000 --> 00:00:39,000
When I type it in to the interpreter, this is what I get.

15
00:00:39,000 --> 00:00:45,000
It found the backbench that we had sort of laid out there, scored 64 points,

16
00:00:45,000 --> 00:00:48,000
and out of all the possible plays, it found the optimal one.

17
00:00:48,000 --> 99:59:59,999
So, we did it. We made it all the way through. Congratulations.
