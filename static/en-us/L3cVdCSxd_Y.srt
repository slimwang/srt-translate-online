1
00:00:00,830 --> 00:00:03,930
Let's walk through the play
sounds view controller plus audio

2
00:00:03,930 --> 00:00:06,680
class extension to understand
exactly what this code is doing.

3
00:00:07,808 --> 00:00:11,340
Open the play sounds view controller
plus audio swift file and

4
00:00:11,340 --> 00:00:12,140
navigate to the top.

5
00:00:13,640 --> 00:00:17,030
The first thing you see here
is a struct of alert messages.

6
00:00:17,030 --> 00:00:20,860
This is just a convenient way to have
the alert messages in a single place.

7
00:00:20,860 --> 00:00:24,060
If you have strings or other static
items that you want to use throughout

8
00:00:24,060 --> 00:00:25,970
your app,
this is a good practice to follow.

9
00:00:27,290 --> 00:00:29,800
Below that,
you see the playing state enum,

10
00:00:29,800 --> 00:00:33,060
which will be used by the configure
UI function to set the button states

11
00:00:33,060 --> 00:00:36,780
depending if we're playing or
not playing any audio.

12
00:00:36,780 --> 00:00:39,580
Next up is the set up audio function,
which is where we try to

13
00:00:39,580 --> 00:00:44,430
load the audio recording file passed in
from the record sounds view controller.

14
00:00:44,430 --> 00:00:47,880
If loading the audio file fails,
we present an alert message to the user.

15
00:00:49,130 --> 00:00:52,150
By the way, did you notice these MARK
statements here in the comments?

16
00:00:53,210 --> 00:00:55,620
These are to make it easier for
you to jump around in your code.

17
00:00:57,170 --> 00:01:00,140
When you pull down the function
listing in the editor toolbar,

18
00:01:00,140 --> 00:01:02,060
you can see the section headers in bold.

19
00:01:02,060 --> 00:01:05,370
It makes it easier for
you to jump to the relevant section.

20
00:01:06,680 --> 00:01:09,850
The play sound function is the main
function in this extension.

21
00:01:09,850 --> 00:01:12,490
As the name suggests,
it carries out playing back the audio.

22
00:01:13,560 --> 00:01:16,490
This function has something you
have not seen before, that is,

23
00:01:16,490 --> 00:01:17,510
optional parameters.

24
00:01:18,570 --> 00:01:22,150
See the question mark here,
after rates float type?

25
00:01:22,150 --> 00:01:24,730
It indicates that rate is
an optional parameter and

26
00:01:24,730 --> 00:01:27,460
if you don't pass it in
it'll be set to nil.

27
00:01:27,460 --> 00:01:29,580
The same is true for pitch.

28
00:01:29,580 --> 00:01:33,020
The first part of the function
is to grab the AVAudioEngine and

29
00:01:33,020 --> 00:01:34,710
create an AVAudioPlayerNode.

30
00:01:35,750 --> 00:01:37,450
Next, we check if the rate or

31
00:01:37,450 --> 00:01:40,750
the pitch parameters were passed in,
since there're optional.

32
00:01:40,750 --> 00:01:43,490
The way we do this check may
look a little weird at first

33
00:01:43,490 --> 00:01:46,250
as we're doing a value binding
inside an if statement.

34
00:01:47,860 --> 00:01:50,390
See the line here, if let pitch = pitch.

35
00:01:51,390 --> 00:01:53,180
You really should read it as,

36
00:01:53,180 --> 00:01:57,310
if the pitch variable is not nil,
then execute this pitch statement.

37
00:01:58,740 --> 00:02:00,940
If pitch is nil,
we'll skip over this code.

38
00:02:02,570 --> 00:02:06,080
Likewise, if rate is nil,
we'll skip over this code too.

39
00:02:06,080 --> 00:02:10,080
The concept of value binding is covered
in UI fundamentals in the next lesson.

40
00:02:11,240 --> 00:02:15,340
Next, we create an echo and reverb
notes, but we will only use them if

41
00:02:15,340 --> 00:02:19,830
either the echo or reverb parameters
were passed in and set to true.

42
00:02:19,830 --> 00:02:24,300
We can either have an echo and reverb,
just echo, just reverb, or neither.

43
00:02:25,590 --> 00:02:29,530
Lastly we tell audio player to stop
playing any current audio, and

44
00:02:29,530 --> 00:02:31,570
schedule our recorded audio for
playback.

45
00:02:32,570 --> 00:02:35,980
This ensures that the recorded audio
is in memory, and ready to be played.

46
00:02:37,050 --> 00:02:39,230
This part here that looks
like another function,

47
00:02:39,230 --> 00:02:41,460
is actually a trailing closure.

48
00:02:41,460 --> 00:02:44,500
The schedule file function
takes in a completion closure

49
00:02:44,500 --> 00:02:47,180
that it runs when the audio
file is ready to start playing.

50
00:02:48,190 --> 00:02:51,860
This code here sets a timer to fire
when the audio is done playing that

51
00:02:51,860 --> 00:02:54,160
resets the button to
the not playing state.

52
00:02:56,010 --> 00:02:59,620
Now that everything is set up,
we try to start the audio engine and

53
00:02:59,620 --> 00:03:01,370
the audio node playback.

54
00:03:01,370 --> 00:03:03,220
At this point,
the audio would be playing.

55
00:03:04,790 --> 00:03:08,710
Connect audio nodes is just a helper
function to connect a set of audio nodes

56
00:03:08,710 --> 00:03:10,320
together in the audio engine.

57
00:03:11,550 --> 00:03:13,110
As with most helper functions,

58
00:03:13,110 --> 00:03:17,000
this just cuts down on the duplication
of code in the play sound function.

59
00:03:18,220 --> 00:03:21,720
The stop audio function is in
charge of stopping the audio.

60
00:03:21,720 --> 00:03:24,420
Remember that timer we set back
in the play sound function?

61
00:03:25,470 --> 00:03:28,290
We don't want it to fire as
we're stopping the sound here.

62
00:03:28,290 --> 00:03:32,190
So the first if statement invalidates or
cancels that timer.

63
00:03:32,190 --> 00:03:37,020
The next few lines stop the audio player
node and the audio engine, itself.

64
00:03:37,020 --> 00:03:41,070
Next, we come to the UI functions, which
are really just in charge of enabling

65
00:03:41,070 --> 00:03:44,100
and disabling in the six playback
buttons and the stop button.

66
00:03:45,100 --> 00:03:49,390
These are helper functions and they
help us by avoiding duplication of code.

67
00:03:49,390 --> 00:03:51,250
We just have one place to enable or

68
00:03:51,250 --> 00:03:54,990
disable the buttons, depending on if
we are playing or not playing audio.

69
00:03:56,510 --> 00:04:00,130
You can see that configureUI itself
uses another helper function

70
00:04:00,130 --> 00:04:02,110
to toggle the playback buttons.

71
00:04:02,110 --> 00:04:04,500
If you pass in false,
they all get disabled and

72
00:04:04,500 --> 00:04:06,810
if you pass in true,
they will all be enabled.

73
00:04:08,200 --> 00:04:11,360
Last step is the showAlert function
which simply displays an alert

74
00:04:11,360 --> 00:04:14,850
to the user using UIAlertController
if something goes wrong.

75
00:04:16,350 --> 00:04:17,170
That it.

76
00:04:17,170 --> 00:04:19,940
I've taken you through the black
box class extension that allows

77
00:04:19,940 --> 00:04:24,570
all the audio to be played back with
changes to pitch, rate, with echo, and

78
00:04:24,570 --> 00:04:25,210
even revert.

79
00:04:26,530 --> 00:04:29,420
Remember that there's no harm in
playing around with this code.

80
00:04:29,420 --> 00:04:32,210
You should feel free to experiment and
changing the settings and more.
