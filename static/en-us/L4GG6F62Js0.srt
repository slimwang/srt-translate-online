1
00:00:00,350 --> 00:00:03,150
There are many other applications of
dynamic programming that we haven't

2
00:00:03,150 --> 00:00:06,470
touched on, but the three we
covered provide a good sample and

3
00:00:06,470 --> 00:00:07,770
help illustrate the general strategy.

4
00:00:08,830 --> 00:00:11,960
Perhaps the most important lesson, is
that any time you've found a recursive

5
00:00:11,960 --> 00:00:16,149
solution to a problem, think carefully
about what the subproblems are and

6
00:00:16,149 --> 00:00:17,880
whether there's an overlap
that you can exploit.

7
00:00:19,130 --> 00:00:20,920
Note that this won't always work.

8
00:00:20,920 --> 00:00:24,150
Dynamic program will not yield
a polynomial algorithm for

9
00:00:24,150 --> 00:00:26,840
every problem with
a recursive formulation.

10
00:00:26,840 --> 00:00:29,150
Take satisfiability, for example.

11
00:00:29,150 --> 00:00:31,520
Pick a variable and set it to true, and

12
00:00:31,520 --> 00:00:34,410
eliminate the variable from
the rest of the formula.

13
00:00:34,410 --> 00:00:36,269
We're left with another Boolean formula.

14
00:00:36,269 --> 00:00:38,650
And if it's satisfiable,
then so is the original.

15
00:00:39,690 --> 00:00:42,720
The same is true if we set
the variable to false.

16
00:00:42,720 --> 00:00:45,660
And the original formula will
have a satisfying assignment

17
00:00:45,660 --> 00:00:47,090
if either of these other formulas do.

18
00:00:48,230 --> 00:00:51,440
This is a perfectly legitimate
recursive formulation, yet

19
00:00:51,440 --> 00:00:54,790
there isn't enough overlap between
the subproblems to create a polynomial

20
00:00:54,790 --> 00:00:57,630
algorithm, at least not
unless p is equal to np.

21
00:00:58,970 --> 00:01:02,130
In the next lesson, we'll examine
the fast Fourier transform.

22
00:01:02,130 --> 00:01:03,260
This is much more a divide and

23
00:01:03,260 --> 00:01:06,260
conquer problem,
than it is a dynamic programming one.

24
00:01:06,260 --> 00:01:09,470
Though many of the same themes
of identifying subproblems and

25
00:01:09,470 --> 00:01:12,490
reusing calculation will
appear as we study it.

26
00:01:12,490 --> 00:01:13,130
Keep this in mind.
