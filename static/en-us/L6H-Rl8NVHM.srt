1
00:00:00,360 --> 00:00:02,890
We have a full course on Swift syntax.

2
00:00:02,890 --> 00:00:04,740
If you're new to the Swift
programming language,

3
00:00:04,740 --> 00:00:06,950
I highly recommend going through it.

4
00:00:06,950 --> 00:00:10,580
For now, I'm going to attempt to
give you a quick intro into Swift

5
00:00:10,580 --> 00:00:12,320
in under five minutes.

6
00:00:12,320 --> 00:00:14,370
It is just the basics
that you need to know.

7
00:00:14,370 --> 00:00:18,110
And it assumes you've seen some
programming language concepts before.

8
00:00:18,110 --> 00:00:21,398
There are just four key concepts to
understand before we can start coding,

9
00:00:21,398 --> 00:00:26,480
variables, control flow,
classes, and functions.

10
00:00:27,720 --> 00:00:31,350
Hopefully, you're watching
this video as Xcode downloads.

11
00:00:31,350 --> 00:00:32,259
Ready?

12
00:00:32,259 --> 00:00:33,700
Here we go.

13
00:00:33,700 --> 00:00:37,070
Variables, if you want to
declare a variable in Swift,

14
00:00:37,070 --> 00:00:39,300
the var keyword lets you do that.

15
00:00:39,300 --> 00:00:43,700
As an example, here we have
a variable called x of type Int, and

16
00:00:43,700 --> 00:00:45,990
we're setting its value to 42.

17
00:00:45,990 --> 00:00:48,853
Note the semi-colons are not needed.

18
00:00:48,853 --> 00:00:50,540
Do you see something
else that's a bit odd?

19
00:00:51,600 --> 00:00:52,410
That's right.

20
00:00:52,410 --> 00:00:55,910
The type of this variable
comes after the variable name,

21
00:00:55,910 --> 00:00:57,990
different than most other languages.

22
00:00:57,990 --> 00:01:01,460
The reason for this is that Swift can
infer the type of the variable, so

23
00:01:01,460 --> 00:01:04,330
in most cases,
you can leave the type completely off.

24
00:01:04,330 --> 00:01:08,871
For example,
here I could just make x equal to 42.

25
00:01:08,871 --> 00:01:13,000
Now something else you're going to
encounter in your code is a constant.

26
00:01:13,000 --> 00:01:14,070
For example,

27
00:01:14,070 --> 00:01:18,900
here we have y that is a constant
of type int with a value of 100.

28
00:01:18,900 --> 00:01:22,790
Swift has inferred the type int because
we're setting it to an int value.

29
00:01:24,060 --> 00:01:26,900
The next type of variable that you
need to deal with are strings.

30
00:01:26,900 --> 00:01:27,710
They're easy, too.

31
00:01:27,710 --> 00:01:29,270
Let me show you an example.

32
00:01:29,270 --> 00:01:32,520
Here we have a variable of type string,
and I'm setting its value to Hello.

33
00:01:33,790 --> 00:01:37,060
Moving on to control flow,
the only item that you need to know for

34
00:01:37,060 --> 00:01:39,330
control flow is if statements.

35
00:01:39,330 --> 00:01:43,300
If statements can determine what
branch or path your code should take.

36
00:01:43,300 --> 00:01:48,352
As an example, if i put something
like this, we can take one path if

37
00:01:48,352 --> 00:01:54,051
x is less than 50 and a different path
if x is greater than or equal to 50.

38
00:01:54,051 --> 00:01:57,670
If we want to see what path is chosen,
we can open the debug console and

39
00:01:57,670 --> 00:01:59,010
take a look at that.

40
00:01:59,010 --> 00:02:01,120
That's this middle button
here on the upper right.

41
00:02:02,120 --> 00:02:03,500
We're going to cover loops and

42
00:02:03,500 --> 00:02:06,160
the powerful switch statements in
the later part of this course.

43
00:02:07,790 --> 00:02:10,610
Classes are objects which
allow you to store values and

44
00:02:10,610 --> 00:02:13,340
have functions that
operate on those values.

45
00:02:13,340 --> 00:02:17,020
The really interesting part of
classes is that they have inheritance.

46
00:02:17,020 --> 00:02:20,020
And therefore,
they can carry forward any values and

47
00:02:20,020 --> 00:02:24,090
functionalities from their parent,
called a superclass.

48
00:02:24,090 --> 00:02:26,850
If we look at this view
controller definition here,

49
00:02:26,850 --> 00:02:30,470
we can see that it inherits
from UIViewController.

50
00:02:30,470 --> 00:02:35,150
And any instances or class functions
that I have would go here in the middle,

51
00:02:35,150 --> 00:02:36,730
where I have these two
green comment lines.

52
00:02:37,910 --> 00:02:40,880
You can declare class variables
that live in the class and

53
00:02:40,880 --> 00:02:44,500
functions that exist in every
instance of that class.

54
00:02:44,500 --> 00:02:46,720
Just remember two things
about classes in Swift.

55
00:02:47,990 --> 00:02:52,000
Everything in between the curly braces
for the class is inside the class and

56
00:02:52,000 --> 00:02:54,172
available to any function in the class.

57
00:02:54,172 --> 00:03:00,410
And the UIViewController here is
what this class inherits from.

58
00:03:00,410 --> 00:03:02,930
And it will be our hint
where to look for for

59
00:03:02,930 --> 00:03:06,400
built in functionality,
that is, what functionality

60
00:03:06,400 --> 00:03:10,560
our ViewController class inherits
from its parent UIViewController.

61
00:03:11,570 --> 00:03:15,900
Functions are a way to encompass
code and make it more reusable.

62
00:03:15,900 --> 00:03:20,740
Functions start with the keyword func,
followed by a name, then any parameters,

63
00:03:20,740 --> 00:03:21,610
and the return type.

64
00:03:22,660 --> 00:03:25,320
Here's an example of
the most basic function.

65
00:03:25,320 --> 00:03:28,190
It takes no parameters,
and it returns nothing.

66
00:03:28,190 --> 00:03:29,310
It just prints out Hello.

67
00:03:30,600 --> 00:03:33,320
We can call this function by
doing something like this.

68
00:03:34,790 --> 00:03:37,560
We can see Hello here is printed
out in the debug console.

69
00:03:38,730 --> 00:03:41,150
We can also have functions
that take a parameter.

70
00:03:41,150 --> 00:03:44,690
For example, if you wanted to
print Hello in many languages,

71
00:03:44,690 --> 00:03:46,475
we could write a function like this.

72
00:03:46,475 --> 00:03:50,230
printHelloMessage that takes
in a hello message string.

73
00:03:50,230 --> 00:03:52,490
Here we just simply
called it helloString.

74
00:03:52,490 --> 00:03:53,360
It's of type string.

75
00:03:53,360 --> 00:03:54,880
And then we print that message.

76
00:03:56,330 --> 00:03:58,855
To call this function,
we'd simply do something like this.

77
00:03:58,855 --> 00:04:02,670
printHelloMessage, and pass it
the message that we want it to send,

78
00:04:02,670 --> 00:04:05,780
in this case,
a hello greeting in Portuguese.

79
00:04:05,780 --> 00:04:08,970
So here we have the hello greeting in
English with the regular function,

80
00:04:08,970 --> 00:04:11,350
taking in no parameters,
returning nothing.

81
00:04:11,350 --> 00:04:13,470
And we have the Portuguese greeting, for

82
00:04:13,470 --> 00:04:17,180
the function it takes in one parameter
string, it also doesn't return anything.

83
00:04:17,180 --> 00:04:18,649
Just simply runs the print command.

84
00:04:19,760 --> 00:04:22,390
That's just a little bit of Swift
that you need to know before we

85
00:04:22,390 --> 00:04:24,870
dive into Xcode in iOS development.

86
00:04:24,870 --> 00:04:27,690
I've included a link below
on our Swift refresher and

87
00:04:27,690 --> 00:04:29,750
other resources if you
want to learn more.

88
00:04:29,750 --> 00:04:32,920
Hopefully you'll finish downloading and
installing Xcode.

89
00:04:32,920 --> 00:04:36,100
When you're ready, let's go about
creating your first iOS app.
