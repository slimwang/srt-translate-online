1
00:00:00,350 --> 00:00:03,320
So how do we compute discrete gradients?

2
00:00:03,320 --> 00:00:04,640
Well, what we want is,

3
00:00:04,640 --> 00:00:08,200
we want to come up with a, an operator, a mask or a kernel.

4
00:00:08,200 --> 00:00:10,020
Remember this, what we looked at before.

5
00:00:10,020 --> 00:00:16,056
That effectively computes the discrete derivatives using cross-correlation.

6
00:00:16,056 --> 00:00:19,719
I've always been talking about this whole concept to find a difference,

7
00:00:19,719 --> 00:00:23,677
which basically is nothing else but a numerical solution where basically we'd

8
00:00:23,677 --> 00:00:27,303
solve a differential equation using an approximation of derivatives.

9
00:00:27,303 --> 00:00:30,579
And in this case we basically come up with differences from one column to

10
00:00:30,579 --> 00:00:32,770
the other, or one row to the other.

11
00:00:32,770 --> 00:00:36,081
So what we are interested in, and we did this previously,

12
00:00:36,081 --> 00:00:40,472
is come up with a simple kernel, that when applied to an original image,

13
00:00:40,472 --> 00:00:45,360
in a cross-correlation framework, could be used to, generate a derivative.

14
00:00:45,360 --> 00:00:48,541
How do we do this for discrete, images?

15
00:00:48,541 --> 00:00:50,655
Well we want to be able to compute discrete gradients.

16
00:00:50,655 --> 00:00:53,441
We want to be looking for gradients in x and y direction.

17
00:00:53,441 --> 00:00:59,059
Again, remember, this was my equation looking for a change in x and y.

18
00:00:59,059 --> 00:01:02,845
In this case y is going to remain the same because I'm going column by column.

19
00:01:02,845 --> 00:01:08,170
In this case, I will be going, row by row and keep the same column.

20
00:01:08,170 --> 00:01:12,160
So, kinds of kernels we can generate to help assist with this are, for

21
00:01:12,160 --> 00:01:13,870
example this one.

22
00:01:13,870 --> 00:01:17,254
Where basically now I have zeros here, minus one, one, zero and zero.

23
00:01:17,254 --> 00:01:19,640
Of course I use this in a cross correlation framework.

24
00:01:19,640 --> 00:01:25,260
I'll be able to now generate a del x, our gradient change in x image.

25
00:01:25,260 --> 00:01:27,360
So those of you who are thinking how would I get the Hy,

26
00:01:27,360 --> 00:01:29,990
well I would actually just transpose this.

27
00:01:31,840 --> 00:01:32,660
Now again, so

28
00:01:32,660 --> 00:01:36,350
far we're talking about computing gradients using cross correlation.

29
00:01:36,350 --> 00:01:40,830
We're basically using Hx and Hy as the two kernels.

30
00:01:40,830 --> 00:01:44,010
Those of you who remember our conversation about cross correlation and

31
00:01:44,010 --> 00:01:48,390
convolution should be, be able to easily kind of predict how would we

32
00:01:48,390 --> 00:01:50,910
use the method of convolution here.

33
00:01:50,910 --> 00:01:54,444
And what we would have to do, the Hx and Hy, to be able to

34
00:01:54,444 --> 00:01:59,080
actually use the convolution process rather than the cross correlation process.

35
00:01:59,080 --> 00:02:03,970
because remember, this is not a, symmetric in both an x and y kernel.

36
00:02:03,970 --> 00:02:07,450
This symmetric in one axis but not both.

37
00:02:07,450 --> 00:02:13,020
So, ideally, a kernel should have some symmetry about an image point.

38
00:02:13,020 --> 00:02:14,590
And, overall, by combining these two,

39
00:02:14,590 --> 00:02:18,040
you might actually notice there is overall symmetry.

40
00:02:18,040 --> 00:02:19,720
So one question remains.

41
00:02:19,720 --> 00:02:22,010
Is where is the middle point of these kernels?

42
00:02:22,010 --> 00:02:24,830
Remember the processing we have actually done before where we have to

43
00:02:24,830 --> 00:02:27,540
look at and create a nine by nine kernel and

44
00:02:27,540 --> 00:02:30,090
then use that to kind of place the middle value.

45
00:02:30,090 --> 00:02:33,410
In this one, of course, there is no middle term here.

46
00:02:33,410 --> 00:02:37,554
So depending on how the operations are done, sometimes you would actually always

47
00:02:37,554 --> 00:02:41,412
have, have an image middle point here, or also kind always keep an offset.

48
00:02:41,412 --> 00:02:43,793
And I'll put an image point here.

49
00:02:43,793 --> 00:02:46,148
This does have an im, small impact.

50
00:02:46,148 --> 00:02:49,979
And we looked at it when we did simple differences from moving around the row.

51
00:02:49,979 --> 00:02:54,669
You will always be losing one column if I'm going around columns and

52
00:02:54,669 --> 00:02:59,010
if I'm coming down on rows you would lose one, row.

53
00:02:59,010 --> 00:03:02,490
So this is kind of way basically we will be looking at for information.

54
00:03:02,490 --> 00:03:07,211
But of course, you will also notice that sometimes we want to find kernels which

55
00:03:07,211 --> 00:03:12,084
allow you to have both symmetry and also, have a much well defined midpoint.

56
00:03:12,084 --> 00:03:16,690
For example, this is one kernel that is widely used.

57
00:03:16,690 --> 00:03:20,109
This should remind you of all of the other kernels we have looked, looked at for

58
00:03:20,109 --> 00:03:21,100
doing averaging.

59
00:03:21,100 --> 00:03:24,650
Here, basically what it's doing is taking the average of the information

60
00:03:24,650 --> 00:03:28,330
one column to the right and one column to the left.

61
00:03:28,330 --> 00:03:30,740
And of course, zeroing out everything else.

62
00:03:31,900 --> 00:03:35,370
So it's basically, an average of the left and the right derivatives.

63
00:03:35,370 --> 00:03:36,380
So is this a better kernel?

64
00:03:37,870 --> 00:03:41,840
Well, it does have a some features because it does have well defined midpoint.

65
00:03:41,840 --> 00:03:46,360
And also can actually, be used for doing various types of symmetry calculations.

66
00:03:46,360 --> 00:03:51,140
Transposing this, we can get the same kind of kernel in the y direction
