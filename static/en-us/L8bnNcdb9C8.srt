1
00:00:00,420 --> 00:00:02,590
I'm going to walk you through
an example of a method with a different

2
00:00:02,590 --> 00:00:04,860
number of input parameters.

3
00:00:04,860 --> 00:00:09,660
I started by creating a new app from
the project wizard in Android Studio, so

4
00:00:09,660 --> 00:00:12,800
this is completely unrelated
to the Just Java app.

5
00:00:12,800 --> 00:00:15,460
I added this method
in the main activity.

6
00:00:15,460 --> 00:00:17,420
It's called createWeatherMessage.

7
00:00:17,420 --> 00:00:21,650
There's no input parameters, and
the return value is a string.

8
00:00:21,650 --> 00:00:24,890
This method is supposed to create a new
message that specifies the city name and

9
00:00:24,890 --> 00:00:26,080
the temperature.

10
00:00:26,080 --> 00:00:29,590
You can think of a method as
being a template of instructions.

11
00:00:29,590 --> 00:00:32,320
So I can make temperature
be an input parameter.

12
00:00:33,550 --> 00:00:36,650
And it's a number, so
I'm going to say, int temperature.

13
00:00:36,650 --> 00:00:40,990
And then I can use this right here.

14
00:00:40,990 --> 00:00:43,540
So, this is a string literal, and

15
00:00:43,540 --> 00:00:46,000
then it's concatenated with
the temperature integer.

16
00:00:46,000 --> 00:00:51,310
And then it's concatenated with another
string that says degrees Fahrenheit.

17
00:00:51,310 --> 00:00:54,890
So now the message can be customized
based on the temperature because it's

18
00:00:54,890 --> 00:00:56,380
an input parameter.

19
00:00:56,380 --> 00:00:59,874
Oh yeah, I forgot to mention this
earlier, but in the onCreate method of

20
00:00:59,874 --> 00:01:03,198
the main activity, which is called
when the activity gets created,

21
00:01:03,198 --> 00:01:05,670
I can call the createWeatherMessage.

22
00:01:05,670 --> 00:01:10,040
Before I passed in no arguments, but
now we have one required parameter.

23
00:01:10,040 --> 00:01:14,630
So I'm going to pass in 77 for
the temperature.

24
00:01:14,630 --> 00:01:18,990
Now that makes the error go away,
and this method call is correct.

25
00:01:18,990 --> 00:01:21,900
The other thing I should modify
is this comment on the method.

26
00:01:22,940 --> 00:01:24,400
I'm going to add a blank line, and

27
00:01:24,400 --> 00:01:28,351
then I'll start to describe the input
parameter which is temperature here.

28
00:01:28,351 --> 00:01:31,385
I'm going to type @param temperature,
and

29
00:01:31,385 --> 00:01:34,265
then I can add a description saying that
this is the temperature of the city.

30
00:01:35,345 --> 00:01:38,555
Sometimes the parameter names
are a little hard to understand, so

31
00:01:38,555 --> 00:01:39,801
that's why the description is useful.

32
00:01:41,232 --> 00:01:44,832
Other times if your method is public
then other people will be able

33
00:01:44,832 --> 00:01:46,212
to call this method, and

34
00:01:46,212 --> 00:01:49,352
they might not know what
are the instructions inside this method.

35
00:01:49,352 --> 00:01:50,642
So reading this java doc and

36
00:01:50,642 --> 00:01:52,952
the description of the parameters
is really useful to them.

37
00:01:54,292 --> 00:01:57,242
I mentioned earlier that
a method is like a template.

38
00:01:57,242 --> 00:02:01,102
So, what if we want to change the city
so that it's not always San Francisco?

39
00:02:02,130 --> 00:02:04,280
I can make city be an input parameter.

40
00:02:04,280 --> 00:02:06,260
So I can just add a comma here.

41
00:02:06,260 --> 00:02:10,889
And since city name is text I'm
going to make it a string data type.

42
00:02:10,889 --> 00:02:15,740
Then I can delete San Francisco and
replace it with a variable city name.

43
00:02:16,870 --> 00:02:20,009
And remember to add a space before and
after here as well.

44
00:02:21,390 --> 00:02:24,410
Cool, so
now this method can create a message

45
00:02:24,410 --> 00:02:26,970
that's customizable to
a certain city and temperature.

46
00:02:26,970 --> 00:02:30,430
I also remembered to
modify the java doc so

47
00:02:30,430 --> 00:02:34,050
that it has this extra parameter and
description for a city name.

48
00:02:35,140 --> 00:02:39,100
Since I changed the method signature,
now I have an error up here.

49
00:02:39,100 --> 00:02:41,850
The method no longer works
with just one argument.

50
00:02:41,850 --> 00:02:44,130
I need to pass in two arguments.

51
00:02:44,130 --> 00:02:48,230
So I add a comma and
then pass in San Francisco string.

52
00:02:49,430 --> 00:02:51,130
Now the error goes away.

53
00:02:51,130 --> 00:02:56,140
So when I call createWeatherMessage(77,
it's going to be value of temperature,

54
00:02:56,140 --> 00:02:58,300
and San Francisco will be
the value of city name.

55
00:02:59,390 --> 00:03:01,783
And it will create
the proper string here.

56
00:03:03,813 --> 00:03:06,874
Now we're going to go back to
the calculate price method,

57
00:03:06,874 --> 00:03:09,480
and we're going to modify
the method signature so

58
00:03:09,480 --> 00:03:13,230
that it has a different
number of input parameters.

59
00:03:13,230 --> 00:03:18,710
We're going to define it with zero
input parameters, one input parameter,

60
00:03:18,710 --> 00:03:22,079
and lastly,
try it with two input parameters.

61
00:03:23,350 --> 00:03:26,660
You'll see how changing the method
signature here to have a different

62
00:03:26,660 --> 00:03:30,720
number of input parameters with affect
the way that the method is called.

63
00:03:30,720 --> 00:03:32,270
Normally when you're building your app,

64
00:03:32,270 --> 00:03:36,280
you will just define it one way with
a certain number of input parameters.

65
00:03:36,280 --> 00:03:39,360
And usually that number of input
parameters is going to be determined

66
00:03:39,360 --> 00:03:42,380
based off of what's
happening inside the method.

67
00:03:42,380 --> 00:03:45,330
The best practice is to
only pass input parameters

68
00:03:45,330 --> 00:03:47,590
that you're actually going
to need inside this method.

69
00:03:47,590 --> 00:03:50,450
There's no point in passing over more
information if you're not going to

70
00:03:50,450 --> 00:03:51,240
use it inside here.

71
00:03:51,240 --> 00:03:54,640
Here are the instructions for this task.

72
00:03:54,640 --> 00:03:58,568
First define the calculate price method
in your app in the main activity.

73
00:03:58,568 --> 00:04:01,470
See the instrructor notes for
a code snippet that you can start with.

74
00:04:01,470 --> 00:04:04,123
We're going to modify
the calculatePrice method so

75
00:04:04,123 --> 00:04:06,690
that it only has one input parameter.

76
00:04:06,690 --> 00:04:09,970
Then in the submitOrder method
call calculatePrice and

77
00:04:09,970 --> 00:04:12,230
pass in quantity as the input.

78
00:04:12,230 --> 00:04:16,450
Then try to modify the calculatePrice
method to have two input parameters.

79
00:04:16,450 --> 00:04:21,714
That way in the submitOrder method you
will call calculatePrice quantity and

80
00:04:21,714 --> 00:04:26,093
then you can pass in the price
which could be $10 for example.

81
00:04:26,093 --> 00:04:31,150
And lastly, try changing calculatePrice
so that it has zero input parameters.

82
00:04:31,150 --> 00:04:34,324
That way in the submitOrder method
you would just call calculatePrice

83
00:04:34,324 --> 00:04:34,870
like this.

84
00:04:35,950 --> 00:04:38,530
Let's do the first one together so
you understand what I mean.

85
00:04:38,530 --> 00:04:41,729
I'm going to open up the link
in the instructor notes.

86
00:04:41,729 --> 00:04:46,080
In this gist we provided code for
the calculatePrice method.

87
00:04:46,080 --> 00:04:50,480
So go ahead and
select everything and then copy it.

88
00:04:50,480 --> 00:04:53,160
In Android Studio,
I'm going to paste in this method.

89
00:04:53,160 --> 00:04:56,580
I'm just going to paste it in
right below submitOrder, and

90
00:04:56,580 --> 00:05:01,370
I'll make sure that there's a blank
line in between each method here.

91
00:05:01,370 --> 00:05:02,519
That makes it easier to read.

92
00:05:03,650 --> 00:05:07,140
Then I can call this method
from the submitOrder method.

93
00:05:07,140 --> 00:05:09,530
I'm just going to insert the call
at the very bottom of the method.

94
00:05:09,530 --> 00:05:12,430
Later we're going to integrate
it with the code up here.

95
00:05:12,430 --> 00:05:13,640
But for now, this is good.

96
00:05:14,940 --> 00:05:19,000
Oops, I forgot that we have one input
parameter, so I need a pass quantity.

97
00:05:20,790 --> 00:05:21,960
Now do the same for

98
00:05:21,960 --> 00:05:25,400
the remaining two tasks by modifying
the input parameters here.

99
00:05:27,000 --> 00:05:29,740
To complete this task,
if you need examples to reference,

100
00:05:29,740 --> 00:05:33,761
you can always do a Google search for
Java methods.
