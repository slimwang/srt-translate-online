1
00:00:00,440 --> 00:00:04,180
There are many ways to solve this quiz,
but this is what I came up with.

2
00:00:04,180 --> 00:00:07,500
I'm using an array to store up the
different sections of the template and

3
00:00:07,500 --> 00:00:11,320
then join them together to become
the body of the constructor function.

4
00:00:11,320 --> 00:00:14,510
First I set up my delimiters and
some variables.

5
00:00:14,510 --> 00:00:17,710
This section here updates the default
delimiters with any custom ones

6
00:00:17,710 --> 00:00:18,510
that are passed in.

7
00:00:19,700 --> 00:00:23,105
Here I split on every occurrence
of the starting delimiter.

8
00:00:23,105 --> 00:00:27,982
Then i loop over each segment,
find where the closing delimiter is.

9
00:00:27,982 --> 00:00:31,295
I grab what's in the middle,
which will become the variable.

10
00:00:31,295 --> 00:00:34,450
And then I add the remaining stuff
after the closing delimiter.

11
00:00:35,930 --> 00:00:39,200
Then I join each of the different
segments back together and

12
00:00:39,200 --> 00:00:42,060
add a loop to log the template once for
each time.

13
00:00:42,060 --> 00:00:43,930
Then I create the function.

14
00:00:43,930 --> 00:00:46,380
Then I join each of
the segments back together and

15
00:00:46,380 --> 00:00:48,440
add a loop to log the template once for
each time.

16
00:00:49,460 --> 00:00:50,850
Then I create the constructor function.

17
00:00:51,990 --> 00:00:55,750
One tricky part is that the body of
the function has to be a string, but

18
00:00:55,750 --> 00:00:59,190
those quotes are removed when
inserted into a constructor function.

19
00:00:59,190 --> 00:01:01,980
So for something to be a string
inside of a constructor function,

20
00:01:01,980 --> 00:01:04,830
you have to wrap them
in two sets of quotes.

21
00:01:04,830 --> 00:01:07,640
That's what these wrapInQuotes
function calls are doing.
