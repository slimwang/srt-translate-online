1
00:00:00,450 --> 00:00:05,190
Another issue to consider is how often do we run the scheduler?

2
00:00:05,190 --> 00:00:09,180
The more frequently we run it the more CPU time is wasted on

3
00:00:09,180 --> 00:00:13,090
running the scheduler versus running application processes.

4
00:00:13,090 --> 00:00:18,430
So, another way to ask this same question is how long should a process run?

5
00:00:18,430 --> 00:00:20,040
The longer we run a process,

6
00:00:20,040 --> 00:00:23,371
the less frequently we are invoking the scheduler to execute.

7
00:00:24,640 --> 00:00:29,030
Consider this scenario in which we are running processes for amount of time Tp,

8
00:00:30,070 --> 00:00:33,810
and the scheduler takes some amount of time Tsched to execute.

9
00:00:34,920 --> 00:00:38,470
If you want to understand how well the CPU was utilized, we have

10
00:00:38,470 --> 00:00:43,280
to divide the total processing time that was performed during an interval.

11
00:00:43,280 --> 00:00:47,980
So during this interval that was 2 times Tp and

12
00:00:47,980 --> 00:00:50,780
then divide that by the total duration of the interval.

13
00:00:50,780 --> 00:00:53,470
So the total duration of the interval is 2 times Tp plus 2 times

14
00:00:54,480 --> 00:00:56,070
the scheduling interval.

15
00:00:57,250 --> 00:01:02,080
If the processing time and the scheduling time are equal as in this picture,

16
00:01:02,080 --> 00:01:07,150
that means that only 50% of the CPU time is spent on useful work.

17
00:01:07,150 --> 00:01:12,910
Half of the time during this interval, the CPU was basically doing systems

18
00:01:12,910 --> 00:01:17,740
processing work, scheduling, and that time should be considered overhead.

19
00:01:17,740 --> 00:01:19,830
Let's now look at the second interval,

20
00:01:19,830 --> 00:01:24,840
where the processing time Tp is much larger than the scheduling time.

21
00:01:24,840 --> 00:01:29,340
And let's assume that it's actually 10 times the scheduling time, not to scale.

22
00:01:29,340 --> 00:01:33,670
So if we work out the math here, we will find out that almost 91% of

23
00:01:34,700 --> 00:01:38,430
the CPU time was spent on actually doing useful work.

24
00:01:38,430 --> 00:01:41,190
So we're doing much better in this interval in terms of

25
00:01:41,190 --> 00:01:43,350
the efficiency of the CPU.

26
00:01:43,350 --> 00:01:45,180
How much of it is used for

27
00:01:45,180 --> 00:01:49,740
useful application processing versus in this previous time.

28
00:01:49,740 --> 00:01:54,780
In these examples, Tp refers to the time that's allocated to a process that

29
00:01:54,780 --> 00:01:56,710
has been scheduled to run.

30
00:01:56,710 --> 00:02:00,400
And so the time that that process can consume on the CPU.

31
00:02:00,400 --> 00:02:03,240
We refer to this time as the timeslice.

32
00:02:03,240 --> 00:02:05,460
As you can see there are a lot of decisions and

33
00:02:05,460 --> 00:02:10,530
tradeoffs that we must make when we're considering how to design a scheduler.

34
00:02:10,530 --> 00:02:14,470
Some of these include deciding what are appropriate timeslice values for

35
00:02:14,470 --> 00:02:19,230
instance, or deciding what would be good metrics that are useful when

36
00:02:19,230 --> 00:02:23,230
the scheduler is choosing what's the next process it should run.

37
00:02:23,230 --> 00:02:26,170
I will discuss these design issues in a later lesson.

38
00:02:26,170 --> 00:02:30,490
But for now you need to be aware that some decisions need to be made.
