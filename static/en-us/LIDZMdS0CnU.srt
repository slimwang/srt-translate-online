1
00:00:00,230 --> 00:00:05,415
When I start at some value a, and then it goes up to b including b, with a less

2
00:00:05,415 --> 00:00:15,480
than or equal sign here. Then there are b minus a plus 1 values. That plus 1 is

3
00:00:15,480 --> 00:00:22,254
a fence post, plus 1. For example, over here, we start at 10, we go to 20, and

4
00:00:22,254 --> 00:00:30,500
we have 20 minus 10 plus 1. That's 11 values. What about the case? When i

5
00:00:30,500 --> 00:00:35,746
starts at some point and then it goes less to another point, in that case we

6
00:00:35,746 --> 00:00:44,093
have b minus a values. For example, if over here we change the less equal to a

7
00:00:44,093 --> 00:00:53,576
less than sign. Then we have 20 minus 10, or 10 values. Namely the values, 10,

8
00:00:53,576 --> 00:00:58,545
11, up to 19. That's a very common situation that you've seen before. Let me

9
00:00:58,545 --> 00:01:03,420
remind you, the situation where you, you have a less than for the upper bound.

10
00:01:03,420 --> 00:01:06,673
Is actually very common and you've seen it several times before. For example,

11
00:01:06,673 --> 00:01:10,615
now look at your left. There is the program that looks at all of the letters in

12
00:01:10,615 --> 00:01:14,480
a string. And when you look at the bounds you again notice a less than sign

13
00:01:14,480 --> 00:01:19,302
here. We go less than and the length of the word. So when we look at our

14
00:01:19,302 --> 00:01:25,589
formula over here. In this case, a is 0, and b is word.length. So how many

15
00:01:25,589 --> 00:01:31,446
iterations do we have? We have word.length minus 0 iterations. And that makes

16
00:01:31,446 --> 00:01:36,097
perfect sense. Because we have one iteration for every letter in the word. And

17
00:01:36,097 --> 00:01:39,559
word.length is the number of letters in the word.
