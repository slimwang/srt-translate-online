1
00:00:00,670 --> 00:00:04,340
Before we move into writing the code for
pitch perfect, I want to cover a softer

2
00:00:04,340 --> 00:00:07,340
pattern that'll be really useful
in your time as an iOS developer.

3
00:00:08,460 --> 00:00:10,920
Let me introduce the MVC pattern to you.

4
00:00:10,920 --> 00:00:14,420
We're going to build the pitch perfect
up using this pattern, so knowing it

5
00:00:14,420 --> 00:00:18,930
will be really handy to figure out
where we are, and where we need to be.

6
00:00:18,930 --> 00:00:21,790
The model view controller pattern
hails back from the Mac development

7
00:00:21,790 --> 00:00:23,200
days of the 80s.

8
00:00:23,200 --> 00:00:26,020
And it's still as useful
today as it was then.

9
00:00:26,020 --> 00:00:29,420
You'll see it called model view
controller or MVC for short.

10
00:00:30,560 --> 00:00:33,280
We can think of our pitch perfect
cap as having three parts.

11
00:00:34,310 --> 00:00:37,880
The view, which the user sees
with the buttons, the model,

12
00:00:37,880 --> 00:00:41,360
which is what was stored to recorded
audio file, and the controller,

13
00:00:41,360 --> 00:00:45,320
which we used to store and retrieve data
from the model and show it in the view.

14
00:00:46,530 --> 00:00:48,290
Think of the data your app contains.

15
00:00:49,320 --> 00:00:51,220
For pitch perfect this
is just an audio file.

16
00:00:51,220 --> 00:00:53,730
But as you progress as an IOS developer,

17
00:00:53,730 --> 00:00:56,040
you will build ever
more complicated apps.

18
00:00:56,040 --> 00:00:58,570
Which you need to store a lot more data.

19
00:00:58,570 --> 00:01:00,690
All of the costs involved
with storing and

20
00:01:00,690 --> 00:01:03,630
maintaining this data can be
referred to as the model.

21
00:01:04,760 --> 00:01:07,560
On the other side of
the diagram we have the view.

22
00:01:07,560 --> 00:01:10,720
The view is what the user sees on screen
and how they interact with the app.

23
00:01:11,900 --> 00:01:14,600
The view does not know anything
about the data itself or

24
00:01:14,600 --> 00:01:17,080
the model as we call it here.

25
00:01:17,080 --> 00:01:20,090
It only knows how to display
the subset of data that it's given.

26
00:01:20,090 --> 00:01:21,590
It is just your user interface.

27
00:01:22,910 --> 00:01:25,980
In between them, and in charge of
providing the view with data and

28
00:01:25,980 --> 00:01:28,810
the model with any
actions from the view.

29
00:01:28,810 --> 00:01:30,260
Is the Controller.

30
00:01:30,260 --> 00:01:35,660
When the user action happens on
the view, the Controller is notified.

31
00:01:35,660 --> 00:01:37,250
If needed, it updates the Model.

32
00:01:38,340 --> 00:01:41,360
When the Model is changed
by some external event,

33
00:01:41,360 --> 00:01:46,150
it notifies the Controller,
which can update the View if needed.

34
00:01:47,360 --> 00:01:48,390
Maybe you're thinking.

35
00:01:48,390 --> 00:01:51,650
Why not just embed all
of the model data code.

36
00:01:51,650 --> 00:01:52,600
Inside the view.

37
00:01:53,620 --> 00:01:56,780
What's often the case that you need
to have multiple different views.

38
00:01:56,780 --> 00:01:59,500
To show some parts of the same data.

39
00:01:59,500 --> 00:02:00,940
What would you do then?

40
00:02:00,940 --> 00:02:03,850
Copy and pasting the code would
quickly turn this project

41
00:02:03,850 --> 00:02:07,350
into what one of my colleagues
refers to as copy pasta.

42
00:02:07,350 --> 00:02:10,680
Great to eat but
horrible to have in your code.

43
00:02:10,680 --> 00:02:14,230
Having a division in
responsibility between the model.

44
00:02:14,230 --> 00:02:19,720
The view and the controller in between
makes your code easy to maintain,

45
00:02:19,720 --> 00:02:21,930
easy to understand, and reusable.

46
00:02:23,400 --> 00:02:26,910
As we start building pitch perfect
together, you're going to see the model,

47
00:02:26,910 --> 00:02:30,060
the view, and the controller parts,
and how they communicate.

48
00:02:31,400 --> 00:02:33,880
Students have found it really
handy to have this pattern and

49
00:02:33,880 --> 00:02:35,180
thought in the back of their minds.

50
00:02:35,180 --> 00:02:37,540
As they are developing for iOS.

51
00:02:37,540 --> 00:02:40,298
It helps to keep your app structured and
easier to develop.
