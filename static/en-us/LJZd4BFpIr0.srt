1
00:00:00,000 --> 00:00:02,932
So here is my solution to the programming

2
00:00:02,932 --> 00:00:05,313
assignment where I asked you to program an

3
00:00:05,313 --> 00:00:08,193
online version of online SLAM. Let me run it

4
00:00:08,193 --> 00:00:11,458
and compare it to the offline SLAM. When

5
00:00:11,458 --> 00:00:13,809
I run it, I get random landmarks and a random

6
00:00:13,809 --> 00:00:16,991
initial robot pose. My offline solution gives me

7
00:00:16,991 --> 00:00:21,226
this long path over here and estimated landmarks,

8
00:00:21,226 --> 00:00:23,465
and the remarkable thing here is that my online

9
00:00:23,465 --> 00:00:28,049
version that I coded gives me the same final pose

10
00:00:28,049 --> 00:00:31,465
and the same landmarks without retaining this huge

11
00:00:31,465 --> 00:00:34,597
matrix for the path before. So how did I do this?

12
00:00:34,597 --> 00:00:36,929
Here is my online SLAM routine. In large parts

13
00:00:36,929 --> 00:00:39,979
it looks exactly like my offline SLAM routine.

14
00:00:39,979 --> 00:00:45,021
I do it in 2D  I have a measurement and motion.

15
00:00:45,021 --> 00:00:49,096
Step, here is my measurement update. I have to

16
00:00:49,096 --> 00:00:51,057
get all these indices right so you can stare at

17
00:00:51,057 --> 00:00:52,811
them for a while, but theyre all correct here,

18
00:00:52,811 --> 00:00:55,543
there is a plus one and minus one over here.

19
00:00:55,543 --> 00:00:57,596
And here is the first nontrivial thing. My

20
00:00:57,596 --> 00:01:00,057
matrix so far has one robot pose and one

21
00:01:00,057 --> 00:01:02,605
entry for each landmark, but now I need to

22
00:01:02,605 --> 00:01:04,739
add space for the next robot pose. And the

23
00:01:04,739 --> 00:01:07,070
way I do this is, I make an expansion list

24
00:01:07,070 --> 00:01:10,281
using the expand command. And this expansion

25
00:01:10,281 --> 00:01:12,681
list retains the original robot pose, which is

26
00:01:12,681 --> 00:01:14,004
coded 0 and 1, these are two-dimensional

27
00:01:14,004 --> 00:01:17,321
poses, and indices for the landmarks.

28
00:01:17,321 --> 00:01:20,912
So, Im squeezing in two new rows and two new

29
00:01:20,912 --> 00:01:23,276
columns for the next robot pose. Thats

30
00:01:23,276 --> 00:01:24,998
happening in this code over here. With this

31
00:01:24,998 --> 00:01:28,266
squeezed in, I can now do the update. The

32
00:01:28,266 --> 00:01:30,470
update is being applied exactly at these two

33
00:01:30,470 --> 00:01:34,281
new rows and columns that I put in. And here

34
00:01:34,281 --> 00:01:37,099
is the math I gave you for factorization applied

35
00:01:37,099 --> 00:01:39,397
to this problem, where I go and compute the

36
00:01:39,397 --> 00:01:41,362
intermediate matrices A, B and C that I

37
00:01:41,362 --> 00:01:43,148
explained in class. And then I use the take

38
00:01:43,148 --> 00:01:47,143
command to kick out the very first row and

39
00:01:47,143 --> 00:01:49,271
column, the first two of them, to remove the

40
00:01:49,271 --> 00:01:52,974
old robot pose, using the exact same logic

41
00:01:52,974 --> 00:01:55,337
that I gave you in class. So you can look at

42
00:01:55,337 --> 00:01:59,000
this, this actually implements online SLAM.
