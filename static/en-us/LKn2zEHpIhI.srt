1
00:00:00,500 --> 00:00:03,710
In crossbar switching every input port has a connection

2
00:00:03,710 --> 00:00:07,190
to every output port, and during each time slot, each

3
00:00:07,190 --> 00:00:11,800
input is connected to zero or one outputs. The crossbar

4
00:00:11,800 --> 00:00:14,510
is often depicted as follows. So if one wants to

5
00:00:14,510 --> 00:00:16,800
send to four, we could connect the input to

6
00:00:16,800 --> 00:00:19,630
the output in that time slot, and now this row

7
00:00:19,630 --> 00:00:22,770
and this column is occupied. But we could connect two

8
00:00:22,770 --> 00:00:25,670
to six and three to five in the same time

9
00:00:25,670 --> 00:00:29,980
slot without introducing contention. So the advantage

10
00:00:29,980 --> 00:00:31,270
of this design is that it can

11
00:00:31,270 --> 00:00:34,440
exploit parallelism by allowing multiple packets to

12
00:00:34,440 --> 00:00:36,990
be forwarded across the interconnect in parallel.

13
00:00:36,990 --> 00:00:42,010
But of course we also need proper scheduling algorithms To ensure fair use of

14
00:00:42,010 --> 00:00:44,180
the crossbar switch. Let's take a quick

15
00:00:44,180 --> 00:00:46,480
look at what this algorithm needs to achieve.
