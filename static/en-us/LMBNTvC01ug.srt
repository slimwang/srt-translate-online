1
00:00:00,000 --> 00:00:05,000
What you could get out of that is an automatic cause-effect chain

2
00:00:05,000 --> 00:00:11,000
isolating the causes for different places during the program execution.

3
00:00:11,000 --> 00:00:17,000
For instance, at the beginning s had a value of double quote and <,

4
00:00:17,000 --> 00:00:24,000
then c became a double quote again are well-defined in the failing room,

5
00:00:24,000 --> 00:00:31,000
then quote became true, and then out became <, which caused this version to fail.

6
00:00:31,000 --> 00:00:36,000
This cause-effect chain is what you get when you apply delta debugging

7
00:00:36,000 --> 00:00:40,000
on state differences at various places during the execution.

8
00:00:40,000 --> 00:00:45,000
In producing such a cause-effect chain automatically is your homework.

9
00:00:45,000 --> 00:00:49,000
This is a very cool outcome but is also a pretty tricky homework.

10
00:00:49,000 --> 00:00:54,000
In particular, setting variables while the program is executing

11
00:00:54,000 --> 00:01:00,000
is a feature that's very rarely used, very rarely tested, and therefore full of surprises.

12
00:01:00,000 --> 00:01:04,000
On the web page, you will find a number of hints and code templates

13
00:01:04,000 --> 00:01:07,000
that help you in accomplishing this task.

14
00:01:07,000 --> 00:01:11,000
Having such a cause-effect chain and getting it automatically

15
00:01:11,000 --> 00:01:13,000
sounds like a great promise for debugging

16
00:01:13,000 --> 00:01:19,000
In particular because it very neatly tells you the story of how the failure came to be.

17
00:01:19,000 --> 00:01:25,000
In particular the relationship of c having a double quote and then the quote variable becoming true

18
00:01:25,000 --> 00:01:29,000
points you directly to the condition, which is at fault at this point.

19
00:01:29,000 --> 00:01:31,000
It should--oh, sorry.

20
00:01:31,000 --> 00:01:36,000
This is already the closest to a fully automatic debugging tool we can get at this point.

21
00:01:36,000 --> 00:01:40,000
However, it is worth to very much consider the limitations.

22
00:01:40,000 --> 00:01:43,000
First and foremost you need to similar runs.

23
00:01:43,000 --> 00:01:50,000
The higher the similarity, the higher the chances of finding a small set of failure-inducing differences.

24
00:01:50,000 --> 00:01:54,000
Even in our homework implementation, there is many things we don't handle.

25
00:01:54,000 --> 00:01:57,000
We'll only handle scalar values and strings.

26
00:01:57,000 --> 00:02:04,000
We won't go into details of how to find differences between say, this or dictionaries

27
00:02:04,000 --> 00:02:10,000
or graph structures, and finally, all of these are still very experimental,

28
00:02:10,000 --> 00:02:14,000
but the fact that it's experimental calls for many ways to extend this,

29
00:02:14,000 --> 00:02:17,000
and this again can be part of your homework.

30
00:02:17,000 --> 00:02:23,000
Again, on the web page, you will find a number of ways of how to further expand this.

31
00:02:23,000 --> 00:02:25,000
So go and build fully automatic debugging for Python programs. Enjoy.
