1
00:00:00,000 --> 00:00:05,320
Now, the important thing to understand to be able to figure this out here

2
00:00:05,320 --> 00:00:08,150
is that if the Boolean formula has a satisfying assignment

3
00:00:08,150 --> 00:00:15,148
then a shortest path from A to B that visits all vertices can visit each of these vertices

4
00:00:15,148 --> 00:00:19,849
by basically paying just one extra edge.

5
00:00:19,849 --> 00:00:26,070
Instead of going this way, we have to go this way exactly once for each clause.

6
00:00:26,070 --> 00:00:31,130
The length of the shortest path from A to B that visits all vertices

7
00:00:31,130 --> 00:00:39,390
is the same as the shortest path from A to B that does not visit the clause vertices plus m

8
00:00:39,390 --> 00:00:44,520
because we have to pay one extra edge for each clause vertex that we visit here.

9
00:00:44,520 --> 00:00:47,520
It's something plus m and we know that

10
00:00:47,520 --> 00:00:53,490
there is a path between A and B that visits each vertex exactly once,

11
00:00:53,490 --> 00:00:58,950
and so, the path length from A to B is almost the same as the number of vertices,

12
00:00:58,950 --> 00:01:01,880
it's just one less, so you can see this here in the example.

13
00:01:01,880 --> 00:01:08,300
If I have two vertices then the shortest path would mean those vertices is one so one less

14
00:01:08,300 --> 00:01:14,750
If I go 1, 2, 3, 4, 5 vertices then the path has length four and so on.

15
00:01:14,750 --> 00:01:20,340
What we have here is 5n + 3 mn +1 and then we have to add m.

16
00:01:20,340 --> 00:01:28,159
Our total here is 5m + 3mn +1. And now, we are almost done.

17
00:01:28,159 --> 00:01:32,950
We have shown that if the Boolean formula has a satisfying assignment

18
00:01:32,950 --> 00:01:41,240
then the length of the shortest path from A to B that visits all vertices has length 5n + m + 3mn +1

19
00:01:41,240 --> 00:01:44,310
Where n is the number of variables and m is the number of clauses.

20
00:01:44,310 --> 00:01:47,840
Now, we also have to show the other direction of course.

21
00:01:47,840 --> 00:01:54,640
If there is a shortest path between A and B of length 5n + m + 3mn +1

22
00:01:54,640 --> 00:01:56,950
then each clause in the Boolean Formula can be satisfied.

23
00:01:56,950 --> 00:01:59,640
We have a satisfying assignment.

24
00:01:59,640 --> 00:02:01,620
Right now, we have shown that if the Boolean formula is satisfied

25
00:02:01,620 --> 00:02:07,030
then we have a path of this length and now, we need to show the other direction as well of course.

26
00:02:07,030 --> 00:02:10,900
If we have a path of this length then the Boolean formula has a satisfying assignment.

27
00:02:10,900 --> 00:02:13,710
Why do we need to show those two directions?

28
00:02:13,710 --> 00:02:18,709
That is because the requirement for reduction is that our new instance that we constructed here

29
00:02:18,709 --> 00:02:24,920
is a yes instance if and only if this Boolean formula up here has a satisfying assignment

30
00:02:24,920 --> 00:02:28,640
Right now, we have shown the if and now, we have to show the only if,

31
00:02:28,640 --> 00:02:32,190
but this is actually quite easy because if we know that there is a path

32
00:02:32,190 --> 00:02:34,450
between A and B of this length here then we already know

33
00:02:34,450 --> 00:02:40,810
that each vertex is visited exactly once because this is the bear minimum of a tour between A and B

34
00:02:40,810 --> 00:02:42,920
given this many vertices.

35
00:02:42,920 --> 00:02:47,990
Secondly, we know that the tour will correspond to a variable assignment

36
00:02:47,990 --> 00:02:50,430
It will correspond to an assignment of true and false to these vertices here

37
00:02:50,430 --> 00:02:54,640
because otherwise we would visit a city more than once.

38
00:02:54,640 --> 00:02:58,300
We've already shown that and finally, we have also shown that each clause can be satisfied

39
00:02:58,300 --> 00:03:04,760
because we can only visit a vertex down here like that with paying just one extra edge

40
00:03:04,760 --> 00:03:08,180
if the assignment up here corresponds to a satisfying assignment.

41
00:03:08,180 --> 00:03:13,320
And now, we are almost done in showing that shortest tour is NP complete.

42
00:03:13,320 --> 00:03:16,750
I don't know if you noticed, but there is one small detail missing

43
00:03:16,750 --> 00:03:23,530
Right now, we are only going from A to B and we are asking for the shortest path from A to B.

44
00:03:23,530 --> 00:03:27,780
We are not asking for shortest tour yet and that is actually quite easy to fix.

45
00:03:27,780 --> 00:03:35,870
We'll just remove this vertex B here and make this edge very, very, very, very long over here

46
00:03:35,870 --> 00:03:38,280
and then it's not the length of the shortest path from A to B anymore,

47
00:03:38,280 --> 00:03:40,510
but it's the length of the shortest tour.

48
00:03:40,510 --> 00:03:48,670
And of course, that length is only true if and only if the Boolean formula is satisfiable

49
00:03:48,670 --> 00:03:51,420
And we're done. We have reduced SAT to a shortest tour.

50
00:03:51,420 --> 00:03:54,060
We have shown that shortest tour is in NP.

51
00:03:54,060 --> 00:03:58,530
So, now, our final conclusion this problem here is NP-complete

52
00:03:58,530 --> 00:04:04,650
Of course, it's a bit ironic that showing that a problem such as shortest tour is NP complete

53
00:04:04,650 --> 00:04:06,960
can sometimes feel like solving an NP complete problem in itself.

54
00:04:06,960 --> 99:59:59,999
That's why I would now like to show you how to even further simplify that problem is NP complete.
