1
00:00:00,180 --> 00:00:03,990
Back in lesson one and two,
one of the tables in the zoo database we

2
00:00:03,990 --> 00:00:08,850
talked about, was the diet table which
describes which foods each species eats.

3
00:00:08,850 --> 00:00:12,850
We looked at three ways we could store
multiple foods, for a single species.

4
00:00:12,850 --> 00:00:14,450
As multiple food columns and

5
00:00:14,450 --> 00:00:19,050
one row per species, as a single
column with foods separated by commas.

6
00:00:19,050 --> 00:00:22,410
And has separate rows, for
each food comma species pair and

7
00:00:22,410 --> 00:00:25,690
I mentioned that this form, has some
big advantages over the other two.

8
00:00:25,690 --> 00:00:29,440
It works better with drawings,
it works better in comparisons and

9
00:00:29,440 --> 00:00:33,150
you don't have to know in advance how
many foods there are, and we also looked

10
00:00:33,150 --> 00:00:37,390
at these two tables of donors to
the zoo and their phone numbers.

11
00:00:37,390 --> 00:00:40,380
In order to avoid duplication,
we split the information that

12
00:00:40,380 --> 00:00:44,120
was in one object or it's record,
into two separate tables.

13
00:00:44,120 --> 00:00:47,340
In database jargon,
these are called normalized forms and

14
00:00:47,340 --> 00:00:49,920
the others are denormalized forms.

15
00:00:49,920 --> 00:00:53,220
Normalization is the central
idea in database design.

16
00:00:53,220 --> 00:00:56,100
Normalizing involves making
the relationships among the tables in

17
00:00:56,100 --> 00:00:59,390
your database, match the relationships
that are really there amongst

18
00:00:59,390 --> 00:01:00,910
the various pieces of data.

19
00:01:00,910 --> 00:01:03,640
There's a bunch of database
theory behind this idea.

20
00:01:03,640 --> 00:01:07,240
I put a link in the instructor notes to
a paper with lots of details about it.

21
00:01:07,240 --> 00:01:09,740
Up ahead, I'll just tell you
the most relevant highlights.
