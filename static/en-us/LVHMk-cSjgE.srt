1
00:00:00,012 --> 00:00:03,780
Lets take a look at the solution to this its a little bit tricky. Firstly, at

2
00:00:03,792 --> 00:00:07,455
the top of our file we declare two new variables, frameRate and frame. Now,

3
00:00:07,467 --> 00:00:11,796
frameRate represents how often we'd like to actually call the animate function.

4
00:00:11,796 --> 00:00:15,799
Frame is a variable that we're going to use to represent what the current frame

5
00:00:15,811 --> 00:00:19,476
in our flip book is. Since we already have our frames array available, the next

6
00:00:19,476 --> 00:00:23,767
step is to actually loop through our predefined assets, and load each of the

7
00:00:23,779 --> 00:00:27,726
defined images into the frames array. This follows the same 3 step process we

8
00:00:27,738 --> 00:00:31,815
saw before: create a new image, set its on load result, and then set its source.

9
00:00:31,897 --> 00:00:35,115
Once this is done we can actually call this setInterval function, which will

10
00:00:35,127 --> 00:00:38,300
call the animate function at the frameRate that we provided before. Now the

11
00:00:38,312 --> 00:00:41,560
animate function has a little bit of tricky logic inside of it. First off, we

12
00:00:41,572 --> 00:00:45,432
have our frame counter that we've defined. We use this to define what image out

13
00:00:45,444 --> 00:00:49,106
of the frames array we have to draw to the canvas, and of course, at our lovely

14
00:00:49,118 --> 00:00:52,834
position of 192 by 192. Once we've drawn the current frame we actually have to

15
00:00:52,846 --> 00:00:55,785
increment it, and that's where this little nice piece of math comes along. What

16
00:00:55,785 --> 00:01:00,317
we do is increment the frame counter and then modulo it by the frame's length.

17
00:01:00,406 --> 00:01:04,313
What will occur here is that if frame ever becomes longer than frame length, the

18
00:01:04,325 --> 00:01:08,465
modulo function will have it loop around back to 0 without us having to have all

19
00:01:08,465 --> 00:01:11,556
the other if statements involved. This is a nice little piece of math that you

20
00:01:11,556 --> 00:01:14,499
should put in your code. Your employer will be impressed by it. Now if you

21
00:01:14,499 --> 00:01:17,248
followed all the code, you should see something like this running around on the

22
00:01:17,260 --> 00:01:20,843
screen. If you'll notice, something of this doesn't exactly look right. You

23
00:01:20,855 --> 00:01:24,665
actually get each of the frames drawn over each other, creating this sort of

24
00:01:24,677 --> 00:01:28,116
halo effect. There's a reason for this. It's worth noting that the canvas

25
00:01:28,116 --> 00:01:32,390
doesn't actually clear itself each frame. Instead it allows you to just keep

26
00:01:32,402 --> 00:01:35,954
piling pixels on it as you go. In order to get rid of that ghosting effect, you

27
00:01:35,954 --> 00:01:40,016
have to put this line that we've conveniently left out of our previous function

28
00:01:40,016 --> 00:01:44,641
back in, and that is context.clearRect. What this will do is actually clear all

29
00:01:44,653 --> 00:01:48,507
of the pixels to some default value allowing us to draw back on top of it. So

30
00:01:48,519 --> 00:01:52,690
you won't get the previous images actually drawn on top of each other. The

31
00:01:52,702 --> 00:01:56,990
result is a nice, nifty walking robot running around on your screen, just like

32
00:01:57,002 --> 00:02:01,172
it should. The result with clearRect is this nice, fancy walking robot.
