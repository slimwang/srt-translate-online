1
00:00:00,157 --> 00:00:00,669
All right.

2
00:00:00,669 --> 00:00:02,080
So let's go through the solution.

3
00:00:02,080 --> 00:00:05,552
So here I've written as if I only had two points, point 1 and

4
00:00:05,552 --> 00:00:08,223
point n with a whole bunch of points in the middle.

5
00:00:08,223 --> 00:00:08,860
Okay.

6
00:00:08,860 --> 00:00:12,065
So I've got the matrix A times m equals 0.

7
00:00:12,065 --> 00:00:13,946
How big is the matrix A?

8
00:00:13,946 --> 00:00:15,640
Well, it's 12 across.

9
00:00:15,640 --> 00:00:19,204
Right? Because there are 12 ms and how many rows does it have?

10
00:00:19,204 --> 00:00:22,501
Well, it has 2 times n, where n is the number of points.

11
00:00:22,501 --> 00:00:25,148
So it's a 2n by 12 matrix.

12
00:00:25,148 --> 00:00:31,139
M is just and m by 1 vector and here's the 0 vector of length 2n.

13
00:00:31,139 --> 00:00:31,927
Okay?

14
00:00:31,927 --> 00:00:33,924
So now let's talk about solving that.

15
00:00:33,924 --> 00:00:35,585
One step at a time here.

16
00:00:35,585 --> 00:00:36,897
All right. So here's our goal, right?

17
00:00:36,897 --> 00:00:40,740
We said, we want a unit vector that minimizes Am.

18
00:00:40,740 --> 00:00:43,643
A unit vector for m that minimizes Am.

19
00:00:43,643 --> 00:00:47,568
So let's do what's called the singular value decomposition and

20
00:00:47,568 --> 00:00:51,863
I'm going to assume that you've seen that before, at least some place.

21
00:00:51,863 --> 00:00:55,536
But the idea is that any matrix can be decomposed in

22
00:00:55,536 --> 00:01:00,360
to this UDV transpose format where V is a real orthogonal matrix.

23
00:01:00,360 --> 00:01:04,063
So in our case, it would probably be a 12 by 12.

24
00:01:04,063 --> 00:01:07,185
U is going to be a much bigger matrix.

25
00:01:07,185 --> 00:01:09,660
It says, orthogonal, but I should, can be more precise.

26
00:01:09,660 --> 00:01:12,018
Each column's orthogonal to each other, so

27
00:01:12,018 --> 00:01:14,198
that would be, in this case a 2n by 12.

28
00:01:14,198 --> 00:01:18,459
And most importantly, D is a diagonal matrix.

29
00:01:18,459 --> 00:01:21,042
So it only has values in the diagonal and

30
00:01:21,042 --> 00:01:25,436
it is customary to write it in decreasing order of absolute value.

31
00:01:25,436 --> 00:01:28,141
So from the biggest D to the smallest, all right?

32
00:01:28,141 --> 00:01:32,065
So we're going to write A is equal to UDV transposed.

33
00:01:32,065 --> 00:01:38,694
So minimizing Am is the same as minimizing UDV transpose m.

34
00:01:38,694 --> 00:01:39,275
Got it?

35
00:01:39,275 --> 00:01:42,303
So far nothing significant other than you have to

36
00:01:42,303 --> 00:01:45,614
use your singular value decomposition code from Matlab.

37
00:01:45,614 --> 00:01:52,075
Here comes the first little bit tricky part, that is that the magnitude

38
00:01:52,075 --> 00:01:58,117
of UDV transpose m is equal to the magnitude of just DV transpose m.

39
00:01:58,117 --> 00:01:59,323
Why?

40
00:01:59,323 --> 00:02:01,519
Well, these are just unit vectors.

41
00:02:01,519 --> 00:02:03,329
Right? The U's and V also for

42
00:02:03,329 --> 00:02:06,824
that matter are made up of orthogonal unit vectors.

43
00:02:06,824 --> 00:02:10,853
So multiplying them doesn't change the magnitude of the matrix and

44
00:02:10,853 --> 00:02:13,477
that's why these magnitudes are the same.

45
00:02:13,477 --> 00:02:16,267
And it's also why the magnitude of m

46
00:02:16,267 --> 00:02:19,896
is equal to the magnitude of the transposed M.

47
00:02:19,896 --> 00:02:22,632
For those of you who think about such things,

48
00:02:22,632 --> 00:02:25,236
V in this particular case is a orthogonal.

49
00:02:25,236 --> 00:02:26,513
In this case, 12 by 12 matrix.

50
00:02:26,513 --> 00:02:28,800
You can think of it as like a rotation matrix.

51
00:02:28,800 --> 00:02:31,436
So when you rotate a vector, you don't change its magnitude.

52
00:02:31,436 --> 00:02:36,892
So the magnitude of m is the same as the magnitude of V transpose m.

53
00:02:36,892 --> 00:02:41,245
So that means instead of minimizing UDV transpose m,

54
00:02:41,245 --> 00:02:45,306
we can just minimize DV transpose m, subject to,

55
00:02:45,306 --> 00:02:51,520
instead of being subject to m equals 1, subject to V transpose m equals 1.

56
00:02:51,520 --> 00:02:52,180
Got it?
