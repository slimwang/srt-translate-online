1
00:00:00,000 --> 00:00:09,000
For this question, you're asked to find the element which occurs most often consecutively in a list

2
00:00:09,000 --> 00:00:13,000
In this case, it's 5 because there are three 5s in a row,

3
00:00:13,000 --> 00:00:16,000
and that's more than any of the other elements in row.

4
00:00:16,000 --> 00:00:22,000
There are more 6s, but they're split. They're not in one consecutive list.

5
00:00:22,000 --> 00:00:25,000
I'm going to talk about this as a sublist.

6
00:00:25,000 --> 00:00:30,000
We're looking for the longest sublist of the same element repeated.

7
00:00:30,000 --> 00:00:35,000
Now, in order to do that, we're going to have to keep track of some things.

8
00:00:35,000 --> 00:00:39,000
We're going to have to keep track of our best element as we go.

9
00:00:39,000 --> 00:00:46,000
We're going to have to keep track of how long the sublist containing the best element is.

10
00:00:46,000 --> 00:00:51,000
As we go, we're going to have to keep increasing our count as we find another element

11
00:00:51,000 --> 00:00:54,000
that's the same as the previous one.

12
00:00:54,000 --> 00:00:57,000
For 6, we're going to have to keep track of the fact we're looking at 6

13
00:00:57,000 --> 00:01:04,000
and the number of 6s that are occurring, so we can compare them with these two values here.

14
00:01:04,000 --> 00:01:06,000
I'm going to introduce two more variables.

15
00:01:06,000 --> 00:01:11,000
I'm going to introduce current and the current length.

16
00:01:11,000 --> 00:01:16,000
To start off with, we haven't got any information, and we look at 7--

17
00:01:16,000 --> 00:01:20,000
well, that's my current one, and there's one of them. Okay, I've got one 7.

18
00:01:20,000 --> 00:01:25,000
That's definitely the best, because I haven't got anything else before, and there's one of them.

19
00:01:25,000 --> 00:01:29,000
Now we move on from 7 and we get to 6. Well, there's one 6.

20
00:01:29,000 --> 00:01:35,000
Move on again, and that's not better than we had before, so we're not going to replace best element with 6.

21
00:01:35,000 --> 00:01:40,000
Now we come on to the second 6--oh, well, now we've got two 6s.

22
00:01:40,000 --> 00:01:43,000
That's actually better than we had before.

23
00:01:43,000 --> 00:01:47,000
I'm going to replace the 7 with a 6 and the length with 2.

24
00:01:47,000 --> 00:01:50,000
We haven't got 6s anymore, so we're not going to increase the count for 6.

25
00:01:50,000 --> 00:01:53,000
We're going to start a new count for 5.

26
00:01:53,000 --> 00:01:59,000
We've got one 5, two 5s, three 5s, and now we're out of 5s.

27
00:01:59,000 --> 00:02:01,000
Let's compare that with our best element from before.

28
00:02:01,000 --> 00:02:09,000
It was 6 and there were only two of them, so 5 and 3 is better. There are more 5s.

29
00:02:09,000 --> 00:02:12,000
Now we're not dealing with 5 anymore. We're dealing with 6 again.

30
00:02:12,000 --> 00:02:16,000
There is one 6, two 6s.

31
00:02:16,000 --> 00:02:22,000
Now, we compare the number of 6s with the number of 5s, and there aren't enough.

32
00:02:22,000 --> 00:02:24,000
We're not going to replace the values there.

33
00:02:24,000 --> 00:02:30,000
Then we come onto 7. There's one 7. Again, we're not going to replace the value.

34
00:02:30,000 --> 00:02:34,000
Our procedure should return 5.

35
00:02:34,000 --> 00:02:37,000
Now let's look at the code to do that.

36
00:02:37,000 --> 00:02:43,000
We're going to define a procedure, longest_repetition, which has a list as its input.

37
00:02:43,000 --> 00:02:47,000
Now, when we first start, we don't know what the best element is.

38
00:02:47,000 --> 00:02:50,000
I'm going to set it none. It has length zero.

39
00:02:50,000 --> 00:02:57,000
If it's an empty list, then there isn't a longest repetition, and the length would certainly be 0.

40
00:02:57,000 --> 00:03:00,000
Our current--well, we don't have one either.

41
00:03:00,000 --> 00:03:02,000
That's going to have length 0 as well.

42
00:03:02,000 --> 00:03:09,000
What do we do? We looped through all the elements in the input list.

43
00:03:09,000 --> 00:03:11,000
What are we going want to check?

44
00:03:11,000 --> 00:03:17,000
Let's check to see if current is equal to the element or not.

45
00:03:17,000 --> 00:03:22,000
If it's not equal to the element, then let's make it equal to the element,

46
00:03:22,000 --> 00:03:28,000
and let's reset the current length to one, because we've now got an element ,

47
00:03:28,000 --> 00:03:30,000
so it must occur at least once.

48
00:03:30,000 --> 00:03:34,000
We don't know yet whether it'll occur more times, because we've only checked that first time

49
00:03:34,000 --> 00:03:38,000
we've seen it in this sublist.

50
00:03:38,000 --> 00:03:44,000
If current is equal to the element, then we're going to increase the length by 1,

51
00:03:44,000 --> 00:03:51,000
because we've got a second one so our sublist is 1 longer than it was before.

52
00:03:51,000 --> 00:03:58,000
In either case, we want to check whether the element we have is greater than the length

53
00:03:58,000 --> 00:04:04,000
that we have stored as our best length of a sublist at the moment.

54
00:04:04,000 --> 00:04:10,000
If it is better, then we're going to replace our best element with the current one,

55
00:04:10,000 --> 00:04:14,000
and we're going to replace our length with the current length.

56
00:04:14,000 --> 00:04:23,000
So when these for loops run through, all that there's left to do is return best_element.

57
00:04:23,000 --> 00:04:26,000
That completes the code.
