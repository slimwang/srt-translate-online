1
00:00:00,410 --> 00:00:03,260
So let's recap the major changes
we just made to the app.

2
00:00:03,260 --> 00:00:06,800
We changed from using a loop to
populate a vertical linear layout,

3
00:00:06,800 --> 00:00:09,140
to display a list of words,

4
00:00:09,140 --> 00:00:13,620
to using a more efficient ListView
+ ArrayAdapter combination.

5
00:00:13,620 --> 00:00:16,730
And then we built a list item
layout that contains two TextViews.

6
00:00:18,070 --> 00:00:20,950
So next we wanted to create a single
list of objects that we could pass to

7
00:00:20,950 --> 00:00:22,050
the ArrayAdapter.

8
00:00:22,050 --> 00:00:25,200
So we created a custom work class
that contains both the English and

9
00:00:25,200 --> 00:00:27,180
Miwok translations for a single word.

10
00:00:27,180 --> 00:00:30,253
Without we could have an ArrayList of
word objects that we could pass to

11
00:00:30,253 --> 00:00:31,095
an array adaptor.

12
00:00:31,095 --> 00:00:33,620
Now let's navigate to
the numbers activity.

13
00:00:33,620 --> 00:00:38,020
Here we'll need to change our ArrayList
of strings into an ArrayList of words.

14
00:00:38,020 --> 00:00:40,920
So we need to update the generic type
parameter, what's in between those

15
00:00:40,920 --> 00:00:46,540
brackets and create an ArrayList
where each element is a word object.

16
00:00:46,540 --> 00:00:48,740
You might get two auto
complete suggestions.

17
00:00:48,740 --> 00:00:51,700
It is because the word class already
exist in the Android framework

18
00:00:51,700 --> 00:00:53,710
under a different package name.

19
00:00:53,710 --> 00:00:56,240
So here,
you'll see it's under UserDictionary.

20
00:00:56,240 --> 00:00:59,800
So these are words that you can add
to your auto complete dictionary say,

21
00:00:59,800 --> 00:01:01,650
when you're messaging your friends.

22
00:01:01,650 --> 00:01:05,010
So be sure to pick the correct
option for the word class,

23
00:01:05,010 --> 00:01:08,958
we want the ones in our package
com.example.android.miwok.

24
00:01:08,958 --> 00:01:13,170
So now we've updated our ArrayList to
contain word objects instead of string

25
00:01:13,170 --> 00:01:14,210
objects.

26
00:01:14,210 --> 00:01:18,060
So remember that I'm specifying word as
a parameter of the ArrayList, this means

27
00:01:18,060 --> 00:01:23,240
that when we add elements to the list,
we'll need to objects of data type word.

28
00:01:23,240 --> 00:01:26,500
And if were to say call the get method,
which is used for getting elements

29
00:01:26,500 --> 00:01:30,950
at specific position in the list will
receive an object with a data type word.

30
00:01:30,950 --> 00:01:34,476
So currently all these add methods,
or adding a single string object to

31
00:01:34,476 --> 00:01:38,257
the words list each time, and that's
why we're getting all these errors.

32
00:01:38,257 --> 00:01:42,725
So we need to update each of these
lines to pass in a single word object.

33
00:01:42,725 --> 00:01:44,814
So let's just focus on
this first element here.

34
00:01:44,814 --> 00:01:46,525
So I'm going to comment it out.

35
00:01:46,525 --> 00:01:50,081
So below it, I'm going to write in the
version of the code where we're adding

36
00:01:50,081 --> 00:01:51,894
in a new Word object to the words list.

37
00:01:51,894 --> 00:01:53,740
[BLANK_AUDIO]

38
00:01:53,740 --> 00:01:56,390
Here's the typical way to go about this.

39
00:01:56,390 --> 00:02:01,423
We would've created a new Word object,
store it in a variable here called w and

40
00:02:01,423 --> 00:02:04,257
then added that variable
to our words list.

41
00:02:04,257 --> 00:02:06,668
So now here the one we're
creating our new word object,

42
00:02:06,668 --> 00:02:09,660
we're passing in two new
inputs into the constructor.

43
00:02:09,660 --> 00:02:11,490
So the english and miwok words.

44
00:02:11,490 --> 00:02:14,963
So since we only need to reference
this w variable once here.

45
00:02:14,963 --> 00:02:19,060
There's actually a more concise way
to write these two lines of code.

46
00:02:19,060 --> 00:02:22,260
So this method of creating a word
object and adding it to the list,

47
00:02:22,260 --> 00:02:25,770
does work, but there's actually
a more concise way to do it.

48
00:02:25,770 --> 00:02:28,870
So you'll notice here that we
only reference this variable w

49
00:02:28,870 --> 00:02:30,540
once down here.

50
00:02:30,540 --> 00:02:34,160
So we can go ahead and actually cut out
the substantiation of the word object

51
00:02:34,160 --> 00:02:36,240
and paste it directly
into the add method.

52
00:02:36,240 --> 00:02:40,176
So doing it this way, we don't need this
extra step up here to create a new Word

53
00:02:40,176 --> 00:02:45,110
object on a separate line of code and
then store it into a temporary variable.

54
00:02:45,110 --> 00:02:47,540
So we can actually go ahead and
just remove this line completely.

55
00:02:48,830 --> 00:02:52,840
Instead, we've directly added our
new Word object into the list.

56
00:02:52,840 --> 00:02:57,041
So to summarize, the input into this
list is a new Word object which

57
00:02:57,041 --> 00:02:59,830
is created in line by
using the new keyword.

58
00:02:59,830 --> 00:03:01,048
I'm going to go ahead and

59
00:03:01,048 --> 00:03:04,134
finish populating the ArrayList
with the word objects.

60
00:03:04,134 --> 00:03:06,064
When you're all done,
this is what the code for

61
00:03:06,064 --> 00:03:08,780
creating an ArrayList of
words should look like.

62
00:03:08,780 --> 00:03:11,368
So let's move down here to
where we're passing our

63
00:03:11,368 --> 00:03:13,121
ArrayList into the adapter down.

64
00:03:13,121 --> 00:03:17,370
So we need to update this generic
type from string to be words.

65
00:03:17,370 --> 00:03:20,220
And this change reflects that the
ArrayAdapter now contains the list of

66
00:03:20,220 --> 00:03:23,400
words as a status source
instead of strings.

67
00:03:23,400 --> 00:03:27,420
We'll also need to update the layout
resource to be our new list item layout.

68
00:03:27,420 --> 00:03:31,460
So instead of this,
we'll have R.layout.List_item.

69
00:03:31,460 --> 00:03:34,260
So now there's no errors in the code
now, so I'm going to go ahead and

70
00:03:34,260 --> 00:03:36,120
run the app on my device.

71
00:03:36,120 --> 00:03:38,396
So here's the emulator,
running this version of the app.

72
00:03:38,396 --> 00:03:40,784
Let's navigate into
the numbers activity.

73
00:03:40,784 --> 00:03:44,325
That just crashed,
I wonder what happened?

74
00:03:44,325 --> 00:03:47,490
Let's check out the Android monitor and
check out the Android logs.

75
00:03:47,490 --> 00:03:51,649
Well at the very top of the log message,
we see here that it says,

76
00:03:51,649 --> 00:03:56,588
Java.Lang.IllegalStateException
ArrayAdapter requires the resource

77
00:03:56,588 --> 00:03:57,916
ID to be a text view.

78
00:03:57,916 --> 00:04:01,564
I'm not exactly sure what this error
means, so I'm going to have to go

79
00:04:01,564 --> 00:04:05,445
into the documentation and
see if I can find any clues.

80
00:04:05,445 --> 00:04:08,650
Here's the developer documentation for
the ArrayAdapter.

81
00:04:08,650 --> 00:04:10,790
So let's read through
the Class Overview.

82
00:04:10,790 --> 00:04:13,610
Alternatively, you can also
pause the video here if you want

83
00:04:13,610 --> 00:04:14,480
to read through it yourself.

84
00:04:15,820 --> 00:04:20,658
So what I've learn from these couple
of paragraphs is By default, the class

85
00:04:20,658 --> 00:04:25,132
expects that the provided resource
id references a single text view.

86
00:04:25,132 --> 00:04:29,689
That's probably why the list item layout
from the Android framework itself worked

87
00:04:29,689 --> 00:04:32,891
because the whole layout
consisted of a single TextView.

88
00:04:32,891 --> 00:04:36,577
And here in this next paragraph
we see that we can add lists or

89
00:04:36,577 --> 00:04:38,288
arrays of custom objects.

90
00:04:38,288 --> 00:04:41,800
So that's perfect for us to help
display our custom word objects.

91
00:04:41,800 --> 00:04:45,233
Now all this makes sense because
remember that the ArrayAdapter uses

92
00:04:45,233 --> 00:04:46,240
generics.

93
00:04:46,240 --> 00:04:50,590
Which means we can substitute any
object data type in here for this team.

94
00:04:50,590 --> 00:04:53,840
Now, moving down to the third paragraph,
in order to display more

95
00:04:53,840 --> 00:04:57,940
complicated list items that can pertain
more than a single text view, we'll need

96
00:04:57,940 --> 00:05:01,870
to override and provide our own
implementation of a getView() method.

97
00:05:01,870 --> 00:05:05,869
So ListView cause the adaptors getView()
method when It needs a new view

98
00:05:05,869 --> 00:05:06,715
on the screen.

99
00:05:06,715 --> 00:05:10,845
And one of the input arguments into
the method is the desired element of

100
00:05:10,845 --> 00:05:12,410
the list.

101
00:05:12,410 --> 00:05:15,100
So in this case we have
position 0 that we need.

102
00:05:16,240 --> 00:05:20,922
Knowing this information, the adapter
returns a view to the ListView,

103
00:05:20,922 --> 00:05:25,003
that's populated with
the information from the position 0.

104
00:05:25,003 --> 00:05:29,911
So think of the relationship between the
ListView And getView, similar to what

105
00:05:29,911 --> 00:05:35,270
happens between a surgeon and a surgical
technician in an operating room.

106
00:05:35,270 --> 00:05:40,300
So in this analogy, the surgical
technician like the getView,

107
00:05:40,300 --> 00:05:42,770
hands the surgeon the ListView,

108
00:05:42,770 --> 00:05:46,480
the correct instrument of the correct
view when the time comes.

109
00:05:46,480 --> 00:05:51,610
So the ListView or surgeon requests for
the view or the scissors in this case.

110
00:05:51,610 --> 00:05:55,370
The getView gets what's needed,
the View or

111
00:05:55,370 --> 00:05:59,560
in this case the scissors and
passes it to the surgeon.

112
00:05:59,560 --> 00:06:00,530
So by default,

113
00:06:00,530 --> 00:06:04,670
the ArrayAdaptor class expects that
it'll be populating a single TextView.

114
00:06:04,670 --> 00:06:09,060
So because the List item layout that we
will be populating is more complex so

115
00:06:09,060 --> 00:06:13,360
it has two TextViews and
it eventually will have a image view.

116
00:06:14,710 --> 00:06:18,273
We need to override the getView
method with our own custom behavior.

117
00:06:18,273 --> 00:06:22,120
And in order to do this, we need to
sub class the ArrayAdapter class.

118
00:06:23,300 --> 00:06:26,962
So to elaborate, this means we
need to create a new Java class.

119
00:06:26,962 --> 00:06:32,690
So we'll call it the WordAdapter class
and use extend the ArrayAdapter class.

120
00:06:32,690 --> 00:06:34,376
So I'll show you how
to get that done now.

121
00:06:34,376 --> 00:06:36,440
So let's navigate over
here to the project view.

122
00:06:37,700 --> 00:06:42,860
Select our package,
right-click, New &gt; Java Class.

123
00:06:42,860 --> 00:06:44,960
So we want to name
this file WordAdapter.

124
00:06:46,030 --> 00:06:49,510
We'll need to modify this auto
generated file from Android Studio.

125
00:06:49,510 --> 00:06:54,230
We want this class declaration to
specify that the WordAdapter extends or

126
00:06:54,230 --> 00:06:57,350
inherits behavior from
the ArrayAdapter class.

127
00:06:57,350 --> 00:07:00,700
Now to show the available methods to
override from the ArrayAdapter class,

128
00:07:00,700 --> 00:07:03,660
our cursor will have to be
between these two brackets.

129
00:07:03,660 --> 00:07:06,860
We'll hit Code and
then override methods.

130
00:07:06,860 --> 00:07:11,714
Alternatively the keyboard shortcut
is Ctrl+O, now in this list here,

131
00:07:11,714 --> 00:07:14,779
go down and find getView and
then click Enter.

132
00:07:14,779 --> 00:07:18,060
So this method gets auto
generated by default.

133
00:07:18,060 --> 00:07:21,310
Now I'm going to take a step back and
let you finish the steps that are needed

134
00:07:21,310 --> 00:07:23,813
to make this app display
the list of vocabulary words for

135
00:07:23,813 --> 00:07:24,892
the numbers activity.

136
00:07:24,892 --> 00:07:28,493
So the steps will include finishing the
implementation of the getView method.

137
00:07:28,493 --> 00:07:32,100
When you're done with this entire quiz,
the app should look like this.

138
00:07:32,100 --> 00:07:35,050
Each list item should display
a miwok word on top of the English

139
00:07:35,050 --> 00:07:36,780
translation for that word.

140
00:07:36,780 --> 00:07:39,408
Now to help verify your own track,
I'm going to provide you

141
00:07:39,408 --> 00:07:42,389
with some code changes that
are needed in the numbers activity.

142
00:07:42,389 --> 00:07:46,615
So instead of the ArrayAdapter
we'll be using a WordAdapter.

143
00:07:47,650 --> 00:07:51,328
So the constructor fo the WordAdapter
class takes in two inputs.

144
00:07:51,328 --> 00:07:53,818
So just the context and
this list of words and

145
00:07:53,818 --> 00:07:58,195
then also remember to update
the adapter variable down here.

146
00:07:58,195 --> 00:08:01,285
Now make sure your WordAdapter class
works with these number activities

147
00:08:01,285 --> 00:08:05,255
changes, otherwise you'll need to go
back and fix your WordAdapter class.

148
00:08:05,255 --> 00:08:08,300
Now I know this clean exercise will be a
bit of a challenge, because you've never

149
00:08:08,300 --> 00:08:12,520
created a custom ArrayAdapter before or
even overridden the getView method.

150
00:08:12,520 --> 00:08:16,270
This task involves many steps, but I
think you're definitely ready for this.

151
00:08:16,270 --> 00:08:17,760
Now just be patient with yourself,

152
00:08:17,760 --> 00:08:20,620
because this task will
require a bit of time.

153
00:08:20,620 --> 00:08:21,940
To give you another hint,

154
00:08:21,940 --> 00:08:25,360
I'll point you an example app
which handles a similar use case.

155
00:08:25,360 --> 00:08:30,090
So this project here is hosted on
GitHub as an open source project and

156
00:08:30,090 --> 00:08:33,429
this mean that the code is available for
anyone to take a look at.

157
00:08:33,429 --> 00:08:36,490
So know that there's a different
license on each open source project.

158
00:08:37,510 --> 00:08:39,465
So remember to check out the license for

159
00:08:39,465 --> 00:08:42,971
limitations on whether the code can
be modified or distribute again.

160
00:08:42,971 --> 00:08:45,320
If you're taking a look at
a particular open source project.

161
00:08:46,390 --> 00:08:50,260
So in this case,
this app was created at Udacity, so

162
00:08:50,260 --> 00:08:52,300
you're free to use it and
adapt it as you wish.

163
00:08:53,670 --> 00:08:58,680
So our Customer Adapter Sample App is
called the Android Flavors app, and

164
00:08:58,680 --> 00:09:01,820
it displays a list of
all Android releases.

165
00:09:01,820 --> 00:09:05,240
So each release is represented
in a list item, and

166
00:09:05,240 --> 00:09:09,660
each list item could contain an image,
a title and the version number.

167
00:09:11,140 --> 00:09:15,070
So this app is using a customer
ArrayAdapter they were calling

168
00:09:15,070 --> 00:09:19,302
the FlavorAdapter to display a custom
list item view that contains

169
00:09:19,302 --> 00:09:21,131
an image and two times used.

170
00:09:21,131 --> 00:09:25,183
So having you practice this skill
of reading code from other apps and

171
00:09:25,183 --> 00:09:28,770
figuring out how to adapt
it into army lock app.

172
00:09:28,770 --> 00:09:33,370
So as a developer, you often looked at
tutorials or other open source for apps.

173
00:09:33,370 --> 00:09:35,979
And try to apply those skills
into your own application.

174
00:09:36,980 --> 00:09:40,780
So you can start browsing this Android
Flavor app code by either flicking this

175
00:09:40,780 --> 00:09:41,896
Download Zip button.

176
00:09:41,896 --> 00:09:45,865
And then downloading all the code and
then importing into Android Studio as

177
00:09:45,865 --> 00:09:50,700
an existing project, or you can browse
the files directly in the web browser.

178
00:09:50,700 --> 00:09:54,859
So for example, I can click here,
app &gt; source/main,

179
00:09:54,859 --> 00:09:58,470
and then navigate through
the Java files or the rest files.

180
00:09:59,580 --> 00:10:04,690
Another cool GitHub shortcut here
is to type T on my keyboard, so

181
00:10:04,690 --> 00:10:08,130
I'll hit T here, and
that activates the file finder.

182
00:10:08,130 --> 00:10:11,858
So this allows me to easily browse
through the files in my project.

183
00:10:11,858 --> 00:10:15,656
So if I want to look up that main
activity, I can type activity and

184
00:10:15,656 --> 00:10:17,959
it pulls up our mainActivity.java.

185
00:10:17,959 --> 00:10:20,908
Or if I want to search up the
FlavorAdapter that I mentioned earlier,

186
00:10:20,908 --> 00:10:22,830
I can easily find that here.

187
00:10:22,830 --> 00:10:26,890
So hopefully this example will help
you in the next coding exercise.

188
00:10:26,890 --> 00:10:30,830
So check out the quiz for specific
instructions on how to get started, and

189
00:10:30,830 --> 00:10:31,340
best of luck.
