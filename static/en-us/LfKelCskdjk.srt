1
00:00:00,160 --> 00:00:03,798
Since this kind of construct is really quite common. Python provides a better

2
00:00:03,798 --> 00:00:07,255
way to do it, and that's called with. A with statement looks like this. We've

3
00:00:07,255 --> 00:00:11,452
got a ContextGuard which is some expression that evaluates an object. And we've

4
00:00:11,452 --> 00:00:15,909
got some variable name. And I'm not going to go into all the details of how with

5
00:00:15,909 --> 00:00:19,632
works. There is more details on this following the links below. But, as a useful

6
00:00:19,632 --> 00:00:24,752
idiom for working with files, what we're going to do is use as our ContextGuard,

7
00:00:24,752 --> 00:00:29,485
we're going to open the file, this is kind of like doing an assignment. The

8
00:00:29,485 --> 00:00:34,135
value that the name fout refers to will be the result of this object, but the

9
00:00:34,135 --> 00:00:38,860
big difference is the with statement guarantees that this magic method for

10
00:00:38,860 --> 00:00:43,060
exiting will be called on this object, on the object returned by the

11
00:00:43,060 --> 00:00:49,116
ContextGuard. And it guarantees that as long as this executes and we enter the

12
00:00:49,116 --> 00:00:54,247
Block that exit will always be called. For a file, what exit does is cleans up

13
00:00:54,247 --> 00:00:58,088
the file including calling file close. That means we don't need to explicitly

14
00:00:58,088 --> 00:01:02,283
close the file at all. All we need to do is use with. So our code will look like

15
00:01:02,283 --> 00:01:06,936
this. We'll use with open, opening the file, and assigning it to the variable

16
00:01:06,936 --> 00:01:10,109
fout. We're going to do a bunch of stuff with it. We'll write to the file and

17
00:01:10,109 --> 00:01:14,335
then after the with statement we can continue. And we know that this file will

18
00:01:14,335 --> 00:01:18,613
always be closed. We don't need to explicitly call close.
