1
00:00:00,410 --> 00:00:03,640
For loops are the most common
type of loop in JavaScript.

2
00:00:03,640 --> 00:00:06,759
What makes them different than
the earlier while loop is that for

3
00:00:06,759 --> 00:00:09,822
loops forced you to specifically
define the starting point and

4
00:00:09,821 --> 00:00:11,279
stopping point of your loop.

5
00:00:11,279 --> 00:00:14,362
As well as how your loop is going
to proceed to the next step.

6
00:00:14,362 --> 00:00:18,518
Now you might be saying to yourself, how
is that any different from a while loop?

7
00:00:18,518 --> 00:00:22,060
In a while loop, I had to specify
all of those same things.

8
00:00:22,059 --> 00:00:24,559
Well, the difference is in a for

9
00:00:24,559 --> 00:00:28,419
loop, you have to define all that
upfront in the for statement.

10
00:00:28,420 --> 00:00:32,820
In this example, I have a for loop that
prints out the value zero through five.

11
00:00:32,820 --> 00:00:34,880
Let's look at how it's set up.

12
00:00:34,880 --> 00:00:38,670
For a standard four loop, it requires
the same three pieces of information as

13
00:00:38,670 --> 00:00:42,820
before and each of these pieces
are separated by semicolon.

14
00:00:42,820 --> 00:00:44,880
The first piece is your starting point.

15
00:00:44,880 --> 00:00:48,070
For this example, we have
a variable i that is set to zero.

16
00:00:48,070 --> 00:00:50,789
The second piece is your stopping point.

17
00:00:50,789 --> 00:00:54,009
This is going to tell us when
we want our loop to stop.

18
00:00:54,009 --> 00:00:58,109
In this case, we want the loop to
stop executing once our variable i

19
00:00:58,109 --> 00:01:00,119
is no longer less than six.

20
00:01:00,119 --> 00:01:04,628
If i can no longer satisfy that
condition, then our loop will exit.

21
00:01:04,629 --> 00:01:06,605
The third and final piece of our for

22
00:01:06,605 --> 00:01:09,615
loop is how our loop should
proceed to the next step.

23
00:01:09,614 --> 00:01:13,426
In this example,
we say that each time our loop runs,

24
00:01:13,427 --> 00:01:16,235
we want to increase
the value of i by one.

25
00:01:16,234 --> 00:01:18,073
All right, so that's the setup.

26
00:01:18,073 --> 00:01:21,361
For this next part, I'm going to walk
you though each iteration of our for

27
00:01:21,361 --> 00:01:22,519
loop.

28
00:01:22,519 --> 00:01:25,689
Normally, you don't really
think about or notice how

29
00:01:25,689 --> 00:01:30,230
each iteration of a loop runs,
because your code executes so fast.

30
00:01:30,230 --> 00:01:32,990
So what I'm doing here,
sort of slowing it down for you, so

31
00:01:32,989 --> 00:01:36,339
you can see how the code is going to
be interpreted, as it's being ran.

32
00:01:37,430 --> 00:01:39,004
I've also added this table, so

33
00:01:39,004 --> 00:01:42,047
you can see the value of i
throughout the lifetime of the loop.

34
00:01:42,046 --> 00:01:45,411
If you're ever writing loops and
your loop isn't behaving exactly how

35
00:01:45,411 --> 00:01:48,730
you might expect, doing an exercise
like this can be really helpful.

36
00:01:49,879 --> 00:01:50,405
At the end,

37
00:01:50,406 --> 00:01:53,850
I'll paste this code into the console so
you can see it running at full speed.

38
00:01:53,849 --> 00:01:57,930
Okay, so when our loop starts,
i is set to zero.

39
00:01:57,930 --> 00:02:02,283
Then we check the condition
to see if i is less than six.

40
00:02:02,284 --> 00:02:05,430
If that condition is true,
then we go into our loop.

41
00:02:05,430 --> 00:02:08,000
So, in this statement we're just
going to print out the value of i.

42
00:02:08,000 --> 00:02:10,500
So printing out i equals 0.

43
00:02:10,500 --> 00:02:11,240
Awesome.

44
00:02:11,240 --> 00:02:13,390
So we just finished our
first step of the loop and

45
00:02:13,389 --> 00:02:17,229
now, we need to go look and see how
we've defined to get to the next step.

46
00:02:18,340 --> 00:02:21,030
So, our code jumps back up and
it looks and it says,

47
00:02:21,030 --> 00:02:25,090
okay, we're going to increment i by one,
so i is now one.

48
00:02:25,090 --> 00:02:28,519
Let's check our condition again to make
sure that we want to jump into the loop.

49
00:02:28,519 --> 00:02:31,894
And If i is less than six, which it is
again, it's going to evaluate the true

50
00:02:31,894 --> 00:02:35,006
and we're going to jump back into
the loop or run the statement again.

51
00:02:35,006 --> 00:02:37,300
And now, we got printing out i equals 1.

52
00:02:37,300 --> 00:02:41,430
And we're just going to continue
this process until the condition

53
00:02:41,430 --> 00:02:44,189
i is less than six is no longer true.

54
00:02:44,189 --> 00:02:46,365
So look, we'll increment i by one.

55
00:02:46,366 --> 00:02:47,406
Now it's two.

56
00:02:47,406 --> 00:02:48,800
We'll look at our condition.

57
00:02:48,800 --> 00:02:51,748
It evaluates to true again,
and we print out the value.

58
00:02:51,747 --> 00:02:56,650
So I can just keep running through this,
and eventually, we will get to

59
00:02:56,651 --> 00:03:01,084
the very end where i is going to be six,
and six is not less than six.

60
00:03:01,084 --> 00:03:03,090
So, here we go.

61
00:03:03,090 --> 00:03:04,430
We're at four.

62
00:03:04,430 --> 00:03:05,460
Now, we're moving to five.

63
00:03:05,460 --> 00:03:06,849
The condition's still true.

64
00:03:06,849 --> 00:03:08,620
We print out the value.

65
00:03:08,620 --> 00:03:10,099
Okay, we get to the end.

66
00:03:10,099 --> 00:03:13,400
Now we increment the value
one more time, now it's six.

67
00:03:13,400 --> 00:03:16,599
And when we go to check our condition,
it evaluates to false.

68
00:03:16,599 --> 00:03:18,795
And we jump out of the loop.

69
00:03:18,795 --> 00:03:21,305
Now just to show you our for
loop running in full speed,

70
00:03:21,306 --> 00:03:23,171
here I've got it pasted in the console.

71
00:03:23,170 --> 00:03:27,262
And when I hit enter, boom, we've got
printing out zero, one, two, three,

72
00:03:27,262 --> 00:03:28,008
four, five.

73
00:03:28,008 --> 00:03:31,031
And once we get to six,
the condition doesn't hold true and

74
00:03:31,031 --> 00:03:32,250
we jump out of the loop.

