1
00:00:00,350 --> 00:00:05,689
So lets now revisit the topic of cache
misses when we have coherence going on.

2
00:00:05,689 --> 00:00:10,460
We have seen that caches have 3 C's,
3 types of misses.

3
00:00:10,460 --> 00:00:15,740
Compulsory misses,
conflict misses and capacity misses.

4
00:00:15,740 --> 00:00:17,510
Remember the compulsory misses,

5
00:00:17,510 --> 00:00:20,450
we have them because we're accessing
the block for the first time.

6
00:00:20,450 --> 00:00:23,820
So, because it was never in the cache,
we have to have this miss.

7
00:00:23,820 --> 00:00:28,010
Capacity misses we have because
the block doesn't fit in a cache of this

8
00:00:28,010 --> 00:00:29,160
size.

9
00:00:29,160 --> 00:00:33,950
And conflict misses we have because the
cache doesn't have enough associativity.

10
00:00:33,950 --> 00:00:40,800
With coherence, another C, we can now
have a cache miss caused by coherence.

11
00:00:40,800 --> 00:00:44,380
For example, when we read something,
somebody writes it, and

12
00:00:44,380 --> 00:00:49,290
we want to read it again, that would
not be a miss except for coherence, so

13
00:00:49,290 --> 00:00:52,170
we call this type of
a miss coherence miss.

14
00:00:52,170 --> 00:00:54,770
So remember that there
is actually four Cs.

15
00:00:54,770 --> 00:00:58,460
The three we have seen before,
and coherence miss.

16
00:00:58,460 --> 00:01:01,780
There are really two types
of coherence misses.

17
00:01:01,780 --> 00:01:06,260
What we have seen so
far is the true sharing type of miss

18
00:01:06,260 --> 00:01:10,760
which occurs when different
cores access the same data, so

19
00:01:10,760 --> 00:01:15,580
naturally we have to perform
coherence and thus have some misses.

20
00:01:15,580 --> 00:01:20,240
So for example if we read A and
then write A and then read A again.

21
00:01:20,240 --> 00:01:24,570
There are some misses necessary in order
to get the right behavior for the reads.

22
00:01:24,570 --> 00:01:27,910
But these were all
happening on the same data.

23
00:01:27,910 --> 00:01:33,300
There is another type of coherence miss,
called false sharing,

24
00:01:33,300 --> 00:01:37,340
which occurs when different
cores access different data, so

25
00:01:37,340 --> 00:01:41,030
there shouldn't be any coherence
messages because of that.

26
00:01:41,030 --> 00:01:44,960
Except that these data items
are in the same block.

27
00:01:44,960 --> 00:01:46,610
So it's called false sharing because,

28
00:01:46,610 --> 00:01:48,930
really, there is no true data sharing,
but

29
00:01:48,930 --> 00:01:54,090
as far as coherency's concerned, we do
everything at the relative cache blocks.

30
00:01:54,090 --> 00:01:58,910
So two items being in the same block
makes them behave like the same item,

31
00:01:58,910 --> 00:02:00,400
as far as coherency's concerned.
