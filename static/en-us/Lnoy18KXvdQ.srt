1
00:00:00,430 --> 00:00:03,510
So here's the answer. The first one is always equivalent to

2
00:00:03,510 --> 00:00:06,550
the string s, remember what it means to use the colon when

3
00:00:06,550 --> 00:00:09,130
there's nothing on the left side means, start from the beginning, and

4
00:00:09,130 --> 00:00:11,220
when there's nothing on the right side, means go all the way

5
00:00:11,220 --> 00:00:13,730
to the end. So if there's nothing on on either side, that's

6
00:00:13,730 --> 00:00:17,980
selecting the entire string. So the second one's a little trickier, but

7
00:00:17,980 --> 00:00:21,542
this also always has the same value as the string s. And

8
00:00:21,542 --> 00:00:26,056
the reason is, we have the original string s, and we're concatenating

9
00:00:26,056 --> 00:00:28,720
to it the string s index 0, colon negative

10
00:00:28,720 --> 00:00:31,976
1 plus 1. Well, negative 1 plus 1 has the

11
00:00:31,976 --> 00:00:36,162
value 0. When we index from 0 colon 0, that's

12
00:00:36,162 --> 00:00:39,250
an empty string. And the reason that's an empty string

13
00:00:39,250 --> 00:00:41,930
is because we're starting from 0. And we're stopping just

14
00:00:41,930 --> 00:00:44,400
before 0, there are no character between 0 and 0

15
00:00:44,400 --> 00:00:47,310
so that's an empty string. Adding the empty string to

16
00:00:47,310 --> 00:00:51,290
itself, leaves the string empty. And the interesting thing about

17
00:00:51,290 --> 00:00:53,500
this is, this works even when s is an

18
00:00:53,500 --> 00:00:58,127
empty string. If s was an empty string, s index

19
00:00:58,127 --> 00:01:01,750
0. That would produce an error. It's trying to

20
00:01:01,750 --> 00:01:04,989
select the first character from s, and there is no

21
00:01:04,989 --> 00:01:07,480
first character since s was an empty string. But

22
00:01:07,480 --> 00:01:11,252
s index 12 colon 12, even though there is no

23
00:01:11,252 --> 00:01:13,490
12th character of, of s, since there is no

24
00:01:13,490 --> 00:01:16,290
characters between there, it's okay that s doesn't have them.

25
00:01:16,290 --> 00:01:19,590
That's going to valuate to the empty string. So, the third

26
00:01:19,590 --> 00:01:23,730
one is also always equivalent to s. It's selecting from the

27
00:01:23,730 --> 00:01:26,180
beginning of the string, position 0, all the way to

28
00:01:26,180 --> 00:01:29,360
the end. Again, as we saw here, even if s has

29
00:01:29,360 --> 00:01:31,920
no characters, this is still okay. It will give us

30
00:01:31,920 --> 00:01:34,430
the empty string, if s has any characters, it will give

31
00:01:34,430 --> 00:01:37,410
us all the characters in s. This first one is not

32
00:01:37,410 --> 00:01:41,530
equivalent, and this might be a little surprising. It sounds like,

33
00:01:41,530 --> 00:01:43,490
well, it's selecting all the characters from the beginning

34
00:01:43,490 --> 00:01:46,360
to the end, because negative 1 is the index of

35
00:01:46,360 --> 00:01:50,400
the last character in s. But remember that the selection

36
00:01:50,400 --> 00:01:53,480
stops before the last character. So what this do, will

37
00:01:53,480 --> 00:01:56,330
do will give us every character besides the last one.

38
00:01:56,330 --> 00:01:59,210
So let's see that in the Python interpreter. Were going

39
00:01:59,210 --> 00:02:03,320
to print s index, colon, negative one, and this will

40
00:02:03,320 --> 00:02:06,040
give us all the characters except for the last one.

41
00:02:07,380 --> 00:02:09,770
So the final one is the most surprising. That this actually

42
00:02:09,770 --> 00:02:13,630
is always equivalent to s. It's equivalent even if s has fewer

43
00:02:13,630 --> 00:02:17,050
than 3 characters. So the first part of selecting all the

44
00:02:17,050 --> 00:02:18,320
characters from the beginning up to

45
00:02:18,320 --> 00:02:20,950
position three, not including position three,

46
00:02:20,950 --> 00:02:24,010
and then we're concatenating that with all the characters of s

47
00:02:24,010 --> 00:02:27,120
from position 3 to the end. If s has less than 3

48
00:02:27,120 --> 00:02:29,990
characters, well this is going to be empty. There are no characters

49
00:02:29,990 --> 00:02:32,400
from position 3 to the end. But that's okay, we're going to

50
00:02:32,400 --> 00:02:34,450
add the empty string to the characters before

51
00:02:34,450 --> 00:02:37,470
position 3. So here's how that works in

52
00:02:37,470 --> 00:02:41,570
the python interpreter. We'll do s from position

53
00:02:41,570 --> 00:02:45,160
beginning to index 3 and add that s

54
00:02:45,160 --> 00:02:50,670
to index 3 to the end. That produces the same string. And if we do this with a

55
00:02:50,670 --> 00:02:57,860
shorter string. Let's initialize t to be the string, Hi. We can print from

56
00:02:57,860 --> 00:03:03,510
t to position 3 plus from t to position 3 to the end. We don't get an error.

57
00:03:03,510 --> 00:03:06,660
We get the string Hi out. So, this indexing

58
00:03:06,660 --> 00:03:09,550
subsequences is very resilient. It works even when we index

59
00:03:09,550 --> 00:03:12,050
positions that don't exist in the string. This is

60
00:03:12,050 --> 00:03:15,940
different from when we were doing indexing of particular positions

61
00:03:15,940 --> 00:03:19,360
by themselves. If we did index t, index 3,

62
00:03:19,360 --> 00:03:23,160
that will give us an error. Because there's no character

63
00:03:23,160 --> 00:03:25,283
at position 3.
