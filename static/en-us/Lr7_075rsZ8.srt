1
00:00:00,270 --> 00:00:05,260
So far, our shiny new application
class does absolutely nothing.

2
00:00:05,260 --> 00:00:06,840
Let's fix that.

3
00:00:06,840 --> 00:00:09,370
We can give it a method
called StartTracking

4
00:00:09,370 --> 00:00:11,500
to activate analytics tracking.

5
00:00:11,500 --> 00:00:14,240
You can use the Google Analytics class

6
00:00:14,240 --> 00:00:17,320
to get a Google Analytics instance,
like this.

7
00:00:17,320 --> 00:00:20,760
When you've got the GoogleAnalytics
instance, you can create a new tracker

8
00:00:20,760 --> 00:00:25,730
by calling newTracker in
the config file for the tracker.

9
00:00:26,750 --> 00:00:27,530
It'll look like this.

10
00:00:28,630 --> 00:00:33,590
If you call your tracker config file
something else, other than track_app,

11
00:00:33,590 --> 00:00:36,760
then be sure to use the name of
your tracker config file here.

12
00:00:37,870 --> 00:00:41,280
And you can see here that I used
mTracker as the global variable

13
00:00:41,280 --> 00:00:43,130
to store the newTracker.

14
00:00:43,130 --> 00:00:45,990
Next, you're going to need to
initiate auto tracking and

15
00:00:45,990 --> 00:00:49,570
you do that by calling
enableAutoActivityReports.

16
00:00:50,700 --> 00:00:51,480
It's your turn now.

17
00:00:51,480 --> 00:00:54,820
Try out a couple of methods in
your new application class.

18
00:00:54,820 --> 00:00:58,490
First, define the global
variable mTracker, and

19
00:00:58,490 --> 00:01:00,750
then implement startTracking.

20
00:01:00,750 --> 00:01:03,730
You're going to need to check if
the tracker already exists and

21
00:01:03,730 --> 00:01:06,460
if it doesn't, then you can create it.

22
00:01:06,460 --> 00:01:10,580
While to implement the method getTracker
to return the tracker, be sure to check

23
00:01:10,580 --> 00:01:14,830
that the tracker exists and has been
activated before returning it, and

24
00:01:14,830 --> 00:01:17,250
check the boxes when you
are done doing these things.
