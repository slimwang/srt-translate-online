1
00:00:00,270 --> 00:00:04,850
Okay, now we know that the kind is genuine, and the server is genuine. Now what?

2
00:00:04,850 --> 00:00:11,170
Once again we go back to the principal of not overexposing any ID or

3
00:00:11,170 --> 00:00:13,980
password for too long on insecure links.

4
00:00:15,130 --> 00:00:18,670
Remember that the login session used the username

5
00:00:18,670 --> 00:00:21,550
and password exactly once. Now the RPC

6
00:00:21,550 --> 00:00:25,650
session, you may be establishing multiple RPC sessions.

7
00:00:25,650 --> 00:00:29,950
Over the lifetime of the login session.

8
00:00:29,950 --> 00:00:32,970
Once a login session has been established,

9
00:00:32,970 --> 00:00:35,460
then you are establishing the RPC session.

10
00:00:35,460 --> 00:00:38,380
Now within this RPC session, you may be

11
00:00:38,380 --> 00:00:45,670
making a number of File system calls. And for all of those file system calls,

12
00:00:45,670 --> 00:00:51,190
you don't want to over expose the use of this handshake key. And therefore

13
00:00:51,190 --> 00:01:00,240
what the server does in the Android file system is. Use this handshake key

14
00:01:00,240 --> 00:01:05,920
only for establishing an RPC session. Let's say within a login session, you have

15
00:01:05,920 --> 00:01:11,270
three or four different RPC sessions, with the server. Three or four unique

16
00:01:11,270 --> 00:01:16,220
RPC sessions. For each one of those unique RPC sessions, you have to use the

17
00:01:16,220 --> 00:01:20,350
handshake key to establish the RPC session.

18
00:01:20,350 --> 00:01:23,600
But, within an RPS session, what you're doing,

19
00:01:23,600 --> 00:01:25,740
is you're making a whole bunch of secure

20
00:01:25,740 --> 00:01:30,320
RPS calls, to the server, for opening files,

21
00:01:30,320 --> 00:01:36,270
achieving new files, writing files and so on, and for all of those we don't want

22
00:01:36,270 --> 00:01:42,450
to over use this hand shaky, and that's the reason, what the server does once

23
00:01:42,450 --> 00:01:47,180
it validates the indentity of the client,it generates a

24
00:01:47,180 --> 00:01:52,300
session key. Which is for this particular RPC session. Now it's going to

25
00:01:52,300 --> 00:01:57,660
send this new session key a generated this particular RPC

26
00:01:57,660 --> 00:02:02,950
session as an encrypted cipher to the client using

27
00:02:02,950 --> 00:02:07,940
the hand shaped key. As the private key for encrypting

28
00:02:07,940 --> 00:02:12,600
this message. And now Venus can extract

29
00:02:13,850 --> 00:02:18,350
the session key using HKC to decrypt this

30
00:02:18,350 --> 00:02:23,200
message and this sk is the session key for use for this

31
00:02:23,200 --> 00:02:28,520
particular RPC session. For the rest of this RPC session, any time the client

32
00:02:28,520 --> 00:02:33,510
wants to open a file or close a file or write a file or

33
00:02:33,510 --> 00:02:37,130
read a file, all of those file system

34
00:02:37,130 --> 00:02:40,200
operations is going to use session key as the

35
00:02:40,200 --> 00:02:42,380
handshake key for the rest of the RPC

36
00:02:42,380 --> 00:02:46,850
session with the server. The second field, num, is

37
00:02:46,850 --> 00:02:50,700
the starting sequence number that Venus will use

38
00:02:50,700 --> 00:02:52,920
on behalf of the client for all the

39
00:02:52,920 --> 00:02:56,050
file system related RPC calls that are going

40
00:02:56,050 --> 00:02:59,120
to be made as part of this particular session.

41
00:02:59,120 --> 00:03:04,860
For this session, SK, is going to be the handshake key, and the sequence numbers

42
00:03:04,860 --> 00:03:10,420
going to start here. There's again a safeguard against replay attacks on the

43
00:03:10,420 --> 00:03:13,330
server, by someone masquerading as a

44
00:03:13,330 --> 00:03:16,430
client, and generating packets with certain sequence

45
00:03:16,430 --> 00:03:20,350
numbers. So let's recap. What went over

46
00:03:20,350 --> 00:03:24,150
for session establishment. The first message coming

47
00:03:24,150 --> 00:03:29,660
from the client to the server tells the server that

48
00:03:29,660 --> 00:03:34,700
a client is wanting to establish a new RPC session. The server has

49
00:03:34,700 --> 00:03:39,650
to authenticate whether that particular session establishment

50
00:03:39,650 --> 00:03:45,080
request is genuine or not. And the client has to know

51
00:03:45,080 --> 00:03:49,850
that it is really talking to a genuine server, and

52
00:03:49,850 --> 00:03:53,250
that's this pair of communication that you're seeing here.

53
00:03:53,250 --> 00:03:55,670
One to establish to the client that the server

54
00:03:55,670 --> 00:03:58,610
is genuine, the second to establish to the server

55
00:03:58,610 --> 00:04:02,220
that the client is genuine. And once the genuineness

56
00:04:02,220 --> 00:04:04,810
of the client and the server has been established,

57
00:04:04,810 --> 00:04:08,630
the server says, for this particular RPC session, we

58
00:04:08,630 --> 00:04:12,350
will not use this handshake key anymore for the

59
00:04:12,350 --> 00:04:14,900
rest of the communication that we want to do

60
00:04:14,900 --> 00:04:20,560
for file system operations. I will generate a new session key, SK.

61
00:04:20,560 --> 00:04:23,860
Give it to you along with the sequence number to use as

62
00:04:23,860 --> 00:04:29,600
a starting sequence number for RPC calls during this session. That's the

63
00:04:29,600 --> 00:04:33,670
whole exchange that we're seeing here. Now it's time for a quiz.
