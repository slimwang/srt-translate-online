1
00:00:00,200 --> 00:00:05,090
So here's the algorithm sort of simply described for circles.

2
00:00:05,090 --> 00:00:10,310
Just like before, for every edge pixel, for each possible radius, right, so

3
00:00:10,310 --> 00:00:16,280
we don't know the radius, and then, either for every possible edge gradient,

4
00:00:16,280 --> 00:00:19,848
if we vote for the cone, or if we use the estimated gradient,

5
00:00:19,848 --> 00:00:24,810
then we compute a and b and we increment for a, b, and r,

6
00:00:24,810 --> 00:00:29,490
all right, and then that would just vote you in your Hough space.

7
00:00:29,490 --> 00:00:33,914
In general, even though 3D is only 50% more D than 2D,

8
00:00:33,914 --> 00:00:39,240
you'll find that voting in 3D is way more than 50% harder than 2D.

9
00:00:39,240 --> 00:00:43,142
And that's because, just one way of thinking about this is,

10
00:00:43,142 --> 00:00:47,550
let's suppose you had 100 buckets in each dimension.

11
00:00:47,550 --> 00:00:48,200
Okay.

12
00:00:48,200 --> 00:00:52,100
So, how many would that be if you had one dimension, Megan?

13
00:00:52,100 --> 00:00:52,620
>> 100?

14
00:00:52,620 --> 00:00:53,535
>> And if you had two?

15
00:00:53,535 --> 00:00:55,520
>> 10,000.

16
00:00:55,520 --> 00:00:56,470
>> And what if you had three?

17
00:00:57,560 --> 00:01:01,340
All right, that's a million, right, ten to the sixth.

18
00:01:01,340 --> 00:01:06,020
The number of cells that you have to consider is exponential in

19
00:01:06,020 --> 00:01:09,320
the number of dimensions, and that's a challenge with using the Hough transform.
