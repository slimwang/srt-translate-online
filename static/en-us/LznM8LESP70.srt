1
00:00:00,000 --> 00:00:02,000
All right. There we go, so I screwed up the even-odd test.

2
00:00:02,000 --> 00:00:07,000
Okay, so xmod2=1, that is to say if we had an odd numbered run through our outer testing loop,

3
00:00:07,000 --> 00:00:11,000
we're going to bias the probability towards removing from the queue.

4
00:00:11,000 --> 00:00:13,000
Otherwise, we're going to bias towards adding to a queue. Okay, good.

5
00:00:13,000 --> 00:00:17,000
This time, we added to a non-full queue 600,000 times

6
00:00:17,000 --> 00:00:23,000
added to a full queue almost 400,000 times removed from a non-empty queue 600,000 times

7
00:00:23,000 --> 00:00:26,000
and removed from an empty queue close to 400,000 times.

8
00:00:26,000 --> 00:00:31,000
This time, even with 1,000 element queue, by adding this bouncing back and forth behavior,

9
00:00:31,000 --> 00:00:33,000
we managed to do a good random testing.

10
00:00:33,000 --> 00:00:37,000
If you think about it, this idea of adding a new outer testing loop

11
00:00:37,000 --> 00:00:39,000
to a random tester is often a pretty good one.

12
00:00:39,000 --> 00:00:41,000
If you think about it, that's exactly probably

13
00:00:41,000 --> 00:00:43,000
what we would end up doing from the file system example.

14
00:00:43,000 --> 00:00:47,000
For special case, mount and unmount, probably what that's going to mean is

15
00:00:47,000 --> 00:00:50,000
hard coating are call to mount at the start of a random file system test,

16
00:00:50,000 --> 00:00:55,000
then executing a bunch of API calls, that is to say opens, closes, make directories and stuff,

17
00:00:55,000 --> 00:00:57,000
and at the end, we're going to hard coat and unmount call.

18
00:00:57,000 --> 00:01:00,000
What that fails to do is interesting stress testing of the mount and unmount logic,

19
00:01:00,000 --> 00:01:03,000
and so remember, if we call mount and unmount with equal probability

20
00:01:03,000 --> 00:01:06,000
as the rest of the calls that was too many times.

21
00:01:06,000 --> 00:01:09,000
But if we hard coat a call to those at the beginning and end of our entire

22
00:01:09,000 --> 00:01:11,000
random testing run, that's probably too few.

23
00:01:11,000 --> 00:01:15,000
What we can do is mount the file system, do a bunch of stuff, unmount it,

24
00:01:15,000 --> 00:01:19,000
and then enclose that in an outer testing loop to make sure that we sort of stress

25
00:01:19,000 --> 00:01:21,000
all the parts of the system that we intend to stress.

26
00:01:21,000 --> 00:01:24,000
We can imagine that the state machine from the file system case is considerably more complicated

27
00:01:24,000 --> 00:01:26,000
than the state machine for queue,

28
00:01:26,000 --> 00:01:29,000
but on the other hand, we could still do this diagram or something like it

29
00:01:29,000 --> 00:01:31,000
and we find that we need to adjust our probabilities.

30
00:01:31,000 --> 00:01:35,000
This is a sort of a deep topic and it's a difficult one. Let's take at one more example.
