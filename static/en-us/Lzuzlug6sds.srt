1
00:00:00,560 --> 00:00:02,469
You're going to write the code to make the create

2
00:00:02,469 --> 00:00:06,210
conference method, Creat and Save Conference Entities. But first I

3
00:00:06,210 --> 00:00:09,730
want to point out how Creating Conference Entities is different

4
00:00:09,730 --> 00:00:13,010
in a way than creating profile entities. For profile entities

5
00:00:13,010 --> 00:00:16,540
we specifically use the unique user ID as the ID

6
00:00:16,540 --> 00:00:20,240
for the identity key. For conferences though, we really don't

7
00:00:20,240 --> 00:00:22,300
care what the key is. So we're going to let

8
00:00:22,300 --> 00:00:25,960
App Engine allocate it for us. So here's the code

9
00:00:25,960 --> 00:00:28,890
to let apengent allocate the key. You used

10
00:00:28,890 --> 00:00:33,180
the factory.allocateId method, and in the simplest case

11
00:00:33,180 --> 00:00:36,127
you just provide the entity class. So that

12
00:00:36,127 --> 00:00:39,240
would be raspy conference profile whatever. So for

13
00:00:39,240 --> 00:00:41,420
example, to allocate an ID to a conference

14
00:00:41,420 --> 00:00:45,140
entity, you specify the key type and conference.

15
00:00:45,140 --> 00:00:48,590
And you specify conference.class. But this isn't quite

16
00:00:48,590 --> 00:00:51,030
right actually, though. One more thing we need

17
00:00:51,030 --> 00:00:52,840
to do, is to take account of the fact that

18
00:00:52,840 --> 00:00:55,980
the conference has a parent. Which is a profile entity of

19
00:00:55,980 --> 00:00:58,830
the user who created it. So when you want to allocate

20
00:00:58,830 --> 00:01:01,400
an ID to an entity that has a parent when you

21
00:01:01,400 --> 00:01:04,379
call the allocate ID method. You need to specify the

22
00:01:04,379 --> 00:01:09,010
parentKey as the first argument. So here's the code you need

23
00:01:09,010 --> 00:01:12,130
to write to allocate an ID to a conference entity. You

24
00:01:12,130 --> 00:01:16,190
need to specify the profile key for the ancestor and specify

25
00:01:16,190 --> 00:01:19,530
the conference class. Another thing to mention is

26
00:01:19,530 --> 00:01:22,200
that you've already learned how to save an entity

27
00:01:22,200 --> 00:01:25,370
by calling ofy.save. But in this case, when you

28
00:01:25,370 --> 00:01:27,770
save your conferences, you also need to save the

29
00:01:27,770 --> 00:01:31,165
profile entity. You can just use the entities function,

30
00:01:31,165 --> 00:01:35,310
IES, the pluralized version, and specify the list of

31
00:01:35,310 --> 00:01:38,810
comma separated entities to save. You should have already

32
00:01:38,810 --> 00:01:42,000
copied the skeleton version of the create conference method

33
00:01:42,000 --> 00:01:44,820
into the conference API class. But if you haven't, go ahead

34
00:01:44,820 --> 00:01:47,440
and do it now. You see that it's full of to dos.

35
00:01:47,440 --> 00:01:50,970
You're going to go ahead and implement each of these to dos. First

36
00:01:50,970 --> 00:01:52,850
of all, you need to get the user ID of the logged

37
00:01:52,850 --> 00:01:56,410
in user. Then you're going to get the key of the user's profile.

38
00:01:56,410 --> 00:02:00,920
Then you're going to allocate a key for the conference. And don't forget

39
00:02:00,920 --> 00:02:03,360
the conference has a parent so you need to take that into

40
00:02:03,360 --> 00:02:07,087
consideration when allocating the ID for the key. You're going to get

41
00:02:07,087 --> 00:02:10,056
the ID for the conference entity. Then you actually

42
00:02:10,056 --> 00:02:12,829
need to see if the profile entity corresponding to the

43
00:02:12,829 --> 00:02:16,404
profile, that's the parent of the conference actually exists. If

44
00:02:16,404 --> 00:02:18,378
it does get it out of the datastore, if it

45
00:02:18,378 --> 00:02:20,644
doesn't go ahead and create a new one using the

46
00:02:20,644 --> 00:02:24,670
default values for the profile properties. And then finally, you

47
00:02:24,670 --> 00:02:27,720
actually create the conference. Then you need to save both

48
00:02:27,720 --> 00:02:31,040
the conference and the profile entities, and return the profile.

49
00:02:32,400 --> 00:02:34,450
The reason you need to save both the conference and

50
00:02:34,450 --> 00:02:37,750
the profile entities. Is even though if you've got the

51
00:02:37,750 --> 00:02:40,010
existing profile out of the data store, you haven't made

52
00:02:40,010 --> 00:02:43,400
any changes to it. If the profile didn't already exist, you

53
00:02:43,400 --> 00:02:45,950
will have created a new one, so you will need

54
00:02:45,950 --> 00:02:50,360
to save it. So, go ahead and fill in the ToDos

55
00:02:50,360 --> 00:02:54,290
in createConference. You already copied over the skeleton version of

56
00:02:54,290 --> 00:02:57,130
it, and now you can write the code in the ToDos.

57
00:02:58,650 --> 00:03:02,300
When you've implemented createConference. You can run your app

58
00:03:02,300 --> 00:03:05,000
on local host. And then go ahead and create a

59
00:03:05,000 --> 00:03:08,230
conference or two. And you can use API's explorer

60
00:03:08,230 --> 00:03:10,885
or you can use the create conference page in the

61
00:03:10,885 --> 00:03:14,940
WebUI. Then check you conference entities in the data

62
00:03:14,940 --> 00:03:17,650
store viewer in the admin console. To make sure that

63
00:03:17,650 --> 00:03:20,410
they go created as you expected. Now at this

64
00:03:20,410 --> 00:03:24,068
point you actually can use the create a conference page.

65
00:03:24,068 --> 00:03:27,150
In the WebUI for the app because when you submit

66
00:03:27,150 --> 00:03:30,310
this form, it sends a call to the create conference function.

67
00:03:30,310 --> 00:03:33,950
And you've actually implemented that now. So using this form should

68
00:03:33,950 --> 00:03:36,790
let you create conferences. And it's kind of a nice, easy

69
00:03:36,790 --> 00:03:38,930
thing to do. What you need to do is specify the

70
00:03:38,930 --> 00:03:42,770
name, and all the other values will default. However, at this

71
00:03:42,770 --> 00:03:45,440
point you can't use the show conferences to check that the

72
00:03:45,440 --> 00:03:49,500
conference got created. Because you haven't yet implemented the function that

73
00:03:49,500 --> 00:03:53,120
provides the behavior of the show Conference page. So, no

74
00:03:53,120 --> 00:03:55,850
matter whether you create a conference in the APIs Explorer,

75
00:03:55,850 --> 00:03:58,550
or the create conference page in the WebUI. You'll need

76
00:03:58,550 --> 00:04:00,830
to use the data store view in the Admin Console,

77
00:04:00,830 --> 00:04:03,780
to check that the conference got created. After you've created

78
00:04:03,780 --> 00:04:06,075
some conferences. Go ahead and look at them in the

79
00:04:06,075 --> 00:04:08,760
Datastore view of the Admin Console, and see if you

80
00:04:08,760 --> 00:04:12,180
can figure out which properties are indexed. Check all that apply.
