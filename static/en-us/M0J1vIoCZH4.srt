1
00:00:00,000 --> 00:00:04,000
What I want to do is go back to my terminal.

2
00:00:04,000 --> 00:00:07,000
Instead of looking at a GCC bug, we're going to look at an LVM bug.

3
00:00:07,000 --> 00:00:09,000
I believe this is one we already looked at a little bit.

4
00:00:09,000 --> 00:00:12,000
We say clang -02 small.c.

5
00:00:12,000 --> 00:00:15,000
It's going to die with an assertion violation about isa(Val)

6
00:00:15,000 --> 00:00:19,000
and Unknown live-in to the entry block, and that's assertion failed.

7
00:00:19,000 --> 00:00:23,000
What we need to do first is check of the lvm people already know about this one.

8
00:00:23,000 --> 00:00:27,000
We're going to go here to their bugzilla and search for this exact string.

9
00:00:27,000 --> 00:00:30,000
All right. They don't know about this bug, so that's nice.

10
00:00:30,000 --> 00:00:33,000
If we know about a bug and they don't know about it, we can report it.

11
00:00:33,000 --> 00:00:35,000
Now we have to go back and make a reduced test case.

12
00:00:35,000 --> 00:00:37,000
What I'm going to do here is instead of invoking the delta debugger,

13
00:00:37,000 --> 00:00:40,000
which is this nice extremely general purpose powerful tool,

14
00:00:40,000 --> 00:00:42,000
I'm going to invoke a different tool that's called C reduce,

15
00:00:42,000 --> 00:00:44,000
and it's one produced by my group.

16
00:00:44,000 --> 00:00:46,000
What it is is an extremely special-purposed delta debugger,

17
00:00:46,000 --> 00:00:50,000
so it operates on exactly the same delta debugging ideas that the other tool

18
00:00:50,000 --> 00:00:53,000
operates by, and it just has extra knowledge embedded in it

19
00:00:53,000 --> 00:00:55,000
about how to reduce C programs.

20
00:00:55,000 --> 00:00:57,000
This is going to take a little while, so you don't have to wait for it like I do.

21
00:00:57,000 --> 00:00:59,000
Let's run a time command and just see how long it takes.

22
00:00:59,000 --> 00:01:03,000
That took about 11 minutes. Not incredibly quick, but not too shabby either.

23
00:01:03,000 --> 00:01:06,000
Remember, this wasn't time that I had to be attending to the computer.

24
00:01:06,000 --> 00:01:08,000
The computer was just doing an automated search algorithm.

25
00:01:08,000 --> 00:01:10,000
Here is the output of the reduced test case.

26
00:01:10,000 --> 00:01:12,000
It's pretty small, so let's check its byte count.

27
00:01:12,000 --> 00:01:14,000
It has 274 bytes. That's nice.

28
00:01:14,000 --> 00:01:17,000
What I'm going to do here is make a bug report.

29
00:01:17,000 --> 00:01:20,000
What I'm going to first do is make sure we know the version of clang.

30
00:01:20,000 --> 00:01:23,000
It's version 156970.

31
00:01:23,000 --> 00:01:25,000
I'm going to make sure the test case gets included.

32
00:01:25,000 --> 00:01:29,000
I'm going to show clang crashing on it. That's a bug report.

33
00:01:29,000 --> 00:01:34,000
If I haven't appeared to go through all of the steps that I've narrated to you earlier,

34
00:01:34,000 --> 00:01:38,000
it's because I've reported a lot of compiler bugs, and I know what I can get away with.

35
00:01:38,000 --> 00:01:40,000
There we go.

36
00:01:40,000 --> 00:01:44,000
This includes, I believe, enough information for the LVM people to reproduce the bug.

37
00:01:44,000 --> 00:01:46,000
It should be good.

38
00:01:46,000 --> 00:01:49,000
I've marked that we're reporting its chunk.

39
00:01:49,000 --> 00:01:52,000
We just need a name for this bug report.

40
00:01:52,000 --> 00:01:55,000
The bugzilla is trying to help us avoid a duplicate,

41
00:01:55,000 --> 00:01:58,000
and I don't think it's told us about anything that we didn't know.

42
00:01:58,000 --> 00:02:02,000
In fact, all these are marked as fixed anyway, so we're good. Now let us ship this off.

43
00:02:02,000 --> 00:02:05,000
Now the LVM developers, when they get up in the morning,

44
00:02:05,000 --> 00:02:07,000
have a new bug report to look at.

45
00:02:07,000 --> 00:02:10,000
That concludes our data on bug reporting.
