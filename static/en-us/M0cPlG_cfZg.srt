1
00:00:00,000 --> 00:00:05,000
The thing I want to do next is say let's just deal with a single row at a time.

2
00:00:05,000 --> 00:00:09,000
Let's not worry about the rest of the row. Let's now worry about going in columns.

3
00:00:09,000 --> 00:00:14,000
Just deal with one row but also have that row handle the cross letters--the cross words.

4
00:00:14,000 --> 00:00:18,000
I'm going to need a representation for a row, and I think I'm going to make that be a list.

5
00:00:18,000 --> 00:00:21,000
There are many possible choices, but a list is good.

6
00:00:21,000 --> 00:00:26,000
I choose a list rather than a tuple, because I want to be able to change it in place.

7
00:00:26,000 --> 00:00:30,000
I want to be able to modify the row as we go, as the game evolves.

8
00:00:30,000 --> 00:00:32,000
Row is going to be a list of squares.

9
00:00:32,000 --> 00:00:36,000
If the square is a letter, we'll just use that letter as the value of the square.

10
00:00:36,000 --> 00:00:41,000
If the square is an empty spot which has nothing in it,

11
00:00:41,000 --> 00:00:46,000
I think I'll use dot just to say nothing is there.

12
00:00:46,000 --> 00:00:49,000
A trick that you learn once you've done this kind of thing a lot of times,

13
00:00:49,000 --> 00:00:55,000
is to say I'm going to be look at letters, I'm going to be looking at locations in the row,

14
00:00:55,000 --> 00:00:57,000
I'm going to be looking at their adjacent letters and going to the right

15
00:00:57,000 --> 00:00:59,000
and going to the left.

16
00:00:59,000 --> 00:01:03,000
If I'm trying to fill in from this anchor, I'll move to the left to put in the prefix

17
00:01:03,000 --> 00:01:06,000
and I'll move to the right to extend the word.

18
00:01:06,000 --> 00:01:09,000
It seems to me like I'm always going to have to be making checks of saying

19
00:01:09,000 --> 00:01:13,000
what's the next character, is it a letter, is it an anchor, what is it?

20
00:01:13,000 --> 00:01:16,000
Also, oops, did I get past the end of the board.

21
00:01:16,000 --> 00:01:19,000
It seems like I'm going to have to duplicate the amount of code I have to write to check

22
00:01:19,000 --> 00:01:22,000
both the case when I go off the board and when I don't go off the board.

23
00:01:22,000 --> 00:01:26,000
One way to avoid that is to make sure you never go off the board.

24
00:01:26,000 --> 00:01:28,000
It cuts the amount of code in half to some extent.

25
00:01:28,000 --> 00:01:31,000
A way to do that is to put in extra squares--

26
00:01:31,000 --> 00:01:37,000
to say here are the squares on the board, but let's make another extra square on each side

27
00:01:37,000 --> 00:01:42,000
and just fill that in say the value of what's in that square is a boarder,

28
00:01:42,000 --> 00:01:47,000
not a real square that you can play in, but if I'm here and I say what's the value of square

29
00:01:47,000 --> 00:01:52,000
number i -1, I get an answer saying it's a border rather than getting an answer

30
00:01:52,000 --> 00:01:56,000
that's saying when you go i - 1 from position 0 you get an error.

31
00:01:56,000 --> 00:02:00,000
I think I'll use a vertical bar to indicate a border.

32
00:02:00,000 --> 00:02:04,000
I'll have one there, and at the end of my row, I'll have another border.

33
00:02:04,000 --> 00:02:10,000
Now I've sort of got everything. I got borders, letters, empty squares.

34
00:02:10,000 --> 00:02:12,000
The only thing left is anchors.

35
00:02:12,000 --> 00:02:16,000
I think what I'll do here is I'll introduce a special type for anchor.

36
00:02:16,000 --> 00:02:21,000
I could have used something like a tuple or a set of characters,

37
00:02:21,000 --> 00:02:25,000
but I want to make sure I know, and I want to have something in my code

38
00:02:25,000 --> 00:02:31,000
that says if the value of row[ i ] is an instance of anchor, then I want to do something.

39
00:02:31,000 --> 00:02:37,000
So we'll make anchor be a class, and I want it to be a class that contains the set of letters.

40
00:02:37,000 --> 00:02:39,000
I can do that in a very easy way.

41
00:02:39,000 --> 00:02:42,000
I can use a class statement to say I'm going to define a new class.

42
00:02:42,000 --> 00:02:47,000
The class is called an anchor, and the class is a subset of the set class.

43
00:02:47,000 --> 00:02:49,000
Then I don't need anything else for the definition of the class.

44
00:02:49,000 --> 00:02:55,000
All I have to know is that anchors are a type of set, but they're a particular type of set.

45
00:02:55,000 --> 00:02:58,000
They're a set of anchor letters. Here's a code for that.

46
00:02:58,000 --> 00:03:02,000
I define a class of anchor. I have all of my allowable letters.

47
00:03:02,000 --> 00:03:08,000
Then I say any is an anchor, which allows you to put any letter onto that anchor spot.

48
00:03:08,000 --> 00:03:13,000
Now I want to represent this row where here are the borders, here are the empty spots,

49
00:03:13,000 --> 00:03:16,000
and here are the particular letters, and this representation--

50
00:03:16,000 --> 00:03:20,000
the schematic representation as a string does not account for a fact

51
00:03:20,000 --> 00:03:23,000
that after the A we're going to have

52
00:03:23,000 --> 00:03:26,000
two restricted anchors that have to contain these characters.

53
00:03:26,000 --> 00:03:31,000
So we'll define them--use the names mnx and moab to be the two anchors

54
00:03:31,000 --> 00:03:34,000
that are restricted to have only those letters.

55
00:03:34,000 --> 00:03:39,000
Now our row is equal to the border square is element number 0.

56
00:03:39,000 --> 00:03:42,000
Then the A is element number 1.

57
00:03:42,000 --> 00:03:46,000
Then we have these two restricted anchors, two more empty spots,

58
00:03:46,000 --> 99:59:59,999
another anchor where anything can go--the B and the E, and so on.
