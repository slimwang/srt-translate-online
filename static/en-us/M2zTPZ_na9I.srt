1
00:00:00,012 --> 00:00:03,782
>> You see this in a situation where you may have a 4000 pixel by 4000 pixel

2
00:00:03,782 --> 00:00:08,044
texture that may be fetched from a server. This single fetch can take about 241

3
00:00:08,044 --> 00:00:12,654
milliseconds to download, which is actually pretty fast. If you were actually to

4
00:00:12,654 --> 00:00:17,670
chop up that image into smaller little pixels, so, for example, we would create

5
00:00:17,670 --> 00:00:22,458
4,000 separate images, the total load time to request all of those images to

6
00:00:22,458 --> 00:00:27,456
occupy the same amount of space would change drastically. In fact, it would

7
00:00:27,456 --> 00:00:32,759
actually increase from 241 milliseconds to 4.3 seconds, that's an increase of 17

8
00:00:32,759 --> 00:00:37,787
times. With this in mind, it makes sense then that in order to reduce load times

9
00:00:37,787 --> 00:00:42,638
for high performance web applications, we should group as many of the small

10
00:00:42,638 --> 00:00:47,977
elements together into one large image to reduce the number HTTP requests. This

11
00:00:47,977 --> 00:00:52,552
process of packing smaller images into larger images is known as texture

12
00:00:52,552 --> 00:00:57,232
atlasing and is a very well-studied process in most games. For example, in

13
00:00:57,232 --> 00:01:02,182
real-time graphics, a texture atlas is a single large image that contains many

14
00:01:02,182 --> 00:01:06,560
smaller sub-images, each of which can be referenced independently.
