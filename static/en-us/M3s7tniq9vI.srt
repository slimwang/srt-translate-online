1
00:00:00,140 --> 00:00:02,600
A protocol is also a type.

2
00:00:02,600 --> 00:00:05,800
You can use a protocol name in all
of the places you would normally use

3
00:00:05,800 --> 00:00:06,840
any other type.

4
00:00:06,840 --> 00:00:10,560
To describe variables, constants, and
properties, to indicate parameter and

5
00:00:10,560 --> 00:00:14,010
return types, and to indicate
the item types in a collection.

6
00:00:14,010 --> 00:00:16,020
Here's a class called DinnerCrew.

7
00:00:16,020 --> 00:00:19,380
This DinnerCrew is very egalitarian and
inclusive.

8
00:00:19,380 --> 00:00:22,430
All of its members need to implement
the Sous Chef protocol, but

9
00:00:22,430 --> 00:00:25,830
otherwise they could be of any class,
enum, or struct.

10
00:00:25,830 --> 00:00:29,268
So we specify the members
array property like this.

11
00:00:29,268 --> 00:00:32,870
We write Souschef where we would
otherwise write the type of the items in

12
00:00:32,870 --> 00:00:33,481
the array.

13
00:00:33,481 --> 00:00:36,990
And we do the same for
the parameters in the init method.

14
00:00:36,990 --> 00:00:41,240
But Sous Chef is in the class itself or
a struct.

15
00:00:41,240 --> 00:00:43,805
How can it be capable of making dinner?

16
00:00:43,805 --> 00:00:45,500
Sous Chef has no logic of its own.

17
00:00:46,598 --> 00:00:49,890
To specify Sous Chef
as a type is to say,

18
00:00:49,890 --> 00:00:54,170
I don't care what type goes here as
long as it adopts a Sous Chef protocol.

19
00:00:54,170 --> 00:00:57,290
Here, you can see that it doesn't
matter if I initialize a DinnerCrew

20
00:00:57,290 --> 00:01:00,040
with a random passer by or a roommate.

21
00:01:00,040 --> 00:01:02,360
As long as each member implements
the Sous Chef protocol.
