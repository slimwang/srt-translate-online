1
00:00:00,000 --> 00:00:03,000
Let's look at the same problem again,

2
00:00:03,000 --> 00:00:05,000
and let me just draw the two scan lines--

3
00:00:05,000 --> 00:00:10,000
the left scan line and the right scan line.

4
00:00:10,000 --> 00:00:15,000
As before, we get to see red pixels, black pixels,

5
00:00:15,000 --> 00:00:20,000
and the occlusive blue pixels as indicated over here.

6
00:00:20,000 --> 00:00:27,000
Now we'll try to match the entire scan line on the top to the entire scan line on the bottom.

7
00:00:27,000 --> 00:00:31,000
so we can figure out what the exact correspondence is.

8
00:00:31,000 --> 00:00:34,000
We do this by minimizing the cost function.

9
00:00:34,000 --> 00:00:37,000
The cost comes in two different flavors.

10
00:00:37,000 --> 00:00:40,000
There is the cost of bad matches.

11
00:00:40,000 --> 00:00:45,000
Let's assume if the color matches perfect, we pay zero,

12
00:00:45,000 --> 00:00:48,000
but if the color matches very poor, we pay 20.

13
00:00:48,000 --> 00:00:51,000
There is also the cost of occlusion.

14
00:00:51,000 --> 00:00:56,000
If in the process of matching these lines we have to assume a pixel is occluded,

15
00:00:56,000 --> 00:00:58,000
we're just going to pay 10.

16
00:00:58,000 --> 00:01:04,000
The question now is optimal alignment of the top to the bottom under this cost function?

17
00:01:04,000 --> 00:01:08,000
Let's just go through this. Let me look at two different possible alignments.

18
00:01:08,000 --> 00:01:12,000
Here is one. We align those black pixels, and we align the red pixels.

19
00:01:12,000 --> 99:59:59,999
If we did this, what is the cost of the total match. Please put the answer over here.
