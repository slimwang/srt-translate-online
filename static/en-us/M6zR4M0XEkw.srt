1
00:00:00,260 --> 00:00:03,590
Before we talk about how we can implement

2
00:00:03,590 --> 00:00:06,740
RVM efficiently with a back to back DRAM. Let's

3
00:00:06,740 --> 00:00:09,160
first understand how we can use a back

4
00:00:09,160 --> 00:00:12,880
to back to DRAM to implement a persistent file

5
00:00:12,880 --> 00:00:15,900
cache. What we mean by that is, typically

6
00:00:15,900 --> 00:00:19,870
file systems use a file cache to hold data

7
00:00:19,870 --> 00:00:22,750
that is brought from the disk for efficiency

8
00:00:22,750 --> 00:00:25,590
of manipulation by programs or anything on the processor.

9
00:00:25,590 --> 00:00:28,420
And when we say it's a persistent file cache,

10
00:00:28,420 --> 00:00:31,170
what we're saying is, even if there is power failure,

11
00:00:31,170 --> 00:00:34,520
the contents of this file cache is still available when

12
00:00:34,520 --> 00:00:36,620
the power comes back up again. And in order to

13
00:00:36,620 --> 00:00:39,070
achieve that, what we're going to do is, we're going to

14
00:00:39,070 --> 00:00:44,170
string a UPS power supply, to back this file cache,

15
00:00:44,170 --> 00:00:47,380
which is implemented in DRAM. So the contents of the

16
00:00:47,380 --> 00:00:51,200
file cache never goes away. And we also postulate that,

17
00:00:51,200 --> 00:00:54,170
there is VM, a virtual memory protection. That

18
00:00:54,170 --> 00:00:56,390
have been built in to the operating system to

19
00:00:56,390 --> 00:00:59,890
prevent operating system errors such as wild writes

20
00:00:59,890 --> 00:01:03,610
to the file cache during software crash or power

21
00:01:03,610 --> 00:01:05,630
failure. Now there are two ways to use

22
00:01:05,630 --> 00:01:09,510
the Rio file cache. One is, when a process

23
00:01:09,510 --> 00:01:13,052
does file writes, actually they are writing to the

24
00:01:13,052 --> 00:01:16,480
in memory copy of the file. Typically operating system

25
00:01:16,480 --> 00:01:21,030
buffers the rights that you do to files in DRAM and then write them out to the

26
00:01:21,030 --> 00:01:26,040
disk in opportune moments later on. And now if these file rights go to

27
00:01:26,040 --> 00:01:31,470
the file cache which is battery backed then you make sure that

28
00:01:31,470 --> 00:01:37,060
these file writes are persistent. Normally if an application wants

29
00:01:37,060 --> 00:01:42,120
to make sure that when it writes a file, the contents of

30
00:01:42,120 --> 00:01:45,850
the file is immediately forced disk, the application

31
00:01:45,850 --> 00:01:48,860
will have to do an Fsync call in

32
00:01:48,860 --> 00:01:51,700
a Unix system, for instance. But if we

33
00:01:51,700 --> 00:01:55,440
have this battery-backed file cache, the application can simply

34
00:01:55,440 --> 00:01:58,410
do normal file writes and don't worry about

35
00:01:58,410 --> 00:02:01,340
doing an fsync, because writing to the file

36
00:02:01,340 --> 00:02:03,180
writes to the file cache, and the file

37
00:02:03,180 --> 00:02:07,020
cache is persistent by definition, because it is battery-backed.

38
00:02:07,020 --> 00:02:13,270
And similarly, another common operation that is done is Unix allows files to be

39
00:02:13,270 --> 00:02:19,160
mmaped, that is mapped into memory. And if an application maps a file into

40
00:02:19,160 --> 00:02:21,800
memory and writes to that file using

41
00:02:21,800 --> 00:02:25,780
normal program writes, those normal program writes

42
00:02:25,780 --> 00:02:29,730
become persistent because these rights are backed

43
00:02:29,730 --> 00:02:32,850
by the file cache. And the file cache

44
00:02:32,850 --> 00:02:36,320
is battery-backed, and therefore normal program writes

45
00:02:36,320 --> 00:02:39,000
becomes persistent also. So with the Rio file

46
00:02:39,000 --> 00:02:45,700
cache that is battery-backed, what we get is that file writes by a process as

47
00:02:45,700 --> 00:02:47,670
well as normal program writes to memory

48
00:02:47,670 --> 00:02:50,910
mapped files become persistent by definition. In the

49
00:02:50,910 --> 00:02:54,300
absence of this facility of a persistent

50
00:02:54,300 --> 00:02:57,860
file cache. If an application were to mmap

51
00:02:57,860 --> 00:03:01,170
a file, and write to that using normal program

52
00:03:01,170 --> 00:03:04,380
rights, then it will have to do what is called

53
00:03:04,380 --> 00:03:07,690
an msync call, in order to make sure that writes

54
00:03:07,690 --> 00:03:10,360
that it did to virtual memory actually get persisted on

55
00:03:10,360 --> 00:03:13,870
the disk. But with a file cache, real file

56
00:03:13,870 --> 00:03:16,160
cache that is persistent, there is no need to do

57
00:03:16,160 --> 00:03:19,980
that, because by definition, we are saying, any rights that

58
00:03:19,980 --> 00:03:23,470
get into this file cache, will persist. In other words,

59
00:03:23,470 --> 00:03:26,250
the contents of the file cache, will survive

60
00:03:26,250 --> 00:03:29,830
power failures. So if there is a system crash,

61
00:03:29,830 --> 00:03:32,410
whether it is a power failure or software

62
00:03:32,410 --> 00:03:36,300
crash, the file cache data, in memory, is going

63
00:03:36,300 --> 00:03:39,020
to be written onto the disk for recovery.

64
00:03:39,020 --> 00:03:41,840
And so the upshot is no synchronous rights are

65
00:03:41,840 --> 00:03:44,480
needed to the disk any more. It also means

66
00:03:44,480 --> 00:03:49,120
that writeback of files written to by an application

67
00:03:49,120 --> 00:03:52,632
can be arbitrarily delayed. What that means from the file

68
00:03:52,632 --> 00:03:56,270
system perspective is that if the lifetime of files is

69
00:03:56,270 --> 00:04:00,100
very short then those files go away. And so you

70
00:04:00,100 --> 00:04:01,580
don't have to write it to the disk in the

71
00:04:01,580 --> 00:04:05,140
first place. And this is common in compilation process for

72
00:04:05,140 --> 00:04:08,280
instance a number of temporary files are created. And those

73
00:04:08,280 --> 00:04:10,740
files live in the file cache for a short amount

74
00:04:10,740 --> 00:04:14,310
of time and when the compilation process is complete, those files

75
00:04:14,310 --> 00:04:19,100
are deleted so you never have to write those files to the disk. So that's a good

76
00:04:19,100 --> 00:04:23,560
thing about having this idea of a persistent file

77
00:04:23,560 --> 00:04:26,520
cache. Now let's look at how we can use

78
00:04:26,520 --> 00:04:30,490
RIO to implement RVM. So we've got this persistent

79
00:04:30,490 --> 00:04:32,990
file cache and we're going to ask the question,

80
00:04:32,990 --> 00:04:35,440
if we have this persistent file cache, how can

81
00:04:35,440 --> 00:04:39,640
we optimize the implementation of a reliable virtual memory?
