1
00:00:00,038 --> 00:00:03,679
Way back in Unit 1, when we talked about step in work complexity, we said that

2
00:00:03,679 --> 00:00:07,436
we would love to find algorithms that have the same work complexity as the serial

3
00:00:07,436 --> 00:00:10,023
algorithm but have a smaller step complexity.

4
00:00:10,023 --> 00:00:12,657
Reduce would be a good example here, or scan.

5
00:00:12,657 --> 00:00:15,839
But if we said we can't do that, sometimes we would be willing

6
00:00:15,839 --> 00:00:19,177
to accept more work if it gets us fewer steps.

7
00:00:19,177 --> 00:00:21,631
And that's what we are going to do here. But how?

8
00:00:21,631 --> 00:00:24,342
This is not intuitive, or more at least it isn't for most people,

9
00:00:24,342 --> 00:00:26,957
and it certainly wasn't for me when I learned this material.

10
00:00:26,957 --> 00:00:31,532
Hills and Steele first expressed skepticism they could improve on quadratic work,

11
00:00:31,532 --> 00:00:36,051
but then concluded--and I am quoting from their paper--essentially we overlooked

12
00:00:36,051 --> 00:00:39,424
the power of having many processors working on the problem at once.

13
00:00:39,424 --> 00:00:42,000
So at a high level, here's what we are going to do.

14
00:00:42,000 --> 00:00:47,205
On every node, we start by knowing the node that's 1 hop away. That's the next pointer, in blue.

15
00:00:47,205 --> 00:00:54,018
So on the next iteration, we can visit our next pointer's next pointer, and get 2 hops away.

16
00:00:54,018 --> 00:00:57,488
And then, on the next iteration, we can get to 3 hops away, and so on.

17
00:00:57,488 --> 00:01:00,130
So that's what I am showing here when I say straight forward approach.

18
00:01:00,130 --> 00:01:05,152
As we increase the number of iterations, we are also increasing the number of hops away.

19
00:01:05,152 --> 00:01:07,313
But that's the wrong way to think about it.

20
00:01:07,313 --> 00:01:12,535
If we just did it that way, we'd be repeating a lot of work that the nodes down the chain are doing,

21
00:01:12,535 --> 00:01:15,723
and we would have quadratic complexity work.

22
00:01:15,723 --> 00:01:22,946
Instead, after the first iteration, we have each node knowing the node that is 2 hops away.

23
00:01:22,946 --> 00:01:28,376
So let's say we're interested in this node and we know that we are pointing to node x here.

24
00:01:28,376 --> 00:01:32,202
Well normally what we'd do is we'd take the red pointer here,

25
00:01:32,202 --> 00:01:36,598
and then change our red pointer to be red pointer plus blue pointer.

26
00:01:36,598 --> 00:01:40,890
So, we'd be moving from knowing the node 2 hops away to the node knowing 3 hops away.

27
00:01:40,890 --> 00:01:45,340
But look, x also knows the node that is 2 hops away.

28
00:01:45,340 --> 00:01:49,739
So, I know the node that's 2 hops away, x knows the node that's 2 hops away.

29
00:01:49,739 --> 00:01:53,980
So, on the second iteration we can leverage the work that x already did

30
00:01:53,980 --> 00:02:00,060
on it's first iteration to get a pointer that is now 4 hops away.

31
00:02:00,060 --> 00:02:07,487
So we can go red, then red to set our new red pointer here, to be the chum of the chum.

32
00:02:07,487 --> 00:02:10,401
Now we are going to have a pointer to a node that is 4 hops away,

33
00:02:10,401 --> 00:02:13,363
which also has a pointer to a node that is 4 hops away.

34
00:02:13,363 --> 00:02:17,367
So the next iteration will have a pointer that is 8 hops away and so on.

35
00:02:17,367 --> 00:02:23,012
So now, instead of going 1, 2, 3, 4, we're now going 1, 2, 4, 8.

36
00:02:23,012 --> 00:02:27,858
So for N iterations, as a function of N, how many steps is this going to take?
