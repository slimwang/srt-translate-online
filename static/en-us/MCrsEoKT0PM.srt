1
00:00:00,830 --> 00:00:05,220
Now here's a very important and subtle
point about the completion of a wait.

2
00:00:05,220 --> 00:00:11,980
When wait returns, the only thing that
you know is that buf is safe to reuse.

3
00:00:11,980 --> 00:00:12,840
If the handle is for

4
00:00:12,840 --> 00:00:16,520
a receive, then it must mean
that the message was delivered.

5
00:00:16,520 --> 00:00:17,340
But what about send?

6
00:00:18,530 --> 00:00:23,490
For a send, buffer being available for
use doesn't really tell you anything.

7
00:00:23,490 --> 00:00:26,360
For instance it could mean the message
was delivered since the wave

8
00:00:26,360 --> 00:00:29,600
might actually wait until
the message is delivered, but

9
00:00:29,600 --> 00:00:31,660
it doesn't have to mean that.

10
00:00:31,660 --> 00:00:35,670
In fact it might not even be the case
that the message is even in flight yet.

11
00:00:35,670 --> 00:00:38,750
The precise action is
implementation dependent.

12
00:00:38,750 --> 00:00:40,290
Implementation dependent.

13
00:00:40,290 --> 00:00:42,260
But why?

14
00:00:42,260 --> 00:00:46,270
The answer has to do with buffering
implied by these primitives.

15
00:00:46,270 --> 00:00:49,680
Remember that the processes
are executing asynchronously.

16
00:00:49,680 --> 00:00:54,700
Also remember that a send completes when
the caller may reuse the message buffer.

17
00:00:54,700 --> 00:00:56,660
So let's imagine what might happen.

18
00:00:56,660 --> 00:00:59,020
Here are two ranks, i and j.

19
00:00:59,020 --> 00:01:01,840
Rank i is computing, and
then decides to send a message to j.

20
00:01:01,840 --> 00:01:06,310
In the meantime, j is running
off asynchronously for a long,

21
00:01:06,310 --> 00:01:10,660
long time before it decides, oh,
I'm ready to receive a message from i.

22
00:01:11,910 --> 00:01:14,850
So the send could arrive way before
the receive is actually ready.

23
00:01:16,200 --> 00:01:18,700
So should the send stop and

24
00:01:18,700 --> 00:01:22,690
wait until the receive has been
posted before it starts delivering?

25
00:01:22,690 --> 00:01:26,500
In this scenario, rank i would
have to wait a long, long time.

26
00:01:26,500 --> 00:01:29,160
What rank i might do
instead is make a copy and

27
00:01:29,160 --> 00:01:32,300
then later on decide
to start the delivery.

28
00:01:32,300 --> 00:01:34,860
That way rank i can kind of keep going.

29
00:01:34,860 --> 00:01:37,940
So by leaving the meaning of the
completion of a send a little bit loose,

30
00:01:37,940 --> 00:01:41,840
you give more freedom to the
implementation to make a good trade off.

31
00:01:41,840 --> 00:01:43,490
Okay, so
what's the punchline of all this?

32
00:01:44,570 --> 00:01:47,430
Well, it means that when you're
trying to determine if your algorithm

33
00:01:47,430 --> 00:01:50,720
is correct,
meaning that a sent message is received,

34
00:01:50,720 --> 00:01:55,059
you need to prove that for every posted
send, there is a matching receive.

35
00:01:56,130 --> 00:02:00,422
This protocol that sends, match,
receives is called two-sided messaging.

36
00:02:00,422 --> 00:02:03,230
Two-sided suggests there
might be a one sided, and

37
00:02:03,230 --> 00:02:06,330
in fact that's kind of what
shared memory communication is.

38
00:02:06,330 --> 00:02:07,200
I'll let you think about that.
