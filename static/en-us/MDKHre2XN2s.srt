1
00:00:00,160 --> 00:00:02,960
Let's discuss the relationship between LSQ entries, ROB

2
00:00:02,960 --> 00:00:06,602
entries, and reservation stations. When we issue a

3
00:00:06,602 --> 00:00:09,354
load or a store instruction, we need a

4
00:00:09,354 --> 00:00:13,268
ROB entry. Every instruction needs a ROB entry. So,

5
00:00:13,268 --> 00:00:18,427
when we issue a non load/store instruction, we also get a ROB entry, and we get

6
00:00:18,427 --> 00:00:22,123
for a non load/store instruction a reservation station

7
00:00:22,123 --> 00:00:25,508
of the right type. For loads and stores that

8
00:00:25,508 --> 00:00:28,364
we get a LSQ entry. These act as a reservation

9
00:00:28,364 --> 00:00:31,091
stations for loads and stores. So note that we can

10
00:00:31,091 --> 00:00:33,368
not issue a load or a store unless we have

11
00:00:33,368 --> 00:00:36,930
both a ROB entry available and an LSQ entry available.

12
00:00:36,930 --> 00:00:40,066
Just like we couldn't issue a non-load/store instruction if we

13
00:00:40,066 --> 00:00:42,754
didn't have both a ROB entry available and a reservation

14
00:00:42,754 --> 00:00:46,176
station of the right type available. When we execute a

15
00:00:46,176 --> 00:00:50,200
load/store instruction, there are actually two parts to that execution.

16
00:00:50,200 --> 00:00:53,904
First, we need to compute the address. Second, we need to

17
00:00:53,904 --> 00:00:56,754
produce the value for a load. That means we first compute

18
00:00:56,754 --> 00:00:59,370
the address, then we get the value from memory. For a

19
00:00:59,370 --> 00:01:02,870
store, actually this can happen in any order. We are computing the

20
00:01:02,870 --> 00:01:05,750
address, while we are also trying to obtain the value of

21
00:01:05,750 --> 00:01:09,210
the register that we need to store to memory. We write the

22
00:01:09,210 --> 00:01:12,270
result only for loads. For a store, there is no write

23
00:01:12,270 --> 00:01:15,450
of the result. The store simply keeps the value and the address

24
00:01:15,450 --> 00:01:17,946
in the load/store queue for other loads to get

25
00:01:17,946 --> 00:01:20,058
it, and for the store to finally send it

26
00:01:20,058 --> 00:01:22,948
to memory on commit. But the load, as soon

27
00:01:22,948 --> 00:01:25,918
as it gets that result, will broadcast that result to

28
00:01:25,918 --> 00:01:30,290
dependent instructions. So that pretty much all the reservation

29
00:01:30,290 --> 00:01:33,160
stations that are waiting for that register value can

30
00:01:33,160 --> 00:01:36,462
now proceed. So note that our load/store unit, although

31
00:01:36,462 --> 00:01:40,370
it doesn't have reservation stations, it has the load/store queue.

32
00:01:40,370 --> 00:01:43,070
So when it finally figures out the value for the load,

33
00:01:43,070 --> 00:01:46,190
it needs to broadcast it to subsequent instructions so that it

34
00:01:46,190 --> 00:01:48,782
can be woken up and use that value. They will get

35
00:01:48,782 --> 00:01:52,174
that value from the load/store queue. To commit a load, we move

36
00:01:52,174 --> 00:01:55,720
the ROB head, basically, we free the ROB entry. And we

37
00:01:55,720 --> 00:01:58,800
also move the LSQ head; that is, we free the LSQ

38
00:01:58,800 --> 00:02:02,060
entry. And we need to do the same thing for stores.

39
00:02:02,060 --> 00:02:05,392
For stores, in addition to this, we have to send the write

40
00:02:05,392 --> 00:02:08,880
to memory. Pretty much, we've been holding onto the

41
00:02:08,880 --> 00:02:10,940
address and the value until we commit the stores.

42
00:02:10,940 --> 00:02:12,521
So at the time we, when we commit it,

43
00:02:12,521 --> 00:02:14,470
we need to finally send that value to memory.
