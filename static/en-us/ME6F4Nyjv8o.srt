1
00:00:00,600 --> 00:00:02,570
Now that we have our map drawn,

2
00:00:02,570 --> 00:00:07,720
we need to draw circles representing our attendance data on top of it.

3
00:00:07,720 --> 00:00:11,980
The first step in doing this is to actually load our attendance data.

4
00:00:11,980 --> 00:00:18,870
Remember, we used our initial d3.json load function to load the GeoJSON data,

5
00:00:18,870 --> 00:00:24,620
but we never loaded the attendance data that we've been working with all along.

6
00:00:24,620 --> 00:00:26,637
In order to load our attendance data,

7
00:00:26,637 --> 00:00:29,960
we can do exactly what we have previously done.

8
00:00:29,960 --> 00:00:35,477
In this case using an intermediate data transform function to convert our

9
00:00:35,477 --> 00:00:40,970
attendance to an integer and our date to a JavaScript date object.

10
00:00:40,970 --> 00:00:44,640
Which we will then pass to a function as a call back

11
00:00:44,640 --> 00:00:47,140
that I've defined as plot points.

12
00:00:47,140 --> 00:00:51,740
The plot points function is going to act similarly to the draw

13
00:00:51,740 --> 00:00:56,780
function of previous lessons that gets past a single argument, in this case,

14
00:00:56,780 --> 00:00:58,900
data, which corresponds to our attendance data.

15
00:00:58,900 --> 00:01:02,520
And inside of it we will put the code that

16
00:01:02,520 --> 00:01:07,010
will draw the circles corresponding to the attendance of each World Cup.

17
00:01:07,010 --> 00:01:10,280
The only difference from what we've done before is that

18
00:01:10,280 --> 00:01:14,000
we're actually calling a d3 data loading function.

19
00:01:14,000 --> 00:01:16,550
In this case, d3.tsv.

20
00:01:16,550 --> 00:01:21,620
Inside of our other call back function, with loads the GeoJSON.

21
00:01:21,620 --> 00:01:25,580
This is perfectly alright and simply has the effect of saying,

22
00:01:25,580 --> 00:01:32,126
first load my map data, with d3.json, world countries, GeoJSON.

23
00:01:32,126 --> 00:01:36,210
And once that file's loaded call the draw function,

24
00:01:36,210 --> 00:01:41,850
passing the GeoJSON data to it, and then inside of the draw function you

25
00:01:41,850 --> 00:01:45,170
make another call to a data loading function.

26
00:01:45,170 --> 00:01:50,330
In this case d3.tsv, that says when you get through this line

27
00:01:50,330 --> 00:01:56,080
of the draw function, load the world_cup_geo.tsv file.

28
00:01:56,080 --> 00:02:00,070
And once that file's loaded, call the plot_points function so

29
00:02:00,070 --> 00:02:03,826
that the order of functions is called in the following.

30
00:02:03,826 --> 00:02:10,580
First, d3.json is called to load world_countries, which gets passed to draw.

31
00:02:10,580 --> 00:02:16,240
And inside of draw, towards the end, we call d3.tsv.

32
00:02:16,240 --> 00:02:21,620
Which asynchronously loads the World Cup data for the attendances.

33
00:02:21,620 --> 00:02:25,950
And once that file's loaded gets passed to the plot points function.

34
00:02:25,950 --> 00:02:28,890
And in theory, if we wanted to do more data loading,

35
00:02:28,890 --> 00:02:33,698
we can simply put another call to d2.json or

36
00:02:33,698 --> 00:02:39,925
d2.tsv inside of our plot points, and can nest these somewhat infinitely, but I

37
00:02:39,925 --> 00:02:44,210
would say it's a bad practice to go too far deep down this nesting of callbacks.
