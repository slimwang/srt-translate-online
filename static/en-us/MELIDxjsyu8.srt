1
00:00:00,180 --> 00:00:04,240
A very common problem is to find the largest element in a sequence of inputs.

2
00:00:04,240 --> 00:00:07,630
Now you might think, how hard can this be? In this sequence, clearly this one

3
00:00:07,630 --> 00:00:11,420
is the largest. But a computer program can't scan all of the inputs at once

4
00:00:11,420 --> 00:00:15,640
like we can. The computer sees items one at a time. So, let's look at this

5
00:00:15,640 --> 00:00:19,263
problem a little differently. So here I have these playing cards. I get to see

6
00:00:19,263 --> 00:00:23,870
one at a time. And I need to find out which one has the highest value. Let's

7
00:00:23,870 --> 00:00:27,518
look at the first one. That clearly is the largest one I've seen so far. The

8
00:00:27,518 --> 00:00:32,128
next one, well, that one is larger. The next one is even larger. This one here,

9
00:00:32,128 --> 00:00:37,295
not so much, so I won't change my mind about which one is the largest. That one

10
00:00:37,295 --> 00:00:41,760
is larger yet. This one isn't as large as the one over here,so we will ignore

11
00:00:41,760 --> 00:00:45,666
it and my last one here is also smaller ,so my answer is that 8 was the largest

12
00:00:45,666 --> 00:00:51,646
input. In Sudoku the algorithm would look like this, I start at letting the

13
00:00:51,646 --> 00:00:57,434
largest be the first value while there are more values I read the next value.

14
00:00:57,434 --> 00:01:01,340
And if that value is larger than what I thought the largest was, I changed my

15
00:01:01,340 --> 00:01:05,698
mind. When I'm done with this loop, largest would have been set to the very

16
00:01:05,698 --> 00:01:09,848
largest of all the inputs. Now you get to try this out with Java code, go ahead

17
00:01:09,848 --> 00:01:11,900
and complete the next project.
