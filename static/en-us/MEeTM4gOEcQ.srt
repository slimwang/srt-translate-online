1
00:00:00,200 --> 00:00:03,890
Bucket sort is a really neat idea but
it has one big problem.

2
00:00:03,890 --> 00:00:07,860
It's this assumption about a uniform
distribution of input values.

3
00:00:07,860 --> 00:00:08,900
If that doesn't hold,

4
00:00:08,900 --> 00:00:12,610
then you won't get nearly equal
numbers of elements in each bucket.

5
00:00:12,610 --> 00:00:16,260
By the way, for some really fascinating
examples of non uniform distributions

6
00:00:16,260 --> 00:00:20,480
that somewhat mysteriously arise in real
life, please go look up Benford's Law.

7
00:00:21,810 --> 00:00:24,510
So to build a robust linear-time
sorting algorithm for

8
00:00:24,510 --> 00:00:26,655
the distributed setting,
you'll need a better idea.

9
00:00:26,655 --> 00:00:27,430
Blam-o!

10
00:00:27,430 --> 00:00:30,250
That better idea is sampling.

11
00:00:31,410 --> 00:00:32,710
Not that kind of sampling,

12
00:00:32,710 --> 00:00:36,490
though my inner grad student does
enjoy the occasional freebie.

13
00:00:36,490 --> 00:00:40,530
Indeed, all of the state of the art
sorting algorithms that run at scale use

14
00:00:40,530 --> 00:00:44,280
some form of the following idea,
which is really easy to state.

15
00:00:44,280 --> 00:00:47,240
Basically, you'll still do
a distributed bucket sort.

16
00:00:47,240 --> 00:00:49,280
But instead of equal width intervals,

17
00:00:49,280 --> 00:00:52,140
let the interval widths
vary according to the data.

18
00:00:52,140 --> 00:00:55,070
To decide those widths,
you'll use sampling.

19
00:00:55,070 --> 00:01:00,210
Here's the algorithm on an example with
3 processors and 24 input elements.

20
00:01:00,210 --> 00:01:03,380
First, let's assume the elements
are initially equally distributed among

21
00:01:03,380 --> 00:01:04,959
the three processes.

22
00:01:04,959 --> 00:01:08,490
Then, each process will
sort its elements locally.

23
00:01:08,490 --> 00:01:10,780
So after the local sort,
you'll get this.

24
00:01:10,780 --> 00:01:15,300
Next, each process will pick
a sample of P-1 of its elements.

25
00:01:15,300 --> 00:01:19,310
It should choose these elements to be
equally spaced from the sorted lists.

26
00:01:19,310 --> 00:01:21,830
So for example, we might choose these.

27
00:01:21,830 --> 00:01:25,380
Each of these subsets
are the local samples.

28
00:01:25,380 --> 00:01:29,710
Next, let's gather all the local
samples onto some root process.

29
00:01:29,710 --> 00:01:32,870
Then, let's have the root
process sort the samples.

30
00:01:32,870 --> 00:01:36,190
From the sorted sample, let's choose
a final sample of P-1 elements.

31
00:01:36,190 --> 00:01:39,950
I don't know,
let's pick these two for example.

32
00:01:39,950 --> 00:01:42,630
These become what
are called the splitters.

33
00:01:42,630 --> 00:01:45,199
The splitters define
the global bucket boundaries.

34
00:01:46,220 --> 00:01:47,750
For instance, using these splitters,

35
00:01:47,750 --> 00:01:51,920
we might assign the first process
to the 0 elements, the second,

36
00:01:51,920 --> 00:01:55,900
to elements 1 through 3, and
the third, from 4 to the end.

37
00:01:57,020 --> 00:02:00,200
Now having chosen the splitters,
we need to broadcast the splitters so

38
00:02:00,200 --> 00:02:03,260
everybody knows who owns which range.

39
00:02:03,260 --> 00:02:06,729
Now each node can partition it's
local elements using the splitters.

40
00:02:08,250 --> 00:02:10,830
Now all the nodes can exchange values.

41
00:02:10,830 --> 00:02:13,660
Every node now only has
elements in its bucket.

42
00:02:13,660 --> 00:02:17,980
Finally, each node can sort its local
bucket, thus completing the algorithm.

43
00:02:17,980 --> 00:02:21,915
Now a good exercise is to go back and
compare this result to what you would

44
00:02:21,915 --> 00:02:25,775
have gotten if you had assumed
a uniform distribution of values.

45
00:02:25,775 --> 00:02:28,995
That is, divide the intervals 0
through 9 among three buckets,

46
00:02:28,995 --> 00:02:32,575
two of which have three elements
each and the last having four.

47
00:02:32,575 --> 00:02:35,695
You should find that the sample
sort result is better balanced,

48
00:02:35,695 --> 00:02:36,535
at least by a little.
