1
00:00:00,290 --> 00:00:02,820
Other controllers include Ryu, which is

2
00:00:02,820 --> 00:00:06,149
an open source Python controller. Ryu supports

3
00:00:06,149 --> 00:00:12,670
OpenFlow 1.0, 1.2, and 1.3, as well as the Nicira extensions. It also works

4
00:00:12,670 --> 00:00:18,080
with Open Stack. The support for the later versions of OpenFlow. And the

5
00:00:18,080 --> 00:00:21,370
integration with the open stack, are advantages

6
00:00:21,370 --> 00:00:25,480
over other SDN controllers. Because Ryu is

7
00:00:25,480 --> 00:00:27,330
implemented in Python, it still does not

8
00:00:27,330 --> 00:00:29,730
perform as well other SDN controllers, such

9
00:00:29,730 --> 00:00:32,640
as nox. Another popular SDN controller is

10
00:00:32,640 --> 00:00:35,930
floodlight. Floodlight is written in Java. It supports

11
00:00:35,930 --> 00:00:39,060
Overflow 1.0, and is a fork from

12
00:00:39,060 --> 00:00:42,710
the early beacon controller. Floodlight is maintained by

13
00:00:42,710 --> 00:00:46,970
big switch networks. Advantages include good documentation,

14
00:00:46,970 --> 00:00:50,930
integration with the rest API, and good performance.

15
00:00:50,930 --> 00:00:53,700
Unfortunately it also has a fairly steep learning

16
00:00:53,700 --> 00:00:55,980
curve. So you should use floodlight is you

17
00:00:55,980 --> 00:00:58,660
already know Java, if you need production level

18
00:00:58,660 --> 00:01:02,360
performance and support. And you will use the

19
00:01:02,360 --> 00:01:06,000
rest api to interact with the controller. So

20
00:01:06,000 --> 00:01:09,580
we can compare these two controllers, with the

21
00:01:09,580 --> 00:01:12,530
two controllers that we already discussed, Nox and

22
00:01:12,530 --> 00:01:15,974
Pox. We have controllers in three different languages,

23
00:01:15,974 --> 00:01:18,850
Python, Java, and C++. We have controllers

24
00:01:18,850 --> 00:01:22,840
that support later versions of open-flow, and

25
00:01:22,840 --> 00:01:25,600
support open stack. And we have controllers

26
00:01:25,600 --> 00:01:28,660
that provide better performance, as well as controllers

27
00:01:28,660 --> 00:01:32,800
that are easier to use for rapid prototyping. All of these controllers are still

28
00:01:32,800 --> 00:01:35,930
relatively hard to use, because they entail

29
00:01:35,930 --> 00:01:40,870
interacting directly with open flow, flow table modifications.

30
00:01:40,870 --> 00:01:42,720
Which operate at a very low level of

31
00:01:42,720 --> 00:01:47,690
matching on flows and performing specific actions. As

32
00:01:47,690 --> 00:01:50,650
we'll see, it's possible to develop programming languages

33
00:01:50,650 --> 00:01:53,250
on top of these controllers, that make it much

34
00:01:53,250 --> 00:01:55,750
easier for a neetwork opeartor to reason about

35
00:01:55,750 --> 00:01:59,170
network behavior. Before we jump into higher level programming

36
00:01:59,170 --> 00:02:02,030
languages however, let's first see how we can

37
00:02:02,030 --> 00:02:06,480
use these existing control frameworks to customize network control.
