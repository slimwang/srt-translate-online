1
00:00:00,000 --> 00:00:03,000
Another kind of coverage that we might look for is going to be inspired by what happened

2
00:00:03,000 --> 00:00:09,000
after we fix this x fer function and so the likely fixed for the bug that we had in this x fer function

3
00:00:09,000 --> 00:00:11,000
is to lock both of the bank accounts that we're processing, transfer

4
00:00:11,000 --> 00:00:14,000
the balance between them, and then unlock the accounts.

5
00:00:14,000 --> 00:00:17,000
And what this will do is make sure that no other threads in the system are messing

6
00:00:17,000 --> 00:00:20,000
with the two accounts that we're updating while in the middle of the messing with them.

7
00:00:20,000 --> 00:00:23,000
Now one thing that people are found is while testing this concurrent software.

8
00:00:23,000 --> 00:00:28,000
If this often the case, you can delete all of the locks out of a code,

9
00:00:28,000 --> 00:00:30,000
run it through some tests, and often it passes.

10
00:00:30,000 --> 00:00:33,000
This is really a sort of a scary and depressing thing because what this means is that

11
00:00:33,000 --> 00:00:35,000
during the test suite the locks weren't doing anything.

12
00:00:35,000 --> 00:00:38,000
This is in spite of the test coverage metric called synchronization coverage.

13
00:00:38,000 --> 00:00:40,000
What synchronization coverage is going to do is ensure that

14
00:00:40,000 --> 00:00:43,000
during testing this lock actually does something.

15
00:00:43,000 --> 00:00:47,000
In other words, during testing, the x fer function is going to be called to transfer

16
00:00:47,000 --> 00:00:52,000
money between accounts when the accounts are already locked and what this does is ensure that

17
00:00:52,000 --> 00:00:56,000
we're stressing the system to a level that the synchronization code is actually firing.

18
00:00:56,000 --> 00:01:00,000
It's actually having some effect on the execution and if that's happening what that means is

19
00:01:00,000 --> 00:01:03,000
we're probably doing a reasonable job stress testing the system.

20
00:01:03,000 --> 00:01:05,000
So that was really quick and like I said we're not getting into some detail.

21
00:01:05,000 --> 00:01:08,000
In summary, if we're testing concurrent software, we want to be looking at

22
00:01:08,000 --> 00:01:12,000
concurrency-specific coverage metrics such as interleaving coverage which meant

23
00:01:12,000 --> 00:01:16,000
if you recall functions which accessed shared data are actually called and in a truly

24
00:01:16,000 --> 00:01:19,000
concurrent fashion that is by multiple threads at the same time.

25
00:01:19,000 --> 00:01:21,000
And also synchronization coverage which ensures

26
00:01:21,000 --> 99:59:59,999
that the locks that we put into our code actually do something.
