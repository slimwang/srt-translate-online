1
00:00:00,340 --> 00:00:03,076
So far we've decided the response
we should send back based on

2
00:00:03,076 --> 00:00:03,873
the request URL.

3
00:00:03,873 --> 00:00:07,500
But in the real world,
we need to be more dynamic than that.

4
00:00:07,500 --> 00:00:11,970
For example, the page can send
a request which we intercept and

5
00:00:11,970 --> 00:00:13,730
then send to the network.

6
00:00:13,730 --> 00:00:17,470
But rather than just sending the
response back, we could look at it and

7
00:00:17,470 --> 00:00:18,940
do something else.

8
00:00:18,940 --> 00:00:21,620
For example,
let's respond with a network fetch for

9
00:00:21,620 --> 00:00:25,790
the request, just as the browser would
do if we left it to its own devices.

10
00:00:25,790 --> 00:00:29,630
The fetch method will take a full
request object as well as a URL.

11
00:00:29,630 --> 00:00:32,250
As we saw earlier,
fetch returns a promise.

12
00:00:32,250 --> 00:00:35,760
With promises, you can attach
a .then call back to get the result,

13
00:00:35,760 --> 00:00:37,720
if the operation was successful.

14
00:00:37,720 --> 00:00:40,770
Whatever we return in this callback
becomes the eventual value for

15
00:00:40,770 --> 00:00:41,880
the promise.

16
00:00:41,880 --> 00:00:44,250
This means we can look at
the response ourselves, and

17
00:00:44,250 --> 00:00:50,190
if the responses are 404 Not Found,
we could respond with our own message.

18
00:00:50,190 --> 00:00:52,355
Otherwise, we return
the response we received.

19
00:00:52,355 --> 00:00:59,880
.catch is similar to .then, but .then is
for success and .catch is for failure.

20
00:00:59,880 --> 00:01:02,600
Fetch will fail if it can't make
a connection to the server at all,

21
00:01:02,600 --> 00:01:04,379
which includes offline.

22
00:01:04,379 --> 00:01:07,300
So when that happens,
we can respond with our own message.

23
00:01:08,670 --> 00:01:11,390
So now, if we make sure our
force update is enabled and

24
00:01:11,390 --> 00:01:14,600
hit refresh,
everything is back to normal.

25
00:01:14,600 --> 00:01:18,660
But if we go to a page that doesn't
exist, we get our custom message.

26
00:01:19,730 --> 00:01:21,940
If we take the server down,
go offline, and

27
00:01:21,940 --> 00:01:26,090
refresh the page,
we get our custom message for that too.

28
00:01:26,090 --> 00:01:28,410
We can create complex rules for
requests,

29
00:01:28,410 --> 00:01:32,410
trying to get a response from multiple
sources, and reacting to the results.

30
00:01:32,410 --> 00:01:36,540
And we can do that on a request by
request basis using JavaScript.

31
00:01:36,540 --> 00:01:38,090
You can even go to the network, and

32
00:01:38,090 --> 00:01:40,920
if that fails,
get something else from the network.

33
00:01:40,920 --> 00:01:43,490
In fact, this sounds like something for
you to do.

34
00:01:43,490 --> 00:01:44,430
Mike, come in, Mike.

35
00:01:44,430 --> 00:01:45,850
Can you hear us?

36
00:01:45,850 --> 00:01:46,741
>> Yes I can.

37
00:01:46,741 --> 00:01:50,090
>> How about a task chaining
two fetch requests together?

38
00:01:50,090 --> 00:01:50,990
>> Yeah, let's do it.
