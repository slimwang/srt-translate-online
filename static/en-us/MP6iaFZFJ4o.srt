1
00:00:00,000 --> 00:00:04,000
This homework is about a card game called Foxes and Hens.

2
00:00:04,000 --> 00:00:07,000
There happens to be another game called Foxes and Hens

3
00:00:07,000 --> 00:00:11,000
which is a checkers-like game, but this one is different.

4
00:00:11,000 --> 00:00:15,000
This one is a card game, so there should be a deck of cards.

5
00:00:15,000 --> 00:00:18,000
We're going to simulate those on the computer.

6
00:00:18,000 --> 00:00:22,000
Here's the scenario that the game is trying to talk about.

7
00:00:22,000 --> 00:00:26,000
We have a yard into which some free range chickens can roam.

8
00:00:26,000 --> 00:00:30,000
I'm going to give up on my drawing skills and go to a schematic.

9
00:00:30,000 --> 00:00:32,000
So a chicken walks into the yard,

10
00:00:32,000 --> 00:00:36,000
some time later another chicken walks into the yard,

11
00:00:36,000 --> 00:00:38,000
and at some point a fox may come.

12
00:00:38,000 --> 00:00:42,000
And when the fox arrives, it eats all the chickens and everything is gone.

13
00:00:42,000 --> 00:00:48,000
So this deck of cards, each card has either a fox or a chicken on it.

14
00:00:48,000 --> 00:00:51,000
We flip the cards over 1 at a time to see who arrives next.

15
00:00:51,000 --> 00:00:54,000
We're playing this game as a 1-person solitaire version.

16
00:00:54,000 --> 00:00:58,000
The way the game works is we're going to take the whole deck of cards,

17
00:00:58,000 --> 00:01:01,000
flip them all over, and before we flip each card,

18
00:01:01,000 --> 00:01:03,000
the player has a choice.

19
00:01:03,000 --> 00:01:07,000
The player says, "Should I gather up the chickens that are in the yard?"

20
00:01:07,000 --> 00:01:09,000
That will be 1 possible action.

21
00:01:09,000 --> 00:01:12,000
And if I gather them up, then here there's 2 chickens. I would get 2 points.

22
00:01:12,000 --> 00:01:16,000
But the card that gets turned over, whether it be a fox or a chicken,

23
00:01:16,000 --> 00:01:19,000
that animal would get scared by my gathering action and would run away

24
00:01:19,000 --> 00:01:22,000
and be lost forever.

25
00:01:22,000 --> 00:01:25,000
The other action I can take is wait.

26
00:01:25,000 --> 00:01:29,000
So I just watch the chickens in the yard, wait for the next one to arrive,

27
00:01:29,000 --> 00:01:33,000
and if it's a chicken, then I'm in luck and there's 1 more in the yard.

28
00:01:33,000 --> 00:01:39,000
Once they're in the yard, I spread out enough chicken feed that they won't leave,

29
00:01:39,000 --> 00:01:41,000
so they'll always be there.

30
00:01:41,000 --> 00:01:44,000
I can wait for more chickens to accumulate within the yard,

31
00:01:44,000 --> 00:01:46,000
and then when I gather them I'll get a higher score.

32
00:01:46,000 --> 00:01:52,000
But if I wait too long and a fox arrives by flipping over the card and getting a fox,

33
00:01:52,000 --> 00:01:55,000
then I lose all the chickens.

34
00:01:55,000 --> 00:02:00,000
And so my choice then is before each card is unveiled, either gather or wait.

35
00:02:00,000 --> 00:02:03,000
Then we see what card is unveiled. We get a new state.

36
00:02:03,000 --> 00:02:07,000
Now, if you're familiar with playing blackjack in Vegas,

37
00:02:07,000 --> 00:02:12,000
you'll know that if you try to count your cards, you get in big trouble and you get kicked out.

38
00:02:12,000 --> 00:02:15,000
But here, counting cards is legal.

39
00:02:15,000 --> 00:02:19,000
At the start of the game, you know exactly how many cards there are,

40
00:02:19,000 --> 00:02:22,000
how many of each kind there are--foxes and hens--

41
00:02:22,000 --> 00:02:24,000
but of course they are randomly shuffled, so you don't know

42
00:02:24,000 --> 00:02:26,000
which one is going to come up next.

43
00:02:26,000 --> 00:02:29,000
The state of the game then is defined by a score--

44
00:02:29,000 --> 00:02:32,000
the number of chickens I've gathered so far--

45
00:02:32,000 --> 00:02:37,000
the number of chickens currently in the yard, and the complete collection of cards

46
00:02:37,000 --> 00:02:39,000
that haven't been dealt yet.

47
00:02:39,000 --> 00:02:42,000
So we're assuming you have perfect memory for counting cards

48
00:02:42,000 --> 00:02:46,000
and you know exactly how many cards of each kind are left,

49
00:02:46,000 --> 00:02:48,000
but of course you don't know which one is going to come up next.

50
00:02:48,000 --> 00:02:52,000
This is a partnership, so I've written some and I'm going to call on you to write some.

51
00:02:52,000 --> 00:02:55,000
Here's the top level function. We call it foxes<u>and</u>hens.

52
00:02:55,000 --> 00:03:02,000
It takes a single player strategy, and it takes the number of cards of each type in the deck.

53
00:03:02,000 --> 00:03:05,000
Here we have a 52-card deck, of which there are 7 foxes.

54
00:03:05,000 --> 00:03:10,000
It creates that deck as a string of F and Hs.

55
00:03:10,000 --> 00:03:15,000
And the initial state then is the cards is a string of 52 characters,

56
00:03:15,000 --> 00:03:18,000
the score is 0, and the number of chickens in the yard is 0.

57
00:03:18,000 --> 00:03:20,000
And then we just go through the whole deck.

58
00:03:20,000 --> 00:03:23,000
We're going to be popping off a card from the deck each time,

59
00:03:23,000 --> 00:03:26,000
and we ask the strategy function for an action,

60
00:03:26,000 --> 00:03:29,000
and then we're going to define--and I'm going to ask you to define--

61
00:03:29,000 --> 00:03:35,000
this do function, which does an action to a state and returns the new state,

62
00:03:35,000 --> 00:03:38,000
and that's going to be the score, the yard, and the cards.

63
00:03:38,000 --> 00:03:40,000
And we keep going until the cards have gotten down to 0.

64
00:03:40,000 --> 00:03:43,000
So every time you do a do action,

65
00:03:43,000 --> 00:03:46,000
there's going to be 1 less card in the state that gets returned.

66
00:03:46,000 --> 00:03:49,000
And at the end you get the score.

67
00:03:49,000 --> 00:03:52,000
I don't think I mentioned this rule yet, but at the very end

68
00:03:52,000 --> 00:03:55,000
you automatically get together all of the chickens that are left in the yard

69
00:03:55,000 --> 00:03:57,000
if there are any remaining.

70
00:03:57,000 --> 00:04:00,000
So your score should be the score you've accumulated so far

71
00:04:00,000 --> 00:04:02,000
plus whatever is in the yard.

72
00:04:02,000 --> 00:04:04,000
I want you to write this do function.

73
00:04:04,000 --> 00:04:07,000
Remember that there are only 2 actions: gather and wait.

74
00:04:07,000 --> 00:04:10,000
So do has to apply those.

75
00:04:10,000 --> 00:04:12,000
It has to pick a random card out of the cards,

76
00:04:12,000 --> 00:04:15,000
figure out what to do with that according to the action,

77
00:04:15,000 --> 00:04:22,000
and then return the new score and yard and the set of cards without that card--

78
00:04:22,000 --> 00:04:24,000
the set of cards with that card removed.

79
00:04:24,000 --> 00:04:29,000
And the cards have to be represented as a string rather than as a Python set.

80
00:04:29,000 --> 00:04:32,000
I've given you a sample strategy for playing the game.

81
00:04:32,000 --> 00:04:36,000
I call this strategy take5. I wrote this function.

82
00:04:36,000 --> 00:04:40,000
There's no truth to the rumor that Paul Desmond and Dave Brubeck wrote it.

83
00:04:40,000 --> 00:04:44,000
The way it works is it waits until there are 5 hens in the yard,

84
00:04:44,000 --> 00:04:46,000
and then it gathers them up.

85
00:04:46,000 --> 00:04:50,000
Here's a function for computing the average score of a strategy

86
00:04:50,000 --> 00:04:53,000
over N number of games where N defaults to 1000.

87
00:04:53,000 --> 00:04:59,000
And what I'm asking you to do is to write your strategy function here, a strategy function here,

88
00:04:59,000 --> 00:05:02,000
that takes a state and does whatever you want here.

89
00:05:02,000 --> 00:05:07,000
I've added just return something, but you should alter your code to do the right thing.

90
00:05:07,000 --> 00:05:11,000
And we want you to make sure that your strategy is superior.

91
00:05:11,000 --> 00:05:13,000
What does superior mean?

92
00:05:13,000 --> 00:05:18,000
It means that your strategy's average score compared to the average score of take5

93
00:05:18,000 --> 00:05:21,000
must be 1.5 points better on average.

94
00:05:21,000 --> 00:05:25,000
So keep working on your strategy until you can come up with one that's superior.

95
00:05:25,000 --> 00:05:29,000
If you want, you can try to figure out how to define the optimal strategy,

96
00:05:29,000 --> 00:05:35,000
but you don't need to do that as long as you beat take5 by 1.5 points.
