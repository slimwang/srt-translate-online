1
00:00:00,282 --> 00:00:04,009
Now that we've gotten a bit more
comfortable writing some simple code,

2
00:00:04,009 --> 00:00:08,102
that's capable of doing pretty cool
things, let's spend some time to discuss

3
00:00:08,102 --> 00:00:11,418
the term variables, in the context
of our rotate light script.

4
00:00:11,418 --> 00:00:12,971
[BLANK_AUDIO]

5
00:00:12,971 --> 00:00:13,748
At its core,

6
00:00:13,748 --> 00:00:18,350
a variable is just a name we give to a
value stored in your computer's memory.

7
00:00:19,620 --> 00:00:23,360
For example, the values zero, false or

8
00:00:23,360 --> 00:00:27,430
Udasti rocks are all values that
can be stored within variables.

9
00:00:28,942 --> 00:00:32,630
A C#, we can also give our variables
a type, which can be a float,

10
00:00:32,630 --> 00:00:38,040
a bool or a string,
just to name a few basic ones.

11
00:00:38,040 --> 00:00:41,990
But they can also be more complicated
things, like a vector or a quaternion.

12
00:00:43,200 --> 00:00:46,740
To talk about some of the basic ones,
let's hop into the Unity animator.

13
00:00:47,800 --> 00:00:50,370
Remember using triggers to
build your apartment scene?

14
00:00:51,440 --> 00:00:56,030
At that time, we also discussed ints,
floats, and bools.

15
00:00:56,030 --> 00:00:59,640
The reason the animator uses these
variable types is because they make up

16
00:00:59,640 --> 00:01:04,300
the very fundamental building blocks for
all our complex VR worlds.

17
00:01:04,300 --> 00:01:05,930
So let's dive into what they really are.

18
00:01:07,040 --> 00:01:12,940
A bool is a variable type that can be
two different states, true or false.

19
00:01:12,940 --> 00:01:16,140
It's a great way to keep track
of whether we've done an action,

20
00:01:16,140 --> 00:01:18,540
like press the cardboard
trigger in our script.

21
00:01:19,720 --> 00:01:23,760
An int is a variable that can
take on an integer value.

22
00:01:23,760 --> 00:01:30,720
For example, you have 1,
-1, -1,000, or 1 million.

23
00:01:31,800 --> 00:01:34,450
For the animator,
it's a great way to keep track of

24
00:01:34,450 --> 00:01:37,570
different types of states for
our animations.

25
00:01:37,570 --> 00:01:39,470
In the case of animating a character,

26
00:01:39,470 --> 00:01:43,210
this could be the state of whether
it's sitting, standing or running.

27
00:01:44,350 --> 00:01:48,150
Last, a float variable is a value
that can take on any decimal.

28
00:01:49,300 --> 00:01:53,570
This value is really great for
blending between animations.

29
00:01:53,570 --> 00:01:57,880
For example, if we want to blend a
walking and running animation, we could

30
00:01:57,880 --> 00:02:02,620
provide a float value for the speed, and
Unity will automatically create a blend

31
00:02:02,620 --> 00:02:06,910
between walking and running, based
on how fast the character is moving.

32
00:02:06,910 --> 00:02:10,080
And these are just some of
the basic building blocks.

33
00:02:10,080 --> 00:02:13,410
You can define these almost
anywhere within your scripts and

34
00:02:13,410 --> 00:02:16,910
you've probably noticed that we've
defined some variables within methods

35
00:02:16,910 --> 00:02:20,390
but also some at the top of our class.

36
00:02:20,390 --> 00:02:23,820
This has to do with a complex
topic called scoping.

37
00:02:23,820 --> 00:02:26,930
The best way to think about this
is that a variable can only be

38
00:02:26,930 --> 00:02:29,750
used within its
surrounding curly braces.

39
00:02:29,750 --> 00:02:32,720
So when we define variables
at the top of our script,

40
00:02:32,720 --> 00:02:35,330
we're essentially letting
the whole script use it.

41
00:02:36,630 --> 00:02:39,730
But for now, we really just want you
to be comfortable with the concept of

42
00:02:39,730 --> 00:02:44,000
variables so that you can use them to
really make the most out of your data.

43
00:02:44,000 --> 00:02:47,050
As an exercise,
why not create another variable for

44
00:02:47,050 --> 00:02:50,160
the time parameter that we
give to the slurp method?
