1
00:00:00,003 --> 00:00:06,830
Systems research is 1% inspiration and 99% perspiration. The only way

2
00:00:06,830 --> 00:00:13,160
to convince someone of your ideas is to build a system and evaluate it. Now, how

3
00:00:13,160 --> 00:00:17,930
do you go about evaluating a system such as Spin or ExoKernel? You

4
00:00:17,930 --> 00:00:22,090
can qualitatively argue that you're achieving extensibility

5
00:00:22,090 --> 00:00:25,410
without sacrificing safety. Simply by the way

6
00:00:25,410 --> 00:00:30,980
the system is constructed. But you also have to show that you're not losing

7
00:00:30,980 --> 00:00:33,793
out on performance, due to the extensability

8
00:00:33,793 --> 00:00:36,680
hooks. There's an interesting dilemma when you're

9
00:00:36,680 --> 00:00:39,910
reading research papers. How do you make

10
00:00:39,910 --> 00:00:43,770
sense out of the quantitative results from

11
00:00:43,770 --> 00:00:46,670
a data research paper? When you research

12
00:00:46,670 --> 00:00:51,370
papers, remember that absolute numbers are meaningless.

13
00:00:51,370 --> 00:00:56,200
It is the trends that are meaningful. While doing any performance study of a

14
00:00:56,200 --> 00:00:59,210
new system that you're proposing, you have

15
00:00:59,210 --> 00:01:03,140
to identify what the competition is. Remember

16
00:01:03,140 --> 00:01:09,110
that spin and exokernel were done in the early to mid 90s. For spin

17
00:01:09,110 --> 00:01:13,030
and exokernel, the competition is a monolithic

18
00:01:13,030 --> 00:01:17,890
operating system and a microkernel based operating system.

19
00:01:17,890 --> 00:01:22,400
And the competition at that time for both Spin and exokernel was UNIX as

20
00:01:22,400 --> 00:01:24,950
a monolithic example, and Mach [INAUDIBLE] as

21
00:01:24,950 --> 00:01:27,820
a micro kernel example. And the performance

22
00:01:27,820 --> 00:01:34,010
questions always center around space and time. For example,

23
00:01:34,010 --> 00:01:38,810
how much better timewise, is the extended

24
00:01:38,810 --> 00:01:43,160
kernel, whether it is a spin approach or exokernel approach, compared to

25
00:01:43,160 --> 00:01:47,140
a microkernel-based approach in terms of performance.

26
00:01:47,140 --> 00:01:49,750
And since we know an extended kernel may

27
00:01:49,750 --> 00:01:53,620
have to incur loss of locality and

28
00:01:53,620 --> 00:01:56,050
border crossing overhead and so on compared to

29
00:01:56,050 --> 00:01:58,980
a monolithic kernel, another question that we

30
00:01:58,980 --> 00:02:01,610
may want to ask is, is the extended kernel

31
00:02:01,610 --> 00:02:08,199
at least as good as a monolithic kernel? What is the code size of implementing a

32
00:02:08,199 --> 00:02:11,400
standard operating system, say Unix, as a

33
00:02:11,400 --> 00:02:14,810
monolithic operating system, or a micro kernel based

34
00:02:14,810 --> 00:02:18,550
operating system or an extended kernel operating system.

35
00:02:18,550 --> 00:02:20,685
So that's a space question. And so, we

36
00:02:20,685 --> 00:02:26,295
can have time questions, as well as space questions when we propose a new way of

37
00:02:26,295 --> 00:02:30,580
doing any particular system component. I encourage you

38
00:02:30,580 --> 00:02:33,280
to read the performacne results in the papers.

39
00:02:33,280 --> 00:02:38,180
Key take away that you will see when you read the performance results reported

40
00:02:38,180 --> 00:02:44,940
by both SPIN and exokernel, is that they do much better than Mach, microkernel.

41
00:02:44,940 --> 00:02:51,280
For protected procedure call. That is, when you go from one protection domain to

42
00:02:51,280 --> 00:02:54,270
another, how well are you doing? For

43
00:02:54,270 --> 00:02:58,460
that, both SPIN and exokernel exceed the performance

44
00:02:58,460 --> 00:03:04,110
of Mach. And you also see that both SPIN and exokernel

45
00:03:04,110 --> 00:03:09,410
do as well for dealing with system calls as a monolithic kernel does.
