1
00:00:00,400 --> 00:00:04,630
So, now that we have seen multiple
aspects of how caches work,

2
00:00:04,630 --> 00:00:08,450
let's summarize them for
a more realistic cache.

3
00:00:08,450 --> 00:00:13,763
Let's say we have a 4kB,
4-way set associate cache with a 64-byte

4
00:00:13,763 --> 00:00:19,160
line size with a write-back and
write-allocate write policies.

5
00:00:19,160 --> 00:00:24,630
The processor, let's say, creates
64-bit addresses to access the cache.

6
00:00:24,630 --> 00:00:29,800
When accessing this cache,
the 64-bit address will

7
00:00:29,800 --> 00:00:35,040
be divided into offset bits,
index bits and tag bits.

8
00:00:35,040 --> 00:00:39,940
First for
offset bits it's a 64-byte line, so

9
00:00:39,940 --> 00:00:44,880
we need 6 bits, bits 0 through 5,
there are 6 of them.

10
00:00:44,880 --> 00:00:49,150
Are going to tell us where
in the cache block we are.

11
00:00:49,150 --> 00:00:52,570
Next we need to determine how
many sets this cache has.

12
00:00:52,570 --> 00:00:57,020
It's a four kilobyte cache,
that's two to the 12th bytes.

13
00:00:57,020 --> 00:00:59,430
The number of blocks
is that divided by 64.

14
00:00:59,430 --> 00:01:02,220
Which is two to the sixth.

15
00:01:02,220 --> 00:01:05,285
So we have two to the sixth
blocks in the cache.

16
00:01:06,468 --> 00:01:09,970
It's a four-way set associative
cache which means that

17
00:01:09,970 --> 00:01:13,140
every set has four blocks in it.

18
00:01:13,140 --> 00:01:18,240
So we divide the number of blocks with
the number of blocks in a set and

19
00:01:18,240 --> 00:01:22,030
we get two to the fourth, or 16 sets.

20
00:01:22,030 --> 00:01:27,140
Now we know that we need four bits
to tell us which set we are in, so

21
00:01:27,140 --> 00:01:33,150
bits six, seven, eight, and nine,
four of them are the index.

22
00:01:33,150 --> 00:01:40,740
The bits that remain, bits 10
through 63, 54 of them are the tag.

23
00:01:40,740 --> 00:01:45,100
Now, in our cache,
we will have for each block.

24
00:01:45,100 --> 00:01:45,818
A valid bit.

25
00:01:45,818 --> 00:01:51,310
It's a write-back cache, so
you also have a dirty bit.

26
00:01:51,310 --> 00:01:54,520
Then there will be a tag, 54 bits.

27
00:01:54,520 --> 00:01:58,290
It's a 4-way set-associative cache, so
we need to pick a replacement policy.

28
00:01:58,290 --> 00:02:00,810
Let's say the replacement policy is LRU.

29
00:02:00,810 --> 00:02:03,956
For a 4-way set-associative cache,

30
00:02:03,956 --> 00:02:08,008
each block needs to have
a two bit LRU counter.

31
00:02:08,008 --> 00:02:15,550
Here we have one, one, 54, two, and then
we have 64 bytes' worth of actual data.

32
00:02:15,550 --> 00:02:19,310
As you can see we have 58
bytes in addition to the data.

33
00:02:19,310 --> 00:02:20,560
So there is some overhead.

34
00:02:20,560 --> 00:02:25,110
The cache size is usually expressed in
terms of how much data it contains.

35
00:02:25,110 --> 00:02:29,360
But the actual size of the cache
array is larger because it needs to

36
00:02:29,360 --> 00:02:32,230
contain all of these extra bits for
each line of data.
