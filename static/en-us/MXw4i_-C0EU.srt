1
00:00:00,390 --> 00:00:05,260
The right answer is exokernel. Now so long as SPIN's logical

2
00:00:05,260 --> 00:00:10,040
protection remains, are entirely following modular

3
00:00:10,040 --> 00:00:14,900
three language enforced, compile time checking, and run time

4
00:00:14,900 --> 00:00:20,330
verification, there is no violation of protection In SPIN. But

5
00:00:20,330 --> 00:00:25,510
we cannot say the same about Exokernel because it is arbitrary code

6
00:00:25,510 --> 00:00:27,890
that is being downloaded into the kernel

7
00:00:27,890 --> 00:00:29,990
by a library operating system and that's

8
00:00:29,990 --> 00:00:33,440
the reason that Exokernel may end up

9
00:00:33,440 --> 00:00:37,860
compromising protection more than the SPIN mechanism.

10
00:00:37,860 --> 00:00:44,450
But having said that, I should mention that it's not always possible to live

11
00:00:44,450 --> 00:00:48,010
within modular three enforced protection domains, even

12
00:00:48,010 --> 00:00:50,700
in SPIN. Because we've seen that even

13
00:00:50,700 --> 00:00:56,010
in SPIN, in order to do certain things in the hardware, SPIN

14
00:00:56,010 --> 00:01:01,000
may have to step outside the protection boundaries of

15
00:01:01,000 --> 00:01:06,440
modular three. In other words, a reality that exists with

16
00:01:06,440 --> 00:01:11,610
real hardware is that it's not always possible to do this within the

17
00:01:11,610 --> 00:01:16,990
confines of language-enforced protection domains.

18
00:01:16,990 --> 00:01:19,850
But if you just think in terms of the

19
00:01:19,850 --> 00:01:24,620
logical protection domains as defined by SPIN as modular

20
00:01:24,620 --> 00:01:29,390
three objects. Those have strong guarantees of protection compared

21
00:01:29,390 --> 00:01:33,140
to arbitrary code that we can download into Exokernel.
