1
00:00:00,000 --> 00:00:03,000
So the last thing I promised I would tell you about

2
00:00:03,000 --> 00:00:06,000
is inserting elements into a heap.

3
00:00:06,000 --> 00:00:08,000
And that turns out not to be all that hard,

4
00:00:08,000 --> 00:00:11,000
but it does involve some coding that we haven't done yet.

5
00:00:11,000 --> 00:00:14,000
The idea is that the new element that we're going to insert

6
00:00:14,000 --> 00:00:18,000
we stick at the sort of bottom right corner of the heap.

7
00:00:18,000 --> 00:00:23,000
Or, if the heap was already full, then the far left.

8
00:00:23,000 --> 00:00:27,000
But now we have potentially violated the heap property,

9
00:00:27,000 --> 00:00:30,000
so this node to it's parent could be problematic.

10
00:00:30,000 --> 00:00:33,000
So, essentially, we need to do

11
00:00:33,000 --> 00:00:36,000
some sort of an analog of down-heapify that I call up-heapify

12
00:00:36,000 --> 00:00:40,000
that takes this value that might be problematic,

13
00:00:40,000 --> 00:00:43,000
swaps it up if it is,

14
00:00:43,000 --> 00:00:45,000
and then continues to swap it up the tree

15
00:00:45,000 --> 00:00:48,000
until it reaches a place where it is smaller than both of its children.

16
00:00:48,000 --> 00:00:51,000
At which point, the heap property is satisfied globally.

17
00:00:51,000 --> 00:00:53,000
So I'm going to leave that as a homework problem for you

18
00:00:53,000 --> 00:00:55,000
to actually code up-heapify,

19
00:00:55,000 --> 00:00:58,000
and that gives us the insert that we need.

20
00:00:58,000 --> 00:01:03,000
So now that we can insert and delete into heaps and (logn) time,

21
00:01:03,000 --> 00:01:06,000
we can use this to solve the TopK problem

22
00:01:06,000 --> 00:01:08,000
that we've been talking about throughout this unit.

23
00:01:08,000 --> 00:01:13,000
By running through the list of the N elements that we want the TopK of,

24
00:01:13,000 --> 00:01:16,000
and meanwhile we keep a heap of size K off to the side,

25
00:01:16,000 --> 00:01:21,000
and so we're trying to the largest K, in this case.

26
00:01:21,000 --> 00:01:24,000
So each new element that we encounter

27
00:01:24,000 --> 00:01:27,000
we ask, is this element bigger than the smallest

28
00:01:27,000 --> 00:01:29,000
value that we've kept so far?

29
00:01:29,000 --> 00:01:32,000
So does it deserve to be in the TopK so far?

30
00:01:32,000 --> 00:01:34,000
If not, we can just throw it away,

31
00:01:34,000 --> 00:01:37,000
because we know it's not going to be part of the TopK.

32
00:01:37,000 --> 00:01:40,000
If it is, then the smallest thing in that heap

33
00:01:40,000 --> 00:01:43,000
no longer needs to be there, because we found something better.

34
00:01:43,000 --> 00:01:46,000
So we delete min,

35
00:01:46,000 --> 00:01:51,000
and we insert the new value that we just got into the heap

36
00:01:51,000 --> 00:01:54,000
and reestablish the heap property

37
00:01:54,000 --> 00:01:57,000
by--well, we could do it as a down-heapify, actually,

38
00:01:57,000 --> 00:02:00,000
because we deleted the node from the top.

39
00:02:00,000 --> 00:02:03,000
We can replace it with something else.

40
00:02:03,000 --> 00:02:06,000
So, for each of N times,

41
00:02:06,000 --> 00:02:09,000
we do possibly one insert into the heap,

42
00:02:09,000 --> 00:02:12,000
which is a log K operation.

43
00:02:12,000 --> 00:02:17,000
So the total running time ends up being we do (nlogk) operations.

44
00:02:17,000 --> 00:02:19,000
So that's actually pretty efficient.

45
00:02:19,000 --> 00:02:22,000
It doesn't solve the TopK problem better

46
00:02:22,000 --> 00:02:25,000
than the randomized algorithm we talked about--

47
00:02:25,000 --> 00:02:27,000
the partitioning algorithm--

48
00:02:27,000 --> 00:02:30,000
but it does it pretty fast

49
00:02:30,000 --> 00:02:32,000
and there's other uses for this.

50
00:02:32,000 --> 00:02:35,000
We'll see that in the next unit.

51
00:02:35,000 --> 00:02:41,000
Thanks a lot, and good luck with the homework.
