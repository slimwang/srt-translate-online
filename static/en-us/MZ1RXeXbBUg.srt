1
00:00:00,150 --> 00:00:03,740
Another thing that is a problem with Tomasulo's Algorithm is when we try to do

2
00:00:03,740 --> 00:00:07,990
branch mispredictions. So, how do we recover from a branch misprediction? So,

3
00:00:07,990 --> 00:00:12,250
say we have a program like this. Where we have a divide, you take something like

4
00:00:12,250 --> 00:00:17,570
40 cycles and once we get that result, we can resolve this branch over here. So,

5
00:00:17,570 --> 00:00:22,710
this branch can be predicted but it can take a long time to realize that it's

6
00:00:22,710 --> 00:00:26,678
been mispredicted. So let's say, meanwhile, we have fetched this instruction,

7
00:00:26,678 --> 00:00:30,270
because a branch should have been taken. We have fetched this instruction, and

8
00:00:30,270 --> 00:00:35,100
this instruction is already done. In that case, R3 is already written. Once we

9
00:00:35,100 --> 00:00:39,700
realize that we have mispredicted this branch, possibly 40 to 50 cycles later,

10
00:00:39,700 --> 00:00:43,400
we should behave like we have never executed this instruction, and instead start

11
00:00:43,400 --> 00:00:46,190
fetching instructions from the label that the branch is pointing to,

12
00:00:46,190 --> 00:00:50,460
but that becomes impossible because R3 by that time has already been updated. So

13
00:00:50,460 --> 00:00:54,600
instead of having the old value of R3, now we have the new value of R3 when we

14
00:00:54,600 --> 00:00:59,150
jump to the label. So again, the problem is very similar to precise exceptions.

15
00:00:59,150 --> 00:01:02,760
In that, pretty much, an instruction can complete and

16
00:01:02,760 --> 00:01:06,550
write to registers before preceding instructions have fully been verified, and

17
00:01:06,550 --> 00:01:10,240
before we even know that this instruction should have been executed. A final

18
00:01:10,240 --> 00:01:15,310
problem occurs because of so-called phantom exceptions. So what we can have is,

19
00:01:15,310 --> 00:01:19,057
let's say there is a divide here. Let's say that we have mispredicted this

20
00:01:19,057 --> 00:01:22,130
branch. Let's say that this instruction doesn't execute too soon and so

21
00:01:22,130 --> 00:01:26,165
on. But the problem is, if there is a divide here and it generates an exception,

22
00:01:26,165 --> 00:01:30,110
that the exception will be triggered even though this instruction was

23
00:01:30,110 --> 00:01:34,150
never supposed to be executed. So when we come back, we have now a problem of,

24
00:01:34,150 --> 00:01:36,750
basically we have already started exception processing for this.

25
00:01:36,750 --> 00:01:40,130
We have, you know, done everything for this exception by the time we

26
00:01:40,130 --> 00:01:43,600
realize that it's too late. So again, we have to somehow take care of

27
00:01:43,600 --> 00:01:47,080
not having exceptions until we are sure that they should happen.
