1
00:00:00,290 --> 00:00:02,860
So the branch and jump problems that we have seen

2
00:00:02,860 --> 00:00:06,460
in the previous segment are really due to what is

3
00:00:06,460 --> 00:00:09,310
called a control dependence. Let's say that we have a

4
00:00:09,310 --> 00:00:12,570
program like this. We have an add, then we have

5
00:00:12,570 --> 00:00:15,390
a branch that compares R1 and R3 and jumps to

6
00:00:15,390 --> 00:00:17,890
the label if they are equal. This is the branch

7
00:00:17,890 --> 00:00:20,690
equal. Then we have and add and subtract here, and

8
00:00:20,690 --> 00:00:25,930
we have a multiply here, and they're followed by. Additional instructions.

9
00:00:25,930 --> 00:00:33,710
We say that these instructions have a control dependence on the branch. Whether

10
00:00:33,710 --> 00:00:39,120
these instructions should be executed at all or not depends on the result of

11
00:00:39,120 --> 00:00:43,690
this branch instruction. Similarly, these instructions.

12
00:00:43,690 --> 00:00:46,340
Also have a dependence on the branch.

13
00:00:46,340 --> 00:00:47,720
So pretty much once we have a

14
00:00:47,720 --> 00:00:51,590
branch, all subsequent instructions that we execute

15
00:00:51,590 --> 00:00:54,710
have a control dependence on the branch. This really

16
00:00:54,710 --> 00:00:56,930
means that we don't know whether we should be

17
00:00:56,930 --> 00:00:59,650
even fetching these instructions until we figure out the

18
00:00:59,650 --> 00:01:03,790
branch. So let's see what control dependencies like this

19
00:01:03,790 --> 00:01:06,706
do to the CPI of our five-stage pipeline. On

20
00:01:06,706 --> 00:01:10,800
average, about 20% of all instructions are branches and

21
00:01:10,800 --> 00:01:13,880
jumps. So, about one in five instructions will be

22
00:01:13,880 --> 00:01:16,970
a branch or a jump. We also know that slightly

23
00:01:16,970 --> 00:01:19,640
more than 50% of branch and jump

24
00:01:19,640 --> 00:01:22,690
instructions are what we call taken. Meaning they

25
00:01:22,690 --> 00:01:25,850
go somewhere else and don't just continue.

26
00:01:25,850 --> 00:01:29,200
Putting these two together means that for half

27
00:01:29,200 --> 00:01:34,010
of these instructions we will be fetching the wrong instructions. So our CPI

28
00:01:34,010 --> 00:01:42,150
will be one, this is the ideal CPI, plus 10% of the time we waste some number

29
00:01:42,150 --> 00:01:45,400
of cycles because of a mispredicted branch. Basically we

30
00:01:45,400 --> 00:01:49,242
fetched the wrong instructions. How many cycles we waste? Well,

31
00:01:49,242 --> 00:01:51,660
in our five stage pipeline, if the third stage

32
00:01:51,660 --> 00:01:54,078
is where we figure out the branches, once we do

33
00:01:54,078 --> 00:01:56,496
that, and we determine that we have been wrong

34
00:01:56,496 --> 00:01:58,976
about what we fetched, we have to cancel the two

35
00:01:58,976 --> 00:02:02,540
instructions that we already fetched. So there will be two

36
00:02:02,540 --> 00:02:07,188
cycles of not finishing an instruction. After such a branch,

37
00:02:07,188 --> 00:02:10,542
so what we have is basically every instruction

38
00:02:10,542 --> 00:02:13,208
spins one cycle and 10% of the time

39
00:02:13,208 --> 00:02:16,734
the instruction is followed by two idol cycles,

40
00:02:16,734 --> 00:02:19,228
so the CPI overall will be 1.2 in

41
00:02:19,228 --> 00:02:22,560
this example. If we have a deeper pipeline

42
00:02:22,560 --> 00:02:24,760
that figures out the branches in a later

43
00:02:24,760 --> 00:02:29,270
stage, this penalty for guessing the branch wrong

44
00:02:29,270 --> 00:02:32,580
will be larger. If we have more branches, or

45
00:02:32,580 --> 00:02:35,020
more of them are taken, then this percentage

46
00:02:35,020 --> 00:02:38,550
of instructions that result in this penalty will be

47
00:02:38,550 --> 00:02:41,168
larger. If we are somehow able to guess the

48
00:02:41,168 --> 00:02:44,468
outcomes of branches and fetch the right instructions most

49
00:02:44,468 --> 00:02:46,844
of the time, this percentage here could be

50
00:02:46,844 --> 00:02:49,920
a lot smaller than this. We will see later

51
00:02:49,920 --> 00:02:54,490
a technique called branch prediction that tries to guess

52
00:02:54,490 --> 00:02:57,740
more accurately where the branches are going, and that

53
00:02:57,740 --> 00:03:00,950
dramatically reduces this percentage. We will also

54
00:03:00,950 --> 00:03:03,840
see that modern pipelines tend to be

55
00:03:03,840 --> 00:03:06,220
deeper than just five stages which will

56
00:03:06,220 --> 00:03:09,490
increase this penalty. The two are related

57
00:03:09,490 --> 00:03:14,722
if the pipeline is deeper, and you have more of a penalty. You need better

58
00:03:14,722 --> 00:03:20,920
branch prediction to lower this in order to achieve a CPI that is good.
