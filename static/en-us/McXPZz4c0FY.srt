1
00:00:00,000 --> 00:00:04,000
Let's take a look at an approach for actually finding shortest paths in graphs,

2
00:00:04,000 --> 00:00:06,000
and we'll use this example once again.

3
00:00:06,000 --> 00:00:11,000
It will help to actually have names for the other nodes, so I'm going to add these in.

4
00:00:11,000 --> 00:00:15,000
Just remember what breadth-first search does for this graph starting from A.

5
00:00:15,000 --> 00:00:20,000
We mark A as visited and we add it to the open list.

6
00:00:20,000 --> 00:00:23,000
We pull off the open list and add all the neighbors of A to the open list.

7
00:00:23,000 --> 00:00:28,000
Letter C, B, and D then we choose one of these nodes,

8
00:00:28,000 --> 00:00:34,000
Let's say C and add all its unexpanded neighbors to the graph, but all its neighbors are expanded.

9
00:00:34,000 --> 00:00:40,000
Do the same thing with B. B has F, and D's unexpanded neighbors are E.

10
00:00:40,000 --> 00:00:45,000
Now, F's unexpanded neighbors are G, and E has no more unexpanded neighbors.

11
00:00:45,000 --> 00:00:48,000
We finish this step for a search.

12
00:00:48,000 --> 00:00:52,000
What we get here is that by the assumptions of breadth-first search,

13
00:00:52,000 --> 00:00:56,000
the shortest path from A to B is this direct link from A to B.

14
00:00:56,000 --> 00:00:59,000
The search would have actually terminated here, but we ran that anyway.

15
00:00:59,000 --> 00:01:03,000
These are supposedly the shortest paths in terms of number of hops to all these nodes.

16
00:01:03,000 --> 00:01:08,000
It actually makes sense. One hop to C. One hop to B. One hop to D. Two hops to F, sure.

17
00:01:08,000 --> 00:01:14,000
Two hops to E, sure. Three hops to G, one, two, three. Yep. There's no faster way to get to G.

18
00:01:14,000 --> 00:01:17,000
This actually does the right thing in terms of number of hops,

19
00:01:17,000 --> 00:01:20,000
but let's take a look at what happen when we went to expand B.

20
00:01:20,000 --> 00:01:26,000
At this point, even though we have a shortest hop path to B, we don't have a shortest link path to B.

21
00:01:26,000 --> 00:01:31,000
All we know is that from A, you can reach C in three steps. Well, that's really all we know.

22
00:01:31,000 --> 00:01:36,000
Even this A to D, we don't know, there might be like a half weight path that goes

23
00:01:36,000 --> 00:01:40,000
from C to D, but we do know that there's going to be no faster way to get to C

24
00:01:40,000 --> 00:01:43,000
right because that is the shortest edge out of A.

25
00:01:43,000 --> 00:01:46,000
Any of the longer edges we're assuming we can't take negative weight edges

26
00:01:46,000 --> 00:01:49,000
that would cause this four to get smaller than the three.

27
00:01:49,000 --> 00:01:52,000
All we really know is that this three is the smallest.

28
00:01:52,000 --> 00:01:57,000
What we should do is not expand B, but we should focus on C.

29
00:01:57,000 --> 00:02:00,000
We now know that there's a path that actually can get us there in 13.

30
00:02:00,000 --> 00:02:04,000
This 10 edge plus the three that it takes to get to C.

31
00:02:04,000 --> 00:02:11,000
We can get to B faster than 15. We can get to B in 13. Now, is that the shortest possible path for B?

32
00:02:11,000 --> 00:02:15,000
We don't know cause we know that we could get to D in four and maybe there's a link one,

33
00:02:15,000 --> 00:02:17,000
I mean ignoring the graph for a second.

34
00:02:17,000 --> 00:02:19,000
Maybe, there's a link one path that would get us to B, which would be even shorter.

35
00:02:19,000 --> 00:02:25,000
All we know from what we've done so far is that the shortest path from A to D is four.

36
00:02:25,000 --> 00:02:31,000
Let's lock that down and pull D off of the open list, and let's focus on D.

37
00:02:31,000 --> 00:02:37,000
D has edges to B, F, and E. Here's B, and here's F and E.

38
00:02:37,000 --> 00:02:42,000
This path to F through D is going to add another seven for a total of 11,

39
00:02:42,000 --> 00:02:46,000
and this path to E through D is going to add another three for a length of seven,

40
00:02:46,000 --> 00:02:50,000
and remember there's also a D to B link, which would add nine to this,

41
00:02:50,000 --> 00:02:53,000
which would get us there in 13, and we already knew how to get there in 13,

42
00:02:53,000 --> 00:02:55,000
so that doesn't really change anything.

43
00:02:55,000 --> 00:02:59,000
Based on these three, we know the fastest way to A, C, and D,

44
00:02:59,000 --> 00:03:04,000
and once that we have also been able to reach, we know that E has the shortest distance,

45
00:03:04,000 --> 00:03:10,000
which is seven, and there isn't going to be any faster way to get to E cause there aren't any other nodes

46
00:03:10,000 --> 00:03:13,000
that we could get to and then get to E faster than seven.

47
00:03:13,000 --> 00:03:19,000
We can lock that one down, pull off the open list, add all its edges to the non-completed nodes.

48
00:03:19,000 --> 00:03:21,000
E can go to F, and it has a link of five.

49
00:03:21,000 --> 00:03:25,000
We could go seven steps to E and then another five to F for a total of 12.

50
00:03:25,000 --> 00:03:28,000
No, we can already get there in 11. That's probably not a good idea.

51
00:03:28,000 --> 00:03:33,000
From E, we can also get to G in one step, which would have been seven plus the additional step

52
00:03:33,000 --> 00:03:36,000
for a total of eight, and that's all we can reach from E.

53
00:03:36,000 --> 00:03:40,000
Looking things over, we now know that the fastest way to get to G is eight steps

54
00:03:40,000 --> 00:03:44,000
because the only other way we could get to G would be to visit one of the other nodes,

55
00:03:44,000 --> 00:03:47,000
and then go to G, and that would have to be longer than eight.

56
00:03:47,000 --> 00:03:53,000
We're going to lock it down, and now we pull of the open list and look at the edges out of G.

57
00:03:53,000 --> 00:03:56,000
G can get to F in two steps, and that's an improvement

58
00:03:56,000 --> 00:03:59,000
because before the best we could get to F was 11 steps.

59
00:03:59,000 --> 00:04:02,000
Now, we can get to F in ten. Can we get anywhere else new?

60
00:04:02,000 --> 00:04:06,000
No, cause the only nodes that are complete now are B and F, and they're already in the picture,

61
00:04:06,000 --> 00:04:11,000
and in fact, now we see that the fastest way to get to F is going to be in ten steps

62
00:04:11,000 --> 00:04:14,000
cause the only other way to get to F that we haven't considered

63
00:04:14,000 --> 00:04:16,000
is getting there through B, and that's going to be longer.

64
00:04:16,000 --> 00:04:19,000
We can lock this down. Alright! So, let's look at F.

65
00:04:19,000 --> 00:04:23,000
What edges are coming at F to uncompleted nodes, just this one to B.

66
00:04:23,000 --> 00:04:27,000
That would have been F is ten steps plus one more would be 11 to get to B.

67
00:04:27,000 --> 00:04:31,000
That's an improvement over what we had before, and that's it for F.

68
00:04:31,000 --> 00:04:34,000
Now, the only node that we've got left to think about is B.

69
00:04:34,000 --> 00:04:37,000
There's no way to get to be any faster than 11

70
00:04:37,000 --> 00:04:40,000
cause there's no other place that we can go and then get to B.

71
00:04:40,000 --> 00:04:43,000
We can lock it down, and that finishes the picture.

72
00:04:43,000 --> 00:04:46,000
We now know what the shortest distance is from A to === in the graph.

73
00:04:46,000 --> 00:04:51,000
The distance to B is 11. Now, we've kind of lost a little bit of information of how we get to B in 11?

74
00:04:51,000 --> 00:04:53,000
But, we'll deal with that in a little bit.
