1
00:00:00,260 --> 00:00:03,180
As we have mentioned earlier, configuration is a kind of design,

2
00:00:03,180 --> 00:00:09,450
a kind of routine design. And one material configuration is bound refinement.

3
00:00:09,450 --> 00:00:12,600
In configuration, all the components of the design are already known, but

4
00:00:12,600 --> 00:00:15,150
we are to find some arrangement with the components, and

5
00:00:15,150 --> 00:00:18,350
we assign values to some of the variables of those components,

6
00:00:18,350 --> 00:00:22,580
to arrive at the arrangement. Here is a design specification working it's way.

7
00:00:23,600 --> 00:00:28,160
Here might be a plan for designing a chair as a whole. And

8
00:00:28,160 --> 00:00:31,990
once we assign values to some of the variables at the level of the chair,

9
00:00:31,990 --> 00:00:36,460
then we can refine the plan for the chair into a plan for the chair legs,

10
00:00:36,460 --> 00:00:40,180
the chair seat, and so on. All of this might be subject to some constraints.

11
00:00:41,630 --> 00:00:46,110
There are in fact a number of AI systems, that do configuration design.

12
00:00:46,110 --> 00:00:50,270
Many of them are being used in industry. Some of these AI systems use,

13
00:00:50,270 --> 00:00:53,410
matters like brand refinement the way we are showing it here.

14
00:00:53,410 --> 00:00:58,320
Others use case based reasoning. And various systems use a variety of methods,

15
00:00:58,320 --> 00:01:02,180
for doing configuration design, including model based reasoning and rule based

16
00:01:02,180 --> 00:01:08,080
reasoning. What about more creative kinds of design? Design in which not all

17
00:01:08,080 --> 00:01:12,820
the parts are known in advance. Since we just discussed the flashlight example,

18
00:01:12,820 --> 00:01:17,480
in the context of systems thinking, let us revisit that example in the context

19
00:01:17,480 --> 00:01:21,640
of creative design. So this is a schematic of the flashlight circuit.

20
00:01:21,640 --> 00:01:27,360
Here is the switch, the battery, the bulb, as earlier. On the systems thinking,

21
00:01:27,360 --> 00:01:31,140
we discussed how structured behavior function models capture the knowledge that

22
00:01:31,140 --> 00:01:34,690
when the switch is closed, electricity flows from the battery to the bulb, and

23
00:01:34,690 --> 00:01:38,870
the bulb converts the electrical energy into light energy. Let us suppose that

24
00:01:38,870 --> 00:01:42,150
this particular electrical circuit use a 1.5 volt battery and

25
00:01:42,150 --> 00:01:45,130
created 10 lumens of light. Tomorrow someone comes to you and

26
00:01:45,130 --> 00:01:49,990
says, I want 20 lumens of light. Design a flashlight electrical circuit for me.

27
00:01:49,990 --> 00:01:53,660
How will you do that? You might go to the structure, behavior function model for

28
00:01:53,660 --> 00:01:59,040
this particular circuit and do some thinking. You may recognize, the amount of

29
00:01:59,040 --> 00:02:02,330
light created in the bulb is directly proportional to the voltage of

30
00:02:02,330 --> 00:02:06,550
the battery. Instead of creating 10 lumens of light you need 20 lumens of light,

31
00:02:06,550 --> 00:02:11,130
you might say, I'm going to use a 3 volt battery. So far, so good. You've done

32
00:02:11,130 --> 00:02:15,560
system thinking in the context of design thinking. But now let us add a wrinkle.

33
00:02:15,560 --> 00:02:20,234
Suppose that a 3.0 volt battery is not available. At this point,

34
00:02:20,234 --> 00:02:23,825
a teacher tells you it's okay if a 3.0 volt battery is not available.

35
00:02:23,825 --> 00:02:28,450
You can connect two 1.5 volt batteries in series. Two 1.5

36
00:02:28,450 --> 00:02:32,630
volt batteries connected in series will give you the voltage of three volts.

37
00:02:32,630 --> 00:02:36,350
Accepting the teacher's advice, you can now create an electrical circuit

38
00:02:36,350 --> 00:02:41,500
that will use two 1.5 volt batteries in series and create light of 20 lumens.

39
00:02:41,500 --> 00:02:45,010
But you're not just creating this particular design, you also learned something

40
00:02:45,010 --> 00:02:51,120
from it. Every design, every experience is an opportunity for learning.

41
00:02:51,120 --> 00:02:55,750
In the 1990s, Sam [UNKNOWN] here at Georgia Tech created a program called IDOL,

42
00:02:55,750 --> 00:03:01,410
IDOL did creative design. In particular, IDOL would learn about design patterns.

43
00:03:01,410 --> 00:03:04,850
From simple design cases, the kind we just talked about.

44
00:03:04,850 --> 00:03:07,610
I'm sure most of you are familiar with the notion of design pattern,

45
00:03:07,610 --> 00:03:11,350
design patterns are a major construction software engineering. But design

46
00:03:11,350 --> 00:03:15,210
patterns are not just in software engineering but in all kinds of design, for

47
00:03:15,210 --> 00:03:19,680
example architecture and engineering and so on. There is some way of capturing

48
00:03:19,680 --> 00:03:24,130
the design pattern that can be learned from the previous case. A field of design

49
00:03:24,130 --> 00:03:29,310
of a device that changes the valuable variable from one value to another value.

50
00:03:29,310 --> 00:03:33,140
And you want another design that changes the value the same variable to some

51
00:03:33,140 --> 00:03:38,340
other value not the same as the previous design. One way you in which you can

52
00:03:38,340 --> 00:03:43,680
create the new design is. By replicating the behavior of the previous design.

53
00:03:43,680 --> 00:03:46,620
So not just having behavior be one for the first design, but

54
00:03:46,620 --> 00:03:50,350
having this behavior be one as many times as needed. Let us connect this to

55
00:03:50,350 --> 00:03:55,610
the example we just saw. If you have a design of an electrical circuit that can

56
00:03:55,610 --> 00:04:01,020
create 10 lumens of light, and you know how to do it through some behavior B1.

57
00:04:01,020 --> 00:04:04,640
I need to design an electrical circuit that can create 20 lumens of light, but

58
00:04:04,640 --> 00:04:09,680
you don't know the behavior of B2. Then this behavior B2

59
00:04:09,680 --> 00:04:14,680
is a replication of behavior B1 by connecting components and series.

60
00:04:14,680 --> 00:04:19,769
Once Sam's program IDOL had learned about this design pattern of cascading,

61
00:04:19,769 --> 00:04:22,980
of replication, then, when it was given the problem of

62
00:04:22,980 --> 00:04:27,060
designing a water pump of higher capacity than the one available.

63
00:04:27,060 --> 00:04:31,790
It could create a new water pump by connecting several water pumps in series.

64
00:04:31,790 --> 00:04:36,760
Thus, ideal, created new designs in one domain, the domain of water pump,

65
00:04:36,760 --> 00:04:40,880
through analogical transfer of design patterns learned under the domain,

66
00:04:40,880 --> 00:04:44,990
the domain of electrical circuits. You would form the perspective of the new

67
00:04:44,990 --> 00:04:50,160
domain of water pumps initially did not know about all the components about all

68
00:04:50,160 --> 00:04:54,180
the water pumps that will be needed. With Sam's program, IDOL is creative enough

69
00:04:54,180 --> 00:04:58,390
to know that the pattern of problems here in the water pump is exactly the same

70
00:04:58,390 --> 00:05:01,759
pattern that was also occurring in the domain of electrical circuits.

71
00:05:02,970 --> 00:05:07,730
Sam's theory provides a computational account of not only how design patterns

72
00:05:07,730 --> 00:05:12,120
can be used, but also about how these design patterns can be learned and

73
00:05:12,120 --> 00:05:15,910
transferred to new domains. There is of course a lot more to design.

74
00:05:15,910 --> 00:05:19,650
We said earlier that design thinking engages problem solution,

75
00:05:19,650 --> 00:05:22,690
core evolution. It's not just that a solution evolves but

76
00:05:22,690 --> 00:05:27,130
the problem remains fixed. But the problem evolves even as the solution evolves.

77
00:05:27,130 --> 00:05:31,190
It's not quite clear how humans do this kind of creative design,

78
00:05:31,190 --> 00:05:34,750
with this problem solution co evolution. There is certainly a few AI

79
00:05:34,750 --> 00:05:37,820
systems capable of problem solution coevolution at present
