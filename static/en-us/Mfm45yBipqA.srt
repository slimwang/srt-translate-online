1
00:00:00,000 --> 00:00:04,000
This is the final exam homework solution.

2
00:00:04,000 --> 00:00:07,000
Let's talk about the basic version first without the bonus problem.

3
00:00:07,000 --> 00:00:09,000
The basic version was to have a basic wiki.

4
00:00:09,000 --> 00:00:13,000
This is the front page. Of course there are other pages you can go to.

5
00:00:13,000 --> 00:00:15,000
If they exist, you see the content.

6
00:00:15,000 --> 00:00:20,000
If they don't exist, for example /foo, you would see an edit page.

7
00:00:20,000 --> 00:00:23,000
But I wasn't logged in so we won't see an edit page.

8
00:00:23,000 --> 00:00:26,000
Let's try that again.

9
00:00:26,000 --> 00:00:29,000
If you try to visit an edit page when you're not logged in,

10
00:00:29,000 --> 00:00:32,000
it should redirect you to the login page.

11
00:00:32,000 --> 00:00:35,000
So I go to a page that doesn't exist--foo. Now I'm logged in.

12
00:00:35,000 --> 00:00:37,000
We can see I put the user name in the upper right here.

13
00:00:37,000 --> 00:00:41,000
Then we get an edit page, and if we save this page, you can see we can now

14
00:00:41,000 --> 00:00:43,000
go to /foo and we can see this content.

15
00:00:43,000 --> 00:00:45,000
We go back to our front page and all is well>

16
00:00:45,000 --> 00:00:48,000
We've got logging in and logging out. All that works.

17
00:00:48,000 --> 00:00:50,000
Let's take a peak at the code.

18
00:00:50,000 --> 00:00:54,000
Now, this actually wasn't a whole lot of code to get a pretty functional wiki.

19
00:00:54,000 --> 00:00:56,000
A lot of this code you've already seen before.

20
00:00:56,000 --> 00:01:01,000
Oh, there's my secret. I guess I'll change that before I upload this.

21
00:01:01,000 --> 00:01:05,000
All of this code is basically from previous homeworks.

22
00:01:05,000 --> 00:01:07,000
I've actually given you most of this code.

23
00:01:07,000 --> 00:01:12,000
Here's my normal render<u>str function and my make</u>secure_val for the cookie stuff

24
00:01:12,000 --> 00:01:14,000
and check<u>secure</u>val.

25
00:01:14,000 --> 00:01:17,000
I added this new function called gray_style, and we'll come back to this for

26
00:01:17,000 --> 00:01:20,000
the bonus question but this is just a little function I wrote

27
00:01:20,000 --> 00:01:25,000
to alternate the coloring of rows in the UI.

28
00:01:25,000 --> 00:01:29,000
I don't know if there's a better way to do this or not, but this is how I did it,

29
00:01:29,000 --> 00:01:31,000
using something that would work in Jinja, the templating language,

30
00:01:31,000 --> 00:01:33,000
that I could figure out how to do otherwise.

31
00:01:33,000 --> 00:01:35,000
All of these functions--remember this is our superclass Handler

32
00:01:35,000 --> 00:01:38,000
that we've been using for all of our handlers.

33
00:01:38,000 --> 00:01:39,000
None of this stuff has changed.

34
00:01:39,000 --> 00:01:41,000
I've added it to my render_str function, I make it sow in templates

35
00:01:41,000 --> 00:01:46,000
so I always have access to a variable called user, which just references self.user.

36
00:01:46,000 --> 00:01:50,000
I have access to the function gray_style, which is that function I just pointed out.

37
00:01:50,000 --> 00:01:52,000
We'll come back to that.

38
00:01:52,000 --> 00:01:54,000
Everything else in here is actually the same.

39
00:01:54,000 --> 00:01:59,000
These are all basically how I left it after the end of Unit 4, really.

40
00:01:59,000 --> 00:02:01,000
You can see there is still some security stuff in there.

41
00:02:01,000 --> 00:02:04,000
I had made it so only spez could submit to the blog,

42
00:02:04,000 --> 00:02:08,000
and this variable isn't used in this program anymore. It's just leftover.

43
00:02:08,000 --> 00:02:11,000
I made a new 404 page so I could call self.notFound,

44
00:02:11,000 --> 00:02:15,000
and it'll actually say 404. That was something that I found kind of useful.

45
00:02:15,000 --> 00:02:19,000
We've got all the solved and valid password and hashing functions.

46
00:02:19,000 --> 00:02:21,000
This was all, again from really Unit 4 homework.

47
00:02:21,000 --> 00:02:24,000
The user code hasn't changed at all.

48
00:02:24,000 --> 00:02:26,000
The same stuff I demoed there.

49
00:02:26,000 --> 00:02:33,000
The SignupHandler is just about identical from Unit 2 and Unit 4 where we did the registration.

50
00:02:33,000 --> 00:02:36,000
The same form and the same validation. You've seen all this code before.

51
00:02:36,000 --> 00:02:39,000
The login is all basically the same.

52
00:02:39,000 --> 00:02:43,000
The only real change--actually, let's go back up to signup.

53
00:02:43,000 --> 00:02:49,000
I'm using the refer to keep track of what URL the form should go to after you submit it.

54
00:02:49,000 --> 00:02:52,000
Before we render the form, I create this variable next_url,

55
00:02:52,000 --> 00:02:56,000
which uses the refer header, which is sent along with every request.

56
00:02:56,000 --> 00:02:59,000
That's the page you are on before you went to this page.

57
00:02:59,000 --> 00:03:03,000
If I was on '/', and I clicked on login to go to /login,

58
00:03:03,000 --> 00:03:07,000
the refer would be '/', and then of course I have it default to '/'.

59
00:03:07,000 --> 00:03:12,000
That gets sent in to the form as an input type hidden,

60
00:03:12,000 --> 00:03:16,000
and the URL to go to next after we're done signing in or logging in

61
00:03:16,000 --> 00:03:18,000
gets passed in the form, and you can see that document here.

62
00:03:18,000 --> 00:03:20,000
This is the signup handler.

63
00:03:20,000 --> 00:03:24,000
In the post for that I look for next_url in the requests, and if it's there

64
00:03:24,000 --> 00:03:27,000
and if it's not login, because I don't want to have somebody signup and then immediately

65
00:03:27,000 --> 00:03:30,000
redirect them to /login. That came up during testing.

66
00:03:30,000 --> 00:03:33,000
If that parameter wasn't there or it's /login we just go to '/'.

67
00:03:33,000 --> 00:03:36,000
Otherwise, next_url we've validated everything

68
00:03:36,000 --> 00:03:39,000
and we redirect the user to next_url when they're done registering.

69
00:03:39,000 --> 00:03:42,000
That allows somebody to click signup on any page,

70
00:03:42,000 --> 00:03:44,000
and then once they sign up we take them back to that page.

71
00:03:44,000 --> 00:03:46,000
It's just an extra kind of nice little convenience.

72
00:03:46,000 --> 00:03:52,000
The login handler is almost identical to Unit 4 as well except it has the same

73
00:03:52,000 --> 00:03:54,000
next_url functionality.

74
00:03:54,000 --> 00:03:58,000
We get the referer header. I send that to my login form. I include it as an input type hidden.

75
00:03:58,000 --> 00:04:03,000
Then we redirect to it when the user logs in successfully.

76
00:04:03,000 --> 00:04:05,000
The rest of the code is the same from the Unit 4 homework.

77
00:04:05,000 --> 00:04:08,000
Login is basically the same except it also has a next_url.

78
00:04:08,000 --> 00:04:11,000
It just again looks at the refer and redirects the user to that.

79
00:04:11,000 --> 00:04:13,000
Now, I should probably clean this up a little bit.

80
00:04:13,000 --> 00:04:19,000
We've seen this exact line--this next<u>url = self.request.headers next</u>url--in three different places.

81
00:04:19,000 --> 00:04:23,000
It'd probably pull that up into the handler, but this code is kind of a work-in-progress.

82
00:04:23,000 --> 00:04:26,000
You're seeing it here in a little bit of a raw state.

83
00:04:26,000 --> 00:04:29,000
This is my page class. The page model is pretty simple.

84
00:04:29,000 --> 00:04:32,000
It just has content, a created time, and a last_modified time.

85
00:04:32,000 --> 00:04:37,000
I also wanted to have a notion of an author of what user created a particular page,

86
00:04:37,000 --> 00:04:41,000
but it actually wasn't relevant to the demo, so didn't bother finishing the implementation,

87
00:04:41,000 --> 00:04:44,000
but it would have looked something like this.

88
00:04:44,000 --> 00:04:47,000
You can see, again, this code is kind of in a working state,

89
00:04:47,000 --> 00:04:50,000
and actually what is online right now might differ from what I'm explaining here,

90
00:04:50,000 --> 00:04:54,000
because I've had a few more weeks to work on it to make it a little prettier.

91
00:04:54,000 --> 00:04:57,000
You may see this feature implemented when I release the code,

92
00:04:57,000 --> 00:04:59,000
or you may see this line be gone altogether.

93
00:04:59,000 --> 00:05:01,000
Now, I've added a couple of class methods.

94
00:05:01,000 --> 00:05:03,000
Some of you actually asked about this in some of the previous homeworks--

95
00:05:03,000 --> 00:05:05,000
what staticmethod and classmethod do.

96
00:05:05,000 --> 00:05:08,000
Staticmethod basically means you don't have to pass in self to a function,

97
00:05:08,000 --> 00:05:10,000
which means this method here is just static.

98
00:05:10,000 --> 00:05:13,000
It doesn't run on an instance of the class.

99
00:05:13,000 --> 00:05:17,000
It's just basically a way of organizing your code a little bit better.

100
00:05:17,000 --> 00:05:22,000
This function parent key is only going to be called in the context of a page,

101
00:05:22,000 --> 00:05:25,000
so I just basically say this parent key function belongs to the page

102
00:05:25,000 --> 00:05:27,000
and that's how we're going to reference it in our code,

103
00:05:27,000 --> 00:05:30,000
but it doesn't actually take an instance of the class self

104
00:05:30,000 --> 00:05:32,000
or the class itself like class.

105
00:05:32,000 --> 00:05:34,000
It operates kind of independent.

106
00:05:34,000 --> 00:05:37,000
What this function is actually doing is to make the history function work.

107
00:05:37,000 --> 00:05:39,000
This is a little trickery there.

108
00:05:39,000 --> 00:05:42,000
I'll come back and explain this in a little bit more detail when I explain

109
00:05:42,000 --> 00:05:44,000
the solution to the bonus problem.

110
00:05:44,000 --> 00:05:46,000
Then I added two class methods.

111
00:05:46,000 --> 00:05:52,000
One is by_path for looking up a page by URL, which is kind of the default way of looking something up.

112
00:05:52,000 --> 00:05:56,000
All this does is this runs an app engine query or datastore query.

113
00:05:56,000 --> 00:06:00,000
This is a class method and what class method does is it says instead of running by_path

114
00:06:00,000 --> 00:06:04,000
on and instance of page, run it on page itself--just the definition.

115
00:06:04,000 --> 00:06:11,000
You can say Page.by_path, give it a path, and it will return a query object.

116
00:06:11,000 --> 00:06:15,000
Basically what this is say is get me all the pages for this URL sorted by creation time.

117
00:06:15,000 --> 00:06:17,000
That's kind of how I did versioning.

118
00:06:17,000 --> 00:06:19,000
I'll come back to that in more detail again when I talk about the bonus problem.

119
00:06:19,000 --> 00:06:22,000
Of course looking up Page.by_id--this is strictly for the bonus problem--

120
00:06:22,000 --> 00:06:26,000
looking up older versions of a page, so if you want to look it up by id

121
00:06:26,000 --> 00:06:28,000
in addition to the path, that's what this function is for.

122
00:06:28,000 --> 00:06:33,000
NoSlash is a special handler for getting rid of extra slashes in the URL.

123
00:06:33,000 --> 00:06:35,000
It was kind of a work-in-progress. It wasn't working in this demo.

124
00:06:35,000 --> 00:06:38,000
I'm going to have to come back and clean that up. Just ignore that for now.

125
00:06:38,000 --> 00:06:43,000
Here is the EditPage handler. EditPage is the handler for actually editing one of the wikI pages.

126
00:06:43,000 --> 00:06:45,000
First thing we do is we check to see if the user is logged in.

127
00:06:45,000 --> 00:06:48,000
If the user is not logged in, we redirect to /login.

128
00:06:48,000 --> 00:06:50,000
That's important because you don't want non-logged in users to be editing your pages.

129
00:06:50,000 --> 00:06:52,000
They should be registered, so you know who's doing what.

130
00:06:52,000 --> 00:06:56,000
This code here is for the bonus problem.

131
00:06:56,000 --> 00:06:59,000
If you didn't do the bonus problem, all you need to really do is look up a page.

132
00:06:59,000 --> 00:07:02,000
This is that by_path function that I just explained on the path object.

133
00:07:02,000 --> 00:07:06,000
We give it the path, and then we get the page object.

134
00:07:06,000 --> 00:07:08,000
You can structure this however you like.

135
00:07:08,000 --> 00:07:11,000
What that by_path function returns is a query and on a query datastore

136
00:07:11,000 --> 00:07:16,000
you can either call get to get the first element of the query or you can call fetch to get multiple ones.

137
00:07:16,000 --> 00:07:19,000
I'm calling get, because I only want the first one.

138
00:07:19,000 --> 00:07:23,000
Then we render edit.html with that page, and we include that path

139
00:07:23,000 --> 00:07:27,000
so I can render some of the links that appear in the navigation section.

140
00:07:27,000 --> 00:07:29,000
Here's the definition of a post for the edit page.

141
00:07:29,000 --> 00:07:31,000
Again we check to see if the user exists.

142
00:07:31,000 --> 00:07:35,000
Now you may say, well, if the user didn't exist, how did they view the edit page?

143
00:07:35,000 --> 00:07:40,000
Well, they could have a couple tabs open or multiple browser windows open.

144
00:07:40,000 --> 00:07:45,000
If they log out on and then submit a form in the other that could cause some problems.

145
00:07:45,000 --> 00:07:48,000
What we do is if the user is not logged in we just return a error 400,

146
00:07:48,000 --> 00:07:51,000
which is basically a bad request, and return.

147
00:07:51,000 --> 00:07:54,000
I didn't do anything user friendly here because that shouldn't happen.

148
00:07:54,000 --> 00:07:56,000
It just kind of silently fails.

149
00:07:56,000 --> 00:07:59,000
Then what we do is we look for the actual content in the request.

150
00:07:59,000 --> 00:08:02,000
Then we look up an old version of the page.

151
00:08:02,000 --> 00:08:04,000
Then we have this little thing here.

152
00:08:04,000 --> 00:08:07,000
Basically, if there wasn't an old version of the page, you're creating a new page,

153
00:08:07,000 --> 00:08:09,000
and there wasn't any content--just return.

154
00:08:09,000 --> 00:08:11,000
I'll probably expand this to have an error message,

155
00:08:11,000 --> 00:08:14,000
but we left out a little undefined in the problem.

156
00:08:14,000 --> 00:08:17,000
I hadn't implemented it right away and so right now we're just kind of ignoring that.

157
00:08:17,000 --> 00:08:24,000
Otherwise, if we either don't have a page and have content, which is what this clause implies,

158
00:08:24,000 --> 00:08:29,000
or we do have a page and the content has changed.

159
00:08:29,000 --> 00:08:31,000
I make a new instance of page.

160
00:08:31,000 --> 00:08:33,000
Now, depending on whether or not you did the bonus problem,

161
00:08:33,000 --> 00:08:36,000
you could have edited an old version of the page.

162
00:08:36,000 --> 00:08:40,000
In mine, I want to keep this version history, so I create a new page for every change.

163
00:08:40,000 --> 00:08:42,000
Then we store that in the database.

164
00:08:42,000 --> 00:08:47,000
Then we redirect to just the path without the _edit,

165
00:08:47,000 --> 00:08:49,000
so you can actually view the content.

166
00:08:49,000 --> 00:08:52,000
I'll skip the history page handler, but it's actually pretty simple.

167
00:08:52,000 --> 00:08:54,000
We'll come back to that in a second.

168
00:08:54,000 --> 00:08:59,000
WikiPage is the handler for actually viewing any pages on the Wiki.

169
00:08:59,000 --> 00:09:03,000
It takes a path argument just like the edit page does.

170
00:09:03,000 --> 00:09:05,000
Notice it's only get. There's no post here.

171
00:09:05,000 --> 00:09:12,000
This code here is identical to the edit page, and so again, I'll probably clean this up.

172
00:09:12,000 --> 00:09:17,000
This basically decides whether you're looking at an old version of Page with the version number

173
00:09:17,000 --> 00:09:20,000
or the most recent version of the page.

174
00:09:20,000 --> 00:09:23,000
If you didn't do the bonus problem all you need is something like this.

175
00:09:23,000 --> 00:09:26,000
This says just look up the most recent version on the page.

176
00:09:26,000 --> 00:09:30,000
If it exists, we render page.html with that page.

177
00:09:30,000 --> 00:09:32,000
I also include the path so I can render those links.

178
00:09:32,000 --> 00:09:36,000
If it doesn't exist, I redirect this /_edit plus the path.

179
00:09:36,000 --> 00:09:39,000
So how do I do all the URL handling? It's actually pretty simple.

180
00:09:39,000 --> 00:09:44,000
What I did is I created a regular expression to match what I think is a valid URL>

181
00:09:44,000 --> 00:09:49,000
Basically, it has to start with "/" and then it contains one or more

182
00:09:49,000 --> 00:09:55,000
of the following characters--little a through little z, big A through big Z, 0 through 9,

183
00:09:55,000 --> 00:10:01,000
underscore, and dash--followed by an optional slash

184
00:10:01,000 --> 00:10:04,000
and then as many of those clauses as you want.

185
00:10:04,000 --> 00:10:11,000
That basically means slash is valid and then any number of these clauses

186
00:10:11,000 --> 00:10:15,000
is valid after that. Then our URL handlers look something like this.

187
00:10:15,000 --> 00:10:18,000
So /signup goes to Signup handler, /login Login, /logout Logout.

188
00:10:18,000 --> 00:10:20,000
These are all handlers you've seen from Unit 4.

189
00:10:20,000 --> 00:10:24,000
This was my NoSlash thing that is currently not working so I commented it out.

190
00:10:24,000 --> 00:10:26,000
Now, remember these URL get matched in order.

191
00:10:26,000 --> 00:10:32,000
You want to make sure that this handler here or this regular expression

192
00:10:32,000 --> 00:10:39,000
for rendering a wiki page would actually also capture the history URL and the edit URL,

193
00:10:39,000 --> 00:10:44,000
so we need to put those history URL and the edit URL first so they get matched first.

194
00:10:44,000 --> 00:10:50,000
What this one says here is it says if the URL is of the form /_history

195
00:10:50,000 --> 00:10:56,000
plus this regular expression--basically /_history/anything--

196
00:10:56,000 --> 00:10:58,000
match the history page.

197
00:10:58,000 --> 00:11:04,000
If the URL is /_edit, basically anything, go to the edit page,

198
00:11:04,000 --> 00:11:07,000
and if it's anything else, go to the wiki page.

199
00:11:07,000 --> 00:11:10,000
That's how we go to one of those three handlers.

200
00:11:10,000 --> 00:11:16,000
If we take a look at the app again in the browser now that we have seen the code,

201
00:11:16,000 --> 00:11:18,000
some things will make a little bit more sense.

202
00:11:18,000 --> 00:11:21,000
When you just go to "/" we go through our URL matcher,

203
00:11:21,000 --> 00:11:25,000
and we say, okay, it doesn't match login, signup, or logout.

204
00:11:25,000 --> 00:11:28,000
It doesn't start with <u>history or</u>edit, so we match the other thing.

205
00:11:28,000 --> 00:11:34,000
Our path now becomes "/" and then we look up using our database query the page for "/".

206
00:11:34,000 --> 00:11:36,000
We get this page.

207
00:11:36,000 --> 00:11:39,000
If I were to go /newpage, we do the same thing.

208
00:11:39,000 --> 00:11:45,000
We use this as the key into our database, and we look up the most recent version of newpage.

209
00:11:45,000 --> 00:11:47,000
Here it is.

210
00:11:47,000 --> 00:11:49,000
Now, let's talk about editing a page.

211
00:11:49,000 --> 00:11:51,000
I'm not logged in, so I don't have my edit link.

212
00:11:51,000 --> 00:11:53,000
Let's go ahead and log in, so we can see the edit link.

213
00:11:53,000 --> 00:11:58,000
Here I am on newpage. Now I'm logged in as spez. I have my edit link.

214
00:11:58,000 --> 00:12:00,000
I'll show you those templates in a moment.

215
00:12:00,000 --> 00:12:07,000
When I click on edit, you can actually see it basically links to _edit/newpage.

216
00:12:07,000 --> 00:12:09,000
It basically inserts an _edit here.

217
00:12:09,000 --> 00:12:12,000
Remember that goes through our edit handler instead of the normal wiki handler.

218
00:12:12,000 --> 00:12:18,000
When I visit this link, the edit handler draws the different form, which gives us this whole form.

219
00:12:18,000 --> 00:12:22,000
I'll just click save here. It didn't change the content, so we didn't create a new version.

220
00:12:22,000 --> 00:12:24,000
That's how edit works.

221
00:12:24,000 --> 00:12:26,000
Now, of course, we can go to any URL.

222
00:12:26,000 --> 00:12:30,000
It matches the wiki handler first. Let's look at the wiki handler again.

223
00:12:30,000 --> 00:12:34,000
This wiki handler first--remember if the page, if it doesn't exist,

224
00:12:34,000 --> 00:12:37,000
we redirect to /_edit plus the path.

225
00:12:37,000 --> 00:12:41,000
The path is passed in by this regular expression.

226
00:12:41,000 --> 00:12:43,000
We'll go back to our browser.

227
00:12:43,000 --> 00:12:47,000
What's going to happen is we're going to redirect to _edit this string.

228
00:12:47,000 --> 00:12:49,000
There we go. That works.

229
00:12:49,000 --> 00:12:51,000
Now, what if I go something like this.

230
00:12:51,000 --> 00:12:56,000
Actually, let's take a page that already exists. Will this work? Yes.

231
00:12:56,000 --> 00:12:58,000
We get the edit page on this URL.

232
00:12:58,000 --> 00:13:01,000
Remember, our regular expression just basically matches any number of things.

233
00:13:01,000 --> 00:13:05,000
We can actually create a whole complicated URL structure. That's pretty cool.

234
00:13:05,000 --> 00:13:09,000
If I were to say here is the subpage and submit this, it works.

235
00:13:09,000 --> 00:13:13,000
If I were to go back to newpage, that works as well. Pretty cool.
