1
00:00:00,320 --> 00:00:03,110
I'm sure your memory recall capability is very good

2
00:00:03,110 --> 00:00:05,670
and you would have come up with the right answers

3
00:00:05,670 --> 00:00:09,210
for all of these entries. Let me just quickly

4
00:00:09,210 --> 00:00:12,970
summarize what I'm sure that most of you have gotten

5
00:00:12,970 --> 00:00:16,560
already. In all cases except this, where the global

6
00:00:16,560 --> 00:00:21,020
part of the faulting node Ps cache is empty, the

7
00:00:21,020 --> 00:00:22,900
local part of course is going to go up by

8
00:00:22,900 --> 00:00:26,530
one, the global part is going to come down by one.

9
00:00:26,530 --> 00:00:29,470
Only when the global part is empty already, there's no

10
00:00:29,470 --> 00:00:32,970
change. And, in both cases, there's no change to the

11
00:00:32,970 --> 00:00:36,360
balance between L and G on both the node Q,

12
00:00:36,360 --> 00:00:39,410
which is supplying the page X. And the node R

13
00:00:39,410 --> 00:00:41,890
that happens to have the LRU page, because it is

14
00:00:41,890 --> 00:00:44,730
not even part of the action, in terms of the

15
00:00:44,730 --> 00:00:48,000
page fault handling, for these two cases. Now the third

16
00:00:48,000 --> 00:00:52,000
case, is where it is on the disk and therefore

17
00:00:52,000 --> 00:00:56,610
this is immaterial. Right? Because it's not in any

18
00:00:56,610 --> 00:00:58,550
cluster memory right now. It is on the disk, so

19
00:00:58,550 --> 00:01:01,120
it's not applicable. Well, the question is what happens

20
00:01:01,120 --> 00:01:04,971
to the guy that has the globally oldest page. If

21
00:01:04,971 --> 00:01:06,320
it is on the disk and we have to

22
00:01:06,320 --> 00:01:10,280
bring it into the faulting node, then necessarily we have

23
00:01:10,280 --> 00:01:13,400
to make space in the cluster memory as a whole

24
00:01:13,400 --> 00:01:17,050
for this extra page. Because this guy's balance is going to

25
00:01:17,050 --> 00:01:18,730
shift, and I have to throw this global

26
00:01:18,730 --> 00:01:21,640
page somewhere. I am picking this guy as the

27
00:01:21,640 --> 00:01:25,380
replacement candidates, because he has the globally oldest page.

28
00:01:25,380 --> 00:01:26,943
But what is going to happen on this node? Well,

29
00:01:26,943 --> 00:01:31,888
it really depends on whether the LRU page comes from

30
00:01:31,888 --> 00:01:37,116
the global part or the local part. If it comes from the global

31
00:01:37,116 --> 00:01:42,240
part, then there is no change on R, because you're basically throwing

32
00:01:42,240 --> 00:01:45,516
this into the global part, and he's throwing

33
00:01:45,516 --> 00:01:48,120
one of those global pages out onto the

34
00:01:48,120 --> 00:01:51,403
disk, right? If on the other hand, the

35
00:01:51,403 --> 00:01:55,147
global page that I sent over here results in

36
00:01:55,147 --> 00:02:01,179
replacing a local page on node R, because the local page happens to be

37
00:02:01,179 --> 00:02:07,380
the LRU candidate then L goes down by one and G goes up by one. So we had able

38
00:02:07,380 --> 00:02:10,310
to do more community service in this case and in

39
00:02:10,310 --> 00:02:13,430
the last case when it is actively shared, again, even

40
00:02:13,430 --> 00:02:16,930
though we find the missing page in note Q, there's

41
00:02:16,930 --> 00:02:19,380
no change in the balance of L and G because

42
00:02:19,380 --> 00:02:23,065
it is coming from the active part of L, because

43
00:02:23,065 --> 00:02:25,700
it is shared. It indicates if it is shared it

44
00:02:25,700 --> 00:02:29,220
has to be, from the L part of Q. Since

45
00:02:29,220 --> 00:02:32,570
it is actively shared, there's no change in the split

46
00:02:32,570 --> 00:02:39,130
between L and G and of course, this guy has to send one of its global pages

47
00:02:39,130 --> 00:02:45,630
to some other node, because the memory pressure as a whole is increasing on

48
00:02:45,630 --> 00:02:52,060
node P. This guy is going to send it to node R that has the LRU page,

49
00:02:52,060 --> 00:02:58,000
and just like in this case, where I have to make room for the cumulative memory

50
00:02:58,000 --> 00:03:03,960
pressure on the cluster by throwing out a page onto the disk. And similar

51
00:03:03,960 --> 00:03:09,960
to this case, if the candidate replacement page comes from the local part of

52
00:03:09,960 --> 00:03:14,250
R, then it is going to result in the local part shrinking by one

53
00:03:14,250 --> 00:03:16,790
and the global part increasing by one

54
00:03:16,790 --> 00:03:18,990
to accommodate the page that came from here.
