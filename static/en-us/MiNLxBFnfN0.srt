1
00:00:00,000 --> 00:00:04,750
In the unit, we talked about a greedy approximation algorithm for vertex cover.

2
00:00:04,750 --> 00:00:07,110
Let's review that very quickly.

3
00:00:07,110 --> 00:00:11,220
So if we were to implement this algorithm in a function called greedy_vc,

4
00:00:11,220 --> 00:00:17,430
the first thing we would do is go to loop that checks that not all edges are already covered.

5
00:00:17,430 --> 00:00:22,110
Within that loop, we're going to first choose a vertex that has the most uncovered edges

6
00:00:22,110 --> 00:00:24,270
and then we're going to put that vertex into the cover.

7
00:00:24,270 --> 00:00:27,500
Now, another step, you might choose a different vertex for this--

8
00:00:27,500 --> 00:00:29,560
depending on how you traverse the graph.

9
00:00:29,560 --> 00:00:33,250
If you have multiple vertices that all have an equal number

10
00:00:33,250 --> 00:00:36,490
but the maximum of uncovered edges in the graph.

11
00:00:36,490 --> 00:00:39,410
So your order with this might vary.

12
00:00:39,410 --> 00:00:43,260
So I'd like you to implement this entire algorithm in the function greedy_vc,

13
00:00:43,260 --> 00:00:47,160
where you get an adjacent c matrix as the input.

14
00:00:47,160 --> 00:00:53,470
Now, as output, I'd like you to return first the size of the vertex cover and then a list

15
00:00:53,470 --> 00:00:57,340
containing all of the vertices that are in the cover.

16
00:00:57,340 --> 00:01:01,030
And again, we're not going to worry about order here because you might get a different order

17
00:01:01,030 --> 99:59:59,999
than what we get and we'll check for that.
