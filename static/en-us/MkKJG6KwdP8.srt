1
00:00:00,340 --> 00:00:03,560
Here we are,
ready to tackle completion closures.

2
00:00:03,560 --> 00:00:06,090
We've seen many in other people's code,
but

3
00:00:06,090 --> 00:00:08,410
now we're finally ready
to write our own.

4
00:00:09,520 --> 00:00:13,700
Writing a method that takes a closure
as a parameter has a wacky syntax, but

5
00:00:13,700 --> 00:00:19,380
don't worry, we have a great tool
called www.goshdarnclosuresyntax.com.

6
00:00:19,380 --> 00:00:20,630
Let's take a look at it.

7
00:00:20,630 --> 00:00:24,017
This is www.goshdarnclosuresyntax.com,
and

8
00:00:24,017 --> 00:00:29,269
it's a list of all the different ways
that you can declare a closure in Swift.

9
00:00:29,269 --> 00:00:36,660
So you have as a variable,
optional variable, type alias, etc.

10
00:00:36,660 --> 00:00:40,770
The one we're actually interested
in is argument to a function call.

11
00:00:40,770 --> 00:00:46,310
So we want a function that takes
a closure as one of its parameters or

12
00:00:46,310 --> 00:00:47,740
arguments.

13
00:00:47,740 --> 00:00:51,790
There is another version of this site
with a far more memorable name, but

14
00:00:51,790 --> 00:00:54,110
our lawyers told me I couldn't use it.

15
00:00:54,110 --> 00:00:57,470
Finding it is left as an exercise
to the interested student.

16
00:00:57,470 --> 00:00:59,310
Anyway, let's get back to Xcode.

17
00:01:00,410 --> 00:01:03,480
Now we're going to write
a method called withBigImage

18
00:01:03,480 --> 00:01:06,990
that takes a completitionHandler
as a parameter.

19
00:01:06,990 --> 00:01:09,260
What will this method do?

20
00:01:09,260 --> 00:01:12,760
It's going to download
the image in the background and

21
00:01:12,760 --> 00:01:17,270
once it's finished, once it's done,
it will run the completion handler.

22
00:01:17,270 --> 00:01:24,061
The completion function closure, or
handler, however you want to call it,

23
00:01:24,061 --> 00:01:28,530
is what it should do with
this image once it has it.

24
00:01:28,530 --> 00:01:30,290
So let's get started.

25
00:01:30,290 --> 00:01:34,420
This is the signature for
the withBigImage method.

26
00:01:35,510 --> 00:01:39,860
It takes one parameter and
this parameter has two different names,

27
00:01:39,860 --> 00:01:45,385
an internal name called handler, and an
external one called completion handler.

28
00:01:45,385 --> 00:01:46,675
But the important stuff is here.

29
00:01:47,685 --> 00:01:53,505
It returns nothing, but
it takes one parameter, a UI image.

30
00:01:53,505 --> 00:01:57,305
That's because since it's going
to do something with a UI image,

31
00:01:57,305 --> 00:02:04,100
it must have access to that UI image
that this method is going to provide.

32
00:02:04,100 --> 00:02:06,540
So the completion handler must

33
00:02:06,540 --> 00:02:09,820
take as a parameter the image
that has been downloaded.

34
00:02:11,180 --> 00:02:14,270
Next, we will have to fill in the code,
and

35
00:02:14,270 --> 00:02:17,630
it's going to be very similar
to what we wrote previously.

36
00:02:17,630 --> 00:02:22,310
We are going to need to create a
download queue, and then we're going to

37
00:02:22,310 --> 00:02:27,360
add to that queue a closure that
downloads the queue in the background.

38
00:02:27,360 --> 00:02:32,825
And then we will finally, once we're
done, we're going to run this handler.

39
00:02:32,825 --> 00:02:38,015
And you can start thinking right
now in which queue do you think

40
00:02:38,015 --> 00:02:40,975
that the completion handler should run?

41
00:02:40,975 --> 00:02:42,745
Let me write the code and
we'll get there.

42
00:02:43,885 --> 00:02:47,165
Okay, this first step is
to call the spare chasing.

43
00:02:47,165 --> 00:02:49,145
And we need also a queue,

44
00:02:49,145 --> 00:02:53,390
but this time we're not going
to create a queue from scratch,

45
00:02:53,390 --> 00:02:58,240
we're going to reuse one of those four
queues that the system allocates for

46
00:02:58,240 --> 00:03:04,920
each application on iOS, and we need to
choose also the priority of this queue.

47
00:03:04,920 --> 00:03:08,660
It depends, if it's something very
urgent, something that has been

48
00:03:08,660 --> 00:03:12,690
initiated by the user,
then it should get a decent priority.

49
00:03:12,690 --> 00:03:17,470
If it's something that can wait,
then you could give it a lower priority.

50
00:03:17,470 --> 00:03:19,620
But first we need to get this queue.

51
00:03:19,620 --> 00:03:21,095
The first parameter for

52
00:03:21,095 --> 00:03:26,770
dispatch_get_global_queue is
something called the identifier

53
00:03:26,770 --> 00:03:32,330
that's actually a constant that
gives you the priority of the queue.

54
00:03:32,330 --> 00:03:36,510
This QOS by the way means "quality
of service." Class_Background,

55
00:03:36,510 --> 00:03:39,290
that means pretty bad
quality of service.

56
00:03:39,290 --> 00:03:41,350
It's going to have low priority.

57
00:03:41,350 --> 00:03:45,905
And user_interactive is
the top priority and

58
00:03:45,905 --> 00:03:50,005
user_initiated is the normal
hold priority, I'll set that.

59
00:03:51,245 --> 00:03:54,565
And the flags,
those are not being used right now.

60
00:03:54,565 --> 00:03:59,285
That has been set up for the future,
so right now you should pass zero.

61
00:03:59,285 --> 00:04:02,980
And we have the closure.

62
00:04:02,980 --> 00:04:08,870
So within this code,
that's where we have to get the URL,

63
00:04:08,870 --> 00:04:14,210
download the NS data,
turn it into a UI image,

64
00:04:14,210 --> 00:04:19,220
and then, once we have the image,
run the completion handler.

65
00:04:19,220 --> 00:04:22,760
Let's write, this should be
familiar by now, but lets write it.

66
00:04:23,810 --> 00:04:27,650
So here's the code that we've been
writing over and over and over,

67
00:04:27,650 --> 00:04:32,230
it's encapsulated in
a nice if-let statement so

68
00:04:32,230 --> 00:04:35,500
nothing evil will
happen if we get a nil.

69
00:04:35,500 --> 00:04:39,320
The only thing that is left is to
run the completion closure, and

70
00:04:39,320 --> 00:04:42,890
that's just like calling any closure or
function.

71
00:04:42,890 --> 00:04:47,570
So it would be handler, image,
and the image that we downloaded.

72
00:04:48,840 --> 00:04:53,300
Now look carefully at this code and

73
00:04:53,300 --> 00:04:56,540
think if this is wise,
if this is a good idea.

74
00:04:57,660 --> 00:05:00,140
Everything that is running

75
00:05:00,140 --> 00:05:03,570
inside this closure is running
in the background queue.

76
00:05:03,570 --> 00:05:08,510
However, completion handlers or
completion closures

77
00:05:08,510 --> 00:05:13,440
are usually used to update the UI, so

78
00:05:13,440 --> 00:05:17,540
they will very likely use an axis UIKit.

79
00:05:17,540 --> 00:05:19,990
So this is definitely not a good idea,
okay?

80
00:05:21,140 --> 00:05:26,890
It might crash if whatever code
is in that handler, we don't know

81
00:05:26,890 --> 00:05:32,330
exactly what's in there, because we
get it as a parameter, as a black box,

82
00:05:32,330 --> 00:05:38,290
if that accesses UIKit,
this code will crash definitely.

83
00:05:38,290 --> 00:05:42,750
So it's a good practice
to make sure that always

84
00:05:42,750 --> 00:05:45,940
all your completion handlers
run in the main queue.

85
00:05:45,940 --> 00:05:51,000
This is not a rule, but
It's a very good practice.

86
00:05:51,000 --> 00:05:54,150
Make sure that always,
all your completion handlers,

87
00:05:54,150 --> 00:05:57,050
those that you write,
run in the main queue.

88
00:05:57,050 --> 00:06:00,140
When you get a library
from a third party, and

89
00:06:00,140 --> 00:06:04,920
it has completion handlers,
you should check the documentation to

90
00:06:04,920 --> 00:06:08,520
make sure where those
completion handlers are run.

91
00:06:08,520 --> 00:06:10,360
The usual is the main queue.

92
00:06:10,360 --> 00:06:15,086
So we need to wrap this code here,
in a dispatch_async,

93
00:06:15,086 --> 00:06:20,330
dispatch_get_main_queue, and
then call the completionHandler.

94
00:06:20,330 --> 00:06:22,250
This should be trivial by now.

95
00:06:22,250 --> 00:06:23,570
Let's finish it.

96
00:06:23,570 --> 00:06:29,000
Here it is, we call dispatch_async,
as usual, then dispatch_get_main_queue,

97
00:06:29,000 --> 00:06:33,540
because we want to run the next closure,
within the main queue.

98
00:06:33,540 --> 00:06:38,460
And inside this closure we will
run the completion handler, so

99
00:06:38,460 --> 00:06:42,890
this way we're also hopping
from one queue to the other.

100
00:06:42,890 --> 00:06:47,260
We hop to a background queue here.

101
00:06:47,260 --> 00:06:50,550
Then when we have the image,
we go to the main queue and

102
00:06:50,550 --> 00:06:52,750
run the completion handler.

103
00:06:52,750 --> 00:06:57,262
And either if this completion
handler uses UIKit or not,

104
00:06:57,262 --> 00:07:00,270
it's okay, the code will not crash.

105
00:07:01,420 --> 00:07:02,870
And now we're finally done.

106
00:07:04,130 --> 00:07:09,160
No, hang on there, this is a very good
moment for you to go and take a look

107
00:07:09,160 --> 00:07:13,460
at the black box code that hides
the reality of GCD from most students.

108
00:07:13,460 --> 00:07:15,770
It should be obvious to you right now.

109
00:07:15,770 --> 00:07:17,240
Just by staring at the code,

110
00:07:17,240 --> 00:07:20,290
you should be able to see
the lady in the red dress.

111
00:07:20,290 --> 00:07:23,910
And there's extra nerdy points for
you if you know what I'm talking about.
