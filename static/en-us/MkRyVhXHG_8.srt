1
00:00:00,000 --> 00:00:08,000
For this first problem, we're going to be writing a program that checks Sudoku grids

2
00:00:08,000 --> 00:00:13,000
to make sure that they are valid sub-grids, and if you haven't played Sudoku before we'll go over

3
00:00:13,000 --> 00:00:16,000
briefly or you can go check the Wikipedia page,

4
00:00:16,000 --> 00:00:21,000
which probably has a far more in-depth explanation than we could ever give here.

5
00:00:21,000 --> 00:00:29,000
Sudoku is a game played by on a 9x9 grid, which will be representing as a list of lists

6
00:00:29,000 --> 00:00:36,000
that contains 81 elements and each one of this 81 elements has to be a number between 0 and 9

7
00:00:36,000 --> 00:00:41,000
including 0 and 9 and if either of this doesn't hold,

8
00:00:41,000 --> 00:00:45,000
then we'll be returning none right away before we do anything else.

9
00:00:45,000 --> 00:00:53,000
If we do pass those any checks, then we're going to return true if all of these hold,

10
00:00:53,000 --> 00:00:57,000
which are the basic checks that go on in a Sudoku game.

11
00:00:57,000 --> 00:01:01,000
Each number 1 through 9 occurs only once in each row.

12
00:01:01,000 --> 00:01:09,000
It also occurs only once in each column and in each 3x3 sub-grid on the box on the board,

13
00:01:09,000 --> 00:01:15,000
and it also occurs only once in each 3x3 sub-grid in the over all grid

14
00:01:15,000 --> 00:01:18,000
and it might be clear with a bit of a picture.

15
00:01:18,000 --> 00:01:23,000
Here you can see all nine 3x3 sub-grids.

16
00:01:23,000 --> 00:01:29,000
Each of this should only have the number 1 through 9 once for each sub-grid.

17
00:01:29,000 --> 00:01:34,000
Now, you can have zero in a valid sub-grid, it means it hasn't been encoded yet.

18
00:01:34,000 --> 00:01:40,000
We don't have any solution, for instance, that has those numbers in it.

19
00:01:40,000 --> 00:01:48,000
Your program would have to account for that, and I will give you a few examples before we expect.

20
00:01:48,000 --> 00:01:56,000
First, we get an L form board where, see that this row doesn't have mine elements. It only has eight.

21
00:01:56,000 --> 00:01:59,000
We should return none immediately.

22
00:01:59,000 --> 00:02:03,000
This is a valid board with no zeros and it shouldt return true.

23
00:02:03,000 --> 00:02:10,000
This is an invalid board that should return false, because it has the elements 1 through 9

24
00:02:10,000 --> 00:02:15,000
either in more than once in a row or a column or a 3x3 sub-grid.

25
00:02:15,000 --> 00:02:20,000
We need to check that is indeed the case for this one,

26
00:02:20,000 --> 00:02:23,000
and then we have two that aren't finish.

27
00:02:23,000 --> 00:02:27,000
One that's a fairly easy Sudoku puzzle appeared going solid by hand

28
00:02:27,000 --> 00:02:30,000
and one that is actually quite difficult

29
00:02:30,000 --> 00:02:36,000
to solve by hand at least for me and both of these should return true.

30
00:02:36,000 --> 00:02:40,000
You can solve those piece with a valid different answers.

31
00:02:40,000 --> 00:02:44,000
You're going to write this in the check_Sudoku function,

32
00:02:44,000 --> 00:02:48,000
and give you these different statements to check them.

33
00:02:48,000 --> 00:02:55,000
Now these are the only test cases we're going to be testing against for this problem set.

34
00:02:55,000 --> 00:02:58,000
That's not really the point of this assignment though.

35
00:02:58,000 --> 00:03:06,000
What I'd like you to do is go to the forums and post the code that

36
00:03:06,000 --> 00:03:13,000
you used to solve this in the forums and we'll have a link to a specific forum post

37
00:03:13,000 --> 00:03:17,000
in the instructor comments down below the video, so please check that.

38
00:03:17,000 --> 00:03:21,000
I'd also like you to look at other people's code

39
00:03:21,000 --> 00:03:29,000
and see if you can think of some fuzzers that would break these people's code.

40
00:03:29,000 --> 00:03:34,000
Either a specific instances in those code or if you have a general purpose fuzzer

41
00:03:34,000 --> 00:03:41,000
that would run well against general Sudoku checkers then go ahead and post that in the forums.

42
00:03:41,000 --> 00:03:46,000
I'd really like you to think about what kind of inputs

43
00:03:46,000 --> 00:03:50,000
and what kind of testing you would have to do in order to do this well.

44
00:03:50,000 --> 00:03:52,000
I hope you had fun with this.

45
00:03:52,000 --> 00:03:55,000
I hope there's a lot of great discussion on the forum about it,

46
00:03:55,000 --> 00:04:00,000
and I look forward to seeing all of your solutions.

47
00:04:00,000 --> 99:59:59,999
Okay, great. Have fun.
