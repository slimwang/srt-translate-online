1
00:00:00,260 --> 00:00:02,800
That's a bit of a pain. Here is how you convince

2
00:00:02,800 --> 00:00:05,800
the Java compiler to do it anyway. This is a very strange

3
00:00:05,800 --> 00:00:09,850
syntax, whose origins are somewhere in the mist of time of

4
00:00:09,850 --> 00:00:12,780
programming languages and we won't dwell on that. But here is what

5
00:00:12,780 --> 00:00:16,200
you need to do. This value here, is of type double.

6
00:00:16,200 --> 00:00:18,010
Now we don't want it to be in double. We want it

7
00:00:18,010 --> 00:00:20,830
to be in integer. And then you have to put the

8
00:00:20,830 --> 00:00:25,400
name of the type that you want and, put parentheses around it.

9
00:00:25,400 --> 00:00:27,340
And put it before the expression you want to

10
00:00:27,340 --> 00:00:30,650
convert. What now happens is, this expression here is

11
00:00:30,650 --> 00:00:34,880
computed. The fractional part is discarded. The integer

12
00:00:34,880 --> 00:00:38,860
part, is moved over here. This operation is called

13
00:00:38,860 --> 00:00:42,210
a cast. That's a curious name, are we

14
00:00:42,210 --> 00:00:45,670
casting out a fishing rod? Is it cast around

15
00:00:45,670 --> 00:00:50,580
a broken a foot? The cast of characters in a play? Well I guess it's mostly like

16
00:00:50,580 --> 00:00:53,720
the latter, becaues we have this value here.

17
00:00:53,720 --> 00:00:57,230
That actually is a, fractional number and we want to

18
00:00:57,230 --> 00:00:59,610
cast it, not as the hero in the play

19
00:00:59,610 --> 00:01:02,410
but as an integer. Whatever, that's just what it's

20
00:01:02,410 --> 00:01:04,950
called. Every once in a while, you need

21
00:01:04,950 --> 00:01:08,330
to do this. You have, something that's not of

22
00:01:08,330 --> 00:01:10,610
the type that you want, you want to change its

23
00:01:10,610 --> 00:01:14,310
type and, the cast notation does that for us.
