1
00:00:00,170 --> 00:00:04,350
Now we'll write the second half of
the Gaussian elimination algorithm,

2
00:00:04,350 --> 00:00:10,930
which brings a system into reduced
row-echelon form, or RREF for short.

3
00:00:10,930 --> 00:00:14,600
Remember that this is the unique
triangular form in which the pivot or

4
00:00:14,600 --> 00:00:18,840
leading variables each have
a coefficient of 1 and

5
00:00:18,840 --> 00:00:21,230
are each in exactly one equation.

6
00:00:21,230 --> 00:00:25,300
There are no terms above or
below that equation with that variable.

7
00:00:25,300 --> 00:00:29,240
To really ensure uniqueness, we have
to add the technical condition that

8
00:00:29,240 --> 00:00:32,932
if the system contains
equations of the form 0 = k for

9
00:00:32,932 --> 00:00:36,140
non-zero k, then k must equal 1.

10
00:00:36,140 --> 00:00:40,380
And all such equations must come before
any equations of the form 0 = 0.

11
00:00:40,380 --> 00:00:43,690
But for our purposes,
it will be fine as long as you put

12
00:00:43,690 --> 00:00:49,010
all equations of the form 0 = 0 and
0 = k at the end of the system.

13
00:00:49,010 --> 00:00:51,930
And this will happen if you use
the triangular form algorithm

14
00:00:51,930 --> 00:00:53,600
we computed last time.

15
00:00:53,600 --> 00:00:58,380
I've added another function
called compute_rref to my module.

16
00:00:58,380 --> 00:01:02,090
It will return a new system
in reduced row echelon form

17
00:01:02,090 --> 00:01:05,330
that has the same solution
set as the original system.

18
00:01:05,330 --> 00:01:09,625
Notice that I make sure the system is
in triangular form by first running

19
00:01:09,625 --> 00:01:12,460
compute_triangular_form, which
we coded previously.

20
00:01:12,460 --> 00:01:16,680
This gives me a copy of the system in
triangular form, which is helpful,

21
00:01:16,680 --> 00:01:20,270
because I can then assume that
the system is in that form for

22
00:01:20,270 --> 00:01:22,080
all my later operations.

23
00:01:22,080 --> 00:01:25,360
Now go ahead and
finish coding compute_rref.

24
00:01:25,360 --> 00:01:27,890
So you can check your work,
I'll provide some test cases for

25
00:01:27,890 --> 00:01:31,700
you to run in the instructor notes
like we did for triangular form.

26
00:01:31,700 --> 00:01:35,020
If you need a hint,
the first portion of the solution video

27
00:01:35,020 --> 00:01:37,770
will contain pseudocode for
the main structure of the procedure.
