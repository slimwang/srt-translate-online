1
00:00:00,070 --> 00:00:03,640
With the blue function complete, the
interpreter jumps back out to where that

2
00:00:03,640 --> 00:00:07,240
function was called and
the current context moves out as well.

3
00:00:07,240 --> 00:00:10,850
Furthermore, this was all part
of the first call to newSaga,

4
00:00:10,850 --> 00:00:12,240
which is now completed.

5
00:00:12,240 --> 00:00:16,250
Running the red newSaga function
a second time would result in drafting

6
00:00:16,250 --> 00:00:21,760
a new separate red context, which
itself contained two new blue contexts.

7
00:00:21,760 --> 00:00:24,220
Almost all the exact
same steps would occur.

8
00:00:24,220 --> 00:00:26,810
And although they would
each happen one at a time,

9
00:00:26,810 --> 00:00:30,090
let's picture them all popping up at
once, so that we can see them without

10
00:00:30,090 --> 00:00:33,610
having to run the entire
simulation one line at a time.

11
00:00:33,610 --> 00:00:38,050
Notice that the values found in these
new contexts will be entirely different

12
00:00:38,050 --> 00:00:41,950
and it's actually stored in
an entirely newSaga variable.

13
00:00:41,950 --> 00:00:46,300
Although the second saga function was
created by the same lines of code

14
00:00:46,300 --> 00:00:47,950
that created the first one,

15
00:00:47,950 --> 00:00:51,500
the two would fail a triple
equals test that compared them.

16
00:00:51,500 --> 00:00:54,800
Creating two equivalent
looking functions, but

17
00:00:54,800 --> 00:00:57,630
have different identities,
is exactly like what

18
00:00:57,630 --> 00:01:01,790
happens when you see an array literal
appearing within a function definition.

19
00:01:01,790 --> 00:01:06,110
Calling that function twice creates
two different array objects.

20
00:01:06,110 --> 00:01:09,110
And so,
this line would log the value false

21
00:01:09,110 --> 00:01:13,280
because the two array objects do not
pass a triple equals comparison.

22
00:01:13,280 --> 00:01:16,500
The same would be true of
these two function objects,

23
00:01:16,500 --> 00:01:19,700
because they were created
by the same lines of code

24
00:01:19,700 --> 00:01:22,970
in two different invocations
of the newSaga function.

25
00:01:22,970 --> 00:01:27,230
What two strings do you think would be
logged as a result of this second call

26
00:01:27,230 --> 00:01:28,527
to the newSaga function?
