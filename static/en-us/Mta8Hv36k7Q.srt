1
00:00:00,200 --> 00:00:04,590
Now I'm going to give you another chance
to practice using vectorized operations.

2
00:00:04,590 --> 00:00:08,210
One question you'll often want
to answer in data analysis is,

3
00:00:08,210 --> 00:00:11,930
how does a single data point compare
to the rest of the data points?

4
00:00:11,930 --> 00:00:15,310
For example, I mentioned that I'm
interested in how the employment rate in

5
00:00:15,310 --> 00:00:18,470
the U.S. compares the the employment
rate in other countries.

6
00:00:18,470 --> 00:00:21,810
Is it higher or lower than the average,
and by how much?

7
00:00:21,810 --> 00:00:24,030
The question isn't very well-defined,
but

8
00:00:24,030 --> 00:00:28,210
one typical way that people use to
answer it, is to convert each data point

9
00:00:28,210 --> 00:00:31,690
to a number of standard
deviations away from the mean.

10
00:00:31,690 --> 00:00:33,490
This is called standardizing the data.

11
00:00:34,500 --> 00:00:37,230
For example, let's consider
the employment data we have for 2007.

12
00:00:37,230 --> 00:00:42,130
The mean employment rate was 58.6%,
the standard

13
00:00:42,130 --> 00:00:46,650
deviation was 10.5%, and the employment
rate in the United States was 62.3%.

14
00:00:46,650 --> 00:00:51,135
Then the difference between
the United States employment, and

15
00:00:51,135 --> 00:00:53,968
the mean employment rate was 3.7%.

16
00:00:56,404 --> 00:00:59,593
This is equal to about 0.35
standard deviations or

17
00:00:59,593 --> 00:01:02,560
about a third of a standard deviation.

18
00:01:02,560 --> 00:01:08,050
In Mexico on the other hand, the mean
employment rate in 2007 was 57.9%.

19
00:01:08,050 --> 00:01:12,460
Thus for Mexico the difference
between the employment rate and

20
00:01:12,460 --> 00:01:15,170
the mean employment rate was -0.7%.

21
00:01:15,170 --> 00:01:18,670
Note that I use a negative difference to
indicate a value that's below the mean,

22
00:01:18,670 --> 00:01:21,510
and a positive difference to indicate
a value that's above the mean.

23
00:01:22,520 --> 00:01:26,990
This translates to about 0.067
standard deviations below the mean,

24
00:01:26,990 --> 00:01:29,160
giving a standardized
score of negative 0.067.

25
00:01:29,160 --> 00:01:32,810
On the next screen,

26
00:01:32,810 --> 00:01:36,140
I'd like you to write a function that
takes a numpy array as an input.

27
00:01:36,140 --> 00:01:38,840
And the array could contain
any type of numerical data,

28
00:01:38,840 --> 00:01:41,420
such as employment data for example.

29
00:01:41,420 --> 00:01:43,850
Then I want you to return
a standardized array,

30
00:01:43,850 --> 00:01:47,600
where each data point has been replaced
by the standardized data point.
