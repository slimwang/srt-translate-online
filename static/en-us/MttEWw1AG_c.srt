1
00:00:00,350 --> 00:00:04,280
Optionals are also necessary for
downcasting in swift.

2
00:00:04,280 --> 00:00:06,520
Here's what I mean by downcasting.

3
00:00:06,520 --> 00:00:10,240
Occasionally objects are labeled
as members of a particular class.

4
00:00:10,240 --> 00:00:12,820
But can also act as
a member of a subclass,

5
00:00:12,820 --> 00:00:18,160
to downcast is to cast such an object
as an instance of its subclass.

6
00:00:18,160 --> 00:00:20,850
You'll see a lot of downcasting
with optionals when you start

7
00:00:20,850 --> 00:00:25,060
interacting with classes like UI
storyboard and the app delegate.

8
00:00:25,060 --> 00:00:27,540
But let's start with a simpler example.

9
00:00:27,540 --> 00:00:32,330
Here we have a beverage class with two
subclasses, hot drink and cold drink.

10
00:00:32,330 --> 00:00:34,740
We also have an array of beverages.

11
00:00:34,740 --> 00:00:36,190
Because there are both hot drinks and

12
00:00:36,190 --> 00:00:39,970
cold drinks in this array,
the array must be of class beverage.

13
00:00:39,970 --> 00:00:42,040
There are no mixed type arrays in Swift.

14
00:00:43,110 --> 00:00:46,230
Let's say we wanted to loop through
the array of beverages, And

15
00:00:46,230 --> 00:00:50,240
generate a message that will
offer each of the drink choices.

16
00:00:50,240 --> 00:00:53,760
When we loop through the array,
each item will be treated as a beverage.

17
00:00:54,870 --> 00:00:57,620
But we really want our message
to be more specific than that.

18
00:00:57,620 --> 00:01:01,920
It would be better if we could cast a
beverage as a hot drink or a cold drink.

19
00:01:01,920 --> 00:01:04,819
Before offering a drink to a guest.

20
00:01:04,819 --> 00:01:08,180
Now, there are two points here
I'd like you to remember.

21
00:01:08,180 --> 00:01:11,260
First focus on this piece of code here.

22
00:01:11,260 --> 00:01:14,440
When we grab a drink from the array
we don't know whether it can be

23
00:01:14,440 --> 00:01:16,400
cast to a cold drink or not.

24
00:01:16,400 --> 00:01:20,040
So we use an optional cast
with an as question mark.

25
00:01:20,040 --> 00:01:23,270
Also known as a type cast operator.

26
00:01:23,270 --> 00:01:26,970
By casting the item from the array
as an optional ColdDrink,

27
00:01:26,970 --> 00:01:30,990
we're saying this item could be
a ColdDrink or it could be nil.

28
00:01:30,990 --> 00:01:33,620
Here's the second point
I'd like you to remember.

29
00:01:33,620 --> 00:01:37,160
As we know, optionals can't be
used until they're unwrapped.

30
00:01:37,160 --> 00:01:40,690
So if you use the as question
mark typecast operator,

31
00:01:40,690 --> 00:01:43,240
you also have some unwrapping to do.

32
00:01:43,240 --> 00:01:47,700
Just like we've done previously with
other optionals we can use a flat.

33
00:01:47,700 --> 00:01:50,880
Remember that the if let construction
checks to see if an optional

34
00:01:50,880 --> 00:01:52,060
has a value.

35
00:01:52,060 --> 00:01:55,410
If it does have a value
this code gets executed and

36
00:01:55,410 --> 00:01:57,720
we can use cold drink in our message.

37
00:01:57,720 --> 00:02:01,210
If it doesn't have a value
the ELSE block is executed, and

38
00:02:01,210 --> 00:02:03,910
the beverages cast as a hot drink.

39
00:02:03,910 --> 00:02:07,150
And here in the sidebar we can
see those custom messages.

40
00:02:09,470 --> 00:02:12,360
But let's not forget about
the exclamation points.

41
00:02:12,360 --> 00:02:15,360
Although they are risky
they can also be convenient

42
00:02:15,360 --> 00:02:19,100
in cases where we're confident about the
identity of the object being downcast.

43
00:02:19,100 --> 00:02:22,030
Let's say we're a coffee shop.

44
00:02:22,030 --> 00:02:23,660
We only serve hot coffee.

45
00:02:23,660 --> 00:02:27,300
But for some reason a method from an
Apple library is returning in array of

46
00:02:27,300 --> 00:02:29,450
items of class beverage.

47
00:02:29,450 --> 00:02:31,360
If we never deal in cold drinks,

48
00:02:31,360 --> 00:02:35,210
we might boldly downcast
beverages to hot drinks using as!.

49
00:02:35,210 --> 00:02:41,010
As we know, optionals with exclamation
points automatically unwrap.

50
00:02:41,010 --> 00:02:42,800
So our downcasting work is done.

51
00:02:42,800 --> 00:02:44,000
No if let required.
