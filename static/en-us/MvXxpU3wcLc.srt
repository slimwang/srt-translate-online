1
00:00:00,000 --> 00:00:04,000
[Norvig] And before I do generator expressions, we're going to do list comprehensions.

2
00:00:04,000 --> 00:00:06,000
You've seen them before.

3
00:00:06,000 --> 00:00:11,000
We saw in Unit 1 we said that we could get the list of suits by saying

4
00:00:11,000 --> 00:00:14,000
[s for r, s in cards].

5
00:00:14,000 --> 00:00:21,000
And so the format here is we have the individual term of the list comprehension

6
00:00:21,000 --> 00:00:23,000
and here we have a for clause.

7
00:00:23,000 --> 00:00:26,000
And in general, we're going to have 1 for clause at least

8
00:00:26,000 --> 00:00:32,000
and then, optionally, we could have more here, either for or if clauses.

9
00:00:32,000 --> 00:00:35,000
And that's what a list comprehension looks like in general.

10
00:00:35,000 --> 00:00:37,000
Now, what does the list comprehension mean?

11
00:00:37,000 --> 00:00:43,000
This expression is similar to saying we're going to write out a loop where we say

12
00:00:43,000 --> 00:00:46,000
the result starts as the empty list,

13
00:00:46,000 --> 00:00:52,000
then we take the for part and then we take the term and append that into the result.

14
00:00:52,000 --> 00:00:57,000
And then when we're all done, result will hold the value of this expression.

15
00:00:57,000 --> 00:01:00,000
Now I'm going to show you a more complex list comprehension.

16
00:01:00,000 --> 00:01:05,000
Say we wanted the list of suits for all our face cards.

17
00:01:05,000 --> 00:01:12,000
Then we could say s for r, s in cards if the rank of the cards is, say,

18
00:01:12,000 --> 00:01:15,000
in jack, queen, king.

19
00:01:15,000 --> 00:01:18,000
I don't know why you'd want that, but there's a possibility.

20
00:01:18,000 --> 00:01:23,000
So I've got the term I'm building up, I've got 1 for loop controlling it,

21
00:01:23,000 --> 00:01:27,000
and now I've got an if statement, and that's as if we had written this code

22
00:01:27,000 --> 00:01:31,000
if we had inserted inside the for loop an if statement

23
00:01:31,000 --> 00:01:37,000
and then only done the appending of the term s if the if statement is true.

24
00:01:37,000 --> 00:01:42,000
And in general, we can have any number of for statements, if statements,

25
00:01:42,000 --> 00:01:44,000
more for statements, more if statements.

26
00:01:44,000 --> 00:01:49,000
We can keep on adding those for clauses and if clauses

27
00:01:49,000 --> 00:01:53,000
and intermingling them in any order we want,

28
00:01:53,000 --> 00:01:55,000
as long as the for clause comes first.

29
00:01:55,000 --> 00:01:59,000
And we can have that 1 big list comprehension, and that corresponds to

30
00:01:59,000 --> 00:02:03,000
putting in more fors and ifs here in this loop.

31
00:02:03,000 --> 00:02:08,000
The whole thing is read left to right except for the term.

32
00:02:08,000 --> 00:02:11,000
So the way to read a list comprehension is to say

33
00:02:11,000 --> 00:02:13,000
I'm going to ignore the first part for now,

34
00:02:13,000 --> 00:02:16,000
and then I think of it as saying it's a bunch of nested statements--

35
00:02:16,000 --> 00:02:19,000
for statements, if statements, for statements.

36
00:02:19,000 --> 00:02:21,000
They all get nested deeper and deeper.

37
00:02:21,000 --> 00:02:26,000
Then when I get to the end, the very last clause, now I'm appending together the term,

38
00:02:26,000 --> 00:02:28,000
so now read the term.

39
00:02:28,000 --> 00:02:32,000
And that's why it's okay that term here looks like it's referencing a variable s

40
00:02:32,000 --> 00:02:34,000
that hasn't been defined yet.

41
00:02:34,000 --> 00:02:37,000
That's okay because s has been defined here.

42
00:02:37,000 --> 00:02:40,000
And it looks like it's used before it's defined, but that's not the case,

43
00:02:40,000 --> 99:59:59,999
because when it's actually used is right down here at the end.
