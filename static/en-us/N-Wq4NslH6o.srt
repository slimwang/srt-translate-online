1
00:00:00,000 --> 00:00:02,000
So we've touched on Optimization--

2
00:00:02,000 --> 00:00:05,000
the notion that you could take part of one Abstract Syntax Tree

3
00:00:05,000 --> 00:00:08,000
and replace it with something else, in order to make the program faster

4
00:00:08,000 --> 00:00:10,000
or use less power.

5
00:00:10,000 --> 00:00:12,000
The cardinal rule of Optimization was:

6
00:00:12,000 --> 00:00:15,000
You can't change the meaning of the program.

7
00:00:15,000 --> 00:00:17,000
You have to respect the formal semantics

8
00:00:17,000 --> 00:00:19,000
or at least, that's what I've always told you.

9
00:00:19,000 --> 00:00:21,000
But what if we break that law?

10
00:00:21,000 --> 00:00:25,000
What if we want to change the meaning of a program?

11
00:00:25,000 --> 00:00:28,000
For example, what if your program currently has a bug

12
00:00:28,000 --> 00:00:31,000
and I want to change it so that the bug isn't there?

13
00:00:31,000 --> 00:00:33,000
What if I want to fix your program--

14
00:00:33,000 --> 00:00:37,000
Optimize it so that it is more correct,

15
00:00:37,000 --> 00:00:39,000
instead of being faster?

16
00:00:39,000 --> 00:00:42,000
I've worked on just this sort of research project.

17
00:00:42,000 --> 00:00:45,000
We call it Evolutionary Program Repair.

18
00:00:45,000 --> 00:00:49,000
It involves using genetic algorithms or genetic programming--

19
00:00:49,000 --> 00:00:53,000
computational analogs of Real World biological processes,

20
00:00:53,000 --> 00:00:55,000
like Crossover and Mutation.

21
00:00:55,000 --> 00:00:59,000
We maintain a population of candidate programs that may fix your bug--

22
00:00:59,000 --> 00:01:03,000
just like you can imagine a population of animals on an island

23
00:01:03,000 --> 00:01:05,000
and then survival of the fittest allows some of them to stay,

24
00:01:05,000 --> 00:01:08,000
and the rest to die out.

25
00:01:08,000 --> 00:01:10,000
If you're interested in this sort of research--

26
00:01:10,000 --> 00:01:12,000
I affectionately call it Building Skynet

27
00:01:12,000 --> 00:01:15,000
because we're building a program that builds other programs--

28
00:01:15,000 --> 00:01:17,000
there should be links below.

29
00:01:17,000 --> 00:01:19,000
But one of the things that I want you to take away

30
00:01:19,000 --> 00:01:21,000
is that the concepts that we're covering in this class--

31
00:01:21,000 --> 00:01:24,000
notions like Abstract Syntax Trees

32
00:01:24,000 --> 00:01:26,000
or replacing one expression with another--

33
00:01:26,000 --> 00:01:30,000
can be used in different contexts, to great effect.

34
00:01:30,000 --> 00:01:33,000
It just requires creativity to know when you can bend the rules

35
00:01:33,000 --> 00:01:35,000
without breaking them.

36
00:01:35,000 --> 99:59:59,999
That creativity is the essence of engineering.
