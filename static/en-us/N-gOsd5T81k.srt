1
00:00:00,000 --> 00:00:06,000
In this problem we've been asked to define a function, cfgempty,

2
00:00:06,000 --> 00:00:10,000
which takes in a representation of a context-free grammar,

3
00:00:10,000 --> 00:00:14,000
a starting state, and a list of visited states

4
00:00:14,000 --> 00:00:18,000
and determines whether or not that context-free grammar is empty.

5
00:00:18,000 --> 00:00:22,000
Just like regular languages, we define an empty grammar

6
00:00:22,000 --> 00:00:24,000
as one that accepts no strings.

7
00:00:24,000 --> 00:00:28,000
Worded the other way, the set of strings that the grammar accepts is empty.

8
00:00:28,000 --> 00:00:30,000
So what's an example?

9
00:00:30,000 --> 00:00:35,000
Say we have the grammar with symbol S and S goes to S with the terminal a.

10
00:00:35,000 --> 00:00:37,000
In order for the grammar to make a string,

11
00:00:37,000 --> 00:00:41,000
we have to be able to replace all of the non-terminals with terminals.

12
00:00:41,000 --> 00:00:47,000
In this case, you can only replace S with itself and another terminal,

13
00:00:47,000 --> 00:00:50,000
but you're never going to get to the point where the string that you're building up,

14
00:00:50,000 --> 00:00:54,000
the substitutions you make, results in a string that's only terminals.

15
00:00:54,000 --> 00:00:56,000
So we say this grammar is empty.

16
00:00:56,000 --> 00:00:59,000
We want to write a program that does this for us because, well,

17
00:00:59,000 --> 00:01:01,000
it can get pretty complicated.

18
00:01:01,000 --> 00:01:03,000
As is the case with most of these examples,

19
00:01:03,000 --> 00:01:06,000
we're going to use a recursive strategy.

20
00:01:06,000 --> 00:01:10,000
As I said before, our procedure takes in 3 inputs:

21
00:01:10,000 --> 00:01:15,000
the grammar, the symbol that we're on, and the symbols that we've visited.

22
00:01:15,000 --> 00:01:17,000
This is important so that we don't loop forever.

23
00:01:17,000 --> 00:01:21,000
An empty language is going to be one where we keep visiting the same states

24
00:01:21,000 --> 00:01:23,000
over and over again without ever finishing.

25
00:01:23,000 --> 00:01:27,000
So this is really crucial to making this function work.

26
00:01:27,000 --> 00:01:29,000
We're going to go through the grammar,

27
00:01:29,000 --> 00:01:33,000
visiting all the rules that apply and doing the rewrite,

28
00:01:33,000 --> 00:01:35,000
and we're going to have 2 base cases.

29
00:01:35,000 --> 00:01:39,000
One is that we visited this before, and this means we're going in a loop

30
00:01:39,000 --> 00:01:41,000
and so this is a dead end.

31
00:01:41,000 --> 00:01:45,000
We're going to return something that shows that this wasn't true.

32
00:01:45,000 --> 00:01:48,000
We're going to return the value None.

33
00:01:48,000 --> 00:01:51,000
That says that this grammar is indeed empty.

34
00:01:51,000 --> 00:01:55,000
If the symbol is a terminal, then the grammar isn't empty,

35
00:01:55,000 --> 00:01:57,000
or at least the grammar so far isn't empty.

36
00:01:57,000 --> 00:01:59,000
We're just going to return the terminal because that's an example

37
00:01:59,000 --> 00:02:02,000
where if you start from a terminal you get a terminal.

38
00:02:02,000 --> 00:02:06,000
It's an example where the grammar finishes, it produces a string.

39
00:02:06,000 --> 00:02:10,000
Otherwise, we're going to go through all the matching symbols,

40
00:02:10,000 --> 00:02:15,000
all the rules that apply, do the substitutions, and recurse.

41
00:02:15,000 --> 00:02:21,000
And if the recursion returns a not null value, it returns a string of terminals,

42
00:02:21,000 --> 00:02:24,000
we're going to return the string back.

43
00:02:24,000 --> 00:02:27,000
And if the grammar does accept any string,

44
00:02:27,000 --> 00:02:32,000
we're going to build it up, going back up through the recursive calls

45
00:02:32,000 --> 00:02:34,000
and return a string that is a member of this language.

46
00:02:34,000 --> 00:02:37,000
Let's go to the IDE and write it out.

47
00:02:37,000 --> 00:02:39,000
Here I've defined my function.

48
00:02:39,000 --> 00:02:42,000
As we described earlier, we've taken a grammar

49
00:02:42,000 --> 00:02:44,000
which is represented as a list of rewrite rules,

50
00:02:44,000 --> 00:02:49,000
we have the symbol that we're currently on, and we have a list of symbols that we've visited.

51
00:02:49,000 --> 00:02:53,000
If we've currently visited the symbol that we're on, we're going to return None.

52
00:02:53,000 --> 00:02:56,000
We didn't find a string that's a member of this language,

53
00:02:56,000 --> 00:03:00,000
and this is going to avoid infinite loops so that our program terminates.

54
00:03:00,000 --> 00:03:04,000
So before I go on, you might have noticed I use the built-in function any,

55
00:03:04,000 --> 00:03:07,000
which was given as a hint in the problem.

56
00:03:07,000 --> 00:03:09,000
Let's briefly go over it.

57
00:03:09,000 --> 00:03:15,000
Any takes in a list, and if any value in this list is true, any returns True.

58
00:03:15,000 --> 00:03:20,000
It only returns False if all the values in this list are false.

59
00:03:20,000 --> 00:03:22,000
Let's go back to the code.

60
00:03:22,000 --> 00:03:28,000
Going back to our list comprehension, we're going to create a list of true and false values.

61
00:03:28,000 --> 00:03:33,000
We're going to create a true value if there's a rewrite rule that applies to the symbol--

62
00:03:33,000 --> 00:03:36,000
in other words, if there's a rewrite rule where the left-hand side

63
00:03:36,000 --> 00:03:39,000
is the symbol that we're currently on.

64
00:03:39,000 --> 00:03:41,000
Otherwise, it's going to be false.

65
00:03:41,000 --> 00:03:45,000
This statement is essentially asking, "Is this symbol a terminal?"

66
00:03:45,000 --> 00:03:48,000
If no rewrite rules apply, we're going to say it's a terminal.

67
00:03:48,000 --> 00:03:52,000
And if it's a terminal, we're just going to return the current symbol we're on.

68
00:03:52,000 --> 00:03:55,000
That's the base case that we decided to do when we were sketching out this program.

69
00:03:55,000 --> 00:03:57,000
So those are our 2 base cases.

70
00:03:57,000 --> 00:04:00,000
Now we have to write the code that goes through the rewrite rules

71
00:04:00,000 --> 00:04:03,000
that apply to the non-terminal that we're on.

72
00:04:03,000 --> 00:04:08,000
We're going to update the list of visited symbols with the current visit symbol.

73
00:04:08,000 --> 00:04:15,000
Here we have a for loop that's going to go through every right-hand side of a rewrite rule

74
00:04:15,000 --> 00:04:18,000
that applies to the current symbol.

75
00:04:18,000 --> 00:04:21,000
This is going to give us every right-hand side

76
00:04:21,000 --> 00:04:24,000
where the left-hand side is the symbol.

77
00:04:24,000 --> 00:04:26,000
And the way it does that is it goes through the grammar,

78
00:04:26,000 --> 00:04:31,000
and if the left-hand side is our symbol, it's going to return the right-hand side.

79
00:04:31,000 --> 00:04:37,000
So this line asks the question, "Does every symbol in the right-hand side of our rule

80
00:04:37,000 --> 00:04:39,000
"result in a non-empty grammar?"

81
00:04:39,000 --> 00:04:43,000
And we determine that by calling cfgempty on every single symbol.

82
00:04:43,000 --> 00:04:47,000
We're using a list comprehension to create a list of true or false values

83
00:04:47,000 --> 00:04:52,000
that corresponds to whether the relative symbol is non-empty.

84
00:04:52,000 --> 00:04:54,000
It's true if it's non-empty.

85
00:04:54,000 --> 00:04:57,000
So if we're in the situation where we have a list of all true values,

86
00:04:57,000 --> 00:05:01,000
that means every symbol in the right-hand side is non-empty

87
00:05:01,000 --> 00:05:08,000
and the function all will return True in a similar way to any.

88
00:05:08,000 --> 00:05:13,000
But all, as opposed to any, returns True only if every element in the list is true.

89
00:05:13,000 --> 00:05:18,000
So if it's the case, we can get an example that proves that this context-free grammar

90
00:05:18,000 --> 00:05:20,000
isn't empty.

91
00:05:20,000 --> 00:05:24,000
So we create by going through each symbol in the right-hand side

92
00:05:24,000 --> 00:05:27,000
and building up our string and then returning it.

93
00:05:27,000 --> 00:05:30,000
If none of our rewrite rules terminated, then we're going to return None

94
00:05:30,000 --> 99:59:59,999
because we didn't find anything down this path.
