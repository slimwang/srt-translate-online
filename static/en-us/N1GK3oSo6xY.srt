1
00:00:00,450 --> 00:00:05,110
So far, air handling has come in
the form of .catches like this one.

2
00:00:05,110 --> 00:00:06,810
But there are actually other ways.

3
00:00:07,830 --> 00:00:10,615
These two chunks of code
are actually equivalent.

4
00:00:10,615 --> 00:00:17,950
.catch is just shorthand for .then
undefined and then a rejection function.

5
00:00:17,950 --> 00:00:21,540
Notice how, this then is
actually is taking two arguments.

6
00:00:21,540 --> 00:00:24,600
The full function signature for
then is actually this.

7
00:00:24,600 --> 00:00:25,245
In this form,

8
00:00:25,245 --> 00:00:30,460
if any previous promise is rejected,
the reject function gets called.

9
00:00:30,460 --> 00:00:32,860
If they resolve,
then the resolve function get's called.

10
00:00:33,900 --> 00:00:38,220
If there is no resolve function and
the promise before this then resolves,

11
00:00:38,220 --> 00:00:41,489
then this then gets skipped over and
the next then is called.

12
00:00:42,900 --> 00:00:45,620
In all cases,
as soon as a promise rejects,

13
00:00:45,620 --> 00:00:49,880
then the JavaScript engine skips to
the next reject function in the chain,

14
00:00:49,880 --> 00:00:52,976
whether that's in a .catch or a .then.

15
00:00:52,976 --> 00:00:55,740
So that means an error
here in this promise or

16
00:00:55,740 --> 00:00:58,885
here in this promise,
both get caught by this cache.

17
00:00:58,885 --> 00:01:05,660
Both methods .catch and .then with
two callbacks work equally well.

18
00:01:05,660 --> 00:01:09,010
However, it's actually recommended
that you use .catch when you can,

19
00:01:09,010 --> 00:01:11,570
because .catch is just
easier to read and

20
00:01:11,570 --> 00:01:16,690
write than a second .then call
back which can be hard to spot.

21
00:01:16,690 --> 00:01:19,850
In fact, you might not have
even noticed it right here.

22
00:01:19,850 --> 00:01:22,630
That being said,
there is a major difference

23
00:01:22,630 --> 00:01:26,190
in the execution order between
.catch and a second call back.

24
00:01:27,680 --> 00:01:31,480
Notice that you cannot call
both the resolve function and

25
00:01:31,480 --> 00:01:33,825
the reject function if they're
part of the same .then.

26
00:01:35,110 --> 00:01:38,150
Only one or the other, or
neither will get called.

27
00:01:38,150 --> 00:01:42,903
If something goes wrong with the resolve
function, you'll need another .catch or

28
00:01:42,903 --> 00:01:46,320
another .then,
farther down the line to catch it.

29
00:01:46,320 --> 00:01:48,600
But if you have .then and then a .catch.

30
00:01:48,600 --> 00:01:50,940
Each with their own resolve or
reject function.

31
00:01:50,940 --> 00:01:52,790
Both of them can possibly get called.

32
00:01:53,860 --> 00:01:56,810
And finally,
I want to make one more subtle point.

33
00:01:56,810 --> 00:02:00,570
It's also worth noting that
it isn't necessarily true,

34
00:02:00,570 --> 00:02:05,220
that passing a value to resolve
means that the promise succeeded.

35
00:02:05,220 --> 00:02:06,340
This is a subtle point.

36
00:02:06,340 --> 00:02:09,590
So go see Jake Archibald's blog
post in the instructor notes for

37
00:02:09,590 --> 00:02:10,258
more information.

38
00:02:11,300 --> 00:02:15,130
In the next quiz, you'll be thinking
through the flow of a chain of promises

39
00:02:15,130 --> 00:02:16,330
using different formats.
