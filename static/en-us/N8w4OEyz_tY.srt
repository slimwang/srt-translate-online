1
00:00:00,000 --> 00:00:03,000
Another question we've had, and we've had it a lot,

2
00:00:03,000 --> 00:00:07,000
is more information about the whole ancestor thing,

3
00:00:07,000 --> 00:00:12,000
how the ancestor part of a query works, what it means, and how to work with it.

4
00:00:12,000 --> 00:00:16,000
Okay, yes, I have seen that question a lot and I'll do my best to answer it.

5
00:00:16,000 --> 00:00:23,000
It's Google App Engine specific--the notion of ancestor paths and ancestor queries--

6
00:00:23,000 --> 00:00:26,000
but it has a couple of neat things.

7
00:00:26,000 --> 00:00:30,000
The question in the forums was about ASCII Chan in particular.

8
00:00:30,000 --> 00:00:40,000
We had a line that looks like this--db.key.from_path.

9
00:00:40,000 --> 00:00:42,000
Then from_path can take a couple of parameters.

10
00:00:42,000 --> 00:00:46,000
It can actually take, I think, as many as you want,

11
00:00:46,000 --> 00:00:48,000
but in this particular example, I just used two.

12
00:00:48,000 --> 00:00:52,000
It said like ASCII Chane--I'll just abbreviate it "AC"--

13
00:00:52,000 --> 00:00:56,000
and then I think I had the string "arts."

14
00:00:56,000 --> 00:01:02,000
So what this does is this actually creates a data store key for an object that doesn't exist.

15
00:01:02,000 --> 00:01:06,000
What I basically said is all of my arts are going to have this parent,

16
00:01:06,000 --> 00:01:14,000
and when I created arts--I think when I said something like a = Art,

17
00:01:14,000 --> 00:01:17,000
and then you'd have all those properties--

18
00:01:17,000 --> 00:01:21,000
I guess I should spell them out here. We have title.

19
00:01:21,000 --> 00:01:25,000
What did I call it? Actually like the content of the art.

20
00:01:25,000 --> 00:01:30,000
There are probably another parameter called "parent.

21
00:01:30,000 --> 00:01:37,000
Parents equals whatever this key. We'll call that k.

22
00:01:37,000 --> 00:01:39,000
I think it was a function call.

23
00:01:39,000 --> 00:01:41,000
What this does is this just store the art in a database,

24
00:01:41,000 --> 00:01:45,000
and it basically says its parent is this key.

25
00:01:45,000 --> 00:01:48,000
The parent is supposed to be another object, but in this case the object

26
00:01:48,000 --> 00:01:51,000
hasn't actually been created. It's just kind of reference to this fake object.

27
00:01:51,000 --> 00:01:54,000
This is purely for organizational purposes.

28
00:01:54,000 --> 00:01:57,000
There are a couple handy things you can do with this.

29
00:01:57,000 --> 00:02:02,000
The first is what I was doing in ASCII Chan, which is when you're doing a query,

30
00:02:02,000 --> 00:02:07,000
you can say--you have your select statement or you can be doing it procedurally.

31
00:02:07,000 --> 00:02:10,000
You know how to run queries at this point.

32
00:02:10,000 --> 00:02:13,000
You store this is a string and you run it. Whatever.

33
00:02:13,000 --> 00:02:22,000
Select * from Arts, and then one of the constraints on this query is where ancestor

34
00:02:22,000 --> 00:02:24,000
equals something.

35
00:02:28,000 --> 00:02:32,000
In this case, where ancestor equals this k, this key.

36
00:02:32,000 --> 00:02:37,000
What that does is it gives you this property in datastore

37
00:02:37,000 --> 00:02:40,000
that the query will be consistent.

38
00:02:40,000 --> 00:02:42,000
That means when you've inserted with this parent and then you immediately

39
00:02:42,000 --> 00:02:46,000
do a select *, if I didn't have this where ancestor equals k,

40
00:02:46,000 --> 00:02:50,000
there's a chance I might not actually get the element I just inserted,

41
00:02:50,000 --> 00:02:55,000
because of the way datastore works with possibly being stored over multiple machines

42
00:02:55,000 --> 00:02:57,000
and sharded and all of that.

43
00:02:57,000 --> 00:03:00,000
What Google is doing there isn't entirely transparent to us,

44
00:03:00,000 --> 00:03:04,000
but one of the things they say in their docs is that if you include this constraint,

45
00:03:04,000 --> 00:03:11,000
ancestor equals something and that happens to be an ancestor of the object you're looking for,

46
00:03:11,000 --> 00:03:15,000
the query will be consistent. That's all I was doing there.

47
00:03:15,000 --> 00:03:18,000
If you look at the datastore docs, if you go to that "hello, world" example

48
00:03:18,000 --> 00:03:21,000
in the datastore docs, it'll actually explain that a little bit,

49
00:03:21,000 --> 00:03:23,000
and that's what I was basing this on.

50
00:03:23,000 --> 00:03:28,000
Now, this came up again in the final for doing the wiki.

51
00:03:28,000 --> 00:03:34,000
One of the ways that I decided to do the history is I made every page,

52
00:03:34,000 --> 00:03:41,000
every path--basically URL path, like every wiki page in my program--

53
00:03:41,000 --> 00:03:44,000
basically be its own path here.

54
00:03:44,000 --> 00:03:48,000
I would basically just say from path, I think I called it wiki,

55
00:03:48,000 --> 00:03:50,000
and then I would actually have the URL.

56
00:03:50,000 --> 00:03:54,000
Then each version of the page was another object with that parent.

57
00:03:54,000 --> 00:03:58,000
So when I did a wiki page--if you're just viewing the page, I would just say,

58
00:03:58,000 --> 00:04:04,000
okay, get me all of the children of this parent, and I'll take the most recent one

59
00:04:04,000 --> 00:04:07,000
to actually show the page, and then when you click on the history view,

60
00:04:07,000 --> 00:04:10,000
I just say, give me all the children of this parent.

61
00:04:10,000 --> 00:04:14,000
That's how I did the version history thing, and that actually made it really easy to do,

62
00:04:14,000 --> 00:04:18,000
using datastore. This is a concept that only exists in datastore, though.

63
00:04:18,000 --> 00:04:23,000
This whole parent ancestor query is where you specify the ancestor thing.

64
00:04:23,000 --> 00:04:27,000
So it's actually as new to me as it is to you.

65
00:04:27,000 --> 00:04:30,000
But it helps you work around a few constraints that datastore has.

66
00:04:30,000 --> 00:04:36,000
I hope that helps. There is plenty of information in the Google datastore docs.

67
00:04:36,000 --> 00:04:40,000
That's what I'm basing most of what I'm telling you on, anyway, so I would suggest you check that out.
