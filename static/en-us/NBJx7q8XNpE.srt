1
00:00:00,440 --> 00:00:02,660
So the answers is, we need to change the three of these procedures.

2
00:00:05,490 --> 00:00:06,610
We need to change crawl web, we need to change add to

3
00:00:06,610 --> 00:00:10,210
index, and we need to change lookup. We don't need to change get

4
00:00:10,210 --> 00:00:12,490
all links at all, that we can keep exactly the same as it

5
00:00:12,490 --> 00:00:15,460
was. It just returns the list of links, it doesn't depend on the

6
00:00:15,460 --> 00:00:18,590
index. We don't need to change add page to index. This is

7
00:00:18,590 --> 00:00:23,220
a little more surprising since it depends on index, but because of the

8
00:00:23,220 --> 00:00:27,040
way we wrote add page to index, it calls add to index. So

9
00:00:27,040 --> 00:00:30,490
it doesn't depend how we actually represent the index. It's going to go through

10
00:00:30,490 --> 00:00:32,860
all the words add them to index by calling add to

11
00:00:32,860 --> 00:00:35,780
index. So we don't actually have to change that code. We

12
00:00:35,780 --> 00:00:39,060
do need to change the other two, so let's start with

13
00:00:39,060 --> 00:00:41,770
crawl web and figure out what we need to do to

14
00:00:41,770 --> 00:00:44,498
change this, to use a dictionary. And the change is actually

15
00:00:44,498 --> 00:00:48,570
going to be really small, right? The index is here, in the

16
00:00:48,570 --> 00:00:52,310
old version we initialize index to a list, to the empty

17
00:00:52,310 --> 00:00:55,640
list And all we do with index is pass it in

18
00:00:55,640 --> 00:00:58,540
to add page to index. So to change that to use

19
00:00:58,540 --> 00:01:02,020
a dictionary, all we need to do is change the square brackets

20
00:01:02,020 --> 00:01:04,620
to be curly brackets. So now, instead of starting with an empty

21
00:01:04,620 --> 00:01:08,170
list, we're going to start with an empty dictionary. So that's the only

22
00:01:08,170 --> 00:01:11,430
change we need to make to crawl_web. The change to add index

23
00:01:11,430 --> 00:01:13,790
is going to be a little more complicated. And we can see from

24
00:01:13,790 --> 00:01:16,920
the code to crawl_web, what happens with each page was that we

25
00:01:16,920 --> 00:01:20,590
call add to index, passing in index, which is now a dictionary.

26
00:01:20,590 --> 00:01:23,400
Let's look at add_page_to_index. I claimed that we didn't need to

27
00:01:23,400 --> 00:01:28,620
change that. Here's the code to add_page_to_index. And it takes the index.

28
00:01:28,620 --> 00:01:31,500
It goes through the words. It adds each word to the index.

29
00:01:32,730 --> 00:01:34,960
We can do this just the same whether index was a list

30
00:01:34,960 --> 00:01:37,000
or a dictionary. We don't need to change add page to

31
00:01:37,000 --> 00:01:40,270
index, we are going to need to change add to index. So

32
00:01:40,270 --> 00:01:42,350
we are going to need to change the code to add to

33
00:01:42,350 --> 00:01:45,590
index and lets try to figure out how. So before we had

34
00:01:45,590 --> 00:01:48,460
add to index, that takes an index, a keyword and a URL. We'll

35
00:01:48,460 --> 00:01:51,470
still take the same parameters but what we had to do when it

36
00:01:51,470 --> 00:01:54,810
was a list was go through all the entries in the index, check

37
00:01:54,810 --> 00:01:58,120
for each one, if it matches the keyword we're looking for. If we

38
00:01:58,120 --> 00:02:01,380
find that it does, then we add the URL. If we get to

39
00:02:01,380 --> 00:02:04,430
the end without finding it, then we append a new entry, which is

40
00:02:04,430 --> 00:02:08,100
the keyword with a list of URLs containing just the first URL. So

41
00:02:08,100 --> 00:02:11,870
let's figure out how to change this to work with the hash table index.

42
00:02:11,870 --> 00:02:14,130
So, the great thing about the hash table is we don't

43
00:02:14,130 --> 00:02:17,280
need to loop through anything now. We know exactly where it is

44
00:02:17,280 --> 00:02:21,430
from the hash table. With the dictionary, the built in in-operation

45
00:02:21,430 --> 00:02:24,350
gives us that. So instead of looping, now we can check right

46
00:02:24,350 --> 00:02:27,440
away if the keyword is in the index. So what's going to

47
00:02:27,440 --> 00:02:30,810
happen if we found the keyword in the index, that means that

48
00:02:30,810 --> 00:02:34,540
we can look it up. This will look up in the dictionary

49
00:02:34,540 --> 00:02:37,010
the entry that corresponds to the index. That's going to be the list

50
00:02:37,010 --> 00:02:43,670
of URLs that we have. And so all we need to do now is append to that entry the

51
00:02:43,670 --> 00:02:47,840
new URL. If it's not in the index already, well

52
00:02:47,840 --> 00:02:50,590
we need to do something different. What we did before

53
00:02:50,590 --> 00:02:54,870
was we added a new element to the index list

54
00:02:54,870 --> 00:02:57,200
using append. We don't want to do that now. We

55
00:02:57,200 --> 00:02:58,760
want to add a new key value paired to the

56
00:02:58,760 --> 00:03:02,560
dictionary. So we're going to do that by using the assignment.

57
00:03:02,560 --> 00:03:05,300
And the entry that we're adding is the list containing

58
00:03:05,300 --> 00:03:08,110
just this URL. So you can delete everything else here.

59
00:03:10,180 --> 00:03:12,880
Add the new entry to the keyword. So this is a

60
00:03:12,880 --> 00:03:16,220
lot simpler. We have less code. And it's going to run a lot

61
00:03:16,220 --> 00:03:19,610
faster. We don't have to loop through anything. Because of the hash

62
00:03:19,610 --> 00:03:22,240
table, we can right away look up whether the keyword is in

63
00:03:22,240 --> 00:03:25,530
the index, we can find if it is, what the value

64
00:03:25,530 --> 00:03:28,290
is, by using the dictionary lookup, and we can append the newer

65
00:03:28,290 --> 00:03:31,490
URL to the list of the URLs associated with that keyword. If

66
00:03:31,490 --> 00:03:36,320
it's not found, we can create a new entry, using the dictionary

67
00:03:36,320 --> 00:03:39,910
syntax, like this, that contains just that URL. So,

68
00:03:39,910 --> 00:03:42,070
now we've got a much simpler way to add

69
00:03:42,070 --> 00:03:45,620
to index. I hope you understand this. If you

70
00:03:45,620 --> 00:03:47,910
do, you should be able to define lookup yourself.
