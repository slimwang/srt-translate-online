1
00:00:00,000 --> 00:00:04,000
All right, so let's think this through, what's going on here. So going back to the formula for a second.

2
00:00:04,000 --> 00:00:12,000
Remember all the clauses end up being in these groups, so there's one clause for each node

3
00:00:12,000 --> 00:00:16,000
that says that that node has to have one of the k colors.

4
00:00:16,000 --> 00:00:19,000
That's going to total up to n clauses in the formula.

5
00:00:19,000 --> 00:00:26,000
Then, for each pair of colors, we have to exclude that they are both true for every nodes.

6
00:00:26,000 --> 00:00:32,000
This is for every node, for every pair of colors in the node, there's a clause.

7
00:00:32,000 --> 00:00:36,000
For every node, for every pair of colors, there's a clause. All right.

8
00:00:36,000 --> 00:00:41,000
And that covers making sure that there's a color assignment that make sense.

9
00:00:41,000 --> 00:00:49,000
Then for each color, for each edge in a graph, we have a clause

10
00:00:49,000 --> 00:00:54,000
that excludes that that color is shared on both ends of that graph.

11
00:00:54,000 --> 00:01:00,000
That's for each color, for each edge, we have a clause. So that ends up being the total.

12
00:01:00,000 --> 00:01:06,000
There's no other clauses that we need to consider here that captures the notion of k color ability.

13
00:01:06,000 --> 00:01:18,000
You can just plug these numbers in 8+(8<i>3</i>2/2) is 32, 3*20 is 60, 92 was what I get,

14
00:01:18,000 --> 00:01:22,000
but the important thing that I wanted you to get at is this formula here,

15
00:01:22,000 --> 00:01:26,000
which most importantly is polynomial in the size of the graph.

16
00:01:26,000 --> 00:01:31,000
We have a graph of a given size that from that we generate a formula

17
00:01:31,000 --> 00:01:34,000
and the formula has given size and that size is polynomial.

18
00:01:34,000 --> 00:01:39,000
That's good because then when we run--imagine that we have some kind of satisfiability algorithm

19
00:01:39,000 --> 00:01:45,000
that runs in polynomial time--it's running on a polynomial size input, so it's not like we're running

20
00:01:45,000 --> 00:01:49,000
a polynomial time algorithm on an exponential size input, which would take exponential time to run.

21
00:01:49,000 --> 00:01:53,000
This way, it really does run in polynomial time.
