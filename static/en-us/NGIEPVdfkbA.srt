1
00:00:00,460 --> 00:00:03,364
The demo performed 2 separate actions, selecting the object clicked on, and if

2
00:00:03,364 --> 00:00:06,268
any object was found, then the object itself was modified and the point clicked

3
00:00:06,268 --> 00:00:11,100
on was highlighted. Picking objects on the screen with a mouse is quite simple

4
00:00:11,100 --> 00:00:14,623
in Three.js. Here's the first half of the MouseDown function which sets up to

5
00:00:14,623 --> 00:00:19,800
perform picking. The bulk of the code fires a ray from the eye into the world.

6
00:00:19,800 --> 00:00:23,022
This is a common way to perform picking. WebGL itself is focused on rendering,

7
00:00:23,022 --> 00:00:26,978
so has no real support for picking in other forms of interaction. It's up to

8
00:00:26,978 --> 00:00:30,204
the program to figure this out. To form a ray from the eye through the screen

9
00:00:30,204 --> 00:00:35,050
we need two points. One's the eye's position in the world space, that's easy.

10
00:00:35,050 --> 00:00:37,882
The other is formed using a point on the screen, that point being locate

11
00:00:37,882 --> 00:00:41,557
wherever the user clicked the mouse. What we want to know is this point's

12
00:00:41,557 --> 00:00:45,611
location in world space. To do so we need to travel upstream, back along the

13
00:00:45,611 --> 00:00:49,181
chain of transformations: window coordinates to normalized device coordinates,

14
00:00:49,181 --> 00:00:54,735
to view, to world coordinates. Happily, Three.js makes this easy. How many

15
00:00:54,735 --> 00:00:57,882
times have I said that sentence during this course? The 2D point from the

16
00:00:57,882 --> 00:01:01,976
MouseDown event is a document object model screen coordinate. This is like a

17
00:01:01,976 --> 00:01:04,690
WebGL window coordinate, only y equals 0 is at the top edge of the screen

18
00:01:04,690 --> 00:01:09,272
instead of the bottom. The mouse vector code here converts from this screen

19
00:01:09,272 --> 00:01:12,440
coordinate system into normalized device coordinates, which go from -1 to 1 in

20
00:01:12,440 --> 00:01:17,410
x and y. The z value doesn't really matter. Any value from z equals -1 to 1

21
00:01:17,410 --> 00:01:21,613
will form a point on the ray. We next create a projector object. Really, it's

22
00:01:21,613 --> 00:01:24,913
better to create this object once during initialization and reuse it here, but

23
00:01:24,913 --> 00:01:29,205
I wanted to show the code all in one piece. The final line of code does the

24
00:01:29,205 --> 00:01:33,028
heavy lifting. It takes the NDC coordinate and forms a raycaster object from

25
00:01:33,028 --> 00:01:36,986
it. Ray casting is like ray tracing except you only trace rays from the eye

26
00:01:36,986 --> 00:01:41,314
into the scene and no further. No new rays are spawn from intersections. Once

27
00:01:41,314 --> 00:01:45,950
we have this raycaster object, we can perform picking, aslo called hit testing.

28
00:01:45,950 --> 00:01:49,665
It's one line of code to pick. You feed a list of objects into the raycaster

29
00:01:49,665 --> 00:01:53,596
and it returns an array of intersections. The If statement checks if the ray

30
00:01:53,596 --> 00:01:56,760
has anything in it. If it does then one or more intersections have been

31
00:01:56,760 --> 00:02:00,312
detected. These intersections are sorted front to back, so the first

32
00:02:00,312 --> 00:02:04,564
intersection on the list is the closest, which is usually the one we want. This

33
00:02:04,564 --> 00:02:07,416
first intersection has information about what the ray hit, including the

34
00:02:07,416 --> 00:02:12,040
object, face and the face's index in the object. We use the object parameter in

35
00:02:12,040 --> 00:02:16,275
the next slide to change the material to a random color. The intersects record

36
00:02:16,275 --> 00:02:20,138
also includes the distance and the point in world space. To show where the

37
00:02:20,138 --> 00:02:23,005
object was hit, we add a small sphere to the scene using this intersection

38
00:02:23,005 --> 00:02:26,510
point for its location. These are just examples, you can do whatever you like

39
00:02:26,510 --> 00:02:28,530
with the intersection information you get back.
