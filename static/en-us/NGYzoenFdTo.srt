1
00:00:00,360 --> 00:00:04,990
So now we come back to our original parallel program and the parallel program is

2
00:00:04,990 --> 00:00:09,710
making normal data accesses and synchronization accesses.

3
00:00:09,710 --> 00:00:11,315
There are different threads running on all these

4
00:00:11,315 --> 00:00:13,820
processors. They're all making these normal data

5
00:00:13,820 --> 00:00:17,630
accesses and synchronization accesses. And if the underlying

6
00:00:17,630 --> 00:00:20,990
memory model is an RC memory model, it

7
00:00:20,990 --> 00:00:25,810
distinguishes between normal data accesses and synchronization accesses.

8
00:00:25,810 --> 00:00:31,660
And it knows that if there are normal read/write data accesses, it doesn't have

9
00:00:31,660 --> 00:00:33,880
to do anything in terms of blocking

10
00:00:33,880 --> 00:00:37,970
the processes. It may start initiating coherence actions

11
00:00:37,970 --> 00:00:40,070
corresponding to these data accesses, but it

12
00:00:40,070 --> 00:00:43,100
won't block the processor for coherence actions

13
00:00:43,100 --> 00:00:47,410
to be complete until it encounters a

14
00:00:47,410 --> 00:00:50,770
synchronization operation, which is of the release category.

15
00:00:50,770 --> 00:00:53,090
If a synchronization operation which is a release

16
00:00:53,090 --> 00:00:56,959
operation hits this RC memory model, it's going

17
00:00:56,959 --> 00:00:59,350
to say, ah-ha. In that case all the

18
00:00:59,350 --> 00:01:01,880
data accesses that I've seen from this guy, I

19
00:01:01,880 --> 00:01:04,300
want to make sure that they're all complete

20
00:01:04,300 --> 00:01:08,650
globally, communicated to all the processors. It's going to

21
00:01:08,650 --> 00:01:12,095
ensure that before allowing the synchronization operation to

22
00:01:12,095 --> 00:01:15,783
complete. So the coherence action is only when the

23
00:01:15,783 --> 00:01:17,120
lock is released.
