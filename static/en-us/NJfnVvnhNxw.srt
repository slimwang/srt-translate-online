1
00:00:00,030 --> 00:00:01,450
The second common architecture for

2
00:00:01,450 --> 00:00:05,400
Internet services is referred to
as functionally heterogeneous.

3
00:00:05,400 --> 00:00:08,720
In these kinds of architectures,
different nodes are designated to

4
00:00:08,720 --> 00:00:14,370
perform certain functions, or even to
see in the particular types of requests.

5
00:00:14,370 --> 00:00:18,000
For instance, the request may be divided
among the servers based on the request

6
00:00:18,000 --> 00:00:20,720
content, such as when the requests

7
00:00:20,720 --> 00:00:25,560
are divided based on the alphabetical
order of the requested file name.

8
00:00:25,560 --> 00:00:29,485
Or for a service such as eBay,
servers may be designated to perform

9
00:00:29,485 --> 00:00:32,791
browsing requests versus buying or
bidding requests.

10
00:00:32,791 --> 00:00:36,565
With this design, it is still
possible to have all of the data in

11
00:00:36,565 --> 00:00:41,070
some distributed, shared file system and
accessible to all of the nodes.

12
00:00:41,070 --> 00:00:45,866
But if the functions are somehow
designated to be executed only

13
00:00:45,866 --> 00:00:47,947
on some subset of the node,

14
00:00:47,947 --> 00:00:52,921
then it is possible that not all
of the data, not all of the state,

15
00:00:52,921 --> 00:00:58,360
will be necessary to be made available
across all nodes in the system.

16
00:00:58,360 --> 00:01:00,900
So there's some optimization
opportunities there.

17
00:01:00,900 --> 00:01:04,760
Clearly, one benefit of this approach is
that every single node in this system

18
00:01:04,760 --> 00:01:09,460
is more specialized for some of
the tasks that it performs, or for

19
00:01:09,460 --> 00:01:13,770
some of the state that it needs to
serve, and therefore, it is more likely

20
00:01:13,770 --> 00:01:18,820
that it will take advantage of some
benefits like caching and locality.

21
00:01:18,820 --> 00:01:21,170
There are also some obvious trade-offs.

22
00:01:21,170 --> 00:01:25,120
The first one is that the front end
will now need to be more complex

23
00:01:25,120 --> 00:01:30,340
because it will need to parse sufficient
portion of the incoming request so

24
00:01:30,340 --> 00:01:35,440
as to be able to figure out which
one of the underlying nodes

25
00:01:35,440 --> 00:01:37,680
this particular request
should be passed to.

26
00:01:37,680 --> 00:01:43,240
Second, the overall management of these
systems becomes more complex when nodes

27
00:01:43,240 --> 00:01:48,110
fail or when request rates increase,
and we need to add more machines,

28
00:01:48,110 --> 00:01:51,370
it is important to know what
kinds of machines to add.

29
00:01:51,370 --> 00:01:55,360
How to configure those machines,
what types of requests or

30
00:01:55,360 --> 00:01:59,280
tasks are those machines
suppose to be designated for.

31
00:01:59,280 --> 00:02:03,110
Also even if something changes in
the workload pattern and all of a sudden

32
00:02:03,110 --> 00:02:08,180
there are more requests of a certain
kind, then we have to reconfigure this.

33
00:02:08,180 --> 00:02:13,110
We can't just redirect those access of
requests to some of the other nodes if

34
00:02:13,110 --> 00:02:17,100
they are not capable of processing
those kind of actions or

35
00:02:17,100 --> 00:02:18,580
serving that kind of data.

36
00:02:18,580 --> 00:02:22,960
So that may even be the case if
the other nodes are otherwise idling.

37
00:02:22,960 --> 00:02:27,420
The result of that is that it is much
more easy in these kinds of environments

38
00:02:27,420 --> 00:02:32,730
to end up in situations in which
some of the nodes are hotspots, and

39
00:02:32,730 --> 00:02:36,680
then there are long backlogs of pending
requests for those kinds of nodes.
