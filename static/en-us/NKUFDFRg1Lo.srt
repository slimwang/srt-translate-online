1
00:00:00,990 --> 00:00:03,790
Now that we have our login sessions
in place, lets go ahead and

2
00:00:03,790 --> 00:00:07,360
make an actual button that the users
can click to log into our app.

3
00:00:07,360 --> 00:00:11,140
Create a new file in your templates
folder and name it login.html.

4
00:00:11,140 --> 00:00:13,615
Add some opening and closing html tags.

5
00:00:13,615 --> 00:00:18,085
And nested inside of them some opening
and closing head and body tags.

6
00:00:18,085 --> 00:00:20,333
Inside of the head tags,
I will add the following scripts.

7
00:00:20,333 --> 00:00:24,749
This will create an anonymous function
that inserts a script into the DOM of

8
00:00:24,749 --> 00:00:26,175
the login.html page.

9
00:00:26,175 --> 00:00:27,335
Now, inside the body,

10
00:00:27,335 --> 00:00:30,375
let's create a div to hold
the actual Google sign in button.

11
00:00:30,375 --> 00:00:33,635
Go ahead and
make the div ID equal to sign in button.

12
00:00:33,635 --> 00:00:37,210
Add a span with the following code
inside the div you just created.

13
00:00:37,210 --> 00:00:40,470
Let me point out some of the important
attributes inside this span tag.

14
00:00:40,470 --> 00:00:43,750
This data-scope parameter specifies
what Google resources we want to

15
00:00:43,750 --> 00:00:44,970
be able to access.

16
00:00:44,970 --> 00:00:49,590
Looking at the Google documentation for
OpenID, we see that this asks for

17
00:00:49,590 --> 00:00:54,120
the user's name, their profile picture,
and their email address.

18
00:00:54,120 --> 00:00:55,650
Which is enough information for
this project.

19
00:00:56,650 --> 00:01:00,260
Also be sure to replace your client
ID with the value that you generated

20
00:01:00,260 --> 00:01:03,460
when you registered your web
application with Google Plus.

21
00:01:03,460 --> 00:01:06,370
The data redirect URI
parameter sets a post message,

22
00:01:06,370 --> 00:01:08,000
enables the one-time use code flow.

23
00:01:09,078 --> 00:01:13,080
In this data-accesstype equal to offline
means that our server can make requests

24
00:01:13,080 --> 00:01:16,800
to the Google API server even
if the user is not logged in.

25
00:01:16,800 --> 00:01:18,970
The value of the data
cookie policy attribute,

26
00:01:18,970 --> 00:01:22,210
determines the scope of URIs
that can access the cookie.

27
00:01:22,210 --> 00:01:26,010
We use the single host origin, if our
website only has a single host name, and

28
00:01:26,010 --> 00:01:27,160
no subdomains.

29
00:01:27,160 --> 00:01:30,200
The data-callback parameter
specifies a callback function.

30
00:01:30,200 --> 00:01:31,200
If a user clicks and

31
00:01:31,200 --> 00:01:34,950
grants our application access to their
profile, this callback method is called,

32
00:01:34,950 --> 00:01:37,450
and given the one time use code,
along with an access token.

33
00:01:37,450 --> 00:01:40,380
And this data-approvalprompt
set equal to force

34
00:01:40,380 --> 00:01:43,760
means that our user has to login each
time we visit the login page, and

35
00:01:43,760 --> 00:01:46,130
doesn't check to see if
they're already logged in.

36
00:01:46,130 --> 00:01:49,230
This is useful for debugging your app,
but you should probably disable it in

37
00:01:49,230 --> 00:01:50,760
production since it
gets kind of annoying.

38
00:01:51,780 --> 00:01:56,090
Change the logout function so that now
it renders the login.html template.

39
00:01:56,090 --> 00:01:59,480
Save your changes and
visit the login.html page.

40
00:01:59,480 --> 00:02:01,809
Now we have a nice Google login for
our users to click.

41
00:02:03,380 --> 00:02:05,730
Once we're logged in, the button
doesn't do anything interesting,

42
00:02:05,730 --> 00:02:08,190
just yet, since we still
have to let our server know

43
00:02:08,190 --> 00:02:10,780
that the user has
successfully authenticated.

44
00:02:10,780 --> 00:02:12,120
We'll get to that in the next exercise.
