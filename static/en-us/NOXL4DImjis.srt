1
00:00:00,000 --> 00:00:04,000
[Evans] Here's 1 way to define find_element using index.

2
00:00:04,000 --> 00:00:07,000
In the case where the element does exist in p,

3
00:00:07,000 --> 00:00:09,000
index gives us exactly the result we want.

4
00:00:09,000 --> 00:00:14,000
So we can use an if statement, check that t is in p using t in p,

5
00:00:14,000 --> 00:00:18,000
and then if it is, the block for the if returns that value.

6
00:00:18,000 --> 00:00:21,000
It returns p.index(t).

7
00:00:21,000 --> 00:00:24,000
For the else clause the element did not exist in p,

8
00:00:24,000 --> 00:00:26,000
so we return -1.

9
00:00:26,000 --> 00:00:30,000
Here's another way we might define find_element using index.

10
00:00:30,000 --> 00:00:34,000
Instead of checking if t is in p this time, we'll check if t is not in p.

11
00:00:34,000 --> 00:00:38,000
If t is not in p, then we know the result is -1.

12
00:00:38,000 --> 00:00:40,000
We can return -1 right away.

13
00:00:40,000 --> 00:00:43,000
If we reach the next statement, then we know that t is in p

14
00:00:43,000 --> 00:00:47,000
and we can return the result of p.index, passing in t.

15
00:00:47,000 --> 00:00:50,000
So we've seen 4 different ways to define the find_element method.

16
00:00:50,000 --> 00:00:54,000
They all have the same behavior, but we've defined it once with a while loop,

17
00:00:54,000 --> 00:00:58,000
once with a for-loop, and 2 different ways using the index method.

18
00:00:58,000 --> 00:01:01,000
When we use index, we need to use an if statement as well

19
00:01:01,000 --> 00:01:04,000
to make sure that we produce the right result for the case where the element is not in p.
