1
00:00:00,400 --> 00:00:01,550
Hey, Jess.
Really nice job

2
00:00:01,550 --> 00:00:03,060
helping them with the data structure.

3
00:00:03,060 --> 00:00:06,100
>> Yeah, so we wanted to create a word
class that has both translations for

4
00:00:06,100 --> 00:00:09,070
the English and Miwok of the same word.

5
00:00:09,070 --> 00:00:10,710
>> And this is like the floor plan or

6
00:00:10,710 --> 00:00:12,900
the blueprint analogy we
used in the last course.

7
00:00:12,900 --> 00:00:14,574
>> Exactly.
And so from the same fore-plan,

8
00:00:14,574 --> 00:00:16,452
we could create many
different word objects.

9
00:00:16,452 --> 00:00:17,160
>> Okay.

10
00:00:17,160 --> 00:00:18,518
[SOUND] Like this.

11
00:00:18,518 --> 00:00:22,310
This is a word object which
represents the number one.

12
00:00:22,310 --> 00:00:24,890
And inside the word object we
have two string variables.

13
00:00:24,890 --> 00:00:29,363
A string variable for Miwok translation
which is luti, and a string variable for

14
00:00:29,363 --> 00:00:31,580
the English translation which is one.

15
00:00:31,580 --> 00:00:33,855
>> And because this word object
was created from this word class,

16
00:00:33,855 --> 00:00:36,020
it's going to have these two methods.

17
00:00:36,020 --> 00:00:37,525
So, the getMiwokTranslation method.

18
00:00:37,525 --> 00:00:38,836
>> Which will translate this string.

19
00:00:38,836 --> 00:00:40,333
>> And getDefaultTranslation method.

20
00:00:40,333 --> 00:00:41,644
>> Which will translate this string.

21
00:00:41,644 --> 00:00:42,888
Okay, cool.

22
00:00:42,888 --> 00:00:44,490
That sounds good.

23
00:00:44,490 --> 00:00:48,380
>> All right, so from the same
fore-plan, we can create more and

24
00:00:48,380 --> 00:00:49,850
more words.

25
00:00:49,850 --> 00:00:54,760
So a word for two and a word for three.

26
00:00:54,760 --> 00:00:57,420
>> My gosh, how many words objects?

27
00:00:57,420 --> 00:00:58,699
>> All right, so in the next class,

28
00:00:58,699 --> 00:01:01,138
we're going to take a look at how
to write this class definition.

29
00:01:01,138 --> 00:01:02,760
>> Word.

30
00:01:02,760 --> 00:01:06,040
>> Or if you need help you can refer to
the simplified version of the TextView

31
00:01:06,040 --> 00:01:07,825
class that we showed
you in the last course.

32
00:01:07,825 --> 00:01:12,030
So, remember that we need to provide
a constructor for your word class.

33
00:01:12,030 --> 00:01:15,730
And the constructor just looks like
a method declaration, but the name of

34
00:01:15,730 --> 00:01:20,710
the method has to match exactly the name
of the class, capitalization and all.

35
00:01:20,710 --> 00:01:25,570
So in this case, we have the capital
T for text and capital V for

36
00:01:25,570 --> 00:01:30,490
view with no spaces, which matches
exactly the name of the class TextView.

37
00:01:30,490 --> 00:01:33,370
Also notice that the constructor
has no return type.

38
00:01:33,370 --> 00:01:36,929
Now looking more closely at
the constructor for the TextView class,

39
00:01:36,929 --> 00:01:38,902
we see it has the public keyword here.

40
00:01:38,902 --> 00:01:42,291
And this public keyword says that
an outside class can access this

41
00:01:42,291 --> 00:01:43,730
constructor.

42
00:01:43,730 --> 00:01:47,230
So for example,
an outside color like the MainActivity

43
00:01:47,230 --> 00:01:50,660
can call this constructor
using the new keyword and

44
00:01:50,660 --> 00:01:55,440
pass in this input parameter to
create a new TextView object.

45
00:01:55,440 --> 00:01:57,950
So note that you can create
multiple different constructors for

46
00:01:57,950 --> 00:02:01,280
your class that have
different input parameters.

47
00:02:01,280 --> 00:02:05,320
That way any outside color can create
a TextView object in a number of

48
00:02:05,320 --> 00:02:08,910
different ways depending on what
input parameters they can provide.

49
00:02:08,910 --> 00:02:09,883
Now in the next lesson,

50
00:02:09,883 --> 00:02:13,850
we'll see firsthand how you can create
multiple constructors for a class.

51
00:02:13,850 --> 00:02:16,960
So as mentioned earlier,
these private and

52
00:02:16,960 --> 00:02:20,330
public words are called
access variables.

53
00:02:20,330 --> 00:02:23,290
We first learned about
this in the last course.

54
00:02:23,290 --> 00:02:27,859
So they define who has access to
these methods or constructors or

55
00:02:27,859 --> 00:02:30,260
even this entire class.

56
00:02:30,260 --> 00:02:31,770
If a method is marked private,

57
00:02:31,770 --> 00:02:34,880
then it can only be called
within the enclosing class.

58
00:02:34,880 --> 00:02:39,870
So if something is marked public, it
can be accessed from outside the class.

59
00:02:39,870 --> 00:02:43,380
So if the MainActivity wants
to create a new text object,

60
00:02:43,380 --> 00:02:45,830
then it can because this
class is marked as public.

61
00:02:47,410 --> 00:02:49,120
And it also has a public constructor.

62
00:02:50,120 --> 00:02:53,629
And if any of these variables or
methods here are public,

63
00:02:53,629 --> 00:02:56,639
then the MainActivity can
call on those as well.

64
00:02:56,639 --> 00:02:59,750
All right, so here's a diagram from
the last course if you remember.

65
00:03:01,150 --> 00:03:03,870
If a TextView method
is marked as public,

66
00:03:03,870 --> 00:03:09,660
we can access it from both within
the TextView class or from outside.

67
00:03:09,660 --> 00:03:12,440
So something like
the MainActivity could access it.

68
00:03:14,490 --> 00:03:17,320
In general, it's better to make
the variables of the app, so

69
00:03:17,320 --> 00:03:20,510
those that control the state
of the object, to be private.

70
00:03:20,510 --> 00:03:23,750
This way you can expose
the public methods that modify or

71
00:03:23,750 --> 00:03:25,400
access these variables.

72
00:03:25,400 --> 00:03:27,889
So these methods are called getter and
setter methods.

73
00:03:29,160 --> 00:03:32,600
And they give you tighter control over
how these variables are modified or

74
00:03:32,600 --> 00:03:33,380
accessed.

75
00:03:33,380 --> 00:03:37,410
So for example, if these state
variables were marked as public,

76
00:03:37,410 --> 00:03:41,250
someone could set it invalid
color value on the TextView.

77
00:03:41,250 --> 00:03:44,240
And this would cause an unexpected
behavior in your class and

78
00:03:44,240 --> 00:03:45,740
maybe even cause your app to crash.

79
00:03:47,030 --> 00:03:48,260
Now in the other hand,

80
00:03:48,260 --> 00:03:52,780
if you have a private color variable
with a public setter method,

81
00:03:52,780 --> 00:03:57,110
you can check that the incoming color
is valid before updating the state.

82
00:03:57,110 --> 00:04:00,660
Now, go ahead and move on to the quiz
where you'll create the word class.
