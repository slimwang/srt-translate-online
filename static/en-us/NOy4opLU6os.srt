1
00:00:00,110 --> 00:00:03,250
Now that you know about branches and reachability, you know everything you

2
00:00:03,250 --> 00:00:07,560
need to, in order to understand the entire detached head message we saw earlier.

3
00:00:07,560 --> 00:00:11,290
Remember, to get this message, we checked out a commit, not a branch.

4
00:00:11,290 --> 00:00:13,660
Remember that head just means current commit.

5
00:00:13,660 --> 00:00:15,750
So head now points to this commit.

6
00:00:15,750 --> 00:00:17,630
First git says that you can look around and

7
00:00:17,630 --> 00:00:19,950
make experimental changes and commit them.

8
00:00:19,950 --> 00:00:22,250
You now know that git's history can be non-linear.

9
00:00:22,250 --> 00:00:25,990
So if you commit changes, they would look like what we saw before, here, and

10
00:00:25,990 --> 00:00:28,920
head would get updated to the commit that you just made.

11
00:00:28,920 --> 00:00:31,940
Next, it says that you can discard any commits that you make in this state

12
00:00:31,940 --> 00:00:34,040
without impacting any branches.

13
00:00:34,040 --> 00:00:38,300
Since this commit isn't included in any branches, it won't show up in git log.

14
00:00:38,300 --> 00:00:39,570
It's not reachable and

15
00:00:39,570 --> 00:00:42,790
the changes made here don't show up in any of the branches.

16
00:00:42,790 --> 00:00:45,960
And like we said before, if you then checked out an actual branch,

17
00:00:45,960 --> 00:00:49,060
it would basically be like this commit never existed.

18
00:00:49,060 --> 00:00:52,030
The next bit says that if you want to create a new branch to retain these

19
00:00:52,030 --> 00:00:54,900
commits you can do so by using this command.

20
00:00:54,900 --> 00:00:57,580
Git checkout -b new_branch_name.

21
00:00:57,580 --> 00:01:01,280
Running git checkout -b is equivalent to running two commands.

22
00:01:01,280 --> 00:01:05,069
First, its just like running git branch new_branch_name and

23
00:01:05,069 --> 00:01:08,140
then, running git checkout on that new branch.

24
00:01:08,140 --> 00:01:10,990
Since this sequence of commands is something that people will want to do pretty

25
00:01:10,990 --> 00:01:13,830
often, pretty much every time you're making a new feature,

26
00:01:13,830 --> 00:01:15,860
it's nice that there's this shortcut for it.

27
00:01:15,860 --> 00:01:19,120
If we do either version of these commands while we're still on this commit,

28
00:01:19,120 --> 00:01:20,960
then the new branch would be created here.

29
00:01:20,960 --> 00:01:23,600
Then any further commits will be on this new branch,

30
00:01:23,600 --> 00:01:26,910
since we already know that making new commits brings the branch with us.

31
00:01:26,910 --> 00:01:30,680
This last line just reminds us what commit we're on, making at as a shortened

32
00:01:30,680 --> 00:01:34,560
version of the commit ID, and then tells us what the commit message was.

33
00:01:34,560 --> 00:01:36,510
Great, now you understand the entire warning.
