1
00:00:00,480 --> 00:00:05,090
First, to get something on screen,
even if it's not the latest data,

2
00:00:05,090 --> 00:00:07,460
will pull data from the Cache.

3
00:00:07,460 --> 00:00:11,270
Like service workers themselves
getting data from the Cache object

4
00:00:11,270 --> 00:00:13,230
is a progressive enhancement, so

5
00:00:13,230 --> 00:00:17,950
we need to check if the Cache's object
is available in the global scope.

6
00:00:17,950 --> 00:00:22,010
If it is, we'll read the cached
weather data from there, and

7
00:00:22,010 --> 00:00:25,420
get something on screen
as quickly as possible.

8
00:00:25,420 --> 00:00:30,840
Next it's time to get the weather data
from the API with an ajax request.

9
00:00:30,840 --> 00:00:36,405
If you're feeling adventurous try
using the new fetch API, but remember

10
00:00:36,405 --> 00:00:41,215
you'll probably need to poly fill it so
that it works in all browsers.

11
00:00:41,215 --> 00:00:46,925
When they getForecast method fires,
it now makes two asynchronous requests.

12
00:00:48,035 --> 00:00:50,695
One that will try and
get data from the cache and

13
00:00:50,695 --> 00:00:53,055
one that will try and
make an ajax request.

14
00:00:54,560 --> 00:00:59,170
If there's data in the cache it
will be returned extremely quickly,

15
00:00:59,170 --> 00:01:01,410
usually within tens of milliseconds.

16
00:01:01,410 --> 00:01:05,300
Then when the ajax request
responds the card will be

17
00:01:05,300 --> 00:01:08,910
updated with the freshest data
direct from our weather API.

18
00:01:08,910 --> 00:01:09,470
Perfect.

19
00:01:09,470 --> 00:01:11,650
Well okay not quite.

20
00:01:11,650 --> 00:01:14,350
There is a potential race condition.

21
00:01:14,350 --> 00:01:19,110
What happens if the network
responds before the cache?

22
00:01:19,110 --> 00:01:23,320
When that happens the latest
data from the network could be

23
00:01:23,320 --> 00:01:26,450
clobbered by the older cached data.

24
00:01:26,450 --> 00:01:29,630
For a weather app that's
probably not a critical problem.

25
00:01:29,630 --> 00:01:34,100
You might be caught without an umbrella,
or you'll wear shorts on a cold day.

26
00:01:34,100 --> 00:01:37,375
But what about time sensitive
data like stock prices or

27
00:01:37,375 --> 00:01:39,590
a spreadsheet with financial data?

28
00:01:39,590 --> 00:01:44,307
In this case it's important to have
a flag indicating that there is

29
00:01:44,307 --> 00:01:46,414
a network request pending and

30
00:01:46,414 --> 00:01:50,980
only use the cache data if
the network request is still pending.

31
00:01:50,980 --> 00:01:55,959
That ensures that if the XHR responds
faster than the cache, the flag will

32
00:01:55,959 --> 00:02:00,720
prevent the cache from overwriting
the latest data from the network.
