1
00:00:00,230 --> 00:00:04,810
Next we will look at how the replacement
policy for the cache, which chooses,

2
00:00:04,810 --> 00:00:07,820
if you remember, which block to
kick out when we need more room,

3
00:00:08,880 --> 00:00:11,460
interacts with the hit
time of the cache.

4
00:00:11,460 --> 00:00:15,300
A simple replacement policy,
such as random,

5
00:00:15,300 --> 00:00:19,760
which randomly picks the block to
replace among those that are in the set,

6
00:00:19,760 --> 00:00:22,050
has nothing to update on a cache hit.

7
00:00:22,050 --> 00:00:23,200
When we have a cache hit,

8
00:00:23,200 --> 00:00:26,900
we don't have to do anything in
order to be later able to do random.

9
00:00:27,930 --> 00:00:30,870
When we have a miss, that's when
we start implementing our policy

10
00:00:30,870 --> 00:00:33,350
by randomly selecting
a block to kick out.

11
00:00:33,350 --> 00:00:37,150
This results in faster hits, because
there is nothing we need to do for

12
00:00:37,150 --> 00:00:40,270
the replacement policy when we
have a hit, and that's nice.

13
00:00:40,270 --> 00:00:44,960
However the random policy is not very
good for miss rate, because we often

14
00:00:44,960 --> 00:00:49,630
kick out blocks that we will very soon
need to use and we don't like that.

15
00:00:49,630 --> 00:00:55,600
In contrast, least recently used or LRU
results in a lower miss rate, which we

16
00:00:55,600 --> 00:01:00,520
like but we have to run every cache hit
update potentially a lot of counters.

17
00:01:00,520 --> 00:01:03,580
Even if we don't update them
we have to look at them.

18
00:01:03,580 --> 00:01:07,890
So there is a lot of activity on
every cache hit that results from

19
00:01:07,890 --> 00:01:12,590
leaving the state that we'll late use
to select the block we will kick up and

20
00:01:12,590 --> 00:01:17,270
this spends a lot of power and
also results in slower hits.

21
00:01:17,270 --> 00:01:23,300
To illustrate what happens on a cache
hit using LRU, let's look at a four-way

22
00:01:23,300 --> 00:01:28,620
set associative cache whose counters
are currently zero, one, two, and three.

23
00:01:28,620 --> 00:01:32,720
If the processor accesses
this one here and has a hit.

24
00:01:32,720 --> 00:01:37,500
The new values of the counters are going
to be this one becomes the most

25
00:01:37,500 --> 00:01:42,060
recently used And all of the other
counters get decremented.

26
00:01:42,060 --> 00:01:46,300
As you can see, all the counters have
changed and this happens on a cache hit.

27
00:01:46,300 --> 00:01:50,010
So a cache hit can result in
updating up to n counters,

28
00:01:50,010 --> 00:01:51,940
where n is our associativity.

29
00:01:51,940 --> 00:01:56,360
Let's look at what happens when one
of the more recently used blocks

30
00:01:56,360 --> 00:01:57,020
is accessed.

31
00:01:57,020 --> 00:02:01,660
Let's say we access not the most
recent used but the next one.

32
00:02:01,660 --> 00:02:05,870
In that case this becomes
the most recent used block.

33
00:02:05,870 --> 00:02:09,710
The counters that are larger
than this one get decremented so

34
00:02:09,710 --> 00:02:14,640
this becomes two and
the smaller than this stay the same.

35
00:02:14,640 --> 00:02:15,840
So we get this.

36
00:02:15,840 --> 00:02:18,480
So only two counters have changed now.

37
00:02:18,480 --> 00:02:22,810
But note that even though we have
only changed two counters, we had to

38
00:02:22,810 --> 00:02:26,730
actually check for each counter
whether it's lower than this or not.

39
00:02:26,730 --> 00:02:30,540
So even when we access the most
recently used block, and

40
00:02:30,540 --> 00:02:35,470
the counters don't change at all
because this becomes three and

41
00:02:35,470 --> 00:02:38,280
counters larger than it get decremented,
but

42
00:02:38,280 --> 00:02:43,760
there is nothing larger and this,
lower than it stayed the same.

43
00:02:43,760 --> 00:02:49,260
We still, had to determine that
this is the highest counter anyway,

44
00:02:49,260 --> 00:02:53,440
so that we don't decrement anything or
we had to actually check for

45
00:02:53,440 --> 00:02:55,580
each of these counters,
whether it's lower.

46
00:02:55,580 --> 00:02:59,600
So, one way or the other, even for
a hit to the most recently used blog,

47
00:02:59,600 --> 00:03:05,980
we have to do something and that again
slows down the hits and spends power.

48
00:03:05,980 --> 00:03:09,790
So what we want is a replacement policy

49
00:03:09,790 --> 00:03:13,860
that retains the miss
rate very close to LRU.

50
00:03:15,490 --> 00:03:18,250
Meaning we want to smartly
replace the blocks so

51
00:03:18,250 --> 00:03:22,140
that we can cut the block that
is unlikely to be used soon.

52
00:03:22,140 --> 00:03:24,900
Or the least likely to be its own, but

53
00:03:24,900 --> 00:03:28,890
we want to do less activity
on cache hits to do that.
