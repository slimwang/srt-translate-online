1
00:00:00,575 --> 00:00:05,726
RequestAnimationFrame should be your
go to tool for creating animations.

2
00:00:05,726 --> 00:00:08,430
Nobody likes to be interrupted
in the middle of a task, and

3
00:00:08,430 --> 00:00:10,770
the browser is no different.

4
00:00:10,770 --> 00:00:14,190
Remember how little time
the browser has to render the frame

5
00:00:14,190 --> 00:00:16,000
at 60 frames a second.

6
00:00:16,000 --> 00:00:18,660
If one second is a thousand
milliseconds and

7
00:00:18,660 --> 00:00:23,750
we have to fit 60 frames in,
well we have 16 milliseconds.

8
00:00:23,750 --> 00:00:25,030
Realistically though,

9
00:00:25,030 --> 00:00:29,320
there's some overhead to running a frame
and the browser has housekeeping to do.

10
00:00:29,320 --> 00:00:33,412
So we should aim for
about 10 milliseconds instead.

11
00:00:33,412 --> 00:00:37,530
The JavaScript part of your frame
should typically be kept around

12
00:00:37,530 --> 00:00:40,150
three to four milliseconds at most.

13
00:00:40,150 --> 00:00:43,730
Because there's going to be other work,
like style calculations,

14
00:00:43,730 --> 00:00:47,690
layer management, and
compositing that will come afterwords.

15
00:00:47,690 --> 00:00:51,140
I want you to imagine that the browser
is in the middle of doing some

16
00:00:51,140 --> 00:00:52,510
style work.

17
00:00:52,510 --> 00:00:56,900
And then, in comes some
JavaScript that needs attention.

18
00:00:56,900 --> 00:01:00,700
The browser now has to deal with
the JavaScript that just came in

19
00:01:00,700 --> 00:01:02,860
before it can move on to other tasks.

20
00:01:02,860 --> 00:01:07,350
That new JavaScript may cause the work
for the frame to be redone, and

21
00:01:07,350 --> 00:01:09,885
that could well mean missing the frame.

22
00:01:09,885 --> 00:01:13,090
RequestAnimationFrame schedules
your JavaScript

23
00:01:13,090 --> 00:01:16,410
to run at the earliest
possible moment in each frame.

24
00:01:16,410 --> 00:01:19,970
That gives the browser as much
time as possible to run your code,

25
00:01:19,970 --> 00:01:23,920
then style, then the layout,
painting, and compositing.

26
00:01:23,920 --> 00:01:29,700
A lot of older code around the web that
is used for animation, uses setTimeout

27
00:01:29,700 --> 00:01:34,390
or setInterval, because back in
the day that's all there was.

28
00:01:34,390 --> 00:01:39,420
In fact, jQuery still uses
setTimeout for its animation today.

29
00:01:39,420 --> 00:01:43,280
The problem with both of these
functions is that the JavaScript engine

30
00:01:43,280 --> 00:01:47,140
pays no attention to the rendering
pipeline when scheduling these.

31
00:01:47,140 --> 00:01:51,330
They're good functions to use when you
want to wait some time to elapse or do

32
00:01:51,330 --> 00:01:56,630
some repeated task every so often, but
they're not a good fit for animations.

33
00:01:56,630 --> 00:01:59,280
This is how you use
requestAnimationFrame.

34
00:01:59,280 --> 00:02:02,510
You make a call to it and tell it
which function you want it to call.

35
00:02:02,510 --> 00:02:05,250
That gets called where
you do your animation.

36
00:02:05,250 --> 00:02:07,680
And at the end of it you
schedule the next one.

37
00:02:07,680 --> 00:02:10,580
The browser takes care of
when it should run and how.

38
00:02:10,580 --> 00:02:14,295
Of the many browsers available to users
today, the only one that doesn't support

39
00:02:14,295 --> 00:02:17,190
requestAnimationFrame is
Internet Explorer 9.

40
00:02:17,190 --> 00:02:21,040
So, for that you'd need to use
a polyfill, which would use setTimeout.

41
00:02:21,040 --> 00:02:24,450
It's not ideal as a fall back,
but it will allow you at least to

42
00:02:24,450 --> 00:02:28,610
use requestAnimationFrame in your code
and not worry about compatibility.

43
00:02:28,610 --> 00:02:30,690
Check out the instructor notes for
more information.
