1
00:00:00,420 --> 00:00:05,210
With the help of jQuery selectors, you can select specific elements of the DOM.

2
00:00:05,210 --> 00:00:08,320
But, what if you wanted all the children of this div?

3
00:00:08,320 --> 00:00:10,290
How would you find them?

4
00:00:10,290 --> 00:00:13,790
Alternatively, what if you selected this div, but

5
00:00:13,790 --> 00:00:16,620
you wanted to inspect its parent element, this div?

6
00:00:16,620 --> 00:00:18,900
How would you find it?

7
00:00:18,900 --> 00:00:22,410
jQuery gives us DOM traversal methods for moving around the DOM tree.

8
00:00:22,410 --> 00:00:24,952
I'll start with parent.

9
00:00:24,952 --> 00:00:27,930
If I've selected the node with the ID Cameron,

10
00:00:27,930 --> 00:00:30,781
I can select my immediate parent by calling .parent.

11
00:00:30,781 --> 00:00:32,835
Dot parent goes up the DOM one level, so

12
00:00:32,835 --> 00:00:36,960
at this point I've selected the element with the ID Mark Suzanne.

13
00:00:36,960 --> 00:00:40,450
I could use .parents to select my parents, my grandparents, and

14
00:00:40,450 --> 00:00:42,010
my great grandparents.

15
00:00:42,010 --> 00:00:42,970
I could also filter for

16
00:00:42,970 --> 00:00:48,040
a specific parent by passing in another selector to the parents method.

17
00:00:48,040 --> 00:00:52,400
Say, for instance, I just wanted my grandparents, JerryJudy, I could pass

18
00:00:52,400 --> 00:00:56,780
JerryJudy with a pound sign into parents and then only have this node selected.

19
00:00:57,780 --> 00:01:02,170
It's important to note that parent will only go up a single level on the tree.

20
00:01:02,170 --> 00:01:05,920
If you need to go up more than just one level you need to use .parents; which

21
00:01:05,920 --> 00:01:07,980
will go all the way up to top of the DOM tree.

22
00:01:09,110 --> 00:01:13,087
I could go down the DOM too and select my children using .children.

23
00:01:13,087 --> 00:01:17,770
Dot children creates a jQuery collection of all of my immediate children,

24
00:01:17,770 --> 00:01:19,810
meaning that they're one level down in the DOM.

25
00:01:20,920 --> 00:01:24,180
But if I wanted my children's children, or any children of Taylor and

26
00:01:24,180 --> 00:01:28,250
Grant, if they existed in this example, I would have to use .find.

27
00:01:28,250 --> 00:01:30,110
Dot find goes down the DOM more than one level.

28
00:01:31,180 --> 00:01:35,450
Similar to parent and parents, jQuery provides a method that

29
00:01:35,450 --> 00:01:40,300
only traverses a single level deep in the tree, which is called .children.

30
00:01:40,300 --> 00:01:44,070
If you want to go deeper, there's a separate method called .find which will go

31
00:01:44,070 --> 00:01:46,350
many levels down on the DOM tree.

32
00:01:46,350 --> 00:01:48,490
Finally, there's .siblings.

33
00:01:48,490 --> 00:01:51,640
Dot siblings returns a jQuery collection of all of my siblings,

34
00:01:51,640 --> 00:01:53,380
meaning that we've got the same parent.

35
00:01:53,380 --> 00:01:55,670
In this case, Max and

36
00:01:55,670 --> 00:02:00,210
I both have the same parent so calling .siblings would return Max.

37
00:02:00,210 --> 00:02:03,180
And once again, I can pass a selector into siblings if I

38
00:02:03,180 --> 00:02:05,990
need to get more specific with my selection.

39
00:02:05,990 --> 00:02:09,240
Now, I want you to try out all of these DOM traversal methods with a quiz.
