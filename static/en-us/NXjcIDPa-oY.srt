1
00:00:00,590 --> 00:00:04,150
The next piece we'll add to our app
is a Leanback details fragment.

2
00:00:04,150 --> 00:00:07,550
When the user selects one of our movies,
we'd like to bring it front and center.

3
00:00:07,550 --> 00:00:10,400
And we'll use the details
fragment to do just this.

4
00:00:10,400 --> 00:00:12,600
The details fragment has three sections.

5
00:00:12,600 --> 00:00:16,309
The first is an overview row,
which contains text fields like a title,

6
00:00:16,309 --> 00:00:18,250
an author, and a description.

7
00:00:18,250 --> 00:00:20,010
Below that is an actions row.

8
00:00:20,010 --> 00:00:23,460
In our sample app, we've used the said
actions to watch a trailer, and

9
00:00:23,460 --> 00:00:25,160
to buy and rent movies.

10
00:00:25,160 --> 00:00:27,810
These actions of course,
are fully customizable.

11
00:00:27,810 --> 00:00:31,250
Finally, if you scroll down you
can see a list of related movies.

12
00:00:31,250 --> 00:00:32,420
Pretty cool, right?

13
00:00:32,420 --> 00:00:35,400
The details fragment works in a similar
way as the browse fragment in

14
00:00:35,400 --> 00:00:38,660
the previous lesson, it provides
the smooth animations and most of

15
00:00:38,660 --> 00:00:43,250
the functionality behind the scenes, all
we have to do is add our content to it.

16
00:00:43,250 --> 00:00:45,770
The pattern is the same as
in our previous lesson.

17
00:00:45,770 --> 00:00:48,250
First, we create
a details activity class.

18
00:00:48,250 --> 00:00:49,800
And it's only job will be to apply

19
00:00:49,800 --> 00:00:52,550
a layout that contains
the details fragment.

20
00:00:52,550 --> 00:00:56,540
As before, this layout does little else
except specify our details fragment.

21
00:00:56,540 --> 00:01:00,100
But before we see how that works,
let's look at how we can start it up.

22
00:01:00,100 --> 00:01:01,990
Here I am back in the browse fragment.

23
00:01:01,990 --> 00:01:05,319
When the user selects a movie,
we'd like to show our details fragment.

24
00:01:05,319 --> 00:01:07,980
And to do so, we're going to
add an ItemViewClickListener

25
00:01:07,980 --> 00:01:09,680
to the browse fragment.

26
00:01:09,680 --> 00:01:13,720
In the on activity created method,
uncomment set up event listeners.

27
00:01:13,720 --> 00:01:15,680
And let's see how that method works.

28
00:01:15,680 --> 00:01:18,210
Let's look inside
the ItemViewClickListener.

29
00:01:18,210 --> 00:01:20,080
We have two different types
of cards in our display,

30
00:01:20,080 --> 00:01:22,830
and this listener contains
logic to handle each.

31
00:01:22,830 --> 00:01:26,260
The important part is that if a movie's
clicked, we fire an intent to start up

32
00:01:26,260 --> 00:01:30,230
our details activity class, and we
include the selected movie as an extra,

33
00:01:30,230 --> 00:01:32,590
so we can retrieve it later
from our details fragment.

34
00:01:32,590 --> 00:01:35,670
The second listener on the browse
fragment is used to detect when a user

35
00:01:35,670 --> 00:01:37,190
selects a movie.

36
00:01:37,190 --> 00:01:39,100
These names can be
a little bit confusing, so

37
00:01:39,100 --> 00:01:42,530
by select, I actually mean
that certain card has focus.

38
00:01:42,530 --> 00:01:45,820
A neat trick is that inside this
listener we can update the background

39
00:01:45,820 --> 00:01:49,460
image of the browse fragment
to reflect the selected movie.

40
00:01:49,460 --> 00:01:51,850
To do so,
return to on activity created and

41
00:01:51,850 --> 00:01:55,070
uncomment prepared background manager,
and setupEventListeners.

42
00:01:55,070 --> 00:01:57,410
Let's run the project now and
see what we get.

43
00:01:57,410 --> 00:02:00,030
Here, you can see the background's
changing to reflect the currently

44
00:02:00,030 --> 00:02:01,460
selected card.

45
00:02:01,460 --> 00:02:02,900
Pretty cool, right?

46
00:02:02,900 --> 00:02:05,480
I won't go into the logic of how
the BackgroundManager, works but

47
00:02:05,480 --> 00:02:06,530
there is one note.

48
00:02:06,530 --> 00:02:08,139
Notice that if I scroll very quickly,

49
00:02:08,139 --> 00:02:10,258
the background doesn't
immediately change.

50
00:02:10,258 --> 00:02:13,290
Instead we wait for about a second
after a card has been selected

51
00:02:13,290 --> 00:02:14,990
before adjusting the background.

52
00:02:14,990 --> 00:02:16,860
This provides a much
smoother user experience.

53
00:02:17,920 --> 00:02:20,500
Now let's see how to set
up the details fragment.

54
00:02:20,500 --> 00:02:22,370
The pattern to set up
this class is pretty much

55
00:02:22,370 --> 00:02:24,040
the same as the browse fragment.

56
00:02:24,040 --> 00:02:28,280
I'll focus just on the new concepts, and
you can find more details in the notes.

57
00:02:28,280 --> 00:02:30,910
We'll start by populating
the DetailsOverviewRow,

58
00:02:30,910 --> 00:02:33,020
which is a class provided by Leanback.

59
00:02:33,020 --> 00:02:36,550
And this is going to contain the title,
the author, and the description.

60
00:02:36,550 --> 00:02:39,442
First, we'll pass it a reference
to the selected movie.

61
00:02:39,442 --> 00:02:43,320
The DetailsOverviewRow will store this
as an object that we can access later.

62
00:02:43,320 --> 00:02:44,945
Next we add actions.

63
00:02:44,945 --> 00:02:47,665
The actions class is also
provided by Leanback.

64
00:02:47,665 --> 00:02:49,755
To respond when one of our
action buttons is clicked,

65
00:02:49,755 --> 00:02:51,955
we'll setup all callback later on.

66
00:02:51,955 --> 00:02:55,575
First, it's important to understand
the DetailsOverviewRow will be presented

67
00:02:55,575 --> 00:02:57,850
by DetailsOverviewRowPresenter.

68
00:02:57,850 --> 00:02:59,840
Aren't Java naming
conventions just great?

69
00:02:59,840 --> 00:03:01,260
They're so concise.

70
00:03:01,260 --> 00:03:03,493
This presenter already knows
how to layout our actions row,

71
00:03:03,493 --> 00:03:05,470
because that's built in to Leanback.

72
00:03:05,470 --> 00:03:07,735
But we need to add our callbacks to it.

73
00:03:07,735 --> 00:03:10,870
Here's where we do that, and
take a look at how these are handled.

74
00:03:10,870 --> 00:03:13,840
The most important action starts
at the video playing activity

75
00:03:13,840 --> 00:03:15,790
via the play back overlay fragment.

76
00:03:15,790 --> 00:03:17,350
This is also provided by pingback,

77
00:03:17,350 --> 00:03:20,840
and we'll see how it works later in our
lesson on the Universal Media Player.

78
00:03:20,840 --> 00:03:23,590
Last, although our presenter
knows how to present actions,

79
00:03:23,590 --> 00:03:25,760
we have to tell it how
to display our movie.

80
00:03:25,760 --> 00:03:28,760
To do so,
we create a DetailsDescriptionPresenter.

81
00:03:28,760 --> 00:03:33,170
This is a very simple class, which binds
our movie data to the details fragment.

82
00:03:33,170 --> 00:03:34,630
One last new concept.

83
00:03:34,630 --> 00:03:37,600
Our details fragment uses two
different presenters, one for

84
00:03:37,600 --> 00:03:41,140
the overview row, and another for
the related videos row.

85
00:03:41,140 --> 00:03:44,560
And by the way, if you look through the
code, the related videos row is built

86
00:03:44,560 --> 00:03:47,870
identically to how a row of videos
was created in the browse fragment,

87
00:03:47,870 --> 00:03:50,270
by using list rows and
a ListRowPresenter.

88
00:03:50,270 --> 00:03:53,740
We'll need a way to collect these two
presenters into a single object adapter

89
00:03:53,740 --> 00:03:55,970
before passing them to
the browse fragment.

90
00:03:55,970 --> 00:03:59,090
And to do so,
we'll use a ClassPresenterSelector.

91
00:03:59,090 --> 00:04:02,400
This is a simple class that associates
presenters with the classes they should

92
00:04:02,400 --> 00:04:04,910
be used to present, like this.

93
00:04:04,910 --> 00:04:07,710
Once we created an ObjectAdapter
with our class presenter,

94
00:04:07,710 --> 00:04:10,830
we can add different types of objects to
it as long as it knows how to present

95
00:04:10,830 --> 00:04:12,280
these classes.

96
00:04:12,280 --> 00:04:15,310
And finally, we can set this
ObjectAdapter as the main adapter for

97
00:04:15,310 --> 00:04:16,820
the details fragment.

98
00:04:16,820 --> 00:04:18,990
Let's run the project now and
see what we get.

99
00:04:18,990 --> 00:04:21,490
Watch what happens if you
select an action now.

100
00:04:21,490 --> 00:04:23,250
Here the playback fragment appears.

101
00:04:23,250 --> 00:04:24,450
Pretty cool, right?

102
00:04:24,450 --> 00:04:27,220
Now, I know there was a lot of
code here and few new concepts.

103
00:04:27,220 --> 00:04:29,730
But if you think about how much
functionality you got in return,

104
00:04:29,730 --> 00:04:32,210
I hope you'll agree that
it's a good trade-off.

105
00:04:32,210 --> 00:04:33,590
And one last tip,

106
00:04:33,590 --> 00:04:36,860
here we use the Leanback support
library to build a catalog browser.

107
00:04:36,860 --> 00:04:37,970
But you could easily use it for

108
00:04:37,970 --> 00:04:40,270
something else other
than displaying movies.

109
00:04:40,270 --> 00:04:43,130
For example, you might have cards
that just play weather information,

110
00:04:43,130 --> 00:04:44,110
as in the Sunshine app.
