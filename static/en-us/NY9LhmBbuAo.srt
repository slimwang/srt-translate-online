1
00:00:00,690 --> 00:00:03,530
The code here inside the each
block is understandable because

2
00:00:03,530 --> 00:00:06,840
we've been working on this code for
a while, but if you take a step back and

3
00:00:06,840 --> 00:00:09,980
try looking at it as if you're
a new developer to the project

4
00:00:09,980 --> 00:00:12,110
this code isn't all that semantic.

5
00:00:12,110 --> 00:00:14,470
It doesn't describe what it is.

6
00:00:14,470 --> 00:00:17,266
What if we could replace
all this code with this?

7
00:00:17,266 --> 00:00:22,970
with Ember we can this is a special
kind of expression called a component.

8
00:00:22,970 --> 00:00:26,190
A component is powered by its
own template in JavaScript file.

9
00:00:26,190 --> 00:00:28,740
Let's create this menu item component.

10
00:00:28,740 --> 00:00:32,340
A requirement for components is that
their name has to have a dash in it, so

11
00:00:32,340 --> 00:00:36,740
we can't create an item component,
so let's name it menu item instead.

12
00:00:37,740 --> 00:00:41,690
This creates the component file that
lives in the components directory and

13
00:00:41,690 --> 00:00:44,640
a template file for the component that
lives in the components directory

14
00:00:44,640 --> 00:00:46,520
which is in templates.

15
00:00:46,520 --> 00:00:49,980
Converting this code to a component
will take several steps.

16
00:00:49,980 --> 00:00:53,350
First, we need to move
the HTML from here to here.

17
00:00:53,350 --> 00:00:54,570
Then we need to call the component.

18
00:00:55,840 --> 00:00:59,780
Think of a component as a closed box
where no information from the outside

19
00:00:59,780 --> 00:01:01,390
world can get in.

20
00:01:01,390 --> 00:01:04,050
So even though we're using
the ID invariable here,

21
00:01:04,050 --> 00:01:07,560
this item doesn't have any
connection with this one.

22
00:01:07,560 --> 00:01:10,160
So all of these look ups fail.

23
00:01:10,160 --> 00:01:13,320
We need to pass the variable on
the outside to the one on the inside.

24
00:01:14,930 --> 00:01:17,370
There, now the item
inside the commode and

25
00:01:17,370 --> 00:01:19,590
has its data passed in from the outside.

26
00:01:19,590 --> 00:01:21,890
And just so you know these two
don't need to be the same thing.

27
00:01:21,890 --> 00:01:27,070
I could have named this one food and
updated all of these to food too.

28
00:01:27,070 --> 00:01:29,180
And now this would still work.

29
00:01:29,180 --> 00:01:31,870
We still have one last step to
completely transition to using

30
00:01:31,870 --> 00:01:33,470
this component.

31
00:01:33,470 --> 00:01:35,760
Components are like
custom HTML elements, and

32
00:01:35,760 --> 00:01:38,450
have a default dom element of a div.

33
00:01:38,450 --> 00:01:40,450
We need to update that to a list item.

34
00:01:41,840 --> 00:01:45,859
In the component file, we need to add
a tag name property, and set it to li.

35
00:01:47,350 --> 00:01:49,150
Since the list item also has a class,

36
00:01:49,150 --> 00:01:51,880
we can give the component a class
with the class names array.

37
00:01:53,150 --> 00:01:57,350
The component will now automatically
be wrapped in an li with this class, so

38
00:01:57,350 --> 00:01:59,595
we can remove them from the template.

39
00:01:59,595 --> 00:02:02,435
Now we have a more semantic and
descriptive menu template.

40
00:02:02,435 --> 00:02:05,165
If a new developer comes along
the easily be able to understand

41
00:02:05,165 --> 00:02:06,405
what's going on.

42
00:02:06,405 --> 00:02:08,715
And if they want to alter
what html is being used for

43
00:02:08,715 --> 00:02:10,965
this menu item,
there's a dedicated template for that.
