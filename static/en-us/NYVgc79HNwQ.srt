1
00:00:00,008 --> 00:00:03,932
In Three.js there are a number of ways to set a color. See the additional course

2
00:00:03,932 --> 00:00:07,793
materials for a link to the documentation. We'll cover four of them here. You

3
00:00:07,793 --> 00:00:11,530
start by defining the material. We'll talk more later about what this material

4
00:00:11,530 --> 00:00:15,378
does. For now, just know that you can set a color for it. If you don't set any

5
00:00:15,378 --> 00:00:19,252
at all, the default is white. The MeshLambertMaterial object that you've just

6
00:00:19,252 --> 00:00:22,980
created has several different parameters. This can be set when you first create

7
00:00:22,980 --> 00:00:26,766
the object or later in a number of different ways. One of these parameters is

8
00:00:26,766 --> 00:00:31,285
the material's color. These parameters have type THREE.Color and you can use all

9
00:00:31,285 --> 00:00:35,344
the methods associated with it. One method is to set the r, g and b channels

10
00:00:35,344 --> 00:00:40,048
separately. Here I'm setting the color to red. This directly sets the variables

11
00:00:40,048 --> 00:00:44,518
r, g, and b in the color attribute to the desired values. I can also use the

12
00:00:44,518 --> 00:00:49,546
setRGB method on the color class, setting the color to orange. A more compact

13
00:00:49,546 --> 00:00:53,116
way to set a color is to use hexidecimal numbers. Here I'm setting a bright

14
00:00:53,116 --> 00:00:59,046
blue. The value 0x1280FF is a single number holding the red, green, and blue

15
00:00:59,046 --> 00:01:05,726
channels all together. Let's break it down. The 0x prefix means that this is

16
00:01:05,726 --> 00:01:12,204
hexidecimal number, base 16. Where the letter a means 10, b means 11, on up to f

17
00:01:12,204 --> 00:01:15,764
meaning 15. If you don't know about hexidecimals, see the additional course

18
00:01:15,764 --> 00:01:19,464
materials for a link to more information. 3 channels, r, g, and b, are each

19
00:01:19,464 --> 00:01:24,706
encoded in order. Trading each 2 digits as the channel's value. For example, the

20
00:01:24,706 --> 00:01:31,499
red channel is one two in hexadecimal. This means 1, 16 plus 2, to give 18 in

21
00:01:31,499 --> 00:01:38,342
decimal value. Green is computed in a similar fashion. 8 times 16 plus 0 gives

22
00:01:38,342 --> 00:01:46,024
the level of 128. Blue is at the maximum, ff, adding up to 255. Each of these

23
00:01:46,024 --> 00:01:50,368
values can range from 0 to 255. The range 0 to 255 is used, because most

24
00:01:50,368 --> 00:01:55,260
computer monitors have 8-bits of precision for each color channel. 2 to the 8th

25
00:01:55,260 --> 00:01:59,999
power is 256. So the range 0 to 255 is the entire range of possible color

26
00:01:59,999 --> 00:02:04,202
channel values. So, once you have a color you like, in Three.js, you can

27
00:02:04,202 --> 00:02:08,943
conveniently just paste it into place. In fact there's a way of initializing the

28
00:02:08,943 --> 00:02:13,076
material to color it when you create it. When you put something in braces like

29
00:02:13,076 --> 00:02:16,754
this, you're initializing that variable in the object to the given value. This

30
00:02:16,754 --> 00:02:20,262
particular hexidecimal value gives a yellow color. Note that the hexidecimal

31
00:02:20,262 --> 00:02:24,429
letters, such as the f's here, can be upper or lower case. It doesn't matter. I

32
00:02:24,429 --> 00:02:27,353
tend to use upper case as it makes it more readable.
