1
00:00:00,480 --> 00:00:03,719
Well, those are the diagrams types. I just wanted to repeat that

2
00:00:03,719 --> 00:00:07,560
no particular system that you develop is going to use all of them. And, in fact,

3
00:00:07,560 --> 00:00:11,370
you're probably going to concentrate on the most popular ones. But

4
00:00:11,370 --> 00:00:13,060
they're there in case you need them.

5
00:00:13,060 --> 00:00:18,450
I also want to mention two other features of UML that don't involve diagrams.

6
00:00:18,450 --> 00:00:21,313
[COUGH] One is the Object Constraint Language and the other one,

7
00:00:21,313 --> 00:00:25,980
I hinted tthat a few minutes ago, the Metamodel. The Object Constraint Language,

8
00:00:25,980 --> 00:00:30,570
and we'll devote a whole lesson to this, is a textual extension to UML's vis,

9
00:00:30,570 --> 00:00:35,370
visual notation. Its purpose is to provide a more precise specification,

10
00:00:35,370 --> 00:00:40,420
to be able to specify things which you can't specify in the diagrams themselves.

11
00:00:40,420 --> 00:00:47,660
You can use this textural extension as annotations to class model diagrams,

12
00:00:47,660 --> 00:00:51,706
and statechart diagrams. Essentially, the Object Constraint Language,

13
00:00:51,706 --> 00:00:55,880
this first-order predicate logic, plus the ability to navigate around

14
00:00:55,880 --> 00:01:00,940
the diagrams and some collection classes, like sets and, and bags and sequences.

15
00:01:02,200 --> 00:01:05,239
The overall purpose of the Constraint Language, Object Constraint Language,

16
00:01:05,239 --> 00:01:09,620
is to be very precise, if you need to, in the specifications of your system.
