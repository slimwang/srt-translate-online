1
00:00:00,170 --> 00:00:02,900
There's one other feature of cameras that I'm going to mention in passing here.

2
00:00:02,900 --> 00:00:06,764
Depth of field. This is the idea of simulating a real camera, where you can

3
00:00:06,764 --> 00:00:10,695
focus the lens to be at a particular distance. In depth of field algorithms,

4
00:00:10,695 --> 00:00:13,401
you control the focal distance and also how blurry objects will appear when not

5
00:00:13,401 --> 00:00:18,401
in focus. This type of algorithm is often done as a post-process. In other

6
00:00:18,401 --> 00:00:21,239
words, data is collected by rendering the scene, then image processing of some

7
00:00:21,239 --> 00:00:25,883
sort is used on this data to produce the final depth of field image. The

8
00:00:25,883 --> 00:00:28,384
difficult part is getting objects in the foreground to be blurry and also

9
00:00:28,384 --> 00:00:32,581
properly blend with the objects in focus behind them. 3JS has a demo showing a

10
00:00:32,581 --> 00:00:36,790
depth of field effect. It may show up a bit dark here. So see the additional

11
00:00:36,790 --> 00:00:40,320
course materials for the link and give it a try. It avoids the problem of

12
00:00:40,320 --> 00:00:43,811
blurry foreground objects by putting the focus nearby. So that only distant

13
00:00:43,811 --> 00:00:47,596
objects are fuzzy. There are other less expensive techniques you can do to get

14
00:00:47,596 --> 00:00:51,080
a depth of field effect. Here's a simple tilt shift post process that gives

15
00:00:51,080 --> 00:00:55,720
foreground and background blur. No scene information is used. A variable blur

16
00:00:55,720 --> 00:00:58,620
is just added to the top and bottom of the final image.
