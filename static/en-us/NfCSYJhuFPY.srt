1
00:00:00,280 --> 00:00:02,639
Up until now,
you've seen a lot of strings and

2
00:00:02,640 --> 00:00:06,009
characters, two examples of Swift Types.

3
00:00:06,009 --> 00:00:09,800
Let's talk about some of the other
commonly used Types in Swift,

4
00:00:09,800 --> 00:00:12,520
starting with Swift's primitive Types.

5
00:00:12,519 --> 00:00:15,359
Swift's primitive types
offer few surprises.

6
00:00:15,359 --> 00:00:18,439
Let's say we have a variable
representing whether a light is switched

7
00:00:18,440 --> 00:00:19,760
on or off.

8
00:00:19,760 --> 00:00:22,790
A Bool would be a good type
to represent the switch.

9
00:00:22,789 --> 00:00:26,750
Swift Booleans always have
a value of true or false.

10
00:00:26,750 --> 00:00:30,250
They can't be assigned to zero or
one as in C, or yes or

11
00:00:30,250 --> 00:00:33,689
no, as in Objective-C and
some other languages.

12
00:00:33,689 --> 00:00:36,710
For properties that need to
hold whole number values,

13
00:00:36,710 --> 00:00:40,230
we might want to use the int type,
which holds an integer, for

14
00:00:40,229 --> 00:00:42,699
example, if our light
switch had a dimmer.

15
00:00:42,700 --> 00:00:45,109
Here, I'll create a dimmer
with the type int, and

16
00:00:45,109 --> 00:00:47,030
I'll simulate sliding
the dimmer to seven.

17
00:00:48,820 --> 00:00:52,570
Although now that I think of it, I'd
really like to be able to set my dimmer

18
00:00:52,570 --> 00:00:57,579
to Pi, so I'll use a float instead of
an int to represent decimal places.

19
00:00:58,789 --> 00:01:03,219
If we use a double here, we can get
a more precise for a presentation of Pi.

20
00:01:03,219 --> 00:01:05,513
Here, I've carried it out to 11 digits.

21
00:01:05,513 --> 00:01:08,990
Between float and double you can
decide which type to use based

22
00:01:08,989 --> 00:01:10,530
on the level of precision you need.

23
00:01:11,540 --> 00:01:14,750
But there's a secret I
haven't revealed yet.

24
00:01:14,750 --> 00:01:18,689
See how I've indicated the type for
each of these variables?

25
00:01:18,689 --> 00:01:21,620
I can actually take all
these type indicators out,

26
00:01:21,620 --> 00:01:25,050
and the compiler has no trouble
inferring the correct type.

27
00:01:26,180 --> 00:01:29,670
You can see this by calling
the function typeOf,

28
00:01:29,670 --> 00:01:32,430
which tells you the type
that's being inferred.

29
00:01:32,430 --> 00:01:37,430
And we'll print it out, and here we can
see that the type of light switch on is

30
00:01:37,430 --> 00:01:43,880
a Bool, and we can see that the type
of very precise dimmer is a double.

