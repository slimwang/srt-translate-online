1
00:00:00,360 --> 00:00:03,299
Let's talk about a different
evaluation function.

2
00:00:03,299 --> 00:00:07,569
Let's use #my_moves- #opponents_moves.

3
00:00:08,589 --> 00:00:12,279
I really like the variance of this
function for simple isolation games.

4
00:00:12,279 --> 00:00:15,554
The point of isolation Is to
eliminate the opponent's moves.

5
00:00:15,554 --> 00:00:19,615
#my_moves- #opponents_moves causes
our computer player to seek moves

6
00:00:19,615 --> 00:00:24,414
with the most options, while trying to
get in the way of the opponent's moves.

7
00:00:24,414 --> 00:00:28,161
We can even weight the components to
the formula to try to encourage more

8
00:00:28,161 --> 00:00:30,417
aggressive or less aggressive game play.

9
00:00:30,417 --> 00:00:35,121
For example, #my_ moves- 2 *
#opponent_moves will cause our

10
00:00:35,121 --> 00:00:38,292
computer player to chase
after the opponent.

11
00:00:38,292 --> 00:00:39,823
>> That makes the examples you gave for

12
00:00:39,823 --> 00:00:42,269
the horizon effect
much more interesting.

13
00:00:42,270 --> 00:00:43,540
>> How so?

14
00:00:43,539 --> 00:00:47,289
>> Well, the winning move now has
the highest evaluation function result.

15
00:00:47,289 --> 00:00:51,259
Here's the winning move, and
the evaluation function now returns a 1.

16
00:00:51,259 --> 00:00:54,429
For the move immediately to the right,
results in a -2.

17
00:00:54,429 --> 00:00:58,369
The move to the far right returns a -1.

18
00:00:58,369 --> 00:01:01,439
And the far diagonal move returns a 0.

19
00:01:01,439 --> 00:01:03,059
>> Maybe that is the answer.

20
00:01:03,060 --> 00:01:04,939
Maybe keeping your options close, but

21
00:01:04,939 --> 00:01:07,989
your enemies closer,
is the right strategy in isolation.

22
00:01:07,989 --> 00:01:09,159
>> I'm not so sure.

23
00:01:09,159 --> 00:01:12,109
I think the only way to really
know is to try lots of variants of

24
00:01:12,109 --> 00:01:14,939
evaluation functions and
see which ones are the best.

25
00:01:14,939 --> 00:01:15,659
>> You're right.

26
00:01:15,659 --> 00:01:18,060
But in addition to minimax and
iterative deepening,

27
00:01:18,060 --> 00:01:21,998
there is one more trick we have to teach
that can really affect the efficiency of

28
00:01:21,998 --> 00:01:25,410
game tree search before we spend
time tuning the evaluation function.

