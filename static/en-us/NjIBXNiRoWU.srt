1
00:00:00,220 --> 00:00:03,020
Okay so, here's my implementation of the function. First what

2
00:00:03,020 --> 00:00:06,140
we do is we take we, we take this value H,

3
00:00:06,140 --> 00:00:08,950
which has this format and we split it on commas.

4
00:00:08,950 --> 00:00:10,830
And we take the first part of that we store that

5
00:00:10,830 --> 00:00:16,210
in val. And we say if H equals make_secure_val of

6
00:00:16,210 --> 00:00:20,590
val, return val. Val is, is what, is, is the, the,

7
00:00:20,590 --> 00:00:22,430
the s part of what we passed in, and we want

8
00:00:22,430 --> 00:00:25,240
to make sure that if we run this function on that

9
00:00:25,240 --> 00:00:28,310
value again, that we get, what we passed in to this

10
00:00:28,310 --> 00:00:32,640
function. I could've structured this differently. And looked at all of the

11
00:00:32,640 --> 00:00:35,540
parts of h, and then called hash_str again. But if we

12
00:00:35,540 --> 00:00:38,150
funnel everything through make_secure_val, updates to

13
00:00:38,150 --> 00:00:39,220
this function will be easier going

14
00:00:39,220 --> 00:00:43,150
forward. So, because I, I have the advantage of knowing if,

15
00:00:43,150 --> 00:00:44,760
what going forward is going to look like. So let's give this

16
00:00:44,760 --> 00:00:47,395
a test. The first thing we're going to do is we're going to call

17
00:00:47,395 --> 00:00:50,320
make_secure_val on, on some string. So we'll go ahead and give that

18
00:00:50,320 --> 00:00:53,480
a run. Okay, we've got the string and now I'm

19
00:00:53,480 --> 00:00:58,482
going to copy this, and we're going to replace this with check_secure_val.

20
00:00:58,482 --> 00:01:02,392
And we're going to pass in that string, and now we should

21
00:01:02,392 --> 00:01:05,970
see the output Udacity. And let's see if that's the case.

22
00:01:09,440 --> 00:01:13,600
Yes, we do. Udacity, that works. Now what happens if we if we modify this

23
00:01:13,600 --> 00:01:17,730
a little bit, you know, we add an extra exclamation mark? And, and I click Run.

24
00:01:20,460 --> 00:01:24,200
We get nothing back because Udacity didn't match

25
00:01:24,200 --> 00:01:27,270
the hash string. Likewise, if we restore our string

26
00:01:27,270 --> 00:01:29,160
and we change the hash, I'll just get rid

27
00:01:29,160 --> 00:01:31,740
of this character, then run it, we still have

28
00:01:31,740 --> 00:01:35,740
none. And I'll add that, that 2 back and

29
00:01:35,740 --> 00:01:37,290
run it again just to make sure everything's working,

30
00:01:37,290 --> 00:01:41,770
and we see Udacity. Okay, cool nice work. Let's

31
00:01:41,770 --> 00:01:43,330
go ahead and use these functions on our program.
