1
00:00:00,260 --> 00:00:04,080
Let's say we have an endpoint at
/puppies that returns a collection of

2
00:00:04,080 --> 00:00:07,600
puppies with their date of birth
in the format of month, date, and

3
00:00:07,600 --> 00:00:09,400
year, like so.

4
00:00:09,400 --> 00:00:12,510
Later on, we realize that we can
also include the information of

5
00:00:12,510 --> 00:00:14,580
the time of birth for each puppy.

6
00:00:14,580 --> 00:00:16,950
But we must change the format
of the date of birth like so.

7
00:00:18,200 --> 00:00:20,660
How do we add this feature
without causing problems for

8
00:00:20,660 --> 00:00:23,060
users already using our endpoint?

9
00:00:23,060 --> 00:00:25,720
Versioning allows you to make
new functionalities without

10
00:00:25,720 --> 00:00:28,800
breaking features for
users still using older implementations.

11
00:00:30,070 --> 00:00:32,259
If your application renders webpages and

12
00:00:32,259 --> 00:00:38,580
has API endpoints, specifying the API
in your URIs is also helpful for users.

13
00:00:38,580 --> 00:00:41,680
Another method of implementing
versioning is by including the version

14
00:00:41,680 --> 00:00:43,040
number in your HTTP header.

15
00:00:44,240 --> 00:00:46,450
GitHub implements versioning this way.

16
00:00:46,450 --> 00:00:49,910
Whichever method you choose, versioning
is an important consideration for

17
00:00:49,910 --> 00:00:52,650
your users as your application grows and
changes.
