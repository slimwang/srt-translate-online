1
00:00:00,000 --> 00:00:03,000
So now we're in pretty good shape, but there's one more thing that bothered me

2
00:00:03,000 --> 00:00:06,000
in the initial specification,

3
00:00:06,000 --> 00:00:09,000
and that was we said that if there's a tie, don't worry about it,

4
00:00:09,000 --> 00:00:13,000
or we claim that there won't be any ties, but there could be.

5
00:00:13,000 --> 00:00:17,000
And I would hate to have this program tell me I lost

6
00:00:17,000 --> 00:00:19,000
when I actually tied.

7
00:00:19,000 --> 00:00:21,000
I wouldn't mind it telling me I won when I actually tied,

8
00:00:21,000 --> 00:00:23,000
but I don't want it to tell me that I lost.

9
00:00:23,000 --> 00:00:27,000
What if I finally got a straight flush, ace high,

10
00:00:27,000 --> 00:00:30,000
only to find that another player had exactly the same hand

11
00:00:30,000 --> 00:00:32,000
but in a different suit?

12
00:00:32,000 --> 00:00:35,000
Well, if that happened in the Old West, you might expect some shots to be fired,

13
00:00:35,000 --> 00:00:38,000
but assuming there was no cheating going on,

14
00:00:38,000 --> 00:00:40,000
the 2 winners should split the pot equally.

15
00:00:40,000 --> 00:00:42,000
That's the way the rules of poker work.

16
00:00:42,000 --> 00:00:45,000
And the way our program would work is

17
00:00:45,000 --> 00:00:50,000
it would arbitrarily choose one of the maximums out of the 2 that tied.

18
00:00:50,000 --> 00:00:54,000
That doesn't seem fair, so to accommodate that idea,

19
00:00:54,000 --> 00:00:56,000
what do you think we can do?

20
00:00:56,000 --> 00:01:01,000
How are we going to handle ties?

21
00:01:01,000 --> 00:01:06,000
We could change the function hand_rank.

22
00:01:06,000 --> 00:01:09,000
We could change the function poker,

23
00:01:09,000 --> 00:01:13,000
or we could add a new function.

24
00:01:13,000 --> 00:01:16,000
And check which ones you think would work okay

25
00:01:16,000 --> 99:59:59,999
and which single one do you think would be best?
