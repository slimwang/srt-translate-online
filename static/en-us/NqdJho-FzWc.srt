1
00:00:00,000 --> 00:00:03,000
Some of you have been asking about syntax I've used in Python

2
00:00:03,000 --> 00:00:09,000
basically with these asterisks in function definitions and in function calls.

3
00:00:09,000 --> 00:00:14,000
I'll just show you some Python syntax that I've been using that is pretty helpful.

4
00:00:14,000 --> 00:00:20,000
One of the things we can do when we have a function definition--we'll call this function foo--

5
00:00:20,000 --> 00:00:24,000
it can take a variable number of arguments. This is a handy thing you can do in Python.

6
00:00:24,000 --> 00:00:28,000
The way you do this is you say " * ", and then you give it a variable name.

7
00:00:28,000 --> 00:00:30,000
Generally you say " * a".

8
00:00:30,000 --> 00:00:34,000
This basically says take all of the arguments passed into this function,

9
00:00:34,000 --> 00:00:38,000
all the unnamed arguments--we'll come back to the named arguments in a second--

10
00:00:38,000 --> 00:00:40,000
and store them in a tuple, and we'll call it "a."

11
00:00:40,000 --> 00:00:45,000
That means in this function foo we have a variable a,

12
00:00:45,000 --> 00:00:49,000
and if I were to return a and call foo, it would look something like this.

13
00:00:49,000 --> 00:00:56,000
If I called foo with no arguments, it would return just an empty tuple.

14
00:00:56,000 --> 00:01:07,000
If I were to call foo with the arguments (1, 2, 3), it would return a tuple of (1, 2, 3).

15
00:01:07,000 --> 00:01:14,000
If I were to change this to return a [0], and I were to call foo with (1, 2, 3) again,

16
00:01:14,000 --> 00:01:16,000
It would just return the number 1.

17
00:01:16,000 --> 00:01:21,000
This is a handy way of making a function that can take any number of arguments.

18
00:01:21,000 --> 00:01:26,000
Now, I used this in class in unit 3 when we were pulling a link out of the database--

19
00:01:26,000 --> 00:01:30,000
When we were pulling a link out of that SQL lite database in the IDE.

20
00:01:30,000 --> 00:01:34,000
What you get when you pull something out of the database is just a tuple of all the columns.

21
00:01:34,000 --> 00:01:37,000
I can pass that tuple into the link constructor to make a link object.

22
00:01:37,000 --> 00:01:39,000
That's what I was doing there.

23
00:01:39,000 --> 00:01:44,000
Now, something you've seen in my code looks something like this.

24
00:01:47,000 --> 00:01:55,000
I often have a function--I think in my code I have something that's like this--def render.

25
00:01:55,000 --> 00:01:58,000
Oops. No paren there.

26
00:01:58,000 --> 00:02:06,000
It may take *a and **kw--oops, two stars.

27
00:02:06,000 --> 00:02:10,000
In sketchpad, they edit all these mistakes out.

28
00:02:10,000 --> 00:02:16,000
Generally when you see this kind of construct in Python--*a, **kw--

29
00:02:16,000 --> 00:02:21,000
that means they're writing a function that adds a little bit of behavior to another function.

30
00:02:21,000 --> 00:02:26,000
So I have another function. I think it's some sort of Jinja rendering thing.

31
00:02:26,000 --> 00:02:30,000
Oh, I actually I think what we say is template.

32
00:02:30,000 --> 00:02:34,000
We have a template name. It's probably another argument in the function.

33
00:02:34,000 --> 00:02:44,000
We may say like t.render( *a, **kw ).

34
00:02:44,000 --> 00:02:47,000
Basically all this is doing is just taking the arguments from this function,

35
00:02:47,000 --> 00:02:49,000
the unnamed arguments and the named arguments--

36
00:02:49,000 --> 00:02:56,000
an named argument would be like x = 1 versus an unnamed argument would just be 1--

37
00:02:56,000 --> 00:02:59,000
and I'm passing those directly into another function.

38
00:02:59,000 --> 00:03:03,000
Probably what I did here in my render function in my code is I modified this kw argument.

39
00:03:03,000 --> 00:03:05,000
I added some parameters to it--that sort of thing.

40
00:03:05,000 --> 00:03:09,000
Basically now I have this function render, which does exactly what t.render does,

41
00:03:09,000 --> 00:03:12,000
except I've added more parameters to kw.

42
00:03:12,000 --> 00:03:15,000
Now, there are two uses of stars and star-star.

43
00:03:15,000 --> 00:03:19,000
One is in the function definition, which we talked about before, and the other is in the function call.

44
00:03:19,000 --> 00:03:23,000
If you have a tuple or a dictionary, and you put them in a function call

45
00:03:23,000 --> 00:03:29,000
with a star and a **kw, it breaks those data structures apart and passes them in as parameters,

46
00:03:29,000 --> 00:03:31,000
which is really handy.

47
00:03:31,000 --> 00:03:36,000
In a function definition, it basically takes all the parameters and puts them into a tuple.

48
00:03:36,000 --> 00:03:39,000
In a function call, it takes a tuple and turns them into function parameters.

49
00:03:39,000 --> 00:03:41,000
So it's a handy thing in Python.

50
00:03:41,000 --> 00:03:45,000
You see it all the time. Generally a and kw are the variable names you would use.

51
00:03:45,000 --> 00:03:48,000
But you can use whatever you want, and you can use them in other contexts

52
00:03:48,000 --> 00:03:50,000
like we did with the link database.

53
00:03:50,000 --> 00:03:52,000
I hope that helps.

54
00:03:52,000 --> 00:03:55,000
There is also, I believe, links on the forum to Python function calls

55
00:03:55,000 --> 00:04:00,000
that explain the syntax for you as well.
