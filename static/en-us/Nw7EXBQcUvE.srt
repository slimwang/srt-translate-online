1
00:00:00,000 --> 00:00:02,000
Let me walk you through one way to do this.

2
00:00:02,000 --> 00:00:06,000
As always, the most important part of a token definition

3
00:00:06,000 --> 00:00:09,000
is the regular expression that it corresponds to.

4
00:00:09,000 --> 00:00:13,000
Here we can optionally start with a minus sign.

5
00:00:13,000 --> 00:00:19,000
Then we definitely have one or more digits, 867, 3, 1.

6
00:00:19,000 --> 00:00:21,000
And then there's a big optional part.

7
00:00:21,000 --> 00:00:25,000
We can have a dot and then some number of digits after that.

8
00:00:25,000 --> 00:00:28,000
We could have the dot and then some number of digits.

9
00:00:28,000 --> 00:00:32,000
-1. is okay or 3.14159.

10
00:00:32,000 --> 00:00:36,000
Here we've got 5 trailing digits. Here we've got 0 of them.

11
00:00:36,000 --> 00:00:39,000
And this whole dot followed by digits is optional.

12
00:00:39,000 --> 00:00:44,000
But remember that the dot has special meaning in regular expressions,

13
00:00:44,000 --> 00:00:47,000
so I'm going to need to use a \ to escape it to say

14
00:00:47,000 --> 00:00:52,000
we literally mean the period and not any character.

15
00:00:52,000 --> 00:00:54,000
Then we turn that string into a floating point number.

16
00:00:54,000 --> 00:00:56,000
Then we return it.

17
00:00:56,000 --> 00:01:00,000
Just to walk through these again, this part, the optional minus sign,

18
00:01:00,000 --> 00:01:04,000
catches either this minus sign or the nothing that's in front of this 3.

19
00:01:04,000 --> 00:01:10,000
And this part here is this 1, this 3, or 867.

20
00:01:10,000 --> 00:01:15,000
This dot, literally a dot, is this dot, that dot,

21
00:01:15,000 --> 00:01:18,000
and I think there was one under here, and then this part

22
00:01:18,000 --> 00:01:23,000
is 14159, 5309,

23
00:01:23,000 --> 00:01:27,000
or the nothing that's here after this dot.
