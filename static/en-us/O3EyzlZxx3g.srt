1
00:00:00,290 --> 00:00:03,040
Now you've heard the term thread. Well, it's

2
00:00:03,040 --> 00:00:05,770
also used in the context of an operating

3
00:00:05,770 --> 00:00:08,430
system. What is the difference between a process

4
00:00:08,430 --> 00:00:12,110
and a thread? An analogy will help here. Let's

5
00:00:12,110 --> 00:00:15,170
say here is the morning newspaper. This morning

6
00:00:15,170 --> 00:00:19,550
newspaper lying on the dining table is like a

7
00:00:19,550 --> 00:00:22,630
program in memory. No life. I come to

8
00:00:22,630 --> 00:00:25,730
the dining table, pick up the newspaper, and particularly

9
00:00:25,730 --> 00:00:27,780
the sports section of the newspaper and start

10
00:00:27,780 --> 00:00:30,470
reading it. My starting to ready the sports section

11
00:00:30,470 --> 00:00:34,160
of the newspaper is akin to the operating system,

12
00:00:34,160 --> 00:00:37,650
giving life to the program by starting to execute

13
00:00:37,650 --> 00:00:45,150
it. So, now there is one life in the program. That is one line of control, that

14
00:00:45,150 --> 00:00:48,730
is coursing through the core and data structures of

15
00:00:48,730 --> 00:00:51,290
the program. This is what is called the thread

16
00:00:51,290 --> 00:00:54,470
of execution through the program. So we

17
00:00:54,470 --> 00:00:57,820
have one thread of control that is coursing

18
00:00:57,820 --> 00:01:01,510
through the program just as I am reading.

19
00:01:01,510 --> 00:01:04,610
A section of the newspaper. Now, my wife

20
00:01:04,610 --> 00:01:07,700
comes along, and being the more responsible one

21
00:01:07,700 --> 00:01:10,930
in the family picks up the business section

22
00:01:10,930 --> 00:01:14,120
and starts reading it. That's perfectly fine, depending

23
00:01:14,120 --> 00:01:16,770
on our interests, I'm reading the sports section.

24
00:01:16,770 --> 00:01:21,440
While wife is reading the business section, each is reading a different section

25
00:01:21,440 --> 00:01:24,680
of the same newspaper. similarly, we can

26
00:01:24,680 --> 00:01:29,110
have multiple lives, coursing through the program.

27
00:01:29,110 --> 00:01:35,940
Each blazing a completely different trail through the code and data structures

28
00:01:35,940 --> 00:01:41,790
of the program. Now each of this is a thread of control. Now could there

29
00:01:41,790 --> 00:01:45,050
be a conflict between these different threads

30
00:01:45,050 --> 00:01:48,720
of control? Sure. Both my wife and I

31
00:01:48,720 --> 00:01:50,210
may want to read the same section

32
00:01:50,210 --> 00:01:54,050
of the newspaper. That's a conflict. Similarly. The

33
00:01:54,050 --> 00:01:57,060
threads that are executig whitin the same

34
00:01:57,060 --> 00:02:01,270
program may wana read or update the same

35
00:02:01,270 --> 00:02:04,980
data structres. These are the issues that

36
00:02:04,980 --> 00:02:07,720
the operating system has to deal with, and

37
00:02:07,720 --> 00:02:12,330
this is what I meant when I said that te operating system is the

38
00:02:12,330 --> 00:02:16,190
orbiter for copleteing reqests for rescorces. Now

39
00:02:16,190 --> 00:02:21,190
generalizing it. A program can have several threads

40
00:02:21,190 --> 00:02:23,910
of control, and each thread of control

41
00:02:23,910 --> 00:02:27,050
maybe coursing through different sections of the

42
00:02:27,050 --> 00:02:32,850
program. And it could also be competing for the same section of the program as

43
00:02:32,850 --> 00:02:37,850
well as the same data structure in order to manipulate. Thus, a process. Is a

44
00:02:37,850 --> 00:02:41,030
program plus the state of all the

45
00:02:41,030 --> 00:02:44,670
threads that are executing within the program. Just

46
00:02:44,670 --> 00:02:51,080
as a single newspaper could be shared by me, my wife, and possibly my children.

47
00:02:51,080 --> 00:02:54,120
In a similar manner, a program may

48
00:02:54,120 --> 00:02:57,900
have multiple lives. That are coursing through it.

49
00:02:57,900 --> 00:03:03,700
And each is a bit of control, and the process is the program

50
00:03:03,700 --> 00:03:08,470
in execution, meaning it is the program plus the state of all the

51
00:03:08,470 --> 00:03:13,600
threads that are currently executing within this program. For example, if

52
00:03:13,600 --> 00:03:18,240
this program. Is a web browser. One thread in this

53
00:03:18,240 --> 00:03:23,200
program, could be fetching a page that I've requested from the

54
00:03:23,200 --> 00:03:27,880
remote server. And another thread could be painting the screen for me.
