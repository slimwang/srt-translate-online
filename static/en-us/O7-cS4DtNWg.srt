1
00:00:00,330 --> 00:00:05,590
So in this lesson, we will go through
several challenges that a many-core

2
00:00:05,590 --> 00:00:10,560
processor, that is a processor with
a very large number of cores, will face.

3
00:00:10,560 --> 00:00:14,250
The first challenge is that as
we grow the number of cores,

4
00:00:14,250 --> 00:00:17,540
the coherence traffic
between these cores goes up.

5
00:00:17,540 --> 00:00:22,840
And that is because we have already seen
that writes to shared memory locations.

6
00:00:22,840 --> 00:00:27,260
Resulting in validations and
subsequent misses on those locations.

7
00:00:27,260 --> 00:00:32,530
And both invalidations and the resulting
misses go onto the shared bus,

8
00:00:32,530 --> 00:00:35,320
and thus, add to this coherent traffic.

9
00:00:35,320 --> 00:00:39,490
As we increase the number of cores,
we get more writes per second.

10
00:00:39,490 --> 00:00:42,750
And, as a result,
the bus throughput that we need goes up,

11
00:00:43,810 --> 00:00:47,520
until it eventually exceeds
what we can do on a bus.

12
00:00:47,520 --> 00:00:52,280
Unfortunately, the bus allows us
to only do one request at a time.

13
00:00:52,280 --> 00:00:57,280
In part, that is needed because
we rely on the bus to produce

14
00:00:57,280 --> 00:01:01,350
the easy ordering that we get
between rides to maintain coherence.

15
00:01:01,350 --> 00:01:06,030
But that means that really the bus
eventually becomes the bottleneck.

16
00:01:06,030 --> 00:01:10,960
So, what we need is
a scalable on-chip network

17
00:01:10,960 --> 00:01:16,420
that allows the traffic to grow
as the number, of course, grows.

18
00:01:16,420 --> 00:01:20,420
And then we also need to
use directory coherence so

19
00:01:20,420 --> 00:01:26,280
that we don't rely on the bus
to serialize everything for us.
