1
00:00:00,400 --> 00:00:03,926
One way to think about this problem is the inverse. Which of these processes

2
00:00:03,926 --> 00:00:08,620
normally is done by a programmable shader? The illumination model is evaluated

3
00:00:08,620 --> 00:00:12,545
at the vertex or shader level. Similarly, the vertex shader performs model view

4
00:00:12,545 --> 00:00:16,699
transforms as well as perspective, though not the perspective divide. The

5
00:00:16,699 --> 00:00:20,980
Z-buffer is hardwired in. As this is a speed critical piece that is used by

6
00:00:20,980 --> 00:00:26,410
most 3D applications. It's evaluated outside of the fragment shader. Image

7
00:00:26,410 --> 00:00:29,270
post-processing, such as color correction and so on, is something that can be

8
00:00:29,270 --> 00:00:33,326
done in the fragment shader. Typically by rendering a full screen quadrilateral

9
00:00:33,326 --> 00:00:37,800
to drive the computations. Rasterization happens in between vertex and fragment

10
00:00:37,800 --> 00:00:42,580
shading, so it's performed by dedicated hardware. It's what generates the

11
00:00:42,580 --> 00:00:46,370
fragments for the fragment shader to process. Clipping is also hardwired and

12
00:00:46,370 --> 00:00:51,651
happens just after the vertex shader and before rasterization itself. The

13
00:00:51,651 --> 00:00:54,800
vertex shader outputs vertex locations and clipping space for this hardware to

14
00:00:54,800 --> 00:00:55,860
process.
