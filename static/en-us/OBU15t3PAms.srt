1
00:00:00,000 --> 00:00:03,000
The answer I'm looking for here is 10.

2
00:00:03,000 --> 00:00:05,000
Certainly if we're just going to rearrange these elements,

3
00:00:05,000 --> 00:00:10,000
the only way that these three elements can satisfy the heap property is if we put the 10 at the top

4
00:00:10,000 --> 00:00:15,000
and we can actually leave the 17 where it is and the heap property will still be maintained at this node.

5
00:00:15,000 --> 00:00:25,000
We'd swap the 10 and the 41 and now, this subtree may no longer have the heap property,

6
00:00:25,000 --> 00:00:28,000
but we can make a new picture that looks a little something like this

7
00:00:28,000 --> 00:00:32,000
where we have two smaller trees and these have to satisfy the heap property

8
00:00:32,000 --> 00:00:35,000
because the whole subtree that we had here used to satisfy it

9
00:00:35,000 --> 00:00:39,000
until we got that nice 10 out of the way and put in a nasty 41,

10
00:00:39,000 --> 00:00:44,000
but notice now we're in the same situation we were in a moment ago, but on a smaller scale.

11
00:00:44,000 --> 00:00:48,000
We have two subtrees that satisfy the heap property and a root that doesn't.

12
00:00:48,000 --> 00:00:52,000
We can now repeat this process pushing these nasty values

13
00:00:52,000 --> 00:00:56,000
down and down and deeper and deeper into the tree until they hit the bottom at a leaf

14
00:00:56,000 --> 00:01:00,000
at which point, it doesn't matter how bit they are, the leaves can be very, very large.
