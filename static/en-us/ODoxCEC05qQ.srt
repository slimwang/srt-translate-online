1
00:00:00,080 --> 00:00:04,230
Okay, to check your understanding of
this, let me ask a couple questions.

2
00:00:04,230 --> 00:00:07,180
First of all, what is the specifications
say if x is the empty vector?

3
00:00:08,480 --> 00:00:13,150
>> So if x is the empty vector,
then y is also the empty vector.

4
00:00:13,150 --> 00:00:14,470
They're equal.

5
00:00:14,470 --> 00:00:16,050
>> Okay, they have the same elements.

6
00:00:16,050 --> 00:00:17,000
Right?
And in fact,

7
00:00:17,000 --> 00:00:20,620
there was a special case that
checked exactly that thing.

8
00:00:20,620 --> 00:00:21,480
Okay?

9
00:00:21,480 --> 00:00:23,130
Here's a little bit trickier one.

10
00:00:23,130 --> 00:00:27,880
What happens if the first element
of X appears in more than one place

11
00:00:27,880 --> 00:00:28,490
in the output.

12
00:00:28,490 --> 00:00:32,920
>> I feel like we're still covered
because the way that we defined it.

13
00:00:34,150 --> 00:00:39,410
We know that for this element that
does exist in x there's a place in y

14
00:00:39,410 --> 00:00:42,375
that is also that element also exists.

15
00:00:42,375 --> 00:00:44,060
>> There's at least one place.

16
00:00:44,060 --> 00:00:44,670
>> At least.

17
00:00:44,670 --> 00:00:46,500
>> At least one place and

18
00:00:46,500 --> 00:00:49,975
the exists quantifier doesn't
care which one you've got.

19
00:00:49,975 --> 00:00:53,070
>> Mm-hm
>> As long as you use that position

20
00:00:53,070 --> 00:00:54,340
consistently.

21
00:00:54,340 --> 00:01:01,230
If there is more than one occurrence
of x sub 1 in the output, okay.

22
00:01:01,230 --> 00:01:05,641
Then when we do our recursive
permutation check on smaller and smaller

23
00:01:05,641 --> 00:01:10,800
segments, we'll run into this situation
again and eventually we'll get down to

24
00:01:10,800 --> 00:01:15,833
where we're comparing the empty vectors
which we'd say are our permutation.

25
00:01:15,833 --> 00:01:17,039
>> Right.
