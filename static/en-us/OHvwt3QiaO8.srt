1
00:00:00,560 --> 00:00:04,230
So far we've created our object and
built up the list of events to listen

2
00:00:04,230 --> 00:00:08,360
for, let's figure out what happens
when we trigger one of those events.

3
00:00:08,360 --> 00:00:09,930
We need a break point here so

4
00:00:09,930 --> 00:00:12,770
that Chrome will pause when
we try to trigger the event.

5
00:00:12,770 --> 00:00:15,200
These lines pull out
the arguments that are passed.

6
00:00:15,200 --> 00:00:17,350
In our case that's an event, so

7
00:00:17,350 --> 00:00:21,320
the arcs variable will be in a ray
with the string and event in it.

8
00:00:21,320 --> 00:00:25,740
Then it calls the events API function,
just like it did when we used on.

9
00:00:25,740 --> 00:00:28,960
This time trigger API will
be used as the iteratee.

10
00:00:28,960 --> 00:00:34,070
Just like before, events API checks if
the event name is an object, a list,

11
00:00:34,070 --> 00:00:35,440
or just a single word.

12
00:00:35,440 --> 00:00:38,740
Then it calls iteratee,
which is the trigger API function.

13
00:00:38,740 --> 00:00:42,080
Trigger API pulls the callback
out of the event object and

14
00:00:42,080 --> 00:00:45,820
then passes the call back and
the arguments to trigger events.

15
00:00:45,820 --> 00:00:48,900
Just like the on method,
most of the time is spent setting and

16
00:00:48,900 --> 00:00:50,520
passing along data.

17
00:00:50,520 --> 00:00:54,270
This function here is what actually
runs the callback function and the data.

18
00:00:54,270 --> 00:00:57,110
This first line sets up
a bunch of local variables.

19
00:00:57,110 --> 00:00:59,080
Then it checks how many
arguments were passed.

20
00:00:59,080 --> 00:01:02,260
In our case that's just one,
so it jumps to here.

21
00:01:02,260 --> 00:01:06,670
And it pulls out the event out of the
events array, gets the call back, and

22
00:01:06,670 --> 00:01:08,580
calls it with the argument.

23
00:01:08,580 --> 00:01:11,860
After that, Backbone just unwinds and
returns all the way up the chain.
