1
00:00:00,390 --> 00:00:04,470
Hi Catherine, there's actually
a limitation about arrays.

2
00:00:04,470 --> 00:00:07,780
>> What do you mean that's what you
wanted us to use with wrong with that?

3
00:00:07,780 --> 00:00:11,300
>> Well I've been thinking about it, and
there's actually a better data structure

4
00:00:11,300 --> 00:00:14,440
for us to store these words in case
we want to add more to the future.

5
00:00:14,440 --> 00:00:15,960
>> What data structures is that?

6
00:00:15,960 --> 00:00:20,560
>> Well it's something called a
arrayList and we can use these stackable

7
00:00:20,560 --> 00:00:23,300
boxes as an analogy
>> For example,

8
00:00:23,300 --> 00:00:28,230
if we want the arrayList to shrink size,
we just remove elements from it, and

9
00:00:28,230 --> 00:00:31,600
if we want to grow,
we can just add elements onto it.

10
00:00:31,600 --> 00:00:32,159
>> Okay.

11
00:00:32,159 --> 00:00:34,700
How big does it actually get?

12
00:00:34,700 --> 00:00:38,520
>> Well, there's actually no upper
limit to how big the arrayList can get

13
00:00:38,520 --> 00:00:42,190
whereas with the array once we
create It's stuck that size.

14
00:00:42,190 --> 00:00:42,790
Okay.

15
00:00:42,790 --> 00:00:43,930
So where do I put these?

16
00:00:43,930 --> 00:00:47,790
Because I want to put the strings one,
two, and three and there.

17
00:00:47,790 --> 00:00:49,990
>> Were we first working
on the first element.

18
00:00:49,990 --> 00:00:50,570
>> Okay.
>> So

19
00:00:50,570 --> 00:00:52,370
you're working down the second element.

20
00:00:52,370 --> 00:00:53,780
>> Okay.
>> And the third word we're

21
00:00:53,780 --> 00:00:55,100
going to third element.

22
00:00:55,100 --> 00:00:55,690
>> Okay.

23
00:00:55,690 --> 00:00:58,300
So can I put anything in
an element of an array list?

24
00:00:58,300 --> 00:01:02,710
>> Or we can put anything a realist
can only whole object out of types.

25
00:01:02,710 --> 00:01:03,910
>> As opposed to.

26
00:01:03,910 --> 00:01:07,670
>> Or remember primitive data types
>> Things like integers, bullions,

27
00:01:07,670 --> 00:01:08,310
and floats.

28
00:01:08,310 --> 00:01:10,810
>> But if I want to store
an integer in an element?

29
00:01:10,810 --> 00:01:11,680
>> Well it's kind of tricky.

30
00:01:11,680 --> 00:01:14,170
But in Java we have something
called object grabbers.

31
00:01:14,170 --> 00:01:18,000
They wrap around primitive data types
to help them become object data types.

32
00:01:18,000 --> 00:01:20,720
So, for example,
we can store the capital I integer.

33
00:01:20,720 --> 00:01:23,480
But we can't store
the lower case i integer.

34
00:01:23,480 --> 00:01:24,040
>> Okay. I got it. So

35
00:01:24,040 --> 00:01:28,410
an array list can hold object
data types not primitive types.

36
00:01:28,410 --> 00:01:31,060
It just seems like an array list
is a lot more flexible, because

37
00:01:31,060 --> 00:01:36,190
there's no wasted spots as compared to
an array which could have blank spots.

38
00:01:36,190 --> 00:01:38,586
So why not just always
use an array list?

39
00:01:38,586 --> 00:01:39,490
>> Glad you asked.

40
00:01:39,490 --> 00:01:42,550
So I have this wonderful comparison
chart that'll answer all your questions.

41
00:01:42,550 --> 00:01:43,570
>> Okay, let's check it out.

42
00:01:44,640 --> 00:01:49,280
Here's the table that compares and
contrasts the Array and the ArrayList.

43
00:01:49,280 --> 00:01:54,140
Like we mentioned earlier, an Array
cannot change size once created,

44
00:01:54,140 --> 00:01:56,870
whereas an ArrayList can change size.

45
00:01:56,870 --> 00:02:01,190
Now for the question is it a class,
an Array is not a class.

46
00:02:01,190 --> 00:02:03,950
It doesn't have methods to access and
modify elements.

47
00:02:03,950 --> 00:02:07,380
On the other hand, an array list
has a list of class definition.

48
00:02:07,380 --> 00:02:10,460
This means that every instance of
an array list is an object, which has

49
00:02:10,460 --> 00:02:15,870
methods we can use to access and modify
the data, and so that's showcase here,

50
00:02:15,870 --> 00:02:18,030
and what each data structure
can store is different as well.

51
00:02:19,060 --> 00:02:21,940
And array can contain primitive
an object out of types.

52
00:02:21,940 --> 00:02:25,690
However an array list can only
contain object out of types.

53
00:02:25,690 --> 00:02:29,130
So to help make this clearer,
let's look at some example scenarios and

54
00:02:29,130 --> 00:02:31,880
real Android apps
within the settings up.

55
00:02:31,880 --> 00:02:36,430
We have a Wi-Fi screen that shows a list
of available Wi-Fi by networks near you.

56
00:02:36,430 --> 00:02:40,390
In this case, we probably want to store
this information in an array list, and

57
00:02:40,390 --> 00:02:43,760
this is because the list of
available WiFi networks can grow or

58
00:02:43,760 --> 00:02:46,630
shrink depending on
where you're located.

59
00:02:46,630 --> 00:02:50,700
Sometimes there are no WiFi networks
near you, and other times there might be

60
00:02:50,700 --> 00:02:54,670
a ton, in this case it doesn't make
sense to have a fixed size array.

61
00:02:55,690 --> 00:02:58,590
In the YouTube app, there's a feature
that can allow you to create a playlist

62
00:02:58,590 --> 00:03:00,330
of videos to watch later.

63
00:03:00,330 --> 00:03:01,740
And this is an ideal situation for

64
00:03:01,740 --> 00:03:05,730
an arrayList, because we'll continue
to add videos that we want to see and

65
00:03:05,730 --> 00:03:09,540
remove those the we've already watched,
and since we need the data structure to

66
00:03:09,540 --> 00:03:13,370
dynamically change in size
we should use an arrayList.

67
00:03:13,370 --> 00:03:17,870
On the other hand, an alarm clock app we
have a potential use case for an array.

68
00:03:17,870 --> 00:03:20,750
When you specify an alarm you
specify what day of the week

69
00:03:20,750 --> 00:03:22,400
the alarm should repeat on.

70
00:03:22,400 --> 00:03:26,210
This could be a boolean array, which
source true if the alarm would happen on

71
00:03:26,210 --> 00:03:30,110
that day and false if the alarm
should not happen on that day.

72
00:03:30,110 --> 00:03:33,080
So there are only ever be
seven days in a week, so

73
00:03:33,080 --> 00:03:36,360
the size of our boy in array
won't need to change over time.

74
00:03:36,360 --> 00:03:37,650
Hence we can use in array.

75
00:03:38,840 --> 00:03:41,420
Another possible use case for
an array is the Google Play store App.

76
00:03:42,490 --> 00:03:45,240
When searching for an app you
can view a list of categories,

77
00:03:45,240 --> 00:03:51,175
which includes Includes businesses,
communication, education apps and more.

78
00:03:51,175 --> 00:03:52,245
If you scroll up and down,

79
00:03:52,245 --> 00:03:56,235
the number of categories in the Play
Store will stay pretty fixed over time.

80
00:03:56,235 --> 00:03:58,785
So in this case, will use an array
to store this information.

81
00:04:00,270 --> 00:04:04,690
Now to summarize array and array
list are two different types of data

82
00:04:04,690 --> 00:04:08,270
structures that are ideal for
different use cases.

83
00:04:08,270 --> 00:04:12,820
Arrays have a fixed size,
while array lists have variable size.

84
00:04:12,820 --> 00:04:16,070
You can store objects and
primitives in an array.

85
00:04:16,070 --> 00:04:19,170
While can only store object
types in an array list.

86
00:04:19,170 --> 00:04:22,210
Next we'll dive in and see how to
write code to create an array list.
