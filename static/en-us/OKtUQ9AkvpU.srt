1
00:00:00,410 --> 00:00:05,049
Up until now, we've been declaring lots
of variables with the keyword var.

2
00:00:05,049 --> 00:00:07,980
Now I want to talk about its companion,
the keyword let.

3
00:00:09,449 --> 00:00:14,029
In Swift, there are two different
ways to assign a name to a value,

4
00:00:14,029 --> 00:00:17,019
values can be assigned to constants or
variables.

5
00:00:18,059 --> 00:00:21,000
Constants are declared
using the keyword let and

6
00:00:21,000 --> 00:00:23,990
variables are declared
using the keyword var.

7
00:00:23,989 --> 00:00:27,459
Not surprisingly,
once the value of a constant is set,

8
00:00:27,460 --> 00:00:31,210
it can't be reassigned,
the value remains constant.

9
00:00:31,210 --> 00:00:35,020
So once you use let when assigning
a value that's not expected to change.

10
00:00:36,229 --> 00:00:39,409
Variables, on the other hand,
can be reassigned.

11
00:00:39,409 --> 00:00:43,849
So once you'd use var, when assigning
a value that's expected to change.

12
00:00:43,850 --> 00:00:48,679
Here, the encouragement sting stays
the same so it's declared as a constant.

13
00:00:48,679 --> 00:00:53,159
The personalized encouragement string
changes so it's declared as a variable.

14
00:00:54,380 --> 00:00:56,090
Here's another example.

15
00:00:56,090 --> 00:00:59,950
Birth year doesn't change, but
time keeps progressing forward.

16
00:00:59,950 --> 00:01:02,480
So current year does change,
as does age.

17
00:01:03,850 --> 00:01:06,939
But notice that context matters as well.

18
00:01:06,939 --> 00:01:10,049
The previous example assumes
that the variable age

19
00:01:10,049 --> 00:01:12,929
is going to be calculated
multiple times.

20
00:01:12,930 --> 00:01:16,020
If age was only intended
to be calculated once,

21
00:01:16,019 --> 00:01:19,689
then we would go ahead and declare
age and current year as constants.

22
00:01:21,609 --> 00:01:24,929
When in doubt,
declare a constant over a variable.

23
00:01:24,930 --> 00:01:27,710
Anytime a value is altered,
it should be explicit.

24
00:01:27,709 --> 00:01:31,599
This protects our code by preventing us
from inadvertently changing values that

25
00:01:31,599 --> 00:01:32,569
we don't want changed.

