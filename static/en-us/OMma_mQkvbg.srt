1
00:00:00,450 --> 00:00:03,390
So, the next thing I'm showing
on the slide are two of

2
00:00:03,390 --> 00:00:08,260
the refinements that are being used
in this assembly specification.

3
00:00:08,260 --> 00:00:11,540
Refinements are little
program generators.

4
00:00:11,540 --> 00:00:16,457
They take existing programs of
some type that implements some

5
00:00:16,457 --> 00:00:18,830
predetermined interfaces.

6
00:00:18,830 --> 00:00:22,703
And, they compose those programs to
generate a new program, or new variant,

7
00:00:22,703 --> 00:00:25,020
that implements some other interface.

8
00:00:25,020 --> 00:00:29,050
So, for example, we have here
a refinement called Incor for

9
00:00:29,050 --> 00:00:30,230
incremental forecaster.

10
00:00:30,230 --> 00:00:34,420
And, Incor is parametrized by two
different kinds of arguments,

11
00:00:34,420 --> 00:00:38,590
one is some component that
implements forecast interface.

12
00:00:38,590 --> 00:00:41,620
The other is some component that
implements the Multipliers interface.

13
00:00:41,620 --> 00:00:46,040
And, when I apply this refinement to
components of those suitable types, then

14
00:00:46,040 --> 00:00:49,990
I'll actually generate a new component
that implements the forecast interface.

15
00:00:49,990 --> 00:00:52,950
Likewise, for the FCST refinement,

16
00:00:52,950 --> 00:00:57,440
it's parameterized by two components
that implement the forecast interface,

17
00:00:57,440 --> 00:01:00,200
and it generates a new component
that implements forecast interface.

18
00:01:00,200 --> 00:01:02,510
>> So,
I'd like to relate this term as well.

19
00:01:02,510 --> 00:01:09,230
Earlier In this class, we've talked
about using refinement to go from

20
00:01:09,230 --> 00:01:12,490
an abstract description of something
to a more concrete description.

21
00:01:12,490 --> 00:01:16,770
It sounds like your refinements here are
doing that with some kind of generator.

22
00:01:16,770 --> 00:01:22,160
>> Exactly, yeah so, but it's meant to
appeal to that same sensibility, right?

23
00:01:22,160 --> 00:01:26,054
You can think of an interface as
representing an abstract program that

24
00:01:26,054 --> 00:01:27,380
fills in some details.

25
00:01:27,380 --> 00:01:31,750
In particular, in our case, the
signatures of the different tables that

26
00:01:31,750 --> 00:01:36,515
are going to maintain calculations
that we want to make, like forecasts.

27
00:01:36,515 --> 00:01:39,160
But,hey may be implemented in many,
many, many different ways.

28
00:01:39,160 --> 00:01:43,020
And so, each refinement Is a generator

29
00:01:43,020 --> 00:01:48,140
that will generate a different way
of implementing that interface.

30
00:01:48,140 --> 00:01:49,600
It really is meant to
appeal the same idea.
