1
00:00:00,270 --> 00:00:03,122
To answer this question, I'll start with some of the code that I was using in

2
00:00:03,122 --> 00:00:07,810
the hint videos. Here's the homework scores class. And so far, it's keeping

3
00:00:07,810 --> 00:00:12,539
track of a sum and a number of scores. This code returns a sum but doesn't

4
00:00:12,539 --> 00:00:16,102
actually think about excluding the lowest. The way I see this problem, there

5
00:00:16,102 --> 00:00:19,798
are two key insights. The first is that to return the total excluding the

6
00:00:19,798 --> 00:00:25,144
lowest. We don't necessarily need to permanently remove the low score. If we

7
00:00:25,144 --> 00:00:28,153
can find the low score, we can return the total minus the low score, just

8
00:00:28,153 --> 00:00:33,095
subtract it off at the last moment. The second insight is that we don't need to

9
00:00:33,095 --> 00:00:37,882
save all of the scores to know what the lowest score is. We only need to save

10
00:00:37,882 --> 00:00:41,726
the value of the lowest scores itself, so instead of a method that finds the

11
00:00:41,726 --> 00:00:45,694
lowest score I will create an instances variable to track the lowest score so

12
00:00:45,694 --> 00:00:49,414
far, I will define it as private double lowest which probably make these

13
00:00:49,414 --> 00:00:52,204
private to, now I am going to need some special cases in my

14
00:00:52,204 --> 00:00:56,110
getTotalExcludingLowest because if the number of scores is zero, I want to

15
00:00:56,110 --> 00:00:59,768
return zero, but if the number of scores is one, I want to return that one

16
00:00:59,768 --> 00:01:10,206
score which is currently the sum. And if there are more then I want to return

17
00:01:10,206 --> 00:01:15,265
the sum without the lowest score. To keep track of how many scores there are,

18
00:01:15,265 --> 00:01:20,038
I'm using the counting pattern. I start with the number of scores being zero

19
00:01:20,038 --> 00:01:25,172
and when I add a score, I increment the number of scores by one. Now, for this

20
00:01:25,172 --> 00:01:30,381
new variable, lowest score. Or lowest, as I'm calling it. I need to come up

21
00:01:30,381 --> 00:01:35,862
with an initial value. Ideally I would initialize it with the first score. But

22
00:01:35,862 --> 00:01:39,742
I don't know what that is yet in the constructor. So I'll initialize it with

23
00:01:39,742 --> 00:01:44,120
minus one, and promise never to look at it until I've added at least one score.

24
00:01:45,310 --> 00:01:49,570
This is a good example of why you want to keep your instance variables private.

25
00:01:49,570 --> 00:01:52,720
People using the homework scores class might not realize that lowest isn't

26
00:01:52,720 --> 00:01:57,070
always initialized. Only the homework scores class knows about this

27
00:01:57,070 --> 00:02:01,764
implementation detail. And when you mark this as private, it shows that the

28
00:02:01,764 --> 00:02:05,640
homework scores objects are responsible for interpreting the data inside of the

29
00:02:05,640 --> 00:02:10,430
lowest score variable. So outsiders don't need to remember things like, I

30
00:02:10,430 --> 00:02:14,446
shouldn't look at the lowest score until I've added scores. So now I've

31
00:02:14,446 --> 00:02:20,704
initialized the lowest score, but I need to think about how it's changing. I'll

32
00:02:20,704 --> 00:02:24,608
need to make sure that in add score, when there aren't any scores yet, I should

33
00:02:24,608 --> 00:02:30,156
initialize lowest to be the given score. Then I need to think about, what

34
00:02:30,156 --> 00:02:34,530
happens when I add additional scores. The lowest score seen so far can change

35
00:02:34,530 --> 00:02:38,324
whenever I add a score. This is a lot like looking for the minimum score in a

36
00:02:38,324 --> 00:02:43,910
loop. When I see a new score, if the score is less than the lowest so far, I

37
00:02:43,910 --> 00:02:48,460
update the lowest to be score, now it looks like under both of these conditions

38
00:02:48,460 --> 00:02:52,870
numScores is zero or the score is less than the lowest, I change the lowest to

39
00:02:52,870 --> 00:02:57,280
be the score, so let's make this into one if statement, if num score is zero or

40
00:02:57,280 --> 00:03:01,480
score is less than lowest, then lowest equal score making get rid of this

41
00:03:01,480 --> 00:03:06,100
repetition and then these two statements happen no matter what whenever I see a

42
00:03:06,100 --> 00:03:18,570
new score I count that I've seen another score and I add the score to the sum.

43
00:03:19,750 --> 00:03:23,170
So now if I compile and fix my syntax errors, I can run the homework scores

44
00:03:23,170 --> 00:03:29,692
tester. And the homework scores class behaves as it should.
