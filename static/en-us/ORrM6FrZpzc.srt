1
00:00:00,410 --> 00:00:03,890
So the fault tolerance techniques that are used

2
00:00:03,890 --> 00:00:07,196
often are checkpointing where we can save the

3
00:00:07,196 --> 00:00:10,850
state of the system periodically, then we detect

4
00:00:10,850 --> 00:00:13,895
errors and restore the state of the system

5
00:00:13,895 --> 00:00:17,150
once we detect an error. This type of

6
00:00:17,150 --> 00:00:20,430
technique works really well for many transient and

7
00:00:20,430 --> 00:00:23,615
also intermittent faults. So the idea here is

8
00:00:23,615 --> 00:00:25,621
that you will save the state of the system

9
00:00:25,621 --> 00:00:29,560
when the system is functioning normally. If a fault occurs

10
00:00:29,560 --> 00:00:31,920
we will try to detect errors that result from that and

11
00:00:31,920 --> 00:00:34,620
restore the system into a state that was not affected by

12
00:00:34,620 --> 00:00:36,950
the fault. So if the the fault is transient it will

13
00:00:36,950 --> 00:00:40,360
not happen again and our system goes back to functioning normally.

14
00:00:40,360 --> 00:00:43,692
If the fault is intermittent, then this might happen a few

15
00:00:43,692 --> 00:00:46,548
times, until we reach the time when the fault is no

16
00:00:46,548 --> 00:00:50,660
longer going to be activated, and then again we will function normally.

17
00:00:50,660 --> 00:00:54,020
So the system continues to function normally, if

18
00:00:54,020 --> 00:00:56,090
we can quickly recover from each of the

19
00:00:56,090 --> 00:00:58,160
faults, so that it doesn't affect the overall

20
00:00:58,160 --> 00:01:01,970
availability and reliability of the system. If checkpointing takes

21
00:01:01,970 --> 00:01:04,418
too long, then this type of recovery has

22
00:01:04,418 --> 00:01:09,026
to be treated as service interruption. But if checkpointing

23
00:01:09,026 --> 00:01:12,430
and detection and restoring of the state are

24
00:01:12,430 --> 00:01:15,742
very, very fast it may be that the promised

25
00:01:15,742 --> 00:01:19,684
service is never disrupted. So for example, if the

26
00:01:19,684 --> 00:01:22,724
system is supposed to answer all the web queries

27
00:01:22,724 --> 00:01:27,664
within, let's say one second, if we manage to do all of this in such a way that

28
00:01:27,664 --> 00:01:30,248
we still respond to all of the things that

29
00:01:30,248 --> 00:01:32,832
we got in one second, then there has been

30
00:01:32,832 --> 00:01:37,589
no serious interruption. We can use two-way redundancy, where

31
00:01:37,589 --> 00:01:40,813
two modules do the same work. Then we compare their

32
00:01:40,813 --> 00:01:45,798
results, and we roll back if the results are different. So this is really

33
00:01:45,798 --> 00:01:48,277
an error detection technique, and it needs

34
00:01:48,277 --> 00:01:52,112
a recovery technique such as checkpointing. Similarly,

35
00:01:52,112 --> 00:01:55,990
checkpointing is a recovery technique. It needs

36
00:01:55,990 --> 00:01:59,750
something like two-way redundancy to actually detect

37
00:01:59,750 --> 00:02:02,870
errors and while these techniques recover and

38
00:02:02,870 --> 00:02:05,830
detect things separately, we can also have

39
00:02:05,830 --> 00:02:10,150
something like three-way redundancy which can both detect and

40
00:02:10,150 --> 00:02:13,910
recover some faults. And in this case three modules

41
00:02:13,910 --> 00:02:16,490
or more will do the same work and then

42
00:02:16,490 --> 00:02:20,244
vote for what the correct result should be. So

43
00:02:20,244 --> 00:02:23,125
if one module is malfunctioning then the two others

44
00:02:23,125 --> 00:02:25,939
will still produce the same result and that result

45
00:02:25,939 --> 00:02:28,217
will be elected by the vote as the overall

46
00:02:28,217 --> 00:02:31,218
correct result. So the fault in one module becomes

47
00:02:31,218 --> 00:02:33,774
an error in that module but doesn't become

48
00:02:33,774 --> 00:02:36,401
an error at the system level, because at the

49
00:02:36,401 --> 00:02:39,383
output of these three modules and their voter, we

50
00:02:39,383 --> 00:02:43,070
always have an error free result. This technique is

51
00:02:43,070 --> 00:02:46,684
expensive. You pretty much need three times the hardware

52
00:02:46,684 --> 00:02:49,336
plus the voter that you would have without some

53
00:02:49,336 --> 00:02:53,622
fault tolerance techniques. But, in return, it can tolerate

54
00:02:53,622 --> 00:02:56,292
any fault that can occur in any one of

55
00:02:56,292 --> 00:03:01,570
the modules. So as long as the fault that you have is affecting only one module,

56
00:03:01,570 --> 00:03:05,790
we can tolerate that fault. Even, for example,

57
00:03:05,790 --> 00:03:09,090
if that one module is purposely designed to be

58
00:03:09,090 --> 00:03:12,212
malicious. because the correct two are still going to

59
00:03:12,212 --> 00:03:14,620
out vote it and we never really see

60
00:03:14,620 --> 00:03:17,802
whatever that module is trying to produce in

61
00:03:17,802 --> 00:03:21,693
our overall results. But what happens if two modules

62
00:03:21,693 --> 00:03:25,370
fail, in that case we no longer can tolerate that.
