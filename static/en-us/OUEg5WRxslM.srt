1
00:00:00,240 --> 00:00:03,460
So now, let's look at how do
we form the offset index and

2
00:00:03,460 --> 00:00:07,480
tag in the address for
set-associative caches?

3
00:00:07,480 --> 00:00:12,042
This is a two way set-associative
cache that has four sets.

4
00:00:12,042 --> 00:00:17,250
When the processor produces an address,
the least significant bits

5
00:00:17,250 --> 00:00:21,900
that tell us where in the block we are,
are still determined by the block size.

6
00:00:21,900 --> 00:00:27,570
The indexed bits are the ones that tell
us which set are we talking about.

7
00:00:27,570 --> 00:00:33,130
So the number of index bits is
determined by how many sets we have.

8
00:00:33,130 --> 00:00:38,160
In this case, we have four sets,
so we need two index bits.

9
00:00:38,160 --> 00:00:40,730
The remaining bits are the tag.

10
00:00:40,730 --> 00:00:44,620
Like in a direct mapped cache,
once we have placed the line in for

11
00:00:44,620 --> 00:00:49,630
example set zero,
we know that everything that maps to set

12
00:00:49,630 --> 00:00:54,980
zero will have bits zero zero here, so
we don't have to keep that in the tag.

13
00:00:54,980 --> 00:01:01,610
In set zero, we only need to
make sure that what we now need,

14
00:01:01,610 --> 00:01:07,880
matches what we have in the uppermost
bits, not in the indexed bits.

15
00:01:07,880 --> 00:01:12,220
Because the fact that we're looking at
set zero, means that we have already

16
00:01:12,220 --> 00:01:15,920
determined that these bits are zero
zero, and everything that we could have

17
00:01:15,920 --> 00:01:19,618
placed here,
also has zero zero bits in the index.

18
00:01:19,618 --> 00:01:24,590
Interestingly, a direct-mapped
cache of the same size

19
00:01:24,590 --> 00:01:27,850
will have one more index bit, so
it would have slightly smaller tag.
