1
00:00:00,000 --> 00:00:04,000
So now, we're going to look at the solution to this final problem set for Unit 1.

2
00:00:04,000 --> 00:00:08,000
The first thing we have to do is fill in the definition for the acceleration function.

3
00:00:08,000 --> 00:00:12,000
Now the acceleration function takes an argument that we've called spaceship position.

4
00:00:12,000 --> 00:00:17,000
Well, we can define the position of the spaceship in relation to earth with this variable vector to earth.

5
00:00:17,000 --> 00:00:21,000
A vector pointing from the earth to the spaceship is just the opposite

6
00:00:21,000 --> 00:00:23,000
of a vector pointing from the spaceship to the earth.

7
00:00:23,000 --> 00:00:28,000
So we define vector to earth as the negative of this argument, spaceship position.

8
00:00:28,000 --> 00:00:31,000
Now since we're trying to define the acceleration,

9
00:00:31,000 --> 00:00:34,000
what we want to return is an expression for acceleration.

10
00:00:34,000 --> 00:00:39,000
So we rate return and then a translation of this equation over here that we talked about earlier.

11
00:00:39,000 --> 00:00:45,000
So we have the gravitational constant which is G times the earth mass which is mE,

12
00:00:45,000 --> 00:00:49,000
divided by this expression that looks pretty tricky, so let's dissect that briefly.

13
00:00:49,000 --> 00:00:53,000
Now, the first thing we have right here is a method from a linear algebra library

14
00:00:53,000 --> 00:00:57,000
which gives us the norm or the magnitude of whatever vector we put into it.

15
00:00:57,000 --> 00:01:01,000
We, of course, are inputting the vector from the spaceship to the earth.

16
00:01:01,000 --> 00:01:05,000
Now over here, we can see in the original equation that the denominator

17
00:01:05,000 --> 00:01:08,000
is just the norm of that vector squared.

18
00:01:08,000 --> 00:01:10,000
Within the code, we have it to the 3rd power.

19
00:01:10,000 --> 00:01:14,000
Now, the reason for this is that we are also multiplying by that same vector again.

20
00:01:14,000 --> 00:01:17,000
Whereas in the equation we're multiplying by the unit vector.

21
00:01:17,000 --> 00:01:20,000
This means that in the Python version of the equation,

22
00:01:20,000 --> 00:01:24,000
we effectively have the magnitude cubed in the denominator

23
00:01:24,000 --> 00:01:27,000
and the magnitude to the 1st power, the numerator which gives overall

24
00:01:27,000 --> 00:01:33,000
a factor of 1 over the magnitude squared which is exactly what we see in the original equation.

25
00:01:33,000 --> 00:01:36,000
This makes our job a little bit easier because we don't have to define

26
00:01:36,000 --> 00:01:38,000
a unit vector for the vector to earth.

27
00:01:38,000 --> 00:01:42,000
Now we move on to the definition of the function ship trajectory.

28
00:01:42,000 --> 00:01:46,000
Since we gave you all of this code, we skip down here to this final for loop.

29
00:01:46,000 --> 00:01:49,000
This is something that we've seen several times before.

30
00:01:49,000 --> 00:01:54,000
For example, in the last problem set these two lines implement the Forward Euler Method

31
00:01:54,000 --> 00:01:57,000
to show how position and velocity are going to change with each step.

32
00:01:57,000 --> 00:02:02,000
Once we have all of this code filled in, we can run the program, and our final product is this picture.

33
00:02:02,000 --> 00:02:05,000
Now this picture looks a lot like what we would expect from elliptical orbit.

34
00:02:05,000 --> 00:02:08,000
We have the earth here and the spaceship moving around it.

35
00:02:08,000 --> 00:02:12,000
Now everything looks pretty normal until we get almost to the end

36
00:02:12,000 --> 00:02:14,000
and we realized the ellipse actually won't close.

37
00:02:14,000 --> 00:02:19,000
This is a great example of how the Forward Euler Method is a method using approximations.

38
00:02:19,000 --> 00:02:23,000
If we are using more exact expressions for position and velocity,

39
00:02:23,000 --> 00:02:28,000
then we would end up with a closed ellipse and we can also play with the number of steps that we used

40
00:02:28,000 --> 00:02:31,000
to show how increasing the steps gives us a more exact approximation

41
00:02:31,000 --> 00:02:33,000
of the trajectory of the spaceship.

42
00:02:33,000 --> 00:02:36,000
Now we've done something that I think is pretty cool right here.

43
00:02:36,000 --> 00:02:39,000
We've changed the number of steps from 13,000 to 1.3 million.

44
00:02:39,000 --> 00:02:42,000
This means that since we cut the step size the same,

45
00:02:42,000 --> 00:02:45,000
this picture shows what the position of the spaceship would be like

46
00:02:45,000 --> 00:02:49,000
after much more time has passed after it has gone through many, many orbits.

47
00:02:49,000 --> 00:02:54,000
So even though in that initial orbit, the trajectory only seems slightly off.

48
00:02:54,000 --> 00:02:56,000
If we let that happen over and over and over again,

49
00:02:56,000 --> 00:03:01,000
eventually the spaceship will be much further away from earth than it was originally.

50
00:03:01,000 --> 00:03:06,000
Now, just to play with this example a little bit more, we've gone in and first change the step size,

51
00:03:06,000 --> 00:03:08,000
so that's 1/10 of the size that it used to be.

52
00:03:08,000 --> 00:03:11,000
This should give us a much more exact approximation

53
00:03:11,000 --> 00:03:13,000
since we're taking steps more closely together.

54
00:03:13,000 --> 00:03:18,000
However, we've also had to change the number of steps from the original 13,000 up to 130,000,

55
00:03:18,000 --> 00:03:23,000
so that we still have the same number of seconds total that the spaceship is in orbit

56
00:03:23,000 --> 00:03:25,000
which is a result of this changed code.

57
00:03:25,000 --> 00:03:29,000
At first, it might look pretty similar to what we had after we ran the program the first time.

58
00:03:29,000 --> 00:03:32,000
However, if you'd examine the end of the trajectory a little bit more closely,

59
00:03:32,000 --> 00:03:37,000
you can see that this tail looks like it's actually going to intersect the beginning.

60
00:03:37,000 --> 00:03:40,000
This time, it actually looks like the ellipse might close

61
00:03:40,000 --> 00:03:44,000
which we remember is what the trajectory in real life would look like.

62
00:03:44,000 --> 00:03:47,000
This is a great example of how changing the step size and using the Forward Euler Method

63
00:03:47,000 --> 00:03:50,000
can greatly decrease the error and the results we produce.

64
00:03:50,000 --> 00:03:53,000
In the next unit, we'll look at another numerical method

65
00:03:53,000 --> 00:03:57,000
that deals with similar situations but in a slightly different way.
