1
00:00:00,006 --> 00:00:03,525
This first premultiplied texel would turn into this value. The 2.5 is clearly

2
00:00:03,525 --> 00:00:08,212
out of range of a value that can be stored in a texel, in the range of 0 to 1.

3
00:00:08,212 --> 00:00:12,696
So, this texel cannot be properly represented when unmultiplied. The second

4
00:00:12,696 --> 00:00:17,402
texel would convert to values between 0 and 1. This is a valid unmultiplied

5
00:00:17,402 --> 00:00:21,310
RGBA. To convert this third texel to unmultiplied form, the alpha value would

6
00:00:21,310 --> 00:00:25,928
have to be used to divide the RGB values. Dividing a non 0 number by 0 is

7
00:00:25,928 --> 00:00:30,142
illegal. So, this premultiplied RGBA value cannot be converted and stored in

8
00:00:30,142 --> 00:00:34,978
unmultiplied form. It's not a value that could've come from any and multiplied

9
00:00:34,978 --> 00:00:38,150
RBGA value because the alpha, which doesn't change in conversion, would

10
00:00:38,150 --> 00:00:42,893
multiply any RBG value and so set it to 0. The last RGBA looks like it might be

11
00:00:42,893 --> 00:00:45,619
invalid to convert, since you would need to divide by 0 to convert from

12
00:00:45,619 --> 00:00:50,860
premultiplied to unmultiplied form. However, this RGBA is entirely valid and is

13
00:00:50,860 --> 00:00:55,910
the same as in premultiplied form. It represents an entirely transparent pixel.

14
00:00:55,910 --> 00:00:59,090
If you started with an unmultiplied RGB of any value and an alpha of 0, the

15
00:00:59,090 --> 00:01:03,504
premultiplied form would be the same. Note that the premultiplied form would

16
00:01:03,504 --> 00:01:06,640
loose the RGB that the unmultiplied form had in this case.
