1
00:00:00,150 --> 00:00:02,080
So let's see how we can implement the lock

2
00:00:02,080 --> 00:00:07,000
function. Our lock function needs to do something like this.

3
00:00:07,000 --> 00:00:09,060
We need some sort of a magical lock that

4
00:00:09,060 --> 00:00:12,650
works without using locks. That protects a critical section in

5
00:00:12,650 --> 00:00:15,630
which we check if the lock variable is zero.

6
00:00:15,630 --> 00:00:18,970
We put one in the lock variable. And we leave.

7
00:00:18,970 --> 00:00:22,065
Because we have just successfully acquired the lock. If the

8
00:00:22,065 --> 00:00:25,796
lock variable is one, we repeat all of this, and

9
00:00:25,796 --> 00:00:28,981
we need to let others also be checking, so

10
00:00:28,981 --> 00:00:32,439
really we need to insert the unlock magic here

11
00:00:32,439 --> 00:00:35,910
and here. So basically we're just trying to do

12
00:00:35,910 --> 00:00:40,140
this check. And if it's 0, setting to 1 automatically

13
00:00:40,140 --> 00:00:43,200
with each other using some sort of magic. Obviously

14
00:00:43,200 --> 00:00:45,260
there is no magic. So if there is no

15
00:00:45,260 --> 00:00:47,830
magic, what to we do? There are several ways

16
00:00:47,830 --> 00:00:50,690
to get the effect that lock magic would give us.

17
00:00:50,690 --> 00:00:53,378
One way is to use what's called Lamport's Bakery

18
00:00:53,378 --> 00:00:56,386
algorithm or some other algorithm that actually is able

19
00:00:56,386 --> 00:00:59,458
to use normal old loading stored instructions to replace

20
00:00:59,458 --> 00:01:02,530
lock magic, but these algorithms tends to be relatively

21
00:01:02,530 --> 00:01:05,700
complicated. And just as simple a lock function will

22
00:01:05,700 --> 00:01:09,090
take 10s of instructions to do. So doing this

23
00:01:09,090 --> 00:01:13,060
is expensive, it makes the lock function slow. The

24
00:01:13,060 --> 00:01:15,770
other option is to use some sort of special

25
00:01:15,770 --> 00:01:18,577
atomic read and write instructions. So there will be

26
00:01:18,577 --> 00:01:21,475
an instruction that does this check and set to 1,

27
00:01:21,475 --> 00:01:24,373
or something similar to that, that would allow us

28
00:01:24,373 --> 00:01:27,810
to in one instruction do this without needing the magic.
