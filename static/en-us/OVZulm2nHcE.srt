1
00:00:00,565 --> 00:00:04,480
Let's explore the opportunities for customization with a

2
00:00:04,480 --> 00:00:06,870
very specific example and the example I'm going to

3
00:00:06,870 --> 00:00:10,610
choose is memory management, in particular how an

4
00:00:10,610 --> 00:00:14,770
operating system handles page faults. Let's say that

5
00:00:14,770 --> 00:00:18,260
this thread executing on the processor incurs a

6
00:00:18,260 --> 00:00:20,820
page fault. The first thing that the operating

7
00:00:20,820 --> 00:00:25,770
system has to do in order to service this page fault will be to find a

8
00:00:25,770 --> 00:00:31,860
free page frame to host the missing page for this particular thread. And once it

9
00:00:31,860 --> 00:00:34,930
allocates a free page frame, then the

10
00:00:34,930 --> 00:00:38,280
operating system is going to initiate the disc IO

11
00:00:38,280 --> 00:00:43,630
to move the page from virtual memory into the free page frame that has been

12
00:00:43,630 --> 00:00:48,150
identified for hosting the missing page from this

13
00:00:48,150 --> 00:00:51,670
particular thread. Once the IO is complete and

14
00:00:51,670 --> 00:00:54,080
the missing page for this thread has

15
00:00:54,080 --> 00:00:57,630
been brought from storage into the free page

16
00:00:57,630 --> 00:01:00,090
frame, the operating system is going to update the

17
00:01:00,090 --> 00:01:03,650
page table for this thread or process, establishing

18
00:01:03,650 --> 00:01:08,480
the mapping between the missing virtual page and

19
00:01:08,480 --> 00:01:10,650
the page frame that had been allocated for

20
00:01:10,650 --> 00:01:13,910
hosting that missing page. Once the page table

21
00:01:13,910 --> 00:01:16,680
has been updated then we can resume the

22
00:01:16,680 --> 00:01:22,220
process so that it can continue where it left off. At the point of the page

23
00:01:22,220 --> 00:01:24,420
fault. One thing that I haven't told you

24
00:01:24,420 --> 00:01:27,420
the sequence of actions that the operating system takes,

25
00:01:27,420 --> 00:01:30,550
is that every so often, the operating system

26
00:01:30,550 --> 00:01:34,860
runs a page replacement algorithm to free up some

27
00:01:34,860 --> 00:01:38,800
page frames. And readiness for allocating the frame

28
00:01:38,800 --> 00:01:42,240
to a page fault that a process may incur.

29
00:01:42,240 --> 00:01:48,910
Just as an airline overbooks its seats in the hope that some passengers

30
00:01:48,910 --> 00:01:51,420
won't show up, the operating system is

31
00:01:51,420 --> 00:01:57,030
also overcommitting its available physical memory hoping

32
00:01:57,030 --> 00:02:02,190
that not all of the pages of a particular process which is in the

33
00:02:02,190 --> 00:02:07,630
memory footprint of the process will actually be needed by the process during

34
00:02:07,630 --> 00:02:10,300
its execution. But how does the operating

35
00:02:10,300 --> 00:02:13,910
system know what the memory access pattern

36
00:02:13,910 --> 00:02:15,910
of a particular process is going to be

37
00:02:15,910 --> 00:02:18,310
in making this decision? The short answer is

38
00:02:18,310 --> 00:02:21,600
it does not. So whatever the operating

39
00:02:21,600 --> 00:02:26,080
system chooses as an algorithm to implement page

40
00:02:26,080 --> 00:02:28,440
replacement. It may not always be the

41
00:02:28,440 --> 00:02:32,490
most appropriate one for some class of applications.

42
00:02:32,490 --> 00:02:36,930
So here is an opportunity for customization depending on the nature of the

43
00:02:36,930 --> 00:02:39,760
application. Knowing some details about the

44
00:02:39,760 --> 00:02:41,940
nature of the application, it might be

45
00:02:41,940 --> 00:02:47,110
possible to customize the way page replacement algorithm is

46
00:02:47,110 --> 00:02:51,970
handled by the operating system. Similar opportunities for customization

47
00:02:51,970 --> 00:02:57,720
exist in the way the operating system schedules processes

48
00:02:57,720 --> 00:03:02,400
on the processor and reacts to external events such as interrupts and so on.
