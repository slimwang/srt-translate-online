1
00:00:00,150 --> 00:00:03,429
We've shown how an image texture can be applied to a model. However, these

2
00:00:03,429 --> 00:00:06,964
sorts of mappings are only skin deep. If we carve away any part of the object,

3
00:00:06,964 --> 00:00:10,610
the fact that a 2D texture is getting used is revealed. What we'd like is

4
00:00:10,610 --> 00:00:14,526
something that's more like a real material. The solution is to create a 3D

5
00:00:14,526 --> 00:00:18,459
texture that fills space. One way to define this texture is to actually create

6
00:00:18,459 --> 00:00:22,760
something like a stack of images. Unfortunately 3D textures are not yet

7
00:00:22,760 --> 00:00:26,788
available in WebGL. My guess is wait a year. Another method is to make a

8
00:00:26,788 --> 00:00:30,925
function that takes in a point on a surface and gives back a color. If you

9
00:00:30,925 --> 00:00:34,510
think about it, these are equivalent in intent. Using images also takes in a 3D

10
00:00:34,510 --> 00:00:38,930
point and gives back a color. Each approach has its strengths and weaknesses.

11
00:00:38,930 --> 00:00:42,548
Functions have an unlimited resolution compared to textures, but you also have

12
00:00:42,548 --> 00:00:46,730
to be careful to filter their results. While I'm at it, I should mention you

13
00:00:46,730 --> 00:00:50,840
can shade points on surfaces however you want with a fragment shader program.

14
00:00:50,840 --> 00:00:55,080
Here's an example of animated procedural textures in use. These examples are 2D

15
00:00:55,080 --> 00:00:58,220
functions. They don't fill space, but show how elaborate effects can be

16
00:00:58,220 --> 00:01:00,780
computed on the fly in the fragment shader.
