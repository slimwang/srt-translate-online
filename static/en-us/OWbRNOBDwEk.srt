1
00:00:00,000 --> 00:00:02,000
So I want to spend a little time talking about the question--

2
00:00:02,000 --> 00:00:05,000
What's going on when we test software?

3
00:00:05,000 --> 00:00:07,000
It turns out the answer is a lot of different things are going on.

4
00:00:07,000 --> 00:00:11,000
So here I'd like to start off with the output produced by a test case.

5
00:00:11,000 --> 00:00:13,000
It's going to pass through the acceptability check.

6
00:00:13,000 --> 00:00:18,000
What we're doing when we check the output of a test case for acceptability

7
00:00:18,000 --> 00:00:22,000
is we're running a little experiment, and this experiment can have two possible results.

8
00:00:22,000 --> 00:00:27,000
One result is the output is okay. In which case, we are to go run another test case.

9
00:00:27,000 --> 00:00:33,000
And the question is, what do we learn in that case? And the answer is unfortunately not very much.

10
00:00:33,000 --> 00:00:37,000
What we might have done at best is increased our confidence just a tiny, tiny bit

11
00:00:37,000 --> 00:00:40,000
but the software under test is correct.

12
00:00:40,000 --> 00:00:44,000
And as it so happens, we stand to learn a whole lot more when the output is not okay.

13
00:00:44,000 --> 00:00:48,000
And the process I'm going to talk about right now is if the acceptability check fails

14
00:00:48,000 --> 00:00:52,000
that is to say the test output is not okay, we have to discover what's happened.

15
00:00:52,000 --> 00:00:58,000
And so of course what we expect is much of the time we'll find a bug in the software under test.

16
00:00:58,000 --> 00:01:03,000
If that's the case, we're going to go fix it. And if not, there's still plenty of other possibilities.

17
00:01:03,000 --> 00:01:08,000
And one of the main ones is a bug in our acceptability check. If so, we're going to fix it.

18
00:01:08,000 --> 00:01:12,000
If not, we should consider the possibility that there might be a bug in our specification.

19
00:01:12,000 --> 00:01:17,000
As is often the case, the bug in the specification is a fairly large part of debugging

20
00:01:17,000 --> 00:01:22,000
because the specification often is not written down or it's not written down particularly formally.

21
00:01:22,000 --> 00:01:26,000
It's just an English document or an understanding among a group of people.

22
00:01:26,000 --> 00:01:28,000
And very often, we're learning what it is that we needed to implement

23
00:01:28,000 --> 00:01:30,000
as we're implementing the software.

24
00:01:30,000 --> 00:01:34,000
If that's not the case though, if the bug was not in our acceptability check,

25
00:01:34,000 --> 00:01:39,000
not in the software under test, and not in the specification, we still have some possibilities

26
00:01:39,000 --> 00:01:42,000
but they're getting more difficult to deal with.

27
00:01:42,000 --> 00:01:46,000
Some of the worst debugging stories that you hear of stem from a flaw in the operating system

28
00:01:46,000 --> 00:01:50,000
in the compiler, in run time libraries, or even in the hardware.

29
00:01:50,000 --> 00:01:54,000
Since fixing this kind of bugs is often not an option for us because we've purchased these things

30
00:01:54,000 --> 00:01:58,000
or otherwise gotten these from some other vendor, often they have to be worked around

31
00:01:58,000 --> 00:02:00,000
and these can be extremely painful.

32
00:02:00,000 --> 00:02:04,000
If that is the case, we have a hard road ahead of us but at least we know where the flaw is.

33
00:02:04,000 --> 00:02:06,000
If that's not the case, we're at a bit of an impasse.

34
00:02:06,000 --> 00:02:09,000
What is it that's really going on here? What's the big picture here?

35
00:02:09,000 --> 00:02:13,000
Well as I was saying, what the test is it's a tiny experiment where a failed test

36
00:02:13,000 --> 00:02:15,000
reveals that something is wrong.

37
00:02:15,000 --> 00:02:18,000
It reveals that something is flawed in either the understanding

38
00:02:18,000 --> 00:02:20,000
of the system or in some part of the system.

39
00:02:20,000 --> 00:02:24,000
And there might be a fairly elaborate process in figuring out what the problem is.

40
00:02:24,000 --> 00:02:28,000
These kinds of discoveries that we're making about the system that we're using

41
00:02:28,000 --> 00:02:31,000
are not necessarily a problem because these are things that we need to know

42
00:02:31,000 --> 99:59:59,999
if we're going to create correct software in the future.
