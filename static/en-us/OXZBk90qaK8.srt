1
00:00:00,070 --> 00:00:02,330
It's time to implement the redlines
for the main activity.

2
00:00:02,330 --> 00:00:04,559
We can do one part together
so that you get the hang of it.

3
00:00:04,559 --> 00:00:07,650
We begin by styling
the list item Forecast Layout.

4
00:00:07,650 --> 00:00:11,660
The redline specifies that the image 
should be 32dp by 32dp.

5
00:00:11,660 --> 00:00:14,660
We could hard code the image view 
to be 32 by 32dp,

6
00:00:14,660 --> 00:00:18,132
but it's actually the same as leaving it 
as wrapped content for height and width.

7
00:00:18,132 --> 00:00:21,230
To know what the icon size 
would be if we wrap content,

8
00:00:21,230 --> 00:00:23,540
we open up the MDPI version of the icon,

9
00:00:23,540 --> 00:00:27,150
and we do verify that
it is 32 pixels by 32 pixels.

10
00:00:27,150 --> 00:00:29,536
Whether we hard code it 
or just add wrap content,

11
00:00:29,536 --> 00:00:31,922
visually, the image
will still look the same,

12
00:00:31,922 --> 00:00:34,180
but in the future 
it will be more flexible

13
00:00:34,180 --> 00:00:37,950
if we just specify wrap content
in case the image size changes.

14
00:00:37,950 --> 00:00:39,590
Next we style the text.

15
00:00:39,590 --> 00:00:43,200
On Ice Cream Sandwich and above,
Roboto is the default font for text views.

16
00:00:43,200 --> 00:00:46,250
It is created specifically
to satisfy the requirements of UI

17
00:00:46,250 --> 00:00:48,543
and to optimize for high density screens.

18
00:00:48,543 --> 00:00:51,996
The redline indicates that the font family
is Roboto sans serif condensed,

19
00:00:51,996 --> 00:00:53,710
so we add that to the code.

20
00:00:53,710 --> 00:00:56,880
On the topic of font sizes,
having too many font sizes in your app,

21
00:00:56,880 --> 00:00:59,640
can confuse your user
about the visual hierarchy of your app,

22
00:00:59,640 --> 00:01:02,080
as to what's important 
and what's not important.

23
00:01:02,080 --> 00:01:04,769
The Android design guide
recommends these four type sizes

24
00:01:04,769 --> 00:01:08,040
for consistency with a platform
and for user experience.

25
00:01:08,040 --> 00:01:10,600
In our app, we stick to
the standard type sizes.

26
00:01:10,600 --> 00:01:15,140
Unless it's an intentional part of the design, 
such as the large temperature values.

27
00:01:15,140 --> 00:01:17,126
Hence, when the redline says 
that the date text

28
00:01:17,126 --> 00:01:19,712
should be 22sp for font size,

29
00:01:19,712 --> 00:01:22,900
we could specify 
Android text size to be 22sp,

30
00:01:22,900 --> 00:01:26,310
but the text appearance large attribute
already maps to that value.

31
00:01:26,310 --> 00:01:29,690
Note that the font sizes 
are specified in sp, and not dp.

32
00:01:29,690 --> 00:01:33,646
Sp stands for scaled pixels, so you can
scale with the device font size.

33
00:01:33,646 --> 00:01:35,531
In our app we specify 
text appearance large,

34
00:01:35,531 --> 00:01:37,714
and text appearance small, 
which will give us

35
00:01:37,714 --> 00:01:40,657
22sp and 14sp respectively.

36
00:01:40,657 --> 00:01:43,470
The default font color is black, 
so we don't need to specify

37
00:01:43,470 --> 00:01:46,240
the android text color attribute
on our text views.

38
00:01:46,240 --> 00:01:49,360
Let's look at the spacing for the
elements within the list item now.

39
00:01:49,360 --> 00:01:50,710
We have three children.

40
00:01:50,710 --> 00:01:53,680
The first one is 60dp wide, 
with the image centered inside of it.

41
00:01:53,680 --> 00:01:56,124
So we can add a frame layout 
around the image view

42
00:01:56,124 --> 00:01:58,121
and set the gravity
to be center on the image,

43
00:01:58,121 --> 00:02:00,797
that way the image centers itself 
within the parent.

44
00:02:00,797 --> 00:02:02,564
For the other two columns, 
we shouldn't hard code

45
00:02:02,564 --> 00:02:03,961
such high dp values.

46
00:02:03,961 --> 00:02:06,840
Because otherwise the layout
won't scale across other devices.

47
00:02:06,840 --> 00:02:08,979
Instead, we can use
linear layout weights,

48
00:02:08,979 --> 00:02:11,290
with the weight of seven here, 
and the weight of five.

49
00:02:11,290 --> 00:02:14,023
We just tried different values
until we got approximately equal

50
00:02:14,023 --> 00:02:15,436
to these values.

51
00:02:15,436 --> 00:02:18,920
The trick in doing redlines is that
you want to match the visual specs,

52
00:02:18,920 --> 00:02:21,380
but you also want to be
flexible in the code,

53
00:02:21,380 --> 00:02:23,580
so that it adapts
to different screen sizes.

54
00:02:23,580 --> 00:02:26,280
And this is what the code looks like
for the list_items_forecast layout.

55
00:02:26,280 --> 00:02:28,340
We have a horizontal linear layout,

56
00:02:28,340 --> 00:02:30,320
containing the frame layout
with the image view.

57
00:02:30,320 --> 00:02:32,930
Then we have a vertical 
linear layout with weight seven.

58
00:02:32,930 --> 00:02:35,810
And then we have another 
vertical linear layout with weight five.

59
00:02:35,810 --> 00:02:38,240
We can check the link below 
for the full code file.

60
00:02:38,240 --> 00:02:40,040
This is what it should look like
when you're done.

61
00:02:40,040 --> 00:02:41,393
These items looks polished

62
00:02:41,393 --> 00:02:45,833
but we haven't gotten
to the today item yet.
