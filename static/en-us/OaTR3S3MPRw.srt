1
00:00:00,240 --> 00:00:02,530
Now I want to consider the contents of the page table

2
00:00:02,530 --> 00:00:05,840
entries, at least the entries at the leaves of the hierarchy. In

3
00:00:05,840 --> 00:00:09,090
our example where we had a 32-bit physical address space, it

4
00:00:09,090 --> 00:00:12,170
would be typical to have a page table entries also of 32

5
00:00:12,170 --> 00:00:16,149
bits. With 4k pages, only 20 bits would be needed for

6
00:00:16,149 --> 00:00:18,940
the physical page frame. What do we do with the other 12

7
00:00:18,940 --> 00:00:22,155
bits? Well it turns out that there's lots of other information worth

8
00:00:22,155 --> 00:00:25,370
storing in the page table. Some of the more important are things

9
00:00:25,370 --> 00:00:28,240
like access control. Do we have read, write, or execute

10
00:00:28,240 --> 00:00:31,110
permissions on this memory? If we don't, then when we

11
00:00:31,110 --> 00:00:35,310
come to this page entry, an access violation or segmentation

12
00:00:35,310 --> 00:00:39,570
fault will occur. Another essential piece of information is whether

13
00:00:39,570 --> 00:00:42,880
the information associated with the virtual address is actually in

14
00:00:42,880 --> 00:00:45,430
memory at the moment. It may be the data that

15
00:00:45,430 --> 00:00:48,560
we need was not loaded on the application's start-up or

16
00:00:48,560 --> 00:00:50,710
it may have been swapped out to disk. In either

17
00:00:50,710 --> 00:00:53,950
of those cases, the valid or the present bit would be

18
00:00:53,950 --> 00:00:57,190
zero. When a process tries to access a page with a valid

19
00:00:57,190 --> 00:01:00,160
bit of zero, it creates a page fault and lets the OS

20
00:01:00,160 --> 00:01:02,700
try to bring the needed data into memory. We'll look at the

21
00:01:02,700 --> 00:01:06,440
page fault handler next. One of these bits also indicates whether

22
00:01:06,440 --> 00:01:09,450
the page is dirty. That is, has it been written to since

23
00:01:09,450 --> 00:01:13,060
it was loaded for disk? If not, then if it becomes necessary

24
00:01:13,060 --> 00:01:15,790
to evict this page from memory, there is no need to write

25
00:01:15,790 --> 00:01:18,050
it to disk if it's already there. A nice

26
00:01:18,050 --> 00:01:21,210
optimization. Sometimes a bit or two will also control

27
00:01:21,210 --> 00:01:23,660
how caching of this page is done. Page table

28
00:01:23,660 --> 00:01:27,760
entries corresponding to virtual addresses that were never mapped

29
00:01:27,760 --> 00:01:30,770
to a physical address by the OS usually have

30
00:01:30,770 --> 00:01:34,430
physical frame numbers of zero. The physical frame number

31
00:01:34,430 --> 00:01:37,388
of zero is rather like a null pointer. Everybody

32
00:01:37,388 --> 00:01:40,844
knows that that's an invalid physical frame number and a

33
00:01:40,844 --> 00:01:42,970
segment fault will be generated.
