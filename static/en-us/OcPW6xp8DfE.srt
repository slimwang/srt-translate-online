1
00:00:00,150 --> 00:00:01,850
Okay, now that we've learned about arrays, let's look

2
00:00:01,850 --> 00:00:03,770
at some other ways that queries can get inside of

3
00:00:03,770 --> 00:00:07,170
documents in MongoDB. You know that our automobile collection

4
00:00:07,170 --> 00:00:10,420
contains fields with some nested documents. For example, there's a

5
00:00:10,420 --> 00:00:13,506
dimensions field that contains entries for weight, wheelbase, et

6
00:00:13,506 --> 00:00:17,200
cetera. In MongoDB, we can query for values inside nested

7
00:00:17,200 --> 00:00:21,870
documents. Using a dot notation syntax. Here's an example. Here

8
00:00:21,870 --> 00:00:25,330
I've written a query that will retrieve all autos with

9
00:00:25,330 --> 00:00:28,120
the weight greater than 5000. Now note that I'm

10
00:00:28,120 --> 00:00:31,780
digging into the dimensions field using this dot notation

11
00:00:31,780 --> 00:00:36,240
and accessing the weight field of this dimension sub-document.

12
00:00:36,240 --> 00:00:38,180
So let's take a look at the results. And what

13
00:00:38,180 --> 00:00:40,500
I'm going to do here, is just get a

14
00:00:40,500 --> 00:00:45,140
count. Okay. Now these weights are in kilograms. So

15
00:00:45,140 --> 00:00:46,980
for my fellow Americans, a kilogram is a little

16
00:00:46,980 --> 00:00:50,300
more than two pounds. What we're going to do here is,

17
00:00:50,300 --> 00:00:54,180
see what happens as we increase the weight here. Okay.

18
00:00:54,180 --> 00:00:56,480
So we're done to about seven documents. Let's go ahead

19
00:00:56,480 --> 00:00:58,810
and take a look at those. I'll just pretty print

20
00:00:58,810 --> 00:01:02,440
this. Now note that one here is the Terex Titan. It

21
00:01:02,440 --> 00:01:05,830
weighs more than 500,000 kilos. This one caught my eye

22
00:01:05,830 --> 00:01:10,330
because, having two boys, we're all about the big dump trucks.

23
00:01:10,330 --> 00:01:12,430
Okay, let's take a look at an example from a

24
00:01:12,430 --> 00:01:15,320
different data set. Now this is one of my favorite features

25
00:01:15,320 --> 00:01:18,320
of MongoDB. It's a powerful way to dig into your data and

26
00:01:18,320 --> 00:01:22,180
really get a good idea for what it contains. As data scientists,

27
00:01:22,180 --> 00:01:24,920
especially when we're thinking about data wrangling and data cleaning, this is

28
00:01:24,920 --> 00:01:29,040
especially useful as you're auditing your data. We haven't talked about it yet,

29
00:01:29,040 --> 00:01:31,520
but it's important to audit your data. After you get it into

30
00:01:31,520 --> 00:01:34,750
the database, as well. So, looking forward to the next lesson where we'll

31
00:01:34,750 --> 00:01:38,080
be using the Twitter data set, let's have a little preview here.

32
00:01:38,080 --> 00:01:40,910
Now in order to do this, I need to access the Twitter collection

33
00:01:40,910 --> 00:01:42,573
which is in the same example as database.

34
00:01:44,600 --> 00:01:46,890
Okay, let's see what documents in this collection look like.

35
00:01:46,890 --> 00:01:50,440
In particular, I want to draw your attention to this entity's

36
00:01:50,440 --> 00:01:54,250
field for each Tweet and the hashtags field of this

37
00:01:54,250 --> 00:01:58,176
entity's sub-document. Hashtags is where we've pulled out essentially any

38
00:01:58,176 --> 00:02:02,194
hashtags that are used in this particular tweet. Okay, so

39
00:02:02,194 --> 00:02:05,334
let's do a little mongoDB magic here. And, what I'm

40
00:02:05,334 --> 00:02:07,320
going to do is set up a query where we are

41
00:02:07,320 --> 00:02:09,620
also going to do a projection. And I'm going to do

42
00:02:09,620 --> 00:02:13,020
all this using dot notation. Okay, so for our projection

43
00:02:13,020 --> 00:02:16,410
here, what I want to do is pull out just the

44
00:02:16,410 --> 00:02:19,610
hashtag itself. And, I'm going to make sure that that underscore

45
00:02:19,610 --> 00:02:22,470
id field doesn't appear just so the results are a little

46
00:02:22,470 --> 00:02:26,490
easier to read. And, here we go. So, we'll go

47
00:02:26,490 --> 00:02:27,920
back in just a second and take a look at the

48
00:02:27,920 --> 00:02:31,200
actual documents. But, what I did here with this query

49
00:02:31,200 --> 00:02:34,885
was find all tweets where the hashtags value for the entities

50
00:02:34,885 --> 00:02:39,280
sub-document was not equal to an empty array. Because the

51
00:02:39,280 --> 00:02:41,210
way this data set is set up, if there are

52
00:02:41,210 --> 00:02:43,240
no hashtags, the value is set to the empty array.

53
00:02:44,400 --> 00:02:46,780
Then what I've done is I've said, all right, instead

54
00:02:46,780 --> 00:02:48,850
of seeing the entire document for each document in the

55
00:02:48,850 --> 00:02:52,720
result set, I want to see just the text value

56
00:02:52,720 --> 00:02:56,330
for each of the hashtags. In a hashtags array. Okay

57
00:02:56,330 --> 00:03:00,650
and note here that for those tweets that actually have multiple

58
00:03:00,650 --> 00:03:03,530
hashtags in them, I'm going to get the text value

59
00:03:03,530 --> 00:03:07,110
for all of those. Okay now, let's get rid of

60
00:03:07,110 --> 00:03:10,870
the projection and see what this type of document looks

61
00:03:10,870 --> 00:03:13,300
like as a whole. And now you can see that for

62
00:03:13,300 --> 00:03:15,812
hashtags, we actually have an array. And so for every

63
00:03:15,812 --> 00:03:20,150
hashtag that's mentioned will be enclosed as a sub-document like this.

64
00:03:20,150 --> 00:03:22,320
With a field value for text and one for indices.

65
00:03:22,320 --> 00:03:25,850
These being the character position, where this begins and ends in

66
00:03:25,850 --> 00:03:32,810
the tweet. Okay? So what I've done with this query Is use dot notation, not just

67
00:03:32,810 --> 00:03:38,110
to find documents of interest to me, but also to project out exactly what values

68
00:03:38,110 --> 00:03:40,000
from those documents I want to see.

69
00:03:41,300 --> 00:03:43,790
And one more time, that's accessing the entities

70
00:03:43,790 --> 00:03:47,270
field, then the hashtags subfield and finally text

71
00:03:47,270 --> 00:03:50,290
subfield for all documents in this hashtags array.
