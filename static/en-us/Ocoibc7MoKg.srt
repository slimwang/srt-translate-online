1
00:00:00,025 --> 00:00:04,989
Quaternions represent the orientation of an object, how it's rotated. They can

2
00:00:04,989 --> 00:00:08,546
do the same thing as axis angle rotations. They rotate a model around a given

3
00:00:08,546 --> 00:00:11,946
axis by an angle. They get a lot of use in animation because you can easily

4
00:00:11,946 --> 00:00:16,247
interpolate between one orientation and another. Think of two vectors poking

5
00:00:16,247 --> 00:00:19,444
through a sphere at the origin. If you want to change your orientation and go

6
00:00:19,444 --> 00:00:23,432
from one vector to the other, there are a number of ways you can do it. Say you

7
00:00:23,432 --> 00:00:27,000
want to do this over four frames. You can't normally do this well with Euler

8
00:00:27,000 --> 00:00:30,400
angles. The change in direction is likely to need more than one Euler angle

9
00:00:30,400 --> 00:00:34,500
changed at a time. Changing two Euler angles at once can give you problems with

10
00:00:34,500 --> 00:00:39,210
Gimbal lock, as one angle is applied before the other. Euler angles are

11
00:00:39,210 --> 00:00:42,660
terrible for interpolation around an arbitrary axis, especially when the change

12
00:00:42,660 --> 00:00:46,432
is large. Using an axis angle scheme, you would go a quarter of the angle and

13
00:00:46,432 --> 00:00:50,082
form the matrix. Every frame would need to form a new matrix, which can get

14
00:00:50,082 --> 00:00:54,005
pricey. Creating each takes a number of trigonometric function calls.

15
00:00:54,005 --> 00:00:58,038
Quaternions are a third solution. You can set quaternions to perform the same

16
00:00:58,038 --> 00:01:01,750
interpolation in a clean way and in a form as compact as Axis-angle - just four

17
00:01:01,750 --> 00:01:06,985
values. No trigonometry calls are needed. Quaternions themselves are fairly

18
00:01:06,985 --> 00:01:10,165
non-intuitive as to what their four numbers mean in physical terms when

19
00:01:10,165 --> 00:01:14,226
compared to Axis-angle. However, just like you rarely look at a single number

20
00:01:14,226 --> 00:01:17,130
in, say, a rotation matrix, the meaning of the Quaternion's individual values

21
00:01:17,130 --> 00:01:21,996
doesn't really matter when you're using them. When you interpolate around an

22
00:01:21,996 --> 00:01:26,421
axis, it's called a SLERP, short for spherical linear interpolation. All this

23
00:01:26,421 --> 00:01:29,173
means is that you're moving from one point on the sphere to another in a direct

24
00:01:29,173 --> 00:01:33,895
and linear fashion. 3JS and many other packages support quaternions because of

25
00:01:33,895 --> 00:01:38,790
the simplicity. In 3JS, if you wanted to use angle axis rotations, you'd also

26
00:01:38,790 --> 00:01:41,715
have to maintain your own translation and scale matrices for the object being

27
00:01:41,715 --> 00:01:46,364
rotated. Because quaternions are fully supported as a separate interpolation

28
00:01:46,364 --> 00:01:49,876
system. You can enable these in 3JS, while still using the position and scale

29
00:01:49,876 --> 00:01:54,555
parameters. Quaternions make it easy to specify and interpolate between various

30
00:01:54,555 --> 00:01:58,570
orientations. Similar to rotation matrices, but with less values involved, you

31
00:01:58,570 --> 00:02:02,931
can also multiply quaternions together. Doing so produces a new quaternion that

32
00:02:02,931 --> 00:02:06,463
is a result of this series of rotations. Quaternions are often used for

33
00:02:06,463 --> 00:02:11,500
animation paths or flying controls. In fact, 3GS uses them for just that class,

34
00:02:11,500 --> 00:02:15,440
FlyControls.js. That said, you do have to be careful in using quaternions with

35
00:02:15,440 --> 00:02:18,080
cameras, in that the up vector will not be maintained throughout the SLERP, and

36
00:02:18,080 --> 00:02:22,964
you'll need to reorient. Try the demo that follows. It moves the bird's hat

37
00:02:22,964 --> 00:02:26,920
back and forth on its head in a jaunty way. You can choose to interpolate using

38
00:02:26,920 --> 00:02:31,280
Euler angles or quaternions. With Euler angles on, try setting the angles to

39
00:02:31,280 --> 00:02:34,324
their maximums. If you look from above, you'll see that the path is not

40
00:02:34,324 --> 00:02:37,340
straight around the head but rather takes an s-shaped curve.
