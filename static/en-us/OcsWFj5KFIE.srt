1
00:00:00,120 --> 00:00:03,008
The type of synchronization we use for atomic

2
00:00:03,008 --> 00:00:07,070
sections is called mutual exclusion or lock. So this

3
00:00:07,070 --> 00:00:09,010
is really an example of where a lock will

4
00:00:09,010 --> 00:00:11,890
be needed. What we really need to do is

5
00:00:11,890 --> 00:00:16,250
say something like, I'm entering, don't come in here.

6
00:00:16,250 --> 00:00:18,890
Then do this, then say, I'm leaving, now you

7
00:00:18,890 --> 00:00:21,744
can come in. And when this one is done,

8
00:00:21,744 --> 00:00:25,150
this one can then say, I'm entering, I'm leaving.

9
00:00:25,150 --> 00:00:27,520
But if this thread comes and wants to

10
00:00:27,520 --> 00:00:31,250
continue past this point while the first thread is

11
00:00:31,250 --> 00:00:34,650
already in the critical section, we should wait here.

12
00:00:34,650 --> 00:00:37,914
So what we want here really is, before we

13
00:00:37,914 --> 00:00:41,850
get into the critical section, qe need to lock,

14
00:00:41,850 --> 00:00:44,956
a lock. Let's call that count lock that corresponds

15
00:00:44,956 --> 00:00:47,658
to a given element of disarray. So count lock

16
00:00:47,658 --> 00:00:50,570
of L is a lock that corresponds to count

17
00:00:50,570 --> 00:00:54,344
of L. If this lock currently is open, then

18
00:00:54,344 --> 00:00:57,646
we will enter. If this lock is currently locked,

19
00:00:57,646 --> 00:01:00,830
then we will spin there until it becomes open.

20
00:01:00,830 --> 00:01:04,379
Once we have grabbed the lock, we can enter here.

21
00:01:04,379 --> 00:01:06,830
The other thread will do the same. So the

22
00:01:06,830 --> 00:01:09,660
first one of them that succeeds in grabbing the lock

23
00:01:09,660 --> 00:01:13,070
will enter this critical section. The other one will

24
00:01:13,070 --> 00:01:16,210
now realize that this count lock has been locked and

25
00:01:16,210 --> 00:01:18,870
will have to wait there. Once we leave

26
00:01:18,870 --> 00:01:22,396
the critical section, we will unlock the lock. And

27
00:01:22,396 --> 00:01:24,442
now, if this one is waiting here at that

28
00:01:24,442 --> 00:01:26,674
point it sees that the lock is now available

29
00:01:26,674 --> 00:01:29,960
and starts executing the critical section, and then releases

30
00:01:29,960 --> 00:01:34,280
the lock. Note that having the lock and unlock

31
00:01:34,280 --> 00:01:37,880
enforces mutual exclusion of this code. We do this

32
00:01:37,880 --> 00:01:41,560
alone. And we do this alone. But it doesn't

33
00:01:41,560 --> 00:01:45,520
impose a particular order between them. So, whichever

34
00:01:45,520 --> 00:01:48,590
of them comes first to this lock will

35
00:01:48,590 --> 00:01:51,000
execute its critical section first. So we can

36
00:01:51,000 --> 00:01:54,290
either have this happen first, and then this happen

37
00:01:54,290 --> 00:01:57,330
second. Or we can have this happens first,

38
00:01:57,330 --> 00:01:59,980
and this happens second. What the lock is really

39
00:01:59,980 --> 00:02:04,100
preventing is interleaving when these are happening simultaneously.

40
00:02:04,100 --> 00:02:06,980
But it doesn't prevent, for example, this second thread

41
00:02:06,980 --> 00:02:10,729
doing this first and only then the first thread gets to do it.
