1
00:00:00,090 --> 00:00:03,780
Remember that a service is where you
would put view independent logic.

2
00:00:03,780 --> 00:00:07,000
At first, services seem very
similar to controllers,

3
00:00:07,000 --> 00:00:09,300
both of them provide
data to an application.

4
00:00:09,300 --> 00:00:13,050
A major difference is that services
are not intended for just one view.

5
00:00:13,050 --> 00:00:15,840
A service is not tied to
a specific controller but

6
00:00:15,840 --> 00:00:17,980
can be used by any
number of controllers.

7
00:00:17,980 --> 00:00:21,920
For example, this user service has
information about the logged in user.

8
00:00:21,920 --> 00:00:24,500
And account controller
could use the user service

9
00:00:24,500 --> 00:00:26,630
to supply data to its template and

10
00:00:26,630 --> 00:00:30,320
there's also the navigation controller
which needs the user information.

11
00:00:30,320 --> 00:00:33,380
The user service can be injected into
both controllers since it's just

12
00:00:33,380 --> 00:00:35,330
a source of data and functionality.

13
00:00:35,330 --> 00:00:38,340
In our app we might want data from
the menu items to be displayed in other

14
00:00:38,340 --> 00:00:39,790
locations.

15
00:00:39,790 --> 00:00:43,040
So let's generate a service to detangle
our menu data from this specific

16
00:00:43,040 --> 00:00:44,980
controller and template.

17
00:00:44,980 --> 00:00:47,130
Then we'll see how we can
inject it into a controller.

18
00:00:47,130 --> 00:00:50,530
We can generate a service with
the Angular generator by running yo

19
00:00:50,530 --> 00:00:52,820
angular service and
providing a name for the service.

20
00:00:54,850 --> 00:00:58,700
Well this should look familiar since it
starts out exactly like a controller.

21
00:00:58,700 --> 00:01:00,260
We get our apps module.

22
00:01:00,260 --> 00:01:01,580
Create a new service with a name.

23
00:01:01,580 --> 00:01:03,790
And then provide the function.

24
00:01:03,790 --> 00:01:07,960
Just like with controllers, when we call
service on the module, this name and

25
00:01:07,960 --> 00:01:10,200
function are being stored
with Angular's injector.

26
00:01:11,270 --> 00:01:12,610
When a controller asks for

27
00:01:12,610 --> 00:01:16,269
service with this name, Angular knows
where it's located and how to create it.

28
00:01:17,720 --> 00:01:21,280
Since the food finder service will be
in charge of all menu information,

29
00:01:21,280 --> 00:01:24,580
let's move this data to a JSON file and
convert it to proper JSON.

30
00:01:26,770 --> 00:01:29,309
We'll use the food finder
service to fetch this file.

31
00:01:30,550 --> 00:01:33,780
Let's create a get menu function and
use jQuery to fetch the JSON file.

32
00:01:35,600 --> 00:01:38,480
So we've extracted the menu and
set up the service.

33
00:01:38,480 --> 00:01:41,370
Now we just need to hook the service and
the controller together.

34
00:01:41,370 --> 00:01:45,060
The format to inject a service into
a controller looks a little odd.

35
00:01:45,060 --> 00:01:46,990
So let's take it step by step.

36
00:01:46,990 --> 00:01:49,080
First I'll highlight
the entire function,

37
00:01:49,080 --> 00:01:51,390
then I'll copy it and delete it.

38
00:01:51,390 --> 00:01:54,260
To inject something into a controller
we need to pass an array of

39
00:01:54,260 --> 00:01:55,470
things to inject.

40
00:01:55,470 --> 00:02:00,295
So add an array, give the names of
the services we want to inject.

41
00:02:00,295 --> 00:02:01,775
For now it's just a food finder service.

42
00:02:03,685 --> 00:02:04,995
Then pace the controller back in.

43
00:02:06,245 --> 00:02:09,119
The service is now being injected
into the controller as an argument.

44
00:02:10,360 --> 00:02:11,890
To use the service though,

45
00:02:11,890 --> 00:02:13,940
the controller needs to
store it in a variable.

46
00:02:13,940 --> 00:02:16,100
So we'll add a variable
with the name menu here.

47
00:02:17,800 --> 00:02:21,350
To get the menu we need to call
foodfinder's getMenu function.

48
00:02:24,110 --> 00:02:25,850
Since getMenu uses jQuery,

49
00:02:25,850 --> 00:02:28,479
it returns a jQuery deferred
object similar to a promise.

50
00:02:29,820 --> 00:02:34,099
We call then, and when our data gets
returned, we can set it to this items.

51
00:02:36,957 --> 00:02:40,047
Since the this keyword
is contextually based,

52
00:02:40,047 --> 00:02:43,910
this in here isn't
the same as this out here.

53
00:02:43,910 --> 00:02:46,770
We'll just use lexical
scope to fix this.

54
00:02:46,770 --> 00:02:50,210
Typically the variable vm for
view model is used.

55
00:02:51,920 --> 00:02:54,940
And we're still showing
the exact same information.

56
00:02:54,940 --> 00:02:57,620
But now the data is not
tied to this specific view.

57
00:02:59,240 --> 00:03:02,640
There's no limit to the number of
services that can be injected.

58
00:03:02,640 --> 00:03:05,580
Anything that needs to be injected
comes first in the array.

59
00:03:05,580 --> 00:03:08,340
Then the function that's receiving
everything comes at the end, and

60
00:03:08,340 --> 00:03:11,270
has variables for each injected service,
in the same order.
