1
00:00:00,025 --> 00:00:04,197
So which approach will launch more threads: Thread per row, thread per element?

2
00:00:04,197 --> 00:00:06,275
The answer is thread per element.

3
00:00:06,275 --> 00:00:09,545
Thread per element will launch a thread for every X in this matrix,

4
00:00:09,545 --> 00:00:14,002
but thread per row, on the other hand, will only launch a thread for every row in this matrix.

5
00:00:14,002 --> 00:00:19,255
So thread per element will certainly have at least as many, if not many more threads than thread per row.

6
00:00:19,255 --> 00:00:22,692
Which approach will require communication between threads?

7
00:00:22,692 --> 00:00:24,928
Well, that's also going to be thread per element.

8
00:00:24,928 --> 00:00:27,234
What's going to happen there is

9
00:00:27,234 --> 00:00:30,767
we compute a partial product for each element in a particular row

10
00:00:30,767 --> 00:00:35,836
and then we need to add up those partial products across those elements to create the final value.

11
00:00:35,836 --> 00:00:40,982
And if you remember we use the segmented scan operation to be able to do that in Unit 4.

12
00:00:40,982 --> 00:00:43,851
The final question, which approach will do more work per thread?

13
00:00:43,851 --> 00:00:46,147
Well that's going to be thread per row.

14
00:00:46,147 --> 00:00:49,686
This row has to do all the partial products and add them up,

15
00:00:49,686 --> 00:00:53,888
whereas thread per element only does 1 partial product per element

16
00:00:53,888 --> 00:00:59,563
and then combines the work across multiple threads to be able to get a final result.
