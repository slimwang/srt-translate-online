1
00:00:00,180 --> 00:00:03,680
Now that we understand how
hardware-supported protection levels can

2
00:00:03,680 --> 00:00:08,160
be used, we can start explaining how
virtualization techniques can be

3
00:00:08,160 --> 00:00:12,800
developed that achieved our goal to
efficiently at near native speeds

4
00:00:12,800 --> 00:00:15,710
allow execution of virtual machines

5
00:00:15,710 --> 00:00:20,220
on top of these basically
identical virtual platforms.

6
00:00:20,220 --> 00:00:24,220
First, guest instructions are executed
directly by the hardware.

7
00:00:24,220 --> 00:00:26,070
That's important thing to know.

8
00:00:26,070 --> 00:00:29,170
The virtual machine
monitor does not interfere

9
00:00:29,170 --> 00:00:33,990
with every single instruction that is
issued by the guest operating system, or

10
00:00:33,990 --> 00:00:35,910
its applications for that matter.

11
00:00:35,910 --> 00:00:39,770
What this means is that just like the OS
doesn't interfere on every single

12
00:00:39,770 --> 00:00:45,305
instruction and memory access, here the
hypervisor does not interpose itself on

13
00:00:45,305 --> 00:00:50,860
every single operation and every single
memory access performed by the guest.

14
00:00:50,860 --> 00:00:53,250
As long as the guest
operating system and

15
00:00:53,250 --> 00:00:57,840
its applications operate within
the resources that were allocated

16
00:00:57,840 --> 00:01:01,850
to them by the hypervisor,
then everything is safe.

17
00:01:01,850 --> 00:01:06,270
The instructions in those cases
will operate at hardware speeds and

18
00:01:06,270 --> 00:01:10,680
this will lead to efficiency of
the virtualization solution.

19
00:01:10,680 --> 00:01:15,600
Whenever a privileged instruction gets
accessed, then the processor causes

20
00:01:15,600 --> 00:01:20,370
a trap, and control is automatically
switched to the most privileged level,

21
00:01:20,370 --> 00:01:22,000
so to the hypervisor.

22
00:01:22,000 --> 00:01:26,130
At this point the hypervisor can
determine whether the operation is to

23
00:01:26,130 --> 00:01:27,690
be an allowed or not.

24
00:01:27,690 --> 00:01:31,450
If the operation is an illegal
operation and it shouldn't be allowed,

25
00:01:31,450 --> 00:01:35,910
then the hypervisor can perform some
action like to terminate the VM.

26
00:01:35,910 --> 00:01:40,110
If the operation is, should be allowed,
however, it's a legal operation,

27
00:01:40,110 --> 00:01:45,990
in that case, the hypervisor should
perform the necessary emulation so

28
00:01:45,990 --> 00:01:51,020
that the guest operating system is
under the impression that it actually

29
00:01:51,020 --> 00:01:53,240
does have control over the hardware.

30
00:01:53,240 --> 00:01:57,640
So from the guest perspective, it should
seem as if the hardware did exactly what

31
00:01:57,640 --> 00:02:01,220
it was expected to do
given the instruction.

32
00:02:01,220 --> 00:02:02,400
In reality, however,

33
00:02:02,400 --> 00:02:07,140
it was the hypervisor that intervened,
that potentially executed

34
00:02:07,140 --> 00:02:11,730
slightly different set of operations
in order to achieve that emulation.

35
00:02:11,730 --> 00:02:16,130
This trap-and-emulate mechanism is
a key method in which virtualization

36
00:02:16,130 --> 00:02:20,870
solutions rely in order to achieve
efficient CPU virtualization.
