1
00:00:00,250 --> 00:00:01,470
So let's look at what the code for

2
00:00:01,470 --> 00:00:04,660
this would look like with a quick
walk-through some of the pieces.

3
00:00:04,660 --> 00:00:07,240
You'll need to do something similar
later using the documentation

4
00:00:07,240 --> 00:00:08,620
as a guide.

5
00:00:08,620 --> 00:00:12,110
Imagine we need to transmit number of
steps detected on an Android Wear device

6
00:00:12,110 --> 00:00:13,220
to a paired up phone.

7
00:00:13,220 --> 00:00:15,660
Let's open up the MainActivity.java
file contained

8
00:00:15,660 --> 00:00:18,060
in the wearable project we just created.

9
00:00:18,060 --> 00:00:21,740
So it's in the wear directory
> java > MainActivity.

10
00:00:21,740 --> 00:00:24,400
The data API is provided
by Google Play Services, so

11
00:00:24,400 --> 00:00:26,215
we need to first create
a connection to this API.

12
00:00:26,215 --> 00:00:28,820
Note that this does not
connect to the wearable,

13
00:00:28,820 --> 00:00:32,030
it just allows your app to make
Google Play Services API calls.

14
00:00:32,030 --> 00:00:33,541
So, after we put this code in,

15
00:00:33,541 --> 00:00:36,872
we need to hit Alt + Enter a few
times to add the necessary packages.

16
00:00:36,872 --> 00:00:40,420
We also need to create a variable
to store the connection in.

17
00:00:40,420 --> 00:00:43,725
And we also need to implement two
classes that are part of GoogleApiClient

18
00:00:43,725 --> 00:00:46,380
for handling connection success and
failure.

19
00:00:46,380 --> 00:00:48,790
So lets provide the implementation for
those methods here.

20
00:00:48,790 --> 00:00:52,350
We don't have any code to put in them,
so let's just leave them blank for now.

21
00:00:52,350 --> 00:00:54,810
Now, let's look at the code
used to create a data item.

22
00:00:54,810 --> 00:00:58,030
Let's create a method send step
count that does this for us.

23
00:00:58,030 --> 00:01:02,390
We firstly create a PutDataMapRequest
and we need to specify a path for it.

24
00:01:02,390 --> 00:01:04,690
The path shown here is used
to reference this object and

25
00:01:04,690 --> 00:01:07,790
make it unique compared to all
the other once that we can create.

26
00:01:07,790 --> 00:01:12,360
Next we use put methods to add
an integer and long key value pair.

27
00:01:12,360 --> 00:01:15,870
We then use putDataItem to submit the
object, and then we need to check for

28
00:01:15,870 --> 00:01:17,980
errors with the callback
to find underneath.

29
00:01:17,980 --> 00:01:19,440
Error handling is very interesting,

30
00:01:19,440 --> 00:01:22,520
because it just indicates that the
object was successfully stored locally.

31
00:01:22,520 --> 00:01:25,940
It does not tell you if the object
was received by remote device yet.

32
00:01:25,940 --> 00:01:29,190
It is totally okay for the remote
device to not even be connected.

33
00:01:29,190 --> 00:01:32,500
When the device connects, the data
item will be synchronized later on.

34
00:01:32,500 --> 00:01:35,880
So you'll never receive feedback that
the remote device has received it.

35
00:01:35,880 --> 00:01:37,520
If you need this kind of feedback,

36
00:01:37,520 --> 00:01:40,460
you'll need to code up some kind
of feedback mechanism yourself.

37
00:01:40,460 --> 00:01:43,460
Another analogy for this is that
a package delivery company giving you

38
00:01:43,460 --> 00:01:45,360
an acknowledgment that
the package has been collected.

39
00:01:45,360 --> 00:01:47,910
It has not been delivered
to the recipient yet and

40
00:01:47,910 --> 00:01:49,640
might take some time to get there.

41
00:01:49,640 --> 00:01:53,400
One important point is that data items
are promised to never be lost and

42
00:01:53,400 --> 00:01:56,910
will eventually arrive once
the other device is paired up.

43
00:01:56,910 --> 00:01:59,120
Let's now look at the receiving
code on the phone.

44
00:01:59,120 --> 00:02:02,890
So let's expend the project viewer,
and work in the mobile project now.

45
00:02:02,890 --> 00:02:06,070
On the receiver side it's quite easy
to find when new data items arrive,

46
00:02:06,070 --> 00:02:08,508
you simply create a service for this.

47
00:02:08,508 --> 00:02:12,890
So let's go to File > New > Service.

48
00:02:12,890 --> 00:02:15,360
Create it with all the defaults,
and then hit Enter.

49
00:02:15,360 --> 00:02:18,045
The first thing we need to do,
is make sure it inherits from

50
00:02:18,045 --> 00:02:21,850
WearableListenerService and
add dependencies.

51
00:02:21,850 --> 00:02:24,110
You can also remove the entire
implementation because we're

52
00:02:24,110 --> 00:02:25,150
going to replace it.

53
00:02:25,150 --> 00:02:27,164
You then override
the onDataChange method,

54
00:02:27,164 --> 00:02:29,718
which is past an array of data
events that have occurred.

55
00:02:29,718 --> 00:02:32,830
For each DataEvent object you
can retrieve the DataMap,

56
00:02:32,830 --> 00:02:36,960
and then extract out the path and
values for each key from before.

57
00:02:36,960 --> 00:02:39,860
You can see here that we're looking for
a change, we're then extracting

58
00:02:39,860 --> 00:02:43,270
out the path, we're testing if
the path equals a certain string, and

59
00:02:43,270 --> 00:02:46,670
then we pull out the integer and long
value to do whatever we want with it.

60
00:02:46,670 --> 00:02:49,850
The final step is to adjust
the AndroidManifest.xml on the receiving

61
00:02:49,850 --> 00:02:53,910
side to make sure our listener service
handles the BIND_LISTENER intent.

62
00:02:53,910 --> 00:02:57,390
Google Play Services will then handle
all the necessary behind the scenes work

63
00:02:57,390 --> 00:02:59,300
to get the data items to your listener.

64
00:02:59,300 --> 00:03:01,370
You don't need to start
the service itself.

65
00:03:01,370 --> 00:03:05,880
So let's expand the project and
open up the AndroidManifest.xml file.

66
00:03:05,880 --> 00:03:09,240
The final step is to adjust
the AndroidManifest.xml on the receiving

67
00:03:09,240 --> 00:03:13,220
side to make sure our listener service
handles the BIND_LISTENER intent.

68
00:03:13,220 --> 00:03:16,770
Google Play Services will then handle
all the necessary behind the scenes work

69
00:03:16,770 --> 00:03:18,870
to get the data items to your listener.

70
00:03:18,870 --> 00:03:21,460
You don't need to worry about
starting this service yourself.

71
00:03:21,460 --> 00:03:22,220
Oh, and one more thing.

72
00:03:22,220 --> 00:03:25,470
Let's go back to the sending code and
talk about large items.

73
00:03:25,470 --> 00:03:28,510
Data items are typically
limited to about 100 KBs.

74
00:03:28,510 --> 00:03:30,550
So make sure you do
not exceed this size.

75
00:03:30,550 --> 00:03:32,780
However, if you need to send
something like an image,

76
00:03:32,780 --> 00:03:35,070
it's possible using the Asset class.

77
00:03:35,070 --> 00:03:38,030
You convert you bitmap into
a png byte stream, and

78
00:03:38,030 --> 00:03:41,290
then store it into a data
item using putAsset.

79
00:03:41,290 --> 00:03:44,910
This deals with sending the image in a
way that works around the 100 kB limit.

80
00:03:44,910 --> 00:03:46,430
So that's it for sending data items.

81
00:03:46,430 --> 00:03:49,590
The fundamentals are really easy and
most of the hard work like handling

82
00:03:49,590 --> 00:03:52,930
the connections and sending the data
is all taken care of for you.

83
00:03:52,930 --> 00:03:55,520
So you can focus on the important
parts of your app instead.
