1
00:00:00,130 --> 00:00:04,070
Now early versions of HTTP, actually only had

2
00:00:04,070 --> 00:00:07,480
one request or response for every TCP connection. On

3
00:00:07,480 --> 00:00:09,770
the plus side, this is simple to implement.

4
00:00:09,770 --> 00:00:11,590
But the main drawback is that is requires a

5
00:00:11,590 --> 00:00:15,810
TCP connection, for every request. Thereby introducing a

6
00:00:15,810 --> 00:00:18,790
lot of overhead and slowing transfer. First of all

7
00:00:18,790 --> 00:00:21,180
we need a TCP three-way handshake for every

8
00:00:21,180 --> 00:00:25,190
request, and TCP must start in slow start every

9
00:00:25,190 --> 00:00:27,970
time the connection opens. This is exacerbated

10
00:00:27,970 --> 00:00:31,380
by the fact that short transfers are very

11
00:00:31,380 --> 00:00:36,640
bad for TCP because TCP is always stuck in slow start and never gets a chance

12
00:00:36,640 --> 00:00:39,610
to actually ramp up to steady state

13
00:00:39,610 --> 00:00:44,050
transfer. Also, as TCP connections are terminated after

14
00:00:44,050 --> 00:00:46,540
every request is completed, the servers have many

15
00:00:46,540 --> 00:00:50,630
connections that are forced to keep TCP connections

16
00:00:50,630 --> 00:00:56,110
in time-wait states until the timers expire, thus resulting in additional

17
00:00:56,110 --> 00:01:00,010
resources that the server needs to keep reserved even after the

18
00:01:00,010 --> 00:01:05,050
connections have completed. So a solution to increased efficiency and account

19
00:01:05,050 --> 00:01:08,600
for many of these drawbacks is to use something called persistent connections.
