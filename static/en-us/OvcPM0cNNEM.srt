1
00:00:00,460 --> 00:00:01,400
Not yet.
There we go.

2
00:00:01,400 --> 00:00:02,660
Now we're live.

3
00:00:02,660 --> 00:00:03,280
Hey everybody.

4
00:00:03,280 --> 00:00:06,350
Welcome to another webcast.

5
00:00:06,350 --> 00:00:08,890
Today, joining me is Ty.

6
00:00:08,890 --> 00:00:12,380
And he's going to sit down and
talk to us a little bit about backbone.

7
00:00:12,380 --> 00:00:16,460
We're going to kind of go over
some of the basics of backbone and

8
00:00:16,460 --> 00:00:18,220
what it allows you to do you.

9
00:00:18,220 --> 00:00:21,760
For those of you who
are unfamiliar with backbone and

10
00:00:21,760 --> 00:00:26,210
where it fits into the course where
it's part of the optional health tracker

11
00:00:26,210 --> 00:00:30,500
web application that's immediately
after the neighborhood map.

12
00:00:30,500 --> 00:00:33,770
And ultimately Backbone's just
another framework which is

13
00:00:33,770 --> 00:00:36,890
going to include models,
collections, and views.

14
00:00:36,890 --> 00:00:42,220
And this project is really meant
to kind of let you branch out and

15
00:00:42,220 --> 00:00:43,750
explore this new framework.

16
00:00:44,890 --> 00:00:49,107
Let you explore something I'm going to
Knockout and Backbone is actually pretty

17
00:00:49,107 --> 00:00:53,076
common in a lot of web applications and
this actually kind of holding together

18
00:00:53,076 --> 00:00:56,330
a lot of really,
really big web applications out there.

19
00:00:56,330 --> 00:01:00,600
So it's a pretty desirable skill
to have worked in Backbone and

20
00:01:00,600 --> 00:01:02,770
have built something with it.

21
00:01:02,770 --> 00:01:05,410
So I guess Ty,
you want to introduce yourself and

22
00:01:05,410 --> 00:01:07,780
explain to people what Backbone is?

23
00:01:07,780 --> 00:01:08,760
>> Yeah, sure John.

24
00:01:08,760 --> 00:01:09,930
So hey everybody.

25
00:01:09,930 --> 00:01:12,590
Just like John, I'm a front
end coach here at Udacity and

26
00:01:12,590 --> 00:01:14,805
I'm also a full stack web developer.

27
00:01:14,805 --> 00:01:19,960
So, I guess the first logical thing
to start with is what is Backbone?

28
00:01:19,960 --> 00:01:23,400
And It's a front end
JavaScript MVC framework.

29
00:01:23,400 --> 00:01:25,880
For those of you who even don't
know what MVC is it stands for

30
00:01:25,880 --> 00:01:27,620
Model View Controller.

31
00:01:27,620 --> 00:01:30,520
And it's basically a design
paradigm to help you kind of

32
00:01:30,520 --> 00:01:34,120
separate your front end application
into logical components.

33
00:01:34,120 --> 00:01:37,630
So like the, model provides structure
for your application's data.

34
00:01:37,630 --> 00:01:40,680
For example, like storing,
representing people in a database.

35
00:01:40,680 --> 00:01:43,330
You could have a person,
model, something like that.

36
00:01:43,330 --> 00:01:48,580
The view as the name suggests has to
do with the UI of your application and

37
00:01:48,580 --> 00:01:52,740
it is the view is always updated based
on changes to the model, generally,

38
00:01:52,740 --> 00:01:55,160
or reacting to user input.

39
00:01:55,160 --> 00:01:59,080
So that's how the users interact with
your data and the application itself.

40
00:01:59,080 --> 00:02:01,760
And the controller,
which is the C part of MVC,

41
00:02:01,760 --> 00:02:05,500
you could consider kind of the brain
of the application to some degree.

42
00:02:05,500 --> 00:02:09,288
It updates both the model and
the view, tying everything together.

43
00:02:11,210 --> 00:02:14,210
So we'll go back to John briefly and
talk about

44
00:02:14,210 --> 00:02:17,568
getting set up with Backbone for a bit
>> Yeah, and

45
00:02:17,568 --> 00:02:22,000
I think, it's always good to remind
everybody to like what MVC is.

46
00:02:22,000 --> 00:02:23,120
I know that should be for

47
00:02:23,120 --> 00:02:26,390
those of you who have gone through
project five and everything.

48
00:02:26,390 --> 00:02:29,440
Should be pretty familiar
at this point but

49
00:02:29,440 --> 00:02:34,040
it's easy to kind of forget
what each component it is.

50
00:02:34,040 --> 00:02:37,629
Each component is used for and you'll
probably hear it called or referred to

51
00:02:37,629 --> 00:02:40,970
as a bunch of different things like-
>> Alphabet soup.

52
00:02:40,970 --> 00:02:45,730
>> Right, model view, view model, model
view controller, model view presenter.

53
00:02:45,730 --> 00:02:51,890
And for general purposes you can kind of
consider them all the same thing.

54
00:02:51,890 --> 00:02:55,415
When you start digging deeper you
realize there's like these small little

55
00:02:55,415 --> 00:03:00,153
differences, but generally what we'll
be dealing with is you know the MVC

56
00:03:00,153 --> 00:03:03,189
model viewer controller.

57
00:03:03,189 --> 00:03:07,570
Now as far as setting up Backbone,
it's really straightforward.

58
00:03:07,570 --> 00:03:10,250
It's just,
it's just a tiny little script.

59
00:03:10,250 --> 00:03:12,280
It's pretty tiny framework.

60
00:03:12,280 --> 00:03:16,150
>> Yeah, if compressed I think
it's like 8 kilobytes, right.

61
00:03:16,150 --> 00:03:19,320
>> Yeah super super super tiny
compared to like some of these bigger

62
00:03:19,320 --> 00:03:22,230
ones you have out there like Ember,
Angular.

63
00:03:22,230 --> 00:03:27,690
But obviously right that small size
means you're not going to kind of get

64
00:03:27,690 --> 00:03:33,040
some of the more stronger architecture
like you get with Angular and Ember.

65
00:03:33,040 --> 00:03:37,310
Or some of just the more
robust set of tools.

66
00:03:37,310 --> 00:03:41,740
Backbone is just a very
stripped down MVC framework.

67
00:03:41,740 --> 00:03:45,170
A lot of the decision making
is going to be left up to you.

68
00:03:45,170 --> 00:03:48,600
And you're not going to
have a lot of these sort of

69
00:03:48,600 --> 00:03:52,320
fancy you ways to do you things
like you have with Angular and

70
00:03:52,320 --> 00:03:57,060
Ember or some of the other
big frameworks out there.

71
00:03:57,060 --> 00:04:00,550
But fortunately it makes
setup pretty easy.

72
00:04:00,550 --> 00:04:03,680
You just go download it
from backbonejs.org, or

73
00:04:03,680 --> 00:04:05,930
you can use a package
manager like Bower.

74
00:04:07,190 --> 00:04:10,010
For those of you who haven't used
Bower yet, there's a whole forum

75
00:04:10,010 --> 00:04:14,078
post about it, or you can just go
to Bower.io to check that out.

76
00:04:14,078 --> 00:04:16,480
And, from there,

77
00:04:16,480 --> 00:04:20,291
you only need two dependencies
to run at jQuery and underscore.

78
00:04:20,291 --> 00:04:24,745
jQuery are largely uses to sort
of interact with the DOM and then

79
00:04:24,745 --> 00:04:29,320
underscore a uses for templating which
out of the box Backbone doesn't provide.

80
00:04:30,580 --> 00:04:33,860
So it just and relies on underscore
to do a lot of the templating and

81
00:04:33,860 --> 00:04:37,410
some other helper functions
included with that.

82
00:04:37,410 --> 00:04:42,210
And the cool thing is along with being
able to bring these in from Bower or

83
00:04:42,210 --> 00:04:45,490
download this and
include them in your project.

84
00:04:45,490 --> 00:04:47,910
You can also just use a CDN
to bring them all in.

85
00:04:47,910 --> 00:04:51,750
And just include them as
links in your header tag or

86
00:04:51,750 --> 00:04:53,940
scripts of the bottom of your file.

87
00:04:53,940 --> 00:04:57,080
That's pretty much all
there is to it to like get

88
00:04:57,080 --> 00:04:58,880
Backbone included in your project.

89
00:04:58,880 --> 00:05:00,860
Really, really straightforward.

90
00:05:00,860 --> 00:05:03,780
It's not like something like React.

91
00:05:03,780 --> 00:05:07,830
React just sounds like an entire build
process to compile your code into

92
00:05:07,830 --> 00:05:08,810
usable JavaScript.

93
00:05:08,810 --> 00:05:10,480
It's really straightforward.

94
00:05:10,480 --> 00:05:12,050
It's written in native JavaScript, so

95
00:05:12,050 --> 00:05:15,280
it should run real easily just
by importing those scripts.

96
00:05:16,780 --> 00:05:19,000
So yeah that's pretty much setting up.

97
00:05:19,000 --> 00:05:21,490
I think the next thing we
want to kind of cover here is

98
00:05:21,490 --> 00:05:23,400
to talk a little bit about models and
collections.

99
00:05:23,400 --> 00:05:26,370
And I think Ty wanted to talk to
everybody a little bit about that.

100
00:05:27,402 --> 00:05:32,990
>> Yes so as with most applications,
data is a very important aspect of them.

101
00:05:32,990 --> 00:05:37,540
So the way Backbone handles your data
is through what they call models and

102
00:05:37,540 --> 00:05:41,430
collections, which is the same
M from MVC and collections.

103
00:05:41,430 --> 00:05:47,100
You could consider like Backbones
database for holding models.

104
00:05:47,100 --> 00:05:51,150
>> I think it's important to note that

105
00:05:51,150 --> 00:05:55,101
the models aren't
necessarily persistent.

106
00:05:55,101 --> 00:05:59,480
Like, this isn't like putting
your data into a database, right?

107
00:05:59,480 --> 00:06:02,520
>> Yeah, we're not working
with like SQL or MongoDB here.

108
00:06:02,520 --> 00:06:06,520
Yet you can interact with those, but
this is strictly providing structure for

109
00:06:06,520 --> 00:06:08,090
your data within the code.

110
00:06:08,090 --> 00:06:09,980
It's not actually saving it.

111
00:06:09,980 --> 00:06:14,850
In any kind of file yet or on any kind
of remote database nothing like that.

112
00:06:14,850 --> 00:06:16,110
You can certainly do that.

113
00:06:16,110 --> 00:06:20,920
But this is just backbones lingo for
providing structure for your data.

114
00:06:20,920 --> 00:06:25,960
So when I say model, I mean backbone
model, not like any kind of database.

115
00:06:25,960 --> 00:06:30,050
So I think the concept of models and
collections are pretty straightforward.

116
00:06:30,050 --> 00:06:32,670
So I actually want to jump
right into an example.

117
00:06:33,670 --> 00:06:39,077
So I'm going to screen share with you
guys and zoom in a bit so you can see.

118
00:06:39,077 --> 00:06:40,296
Where are we?

119
00:06:44,498 --> 00:06:47,280
So you guys should be able to see that.

120
00:06:47,280 --> 00:06:49,290
John how does that look on your end?

121
00:06:49,290 --> 00:06:50,450
>> Hey, it looks pretty good.

122
00:06:50,450 --> 00:06:52,767
Maybe just zoom in a little more.

123
00:06:52,767 --> 00:06:55,000
But it looks pretty good on my side.

124
00:06:56,030 --> 00:06:57,130
>> Yes, is that readable?

125
00:06:57,130 --> 00:06:59,060
>> Yeah, that's readable..

126
00:06:59,060 --> 00:07:00,650
>> Okay, so
we'll just step through this.

127
00:07:00,650 --> 00:07:02,970
So we can ignore the first
couple of lines.

128
00:07:02,970 --> 00:07:06,120
I've basically just wrapped all of
the code in an anonymous function.

129
00:07:07,330 --> 00:07:10,690
After the webcast is over will
be uploading a forum post and

130
00:07:10,690 --> 00:07:14,030
I'll explain why that's kind of
important in front end code, but

131
00:07:14,030 --> 00:07:17,210
it's not super relevant right now.

132
00:07:17,210 --> 00:07:19,830
So, we can see right here
starting on line four,

133
00:07:19,830 --> 00:07:24,280
I have created a person model and
it's pretty easy.

134
00:07:24,280 --> 00:07:28,260
What you do is you take the function
that backbone provides,

135
00:07:28,260 --> 00:07:30,020
model backbone's a model.

136
00:07:30,020 --> 00:07:32,040
And you just call
the extend function and

137
00:07:32,040 --> 00:07:35,262
pass in an object with
your customizations.

138
00:07:35,262 --> 00:07:38,610
So that's just a base to use
the model at the basic level.

139
00:07:38,610 --> 00:07:40,190
There's really not much you have to do.

140
00:07:40,190 --> 00:07:43,968
All I've done is kind of
provide some default for

141
00:07:43,968 --> 00:07:47,140
let to describe some defaults
to basically describe like

142
00:07:47,140 --> 00:07:50,060
what the structure of every
person is going to look like and

143
00:07:50,060 --> 00:07:54,310
each person is going to have at
the minimum a name, age and gender.

144
00:07:54,310 --> 00:07:56,531
And I've just kind of pick
some like sensible or

145
00:07:56,531 --> 00:07:59,873
at least sensible to me defaults so
then empty strings and negative 1.

146
00:07:59,873 --> 00:08:03,753
So that's it, as far as creating
the model pretty readable.

147
00:08:03,753 --> 00:08:09,897
And then we're actually going to use
that person model to make me, Ty.

148
00:08:09,897 --> 00:08:12,850
So, Ty-Lucas Kelley, 20 years old, male.

149
00:08:12,850 --> 00:08:14,760
There we are.

150
00:08:14,760 --> 00:08:17,844
And once you've actually
created that variable and

151
00:08:17,844 --> 00:08:20,378
you can make much more
than one if you want.

152
00:08:20,378 --> 00:08:24,595
Accessing, what it was
that accessing elements in

153
00:08:24,595 --> 00:08:28,228
the model is as simple as saying,
Ty.get.

154
00:08:28,228 --> 00:08:29,830
And then, in this case I got the name.

155
00:08:30,950 --> 00:08:32,240
For you to run this code.

156
00:08:32,240 --> 00:08:34,220
Had you imported
backbone in all of that,

157
00:08:34,220 --> 00:08:36,567
it would get a little pop up that says,
Ty-Lucas Kelley.

158
00:08:37,750 --> 00:08:39,538
If I wanted to change my name later.

159
00:08:39,538 --> 00:08:41,940
It's just Ty.set, name.

160
00:08:41,940 --> 00:08:44,070
And then, the name I want to change to.

161
00:08:44,070 --> 00:08:46,140
And I'm now Homer Simpson,
unfortunately.

162
00:08:47,420 --> 00:08:51,550
So at the basic level,
that's really all there is to models.

163
00:08:51,550 --> 00:08:55,470
And again, we'll be providing much
more links to documentation and

164
00:08:55,470 --> 00:08:59,140
more advanced tutorials,
after the webcast on the forums.

165
00:09:00,970 --> 00:09:03,270
>> So where do we-
>> Will become Homer Simpson,

166
00:09:03,270 --> 00:09:05,505
unfortunately, like it's a bad thing.

167
00:09:05,505 --> 00:09:09,175
[LAUGH] A good thing in
the earlier Simpson's seasons,

168
00:09:09,175 --> 00:09:12,680
maybe not now that we're in like
season 30 or 300, or whatever.

169
00:09:12,680 --> 00:09:16,533
>> [LAUGH]
>> So, that's a model.

170
00:09:16,533 --> 00:09:20,508
And then there is a collection, which
you can consider a container for models.

171
00:09:20,508 --> 00:09:22,403
So I made a person model and

172
00:09:22,403 --> 00:09:27,756
we're going to make a collection called
people, to put persons inside of.

173
00:09:27,756 --> 00:09:31,178
So, over in this file now,
which I've called collection.js.

174
00:09:31,178 --> 00:09:36,348
And we have the same stuff from before
the person model nothing is changed.

175
00:09:36,348 --> 00:09:41,218
And then we create on line 15,
a people collection.

176
00:09:41,218 --> 00:09:45,014
And you kind of interact with it the
same way you did with the model which is

177
00:09:45,014 --> 00:09:46,288
collection.extend.

178
00:09:46,288 --> 00:09:49,200
And then you pass in
your customizations.

179
00:09:49,200 --> 00:09:53,870
So, all we have to do at the bare
minimum is point to the model that we

180
00:09:53,870 --> 00:09:57,860
want to be storing in this collection,
so that nothing else gets inside of it,

181
00:09:57,860 --> 00:09:59,780
otherwise it's just
a big array essentially.

182
00:10:01,780 --> 00:10:07,300
We create a collection just by
invoking the people function.

183
00:10:07,300 --> 00:10:10,250
And then just like before,
I made Ty, here I am.

184
00:10:10,250 --> 00:10:12,840
This time I'm not Homer Simpson.

185
00:10:12,840 --> 00:10:18,090
And then, the way I added myself to that
people collection is with people.add.

186
00:10:18,090 --> 00:10:20,120
So again, very readable.

187
00:10:20,120 --> 00:10:22,920
Backbone is meant to be simple and
kind of stripped down.

188
00:10:24,940 --> 00:10:27,940
So let's say I wanted to, I've put
a bunch of stuff in the collection and

189
00:10:27,940 --> 00:10:29,580
now, I want to get something out.

190
00:10:29,580 --> 00:10:32,220
I would say,
there are two ways you can do that.

191
00:10:32,220 --> 00:10:34,240
I could say people.get(ty),

192
00:10:34,240 --> 00:10:38,340
which is the actual model,
I just pass on the entire model.

193
00:10:38,340 --> 00:10:40,220
And then, obviously,
it's pretty easy for

194
00:10:40,220 --> 00:10:42,580
it to verify that it has that in there.

195
00:10:42,580 --> 00:10:46,880
And then, once I get it back, I can
get my name again or change things.

196
00:10:46,880 --> 00:10:49,940
I'm actually working with
the model itself at this point.

197
00:10:49,940 --> 00:10:54,450
Or, if you provided like an ID number,

198
00:10:54,450 --> 00:10:57,060
like a unique ID for the model,
you can get it by that.

199
00:10:57,060 --> 00:11:02,060
So like, people.get, zero or
10,000, or whatever the ID is.

200
00:11:02,060 --> 00:11:03,660
So either way is acceptable.

201
00:11:05,060 --> 00:11:07,980
There again, there is definitely a lot
more that you can do with models and

202
00:11:07,980 --> 00:11:09,620
collections including things like,

203
00:11:09,620 --> 00:11:13,280
pointing them to like a remote,
Mongo DB database, something like that.

204
00:11:14,510 --> 00:11:17,560
That's not what this webcast is all
about but again, after we will be

205
00:11:17,560 --> 00:11:21,780
providing plenty of links and
tutorials for you guys to dive into.

206
00:11:21,780 --> 00:11:24,687
And the course itself that you can
take on your desk, the dotcom.

207
00:11:25,830 --> 00:11:29,596
So that's all I want to say about
models and collections for now.

208
00:11:29,596 --> 00:11:31,336
And that brings us to the V.

209
00:11:31,336 --> 00:11:34,720
The middle part of MVC,
and back to John.

210
00:11:34,720 --> 00:11:37,030
>> Actually, I actually have a question.

211
00:11:37,030 --> 00:11:38,522
>> Sure.
>> I'm not 100% sure if

212
00:11:38,522 --> 00:11:42,126
you know the answer, and I don't
expect you to because I'm kind of just

213
00:11:42,126 --> 00:11:44,030
throwing it to you off the cuff.

214
00:11:44,030 --> 00:11:44,690
>> Yeah, go for it.

215
00:11:44,690 --> 00:11:49,970
>> But, so like for a person model,
if I set these defaults.

216
00:11:49,970 --> 00:11:54,770
And then I say, in your example,
his name with gender and age.

217
00:11:54,770 --> 00:12:00,290
If I did something like a new person and
then I passed in a name,

218
00:12:00,290 --> 00:12:05,130
a gender and an age, and then I passed
in something else like, I don't know.

219
00:12:08,090 --> 00:12:10,670
GPA, let's say,
like a grade point average,

220
00:12:10,670 --> 00:12:15,930
just like threw like another
argument into the new constructor.

221
00:12:15,930 --> 00:12:20,010
Would that fail, would it add
that to that particular person?

222
00:12:23,110 --> 00:12:25,900
So actually, backbone doesn't really.

223
00:12:25,900 --> 00:12:27,930
I'm not sure if you can enforce the,

224
00:12:27,930 --> 00:12:30,180
like to stick to the defaults
that I specified.

225
00:12:30,180 --> 00:12:33,010
But, no.
You can totally just add in an arbitrary

226
00:12:33,010 --> 00:12:34,868
amount of extra variables.

227
00:12:34,868 --> 00:12:38,152
So you could create a new property
called favorite sport, and

228
00:12:38,152 --> 00:12:39,868
call it football or something.

229
00:12:39,868 --> 00:12:43,148
And it wouldn't complain or
give you any errors.

230
00:12:43,148 --> 00:12:46,113
So the whole reason we define
the default is more just for

231
00:12:46,113 --> 00:12:47,448
like code readability.

232
00:12:47,448 --> 00:12:51,100
And so that, as the developer, you kind
of know what's supposed to go in there.

233
00:12:53,030 --> 00:12:56,800
I'm sure it wouldn't be too
hard to figure out if you can

234
00:12:56,800 --> 00:12:58,740
kind of enforce those defaults.

235
00:13:01,960 --> 00:13:05,524
Actually, okay, cool, so

236
00:13:05,524 --> 00:13:10,276
there's actually a model.validate

237
00:13:10,276 --> 00:13:14,670
function which that you can call.

238
00:13:14,670 --> 00:13:18,210
And in the case that you did provide
like extra arbitrary variables,

239
00:13:18,210 --> 00:13:19,920
it would then yell at you.

240
00:13:19,920 --> 00:13:23,150
But it's up to you actually to
write that validation function.

241
00:13:23,150 --> 00:13:26,960
So again, kind of like we're mentioning
before, backbone leaves a lot up to you

242
00:13:26,960 --> 00:13:32,410
the whole idea is performance and
small size bare bones.

243
00:13:32,410 --> 00:13:34,260
But yes, so to answer your question.

244
00:13:34,260 --> 00:13:37,890
Yes and no, it doesn't do it by
default but the option is there.

245
00:13:39,860 --> 00:13:40,710
>> For sure.

246
00:13:40,710 --> 00:13:41,440
Okay.

247
00:13:41,440 --> 00:13:42,970
Yeah.

248
00:13:42,970 --> 00:13:44,758
Just kind of curious what would happen.

249
00:13:44,758 --> 00:13:46,738
>> Yeah,
that's a good thing to know about.

250
00:13:46,738 --> 00:13:50,880
>> Yeah,
I haven't really tried that myself.

251
00:13:50,880 --> 00:13:54,494
I'm usually pretty anal about like
massaging her, creating my models so

252
00:13:54,494 --> 00:13:57,190
it exactly matches like
the data I'm pulling in from.

253
00:13:57,190 --> 00:14:02,511
So I was just curious what would
happened if something through,

254
00:14:02,511 --> 00:14:05,360
stick in the spoke on that one.

255
00:14:05,360 --> 00:14:06,350
>> Yeah, definitely good for

256
00:14:06,350 --> 00:14:09,910
like a larger team to be able to
actually enforce the validation though.

257
00:14:09,910 --> 00:14:11,440
If you're working by yourself.

258
00:14:11,440 --> 00:14:12,465
Probably not a huge issue.

259
00:14:12,465 --> 00:14:15,048
>> Mm-hm.

260
00:14:15,048 --> 00:14:16,688
>> Okay, so
what was I supposed to be talking about?

261
00:14:16,688 --> 00:14:20,288
The view, the V area.

262
00:14:20,288 --> 00:14:25,290
Yeah, so
the view is all about displaying things.

263
00:14:25,290 --> 00:14:26,250
The models and

264
00:14:26,250 --> 00:14:30,410
collections are about sort of creating
this data into some usable format.

265
00:14:30,410 --> 00:14:34,233
But it doesn't really
present this data to a user.

266
00:14:34,233 --> 00:14:39,010
So that's really what the view is for,
and what the view is all about.

267
00:14:39,010 --> 00:14:43,350
So really, when you want something
to have change in your model and

268
00:14:43,350 --> 00:14:47,990
be presented to the user, that's really
what the view's going to be handling.

269
00:14:47,990 --> 00:14:50,159
So working with the view
involves really just two things.

270
00:14:50,159 --> 00:14:53,428
One, writing a template
in your HTML files.

271
00:14:53,428 --> 00:14:57,290
And that's going to provide sort of
the layout or structure for your view.

272
00:14:57,290 --> 00:15:01,509
And this is largely where underscore
comes in like I mentioned before that

273
00:15:01,509 --> 00:15:03,968
was one of the dependencies for
backbone.

274
00:15:03,968 --> 00:15:08,672
And then the actual view code which
is the JavaScript that fills in data

275
00:15:08,672 --> 00:15:11,948
from the models and
uses your template as a base.

276
00:15:11,948 --> 00:15:14,840
So let's take a look at
this quick example here.

277
00:15:15,990 --> 00:15:17,078
That we have right now.

278
00:15:17,078 --> 00:15:19,758
Let me screen share.

279
00:15:19,758 --> 00:15:22,718
I don't have fancy, or
I do have a fancy atom.

280
00:15:22,718 --> 00:15:24,538
But I rather use sublime.

281
00:15:24,538 --> 00:15:29,638
[LAUGH] So, I hope that looks
good on your guy's end.

282
00:15:29,638 --> 00:15:31,500
>> Yeah, totally clear for me.

283
00:15:31,500 --> 00:15:34,530
>> But again, you can see we
kind of have a lot of this

284
00:15:34,530 --> 00:15:37,720
wrapping in on this function, which
I'm not going to worry too much about.

285
00:15:37,720 --> 00:15:44,428
But just like the model, we have this
view function that basically says,

286
00:15:44,428 --> 00:15:47,350
this is going to be a view objects,
it's going to be a view method.

287
00:15:48,370 --> 00:15:50,950
So we just call backbone.view.extend.

288
00:15:50,950 --> 00:15:53,645
And first, we pass in this L property,

289
00:15:53,645 --> 00:15:57,991
which is going to be the down element
that we're going to bind into.

290
00:15:57,991 --> 00:16:01,525
So in this case, we're just binding to
the body and you can see that this is

291
00:16:01,525 --> 00:16:05,346
a pretty standard J query selector, just
the dollar sign and then the element.

292
00:16:05,346 --> 00:16:08,659
This could also be
right any sort of div.

293
00:16:08,659 --> 00:16:12,538
Or any sort of class that
we decide to pass into it.

294
00:16:12,538 --> 00:16:16,960
Maybe you want to attach it to like
the main, or even IP selector.

295
00:16:16,960 --> 00:16:20,410
So it supports you know anything
you can select on the DOM.

296
00:16:20,410 --> 00:16:23,110
>> Yeah, just plain old jQuery.

297
00:16:23,110 --> 00:16:26,010
>> Plain old jQuery,
yeah real simple there.

298
00:16:26,010 --> 00:16:30,150
So then we have this initialize
argument which is basically

299
00:16:30,150 --> 00:16:33,260
this function going to to be
assigned to this function.

300
00:16:33,260 --> 00:16:35,690
And it's going to call
this render function.

301
00:16:35,690 --> 00:16:39,343
This is basically what's called
her viewer was created and

302
00:16:39,343 --> 00:16:43,871
typically you just use it to call render
function but you can also do a lot of

303
00:16:43,871 --> 00:16:47,908
set up in sort of this initialized
stuff prior to calling render.

304
00:16:47,908 --> 00:16:53,395
So, if you need to sort of manipulate
some things, or premanage some data,

305
00:16:53,395 --> 00:16:58,285
or make some requests before
you probably render the view,

306
00:16:58,285 --> 00:17:01,910
you can kind of do it in
this initialization step.

307
00:17:03,100 --> 00:17:04,868
So then this one's pretty simple.

308
00:17:04,868 --> 00:17:06,949
Like I mentioned,
it just calls this dot render,

309
00:17:06,949 --> 00:17:08,589
which is our back dot render function.

310
00:17:09,990 --> 00:17:15,640
And this is just going to basically set
up this pretty simple template here.

311
00:17:15,640 --> 00:17:19,065
It's just going to make this
list item which says hey there.

312
00:17:19,065 --> 00:17:24,390
this.el, as you remember from above,
is actually our body element.

313
00:17:24,390 --> 00:17:27,868
So this is just a selector saying like,
pick that body element.

314
00:17:27,868 --> 00:17:29,720
Append this little chunk of stuff.

315
00:17:30,900 --> 00:17:32,160
And then we, down here,

316
00:17:32,160 --> 00:17:36,059
actually instantiate our new list view,
which will throw it up on the new page.

317
00:17:37,640 --> 00:17:40,680
So that's the basic premise of view.

318
00:17:40,680 --> 00:17:44,369
There's a few other kind of tricky
things you can get away with in there,

319
00:17:44,369 --> 00:17:48,316
but generally speaking this is what most
of your views are going to look like.

320
00:17:52,148 --> 00:17:53,790
Stop screen sharing there.

321
00:17:55,680 --> 00:18:00,410
And it looks like there aren't
too many questions on Slack,

322
00:18:02,150 --> 00:18:05,990
or on the side so we'll move on
real quick to the next thing

323
00:18:05,990 --> 00:18:09,300
which I believe is talking about events.

324
00:18:09,300 --> 00:18:11,120
>> Yeah so back to me for that.

325
00:18:11,120 --> 00:18:14,540
You know if you've been programming
with JavaScript at all you've probably

326
00:18:14,540 --> 00:18:18,560
encountered events before it's just
a huge part of a Java script and

327
00:18:18,560 --> 00:18:23,120
backbone to their kind of what make
the application come to life and

328
00:18:23,120 --> 00:18:27,390
able to react to user input as well
as changes to like the model and

329
00:18:27,390 --> 00:18:29,490
collection that you mentioned before.

330
00:18:29,490 --> 00:18:34,940
If you used jQuery specifically you've
probably seen something like this.

331
00:18:34,940 --> 00:18:36,830
Let me screen share real quick,

332
00:18:43,220 --> 00:18:45,320
okay, so you guys can see that.

333
00:18:45,320 --> 00:18:49,510
So you have seen events before most
likely so in this little comment,

334
00:18:49,510 --> 00:18:53,830
right here I threw in a classic
use of j query which is

335
00:18:53,830 --> 00:18:57,250
what to do when the click event
was fired after clicking a button.

336
00:18:57,250 --> 00:19:00,330
In this case, it just logs
some nonsense to the console.

337
00:19:00,330 --> 00:19:01,010
Or yesterday.

338
00:19:01,010 --> 00:19:03,350
You've seen events before post likely.

339
00:19:03,350 --> 00:19:08,500
And now, we're going to actually work
with events in the context of Backbone.

340
00:19:08,500 --> 00:19:13,140
So we're taking that list view
from before in John's example.

341
00:19:13,140 --> 00:19:15,530
So everything is the same so far.

342
00:19:15,530 --> 00:19:16,600
Elements of the body.

343
00:19:18,730 --> 00:19:20,560
We've actually added a little more.

344
00:19:20,560 --> 00:19:24,730
I've created an actual HTML file here,
so ignore the errors, but

345
00:19:24,730 --> 00:19:26,070
there's the body.

346
00:19:26,070 --> 00:19:29,360
And we've made a button to add items and
remove them.

347
00:19:29,360 --> 00:19:31,370
And then, here is our list right here.

348
00:19:31,370 --> 00:19:32,750
So pretty simple.

349
00:19:32,750 --> 00:19:34,840
But, I will be referencing that.

350
00:19:34,840 --> 00:19:36,500
So, bam, events.

351
00:19:38,090 --> 00:19:41,970
As you can see, this is backbone
syntax for dealing with events and

352
00:19:41,970 --> 00:19:44,090
you basically create this events object,

353
00:19:44,090 --> 00:19:46,700
which is all the events you
want the viewer to handle.

354
00:19:46,700 --> 00:19:52,140
And then the key,
you have the event name which is click,

355
00:19:52,140 --> 00:19:55,140
you know,
which is fired upon clicking anything.

356
00:19:55,140 --> 00:19:59,270
And then the element that is being
clicked, separated by a space.

357
00:20:00,630 --> 00:20:05,860
And then the actual value in the key
value pair is the name of the function.

358
00:20:05,860 --> 00:20:07,380
We're going to call, and

359
00:20:07,380 --> 00:20:10,870
you guessed it, we are the ones
that write that function.

360
00:20:10,870 --> 00:20:15,090
So quickly scrolling past,
this is the same as before.

361
00:20:15,090 --> 00:20:17,270
Except for calling it on the list.

362
00:20:18,270 --> 00:20:20,820
Tag this time or id rather.

363
00:20:20,820 --> 00:20:22,600
But you can see the add item and

364
00:20:22,600 --> 00:20:26,138
remove item functions and
they basically are pretty simple.

365
00:20:26,138 --> 00:20:30,730
When you click the add item button,
it's going to add another list item.

366
00:20:30,730 --> 00:20:34,050
And when you click remove item,
it's going to remove the last item.

367
00:20:34,050 --> 00:20:39,120
So nothing too crazy and, as before,
we have to actually instantiate the list

368
00:20:39,120 --> 00:20:43,290
view, but that is actually the basics
of working with events in Backbone.

369
00:20:44,450 --> 00:20:46,450
Just like with everything
else we've done so far,

370
00:20:46,450 --> 00:20:51,390
it's pretty readable and
quick to pick up on which is very nice.

371
00:20:51,390 --> 00:20:55,030
Not nearly as complex as a lot
of other JavaScript frameworks.

372
00:20:55,030 --> 00:21:00,600
But yeah this object right here is
essentially mapping events to functions.

373
00:21:00,600 --> 00:21:02,920
And that's all there is
to events in Backbone.

374
00:21:05,110 --> 00:21:06,790
So I will stop screen sharing.

375
00:21:08,230 --> 00:21:11,090
And I think we have,
unless there's questions,

376
00:21:11,090 --> 00:21:13,940
I think we only have one
more thing to talk about.

377
00:21:13,940 --> 00:21:17,150
>> Yeah, I think we'll take
questions at the end here.

378
00:21:17,150 --> 00:21:20,800
But the last little bit
I think a lot of people

379
00:21:20,800 --> 00:21:25,710
are curious about is you mentioned
before that these models you're creating

380
00:21:27,760 --> 00:21:29,230
they don't really persist.

381
00:21:29,230 --> 00:21:31,770
They're not like a model innocence.

382
00:21:31,770 --> 00:21:35,680
And it's something that its store in
the database that you can retrieve.

383
00:21:35,680 --> 00:21:39,920
Later when you create these models
they're very distraught me.

384
00:21:39,920 --> 00:21:41,640
Being a sickly gets destroyed.

385
00:21:41,640 --> 00:21:45,910
Once the backbone application
goes down In that instance where-

386
00:21:45,910 --> 00:21:47,770
>> Where the page hits refreshed?

387
00:21:47,770 --> 00:21:49,440
>> Or the, yeah,
where the page gets refreshed.

388
00:21:49,440 --> 00:21:54,530
So in that instance where Ty said,
you know ty.create there was a new

389
00:21:54,530 --> 00:21:59,850
person equals ti, blah blah blah.

390
00:21:59,850 --> 00:22:04,480
That object is basically going to get
destroyed the next time session reloads.

391
00:22:06,740 --> 00:22:10,870
So to get persistent data, and it's
something we talk a little bit about

392
00:22:10,870 --> 00:22:13,650
you guys doing in
the health tracker project.

393
00:22:13,650 --> 00:22:16,250
It's utilizing local storage.

394
00:22:16,250 --> 00:22:21,090
And so Backbone can utilize Browser's
local storage pretty easily.

395
00:22:21,090 --> 00:22:24,380
Most browsers have some
local storage support.

396
00:22:25,450 --> 00:22:29,370
Chrome does, Firefox does,
I think Safari does now.

397
00:22:29,370 --> 00:22:32,255
>> Yep.
And the latest versions of IE.

398
00:22:32,255 --> 00:22:34,065
And the new Edge browser as well.

399
00:22:34,065 --> 00:22:39,605
>> Yeah, so as long as you're not trying
to support a lot of IE 8 clients and

400
00:22:39,605 --> 00:22:43,395
stuff like that, you'll probably
get away with using local storage.

401
00:22:43,395 --> 00:22:46,525
And so, it's a database of sorts and

402
00:22:46,525 --> 00:22:51,030
it's a really easy library to
integrate into your projects.

403
00:22:51,030 --> 00:22:53,980
And so it's pretty easy to implement.

404
00:22:53,980 --> 00:22:57,150
Let me screen share this
little snippet of code.

405
00:22:57,150 --> 00:22:59,930
There you go.

406
00:23:01,860 --> 00:23:06,040
And let me make this a little smaller so
you can see everything.

407
00:23:06,040 --> 00:23:08,699
But you can see in
the collection that we create.

408
00:23:10,010 --> 00:23:12,100
We specify the model that we want.

409
00:23:12,100 --> 00:23:15,650
And then we just specify
local storage and

410
00:23:15,650 --> 00:23:20,010
use this new backbone to local storage
and then give it some collection name.

411
00:23:20,010 --> 00:23:27,890
So this could be something
like you know local store.

412
00:23:31,170 --> 00:23:34,690
And that could, you know, house all
our people that we end up creating.

413
00:23:34,690 --> 00:23:37,820
So now any time that we,
you know, put, you know,

414
00:23:37,820 --> 00:23:40,680
information into this local source,
it's going to get saved there.

415
00:23:40,680 --> 00:23:46,364
It's basically going to get cached to
that URL and then when users come back,

416
00:23:46,364 --> 00:23:51,348
the data will persist at least for
a little while unless they go in and

417
00:23:51,348 --> 00:23:55,738
clear their browser history and
mess with a bunch of stuff.

418
00:23:55,738 --> 00:24:01,119
But generally, local storage
is a pretty simple method for

419
00:24:01,119 --> 00:24:05,746
making persistent data
without having to go out and

420
00:24:05,746 --> 00:24:09,834
learn a huge database
framework like Mongo or

421
00:24:09,834 --> 00:24:13,830
Just zillion other ones
that are out there.

422
00:24:13,830 --> 00:24:17,950
>> That's really it if you guys
are looking to learn a little bit more

423
00:24:17,950 --> 00:24:21,200
you definitely should go
through your Backbone JS class

424
00:24:22,330 --> 00:24:24,860
which has a lot of great
material in there,

425
00:24:24,860 --> 00:24:27,810
we reference a lot of great articles and
we'll make sure to share

426
00:24:27,810 --> 00:24:30,490
a lot of these useful links as well
>> But

427
00:24:30,490 --> 00:24:34,720
it looks like we have some questions
that need to be answered so

428
00:24:34,720 --> 00:24:39,690
how about we go through those and try
and hit on as many of them as we can.

429
00:24:39,690 --> 00:24:44,300
If you guys are posting
questions in slack as well,

430
00:24:44,300 --> 00:24:47,230
I'd be happy to take them there.

431
00:24:47,230 --> 00:24:54,090
So let's see, Roger Woodroof
says as P five two is optional,

432
00:24:54,090 --> 00:24:58,590
is it possible to complete the nano
degree minimum requirements, graduate,

433
00:24:58,590 --> 00:25:01,920
and then come back and
do P five two after graduating and

434
00:25:01,920 --> 00:25:04,570
still be able to submit P five two for
review.

435
00:25:04,570 --> 00:25:09,440
And I actually was not 100% sure about
this before we started the webcast.

436
00:25:09,440 --> 00:25:13,240
But I just talked to Rant
who's one of our CM's on

437
00:25:13,240 --> 00:25:18,020
the career services side and
he says yeah, you know graduates.

438
00:25:18,020 --> 00:25:19,870
You guys have access to your paths and

439
00:25:19,870 --> 00:25:24,190
are able to see the optional projects
for review after graduating.

440
00:25:24,190 --> 00:25:26,750
So yeah,
you guys are more than welcome to.

441
00:25:27,900 --> 00:25:31,440
Finish up project five,
finish up project six.

442
00:25:31,440 --> 00:25:35,530
And then graduate, come back,
do project five too and

443
00:25:35,530 --> 00:25:37,350
submit that one since it's optional.

444
00:25:39,950 --> 00:25:43,220
If you do have any trouble submitting
it, for whatever reason, like,

445
00:25:43,220 --> 00:25:47,340
I don't know maybe you know,
if the system doesn't let you submit it,

446
00:25:47,340 --> 00:25:50,040
feel free to email into us
at support@udacity.com and

447
00:25:50,040 --> 00:25:55,970
we'll make sure to get
that set up right for you.

448
00:25:57,960 --> 00:26:01,160
This one comes to us from Udan who asks,

449
00:26:01,160 --> 00:26:05,990
I'm creating a disposable set
of views for third party data.

450
00:26:05,990 --> 00:26:09,000
They have no attached models or
collections.

451
00:26:10,250 --> 00:26:13,240
The user can elect to
save specific results.

452
00:26:13,240 --> 00:26:18,160
What's the best approach to harvesting
the data behind that view, or

453
00:26:18,160 --> 00:26:19,940
should i just create
models to begin with?

454
00:26:21,650 --> 00:26:22,610
I'm leaning.

455
00:26:22,610 --> 00:26:23,570
>> The models.

456
00:26:23,570 --> 00:26:24,570
>> Yeah.

457
00:26:24,570 --> 00:26:28,300
I'm leaning towards the making
models to begin with.

458
00:26:28,300 --> 00:26:31,340
>> Yeah it's just that that's the way
the framework was meant to be used and

459
00:26:31,340 --> 00:26:35,650
that's going to be the least painful and
most importantly easiest to find.

460
00:26:35,650 --> 00:26:38,075
Documentation and help for
if anything goes wrong.

461
00:26:38,075 --> 00:26:38,800
>> Mm-hm.

462
00:26:38,800 --> 00:26:42,940
>> So if you have any kind of data that
you need to work with, definitely go

463
00:26:42,940 --> 00:26:47,380
with the models and collections route,
rather than rolling your own solutions.

464
00:26:49,120 --> 00:26:50,620
>> Yeah, I would agree with that too.

465
00:26:50,620 --> 00:26:53,460
If you're looking for a framework that.

466
00:26:53,460 --> 00:26:54,590
You know just.

467
00:26:54,590 --> 00:26:56,770
You can do something like that within.

468
00:26:56,770 --> 00:26:59,340
Doesn't rely on like models or
collections.

469
00:26:59,340 --> 00:27:00,650
Then you're probably looking for

470
00:27:00,650 --> 00:27:02,750
something like React
which just strictly VM.

471
00:27:02,750 --> 00:27:05,370
>> React would be the way to go.

472
00:27:05,370 --> 00:27:06,710
>> Yeah.

473
00:27:06,710 --> 00:27:08,470
That that's essential.

474
00:27:08,470 --> 00:27:09,800
That's actually.

475
00:27:09,800 --> 00:27:12,720
Damn near the description for
a reactor is just like

476
00:27:12,720 --> 00:27:17,930
sort of use that you can kind of
dispose of and set this data on.

477
00:27:17,930 --> 00:27:19,540
With Backbone though I mean

478
00:27:21,410 --> 00:27:25,500
it still relies heavily on well
defined models and collections.

479
00:27:26,910 --> 00:27:30,250
>> Yeah, otherwise things start to
kind of look like spaghetti code and

480
00:27:30,250 --> 00:27:33,770
the whole point of Backbone
kind of falls through the floor

481
00:27:33,770 --> 00:27:37,470
in terms of clean
application architecture.

482
00:27:37,470 --> 00:27:41,310
Yeah, I feel like you'd end up
using a lot of like jQuery,

483
00:27:41,310 --> 00:27:44,080
if you just used to use no model, or

484
00:27:45,310 --> 00:27:50,180
you'd end up basically writing
a model without meaning to.

485
00:27:50,180 --> 00:27:52,910
I feel like that would
be the end result.

486
00:27:55,340 --> 00:27:57,330
All right, let's see here.

487
00:28:00,210 --> 00:28:03,490
I'm going to check the slack
channels really quick.

488
00:28:06,350 --> 00:28:10,870
Bochef says he doesn't really have
a question, he was having some trouble

489
00:28:10,870 --> 00:28:15,800
getting into the webcast, so, hopefully
we deliver the recording to him but

490
00:28:15,800 --> 00:28:18,610
he says you starting a new job next
monday and they have some Backbone

491
00:28:18,610 --> 00:28:21,050
applications there
>> Hey, awesome.

492
00:28:21,050 --> 00:28:27,110
>> So yeah i mean like any any advice I
guess we can give to Bo about you know,

493
00:28:27,110 --> 00:28:29,620
stepping into doing like real

494
00:28:29,620 --> 00:28:34,570
heavy lifting with back bone
>> So I guess not

495
00:28:34,570 --> 00:28:38,360
too much quick advice i can give
right now but definitely look out for

496
00:28:38,360 --> 00:28:42,260
our forum post which is going to have
links to much more advanced tutorials

497
00:28:42,260 --> 00:28:46,180
that will probably help you with ton
unlike the workplace environment.

498
00:28:48,120 --> 00:28:49,220
Yeah definitely.

499
00:28:50,470 --> 00:28:53,880
>> And luckily you'll be able to lean
on your coworkers shoulders too,

500
00:28:53,880 --> 00:28:56,980
to learn how things work over there.

501
00:28:56,980 --> 00:28:58,960
But congrats on the new job.

502
00:28:58,960 --> 00:29:02,655
>> Yeah, I was just going to say that
too, is when you're stepping into, and

503
00:29:02,655 --> 00:29:07,155
this goes I guess, with framework
in any job you step into, right?

504
00:29:07,155 --> 00:29:11,665
There's going to be a particular way
that their engineers are doing things.

505
00:29:11,665 --> 00:29:12,786
There's going to,

506
00:29:12,786 --> 00:29:16,746
there'd be a particular framework
that they all like to use and

507
00:29:16,746 --> 00:29:21,212
there's going to be a particular
style that they like to stick to.

508
00:29:21,212 --> 00:29:27,870
So, you come in with the basics, but
definitely ask questions, inquire about.

509
00:29:27,870 --> 00:29:30,162
I understand how backbone
works a little bit, but

510
00:29:30,162 --> 00:29:33,332
I kind of need to understand how
you guys make backbone work.

511
00:29:37,000 --> 00:29:40,470
Let's see this one comes
to us from Robert.

512
00:29:40,470 --> 00:29:46,750
What are the strengths slash weaknesses
of backbone versus knocked out?

513
00:29:50,410 --> 00:29:55,320
So I guess the strength of both of them
is that they're really lightweight.

514
00:29:56,770 --> 00:30:02,639
You're not getting into
an overly large architecture.

515
00:30:02,639 --> 00:30:05,230
I guess, versus each other.

516
00:30:06,770 --> 00:30:10,900
Knockout, in my opinion,
is very much more.

517
00:30:10,900 --> 00:30:15,640
Convention over configuration
where you're sitting down and

518
00:30:15,640 --> 00:30:22,950
you're writing a lot of
code whereas a backbone

519
00:30:22,950 --> 00:30:27,820
I think is a little bit more structured
to not know and so you kind of have

520
00:30:27,820 --> 00:30:31,930
a little bit more of this configuration
set up where you're basically defining.

521
00:30:33,500 --> 00:30:36,630
More or
less you're defining these objects and

522
00:30:36,630 --> 00:30:40,230
their properties,
whereas with Knockout you're kind

523
00:30:40,230 --> 00:30:44,230
of writing the code building
those objects and properties.

524
00:30:44,230 --> 00:30:47,560
>> Yeah, and
if I can chime in real quick.

525
00:30:47,560 --> 00:30:51,080
So both these frameworks, they're
similar in the sense they both kind of

526
00:30:51,080 --> 00:30:56,500
fill that kind of smaller second tier
niche in terms of JavaScript Frameworks.

527
00:30:56,500 --> 00:30:57,850
They're not quite as big and

528
00:30:57,850 --> 00:31:00,690
all encompassing as something
like Angular or Ember.

529
00:31:00,690 --> 00:31:04,440
You know and as a result they're
a lot simpler and lightweight.

530
00:31:04,440 --> 00:31:07,770
The one big difference between
the two frameworks is,

531
00:31:07,770 --> 00:31:10,580
in something that's called
two way data binding.

532
00:31:10,580 --> 00:31:13,720
So this is something that Knockout
has and Backbone does not.

533
00:31:13,720 --> 00:31:16,570
So in Knockout it's
a little bit simpler.

534
00:31:16,570 --> 00:31:19,930
To have Your views and models.

535
00:31:19,930 --> 00:31:22,830
Kind of stay up to date with each other.

536
00:31:22,830 --> 00:31:26,220
Whereas Backbone, you have to do
a little more of the wiring yourself.

537
00:31:27,370 --> 00:31:32,330
It's certainly not impossible to do
the same things with both frameworks,

538
00:31:32,330 --> 00:31:34,740
but that is one small
advantage of Knockout.

539
00:31:34,740 --> 00:31:38,520
It's a little simpler to keep
things up to date with each other.

540
00:31:38,520 --> 00:31:40,810
Without any like dom manipulation or

541
00:31:40,810 --> 00:31:45,750
kind of manual I'm not sure what
the word I'm looking for is.

542
00:31:45,750 --> 00:31:47,960
Yeah but that's about the only
difference between the two,

543
00:31:47,960 --> 00:31:51,710
they both kind of fill
the same void in terms of like

544
00:31:51,710 --> 00:31:54,060
a small lightweight
JavaScript framework.

545
00:31:56,140 --> 00:31:57,266
Yeah.

546
00:31:57,266 --> 00:32:01,939
I tend to lean a little bit more towards
Knockout, largely because of the two way

547
00:32:01,939 --> 00:32:04,743
data binding, and
the ease of setup with that.

548
00:32:04,743 --> 00:32:07,506
It's not terribly
difficult with Backbone.

549
00:32:07,506 --> 00:32:12,776
It just is a little bit more work.

550
00:32:12,776 --> 00:32:16,174
>> Luckily because Backbone's
been around for a little while,

551
00:32:16,174 --> 00:32:19,520
well both frameworks have there
are there's a lot of like.

552
00:32:19,520 --> 00:32:23,790
Good third party code out there and
OpenSource code you can find.

553
00:32:23,790 --> 00:32:26,390
To kind of take care of some
of the heavy lifting for you.

554
00:32:26,390 --> 00:32:27,790
But yeah that's about it on that.

555
00:32:29,730 --> 00:32:32,760
>> All right.
Let's see if we can help this guy out.

556
00:32:33,840 --> 00:32:37,980
Prada asks, I'm trying to
build a backbone application

557
00:32:37,980 --> 00:32:40,290
which interacts with
files on Google Drive.

558
00:32:41,300 --> 00:32:43,870
Where should i place
the Google API calls?

559
00:32:43,870 --> 00:32:48,290
In the model or the controller?

560
00:32:48,290 --> 00:32:51,240
>> The controller would be the place for
that.

561
00:32:52,260 --> 00:32:57,750
Any interaction with third party APIs or
outside resources should go there.

562
00:32:57,750 --> 00:33:01,560
The model should purely be for
defining the structure of your data.

563
00:33:01,560 --> 00:33:04,050
You want to keep that as kind of.

564
00:33:04,050 --> 00:33:06,490
Pure quote unquote as possible.

565
00:33:06,490 --> 00:33:07,540
So definitely go for

566
00:33:07,540 --> 00:33:09,930
the controller if you're working
with the Google Drive API.

567
00:33:09,930 --> 00:33:10,430
>> Yeah.

568
00:33:11,650 --> 00:33:12,850
I agree with that.

569
00:33:14,190 --> 00:33:16,890
That's basically right from

570
00:33:16,890 --> 00:33:18,720
the definition of what
the controller is, right?

571
00:33:18,720 --> 00:33:24,320
It's all the code that interacts with
the model and interacts with the view.

572
00:33:24,320 --> 00:33:32,620
And in this case you know that API call
fits perfectly into that sort of piece.

573
00:33:32,620 --> 00:33:37,050
The robber

574
00:33:37,050 --> 00:33:41,770
asks do you have a screenshot of
a sample interface for this project.

575
00:33:44,370 --> 00:33:47,230
So a sample of the health tracker.

576
00:33:48,970 --> 00:33:52,370
I mean, do you have a copy on
your on your laptop right now?

577
00:33:54,220 --> 00:33:54,900
>> I might.

578
00:33:54,900 --> 00:33:58,830
Here, let me see if I can whip something
up real quick, give me a second.

579
00:33:58,830 --> 00:34:01,050
>> Yeah, yeah, no problem.

580
00:34:01,050 --> 00:34:06,200
I don't know,
I'll double check my laptop

581
00:34:07,580 --> 00:34:11,190
too, but I recently did
a full reset the other day.

582
00:34:12,380 --> 00:34:13,080
Here we go.

583
00:34:13,080 --> 00:34:14,210
I can share something.

584
00:34:16,370 --> 00:34:19,750
So there's a bit of set up with
the project that I have on right now so

585
00:34:19,750 --> 00:34:22,409
thank you why isn't adequate
work correctly without

586
00:34:22,409 --> 00:34:24,860
throwing a bunch of errors this alike.

587
00:34:24,860 --> 00:34:27,909
I need to put in there but
as far as the basic what the u.i.

588
00:34:27,909 --> 00:34:31,350
could look like if you wanted
to implement it yourself.

589
00:34:31,350 --> 00:34:37,842
The screen Perfect.

590
00:34:37,842 --> 00:34:39,230
So that's about that.

591
00:34:39,230 --> 00:34:40,320
So you can see,

592
00:34:40,320 --> 00:34:44,080
there's a little search bar at
the top the title of the application.

593
00:34:44,080 --> 00:34:46,810
Search results are going
to go on this left third.

594
00:34:46,810 --> 00:34:50,560
And then, this is the actual Health
tracker that keeps track of how many

595
00:34:50,560 --> 00:34:52,090
calories you've had.

596
00:34:52,090 --> 00:34:56,260
So that's pretty basic,
not too fancy with the CSS.

597
00:34:56,260 --> 00:34:59,520
But that's kind of a good structure for
this type of application.

598
00:34:59,520 --> 00:35:02,160
Search bar at the top,
search results at the left and

599
00:35:02,160 --> 00:35:05,380
then the actual report taking
up most of the screen.

600
00:35:05,380 --> 00:35:08,650
So there's a little sneak
peek at what we came up with.

601
00:35:08,650 --> 00:35:14,680
Yeah and just since there is,
we can't really shelf date our activity.

602
00:35:14,680 --> 00:35:17,640
>> We got to leave some work for
you guys.

603
00:35:18,690 --> 00:35:19,730
>> You're basically right.

604
00:35:19,730 --> 00:35:24,420
You just type into that search bar and
then a whole list of categories,

605
00:35:24,420 --> 00:35:25,500
or sorry.

606
00:35:25,500 --> 00:35:28,190
>> A list of results of
foods would come up.

607
00:35:28,190 --> 00:35:30,010
The user would be able to pick one and

608
00:35:30,010 --> 00:35:34,810
basically add it to their, what they
ate that day or week or whatever.

609
00:35:34,810 --> 00:35:38,810
>> Yeah, and there's much more details
of course in the actual backbone course

610
00:35:38,810 --> 00:35:41,270
we have on our website and
the project rubric.

611
00:35:43,270 --> 00:35:46,298
>> Yeah, we definitely encourage
you to make it not so plain.

612
00:35:46,298 --> 00:35:47,886
We're just [CROSSTALK].

613
00:35:47,886 --> 00:35:50,795
>> And you do a better job
than I did with the CSS.

614
00:35:50,795 --> 00:35:53,020
[LAUGH] You put me to shame.

615
00:35:53,020 --> 00:35:54,940
We're just lazy and
need to get things working.

616
00:35:54,940 --> 00:35:58,186
So we use a lot of Bootstrap.

617
00:35:58,186 --> 00:35:59,620
>> I will never complain.

618
00:35:59,620 --> 00:36:02,360
I will never claim to be a designer.

619
00:36:04,090 --> 00:36:06,500
I respect those that
can make that claim.

620
00:36:07,500 --> 00:36:08,470
>> I know.

621
00:36:08,470 --> 00:36:15,720
I was I was perusing job listings
just seen what people were asking for

622
00:36:15,720 --> 00:36:21,590
for like junior and senior front end
web developers, and there is a large

623
00:36:21,590 --> 00:36:26,030
misunderstanding of what a front end
developer and front end designer are.

624
00:36:26,030 --> 00:36:31,030
There's so many that are like, okay we
need you to know HTML, CSS, JavaScript.

625
00:36:31,030 --> 00:36:34,630
And two different paths.

626
00:36:35,660 --> 00:36:37,840
>> No.
>> If you can learn it all,

627
00:36:37,840 --> 00:36:40,580
then you should have no problem
getting a job anywhere.

628
00:36:40,580 --> 00:36:43,500
>> Yeah.
>> Props to you if you've got

629
00:36:43,500 --> 00:36:45,200
development and artistic ability.

630
00:36:45,200 --> 00:36:53,040
>> I was thinking that some of
the more intense development stuff.

631
00:36:53,040 --> 00:36:56,620
All right I think we've got time for
one more question here and it's kind of

632
00:36:56,620 --> 00:37:02,850
a fun one which is from Etine and
he asks what brand of coffee do you buy.

633
00:37:02,850 --> 00:37:04,050
>> Boy toughest question.

634
00:37:04,050 --> 00:37:07,720
Okay I'm a big coffee and tea drinker.

635
00:37:07,720 --> 00:37:13,980
I don't really buy any one particular
brand but I am picky with buying

636
00:37:13,980 --> 00:37:17,760
whole bean coffee needs to be ground
right before I'm about to drink it.

637
00:37:19,220 --> 00:37:20,850
The coffee I'm hooked on lately,

638
00:37:20,850 --> 00:37:23,960
you can actually get it,
Ii you've got a Trader Joe's near you.

639
00:37:23,960 --> 00:37:27,000
It's this new Mexican Fair Trade
blend they have.

640
00:37:27,000 --> 00:37:28,440
It's very, very nice.

641
00:37:28,440 --> 00:37:29,600
It's got a nutty flavor.

642
00:37:29,600 --> 00:37:33,950
As far as like if I'm out and
about and grabbing a cup of coffee.

643
00:37:33,950 --> 00:37:35,820
Not too much preference.

644
00:37:35,820 --> 00:37:37,820
Starbucks over Dunkin Donuts I guess.

645
00:37:37,820 --> 00:37:39,285
Not to start a flame war.

646
00:37:39,285 --> 00:37:44,690
>> [LAUGH]
I guess i'm kind of on the same

647
00:37:44,690 --> 00:37:50,550
boat as you, not too particular.

648
00:37:50,550 --> 00:37:52,010
As long as it's not crappy and

649
00:37:52,010 --> 00:37:53,710
as long as it's
>> Good coffee.

650
00:37:53,710 --> 00:37:54,675
That's the easy answer.

651
00:37:54,675 --> 00:37:56,160
[LAUGH]
>> Fresh.

652
00:37:56,160 --> 00:38:02,040
I guess my drink of choice if I
had to pick one is like Americano,

653
00:38:02,040 --> 00:38:04,560
just straight espresso in
the cup with some water.

654
00:38:06,040 --> 00:38:07,330
>> Caffeine IV.

655
00:38:07,330 --> 00:38:10,600
>> Yeah, pretty much.

656
00:38:10,600 --> 00:38:13,370
I don't think we've got
any other questions here,

657
00:38:13,370 --> 00:38:17,420
I'm just going to take
a quick glance at slack.

658
00:38:17,420 --> 00:38:21,270
It looks like we're okay.

659
00:38:21,270 --> 00:38:23,690
For those of you who are watching or
recording and

660
00:38:23,690 --> 00:38:28,440
were able to get and,
I am sorry about that.

661
00:38:28,440 --> 00:38:33,090
We're going to do our best to you this
on something that doesn't require

662
00:38:33,090 --> 00:38:35,710
being a part of the Google Plus
community beforehand.

663
00:38:35,710 --> 00:38:39,780
I think the next one who are going to do
is going to be posted on YouTube Live,

664
00:38:39,780 --> 00:38:43,530
so there won't be any sort of
like gate and we want to try and

665
00:38:43,530 --> 00:38:47,180
like you accept people as
they're trying to join in

666
00:38:48,210 --> 00:38:52,370
any way as any last thoughts
on anything today insights?

667
00:38:52,370 --> 00:38:56,400
>> No I hope you guys we're able to
get a nice intro to Backbone and

668
00:38:56,400 --> 00:38:59,450
get your feet wet again,
definitely keep an eye out for

669
00:38:59,450 --> 00:39:03,850
the forum post that's going to be
coming right after this It'll have

670
00:39:03,850 --> 00:39:08,530
basically everything we cover today
as well as some important links to

671
00:39:08,530 --> 00:39:11,090
code examples and tutorials,
things like that.

672
00:39:13,010 --> 00:39:17,868
>> Yeah, and along with that,
we'll be taking questions there.

673
00:39:17,868 --> 00:39:23,940
So,feel free to post any other
questions that you might have.

674
00:39:23,940 --> 00:39:26,430
Let us know you know where
you're struggling with Backbone,

675
00:39:26,430 --> 00:39:28,560
where you're struggling
with the project.

676
00:39:28,560 --> 00:39:31,570
We're always happy to to dive in and
give you guys some support.

677
00:39:33,780 --> 00:39:34,770
All right, cool.

678
00:39:34,770 --> 00:39:36,250
Thanks, Ty!

679
00:39:36,250 --> 00:39:37,330
>> See you everybody!

680
00:39:37,330 --> 00:39:38,760
Thanks for popping in.

681
00:39:38,760 --> 00:39:39,390
>> Bye everybody.

682
00:39:39,390 --> 00:39:41,346
Have a good rest of your evening.
