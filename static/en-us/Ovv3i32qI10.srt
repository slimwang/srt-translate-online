1
00:00:00,000 --> 00:00:03,000
Behind HAProxy we actually get into the meat of Reddit's infrastructure.

2
00:00:03,000 --> 00:00:06,000
We had a bunch of app servers.

3
00:00:06,000 --> 00:00:12,000
These are physical machines that are running Python programs like you've been working on in this class.

4
00:00:12,000 --> 00:00:16,000
When I left I think we had maybe 20 of these.

5
00:00:16,000 --> 00:00:23,000
It wasn't that many. How many do you guys have now? >>180.

6
00:00:23,000 --> 00:00:25,000
Okay. That's pretty significant.

7
00:00:25,000 --> 00:00:32,000
They went from 20 when Reddit was a big site to 180 when Reddit became a huge site.

8
00:00:32,000 --> 00:00:34,000
Now, these are running Python.

9
00:00:34,000 --> 00:00:40,000
They're using a web framework that I talked about previously in this unit called Pylons.

10
00:00:40,000 --> 00:00:43,000
Do you guys still use Pylons? >>Yes.

11
00:00:43,000 --> 00:00:46,000
This handled just about every request.

12
00:00:46,000 --> 00:00:50,000
I don't recall if we had special web servers for static content.

13
00:00:50,000 --> 00:00:53,000
Do you guys have special web servers now for static content? >>We use S3.

14
00:00:53,000 --> 00:00:58,000
S3 for static content. Oh, yes. We just transitioned to that at some point before I left.

15
00:00:58,000 --> 00:01:01,000
Everything we do is on Amazon AWS.

16
00:01:01,000 --> 00:01:06,000
Basically you rent machines from Amazon, and one of the systems in AWS is S3.

17
00:01:06,000 --> 00:01:10,000
Maybe you could explain what S3 is an how it works. >>Sure.

18
00:01:10,000 --> 00:01:20,000
S3 is a simple storage service, and it's basically a distributed file storage thing in "the cloud."

19
00:01:20,000 --> 00:01:29,000
Amazon lets you put objects into the buckets, and it's literally just a key value store of these files,

20
00:01:29,000 --> 00:01:33,000
and other people can hit a URL and grab the object.

21
00:01:33,000 --> 00:01:38,000
We store all of our static content like CSS and JavaScript on S3.

22
00:01:38,000 --> 00:01:44,000
When you're hitting the site, you're actually going via Akamai to S3 instead of our infrastructure.

23
00:01:44,000 --> 00:01:51,000
So for static content, a user never even hits HAProxy or the app servers or anything at all.

24
00:01:51,000 --> 00:01:54,000
Yes, for the most part.

25
00:01:54,000 --> 00:01:57,000
And we can get away with that because the content never changes. >>Right.

26
00:01:57,000 --> 00:02:01,000
So I know in the early days of Reddit--and certainly in the applications we've been building

27
00:02:01,000 --> 00:02:08,000
in this class--all of the content, static or not, gets served from these app servers.

28
00:02:08,000 --> 00:02:12,000
As you grow, there is no reason why you need to waste all these resources handling

29
00:02:12,000 --> 00:02:17,000
connections for JavaScript and CSS and images.

30
00:02:17,000 --> 00:02:22,000
For a while we were using EngineX for the static content.

31
00:02:22,000 --> 00:02:26,000
I think we were just in transition when I left. >>Some of the static was on S3.

32
00:02:26,000 --> 00:02:31,000
We just moved all of the CSS and stuff in October.

33
00:02:31,000 --> 00:02:37,000
We were using EngineX and it got to the point where the one EngineX server doing

34
00:02:37,000 --> 00:02:41,000
all of the static content couldn't handle it anymore when we changed the content.

35
00:02:41,000 --> 00:02:44,000
Everybody's caches were invalidated.

36
00:02:44,000 --> 00:02:49,000
So we would do a deploy of new code, and there would be this static content change,

37
00:02:49,000 --> 00:02:52,000
and all of a sudden that EngineX would get overloaded

38
00:02:52,000 --> 00:02:56,000
and everybody would be getting completely unstyled Reddit.

39
00:02:56,000 --> 00:02:59,000
Okay, I've seen that happen a few times.

40
00:02:59,000 --> 00:03:03,000
So EngineX is just a web server.

41
00:03:03,000 --> 00:03:07,000
Back in the early days of the internet, almost all the content online was static.

42
00:03:07,000 --> 00:03:09,000
It was served by these things called web servers

43
00:03:09,000 --> 00:03:14,000
which basically take HTTP requests, find the file that was in the URL--

44
00:03:14,000 --> 00:03:17,000
like the actual file name mapped directly to a file on the web server--

45
00:03:17,000 --> 00:03:19,000
and they would serve it.

46
00:03:19,000 --> 00:03:21,000
That was basically almost the entire Internet.

47
00:03:21,000 --> 00:03:29,000
Over the last 15 years, the content online has changed from basically being 100% static

48
00:03:29,000 --> 00:03:31,000
to almost 100% dynamic.

49
00:03:31,000 --> 00:03:35,000
In fact, when I started teaching this course, in Unit 1 I was trying to think of a website

50
00:03:35,000 --> 00:03:38,000
that was 100% static, and I can't think of one.

51
00:03:38,000 --> 00:03:43,000
Do you have any ideas of one off the top of your head?

52
00:03:43,000 --> 00:03:49,000
There has actually been a resurgence of static in the form of websites

53
00:03:49,000 --> 00:03:54,000
that get compiled from files, and so there is actually a lot of blogs out there now

54
00:03:54,000 --> 00:03:59,000
that are purely static served but are generated from files dynamically.

55
00:03:59,000 --> 00:04:02,000
We're going to talk about how much content Reddit precomputes

56
00:04:02,000 --> 00:04:06,000
as like a for of this--we talked about in Unit 6 this notion of caching.

57
00:04:06,000 --> 00:04:10,000
You can wait to cache something until it's needed or you can cache it ahead of time,

58
00:04:10,000 --> 00:04:12,000
so that the user never actually touches the database.

59
00:04:12,000 --> 00:04:14,000
What you're getting at is like an extreme form of that.

60
00:04:14,000 --> 00:04:18,000
Yeah. You only compile it when you need to, when you change it.

61
00:04:18,000 --> 00:04:22,000
So you build up your whole blog, I guess, with static content.

62
00:04:22,000 --> 00:04:26,000
Static content--the whole thing is its really easy to serve, because it's the same for everybody.

63
00:04:26,000 --> 00:04:31,000
Having static content in S3 or in EngineX, even when Reddit was pretty big when I left,

64
00:04:31,000 --> 00:04:35,000
we could get away with one web server there, because Akamai handled most of the load.

65
00:04:35,000 --> 00:04:41,000
Akamai is pretty clever about this piece of content is about to expire.

66
00:04:41,000 --> 00:04:45,000
I'll go ahead and fetch it in advance to keep the users from all slipping

67
00:04:45,000 --> 00:04:49,000
through Akamai and pounding this guy.
