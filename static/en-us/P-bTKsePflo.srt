1
00:00:00,000 --> 00:00:08,000
Now, Python being Python actually gives lots of different ways of writing something this simple,

2
00:00:08,000 --> 00:00:13,000
and some of them are very very distinct so here's a more distinct way of writing the same thing.

3
00:00:13,000 --> 00:00:19,000
We can do is in one command sum up all the elements and divided by the length,

4
00:00:19,000 --> 00:00:21,000
and we've now computed the same thing twice.

5
00:00:21,000 --> 00:00:24,000
What do you suppose the running time is of the second statement here?

6
00:00:24,000 --> 00:00:30,000
It's just one little arithmetic statement. It seems like it should be Θ(1), but it's not.

7
00:00:30,000 --> 00:00:38,000
You have to keep in mind that this some command here is actually just shorthand for a loop like this.

8
00:00:38,000 --> 00:00:41,000
It really is running overall the elements in the list internally.

9
00:00:41,000 --> 00:00:47,000
Even though it looks like Θ(1), there's still a Θ(1) of the length of this list, your Θ(n).

10
00:00:47,000 --> 00:00:53,000
This is one of the things that is different between the language like Python and say a language like C.

11
00:00:53,000 --> 00:00:58,000
C basically doesn't allow you to hide running time in the individual statements.

12
00:00:58,000 --> 00:01:03,000
All the C statements run pretty much constant time.

13
00:01:03,000 --> 00:01:08,000
Whereas in Python, so that you can write more complicated programs in a nice distinct way,

14
00:01:08,000 --> 00:01:11,000
they do give you the shortcuts, but you have to be really careful

15
00:01:11,000 --> 00:01:16,000
that you know what the running time is with all the little primitive functions

16
00:01:16,000 --> 00:01:21,000
before you try to actually measure the performance and predict how fast your algorithm is going to run.

17
00:01:21,000 --> 00:01:23,000
This can really bite so you have to be careful.

18
00:01:23,000 --> 00:01:28,000
The extremals of a list are the extreme values, the max and the mean,

19
00:01:28,000 --> 00:01:35,000
which is a kind of cooler way to say it, the extremals, the X Games,

20
00:01:35,000 --> 00:01:37,000
but it's actually an awful lot like mean.

21
00:01:37,000 --> 00:01:42,000
What I would like you to do is actually modify the mean algorithm that we had

22
00:01:42,000 --> 00:01:45,000
to actually compute the max of a list.
