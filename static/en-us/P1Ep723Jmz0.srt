1
00:00:00,110 --> 00:00:04,000
Let's look at the solution to
our flat page table size quiz.

2
00:00:04,000 --> 00:00:07,930
We are asked what the total size of
the page tables in the system is.

3
00:00:07,930 --> 00:00:11,500
There are two processes in the system,
so there will be two page tables.

4
00:00:11,500 --> 00:00:13,345
We need to add up their sizes.

5
00:00:13,345 --> 00:00:15,635
The page size is 4 kilobytes.

6
00:00:15,635 --> 00:00:19,135
The applications have a 32-bit
virtual address space.

7
00:00:19,135 --> 00:00:24,425
So we have 2 processes times 2
to the 32nd bytes of address

8
00:00:24,425 --> 00:00:28,317
space divided by 2 to
the 12 bytes in a page.

9
00:00:28,317 --> 00:00:35,497
This is how many pages we have times
the size of an entry is 8 bytes,

10
00:00:35,497 --> 00:00:40,562
which gives us two times
eight is 16 x 2 to the 20th.

11
00:00:40,562 --> 00:00:48,050
2 to the 20th bytes is a megabyte,
So we have 16 megabytes.

12
00:00:48,050 --> 00:00:53,200
Note that it didn't matter how much
memory the processes are actually using.

13
00:00:53,200 --> 00:00:58,140
The flat page table needs to have
an entry for every possible page

14
00:00:58,140 --> 00:01:02,740
in the virtual address space, not only
for the pages we are actually using.

15
00:01:02,740 --> 00:01:06,270
Also, it doesn't matter how much
physical memory we actually have.

16
00:01:06,270 --> 00:01:09,050
What matters is what
the size of the entry is.

17
00:01:09,050 --> 00:01:13,820
So for example, this entry was
designed to accommodate up to a 64-bit

18
00:01:13,820 --> 00:01:18,260
physical address, even though the system
actually has much less memory.

19
00:01:18,260 --> 00:01:19,540
Why would you do this?

20
00:01:19,540 --> 00:01:23,000
Well, because you want to build
the system such that it can expand its

21
00:01:23,000 --> 00:01:26,810
memory if necessary, for example,
by adding more memory modules.
