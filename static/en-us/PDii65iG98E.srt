1
00:00:00,234 --> 00:00:04,717
So to wrap up let's talk little bit about doing some recognition using our

2
00:00:04,717 --> 00:00:05,740
SIFT features.

3
00:00:05,740 --> 00:00:10,644
So basically at training time, you I give you some object.

4
00:00:10,644 --> 00:00:16,117
You somehow have to get hold of the, just that object in the image, okay?

5
00:00:16,117 --> 00:00:17,251
So what's the easiest way?

6
00:00:17,251 --> 00:00:18,919
Well, you put it against the black background.

7
00:00:18,919 --> 00:00:19,487
Okay.

8
00:00:19,487 --> 00:00:23,791
So you find the outline, everything inside there is the object.

9
00:00:23,791 --> 00:00:25,789
And you compute your keypoints,

10
00:00:25,789 --> 00:00:29,864
you find your little SIFT descriptors located all over the object.

11
00:00:29,864 --> 00:00:33,200
And in here, you find these outlines, okay?

12
00:00:33,200 --> 00:00:36,370
But again, there'd be little SIFT features all over them.

13
00:00:36,370 --> 00:00:39,108
The outlines are what we're going to overlay when we

14
00:00:39,108 --> 00:00:40,941
say that we've found the image.

15
00:00:40,941 --> 00:00:42,043
Okay?

16
00:00:42,043 --> 00:00:45,746
So at test time, what do we do?

17
00:00:45,746 --> 00:00:51,317
Well, we take the keypoints from our test image and we compare each

18
00:00:51,317 --> 00:00:58,692
one of them against, let's suppose we're looking for, I don't know, telephones.

19
00:00:58,692 --> 00:01:01,248
So we take the keypoints of the telephone,

20
00:01:01,248 --> 00:01:03,668
we try to find the best one that matches.

21
00:01:03,668 --> 00:01:07,937
Exhaustive nearest neighbor best bin first locally sensitive hash,

22
00:01:07,937 --> 00:01:08,837
whatever it is.

23
00:01:08,837 --> 00:01:13,707
I try to find the best one and I compare a whole bunch of them.

24
00:01:13,707 --> 00:01:15,509
Here comes the trick.

25
00:01:15,509 --> 00:01:20,414
Now I want to find a consistent set of matches, okay?

26
00:01:20,414 --> 00:01:22,950
So, what that means is that I'm going to do the following.

27
00:01:22,950 --> 00:01:28,764
Let's suppose that I believe that the difference between this picture and

28
00:01:28,764 --> 00:01:31,726
that picture is an affine transform.

29
00:01:31,726 --> 00:01:32,259
Okay.

30
00:01:32,259 --> 00:01:35,408
Now you're scratching your head to try to remember that whole affine transform

31
00:01:35,408 --> 00:01:37,665
thing, because I'm about to ask you a really hard question.

32
00:01:37,665 --> 00:01:42,236
How many pairs of corresponding points do I need for an affine transform?

33
00:01:42,236 --> 00:01:44,205
Then answer is not four.

34
00:01:44,205 --> 00:01:46,273
Four was a homography.

35
00:01:46,273 --> 00:01:48,042
One for translation.

36
00:01:48,042 --> 00:01:52,279
Two is similarity, translation, rotation, scwale, scale.

37
00:01:52,279 --> 00:01:54,215
It was three for an affine.

38
00:01:54,215 --> 00:01:58,385
So an affine will let you do a translation, rotation, scale and a shear.

39
00:01:58,385 --> 00:02:00,882
So if I find three good points here and

40
00:02:00,882 --> 00:02:05,894
three good points there, that allows me to compute my affine transform.

41
00:02:05,894 --> 00:02:09,122
So then what I can do is that tells me where every point from the left

42
00:02:09,122 --> 00:02:11,132
image should appear in the right image.

43
00:02:11,132 --> 00:02:16,491
So I can now check to see if I take all my key points from my teddy bear,

44
00:02:16,491 --> 00:02:22,810
do they all land at matching keypoints when I apply that same affine transform?

45
00:02:22,810 --> 00:02:26,982
Okay. We'll actually spend a lot more time talking about how to search for

46
00:02:26,982 --> 00:02:29,734
transforms over matches on the next lesson.

47
00:02:29,734 --> 00:02:32,650
But for now, you can just think about doing it sort of this brute force way.
