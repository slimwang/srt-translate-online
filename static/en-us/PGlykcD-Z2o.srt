1
00:00:00,000 --> 00:00:04,640
Knapsack is a very interesting problem because in a way and this is very informal, of course,

2
00:00:04,640 --> 00:00:06,930
it is among the easiest NP complete problems.

3
00:00:06,930 --> 00:00:11,730
So, where as clique and independent set for example seem to be very difficult,

4
00:00:11,730 --> 00:00:16,180
Knapsack allows for some pretty interesting algorithms and both of those

5
00:00:16,180 --> 00:00:22,190
algorithms which will be important for our P-test is called pseudopolynomial algorithm

6
00:00:22,190 --> 00:00:25,170
and you'll soon see why it is named that way.

7
00:00:25,170 --> 00:00:29,620
I'm first going to explain the algorithm to you; so you're given an instance of knapsack,

8
00:00:29,620 --> 00:00:31,630
which means you're given n objects.

9
00:00:31,630 --> 00:00:39,330
Each one has size s so we'll just label those sizes here S₁, S₂ until you get to Sn.

10
00:00:39,330 --> 00:00:42,850
Each object also has a value so the values will be labeled in the same way.

11
00:00:42,850 --> 00:00:46,849
So you have V₁, V₂ and so on until you get to V-sub-n.

12
00:00:46,849 --> 00:00:49,849
And now, here's the algorithm to solve knapsack.

13
00:00:49,849 --> 00:00:52,640
The algorithm basically works for the table that looks like this.

14
00:00:52,640 --> 00:00:55,520
The table has n rows one, two, three down to n

15
00:00:55,520 --> 00:01:04,099
and the table has a lot of columns one, two, three, four, five, and so on and so on and so on

16
00:01:04,099 --> 00:01:06,820
until we get to a number that I'll call V.

17
00:01:06,820 --> 00:01:10,890
And by V, I mean the sum of these values here.

18
00:01:10,890 --> 00:01:14,860
So the total V₁ plus V₂ and so on plus V-sub-n will be called B.

19
00:01:14,860 --> 00:01:21,750
And this is the table that we'll now use. Of course, I still have to tell you what values go into that table.

20
00:01:21,750 --> 00:01:24,409
Each cell here in this table is going to have the following meaning.

21
00:01:24,409 --> 00:01:29,650
I'll call the row that we're at I and I'll call the column that we're at J.

22
00:01:29,650 --> 00:01:35,090
Then, this cell here in row I and column J has the following meaning

23
00:01:35,090 --> 00:01:43,190
The cell here in this table will be the minimum size required to achieve a total value of exactly J

24
00:01:43,190 --> 00:01:49,180
Using the objects one, two, three, four, and so on until you get to I, so you cannot use all objects

25
00:01:49,180 --> 00:01:52,500
So, for example, in the first you row, you can only use object one

26
00:01:52,500 --> 00:01:54,650
In the second row, you can only use objects one and two

27
00:01:54,650 --> 00:01:57,870
and in the third row, objects one, two, and three and so on

28
00:01:57,870 --> 00:02:00,450
and that means that sometimes, of course, it's not possible

29
00:02:00,450 --> 00:02:02,910
to achieve a value of exactly J using these objects

30
00:02:02,910 --> 00:02:07,610
and so, we'll just write a dash into the table if that's not possible.

31
00:02:07,610 --> 00:02:13,190
So, let's use the example from before so you have the objects A, B, C, D, E, F, G

32
00:02:13,190 --> 00:02:15,220
and here we have the sizes and the values.

33
00:02:15,220 --> 00:02:18,700
So, the sizes were three, two, two, three, and so on.

34
00:02:18,700 --> 00:02:23,340
And to construct this table here, we'll, of course, have to label those items here

35
00:02:23,340 --> 00:02:28,700
So, this is item one, this is item two, three, four, five, six, seven.

36
00:02:28,700 --> 00:02:31,580
So, my first question to you now, a brief quiz here.

37
00:02:31,580 --> 00:02:33,150
What do we put in here?

38
00:02:33,150 --> 99:59:59,999
So, how many columns does this table have and how many rows does this table have?
