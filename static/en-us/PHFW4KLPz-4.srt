1
00:00:00,420 --> 00:00:05,030
I walk through my solution of visualizing Storm with Redis and d3, here.

2
00:00:05,030 --> 00:00:08,960
In step 1, I opened a new tab on my local computer, and

3
00:00:08,960 --> 00:00:12,370
typed vagrant ssh with login success.

4
00:00:12,370 --> 00:00:18,580
In step 2, I navigated to lesson 1, stage 1, and you can simply copy, and paste.

5
00:00:18,580 --> 00:00:22,600
In step three we're using the lettuce module to link Java to Redis.

6
00:00:22,600 --> 00:00:27,617
So in your local text editor, navigate to lesson1 > stage1 > source > jvm >

7
00:00:27,617 --> 00:00:32,049
udacity > storm and ReporterExclamationTopology.

8
00:00:32,049 --> 00:00:38,040
Next, we copy the dependency to dependency area and open the palm.xml file.

9
00:00:38,040 --> 00:00:40,260
Next, we scroll down, find the COPY AND

10
00:00:40,260 --> 00:00:44,510
PASTE, paste our dependencies, and finally uncomment.

11
00:00:44,510 --> 00:00:45,720
Notice that you need to copy and

12
00:00:45,720 --> 00:00:48,850
paste your dependency outside the comment statements.

13
00:00:48,850 --> 00:00:53,010
Briefly, if you're unfamiliar with XML, XML is simply a tree structure.

14
00:00:54,320 --> 00:00:55,550
Where there's an opening and

15
00:00:55,550 --> 00:00:59,630
a closing tag for every element in a nested fashion.

16
00:00:59,630 --> 00:01:04,989
Therefore dependency is closed by dependency, group ID is closed by group ID.

17
00:01:04,989 --> 00:01:08,040
And a larger section, build for

18
00:01:08,040 --> 00:01:11,630
example, is always followed by a closing tag of build.

19
00:01:12,740 --> 00:01:15,520
Finally remember to save your palm.xml file.

20
00:01:15,520 --> 00:01:18,140
And step 5, on the command line run MVN package.

21
00:01:18,140 --> 00:01:22,480
Once you have a build success, we move on to step 6.

22
00:01:22,480 --> 00:01:25,880
We first import the RedisClient and RedisConnection.

23
00:01:25,880 --> 00:01:28,550
You can do this simply by copying, navigating back to

24
00:01:28,550 --> 00:01:33,460
your report exclamation topology, and paste your import statement.

25
00:01:33,460 --> 00:01:39,560
Next in step 2 of 4 at the class level, we declare our RedisConnection variable.

26
00:01:39,560 --> 00:01:41,780
Notice that the class level we declare but

27
00:01:41,780 --> 00:01:44,220
in the prepare method, we instantiate.

28
00:01:44,220 --> 00:01:47,440
We can simply copy, scroll down to the class level,

29
00:01:47,440 --> 00:01:52,850
where we see another variable OutputCollector_collector declared but

30
00:01:52,850 --> 00:01:57,120
not instantiated, and finally paste to declare our RedisVariable.

31
00:01:57,120 --> 00:02:00,030
So in the prepare method we are going to copy and

32
00:02:00,030 --> 00:02:02,810
paste to instantiate the RedisConnection.

33
00:02:02,810 --> 00:02:05,800
And we scroll down to the prepare method where we see another

34
00:02:05,800 --> 00:02:08,479
variable _collector.

35
00:02:08,479 --> 00:02:13,010
Instantiated with collector and paste to instantiate the redis connection.

36
00:02:13,010 --> 00:02:15,540
Next we copy the actual connection, and

37
00:02:15,540 --> 00:02:19,480
again in the prepare method we instantiate the actual connection.

38
00:02:19,480 --> 00:02:23,114
Finally, in step 4 of 4, in the execute method,

39
00:02:23,114 --> 00:02:28,180
we define the logic of what happens when a tuple comes into our.

40
00:02:28,180 --> 00:02:32,160
We scroll down to the execute method that receives a tuple and

41
00:02:32,160 --> 00:02:33,660
complete some logic.

42
00:02:33,660 --> 00:02:38,900
Finally, in part 4 of 4, we simply un-comment the long count = 30.

43
00:02:38,900 --> 00:02:40,760
And our redis.publish.

44
00:02:40,760 --> 00:02:45,090
Throughout this course we'll have a number of opportunities to both update and

45
00:02:45,090 --> 00:02:47,190
use all of these different methods.

46
00:02:47,190 --> 00:02:51,650
So for now, let's just run our updated topology.

47
00:02:51,650 --> 00:02:56,080
In step 7, we build again, by typing maven package.

48
00:02:56,080 --> 00:02:58,930
And once we have another build success, in step 8,

49
00:02:58,930 --> 00:03:02,980
we submit the new topology ReporterExclamationTopology.

50
00:03:02,980 --> 00:03:08,270
You can copy and paste the ReporterExclamationToplogy submission here, or you

51
00:03:08,270 --> 00:03:15,400
can simply enter at the command line using storm jar target with a tab udacity

52
00:03:15,400 --> 00:03:20,650
hyphen tab because we want the jar-with-dependencies throughout this course.

53
00:03:20,650 --> 00:03:25,660
Udacity.storm and the ReporterExclamationTopology.

54
00:03:25,660 --> 00:03:28,580
That one submitted, hopefully you will see your visualization running.

55
00:03:28,580 --> 00:03:32,650
Your word cloud, with a number of test names, with three or

56
00:03:32,650 --> 00:03:35,670
six exclamation points following each name.

57
00:03:35,670 --> 00:03:39,290
One final point, you may need to do a Ctrl+C at the command line to

58
00:03:39,290 --> 00:03:41,190
terminate your Storm topology.

59
00:03:41,190 --> 00:03:47,240
That simply your Ctrl+C and you'll see your command prompt up here again.

60
00:03:47,240 --> 00:03:49,930
Congratulations on modifying your first Storm topology.
