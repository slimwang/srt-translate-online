1
00:00:00,110 --> 00:00:03,070
So, lets look at what's happening
here in this declaration.

2
00:00:03,070 --> 00:00:08,240
We're saying not only give us
a variable called targetpwd that is

3
00:00:08,240 --> 00:00:14,150
12 characters long, but
assign the value MyPwd123 to it.

4
00:00:14,150 --> 00:00:18,080
So initialize this variable with
this value that we are providing.

5
00:00:18,080 --> 00:00:22,120
So we have to actually
store this MyPwd123

6
00:00:22,120 --> 00:00:26,510
into this variable that we
are allocating in the stack.

7
00:00:26,510 --> 00:00:28,940
So this are the initialized
we're going to access it.

8
00:00:28,940 --> 00:00:30,120
What does gets do?

9
00:00:30,120 --> 00:00:31,760
I have checked that as well.

10
00:00:31,760 --> 00:00:35,910
So gets remember, reads a string,
that's user input.

11
00:00:35,910 --> 00:00:40,350
And stores that into this
variable called pwdstr.

12
00:00:40,350 --> 00:00:42,910
So remember we declared
again at size 12,

13
00:00:42,910 --> 00:00:45,600
this character string
that's where we're reading.

14
00:00:45,600 --> 00:00:50,650
So when we gets is going to ask for
input, it's going to take that input and

15
00:00:50,650 --> 00:00:53,330
place that input in this pwdstr.

16
00:00:53,330 --> 00:00:55,930
As a result,
it needs to access this variable and

17
00:00:55,930 --> 00:00:58,210
we know this variable is
allocated on the stack.

18
00:00:58,210 --> 00:01:02,040
So, in particular the stack frame for
this function call, so

19
00:01:02,040 --> 00:01:06,290
it's going to access addresses
when we do gets as well.

20
00:01:06,290 --> 00:01:10,550
Next statement, you see several of
them checked because they're all

21
00:01:10,550 --> 00:01:13,570
access variables that are being
allocated on the stack.

22
00:01:13,570 --> 00:01:15,560
That's what we're trying
to illustrate here.

23
00:01:15,560 --> 00:01:18,200
So here, this is comparing two strings.

24
00:01:18,200 --> 00:01:21,690
Again, the string strncmp
is string compare and

25
00:01:21,690 --> 00:01:26,290
tells you the size of the string,
the max size of the string.

26
00:01:26,290 --> 00:01:30,550
So it saying compare password
string that we just was input.

27
00:01:30,550 --> 00:01:34,050
Target password that has this MyPwd123,
so

28
00:01:34,050 --> 00:01:36,220
to compare these what do we have to do?

29
00:01:36,220 --> 00:01:39,410
We have to go fetch those values.

30
00:01:39,410 --> 00:01:41,150
Character by character or

31
00:01:41,150 --> 00:01:44,490
whatever this scheme is that
we're using to do the comparison.

32
00:01:44,490 --> 00:01:47,340
But we have to see what
is in this variable.

33
00:01:47,340 --> 00:01:48,880
And what is stored here so

34
00:01:48,880 --> 00:01:52,840
to read those values again,
we have to access the stack because

35
00:01:52,840 --> 00:01:56,920
remember both the the local variables
are allocated in the stack frame.

36
00:01:56,920 --> 00:02:00,410
Once we do the comparison,
if the comparison is successful,

37
00:02:00,410 --> 00:02:02,450
we are writing this variable.

38
00:02:02,450 --> 00:02:05,535
We are writing one into
this allow_login variable.

39
00:02:05,535 --> 00:02:10,320
Storing this value into this variable
that's on the stack that was allocated

40
00:02:10,320 --> 00:02:14,350
in the stack frame is again going to
require that we access the stack.

41
00:02:14,350 --> 00:02:18,380
And as a result, we have checked
it because this again requires

42
00:02:18,380 --> 00:02:20,780
access to this variable
that's on the stack.

43
00:02:20,780 --> 00:02:22,970
In this if statement that we have here,

44
00:02:22,970 --> 00:02:27,510
we have to find out what is the current
content of this variable allow_login.

45
00:02:27,510 --> 00:02:28,930
So we have to read it.

46
00:02:28,930 --> 00:02:31,070
Earlier we stored a value in it.

47
00:02:31,070 --> 00:02:34,820
If the comparison was not successful,
actually we will not do that.

48
00:02:34,820 --> 00:02:38,390
So this will not be executed if
the two strings didn't match, but

49
00:02:38,390 --> 00:02:40,610
in case they did match, we store one.

50
00:02:40,610 --> 00:02:42,670
But when we come here we're saying,

51
00:02:42,670 --> 00:02:45,220
we're going to check this
variable allow_login.

52
00:02:45,220 --> 00:02:48,560
If its value is zero,
then we're going to print one message,

53
00:02:48,560 --> 00:02:50,940
if it's not then we're going to
print a different message.

54
00:02:50,940 --> 00:02:55,050
So to find out the value of allow_login
we have to read it which requires

55
00:02:55,050 --> 00:02:58,540
access to an address that
is in the stack frame.

56
00:02:58,540 --> 00:03:02,180
Then we're doing this printing, so
if you look at these are function calls.

57
00:03:02,180 --> 00:03:06,190
And I told you earlier function
calls result in a stack frame

58
00:03:06,190 --> 00:03:07,240
when you make the call.

59
00:03:07,240 --> 00:03:10,600
But remember they're not
accessing any variables

60
00:03:10,600 --> 00:03:13,060
that we have in our current frame.

61
00:03:13,060 --> 00:03:16,270
So, I haven't checked
these three boxes here

62
00:03:16,270 --> 00:03:19,420
because we are not accessing
any of the variables

63
00:03:19,420 --> 00:03:24,030
that exists over that allocated
space in the current stack frame.

64
00:03:24,030 --> 00:03:27,130
That is what we are discussing here for
this particular function.
