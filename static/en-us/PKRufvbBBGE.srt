1
00:00:00,000 --> 00:00:03,000
Now, we got rid of the times in the successor function,

2
00:00:03,000 --> 00:00:05,000
so we've got to put them back in someplace.

3
00:00:05,000 --> 00:00:08,000
I'm going to generalize a little bit, and instead of talking about times,

4
00:00:08,000 --> 00:00:11,000
I'm going to talk about costs for a path.

5
00:00:11,000 --> 00:00:14,000
I'm just thinking of maybe we might want to do some other problems

6
00:00:14,000 --> 00:00:18,000
that also have paths in them and that aren't dealing with optimizing time

7
00:00:18,000 --> 00:00:21,000
but are dealing with optimizing some type of cost.

8
00:00:21,000 --> 00:00:25,000
What I want you to for me is to define this function path_cost,

9
00:00:25,000 --> 00:00:29,000
which takes a path as input and returns the total cost of that path.

10
00:00:29,000 --> 00:00:32,000
That's already stored away. We don't have to compute anything new.

11
00:00:32,000 --> 00:00:39,000
Because we decided that our convention for paths was it was going to be stored there.

12
00:00:39,000 --> 00:00:47,000
That is, we said that a path is equal to a state followed by an action and a total cost

13
00:00:47,000 --> 00:00:50,000
followed by another state, etc.

14
00:00:50,000 --> 00:00:53,000
Here I've just said, well, if we don't have any actions there

15
00:00:53,000 --> 00:00:58,000
or if it's the empty path, then do one thing. Otherwise do something else.

16
00:00:58,000 --> 00:01:05,000
Then I also want you to find the bridge cost--bcost is the abbreviation I'll use.

17
00:01:05,000 --> 00:01:07,000
That's the cost of an individual action.

18
00:01:07,000 --> 00:01:15,000
An action in this domain is something like 2, 5, arrow to the right.

19
00:01:15,000 --> 99:59:59,999
I want you to figure out what's the cost of that action.
