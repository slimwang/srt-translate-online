1
00:00:00,800 --> 00:00:04,832
Before we can extract the earthquake
data that we need for our app, we should

2
00:00:04,832 --> 00:00:08,936
discuss the structure of format of the
data that we get back from the USGS API.

3
00:00:08,936 --> 00:00:10,083
When we say format,

4
00:00:10,083 --> 00:00:14,400
we mean to discuss the specifics of how
the data is organize or structure, so

5
00:00:14,400 --> 00:00:18,840
that we know how to dissect and
extract the parts we need for an app.

6
00:00:18,840 --> 00:00:22,970
Earlier in this lesson, we reviewed
some of the HTTP request parameters that

7
00:00:22,970 --> 00:00:25,545
were available to us to
query the USGS dataset.

8
00:00:26,640 --> 00:00:31,330
One of those parameters format
equals value allows us to specify

9
00:00:31,330 --> 00:00:35,310
the response format or structure of how
we'd like the response data to be sent.

10
00:00:36,690 --> 00:00:39,850
We opted for format=geojson,

11
00:00:39,850 --> 00:00:44,850
which sends the data back to us in
a structure using the JSON syntax rules.

12
00:00:45,980 --> 00:00:49,380
While there are other formats that
have strengths and weaknesses and

13
00:00:49,380 --> 00:00:53,450
histories beyond the scope of this
class we chose JSON because this is

14
00:00:53,450 --> 00:00:58,990
the most common response format used
by many of today's signature websters.

15
00:00:58,990 --> 00:01:03,687
That's not to say JSON has decidedly
better than any other formats such

16
00:01:03,687 --> 00:01:05,235
as XML.

17
00:01:05,235 --> 00:01:09,110
Moreover, we encourage you to explore
other formats in your free time

18
00:01:09,110 --> 00:01:12,600
to get a better sense of the design
intention, the strengths and

19
00:01:12,600 --> 00:01:15,560
weaknesses, and
even the histories of those formats.

20
00:01:17,510 --> 00:01:20,750
Like all technology the web has
changed rapidly over time in

21
00:01:20,750 --> 00:01:22,320
various formats have emerged.

22
00:01:23,510 --> 00:01:27,085
Rest assured though, the experience you
will gain by familiarizing yourself with

23
00:01:27,085 --> 00:01:31,300
JSON will also help you pick
up on other formats quickly.

24
00:01:31,300 --> 00:01:34,710
So, let's zoom in on JSON.

25
00:01:34,710 --> 00:01:39,640
For the USGS earthquake API, we have
a format called geojson available.

26
00:01:39,640 --> 00:01:42,605
Geojson is just
a special flavor of JSON,

27
00:01:42,605 --> 00:01:46,420
custom-tailored to represent
geographical information.

28
00:01:47,560 --> 00:01:51,940
JSON stands for JavaScript,
Object, Notation.

29
00:01:51,940 --> 00:01:55,710
For the name you might assume that
is tightly coupled with a JavaScript

30
00:01:55,710 --> 00:01:59,860
programming language,
that's actually not the case.

31
00:01:59,860 --> 00:02:04,130
JSON well originally designed to help
facilitate efficient communication on

32
00:02:04,130 --> 00:02:06,990
the web and hence it's title JavaScript

33
00:02:06,990 --> 00:02:10,580
is really just a set of some
tactical rules to organize data and

34
00:02:10,580 --> 00:02:13,080
thus is completely programming
language independent.

35
00:02:14,190 --> 00:02:18,900
So, JSON can be interpreted using
any programming language of choice,

36
00:02:18,900 --> 00:02:22,460
including the Java code that we
use to build our Android apps.

37
00:02:23,530 --> 00:02:27,920
Let's start to learn how to read JSON
by looking at a really simple example.

38
00:02:27,920 --> 00:02:30,720
This example describes a kind of shoe.

39
00:02:30,720 --> 00:02:36,430
Let's start at the root left brace
which notes the start of a JSON object.

40
00:02:36,430 --> 00:02:41,330
Everything inside it before the closing
right brace is its contents.

41
00:02:41,330 --> 00:02:44,290
You can think of these braces
as the container of staff.

42
00:02:45,550 --> 00:02:49,260
At the heart of the JSON's syntactical
structures as the notion of

43
00:02:49,260 --> 00:02:51,180
key value pairing.

44
00:02:51,180 --> 00:02:56,420
Syntactically, the key is on the left of
the colon and the value is on the right.

45
00:02:57,700 --> 00:03:01,860
This pairing is simply a way of
encapsulating a tie or an association

46
00:03:01,860 --> 00:03:07,240
between a name of our choosing, a.k.a.,
the key, and its corresponding value.

47
00:03:08,710 --> 00:03:12,580
It turns out this is an important
semantic in programming and

48
00:03:12,580 --> 00:03:14,270
computer science.

49
00:03:14,270 --> 00:03:15,350
Why?

50
00:03:15,350 --> 00:03:18,420
Well, this mapping or
binding of a key to a value

51
00:03:18,420 --> 00:03:23,210
helps us recall the data layer in
an easier and more logical manner.

52
00:03:23,210 --> 00:03:27,130
In other words, when we want to
pull up or recall the data layer

53
00:03:28,130 --> 00:03:32,300
instead of having to remember all the
specifics of the data because in some

54
00:03:32,300 --> 00:03:37,870
case it could be a lot of data, we can
do this just by using its tag or key.

55
00:03:38,930 --> 00:03:41,820
Think of a coat check when you're
going to the symphony hall.

56
00:03:41,820 --> 00:03:45,510
You might have dropped off a lot of
items at the coat check counter, but

57
00:03:45,510 --> 00:03:49,950
all you need to do to get your stuff
back is to hold on to your ticket and

58
00:03:49,950 --> 00:03:52,070
give it to the attendant
at the end of the show.

59
00:03:53,170 --> 00:03:55,890
Let's look at a few examples of keys.

60
00:03:55,890 --> 00:04:01,470
Here we have the string key size, which
references a positive decimal number,

61
00:04:01,470 --> 00:04:04,522
which happens to be for
the shoe size of 9.5.

62
00:04:04,522 --> 00:04:09,160
When we see a comma, this is simply
a delimiter to let us know that there's

63
00:04:09,160 --> 00:04:12,000
another key value pair following.

64
00:04:12,000 --> 00:04:17,100
So we also have wide,
which maps to the boolean value of true.

65
00:04:17,100 --> 00:04:20,970
Then we have country of origin,
which is a string set to USA.

66
00:04:22,540 --> 00:04:25,910
This key value is semantic and
starting to feel pretty straightforward.

67
00:04:26,940 --> 00:04:28,060
Cool!

68
00:04:28,060 --> 00:04:32,190
These have been pretty simple keys, keys
with logical names that map to simple

69
00:04:32,190 --> 00:04:34,000
primitives that you've been used to.

70
00:04:34,000 --> 00:04:38,050
Numbers, booleans, and strings.

71
00:04:38,050 --> 00:04:42,440
But wait,
the key style maps to a value of what,

72
00:04:42,440 --> 00:04:45,550
what is this brace here, there's
a whole bunch of other stuff going on.

73
00:04:45,550 --> 00:04:48,150
What are you doing to me here?

74
00:04:48,150 --> 00:04:52,830
This could be kind of interesting, and
in fact, this is where the power and

75
00:04:52,830 --> 00:04:56,450
extensibility of JSON
as a data format lies.

76
00:04:56,450 --> 00:04:57,850
Let's take a break, and

77
00:04:57,850 --> 00:05:01,170
we'll take a deeper look at
the possible values in the next node.
