1
00:00:00,056 --> 00:00:03,932
Okay. So, let's look at these scenarios and figure out what the right choice would be.

2
00:00:03,932 --> 00:00:08,261
So for the first, we're looking at a small input vector, and you've got plenty of processors.

3
00:00:08,261 --> 00:00:10,468
So, you're not really worried so much about work efficiency.

4
00:00:10,468 --> 00:00:13,293
You have more than enough processors to do the work that you need to do.

5
00:00:13,293 --> 00:00:15,917
Thus, you're probably going to be concerned with the

6
00:00:15,917 --> 00:00:17,847
step efficiency of the algorithm that you pick.

7
00:00:17,847 --> 00:00:21,025
And the one with the greatest step efficiency is Hillis and Steele.

8
00:00:21,025 --> 00:00:24,043
Now conversely, when you have an enormous amount of work to do,

9
00:00:24,043 --> 00:00:27,432
and not nearly enough processors to do it, you're going to be looking for the

10
00:00:27,432 --> 00:00:29,883
algorithm that is going to have the best work complexity.

11
00:00:29,883 --> 00:00:33,815
And so, for this, if you have parallel processors, you're absolutely going to want to run the

12
00:00:33,815 --> 00:00:35,868
work-efficient algorithm, Blelloch's algorithm.

13
00:00:35,868 --> 00:00:40,679
Now, if you only have 1 processor to work with, you're stuck with a serial algorithm no matter what.
