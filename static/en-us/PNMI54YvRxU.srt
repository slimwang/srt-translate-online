1
00:00:00,000 --> 00:00:02,000
One simple solution is to take our list of nodes—

2
00:00:02,000 --> 00:00:04,000
let's say we have four of them—

3
00:00:04,000 --> 00:00:06,000
and connect the first one with the second one, the second one with the third one,

4
00:00:06,000 --> 00:00:09,000
the third one with the fourth one, and the last one with the first one.

5
00:00:09,000 --> 00:00:12,000
Then we have, trivially, and Eulerian Tour through this graph.

6
00:00:12,000 --> 00:00:15,000
Here is my code to do what I just described.

7
00:00:15,000 --> 00:00:17,000
I wanted to create a graph that was a little bit more fun

8
00:00:17,000 --> 00:00:19,000
but still had an Eulerian Tour.

9
00:00:19,000 --> 00:00:21,000
Here's another version that introduces a little bit of randomness.

10
00:00:21,000 --> 00:00:23,000
Let's say we start off with 8 nodes.

11
00:00:23,000 --> 00:00:26,000
In the first step, I pick two random nodes and connect them

12
00:00:26,000 --> 00:00:29,000
and choose a random node among the nodes that are connected—say this one—

13
00:00:29,000 --> 00:00:32,000
and connect them and repeat this process until all the nodes are connected.

14
00:00:32,000 --> 00:00:35,000
Then classify all the nodes as being odd or even.

15
00:00:35,000 --> 00:00:38,000
All the nodes in orange have odd degree, and the other two are even.

16
00:00:38,000 --> 00:00:42,000
We then pick a node in the set of nodes with odd degree—say this one—

17
00:00:42,000 --> 00:00:44,000
and connect it with another node that has odd degree.

18
00:00:44,000 --> 00:00:47,000
We'll connect it to that one. These both now have even degree.

19
00:00:47,000 --> 00:00:50,000
We repeat this process—pick this node, connect it with that node.

20
00:00:50,000 --> 00:00:53,000
Now we have two nodes left that have odd degree.

21
00:00:53,000 --> 00:00:55,000
Unfortunately, they're already connected.

22
00:00:55,000 --> 00:00:57,000
What we can do is pick one of the nodes with odd degree

23
00:00:57,000 --> 00:00:59,000
and then randomly pick another node with even degree

24
00:00:59,000 --> 00:01:02,000
that it's not already connected to and connect them. So, maybe this one down here.

25
00:01:02,000 --> 00:01:05,000
Now this new node has odd degree. The one node no longer does.

26
00:01:05,000 --> 00:01:08,000
Now we have two nodes with odd degree that we can connect.

27
00:01:08,000 --> 00:01:11,000
Just to verify that there's an Eulerian tour,

28
00:01:11,000 --> 00:01:16,000
we can go through here over to here connecting up with this guy and there.

29
00:01:16,000 --> 00:01:18,000
Here's my code that does what I just described.

30
00:01:18,000 --> 00:01:22,000
In the first step, we pick two random nodes and add them to the graph.

31
00:01:22,000 --> 00:01:25,000
While we still have unconnected nodes we continue connecting everything.

32
00:01:25,000 --> 00:01:28,000
While we still have odd nodes, we continue connecting the odd nodes.

33
00:01:28,000 --> 00:01:31,000
One question that I'd like you to think about and answer on the forums

34
00:01:31,000 --> 00:01:33,000
is whether this loop is guaranteed to end.

35
00:01:33,000 --> 00:01:35,000
If so, why?

36
00:01:35,000 --> 00:01:37,000
There's a link below in the instructor's comment where I'd like you to post your answer

37
00:01:37,000 --> 00:01:40,000
and read what some other people have to say as well.
