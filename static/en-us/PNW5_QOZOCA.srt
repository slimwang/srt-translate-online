1
00:00:00,610 --> 00:00:03,280
Let's take a quick look at how learning switches

2
00:00:03,280 --> 00:00:07,075
work. A learning switch maintains a table between destination

3
00:00:07,075 --> 00:00:10,640
addresses and output ports on the switch, so that

4
00:00:10,640 --> 00:00:13,890
when it receives a frame destined for a particular

5
00:00:13,890 --> 00:00:16,950
place it knows what output port to forward the

6
00:00:16,950 --> 00:00:20,630
frame. Initially the forwarding table is empty, so if

7
00:00:20,630 --> 00:00:23,400
there's no entry in the forwarding table the switch

8
00:00:23,400 --> 00:00:26,540
will simply flood. Let's look at a quick example.

9
00:00:26,540 --> 00:00:30,350
If host A sends a frame destined for

10
00:00:30,350 --> 00:00:33,690
host C, then initially the switch has nothing

11
00:00:33,690 --> 00:00:36,610
in its table to determine where that frame

12
00:00:36,610 --> 00:00:39,540
should be sent, so it will flood the frame

13
00:00:39,540 --> 00:00:42,270
on all of its outgoing ports. On the

14
00:00:42,270 --> 00:00:44,770
other hand, because the frame has a source address

15
00:00:44,770 --> 00:00:47,610
of A, and arrived on input port one,

16
00:00:47,610 --> 00:00:51,660
the switch can now make an association between address

17
00:00:51,660 --> 00:00:55,250
A and port one. In other words, it knows

18
00:00:55,250 --> 00:00:57,990
that the host with address A is attached to

19
00:00:57,990 --> 00:01:00,720
port one. So that in future, when it sees

20
00:01:00,720 --> 00:01:03,790
frames destined for host A, it no longer needs

21
00:01:03,790 --> 00:01:07,470
to flood, but can instead send the frames directly

22
00:01:07,470 --> 00:01:11,430
to port one. So, for example, when C replies

23
00:01:11,430 --> 00:01:14,510
with a frame destined for A, the switch now

24
00:01:14,510 --> 00:01:16,770
has an entry that tells it that it doesn't

25
00:01:16,770 --> 00:01:19,400
need to flood that packet. But instead, can

26
00:01:19,400 --> 00:01:22,540
simply send the packet directly to the output port.

27
00:01:22,540 --> 00:01:25,320
Note also that when C replies, the switch

28
00:01:25,320 --> 00:01:30,150
learns another association between address C and port three.

29
00:01:30,150 --> 00:01:33,570
So future frames destined for host C, no

30
00:01:33,570 --> 00:01:36,800
longer need to be flooded, either. They can simply

31
00:01:36,800 --> 00:01:39,390
be forwarded to output port three. So, in

32
00:01:39,390 --> 00:01:42,140
summary, if a learning switch has no entry in

33
00:01:42,140 --> 00:01:44,150
the forwarding table, it must flood the frame

34
00:01:44,150 --> 00:01:46,990
on all outgoing ports. But otherwise, it can

35
00:01:46,990 --> 00:01:49,690
simply send that frame to the corresponding output

36
00:01:49,690 --> 00:01:53,660
port in the table. Note that learning switches

37
00:01:53,660 --> 00:01:56,260
do not eliminate all forms of flooding. The

38
00:01:56,260 --> 00:01:59,100
learning switch must still flood in cases where

39
00:01:59,100 --> 00:02:02,200
there is no corresponding entry in the forwarding

40
00:02:02,200 --> 00:02:07,460
table. And also, these switches must forward broadcast frames,

41
00:02:07,460 --> 00:02:09,850
such as ARP queries. Now because learning

42
00:02:09,850 --> 00:02:12,430
switches still sometimes need to flood, we still

43
00:02:12,430 --> 00:02:15,750
have to take care when the network topology

44
00:02:15,750 --> 00:02:19,960
has loops. Now most underlying physical topologies have

45
00:02:19,960 --> 00:02:22,730
loops for reasons of redundancy. If any

46
00:02:22,730 --> 00:02:25,540
particular link fails, you'd still like hosts on

47
00:02:25,540 --> 00:02:28,290
the LAN to remain connected. But let's see

48
00:02:28,290 --> 00:02:32,640
what happens when the underlying physical topology has

49
00:02:32,640 --> 00:02:35,140
a loop. Let's suppose a host on the

50
00:02:35,140 --> 00:02:38,030
upper LAN broadcasts a frame. Each learning switch will

51
00:02:38,030 --> 00:02:41,080
hear that frame and broadcast it on all of

52
00:02:41,080 --> 00:02:44,580
its outgoing ports. When that broadcast occurs, the other

53
00:02:44,580 --> 00:02:48,500
learning switches that are in the topology that contains

54
00:02:48,500 --> 00:02:51,970
a loop will hear the rebroadcast. They in turn

55
00:02:51,970 --> 00:02:55,140
will not know that they shouldn't rebroadcast the packet

56
00:02:55,140 --> 00:02:57,740
that they just heard. So each of those switches

57
00:02:57,740 --> 00:03:00,120
will in turn rebroadcast the packet on

58
00:03:00,120 --> 00:03:02,930
their outgoing ports. And, of course, this process

59
00:03:02,930 --> 00:03:06,090
will continue, creating both packet loops and what

60
00:03:06,090 --> 00:03:08,910
are known as broadcast storms. So, cycles in

61
00:03:08,910 --> 00:03:12,670
the underlying physical topology can create the potential

62
00:03:12,670 --> 00:03:16,520
for learning switches to introduce forwarding loops and

63
00:03:16,520 --> 00:03:19,070
broadcast storms. So we need some kind of

64
00:03:19,070 --> 00:03:23,200
solution to ensure that even if the underlying

65
00:03:23,200 --> 00:03:28,620
physical topology has cycles, which it often needs for redundancy,

66
00:03:28,620 --> 00:03:34,120
that the switches themselves don't always flood all packets on all outgoing

67
00:03:34,120 --> 00:03:38,520
ports. In other words, we need some kind of protocol to

68
00:03:38,520 --> 00:03:43,770
create a logical forwarding tree on top of the underlying physical topology.
