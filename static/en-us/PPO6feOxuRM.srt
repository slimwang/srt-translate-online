1
00:00:00,000 --> 00:00:02,000
Here's my solution to the findtags problem.

2
00:00:02,000 --> 00:00:06,000
I decided to do it just using regular expressions.

3
00:00:06,000 --> 00:00:10,000
Why don't I make that explicit and import the regular expression module,

4
00:00:10,000 --> 00:00:14,000
but then I broke up my regular expression, because they can get long and complicated.

5
00:00:14,000 --> 00:00:17,000
I said there is a part where I'm parsing the parameters,

6
00:00:17,000 --> 00:00:23,000
and that's one or more word characters, an equal sign, and then a quoted string.

7
00:00:23,000 --> 00:00:28,000
A quote character, 0 or more non-quote characters, followed by a quote character.

8
00:00:28,000 --> 00:00:32,000
Then that whole thing we can have zero or more parameters.

9
00:00:32,000 --> 00:00:38,000
The thing that made it complicated is I've got to throw in optional spaces in multiple positions--

10
00:00:38,000 --> 00:00:41,000
" \s* " means zero or more spaces.

11
00:00:41,000 --> 00:00:44,000
That defines a set of parameters.

12
00:00:44,000 --> 00:00:49,000
Then the tag is the angle bracket, maybe some spaces, word character--

13
00:00:49,000 --> 00:00:55,000
like the a or the table tag, then the parameters, then maybe some more spaces,

14
00:00:55,000 --> 00:00:58,000
and then the close. The close is an angle bracket.

15
00:00:58,000 --> 00:01:01,000
I allowed an optional slash-angle bracket there.

16
00:01:01,000 --> 00:01:04,000
Now that I've defined this regular expression in tags,

17
00:01:04,000 --> 00:01:08,000
then I just re.findall of the tags in the text.
