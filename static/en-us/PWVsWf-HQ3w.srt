1
00:00:00,810 --> 00:00:03,190
Recall that we started with a problem of designing a robot,

2
00:00:03,190 --> 00:00:07,290
that can walk on water. Let us suppose that, that particular target

3
00:00:07,290 --> 00:00:12,170
problem resolves in the retrieval of a source case, of a robot design that we

4
00:00:12,170 --> 00:00:17,420
already encountered. One that can walk on ground. Now the question becomes,

5
00:00:17,420 --> 00:00:21,080
how can we adapt this particular design of the robot that can walk on

6
00:00:21,080 --> 00:00:26,455
the ground, into a robot design that can walk on water? Let us now suppose,

7
00:00:26,455 --> 00:00:32,299
if we reuse this particular problem of designing a robot to walk on water.

8
00:00:32,299 --> 00:00:36,830
As a probe into the case memory. And now the case returns to us,

9
00:00:36,830 --> 00:00:40,410
the design of the basilisk lizard. That might happen,

10
00:00:40,410 --> 00:00:44,290
because the design of the basilisk lizard, is indexed by it's functional model,

11
00:00:44,290 --> 00:00:48,500
walk on water. So there is a pragmatic similarity between the two.

12
00:00:48,500 --> 00:00:51,040
We now have the design of a robot who can walk on ground,

13
00:00:51,040 --> 00:00:55,070
and we have the design of a biological organism, the Basilisk Lizard,

14
00:00:55,070 --> 00:01:00,160
that can walk on water. For the Basilisk lizard, we also have a complete model,

15
00:01:00,160 --> 00:01:04,989
a complete explanation of how its structure achieves its function. Now that

16
00:01:04,989 --> 00:01:09,280
we have a partial design for the robot, this is a design of the robot that can

17
00:01:09,280 --> 00:01:14,230
walk on ground. And we have a design of an organism that can walk on water.

18
00:01:14,230 --> 00:01:17,830
We can try to do an alignment between these two. This alignment will be

19
00:01:17,830 --> 00:01:22,750
based on the similarity between relationships. Clearly, the objects here, and

20
00:01:22,750 --> 00:01:27,870
objects there are very different. Once we have aligned these structural models,

21
00:01:27,870 --> 00:01:31,170
or the robot that can walk on ground, and the basilisk lizard that can walk on

22
00:01:31,170 --> 00:01:37,190
water. Then, we can start doing transfer. We can transfer specific features,

23
00:01:37,190 --> 00:01:41,700
of the structure of the basilisk lizard. For example, the shape of its feet,

24
00:01:41,700 --> 00:01:45,400
to this model, of the robot that can walk on ground. In order to convert it

25
00:01:45,400 --> 00:01:50,110
into a robot, it can walk on water. Having constructed a structural model, for

26
00:01:50,110 --> 00:01:54,470
this robot that can walk on water then we can try to transport the behavioral

27
00:01:54,470 --> 00:01:59,400
model, and then the functional model. And then this way we have a complete model

28
00:01:59,400 --> 00:02:03,720
of a robot that can walk on water. Along with an explanation of how it

29
00:02:03,720 --> 00:02:07,370
will achieve it's function. This is sometimes called compositional analogy.

30
00:02:07,370 --> 00:02:09,979
We'll first do mapping at the level of structure, and

31
00:02:09,979 --> 00:02:13,690
that mapping at a level of structure helps us transfer some information.

32
00:02:14,810 --> 00:02:19,300
That in turn allows us to transfer information at the behavioral level.

33
00:02:19,300 --> 00:02:22,280
Once we have transferred information at the behavioral level, we can climb up

34
00:02:22,280 --> 00:02:26,290
this abstraction hierarchy, and transfer information at a functional level.

35
00:02:26,290 --> 00:02:30,520
We can now revisit our computational process, and our logical reasoning.

36
00:02:30,520 --> 00:02:33,660
Initially we had presented this particular process like, a linear chain,

37
00:02:33,660 --> 00:02:38,680
Retrieval, Mapping, Transfer, Evaluation and Storage. In general, however,

38
00:02:38,680 --> 00:02:42,820
there can be many loops here. We may do some initial mapping, for example,

39
00:02:42,820 --> 00:02:46,910
that may result in some transfer of information. But that transfer then,

40
00:02:46,910 --> 00:02:50,920
may lead to additional mapping, and then to additional transfer and so

41
00:02:50,920 --> 00:02:56,190
on. Here is another brief example, from biological inspired design, in this case

42
00:02:56,190 --> 00:03:01,010
we want to design a robot that can swim under water in a very slowly manner.

43
00:03:01,010 --> 00:03:04,230
This particular function of swimming underwater in a stealthy manner,

44
00:03:04,230 --> 00:03:09,640
reminds a design team of a copepod. A copepod is a biological organism,

45
00:03:09,640 --> 00:03:13,250
that has a large number of appendages. It moves underwater, in

46
00:03:13,250 --> 00:03:19,070
such a way that in generates minimum wake, especially when it moves very slowly.

47
00:03:19,070 --> 00:03:24,260
On the other hand, when it moves rapidly, then the wake becomes large,

48
00:03:24,260 --> 00:03:28,380
when the wake is small then its motion is very steady, when the wake is large,

49
00:03:28,380 --> 00:03:32,480
its motion is no longer steady. An analogically transfer of knowledge about this

50
00:03:32,480 --> 00:03:38,340
particular copepod, gives a design for the microbot for slow velocity.

51
00:03:39,370 --> 00:03:44,170
This analogy, decomposes our original design problem. We had the original design

52
00:03:44,170 --> 00:03:48,070
problem, as moving underwater in a stealthy manner. Now that we

53
00:03:48,070 --> 00:03:53,280
have a design of an organism, for moving underwater at low velocities,

54
00:03:53,280 --> 00:03:58,360
we are still left with the sub goal of moving underwater at high velocities.

55
00:03:58,360 --> 00:04:02,570
The goal of designing a microbot, that can move underwater in a stealthy manner,

56
00:04:02,570 --> 00:04:07,240
at fast velocities, may remind the design team of the squid. The squid uses

57
00:04:07,240 --> 00:04:11,170
a special mechanism, like the jet propulsion mechanism to move underwater in

58
00:04:11,170 --> 00:04:15,910
a stealthy manner at pretty high velocities. Now we have created a designed for

59
00:04:15,910 --> 00:04:19,410
microbot. Where part of the design comes from the design of the copepod,

60
00:04:19,410 --> 00:04:21,360
and the other part comes from the design of the squid.

61
00:04:21,360 --> 00:04:24,830
Instead of borrowing the design from one source case,

62
00:04:24,830 --> 00:04:28,170
we are borrowing parts of the design of multiple source cases.

63
00:04:28,170 --> 00:04:32,680
This is a compound analogy. Notice that there's a problem evolution going on,

64
00:04:32,680 --> 00:04:36,480
which started with one problem. We arrived at a partial solution to that.

65
00:04:36,480 --> 00:04:40,310
Which then leads us to a problem evolution. And the problem transformation.

66
00:04:40,310 --> 00:04:44,590
We then have a new understanding of the problem. So, this example we saw,

67
00:04:44,590 --> 00:04:48,850
how we first did analogical retrieval of the coco powder organism. Then Mapping,

68
00:04:48,850 --> 00:04:54,460
then Transfer. That then lead to addition retrieval, in this case with a squid.

69
00:04:54,460 --> 00:04:57,670
Once again this process is not linear. Just like we can iterate between

70
00:04:57,670 --> 00:05:01,800
Mapping and Transfer, similarly we can iterate between Transfer and Retrieval.
