1
00:00:00,230 --> 00:00:02,360
Okay, so let us say that this is our ROB here,

2
00:00:02,360 --> 00:00:08,460
this is our Register Allocation Table and this is our set of Registers. And

3
00:00:08,460 --> 00:00:15,710
let's suppose that our instructions are R1=R2+R3, R3=R5+R6,

4
00:00:15,710 --> 00:00:21,450
R1=ROB1 x R7, it's ROB1 here because we're using R1 [UNKNOWN] this way.

5
00:00:21,450 --> 00:00:26,830
And then R1 equals R4 plus R8 and then R2 equals

6
00:00:26,830 --> 00:00:32,680
R9 plus ROB2, because it was really using R3 but it got renamed this way.

7
00:00:32,680 --> 00:00:35,100
Let's say that all of these instructions have finished and

8
00:00:35,100 --> 00:00:38,080
put these results in the ROB, and now it's time to commit them and

9
00:00:38,080 --> 00:00:41,750
this is the next instruction that we'll be committing. At that point the RAT

10
00:00:41,750 --> 00:00:47,290
entries are going to be. For R1, we need to point to ROB4. Why? Well because,

11
00:00:47,290 --> 00:00:51,670
the entry in ROB4 is the latest write to R1 as far as the instructions that we

12
00:00:51,670 --> 00:00:55,490
have issued, is concerned. So, you know, this was pointing to the register and

13
00:00:55,490 --> 00:00:58,750
then when this one was renamed it made to point to ROB1.

14
00:00:58,750 --> 00:01:02,580
And then when this one was renamed, we made that RAT entry point to ROB3 and

15
00:01:02,580 --> 00:01:06,370
finally, it, it became ROB4 when this one was renamed and after that,

16
00:01:06,370 --> 00:01:13,050
we didn't rename any R1 instructions. R2, the latest rename to it was ROB5 and

17
00:01:13,050 --> 00:01:18,860
then for R3, the latest rename of it was ROB2. So, this is what we have in our

18
00:01:18,860 --> 00:01:23,150
RAT for now. And let's assume that there are some values in the registers here,

19
00:01:23,150 --> 00:01:26,660
they don't matter anymore because they will all be overwritten. So if you

20
00:01:26,660 --> 00:01:31,730
remember before we had the ROB, when we were only doing [UNKNOWN] algorithm, and

21
00:01:31,730 --> 00:01:36,320
were finishing instructions out of order, with no commit at the end. What was

22
00:01:36,320 --> 00:01:41,360
happening is as the result is broadcast we need to see what's in the RAT for

23
00:01:41,360 --> 00:01:43,740
that result. And if it says, for

24
00:01:43,740 --> 00:01:48,060
example, that this was supposed to be produced by our instruction, meaning,

25
00:01:48,060 --> 00:01:52,110
we were the latest rename of this then we would update the Register file.

26
00:01:52,110 --> 00:01:56,620
If, for example, the R1 entry said that it shouldn't be asked that broadcast

27
00:01:56,620 --> 00:02:00,390
gets the latest result, then we don't update the registers. With the ROB,

28
00:02:00,390 --> 00:02:04,130
this changes because now, we have the commit. We will commit instructions.

29
00:02:04,130 --> 00:02:09,110
In the correct order, in order of program execution. And each time,

30
00:02:09,110 --> 00:02:12,860
we commit an instruction, we will deposits it's result in the register's,

31
00:02:12,860 --> 00:02:18,720
no matter what the RAT really says about it. So when we commit ROB1 entry,

32
00:02:18,720 --> 00:02:23,500
we're going to take this result of R2 plus R3, whatever that value is.

33
00:02:23,500 --> 00:02:28,890
And we will put that value in the registers even though the renaming

34
00:02:28,890 --> 00:02:32,950
in the RAT says that this is not the latest value for this register.

35
00:02:32,950 --> 00:02:37,340
However we are then going to check whether we are the latest rename and

36
00:02:37,340 --> 00:02:40,930
if we are not then we are not going to change the RAT. Basically the,

37
00:02:40,930 --> 00:02:46,330
the RAT needs to indicate that the latest renamed value for R1 is still ROB4.

38
00:02:46,330 --> 00:02:50,870
The fact that we committed ROB1 doesn't change that. So after doing this,

39
00:02:50,870 --> 00:02:55,380
we free this ROB entry and it is now ready to take another instruction. Now,

40
00:02:55,380 --> 00:03:01,160
we go to, try to commit ROB2. Well again, it needs to write a result in R3.

41
00:03:01,160 --> 00:03:05,380
We take the result of the instruction and we do right it to the Registers.

42
00:03:05,380 --> 00:03:10,235
Regardless of what the RAT says about it. But then, we look at the RAT entry for

43
00:03:10,235 --> 00:03:14,420
R3, and check whether the RAT entry says that we are the latest rename for

44
00:03:14,420 --> 00:03:18,860
this value. And in this case we are. So when we are committing this instruction,

45
00:03:18,860 --> 00:03:21,690
if the RAT keeps pointing at the ROB2, it's going to be

46
00:03:21,690 --> 00:03:25,160
pointing at an empty entry that will soon be used by some other instruction. So

47
00:03:25,160 --> 00:03:30,755
what we need to do is change the RAT. To now point back to the Registers for

48
00:03:30,755 --> 00:03:35,390
R3, so we made the RAT just point to the R3 value in the registers no longer, so

49
00:03:35,390 --> 00:03:39,140
basically, now if any instruction wants to access R3, when it wants to

50
00:03:39,140 --> 00:03:43,540
read operant, it actually needs to get this value, not a value from the ROB.

51
00:03:43,540 --> 00:03:47,840
and after we have done this, we can commit this instruction fully,

52
00:03:47,840 --> 00:03:52,470
which frees this ROB entry. And then we continue doing this, this instruction is

53
00:03:52,470 --> 00:03:57,730
the next one that we will be committing, so what we do is we take this result,

54
00:03:57,730 --> 00:04:03,120
we put it in R1, so we overwrite what was in R1 before,

55
00:04:03,120 --> 00:04:07,460
we write whatever this value is, we then check whether for

56
00:04:07,460 --> 00:04:13,260
R1 we are the latest rename and we are not. We are Rob3, this has Rob4,. So

57
00:04:13,260 --> 00:04:18,209
we leave the RAT entry alone, and we can just free this entry from the ROB.

58
00:04:18,209 --> 00:04:23,090
Now's a good time to kind of stop, and figure out, you know, why are we doing

59
00:04:23,090 --> 00:04:27,320
this? Why are we depositing values in the Register that we know are going to be

60
00:04:27,320 --> 00:04:31,930
overwritten soon? Well we are doing it because at any given point in time if we

61
00:04:31,930 --> 00:04:35,210
need to stop there and take an exception like for example now if.

62
00:04:35,210 --> 00:04:38,962
We want to take an exception, what will happen is, we can just drain the ROB,

63
00:04:38,962 --> 00:04:42,730
just, just delete everything that is still in there, we can make the entire RAT

64
00:04:42,730 --> 00:04:47,332
just point to the registers, meaning we will just change the center to point R1,

65
00:04:47,332 --> 00:04:51,330
R2, R3, and the content that we already have now in the register file,

66
00:04:51,330 --> 00:04:56,280
is exactly the content as of this point. So if we were not updating

67
00:04:56,280 --> 00:04:59,720
the registers for every instruction, then we would not be able to do this.

68
00:04:59,720 --> 00:05:03,290
The Registers would not be up to date at this point and we would not be able to

69
00:05:03,290 --> 00:05:05,920
take an exception by just clearing everything from the RAT and

70
00:05:05,920 --> 00:05:09,870
ROB. The fact that we did update it gives us the ability to do this.

71
00:05:09,870 --> 00:05:14,790
Pretty much the Registers are always up to date. As of the commit point,

72
00:05:14,790 --> 00:05:19,330
which means at any given time we can just stop at that point, cancel everything

73
00:05:19,330 --> 00:05:23,490
from here, make this just point directly to the Register file. And

74
00:05:23,490 --> 00:05:27,730
at that point, we are ready to fetch instructions from the exception handler.

75
00:05:27,730 --> 00:05:32,030
Now, let's say that, that doesn't happen. What we can do then, is just let's

76
00:05:32,030 --> 00:05:36,630
commit these instructions just to kind of illustrate once more what happens. So,

77
00:05:36,630 --> 00:05:42,740
R1 equals R4 plus R8 is our next thing to commit. We write that to R1,

78
00:05:42,740 --> 00:05:48,230
overwriting this value. We check whether we are the last rename for R1,

79
00:05:48,230 --> 00:05:53,030
we are. So we make the RAT entry point directly to R1, basically from now on,

80
00:05:53,030 --> 00:05:58,150
if somebody wants to. Read R1, they will end up reading this, not some ROB entry

81
00:05:58,150 --> 00:06:03,610
and now we are ready to fully free this ROB entry and finally we can commit this

82
00:06:03,610 --> 00:06:08,350
by again writing this result, checking whether we have the latest rename.

83
00:06:08,350 --> 00:06:15,070
Yes we are. We point them directly to R1. And we finally free this ROB entry.

84
00:06:15,070 --> 00:06:18,290
And, if we no longer have any instructions in the ROB, then we

85
00:06:18,290 --> 00:06:21,620
have a state exactly as it should look when we have no instructions in the ROB.

86
00:06:21,620 --> 00:06:24,230
Meaning the entire RAT is pointing directly to the registers.

87
00:06:24,230 --> 00:06:28,392
The registers are all up to date, as of what was committed latest. And so on.

88
00:06:28,392 --> 00:06:33,110
When your doing this, be mindful of the fact again that the values are copied to

89
00:06:33,110 --> 00:06:38,780
Registers as we commit regardless of what the RAT says. But the RAT is updated

90
00:06:38,780 --> 00:06:44,080
on commit only if we are actually changing the renaming from our ROB entry

91
00:06:44,080 --> 00:06:48,400
to the registers. If the re-namings in the RAT is saying something else like

92
00:06:48,400 --> 00:06:52,240
some other ROB entries still be pointed to here. Then we'll leave it alone

93
00:06:52,240 --> 00:06:56,250
because the RAT needs to continue, to point to the latest value wherever that is
