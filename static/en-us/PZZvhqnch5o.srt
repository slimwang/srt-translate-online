1
00:00:00,710 --> 00:00:04,410
So the first technique that we will consider is Tomasulo's algorithm.

2
00:00:04,410 --> 00:00:07,950
It's really one of the first techniques for out-of-order execution and

3
00:00:07,950 --> 00:00:12,830
now it's more than 40 years old. It was used in the old IBM 360 machines,

4
00:00:12,830 --> 00:00:15,360
which are now, again, more than 40 years old.

5
00:00:15,360 --> 00:00:18,730
What it does is it determines which instructions have inputs ready so

6
00:00:18,730 --> 00:00:22,360
that they can go in the next cycle and which instructions still have to wait for

7
00:00:22,360 --> 00:00:27,040
their inputs to be produced. It also includes a form of register renaming, and

8
00:00:27,040 --> 00:00:30,595
it is surprisingly similar to what we actually use today as far as

9
00:00:30,595 --> 00:00:34,350
out-of-order execution is concerned. So although this is more than 40 years old,

10
00:00:34,350 --> 00:00:38,380
it actually is very useful to know how it works because it's kind of like

11
00:00:38,380 --> 00:00:42,240
the first approach, so it's simpler than what we use today, but it really well

12
00:00:42,240 --> 00:00:46,610
explains what's going on. The differences between Tomasulo's algorithm and

13
00:00:46,610 --> 00:00:49,420
what is used today are only that in the olden days,

14
00:00:49,420 --> 00:00:52,960
when Tomasulo's algorithm was implemented, they did that only for

15
00:00:52,960 --> 00:00:57,490
floating point instructions, while today, we do it for all instructions. Also,

16
00:00:57,490 --> 00:01:00,600
they had relatively few instructions in the window that they're looking at,

17
00:01:00,600 --> 00:01:05,459
meaning they only really looked over some small number of instructions into the,

18
00:01:05,459 --> 00:01:08,880
you know, future instructions that need to be executed well today.

19
00:01:08,880 --> 00:01:12,860
We look at hundreds instructions past the one we are still executing.

20
00:01:12,860 --> 00:01:15,260
In the olden days, exception handling for

21
00:01:15,260 --> 00:01:19,490
floating point instructions was not such a big problem, because they were only

22
00:01:19,490 --> 00:01:23,140
considering really execution of kind of floating point extensive applications.

23
00:01:23,140 --> 00:01:26,880
And you know, those will be programmed and so on, and you would usually run one

24
00:01:26,880 --> 00:01:31,430
program at a time. If there is an exception, you could do some drastic measures.

25
00:01:31,430 --> 00:01:35,840
Today, process include explicit support for exception handling that we will see

26
00:01:35,840 --> 00:01:41,000
later. So we first again look at how the Tomasulo's algorithm did it and

27
00:01:41,000 --> 00:01:44,700
then we consider how today's processors do these additional things.
