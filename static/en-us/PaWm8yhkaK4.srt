1
00:00:00,140 --> 00:00:02,180
So let's take a look, is this statement

2
00:00:02,180 --> 00:00:06,296
correct? No, because here we're passing the userId,

3
00:00:06,296 --> 00:00:09,230
and that's not correct. We have to pass

4
00:00:09,230 --> 00:00:12,840
the key of the ancestor. So here, is this

5
00:00:12,840 --> 00:00:15,280
code correct? We are passing the userKey, so

6
00:00:15,280 --> 00:00:17,830
that's right, but, oh, something's missing here, it

7
00:00:17,830 --> 00:00:21,730
needs to be conference.class not just conference. And

8
00:00:21,730 --> 00:00:25,630
here, this is right. We're loading type Conference.class, and

9
00:00:25,630 --> 00:00:30,120
we're passing the ancestor key. Correct. And

10
00:00:30,120 --> 00:00:33,180
over here in the conferenceapi.java file, have a

11
00:00:33,180 --> 00:00:36,891
quick look at the definition for getConferencesCreated. Again,

12
00:00:36,891 --> 00:00:40,670
we annotate it as @ApiMethod,. Specify the name,

13
00:00:40,670 --> 00:00:45,770
the path, and the HTTPMethod post. So this time because we need the user to

14
00:00:45,770 --> 00:00:47,880
be locked in, we do pass the user

15
00:00:47,880 --> 00:00:52,090
argument and we have to throw an UnauthorizedException

16
00:00:52,090 --> 00:00:55,590
in case that user is not logged in. So here's the code, should be very familiar

17
00:00:55,590 --> 00:00:58,250
by now. For throwing the exception if the

18
00:00:58,250 --> 00:01:01,560
user's not logged in. We get the user ID,

19
00:01:01,560 --> 00:01:06,340
getUserId, we get the key of the user from their ID,

20
00:01:07,420 --> 00:01:12,120
because remember, we use the userId to generate the key and here we do the

21
00:01:12,120 --> 00:01:17,291
query. We load ofy.load.type Conference.class, specify the userKey

22
00:01:17,291 --> 00:01:20,800
as the ancestor. To order by name, and then

23
00:01:20,800 --> 00:01:23,120
finally, we execute the list to actually run the

24
00:01:23,120 --> 00:01:27,140
query. After you deploy your app to localhost, you

25
00:01:27,140 --> 00:01:29,350
can test it in the API's explorer. So here's the

26
00:01:29,350 --> 00:01:33,320
conference API. Here you see the getConferencesCreated method that

27
00:01:33,320 --> 00:01:35,860
you just defined. You are going to need to make

28
00:01:35,860 --> 00:01:38,030
sure that you refresh your browser, or you won't

29
00:01:38,030 --> 00:01:41,550
see it. Drill down into it, I'm going to execute it.

30
00:01:43,090 --> 00:01:47,280
Oh look, forgot to authorize maps because we required the user argument. If

31
00:01:49,960 --> 00:01:52,840
I authorize, now I'll try again, and here I

32
00:01:52,840 --> 00:01:56,550
see in the response, the conferences that I've created.

33
00:01:56,550 --> 00:01:58,916
So the UI calls the same function. It calls

34
00:01:58,916 --> 00:02:03,570
the getConferencesCreated. You could also use the Conferences Created

35
00:02:03,570 --> 00:02:06,540
page in the UI. Because when you go to

36
00:02:06,540 --> 00:02:09,900
that tab, it actually calls the same method that

37
00:02:09,900 --> 00:02:12,270
you've just created. You can use whichever you prefer,

38
00:02:12,270 --> 00:02:14,940
the tab in the UI or the API's explorer,

39
00:02:14,940 --> 00:02:16,180
to check that the function works.
