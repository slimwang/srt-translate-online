1
00:00:00,090 --> 00:00:02,570
Okay, here's my solution. So, what I'm doing is, I'm

2
00:00:02,570 --> 00:00:04,760
using a global variable, which is not a great habit to

3
00:00:04,760 --> 00:00:08,390
get into. But, it works in this simple case, to store

4
00:00:08,390 --> 00:00:11,460
the index into the list. Basically which server we're on. And

5
00:00:11,460 --> 00:00:13,760
I started at negative 1, so that the first time I

6
00:00:13,760 --> 00:00:16,520
incremented it, it increments to 0, so we'll be at position

7
00:00:16,520 --> 00:00:20,390
0. I'm using the global keyword here, which basically tells Python

8
00:00:20,390 --> 00:00:24,690
to, use the global n. The n defined outside this function,

9
00:00:24,690 --> 00:00:27,810
instead of making a new variable called n. If I didn't

10
00:00:27,810 --> 00:00:30,870
have this global n, this line would raise an exception saying

11
00:00:30,870 --> 00:00:32,770
n is not defined. And then what I do, is I

12
00:00:32,770 --> 00:00:36,830
ref, I return the index into the list of servers the correct

13
00:00:36,830 --> 00:00:40,644
position. So and what we do is, we say, n modulo

14
00:00:40,644 --> 00:00:44,180
length of SERVERS. So length of SERVERS is 4. And if you

15
00:00:44,180 --> 00:00:46,120
don't know how the mod operator works, basically what it does

16
00:00:46,120 --> 00:00:50,230
is, it says, give me the remainder of doing the division. So,

17
00:00:50,230 --> 00:00:52,820
what this means is, we take n divided by length SERVERS

18
00:00:52,820 --> 00:00:54,760
and then we take the remainder of that. That's what modular does.

19
00:00:54,760 --> 00:00:58,670
So if its zero we say 4 goes into 0, 0 times.

20
00:00:58,670 --> 00:01:00,980
If n is 1 we say 4 goes into 0, or 4

21
00:01:00,980 --> 00:01:04,289
goes into 1, 0 times with a remainder of 1. And

22
00:01:04,289 --> 00:01:07,360
so, so we get an x 1. And so as n increments,

23
00:01:07,360 --> 00:01:11,005
you know, when n is 5 we say, you know, link servers

24
00:01:11,005 --> 00:01:15,860
4 goes into 5, one time, with the remainder of one again.

25
00:01:15,860 --> 00:01:19,570
So the loop is over. So if we get this a whirl, it would print out

26
00:01:19,570 --> 00:01:23,490
something like this. Okay, so if we go ahead and run this, we see our output

27
00:01:23,490 --> 00:01:26,390
SERVER 1, 2, 3, 4, 1. so, simple

28
00:01:26,390 --> 00:01:29,770
enough, that's our Round Robin little balancing works.

29
00:01:29,770 --> 00:01:30,740
Like I said, you probably want to have to

30
00:01:30,740 --> 00:01:32,980
implement this anytime soon. But, there you go.
