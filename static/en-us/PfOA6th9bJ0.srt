1
00:00:00,300 --> 00:00:03,040
So good job cleaning up the media
player resources as soon as you

2
00:00:03,040 --> 00:00:04,380
didn't need them anymore.

3
00:00:04,380 --> 00:00:07,780
So you're already following the best
practices of Android development,

4
00:00:07,780 --> 00:00:09,460
well at least for the most part.

5
00:00:09,460 --> 00:00:13,180
Now I want to tell you some more details
that will require us to modify our code

6
00:00:13,180 --> 00:00:13,940
just a little bit more.

7
00:00:13,940 --> 00:00:17,370
So the issue is that we've been
operating under the assumption

8
00:00:17,370 --> 00:00:19,299
that the user will always
stay within our app.

9
00:00:20,470 --> 00:00:24,410
Well what if the user decides to
switch away to say a web browser or

10
00:00:24,410 --> 00:00:25,440
even head over to a phone call?

11
00:00:27,160 --> 00:00:29,770
Well if the user is not
actively looking at our app,

12
00:00:29,770 --> 00:00:33,570
we can't finish executing our code and
clean up the media player resources.

13
00:00:33,570 --> 00:00:36,860
So if the user switches over to several
other apps and never comes back to

14
00:00:36,860 --> 00:00:40,418
Army Walk app then eventually
Android will destroy our activity.

15
00:00:40,418 --> 00:00:44,050
So that it can use those resources to
run the more recent apps that the user's

16
00:00:44,050 --> 00:00:44,950
interacting with.

17
00:00:44,950 --> 00:00:46,660
So as a developer,
we have to be ready for

18
00:00:46,660 --> 00:00:49,100
the user to leave our
activity at any time.

19
00:00:49,100 --> 00:00:52,110
Or for the system to destroy our
activity because it needs those

20
00:00:52,110 --> 00:00:54,110
resources for something else.

21
00:00:54,110 --> 00:00:57,250
So for example, in an email app
the developer's responsible for

22
00:00:57,250 --> 00:01:00,350
storing the latest version
of the user's email draft.

23
00:01:00,350 --> 00:01:02,970
So that when the user returns
to the app, even after days or

24
00:01:02,970 --> 00:01:05,340
months, it appears as if
they've never left the app.

25
00:01:06,560 --> 00:01:09,570
Now in this case, the developer
should indicate to the system

26
00:01:09,570 --> 00:01:12,970
that it's interested in knowing when
the user leaves the current activity.

27
00:01:12,970 --> 00:01:13,730
And at that point,

28
00:01:13,730 --> 00:01:16,890
the developer should save off
the latest version of the email draft.

29
00:01:16,890 --> 00:01:19,170
So later when the user
comes back to the activity,

30
00:01:19,170 --> 00:01:22,150
the email draft should
be populated on screen.

31
00:01:22,150 --> 00:01:25,110
So it would be bad if they came back to
the email draft that they were writing

32
00:01:25,110 --> 00:01:28,910
and the screen was just completely blank
because the changes that they made

33
00:01:28,910 --> 00:01:30,490
were never saved off.

34
00:01:30,490 --> 00:01:33,190
So all this behavior is driven
by the need to conserve

35
00:01:33,190 --> 00:01:35,080
memory resources on a device.

36
00:01:35,080 --> 00:01:38,090
So Android wants to have enough
resources so that the current app that

37
00:01:38,090 --> 00:01:42,600
the user is interacting with is fast,
responsive and the resources

38
00:01:42,600 --> 00:01:46,430
aren't wasted on apps that the user
hasn't interacted with in a while.

39
00:01:46,430 --> 00:01:49,570
So in order to provide structure to all
the chaos that could be happening on

40
00:01:49,570 --> 00:01:53,690
a device, Android has a life cycle
that all the activities can follow.

41
00:01:53,690 --> 00:01:56,360
So the system will handle
transitioning the activity from

42
00:01:56,360 --> 00:02:00,350
one stage of the lifecycle to another
and it offers call backs so that you as

43
00:02:00,350 --> 00:02:04,430
a developer can get notified when
these changes happen in your activity.

44
00:02:04,430 --> 00:02:05,480
So when you get notified,

45
00:02:05,480 --> 00:02:08,940
you can take that opportunity to execute
certain instructions that you need.

46
00:02:08,940 --> 00:02:11,630
So let's discuss other states
that the activity can be in.

47
00:02:11,630 --> 00:02:15,360
When a activity is first launched
it's created, and then started, and

48
00:02:15,360 --> 00:02:16,250
then resumed.

49
00:02:16,250 --> 00:02:19,850
Now, at this point the activity's active
and the user can interact with it.

50
00:02:19,850 --> 00:02:23,400
So as soon as the user moves to
a different activity or a different app,

51
00:02:23,400 --> 00:02:26,960
then this activity moves into a paused
state, and then to a stop state.

52
00:02:26,960 --> 00:02:29,670
And if it is closed out,
then it becomes destroyed.

53
00:02:29,670 --> 00:02:32,800
So if the user comes back to this
activity then it gets restarted,

54
00:02:32,800 --> 00:02:35,640
and we moved back into
the started state and

55
00:02:35,640 --> 00:02:38,190
now the user can interact
with it once again.

56
00:02:38,190 --> 00:02:41,530
So here I've shown you a simplified
activity lifecycle diagram.

57
00:02:41,530 --> 00:02:44,475
So that you could first grasp a high
level overview of what's happening.

58
00:02:44,475 --> 00:02:49,120
So in the official Android documentation
in the starting activity section,

59
00:02:49,120 --> 00:02:52,190
we have a full activity
lifecycle diagram here.

60
00:02:52,190 --> 00:02:54,980
So this diagram is a little bit more
complex than the one I showed you

61
00:02:54,980 --> 00:02:56,960
earlier but the main idea is the same.

62
00:02:57,970 --> 00:03:00,140
So remember that the Android
system is responsible for

63
00:03:00,140 --> 00:03:03,230
transitioning your activity
into each of these states.

64
00:03:03,230 --> 00:03:06,115
So you as a developer can't control
which state that you're in.

65
00:03:06,115 --> 00:03:09,380
So starting from here,
when your activity is launched,

66
00:03:09,380 --> 00:03:12,560
the activity is moved into a created
state using the onCreate method.

67
00:03:14,060 --> 00:03:18,000
And then it's moved into the started
state using the on start method.

68
00:03:18,000 --> 00:03:20,880
So at this point it becomes
visible to the user.

69
00:03:20,880 --> 00:03:24,260
And so from there it's moved into the
resume state via the on resume method.

70
00:03:24,260 --> 00:03:27,860
And in this case the activity
is still visible to the user.

71
00:03:27,860 --> 00:03:30,680
But the user can now start
interacting with the activity.

72
00:03:30,680 --> 00:03:35,270
So here you can display animations,
use sensors like location sensors or

73
00:03:35,270 --> 00:03:36,390
even use a camera on the device.

74
00:03:36,390 --> 00:03:40,970
So the activity can stay in the resume
state for however long the user is

75
00:03:40,970 --> 00:03:44,740
looking at the screen, so that could
be minutes or hours or even longer.

76
00:03:45,860 --> 00:03:48,580
Now as soon as your user
switches to a different activity,

77
00:03:48,580 --> 00:03:51,910
then your activity is paused
via the on pause method, and

78
00:03:51,910 --> 00:03:55,400
from there it moves into a stop
state via the on stop method.

79
00:03:55,400 --> 00:03:59,760
So at this point the activity is
no longer visible to the user.

80
00:03:59,760 --> 00:04:02,400
So, since you user
can't see the activity.

81
00:04:02,400 --> 00:04:05,870
If the system determines that your
activity is no longer needed,

82
00:04:05,870 --> 00:04:09,460
the system may destroy your
activity via the on destroy method

83
00:04:09,460 --> 00:04:12,380
in order to free up
resources on the device, and

84
00:04:12,380 --> 00:04:15,610
then your activity would
enter the destroyed state.

85
00:04:15,610 --> 00:04:18,769
But otherwise, your activity could
just stay in the stop state.

86
00:04:18,769 --> 00:04:22,670
Then if your user decides to come back
to the activity before it's destroyed,

87
00:04:22,670 --> 00:04:26,840
then the activity is restarted
via the onRestart method and

88
00:04:26,840 --> 00:04:29,830
then it moves back into the started
state via the onStart method.

89
00:04:29,830 --> 00:04:34,790
And then finally back into the resume
state via the onResume method.
