1
00:00:00,320 --> 00:00:01,650
So what do we do?

2
00:00:01,649 --> 00:00:04,449
>> Well perhaps we should include a
check in the evaluation function to see

3
00:00:04,450 --> 00:00:07,450
if a partition is formed
by the next move, and if so,

4
00:00:07,450 --> 00:00:10,349
start counting the number of
moves left to each player.

5
00:00:10,349 --> 00:00:14,000
>> That sounds like a good idea, but
how much is it going to cost us?

6
00:00:14,000 --> 00:00:15,289
>> What do you mean?

7
00:00:15,289 --> 00:00:19,719
>> Our evaluation function goes from
a very simple function to compute to

8
00:00:19,719 --> 00:00:24,299
something that may involve a complicated
check followed by a lot of counting.

9
00:00:24,300 --> 00:00:28,600
Simply counting the number of
contiguous squares a player can use is

10
00:00:28,600 --> 00:00:31,480
similar to searching more
levels down in the search tree.

11
00:00:31,480 --> 00:00:33,270
We know that it's very time consuming.

12
00:00:34,340 --> 00:00:35,500
More to the point,

13
00:00:35,500 --> 00:00:39,649
we just doubled the amount of time
the evaluation function takes.

14
00:00:39,649 --> 00:00:42,409
That time becomes
multiplied exponentially

15
00:00:42,409 --> 00:00:45,489
due to the branching factor
as the search goes deeper.

16
00:00:45,490 --> 00:00:49,410
>> Ouch, are complicated evaluation
functions always not worth it?

17
00:00:49,409 --> 00:00:51,549
>> It really depends on the game.

18
00:00:51,549 --> 00:00:55,818
Changing the rules of isolation slightly
can dramatically change whether it is

19
00:00:55,819 --> 00:00:59,321
better to use a simple evaluation
function and search deeper, or

20
00:00:59,320 --> 00:01:04,799
to use a complicated evaluation function
that catches these dangerous situations.

21
00:01:04,799 --> 00:01:07,819
I've tried isolation variance,
like having the players

22
00:01:07,819 --> 00:01:12,059
like a knight in chess, or
allowing wrap around on the borders, or

23
00:01:12,060 --> 00:01:15,310
even having each player
control two pieces.

24
00:01:15,310 --> 00:01:19,859
And I'm often surprised at
which strategy seems to win.

25
00:01:19,859 --> 00:01:23,599
It always pays to think carefully about
the evaluation function, whether it is

26
00:01:23,599 --> 00:01:27,390
capturing the desired behavior, and
how efficiently it can be implemented.

