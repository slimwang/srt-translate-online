1
00:00:00,780 --> 00:00:05,430
Alright, let's take a look at how we implemented the playWorldSound function.

2
00:00:05,430 --> 00:00:09,714
Now remember it takes the parameters, first the soundURL representing the sound

3
00:00:09,714 --> 00:00:13,368
that we want to play in the world, and then the x and y position that this

4
00:00:13,368 --> 00:00:19,360
sound should be played at. So first we're going to check if the player is null

5
00:00:19,360 --> 00:00:23,824
for some reason, just as a sanity check. If it is, then we simply return and

6
00:00:23,824 --> 00:00:27,595
don't worry about playing it. If there's no players to hear the sound, does the

7
00:00:27,595 --> 00:00:31,564
sound actually play? And we're going to do a little bit of shorthand here just

8
00:00:31,564 --> 00:00:34,480
to make it a bit easier for us to write for ourselves by shortening

9
00:00:34,480 --> 00:00:41,009
gGameEngine.gMap to just gMap, locally. And now we're going to do the

10
00:00:41,009 --> 00:00:46,737
calculation for fading the volume out. Based upon the distance from the player

11
00:00:46,737 --> 00:00:51,773
that the sound is supposed to be played at. First, we check the viewSize of

12
00:00:51,773 --> 00:00:56,882
the, for the map's viewRect. And we're actually going to do this as a square

13
00:00:56,882 --> 00:01:02,220
rather than as a rectangle for simplicity's sake. So we take the maximum of the

14
00:01:02,220 --> 00:01:06,774
width and the height. Then we multiply it by half, since we don't want the full

15
00:01:06,774 --> 00:01:11,322
width. We only want the half since we're going to set the center of that view

16
00:01:11,322 --> 00:01:17,138
size to be the player's current position. And we want the distance from the

17
00:01:17,138 --> 00:01:22,170
player to the sound. Now, we're going to take the x value, the absolute x

18
00:01:22,170 --> 00:01:26,330
value, from the player position to the sound's x position, and similarly for

19
00:01:26,330 --> 00:01:32,442
the y value. And now, we simply compute the distance function, which is the

20
00:01:32,442 --> 00:01:36,992
same one that you've probably learned in high school, which is the square root

21
00:01:36,992 --> 00:01:43,420
of the x distance squared plus the y distance squared. Now we're going to

22
00:01:43,420 --> 00:01:46,396
normalize that distance, and what we mean by that is we're going to take the

23
00:01:46,396 --> 00:01:49,564
distance to the observer that we've just calculated, and we're going to divide

24
00:01:49,564 --> 00:01:52,492
that by the view size that we calculated earlier to see how many view sizes

25
00:01:52,492 --> 00:01:57,632
from the player we are. Like we talked about four. If we are more than two view

26
00:01:57,632 --> 00:02:01,980
sizes away, then maybe want to start reducing the sound like we discussed. So

27
00:02:01,980 --> 00:02:07,524
in this case, if the normal distance is greater than one view size away, then

28
00:02:07,524 --> 00:02:13,068
we set the norm distance to one, since we're going to reduce the volume by the

29
00:02:13,068 --> 00:02:18,524
norm distance later on, and it doesn't really make sense to have a negative

30
00:02:18,524 --> 00:02:26,468
volume. Norm, norm distance, is for whatever reason less than zero, then we

31
00:02:26,468 --> 00:02:31,683
simply return and don't play. And then we create a call back function. And

32
00:02:31,683 --> 00:02:35,899
immediately calls play sound on that sound object. The path of that sound

33
00:02:35,899 --> 00:02:39,799
object that is and with settings saying looping is false and that volume is the

34
00:02:39,799 --> 00:02:45,577
volume that we have just calculated. So, once this function is written, we'll

35
00:02:45,577 --> 00:02:49,861
have a nice effect where the further the sound is away from a player, the more

36
00:02:49,861 --> 00:02:54,009
quietly it's played until the player can't hear it at all, creating a more

37
00:02:54,009 --> 00:02:58,614
realistic sound environment.
