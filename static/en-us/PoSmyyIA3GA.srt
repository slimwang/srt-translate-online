1
00:00:00,120 --> 00:00:04,450
So now we're going to talk about exceptions in out of order execution. Which,

2
00:00:04,450 --> 00:00:08,720
as we said, is part of what's wrong with Tomasulo's algorithm as far as

3
00:00:08,720 --> 00:00:12,220
modern processors are concerned. Let's look at these four instructions and

4
00:00:12,220 --> 00:00:16,700
how they execute. This first instruction is going to issue in the first cycle.

5
00:00:16,700 --> 00:00:21,510
And let's say we just are able to issue everything like this. This instruction

6
00:00:21,510 --> 00:00:25,390
will dispatch in the second cycle, let us say it takes 40 cycles for

7
00:00:25,390 --> 00:00:29,450
a divide to finish. So it is going to write the result in cycle 42.

8
00:00:29,450 --> 00:00:34,770
Meanwhile, this load could be dispatched in cycle three and maybe finish in,

9
00:00:34,770 --> 00:00:39,090
let's say cycle 15. And then, this instruction is waiting for the result of

10
00:00:39,090 --> 00:00:43,980
the load. So it will really dispatch in, let's say, cycle 14, and maybe be done,

11
00:00:43,980 --> 00:00:48,820
let's say, in cycle 19. And then, this subtract is waiting for F2 and F6, so

12
00:00:48,820 --> 00:00:54,520
it can also be dispatched in cycle 14. And maybe finish in cycle 15.

13
00:00:54,520 --> 00:00:59,200
Let's say that F6 is 0, so we get a divide by 0 order. And

14
00:00:59,200 --> 00:01:03,430
let's say that is detected in cycle 40. Some are towards the end of the divide.

15
00:01:03,430 --> 00:01:07,790
Let's say we ignore that. We have a divide by 0. So what should happen in

16
00:01:07,790 --> 00:01:12,614
this processor is the program counter for this instruction should be saved.

17
00:01:12,614 --> 00:01:15,520
We should jump to an exception handler. And then, if there is,

18
00:01:15,520 --> 00:01:19,130
exception handler comes back, we should be back to this instruction, and

19
00:01:19,130 --> 00:01:24,170
kind of start executing from here. However, what really happens is,

20
00:01:24,170 --> 00:01:28,090
in cycle 40, we have already executed these instructions and

21
00:01:28,090 --> 00:01:32,700
written the results. This is the only one that really hasn't been done.

22
00:01:32,700 --> 00:01:37,140
So F10 hasn't been undated. If we now go to the exception handler and then

23
00:01:37,140 --> 00:01:42,430
come back. This instruction will use the F0 produced by this instruction. So

24
00:01:42,430 --> 00:01:47,260
this instruction can now never get a correct result anymore even if we fix F6.

25
00:01:47,260 --> 00:01:49,840
For example, you could put something like a very small value here.

26
00:01:49,840 --> 00:01:53,070
Just to avoid a divide by 0 error. This can also happen for

27
00:01:53,070 --> 00:01:58,860
example if a load has a page fault. We page the page back from the disk,

28
00:01:58,860 --> 00:02:01,640
go back to executing the load. But by that time,

29
00:02:01,640 --> 00:02:05,360
instructions after the load might have executed and there is no way to proceed.

30
00:02:05,360 --> 00:02:11,038
So this problem of having exceptions precisely. Is what is considered

31
00:02:11,038 --> 00:02:15,850
to be the major drawback of Tomasulo's algorithm as it was implemented
