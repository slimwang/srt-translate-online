1
00:00:00,000 --> 00:00:02,000
So now that you've seen how easy it is to build a random tester,

2
00:00:02,000 --> 00:00:06,000
I hope that you build many of them in the future and most of the rest of this course is going to be spent

3
00:00:06,000 --> 00:00:09,000
going into more details about how we build effective random testers.

4
00:00:09,000 --> 00:00:12,000
But before we do that, what I'd like to do is address an issue that eventually confronts

5
00:00:12,000 --> 00:00:16,000
almost everybody who works on random testing, which is that random testing gets no respect.

6
00:00:16,000 --> 00:00:19,000
And what I mean by that is people often think that it's a really stupid way to test software.

7
00:00:19,000 --> 00:00:22,000
For example, one of the classic references on software testing

8
00:00:22,000 --> 00:00:24,000
is a book called The Art of Software Testing.

9
00:00:24,000 --> 00:00:27,000
In this book, the author talks about random testing and here's what he has to say.

10
00:00:27,000 --> 00:00:30,000
"Probably the poorest methodology of all is random random input testing...

11
00:00:30,000 --> 00:00:34,000
What we look for is a set of thought processes that allow one to select

12
00:00:34,000 --> 00:00:36,000
a set of test data more intelligently."

13
00:00:36,000 --> 00:00:40,000
So basically what Myers is saying is random input testing is not a way that allows one

14
00:00:40,000 --> 00:00:42,000
to select a set of test data intelligently.

15
00:00:42,000 --> 00:00:45,000
And so my opinion and this is after writing at least a dozen testers

16
00:00:45,000 --> 00:00:49,000
what he should've said is something like what we look for in testing is a set of thought processes

17
00:00:49,000 --> 00:00:52,000
that allow one to randomly generate a set of test data more intelligently.

18
00:00:52,000 --> 00:00:54,000
And so what we can do is get around this fact that

19
00:00:54,000 --> 00:00:57,000
testing requires thought about the software under test.

20
00:00:57,000 --> 00:01:00,000
But my experience and the experience of a lot of other people is that if we think hard

21
00:01:00,000 --> 00:01:03,000
about a random test case generator that's as good or better in many cases

22
00:01:03,000 --> 00:01:06,000
than thinking hard about generating the test cases themselves.

23
00:01:06,000 --> 00:01:10,000
So another classic piece of work is a book chapter called Random Testing by Richard Hamlet.

24
00:01:10,000 --> 00:01:14,000
And in this chapter he says, "Most criticism of random testing is really objection

25
00:01:14,000 --> 00:01:17,000
to misapplication of the method using inappropriate input distribution."

26
00:01:17,000 --> 00:01:21,000
And so what Hamlet is really talking about here is the input validity problem

27
00:01:21,000 --> 00:01:25,000
that we've just been discussing and what he means is that if you ignore the input validity problem

28
00:01:25,000 --> 00:01:28,000
and you just test randomly using completely random garbage, you're going to get a bad

29
00:01:28,000 --> 00:01:31,000
impression of the method because it's not going to work very well.

30
00:01:31,000 --> 00:01:33,000
You're going to experience a phenomenon that we talked about a little bit ago

31
00:01:33,000 --> 00:01:37,000
where all of the test cases get rejected by very early parts of the software under test.

32
00:01:37,000 --> 00:01:40,000
And so I would actually say what Hamlet said a little bit differently.

33
00:01:40,000 --> 00:01:44,000
Most criticism in random testing is really objection to random testing done badly.

34
00:01:44,000 --> 00:01:46,000
So let's take a look at one more quote.

35
00:01:46,000 --> 00:01:50,000
So what the author of Testing for Zero Bugs has to say is, "The introduction of random testing

36
00:01:50,000 --> 00:01:53,000
practically eliminated user bug reports on released back ends.

37
00:01:53,000 --> 00:01:58,000
To our amazement, RIG (and this is their test case generator) was able to find over half of all bugs

38
00:01:58,000 --> 00:02:02,000
reported by customers on the code generator in just one night of run time."

39
00:02:02,000 --> 00:02:05,000
And so this clearly was written by somebody who did a really good job creating a random tester.

40
00:02:05,000 --> 00:02:09,000
And also probably applied in the domain where random testing happened to work really well.

41
00:02:09,000 --> 00:02:11,000
The rest of this Testing for Zero Bugs is worth reading as well,

42
00:02:11,000 --> 00:02:17,000
and we will include a link to that in the supplemental material for the course.
