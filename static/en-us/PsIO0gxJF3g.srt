1
00:00:00,000 --> 00:00:03,000
[Evans] So with a salted password scheme what we'll store in the password file,

2
00:00:03,000 --> 00:00:08,000
we'll have the users, we'll have an extra column that we'll call the salt,

3
00:00:08,000 --> 00:00:11,000
and then we'll store the encrypted password.

4
00:00:11,000 --> 00:00:16,000
What the salt is is random bits. They don't need to be kept secret.

5
00:00:16,000 --> 00:00:19,000
For the UNIX scheme there were 12 random bits.

6
00:00:19,000 --> 00:00:21,000
And they're different for each user.

7
00:00:21,000 --> 00:00:23,000
That's why they're stored in the table.

8
00:00:23,000 --> 00:00:30,000
So for user Alice let's say we have the salt 011010001111,

9
00:00:30,000 --> 00:00:34,000
which is an apparently random sequence.

10
00:00:34,000 --> 00:00:38,000
What we'll store as the encrypted password is the result of hashing the salt

11
00:00:38,000 --> 00:00:41,000
concatenated with Alice's password.

12
00:00:41,000 --> 00:00:43,000
And there are different ways of doing this.

13
00:00:43,000 --> 00:00:48,000
Some hash functions can be modified to behave differently based on another parameter.

14
00:00:48,000 --> 00:00:51,000
But if it's a simple hash function that just takes an input,

15
00:00:51,000 --> 00:00:54,000
we can make the input the salt concatenated with the password.

16
00:00:54,000 --> 00:00:59,000
And then for Bob we'll do the same thing, but we'll have a different sequence of random bits.

17
00:00:59,000 --> 00:01:03,000
And so here what we're storing is the result of hashing Bob's salt,

18
00:01:03,000 --> 00:01:08,000
which is this selection of random bits, concatenated with Bob's password.

19
00:01:08,000 --> 00:01:12,000
This means as long as the salts are different, even if the passwords are the same,

20
00:01:12,000 --> 00:01:14,000
the encrypted passwords will be different.

21
00:01:14,000 --> 00:01:18,000
And this is very similar to what standard UNIX systems did

22
00:01:18,000 --> 00:01:23,000
where H is actually using DES encryption 25 times

23
00:01:23,000 --> 00:01:26,000
using the salt to modify how the encryption happens

24
00:01:26,000 --> 00:01:31,000
and the password as the key and the initial input as 0.

25
00:01:31,000 --> 00:01:35,000
So to see if you understand the impact of salting, I have 2 quizzes.

26
00:01:35,000 --> 00:01:39,000
The question is, how much harder does adding salt make it

27
00:01:39,000 --> 00:01:42,000
for an attacker who compromises a password file

28
00:01:42,000 --> 00:01:45,000
who just wants to learn Alice's password?

29
00:01:45,000 --> 00:01:47,000
The possible answers are not much harder at all;

30
00:01:47,000 --> 00:01:50,000
about twice as hard as it would be without the salt;

31
00:01:50,000 --> 99:59:59,999
and about 2 to the 12, which is 4096, times harder than it would be without the salt.
