1
00:00:00,300 --> 00:00:04,030
The problem with the existing code
is that in the MainActivity onCreate

2
00:00:04,030 --> 00:00:07,740
method, we try to execute the network
request on the main thread.

3
00:00:07,740 --> 00:00:12,292
Now we need to move these two
method calls into an AsyncTask.

4
00:00:12,292 --> 00:00:16,719
The fetchEarthquakeData method call
should be run on a background thread,

5
00:00:16,719 --> 00:00:19,693
whereas this updateUI call
should be run on a main or

6
00:00:19,693 --> 00:00:23,169
UI thread after we received
the earthquake result object.

7
00:00:23,169 --> 00:00:25,650
Okay, let's do some live programming.

8
00:00:25,650 --> 00:00:30,620
First, I'm going to define a subclass of
AsyncTask called EarthquakeAsyncTask.

9
00:00:30,620 --> 00:00:33,915
I'll also define it as a private
inner class of the MainActivity.

10
00:00:33,915 --> 00:00:36,500
Now if the AsyncTask
isn't already imported,

11
00:00:36,500 --> 00:00:39,923
I can use a quick fix shortcut
in Android Studio, Alt+Enter,

12
00:00:39,923 --> 00:00:43,878
to automatically import the AsyncTask
class at the top of the Java file.

13
00:00:43,878 --> 00:00:45,803
[BLANK_AUDIO]

14
00:00:45,803 --> 00:00:48,622
As you can see,
it's been imported up here.

15
00:00:48,622 --> 00:00:51,069
Now as you can see here via
this red squiggly line,

16
00:00:51,069 --> 00:00:54,738
Android Studio is still reporting an
error, so I'm going to use the quick fix

17
00:00:54,738 --> 00:00:58,250
again with Alt+Enter to autogenerate
the methods I need to override.

18
00:00:59,530 --> 00:01:02,080
Go ahead and
select Implement methods, and

19
00:01:02,080 --> 00:01:05,580
then I'll select OK here to implement
the stub for the doInBackground method.

20
00:01:06,790 --> 00:01:09,250
Now let's review the generic
types used here.

21
00:01:09,250 --> 00:01:12,090
I specified the string data type for
the input params

22
00:01:12,090 --> 00:01:16,770
because the string usgs URL will be
the input to the doInBackground method.

23
00:01:16,770 --> 00:01:20,040
I used void for the progress parameter,
because I don't need to continually

24
00:01:20,040 --> 00:01:22,900
update the user on the progress
of this particular task.

25
00:01:22,900 --> 00:01:26,130
For the result parameter,
I specified the event data type

26
00:01:26,130 --> 00:01:29,920
because I want the result of the
background work to be an event object.

27
00:01:29,920 --> 00:01:33,095
Now we can move the fetchEarthquakeData
call directly into

28
00:01:33,095 --> 00:01:37,044
the doInBackground method, but
we still have a few more modifications.

29
00:01:37,044 --> 00:01:41,400
Now, instead of hard coding this test to
only work for this specific USGS URL,

30
00:01:41,400 --> 00:01:44,964
I'll use the input parameter by
accessing the zeroth element of

31
00:01:44,964 --> 00:01:46,710
the URL's array.

32
00:01:46,710 --> 00:01:50,140
That way this EarthquakeAsyncTask
can work for any string URL.

33
00:01:51,140 --> 00:01:52,570
I'll also return the event object

34
00:01:52,570 --> 00:01:54,870
as the return value of
the doInBackground method.

35
00:01:54,870 --> 00:01:58,280
Now we'll also want to override
the onPostExecuteCallback method.

36
00:01:58,280 --> 00:02:01,686
In it, we receive the event object
that was returned earlier here in

37
00:02:01,686 --> 00:02:03,191
the doInBackground method.

38
00:02:03,191 --> 00:02:06,740
Okay, great, we're done defining
the EarthquakeAsyncTask.

39
00:02:06,740 --> 00:02:10,695
I also went ahead and added the comments
to the method and class as well.

40
00:02:10,695 --> 00:02:15,435
Now back here in the MainActivity in
the onCreate method, I now can create

41
00:02:15,435 --> 00:02:20,037
a new task and then call execute on
it while passing in the specific URL.

42
00:02:20,037 --> 00:02:24,314
All right, so let's go ahead and
compile and run the app on a device.

43
00:02:24,314 --> 00:02:27,044
All right, and now look,
our app doesn't crash any more.

44
00:02:27,044 --> 00:02:28,335
Woo-hoo!

45
00:02:28,335 --> 00:02:29,276
As you can see,

46
00:02:29,276 --> 00:02:33,628
the app shows details about a 7.8
magnitude earthquake in Ecuador.

47
00:02:33,628 --> 00:02:39,670
Now 183 people felt it, and on average,
they reported that it felt like a 9.1.

48
00:02:39,670 --> 00:02:42,150
Wow, that's kind of a big earthquake.

49
00:02:43,600 --> 00:02:46,520
Anyhow, if you want to check
out the code that I just wrote,

50
00:02:46,520 --> 00:02:49,090
check out the link below for
the GitHub repository.

51
00:02:49,090 --> 00:02:52,540
If you were able to complete
this exercise, congratulations.

52
00:02:52,540 --> 00:02:54,587
If you weren't, no worries at all.

53
00:02:54,587 --> 00:02:58,070
For someone who just started learning
Java and Android several months or

54
00:02:58,070 --> 00:03:01,953
several weeks ago, making a network call
on a background thread by implementing

55
00:03:01,953 --> 00:03:05,491
callback methods in a subclass of
a class that uses generic types, whoo,

56
00:03:05,491 --> 00:03:07,626
that's a lot of concepts
coming together.

57
00:03:07,626 --> 00:03:09,790
And you should just be proud
of how far you've come.
