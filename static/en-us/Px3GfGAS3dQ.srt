1
00:00:00,220 --> 00:00:04,889
To illustrate some of the key challenges
in computing with Turing machines and

2
00:00:04,889 --> 00:00:08,141
how to overcome them,
we'll examine this task here,

3
00:00:08,141 --> 00:00:10,548
where we're given an input string, and

4
00:00:10,548 --> 00:00:14,531
we want to tell if it is of the form
w#w, where w is a binary string.

5
00:00:14,531 --> 00:00:15,930
Otherwise, we reject it.

6
00:00:15,930 --> 00:00:18,700
I'll illustrate the basic
idea on this example.

7
00:00:18,700 --> 00:00:22,160
First, we x out the first
symbol on the tape.

8
00:00:22,160 --> 00:00:26,240
And then we're going to go look to
see if the first element past the #

9
00:00:26,240 --> 00:00:27,640
is the same symbol.

10
00:00:27,640 --> 00:00:30,080
So the fact that I read a 0 here,

11
00:00:30,080 --> 00:00:32,790
somehow has to encoded
in the machine's state.

12
00:00:32,790 --> 00:00:37,480
So we'll go along to the first symbol
after the # and indeed it is a 0.

13
00:00:37,480 --> 00:00:40,850
If it wasn't,
then we can reject the input right away.

14
00:00:40,850 --> 00:00:44,090
Those two strings on either
side of the # are not equal.

15
00:00:44,090 --> 00:00:47,700
We x out that 0, so
that we know not to check it again.

16
00:00:47,700 --> 00:00:50,160
And we move left, past the #,

17
00:00:50,160 --> 00:00:52,591
over to the first x after
that that we encounter.

18
00:00:53,670 --> 00:00:55,920
And now we're ready to
repeat that process.

19
00:00:55,920 --> 00:00:57,900
We x out the 1 this time.

20
00:00:57,900 --> 00:01:00,830
Remembering the fact that it
was a 1 in the machine state.

21
00:01:00,830 --> 00:01:04,269
We can forget that the previous
symbol was a 0 by now.

22
00:01:04,269 --> 00:01:07,040
And then we move right, past the #,

23
00:01:07,040 --> 00:01:12,240
past all the x's,
to the next non-x symbol that we see.

24
00:01:12,240 --> 00:01:16,060
This is a 1,
which matches what we x'd out before.

25
00:01:16,060 --> 00:01:17,180
That's great.

26
00:01:17,180 --> 00:01:22,780
We x it out and then we rewind past
the #, to the first x that we encounter.

27
00:01:22,780 --> 00:01:27,011
At this point, the next symbol is a #,
so we know that the string to

28
00:01:27,011 --> 00:01:31,263
the left of the # matches the first
part of the string to the right.

29
00:01:31,263 --> 00:01:34,211
But, there might might
be more to the right, so

30
00:01:34,211 --> 00:01:38,900
we check that we crossed off all of
the 0's and 1's to the right of the #.

31
00:01:38,900 --> 00:01:41,840
If we didn't, then we reject
because there wasn't a match.

32
00:01:41,840 --> 00:01:43,770
The string on the right was too long.

33
00:01:43,770 --> 00:01:46,980
As Turing machines go,
this is a pretty simple program, but

34
00:01:46,980 --> 00:01:49,860
as you can see here,
the state diagram gets a little messy.

35
00:01:50,888 --> 00:01:54,480
Like the Sipsor text book, I have used
a little shorthand here in the diagram.

36
00:01:55,530 --> 00:01:58,920
When two symbols appear to
the left of the arrow, I mean,

37
00:01:58,920 --> 00:02:00,670
to match either one those.

38
00:02:00,670 --> 00:02:02,400
It's easier than writing
out a whole other edge.

39
00:02:03,430 --> 00:02:06,900
Also, sometimes I will only
give a direction on the right,

40
00:02:06,900 --> 00:02:09,789
interpret that to mean that
the tape should be left alone.

41
00:02:09,789 --> 00:02:11,830
Here is our initial state, q0.

42
00:02:11,830 --> 00:02:14,767
From here,
we usually read either a 0 or 1, and

43
00:02:14,767 --> 00:02:18,550
proceed down one of these
two parallel paths.

44
00:02:18,550 --> 00:02:22,400
We need parallel paths here, because we
have to remember whether it was a 0 or

45
00:02:22,400 --> 00:02:24,680
a 1 that we read initially.

46
00:02:24,680 --> 00:02:29,990
We move past the rest of
the first string to the # and

47
00:02:29,990 --> 00:02:34,243
then past any x'd out symbols
to the next either 0 or a 1.

48
00:02:35,620 --> 00:02:37,430
Actually, if we encounter a blank,

49
00:02:37,430 --> 00:02:41,380
that means that the second string was
too short and we can reject immediately.

50
00:02:41,380 --> 00:02:43,570
Or if we encounter a 1
when we're looking for

51
00:02:43,570 --> 00:02:45,370
a 0, that also means that we reject.

52
00:02:46,640 --> 00:02:48,620
If we encounter a 0 in this side,
however,

53
00:02:48,620 --> 00:02:53,170
that means that we found a match and
we can begin the rewind process.

54
00:02:53,170 --> 00:02:54,990
And this path is exactly an alogus.

55
00:02:56,020 --> 00:03:00,750
When we do find the match, we x it out,
and then begin the rewind process.

56
00:03:00,750 --> 00:03:02,625
Rewinding past all the xs.

57
00:03:02,625 --> 00:03:07,560
Then we encounter a #, and
then we rewind past all the 0s,

58
00:03:07,560 --> 00:03:10,839
and 1s until we encounter the first x.

59
00:03:10,839 --> 00:03:13,719
And then we move
the symbol to the right so

60
00:03:13,719 --> 00:03:18,826
that we're reading the next symbol
in the first string that was input.

61
00:03:18,826 --> 00:03:21,730
And then we're ready to
begin this process again.

62
00:03:21,730 --> 00:03:23,918
When in this phase, we encounter the #.

63
00:03:23,918 --> 00:03:28,150
That means that we've matched
all of this first string, here.

64
00:03:28,150 --> 00:03:31,890
And so we just need to check that
this string here isn't any longer.

65
00:03:31,890 --> 00:03:36,463
So we moved past all the xs and if we
encounter a blank next, that's great,

66
00:03:36,463 --> 00:03:37,980
we accept.

67
00:03:37,980 --> 00:03:41,530
If we encounter something else,
then we need to reject.

68
00:03:42,670 --> 00:03:44,670
Take a minute to look this
all over carefully and

69
00:03:44,670 --> 00:03:46,830
convince yourself that it's right.

70
00:03:46,830 --> 00:03:48,830
It helps to trace through an example.

71
00:03:48,830 --> 00:03:52,360
We'll do this for the input 01#01.

72
00:03:52,360 --> 00:03:57,796
Of course we start in the initial
state q0, and we read a 0,

73
00:03:57,796 --> 00:04:02,501
so we transition to the state q1,
xing out that 0.

74
00:04:02,501 --> 00:04:04,310
So this becomes our new configuration.

75
00:04:05,540 --> 00:04:08,710
Next, we read a 1 so
we stay in this state and

76
00:04:08,710 --> 00:04:10,600
just move the head to the right.

77
00:04:10,600 --> 00:04:15,400
Next we encounter the #, so we move to
state q3 and move the head to the right.
