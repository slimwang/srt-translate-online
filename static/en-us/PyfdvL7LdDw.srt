1
00:00:00,300 --> 00:00:03,190
To rectify this situation, Microsoft made a standards

2
00:00:03,190 --> 00:00:07,020
proposal that reconciles touch events and mouse events and

3
00:00:07,020 --> 00:00:10,000
pen input too, into one model called pointer

4
00:00:10,000 --> 00:00:13,750
events. So you'll notice that pointer events are currently

5
00:00:13,750 --> 00:00:17,030
only natively implemented on Internet Explorer and IE

6
00:00:17,030 --> 00:00:19,930
mobile. For all the other browsers out there, you're

7
00:00:19,930 --> 00:00:21,920
going to need a poly fill library built on

8
00:00:21,920 --> 00:00:25,520
top of touch events. Luckily, there's a great poly

9
00:00:25,520 --> 00:00:29,180
fill library out there as part of the polymer project.

10
00:00:29,180 --> 00:00:31,710
This is what I used to implement pointer event handling

11
00:00:31,710 --> 00:00:34,770
in my synthesizer. The set of pointer events should look

12
00:00:34,770 --> 00:00:38,360
pretty familiar to you if you used mouse events before. They

13
00:00:38,360 --> 00:00:41,400
basically map all the mouse events directly. And then add

14
00:00:41,400 --> 00:00:44,750
the pointer cancel event from touch, as well. The pointer

15
00:00:44,750 --> 00:00:47,610
event, itself, derives from mouse event. So it gets all

16
00:00:47,610 --> 00:00:50,630
the same coordinates as mouse events. As well as a few

17
00:00:50,630 --> 00:00:53,110
things from touch. It has a unique pointer

18
00:00:53,110 --> 00:00:55,520
ID, similar to that touch ID we saw in

19
00:00:55,520 --> 00:00:58,120
touch events. And, it also has a width and

20
00:00:58,120 --> 00:01:01,220
a height of the touch point in touch cases.

21
00:01:01,220 --> 00:01:04,510
For pen cases it may have pressure or tilt.

22
00:01:04,510 --> 00:01:06,860
And, of course, the pionter event tells you what

23
00:01:06,860 --> 00:01:09,350
type of pointer it is, whether it's a mouse

24
00:01:09,350 --> 00:01:11,640
pointer or a touch pointer or a pen input.
