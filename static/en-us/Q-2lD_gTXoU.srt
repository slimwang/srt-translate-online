1
00:00:00,350 --> 00:00:03,630
Now on to the differences
between Swift and Objective C.

2
00:00:03,630 --> 00:00:05,730
Let's start with how they handle nil.

3
00:00:05,730 --> 00:00:09,530
As you know, Swift treats nil
values with a great deal of care.

4
00:00:09,530 --> 00:00:13,230
Wrapping anything that could have
a nil value in an optional type.

5
00:00:13,230 --> 00:00:16,140
Objective C is much less
concerned with nil values.

6
00:00:16,140 --> 00:00:18,890
The language doesn't need
the concept of an optional because

7
00:00:18,890 --> 00:00:20,640
any object can have a nil value.

8
00:00:20,640 --> 00:00:22,100
No problem.

9
00:00:22,100 --> 00:00:26,230
Surprisingly, in Objective C, you can
invoke a message on a nil pointer with

10
00:00:26,230 --> 00:00:28,220
relatively little consequence.

11
00:00:28,220 --> 00:00:29,030
Watch.

12
00:00:29,030 --> 00:00:32,450
Here's some code that represents
a bike messenger picking up a package.

13
00:00:32,450 --> 00:00:36,430
Here, I'm initializing a messenger and
then he picks up a package.

14
00:00:36,430 --> 00:00:41,170
Now let's press run and
since we've got a log statement here,

15
00:00:41,170 --> 00:00:46,490
we can look down here in the console and
see package contents, top secret stuff.

16
00:00:48,140 --> 00:00:50,680
Now watch what happens if I
set the value of the bike

17
00:00:50,680 --> 00:00:52,220
messenger spike to nil.

18
00:00:53,230 --> 00:00:55,580
First of all the compiler doesn't care.

19
00:00:55,580 --> 00:00:58,650
If this were Swift the code
would even compile.

20
00:00:58,650 --> 00:01:03,440
And then when I run the code,
it handles it like it was nothing.

21
00:01:03,440 --> 00:01:07,490
Down here in the console,
we see package contents null but

22
00:01:07,490 --> 00:01:10,980
there's no crash, there's no null
pointer exception like we get in Java.

23
00:01:11,980 --> 00:01:14,930
Now in this toy example,
the fact that nothing happens when we

24
00:01:14,930 --> 00:01:19,430
invoke a method on Spike isn't such
a big deal, but in general you don't

25
00:01:19,430 --> 00:01:23,260
want your program doing nothing when
it's supposed to be doing something.

26
00:01:23,260 --> 00:01:25,150
You may find yourself
frequently checking for

27
00:01:25,150 --> 00:01:28,842
nil values even though they
won't crash your program per se.

28
00:01:28,842 --> 00:01:31,400
Objective C's relaxed
attitude toward nil values

29
00:01:31,400 --> 00:01:35,060
also has some implications for
debugging which we'll talk about more in

30
00:01:35,060 --> 00:01:38,000
the lesson on interoperability
between Swift and Objective C.
