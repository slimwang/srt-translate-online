1
00:00:00,000 --> 00:00:04,000
Okay, now for the answer. Let's switch back to the code for a moment.

2
00:00:04,000 --> 00:00:07,000
We'll even put in an example just to see what it actually does.

3
00:00:07,000 --> 00:00:10,000
You should have already done this, but just in case you haven't

4
00:00:10,000 --> 00:00:14,000
let's run this and see what it does. We put in 4 and 5. It came out with 20.

5
00:00:14,000 --> 00:00:16,000
That actually should be enough for you to make out which of the answers

6
00:00:16,000 --> 00:00:18,000
that I gave you is correct.

7
00:00:18,000 --> 00:00:21,000
It's clearly computing the product of these two, at least in this example.

8
00:00:21,000 --> 00:00:23,000
But why in general is that what it's doing?

9
00:00:23,000 --> 00:00:25,000
Let's actually take a look at the code and see what happens.

10
00:00:25,000 --> 00:00:29,000
We start off with a and b, and we leave them alone, but we put copies of them into x and y.

11
00:00:29,000 --> 00:00:31,000
We have a z variable that we initialize to 0.

12
00:00:31,000 --> 00:00:34,000
Then what we're going to do is we're going to keep detrimenting x,

13
00:00:34,000 --> 00:00:37,000
keep subtracting 1 from x until it hits 0.

14
00:00:37,000 --> 00:00:41,000
Each time we subtract 1 from x we add y into z.

15
00:00:41,000 --> 00:00:45,000
We're starting off with z as 0, and we add y to it--how many times? X times.

16
00:00:45,000 --> 00:00:50,000
Z at the end of this is x added to itself x times--x * y.

17
00:00:50,000 --> 00:00:53,000
It is, in fact, computing the product of these.

18
00:00:53,000 --> 00:00:55,000
Now, that was kind of an informal argument.

19
00:00:55,000 --> 00:00:58,000
Can we be a little bit more formal and mathematical to show

20
00:00:58,000 --> 99:59:59,999
why it is that what this is computing is the product of a and b?
