1
00:00:00,310 --> 00:00:02,950
Now Sarah has shown you another example of a interface, and I hope you've

2
00:00:02,950 --> 00:00:07,200
become more familiar with how they work. They're really pretty natural. But

3
00:00:07,200 --> 00:00:10,900
when you think about it, there is something mysterious going on. In our

4
00:00:10,900 --> 00:00:16,811
suburban scene, we had an array list of drawables. Houses, cars, dogs and so

5
00:00:16,811 --> 00:00:21,347
on. We got one of them, store it in a variable of type drawable, of course,

6
00:00:21,347 --> 00:00:25,238
then call the draw method on it. That has

7
00:00:25,238 --> 00:00:25,802
[UNKNOWN]

8
00:00:25,802 --> 00:00:30,920
d belongs to the drawable type, and drawable has the draw method. What's d?

9
00:00:30,920 --> 00:00:36,106
It's the variable, so it holds a reference to an object. An object of what

10
00:00:36,106 --> 00:00:41,280
class? You might think it's an object of class drawable. Now wait a minute,

11
00:00:41,280 --> 00:00:46,313
there is no class drawable. Drawable is an interface. So that can't be it, and

12
00:00:46,313 --> 00:00:51,910
in fact, there is no way of knowing to which class this object belongs. There

13
00:00:51,910 --> 00:00:56,966
is only one thing that we know about it, this object belongs to some class that

14
00:00:56,966 --> 00:01:02,920
has a draw method. And in fact as you loop over the various elements in the

15
00:01:02,920 --> 00:01:08,655
array list, this line of code may call different methods. The draw method of

16
00:01:08,655 --> 00:01:12,230
the house class, the dog class, or of some other class, so far unimagined, that

17
00:01:12,230 --> 00:01:18,558
also chooses to implement the drawable interface. This variation is called

18
00:01:18,558 --> 00:01:23,949
polymorphism, which is just a fancy word for saying different shapes. In our

19
00:01:23,949 --> 00:01:29,262
scene, that's a very appropriate name. Because the draw method can draw

20
00:01:29,262 --> 00:01:33,858
entirely different shapes depending on what the implementing class does. But

21
00:01:33,858 --> 00:01:38,280
the term polymorphism is used generally in Java to indicate any situation where

22
00:01:38,280 --> 00:01:42,438
you have a method call and the actual method called depends on the type of the

23
00:01:42,438 --> 00:01:49,532
object. Now, why is polymorphism important? It lets us build expandable

24
00:01:49,532 --> 00:01:54,120
systems, where we can add new types without having to change the essential

25
00:01:54,120 --> 00:02:00,263
logic of the program. I'd like you to try this out and add a new type to our

26
00:02:00,263 --> 00:02:06,554
suburban scene. Namely a ball class and simply the kind of ball you may find

27
00:02:06,554 --> 00:02:11,515
lying on the street. And when you do that, note how little of the program you

28
00:02:11,515 --> 00:02:13,190
have to change.
