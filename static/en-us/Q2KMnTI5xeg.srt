1
00:00:00,240 --> 00:00:01,930
JP, thank goodness you're okay.

2
00:00:02,969 --> 00:00:04,660
>> Any reason I wouldn't be?

3
00:00:04,660 --> 00:00:07,870
Say did I tell you I got
someone from the Firebase team

4
00:00:07,870 --> 00:00:11,170
that offer to chat with us
about data best practices?

5
00:00:11,170 --> 00:00:12,240
>> No, but

6
00:00:12,240 --> 00:00:15,000
actually I think that might be just
the kind of guidance that we need.

7
00:00:15,000 --> 00:00:18,160
It's incredibly important
that we get the stuff right.

8
00:00:18,160 --> 00:00:21,910
Crap though, I've got Bouche Ball
game with the investors.

9
00:00:21,910 --> 00:00:23,880
Do you think that you can take notes?

10
00:00:23,880 --> 00:00:27,440
>> Or better yet
the developer can come over to Google.

11
00:00:27,440 --> 00:00:28,630
>> Yeah.
That sounds like a player.

12
00:00:28,630 --> 00:00:37,940
Want to bar the company
>> Hello and welcome.

13
00:00:37,940 --> 00:00:39,170
I'm here with Abe again and

14
00:00:39,170 --> 00:00:42,330
I'm joined by Puff, Puff is also
an engineer in the fire base team.

15
00:00:42,330 --> 00:00:43,010
Welcome, Puff.

16
00:00:43,010 --> 00:00:44,610
Thanks for having me.

17
00:00:44,610 --> 00:00:47,460
So I'm trying to advise
a friend on how to correctly

18
00:00:47,460 --> 00:00:49,540
come up with a database schema for
firebases.

19
00:00:49,540 --> 00:00:52,060
I imagine there could be some pitfalls.

20
00:00:52,060 --> 00:00:56,530
Is there an issue in getting
your schema right up front.

21
00:00:56,530 --> 00:00:59,750
Now one of these Firebase really allows
you to be flexible about how you

22
00:00:59,750 --> 00:01:01,040
structure your data.

23
00:01:01,040 --> 00:01:03,710
And that's one of the great benefits
of using a scheme on this no sequel

24
00:01:03,710 --> 00:01:04,269
database.

25
00:01:04,269 --> 00:01:07,880
Unfortunately, it's also one of
the pitfalls because people tend to

26
00:01:07,880 --> 00:01:10,760
not think up front of how they
need to model their data.

27
00:01:10,760 --> 00:01:14,480
And that's one of the things where at
some point during the lifecycle if your

28
00:01:14,480 --> 00:01:17,410
application you need to start
hammering down to structure.

29
00:01:17,410 --> 00:01:19,410
You need to start validating your data.

30
00:01:19,410 --> 00:01:23,650
If you don't you're going to run into
issues later with either scalability, or

31
00:01:23,650 --> 00:01:25,430
especially when you're
an Android developer,

32
00:01:25,430 --> 00:01:30,440
you need to start mapping your
schemaless JSON into your Java classes.

33
00:01:30,440 --> 00:01:34,540
And that becomes progressively
more expensive if you make

34
00:01:34,540 --> 00:01:37,280
changes later on in the cycle.

35
00:01:37,280 --> 00:01:40,040
An important point thing to note about
Firebase is that when you start,

36
00:01:40,040 --> 00:01:43,370
when you get a new fire base, you can
pretty much do whatever you want.

37
00:01:43,370 --> 00:01:46,290
You can write in any
type of crazy structure,

38
00:01:46,290 --> 00:01:48,430
you want to when you're developing,
and when you're testing.

39
00:01:48,430 --> 00:01:52,150
And this is easier on web then it
is on Android where your structure

40
00:01:52,150 --> 00:01:57,150
can be very, very loose, but
once you get something in your this is

41
00:01:57,150 --> 00:01:58,810
what we're going with this
is how we're building.

42
00:01:58,810 --> 00:02:00,100
You can lock that structure in.

43
00:02:00,100 --> 00:02:02,040
And you can write schema validations and

44
00:02:02,040 --> 00:02:06,350
you can make sure that the only data
in your firebase matches these rules.

45
00:02:06,350 --> 00:02:06,970
>> Okay.

46
00:02:06,970 --> 00:02:08,538
>> Initially, it's very free form.

47
00:02:08,538 --> 00:02:12,060
But once you have you have it more
concrete about what you're building and

48
00:02:12,060 --> 00:02:13,190
how you want to build it,

49
00:02:13,190 --> 00:02:15,390
you can lock it in just like you
would in any other database.

50
00:02:15,390 --> 00:02:18,720
So when you're developing apps and
you're first laying out your scheme,

51
00:02:18,720 --> 00:02:19,690
how do you go about doing it?

52
00:02:19,690 --> 00:02:21,110
Do you sketch it on paper?

53
00:02:21,110 --> 00:02:24,260
Do you build, so you take some
JSON data and sort of model it?

54
00:02:24,260 --> 00:02:27,240
How do you go about actually doing it?

55
00:02:27,240 --> 00:02:29,940
>> I usually start with
just some some code where I

56
00:02:29,940 --> 00:02:31,460
write some of the sample data.

57
00:02:31,460 --> 00:02:32,450
Is that the same as you did do?

58
00:02:32,450 --> 00:02:33,560
>> Yeah.
I think for sure,

59
00:02:33,560 --> 00:02:35,550
if you get a little bit of
code where you start saying,

60
00:02:35,550 --> 00:02:39,540
all right, here is a very loosely
defined user creation page.

61
00:02:39,540 --> 00:02:42,410
Well I can start writing what
a user object looks like.

62
00:02:42,410 --> 00:02:44,020
I start figuring out what I need.

63
00:02:44,020 --> 00:02:46,760
And then that data can start showing up
in your Firebase right away because it's

64
00:02:46,760 --> 00:02:49,970
so easy to get up and running with,
that then you can be like I need

65
00:02:49,970 --> 00:02:53,480
this profile information or I need
a list of their likes or whatever.

66
00:02:53,480 --> 00:02:55,770
And you can just start
very free forming,

67
00:02:55,770 --> 00:02:57,520
building out your data structure.

68
00:02:57,520 --> 00:03:00,730
And then once you're confident

69
00:03:00,730 --> 00:03:02,770
with your structure like I
said you can lock it in.

70
00:03:02,770 --> 00:03:05,680
But up until then you
can just very casually

71
00:03:05,680 --> 00:03:09,380
add in things where you need to and
experiment with the structure.

72
00:03:09,380 --> 00:03:10,890
For most cases, I find that works.

73
00:03:10,890 --> 00:03:13,960
Sometimes if it's a very large app and
you know there's going to be

74
00:03:13,960 --> 00:03:17,860
tons of different types of data in
there I'll whiteboard it out and

75
00:03:17,860 --> 00:03:21,150
sketch out like, all right here is this
and this will have a list that points to

76
00:03:21,150 --> 00:03:23,560
this other type of data or
something like that.

77
00:03:23,560 --> 00:03:26,740
But it's much more common that
I just start playing around and

78
00:03:26,740 --> 00:03:28,400
then develop a structure that way.

79
00:03:28,400 --> 00:03:31,150
>> Yeah and it actually because
what you then notice is that after

80
00:03:31,150 --> 00:03:32,380
you figure out your structure and

81
00:03:32,380 --> 00:03:35,960
how you want to store today tell
what data you want to store mostly.

82
00:03:35,960 --> 00:03:38,750
Then you start worrying about
scalability of the day time.

83
00:03:38,750 --> 00:03:40,960
And that's something you
can then do later so

84
00:03:40,960 --> 00:03:42,660
you now know which data you want.

85
00:03:42,660 --> 00:03:44,700
Now let's think about how
we can make this scalable.

86
00:03:44,700 --> 00:03:45,490
So.

87
00:03:45,490 --> 00:03:49,730
But starting with some
exploratory coding and

88
00:03:49,730 --> 00:03:52,200
just structuring today takes
you go is very common.

89
00:03:52,200 --> 00:03:55,760
>> Great so what are some
of the biggest mistakes you

90
00:03:55,760 --> 00:03:58,310
see new developers doing
when they design a schema?

91
00:04:00,080 --> 00:04:01,130
>> I think people,

92
00:04:02,130 --> 00:04:06,010
because firebase can have this
very complicated nested structure.

93
00:04:06,010 --> 00:04:08,590
Where you can essentially mimic
any Json structure you have,

94
00:04:08,590 --> 00:04:12,550
which could be users and then under
users a list of user names, and

95
00:04:12,550 --> 00:04:14,660
under that each user could
have a list of their friends,

96
00:04:14,660 --> 00:04:17,170
which could have a whole bunch of
profile information about them.

97
00:04:17,170 --> 00:04:19,680
They could have a profile, you end
up with this very nested structure.

98
00:04:19,680 --> 00:04:23,860
And that doesn't work very well in it's
very hard to be specific about your what

99
00:04:23,860 --> 00:04:27,210
you're loading if you have this
very complicated deep structure.

100
00:04:27,210 --> 00:04:30,780
So that nesting,
I think is a very common issue.

101
00:04:30,780 --> 00:04:34,240
It does, it's not that it doesn't work,
it's just that it doesn't scale as well.

102
00:04:34,240 --> 00:04:35,640
>> And also it's very natural.

103
00:04:35,640 --> 00:04:38,980
You see, that lots of developers, right,
I mean most of us come from a sequel

104
00:04:38,980 --> 00:04:41,360
background where we work
with relational databases.

105
00:04:41,360 --> 00:04:44,630
And there you cannot do
hierarchies very easily.

106
00:04:44,630 --> 00:04:47,990
So when you get to a hierarchical
database like Firebase,

107
00:04:47,990 --> 00:04:51,450
it's very natural to want to start
building these nested structures,

108
00:04:51,450 --> 00:04:53,530
because you've never
been able to do them.

109
00:04:53,530 --> 00:04:58,040
And that's when, as Abe says, we need
to start paying attention to not overly

110
00:04:58,040 --> 00:05:01,940
nesting the data, because you're
going to run into issues later on.

111
00:05:01,940 --> 00:05:05,290
So you typically want to stay
relatively flat in your data structure.

112
00:05:05,290 --> 00:05:11,150
And that's That's not very appealing to
developers coming from SQL backgrounds.

113
00:05:11,150 --> 00:05:14,420
>> Okay do you guys have any good like
war stories some like where you give

114
00:05:14,420 --> 00:05:17,560
assistance to customers that had some
hiccups because they didn't follow

115
00:05:17,560 --> 00:05:18,540
best practices?

116
00:05:18,540 --> 00:05:21,690
>> Yeah you don't get to a quarter of
a million developers without some war

117
00:05:21,690 --> 00:05:22,650
stories so.

118
00:05:22,650 --> 00:05:27,230
No what we see quite often is that
people start gathering lots of data and

119
00:05:27,230 --> 00:05:28,390
long lists.

120
00:05:28,390 --> 00:05:32,140
And that is fine if you
need all the data, but

121
00:05:32,140 --> 00:05:37,040
one of the ones we saw was we had
a developer that was tracking couriers,

122
00:05:37,040 --> 00:05:41,170
were delivering packages across the
city, and each courier was, I imagined

123
00:05:41,170 --> 00:05:46,840
him being on their mopeds and their
phone was pinging the Firebase server.

124
00:05:46,840 --> 00:05:49,230
So there's lots of data being generated.

125
00:05:49,230 --> 00:05:53,080
And they were keeping this data in one
long list, which would last essentially

126
00:05:53,080 --> 00:05:57,850
for days on end, and that would
be half a million items easily.

127
00:05:57,850 --> 00:05:59,340
And they were showing
this in a dashboard and

128
00:05:59,340 --> 00:06:00,760
things were sluggish in general.

129
00:06:00,760 --> 00:06:03,580
It was not the performance they were
looking for, so it's like well,

130
00:06:03,580 --> 00:06:06,430
okay how many items do you want to show
in this list and it turns out they

131
00:06:06,430 --> 00:06:09,890
were actually showing like,
at most the last five minutes of data.

132
00:06:09,890 --> 00:06:12,910
And this is one of the things that you
have to start explaining to them or

133
00:06:12,910 --> 00:06:16,780
if you only want to show five minutes
of data then why are you keeping

134
00:06:16,780 --> 00:06:18,530
a day's data in one big list.

135
00:06:18,530 --> 00:06:23,150
Because you will have to query all of
it's to just get the top ten items.

136
00:06:23,150 --> 00:06:26,900
That's a very common one we see where
people are not separating their

137
00:06:26,900 --> 00:06:30,520
active data from their historical data.

138
00:06:30,520 --> 00:06:33,460
And yeah, these hurt so
we see this quite often.

139
00:06:33,460 --> 00:06:34,790
You have something for us?

140
00:06:34,790 --> 00:06:37,640
>> Yeah, another common issue related
to that is people will go and

141
00:06:37,640 --> 00:06:40,370
they'll build some application
with Firebase really quickly

142
00:06:40,370 --> 00:06:43,570
because it lets you do that and
they'll start getting a ton of data.

143
00:06:43,570 --> 00:06:45,960
And then they'll make one
mistake in their code and

144
00:06:45,960 --> 00:06:48,040
they will clear out their Firebase.

145
00:06:48,040 --> 00:06:50,860
This is not normally possible, if you're

146
00:06:50,860 --> 00:06:54,980
adhering to what our best practices
that we provide in our documentation.

147
00:06:54,980 --> 00:06:57,940
Which is basically that you
restrict things in your Firebase,

148
00:06:57,940 --> 00:07:00,750
you say only this type
of data can exist here.

149
00:07:00,750 --> 00:07:02,800
Only these people can write to this and
that.

150
00:07:02,800 --> 00:07:04,140
That way when you're developing,

151
00:07:04,140 --> 00:07:07,530
you don't accidentally delete
all your Firebase data.

152
00:07:07,530 --> 00:07:10,360
But because we don't enforce that
because in the early like we want you to

153
00:07:10,360 --> 00:07:12,150
be able to experiment and play around.

154
00:07:12,150 --> 00:07:14,670
We don't know if you're trying to clear
out your Firebase because you're tired

155
00:07:14,670 --> 00:07:15,980
of the structure you made.

156
00:07:15,980 --> 00:07:18,560
Or if you made a mistake
in your code and

157
00:07:18,560 --> 00:07:20,250
you know some bug it's cleaning it out.

158
00:07:20,250 --> 00:07:24,180
So we see that a lot especially like
things like hackathon where people

159
00:07:24,180 --> 00:07:25,550
are trying to write code very quickly.

160
00:07:25,550 --> 00:07:28,430
And they're like,
I'll not bother with the security rules,

161
00:07:28,430 --> 00:07:32,280
I won't bother enforcing a schema,
and then they make one mistake, and

162
00:07:32,280 --> 00:07:33,890
they're like, where is all my data.

163
00:07:33,890 --> 00:07:35,330
And the answer is, it's gone.

164
00:07:35,330 --> 00:07:36,940
Luckily, we have backups for that.

165
00:07:36,940 --> 00:07:39,260
We do backups of your
Firebases all the time,

166
00:07:39,260 --> 00:07:44,730
and we can recover that if it's
important mission critical data.

167
00:07:44,730 --> 00:07:49,480
But in general, it's a very easy mistake
to make if you're not following our best

168
00:07:49,480 --> 00:07:52,029
practices and implementing security and
validation roles.

169
00:07:53,110 --> 00:07:54,600
Good point.

170
00:07:54,600 --> 00:07:57,480
Last one I remember is I was
talking to a game developer and

171
00:07:57,480 --> 00:08:00,710
they were doing a IOS app I think,

172
00:08:00,710 --> 00:08:06,300
where you got to vote on either the blue
egg hatched or the red egg would hatch.

173
00:08:06,300 --> 00:08:08,510
And they were looking for okay,

174
00:08:08,510 --> 00:08:12,100
so we would probably use transactions
to keep the count right?

175
00:08:12,100 --> 00:08:13,690
Of who voted for what.

176
00:08:13,690 --> 00:08:19,070
And this is a common one where it's like
well how many players do you get and

177
00:08:19,070 --> 00:08:23,200
how often do they or
how how fast do they vote?

178
00:08:23,200 --> 00:08:27,210
They had half a million in like thirty
seconds and that's typically something

179
00:08:27,210 --> 00:08:30,370
where if you start doing transactions,
yeah it will not skill very

180
00:08:30,370 --> 00:08:34,990
well anymore because everyone will be
hitting that same counter at that time.

181
00:08:34,990 --> 00:08:38,530
So there you see that you know you need
to stare into a direction where you're

182
00:08:38,530 --> 00:08:42,740
actually instead of increasing
a counter you keep the votes and

183
00:08:42,740 --> 00:08:44,100
start counting them separately.

184
00:08:44,100 --> 00:08:47,140
And it is always fun to explain
because yeah people are used to doing

185
00:08:47,140 --> 00:08:47,810
transactions.

186
00:08:50,190 --> 00:08:52,750
>> Well guys,
really appreciate your time today.

187
00:08:52,750 --> 00:08:57,370
Thank you very much I'm sure that our
developer will really go take this

188
00:08:57,370 --> 00:08:59,010
advice and
continue on developing their app.

189
00:08:59,010 --> 00:08:59,980
>> Cool, okay.
>> Glad we could help.

190
00:08:59,980 --> 00:09:01,549
>> Yeah, thanks.
