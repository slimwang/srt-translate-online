1
00:00:00,400 --> 00:00:02,450
So, let's talk about
Development Workflow.

2
00:00:02,450 --> 00:00:05,200
Although details will be different
from organization to organization,

3
00:00:05,200 --> 00:00:07,510
the general ideas will stay the same.

4
00:00:07,510 --> 00:00:12,630
Developers just don't edit code
files on one big file server.

5
00:00:12,630 --> 00:00:15,790
They use version control systems
to track their changes and

6
00:00:15,790 --> 00:00:17,130
keep them in sync.

7
00:00:17,130 --> 00:00:20,420
There are a bunch of different
version control systems out there, but

8
00:00:20,420 --> 00:00:24,460
some of the most important ones these
days are Distributed VCS such as Git.

9
00:00:24,460 --> 00:00:27,990
When a developer writes their change,
they commit it to their fork or

10
00:00:27,990 --> 00:00:29,550
branch of the project.

11
00:00:29,550 --> 00:00:32,905
Then, when their work is ready to be
merged in, they issue a pull request to

12
00:00:32,905 --> 00:00:35,807
the main branch and request a code
review from their colleague.

13
00:00:35,807 --> 00:00:38,849
Then, once the review is done,
they can merge their change in.

14
00:00:38,849 --> 00:00:42,100
So there are various points
that testing can happen.

15
00:00:42,100 --> 00:00:45,840
Developers can manually run tests on
their own code before code review or

16
00:00:45,840 --> 00:00:47,550
as part of that process.

17
00:00:47,550 --> 00:00:50,730
Integration and full system tests
rely on running the whole service,

18
00:00:50,730 --> 00:00:52,650
often on a testing server.

19
00:00:52,650 --> 00:00:55,900
After that, it's common practice to
deploy the changes to a staging server

20
00:00:55,900 --> 00:00:57,330
for further tests.

21
00:00:57,330 --> 00:00:59,960
The difference between a test server and
a staging server is that

22
00:00:59,960 --> 00:01:02,390
the latter resembles production
as closely as possible.

23
00:01:02,390 --> 00:01:03,650
For instance, having real data.

24
00:01:03,650 --> 00:01:07,130
And then, if everything goes well,
the build gets promoted to production.

25
00:01:07,130 --> 00:01:08,690
Depending on the application,

26
00:01:08,690 --> 00:01:11,790
it can be a good idea to
do rollouts incrementally.

27
00:01:11,790 --> 00:01:12,710
So that, even if,

28
00:01:12,710 --> 00:01:16,120
after all this testing, the release
turns out to break the service.

29
00:01:16,120 --> 00:01:18,450
At least it doesn't
break all of it at once.

30
00:01:18,450 --> 00:01:20,240
Even if you never want
to have to use it,

31
00:01:20,240 --> 00:01:23,420
having the ability to
rollback is really important.

32
00:01:23,420 --> 00:01:26,920
As you can see, there were a fair
number of steps in this process.

33
00:01:26,920 --> 00:01:30,250
If the handover from every step to
another was manual, it would be slow and

34
00:01:30,250 --> 00:01:31,910
potentially error prone.

35
00:01:31,910 --> 00:01:34,390
Slow manual processes
create bottlenecks and

36
00:01:34,390 --> 00:01:38,740
errors create extra unplanned work
that uses up time to do planned work.

37
00:01:38,740 --> 00:01:40,980
So, by automating as much as we can, and

38
00:01:40,980 --> 00:01:44,560
making sure that people can fix
the bottlenecks in their work process,

39
00:01:44,560 --> 00:01:48,120
DevOps practices can give us much more
time to do the actual productive work.
