1
00:00:00,290 --> 00:00:03,290
Let's take a look at how setTimeout might be implemented if it

2
00:00:03,290 --> 00:00:07,220
was written natively in JavaScript and we could go read the file somewhere.

3
00:00:07,220 --> 00:00:08,160
We'll pretend for

4
00:00:08,160 --> 00:00:12,220
a moment that it's defined in a file somewhere called timers.js.

5
00:00:12,220 --> 00:00:14,960
What would you expect to see appearing in this file?

6
00:00:14,960 --> 00:00:19,250
I mean, first of all, there'd be a function definition where setTimeout is

7
00:00:19,250 --> 00:00:22,340
a variable defined and made to point at some function.

8
00:00:22,340 --> 00:00:25,460
That function would, of course, take two arguments, your callback and

9
00:00:25,460 --> 00:00:28,820
the number of milliseconds to wait before calling that callback.

10
00:00:28,820 --> 00:00:31,010
What would happen in the body of the function?

11
00:00:31,010 --> 00:00:34,540
Well, first of all, of course, somehow the system delays execution of

12
00:00:34,540 --> 00:00:36,990
your callback by a number of milliseconds.

13
00:00:36,990 --> 00:00:40,380
Note that if you understand how JavaScript's concurrency model works,

14
00:00:40,380 --> 00:00:43,520
you know this actually couldn't be done in native JavaScript, but

15
00:00:43,520 --> 00:00:45,550
it's still a useful example to imagine.

16
00:00:45,550 --> 00:00:49,310
The next thing that setTimeout would have to do is refer to your function and

17
00:00:49,310 --> 00:00:51,250
it would have to somehow invoke it.

18
00:00:51,250 --> 00:00:54,230
Here, we're finally able to ask ourselves the question,

19
00:00:54,230 --> 00:00:59,010
what values is setTimeout likely to pass along to your callback function?

20
00:00:59,010 --> 00:01:01,784
Since setTimeout has no way of knowing what values you

21
00:01:01,784 --> 00:01:03,509
wanted passed to your function,

22
00:01:03,509 --> 00:01:07,770
perhaps it would be forced to simply invoke it with no parameters at all.

23
00:01:07,770 --> 00:01:08,900
If that were the case,

24
00:01:08,900 --> 00:01:12,350
what would you expect to be shown in the last position of the log output?
