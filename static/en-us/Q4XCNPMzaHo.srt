1
00:00:00,360 --> 00:00:04,140
Because strings are comparable, we can sort them by writing one line of code.

2
00:00:04,140 --> 00:00:07,736
If I create an array list of strings and add a whole bunch of things not in any

3
00:00:07,736 --> 00:00:11,332
order, and then I want to print them out in alphabetical order, I can add the

4
00:00:11,332 --> 00:00:17,836
line collections.sort strings. Collections is a class a little bit like a race

5
00:00:17,836 --> 00:00:23,255
that has some useful utility methods. If I compile and run this code, it will

6
00:00:23,255 --> 00:00:28,556
print out all of the animals that I added to the list, but from A to W. We

7
00:00:28,556 --> 00:00:31,670
might want to be able to sort countries like this too. Let's say countries are

8
00:00:31,670 --> 00:00:36,275
naturally ordered by their areas. Let's implement the compareTo method for

9
00:00:36,275 --> 00:00:39,968
countries. I want to be able to make an array of countries like this, and then

10
00:00:39,968 --> 00:00:43,208
use the sort method in the arrays class to sort all of the countries in the

11
00:00:43,208 --> 00:00:48,487
array, so that this will work. Let's implement the comparable method for

12
00:00:48,487 --> 00:00:54,220
countries. We'll need to make the country measurable and also comparable. Now

13
00:00:54,220 --> 00:00:58,243
the method should be public and return an int. It's called compareTo, and it

14
00:00:58,243 --> 00:01:02,970
takes an object, otherObject. Now if we want to compare otherObject to this

15
00:01:02,970 --> 00:01:06,270
object, the first thing we'll need to do is check whether otherObject actually

16
00:01:06,270 --> 00:01:10,662
has a name and an area. If otherObject is not a country, then it doesn't really

17
00:01:10,662 --> 00:01:15,292
make sense to compare it to this country. If you keep studying Java, you'll

18
00:01:15,292 --> 00:01:19,487
figure out how to avoid this cast using generics. For now though, let's focus

19
00:01:19,487 --> 00:01:23,243
on the compareTo method. For now, fill in the code, so that compareTo works as

20
00:01:23,243 --> 00:01:28,078
I described before for countries. Return a negative number if this country is

21
00:01:28,078 --> 00:01:31,500
smaller than other, positive is this country is larger, zero if the two

22
00:01:31,500 --> 00:01:38,121
countries are equal. And notice, I implemented .equals for you. So, you can use

23
00:01:38,121 --> 00:01:41,936
this. And if the countries are exactly the same size, you can break ties using

24
00:01:41,936 --> 00:01:46,313
the name. Can you fill in the rest for me?
