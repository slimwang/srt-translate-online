1
00:00:00,420 --> 00:00:04,280
So, software is what controls
our computer systems.

2
00:00:04,280 --> 00:00:08,930
We get things done by running
software that we write, or

3
00:00:08,930 --> 00:00:11,160
somebody else has written for us.

4
00:00:11,160 --> 00:00:15,480
And, we're going to talk about
exactly what are those bugs

5
00:00:15,480 --> 00:00:18,370
that actually turn into vulnerabilities.

6
00:00:18,370 --> 00:00:21,940
We're also going to talk
about how exactly those bugs,

7
00:00:21,940 --> 00:00:24,140
or others get exploited.

8
00:00:24,140 --> 00:00:28,240
So the vulnerabilities that we're
going to talk about come because of

9
00:00:28,240 --> 00:00:29,720
memory overflow.

10
00:00:29,720 --> 00:00:33,760
Keep in mind memory overflow means
that the amount of memory we have for

11
00:00:33,760 --> 00:00:36,019
a certain data type is not sufficient so

12
00:00:36,019 --> 00:00:38,629
the data type runs over
the allocated space.

13
00:00:38,629 --> 00:00:43,432
And an attacker is actually able
to exploit a program by inserting

14
00:00:43,432 --> 00:00:47,270
new code sometimes in
certain part of memory.

15
00:00:47,270 --> 00:00:52,830
And also then directing or transferring
control of that code to the instructions

16
00:00:52,830 --> 00:00:56,660
that the attacker has introduced in
this memory that we're talking about.

17
00:00:56,660 --> 00:00:59,820
Stack is the area where
we allocate space for

18
00:00:59,820 --> 00:01:03,250
dynamically created data items or
variables.

19
00:01:03,250 --> 00:01:06,090
So the most common example
of when you use a stack

20
00:01:06,090 --> 00:01:09,470
is when you make a function call or
a procedure call.

21
00:01:09,470 --> 00:01:12,810
When we do that,
the variables that we need

22
00:01:12,810 --> 00:01:16,520
to execute the function code
get allocated on the stack.

23
00:01:16,520 --> 00:01:19,770
So, as you make function calls,
or procedure calls,

24
00:01:19,770 --> 00:01:24,900
for each call we create what we
call a stack frame on the stack.

25
00:01:24,900 --> 00:01:29,450
This stack frame essentially you can
think about, gives us the scratch pad or

26
00:01:29,450 --> 00:01:33,430
the memory that we going to need for
the execution of this function.

27
00:01:33,430 --> 00:01:35,550
It's created when
the function is called and

28
00:01:35,550 --> 00:01:38,980
it is discarded when the function
finishes and returns.

29
00:01:38,980 --> 00:01:42,130
So what exactly is stored
in the stack frame?

30
00:01:42,130 --> 00:01:46,340
Part of this we're going to
allocate space for local variables

31
00:01:46,340 --> 00:01:49,810
that are going to be used by
the code defined by the function.

32
00:01:49,810 --> 00:01:52,140
Also parameters that
we're going to pass.

33
00:01:52,140 --> 00:01:54,940
This is data that we're
going to pass to the function.

34
00:01:54,940 --> 00:01:58,050
Those arguments or parameters are going
to be stored in the stack frame.

35
00:01:58,050 --> 00:02:00,690
And we also store control information.

36
00:02:00,690 --> 00:02:05,000
So remember when you call the function,
you are doing control transfer,

37
00:02:05,000 --> 00:02:08,258
from where you were,
to where this function code is.

38
00:02:08,258 --> 00:02:10,030
When you get done with the function,

39
00:02:10,030 --> 00:02:14,910
you have to return to the point
from where you had made the call.

40
00:02:14,910 --> 00:02:19,210
And the vulnerability that
we're going to explore today,

41
00:02:19,210 --> 00:02:22,120
which is buffer overflow,
stack buffer overflow

42
00:02:22,120 --> 00:02:25,830
is actually going to manipulate
the memory that is in this frame.

43
00:02:25,830 --> 00:02:28,250
Before we actually get into the details,

44
00:02:28,250 --> 00:02:32,340
I should mention the software
vulnerabilities that we have.

45
00:02:32,340 --> 00:02:38,630
An attacker is allowed to call
a program that you run on your system.

46
00:02:38,630 --> 00:02:41,610
The program may have
an interface that allows

47
00:02:41,610 --> 00:02:44,400
legitimate users to make calls to it.

48
00:02:44,400 --> 00:02:48,000
And when they make those calls they
are actually going to pass some data, so

49
00:02:48,000 --> 00:02:51,660
the entry point here is
actually a legitimate call

50
00:02:51,660 --> 00:02:54,420
that could be made by
users of this program.

51
00:02:54,420 --> 00:02:56,390
They pass certain kind of data and

52
00:02:56,390 --> 00:03:01,100
the attacker is going to pass
data that is not what we expect.

53
00:03:01,100 --> 00:03:04,010
As a result it's going to lead to this
overflow that we're talking about.
