1
00:00:00,160 --> 00:00:01,490
Here are the answers.

2
00:00:01,490 --> 00:00:04,180
The first two equations
define the same line.

3
00:00:04,180 --> 00:00:08,509
The second two equations
define lines with a unique

4
00:00:08,509 --> 00:00:12,470
intersection, which is the point 1.173,
0.073.

5
00:00:12,470 --> 00:00:16,120
The third pair of equations define
parallel lines which are not the same.

6
00:00:16,120 --> 00:00:18,110
So there is no intersection.

7
00:00:18,110 --> 00:00:22,510
Now here are the functions I added to my
Python module to find the intersections.

8
00:00:22,510 --> 00:00:26,890
I have the function is parallel to
first, it leverages the function of

9
00:00:26,890 --> 00:00:30,130
the same name we coded earlier for
the vector class.

10
00:00:30,130 --> 00:00:34,125
It just returns whether the normal
vectors of the two lines self and

11
00:00:34,125 --> 00:00:38,830
ell are parallel since this is how
we define lines to be parallel.

12
00:00:38,830 --> 00:00:43,660
Next I added the function E.Q. which
checks whether two lines are the same.

13
00:00:43,660 --> 00:00:47,010
Remember that we can check whether
two parallel lines are equal

14
00:00:47,010 --> 00:00:51,220
by picking one point from each line and
looking at the vector connecting them.

15
00:00:51,220 --> 00:00:55,610
If that vector is orthogonal to
the normal vectors of both lines.

16
00:00:55,610 --> 00:00:57,410
Then the two lines are equal.

17
00:00:57,410 --> 00:01:01,040
Here I first checked that the two
lines being compared are parallel.

18
00:01:01,040 --> 00:01:03,630
If not then there's no
chance of there being equal

19
00:01:03,630 --> 00:01:07,080
then I compute the vector connecting
the two lines base points.

20
00:01:07,080 --> 00:01:10,940
Finally, I check whether that vector
is orthogonal to the normal vector of

21
00:01:10,940 --> 00:01:11,930
the first line.

22
00:01:11,930 --> 00:01:15,120
I don't need to compare it to
the normal vectors of both lines,

23
00:01:15,120 --> 00:01:17,430
since I know the lines
are already parallel.

24
00:01:17,430 --> 00:01:19,950
So being orthogonal to one normal
vector is equivalent to being

25
00:01:19,950 --> 00:01:21,510
orthogonal to the other.

26
00:01:21,510 --> 00:01:24,940
Here I've added some more code to deal
with the technical case that we haven't

27
00:01:24,940 --> 00:01:26,250
encountered yet.

28
00:01:26,250 --> 00:01:29,400
What to do if the normal vector
of a line is the zero vector.

29
00:01:29,400 --> 00:01:32,340
This case will actually come
up later in the lesson.

30
00:01:32,340 --> 00:01:34,890
But I want to go ahead and
put it into our code now.

31
00:01:34,890 --> 00:01:38,920
Basically a normal vector of zero means
that the left hand side of the equation

32
00:01:38,920 --> 00:01:43,370
defining the line is zero, since the
coefficient of each variable is zero.

33
00:01:43,370 --> 00:01:47,320
In that case I check the constant terms
of the two lines to see whether they

34
00:01:47,320 --> 00:01:48,420
are the same.

35
00:01:48,420 --> 00:01:51,840
And if so
then I declare the lines to be equal.

36
00:01:51,840 --> 00:01:54,070
If not then they are different lines.

37
00:01:54,070 --> 00:01:56,210
You don't need to add
this to your code yet but

38
00:01:56,210 --> 00:01:59,060
you may find it helpful
to come back to later on.

39
00:01:59,060 --> 00:02:02,460
Finally, I added the function
intersection width,

40
00:02:02,460 --> 00:02:05,690
using the formula from
earlier I compute the X and

41
00:02:05,690 --> 00:02:08,320
Y coordinates of the point
of intersection.

42
00:02:08,320 --> 00:02:12,420
However, the two lines turn out to be
parallel then I'll end up with a zero

43
00:02:12,420 --> 00:02:16,460
division error when trying
to compute one_over_denom.

44
00:02:16,460 --> 00:02:19,930
If this happens, then I check
whether the lines are equal.

45
00:02:19,930 --> 00:02:22,400
If so, then I return self

46
00:02:22,400 --> 00:02:26,330
since the intersection of the two
lines is a line object itself.

47
00:02:26,330 --> 00:02:28,155
On the other hand,
if the lines are not equal,

48
00:02:28,155 --> 00:02:32,515
then there will be no intersection
in which case I return none.

49
00:02:32,515 --> 00:02:36,315
After coding the functions, here is
what I used to answer the questions from

50
00:02:36,315 --> 00:02:39,095
earlier, and
here is the output when I run the code.
