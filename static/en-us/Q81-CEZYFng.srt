1
00:00:00,000 --> 00:00:04,000
What do we do about computing statistics like those in an unsorted list.

2
00:00:04,000 --> 00:00:12,000
Well, plan A, especially for mathematical-minded people, might be to sort the list first,

3
00:00:12,000 --> 00:00:19,000
which as we say reduces the problem to one previously solved so that is safe.

4
00:00:19,000 --> 00:00:24,000
We know how to sort. We can sort the list and then apply the ideas the we had just been talking about.

5
00:00:24,000 --> 00:00:28,000
We're going to be talking more about sorting in a little while, but for now,

6
00:00:28,000 --> 00:00:35,000
the important thing to know is that the running time of sorting is Î¸ (n log n) for a list of length n.

7
00:00:35,000 --> 00:00:42,000
this is under the comparison model, but the important thing to make note of here is that

8
00:00:42,000 --> 00:00:45,000
it's worse than just running through the list, right?

9
00:00:45,000 --> 00:00:49,000
You have to run through the list repeatedly log n times essentially

10
00:00:49,000 --> 00:00:51,000
and that may be overkill in some cases.

11
00:00:51,000 --> 00:00:56,000
If you're interested in a very quick and possibly entertaining introduction to sorting,

12
00:00:56,000 --> 00:00:58,000
I've got a music video on the topic called The Sorter,

13
00:00:58,000 --> 00:01:01,000
which you can find on YouTube, we'll try to send the link.

14
00:01:01,000 --> 00:01:05,000
Plan B is to try to extract the statistic that we're looking for

15
00:01:05,000 --> 00:01:07,000
in effectively one scan through the data so Î(n)

16
00:01:07,000 --> 00:01:11,000
and the time that it takes to zip through the list looking at the values

17
00:01:11,000 --> 00:01:14,000
we should be able to get certainly the min and the max.

18
00:01:14,000 --> 00:01:17,000
It turns out that we can actually get the median as well, which is really interesting result.

19
00:01:17,000 --> 00:01:20,000
Let's start off with the very straightforward one.

20
00:01:20,000 --> 00:01:25,000
The mean of a list with the average of a list this is how a statistician might write it.

21
00:01:25,000 --> 00:01:33,000
Âľ or the mean is the sum over all the elements on the list from 0 to n-1

22
00:01:33,000 --> 00:01:38,000
We look up the value, we sum them all together, and then we divide by the number of values.

23
00:01:38,000 --> 00:01:42,000
It's just the definition of an average, and it's really straightforward to do that in Python as well.
