1
00:00:00,000 --> 00:00:03,000
What I'm going to do now is read a short quote from Julian Seward,

2
00:00:03,000 --> 00:00:05,000
the author of the Valgrind Tool.

3
00:00:05,000 --> 00:00:09,000
If you haven't used Valgrind and if you're a serious C++ developer, you really should.

4
00:00:09,000 --> 00:00:13,000
It's an amazing tool that runs dynamic checks on your running program.

5
00:00:13,000 --> 00:00:16,000
and it looks for errors such as null pointer references,

6
00:00:16,000 --> 00:00:19,000
out-of-bounds array accesses, and other things.

7
00:00:19,000 --> 00:00:23,000
He said, "This code is absolutely loaded with assertions, and these are permanently enabled.

8
00:00:23,000 --> 00:00:27,000
As Valgrind has become more widely used, they have shown they worth,

9
00:00:27,000 --> 00:00:29,000
pulling up various bugs

10
00:00:29,000 --> 00:00:32,000
which would otherwise have appeared as hard-to-find segmentation faults.

11
00:00:32,000 --> 00:00:34,000
I am of the view that it's acceptable to spend 5%

12
00:00:34,000 --> 00:00:36,000
of the total running time doing assertion checks."

13
00:00:36,000 --> 00:00:40,000
So, what Julian is saying here is that he's going to cost everybody 5% of total running time

14
00:00:40,000 --> 00:00:43,000
in order to make testing and debugging of Valgrind easier.

15
00:00:43,000 --> 00:00:46,000
I've included this somewhat long quote because I really agree with Julian here.

16
00:00:46,000 --> 00:00:50,000
I think it's generally worth our time to try to make our code fail early, fail fast,

17
00:00:50,000 --> 00:00:54,000
rather than keeping going and failing in confusing ways later

18
00:00:54,000 --> 00:00:57,000
or even providing people with completely wrong results.

19
00:00:57,000 --> 00:01:01,000
On the other hand, let's imagine we're working at NASA or someplace like that,

20
00:01:01,000 --> 00:01:04,000
and we're writing software that's going to be controlling a spaceship

21
00:01:04,000 --> 00:01:06,000
as it lands on Mars or some other planet.

22
00:01:06,000 --> 00:01:08,000
We have to ask ourselves the question do we want

23
00:01:08,000 --> 00:01:11,000
to enable assertions checks for this kind of a mission?

24
00:01:11,000 --> 00:01:13,000
I actually talked to a NASA engineer some time ago

25
00:01:13,000 --> 00:01:16,000
who had worked on the software for one of the Mars missions.

26
00:01:16,000 --> 00:01:18,000
What he told me was for most of the mission--

27
00:01:18,000 --> 00:01:23,000
that is to say for the launch phase, for the cruise phase, for orbiting Mars--

28
00:01:23,000 --> 00:01:27,000
they had plenty of assertions enabled in the actual mission software--

29
00:01:27,000 --> 00:01:29,000
that is to say, in the software running on the spacecraft.

30
00:01:29,000 --> 00:01:32,000
On the other hand, for a short period of time during which the spacecraft

31
00:01:32,000 --> 00:01:35,000
was actually landing they disabled all of the assertions

32
00:01:35,000 --> 00:01:38,000
on the idea that they got only one shot to land on the planet

33
00:01:38,000 --> 00:01:42,000
and that if anything went wrong with the software during the landing process

34
00:01:42,000 --> 00:01:44,000
it was better to just try to keep going,

35
00:01:44,000 --> 00:01:47,000
because an assertion violation leading to a system reset

36
00:01:47,000 --> 00:01:49,000
could cause the lander to become unstable

37
00:01:49,000 --> 00:01:51,000
in such a way that it wouldn't have been recoverable.

38
00:01:51,000 --> 00:01:53,000
That gives us a summary.

39
00:01:53,000 --> 00:01:55,000
If you're doing something so critical that it keeps going that it resembles landing

40
00:01:55,000 --> 00:01:59,000
a spaceship on Mars, then go ahead and turn off assertions in your production software.

41
00:01:59,000 --> 99:59:59,999
Otherwise, you're probably better off leaving them enabled.
