1
00:00:00,560 --> 00:00:03,650
This app was built in a very similar
way to the demo that switched map

2
00:00:03,650 --> 00:00:05,620
types that you saw earlier on.

3
00:00:05,620 --> 00:00:08,880
If you aren't familiar with the layout
in Gradle and manifest configurations,

4
00:00:08,880 --> 00:00:10,540
check back to that video.

5
00:00:10,540 --> 00:00:12,020
But I'm going to show
them a little bit here.

6
00:00:12,020 --> 00:00:15,000
First, you can see in my bill.gradlel
file I've added the Services

7
00:00:15,000 --> 00:00:17,990
library that gives me
access to the Maps SDK.

8
00:00:17,990 --> 00:00:21,590
Then, in Android manifest,
I've added my open GL stuff.

9
00:00:21,590 --> 00:00:25,561
And I've added the uses-permission stuff
for INTERNET, ACCESS_NETWORK_STATE, and

10
00:00:25,561 --> 00:00:26,960
WRITE_EXTERNAL_STORAGE.

11
00:00:26,960 --> 00:00:31,478
I've also added the metadata for
the Services libraries here.

12
00:00:31,478 --> 00:00:35,880
And then finally, I've added
the API key configuration here.

13
00:00:35,880 --> 00:00:39,520
Now, remember, every time you
create a new application on Maps,

14
00:00:39,520 --> 00:00:44,440
you're going to configure the API key
on your Google developers console.

15
00:00:44,440 --> 00:00:46,510
So for example as you can see here,

16
00:00:46,510 --> 00:00:49,920
here's my API key that I'm
using in the application.

17
00:00:49,920 --> 00:00:54,570
And because I've called my map
com.google.devplan.almarone.maps33,

18
00:00:54,570 --> 00:00:59,740
I also have to have a setting for it in
the Android applications, using the SHA1

19
00:00:59,740 --> 00:01:04,730
key for my debug certificate followed by
a semi colon, followed by the app name.

20
00:01:04,730 --> 00:01:08,394
So, you should see a list of them here,
and if you recall the apps that we've

21
00:01:08,394 --> 00:01:11,914
been building as we go along in
the course, I've been adding them here.

22
00:01:11,914 --> 00:01:13,820
And that's why they're actually working.

23
00:01:13,820 --> 00:01:16,500
Okay, let's take a look
at the layout next.

24
00:01:16,500 --> 00:01:17,870
And here you can see in the layout,

25
00:01:17,870 --> 00:01:20,470
I've done the same as I did
in the earlier application.

26
00:01:20,470 --> 00:01:22,020
I have a vertical linear layout,

27
00:01:22,020 --> 00:01:26,360
and the first child of that is
a horizontal linear layout.

28
00:01:26,360 --> 00:01:29,820
This horizontal linear layout
contains three buttons.

29
00:01:29,820 --> 00:01:34,630
These buttons are button Seattle,
button Tokyo, and button Dublin.

30
00:01:34,630 --> 00:01:36,920
I've just set their text to
be the names of the cities,

31
00:01:36,920 --> 00:01:40,560
I've hard coded the text in this case it
might make more sense to put that into

32
00:01:40,560 --> 00:01:43,330
a string XML in a real application.

33
00:01:43,330 --> 00:01:47,028
And then the second child is the end
of the horizontal linear layout, so

34
00:01:47,028 --> 00:01:51,157
the second child of the vertical linear
layout course is the maps fragment, and

35
00:01:51,157 --> 00:01:54,200
here's just the standard
maps fragment setting.

36
00:01:54,200 --> 00:01:58,450
Where it's a
com.google.android.gms.maps.MapFragment.

37
00:01:58,450 --> 00:01:59,020
So as you can see,

38
00:01:59,020 --> 00:02:02,330
the layout is virtually identical
to the layout we had earlier on

39
00:02:02,330 --> 00:02:06,240
in the application that allowed you
to switch the different map types.

40
00:02:06,240 --> 00:02:09,261
Now let's take a look at the source
code in the main activity.

41
00:02:09,261 --> 00:02:13,056
Here you can see the main activity, and
I've created four camera positions,

42
00:02:13,056 --> 00:02:15,550
NEWYORK, SEATTLE, DUBLIN, and TOKYO.

43
00:02:15,550 --> 00:02:18,340
Of course, I'm only using Seattle,
Dublin, and Tokyo.

44
00:02:18,340 --> 00:02:21,290
But I've put New York in here in case
you want to build the application using

45
00:02:21,290 --> 00:02:22,160
New York.

46
00:02:22,160 --> 00:02:25,616
And here with the latitude and longitude
that I had showed in the slides for

47
00:02:25,616 --> 00:02:27,580
New York, for Seattle, and for Dublin.

48
00:02:27,580 --> 00:02:29,818
And if you didn't find out you're on for
Tokyo, here it is for

49
00:02:29,818 --> 00:02:33,030
you and this is available in
the speaker notes, this source code.

50
00:02:33,030 --> 00:02:35,810
So these are constant camera
positions that I've created for

51
00:02:35,810 --> 00:02:37,540
the names of the four cities.

52
00:02:37,540 --> 00:02:41,540
Then in my onCreate,
I just wire the button handlers and

53
00:02:41,540 --> 00:02:44,350
I only have buttons for
Seattle, Dublin, and Tokyo.

54
00:02:44,350 --> 00:02:48,477
So in each one of these on the onClick,
I'm going to call this helper method

55
00:02:48,477 --> 00:02:51,818
that I wrote called flyTo, and
it's flyTo the city name, so

56
00:02:51,818 --> 00:02:54,852
if you click the Seattle button,
flyTo(SEATTLE).

57
00:02:54,852 --> 00:02:57,500
If you click the Dublin button,
flyTo(DUBLIN).

58
00:02:57,500 --> 00:03:00,518
If you click the Tokyo button,
you flyTo(TOKYO).

59
00:03:00,518 --> 00:03:03,620
And then to look at the flyTo
helper method, you can see it here.

60
00:03:03,620 --> 00:03:05,670
And here's where I
call the animateCamera.

61
00:03:05,670 --> 00:03:08,195
So on my map,
I'm animating the camera, the

62
00:03:08,195 --> 00:03:11,650
CameraUpdateFactory.newCameraPosition(t-
arget).

63
00:03:11,650 --> 00:03:15,617
Remember, a parameter passed into
FlyTo is a CameraPosition target.

64
00:03:15,617 --> 00:03:17,069
So when I said flyTo(SEATTLE),

65
00:03:17,069 --> 00:03:20,270
I'm just flying to the camera
position that I called Seattle.

66
00:03:20,270 --> 00:03:24,050
I'm taking 10 seconds to do it,
which is the 10,000 milliseconds here.

67
00:03:24,050 --> 00:03:26,503
And then I'm just doing a null, so
when the animation is complete,

68
00:03:26,503 --> 00:03:28,645
I'm not going to trigger anything.

69
00:03:28,645 --> 00:03:31,755
One thing to note with Android apps
that use maps, as you saw when I demoed

70
00:03:31,755 --> 00:03:36,195
earlier, as the camera flies across the
map, it doesn't slow down by downloading

71
00:03:36,195 --> 00:03:39,875
the tiles in between the cities,
so sometimes you'll see emptiness

72
00:03:39,875 --> 00:03:43,460
when I manually panned around the map
in the areas between the cities.

73
00:03:43,460 --> 00:03:46,110
Further transitions after
that looked a lot cleaner

74
00:03:46,110 --> 00:03:48,480
because we were seeing
places in between.

75
00:03:48,480 --> 00:03:52,209
Because while I manually panned,
I was caching those tiles.

76
00:03:52,209 --> 00:03:54,573
Now that we have a good feeling for
how maps work and

77
00:03:54,573 --> 00:03:57,670
we've seen how we build cameras
to determine how we view the map,

78
00:03:57,670 --> 00:04:00,400
let's switch gears a little bit and
talk about markers.
