1
00:00:00,100 --> 00:00:03,300
Here's our basic programmable pipeline, with a vertex shader and a fragment

2
00:00:03,300 --> 00:00:07,978
shader. Once upon a time both these stages were not programmable. They were

3
00:00:07,978 --> 00:00:12,219
handled by what was called the Fixed Function Pipeline. Transistors in the GPU

4
00:00:12,219 --> 00:00:16,360
were specifically dedicated to the Transform and Rasterization processes. The

5
00:00:16,360 --> 00:00:19,368
programmer basically set a bunch of switches and values that controlled the

6
00:00:19,368 --> 00:00:24,091
flow of data. However, there's no real programmability involved. The Nintendo

7
00:00:24,091 --> 00:00:27,868
Wii was about the last to use this type of architecture. In 2002, GPUs started

8
00:00:27,868 --> 00:00:33,080
to appear that included vertex and fragment shaders. A shader is truly a

9
00:00:33,080 --> 00:00:37,360
programmable piece of the pipeline. In other words, you actually send little,

10
00:00:37,360 --> 00:00:41,826
or sometimes large, shader programs to each of these units. These programs are

11
00:00:41,826 --> 00:00:45,873
written in a C-like language, if you know what C or C++ looks like. Up to this

12
00:00:45,873 --> 00:00:50,947
point, we've been having Three.js do the programming for us. When we create a

13
00:00:50,947 --> 00:00:54,959
material, Three.js actually creates two small programs, one each for the vertex

14
00:00:54,959 --> 00:00:59,225
and fragment shaders. When the object with that material is to be displayed,

15
00:00:59,225 --> 00:01:03,485
these shaders are loaded with their programs. The triangles are then sent down

16
00:01:03,485 --> 00:01:05,790
the pipeline, and the programs are executed.
