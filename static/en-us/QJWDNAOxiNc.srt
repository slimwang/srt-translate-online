1
00:00:00,430 --> 00:00:02,300
So let me take you through an example now and

2
00:00:02,300 --> 00:00:04,710
in this example here you've got a picture.

3
00:00:04,710 --> 00:00:06,600
I'm going to assume a few things to make it easy.

4
00:00:06,600 --> 00:00:07,180
The first thing I'm

5
00:00:07,180 --> 00:00:10,520
going to assume is that we've got these little edge elements, these gradients.

6
00:00:10,520 --> 00:00:13,370
And I'm going to assume that we know which way is inside to the edge and

7
00:00:13,370 --> 00:00:14,830
which way is outside.

8
00:00:14,830 --> 00:00:17,730
It just makes it easier for the image for indexing.

9
00:00:17,730 --> 00:00:22,810
So, let's start by looking at all of those bottom horizontal edges that

10
00:00:22,810 --> 00:00:24,960
are pointing inwards, all right?

11
00:00:24,960 --> 00:00:28,050
So they all have the same theta, all right?

12
00:00:28,050 --> 00:00:31,820
Now, as we go across all those different edge elements,

13
00:00:31,820 --> 00:00:34,790
they each have different displacements to the center.

14
00:00:34,790 --> 00:00:36,700
So, all of those red lines,

15
00:00:36,700 --> 00:00:42,440
those are all the displacements associated with being a bottom horizontal edge.

16
00:00:42,440 --> 00:00:45,140
So if I found a little bottom bottom horizontal edge,

17
00:00:45,140 --> 00:00:48,250
I'd have to vote with all of those displacements.

18
00:00:48,250 --> 00:00:51,210
So what that would look like at run time is as follows.

19
00:00:51,210 --> 00:00:53,420
So here I have a little edge element.

20
00:00:53,420 --> 00:00:55,170
And it's voting for

21
00:00:55,170 --> 00:01:00,260
all these different displacements, which all would lie along that line.

22
00:01:00,260 --> 00:01:02,820
Where did all those different displacements come from?

23
00:01:02,820 --> 00:01:03,770
They're all here.

24
00:01:03,770 --> 00:01:07,540
These were the displacements for every possible bottom edge line, so

25
00:01:07,540 --> 00:01:12,110
everyone of those vectors have to be voted by each bottom element.

26
00:01:12,110 --> 00:01:15,350
So that's just one element but, of course, there's the next element.

27
00:01:15,350 --> 00:01:18,020
It has to vote the same way, it comes from the same theta.

28
00:01:18,020 --> 00:01:21,260
And another one, and another one, and another one, and

29
00:01:21,260 --> 00:01:26,690
eventually this big long line of possible offsets are voted for.

30
00:01:26,690 --> 00:01:29,640
Now, I didn't indicate here, the one in the middle is actually voted for

31
00:01:29,640 --> 00:01:33,030
more often so maybe you can think of the middle as being thicker than the ends.

32
00:01:33,030 --> 00:01:37,230
But it is that this line has the votes for, for where the center might be.

33
00:01:37,230 --> 00:01:39,920
We don't know where along the center it is yet.

34
00:01:39,920 --> 00:01:43,281
Well, now what we can do is we can take a look at

35
00:01:43,281 --> 00:01:45,940
the downward pointing diagonals.

36
00:01:45,940 --> 00:01:50,696
And you'll notice that for the downward pointing diagonals, it can be

37
00:01:50,696 --> 00:01:56,016
anywhere from being straight above it all the way over to the right of it, okay?

38
00:01:56,016 --> 00:01:59,890
So it can be straight above it or all the way over to the right.

39
00:01:59,890 --> 00:02:05,040
So what this means is at run time, each little diagonal element has to

40
00:02:05,040 --> 00:02:08,880
vote straight above it, all the way to all the way over to the right.

41
00:02:08,880 --> 00:02:11,410
And that's what's represented here for the first part.

42
00:02:11,410 --> 00:02:14,670
And here's another diagonal element, and another diagonal element, and

43
00:02:14,670 --> 00:02:16,060
another diagonal element.

44
00:02:16,060 --> 00:02:18,590
Until finally they've all stacked up.

45
00:02:18,590 --> 00:02:22,170
And you'll notice, already, I know where the object is.

46
00:02:22,170 --> 00:02:24,020
This is how this center was found.

47
00:02:24,020 --> 00:02:28,040
So the idea is that we're using this table of those offsets,

48
00:02:28,040 --> 00:02:30,740
indexed by the gradient, in order to vote for the center.
