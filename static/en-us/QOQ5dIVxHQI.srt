1
00:00:00,150 --> 00:00:02,840
Sorting is great, but
sometimes you need more than sorting.

2
00:00:02,840 --> 00:00:06,610
For example, what if you need to
section off pieces of data querying

3
00:00:06,610 --> 00:00:10,060
on all of the shopping lists which
were edited in the last 30 days only?

4
00:00:10,060 --> 00:00:13,455
Or only show shopping list items
bought by a specific user.

5
00:00:13,455 --> 00:00:15,020
When you need to make
this type of query,

6
00:00:15,020 --> 00:00:17,875
we use what are called range queries and
Firebase.

7
00:00:17,875 --> 00:00:20,705
To use these,
we take one of three methods.

8
00:00:20,705 --> 00:00:23,139
startAt(), endAt() and equalTo(),

9
00:00:23,139 --> 00:00:26,975
which allow you to grab only
a specific section of our data.

10
00:00:26,975 --> 00:00:30,808
startAt() will create a query
at a specific starting point.

11
00:00:30,808 --> 00:00:33,770
Only child nodes that exactly
match the starting point and or

12
00:00:33,770 --> 00:00:35,485
greater will be returned.

13
00:00:35,485 --> 00:00:38,600
endAt() is similar child node
they have a value less than or

14
00:00:38,600 --> 00:00:40,540
equal to the given
value will be returned.

15
00:00:41,770 --> 00:00:43,750
Going back to the desserts example,

16
00:00:43,750 --> 00:00:47,820
maybe we only want desserts
that are exactly 322 calories.

17
00:00:47,820 --> 00:00:48,915
So, we would use this statement.

18
00:00:48,915 --> 00:00:54,350
equalTo() will filter range queries
based on exact matches, either returning

19
00:00:54,350 --> 00:00:59,390
child nodes which match a specified
value or a specific key value pair.

20
00:00:59,390 --> 00:01:03,680
Maybe we were on a diet and only want
desserts that are 200 calories or less.

21
00:01:03,680 --> 00:01:05,345
In this case,
we would use the following.

22
00:01:09,300 --> 00:01:10,890
Let's say we're trying to
eat everything we can.

23
00:01:10,890 --> 00:01:13,190
Maybe we're training for a marathon.

24
00:01:13,190 --> 00:01:15,940
So, let's say we're not interested
in any low fat desserts.

25
00:01:15,940 --> 00:01:18,709
We only want desserts with
358 calories or more.

26
00:01:20,500 --> 00:01:23,738
Unlike sort by criteria,
you can combine startAt() and

27
00:01:23,738 --> 00:01:27,440
endAt(), and you will get what
is in between these values.

28
00:01:27,440 --> 00:01:30,860
For example, if we had very
strict dietary requirements,

29
00:01:30,860 --> 00:01:33,240
perhaps we only want to eat
dessert between 200 and

30
00:01:33,240 --> 00:01:35,880
400 calories,
we could use the following code.

31
00:01:35,880 --> 00:01:39,240
Notice how in all cases we
start with a query by child.

32
00:01:39,240 --> 00:01:42,570
This allows us to specify what
exactly we're looking for

33
00:01:42,570 --> 00:01:45,240
when we say startAt() or endAt().

34
00:01:45,240 --> 00:01:49,230
And startAt() and endAt() our inclusive.

35
00:01:49,230 --> 00:01:51,450
So now that you are familiar
with these range queries,

36
00:01:51,450 --> 00:01:52,670
let's practice what you've learned.

37
00:01:53,780 --> 00:01:56,920
These questions are about the shopping
list plus, plus database.

38
00:01:56,920 --> 00:01:59,740
Don't forget that you have to
specify query by child and

39
00:01:59,740 --> 00:02:01,730
which child you are querying.

40
00:02:01,730 --> 00:02:05,570
How do you get all the users who joined
after September 30, 2015 at midnight?

41
00:02:05,570 --> 00:02:08,380
How do you get the items
in a shopping list

42
00:02:08,380 --> 00:02:12,870
bought by a user with the email
address Laila@gmail.com?

43
00:02:12,870 --> 00:02:16,900
If shopping list items include
a property price, how would you find all

44
00:02:16,900 --> 00:02:21,139
items with a price equal to, or
greater than to, and less than $10?
