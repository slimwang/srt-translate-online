1
00:00:00,000 --> 00:00:02,700
The general way to calculate this is using logarithm.

2
00:00:02,700 --> 00:00:06,310
So you say 2 to the power of N, for example, is smaller than 1 billion,

3
00:00:06,310 --> 00:00:11,880
which means that N must be smaller than the logarithm base 2 of 1 billion,

4
00:00:11,880 --> 00:00:16,480
so N must be smaller than or equal to 29, which is exactly what we're going to put here.

5
00:00:16,480 --> 00:00:19,520
And of course you can do the same calculation for the other ones as well.

6
00:00:19,520 --> 00:00:24,730
So you get here the maximum problem size we can handle would be N equals 217.

7
00:00:24,730 --> 00:00:29,290
Here it's 119, 108, and 51.

8
00:00:29,290 --> 00:00:34,290
The interesting thing to see here I think is that you see how even small changes

9
00:00:34,290 --> 00:00:36,800
in the base of the exponent can make a difference.

10
00:00:36,800 --> 00:00:42,490
So here the change is really small, from 1.21 down to 1.18,

11
00:00:42,490 --> 00:00:45,750
and already we could handle a problem size of 10 more.

12
00:00:45,750 --> 00:00:48,920
And of course this also shows you that the problem size that you can handle,

13
00:00:48,920 --> 00:00:53,190
at least in a worst case scenario, is about 4 times as much as you could handle

14
00:00:53,190 --> 00:00:54,900
if you used a normal search tree.

15
00:00:54,900 --> 00:00:57,720
And of course, if you could find a really, really good search tree--

16
00:00:57,720 --> 00:01:01,740
and there are some problems for which you can come close to 1.1, actually--

17
00:01:01,740 --> 00:01:05,280
then you can handle problem sizes that are almost twice as much as this one over here.

18
00:01:05,280 --> 00:01:07,350
So it's really a significant improvement.

19
00:01:07,350 --> 00:01:12,350
It's not dramatic in the way that now we could solve instance sizes of thousands of vertices

20
00:01:12,350 --> 00:01:16,080
or thousands of variables, but it's a significant improvement.

21
00:01:16,080 --> 99:59:59,999
But it's a significant improvement through using sophisticated algorithms.
