1
00:00:00,000 --> 00:00:03,000
Here is a diagram representing our counter mode hash function.

2
00:00:03,000 --> 00:00:05,000
The counter is encrypted using the key,

3
00:00:05,000 --> 00:00:09,000
which is then XORed with the message to produce the first cipher block.

4
00:00:09,000 --> 00:00:12,000
And this is repeated for the second cipher block, et cetera.

5
00:00:12,000 --> 00:00:16,000
Then each cipher block is XORed together to produce our hash value.

6
00:00:16,000 --> 00:00:19,000
One way of creating a collision is to swap 2 of the cipher blocks.

7
00:00:19,000 --> 00:00:22,000
For example, the first 2.

8
00:00:22,000 --> 00:00:24,000
We can write this new hash as hash prime,

9
00:00:24,000 --> 00:00:27,000
and it should be obvious that hash = hash prime.

10
00:00:27,000 --> 00:00:29,000
Now let's look back at our diagram,

11
00:00:29,000 --> 00:00:32,000
and for notation, let's refer to the value

12
00:00:32,000 --> 00:00:37,000
coming out of the encryption as E0 and E1.

13
00:00:37,000 --> 00:00:40,000
Then we have M0 XORed with E0 = C0

14
00:00:40,000 --> 00:00:44,000
and M1 XORed with E1 = C1.

15
00:00:44,000 --> 00:00:48,000
And we want to find M0 prime and M1 prime

16
00:00:48,000 --> 00:00:50,000
such that when XORed with E0 you get C1,

17
00:00:50,000 --> 00:00:53,000
and when XORed with E1, you get C0.

18
00:00:53,000 --> 00:00:59,000
We can calculate M0 prime by first calculating E0 by reversing out the XOR

19
00:00:59,000 --> 00:01:04,000
and then XORing E0 with C1 to get what we want.

20
00:01:04,000 --> 00:01:07,000
So, in the code, here is a swap blocks routine

21
00:01:07,000 --> 00:01:10,000
that calculates the 2 message blocks needed by first calculating

22
00:01:10,000 --> 00:01:13,000
the eblock by reversing out the XOR

23
00:01:13,000 --> 00:01:17,000
and then applying the XOR on the eblock with this swapped cipher block

24
00:01:17,000 --> 00:01:19,000
and then returning both of them.

25
00:01:19,000 --> 00:01:22,000
Here we get the inputs used for the cipher, which we then calculate.

26
00:01:22,000 --> 00:01:25,000
These next lines grab the 4 blocks we need,

27
00:01:25,000 --> 00:01:27,000
and then we calculate the new message blocks,

28
00:01:27,000 --> 00:01:30,000
which then get replaced into the message, which is returned.

29
00:01:30,000 --> 99:59:59,999
And then to test this, we call test, and it worked.
