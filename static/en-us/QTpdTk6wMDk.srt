1
00:00:00,510 --> 00:00:05,620
So, the idea is to put theory and practice together in the design cycle. Theory

2
00:00:05,620 --> 00:00:09,290
is good for expressing abstract specifications of

3
00:00:09,290 --> 00:00:12,870
the system at the level of individual components.

4
00:00:12,870 --> 00:00:14,660
For this part of the design cycle,

5
00:00:14,660 --> 00:00:19,040
namely specification of what we want to build.

6
00:00:19,040 --> 00:00:23,150
A theoretical framework called IO automator is used

7
00:00:23,150 --> 00:00:25,790
and it's syntax is very similar to C

8
00:00:25,790 --> 00:00:32,049
like syntax. So, in terms of writing the specification, it's very intuitive

9
00:00:32,049 --> 00:00:38,190
in how we go about using IO automator to develop the system requirements and

10
00:00:38,190 --> 00:00:41,160
specify them using the syntax provided

11
00:00:41,160 --> 00:00:43,480
by our automator. And more importantly, the

12
00:00:43,480 --> 00:00:47,040
composition operator that's available in IO

13
00:00:47,040 --> 00:00:51,140
automator allows expressing specification of an entire

14
00:00:51,140 --> 00:00:55,730
subsystem that we want to build. Example, if you want to build a TCPIP protocol

15
00:00:55,730 --> 00:00:59,610
stack, then all of the functional relationship

16
00:00:59,610 --> 00:01:02,570
between the components of the subsystem can

17
00:01:02,570 --> 00:01:06,935
be expressed using the powerful specification language,

18
00:01:06,935 --> 00:01:10,540
primitives, available in IO automator. The second

19
00:01:10,540 --> 00:01:16,730
part of the design cycle is converting the specification in IO automator to code

20
00:01:16,730 --> 00:01:18,950
that can be actually executed. And for

21
00:01:18,950 --> 00:01:22,220
this purpose, the programming language that is used

22
00:01:22,220 --> 00:01:24,020
is a high level programming language called

23
00:01:24,020 --> 00:01:29,200
OCaml. Stands for object oriented categorical abstract machine

24
00:01:29,200 --> 00:01:32,180
language, and it has several properties that

25
00:01:32,180 --> 00:01:35,120
make OCaml a very good candidate for doing

26
00:01:35,120 --> 00:01:38,390
component based design as we are proposing to

27
00:01:38,390 --> 00:01:41,840
do in this lesson. Number one, the formal

28
00:01:41,840 --> 00:01:45,390
semantics that is available in OCaml is

29
00:01:45,390 --> 00:01:48,340
a nice compliment to the specification that we've

30
00:01:48,340 --> 00:01:51,942
done using IO automator. That's number one

31
00:01:51,942 --> 00:01:54,329
reason why OCaml is a good vehicle for

32
00:01:54,329 --> 00:01:58,680
converting the specification into code. The second

33
00:01:58,680 --> 00:02:01,370
nice property that it has is it's object

34
00:02:01,370 --> 00:02:04,840
oriented. Being an object-oriented language, it has

35
00:02:04,840 --> 00:02:07,440
some very nice properties such as no side-effects

36
00:02:07,440 --> 00:02:09,720
for things that you do in the program.

37
00:02:09,720 --> 00:02:12,000
And in fact, this comes from the fact that

38
00:02:12,000 --> 00:02:16,040
OCaml is a functional programming language, so some

39
00:02:16,040 --> 00:02:19,560
of the properties of the functional programming language, including

40
00:02:19,560 --> 00:02:21,800
no side effects and so on, make this

41
00:02:21,800 --> 00:02:25,420
an appropriate vehicle to convert the specification into code.

42
00:02:25,420 --> 00:02:29,910
And third, perhaps the most important characteristic from an

43
00:02:29,910 --> 00:02:32,510
operating system designer's point of view, is that the

44
00:02:32,510 --> 00:02:36,460
code that you can generate with OCaml is

45
00:02:36,460 --> 00:02:41,030
as efficient as C code. This is super important

46
00:02:41,030 --> 00:02:43,830
when you're developing operating systems. Because you care about

47
00:02:43,830 --> 00:02:47,590
performance. Object oriented is good. Formal semantics is good.

48
00:02:47,590 --> 00:02:50,150
But you also want to know that you get

49
00:02:50,150 --> 00:02:52,270
good performance out of it. And yes, you can

50
00:02:52,270 --> 00:02:54,870
get pretty good performance out of OCaml. Because, the

51
00:02:54,870 --> 00:02:57,720
object code that we can generate from the OCaml

52
00:02:57,720 --> 00:03:01,340
compiler is very efficient, similar to C. All

53
00:03:01,340 --> 00:03:04,730
of these make OCaml a good vehicle for

54
00:03:04,730 --> 00:03:07,540
going from specification to actual code. At this

55
00:03:07,540 --> 00:03:12,110
point, what we have is an unoptimized code that

56
00:03:12,110 --> 00:03:15,500
faithfully implements the specification that we started out

57
00:03:15,500 --> 00:03:17,770
with. And remember that we are doing component-based

58
00:03:17,770 --> 00:03:20,650
design, so it's going to be highly unoptimized

59
00:03:20,650 --> 00:03:22,870
because there is a lot of craft that goes

60
00:03:22,870 --> 00:03:25,640
between these components that you put together, like

61
00:03:25,640 --> 00:03:27,660
level blocks. So we have to optimize it

62
00:03:27,660 --> 00:03:29,840
before it is ready for prime time. Now,

63
00:03:29,840 --> 00:03:32,910
how do we do that? Well, once again, return

64
00:03:32,910 --> 00:03:37,920
to theory. NuPrl is a theoretical framework for optimization of

65
00:03:37,920 --> 00:03:43,220
OCaml code. The input to this framework is the OCaml code and the

66
00:03:43,220 --> 00:03:48,414
output that you get is an optimized version of a functionally

67
00:03:48,414 --> 00:03:51,340
equivalent OCaml code. So that's what this optimization

68
00:03:51,340 --> 00:03:55,530
framework gives you, takes the input, unoptimized OCaml code

69
00:03:55,530 --> 00:03:59,430
and produces optimized Ocaml code. And the optimized

70
00:03:59,430 --> 00:04:02,790
OCaml code can be theoretically verified to be functionally

71
00:04:02,790 --> 00:04:06,000
equivalent to the unoptimized input OCaml code. That's

72
00:04:06,000 --> 00:04:09,180
the beauty of this theoretical framework. And the way

73
00:04:09,180 --> 00:04:10,790
it does that is a little bit beyond

74
00:04:10,790 --> 00:04:13,920
the scope of this course. It uses a theorem-proving

75
00:04:13,920 --> 00:04:19,560
framework in order to do this and verify through theorem proving that

76
00:04:19,560 --> 00:04:24,490
the resulting code that is generated is equivalent to the input

77
00:04:24,490 --> 00:04:28,790
code which is unoptimized. I've given you the big picture of

78
00:04:28,790 --> 00:04:31,435
the design cycle, now it is time to go into the weeds
