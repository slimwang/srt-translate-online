1
00:00:00,150 --> 00:00:02,050
To make the linter most effective,

2
00:00:02,050 --> 00:00:04,810
you want to have it run at
the earliest possible time.

3
00:00:04,810 --> 00:00:06,950
And the earliest possible time is,
in your case,

4
00:00:06,950 --> 00:00:09,995
after you press the key on your
keyboard, making a change in Sublime.

5
00:00:09,995 --> 00:00:14,010
In order for this to work, you'll
need to install ESlint first via npm.

6
00:00:15,020 --> 00:00:17,660
Run npm install eslint in the terminal,
and

7
00:00:17,660 --> 00:00:20,150
don't forget the g option
to install it globally.

8
00:00:22,150 --> 00:00:23,490
Great.

9
00:00:23,490 --> 00:00:25,360
Now that you've got
eslint on your system,

10
00:00:25,360 --> 00:00:27,000
you need two different Sublime plugins.

11
00:00:28,030 --> 00:00:30,402
SublimeLinter is a framework
around linting, but

12
00:00:30,402 --> 00:00:32,673
doesn't come with specific
language linters.

13
00:00:32,673 --> 00:00:36,319
And SublimeLinter-contrib-eslint
is the wrapper code that connects

14
00:00:36,319 --> 00:00:38,190
ESLint to SublimeLinter.

15
00:00:38,190 --> 00:00:41,730
When you're done, restart your
editor and come back to this video.

16
00:00:41,730 --> 00:00:44,570
Now look at the main.js
file in the js folder.

17
00:00:44,570 --> 00:00:46,780
Notice that the linter
doesn't do anything yet.

18
00:00:46,780 --> 00:00:47,570
You might be forgiven for

19
00:00:47,570 --> 00:00:49,860
believing that something didn't
work during installation.

20
00:00:49,860 --> 00:00:51,170
But all is fine.

21
00:00:51,170 --> 00:00:52,300
It's just that ESLlint,

22
00:00:52,300 --> 00:00:56,000
by default, doesn't do anything
unless you configure it.

23
00:00:56,000 --> 00:00:59,010
Luckily it's simple to generate
a basic configuration.

24
00:00:59,010 --> 00:00:59,950
Switch back to your terminal,

25
00:00:59,950 --> 00:01:04,450
where you should still be in a sample
directory, and run eslint in it.

26
00:01:04,450 --> 00:01:07,480
This will bring up this nifty prompt
that asks you a few questions,

27
00:01:07,480 --> 00:01:09,960
then generates an eslintrc file for you.

28
00:01:11,700 --> 00:01:13,550
If you now open that file in Sublime,

29
00:01:13,550 --> 00:01:16,110
you'll notice a few style rules
from the prompts you just answered.

30
00:01:16,110 --> 00:01:17,890
But the key is the extends
block at the bottom.

31
00:01:19,040 --> 00:01:21,690
This tells eslint to run with
its recommended set, and

32
00:01:21,690 --> 00:01:23,800
anything you add on top will
overwrite or add to it.

33
00:01:24,890 --> 00:01:26,450
That's super useful as a starting point.

34
00:01:27,770 --> 00:01:29,450
Here's eslint in action.

35
00:01:29,450 --> 00:01:32,260
See the foo variable, the red dot
next to the line numbers, and

36
00:01:32,260 --> 00:01:34,740
how Sublime highlighted it
with a red border all around.

37
00:01:35,790 --> 00:01:38,210
To know which error occurred,
just click on on foo and

38
00:01:38,210 --> 00:01:39,940
look at status bar at
the bottom of Sublime.

39
00:01:40,980 --> 00:01:44,040
In this simple example,
it's obvious that we're missing a var.

40
00:01:44,040 --> 00:01:44,913
Let's fix it.

41
00:01:48,175 --> 00:01:52,490
But now foo is still red,
oh but the status changed.

42
00:01:52,490 --> 00:01:56,290
We actually fixed a previous error and
are now looking at a new one.

43
00:01:56,290 --> 00:01:58,308
Foo is now defined but
never used in your code.

44
00:01:58,308 --> 00:02:00,290
So it's fair that ESLint
complains about it.

45
00:02:01,790 --> 00:02:04,240
Let's add a return statement to
actually use foo in some way.

46
00:02:04,240 --> 00:02:07,670
Here we go, just as I stop typing,
the red vanished and

47
00:02:07,670 --> 00:02:09,544
thus, all errors went away.

48
00:02:11,564 --> 00:02:13,734
If you open your gulpfile.js, though,

49
00:02:13,734 --> 00:02:16,338
you notice a lot of red
around the require blocks,

50
00:02:16,338 --> 00:02:20,070
that's because ESLint thinks
that files run in the browser.

51
00:02:20,070 --> 00:02:22,430
And the browser has no require function.

52
00:02:22,430 --> 00:02:25,256
We only want ESLint to turn off
no JS warnings in this file,

53
00:02:25,256 --> 00:02:26,767
and luckily, you can do that.

54
00:02:30,111 --> 00:02:33,263
This special type of comment works
just like a configuration, but

55
00:02:33,263 --> 00:02:35,490
it's local to the current file.

56
00:02:35,490 --> 00:02:38,510
Before we move on to learn how to
integrate ESLint into your build,

57
00:02:38,510 --> 00:02:41,430
keep in mind that the amazing
SublimeLinter plug in also supports

58
00:02:41,430 --> 00:02:43,220
dozens of other linters.

59
00:02:43,220 --> 00:02:45,140
So if you'd like your CCS, HTML, or

60
00:02:45,140 --> 00:02:48,050
even PHP lintered,
there's a plug in for that.

61
00:02:48,050 --> 00:02:50,700
Check the notes for links on what
else you can do with SublimeLinter.
