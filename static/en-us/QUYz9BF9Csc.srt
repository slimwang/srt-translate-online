1
00:00:00,300 --> 00:00:03,690
Now let's see what the program's
view of memory is.

2
00:00:03,690 --> 00:00:06,880
The program sees a huge
amount of memory, and

3
00:00:06,880 --> 00:00:12,406
usually some contiguous regions of this
memory are actually used by the program.

4
00:00:12,406 --> 00:00:17,818
And there is an enormous region in the
middle, between the heap and the stack,

5
00:00:17,818 --> 00:00:22,908
that the program will never access
unless the heap grows that way.

6
00:00:22,908 --> 00:00:28,310
But the heap is usually small relative
to how much space we have here,

7
00:00:28,310 --> 00:00:30,840
because it's a huge,
huge amount of memory.

8
00:00:32,049 --> 00:00:35,930
So what happens is the program
thinks it has a lot of memory, but

9
00:00:35,930 --> 00:00:40,670
in reality most of that memory,
it will never access.

10
00:00:40,670 --> 00:00:43,130
And this is what we call virtual memory.

11
00:00:43,130 --> 00:00:46,430
So the program virtually
has a lot of memory, but

12
00:00:46,430 --> 00:00:49,370
in practice there isn't
that much memory.

13
00:00:49,370 --> 00:00:54,270
Another program has its
own virtual memory.

14
00:00:54,270 --> 00:00:56,530
Let's say it's a small program.

15
00:00:56,530 --> 00:01:00,120
So it's using less memory,
and less for the stack, so

16
00:01:00,120 --> 00:01:02,920
it has more memory here
that it's not really using.

17
00:01:04,050 --> 00:01:07,330
But the idea that the program
has about this memory

18
00:01:07,330 --> 00:01:10,090
is that it can always use more.

19
00:01:10,090 --> 00:01:14,590
So this is the virtual memory of one
program, this is the virtual memory

20
00:01:14,590 --> 00:01:18,680
of another program,
they might be running at the same time.

21
00:01:18,680 --> 00:01:21,420
Let's say this is our physical memory.

22
00:01:21,420 --> 00:01:24,030
We need to figue out
what happens when this

23
00:01:24,030 --> 00:01:28,300
program generates an address that
should access this memory location.

24
00:01:29,340 --> 00:01:33,600
How do we find where in
here do we actually go?

25
00:01:33,600 --> 00:01:39,200
And if this program accesses a memory
location with the same address,

26
00:01:39,200 --> 00:01:41,660
how do we figure out where does it go?

27
00:01:42,740 --> 00:01:46,660
It might go to a different
place in the physical memory.

28
00:01:46,660 --> 00:01:50,030
For example, when these programs
have nothing to do with each other.

29
00:01:50,030 --> 00:01:53,890
It might go to the same place
in the physical memory.

30
00:01:53,890 --> 00:01:56,120
For example,
if these programs are sharing data.

31
00:01:57,340 --> 00:02:02,170
In fact, data sharing among
programs is not constrained so

32
00:02:02,170 --> 00:02:05,860
that you have to put the data
in the same virtual address.

33
00:02:05,860 --> 00:02:11,200
You could easily allocate this here,
and then let this program share it,

34
00:02:12,200 --> 00:02:14,850
but as far as this program
is concerned it's here.

35
00:02:15,920 --> 00:02:19,540
It still needs to map
to the same location.

36
00:02:19,540 --> 00:02:22,670
So how do we reconcile these
different possibilities?
