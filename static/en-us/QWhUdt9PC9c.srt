1
00:00:00,000 --> 00:00:02,000
At the bottom of each homework problem there's a note

2
00:00:02,000 --> 00:00:05,000
encouraging students to write their own test cases.

3
00:00:05,000 --> 00:00:07,000
How does one write good test cases?

4
00:00:08,000 --> 00:00:11,000
That's a surprisingly difficult question.

5
00:00:11,000 --> 00:00:16,000
It turns out that there is an entire area of software engineering practice and research

6
00:00:16,000 --> 00:00:19,000
devoted to testing.

7
00:00:19,000 --> 00:00:23,000
Huge amounts of money are spent each year on software testing.

8
00:00:23,000 --> 00:00:26,000
It's an amazingly expensive prospect,

9
00:00:26,000 --> 00:00:31,000
and thus, coming up with good test cases is really both an art and a science.

10
00:00:31,000 --> 00:00:37,000
Formally, the basic idea behind testing is to make sure that a program implementation

11
00:00:37,000 --> 00:00:39,000
adheres to its specification--

12
00:00:39,000 --> 00:00:43,000
that is, that what you've actually written down does what we think it should do

13
00:00:43,000 --> 00:00:45,000
or what you were required to do.

14
00:00:45,000 --> 00:00:49,000
So if the goal is to make a procedure that finds the biggest element in an array,

15
00:00:49,000 --> 00:00:55,000
good test cases or a good test suite would give us confidence that you've done just that.

16
00:00:55,000 --> 00:00:59,000
Now, unfortunately, for interesting programs

17
00:00:59,000 --> 00:01:03,000
there are an infinite number of possible test inputs.

18
00:01:03,000 --> 00:01:07,000
For example, even if you're just trying to write a program to sum the elements of a list,

19
00:01:07,000 --> 00:01:12,000
there are an infinite number of possible lists of numbers that you could pass in as input.

20
00:01:12,000 --> 00:01:16,000
We don't have time to run an infinite number of test cases,

21
00:01:16,000 --> 00:01:22,000
so often we write just a few and hope that they're indicative in some sense.

22
00:01:22,000 --> 00:01:27,000
Or maybe we hope that they would be very powerful and help us detect errors

23
00:01:27,000 --> 00:01:30,000
if there are errors or bugs in our programs.

24
00:01:30,000 --> 00:01:34,000
So one goal for writing a good test suite for making a bunch of test cases is to say,

25
00:01:34,000 --> 00:01:40,000
"Oh, if I run all of these test cases, I'll have confidence that there are no bugs."

26
00:01:40,000 --> 00:01:43,000
That's easier said than done. How do we actually do it?

27
00:01:43,000 --> 00:01:47,000
One hint that I would give is to think about corner cases,

28
00:01:47,000 --> 00:01:49,000
to play a little game in your mind.

29
00:01:49,000 --> 00:01:52,000
Imagine that someone else wrote the program and they're trying to be deceptive,

30
00:01:52,000 --> 00:01:56,000
they're trying to sneak it past you and find mistakes.

31
00:01:56,000 --> 00:01:59,000
It turns out that the human brain is actually very good

32
00:01:59,000 --> 00:02:01,000
in the same way that we're very good at vision

33
00:02:01,000 --> 00:02:07,000
at finding or detecting cheating or deception when we think someone is working against us.

34
00:02:07,000 --> 00:02:10,000
Take a step back if you can from the code, pretend it's not yours,

35
00:02:10,000 --> 00:02:13,000
take another look, a fresh look at the specification,

36
00:02:13,000 --> 00:02:16,000
the statement of the problem, and see what you might check.

37
00:02:16,000 --> 00:02:20,000
For example, for numbers be sure to hit all the corner cases.

38
00:02:20,000 --> 00:02:23,000
Try 0, try some negative numbers, try some positive numbers,

39
00:02:23,000 --> 00:02:26,000
try some primes, try some composites.

40
00:02:26,000 --> 00:02:29,000
For lists be sure to try the empty list, all the numbers in order,

41
00:02:29,000 --> 00:02:33,000
all the numbers in reverse order, all the numbers in a random order.

42
00:02:33,000 --> 00:02:38,000
If maybe the inputs are grammars or strings, try some short strings

43
00:02:38,000 --> 00:02:41,000
and some long strings, some grammars with and without recursion.

44
00:02:41,000 --> 00:02:44,000
This is really more of an art than a science,

45
00:02:44,000 --> 00:02:48,000
although you may be interested to learn that there are a bunch of great research efforts

46
00:02:48,000 --> 00:02:51,000
in automatically constructing test cases.

47
00:02:51,000 --> 00:02:53,000
The basic idea is this:

48
00:02:53,000 --> 00:02:57,000
You give me your program, and I'm going to write another program that stares at it

49
00:02:57,000 --> 00:02:59,000
and notices all the loops and all of the if statements,

50
00:02:59,000 --> 00:03:02,000
and I'm going to try to generate inputs, maybe at random,

51
00:03:02,000 --> 00:03:06,000
that will cause you to take all the possible branches in your program.

52
00:03:06,000 --> 00:03:09,000
So if you have an if statement that says if X is less than 10,

53
00:03:09,000 --> 00:03:13,000
I will generate 1 input where X is 9 and another where X is 11

54
00:03:13,000 --> 00:03:15,000
to force you to go down both branches.

55
00:03:15,000 --> 00:03:17,000
That way if there's something wrong on one of the branches,

56
00:03:17,000 --> 00:03:20,000
like you use a variable that hasn't been previously initialized,

57
00:03:20,000 --> 00:03:22,000
you're more likely to find it.

58
00:03:22,000 --> 00:03:25,000
And that field is known as automated test input generation,

59
00:03:25,000 --> 00:03:27,000
and it is still in its infancy.

60
00:03:27,000 --> 00:03:29,000
We have not solved it in any way,

61
00:03:29,000 --> 00:03:32,000
and that means that there is room for creativity.

62
00:03:32,000 --> 00:03:37,000
One of the themes in this class is that whenever there are an infinite number of possibilities

63
00:03:37,000 --> 00:03:40,000
but that we can't use all of them, like in a grammar,

64
00:03:40,000 --> 00:03:42,000
there's room for creativity.

65
00:03:42,000 --> 00:03:46,000
We have to think of the best ones. We have to do design under constraint.

66
00:03:46,000 --> 00:03:49,000
And unfortunately, ultimately, that's the best answer I can give you here.

67
00:03:49,000 --> 00:03:54,000
Try to think adversarially. Think about all of the corner cases.

68
00:03:54,000 --> 00:03:57,000
Available now are some practice problems in which I go through--

69
00:03:57,000 --> 00:04:00,000
essentially I pose homework problems to myself and solve them.

70
00:04:00,000 --> 00:04:02,000
You can find them in the list of videos.

71
00:04:02,000 --> 00:04:05,000
And in each one I inject a bug, a defect, I make a mistake,

72
00:04:05,000 --> 00:04:09,000
and I show how I would use testing and debugging, print statements and whatnot

73
00:04:09,000 --> 00:04:11,000
to narrow it down.

74
00:04:11,000 --> 00:04:14,000
If you're curious or you want a little more practice with testing and debugging,

75
00:04:14,000 --> 00:04:16,000
check those videos out.
