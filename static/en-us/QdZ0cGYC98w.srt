1
00:00:00,350 --> 00:00:02,360
But let's bump up a level, and talk about what

2
00:00:02,360 --> 00:00:05,220
you might want to use local storage to store. As

3
00:00:05,220 --> 00:00:07,810
I mentioned before, you probably want to use it to

4
00:00:07,810 --> 00:00:11,210
store user settings. But, any data that may be useful

5
00:00:11,210 --> 00:00:14,280
in a different session of your application, is probably useful

6
00:00:14,280 --> 00:00:18,320
to cache in Index DB or local storage. Finally, an

7
00:00:18,320 --> 00:00:21,190
important way to think of this, is any time you

8
00:00:21,190 --> 00:00:25,510
call a network API, you probably want to cache that response,

9
00:00:25,510 --> 00:00:27,620
in index DB or local storage, so you can

10
00:00:27,620 --> 00:00:30,680
get it back later. When you're offline, this can

11
00:00:30,680 --> 00:00:33,650
be particularly useful, because you already have the data

12
00:00:33,650 --> 00:00:37,540
from a previous session cached. In our conference app, for

13
00:00:37,540 --> 00:00:40,350
example. Each of the data models is being loaded

14
00:00:40,350 --> 00:00:43,240
from a JSON file on the server. In the original

15
00:00:43,240 --> 00:00:46,920
incarnation, these files are loaded every time they're needed,

16
00:00:46,920 --> 00:00:51,240
just relying on HTTP caching to minimize the network transfers.

17
00:00:51,240 --> 00:00:53,460
When I initially made an app cache for the conference app,

18
00:00:53,460 --> 00:00:56,680
I just app cached the JSON files, since of course they

19
00:00:56,680 --> 00:01:00,260
need to be there to run the application. However, it would

20
00:01:00,260 --> 00:01:03,390
make more sense to cache the data here in index database,

21
00:01:03,390 --> 00:01:06,990
for a couple of reasons, first, it can do index lookups

22
00:01:06,990 --> 00:01:09,020
so I can have a table for speakers a table for

23
00:01:09,020 --> 00:01:12,940
sessions have them easily cross reference items in each of them.

24
00:01:12,940 --> 00:01:16,330
And make it easier to search for an entry. Secondly, we can

25
00:01:16,330 --> 00:01:18,460
get the structured data directly out of the

26
00:01:18,460 --> 00:01:21,940
database rather than having to [INAUDIBLE] text file each

27
00:01:21,940 --> 00:01:25,280
time. We can then provide a synchronization system, that

28
00:01:25,280 --> 00:01:29,220
occasionally makes network requests, to refresh the data objects.

29
00:01:29,220 --> 00:01:32,060
Or updates on load or when an unrecognized speaker

30
00:01:32,060 --> 00:01:36,050
is found. One final reminder, though. Keep in mind

31
00:01:36,050 --> 00:01:38,230
as you design your application, that if the user

32
00:01:38,230 --> 00:01:41,510
clears their data from the machine, any data stored

33
00:01:41,510 --> 00:01:43,590
locally is going to be deleted. So,

34
00:01:43,590 --> 00:01:46,050
you shouldn't store the only copy of important

35
00:01:46,050 --> 00:01:50,870
data on the client. Local storage is really just intended to be used as a cache.
