1
00:00:00,000 --> 00:00:05,000
In order to trust the certificate, the client needs to validate that signature.

2
00:00:05,000 --> 00:00:08,000
To do that it needs to know the corresponding public key.

3
00:00:08,000 --> 00:00:12,000
It needs to know that public key that can be used to decrypt this message.

4
00:00:12,000 --> 00:00:17,000
If it decrypts it, it can check that this hash value is the same as what it computes

5
00:00:17,000 --> 00:00:20,000
when it hashes the certificate content itself.

6
00:00:20,000 --> 00:00:24,000
That is the real problem that public key infrastructure needs to solve.

7
00:00:24,000 --> 00:00:28,000
We need ways of distributing these public keys.

8
00:00:28,000 --> 00:00:32,000
That's called public key infrastructure, also known as PKI.

9
00:00:32,000 --> 00:00:35,000
We need a way to securely know the public key of the issuer.

10
00:00:35,000 --> 00:00:41,000
Once we know that we can use the certificate to learn the public key of the website we visited.

11
00:00:41,000 --> 00:00:43,000
How do we know that public key?

12
00:00:43,000 --> 00:00:46,000
Let's look back at the certificate that we got from Google.

13
00:00:46,000 --> 00:00:50,000
What we see at the top of it is the certificate hierarchy.

14
00:00:50,000 --> 00:00:53,000
We see that we have the google.com certificate, and that's the one we looked at

15
00:00:53,000 --> 00:00:56,000
and saw that it had this public key.

16
00:00:56,000 --> 00:01:00,000
That was signed by an issuer, and that issuer was Thawte, and we can click on that.

17
00:01:00,000 --> 00:01:06,000
Now we can see the certificate from Thawte that was used to sign this certificate.

18
00:01:06,000 --> 00:01:10,000
We have this certificate from Thawte. It was issued by VeriSign.

19
00:01:10,000 --> 00:01:14,000
We can check that it's valid. It's valid until 2014.

20
00:01:14,000 --> 00:01:17,000
That certificate also has a public key.

21
00:01:17,000 --> 00:01:22,000
It's got a subject identifying Thawte Consulting that generated the key.

22
00:01:22,000 --> 00:01:27,000
It's got a public key. It's also got an RSA key with PKCS.

23
00:01:27,000 --> 00:01:29,000
We can see that public key.

24
00:01:29,000 --> 00:01:34,000
That's the public key that we can use to validate the certificate that RSA provided.

25
00:01:34,000 --> 00:01:39,000
We can use that to decrypt the signed hash to validate that certificate.

26
00:01:39,000 --> 00:01:43,000
This would only be useful if we knew that we could trust this public key.

27
00:01:43,000 --> 00:01:45,000
How do we trust this public key?

28
00:01:45,000 --> 00:01:47,000
Well, it's got a certificate.

29
00:01:47,000 --> 00:01:51,000
It's certificate was issued by VeriSign.

30
00:01:51,000 --> 00:01:55,000
We can find VeriSign's public key to verify this one.

31
00:01:55,000 --> 00:01:59,000
That's the top of the certificate hierarchy here.

32
00:01:59,000 --> 00:02:03,000
We have a certificate from VeriSign, and if we look at that one--

33
00:02:03,000 --> 00:02:10,000
well, it came from VeriSign, and it's got a public key, also an RSA key and this one.

34
00:02:10,000 --> 00:02:15,000
You'll notice that all of them use 65,537 as their exponent.

35
00:02:15,000 --> 00:02:17,000
The moduli are all different.

36
00:02:17,000 --> 00:02:20,000
If they weren't different, that would mean they were all using the same public key,

37
00:02:20,000 --> 00:02:23,000
which would be a pretty serious problem.

38
00:02:23,000 --> 00:02:29,000
If we look at this key, we can see that it's expiration date is all the way up to 2028.

39
00:02:29,000 --> 00:02:33,000
It goes back to 1996. This is a very long-lived key.

40
00:02:33,000 --> 00:02:37,000
This is the key that is the root of our certificate hierarchy.

41
00:02:37,000 --> 00:02:41,000
Here's what we have. We have a certificate that was sent by Google.

42
00:02:41,000 --> 00:02:45,000
It was signed using a private key owned by Thawte Consulting.

43
00:02:45,000 --> 00:02:49,000
To validate that we need the corresponding public key, which we get from a certificate

44
00:02:49,000 --> 00:02:51,000
that was signed by VeriSign.

45
00:02:51,000 --> 00:02:54,000
To verify that, we need the public key for VeriSign.

46
00:02:54,000 --> 00:02:57,000
We have that from a certificate, which says it's VeriSign's.

47
00:02:57,000 --> 00:03:00,000
How can we trust VeriSign's certificate

48
00:03:00,000 --> 00:03:04,000
or do we have to keep going on forever?
