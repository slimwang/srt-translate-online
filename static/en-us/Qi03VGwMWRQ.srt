1
00:00:00,340 --> 00:00:03,757
So here's the answer. The first one is true. S

2
00:00:03,757 --> 00:00:07,250
index 3 is exactly the same thing as S index

3
00:00:07,250 --> 00:00:09,640
1 plus 1 plus 1 because 1 plus 1, plus

4
00:00:09,640 --> 00:00:12,410
1 evaluates to 3. These two have the same value.

5
00:00:12,410 --> 00:00:15,330
If S is a string with at least 4 characters

6
00:00:15,330 --> 00:00:18,940
in it, this will get the fourth character from S.

7
00:00:18,940 --> 00:00:21,420
If s has fewer than 4 characters, both of these

8
00:00:21,420 --> 00:00:25,650
will produce an error. The second choice, both of these actually

9
00:00:25,650 --> 00:00:27,860
also have the same value. S index 0 will get

10
00:00:27,860 --> 00:00:30,150
us the first character of S as long as S

11
00:00:30,150 --> 00:00:32,530
has at least one character; otherwise it will produce an

12
00:00:32,530 --> 00:00:37,390
error. S plus Swill produce the string, concatenating S with itself

13
00:00:37,390 --> 00:00:39,270
but its first character is still the same as the

14
00:00:39,270 --> 00:00:43,470
first character of S, so these two are equivalent. The third

15
00:00:43,470 --> 00:00:46,590
option is not equivalent. So here we're taking the first

16
00:00:46,590 --> 00:00:50,620
character of S, concatenating that with the second character of S.

17
00:00:50,620 --> 00:00:53,510
Here we're taking from S, the 0 plus 1th

18
00:00:53,510 --> 00:00:56,650
character, which is, evaluates to 1 so that's the

19
00:00:56,650 --> 00:00:59,190
second character of S. This is just going to be

20
00:00:59,190 --> 00:01:02,640
one character, this is two characters. They're never equivalent. The

21
00:01:02,640 --> 00:01:06,270
fourth option is sometimes equivalent. If S is a

22
00:01:06,270 --> 00:01:09,165
string with at least two characters then S index

23
00:01:09,165 --> 00:01:12,940
1 is the second character from S. S plus

24
00:01:12,940 --> 00:01:16,410
ity index 1 is the second character for S. The

25
00:01:16,410 --> 00:01:22,330
problem is that if S has less than two characters. So suppose our value of S was

26
00:01:22,330 --> 00:01:26,196
just a one letter string. S index 1 will

27
00:01:26,196 --> 00:01:29,230
be an error. There is no second character from

28
00:01:29,230 --> 00:01:34,260
S. S plus ity index 1 would be the

29
00:01:34,260 --> 00:01:36,240
second character of the string that resolves from that

30
00:01:36,240 --> 00:01:39,340
concatenation which would actually be the I. So these

31
00:01:39,340 --> 00:01:41,430
are not always equivalent. They are equivalent in the

32
00:01:41,430 --> 00:01:44,040
case where S has at least two characters.

33
00:01:44,040 --> 00:01:46,170
The final option, we have S negative 1,

34
00:01:46,170 --> 00:01:50,210
so that means the last character of S. And we have S plus S, which produces

35
00:01:50,210 --> 00:01:52,850
the string which concatenates S with itself in

36
00:01:52,850 --> 00:01:54,610
X negative 1. That's going to be the last

37
00:01:54,610 --> 00:01:57,510
character of concatenating S with itself, which is

38
00:01:57,510 --> 00:01:59,240
the same as the last character of S.
