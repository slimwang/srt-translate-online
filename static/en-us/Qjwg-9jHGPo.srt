1
00:00:00,000 --> 00:00:05,000
We can see a program as a succession of program states.

2
00:00:05,000 --> 00:00:09,000
Each program states consists of several variables with values.

3
00:00:09,000 --> 00:00:14,000
As a program executes, it processes these states and transforms them into a new states.

4
00:00:14,000 --> 00:00:19,000
For instance, by reading variables and writing variables. This is the normal mode of operation.

5
00:00:19,000 --> 00:00:24,000
Now, however, since in the beginning, we have a normal input and in the end we have a failure,

6
00:00:24,000 --> 00:00:29,000
there must be a defect somewhere in our program that actually causes the problem.

7
00:00:29,000 --> 00:00:33,000
So let me assume that this statement we're executing here actually has a defect.

8
00:00:33,000 --> 00:00:38,000
What happens is that now, when executed, it introduces

9
00:00:38,000 --> 00:00:42,000
an error in the program state which we call an infection.

10
00:00:42,000 --> 00:00:47,000
This infection is now being propagated possibly to other state

11
00:00:47,000 --> 00:00:52,000
and eventually becomes visible as a failure towards the user.

12
00:00:52,000 --> 00:00:56,000
What we get in here is actually an entire cause-effect chain.

13
00:00:56,000 --> 00:01:01,000
You see, these failures, which is an infection, is caused by earlier infections

14
00:01:01,000 --> 00:01:11,000
and if we are at a state where the infection has no further origin, that is, the input state is the same,

15
00:01:11,000 --> 00:01:16,000
and the output is infected, and we know the statement that was executed at this precise moment

16
00:01:16,000 --> 00:01:20,000
which caused this transition from the same state to infected state,

17
00:01:20,000 --> 00:01:26,000
this is the statement which caused the infection, this is the statement which has the defect.

18
00:01:26,000 --> 00:01:31,000
When we're debugging now, we need to identify this cause-effect chain

19
00:01:31,000 --> 00:01:36,000
not only do we need to identify but we also need to break the cause-effect chain.

20
00:01:36,000 --> 00:01:42,000
If we can break this cause-effect chain from defect to failure, then we're done with debugging.

21
00:01:42,000 --> 00:01:47,000
So all of this looks very simple, however, in real life, it's much more complicated than that.

22
00:01:47,000 --> 00:01:51,000
To start with, not every defect automatically causes a failure.

23
00:01:51,000 --> 00:01:56,000
It may well be that the defect causes an infection which later simply is not

24
00:01:56,000 --> 00:01:59,000
propagated as a real life infection just as well.

25
00:01:59,000 --> 00:02:03,000
So the infection is not propagated and never ever becomes visible to the user.

26
00:02:03,000 --> 00:02:08,000
It may not even cause a failure at all or the statement with the defect may not even be executed

27
00:02:08,000 --> 00:02:14,000
or only under very specific circumstances may actually cause an infection and later a failure.

28
00:02:14,000 --> 00:02:18,000
This is the problem of testing. You can execute a program again and again,

29
00:02:18,000 --> 00:02:24,000
never have a failure and still have a defect in there, however, if a program fails,

30
00:02:24,000 --> 00:02:33,000
that is if we actually see a failure, then we can always trace it back to the defect that causes it.

31
00:02:33,000 --> 00:02:38,000
So if there's a failure, we can always fix it by following back the cause-effect chain.

32
00:02:38,000 --> 00:02:43,000
But then the next problem is: these states are huge.

33
00:02:43,000 --> 00:02:50,000
So over here we have 1, 2, 3, 4, ... 12 variables. Cute.

34
00:02:50,000 --> 00:02:57,000
In reality, we have 10,000 of such variables and not only do we have 10,000 of such variables,

35
00:02:57,000 --> 00:03:02,000
we also have 10,000 of steps between defect and failure.

36
00:03:02,000 --> 00:03:06,000
So tracing back the cause-effect chain can be much,

37
00:03:06,000 --> 00:03:10,000
much more complicated that it is in this simple picture.

38
00:03:10,000 --> 00:03:14,000
The longer the cause-effect chain, that is the longer the time we have to cover,

39
00:03:14,000 --> 00:03:19,000
the more states we have to cover, the harder is to debug it.

40
00:03:19,000 --> 00:03:23,000
And also, the larger the state, the more we have to search for an infection.

41
00:03:23,000 --> 00:03:27,000
Again, this makes debugging harder and harder.

42
00:03:27,000 --> 00:03:31,000
It's like finding a needle in a haystack except that the haystack

43
00:03:31,000 --> 00:03:35,000
sometimes is larger than any haystack you'll ever find on earth.
