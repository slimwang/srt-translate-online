1
00:00:00,680 --> 00:00:03,570
Let's go back to the documentation for
the OnClickListener.

2
00:00:03,570 --> 00:00:06,680
As we're starting to realize, Android
is very specific about the details

3
00:00:06,680 --> 00:00:09,110
around how to listen for an input event.

4
00:00:09,110 --> 00:00:11,110
The method can't be named anything else.

5
00:00:11,110 --> 00:00:14,130
It needs to be precisely on click and
have exactly

6
00:00:14,130 --> 00:00:18,640
one input which is the view being
clicked on and have no return value.

7
00:00:18,640 --> 00:00:21,870
So you can think of this outline
here of the OnClickListener

8
00:00:21,870 --> 00:00:26,100
regarding the class and the methods
as a contract that you as a developer

9
00:00:26,100 --> 00:00:29,330
need to follow in order to be
notified of the click events.

10
00:00:29,330 --> 00:00:33,360
In more formal Java terms,
this is the definition of an interface.

11
00:00:33,360 --> 00:00:37,740
At the top of this documentation page,
in small font, it says interface.

12
00:00:37,740 --> 00:00:40,680
In the future, its highly
likely that you may come across

13
00:00:40,680 --> 00:00:43,950
another component in Android
that is also an interface.

14
00:00:43,950 --> 00:00:44,780
So at this point,

15
00:00:44,780 --> 00:00:49,290
you may be wondering, wait a minute, how
was an interface different from a class?

16
00:00:49,290 --> 00:00:51,490
The document pages look pretty similar.

17
00:00:51,490 --> 00:00:55,500
Well, in the last course,
we learned about classes like text view,

18
00:00:55,500 --> 00:00:59,830
which contains state and methods
that are fully implemented, meaning,

19
00:00:59,830 --> 00:01:02,420
there are instructions in each method.

20
00:01:02,420 --> 00:01:06,540
Now we're being introduced
interfaces which contain no state,

21
00:01:06,540 --> 00:01:09,110
but it does contain method signatures.

22
00:01:09,110 --> 00:01:13,390
Remember that a method signature
signifies the return value, method name,

23
00:01:13,390 --> 00:01:14,560
and input parameters.

24
00:01:14,560 --> 00:01:17,410
It ends with a semicolon and
there are no curly braces,

25
00:01:17,410 --> 00:01:20,500
with the code in the middle for
implementation of the method.

26
00:01:20,500 --> 00:01:22,900
This means it's an abstract method.

27
00:01:22,900 --> 00:01:27,060
An abstract method's implementation
is intentionally left blank so

28
00:01:27,060 --> 00:01:30,160
that a developer like you who
wants to use the interface

29
00:01:30,160 --> 00:01:32,790
can provide their own
specific instructions for it.

30
00:01:32,790 --> 00:01:34,880
So it's like saying,
fill in the blank for

31
00:01:34,880 --> 00:01:37,140
what you want to happen when
this view is clicked on.

32
00:01:38,240 --> 00:01:42,010
There can be multiple abstract methods
in an interface, but this example of

33
00:01:42,010 --> 00:01:46,720
the onClickListener interface only has
one abstract method, the onClick method.

34
00:01:46,720 --> 00:01:49,520
In the future,
we'll also encounter abstract classes.

35
00:01:49,520 --> 00:01:53,520
This is a partially implemented
class and it contains state and

36
00:01:53,520 --> 00:01:57,790
some methods are fully implemented while
other methods are left abstract for

37
00:01:57,790 --> 00:01:59,770
someone else to define the behavior.

38
00:01:59,770 --> 00:02:02,730
So you can think of this as
a continuum where an interface is not

39
00:02:02,730 --> 00:02:06,000
implemented at all, and abstract
class is partially implemented, and

40
00:02:06,000 --> 00:02:08,220
a concrete class is fully implemented.

41
00:02:08,220 --> 00:02:11,380
So how come an on click listener
is not a concrete class?

42
00:02:11,380 --> 00:02:13,347
And why isn't a text view an interface?

43
00:02:13,347 --> 00:02:16,520
And the same with the view
group being an abstract class.

44
00:02:16,520 --> 00:02:18,990
The Android team made these
respective decisions,

45
00:02:18,990 --> 00:02:22,730
based on what would make it easier for
developers, like you, to build an app.

46
00:02:22,730 --> 00:02:25,310
Every developer will need to
display text on the screen.

47
00:02:25,310 --> 00:02:28,800
So they created a concrete text
view class that accomplishes that.

48
00:02:28,800 --> 00:02:31,980
We can simply call methods to
change the text in the view.

49
00:02:31,980 --> 00:02:36,070
So in this abstract class case, we want
to standardize some behavior about

50
00:02:36,070 --> 00:02:38,980
view groups being a container
of multiple child views.

51
00:02:38,980 --> 00:02:42,130
However, the details of
how to lay out the views

52
00:02:42,130 --> 00:02:45,610
on the screen is left undefined for
the subclass to determine.

53
00:02:45,610 --> 00:02:47,490
In this case, when your layout and

54
00:02:47,490 --> 00:02:50,790
relative layout are subclasses
of the ViewGroup class,

55
00:02:50,790 --> 00:02:55,030
they each define their own rules for how
views should be laid out on the screen.

56
00:02:55,030 --> 00:02:58,820
On the other hand, the Android team
knows that many developers will probably

57
00:02:58,820 --> 00:03:00,760
want to customize the click behavior.

58
00:03:00,760 --> 00:03:03,320
It wouldn't make sense to
provide default behavior for

59
00:03:03,320 --> 00:03:04,780
what happens when a button is clicked.

60
00:03:04,780 --> 00:03:08,103
But the Android team did want to
standardize what the method call would

61
00:03:08,103 --> 00:03:10,710
be and the cost type would
be in on click listener.

62
00:03:10,710 --> 00:03:13,010
Then they leave the logic
inside the method for

63
00:03:13,010 --> 00:03:14,690
the developer to write themselves.

64
00:03:14,690 --> 00:03:15,690
So to summarize,

65
00:03:15,690 --> 00:03:19,470
if you come across a concrete class
in Android you can use it right away.

66
00:03:19,470 --> 00:03:22,490
If you come across an abstract class,
you need to subclass this and

67
00:03:22,490 --> 00:03:25,290
then provide your own code for
the abstract methods.

68
00:03:25,290 --> 00:03:28,260
If you come across an interface,
you need to provide for

69
00:03:28,260 --> 00:03:29,480
all the abstract methods.
