1
00:00:00,000 --> 00:00:03,000
This notion of causality is important in debugging

2
00:00:03,000 --> 00:00:08,000
because when you fix a defect we want to make sure to think first.

3
00:00:08,000 --> 00:00:13,000
We want to make sure that the defect is actually error, that is it is wrong.

4
00:00:13,000 --> 00:00:21,000
We also want to make sure that the defect causes the failure if A is the defect and B is the failure.

5
00:00:21,000 --> 00:00:33,000
We want to make sure that if the defect hadn't been there then the failure must not occur either.

6
00:00:33,000 --> 00:00:37,000
And these are the two things we need to show when we fix a defect.

7
00:00:37,000 --> 00:00:41,000
In order to make sure that the defect is an error, we must show how to correct it

8
00:00:41,000 --> 00:00:44,000
and to show that the defect causes the failure,

9
00:00:44,000 --> 00:00:48,000
we must show that the failure no longer occurs after we have changed it.

10
00:00:48,000 --> 00:00:53,000
It is important to show both the defect is an error and the cause

11
00:00:53,000 --> 00:00:59,000
in order to avoid situations in which a defect only is an error but does not cause the failure

12
00:00:59,000 --> 00:01:02,000
or that something causes the failure but is not an error.

13
00:01:02,000 --> 00:01:06,000
Let's look at the these. First, you can have an error that's not a cause.

14
00:01:06,000 --> 00:01:11,000
Here's you, looking at your program and you look at the program and find tons and tons of errors.

15
00:01:11,000 --> 00:01:16,000
Here's one, here's one, and there's one and you fix them and you think you're done,

16
00:01:16,000 --> 00:01:20,000
but you don't know whether any of these actually fixes the problem

17
00:01:20,000 --> 00:01:26,000
because it may well be that these errors you find that none of them actually causes the failure.

18
00:01:26,000 --> 00:01:32,000
It simply means that after any fix you need to verify whether your fix actually did the trick

19
00:01:32,000 --> 00:01:37,000
and better yet before the fix, you should be able to precisely predict

20
00:01:37,000 --> 00:01:40,000
that your change will actually fix the failure.

21
00:01:40,000 --> 00:01:44,000
The second category is causes that are not errors.

22
00:01:44,000 --> 00:01:51,000
If you think of our Mozilla example for instance, we found that the select tech in the input

23
00:01:51,000 --> 00:01:56,000
causes Mozilla to crash when printing, however, this is just a cause, it is not an error.

24
00:01:56,000 --> 00:02:01,000
This is perfectly legal html input and at the very least some input that

25
00:02:01,000 --> 00:02:03,000
Mozilla should normally be able to cope with.

26
00:02:03,000 --> 00:02:06,000
In particular Mozilla should not crash on any input.

27
00:02:06,000 --> 00:02:09,000
What we have here is the cause, but we haven't find the error yet.

28
00:02:09,000 --> 00:02:16,000
The error is somewhere in the, code probably in the piece of code that handles the printing of select tags.

29
00:02:16,000 --> 00:02:20,000
We can have errors that are not causes and causes that are not errors.

30
00:02:20,000 --> 00:02:22,000
The goal in debugging is to find errors that actually caused the failure.
