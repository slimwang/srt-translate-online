1
00:00:00,000 --> 00:00:05,000
Now, after all that, I think you're finally ready--you're mature enough--

2
00:00:05,000 --> 00:00:10,000
to learn the whole truth about how for statements actually work.

3
00:00:10,000 --> 00:00:15,000
You've been using them all along, but you may not have known the inner details,

4
00:00:15,000 --> 00:00:18,000
the gory truth, about what's inside the for statement.

5
00:00:18,000 --> 00:00:22,000
Now, when I saw for x in items, print x,

6
00:00:22,000 --> 00:00:24,000
you probably have a model that looks something like this:

7
00:00:24,000 --> 00:00:28,000
assuming items is a list or a tuple or a string,

8
00:00:28,000 --> 00:00:32,000
you think of this code probably as something like i equals 0

9
00:00:32,000 --> 00:00:38,000
while i is less than the length of the items, x equals items at i,

10
00:00:38,000 --> 00:00:40,000
and then print x.

11
00:00:40,000 --> 00:00:44,000
That's a good model as long as items is one of these sequence types like lists.

12
00:00:44,000 --> 00:00:46,000
But items can also be other things, as we've seen.

13
00:00:46,000 --> 00:00:50,000
It can be a generator expression, for example.

14
00:00:50,000 --> 00:00:56,000
Overall, Python calls the thing that can be iterated over in a for loop an iterable.

15
00:00:56,000 --> 00:01:01,000
Strings and lists are examples of iterables, and so are generators.

16
00:01:01,000 --> 00:01:05,000
What actually happens when we implement this piece of code,

17
00:01:05,000 --> 00:01:07,000
it's as if we had written this code.

18
00:01:07,000 --> 00:01:10,000
First we take the items and we make an iterator from them

19
00:01:10,000 --> 00:01:14,000
by calling the built-in function "iter." I'm going to call that "it."

20
00:01:14,000 --> 00:01:17,000
Then we're going to have a while loop that goes forever.

21
00:01:17,000 --> 00:01:20,000
Its loop control says while True

22
00:01:20,000 --> 00:01:24,000
we're going to assign x to be the next item off of the iterator,

23
00:01:24,000 --> 00:01:30,000
then do whatever was in the body of the for loop, in this case print x.

24
00:01:30,000 --> 00:01:35,000
We're going to keep on doing this sequence as long as we can get an x value.

25
00:01:35,000 --> 00:01:41,000
But when next stops then we'll have an exception, which is a stop iteration exception,

26
00:01:41,000 --> 00:01:44,000
and we don't need to do anything more. We're done.

27
00:01:44,000 --> 00:01:47,000
That's what a for loop really means in Python.

28
00:01:47,000 --> 00:01:51,000
We take the items, we create an iterator over them,

29
00:01:51,000 --> 00:01:56,000
we call that iterator until we're done, and then we pass through to the next statement.

30
00:01:56,000 --> 00:02:00,000
We're finally ready to define this c, this counting function.

31
00:02:00,000 --> 00:02:05,000
What it does is it takes a sequence, it says this is the first time I've been called.

32
00:02:05,000 --> 00:02:09,000
I'm going to initialize my starts to one.

33
00:02:09,000 --> 00:02:15,000
Then I'm going to enter into a loop and this means that c is a generator function.

34
00:02:15,000 --> 00:02:20,000
The generator function will be returned, and as part of the for protocol,

35
00:02:20,000 --> 00:02:24,000
we'll call that generator function each time we want the next item in the sequence

36
00:02:24,000 --> 00:02:27,000
and each time we do that, our count of items will be incremented.

37
00:02:27,000 --> 00:02:31,000
When we're done, when the for loop doesn't want any more, we'll stop incrementing.

38
00:02:31,000 --> 00:02:34,000
We don't necessarily go through every item in the sequence.

39
00:02:34,000 --> 00:02:38,000
We'll just have just the right number of counts for item.

40
00:02:38,000 --> 00:02:41,000
This will give us the right number of starts and the right number of items.

41
00:02:41,000 --> 00:02:45,000
We can do that because we control the time of execution,

42
00:02:45,000 --> 99:59:59,999
because this is a generator function and not a regular function.
