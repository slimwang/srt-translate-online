1
00:00:00,450 --> 00:00:03,730
So now that i have my user
model in place, I will make

2
00:00:03,730 --> 00:00:08,230
a use.pi file to handle the logic
of actually registering a new user.

3
00:00:08,230 --> 00:00:11,770
I will structure this inpoint such that
a client can register a new user with

4
00:00:11,770 --> 00:00:14,100
a post request to slash users.

5
00:00:14,100 --> 00:00:17,620
The body of this request needs to be
a JSON object that has username and

6
00:00:17,620 --> 00:00:19,190
password fields.

7
00:00:19,190 --> 00:00:22,330
Let's take a look at the implementation
of this flask [INAUDIBLE].

8
00:00:22,330 --> 00:00:23,000
The user name and

9
00:00:23,000 --> 00:00:26,970
password arguments are obtained from
the JSON input coming from the request.

10
00:00:26,970 --> 00:00:28,420
And then validated.

11
00:00:28,420 --> 00:00:31,920
If the arguments are valid,
then a new user instance is created.

12
00:00:31,920 --> 00:00:33,560
The user name is assigned to it.

13
00:00:33,560 --> 00:00:36,920
And the password is hashed
using the hash_password method.

14
00:00:36,920 --> 00:00:39,750
The user is then finally
written to the database.

15
00:00:39,750 --> 00:00:44,010
The body of the response shows the user
representation as a JSON object,

16
00:00:44,010 --> 00:00:47,570
with the status code of 201, so
let me run my application and

17
00:00:47,570 --> 00:00:49,920
try registering a new user
with Postman like so.

18
00:00:49,920 --> 00:00:53,950
We'll build this request in curl by
using the following command line text.

19
00:00:53,950 --> 00:00:57,450
My server response that a new user
has successfully been created.

20
00:00:57,450 --> 00:01:01,380
The views dot pi and model dot pi files
are available in the instructor notes.

21
00:01:01,380 --> 00:01:04,470
It's also important to point
out that in a real application,

22
00:01:04,470 --> 00:01:08,570
login should always be done
over a secure HTTP connection

23
00:01:08,570 --> 00:01:10,850
If the login credentials are going to
travel through the networking,

24
00:01:10,850 --> 00:01:14,240
clear text, they're are easily
visible to a potential hacker.

25
00:01:14,240 --> 00:01:17,080
If you are interested in
learning more about HTTPS and

26
00:01:17,080 --> 00:01:20,250
FLASK, check out some of the resources
provided in the instructor notes.
