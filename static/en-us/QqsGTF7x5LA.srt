1
00:00:00,660 --> 00:00:04,040
We mentioned that the greedy approach of constructing

2
00:00:04,040 --> 00:00:06,920
a DHT leads to tree saturation. And the

3
00:00:06,920 --> 00:00:10,360
congestion happens at the node, which happens to

4
00:00:10,360 --> 00:00:14,180
map to a lot of clustered keys. The coral

5
00:00:14,180 --> 00:00:17,300
approach is very simple, don't be greedy. What

6
00:00:17,300 --> 00:00:20,080
does that mean well what it mean the

7
00:00:20,080 --> 00:00:26,080
greedy approach,when we have a key K, we try to store it in the lower N who's

8
00:00:26,080 --> 00:00:29,680
note i.d is equal to K the coral approach

9
00:00:29,680 --> 00:00:32,820
use this as a hint not and absolute. But you

10
00:00:32,820 --> 00:00:35,410
still have to have a method to the madness, if

11
00:00:35,410 --> 00:00:39,680
you're going to store it in some place different from N.

12
00:00:39,680 --> 00:00:42,630
Then, those who are trying to discover it, have to

13
00:00:42,630 --> 00:00:45,720
have a method to the madness, of where you stored

14
00:00:45,720 --> 00:00:48,540
your key. We'll see how that is done. So the

15
00:00:48,540 --> 00:00:51,270
top level bit I want you to take away is

16
00:00:51,270 --> 00:00:57,420
that in the Coral DHT The get and put operations are satisfied by nodes that are

17
00:00:57,420 --> 00:01:04,599
different from the key K. The node IDN may not be close to key, and

18
00:01:04,599 --> 00:01:07,940
that's why the DHT that Coral implements is

19
00:01:07,940 --> 00:01:11,340
called a sloppy DHT, and we'll talk about

20
00:01:11,340 --> 00:01:13,430
details of that in a minute. The rationale

21
00:01:13,430 --> 00:01:16,810
of course, is you want to avoid tree saturation,

22
00:01:16,810 --> 00:01:23,620
that comes about when lot of keys map to a particular node ID. And also in

23
00:01:23,620 --> 00:01:25,940
the process, what we want to do is, spread

24
00:01:25,940 --> 00:01:29,820
the metadata overload so that no single node

25
00:01:29,820 --> 00:01:33,190
in this democratic process of helping one another

26
00:01:33,190 --> 00:01:36,540
is saturated or overloaded by being a good

27
00:01:36,540 --> 00:01:39,050
citizen. How does Coral do it? It has

28
00:01:39,050 --> 00:01:42,730
a novel key-based routing algorithm, which we'll describe,

29
00:01:42,730 --> 00:01:49,900
but the basis for that key-based routing algorithm is to compute the distance

30
00:01:49,900 --> 00:01:56,310
between, the source of a get or a put operation and the destination for that

31
00:01:56,310 --> 00:02:02,120
get or put operation. The destination by default is going to be the node

32
00:02:02,120 --> 00:02:07,890
whose ID is equal to the key that you're looking for. So the distance between

33
00:02:07,890 --> 00:02:12,940
the source and the destination is X or distance, meaning [UNKNOWN] or

34
00:02:12,940 --> 00:02:18,100
the bit pattern Of the node ID for the source and the bit pattern for

35
00:02:18,100 --> 00:02:23,120
the node ID for the destination that X or of the two qualities give

36
00:02:23,120 --> 00:02:28,240
you the distance between the two nodes in the

37
00:02:28,240 --> 00:02:34,010
overlay network space. And the reason why you want to do an XOR

38
00:02:34,010 --> 00:02:37,630
is because an XOR operation as opposed to,

39
00:02:37,630 --> 00:02:40,460
say, doing a subtraction, is going to be much

40
00:02:40,460 --> 00:02:43,790
faster. We do an XOR to find out

41
00:02:43,790 --> 00:02:46,450
the distance between the source and the destination that

42
00:02:46,450 --> 00:02:49,130
need to communicate. So, for instance, if the

43
00:02:49,130 --> 00:02:52,990
source at, this is fourteen, and the destination address

44
00:02:52,990 --> 00:02:56,200
is four. Remember that these are null IDs

45
00:02:56,200 --> 00:02:59,160
in the null ID space which at the level

46
00:02:59,160 --> 00:03:02,310
of the user. And if you do an X sort of that you get 10, so

47
00:03:02,310 --> 00:03:05,625
10 is the distance between the source 14

48
00:03:05,625 --> 00:03:08,950
and,and the destination for. The bigger the XOR

49
00:03:08,950 --> 00:03:12,570
value, the larger the distance between the source

50
00:03:12,570 --> 00:03:16,220
and the destination in the application namespace. And

51
00:03:16,220 --> 00:03:19,880
since we are dealing with fairly big numbers

52
00:03:19,880 --> 00:03:24,190
here, the node ID could be 160 bit quantity.

53
00:03:24,190 --> 00:03:25,960
And that is the reason we want to use

54
00:03:25,960 --> 00:03:28,560
some simple operation that will get us the distance.

55
00:03:28,560 --> 00:03:31,825
X R is a very quick operation to

56
00:03:31,825 --> 00:03:35,100
implement to get the distance between source and destination.
