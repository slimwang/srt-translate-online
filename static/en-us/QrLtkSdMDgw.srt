1
00:00:00,000 --> 00:00:04,000
What we want is to build this system-level random testers

2
00:00:04,000 --> 00:00:08,000
as early as possible in the development process, and there are a number of reason for this.

3
00:00:08,000 --> 00:00:12,000
First of all what we'd like to do is start off with a simple version of our system

4
00:00:12,000 --> 00:00:15,000
that doesn't implement very much functionality and then we want to use sort of a weak fuzzer.

5
00:00:15,000 --> 00:00:19,000
That is to say, we're going to test it with values that are maybe perhaps not that interesting.

6
00:00:19,000 --> 00:00:21,000
And the good thing about this combination is

7
00:00:21,000 --> 00:00:24,000
these weak random tests probably are going to find some flaws.

8
00:00:24,000 --> 00:00:27,000
What they are not going to do is flood our developers with huge numbers of bugs

9
00:00:27,000 --> 00:00:30,000
like might happen when we use an extremely strong random tester.

10
00:00:30,000 --> 00:00:32,000
There is sort of no easier way to demoralized software developers

11
00:00:32,000 --> 00:00:35,000
than to hand them a really big pile of bugs--nobody wants that.

12
00:00:35,000 --> 00:00:38,000
What they're gong to start to do is ignore those bugs and get back to getting work done.

13
00:00:38,000 --> 00:00:42,000
What you want to do is give people a slow but steady stream of important bug reports

14
00:00:42,000 --> 00:00:45,000
and let them fix this as they go on, and that's another reason why it's nice

15
00:00:45,000 --> 00:00:48,000
to give people with continuous stream of bug reports,

16
00:00:48,000 --> 00:00:50,000
which is that what these do is help show us flaws in our software.

17
00:00:50,000 --> 00:00:52,000
They help show us interfaces that we don't understand.

18
00:00:52,000 --> 00:00:57,000
They help show us modules that end up being extremely weak for one reason or another,

19
00:00:57,000 --> 00:01:01,000
and it basically helps us better understand where our software development effort is going wrong.

20
00:01:01,000 --> 00:01:05,000
Now, if instead of giving people maybe a couple of bug reports a week for a year,

21
00:01:05,000 --> 00:01:07,000
we give them a hundred bug reports in the very end

22
00:01:07,000 --> 00:01:13,000
All they're going to do is triage to find the five most critical bugs, and fix them using hacks.

23
00:01:13,000 --> 00:01:15,000
So nobody learns anything. Everybody is angry. Nobody is happy.

24
00:01:15,000 --> 00:01:19,000
Rather what we like to have done is have been doing random testing all along

25
00:01:19,000 --> 00:01:21,000
and using it to spot weakness in our software.

26
00:01:21,000 --> 00:01:23,000
The other thing that happens is, as our software evolves

27
00:01:23,000 --> 00:01:27,000
to be more robust as we move toward releasing it,

28
00:01:27,000 --> 00:01:29,000
we're evolving our random tester to be stronger and stronger.

29
00:01:29,000 --> 00:01:32,000
That is to say, maybe this week we have a feature where

30
00:01:32,000 --> 00:01:35,000
we generate a new kind of random input that we haven't generated before.

31
00:01:35,000 --> 00:01:37,000
Also it's going to generate some bug report, and we'll fix them,

32
00:01:37,000 --> 00:01:39,000
and our software evolves to be more robust.

33
00:01:39,000 --> 00:01:43,000
If we keep doing them not just over weeks but over years, what we'll end up with is

34
00:01:43,000 --> 00:01:47,000
a random tester and a system that have sort of gone through this co-evolution process

35
00:01:47,000 --> 00:01:49,000
where they both become much stronger.

36
00:01:49,000 --> 00:01:51,000
That is to say, we've evolved in extremely sophisticated random tester,

37
00:01:51,000 --> 00:01:55,000
and we've also evolved the system that gives robust with respect

38
00:01:55,000 --> 00:01:58,000
to the kind of vaults it can be triggered by that random tester.

39
00:01:58,000 --> 00:02:01,000
What I firmly believe is, and of course I can't prove this and you're free to disagree,

40
00:02:01,000 --> 00:02:06,000
is that if, for example, Microsoft had done this from the beginning, Adobe had done this from the beginning,

41
00:02:06,000 --> 00:02:09,000
and these other companies that end up with lots of security vulnerabilities

42
00:02:09,000 --> 00:02:11,000
had fuzzed their products all the way through the development chain

43
00:02:11,000 --> 00:02:15,000
they'd end up with far fewer of this sort of nasty crashes and critical security vulnerabilities

44
00:02:15,000 --> 00:02:18,000
that they are always scrambling to patch, and that anybody with a fuzzer

45
00:02:18,000 --> 00:02:21,000
seems to be able to find without a whole lot of effort.

46
00:02:21,000 --> 00:02:25,000
Or at least that's been the case in the past, and it's possible now that with more widespread user

47
00:02:25,000 --> 00:02:29,000
of more aggressive fuzzers with that kind of error of easy security bugs in popular products

48
00:02:29,000 --> 00:02:33,000
maybe is hopefully starting to kind of tail off.
