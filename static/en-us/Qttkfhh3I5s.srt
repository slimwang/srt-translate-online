1
00:00:00,200 --> 00:00:04,086
So, here's my solution to implementing nextDay and you'll note that I start with

2
00:00:04,086 --> 00:00:08,087
a docstring. This is treated as a special common by most Python systems and I

3
00:00:08,087 --> 00:00:11,992
put in this warning to make people realize this information is not actually

4
00:00:11,992 --> 00:00:15,478
correct. So, it shouldn't be used to schedule, say, the apocalypse, but it's

5
00:00:15,478 --> 00:00:19,120
good for our testing for now. And the logic is quite simple, if the day is less

6
00:00:19,120 --> 00:00:23,020
than 30, since we're assuming all months have 30 days, we increase the day by 1,

7
00:00:23,020 --> 00:00:27,014
and I'm returning a three tuple of the year, the month, and the day. Otherwise,

8
00:00:27,014 --> 00:00:30,674
we need to increase the month, so we're going to advance to the next month and

9
00:00:30,674 --> 00:00:35,920
reset the day to 1. If we're in December, then we need to increase the year by 1

10
00:00:35,920 --> 00:00:40,458
and reset the date to January 1st. As with the larger problem, you should start

11
00:00:40,458 --> 00:00:44,660
this by thinking about some test cases. And see that those behave as expected.

12
00:00:44,660 --> 00:00:48,894
We provided some in the example. One nice thing you'll notice here using the

13
00:00:48,894 --> 00:00:52,794
Python shell provided by Idle is that, when I try to use nextDay, I see the

14
00:00:52,794 --> 00:00:56,550
docstring right here. And normally, we want docstrings that are descriptive

15
00:00:56,550 --> 00:01:00,524
here. The warning is very useful. And I give a sample month, day, and year, and

16
00:01:00,524 --> 00:01:04,617
I see that I get the right result. I should note that for some cases, say,

17
00:01:04,617 --> 00:01:08,766
January 30th, the day following January 30th should be January 31st. I'm going

18
00:01:08,766 --> 00:01:12,956
to get February 1th because of this assumption about all months having 30 days,

19
00:01:12,956 --> 00:01:16,944
and we should try a more difficult case, such as the end of the year. And here,

20
00:01:16,944 --> 00:01:21,102
I'll use December 31st, it would advance the year whether it's December 31st or

21
00:01:21,102 --> 00:01:24,892
December 30th because of that assumption, and we get January 1st, 2013.
