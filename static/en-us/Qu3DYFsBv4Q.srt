1
00:00:02,020 --> 00:00:05,640
So we've worked with notifications and
more recently with widgets.

2
00:00:05,640 --> 00:00:09,000
Both are good examples of API's
provided by the Android system

3
00:00:09,000 --> 00:00:13,370
that let your app extend beyond the full
screen activity we started with.

4
00:00:13,370 --> 00:00:15,790
However, this isn't limited
to just the system.

5
00:00:17,240 --> 00:00:21,220
Apps can also provide API's you
can integrate into your app to

6
00:00:21,220 --> 00:00:22,380
further extend your app.

7
00:00:23,630 --> 00:00:28,110
A little research shows that this is
exactly how Muzei does its magic.

8
00:00:28,110 --> 00:00:32,080
It extends the live wallpaper
API provided by Android.

9
00:00:32,080 --> 00:00:37,253
Gives us an easy API where we only worry
about sending Muzei new wallpapers.

10
00:00:37,253 --> 00:00:40,750
And it does all the work actually
displaying them to the user,

11
00:00:40,750 --> 00:00:44,720
controlling things like how bright or
blurred the picture should be,

12
00:00:44,720 --> 00:00:48,301
fixing those issues with readability,
we mentioned before.

13
00:00:48,301 --> 00:00:52,710
And even mirroring the wallpaper over to
Android Wear devices if the user wants.

14
00:00:52,710 --> 00:00:54,010
So how do we do it?

15
00:00:54,010 --> 00:00:56,500
First, we'll add a gradle dependency.

16
00:00:56,500 --> 00:00:59,940
Then a manifest entry for
our MuzeiArtSource.

17
00:00:59,940 --> 00:01:02,410
MuzeiArtSource is an intent service,

18
00:01:02,410 --> 00:01:05,010
which Muzei will connect
to get our wallpapers.

19
00:01:05,010 --> 00:01:09,200
The intent filter is how Muzei knows
it can connect to our service.

20
00:01:09,200 --> 00:01:11,430
We'll also include a special icon,

21
00:01:11,430 --> 00:01:15,990
description and even a color to
help make sunshine feel at home.

22
00:01:15,990 --> 00:01:19,890
So what happens when a user selects
our app for their wallpapers.

23
00:01:19,890 --> 00:01:24,100
First, we get a call back in our
Muzei Art Source of on Enabled.

24
00:01:24,100 --> 00:01:26,610
Then on Subscriber Added.

25
00:01:26,610 --> 00:01:29,350
Then comes the most important one,
on Update.

26
00:01:29,350 --> 00:01:34,200
This is where we will publish our
wallpaper making it available to Muzei.

27
00:01:34,200 --> 00:01:36,993
Similarly, upon selecting
a different app,

28
00:01:36,993 --> 00:01:41,880
we'll get an on Subscriber Removed,
and on Disabled callback.

29
00:01:41,880 --> 00:01:44,570
So what would our on Update look like?

30
00:01:44,570 --> 00:01:47,635
We'll do a simple query to
get the current weather.

31
00:01:47,635 --> 00:01:52,105
Use a new Utility method
getImageURLForWeatherCondition

32
00:01:52,105 --> 00:01:57,565
to get the appropriate wallpaper URL and
then build up an Artwork object.

33
00:01:57,565 --> 00:02:00,375
In our case we'll include the imageUrl.

34
00:02:00,375 --> 00:02:03,825
We'll use a description of the weather
as the title or main piece of content.

35
00:02:03,825 --> 00:02:07,960
And then we'll use
the locationQuery as the byline.

36
00:02:07,960 --> 00:02:09,590
Our secondary line of text.

37
00:02:09,590 --> 00:02:12,720
Muzei offers the ability
to open more details.

38
00:02:12,720 --> 00:02:15,590
Loading the main activity of
sunshine seems like a good way of

39
00:02:15,590 --> 00:02:16,920
seeing more details to me.

40
00:02:17,920 --> 00:02:21,410
We'll pass that artwork
through to publishArtwork.

41
00:02:21,410 --> 00:02:24,880
Like magic, we'll see Muzei
handle all the image loading,

42
00:02:24,880 --> 00:02:30,000
live wallpaper code and other work to
get our imagery on the user's wallpaper.

43
00:02:30,000 --> 00:02:31,020
Neat.

44
00:02:31,020 --> 00:02:34,570
While we have the option of using
Muzei's scheduleUpdate method,

45
00:02:34,570 --> 00:02:36,890
we can use the same
approach as our Widget, and

46
00:02:36,890 --> 00:02:39,790
use our data changed action
to trigger an update.

47
00:02:39,790 --> 00:02:44,100
That way, whenever the data changes,
we'll update the wallpaper as well.

48
00:02:44,100 --> 00:02:46,580
In this case, though,
we're triggering a service.

49
00:02:46,580 --> 00:02:50,658
So we'll add a start service call,
to our sync adapter.

50
00:02:50,658 --> 00:02:54,550
Then, our onHandleIntent,
can include a special check for

51
00:02:54,550 --> 00:02:56,490
the data updated action.

52
00:02:56,490 --> 00:02:59,380
And if we're enabled, and
the user who has selected us as their

53
00:02:59,380 --> 00:03:02,260
background source,
we can call our own update method.
