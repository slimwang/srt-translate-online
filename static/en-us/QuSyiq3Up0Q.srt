1
00:00:00,440 --> 00:00:05,684
You can also this to call methods. Here's an example. I created another method,

2
00:00:05,684 --> 00:00:10,040
makeMutualFriend, in the Person class. Because a lot of the time when I make a

3
00:00:10,040 --> 00:00:14,450
friend with someone else, they also make friends with me. In the method, I add

4
00:00:14,450 --> 00:00:19,450
someone else as a friend and then they add me. This is an example of calling

5
00:00:19,450 --> 00:00:24,430
one method inside of another method. Here I call addFriend on the current

6
00:00:24,430 --> 00:00:29,880
object from inside the makeMutualFriend method. I also call addFriend on the

7
00:00:29,880 --> 00:00:36,720
front parameter until it add this object as a friend. In the first method

8
00:00:36,720 --> 00:00:42,456
called the impressive parameter Is this object. It's the same as the implicit

9
00:00:42,456 --> 00:00:48,245
parameter of makeMutualFriend call. In the second method call the implicit

10
00:00:48,245 --> 00:00:54,530
parameter is the friend object. If I remove this dot in front of addFriend

11
00:00:54,530 --> 00:00:59,560
here, we would now say that this method call is without an implicit parameter.

12
00:00:59,560 --> 00:01:04,212
A method call without an implicit parameter is applied to the same object, so

13
00:01:04,212 --> 00:01:10,850
addFriend, friend is the same as this.addFriend, friend. Which way you write it

14
00:01:10,850 --> 00:01:14,800
is up to individual preference. I'm using the this reference in other more

15
00:01:14,800 --> 00:01:18,650
interesting place here. I'm using it to pass the current object in as a

16
00:01:18,650 --> 00:01:25,799
parameter, so when addFriend is called on a friend, It'll know who to add.
