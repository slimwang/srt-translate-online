1
00:00:00,000 --> 00:00:03,000
So how can we take an algorithm and put that into a Boolean formula?

2
00:00:03,000 --> 00:00:06,000
Well, that's where Cook and Levin had another ingenious idea,

3
00:00:06,000 --> 00:00:09,000
because they said you can look at an algorithm

4
00:00:09,000 --> 00:00:12,000
running on a RAM as a series of snapshots,

5
00:00:12,000 --> 00:00:14,000
and what I mean by this is the following:

6
00:00:14,000 --> 00:00:16,000
So assume you have an algorithm on a

7
00:00:16,000 --> 00:00:19,000
non-deterministic RAM that runs in polynomial time,

8
00:00:19,000 --> 00:00:23,000
so you have a point in time T equals 0, that's when your algorithm starts out,

9
00:00:23,000 --> 00:00:28,000
then you have T equals 1, T equals 2, so those are the time steps here.

10
00:00:28,000 --> 00:00:32,000
And the final time step is going to be some polynomial of N.

11
00:00:32,000 --> 00:00:35,000
That is clear because we're looking at an algorithm

12
00:00:35,000 --> 00:00:37,000
that solves a problem that lies in NP,

13
00:00:37,000 --> 00:00:42,000
So that means it only takes polynomial time on a non-deterministic RAM at least.

14
00:00:42,000 --> 00:00:46,000
Now if you look at what happens on the RAM in each time step,

15
00:00:46,000 --> 00:00:48,000
I can basically draw you the following picture.

16
00:00:48,000 --> 00:00:50,000
If you recall from unit one what the RAM looks like,

17
00:00:50,000 --> 00:00:52,000
the RAM has only a few components.

18
00:00:52,000 --> 00:00:55,000
The RAM has a read-only memory,

19
00:00:55,000 --> 00:00:58,000
the RAM has a program or the algorithm running,

20
00:00:58,000 --> 00:01:01,000
so this algorithm here is basically the program running,

21
00:01:01,000 --> 00:01:05,000
and just as I would write the algorithm line by line by line,

22
00:01:05,000 --> 00:01:07,000
I can also write it in this way,

23
00:01:07,000 --> 00:01:09,000
so this here would be the first line of code,

24
00:01:09,000 --> 00:01:12,000
then this would be the second line of code, and so on.

25
00:01:12,000 --> 00:01:15,000
And finally, the RAM had a reading and writing memory,

26
00:01:15,000 --> 00:01:19,000
so we had some memory cells here holding the variables,

27
00:01:19,000 --> 00:01:21,000
and those variables, of course, are changed by the program

28
00:01:21,000 --> 00:01:24,000
depending on what's here in the input.

29
00:01:24,000 --> 00:01:26,000
And now comes the neat part that Cook and Levin observed,

30
00:01:26,000 --> 00:01:29,000
because what they observed is

31
00:01:29,000 --> 00:01:32,000
that when you look at an algorithm working on the RAM,

32
00:01:32,000 --> 00:01:37,000
then you can depict that as a number of these snapshots,

33
00:01:37,000 --> 00:01:42,000
so if you say, add T equals 0,

34
00:01:42,000 --> 00:01:45,000
these are the contents of the read-only memory.

35
00:01:45,000 --> 00:01:48,000
This is, actually we need other information,

36
00:01:48,000 --> 00:01:50,000
we also needs to know where the program is at,

37
00:01:50,000 --> 00:01:52,000
but you can basically say, this is the input here,

38
00:01:52,000 --> 00:01:56,000
this is the program, and this is the line of the program that we're executing right now,

39
00:01:56,000 --> 00:01:59,000
and this here is the contents of the read/write memory.

40
00:01:59,000 --> 00:02:02,000
In the beginning this will be empty,

41
00:02:02,000 --> 00:02:05,000
but as the algorithm works, it will also put some content in here,

42
00:02:05,000 --> 00:02:07,000
and then, of course, the program moves on.

43
00:02:07,000 --> 00:02:10,000
It can also jump back and forth here,

44
00:02:10,000 --> 00:02:14,000
and of course, we will have more and more content in the memory,

45
00:02:14,000 --> 00:02:19,000
and at a certain point in time the program will say, I'm done,

46
00:02:19,000 --> 00:02:21,000
and it will hopefully have a certain output here.

47
00:02:21,000 --> 00:02:23,000
But since we're working with decision problems,

48
00:02:23,000 --> 00:02:29,000
actually it's only interesting to us if the program says, yes or no at the end.

49
00:02:29,000 --> 00:02:33,000
So for decision problems we don't even really care about what's in here,

50
00:02:33,000 --> 00:02:37,000
we would care about that if we were solving the optimization problem

51
00:02:37,000 --> 00:02:39,000
or want additional information,

52
00:02:39,000 --> 00:02:41,000
but actually for a decision problem,

53
00:02:41,000 --> 00:02:43,000
it would just be important for us to know

54
00:02:43,000 --> 00:02:46,000
at which line of code the algorithm finishes.

55
00:02:46,000 --> 00:02:50,000
If it finishes at a return statement that will return yes to us

56
00:02:50,000 --> 00:02:54,000
or a return statement that will return no to us.

57
00:02:54,000 --> 00:02:57,000
Now let's have a closer look at those snapshots,

58
00:02:57,000 --> 00:02:59,000
and we'll actually do that as a quiz.

59
00:02:59,000 --> 00:03:02,000
So this here is one snapshot.

60
00:03:02,000 --> 00:03:07,000
I would like you to tell me what we can say about a single snapshot

61
00:03:07,000 --> 00:03:11,000
and also about all of these snapshots here.

62
00:03:11,000 --> 00:03:13,000
So there are 3 statements,

63
00:03:13,000 --> 00:03:16,000
each of which I would like you to check this box if you think they are true

64
00:03:16,000 --> 00:03:18,000
and otherwise leave it blank.

65
00:03:18,000 --> 00:03:23,000
So the first claim you could make is that each snapshot has size polynomial in N,

66
00:03:23,000 --> 00:03:26,000
and N is the size of the input as always.

67
00:03:26,000 --> 00:03:29,000
Secondly, you could claim that there can be

68
00:03:29,000 --> 00:03:33,000
an exponential number of snapshots if we look at all of the time steps.

69
00:03:33,000 --> 00:03:37,000
And finally, one claim that I would like you to check out as well is

70
00:03:37,000 --> 00:03:40,000
all snapshots, if taken together,

71
00:03:40,000 --> 00:03:43,000
so this whole part here,

72
00:03:43,000 --> 00:03:45,000
have polynomial size,

73
00:03:45,000 --> 00:03:47,000
and by polynomial size, I again mean that it's some

74
00:03:47,000 --> 00:03:50,000
polynomial of the input size that we're always using.

75
00:03:50,000 --> 00:03:52,000
You should keep in mind that the algorithm

76
00:03:52,000 --> 00:03:56,000
that we're looking at is an algorithm for a problem in NP,

77
00:03:56,000 --> 99:59:59,999
and it runs on a non-deterministic RAM.
