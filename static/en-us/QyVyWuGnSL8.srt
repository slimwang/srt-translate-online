1
00:00:00,170 --> 00:00:08,119
And strongly typed languages attempt to
pass data that is not of the right type.

2
00:00:08,119 --> 00:00:13,220
Remember we said strongly typed,
just make sure that when

3
00:00:13,220 --> 00:00:17,360
you passed it for example, what you're
passing has to match the expected type.

4
00:00:17,360 --> 00:00:19,950
Or the target type where
this data is going.

5
00:00:19,950 --> 00:00:22,190
An attempt to pass the data
would either be called.

6
00:00:22,190 --> 00:00:25,010
This shouldn't be allowed by
a strongly typed language.

7
00:00:25,010 --> 00:00:26,410
Okay?
Because of typed mismatch.

8
00:00:26,410 --> 00:00:30,170
So either it would be caught
at compile time statically, or

9
00:00:30,170 --> 00:00:34,572
it gets caught at run time,
leading to an error.

10
00:00:34,572 --> 00:00:41,220
So a strongly typed language will
actually detect that mismatch and will

11
00:00:41,220 --> 00:00:47,280
catch any attempt to pass incompatible
type of data if you try to do that.

12
00:00:47,280 --> 00:00:49,910
So this is possible in strongly typed.

13
00:00:49,910 --> 00:00:53,745
Okay, strongly typed languages
don't allow you to access

14
00:00:53,745 --> 00:00:58,425
array data beyond it's,
outside of the range of the array.

15
00:00:58,425 --> 00:01:03,255
So the second one, we have to perform a
bounce check to make sure that you don't

16
00:01:03,255 --> 00:01:07,010
spill into memory where some
other data type lives or

17
00:01:07,010 --> 00:01:09,490
some other data item lives.

18
00:01:09,490 --> 00:01:13,090
So you shouldn't be able to access
this other data time by just

19
00:01:13,090 --> 00:01:16,150
sort of overflowing the bound,
ray-bound, that we have here.

20
00:01:16,150 --> 00:01:20,830
So this checking has to be done in
strongly a type line which is weakly

21
00:01:21,980 --> 00:01:24,360
typed actually may not do that and

22
00:01:24,360 --> 00:01:27,450
as a result of that they may
allow something like this.

23
00:01:27,450 --> 00:01:29,260
A W would be the answer.

24
00:01:29,260 --> 00:01:31,010
Pointer arithmetic basically says,

25
00:01:31,010 --> 00:01:33,290
pointer is an address in some sense,
isn't it?

26
00:01:33,290 --> 00:01:36,240
Arithmetic allows you to move up and
down from some point or

27
00:01:36,240 --> 00:01:40,560
value into various parts of memory,
and depending on how you manipulate

28
00:01:40,560 --> 00:01:43,860
the pointer, you can get to sort
of arbitrary area of memory.

29
00:01:43,860 --> 00:01:48,210
So this is allowed by languages like C,

30
00:01:48,210 --> 00:01:53,700
by weakly typed languages, but strongly
typed languages do not allow it.

31
00:01:53,700 --> 00:01:56,600
So they would not allow you
to do point arithmetic, and

32
00:01:56,600 --> 00:01:58,190
it's going to be impossible.

33
00:01:58,190 --> 00:02:01,650
And so the answer is it's impossible for
strongly typed.

34
00:02:01,650 --> 00:02:02,910
So the answer here would be S.
