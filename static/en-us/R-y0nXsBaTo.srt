1
00:00:00,370 --> 00:00:02,870
The right choice is the design priorities of

2
00:00:02,870 --> 00:00:05,890
Mach. First of all, I already mentioned that the

3
00:00:05,890 --> 00:00:08,620
number that I showed you for Mach's performance

4
00:00:08,620 --> 00:00:12,670
for user to kernel switch, is on the same

5
00:00:12,670 --> 00:00:16,620
processing hardware as L3 uses, and therefore there

6
00:00:16,620 --> 00:00:19,860
is no cheating here, and the Liedtke may be

7
00:00:19,860 --> 00:00:22,490
smaller but that's not the reason either. And

8
00:00:22,490 --> 00:00:25,760
it is not because microkernels are slow by definition,

9
00:00:25,760 --> 00:00:30,560
but it is because of the fact that the design priorities of Mach was

10
00:00:30,560 --> 00:00:34,820
different. And in particular, Mach's design priority

11
00:00:34,820 --> 00:00:37,330
was not just extensibility of an operating

12
00:00:37,330 --> 00:00:40,670
system, but also portability. And we will

13
00:00:40,670 --> 00:00:44,000
talk more about how that portability design

14
00:00:44,000 --> 00:00:48,410
consideration comes into play. In the performance

15
00:00:48,410 --> 00:00:50,770
of an operating system later on. But at

16
00:00:50,770 --> 00:00:54,290
this point I just want you to understand that the

17
00:00:54,290 --> 00:01:00,520
reason why Mach took significantly more time for this border crossing

18
00:01:00,520 --> 00:01:03,510
compared to L3 micro kernel. Is nothing to do with the

19
00:01:03,510 --> 00:01:06,970
structure of the micro kernel. It is only the design priorities.
