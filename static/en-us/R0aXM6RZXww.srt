1
00:00:00,260 --> 00:00:06,180
For a generalized Hough transform, it was easy when we had a specific shape,

2
00:00:06,180 --> 00:00:12,100
because based upon, our equations for a single point in an image or

3
00:00:12,100 --> 00:00:15,330
a single feature or single edge line, we would know how to vote, we would

4
00:00:15,330 --> 00:00:19,170
essentially solve for the equation that would tell us how to vote in the bins.

5
00:00:19,170 --> 00:00:23,391
But if you have an arbitrary shape, how do you know how to vote?

6
00:00:23,391 --> 00:00:26,360
Well, the way you do this is, you build what's called a Hough table.

7
00:00:26,360 --> 00:00:28,924
It was actually called an R-table in the original article but

8
00:00:28,924 --> 00:00:30,164
I think of it as a Hough table.

9
00:00:30,164 --> 00:00:34,302
The way it works is as follows, for each boundary point, and here we have our

10
00:00:34,302 --> 00:00:38,568
first one P1, what we do is, we compute a displacement or an r vector from that

11
00:00:38,568 --> 00:00:42,704
point to, here I've got it as the center, but it's some reference point,

12
00:00:42,704 --> 00:00:47,130
this is the point that we're going to use to locate the object, all right.

13
00:00:47,130 --> 00:00:50,420
And we measure that r, that's a displacement vector.

14
00:00:50,420 --> 00:00:56,690
The next thing we do is, we compute the gradient, and edge orientation.

15
00:00:56,690 --> 00:00:59,730
And what, and what we do is, we take that r, and

16
00:00:59,730 --> 00:01:03,531
we put it into a table that's indexed by theta, all right.

17
00:01:03,531 --> 00:01:07,162
So if we had some other point, that had the same theta,

18
00:01:07,162 --> 00:01:10,738
it would also add its r to exactly the same table location.

19
00:01:10,738 --> 00:01:12,378
So you would have multiple displacements, and

20
00:01:12,378 --> 00:01:13,941
I'll show you an example of that in a minute.

21
00:01:13,941 --> 00:01:17,774
But the idea is that you create the r based upon the offset, and

22
00:01:17,774 --> 00:01:19,480
then you index it by theta.

23
00:01:19,480 --> 00:01:22,718
Here's our second point P2, it has a different theta, and

24
00:01:22,718 --> 00:01:25,586
there would be a different r entered into that table.

25
00:01:25,586 --> 00:01:29,670
So we store the displacements in a table indexed by theta.

26
00:01:30,800 --> 00:01:33,461
At recognition, we essentially go backwards.

27
00:01:33,461 --> 00:01:38,933
What we do is, at every boundary point, we compute the theta that's there.

28
00:01:38,933 --> 00:01:39,612
By the way, for

29
00:01:39,612 --> 00:01:42,870
now we're assuming that the orientation of the object doesn't change.

30
00:01:42,870 --> 00:01:45,660
In a minute, I'll show you how to solve it when, well more than a minute,

31
00:01:45,660 --> 00:01:48,860
I'll show you how to solve this when the orientation does change.

32
00:01:48,860 --> 00:01:54,280
So at every boundary point, here's P1, we figure out the orientation, we go

33
00:01:54,280 --> 00:01:59,210
into our table, we find all of the displacement vectors that are associated with

34
00:01:59,210 --> 00:02:02,150
that orientation, so there's going to be this one, maybe there were some

35
00:02:02,150 --> 00:02:07,090
others as well, but we're definitely going to vote with this one for this point.

36
00:02:07,090 --> 00:02:09,957
Then later at P2, we find its orientation,

37
00:02:09,957 --> 00:02:15,170
we find all the displacement vectors that are associated with that orientation.

38
00:02:15,170 --> 00:02:17,805
That one's going to, definitely has this one, so this votes as well.

39
00:02:17,805 --> 00:02:19,417
And the whole idea is that the,

40
00:02:19,417 --> 00:02:22,960
the correct reference point gathers a whole bunch of votes.

41
00:02:22,960 --> 00:02:27,171
So what you're doing is, you're using this table, this R-table or Hough table,

42
00:02:27,171 --> 00:02:31,517
in order to tell each, found each point in the new test image how to vote.

43
00:02:31,517 --> 00:02:33,779
This was originally done by Dana Ballard, and

44
00:02:33,779 --> 00:02:37,491
I'll point out that this is back in 1980, 30 plus some odd years ago.

45
00:02:37,491 --> 00:02:40,923
And that's just a way of showing you that what goes around sometimes comes

46
00:02:40,923 --> 00:02:42,490
around, even in computer vision.
