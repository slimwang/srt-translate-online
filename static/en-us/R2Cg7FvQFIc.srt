1
00:00:00,110 --> 00:00:02,330
Most modern malware use packing, and

2
00:00:02,330 --> 00:00:05,580
there are many packing tools
we call packers available.

3
00:00:05,580 --> 00:00:09,400
There are many,
many ways to obfuscate malware code.

4
00:00:09,400 --> 00:00:13,010
Furthermore, there are hundreds of
thousands of malware samples released to

5
00:00:13,010 --> 00:00:17,600
the internet every day by attackers and,
like I said, most of them are packed.

6
00:00:17,600 --> 00:00:21,620
This means we cannot manually
analyze all the malware samples.

7
00:00:21,620 --> 00:00:26,600
Instead, we need automatic approach to
unpack malware and analyze malware, and

8
00:00:26,600 --> 00:00:32,320
such approach has to be universally
applicable to all the malware samples.

9
00:00:32,320 --> 00:00:35,580
An approach that we can take,
is to combine static and

10
00:00:35,580 --> 00:00:38,990
dynamic analysis to do
fine grain analysis.

11
00:00:38,990 --> 00:00:43,310
In particular, with static analysis we
look at the packed malware code, and

12
00:00:43,310 --> 00:00:46,230
we get a set of instructions
in the packed program.

13
00:00:46,230 --> 00:00:48,140
And then, we run the malware, and

14
00:00:48,140 --> 00:00:52,090
the dynamic analysis, we can
identify instructions that are not

15
00:00:52,090 --> 00:00:54,360
in the statically identified
set of instructions.

16
00:00:54,360 --> 00:00:56,990
Meaning that, these are new
instructions that we did not see in

17
00:00:56,990 --> 00:00:58,520
the packed program.

18
00:00:58,520 --> 00:01:02,490
These must be instructions that have
been unpacked just before execution.

19
00:01:02,490 --> 00:01:06,100
In other words, by identifying
instructions that we can only see one

20
00:01:06,100 --> 00:01:10,840
time, we have identified part of
the program that had been packed.

21
00:01:10,840 --> 00:01:15,240
Once we identify the unpacked code,
we can then apply other anti-malware

22
00:01:15,240 --> 00:01:19,880
techniques, including signature
scanning, to identify the malware logic.

23
00:01:19,880 --> 00:01:24,190
For example, even though after packing,
each malware instance looks different,

24
00:01:24,190 --> 00:01:25,340
the malware code,

25
00:01:25,340 --> 00:01:29,020
meaning original instructions,
once unpacked remain the same.

26
00:01:29,020 --> 00:01:34,170
Therefore, after unpacking, we can still
use a signature to identify the malware.

27
00:01:34,170 --> 00:01:36,660
For example,
the instructions that have been packed

28
00:01:36,660 --> 00:01:39,920
can be the logic that the malware
uses to do key logging, and

29
00:01:39,920 --> 00:01:43,260
a signature base approach can
identify this part of the malware.
