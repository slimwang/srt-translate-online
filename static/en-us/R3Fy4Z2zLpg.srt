1
00:00:00,440 --> 00:00:03,730
In the last lesson,
we began to define what computation is

2
00:00:03,730 --> 00:00:06,990
with a goal of eventually being precise
about what it can and cannot do.

3
00:00:08,130 --> 00:00:12,370
We said that the input to any
computation can be expressed as a string

4
00:00:12,370 --> 00:00:14,740
and may assume that whatever
the instructions that were for

5
00:00:14,740 --> 00:00:19,060
turning input into output, that these
two could be expressed as a string.

6
00:00:19,060 --> 00:00:20,340
Using a counting argument,

7
00:00:20,340 --> 00:00:23,880
we were able to show that there were
some functions that were not computable.

8
00:00:23,880 --> 00:00:26,910
In this lesson we're going to look
at how input gets turned into

9
00:00:26,910 --> 00:00:28,120
output more closely.

10
00:00:28,120 --> 00:00:30,000
Specifically, we're going to
study the Turing machine and

11
00:00:30,000 --> 00:00:32,020
the classical model of computation.

12
00:00:32,020 --> 00:00:34,750
As we'll see in a later lesson, Turing
machines can do everything that we

13
00:00:34,750 --> 00:00:37,880
consider as computation and
because of their simplicity

14
00:00:37,880 --> 00:00:41,880
they are a terrific tool for studying
computation and its limitations.

15
00:00:41,880 --> 00:00:44,870
Massively parallel machines,
quantum computers,

16
00:00:44,870 --> 00:00:47,980
they can't doing anything a that
a Turing machine can't do.

17
00:00:47,980 --> 00:00:50,640
Turing machines were never
intended to be practical but

18
00:00:50,640 --> 00:00:54,260
nevertheless several have been built for
illustrative purposes.

19
00:00:54,260 --> 00:00:56,810
Including this one, from Mike Davey.

20
00:00:56,810 --> 00:01:00,360
The input to the machine is a tape, unto
which the string input has been written.

21
00:01:01,480 --> 00:01:02,720
Using a read right head,

22
00:01:02,720 --> 00:01:07,200
the machine turns input into output,
through a series of steps.

23
00:01:07,200 --> 00:01:10,250
At each step,
a decision is made about whether and

24
00:01:10,250 --> 00:01:13,620
what to write to the tape, and whether
to move it to the right or to the left.

25
00:01:14,760 --> 00:01:17,580
This decision is based
on exactly two things.

26
00:01:17,580 --> 00:01:20,330
The current symbol under
the read write head and

27
00:01:20,330 --> 00:01:22,140
something called the machine state.

28
00:01:22,140 --> 00:01:25,080
Which also gets updated
as the symbol is written.

29
00:01:25,080 --> 00:01:28,090
That's it.
The machine stops when is reaches one of

30
00:01:28,090 --> 00:01:31,310
two halting states,
named accept and reject.

31
00:01:31,310 --> 00:01:35,760
Usually we're interested in which of
these two states the machine halts in.

32
00:01:35,760 --> 00:01:39,400
Though when we want to compute
functions from strings to strings,

33
00:01:39,400 --> 00:01:42,350
then we pay attention to
the tape contents instead.

34
00:01:42,350 --> 00:01:46,540
It's a very interesting historical
note that in Alan Turing's 1936 paper,

35
00:01:46,540 --> 00:01:50,230
in which he first proposed this model,
the inspiration does not seem to come

36
00:01:50,230 --> 00:01:53,070
from any thought of
an electromechanical device, but

37
00:01:53,070 --> 00:01:55,370
rather from the experience of
doing computations on paper.

38
00:01:56,508 --> 00:02:01,520
In section 9 he starts from the idea
of a person who he calls the computer,

39
00:02:01,520 --> 00:02:03,320
working with pen and paper, and

40
00:02:03,320 --> 00:02:08,180
then argues that his proposed machine
can do what this person does.

41
00:02:08,180 --> 00:02:12,520
So here I am, a computer,
with my pen and paper.

42
00:02:12,520 --> 00:02:17,630
And we'll follow Turing's argument
that his machine can do what I can.

43
00:02:17,630 --> 00:02:19,080
Let's take an example.

44
00:02:19,080 --> 00:02:23,373
He's talking about computable numbers,
so I'll compute a very simple number,

45
00:02:23,373 --> 00:02:25,685
Alan Turing's age when
he wrote the paper.

46
00:02:25,685 --> 00:02:30,470
So we'll take 1936- 1912,
which is equal to 24.

47
00:02:30,470 --> 00:02:34,640
He argues that any calculation
like this can be done on a grid.

48
00:02:34,640 --> 00:02:37,370
Like a child's arithmetic book her says.

49
00:02:37,370 --> 00:02:40,600
I assume he means something
like wide ruled graph paper.

50
00:02:40,600 --> 00:02:45,460
He argues that all the symbols can be
made to fit inside one of these squares.

51
00:02:45,460 --> 00:02:48,230
Then he argues that the fact
that the grid is two dimensional

52
00:02:48,230 --> 00:02:49,890
is just a convenience.

53
00:02:49,890 --> 00:02:54,420
So he takes away the paper and says
that computation can be done on a tape.

54
00:02:54,420 --> 00:02:57,650
As someone who has to carry out the
computation, I don't much care for this.

55
00:02:57,650 --> 00:02:59,510
But I can still do my job.

56
00:02:59,510 --> 00:03:02,610
Then he points out that there are limits
to the width of my perception.

57
00:03:02,610 --> 00:03:06,320
So if I happen to be reading
a very long mathematical paper,

58
00:03:06,320 --> 00:03:10,980
the phrase "hence (applying this
big Theorem number) we have.

59
00:03:10,980 --> 00:03:12,130
Then when I look back,

60
00:03:12,130 --> 00:03:15,140
I probably wouldn't be sure at a glance
that I had found the right theorem.

61
00:03:15,140 --> 00:03:19,190
I would have to check, maybe three or
four digits at a time,

62
00:03:19,190 --> 00:03:22,740
crossing off the ones I had matched,
so as not to lose my place.

63
00:03:22,740 --> 00:03:23,720
Something like this.

64
00:03:23,720 --> 00:03:29,080
So I match the first four,
then the next four, and so on.

65
00:03:29,080 --> 00:03:30,340
And so forth.

66
00:03:30,340 --> 00:03:34,220
Eventually, I will have matched them
all and can re-read the theorem.

67
00:03:34,220 --> 00:03:37,630
Now, since Alan Turing was going for
the simplest machine possible,

68
00:03:37,630 --> 00:03:42,615
he takes this idea to extreme and only
lets me read one symbol at a time and

69
00:03:42,615 --> 00:03:46,745
only move right or left one square
on the tape at a time trusting

70
00:03:46,745 --> 00:03:51,885
to the strategy of making marks on the
tape like I did with this theorem here,

71
00:03:51,885 --> 00:03:56,085
and my state mind to accomplish
the same things as I would

72
00:03:56,085 --> 00:03:58,620
under normal operation with pen and
paper.

73
00:03:58,620 --> 00:04:02,020
And with those rules,
I have become a Turing machine.

74
00:04:02,020 --> 00:04:06,690
So that's the inspiration, not
a futuristic vision of the digital age,

75
00:04:06,690 --> 00:04:10,820
but probably Alan Turing's own
everyday experience of computing

76
00:04:10,820 --> 00:04:12,480
with pen and paper.
