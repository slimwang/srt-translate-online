1
00:00:00,320 --> 00:00:02,630
So we end up with an objectized structure of

2
00:00:02,630 --> 00:00:05,980
the virtual memory manager that looks like this. That you

3
00:00:05,980 --> 00:00:10,120
have a process object that is equivalent to a PCB

4
00:00:10,120 --> 00:00:12,800
in the traditional setting. And of course there's a TLB

5
00:00:12,800 --> 00:00:16,040
on the processor that's going to be maintained even in

6
00:00:16,040 --> 00:00:19,340
hardware or software depending on the architecture. Because architectures do

7
00:00:19,340 --> 00:00:21,500
it in hardware, some architectures leave it up to the

8
00:00:21,500 --> 00:00:25,480
software to manage the TLB. And the region object Is,

9
00:00:25,480 --> 00:00:27,610
as they said, a portion of the

10
00:00:27,610 --> 00:00:30,980
address piece. So essentially, the page table data

11
00:00:30,980 --> 00:00:34,340
structure is split into these region objects.

12
00:00:34,340 --> 00:00:37,610
And the regionobjects, there is a file cache

13
00:00:37,610 --> 00:00:42,680
manager that knows the location of the

14
00:00:42,680 --> 00:00:46,010
files on the backing store that corresponds to

15
00:00:46,010 --> 00:00:48,050
the a particular region. So the file

16
00:00:48,050 --> 00:00:51,290
cash manager is responsible for backing this region.

17
00:00:51,290 --> 00:00:54,420
And this file cache manager interacts with the

18
00:00:54,420 --> 00:00:56,820
DRAM manager in order to get a physical

19
00:00:56,820 --> 00:00:59,350
frame because when there is a page fault

20
00:00:59,350 --> 00:01:02,230
in a particular region, the file cache manager has

21
00:01:02,230 --> 00:01:04,750
to contact the DRAM object in order to

22
00:01:04,750 --> 00:01:08,140
get a physical page frame. And, once it gets

23
00:01:08,140 --> 00:01:11,070
the physical page frame, it kicks off this

24
00:01:11,070 --> 00:01:16,180
COR, which we said is the cached object representation.

25
00:01:16,180 --> 00:01:21,580
Of a page. It [UNKNOWN] this COR object to say, well, here is a page frame for

26
00:01:21,580 --> 00:01:26,730
you and here is the page on the disk. Go do it. And it is the responsibility of

27
00:01:26,730 --> 00:01:31,080
the cached object representation to populate the physical page

28
00:01:31,080 --> 00:01:34,810
frame by doing I/O with the disk in order

29
00:01:34,810 --> 00:01:38,160
to move this page from the disk representation into

30
00:01:38,160 --> 00:01:41,380
a memory representation. So, this is sort of the

31
00:01:41,380 --> 00:01:45,750
structure of the objectized virtual memory manager and

32
00:01:45,750 --> 00:01:50,180
depending on the region of the virtual memory space

33
00:01:50,180 --> 00:01:53,570
that you're accessing the path that a particular

34
00:01:53,570 --> 00:01:55,730
page fault may take will be different. if you're

35
00:01:55,730 --> 00:01:58,580
accessing a page that is in the green

36
00:01:58,580 --> 00:02:00,830
region then this is a path that is going to

37
00:02:00,830 --> 00:02:03,070
be taken by the page fault handler and

38
00:02:03,070 --> 00:02:06,560
similarly... If the page fault happens to be in

39
00:02:06,560 --> 00:02:08,800
the purple region then this is the path that's going to

40
00:02:08,800 --> 00:02:12,220
be taken by the page fault handler. So, logically given

41
00:02:12,220 --> 00:02:16,560
the structure, let's think about what is the work flow

42
00:02:16,560 --> 00:02:19,680
in handling a page fault with this objectized structure of

43
00:02:19,680 --> 00:02:23,280
the virtual menu manager. The third T1 is executing poor

44
00:02:23,280 --> 00:02:25,920
guy, and it incurs a page fault. And when it

45
00:02:25,920 --> 00:02:29,030
incurs a page fault, it goes to a process object.

46
00:02:29,030 --> 00:02:32,000
And the process object is able to say, say given

47
00:02:32,000 --> 00:02:35,740
the virtual page number, what region is that

48
00:02:35,740 --> 00:02:39,300
particular page fault falling into? So, that's the

49
00:02:39,300 --> 00:02:42,070
region that we want to go to in order

50
00:02:42,070 --> 00:02:45,000
to service the page fault. So that region object

51
00:02:45,000 --> 00:02:48,360
is then going to contact the file cache

52
00:02:48,360 --> 00:02:52,110
manager. That corresponds to this region object and

53
00:02:52,110 --> 00:02:54,220
to the file and the file cache manager

54
00:02:54,220 --> 00:02:57,820
is going to do two things. One, it's going to see

55
00:02:57,820 --> 00:03:02,220
what exactly is the backing file for that particular

56
00:03:02,220 --> 00:03:05,260
virtual that is missing. So it may be that it

57
00:03:05,260 --> 00:03:08,420
is a file that contains multiple pages. And so it's

58
00:03:08,420 --> 00:03:10,800
going to say file and offset. And that is going

59
00:03:10,800 --> 00:03:12,660
to be the information that has to be passed

60
00:03:12,660 --> 00:03:16,510
on to the COR object. Saying that, here is a

61
00:03:16,510 --> 00:03:18,920
file, and here is the offset in the file. And

62
00:03:18,920 --> 00:03:22,870
that's where the faulty page content can be found on

63
00:03:22,870 --> 00:03:27,690
the storage device. And of course FCM has to get a physical frame. So it

64
00:03:27,690 --> 00:03:32,710
contacts the DRAM object in order to get a physical frame. And so once it

65
00:03:32,710 --> 00:03:38,200
has the physical frame and it has the actual location of the file

66
00:03:38,200 --> 00:03:43,110
then the COR object can preform the IO and pull the

67
00:03:43,110 --> 00:03:47,930
data from the disc into the DRAM. And so

68
00:03:47,930 --> 00:03:50,420
now the p frame, the page frame that has

69
00:03:50,420 --> 00:03:54,410
been allocated for backing this particular virtual page, has

70
00:03:54,410 --> 00:03:57,390
now populated because of the I/O being complete. So

71
00:03:57,390 --> 00:03:59,745
the green arrows is showing you the completion of the

72
00:03:59,745 --> 00:04:02,490
I/O. As a result of that, you've got the

73
00:04:02,490 --> 00:04:05,600
page frame containing the contents of the virtual page

74
00:04:05,600 --> 00:04:08,210
that was missing in the first place. And once

75
00:04:08,210 --> 00:04:13,010
that is available, then the FCM can indicate to the

76
00:04:13,010 --> 00:04:16,149
region that your page fault service is complete. And

77
00:04:16,149 --> 00:04:18,920
at that point, the region can go through the

78
00:04:18,920 --> 00:04:22,120
process object in order to update the TLB, in

79
00:04:22,120 --> 00:04:25,590
order to indicate that now there is a mapping

80
00:04:25,590 --> 00:04:27,910
between the virtual page and the physical frame that

81
00:04:27,910 --> 00:04:30,930
is being populated in physical memory And now the

82
00:04:30,930 --> 00:04:33,750
process can be resumed. So this is the, the

83
00:04:33,750 --> 00:04:38,470
flow of information in order to make the process

84
00:04:38,470 --> 00:04:41,550
runnable again, which faltered on the first place on a,

85
00:04:41,550 --> 00:04:44,920
on a virtual page that is missing in physical memory.

86
00:04:44,920 --> 00:04:47,310
So, now that we have this flow, and we also

87
00:04:47,310 --> 00:04:50,950
mentioned that the cluster object has a single representation. When it

88
00:04:50,950 --> 00:04:53,570
is a region, it's a region. Now how do we

89
00:04:53,570 --> 00:04:57,740
replicate a region object? Should this be a singleton object,

90
00:04:57,740 --> 00:05:00,300
should we replicate it, should this region object be a

91
00:05:00,300 --> 00:05:03,500
singleton object, should it be replicated? If you're going to replicate it,

92
00:05:03,500 --> 00:05:06,230
should it be replicated for every core or a

93
00:05:06,230 --> 00:05:09,570
set of processors of, of a group of processors and

94
00:05:09,570 --> 00:05:12,110
so on? These are all the design decisions. That

95
00:05:12,110 --> 00:05:14,640
the operating system designer has to make. So let's look

96
00:05:14,640 --> 00:05:17,745
at the process object. The process object is mostly

97
00:05:17,745 --> 00:05:21,560
read-only and you can replicate it one per CPU. It's

98
00:05:21,560 --> 00:05:24,660
like a process control block, and you can make it

99
00:05:24,660 --> 00:05:28,590
one per CPU. And all the cores on the CPU

100
00:05:28,590 --> 00:05:32,830
can share this process object because ultimately, The

101
00:05:32,830 --> 00:05:35,610
TLB is a common entity for the entire

102
00:05:35,610 --> 00:05:38,420
processor and since the processed object is updating

103
00:05:38,420 --> 00:05:41,080
the TLB, we can have a single processed object

104
00:05:41,080 --> 00:05:44,340
that manages the TLB. What about the region

105
00:05:44,340 --> 00:05:47,280
object? Well, let's think about this. Now region

106
00:05:47,280 --> 00:05:50,570
represents a portion of the address space. Now

107
00:05:50,570 --> 00:05:54,040
a portion of the address space Maybe traversed by

108
00:05:54,040 --> 00:05:56,480
more than one thread. So, a set of threads

109
00:05:56,480 --> 00:05:58,540
that are running on a group of processors may

110
00:05:58,540 --> 00:06:02,550
actually access a portion of this address space. And

111
00:06:02,550 --> 00:06:05,710
we don't know a priori, how many threads may

112
00:06:05,710 --> 00:06:09,820
actually access a particular region. It's something that may

113
00:06:09,820 --> 00:06:13,040
have to evolve. Over time, but it is definitely

114
00:06:13,040 --> 00:06:16,520
a candidate for partial replication. That is, it is

115
00:06:16,520 --> 00:06:19,120
in the critical path of a page four, so let's

116
00:06:19,120 --> 00:06:22,170
partial replicate the region, not one per

117
00:06:22,170 --> 00:06:25,520
processor, but maybe for a group of processors,

118
00:06:25,520 --> 00:06:27,910
because a group of processors may be running

119
00:06:27,910 --> 00:06:31,060
threads that are accessing the same portion of

120
00:06:31,060 --> 00:06:33,000
the address space, and so we will

121
00:06:33,000 --> 00:06:36,610
replicate this region object one... For every group

122
00:06:36,610 --> 00:06:40,030
of processors. And the granularity of replication decides

123
00:06:40,030 --> 00:06:44,670
the exploitable concurrency from parallel page fault handling.

124
00:06:44,670 --> 00:06:47,840
Now, the interesting thing to notice is that the degree

125
00:06:47,840 --> 00:06:51,600
of replication and the design decision that we take for

126
00:06:51,600 --> 00:06:55,310
how we cluster, the degree of clustering that we choose

127
00:06:55,310 --> 00:06:57,730
for every one of these objects is independent of one

128
00:06:57,730 --> 00:07:00,400
another. So when we talk about the process object, we

129
00:07:00,400 --> 00:07:03,440
said that well, the process object can be one per

130
00:07:03,440 --> 00:07:07,360
CPU. And I said for region object could be applicated

131
00:07:07,360 --> 00:07:09,880
for a group of processes. Now what about the FCM

132
00:07:09,880 --> 00:07:13,380
object, FCM object is backing A region. There

133
00:07:13,380 --> 00:07:16,100
may be multiple replicas of this region, but

134
00:07:16,100 --> 00:07:21,830
all of those regions are backed by the same FCM. And therefore, what we can do

135
00:07:21,830 --> 00:07:24,780
is, the portion of the address space that

136
00:07:24,780 --> 00:07:27,890
is being backed by a particular FCM can

137
00:07:27,890 --> 00:07:29,580
be partioned. So, we can go for a

138
00:07:29,580 --> 00:07:35,310
partioned representation of this FCM. Where competition represents

139
00:07:35,310 --> 00:07:37,940
the portion of the agro space that is managed

140
00:07:37,940 --> 00:07:41,210
by this particular FCM. So, you can see that there

141
00:07:41,210 --> 00:07:44,870
is a degree of freedom in how we choose

142
00:07:44,870 --> 00:07:48,190
to replicate process object, how you we choose to the

143
00:07:48,190 --> 00:07:51,270
region objects. Of course we're partitioning the region objects,

144
00:07:51,270 --> 00:07:54,740
but once we've partitioned it, how we have replications for

145
00:07:54,740 --> 00:07:57,460
each, each of these partitioned regions is something that

146
00:07:57,460 --> 00:08:00,780
is up for grabs as an OS designer. And similarly,

147
00:08:00,780 --> 00:08:03,380
for the file cache manager, because it's backing

148
00:08:03,380 --> 00:08:06,490
a specific region, we can go for a partitioned

149
00:08:06,490 --> 00:08:09,690
representation of the FCM. And what about the

150
00:08:09,690 --> 00:08:14,460
COR, the Cached Object Representation now? Now, this object

151
00:08:14,460 --> 00:08:16,260
is the one that is really dealing with

152
00:08:16,260 --> 00:08:19,610
physically entities. It is actually doing the IO from

153
00:08:19,610 --> 00:08:22,740
the disk into the physical memory. And since we

154
00:08:22,740 --> 00:08:26,100
are dealing with physical entities, it may be appropriate

155
00:08:26,100 --> 00:08:30,480
to have a true shared object for cached

156
00:08:30,480 --> 00:08:33,929
object representation. And the, all the I/O is

157
00:08:33,929 --> 00:08:36,450
going to be managed by this cached object

158
00:08:36,450 --> 00:08:39,480
representation. Even though I'm showing you two different boxes

159
00:08:39,480 --> 00:08:42,220
here, in principle it could be a singleton

160
00:08:42,220 --> 00:08:44,850
object that is managing all of the I/O

161
00:08:44,850 --> 00:08:49,070
activity that corresponds to the virtual memory management.

162
00:08:49,070 --> 00:08:51,200
And what about the DRAM object? Now, the DRAM

163
00:08:51,200 --> 00:08:54,250
object you can have several representations for the

164
00:08:54,250 --> 00:08:57,050
DRAM object depending on how the physical memory

165
00:08:57,050 --> 00:09:00,000
is managed. For example, we may have at

166
00:09:00,000 --> 00:09:03,970
least one representation of the DRAM object for every

167
00:09:03,970 --> 00:09:09,390
DSM piece that you have in a single node's portion of the physical memory. So in

168
00:09:09,390 --> 00:09:12,090
other words, We can break up the entire

169
00:09:12,090 --> 00:09:16,220
physical memory that's available in the entire system into

170
00:09:16,220 --> 00:09:19,580
the portions that are managed individually by each

171
00:09:19,580 --> 00:09:22,470
processor. And there could be a DRAM object that

172
00:09:22,470 --> 00:09:26,000
corresponds to the physical mapped memory that is managed

173
00:09:26,000 --> 00:09:29,650
by each of those. processors, but you can go

174
00:09:29,650 --> 00:09:31,780
even finer than that if it is appropriate, but

175
00:09:31,780 --> 00:09:33,790
it is a design decision that is up to

176
00:09:33,790 --> 00:09:37,290
the designer. So we come up with an replicated

177
00:09:37,290 --> 00:09:41,210
process object, a partial replication for the region object,

178
00:09:41,210 --> 00:09:45,070
a partitioned representation for the FCM object,

179
00:09:45,070 --> 00:09:48,790
and maybe a trued shared object for COR,

180
00:09:48,790 --> 00:09:51,910
and several representations - For the DM object.

181
00:09:51,910 --> 00:09:54,580
So this is one way of thinking about

182
00:09:54,580 --> 00:09:57,380
it, but the nice thing about this objectized

183
00:09:57,380 --> 00:10:01,170
structure is that when we designed the objectized

184
00:10:01,170 --> 00:10:03,680
structure, we did not have to think about

185
00:10:03,680 --> 00:10:06,340
how we could replicate it when we actually

186
00:10:06,340 --> 00:10:10,945
populate these objects. That is a level of design decision that could be...

187
00:10:10,945 --> 00:10:13,830
[INAUDIBLE], because of the secret source, that's

188
00:10:13,830 --> 00:10:16,040
available in tornadoes is a cluster object.
