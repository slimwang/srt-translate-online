1
00:00:00,000 --> 00:00:06,000
For three procedures you were asked to determine whether they terminate

2
00:00:06,000 --> 00:00:12,000
for all inputs which are natural numbers--1, 2, 3, 4, and so on.

3
00:00:12,000 --> 00:00:18,000
When we have a while loop and its condition is True, that's always going to mean

4
00:00:18,000 --> 00:00:21,000
that the block underneath is performed.

5
00:00:21,000 --> 00:00:24,000
The loop will just keep going and going and going.

6
00:00:24,000 --> 00:00:27,000
It will never fail at the condition.

7
00:00:27,000 --> 00:00:33,000
The only way this will terminate is if something within the block causes it to terminate.

8
00:00:33,000 --> 00:00:35,000
We see we have a break here.

9
00:00:35,000 --> 00:00:39,000
Now what we have to determine is whether that break is always reached.

10
00:00:39,000 --> 00:00:42,000
Here we have n = n - 1.

11
00:00:42,000 --> 00:00:49,000
When n is a whole number, it just steps down one step at a time each time it goes through the while loop.

12
00:00:49,000 --> 00:00:52,000
Eventually, it will reach 0.

13
00:00:52,000 --> 00:01:00,000
So this condition here will succeed, and the break will be reached for all natural numbers n.

14
00:01:00,000 --> 00:01:03,000
The procedure will return 3.

15
00:01:03,000 --> 00:01:07,000
For this one, it does terminate for all inputs n.

16
00:01:07,000 --> 00:01:12,000
For procedure 2, we can give an example when n = 4.

17
00:01:12,000 --> 00:01:14,000
Let's see what happens.

18
00:01:14,000 --> 00:01:17,000
Is n equal to 0? No, it's not.

19
00:01:17,000 --> 00:01:23,000
We return 1 plus the procedure 4 - 2, which is 2.

20
00:01:23,000 --> 00:01:29,000
Then we look to see if we put 2 in here for n, then, no, n isn't 0.

21
00:01:29,000 --> 00:01:34,000
We return 1 plus the procedure of 2 - 2, which is 0,

22
00:01:34,000 --> 00:01:41,000
and call it again with 0. N is 0 so it returns 0. That works okay.

23
00:01:41,000 --> 00:01:43,000
But what happens if n = 5?

24
00:01:43,000 --> 00:01:51,000
When we get here, n - 2 = 3, so we call the procedure again with n equals 3.

25
00:01:51,000 --> 00:01:54,000
N is not 0, so we come to here again.

26
00:01:54,000 --> 00:01:59,000
This time we have n is 3, 3 - 2 is 1.

27
00:01:59,000 --> 00:02:05,000
Call the procedure again with n is 1. N is not 0, and we come to here again.

28
00:02:05,000 --> 00:02:13,000
We call the procedure with n - 2, which is 1 - 2, which is -1.

29
00:02:13,000 --> 00:02:19,000
We've missed 0, and we're never going to get to 0, because we're always decreasing n.

30
00:02:19,000 --> 00:02:22,000
This procedure will not terminate for some n.

31
00:02:22,000 --> 00:02:26,000
In fact, it won't terminate for any of the odd numbers.

32
00:02:26,000 --> 00:02:30,000
For the final procedure--will this terminate?

33
00:02:30,000 --> 00:02:32,000
We put in the value of n, and we call it again.

34
00:02:32,000 --> 00:02:38,000
We can see that we're decreasing n by 1, by 2, and by 3.

35
00:02:38,000 --> 00:02:43,000
For large n, we don't need to think about it, but what happens when we get near the base case?

36
00:02:43,000 --> 00:02:47,000
Are we going to always be able to terminate or not?

37
00:02:47,000 --> 00:02:53,000
If the input is 6, we're going to get 5, 4, and 3.

38
00:02:53,000 --> 00:02:56,000
The 3 will be okay.

39
00:02:56,000 --> 00:03:02,000
Then on the next round when we have 5, if we input 5, we'd have 4, 3, and 2.

40
00:03:02,000 --> 00:03:06,000
Well, that will be okay, because 2 will be less than or equal to 3.

41
00:03:06,000 --> 00:03:12,000
If n is 4, then we're going to have 3, 2, and 1. That's okay.

42
00:03:12,000 --> 00:03:14,000
All of these are small enough.

43
00:03:14,000 --> 00:03:20,000
When n gets small, we don't have a problem because of the less than or equals,

44
00:03:20,000 --> 00:03:26,000
which means this is going to terminate for all natural numbers n as well.

45
00:03:26,000 --> 00:03:29,000
The correct answer is that procedure 1 will terminate,

46
00:03:29,000 --> 00:03:36,000
procedure 2 will not terminate for all n, and procedure 3 will terminate.
