1
00:00:00,310 --> 00:00:04,854
We've seen that 3JS can't easily let us position and rotate the hand of a clock

2
00:00:04,854 --> 00:00:09,542
in place. The problem is that 3Js rotates and then positions when we like to do

3
00:00:09,542 --> 00:00:14,245
these in the opposite order. One simple solution that 3JS provides is to use

4
00:00:14,245 --> 00:00:19,414
Object 3D to make a new object that contains our clock hand. Here's the code for

5
00:00:19,414 --> 00:00:24,290
how to do this. What is happening here is that the block is nested inside the

6
00:00:24,290 --> 00:00:28,556
clock hand object. The translation moves the block so that one end is over the

7
00:00:28,556 --> 00:00:32,725
center of the clock face so that the hand will rotate around the clock properly.

8
00:00:32,725 --> 00:00:36,755
By putting this object into the clock hand, I'm saying that I want to use the

9
00:00:36,755 --> 00:00:41,898
block in its current position. I can then apply an additional scale, rotate and

10
00:00:41,898 --> 00:00:46,390
translate. In this case I just want to rotate. The final line of code adds the

11
00:00:46,390 --> 00:00:50,660
clockHand object to the scene. That's 1 way to look at Object3D. It adds more

12
00:00:50,660 --> 00:00:54,862
transforms into the list that you can then use. We now have some six transforms

13
00:00:54,862 --> 00:00:58,560
that we can set in this system. Here's the conceptual diagram of the whole idea.

14
00:00:58,560 --> 00:01:04,058
We create a block and we can scale, rotate and translate that block. Then by

15
00:01:04,058 --> 00:01:08,730
putting it inside an Object 3D called clockHand, we get an additional scale,

16
00:01:08,730 --> 00:01:12,983
rotate and translate that wen can apply. Here's a more compact way to write out

17
00:01:12,983 --> 00:01:17,902
the order of transforms. The object at scale, rotated and translated and then

18
00:01:17,902 --> 00:01:22,866
scaled, rotated and translated again. This looks a bit crazy, I've put the order

19
00:01:22,866 --> 00:01:26,724
of the transform from right to left. There is a reason for this and we'll talk

20
00:01:26,724 --> 00:01:30,648
about it when we get to matrices. For now just believe me that this is how most

21
00:01:30,648 --> 00:01:35,466
computer graphics text show a series of transforms. The way I remember this

22
00:01:35,466 --> 00:01:40,458
order is by the word trash. There's TRS in that word in the proper notational

23
00:01:40,458 --> 00:01:44,758
order. I guess I could use the word trees instead and not have to worry about

24
00:01:44,758 --> 00:01:49,450
the h, but I like trash, as it reminds me of the TRS80. Called the TRASH 80 for

25
00:01:49,450 --> 00:01:53,530
short, one of the first personal computers. From back when programs were stored

26
00:01:53,530 --> 00:01:57,876
on cassette tapes, once upon a time, this computer ruled the earth. In 1979, it

27
00:01:57,876 --> 00:02:03,458
had the largest selection of software for any PC. Trs then is the order to

28
00:02:03,458 --> 00:02:08,471
remember. In our case, just the boxes translation and the clock hands rotation

29
00:02:08,471 --> 00:02:12,948
are used. This gets us the combination we want. Translates so there's a new

30
00:02:12,948 --> 00:02:17,231
origin and then rotate around this origin. Adding a whole Object 3D to get a

31
00:02:17,231 --> 00:02:22,195
single additional transform seems like overkill, but really it doesn't add much

32
00:02:22,195 --> 00:02:22,573
code.
