1
00:00:00,190 --> 00:00:04,456
So remember what happened when we're
talking about smashing the stack for

2
00:00:04,456 --> 00:00:09,280
fun and profit, you overflow the buffer
and go down where the return address is

3
00:00:09,280 --> 00:00:13,452
stored and then you change that if you
going to alter the program execution.

4
00:00:13,452 --> 00:00:16,790
So actually had to do two things,
you had to change the return address and

5
00:00:16,790 --> 00:00:20,620
then you had to send the return
should happen to your shellcode

6
00:00:20,620 --> 00:00:22,380
where the exploit code is.

7
00:00:22,380 --> 00:00:27,690
So you overwrite that, the return
address, so this is going to be true.

8
00:00:27,690 --> 00:00:28,470
It's correct.

9
00:00:28,470 --> 00:00:32,210
The second says pushing data onto
the stack to overflow the stack

10
00:00:32,210 --> 00:00:33,850
into the heap.

11
00:00:33,850 --> 00:00:37,090
The heap and
stack are sort of separated,

12
00:00:37,090 --> 00:00:42,280
the buffer overflow, although the heap
overflows and stack overflows,

13
00:00:42,280 --> 00:00:47,780
but going from stack to heap is not what
we discussed, so that's not correct.

14
00:00:47,780 --> 00:00:51,799
And popping data off the stack
doesn't do anything for you either,

15
00:00:51,799 --> 00:00:56,630
because you need to actually alter the
return address and go to exploit code.

16
00:00:56,630 --> 00:01:00,340
Neither of these two, second and third
options are going to let you do that.

17
00:01:00,340 --> 00:01:03,320
So, the way to think about this
is overflowing the buffer to

18
00:01:03,320 --> 00:01:04,610
change the return address.

19
00:01:04,610 --> 00:01:09,700
So essentially what you're doing
now write into a location.

20
00:01:09,700 --> 00:01:11,060
So keep that in mind.

21
00:01:11,060 --> 00:01:12,910
Where is this location?

22
00:01:12,910 --> 00:01:13,620
On the stack.
