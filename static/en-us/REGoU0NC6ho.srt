1
00:00:00,360 --> 00:00:02,740
Next we move onto the link layer. If every link between

2
00:00:02,740 --> 00:00:06,300
computers were a dedicated permanent point to point connection, then most of

3
00:00:06,300 --> 00:00:07,660
us decided that two machines should

4
00:00:07,660 --> 00:00:09,770
communicate it would be relatively straightforward

5
00:00:09,770 --> 00:00:12,740
to arrange for them to do so. The challenges here are mostly

6
00:00:12,740 --> 00:00:15,660
solved by breaking up larger chunks of data into more manageable

7
00:00:15,660 --> 00:00:19,030
chunks and putting them inside a frame. Which in addition to the

8
00:00:19,030 --> 00:00:23,120
data payload, would contain some metadata, its length for instance. And probably

9
00:00:23,120 --> 00:00:25,410
some kind of check zone as well to see if the data

10
00:00:25,410 --> 00:00:28,460
was corrupted in transmission. The situation becomes much more

11
00:00:28,460 --> 00:00:31,960
interesting when multiple nodes all share the same medium. Think

12
00:00:31,960 --> 00:00:34,100
of the cable line that carries the internet traffic in

13
00:00:34,100 --> 00:00:37,800
your neighborhood. In that case, we have multiple nodes, the

14
00:00:37,800 --> 00:00:41,670
modems in your houses, all connected to the same wire.

15
00:00:41,670 --> 00:00:45,290
This is called a bus topology. Actually, the original ethernet

16
00:00:45,290 --> 00:00:48,300
had this topology, with all the cables all connected to

17
00:00:48,300 --> 00:00:51,800
a common hub, making it look like a start topology.

18
00:00:51,800 --> 00:00:54,560
In reality, the hub would simply relay whatever signal it

19
00:00:54,560 --> 00:00:58,700
got to all the other nodes effectively making all the

20
00:00:58,700 --> 00:01:01,980
cables one medium. In terms of physical hardware this is

21
00:01:01,980 --> 00:01:04,660
attractive because we don't have to run wires between every pair

22
00:01:04,660 --> 00:01:07,410
of machines on the local network. It does however mean

23
00:01:07,410 --> 00:01:10,820
that messages themselves have to specify who they are for and

24
00:01:10,820 --> 00:01:13,050
who sent them. In the case of ethernet on a

25
00:01:13,050 --> 00:01:17,100
local area network like a home, office or a server cluster,

26
00:01:17,100 --> 00:01:20,130
nics are usually identified through a unique 48 bit MAC

27
00:01:20,130 --> 00:01:24,020
address. MAC standing for media access control. If you have

28
00:01:24,020 --> 00:01:25,860
a router or a modem at home you can probably

29
00:01:25,860 --> 00:01:28,860
find the MAC address printed on the box. On a Unix-like

30
00:01:28,860 --> 00:01:31,220
machine, you can find your MAC address of your network

31
00:01:31,220 --> 00:01:36,280
interfaces with ifconfig than pipe it out to grep for ether.

32
00:01:36,280 --> 00:01:39,280
The MAC source and MAC destination have designated spots in

33
00:01:39,280 --> 00:01:42,520
the Ethernet frame. When the frame is sent through the medium,

34
00:01:42,520 --> 00:01:45,970
all the nodes will receive it. But only the one whose MAC

35
00:01:45,970 --> 00:01:48,550
address matches the frame destination should

36
00:01:48,550 --> 00:01:50,780
pay attention. The rest simply ignore it.
