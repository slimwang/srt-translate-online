1
00:00:00,000 --> 00:00:05,000
One last concept I'd like to discuss regarding indexes

2
00:00:05,000 --> 00:00:07,000
is for using them for sorting.

3
00:00:07,000 --> 00:00:10,000
So far we've been talking about using a hashtable

4
00:00:10,000 --> 00:00:12,000
to create an index,

5
00:00:12,000 --> 00:00:15,000
but one of the characteristics of a hashtable is that it's not sorted.

6
00:00:15,000 --> 00:00:19,000
A hashtable is just a mapping of keys to values,

7
00:00:19,000 --> 00:00:21,000
and if you remember how they're implemented,

8
00:00:21,000 --> 00:00:24,000
they're implemented as a big array

9
00:00:24,000 --> 00:00:26,000
with all these fields,

10
00:00:26,000 --> 00:00:29,000
and inside these fields are these keys that

11
00:00:29,000 --> 00:00:32,000
are basically the hashed version of sum value.

12
00:00:32,000 --> 00:00:35,000
If you add a new element into your hashtable,

13
00:00:35,000 --> 00:00:38,000
the new element can go into any one of these cells.

14
00:00:38,000 --> 00:00:41,000
It could be the case that this key was added last.

15
00:00:41,000 --> 00:00:45,000
It just happens that that key hashed to this position zero in the hashtable.

16
00:00:45,000 --> 00:00:48,000
So we lose our sorting information when we use a hashtable.

17
00:00:48,000 --> 00:00:53,000
And we saw some SQL queries before that used the order by statement.

18
00:00:53,000 --> 00:00:55,000
Obviously that requires some sort of sorting.

19
00:00:55,000 --> 00:00:59,000
So there's a different type of mapping we can use, and this is called a tree.

20
00:00:59,000 --> 00:01:02,000
Trees are a basic data structure

21
00:01:02,000 --> 00:01:04,000
that accomplish something similar to a hashtable,

22
00:01:04,000 --> 00:01:07,000
but they have the nice property that they are sorted.

23
00:01:07,000 --> 00:01:11,000
Why would you ever use a hashtable when you can use a tree instead?

24
00:01:11,000 --> 00:01:15,000
Well, the downside is that the lookups are slower.

25
00:01:15,000 --> 00:01:17,000
Hashtable's lookups are faster.

26
00:01:17,000 --> 00:01:20,000
So I don't think we've talked about these algorithms yet in 101,

27
00:01:20,000 --> 00:01:26,000
but basically a hash table has constant time lookup,

28
00:01:26,000 --> 00:01:30,000
which means that generally looking up any particular key

29
00:01:30,000 --> 00:01:34,000
in our hashtable is not a function of the number of keys in the hashtable.

30
00:01:34,000 --> 00:01:36,000
Their inserting can be a little hazardous.

31
00:01:36,000 --> 00:01:39,000
Remember those collisions. I think you talked about that in 101.

32
00:01:39,000 --> 00:01:42,000
But in general, the lookups are going to be constant time.

33
00:01:42,000 --> 00:01:46,000
And in a tree, the lookups are going to be roughly a function of log n,

34
00:01:46,000 --> 00:01:50,000
where n is the number of elements in a tree.

35
00:01:50,000 --> 00:01:53,000
So lookup speed decreases with

36
00:01:53,000 --> 00:01:55,000
the size of the tree.

37
00:01:55,000 --> 00:01:58,000
And depending on what you're going to use your index for,

38
00:01:58,000 --> 00:02:00,000
you may choose to use a hashtable or a tree.

39
00:02:00,000 --> 00:02:02,000
Many databases let you choose.

40
00:02:02,000 --> 00:02:05,000
Some actually don't, or some choose for you.

41
00:02:05,000 --> 00:02:08,000
Interesting property of indexes used by most relational databases

42
00:02:08,000 --> 00:02:10,000
is that they preserve sorting,

43
00:02:10,000 --> 00:02:12,000
and there's some cool things we can do with that.

44
00:02:12,000 --> 00:02:17,000
One is that if you wanted to find all of the links in your database sorted by votes,

45
00:02:17,000 --> 00:02:19,000
if you created an index on votes,

46
00:02:19,000 --> 00:02:21,000
that would be a very, very fast query.

47
00:02:21,000 --> 00:02:23,000
You would just go to the front of your tree--

48
00:02:23,000 --> 00:02:26,000
your index on votes--and just read off the links.

49
00:02:26,000 --> 00:02:30,000
And I'd like to show you how we use that at Reddit to make the hot algorithm work.
