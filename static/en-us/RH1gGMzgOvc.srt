1
00:00:00,530 --> 00:00:04,580
The process of improving application
performance can be a daunting task, but

2
00:00:04,580 --> 00:00:06,290
it's actually much simpler than that.

3
00:00:06,290 --> 00:00:09,210
Once you shift gears into
focusing on performance problems,

4
00:00:09,210 --> 00:00:12,570
you've now entered what we call
the performance improvement life-cycle.

5
00:00:12,570 --> 00:00:17,100
It's a very small set of tasks you must
perform, to find and fix a problem.

6
00:00:17,100 --> 00:00:19,420
It namely consists of three steps.

7
00:00:19,420 --> 00:00:21,630
Number one, gather information.

8
00:00:21,630 --> 00:00:24,520
When someone says that your app is slow,
you have to go and figure out why.

9
00:00:24,520 --> 00:00:26,540
This means you need to
run the profiling and

10
00:00:26,540 --> 00:00:29,640
feedback tools to collect
information about your app.

11
00:00:29,640 --> 00:00:32,180
What you can measure,
you can optimize, right?

12
00:00:32,180 --> 00:00:35,360
Which means that in the beginning of
optimizing any of your applications,

13
00:00:35,360 --> 00:00:38,070
the process hinges on being
able to measure its state and

14
00:00:38,070 --> 00:00:40,450
then evaluate it after you make changes.

15
00:00:40,450 --> 00:00:42,720
Step number two, is to gain insight.

16
00:00:42,720 --> 00:00:45,400
The data that you gather
is not always obvious.

17
00:00:45,400 --> 00:00:46,290
Now, most of the time,

18
00:00:46,290 --> 00:00:50,330
the content is a big collection of
floating point numbers, which then,

19
00:00:50,330 --> 00:00:54,220
if you're lucky, gets turned into
some snazzy visualization by a tool.

20
00:00:54,220 --> 00:00:56,460
But even then, chances are that
you're still at a loss for

21
00:00:56,460 --> 00:00:59,140
what all those colors, lines,
and charts actually mean.

22
00:00:59,140 --> 00:01:02,150
This is where developers
become performance gurus.

23
00:01:02,150 --> 00:01:04,239
Now you see interpreting a sheet
of floating point numbers and

24
00:01:04,239 --> 00:01:08,320
then realizing that you're spending too
much time serializing XML, is the modern

25
00:01:08,320 --> 00:01:11,380
equivalent of a shaman reading
chicken bones to predict the future.

26
00:01:11,380 --> 00:01:13,880
And honestly these first two
stages of gathering data and

27
00:01:13,880 --> 00:01:16,650
then gaining insight,
happen in a really tight loop.

28
00:01:16,650 --> 00:01:18,930
You may use one tool,
gain some info from it, and

29
00:01:18,930 --> 00:01:21,550
then realize that the problem is
in another part of your pipeline.

30
00:01:21,550 --> 00:01:24,050
Which then you'll need
a separate tool to diagnose.

31
00:01:24,050 --> 00:01:27,640
But of course that leads us to
the third step, take action.

32
00:01:27,640 --> 00:01:30,480
This is often the most difficult part
of the loop this is where you take all

33
00:01:30,480 --> 00:01:33,220
the numbers and all the insight,
and know where the problem is, and

34
00:01:33,220 --> 00:01:36,550
then you have to go convince the other
programmers the right way to fix it.

35
00:01:36,550 --> 00:01:39,490
Of the three stages,
this has the most human component to it.

36
00:01:39,490 --> 00:01:41,270
Because solving
the problem isn't enough,

37
00:01:41,270 --> 00:01:43,790
you need to solve it in a way that
meets your coding standards for

38
00:01:43,790 --> 00:01:46,860
your complexity or your company or
takes in account libraries or

39
00:01:46,860 --> 00:01:49,330
a particular module or
a platform that you're running on, or

40
00:01:49,330 --> 00:01:52,070
other crazy restrictions that
your code base might have.

41
00:01:52,070 --> 00:01:53,220
Before your solution is accepted,

42
00:01:53,220 --> 00:01:55,760
you usually have to take all
of these things into account.

43
00:01:55,760 --> 00:01:58,730
But before you run off into the weeds
and become a performance engineer I have

44
00:01:58,730 --> 00:02:01,650
one small piece of warning
about performance.

45
00:02:01,650 --> 00:02:04,760
Throughout this course we'll be teaching
you what's going on under the hood of

46
00:02:04,760 --> 00:02:05,520
Android and

47
00:02:05,520 --> 00:02:09,560
teaching you how to use the tooling to
gain insight into some of those actions.

48
00:02:09,560 --> 00:02:12,360
Some of that content is going to be
prescriptive like if you see this,

49
00:02:12,360 --> 00:02:14,000
it means this, so do that.

50
00:02:14,000 --> 00:02:16,820
But in honest,
that might not always be the case for

51
00:02:16,820 --> 00:02:20,100
every application sure something
may be inefficient but

52
00:02:20,100 --> 00:02:23,420
if it's not impacting your performance,
it's not worth stressing over.

53
00:02:23,420 --> 00:02:26,420
This is why we like to say,
tools not rules,

54
00:02:26,420 --> 00:02:29,830
while it's important to understand the
rules and the flow of things, you need

55
00:02:29,830 --> 00:02:34,410
to validate the true real issues by
trusting what your tools say first.

56
00:02:34,410 --> 00:02:37,910
It may not make sense for you to solve
a problem that you actually don't have.

57
00:02:37,910 --> 00:02:42,160
Always go back to the data and
validate the true nature of a problem,

58
00:02:42,160 --> 00:02:46,460
decide if it's a problem, before
moving on to the optimization process.

59
00:02:46,460 --> 00:02:47,140
You've been warned,
