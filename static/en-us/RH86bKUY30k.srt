1
00:00:00,000 --> 00:00:03,000
[Evans] So now we'll look at a slightly better idea.

2
00:00:03,000 --> 00:00:06,000
This was actually what was done by early versions of UNIX.

3
00:00:06,000 --> 00:00:11,000
The idea was to store for each user the result of encrypting

4
00:00:11,000 --> 00:00:15,000
using the user's password as the key the value 0.

5
00:00:15,000 --> 00:00:19,000
So this means there's no key to keep secret on the server.

6
00:00:19,000 --> 00:00:22,000
Someone who compromises the password file

7
00:00:22,000 --> 00:00:24,000
knows that the value being encrypted is 0

8
00:00:24,000 --> 00:00:28,000
but would need to test possible passwords to find the one that matches.

9
00:00:28,000 --> 00:00:34,000
To make this harder, you wouldn't just run encryption once; you would run it many times.

10
00:00:34,000 --> 00:00:38,000
If you encrypt twice, this doubles the work to check a password.

11
00:00:38,000 --> 00:00:42,000
It also doubles the attacker's work for each password to guess.

12
00:00:42,000 --> 00:00:45,000
Since the attacker has to guess many more passwords than just the one that was entered,

13
00:00:45,000 --> 00:00:49,000
this scales the attacker's work more than it scales the checking work.

14
00:00:49,000 --> 00:00:53,000
And the way this worked in UNIX, it was doing this 25 times.

15
00:00:53,000 --> 00:00:57,000
So the value that was stored for each user was the result of encrypting

16
00:00:57,000 --> 00:01:01,000
using the password as the key, using 0 as the initial value,

17
00:01:01,000 --> 00:01:04,000
but looping it around 25 times.

18
00:01:04,000 --> 00:01:08,000
There are some problems with the way this was done in early UNIX systems.

19
00:01:08,000 --> 00:01:12,000
The encryption function was DES, the Data Encryption Standard,

20
00:01:12,000 --> 00:01:15,000
which used 56-bit keys,

21
00:01:15,000 --> 00:01:19,000
and the key was generated from the password by just cutting it off.

22
00:01:19,000 --> 00:01:21,000
Take the first 56 bits.

23
00:01:21,000 --> 00:01:27,000
So with the 56-bit key, the first 56 bits of the user's password are used.

24
00:01:27,000 --> 00:01:31,000
If this was encoded as 7 bit ASCII, that was only 8 letters.

25
00:01:31,000 --> 00:01:33,000
It was actually a little bit less than that

26
00:01:33,000 --> 00:01:36,000
because DES placed some restrictions on the key structure.

27
00:01:36,000 --> 00:01:42,000
So if users selected their passwords using only the uppercase, lowercase, and digits,

28
00:01:42,000 --> 00:01:46,000
this corresponds to 62 possibilities.

29
00:01:46,000 --> 00:01:49,000
Most users would not pick uniformly from those 62 possible characters,

30
00:01:49,000 --> 00:01:54,000
but if they did, there are 62 to the 8 possible passwords.

31
00:01:54,000 --> 00:01:56,000
This is less than 2 to the 48.

32
00:01:56,000 --> 00:01:59,000
For someone with modern computing resources,

33
00:01:59,000 --> 00:02:03,000
doing a search on a space like this is very feasible.

34
00:02:03,000 --> 00:02:05,000
The reality is even worse than this--

35
00:02:05,000 --> 00:02:09,000
that a motivated attacker can pre-compute a dictionary,

36
00:02:09,000 --> 00:02:13,000
pre-compute this value, for a set of common words w,

37
00:02:13,000 --> 00:02:17,000
store those pre-computed values, and then every new password file that's compromised

38
00:02:17,000 --> 00:02:19,000
check all the passwords against this list

39
00:02:19,000 --> 00:02:24,000
and have a good likelihood of finding some accounts that can be broken into.

40
00:02:24,000 --> 00:02:29,000
So how can we make dictionary attacks harder?

41
00:02:29,000 --> 00:02:33,000
One idea would be to train users to pick better passwords.

42
00:02:33,000 --> 00:02:35,000
Users are pretty hard to train.

43
00:02:35,000 --> 00:02:39,000
This usually means coerce instead--force users to pick a password

44
00:02:39,000 --> 00:02:41,000
that satisfies some properties.

45
00:02:41,000 --> 00:02:46,000
It could be a minimum length, a mix of upper and lowercase letters and special characters.

46
00:02:46,000 --> 00:02:48,000
Many websites do this.

47
00:02:48,000 --> 00:02:53,000
It usually just leads to annoyance and doesn't necessarily lead to better passwords.

48
00:02:53,000 --> 00:02:57,000
You can certainly come up with bad passwords that satisfy any set of rules

49
00:02:57,000 --> 00:02:59,000
that someone forces you to use.

50
00:02:59,000 --> 00:03:02,000
So another solution would be to protect the encrypted passwords

51
00:03:02,000 --> 00:03:06,000
to make sure that an attacker or an insider can't get access to them.

52
00:03:06,000 --> 00:03:10,000
This would certainly help, would prevent the dictionary attack,

53
00:03:10,000 --> 00:03:13,000
because they wouldn't have access to the encrypted passwords.

54
00:03:13,000 --> 00:03:17,000
They could still try a small number through the login interface.

55
00:03:17,000 --> 00:03:22,000
If the passwords are bad enough, the dictionary attacker will still succeed

56
00:03:22,000 --> 00:03:26,000
but only breaking a small number of accounts.

57
00:03:26,000 --> 99:59:59,999
The third approach is to add salt. This is the one I'll talk about next.
