1
00:00:00,170 --> 00:00:02,690
Okay so, welcome to this interview.

2
00:00:02,690 --> 00:00:04,150
We are talking with Chris Chew,

3
00:00:04,150 --> 00:00:08,070
who is one of the Udacity engineers, and he's been working on App Engine.

4
00:00:08,070 --> 00:00:11,800
And we're going to talk a little bit today about how Udacity uses App Engine in

5
00:00:11,800 --> 00:00:16,820
production, and some of the things that are different from writing toy apps.

6
00:00:16,820 --> 00:00:18,349
You know, we've been writing these simple things, and

7
00:00:18,349 --> 00:00:21,210
Udacity actually has thousands of users, and so

8
00:00:21,210 --> 00:00:22,799
it's a much different problem that they are solving.

9
00:00:23,970 --> 00:00:26,610
So we spoke before about how when you,

10
00:00:26,610 --> 00:00:29,800
when you came to Udacity, you were skeptical about App Engine and, and

11
00:00:29,800 --> 00:00:32,080
you expected to try to have to convert people.

12
00:00:32,080 --> 00:00:34,320
And how, how has your experience been so far?

13
00:00:35,390 --> 00:00:38,360
>> And yeah, actually, and it's, it's been interesting.

14
00:00:38,360 --> 00:00:40,560
I think a lot of people,

15
00:00:40,560 --> 00:00:45,590
especially the more engineering experience you have, the more skeptical you

16
00:00:45,590 --> 00:00:50,710
tend to be about something that makes claims as big as App Engine's claims.

17
00:00:50,710 --> 00:00:54,290
And, you know, everything always has trade-offs, and App Engine has trade-offs.

18
00:00:54,290 --> 00:00:58,570
But, you know, I really did come to Udacity thinking that I would be

19
00:00:58,570 --> 00:01:01,090
able to talk everybody out of moving to something different,

20
00:01:01,090 --> 00:01:03,090
where we'd have a little bit more control.

21
00:01:03,090 --> 00:01:05,690
And I think the opposite has actually happened.

22
00:01:05,690 --> 00:01:10,230
I'm, I've been a little converted the other way, and I think,

23
00:01:10,230 --> 00:01:13,206
you know, App Engine's really the perfect spot for

24
00:01:13,206 --> 00:01:16,110
Udacity, and Udacity really does run on App Engine.

25
00:01:16,110 --> 00:01:19,870
We really do have a lot of traffic, and there's even some larger websites that

26
00:01:19,870 --> 00:01:22,990
have way more traffic than we do that run successfully on App Engine.

27
00:01:22,990 --> 00:01:26,258
>> Okay, actually so I had, I had the same thought.

28
00:01:26,258 --> 00:01:28,872
You know, we decided to use App Engine because, you know,

29
00:01:28,872 --> 00:01:31,955
I thought it would be easy to get up, get up and online for students, so

30
00:01:31,955 --> 00:01:33,921
they wouldn't have to do sys admin things.

31
00:01:33,921 --> 00:01:37,232
But, you know, I have always done my own thing as well, and not used App Engine,

32
00:01:37,232 --> 00:01:40,471
so I was highly skeptical, and I've had a similar, similar change of heart.

33
00:01:40,471 --> 00:01:44,769
So what are some of the things that App Engine does that, that make it so

34
00:01:44,769 --> 00:01:49,090
nice to work in, that you would otherwise have to do on your own?

35
00:01:49,090 --> 00:01:51,160
The big one it always boils to,

36
00:01:51,160 --> 00:01:58,130
they provide a lot of infrastructure caching highly replicated data stores.

37
00:01:58,130 --> 00:02:03,720
They force you to address what consistency means in your application,

38
00:02:03,720 --> 00:02:07,550
you know, and does, you know, the same, does a name have to be updated

39
00:02:07,550 --> 00:02:11,500
everywhere immediately or can, can things be a little bit slower to update.

40
00:02:11,500 --> 00:02:15,890
You know, things like that that building a simple app you just, you know,

41
00:02:15,890 --> 00:02:18,040
you don't have to think and then all of sudden you get really big and

42
00:02:18,040 --> 00:02:19,400
then you have to scramble to try and

43
00:02:19,400 --> 00:02:24,304
redefine, you know, how those sorts of things are going to work in your system.

44
00:02:24,304 --> 00:02:26,510
The queuing, is actually really powerful.

45
00:02:26,510 --> 00:02:30,300
It was really smooth, it seems very reliable and you know,

46
00:02:30,300 --> 00:02:33,710
allows you to build, you know, tasks, and really focus on the tasks,

47
00:02:33,710 --> 00:02:36,810
as opposed to the infrastructure to get the tasks delivered.

48
00:02:37,970 --> 00:02:43,310
The login infrastructure by and large works actually really well.

49
00:02:43,310 --> 00:02:47,290
It may, it works really well considering the scale of logging statements you

50
00:02:47,290 --> 00:02:48,050
can put through it.

51
00:02:48,050 --> 00:02:51,290
>> You, you mentioned the queuing which is funny, cause we actually just spent

52
00:02:51,290 --> 00:02:53,180
a lot of time in the previous interview with Neil from Reddit,

53
00:02:53,180 --> 00:02:57,590
talking about all of the infrastructure Reddit has built around the,

54
00:02:57,590 --> 00:03:00,730
the queues and the pre-computing cache and that sort of stuff.

55
00:03:01,870 --> 00:03:04,130
It was actually really tough for us to build.

56
00:03:04,130 --> 00:03:07,820
and, and there's a lot of things that I think were really tough for us to build.

57
00:03:07,820 --> 00:03:12,950
I wonder if you can mention talk a little bit about how the, the version

58
00:03:12,950 --> 00:03:17,946
handling works in App Engine and how that kind of fits in the bigger picture?

59
00:03:17,946 --> 00:03:20,813
>> Versions are actually really interesting in App Engine.

60
00:03:20,813 --> 00:03:24,320
They, they're different than what I expected and it, so

61
00:03:24,320 --> 00:03:29,188
they actually allow you to upload a totally different code base really, but

62
00:03:29,188 --> 00:03:33,520
going against the same data store and the same services.

63
00:03:33,520 --> 00:03:37,700
And you can use that I guess in a couple of different ways effectively.

64
00:03:37,700 --> 00:03:40,700
One thing is that it enables what we call AB testing.

65
00:03:40,700 --> 00:03:43,890
So, kind of like two versions of a site are running at the same time.

66
00:03:43,890 --> 00:03:49,270
And there's actually an AB testing, some administration there that allows you

67
00:03:49,270 --> 00:03:53,210
to kind of blend, you know, percentage of users in, in a somewhat sticky manner.

68
00:03:53,210 --> 00:03:57,360
So that, you know, you can roll out new features to some users and test them,

69
00:03:57,360 --> 00:04:01,250
and, and as they're more successful, migrate all the users to the new features.

70
00:04:01,250 --> 00:04:01,890
Things like that.

71
00:04:03,140 --> 00:04:05,740
The other thing is that they kind of provide you a way to have,

72
00:04:05,740 --> 00:04:08,920
I think of it as like aspects into a system.

73
00:04:08,920 --> 00:04:12,200
You can actually, you know, you could have a version of an app that is for

74
00:04:12,200 --> 00:04:18,095
mainly administrative tasks, or for purely testing, or for monitoring.

75
00:04:18,095 --> 00:04:22,105
Or and then what you know, your, your normal users would see in, in the site and

76
00:04:22,105 --> 00:04:26,591
they're all running simultaneously and you know, against the same you know,

77
00:04:26,591 --> 00:04:29,781
data storing services but it allows you to kind of,

78
00:04:29,781 --> 00:04:33,230
you know, partition your logic and so you could still reuse models and

79
00:04:33,230 --> 00:04:36,830
things between them And it's it's, it's really,

80
00:04:36,830 --> 00:04:41,810
it was a surprising feature that, in there, and it seems to be really handy.

81
00:04:41,810 --> 00:04:42,310
>> Cool.
