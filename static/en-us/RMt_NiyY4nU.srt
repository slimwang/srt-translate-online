1
00:00:00,067 --> 00:00:05,147
We've looked at two search algorithms,
one Breadth-First search,

2
00:00:05,147 --> 00:00:10,573
in which we always expand first the
shallowest paths, the shortest paths.

3
00:00:10,573 --> 00:00:13,400
Second, Cheapest-First search,

4
00:00:13,400 --> 00:00:18,606
in which we always expand first
the path with the lowest total cost.

5
00:00:18,606 --> 00:00:22,414
And I'm going to take this opportunity
to introduce a third algorithm,

6
00:00:22,414 --> 00:00:26,816
Depth-First search, which is in a way
the opposite of Breadth-First search.

7
00:00:26,815 --> 00:00:31,897
In Depth-First search, you always
expand first the longest path,

8
00:00:31,897 --> 00:00:34,442
the path with the most links in it.

9
00:00:34,442 --> 00:00:38,652
Now what I want to ask you to do is,
for each of these nodes in each of

10
00:00:38,652 --> 00:00:43,247
the trees, tell us in what order
they're expanded, first, second,

11
00:00:43,247 --> 00:00:47,789
third, fourth, fifth, and so on,
by putting a number into the box.

12
00:00:47,789 --> 00:00:52,113
And if there are ties,
put that number in,

13
00:00:52,113 --> 00:00:56,207
resolve the ties in left to right order.

14
00:00:56,207 --> 00:01:01,045
Then I want you to ask one more
question, or answer one more question,

15
00:01:01,045 --> 00:01:03,839
which is, are these searches optimal?

16
00:01:03,840 --> 00:01:08,725
That is, are they guaranteed
to find the best solution?

17
00:01:08,724 --> 00:01:13,393
And for Breadth-First search, optimal
would mean finding the shortest path,

18
00:01:13,393 --> 00:01:17,453
if you think it's guaranteed to
find the shortest path, check here.

19
00:01:17,453 --> 00:01:22,266
For Cheapest-First, it would mean
finding the path with the lowest

20
00:01:22,266 --> 00:01:27,164
total path cost, check here if you
think it's guaranteed to do that,

21
00:01:27,164 --> 00:01:31,899
and we'll allow the assumption that
all costs have to be positive.

22
00:01:31,899 --> 00:01:37,789
And in Depth-First, cheapest or optimal
would mean, again, as in Breadth-First,

23
00:01:37,789 --> 00:01:42,245
finding the shortest possible path
in terms on number of lengths,

24
00:01:42,245 --> 00:01:46,318
check here if you think
Depth-First will always find that.

25
00:01:46,319 --> 00:01:51,019
[BLANK_AUDIO]

