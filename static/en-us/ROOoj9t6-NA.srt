1
00:00:00,180 --> 00:00:02,776
One important element in making a virtual world seem real is collision

2
00:00:02,776 --> 00:00:06,400
detection and response. Collision detection is just that, you detect whether

3
00:00:06,400 --> 00:00:10,748
two objects have moved such that they overlap. Even modest forms of collision

4
00:00:10,748 --> 00:00:13,066
detection can make a user feel that they're in a virtual world instead of a

5
00:00:13,066 --> 00:00:16,772
ghost that can pass through anything. For example, simply shooting a ray from

6
00:00:16,772 --> 00:00:19,676
the user's location and finding the distance to the closest intersection will

7
00:00:19,676 --> 00:00:23,976
reveal whether the user's position should be adjusted. Where the problem begins

8
00:00:23,976 --> 00:00:27,595
to get complex is when you have many objects in a scene. With a brute force

9
00:00:27,595 --> 00:00:31,580
approach you compare everything to everything else for collision. Much of the

10
00:00:31,580 --> 00:00:34,100
efficient collision detection coding is in creating data structures that

11
00:00:34,100 --> 00:00:38,516
quickly call out possible collisions that can't occur in a frame. The other

12
00:00:38,516 --> 00:00:41,078
half of the problem is collision response, what to do when two objects are

13
00:00:41,078 --> 00:00:44,568
found to have collided. This depends on a number of variables, including the

14
00:00:44,568 --> 00:00:48,730
velocity of the objects, and in this case, the elasticity of the materials.

15
00:00:48,730 --> 00:00:51,414
Collision detection is done primarily on the CPU in most programs at this

16
00:00:51,414 --> 00:00:54,098
point, though there have been some moves to off load the work to the GPU, or

17
00:00:54,098 --> 00:00:58,896
even custom chips. This is a complex subject, entire books have been written

18
00:00:58,896 --> 00:01:01,130
about it, but this is all we'll cover here.
