1
00:00:00,370 --> 00:00:04,790
Callbacks are the default JavaScript
technique for asynchronous work.

2
00:00:04,790 --> 00:00:07,730
Pass the function to another function,
and then call

3
00:00:07,730 --> 00:00:12,440
the callback function at some later
time when some conditions have been met.

4
00:00:12,440 --> 00:00:16,870
This works well but there are some
questions without obvious answers.

5
00:00:16,870 --> 00:00:20,110
For instance, how do you handle errors?

6
00:00:20,110 --> 00:00:25,070
It's best practice to assume that any
operation could fail at any time.

7
00:00:25,070 --> 00:00:28,510
It's doubly important to assume so
with network requests.

8
00:00:28,510 --> 00:00:33,200
If an error occurs here,
should you still execute the call back?

9
00:00:33,200 --> 00:00:36,200
If so, what value should it receive?

10
00:00:36,200 --> 00:00:39,210
If not, then what should happen?

11
00:00:39,210 --> 00:00:41,060
What if it's a JavaScript error?

12
00:00:41,060 --> 00:00:44,750
Should that be handled any
differently than a network error?

13
00:00:44,750 --> 00:00:46,355
There's no clear answer.

14
00:00:46,355 --> 00:00:49,750
Node basically makes error
first callbacks mandatory but

15
00:00:49,750 --> 00:00:51,780
that doesn't really solve the problem.

16
00:00:51,780 --> 00:00:54,120
It's still basically your job to define,
and

17
00:00:54,120 --> 00:00:56,750
implement an error handling strategy.

18
00:00:56,750 --> 00:00:59,850
Assume that everything happened
just fine, no errors and

19
00:00:59,850 --> 00:01:02,880
then this callback runs when
the unload handler gets called.

20
00:01:02,880 --> 00:01:03,830
Great.

21
00:01:03,830 --> 00:01:07,300
Now you've chained together
two pieces of work, but

22
00:01:07,300 --> 00:01:11,990
what if this callback is also
an asynchronous operation and

23
00:01:11,990 --> 00:01:14,790
you need something else
to happen afterwards?

24
00:01:14,790 --> 00:01:18,430
Do you pass another function
with another callback here?

25
00:01:18,430 --> 00:01:23,780
This is one scenario that leads to
something called the Pyramid of Doom.

26
00:01:23,780 --> 00:01:26,440
A dreadful situation
where there are nasty,

27
00:01:26,440 --> 00:01:30,300
nasty nested callbacks within
call backs, within callbacks.

28
00:01:30,300 --> 00:01:32,830
This looks ugly and
it's hard to write, but

29
00:01:32,830 --> 00:01:36,980
the real sin is that it is
incredibly frustrating to debug.

30
00:01:36,980 --> 00:01:38,650
This is the same kind of code, but

31
00:01:38,650 --> 00:01:42,580
written with promises,
and my, it looks nicer.

32
00:01:42,580 --> 00:01:47,250
You'll be learning all about the beauty
of .then later in this course.

33
00:01:47,250 --> 00:01:51,280
For now, just read this and appreciate
the fact that you can figure out what's

34
00:01:51,280 --> 00:01:56,010
happening here, despite the fact that
you haven't even finished this course.

35
00:01:56,010 --> 00:01:56,770
That's pretty awesome.
