1
00:00:01,149 --> 00:00:02,419
We've now discussed and

2
00:00:02,419 --> 00:00:06,199
created a feature where a user can
limit their housing search results

3
00:00:06,200 --> 00:00:09,870
to be within a specific travel time of
a point that they care about, like work.

4
00:00:10,970 --> 00:00:13,920
However, how can we
give them more details?

5
00:00:13,919 --> 00:00:16,769
Users don't just want to know how long
it will take them to get somewhere,

6
00:00:16,769 --> 00:00:18,339
they also care about
how they'll get there.

7
00:00:19,399 --> 00:00:22,109
If I'm taking a subway to work every
day, I want to know that I'm not

8
00:00:22,109 --> 00:00:25,189
going to have to switch trains
three times, take a ferry, or

9
00:00:25,190 --> 00:00:28,220
maybe I want to see multiple options for
routes in case the service goes down.

10
00:00:29,449 --> 00:00:33,519
Luckily, we have the ability to get and
show the user the information they need

11
00:00:33,520 --> 00:00:36,510
about how they would travel
from their potential new home.

12
00:00:36,509 --> 00:00:37,899
The directions API,

13
00:00:37,899 --> 00:00:41,519
much like the distance matrix API,
gives us information about a journey.

14
00:00:42,659 --> 00:00:46,159
However, instead of just the time and
duration, it provides step-by-step

15
00:00:46,159 --> 00:00:50,929
directions from point A to point B, and
even to point C through Z if needed.

16
00:00:52,049 --> 00:00:54,099
Many of the same inputs can be used.

17
00:00:54,100 --> 00:00:58,929
The travel mode of either driving,
walking, bicycling or transit.

18
00:00:58,929 --> 00:01:01,993
Multiple transit modes such as bus or
train, and

19
00:01:01,993 --> 00:01:06,042
restrictions such as avoiding tolls,
highways, or ferries.

20
00:01:06,042 --> 00:01:09,400
Directions can specify origins,
destinations, and

21
00:01:09,400 --> 00:01:11,592
way points as either text strings.

22
00:01:11,591 --> 00:01:18,420
For example, Chicago or Sydney, or
as latitude-longitude coordinates.

23
00:01:18,420 --> 00:01:22,590
The directions API can return multi-port
directions using a series of way points

24
00:01:22,590 --> 00:01:23,299
or via points.

25
00:01:24,537 --> 00:01:26,869
We'll demonstrate their request and
response, again,

26
00:01:26,870 --> 00:01:28,880
through a web service
request within the browser.

27
00:01:30,040 --> 00:01:32,685
So once again,
we have the same URL route.

28
00:01:32,685 --> 00:01:35,536
We're using the direction
service this time, and

29
00:01:35,536 --> 00:01:38,530
we're specifying we want
our output in JSON format.

30
00:01:39,870 --> 00:01:42,160
Now, we need the required parameters.

31
00:01:42,159 --> 00:01:45,629
For directions API, we need a single
origin and destination pair.

32
00:01:45,629 --> 00:01:49,459
We can make them specific
like lat long coordinates, or

33
00:01:49,459 --> 00:01:52,329
very general like cities,
which would use then the city center.

34
00:01:53,510 --> 00:01:54,910
Finally, you need your API key.

35
00:01:56,650 --> 00:01:58,090
Before we look at the response,

36
00:01:58,090 --> 00:02:00,310
let's talk about other possible
inputs to this request.

37
00:02:01,980 --> 00:02:05,490
This particular request would default
the show as driving directions

38
00:02:05,489 --> 00:02:07,859
from the center of Brooklyn to
Google New York City office.

39
00:02:08,919 --> 00:02:09,660
As with before,

40
00:02:09,659 --> 00:02:13,449
we can optionally add in a travel
mode and a bunch of other things.

41
00:02:13,449 --> 00:02:16,209
The instructor notes has a link to our
documentation with a more complete list.

42
00:02:18,539 --> 00:02:21,629
Let's set our mode to transit since I'm
probably going to take the subway or

43
00:02:21,629 --> 00:02:22,139
bus to work.

44
00:02:23,270 --> 00:02:26,490
When I'm using transit, again,
I can specify the transit mode.

45
00:02:26,490 --> 00:02:27,540
For example, subway.

46
00:02:28,860 --> 00:02:32,330
I can also specify the transit
routing preference

47
00:02:32,330 --> 00:02:35,440
whether I want less transfers,
less walking, etc.

48
00:02:36,830 --> 00:02:40,180
I usually choose less walking contrary
to many of my Fitbit wearing friends.

49
00:02:41,460 --> 00:02:43,570
We can also again use bicycling so

50
00:02:43,569 --> 00:02:46,579
that we have a scenic
bike ride to the office.

51
00:02:46,580 --> 00:02:48,700
But if I do that,
I'm going to want to stop along the way.

52
00:02:49,930 --> 00:02:51,770
Luckily, I can add multiple waypoints.

53
00:02:53,340 --> 00:02:55,750
Let's say I wanted to stop
off at my favorite bakery,

54
00:02:55,750 --> 00:02:57,550
then continue on to work.

55
00:02:57,550 --> 00:03:01,800
I can use the waypoints parameter to
specify an additional destination,

56
00:03:01,800 --> 00:03:04,080
which is taken into account
as a stop in my route.

57
00:03:05,210 --> 00:03:07,990
Alternatively, if I just wanted
to pass by and smell the bakery,

58
00:03:07,990 --> 00:03:11,180
I can specify via instead of waypoints.

59
00:03:11,180 --> 00:03:14,879
And then my root wont consider an extra
leg, it'll just take me by the place.

60
00:03:16,000 --> 00:03:18,409
So let's execute this request and
see what kind of stuff we get back.

61
00:03:19,590 --> 00:03:23,800
First, I'm going to execute my transit
route with my subway specified and

62
00:03:23,800 --> 00:03:24,868
less walking specified.

63
00:03:26,289 --> 00:03:29,419
As with the rest of these service
requests, we get a status.

64
00:03:29,419 --> 00:03:31,319
Okay is the one we want.

65
00:03:31,319 --> 00:03:33,969
If the request would fail,
the status would not be okay, and

66
00:03:33,969 --> 00:03:35,520
you wouldn't see a route
in your response.

67
00:03:37,599 --> 00:03:40,199
Next, we'll see the geocoded waypoints.

68
00:03:40,199 --> 00:03:43,250
This is essentially taking our origin,
destination, and

69
00:03:43,250 --> 00:03:44,949
any additional waypoints and

70
00:03:44,949 --> 00:03:48,810
making sure the service was able to
successfully find that location.

71
00:03:48,810 --> 00:03:51,340
It gives us the lat longs as well.

72
00:03:51,340 --> 00:03:54,240
We only see two points here
since we had no waypoints.

73
00:03:54,240 --> 00:03:55,820
This is our origin and our destination.

74
00:03:57,250 --> 00:03:59,514
The next thing we'll see
is the root data itself.

75
00:03:59,514 --> 00:04:00,399
So let's expand this.

76
00:04:00,400 --> 00:04:04,885
There will only be one leg if you
didn't specify any waypoints, but

77
00:04:04,884 --> 00:04:09,435
the root will be split into multiple
legs if you did specify waypoints.

78
00:04:09,435 --> 00:04:16,064
Each leg has a duration and a distance,
and a start and end location.

79
00:04:16,064 --> 00:04:17,324
Each leg also has one or

80
00:04:17,324 --> 00:04:20,680
more steps, a step being
the smallest unit of instruction.

81
00:04:22,069 --> 00:04:24,379
For example,
walk to Kingston- Throop Avenue.

82
00:04:25,970 --> 00:04:28,970
Each step also has a distance and
a duration, so

83
00:04:28,970 --> 00:04:31,521
there's some very granular data here.

84
00:04:31,521 --> 00:04:34,225
Each leg also has an overview polyline.

85
00:04:34,225 --> 00:04:37,209
This is what will allow us to
display the root in our map.

86
00:04:39,110 --> 00:04:41,790
Finally, we see any warnings.

87
00:04:41,790 --> 00:04:44,040
For example, if there's no walking or
biking path,

88
00:04:44,040 --> 00:04:47,110
and you specified bicycling,
the response will tell you that.

89
00:04:48,639 --> 00:04:51,389
Let's execute our biking
request with the waypoint

90
00:04:51,389 --> 00:04:52,789
to see the difference in their response.

91
00:04:54,699 --> 00:04:57,896
So the first thing you'll notice is that
we have three geocoded waypoints here.

92
00:04:58,939 --> 00:05:02,410
One for origin, one for destination,
and one for our waypoint.

93
00:05:03,829 --> 00:05:07,529
We also have two legs,
unlike last time where we had one leg.

94
00:05:07,529 --> 00:05:11,199
The first leg here will be from
our origin to our waypoint,

95
00:05:11,199 --> 00:05:14,839
which is Tompkin Square Bagels,
by the way, it's delicious.

96
00:05:14,839 --> 00:05:17,869
The second leg will be from
the bakery to my office.

97
00:05:19,350 --> 00:05:21,490
As we talk about going from
point A to point B and

98
00:05:21,490 --> 00:05:25,819
making stops along the way, it sounds a
lot like the traveling salesman problem

99
00:05:25,819 --> 00:05:28,629
where he has to plan his journey to
cover a number of different clients

100
00:05:28,629 --> 00:05:30,730
at different locations in
the most efficient way.

101
00:05:31,779 --> 00:05:34,389
The good news is the directions
API can do that for you, too.

102
00:05:35,939 --> 00:05:39,779
Here, we'll execute walking
directions using three waypoints.

103
00:05:39,779 --> 00:05:41,859
Notice that they're pipe
delimited in this request.

104
00:05:43,819 --> 00:05:46,959
The response will have four legs, and

105
00:05:46,959 --> 00:05:50,859
the order of the points isn't the order
we specify them in the request.

106
00:05:53,459 --> 00:05:58,049
But you can add in the optimized true
prefix when you specify waypoints.

107
00:05:59,060 --> 00:06:01,170
What this does is it
will do the planning for

108
00:06:01,170 --> 00:06:03,879
you to cover all the stops
in the most optimized way.

109
00:06:05,029 --> 00:06:08,837
This means that the result may change
the order of the waypoints from how you

110
00:06:08,838 --> 00:06:11,026
originally provided them in the request.

111
00:06:11,026 --> 00:06:13,920
Notice now, the order is different.

112
00:06:13,920 --> 00:06:15,879
Our first address was 350 5th Ave,

113
00:06:15,879 --> 00:06:20,344
but our first stop is actually
going to be 165 Avenue A.

114
00:06:20,345 --> 00:06:21,360
It's optimized it for us.


