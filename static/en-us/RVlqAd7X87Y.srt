1
00:00:00,510 --> 00:00:02,390
We've gone through backbones
template function,

2
00:00:02,390 --> 00:00:05,490
now I want you to write
your own template function.

3
00:00:05,490 --> 00:00:10,210
Your function must have a set of default
delimiters, allow for custom delimiters

4
00:00:10,210 --> 00:00:14,950
to be passed in, handle simple
replacement and return a function.

5
00:00:16,490 --> 00:00:19,680
The returned function should be
called with data to be inserted into

6
00:00:19,680 --> 00:00:20,600
the template.

7
00:00:20,600 --> 00:00:23,400
And the number of times the template
should be logged to the console.

8
00:00:24,520 --> 00:00:26,300
For example if I have this template,

9
00:00:26,300 --> 00:00:29,670
I should be able to pass this
string into your template function.

10
00:00:29,670 --> 00:00:32,470
Your template function should
then return a function.

11
00:00:32,470 --> 00:00:34,920
I should be able to call that
function passing a data for

12
00:00:34,920 --> 00:00:36,359
each one of these variables.

13
00:00:37,810 --> 00:00:40,620
The last argument to your function
is the number of times it should log

14
00:00:40,620 --> 00:00:42,220
the completed template to the console.

15
00:00:43,430 --> 00:00:45,270
So let's see how it should work,

16
00:00:45,270 --> 00:00:48,710
I'll pass the string to the template
function and get a function back.

17
00:00:50,070 --> 00:00:51,950
Then calling the function with data and

18
00:00:51,950 --> 00:00:55,520
a number, logs the message to
the console that number of times.

19
00:00:56,940 --> 00:00:59,930
Don't forget that your template function
needs to be able to handle custom

20
00:00:59,930 --> 00:01:00,630
delimiters.

21
00:01:01,990 --> 00:01:04,030
This is definitely a challenging quiz.

22
00:01:04,030 --> 00:01:07,950
Filling out your own templating function
will help nail down how this works, and

23
00:01:07,950 --> 00:01:10,260
it lets you build up a collection
of code that you've written,

24
00:01:10,260 --> 00:01:11,189
that you can use later.

25
00:01:12,610 --> 00:01:14,580
If you're ready to tackle it,
click the next button.

26
00:01:15,650 --> 00:01:17,600
If you need a hint stick around for
a second.

27
00:01:18,840 --> 00:01:19,810
Still here?

28
00:01:19,810 --> 00:01:23,760
Okay, I didn't use any regular
expressions in my solution.

29
00:01:23,760 --> 00:01:26,630
Instead I use a combination
of JavaScript split and

30
00:01:26,630 --> 00:01:29,000
indexOf methods to search for
a delimiters.
