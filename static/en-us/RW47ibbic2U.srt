1
00:00:00,110 --> 00:00:02,590
So how do you do this? Well, I'm pretty

2
00:00:02,590 --> 00:00:05,540
lazy and my first reaction is always to try

3
00:00:05,540 --> 00:00:08,650
to avoid the issue if possible. Remember, anything that

4
00:00:08,650 --> 00:00:12,400
the browser is responsible for rasterizing it can probably do

5
00:00:12,400 --> 00:00:14,830
at the native resolution of the screen. So if

6
00:00:14,830 --> 00:00:17,900
you can effectively use vector graphics like scalable vector

7
00:00:17,900 --> 00:00:21,630
graphics, or canvas to draw your graphics, You absolutely

8
00:00:21,630 --> 00:00:24,970
should. Although I do want to note that by default,

9
00:00:24,970 --> 00:00:28,010
canvas has a backing store set to a 1x

10
00:00:28,010 --> 00:00:31,030
pixel density. That is, it won't rasterize in higher

11
00:00:31,030 --> 00:00:35,200
resolution on 2x or 3x displays. You can change

12
00:00:35,200 --> 00:00:38,580
it and get a higher resolution backing store by setting

13
00:00:38,580 --> 00:00:40,170
the width and height on the canvas to the

14
00:00:40,170 --> 00:00:44,600
upscale dimensions. Multiply them by device pixel ratio, then scale

15
00:00:44,600 --> 00:00:48,220
your entire context, or use css width and height

16
00:00:48,220 --> 00:00:51,070
to get it to lay out to the appropriate size.

17
00:00:51,070 --> 00:00:53,550
We don't do this automatically in the browser though,

18
00:00:53,550 --> 00:00:56,820
if we did, canvases on two x devices would cost

19
00:00:56,820 --> 00:00:59,650
four times as much memory, and 3 x devices

20
00:00:59,650 --> 00:01:03,510
with cost nine times as much memory. On mobile devices

21
00:01:03,510 --> 00:01:06,200
that might have pretty limited memory to begin with.

22
00:01:06,200 --> 00:01:09,180
Now, for small icons or glyphs, you may wish to

23
00:01:09,180 --> 00:01:11,820
use icon fonts which are a handy way to

24
00:01:11,820 --> 00:01:16,530
get pretty looking icons that scale well. For general prettiness,

25
00:01:16,530 --> 00:01:20,610
using CSS features like gradients, rather than a gradient image is a

26
00:01:20,610 --> 00:01:25,570
radically good idea. And, CSS3 features like rounded corners and boarders. Save

27
00:01:25,570 --> 00:01:29,090
you from having to supply custom graphics for each corner and they

28
00:01:29,090 --> 00:01:32,380
have the added benefit of reducing the number of requests your page makes.
