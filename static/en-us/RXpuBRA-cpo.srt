1
00:00:00,000 --> 00:00:03,000
Let's now implement something that calculates the value function.

2
00:00:03,000 --> 00:00:05,000
Here's our familiar grid again.

3
00:00:05,000 --> 00:00:09,000
We have a vertical obstacle over here, a T-shaped obstacle over here.

4
00:00:09,000 --> 00:00:12,000
Our goal location is in the bottom right corner.

5
00:00:12,000 --> 00:00:16,000
When I run it, I get this table over here, which is a little bit hard to read,

6
00:00:16,000 --> 00:00:23,000
because I set the value for each obstacle in the grid to be 99.

7
00:00:23,000 --> 00:00:28,000
So all the 99s over here correspond to actually obstacles in the grid.

8
00:00:28,000 --> 00:00:31,000
From there on you see that the value of the goal location is 0--

9
00:00:31,000 --> 00:00:38,000
1, 2, 3, 4, 5 for these two states over here, 6, and so on.

10
00:00:38,000 --> 00:00:43,000
You should implement a function that takes this table as an input

11
00:00:43,000 --> 00:00:47,000
and computes this table over here, which is unambiguous.

12
00:00:47,000 --> 00:00:50,000
You should be able to output this exact table over here.

13
00:00:50,000 --> 00:00:55,000
In fact, if I change the configuration--for example, open up a path over here--

14
00:00:55,000 --> 00:01:00,000
then your function should compute a very different value function

15
00:01:00,000 --> 00:01:04,000
where now we can see the value propagating straight to this line over here,

16
00:01:04,000 --> 00:01:06,000
which wasn't the case before.

17
00:01:06,000 --> 00:01:10,000
Before you implement this, as before I'm giving you the delta table

18
00:01:10,000 --> 00:01:13,000
with different actions--up, left, down, and right.

19
00:01:13,000 --> 00:01:18,000
I also give you something we'll be using in a later quiz

20
00:01:18,000 --> 99:59:59,999
and the cost for the step is supposed to be 1.
