1
00:00:00,000 --> 00:00:02,000
What we want is a function called "test"

2
00:00:02,000 --> 00:00:06,000
which takes a string s--this would be the HTML input--

3
00:00:06,000 --> 00:00:12,000
and if this HTML input s would cause Mozilla to crash, tests should return fail,

4
00:00:12,000 --> 00:00:14,000
otherwise, it should return pass.

5
00:00:14,000 --> 00:00:19,000
We're simply going to search whether s contains a select tag.

6
00:00:19,000 --> 00:00:21,000
For this we set up a simple regular expression,

7
00:00:21,000 --> 00:00:25,000
which says if there is a some substring in s

8
00:00:25,000 --> 00:00:30,000
which consists of an opening tag, select, and then an arbitrary number of characters

9
00:00:30,000 --> 00:00:34,000
which are not a closing tag--that is not a greater sign--

10
00:00:34,000 --> 00:00:38,000
this is expressed by this caret over here, meaning not the greater sign--

11
00:00:38,000 --> 00:00:42,000
not the greater sign and then star meaning 0 or more instances of that

12
00:00:42,000 --> 00:00:44,000
and finally a closing tag.

13
00:00:44,000 --> 00:00:51,000
So we can have a less than sign, select, then anything except for a greater than sign,

14
00:00:51,000 --> 00:00:53,000
and finally a greater than sign.

15
00:00:53,000 --> 00:00:55,000
This is what makes an HTML tag.

16
00:00:55,000 --> 00:00:59,000
If this occurs within our string, we return fail.

17
00:00:59,000 --> 00:01:01,000
Otherwise, we return pass.

18
00:01:01,000 --> 00:01:05,000
This regular expression requires a function from the RE module,

19
00:01:05,000 --> 00:01:07,000
but we first need to import this.

20
00:01:07,000 --> 00:01:12,000
So, let's see what happens if we feed in a just a regular HTML tag

21
00:01:12,000 --> 00:01:14,000
into the testing function.

22
00:01:14,000 --> 00:01:17,000
What we get is pass, because there is no select tag in here.

23
00:01:17,000 --> 00:01:21,000
Let's expand this a bit, and now let's actually add a select tag in here

24
00:01:21,000 --> 00:01:23,000
as in this example.

25
00:01:23,000 --> 00:01:27,000
Now we see that our output changes to fail,

26
00:01:27,000 --> 00:01:29,369
because in here we actually do have a select tag.

27
00:01:29,369 --> 00:01:32,000
So this is what our testing function does.

28
00:01:32,000 --> 00:01:35,000
It simply simulates the behavior of Mozilla.

29
00:01:35,000 --> 00:01:39,000
Normally, we would pass this input to Mozilla and then see whether it crashes or not,

30
00:01:39,000 --> 00:01:43,000
but in order to keep things simple, we're simply having this simple testing function,

31
00:01:43,000 --> 00:01:45,814
which checks directly for what is supposed to be in the input.
