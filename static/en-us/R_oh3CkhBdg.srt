1
00:00:00,000 --> 00:00:01,000
Now how do we use this?

2
00:00:01,000 --> 00:00:07,000
Well, we take a function we define, say seq of x, y,

3
00:00:07,000 --> 00:00:14,000
and then we can say sequence is redefined as being an n_ary function of sequence.

4
00:00:14,000 --> 00:00:18,000
Oops--I guess I got to fix this typo here.

5
00:00:18,000 --> 00:00:22,000
From now on, I can call sequence and pass in any number of numbers,

6
00:00:22,000 --> 00:00:24,000
and it will return the result that looks like that.

7
00:00:24,000 --> 00:00:25,000
So that looks good.

8
00:00:25,000 --> 00:00:30,000
In fact, this pattern is so common in Python that there's a special notation for it.

9
00:00:30,000 --> 00:00:33,000
The notation is called the decorator notation.

10
00:00:33,000 --> 00:00:35,000
It looks like this.

11
00:00:35,000 --> 00:00:41,000
All we have to do is say, @ sign, then the name of a function, and then the definition.

12
00:00:41,000 --> 00:00:46,000
This is the same as saying sequence = n_ary of sequence.

13
00:00:46,000 --> 00:00:48,000
It's just an easier way to write it.

14
00:00:48,000 --> 00:00:53,000
But there is one problem with the way we specified this particular decorator,

15
00:00:53,000 --> 00:00:59,000
which is if I'm in an interactive session, and I ask for help on sequence,

16
00:00:59,000 --> 00:01:03,000
I would like to see the argument list and if there is a doc string,

17
00:01:03,000 --> 00:01:05,000
I want to see the documentation here.

18
00:01:05,000 --> 00:01:08,000
I didn't happen to put in any documentation for sequence.

19
00:01:08,000 --> 00:01:11,000
But when I ask for help, what I get is this.

20
00:01:11,000 --> 00:01:16,000
I'm told that sequence is called n_ary function. Well, why is that?

21
00:01:16,000 --> 00:01:21,000
Because this is what we returned when we define sequence = n_ary of sequence.

22
00:01:21,000 --> 00:01:24,000
We return this thing that has the name n_ary function.

23
00:01:24,000 --> 00:01:30,000
So we would like to fix n_ary up so that when the object that it returns

24
00:01:30,000 --> 00:01:34,000
has the same function name and the same function documentation--

25
00:01:34,000 --> 00:01:40,000
if there is any documentation--and have that copied over into the n_ary f function.

26
00:01:40,000 --> 00:01:43,000
Now it turns out that there is a function to do exacty that,

27
00:01:43,000 --> 00:01:45,000
and so I'm going to go get it.

28
00:01:45,000 --> 00:01:52,000
I'm going to say from the functools--the functional tools package.

29
00:01:52,000 --> 00:01:57,000
I want to import the function called update_wrapper.

30
00:01:57,000 --> 00:02:01,000
Update_wrapper takes 2 functions, and it copies over the function name

31
00:02:01,000 --> 00:02:04,000
and the documentation and several other stuff

32
00:02:04,000 --> 00:02:07,000
from the old function to the new function,

33
00:02:07,000 --> 00:02:14,000
and I can change n_ary to do that, so once I've defined the n_ary function,

34
00:02:14,000 --> 00:02:21,000
then I can go ahead and update the wrapper of the n_ary function--

35
00:02:21,000 --> 00:02:25,000
the thing I'm going to be returning from the old function.

36
00:02:25,000 --> 00:02:30,000
So this will be the old sequence, which has a sequence name, a list of arguments,

37
00:02:30,000 --> 00:02:36,000
maybe some documentation string, and this will be the function that we were returning,

38
00:02:36,000 --> 00:02:39,000
and we're copying over everything from f into n_ary f.

39
00:02:39,000 --> 00:02:46,000
Now when I ask for help--when I define n_ary sequence, and I ask for help on sequence,

40
00:02:46,000 --> 00:02:48,000
what I'll see is the correct name for sequence,

41
00:02:48,000 --> 00:02:52,000
and if there was any documentation string for sequence, that would appear here as well.

42
00:02:52,000 --> 00:02:56,000
So update_wrappers is a helpful tool. It helps us when we're debugging.

43
00:02:56,000 --> 00:03:00,000
It doesn't really help us in the execution of the program, but in doing debugging,

44
00:03:00,000 --> 00:03:04,000
it's really helpful to know what the correct names of your functions are.

45
00:03:04,000 --> 00:03:08,000
Notice that we may be violating the Don't Repeat Yourself principle here.

46
00:03:08,000 --> 00:03:15,000
So this n_ary function is a decorator that I'm using in this form to update

47
00:03:15,000 --> 00:03:17,000
the definition of sequence.

48
00:03:17,000 --> 00:03:22,000
I had to--within my definition of n_ary--I had to write down that I want to update the wrapper.

49
00:03:22,000 --> 00:03:26,000
But it seems like I'm going to want to update the wrapper for every decorator,

50
00:03:26,000 --> 00:03:30,000
not just for n_ary, and I don't want to repeat myself on every decorator

51
00:03:30,000 --> 99:59:59,999
that I'm going to define.
