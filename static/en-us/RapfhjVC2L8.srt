1
00:00:00,460 --> 00:00:03,660
Any sufficiently interesting project
is going to depend on perhaps

2
00:00:03,660 --> 00:00:06,410
quite large collection of libraries.

3
00:00:06,410 --> 00:00:08,940
Maybe you start depending on just one or
two libraries, so

4
00:00:08,940 --> 00:00:12,570
you just put their JARs in your project
directory and keep on trucking.

5
00:00:12,570 --> 00:00:15,400
You end up having a huge
collection of JAR archives.

6
00:00:15,400 --> 00:00:18,440
But then, what if a new version
of your dependency is released?

7
00:00:18,440 --> 00:00:21,580
You'll have to manually download and
update the JARs and in turn

8
00:00:21,580 --> 00:00:25,300
all of its dependencies and all of its
dependencies' dependencies and so on.

9
00:00:25,300 --> 00:00:27,470
This is clearly getting unmanageable.

10
00:00:27,470 --> 00:00:30,440
Another option would be to include a
list of your project's dependencies and

11
00:00:30,440 --> 00:00:33,500
have anyone who wants to build your
project go and download them all.

12
00:00:33,500 --> 00:00:36,570
Of course, they would then have to hunt
all over the internet to find them and

13
00:00:36,570 --> 00:00:39,840
they would have to check all the time to
make sure that the versions they have

14
00:00:39,840 --> 00:00:41,470
Natural list of your dependencies.

15
00:00:41,470 --> 00:00:42,900
Brutal, right?

16
00:00:42,900 --> 00:00:46,860
Of course, since this is a course about
Gradle, Gradle provides a better way.

17
00:00:46,860 --> 00:00:50,030
Most libraries, or more generally
artifacts, that you might want to use in

18
00:00:50,030 --> 00:00:53,780
your project are present in various
repositories around the internet.

19
00:00:53,780 --> 00:00:57,720
Most prominent repositories are probably
made in Central and jcenter.

20
00:00:57,720 --> 00:00:59,900
Anyone can upload artifacts
to these repositories,

21
00:00:59,900 --> 00:01:02,410
as long as they include
the appropriate meta data.

22
00:01:02,410 --> 00:01:04,620
Every artifact in the repository
can be identified and

23
00:01:04,620 --> 00:01:06,860
retrieved by a unique
set of coordinates.

24
00:01:06,860 --> 00:01:10,730
If an artifact has dependencies of
its own, that is also specified.

25
00:01:10,730 --> 00:01:11,840
The upshot is,

26
00:01:11,840 --> 00:01:15,390
Gradle knows how to retrieve artifacts
from all sorts of repositories and

27
00:01:15,390 --> 00:01:19,010
will store them in local cache to
make them available for your project.

28
00:01:19,010 --> 00:01:22,500
Not only that, but if you have multiple
projects using the same artifact,

29
00:01:22,500 --> 00:01:25,020
it will only ever be downloaded once.

30
00:01:25,020 --> 00:01:28,610
Gradle will also take care of retrieving
any transitive dependencies and

31
00:01:28,610 --> 00:01:31,430
will even resolve conflicts when
different parts of your dependency tree

32
00:01:31,430 --> 00:01:33,330
rely on different versions
of the same artifact.
