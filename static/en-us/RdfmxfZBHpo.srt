1
00:00:00,107 --> 00:00:04,654
Our next implementation is an inclusive scan that was popularized in a 1986 paper

2
00:00:04,654 --> 00:00:08,749
by Danny Hillis and Guy Steele, who are 2 really interesting people.

3
00:00:08,749 --> 00:00:11,912
Danny Hillis founded a company that built a massively parallel computer

4
00:00:11,912 --> 00:00:15,459
called the Thinking Machine, which had scan as one of its core primitives

5
00:00:15,459 --> 00:00:17,868
and awesome-looking blinky lights.

6
00:00:17,868 --> 00:00:19,797
He designed it for AI applications

7
00:00:19,797 --> 00:00:23,235
and said that his goal was to build a computer that was proud of him.

8
00:00:23,235 --> 00:00:25,435
At Thinking Machines he worked with Guy Steele,

9
00:00:25,435 --> 00:00:28,019
who developed the Scheme programming language at MIT

10
00:00:28,019 --> 00:00:30,519
and later was one of the core developers of Java.

11
00:00:30,519 --> 00:00:33,618
Anyway, back to scan and this particular algorithm,

12
00:00:33,618 --> 00:00:36,317
the easiest way to show it is simply to draw it.

13
00:00:36,317 --> 00:00:40,735
So we're going to start with an input array that's simply the numbers 1 to 8.

14
00:00:40,735 --> 00:00:45,830
So the 1st stage of this algorithm involves adding yourself to your neighbor 1 away.

15
00:00:45,830 --> 00:00:53,645
So for instance, 1 + 2 is going to give you 3, 2 + 3 is going to give you 5, and so on.

16
00:00:53,645 --> 00:00:55,239
Then we come back to the beginning,

17
00:00:55,239 --> 00:00:58,605
and anything that doesn't have a left neighbor, we just copy its value down.

18
00:00:58,605 --> 00:01:02,940
Stage 2 is going to involve adding yourself to your neighbor 2 to the left,

19
00:01:02,940 --> 00:01:05,081
so let's see how that's going to work.

20
00:01:05,081 --> 00:01:09,346
1 + 5 gives you 6, 3 + 7 gives you 10, and so on.

21
00:01:09,346 --> 00:01:13,660
And again, if you don't have a neighbor 2 to the left, then you just copy your value down.

22
00:01:13,660 --> 00:01:18,542
Final stage, now you're going to add yourself to your neighbor 4 to the left,

23
00:01:18,542 --> 00:01:21,631
so we add 1 and 14, giving us 15,

24
00:01:21,631 --> 00:01:26,248
we add 3 and 18 and give us 21, and so on.

25
00:01:26,248 --> 00:01:28,732
And again, if you don't have a neighbor 4 to the left,

26
00:01:28,732 --> 00:01:33,270
then you'll just copy your own value down. And now, take a look at what we got.

27
00:01:33,270 --> 00:01:37,807
This bottom row here is the inclusive scan of the top row here.

28
00:01:37,807 --> 00:01:43,514
So what's the algorithm that we used here? Starting with step 0, here's the steps here.

29
00:01:43,514 --> 00:01:49,372
On step i, your job at each location is to add yourself to your neighbor to the left,

30
00:01:49,372 --> 00:01:55,229
2 to the i hops away, so here 1 hop away, here 2 hops away, and here 4 hops away.

31
00:01:55,229 --> 00:01:57,635
And if you don't have a neighbor that far to the left,

32
00:01:57,635 --> 00:02:00,663
you just copy yourself from the previous iteration.

33
00:02:00,663 --> 00:02:04,901
So as a quiz, let's analyze the complexity of this computation.

34
00:02:04,901 --> 00:02:10,389
So as a function of n, the input size, how much work are we going to do in this algorithm,

35
00:02:10,389 --> 00:02:13,277
and how many steps is it going to take?
