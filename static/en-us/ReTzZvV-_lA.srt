1
00:00:00,080 --> 00:00:03,620
We said the Trusted Computing Base
has direct access to the hardware.

2
00:00:03,620 --> 00:00:07,020
Hardware, we said, we can trust,
that's not something we're going to,

3
00:00:07,020 --> 00:00:11,880
although you may have reasons to, to,
be suspicious, of hardware itself, but

4
00:00:11,880 --> 00:00:13,390
we're not going to go there, so

5
00:00:13,390 --> 00:00:17,320
we're basically talking about
how can we trust software.

6
00:00:17,320 --> 00:00:20,600
The software is supposed to perform,
a set of functions.

7
00:00:20,600 --> 00:00:24,910
We've been discussing some of those,
whether in a recently accessed control,

8
00:00:24,910 --> 00:00:27,270
or kind of policies that
are supported and so on.

9
00:00:27,270 --> 00:00:30,180
So if it's going to implement
certain functionality,

10
00:00:30,180 --> 00:00:32,360
it has to be functionally correct.

11
00:00:32,360 --> 00:00:35,270
Okay, when it says it
implements a certain model,

12
00:00:35,270 --> 00:00:37,340
it implements that model correctly.

13
00:00:37,340 --> 00:00:40,010
The functional correctness
basically means

14
00:00:40,010 --> 00:00:42,860
that it does what it was designed to do.

15
00:00:42,860 --> 00:00:47,380
So it implements a set of functions and
that is done correctly.

16
00:00:47,380 --> 00:00:51,100
Now, to implement those functions,
it does have data structure.

17
00:00:51,100 --> 00:00:53,460
So data state that it makes use of.

18
00:00:53,460 --> 00:00:57,810
Also, it may be protecting other data
that belongs to different users and

19
00:00:57,810 --> 00:00:59,290
programs, and things like that.

20
00:00:59,290 --> 00:01:01,350
If it's trusted software,

21
00:01:01,350 --> 00:01:04,410
we wanted to implement the function
it's supposed to do correctly,

22
00:01:04,410 --> 00:01:08,540
as well as maintain And the integrity of
that data that it is going to rely on.

23
00:01:08,540 --> 00:01:11,940
And we want it to maintain that
integrity even in the presence of

24
00:01:11,940 --> 00:01:12,695
bad input.

25
00:01:12,695 --> 00:01:17,600
Okay, so we do explore some interface or
API, hence the bad guys can try to use

26
00:01:17,600 --> 00:01:22,660
it in ways that we didn't expect it to
be used, give it bad input for example.

27
00:01:22,660 --> 00:01:26,390
So the integrity that should be
maintained by the trusted computing base

28
00:01:26,390 --> 00:01:31,127
actually is maintained in
the presence of a correct model, but

29
00:01:31,127 --> 00:01:34,590
an adversity may even try
to provide bad input.

30
00:01:34,590 --> 00:01:39,050
Obviously, there is sensitive data
that it uses and it protects for

31
00:01:39,050 --> 00:01:41,110
other users and applications.

32
00:01:41,110 --> 00:01:46,840
It has to address the confidentiality or
disclosure of this sensitive data,

33
00:01:46,840 --> 00:01:50,540
it shouldn't be disclosed to somebody
who doesn't have access to it.

34
00:01:50,540 --> 00:01:54,290
And it should do that in the presence
of un-trusted software obviously.

35
00:01:54,290 --> 00:01:58,000
We're not going to assume that all
software is going to be trusted.

36
00:01:58,000 --> 00:02:00,120
Okay, so
we have our trusted computing base and

37
00:02:00,120 --> 00:02:03,640
then untrusted software that
is run by applications so on.

38
00:02:03,640 --> 00:02:06,410
So this disclosure that
we want to control for

39
00:02:06,410 --> 00:02:11,050
sensitive data can make assumption that
all code is the system is trusted.

40
00:02:11,050 --> 00:02:15,890
So the last couple of requirements
we identified in terms of integrity,

41
00:02:15,890 --> 00:02:20,100
confidentiality, implementing the
necessary functions really talk about

42
00:02:20,100 --> 00:02:21,170
what it does.

43
00:02:21,170 --> 00:02:25,620
Our confidence basically says
how well does it do that?

44
00:02:25,620 --> 00:02:26,960
Okay.
Confidence,

45
00:02:26,960 --> 00:02:32,425
we can't demand a proof that's going
to be really hard, a formal proof.

46
00:02:32,425 --> 00:02:37,530
But, as we said earlier there could be
things that increase our confidence

47
00:02:37,530 --> 00:02:40,760
in the system's ability to do all
these things that we're talking about.

48
00:02:40,760 --> 00:02:42,620
So where does this confidence come from?

49
00:02:42,620 --> 00:02:47,000
Well, a lot of things in real life,
it could come from the fact

50
00:02:47,000 --> 00:02:52,210
there experts of these kind of stuff and
evaluating this kind of a system.

51
00:02:52,210 --> 00:02:55,420
And maybe they analyze it,
they spend time with it.

52
00:02:55,420 --> 00:02:59,330
And it's their word based on which we
actually derive our confidence and

53
00:02:59,330 --> 00:03:02,680
the trust that is assured by the system.

54
00:03:02,680 --> 00:03:07,750
Finally, we can think about
this as our requirements or

55
00:03:07,750 --> 00:03:12,930
needs, in terms of trustworthiness,
can be maybe captured in a statement.

56
00:03:12,930 --> 00:03:17,210
And that statement says, well, this is
the kind of security or trust we expect

57
00:03:17,210 --> 00:03:21,460
the system to provide, or this is
what we expect the system to enforce.

58
00:03:21,460 --> 00:03:25,500
And then the system, someone who
builds the system, design and

59
00:03:25,500 --> 00:03:26,810
builds the system.

60
00:03:26,810 --> 00:03:30,130
So let's say there's a vendor
who provides the system.

61
00:03:30,130 --> 00:03:31,853
We said TCB functionality,

62
00:03:31,853 --> 00:03:36,590
normally operating system is where it
goes in typical systems that we have, so

63
00:03:36,590 --> 00:03:41,830
an OS vendor, for example, may have to
then tell us our requirements are met.

64
00:03:41,830 --> 00:03:45,820
We come with some sort of
a requirements analysis, or

65
00:03:45,820 --> 00:03:49,380
a statement that sort of
captures our expectation.

66
00:03:49,380 --> 00:03:52,410
And then somebody has to
give us a checklist or

67
00:03:52,410 --> 00:03:57,560
a proof of some kind that allows us to
believe that our expectations are met.

68
00:03:57,560 --> 00:04:03,150
And so the best possible scenario is
that all this could be done formally.

69
00:04:03,150 --> 00:04:07,800
We actually have a proof that
whoever is providing the trusted

70
00:04:07,800 --> 00:04:11,250
computing base actually
meets our requirements,

71
00:04:11,250 --> 00:04:14,020
our expectations that we
capture in this statement.

72
00:04:14,020 --> 00:04:17,293
When we have formal proof of it,
that would be ideal, but

73
00:04:17,293 --> 00:04:19,009
would it be possible always?

74
00:04:19,009 --> 00:04:22,620
This is one of the questions we're going
to explore as we go through this lesson.
