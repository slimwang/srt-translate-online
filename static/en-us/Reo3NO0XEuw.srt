1
00:00:00,480 --> 00:00:06,882
Now a second choice is reusing the remote object class that's available in the

2
00:00:06,882 --> 00:00:11,190
Java distributed object model. As before, the

3
00:00:11,190 --> 00:00:14,310
developer writes the bank account object providing

4
00:00:14,310 --> 00:00:17,220
the methods for deposit, withdrawal and balance

5
00:00:17,220 --> 00:00:19,890
and publishes the methods that are in

6
00:00:19,890 --> 00:00:23,160
the object using the remote interface. So

7
00:00:23,160 --> 00:00:25,740
that, this bank account interface now becomes

8
00:00:25,740 --> 00:00:28,650
available for any client that wants to

9
00:00:28,650 --> 00:00:31,110
access that object. The reason this interface becomes

10
00:00:31,110 --> 00:00:32,960
available to the client is because you're

11
00:00:32,960 --> 00:00:36,550
extending this remote interface class that's available in

12
00:00:36,550 --> 00:00:39,520
the distributed object model of Java. However,

13
00:00:39,520 --> 00:00:43,470
note how the bank account implementation is actually

14
00:00:43,470 --> 00:00:46,160
derived. It is derived from the Java built

15
00:00:46,160 --> 00:00:50,370
in classes for remote object, and remote server.

16
00:00:50,370 --> 00:00:55,190
So, you extend the remote object and the remote server in order to

17
00:00:55,190 --> 00:00:58,660
get this bank account implementation object. Now,

18
00:00:58,660 --> 00:01:01,780
when you derived your bank account implementation

19
00:01:01,780 --> 00:01:07,970
object from the built in distributed object model of Java, namely the remote

20
00:01:07,970 --> 00:01:12,040
object and the remote server classes. Now

21
00:01:12,040 --> 00:01:15,570
when you instantiate your bank account implementation

22
00:01:15,570 --> 00:01:19,130
object, it becomes instantly visible to the network

23
00:01:19,130 --> 00:01:21,210
clients. You don't have to do any of

24
00:01:21,210 --> 00:01:24,090
the heavy lifting. So once the public methods

25
00:01:24,090 --> 00:01:28,150
for the bank account implementation are written by inheriting

26
00:01:28,150 --> 00:01:30,540
these built-in classes of Java, all the way

27
00:01:30,540 --> 00:01:33,630
starting from the remote interface, the remote object

28
00:01:33,630 --> 00:01:35,980
and the remote server. When the bank account

29
00:01:35,980 --> 00:01:40,710
implementation object is instantiated the server becomes instantly visible,

30
00:01:40,710 --> 00:01:43,560
magically visible to remote clients through the

31
00:01:43,560 --> 00:01:46,680
Java runtime system. That's the power of the

32
00:01:46,680 --> 00:01:49,740
distributed object model of Java. So the

33
00:01:49,740 --> 00:01:53,510
second choice of reusing remote object class in

34
00:01:53,510 --> 00:01:57,590
order to derive this implementation results in

35
00:01:57,590 --> 00:02:00,600
the heavy lifting being done by the Java

36
00:02:00,600 --> 00:02:03,060
magic. So, all of the heavy lifting

37
00:02:03,060 --> 00:02:06,210
needed to make this bank account implementation object

38
00:02:06,210 --> 00:02:10,080
visible to network clients is being done by the Java runtime.

39
00:02:10,080 --> 00:02:14,100
Now that I've given you the difference between the two choices,

40
00:02:14,100 --> 00:02:19,693
one using remote interface, and the other deriving your object from

41
00:02:19,693 --> 00:02:22,280
the remote object from the remote server. Time for a quiz.
