1
00:00:00,100 --> 00:00:01,660
Okay, I'd like to go over each of the approaches we've

2
00:00:01,660 --> 00:00:04,140
talked about, and kind of the, the different properties they have. So

3
00:00:04,140 --> 00:00:08,430
the first approach was no caching and, and this meant on

4
00:00:08,430 --> 00:00:11,580
every page view, we we're doing a DB read, and when we

5
00:00:11,580 --> 00:00:14,730
submitted a new piece of art, there was no DB reads.

6
00:00:14,730 --> 00:00:17,700
Then we did this kind of what I would describe as the

7
00:00:17,700 --> 00:00:21,670
naive caching approach. Which was basically have the basic cache if

8
00:00:21,670 --> 00:00:25,260
the cache is empty, do the DB read, and if it's not,

9
00:00:25,260 --> 00:00:28,490
return the result. And what we'll, we'll add a, a third

10
00:00:28,490 --> 00:00:32,490
column on the edge here called Bugs. So the naive caching

11
00:00:32,490 --> 00:00:35,190
only does a DB read on a cache miss and doesn't

12
00:00:35,190 --> 00:00:39,450
do any reading on a submit, and is full of bugs. [LAUGH]

13
00:00:39,450 --> 00:00:42,470
Or at least has one bug, where the, the front page

14
00:00:42,470 --> 00:00:44,500
would become out of, out of date, the front page would

15
00:00:44,500 --> 00:00:47,440
become stale, so then, we started clearing the cache. This has

16
00:00:47,440 --> 00:00:50,270
the same property of doing a DB read on a page view,

17
00:00:50,270 --> 00:00:54,030
no DB read on a submit and no bugs. Then,

18
00:00:54,030 --> 00:00:56,180
we improve to the kind of the refreshing of the

19
00:00:56,180 --> 00:00:58,660
cache. And so this means we're no longer doing and

20
00:00:58,660 --> 00:01:03,000
DB reads on page views, or very rarely, basically only

21
00:01:03,000 --> 00:01:05,950
the first time our app turns on and the cache

22
00:01:05,950 --> 00:01:08,540
is empty and that first page view. Every other page

23
00:01:08,540 --> 00:01:10,730
view after that is cached, which is a really nice

24
00:01:10,730 --> 00:01:15,280
property to have. And we're doing one DB read per submission,

25
00:01:15,280 --> 00:01:18,230
and it works. Now, the difference between, between

26
00:01:18,230 --> 00:01:21,850
these two and this one, is the notion

27
00:01:21,850 --> 00:01:25,300
that a page view doesn't hit the database

28
00:01:25,300 --> 00:01:27,420
hardly ever and that's a really nice property

29
00:01:27,420 --> 00:01:30,260
to have. You should always be striving to

30
00:01:30,260 --> 00:01:33,900
have the situation where a normal, un-logged in,

31
00:01:33,900 --> 00:01:37,660
basic, you know, viewer of your website, doesn't

32
00:01:37,660 --> 00:01:40,580
touch the database. And I'm going to kind of condense

33
00:01:40,580 --> 00:01:42,770
that down to the notion that

34
00:01:42,770 --> 00:01:45,230
simple users shouldn't touch the database. Basically,

35
00:01:45,230 --> 00:01:46,250
you know, they're just lurkers, they're

36
00:01:46,250 --> 00:01:47,720
just reading. They're, they're not changing the

37
00:01:47,720 --> 00:01:50,930
site so they shouldn't be touching the database. Everything should be cached and

38
00:01:50,930 --> 00:01:54,310
ready to go for them. That makes the user experience better because the

39
00:01:54,310 --> 00:01:57,810
request will be faster and it makes, keeps your load down because you

40
00:01:57,810 --> 00:02:00,880
can add many, many of those users. And because they're just bouncing off

41
00:02:00,880 --> 00:02:03,160
the cache you don't have to do very much work to serve them.

42
00:02:03,160 --> 00:02:05,670
You don't actually have to hit the database now, there's a fourth approach

43
00:02:05,670 --> 00:02:09,410
that we didn't implement yet. Which is the most aggressive of

44
00:02:09,410 --> 00:02:12,960
all of these, and I'm going to kind of refer to this as

45
00:02:12,960 --> 00:02:15,010
distinct from refreshing the cache, I'm going to call it updating the

46
00:02:15,010 --> 00:02:17,610
cache. And I'll, and I'll talk about this approach in just

47
00:02:17,610 --> 00:02:20,950
a sec and we can get to the state where on

48
00:02:20,950 --> 00:02:23,060
a, on a page view, on a simple page view, we

49
00:02:23,060 --> 00:02:27,450
do zero DB reads ever and this is slightly better than

50
00:02:27,450 --> 00:02:31,550
rarely. And we don't do any database reads on submission either, and

51
00:02:31,550 --> 00:02:34,440
it works. This is a really nice property to have now of

52
00:02:34,440 --> 00:02:36,410
course, we still do our database right. You notice we haven't been

53
00:02:36,410 --> 00:02:39,050
optimizing rights at all, because you've got to store this, you've gotta

54
00:02:39,050 --> 00:02:41,480
store the submission at some point. But you can cut down on the

55
00:02:41,480 --> 00:02:45,440
data base reads lower them to both zero by keeping your cache

56
00:02:45,440 --> 00:02:49,100
completely up to date, and I'll show you how we might do that

57
00:02:49,100 --> 00:02:52,775
right now. Okay, we're going to look at this picture one more time

58
00:02:52,775 --> 00:02:56,560
here. We know all the pieces now, the user, the ASCIIchan the database,

59
00:02:56,560 --> 00:02:58,980
and our cache. We're going to talk about a new situation

60
00:02:58,980 --> 00:03:01,470
here. So let's talk about, let's pretend our cache is already warm.

61
00:03:01,470 --> 00:03:03,900
You know it's got some pictures in there, and reading the front

62
00:03:03,900 --> 00:03:07,980
page which hits our cache which you know, returns the result that

63
00:03:07,980 --> 00:03:11,360
we send back to the user. Nothing too complex there, we're not

64
00:03:11,360 --> 00:03:14,910
hitting the database because we're only doing reads. Now what happens is

65
00:03:14,910 --> 00:03:17,380
when we use a database write, we're going to send that right to

66
00:03:17,380 --> 00:03:22,200
the database, or simultaneously going to send that right to our cache

67
00:03:22,200 --> 00:03:24,340
as well. And so this, this gets a little bit

68
00:03:24,340 --> 00:03:27,830
more complex, we're going to send to write to the database,

69
00:03:27,830 --> 00:03:30,930
and instead of immediately rereading from the database to update

70
00:03:30,930 --> 00:03:33,610
our cache or clearing our cache, we're just going to update the

71
00:03:33,610 --> 00:03:36,860
cache. We're going to say okay, this affects the front page,

72
00:03:36,860 --> 00:03:39,670
so let's find that front page cache, insert our new

73
00:03:39,670 --> 00:03:43,070
piece of you know, ASCII art into the cache, and

74
00:03:43,070 --> 00:03:47,300
then from then on, that follow up request that, that redirects,

75
00:03:47,300 --> 00:03:50,810
that follow-up request to slash is basically going to bounce right

76
00:03:50,810 --> 00:03:53,700
off the cache again. So, we never did, we never did a

77
00:03:53,700 --> 00:03:57,740
database read during this whole process, we're just writing only. The only

78
00:03:57,740 --> 00:04:00,590
time we would do a database read is when we that start

79
00:04:00,590 --> 00:04:02,960
up the app for the first time and do the first request,

80
00:04:02,960 --> 00:04:06,320
or maybe we have a program that does that for us. So

81
00:04:06,320 --> 00:04:10,250
no user ever does a database read. This is exactly how we

82
00:04:10,250 --> 00:04:12,510
do it on Reddit now. Every listing you can look at is

83
00:04:12,510 --> 00:04:15,440
stored in it's own cache. And when you submit a

84
00:04:15,440 --> 00:04:18,140
link or do a vote we update all of the appropriate

85
00:04:18,140 --> 00:04:21,374
caches, all the different cache keys that may be affected. So,

86
00:04:21,374 --> 00:04:25,137
so it kind of introduced the trade-off here of complex inserts

87
00:04:25,137 --> 00:04:29,210
versus database reads. On reddit we actually do this, we have

88
00:04:29,210 --> 00:04:31,850
a different cache key for every listing you might look at,

89
00:04:31,850 --> 00:04:35,260
for every sorting, for every subreddit, etcetera, etcetera. And when you

90
00:04:35,260 --> 00:04:37,630
submit a link or you vote, we have to update all

91
00:04:37,630 --> 00:04:39,550
of, all of the possible listings that could be affected

92
00:04:39,550 --> 00:04:43,300
by that action. On the flipside, you know, users are pummeling

93
00:04:43,300 --> 00:04:45,580
the site all the time and they never read from

94
00:04:45,580 --> 00:04:50,240
the Database. And you know, so we have complex inserts plus

95
00:04:50,240 --> 00:04:54,762
speed, which is nice but, you know, complexity is complexity.

96
00:04:54,762 --> 00:04:57,500
On AsciiChan we probably don't need to do this right now

97
00:04:57,500 --> 00:04:59,870
our site just isn't at that scale. It doesn't, you

98
00:04:59,870 --> 00:05:02,670
know, a cache stampede isn't a realistic threat because we don't

99
00:05:02,670 --> 00:05:05,500
have that many users. But if we did, this is the kind of

100
00:05:05,500 --> 00:05:08,060
approach we'd want to take and, and so this is kind of the name of

101
00:05:08,060 --> 00:05:11,100
the game when caching. You know, if you want to keep this cache totally accurate

102
00:05:11,100 --> 00:05:12,730
without doing database rights, we're going to have

103
00:05:12,730 --> 00:05:14,770
to do, you know, complex code. So,

104
00:05:14,770 --> 00:05:18,170
one thing to keep in mind the more accurate the cache, the more complex

105
00:05:18,170 --> 00:05:21,320
the code. And these are the decisions you'll make as you build your website.

106
00:05:21,320 --> 00:05:22,720
And as you're scaling, you know, this

107
00:05:22,720 --> 00:05:24,150
is probably the ultimate solution you want to

108
00:05:24,150 --> 00:05:27,719
look to when you're kind of caching a database. You know, if the, if the

109
00:05:27,719 --> 00:05:28,560
solution works for you.
