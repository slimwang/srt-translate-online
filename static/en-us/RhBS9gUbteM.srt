1
00:00:00,430 --> 00:00:05,970
SPIN arbitrates another precious resource, which is another core service, namely

2
00:00:05,970 --> 00:00:12,450
the CPU. SPIN only decides at a macro level, the amount of time, that is

3
00:00:12,450 --> 00:00:16,210
given to a particular extension. That's

4
00:00:16,210 --> 00:00:19,380
done through the SPIN global scheduler. The

5
00:00:19,380 --> 00:00:22,750
global scheduler interacts with the application

6
00:00:22,750 --> 00:00:25,560
threads package. And application is a loose

7
00:00:25,560 --> 00:00:30,330
term here. It is the extension that is living on top of SPIN. Which

8
00:00:30,330 --> 00:00:35,200
may be an entire operating system or maybe just an application. For

9
00:00:35,200 --> 00:00:40,200
example, let's say, we are running Linux and Vista as two

10
00:00:40,200 --> 00:00:45,540
extensions on top of SPIN. Each maybe given a particular time

11
00:00:45,540 --> 00:00:51,010
slice, say of x milliseconds. How each extension uses

12
00:00:51,010 --> 00:00:55,810
the time that has been given to it for scheduling user-level

13
00:00:55,810 --> 00:01:00,740
processes running inside the operating system is entirely

14
00:01:00,740 --> 00:01:06,180
up to those extensions. And to support the concept of threads in

15
00:01:06,180 --> 00:01:11,290
the operating system and management of time, SPIN provides an abstraction

16
00:01:11,290 --> 00:01:16,123
called strand. The actual operating systems that extend

17
00:01:16,123 --> 00:01:23,420
SPIN will have the threads map to strands. So strand is the unit of scheduling

18
00:01:23,420 --> 00:01:29,400
that SPIN's global scheduler uses, but the semantics of the strand is

19
00:01:29,400 --> 00:01:32,620
entirely decided by the extension. If,

20
00:01:32,620 --> 00:01:35,600
for instance, I'm implementing p-threads, I will

21
00:01:35,600 --> 00:01:39,000
define the semantics of the strand to

22
00:01:39,000 --> 00:01:41,700
be the semantics of the p-thread's scheduler.

23
00:01:41,700 --> 00:01:48,270
And there are event handlers that help in the scheduling that needs to happen in

24
00:01:48,270 --> 00:01:53,150
the extensions. And the kind of events that SPIN provides for this core service

25
00:01:53,150 --> 00:01:57,870
of CPU scheduling are block, unblock, checkpoint,

26
00:01:57,870 --> 00:02:01,370
and resume. And the extensions event handlers

27
00:02:01,370 --> 00:02:03,370
have to give the semantic meaning of

28
00:02:03,370 --> 00:02:07,380
what needs to happen when these event handlers

29
00:02:07,380 --> 00:02:09,570
are called, because these are only interface

30
00:02:09,570 --> 00:02:12,990
functions. What needs to happen when this

31
00:02:12,990 --> 00:02:16,240
interface function is called is up to

32
00:02:16,240 --> 00:02:19,410
the extension. For example, a disk interrupt

33
00:02:19,410 --> 00:02:27,600
handler may result in an unblock event being raised for a particular strand that

34
00:02:27,600 --> 00:02:30,110
was waiting for the disk IO completion.

35
00:02:30,110 --> 00:02:33,160
Similarly, if an application were to make

36
00:02:33,160 --> 00:02:35,550
a system call that is a blocking

37
00:02:35,550 --> 00:02:39,590
system call, then the service that provides that

38
00:02:39,590 --> 00:02:42,680
facility to the application will raise this

39
00:02:42,680 --> 00:02:46,200
block event, which will result in the extension

40
00:02:46,200 --> 00:02:49,400
taking the appropriate action of saving the

41
00:02:49,400 --> 00:02:52,380
state of the currently running process. And putting

42
00:02:52,380 --> 00:02:54,750
it in the appropriate queues that it

43
00:02:54,750 --> 00:02:58,520
has, to wait for that system call completion.

44
00:02:58,520 --> 00:03:02,925
So in a nutshell, what SPIN provides are exactly the kind of

45
00:03:02,925 --> 00:03:08,240
primitives that may be needed by an extension that wants to provide

46
00:03:08,240 --> 00:03:13,320
the service of CPU scheduling. So SPIN only provides the interface function

47
00:03:13,320 --> 00:03:18,280
definitions. The semantics are all up to the extension on how

48
00:03:18,280 --> 00:03:24,060
exactly the scheduling is affected. And all that SPIN does

49
00:03:24,060 --> 00:03:28,490
is to ensure that the extension gets time

50
00:03:28,490 --> 00:03:32,210
on the CPU through this global scheduler that

51
00:03:32,210 --> 00:03:35,950
SPIN has for allocating time to different extensions

52
00:03:35,950 --> 00:03:38,970
that may be concurrently living on top of SPIN.
