1
00:00:00,000 --> 00:00:03,088
>> First we'll use what's probably the simplest method.

2
00:00:03,088 --> 00:00:08,960
Recall that the reason that a trivial parallelization didn't work was that the read, modify, write

3
00:00:08,960 --> 00:00:13,356
operation that we needed to increment a bin was actually 3 separate operations--

4
00:00:13,356 --> 00:00:18,415
a global memory read, a local increment in a register and a global memory write.

5
00:00:18,415 --> 00:00:22,939
What if we could make this read, modify, write operation here,

6
00:00:22,939 --> 00:00:25,626
actually be 1 operation instead of 3?

7
00:00:25,626 --> 00:00:29,594
If it was only 1 operation, it could not be interrupted by another thread.

8
00:00:29,594 --> 00:00:34,600
Now, we call such an operation atomic, and as we learned last unit,

9
00:00:34,600 --> 00:00:37,595
modern GPU's support atomic operations to memory.

10
00:00:37,595 --> 00:00:42,365
What the GPU does, in essence, is locks down a particular memory location during the

11
00:00:42,365 --> 00:00:46,716
read, modify, write process, so that no other thread can access it.

12
00:00:46,716 --> 00:00:51,589
This is a simple change in the code. So we're only going to change 1 line in the code.

13
00:00:51,589 --> 00:00:54,786
Here's our naive histogram, here's this new histogram that we're doing,

14
00:00:54,786 --> 00:00:57,528
and you notice we're only going to change the last line.

15
00:00:57,528 --> 00:01:01,327
We're changing this simple increment here to an atomic increment.

16
00:01:01,327 --> 00:01:04,037
It's a simple change, but let's see the effect.

17
00:01:04,037 --> 00:01:08,618
So now we're going to run the histogram program using simple histo instead of naive histo.

18
00:01:08,619 --> 00:01:15,934
And we see when we do that we get the expected 4096 elements per bin, great news.

19
00:01:15,934 --> 00:01:20,169
Now the disadvantage of this technique, is that it serializes access

20
00:01:20,169 --> 00:01:22,827
to any particular bin during the atomic operation.

21
00:01:22,827 --> 00:01:25,779
Many threads might want to update that bin,

22
00:01:25,779 --> 00:01:29,651
but only one thread at a time actually gets to do so, and so the others have to wait.

23
00:01:29,651 --> 00:01:34,793
This contention for the atomic will likely be the performance limiter in any histogram code.

24
00:01:34,793 --> 00:01:39,391
So let's say you have a million measurements, with which you'd like to calculate a histogram.

25
00:01:39,391 --> 00:01:44,926
You can choose to have 10 bins, 100 bins, or 1,000 bins in your

26
00:01:44,926 --> 00:01:50,576
histogram if you use the atomic method, which will most likely run fastest.
