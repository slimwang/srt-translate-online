1
00:00:00,622 --> 00:00:03,510
I'm going to show you where I put my code.

2
00:00:03,510 --> 00:00:09,554
Over here in the octopus in getNotes, instead of returning model.getAllNotes,

3
00:00:09,554 --> 00:00:14,148
I'm going to instead return model.getAllNotes.reverse.

4
00:00:14,148 --> 00:00:18,229
So my octopus, when it passes all of my notes over to my view,

5
00:00:18,229 --> 00:00:21,310
it actually reverses it for the view.

6
00:00:21,310 --> 00:00:23,150
The view doesn't have to worry about it.

7
00:00:23,150 --> 00:00:26,480
Now, I would like you to try to implement another feature.

8
00:00:26,480 --> 00:00:30,990
We're going to add a date to every new note that we create, and

9
00:00:30,990 --> 00:00:33,230
we're going to display that date too.

10
00:00:33,230 --> 00:00:36,010
Now, let's just talk generally about how we're going to do that, and

11
00:00:36,010 --> 00:00:38,060
then I'll set you off to do it yourself.

12
00:00:38,060 --> 00:00:38,670
So first of all,

13
00:00:38,670 --> 00:00:42,240
we're going to need to store some kind of date when we make a new note.

14
00:00:42,240 --> 00:00:46,470
Now I'm going to open up the console because one great way to do this would be

15
00:00:46,470 --> 00:00:48,440
using Date.now.

16
00:00:48,440 --> 00:00:49,900
When you run Date.now,

17
00:00:49,900 --> 00:00:54,270
it returns a big number which represents this current moment in time.

18
00:00:54,270 --> 00:00:58,430
If I run it again, you'll see that the number has gotten a little bit bigger.

19
00:00:58,430 --> 00:01:00,640
So, that's how we store our date.

20
00:01:00,640 --> 00:01:05,099
We're going to need to put that inside of our addNewNote function.

21
00:01:05,099 --> 00:01:08,990
That's where it creates the object literal, which becomes our note.

22
00:01:08,990 --> 00:01:13,630
So, now we're not just storing content, we're going to store a date.

23
00:01:13,630 --> 00:01:14,840
So that changes our code so

24
00:01:14,840 --> 00:01:18,200
that way, it's storing a date every time we add a new note.

25
00:01:18,200 --> 00:01:22,640
We don't need to change the getNotes function because it just returns all of

26
00:01:22,640 --> 00:01:26,470
our notes, including their content and their date.

27
00:01:26,470 --> 00:01:28,740
And it reverses them for the view.

28
00:01:28,740 --> 00:01:32,020
And speaking of the view, that actually needs to change as well.

29
00:01:32,020 --> 00:01:33,760
Now that we're storing dates for

30
00:01:33,760 --> 00:01:37,550
our notes, we probably want to display that date as well.

31
00:01:37,550 --> 00:01:41,830
Now, you can add that in the HTML string down here that we're generating.

32
00:01:41,830 --> 00:01:46,060
I'd suggest putting it in an element with a class of note-date, so

33
00:01:46,060 --> 00:01:49,790
that way, the CSS that I included gets applied properly.

34
00:01:49,790 --> 00:01:51,130
Now, one last thing.

35
00:01:51,130 --> 00:01:53,380
Before when we were experimenting with this,

36
00:01:53,380 --> 00:01:56,540
we were creating notes that didn't have dates applied.

37
00:01:56,540 --> 00:01:58,940
So if you go back into your console here and

38
00:01:58,940 --> 00:02:04,280
you run localStorage.clear, it'll wipe away all the persistent storage.

39
00:02:04,280 --> 00:02:08,410
So when we press refresh, we don't have any notes anymore and

40
00:02:08,410 --> 00:02:12,910
all of our notes will then have that date property that you're adding.

41
00:02:12,910 --> 00:02:14,730
And now, I leave it to you.

42
00:02:14,730 --> 00:02:16,690
Go forth and add date stamps to your notes.
