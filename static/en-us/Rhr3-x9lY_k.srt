1
00:00:00,130 --> 00:00:02,320
Okay, so I'd like to talk about this a

2
00:00:02,320 --> 00:00:05,220
new concept called a Cache Stampede. So we, we've

3
00:00:05,220 --> 00:00:07,010
got a use case now, you know a user

4
00:00:07,010 --> 00:00:11,060
makes a request and a request probably bounces off our

5
00:00:11,060 --> 00:00:14,720
cache and returns. Now if, if a user makes

6
00:00:14,720 --> 00:00:18,270
the, a post request that edits the database. We

7
00:00:18,270 --> 00:00:21,610
clear the cache and on the next request from

8
00:00:21,610 --> 00:00:25,780
that user, we go back to the database and update

9
00:00:25,780 --> 00:00:28,390
our cache and return to the user. The user submits,

10
00:00:28,390 --> 00:00:30,670
we clear the cache, and on a following request we do

11
00:00:30,670 --> 00:00:34,210
the whole chain agian. Now, a problem happens when we

12
00:00:34,210 --> 00:00:37,950
have many users. Say that one of these guys posts to

13
00:00:37,950 --> 00:00:43,590
the database. Which writes the database, which clears our cache,

14
00:00:43,590 --> 00:00:45,900
and then the rest of these guys, you know, they're just

15
00:00:45,900 --> 00:00:47,470
browsing the site. They all come to the site at the

16
00:00:47,470 --> 00:00:50,510
same time. So we've got all these requests coming in to

17
00:00:50,510 --> 00:00:52,910
ASCII Chan and our cache is empty. They're all coming at

18
00:00:52,910 --> 00:00:56,390
the same time. We just cleared the cache, and what's going to happen

19
00:00:56,390 --> 00:01:00,370
is they're all going to say okay, the cache is empty, therefore

20
00:01:00,370 --> 00:01:04,629
we must all read from the database at the same time. Cause

21
00:01:04,629 --> 00:01:06,290
they're all like okay, cache is empty, we need to update

22
00:01:06,290 --> 00:01:08,590
the cache, and them bam bam bam bam bam, they all hit

23
00:01:08,590 --> 00:01:12,140
the database, running the exact same query just, so they can store

24
00:01:12,140 --> 00:01:15,660
in the cache. This is called a cache stampede, and what happens

25
00:01:15,660 --> 00:01:18,290
is the database gets beat up, and. You know that

26
00:01:18,290 --> 00:01:21,260
query that only takes a few milliseconds before, because it is

27
00:01:21,260 --> 00:01:24,070
a small database could take a lot of time. Or never

28
00:01:24,070 --> 00:01:27,510
return at all because of all of the queries are blocking

29
00:01:27,510 --> 00:01:29,650
at each other. That is something that we saw happen

30
00:01:29,650 --> 00:01:33,040
at reddit we kind of went through this whole process kind

31
00:01:33,040 --> 00:01:36,880
of learning as we go. Cached stampedes are really painful, but

32
00:01:36,880 --> 00:01:40,750
the solution is Fairly simply. So a Cache Stampede is when

33
00:01:40,750 --> 00:01:43,790
multiple cache misses from so much traffic create too much

34
00:01:43,790 --> 00:01:48,220
load on the database. Or not necessarily database, whatever slow computation

35
00:01:48,220 --> 00:01:49,940
you've got going on that you don't want to do

36
00:01:49,940 --> 00:01:53,350
very many of. You know that you constrained for resources to

37
00:01:53,350 --> 00:01:55,710
compute. Let's have a quick quiz and see if we

38
00:01:55,710 --> 00:01:59,270
can figure out the solution to this problem. Okay how can

39
00:01:59,270 --> 00:02:01,820
we avoid a cache stampede? We replicate the database to

40
00:02:01,820 --> 00:02:05,940
handle more reads. Only allow one web request at a time.

41
00:02:05,940 --> 00:02:09,660
Only allow one database request at a time, or database query, at a

42
00:02:09,660 --> 00:02:13,640
time. Or, don't clear the cache, but instead overwrite it with new data.
