1
00:00:00,000 --> 00:00:06,000
Let's try to do this in a general way now. Right. So we call this procedure down heapify.

2
00:00:06,000 --> 00:00:11,000
Let's talk about how we actually will go with this.

3
00:00:11,000 --> 00:00:14,000
I've made a couple of helpful routines to help with the heap.

4
00:00:14,000 --> 00:00:20,000
given a position i in the heap, left (i) returns the position of the left child.

5
00:00:20,000 --> 00:00:26,000
Right (i )returns the position of the right child. Parent (i) returns the position of the parent.

6
00:00:26,000 --> 00:00:30,000
Root (i) answers whether or not the node that we're talking about is a root.

7
00:00:30,000 --> 00:00:35,000
There's no root. Leaf (L, i) returns whether or not we're looking at a leaf (i).

8
00:00:35,000 --> 00:00:37,000
In other words, it has no children.

9
00:00:37,000 --> 00:00:42,000
It has no children if what where the right child would be is off the end of the list

10
00:00:42,000 --> 00:00:45,000
and where the left child would be is off the end of the list.

11
00:00:45,000 --> 00:00:48,000
Then there's one other special kind of node and there can be at most

12
00:00:48,000 --> 00:00:51,000
one of these in the whole tree and that's a one_child node.

13
00:00:51,000 --> 00:00:56,000
That happens if a node has a left child, which is the very last element in the array.

14
00:00:56,000 --> 00:00:58,000
The right child doesn't exist.

15
00:00:58,000 --> 00:01:05,000
That's just what I said that the right child is at the very end of the list

16
00:01:05,000 --> 00:01:10,000
or off the end of the list then that's a one_child node.

17
00:01:10,000 --> 00:01:14,000
Down heapify is this notion that we've got.

18
00:01:14,000 --> 00:01:19,000
We apply this in the notion where we've got a heap rooted at node i that satisfies

19
00:01:19,000 --> 00:01:26,000
the heap property except perhaps i to its children, to its immediate children.

20
00:01:26,000 --> 00:01:30,000
We can apply this if the heap property is satisfied.

21
00:01:30,000 --> 00:01:33,000
Everywhere except maybe between the root and its kids,

22
00:01:33,000 --> 00:01:38,000
so the root in particular the node i and its kids.

23
00:01:38,000 --> 00:01:46,000
Let's just say that. If i is actually a leaf, then we're done. Right.

24
00:01:46,000 --> 00:01:48,000
We're satisfied everywhere except for between i and its children,

25
00:01:48,000 --> 00:01:50,000
and i doesn't have any children.

26
00:01:50,000 --> 00:01:54,000
So, good. That's great. Heap property is restored.

27
00:01:54,000 --> 00:01:58,000
If i has only one child, then we need to think a little harder.

28
00:01:58,000 --> 00:02:02,000
In the case where i has one child, we check the heap property

29
00:02:02,000 --> 00:02:11,000
between i and its one child on the left and if i is bigger than its child that's bad.

30
00:02:11,000 --> 00:02:15,000
That means the heap property isn't satisfied but all we have to do to fix it is

31
00:02:15,000 --> 00:02:19,000
we just swap the value in the left child and i.

32
00:02:19,000 --> 00:02:22,000
That's what we did and then now we know that that last node

33
00:02:22,000 --> 00:02:25,000
is the very last node in the tree and that node we just swapped into

34
00:02:25,000 --> 00:02:29,000
is the very last node in the tree so it must be that things are happy everywhere.

35
00:02:29,000 --> 00:02:32,000
What if i has two children? So this is some internal node in the tree now.

36
00:02:32,000 --> 00:02:37,000
Or possibly a root of a large tree. So now we check the heap property.

37
00:02:37,000 --> 00:02:41,000
I'm going to do this this way. I'm going to ask look at the left and the right children,

38
00:02:41,000 --> 00:02:44,000
and look at the minimum value of those two.

39
00:02:44,000 --> 00:02:49,000
If the minimum value is bigger than or equal to L[i] that means L[i]

40
00:02:49,000 --> 00:02:54,000
the value at node i is smaller than both the kids so we're good.

41
00:02:54,000 --> 00:02:58,000
The heap property is satisfied everywhere and we can just return.

42
00:02:58,000 --> 00:03:06,000
On the other hand, sadly if that doesn't hold, then we need to see which child is the smallest

43
00:03:06,000 --> 00:03:10,000
or the smaller of the two and swap i's value into that child.

44
00:03:10,000 --> 00:03:13,000
That's just what we're doing in the example by hand.

45
00:03:13,000 --> 00:03:17,000
Let's check it. If the left child is smaller than the right child,

46
00:03:17,000 --> 00:03:20,000
that means that the left child is the smallest one.

47
00:03:20,000 --> 00:03:28,000
We swap i and the left child's value and then we need to down heapify on the left child.

48
00:03:28,000 --> 00:03:36,000
We've basically fixed things everywhere except for possibly the tree rooted at left (i).

49
00:03:36,000 --> 00:03:38,000
It could actually not satisfy the heap property but that's okay.

50
00:03:38,000 --> 00:03:42,000
We can fix that by bubbling down the tree with down heapify once again.

51
00:03:42,000 --> 00:03:48,000
It's just what we did when we're doing it by hand and then we can return.

52
00:03:48,000 --> 00:03:53,000
Finally, we reached this point, if the heap property is violated and the right child of i

53
00:03:53,000 --> 00:03:58,000
is between i and the right child of i so we can just swap i and the right child of i

54
00:03:58,000 --> 00:04:04,000
possibly causing the tree rooted at the right child of i to be violated.

55
00:04:04,000 --> 00:04:09,000
We just run down heapify starting from there. When that's done, we can return.

56
00:04:09,000 --> 99:59:59,999
And we've established the heap property throughout the tree.
