1
00:00:00,000 --> 00:00:04,000
Given the non-optimality of depth-first search,

2
00:00:04,000 --> 00:00:07,000
why would anybody choose to use it?

3
00:00:07,000 --> 00:00:10,000
Well, the answer has to do with the storage requirements.

4
00:00:10,000 --> 00:00:13,000
Here I've illustrated a state space

5
00:00:13,000 --> 00:00:18,000
consisting of a very large or even infinite binary tree.

6
00:00:18,000 --> 00:00:22,000
As we go to levels 1, 2, 3, down to level n,

7
00:00:22,000 --> 00:00:24,000
the tree gets larger and larger.

8
00:00:24,000 --> 00:00:29,000
Now, let's consider the frontier for each of these search algorithms.

9
00:00:29,000 --> 00:00:35,000
For breadth-first search, we know a frontier looks like that,

10
00:00:35,000 --> 00:00:40,000
and so when we get down to level n, we'll require a storage space of

11
00:00:40,000 --> 00:00:45,000
2 to the n of pass in a breadth-first search.

12
00:00:45,000 --> 00:00:49,000
For cheapest first, the frontier is going to be more complicated.

13
00:00:49,000 --> 00:00:53,000
It's going to sort of work out this contour of cost,

14
00:00:53,000 --> 00:00:57,000
but it's going to have a similar total number of nodes.

15
00:00:57,000 --> 00:01:03,000
But for depth-first search, as we go down the tree, we start going down this branch,

16
00:01:03,000 --> 00:01:08,000
and then we back up, but at any point, our frontier is only going to have n nodes

17
00:01:08,000 --> 00:01:14,000
rather than 2 to the n nodes, so that's a substantial savings for depth-first search.

18
00:01:14,000 --> 00:01:19,000
Now, of course, if we're also keeping track of the explored set,

19
00:01:19,000 --> 00:01:21,000
then we don't get that much savings.

20
00:01:21,000 --> 00:01:25,000
But without the explored set, depth-first search has a huge advantage

21
00:01:25,000 --> 00:01:27,000
in terms of space saved.

22
00:01:27,000 --> 00:01:30,000
One more property of the algorithms to consider

23
00:01:30,000 --> 00:01:35,000
is the property of completeness, meaning if there is a goal somewhere,

24
00:01:35,000 --> 00:01:37,000
will the algorithm find it?

25
00:01:37,000 --> 00:01:41,000
So, let's move from very large trees to infinite trees,

26
00:01:41,000 --> 00:01:47,000
and let's say that there's some goal hidden somewhere deep down in that tree.

27
00:01:47,000 --> 00:01:51,000
And the question is, are each of these algorithms complete?

28
00:01:51,000 --> 00:01:55,000
That is, are they guaranteed to find a path to the goal?

29
00:01:55,000 --> 99:59:59,999
Mark off the check boxes for the algorithms that you believe are complete in this sense.
