1
00:00:00,000 --> 00:00:02,000
Well, I'd like to talk a little bit about how random testing differs from fuzzing

2
00:00:02,000 --> 00:00:05,000
and the short answer is they're the same thing.

3
00:00:05,000 --> 00:00:07,000
The long answer is going to require a bit of explanation.

4
00:00:07,000 --> 00:00:11,000
So let's go back in time to 1990 when a professor called Bart Miller and his students

5
00:00:11,000 --> 00:00:15,000
published a paper called An Empirical Study of the Reliability of Unix Utilities.

6
00:00:15,000 --> 00:00:18,000
And so what they did as part of the fuzzing effort was provide a completely random data

7
00:00:18,000 --> 00:00:20,000
to a bunch of Unix command-line utilities.

8
00:00:20,000 --> 00:00:25,000
These were things like editors, terminal programs, text processing utilities,

9
00:00:25,000 --> 00:00:29,000
and other similar Unix tools that you can basically think of as being tools predating the era of

10
00:00:29,000 --> 00:00:32,000
graphical use or interfaces on Unix systems.

11
00:00:32,000 --> 00:00:35,000
And what they found is using this incredibly simple technique, that is doing random testing

12
00:00:35,000 --> 00:00:38,000
without worrying at all about the input validity problem they were able to crash

13
00:00:38,000 --> 00:00:43,000
a quarter to a third of these utilities on basically any version of Unix that they tested.

14
00:00:43,000 --> 00:00:45,000
And so what you have here is a pretty strong result.

15
00:00:45,000 --> 00:00:47,000
They were able to crash lots of applications with minimal effort.

16
00:00:47,000 --> 00:00:51,000
What that means is that the quality of the input validation done by these sorts of programs

17
00:00:51,000 --> 00:00:53,000
at the time was really rather bad.

18
00:00:53,000 --> 00:00:57,000
A few years later in 1995, the same group repeated the effort and wrote another paper about this.

19
00:00:57,000 --> 00:01:00,000
This time they not only tested the same kind of utilities that they tested 5 years earlier

20
00:01:00,000 --> 00:01:04,000
but they extended the work to testing network applications and GUI applications

21
00:01:04,000 --> 00:01:06,000
and basically they got very similar results.

22
00:01:06,000 --> 00:01:11,000
Now, in another 5 years in 2000, the same people did another study

23
00:01:11,000 --> 00:01:13,000
and this time they fuzzed Windows applications.

24
00:01:13,000 --> 00:01:15,000
And what they found was basically more of the same.

25
00:01:15,000 --> 00:01:18,000
They can crash most of the applications that they tested.

26
00:01:18,000 --> 00:01:22,000
And then finally in 2006, the most recent installment of a fuzzing study by this group was published.

27
00:01:22,000 --> 00:01:24,000
This time they attacked Mac OS X.

28
00:01:24,000 --> 00:01:26,000
And this time they found something a little bit different.

29
00:01:26,000 --> 00:01:28,000
The command-line utilities on Max OS X would hardly crash.

30
00:01:28,000 --> 00:01:31,000
They found a much lower rate of crashes than they have found earlier.

31
00:01:31,000 --> 00:01:34,000
But on the other hand, of the 30 GUI apps that they tested, 22 could be crashed.

32
00:01:34,000 --> 00:01:37,000
It's worth mentioning that as this group evolved their fuzzing work,

33
00:01:37,000 --> 00:01:39,000
they kept having to write new tools.

34
00:01:39,000 --> 00:01:42,000
For example, to fuzz the Windows applications they had to generate Windows events

35
00:01:42,000 --> 00:01:45,000
to GUI applications and they had to do something similar for Mac OS

36
00:01:45,000 --> 00:01:47,000
and previously for X Windows applications.

37
00:01:47,000 --> 00:01:51,000
So they had to keep evolving their tools but the input generation methodology that they used,

38
00:01:51,000 --> 00:01:55,000
that is to say basically generating random garbage and not really worrying about the

39
00:01:55,000 --> 00:01:58,000
input validity problem remained the same across all of these studies.

40
00:01:58,000 --> 00:02:03,000
So now what I've covered so far was this particular random testing effort by this one research group.

41
00:02:03,000 --> 00:02:07,000
But something interesting happened I believe sometime around 2000 or a little after

42
00:02:07,000 --> 00:02:11,000
is the term fuzzing took on another use.
