1
00:00:00,480 --> 00:00:04,730
Previously we'll learn about compression
resistance and content hugging.

2
00:00:04,730 --> 00:00:06,220
Let's look through them again.

3
00:00:06,219 --> 00:00:10,852
Content hugging means how much
a view will resist being stretched

4
00:00:10,852 --> 00:00:14,230
beyond its intrinsic content size?

5
00:00:14,230 --> 00:00:17,219
Since the text field was
the one that gave in and

6
00:00:17,219 --> 00:00:22,269
stretched, it probably means it has
a lower content hugging than the label.

7
00:00:22,269 --> 00:00:23,439
Compression resistance,

8
00:00:23,440 --> 00:00:28,340
on the other hand, is how much
a view will resist being squeezed.

9
00:00:29,339 --> 00:00:31,054
Again, it was a text field.

10
00:00:31,054 --> 00:00:36,085
This probably means it has a lower
compression resistance than the label.

11
00:00:36,085 --> 00:00:38,625
Let's make sure our
assumptions are correct.

12
00:00:38,625 --> 00:00:42,554
The text field has a compression
resistance of 750,

13
00:00:42,554 --> 00:00:45,871
and a content hugging of 250.

14
00:00:45,871 --> 00:00:51,631
So it's obvious why
the text field stretched,

15
00:00:51,631 --> 00:00:54,012
but why did it shrink later on?

16
00:00:54,012 --> 00:00:57,411
Both views have the same
compression resistance.

17
00:00:57,411 --> 00:01:02,570
The reason why auto layout shrunk
the text view is because doing so

18
00:01:02,570 --> 00:01:06,700
wouldn't make it smaller than
its intrinsic content size.

19
00:01:06,700 --> 00:01:09,890
The label is at its
intrinsic content size,

20
00:01:09,890 --> 00:01:12,120
while the text field is much bigger.

21
00:01:12,120 --> 00:01:13,820
It still has space to spare, and

22
00:01:13,819 --> 00:01:16,269
therefore, the text field
is the one that shrinks.

