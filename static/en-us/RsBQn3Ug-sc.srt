1
00:00:00,000 --> 00:00:03,770
Wome of you might be saying for any real computer, the halting problem is decidable

2
00:00:03,770 --> 00:00:05,190
using the following argument.

3
00:00:05,190 --> 00:00:10,030
So you're given a program and you're given an input and you put it into the following algorithm.

4
00:00:10,030 --> 00:00:12,820
You start out by stimulating step one of the program.

5
00:00:12,820 --> 00:00:17,880
So again use the stimulation here just as in previous units. So you simulate step one.

6
00:00:17,880 --> 00:00:21,220
If the program terminates at that step then we output "Yes."

7
00:00:21,220 --> 00:00:26,040
And else, we record a snapshot of the machine-of the simulated machine, of course.

8
00:00:26,040 --> 00:00:29,090
And what I mean by snapshot is something you might remember

9
00:00:29,090 --> 00:00:31,240
from the NP completeness proof of SAT.

10
00:00:31,240 --> 00:00:34,880
A snapshot is a complete picture of the memory of the machine

11
00:00:34,880 --> 00:00:37,330
as well as the line where the program is currently at.

12
00:00:37,330 --> 00:00:42,420
And the reason why this algorithm is doing it is it's using one property of an infinite loop

13
00:00:42,420 --> 00:00:48,290
and that is if a machine goes into an infinite loop then snapshots at some point in time must repeat.

14
00:00:48,290 --> 00:00:52,850
So the third step of the algorithm is it takes that snapshot that had just recorded

15
00:00:52,850 --> 00:00:56,160
and compares it against all previous snapshots of the machine.

16
00:00:56,160 --> 00:01:01,770
And if it finds just one duplicate, it knows the machine has been exactly at that place before,

17
00:01:01,770 --> 00:01:04,970
which means it would also return to that place an infinite number of times.

18
00:01:04,970 --> 00:01:08,990
In that case, the halting algorithm or at least this algorithm here,

19
00:01:08,990 --> 00:01:11,790
which is supposed to solve the halting problem with output "No."

20
00:01:11,790 --> 00:01:16,990
And then the algorithm would simulate the next step of the program and go to step number two.

21
00:01:16,990 --> 00:01:20,750
This algorithm would be guaranteed to terminate at a certain point in time

22
00:01:20,750 --> 00:01:25,970
either if the program itself terminates or the simulation of the program indicates that it terminates

23
00:01:25,970 --> 00:01:28,240
or if the program goes into an infinite loop.

24
00:01:28,240 --> 00:01:32,480
Here is important that we have a real computer because if we have a real computer,

25
00:01:32,480 --> 00:01:34,180
we do not have infinite memory.

26
00:01:34,180 --> 00:01:38,880
So if we do not have infinite memory and the program goes into an infinite loop

27
00:01:38,880 --> 00:01:43,450
then at a certain point in time we must have a repeating snapshot.

28
00:01:43,450 --> 99:59:59,999
Now, if we had infinite memory that would not be the case.
