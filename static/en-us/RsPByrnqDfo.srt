1
00:00:00,080 --> 00:00:03,650
So let's look at a real example of a hierarchical predictor.

2
00:00:03,650 --> 00:00:08,710
We will look at Intel's Pentium M processor which has these predictors.

3
00:00:08,710 --> 00:00:14,310
First it has a cheap predictor that contains just two bit counters.

4
00:00:14,310 --> 00:00:19,440
Then it has a local history predictor and a global history predictor.

5
00:00:19,440 --> 00:00:24,900
So what the processor is doing is it has a large array of two bit counters,

6
00:00:24,900 --> 00:00:28,320
a local history predictor that stores the local history for

7
00:00:28,320 --> 00:00:32,830
each branch, and an array of two bit counters for different histories. And

8
00:00:32,830 --> 00:00:37,290
the global history predictor with the global history that is

9
00:00:37,290 --> 00:00:41,790
longer than the local history is here. And also, an array of counters for

10
00:00:41,790 --> 00:00:46,340
that predictor. So, if we try to predict a single branch, what we would do is,

11
00:00:46,340 --> 00:00:51,540
we would look up the PC for the branch in the two bit counter array.

12
00:00:51,540 --> 00:00:55,280
We would also try to look up the local predictor and

13
00:00:55,280 --> 00:01:00,880
the global predictor prediction. And then, we form the actual prediction for

14
00:01:00,880 --> 00:01:06,050
the processor by using the result of the global predictor if the global

15
00:01:06,050 --> 00:01:11,690
predictor says that the branch is predicted here. And for that, what we do is we

16
00:01:11,690 --> 00:01:16,030
keep another array here that is just saying whether this branch, so this is kind

17
00:01:16,030 --> 00:01:19,840
of a like a tag array that says whether this branch is going to be predicted by

18
00:01:19,840 --> 00:01:24,570
the global predictor. If the global predictor does not have a matching tag,

19
00:01:24,570 --> 00:01:28,240
that means that this branch was not inserted in the global predictor,

20
00:01:28,240 --> 00:01:33,520
in which case we shouldn't use it. If that happens, we will use the prediction

21
00:01:33,520 --> 00:01:38,870
from the local predictor, which will also have a dagger A that

22
00:01:38,870 --> 00:01:43,190
says whether this predictor should be predicted by the local predictor, and

23
00:01:43,190 --> 00:01:48,460
if so then we use that. Otherwise, if the branch is not in the local predictor,

24
00:01:48,460 --> 00:01:53,430
we just use the result of the two bit counter. When we update the predictor,

25
00:01:53,430 --> 00:01:56,730
however, what we do is we update the two bit counter.

26
00:01:56,730 --> 00:02:01,680
If we have the branch in the local predictor, we update the local predictor.

27
00:02:01,680 --> 00:02:05,670
If we have the branch in the global predictor, we update the global predictor.

28
00:02:05,670 --> 00:02:09,600
But then what happens is if we are using the two bit counter and

29
00:02:09,600 --> 00:02:13,800
the branch is not in the local predictor, then what we do is if the two bit

30
00:02:13,800 --> 00:02:18,030
counter is mispredicting the branch, we insert it into the local predictor. So

31
00:02:18,030 --> 00:02:21,400
now the branch will be present here next time.

32
00:02:21,400 --> 00:02:26,480
If the local predictor is not giving us good prediction for this branch, then we

33
00:02:26,480 --> 00:02:30,060
insert the branch into the global predictors. So what's going to happen is

34
00:02:30,060 --> 00:02:33,860
pretty much branches that are almost perfectly predictable by two bit counters,

35
00:02:33,860 --> 00:02:38,800
and that's a lot of branches. For example every, always taken branch or

36
00:02:38,800 --> 00:02:42,400
branch that is dominantly taken is going to be mostly predicted by the two

37
00:02:42,400 --> 00:02:46,820
bit predictor. So we never even consult the local and global predictors. And

38
00:02:46,820 --> 00:02:51,780
that save space in this predictors for other branches that need them.

39
00:02:51,780 --> 00:02:56,460
Saving space means that we can have fewer of the two bit entries and

40
00:02:56,460 --> 00:02:59,920
the history entries than we would otherwise need if we were trying to

41
00:02:59,920 --> 00:03:02,260
predict all the branches with the local or

42
00:03:02,260 --> 00:03:07,400
even the global predictor. So how do we say whether the branch is present or

43
00:03:07,400 --> 00:03:13,150
not? Well, what we really do is we insert some bits of the branches address

44
00:03:13,150 --> 00:03:18,420
into the corresponding line of the predictor. So the history,

45
00:03:18,420 --> 00:03:23,430
entry here we will index with some bits of the PC to find the history.

46
00:03:23,430 --> 00:03:28,690
And in that same entry we will also insert some of the upper bits of the PC, so

47
00:03:28,690 --> 00:03:33,240
that different branches that map to this entry only one of them gets to be

48
00:03:33,240 --> 00:03:37,420
predicted by this entry. The rest of them say that they're not found here.

49
00:03:37,420 --> 00:03:40,490
So the idea is that if most of the branches that end up

50
00:03:40,490 --> 00:03:44,360
mapping to this entry are really predictable by the two bit predictor,

51
00:03:44,360 --> 00:03:47,180
then we don't really need to use this entry for those branches.
