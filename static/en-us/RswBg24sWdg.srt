1
00:00:00,540 --> 00:00:03,430
We've seen how to put
a reference in our scripts.

2
00:00:03,430 --> 00:00:07,350
Now, let's use that reference
to create new objects.

3
00:00:07,350 --> 00:00:09,710
We're going to use the reference
as a placeholder for

4
00:00:09,710 --> 00:00:12,720
any object we want to drag
in from the Unity editor.

5
00:00:12,720 --> 00:00:16,660
Our script will use this
placeholder to create new objects.

6
00:00:16,660 --> 00:00:18,230
Okay, let's do it.

7
00:00:18,230 --> 00:00:20,540
Go to the start method and
write the following code.

8
00:00:21,680 --> 00:00:25,160
Great, now save your script and
go back to Unity.

9
00:00:25,160 --> 00:00:29,280
Go ahead and press Play,
and you'll see that

10
00:00:29,280 --> 00:00:34,170
a new cube appeared with
the position of 2, 4, 6.

11
00:00:34,170 --> 00:00:37,267
That's 2 in the x-axis,

12
00:00:37,267 --> 00:00:42,010
4 in the y-axis, and 6 in the z-axis.

13
00:00:42,010 --> 00:00:44,780
What's happening here is that
your code is creating a copy

14
00:00:44,780 --> 00:00:48,090
of whatever object you dragged
into the object create slot.

15
00:00:48,090 --> 00:00:51,260
And it's placing that
copy at position 2, 4, 6.

16
00:00:51,260 --> 00:00:52,870
Pretty cool, right?

17
00:00:52,870 --> 00:00:56,690
If you don't see the second cube,
then go back and double check your code.

18
00:00:56,690 --> 00:00:59,870
Make sure you created a 3D cube and
dragged and

19
00:00:59,870 --> 00:01:02,380
dropped it into the object create slot.

20
00:01:03,630 --> 00:01:06,072
Also, you can see the full
code in the text notes below.

21
00:01:06,072 --> 00:01:11,152
All right, let's take a look
at the code and break it down.

22
00:01:11,152 --> 00:01:15,319
We start with Object.Instantiate.

23
00:01:15,319 --> 00:01:18,864
This means that you're calling
the instantiate method on the object

24
00:01:18,864 --> 00:01:22,480
class and if that doesn't make a lot
of sense, don't worry about it.

25
00:01:22,480 --> 00:01:25,235
Methods in class are just
programmer jargon and

26
00:01:25,235 --> 00:01:29,330
you'll need to learn them, but,
for now, let's do a quick review.

27
00:01:29,330 --> 00:01:31,400
Remember the classes from
the Unity Scripting Manual?

28
00:01:32,470 --> 00:01:37,080
We found the classes by going
to Unity Engine &gt; Classes.

29
00:01:37,080 --> 00:01:39,940
Well, you can find the object
class inside the manual

30
00:01:39,940 --> 00:01:41,520
by doing a quick search.

31
00:01:41,520 --> 00:01:42,300
There it is.

32
00:01:42,300 --> 00:01:45,120
When you scroll down you'll
see the instantiate method.

33
00:01:45,120 --> 00:01:46,360
It's right here.

34
00:01:46,360 --> 00:01:49,040
You can see that this
method clones an object.

35
00:01:49,040 --> 00:01:53,030
In our case, it's cloning the reference
object that we drag and dropped in.

36
00:01:53,030 --> 00:01:57,965
Okay, let's look at the next part
of our script, objectToCreate.

37
00:01:57,965 --> 00:02:00,792
Well, that's just the name of
the reference you created.

38
00:02:00,792 --> 00:02:04,268
You're telling Object.Instantiate to
create a new object that is just like

39
00:02:04,268 --> 00:02:06,040
the one you picked in the Unity Editor.

40
00:02:07,150 --> 00:02:09,000
Okay, that's simple enough.

41
00:02:09,000 --> 00:02:14,710
The next part is new Vector3, 2_4_6.

42
00:02:14,710 --> 00:02:17,940
Okay, now this might look a little
strange, but it's not that bad.

43
00:02:17,940 --> 00:02:19,690
This is just how you code
positions in 3D space.

44
00:02:19,690 --> 00:02:23,060
Let's talk about Talk
a little bit more about this.

45
00:02:23,060 --> 00:02:25,995
Vector3 objects hold three numbers,

46
00:02:25,995 --> 00:02:29,745
an x coordinate, a y coordinate,
and a z coordinate.

47
00:02:31,165 --> 00:02:35,482
You almost always need to create a new
vector3 whenever you want to specify

48
00:02:35,482 --> 00:02:36,952
a location in 3D space.

49
00:02:36,952 --> 00:02:41,783
So, going back to the code,
this code here just says,

50
00:02:41,783 --> 00:02:45,897
place the new object at position 2,
4, 6.

51
00:02:45,897 --> 00:02:49,734
The last part is quaternion.identity.

52
00:02:49,734 --> 00:02:52,570
Which I know sounds very strange,

53
00:02:52,570 --> 00:02:56,840
but this part is just telling Unity
how to rotate the new object.

54
00:02:56,840 --> 00:02:59,600
And let's talk a little bit
more about Quaternions.

55
00:02:59,600 --> 00:03:03,340
Unless you're a math expert, you've
probably never heard of a quaternion.

56
00:03:03,340 --> 00:03:06,460
But you're probably familiar with
rotating things using degrees and

57
00:03:06,460 --> 00:03:07,700
radians.

58
00:03:07,700 --> 00:03:11,350
Well, quaternions are just another
way to think about rotations,

59
00:03:11,350 --> 00:03:16,350
and Unity uses them because they're
way better for 3D simulations.

60
00:03:16,350 --> 00:03:19,330
Unity hides all the complicated
math from you, but

61
00:03:19,330 --> 00:03:24,210
you do need to know rotations are all
handled internally using quaternions.

62
00:03:24,210 --> 00:03:25,450
Let's go back to the code.

63
00:03:25,450 --> 00:03:30,300
In this case, quaternion.identity
just means no rotation at all.

64
00:03:30,300 --> 00:03:34,580
The identity quaternion is the rotation
that keeps the object identical.

65
00:03:34,580 --> 00:03:38,380
So this line tells Unity to create
an object with no rotation at all.

66
00:03:40,210 --> 00:03:42,180
Okay, well, that's how it all works.

67
00:03:42,180 --> 00:03:45,550
And it may seem like a lot of
work just to create another cube.

68
00:03:45,550 --> 00:03:46,950
But once you understand the principles,

69
00:03:46,950 --> 00:03:49,660
you can do amazing things
with these simple tools.

70
00:03:49,660 --> 00:03:52,530
Okay, next up, let's start doing
more powerful stuff with code.
