1
00:00:00,000 --> 00:00:02,000
Now let's really quickly look at mine.

2
00:00:02,000 --> 00:00:05,000
It doesn't necessarily need to be the case that yours looks very much like mine at all

3
00:00:05,000 --> 00:00:07,000
as long as it accomplishes an effect that's somewhat similar.

4
00:00:07,000 --> 00:00:10,000
So what we're going to do here is set N, the size of the queue, to 4,

5
00:00:10,000 --> 00:00:12,000
create a new queue of that size, and immediately call checkRep

6
00:00:12,000 --> 00:00:14,000
because basically, every time we do a queue operation,

7
00:00:14,000 --> 00:00:16,000
we'd like to do the checkRep.

8
00:00:16,000 --> 00:00:18,000
So if anything goes wrong with the queue, we detect it as early as possible.

9
00:00:18,000 --> 00:00:21,000
We also initialize an l to be empty.

10
00:00:21,000 --> 00:00:23,000
So this l and the q are always going to contain the same number of elements

11
00:00:23,000 --> 00:00:27,000
in the same order, so l and q are always going to have the same contents.

12
00:00:27,000 --> 00:00:29,000
So now we're going to do 10,000 random tests,

13
00:00:29,000 --> 00:00:33,000
and each test is going to be randomly either an enqueue or a dequeue.

14
00:00:33,000 --> 00:00:36,000
And if it's an enqueue, we're going to enqueue a random integer.

15
00:00:36,000 --> 00:00:38,000
After enqueueing, we call checkRep,

16
00:00:38,000 --> 00:00:41,000
and if the enqueue succeeded, we're going to append the item that we enqueued

17
00:00:41,000 --> 00:00:44,000
to our list which is mirroring the queue's contents

18
00:00:44,000 --> 00:00:46,000
and also increment a variable saying how many times this operation succeeded.

19
00:00:46,000 --> 00:00:49,000
On the other hand, if the enqueue doesn't succeed,

20
00:00:49,000 --> 00:00:53,000
I want to assert that the length of our list is equal to N--

21
00:00:53,000 --> 00:00:56,000
that is to say, the list has the same number of elements as a full queue--

22
00:00:56,000 --> 00:01:00,000
assert that the queue is full, call checkRep again, and also increment a counter

23
00:01:00,000 --> 00:01:03,000
indicating we performed an add operation on a full queue.

24
00:01:03,000 --> 00:01:05,000
We're not going to talk about why these counters matter just quite yet,

25
00:01:05,000 --> 00:01:08,000
but we're going to look at this a little bit later. The dequeue structure is exactly analogous.

26
00:01:08,000 --> 00:01:11,000
We're going to issue a dequeue operation with 50% probability,

27
00:01:11,000 --> 00:01:14,000
checkRep, and then we're going to do sort of the analogous empty checking operations

28
00:01:14,000 --> 00:01:20,000
that we did and empty checking operations if the dequeue operation failed.

29
00:01:20,000 --> 00:01:23,000
And if the dequeue succeeded, we're going to pop off an element off our list

30
00:01:23,000 --> 00:01:26,000
and also ensure that it's exactly the value that we expect.

31
00:01:26,000 --> 00:01:29,000
So once that loop terminates, we're going to go into a loop

32
00:01:29,000 --> 00:01:31,000
whose purpose is to empty out the elements of the queue

33
00:01:31,000 --> 00:01:33,000
and finally, after we've drained the queue of all elements,

34
00:01:33,000 --> 00:01:36,000
we're going to assert that our list which mirrors the queue is also empty.

35
00:01:36,000 --> 00:01:38,000
So that's my little random tester for the queue.
