1
00:00:00,000 --> 00:00:03,000
Now we're going to take a quick programming quiz on branch coverage.

2
00:00:03,000 --> 00:00:06,000
The quiz is going to involve some Python code that simulates some adders.

3
00:00:06,000 --> 00:00:09,000
Adders are very simple hardware modules that perform addition.

4
00:00:09,000 --> 00:00:11,000
Here I'm just going to draw a 1-bit adder to show you how it works.

5
00:00:11,000 --> 00:00:15,000
The code that you're going to test is going to be a cascading series of 8 of these.

6
00:00:15,000 --> 00:00:18,000
The way the adder works is it takes two inputs, A and B,

7
00:00:18,000 --> 00:00:22,000
and A and B are bits--so they're valued at either 0 or 1,

8
00:00:22,000 --> 00:00:25,000
and in Python we're going to represent the 1 bit as true and the 0 bit as false.

9
00:00:25,000 --> 00:00:28,000
So, we're going to use Boolean logic to implement this, and there's a carry bit coming in.

10
00:00:28,000 --> 00:00:32,000
The output is a single-bit sum of A and B plus a carry bit out.

11
00:00:32,000 --> 00:00:35,000
The function implemented by the adder can be described like this: [S = A â B â Cin]

12
00:00:35,000 --> 00:00:43,000
The sum is the A input XORed with the B input XORed with the C input.

13
00:00:43,000 --> 00:00:47,000
To do an XOR on two booleans in Python, we can simply use the not equals operator [!=].

14
00:00:47,000 --> 00:00:56,000
The carry out is going to equal to (A Â· B) +(Cin Â· (AâB)).

15
00:00:56,000 --> 00:01:00,000
And so the "and" and "or" operators in Python are, of course, logical and and or.

16
00:01:00,000 --> 00:01:05,000
What we have here is a couple of boolean equations that together implement a full 1-bit adder.

17
00:01:05,000 --> 00:01:08,000
If we change these adders together, we can build up something extremely exciting

18
00:01:08,000 --> 00:01:11,000
like an actual adder that corresponds to the add instruction

19
00:01:11,000 --> 00:01:14,000
that you would find in an instruction set for a real computer.

20
00:01:14,000 --> 00:01:17,000
Now let's look at the code. Here I have some Python code implementing an 8-bit adder.

21
00:01:17,000 --> 00:01:20,000
What you can see is it takes a0 through a7.

22
00:01:20,000 --> 00:01:25,000
That is to say 8 bits of input that constitute parts of a where a0 is the low order bit,

23
00:01:25,000 --> 00:01:27,000
and a7 is the highest bit.

24
00:01:27,000 --> 00:01:31,000
Then b0 through b7 indicate the bits of the second input

25
00:01:31,000 --> 00:01:34,000
where again B0 is the lowest order bit of B and B7 is the highest.

26
00:01:34,000 --> 00:01:36,000
It takes in an initial carry-in bit.

27
00:01:36,000 --> 00:01:41,000
The chain of logic here is a cascading series of full adders for the individual bits.

28
00:01:41,000 --> 00:01:43,000
As you can see, it's a little bit long.

29
00:01:43,000 --> 00:01:48,000
And so your problem for this API quiz is to come up with a series of call to this 8-bit add function

30
00:01:48,000 --> 00:01:50,000
which get 100% branch coverage.

31
00:01:50,000 --> 00:01:52,000
And let me give you a couple hints.

32
00:01:52,000 --> 00:01:56,000
First of all, the way to approach this is probably to think about how you would test an actual adder.

33
00:01:56,000 --> 00:01:58,000
Most likely, if we're testing an adder--

34
00:01:58,000 --> 00:02:01,000
that is to say let's say this code is part of some sort of a circuit simulation,

35
00:02:01,000 --> 00:02:04,000
and we want to test the validity of our circuit, we'd pass it actual numbers.

36
00:02:04,000 --> 00:02:06,000
How do you pass it actual numbers?

37
00:02:06,000 --> 00:02:08,000
Well, you can write in some little support functions for yourself

38
00:02:08,000 --> 00:02:11,000
that take integers and convert them into the bit format.

39
00:02:11,000 --> 00:02:13,000
That's probably how I would test this, and that's certainly not the only way,

40
00:02:13,000 --> 00:02:16,000
but what you probably don't want to do is treat this as a black box.

41
00:02:16,000 --> 00:02:19,000
What's I'm deliberately doing here is giving you a function

42
00:02:19,000 --> 00:02:22,000
that's going to be a difficult test if you don't understand this logic at all.

43
00:02:22,000 --> 99:59:59,999
What you need to do is think of this as an adder and then it really becomes fairly easier to test.
