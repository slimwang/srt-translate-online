1
00:00:00,600 --> 00:00:02,600
For continuous integration
to work effectively,

2
00:00:02,600 --> 00:00:05,700
there are actually several requirements
that have to be met first.

3
00:00:05,700 --> 00:00:09,724
Now, these requirements fall to two
categories, technical and behavioral or

4
00:00:09,724 --> 00:00:10,960
cultural.

5
00:00:10,960 --> 00:00:13,730
Let's take a look at
the technical requirements first.

6
00:00:13,730 --> 00:00:17,269
The first requirement is that the code
has to be in some sort of version

7
00:00:17,269 --> 00:00:18,190
control system.

8
00:00:18,190 --> 00:00:21,029
Version control allows your team
to track changes as well as

9
00:00:21,029 --> 00:00:23,422
easily roll back to
a previous version if needed.

10
00:00:23,422 --> 00:00:26,979
In the context of continuous
integration, it also allows us to

11
00:00:26,979 --> 00:00:31,350
automatically trigger a build
phase after a change is detected.

12
00:00:31,350 --> 00:00:35,460
And speaking of the build phase, there
must be an automated build process for

13
00:00:35,460 --> 00:00:37,060
continuous integration.

14
00:00:37,060 --> 00:00:38,690
The purpose of integrating changes for

15
00:00:38,690 --> 00:00:41,980
different developers is to make
a working piece of software.

16
00:00:41,980 --> 00:00:45,390
If it doesn't even build,
it's not exactly working.

17
00:00:45,390 --> 00:00:48,340
To be able to test whether code builds
automatically when the code has been

18
00:00:48,340 --> 00:00:51,220
changed, the build process has to be,
well, automated.

19
00:00:51,220 --> 00:00:54,110
The build process also serves
as the starting point for

20
00:00:54,110 --> 00:00:56,020
the next step, testing.

21
00:00:56,020 --> 00:00:57,030
And speaking of which,

22
00:00:57,030 --> 00:01:00,400
this means that you also have to
have automated tests in place.

23
00:01:00,400 --> 00:01:03,290
As a minimum, your developer
should be writing unit tests.

24
00:01:03,290 --> 00:01:05,710
Preferably, you also
have acceptance tests.

25
00:01:05,710 --> 00:01:07,190
All these together allow for

26
00:01:07,190 --> 00:01:10,600
regression testing which basically means
that the functionality that the app

27
00:01:10,600 --> 00:01:14,040
currently has doesn't break
when you submit a new change.

28
00:01:14,040 --> 00:01:17,100
Now testing is a pretty large
topic in and of itself, so

29
00:01:17,100 --> 00:01:19,720
we're going to talk about
this in more detail later on.

30
00:01:19,720 --> 00:01:22,920
For now, just think of
the testing in general terms.

31
00:01:22,920 --> 00:01:27,020
If there are no tests, it's impossible
to know if the software actually works.

32
00:01:27,020 --> 00:01:28,990
You could do manual testing, but

33
00:01:28,990 --> 00:01:32,530
manually testing every functionality
after every code check-in

34
00:01:32,530 --> 00:01:36,610
would be very time consuming,
inefficient, and pretty boring.

35
00:01:36,610 --> 00:01:40,640
Finally, it should be easy to see the
build and test results for each commit.

36
00:01:40,640 --> 00:01:43,900
The feature in many continuous
integration systems is a dashboard

37
00:01:43,900 --> 00:01:47,690
that will show all builds and
their status as well as detailed logs.

38
00:01:47,690 --> 00:01:51,160
Everybody who's involved in the process
should have access to the dashboard.

39
00:01:51,160 --> 00:01:53,600
This also manifests in
another common approach

40
00:01:53,600 --> 00:01:56,310
which is to have the build
status visible in the office.

41
00:01:56,310 --> 00:01:59,430
For example, your team could consider
putting up a big TV with build

42
00:01:59,430 --> 00:02:03,350
statistics on it, or
even having a colored light or sign.

43
00:02:03,350 --> 00:02:06,710
And this sums up the technical
requirements for continuous integration.

44
00:02:06,710 --> 00:02:07,450
But beyond that,

45
00:02:07,450 --> 00:02:10,560
there are also cultural requirements
that you should be thinking of.

46
00:02:10,560 --> 00:02:13,520
And these are requirements that
have to be true about the team and

47
00:02:13,520 --> 00:02:14,930
people that you're working with.

48
00:02:14,930 --> 00:02:17,790
The first of which is that changes
have to be checked into a code

49
00:02:17,790 --> 00:02:19,070
base frequently.

50
00:02:19,070 --> 00:02:21,900
This is preferably happening
several times a day or

51
00:02:21,900 --> 00:02:23,880
at the very least once a day.

52
00:02:23,880 --> 00:02:27,160
If developers have a habit of working
on separate feature branches for

53
00:02:27,160 --> 00:02:29,050
a long time without
committing their code,

54
00:02:29,050 --> 00:02:32,540
it will make it that much harder to
integrate back into the code base.

55
00:02:32,540 --> 00:02:35,910
And therefore, continuous integration
in general is going to be difficult.

56
00:02:35,910 --> 00:02:38,010
When developers
are integrating code back in,

57
00:02:38,010 --> 00:02:40,050
they should also be including tests.

58
00:02:40,050 --> 00:02:44,520
Another important cultural requirement
is what happens when a build is broken.

59
00:02:44,520 --> 00:02:48,160
So if a developer breaks a build,
either the build process itself or

60
00:02:48,160 --> 00:02:51,120
the automated tests,
it has to be the priority for

61
00:02:51,120 --> 00:02:54,800
the whole team to fix the build
before any other work can be done.

62
00:02:54,800 --> 00:02:56,900
A broken build is a reason for
developers and

63
00:02:56,900 --> 00:03:00,200
testers to communicate,
figure out, and fix the problem.

64
00:03:00,200 --> 00:03:03,220
Your team should see this as an
opportunity to improve the quality for

65
00:03:03,220 --> 00:03:07,510
the entire product, and not a reason to
blame someone for breaking something.

66
00:03:07,510 --> 00:03:11,210
Now sometimes, a build won't be able
to be fixed in a timely manner.

67
00:03:11,210 --> 00:03:13,790
In this case,
the change has to be rolled back.

68
00:03:13,790 --> 00:03:18,010
And rolling back essentially means that
you go to a previous working version.

69
00:03:18,010 --> 00:03:20,970
What it's hardly better means
is dependent on the team.

70
00:03:20,970 --> 00:03:23,570
But the rollback time should be
standardized for the team and

71
00:03:23,570 --> 00:03:26,020
it's usually between 10 and 30 minutes.

72
00:03:26,020 --> 00:03:28,980
Finally, the team needs to
agree that commenting out or

73
00:03:28,980 --> 00:03:33,890
deleting a broken test just to fix
a build is not acceptable behavior.

74
00:03:33,890 --> 00:03:37,100
If a test is broken,
it's either because the code is wrong or

75
00:03:37,100 --> 00:03:40,740
the test is wrong, and
that has to be fixed properly.

76
00:03:40,740 --> 00:03:44,280
If these requirements, both technical
and cultural, are not met for

77
00:03:44,280 --> 00:03:46,870
a project,
they have to be implemented first.

78
00:03:46,870 --> 00:03:49,970
For example, you could try to
run contiguous integration

79
00:03:49,970 --> 00:03:51,770
if you didn't have automated tests.

80
00:03:51,770 --> 00:03:55,220
But it wouldn't be nearly as effective,
and that's because the only thing it

81
00:03:55,220 --> 00:03:58,140
would guarantee is that it's
possible to build the app.

82
00:03:58,140 --> 00:04:00,720
But sometimes you might be
missing a lot of requirements for

83
00:04:00,720 --> 00:04:01,640
continuous integration.

84
00:04:01,640 --> 00:04:05,740
And in this case, you can start the
implementation process by just having

85
00:04:05,740 --> 00:04:09,930
an automated build and then working on
adding something like tests later on.

86
00:04:09,930 --> 00:04:13,370
In addition, there are also some
nonfunctional technical requirements

87
00:04:13,370 --> 00:04:15,200
that should be taken into account.

88
00:04:15,200 --> 00:04:18,459
And those are that
the builds have to be fast.

89
00:04:18,459 --> 00:04:20,180
The build takes a long time to finish.

90
00:04:20,180 --> 00:04:23,282
Developers are not going to want
to check in their changes often.

91
00:04:23,282 --> 00:04:27,250
Checking in the changes will either
mean waiting a really long time or

92
00:04:27,250 --> 00:04:30,850
being pulled back to fix a build after
they've already invested time working on

93
00:04:30,850 --> 00:04:32,090
the next feature.

94
00:04:32,090 --> 00:04:35,970
And similar to builds, the test
also have to be reasonably fast.

95
00:04:35,970 --> 00:04:38,220
Test can be run in parallel for speed.

96
00:04:38,220 --> 00:04:42,310
They can also be subdivided into stages
so that faster tests, like unit tests,

97
00:04:42,310 --> 00:04:46,180
can run first while longer running
acceptance tests run later.

98
00:04:46,180 --> 00:04:48,490
Once your project gets
sufficiently large,

99
00:04:48,490 --> 00:04:52,550
it might make sense to take a step back
and see if you need to optimize for

100
00:04:52,550 --> 00:04:54,220
build and test speed optimization.
