1
00:00:00,000 --> 00:00:06,000
Let's go over now how we can actually solve the top K problem using this idea of partitioning.

2
00:00:06,000 --> 00:00:09,000
Now, remember what we're given her is the list L and some number K

3
00:00:09,000 --> 00:00:14,000
and what we're interested in are the top K elements of L,

4
00:00:14,000 --> 00:00:19,000
and for the sake of simplicity in this example by top--I mean the smallest,

5
00:00:19,000 --> 00:00:21,000
the one that have the smallest values.

6
00:00:21,000 --> 00:00:23,000
You can always put things around, turn the right greater ends into less ends

7
00:00:23,000 --> 00:00:26,000
and so forth and everything will be fixed,

8
00:00:26,000 --> 00:00:29,000
but for now, let's just imagine that we're interested in the smallest element--

9
00:00:29,000 --> 00:00:34,000
the smallest K elements if the lists were sorted.

10
00:00:34,000 --> 00:00:36,000
Here's what we're going to do.

11
00:00:36,000 --> 00:00:40,000
We're going to start off--remember we know how to do a partitioning is giving some v,

12
00:00:40,000 --> 00:00:43,000
well I don't know which value to use, so let's just pick one at random.

13
00:00:43,000 --> 00:00:47,000
Here I am picking a value at random--let's say there.

14
00:00:47,000 --> 00:00:52,000
There's our value v, and now, we're going to run the partitioning algorithm on this,

15
00:00:52,000 --> 00:00:55,000
and there is a couple of different cases that can happen.

16
00:00:55,000 --> 00:00:59,000
We're going to look first at this case 2 because that's the super duper easy one.

17
00:00:59,000 --> 00:01:02,000
In this case 2, we pick some v at random

18
00:01:02,000 --> 00:01:09,000
and it just so happens that we totally locked out and the rank of v is exactly K.

19
00:01:09,000 --> 00:01:12,000
What happens when we run partitioning on that value v

20
00:01:12,000 --> 00:01:19,000
is it's going to separate all the values of L into the ones smaller than v, equal to v, and greater than v,

21
00:01:19,000 --> 00:01:21,000
and that happens to be position K,

22
00:01:21,000 --> 00:01:27,000
so the ones on the first K positioned here are exactly the top K for the list,

23
00:01:27,000 --> 00:01:30,000
the smallest K elements that we were looking for.

24
00:01:30,000 --> 00:01:35,000
In this case, we're done--we locked out.

25
00:01:35,000 --> 00:01:41,000
But that's only one of the three cases. We need to look at the other cases now.
