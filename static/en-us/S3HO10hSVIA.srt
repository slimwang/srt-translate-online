1
00:00:00,190 --> 00:00:02,710
Now your solution may be a little bit different than ours, so let's take this

2
00:00:02,710 --> 00:00:06,198
into account when walking through this code. Now you'll notice that the full

3
00:00:06,198 --> 00:00:09,822
range of the indexes aren't actually used inside of grid. We allow, for

4
00:00:09,822 --> 00:00:14,601
instance, a z index value to be between 0 and 100. But in reality we only use

5
00:00:14,601 --> 00:00:18,594
about 10 or 11of them. But, the values we do use are actually scattered across

6
00:00:18,594 --> 00:00:22,410
the number line. You have a bunch of them in the range of 20, some of them in

7
00:00:22,410 --> 00:00:26,786
50, and then some of then in 90. The naive approach to this solution would be

8
00:00:26,786 --> 00:00:29,954
to actually Create a simple for Loop, that would represent, and count through,

9
00:00:29,954 --> 00:00:32,978
each of the Z index values, searching through the array, for any entity that

10
00:00:32,978 --> 00:00:38,270
has that value, and rendering them. Rather than wasting the CPU cycles,

11
00:00:38,270 --> 00:00:43,110
reiterating over the list, grips employs a bucketized method. What we do, is if

12
00:00:43,110 --> 00:00:46,260
an entity is visible given our view rec, we'll actually go through and place

13
00:00:46,260 --> 00:00:51,030
the entity, in a bucket, based on its Z index value. Much like the hash table

14
00:00:51,030 --> 00:00:54,970
we used before with the entity class map. So, if we find that the zIndex for a

15
00:00:54,970 --> 00:00:58,810
given entity already exists in our array, then we simply go ahead and add that

16
00:00:58,810 --> 00:01:04,248
entity to our array. If we find that the zIndex for an entity does not already

17
00:01:04,248 --> 00:01:07,587
exist in our array, then we go ahead, create a bucket for that zIndex, so that

18
00:01:07,587 --> 00:01:13,064
future entities that have that same value can be sorted appropriately. Once

19
00:01:13,064 --> 00:01:16,368
that's done, we go and ahead and assign this entity to its proper z index

20
00:01:16,368 --> 00:01:20,754
bucket. Afterwards, we have a simple sorting function that will sort the

21
00:01:20,754 --> 00:01:24,394
buckets by their z index value and then iterate over the buckets, drawing each

22
00:01:24,394 --> 00:01:26,770
entity in turn.
