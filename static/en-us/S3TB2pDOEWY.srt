1
00:00:00,370 --> 00:00:04,490
We've seen the basic first sub
command for frame called variable.

2
00:00:04,490 --> 00:00:08,300
But LODB's frame command
can do much more than this.

3
00:00:08,300 --> 00:00:10,586
To demonstrate on back
in the semi bug zap,

4
00:00:10,586 --> 00:00:14,475
and were paused at the handle single
tap method that we've seen before.

5
00:00:14,475 --> 00:00:17,620
And this is in the break
point bug view controller.

6
00:00:17,620 --> 00:00:20,500
From the console,
we can look up information about LLDB

7
00:00:20,500 --> 00:00:23,590
commands including frame,
by typing Help.

8
00:00:23,590 --> 00:00:27,090
So I'll delete this and
type Help and I'll just go ahead and

9
00:00:27,090 --> 00:00:30,300
scroll through all this, so
you can see the entire output.

10
00:00:30,300 --> 00:00:34,120
We have all the commands and
then there are command abbreviations.

11
00:00:34,120 --> 00:00:36,960
Like the FR and
the V that we saw earlier.

12
00:00:36,960 --> 00:00:39,650
That you can see for
the different commands.

13
00:00:39,650 --> 00:00:41,770
And I'll stop here for a frame.

14
00:00:41,770 --> 00:00:44,030
And here's the information we have.

15
00:00:44,030 --> 00:00:46,200
It says that frame provides
a set of commands for

16
00:00:46,200 --> 00:00:48,510
operating on the current
thread's frames.

17
00:00:48,510 --> 00:00:50,930
And by frames, it means stack frames.

18
00:00:50,930 --> 00:00:53,700
So to get more specific help
information about frame,

19
00:00:53,700 --> 00:00:57,260
I can type the command
frame followed by help.

20
00:00:57,260 --> 00:00:59,280
This delete button clears
out the console, by the way.

21
00:00:59,280 --> 00:01:00,706
So that's what I clicked to do that.

22
00:01:00,706 --> 00:01:04,120
We'll go frame help.

23
00:01:04,120 --> 00:01:07,110
And now we can see that frame
supports the following subcommands.

24
00:01:07,110 --> 00:01:09,590
So there's the variable command
that we used earlier, but

25
00:01:09,590 --> 00:01:12,230
it also supports info and select.

26
00:01:12,230 --> 00:01:15,665
And at the bottom, it says, for help on
any particular subcommand we can type

27
00:01:15,665 --> 00:01:18,650
help command and then the subcommand.

28
00:01:18,650 --> 00:01:22,040
So for example, help frame variable,

29
00:01:22,040 --> 00:01:26,000
should give us the help information
about the variable subcommand.

30
00:01:26,000 --> 00:01:27,970
Well we've already seen
the variable subcommand, so

31
00:01:27,970 --> 00:01:29,730
I want to try the two others.

32
00:01:29,730 --> 00:01:31,150
So I've stopped the application, and

33
00:01:31,150 --> 00:01:35,220
I've kind of reset up our
debugging environment here.

34
00:01:35,220 --> 00:01:38,090
I've set a breakpoint at
the add bug to view method.

35
00:01:38,090 --> 00:01:40,940
And there are no other breakpoints
in the particular app.

36
00:01:40,940 --> 00:01:43,780
And this is for
the BreakpointBugViewController.

37
00:01:43,780 --> 00:01:47,540
And I've triggered this breakpoint
again by just tapping on the screen.

38
00:01:47,540 --> 00:01:49,860
So let's type, frame info.

39
00:01:49,860 --> 00:01:53,670
And we could see that the output shows
that the current frame is frame zero,

40
00:01:53,670 --> 00:01:57,600
and this is for the addBugToView method.

41
00:01:57,600 --> 00:02:01,520
And this mirrors what we have in the
debug navigator, which is frame zero,

42
00:02:01,520 --> 00:02:05,800
and frame zero is for
the add bug to view method.

43
00:02:05,800 --> 00:02:09,560
And to switch the current stack frame,
we can use the frame select

44
00:02:09,560 --> 00:02:14,250
subcommand followed by a frame number,
so I'll select frame one.

45
00:02:14,250 --> 00:02:17,710
And just like that, Xcode jumps us
to stack frame one, which is for

46
00:02:17,710 --> 00:02:20,000
handleSingleTap, here.

47
00:02:20,000 --> 00:02:23,110
And you can see that it's jumped
us here in the code area as well.

48
00:02:23,110 --> 00:02:24,900
And this is pretty neat.

49
00:02:24,900 --> 00:02:27,830
It's not really that much different than
what we can achieve by just clicking

50
00:02:27,830 --> 00:02:30,730
around in the debug navigator,
which you can do the same thing

51
00:02:30,730 --> 00:02:34,430
here in the console,
by just selecting different frames.

52
00:02:34,430 --> 00:02:36,860
So now it's really unleashed
the power of the command line,

53
00:02:36,860 --> 00:02:40,660
to do something that you can't
already do in the graphical interface.

54
00:02:40,660 --> 00:02:43,470
And we'll do this with
the expression command.

55
00:02:43,470 --> 00:02:44,810
The expression command,

56
00:02:44,810 --> 00:02:48,880
let's us run swift expressions in
the current debugging context.

57
00:02:48,880 --> 00:02:50,710
So this is actually really cool.

58
00:02:50,710 --> 00:02:52,730
This means,
we can do things like run methods.

59
00:02:52,730 --> 00:02:56,800
Or even change the values of variables
while our program is paused.

60
00:02:56,800 --> 00:03:01,070
So I'll start typing the command expr,
which is an abbreviation for

61
00:03:01,070 --> 00:03:04,790
expression, followed by println.

62
00:03:04,790 --> 00:03:05,870
And bugs, so

63
00:03:05,870 --> 00:03:08,950
this is just like the println statement
that we could put in our code.

64
00:03:08,950 --> 00:03:12,290
You can see that
currently bugs is empty.

65
00:03:12,290 --> 00:03:15,200
So I'll go ahead and
just continue a couple times, so

66
00:03:15,200 --> 00:03:17,160
that bugs contains some things.

67
00:03:17,160 --> 00:03:21,030
And actually, I'll turn this off,
this breakpoint off, hit play so

68
00:03:21,030 --> 00:03:22,740
it runs all the way through.

69
00:03:22,740 --> 00:03:25,580
We should have way to many bugs now.

70
00:03:25,580 --> 00:03:27,490
Turn the breakpoint back on.

71
00:03:27,490 --> 00:03:28,850
I'll reach again.

72
00:03:28,850 --> 00:03:30,600
Let's run the same expression.

73
00:03:30,600 --> 00:03:33,960
And see the our bugs array is very full,

74
00:03:33,960 --> 00:03:37,690
now that we have all those extra bugs,
that have been created.

75
00:03:37,690 --> 00:03:40,540
So that first expression for
just printing, that's pretty cool.

76
00:03:40,540 --> 00:03:41,940
But let's try something
a little bit more fun.

77
00:03:41,940 --> 00:03:44,400
We can actually empty the bugs array.

78
00:03:44,400 --> 00:03:49,675
So to do this, we'll use
expression self.bugs.removeAll.

79
00:03:50,740 --> 00:03:53,700
And this takes a argument, keepCapacity.

80
00:03:55,030 --> 00:03:59,660
And we'll specify this is true and
we'll hit enter.

81
00:03:59,660 --> 00:04:02,780
And now when I run this expression,
it appears that it's completed, but

82
00:04:02,780 --> 00:04:05,930
we don't see any updates visually,

83
00:04:05,930 --> 00:04:08,780
if we go back to the simulator
there's nothing here.

84
00:04:08,780 --> 00:04:11,400
This makes sense because we're
paused at the breakpoint, after all.

85
00:04:11,400 --> 00:04:15,120
Because we're paused, none of these
changes have taken effect, but

86
00:04:15,120 --> 00:04:17,940
if the expression did run
we could quickly check

87
00:04:17,940 --> 00:04:21,079
while we're paused by printing
the bug's array again.

88
00:04:21,079 --> 00:04:23,190
And we can see that it's now empty.

89
00:04:23,190 --> 00:04:27,790
And if we were to step over,
we'll see that we drop right into the if

90
00:04:27,790 --> 00:04:32,740
statement, which also further validates
that the bugs count is now zero,

91
00:04:32,740 --> 00:04:34,350
or the bugs array is empty.

92
00:04:34,350 --> 00:04:36,230
And that is less than the maximum bugs,

93
00:04:36,230 --> 00:04:38,560
so now we're dropping right
back into that if statement.

94
00:04:38,560 --> 00:04:41,070
So we were able to change
things on the fly to

95
00:04:41,070 --> 00:04:43,070
alter the execution of our program.

96
00:04:43,070 --> 00:04:44,240
That's pretty cool.

97
00:04:44,240 --> 00:04:47,580
And I'll hit play and
continue back and there you go.

98
00:04:47,580 --> 00:04:48,620
More bugs are created.
