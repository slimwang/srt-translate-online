1
00:00:00,190 --> 00:00:02,460
But wait there's more. We also have

2
00:00:02,460 --> 00:00:06,550
data dependencies that can cause pipeline stalls.

3
00:00:06,550 --> 00:00:13,630
Consider these two instructions, we add R2 and R3, put the result in R1. Then

4
00:00:13,630 --> 00:00:19,730
the subtract instruction here takes R1 and uses it to compute R7. We say

5
00:00:19,730 --> 00:00:25,238
that the subtract instruction has a data dependence on this add. In fact we can

6
00:00:25,238 --> 00:00:28,358
have this data dependence, and there could be

7
00:00:28,358 --> 00:00:32,677
another instruction that produces R8, that the subtract also

8
00:00:32,677 --> 00:00:35,790
depends on. When we have a data dependence

9
00:00:35,790 --> 00:00:38,430
that means that we cannot just do these instructions

10
00:00:38,430 --> 00:00:40,470
like they were loads of laundry that have

11
00:00:40,470 --> 00:00:43,294
nothing to do with each other. We have to

12
00:00:43,294 --> 00:00:46,180
have the add produce R1 before the subtract

13
00:00:46,180 --> 00:00:50,430
can use it. This type of data dependence is

14
00:00:50,430 --> 00:00:54,240
called a read after write dependence. We

15
00:00:54,240 --> 00:00:57,015
read something after it has been written and

16
00:00:57,015 --> 00:01:00,388
that order needs to be preserved. This type

17
00:01:00,388 --> 00:01:03,583
of dependence is also called flow dependence because

18
00:01:03,583 --> 00:01:06,068
the data flows from one instruction to the

19
00:01:06,068 --> 00:01:10,004
other. And it also called true dependence because

20
00:01:10,004 --> 00:01:12,608
there is really a dependence as in the

21
00:01:12,608 --> 00:01:15,548
subtract needs the add to finish before it

22
00:01:15,548 --> 00:01:18,824
because the value doesn't exist until the add

23
00:01:18,824 --> 00:01:22,163
is finished. So again, this type of dependence

24
00:01:22,163 --> 00:01:24,240
is called RAW or read after write, or

25
00:01:24,240 --> 00:01:28,080
flow, or true dependence. There are two other types

26
00:01:28,080 --> 00:01:30,550
of data dependencies. Let's say that there is,

27
00:01:30,550 --> 00:01:34,350
later, a multiply instruction that takes R5 and R6,

28
00:01:34,350 --> 00:01:37,901
and produces R1. So that later instructions will

29
00:01:37,901 --> 00:01:41,510
use that R1 as the result of the multiplication.

30
00:01:41,510 --> 00:01:43,434
So for this dependence we say that's a RAW,

31
00:01:43,434 --> 00:01:47,200
flow, or true dependence. There is a dependence between the

32
00:01:47,200 --> 00:01:50,570
add and the multiply. The add needs to finish

33
00:01:50,570 --> 00:01:55,133
first and then the multiply needs to finish. Because we

34
00:01:55,133 --> 00:01:57,674
want the result of the multiply to end up

35
00:01:57,674 --> 00:02:00,156
as the final value of R1. If we let the

36
00:02:00,156 --> 00:02:03,190
add finish later than R1, produced by the add,

37
00:02:03,190 --> 00:02:06,816
will be left in the R1, so subsequent instructions would

38
00:02:06,816 --> 00:02:10,090
see that value which would be wrong. This

39
00:02:10,090 --> 00:02:13,810
type of dependence is called a write after write,

40
00:02:13,810 --> 00:02:17,760
or an output dependence. Basically the final result,

41
00:02:17,760 --> 00:02:21,210
or the output for R1, is what's affected and

42
00:02:21,210 --> 00:02:23,260
write after write simply because they are both

43
00:02:23,260 --> 00:02:25,220
writing and we need to preserve the order of

44
00:02:25,220 --> 00:02:28,220
the writes. This write should happen after this write.

45
00:02:28,220 --> 00:02:32,306
The third type of dependence is here. The subtract

46
00:02:32,306 --> 00:02:39,140
needs to finish reading R1 before multiply can be allowed to overwrite it. This

47
00:02:39,140 --> 00:02:42,030
type of dependence is called write after

48
00:02:42,030 --> 00:02:45,175
read because the write needs to happen after

49
00:02:45,175 --> 00:02:47,470
this read, and it is also called

50
00:02:47,470 --> 00:02:51,465
anti-dependence because it sort of reverses the order

51
00:02:51,465 --> 00:02:54,866
of the flow dependencies. For reasons we

52
00:02:54,866 --> 00:02:58,064
will see later, these two types of dependencies

53
00:02:58,064 --> 00:03:01,684
are called false or name dependencies. So

54
00:03:01,684 --> 00:03:04,964
we have true dependencies, which are these RAW

55
00:03:04,964 --> 00:03:08,326
dependencies or flow dependencies, and we have

56
00:03:08,326 --> 00:03:11,196
false or name dependencies that have to do

57
00:03:11,196 --> 00:03:14,148
with overwriting a value that somebody has

58
00:03:14,148 --> 00:03:17,428
written or read previously, or at least should

59
00:03:17,428 --> 00:03:20,610
read or write previously. Now we have a

60
00:03:20,610 --> 00:03:23,152
read after write, write after write, and write

61
00:03:23,152 --> 00:03:26,570
after read dependence. So, how about a read

62
00:03:26,570 --> 00:03:29,690
after read dependence, that's the only one that is

63
00:03:29,690 --> 00:03:32,164
missing here. Let's say we have two adds,

64
00:03:32,164 --> 00:03:35,540
both of which are reading R3. Read after read

65
00:03:35,540 --> 00:03:40,060
is not a dependence because these two instructions

66
00:03:40,060 --> 00:03:42,180
don't need to be done in the order of

67
00:03:42,180 --> 00:03:45,263
that dependence. Pretty much we can reorder these

68
00:03:45,263 --> 00:03:48,154
two instructions, they will still read the correct value

69
00:03:48,154 --> 00:03:52,270
of R3, so that is why this is not a dependence. The second instruction

70
00:03:52,270 --> 00:03:56,560
doesn't depend on the first one. It can be done before or after it.
