1
00:00:00,230 --> 00:00:03,724
One last thing about password hashing. You know, all of this

2
00:00:03,724 --> 00:00:06,960
is, is, is, is good to understand. And most modern computers

3
00:00:06,960 --> 00:00:11,212
hash passwords in just the same way I showed you. Generally

4
00:00:11,212 --> 00:00:14,780
we, you can use SHA-256 that works okay. The problem with most

5
00:00:14,780 --> 00:00:18,770
hashing functions, is that they're designed to be fast. So generally

6
00:00:18,770 --> 00:00:21,040
this is a good thing. You know, if, if you're going to be

7
00:00:21,040 --> 00:00:23,360
using this hashing function, you know, to be verifying your cookies

8
00:00:23,360 --> 00:00:25,450
and what not. Yeah, you want it to be fast, you want to

9
00:00:25,450 --> 00:00:28,080
slow down your web server verifying, you know, cookie data all

10
00:00:28,080 --> 00:00:31,020
the time. But for cases like passwords, when it's much more likely

11
00:00:31,020 --> 00:00:33,300
that somebodies going to be trying to brute force you. It would be

12
00:00:33,300 --> 00:00:35,410
really cool if we had a hashing function that has both really

13
00:00:35,410 --> 00:00:40,650
good, like SHA-256, but also kind of slow. So that computers get

14
00:00:40,650 --> 00:00:44,360
faster and faster, the hash function stays the same speed. And, I'm

15
00:00:44,360 --> 00:00:47,170
about to tell you about such a function, it's called bcrypt. The

16
00:00:47,170 --> 00:00:50,810
reason I didn't use it in my last example, is because it's

17
00:00:50,810 --> 00:00:52,990
not built into Python. So it's not super convenient for me

18
00:00:52,990 --> 00:00:55,700
to demonstrate. And I, and I don't want to have, you know,

19
00:00:55,700 --> 00:00:58,880
expect you to install it. But you know in the future

20
00:00:58,880 --> 00:01:05,010
outside this course, instead of SHA-56, use bcrypt instead. And your life

21
00:01:05,010 --> 00:01:06,950
will be better. And what bcrypt, bcrypt is cool, it basically

22
00:01:06,950 --> 00:01:09,850
takes an extra parameter, which is. How long do you want this

23
00:01:09,850 --> 00:01:12,790
to take? and, and it's neat, so now you have this

24
00:01:12,790 --> 00:01:16,510
function that will stay slow forever. Because you can make it slow.
