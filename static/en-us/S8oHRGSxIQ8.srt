1
00:00:00,620 --> 00:00:02,850
Now there's one more thing I
want to add to our diagram and

2
00:00:02,850 --> 00:00:06,360
that something to represent
the idea of multiplicity.

3
00:00:06,360 --> 00:00:09,350
In object diagrams,
multiplicity is just a fancy word for

4
00:00:09,350 --> 00:00:13,430
the number of objects
represented in a relationship.

5
00:00:13,430 --> 00:00:16,930
This is another one of those things
that we're borrowing from UML.

6
00:00:16,930 --> 00:00:22,360
Now multiplicity goes hand in hand
with the contains relationships.

7
00:00:22,360 --> 00:00:23,960
If we look back at the world object,

8
00:00:23,960 --> 00:00:27,020
let's ask yourself some
how many questions.

9
00:00:27,020 --> 00:00:27,570
For example,

10
00:00:27,570 --> 00:00:32,159
how many actors are in the world or
how many backgrounds are in the world?

11
00:00:32,159 --> 00:00:36,730
We might say, for every world, we have
looks like it could be many actors.

12
00:00:36,730 --> 00:00:40,420
Or for every world,
we might have one background.

13
00:00:40,420 --> 00:00:44,450
And conventionally, we used terms
like one to many or many to many or

14
00:00:44,450 --> 00:00:48,860
even many to one to
represent this multiplicity.

15
00:00:48,860 --> 00:00:50,860
So right now,
if we think about the actors,

16
00:00:50,860 --> 00:00:54,390
we can see that there's two actors on
the screen but there could be more,

17
00:00:54,390 --> 00:00:58,160
or there could be worlds where
there's no actors at all.

18
00:00:58,160 --> 00:01:00,330
To be honest we don't really know.

19
00:01:00,330 --> 00:01:01,390
So we can do two things here.

20
00:01:01,390 --> 00:01:05,260
Since we already have the app built we
could play around with it some more and

21
00:01:05,260 --> 00:01:07,240
find out what are all
the different cases for

22
00:01:07,240 --> 00:01:11,490
the number of actors in the world, or
for what would be the case if we're

23
00:01:11,490 --> 00:01:14,580
designing this from scratch and
we didn't have the app already.

24
00:01:14,580 --> 00:01:17,430
We could just make a decision and
go with it.

25
00:01:17,430 --> 00:01:19,330
For instance, we could say, for

26
00:01:19,330 --> 00:01:23,820
any given world there may be one to
many actors, we don't know how many,

27
00:01:23,820 --> 00:01:27,020
there could be a lot, there could be
a little, it doesn't really matter.

28
00:01:27,020 --> 00:01:28,540
We could limit it, we could say for

29
00:01:28,540 --> 00:01:31,980
any one world there's only
ever going to be two actors.

30
00:01:31,980 --> 00:01:35,210
But I have a little bit of an advantage,
because I already know that there

31
00:01:35,210 --> 00:01:39,320
could be one to many actors in a world
and if we go back to our diagram,

32
00:01:39,320 --> 00:01:44,060
we can add the multiplicity to this
contains relationship for actors.

33
00:01:44,060 --> 00:01:46,680
And if we read the multiplicity
from left to right it

34
00:01:46,680 --> 00:01:48,580
follows the same order as our arrow.

35
00:01:48,580 --> 00:01:52,940
So for every one world we have,
we can have many actors.

36
00:01:52,940 --> 00:01:54,820
Now let's look at another example.

37
00:01:54,820 --> 00:01:57,680
This one will be for the contains
relationship for the background.

38
00:01:58,700 --> 00:02:01,570
From what we saw there is only
one background for the world.

39
00:02:01,570 --> 00:02:04,930
So that means this relationship
is one to one, for

40
00:02:04,930 --> 00:02:08,310
every one world object
there's one background.

41
00:02:08,310 --> 00:02:10,889
The use of the one to many and
the one to one,

42
00:02:10,889 --> 00:02:12,990
this is another thing that
were taken from you Mel.

43
00:02:12,990 --> 00:02:17,800
So again this is kind of a blend of
both a formal and informal process.

44
00:02:17,800 --> 00:02:20,280
There's something else that
I want to point out and

45
00:02:20,280 --> 00:02:24,140
that is that the relationships
themselves and even the multiplicity can

46
00:02:24,140 --> 00:02:28,720
go in different directions and
these arrows could be bidirectional.

47
00:02:28,720 --> 00:02:32,670
For example, right now the world
contains one too many actors, but

48
00:02:32,670 --> 00:02:36,380
you may want an arrow going from
actor to world that says, for

49
00:02:36,380 --> 00:02:40,300
every one actor it could live
in many different worlds.

50
00:02:40,300 --> 00:02:41,930
If it were the case that in the game,

51
00:02:41,930 --> 00:02:45,450
an actor might show up in
multiple different worlds.

52
00:02:45,450 --> 00:02:48,690
It's really up to you, you could build
these diagrams however you want but

53
00:02:48,690 --> 00:02:51,190
these are just some really
popular conventions.

54
00:02:51,190 --> 00:02:53,960
And if you stick close to these
conventions that it makes it easier for

55
00:02:53,960 --> 00:02:56,440
you to share your diagrams with others.

56
00:02:56,440 --> 00:02:59,700
It also makes it easier to take this
diagram and actually start writing code.

57
00:02:59,700 --> 00:03:04,190
And that's why there are the formal
process is like EML in place because it

58
00:03:04,190 --> 00:03:09,490
makes it easier to go from something
like EML to code or historically house.

59
00:03:09,490 --> 00:03:12,230
There's one other key takeaway
that I want you to leave with and

60
00:03:12,230 --> 00:03:15,940
that is that you should use a process
for creating object diagrams that's

61
00:03:15,940 --> 00:03:18,610
the least restrictive to
you getting your work done.

62
00:03:18,610 --> 00:03:24,100
I mean you could spend an entire day or
weeks designing an object diagram,

63
00:03:24,100 --> 00:03:27,120
but if it doesn't get you any
closer to a functioning app,

64
00:03:27,120 --> 00:03:29,270
then you might just
be wasting your time.

65
00:03:29,270 --> 00:03:33,050
But there's also a great benefit of
having some kind of structure in mind

66
00:03:33,050 --> 00:03:34,710
before you build it.

67
00:03:34,710 --> 00:03:37,910
As a developer,
you'll discover what works best for you.

68
00:03:37,910 --> 00:03:41,760
Some people like to spend five minutes
on an object diagram others could spend

69
00:03:41,760 --> 00:03:43,250
an entire week.

70
00:03:43,250 --> 00:03:46,320
And another thing is if
you're working with a team,

71
00:03:46,320 --> 00:03:48,370
a good object diagram
could be a great way for

72
00:03:48,370 --> 00:03:52,860
the whole team to work together to
understand a really complex system.

73
00:03:52,860 --> 00:03:55,370
All right, I'm going to go ahead and
wrap things up here, but

74
00:03:55,370 --> 00:03:58,320
if you're interested here's our final
diagram for the alien adventure.

75
00:03:58,320 --> 00:04:00,730
So take some time to look at it and

76
00:04:00,730 --> 00:04:03,410
maybe you have a better idea
how to organize things.

77
00:04:03,410 --> 00:04:07,010
Anyways, I hope this was helpful and
I encourage you to reach out to us or

78
00:04:07,010 --> 00:04:08,700
to your peers if you
still have questions.
