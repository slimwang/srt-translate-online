1
00:00:00,300 --> 00:00:04,820
So we can get part of the idea really
simply by just replacing this equation

2
00:00:04,820 --> 00:00:06,490
with something that says for
all state and

3
00:00:06,490 --> 00:00:10,620
action, the value of the state is bigger
than or equal to this expression.

4
00:00:10,620 --> 00:00:15,800
This is essentially the q value, for
each assay this is the q value assay.

5
00:00:15,800 --> 00:00:18,231
So that's good and
know we have to add that min thing.

6
00:00:18,231 --> 00:00:20,437
So what do we minimize here?

7
00:00:20,437 --> 00:00:21,017
>> V.

8
00:00:21,017 --> 00:00:24,895
>> So we can't just minimize V like
that, because that's a vector.

9
00:00:24,895 --> 00:00:25,501
>> Right.
>> And

10
00:00:25,501 --> 00:00:28,700
we can't just minimize V sub s
because s is unbound here [LAUGH].

11
00:00:28,700 --> 00:00:32,259
Right, it's like which s
do we want to minimize?

12
00:00:32,259 --> 00:00:35,254
So we kind of want to
minimize all of them somehow.

13
00:00:35,254 --> 00:00:38,749
So the way we're going to write that,
if this turns out to work.

14
00:00:38,749 --> 00:00:40,560
Is minimize the sum.

15
00:00:40,560 --> 00:00:43,520
So that's going to put pressure on all
the individual Vs to be as small as they

16
00:00:43,520 --> 00:00:44,630
can be, so

17
00:00:44,630 --> 00:00:48,020
that it actually equals the maxes,
it isn't just an upper bound on the max.

18
00:00:48,020 --> 00:00:49,930
>> Right,
because if any one of them isn't,

19
00:00:49,930 --> 00:00:51,430
then you don't have the minimum sum.

20
00:00:51,430 --> 00:00:53,090
>> Right, then you can always
move it down a little bit.

21
00:00:53,090 --> 00:00:55,555
>> Right.
>> So this actually is a linear program,

22
00:00:55,555 --> 00:00:59,467
that is the solution to which is
equivalent to the solution to the MDP.

23
00:00:59,467 --> 00:01:03,205
So we can just write down this linear
program and give it to a linear program

24
00:01:03,205 --> 00:01:06,967
solver that runs in polynomial time,
and boom, we get our values V sub s.

25
00:01:06,967 --> 00:01:09,010
How do we get our policy from that?

26
00:01:09,010 --> 00:01:13,400
>> We just choose the action that always
in expectation gives you the best value,

27
00:01:13,400 --> 00:01:14,140
just sort of one [INAUDIBLE].

28
00:01:14,140 --> 00:01:17,433
>> Yeah, we choose the greedy policy
with respect to that optimal value

29
00:01:17,433 --> 00:01:18,011
function.

30
00:01:18,011 --> 00:01:18,569
So this is cool.

31
00:01:18,569 --> 00:01:20,693
This is sometimes called the Primal.

32
00:01:20,693 --> 00:01:22,818
I guess because it
lives out in the woods.

33
00:01:22,818 --> 00:01:26,555
>> [LAUGH]
>> Representation of the linear

34
00:01:26,555 --> 00:01:28,740
program for solving MDPs.

35
00:01:28,740 --> 00:01:30,593
And this is a perfectly
reasonable [LAUGH],

36
00:01:30,593 --> 00:01:33,440
this is actually very useful
from a theoretical perspective.

37
00:01:33,440 --> 00:01:37,760
I haven't seen too many people really
use Linear Programming to solve MDPs.

38
00:01:37,760 --> 00:01:40,470
It's got some overhead associated
with it that seems to make it

39
00:01:40,470 --> 00:01:45,160
a little bit difficult to get it to run
competitively with the other algorithms.

40
00:01:45,160 --> 00:01:49,940
But it's okay, especially if you have a
really good Linear Programming package.

41
00:01:49,940 --> 00:01:52,710
And if you happen to have other kinds
of linear constraints that you need to

42
00:01:52,710 --> 00:01:55,490
throw in,
this is a very convenient way of solving

43
00:01:55,490 --> 00:01:59,620
slightly more difficult problems, MDPs
plus a little bit of extra constraint.

44
00:01:59,620 --> 00:02:01,620
So, does that make sense?

45
00:02:01,620 --> 00:02:02,530
Are you good with that?

46
00:02:02,530 --> 00:02:03,320
>> Yeah I'm good with that.

47
00:02:03,320 --> 00:02:06,670
>> All right, I want to say one
more thing about Linear Programming

48
00:02:06,670 --> 00:02:11,380
by switching away from the Primal
to what's called the dual.

49
00:02:11,380 --> 00:02:15,950
So, Linear Programming has this nice
property that you can actually [LAUGH].

50
00:02:15,950 --> 00:02:19,360
Any linear program, you can change
the constraints into variables and

51
00:02:19,360 --> 00:02:20,850
the variables into constraints,

52
00:02:20,850 --> 00:02:23,620
and you get a new linear program
that's equivalent to the old one.

53
00:02:23,620 --> 00:02:25,550
So this is just true in general for
Linear Programming.

54
00:02:25,550 --> 00:02:27,730
It's linear programming duality.

55
00:02:27,730 --> 00:02:30,140
And sometimes it's a really useful
way of actually solving them and

56
00:02:30,140 --> 00:02:34,270
for putting bounds and
constraints on the solutions.

57
00:02:34,270 --> 00:02:37,720
But in the context of MDPs it actually
does something kind of cool, so

58
00:02:37,720 --> 00:02:38,860
I want to show you that.

59
00:02:38,860 --> 00:02:39,450
>> Okay.

60
00:02:39,450 --> 00:02:42,260
Is it going to be as cool as what
happened when we did support

61
00:02:42,260 --> 00:02:43,300
factor machines?

62
00:02:43,300 --> 00:02:44,800
>> I don't remember that.

63
00:02:44,800 --> 00:02:45,590
>> We did the same thing.

64
00:02:45,590 --> 00:02:48,620
We wrote down a series of equations and
we solved for the dual.

65
00:02:48,620 --> 00:02:49,340
>> Nice!

66
00:02:49,340 --> 00:02:52,208
So, yes, it'll be the same
amount of cool as that.

67
00:02:52,208 --> 00:02:52,926
>> Excellent, excellent.

68
00:02:52,926 --> 00:02:53,730
I look forward to it.
