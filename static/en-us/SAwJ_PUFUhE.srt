1
00:00:00,540 --> 00:00:02,210
All right, so we have a problem.

2
00:00:03,880 --> 00:00:08,100
The brightest constraint equation
gives us more unknowns than equations.

3
00:00:08,100 --> 00:00:11,510
More directions to move
than we have pixels.

4
00:00:11,510 --> 00:00:12,614
How are we going to recover the motion?

5
00:00:13,785 --> 00:00:15,825
Obviously, we need
some extra constraints.

6
00:00:15,825 --> 00:00:17,665
We need some additional constraints.

7
00:00:17,665 --> 00:00:20,605
So, we'll talk about sort of
a global approach now, and

8
00:00:20,605 --> 00:00:22,605
the next time we'll talk about
a more local approach that,

9
00:00:22,605 --> 00:00:25,995
that's actually used and, in fact,
some of you may even implement.

10
00:00:25,995 --> 00:00:30,645
Some time long, long ago in
a galaxy nearby Berthold Horn and

11
00:00:30,645 --> 00:00:34,645
Brad Schunk did some work on what
was called smooth optical flows.

12
00:00:34,645 --> 00:00:36,220
And basically they said,

13
00:00:36,220 --> 00:00:41,690
let's try to come up with an optical
flow that minimizes some error.

14
00:00:42,760 --> 00:00:43,570
Okay?

15
00:00:43,570 --> 00:00:49,290
So the first part of the error is
how much do we violate the optic,

16
00:00:49,290 --> 00:00:52,600
the brightness constancy
constraint equation, right?

17
00:00:52,600 --> 00:00:56,340
Basically, that middle term right there,
that's supposed to be zero.

18
00:00:56,340 --> 00:00:59,240
Right?
Ixu plus Iyv plus I sub t is equal

19
00:00:59,240 --> 00:01:00,520
to zero.

20
00:01:00,520 --> 00:01:04,410
So, violations of that
means that it's not zero.

21
00:01:04,410 --> 00:01:06,420
Sometimes it's positive
sometimes negative.

22
00:01:06,420 --> 00:01:09,750
I square it, and
I sum it up over the whole image.

23
00:01:09,750 --> 00:01:15,040
That would be how bad my flow is with
respect to the constraint equation.

24
00:01:15,040 --> 00:01:15,560
All right?

25
00:01:15,560 --> 00:01:19,090
But we know we can solve that exactly
because we have more unknowns

26
00:01:19,090 --> 00:01:23,000
than constraints, so If that's our only
constraint, we're, we're not done.

27
00:01:23,000 --> 00:01:26,530
But we're going to call
this the constraint error.

28
00:01:26,530 --> 00:01:30,930
By the way, I kept partially originally
I'd stolen, then I did on my own, I kept

29
00:01:30,930 --> 00:01:34,600
the integral signs instead of summations
because back when this work was done

30
00:01:34,600 --> 00:01:40,230
we'd like to think about images as
actually continual, continual functions.

31
00:01:40,230 --> 00:01:41,470
Of course,
if you were to implement this,

32
00:01:41,470 --> 00:01:43,220
you'd actually have to do summations.

33
00:01:43,220 --> 00:01:47,110
I'll also tell you the fact that
summations are not integrals matters and

34
00:01:47,110 --> 00:01:49,970
if you take a look at some of the work
that was done in shape from shading,

35
00:01:49,970 --> 00:01:52,240
doing it as an integral
was actually hard.

36
00:01:52,240 --> 00:01:55,650
Doing it in summations was,
in some sense, a little bit easier.

37
00:01:55,650 --> 00:01:57,350
But for here,
the difference doesn't matter, so

38
00:01:57,350 --> 00:01:59,920
I just wrote it as being
summed up over the image.

39
00:01:59,920 --> 00:02:02,830
So here we have our optic
flow constraint term.

40
00:02:02,830 --> 00:02:04,170
Now we need another term.

41
00:02:04,170 --> 00:02:08,580
Well, it says smooth optical flow,
here's the idea.

42
00:02:08,580 --> 00:02:10,740
Remember when we did stereo?

43
00:02:10,740 --> 00:02:13,520
The, the state of the art
solution that I showed you

44
00:02:13,520 --> 00:02:15,240
with that beautiful recovery?

45
00:02:15,240 --> 00:02:17,800
Used a bunch of terms,
some that had to do with the data, but

46
00:02:17,800 --> 00:02:20,760
it also had to do with the smoothness
of the disparity field?

47
00:02:20,760 --> 00:02:24,380
That was the idea that surfaces don't
change a lot, all over the place.

48
00:02:24,380 --> 00:02:27,830
But they tend to have a particular
depth or very smoothly.

49
00:02:27,830 --> 00:02:31,020
The same could be said of motion,
that is, so if I've got something moving

50
00:02:31,020 --> 00:02:37,460
around, the motion vectors from one
point to the next change slowly.

51
00:02:37,460 --> 00:02:42,119
So let me come up with a penalty
term that says I really don't like

52
00:02:43,450 --> 00:02:48,240
velocity fields where the velocity
changes quickly from one

53
00:02:48,240 --> 00:02:50,690
location to the neighboring location.

54
00:02:50,690 --> 00:02:52,870
So that's shown here.

55
00:02:52,870 --> 00:02:57,800
These ux, ui,
that's the derivative of u.

56
00:02:57,800 --> 00:03:00,400
Remember, u is the x component
of the motion field.

57
00:03:00,400 --> 00:03:03,530
The derivative in the x direction
squared, because it'd be positive,

58
00:03:03,530 --> 00:03:07,730
negative, derivative in the y
direction squared, same thing as here,

59
00:03:07,730 --> 00:03:12,150
which is v sub x, v sub y,
the change of v as you move in x,

60
00:03:12,150 --> 00:03:13,920
the change in v as you move in y.

61
00:03:13,920 --> 00:03:16,140
Again, everything is squared.

62
00:03:16,140 --> 00:03:19,820
So the idea is, we would like
this thing to be, like, zero, or

63
00:03:19,820 --> 00:03:21,470
as little as possible.

64
00:03:21,470 --> 00:03:23,870
By the way, what would it mean for
this to be zero?

65
00:03:23,870 --> 00:03:25,460
Well, for this to be zero,

66
00:03:25,460 --> 00:03:30,300
that would mean that all
the u's were constant, right?

67
00:03:30,300 --> 00:03:32,930
They were all the same value, so
the derivatives would be zero.

68
00:03:32,930 --> 00:03:36,070
And all the v's would be constant.

69
00:03:36,070 --> 00:03:39,870
So if all my pixels were
moving with the same uv,

70
00:03:39,870 --> 00:03:44,160
the whole image was moving the same
direction, this value would be zero.

71
00:03:44,160 --> 00:03:49,020
Any other u's and v's will cause
this term to have some value,

72
00:03:49,020 --> 00:03:52,080
and we want to try to
minimize this thing.

73
00:03:52,080 --> 00:03:54,850
So now, we have these two terms.

74
00:03:54,850 --> 00:03:58,080
We have the constraint
equation error term and

75
00:03:58,080 --> 00:04:03,260
we have the smoothness error term called
e sub c, e sub s and what we want to do

76
00:04:03,260 --> 00:04:08,690
is we want to find the uv at every pixel
and there's going to be a different

77
00:04:08,690 --> 00:04:14,480
uv at every pixel that minimizes
this total error which is just

78
00:04:14,480 --> 00:04:19,620
the smoothness term plus some waiting
factor times the constraint term.

79
00:04:19,620 --> 00:04:23,310
And the waiting factor is sort of,
how much you believe your data.

80
00:04:23,310 --> 00:04:28,270
So, the bigger the waiting factor is
the more important the satisfying

81
00:04:28,270 --> 00:04:33,460
the brightness constancy constraint is,
the smaller the waiting factor, the more

82
00:04:33,460 --> 00:04:37,390
the smoothness term dominates and what
value it should have is a function of

83
00:04:37,390 --> 00:04:41,870
sort of how much noise there is and how
smooth you believe the entire thing is.

84
00:04:41,870 --> 00:04:45,750
So, this was part of a, a general
approach, variational approach where

85
00:04:45,750 --> 00:04:50,660
you're going to solve for uv as a
function of xy that is, you're going to

86
00:04:50,660 --> 00:04:56,220
find the optic flow u and v for every
pixel that tries to minimize this error.

87
00:04:56,220 --> 00:05:00,740
It's somewhat painful to try
to implement systems that can

88
00:05:00,740 --> 00:05:01,770
solve for that.

89
00:05:01,770 --> 00:05:03,230
Not impossible.

90
00:05:03,230 --> 00:05:07,480
But the idea is that you have a global
constraint, the smoothness constraint,

91
00:05:07,480 --> 00:05:08,700
to help solve your problem.
