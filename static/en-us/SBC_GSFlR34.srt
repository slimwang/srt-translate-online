1
00:00:00,290 --> 00:00:04,150
Now let's talk about different approaches to operating system

2
00:00:04,150 --> 00:00:06,650
structuring. The first structure that I will introduce to

3
00:00:06,650 --> 00:00:09,500
you is what we will call as a monolithic

4
00:00:09,500 --> 00:00:12,450
structure. You have the hardware at the bottom which

5
00:00:12,450 --> 00:00:15,750
is managed by the operating system and hardware includes,

6
00:00:15,750 --> 00:00:20,330
of course, the CPU, memory, peripheral devices such as

7
00:00:20,330 --> 00:00:22,820
the network and storage and so on. And there

8
00:00:22,820 --> 00:00:26,500
are applications at the top. And each of these applications

9
00:00:26,500 --> 00:00:32,530
is in its own hardware address space. What that means is that every application

10
00:00:32,530 --> 00:00:34,800
is protected from one another because the

11
00:00:34,800 --> 00:00:37,800
hardware ensures that the address space occupied by

12
00:00:37,800 --> 00:00:40,810
one application is different from the other

13
00:00:40,810 --> 00:00:44,070
applications and that is the first level

14
00:00:44,070 --> 00:00:46,440
of protection that you get between the

15
00:00:46,440 --> 00:00:51,970
applications themselves. And all the services that applications

16
00:00:51,970 --> 00:00:56,230
expect from the operating system are contained in this blob and that might

17
00:00:56,230 --> 00:01:01,000
include file system and network access, scheduling

18
00:01:01,000 --> 00:01:04,480
these applications on the available CPU, virtual

19
00:01:04,480 --> 00:01:07,390
memory management, and access to other peripheral

20
00:01:07,390 --> 00:01:10,270
devices. The OS itself of course is

21
00:01:10,270 --> 00:01:13,580
a program providing entry points for the

22
00:01:13,580 --> 00:01:17,250
applications for the services that are expected

23
00:01:17,250 --> 00:01:22,040
by the applications. And code and the data structure of the operating system is

24
00:01:22,040 --> 00:01:27,990
contained in its own hardware address space. What that means is that the

25
00:01:27,990 --> 00:01:32,730
operating system is protected from the applications

26
00:01:32,730 --> 00:01:34,880
and vise versa. So even if an

27
00:01:34,880 --> 00:01:37,720
application were to do anything in terms

28
00:01:37,720 --> 00:01:42,680
of misbehavior, either maliciously or unintentionally because

29
00:01:42,680 --> 00:01:46,880
they are in there own address spaces and the operating system is in its

30
00:01:46,880 --> 00:01:49,840
own hardware address space. Malfunctioning of an

31
00:01:49,840 --> 00:01:53,080
application does not affect the integrity of the

32
00:01:53,080 --> 00:01:56,550
operating system services. That is, when an

33
00:01:56,550 --> 00:02:01,880
application needs any system service, we switch from

34
00:02:01,880 --> 00:02:04,650
the hardware address space that is representing

35
00:02:04,650 --> 00:02:08,169
this particular application, into the hardware address space

36
00:02:08,169 --> 00:02:10,300
of the operating system. And execute the system

37
00:02:10,300 --> 00:02:14,070
code that provides the service that that is

38
00:02:14,070 --> 00:02:17,430
expected by the application. For example, accessing the

39
00:02:17,430 --> 00:02:22,050
file from the hard disk, or dynamic allocation

40
00:02:22,050 --> 00:02:25,070
of more memory that an application may want,

41
00:02:25,070 --> 00:02:27,920
or sending a message on the network. All

42
00:02:27,920 --> 00:02:30,730
of these things are done within the confines

43
00:02:30,730 --> 00:02:34,250
of the address space of the operating system itself.

44
00:02:34,250 --> 00:02:39,400
Note that all of the services expected of the operating system,

45
00:02:39,400 --> 00:02:44,140
file system, memory management, CPU scheduling, network and so on, are all

46
00:02:44,140 --> 00:02:48,020
contained in this one big blob. And that is the reason it's

47
00:02:48,020 --> 00:02:52,180
also sometimes referred to as the monolithic structure of an operating system.
