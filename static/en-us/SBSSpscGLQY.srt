1
00:00:00,000 --> 00:00:02,000
[Norvig] Here's my answer. First I defined all the ranks.

2
00:00:02,000 --> 00:00:05,000
That had been a constant that we had in the program before,

3
00:00:05,000 --> 00:00:08,000
but I'm going to have to refer to it a couple times, so I called it out and gave it a name.

4
00:00:08,000 --> 00:00:12,000
Then I defined all the red cards and all the black cards.

5
00:00:12,000 --> 00:00:15,000
Those are what we're going to substitute for the various jokers.

6
00:00:15,000 --> 00:00:17,000
And then here's best<u>wild</u>hand.

7
00:00:17,000 --> 00:00:22,000
So what I did is I said let's apply this function replacement

8
00:00:22,000 --> 00:00:25,000
to each of the cards in hand. Here's what replacement does.

9
00:00:25,000 --> 00:00:31,000
Replacement takes a card and replaces or comes up with a list of possibilities for that card.

10
00:00:31,000 --> 00:00:35,000
So if the card is a black joker, then it can be replaced with all the black cards.

11
00:00:35,000 --> 00:00:39,000
If the card is a red joker, it can be replaced with all the red cards.

12
00:00:39,000 --> 00:00:44,000
Otherwise it can replace only with itself, and we'll make that a list

13
00:00:44,000 --> 00:00:48,000
because the interface here is that you give me 1 card and I give you a list

14
00:00:48,000 --> 00:00:50,000
of all the cards it can be replaced with.

15
00:00:50,000 --> 00:00:53,000
Now, what am I doing here? This looks a little bit tricky.

16
00:00:53,000 --> 00:00:57,000
What I'm saying is I'm calling itertools.product.

17
00:00:57,000 --> 00:01:00,000
Let me explain to you what product does.

18
00:01:00,000 --> 00:01:05,000
The product function takes any number of lists,

19
00:01:05,000 --> 00:01:11,000
or in fact they can be iterables, and here we're just going to try 2,

20
00:01:11,000 --> 00:01:17,000
so the product of ([1, 2, 3] , [100, 200].

21
00:01:17,000 --> 00:01:22,000
Product stands for cross product, so we'd have all ways of taking 1 item from this list

22
00:01:22,000 --> 00:01:25,000
and 1 item from this list.

23
00:01:25,000 --> 00:01:31,000
So that would return a list, and the pairs of items are put into tuples,

24
00:01:31,000 --> 00:01:46,000
so it would be [(1, 100), (1, 200), (2, 100), (2, 200), (3, 100), (3, 200)].

25
00:01:46,000 --> 00:01:52,000
So however many lists it's given, it picks out 1 element from each,

26
00:01:52,000 --> 00:01:55,000
puts that into a tuple, and does that for every possible combination

27
00:01:55,000 --> 00:02:00,000
of elements from a, b, and whatever else there is there.

28
00:02:00,000 --> 00:02:04,000
So what we've done here is we've called replacement on each card in the hand,

29
00:02:04,000 --> 00:02:08,000
and that gives us a list of possibilities for each of the cards.

30
00:02:08,000 --> 00:02:11,000
If the card is not a joker, that list will be 1.

31
00:02:11,000 --> 00:02:15,000
If the card is a joker, then it will be all the red cards or all the black cards.

32
00:02:15,000 --> 00:02:17,000
So now we have the product of that.

33
00:02:17,000 --> 00:02:21,000
So for all the 7 cards in the hand we've got this big product,

34
00:02:21,000 --> 00:02:23,000
and we go through and we take all the possibilities

35
00:02:23,000 --> 00:02:30,000
and then for each one of those possibilities, h, we pick out the best hand

36
00:02:30,000 --> 00:02:34,000
using the process that we did before, and that gives us a set of possible hands.

37
00:02:34,000 --> 00:02:38,000
And then we go through those hands using hand_rank.

38
00:02:38,000 --> 00:02:42,000
These hands are now the 5-card hands determined by best_hand,

39
00:02:42,000 --> 00:02:44,000
and we take the maximum again according to hand_rank,

40
00:02:44,000 --> 00:02:49,000
and that gives us the best out of those 5 cards.

41
00:02:49,000 --> 00:02:52,000
For both of these solutions to the homework problems

42
00:02:52,000 --> 00:02:54,000
I was able to come up with a small amount of code

43
00:02:54,000 --> 00:03:00,000
because I knew about existing routines in the standard Python library.

44
00:03:00,000 --> 00:03:04,000
If you didn't know about those routines and if you wrote a lot of lines of code

45
00:03:04,000 --> 00:03:07,000
rather than just 1 or 2, don't feel bad.

46
00:03:07,000 --> 00:03:13,000
You got the practice doing that, and I'm sure your code was good and did the right job.

47
00:03:13,000 --> 00:03:16,000
So you should feel proud that you got it working,

48
00:03:16,000 --> 00:03:18,000
but you should also learn this lesson--

49
00:03:18,000 --> 00:03:22,000
that you should try to familiarize yourself with the tools that already exist

50
00:03:22,000 --> 00:03:24,000
and use them when appropriate.
