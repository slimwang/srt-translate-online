1
00:00:00,000 --> 00:00:03,000
Now we're going to talk about the question why assertions?

2
00:00:03,000 --> 00:00:05,000
What are assertions really buying us?

3
00:00:05,000 --> 00:00:08,000
This boils down to three or four basic reasons.

4
00:00:08,000 --> 00:00:11,000
First, assertions make code self-checking.

5
00:00:11,000 --> 00:00:16,000
That is, they make the code that write fail proactively when somethings wrong,

6
00:00:16,000 --> 00:00:18,000
and this can lead to more effective testing.

7
00:00:18,000 --> 00:00:23,000
Second, assertions make code fail early at a location that is closer to the actual bug,

8
00:00:23,000 --> 00:00:26,000
since this is more relevant to debugging than to testing,

9
00:00:26,000 --> 00:00:29,000
but it's generally the case that debugging is a different backwards problem

10
00:00:29,000 --> 00:00:32,000
where you're reasoning in a backwards sort of way

11
00:00:32,000 --> 00:00:35,000
about the behavior of the software that you wrote,

12
00:00:35,000 --> 00:00:38,000
and the fewer steps there are in one of these backwards chains, the better.

13
00:00:38,000 --> 00:00:40,000
Assertions really can help with that.

14
00:00:40,000 --> 00:00:43,000
Third, assertions can help us assign blame.

15
00:00:43,000 --> 00:00:47,000
It's often the case that assertions live at interfaces between different modules,

16
00:00:47,000 --> 00:00:51,000
and in many cases it's possible to look at where the bad values came from

17
00:00:51,000 --> 00:00:56,000
that lead to the assertion failure and use that information to assign blame

18
00:00:56,000 --> 00:00:58,000
to one of the modules involved in the call or to the other one.

19
00:00:58,000 --> 00:01:03,000
Real software testing exercises often lead to different finger-pointing problems,

20
00:01:03,000 --> 00:01:06,000
and any tools that we have that allow us to accurately assign blame

21
00:01:06,000 --> 00:01:09,000
to one or the other of our software modules can be valuable.

22
00:01:09,000 --> 00:01:11,000
The final reason we like assertions

23
00:01:11,000 --> 00:01:15,000
is because they allow us to create executable documentation

24
00:01:15,000 --> 00:01:18,000
about assumptions we've made, about preconditions in our code,

25
00:01:18,000 --> 00:01:21,000
and so by writing down executable checks on our preconditions,

26
00:01:21,000 --> 00:01:24,000
we not only get to check these preconditions when the code runs,

27
00:01:24,000 --> 00:01:26,000
but also we're documenting for other developers

28
00:01:26,000 --> 00:01:30,000
the things that need to be true for that code to execute correctly.

29
00:01:30,000 --> 00:01:34,000
Post conditions are things that are supposed to be true after our code runs.

30
00:01:34,000 --> 00:01:37,000
Again, in addition to creating executable checks for these,

31
00:01:37,000 --> 00:01:40,000
we're also telling other developers what we think should be true.

32
00:01:40,000 --> 00:01:43,000
This should allow other people to rely on this postconditions.

33
00:01:43,000 --> 00:01:46,000
Invariants are closely related to preconditions and postconditions.

34
00:01:46,000 --> 00:01:48,000
These are things that need to be true, for example,

35
00:01:48,000 --> 99:59:59,999
at every iteration of a loop.
