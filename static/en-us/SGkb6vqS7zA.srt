1
00:00:00,000 --> 00:00:02,469
There are different ways that we can define add to index,

2
00:00:02,469 --> 00:00:03,940
here's one way that works.

3
00:00:03,940 --> 00:00:07,370
We're going to create a procedure, we'll call it add to index--

4
00:00:07,370 --> 00:00:11,110
and it takes our 3 inputs--the index, the keyword, and the URL--

5
00:00:11,110 --> 00:00:16,550
What we need to do in add to index is first find if the keyword already appears.

6
00:00:16,550 --> 00:00:19,550
To do that, we need to look through all of the entries in index.

7
00:00:19,550 --> 00:00:22,260
The natural way to do that is to use a for-loop.

8
00:00:22,260 --> 00:00:24,760
We're going to define the procedure add to index--

9
00:00:24,760 --> 00:00:28,830
and it takes our 3 inputs, index, keyword and URL--

10
00:00:28,830 --> 00:00:30,370
to help keep track of what we are doing,

11
00:00:30,370 --> 00:00:34,500
I am going to draw a reminder of what the data structure of index is.

12
00:00:34,500 --> 00:00:36,900
Remember that it is a list of entries,

13
00:00:36,900 --> 00:00:38,640
and each entry is itself a list,

14
00:00:38,640 --> 00:00:44,680
where the 1st part is a keyword, and the 2nd part is a list of URLs.

15
00:00:44,680 --> 00:00:46,650
That's our data structure,

16
00:00:46,650 --> 00:00:50,550
that's going to help us figure out what to do to define add to index.

17
00:00:50,550 --> 00:00:51,820
The first thing we need to do

18
00:00:51,820 --> 00:00:56,160
is to check whether the keyword already exists in the index.

19
00:00:56,160 --> 00:01:01,090
If we can find it, well, then we want to modify that entry, rather than creating a new one.

20
00:01:01,090 --> 00:01:03,630
The natural way to do that is to use a for-loop.

21
00:01:03,630 --> 00:01:06,400
We are going to loop through the elements of index.

22
00:01:06,400 --> 00:01:09,870
We will give each one the name entry to use in the block.

23
00:01:09,870 --> 00:01:12,370
This is what entry will be.

24
00:01:12,370 --> 00:01:16,440
The first time through the loop, the value of entry will be a reference to the list here--

25
00:01:16,440 --> 00:01:20,410
which is the first element of the index list.

26
00:01:20,410 --> 00:01:22,520
Now we need to find the keyword.

27
00:01:22,520 --> 00:01:26,390
The keyword is right here--that's the element at position zero of entry.

28
00:01:26,390 --> 00:01:31,190
We're going to test the value at position zero on entry

29
00:01:31,190 --> 00:01:33,630
identical to the keyword that's passed in

30
00:01:33,630 --> 00:01:35,530
we'll use the double-equal comparison to test that--

31
00:01:35,530 --> 00:01:38,530
If it is equal, then we found a match--

32
00:01:38,530 --> 00:01:45,770
this means we want to append the URL to the list of URLs associated with that entry.

33
00:01:45,770 --> 00:01:46,740
To get that list of URLs

34
00:01:46,740 --> 00:01:52,750
we want to find entry 1--that's the value at position 1 of entry--

35
00:01:52,750 --> 00:01:55,480
and we want to append that the new URL.

36
00:01:55,480 --> 00:01:59,520
Here we've found an entry that matches the keyword we were looking for--

37
00:01:59,520 --> 00:02:02,090
this means the keyword is already in the index--

38
00:02:02,090 --> 00:02:06,590
we've added the new URL to the URLs associated with that keyword--

39
00:02:06,590 --> 00:02:08,300
so we're done, we have nothing else to do.

40
00:02:08,300 --> 00:02:12,130
What we want to make sure, is that we don't continue and and do anything else.

41
00:02:12,130 --> 00:02:15,270
One approach would be to use break---that would end the loop--

42
00:02:15,270 --> 00:02:18,170
what we want to do instead is really end the whole procedure.

43
00:02:18,170 --> 00:02:22,740
If we did break, well, then we'd still have the problem of how do we deal with the case

44
00:02:22,740 --> 00:02:24,340
where the keyword wasn't found?

45
00:02:24,340 --> 00:02:26,180
Here we're just going to return--

46
00:02:26,180 --> 00:02:30,680
we're all done with add to index, we've added the URL it belongs.

47
00:02:30,680 --> 00:02:32,950
Now we need to think about what to do in the case

48
00:02:32,950 --> 00:02:37,060
where the keyword does not already exist in the index.

49
00:02:37,060 --> 00:02:41,960
If that's the case, then we get to the end of the loop without ever finding that entry.

50
00:02:41,960 --> 00:02:42,360
If we've got to the end of the loop,

51
00:02:42,360 --> 00:02:47,400
that means we did not find any entry in the index that matches the keyword,

52
00:02:47,400 --> 00:02:50,140
then what we want to do is add a new entry---

53
00:02:50,140 --> 00:02:52,640
and that new entry is going to have, as its value,

54
00:02:52,640 --> 00:02:56,080
a list containing 2 elements, it will be the keyword--

55
00:02:56,080 --> 00:02:57,680
and as the 2nd element

56
00:02:57,680 --> 00:03:02,320
we'll have a list containing the URLs that we found that have that keyword.

57
00:03:02,320 --> 00:03:06,290
So far we only have 1--the URL that was passed in to add to index.

58
00:03:06,290 --> 00:03:07,690
How do we do that?

59
00:03:07,690 --> 00:03:11,060
To add a new element to add to index we use append.

60
00:03:11,060 --> 00:03:15,560
We need something to pass in to append--that is the structure we want to add.

61
00:03:15,560 --> 00:03:17,760
This whole thing is what we want to add--

62
00:03:17,760 --> 00:03:21,970
so, that's a list containing the value keyword as its 1st element.

63
00:03:21,970 --> 00:03:27,110
As the 2nd element, its a list containing just the single URL.

64
00:03:27,110 --> 00:03:29,340
That's what we want to append.

65
00:03:29,340 --> 00:03:32,340
in the case where we didn't already find the keyword in the index.
