1
00:00:00,135 --> 00:00:03,820
JSON maps almost perfectly onto Python dictionaries and arrays.

2
00:00:03,820 --> 00:00:06,980
Parsing XML is a lot more complex, so there are

3
00:00:06,980 --> 00:00:09,290
several options to choose from. We'll look at some of

4
00:00:09,290 --> 00:00:11,900
the most common. I also recommend that you have a

5
00:00:11,900 --> 00:00:14,190
look at the Python XML page to see what your

6
00:00:14,190 --> 00:00:18,500
options are. Let's first look at parsing XML into a

7
00:00:18,500 --> 00:00:22,430
document tree. The fundamental difference between this and event driven

8
00:00:22,430 --> 00:00:25,940
or, what we might call sax parsing of XML is

9
00:00:25,940 --> 00:00:29,600
that, here, we're going to read the entire XML tree

10
00:00:29,600 --> 00:00:33,530
into memory. We're going to use the xml.etree

11
00:00:33,530 --> 00:00:36,250
.ElementTree module, which is part of the Python standard

12
00:00:36,250 --> 00:00:39,640
library. With element tree we can parse data in a couple

13
00:00:39,640 --> 00:00:43,240
of different ways. We can parse it by file name.

14
00:00:43,240 --> 00:00:44,790
We can also use it from a string method of

15
00:00:44,790 --> 00:00:47,250
the element tree module to parse XML stored as a

16
00:00:47,250 --> 00:00:51,080
string value in our program. As we think about parsing XML,

17
00:00:51,080 --> 00:00:54,670
using element trees. It makes most sense to work

18
00:00:54,670 --> 00:00:58,500
with documented oriented XML data. So let's return to the

19
00:00:58,500 --> 00:01:02,280
research article example. This data set from Bio med

20
00:01:02,280 --> 00:01:04,920
central is both an excellent example of XML used to

21
00:01:04,920 --> 00:01:07,940
encode documents and one type of data that data

22
00:01:07,940 --> 00:01:11,010
scientist, specifically text minded folks, are likely to use in

23
00:01:11,010 --> 00:01:13,710
their work. In extracting the data we need from

24
00:01:13,710 --> 00:01:17,570
a tree, we're mostly going to be working with element objects.

25
00:01:17,570 --> 00:01:20,150
Elements permit us to iterate over their children.

26
00:01:20,150 --> 00:01:23,830
For example here, we've parsed our research article into

27
00:01:23,830 --> 00:01:26,220
a tree and then from this tree, we're getting

28
00:01:26,220 --> 00:01:29,060
the root element. Then we're going to iterate over

29
00:01:29,060 --> 00:01:31,340
the children of that root element, and in

30
00:01:31,340 --> 00:01:34,830
this case use the tag attribute to print out

31
00:01:34,830 --> 00:01:38,640
the tag name. Of each child element. So let's

32
00:01:38,640 --> 00:01:39,940
see what this looks like when we run it.

33
00:01:42,290 --> 00:01:44,420
Okay, now let's take a look at that xml document

34
00:01:44,420 --> 00:01:47,970
again to see where these values come from. Okay, and

35
00:01:47,970 --> 00:01:50,860
here we can see that this is the root element,

36
00:01:50,860 --> 00:01:54,020
and we are getting out all of the elements that are

37
00:01:54,020 --> 00:01:58,110
nested immediately within that element or the direct children of

38
00:01:58,110 --> 00:02:01,360
that element, ui, ji, and fm. And we can see

39
00:02:01,360 --> 00:02:03,860
that those are coming out here. Now, if we want

40
00:02:03,860 --> 00:02:07,330
to extract the title of an article we can see that

41
00:02:07,330 --> 00:02:11,160
its found in the bibliography section of the front

42
00:02:11,160 --> 00:02:15,610
matter section. Let's see how me might extract that. Element

43
00:02:15,610 --> 00:02:19,190
tree supports basic x path expressions. Because, in data

44
00:02:19,190 --> 00:02:22,210
wrangling we're often pulling most of the data out of

45
00:02:22,210 --> 00:02:25,190
an XML document, this level of support is going

46
00:02:25,190 --> 00:02:26,900
to be sufficient for many if not most of our

47
00:02:26,900 --> 00:02:29,980
needs. Returning to the problem of extracting the title, we

48
00:02:29,980 --> 00:02:32,520
can do that as follows. So, here, you can see

49
00:02:32,520 --> 00:02:34,980
that I'm using the find method on the root

50
00:02:34,980 --> 00:02:38,160
element. And I'm using an x path expression to

51
00:02:38,160 --> 00:02:41,950
specify where I expect to find a title element.

52
00:02:43,000 --> 00:02:45,870
That simply means, start at the current element. And

53
00:02:45,870 --> 00:02:48,920
then work your way down into the fm element

54
00:02:48,920 --> 00:02:52,580
and it's child the bibl or bibliography element and

55
00:02:52,580 --> 00:02:56,070
then finally into the title element itself. Note that

56
00:02:56,070 --> 00:02:57,630
this is very much like the way that you specify

57
00:02:57,630 --> 00:03:01,280
a path in a URL or in many file systems.

58
00:03:02,400 --> 00:03:04,190
Now it turns out that in this data, many of

59
00:03:04,190 --> 00:03:08,260
the text elements are actually wrapped in paragraph tags. And

60
00:03:08,260 --> 00:03:09,710
we can see that that's the case actually for the

61
00:03:09,710 --> 00:03:13,230
title here. So what I'm going to do here is with

62
00:03:13,230 --> 00:03:16,180
the title element that I got by using this xpath

63
00:03:16,180 --> 00:03:19,890
expression in this find method, I'm simply going to iterate

64
00:03:19,890 --> 00:03:22,930
over all of the children of title. Very similar syntax

65
00:03:22,930 --> 00:03:25,160
to what we saw before when iterating over all of the

66
00:03:25,160 --> 00:03:28,400
children of root. And for each child, I'm simply going to take

67
00:03:28,400 --> 00:03:31,630
the text of that child and concatenate it on to my

68
00:03:31,630 --> 00:03:36,870
title text. Now, so far for elements we've seen two different attributes.

69
00:03:36,870 --> 00:03:39,290
The first one was tag and now we're seeing the text

70
00:03:39,290 --> 00:03:43,310
attribute. There are a number of attributes for elements that are useful.

71
00:03:43,310 --> 00:03:46,340
These are two of the most common that you'll end up using.

72
00:03:46,340 --> 00:03:49,030
Okay, and then here we're simply going to print out the title.

73
00:03:49,030 --> 00:03:50,900
So, let's go ahead and run this and then we'll

74
00:03:50,900 --> 00:03:53,580
return and take a look at what this piece of code

75
00:03:53,580 --> 00:03:56,770
is doing for us. Okay, and here we can see that

76
00:03:56,770 --> 00:04:00,860
the title is actually selected and printed out properly. Here we're

77
00:04:00,860 --> 00:04:04,780
actually printing out the author email addresses. Let's take a look

78
00:04:04,780 --> 00:04:08,110
at how we did that in the code. Here we're going

79
00:04:08,110 --> 00:04:11,370
to use the find all method. Instead of the Find method.

80
00:04:11,370 --> 00:04:14,250
Find All with return all of the elements that match this

81
00:04:14,250 --> 00:04:18,350
x path expression. And so, we're simply going to iterate over

82
00:04:18,350 --> 00:04:20,870
each one of those elements and then for each one of

83
00:04:20,870 --> 00:04:23,100
those elements, we're going to do a Find in order to

84
00:04:23,100 --> 00:04:25,140
locate the email tag. So, let's go again then and take

85
00:04:25,140 --> 00:04:29,160
a look at the data. Okay, so my x path expression

86
00:04:29,160 --> 00:04:32,260
gets me this far, down here into the author group. And

87
00:04:32,260 --> 00:04:34,790
then for each one of these authors, I'm doing a find

88
00:04:34,790 --> 00:04:39,310
for an email element, and I'm selecting the text of that

89
00:04:39,310 --> 00:04:43,440
element, here, and simply printing it out.

90
00:04:43,440 --> 00:04:46,260
So again, this selects all of the individual

91
00:04:46,260 --> 00:04:49,190
authors found in the author group that's part

92
00:04:49,190 --> 00:04:51,351
of the bibliography section in the front matter.
