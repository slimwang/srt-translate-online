1
00:00:00,210 --> 00:00:04,430
The next element of the MDP that we
need to include is the RewardFunction.

2
00:00:04,430 --> 00:00:08,195
Burlap comes with an interface which
we can use to implement a custom

3
00:00:08,195 --> 00:00:10,170
RewardFunction in our code.

4
00:00:10,170 --> 00:00:13,090
First, we'll need to import
the RewardFunction and

5
00:00:13,090 --> 00:00:17,730
then we'll add a RewardFunction
member to our first MDP class.

6
00:00:17,730 --> 00:00:20,220
Now within the first MDP class,

7
00:00:20,220 --> 00:00:24,480
let's make a static class that will
implement the RewardFunction interface.

8
00:00:24,480 --> 00:00:28,790
I'm going to call it FourParamRF, since
the rewards will be based on the four

9
00:00:28,790 --> 00:00:33,340
parameters P1, P2, P3 and
P4 we have in our state diagram.

10
00:00:33,340 --> 00:00:38,180
P1 through P4 will be member
doubles of this FourParamRF.

11
00:00:38,180 --> 00:00:39,210
And the constructor for

12
00:00:39,210 --> 00:00:43,510
the FourParamRF will just initialize
these members based on the inputs.

13
00:00:43,510 --> 00:00:46,770
We can then go ahead and add a line
to the end of the constructor for

14
00:00:46,770 --> 00:00:48,620
the first MDP.

15
00:00:48,620 --> 00:00:54,810
It assigns a new FourParamRF object
to the first MDP's new .rf member.

16
00:00:54,810 --> 00:00:57,790
Now in order to implement
the RewardFunction interface,

17
00:00:57,790 --> 00:01:00,200
we need to override the reward method.

18
00:01:00,200 --> 00:01:03,940
This should match the reward
scheme from our state diagram.

19
00:01:03,940 --> 00:01:06,370
This will be your test for
the next exercise.

20
00:01:06,370 --> 00:01:09,970
Make sure to look at the documentation
for the RewardFunction interface for

21
00:01:09,970 --> 00:01:11,970
the appropriate signature for
the method.

22
00:01:11,970 --> 00:01:14,700
You might also find the getNodeId method

23
00:01:14,700 --> 00:01:17,670
from Graph Defined Domain
helpful in writing your method.
