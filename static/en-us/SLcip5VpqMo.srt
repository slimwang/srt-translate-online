1
00:00:00,720 --> 00:00:02,540
So, to reiterate just once more.

2
00:00:02,540 --> 00:00:07,560
Using the key .prototype here, instead of the key .method is purely cosmetic.

3
00:00:07,560 --> 00:00:11,081
Don't get confused thinking about the possible effects that this might have on

4
00:00:11,081 --> 00:00:14,770
the in-memory model at runtime, since there really aren't any.

5
00:00:14,770 --> 00:00:16,510
Here's some examples of associations,

6
00:00:16,510 --> 00:00:19,350
you might be making in your mind that would mislead you.

7
00:00:19,350 --> 00:00:24,010
First of all, the Car function does not delegate it's field lookups to

8
00:00:24,010 --> 00:00:26,600
the objects stored at Car.prototype.

9
00:00:26,600 --> 00:00:30,000
There is no such thing as car.move, for example.

10
00:00:30,000 --> 00:00:33,364
We never imagined that Car would delegate it's field lookups to

11
00:00:33,364 --> 00:00:36,890
car.methods and so, we shouldn't expect that car would delegate it's

12
00:00:36,890 --> 00:00:39,240
field lookups to Car.prototype.

13
00:00:39,240 --> 00:00:42,700
Another point is that result object from the Car function.

14
00:00:42,700 --> 00:00:45,410
Only delegate to Car.prototype because of our

15
00:00:45,410 --> 00:00:48,880
own call to this Object.create function.

16
00:00:48,880 --> 00:00:53,460
It's not because we're using the key .prototype to store this object that we

17
00:00:53,460 --> 00:00:57,650
have a relationship between instances and the Car.prototype object.

18
00:00:57,650 --> 00:01:02,550
So you should really see this .prototype object as a freely provided object for

19
00:01:02,550 --> 00:01:06,840
storing things with no additional special characteristics.

20
00:01:06,840 --> 00:01:11,670
Mentally, you can substitute the word .methods if it helps you reason about it.

21
00:01:11,670 --> 00:01:16,708
To underscore my point, observe that this Example function has the exact same

22
00:01:16,708 --> 00:01:21,535
relationship with the Car.prototype object that the Car function does.

23
00:01:21,535 --> 00:01:24,755
Both functions return objects that are set up to

24
00:01:24,755 --> 00:01:28,250
delegate to the object stored at Car.prototype.

25
00:01:28,250 --> 00:01:31,100
The fact that the prototype object is stored as a property of

26
00:01:31,100 --> 00:01:34,660
only one of those two function is completely immaterial.

27
00:01:34,660 --> 00:01:37,420
Both functions behave exactly the same as they would,

28
00:01:37,420 --> 00:01:41,020
if that prototype object had been merely stored in some global variable.
