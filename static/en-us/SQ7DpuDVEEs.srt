1
00:00:00,430 --> 00:00:04,019
Now that we have seen all the steps in Tomasulo's algorithm,

2
00:00:04,019 --> 00:00:08,540
let's take a moment and review the whole thing. This is our instruction queue,

3
00:00:09,890 --> 00:00:14,590
our RAT register aliasing table, the registers themselves, and let's say we

4
00:00:14,590 --> 00:00:18,880
only have the two reservation stations for the add, subtract unit to make

5
00:00:18,880 --> 00:00:24,040
this more compact. If you look at the steps that happen for one instruction,

6
00:00:24,040 --> 00:00:28,300
here is what we have. We take the instruction from the instruction queue and

7
00:00:28,300 --> 00:00:34,120
issue it to a reservation station and we look up the RAT

8
00:00:34,120 --> 00:00:38,490
to tell us where the operands for the instruction are going to come from.

9
00:00:38,490 --> 00:00:42,480
Now that the instruction has been issued, it sits in its reservation station and

10
00:00:42,480 --> 00:00:47,050
waits for the operands to actually become ready. During that time,

11
00:00:47,050 --> 00:00:54,740
the instruction is trying to capture the results broadcast by other instructions

12
00:00:54,740 --> 00:00:59,530
that are executing. Once we have captured the last operant that we were missing,

13
00:01:00,800 --> 00:01:05,290
the instruction will dispatch, which means it is sent for

14
00:01:05,290 --> 00:01:10,450
execution. And when it's done executing, it writes its result.

15
00:01:10,450 --> 00:01:15,310
Which means, now this instruction will broadcast its result.

16
00:01:15,310 --> 00:01:20,860
This is used by other instructions to capture their missing operands.

17
00:01:21,880 --> 00:01:27,390
This instruction also writes to the register that it is supposed to update,

18
00:01:27,390 --> 00:01:32,660
and it updates the RAT for that register so that future instructions start

19
00:01:32,660 --> 00:01:36,760
reading the register file and not waiting for this instruction anymore.

20
00:01:36,760 --> 00:01:40,840
What is important to note is that all all of these happen one at a time for

21
00:01:40,840 --> 00:01:48,040
one instruction every cycle, some instruction may be in one of these steps.

22
00:01:48,040 --> 00:01:54,030
So during a particular cycle, some instruction might be issued. Some

23
00:01:54,030 --> 00:01:58,260
instructions are trying to capture their operand. Some instructions are trying

24
00:01:58,260 --> 00:02:04,100
to be dispatched. And finally, some instruction is writing it's result,

25
00:02:04,100 --> 00:02:08,660
and that is the result that is being captured by the instructions that they're

26
00:02:08,660 --> 00:02:13,640
trying to capture. So all of this activity is happening during every cycle,

27
00:02:13,640 --> 00:02:17,960
it's just that it's happening for different instructions. So you can look at

28
00:02:17,960 --> 00:02:22,940
each of these steps needs to be taken by a particular instruction, but

29
00:02:22,940 --> 00:02:26,720
the processor doesn't do just an issue of an instruction in a cycle. It's doing

30
00:02:26,720 --> 00:02:30,060
the issue for that instruction while trying to capture for others while trying

31
00:02:30,060 --> 00:02:33,990
to dispatch another while doing the write result for yet another instruction.
