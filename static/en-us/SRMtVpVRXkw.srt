1
00:00:00,340 --> 00:00:03,600
Although it may sound like, all the problems have been solved by

2
00:00:03,600 --> 00:00:08,900
just selecting the correct architectural style, there are still some issues.

3
00:00:08,900 --> 00:00:12,940
One important one is that for real systems, big systems it may

4
00:00:12,940 --> 00:00:17,940
require more than one architectural style. We call that a Heterogeneous system,

5
00:00:17,940 --> 00:00:23,620
you can imagine for example that the. System might have

6
00:00:23,620 --> 00:00:28,030
some client/server elements that might have a GUI make it reactive. It may be

7
00:00:28,030 --> 00:00:34,260
the combination of a variety of, of, of of different approaches and the systems,

8
00:00:34,260 --> 00:00:38,780
you still have to have an architecture so that, so you have a single concept for

9
00:00:38,780 --> 00:00:44,730
how the system is going to work. Secondly. Some situations, although

10
00:00:44,730 --> 00:00:50,210
they call for having an architectural style, style are very domain specific. For

11
00:00:50,210 --> 00:00:55,920
example, imagine in military context of a particular kind of airplane.

12
00:00:56,960 --> 00:01:01,140
It may be the case, it is the case that that airplane comes in a variety of

13
00:01:01,140 --> 00:01:06,310
variants. However, the control systems for the airplane is pretty much

14
00:01:06,310 --> 00:01:11,920
the same across variance. That is, it shares more than it differs.

15
00:01:11,920 --> 00:01:15,230
In this situation, we call it a Domain-specific software architecture, or

16
00:01:15,230 --> 00:01:19,720
DSSA. Another term sometimes used is reference architecture,

17
00:01:19,720 --> 00:01:23,120
that is the reference architecture describes what's common. And then for

18
00:01:23,120 --> 00:01:25,950
any particular variant, the architecture responsible for

19
00:01:25,950 --> 00:01:28,900
saying what those variants are, and how they're going to be dealt with.

20
00:01:28,900 --> 00:01:32,480
The third issue is one of semantics. It's easier for me, it's easy for

21
00:01:32,480 --> 00:01:38,260
me to lay out and say, a client server is XYZ. But what exactly does that mean?

22
00:01:38,260 --> 00:01:43,030
It's important, and as the field of software architecture evolves,

23
00:01:43,030 --> 00:01:46,350
to get more and more precise definitions of what these styles mean.

24
00:01:46,350 --> 00:01:49,540
Which will then enable, reuse of, of existing solutions.
