1
00:00:00,000 --> 00:00:02,000
Let's take our usual approach--

2
00:00:02,000 --> 00:00:06,000
start making an inventory of concepts and figure how to represent them.

3
00:00:06,000 --> 00:00:11,000
We want to represent a person, a collection of people,

4
00:00:11,000 --> 00:00:15,000
and probably it looks like we want to have two collections of people.

5
00:00:15,000 --> 00:00:18,000
One, the collection of people on the here side,

6
00:00:18,000 --> 00:00:22,000
and one, the collection of people on the there side.

7
00:00:22,000 --> 00:00:26,000
We also need to represent the light or the torch.

8
00:00:26,000 --> 00:00:30,000
From there it seems like that's about it,

9
00:00:30,000 --> 00:00:34,000
and the other concepts we need are the concepts we already had

10
00:00:34,000 --> 00:00:37,000
of states and paths.

11
00:00:37,000 --> 00:00:39,000
Now, how about the representation choices.

12
00:00:39,000 --> 00:00:43,000
For person, well, I hate to reduce people to numbers,

13
00:00:43,000 --> 00:00:46,000
but in this case that seems like the perfect thing to do.

14
00:00:46,000 --> 00:00:51,000
This person, regardless of all his wonderful individual qualities,

15
00:00:51,000 --> 00:00:55,000
we can just represent by the number 5.

16
00:00:55,000 --> 00:00:57,000
How about a collection of people?

17
00:00:57,000 --> 00:01:03,000
We could represent a collection as a tuple--1, 2, 5, 10--

18
00:01:03,000 --> 00:01:10,000
as a list, as a set. There's also this data type in Python called a frozen set.

19
00:01:10,000 --> 00:01:17,000
What I want you to tell me is of these four, which do you think would be okay for representations

20
00:01:17,000 --> 00:01:24,000
just in terms of being able to to manipulate them and calculate the successors.

21
00:01:24,000 --> 00:01:27,000
Which of these are hashable?

22
00:01:27,000 --> 00:01:32,000
Hashable is important, because if we're going to use the same type of technique we used before

23
00:01:32,000 --> 00:01:36,000
for our search we had our explored set, which was a set of states,

24
00:01:36,000 --> 00:01:40,000
and members of a set have to be hashable.

25
00:01:40,000 --> 00:01:43,000
That's a property that we might want to worry about.

26
00:01:43,000 --> 00:01:47,000
Now, I should say one more thing

27
00:01:47,000 --> 00:01:52,000
in that the description of the problem it was explicitly stated that each of the people

28
00:01:52,000 --> 00:01:54,000
has different speeds.

29
00:01:54,000 --> 00:01:58,000
That bothered me a little bit, because I could certainly imagine two people having the same speed.

30
00:01:58,000 --> 99:59:59,999
But let's just solve what we were asked to solve where every person has a distinct speed.
