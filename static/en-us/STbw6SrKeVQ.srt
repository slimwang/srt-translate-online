1
00:00:00,490 --> 00:00:04,970
So in lesson one, you use the pin tool
to test connectivity between your

2
00:00:04,970 --> 00:00:07,700
machine and another network host.

3
00:00:07,700 --> 00:00:09,840
But what's ping actually doing?

4
00:00:09,840 --> 00:00:12,780
There's a tool you can use to display
quite a bit of detail about network

5
00:00:12,780 --> 00:00:14,990
traffic between hosts and networks.

6
00:00:14,990 --> 00:00:18,200
It's called TCP dump, and
that's slightly misnamed.

7
00:00:18,200 --> 00:00:20,710
You can actually look at any
network traffic, not just TCP.

8
00:00:21,850 --> 00:00:25,630
You already installed it on your
machine back in lesson one.

9
00:00:25,630 --> 00:00:28,590
So let's take a look at the manual for
it.

10
00:00:28,590 --> 00:00:31,640
Holy wow, that's a lot of options.

11
00:00:31,640 --> 00:00:33,400
Okay, we're going to
ignore most of these.

12
00:00:34,500 --> 00:00:38,430
The important part is that we need to
tell TCP Dump what traffic we want.

13
00:00:38,430 --> 00:00:42,690
It has its own little language for
this, called the PKep filter syntax.

14
00:00:42,690 --> 00:00:46,070
You can look at the pcap-filter
man page for more about it.

15
00:00:46,070 --> 00:00:50,970
But for now, I'll just give you a really
straightforward command to catch traffic

16
00:00:50,970 --> 00:00:56,340
that's going between your host and
the host at 8.8.8.8.

17
00:00:56,340 --> 00:01:03,089
It's going to be sudo
tcpdump -n host 8.8.8.8.

18
00:01:04,099 --> 00:01:07,750
Now let's run tcpdump over here and
run ping again over here.

19
00:01:09,480 --> 00:01:10,120
Hey, look.

20
00:01:10,120 --> 00:01:10,670
Packets.

21
00:01:12,130 --> 00:01:13,760
Now for each ping over here.

22
00:01:13,760 --> 00:01:15,000
Which there are three.

23
00:01:15,000 --> 00:01:17,330
We see two packet records over here.

24
00:01:17,330 --> 00:01:21,830
Two messages appear from tcpdump,
one after the other.

25
00:01:21,830 --> 00:01:25,000
Each one of these records is
a description of one of the packets that

26
00:01:25,000 --> 00:01:28,828
ping is sending over to that machine or
one that's coming back.

27
00:01:28,828 --> 00:01:35,650
See here's 8.8.8.8 and
here's the IP address of my machine,

28
00:01:35,650 --> 00:01:39,700
and here it says that,
this record is an ICMP echo request,

29
00:01:39,700 --> 00:01:42,980
that's a ping request, and
then coming back as an echo reply.

30
00:01:44,040 --> 00:01:46,740
Like a request is
the message the ping sense,

31
00:01:46,740 --> 00:01:50,710
an echo reply is the one coming back,
other things agree too.

32
00:01:50,710 --> 00:01:54,280
For instance the ping program
tells us that ii got 64 bytes, and

33
00:01:54,280 --> 00:01:58,680
sure enough there's length 64 to
exit TCPDUMP we'll type control c.

34
00:02:00,070 --> 00:02:04,100
You can use tcpdump to monitor
traffic for any network application.

35
00:02:04,100 --> 00:02:08,210
Like for instance if you wanted to see
all the DNS requests your machine sends,

36
00:02:08,210 --> 00:02:12,700
you'd need to know what port DNS uses,
which is port 53 by the way, and

37
00:02:12,700 --> 00:02:18,930
then you'd compose a line like this,
Sudo tcpdump -n port 53.

38
00:02:18,930 --> 00:02:22,360
Then if you do anything
that causes a DNS lookup,

39
00:02:22,360 --> 00:02:27,430
like say pinging a machine by host name,
you'd see the DNS traffic like so.

40
00:02:27,430 --> 00:02:32,410
If you look closely, here's my IP
address and here's the IP address of

41
00:02:32,410 --> 00:02:37,040
the DNS server that I'm using,
and since I pinged Yahoo.com,

42
00:02:37,040 --> 00:02:42,353
here's an A query, or A request,
question mark for query, for Yahoo.com.

43
00:02:42,353 --> 00:02:46,810
And then here comes back the response
on the next line, with an A response.

44
00:02:48,120 --> 00:02:51,650
The first ip address sent
at being 206.190.36.45.

45
00:02:51,650 --> 00:02:53,080
Which is the ip

46
00:02:54,510 --> 00:02:59,660
address that ping is using to ping Yahoo
took a moment to try this yourself.

47
00:02:59,660 --> 00:03:02,640
Don't worry about all the other bits
the TCP non temperance up, but do get

48
00:03:02,640 --> 00:03:07,280
a sense of where the traffic you're
looking out is coming from and going to.
