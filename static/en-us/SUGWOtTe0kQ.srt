1
00:00:00,170 --> 00:00:03,790
All the meta data in the world doesn't
help if we never actually build

2
00:00:03,790 --> 00:00:05,200
the Widget Provider.

3
00:00:05,200 --> 00:00:09,040
This is the class that has the logic for
building the view for the widget, and

4
00:00:09,040 --> 00:00:11,050
passing it on to the launcher app.

5
00:00:11,050 --> 00:00:14,140
It does that through
the use of a special class,

6
00:00:14,140 --> 00:00:18,950
Remote Views, because these views
need to go across applications, and

7
00:00:18,950 --> 00:00:23,440
break their traditional
sandbox provided for each app.

8
00:00:23,440 --> 00:00:27,180
Only a subset of the normal
views are supported for widgets.

9
00:00:27,180 --> 00:00:29,040
No custom views are allowed.

10
00:00:29,040 --> 00:00:33,340
Thankfully, all of the common views
you use in normal Android view layouts

11
00:00:33,340 --> 00:00:35,050
are available to your widgets.

12
00:00:35,050 --> 00:00:37,490
In fact,
you'll build your widget layouts in XML,

13
00:00:37,490 --> 00:00:41,670
just the same as you would for
any other layout in your app.

14
00:00:41,670 --> 00:00:44,690
One caveat with widgets
has to do with margins.

15
00:00:45,910 --> 00:00:48,529
Prior to Android 4, Ice Cream Sandwich,

16
00:00:48,529 --> 00:00:52,752
widgets needed to beride their own
margins so that widgets wouldn't

17
00:00:52,752 --> 00:00:56,498
appear huge next to the app icons
already on the home screen.

18
00:00:56,498 --> 00:01:02,170
On Android 4.0 and higher, however, the
margins are automatically applied for

19
00:01:02,170 --> 00:01:05,260
you, and your background
should fill the entire space.

20
00:01:06,480 --> 00:01:10,510
To make our widget backward compatible,
we can wrap our widget

21
00:01:10,510 --> 00:01:14,710
in a FrameLayout that includes
the correct padding for each API level.

22
00:01:14,710 --> 00:01:18,750
So what does this mythical AppWidget
Provider class we've talked about

23
00:01:18,750 --> 00:01:19,515
actually do?

24
00:01:19,515 --> 00:01:22,080
The core of it is in
the onUpdate method.

25
00:01:22,080 --> 00:01:25,272
This is where we surprisingly
update our widgets.

26
00:01:25,272 --> 00:01:30,530
We've got a list of appWidgetIds,
unique identifiers for

27
00:01:30,530 --> 00:01:32,190
each widget the user has created.

28
00:01:32,190 --> 00:01:34,980
And it's your job,
should you choose to accept it,

29
00:01:34,980 --> 00:01:37,310
to update all of those widgets.

30
00:01:37,310 --> 00:01:40,290
Thankfully, that's pretty easy for
static widgets.

31
00:01:40,290 --> 00:01:42,840
Create your RemoteViews object, and

32
00:01:42,840 --> 00:01:45,221
pass it on to the AppWidgetManager
you're given.

33
00:01:46,640 --> 00:01:48,628
But even that's not very useful.

34
00:01:48,628 --> 00:01:51,450
The setOnClickPendingIntent method

35
00:01:51,450 --> 00:01:54,800
allows you to control what happens
when you tap on your widget.

36
00:01:56,320 --> 00:01:59,060
The only final piece we need
to get our widget up and

37
00:01:59,060 --> 00:02:01,810
running is an entry in
the Android Manifest.

38
00:02:01,810 --> 00:02:06,477
It ties our AppWidget provider
To our AppWidget provider info.

39
00:02:06,477 --> 00:02:09,872
You'll note,
the AppWidget update action here.

40
00:02:09,872 --> 00:02:14,990
That's what tells Android that
this is a widget provider.

41
00:02:14,990 --> 00:02:19,400
And our meta data attribute, so it tells
Android where to find the meta data it

42
00:02:19,400 --> 00:02:22,037
needs to display the widget in
the widget selection screen..

43
00:02:23,670 --> 00:02:25,220
With all those pieces in place,

44
00:02:25,220 --> 00:02:28,430
we should be able to get a basic
widget showing up on the home screen.
