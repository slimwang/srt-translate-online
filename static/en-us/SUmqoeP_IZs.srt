1
00:00:00,000 --> 00:00:03,000
Now let's get back to our simplification scheme.

2
00:00:03,000 --> 00:00:08,000
Obviously, simplification works, but if you as a human do simplification,

3
00:00:08,000 --> 00:00:11,000
you may not be entirely happy with it.

4
00:00:11,000 --> 00:00:15,000
That is because manual simplification is tedious and boring.

5
00:00:15,000 --> 00:00:24,000
That is tedious, because you have to run these tests manually again and again and again.

6
00:00:24,000 --> 00:00:28,000
Second, it's boring, because it's a rather mechanical activity

7
00:00:28,000 --> 00:00:30,000
without great intellectual challenge.

8
00:00:30,000 --> 00:00:32,000
I mean, we just keep on stripping away some input,

9
00:00:32,000 --> 00:00:37,000
invoke the program again and again and again.

10
00:00:37,000 --> 00:00:39,000
Who really wants to do this?

11
00:00:39,000 --> 00:00:41,000
Fortunately, there's an answer to that.

12
00:00:41,000 --> 00:00:47,000
We do have something that helps us specifically for tedious and boring activities.

13
00:00:47,000 --> 00:00:53,000
This is called a computer, because we invented automatic machines precisely

14
00:00:53,000 --> 00:00:56,000
to relieve us from tedious and boring tasks.

15
00:00:56,000 --> 00:01:02,000
So we're going to hand over the process of simplification over to a machine,

16
00:01:02,000 --> 00:01:06,000
resulting in automatic simplification. Can we do that?

17
00:01:06,000 --> 00:01:09,000
For automatic simplification, we need two ingredients.

18
00:01:09,000 --> 00:01:13,000
We need a strategy that does the simplification for us--

19
00:01:13,000 --> 00:01:16,000
basically that tells us how to simplify.

20
00:01:16,000 --> 00:01:23,000
And we need an automatic test that checks whether our simplification succeeded or not.

21
00:01:23,000 --> 00:01:25,000
Let's first start with the automatic test.

22
00:01:25,000 --> 00:01:30,000
For the Mozilla example, we would need a test that takes HTML input,

23
00:01:30,000 --> 00:01:36,000
starts the Mozilla web browser, feeds the HTML input into the browser,

24
00:01:36,000 --> 00:01:40,000
and then finally checks whether Mozilla fails or whether it succeeds.

25
00:01:40,000 --> 00:01:43,000
All of this needs to go into our automatic test.

26
00:01:43,000 --> 00:01:46,000
There is a number of ways to set up such tests.

27
00:01:46,000 --> 00:01:51,000
For instance, we could start Mozilla and then replay appropriate user events

28
00:01:51,000 --> 00:01:53,000
and see whether it crashes or not.

29
00:01:53,000 --> 00:01:58,000
We could also write JavaScript programs and have Mozilla execute them automatically.

30
00:01:58,000 --> 00:02:03,000
That is, we'd right a piece of JavaScript that would read the HTML input

31
00:02:03,000 --> 00:02:05,000
and then check whether this causes a crash or not.

32
00:02:05,000 --> 00:02:10,000
For this course, however, we'll set up a simulation that will do the very same thing,

33
00:02:10,000 --> 00:02:13,000
but actually without involving Mozilla.

34
00:02:13,000 --> 00:02:17,000
We will simply write a little Python function that does all the testing for us

35
00:02:17,000 --> 00:02:20,000
and all of this automatically on the machine.
