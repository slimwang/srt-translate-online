1
00:00:00,350 --> 00:00:05,180
So that ends this lesson on finding, matches for SIFT, descriptors.

2
00:00:05,180 --> 00:00:08,160
And it's really all I've really talked about was some clever indexing and

3
00:00:08,160 --> 00:00:09,970
hashing methods that have made it,

4
00:00:09,970 --> 00:00:14,410
much more effective as a way of describing and finding, matches.

5
00:00:14,410 --> 00:00:15,310
As I said earlier,

6
00:00:15,310 --> 00:00:19,610
if you have a really fast computer, you might just do full nearest neighbor.

7
00:00:19,610 --> 00:00:21,930
Or, if you had all day to do a problem set,

8
00:00:21,930 --> 00:00:24,310
you might just do the nearest neighbor.

9
00:00:24,310 --> 00:00:26,870
But if you actually have a real time device that needs to do something a little

10
00:00:26,870 --> 00:00:29,540
more clever, then you need something that accelerates that pace.

11
00:00:30,870 --> 00:00:34,560
Going forward, what we're going to talk about is to use a small number of

12
00:00:34,560 --> 00:00:39,010
local matches, to determine a best global solution.

13
00:00:39,010 --> 00:00:42,640
And this should remind you of something we've done before, where we take,

14
00:00:42,640 --> 00:00:47,240
sort of, a modest number of local events and find a global solution.

15
00:00:47,240 --> 00:00:48,640
Remember that whole voting thing?

16
00:00:48,640 --> 00:00:51,640
Well, what we're going to show you is another way that's more appropriate for

17
00:00:51,640 --> 00:00:54,390
doing things like I've gotta sum SIFT features.

18
00:00:54,390 --> 00:00:56,050
Some of the matches are good, some are not so

19
00:00:56,050 --> 00:01:01,620
good, I'd like to find the best global, match, what's the way of doing that and

20
00:01:01,620 --> 00:01:03,070
we'll talk about that the next times.
