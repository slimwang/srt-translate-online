1
00:00:00,310 --> 00:00:03,500
After completing stage one to connect a simple split sentence bolt

2
00:00:03,500 --> 00:00:04,140
using Java and

3
00:00:04,140 --> 00:00:08,180
Python, you are now ready to use python for something a bit more interesting.

4
00:00:08,180 --> 00:00:10,920
Python packages can be used to speed up development especially for

5
00:00:10,920 --> 00:00:13,140
computations that might be more difficult in Java.

6
00:00:14,360 --> 00:00:18,680
In this section we will use the beautiful suit package to parse tweeted URLs and

7
00:00:18,680 --> 00:00:19,350
emit text.

8
00:00:20,430 --> 00:00:23,200
In step zero, navigate to lesson three stage two, and

9
00:00:23,200 --> 00:00:25,960
remember to add your twitter credentials into the tweet topology file.

10
00:00:27,090 --> 00:00:30,790
In part one, we installed Beautiful Soup in Ubuntu package in

11
00:00:30,790 --> 00:00:33,350
Python by using the apt-get command.

12
00:00:33,350 --> 00:00:38,260
You can copy and paste sudo apt-get install python-bs4, into your terminal.

13
00:00:39,430 --> 00:00:43,040
This stands for super user do, apt-get is the install command for

14
00:00:43,040 --> 00:00:48,250
Ubuntu, and Python-bs4 is the Beautiful Soup package in Python.

15
00:00:49,280 --> 00:00:52,830
Running this the first time will give you a build success but

16
00:00:52,830 --> 00:00:56,340
if it's already installed you won't see any build.

17
00:00:56,340 --> 00:00:59,240
Also after our hackathon, a number of students asked us

18
00:00:59,240 --> 00:01:04,000
about how to install different Python commands using the vagrant file.

19
00:01:04,000 --> 00:01:06,600
So in lesson four if you're interested, we walked through how to

20
00:01:06,600 --> 00:01:10,780
add this command to your vagrant file, that prevision through virtual machine.

21
00:01:10,780 --> 00:01:15,530
In part two, modify your tweet spell to omit only the first URL contained in

22
00:01:15,530 --> 00:01:20,150
a tweet, remember to check if the URL is empty before admitting.

23
00:01:20,150 --> 00:01:23,970
And we used the Tweeter 4JEPI which can be found here,

24
00:01:23,970 --> 00:01:26,078
remember that Tweets are called status.

25
00:01:26,078 --> 00:01:29,960
On the Twitter4J.org site, if you search for

26
00:01:29,960 --> 00:01:35,050
your URL, you'll see the method getURLEntitites.

27
00:01:35,050 --> 00:01:39,860
And getURLEntities has a method getURL that returns a string.

28
00:01:40,950 --> 00:01:43,685
And I've given you a few syntax hints that states just that,

29
00:01:43,685 --> 00:01:47,790
status.getURLEntities, remember we're getting only the first

30
00:01:48,920 --> 00:01:53,590
URL at position zero.getURL that returns a string.

31
00:01:53,590 --> 00:01:57,167
Next its time to create your own python file in part three,

32
00:01:57,167 --> 00:02:01,489
create a new python file in the resources folder called urltext.py.

33
00:02:01,489 --> 00:02:03,912
In part four use the urllib2 and

34
00:02:03,912 --> 00:02:08,590
BeautifulSoup libraries, to define a new class, URLBolt.

35
00:02:09,710 --> 00:02:14,220
An important hint is to wrap your procedure in a try/accept statement to

36
00:02:14,220 --> 00:02:18,290
avoid connection errors, connection errors will actually crash Storm,

37
00:02:18,290 --> 00:02:20,860
due to the implementation of Python in Storm.

38
00:02:21,870 --> 00:02:24,838
Here's a documentation for your reference, and

39
00:02:24,838 --> 00:02:27,318
if needed, a few syntax hints in Python.

40
00:02:27,318 --> 00:02:31,220
In part 5, create a Java bolt URLBolt.java, and

41
00:02:31,220 --> 00:02:37,325
remember that this is located in the storm folder and not the resources folder.

42
00:02:37,325 --> 00:02:38,836
And finally in part 6,

43
00:02:38,836 --> 00:02:43,003
update your Topology to visualize URL words using a Python bolt.

44
00:02:43,003 --> 00:02:44,513
And finally, in part 6,

45
00:02:44,513 --> 00:02:48,302
update your Topology to visualize URL words using a Python bolt.

46
00:02:48,302 --> 00:02:52,675
Notice that your word cloud is now a parsed word cloud of URL

47
00:02:52,675 --> 00:02:58,220
words from webpages that were processed using beautiful soup in Python.

48
00:02:59,230 --> 00:03:02,420
Remember as well that your code should match less in three stage three, so

49
00:03:02,420 --> 00:03:03,280
if syntax errors or

50
00:03:03,280 --> 00:03:07,690
problems occur, please look ahead for the solution or review the solution video.

51
00:03:07,690 --> 00:03:08,190
Good luck.
