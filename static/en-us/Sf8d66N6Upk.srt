1
00:00:00,090 --> 00:00:03,070
An interface definition
language is used to describe

2
00:00:03,070 --> 00:00:06,430
the interface that
a particular server exports.

3
00:00:06,430 --> 00:00:09,620
At the minimum, this will include
the name of the procedure and

4
00:00:09,620 --> 00:00:12,540
also the type of the different
arguments that are used for

5
00:00:12,540 --> 00:00:15,020
this procedure as well
as the result type.

6
00:00:15,020 --> 00:00:18,450
So you see this is very similar
to defining a function prototype.

7
00:00:18,450 --> 00:00:22,600
Another important piece of information
is to include a version number.

8
00:00:22,600 --> 00:00:25,630
If there are multiple servers
that perform the same operation,

9
00:00:25,630 --> 00:00:26,970
the same procedure,

10
00:00:26,970 --> 00:00:32,390
the version number helps a client
identify which server is most current,

11
00:00:32,390 --> 00:00:36,660
which server has the most current
implementation of that procedure.

12
00:00:36,660 --> 00:00:39,910
Also the use of version
numbers is useful when

13
00:00:39,910 --> 00:00:42,680
we are trying to perform
upgrades in the system.

14
00:00:42,680 --> 00:00:45,600
For instance, we don't have to
upgrade all the clients and

15
00:00:45,600 --> 00:00:47,850
all the servers at the same time.

16
00:00:47,850 --> 00:00:52,470
Using this version number however,
the clients will be able to identify

17
00:00:52,470 --> 00:00:57,090
the server that supports exactly the
type of procedure implementation that is

18
00:00:57,090 --> 00:01:00,060
compatible with the rest
of the client program.

19
00:01:00,060 --> 00:01:03,990
So this is basically useful for
so-called incremental upgrades.

20
00:01:03,990 --> 00:01:08,930
The RPC system can use an interface
definition language for the interface

21
00:01:08,930 --> 00:01:13,590
specification that's completely agnostic
to the programming languages that

22
00:01:13,590 --> 00:01:17,670
are otherwise used to write
the client and the server processes.

23
00:01:17,670 --> 00:01:21,210
SunRPC which is an example
of an RPC system that

24
00:01:21,210 --> 00:01:25,900
we will look at later in this lesson,
uses an IDL that's called XDR.

25
00:01:25,900 --> 00:01:27,720
External data representation.

26
00:01:27,720 --> 00:01:31,830
And XDR is a completely
different specification from

27
00:01:31,830 --> 00:01:34,140
any other programming
language that's out there.

28
00:01:34,140 --> 00:01:36,050
We will describe XDR in more detail,

29
00:01:36,050 --> 00:01:40,110
but here is an example of something
that's described with XDR.

30
00:01:40,110 --> 00:01:43,350
And you can notice that
the definitions of things like

31
00:01:43,350 --> 00:01:46,550
the string variable with
these angular brackets,

32
00:01:46,550 --> 00:01:49,560
that's not really something that's
used in other programming languages.

33
00:01:49,560 --> 00:01:51,720
It's very XDR specific.

34
00:01:51,720 --> 00:01:55,760
If you would like, by the way, to read
ahead and examine a SunRPC example and

35
00:01:55,760 --> 00:01:59,620
look at XDR in more detail, there are
links provided in the instructor notes.

36
00:01:59,620 --> 00:02:02,250
The opposite of
a language-agnostic choice for

37
00:02:02,250 --> 00:02:07,310
an IDL is to choose a language- specific
IDL to describe the interfaces.

38
00:02:07,310 --> 00:02:12,139
For instance, the Java RMI,
which is a Javaequivalent of

39
00:02:12,139 --> 00:02:15,850
RPC uses the actual, the same,
programming language JAVA.

40
00:02:15,850 --> 00:02:20,440
To specify the interfaces that
the RMI server is exporting.

41
00:02:20,440 --> 00:02:24,490
Here is an example of an interface
specified for Java RMIs.

42
00:02:24,490 --> 00:02:27,710
Those of you that know Java will
immediately recognize that this looks

43
00:02:27,710 --> 00:02:28,986
just like Java.

44
00:02:28,986 --> 00:02:32,770
For programmers that know Java,
use of a language specific

45
00:02:32,770 --> 00:02:37,000
IDL is great because they don't have
to learn yet another set of rules to,

46
00:02:37,000 --> 00:02:42,000
how to define data structures or
procedures in another language.

47
00:02:42,000 --> 00:02:44,870
For those that don't know Java
that are not familiar with

48
00:02:44,870 --> 00:02:49,190
the specific programming language that's
supported by the server for instance.

49
00:02:49,190 --> 00:02:52,950
Then this becomes irrelevant if you have
to learn something they might as well

50
00:02:52,950 --> 00:02:56,740
learn something simple and
that is one of the goals that XDR has.

51
00:02:56,740 --> 00:03:00,380
Now let me iterate one more time
that whatever the choice for

52
00:03:00,380 --> 00:03:03,700
the IDL language, this is used only for

53
00:03:03,700 --> 00:03:08,170
specification of the interface
that the server will export.

54
00:03:08,170 --> 00:03:12,200
The interface, whatever is written
with this IDL language will be

55
00:03:12,200 --> 00:03:17,090
used by the RPC system for tasks like
automating the stop generation process.

56
00:03:17,090 --> 00:03:19,520
Generating the marshalling procedures.

57
00:03:19,520 --> 00:03:23,500
And to generate information that's
used in the service discovery process.

58
00:03:24,560 --> 00:03:29,010
The IDL is not actually used for the
actual implementation of the service.
