1
00:00:00,440 --> 00:00:02,718
Now, let's go ahead and
declare some variables for

2
00:00:02,718 --> 00:00:05,721
each of the primitive
types that we saw earlier.

3
00:00:05,721 --> 00:00:09,468
So, now we have a couple more variables,
and I've explicitly stated the type for

4
00:00:09,468 --> 00:00:11,710
each, even though it's
really not necessary.

5
00:00:11,710 --> 00:00:15,300
Except for the case of the float and
the double.

6
00:00:15,300 --> 00:00:17,555
The character would be the same as well.

7
00:00:17,555 --> 00:00:19,026
So, I'll leave that one.

8
00:00:19,026 --> 00:00:21,870
I'm going to remove all
the other ones really quick.

9
00:00:21,870 --> 00:00:24,410
But the rest of them,
I think Swift will infer just fine, and

10
00:00:24,410 --> 00:00:25,150
we can double check.

11
00:00:26,670 --> 00:00:28,160
So that's in that like we wanted.

12
00:00:30,740 --> 00:00:32,460
That's a string.

13
00:00:32,460 --> 00:00:34,190
And that's a bool.

14
00:00:34,190 --> 00:00:36,980
Now, what about these float and
double types?

15
00:00:36,980 --> 00:00:41,050
They seem to represent pretty similar
values, they're floating point numbers.

16
00:00:41,050 --> 00:00:42,690
But why would you use
one over the other?

17
00:00:42,690 --> 00:00:45,530
Well that comes down to
an issue of precision and

18
00:00:45,530 --> 00:00:49,380
being able to most accurately
represent a floating point number.

19
00:00:49,380 --> 00:00:52,920
Truth be told, computers actually have
a pretty difficult time doing this.

20
00:00:52,920 --> 00:00:56,080
Usually computers even have
special hardware dedicated just to

21
00:00:56,080 --> 00:00:58,020
floating point numbers.

22
00:00:58,020 --> 00:01:00,810
Typically you'll want to use
double instead of float,

23
00:01:00,810 --> 00:01:03,750
because it can handle floating point
numbers at a higher precision.

24
00:01:04,890 --> 00:01:07,400
But, double isn't always better.

25
00:01:07,400 --> 00:01:11,160
In cases where speed may be more
important than the accuracy of

26
00:01:11,160 --> 00:01:14,210
a floating point number,
you may want to choose float instead.

27
00:01:15,520 --> 00:01:18,030
Next let's try changing
a variable's value.

28
00:01:18,030 --> 00:01:19,400
Let's change myJerseyNumber.

29
00:01:20,410 --> 00:01:22,670
Since we've already
declared myJerseyNumber,

30
00:01:22,670 --> 00:01:25,710
we can just change it with
the simple syntax here.

31
00:01:25,710 --> 00:01:28,650
We have the name of the variable,
an equal sign and

32
00:01:28,650 --> 00:01:30,100
then the new value that we want.

33
00:01:31,360 --> 00:01:36,740
So following this change we can see that
my jersey number went from being 5 here

34
00:01:36,740 --> 00:01:38,390
to 80 here.

35
00:01:38,390 --> 00:01:41,190
And we can keep doing this
as many times as we'd like.

36
00:01:41,190 --> 00:01:43,520
However, when we change
a variables value,

37
00:01:43,520 --> 00:01:47,210
we must insure that the new
value is of the right type.

38
00:01:47,210 --> 00:01:49,840
So in this case,
every single one of these are integers,

39
00:01:49,840 --> 00:01:52,810
so the compiler wouldn't complain.

40
00:01:52,810 --> 00:01:54,390
But let's try something
a little bit different.

41
00:01:54,390 --> 00:01:57,530
In this case, we're going to
try to change myJerseyNumber

42
00:01:57,530 --> 00:02:00,167
to something would typically
be inferred as a string.

43
00:02:01,430 --> 00:02:02,530
And this is a problem.

44
00:02:02,530 --> 00:02:04,310
We can see that the compiler's
complaining, and

45
00:02:04,310 --> 00:02:08,900
it says we cannot assign a value of
type string to a value of type n

46
00:02:08,900 --> 00:02:13,120
because myJerseyNumber was declared
as an integer, it specs an integer.

47
00:02:14,390 --> 00:02:18,560
And the reason this is a problem is
because Swift is strongly typed.

48
00:02:18,560 --> 00:02:21,720
Or we might say that Swift is
a strongly typed language.

49
00:02:21,720 --> 00:02:24,410
This means that once a variable's
type has been declared or

50
00:02:24,410 --> 00:02:27,110
set, it cannot change.

51
00:02:27,110 --> 00:02:32,730
So if we look at where myJerseyNumber is
declared, we know that it's an integer.

52
00:02:32,730 --> 00:02:34,240
And it can't change.

53
00:02:34,240 --> 00:02:36,650
Therefore, it can't be
set to the string here.
