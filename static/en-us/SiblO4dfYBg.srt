1
00:00:00,570 --> 00:00:04,192
Victor showed us how he can pull up a
list of links on a page using voiceover,

2
00:00:04,192 --> 00:00:05,698
and even search through them.

3
00:00:05,698 --> 00:00:08,623
This feature is obviously
most useful if, firstly,

4
00:00:08,623 --> 00:00:10,707
the screen reader can find the links.

5
00:00:10,707 --> 00:00:14,570
And secondly, if the actual text
of the links is meaningful.

6
00:00:15,800 --> 00:00:18,660
For the first, there are three common
patterns that we see which can

7
00:00:18,660 --> 00:00:20,830
cause the screen reader to
miss links in the page.

8
00:00:22,346 --> 00:00:25,266
One is using a span,
with some link styling, or

9
00:00:25,266 --> 00:00:27,829
an anchor tag without an href attribute.

10
00:00:27,829 --> 00:00:31,030
This is popular for single page
applications when you have something

11
00:00:31,030 --> 00:00:32,912
which is effectively an internal link.

12
00:00:32,912 --> 00:00:35,730
Which does some javascript-based
navigation within the app.

13
00:00:35,730 --> 00:00:39,011
Or also when you want something
which performs an action, but

14
00:00:39,011 --> 00:00:40,030
looks like a link.

15
00:00:41,180 --> 00:00:42,760
For anything which behaves like a link,

16
00:00:42,760 --> 00:00:45,080
including within a single
page application.

17
00:00:45,080 --> 00:00:49,076
You should absolutely use an anchor tag
with an href attribute, no exceptions.

18
00:00:49,076 --> 00:00:52,339
You can read more about how to make
those links work nicely with smooth

19
00:00:52,339 --> 00:00:54,936
single page app navigation
in the instruction notes.

20
00:00:54,936 --> 00:00:59,250
But for now let's focus on what
it means for accessibility.

21
00:00:59,250 --> 00:01:03,200
Not only will this make the link
show up in the links list, but

22
00:01:03,200 --> 00:01:06,250
it will mean it automatically
works with the keyboard.

23
00:01:06,250 --> 00:01:09,920
And that you can do things like copy or
bookmark the link location.

24
00:01:10,960 --> 00:01:13,290
The second pattern is
the opposite problem,

25
00:01:13,290 --> 00:01:16,590
something which is implemented using
a link but is really more like a button.

26
00:01:17,940 --> 00:01:21,810
You can often recognize this by the href
attribute being something nonsensical.

27
00:01:23,080 --> 00:01:26,130
For this case, we'll just replace
that anchor tag with a button tag and

28
00:01:26,130 --> 00:01:27,150
style it appropriately.

29
00:01:28,310 --> 00:01:30,310
In the next class,
we'll learn another technique for

30
00:01:30,310 --> 00:01:33,700
making elements appear to have a
different role to assistive technology.

31
00:01:35,050 --> 00:01:38,540
And the third example is where we
have an image used as link content.

32
00:01:38,540 --> 00:01:41,370
For example, sometimes you might have
a piece of text which needs a very

33
00:01:41,370 --> 00:01:44,830
specific style like a logo and
which is implemented as an image.

34
00:01:45,940 --> 00:01:48,210
To the average sighted
user this works fine,

35
00:01:48,210 --> 00:01:51,255
because they can still
understand what the link is for.

36
00:01:51,255 --> 00:01:54,529
However for an assistive technology
this makes the link unusable.

37
00:01:55,980 --> 00:01:59,540
We can fix that by using our usual alt
text technique to make sure the link is

38
00:01:59,540 --> 00:02:02,730
experienced directly to
the assistive technology layout.

39
00:02:02,730 --> 00:02:04,147
Just make sure the image has alt text.

40
00:02:04,147 --> 00:02:08,002
So, that takes care of making sure
the screen reader can find the links.

41
00:02:08,002 --> 00:02:11,811
But we also need to make sure that once
the link makes it into the links list,

42
00:02:11,811 --> 00:02:13,980
that it's also useful.

43
00:02:13,980 --> 00:02:16,522
We do that by making sure
its text is descriptive.

44
00:02:16,522 --> 00:02:21,030
The checklist has a stronger and
weaker a version of this point.

45
00:02:21,030 --> 00:02:25,780
The stronger one, item 2.4.9 states that
the purpose of each link should be able

46
00:02:25,780 --> 00:02:28,110
to be determined from
the link text alone.

47
00:02:29,270 --> 00:02:33,000
The Wikipedia example that Victor showed
had a lot of really useful link text

48
00:02:33,000 --> 00:02:33,940
examples.

49
00:02:33,940 --> 00:02:37,090
Because of the way a Wiki format
encourages creating links,

50
00:02:37,090 --> 00:02:40,020
which use the page's
title as their text.

51
00:02:40,020 --> 00:02:42,920
In general, link text should
give any user enough information

52
00:02:42,920 --> 00:02:45,490
to decide whether they want to click it.

53
00:02:45,490 --> 00:02:48,980
One common example of uninformative
link text we see a lot these days is,

54
00:02:48,980 --> 00:02:50,660
learn more.

55
00:02:50,660 --> 00:02:53,740
Usually this leads to a longer article
about the subject of the preceding

56
00:02:53,740 --> 00:02:54,800
sentence or paragraph.

57
00:02:56,200 --> 00:02:59,660
So one way we can make it more useful
for everyone is to rewrite the text to

58
00:02:59,660 --> 00:03:04,000
say it something like, learn more
about responsive layouts in this case.

59
00:03:04,000 --> 00:03:07,930
Or even making responsive layouts
the paragraph heading, the link.

60
00:03:07,930 --> 00:03:10,380
This also means that,
if I'm visually skimming the page for

61
00:03:10,380 --> 00:03:13,270
links, I don't need to backtrack
through the rest of the paragraph

62
00:03:13,270 --> 00:03:14,580
to see what the link might be about.
