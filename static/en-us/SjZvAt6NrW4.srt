1
00:00:00,000 --> 00:00:04,000
So this is a demonstration of a lexical analyzer.

2
00:00:04,000 --> 00:00:06,000
And what I'm going to show you is

3
00:00:06,000 --> 00:00:10,000
how to test things out or change things around.

4
00:00:10,000 --> 00:00:17,000
For example, let's go up here and turn "This" into a quoted string.

5
00:00:17,000 --> 00:00:20,000
So previously, our first token was the WORD, ' This ',

6
00:00:20,000 --> 00:00:25,000
but when I rerun it, I'm really expecting to see the STRING, "This"--

7
00:00:25,000 --> 00:00:27,000
because I've put This in quotes.

8
00:00:27,000 --> 00:00:30,000
And now it is the STRING, ' This '.

9
00:00:30,000 --> 00:00:32,000
These other numbers,

10
00:00:32,000 --> 00:00:36,000
after lexical analyzer token STRING, with token value, ' This '

11
00:00:36,000 --> 00:00:41,000
are the line and character number information.

12
00:00:41,000 --> 00:00:45,000
The token corresponding to ' This ' starts on line 1, at character zero.

13
00:00:45,000 --> 00:00:50,000
The token corresponding to ' is ' starts on line 1, character 7--

14
00:00:50,000 --> 00:00:55,000
zero, 1, 2, 3, 4, 5, 6, 7--yep, that's where the "i" starts.

15
00:00:55,000 --> 00:00:58,000
So let's say we made a mistake,

16
00:00:58,000 --> 00:01:01,000
we got one of our regular expressions wrong.

17
00:01:01,000 --> 00:01:04,000
Let's say that I mistakenly put in a Greater Than sign here,

18
00:01:04,000 --> 00:01:06,000
for LANGLESLASH.

19
00:01:06,000 --> 00:01:11,000
Well, then right after "my", I would expect to see the output change.

20
00:01:11,000 --> 00:01:13,000
I'm going to expect to see us get the wrong answer.

21
00:01:13,000 --> 00:01:17,000
Currently, right after ' my ', we see LANGLESLASH.

22
00:01:17,000 --> 00:01:19,000
Let's rerun it.

23
00:01:19,000 --> 00:01:23,000
Oh! Now we don't see quite the right thing at all.

24
00:01:23,000 --> 00:01:25,000
Right after the ' b ', we see an LANGLESLASH,

25
00:01:25,000 --> 00:01:27,000
but it's associated with the wrong text.

26
00:01:27,000 --> 00:01:29,000
After ' my ', we just see an LANGLE.

27
00:01:29,000 --> 00:01:32,000
The slash is made its way into this WORD, ' /b '.

28
00:01:32,000 --> 00:01:34,000
By looking at this output,

29
00:01:34,000 --> 00:01:39,000
we can notice mistakes in our lexical analyzer and help fix them.

30
00:01:39,000 --> 00:01:42,000
I repair the problem,

31
00:01:42,000 --> 00:01:45,000
rerun, and the world looks like a bit better.

32
00:01:45,000 --> 00:01:48,000
Here, I've used Python's triple quoting approach.

33
00:01:48,000 --> 00:01:53,000
We have the word Tricky; the quoted STRING, "string";

34
00:01:53,000 --> 00:01:59,000
LANGLE, word, RANGLE, output, LANGLE, slash, i, RANGLE, word--

35
00:01:59,000 --> 00:02:01,000
and then we're done.

36
00:02:01,000 --> 00:02:03,000
Let's go see how this comes out.

37
00:02:03,000 --> 00:02:06,000
We've got the word Tricky; the STRING, "string"--

38
00:02:06,000 --> 00:02:09,000
and if you've noticed, we've shaved off the 2 double quotes,

39
00:02:09,000 --> 00:02:11,000
which is just what we wanted,

40
00:02:11,000 --> 00:02:15,000
an LANGLE, the i, the RANGLE, the word ' output ', LANGLESLASH,

41
00:02:15,000 --> 00:02:18,000
Bang at the end.
