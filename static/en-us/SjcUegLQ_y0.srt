1
00:00:00,000 --> 00:00:03,770
The correct answer here is O(n²),

2
00:00:03,770 --> 00:00:07,620
and to see that, we just have to look at how many time steps of this

3
00:00:07,620 --> 00:00:09,620
I wouldn't requires other function within.

4
00:00:09,620 --> 00:00:13,450
As you remember, this line up here takes zero times steps

5
00:00:13,450 --> 00:00:16,340
because it's just a memory access and we said those were free.

6
00:00:16,340 --> 00:00:20,920
This one here, it depends again what you do with the end of the range here

7
00:00:20,920 --> 00:00:26,230
but it's going to be executed about n times, so it's either n or n + 1.

8
00:00:26,230 --> 00:00:30,610
That doesn't really make much difference here because now we can use big O notation.

9
00:00:30,610 --> 00:00:34,170
How often is this inner loop here executed?

10
00:00:34,170 --> 00:00:36,900
The first time, it's actually executed n times,

11
00:00:36,900 --> 00:00:42,530
then the next time it's executed, it's going to be executed on the n - 1 times,

12
00:00:42,530 --> 00:00:47,650
and so on and so on because this i here, this value here increases,

13
00:00:47,650 --> 00:00:52,190
and as this increases, this inner loop here is going to be executed less and less times.

14
00:00:52,190 --> 00:00:55,950
Here we have first time, we're going to have n times steps,

15
00:00:55,950 --> 00:00:59,650
the next time, we're going to have n - 1 times steps,

16
00:00:59,650 --> 00:01:05,530
the next time, we're going to have n - 2 times steps and so on,

17
00:01:05,530 --> 00:01:08,750
and the same basically also holds true for this inner loop here.

18
00:01:08,750 --> 00:01:13,540
So, if this is executed n times, then the inner loop here,

19
00:01:13,540 --> 00:01:19,690
again depending on how you count that is going to be executed n times or n - 1 times

20
00:01:19,690 --> 00:01:23,390
So, these two parts here, that is exactly where you need the hit.

21
00:01:23,390 --> 00:01:28,940
So, it's two times this part here, so it's two times n² + n over 2.

22
00:01:28,940 --> 00:01:31,560
So, the total here is n² + n.

23
00:01:31,560 --> 00:01:41,300
So, the total number of times steps is 0 + n + n² + n which is n² + 2n which is O(n²).

24
00:01:41,300 --> 00:01:44,440
Now, as you get more familiar with analyzing algorithms,

25
00:01:44,440 --> 00:01:49,550
you will actually see that having two inner loops usually leads with quadratic running time

26
00:01:49,550 --> 00:01:52,390
and you wouldn't even have needed this extracted here.

27
00:01:52,390 --> 00:01:56,720
So, with more practice, the analysis of algorithms becomes easier and easier

28
00:01:56,720 --> 00:02:01,780
and you will have to do less and less of the tedious single line counting.

29
00:02:01,780 --> 00:02:06,950
One final thing, of course, O(n³) is technically correct

30
00:02:06,950 --> 00:02:09,940
but as I already mentioned when discussing big O notation,

31
00:02:09,940 --> 00:02:12,160
you want to bound to be as tight as possible.

32
00:02:12,160 --> 99:59:59,999
This is really the only correct solution.
