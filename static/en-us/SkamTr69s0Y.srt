1
00:00:00,000 --> 00:00:03,000
So now we'll assume that we do have such a function.

2
00:00:03,000 --> 00:00:06,000
We'll assume that we have a function H

3
00:00:06,000 --> 00:00:07,000
that acts like a random oracle

4
00:00:07,000 --> 00:00:10,000
that provides the properties of an ideal cryptographic hash function.

5
00:00:10,000 --> 00:00:13,000
Let's try our coin-tossing protocol again.

6
00:00:13,000 --> 00:00:15,000
So, here's our new protocol design.

7
00:00:15,000 --> 00:00:18,000
Alice will pick a number, 0 or 1,

8
00:00:18,000 --> 00:00:20,000
representing heads or tails.

9
00:00:20,000 --> 00:00:24,000
She'll compute using our ideal cryptographic hash function--

10
00:00:24,000 --> 00:00:27,000
the hash of x--and she'll send m to Bob.

11
00:00:27,000 --> 00:00:29,000
Bob will make a guess,

12
00:00:29,000 --> 00:00:32,000
send that guess back to Alice.

13
00:00:32,000 --> 00:00:37,000
Then Alice will send her claimed value of x back to Bob.

14
00:00:37,000 --> 00:00:41,000
Bob can check if the hash of x equals m.

15
00:00:41,000 --> 00:00:44,000
If that's not the case, then Bob suspects that Alice has cheated.

16
00:00:44,000 --> 00:00:48,000
If x is equal to g, Bob wins.

17
00:00:48,000 --> 00:00:50,000
So, do we like this protocol?

18
00:00:50,000 --> 00:00:52,000
We'll assume that H is an ideal hash function,

19
00:00:52,000 --> 00:00:57,000
So which one of the parties, if any--or both--can cheat

20
00:00:57,000 --> 99:59:59,999
with this new protocol that we've defined?
