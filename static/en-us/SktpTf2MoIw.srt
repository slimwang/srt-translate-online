1
00:00:00,194 --> 00:00:03,406
So let's think of a good parallel algorithm to solve this problem.

2
00:00:03,406 --> 00:00:06,819
So here's some of the characteristics that we want out of our algorithm.

3
00:00:06,819 --> 00:00:11,780
We want lots of parallelism, coalesced memory access, minimal execution divergence,

4
00:00:11,780 --> 00:00:13,755
and something that's easy to implement.

5
00:00:13,755 --> 00:00:16,922
And I want to show you an algorithm that gives you all of those characteristics,

6
00:00:16,922 --> 00:00:19,390
and then I'm going to tell you why it's a crummy algorithm.

7
00:00:19,390 --> 00:00:24,059
So as we're going along, I want you to think about why this algorithm isn't going to be good enough.

8
00:00:24,059 --> 00:00:25,968
So here's what we're going to do.

9
00:00:25,968 --> 00:00:28,670
First I'm going to describe the algorithm at a high level,

10
00:00:28,670 --> 00:00:31,302
then we're going to do an example, then we're going look at code.

11
00:00:31,302 --> 00:00:35,111
So at a high level, we're going to operate over our list of edges.

12
00:00:35,111 --> 00:00:39,529
Then we're going to iterate n times, where n is the maximum depth of the graph.

13
00:00:39,529 --> 00:00:42,033
So on each iteration, n parallel,

14
00:00:42,033 --> 00:00:44,996
we can look at each edge independently in n parallel.

15
00:00:44,996 --> 00:00:47,782
And if one end of that edge has a depth d

16
00:00:47,782 --> 00:00:51,658
but we haven't visited the other end of the edge yet, the vertex on the other side,

17
00:00:51,658 --> 00:00:54,891
then we set that vertex to depth d plus 1.

18
00:00:54,891 --> 00:00:58,335
So the first iteration will set all the vertices that have depth 1.

19
00:00:58,335 --> 00:01:02,437
The next iteration will set all the vertices with depth 2 and so on.

20
00:01:02,437 --> 00:01:04,000
So let's do an example.
