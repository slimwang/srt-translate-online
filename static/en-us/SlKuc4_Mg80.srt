1
00:00:00,000 --> 00:00:03,160
So remember at the beginning of this unit when I introduced you

2
00:00:03,160 --> 00:00:06,090
to nondeterminism and the "if-better" function?

3
00:00:06,090 --> 00:00:09,310
And we also talked about simulating the if-better function

4
00:00:09,310 --> 00:00:11,680
and how this takes exponential time to do?

5
00:00:11,680 --> 00:00:14,320
And I imagine your first reaction to this might have been

6
00:00:14,320 --> 00:00:18,070
a mild version of "So what?" or even "This is ridiculous."

7
00:00:18,070 --> 00:00:23,580
But now, think what this means in the context of NP-completeness.

8
00:00:23,580 --> 00:00:29,020
If, for any NP-complete problem, you find a deterministic algorithm

9
00:00:29,020 --> 00:00:34,100
that runs in polynomial time, then you have also found a way to simulate

10
00:00:34,100 --> 00:00:37,410
a nondeterministic RAM in polynomial time,

11
00:00:37,410 --> 00:00:41,780
which would mean that a normal, deterministic RAM without the if-better function

12
00:00:41,780 --> 00:00:46,240
is just as powerful as one that has this function.

13
00:00:46,240 --> 00:00:49,710
Which, of course, seems a bit strange because our intuition, of course, tells us

14
00:00:49,710 --> 00:00:54,300
that having this if-better function is super, super powerful

15
00:00:54,300 --> 00:00:56,940
and should somehow make a difference.

16
00:00:56,940 --> 00:00:59,390
So the cool thing is, there's only 2 possibilities.

17
00:00:59,390 --> 00:01:03,810
Either all NP-complete problems can be solved in polynomial time,

18
00:01:03,810 --> 00:01:07,640
which would essentially mean that P=NP.

19
00:01:07,640 --> 00:01:12,240
So any problem that can be solved in polynomial time on a nondeterministic RAM

20
00:01:12,240 --> 00:01:16,420
can be solved in polynomial time on a deterministic RAM.

21
00:01:16,420 --> 00:01:20,950
Or, in other words, a deterministic RAM is just as powerful as a nondeterministic one.

22
00:01:20,950 --> 00:01:25,200
Or it could be the other case, and that is no NP-complete problem

23
00:01:25,200 --> 00:01:27,220
can be solved in polynomial time.

24
00:01:27,220 --> 00:01:29,870
So P≠NP.

25
00:01:29,870 --> 00:01:33,940
There are certain problems that you can solve in polynomial time

26
00:01:33,940 --> 00:01:38,230
if you have the if-better function available, but you can not solve them

27
00:01:38,230 --> 00:01:40,490
in polynomial time if you don't have this function.

28
00:01:40,490 --> 00:01:45,230
So basically, you'd say P≠NP is the same as saying that

29
00:01:45,230 --> 00:01:48,790
the if-better function is really powerful.

30
00:01:48,790 --> 00:01:53,580
So which one is it? And that question is the famous P vs NP problem.

31
00:01:53,580 --> 00:01:57,150
Because the thing is, we don't know. Nobody knows.

32
00:01:57,150 --> 00:02:04,230
Asking this question here, if P=NP or P≠NP, is a problem that is decades old,

33
00:02:04,230 --> 00:02:08,120
and yet nobody has been able to figure it out.

34
00:02:08,120 --> 00:02:13,290
Now, given how powerful this if-better function is, remember when I introduced it to you?

35
00:02:13,290 --> 00:02:17,330
It seemed like this magic function that could solve all of our problems.

36
00:02:17,330 --> 00:02:23,210
Many computer scientists nowaday believe that P≠NP,

37
00:02:23,210 --> 00:02:25,670
but nobody has been able to prove it.

38
00:02:25,670 --> 00:02:27,790
On the other hand, also nobody has been able to find

39
00:02:27,790 --> 00:02:31,930
a polynomial time algorithm for any single NP-complete problem,

40
00:02:31,930 --> 00:02:39,150
despite, literally, thousands of practically-relevant NP-complete problems being out there.

41
00:02:39,150 --> 00:02:43,140
Now let's think a little bit of how you could resolve this question.

42
00:02:43,140 --> 00:02:49,570
So how could you show that P=NP or P≠NP? And we'll do that as a quiz.

43
00:02:49,570 --> 00:02:55,580
So I'm going to give you a number of accomplishments or things that you could do,

44
00:02:55,580 --> 00:03:00,240
and I would like you to tell me what that would show.

45
00:03:00,240 --> 00:03:04,890
So, for example, if you found a polynomial-time algorithm for an NP-complete problem,

46
00:03:04,890 --> 00:03:11,550
would that show that P=NP, would that show that P≠NP,

47
00:03:11,550 --> 00:03:13,600
or would that show nothing interesting?

48
00:03:13,600 --> 00:03:17,140
And what if you found an algorithm that solves an NP-complete problem

49
00:03:17,140 --> 00:03:19,740
in polynomial time on average?

50
00:03:19,740 --> 00:03:22,750
So not worst-case running time, but average-case running time.

51
00:03:22,750 --> 00:03:26,640
And what about if you showed that the most efficient algorithm for clique

52
00:03:26,640 --> 00:03:31,280
requires exponential time, on the deterministic RAM, of course?

53
00:03:31,280 --> 00:03:38,230
Would that show that P=NP, P≠NP, or something else, or we don't know?

54
00:03:38,230 --> 00:03:42,710
What if you showed that the vertex cover problem has an exponential number

55
00:03:42,710 --> 00:03:46,750
of potential solutions that any algorithm has to go through?

56
00:03:46,750 --> 00:03:52,780
What if you were able to reduce the clique problem to the shortest path problem?

57
00:03:52,780 --> 00:03:57,530
So shortest path is finding the shortest path between 2 vertices in a graph.

58
00:03:57,530 --> 00:04:00,810
What if you were to reduce clique to the problem of finding the shortest path

59
00:04:00,810 --> 00:04:03,000
between 2 vertices in a graph?

60
00:04:03,000 --> 00:04:07,230
Or what if you could show that any shortest path problem in a graph

61
00:04:07,230 --> 00:04:11,140
can be solved by solving clique in a transformed graph?

62
00:04:11,140 --> 99:59:59,999
So please make your selection. Which ones are correct?
