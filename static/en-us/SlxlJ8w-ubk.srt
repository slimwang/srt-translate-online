1
00:00:01,130 --> 00:00:03,610
>> This doesn't look like
the JSON we're used to.

2
00:00:03,610 --> 00:00:05,500
Well, the truth is this data is JSON.

3
00:00:05,500 --> 00:00:06,900
It's just JSON in it's raw byte form.

4
00:00:06,900 --> 00:00:09,090
That's what all these hex numbers are.

5
00:00:09,090 --> 00:00:10,660
In order to actually understand and
use it,

6
00:00:10,660 --> 00:00:14,710
we'll need to convert it from raw JSON
into an object we can use in Swift.

7
00:00:14,710 --> 00:00:15,530
And guess what?

8
00:00:15,530 --> 00:00:17,180
Swift has just the class for us.

9
00:00:18,370 --> 00:00:22,720
It's called NSJSONSerialization, and it
allows us to convert JSON into objects

10
00:00:22,720 --> 00:00:25,480
like arrays or
dictionaries and vice versa.

11
00:00:25,480 --> 00:00:27,890
Since we want to go from
JSON data to an object,

12
00:00:27,890 --> 00:00:30,380
we'll use a method called
JSON object with data.

13
00:00:31,980 --> 00:00:35,560
This take our raw JSON data and
returns either an NS dictionary or

14
00:00:35,560 --> 00:00:38,810
an NS array,
which are both usable in Swift.

15
00:00:38,810 --> 00:00:40,860
Okay, let's go use it in our code.

16
00:00:40,860 --> 00:00:44,170
We can start back in this little spot
where we're printing the raw data.

17
00:00:44,170 --> 00:00:46,790
Now, instead of printing it,
let's convert it.

18
00:00:46,790 --> 00:00:49,750
We should start by using optional
binding to get our data out

19
00:00:49,750 --> 00:00:52,850
of optional form and
make sure that it exists.

20
00:00:52,850 --> 00:00:55,610
Then, let's create an object that
will eventually contain our parsed

21
00:00:55,610 --> 00:00:56,880
dictionary result.

22
00:00:56,880 --> 00:00:58,410
We can call it parsed result.

23
00:00:59,700 --> 00:01:07,797
And now, let's add in that method
NSJSONSerialization.JSONObjectWithData

24
00:01:07,797 --> 00:01:15,700
with data as our first parameter, and
AllowFragments as the second parameter.

25
00:01:16,720 --> 00:01:20,158
And save that result
to our parsedResult.

26
00:01:23,257 --> 00:01:26,050
What's this?

27
00:01:26,050 --> 00:01:30,490
Can call throw, but it's not marked
with try and the error is not handled.

28
00:01:32,280 --> 00:01:34,350
It looks like this method
can throw an error.

29
00:01:34,350 --> 00:01:37,926
Let's use Swift's do catch block and
the try keyword to handle it.

30
00:01:37,926 --> 00:01:40,690
If you haven't seen this error
handling syntax before, or

31
00:01:40,690 --> 00:01:44,060
would like a refresher, feel free to
check out the Swift syntax course.

32
00:01:44,060 --> 00:01:46,240
But overall,
this will be pretty straightforward.

33
00:01:46,240 --> 00:01:48,241
Let's add the do catch block like so.

34
00:01:49,740 --> 00:01:52,738
And then, put in the try keyword in
front of the potentially problematic

35
00:01:52,738 --> 00:01:53,337
method call.

36
00:01:55,194 --> 00:01:57,200
And that looks like that was it.

37
00:01:57,200 --> 00:01:58,800
Should we try and print?

38
00:01:58,800 --> 00:02:01,770
First, we should probably change
this data to parsedResult.

39
00:02:04,110 --> 00:02:05,309
Let's try and print it.

40
00:02:07,394 --> 00:02:08,710
Grab new image.

41
00:02:10,669 --> 00:02:11,740
Cool.

42
00:02:11,740 --> 00:02:13,530
This looks more like it.

43
00:02:13,530 --> 00:02:17,250
For the record, serialization means
converting an object into a stream

44
00:02:17,250 --> 00:02:20,350
of bytes, and deserialization
usually means the opposite,

45
00:02:20,350 --> 00:02:22,430
converting a stream of
bytes into an object.

46
00:02:22,430 --> 00:02:26,098
But for simplicity, Apple groups these
both under MSJSON serialization.
