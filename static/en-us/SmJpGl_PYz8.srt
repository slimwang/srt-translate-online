1
00:00:00,190 --> 00:00:03,850
So let's summarize the differences
between message passing and

2
00:00:03,850 --> 00:00:04,870
shared memory.

3
00:00:04,870 --> 00:00:09,440
Regarding who does communication
in message passing, the programmer

4
00:00:09,440 --> 00:00:13,550
is responsible for figuring out who
sends and who receives the data.

5
00:00:13,550 --> 00:00:14,516
In shared memory,

6
00:00:14,516 --> 00:00:18,240
though communication is happening
through shared variables in memory, so

7
00:00:18,240 --> 00:00:21,785
all of the actual sending of the data
back and forth is fully automatic.

8
00:00:21,785 --> 00:00:25,570
The programmer doesn't need to do that,
they just store to memory and

9
00:00:25,570 --> 00:00:29,010
load from memory, and it is the
responsibility of the system to figure

10
00:00:29,010 --> 00:00:31,980
out when the data gets sent and to whom.

11
00:00:31,980 --> 00:00:36,970
As far as data distribution is
concerned, that is, which cores

12
00:00:36,970 --> 00:00:41,200
get to have which data in their memory,
the programmer needs to manually do this

13
00:00:41,200 --> 00:00:47,400
data distribution, by explicitly sending
the data to the cores that need it.

14
00:00:47,400 --> 00:00:50,950
In shared memory,
the system is responsible for

15
00:00:50,950 --> 00:00:54,500
sending the data wherever it's needed,
so the programmer simply loads or

16
00:00:54,500 --> 00:00:58,140
stores to the data, and it's the job
of this hardware and the software of

17
00:00:58,140 --> 00:01:03,160
the system to figure out which data
should be local where at what time.

18
00:01:03,160 --> 00:01:06,010
As far as how much hardware
support we need for

19
00:01:06,010 --> 00:01:08,930
message passing,
this support is relatively simple.

20
00:01:08,930 --> 00:01:12,950
We just need to basically have
a network card and a network.

21
00:01:12,950 --> 00:01:17,350
It can be a very fancy network,
but it's just a network.

22
00:01:17,350 --> 00:01:21,440
In contrast for shared memory,
we need extensive hardware support

23
00:01:21,440 --> 00:01:25,290
that automatically figures out
when to send data, and to whom and

24
00:01:25,290 --> 00:01:27,410
where to cache in, etc., etc.

25
00:01:27,410 --> 00:01:32,340
So we will be spending a large portion
of the rest of this course on just

26
00:01:32,340 --> 00:01:35,330
figuring out what this hardware
support needs to look like.

27
00:01:35,330 --> 00:01:38,000
So as far as the programmer
is concerned, the programmer

28
00:01:38,000 --> 00:01:41,970
worries about two things, correctness
and the performance of their program.

29
00:01:41,970 --> 00:01:44,160
They want their program
to be correct and

30
00:01:44,160 --> 00:01:47,490
do as well as possible
on the available cores.

31
00:01:47,490 --> 00:01:50,770
In message passing,
getting correctness is difficult,

32
00:01:50,770 --> 00:01:53,720
because you have to orchestrate
everything perfectly and you can get

33
00:01:53,720 --> 00:01:58,450
all sorts of data log issues, and
wrong distribution, etc., etc.

34
00:01:59,660 --> 00:02:03,820
In shared memory,
correctness is also not easy to get, but

35
00:02:03,820 --> 00:02:06,940
it's less difficult than
with message passing.

36
00:02:06,940 --> 00:02:11,070
Performance with message passing
is difficult to get, but

37
00:02:11,070 --> 00:02:14,930
once you get correctness,
performance is not far away.

38
00:02:14,930 --> 00:02:19,770
In contrast, shared memory,
performance is very difficult to get and

39
00:02:19,770 --> 00:02:23,250
the difference between correctness and
performance can be large.

40
00:02:23,250 --> 00:02:26,875
So it might be relatively easy to
get a program to be correct, but

41
00:02:26,875 --> 00:02:29,920
it's performance might not
be anywhere near good, and

42
00:02:29,920 --> 00:02:35,090
then it might take a lot more effort
to get it to also perform well.

43
00:02:35,090 --> 00:02:38,670
So with message passing somehow,
by solving the correctness problem,

44
00:02:38,670 --> 00:02:41,430
you are also solving a large
part of the performance problem.

45
00:02:41,430 --> 00:02:46,210
In shared memory, it's easier to
get things right, but the effort

46
00:02:46,210 --> 00:02:50,250
to get it to perform well might be
even more than with message passing.
