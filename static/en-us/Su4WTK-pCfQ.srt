1
00:00:00,320 --> 00:00:05,380
So we looked at that program,
what it does, what input it takes,

2
00:00:05,380 --> 00:00:10,600
how does it execute on the different
values for the input that we provide it.

3
00:00:10,600 --> 00:00:15,978
But to really understand how we actually
take this buffer overflow to its

4
00:00:15,978 --> 00:00:20,570
logical conclusion, which is actually
getting control of this program.

5
00:00:20,570 --> 00:00:26,615
We need to actually look carefully
at how data is stored on the stack.

6
00:00:26,615 --> 00:00:28,315
What is the layout of the stack?

7
00:00:28,315 --> 00:00:33,655
So remember I told you the stack grows
from high addresses to low addresses.

8
00:00:33,655 --> 00:00:37,375
So we are at some address, and
as you put more stuff on it,

9
00:00:37,375 --> 00:00:38,735
we are going to lower addresses.

10
00:00:38,735 --> 00:00:42,400
So as we go down the stack,
as we push things on to the stack,

11
00:00:42,400 --> 00:00:46,610
we get to lower and lower addresses and
that's what I meant by the stack

12
00:00:46,610 --> 00:00:51,010
growing from high addresses to
low addresses or growing up few.

13
00:00:51,010 --> 00:00:54,520
Think of your address base starting
at zero and going to the max.

14
00:00:54,520 --> 00:00:57,410
Then the stack growth is from
higher to lower addresses.

15
00:00:57,410 --> 00:00:59,480
And lower addresses are higher or up.

16
00:00:59,480 --> 00:01:02,620
So that's why we're saying
it grows in that direction.

17
00:01:02,620 --> 00:01:04,959
So when you make the function call,

18
00:01:04,959 --> 00:01:09,010
we're going to push the arguments argcr,
with the arguments.

19
00:01:09,010 --> 00:01:12,180
So we are assuming this is
what the compiler does.

20
00:01:12,180 --> 00:01:14,750
You make a function call in
your programming language.

21
00:01:14,750 --> 00:01:16,210
First thing it does it's going to push.

22
00:01:16,210 --> 00:01:17,960
So wherever stack pointer is pointing,

23
00:01:17,960 --> 00:01:20,415
we push this argument
that takes 4 bytes.

24
00:01:20,415 --> 00:01:25,710
So the place it points to the address
where the stack pointer is pointing is

25
00:01:25,710 --> 00:01:28,250
address 4 addr- 4.

26
00:01:28,250 --> 00:01:33,250
Then we push argv and at this point
we have to push the return address.

27
00:01:33,250 --> 00:01:37,310
Remember we have to know where
the return address is, so

28
00:01:37,310 --> 00:01:41,780
when we finish executing this function
we can go back to where we came from.

29
00:01:41,780 --> 00:01:43,660
You then push the return address, so

30
00:01:43,660 --> 00:01:46,160
the compiler generates code
to push the arguments.

31
00:01:46,160 --> 00:01:49,500
And then you make a function call or
you make a call.

32
00:01:49,500 --> 00:01:52,290
And typically the hardware
pushes the return address onto

33
00:01:52,290 --> 00:01:54,330
the stack wherever the stack
pointer is pointing.

34
00:01:54,330 --> 00:01:59,134
That goes and then we get to the stack
pointer and we decrement the stack

35
00:01:59,134 --> 00:02:04,100
pointer by 4 because the return
address [INAUDIBLE] takes 4 bytes.

36
00:02:04,100 --> 00:02:06,110
So now we're going to allocate space for

37
00:02:06,110 --> 00:02:08,949
the local variables,
allowlogin takes four bytes.

38
00:02:08,949 --> 00:02:12,990
12 bytes strings take 12
bytes that we have here.

39
00:02:12,990 --> 00:02:18,146
So each of password string and
target password we have 12 bytes each.

40
00:02:18,146 --> 00:02:23,954
So, you made the call, if the stack
pointer was pointing to Addr,

41
00:02:23,954 --> 00:02:29,453
then I can say, well the address
of allowed login is Addr-12

42
00:02:29,453 --> 00:02:35,110
because 4 for argc, 4 for
argv, 4 for return address.

43
00:02:35,110 --> 00:02:37,270
Already occupied these 12 locations, so

44
00:02:37,270 --> 00:02:39,720
the stack pointer has
to move beyond those.

45
00:02:39,720 --> 00:02:43,270
And it does that by
moving 12 bytes up and

46
00:02:43,270 --> 00:02:47,310
as it goes up to lower addresses,
we're doing the subtraction that I said.

47
00:02:47,310 --> 00:02:51,260
So, now if you look here there's
a couple of interesting things.

48
00:02:51,260 --> 00:02:53,040
This is password string isn't it?

49
00:02:53,040 --> 00:02:56,330
It's allocated space starting here.

50
00:02:56,330 --> 00:02:59,710
If it's less than 12 bytes,
the input we provide,

51
00:02:59,710 --> 00:03:03,580
it's going to stay within these 12
bytes that we allocated for it.

52
00:03:03,580 --> 00:03:07,940
So this is the starting address, so
if the variable is that address,

53
00:03:07,940 --> 00:03:12,330
address +1, +2,
it goes like that every byte you store.

54
00:03:12,330 --> 00:03:14,800
So these are the higher
addresses we were talking about.

55
00:03:14,800 --> 00:03:18,630
So, password strings start here,
if it's less than 12 bytes,

56
00:03:18,630 --> 00:03:21,520
it's only going to go
into these 12 bytes.

57
00:03:21,520 --> 00:03:23,740
What happens if it's
longer than 12 bytes?

58
00:03:23,740 --> 00:03:26,340
Some of the examples that we
did when we set it to 16 or

59
00:03:26,340 --> 00:03:29,390
something like that,
it's going to exhaust these 12 bytes.

60
00:03:29,390 --> 00:03:31,910
It's going to overwrite
the allowlogin and

61
00:03:31,910 --> 00:03:34,060
if it's more than 16
what is it going to do?

62
00:03:34,060 --> 00:03:36,220
It's going to overwrite
the return address.

63
00:03:37,260 --> 00:03:40,240
So the way these things
are let out on the stack,

64
00:03:40,240 --> 00:03:44,730
remember our password string
variable address starts here.

65
00:03:44,730 --> 00:03:48,960
And as we provide some number of
characters it starts storing them.

66
00:03:48,960 --> 00:03:50,640
If they're less than 12 we're good.

67
00:03:50,640 --> 00:03:53,990
If they're more than 12 we're first
going to overwrite allow login.

68
00:03:53,990 --> 00:03:55,870
Then we're going to
overwrite return address.

69
00:03:55,870 --> 00:03:59,610
Then we're going to corrupt the argument
values and things like that.

70
00:03:59,610 --> 00:04:03,540
Now we can say well,
what if I give more than 12 bytes.

71
00:04:03,540 --> 00:04:06,910
We earlier said 16 or
ending whatever it is.

72
00:04:06,910 --> 00:04:10,750
We know that if it's more than 12,
it's going to all flow into this.

73
00:04:10,750 --> 00:04:13,060
This is what it is going to all flow as.
