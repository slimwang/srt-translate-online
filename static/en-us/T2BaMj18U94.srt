1
00:00:00,510 --> 00:00:04,110
Before we get into any crazy
multi-project Android builds,

2
00:00:04,110 --> 00:00:08,200
we should talk about how to figure out
what's going on when your build fails.

3
00:00:08,200 --> 00:00:11,060
While it's technically possible
to attach a debugger to Gradle

4
00:00:11,060 --> 00:00:12,590
if you really know what you're doing,

5
00:00:12,590 --> 00:00:16,219
the first line of defense should
really be thorough logging.

6
00:00:16,219 --> 00:00:19,900
Gradle logs messages
in one of six levels.

7
00:00:19,900 --> 00:00:23,080
Debug spews a ton of, only occasionally,

8
00:00:23,080 --> 00:00:26,100
useful information on
Gradle's internal workings.

9
00:00:26,100 --> 00:00:29,830
Info gives much better insight
into what Gradle is up to.

10
00:00:29,830 --> 00:00:32,720
It details how long each
task takes to complete, and

11
00:00:32,720 --> 00:00:36,200
other high level events,
like when Gradle connects to its Daemon.

12
00:00:36,200 --> 00:00:40,380
Lifecycle logs what tasks are currently
being run, as well as the total time

13
00:00:40,380 --> 00:00:43,250
the build took, and whether or
not it was successful.

14
00:00:43,250 --> 00:00:46,060
Quiet is the level for log messages,
that should be this way

15
00:00:46,060 --> 00:00:50,500
even if the user has told Gradle to be
quiet, but there aren't any errors.

16
00:00:50,500 --> 00:00:53,220
Also, any print line statements
in the build scripts

17
00:00:53,220 --> 00:00:55,810
are actually redirected
to the quiet log level.

18
00:00:55,810 --> 00:00:58,990
Finally, error is exactly
what it sounds like.

19
00:00:58,990 --> 00:01:03,400
By default, Gradle displays all logs
at the lifecycle level and above.

20
00:01:03,400 --> 00:01:06,640
Running with the -d flag,
gives all logs at the debug level or

21
00:01:06,640 --> 00:01:08,319
above, which is all of them.

22
00:01:08,319 --> 00:01:12,020
The -i flag, gives all logs
at the info level and above.

23
00:01:12,020 --> 00:01:16,000
And finally,
-q gives only quiet and error logs.

24
00:01:16,000 --> 00:01:18,820
Remember again that println
statements are equivalent to

25
00:01:18,820 --> 00:01:20,130
the quiet logging level.

26
00:01:20,130 --> 00:01:23,140
This means that even if
the user uses the -q option,

27
00:01:23,140 --> 00:01:24,790
println statements will
still appear in the log.

28
00:01:24,790 --> 00:01:28,080
When the Gradle build
script fails to complete,

29
00:01:28,080 --> 00:01:30,530
it doesn't display
the stacktrace by default.

30
00:01:30,530 --> 00:01:31,970
If you want to see the stacktrace,

31
00:01:31,970 --> 00:01:37,600
gist of your code, use the stacktrace
option or the -s flag.

32
00:01:37,600 --> 00:01:40,820
To see the entire stacktrace,
including Gradle core code,

33
00:01:40,820 --> 00:01:44,910
you can use the -full-stacktrace option,
or a capital S.

34
00:01:44,910 --> 00:01:47,960
Again, make sure the difference
between these two is that

35
00:01:47,960 --> 00:01:51,700
the partial stack trace is a lowercase
sand the full stack trace uppercase S.
