1
00:00:00,040 --> 00:00:02,520
The second model is
called the Hosted model.

2
00:00:02,520 --> 00:00:07,252
In this model, at the lowest level,
there is a full fledged host operating

3
00:00:07,252 --> 00:00:10,568
system that manages all of
the hardware resources.

4
00:00:10,568 --> 00:00:16,030
The Host OS integrates a virtual machine
monitor module, that's responsible for

5
00:00:16,030 --> 00:00:20,947
providing the virtual machines with
their virtual platform interface and

6
00:00:20,947 --> 00:00:25,020
for managing all of the context
switching scheduling, etc.

7
00:00:25,020 --> 00:00:28,519
As necessary,
this VMM module will invoke drivers or

8
00:00:28,519 --> 00:00:32,340
other components of the host
operating system as needed.

9
00:00:32,340 --> 00:00:36,604
This one benefit of this model is that
it can leverage all of the services and

10
00:00:36,604 --> 00:00:40,679
mechanisms that are already developed
for the host operating system.

11
00:00:40,679 --> 00:00:44,169
Much less functionality
needs to be redeveloped for

12
00:00:44,169 --> 00:00:46,240
the VMM Module in this manner.

13
00:00:46,240 --> 00:00:50,724
Also, note that on this host operating
system, you may run Guest VM's

14
00:00:50,724 --> 00:00:55,660
through the Virtual Machine Module, but
you can also run Native Applications

15
00:00:55,660 --> 00:00:59,640
directly on the host operating
system as you would in general.

16
00:00:59,640 --> 00:01:05,438
One example of the Hosted model is KVM,
which stands for kernel-based VM.

17
00:01:05,438 --> 00:01:08,319
That's based on the Linux
operating system.

18
00:01:08,319 --> 00:01:13,484
The Linux host provides all aspects of
the physical hardware management and

19
00:01:13,484 --> 00:01:18,660
just like any regular OS, it can run
directly regular Linux applications.

20
00:01:18,660 --> 00:01:23,924
The support for running Guest Virtual
Machines is through a combination of

21
00:01:23,924 --> 00:01:29,620
our kernel module, that's the KVM module
and a hardware emulator called QEMU.

22
00:01:29,620 --> 00:01:33,659
We said that the goal of virtualization
is to provide identical hardware.

23
00:01:33,659 --> 00:01:37,459
So here,
this emulator is used as a virtualizer.

24
00:01:37,459 --> 00:01:42,535
It really matches the underlying
hardware resources,

25
00:01:42,535 --> 00:01:44,700
the X86 Intel or AMD.

26
00:01:44,700 --> 00:01:49,675
The support for running SVMs in
KVM is through a combination

27
00:01:49,675 --> 00:01:54,260
of a kernel module KVM and
a hardware emulator, QEMU.

28
00:01:54,260 --> 00:01:59,686
We said that virtualization the intent
is to provide identical hardware, so

29
00:01:59,686 --> 00:02:04,699
this QEMU emulator isn't emulating
some bizarre hardware platform.

30
00:02:04,699 --> 00:02:09,300
Instead, it's used in what's
called a virtualizer mode.

31
00:02:09,300 --> 00:02:13,740
So the resources that are available
to the Guest VM are actually

32
00:02:13,740 --> 00:02:17,931
the exact hardware resources
from the physical platform,

33
00:02:17,931 --> 00:02:22,542
except that this virtualizer
intervenes during certain types of

34
00:02:22,542 --> 00:02:26,398
critical operations or
specific instructions or re,

35
00:02:26,398 --> 00:02:30,879
relative to pass control to
the KVM Module and the Host OS.

36
00:02:30,879 --> 00:02:34,843
One example of that would be
any aspect of IO management,

37
00:02:34,843 --> 00:02:38,973
because all of the support for
devices, the device drivers

38
00:02:38,973 --> 00:02:43,280
are handled as part of the Linux
operating system the Host OS.

39
00:02:43,280 --> 00:02:44,570
A huge benefit for

40
00:02:44,570 --> 00:02:49,644
KVM has been that it's able to really
leverage all of the advances that

41
00:02:49,644 --> 00:02:55,580
are continuously being contributed to
the large Linux open-source community.

42
00:02:55,580 --> 00:03:00,099
Because of this KVM can quickly
adapt to new hardware features,

43
00:03:00,099 --> 00:03:03,959
new devices, new security,
bugs or similar things.

44
00:03:03,959 --> 00:03:08,883
In fact, the KVM Module was originally
developed as a Linux module in order to

45
00:03:08,883 --> 00:03:11,915
allow regular use of Linux
applications to take

46
00:03:11,915 --> 00:03:14,492
advantage of some of the virtualization

47
00:03:14,492 --> 00:03:18,840
related hardware that started
appearing in commodity platforms.

48
00:03:18,840 --> 00:03:23,784
All of the sudden, users realized
that this can be useful to actually

49
00:03:23,784 --> 00:03:28,059
run guest operating system and
regular virtual machines.

50
00:03:28,059 --> 00:03:32,976
And so three months later, KVM was an
actual virtualization solution that was

51
00:03:32,976 --> 00:03:35,370
part of the mainstream Linux kernel.
