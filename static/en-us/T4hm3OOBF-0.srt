1
00:00:00,025 --> 00:00:04,370
3JS tends to create what are called canonical objects. This is where you create

2
00:00:04,370 --> 00:00:07,698
an object centered around the origin and then apply a series of transforms to

3
00:00:07,698 --> 00:00:10,970
move it into position. This is fine so far as it goes, but is sometimes awkward

4
00:00:10,970 --> 00:00:15,064
when you want to perform particular kinds of modeling. For example, if I want to

5
00:00:15,064 --> 00:00:18,480
make a model where I want chains of cones to build a tree, I might rather say

6
00:00:18,480 --> 00:00:21,950
where I want each end of the cone to be located. This sort of modelling where I

7
00:00:21,950 --> 00:00:25,346
run a program to generate an object is called procedural model. I want to orient

8
00:00:25,346 --> 00:00:29,100
the cone, given the top and bottom locations. That'll be your task. In the

9
00:00:29,100 --> 00:00:32,908
cullen routine the top and bottom variables are vector three positions given the

10
00:00:32,908 --> 00:00:36,198
ends of the cone. You'll see documentation for the other variables in the code

11
00:00:36,198 --> 00:00:39,490
itself. Your task is to implement the internals of this method. Actually, I

12
00:00:39,490 --> 00:00:43,270
decided to simplify a major piece for you. Mainly because it has a special case

13
00:00:43,270 --> 00:00:46,820
having to do with a cross product. I implemented this function myself. So your

14
00:00:46,820 --> 00:00:50,120
job is to create the proper length cylinder and feed this method its axis

15
00:00:50,120 --> 00:00:53,156
direction and center. When you get the answer right, you'll see this on your

16
00:00:53,156 --> 00:00:56,298
screen. I gave a lot of test cones here, and in fact, a few of these revealed

17
00:00:56,298 --> 00:00:59,610
some bugs in my own code when I was writing it. If you ever design a component

18
00:00:59,610 --> 00:01:02,660
like this, they will be used by others. I highly recommend that you try to

19
00:01:02,660 --> 00:01:05,263
create as many different types of test cases as you can.
