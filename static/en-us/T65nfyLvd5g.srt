1
00:00:00,340 --> 00:00:06,750
So suppose that we have a smarter tester, a tester which can detect when any

2
00:00:06,750 --> 00:00:12,090
state is identical to a previously visited state. In that case the tester may

3
00:00:12,090 --> 00:00:17,860
decide that this, this, and this state are identical to the initial state and

4
00:00:17,860 --> 00:00:22,500
therefore dismiss them. The tester also dismisses this state, as usual,

5
00:00:22,500 --> 00:00:26,970
because of the problem specification that one cannot have more prisoners than

6
00:00:26,970 --> 00:00:32,009
guards on any one bank. This leaves the following state of affairs.

7
00:00:32,009 --> 00:00:36,030
Note also that this particular state has no successor states,

8
00:00:36,030 --> 00:00:40,180
all successor states of this have been ruled out. Therefore this particular part

9
00:00:40,180 --> 00:00:44,290
clearly is not a good path to get to the gold state. If we notice also,

10
00:00:44,290 --> 00:00:48,860
that these two states are identical, then we can merge them. If we do so,

11
00:00:48,860 --> 00:00:53,460
then we get exactly the same kind of configuration of states that we had when we

12
00:00:53,460 --> 00:00:56,750
were dealing with the semantic network in the previous lesson. There is

13
00:00:56,750 --> 00:01:01,710
something to note here. We had this semantic network in the last lesson, but

14
00:01:01,710 --> 00:01:06,620
the knowledge representation of semantics network, while very useful,

15
00:01:06,620 --> 00:01:09,860
by itself and of itself doesn't solve any problems.

16
00:01:09,860 --> 00:01:14,270
You need a problem solving method that uses knowledge afforded by the knowledge

17
00:01:14,270 --> 00:01:19,560
representation to actually do the problem solving. Generating test is one

18
00:01:19,560 --> 00:01:23,810
of those problem solving methods. In general, when we do problem solving or

19
00:01:23,810 --> 00:01:27,470
reasoning, then there is a coupling between a knowledge representation and

20
00:01:27,470 --> 00:01:31,740
a problem solving method, like semantic networks and generating test.

21
00:01:31,740 --> 00:01:37,220
What we did so far had a dumb generator, but we made the testers smarter.

22
00:01:37,220 --> 00:01:40,179
The testers started looking for what states had been repeated.

23
00:01:41,800 --> 00:01:46,290
Alternatively we can shift the balance of responsibility between them and

24
00:01:46,290 --> 00:01:50,410
make the generator smarter. Let's see how that might happen.
