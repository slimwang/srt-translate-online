1
00:00:00,690 --> 00:00:07,560
We can do this by modifying the list<u>component</u>sizes
algorithm from the previous example. Call

2
00:00:07,560 --> 00:00:13,639
the algorithm check connection, and it takes
a graph, but it also takes v1 and v2.It's

3
00:00:13,639 --> 00:00:17,620
going to do something similar to before. It's
going to start off with the assumption that

4
00:00:17,620 --> 00:00:24,900
none of the nodes have been marked so far
as reachable. Then we're going to call marked

5
00:00:24,900 --> 00:00:31,440
component on that graph, and the node that
we're going to start marking from is v1. And

6
00:00:31,440 --> 00:00:35,149
what that's going to do when this returns--it's
going to return a number, but we're just going

7
00:00:35,149 --> 00:00:41,089
to ignore it-- it's going to go through starting
at v1 and mark, like basically touch, every

8
00:00:41,089 --> 00:00:46,289
node that can be reached from v1. And we want
to find out whether or not there's a connection

9
00:00:46,289 --> 00:00:55,109
to v2, and that's really easy at this point.
The answer is v2 in. So what this does is

10
00:00:55,109 --> 00:01:00,370
it checks whether the node v2 that we've been
given as input was one of the nodes that got

11
00:01:00,370 --> 00:01:06,160
marked when we were spreading things out from
v1. So it starts at v1, spreads things through

12
00:01:06,160 --> 00:01:15,390
the graph like some kind of an infection or
a good idea, and when that's all through,

13
00:01:15,390 --> 00:01:19,070
all we have to do is look to see whether v2
was one of the things that got infected in

14
00:01:19,070 --> 00:01:23,220
the spread. So according to this, a and g
are connected. Let's take a look back at the

15
00:01:23,220 --> 00:01:26,670
graph. g is reachable from a, but that's not
so exciting to think about because they were

16
00:01:26,670 --> 00:01:32,980
pretty much connected directly. Let's try
a more interesting one, say h and b. It realizes

17
00:01:32,980 --> 00:01:37,100
that h and b are in fact connected, and that's
more interesting because it requires multiple

18
00:01:37,100 --> 00:01:41,770
hops to get from one to the other. And then
finally, we can do a and b. We know that they're

19
00:01:41,770 --> 00:01:45,450
in different components because remember,
there was component a with 4 nodes and component

20
00:01:45,450 --> 00:01:50,590
b with 4 nodes, but let's make sure that the
program can figure that out. Yes, indeed.

21
00:01:50,590 --> 00:01:54,820
So when it spread things out from a and reached
everywhere it could reach, b was not among

22
00:01:54,820 --> 99:59:59,999
the visited.
