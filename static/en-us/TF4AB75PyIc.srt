1
00:00:00,410 --> 00:00:03,090
In the previous video,
we observed two oddities.

2
00:00:03,090 --> 00:00:05,122
When we first created
our service worker,

3
00:00:05,122 --> 00:00:07,048
it took two refreshes to see the result.

4
00:00:07,048 --> 00:00:09,696
And secondly,
when we changed the service worker,

5
00:00:09,696 --> 00:00:11,693
we didn't seem to pick up that change.

6
00:00:11,693 --> 00:00:15,231
The life cycle of service worker
is one of the most complex parts.

7
00:00:15,231 --> 00:00:18,640
Once you get your head around this bit,
the rest is easy.

8
00:00:18,640 --> 00:00:20,507
So we had our page open all ready,

9
00:00:20,507 --> 00:00:23,261
then we added code to
register a service worker.

10
00:00:23,261 --> 00:00:24,929
Then we hit refresh.

11
00:00:24,929 --> 00:00:29,007
Hitting refresh spawned a new Window
client, then the request went off to

12
00:00:29,007 --> 00:00:33,164
the network, we got a response back,
and the old Window client went away.

13
00:00:33,164 --> 00:00:36,254
It might not seem like there's
an overlap between the old page and

14
00:00:36,254 --> 00:00:39,090
the new page when you hit refresh,
but there is.

15
00:00:39,090 --> 00:00:42,200
For example, if the response came back
indicating that the browser should

16
00:00:42,200 --> 00:00:45,500
save the resource to disk
Vajra download dialog,

17
00:00:45,500 --> 00:00:47,210
then the old window would
have stayed around.

18
00:00:48,240 --> 00:00:51,501
But in this case, the response was
a page, so we got rid of the old one.

19
00:00:51,501 --> 00:00:54,819
From our page requests went out for
our CSS images, but

20
00:00:54,819 --> 00:00:59,019
also a shiny new JavaScript,
which registered the service worker.

21
00:00:59,019 --> 00:01:03,068
We didn't see request log from this page
because the Service Worker only takes

22
00:01:03,068 --> 00:01:05,337
control of pages when they're loaded,
and

23
00:01:05,337 --> 00:01:08,299
this page was loaded before
the service worker existed.

24
00:01:08,299 --> 00:01:11,638
That means any additional requests
this page makes will bypass

25
00:01:11,638 --> 00:01:12,777
the Service Worker.

26
00:01:12,777 --> 00:01:16,050
But then we refresh the page
creating a new window client and

27
00:01:16,050 --> 00:01:20,470
because our Service Worker was up and
running, it took control of it.

28
00:01:20,470 --> 00:01:24,207
Therefore, the request went to
the Service Worker as did all

29
00:01:24,207 --> 00:01:25,604
of the subresources.

30
00:01:25,604 --> 00:01:29,131
So that explains why it took two
refreshes to see logged requests.

31
00:01:29,131 --> 00:01:32,142
But what about when we change
the thing we were logging yet

32
00:01:32,142 --> 00:01:35,227
still saw requests being logged
,which was our old code.

33
00:01:35,227 --> 00:01:38,007
If a page loads Vajra Service Worker,
it will check for

34
00:01:38,007 --> 00:01:40,612
an update to the service
worker in the background.

35
00:01:40,612 --> 00:01:44,759
And if it finds it has changed as in
the resources and byte identical,

36
00:01:44,759 --> 00:01:46,560
it becomes the next version.

37
00:01:46,560 --> 00:01:49,023
But it doesn't take control, it waits.

38
00:01:49,023 --> 00:01:53,418
It won't take over until all pages
using the current version are gone.

39
00:01:53,418 --> 00:01:57,090
This ensures thereâ€™s only one version
of your site running a given time like

40
00:01:57,090 --> 00:01:57,760
native apps.

41
00:01:58,900 --> 00:02:02,330
Unfortunately, a refresh doesn't
let the new version take over.

42
00:02:02,330 --> 00:02:05,600
This is due to the overlap between
Window clients we saw earlier.

43
00:02:05,600 --> 00:02:08,330
There isn't actually a moment when
the current active service worker

44
00:02:08,330 --> 00:02:09,780
isn't in use.

45
00:02:09,780 --> 00:02:12,286
For that to happen,
this page needs to close or

46
00:02:12,286 --> 00:02:15,840
navigate to a page that isn't
controlled by the Service Worker.

47
00:02:15,840 --> 00:02:19,024
When it does that,
the new service worker takes over and

48
00:02:19,024 --> 00:02:21,679
future page loads will
go through the new one.

49
00:02:21,679 --> 00:02:23,338
Let's put this knowledge to practice.

50
00:02:23,338 --> 00:02:28,340
So as before if I refresh the page, I'm
still getting these old console logs.

51
00:02:28,340 --> 00:02:32,376
But if I navigate away then click back,
the logs so difference.

52
00:02:32,376 --> 00:02:34,372
The new service workers running.

53
00:02:34,372 --> 00:02:37,290
This update process may sound
complicated at first but

54
00:02:37,290 --> 00:02:40,979
it's actually the same update
process browsers such as Chrome use.

55
00:02:40,979 --> 00:02:43,311
Chrome will download
the update in the background,

56
00:02:43,311 --> 00:02:46,235
but it won't take over until
the browser closes and opens again.

57
00:02:46,235 --> 00:02:49,550
It notifies the user that there's
an update ready by changing the color of

58
00:02:49,550 --> 00:02:50,088
this icon.

59
00:02:50,088 --> 00:02:53,529
Later in the course we'll also
notify users of updates to Witter.

60
00:02:53,529 --> 00:02:56,870
When the browser refetches a service
worker looking for updates,

61
00:02:56,870 --> 00:03:00,279
it will go through the browser cache
as pretty much all requests do.

62
00:03:00,279 --> 00:03:04,310
Because of this I strongly recommend
keeping a cache time on your service

63
00:03:04,310 --> 00:03:05,242
workers short.

64
00:03:05,242 --> 00:03:09,345
In fact, I go for cache time of zero
on all my service worker projects.

65
00:03:09,345 --> 00:03:11,190
And that's what Witter uses as well.

66
00:03:11,190 --> 00:03:15,654
As a safety precaution, if you set your
service worker script to cache for

67
00:03:15,654 --> 00:03:20,629
more than a day, the browser will ignore
that and just set the cache to 24 hours.

68
00:03:20,629 --> 00:03:23,609
That doesn't mean your service worker
will stop working after 24 hours.

69
00:03:23,609 --> 00:03:26,317
It just means that update
checks will bypass

70
00:03:26,317 --> 00:03:30,206
the browser cache if the service
worker it has is over a day old.

71
00:03:30,206 --> 00:03:33,040
Okay that's the life cycle
theory out of the way.

72
00:03:33,040 --> 00:03:35,554
In the next chapter,
we're going to look at some deft tools

73
00:03:35,554 --> 00:03:37,684
that show you what state
the Service Worker is in.
