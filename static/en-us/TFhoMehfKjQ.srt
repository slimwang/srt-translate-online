1
00:00:00,000 --> 00:00:05,000
[Narrator] Here's the answer: we can define a procedure named replace spy.

2
00:00:05,000 --> 00:00:07,000
It takes 1 parameter as its input.

3
00:00:07,000 --> 00:00:10,000
I'll call the parameter P.

4
00:00:10,000 --> 00:00:14,000
We could call it spy and that might be a more natural name for it here,

5
00:00:14,000 --> 00:00:19,000
but to avoid confusion with the variable spy, we're using in the example, I'll call it P.

6
00:00:19,000 --> 00:00:22,000
For the body of replace spy what we want to do is change the value

7
00:00:22,000 --> 00:00:25,000
in position 2 of the value past it.

8
00:00:25,000 --> 00:00:28,000
So, we can do that within an assignment statement.

9
00:00:28,000 --> 00:00:32,000
On the left side we're selecting the cell, and we're replacing it

10
00:00:32,000 --> 00:00:37,000
with a value that we get from the old value in that position plus 1.

11
00:00:37,000 --> 00:00:41,000
This has the behavior that we want, and to have a better understanding why

12
00:00:41,000 --> 00:00:46,000
let's see what happens when we pass a value to our procedure.

13
00:00:46,000 --> 00:00:48,000
Here's what we had before the call.

14
00:00:48,000 --> 00:00:51,000
We've initialized the variable spy to hold the list

15
00:00:51,000 --> 00:00:55,000
containing 3 elements that are numbers 0, 0, 7.

16
00:00:55,000 --> 00:00:59,000
Then we make the call to replace spy, passing in spy.

17
00:00:59,000 --> 00:01:04,000
What happens when we call a procedure the name of the variable in the procedure

18
00:01:04,000 --> 00:01:07,000
now refers to the object that's passed in.

19
00:01:07,000 --> 00:01:12,000
So, now the value of P of the parameter here refers to that object.

20
00:01:12,000 --> 00:01:15,000
Then we do the assignment.

21
00:01:15,000 --> 00:01:20,000
We replace the value in position 2 of P with it's previous value plus 1,

22
00:01:20,000 --> 00:01:23,000
so that changes this value to 8.

23
00:01:23,000 --> 00:01:28,000
The parameter P and the variable spy both refer to the same object,

24
00:01:28,000 --> 00:01:31,000
so that also changes the value of spy.

25
00:01:31,000 --> 00:01:33,000
Not that there's no return statement here.

26
00:01:33,000 --> 00:01:35,000
We don't need to return a new value.

27
00:01:35,000 --> 00:01:39,000
We've modified the value of the list that was passed in,

28
00:01:39,000 --> 00:01:44,000
and I want to emphasize that this is different from what's happened in other procedures.

29
00:01:44,000 --> 00:01:50,000
If you remember in an earlier exercise you defined the procedure INC.

30
00:01:50,000 --> 00:01:55,000
It takes 1 input, we'll call it N, and it adds 1 to that.

31
00:01:55,000 --> 00:01:58,000
If we remove the return statement from INC,

32
00:01:58,000 --> 00:02:00,000
it doesn't change the value that's passed in.

33
00:02:00,000 --> 00:02:03,000
It does nothing, and here's why:

34
00:02:03,000 --> 00:02:08,000
suppose we had code like this, we'll introduce a variable A,

35
00:02:08,000 --> 00:02:14,000
give it the value 3; we'll call INC on A.

36
00:02:14,000 --> 00:02:22,000
What happens here--well, the variable A that name refers to the value 3.

37
00:02:22,000 --> 00:02:25,000
When we passed that to INC--well, the same thing happens

38
00:02:25,000 --> 00:02:32,000
as happened when we passed the mutable list as parameter P to replace by.

39
00:02:32,000 --> 00:02:37,000
The name N now refers to the same value as A referred to,

40
00:02:37,000 --> 00:02:40,000
but we can't mutate that value.

41
00:02:40,000 --> 00:02:43,000
What happens inside INC is an assignment statement.

42
00:02:43,000 --> 00:02:47,000
We assign to N the value N +1,

43
00:02:47,000 --> 00:02:50,000
so that the changes the value N refers to.

44
00:02:50,000 --> 00:02:58,000
Now N refers to a value 4, but that doesn't change the value A refers to.

45
00:02:58,000 --> 00:03:00,000
A still has the value 3.

46
00:03:00,000 --> 00:03:04,000
So, we can see with numbers we can't mutate the value of a number.

47
00:03:04,000 --> 00:03:10,000
If we could everywhere the value 3 existed before--well, now it would mean 4.

48
00:03:10,000 --> 00:03:13,000
That would be pretty confusing.
