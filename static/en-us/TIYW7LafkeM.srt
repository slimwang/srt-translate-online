1
00:00:00,000 --> 00:00:04,000
Industrial software is often so big that it doesn't all fit on one page,

2
00:00:04,000 --> 00:00:08,000
so people have to break it up into chunks just like a book is broken up into chapters

3
00:00:08,000 --> 00:00:12,000
or the body of human knowledge is broken up into many books.

4
00:00:12,000 --> 00:00:17,000
In computer science, a module is a repository or a library of code--

5
00:00:17,000 --> 00:00:19,000
functions and data that do useful things.

6
00:00:19,000 --> 00:00:22,000
In Python, import brings in a module.

7
00:00:22,000 --> 00:00:25,000
It turns out that there is already a bunch of functions

8
00:00:25,000 --> 00:00:29,000
related to regular expressions. We won't have to reinvent the wheel.

9
00:00:29,000 --> 00:00:35,000
We can just import them into our own Python programs and get their benefits for free.

10
00:00:35,000 --> 00:00:41,000
Python's regular expression module is called, imaginatively enough, "re"--regular expressions.

11
00:00:41,000 --> 00:00:45,000
At the beginning of a Python program, just write "import space re"

12
00:00:45,000 --> 00:00:48,000
and then you'll have access to all of the regular expression functions.

13
00:00:48,000 --> 00:00:50,000
I'm going to show them to you in just a minute.

14
00:00:50,000 --> 00:00:54,000
If we're going to write down regular expressions in Python, we need to know what they look like.

15
00:00:54,000 --> 00:00:57,000
Python regular expressions look just like strings.

16
00:00:57,000 --> 00:01:01,000
They start with double quotes or single quotes, and they have contents,

17
00:01:01,000 --> 00:01:05,000
except that to separate regular expressions from strings

18
00:01:05,000 --> 00:01:10,000
regular expressions begin with a lowercase "r" outside of the double quotes.

19
00:01:10,000 --> 00:01:16,000
Up here this is a--zero, one, two, three, four--a five-character string 0 through 9.

20
00:01:16,000 --> 00:01:19,000
This one down here that begins with an "r" is a regular expression

21
00:01:19,000 --> 00:01:23,000
that matches 10 different one-letter strings.

22
00:01:23,000 --> 00:01:26,000
Writing regular expressions is a creative process.

23
00:01:26,000 --> 00:01:28,000
You the programmer have to do it.

24
00:01:28,000 --> 00:01:32,000
I'm using "creative" here in the same way that people often describe mathematics as elegant.

25
00:01:32,000 --> 00:01:36,000
Just as there are many different equations that could get you the number 4--

26
00:01:36,000 --> 00:01:41,000
2 plus 2, 1 plus 3, 8 divided by 2, absolute value of the square root of 16--

27
00:01:41,000 --> 00:01:45,000
in fact, and infinite number--there are often an infinite number of regular expressions

28
00:01:45,000 --> 00:01:47,000
that could serve a purpose.

29
00:01:47,000 --> 00:01:50,000
Picking the right one, the small one, the simple one, the concise one, the elegant one,

30
00:01:50,000 --> 00:01:54,000
requires creativity. It's a skill. It's something you'll learn in this class.

31
00:01:54,000 --> 00:01:57,000
Let's say you've written a regular expression, though--like this one.

32
00:01:57,000 --> 00:01:59,000
Now we need to use it.

33
00:01:59,000 --> 00:02:03,000
One of the most common functions involving regular expressions is findall.

34
00:02:03,000 --> 00:02:10,000
It takes a regular expression and a string and returns a list of all of the substrings

35
00:02:10,000 --> 00:02:12,000
that match that regular expression.

36
00:02:12,000 --> 00:02:17,000
Here if we're looking for single letter strings that are between 0 and 9,

37
00:02:17,000 --> 00:02:21,000
the 1 matches, the plus does not, the 2 matches, the equals does not,

38
00:02:21,000 --> 00:02:24,000
the equals does not, and the 3 matches.

39
00:02:24,000 --> 00:02:27,000
The return value of re.findall

40
00:02:27,000 --> 00:02:32,000
is a list--1, 2, 3--of all of the substrings that match the regular expression.

41
00:02:32,000 --> 00:02:34,000
The list could be empty if you didn't actually match anything.

42
00:02:34,000 --> 00:02:38,000
This "re" means it comes from the regular expression library.

43
00:02:38,000 --> 00:02:41,000
We really need that import statement at the beginning for this to work.

44
00:02:41,000 --> 00:02:45,000
In this example, I'm using the same haystack string--"1+2==3"--

45
00:02:45,000 --> 00:02:47,000
but I'm using a different regular expression.

46
00:02:47,000 --> 00:02:50,000
This one only matches two single-letter strings.

47
00:02:50,000 --> 00:02:56,000
We'll get out 1 and 2. These two match. The 3 does not, because it's not between 1 and 2.

48
00:02:56,000 --> 00:02:58,000
It's not specified or matched by this regular expression.

49
00:02:58,000 --> 00:03:01,000
This last example is a little more tricky.

50
00:03:01,000 --> 00:03:03,000
We're looking for the letters a through c,

51
00:03:03,000 --> 00:03:07,000
but if you look carefully, these are the lowercase letters a and c.

52
00:03:07,000 --> 00:03:11,000
So even though this "B" is very tempting--this capital "B" in "Barbara,"

53
00:03:11,000 --> 00:03:14,000
it's not between lowercase a and lowercase c.

54
00:03:14,000 --> 00:03:20,000
We'll match this a, b, a, a, and then there's nothing over here in "Liskov."

55
00:03:20,000 --> 00:03:24,000
Barbara Liskov is a well-known computer scientist, famous for her work in

56
00:03:24,000 --> 00:03:27,000
object-oriented programming and systems programming.

57
00:03:27,000 --> 00:03:30,000
Among other things she invented the language Clu,

58
00:03:30,000 --> 00:03:33,000
which I'm showing here with a bit of a magnifying lens.

59
00:03:33,000 --> 00:03:35,092
She received the Turing Award--the highest honor is computer science.
