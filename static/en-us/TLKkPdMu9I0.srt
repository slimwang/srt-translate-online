1
00:00:00,000 --> 00:00:04,000
One way to reason about this is just to write out all of the strings that this matches--

2
00:00:04,000 --> 00:00:11,000
0, 1, 2--all the way up to 9. Ten different 1-digit strings.

3
00:00:11,000 --> 00:00:15,000
Zero is certainly in this set, so 0 matches 0 through 9.

4
00:00:15,000 --> 00:00:18,000
One matches 0 through 9. Remember the interpretation is everything

5
00:00:18,000 --> 00:00:22,000
between and including the beginning up to and including the end.

6
00:00:22,000 --> 00:00:27,000
Ten, however, is a 2-letter string. It's too big.

7
00:00:27,000 --> 00:00:32,000
This regular expression only matches ten strings that are each 1 letter long.

8
00:00:32,000 --> 00:00:36,000
This one doesn't match. Similarly, 11 is just too large.

9
00:00:36,000 --> 00:00:43,000
05 is very tempting, but regular expressions are string equations, not mathematical equations.

10
00:00:43,000 --> 00:00:47,000
While 5 and 05 might have the same mathematical meaning,

11
00:00:47,000 --> 00:00:50,000
our regular expression, which is concerned with strings,

12
00:00:50,000 --> 00:00:55,000
matches this one-letter string "5" but not this two-letter string "05".

13
00:00:55,000 --> 00:00:59,000
Then "9"--well, that's right on the border. We totally match it.

14
00:00:59,000 --> 00:01:02,000
"Isak Dinesen"--we don't match this for a number of reasons.

15
00:01:02,000 --> 00:01:07,000
First, it doesn't contain 0 through 9, and second it's much too long.

16
00:01:07,000 --> 00:01:12,000
"Isak Dinesen" was a pseudonym adopted by Karen Dinesen, a Danish author

17
00:01:12,000 --> 00:01:16,000
who wrote Out of Africa.

18
00:01:16,000 --> 00:01:18,000
Let's imagine that's Africa.

19
00:01:18,000 --> 00:01:22,000
These regular expressions sound super cool,

20
00:01:22,000 --> 00:01:25,000
and I'm going to show you how to use them in Python programs,

21
00:01:25,000 --> 00:01:27,092
but that's going to require one more step.
