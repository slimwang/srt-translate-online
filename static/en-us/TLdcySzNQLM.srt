1
00:00:00,570 --> 00:00:05,280
There are three mechanisms in SPIN to create protection

2
00:00:05,280 --> 00:00:10,460
domains, and use them. The first one is, of course, the create

3
00:00:10,460 --> 00:00:15,900
call that allows creating a logical protection domain. And

4
00:00:15,900 --> 00:00:20,850
this mechanism in SPIN allows initiating an object

5
00:00:20,850 --> 00:00:25,770
file with the contents and export the names that are contained as

6
00:00:25,770 --> 00:00:31,320
entry point methods inside the object to be visible outside. That's what this

7
00:00:31,320 --> 00:00:39,240
create call, supported by SPIN, provides to a service creator. For example, if

8
00:00:39,240 --> 00:00:45,150
I'm creating a memory management service. I can write the entry point functions

9
00:00:45,150 --> 00:00:51,260
in my memory management service and export the names using this create mechanism

10
00:00:51,260 --> 00:00:57,680
that's available in SPIN. The second mechanism in SPIN is resolving names.

11
00:00:57,680 --> 00:01:04,229
If one protection domain wants to use the names that is there in another

12
00:01:04,229 --> 00:01:09,710
protection domain. The way we can accomplish that is by using this resolve

13
00:01:09,710 --> 00:01:12,360
primitive that's available in SPIN. Resolve is

14
00:01:12,360 --> 00:01:17,200
very similar to linking two separately compiled

15
00:01:17,200 --> 00:01:21,160
files together that a compiler does routinely.

16
00:01:21,160 --> 00:01:23,060
So, you may be very familiar with the

17
00:01:23,060 --> 00:01:27,686
compilation process where you may separately compile

18
00:01:27,686 --> 00:01:30,300
files and once you have done the separate

19
00:01:30,300 --> 00:01:35,230
compilation of the files, then you go through a link phase of the compiler where

20
00:01:35,230 --> 00:01:38,180
the linker resolves the names that are being

21
00:01:38,180 --> 00:01:42,270
used by one object file with the names

22
00:01:42,270 --> 00:01:45,211
that are defined in another object file. That's

23
00:01:45,211 --> 00:01:47,912
the same thing that the resolve mechanism of

24
00:01:47,912 --> 00:01:52,584
SPIN does is, it resolves the names that are being used in source, which is a

25
00:01:52,584 --> 00:01:55,942
logical protection domain, and the target, which is

26
00:01:55,942 --> 00:01:59,499
another logical protection domain. As the result of

27
00:01:59,499 --> 00:02:03,713
this resolve step, the source logical protection domain

28
00:02:03,713 --> 00:02:07,927
and the target logical prediction domain are dynamically

29
00:02:07,927 --> 00:02:10,947
linked or bound together. And once bound

30
00:02:10,947 --> 00:02:14,645
together, accessing methods that are inside this

31
00:02:14,645 --> 00:02:18,515
target protection domain happens at memory speeds,

32
00:02:18,515 --> 00:02:20,665
meaning it is as efficient as a

33
00:02:20,665 --> 00:02:23,847
procedure call, once this resolve step has

34
00:02:23,847 --> 00:02:26,748
happened. As I mention before, to reduce

35
00:02:26,748 --> 00:02:30,320
the proliferation of small logical protection domains

36
00:02:30,320 --> 00:02:33,056
you may want to combine protection domains

37
00:02:33,056 --> 00:02:36,172
to create an aggregate larger protection domain

38
00:02:36,172 --> 00:02:38,756
and SPIN provides a mechanism for that,

39
00:02:38,756 --> 00:02:42,590
which is the combined mechanism. Once the

40
00:02:42,590 --> 00:02:46,410
names in a source and target protection domain

41
00:02:46,410 --> 00:02:48,860
have been resolved, they can be combined

42
00:02:48,860 --> 00:02:52,700
to create an aggregate domain. And the aggregate

43
00:02:52,700 --> 00:02:55,475
logical protection domain will have entry points,

44
00:02:55,475 --> 00:02:58,570
which is the union of the entry points

45
00:02:58,570 --> 00:03:05,120
that were exported as names from the source and the target or any number of such

46
00:03:05,120 --> 00:03:09,700
domains that have been combined together to create an aggregate domain. So this

47
00:03:09,700 --> 00:03:13,900
combined primitive in SPIN is mainly useful

48
00:03:13,900 --> 00:03:17,310
as a software engineering management tool to combat

49
00:03:17,310 --> 00:03:20,420
the proliferation of many small domains. So,

50
00:03:20,420 --> 00:03:24,780
once again, the road map for creating services

51
00:03:24,780 --> 00:03:30,680
is, write your code as a Modula-3 program with well defined entry points. And

52
00:03:30,680 --> 00:03:33,510
using the SPIN mechanism of create, you

53
00:03:33,510 --> 00:03:37,340
can instantiate a service and export the names

54
00:03:37,340 --> 00:03:39,760
that are available in that service. And

55
00:03:39,760 --> 00:03:43,180
if another logical protection domain wants to use

56
00:03:43,180 --> 00:03:50,180
the names that are exported, it can do so by using the SPIN mechanism resolve

57
00:03:50,180 --> 00:03:53,380
that causes the dynamic binding of the

58
00:03:53,380 --> 00:03:57,070
source and target logical protection domains. And

59
00:03:57,070 --> 00:04:01,620
finally, the combined primitive allows aggregation of

60
00:04:01,620 --> 00:04:05,150
logical protection domains to create an aggregate domain,

61
00:04:05,150 --> 00:04:09,750
that's the union of all the entry points that are available in the component

62
00:04:09,750 --> 00:04:15,450
logical protection domains. This is it. This is the secret sauce in SPIN to get

63
00:04:15,450 --> 00:04:20,430
protection and performance while allowing flexibility.

64
00:04:20,430 --> 00:04:24,650
Everything hinges on the strongly-typed nature

65
00:04:24,650 --> 00:04:29,360
of the programming language that is being used for implementing the operating

66
00:04:29,360 --> 00:04:35,110
system. That is, the language allows compile time checking, and run time

67
00:04:35,110 --> 00:04:40,960
enforcement of the logical protection domains. That's the key to the success of

68
00:04:40,960 --> 00:04:46,380
this approach to providing flexibility, protection,

69
00:04:46,380 --> 00:04:48,250
and performance, all in one bag.
