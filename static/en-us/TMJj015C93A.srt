1
00:00:00,350 --> 00:00:03,300
Let us first see what the problem
is with cache coherence,

2
00:00:03,300 --> 00:00:06,620
that is do we even need cache coherence.

3
00:00:06,620 --> 00:00:11,670
Our programmer is expecting to
see shared memory behavior.

4
00:00:11,670 --> 00:00:16,219
That means that when one core writes,
let's say, 15 to a variable.

5
00:00:16,219 --> 00:00:18,880
And then another core
reads that variable.

6
00:00:18,880 --> 00:00:23,120
It will read what
the last write put there.

7
00:00:23,120 --> 00:00:25,940
This is how cores communicate
through shared memory.

8
00:00:25,940 --> 00:00:28,130
One writes something to
a shared memory address.

9
00:00:28,130 --> 00:00:32,450
Another one reads it and expects to
see the data that was written there.

10
00:00:32,450 --> 00:00:36,170
But in our hardware,
each core has its own cache.

11
00:00:36,170 --> 00:00:40,809
And we need cores to have their own
caches at least into level one because

12
00:00:40,809 --> 00:00:45,449
a single large level one cache would
be too slow and would not have enough

13
00:00:45,449 --> 00:00:49,488
throughput to keep up with
the requests from all of the cores.

14
00:00:49,488 --> 00:00:55,710
So because we cannot do this,
we have private or per-core L1 caches.

15
00:00:55,710 --> 00:00:57,940
So each core has it's own.

16
00:00:57,940 --> 00:01:02,275
However, once you have this private
caches, here is what can happen.

17
00:01:02,275 --> 00:01:06,745
This is the core A with
the level 1 cache for core A.

18
00:01:06,745 --> 00:01:10,635
This is core B and
it has its own level 1 cache.

19
00:01:10,635 --> 00:01:14,762
So we said that let's say
core A writes x equals 15.

20
00:01:14,762 --> 00:01:19,642
Suppose this a cache miss, we use the
address effects to index into our cache.

21
00:01:19,642 --> 00:01:22,272
Check the tag whether
it corresponds to x.

22
00:01:22,272 --> 00:01:25,712
And then, if this is a cache miss,
we go to our main memory and

23
00:01:25,712 --> 00:01:28,132
fetch the whole block into our cache.

24
00:01:28,132 --> 00:01:31,042
Let's say that in this block x is 0.

25
00:01:31,042 --> 00:01:35,918
Once we fetch it into our cache,
we'll write our 15 here.

26
00:01:35,918 --> 00:01:39,240
So now we have a 15 in our cache here.

27
00:01:39,240 --> 00:01:41,740
Now let's say that
core B wants to read x.

28
00:01:41,740 --> 00:01:43,890
So it wants to see what x is.

29
00:01:43,890 --> 00:01:48,210
It uses the address of x to
index into its own cache.

30
00:01:48,210 --> 00:01:51,320
Sees that it doesn't have
what it's looking for there.

31
00:01:51,320 --> 00:01:54,690
And reads the block from main memory.

32
00:01:54,690 --> 00:01:56,680
This block here has 0 for

33
00:01:56,680 --> 00:02:00,540
X still because we didn't
write back from A's cache yet.

34
00:02:00,540 --> 00:02:05,040
So, we end up reading 0,
which is not correct.

35
00:02:05,040 --> 00:02:07,990
And know that this doesn't
occur only the first time

36
00:02:07,990 --> 00:02:09,630
when we have a cache miss.

37
00:02:09,630 --> 00:02:14,949
From now on, A can write to its
own L1 cache many, many times.

38
00:02:15,970 --> 00:02:18,990
B can read from its own cache many,
many times.

39
00:02:20,000 --> 00:02:24,060
A will keep writing to its cache and
not updating memory.

40
00:02:24,060 --> 00:02:27,590
B will keep reading from its cache and
not checking back

41
00:02:27,590 --> 00:02:31,280
from memory because once we bring it
into the cache, it's going to be a hit.

42
00:02:31,280 --> 00:02:32,690
B is never modifying it.

43
00:02:32,690 --> 00:02:36,880
It's always going to read 0 no
matter how many times A writes 15 or

44
00:02:36,880 --> 00:02:38,220
something else here.

45
00:02:38,220 --> 00:02:43,020
So obviously we are not getting
the communication of data we want from

46
00:02:43,020 --> 00:02:45,300
A's writes to B's reads.

47
00:02:45,300 --> 00:02:48,090
And thus our shared memory doesn't work.

48
00:02:48,090 --> 00:02:53,230
When we get in a shared memory system
behavior like this we say that it is

49
00:02:53,230 --> 00:02:55,020
incoherent.

50
00:02:55,020 --> 00:02:59,540
The same memory location as
seen from different cores

51
00:02:59,540 --> 00:03:01,700
can have different values.

52
00:03:01,700 --> 00:03:05,070
Which is not what should be
happening in a shared memory.

53
00:03:05,070 --> 00:03:10,304
In order to not get a incoherent system,
we need an active approach

54
00:03:10,304 --> 00:03:16,391
to cache coherence that will make this
whole thing behave as a single memory.

55
00:03:16,391 --> 00:03:20,304
Even though in reality there
are multiple copies of the data floating

56
00:03:20,304 --> 00:03:20,850
around.
