1
00:00:00,320 --> 00:00:03,219
So we know we need to create layouts and
assets optimized for

2
00:00:03,220 --> 00:00:06,009
different screen pixel densities and
sizes.

3
00:00:06,009 --> 00:00:09,550
So now is a great time to introduce
you to the Android resource framework.

4
00:00:11,000 --> 00:00:15,669
All externalized Android resources,
everything from strings to layouts to

5
00:00:15,669 --> 00:00:20,939
drawables and animations, are all stored
within your project's res folder.

6
00:00:20,940 --> 00:00:24,450
You've already been putting your strings
in the strings.xml file stored in

7
00:00:24,449 --> 00:00:25,372
the values folder.

8
00:00:25,373 --> 00:00:27,960
And you've been putting your
layouts into the layout folder.

9
00:00:29,140 --> 00:00:33,078
And you know to reference your resources
using at notation within both your

10
00:00:33,078 --> 00:00:34,336
XML or within the code.

11
00:00:34,335 --> 00:00:38,909
And then at runtime, Android will insert
the appropriate resource for you.

12
00:00:38,909 --> 00:00:43,159
So far so good, and here's where
things get a little more interesting.

13
00:00:43,159 --> 00:00:47,269
Android allows you to create alternative
versions of every resource by placing

14
00:00:47,270 --> 00:00:50,350
them into folders with
different qualifiers.

15
00:00:50,350 --> 00:00:52,450
We separate each of
those using a hyphen.

16
00:00:52,450 --> 00:00:57,025
And we can add those qualifiers
based on anything, from language

17
00:00:57,024 --> 00:01:01,879
and/or dialect to whether the device
is docked, the type of touch screen,

18
00:01:01,880 --> 00:01:05,740
the pixel density of the display,
the orientation of the screen.

19
00:01:05,739 --> 00:01:08,920
And most importantly, for
a responsive design in particular,

20
00:01:08,920 --> 00:01:12,930
the smallest available screen width
which you can support with that layout.

21
00:01:12,930 --> 00:01:16,526
At runtime, Android will check
the current device configuration,

22
00:01:16,525 --> 00:01:20,060
its language, its screen size,
pixel density, everything, and

23
00:01:20,060 --> 00:01:23,719
then load the right layouts,
strings, and drawables accordingly.

24
00:01:23,719 --> 00:01:26,250
And you can even chain
these qualifiers together.

25
00:01:26,250 --> 00:01:29,819
For example, to create a different
layout for German language users,

26
00:01:29,819 --> 00:01:33,179
to account for
all of those really long German words.

27
00:01:33,180 --> 00:01:36,924
Or more typically, for a combination of
screen size and device configuration.

28
00:01:36,924 --> 00:01:41,150
Now, keep in mind that many of
these values can change at runtime,

29
00:01:41,150 --> 00:01:44,402
the most common change
being that of orientation.

30
00:01:44,402 --> 00:01:47,670
And it's for this reason that
Android activities are destroyed and

31
00:01:47,670 --> 00:01:51,060
recreated whenever the device
configuration changes.

32
00:01:51,060 --> 00:01:52,500
And that's because the layout and

33
00:01:52,500 --> 00:01:55,790
all of the resources within it
could be completely different,

34
00:01:55,790 --> 00:01:58,480
based on something as simple as
a screen orientation change.

35
00:01:59,489 --> 00:02:02,269
Now, it's good practice as
well to localize your apps and

36
00:02:02,269 --> 00:02:05,908
provide translated strings for
all of your users using this mechanism.

37
00:02:05,908 --> 00:02:09,840
And that's a task made a lot easier
thanks to Google Play Publisher site

38
00:02:09,840 --> 00:02:12,129
that can offer you this service.

39
00:02:12,129 --> 00:02:16,030
It's also a really good idea to provide
different drawables at the appropriate

40
00:02:16,030 --> 00:02:19,849
pixel density, so you can get
a nice crisp image on every device.

41
00:02:21,180 --> 00:02:23,939
And when it comes to providing
alternative layouts, Android has gone

42
00:02:23,939 --> 00:02:27,870
through a few alternative models,
starting in the early days with

43
00:02:27,870 --> 00:02:32,120
this screen buckets idea of small,
normal, large, and extra large.

44
00:02:32,120 --> 00:02:36,925
But since Android 3.2, the new smallest
width qualifier has given us much more

45
00:02:36,925 --> 00:02:39,840
fine-grained control over our layouts.

