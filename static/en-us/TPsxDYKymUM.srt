1
00:00:00,660 --> 00:00:04,000
Rendering performance is the most
common performance issue that

2
00:00:04,000 --> 00:00:06,050
you run into while building your app.

3
00:00:06,050 --> 00:00:09,830
On one hand, your designers want to
produce the most usable transcendent

4
00:00:09,830 --> 00:00:14,125
experience for your users, but on the
other hand, all those fancy graphics and

5
00:00:14,125 --> 00:00:17,475
transitions may not work
well on every single device.

6
00:00:17,475 --> 00:00:20,211
Let's take a look at what rendering
performance is all about.

7
00:00:20,211 --> 00:00:24,355
Now firstly, know that the system
will attempt to redraw your activity,

8
00:00:24,355 --> 00:00:28,305
every 16 milliseconds or so, which means
that your application needs to run

9
00:00:28,305 --> 00:00:32,104
all of the logic to update the screen
in that 16 millisecond window, so

10
00:00:32,104 --> 00:00:34,375
that you can hit 60 frames per second.

11
00:00:34,375 --> 00:00:37,810
This frames per second number, generally
comes from the phone's hardware,

12
00:00:37,810 --> 00:00:41,710
which defines how fast the screen can
update itself in a single second.

13
00:00:41,710 --> 00:00:44,240
Now, most devices will
refresh at about 60 hertz,

14
00:00:44,240 --> 00:00:48,840
meaning you've got 60 milliseconds to do
all of your drawing logic each frame.

15
00:00:48,840 --> 00:00:51,910
If you miss that window,
say take 24 milliseconds to

16
00:00:51,910 --> 00:00:56,000
finish your calculations,
you get what we call a dropped frame.

17
00:00:56,000 --> 00:00:59,320
The system tried to draw a new picture
to the screen, but one wasn't ready yet.

18
00:00:59,320 --> 00:01:00,892
So it didn't refresh anything.

19
00:01:00,892 --> 00:01:05,159
The user ends up seeing the same graphic
for 32 milliseconds rather than 16.

20
00:01:05,159 --> 00:01:05,817
Hm.

21
00:01:05,817 --> 00:01:08,345
Any animations going on
during a dropped frame will

22
00:01:08,345 --> 00:01:11,710
manifest themselves to your users
with a jump in their smoothness.

23
00:01:11,710 --> 00:01:14,420
Now because even if
there's one dropped frame,

24
00:01:14,420 --> 00:01:17,000
the animation won't
look smooth to anybody.

25
00:01:17,000 --> 00:01:20,550
And multiple dropped frames are at
the core of what users start calling

26
00:01:20,550 --> 00:01:22,910
a laggy or janky experience.

27
00:01:22,910 --> 00:01:25,660
It gets even worse when lag happens
while your users are interacting with

28
00:01:25,660 --> 00:01:28,590
the system, for example,
when they're dragging a list view or

29
00:01:28,590 --> 00:01:30,240
trying to type in some data.

30
00:01:30,240 --> 00:01:33,880
This is what users mercilessly
start complaining about.

31
00:01:33,880 --> 00:01:36,770
Now that we have a better understanding
of how much time it takes per

32
00:01:36,770 --> 00:01:39,800
frame to draw, let's take a look at
some of the problems that cause lag, and

33
00:01:39,800 --> 00:01:42,050
how you can address them
in your applications.
