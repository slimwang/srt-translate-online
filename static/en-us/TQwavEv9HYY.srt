1
00:00:00,310 --> 00:00:04,750
The ordering constraint basically says that if I've got pixels in

2
00:00:04,750 --> 00:00:06,240
my left image that go a, b c,

3
00:00:06,240 --> 00:00:10,690
they're going to appear in the same order a, b, c in my right image.

4
00:00:10,690 --> 00:00:15,750
And that's typically what happens when I look at a single solid surface.

5
00:00:15,750 --> 00:00:17,540
So when is this violated?

6
00:00:17,540 --> 00:00:18,210
Well, duh.

7
00:00:18,210 --> 00:00:20,710
When I'm not looking at a single solid surface.

8
00:00:20,710 --> 00:00:22,490
That's SSS, that's pretty cool.

9
00:00:22,490 --> 00:00:24,690
So what's not a single solid surface?

10
00:00:24,690 --> 00:00:25,670
Well, couple things.

11
00:00:25,670 --> 00:00:27,320
First of all, we could be not solid.

12
00:00:27,320 --> 00:00:28,930
Now, what does it mean to be not solid?

13
00:00:28,930 --> 00:00:31,770
Well, suppose you have a surface that's transparent that

14
00:00:31,770 --> 00:00:33,610
has some markings on it.

15
00:00:33,610 --> 00:00:34,400
Okay?

16
00:00:34,400 --> 00:00:39,290
So here we have this, supposed this as a transparent surface, all right?

17
00:00:39,290 --> 00:00:42,090
And we can see these points, all right?

18
00:00:42,090 --> 00:00:47,130
Well if they're transparent, they would go A, B, C in that order, but

19
00:00:47,130 --> 00:00:51,510
over here, it would go C, A, B, all right?

20
00:00:51,510 --> 00:00:53,960
And that's just because we can see through the surface.

21
00:00:53,960 --> 00:00:57,060
Well that's really weird and that almost never happens.

22
00:00:57,060 --> 00:01:02,670
What happens much more often is what's sometimes called the pen,

23
00:01:02,670 --> 00:01:03,680
floating penel, I forget.

24
00:01:03,680 --> 00:01:04,930
Whatever it's called.

25
00:01:04,930 --> 00:01:08,020
Basically, if I've got a narrow occluding surface, and

26
00:01:08,020 --> 00:01:09,930
you can actually do the simple experiment.

27
00:01:09,930 --> 00:01:13,370
If you wanted to do a stereo put your two fingers, one in, right in front of

28
00:01:13,370 --> 00:01:17,800
the other, and in your left eye, this finger is to the left of this, but

29
00:01:17,800 --> 00:01:21,120
in your right eye, the other finger is to the left of this, so it swaps.

30
00:01:21,120 --> 00:01:24,680
So if you have a stereo algorithm that's trying to figure out

31
00:01:24,680 --> 00:01:27,990
how to do the match that's a problem.

32
00:01:27,990 --> 00:01:33,460
I will tell you that current stere, stereo algorithms do a lot of work to

33
00:01:33,460 --> 00:01:36,930
handle the occlusion problem, because that happens all the time, because if I've

34
00:01:36,930 --> 00:01:40,180
got one edge of a, of an object in front of another object, there are going to

35
00:01:40,180 --> 00:01:43,940
be pixels that are visible in one eye or one camera and not the other.

36
00:01:43,940 --> 00:01:46,360
Current stereo algorithms are not so

37
00:01:46,360 --> 00:01:48,570
great on violations of the ordering constraint.

38
00:01:50,230 --> 00:01:51,200
Various scale problems,

39
00:01:51,200 --> 00:01:54,390
et cetera so, that's just sort of where the state of the art is.
