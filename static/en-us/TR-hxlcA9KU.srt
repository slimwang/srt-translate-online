1
00:00:00,000 --> 00:00:05,000
In this first problem, we asked you to evaluate a few statements on interpreters.

2
00:00:05,000 --> 00:00:10,000
The first statement reads every operation can be sensibly applied to every type of value.

3
00:00:10,000 --> 00:00:13,000
This is not true. Let's take a look at the plus operator.

4
00:00:13,000 --> 00:00:18,000
If you add two strings, it's sensible that it concats them and it's equally sensible

5
00:00:18,000 --> 00:00:24,000
that adding two numbers is equivalent to adding them under the plus operator.

6
00:00:24,000 --> 00:00:29,000
However, adding a string and a number is not a sensible operation.

7
00:00:29,000 --> 00:00:32,000
This doesn't really make sense--what we would do with this.

8
00:00:32,000 --> 00:00:38,000
Do we turn string into a number and add them arithmatically or do we concat "uda"

9
00:00:38,000 --> 00:00:41,000
with the 5 and get a new string? In most interpreters, this is a problem.

10
00:00:41,000 --> 00:00:46,000
The second statement reads--the meaning of an expression can depend on its context.

11
00:00:46,000 --> 00:00:50,000
This is true. At its core, this question is dealing with the notion of scope.

12
00:00:50,000 --> 00:00:52,000
Let me show you an example in Python.

13
00:00:52,000 --> 00:00:57,000
If I run this code, two values will be printed out--first 6 and then 5.

14
00:00:57,000 --> 00:01:02,000
Because within the function, we defined x to be 6 and then print it out the value 6,

15
00:01:02,000 --> 00:01:05,000
but outside of the function, the meaning of x is 5.

16
00:01:05,000 --> 00:01:13,000
This implies that x--the expression just x--can mean two different things and its value is

17
00:01:13,000 --> 00:01:17,000
dependent on the context it's in, whether it's in a function or outside a function

18
00:01:17,000 --> 00:01:20,000
or more precisely the scope of x.

19
00:01:20,000 --> 00:01:24,000
Statement 3 reads--we can use a single dictionary as an environment

20
00:01:24,000 --> 00:01:27,000
to track JavaScript variables--this is false.

21
00:01:27,000 --> 00:01:33,000
As we saw in lecture it's necessary to use different dictionaries for different levels of scope.

22
00:01:33,000 --> 00:01:36,000
Here you have a diagram of one possible environment.

23
00:01:36,000 --> 00:01:42,000
Within a function named fun, x can equal the string Andy, whereas in the

24
00:01:42,000 --> 00:01:47,000
global environment, x can be the outside x string.

25
00:01:47,000 --> 00:01:51,000
We generally represent each of these environments as a dictionary where the key

26
00:01:51,000 --> 00:01:57,000
is the name and the value, and the value of that entry in the dictionary

27
00:01:57,000 --> 00:01:59,000
is the value of the variable.

28
00:01:59,000 --> 00:02:03,000
Because the name can be repeated and because a dictionary

29
00:02:03,000 --> 00:02:07,000
has unique keys, we're going to have to have nested dictionaries

30
00:02:07,000 --> 00:02:12,000
or more than one dictionary to easily represent our environments.

31
00:02:12,000 --> 00:02:16,000
In theory, you could do it with a single dictionary, but also in theory

32
00:02:16,000 --> 00:02:22,000
you can only use a single flat list for every program you possibly want to write.

33
00:02:22,000 --> 00:02:26,000
But in practice you're going to need multiple dictionaries.

34
00:02:26,000 --> 00:02:29,000
The next statement reads our JavaScript interpreter always completes

35
00:02:29,000 --> 00:02:33,000
after recursively walking the parse tree--this is false.

36
00:02:33,000 --> 00:02:37,000
The easiest way to demonstrate this is a little bit of JavaScript.

37
00:02:37,000 --> 00:02:40,000
Here you have a little bit of JavaScript that never terminates.

38
00:02:40,000 --> 00:02:46,000
Although the parse tree for this JavaScript is finite, interpreting it is infinite.

39
00:02:46,000 --> 00:02:51,000
The way we interpret JavaScript is by running it, and in the process of running it,

40
00:02:51,000 --> 00:02:55,000
we're never going to exit this Y loop because the condition is true.

41
00:02:55,000 --> 00:03:00,000
You may ask yourself, can our JavaScript interpreter recognize that this Y loop

42
00:03:00,000 --> 00:03:07,000
will never finish and simply skip it or somehow move on from it or just terminate early.

43
00:03:07,000 --> 00:03:12,000
Well, although we can tell in this case that the Y loop is never going to exit because it's true

44
00:03:12,000 --> 00:03:16,000
and then nowhere inside the loop we change the control flow.

45
00:03:16,000 --> 00:03:20,000
In practice and in theory, doing this for the general case is impossible

46
00:03:20,000 --> 00:03:24,000
due to the halting problem which we discussed in lecture.

47
00:03:24,000 --> 00:03:27,000
The last statement states our HTML interpreter

48
00:03:27,000 --> 00:03:30,000
always completes after recursively walking the parse tree.

49
00:03:30,000 --> 00:03:35,000
This is true because no matter what tags we use, there is no notion of a loop

50
00:03:35,000 --> 00:03:37,000
like we have in JavaScript.

51
00:03:37,000 --> 00:03:42,000
There is no recursive calls that can cause the HTML interpretation to take

52
00:03:42,000 --> 00:03:46,000
an infinite amount of time and interpreting the HTML is going to be a direct function

53
00:03:46,000 --> 99:59:59,999
of the number of elements we have in our parse tree.
