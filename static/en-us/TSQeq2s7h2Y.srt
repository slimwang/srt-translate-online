1
00:00:00,690 --> 00:00:04,610
>> Well, can you give us a 4,000 foot view of what LayerBlox is?

2
00:00:04,610 --> 00:00:09,460
>> So, LayerBlox is a software generator for

3
00:00:09,460 --> 00:00:13,480
generating different variants of products in the same product line.

4
00:00:13,480 --> 00:00:17,199
>> So you, you want to be able to generate all of these, these variants.

5
00:00:19,230 --> 00:00:22,740
how, how how does your generator actually work?

6
00:00:22,740 --> 00:00:27,630
What does it take as input, and, and and, and, and how does it process that?

7
00:00:28,840 --> 00:00:30,000
>> That's a good question.

8
00:00:30,000 --> 00:00:32,310
So I should say first off that our generator is based on

9
00:00:33,676 --> 00:00:36,050
a pretty well understood idea from software engineering.

10
00:00:37,130 --> 00:00:39,345
That goes back to, really goes go back to the,

11
00:00:39,345 --> 00:00:42,036
the early 90s on product line generation.

12
00:00:42,036 --> 00:00:46,510
And so, each variant that we want to

13
00:00:46,510 --> 00:00:49,500
generate is a different program in the same product line.

14
00:00:49,500 --> 00:00:53,275
And we, we organize our product lines in terms of

15
00:00:53,275 --> 00:00:57,130
re-useable features that we put into a library.

16
00:00:57,130 --> 00:01:01,190
We've designed them according to a design idiom that, that, that makes them

17
00:01:01,190 --> 00:01:05,269
very composable with one another, which I'll demonstrate here in a little while.

18
00:01:05,269 --> 00:01:06,370
And what you do, then, to,

19
00:01:06,370 --> 00:01:09,760
to generate a variant is you write something called an assembly specification.

20
00:01:09,760 --> 00:01:13,740
Assembly specification explains how you put these features together in

21
00:01:13,740 --> 00:01:16,910
some novel combination to generate a particular variant.

22
00:01:16,910 --> 00:01:19,930
And it has some particular useful properties, which I think we'll be able to,

23
00:01:19,930 --> 00:01:21,610
to dig into by example here in a few minutes.

24
00:01:21,610 --> 00:01:26,905
But what's really nice about it is the features you can write once and

25
00:01:26,905 --> 00:01:28,640
reuse many times.

26
00:01:28,640 --> 00:01:32,250
And you can very easily understand by virtue of

27
00:01:32,250 --> 00:01:36,060
comparing these assembly specifications how two different variants in the same

28
00:01:36,060 --> 00:01:40,880
product line are common and how they differ and be very precise about that.

29
00:01:40,880 --> 00:01:44,990
>> And I'm curious about the, the title, LayerBlox.

30
00:01:44,990 --> 00:01:48,090
Is it, is this related to layered architectures?

31
00:01:48,090 --> 00:01:48,920
>> It is, it is.

32
00:01:48,920 --> 00:01:51,130
When you see some examples of assembly specifications,

33
00:01:51,130 --> 00:01:54,940
you'll see that the, the components that we're generating, each component,

34
00:01:54,940 --> 00:01:58,550
when I use the term variant, I mean program or component.

35
00:01:58,550 --> 00:02:04,030
So the when you see how, how a given component is generated,

36
00:02:04,030 --> 00:02:07,390
you'll notice that it's, the little program you write to say how to generate it,

37
00:02:07,390 --> 00:02:12,020
the recipe looks, is, is a very layered, very hierarchical form.

38
00:02:12,020 --> 00:02:14,900
It's related to layered architectures in another way too,

39
00:02:14,900 --> 00:02:17,110
in the sense that typically with layer architectures,

40
00:02:17,110 --> 00:02:21,340
you tend to think of of software built in stacks.

41
00:02:21,340 --> 00:02:25,440
Where you can understand a layer you can understand one layer,

42
00:02:25,440 --> 00:02:28,720
just in terms of the interface that it exports, without any

43
00:02:28,720 --> 00:02:32,670
knowledge of how it's implemented or of the layers that are underneath it.

44
00:02:32,670 --> 00:02:35,890
the, the assembly specifications that we write using LayerBlox have

45
00:02:35,890 --> 00:02:36,720
that same property.

46
00:02:37,750 --> 00:02:40,570
>> And, and just to, to clarify a bit.

47
00:02:40,570 --> 00:02:43,282
The layers that you're talking about are, and

48
00:02:43,282 --> 00:02:47,050
the generated code you're talking about, they go in that middle tier?

49
00:02:48,250 --> 00:02:51,520
>> No, they actually, in this case they could go in the middle tier.

50
00:02:51,520 --> 00:02:53,338
But in this case they go in, down in the data tier.

51
00:02:53,338 --> 00:02:58,130
>> Okay, so the, the tiering is kind of independent of the, of the layering?

52
00:02:58,130 --> 00:02:59,000
>> That's correct.

53
00:02:59,000 --> 00:02:59,970
That's correct.

54
00:02:59,970 --> 00:03:03,010
>> And in the diagram, there's also this reusable feature library.

55
00:03:03,010 --> 00:03:04,400
Can you say a word about that?

56
00:03:04,400 --> 00:03:06,670
>> So, you know, I mentioned earlier that when we have a number of

57
00:03:06,670 --> 00:03:09,960
different clients, their programs and their applications are very similar, but

58
00:03:09,960 --> 00:03:11,390
they're not exactly the same.

59
00:03:11,390 --> 00:03:14,370
What we found is that if we do a decomposition and

60
00:03:14,370 --> 00:03:17,650
design of our software by feature and I

61
00:03:17,650 --> 00:03:21,790
know you guys have spoken of feature diagrams and feature modeling in the past.

62
00:03:21,790 --> 00:03:24,690
When you, when you when you do a feature-based design,

63
00:03:24,690 --> 00:03:30,070
you actually can get reusable pieces of, they're not whole applications.

64
00:03:30,070 --> 00:03:31,410
They're little fragments, but the, but

65
00:03:31,410 --> 00:03:35,000
they're highly reusable and composable in ways that you can put them together to

66
00:03:35,000 --> 00:03:39,740
make different variants of a, of, of the same application very easily.

67
00:03:39,740 --> 00:03:40,920
So we did a,

68
00:03:40,920 --> 00:03:45,810
in the example we'll see we basically did a feature analysis to understand what

69
00:03:45,810 --> 00:03:49,030
are the different features that are put together to do forecasting.

70
00:03:50,130 --> 00:03:51,680
And based on that feature analysis,

71
00:03:51,680 --> 00:03:55,870
we we designed our reusable features around it and,

72
00:03:55,870 --> 00:03:59,160
and got this ability to, to, to compose them in this very, very nice way.

73
00:03:59,160 --> 00:04:03,680
>> So the, the unit of variation is kind of, a customer-visible feature?

74
00:04:03,680 --> 00:04:07,460
>> It may not be customer-visible, I, and, and ideally it, it could be, right?

75
00:04:07,460 --> 00:04:10,800
And in other product line work it is the unit of visib,

76
00:04:10,800 --> 00:04:15,270
of the unit is customer-visible feature.

77
00:04:15,270 --> 00:04:17,970
In our case, it's more implementation centric.

78
00:04:17,970 --> 00:04:20,781
But, but still, it's, it's much more on the science side than,

79
00:04:20,781 --> 00:04:23,930
then the customer side so in our case, we, we're doing forecasting.

80
00:04:23,930 --> 00:04:26,880
And there are some pretty com, complicated algorithmics that go with,

81
00:04:26,880 --> 00:04:27,690
with forecasting.

82
00:04:27,690 --> 00:04:32,220
So that domain is the domain at which we've we've done the future analysis.
