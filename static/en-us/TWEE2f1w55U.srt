1
00:00:00,000 --> 00:00:04,000
In order to calculate the answer to this question,

2
00:00:04,000 --> 00:00:08,000
instead of doing it by hand, I'm going to let Python do the work.

3
00:00:08,000 --> 00:00:12,000
What I've done is I've collected together the data from the question,

4
00:00:12,000 --> 00:00:19,000
the total time of the round trip for the data, which was 75 milliseconds,

5
00:00:19,000 --> 00:00:26,000
the one-way distance, which was 2,500 kilometers, the speed of light in an optic fiber,

6
00:00:26,000 --> 00:00:29,000
which is 200,000 km/sec.

7
00:00:29,000 --> 00:00:34,000
Note that this is kilometers per second, but the total time is in milliseconds,

8
00:00:34,000 --> 00:00:39,000
which means I'm going to need a conversion between milliseconds and seconds.

9
00:00:39,000 --> 00:00:41,000
Let's think. What do I need to calculate?

10
00:00:41,000 --> 00:00:48,000
Well, what I want to know is the total<u>time</u>at_routers.

11
00:00:48,000 --> 00:00:54,000
Working backwards from what I want to know, let's see what I need to calculate.

12
00:00:54,000 --> 00:01:05,000
Well, the total time spent at the routers is equal to the total_time minus the time<u>on</u>the_wires.

13
00:01:05,000 --> 00:01:09,000
How am I going to calculate the time<u>on</u>the_wires?

14
00:01:09,000 --> 00:01:14,000
That's while it's in the fiber optics rather than actually at the routers.

15
00:01:14,000 --> 00:01:20,000
The time on the wires--that's equal to--well, how do we calculate time

16
00:01:20,000 --> 00:01:22,000
when we've got distances and speed?

17
00:01:22,000 --> 00:01:26,000
Well, it's simply distance divided by speed.

18
00:01:26,000 --> 00:01:30,000
Now, what distance are we using?

19
00:01:30,000 --> 00:01:34,000
Well, the total time<u>at</u>the_routers is equal to total_time.

20
00:01:34,000 --> 00:01:39,000
That's actually the time for the round trip, so we need to know how long the data

21
00:01:39,000 --> 00:01:45,000
was on the fiber optics for the round trip, which means we need to go twice the distance.

22
00:01:45,000 --> 00:01:49,000
That's the one-way distance.

23
00:01:49,000 --> 00:01:55,000
We're going to divide by the speed that the data is traveling in the wires,

24
00:01:55,000 --> 00:01:57,000
which is the optical speed.

25
00:01:57,000 --> 00:02:00,000
Now at the moment, we've got--what have we got here?

26
00:02:00,000 --> 00:02:10,000
We've got kilometers divided by km/sec, which is going to give us an answer in seconds.

27
00:02:10,000 --> 00:02:16,000
But our times are measured in milliseconds, so that's seconds at the moment,

28
00:02:16,000 --> 00:02:19,000
and we want to convert it into milliseconds.

29
00:02:19,000 --> 00:02:26,000
We have to multiply it by the number of milliseconds per second.

30
00:02:26,000 --> 00:02:33,000
That's our conversion factor, which is milliseconds per second.

31
00:02:33,000 --> 00:02:38,000
Let's see what happens--75.

32
00:02:38,000 --> 00:02:42,000
That's a bit weird, isn't it? Because the total time was 75.

33
00:02:42,000 --> 00:02:44,000
What's gone wrong?

34
00:02:44,000 --> 00:02:53,000
Let me just print out here the time<u>on</u>the_wires--0.

35
00:02:53,000 --> 00:02:55,000
Well, that doesn't make sense, does it?

36
00:02:55,000 --> 00:02:59,000
Because it's been somewhere, and it's come back--it can't have taken 0 time.

37
00:02:59,000 --> 00:03:01,000
What's the problem here?

38
00:03:01,000 --> 00:03:03,000
Well, the problem is this division.

39
00:03:03,000 --> 00:03:10,000
What we have in Python--at least before version 3--is that division is integer division.

40
00:03:10,000 --> 00:03:16,000
So if the number is less than 1, which it will be here,

41
00:03:16,000 --> 00:03:22,000
because one<u>way</u>distance is only 2,500, and we're dividing by 200,000.

42
00:03:22,000 --> 00:03:27,000
Python just rounds it down to the nearest integer, which is 0.

43
00:03:27,000 --> 00:03:32,000
In order to deal with that, I'm just going to make it into a float,

44
00:03:32,000 --> 00:03:37,000
which means that it does division normally and gives an answer which is a decimal.

45
00:03:37,000 --> 00:03:42,000
You can convert all of these into floats, but really we just need to do one of them.

46
00:03:42,000 --> 00:03:51,000
If I run it now, I find that the first value here--25--is the amount of time on the wires,

47
00:03:51,000 --> 00:03:56,000
and the total<u>time</u>at_routers is 50 milliseconds.

48
00:03:56,000 --> 00:04:00,000
You need to be a little bit careful to make sure that you're doing float division.

49
00:04:00,000 --> 00:04:03,000
Float is just decimal division instead of integer division.
