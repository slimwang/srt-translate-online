1
00:00:00,170 --> 00:00:03,950
I want to now actually talk about a special case which is Median Filtering.

2
00:00:03,950 --> 00:00:07,870
Now averaging was, great to actually look at the neighborhood, and

3
00:00:07,870 --> 00:00:11,800
figure out, a numerical value that's the average of the neighborhood.

4
00:00:11,800 --> 00:00:14,360
But we can actually apply other statistical functions in here.

5
00:00:14,360 --> 00:00:16,210
Of course we're going to play with Median.

6
00:00:16,210 --> 00:00:18,040
Again, let's make, take my simple example.

7
00:00:18,040 --> 00:00:19,360
My input image.

8
00:00:19,360 --> 00:00:21,550
Look at my neighborhood of three by three.

9
00:00:21,550 --> 00:00:25,900
And this time around, let's calculate its median, of this right three by three.

10
00:00:25,900 --> 00:00:30,280
And again, what we can do is basically open up the whole matrix like so, and

11
00:00:30,280 --> 00:00:32,580
show, the whole thing.

12
00:00:32,580 --> 00:00:34,630
And of course, the median of this signal or

13
00:00:34,630 --> 00:00:40,198
this neighborhood of nine by nine, oh, three by three, nine elements, is 20.

14
00:00:40,198 --> 00:00:47,600
Just to, compare, the average of this signal is, would have been equal to 19.

15
00:00:47,600 --> 00:00:51,700
So of course, just by doing median to, averaging, we have changed the intensity

16
00:00:51,700 --> 00:00:56,640
value of that output that I want to put in the output image by one.

17
00:00:56,640 --> 00:01:00,080
What we want to do again, just like anything else, is we want to run this

18
00:01:00,080 --> 00:01:04,940
application and run it each and every,uh, pixel, rubbing it over

19
00:01:04,940 --> 00:01:08,470
the whole image as we've done before to generate, of course, a median image.

20
00:01:08,470 --> 00:01:09,710
So notice this is a little different.

21
00:01:09,710 --> 00:01:11,760
We're not doing cross correlation as we did before.

22
00:01:11,760 --> 00:01:13,390
For, we're not actually putting the elements in,

23
00:01:13,390 --> 00:01:17,430
we're actually taking the element, nine by nine, and running a separate process,

24
00:01:17,430 --> 00:01:19,620
a separate function on it to come up with a new value.

25
00:01:19,620 --> 00:01:23,510
So we are no longer kind of doing the kernel, because in this case,

26
00:01:23,510 --> 00:01:25,020
in median filtering, there is no kernel.

27
00:01:25,020 --> 00:01:28,040
Kernel is actually a function, rather than an image.

28
00:01:28,040 --> 00:01:30,630
Let's look at an example of how media filtering works.

29
00:01:30,630 --> 00:01:35,610
So just to make sure we are clear median filtering is a nonlinear operation and

30
00:01:35,610 --> 00:01:38,220
it's often used as a very strong tool in image processing.

31
00:01:38,220 --> 00:01:42,340
And I'll show you examples of how actually, strong of a process it is.

32
00:01:42,340 --> 00:01:46,880
Mostly what it is used, is to reduce noise, but other good things with it

33
00:01:46,880 --> 00:01:51,770
as actually also preserves edges and sharp lines, which is a valuable thing.

34
00:01:51,770 --> 00:01:56,380
And as I said previously a basically a median of all pixels.

35
00:01:56,380 --> 00:02:00,760
Rather than using a kernel function as basically a stronger tool,

36
00:02:00,760 --> 00:02:03,680
than just computing the average mean of that neighborhood.

37
00:02:03,680 --> 00:02:06,810
And of course I showed you an example of just doing it over nine elements or

38
00:02:06,810 --> 00:02:08,960
a three by three size window.

39
00:02:08,960 --> 00:02:10,410
It could be again for larger things
