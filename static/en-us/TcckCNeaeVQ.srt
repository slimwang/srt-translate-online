1
00:00:00,000 --> 00:00:05,000
So, one of the wonderful things about depth-first search is that it can be implemented really

2
00:00:05,000 --> 00:00:09,000
straightforwardly with recursion, which makes it very easy to read and

3
00:00:09,000 --> 00:00:12,000
pretty easy to reason about. Not so with breadth-first search.

4
00:00:12,000 --> 00:00:15,000
Breadth-first search is going to require a little bit more care

5
00:00:15,000 --> 00:00:19,000
to implement it in a way that keeps track of things in the right order.

6
00:00:19,000 --> 00:00:26,000
So, as a step towards being able to do that, let's redo depth-first search just the way

7
00:00:26,000 --> 00:00:30,000
it was done before, but this time without recursion, and what we're going to do the way that we're

8
00:00:30,000 --> 00:00:35,000
going to actually make that work is by introducing a new data structure called the open list.

9
00:00:35,000 --> 00:00:39,000
The open list, I would like to think of it as a kind of a "to do list" because it keeps track of

10
00:00:39,000 --> 00:00:43,000
what it is I need to do next and essentially, I'm a slave to my "to do list."

11
00:00:43,000 --> 00:00:48,000
I've actually had students who occasionally add things to my "to do list" because I wouldn't know

12
00:00:48,000 --> 00:00:53,000
that I wasn't suppose to do them, and they get me to do things that I'm not suppose to do.

13
00:00:53,000 --> 00:00:57,000
I would not encourage you to be quite so short-sighted, but algorithms actually are going to that

14
00:00:57,000 --> 00:01:03,000
short-sighted and so this open list is going to help the algorithm keep track of what needs to get done.

15
00:01:03,000 --> 00:01:05,000
So, here's how we're going to do it.

16
00:01:05,000 --> 00:01:09,000
We're going to start all the nodes as unmarked so they are all just nice open blue circles,

17
00:01:09,000 --> 00:01:13,000
and we're going to put p onto the open list and we're going to follow this procedure here, and the

18
00:01:13,000 --> 00:01:19,000
procedure says go to the "to do list" get the thing at the end of the list that has to get done and do it.

19
00:01:19,000 --> 00:01:25,000
The way that we are going to do it is we pull it off the list then we go to all the neighbors of the node

20
00:01:25,000 --> 00:01:30,000
that we're working on which is p and any that are unmarked, we do two things to them.

21
00:01:30,000 --> 00:01:36,000
We mark them and we add them to the open list. So, the neighbors of p in this case are r, s, and q.

22
00:01:36,000 --> 00:01:43,000
So, we're going to add r, s, and q to the open list and mark them all as visited.

23
00:01:43,000 --> 00:01:47,000
Now, we've done that process, and we go back to the beginning and do it again.

24
00:01:47,000 --> 00:01:51,000
We take the ending little piece off the "to do list" and say "Oh, q" that's what we have to do.

25
00:01:51,000 --> 00:01:57,000
Go to the graph, find all the neighbors of q in this case just t, mark it and add it to the "to do list."

26
00:01:57,000 --> 00:01:59,000
Okay, we're done. No, we're not.

27
00:01:59,000 --> 00:02:01,000
We have to go back to the beginning and do it again.

28
00:02:01,000 --> 00:02:05,000
Grab the top thing off the "to do list" which is the t, check all its neighbors, q and u.

29
00:02:05,000 --> 00:02:07,000
Only one of them has not been visited and that's u.

30
00:02:07,000 --> 00:02:10,000
You mark it and add it to the "to do list," and we repeat again.

31
00:02:10,000 --> 00:02:16,000
Grab the last thing off the "to do list," which is u, look at all the neighbors of u which are r, s, and t.

32
00:02:16,000 --> 00:02:18,000
They've all been marked. Nothing to do.

33
00:02:18,000 --> 00:02:20,000
Yes, there is. There is still one more thing on the "to do list."

34
00:02:20,000 --> 00:02:25,000
We have to get the s, take the s off the list and check all the neighbors of s, u, r, p, and q.

35
00:02:25,000 --> 00:02:29,000
They've all been visited so we don't add anything new to the "to do list."

36
00:02:29,000 --> 00:02:35,000
We finished the duration and go back to the top. One more thing on the to do list r. Check r.

37
00:02:35,000 --> 00:02:43,000
R has three neighbors, p, s, and u, all of them have been marked. We add nothing to the open list.

38
00:02:43,000 --> 00:02:47,000
We see that there is nothing left open and now, we're really done. Ta-da.

39
00:02:47,000 --> 00:02:50,000
This procedure here performs just like depth-first search.

40
00:02:50,000 --> 00:02:54,000
It goes through and it adds nodes in an order that has to do with diving deeper

41
00:02:54,000 --> 00:02:57,000
and deeper into the graph, but it does it without any recursion.

42
00:02:57,000 --> 00:03:00,000
Instead of recursion, it just has this open list to keep track of things.

43
00:03:00,000 --> 00:03:02,000
All right--here's another graph that we're going to search and this is going to help us

44
00:03:02,000 --> 00:03:06,000
illustrate the difference between depth-first search and breadth-first search.

45
00:03:06,000 --> 00:03:10,000
So, what we're going to do is we're going to start a search from v and let's see how it proceeds.

46
00:03:10,000 --> 00:03:13,000
So, we start up v. We mark v.

47
00:03:13,000 --> 00:03:18,000
And our instructions again say that we look at all the neighbors of v, w and z.

48
00:03:18,000 --> 00:03:22,000
Mark the unmarked ones after we removed v on the list

49
00:03:22,000 --> 00:03:25,000
Mark the unmarked ones and add the unmarked ones to our open list.

50
00:03:25,000 --> 00:03:30,000
Now, we take the first thing off the open list which is the z and repeat.

51
00:03:30,000 --> 00:03:37,000
V is already marked. Y is not. Add y to our open list. Now, we work on y again.

52
00:03:37,000 --> 00:03:39,000
We're always working on the most recent thing.

53
00:03:39,000 --> 00:03:42,000
Y says we have to check x and z, those are the neighbors.

54
00:03:42,000 --> 00:03:44,000
Z has already been marked and x is not.

55
00:03:44,000 --> 00:03:47,000
Take care of x and then just as before and now that everything is marked,

56
00:03:47,000 --> 00:03:50,000
it's going to end up popping this off the open list and it finishes.

57
00:03:50,000 --> 00:03:54,000
Let's look at the order in which nodes were marked.

58
00:03:54,000 --> 00:03:59,000
This was marked first, then this, then this, then this, then this.

59
00:03:59,000 --> 00:04:04,000
Mostly, the flow is in the order of deeper and deeper and deeper.
