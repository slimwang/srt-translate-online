1
00:00:01,884 --> 00:00:04,763
Do you have an example of using
a linear layout in your app?

2
00:00:04,763 --> 00:00:10,611
>> Well, even here, this cluster
of three cards is a horizontal

3
00:00:10,611 --> 00:00:16,463
linear layout where we just add
child views like three cards.

4
00:00:16,463 --> 00:00:23,810
And then we set layout width to
zero dp and layout weight to one.

5
00:00:23,810 --> 00:00:29,569
And essentially, it instructs
the linear layout to take however much

6
00:00:29,569 --> 00:00:35,523
weight it has at run time and distribute
it evenly based on other relative

7
00:00:35,523 --> 00:00:42,100
weights are distributed evenly between
all the child views in that group.

8
00:00:42,100 --> 00:00:43,160
So that's one example.

9
00:00:43,160 --> 00:00:47,420
And another example would be over here,
that you have new and updated games.

10
00:00:47,420 --> 00:00:50,110
And the more button which
is a cluster header,

11
00:00:50,110 --> 00:00:52,910
it's also a simple
horizontal linear layout.

12
00:00:52,910 --> 00:00:54,980
So when things are simple,

13
00:00:54,980 --> 00:00:57,740
you don't necessarily want to
start writing custom layouts.

14
00:00:57,740 --> 00:01:01,310
Don't just use relative
layout everywhere

15
00:01:01,310 --> 00:01:05,980
because it's more versatile
than linear layout for example.

16
00:01:05,980 --> 00:01:08,700
That's just overkill for simpler things.

17
00:01:09,800 --> 00:01:11,748
>> So when a designer gives you a mock,

18
00:01:11,748 --> 00:01:15,660
how do you go about
starting to build that app?

19
00:01:15,660 --> 00:01:19,660
>> So hopefully at that point, like
we talked, we have not just one mock.

20
00:01:19,660 --> 00:01:23,640
But rather, at least two or
three that show how

21
00:01:25,200 --> 00:01:29,880
the design scales between small
screens and large screens.

22
00:01:29,880 --> 00:01:33,560
And then I want to
identify building blocks.

23
00:01:33,560 --> 00:01:37,680
So, if we talk about sometime like
a card which appears in a lot of places

24
00:01:37,680 --> 00:01:41,000
in the app,
I wouldn't want necessarily to start

25
00:01:41,000 --> 00:01:45,740
implementing a lot of
variants of the same card.

26
00:01:45,740 --> 00:01:49,240
Based on if it needs to show
a small image or a big image or

27
00:01:49,240 --> 00:01:52,930
maybe show a one line title,
instead of two line titles.

28
00:01:52,930 --> 00:01:57,258
So I'm trying to identify these
blocks and implement them as

29
00:01:57,258 --> 00:02:02,580
stand-alone classes, stand-alone layouts
and then start building on top of those.

30
00:02:02,580 --> 00:02:07,484
So you start from text view,
image view, spinner,

31
00:02:07,484 --> 00:02:11,055
and whatnot to build smaller blocks.

32
00:02:11,055 --> 00:02:16,771
And then hopefully you're able to
keep on taking those small blocks and

33
00:02:16,771 --> 00:02:22,450
build larger blocks while reusing
the same basic set of blocks.

34
00:02:22,450 --> 00:02:26,390
And what's nice about it is even though
you spend maybe a little bit more time

35
00:02:26,390 --> 00:02:32,440
up front, it becomes easier especially
if the design is consistent

36
00:02:32,440 --> 00:02:37,280
in how it applies its language to
evolve the app and to add new features.

37
00:02:37,280 --> 00:02:41,472
If the design is consistent, then you
keep on seeing the same blocks being

38
00:02:41,472 --> 00:02:44,461
used in different
configurations again and again.

39
00:02:44,461 --> 00:02:49,789
And then that's where your initial
investment starts paying off where

40
00:02:49,789 --> 00:02:55,430
you don't treat implementation of
a new screen as a brand new thing.

41
00:02:55,430 --> 00:03:01,190
But rather, maybe 50, 60, 70, however
much percent is already there, maybe

42
00:03:01,190 --> 00:03:05,450
it needs a little bit tweaking with
color, so maybe typography or whatnot.

43
00:03:05,450 --> 00:03:10,272
But hopefully, if the design is
consistent, then the implementation is

44
00:03:10,272 --> 00:03:14,098
also easier to move forward if
you already built for that.

45
00:03:14,098 --> 00:03:19,903
And it also becomes easier to apply
redesign, just on the visual level.

46
00:03:19,903 --> 00:03:24,099
If you want to tweak colors,
if you want to tweak typography,

47
00:03:24,099 --> 00:03:28,941
if you want to add maybe like we did
in Lollipop where you have this ripple

48
00:03:28,941 --> 00:03:31,880
effect when you press something.

49
00:03:31,880 --> 00:03:36,870
If you have a few pieces that you keep
on reusing, your styles, your layouts,

50
00:03:36,870 --> 00:03:42,250
then you do that visual
refresh in a fewer

51
00:03:42,250 --> 00:03:48,030
number of places and then hopefully they
get applied consistently everywhere.

52
00:03:48,030 --> 00:03:51,550
So for me I want to place the focus at
the beginning on getting the data right,

53
00:03:51,550 --> 00:03:57,918
especially for an app that is getting
its data from external sources.

54
00:03:57,918 --> 00:04:02,512
And then do closer to the pixels,
refine the pixels once you have

55
00:04:02,512 --> 00:04:07,532
the data to do the grid, to do
the typography, colors, animations,

56
00:04:07,532 --> 00:04:12,575
transitions, whatnot however much
time you have to spend on that,.

57
00:04:12,575 --> 00:04:16,338
And I think it would be the same if you
had something like a Twitter client.

58
00:04:16,338 --> 00:04:21,991
You could start by pixel-perfecting
your layouts with some fake data.

59
00:04:21,991 --> 00:04:27,122
And then you discover that you know
nothing about fetching the data from

60
00:04:27,122 --> 00:04:32,920
Twitter, and it takes you the next
three months just to fetch the data.

61
00:04:32,920 --> 00:04:37,240
Or, just an example, so
I prefer to start from the data.

62
00:04:37,240 --> 00:04:41,880
I think about this as an iceberg where
you see the pretty pixels as maybe 5%,

63
00:04:41,880 --> 00:04:47,640
10% of above the surface, and
then there's a lot of work going

64
00:04:47,640 --> 00:04:50,800
below the surface,
if you will, to support that.

65
00:04:50,800 --> 00:04:53,820
>> You mentioned the tip of
the iceberg is what people see.

66
00:04:53,820 --> 00:04:57,210
So what exactly is going
on below the surface?

67
00:04:57,210 --> 00:05:00,620
How do you see the Google Play App?

68
00:05:00,620 --> 00:05:05,940
>> So what happens below the surface
is first of all to get the data from

69
00:05:05,940 --> 00:05:11,643
the network, so you can authenticate
to be on a server and get the data.

70
00:05:11,643 --> 00:05:13,969
And then maybe to cache it locally so

71
00:05:13,969 --> 00:05:18,152
that the next time you go from
the stream into the details page and

72
00:05:18,152 --> 00:05:22,820
back into the stream, we should be
using cached data, cached images.

73
00:05:22,820 --> 00:05:26,616
So that we don't put too
much strain on the battery.

74
00:05:26,616 --> 00:05:30,284
And also the app already shows
the information that it has.

75
00:05:30,284 --> 00:05:33,830
Then you have support
from multiple accounts.

76
00:05:33,830 --> 00:05:37,660
Then you have maybe persisting a few
bits here and there in the database.

77
00:05:38,670 --> 00:05:44,380
Then we have the billing flows,
which is, most of that

78
00:05:44,380 --> 00:05:48,840
work is done on the server to integrate
with different payment methods.

79
00:05:48,840 --> 00:05:51,200
And then there's the work
on the client as well.

80
00:05:51,200 --> 00:05:57,050
And another big part of the Play
store is downloading and

81
00:05:57,050 --> 00:05:59,660
installing apps and games.

82
00:05:59,660 --> 00:06:04,530
We are, on the Play store side,
we are in charge of downloading,

83
00:06:04,530 --> 00:06:06,840
installing, updating apps.

84
00:06:06,840 --> 00:06:11,556
And so that's another big chunk of,
once again, pretty much all of

85
00:06:11,556 --> 00:06:16,052
these have their surface bits,
which are pixels on the screen.

86
00:06:16,052 --> 00:06:21,425
And then there's a lot of work
going below the surface to bring

87
00:06:21,425 --> 00:06:27,668
that information for the right account,
and to put that on the screen.

88
00:06:27,668 --> 00:06:32,610
>> It's clear that you've worked on many
different iterations of Google Play app.

89
00:06:32,610 --> 00:06:37,385
How do you keep up to date with
the latest news in Android?

90
00:06:37,385 --> 00:06:42,657
>> There's a lot of information
on Google+ from very active

91
00:06:42,657 --> 00:06:47,295
Android developers who put
out a lot of tutorials.

92
00:06:47,295 --> 00:06:52,322
And, Just

93
00:06:52,322 --> 00:06:57,575
from different blogs, and
sometimes I don't necessarily go and

94
00:06:57,575 --> 00:07:02,732
read deeply a certain series about
recycler view or a view page or

95
00:07:02,732 --> 00:07:07,430
what-not or how to configure
the tool bar and action bar.

96
00:07:07,430 --> 00:07:09,200
I kind of try to put it like

97
00:07:10,270 --> 00:07:12,810
that I know that there's a lot
of information in there.

98
00:07:12,810 --> 00:07:17,340
And then when I do need that
deep level of information,

99
00:07:17,340 --> 00:07:20,130
then I go to those resources.

100
00:07:20,130 --> 00:07:21,960
>> Well thank you so
much for your time, Cyril.

101
00:07:21,960 --> 00:07:25,110
I think our students will really
enjoy hearing your perspective on

102
00:07:25,110 --> 00:07:27,010
what it's like to be
an Android app engineer.
