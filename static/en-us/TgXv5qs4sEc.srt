1
00:00:00,480 --> 00:00:04,380
So the final mobile constraint is the small screen. This might seem like

2
00:00:04,380 --> 00:00:07,310
the obvious mobile constraint and it basically means that we can't fit as

3
00:00:07,310 --> 00:00:09,100
much on a really small smartphone

4
00:00:09,100 --> 00:00:11,450
screen, but there's two really awesome techniques

5
00:00:11,450 --> 00:00:14,490
that we can use that will help us optimize for our small UI.

6
00:00:14,490 --> 00:00:17,530
>> Yeah, they're called combination and reflow. And

7
00:00:17,530 --> 00:00:19,470
we're going to talk to an Android designer developer

8
00:00:19,470 --> 00:00:21,320
called Mick Butchard, he's on the Android team,

9
00:00:21,320 --> 00:00:23,660
about how to make this work in your applications.

10
00:00:24,770 --> 00:00:25,710
>> So Andriod is not

11
00:00:25,710 --> 00:00:28,590
a one-size-fits-all OS. It comes in many different sizes

12
00:00:28,590 --> 00:00:31,170
and shapes. From small phones to large tablets, TVs and

13
00:00:31,170 --> 00:00:34,030
beyond. The great news is that Android has been built

14
00:00:34,030 --> 00:00:37,270
from the ground up to embrace this variety and give

15
00:00:37,270 --> 00:00:40,590
you tools in order to deal with it. So, from

16
00:00:40,590 --> 00:00:43,240
the very beginnings, Android has allowed you to scale your

17
00:00:43,240 --> 00:00:46,810
user interface up and down between different devices. The problem

18
00:00:46,810 --> 00:00:49,400
is that scaling approaches will only get you so far.

19
00:00:50,680 --> 00:00:52,610
so, I'm going to take you through some of

20
00:00:52,610 --> 00:00:55,210
the common pitfalls we see with this relying on

21
00:00:55,210 --> 00:00:58,240
scaling approaches, and then I'm going to go through some

22
00:00:58,240 --> 00:01:02,172
alternative ways of dealing with this. So the first

23
00:01:02,172 --> 00:01:05,384
problem we see commonly is one of having excessive

24
00:01:05,384 --> 00:01:08,894
line lengths. So in this application, the text and

25
00:01:08,894 --> 00:01:11,582
images are running the full width of the device's

26
00:01:11,582 --> 00:01:15,760
screen. On a smaller, phone-size device, this might be fine.

27
00:01:15,760 --> 00:01:17,650
But as you get beyond a certain

28
00:01:17,650 --> 00:01:21,280
size this becomes uncomfortable. When you, especially when

29
00:01:21,280 --> 00:01:25,090
you're looking at line lengths of text, you want to be aiming for between 45 and

30
00:01:25,090 --> 00:01:28,410
75 characters of text in order to maintain

31
00:01:28,410 --> 00:01:30,480
a comfortable reading experience. The user can easily

32
00:01:30,480 --> 00:01:33,390
scan across it. And in this application we

33
00:01:33,390 --> 00:01:35,020
can see that this is clearly exceeding that.

34
00:01:37,430 --> 00:01:39,530
The next problem we commonly see is one

35
00:01:39,530 --> 00:01:42,330
of unbalanced content. So, in this example, we

36
00:01:42,330 --> 00:01:45,498
can see there's a lot of content clustered up in the top left of the screen,

37
00:01:45,498 --> 00:01:48,170
and then leaving huge amounts of white space

38
00:01:48,170 --> 00:01:50,320
across the rest of the screen. This leads

39
00:01:50,320 --> 00:01:52,330
to a very kind of unbalanced feeling, which

40
00:01:52,330 --> 00:01:55,600
makes your application feel completely unoptimized for this

41
00:01:57,950 --> 00:02:01,060
device. And the last problem we commonly see is more

42
00:02:01,060 --> 00:02:04,680
of a missed opportunity almost, of not making the best use

43
00:02:04,680 --> 00:02:07,260
of the real estate available to you. So in this

44
00:02:07,260 --> 00:02:10,979
example we might have an application which shows many photos. As

45
00:02:10,979 --> 00:02:13,190
we can, see they're these tiny little thumbnails all grouped

46
00:02:13,190 --> 00:02:16,319
over to one side. It really is a shame not to

47
00:02:16,319 --> 00:02:19,041
make use of these beautiful big screens, when, all this

48
00:02:19,041 --> 00:02:23,010
extra real estate, when it is available to you. So you

49
00:02:23,010 --> 00:02:25,210
want to be avoiding this. So these are

50
00:02:25,210 --> 00:02:28,530
some of the common pitfalls we see in relying

51
00:02:28,530 --> 00:02:31,300
on scaling approaches, and the answer to dealing with

52
00:02:31,300 --> 00:02:34,330
these problems really is to adopt a responsive mobile

53
00:02:34,330 --> 00:02:39,300
design to respond to the device's characteristics. So here

54
00:02:39,300 --> 00:02:41,360
are three techniques you can use in order to

55
00:02:41,360 --> 00:02:44,800
do this. So the first technique is simply one

56
00:02:44,800 --> 00:02:47,800
of combination. This is if you have extra room,

57
00:02:47,800 --> 00:02:51,050
combining things from different screens onto a single screen in

58
00:02:51,050 --> 00:02:52,870
order to make up, to fill up the space. So

59
00:02:53,950 --> 00:02:57,290
in this example, we've got a typical master detail view

60
00:02:57,290 --> 00:03:00,120
which on a phone would be on two separate screens. So

61
00:03:00,120 --> 00:03:02,390
clicking through from a list item for example might show

62
00:03:02,390 --> 00:03:07,240
subsequent details. On a larger device with sufficient width, we

63
00:03:07,240 --> 00:03:10,110
might show both of these things at once. This will

64
00:03:10,110 --> 00:03:12,900
avoid the problem of having those excessive line lengths and make

65
00:03:12,900 --> 00:03:17,190
better use of the screen real estate. The second

66
00:03:17,190 --> 00:03:20,510
technique is one that we call macro reflow. So this

67
00:03:20,510 --> 00:03:23,560
is taking the major building blocks of your application and

68
00:03:23,560 --> 00:03:25,870
reflowing them or rearranging them on the screen in order

69
00:03:25,870 --> 00:03:28,390
to make better use of the space. So in

70
00:03:28,390 --> 00:03:31,310
this example, we simply move something like a large header

71
00:03:31,310 --> 00:03:35,220
image and body text instead of being vertically stacked above

72
00:03:35,220 --> 00:03:38,440
each other to be horizontally stacked next to each other.

73
00:03:38,440 --> 00:03:41,810
So also gives the image more space to kind of to show off on the,

74
00:03:41,810 --> 00:03:44,110
the larger amounts of screen real estate, as

75
00:03:44,110 --> 00:03:47,560
well as avoiding those excessive line lengths when

76
00:03:47,560 --> 00:03:50,080
it's in a landscape device. So this is

77
00:03:50,080 --> 00:03:52,550
not only useful for different sized devices, you

78
00:03:52,550 --> 00:03:54,260
can also use this kind of trick when

79
00:03:54,260 --> 00:03:56,750
changing on the same device between different orientations.

80
00:03:59,120 --> 00:04:00,840
And the last technique I want to go

81
00:04:00,840 --> 00:04:04,248
through is something we call micro reflow. So

82
00:04:04,248 --> 00:04:06,974
this technique really focuses on the individual blocks

83
00:04:06,974 --> 00:04:09,933
within your design and it delegates responsibility to those

84
00:04:09,933 --> 00:04:12,775
individual blocks to optimize themselves given a certain

85
00:04:12,775 --> 00:04:15,280
amount of space. So, a couple of examples

86
00:04:15,280 --> 00:04:18,660
of doing that. On the left here, we

87
00:04:18,660 --> 00:04:23,870
have a list type application which, given sufficient space,

88
00:04:23,870 --> 00:04:26,290
might lead to those excessive line lengths or very unbalanced

89
00:04:26,290 --> 00:04:29,620
views. So instead of that, each individual list item knows that,

90
00:04:29,620 --> 00:04:32,840
given a certain amount of space, how to draw itself. So

91
00:04:32,840 --> 00:04:35,850
once it gets over a certain size, a certain amount of

92
00:04:35,850 --> 00:04:39,960
width available to the device it'll change its representation. Instead of

93
00:04:39,960 --> 00:04:41,830
being a list item, it might change to say, a grid,

94
00:04:41,830 --> 00:04:45,110
grid representation. So this will allow you to have a, you

95
00:04:45,110 --> 00:04:49,470
know, fill the space better. The second example, is if you

96
00:04:49,470 --> 00:04:52,850
can't, if there's simply no way to introduce

97
00:04:52,850 --> 00:04:56,230
more content you can introduce a margin point

98
00:04:56,230 --> 00:04:59,230
instead. So in this form-type application on the

99
00:04:59,230 --> 00:05:01,880
right when we go for beyond the phone,

100
00:05:01,880 --> 00:05:03,560
past a certain size, when there just isn't

101
00:05:03,560 --> 00:05:05,890
anymore content we can show on screen, we

102
00:05:05,890 --> 00:05:08,720
simply introduce a margin point so it doesn't

103
00:05:08,720 --> 00:05:11,400
end up being excessively long or excessively unbalanced.

104
00:05:12,700 --> 00:05:14,690
>> So Nick just talked to us about some really awesome

105
00:05:14,690 --> 00:05:18,850
UI techniques for small screens. But the small screen affects a lot more

106
00:05:18,850 --> 00:05:22,720
than just the UI. It actually really affects the UX of your M. Yeah,

107
00:05:22,720 --> 00:05:25,190
simply taking a web or desktop app and shrinking it down so that

108
00:05:25,190 --> 00:05:28,220
it fits into a sm, small screen is probably not the way to go.

109
00:05:28,220 --> 00:05:30,400
>> Yeah, you really need to think mobile first and optimize

110
00:05:30,400 --> 00:05:34,010
your flow for the smartphone. So how do we do this? Wireframing.

111
00:05:34,010 --> 00:05:34,390
>> Wireframing.
