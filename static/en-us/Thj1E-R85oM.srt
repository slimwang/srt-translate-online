1
00:00:00,450 --> 00:00:04,370
So far you've practiced creating
an array and initializing the array.

2
00:00:04,370 --> 00:00:07,270
And now you'll practice writing code
to access elements of the array.

3
00:00:07,270 --> 00:00:08,480
And knowing this,

4
00:00:08,480 --> 00:00:12,650
you can use the value of an array
index to set the text on text view.

5
00:00:12,650 --> 00:00:15,700
So for
now you'll access elements of an array

6
00:00:15,700 --> 00:00:18,140
by printing the value
to the Android logs.

7
00:00:18,140 --> 00:00:22,240
So remember you can access the logcat
manager from this button here.

8
00:00:22,240 --> 00:00:26,700
So given the code that we have now,
nothing shows up on the screen just yet.

9
00:00:26,700 --> 00:00:28,920
And remember that we introduced
logging back in the Android for

10
00:00:28,920 --> 00:00:30,100
Beginners course.

11
00:00:30,100 --> 00:00:32,840
So there we learned that Android
keeps a system log of what is

12
00:00:32,840 --> 00:00:34,310
happening on the device.

13
00:00:34,310 --> 00:00:36,730
It's a running log of
messages from the system.

14
00:00:36,730 --> 00:00:40,420
You can think of it as a diary that
includes the time something happened and

15
00:00:40,420 --> 00:00:41,765
the description of what happened.

16
00:00:41,765 --> 00:00:43,220
These system messages are helpful for

17
00:00:43,220 --> 00:00:46,140
debugging and we could check
the logs to go back in time

18
00:00:46,140 --> 00:00:49,570
to figure out what's happening in
the device before the problem occurred.

19
00:00:49,570 --> 00:00:52,350
You witness this firsthand when we
were building the just Java app

20
00:00:52,350 --> 00:00:54,370
back in the Android for
Beginners course.

21
00:00:54,370 --> 00:00:55,600
When an app crashed,

22
00:00:55,600 --> 00:00:59,540
we could see the error messages in
the logs to help us debug the problems.

23
00:00:59,540 --> 00:01:03,886
Remember in Android Studio that the
messages appear in the logcat Window.

24
00:01:03,886 --> 00:01:06,526
Now in addition to using
the log to view errors,

25
00:01:06,526 --> 00:01:09,432
we as developers can also
write messages to the log.

26
00:01:09,432 --> 00:01:12,680
And we call this process of
writing to a log, logging.

27
00:01:12,680 --> 00:01:14,400
This can help us temporarily
debug our app or

28
00:01:14,400 --> 00:01:17,640
just double-check the state of
our app while it's running.

29
00:01:17,640 --> 00:01:20,710
So it's similar to using the debug
tool where we can add breakpoints

30
00:01:20,710 --> 00:01:23,140
to check the state of different
variables in our app and

31
00:01:23,140 --> 00:01:26,590
this allows us to write the value
of certain variables to the logs.

32
00:01:26,590 --> 00:01:29,480
But personally, I like using logging
statements because they're quicker.

33
00:01:29,480 --> 00:01:32,350
So instead of manually stepping
through each line of code in the app,

34
00:01:32,350 --> 00:01:36,640
you just let the app run as normal and
log messages get printed along the way.

35
00:01:36,640 --> 00:01:39,490
So this is a helpful article
on how to write log messages.

36
00:01:39,490 --> 00:01:42,860
You just need a single line of code for
one log message.

37
00:01:42,860 --> 00:01:46,280
Notice that there are five different
categories of log messages

38
00:01:46,280 --> 00:01:49,412
based on how severe or
urgent the message is.

39
00:01:49,412 --> 00:01:51,170
So it ranges from verbose messages,

40
00:01:51,170 --> 00:01:55,250
which are just nice to know messages,
all the way to error messages, which

41
00:01:55,250 --> 00:01:59,640
mean severe issues such as when your app
is running into unexpected behavior.

42
00:01:59,640 --> 00:02:03,360
So for now, we're just going to
practice writing verbose log messages

43
00:02:03,360 --> 00:02:05,950
to help us check the state of
certain variables in our app.

44
00:02:05,950 --> 00:02:10,900
Notice for all these log messages,
they required two strings as inputs.

45
00:02:10,900 --> 00:02:13,710
So clicking on this first Log.v method,

46
00:02:13,710 --> 00:02:17,005
we see that the first input
parameter is a tag name.

47
00:02:17,005 --> 00:02:20,665
So anyone can print to the logs,
the Android systems, or other apps.

48
00:02:20,665 --> 00:02:24,305
So we use this tag to identify
where the message is coming from.

49
00:02:24,305 --> 00:02:27,205
Often for the tag,
we just use the name of the activity or

50
00:02:27,205 --> 00:02:29,235
class the logging statement is found in.

51
00:02:29,235 --> 00:02:31,995
For example, we can have a log
statement in the numbers activity and

52
00:02:31,995 --> 00:02:34,885
we can make the tag just be
the numbers activity string.

53
00:02:34,885 --> 00:02:37,135
The second parameter is message, and

54
00:02:37,135 --> 00:02:39,840
this is just the message
we'd see appear in the logs.

55
00:02:39,840 --> 00:02:42,970
And the second parameter is message,
and this is just the message we'd

56
00:02:42,970 --> 00:02:46,790
see appear in the logs, and it can
be whatever you'd like to be logged.

57
00:02:46,790 --> 00:02:50,641
So going back to that main article,
we see an example down here.

58
00:02:50,641 --> 00:02:56,354
It's a Log.I method call, which we
know from here is an information log.

59
00:02:56,354 --> 00:03:01,350
We see that the tag name here is main
activity and the message is here.

60
00:03:01,350 --> 00:03:06,290
So in our message parameter, we use the
plus operator to concatenate strings.

61
00:03:06,290 --> 00:03:09,793
So string concatenation is a fancy
way to say, string addition.

62
00:03:09,793 --> 00:03:11,969
Similar to how we add numbers together,

63
00:03:11,969 --> 00:03:14,407
we can merge strings
with the plus operator.

64
00:03:14,407 --> 00:03:18,701
In this case, we're merging this string
with this position variable to create

65
00:03:18,701 --> 00:03:20,490
a much longer string.

66
00:03:20,490 --> 00:03:24,100
So in the logcat,
you'll see MyActivity as the tag name.

67
00:03:24,100 --> 00:03:29,270
And then the message
MyClass.View- get item number 1.

68
00:03:29,270 --> 00:03:33,010
And this is assuming that the value
of the position variable is 1.

69
00:03:33,010 --> 00:03:35,650
Here's an example in
our NumbersActivity.

70
00:03:35,650 --> 00:03:40,568
So I added these two log messages at
the bottom of our onCreate method.

71
00:03:40,568 --> 00:03:42,326
Now I'm going to run
the app on my device.

72
00:03:42,326 --> 00:03:44,128
[BLANK_AUDIO]

73
00:03:44,128 --> 00:03:47,931
Now with the app running, I'm going to
navigate to the numbers activity and

74
00:03:47,931 --> 00:03:50,890
notice that these two messages
in the log output appear.

75
00:03:52,090 --> 00:03:56,165
So we get the statements
the word at index 0 is one and

76
00:03:56,165 --> 00:03:58,310
the word at index 1 is two.

77
00:03:58,310 --> 00:03:59,310
Now notice two things here.

78
00:04:00,340 --> 00:04:04,250
First, we need to add a buffer
space after the colon, so

79
00:04:04,250 --> 00:04:07,440
that all this text isn't
all scrunched up together.

80
00:04:07,440 --> 00:04:10,215
And secondly, we didn't put this

81
00:04:10,215 --> 00:04:15,010
words[0] in quotations because we

82
00:04:15,010 --> 00:04:20,010
want the value at this index, not
the literal string with the brackets.

83
00:04:20,010 --> 00:04:23,200
So to summarize, printing out the log
message is a really useful way

84
00:04:23,200 --> 00:04:26,360
to make sure that the variable has
the expected value you expect it to.

85
00:04:27,470 --> 00:04:31,900
So these log messages will be temporary
and we'll remove them later on.

86
00:04:31,900 --> 00:04:34,590
Now let's put logging to
practice in your Miwok app.

87
00:04:34,590 --> 00:04:37,330
Take the time to log
messages in your code so

88
00:04:37,330 --> 00:04:40,360
that you can see the value of
each element in the words array.

89
00:04:40,360 --> 00:04:43,500
And so this is the expected output
in the logs and go ahead and

90
00:04:43,500 --> 00:04:44,970
check this box when you're done.
