1
00:00:00,140 --> 00:00:02,110
In case you're not terribly familiar with XML, let's spend

2
00:00:02,110 --> 00:00:05,030
a few minutes talking syntax. Even if you are familiar,

3
00:00:05,030 --> 00:00:07,410
it might make sense to follow along with this little

4
00:00:07,410 --> 00:00:11,820
review. So in XML, elements are the basic building blocks

5
00:00:11,820 --> 00:00:16,540
of an XML document. Now an XML element is composed

6
00:00:16,540 --> 00:00:20,510
of an open tag and a closed tag, now this

7
00:00:20,510 --> 00:00:22,930
is some data drawn from the New York Times developer

8
00:00:22,930 --> 00:00:26,070
API Encourage you to have a look at this site.

9
00:00:26,070 --> 00:00:28,380
We are going to look at some data from the most

10
00:00:28,380 --> 00:00:32,940
popular API. These are for example articles that are most frequently

11
00:00:32,940 --> 00:00:35,870
emailed among readers of the New York Times. Okay, so

12
00:00:35,870 --> 00:00:39,340
let's look at a couple of examples here. So, the first

13
00:00:39,340 --> 00:00:42,090
thing that we might notice about this particular document is

14
00:00:42,090 --> 00:00:45,810
that we have some tags for num results or some elements

15
00:00:45,810 --> 00:00:48,540
that have to do with the number of results. So,

16
00:00:48,540 --> 00:00:51,100
this is actually result set from having done a query to

17
00:00:51,100 --> 00:00:54,490
the most popular API and we've got a, an

18
00:00:54,490 --> 00:00:56,890
element that tells us how many results were identified

19
00:00:56,890 --> 00:01:00,160
by our query. And then the list of results

20
00:01:00,160 --> 00:01:03,630
follows. Now this happens to be a single result here.

21
00:01:03,630 --> 00:01:05,590
And we can see that this result begins right

22
00:01:05,590 --> 00:01:09,910
here with this open tag and closes right here

23
00:01:09,910 --> 00:01:13,530
with this close tag. Okay. Now just as a

24
00:01:13,530 --> 00:01:16,280
couple of other examples of the data within this particular

25
00:01:16,280 --> 00:01:18,830
result, we can take a look at the byline, note that

26
00:01:18,830 --> 00:01:21,310
it's got a close tag, as well. And some of the

27
00:01:21,310 --> 00:01:24,180
other elements, here if you note the title for example, this

28
00:01:24,180 --> 00:01:28,760
happens to be an article about bedbugs. Okay. So, this provides an

29
00:01:28,760 --> 00:01:31,560
example using some really nicely named tags. We know what these

30
00:01:31,560 --> 00:01:35,690
mean. Now, there's another aspect of XML that we need to concern

31
00:01:35,690 --> 00:01:38,280
ourselves with especially given some of the exercises that we're going

32
00:01:38,280 --> 00:01:41,660
to have. Later on. And those have to do with attributes for

33
00:01:41,660 --> 00:01:45,770
XML elements. Now, this document provides a number of very

34
00:01:45,770 --> 00:01:49,780
nice examples of elements in XML. But what we don't

35
00:01:49,780 --> 00:01:53,000
have here are any examples of attributes for any of

36
00:01:53,000 --> 00:01:56,080
these elements being used. So what I'd like to do here

37
00:01:56,080 --> 00:01:58,220
is talk about essentially the two types of data that

38
00:01:58,220 --> 00:02:01,130
we're going to look at that have been encoded in XML. One

39
00:02:01,130 --> 00:02:04,140
is this more documented oriented type of XML, which is

40
00:02:04,140 --> 00:02:07,450
originally the type of data that XML was designed to encode.

41
00:02:07,450 --> 00:02:09,520
But then we can also take a look at

42
00:02:09,520 --> 00:02:12,970
something like this. Okay, now this is actual data from

43
00:02:12,970 --> 00:02:16,300
the OpenStreetMap project. This is a pretty close

44
00:02:16,300 --> 00:02:19,295
zoomed in view from OpenStreetMap of West Belmont

45
00:02:19,295 --> 00:02:22,790
avenue. Particularly the 1000 block. And you can see right

46
00:02:22,790 --> 00:02:25,590
here, there's a Giardano's Restaurant here. Giardano's is a famous

47
00:02:25,590 --> 00:02:29,330
pizza chain in Chicago. So, this is data that is

48
00:02:29,330 --> 00:02:33,280
essentially from a layer on top of that particular map.

49
00:02:33,280 --> 00:02:35,650
This is data that is human created. So, users

50
00:02:35,650 --> 00:02:39,080
of OpenStreetMap have actually added this data on

51
00:02:39,080 --> 00:02:44,200
top of the map data. And what I want to point out here is that this is very much

52
00:02:44,200 --> 00:02:48,750
not document oriented. This is just data. Okay? And

53
00:02:48,750 --> 00:02:50,680
a lot of times you see HTML used in this

54
00:02:50,680 --> 00:02:54,900
way, you'll see that attributes are heavily used. So

55
00:02:54,900 --> 00:02:58,500
in this particular example, this is the node that represents

56
00:02:58,500 --> 00:03:00,650
the Giordano's restaurant. We can see that there is

57
00:03:00,650 --> 00:03:03,880
a number of attributes specified for this particular element.

58
00:03:03,880 --> 00:03:07,450
Common among them are the latitude and longitude attributes

59
00:03:07,450 --> 00:03:10,870
that this particular annotation applies to. So, essentially what

60
00:03:10,870 --> 00:03:13,920
this data element provides is a mapping from geographic

61
00:03:13,920 --> 00:03:19,740
coordinates to more common street address coordinates. Okay? So

62
00:03:19,740 --> 00:03:22,000
this is a good example of attributes in XML

63
00:03:22,000 --> 00:03:23,650
and there's one other thing that I want to point

64
00:03:23,650 --> 00:03:26,970
out here. And that is this type of tag here.

65
00:03:26,970 --> 00:03:30,050
Now in this particular data they're doing something that I probably

66
00:03:30,050 --> 00:03:31,710
wouldn't do, but it is the type of thing that

67
00:03:31,710 --> 00:03:34,390
you're going to see as a data scientist and likely already

68
00:03:34,390 --> 00:03:36,620
have. Essentially, they've just got a bunch of key value

69
00:03:36,620 --> 00:03:40,360
pairs that are encoded in something called a tag element. And,

70
00:03:40,360 --> 00:03:43,740
in this case, none of these tag elements have a

71
00:03:43,740 --> 00:03:48,740
close tag. Instead, they use this special xml syntax where you

72
00:03:48,740 --> 00:03:51,330
can simply create what are called empty tags, that

73
00:03:51,330 --> 00:03:54,120
is tags that don't have any content. All of

74
00:03:54,120 --> 00:03:56,590
the data for this type of tag is contained

75
00:03:56,590 --> 00:04:00,370
directly within its attributes. So the most emailed example

76
00:04:00,370 --> 00:04:04,100
here provides us a nice example of document oriented

77
00:04:04,100 --> 00:04:08,650
XML with lots of content inside the elements. And

78
00:04:08,650 --> 00:04:12,050
this particular example from your OpenStreetMap project provides us

79
00:04:12,050 --> 00:04:13,880
with other end of this spectrum which is very

80
00:04:13,880 --> 00:04:18,880
data oriented XML where all or almost all of the data

81
00:04:18,880 --> 00:04:23,070
is contained within attributes for the individual elements and in this

82
00:04:23,070 --> 00:04:26,660
types of cases, you often have mostly or at least many

83
00:04:26,660 --> 00:04:29,240
empty elements within the XML data that you are looking at.
