1
00:00:00,300 --> 00:00:05,790
And the DQ principle is also very useful for managing graceful

2
00:00:05,790 --> 00:00:10,560
degradation of service. So DQ defines to

3
00:00:10,560 --> 00:00:15,850
total system capacity. So if a server is saturated, meaning that

4
00:00:15,850 --> 00:00:21,110
we have reached the limit of the server in terms of DQ. That's a constant.

5
00:00:21,110 --> 00:00:26,200
DQ's a constant. And so if you reach that limit, then we have a choice

6
00:00:26,200 --> 00:00:29,570
of graceful degrading the service from the point

7
00:00:29,570 --> 00:00:32,439
of view of the client. One possibility is

8
00:00:32,439 --> 00:00:35,630
we keep the harvest the same meaning that

9
00:00:35,630 --> 00:00:39,070
every client request that comes in has complete fidelity

10
00:00:39,070 --> 00:00:41,620
in terms of the answers returned by the

11
00:00:41,620 --> 00:00:44,820
server. So D is fixed. Q comes down because

12
00:00:44,820 --> 00:00:47,490
DQ is a constant. That's one option. The

13
00:00:47,490 --> 00:00:51,860
other option, of course, is to keep the volume

14
00:00:51,860 --> 00:00:57,950
of clients that are service, that is the yield Q to be a constant, but decrease

15
00:00:57,950 --> 00:01:03,615
the harvest. So the fidelity of the results returned to the users is less than.

16
00:01:03,615 --> 00:01:11,290
100%, but we keeping more of the user community happy by serving more of them.

17
00:01:11,290 --> 00:01:13,740
Because DQ is a constant, it allows us

18
00:01:13,740 --> 00:01:17,460
to gracefully degrade the service being provided by

19
00:01:17,460 --> 00:01:22,150
the server depending on the choice you want to make in terms of fidelity of the

20
00:01:22,150 --> 00:01:27,970
result or the yield that you want to provide the user community. In other words.

21
00:01:27,970 --> 00:01:32,240
The DQ principle gives us an explicit strategy

22
00:01:32,240 --> 00:01:36,120
for managing saturation. So as a system administrator,

23
00:01:36,120 --> 00:01:38,400
when we make these decisions on which to

24
00:01:38,400 --> 00:01:42,560
sacrifice and which to keep constant, we know

25
00:01:42,560 --> 00:01:46,010
how our decisions are going to affect the harvest,

26
00:01:46,010 --> 00:01:47,990
how it's going to affect the yield. How it

27
00:01:47,990 --> 00:01:49,590
is going to affect the up time and so

28
00:01:49,590 --> 00:01:53,820
on. So the choices that a system provider has

29
00:01:53,820 --> 00:01:57,860
or strategies that a system provider can use

30
00:01:57,860 --> 00:02:01,180
in structuring the servers, knowing that DQ is

31
00:02:01,180 --> 00:02:05,210
a constant, is when the server is saturated.

32
00:02:05,210 --> 00:02:07,740
They can do cost based admission control. You pay

33
00:02:07,740 --> 00:02:13,227
more, you get more. That may be one way to do it. Or priority or value based

34
00:02:13,227 --> 00:02:15,830
admission control. That may be another way to

35
00:02:15,830 --> 00:02:20,320
deal with service saturation or reduce data freshness. That

36
00:02:20,320 --> 00:02:22,860
is the harvest may be the same, but

37
00:02:22,860 --> 00:02:26,280
you reduce the fidelity of the data. For instance,

38
00:02:26,280 --> 00:02:28,950
if I'm serving videos, and I can serve

39
00:02:28,950 --> 00:02:32,830
the videos at different bit rates, if the server

40
00:02:32,830 --> 00:02:38,400
is saturated, I might decide to serve the video to all the users, all the

41
00:02:38,400 --> 00:02:42,130
videos that they want, but at a lower bit rate. So that is reducing the

42
00:02:42,130 --> 00:02:48,810
fidelity. Of the data that is being harvested. So that's the idea behind the DQ

43
00:02:48,810 --> 00:02:52,740
principle, how it might be used for graceful

44
00:02:52,740 --> 00:02:55,590
degradation of service when the server is saturated.
