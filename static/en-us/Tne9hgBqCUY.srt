1
00:00:00,080 --> 00:00:02,120
So now that we've built it ourselves, I'm going to show

2
00:00:02,120 --> 00:00:04,040
you the easy way to do it, which is to

3
00:00:04,040 --> 00:00:06,980
use the built in Python type called a dictionary. And

4
00:00:06,980 --> 00:00:09,770
what a dictionary is is really an implementation of a hash

5
00:00:09,770 --> 00:00:12,980
table. It's built into Python. So it's much easier to

6
00:00:12,980 --> 00:00:17,350
use than defining our own hash table. So far, we've

7
00:00:17,350 --> 00:00:21,650
seen two complex types in Python. We've seen the string

8
00:00:21,650 --> 00:00:25,480
type and we've seen the list type. Now we're going to introduce

9
00:00:25,480 --> 00:00:27,870
the dictionary type. So there are many things that are

10
00:00:27,870 --> 00:00:30,470
common between these three. There are other things that are

11
00:00:30,470 --> 00:00:33,420
different. So to create a string we could have a

12
00:00:33,420 --> 00:00:37,680
sequence of characters inside quotes. To create a list, we

13
00:00:37,680 --> 00:00:40,650
use the square bracket. And we could have a sequence

14
00:00:40,650 --> 00:00:44,600
of elements inside the square bracket, and the elements could

15
00:00:44,600 --> 00:00:46,800
be any type, unlike a string where they had to

16
00:00:46,800 --> 00:00:50,550
be characters. So, our string was a sequence of characters.

17
00:00:50,550 --> 00:00:56,260
Our list was a list of any kind of value. So, a list of elements of any value.

18
00:00:56,260 --> 00:00:59,330
The dictionary type we're going to create using the curly

19
00:00:59,330 --> 00:01:03,740
bracket. And the entries inside the dictionary are key

20
00:01:03,740 --> 00:01:06,410
value pairs. So here I've created a dictionary with

21
00:01:06,410 --> 00:01:09,110
two elements. And each element, the key is a

22
00:01:09,110 --> 00:01:12,310
string. Here is the string hydrogen and the value

23
00:01:12,310 --> 00:01:15,920
associated with that element is a number. The keys

24
00:01:15,920 --> 00:01:18,750
in a dictionary can be any immutable value, so they don't

25
00:01:18,750 --> 00:01:21,070
need to be strings, they could be numbers. They could be

26
00:01:21,070 --> 00:01:23,960
other things. The values can be any value. So what a

27
00:01:23,960 --> 00:01:29,230
dictionary is, is a set of key value pairs and the property

28
00:01:29,230 --> 00:01:31,310
that a dictionary will give us is like the hash table,

29
00:01:31,310 --> 00:01:34,230
that we can look up a key and get a value associated

30
00:01:34,230 --> 00:01:37,780
with that key. So one important property of all types is

31
00:01:37,780 --> 00:01:41,730
whether they're immutable or mutable. We saw that the string was immutable.

32
00:01:41,730 --> 00:01:44,720
That means once we create a string, we can't

33
00:01:44,720 --> 00:01:48,870
modify that string. It has the same value it always

34
00:01:48,870 --> 00:01:52,620
has. A list was mutable, we could change the values

35
00:01:52,620 --> 00:01:56,040
of elements in the list after we create the list.

36
00:01:56,040 --> 00:01:57,770
We could append to the list, adding new elements

37
00:01:57,770 --> 00:02:01,170
to it. A dictionary is also mutable. So after we

38
00:02:01,170 --> 00:02:03,610
create a dictionary, we could add new key value pairs

39
00:02:03,610 --> 00:02:07,040
to it. We could change the value of values associated

40
00:02:07,040 --> 00:02:12,640
with keys. We saw with strings, if s is a string, then we can do s index i.

41
00:02:12,640 --> 00:02:15,710
That will give us the ith letter in the

42
00:02:15,710 --> 00:02:19,830
string. With lists, we can do something very similar. If

43
00:02:19,830 --> 00:02:25,380
p is a list, we can do p index i to get the ith element of the list. With

44
00:02:25,380 --> 00:02:28,350
dictionaries, it's a little bit different. The syntax is

45
00:02:28,350 --> 00:02:32,160
the same. We can do d index k. With both

46
00:02:32,160 --> 00:02:36,120
strings and lists, these were numbers. Here the k is

47
00:02:36,120 --> 00:02:38,490
whatever the key value is. So this is a key

48
00:02:38,490 --> 00:02:41,490
in the dictionary. What d index k will give us

49
00:02:41,490 --> 00:02:45,520
the value associated with that key in the dictionary. We'll

50
00:02:45,520 --> 00:02:48,020
see some examples soon. We can also use our indexing

51
00:02:48,020 --> 00:02:50,800
and assignments. We saw, with the list, we could do

52
00:02:50,800 --> 00:02:54,180
this. That would replace the value of the ith element

53
00:02:54,180 --> 00:02:57,510
of p with whatever we have here. With the string,

54
00:02:59,040 --> 00:03:01,760
we can't do that. That produces an error.

55
00:03:01,760 --> 00:03:03,410
And the reason we can't do it is because

56
00:03:03,410 --> 00:03:05,190
strings are immutable. So there's no way to

57
00:03:05,190 --> 00:03:08,520
modify characters in a string. With the dictionary we

58
00:03:08,520 --> 00:03:11,150
can. And what the meaning of this, is

59
00:03:11,150 --> 00:03:13,610
very similar to the meaning of update in our

60
00:03:13,610 --> 00:03:16,140
hash table. So that's equivalent to update the

61
00:03:16,140 --> 00:03:19,160
value. The value associated with k to be v.
