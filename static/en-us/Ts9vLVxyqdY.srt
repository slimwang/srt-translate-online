1
00:00:00,250 --> 00:00:02,083
All right, so there's there's a bunch of ways you

2
00:00:02,083 --> 00:00:04,400
can imagine doing this. And here's, here's how I would

3
00:00:04,400 --> 00:00:08,330
suggest looking at it. So, for each of these 28

4
00:00:08,330 --> 00:00:10,960
positions, there's some number of steps that it's going to take

5
00:00:10,960 --> 00:00:14,408
before it either resets, that is to say, you know,

6
00:00:14,408 --> 00:00:17,900
re, re, re-chooses at random, or has actually reached the

7
00:00:17,900 --> 00:00:23,350
tippy top. So, let's, let's actually evaluate these. So if

8
00:00:23,350 --> 00:00:25,400
you, if you happen to start at 1, how many steps

9
00:00:25,400 --> 00:00:27,280
is it before you realize that you, that you're

10
00:00:27,280 --> 00:00:29,170
at 1? You have to evaluate 1, you have to

11
00:00:29,170 --> 00:00:32,119
evaluate 2, you have to evaluate 3, and you have

12
00:00:32,119 --> 00:00:34,260
to evaluate 4 to see that you're at local optimum.

13
00:00:34,260 --> 00:00:34,760
>> Mm-hm.

14
00:00:34,760 --> 00:00:37,380
>> So, there's going to be 4 evaluations if you start at 1. If you

15
00:00:38,430 --> 00:00:42,110
start at 2, then it's going to be 1, you're going to have to evaluate 1,

16
00:00:42,110 --> 00:00:45,780
2, 3, and 4 again. If you start 3, then you only need to

17
00:00:45,780 --> 00:00:49,790
evaluate 2, 3 and 4 to know that you are at a local optimum.

18
00:00:49,790 --> 00:00:50,655
>> Hm-mm.

19
00:00:50,655 --> 00:00:54,600
>> If you start 4, then you have to evaluate 4

20
00:00:54,600 --> 00:00:56,980
and then if you randomly step in this direction, you are also

21
00:00:56,980 --> 00:00:59,840
going to need to evaluate 2, 2 and 3. All right. So

22
00:00:59,840 --> 00:01:02,610
then, I, I finished writing down what all these different numbers are.

23
00:01:02,610 --> 00:01:05,740
For each, at each position here, I wrote down in red,

24
00:01:05,740 --> 00:01:08,200
how many steps it's going to take before it hits a local optimum

25
00:01:09,230 --> 00:01:13,340
including the ones here around the actual peak. And I wrote

26
00:01:13,340 --> 00:01:15,720
two numbers for the places that were these cusps where it can

27
00:01:15,720 --> 00:01:18,870
go either way. So, now, we can actually work

28
00:01:18,870 --> 00:01:20,460
out what the expected number of steps to the

29
00:01:20,460 --> 00:01:24,000
global optimum is. It turns out for 22 out

30
00:01:24,000 --> 00:01:29,434
of 28 of these points, the average 5.39 before they

31
00:01:29,434 --> 00:01:33,820
discovered that they're at a local optimum, at which

32
00:01:33,820 --> 00:01:36,290
point we have to start the whole process over again.

33
00:01:36,290 --> 00:01:38,100
And so whatever the expected value of reaching the

34
00:01:38,100 --> 00:01:40,750
local optimum is, we have to, we incur that same

35
00:01:40,750 --> 00:01:41,430
cost again.

36
00:01:41,430 --> 00:01:42,220
>> That makes sense.

37
00:01:42,220 --> 00:01:44,230
>> Good. Okay. So, for 4 out of 28.

38
00:01:44,230 --> 00:01:47,232
These guys here. Then, they're going to take 4 steps on

39
00:01:47,232 --> 00:01:50,230
average and end up with the peak. Then, the only

40
00:01:50,230 --> 00:01:52,120
other things that left to figure out or what happens

41
00:01:52,120 --> 00:01:55,870
at these two weird cusps where just a flip. It's

42
00:01:55,870 --> 00:01:58,200
going to flip a coin and either get stuck on a

43
00:01:58,200 --> 00:02:00,920
local optimum that's not global or go to the global

44
00:02:00,920 --> 00:02:05,640
optimum. So, in 2 out of 56 of these cases

45
00:02:08,060 --> 00:02:10,729
it's going to have chosen to go to the local

46
00:02:10,729 --> 00:02:13,960
optimum. The non global local optimum. And it just so turns

47
00:02:13,960 --> 00:02:16,260
out that it's 10 in both of those cases. It's

48
00:02:16,260 --> 00:02:19,460
10 steps before you realize you're stuck again. At which point

49
00:02:19,460 --> 00:02:21,550
it's going to start the whole process all over again

50
00:02:21,550 --> 00:02:26,980
because it's stuck. Then in 1/56th of the cases, we're going to

51
00:02:26,980 --> 00:02:30,260
be here and choose to go to the right and, and

52
00:02:30,260 --> 00:02:33,820
take six steps to get to the global and here 1/56th

53
00:02:33,820 --> 00:02:35,969
of the cases we're going to take five steps to get to the global.

54
00:02:37,140 --> 00:02:40,490
>> Okay, so just to be clear, so the way you got 28

55
00:02:40,490 --> 00:02:44,100
is that there are 28 numbers and you uniformly chose where to start.

56
00:02:44,100 --> 00:02:44,880
>> Yep.

57
00:02:44,880 --> 00:02:48,283
>> Where you got 56 is, you decided that for two of

58
00:02:48,283 --> 00:02:53,429
those numbers 15 and 20 you end up getting them 1/28th of

59
00:02:53,429 --> 00:02:56,835
the time. And then half of the time you do. The local

60
00:02:56,835 --> 00:02:59,060
optimum and half the time you end up doing the global optimum.

61
00:02:59,060 --> 00:03:03,040
And it just turns out that in the case, in

62
00:03:03,040 --> 00:03:04,975
the cases where you end up going through the local

63
00:03:04,975 --> 00:03:07,260
optimum, those both happen to take 10 steps. And that's

64
00:03:07,260 --> 00:03:10,520
how you got 2 out of 56. And the last

65
00:03:10,520 --> 00:03:14,540
thing to notice is that for point number 4, where

66
00:03:14,540 --> 00:03:16,620
you could go to the left or to the right,

67
00:03:16,620 --> 00:03:19,270
since you do each half the time, it's like saying

68
00:03:19,270 --> 00:03:22,660
the number of steps there is just uh,11 over 2.

69
00:03:22,660 --> 00:03:23,820
>> On

70
00:03:23,820 --> 00:03:26,010
average. Yeah. Very good. So that was folded into

71
00:03:26,010 --> 00:03:28,570
this 5.39 number. You're right. Thanks for pointing that out.

72
00:03:28,570 --> 00:03:33,520
>> Okay. Sure. So this all makes sense and obviously if you just add

73
00:03:33,520 --> 00:03:37,960
those all up you can solve for V and the answer is [COUGH] exactly.

74
00:03:39,300 --> 00:03:43,408
>> So, just algebraically simplifying this equation gives us V

75
00:03:43,408 --> 00:03:48,640
equals 5.36 plus 0.82 V. Solving for V gets us 29.78.

76
00:03:48,640 --> 00:03:53,480
So, it only takes 29.78 function valuations

77
00:03:53,480 --> 00:03:56,833
before we first hit the maximum. Ta-da.

78
00:03:56,833 --> 00:03:57,310
>> Michael?

79
00:03:57,310 --> 00:03:58,470
>> Yes sir.

80
00:03:58,470 --> 00:04:03,960
>> So, that seems unfortunate. Because here's a really simple algorithm, for

81
00:04:03,960 --> 00:04:09,000
i equals or, hey let's say x. For x equals 1 to 28.

82
00:04:09,000 --> 00:04:14,550
Compute f of x. If it's bigger than my previous one,

83
00:04:14,550 --> 00:04:18,490
then hold on to it. And then just return whatever is the biggest number

84
00:04:18,490 --> 00:04:23,485
I see. So, that's linear and that's 28 evaluations, which is less than 29.78.

85
00:04:23,485 --> 00:04:26,230
>> Yeah, that's a good algorithm in this case. But you, I,

86
00:04:26,230 --> 00:04:30,000
I guess your point is that this, this whole idea of hill climbing

87
00:04:30,000 --> 00:04:34,060
and using this, this local information is actually costing us a little bit

88
00:04:34,060 --> 00:04:38,740
compared to just enumerating all the possible inputs and just testing them off.

89
00:04:38,740 --> 00:04:39,700
>> Right. Which

90
00:04:39,700 --> 00:04:40,840
I guess makes sense because the numbers

91
00:04:40,840 --> 00:04:42,710
are really small and [UNKNOWN] and you have

92
00:04:42,710 --> 00:04:46,150
a whole bunch of local optima, and so it's going to take you a long time to

93
00:04:46,150 --> 00:04:50,720
luck into the right one. But, it seems kind of sad that there's nothing clever

94
00:04:50,720 --> 00:04:54,310
you can do here to do better than 28, which is kind of what you want to do.

95
00:04:54,310 --> 00:04:55,660
>> Well, there's a couple clever things we

96
00:04:55,660 --> 00:04:59,150
could do, right? So one is, we could random

97
00:04:59,150 --> 00:05:02,880
restart faster. It turns out [INAUDIBLE] magic [INAUDIBLE].

98
00:05:02,880 --> 00:05:05,020
So here's a question. What happens if you randomly

99
00:05:05,020 --> 00:05:08,760
restart after each function evaluation? How many function evaluations do

100
00:05:08,760 --> 00:05:11,530
we have to do, on average before we reach the maximum?

101
00:05:11,530 --> 00:05:16,646
>> I don't know. Oh, well, I guess it would be less than 28.

102
00:05:16,646 --> 00:05:18,067
>> It would be exactly 28.

103
00:05:18,067 --> 00:05:18,530
>> Oh it would?

104
00:05:18,530 --> 00:05:19,350
>> Yeah.

105
00:05:19,350 --> 00:05:21,480
>> 28's less than 28 so that's, that's fair.

106
00:05:21,480 --> 00:05:22,810
>> It's less than or equal to it, sure.

107
00:05:22,810 --> 00:05:24,590
>> Yeah, yeah, that's what I meant.

108
00:05:24,590 --> 00:05:25,990
>> And even better what happens if we actually

109
00:05:25,990 --> 00:05:29,004
keep track of points that we visited in the past?

110
00:05:29,004 --> 00:05:30,069
>> Then we don't pay

111
00:05:30,069 --> 00:05:32,760
the cost for re-evaluating them.

112
00:05:32,760 --> 00:05:33,360
>> That's right.

113
00:05:33,360 --> 00:05:35,000
>> So, then the only question is how long does it

114
00:05:35,000 --> 00:05:38,020
take us to luck up into getting between 15 and 20.

115
00:05:38,020 --> 00:05:40,950
>> Yes. Well, once we. Yeah, once we fall

116
00:05:40,950 --> 00:05:43,310
into that zone, then we're going to be done shortly afterwards.

117
00:05:43,310 --> 00:05:47,360
>> Right. so, how much of a, how much of a win is that on average?

118
00:05:47,360 --> 00:05:50,950
>> That's a good question. It's a little bit hard to tell. Because

119
00:05:50,950 --> 00:05:55,000
what's going to happen is if we follow this algorithm with the additional thing,

120
00:05:55,000 --> 00:05:59,550
additional attribute that says. If you already know

121
00:05:59,550 --> 00:06:02,880
the function valuation from som, from some previous iteration.

122
00:06:02,880 --> 00:06:04,428
We just reuse it, we don't get, we don't

123
00:06:04,428 --> 00:06:06,770
pay the cost for that. Then what's going to happen

124
00:06:06,770 --> 00:06:08,480
is we're going to get dropped off in random

125
00:06:08,480 --> 00:06:10,550
places in this space. We're going to hill climb visiting

126
00:06:10,550 --> 00:06:14,350
some things along the way. And possibly get drops

127
00:06:14,350 --> 00:06:17,050
in place where we've already done the function evaluation.

128
00:06:17,050 --> 00:06:17,995
>> Right.

129
00:06:17,995 --> 00:06:20,120
>> And therefore don't

130
00:06:20,120 --> 00:06:22,030
have to pay that cost again. But it's not as

131
00:06:22,030 --> 00:06:24,880
simple as saying how many different hops do we take

132
00:06:24,880 --> 00:06:27,460
before we land in this basin because if we land

133
00:06:27,460 --> 00:06:29,560
in say this basin here, the second one from the

134
00:06:29,560 --> 00:06:32,450
left. If, if we you know get dropped onto point

135
00:06:32,450 --> 00:06:35,770
14, it's going to stay in that zone for a while,

136
00:06:35,770 --> 00:06:38,040
which is actually kind of bad because it's taking lots

137
00:06:38,040 --> 00:06:40,964
of function evaluations in that same part of the space.

138
00:06:40,964 --> 00:06:43,170
>> But look. But what you just said is important,

139
00:06:43,170 --> 00:06:45,370
right? Since we're only, we're only going to pay the cost

140
00:06:45,370 --> 00:06:48,610
of doing the function evaluation once, that means in the worst

141
00:06:48,610 --> 00:06:54,000
case. We would end up hitting the three bad basins before

142
00:06:54,000 --> 00:06:57,020
we hit the fourth basin. In fact, we would end up

143
00:06:57,020 --> 00:07:00,330
hitting the three bad basins enough times that we would end up

144
00:07:00,330 --> 00:07:02,765
visiting all of the points in them. So we'd land in

145
00:07:02,765 --> 00:07:05,850
0.14 which would get us all the way over to the

146
00:07:05,850 --> 00:07:07,760
peak and just to the left, and then we would land

147
00:07:07,760 --> 00:07:10,400
in 5.5, which would get us to the right, so we cover

148
00:07:10,400 --> 00:07:12,560
everything in the basin. So, the worst case

149
00:07:12,560 --> 00:07:14,340
is we cover every single point in all

150
00:07:14,340 --> 00:07:19,910
three of the basins before we get lucky enough to land in the, the good basin.

151
00:07:19,910 --> 00:07:21,830
>> Right.

152
00:07:21,830 --> 00:07:26,610
>> And then. But, the moment we land in the good basin, we will get

153
00:07:26,610 --> 00:07:30,110
to. Am I right? We will get to avoid at least one of those numbers.

154
00:07:30,110 --> 00:07:33,280
>> No. Not necessarily. So, for example, if we

155
00:07:33,280 --> 00:07:35,970
start at 15 and we randomly move to the right.

156
00:07:35,970 --> 00:07:37,980
To know that we're at the optimum here, we have

157
00:07:37,980 --> 00:07:42,460
to check the point 19. So we've actually touched everything.

158
00:07:42,460 --> 00:07:43,514
>> No, we didn't touch 20.

159
00:07:44,740 --> 00:07:48,920
>> Well, we may have already, unluckily, hit 20

160
00:07:48,920 --> 00:07:50,500
because it's part of the right hand basin as well.

161
00:07:50,500 --> 00:07:50,780
>> That's true.

162
00:07:50,780 --> 00:07:53,600
>> But anyway, the point is that you're right.

163
00:07:53,600 --> 00:07:56,530
If we keep track of which points we've already visited,

164
00:07:56,530 --> 00:07:58,460
then we can't do worse than 28. Like, even if

165
00:07:58,460 --> 00:08:00,842
we're really, really unlucky, we can't do worse than 28.

166
00:08:00,842 --> 00:08:01,320
>> Right.

167
00:08:01,320 --> 00:08:02,930
>> Maybe, maybe on average it will be a little

168
00:08:02,930 --> 00:08:05,550
bit better than that. But but only one or two.

169
00:08:05,550 --> 00:08:08,626
>> But it will still be better.

170
00:08:08,626 --> 00:08:09,061
>> I think it still be better.

171
00:08:09,061 --> 00:08:09,882
>> On average, on average it will be better.

172
00:08:09,882 --> 00:08:12,245
>> Yeah, its true. I think, I think in this case

173
00:08:12,245 --> 00:08:15,722
it's, it's just a contrived example with lots of local optima and

174
00:08:15,722 --> 00:08:18,743
just a linear space so that there's a the, the attraction base

175
00:08:18,743 --> 00:08:22,350
ends up being relatively small compared to the size of the space.

176
00:08:22,350 --> 00:08:25,240
>> Hm. Okay, that makes sense. So, what,

177
00:08:25,240 --> 00:08:26,430
what should I learn from this? So I guess

178
00:08:26,430 --> 00:08:33,590
what I learned is randomized optimization or randomized hill climbing, here, may

179
00:08:33,590 --> 00:08:37,750
not do better than evaluating all this space in the worst case, but it won't do

180
00:08:37,750 --> 00:08:41,190
any worse. And every once in a while, you will get lucky and do

181
00:08:41,190 --> 00:08:46,240
much better. At least if your cost is function evaluations, as opposed to steps.

182
00:08:46,240 --> 00:08:48,490
>> That's right. Yeah and also, well and I, and, the

183
00:08:48,490 --> 00:08:51,510
thing that I was hoping, that you'd notice is this idea

184
00:08:51,510 --> 00:08:54,150
that randomized hill climbing, depends a lot on the size

185
00:08:54,150 --> 00:08:57,070
of the attraction base and around the global optima. So if

186
00:08:57,070 --> 00:08:59,100
we make that really big, then this is a huge win.

187
00:08:59,100 --> 00:09:01,580
If we make it really small then it's less of win.

188
00:09:01,580 --> 00:09:02,970
>> No and that makes a lot is right. So if,

189
00:09:02,970 --> 00:09:05,470
if, if the third one, had gone all the way from

190
00:09:05,470 --> 00:09:09,020
say number 3 to number 26. Then you would fall into

191
00:09:09,020 --> 00:09:11,560
it immediately and you would just, you would get there very quickly.

192
00:09:11,560 --> 00:09:12,560
>> Right.

193
00:09:12,560 --> 00:09:14,447
>> Okay, yeah, I see that, that makes, that

194
00:09:14,447 --> 00:09:16,650
makes a lot of sense. So, so when you asked

195
00:09:16,650 --> 00:09:19,170
me before what the advantages are, the advantages

196
00:09:19,170 --> 00:09:20,830
are, you know, you, you're in a place

197
00:09:20,830 --> 00:09:25,610
where the attraction basin for your global optima

198
00:09:25,610 --> 00:09:28,110
are in fact, relatively big. If you could,

199
00:09:28,110 --> 00:09:31,180
once you luck into that part of the space and there's lots of ways to luck

200
00:09:31,180 --> 00:09:34,410
into that part of the space, you can get there very quickly. So it's a big win.

201
00:09:34,410 --> 00:09:35,170
>> Agreed.

202
00:09:35,170 --> 00:09:37,390
>> Okay, good. You know, okay, that makes sense to me, I like that.
