1
00:00:00,400 --> 00:00:03,300
We are almost ready to
define the class NP.

2
00:00:03,300 --> 00:00:06,950
First, however, we need to define
running time for a non-deterministic

3
00:00:06,950 --> 00:00:11,290
machine, because it operates
differently from a deterministic one.

4
00:00:11,290 --> 00:00:15,250
Since we think about these possible
computations running in parallel,

5
00:00:15,250 --> 00:00:15,980
the running time for

6
00:00:15,980 --> 00:00:20,830
each computation path is the path
length from the initial configuration.

7
00:00:21,940 --> 00:00:24,110
And the running time of
the machine of the whole,

8
00:00:24,110 --> 00:00:28,380
is the maximum number of steps used
on any branch of the computation.

9
00:00:28,380 --> 00:00:32,272
Note that once we have a bound on the
length of any accepting configuration

10
00:00:32,272 --> 00:00:35,498
sequence, we can avoid looping
just by creating a time out.

11
00:00:35,498 --> 00:00:39,925
NP, then, is the set of languages
recognized by an order n to the k

12
00:00:39,925 --> 00:00:44,610
nondeterministic Turing machine,
where k is some natural number.

13
00:00:46,000 --> 00:00:50,030
Or, in other words, it's the set of
languages recognized in polynomial time

14
00:00:50,030 --> 00:00:51,410
by a non-deterministic machine.

15
00:00:52,730 --> 00:00:56,188
NP stands for
non-deterministic polynomial time.

16
00:00:56,188 --> 00:00:59,010
Non-determinism can be
a little confusing, but

17
00:00:59,010 --> 00:01:02,110
it helps to remember that a string
is recognized if it leads to

18
00:01:02,110 --> 00:01:06,540
any accepting computation, ie,
any accepting path in this tree.

19
00:01:07,940 --> 00:01:11,645
Not that any Turing Machine that is
a polynomial recognizer for a language,

20
00:01:11,645 --> 00:01:16,360
can easily be turned into a polynomial
decider by adding a timeout,

21
00:01:16,360 --> 00:01:19,920
since all accepting computations
are bounded in length by a polynomial.
