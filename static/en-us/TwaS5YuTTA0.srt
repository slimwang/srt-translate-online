1
00:00:00,170 --> 00:00:02,774
This lesson doesn't quite fit in with this unit, but the topic is important

2
00:00:02,774 --> 00:00:06,640
enough that I'll cover it here. As we move the camera or objects through a

3
00:00:06,640 --> 00:00:10,896
scene, models become larger and smaller. For very large scenes with many

4
00:00:10,896 --> 00:00:13,886
objects, rendering everything in the scene at full detail can make us lose any

5
00:00:13,886 --> 00:00:18,353
shred of interactivity. We've seen how there are limits to how large a texture

6
00:00:18,353 --> 00:00:21,113
needs to be, in fact it's usually best if the texel to pixel ratio stays at

7
00:00:21,113 --> 00:00:25,483
about one to one. More than that and the texture can just become a source of

8
00:00:25,483 --> 00:00:29,168
noise. Choosing the proper data representation is part of a much wider topic

9
00:00:29,168 --> 00:00:33,346
called level of detail. In this area of computer graphics, the focus is on how

10
00:00:33,346 --> 00:00:38,241
to change an object's representation as its size on the screen changes. Methods

11
00:00:38,241 --> 00:00:42,514
must balance tradeoffs between performance and quality. The two major areas

12
00:00:42,514 --> 00:00:46,165
where level of detail techniques come into play are with meshes and textures.

13
00:00:46,165 --> 00:00:49,441
Textures can be down sampled to create mid maps so that proper texture level

14
00:00:49,441 --> 00:00:53,660
can be used for a scene. As a textured object gets farther away a smaller

15
00:00:53,660 --> 00:00:58,370
texture on the mid map is needed. There also limits for how much memory a GPU

16
00:00:58,370 --> 00:01:02,504
has available for texture storage. For very large data sets such as a city or

17
00:01:02,504 --> 00:01:05,624
world map, it's impossible to save all the high resolution textures in memory

18
00:01:05,624 --> 00:01:10,568
at the same time. Since we know that when an object is small on the screen, it

19
00:01:10,568 --> 00:01:14,330
will need only a lower resolution texture. We can design our system to load

20
00:01:14,330 --> 00:01:18,301
only the low resolution textures out of the mip chain. As we zoom in on a

21
00:01:18,301 --> 00:01:22,230
particular object We can load the higher and higher resolution textures. At the

22
00:01:22,230 --> 00:01:25,090
same time, we can be deleting the higher resolution textures for objects that

23
00:01:25,090 --> 00:01:29,180
are now receding from view, or have been clipped off the screen entirely. As an

24
00:01:29,180 --> 00:01:31,880
object gets smaller on the screen, we can also consider simplifying the

25
00:01:31,880 --> 00:01:36,240
illumination equation. In other words using shaders with fewer instructions.

26
00:01:36,240 --> 00:01:39,620
For example, if we get far away enough from an object, its displacement map may

27
00:01:39,620 --> 00:01:44,015
add very little detail. Displacement maps help in particular by giving a more

28
00:01:44,015 --> 00:01:47,885
realistic silhouette to an object. At a distance, these fine details are less

29
00:01:47,885 --> 00:01:51,672
important. As an object gets smaller, switching from a displacement map to a

30
00:01:51,672 --> 00:01:56,250
normal map then to no bump map at all saves considerable amounts of memory.

31
00:01:56,250 --> 00:01:59,521
Mesh geometry itself can be thought of in the same terms. As a mesh gets

32
00:01:59,521 --> 00:02:03,683
smaller on the screen, fewer vertices are needed to represent its details. For

33
00:02:03,683 --> 00:02:06,947
objects that are tessellated into triangles, this means a smaller tessellation

34
00:02:06,947 --> 00:02:10,529
factor can be given. For more complex objects that do not have a simple

35
00:02:10,529 --> 00:02:13,812
tessellation factor, simplified meshes have to be either created by hand, or by

36
00:02:13,812 --> 00:02:18,560
what's called the decimation algorithm. Such algorithms try to find the least

37
00:02:18,560 --> 00:02:23,330
important triangles and patch up their areas with fewer triangles. Here's an

38
00:02:23,330 --> 00:02:27,395
example by Paolo Cignoni using mesh lab, a powerful and free mesh manipulator.

39
00:02:27,395 --> 00:02:30,410
This automatic techniques are effective but can run into problems with objects

40
00:02:30,410 --> 00:02:33,380
such as faces, where the lips and eyes should be subject to less simplification

41
00:02:33,380 --> 00:02:38,182
because of their importance. In mipmapping we interpolate between two textures

42
00:02:38,182 --> 00:02:41,927
in the mip pyramid. With level of detail techniques for geometry, we can do the

43
00:02:41,927 --> 00:02:46,090
same with what are called geomorphs. This technique can provide a smoother

44
00:02:46,090 --> 00:02:49,390
transition between levels of detail, but at the cost of additional processing

45
00:02:49,390 --> 00:02:52,440
and memory, which is in opposition to much of the point of using of level of

46
00:02:52,440 --> 00:02:57,544
detail techniques in the first place. It's much more common to simply replace a

47
00:02:57,544 --> 00:03:01,653
model with its simplified version when it becomes smaller on the screen. You

48
00:03:01,653 --> 00:03:04,910
sometimes see a pop if the two versions of the model differ considerably. 3JS

49
00:03:04,910 --> 00:03:09,022
supports this form of level of detail. In this demo, you can see different

50
00:03:09,022 --> 00:03:11,378
versions of the sphere model being used depending on the distance from the

51
00:03:11,378 --> 00:03:15,613
viewer. These were explicitly chosen by the programmer. If you look closely,

52
00:03:15,613 --> 00:03:17,489
you'll see four different levels of detail.
