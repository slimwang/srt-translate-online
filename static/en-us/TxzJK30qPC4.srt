1
00:00:00,530 --> 00:00:04,919
Our goal is to use a search strategy
similar to the route-finding problem,

2
00:00:04,919 --> 00:00:08,240
but to design an AI that
can play Tic Tac Toe.

3
00:00:08,240 --> 00:00:10,960
What, in your opinion,
should be the nodes and

4
00:00:10,960 --> 00:00:12,500
edges in the graph that we search?

5
00:00:13,560 --> 00:00:16,920
Option A,
should each cell be a separate node,

6
00:00:16,920 --> 00:00:19,350
with an edge connecting two
of them if they are adjacent?

7
00:00:20,579 --> 00:00:24,419
Option B, how about using the current
position of the computer player as

8
00:00:24,420 --> 00:00:29,420
a node, expressed as a row/column
tuple where row, column are {0, 1, 2}?

9
00:00:29,420 --> 00:00:33,130
Two such nodes can be
connected if their row and

10
00:00:33,130 --> 00:00:35,880
column values differ by at most one.

11
00:00:35,880 --> 00:00:39,629
For example, (0, 1) should be
connected to (1, 0) but not (2, 2).

12
00:00:40,939 --> 00:00:46,289
Option C, maybe we need to keep track of
the opponent's current position as well.

13
00:00:46,289 --> 00:00:49,629
So each node will be a pair of
tuples such as <(0, 1), (2, 0)>.

14
00:00:49,630 --> 00:00:53,850
For edges we can use the same rule-

15
00:00:53,850 --> 00:00:56,980
connect if the computer player's
positions differ by at most one.

16
00:00:58,299 --> 00:01:02,629
Option D, we could also think
of the whole board as a node, so

17
00:01:02,630 --> 00:01:08,030
we'll have one node for every possible
arrangement of Xs and Os on the board.

18
00:01:08,030 --> 00:01:11,900
In this case, connect two nodes if there
is a valid move that changes the board

19
00:01:11,900 --> 00:01:13,880
from one to the other.

20
00:01:13,879 --> 00:01:15,453
Mark the appropriate answer.

21
00:01:15,453 --> 00:01:18,288
[BLANK_AUDIO]

