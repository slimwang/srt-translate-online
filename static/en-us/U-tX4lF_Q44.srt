1
00:00:00,200 --> 00:00:03,560
In this problem, we're going to not repeat, repeated work, by

2
00:00:03,560 --> 00:00:08,390
implementing a relatively simple optimization technique. In this optimization,

3
00:00:08,390 --> 00:00:12,440
more commonly known as Common Expression Elimination, let's say we're given this

4
00:00:12,440 --> 00:00:18,110
snippet of code. If we look closely, we can see that the values of a,

5
00:00:18,110 --> 00:00:23,920
b and c. Don't change, yet we re-compute it when we calculate z.

6
00:00:23,920 --> 00:00:28,720
So, we're doing two additional, addition operations that we need to,

7
00:00:28,720 --> 00:00:35,110
It's perfectly possible to replace that sub-expression with the variable x.

8
00:00:35,110 --> 00:00:39,210
That way, we can take advantage of the fact that we calculated x, and

9
00:00:39,210 --> 00:00:43,190
avoid the additional work. Keep in mind that optimization was only possible

10
00:00:43,190 --> 00:00:48,120
because the values of a, b and c hadn't changed since the last time we used it.

11
00:00:48,120 --> 00:00:51,920
Here I've changed the middle statement to be b equals 2.

12
00:00:51,920 --> 00:00:56,790
That means that if I did the same optimization where I replaced this.

13
00:00:56,790 --> 00:01:01,420
With X, it's very much possible that X doesn't actually equal a,

14
00:01:01,420 --> 00:01:04,510
b and c added together. So our strategy for

15
00:01:04,510 --> 00:01:07,260
solving this is is going to be very similar to what you would do by hand.

16
00:01:07,260 --> 00:01:10,860
We're going to go through each statement one by one and in this scenario, let's

17
00:01:10,860 --> 00:01:14,880
say we're going to remember that we've already calculated the values of a plus b

18
00:01:14,880 --> 00:01:20,480
plus c and that happens to be stored in X. That way if we see a request. For

19
00:01:20,480 --> 00:01:24,930
a plus b plus c, we can simply replace it with x. However, at each step we also

20
00:01:24,930 --> 00:01:29,840
need to keep track of what values have changed. Here we can see that b equals 2

21
00:01:29,840 --> 00:01:36,190
now invalidates a plus b plus c, because we used the value of b there.

22
00:01:36,190 --> 00:01:40,610
Let's get started. Code time. So here I have the code for

23
00:01:40,610 --> 00:01:43,640
a solution. The first thing we have here is a helper function.

24
00:01:43,640 --> 00:01:48,840
That returns a list of all of the variables used in an expression. That way

25
00:01:48,840 --> 00:01:54,450
we can feed it a plus b plus c, it'll return a, b and c in a list. That way,

26
00:01:54,450 --> 00:02:00,170
it makes it much easier to check if new statements invalidate a cached response.

27
00:02:00,170 --> 00:02:03,690
So here we have our optimize function that takes in the abstract syntax tree.

28
00:02:03,690 --> 00:02:08,680
First thing we do is declare our empty data structures. First thing is

29
00:02:08,680 --> 00:02:15,830
the dictionary that has the saved calculations. And then we have the resulting.

30
00:02:15,830 --> 00:02:20,226
Optimized abstract syntax tree that starts out empty. So we're going to go

31
00:02:20,226 --> 00:02:23,550
through each statement in our abstract syntax tree. And extract a little bit of

32
00:02:23,550 --> 00:02:27,890
info from that statement to make it easier to reason about and write the code.

33
00:02:27,890 --> 00:02:32,660
The first thing we do in this loop is to check if the right hand side of this.

34
00:02:32,660 --> 00:02:36,450
Statement has already been computed. And we have a version of that right hand

35
00:02:36,450 --> 00:02:40,110
side, that doesn't have any values that have been changed. That means that we

36
00:02:40,110 --> 00:02:44,490
can use it. If that's the case, we are going to create our new statement.

37
00:02:44,490 --> 00:02:50,180
With the simplified right hand side. Otherwise we're going to remove. The saved

38
00:02:50,180 --> 00:02:55,210
expression calculations that use variables that we modify in this statement, and

39
00:02:55,210 --> 00:02:59,540
then we're going to update our available dictionary of safe calculations. And

40
00:02:59,540 --> 00:03:01,120
before we're done with the loop,

41
00:03:01,120 --> 00:03:05,530
we're going to add this new statement onto our abstract syntax tree, and

42
00:03:05,530 --> 00:03:07,430
once we're done with everything, we're going to return the result.
