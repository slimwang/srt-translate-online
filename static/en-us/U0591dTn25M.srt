1
00:00:00,400 --> 00:00:05,600
In the example we've shown here, we have three different DSL routers. The y axis

2
00:00:05,600 --> 00:00:09,170
shows the round trip time, or the latency

3
00:00:09,170 --> 00:00:11,880
to a nearby server in milliseconds, and is

4
00:00:11,880 --> 00:00:18,210
again shown in a long scale. We started an upload at the time 30 seconds shown

5
00:00:18,210 --> 00:00:19,950
on the plot. Now you can see that

6
00:00:19,950 --> 00:00:25,740
different modems experience a huge increase in latency,

7
00:00:25,740 --> 00:00:30,520
when we start this upload. Some of them experience a latency of as much as

8
00:00:30,520 --> 00:00:34,090
one second up from a typical latency of

9
00:00:34,090 --> 00:00:39,100
about ten miliseconds. One particular modem saw a

10
00:00:39,100 --> 00:00:41,960
round trip latency of as high as ten

11
00:00:41,960 --> 00:00:45,100
seconds during uploads. Now to remind you what's

12
00:00:45,100 --> 00:00:51,020
going on here, is that the modem itself has a buffer. Your ISP may be upstream

13
00:00:51,020 --> 00:00:53,240
of that buffer, and your access link may

14
00:00:53,240 --> 00:00:56,520
be draining that buffer at a certain rate. TCP

15
00:00:56,520 --> 00:01:00,060
senders in your home will send until they

16
00:01:00,060 --> 00:01:03,130
see lost packets, but if the buffer's large, the

17
00:01:03,130 --> 00:01:06,260
senders won't actually see those lost packets until

18
00:01:06,260 --> 00:01:09,650
this buffer has already filled up. The senders continue

19
00:01:09,650 --> 00:01:12,880
to send at increasingly faster rates until they

20
00:01:12,880 --> 00:01:16,050
see a loss. As a result, packets that are

21
00:01:16,050 --> 00:01:19,240
arriving at this buffer see increasing delays,

22
00:01:19,240 --> 00:01:22,110
and senders continue to send at faster rates,

23
00:01:22,110 --> 00:01:24,400
because without packet loss they don't have

24
00:01:24,400 --> 00:01:28,110
a signal to slow down. There's several solutions

25
00:01:28,110 --> 00:01:30,440
to the buffer bloat problem. One is

26
00:01:30,440 --> 00:01:33,900
obviously to use smaller buffers, but given that

27
00:01:33,900 --> 00:01:36,940
we have a lot of deployed infrastructure,

28
00:01:36,940 --> 00:01:40,840
simply reducing the buffer size in deployed routers,

29
00:01:40,840 --> 00:01:45,100
modems, switches, home Wi-Fi devices and so forth

30
00:01:45,100 --> 00:01:46,930
is a tall order. The other thing that

31
00:01:46,930 --> 00:01:49,160
we can do, is to use the traffic

32
00:01:49,160 --> 00:01:52,590
shaping methods that we have learned about. Consider that

33
00:01:52,590 --> 00:01:58,760
the buffer drains at a particular rate, which, in this case, is the rate of the

34
00:01:58,760 --> 00:02:02,240
uplink to the ISP. If we shape traffic

35
00:02:02,240 --> 00:02:06,020
such that traffic coming into the access link never

36
00:02:06,020 --> 00:02:09,910
exceeds the uplink that the ISP has

37
00:02:09,910 --> 00:02:13,330
provided us, then the buffer will never fill.

38
00:02:13,330 --> 00:02:16,480
Thus, by shaping traffic at the home router

39
00:02:16,480 --> 00:02:19,690
such that the rate that traffic is sent

40
00:02:19,690 --> 00:02:24,820
to the ISP, never exceeds the rate of the uplink, the modem buffer will never

41
00:02:24,820 --> 00:02:26,990
actually fill up. This type of shaping can

42
00:02:26,990 --> 00:02:30,540
be done on many open WRT capable routers,

43
00:02:30,540 --> 00:02:34,390
including the Bismark routers that we've developed here at Georgia Tech.
