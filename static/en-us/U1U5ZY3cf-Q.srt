1
00:00:00,200 --> 00:00:03,930
Let's look at our instruction scheduling quiz solution. As is

2
00:00:03,930 --> 00:00:07,130
this takes one cycle to do the load. If the load

3
00:00:07,130 --> 00:00:09,470
latency was one cycle, then the add could happen the

4
00:00:09,470 --> 00:00:12,580
next cycle, but because the load takes two cycles, the add

5
00:00:12,580 --> 00:00:15,704
can only happen in cycle three. So, we have one

6
00:00:15,704 --> 00:00:19,645
cycle three. The add takes only one cycle so the store

7
00:00:19,645 --> 00:00:22,730
can proceed. Then we can do the load, it doesn't depend

8
00:00:22,730 --> 00:00:25,570
on anything so we can do the load in cycle five.

9
00:00:25,570 --> 00:00:28,194
The add however can now happen only in cycle seven

10
00:00:28,194 --> 00:00:31,250
and finally the store happens in cycle eight. So as

11
00:00:31,250 --> 00:00:34,920
is, this executes in eight cycles. The question is now

12
00:00:34,920 --> 00:00:37,290
can we schedule this better to avoid some of these

13
00:00:37,290 --> 00:00:40,680
stalls? And we had a stall here and here. To

14
00:00:40,680 --> 00:00:43,190
avoid a stall here we need to place between the

15
00:00:43,190 --> 00:00:46,690
load and the add an instruction that can be done

16
00:00:46,690 --> 00:00:50,710
here without violating dependencies. We can see that this load

17
00:00:50,710 --> 00:00:53,800
here doesn't depend on any of the

18
00:00:53,800 --> 00:00:57,910
previous three instructions, except that we will destroy

19
00:00:57,910 --> 00:01:02,330
R1 if we move that instruction here. So the correct solution to this is we will

20
00:01:02,330 --> 00:01:05,670
move the load there, but we will rename

21
00:01:05,670 --> 00:01:08,400
our R1 into something else. So the program

22
00:01:08,400 --> 00:01:15,810
becomes now, load word R1 zero of R2 as before. Now we move the other load

23
00:01:15,810 --> 00:01:19,580
there, put the result in some R10, let's say.

24
00:01:19,580 --> 00:01:22,460
Now we can do this add because in the third

25
00:01:22,460 --> 00:01:25,421
cycle we can do it. Now that we have done

26
00:01:25,421 --> 00:01:27,941
this add we can actually do this the load has

27
00:01:27,941 --> 00:01:30,524
already happened, we are now in the second cycle

28
00:01:30,524 --> 00:01:33,900
since then. So the second add can happen. The add

29
00:01:33,900 --> 00:01:37,292
was using R1 now we have to use R10. Next,

30
00:01:37,292 --> 00:01:41,180
we will do our store and if last remaining store.

31
00:01:41,180 --> 00:01:43,770
As you can see, now we have a processor where

32
00:01:43,770 --> 00:01:46,570
whenever we need two cycles for the load there is

33
00:01:46,570 --> 00:01:49,440
something in between the load and the use of it's

34
00:01:49,440 --> 00:01:53,408
result. Here R1 is loaded, we then don't use R1 and

35
00:01:53,408 --> 00:01:57,180
then we add to it. And here R10 is loaded

36
00:01:57,180 --> 00:01:59,910
and then we don't do anything with R10 and then we

37
00:01:59,910 --> 00:02:02,690
add to it. So this can be done in six

38
00:02:02,690 --> 00:02:06,780
cycles, eliminating both of the stalled cycles that we previously had.
