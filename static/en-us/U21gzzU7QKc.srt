1
00:00:00,000 --> 00:00:02,000
[Norvig] Now let's put the whole thing together.

2
00:00:02,000 --> 00:00:04,000
I've defined zebra_puzzle. It's a function.

3
00:00:04,000 --> 00:00:07,000
It doesn't take any arguments because there's only 1 puzzle.

4
00:00:07,000 --> 00:00:10,000
There aren't different puzzles that require different arguments.

5
00:00:10,000 --> 00:00:13,000
It's going to return a pair of WATER and ZEBRA,

6
00:00:13,000 --> 00:00:20,000
so 2 house numbers indicating which house drinks water and which house owns a zebra.

7
00:00:20,000 --> 00:00:26,000
I've repeated houses = [1, 2, 3, 4, 5] and I've also defined first and middle.

8
00:00:26,000 --> 00:00:30,000
I've repeated the work of figuring out all the orderings. That's constraint #1.

9
00:00:30,000 --> 00:00:35,000
And then I've written the whole function as a generator expression,

10
00:00:35,000 --> 00:00:39,000
and I chose to do that rather than sticking with the nested for loops

11
00:00:39,000 --> 00:00:42,000
just because the structure is a little bit easier.

12
00:00:42,000 --> 00:00:45,000
What we're doing here is we're asking for the next version.

13
00:00:45,000 --> 00:00:50,000
So in other words, the first time through we're asking for the very first solution

14
00:00:50,000 --> 00:00:55,000
to this iterator expression where we say iterating through the 5 properties,

15
00:00:55,000 --> 00:01:00,000
if each of the tests is true, then return the values of WATER and ZEBRA

16
00:01:00,000 --> 00:01:04,000
and then keep on doing that for all possibilities.

17
00:01:04,000 --> 00:01:10,000
But I'm only interested in the very first one, which the next after nothing is the first.

18
00:01:10,000 --> 00:01:12,000
So go ahead and return that.

19
00:01:12,000 --> 00:01:14,000
Each of the constraints is very easy to state.

20
00:01:14,000 --> 00:01:19,000
Englishman is red, the Spaniard is dog, coffee is green and so on.

21
00:01:19,000 --> 00:01:23,000
We have some immediate rights and nextto, and that's the whole problem.

22
00:01:23,000 --> 00:01:27,000
So in some sense we have a solution; in another sense we know that it's going to take

23
00:01:27,000 --> 00:01:29,000
something like an hour or 2 to complete.

24
00:01:29,000 --> 00:01:32,000
And maybe we're not happy with that, so we're going to make it faster.

25
00:01:32,000 --> 00:01:36,000
But before I do that, I want to do a little bit of review of these generator expressions

26
00:01:36,000 --> 99:59:59,999
because probably you haven't seen this too much before.
