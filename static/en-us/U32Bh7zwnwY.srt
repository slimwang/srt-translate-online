1
00:00:00,000 --> 00:00:04,000
Now if you could do all of these just by writing with a pen,

2
00:00:04,000 --> 00:00:06,000
you wouldn't be in a computer class.

3
00:00:06,000 --> 00:00:08,000
So let's start modeling this.

4
00:00:08,000 --> 00:00:11,000
And so we're going to do our concept inventory.

5
00:00:11,000 --> 00:00:14,000
So what do we have? Well, these individual results here

6
00:00:14,000 --> 00:00:17,000
come from random variables.

7
00:00:17,000 --> 00:00:20,000
So a random variable is like the first child born,

8
00:00:20,000 --> 00:00:22,000
which can be a boy or a girl.

9
00:00:22,000 --> 00:00:25,000
The whole universe is called the sample space,

10
00:00:25,000 --> 00:00:29,000
and then these individual sets of circles

11
00:00:29,000 --> 00:00:33,000
are called events--like the event of having (2 boys),

12
00:00:33,000 --> 00:00:36,000
or the event of having at least 1 boy.

13
00:00:36,000 --> 00:00:38,000
And an event consists, then,

14
00:00:38,000 --> 00:00:41,000
of a collection of sample points.

15
00:00:41,000 --> 00:00:45,000
So a sample point is BG, GB or BB.

16
00:00:45,000 --> 00:00:47,000
In terms of representation,

17
00:00:47,000 --> 00:00:51,000
we're going to just represent sample points as strings.

18
00:00:51,000 --> 00:00:53,000
So we'll have like the string, 'GG',

19
00:00:53,000 --> 00:00:56,000
and we can represent events two ways:

20
00:00:56,000 --> 00:01:00,000
as a collection of strings

21
00:01:00,000 --> 00:01:02,000
or as a predicate--

22
00:01:02,000 --> 00:01:05,000
a function, which is true of certain strings and not of others.

23
00:01:05,000 --> 00:01:07,000
So here's what I did: I imported

24
00:01:07,000 --> 00:01:09,000
itertools because we're going to need that.

25
00:01:09,000 --> 00:01:13,000
I searched for--and found--a new class, called fractions,

26
00:01:13,000 --> 00:01:15,000
within the fractions module,

27
00:01:15,000 --> 00:01:18,000
and there's a function or a constructor, called fraction,

28
00:01:18,000 --> 00:01:20,000
which produces an exact fraction.

29
00:01:20,000 --> 00:01:22,000
And the reason I wanted that is because

30
00:01:22,000 --> 00:01:25,000
when the answer is 1/3, I wanted to see that it was exactly 1/3.

31
00:01:25,000 --> 00:01:27,000
I didn't want to see that it's .33333.

32
00:01:27,000 --> 00:01:32,000
So all a fraction is is a numerator and a denominator,

33
00:01:32,000 --> 00:01:34,000
paired together, and they know how to do arithmetic.

34
00:01:34,000 --> 00:01:36,000
So here's my random variable.

35
00:01:36,000 --> 00:01:40,000
I represent that as a collection of possibilities in here--

36
00:01:40,000 --> 00:01:42,000
I just strung the possibilities together.

37
00:01:42,000 --> 00:01:49,000
I could have said set of 'BG' or the list of 'B,G'

38
00:01:49,000 --> 00:01:51,000
but I just put them together, as a string.

39
00:01:51,000 --> 00:01:55,000
Then I said we can combine random variables

40
00:01:55,000 --> 00:01:59,000
with a cartesian product--and I used itertools.product--

41
00:01:59,000 --> 00:02:02,000
and then I just said: get all results,

42
00:02:02,000 --> 00:02:04,000
which itertools.product produces tuples,

43
00:02:04,000 --> 00:02:06,000
and I want to look at them as strings.

44
00:02:06,000 --> 00:02:10,000
So now two_kids is the product of two children

45
00:02:10,000 --> 00:02:12,000
and we're looking at their sex.

46
00:02:12,000 --> 00:02:16,000
So if I evaluate that, I get this collection.

47
00:02:16,000 --> 00:02:20,000
And one_boy is just the points in two_kids

48
00:02:20,000 --> 00:02:23,000
that have at least one boy in the string.

49
00:02:23,000 --> 00:02:25,000
So it would be this one, this one, and this one.

50
00:02:25,000 --> 00:02:28,000
And then I can define two_boys as a predicate.

51
00:02:28,000 --> 00:02:30,000
That's saying that's True

52
00:02:30,000 --> 00:02:33,000
when the count of the number of boys is equal to (2).

53
00:02:33,000 --> 00:02:35,000
That would be True here.

54
00:02:35,000 --> 00:02:37,000
And finally, I can define my conditional probability.

55
00:02:37,000 --> 00:02:41,000
That says what's the probability of (p), given (e),

56
00:02:41,000 --> 00:02:44,000
where (e) is an event specified

57
00:02:44,000 --> 00:02:46,000
as a list of sample points,

58
00:02:46,000 --> 00:02:49,000
all equal, probable, and predicate;

59
00:02:49,000 --> 00:02:52,000
is a predicate that returns True or False

60
00:02:52,000 --> 00:02:54,000
of elements of that event,

61
00:02:54,000 --> 00:02:59,000
and so the True elements are just the ones for which it is True,

62
00:02:59,000 --> 00:03:01,000
and then I returned a fraction--

63
00:03:01,000 --> 00:03:05,000
how many out of the event satisfy the predicate.

64
00:03:05,000 --> 00:03:07,000
Then I can ask, what's the conditional probability

65
00:03:07,000 --> 00:03:10,000
of two_boys, given one_boy--and the answer is 1/3.

66
00:03:10,000 --> 99:59:59,999
So that's what we expected.
