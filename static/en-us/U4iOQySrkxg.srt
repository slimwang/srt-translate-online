1
00:00:00,000 --> 00:00:03,000
This homework I call "More Pour."

2
00:00:03,000 --> 00:00:08,000
We did the glass-pouring example where we had two glasses, and we could pour between them.

3
00:00:08,000 --> 00:00:10,000
We're going to do the same thing here,

4
00:00:10,000 --> 00:00:14,000
except we're going to allow an arbitrary number of glasses.

5
00:00:14,000 --> 00:00:17,000
For example, here I've drawn four of them.

6
00:00:17,000 --> 00:00:22,000
Let's say they're capacities are 1, 2, 4, and 8,

7
00:00:22,000 --> 00:00:27,000
and let's say we set ourselves the goal of having 5 in one of the glass.

8
00:00:27,000 --> 00:00:29,000
How could we achieve that?

9
00:00:29,000 --> 00:00:37,000
One solution is we could fill up this glass with 8. That would be the first action.

10
00:00:37,000 --> 00:00:42,000
Then we could empty out or pour 1 into here.

11
00:00:42,000 --> 00:00:45,000
Now we'd be down 1 and be at that level.

12
00:00:45,000 --> 00:00:50,000
Then the second action would be to pour into here.

13
00:00:50,000 --> 00:00:55,000
Now we'd be down 2 more, and we find we're at 5 here.

14
00:00:55,000 --> 00:00:57,000
That would solve the problem.

15
00:00:57,000 --> 00:01:02,000
An alternative solution would be to fill these two glasses with 4 and 1

16
00:01:02,000 --> 00:01:07,000
and then pour both of them into 8 to achieve 5.

17
00:01:07,000 --> 00:01:10,000
Your task will be to define more<u>pour</u>problem,

18
00:01:10,000 --> 00:01:15,000
which takes a tuple of capacities of glass--any number of glasses--

19
00:01:15,000 --> 00:01:20,000
and then a goal, which is a single integer that you're trying to achieve.

20
00:01:20,000 --> 00:01:25,000
Alternately, you can have a start state of what is the current level of the glasses are.

21
00:01:25,000 --> 00:01:30,000
If the start state is None, that means zero for all of the glasses.

22
00:01:30,000 --> 00:01:33,000
Your task is to return a path which achieves the goal

23
00:01:33,000 --> 00:01:38,000
or return the empty path or failure if there is none.

24
00:01:38,000 --> 00:01:43,000
The paths, like before, are an alternation between states and actions

25
00:01:43,000 --> 00:01:50,000
where the state is just a tuple of current level, not of capacities but of current levels.

26
00:01:50,000 --> 00:01:55,000
Then the actions can be either fill, empty, or pour,

27
00:01:55,000 --> 00:02:00,000
and we're going to describe the glasses by their index numbers.

28
00:02:00,000 --> 00:02:05,000
In this list of capacities the first number in the list--

29
00:02:05,000 --> 00:02:10,000
we'll call that glass number 0, the next one glass number 1, and so on.

30
00:02:10,000 --> 00:02:16,000
When we filled up the tallest glass that was the last glass out of four--glass number 3--

31
00:02:16,000 --> 00:02:18,000
so the action would have been fill 3.

32
00:02:18,000 --> 00:02:24,000
Here we have a test that says the problem I just solved for you by drawing it out.

33
00:02:24,000 --> 00:02:27,000
The actions are fill glass number 3.

34
00:02:27,000 --> 00:02:30,000
Pour glass number 3 into glass number number 0.

35
00:02:30,000 --> 00:02:35,000
Then pour glass number 3 into glass number 1, and then you're left with 5 in glass number 3.

36
00:02:35,000 --> 00:02:40,000
Here are some more test cases to check things out for you,

37
00:02:40,000 --> 00:02:43,000
see if you can solve those by writing your program.

38
00:02:43,000 --> 00:02:46,000
Use what we have seen before.

39
00:02:46,000 --> 00:02:51,000
You'll probably want to use one of the search procedures we've already defined,

40
00:02:51,000 --> 00:02:55,000
and you'll probably need to write a custom successor function,

41
00:02:55,000 --> 00:02:59,000
which understands the current state and the capacities.

42
00:02:59,000 --> 00:03:03,000
Let me just say I've seen some discussion in the forums about, oh,

43
00:03:03,000 --> 00:03:06,000
can I find a one-line solution or two-line solution?

44
00:03:06,000 --> 00:03:11,000
Don't worry about that. The solution will be whatever it is.

45
00:03:11,000 --> 00:03:16,000
The set up to solve the problem should be a call to a function we've already defined.

46
00:03:16,000 --> 00:03:20,000
That will be one line, but the successor function--

47
00:03:20,000 --> 00:03:24,000
that might be a dozen lines, maybe a little bit more or a little bit less.

48
00:03:24,000 --> 00:03:29,000
Don't worry about minimizing it. Worry about making it clear.
