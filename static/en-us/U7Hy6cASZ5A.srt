1
00:00:00,260 --> 00:00:05,370
So let's understand how the RC memory model works with a concrete

2
00:00:05,370 --> 00:00:10,500
example. So let's say the programmer's intent is that one

3
00:00:10,500 --> 00:00:15,780
thread of his program is going to modify a structure A. And there

4
00:00:15,780 --> 00:00:18,000
is another thread that is going to wait

5
00:00:18,000 --> 00:00:20,600
for the modification, and then it is going to

6
00:00:20,600 --> 00:00:21,920
use the structure A. So this is the

7
00:00:21,920 --> 00:00:25,346
programmer's intent. Right? So P2 is going to wait for

8
00:00:25,346 --> 00:00:28,010
the modification, use it, and this guy is

9
00:00:28,010 --> 00:00:31,266
the guy that is modifying that particular structure

10
00:00:31,266 --> 00:00:34,860
A. And of course these are running different

11
00:00:34,860 --> 00:00:37,894
on processors, and therefore we don't know who

12
00:00:37,894 --> 00:00:43,528
may be getting to their code first. So let's say that P2 executes the code that

13
00:00:43,528 --> 00:00:47,158
corresponds to this semantic. That is, it wants

14
00:00:47,158 --> 00:00:50,380
to wait for the modification. So in order to

15
00:00:50,380 --> 00:00:56,890
do that, it has a flag, and this flag has a semantic that is, 0 indicating the

16
00:00:56,890 --> 00:01:00,190
modification is not done, and 1 when the modification

17
00:01:00,190 --> 00:01:02,910
is actually done. And to make sure that we

18
00:01:02,910 --> 00:01:05,740
don't do busy waiting, we use a mutual exclusion

19
00:01:05,740 --> 00:01:09,670
lock. We lock a synchronization variable, let's call it

20
00:01:09,670 --> 00:01:12,416
L. And if the flag is 0, then it

21
00:01:12,416 --> 00:01:16,618
is going to execute the equivalent of a pthread_cond_wait.

22
00:01:16,618 --> 00:01:19,884
You know, pthread_cond_wait has the semantic that

23
00:01:19,884 --> 00:01:23,008
you're waiting on a condition variable and you're

24
00:01:23,008 --> 00:01:25,848
also releasing the lock that is associated with

25
00:01:25,848 --> 00:01:29,588
this condition variable. So you execute this pthread

26
00:01:29,588 --> 00:01:34,773
wait call, and the semantic you know is that at this point, thread P2 is

27
00:01:34,773 --> 00:01:38,173
blocked here, the lock is released, and he's

28
00:01:38,173 --> 00:01:41,658
basically waiting for a signal on this condition

29
00:01:41,658 --> 00:01:44,643
variable c. Who's going to do that, well, of course

30
00:01:44,643 --> 00:01:47,083
P1 is the guy that is modifying the structure,

31
00:01:47,083 --> 00:01:49,631
so its the responsibility of P1 to signal him.

32
00:01:49,631 --> 00:01:52,400
So let's see what happens. So P1 is executing the

33
00:01:52,400 --> 00:01:55,928
code for modifying the data structure A, and once

34
00:01:55,928 --> 00:01:59,120
it is done with all the modification, then it

35
00:01:59,120 --> 00:02:02,032
is going to inform P2. So in order to

36
00:02:02,032 --> 00:02:06,610
inform P2, what it does is acquires this lock L,

37
00:02:06,610 --> 00:02:11,611
and it sets the flag to 1. And the flag is the one that I inspected over here

38
00:02:11,611 --> 00:02:14,107
to know that, oh, the modification is not yet

39
00:02:14,107 --> 00:02:17,311
done here, and I'm waiting on this condition variable.

40
00:02:17,311 --> 00:02:20,543
So, P1 sets the flag to 1 and signals

41
00:02:20,543 --> 00:02:25,490
on the condition variable, c. And, you know that

42
00:02:25,490 --> 00:02:28,380
signaling on the condition variable is going to wake up

43
00:02:28,380 --> 00:02:32,610
P2. And, of course, it cannot start executing here until

44
00:02:32,610 --> 00:02:37,930
P1 has released the lock, and once the lock has been released, that lock will be

45
00:02:37,930 --> 00:02:42,360
acquired implicitly by the operating system on behalf

46
00:02:42,360 --> 00:02:45,380
of P2, because that is a semantic of this

47
00:02:45,380 --> 00:02:48,150
condition wait here. So when I wake up,

48
00:02:48,150 --> 00:02:50,930
I'll go back, and as a defensive mechanism,

49
00:02:50,930 --> 00:02:53,510
I'll recheck the flag to ensure that the

50
00:02:53,510 --> 00:02:58,110
flag is now not 0, indicating that the modification

51
00:02:58,110 --> 00:03:00,550
has been done, so I'm now ready to get

52
00:03:00,550 --> 00:03:04,590
out of this critical section. I unlock L, come

53
00:03:04,590 --> 00:03:07,280
out of the critical section. Now I can use

54
00:03:07,280 --> 00:03:10,120
this modified data structure. So that's the semantic that

55
00:03:10,120 --> 00:03:12,620
I wanted, and I got that with this code

56
00:03:12,620 --> 00:03:15,390
fragment that I'm showing you here. So the important

57
00:03:15,390 --> 00:03:18,650
thing is, if you have an RC memory model,

58
00:03:18,650 --> 00:03:23,200
then all the modifications that I'm making here that

59
00:03:23,200 --> 00:03:26,310
are modifying shared data structures can go on in

60
00:03:26,310 --> 00:03:29,050
parallel. With all this waiting that may be going

61
00:03:29,050 --> 00:03:31,250
on here, I don't have to block the processor

62
00:03:31,250 --> 00:03:34,700
to do every one of these modifications. The only

63
00:03:34,700 --> 00:03:37,630
point at which I have to make sure that

64
00:03:37,630 --> 00:03:41,370
these modifications have been made globally visible is when

65
00:03:41,370 --> 00:03:48,210
I hit the unlock point in my code. So just before I unlock L, I have to make

66
00:03:48,210 --> 00:03:53,960
sure that all the read write accesses to shared variables that I've made here in

67
00:03:53,960 --> 00:03:57,370
my program have all been taken care of

68
00:03:57,370 --> 00:04:00,840
in terms of the coherence actions being communicated

69
00:04:00,840 --> 00:04:06,050
to all my peers. Only then, I have to unlock it. So, in other words,

70
00:04:06,050 --> 00:04:09,470
this code fragment is giving you pictorially the

71
00:04:09,470 --> 00:04:14,620
opportunity for exploiting computation in parallel with communication.

72
00:04:14,620 --> 00:04:17,839
If the model was an SC memory model, then

73
00:04:17,839 --> 00:04:21,769
for every read-write accesses that are being done in

74
00:04:21,769 --> 00:04:25,089
modifying this data structure A, there would have been

75
00:04:25,089 --> 00:04:29,154
coherence actions that would have gone on, and those coherence

76
00:04:29,154 --> 00:04:31,750
actions, each of them has to complete before you

77
00:04:31,750 --> 00:04:34,060
can do the next one, and so on. But

78
00:04:34,060 --> 00:04:36,930
with the RC memory model, what it is allowing

79
00:04:36,930 --> 00:04:39,850
you to do is, you can do the data structure

80
00:04:39,850 --> 00:04:44,030
modification you want, and the coherence actions inherent in

81
00:04:44,030 --> 00:04:47,250
those modifications may be going on in the background,

82
00:04:47,250 --> 00:04:50,130
but you can continue with your computation until you

83
00:04:50,130 --> 00:04:53,910
hit this unlock point. At this point, the memory

84
00:04:53,910 --> 00:04:56,740
model will ensure that all the coherence actions are

85
00:04:56,740 --> 00:04:59,910
complete before releasing the lock, because once the lock

86
00:04:59,910 --> 00:05:02,340
is released, this guy's going to get it, and immediately

87
00:05:02,340 --> 00:05:05,040
he'll start using the data structure that has been modified

88
00:05:05,040 --> 00:05:08,265
by me. So it is important that all the coherence actions

89
00:05:08,265 --> 00:05:11,910
be complete prior to unlocking. So that's the intent of the RC

90
00:05:11,910 --> 00:05:16,430
memory model. And that's how you can exploit computation going on in

91
00:05:16,430 --> 00:05:21,170
parallel with communication if the memory model is an RC memory model.
