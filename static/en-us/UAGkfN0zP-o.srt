1
00:00:00,380 --> 00:00:02,430
Let's move on to drawing lines.

2
00:00:02,430 --> 00:00:07,340
You can follow along by loading
up 1.3.03 demo drawing lines.

3
00:00:08,780 --> 00:00:12,160
So first, let's get start up
as usual by declaring and

4
00:00:12,160 --> 00:00:14,080
initializing a ShapeRenderer.

5
00:00:14,080 --> 00:00:16,364
Also, we gotta remember to
clean up after ourselves and

6
00:00:16,364 --> 00:00:18,910
get rid of anything we're not using.

7
00:00:18,910 --> 00:00:21,275
Also note,
instead of using ApplicationListener,

8
00:00:21,275 --> 00:00:23,910
we're using ApplicationAdapter here.

9
00:00:23,910 --> 00:00:29,150
ApplicationAdapter is just a convenience
implementation of ApplicationListener.

10
00:00:29,150 --> 00:00:32,680
It stubs out all of the required
methods with implementations that

11
00:00:32,680 --> 00:00:33,420
don't do anything.

12
00:00:33,420 --> 00:00:36,152
So all we've got here is actually
create, dispose, and render.

13
00:00:36,152 --> 00:00:40,950
All right, as always, all
the interesting stuff happens in render.

14
00:00:40,950 --> 00:00:42,780
So first, we clear the screen.

15
00:00:42,780 --> 00:00:46,510
We actually clear the screen and then,
we start a new shapeRenderer batch.

16
00:00:46,510 --> 00:00:48,745
This time, using the Line ShapeType.

17
00:00:48,745 --> 00:00:53,350
All right, now we're going to draw
a line from 0, 0 to 100, 100.

18
00:00:53,350 --> 00:00:54,641
Let's give it a try.

19
00:00:56,984 --> 00:00:59,075
Well, that didn't go according to plan.

20
00:00:59,075 --> 00:01:02,495
There's nothing on the screen and
we actually got an error down here.

21
00:01:02,495 --> 00:01:03,505
Let's see.

22
00:01:03,505 --> 00:01:04,595
Illegal state exception.

23
00:01:04,595 --> 00:01:08,115
Call end before beginning
a new shape batch.

24
00:01:08,115 --> 00:01:08,845
Oh, right.

25
00:01:09,870 --> 00:01:11,850
So all we did here was
start the batch and

26
00:01:11,850 --> 00:01:14,070
then draw a line but
didn't end the batch.

27
00:01:14,070 --> 00:01:17,370
Then the next time render got called
it tried to begin a batch but

28
00:01:17,370 --> 00:01:21,320
shape render was already in the middle
of a batch so we got a crash.

29
00:01:21,320 --> 00:01:22,340
All right, let's try this again.

30
00:01:23,570 --> 00:01:25,010
Awesome.
We're in business.

31
00:01:25,010 --> 00:01:26,960
Let's try something more interesting.

32
00:01:26,960 --> 00:01:31,370
Let's try drawing a line of a different
color, by using shapeRenderer.setColor,

33
00:01:31,370 --> 00:01:34,680
and then using one of
the pre-defined color constants.

34
00:01:34,680 --> 00:01:38,213
Then we'll draw another line
slightly offset from the first one.

35
00:01:38,213 --> 00:01:39,281
Hm, whoops.

36
00:01:39,281 --> 00:01:41,001
Well we got our magenta line, but

37
00:01:41,001 --> 00:01:43,340
the first line we drew
also ended up magenta.

38
00:01:44,500 --> 00:01:47,580
The way colors work with shapeRenderer
is it will assume you want white

39
00:01:47,580 --> 00:01:49,760
until you tell it about
some other color.

40
00:01:49,760 --> 00:01:51,370
However, if you tell it
about some other color,

41
00:01:51,370 --> 00:01:54,360
it will retroactively assume everything
you wanted you draw before that,

42
00:01:54,360 --> 00:01:56,400
you wanted to draw that color as well.

43
00:01:56,400 --> 00:01:57,627
Lets try this setup.

44
00:01:57,627 --> 00:02:00,792
Hey, there we go,
that's what we were looking for.

45
00:02:00,792 --> 00:02:04,270
We can also set colors
using our RGBA values.

46
00:02:04,270 --> 00:02:07,370
Now before we draw this line,
what color is this?

47
00:02:07,370 --> 00:02:11,245
So it's fully opaque because
alpha's one, so that's good.

48
00:02:11,245 --> 00:02:18,370
All right there's no red and there's
no blue, so the line must be green.

49
00:02:18,370 --> 00:02:19,040
Let's run it and see.

50
00:02:20,660 --> 00:02:21,860
Our predictions were correct..

51
00:02:23,450 --> 00:02:27,570
We can even do fancy things like drawing
lines with gradients by specifying

52
00:02:27,570 --> 00:02:30,230
the color at start of a line and
the color at the end.

53
00:02:32,300 --> 00:02:33,000
And there we go.

54
00:02:33,000 --> 00:02:34,890
We got a nice fade from blue to red.

55
00:02:36,090 --> 00:02:38,630
One more useful thing for drawing lines.

56
00:02:38,630 --> 00:02:41,220
If we wanted to draw a whole
series of line segments,

57
00:02:41,220 --> 00:02:44,300
it would get really tiresome
to draw each one individually.

58
00:02:44,300 --> 00:02:46,780
So we also have polyline.

59
00:02:46,780 --> 00:02:51,300
Polyline takes an array of floats,
where the floats at the even positions

60
00:02:51,300 --> 00:02:55,830
are the x coordinates, and the floats at
the odd positions are the y coordinates.

61
00:02:55,830 --> 00:02:57,550
If we give this one a try,

62
00:02:57,550 --> 00:03:00,710
we see this crazy path with a bunch
of connected line segments.
