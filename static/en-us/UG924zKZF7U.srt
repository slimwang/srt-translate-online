1
00:00:00,230 --> 00:00:03,110
I'll show you how to write
the max_employment function first, and

2
00:00:03,110 --> 00:00:06,780
then I'll go over the output you should
have seen from the provided test code.

3
00:00:06,780 --> 00:00:09,890
I'm going to show running all
the code in an iPython notebook.

4
00:00:09,890 --> 00:00:13,290
To write the code I started off with
the maximum employment value as 0 and

5
00:00:13,290 --> 00:00:14,770
the corresponding country as None.

6
00:00:15,910 --> 00:00:19,300
Next, I looped through each
element of the two NumPy arrays.

7
00:00:19,300 --> 00:00:22,680
Since the two arrays should have the
same length, I could use either line of

8
00:00:22,680 --> 00:00:25,880
countries or line of employment here,
it wouldn't make a difference.

9
00:00:25,880 --> 00:00:29,010
Next I checked whether the employment
data from that country was greater than

10
00:00:29,010 --> 00:00:31,660
the maximum employment I had seen so
far.

11
00:00:31,660 --> 00:00:35,055
If so,
I updated both the maximum country and

12
00:00:35,055 --> 00:00:37,305
the maximum employment value.

13
00:00:37,305 --> 00:00:39,375
Finally I returned the two values.

14
00:00:39,375 --> 00:00:42,345
Now this piece of code doesn't look any
different from what I would have written

15
00:00:42,345 --> 00:00:45,130
if I were using lists
instead of NumPy arrays.

16
00:00:45,130 --> 00:00:46,960
That's a great technique
to fall back on.

17
00:00:46,960 --> 00:00:50,040
If you can't find a specific NumPy
function to do what you want,

18
00:00:50,040 --> 00:00:52,330
you can always write code
treating them just like lists.

19
00:00:53,430 --> 00:00:57,800
However, in this case, there's also
an easier way to solve this using NumPy.

20
00:00:57,800 --> 00:01:01,470
I didn't expect you to know that, but
I'm going to show you how it works.

21
00:01:01,470 --> 00:01:05,050
You may have realized you can use
NumPy's max function to find the maximum

22
00:01:05,050 --> 00:01:06,220
employment value.

23
00:01:06,220 --> 00:01:08,940
But that wouldn't give you
the corresponding country name.

24
00:01:08,940 --> 00:01:13,900
NumPy also has a function called argmax
and instead of the maximum value,

25
00:01:13,900 --> 00:01:17,240
it returns the position where
the maximum value occurs.

26
00:01:17,240 --> 00:01:20,620
I'll name that position i,
then I can get both the country and

27
00:01:20,620 --> 00:01:23,400
the employment value by
using that position.

28
00:01:23,400 --> 00:01:24,950
Now I'll go through the test code.

29
00:01:24,950 --> 00:01:27,590
The first line imported
the NumPy library.

30
00:01:27,590 --> 00:01:30,770
The next line creates a NumPy
array of the first 20 countries we

31
00:01:30,770 --> 00:01:32,290
have employment data for.

32
00:01:32,290 --> 00:01:36,180
One of the easiest ways to create
a NumPy array is the way I did it here.

33
00:01:36,180 --> 00:01:39,870
First you create a python list and
then you call np.array

34
00:01:39,870 --> 00:01:43,300
with that list as an argument which
converts it to a NumPy array.

35
00:01:43,300 --> 00:01:47,659
The next line uses the same technique
to create an NumPy array of employment

36
00:01:47,659 --> 00:01:48,608
rates in 2007.

37
00:01:48,608 --> 00:01:52,640
Next you should have seen that this
line printed the country at position 0,

38
00:01:52,640 --> 00:01:55,930
changing the 0 to a 3 prints
the country at position 3.

39
00:01:55,930 --> 00:01:59,270
The next few lines each
print a slice of the array.

40
00:01:59,270 --> 00:02:03,880
This one prints everything from position
0 up to but not including position 3.

41
00:02:03,880 --> 00:02:06,180
In this line,
I've left the first number out, so

42
00:02:06,180 --> 00:02:10,020
the slice starts at the beginning of
the array, which gives the same results.

43
00:02:10,020 --> 00:02:12,360
Here I've left the second number out, so

44
00:02:12,360 --> 00:02:16,290
the slice goes from position 17 all
the way to the end of the array.

45
00:02:16,290 --> 00:02:19,340
And finally I can actually
leave both numbers off

46
00:02:19,340 --> 00:02:22,770
in which case I get the entire array
from the beginning to the end.

47
00:02:22,770 --> 00:02:25,670
There's not really a good reason to
do this since you could just use

48
00:02:25,670 --> 00:02:28,980
the original array, but
it makes the notation consistent.

49
00:02:28,980 --> 00:02:31,280
Now I'll look at the element
type of a few arrays.

50
00:02:31,280 --> 00:02:33,490
Which NumPy calls the dtype.

51
00:02:33,490 --> 00:02:36,260
I can see that the country
array has type S22.

52
00:02:36,260 --> 00:02:39,010
S stands for string, and

53
00:02:39,010 --> 00:02:42,360
22 means that the length of the longest
string in the array is 22 characters.

54
00:02:42,360 --> 00:02:46,310
The employment array has type float64.

55
00:02:46,310 --> 00:02:49,040
That means the employment values
are floating point values.

56
00:02:49,040 --> 00:02:50,900
That is, they have a decimal point.

57
00:02:50,900 --> 00:02:52,220
And they're being stored using 64 bits.

58
00:02:52,220 --> 00:02:56,030
The next four arrays contain integers,

59
00:02:56,030 --> 00:03:00,750
floating point values, booleans and
strings of length two.

60
00:03:00,750 --> 00:03:02,450
When I loop over the countries array,

61
00:03:02,450 --> 00:03:05,340
I see that each country gets
printed out one at a time.

62
00:03:05,340 --> 00:03:08,430
And I can use this type of loop to
go over pairs of values from two

63
00:03:08,430 --> 00:03:09,880
different arrays.

64
00:03:09,880 --> 00:03:14,190
Here i is the position in each array and
then I get the country at that position

65
00:03:14,190 --> 00:03:16,700
and the employment
value at that position.

66
00:03:16,700 --> 00:03:18,380
Finally I just print both values out.

67
00:03:19,490 --> 00:03:22,900
If you haven't seen Python's
string format function before,

68
00:03:22,900 --> 00:03:26,250
it finds each occurrence
of these { } and

69
00:03:26,250 --> 00:03:29,760
then replaces them with the arguments
of the format function.

70
00:03:29,760 --> 00:03:33,040
When I run this I see each country
printed out with its corresponding

71
00:03:33,040 --> 00:03:33,880
employment value.

72
00:03:34,920 --> 00:03:39,800
And finally, these functions give the
mean, standard deviation, maximum and

73
00:03:39,800 --> 00:03:41,050
sum of the employment data.
