1
00:00:00,540 --> 00:00:03,100
So what exactly is Core Data?

2
00:00:03,100 --> 00:00:05,990
Core data is essentially
a framework to help you manage

3
00:00:05,990 --> 00:00:07,080
the model part of your app.

4
00:00:08,200 --> 00:00:11,480
You recall that the model view
controller design patterns splits

5
00:00:11,480 --> 00:00:13,440
your app up into three parts.

6
00:00:13,440 --> 00:00:16,260
And that the model part is what
deals with the important tangible

7
00:00:16,260 --> 00:00:18,080
essential pieces of the app.

8
00:00:18,080 --> 00:00:21,160
Core data gives us a way to
manage these important pieces and

9
00:00:21,160 --> 00:00:24,420
gives them the title managed objects.

10
00:00:24,420 --> 00:00:26,590
What does managing these objects entail?

11
00:00:26,590 --> 00:00:29,940
It includes everything from changing
them, tracking them, persisting them,

12
00:00:29,940 --> 00:00:32,119
to managing their relationships and
more.

13
00:00:32,119 --> 00:00:35,770
Let's look at an overview of the core
data architecture to see how this works.

14
00:00:35,770 --> 00:00:37,920
There are several main components
to become familiar with, and

15
00:00:37,920 --> 00:00:39,970
we've already somewhat
touched on two of them.

16
00:00:39,970 --> 00:00:43,260
The managed object model,
also referred to as the data model,

17
00:00:43,260 --> 00:00:47,000
is basically the physical representation
of the model we just spoke of.

18
00:00:47,000 --> 00:00:49,470
It exists in XCode as a special
kind of graphic file,

19
00:00:49,470 --> 00:00:53,560
similar to a storyboard file, but
with different purpose and capabilities.

20
00:00:53,560 --> 00:00:57,370
The managed object model is what is used
to specify the classes and relationships

21
00:00:57,370 --> 00:01:00,850
that will be managed within your app and
is therefore also what the tables and

22
00:01:00,850 --> 00:01:04,400
rows of your app's SQL-like
database will be generated from.

23
00:01:04,400 --> 00:01:07,340
Much like how interface builder
automates a storyboard file,

24
00:01:07,340 --> 00:01:09,900
core data automates
a managed object model file.

25
00:01:11,160 --> 00:01:15,270
Managed objects are those important
fundamental pieces we spoke of earlier.

26
00:01:15,270 --> 00:01:18,070
A character in a game app and
event in a calendar app.

27
00:01:18,070 --> 00:01:20,130
There would specified by
your object model and

28
00:01:20,130 --> 00:01:23,540
what are actually responsible for
most of core data's magic,

29
00:01:23,540 --> 00:01:27,620
see while they look like regular swift
objects they have a substantial twist.

30
00:01:27,620 --> 00:01:29,740
Unlike any object we've seen thus far,

31
00:01:29,740 --> 00:01:32,910
they save the contents of their
properties to a database file.

32
00:01:32,910 --> 00:01:35,190
Core data actually hides
this complexity from us, so

33
00:01:35,190 --> 00:01:39,110
we don't have to worry about it,
which is why we refer to it as magic.

34
00:01:39,110 --> 00:01:43,510
Every single object of your model will
be a subclass of NSManagedObject.

35
00:01:43,510 --> 00:01:45,060
The managed object context or

36
00:01:45,060 --> 00:01:47,980
the context is where most
of the action happens.

37
00:01:47,980 --> 00:01:48,670
This object,

38
00:01:48,670 --> 00:01:53,210
an instance of NSManagedObjectContext
is helpful to imagine as a place.

39
00:01:53,210 --> 00:01:56,820
The context is where your managed
objects live until they're saved to disk

40
00:01:56,820 --> 00:01:59,650
and when nearly every core
data operation takes place.

41
00:01:59,650 --> 00:02:03,180
Want to create an object you need
a context in which it will live.

42
00:02:03,180 --> 00:02:04,670
Want to delete an object?

43
00:02:04,670 --> 00:02:05,870
Ask the context.

44
00:02:05,870 --> 00:02:06,700
Want to save?

45
00:02:06,700 --> 00:02:08,460
Again ask the context.

46
00:02:08,460 --> 00:02:09,250
To find out who and

47
00:02:09,250 --> 00:02:12,580
what is living inside the context,
a fetch request is needed.

48
00:02:12,580 --> 00:02:14,610
A fetch request is a search
of the context for

49
00:02:14,610 --> 00:02:16,940
a certain type of managed object.

50
00:02:16,940 --> 00:02:20,050
It can specify the type of
managed object, a filter, and

51
00:02:20,050 --> 00:02:23,330
how the resulting objects
should be sorted.

52
00:02:23,330 --> 00:02:25,920
All of the pieces of core today
that we've discussed thus far,

53
00:02:25,920 --> 00:02:28,000
have belonged to the model layer.

54
00:02:28,000 --> 00:02:31,720
This next piece, the fetch results
controller works in part to control how

55
00:02:31,720 --> 00:02:34,690
the data from the fetch requests
will be displayed in the view and

56
00:02:34,690 --> 00:02:37,000
is thus part of the controller layer.

57
00:02:37,000 --> 00:02:40,410
A fetch results controller takes
fetch request runs the search and

58
00:02:40,410 --> 00:02:43,300
helps display the results
in a table view, or

59
00:02:43,300 --> 00:02:46,340
with a little extra work on
our part a collection view.

60
00:02:46,340 --> 00:02:49,610
The most basic task a controller must
perform is to keep the model and

61
00:02:49,610 --> 00:02:51,120
view in sync.

62
00:02:51,120 --> 00:02:54,270
An NS Fetch results controller
does precisely this.

63
00:02:54,270 --> 00:02:57,110
If the objects returned by
the fetch request ever change,

64
00:02:57,110 --> 00:03:01,130
the fetch results controller
automatically updates the table view.

65
00:03:01,130 --> 00:03:04,710
At the lower level, Core Data relies
on what's called persistent stores, or

66
00:03:04,710 --> 00:03:06,290
stores for short.

67
00:03:06,290 --> 00:03:08,920
Stores like the name implies
are were managed objects

68
00:03:08,920 --> 00:03:11,720
actually get stored when saved to disk.

69
00:03:11,720 --> 00:03:13,860
They can be thought of as
database data files and

70
00:03:13,860 --> 00:03:18,850
can exist in several types namely XML,
binary format and SQLite.

71
00:03:18,850 --> 00:03:21,970
The latter being the most common and
also the one will be using.

72
00:03:21,970 --> 00:03:25,690
Note that you can have more than one
store or type of store in a given app.

73
00:03:25,690 --> 00:03:29,220
Also at the lower level is the last
piece we're going to talk about for now.

74
00:03:29,220 --> 00:03:31,470
The persistent Store Coordinator.

75
00:03:31,470 --> 00:03:33,990
This object allows you to
have multiple stores and

76
00:03:33,990 --> 00:03:35,980
keep the rest of your
app from knowing it.

77
00:03:35,980 --> 00:03:37,850
But for the most part,
persistence stores and

78
00:03:37,850 --> 00:03:40,740
their coordinators are not something
you have to worry about too much.

79
00:03:40,740 --> 00:03:44,310
These classes when put together make
up what's called the Core Data Stack.
