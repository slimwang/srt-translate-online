1
00:00:00,400 --> 00:00:02,850
By now,
we have seen this picture several times,

2
00:00:02,850 --> 00:00:06,430
where there's one quantity
that we're trying to maximize.

3
00:00:06,430 --> 00:00:09,310
And we have another quantity that
serves as an upper bound for

4
00:00:09,310 --> 00:00:11,460
it, that we're trying to minimize.

5
00:00:11,460 --> 00:00:15,760
And luckily, the two meet at some
point that is optimal for both.

6
00:00:15,760 --> 00:00:19,420
We've just seen this with our primal and
dual linear programs.

7
00:00:19,420 --> 00:00:24,700
But we saw earlier in the semester, as
well, with our max-flow min-cut problem,

8
00:00:24,700 --> 00:00:28,010
and also with our max-matching
in bipartite graphs and

9
00:00:28,010 --> 00:00:31,030
our min vertex cover
in bipartite graphs.

10
00:00:31,030 --> 00:00:33,810
It's natural to ask,
are all these phenomena related?

11
00:00:34,850 --> 00:00:36,180
Well yes they are.

12
00:00:36,180 --> 00:00:39,370
And probably the easiest way to
see that, is to realize that

13
00:00:39,370 --> 00:00:43,720
all of these can be characterized
as liner programs and their duals.

14
00:00:43,720 --> 00:00:47,970
Let’s take a look at duality in
the context of maximum matching and

15
00:00:47,970 --> 00:00:49,990
by bipartite graphs first.

16
00:00:49,990 --> 00:00:52,530
We’ll let the variable xij indicate

17
00:00:52,530 --> 00:00:56,740
whether the edges (i,j) should
be included in the matching.

18
00:00:56,740 --> 00:00:57,900
As a linear program,

19
00:00:57,900 --> 00:01:02,260
the problem becomes to maximize
the number of matches edges, subject to

20
00:01:02,260 --> 00:01:07,450
the constraints that no vertex in
R can be matched more than once.

21
00:01:07,450 --> 00:01:10,903
And no vertex in L can be
matched more than once.

22
00:01:10,903 --> 00:01:14,200
And of course we can't have
negatively matched edges.

23
00:01:14,200 --> 00:01:17,184
To build the dual program,
we'll let yi and

24
00:01:17,184 --> 00:01:21,145
yj be the variables corresponding
to these constraints.

25
00:01:21,145 --> 00:01:25,655
And we'll want to minimize their
sum because the coefficients on

26
00:01:25,655 --> 00:01:27,980
the constraints here are all 1.

27
00:01:27,980 --> 00:01:29,370
For the constraints,

28
00:01:29,370 --> 00:01:32,375
observe that the coefficients
in the objective function are 1.

29
00:01:33,490 --> 00:01:37,460
And that any Xij appears
once in the equation for

30
00:01:37,460 --> 00:01:41,560
i and once in the equation for j.

31
00:01:41,560 --> 00:01:46,280
Hence, yi plus yj is at least 1.

32
00:01:46,280 --> 00:01:50,226
And of course, yi and
yj can't be negative.

33
00:01:50,226 --> 00:01:52,289
The interpretation here
is straightforward.

34
00:01:52,289 --> 00:01:57,750
Vertex i is in the cover,
if and only if yi is 1.

35
00:01:57,750 --> 00:02:03,660
And similarly, vertex j is in
the cover if and only if yj is 1.

36
00:02:03,660 --> 00:02:07,800
Every edge must have at
least one vertex in a cover.

37
00:02:07,800 --> 00:02:10,949
And we're trying to minimize
the size of the cover.

38
00:02:10,949 --> 00:02:14,500
So, we've just seen how
maximum bipartite matching

39
00:02:14,500 --> 00:02:17,980
can be expressed as a linear program,
and it's dual also turned out

40
00:02:17,980 --> 00:02:21,820
to have a natural interpretation
as a vertex cover problem.

41
00:02:21,820 --> 00:02:22,420
This is really neat.

42
00:02:23,520 --> 00:02:26,839
Every decision problem in p can be
converted into a linear program

43
00:02:26,839 --> 00:02:30,171
ultimately, just because linear
programming is P-complete.

44
00:02:30,171 --> 00:02:32,952
But not every conversion
will result in variables and

45
00:02:32,952 --> 00:02:36,810
a dual program that have such
intuitive interpretations.

46
00:02:36,810 --> 00:02:40,650
When this happens, it often gives a way
to gain deeper insight into the problem

47
00:02:40,650 --> 00:02:41,270
and its structure.

48
00:02:42,470 --> 00:02:46,000
As you might have guessed, this happens
also for the max-flow min-cut problem,

49
00:02:46,000 --> 00:02:47,340
and we'll explore that next.
