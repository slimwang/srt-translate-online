1
00:00:00,350 --> 00:00:05,750
To do any kind of analysis on the data,
we need significant amount of data.

2
00:00:05,750 --> 00:00:07,930
So let's read data for each stock for

3
00:00:07,930 --> 00:00:10,180
a period of one year,
that is, the year 2010.

4
00:00:10,180 --> 00:00:15,960
You can do this by changing the stock
and the end date as shown here.

5
00:00:15,960 --> 00:00:18,910
Let's see the data frame contains now.

6
00:00:18,910 --> 00:00:23,580
So this is your data frame which has
stock prices for the symbol SPY,

7
00:00:23,580 --> 00:00:28,080
Google, IBM and gold for a year 2010.

8
00:00:28,080 --> 00:00:32,210
We briefly explained
slicing in the last lesson.

9
00:00:32,210 --> 00:00:36,300
In this lesson we will learn how to
do slicing using the data frame we

10
00:00:36,300 --> 00:00:36,870
just created.

11
00:00:36,870 --> 00:00:40,688
There are basically three ways
we can slice the data frame.

12
00:00:40,688 --> 00:00:43,740
First, row slicing.

13
00:00:43,740 --> 00:00:44,960
As the name suggest,

14
00:00:44,960 --> 00:00:49,150
it will give us the required
rows along with all the columns.

15
00:00:49,150 --> 00:00:52,320
This is useful when you
want to compare moment of

16
00:00:52,320 --> 00:00:55,040
all the stocks over subset of time.

17
00:00:55,040 --> 00:00:57,580
This is how you do it in the code.

18
00:00:57,580 --> 00:01:01,660
We use the function .ix
of the data frame and

19
00:01:01,660 --> 00:01:05,580
just mention the start and
the end date in the square brackets.

20
00:01:05,580 --> 00:01:09,840
Here we extract the moment of all
the stocks in the month of Jan.

21
00:01:09,840 --> 00:01:14,440
Note that the start and the end date
should be in the chronological order.

22
00:01:14,440 --> 00:01:17,560
If you write the 31st
Jan date before 1st Jan,

23
00:01:17,560 --> 00:01:20,620
the date frame will give
you an empty data frame.

24
00:01:20,620 --> 00:01:26,290
Even if you remove the .ix function and
just to print DF

25
00:01:26,290 --> 00:01:31,420
passing the dates in the chronological
order, you will get the same result.

26
00:01:31,420 --> 00:01:37,560
However, .ix is considered to be more
Pythonic and robust, so we follow that.

27
00:01:37,560 --> 00:01:41,740
Now let's run the code to see the stock
prices for the month of January.

28
00:01:41,740 --> 00:01:46,580
You can observe that we get the data
only for the January month but

29
00:01:46,580 --> 00:01:50,410
for all the symbols,
this is known as row slicing.

30
00:01:50,410 --> 00:01:55,430
Second way of slicing is useful when you
want to view prices of only one stock

31
00:01:55,430 --> 00:01:59,650
over the date range,
in this case you can use column slicing.

32
00:01:59,650 --> 00:02:04,130
We want to project the prices of
Google for the entire year of 2010.

33
00:02:04,130 --> 00:02:05,540
Here is how we do it.

34
00:02:06,550 --> 00:02:12,550
A square bracket along with the name of
the column and do not forget the colon.

35
00:02:12,550 --> 00:02:16,380
To retrieve a single column
we just pass a single label.

36
00:02:16,380 --> 00:02:20,470
To select multiple columns
we pass a list of labels.

37
00:02:20,470 --> 00:02:22,120
Let's print this.

38
00:02:22,120 --> 00:02:25,780
And this is the output for
multiple columns.

39
00:02:25,780 --> 00:02:29,320
The last way of slicing is to
slice through both dimensions,

40
00:02:29,320 --> 00:02:31,470
that is rows and columns.

41
00:02:31,470 --> 00:02:36,520
The most robust way to do this is using
the IX selector of the data frame.

42
00:02:36,520 --> 00:02:38,840
Let's go ahead and use it.

43
00:02:38,840 --> 00:02:43,920
If you need more than one column,
you define them in a list like this,

44
00:02:43,920 --> 00:02:46,500
and date range
are separated with a colon.

45
00:02:47,580 --> 00:02:51,180
Here you go, the stock prices for
the symbol SPY and

46
00:02:51,180 --> 00:02:55,780
IBM over the date range
10th March to 15th March.

47
00:02:55,780 --> 00:02:58,750
One application of this way
of slicing is to compare

48
00:02:58,750 --> 00:03:01,810
multiple stocks over a period of time.

49
00:03:01,810 --> 00:03:07,180
Panda support many ways of slicing
a data frame to suit different needs.

50
00:03:07,180 --> 00:03:10,000
Find out more using the link
in the instructor notes.
