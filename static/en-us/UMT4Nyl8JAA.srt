1
00:00:00,330 --> 00:00:03,180
We turn now to the key part of
the analysis where we show that

2
00:00:03,180 --> 00:00:06,498
each phase of the Dinic
algorithm takes V times E time.

3
00:00:06,498 --> 00:00:09,910
As with Edmonds-Karp,
we will use a level graph.

4
00:00:09,910 --> 00:00:12,820
In this case, however,
the algorithm actually builds the graph,

5
00:00:12,820 --> 00:00:15,349
whereas in Edmonds-Karp we
simply used it for the analysis.

6
00:00:16,360 --> 00:00:19,430
The level graph can be built
by running Bedford search and

7
00:00:19,430 --> 00:00:23,800
saving all forward edges while
ignoring backwards and lateral ones.

8
00:00:23,800 --> 00:00:27,950
As we argued before,
when we augment the flow along the path,

9
00:00:27,950 --> 00:00:32,180
say along this one here, we introduce
reverse edges into the residual graph.

10
00:00:33,280 --> 00:00:36,840
Note that these are always
backwards edges in the level graph.

11
00:00:36,840 --> 00:00:39,940
And hence they aren't useful
in building a path equal to or

12
00:00:39,940 --> 00:00:42,260
shorter than the previous shortest path.

13
00:00:42,260 --> 00:00:45,640
Well if the new edges are useless,
why rebuild the level graph

14
00:00:45,640 --> 00:00:49,640
of the residual graph when the old
one will serve just as well?

15
00:00:49,640 --> 00:00:52,670
We can just update
the residual capacities.

16
00:00:52,670 --> 00:00:56,390
More precisely,
given the possibly outdated level graph,

17
00:00:56,390 --> 00:01:01,350
we can build a path from source to
sync just by making the first vertex

18
00:01:01,350 --> 00:01:05,269
on the adjacency list
the next vertex in the path.

19
00:01:05,269 --> 00:01:06,480
If this generates a path to t,

20
00:01:06,480 --> 00:01:11,120
then we augment the flow and
update the residual capacities.

21
00:01:11,120 --> 00:01:15,890
If it doesn't, then we delete the last
vertex in the path from the level graph.

22
00:01:15,890 --> 00:01:20,620
In this example, we would,
first find a path from s to t, and,

23
00:01:20,620 --> 00:01:23,140
let's say that this edge
here is a bottle neck.

24
00:01:23,140 --> 00:01:26,500
It's capacity gets set to 0,
and it gets deleted.

25
00:01:26,500 --> 00:01:29,400
Next, we will build a path from s again,
and

26
00:01:29,400 --> 00:01:32,060
this time, we would run into a dead end.

27
00:01:32,060 --> 00:01:35,390
So we delete this vertex, and, continue.

28
00:01:35,390 --> 00:01:37,480
There are only V vertices in the graph.

29
00:01:37,480 --> 00:01:41,530
So we can't run into more than V
dead ends, and every augmentation

30
00:01:41,530 --> 00:01:46,380
deletes the bottleneck edge, so
we can't delete more than E edges.

31
00:01:46,380 --> 00:01:49,020
Overall then,
we won't try more than E path.

32
00:01:50,090 --> 00:01:55,420
This process however, of building
the path by first in the adjacency list,

33
00:01:55,420 --> 00:01:59,560
and then augmenting or
deleting a vertex as appropriate.

34
00:01:59,560 --> 00:02:04,980
Each time that set of operations is
done, only costs us order V time.

35
00:02:04,980 --> 00:02:09,880
So, overall, then,
we're doing order V work, order E times.

36
00:02:09,880 --> 00:02:13,830
So, overall,
this work takes order V times E.

37
00:02:13,830 --> 00:02:16,910
Taking this all together,
then, we have V phases.

38
00:02:16,910 --> 00:02:22,870
And each one of the individual phases
costs order E times V time, for a total

39
00:02:22,870 --> 00:02:28,934
of E times V squared time overall, which
is an improvement over Edmonds-Karp.
