1
00:00:00,300 --> 00:00:02,490
So updates going to be pretty similar to look

2
00:00:02,490 --> 00:00:05,210
up. So let's start by copying that code and

3
00:00:05,210 --> 00:00:06,960
seeing how we need to change it. So we

4
00:00:06,960 --> 00:00:09,560
have lookup. We're going to change it to be update.

5
00:00:12,340 --> 00:00:16,360
Now instead of taking a key as its input, it's going to take a key and a value.

6
00:00:18,460 --> 00:00:21,030
But it's not going to return anything, so we're going to get rid

7
00:00:21,030 --> 00:00:25,095
of the returns. Right. remember all update is doing is modifying the

8
00:00:25,095 --> 00:00:29,070
value of entry. So now we still have what we had for

9
00:00:29,070 --> 00:00:32,110
lookup, we're still getting the bucket and we want to do that.

10
00:00:32,110 --> 00:00:34,360
We want to make sure that we update the value in the

11
00:00:34,360 --> 00:00:36,650
right bucket. We still need to look through the entries in the

12
00:00:36,650 --> 00:00:40,200
bucket, to find if one matches. If we find one that matches,

13
00:00:40,200 --> 00:00:43,990
well what we did in lookup, was just return it. And update,

14
00:00:43,990 --> 00:00:46,640
what we want to do is change the value associated with

15
00:00:46,640 --> 00:00:50,080
that key. So we are going to have an assignment that replaces

16
00:00:50,080 --> 00:00:53,030
whatever value is there before with a new value. And now

17
00:00:53,030 --> 00:00:57,190
instead of returning the value, we want to stop going through the

18
00:00:57,190 --> 00:00:59,770
loop, and we actually are done with update, so we can

19
00:00:59,770 --> 00:01:03,690
return here. We found the entry, we updated the value. We

20
00:01:03,690 --> 00:01:05,470
also need to deal with a case where we didn't find

21
00:01:05,470 --> 00:01:09,320
the entry. So now we've gone through the loop enough times.

22
00:01:09,320 --> 00:01:11,980
When it was a look-up we just returned none. When it's

23
00:01:11,980 --> 00:01:14,530
an update what we want to do when the key is not

24
00:01:14,530 --> 00:01:16,990
already in the table, is add it. So now we're going

25
00:01:16,990 --> 00:01:22,520
to use, append, to add a new entry to bucket, that has

26
00:01:22,520 --> 00:01:26,260
the key and the value. So that's how we defined update.

27
00:01:26,260 --> 00:01:28,530
There's certainly lots of other ways to do it, and one

28
00:01:28,530 --> 00:01:31,090
thing you should be thinking about is, well this is actually

29
00:01:31,090 --> 00:01:34,150
very similar to look at, right. We duplicated a lot of code.

30
00:01:34,150 --> 00:01:36,410
Maybe there's a way to define update and lookup so

31
00:01:36,410 --> 00:01:38,530
we don't have to have two copies of the code,

32
00:01:38,530 --> 00:01:41,230
that scans through the bucket to find the right entry.

33
00:01:41,230 --> 00:01:44,840
We'll leave that as a homework question for this unit.

34
00:01:44,840 --> 00:01:46,740
For now we're going to be happy that we've got correct

35
00:01:46,740 --> 00:01:50,920
implementations of both lookup and update. And, let's test them.

36
00:01:50,920 --> 00:01:54,070
So, what we did before, we're going to replace the adds

37
00:01:54,070 --> 00:01:59,280
with updates, and now, the second time, what happened with

38
00:01:59,280 --> 00:02:02,040
the add was we added an entry, but we could

39
00:02:02,040 --> 00:02:05,360
never reach that entry because it had the same keyword.

40
00:02:05,360 --> 00:02:08,720
Now we're used update, the second time we should be

41
00:02:08,720 --> 00:02:13,830
updating that value, and we'll see that the lookup now produces

42
00:02:13,830 --> 00:02:17,290
the value 27, for the second lookup. That's good, right,

43
00:02:17,290 --> 00:02:19,500
the first time the value was 23. We did the update,

44
00:02:19,500 --> 00:02:21,670
we got 27, and we can see that the bucket

45
00:02:21,670 --> 00:02:24,920
only contains one entry. So this is great, we finished our

46
00:02:24,920 --> 00:02:28,330
implementation of the hash table. We can do updates that will

47
00:02:28,330 --> 00:02:30,350
either add new values to the hash table, if they don't

48
00:02:30,350 --> 00:02:34,920
already exist, or change the value of ones that exist. And

49
00:02:34,920 --> 00:02:38,260
we can do lookups and lookup will know where to look, which

50
00:02:38,260 --> 00:02:41,460
bucket to look in to find that key, if it exists.

51
00:02:41,460 --> 00:02:44,450
So this has the great property that as the number of keys

52
00:02:44,450 --> 00:02:47,740
increase. As long as we increase the numbers of buckets accordingly,

53
00:02:47,740 --> 00:02:50,020
the time to do both an update and a lookup is constant.

54
00:02:50,020 --> 00:02:54,160
This means the time doesn't increase even as the number of keywords increases,

55
00:02:54,160 --> 00:02:57,120
as long as we increase the number of buckets. So, this size of

56
00:02:57,120 --> 00:03:01,350
each bucket stays the same size, because the expensive cost of this is

57
00:03:01,350 --> 00:03:04,360
going through the elements in the bucket looking for the key that matches.
