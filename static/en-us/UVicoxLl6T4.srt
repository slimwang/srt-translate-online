1
00:00:00,000 --> 00:00:04,000
The question I'm asking here is given this test case that we were to talk about,

2
00:00:04,000 --> 00:00:08,000
is it possible that I can conclude without trying it that this test case will succeed?

3
00:00:08,000 --> 00:00:11,000
What this test case does is enqueues 7, sleeps for a while,

4
00:00:11,000 --> 00:00:16,000
dequeues an element, and then checks if it was 7, and the answer again is yes.

5
00:00:16,000 --> 00:00:21,000
And again, it depends on making an argument about the actual form of the code for our queue.

6
00:00:21,000 --> 00:00:24,000
If you recall that code, the code didn't contain any dependencies on the time

7
00:00:24,000 --> 00:00:26,000
at which queue request are out.

8
00:00:26,000 --> 00:00:31,000
Just to be clear, we're trying to make arguments that a single test case is a representative

9
00:00:31,000 --> 00:00:34,000
of a whole class of actual executions of the system that we're testing.

10
00:00:34,000 --> 00:00:38,000
And in the general case, we can't make those arguments.

11
00:00:38,000 --> 00:00:41,000
We can only make these arguments for the specific queue code that we're talking about

12
00:00:41,000 --> 00:00:46,000
because we know that, for example, it doesn't depend on the integer value that we're adding.

13
00:00:46,000 --> 00:00:48,000
It doesn't depend on the time at which operations are made

14
00:00:48,000 --> 00:00:51,000
and that's why these arguments actually work.

15
00:00:51,000 --> 00:00:53,000
What we're actually getting at here is a fairly deep idea.

16
00:00:53,000 --> 00:00:57,000
The idea is we have a single test case that represents a point

17
00:00:57,000 --> 00:01:00,000
in the input space for the system that we're testing.

18
00:01:00,000 --> 00:01:06,000
By running the code, we mapped that point in the input space to a single point in the output space.

19
00:01:06,000 --> 00:01:11,000
But the problem is, there is of extremely large input space and we can't test it all.

20
00:01:11,000 --> 00:01:16,000
What we're trying to do here is build up an intuition for when we can make an argument

21
00:01:16,000 --> 00:01:22,000
that, in fact, we haven't made an argument about the mapping of a single input to a single output.

22
00:01:22,000 --> 00:01:27,000
But rather, some class of inputs that are closely related, that are somehow equivalent for purposes

23
00:01:27,000 --> 00:01:32,000
of the system under test, and that if the system executes correctly for the single input that we've

24
00:01:32,000 --> 00:01:38,000
tried, it's going to execute correctly for all of the inputs in this particular bit of the input space.

25
00:01:38,000 --> 00:01:42,000
Let's look at a few ways in which the arguments that we've made here could've gone wrong.

26
00:01:42,000 --> 00:01:46,000
If it's ever the case that our queue could work for some integer,

27
00:01:46,000 --> 00:01:49,000
but not work for general integers, and certainly, it is the case.

28
00:01:49,000 --> 00:01:55,000
For example, if the Python runtime contains some sort of a bug where large integers were truncated,

29
00:01:55,000 --> 00:01:58,000
that it would obviously be the case that if we put one of those large integers into our queue,

30
00:01:58,000 --> 00:02:01,000
it will get truncated somewhere in the queue processing here,

31
00:02:01,000 --> 00:02:04,000
and what would come out wouldn't be what we had tried to put in.

32
00:02:04,000 --> 00:02:08,000
Similarly, if the Python runtime contained some sort of a garbage collection bug,

33
00:02:08,000 --> 00:02:14,000
that corrupted heap memory--it might be the case that sleeping would give the Python interpreter

34
00:02:14,000 --> 00:02:18,000
time to corrupt our value, time to corrupt our queue, and we wouldn't get something out.

35
00:02:18,000 --> 00:02:22,000
But in both of these cases here, we're making arguments about the broader runtime system,

36
00:02:22,000 --> 00:02:26,000
and not the actual code under test and remember that the arguments that we made here

37
00:02:26,000 --> 00:02:31,000
they're really only about the actual code that we were testing.

38
00:02:31,000 --> 00:02:35,000
So in summary, we can make these kind of arguments but we have to be extremely careful

39
00:02:35,000 --> 00:02:38,000
that the assumptions that those arguments are based on are good ones.

40
00:02:38,000 --> 99:59:59,999
What I'd like to do now is give you a little quiz about these concepts.
