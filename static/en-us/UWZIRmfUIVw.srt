1
00:00:00,150 --> 00:00:04,040
So to speed up virtual to physical
translation, the processor includes

2
00:00:04,040 --> 00:00:08,119
a structure called the translation
look-aside buffer or TLB.

3
00:00:08,119 --> 00:00:10,890
The TLB is a cache for translations.

4
00:00:10,890 --> 00:00:13,090
So now you would ask yourself, well,

5
00:00:13,090 --> 00:00:16,810
how is the TLB better than
just using the cache itself?

6
00:00:16,810 --> 00:00:19,780
Well, first,
the cache is relatively big.

7
00:00:19,780 --> 00:00:22,520
It could store a lot of translations,

8
00:00:22,520 --> 00:00:25,470
if we only held translations there,
but we don't.

9
00:00:25,470 --> 00:00:27,890
Most of the stuff is
in the cache is data.

10
00:00:27,890 --> 00:00:33,240
One translation in the cache
covers a whole page worth of data.

11
00:00:33,240 --> 00:00:37,110
So, the TLB that caches only
translations can be extremely small,

12
00:00:37,110 --> 00:00:39,160
which means extremely fast.

13
00:00:39,160 --> 00:00:43,740
Let's look, for example, at the program
that accesses 16 kilobytes of data.

14
00:00:43,740 --> 00:00:48,050
For that to work well we need
about 16 kilobytes of cache.

15
00:00:48,050 --> 00:00:51,790
But this is only four pages if
we have a four kilobyte page.

16
00:00:51,790 --> 00:00:54,290
So the TLB that corresponds to that only

17
00:00:54,290 --> 00:00:57,330
needs four entries to cover
the same amount of memory.

18
00:00:57,330 --> 00:01:00,770
And with only four entries we can make
the TLB extremely, extremely fast,

19
00:01:00,770 --> 00:01:03,270
much less than a cycle for
each translation.

20
00:01:03,270 --> 00:01:08,320
Next we have seen that in a multi level
page table we access our cache for

21
00:01:08,320 --> 00:01:11,250
each level of the page table because
we need to look up all those

22
00:01:11,250 --> 00:01:13,880
entries in order to find
the final translation.

23
00:01:13,880 --> 00:01:17,510
In contrast, the TLB only
stores the final translation.

24
00:01:17,510 --> 00:01:19,630
Even if you have a four
level page table,

25
00:01:19,630 --> 00:01:24,580
eventually we find what a given
page number maps to and

26
00:01:24,580 --> 00:01:29,380
we just store the frame number in the
TLB, not the intermediate page stable

27
00:01:29,380 --> 00:01:33,980
entries that we have been using to
finally come up with a translation.

28
00:01:33,980 --> 00:01:36,460
So in our cache we will
have a 4-level page table,

29
00:01:36,460 --> 00:01:38,590
4 accesses to do the translation.

30
00:01:38,590 --> 00:01:41,840
In the TLB, we do this in 1 access.

31
00:01:41,840 --> 00:01:46,680
So now a load or a store just
needs to form the address, access

32
00:01:46,680 --> 00:01:50,430
the TLB to find the translation, and
then access the cache to get the data.

33
00:01:51,440 --> 00:01:56,140
If we have both the TLB hit and the
cache hit, this can be done in one or

34
00:01:56,140 --> 00:01:57,710
two cycles.

35
00:01:57,710 --> 00:01:59,530
But what if we have a TLB miss?

36
00:01:59,530 --> 00:02:02,510
What if we do not find
a translation in the TLB?

37
00:02:02,510 --> 00:02:06,590
In that case we need to perform
the translation using the page table,

38
00:02:06,590 --> 00:02:09,650
or page tables if we have
a multiple level page table.

39
00:02:09,650 --> 00:02:12,090
And then put that
translation in our TLB so

40
00:02:12,090 --> 00:02:14,900
that it can be used later when
we access the same page again.
