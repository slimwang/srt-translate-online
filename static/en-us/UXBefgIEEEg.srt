1
00:00:00,130 --> 00:00:05,074
The second model for providing
virtualization of physical devices is to

2
00:00:05,074 --> 00:00:09,856
allow the hypervisor to first
intercept every single possible device

3
00:00:09,856 --> 00:00:12,625
access that's performed by a guest VM.

4
00:00:12,625 --> 00:00:16,937
Once the hypervisor has the information
about the device operation

5
00:00:16,937 --> 00:00:21,547
that the guest VM wanted to perform,
it doesn't have a requirement that

6
00:00:21,547 --> 00:00:26,025
the device that the guest VM wants and
the physical device match.

7
00:00:26,025 --> 00:00:30,268
So the hypervisor would first translate
that device access to some generic

8
00:00:30,268 --> 00:00:34,645
representation of an I/O operation for
that particular family of devices,

9
00:00:34,645 --> 00:00:38,560
whether they are networked devices or
disk devices.

10
00:00:38,560 --> 00:00:44,790
And then it will traverse the hypervisor
resident, the VMM resident I/O stack.

11
00:00:44,790 --> 00:00:48,370
So the bottom of that stack is
the actual real device driver,

12
00:00:48,370 --> 00:00:51,880
and the hypervisor will
invoke that device driver and

13
00:00:51,880 --> 00:00:55,520
perform the I/O operation
on behalf of the guest VM.

14
00:00:55,520 --> 00:00:58,280
Clearly, a key benefit
of this approach is that

15
00:00:58,280 --> 00:01:02,820
now the virtual machine is again
decoupled from the physical device.

16
00:01:02,820 --> 00:01:07,700
Any translation, any emulation, will
be performed by the hypervisor layer.

17
00:01:07,700 --> 00:01:11,410
And because of that, operations
such as sharing and migration, or

18
00:01:11,410 --> 00:01:15,130
the requirements of how we need
to deal with device specifics,

19
00:01:15,130 --> 00:01:17,970
all of that becomes simpler in a sense.

20
00:01:17,970 --> 00:01:22,232
This is a model that's originally
adapted by the VMware ESX hypervisor.

21
00:01:22,232 --> 00:01:26,600
The downside of the model is
that it clearly adds latency

22
00:01:26,600 --> 00:01:31,070
on device accesses because
of this emulation step.

23
00:01:31,070 --> 00:01:35,020
And then also it requires
that the device driver

24
00:01:35,020 --> 00:01:38,890
ecosystem is in certain ways
integrated with the hypervisor.

25
00:01:38,890 --> 00:01:42,710
Now the hypervisor need to
support all of the drivers so

26
00:01:42,710 --> 00:01:46,830
that it can perform
the necessary operations.

27
00:01:46,830 --> 00:01:50,510
And the hypervisor is then exposed
to all of the complexities of, and

28
00:01:50,510 --> 00:01:52,910
bugs of various device drivers.

29
00:01:52,910 --> 00:01:55,410
Again, we said earlier
in the case of VMware,

30
00:01:55,410 --> 00:01:59,780
because of its market share,
this model was a reasonable model,

31
00:01:59,780 --> 00:02:02,450
and it made sense and
it's been sustained because of that.
