1
00:00:00,360 --> 00:00:03,290
In the networking code, you may have
noticed that there are different types

2
00:00:03,290 --> 00:00:06,750
of exceptions, but
you didn't know what they're for.

3
00:00:06,750 --> 00:00:10,500
Now we haven't formally talked
about them, so let's do that now.

4
00:00:10,500 --> 00:00:14,080
The first time you saw and exception was
in the first course in the nano degree

5
00:00:14,080 --> 00:00:17,670
when we were building
the Just Java coffee ordering app.

6
00:00:17,670 --> 00:00:20,740
Now the app ran into an exception and
crashed.

7
00:00:20,740 --> 00:00:24,340
To debug the program,
we opened up the Android logs

8
00:00:24,340 --> 00:00:29,000
to reveal the stack trace and
then discovered an IllegalStateException

9
00:00:29,000 --> 00:00:32,790
was thrown when the submitOrder method
could not be found in the main activity.

10
00:00:34,480 --> 00:00:36,700
Let's look at some
documentation about exceptions.

11
00:00:37,760 --> 00:00:41,220
When the Java method fails, or
runs into an unexpected state,

12
00:00:41,220 --> 00:00:45,570
it can throw an exception,
short for an exceptional event.

13
00:00:45,570 --> 00:00:49,020
Exceptions are basically errors,
but they're also captured or

14
00:00:49,020 --> 00:00:53,430
wrapped in actual instances of the
exception class, which holds information

15
00:00:53,430 --> 00:00:57,090
about what went wrong and what was
happening in the system at the time.

16
00:00:57,090 --> 00:00:58,250
If you look here on the left for

17
00:00:58,250 --> 00:01:02,130
example, you'll also notice that there
are more specific types of exceptions

18
00:01:02,130 --> 00:01:05,209
that actually extend from
the Exceptions super class.

19
00:01:05,209 --> 00:01:08,760
A great example of inheritance
in use in the Java framework.

20
00:01:08,760 --> 00:01:09,800
In other words,

21
00:01:09,800 --> 00:01:14,380
all of these specific classes are
subclasses of the base class Exception.

22
00:01:14,380 --> 00:01:17,820
For example,
here we have an IllegalStateException or

23
00:01:17,820 --> 00:01:19,780
a NullPointerException.

24
00:01:19,780 --> 00:01:22,710
We also saw the SecurityException
earlier in this lesson,

25
00:01:22,710 --> 00:01:24,970
when the Internet permission was
missing from our Soonami App.

26
00:01:26,180 --> 00:01:28,959
Now you could create a new exception
class for your own purposes.

27
00:01:30,050 --> 00:01:33,727
For example, we can create
an InvalidEarthquakeException and

28
00:01:33,727 --> 00:01:35,350
define it as we normally would.

29
00:01:35,350 --> 00:01:36,720
Create a custom class and

30
00:01:36,720 --> 00:01:41,160
then have that custom class just
extend from the base Exception class.

31
00:01:41,160 --> 00:01:43,910
From there, we can customize
the Exception to hold say,

32
00:01:43,910 --> 00:01:47,190
very specify information about
an invalid earthquake scenario.

33
00:01:48,350 --> 00:01:51,900
So as a developer you can write
a method that declares that it will

34
00:01:51,900 --> 00:01:53,400
throw an exception.

35
00:01:53,400 --> 00:01:57,220
Meaning that the code inside that
method either one, generates and

36
00:01:57,220 --> 00:02:01,100
exception to indicate
a unique condition, or two,

37
00:02:01,100 --> 00:02:05,050
and more commonly,
calls a method that throws an exception.

38
00:02:05,050 --> 00:02:08,840
Meaning that the Android runtime tried
to execute some code, but ran into

39
00:02:08,840 --> 00:02:12,460
a problem and therefore gave notice of
the problem by throwing the exception.

40
00:02:13,750 --> 00:02:17,850
It's also important to note that if
an exception is thrown, it also means

41
00:02:17,850 --> 00:02:21,640
that the code following the line that
caused the exception won't get executed.

42
00:02:22,670 --> 00:02:25,000
So how do you do this in Java code?

43
00:02:25,000 --> 00:02:27,890
There are two distinctions that
I'd like you to pay attention to.

44
00:02:27,890 --> 00:02:32,049
Number one, anywhere in your Java
code where you want to cause or

45
00:02:32,049 --> 00:02:35,294
invoke an exception,
you use the key word throw.

46
00:02:35,294 --> 00:02:36,916
Like in this example here,

47
00:02:36,916 --> 00:02:41,010
where we want to throw an
InvalidPurchase Exception(); because we

48
00:02:41,010 --> 00:02:45,760
detected that something went wrong
within our completePurchase() method.

49
00:02:45,760 --> 00:02:48,380
Number two, and
this is much more subtle.

50
00:02:48,380 --> 00:02:52,940
Anytime our code throws an exception
that isn't a descendant of the error or

51
00:02:52,940 --> 00:02:56,920
runtime Exception classes, we must
explicitly declare in our method's

52
00:02:56,920 --> 00:03:00,350
signature that our method
could throw such an exception.

53
00:03:00,350 --> 00:03:04,120
In Java programming speak,
this is known as a checked exception and

54
00:03:04,120 --> 00:03:08,120
has the implication that any code
that calls or uses our method

55
00:03:08,120 --> 00:03:12,440
must handle the exception i.e.,
call our method in a try block.

56
00:03:12,440 --> 00:03:14,660
This is enforced by the Java compiler,

57
00:03:14,660 --> 00:03:18,740
in other words whoever calls
the completePurchase method has to have

58
00:03:18,740 --> 00:03:23,480
a backup plan if the InvalidPurchase
Exception is thrown or occurs.

59
00:03:23,480 --> 00:03:25,960
We'll talk about how to handle
exceptions in the next video.

60
00:03:27,290 --> 00:03:30,790
In case you'd like to learn more about
unchecked versus checked Eeceptions

61
00:03:30,790 --> 00:03:35,040
in more detail, see the tutorial
linked in the notes below this video.

62
00:03:35,040 --> 00:03:36,790
One more important note.

63
00:03:36,790 --> 00:03:38,700
Just because there's
a standard framework for

64
00:03:38,700 --> 00:03:42,000
how to use Exceptions in Java,
it doesn't mean that you should throw

65
00:03:42,000 --> 00:03:44,870
exceptions every time
something goes wrong.

66
00:03:44,870 --> 00:03:48,130
This is where developer
discretion comes into play.

67
00:03:48,130 --> 00:03:52,260
Ideally, if we discover a problem or
a unique situation, we should try and

68
00:03:52,260 --> 00:03:54,190
handle it gracefully in code.

69
00:03:54,190 --> 00:03:57,680
By just falling back to some reasonable
default behavior for example, and

70
00:03:57,680 --> 00:04:00,200
continuing executing if possible.

71
00:04:00,200 --> 00:04:02,810
We call this failing silently.

72
00:04:02,810 --> 00:04:06,680
However, should we deem that it be more
detrimental to keep going with an error

73
00:04:06,680 --> 00:04:11,030
state, then we may decide it's best to
notify our calling code of the error

74
00:04:11,030 --> 00:04:12,770
by throwing exception.

75
00:04:12,770 --> 00:04:15,050
We've seen this in play already.

76
00:04:15,050 --> 00:04:18,459
In the case of our Soonami App, when we
tried to request earthquake data from

77
00:04:18,459 --> 00:04:23,040
the internet, the Android framework
code threw a SecurityException.

78
00:04:23,040 --> 00:04:25,660
This is a case when it's better
to throw an exception and

79
00:04:25,660 --> 00:04:29,860
crash the app as opposed to continuing
without the Internet permission.

80
00:04:29,860 --> 00:04:32,610
Now if the Android framework
code had failed silently,

81
00:04:32,610 --> 00:04:35,560
then we as developers would
probably be super confused

82
00:04:35,560 --> 00:04:38,600
as to why we did receive
response from the server.

83
00:04:38,600 --> 00:04:42,010
In the case of the Soonami and
Quick Report Apps, we won't actually be

84
00:04:42,010 --> 00:04:46,210
creating our own custom exceptions or
throwing exceptions intentionally.

85
00:04:46,210 --> 00:04:50,620
We will however be calling the Android
framework code that does throw exception

86
00:04:50,620 --> 00:04:53,330
and we'll need to handle those
exceptions appropriately.

87
00:04:53,330 --> 00:04:54,340
Let's talk about that next.
