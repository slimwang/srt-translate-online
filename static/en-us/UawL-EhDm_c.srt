1
00:00:00,000 --> 00:00:03,000
Here's our map API. What we need to do is figure out how to draw this map.

2
00:00:03,000 --> 00:00:05,000
The URL is going to look like this.

3
00:00:05,000 --> 00:00:10,000
It's going to be this URL--maps.googleapis.com/maps/apis/staticmap,

4
00:00:10,000 --> 00:00:12,000
and then it's going to have some parameters.

5
00:00:12,000 --> 00:00:18,000
I've done a little research already to find that the only required parameters are size--

6
00:00:18,000 --> 00:00:22,000
which is going to be the size of the map, sensor--

7
00:00:22,000 --> 00:00:26,000
if we were doing this on a phone or in a browser that knows where you are already,

8
00:00:26,000 --> 00:00:28,000
whether to actually try to figure out where the user is.

9
00:00:28,000 --> 00:00:30,000
We're not going to use any of that.

10
00:00:30,000 --> 00:00:33,000
Then we can just add these marker parameters.

11
00:00:33,000 --> 00:00:38,000
Here's one marker, and you can see in here this marker is defining the color to be blue,

12
00:00:38,000 --> 00:00:42,000
and it has a label, and then, also, you can see something that looks like coordinates in here.

13
00:00:42,000 --> 00:00:44,000
I've learned that the color and the label aren't required.

14
00:00:44,000 --> 00:00:47,000
We can just say marker and given it the coordinates.

15
00:00:47,000 --> 00:00:49,000
If you notice here there is another marker parameter.

16
00:00:49,000 --> 00:00:52,000
The way this API works is it just looks from for multiple marker parameters.

17
00:00:52,000 --> 00:00:57,000
We'll just add one marker parameter in the URL for each point that we have.

18
00:00:57,000 --> 00:00:59,000
Let's go ahead and do that.

19
00:00:59,000 --> 00:01:02,000
Now we want to update our front page to actually have the art images.

20
00:01:02,000 --> 00:01:04,000
Let's think about what we're going to do.

21
00:01:04,000 --> 00:01:07,000
We're going to first find which arts have the coordinates.

22
00:01:07,000 --> 00:01:12,000
If we have any arts with coordinates, then we need to display the image URL.

23
00:01:12,000 --> 00:01:15,000
First thing we need to do is we need to define which arts have coordinates. This is fairly easy.

24
00:01:15,000 --> 00:01:19,000
What we can do is we're going to take this list of arts,

25
00:01:19,000 --> 00:01:21,000
and for each one we're going to check to see if it has coordinates.

26
00:01:21,000 --> 00:01:28,000
Let's say for a in arts: if arts.coords: points.append(a.coords).

27
00:01:28,000 --> 00:01:31,000
We have to define points as equal to the empty list. This is pretty straightforward.

28
00:01:31,000 --> 00:01:34,000
For a in arts--for each one of these--if there are coordinates--

29
00:01:34,000 --> 00:01:38,000
The way the datastore works is if there are not coordinates in the database,

30
00:01:38,000 --> 00:01:42,000
this'll just be None. It won't blow up on us or anything. Just add it to the list points.

31
00:01:42,000 --> 00:01:46,000
This is a clear way of writing it. How I would have written it is slightly less clear.

32
00:01:46,000 --> 00:01:49,000
A little shorter. This is just some Python learning for your own edification.

33
00:01:49,000 --> 00:01:56,000
Points = filter(None, (a.coords for a in arts)).

34
00:01:56,000 --> 00:01:58,000
This is a generator--a.coords for a in arts.

35
00:01:58,000 --> 00:02:04,000
This would return an iterator of all the coordinates, which may be either coordinates or None.

36
00:02:04,000 --> 00:02:06,000
Then filter takes two parameters.

37
00:02:06,000 --> 00:02:10,000
It takes a function or None and a list or an iterable

38
00:02:10,000 --> 00:02:15,000
and basically returns all of the items in the list that match the filter.

39
00:02:15,000 --> 00:02:19,000
In this case, if the filter is None, it basically says match all the ones that aren't None.

40
00:02:19,000 --> 00:02:24,000
This will give us all of the coords for each a in art if it's not None.

41
00:02:24,000 --> 00:02:27,000
That does exactly the same as this. We're going to use the slightly shorter version.

42
00:02:27,000 --> 00:02:31,000
This should work. Let's make sure this doesn't blow up on us.

43
00:02:31,000 --> 00:02:35,000
Here we are in the browser. We reload the page, and we see our little guys.

44
00:02:35,000 --> 00:02:37,000
Maybe we should print out the coordinates so we can see them.

45
00:02:37,000 --> 00:02:40,000
Let's go ahead and do that. Okay, we're going to go ahead and write that out.

46
00:02:40,000 --> 00:02:42,000
Let's try that in our browser. There we go.

47
00:02:42,000 --> 00:02:45,000
There's a list of our points, and in this case we only have one. That's good.

48
00:02:45,000 --> 00:02:48,000
There's one subtle bug I'd like to point out to you in this code.

49
00:02:48,000 --> 00:02:52,000
Arts is a query. When we iterate over arts, that's when we actually run the query.

50
00:02:52,000 --> 00:02:55,000
If we never iterated over arts here, this query wouldnâ€™t run.

51
00:02:55,000 --> 00:02:59,000
Well, we iterate over here, and then when we're rendering the front.html--

52
00:02:59,000 --> 00:03:03,000
this template, if you recall, has a loop in it that draws all the arts.

53
00:03:03,000 --> 00:03:06,000
This also iterates over that arts query.

54
00:03:06,000 --> 00:03:08,000
Each time we do that we run the query.

55
00:03:08,000 --> 00:03:11,000
We don't want to run the query twice. That's wasteful.

56
00:03:11,000 --> 00:03:13,000
Not only is it wasteful a query, the results of that query could change.

57
00:03:13,000 --> 00:03:17,000
When ever you find yourself in a situation of iterating over results you get from a database,

58
00:03:17,000 --> 00:03:22,000
whether it's datastore or some other kind of curser based abstraction from a database,

59
00:03:22,000 --> 00:03:24,000
it's usually good to say something like this: [arts = list(arts)]

60
00:03:24,000 --> 00:03:27,000
What this does is it creates a new list out of that arts.

61
00:03:27,000 --> 00:03:30,000
The arts that comes out of here is a curser, and then we basically call

62
00:03:30,000 --> 00:03:34,000
the list constructor on it, which says, okay, make a new list out of that iterable.

63
00:03:34,000 --> 00:03:37,000
Then we can iterate over this list as many times as we want,

64
00:03:37,000 --> 00:03:39,000
and we've kind of detached it from the query.

65
00:03:39,000 --> 00:03:42,000
This is a good habit to get into if you think you're going to be using results from a database

66
00:03:42,000 --> 00:03:46,000
more than once or you're going to be manipulating this result from a database

67
00:03:46,000 --> 00:03:49,000
too far away from this query,

68
00:03:49,000 --> 00:03:51,000
because generally if you get a list of things from an iterable,

69
00:03:51,000 --> 00:03:54,000
you assume that you can go over it a couple of times. That's all this is going to do.

70
00:03:54,000 --> 00:03:56,000
It's basically going to cache the results of this query in a list.

71
00:03:56,000 --> 00:03:59,000
It's very subtle, and I was actually struggling a little bit how to demonstrate that to you.

72
00:03:59,000 --> 00:04:01,000
I don't know how to debug Google queries.

73
00:04:01,000 --> 00:04:03,000
If I could have made this print in the console, I would have.

74
00:04:03,000 --> 00:04:06,000
If we figure that out between now and when we wrap this lesson up,

75
00:04:06,000 --> 00:04:10,000
we'll include that in the instructor comments how to show what queries are actually running.

76
00:04:10,000 --> 00:04:14,000
But I did a little googling and confirmed for myself that this would be the case.

77
00:04:14,000 --> 00:04:18,000
That's good to do.
