1
00:00:00,100 --> 00:00:04,700
It turns out there're at least 13 different defects in this short piece of code,

2
00:00:04,700 --> 00:00:06,670
starting with line number 1.

3
00:00:06,670 --> 00:00:09,750
First off, you can't meaningfully get a double precision result from

4
00:00:09,750 --> 00:00:11,240
a single precision argument.

5
00:00:11,240 --> 00:00:12,760
This is just a bug.

6
00:00:12,760 --> 00:00:15,360
In line 2, there's a documentation problem.

7
00:00:15,360 --> 00:00:19,630
In the comment, the word declaration should be instead, method.

8
00:00:19,630 --> 00:00:21,220
Also in line 2, in the comment,

9
00:00:21,220 --> 00:00:24,930
there should be a space after the right parenthesis in sine of x, and

10
00:00:24,930 --> 00:00:27,950
this is an example, another example of a documentation problem.

11
00:00:27,950 --> 00:00:31,980
Also on line 2, the comment should mention that the algorithms use

12
00:00:31,980 --> 00:00:34,730
the Maclaurin series expansion.

13
00:00:34,730 --> 00:00:38,190
Finally on line two, the comments should actually include what the series looks

14
00:00:38,190 --> 00:00:43,110
like in terms of x minus x cubed over 3 factorial and so on.

15
00:00:43,110 --> 00:00:46,890
These last two are both other examples of documentation problems.

16
00:00:46,890 --> 00:00:50,070
Lines 5 and 6 are an example of another bug.

17
00:00:50,070 --> 00:00:53,890
In this case, some analysis will indicate that the given solution won't work for

18
00:00:53,890 --> 00:00:55,420
negative values of x.

19
00:00:56,868 --> 00:00:59,800
On line 6, to conform with the standards of the rest of the program,

20
00:00:59,800 --> 00:01:02,130
there should be spaces around the equal sign.

21
00:01:02,130 --> 00:01:03,560
This is a coding standard violation.

22
00:01:04,780 --> 00:01:07,580
Line 6 also illustrates an inefficiency.

23
00:01:07,580 --> 00:01:10,730
The variable term gets initialized twice.

24
00:01:10,730 --> 00:01:15,130
Actually, the initialization on line 4 is the superfluous one.

25
00:01:15,130 --> 00:01:17,370
On line 8, there's another inefficiency.

26
00:01:17,370 --> 00:01:20,210
It makes use of exponentiation, which in these sample,

27
00:01:20,210 --> 00:01:24,330
simple circumstances, could be replaced by a more efficient x times x.

28
00:01:25,410 --> 00:01:28,660
Also in lines 8, because the value of x doesn't change inside the loop,

29
00:01:28,660 --> 00:01:31,940
the computation of x times x could be moved outside of the loop,

30
00:01:31,940 --> 00:01:34,310
thereby improving efficiency.

31
00:01:34,310 --> 00:01:36,560
On lines 9 and 10, there's another bug.

32
00:01:36,560 --> 00:01:40,830
The returned value produced by the algorithm is wrong because the test comes

33
00:01:40,830 --> 00:01:42,480
before the accumulation.

34
00:01:42,480 --> 00:01:46,210
Line 10 illustrates another inefficiency in the computation of sum.

35
00:01:46,210 --> 00:01:50,310
The exponentiation is merely doing the job of alternating signs.

36
00:01:50,310 --> 00:01:52,880
Surely, there's a simpler way to do that.

37
00:01:52,880 --> 00:01:55,600
Also on line 10, another inefficiency.

38
00:01:55,600 --> 00:01:58,760
Multiplication is used to flip the values of the sign and

39
00:01:58,760 --> 00:01:59,920
this is inefficient also.
