1
00:00:00,210 --> 00:00:02,900
In the next three lessons we will explore a data set that

2
00:00:02,900 --> 00:00:07,060
resembles user activity on Facebook but before we get to that data

3
00:00:07,060 --> 00:00:09,150
set I need to show you how to read in data that

4
00:00:09,150 --> 00:00:12,410
doesn't come with R and how to subset that data. It turns out

5
00:00:12,410 --> 00:00:15,170
that not all data sets can be easily loaded like the empty

6
00:00:15,170 --> 00:00:18,170
cars data set. In the instructor notes you can find a link to

7
00:00:18,170 --> 00:00:21,630
download a new data set. This data set is going to contain

8
00:00:21,630 --> 00:00:25,280
information on the fifty states in the US. Most of the data comes

9
00:00:25,280 --> 00:00:28,750
from about 1970. Before we can read in the data, we

10
00:00:28,750 --> 00:00:31,800
need to set our current working directory. So, to figure out

11
00:00:31,800 --> 00:00:35,240
what directory you're in now, you can type in getwd. We

12
00:00:35,240 --> 00:00:38,300
can run this command and see the output to the console. It

13
00:00:38,300 --> 00:00:40,780
looks like I'm already in the downloads file, and that also

14
00:00:40,780 --> 00:00:43,730
appears here in the top of my console. So I don't

15
00:00:43,730 --> 00:00:46,870
need to change my directory, but maybe you do. To change

16
00:00:46,870 --> 00:00:50,300
your directory, you can type setwd. This will take a string which

17
00:00:50,300 --> 00:00:52,510
will be the file path to what ever directory you want to

18
00:00:52,510 --> 00:00:54,970
go to. My guess is that your data set is in your

19
00:00:54,970 --> 00:00:58,670
downloads file. So I would probably run this command. Now it's important

20
00:00:58,670 --> 00:01:01,460
to note that whether or not your on a Mac or Windows machine

21
00:01:01,460 --> 00:01:04,459
you still need to separate your paths or your folders with a

22
00:01:04,459 --> 00:01:08,780
forward slash. Also be sure that you use quotes around your path. Now

23
00:01:08,780 --> 00:01:11,894
in order to load up the data, we can use the read.csv

24
00:01:11,894 --> 00:01:15,780
command. This command takes a string, which is the name of the file.

25
00:01:15,780 --> 00:01:17,800
And here we're going to pass it to a variable called

26
00:01:17,800 --> 00:01:21,800
states info. States info is going to save all of our data

27
00:01:21,800 --> 00:01:24,560
into a data frame. When I run this code, I can see

28
00:01:24,560 --> 00:01:27,940
that states info appears in my environment. I can double click on

29
00:01:27,940 --> 00:01:30,230
the data frame in the work space, and this will let

30
00:01:30,230 --> 00:01:33,530
me see the table of values in R Studio. Now, let's say

31
00:01:33,530 --> 00:01:37,840
I wanted to get information on states located in only the Northeast.

32
00:01:37,840 --> 00:01:41,030
Those states would be states like Connecticut and they have a state

33
00:01:41,030 --> 00:01:44,110
region of one. I'm going to go back to my R-script

34
00:01:44,110 --> 00:01:46,760
and write a command that pulls in this data. This

35
00:01:46,760 --> 00:01:50,130
subset command would look like this. Here I'm passing the

36
00:01:50,130 --> 00:01:53,630
data frame states info to subset and I'm asking for

37
00:01:53,630 --> 00:01:56,620
it to retrieve any states that have a state.region equal

38
00:01:56,620 --> 00:01:59,210
to one. When I run this code I can see

39
00:01:59,210 --> 00:02:02,970
the output down below. We have Connecticut, Maine, and many

40
00:02:02,970 --> 00:02:06,780
others. Now, there is another way to subset this data frame.

41
00:02:06,780 --> 00:02:08,570
I didn't want to show you it, just so that way, you don't

42
00:02:08,570 --> 00:02:12,130
get confused later if you see it. It uses bracket notation, where we

43
00:02:12,130 --> 00:02:15,900
have the name of our data set, followed by two brackets. And we'll

44
00:02:15,900 --> 00:02:19,460
have a comma in between. This first spot is for the rows of our

45
00:02:19,460 --> 00:02:22,630
data set. That we want to keep. And the second spot is for

46
00:02:22,630 --> 00:02:25,440
the column's that we want to keep. So if I want only the

47
00:02:25,440 --> 00:02:28,250
states in the Northeast, I would write this code. The name of the

48
00:02:28,250 --> 00:02:31,810
data set is states info and then I want the rows that have a

49
00:02:31,810 --> 00:02:34,930
state region equal to one. Now I can't just use state region

50
00:02:34,930 --> 00:02:37,520
here, I need to access the actual variable, so I have to

51
00:02:37,520 --> 00:02:40,760
put states info and the dollar sign. This gives me the actual

52
00:02:40,760 --> 00:02:43,680
variable value and I can see if it's equal to one. If

53
00:02:43,680 --> 00:02:46,690
it is equal to one, I want to return every single column in

54
00:02:46,690 --> 00:02:51,040
the data frame. So for example, with Connecticut if it's state region

55
00:02:51,040 --> 00:02:54,030
is equal to one. I want to return every single column in this

56
00:02:54,030 --> 00:02:57,750
row. To return all of the columns, I'll just leave this blank.

57
00:02:57,750 --> 00:03:00,180
So this code searches for roads that have a state region

58
00:03:00,180 --> 00:03:02,910
equal to one. And then it takes all the columns in that

59
00:03:02,910 --> 00:03:05,800
row. And all of this will be sent to the console as

60
00:03:05,800 --> 00:03:08,750
a new data frame. Now it might not be so helpful to

61
00:03:08,750 --> 00:03:11,930
have this output just in the console. So we can save these

62
00:03:11,930 --> 00:03:15,990
subsets into new variables. I'm also going to include some functions to print

63
00:03:15,990 --> 00:03:18,760
out the first two rows of each data frame, and also their

64
00:03:18,760 --> 00:03:23,110
dimensions. Hopefully, I've convinced you that they're the same data set. Now,

65
00:03:23,110 --> 00:03:25,710
I really want you to pay careful attention to the syntax

66
00:03:25,710 --> 00:03:28,870
in both of these examples. Throughout this course, we tend to

67
00:03:28,870 --> 00:03:31,940
make use of the subset command, but there might be instances

68
00:03:31,940 --> 00:03:35,390
where we use this. Just know that both methods produce the

69
00:03:35,390 --> 00:03:38,890
same result. Now, I recommend that you try subsetting this data

70
00:03:38,890 --> 00:03:41,270
frame for other regions of the country on your own. You

71
00:03:41,270 --> 00:03:43,920
could also try finding out which states have an illiteracy rate

72
00:03:43,920 --> 00:03:48,430
of 0.5%, or which states have high school graduation rates above 50%.

73
00:03:48,430 --> 00:03:49,980
Feel free to play around.
