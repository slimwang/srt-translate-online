1
00:00:00,150 --> 00:00:03,980
So far we've focused on explaining
the basics of how to virtualize

2
00:00:03,980 --> 00:00:06,590
efficiently the CPU, but

3
00:00:06,590 --> 00:00:10,900
let's now look at the other types of
resources looking at memory first.

4
00:00:10,900 --> 00:00:14,680
We will explain how memory
virtualization can be achieved for

5
00:00:14,680 --> 00:00:17,490
the two basic virtualization approaches,

6
00:00:17,490 --> 00:00:20,130
whether it's based on
full virtualization, or

7
00:00:20,130 --> 00:00:25,250
requires guest modification and we will
talk about full virtualization first.

8
00:00:25,250 --> 00:00:29,670
For full virtualization a key
requirement is that the guest operating

9
00:00:29,670 --> 00:00:36,030
system continues to observe a contiguous
linear physical address space

10
00:00:36,030 --> 00:00:41,060
that starts from physical address zero,
this is what an operating system with

11
00:00:41,060 --> 00:00:45,816
c if it actually own the physical memory
and run natively on physical hardware.

12
00:00:45,816 --> 00:00:50,190
To achieve this we distinguish
among three types of addresses,

13
00:00:50,190 --> 00:00:51,320
virtual addresses, so

14
00:00:51,320 --> 00:00:55,000
these are the ones that are used
by the applications in the guest.

15
00:00:55,000 --> 00:00:59,580
Physical addresses, these are the ones
that the guest thinks are the addresses

16
00:00:59,580 --> 00:01:05,870
of the physical resource and the machine
addresses, these are the actual machine

17
00:01:05,870 --> 00:01:10,770
addresses with the actual physical
addresses on the underlying platform.

18
00:01:10,770 --> 00:01:14,910
The similar distinction of virtual
verses physical verses machine will also

19
00:01:14,910 --> 00:01:18,700
apply to the page numbers and
the page frame numbers.

20
00:01:18,700 --> 00:01:23,390
So given this, the guest operating
system can continue make mappings of

21
00:01:23,390 --> 00:01:28,750
virtual addresses to of the physical
addresses that it thinks it owns,

22
00:01:28,750 --> 00:01:31,520
and then underneath that
the hypervisor will then pick

23
00:01:31,520 --> 00:01:36,050
these physical addresses that the guests
believes are the real ones and

24
00:01:36,050 --> 00:01:39,120
map them to the real machine addresses.

25
00:01:39,120 --> 00:01:42,560
So in a sense they're two page tables,
one that's maintained by the guest

26
00:01:42,560 --> 00:01:46,050
operating system, and another one
that's maintained by the hypervisor.

27
00:01:46,050 --> 00:01:50,360
Now remember that at the hardware level,
we have a number of mechanisms,

28
00:01:50,360 --> 00:01:56,650
the memory management unit, the TLB
caching of the address translations,

29
00:01:56,650 --> 00:02:00,600
that these mechanisms help with
the address translation process,

30
00:02:00,600 --> 00:02:04,420
make it much more efficient, and
don't require us, in software,

31
00:02:04,420 --> 00:02:08,220
to repeatedly perform address
translations and validations.

32
00:02:08,220 --> 00:02:10,250
Now this option that we discussed so

33
00:02:10,250 --> 00:02:14,750
far will require that every
single memory access goes through

34
00:02:14,750 --> 00:02:18,330
two separate translation, the first
one which will be done in software,

35
00:02:18,330 --> 00:02:22,640
and then the second one potentially
can take advantage of hardware

36
00:02:22,640 --> 00:02:27,890
resources like TLB because the hardware
will understand only this page table.

37
00:02:27,890 --> 00:02:31,710
Clearly this will be too expensive
since this will add over hands on

38
00:02:31,710 --> 00:02:33,470
every single memory reference,

39
00:02:33,470 --> 00:02:38,820
it will slow down the ability to
run at near native hardware speeds.

40
00:02:38,820 --> 00:02:43,410
The second option is for the hypervisor
to maintain a shadow page table,

41
00:02:43,410 --> 00:02:47,370
in which it actually looks at what
are the virtual addresses that

42
00:02:47,370 --> 00:02:50,760
the guests has mapped to
these physical addresses.

43
00:02:50,760 --> 00:02:54,600
And then in the shadow page
table it directly establishes

44
00:02:54,600 --> 00:02:58,750
a mapping between the virtual addresses
that are used by the guest, and

45
00:02:58,750 --> 00:03:04,800
the machine addresses that are used by
the hypervisor by the physical hardware.

46
00:03:04,800 --> 00:03:10,590
Then if the hardware MMU uses this
page table, the guest operating system

47
00:03:10,590 --> 00:03:15,650
is allowed to execute natively using the
applications will use virtual addresses,

48
00:03:15,650 --> 00:03:20,210
and these will be directly translated
to the machine addresses that are,

49
00:03:20,210 --> 00:03:22,110
used by the physical hardware.

50
00:03:22,110 --> 00:03:26,220
The hypervisor will clearly have to be
responsible to maintain consistence

51
00:03:26,220 --> 00:03:31,220
between these two page tables and it
will have to employ mechanism that for

52
00:03:31,220 --> 00:03:35,330
instance invalidate,
what is the currently valid page tables,

53
00:03:35,330 --> 00:03:39,120
shadow page table whenever there is a,
context wedge or

54
00:03:39,120 --> 00:03:43,810
to write protect the guest page table,
in order to keep track of new mappings

55
00:03:43,810 --> 00:03:47,370
that the guest operating system
install since similar mechanism.

56
00:03:47,370 --> 00:03:51,540
This write protection is necessary so
that whenever the guest OS tries to

57
00:03:51,540 --> 00:03:55,250
install new virtual to physical
address mapping in the page

58
00:03:55,250 --> 00:03:59,870
tables that are used by the guest, this
will cause a trap to the hypervisor,

59
00:03:59,870 --> 00:04:04,240
and then the hypervisor will be able
to pick up that virtual address and

60
00:04:04,240 --> 00:04:07,490
then associate the corresponding
machine address and

61
00:04:07,490 --> 00:04:11,790
insert this mapping into the page table
that is used by the hardware MMU.

62
00:04:11,790 --> 00:04:14,380
This can be done completely
transparently to the guest

63
00:04:14,380 --> 00:04:15,210
operating system.
