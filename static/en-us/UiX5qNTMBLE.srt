1
00:00:00,210 --> 00:00:03,608
You're more likely to want a default
value for type properties,

2
00:00:03,608 --> 00:00:05,289
also called class properties.

3
00:00:05,289 --> 00:00:09,349
You can think of class properties as
belonging more to the class itself than

4
00:00:09,349 --> 00:00:13,229
to any one instance of a class because
they don't vary across objects.

5
00:00:13,229 --> 00:00:17,664
A type property has the same value for
every instance of a class.

6
00:00:17,664 --> 00:00:19,680
We use type properties mostly for

7
00:00:19,680 --> 00:00:23,354
data we want every instance of
a class to have easy access to.

8
00:00:23,354 --> 00:00:25,958
For example,
if we had a class called kids movie,

9
00:00:25,958 --> 00:00:29,182
we might want to type property
called permitted ratings to keep

10
00:00:29,182 --> 00:00:32,039
track of which ratings
are permissible for children.

11
00:00:32,039 --> 00:00:35,029
To indicate the permitted
ratings as a type property,

12
00:00:35,029 --> 00:00:38,353
we place the word static or
class in front of its definition.

13
00:00:38,353 --> 00:00:42,793
Type properties are also referred to as
static properties in languages like C

14
00:00:42,793 --> 00:00:43,415
and Java.

15
00:00:43,415 --> 00:00:46,203
The value of this property
won't change across movies, but

16
00:00:46,203 --> 00:00:48,617
it's nice to have these
ratings at our fingertips.

17
00:00:48,617 --> 00:00:51,899
It'd also be nice if we had some
information about the reviews for

18
00:00:51,899 --> 00:00:52,680
these movies.

19
00:00:52,680 --> 00:00:55,699
Let's add an array of reviews
from different media outlets.

20
00:00:55,699 --> 00:00:56,708
But then, of course,

21
00:00:56,708 --> 00:01:00,228
it'd be really convenient if we could
see the average of the reviewer scores.

22
00:01:00,228 --> 00:01:03,361
Let's call it a metascore,
like the app Metacritic.

23
00:01:03,361 --> 00:01:06,183
Such a metascore is known
as a computed property,

24
00:01:06,183 --> 00:01:09,886
a property that's computed based
on existing data in the class.

25
00:01:09,886 --> 00:01:13,903
Computed properties have custom
getters and optionally custom setters.

26
00:01:13,903 --> 00:01:16,202
This one doesn't really
need a setter though.

27
00:01:16,202 --> 00:01:17,688
Here's our custom getter.

28
00:01:17,688 --> 00:01:20,544
You probably haven't seen
this reduce function before.

29
00:01:20,544 --> 00:01:24,909
It's a handy method for reducing
the values of an array to one value.

30
00:01:24,909 --> 00:01:28,492
For a fun challenge, see if you can
figure out exactly what this code is

31
00:01:28,492 --> 00:01:31,249
doing and post what you find
on the discussion forum.

32
00:01:31,249 --> 00:01:34,308
For now, I'll just tell you that
it's returning the average of all

33
00:01:34,308 --> 00:01:35,497
the scores in this array.

34
00:01:35,497 --> 00:01:36,845
Let's test out our getter.

35
00:01:36,845 --> 00:01:40,308
We'll initialize a movie with
some reviewer scores and

36
00:01:40,308 --> 00:01:43,114
then access the metascore
using dot syntax.

37
00:01:43,114 --> 00:01:43,903
Sweet!

38
00:01:43,903 --> 00:01:45,854
This one ought to be a crowd-pleaser.

39
00:01:45,854 --> 00:01:49,955
Now, in looking at the custom getter for
our metascore,

40
00:01:49,955 --> 00:01:53,122
it may have occurred to you,
wait a second.

41
00:01:53,122 --> 00:01:56,581
What about the getters and
setters for the other properties?

42
00:01:56,581 --> 00:01:57,325
Guess what?

43
00:01:57,325 --> 00:01:59,321
We don't have to write them.

44
00:01:59,321 --> 00:02:01,790
They're automatically created
when you declare a property.
