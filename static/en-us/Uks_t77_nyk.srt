1
00:00:00,220 --> 00:00:02,420
That brings us to a discussion of procedural

2
00:00:02,420 --> 00:00:06,290
design versus an object-based design. You're all familiar,

3
00:00:06,290 --> 00:00:10,150
I'm sure, with procedural design where you're writing

4
00:00:10,150 --> 00:00:13,990
your code as one monolithic entity, and in a

5
00:00:13,990 --> 00:00:17,190
procedural world, you have shared state in terms

6
00:00:17,190 --> 00:00:19,370
of global variables, and you may have private

7
00:00:19,370 --> 00:00:22,040
state in the caller and the callee. And

8
00:00:22,040 --> 00:00:24,702
state is now distributed all over the place. So,

9
00:00:24,702 --> 00:00:27,762
basically, the interface between the caller and the

10
00:00:27,762 --> 00:00:31,162
callee is through the normal procedure call mechanism that

11
00:00:31,162 --> 00:00:33,814
one sub-system may make a procedure call that

12
00:00:33,814 --> 00:00:37,702
goes into another subsystem. And this is how monolithic

13
00:00:37,702 --> 00:00:40,942
kernels are built where state is now strewn

14
00:00:40,942 --> 00:00:44,445
all over the place. There maybe some shared state

15
00:00:44,445 --> 00:00:46,857
and private state of subsystems and so on,

16
00:00:46,857 --> 00:00:50,790
and this is typically how monolithic systems are built.

17
00:00:50,790 --> 00:00:53,860
To contrast this procedural design to object-based

18
00:00:53,860 --> 00:00:58,600
design, in an object-based design, objects contain the

19
00:00:58,600 --> 00:01:01,570
state that is entirely contained within this

20
00:01:01,570 --> 00:01:05,880
object, not visible outside. And there are methods

21
00:01:05,880 --> 00:01:08,980
that are inside those object that manipulate

22
00:01:08,980 --> 00:01:11,360
the state that is part of this object.

23
00:01:11,360 --> 00:01:13,950
So in other words, externally, the state is

24
00:01:13,950 --> 00:01:16,190
not visible. The only thing that is visible

25
00:01:16,190 --> 00:01:20,160
are the methods for invocation and these invocations

26
00:01:20,160 --> 00:01:22,090
work on the state that is local to the

27
00:01:22,090 --> 00:01:25,010
object. So what you get with an object-based

28
00:01:25,010 --> 00:01:30,510
design is strong interfaces and complete isolation of the

29
00:01:30,510 --> 00:01:33,090
state of an object from everything else. Contrast

30
00:01:33,090 --> 00:01:35,530
that with the procedural design, where the state can

31
00:01:35,530 --> 00:01:37,750
be strewn all over the place, and the

32
00:01:37,750 --> 00:01:41,210
shared state can be manipulated from several different subsystems

33
00:01:41,210 --> 00:01:45,780
that are part of a big monolith. But in this case, what we have is, strong

34
00:01:45,780 --> 00:01:49,290
interfaces that completely separate one object from other

35
00:01:49,290 --> 00:01:52,530
objects. And the state that is specific to

36
00:01:52,530 --> 00:01:55,690
an object is contained entirely inside this object,

37
00:01:55,690 --> 00:01:59,625
invisible to other objects outside except via well-defined

38
00:01:59,625 --> 00:02:03,030
invocation methods. That have been exposed by this

39
00:02:03,030 --> 00:02:06,764
object implementor to the outside world. As OS designers,

40
00:02:06,764 --> 00:02:09,449
the immediate question that might come up is,

41
00:02:09,449 --> 00:02:12,280
well, if we have these strong interfaces, it sounds

42
00:02:12,280 --> 00:02:15,760
similar to what we discussed when we talked about

43
00:02:15,760 --> 00:02:18,870
the structure of operating systems early on, and that

44
00:02:18,870 --> 00:02:22,530
is border corssing across protection domains. Is it going to

45
00:02:22,530 --> 00:02:25,190
cost us? But, there are ways around it. To

46
00:02:25,190 --> 00:02:28,400
make these border crossing performance conscious as well. Now,

47
00:02:28,400 --> 00:02:31,640
where to apply this object orientation? Well, in Spring,

48
00:02:31,640 --> 00:02:35,940
for instance, they applied object orientation in building

49
00:02:35,940 --> 00:02:38,650
the operating system kernel. So the key point

50
00:02:38,650 --> 00:02:41,300
to take away is, if object orientation is

51
00:02:41,300 --> 00:02:45,090
good at the level of implementing a high performance

52
00:02:45,090 --> 00:02:47,770
operating system kernel, it should be good at

53
00:02:47,770 --> 00:02:50,310
higher levels of the software as well. And while

54
00:02:50,310 --> 00:02:54,130
I am expounding the virtues of object-based design

55
00:02:54,130 --> 00:02:56,650
here, we have already seen this when we talked

56
00:02:56,650 --> 00:02:59,910
about Tornado system. That was also using

57
00:02:59,910 --> 00:03:03,940
an object-based approach to building operating system kernels.
