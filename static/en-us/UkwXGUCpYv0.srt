1
00:00:00,440 --> 00:00:02,100
PList and JSON or

2
00:00:02,100 --> 00:00:07,040
JSON files are one of those concepts
that takes practice to fully grasp.

3
00:00:07,040 --> 00:00:10,460
In this playground I've demonstrated
some really practical examples for

4
00:00:10,460 --> 00:00:11,110
using each.

5
00:00:12,520 --> 00:00:15,150
But before we look at the code
let's take a look at some PList and

6
00:00:15,150 --> 00:00:16,640
JSON files.

7
00:00:16,640 --> 00:00:19,650
So, I'm going to go over here
to the resources folder.

8
00:00:19,650 --> 00:00:23,116
Let's start by looking
at the students.p list.

9
00:00:23,116 --> 00:00:27,460
So, if we look here at the top, we
notice that this contains an array, and

10
00:00:27,460 --> 00:00:29,850
within the array we have dictionaries.

11
00:00:30,940 --> 00:00:32,590
Now for each dictionary,

12
00:00:32,590 --> 00:00:37,250
we have key value pairs representing
some things related to students.

13
00:00:37,250 --> 00:00:39,770
So we have a key name that
maps to a String value,

14
00:00:39,770 --> 00:00:42,260
in this case the value is Shawn.

15
00:00:42,260 --> 00:00:46,460
We have an H key that maps to
a number value, in this case 57.

16
00:00:46,460 --> 00:00:49,350
And we have School key that
maps to another String,

17
00:00:49,350 --> 00:00:52,310
in this case the University of Maryland.

18
00:00:52,310 --> 00:00:56,430
Each of these dictionaries could easily
be converted into a simple struct.

19
00:00:56,430 --> 00:00:58,640
That's what this first
code example does.

20
00:00:58,640 --> 00:01:01,980
So here at the top of the file we define
the student struct with the name, and

21
00:01:01,980 --> 00:01:03,510
age, and school.

22
00:01:03,510 --> 00:01:06,180
These next lines of code are critical.

23
00:01:06,180 --> 00:01:08,670
This line here creates a path

24
00:01:08,670 --> 00:01:14,140
represented as a URL that tells us
where the student's plist is located.

25
00:01:14,140 --> 00:01:18,650
Then this next line of code takes that
path, again that's represented as a URL,

26
00:01:18,650 --> 00:01:22,930
and loads it into an array and
we're calling this the student array.

27
00:01:22,930 --> 00:01:25,510
Now some of the code going on
here you haven't quite seen yet

28
00:01:25,510 --> 00:01:27,290
but you could probably make sense of it.

29
00:01:28,450 --> 00:01:31,250
It uses classes which
are similar to Strucs and

30
00:01:31,250 --> 00:01:35,740
they have their own functions like
URL for Resource that belong to them.

31
00:01:35,740 --> 00:01:36,860
We'll get to classes later.

32
00:01:36,860 --> 00:01:40,560
For now, I just want to focus on the
task at hand which is working with plist

33
00:01:40,560 --> 00:01:41,350
and jsondata.

34
00:01:42,590 --> 00:01:45,460
Now another thing I want to know is
the reason that we're loading this into

35
00:01:45,460 --> 00:01:48,130
an array instead of maybe a dictionary.

36
00:01:48,130 --> 00:01:52,181
Is if we go back to the plist file,
we can see here at the top that the root

37
00:01:52,181 --> 00:01:55,820
of this plist file is an array,
and not a dictionary.

38
00:01:55,820 --> 00:01:56,680
So that's key.

39
00:01:56,680 --> 00:02:01,250
In the next lines of code we loop
through the students array and

40
00:02:01,250 --> 00:02:04,780
we check for those key value pairs,
name, age, and school.

41
00:02:04,780 --> 00:02:07,140
And if each of those
key value pairs exist,

42
00:02:07,140 --> 00:02:11,460
then we create a student struct and we
append it to our studentStructs array.

43
00:02:12,510 --> 00:02:15,840
Then at the bottom I have this simple
use case where we print some information

44
00:02:15,840 --> 00:02:17,720
about each student.

45
00:02:17,720 --> 00:02:19,660
Now this printing is pretty trivial, but

46
00:02:19,660 --> 00:02:23,366
imagine if this student data was loaded
from the p list file into the student

47
00:02:23,366 --> 00:02:27,270
structs, and then we displayed in
some slick looking user interface.

48
00:02:27,270 --> 00:02:28,850
Now that would be pretty sweet.

49
00:02:28,850 --> 00:02:31,980
You'll start building towards doing
things like this as you start building

50
00:02:31,980 --> 00:02:32,960
apps from scratch.
