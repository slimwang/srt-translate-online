1
00:00:00,000 --> 00:00:02,750
Here's our first loop. Let's think about what we know--

2
00:00:02,750 --> 00:00:06,000
"n" is any positive integer and "i" is zero.

3
00:00:06,000 --> 00:00:12,000
What we do know, that "i" is less than "n"

4
00:00:12,000 --> 00:00:14,410
because zero is less than any positive integer.

5
00:00:14,410 --> 00:00:18,550
This loop runs while "i" is less than equal to "n."

6
00:00:18,550 --> 00:00:21,560
In every iteration, "i" increases by 1.

7
00:00:21,560 --> 00:00:26,190
We know intuitively that eventually "i" will become greater than "n"

8
00:00:26,190 --> 00:00:27,290
because "n" is fixed.

9
00:00:27,290 --> 00:00:32,830
So, we can say definitively, that this loop always finishes.

10
00:00:32,830 --> 00:00:38,040
Like the previous loop, let's look at what we have.

11
00:00:38,040 --> 00:00:42,310
We have a positive integer-- "n"-- "i"--which starts at 1--

12
00:00:42,310 --> 00:00:43,940
and here a while true loop.

13
00:00:43,940 --> 00:00:47,780
It will continue forever until we trigger the break.

14
00:00:47,780 --> 00:00:50,180
So, let's look at the inside--

15
00:00:50,180 --> 00:00:52,390
"i" at every iteration, doubles--

16
00:00:52,390 --> 00:00:55,690
and "n" at every iteration increases by 1.

17
00:00:55,690 --> 00:00:59,290
The point at which we break is when "i" becomes greater than "n."

18
00:00:59,290 --> 00:01:03,030
One way to think about "i" is that it is an exponential function.

19
00:01:03,030 --> 00:01:05,330
At every iteration it doubles in size--

20
00:01:05,330 --> 00:01:10,970
"n" is linear--every iteration increases by 1.

21
00:01:10,970 --> 00:01:15,180
We know "i" starts at 1, but every time it doubles--

22
00:01:15,180 --> 00:01:18,580
"n," however, can start at any positive integer.

23
00:01:18,580 --> 00:01:22,680
It can be anywhere on here. But we do know, that it increases very slowly.

24
00:01:22,680 --> 00:01:26,390
In fact, it's guaranteed that eventually "i" will surpass "n."

25
00:01:26,390 --> 00:01:29,690
I will leave the mathematical proof to you, but you can take my word for it for now.

26
00:01:29,690 --> 00:01:32,990
Considering that eventually "i" is going to be greater than "n,"

27
00:01:32,990 --> 00:01:34,860
we know that we will eventually break.

28
00:01:34,860 --> 00:01:39,200
Which proves that loop 2 always finishes.

29
00:01:39,200 --> 00:01:40,840
So, let's look at this last loop.

30
00:01:40,840 --> 00:01:42,500
It's pretty simple code.

31
00:01:42,500 --> 00:01:44,540
We're given an integer "n," which is any positive integer.

32
00:01:44,540 --> 00:01:49,780
While that integer is not equal to 1-- if it's even--

33
00:01:49,780 --> 00:01:53,710
we divide by 2, otherwise we multiply by 3 and add 1.

34
00:01:53,710 --> 00:01:55,650
This is pretty simple, however,

35
00:01:55,650 --> 00:01:58,290
in order to figure out whether this loop terminates,

36
00:01:58,290 --> 00:02:00,190
you have to solve an open mathematical problem.

37
00:02:00,190 --> 00:02:04,090
You have to determine whether or not the Collatz conjecture is true.

38
00:02:04,090 --> 00:02:07,400
The Collatz conjecture states that given any positive integer "n"--

39
00:02:07,400 --> 00:02:09,300
this code will terminate.

40
00:02:09,300 --> 00:02:12,000
It's an open mathematical problem. And no one has solved it.

41
00:02:12,000 --> 00:02:15,570
This is just an example of why a really simple loop like this

42
00:02:15,570 --> 00:02:18,470
is really hard to determine whether or not it terminates.

43
00:02:18,470 --> 00:02:20,240
As mentioned in the lecture,

44
00:02:20,240 --> 00:02:24,210
it's actually impossible for a computer to solve this problem in general.

45
00:02:24,210 --> 00:02:27,210
The correct answer, this is unknown to anyone in the known universe.
