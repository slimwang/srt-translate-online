1
00:00:00,110 --> 00:00:02,410
You've seen git log output a few times now and

2
00:00:02,410 --> 00:00:05,540
you know that it doesn't necessarily always show you every commit.

3
00:00:05,540 --> 00:00:08,240
So how does git log figure out which commits to show you?

4
00:00:08,240 --> 00:00:11,070
It turns out that each commit knows about its parent.

5
00:00:11,070 --> 00:00:12,300
That is, it stores a reference to

6
00:00:12,300 --> 00:00:14,230
the commit that was checked out when it was made.

7
00:00:14,230 --> 00:00:15,860
If you were on a branch when you made the commit,

8
00:00:15,860 --> 00:00:20,070
it still just stores the commit ID of what was then the tip of the branch.

9
00:00:20,070 --> 00:00:22,330
Commit doesn't care anything about branch names.

10
00:00:22,330 --> 00:00:26,360
Only the branches themselves store anything about the position of the branches.

11
00:00:26,360 --> 00:00:28,950
To make it really clear what info is actually stored by Git,

12
00:00:28,950 --> 00:00:32,670
I'll include arrows in our diagram to show each commit's parent.

13
00:00:32,670 --> 00:00:34,820
This will become more important once we get to merging,

14
00:00:34,820 --> 00:00:39,002
but it's good practice to start thinking of commits as having parents now.

15
00:00:39,002 --> 00:00:40,890
All right, back to the question of git log.

16
00:00:40,890 --> 00:00:44,290
Log starts with the current commit or the latest commit of any branch or

17
00:00:44,290 --> 00:00:45,950
branches that are specified and

18
00:00:45,950 --> 00:00:49,410
traces back until it gets to a commit that doesn't have a parent.

19
00:00:49,410 --> 00:00:51,400
This will generally be the initial commit.

20
00:00:51,400 --> 00:00:53,910
This leads us to the concept of reachability.

21
00:00:53,910 --> 00:00:57,620
You can see that in our diagram, there are some commits, say, this one,

22
00:00:57,620 --> 00:01:00,510
that can't be reached by other commits, say, this one.

23
00:01:00,510 --> 00:01:03,090
There's no way to get from here to here.

24
00:01:03,090 --> 00:01:04,709
Suppose we checked out this commit.

25
00:01:04,709 --> 00:01:06,190
Remember that we marked this with a star.

26
00:01:06,190 --> 00:01:09,732
And then we made a new commit from there, which would move head or

27
00:01:09,732 --> 00:01:11,490
the checkout commit to here.

28
00:01:11,490 --> 00:01:14,560
If you then checked out an existing branch, say, a master, then the commit

29
00:01:14,560 --> 00:01:17,200
that you just made would be lost, unless you happen to have written down

30
00:01:17,200 --> 00:01:21,520
the commit ID, since it's not actually reachable by any of the current branches.

31
00:01:21,520 --> 00:01:24,850
To drive home this concept, we've created a fictional diagram.

32
00:01:24,850 --> 00:01:29,410
We've used shortened Git-like commit IDs to label each commit and

33
00:01:29,410 --> 00:01:31,830
we've just used letters to label the branches.

34
00:01:31,830 --> 00:01:35,700
Given this diagram, if I ran git log for each branch a and

35
00:01:35,700 --> 00:01:38,350
b, which commits would be listed?

36
00:01:38,350 --> 00:01:42,950
List the commit by their shortened IDs from most to least recent and

37
00:01:42,950 --> 00:01:44,660
separate them with commas.

38
00:01:44,660 --> 00:01:48,110
Also, are there any unreachable commits in this diagram?

39
00:01:48,110 --> 00:01:49,040
If so, list them here.
