1
00:00:00,410 --> 00:00:04,660
The trick to this dynamic optimization, is recognizing what

2
00:00:04,660 --> 00:00:07,140
the state of the protocol is at any point of

3
00:00:07,140 --> 00:00:10,360
time, and how the protocol has to react to

4
00:00:10,360 --> 00:00:13,300
an input event. Whether the event is coming from the

5
00:00:13,300 --> 00:00:15,990
top, or from the bottom, how the protocol has

6
00:00:15,990 --> 00:00:19,350
to react to that event is the trick, and this

7
00:00:19,350 --> 00:00:23,090
is what is called the common case predicate. CCP

8
00:00:23,090 --> 00:00:26,300
for short. For example, if we receive a packet and

9
00:00:26,300 --> 00:00:28,760
the state of the protocol says that if a

10
00:00:28,760 --> 00:00:33,260
particular sequence number is received, then we are ready

11
00:00:33,260 --> 00:00:36,830
to deliver the packet to the application. If that

12
00:00:36,830 --> 00:00:39,340
is the state of the protocol, that is what

13
00:00:39,340 --> 00:00:41,930
is called a Common Case Predicate. These Common Case

14
00:00:41,930 --> 00:00:45,240
Predicates are predicates that can be derived From the

15
00:00:45,240 --> 00:00:47,970
state of the protocol, by looking at the conditional

16
00:00:47,970 --> 00:00:51,830
statement. So, from the conditional statements in the microprotocol

17
00:00:51,830 --> 00:00:54,450
that have been implemented and available to you. We

18
00:00:54,450 --> 00:00:58,610
can actually synthesize these common case predicates. And once these

19
00:00:58,610 --> 00:01:02,260
common case predicates have been synthesized, then we can say,

20
00:01:02,260 --> 00:01:05,349
well, if the common case predicate is satisfied, then you

21
00:01:05,349 --> 00:01:08,790
don't have to go through all the craft indicated by

22
00:01:08,790 --> 00:01:11,690
the multiple layers of the micro protocols assembled on top

23
00:01:11,690 --> 00:01:14,550
of one another. But instead, we can do a much

24
00:01:14,550 --> 00:01:17,500
simpler processing and that's what is called a bypass code.

25
00:01:17,500 --> 00:01:21,470
So, in the dynamic optimization, once these

26
00:01:21,470 --> 00:01:25,070
common case predicates have been identified by

27
00:01:25,070 --> 00:01:27,620
looking at the conditional statements in the

28
00:01:27,620 --> 00:01:31,920
micro protocol, dynamic optimization framework, generates these bypass

29
00:01:31,920 --> 00:01:34,500
code and inserts it into this framework.

30
00:01:34,500 --> 00:01:36,500
So I'm going to complicate this picture a little

31
00:01:36,500 --> 00:01:42,680
bit now, so what we have is A Common Case predicate. For instance it says,

32
00:01:42,680 --> 00:01:45,020
is the sequence number in the packet what I

33
00:01:45,020 --> 00:01:49,130
am expecting it to be. Is this the particular sequence

34
00:01:49,130 --> 00:01:51,350
number? And if that is the sequence number I am

35
00:01:51,350 --> 00:01:55,280
looking for, then I can execute this bypass code and

36
00:01:55,280 --> 00:01:59,050
completely eliminate all these multiple layers of protocol and

37
00:01:59,050 --> 00:02:01,660
go directly to the upper layer perhaps all the way

38
00:02:01,660 --> 00:02:04,220
up to the application. On the other hand, if it

39
00:02:04,220 --> 00:02:07,780
is not the common case predicate that is being satisfied,

40
00:02:07,780 --> 00:02:11,320
then, you have to do the normal processing, of giving

41
00:02:11,320 --> 00:02:14,170
the packet to this micro protocol and it does its

42
00:02:14,170 --> 00:02:17,250
own thing. And you can see that this kind of

43
00:02:17,250 --> 00:02:20,740
framework can be applied to every layer. So you can

44
00:02:20,740 --> 00:02:23,620
take, this is a single layer, and find out what

45
00:02:23,620 --> 00:02:26,950
the common case predicate for this micro-protocol, and use that

46
00:02:26,950 --> 00:02:30,420
common case predicate to signify whether we want to use the

47
00:02:30,420 --> 00:02:33,900
bypass code, or whether we want to go to the micro-protocol.

48
00:02:33,900 --> 00:02:37,190
And we can collapse multiple layers like this. And

49
00:02:37,190 --> 00:02:40,740
derive a common case predicate that collapses all of

50
00:02:40,740 --> 00:02:43,300
these layers into a single predicate, and if it

51
00:02:43,300 --> 00:02:47,150
is satisfied, then it can eliminate processing the packet to

52
00:02:47,150 --> 00:02:49,770
all of these layers, and simply go through the

53
00:02:49,770 --> 00:02:52,590
bypass code to get to the upper layers. That's

54
00:02:52,590 --> 00:02:56,060
the beauty of the dynamic optimization, and it's completely

55
00:02:56,060 --> 00:02:59,130
automated. And it comes from the power of the theorem

56
00:02:59,130 --> 00:03:02,130
proving framework of Nuprl. And the optimization

57
00:03:02,130 --> 00:03:05,670
theorem that is in the Nuprl framework proves

58
00:03:05,670 --> 00:03:09,760
the equivalence of the bypass code, to

59
00:03:09,760 --> 00:03:13,010
the layers of protocol that it is replacing.

60
00:03:13,010 --> 00:03:15,230
That's the beauty of the Nuprl framework,

61
00:03:15,230 --> 00:03:17,860
that in the theoretical world of the theorem

62
00:03:17,860 --> 00:03:20,880
proving framework, we can actually prove through

63
00:03:20,880 --> 00:03:24,310
optimization theorems. That this bypass code does exactly

64
00:03:24,310 --> 00:03:30,330
the same job as all of these multiple layers of micro protocols that were to

65
00:03:30,330 --> 00:03:32,910
process this message. So once we have done

66
00:03:32,910 --> 00:03:37,810
this dynamic optimization, and collapsing the layers, generating

67
00:03:37,810 --> 00:03:40,370
the bypass code, starting of course with

68
00:03:40,370 --> 00:03:42,340
the common case predicate derived from the micro

69
00:03:42,340 --> 00:03:46,740
protocols, then we are ready, to convert the

70
00:03:46,740 --> 00:03:49,580
optimized new Pearl called back to OCaml. And

71
00:03:49,580 --> 00:03:51,510
again, I mentioned that there is a tool,

72
00:03:51,510 --> 00:03:55,250
that, that's available. Straight forward tool that converts

73
00:03:55,250 --> 00:03:59,830
the new Pearl code to the OCaml code, and the final OCaml code that we generate

74
00:03:59,830 --> 00:04:04,920
through this conversion process is the optimized version of the original Ocaml

75
00:04:04,920 --> 00:04:10,790
code and, the theorem proving framework can assert that the original

76
00:04:10,790 --> 00:04:15,950
unoptimized ocaml code is equivalent. To the new optimized Ocaml

77
00:04:15,950 --> 00:04:18,089
call because of the power of the

78
00:04:18,089 --> 00:04:20,839
theorem proving framework. This is where we've sort

79
00:04:20,839 --> 00:04:25,160
of put together theory and practice to get the best of both worlds. A word of

80
00:04:25,160 --> 00:04:29,650
caution, however. There's a difference between optimization and verification.

81
00:04:29,650 --> 00:04:34,370
All that the NuPrl framework is doing is optimization, not verifying whether the

82
00:04:34,370 --> 00:04:40,770
Ocaml code is adhering to behavioral spec of ioatometer.

83
00:04:40,770 --> 00:04:45,614
That's not what is being done. What we're doing here, is saying that. We've

84
00:04:45,614 --> 00:04:48,616
taken unoptimized Ocamel code and produce an

85
00:04:48,616 --> 00:04:52,010
optimized Ocamel code. And through the theoretical

86
00:04:52,010 --> 00:04:54,440
framework, we can assert that the two

87
00:04:54,440 --> 00:04:58,080
are functionally equivalent. So this exercise has

88
00:04:58,080 --> 00:05:01,690
shown the path to synthesizing complex system

89
00:05:01,690 --> 00:05:05,990
software, starting from specification, to implementation to

90
00:05:05,990 --> 00:05:09,040
optimization, putting theory and practice together.
