1
00:00:00,230 --> 00:00:04,019
If we want to change the location of a point, we can use a translation matrix.

2
00:00:04,019 --> 00:00:07,984
This matrix has the translation movement put in the top three positions of the

3
00:00:07,984 --> 00:00:11,936
last column. The rest of the matrix looks the same as the identity matrix. If

4
00:00:11,936 --> 00:00:16,030
you multiply a point by this matrix, the one coordinate in the last position of

5
00:00:16,030 --> 00:00:19,900
the vector multiplies each translation value in turn. This has the effect of

6
00:00:19,900 --> 00:00:24,015
taking the original point. And adding the translation to it. This may seem like

7
00:00:24,015 --> 00:00:27,791
a convoluted way to add a vector to a point, but you'll soon see that many other

8
00:00:27,791 --> 00:00:31,810
transforms can be combined and stored in this matrix, translations among them.

9
00:00:31,810 --> 00:00:35,158
With a single matrix multiply, you can then perform any number of

10
00:00:35,158 --> 00:00:40,526
transformations. Say instead you multiply a vector by this matrix. You'll get

11
00:00:40,526 --> 00:00:44,746
the same vector back. The fourth coordinate of the vector is zero. So for all

12
00:00:44,746 --> 00:00:49,261
the translation values that are multiplied by zero, and so ignored. This makes

13
00:00:49,261 --> 00:00:53,530
sense. A vector does not have a location so it can not be translated. The only

14
00:00:53,530 --> 00:00:57,430
thing mentioning at this point is that this type of matrix and vector notation

15
00:00:57,430 --> 00:01:01,855
Is called column-major form. There is also a row-major form for notation where

16
00:01:01,855 --> 00:01:06,332
the coordinates are written out in a row. The vector row is multiplied by each

17
00:01:06,332 --> 00:01:10,776
column of the matrix in turn. Personally, this is how I learned matrices 30

18
00:01:10,776 --> 00:01:15,346
years ago. Microsoft's DirectX uses this form. The story I heard as to why row

19
00:01:15,346 --> 00:01:19,973
vectors became popular was due to the influence of Steve Koons. He wrote some

20
00:01:19,973 --> 00:01:23,662
influential papers on transformations for computer graphics back in the 1960s.

21
00:01:23,663 --> 00:01:27,135
He said he said he used draw vectors in those papers because it was easier for

22
00:01:27,135 --> 00:01:30,820
the stenographers to type the translation values along the bottom of the matrix

23
00:01:30,820 --> 00:01:34,480
rather than having to type them in the column. All that said, web GL uses

24
00:01:34,480 --> 00:01:38,640
column-major notation. In this convention is also the norm in most publications,

25
00:01:38,640 --> 00:01:42,354
so that's all we use here. Either form is fine, they're both just a way writing

26
00:01:42,354 --> 00:01:45,884
down the math. I mostly want you to be aware that there's another form out there

27
00:01:45,884 --> 00:01:49,294
called row major. The good news is that, internally, Web GL and DirectX

28
00:01:49,294 --> 00:01:53,600
ultimately store the translation values in the same locations in memory. If you

29
00:01:53,600 --> 00:01:58,190
go look at any matrix in memory. You'll see that the last four values are the

30
00:01:58,190 --> 00:02:00,466
three translation values, and then a one.
