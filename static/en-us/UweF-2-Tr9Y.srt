1
00:00:00,500 --> 00:00:03,770
We want to be able to calculate
the total value of a portfolio

2
00:00:03,770 --> 00:00:05,790
day by day by day.

3
00:00:05,790 --> 00:00:07,160
Once we have that information,

4
00:00:07,160 --> 00:00:10,770
then we can compute statistics
on the overall portfolio.

5
00:00:10,770 --> 00:00:12,170
So let's start with an example.

6
00:00:13,340 --> 00:00:17,900
Assume we start with a portfolio
value of one million dollars, and

7
00:00:17,900 --> 00:00:20,950
we're going to take a look
at that portfolio from

8
00:00:20,950 --> 00:00:23,890
the beginning of 2009
to the end of 2011.

9
00:00:23,890 --> 00:00:29,060
And our portfolio consists of
these three symbols, S&P 500,

10
00:00:29,060 --> 00:00:33,760
XOM, Google, and Gold.

11
00:00:33,760 --> 00:00:38,878
And at the beginning of 2009,
we're going to allocate .4 or

12
00:00:38,878 --> 00:00:44,657
40% of our portfolio to SPY,
40% to XOM, 10% to Google, and

13
00:00:44,657 --> 00:00:50,154
10% to Gold, and we'll enter
those positions in the beginning,

14
00:00:50,154 --> 00:00:53,754
and we'll hold them,
and step forward, and

15
00:00:53,754 --> 00:00:59,150
see what the overall value of
the portfolio is day by day.

16
00:00:59,150 --> 00:01:02,020
How do we calculate the total
value of the portfolio day by day?

17
00:01:03,230 --> 00:01:05,870
Here's how to do it step by step.

18
00:01:05,870 --> 00:01:08,500
We start with our prices data frame.

19
00:01:08,500 --> 00:01:14,360
Remember the four columns with
prices every day, indexed by date.

20
00:01:14,360 --> 00:01:18,120
The first step is to
normalize these prices.

21
00:01:18,120 --> 00:01:22,220
As we've done before, it is just the
price values divided by the first row.

22
00:01:23,590 --> 00:01:27,399
So after we normalize, we have
a new data frame, normed, which is,

23
00:01:27,399 --> 00:01:31,580
as we said,
all the prices divided by the first row.

24
00:01:31,580 --> 00:01:35,440
That's going to give us now this
new data frame where the first row

25
00:01:35,440 --> 00:01:39,570
all 1.0 and then it proceeds after that.

26
00:01:39,570 --> 00:01:43,480
And these are essentially cumulative
returns starting from the start date.

27
00:01:44,560 --> 00:01:49,560
The next step is to multiply
these normed values

28
00:01:49,560 --> 00:01:52,600
by the allocations to
each of the equities.

29
00:01:53,600 --> 00:01:57,950
So we'll just multiply normed
times our allocations, allocs, and

30
00:01:57,950 --> 00:02:00,560
that gives us a new data frame alloced.

31
00:02:01,790 --> 00:02:06,172
Now as you remember,
our allocations were 0.4, 0.4, 0.1, 0.1.

32
00:02:06,172 --> 00:02:09,538
So when we do that multiplication,

33
00:02:09,538 --> 00:02:12,410
the first row is going to
represent those numbers.

34
00:02:12,410 --> 00:02:15,350
And the data after the first
row will be sized accordingly.

35
00:02:16,570 --> 00:02:21,730
Our next step is to multiply our
alloc data frame times start_val.

36
00:02:21,730 --> 00:02:23,590
And what that'll give us is,

37
00:02:23,590 --> 00:02:28,310
in this first row the amount of
cash allocated to each asset and

38
00:02:28,310 --> 00:02:33,080
then going forward, it'll show us
the value of that asset over time.

39
00:02:34,170 --> 00:02:38,880
So we've got now a new data frame,
pos_vals, what that means is position

40
00:02:38,880 --> 00:02:44,870
values, that at each day,
that's how much that position is worth.

41
00:02:44,870 --> 00:02:49,110
So we started out, for instance, with
400,000 for the first one, 400,000 for

42
00:02:49,110 --> 00:02:51,957
the second one, 100,000, 100,000.

43
00:02:51,957 --> 00:02:56,426
But now as we go forward each day,
it's as if we invested say

44
00:02:56,426 --> 00:02:59,860
100,000 in this one, and it reflects how
much it was worth each day after that.

45
00:03:00,950 --> 00:03:06,030
Now that we have the value each day for
the individual assets, we can calculate

46
00:03:06,030 --> 00:03:10,670
the total value for the portfolio
each day by summing across each day.

47
00:03:10,670 --> 00:03:11,770
So on the first day for

48
00:03:11,770 --> 00:03:15,460
instance the value of the portfolio was
four hundred thousand plus four hundred

49
00:03:15,460 --> 00:03:20,430
thousand plus one hundred plus one
hundred thousand or one million.

50
00:03:20,430 --> 00:03:25,360
Now those values change of course as
the stock prices change going forward.

51
00:03:25,360 --> 00:03:27,340
So each day is a little bit different.

52
00:03:27,340 --> 00:03:32,254
We can calculate the value for
each of these days by taking the sum

53
00:03:32,254 --> 00:03:36,710
of pos_vals,
position vals using axis=1, so

54
00:03:36,710 --> 00:03:43,270
that's telling python to sum
across each row like that.

55
00:03:43,270 --> 00:03:47,660
So that sums each day
across into Port_val,

56
00:03:47,660 --> 00:03:53,390
which now reflects the value each
day for our total portfolio.

57
00:03:53,390 --> 00:03:54,690
Let's recap now.

58
00:03:54,690 --> 00:03:56,290
We start with our prices.

59
00:03:56,290 --> 00:04:01,220
We normalize that to the first day,
so the first row here is all ones.

60
00:04:02,258 --> 00:04:08,510
We multiply it times our allocations,
and that gives us now in each column,

61
00:04:08,510 --> 00:04:13,300
the relative value of each
of those aspects over time.

62
00:04:13,300 --> 00:04:16,839
We multiply by our initial investment,
and

63
00:04:16,839 --> 00:04:21,200
that causes now each row to be
the real value of that investment

64
00:04:21,200 --> 00:04:26,370
each day over time,
starting with our initial allocations.

65
00:04:26,370 --> 00:04:29,010
If we then sum each row

66
00:04:29,010 --> 00:04:33,710
we get the value of the portfolio on
each corresponding day, and that's it.

67
00:04:33,710 --> 00:04:36,410
That's how you calculate
daily portfolio value.
