1
00:00:00,190 --> 00:00:03,090
In this video, I will walk you through
an implementation of token-based

2
00:00:03,090 --> 00:00:05,020
authentication in Flask.

3
00:00:05,020 --> 00:00:08,730
There are several ways of implementing
this functionality in your code, but

4
00:00:08,730 --> 00:00:13,050
this is one solution I have to be found
rather easy to understand and secure.

5
00:00:13,050 --> 00:00:16,510
I have a new models.pi file that
contains the user model and

6
00:00:16,510 --> 00:00:19,710
the basic HTTP authorization
code from the previous exercise.

7
00:00:20,970 --> 00:00:25,190
Here I have a secret key, which is just
a random string of 32 characters that I

8
00:00:25,190 --> 00:00:26,780
will use to sign my tokens.

9
00:00:26,780 --> 00:00:30,650
I will also make a new method
here called generate_auth_token.

10
00:00:30,650 --> 00:00:35,510
I will make the token be an encrypted
version of a dictionary that hides

11
00:00:35,510 --> 00:00:37,020
the ID of the user.

12
00:00:37,020 --> 00:00:40,340
The token will also have
an expiration time embedded in it.

13
00:00:40,340 --> 00:00:43,380
Which by default,
will be of TEN mins or 600 seconds.

14
00:00:44,470 --> 00:00:49,290
The verification is implemented in
a verfy_auth_token static method.

15
00:00:49,290 --> 00:00:51,930
A static method is used because
the user will only be known

16
00:00:51,930 --> 00:00:53,270
once the token is decoded.

17
00:00:54,560 --> 00:00:56,200
Now in my views.pi file,

18
00:00:56,200 --> 00:01:00,220
I'll make a new end point that
the client can use to request a token.

19
00:01:00,220 --> 00:01:04,150
Note that this inpoint is protected
with the auth.loginrequired decorator

20
00:01:04,150 --> 00:01:09,300
from Flask HTTPI, which requires that
the user name and password are provided.

21
00:01:09,300 --> 00:01:13,760
Next I'll add code for handling
a token when my server receives one.

22
00:01:13,760 --> 00:01:18,000
The HTTP basic authentication protocol
does not specifically require that user

23
00:01:18,000 --> 00:01:20,170
names and passwords are used for
authentication.

24
00:01:21,300 --> 00:01:24,370
These two fields in the HTTP
header can be used to transport

25
00:01:24,370 --> 00:01:26,190
any type of authentication information.

26
00:01:27,390 --> 00:01:31,260
For token based authentication, the
token can be sent as a user name, and

27
00:01:31,260 --> 00:01:33,610
the password field can be ignored.

28
00:01:33,610 --> 00:01:36,780
This means that now the server can
authenticate requests with the user name

29
00:01:36,780 --> 00:01:38,030
and password.

30
00:01:38,030 --> 00:01:40,030
And request with just a token.

31
00:01:40,030 --> 00:01:44,450
The verified password callback needs
to support both authentication styles.

32
00:01:44,450 --> 00:01:47,260
This new version of the verified
password callback attempts

33
00:01:47,260 --> 00:01:51,580
authentication twice, it first tries to
use the user name argument as a token.

34
00:01:52,590 --> 00:01:56,640
If that doesn't work, then user name and
password are verified as before.

35
00:01:56,640 --> 00:02:00,260
I will run my web server again and
send the following kernel request.

36
00:02:00,260 --> 00:02:04,280
In order to get an authentication token,
I will run my web server again, and

37
00:02:04,280 --> 00:02:08,240
send the following kernel request,
in order to get an authentication token.

38
00:02:08,240 --> 00:02:12,110
Now the protected resource can be
obtained authenticating with the token.

39
00:02:12,110 --> 00:02:15,430
Note that in this last request, the
password is written as the word blank.

40
00:02:16,660 --> 00:02:19,970
The password in this request can
be anything, since it isn't used.

41
00:02:19,970 --> 00:02:22,820
the code, end request,
can be found in the instructor notes.
