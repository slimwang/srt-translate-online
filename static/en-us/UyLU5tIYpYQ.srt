1
00:00:00,530 --> 00:00:06,020
UML supports a couple of special transitions that you can take advantage of,

2
00:00:06,020 --> 00:00:08,130
each indicated by a keyword. So,

3
00:00:08,130 --> 00:00:13,904
here's a two state machine. The transition from the active state to idle state.

4
00:00:13,904 --> 00:00:19,290
the, transition is labeled after 2 seconds. Okay? So you can assume

5
00:00:19,290 --> 00:00:24,460
that there's a timer here that if you're in the active state 2 seconds later,

6
00:00:24,460 --> 00:00:29,235
you'll make the transition to the idle state. Similarly, the idle state has

7
00:00:29,235 --> 00:00:35,900
a self transition, okay? That's labeled when we key, the keyword when and

8
00:00:35,900 --> 00:00:42,420
then a particular clock time that the system

9
00:00:42,420 --> 00:00:47,710
waits until that particular clock time happens before making the transition.

10
00:00:47,710 --> 00:00:53,380
We can put this example in a slightly larger context of to ill, to illustrate

11
00:00:53,380 --> 00:00:59,630
one other feature of, state charts. So, we have the self transition on idle and

12
00:00:59,630 --> 00:01:04,750
we have some, normal, transitions labeled by events in the rest of the diagram.

13
00:01:04,750 --> 00:01:09,504
But the transition between idle and tracking, okay? Involves an action, okay?

14
00:01:09,504 --> 00:01:15,260
That action is invocating a method, invoking a method, and the method

15
00:01:15,260 --> 00:01:21,590
has a parameter p, that is you can pass information in the action calls.

16
00:01:21,590 --> 00:01:26,470
Similarly, on the transition itself, the event that led to the transition has

17
00:01:26,470 --> 00:01:31,050
an argument p. So, what we're doing here is we're passing on the information.

18
00:01:31,050 --> 00:01:34,380
That came in on the event to some kind of method call so

19
00:01:34,380 --> 00:01:37,080
it can presumably be processed in the tracking state
