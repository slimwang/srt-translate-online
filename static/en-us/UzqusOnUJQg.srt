1
00:00:00,000 --> 00:00:05,000
Since both HTML and JavaScript have some essential ambiguity,

2
00:00:05,000 --> 00:00:10,000
we needed to handle that before we could move farther with our web browser.

3
00:00:10,000 --> 00:00:13,000
But now that we know a bit more about grammars and ambiguity,

4
00:00:13,000 --> 00:00:17,000
we can actually move onto making grammars for HTML and JavaScript.

5
00:00:17,000 --> 00:00:21,000
Just to remind you, here's an example HTML utterance,

6
00:00:21,000 --> 00:00:24,000
"Welcome to my webpage!"

7
00:00:24,000 --> 00:00:27,000
Here I've drawn a relatively simple grammar

8
00:00:27,000 --> 00:00:31,000
for a surprisingly large subset of HTML.

9
00:00:31,000 --> 00:00:34,000
One of the first challenges that we'll have to deal with

10
00:00:34,000 --> 00:00:40,000
is that a webpage can have a list of words, like "welcome to my webpage."

11
00:00:40,000 --> 00:00:46,000
Our starting nonterminal, HTML, has a recursive structure.

12
00:00:46,000 --> 00:00:52,000
Using this rule, HTML goes to element HTML, we can apply rule one

13
00:00:52,000 --> 00:00:55,000
over and over again to get as many elements as we need.

14
00:00:55,000 --> 00:01:00,000
Maybe one, two, three, four for welcome to my webpage.

15
00:01:00,000 --> 00:01:03,000
Then eventually when we're done replace with epsilon or the empty set.

16
00:01:03,000 --> 00:01:08,000
Element can either be a word, like "welcome to my webpage,"

17
00:01:08,000 --> 00:01:13,000
or the beginning of a nested tag.

18
00:01:13,000 --> 00:01:20,000
Here tag-open and tag-close are a lot like open parenthesis and close parenthesis.

19
00:01:20,000 --> 00:01:23,000
Whenever we make one, we're going to make the other.

20
00:01:23,000 --> 00:01:34,000
Then in here tag_open is <word> and tag_close is </word>.

21
00:01:34,000 --> 00:01:41,000
For example, this part matches a tag_open, and this text matches a tax_closed.

22
00:01:41,000 --> 00:01:47,000
Actually, as it stands, I'm only allowing a single word to be inside any tag.

23
00:01:47,000 --> 00:01:52,000
Inside these bold tags, we've got quite a lot of stuff going on.

24
00:01:52,000 --> 00:01:58,000
I'll show you the power of a recursive grammar. Watch this trick.

25
00:01:58,000 --> 00:02:04,000
Now at the top level, an HTML document is a list of elements, as many as you like.

26
00:02:04,000 --> 00:02:08,000
Each one of those elements may themselves be a tag,

27
00:02:08,000 --> 00:02:15,000
and inside tags we have another list of elements--another, in essence, entire webpage.

28
00:02:15,000 --> 00:02:21,000
Here at the top level, we just have one--tag_open for bold.

29
00:02:21,000 --> 00:02:25,000
But inside it there are four elements--the word welcome, the word to,

30
00:02:25,000 --> 00:02:28,000
the tag_open for my, and the word for webpage.

31
00:02:28,000 --> 00:02:34,000
I'm going to draw the parse tree for this utterance using our grammar.

32
00:02:34,000 --> 00:02:38,000
I'm going to use "elt" to abbreviate for element.

33
00:02:38,000 --> 00:02:42,000
I'm going to use "to" for tag_open and "tc" for tag_close.

34
00:02:42,000 --> 00:02:48,000
Now, I've only drawn or sketched out a small portion, maybe about half, of this parse tree,

35
00:02:48,000 --> 00:02:52,000
but we're still going to be able to see things match up by comparing the leaves--

36
00:02:52,000 --> 00:02:55,000
remember a leaf is an node without any children--

37
00:02:55,000 --> 00:02:57,000
to what we saw in the original string.

38
00:02:57,000 --> 00:03:01,000
Here my first leaf, working my way down and to the left,

39
00:03:01,000 --> 00:03:05,000
is this open left angle bracket, and that matches up here.

40
00:03:05,000 --> 00:03:09,000
My next is this b, which matches up here--match up there.

41
00:03:09,000 --> 00:03:15,000
Then after that tag_open, there is an HTML, which is an element list,

42
00:03:15,000 --> 00:03:20,000
and the first one is the word "welcome." The next one is the word "to."

43
00:03:20,000 --> 00:03:23,000
Now, although this tree structure is cumbersome for us,

44
00:03:23,000 --> 00:03:29,000
it's very convenient for computers, because it tells us exactly which part of the tree

45
00:03:29,000 --> 00:03:32,000
to draw or to apply in a certain manner.

46
00:03:32,000 --> 00:03:36,000
It might not be obvious which word should be bolded or which word should be italicized,

47
00:03:36,000 --> 00:03:45,000
but if I have a tag_open and a tag_close, this entire subtree is influenced by this tag.

48
00:03:45,000 --> 00:03:50,000
How much of the webpage is bolded? Exactly this part over here.

49
00:03:50,000 --> 00:03:54,000
The bold's great, great uncle or something like that.

50
00:03:54,000 --> 00:03:57,000
Go up a few, over one to the right, and then back down.

51
00:03:57,000 --> 99:59:59,999
We're going to use this special structuring to help write our web browser.
