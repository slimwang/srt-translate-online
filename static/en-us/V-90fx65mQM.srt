1
00:00:00,090 --> 00:00:02,200
So in a typical TCP three-way handshake, the

2
00:00:02,200 --> 00:00:06,180
client sends a SYN packet to the server,

3
00:00:06,180 --> 00:00:09,260
the server responds with the SYN-ACK, and the

4
00:00:09,260 --> 00:00:11,915
client then returns with an ACK to the

5
00:00:11,915 --> 00:00:15,130
SYN-ACK, at which point the connection is established.

6
00:00:15,130 --> 00:00:19,070
The problem in a typical TCP three-way handshake

7
00:00:19,070 --> 00:00:25,130
is that. The client can send a SYN and cause the server to allocate a socket

8
00:00:25,130 --> 00:00:27,350
buffer for that TCP connection. But then if

9
00:00:27,350 --> 00:00:30,190
the client never returns, the client can force

10
00:00:30,190 --> 00:00:33,610
the server to allocate many, many socket buffers,

11
00:00:33,610 --> 00:00:36,910
simply by sending a lot of syns and never

12
00:00:36,910 --> 00:00:40,090
returning. In fact, these could even be from

13
00:00:40,090 --> 00:00:43,330
spoofed IP addresses. So in other words, the client

14
00:00:43,330 --> 00:00:47,430
has absolutely no accountability, and no obligation to

15
00:00:47,430 --> 00:00:50,590
return to send the final ack, and yet can

16
00:00:50,590 --> 00:00:55,670
cause the server to allocate resources. This is a problem, and the solution to

17
00:00:55,670 --> 00:00:59,030
this is called syn cookies. In the

18
00:00:59,030 --> 00:01:03,140
TCP syn cookie approach, when the server receives

19
00:01:03,140 --> 00:01:09,080
a syn from the client, the server, instead of allocating a socket buffer for the

20
00:01:09,080 --> 00:01:12,470
tuple associated with the connection. The server

21
00:01:12,470 --> 00:01:15,840
keeps no state, and instead picks an initial

22
00:01:15,840 --> 00:01:21,060
sequence number for the connection that's a function of the client's IP address,

23
00:01:21,060 --> 00:01:26,800
and port, and the servers IP address, and port, as well as a random knots to

24
00:01:26,800 --> 00:01:29,670
prevent replay attacks. An honest client that

25
00:01:29,670 --> 00:01:34,440
returns can then reply with an acknowledgement

26
00:01:34,440 --> 00:01:37,720
with that sequence number in the packet.

27
00:01:37,720 --> 00:01:41,400
The server can check that sequence number simply

28
00:01:41,400 --> 00:01:44,280
by rehashing all of the information that

29
00:01:44,280 --> 00:01:48,610
it already has. Thereby determining that the

30
00:01:48,610 --> 00:01:52,820
acknowledgement here corresponded to the previous SYN-ACK

31
00:01:52,820 --> 00:01:55,050
that it had sent the client without

32
00:01:55,050 --> 00:02:00,210
requiring the server to store any state. Only if the sequence number matches the

33
00:02:00,210 --> 00:02:02,415
one picked by the server in the

34
00:02:02,415 --> 00:02:05,790
syn-ack does the server actually establish the connection.
