1
00:00:00,190 --> 00:00:04,374
Since the XScale, as I mentioned, is a logarithmic scale,

2
00:00:04,374 --> 00:00:07,736
we'll change the linear function here to log and

3
00:00:07,736 --> 00:00:13,641
the domain this time maps from around 250 to 100,000 and their range we want

4
00:00:13,641 --> 00:00:19,487
on map2 corresponds to the width of our SVG element, in this case, 300 pixels.

5
00:00:19,487 --> 00:00:23,760
But let's put a little bit of a buffer on the right end of the SVG element.

6
00:00:23,760 --> 00:00:27,220
In this case, since the x coordinate isn't inverted for

7
00:00:27,220 --> 00:00:30,990
SVG, we simply want to map from zero to, let's say, 250.

8
00:00:30,990 --> 00:00:35,090
And what this says is the value of 250 in

9
00:00:35,090 --> 00:00:38,540
our domain maps to a range value of zero.

10
00:00:38,540 --> 00:00:43,300
And the value of 100,000 in our domain maps to a range value of 250.

11
00:00:43,300 --> 00:00:47,220
And in between 250 and 100,000,

12
00:00:47,220 --> 00:00:53,240
we apply a log arithmetic transform to find out how it should scale saving

13
00:00:53,240 --> 00:00:59,620
this scale in a variable x, we now have a scale for both our y, and our x axis.

14
00:00:59,620 --> 00:01:03,780
In our case, I don't want to deal with the radius of the circle for

15
00:01:03,780 --> 00:01:04,849
simplicity's sake.

16
00:01:04,849 --> 00:01:08,920
But you could also define a third scale that corresponds to the radius of

17
00:01:08,920 --> 00:01:10,540
the circles you draw.

18
00:01:10,540 --> 00:01:14,830
And in the get minder case it will correspond to the population of the country.
