1
00:00:00,650 --> 00:00:04,990
In cycle 44, we will be broadcasting the sixth instruction's result.

2
00:00:04,990 --> 00:00:10,110
So this value 42 gets deposited in ROB6. We mark that as none.

3
00:00:10,110 --> 00:00:14,390
We also broadcast the value 42 under the name ROB6, but nobody's waiting for

4
00:00:14,390 --> 00:00:18,790
anything, so that kind of ends the broadcasting of that value.

5
00:00:18,790 --> 00:00:23,330
Another thing that happens in cycle 44 is we're going to look at this,

6
00:00:23,330 --> 00:00:25,590
instruction here and see whether we can commit, and

7
00:00:25,590 --> 00:00:29,300
yes it can. We look at it because is the next instruction to commit, and

8
00:00:29,300 --> 00:00:35,080
yes it can commit because it's done. so in cycle 44 we commit this. The way we

9
00:00:35,080 --> 00:00:41,760
commit instructions again is take the value of 12, put it in register R1. Next,

10
00:00:41,760 --> 00:00:47,090
look at the ROB entry for R1, and see whether it's pointing to us. It is not,

11
00:00:47,090 --> 00:00:50,410
so we don't update the RAT to point here. Basically, the RAT still needs to

12
00:00:50,410 --> 00:00:54,090
point here. Because that's still the most recent value for R1 that we will have.

13
00:00:54,090 --> 00:00:57,730
And then we can free this ROB entry, and the commit point moves here.

14
00:00:57,730 --> 00:01:02,300
So next cycle, we will be looking at this to commit. In cycle 45.

15
00:01:02,300 --> 00:01:06,860
We will try to commit this instruction. It's done, so we can. we take 3,

16
00:01:06,860 --> 00:01:12,640
put it in R3. We check the ROB entry for R3. It does point to us.

17
00:01:12,640 --> 00:01:16,560
So we need to make RAT entry for R3 point back to the register 5.

18
00:01:16,560 --> 00:01:20,670
Pretty much from now on, instructions that want to read R3 are actually going to

19
00:01:20,670 --> 00:01:24,240
find it in the register file. And now that we have done that,

20
00:01:24,240 --> 00:01:27,530
we can free this ROB entry. Now we're ready to move to Cycle 46.

21
00:01:27,530 --> 00:01:32,630
In Cycle 46 we will try to commit this instruction. And it's ready to commit so

22
00:01:32,630 --> 00:01:39,690
we can. We commit it by writing 36 into R1. And we check the RAT entry for

23
00:01:39,690 --> 00:01:43,700
R1. Is it pointing to ROB 4? It is not, so you don't change the RAT.

24
00:01:43,700 --> 00:01:48,120
And we have free this ROB entry. This concludes what has happened in cycle 46.

25
00:01:48,120 --> 00:01:52,970
In cycle 47 we will try to commit this instruction. It's done, so

26
00:01:52,970 --> 00:01:56,820
it's ready to commit. 47 is when we commit it.

27
00:01:56,820 --> 00:02:02,290
We will deposit 33 into R4. We will check the right entry for R4.

28
00:02:02,290 --> 00:02:06,740
Does it point to ROB5? Yes it does. Now it needs to point to the registry file.

29
00:02:06,740 --> 00:02:10,122
And we free this ROB entry. Now we move to cycle 48,

30
00:02:10,122 --> 00:02:14,670
where we try to commit this instruction. It's done so it can commit.

31
00:02:14,670 --> 00:02:21,170
We deposit 42 into R1, so the final value of R1 is going to be 42.

32
00:02:21,170 --> 00:02:26,030
We look at the, RAT entry for R1. Is it pointing to ROB6?

33
00:02:26,030 --> 00:02:30,690
Yes, it is. So finally, the RAT entry is made to point to the register file.

34
00:02:30,690 --> 00:02:34,730
So only now, instructions that want R1 are going to start looking at

35
00:02:34,730 --> 00:02:39,480
the architecture register file. All the time until now, they would have found

36
00:02:39,480 --> 00:02:43,630
the value in the ROB, or they would have had to wait for the value. With this,

37
00:02:43,630 --> 00:02:48,390
we can finally free this ROB entry, and this concludes our example. So,

38
00:02:48,390 --> 00:02:51,691
pretty much the [UNKNOWN] instruction is going to commit in cycle 14
