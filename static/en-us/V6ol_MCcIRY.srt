1
00:00:00,350 --> 00:00:02,530
So there's going to be
these two post conditions,

2
00:00:02,530 --> 00:00:05,200
one having to do with the new
link in the association and

3
00:00:05,200 --> 00:00:10,290
the other one having to do with
contingently updating the request list.

4
00:00:10,290 --> 00:00:13,390
So we'll consider the first
post condition here.

5
00:00:13,390 --> 00:00:17,389
What we're really saying is that there's
going to be a new CheckOut record.

6
00:00:18,780 --> 00:00:22,730
Another way of saying that is there
must exist a new CheckOut record, and

7
00:00:22,730 --> 00:00:26,620
in fact, there's that
keyword in OCL called exists.

8
00:00:27,970 --> 00:00:31,900
So, the post condition here is going
to say there's going to exist, and

9
00:00:31,900 --> 00:00:35,420
this is just like in our first
order logic where we had

10
00:00:35,420 --> 00:00:39,020
the leftward facing capital letter E.

11
00:00:39,020 --> 00:00:43,440
That there's a bound variable
in this case we'll call it C.

12
00:00:43,440 --> 00:00:47,190
So there's a new link
in that association,

13
00:00:47,190 --> 00:00:49,820
the association's name checked out,
okay?

14
00:00:49,820 --> 00:00:57,060
With the properties that
the that-links-loanable items had better

15
00:00:57,060 --> 00:01:00,710
be the item that we're checking out
which was the argument to the operation.

16
00:01:01,810 --> 00:01:05,900
And the properties that we wish
to hold about that CheckOut,

17
00:01:05,900 --> 00:01:10,600
that is the due date,
had better be correct.

18
00:01:10,600 --> 00:01:15,080
And to get the due date,
we can go get today's date, and

19
00:01:15,080 --> 00:01:16,890
then we can add in the checkoutPeriod.

20
00:01:16,890 --> 00:01:19,257
And remember,
we have the checkoutPeriod,

21
00:01:19,257 --> 00:01:22,380
that was one of the first
requirements we dealt with in OCL.

22
00:01:22,380 --> 00:01:27,399
And we can go get that
checkoutPeriod by navigating from

23
00:01:27,399 --> 00:01:32,420
the CheckOut link to
the corresponding loanableItem,

24
00:01:32,420 --> 00:01:35,965
and then getting its checkoutPeriod.

25
00:01:37,170 --> 00:01:40,870
That says there must
exist this new item and

26
00:01:40,870 --> 00:01:46,580
it also better be the case
that the checkedOut

27
00:01:46,580 --> 00:01:52,290
association itself must
have a new item in it.

28
00:01:52,290 --> 00:01:58,080
And the way we do that in,
either first door logic or in OCL,

29
00:01:58,080 --> 00:02:02,750
is to make a statement of
the quality between the state that

30
00:02:02,750 --> 00:02:07,710
existed before the CheckOut operation,
and the state that existed afterwards.

31
00:02:07,710 --> 00:02:12,050
So the state that exists
afterwards is just checkedOut.

32
00:02:12,050 --> 00:02:16,690
You can think of that a set
of records or a set of links.

33
00:02:17,875 --> 00:02:22,195
But need some special
notation to deal with

34
00:02:22,195 --> 00:02:26,965
the state of the checkedOut
association beforehand.

35
00:02:26,965 --> 00:02:32,305
And OCL has a keyword, and

36
00:02:32,305 --> 00:02:35,695
it's indicated by the @
followed by the word pre.

37
00:02:35,695 --> 00:02:40,661
So this is saying checkout@pre means the
version before we call the operation,

38
00:02:40,661 --> 00:02:44,033
and CheckOut by itself means
the version afterwards.

39
00:02:44,033 --> 00:02:48,851
And there's an operation on sets, and

40
00:02:48,851 --> 00:02:54,107
checkedOut is a set,
it's a set of links,

41
00:02:54,107 --> 00:02:59,947
that allows us to indicate
that another element

42
00:02:59,947 --> 00:03:05,190
is associated with that particular set.

43
00:03:05,190 --> 00:03:07,300
And that keyword is including.

44
00:03:07,300 --> 00:03:11,060
So it's as if we
are constructing a new set,

45
00:03:11,060 --> 00:03:15,750
which is the old set,
plus this one new item.

46
00:03:15,750 --> 00:03:22,230
Actually this one new checkedOut link,
which we've given the name C.

47
00:03:22,230 --> 00:03:27,620
So, we have the checkedOut afterwards
is equal to the checkedOut before,

48
00:03:27,620 --> 00:03:31,340
and this one other item
which we've just added, and

49
00:03:31,340 --> 00:03:35,620
that's what's being expressed
on the bottom line there.

50
00:03:35,620 --> 00:03:40,810
So we're making use of some
special keywords and operations

51
00:03:40,810 --> 00:03:44,970
in the OCL language to express
the equality of these two states.

52
00:03:46,140 --> 00:03:47,480
>> So I've got a quick question.

53
00:03:47,480 --> 00:03:53,140
Can we also consider the @pre
including kind of be like set union,

54
00:03:53,140 --> 00:03:58,100
so we're unioning the set of all
of our checkedOut associations

55
00:03:58,100 --> 00:04:00,520
plus this new checked-out association.

56
00:04:00,520 --> 00:04:04,744
>> Almost, but this item, I'm sorry,

57
00:04:04,744 --> 00:04:08,970
this new checkedOut link is not a set.

58
00:04:10,160 --> 00:04:11,270
Its just an element.

59
00:04:12,690 --> 00:04:16,029
If we had somehow been able
to wrap it in some set thing,

60
00:04:16,029 --> 00:04:16,935
then it would be unique.

61
00:04:16,935 --> 00:04:18,999
>> A set containing this new element.

62
00:04:18,999 --> 00:04:21,702
>> And
what I think Jared is pointing out here,

63
00:04:21,702 --> 00:04:26,100
is we have to be careful in getting
the data types right in these things.

64
00:04:26,100 --> 00:04:29,030
So, a set is different
than an element and

65
00:04:29,030 --> 00:04:32,180
if you had a union operation you
couldn't put an element on it.

66
00:04:32,180 --> 00:04:35,160
And if you had including you
couldn't put a set on it.

67
00:04:35,160 --> 00:04:38,668
That was the first post condition having
to do with updating the checkedOut

68
00:04:38,668 --> 00:04:39,390
association.

69
00:04:39,390 --> 00:04:44,290
The second one had to do with
the requests that were made.

70
00:04:44,290 --> 00:04:48,740
We had a precondition that said if
there are requests then it'd better be

71
00:04:48,740 --> 00:04:51,630
the case that Jared is
the one doing the requesting.

72
00:04:51,630 --> 00:04:56,600
Now we need to update that
request list if it exists,

73
00:04:56,600 --> 00:05:01,310
and with the fact that we want
to take Jared off that list.

74
00:05:01,310 --> 00:05:03,870
We don't want him to
hog the book too long.

75
00:05:03,870 --> 00:05:08,110
So, in this case, the post condition
is going to make use of another

76
00:05:08,110 --> 00:05:11,480
feature of OCL called
the LET expression.

77
00:05:13,220 --> 00:05:15,740
And the LET expression
is just an abbreviation.

78
00:05:15,740 --> 00:05:20,080
It allows us to state in one place,
an expression, and

79
00:05:20,080 --> 00:05:22,110
then use it in several places.

80
00:05:22,110 --> 00:05:28,080
So in this case we're saying let
the new variable t of type Title

81
00:05:28,080 --> 00:05:32,050
be that title of the current item.

82
00:05:32,050 --> 00:05:36,900
We distinguish between items, which
are things that could be checked out

83
00:05:36,900 --> 00:05:41,230
from the things the things that could
be requested, which we called titles.

84
00:05:41,230 --> 00:05:43,140
But an item always has a title,

85
00:05:43,140 --> 00:05:46,350
that's the composition operator
that we see in the diagram.

86
00:05:47,590 --> 00:05:51,585
And we just want to use
the shorthand of t for

87
00:05:51,585 --> 00:05:56,610
item.title to save ourselves a few
characters every time we type.

88
00:05:56,610 --> 00:06:01,730
So the let expression there defines

89
00:06:01,730 --> 00:06:06,849
the new symbol, and binds it during

90
00:06:06,849 --> 00:06:11,798
the scope of another expression,

91
00:06:11,798 --> 00:06:16,800
which is the post condition.

92
00:06:16,800 --> 00:06:21,900
And the post condition here is
conditional as to be expected.

93
00:06:21,900 --> 00:06:26,070
So if that particular title

94
00:06:27,140 --> 00:06:32,110
has a request to this particular patron.

95
00:06:33,820 --> 00:06:40,150
And then we want to update
the request association.

96
00:06:40,150 --> 00:06:45,290
So the antecedent

97
00:06:45,290 --> 00:06:50,080
of the conditional is
t.request.patron and

98
00:06:50,080 --> 00:06:53,940
if we didn't have t,
we'd have i.title.request.patron,

99
00:06:53,940 --> 00:06:59,030
it'd be either three or four steps
in the chain of qualified name and

100
00:06:59,030 --> 00:07:04,150
includes is a operation
on that set of requests.

101
00:07:04,150 --> 00:07:07,610
And self is the OCL
keyword corresponding to

102
00:07:07,610 --> 00:07:10,530
the instance of the particular class.

103
00:07:10,530 --> 00:07:14,480
And remember that was way
back with the Patron.

104
00:07:14,480 --> 00:07:15,800
So we're seeing whether or

105
00:07:15,800 --> 00:07:18,890
not Jared is in the list of
people during the requesting.

106
00:07:18,890 --> 00:07:22,740
And if so,
we want to do another one of these

107
00:07:22,740 --> 00:07:27,040
statements of equality between the state
before and the state afterwards.

108
00:07:27,040 --> 00:07:30,610
So, the state afterwards is
the request association and

109
00:07:30,610 --> 00:07:33,300
the state before is request at pre.

110
00:07:33,300 --> 00:07:37,790
And, in this case it's not that
we're adding in a new record,

111
00:07:37,790 --> 00:07:40,260
it's that we want to remove it.

112
00:07:40,260 --> 00:07:46,370
But, it's a statement of equality so
were stating that by saying

113
00:07:47,470 --> 00:07:52,570
If we, and
the key word in OCL is reject.

114
00:07:52,570 --> 00:07:55,010
If we reject those

115
00:07:57,200 --> 00:08:01,020
particular items in the list
which have the following boolean.

116
00:08:01,020 --> 00:08:03,639
And the boolean is, the title is t,
and patron is self.

117
00:08:04,860 --> 00:08:07,850
Then we have a version of
the request association without that

118
00:08:07,850 --> 00:08:10,870
one record in it and that had
better equal to the one afterwards.

119
00:08:12,340 --> 00:08:17,920
If there were no requests with
Jared at the top of the list,

120
00:08:17,920 --> 00:08:20,560
then our result is true.

121
00:08:20,560 --> 00:08:23,330
Okay, so
we don't have to be concerned there.

122
00:08:23,330 --> 00:08:28,060
So the overall post condition constraint

123
00:08:28,060 --> 00:08:33,470
has the form of the let binding,
and then within that a conditional.

124
00:08:33,470 --> 00:08:37,200
And the conditional, we're only
interested in the then part of it,

125
00:08:37,200 --> 00:08:41,169
which is qualified by whether or
not Jared has done the requesting.

126
00:08:41,169 --> 00:08:46,460
And in which case we want to ensure
that Jared's request is no longer in

127
00:08:46,460 --> 00:08:48,130
In that particular association.

128
00:08:48,130 --> 00:08:52,050
>> So do you have a recommendation
on this if then statement?

129
00:08:52,050 --> 00:08:56,640
because this if then statement, the else
is kind of a vacuously true situation.

130
00:08:56,640 --> 00:08:59,960
So wouldn't it just be better to use
an imply statement to save yourself

131
00:08:59,960 --> 00:09:01,700
some writing?

132
00:09:01,700 --> 00:09:02,246
>> Good point.

133
00:09:02,246 --> 00:09:09,209
So yeah, we could shorten
the situation by doing the implies.

134
00:09:11,160 --> 00:09:11,991
I had on other question.

135
00:09:11,991 --> 00:09:12,631
>> Sure.

136
00:09:12,631 --> 00:09:14,770
>> If that's all right.

137
00:09:14,770 --> 00:09:19,180
So I guess, are all associations
that are modeled in our UML diagram,

138
00:09:19,180 --> 00:09:21,810
can they be thought of when we're
expressing things in OCL as sets.

139
00:09:21,810 --> 00:09:26,600
because it seems like
express t.request.patron,

140
00:09:26,600 --> 00:09:28,110
this is an association.

141
00:09:28,110 --> 00:09:30,160
We're talking about the patron
part of the association.

142
00:09:30,160 --> 00:09:35,250
The set of all patrons that
have requested things, or

143
00:09:35,250 --> 00:09:41,070
in which a request instance is there,
is modeled in a set.

144
00:09:41,070 --> 00:09:45,020
>> Okay, so
you can think of them as sets, but

145
00:09:45,020 --> 00:09:47,240
sometimes we can do a little bit better.

146
00:09:47,240 --> 00:09:51,300
So we call that in UML,
those the ability to order things.

147
00:09:51,300 --> 00:09:53,190
And in order things,
then we get sequences.

148
00:09:54,730 --> 00:09:58,310
So sequences give us a little more
power because we can index into them.

149
00:09:58,310 --> 00:09:59,690
>> Okay.
>> Whereas with sets you can't index

150
00:09:59,690 --> 00:10:00,920
into them, right?

151
00:10:00,920 --> 00:10:04,620
So, now a sequence is a set, but

152
00:10:04,620 --> 00:10:09,840
a sequence, because it has this ordering
with it, allows us a little more power.

153
00:10:09,840 --> 00:10:12,250
>> And that's going to be based
on the model that we have,

154
00:10:12,250 --> 00:10:14,960
whether we modeled it that way or
as a set.

155
00:10:14,960 --> 00:10:18,900
>> The properties, the requirements,
and whether we modeled it that way.

156
00:10:18,900 --> 00:10:19,400
>> Okay.
