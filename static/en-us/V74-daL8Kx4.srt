1
00:00:00,860 --> 00:00:04,030
Let's go back to the display message
method that we were looking at earlier.

2
00:00:05,030 --> 00:00:07,570
We were trying to figure out what
exactly is going on in here.

3
00:00:08,630 --> 00:00:12,450
From what we've learned so far it looks
like there's a TextView object, and

4
00:00:12,450 --> 00:00:15,670
the variable name is called
orderSummaryTextView.

5
00:00:15,670 --> 00:00:18,870
Then it says a bunch of code
that we don't really recognize.

6
00:00:18,870 --> 00:00:22,820
But on the next line, we use that
variable prderSummaryTextView, and

7
00:00:22,820 --> 00:00:25,030
we try to set the text on
it to be this message.

8
00:00:26,250 --> 00:00:29,470
Let's find out more about how to
call methods like this on objects.

9
00:00:31,250 --> 00:00:34,920
When we call method on object
it has to follow this format.

10
00:00:34,920 --> 00:00:39,560
First we write the Object Variable Name
in this case it's titleTextView

11
00:00:39,560 --> 00:00:41,160
then we add a.

12
00:00:41,160 --> 00:00:45,350
Then it's followed by the method name,
which is setText, in this case.

13
00:00:45,350 --> 00:00:49,390
This method is defined exactly this
way in the TextView Java class.

14
00:00:49,390 --> 00:00:53,250
The method declaration also specifies
that there's an input parameter

15
00:00:53,250 --> 00:00:58,060
of a string, so we put parentheses and
then pass in a string as input.

16
00:00:58,060 --> 00:00:59,700
Then, we end the statement
with a semicolon.

17
00:01:00,920 --> 00:01:05,459
When you write this line of code,
it modifies the titleTextView object so

18
00:01:05,459 --> 00:01:08,100
that it displays this on the screen.

19
00:01:08,100 --> 00:01:10,490
The reason we use the object
variable name here,

20
00:01:10,490 --> 00:01:13,600
is because there could be
multiple TextViews in your app.

21
00:01:13,600 --> 00:01:16,379
So make sure you're calling the method
on the right object instance.

22
00:01:17,560 --> 00:01:20,980
When you're specifying input
arguments make sure you're specifying

23
00:01:20,980 --> 00:01:24,620
the right arguments in the right order
according to the method declaration.

24
00:01:25,660 --> 00:01:29,460
So if there's no inputs, you would
just have an empty set of parentheses.

25
00:01:29,460 --> 00:01:32,820
The way we pass inputs to a method
is the same as we learned earlier in

26
00:01:32,820 --> 00:01:34,110
lesson three.

27
00:01:34,110 --> 00:01:36,140
And remember to separate
the object variable name and

28
00:01:36,140 --> 00:01:38,450
the method name with this dot.

29
00:01:38,450 --> 00:01:42,450
Here's another example,
on that same titleTextView object,

30
00:01:42,450 --> 00:01:45,190
We're going to call
a setTextSize method on it.

31
00:01:45,190 --> 00:01:49,220
This method takes an integer as
input for the new text size.

32
00:01:49,220 --> 00:01:51,830
So in this case,
we just pass 18 as the next text size.

33
00:01:52,980 --> 00:01:55,510
When the Android device
executes this line of code,

34
00:01:55,510 --> 00:02:00,460
it's going to change this titleTextView
to have a larger font size of 18.

35
00:02:00,460 --> 00:02:02,260
In this example,

36
00:02:02,260 --> 00:02:06,540
we're calling a method on the TextView
object that is called warningTextView.

37
00:02:07,580 --> 00:02:11,140
The method is called setTextColor,
and it takes as input a new color.

38
00:02:12,140 --> 00:02:16,010
Notice that the color is
specified as Color.RED.

39
00:02:16,010 --> 00:02:17,670
So if we look at the documentation for

40
00:02:17,670 --> 00:02:22,030
the color class then, we can scroll
down and see that red is defined here.

41
00:02:22,030 --> 00:02:25,290
There are a bunch of other colors
that you can use here as well.

42
00:02:26,370 --> 00:02:30,850
So, when you call a setTextColor, you
could call Color.BLUE or Color.BLACK.

43
00:02:30,850 --> 00:02:33,835
And lastly, here is an example of
calling a method on an ImageView.

44
00:02:34,882 --> 00:02:39,230
This ImageView object has a variable
name of welcomeImageView, and

45
00:02:39,230 --> 00:02:41,260
we call the method
setImageResource on it.

46
00:02:42,380 --> 00:02:46,135
This method takes as input the new image
that we should set on this ImageView.

47
00:02:47,400 --> 00:02:51,580
We specify the new image as a resource
ID, in the format of R.drawable.

48
00:02:51,580 --> 00:02:53,000
And this is the file name,

49
00:02:54,100 --> 00:02:58,610
this is just another use case of
using resource IDs in Java code.

50
00:02:58,610 --> 00:03:02,059
To get the full list of methods that
you can call on a TextView object,

51
00:03:02,059 --> 00:03:04,867
just open up the TextView Android
documentation page.

52
00:03:04,867 --> 00:03:08,810
You can get to it by just searching for
TextView Android and clicking here.

53
00:03:09,840 --> 00:03:12,110
This is a page we already recognize, and

54
00:03:12,110 --> 00:03:15,740
we already know about the XML attributes
that are listed on this page.

55
00:03:16,830 --> 00:03:19,900
If I scroll down further then I can
see a list of all the public methods

56
00:03:19,900 --> 00:03:20,790
in the text view class.

57
00:03:21,910 --> 00:03:22,870
If you want to find something,

58
00:03:22,870 --> 00:03:27,210
you can just use Cmd+F, or
Ctrl+F if you're on Windows.

59
00:03:27,210 --> 00:03:29,900
I'm going to look for the setTextColor
method which we used earlier.

60
00:03:31,200 --> 00:03:32,740
Here's the setTextColor method and

61
00:03:32,740 --> 00:03:35,310
it takes an integer
color as an input param.

62
00:03:36,420 --> 00:03:40,540
All these methods were declared as
public methods in the TextView class.

63
00:03:40,540 --> 00:03:43,170
That's why we can call
these methods now.

64
00:03:43,170 --> 00:03:44,910
If they were declared
as private methods,

65
00:03:44,910 --> 00:03:46,210
we wouldn't see them show up here.

66
00:03:47,400 --> 00:03:49,070
When you're calling these methods,

67
00:03:49,070 --> 00:03:52,370
make sure you're checking what input
parameters it requires and you're

68
00:03:52,370 --> 00:03:55,680
passing in the inputs in the correct
order and of the correct data type.

69
00:03:56,910 --> 00:03:58,040
When you're looking at code,

70
00:03:58,040 --> 00:04:02,130
sometimes you might not see the dot
notation when calling methods.

71
00:04:02,130 --> 00:04:06,150
The difference matters whether you're
inside a class or outside of a class.

72
00:04:06,150 --> 00:04:08,730
Let's look at an example
within the TextView class.

73
00:04:08,730 --> 00:04:12,540
We have the setText method defined,
as well as some other method.

74
00:04:12,540 --> 00:04:16,589
Say that you want to call the setText
method from this other method.

75
00:04:16,589 --> 00:04:21,040
You can do so by calling setText and
then passing in the input param.

76
00:04:21,040 --> 00:04:24,070
But where's the dot and
where's the object variable name?

77
00:04:24,070 --> 00:04:28,800
Well this line of is actually sort for
this.setText("Hello").

78
00:04:28,800 --> 00:04:31,360
This refers to the current
object instance and

79
00:04:31,360 --> 00:04:34,800
then setText is being
called on this object.

80
00:04:34,800 --> 00:04:38,880
This is a format we're more familiar
with for calling methods on objects.

81
00:04:38,880 --> 00:04:42,301
However the this.part is implied and
it's optional,

82
00:04:42,301 --> 00:04:47,380
o to make our code more concise,
we can just call setText("Hello).

83
00:04:47,380 --> 00:04:50,670
So notice the difference between
calling setTexts within the class and

84
00:04:50,670 --> 00:04:53,800
calling setTexts outside of that class.

85
00:04:53,800 --> 00:04:55,990
When you think about it,
this makes more sense,

86
00:04:55,990 --> 00:04:59,380
because it's very clear which
TextView you want to set the text on,

87
00:04:59,380 --> 00:05:03,380
in case you have multiple
TextViews within this class.

88
00:05:03,380 --> 00:05:06,280
Here's another difference between
bring inside the TextView class,

89
00:05:06,280 --> 00:05:08,970
versus being outside
of the TextView class.

90
00:05:08,970 --> 00:05:12,330
Within the TextView class,
you can access private variables and

91
00:05:12,330 --> 00:05:14,210
private methods.

92
00:05:14,210 --> 00:05:16,060
If you're outside of the TextView class,

93
00:05:16,060 --> 00:05:21,150
you can't use methods that are private
and you can't access private variables.

94
00:05:21,150 --> 00:05:25,100
Within the MainActivity class,
you can only access public methods and

95
00:05:25,100 --> 00:05:27,300
public variables from
the TextView class.
