1
00:00:19,068 --> 00:00:26,316
Now and then I think of when they were together

2
00:00:26,316 --> 00:00:33,987
Like when you found a route that went from X to Y.

3
00:00:33,987 --> 00:00:37,596
All those paths, they went through A and B

4
00:00:37,596 --> 00:00:41,393
which isolates them from that whole subtree.

5
00:00:41,393 --> 00:00:43,279
It was a bridge and it’s a bridge

6
00:00:43,279 --> 00:01:03,178
that now is severed.

7
00:01:03,178 --> 00:01:10,933
You can try computing when a graph is all connected

8
00:01:10,933 --> 00:01:18,275
You put the neighbors on a list, the open list

9
00:01:18,275 --> 00:01:22,172
So when I tried to run a depth-first search.

10
00:01:22,172 --> 00:01:26,051
And found that half the graph was in lurch.

11
00:01:26,051 --> 00:01:27,935
I guess it means it makes the search

12
00:01:27,935 --> 00:01:33,583
that more efficient.

13
00:01:33,583 --> 00:01:37,145
But you didn’t have to cut the path.

14
00:01:37,145 --> 00:01:39,071
Drop that singular connection

15
00:01:39,071 --> 00:01:41,290
start a new component.

16
00:01:41,290 --> 00:01:44,122
Now each is in a separate graph, so their

17
00:01:44,122 --> 00:01:48,373
reachable descendents have been split in half.

18
00:01:48,373 --> 00:01:52,285
No it doesn’t change the time, big O or the

19
00:01:52,285 --> 00:01:56,149
clustering coefficient in the social network.

20
00:01:56,149 --> 00:01:59,004
I guess it that I don’t need that though.

21
00:01:59,004 --> 00:02:06,350
Now there’s just no pathway that can use two nodes.

22
00:02:06,350 --> 00:02:13,973
Now there’s just no pathway that can use two nodes.

23
00:02:13,973 --> 00:02:33,014
Now there’s just no pathway that can use two nodes.

24
00:02:33,014 --> 00:02:35,064
Now and then I think of all the times

25
00:02:35,064 --> 00:02:39,936
you queued me over.

26
00:02:39,936 --> 00:02:48,244
Part of me believing it was algorithms that I'd run.

27
00:02:48,245 --> 00:02:51,556
that I'd run. But I don’t wanna loop again.

28
00:02:51,556 --> 00:02:56,113
Though my running time is D(N). You said

29
00:02:56,113 --> 00:02:59,129
you’d use efficient codes and you wouldn’t

30
00:02:59,129 --> 00:03:00,905
waste your cycles finding pathways

31
00:03:00,905 --> 00:03:03,057
that can use two nodes.

32
00:03:03,057 --> 00:03:06,804
But you didn’t have to cut the path. Drop that

33
00:03:06,804 --> 00:03:10,573
singular connection, start a new component.

34
00:03:10,573 --> 00:03:14,047
Now each is in a separate graph, so their

35
00:03:14,047 --> 00:03:18,012
reachable descendents have been split in half.

36
00:03:18,012 --> 00:03:21,673
Though it doesn’t change the time, big O or the

37
00:03:21,673 --> 00:03:25,473
clustering coefficient in the social network.

38
00:03:25,473 --> 00:03:28,501
I guess it that I don’t need that though.

39
00:03:28,501 --> 00:03:31,867
Now there’s just no pathway that can use two nodes.

40
00:03:31,867 --> 00:03:33,872
[No pathways]

41
00:03:33,872 --> 00:03:35,916
That can use two nodes.

42
00:03:35,916 --> 00:03:39,236
Now there’s just no pathway that can use two nodes.

43
00:03:39,236 --> 00:03:41,095
[No pathways]

44
00:03:41,095 --> 00:03:42,856
That can use two nodes.

45
00:03:42,856 --> 00:03:43,975
[No pathways]

46
00:03:43,975 --> 00:03:50,630
Now there’s just no pathway that can use two nodes.

47
00:03:50,630 --> 00:03:51,335
[No pathways]

48
00:03:51,335 --> 00:03:52,481
That can use two nodes.

49
00:03:52,481 --> 00:03:55,888
That can use two nodes.

50
00:03:55,888 --> 00:03:58,186
That can use two nodes.

51
00:03:58,186 --> 00:04:02,109
[No pathways]
