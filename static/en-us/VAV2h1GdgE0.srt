1
00:00:00,330 --> 00:00:03,210
Most simply, conditional wait variables allow you to take one thread

2
00:00:03,210 --> 00:00:06,180
off the scheduling que until there is a signal from another

3
00:00:06,180 --> 00:00:09,090
thread, that it should be put back on. This is useful

4
00:00:09,090 --> 00:00:11,810
if we don't want one thread to continue it's work until

5
00:00:11,810 --> 00:00:15,160
the work of another thread is finished. To give an example,

6
00:00:15,160 --> 00:00:17,760
let's oppose that we have a thread A over here, and

7
00:00:17,760 --> 00:00:21,890
a thread B over here. Thread B wants to stop until

8
00:00:21,890 --> 00:00:25,710
thread A's work is done. Now to use a conditional weight variable,

9
00:00:25,710 --> 00:00:28,910
we need three things. A variable indicating whether the

10
00:00:28,910 --> 00:00:31,350
work is done, or some other condition that can be

11
00:00:31,350 --> 00:00:34,050
tested in memory. A lock that we can apply to

12
00:00:34,050 --> 00:00:37,680
this variable... And a special conditional wait variable. Now after

13
00:00:37,680 --> 00:00:40,160
finishing the work, thread A is going to acquire the

14
00:00:40,160 --> 00:00:44,160
lock, change is_done to true and then send a signal

15
00:00:44,160 --> 00:00:47,330
to anyone waiting on this condition, a signal that they

16
00:00:47,330 --> 00:00:50,790
should wake up, and then he'll unlock the lock. Thread

17
00:00:50,790 --> 00:00:53,730
B, for his part, will first acquire the lock, and

18
00:00:53,730 --> 00:00:56,750
then check if the work is done. If it isn't,

19
00:00:56,750 --> 00:00:59,760
he will wait. Now, it's important that this cond-wait not

20
00:00:59,760 --> 00:01:02,870
only makes thread B wait, but it also unlocks a mutex.

21
00:01:03,890 --> 00:01:06,340
This will allow thread A to acquire the lock and

22
00:01:06,340 --> 00:01:09,570
eventually send the signal. The call blocks until the signal

23
00:01:09,570 --> 00:01:13,650
is received and thread B acquires the lock again. Hence

24
00:01:13,650 --> 00:01:16,140
the need to unlock it at the end of the code.

25
00:01:16,140 --> 00:01:19,390
At first this might seem unnecessarily complicated. Why do we need

26
00:01:19,390 --> 00:01:24,040
this if statement, before the cond_wait procedure call, for instance? Well,

27
00:01:24,040 --> 00:01:26,690
if it weren't there, then it's possible that the signal will

28
00:01:26,690 --> 00:01:29,590
have already come, and we would never see it. So it's important

29
00:01:29,590 --> 00:01:32,090
to check that there's something to wait for, before you actually

30
00:01:32,090 --> 00:01:35,310
wait. Given that there is such a condition to check We better

31
00:01:35,310 --> 00:01:38,110
also have a lock for it. Otherwise we might decide that

32
00:01:38,110 --> 00:01:41,280
we need to wait. But before we actually execute the wait function,

33
00:01:41,280 --> 00:01:43,395
the signal might come. And of course, the

34
00:01:43,395 --> 00:01:46,460
cond-wait method had better unlock the mutex. Otherwise

35
00:01:46,460 --> 00:01:48,870
thread A would never be able to acquire

36
00:01:48,870 --> 00:01:50,510
and change the condition that we're waiting on.
