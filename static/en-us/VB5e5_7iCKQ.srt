1
00:00:00,000 --> 00:00:03,660
Modify onCreate to create
the LocationEntry database table using

2
00:00:03,660 --> 00:00:06,022
the constants we defined
in the contract.

3
00:00:06,022 --> 00:00:08,248
The good news is that
this is a similar but

4
00:00:08,248 --> 00:00:11,269
simpler statement than what
we have in WeatherEntry.

5
00:00:11,269 --> 00:00:15,286
You'll be creating and executing
a string that stores an SQLI command.

6
00:00:15,286 --> 00:00:18,526
You want to make sure to use
the correct data types for each column.

7
00:00:18,526 --> 00:00:21,405
Also, make sure that you
have the right constraints.

8
00:00:21,405 --> 00:00:24,005
In general, for
all the model of the weather table.

9
00:00:24,005 --> 00:00:28,405
With the exception of the ID,
all columns must be defined as not null.

10
00:00:28,405 --> 00:00:32,078
The location query should
additionally be defined as unique or

11
00:00:32,078 --> 00:00:35,068
coordinates are real, or
floating point values.

12
00:00:35,068 --> 00:00:38,480
You should consider adding logging
statements to print the SQLI statement,

13
00:00:38,480 --> 00:00:40,327
and verify that it
looks as you intended.

14
00:00:40,327 --> 00:00:43,358
Pay close attention to spaces,
parenthesis, and commas.

15
00:00:43,358 --> 00:00:46,180
Once you have finished writing
the SQL to create the table,

16
00:00:46,180 --> 00:00:49,512
continue to run test create TestcreateDB
from within the test DB, and

17
00:00:49,512 --> 00:00:52,239
let it guide you as to how to
fix your creation statement.

18
00:00:52,239 --> 00:00:55,997
Once you have finished coding,
I recommend looking at our solution,

19
00:00:55,997 --> 00:00:58,172
just in case our test missed something.
