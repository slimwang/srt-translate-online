1
00:00:00,170 --> 00:00:05,270
After authentication in order
to protect message security,

2
00:00:05,270 --> 00:00:10,340
Alice and Bob will need to establish
a shared secret key for each session.

3
00:00:10,340 --> 00:00:13,010
This can be accomplished
in several ways.

4
00:00:13,010 --> 00:00:16,750
Supposed Alice and
Bob share a master secret key.

5
00:00:16,750 --> 00:00:21,220
Then Alice can use this master
secret to encrypt a new key and

6
00:00:21,220 --> 00:00:23,980
send the encrypted new key to Bob.

7
00:00:23,980 --> 00:00:29,170
Or Alice and Bob can also use
public keys to encrypt a new key.

8
00:00:29,170 --> 00:00:30,320
We say that Alice and

9
00:00:30,320 --> 00:00:34,840
Bob should establish a shared key for
each new session.

10
00:00:34,840 --> 00:00:39,490
This is true even if Alice and
Bob already has a shared secret key.

11
00:00:39,490 --> 00:00:43,370
Typically, Alice and
Bob share a long term secret key.

12
00:00:43,370 --> 00:00:45,340
And we call it the master key.

13
00:00:45,340 --> 00:00:49,490
For example, the master key can
be derived from a password.

14
00:00:49,490 --> 00:00:53,900
For each session, Alice and
Bob would use the master secret key

15
00:00:53,900 --> 00:00:57,700
to authenticate and
establish a new key for the session.

16
00:00:57,700 --> 00:01:02,780
Then all messages in the session
are protected using the session key.

17
00:01:02,780 --> 00:01:07,050
The main benefit of using session
key is that if the key is leaked or

18
00:01:07,050 --> 00:01:11,800
broken, the impact is limited
only to the current session.

19
00:01:11,800 --> 00:01:14,550
Intuitively, the more a secret is used,

20
00:01:14,550 --> 00:01:18,050
the higher a chance that
the secret can be leaked.

21
00:01:18,050 --> 00:01:22,622
Therefore, we should limit the use
of the long term master secret.

22
00:01:22,622 --> 00:01:26,800
And only use it at the beginning of
a session for authentication and

23
00:01:26,800 --> 00:01:28,870
establishing the session key.

24
00:01:28,870 --> 00:01:30,350
Here's an example.

25
00:01:30,350 --> 00:01:34,870
Suppose Alice and
Bob already share a master key, Kab.

26
00:01:34,870 --> 00:01:36,970
The first three steps are just for

27
00:01:36,970 --> 00:01:40,950
Alice to authenticate Bob,
say Bob is a server.

28
00:01:40,950 --> 00:01:45,640
Then, both Bob and
Alice computer save session key

29
00:01:45,640 --> 00:01:50,340
that is based on the sheer master key
and something about the current session.

30
00:01:50,340 --> 00:01:55,430
So that the session key is both
a secret and unique to the session.

31
00:01:55,430 --> 00:01:59,900
So for example,
they can add 100 to the master key and

32
00:01:59,900 --> 00:02:05,230
use the result as the key to encrypt
all which is a challenge used

33
00:02:05,230 --> 00:02:10,479
in this session to authenticate Alice
to Bob, and the result of encrypting R

34
00:02:10,479 --> 00:02:15,400
using a modified master key
is the shared session key.

35
00:02:15,400 --> 00:02:21,060
Alice and Bob can also use their public
keys to exchange a shared session key.

36
00:02:21,060 --> 00:02:25,740
For example, Alice can send to
Bob a key, encrypt it using Bob's

37
00:02:25,740 --> 00:02:30,180
public key so that only Bob
can decrypt and get the key.

38
00:02:30,180 --> 00:02:34,730
And then signs the result
using Alice's private key.

39
00:02:34,730 --> 00:02:39,020
So Bob knows that the key
is sent by Alice.

40
00:02:39,020 --> 00:02:43,680
Or Alice and Bob can use their
private keys to sign the public

41
00:02:43,680 --> 00:02:47,970
messages that they exchange in the
Diffie-Hellman key exchange protocol.

42
00:02:47,970 --> 00:02:51,430
And this can prevent the man
in the middle attack,

43
00:02:51,430 --> 00:02:56,780
that is when Alice sends Bob
the public message, she signs it.

44
00:02:56,780 --> 00:03:00,590
Likewise when Bob sends
Alice the public message,

45
00:03:00,590 --> 00:03:02,470
he signs it with his private key.
