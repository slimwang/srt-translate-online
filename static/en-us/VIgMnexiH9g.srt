1
00:00:00,510 --> 00:00:02,590
So what we're going to look at now is

2
00:00:02,590 --> 00:00:07,140
the relationship between the inter process communication time and

3
00:00:07,140 --> 00:00:10,740
both the individual and the mutual clock drift that

4
00:00:10,740 --> 00:00:13,190
I described to you. Let Mu be the lower

5
00:00:13,190 --> 00:00:16,300
bound on the inter process communication time. So

6
00:00:16,300 --> 00:00:18,930
let's now derive the conditions under which we can

7
00:00:18,930 --> 00:00:25,510
assert that if we have an event A on P I. And in real time, it's supposed to

8
00:00:25,510 --> 00:00:32,800
precede an event B on Pj. What are the conditions that should hold in terms of

9
00:00:32,800 --> 00:00:36,550
mu, k, the individual clock drift time, and

10
00:00:36,550 --> 00:00:39,640
epsilon that is the mutual clock drift time?

11
00:00:39,640 --> 00:00:41,860
This first condition is pretty straightforward, It is

12
00:00:41,860 --> 00:00:44,460
coming from the fact that Ideally, the clocks

13
00:00:44,460 --> 00:00:50,590
are perfectly synchronized. You know that at time, real time t, ci of t and cj

14
00:00:50,590 --> 00:00:53,140
of t should be exactly the same, right? You expect that

15
00:00:53,140 --> 00:00:55,880
if it is, if the clocks are perfectly synchronized and it is

16
00:00:55,880 --> 00:00:59,330
keeping with real time, ci of t is equal to cj

17
00:00:59,330 --> 00:01:02,880
of t, equal to t, where t is the real time. But

18
00:01:02,880 --> 00:01:05,830
they could be in the original clock drift and user clock

19
00:01:05,830 --> 00:01:09,810
drift, which makes them different from each other. And all that you're

20
00:01:09,810 --> 00:01:13,040
seeing through this first one is that this is the act of

21
00:01:13,040 --> 00:01:16,550
sending a message and this is the act of receiving the message.

22
00:01:16,550 --> 00:01:19,340
The time stamp that I'm going to give to this,

23
00:01:19,340 --> 00:01:21,000
the real time that I'm going to give to this

24
00:01:21,000 --> 00:01:24,940
by reading my clock it better be higher than the

25
00:01:24,940 --> 00:01:28,410
time at which the message is actually sent. And in

26
00:01:28,410 --> 00:01:30,910
order to guarantee that we have to look at what

27
00:01:30,910 --> 00:01:33,770
would be the time that it takes for this message

28
00:01:33,770 --> 00:01:37,400
to go from here to here. That's coming from this

29
00:01:37,400 --> 00:01:41,570
mu this lower bound on IPC. So, if the message

30
00:01:41,570 --> 00:01:49,430
is sent at Ci of t with respect to Pi. Then, the time on PI when this message

31
00:01:49,430 --> 00:01:54,650
is received over here, is going to be CI T plus mu. This is a local reading

32
00:01:54,650 --> 00:01:56,940
of the clock, when the message would have

33
00:01:56,940 --> 00:02:00,900
arrived at PJ. So this is the time elapsed

34
00:02:00,900 --> 00:02:04,630
between sending the message, and when my peers should

35
00:02:04,630 --> 00:02:06,940
have received the message. So, what we are saying

36
00:02:06,940 --> 00:02:13,730
is in order for making sure that pj will have a time stamp that is at least

37
00:02:13,730 --> 00:02:20,370
greater than Ci, you want to make sure that the, the time reading that I have

38
00:02:20,370 --> 00:02:22,630
on my local clock, t plus mu, should

39
00:02:22,630 --> 00:02:26,690
be greater than the time reading at the time

40
00:02:26,690 --> 00:02:32,510
that I sent the message. So the time that I sent the message from Pi my pierce

41
00:02:32,510 --> 00:02:38,210
time was CG of t and and all that we are saying is in order to make sure that

42
00:02:38,210 --> 00:02:43,690
there is no anomaly the first condition has to hold that says that. The

43
00:02:43,690 --> 00:02:48,130
disparity between the two clocks is within this

44
00:02:48,130 --> 00:02:51,390
interprocess communication plane. That's all this is saying, that

45
00:02:51,390 --> 00:02:53,860
the disparity of the mutual drift is within

46
00:02:53,860 --> 00:02:57,710
this interprocess communication plane. And the second equation is

47
00:02:57,710 --> 00:03:01,260
basically a difference equation formulation of the formula that

48
00:03:01,260 --> 00:03:03,800
I gave you, which I called PC1. And this

49
00:03:03,800 --> 00:03:10,590
is basically saying that if K is zero when I read the clock at time key plus new

50
00:03:10,590 --> 00:03:14,070
and see the difference between the clock reading now

51
00:03:14,070 --> 00:03:15,870
and the clock reading when I read it at

52
00:03:15,870 --> 00:03:19,220
time T it should exactly be mu. But because

53
00:03:19,220 --> 00:03:22,840
of the fact that I may have individual clock drift,

54
00:03:22,840 --> 00:03:24,670
it may not be exactly mu, but it

55
00:03:24,670 --> 00:03:27,240
may be something different from mu. Either more or

56
00:03:27,240 --> 00:03:29,870
less, but very small difference. And so all

57
00:03:29,870 --> 00:03:33,540
that we are saying is that the amount of

58
00:03:33,540 --> 00:03:36,660
individual clock drift should be negligible compared to

59
00:03:36,660 --> 00:03:39,360
the interprocess communication time. So the first thing is

60
00:03:39,360 --> 00:03:44,690
saying the interprocess communication time is much bigger than any

61
00:03:44,690 --> 00:03:49,550
clock drift that exists between two different clocks.

62
00:03:49,550 --> 00:03:54,160
And the second equation is saying that the individual clock drift is very small

63
00:03:54,160 --> 00:03:59,960
compared to mu. And if we put all these things together, you can derive the

64
00:03:59,960 --> 00:04:03,780
expression for inter-process communication time. What it

65
00:04:03,780 --> 00:04:08,480
should be relative to mutual drift and individual

66
00:04:08,480 --> 00:04:12,150
clock drift. If this inequality is satisfied,

67
00:04:12,150 --> 00:04:15,790
you can avoid anomalies in your distributive system.

68
00:04:15,790 --> 00:04:19,110
So, informally, would you expect this k

69
00:04:19,110 --> 00:04:22,760
is very very small. Which means the denominator

70
00:04:22,760 --> 00:04:28,320
is very close to one. So, all that we're saying here is that the mutual

71
00:04:28,320 --> 00:04:31,340
clock drift, which is represented by epsilon,

72
00:04:31,340 --> 00:04:35,620
is very small compared to the interprocess communication

73
00:04:35,620 --> 00:04:39,150
time. Which is what is captured by this apparent condition that I laid out here.
