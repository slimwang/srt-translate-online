1
00:00:00,460 --> 00:00:02,090
So here's the solution.

2
00:00:03,320 --> 00:00:06,910
To start off I'm creating
a Promise by using new Promise.

3
00:00:08,010 --> 00:00:12,950
I'm going to pass a function into the
Promise with the parameter (resolve).

4
00:00:12,950 --> 00:00:17,270
There is no reject in this case because
I'm never going to need to reject so

5
00:00:17,270 --> 00:00:19,080
I just don't include it.

6
00:00:19,080 --> 00:00:23,170
Inside the Promise I'm logging (this) so
I can check out its scope later.

7
00:00:23,170 --> 00:00:25,250
And I've got the setTimeout.

8
00:00:25,250 --> 00:00:27,930
You'll see that in the callback
function to the setTimeout,

9
00:00:27,930 --> 00:00:31,120
I'm calling resolve to
resolve the Promise.

10
00:00:31,120 --> 00:00:34,780
In this case the Promise will resolve
after some number of milliseconds that's

11
00:00:34,780 --> 00:00:36,830
getting passed into wait.

12
00:00:36,830 --> 00:00:39,430
Also notice that I am
returning the Promise.

13
00:00:39,430 --> 00:00:42,250
And you'll see why in a second.

14
00:00:42,250 --> 00:00:47,110
Then I've uncommented these two lines
which say that after 2000 milliseconds

15
00:00:47,110 --> 00:00:49,650
the (finish) function should get called.

16
00:00:49,650 --> 00:00:51,940
All right, let's see how this looks.

17
00:00:51,940 --> 00:00:54,050
I will go ahead and refresh the page.

18
00:00:55,430 --> 00:00:58,340
You see that two seconds
later it is complete.

19
00:00:58,340 --> 00:01:01,730
It looks like this logged out
the window, or the global Object.

20
00:01:02,730 --> 00:01:08,070
Incidentally, this, the scope of this,
could change depending on the context.

21
00:01:08,070 --> 00:01:11,615
For instance,
if you use arrow functions with ES 2015,

22
00:01:11,615 --> 00:01:15,820
you will see a different this,
so keep that in mind.

23
00:01:15,820 --> 00:01:18,360
So the correct answer
is the global object.
