1
00:00:00,550 --> 00:00:02,140
Now that we can declare tasks,

2
00:00:02,140 --> 00:00:05,580
it's time to start thinking about
the relationships between tasks.

3
00:00:05,580 --> 00:00:06,180
For example,

4
00:00:06,180 --> 00:00:10,470
in a Java build we can't jar up our
library before compiling our sources.

5
00:00:10,470 --> 00:00:13,390
We model these relationships by
task dependencies and order.

6
00:00:14,825 --> 00:00:18,345
We'll discuss three ways to configure
the relationships between tasks.

7
00:00:18,345 --> 00:00:20,955
Depends on, finalize by,
and must run after.

8
00:00:22,135 --> 00:00:24,165
Task A depends on Task B,

9
00:00:24,165 --> 00:00:27,529
if Task A can't do its work without
Task B having done its work.

10
00:00:28,600 --> 00:00:31,180
To take a familiar example,
when you're getting up in the morning,

11
00:00:31,180 --> 00:00:34,140
you can't put on your shoes without
putting on your socks first.

12
00:00:34,140 --> 00:00:36,450
Let's declare and configure some tasks.

13
00:00:36,450 --> 00:00:39,610
So here's our tasks that represent
getting ready in the morning.

14
00:00:39,610 --> 00:00:42,170
We've got put on socks,
just prints a message,

15
00:00:42,170 --> 00:00:46,050
put on shoes also just prints out
that we're putting on our shoes.

16
00:00:46,050 --> 00:00:48,770
The new thing is we've got
this depends on function.

17
00:00:49,820 --> 00:00:52,660
And we just passed the task name
that put on shoes depends on.

18
00:00:52,660 --> 00:00:54,810
In this case, put on socks.

19
00:00:54,810 --> 00:00:57,350
So, let's give put on shoes a try.

20
00:00:57,350 --> 00:00:59,500
And we are running Gradle on quiet mode,
so

21
00:00:59,500 --> 00:01:01,410
that we don't see all
those diagnostic output.

22
00:01:01,410 --> 00:01:02,880
We just see the printed messages.

23
00:01:05,340 --> 00:01:09,010
There we go, when we try to put on our
shoes Gradle realized we can't put on

24
00:01:09,010 --> 00:01:12,790
our shoes without putting on our socks,
so we ran that first.

25
00:01:12,790 --> 00:01:16,050
The next type of task dependency we're
going to talk about is finalized by.

26
00:01:16,050 --> 00:01:19,760
We say task A is finalized by task B.

27
00:01:19,760 --> 00:01:23,370
If every time task A runs,
task B should be run afterwards.

28
00:01:23,370 --> 00:01:24,650
To continue our example,

29
00:01:24,650 --> 00:01:28,980
every time you eat breakfast, you really
should brush your teeth afterwards.

30
00:01:28,980 --> 00:01:30,310
We have those tasks here.

31
00:01:30,310 --> 00:01:34,000
We've got the eat breakfast task,
and the brush your teeth task.

32
00:01:34,000 --> 00:01:38,050
And we note that eat breakfast is
finalized by brush your teeth.

33
00:01:38,050 --> 00:01:40,780
So, let's see what happens
when we try to tell Gradle to

34
00:01:40,780 --> 00:01:42,920
just run the eat breakfast task.

35
00:01:42,920 --> 00:01:44,410
Looks like Gradle It was
keeping us honest and

36
00:01:44,410 --> 00:01:46,980
made us brush our teeth
after we ate breakfast.

37
00:01:46,980 --> 00:01:50,860
The use case for
must run after is slightly less obvious.

38
00:01:50,860 --> 00:01:53,630
Say we have a long running
process that's unlikely to fail,

39
00:01:53,630 --> 00:01:57,430
like deploying some artifact to
a continuous integration server.

40
00:01:57,430 --> 00:02:00,090
And we also have a short running
task that is likely to fail,

41
00:02:00,090 --> 00:02:02,080
like running unit tests.

42
00:02:02,080 --> 00:02:05,290
Those two tasks don't have any
dependency relationship, but

43
00:02:05,290 --> 00:02:08,690
if we're running both we would really
like the unit test to be run before

44
00:02:08,690 --> 00:02:10,530
the integration tests.

45
00:02:10,530 --> 00:02:13,980
To continue our morning routine example,
let's continue showering and

46
00:02:13,980 --> 00:02:15,599
putting on a fragrance like perfume or
cologne.

47
00:02:16,990 --> 00:02:20,380
Putting on a fragrance doesn't require
showering, and showering doesn't

48
00:02:20,380 --> 00:02:24,450
require putting on a fragrance, but
if we're going to both take a shower and

49
00:02:24,450 --> 00:02:27,700
also put on a fragrance,
we should really take the shower first.

50
00:02:27,700 --> 00:02:30,652
Let's create those tasks and
relationship between them.

51
00:02:30,652 --> 00:02:34,450
All right, so we've got our take shower
task, and we've got our put on fragrance

52
00:02:34,450 --> 00:02:37,300
task along with the should
run after take shower.

53
00:02:38,330 --> 00:02:42,660
So now if we go back to Gradle, and we
say hey Gradle, run put on fragrance and

54
00:02:42,660 --> 00:02:43,980
take shower.

55
00:02:43,980 --> 00:02:45,440
Well, let's see what order they run in.

56
00:02:47,980 --> 00:02:49,960
Looks like they run in
the order that makes sense.

57
00:02:49,960 --> 00:02:51,860
First we take a shower,
then we put on the fragrance.

58
00:02:53,170 --> 00:02:56,250
Let's check out a few other things
we can do with task dependencies.

59
00:02:56,250 --> 00:03:00,540
We can depend on multiple tasks, note
this is one of those situations where

60
00:03:00,540 --> 00:03:03,240
you do need to use the equal sign
when you're assigning to a property.

61
00:03:04,990 --> 00:03:05,860
Let's give this one a try.

62
00:03:06,970 --> 00:03:09,940
So since get ready depends on taking
shower, eating breakfast, and

63
00:03:09,940 --> 00:03:13,200
putting on shoes,
looks like we eat breakfast, and

64
00:03:13,200 --> 00:03:15,664
since breakfast is finalized by
brushing your teeth, we do that.

65
00:03:15,664 --> 00:03:20,320
We're going to put on our shoes, but
first we have to put on our socks.

66
00:03:20,320 --> 00:03:22,610
And then we take a shower?Â Whoops.

67
00:03:22,610 --> 00:03:24,180
Something's not right here.

68
00:03:24,180 --> 00:03:26,220
I think we need one more
ordering constraint.

69
00:03:26,220 --> 00:03:29,210
There's no dependency relationship
between taking a shower and putting on

70
00:03:29,210 --> 00:03:32,800
shoes, but it certainly looks like if
we're going to both take a shower and

71
00:03:32,800 --> 00:03:35,310
put on shoes, we should
probably take the shower first.

72
00:03:35,310 --> 00:03:36,880
Let's change that out.

73
00:03:36,880 --> 00:03:38,130
And there we go.

74
00:03:38,130 --> 00:03:39,233
We say to put on shoes,

75
00:03:39,233 --> 00:03:42,207
you must run after take shower,
and now if we run this again,

76
00:03:44,278 --> 00:03:47,340
looks like we're doing things in
a more sensible order this time.

77
00:03:48,420 --> 00:03:51,990
One more advanced thing we can do is
look at all the tasks in a project and

78
00:03:51,990 --> 00:03:54,720
decide which ones we want to depend on.

79
00:03:54,720 --> 00:03:57,560
Let's make a task called
getEquipped that depends on

80
00:03:57,560 --> 00:04:00,240
every task that starts with putOn.

81
00:04:00,240 --> 00:04:01,820
So here's our get equipped task.

82
00:04:01,820 --> 00:04:06,690
And you'll see it depends on, and
then this is actually a list that was

83
00:04:06,690 --> 00:04:09,580
created by looking at all
the other tasks in the project.

84
00:04:09,580 --> 00:04:12,415
You don't need to understand
how this works right now.

85
00:04:12,415 --> 00:04:15,275
The point is just to show off something
that would be extremely difficult or

86
00:04:15,275 --> 00:04:17,204
impossible to do in other build tools.

87
00:04:17,204 --> 00:04:18,154
Let's give it a try.

88
00:04:18,154 --> 00:04:21,305
And we run get equipped, looks like we
put on a fragrance, we put on our socks,

89
00:04:21,305 --> 00:04:22,095
we put on our shoes.

90
00:04:22,095 --> 00:04:25,365
As always there's more information
to be found on task dependencies

91
00:04:25,365 --> 00:04:26,365
in the course code.

92
00:04:26,365 --> 00:04:26,865
Check it out!
