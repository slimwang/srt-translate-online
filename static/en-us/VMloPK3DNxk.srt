1
00:00:00,500 --> 00:00:04,497
This first answer doesn't really help. Size doesn't matter, it's transparency

2
00:00:04,497 --> 00:00:09,160
that's causing the problem. The second answer works. The blue object is further

3
00:00:09,160 --> 00:00:12,798
from the eye than the red one, so will be drawn first. However, for more

4
00:00:12,798 --> 00:00:17,340
complicated scenes, it's a bit of overkill and inefficient to boot. The sorting

5
00:00:17,340 --> 00:00:21,240
order of a set of opaque objects doesn't affect the final result on the screen,

6
00:00:21,240 --> 00:00:26,166
that's the z buffer's job to sort out. Drawing a pick objects in a back to front

7
00:00:26,166 --> 00:00:30,258
order is not efficient, as fragments will be processed by the fragment shader,

8
00:00:30,258 --> 00:00:33,574
then covered up by the next closest object. The third answer is not

9
00:00:33,574 --> 00:00:37,694
particularity meaningful, and won't solve anything. The blue object essentially

10
00:00:37,694 --> 00:00:42,064
already has an alpha, it's equal to one meaning fully opaque. Even with blending

11
00:00:42,064 --> 00:00:46,518
on, an opaque object will still act like an opaque object. This solution does

12
00:00:46,518 --> 00:00:50,204
not fix the problem that the blue object does not being rendered early enough.

13
00:00:50,205 --> 00:00:54,100
The fourth answer works for this case, where there is only one transparent

14
00:00:54,100 --> 00:00:58,608
object. First all the opaque objects are drawn, there's only one, it is then

15
00:00:58,608 --> 00:01:03,280
guaranteed that the transparent object will be able to blend with the opaque

16
00:01:03,280 --> 00:01:04,462
objects as needed.
