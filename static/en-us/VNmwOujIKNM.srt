1
00:00:00,530 --> 00:00:02,719
Now it's time to add
Android auto support.

2
00:00:02,719 --> 00:00:05,530
So let's open up
the mainactivity.java file and

3
00:00:05,530 --> 00:00:08,170
let's go to the start of the send
notification method here.

4
00:00:08,170 --> 00:00:11,370
The first step is to create an intent
and pending intent to be triggered

5
00:00:11,370 --> 00:00:14,090
when a message is heard and
when a message has been replied to.

6
00:00:14,090 --> 00:00:16,570
We already created broadcast
receivers earlier, and

7
00:00:16,570 --> 00:00:17,680
now we're going to use them.

8
00:00:17,680 --> 00:00:21,390
So let's created a message heard intent,
and note that we use addFlags to

9
00:00:21,390 --> 00:00:24,420
indicate that we should be able to
trigger packages that are stopped.

10
00:00:24,420 --> 00:00:27,280
Our messaging app might not be running
at the time when a message is heard

11
00:00:27,280 --> 00:00:28,370
by a driver.

12
00:00:28,370 --> 00:00:31,660
We use set action to specify
a unique action name so

13
00:00:31,660 --> 00:00:34,100
that the broadcast receiver
we want is triggered.

14
00:00:34,100 --> 00:00:37,495
Make sure the package name here matches
your package name in the Android

15
00:00:37,495 --> 00:00:39,100
manifest.xml.

16
00:00:39,100 --> 00:00:42,440
Also, you putExtra to
specify the conversationId

17
00:00:42,440 --> 00:00:45,670
which is some kind of identifier that
your app might need in the broadcast

18
00:00:45,670 --> 00:00:49,920
receiver to identify which conversation
notification is referring to.

19
00:00:49,920 --> 00:00:53,100
We've used 42 here, but you would
normally have some kind of index

20
00:00:53,100 --> 00:00:55,700
into a data structure that
your messaging app has.

21
00:00:55,700 --> 00:00:58,340
Now we create the PendingIntent
which is a wrapper that lets

22
00:00:58,340 --> 00:01:01,950
the notification trigger this intent
on behalf of our application.

23
00:01:01,950 --> 00:01:05,650
We pass the same 42 value as used for
conversation ID earlier.

24
00:01:05,650 --> 00:01:07,250
We parse in the intent and

25
00:01:07,250 --> 00:01:10,690
we allow this notification to be
an update on a previous one if needed.

26
00:01:10,690 --> 00:01:12,160
We need to now create the intent and

27
00:01:12,160 --> 00:01:15,250
pending intent to be triggered when
the driver replies to a message.

28
00:01:15,250 --> 00:01:17,750
The code for this is almost
identical to the previous code so

29
00:01:17,750 --> 00:01:19,340
we're going to cut and
paste that in now.

30
00:01:19,340 --> 00:01:21,170
The code for this is almost identical,

31
00:01:21,170 --> 00:01:23,280
except we used
a different action string.

32
00:01:23,280 --> 00:01:26,630
You can see here we're using
MY_ACTION_MESSAGE_REPLY instead.

33
00:01:26,630 --> 00:01:29,440
You'll see this is the same
ConversationId from earlier

34
00:01:29,440 --> 00:01:31,720
since this is the same conversation.

35
00:01:31,720 --> 00:01:33,930
Now we need to implement
the remote input object,

36
00:01:33,930 --> 00:01:36,310
which will handle the speech
recognition for you and

37
00:01:36,310 --> 00:01:39,000
deliver it to your broadcast
receiver as a string.

38
00:01:39,000 --> 00:01:43,110
The voice reply key here will be
the key used to extract out the reply

39
00:01:43,110 --> 00:01:44,940
later on in our broadcast receiver.

40
00:01:44,940 --> 00:01:48,510
An interesting thing to note is that
Android wear implements a similar remote

41
00:01:48,510 --> 00:01:52,210
input extension as well, and
the set label call is used there.

42
00:01:52,210 --> 00:01:55,100
You'll notice here that Android Studio
has highlighted remote input as

43
00:01:55,100 --> 00:01:56,140
not being valid.

44
00:01:56,140 --> 00:01:59,160
You can press Alt+Enter and
it will import the package for you.

45
00:01:59,160 --> 00:02:01,600
Make sure you pick the one
from the support library.

46
00:02:01,600 --> 00:02:02,230
Let's now go and

47
00:02:02,230 --> 00:02:05,780
show you how to receive the results
in the two broadcast receivers.

48
00:02:05,780 --> 00:02:07,970
Open up my message heard receiver,

49
00:02:07,970 --> 00:02:11,200
the onReceive method is called when
a message has been heard by the driver.

50
00:02:11,200 --> 00:02:13,780
You can retrieve
the ConversationId key value

51
00:02:13,780 --> 00:02:16,650
by using the following code
to get it out of the intent.

52
00:02:16,650 --> 00:02:19,780
We should remove the code that
generates this exception here, and

53
00:02:19,780 --> 00:02:21,590
let's put some logging here instead.

54
00:02:21,590 --> 00:02:24,620
Once again,
we do Alt+Enter to add this dependency.

55
00:02:24,620 --> 00:02:27,470
Now, let's look at
the MyMessageReply receiver.

56
00:02:27,470 --> 00:02:30,470
This unreceived method is called
when a message has been replied to

57
00:02:30,470 --> 00:02:31,660
by the driver.

58
00:02:31,660 --> 00:02:36,190
You can retrieve the same ConversationId
here as well just like before and

59
00:02:36,190 --> 00:02:38,630
now we can retrieve
the text of the reply.

60
00:02:38,630 --> 00:02:43,310
Once again, we hit Alt+Enter a few
times to resolve the dependencies and

61
00:02:43,310 --> 00:02:45,580
now we can retrieve
the text of the reply.

62
00:02:45,580 --> 00:02:49,730
Note that we use voice reply key that we
supplied earlier to the remote input and

63
00:02:49,730 --> 00:02:51,730
we can retrieve it
using getCharSequence.

64
00:02:51,730 --> 00:02:54,620
You can do whatever you need with this
stream of characters for your app.

65
00:02:54,620 --> 00:02:57,830
In this case here we're logging it so
we can see it in the ADB logcat output.

66
00:02:57,830 --> 00:02:59,210
And just like before,

67
00:02:59,210 --> 00:03:01,990
we need to remove the code that
generates the exception here as well.

68
00:03:01,990 --> 00:03:04,580
Let's go back to
the MainActivity.java file.

69
00:03:04,580 --> 00:03:07,690
The next step here is to create
an unread conversation builder.

70
00:03:07,690 --> 00:03:10,230
We will use this to organize
a group of messages that are From

71
00:03:10,230 --> 00:03:11,620
a particular sender.

72
00:03:11,620 --> 00:03:12,840
So, use the code.

73
00:03:12,840 --> 00:03:15,740
You'll notice here we have conversation
name which is the person who these

74
00:03:15,740 --> 00:03:16,659
messages are from.

75
00:03:16,659 --> 00:03:18,540
I've had coded my name in here but

76
00:03:18,540 --> 00:03:22,100
you typically get this information
from the messages in your application.

77
00:03:22,100 --> 00:03:25,190
Also, you can see we've references
the two pending intents from earlier.

78
00:03:25,190 --> 00:03:29,000
So that auto knows which intents to
run when your conversation is read or

79
00:03:29,000 --> 00:03:30,220
replied to.

80
00:03:30,220 --> 00:03:33,240
Now we need to actually add
the messages from the conversation.

81
00:03:33,240 --> 00:03:36,050
So we've hard coded an example here
that you would typically loop through

82
00:03:36,050 --> 00:03:38,600
an array and
add each message separately.

83
00:03:38,600 --> 00:03:41,880
The add message method here is used to
add the message string through this

84
00:03:41,880 --> 00:03:42,925
conversation.

85
00:03:42,925 --> 00:03:45,515
Set latest time stamp is used
to indicate when the message

86
00:03:45,515 --> 00:03:46,615
actually arrived.

87
00:03:46,615 --> 00:03:50,205
I've used the current time stamp here
since we're just simulating things.

88
00:03:50,205 --> 00:03:53,005
So this is all the new code that we
need to add, now we need to edit

89
00:03:53,005 --> 00:03:55,915
the existing notification to use
the objects we just created.

90
00:03:55,915 --> 00:03:59,860
The way we extend a notification
if using car extender.

91
00:03:59,860 --> 00:04:03,130
Once again, use alt enter to
add the package for this.

92
00:04:03,130 --> 00:04:06,060
At this time, we call the build
method of the unread conversation

93
00:04:06,060 --> 00:04:09,020
builder from before and
store it into the car extender.

94
00:04:09,020 --> 00:04:12,240
The car extender is then stored
into the notification builder

95
00:04:12,240 --> 00:04:13,720
using this extend method.

96
00:04:13,720 --> 00:04:16,029
Finally, we need to issue
the notification and

97
00:04:16,029 --> 00:04:17,560
the code is already here for that.

98
00:04:17,560 --> 00:04:20,149
But there is one gotcha here
that you need to watch out for.

99
00:04:20,149 --> 00:04:23,210
When creating notifications
with extensions, such as for

100
00:04:23,210 --> 00:04:26,720
auto aware, you need to use
notification manager compact.

101
00:04:26,720 --> 00:04:29,790
If you use the standard
system notification manager,

102
00:04:29,790 --> 00:04:32,650
the car extender will be lost,
so why is this?

103
00:04:32,650 --> 00:04:35,530
Well, if you're building against
an auto framework, such as API10,

104
00:04:35,530 --> 00:04:39,500
the system notification manager does
not know about these extensions and so

105
00:04:39,500 --> 00:04:40,610
will not pass them on.

106
00:04:40,610 --> 00:04:44,670
So to be safe, you should use the
compact versions of both notification

107
00:04:44,670 --> 00:04:48,130
and NotificationManager to ensure
that everything works properly and

108
00:04:48,130 --> 00:04:49,760
you don't have any problems.

109
00:04:49,760 --> 00:04:53,360
First, we work the NotificationManager
code here like so.

110
00:04:53,360 --> 00:04:56,440
So we grab the NotificationManagerCompat
like this,

111
00:04:56,440 --> 00:04:59,500
use old answers to resolve dependencies,
and we're done.

112
00:04:59,500 --> 00:05:02,660
So now, let's test this by compiling and
installing it to our phone.

113
00:05:02,660 --> 00:05:06,880
Click the green triangle,
select the emulator Hit okay,

114
00:05:06,880 --> 00:05:08,600
switch over to the emulator.

115
00:05:08,600 --> 00:05:10,910
If you followed the previous steps,
it should run on your phone,

116
00:05:10,910 --> 00:05:13,420
although you won't be able to
see any difference just yet,

117
00:05:13,420 --> 00:05:17,420
since we're not actually using this
inside an android enabled vehicle.

118
00:05:17,420 --> 00:05:20,910
Go ahead and try to replicate
all the steps that I just did.

119
00:05:20,910 --> 00:05:24,220
You can refer to the Android auto
messaging training guide for

120
00:05:24,220 --> 00:05:27,310
a detailed rundown of how to
do what we just discussed.

121
00:05:27,310 --> 00:05:29,895
The URL is at the top, right here, it's

122
00:05:29,895 --> 00:05:32,440
developer.android.com/training/auto/messaging.

123
00:05:32,440 --> 00:05:37,830
Once you've completed the task,
check the box to continue.
