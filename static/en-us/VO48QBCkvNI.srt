1
00:00:00,440 --> 00:00:04,880
Now let's start discussing shared memory and private caches.

2
00:00:04,880 --> 00:00:06,810
And in order to simplify the discussion what I've

3
00:00:06,810 --> 00:00:09,750
done is, I'm using the simplest form of the

4
00:00:09,750 --> 00:00:12,120
shared memory machine that I told you about. That is

5
00:00:12,120 --> 00:00:14,650
an SMP where there's a single system bus that

6
00:00:14,650 --> 00:00:17,290
connects all these processes to talk to the main

7
00:00:17,290 --> 00:00:21,710
memory. Now cache that is associated with the CPU

8
00:00:21,710 --> 00:00:25,770
Serves exactly the same purpose in a multiprocessor like this,

9
00:00:25,770 --> 00:00:30,910
as it does in a uniprocessor. And that is, the CPU,

10
00:00:30,910 --> 00:00:35,030
when it wants to access some memor, memory location, of course, it

11
00:00:35,030 --> 00:00:36,700
is going to go to the cache and see if it

12
00:00:36,700 --> 00:00:38,780
is there. If it is there, life is good, it can get

13
00:00:38,780 --> 00:00:40,980
it from the c, from the cache. If it is not

14
00:00:40,980 --> 00:00:43,730
in the cache, then it has to go to the main memory.

15
00:00:43,730 --> 00:00:46,890
And fetch it from main memory, and put it into the cache

16
00:00:46,890 --> 00:00:51,030
so it can reuse it later, and that's the purpose that cache

17
00:00:51,030 --> 00:00:54,440
performs in a uniprocessor. In a multiprocessor,

18
00:00:54,440 --> 00:00:57,770
performs exactly the same function as in

19
00:00:57,770 --> 00:01:01,100
a uniprocessor. By cacheing data that is

20
00:01:01,100 --> 00:01:02,710
pulled in or instructions that are pulled

21
00:01:02,710 --> 00:01:08,050
in from memory into the cache so that CPU can re-use it later. When

22
00:01:08,050 --> 00:01:12,850
cache in a multiprocessor, associated with each

23
00:01:12,850 --> 00:01:16,010
of these CPUs performs exactly the same role.

24
00:01:16,010 --> 00:01:20,670
As it does in [UNKNOWN] process. And that is, if the CPU

25
00:01:20,670 --> 00:01:24,260
goes to main memory, and pulls in some data, it's going to come

26
00:01:24,260 --> 00:01:26,520
and sit in the cache. So obviously when the CPU is looking

27
00:01:26,520 --> 00:01:30,070
for something, first it is going to come and look at the cache.

28
00:01:30,070 --> 00:01:32,630
If it is not there, it's going to go to main memory. And

29
00:01:32,630 --> 00:01:35,060
fetch the data and put it into the cache so that in

30
00:01:35,060 --> 00:01:37,780
the future the CPU doesn't have to go to the main memory,

31
00:01:37,780 --> 00:01:41,430
but get it from the cache itself. That's the purpose of the cache

32
00:01:41,430 --> 00:01:44,700
in a uni-processor. Exactly the same purpose a

33
00:01:44,700 --> 00:01:48,430
cache performs in a multiprocessor as well. However

34
00:01:48,430 --> 00:01:51,540
there's a unique problem with a multiprocessor. The

35
00:01:51,540 --> 00:01:54,610
fact that there are private caches associated with

36
00:01:54,610 --> 00:01:56,680
each one of these CPUs, and the memory

37
00:01:56,680 --> 00:01:59,690
itself is shared across all of these processors.

38
00:01:59,690 --> 00:02:03,110
Let me explain that. Let's say that there's

39
00:02:03,110 --> 00:02:07,020
a memory location y that is currently in the

40
00:02:07,020 --> 00:02:10,570
private caches of all the processors. Well maybe y

41
00:02:10,570 --> 00:02:13,660
is a hot memory location so all the processes

42
00:02:13,660 --> 00:02:15,910
happen to fetch it and therefore it is sitting

43
00:02:15,910 --> 00:02:19,640
in the private caches of all the processes. Let's say

44
00:02:19,640 --> 00:02:22,180
that process P1 decides to write to this memory

45
00:02:22,180 --> 00:02:25,360
location y now y is changed to y prime.

46
00:02:25,360 --> 00:02:28,000
Now what should happen to the value of y

47
00:02:28,000 --> 00:02:32,110
that is sitting in all the p caches. And clearly,

48
00:02:32,110 --> 00:02:35,580
you know, in a multiprocessor, a multi-threaded program, there

49
00:02:35,580 --> 00:02:38,340
could be a shared data structure that is being

50
00:02:38,340 --> 00:02:40,890
shared with all the processors. And therefore if this

51
00:02:40,890 --> 00:02:43,800
guy writes to a particular memory location it is possible

52
00:02:43,800 --> 00:02:45,760
that that same memory location is in the private

53
00:02:45,760 --> 00:02:50,350
caches of the peers. So this is referred to as

54
00:02:50,350 --> 00:02:54,100
the cache coherence problem. Now someone has to ensure

55
00:02:54,100 --> 00:02:57,300
that, if at a little point of time, if process

56
00:02:57,300 --> 00:03:01,210
of p two or p three or any of these processes that happen to have this

57
00:03:01,210 --> 00:03:05,070
memory location y, in the private caches decide

58
00:03:05,070 --> 00:03:08,190
to access it. They should get y prime and

59
00:03:08,190 --> 00:03:12,440
not y. Now who should ensure this consistency?

60
00:03:12,440 --> 00:03:15,100
Here again there's a partnership between hardware and

61
00:03:15,100 --> 00:03:19,080
software. In other words, the hardware and software

62
00:03:19,080 --> 00:03:22,570
have to agree as to what is called the

63
00:03:22,570 --> 00:03:26,180
memory consistency model. That is, this memory consistency

64
00:03:26,180 --> 00:03:29,780
model, is a contract between hardware and software

65
00:03:29,780 --> 00:03:33,020
as to what behavior a programmer can expect,

66
00:03:33,020 --> 00:03:35,990
writing a multi threaded application running on this

67
00:03:35,990 --> 00:03:39,910
multiprocessor. An analogy that you may be familiar

68
00:03:39,910 --> 00:03:43,370
with is a contract between hardware and software.

69
00:03:43,370 --> 00:03:45,580
If you just think about a uniprocessor, if

70
00:03:45,580 --> 00:03:47,850
you think about a uniprocessor. There's a compiler

71
00:03:47,850 --> 00:03:51,140
writer that knows about the instruction set provided by

72
00:03:51,140 --> 00:03:54,500
the CPU. And the architect goes and builds a

73
00:03:54,500 --> 00:03:58,100
CPU, and he has no idea how this instruction

74
00:03:58,100 --> 00:03:59,910
set is going to be used, but there is an

75
00:03:59,910 --> 00:04:03,150
expectation that the instruction set, the semantics of that

76
00:04:03,150 --> 00:04:06,170
instruction set. Is going to be adhered to in the implementation

77
00:04:06,170 --> 00:04:09,580
of the processor. So that, the compiler writer can

78
00:04:09,580 --> 00:04:12,920
use that instruction set in order to compile high level

79
00:04:12,920 --> 00:04:16,470
language programs. Similarly, when you're writing a multithreaded

80
00:04:16,470 --> 00:04:20,990
application, you need a contract between the software

81
00:04:20,990 --> 00:04:23,460
and the hardware, as to the behavior of

82
00:04:23,460 --> 00:04:27,080
the hardware when. Processors are accessing the same

83
00:04:27,080 --> 00:04:30,480
memory location. And that is what is called

84
00:04:30,480 --> 00:04:33,050
the memory consistency model. And what we're going

85
00:04:33,050 --> 00:04:37,920
to do now, is in order to get your creative juices flowing, I'm going to ask you

86
00:04:37,920 --> 00:04:38,450
a question.
