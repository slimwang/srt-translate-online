1
00:00:00,380 --> 00:00:03,290
So, to summarize what goes on in the new

2
00:00:03,290 --> 00:00:05,950
way we are doing the RPC between the client

3
00:00:05,950 --> 00:00:09,570
and the server. During the actual call, copies through

4
00:00:09,570 --> 00:00:13,260
the kernel is completely eliminated. Right? It's completely eliminated because

5
00:00:13,260 --> 00:00:16,350
all of the argument-result passing between the client and

6
00:00:16,350 --> 00:00:19,250
the serving is happening through this A-stack which is

7
00:00:19,250 --> 00:00:21,690
mapped into the outer space of the client and

8
00:00:21,690 --> 00:00:25,800
the server. And so the actual overheads that are incurred

9
00:00:25,800 --> 00:00:29,170
in making this RPC call is this client trap and

10
00:00:29,170 --> 00:00:32,380
validation by the kernel that this call can be allowed

11
00:00:32,380 --> 00:00:35,500
to go through. And switching the domains I told you

12
00:00:35,500 --> 00:00:38,050
about this trick of doctoring the client thread to start

13
00:00:38,050 --> 00:00:41,770
executing in the server procedure. That is really switching the

14
00:00:41,770 --> 00:00:44,460
protection domain from the client address space into the server

15
00:00:44,460 --> 00:00:47,480
address space so that you can start executing the procedure

16
00:00:47,480 --> 00:00:51,190
that's visible only in this address space. So that is the

17
00:00:51,190 --> 00:00:53,590
switching domain in the second overhead.

18
00:00:53,590 --> 00:00:56,490
And finally, when the server procedure is

19
00:00:56,490 --> 00:01:00,310
done executing, the return trap. That's the

20
00:01:00,310 --> 00:01:03,150
third explicit cost. So three explicit costs

21
00:01:03,150 --> 00:01:09,460
associated with the actual call. The first explicit is the client trap and, and

22
00:01:09,460 --> 00:01:13,000
validating this BO. And the second explicit

23
00:01:13,000 --> 00:01:16,260
cost is switching the protection domain from

24
00:01:16,260 --> 00:01:17,910
the client to the server so that you can

25
00:01:17,910 --> 00:01:21,250
start executing the server procedure. And the third explicit

26
00:01:21,250 --> 00:01:24,940
cost is when we have this return track to

27
00:01:24,940 --> 00:01:27,540
go back to the client address space. So those

28
00:01:27,540 --> 00:01:30,990
are the explicit costs. But we know, having done

29
00:01:30,990 --> 00:01:33,230
a lot of work on the operating system structure

30
00:01:33,230 --> 00:01:36,740
early on, that there are implicit overheads that are

31
00:01:36,740 --> 00:01:41,690
associated with switching protection domains. The implicit overhead is

32
00:01:41,690 --> 00:01:46,020
the loss of locality due to the domain switching that's

33
00:01:46,020 --> 00:01:48,690
happening. When we go from the client address space to

34
00:01:48,690 --> 00:01:51,000
the server address space, we are touching, of course we

35
00:01:51,000 --> 00:01:55,160
are touching some part of the address space, are going to

36
00:01:55,160 --> 00:01:57,690
be in physical memory and therefore in the caches of

37
00:01:57,690 --> 00:02:00,780
the processor. But, there's a lot of stuff that may

38
00:02:00,780 --> 00:02:03,810
not be in the caches of the processor. So, there

39
00:02:03,810 --> 00:02:06,930
is going to be a loss of locality due to the domain

40
00:02:06,930 --> 00:02:13,020
switch that, that may happen. In the, in the sense that caches and the processor

41
00:02:13,020 --> 00:02:18,170
may not have all the stuff that the server needs in order to do its execution.
