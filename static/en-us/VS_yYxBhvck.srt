1
00:00:00,830 --> 00:00:03,700
Alright. The correct answer is that relational databases are

2
00:00:03,700 --> 00:00:06,400
useful because it is straightforward to extract data with

3
00:00:06,400 --> 00:00:10,930
complex queries. A database scales well. And relational databases

4
00:00:10,930 --> 00:00:14,610
ensure data is consistently formatted. What do each of these

5
00:00:14,610 --> 00:00:17,890
mean? Well, first off it's easy to extract data

6
00:00:17,890 --> 00:00:20,900
from the database with a complex one line query. We

7
00:00:20,900 --> 00:00:23,500
can easily say choose all records for people where

8
00:00:23,500 --> 00:00:25,920
their age is greater than 50, and their weight is

9
00:00:25,920 --> 00:00:28,750
less than 50, and the city is equal to Mumbai.

10
00:00:28,750 --> 00:00:31,040
We can do this with flat files as well, but

11
00:00:31,040 --> 00:00:35,210
its a lot more work. Database is also scale well.

12
00:00:35,210 --> 00:00:38,080
Its not uncommon to have databases with hundreds of thousands

13
00:00:38,080 --> 00:00:41,500
or millions of entries. Since all information is ideally stored

14
00:00:41,500 --> 00:00:44,780
in one location, It's easy to update, delete, and add

15
00:00:44,780 --> 00:00:48,290
new data to the database in a scalable way. Think

16
00:00:48,290 --> 00:00:51,456
of the [UNKNOWN] data for example. India has a population

17
00:00:51,456 --> 00:00:55,000
of 1.2 billion people. That's a really big data

18
00:00:55,000 --> 00:00:58,150
set. It's important to have a solution that scales well.

19
00:00:58,150 --> 00:01:01,560
Finally, relational databases have a concept of something called

20
00:01:01,560 --> 00:01:04,510
a schema. Which basically says that each column in a

21
00:01:04,510 --> 00:01:07,840
table Is always of the same type you can't

22
00:01:07,840 --> 00:01:10,270
have some people's age be a string while the age

23
00:01:10,270 --> 00:01:13,550
of others is an int. Relational databases are built

24
00:01:13,550 --> 00:01:16,540
to have as little redundancy as possible that way if

25
00:01:16,540 --> 00:01:19,980
we want to update a value we only have to do it in one place and we can ensure

26
00:01:19,980 --> 00:01:23,840
that our data remains consistent throughout the entire database.

27
00:01:23,840 --> 00:01:26,900
Also, relational databases are well established and have been used

28
00:01:26,900 --> 00:01:29,330
for some time. Even if they were hot and

29
00:01:29,330 --> 00:01:32,670
new, that's not a great reason to use a technology.

30
00:01:32,670 --> 00:01:34,930
And now that we know why relational databases might be

31
00:01:34,930 --> 00:01:38,150
useful, let's discuss how to use them in more detail.
