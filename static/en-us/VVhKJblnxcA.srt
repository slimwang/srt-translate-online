1
00:00:00,012 --> 00:00:03,465
Now that we have our ASA data parsed we can use it to render to the screen.

2
00:00:03,465 --> 00:00:07,111
Although you notice that our previous drawimage function doesn't allow us to

3
00:00:07,111 --> 00:00:10,616
draw sub section of an image. Effectively it only took in x and y position.

4
00:00:10,616 --> 00:00:14,206
Thankfully there's a version of drawimage that supports this ability but we

5
00:00:14,206 --> 00:00:18,006
haven't really discussed it yet. There's an advanced version of the drawimage

6
00:00:18,006 --> 00:00:21,654
API that takes in a few more parameters giving us more control on how we want to

7
00:00:21,654 --> 00:00:25,662
get the pixels to the screen. In order to understand more about this we cruise

8
00:00:25,662 --> 00:00:29,596
over to webplatform.org so we can take a look at the data. The new parameters

9
00:00:29,596 --> 00:00:33,610
that we should be looking at are this. First off we handle the same image object

10
00:00:33,610 --> 00:00:37,481
that we took with our previous drawImage API. And then we have the source x,

11
00:00:37,481 --> 00:00:41,642
source y, source width, and source height parameters. These represent the xy

12
00:00:41,642 --> 00:00:45,734
position of our chart in our atlas as well as the width and the height of that

13
00:00:45,734 --> 00:00:50,242
chart in the atlas. The destination x, y, width, and height represent the

14
00:00:50,242 --> 00:00:55,106
position and size that this small subsection of our atlas is going to be drawn

15
00:00:55,106 --> 00:01:00,074
to in the output canvas. So, for example, we can set source x and source y to 2,

16
00:01:00,074 --> 00:01:04,792
2. Width and height to 32, 32. And draw to a position on canvas of 128, 128 by

17
00:01:04,792 --> 00:01:09,292
64 by 64, drawImage is smart enough to know that if the source, width, and

18
00:01:09,292 --> 00:01:14,033
height don't match the destination, width and height. To probably scale the

19
00:01:14,033 --> 00:01:18,220
image to match the desired output size. For our purposes in grids we really

20
00:01:18,220 --> 00:01:22,164
don't do any scaling so for 99.9% of the time source, width, height and

21
00:01:22,164 --> 00:01:24,827
destination, width, height are the same size.
