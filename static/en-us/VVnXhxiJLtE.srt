1
00:00:00,330 --> 00:00:02,990
The situation we want to consider next is what if we need to

2
00:00:02,990 --> 00:00:06,930
do more than one broadcast? So let's say we have this situation. You know,

3
00:00:06,930 --> 00:00:10,930
we have some instructions renamed, there is the register file here.

4
00:00:10,930 --> 00:00:15,850
We have some reservation stations. But, the situation is that somehow this

5
00:00:15,850 --> 00:00:20,805
divide here has finished in the multiply divide unit,

6
00:00:20,805 --> 00:00:26,250
at the same cycle when the add here has finished in the add unit and

7
00:00:26,250 --> 00:00:30,015
now we, if we have only one of these broadcast buses that we can use to

8
00:00:30,015 --> 00:00:34,497
broadcast the result, the question is, which one of these goes first?

9
00:00:34,497 --> 00:00:40,540
There are first of all, several possibilities for how to support this impasse.

10
00:00:40,540 --> 00:00:44,720
For example, you could have a separate broadcast bus for each of the units. So,

11
00:00:44,720 --> 00:00:48,780
normally you have one of these buses. If you have a separate bus,

12
00:00:48,780 --> 00:00:51,740
note that there will be twice as many comparators basically for

13
00:00:51,740 --> 00:00:55,190
each of the operands for each of the instructions in the reservation stations.

14
00:00:55,190 --> 00:00:59,670
We need to try to match each of the tags that are being broadcast and

15
00:00:59,670 --> 00:01:05,300
be able to select the result or not depending on whether it matches.

16
00:01:05,300 --> 00:01:09,010
So there will be twice as much matching hardware if we had two buses.

17
00:01:09,010 --> 00:01:12,590
Similarly here and here you will have to be able to write the results and so on.

18
00:01:12,590 --> 00:01:16,145
So if you have only one bus then the question is, which one do we broadcast. And

19
00:01:16,145 --> 00:01:22,400
usually, you either just make one unit be the highest priority unit and

20
00:01:22,400 --> 00:01:25,750
the other ones are kind of less priority than that so that you always know.

21
00:01:25,750 --> 00:01:28,500
I mean, you, we, we need to choose very quickly which one is going to

22
00:01:28,500 --> 00:01:33,110
be broadcast. It doesn't matter so much which one it is as much as it

23
00:01:33,110 --> 00:01:36,440
matters that it's only one. So basically, one of them needs to be picked.

24
00:01:36,440 --> 00:01:40,350
A very common heuristic is that if one of the units is known to be

25
00:01:40,350 --> 00:01:43,660
slower than the other, let's say that the multiplication and

26
00:01:43,660 --> 00:01:47,320
divide are slower than adds and subtracts and so on, which is usually the case.

27
00:01:47,320 --> 00:01:51,340
Then, what you want to do is give the priority to the slower unit.

28
00:01:51,340 --> 00:01:55,600
Why? Well, because those instructions have been executing for

29
00:01:55,600 --> 00:02:00,720
a while longer. So what's going to happen is those instructions are going to

30
00:02:00,720 --> 00:02:03,460
have more dependencies probably waiting for them. Pretty much,

31
00:02:03,460 --> 00:02:07,530
there are more instructions piled up to use these results. So it's, so

32
00:02:07,530 --> 00:02:11,170
it's kind of like an age based thing, but instead of considering the age of each

33
00:02:11,170 --> 00:02:14,730
instruction, in which case we would have to carry additional information here.

34
00:02:14,730 --> 00:02:17,690
What we do is we simply give the priority to the smaller unit.

35
00:02:17,690 --> 00:02:21,880
So this is a very common heuristic and that's usually what ends up being used.

36
00:02:21,880 --> 00:02:24,450
If you really want to be kind of better than that, then you would, you know,

37
00:02:24,450 --> 00:02:27,570
carry the age of the instruction in which case you can do age based thing, which

38
00:02:27,570 --> 00:02:30,390
amounts to almost the same thing. Because usually these instruction's going to

39
00:02:30,390 --> 00:02:34,530
be older here just because they're kind of slower to execute to begin with.

40
00:02:34,530 --> 00:02:38,200
Or you do something slightly more advanced than that. But again, it's a very

41
00:02:38,200 --> 00:02:41,700
common heuristic that we just used. Basically, the multiplication divide unit is

42
00:02:41,700 --> 00:02:44,460
going to have priority in this case over the add and subtract unit.
