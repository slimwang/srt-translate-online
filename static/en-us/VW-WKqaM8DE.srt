1
00:00:00,103 --> 00:00:02,440
The second disadvantage is in construction,

2
00:00:02,440 --> 00:00:05,308
particularly contention in the construction process.

3
00:00:05,308 --> 00:00:07,416
What we might have is 2 different items,

4
00:00:07,416 --> 00:00:10,818
each of which wants to place 1 item into the hash table.

5
00:00:10,818 --> 00:00:13,149
Let's say both of these items decide

6
00:00:13,149 --> 00:00:16,097
that they have the same hash function for their particular item,

7
00:00:16,097 --> 00:00:21,858
and so they both want to add an item to hash table bucket number 12, for instance.

8
00:00:21,858 --> 00:00:26,400
These 2 items want to simultaneously manipulate the link list in the same bucket.

9
00:00:26,400 --> 00:00:28,993
To do that, they're going to have to serialize and synchronize.

10
00:00:28,993 --> 00:00:31,436
Only 1 of them can update the bucket at any given time,

11
00:00:31,436 --> 00:00:33,144
and the other must wait its turn.

12
00:00:33,144 --> 00:00:37,645
So any serialization like this within a parallel algorithm is definitely undesirable, as well.

13
00:00:37,645 --> 00:00:39,765
So the conclusion here is that chaining

14
00:00:39,765 --> 00:00:43,332
is a sub-optimal strategy if were dealing with parallel hash tables.

15
00:00:43,332 --> 00:00:46,000
So we're going to turn to a different method.
