1
00:00:00,000 --> 00:00:02,000
So the answer is all of the above.

2
00:00:02,000 --> 00:00:06,000
And the reason is when we're testing something like an operating system kernel,

3
00:00:06,000 --> 00:00:10,000
we want to test it basically with all possible values of the parameters

4
00:00:10,000 --> 00:00:12,000
to the calls that it supports.

5
00:00:12,000 --> 00:00:14,000
And it turns out that there's a really good reason for this.

6
00:00:14,000 --> 00:00:17,000
The operating system boundary is a trust boundary.

7
00:00:17,000 --> 00:00:20,000
On 1 side of the operating system boundary we have us.

8
00:00:20,000 --> 00:00:24,000
We're the kernel implementers, and our job is to keep the machine running

9
00:00:24,000 --> 00:00:29,000
to provide isolation between users and basically to enforce all of the security policies

10
00:00:29,000 --> 00:00:31,000
that operating systems are designed to enforce.

11
00:00:31,000 --> 00:00:35,000
On the other side of the boundary we have them. These are our users.

12
00:00:35,000 --> 00:00:39,000
Our users might not actually be malicious. They might only be writing buggy codes.

13
00:00:39,000 --> 00:00:43,000
But the point is, regardless of whether the users of the operating system are malicious

14
00:00:43,000 --> 00:00:47,000
or just writing buggy codes, they're going to invoke system calls like read

15
00:00:47,000 --> 00:00:50,000
with crazy arguments, with all sorts of invalid arguments,

16
00:00:50,000 --> 00:00:54,000
and it better not be the case the operating system malfunctions when this happens.

17
00:00:54,000 --> 00:00:56,000
Therefore, if we're testing the operating system interface,

18
00:00:56,000 --> 99:59:59,999
we really, really, really need to be issuing calls like read with garbage.
