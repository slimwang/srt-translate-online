1
00:00:00,000 --> 00:00:03,000
All right, here is our algorithm before for mean.

2
00:00:03,000 --> 00:00:09,000
We're going to change this to work for max--max as it turns out is the name of my son

3
00:00:09,000 --> 00:00:14,000
because I just find the stuff really important.

4
00:00:14,000 --> 00:00:21,000
In the very deep sense, the thing for computing is functionally equivalent to the mean.

5
00:00:21,000 --> 00:00:25,000
It's really very, very similar kind of calculation that's happening,

6
00:00:25,000 --> 00:00:27,000
but the details are going to end up being a little bit different.

7
00:00:27,000 --> 00:00:32,000
We're going to start off instead of the total of zero sort of a bit the max-so-far being

8
00:00:32,000 --> 00:00:38,000
whatever the first element of the list is, and then, so we should make sure that we don't

9
00:00:38,000 --> 00:00:44,000
compute that one twice then we're going to consider all the other elements in the list, and if

10
00:00:44,000 --> 00:00:52,000
the element that we're currently considering beat the max-so-far, then we have a new max-so-far.

11
00:00:52,000 --> 00:00:59,000
There can be only one and that's what we do, we just apply this task to every element to the list

12
00:00:59,000 --> 00:01:02,000
keeping track of the max-so-far, and then, when we're done,

13
00:01:02,000 --> 00:01:08,000
the max so far is the max-so-far of everything--woohoo!

14
00:01:08,000 --> 00:01:13,000
Now, perhaps not surprisingly Python--you don't want to do this.

15
00:01:13,000 --> 00:01:17,000
You don't want to write your own max routine because Python already has one,

16
00:01:17,000 --> 00:01:22,000
but just as before, you have to be really careful when you use things like max in your programs

17
00:01:22,000 --> 00:01:26,000
to keep in mind that this is a linear time operation--it's not constant time.
