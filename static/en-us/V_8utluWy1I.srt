1
00:00:00,370 --> 00:00:03,750
Now that you know how to selectively
display data using your provider's query

2
00:00:03,750 --> 00:00:07,040
method, let's add the ability
to actually delete a task.

3
00:00:07,040 --> 00:00:10,800
This way, you'll actually be able to
get rid of a task when you finish it.

4
00:00:10,800 --> 00:00:12,280
That's satisfying.

5
00:00:12,279 --> 00:00:16,704
Looking at our list of CRUD functions,
we see that the delete function takes in

6
00:00:16,704 --> 00:00:20,741
a URI and also an optional selection and
selection args as parameters.

7
00:00:20,742 --> 00:00:23,487
So it does look a little bit like
the query function which we're familiar

8
00:00:23,486 --> 00:00:26,084
with, and so it's going to be
pretty similar to implement.

9
00:00:26,085 --> 00:00:28,905
In fact, I think you're ready
to jump into the code and

10
00:00:28,905 --> 00:00:30,845
do this with just
a little bit of guidance.

11
00:00:30,844 --> 00:00:33,103
In the delete function,
you should be doing four things.

12
00:00:33,103 --> 00:00:35,831
First, you should gain access
to the task database and

13
00:00:35,831 --> 00:00:37,323
write the URI matching code.

14
00:00:37,323 --> 00:00:41,509
And then use selection parameters
to delete just one row of data.

15
00:00:41,509 --> 00:00:44,780
Third, don't forget to notify
the ContentResolver of any change after

16
00:00:44,780 --> 00:00:45,660
deletion.

17
00:00:45,659 --> 00:00:47,979
And finally,
you need to return an integer, and

18
00:00:47,979 --> 00:00:50,379
that integer is the number
of items deleted.

19
00:00:50,380 --> 00:00:51,060
Got it?

20
00:00:51,060 --> 00:00:51,670
Okay.

21
00:00:51,670 --> 00:00:54,270
After you program the delete
method in the provider code,

22
00:00:54,270 --> 00:00:55,540
I'll show you how to hook up your UI.

