1
00:00:00,000 --> 00:00:03,000
So, we've looked at 2 search algorithms.

2
00:00:03,000 --> 00:00:08,000
One, breadth-first search, in which we always expand first

3
00:00:08,000 --> 00:00:12,000
the shallowest paths, the shortest paths.

4
00:00:12,000 --> 00:00:17,000
Second, cheapest-first search, in which we always expand first the path

5
00:00:17,000 --> 00:00:20,000
with the lowest total cost.

6
00:00:20,000 --> 00:00:25,000
And I'm going to take this opportunity to introduce a third algorithm, depth-first search,

7
00:00:25,000 --> 00:00:28,000
which is in a way the opposite of breadth-first search.

8
00:00:28,000 --> 00:00:33,000
In depth-first search, we always expand first the longest path,

9
00:00:33,000 --> 00:00:36,000
the path with the most lengths in it.

10
00:00:36,000 --> 00:00:42,000
Now, what I want to ask you to do is for each of these nodes in each of the trees,

11
00:00:42,000 --> 00:00:44,000
tell us in what order they're expanded,

12
00:00:44,000 --> 00:00:49,000
first, second, third, fourth, fifth and so on by putting a number into the box.

13
00:00:49,000 --> 00:00:58,000
And if there are ties, put that number in and resolve the ties in left to right order.

14
00:00:58,000 --> 00:01:03,000
Then I want you to ask one more question or answer one more question

15
00:01:03,000 --> 00:01:06,000
which is are these searches optimal?

16
00:01:06,000 --> 00:01:11,000
That is, are they guaranteed to find the best solution?

17
00:01:11,000 --> 00:01:16,000
And for breadth-first search, optimal would mean finding the shortest path.

18
00:01:16,000 --> 00:01:21,000
If you think it's guaranteed to find the shortest path, check here.

19
00:01:21,000 --> 00:01:26,000
For cheapest first, it would mean finding the path with the lowest total path cost.

20
00:01:26,000 --> 00:01:30,000
Check here if you think it's guaranteed to do that.

21
00:01:30,000 --> 00:01:34,000
And we'll allow the assumption that all costs have to be positive.

22
00:01:34,000 --> 00:01:41,000
And in depth first, cheapest or optimal would mean, again,

23
00:01:41,000 --> 00:01:46,000
as in breadth first, finding the shortest possible path in terms of number of lengths.

24
00:01:46,000 --> 99:59:59,999
Check here if you think depth first will always find that.
