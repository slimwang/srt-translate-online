1
00:00:00,240 --> 00:00:02,741
So far everything I've talked about really applies to every programming

2
00:00:02,741 --> 00:00:05,854
language. In fact, it applies to lots of things beyond programming. Whether

3
00:00:05,854 --> 00:00:10,540
you're designing a house, designing a company, planning and event. All of those

4
00:00:10,540 --> 00:00:13,950
things benefit from doing things in a modular way and thinking about how to

5
00:00:13,950 --> 00:00:17,523
break the problem down into small pieces with clean interfaces. Now we're going

6
00:00:17,523 --> 00:00:21,070
to talk about some of the specifics of how to actually do this in python. And in

7
00:00:21,070 --> 00:00:24,914
Python we can divide a program into modules which are really just separate

8
00:00:24,914 --> 00:00:29,012
files. In order for one file to use another file, once we have divided our

9
00:00:29,012 --> 00:00:33,228
program into separate files, in order to use what's in one file in the other

10
00:00:33,228 --> 00:00:37,202
file, we need to import. We can thus using the syntax import followed by the

11
00:00:37,202 --> 00:00:41,490
module name. So if we're in the file a dot py and we want to use something from

12
00:00:41,490 --> 00:00:47,641
b dot py. We will just do import b. Python will look for a file named b.py.

13
00:00:47,641 --> 00:00:50,428
That's the simplest case, and it will find it in the current directory. If it

14
00:00:50,428 --> 00:00:55,637
doesn't find that file there, there are other ways it will look for a module.

15
00:00:55,638 --> 00:00:58,936
And it will look on a path of directories to find it, but the ones that create

16
00:00:58,936 --> 00:01:02,434
yourself will probably be in the same directory as the file that you're working

17
00:01:02,434 --> 00:01:06,522
on. Until your programs get really complicated and then you'll organize those

18
00:01:06,522 --> 00:01:10,456
into directories as well. We've used import before and you've seen the import

19
00:01:10,456 --> 00:01:14,585
"urllib" in some of the code that, that used in search engine. This was used to

20
00:01:14,585 --> 00:01:18,996
be able to use a function to get a page from the web. We didn't define this

21
00:01:18,996 --> 00:01:23,724
ourselves and if you look in the directory there's no "urllib" dot py file. This

22
00:01:23,724 --> 00:01:28,203
is a module provided by the Python library. Since we didn't define this

23
00:01:28,203 --> 00:01:32,974
ourselves, Python will search for this on the path until it finds it. We can see

24
00:01:32,974 --> 00:01:38,694
what that path is by doing import sys to import the sys module, and then looking

25
00:01:38,694 --> 00:01:44,214
at the value of path defined in the sys module, and we see this long path. Your

26
00:01:44,214 --> 00:01:47,682
results will very depending on how you installed Python and what platform you're

27
00:01:47,682 --> 00:01:51,768
working on. The specifics that you see here will depend on your Python

28
00:01:51,768 --> 00:01:56,080
installation. You should see the first entry is the current path. There's an

29
00:01:56,080 --> 00:01:59,380
empty directory here, meaning it's always going to look in the current directory

30
00:01:59,380 --> 00:02:02,530
first, but then it's going to look in a bunch of different library directories

31
00:02:02,530 --> 00:02:05,749
to try to find the packet you're looking for. The other thing want to point out

32
00:02:05,749 --> 00:02:11,042
here. Is the syntax I used here. This is the way that obtain a definition from a

33
00:02:11,042 --> 00:02:15,396
module. So, we imported this module to act as the definition from that module,

34
00:02:15,396 --> 00:02:18,938
we need to sue the module followed by a dot. And then, we can access the

35
00:02:18,938 --> 00:02:22,900
definitions in that module. What this means is that modules avoid name space

36
00:02:22,900 --> 00:02:27,640
pollution. If we didn't have to use the module to reference definitions in the

37
00:02:27,640 --> 00:02:31,412
imported files. Well then everytime we imported a file, we'd have to worry

38
00:02:31,412 --> 00:02:34,716
about, does it use any names that we use, and are we going to lose our own

39
00:02:34,716 --> 00:02:39,483
definitions and have pollution that way? The way Python avoids that is by, when

40
00:02:39,483 --> 00:02:44,795
you import a module, all the names to find in that file are only visible inside

41
00:02:44,795 --> 00:02:49,960
the module, followed by the module, dot the name. This means that if you had

42
00:02:49,960 --> 00:02:54,680
your own path variable and then you import sys, the value of path hasn't

43
00:02:54,680 --> 00:02:55,343
changed.
