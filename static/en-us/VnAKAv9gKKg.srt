1
00:00:00,000 --> 00:00:04,121
So we've talked about if-then-else and switch statements as 1 kind of branch.

2
00:00:04,121 --> 00:00:06,188
Loops are another kind of branch.

3
00:00:06,188 --> 00:00:09,823
So here is a snippet of CUDA kernel code with 2 loops.

4
00:00:09,823 --> 00:00:14,601
So for both of these loops, assume that this function bar is what's going to take the most time,

5
00:00:14,601 --> 00:00:19,499
that all these calls to bar are going to dominate the total time spent in foo.

6
00:00:19,499 --> 00:00:25,168
And the only difference between these loops is that in this case we repeat a number of times

7
00:00:25,168 --> 00:00:27,776
which is threadIdx.x%32,

8
00:00:27,776 --> 00:00:33,511
and here we repeat a number of times which is threadIdx.x/32, integer divide.

9
00:00:33,511 --> 00:00:38,058
So as a quiz, see if you can figure out which of these is faster--loop 1 or loop 2.

10
00:00:38,058 --> 00:00:42,596
In other words, where do we spend total, across the whole kernel, more of our time?

11
00:00:42,596 --> 00:00:45,779
And remember, we're assuming that bar is a really expensive function

12
00:00:45,779 --> 00:00:49,334
that will dominate the overhead of actually calling a loop.

13
00:00:49,334 --> 00:00:53,884
And roughly how much faster is it? So give me just an integer answer.
