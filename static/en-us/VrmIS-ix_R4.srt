1
00:00:00,000 --> 00:00:04,000
One more function to write--add_suffixes--and then we'll be done with this bird.

2
00:00:04,000 --> 00:00:06,000
We're given the start location.

3
00:00:06,000 --> 00:00:10,000
We recover the location in which we want to place the anchor letter,

4
00:00:10,000 --> 00:00:15,000
which is start at the start and then add in however much of the prefix we have.

5
00:00:15,000 --> 00:00:17,000
It could be the empty string. It could be more.

6
00:00:17,000 --> 00:00:21,000
If the prefix is already a word, then we want to add in a possible play.

7
00:00:21,000 --> 00:00:25,000
The play is starting in the start location we put in this word.

8
00:00:25,000 --> 00:00:27,000
But there is also this test.

9
00:00:27,000 --> 00:00:31,000
This test says we want to make sure that we've at least anchored the prefix.

10
00:00:31,000 --> 00:00:33,000
What does that mean?

11
00:00:33,000 --> 00:00:36,000
If we go back to our diagram, if we're right here, we get passed in to add_suffixes

12
00:00:36,000 --> 00:00:41,000
the prefix B-E--that is, in fact, a word. B-E is in our dictionary,

13
00:00:41,000 --> 00:00:44,000
but we wouldn't want to say the answer is B-E,

14
00:00:44,000 --> 00:00:47,000
because that's not a play. That was already on the board.

15
00:00:47,000 --> 00:00:51,000
We can't say our play is we're making this word that's already there.

16
00:00:51,000 --> 00:00:53,000
We've got to add at least one letter.

17
00:00:53,000 --> 00:00:58,000
That's why when we were defining row plays, we said we're adding suffixes,

18
00:00:58,000 --> 00:01:02,000
but we haven't anchored it yet. Anchored is equal to False.

19
00:01:02,000 --> 00:01:09,000
We haven't anchored our potential prefix so far so don't go reporting that prefix as a valid play.

20
00:01:09,000 --> 00:01:14,000
Now in the definition of add_suffixes, we say, okay, if it's the first time through,

21
00:01:14,000 --> 00:01:18,000
we're not anchored so we're not going return BE as a possible play,

22
00:01:18,000 --> 00:01:24,000
but when I do a recursive call to add_suffix, I'll just have the default value and anchor will be true.

23
00:01:24,000 --> 00:01:28,000
I will have played on the anchor, and then I'll be okay from then on.

24
00:01:28,000 --> 00:01:33,000
One additional test here is saying if there are existing letters already on the board,

25
00:01:33,000 --> 00:01:36,000
and you're bumping into them, then you have to count them.

26
00:01:36,000 --> 00:01:40,000
If there's a letter already there, don't report everything up to that letter.

27
00:01:40,000 --> 00:01:46,000
That's taken care of this case when we get up to this C, we can't like say put a T here

28
00:01:46,000 --> 00:01:52,000
and have B-E-T and report that by itself as a word,

29
00:01:52,000 --> 00:01:54,000
because the T is running into the C.

30
00:01:54,000 --> 00:02:00,000
We've got to continue and see what words can we have--we have to account this C here.

31
00:02:00,000 --> 00:02:02,000
Okay. That takes care of adding in the play.

32
00:02:02,000 --> 00:02:06,000
Whether or not we found a valid play to add to our list of results,

33
00:02:06,000 --> 00:02:09,000
we still want to say are we going to continue?

34
00:02:09,000 --> 00:02:12,000
Can we keep going to the right adding on more letters?

35
00:02:12,000 --> 00:02:17,000
Well if the pre we have so far is within the prefixes, then yes we do want to try to continue.

36
00:02:17,000 --> 00:02:22,000
What we'll do is say tell me what square is in the current position in the row.

37
00:02:22,000 --> 00:02:25,000
If it's a letter, try to add suffixes to that--

38
00:02:25,000 --> 00:02:28,000
to the prefix we have so far plus the letter.

39
00:02:28,000 --> 00:02:33,000
If there is a letter already on the board, it's mandatory that we have to use it.

40
00:02:33,000 --> 00:02:36,000
Otherwise, if the square is empty, then we want to figure out what are all

41
00:02:36,000 --> 00:02:38,000
the possible letters that we could place into that empty square.

42
00:02:38,000 --> 00:02:42,000
If the square is an anchor, then the anchor will tell us what the possibilities are.

43
00:02:42,000 --> 00:02:45,000
Remember an anchor is a set of possible letters,

44
00:02:45,000 --> 00:02:49,000
so if the square is an anchor, let's use that as a set of possibilities.

45
00:02:49,000 --> 00:02:52,000
Otherwise, if the square is empty and it's not an anchor,

46
00:02:52,000 --> 00:02:55,000
then any letter is a possibility.

47
00:02:55,000 --> 00:02:59,000
Now we just go through the letters in our hand and say, if that letter is a possibility,

48
00:02:59,000 --> 00:03:06,000
then we want to add a new suffix by saying let's place that letter onto the prefix,

49
00:03:06,000 --> 00:03:10,000
remove the letter form our hand, and continue adding suffixes from there.

50
00:03:10,000 --> 00:03:13,000
When we're done that, return the results. That's it.

51
00:03:13,000 --> 00:03:16,000
Now we're done with that bird, but let's go back, look at our test routine.

52
00:03:16,000 --> 00:03:19,000
We had these tests for legal prefix.

53
00:03:19,000 --> 00:03:26,000
Now, if we go into our interpreter and we run row_plays with the given hand and the row--

54
00:03:26,000 --> 00:03:31,000
that's this row where the hand is maybe ABCEHKN.

55
00:03:31,000 --> 00:03:33,000
This is the result we get. That's an awesome result.

56
00:03:33,000 --> 00:03:36,000
Look, we got the BACKBENCH that we saw before.

57
00:03:36,000 --> 00:03:41,000
We got all the smaller words. We can go through and we can check that each of these makes sense.

58
00:03:41,000 --> 00:03:45,000
They are the right ones. They don't run into any letters or do anything wrong.

59
00:03:45,000 --> 00:03:48,000
It's hard to check that we go all of them right,

60
00:03:48,000 --> 00:03:51,000
but we can still go ahead and make this an assertion.

61
00:03:51,000 --> 00:03:56,000
When we run this, all the tests pass and life is good.
