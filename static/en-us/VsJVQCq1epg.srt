1
00:00:00,160 --> 00:00:03,485
So let's say we have this code where again

2
00:00:03,485 --> 00:00:06,715
R1 is compared to 0, and we branch here

3
00:00:06,715 --> 00:00:12,530
if it's equal to 0. If it's not equal to 0, we do this and branch out. If it

4
00:00:12,530 --> 00:00:15,430
is equal to 0, we do this and continue.

5
00:00:15,430 --> 00:00:18,811
We have seen that this code results in four instruction's

6
00:00:18,811 --> 00:00:22,870
worth of execution, when we have the conditionals MOVs.

7
00:00:22,870 --> 00:00:26,050
Two instructions that actually do the work of ADDIs. And

8
00:00:26,050 --> 00:00:30,700
two instructions that conditionally write results back to R2 and R3. With full

9
00:00:30,700 --> 00:00:35,410
predication, a la the Itanium, we get the condition check

10
00:00:35,410 --> 00:00:40,230
is done using the predicate set instruction that

11
00:00:40,230 --> 00:00:45,780
compares equal zero on R1 and sets P1 and

12
00:00:45,780 --> 00:00:51,280
P2 accordingly. The predicates are always set opposite of each other so

13
00:00:51,280 --> 00:00:57,816
that if R1 is zero P1 is set to true and P2 to false. If

14
00:00:57,816 --> 00:01:04,342
R1 is not equal to 0 then P1 is set to false and P2 is set to true. Now we can

15
00:01:04,342 --> 00:01:10,092
simply do the add i of 1 plus r2 into r2. But we will predicate it with p2,

16
00:01:10,092 --> 00:01:12,276
so that it only gets done if r1 was

17
00:01:12,276 --> 00:01:16,380
not equal to 0. And then, this instruction becomes

18
00:01:17,560 --> 00:01:22,204
exactly what it was here. Except that now it's predicated so that it only gets

19
00:01:22,204 --> 00:01:28,160
done if r1 is equal to 0. So as you can see with this, after we do this

20
00:01:28,160 --> 00:01:31,880
initial instruction that simply sets the predicates, any

21
00:01:31,880 --> 00:01:35,690
code that was here simply gets predicated with

22
00:01:35,690 --> 00:01:38,820
one of the conditions. The opposite condition predicates

23
00:01:38,820 --> 00:01:42,930
the other branch's code. And that means that first

24
00:01:42,930 --> 00:01:45,120
of all we can use the same registers that we

25
00:01:45,120 --> 00:01:47,740
used before. We don't need the additional R4 and R5

26
00:01:47,740 --> 00:01:52,110
that we had in the previous example. And second, we

27
00:01:52,110 --> 00:01:56,442
still do have the work of both parts. But there

28
00:01:56,442 --> 00:01:58,861
is no additional work to now move the results into

29
00:01:58,861 --> 00:02:02,680
the registers, the type of destination registers. So the overhead

30
00:02:02,680 --> 00:02:05,160
here is kind of similar to what we had with branches.

31
00:02:05,160 --> 00:02:09,008
With branches, we needed to have the branch, and then the

32
00:02:09,008 --> 00:02:15,168
code from either pass. Here we have the condition set, followed from the

33
00:02:15,168 --> 00:02:18,910
code from both paths. So the only really overhead that we have in terms

34
00:02:18,910 --> 00:02:24,260
of executing more instructions, comes from doing the work of both paths instead

35
00:02:24,260 --> 00:02:26,150
of just one. But there are no

36
00:02:26,150 --> 00:02:28,840
additional instructions to select between the results.
