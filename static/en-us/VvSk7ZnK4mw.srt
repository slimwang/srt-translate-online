1
00:00:00,240 --> 00:00:03,580
So let's answer our SMT
versus dual-core quiz.

2
00:00:03,580 --> 00:00:06,654
We have a floating-point
intensive thread.

3
00:00:06,654 --> 00:00:12,950
It's going to use pretty much these two
issue slots and very rarely use these.

4
00:00:12,950 --> 00:00:16,830
And then we have an integer-only thread
that only gets to use these two.

5
00:00:16,830 --> 00:00:19,360
So, with a dual-core processor,

6
00:00:19,360 --> 00:00:24,480
one of the cores really gets to be
2-issue plus maybe a little bit.

7
00:00:24,480 --> 00:00:28,800
Another one gets to be just 2-issue
because it never sees floating-point

8
00:00:28,800 --> 00:00:32,549
instructions that it needs
to have more than 2-issue.

9
00:00:32,549 --> 00:00:37,411
In SMT however,
we would be able to do two

10
00:00:37,411 --> 00:00:42,980
instructions from this thread and two
instructions from this thread per cycle.

11
00:00:42,980 --> 00:00:45,990
So we will be getting very
similar performance, and

12
00:00:45,990 --> 00:00:51,400
as we have seen, then this is the more
effective approach because the cost

13
00:00:51,400 --> 00:00:56,230
that we are getting here,
versus here, is significantly lower.

14
00:00:56,230 --> 00:01:00,440
So we get similar performance for
a almost half the cost here.

15
00:01:00,440 --> 00:01:04,780
Now what will happen, however,
if we didn't have a floating-point

16
00:01:04,780 --> 00:01:08,400
intensive thread and
instead got two of these?

17
00:01:08,400 --> 00:01:14,600
In that case, the two core is slightly
more cost effective because it gets

18
00:01:14,600 --> 00:01:19,880
the 2-issue performance in each core for
twice the cost of one core.

19
00:01:19,880 --> 00:01:23,870
Whereas this gets us
the performance of a single core.

20
00:01:23,870 --> 00:01:27,350
because both of these are sharing
the 2-issue slots for

21
00:01:27,350 --> 00:01:29,220
a cost that is more than one core.

22
00:01:29,220 --> 00:01:33,350
So in that case, this will be
the more cost effective option, so

23
00:01:33,350 --> 00:01:38,330
as you can see it's not that SMT
always wins over multiple cores,

24
00:01:38,330 --> 00:01:42,260
it's that it depends on exactly what
types of programs we have and exactly

25
00:01:42,260 --> 00:01:46,030
what's the distribution of issues among
units and how different applications

26
00:01:46,030 --> 00:01:49,880
are using it So the floating
point intensive, an integer only.

27
00:01:49,880 --> 00:01:52,580
And this type of a split
between issues slots

28
00:01:52,580 --> 00:01:56,130
is an extreme example that
makes the SMT look really good.
