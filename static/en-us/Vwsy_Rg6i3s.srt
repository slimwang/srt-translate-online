1
00:00:00,600 --> 00:00:03,198
Up to this point our requests
have been working fine, but

2
00:00:03,198 --> 00:00:05,970
there's potentially
a big security problem.

3
00:00:07,002 --> 00:00:09,200
If you've been paying attention,
our requests for

4
00:00:09,200 --> 00:00:11,770
this app are being sent using HTTP.

5
00:00:12,830 --> 00:00:15,710
We can see this if we go
to the app constants file.

6
00:00:16,890 --> 00:00:19,300
We notice that our API scheme is HTTP.

7
00:00:20,430 --> 00:00:25,400
And this scheme is what's being used,
here we go,

8
00:00:25,400 --> 00:00:30,290
in the tndbURLFromParameters that's
using our ApiScheme, which is HTTP.

9
00:00:32,040 --> 00:00:34,690
Now, while we've defined
the proper settings

10
00:00:34,690 --> 00:00:39,410
in the info.plist file to allow for
this, there's still a big security risk.

11
00:00:40,460 --> 00:00:44,086
Especially if we're making
requests that send usernames and

12
00:00:44,086 --> 00:00:48,351
passwords as parameters of URL,
like we did when we logged into the API.

13
00:00:49,705 --> 00:00:50,835
Let me show you what I'm talking about.

14
00:00:51,875 --> 00:00:54,145
Let's go back to
the LoginViewController and

15
00:00:54,145 --> 00:00:57,605
let's find that loginWithToken method,
here we go.

16
00:00:57,605 --> 00:00:59,875
Let's add a print statement
that shows the URL for

17
00:00:59,875 --> 00:01:05,150
the login request that we're making and
our loginWithToken method.

18
00:01:05,150 --> 00:01:09,660
When I click the login button,
okay here's our URL, so

19
00:01:09,660 --> 00:01:12,490
I've clicked the login button and
we can see that the URL's being

20
00:01:12,490 --> 00:01:16,810
printed where the username and
password are sent as plain text.

21
00:01:16,810 --> 00:01:21,110
So if somebody was watching the network
traffic going from my phone to a server,

22
00:01:21,110 --> 00:01:23,240
or even from my simulator to a server,

23
00:01:23,240 --> 00:01:26,660
they could see these values and
this is obviously very bad.

24
00:01:27,780 --> 00:01:29,050
Let me show you how this might look for

25
00:01:29,050 --> 00:01:31,950
somebody who's snooping
on network traffic.

26
00:01:31,950 --> 00:01:35,640
I'm going to do this using
an application called Charles.

27
00:01:35,640 --> 00:01:38,360
You don't need to install Charles
yourself, I'm just going to use it for

28
00:01:38,360 --> 00:01:39,530
this example.

29
00:01:39,530 --> 00:01:42,050
In Charles we can see all the web
traffic that's incoming and

30
00:01:42,050 --> 00:01:44,410
outgoing on this particular machine.

31
00:01:44,410 --> 00:01:47,040
So I want to see the requests that are
being sent to the movie database, and

32
00:01:47,040 --> 00:01:49,150
as you can see,
we've made a request recently.

33
00:01:49,150 --> 00:01:52,350
If I select this request and
then I go look at the summary,

34
00:01:52,350 --> 00:01:56,040
I can actually see what the traffic
looks like as it's leaving my machine.

35
00:01:56,040 --> 00:01:57,450
So I can take a closer look, and

36
00:01:57,450 --> 00:02:01,340
here's our validate_with_login method,
I can actually see my username here, and

37
00:02:01,340 --> 00:02:05,370
then here's my password in plain
daylight for everyone to see.

38
00:02:05,370 --> 00:02:07,490
So we definitely need to fix this,
but thankfully,

39
00:02:07,490 --> 00:02:10,465
it can be done really quickly
since the movie database provides

40
00:02:10,465 --> 00:02:12,725
us a way to send requests
like these securely.

41
00:02:12,725 --> 00:02:17,725
If we go back to the documentation
we can take a look at this HTTPS/SSL

42
00:02:17,725 --> 00:02:22,225
section and, as we can see, it simply
tells us instead of making an HTTP

43
00:02:22,225 --> 00:02:26,500
call ,we just need to make
an HTTPS call, and then we're set.

44
00:02:26,500 --> 00:02:29,880
What this is effectively going to
do is by making the HTTPS calls,

45
00:02:29,880 --> 00:02:33,443
it's going to encrypt all the data
that's being sent from our apps so

46
00:02:33,443 --> 00:02:34,927
that nobody can snoop on us.

47
00:02:34,927 --> 00:02:38,506
If you want to hear more about HTTPS,
now I put a link in the instructor notes

48
00:02:38,506 --> 00:02:41,760
to our web development
discussions on the topic.

49
00:02:41,760 --> 00:02:44,880
Okay, so to fix the problem we
just need to make one small change

50
00:02:44,880 --> 00:02:46,190
in the constants.swf file.

51
00:02:48,580 --> 00:02:51,170
Let's change our scheme
from HTTP to HTTPS.

52
00:02:53,380 --> 00:02:54,660
Now we'll build this project.

53
00:02:56,075 --> 00:02:56,755
Let's go and log in.

54
00:02:56,755 --> 00:03:00,415
Now I'll go ahead and switch back over
to Charles and you'll see that we have

55
00:03:00,415 --> 00:03:05,455
the HTTP request that we previously
did and then these HTTPS requests.

56
00:03:05,455 --> 00:03:09,145
And as you can see, since we're using
https, we don't really know anything

57
00:03:09,145 --> 00:03:11,855
in terms of snooping about
what's happening in our request,

58
00:03:11,855 --> 00:03:15,695
whereas we can still see things that
are being passed with this request.

59
00:03:15,695 --> 00:03:18,165
The best part about all of this is
we're pretty much getting it all for

60
00:03:18,165 --> 00:03:21,740
free because the movie
database supports HTTPS.

61
00:03:21,740 --> 00:03:24,385
So, when in doubt, just use HTTPS.
