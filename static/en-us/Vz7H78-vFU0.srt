1
00:00:00,012 --> 00:00:03,920
So I'm almost ready to talk about how,

2
00:00:03,920 --> 00:00:08,440
what I did in this RecyclerView Part 3,
and that was to handle items, selection,

3
00:00:08,440 --> 00:00:13,950
and choice, which is one of those
things that RecyclerView is missing.

4
00:00:13,950 --> 00:00:17,190
So what I did was I created this
thing called ItemChoiceManager, and

5
00:00:17,190 --> 00:00:21,970
this is not a complete implementation
of item choice and selection.

6
00:00:21,970 --> 00:00:26,380
It is liberally copied from what
ListView actually does internally, and

7
00:00:26,380 --> 00:00:30,270
you can see it actually uses a whole
bunch of ListView constants.

8
00:00:30,270 --> 00:00:34,010
But basically it takes advantage
of sparse pooling arrays and

9
00:00:34,010 --> 00:00:40,000
long sparse arrays and it, to store the
check states and the checked ID states.

10
00:00:40,000 --> 00:00:43,720
And the big code that it probably, you
know, takes the most from ListView is

11
00:00:43,720 --> 00:00:48,020
actually how it deals with
checking positions by ID.

12
00:00:48,020 --> 00:00:50,780
This list I did not write for this.

13
00:00:50,780 --> 00:00:53,560
Now, this is actually fairly
complicated if you see what it's doing.

14
00:00:53,560 --> 00:00:58,220
It checks for nearby IDs and
searches through the list

15
00:00:58,220 --> 00:01:02,590
to try to confirm these check positions,
and I think this kind of code is one of

16
00:01:02,590 --> 00:01:07,760
the reasons why the framework team
was happy to see this functionality

17
00:01:07,760 --> 00:01:10,520
taken out of RecyclerView, because
it is really tricky to implement.

18
00:01:11,780 --> 00:01:13,620
And what we do actually for this,

19
00:01:13,620 --> 00:01:15,730
we need to know when
the ViewHolder is bound.

20
00:01:15,730 --> 00:01:20,930
So what we do is we actually have this
work together in conjunction with

21
00:01:20,930 --> 00:01:24,400
the code that is in
the forecast adaptor.

22
00:01:24,400 --> 00:01:29,010
In fact, in a weird way, this is sort of
a helper for the forecast adaptor far

23
00:01:29,010 --> 00:01:33,920
more than it is actually a helper for
RecyclerView.

24
00:01:33,920 --> 00:01:35,890
It also does a couple
of nice things here.

25
00:01:35,890 --> 00:01:39,360
It actually restores and
saves instance states.

26
00:01:39,360 --> 00:01:42,840
This I did right, mostly because I was,

27
00:01:42,840 --> 00:01:45,710
I wanted to kind of
automatically do this.

28
00:01:45,710 --> 00:01:51,410
And we don't automatically have a way of
saving these sparse arrays into bundles,

29
00:01:51,410 --> 00:01:54,110
but we do have the way,
a way of saving them into parcels.

30
00:01:54,110 --> 00:01:56,490
So I just implemented that here.

31
00:01:57,740 --> 00:02:00,340
Just another function
that can be called, so

32
00:02:00,340 --> 00:02:04,820
that we are saving these checked items.

33
00:02:04,820 --> 00:02:07,291
And then finally,
getSelectedItemPosition,

34
00:02:07,291 --> 00:02:10,904
very similar to ListView, returns
the first item that is selected, so

35
00:02:10,904 --> 00:02:14,160
if you have multiple items like it,
it will return one.

36
00:02:14,160 --> 00:02:15,640
Otherwise, it will return zero.

37
00:02:15,640 --> 00:02:20,041
I did not implement the modal selection
stuff, so there is none of this,

38
00:02:20,041 --> 00:02:23,320
you know, choiceMode multiple or
whatever.

39
00:02:23,320 --> 00:02:26,750
But I do support a multiple modal here,
and you get an exception if you try to

40
00:02:26,750 --> 00:02:28,330
use it, but
it does support both multiple and

41
00:02:28,330 --> 00:02:32,260
single choice, basically adding that
functionality into RecyclerView.

42
00:02:32,260 --> 00:02:34,940
And then so
the interesting stuff, of course,

43
00:02:34,940 --> 00:02:38,150
is also what happens
inside of ForecastAdapter.

44
00:02:38,150 --> 00:02:40,640
And this is pretty straightforward.

45
00:02:40,640 --> 00:02:45,660
Whenever we bind the ViewHolder,

46
00:02:45,660 --> 00:02:51,020
we also have to make sure that
we call ICM.onBindViewHolder,

47
00:02:51,020 --> 00:02:55,300
same thing with onRestoreInstanceState
and on SaveInstanceState.

48
00:02:55,300 --> 00:03:00,830
And we also added some helper functions,
so that other things

49
00:03:00,830 --> 00:03:04,710
didn't have to call all the way in and
get access to the ItemChoiceManager.

50
00:03:04,710 --> 00:03:10,270
So, like, getSelectedItemPosition,
et cetera, et cetera, is also supported.

51
00:03:10,270 --> 00:03:13,310
We also added this nice
selectView function here.

52
00:03:13,310 --> 00:03:15,050
And this is used to
implement a feature that I

53
00:03:15,050 --> 00:03:16,250
thought was really really important.

54
00:03:16,250 --> 00:03:19,440
And so it's one of the other things
I sort of slid into this one.

55
00:03:19,440 --> 00:03:21,230
We have this concept of
auto selecting a view.

56
00:03:21,230 --> 00:03:22,255
I kind of threw that in here,

57
00:03:22,255 --> 00:03:24,380
because it was really unfortunate
to have views showing up.

58
00:03:24,380 --> 00:03:26,860
So what I do is I wait to
see that we have children,

59
00:03:26,860 --> 00:03:30,504
like we've been doing with
these OnPreDrawListeners, and

60
00:03:30,504 --> 00:03:34,628
then once I know we have children,
then I go in SelectView,

61
00:03:34,628 --> 00:03:39,110
either the position, if there already
is one, or if there isn't a position,

62
00:03:39,110 --> 00:03:44,020
then we go and select the first one,
so that we have something selected,

63
00:03:44,020 --> 00:03:46,810
which just looks a lot nicer
when you're in tablet mode.

64
00:03:46,810 --> 00:03:50,687
So this is just a trick or a hack or a,
you know, reasonable way of doing it,

65
00:03:50,687 --> 00:03:53,397
depending on how you want
to look at things, but, so

66
00:03:53,397 --> 00:03:55,615
we're also taking advantage of that, and

67
00:03:55,615 --> 00:03:59,560
that's the reason why we exposed
that SelectView functionality.

68
00:03:59,560 --> 00:04:02,970
And other than that, it, you know,
looks pretty nice, works pretty well.

69
00:04:02,970 --> 00:04:04,960
So that's a big piece of RecyclerView.

70
00:04:04,960 --> 00:04:08,210
Now, the reason I didn't teach this, and
I didn't have you guys code this up,

71
00:04:08,210 --> 00:04:12,300
is because I expect, in the next year or
so, we're going to have a better

72
00:04:12,300 --> 00:04:15,065
solution if we're doing this kind of
item selection within RecyclerView.

73
00:04:15,065 --> 00:04:18,470
RecyclerView is under heavy development,
and

74
00:04:18,470 --> 00:04:21,990
there's all sorts of great stuff that's
gone into it in the last six months.

75
00:04:21,990 --> 00:04:25,950
And I suspect more and
more of these things that are missing

76
00:04:25,950 --> 00:04:31,830
from ListView are actually going to be
in RecyclerView in one way or another.

77
00:04:31,830 --> 00:04:34,990
So here is my stat at doing
it in a reasonable way.

78
00:04:34,990 --> 00:04:39,180
Perhaps the framework team will
come up with something better.

79
00:04:39,180 --> 00:04:43,260
So that is finishing our
work on RecyclerView.

80
00:04:43,260 --> 00:04:45,960
Again, you know,
take a look at those changes.

81
00:04:45,960 --> 00:04:47,650
There's some interesting code in there.

82
00:04:47,650 --> 00:04:50,460
The next thing we're going to get
into is scrolling in parallel.
