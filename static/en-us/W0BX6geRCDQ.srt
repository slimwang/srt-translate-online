1
00:00:00,350 --> 00:00:04,780
Another natural question can be, can processes interact?

2
00:00:04,780 --> 00:00:07,380
And the simple answer to this is yes.

3
00:00:07,380 --> 00:00:10,860
An operating system must provide mechanisms to allow processes to

4
00:00:10,860 --> 00:00:12,550
interact with one another.

5
00:00:12,550 --> 00:00:13,780
And today in fact, more and

6
00:00:13,780 --> 00:00:18,840
more of the applications we see are actually structured as multiple processes.

7
00:00:18,840 --> 00:00:23,230
So these multiple processes have to be able to interact to contribute to

8
00:00:23,230 --> 00:00:27,360
a common goal of a more complex multi-process application.

9
00:00:27,360 --> 00:00:31,150
For instance, here's an example of a web application consisting of

10
00:00:31,150 --> 00:00:34,320
two processes on the same machine.

11
00:00:34,320 --> 00:00:36,020
The first one is the web server,

12
00:00:36,020 --> 00:00:39,430
the front-end, that accepts the customer request.

13
00:00:39,430 --> 00:00:41,010
And the second one is the backend,

14
00:00:41,010 --> 00:00:45,260
the database that stores customer profiles and other information.

15
00:00:45,260 --> 00:00:49,580
This is a very common case in many enterprise and web applications.

16
00:00:49,580 --> 00:00:52,360
So, how may these processes interact?

17
00:00:52,360 --> 00:00:57,400
Now, before we answer that, remember that the operating systems

18
00:00:57,400 --> 00:01:02,510
go through a great deal to protect and isolate processes from one another.

19
00:01:02,510 --> 00:01:04,620
Each of them is a separate address space.

20
00:01:04,620 --> 00:01:08,590
They control the amount of CPU each process gets,

21
00:01:08,590 --> 00:01:12,940
which memory is allocated, and accessible to each process.

22
00:01:12,940 --> 00:01:17,550
So these communication mechanisms that we will talk about somehow have to be

23
00:01:17,550 --> 00:01:20,450
built around those protection mechanisms.

24
00:01:20,450 --> 00:01:25,270
These kinds of mechanisms are called inter-process communication mechanisms, or

25
00:01:25,270 --> 00:01:27,130
we refer to them as IPC.

26
00:01:27,130 --> 00:01:31,560
The IPC mechanisms help transfer data and information from one

27
00:01:31,560 --> 00:01:35,680
address space to another, while continuing to maintain the protection and

28
00:01:35,680 --> 00:01:39,660
isolation that operating systems are trying to enforce.

29
00:01:39,660 --> 00:01:42,890
Also, different types of interactions between processes may

30
00:01:42,890 --> 00:01:44,360
exhibit different properties.

31
00:01:45,460 --> 00:01:50,750
Periodic data exchanges, continuous stream of data flowing between the processes

32
00:01:50,750 --> 00:01:56,300
or coordinated at the, to some shared single piece of information.

33
00:01:56,300 --> 00:01:57,980
Because of all these differences,

34
00:01:57,980 --> 00:02:03,560
IPC mechanisms need to provide flexibility as well as clearly performance.

35
00:02:03,560 --> 00:02:09,270
One mechanism that operating systems support is message passing IPC.

36
00:02:09,270 --> 00:02:12,530
The operating system establishes a communication channel,

37
00:02:12,530 --> 00:02:17,290
like a shared buffer for instance, and the processes interact with it

38
00:02:17,290 --> 00:02:22,730
by writing or sending a message into that buffer.

39
00:02:22,730 --> 00:02:28,460
Or, reading or receiving a message from that shared communication channel.

40
00:02:28,460 --> 00:02:32,830
So, it's message passing because every process has to put the information that

41
00:02:32,830 --> 00:02:36,920
it wants to send to the other process, explicitly in a message and

42
00:02:36,920 --> 00:02:41,420
then to send it to this dedicated communication channel.

43
00:02:41,420 --> 00:02:45,200
The benefits of this approach is that it's really the operating system who will

44
00:02:45,200 --> 00:02:49,980
manage this channel, and it's the operating system that provides the exact same

45
00:02:49,980 --> 00:02:53,350
APIs, the exact same system calls for writing or

46
00:02:53,350 --> 00:02:58,600
sending data, and the reading or receiving data from this communication channel.

47
00:02:58,600 --> 00:03:01,220
The downside is the overhead.

48
00:03:01,220 --> 00:03:05,090
Every single piece of information that we want to pass between these two

49
00:03:05,090 --> 00:03:10,630
processes we have to copy from the user space of the first

50
00:03:10,630 --> 00:03:15,680
process into this channel that's sitting in the OS, in the kernel memory.

51
00:03:15,680 --> 00:03:20,640
And then back into the address space of the second process.

52
00:03:20,640 --> 00:03:24,810
The other type of IPC mechanism is what we call shared memory IPC.

53
00:03:26,090 --> 00:03:29,340
The way this works is the operating system establishes the shared

54
00:03:29,340 --> 00:03:34,920
memory channel, and then it maps it into the address space of both processes.

55
00:03:34,920 --> 00:03:39,520
The processes are then allowed to directly read and write from this memory, as

56
00:03:39,520 --> 00:03:44,010
if they would to any memory location that's part of their virtual address space.

57
00:03:44,010 --> 00:03:48,020
So the operating system is completely out of the way in this case.

58
00:03:48,020 --> 00:03:50,880
That in fact is the main advantage of this type of IPC.

59
00:03:50,880 --> 00:03:56,190
That the operating system is not in the fast path of the communication.

60
00:03:56,190 --> 00:04:00,830
So the processes, while they're communicating are not going to incur any kind of

61
00:04:00,830 --> 00:04:02,900
overheads from the operating system.

62
00:04:02,900 --> 00:04:07,610
The disadvantage of this approach is because the operating system is out of

63
00:04:07,610 --> 00:04:10,990
the way it no longer supports fixed and

64
00:04:10,990 --> 00:04:15,210
well defined APIs how this particular shared memory region is used.

65
00:04:16,300 --> 00:04:20,630
For that reason, its usage sometimes becomes more error prone, or

66
00:04:20,630 --> 00:04:24,690
developers simply have to re-implement code to use this

67
00:04:24,690 --> 00:04:26,630
shared memory region in a correct way.
