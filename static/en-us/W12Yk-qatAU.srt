1
00:00:00,390 --> 00:00:03,623
Within 3JS, you can create a set of particles by using the particle system

2
00:00:03,623 --> 00:00:07,520
object. The code here shows one way to make some particles. For the material,

3
00:00:07,520 --> 00:00:11,618
we load a disc texture that is transparent around the edges. Using this texture

4
00:00:11,618 --> 00:00:14,786
and particle basic material says to make a billboard type of object that points

5
00:00:14,786 --> 00:00:18,880
towards the camera. In other words, we want to see this sprite texture always

6
00:00:18,880 --> 00:00:22,498
facing towards us. Setting size attenuation to false means we that want each

7
00:00:22,498 --> 00:00:27,540
particle to have a constant size on the screen. Setting the size to 35 means

8
00:00:27,540 --> 00:00:31,683
that we want the particle to be 35 pixels wide. The next bit is to make the

9
00:00:31,683 --> 00:00:34,177
particle system object itself by using a set of points in the particle

10
00:00:34,177 --> 00:00:38,746
material. By setting sort particles to true, this means we want the particles

11
00:00:38,746 --> 00:00:42,488
in the system to be sorted with respect to the camera's view. This is

12
00:00:42,488 --> 00:00:46,350
important, as otherwise blending will not occur properly. When you have objects

13
00:00:46,350 --> 00:00:48,870
with transparency, you need to draw them in a back to front order so that they

14
00:00:48,870 --> 00:00:53,336
combine correctly. The geometry object you pass into a particle system is a

15
00:00:53,336 --> 00:00:57,275
list of vertices. In this example, 8,000 particles are being created and added

16
00:00:57,275 --> 00:01:01,756
to the scene. I randomly generate these vertices within a box going from

17
00:01:01,756 --> 00:01:06,206
negative 1,000 to 1,000 and x, y, and z. And check that each is inside a sphere

18
00:01:06,206 --> 00:01:10,385
of radius 1,000. If not I ask for another random point. There are more

19
00:01:10,385 --> 00:01:13,283
efficiently is to generate to random points in a sphere, but this is quick to

20
00:01:13,283 --> 00:01:17,293
remember in code. Try the demo out, if you dolly out far enough, you'll see the

21
00:01:17,293 --> 00:01:18,580
sphere formed.
