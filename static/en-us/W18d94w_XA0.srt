1
00:00:00,000 --> 00:00:06,166
And the answer here is clearly that halt of inverse halt and inverse halt returns no,

2
00:00:06,167 --> 00:00:11,732
because that is the way that we constructed inverse halt. So if inverse halt receives an input,

3
00:00:11,733 --> 00:00:19,566
it only terminates if halt of the program as a program and the program as the input returns no.

4
00:00:19,567 --> 00:00:25,166
Otherwise, it would have gone into an infinite loop. And now let's think for a second about what that means.

5
00:00:25,167 --> 00:00:33,532
So halt of inverse halt and inverse halt says no. The first time inverse halt is a program, and the second time here,

6
00:00:33,533 --> 00:00:38,999
it's the input. So what halt's saying no basically means is the following:

7
00:00:39,000 --> 00:00:46,532
If I take inverse halt and give it inverse halt as an input, then this does not terminate, because halt says no,

8
00:00:46,533 --> 00:00:50,432
and we assume that halt is a correct algorithm. But that's a bit strange, isn't it?

9
00:00:50,433 --> 00:00:59,666
But now wait a minute: We just said that running the program inverse halt of inverse halt actually halts.

10
00:00:59,667 --> 00:01:07,832
But when we look at the implication of this, then it tells us that inverse halt, when run on inverse halt, does not halt.

11
00:01:07,833 --> 00:01:12,732
So, something doesn't seem quite right here. Which one is it? Does it stop or does it not stop?

12
00:01:12,733 --> 00:01:16,667
Before we go deeper into that, let's ask the question exactly the other way around.
