1
00:00:00,460 --> 00:00:03,310
So, here we are in the Jenkins console.

2
00:00:03,310 --> 00:00:06,900
Even without logging in, we can look at
various projects that it's been set up

3
00:00:06,900 --> 00:00:09,140
to build, like adventure.

4
00:00:09,140 --> 00:00:12,780
This project is watching a GitHub
repo for another Udacity course, and

5
00:00:12,780 --> 00:00:14,070
every time a student checks in,

6
00:00:14,070 --> 00:00:16,920
in addition to that repo,
this Jenkins instance recompiles it.

7
00:00:16,920 --> 00:00:20,250
You can see the history of it
over here under build history.

8
00:00:20,250 --> 00:00:22,650
Now, if we go back to the main page, and

9
00:00:22,650 --> 00:00:27,110
login, then we'll be able to
access the server wide settings.

10
00:00:27,110 --> 00:00:28,060
For instance,

11
00:00:28,060 --> 00:00:32,439
here are the security settings that let
us say what users are allowed to do.

12
00:00:32,439 --> 00:00:34,780
And over here is the list of plugins.

13
00:00:34,780 --> 00:00:37,420
Jenkins is kind of
a plugin based system.

14
00:00:37,420 --> 00:00:40,110
Everything you want to do,
such as pull from GitHub or

15
00:00:40,110 --> 00:00:44,600
run JUnit tests or various other
things is there on a plugin.

16
00:00:44,600 --> 00:00:45,910
Now that we're logged in,

17
00:00:45,910 --> 00:00:48,440
let's take another look at
that adventure build target.

18
00:00:48,440 --> 00:00:51,640
Under the project configuration,
you can see the name,

19
00:00:51,640 --> 00:00:55,430
there can be a description, here's
what repository it's gotten from with

20
00:00:55,430 --> 00:00:59,170
a GitHub URL here, and
down here is the build schedule.

21
00:00:59,170 --> 00:01:02,395
It says how often the build can be
run if Jenkins notices changes.

22
00:01:02,395 --> 00:01:07,020
H/15 in this field means that it
should be run every 15 minutes.

23
00:01:07,020 --> 00:01:12,330
And down here you can see the build
script that's actually being run.

24
00:01:12,330 --> 00:01:14,150
Turns out that this is just a mockup.

25
00:01:14,150 --> 00:01:17,490
And it runs the disk usage,
or du Unix command.

26
00:01:17,490 --> 00:01:19,910
If this were a real build it would
probably run compilation and

27
00:01:19,910 --> 00:01:21,420
packaging here.

28
00:01:21,420 --> 00:01:24,320
And then if we look in
an individual build

29
00:01:24,320 --> 00:01:28,160
at the console output we can
see the output of that script.

30
00:01:28,160 --> 00:01:32,072
Having this kind of log from every
compilation is really handy.

31
00:01:32,072 --> 00:01:35,160
Suppose that something had
gone wrong ten builds ago,

32
00:01:35,160 --> 00:01:38,830
would you rather be diagnosing
that from someone's email saying,

33
00:01:38,830 --> 00:01:41,330
something broke and I don't know what?

34
00:01:41,330 --> 00:01:43,890
Or from a log file,
that says exactly what's going on?
