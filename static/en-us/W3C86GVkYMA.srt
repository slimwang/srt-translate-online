1
00:00:00,270 --> 00:00:02,210
Alright, we're back, what's the answer Michael?

2
00:00:02,210 --> 00:00:04,880
>> So, you want me to work it through?

3
00:00:04,880 --> 00:00:05,570
>> Sure.

4
00:00:05,570 --> 00:00:09,980
>> So what I did first is I made it to, I extended the table that you had.

5
00:00:09,980 --> 00:00:10,770
>> Okay.

6
00:00:10,770 --> 00:00:12,970
>> To include each of these, the output for each of

7
00:00:12,970 --> 00:00:15,220
these three functions. What I'm basically, what I like to do is

8
00:00:15,220 --> 00:00:19,180
compute the squared error for each of these three functions on that

9
00:00:19,180 --> 00:00:22,460
data and then choose the one that has the lowest squared error.

10
00:00:22,460 --> 00:00:23,870
>> Make total sense to me. Sounds good

11
00:00:23,870 --> 00:00:25,310
enough to be an algorithm. So you want me

12
00:00:25,310 --> 00:00:25,940
to write out the table?

13
00:00:25,940 --> 00:00:28,720
>> Well, I mean, I started to do that, and then there

14
00:00:28,720 --> 00:00:30,870
was like one too many steps, and I just threw out my

15
00:00:30,870 --> 00:00:33,980
hand and just wrote a program. Okay, so, we'll just say"

16
00:00:33,980 --> 00:00:37,790
Insert code here", because that's what you did, that was the step.

17
00:00:37,790 --> 00:00:38,780
>> And, what did your code tell you?

18
00:00:38,780 --> 00:00:40,900
>> Well, let me start with the constant function, because that's the

19
00:00:40,900 --> 00:00:44,630
easiest piece of code. So, I'm saying what's the difference between each

20
00:00:44,630 --> 00:00:47,340
of the D values and two. Squaring it all and summing it

21
00:00:47,340 --> 00:00:52,050
up and I get 19. And I can do the same thing,

22
00:00:54,200 --> 00:00:59,170
instead of using two I use x over three take the difference of that

23
00:00:59,170 --> 00:01:03,680
to the D values and square that and I get 19 point four, four, four,

24
00:01:03,680 --> 00:01:08,510
four, four, four. Then I can do, right, so now at this point I'm

25
00:01:08,510 --> 00:01:12,790
rock and rolling. I can actually just substitute in my nine, and I get 12?

26
00:01:12,790 --> 00:01:15,280
>> Not, not something-odd 12?

27
00:01:15,280 --> 00:01:19,430
>> No, just 12, so the error's 12. So that has the smallest error.

28
00:01:19,430 --> 00:01:22,120
So even though that's sort of a crazy, like, stripy function

29
00:01:22,120 --> 00:01:24,990
right. Like, it increases linearly and then it resets at 9.

30
00:01:24,990 --> 00:01:25,180
>> Mmhmm.

31
00:01:25,180 --> 00:01:27,650
>> It actually fits the state of the best.

32
00:01:27,650 --> 00:01:33,710
>> That is correct. Your code is correct, Michael. Well done. Well actually,

33
00:01:33,710 --> 00:01:36,410
looking at this data that sort of makes sense to me, right. Because

34
00:01:36,410 --> 00:01:40,420
if you look at the first three examples. Of the data, the outputs

35
00:01:40,420 --> 00:01:45,140
are very close. But the outputs of the next three are much bigger, and

36
00:01:45,140 --> 00:01:47,930
by doing a mod nine, what you effectively do is

37
00:01:47,930 --> 00:01:52,150
say, this is the identity function above this line. And then

38
00:01:52,150 --> 00:01:54,760
below the line, it's as if I'm sort of subtracting

39
00:01:54,760 --> 00:01:56,680
nine from all of them, and that makes them closer together.

40
00:01:56,680 --> 00:01:57,380
>> Hm.

41
00:01:57,380 --> 00:01:58,610
>> And so it just happens to work out

42
00:01:58,610 --> 00:02:00,910
here. But surely that's just because we came up

43
00:02:00,910 --> 00:02:03,290
with a bad constant function and a bad linear

44
00:02:03,290 --> 00:02:05,170
function. Do you think there's a better linear function?

45
00:02:05,170 --> 00:02:08,220
>> So I mean because it's the squared

46
00:02:08,220 --> 00:02:10,560
error, we're really just talking about linear regression.

47
00:02:10,560 --> 00:02:10,660
>> Right.

48
00:02:10,660 --> 00:02:13,160
>> So I can just run linear regression. So I get

49
00:02:13,160 --> 00:02:18,885
an intercept of 0.9588 And a, and a slope of 0.1647.

50
00:02:18,885 --> 00:02:19,270
>> Okay

51
00:02:19,270 --> 00:02:22,070
>> So that's, so that's my linear function of choice.

52
00:02:22,070 --> 00:02:24,474
>> Okay, so that's, what was, what was that again?

53
00:02:24,474 --> 00:02:31,816
>> So x times, you know, it's like a six, I guess, like 0.165 probably.

54
00:02:31,816 --> 00:02:32,973
>> 0.165x

55
00:02:32,973 --> 00:02:33,395
>> Plus

56
00:02:33,395 --> 00:02:33,819
>> Mm hm.

57
00:02:33,819 --> 00:02:36,940
>> Plus 0.959. So that's

58
00:02:36,940 --> 00:02:38,540
our function, that's our best linear function,

59
00:02:38,540 --> 00:02:40,490
the function that minimizes greater. So it better

60
00:02:40,490 --> 00:02:44,640
end up being, it better end up being less than 19.4, or I'm a liar.

61
00:02:44,640 --> 00:02:45,211
>> Mm-hm.

62
00:02:45,211 --> 00:02:47,680
>> And now I need to take the difference

63
00:02:47,680 --> 00:02:52,935
between that and D square it, and sum. 15.7.

64
00:02:52,935 --> 00:02:59,350
>> Hm. So that gives you 15, I'm going to say 15.8. So that is better.

65
00:02:59,350 --> 00:03:02,050
>> Yeah, so it's better than the X over three,

66
00:03:02,050 --> 00:03:03,870
but it's also worse than the mod nie.

67
00:03:03,870 --> 00:03:04,110
>> Hm.

68
00:03:04,110 --> 00:03:08,750
>> and the best constant function, has to be worse, because the linear

69
00:03:08,750 --> 00:03:13,110
functions include the constant functions as a subset, so this is, that 15.8 is.

70
00:03:13,110 --> 00:03:16,100
Is better than the best constant function too. Oh its easy to do

71
00:03:16,100 --> 00:03:19,280
though right? Because the best constant function is just the mean of the data.

72
00:03:19,280 --> 00:03:22,110
>> What is the mean of the data?

73
00:03:22,110 --> 00:03:22,410
>> 2.17.

74
00:03:22,410 --> 00:03:23,740
>> huh two is pretty close.

75
00:03:23,740 --> 00:03:25,360
>> Yeah that's interesting.

76
00:03:25,360 --> 00:03:26,020
>> Well that's

77
00:03:26,020 --> 00:03:27,120
>> Kind of in the middle of the pack

78
00:03:27,120 --> 00:03:27,480
I guess.

79
00:03:27,480 --> 00:03:29,560
>> That sort of works right because two the error

80
00:03:29,560 --> 00:03:32,010
for two was actually lower than the error for x divided

81
00:03:32,010 --> 00:03:34,055
by three. And for what it's worth the error for

82
00:03:34,055 --> 00:03:40,143
2.17 as constant function to 2.2 is 8.8, 18.8, 18.8 sorry.

83
00:03:40,143 --> 00:03:42,149
>> Yeah, you're not the [INAUDIBLE].

84
00:03:42,149 --> 00:03:43,770
>> Yeah, eight would have been less than everything.

85
00:03:43,770 --> 00:03:46,880
>> Okay. So, what have we learned here?

86
00:03:46,880 --> 00:03:48,710
>> That sometimes you want to use mod.

87
00:03:48,710 --> 00:03:49,470
>> Yeah.

88
00:03:49,470 --> 00:03:51,478
>> If your data is weird. [LAUGH]

89
00:03:51,478 --> 00:03:52,440
>> You have you

90
00:03:52,440 --> 00:03:54,800
have definitely modified my box.

91
00:03:54,800 --> 00:03:59,462
>> Well I'm glad you found it mod. Hmm. [LAUGH]

92
00:03:59,462 --> 00:04:02,100
PUNS. Okay, good, so I think that was

93
00:04:02,100 --> 00:04:03,810
a good, that was, that was a good exercise.

94
00:04:03,810 --> 00:04:06,090
So I'm going to give you one more example

95
00:04:06,090 --> 00:04:08,450
of deriving something and then we're going to move on.

96
00:04:08,450 --> 00:04:09,150
>> Cool.

97
00:04:09,150 --> 00:04:09,690
>> Okay.
