1
00:00:00,080 --> 00:00:01,190
For this exercise,

2
00:00:01,190 --> 00:00:05,250
I made a new Line class that I'll
be using in my Python examples.

3
00:00:05,250 --> 00:00:07,990
Here are the basic functions for
the class that I've written.

4
00:00:07,990 --> 00:00:10,547
You can find the stub with
the initial Python code in

5
00:00:10,547 --> 00:00:12,580
the downloadable section on this page.

6
00:00:12,580 --> 00:00:16,440
The Line class will make use of the
Vector class from the previous lesson.

7
00:00:16,440 --> 00:00:20,240
Like in the previous lesson, I'll ask
you to write some functions, this time

8
00:00:20,240 --> 00:00:24,410
for the Line class, to implement some
of the concepts we've discussed.

9
00:00:24,410 --> 00:00:27,320
The initializer takes two
pieces of information.

10
00:00:27,320 --> 00:00:31,540
A normal vector to the line and the
constant term for the lines equation.

11
00:00:31,540 --> 00:00:33,680
The normal vector gives
me the coefficients for

12
00:00:33,680 --> 00:00:35,300
the standard form of the line.

13
00:00:35,300 --> 00:00:38,160
Note that I don't take a directional
vector as an argument.

14
00:00:38,160 --> 00:00:42,010
This is because in two dimensions,
we can quickly find a directional vector

15
00:00:42,010 --> 00:00:44,720
for the line from the normal
vector if we need to.

16
00:00:44,720 --> 00:00:48,330
More importantly, as we'll see later on,
the normal vector representation

17
00:00:48,330 --> 00:00:51,400
is more easily generalizable
to higher dimensions.

18
00:00:51,400 --> 00:00:55,800
Similarly, we can compute a base point
quickly by choosing a variable with

19
00:00:55,800 --> 00:00:59,280
a non-zero coefficient and
setting the other variable to zero.

20
00:00:59,280 --> 00:01:02,850
I've implemented this in a separate
compute base point function.

21
00:01:02,850 --> 00:01:06,860
The str function outputs the standard
form of the lines equation

22
00:01:06,860 --> 00:01:10,990
using the variables x1 and
x2 instead of just x and y.

23
00:01:10,990 --> 00:01:13,280
It's a bit messier, but it's set up so

24
00:01:13,280 --> 00:01:17,500
that later, we can generalize it
to equations in higher dimensions.

25
00:01:17,500 --> 00:01:21,430
Finally, there is a helper method
called first_nonzero_index.

26
00:01:21,430 --> 00:01:25,830
We will use it to find the first
non-zero coefficient of an equation.

27
00:01:25,830 --> 00:01:29,960
At the bottom, I have implemented
in extension to the decimal class

28
00:01:29,960 --> 00:01:33,650
that allows us to test whether a number
is within some tolerance of zero.

29
00:01:33,650 --> 00:01:37,900
We will use this to avoid incorrect
answers due to round off error.

30
00:01:37,900 --> 00:01:41,800
There are three functions I would like
you to implement for this exercise.

31
00:01:41,800 --> 00:01:44,970
First, I'd like you to create
a function that determines whether

32
00:01:44,970 --> 00:01:46,990
two lines are parallel or not.

33
00:01:46,990 --> 00:01:50,130
Here, I'd recommend using
functionality from the Vector class to

34
00:01:50,130 --> 00:01:52,170
make your function easy to write.

35
00:01:52,170 --> 00:01:56,930
Next, I'd like you to write a function
that tests whether two lines are equal,

36
00:01:56,930 --> 00:02:00,900
where we define equal to mean
consists of the same set of points.

37
00:02:00,900 --> 00:02:05,750
So for example, if l1 is the line
with normal vector 1, 1 and

38
00:02:05,750 --> 00:02:11,220
base point 0, 1, and l2 is the line with
normal vector negative 3, negative 3 and

39
00:02:11,220 --> 00:02:16,110
the base point minus 3, 4,
even though these lines

40
00:02:16,110 --> 00:02:20,690
have different normal vectors and base
points, they still define the same line.

41
00:02:20,690 --> 00:02:25,110
Since their corresponding
equations x + y = 1, and

42
00:02:25,110 --> 00:02:31,140
negative 3x- 3y = negative 3
are satisfied by the same points.

43
00:02:31,140 --> 00:02:34,970
Feel free to use your parallel
checking function in this function.

44
00:02:34,970 --> 00:02:38,670
And you may want to refer back to the
previous video to see how to determine

45
00:02:38,670 --> 00:02:40,930
if two parallel lines are equal.

46
00:02:40,930 --> 00:02:44,330
Finally, write a function that
determines the intersection of two

47
00:02:44,330 --> 00:02:45,530
lines.

48
00:02:45,530 --> 00:02:49,890
Ideally, if the lines are not equal but
parallel, the function should return

49
00:02:49,890 --> 00:02:53,040
some indication that the lines
have no intersection.

50
00:02:53,040 --> 00:02:56,810
And, if the lines are equal, the
function should return some indication

51
00:02:56,810 --> 00:03:00,010
that the intersection is
the entirety of both lines.

52
00:03:00,010 --> 00:03:03,880
Otherwise, just return the single point
of intersection of the two lines.

53
00:03:03,880 --> 00:03:06,920
Again, it will help to
leverage the functionality

54
00:03:06,920 --> 00:03:10,340
of these two functions in writing
the intersection function.

55
00:03:10,340 --> 00:03:11,962
Once you're done writing your functions,

56
00:03:11,962 --> 00:03:15,390
here are the questions I'd like
you to answer to check your work.

57
00:03:15,390 --> 00:03:20,146
For each pair of lines, fill in the
coordinates of the intersection point to

58
00:03:20,146 --> 00:03:22,524
three decimal places of accuracy, or

59
00:03:22,524 --> 00:03:26,786
else check the appropriate box
under no intersection or same line.

60
00:03:26,786 --> 00:03:31,445
The first system I'd
like you to solve is

61
00:03:31,445 --> 00:03:36,791
4.046x + 2.836y = 1.21, and

62
00:03:36,791 --> 00:03:42,013
10.115x + 7.09y = 3.025.

63
00:03:42,013 --> 00:03:47,168
The second system I'd
like you to solve is

64
00:03:47,168 --> 00:03:52,913
7.204x + 3.182y = 8.68, and

65
00:03:52,913 --> 00:03:59,080
8.172x + 4.114y = 9.883.

66
00:03:59,080 --> 00:04:03,821
The third system I'd
like you to solve is

67
00:04:03,821 --> 00:04:09,123
1.182x + 5.562y = 6.744,

68
00:04:09,123 --> 00:04:14,850
and 1.773x + 8.343y = 9.525.
