1
00:00:00,000 --> 00:00:05,172
Well, arithmetic intensity, basically defined as the amount of math per memory,

2
00:00:05,172 --> 00:00:08,278
or to be a little more precise, the amount of useful work,

3
00:00:08,278 --> 00:00:13,984
which is essentially math operations that we do for the amount of time that we spend doing memory accesses.

4
00:00:13,984 --> 00:00:18,262
So, we want to maximize arithmetic intensity, not minimize it.

5
00:00:18,262 --> 00:00:21,931
Spending less time on memory operations clearly helps,

6
00:00:21,931 --> 00:00:26,695
and the single most important way that you can do that is to coalesce your global memory accesses.

7
00:00:26,695 --> 00:00:31,202
Now, doing fewer memory operations per thread, well this may or may not help.

8
00:00:31,202 --> 00:00:35,305
Okay, for example, we might want to move data into the fast shared memory,

9
00:00:35,305 --> 00:00:38,115
do some operations on it there, and then move it back,

10
00:00:38,115 --> 00:00:44,012
and that would be more total memory operations, but the overall time spent on accessing memory would go down,

11
00:00:44,012 --> 00:00:47,084
because we're doing a lot of frequent accesses within shared memory.

12
00:00:47,084 --> 00:00:49,153
So this one's not correct necessarily.

13
00:00:49,153 --> 00:00:54,057
By the same token, we don't necessarily want to move all data to shared memory, right?

14
00:00:54,057 --> 00:00:57,325
Because that could be an unnecessary memory operation.

15
00:00:57,325 --> 00:01:03,667
What we really care about is moving frequently accessed data to shared memory. So these 3 are not correct.

16
00:01:03,667 --> 00:01:09,939
Finally, the GPU does run most efficiently when adjacent threads take the same path through the code.

17
00:01:09,939 --> 00:01:15,017
That means it's good to avoid thread divergence. In this unit we'll give a lot more explanation,

18
00:01:15,017 --> 00:01:18,787
examples, and specifics for all 3 of these general guidelines.
