1
00:00:00,120 --> 00:00:01,966
Another thing you guys have asked about a lot is,

2
00:00:01,966 --> 00:00:03,840
is how you choose between web frameworks.

3
00:00:03,840 --> 00:00:07,540
Now, remember the framework is generally the key step that sits between your

4
00:00:07,540 --> 00:00:08,570
program and the internet.

5
00:00:08,570 --> 00:00:11,290
Now, in this class we've been using the Google App engine frame work,

6
00:00:11,290 --> 00:00:14,320
which is basically called Web App 2, which I found really nice.

7
00:00:14,320 --> 00:00:17,950
This handles, basically, basic HTTP, kind of the scheduling,

8
00:00:17,950 --> 00:00:21,040
like the threading issues, you know, handling multiple requests at once.

9
00:00:21,040 --> 00:00:24,460
Parsing basic headers, basically looking for things out of the GET request or

10
00:00:24,460 --> 00:00:27,860
the POST request and putting them into these, like, request objects.

11
00:00:27,860 --> 00:00:31,320
Turning your response object into the appropriate HTTP to send to the browser.

12
00:00:31,320 --> 00:00:33,910
The URL mapping and all of that stuff is really helpful.

13
00:00:33,910 --> 00:00:36,120
Various degrees of web framework that give you more or

14
00:00:36,120 --> 00:00:38,240
less control and require you to do more or less work.

15
00:00:38,240 --> 00:00:41,550
The level that we've been working on in webapp2 is the level where I,

16
00:00:41,550 --> 00:00:42,610
I really like to be.

17
00:00:42,610 --> 00:00:43,620
The things that I,

18
00:00:43,620 --> 00:00:46,790
I really like about it are that we have direct access to GET and POST.

19
00:00:46,790 --> 00:00:49,706
Some frameworks kind of hide this from you, and I think it's really important

20
00:00:49,706 --> 00:00:52,460
that you are explicit about which method you're handling a GET or a POST.

21
00:00:52,460 --> 00:00:54,580
If you're thinking about the web in that way,

22
00:00:54,580 --> 00:00:56,670
your websites will generally make more sense.

23
00:00:56,670 --> 00:00:59,590
You won't make the mistakes of having, or you won't as easily make mistakes as

24
00:00:59,590 --> 00:01:01,870
having your, you know, your GETs modify the database and

25
00:01:01,870 --> 00:01:04,209
then getting cached weird and, you know, your forms not submitting properly.

26
00:01:04,209 --> 00:01:05,730
Understanding webs and

27
00:01:05,730 --> 00:01:10,270
web applications at the kind of method level, I think, is very, very important.

28
00:01:10,270 --> 00:01:11,940
We've got direct access to the request.

29
00:01:11,940 --> 00:01:13,490
You know, this means things like headers.

30
00:01:13,490 --> 00:01:15,650
Yes, there are convenience functions for setting cookies and

31
00:01:15,650 --> 00:01:17,830
getting cookies, but you can also manipulate the headers directly.

32
00:01:17,830 --> 00:01:21,190
Sometimes you'll want to do something funky with content type or content length.

33
00:01:21,190 --> 00:01:23,710
Then if the web framework don't let you do that, it can be really frustrating.

34
00:01:23,710 --> 00:01:25,390
You can't build the site the way you want to.

35
00:01:25,390 --> 00:01:27,850
So I find this kind of low level stuff is really helpful.

36
00:01:27,850 --> 00:01:29,270
But it's not so low that you're dealing with,

37
00:01:29,270 --> 00:01:32,300
like, HTTP versions and host headers unless you really want to.

38
00:01:32,300 --> 00:01:34,620
There are kind of features that a lot of frameworks do that I

39
00:01:34,620 --> 00:01:35,770
think that are non-important.

40
00:01:35,770 --> 00:01:37,170
This is strictly in my opinion.

41
00:01:37,170 --> 00:01:42,860
Things like sessions, caching, some have automatic forums, database ORM stuff.

42
00:01:42,860 --> 00:01:46,070
I don't like working with these because I find every time I

43
00:01:46,070 --> 00:01:49,490
use something like this, it's very soon after that I need a custom behavior.

44
00:01:49,490 --> 00:01:52,920
I want to handle sessions differently, or I want to cache things differently, or

45
00:01:52,920 --> 00:01:56,280
my forms don't fit the way the author thinks forms should work.

46
00:01:56,280 --> 00:01:59,250
Or, you know, the ORM can't express queries that I want to express,

47
00:01:59,250 --> 00:02:02,390
or won't let me cache the way I want to cache certain queries.

48
00:02:02,390 --> 00:02:05,530
So I find this sort of stuff is a little too high level for me and

49
00:02:05,530 --> 00:02:07,470
I always end up rewriting it anyway.

50
00:02:07,470 --> 00:02:10,907
To me, the important things are basic HTTP, having access to headers, and

51
00:02:10,907 --> 00:02:11,580
GET and POST.

52
00:02:11,580 --> 00:02:15,350
I almost never use pre-built session things, and caching, forms, and

53
00:02:15,350 --> 00:02:15,980
database stuff.

54
00:02:15,980 --> 00:02:18,060
In every experience I've had, in the long run,

55
00:02:18,060 --> 00:02:20,688
I end up getting frustrated and I have to rewrite something that would have just

56
00:02:20,688 --> 00:02:21,990
been simpler to do in the first place.

57
00:02:21,990 --> 00:02:23,930
I generally don't like magic.

58
00:02:23,930 --> 00:02:26,560
When you look at some code and it just seems too magical, like it

59
00:02:26,560 --> 00:02:29,340
did all of this stuff for you and you're so far away from the request that you

60
00:02:29,340 --> 00:02:31,730
don't actually know what happened, that's a terrible way to write web software.

61
00:02:31,730 --> 00:02:33,130
You're not going to be able to scale it properly.

62
00:02:33,130 --> 00:02:35,420
You're not going to know why something breaks when it inevitably does.

63
00:02:35,420 --> 00:02:36,380
And it's going to take you,

64
00:02:36,380 --> 00:02:38,990
I think ultimately it will cost you more work than just thinking through each of

65
00:02:38,990 --> 00:02:39,720
these problems on your own.

66
00:02:39,720 --> 00:02:41,040
Sometimes, it's a good way to get started.

67
00:02:41,040 --> 00:02:43,580
Something I didn't discuss here are the notion of templates.

68
00:02:43,580 --> 00:02:45,480
Template languages come in all varieties.

69
00:02:45,480 --> 00:02:47,970
I am partial to one on Python called Mako.

70
00:02:47,970 --> 00:02:51,460
What we've been using in this class is Ginja 2, and Ginja's also been great.

71
00:02:51,460 --> 00:02:54,860
I think that the discipline here when you're using templates is making sure you

72
00:02:54,860 --> 00:02:56,870
separate code from templates.

73
00:02:56,870 --> 00:03:00,704
A lot of these template systems allow you to put arbitrary code in them or

74
00:03:00,704 --> 00:03:03,560
complicated logical structures, if and for and while.

75
00:03:03,560 --> 00:03:06,850
Try to keep it to the, the amount of code in templates to a minimum.

76
00:03:06,850 --> 00:03:09,080
You've got this whole language you know, in our case, Python.

77
00:03:09,080 --> 00:03:11,540
That's a very, very powerful langauge, you can do all sorts of things.

78
00:03:11,540 --> 00:03:14,040
Why would you use a broken subset of that in your templates?

79
00:03:14,040 --> 00:03:16,920
Any complexities should be actually in your Python code and

80
00:03:16,920 --> 00:03:17,880
not in your template code.

81
00:03:17,880 --> 00:03:18,590
Didn't come up much in

82
00:03:18,590 --> 00:03:21,400
this class because most of the rendering code we're using was fairly simple.

83
00:03:21,400 --> 00:03:25,830
It's really easy to just throw complete objects and big data structures and

84
00:03:25,830 --> 00:03:28,190
unwind them and, and navigate them in your template code.

85
00:03:28,190 --> 00:03:30,430
And that's something that's just really difficult to maintain.

86
00:03:30,430 --> 00:03:31,450
I wouldn't recommend doing that.

87
00:03:31,450 --> 00:03:33,160
Templates are great, but use them with care.

88
00:03:33,160 --> 00:03:35,010
Use them for just generating your HTML.

89
00:03:35,010 --> 00:03:36,350
Or just generating your CSS.

90
00:03:36,350 --> 00:03:37,430
Or whatever you're using it for.

91
00:03:37,430 --> 00:03:40,000
And try to keep the code in the actual programming language.
