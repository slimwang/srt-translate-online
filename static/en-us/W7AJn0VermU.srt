1
00:00:00,000 --> 00:00:02,000
Let's go through a possible answer together.

2
00:00:02,000 --> 00:00:04,000
We initialize our chart to be the empty mapping,

3
00:00:04,000 --> 00:00:07,000
and I'm going to define a procedure named memofibo.

4
00:00:07,000 --> 00:00:11,000
If we're asked to compute the Nth Fibonacci number, and it's already in the chart,

5
00:00:11,000 --> 00:00:15,000
then we don't do any more work. We are super lazy.

6
00:00:15,000 --> 00:00:18,000
We just look it up in the chart and return that.

7
00:00:18,000 --> 00:00:23,000
Otherwise, we need to both set the chart and return the new value.

8
00:00:23,000 --> 00:00:28,000
So if n < or = to 2, the thing we want to write down in the chart is 1.

9
00:00:28,000 --> 00:00:32,000
Otherwise, we'll figure out the value of the chart by calling ourselves recursively

10
00:00:32,000 --> 00:00:39,000
on n - 1 and n - 2 and adding them together.

11
00:00:39,000 --> 00:00:44,000
In any event, since we set the chart here or here, we'll just return the value in the chart.

12
00:00:44,000 --> 00:00:48,000
Now I've asked us to print out the value of memofibo 24,

13
00:00:48,000 --> 00:00:50,000
and we get the answer that we're expecting.

14
00:00:50,000 --> 00:00:54,000
However, the real proof is in the timing.

15
00:00:54,000 --> 00:00:59,000
Using our timing code once again, I've now put in the code for memofibo instead,

16
00:00:59,000 --> 00:01:01,000
and we're trying to compute memofibo of 25.

17
00:01:01,000 --> 00:01:04,000
How long does it take to do this 100 times?

18
00:01:04,000 --> 00:01:07,000
Oh! Significantly less time!

19
00:01:07,000 --> 00:01:10,000
Remember before it was almost 3 seconds--almost half of our page budget.

20
00:01:10,000 --> 00:01:15,000
Now you can barely detect it--not a tenth of a second, not a hundredth of a second,

21
00:01:15,000 --> 00:01:20,000
but even smaller. This was a phenominal cosmic optimization.

22
00:01:20,000 --> 99:59:59,999
We are so much faster. It is not even funny.
