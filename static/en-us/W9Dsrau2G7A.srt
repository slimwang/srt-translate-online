1
00:00:00,310 --> 00:00:04,030
Let's understand how Quicksilver bundles IPC with

2
00:00:04,030 --> 00:00:07,300
recovery management. The secret sauce for recovery

3
00:00:07,300 --> 00:00:10,550
management is the notion of transaction. It's

4
00:00:10,550 --> 00:00:14,870
a light weight version of transaction. Not

5
00:00:14,870 --> 00:00:17,580
the heavyweight version that you normally associate

6
00:00:17,580 --> 00:00:20,610
with databases. In that sense, the notion

7
00:00:20,610 --> 00:00:25,750
of a transaction in Quicksilver is very similar to what we saw in LRVM. In

8
00:00:25,750 --> 00:00:28,810
fact, it is perhaps fair to say that

9
00:00:28,810 --> 00:00:32,960
LRVM inherits the semantics of transactions similar to

10
00:00:32,960 --> 00:00:35,850
what was proposed in the Quicksilver, because Quicksilver

11
00:00:35,850 --> 00:00:40,220
predates LRVM. And the IPC calls a tag with

12
00:00:40,220 --> 00:00:45,300
transaction ID. Let's say a client makes a call to a server, an IPC call to

13
00:00:45,300 --> 00:00:48,260
a server. Now, because of location transparency, the

14
00:00:48,260 --> 00:00:51,110
client and the servers can be on different machines

15
00:00:51,110 --> 00:00:53,180
in the entire local area network. Under

16
00:00:53,180 --> 00:00:57,610
the cover, the client contacts the Quicksilver kernel

17
00:00:57,610 --> 00:01:02,450
on the node that it is on, let's say node A, which in turn contacts the

18
00:01:02,450 --> 00:01:06,090
communication manager that's part of the operating system

19
00:01:06,090 --> 00:01:09,500
of Quicksilver and implemented as a server process

20
00:01:09,500 --> 00:01:12,290
above the kernel. Now, this communication manager on

21
00:01:12,290 --> 00:01:16,120
node A contacts the communication manager on node

22
00:01:16,120 --> 00:01:22,330
B via the kernel on node B. So all of this is happening under the covers

23
00:01:22,330 --> 00:01:24,590
when a client makes an IPC call to

24
00:01:24,590 --> 00:01:27,830
the server. Depending on the nature of the client-server

25
00:01:27,830 --> 00:01:30,520
relationship there's going to be state associated with

26
00:01:30,520 --> 00:01:35,730
this client-server interaction. Further the communication manager may

27
00:01:35,730 --> 00:01:38,920
itself have state when it is communicating with

28
00:01:38,920 --> 00:01:41,350
its peer on a different node of the network.

29
00:01:41,350 --> 00:01:43,020
We would like to make sure that the

30
00:01:43,020 --> 00:01:46,820
state that is associated with the communication manager as

31
00:01:46,820 --> 00:01:49,550
well as the state associated with the high

32
00:01:49,550 --> 00:01:53,340
level client-server relationship that I am showing you, all

33
00:01:53,340 --> 00:01:56,580
of these are recoverable from failures. And the

34
00:01:56,580 --> 00:02:00,660
failures may be things like link failure or crashing

35
00:02:00,660 --> 00:02:03,320
of the server. Any of these will result

36
00:02:03,320 --> 00:02:06,490
in state being left behind and what we would

37
00:02:06,490 --> 00:02:11,860
like to make sure is that all such state that is left behind in the

38
00:02:11,860 --> 00:02:17,220
entire distributed system is recoverable. So under the cover the communication

39
00:02:17,220 --> 00:02:22,140
manager on node A contacts its transaction

40
00:02:22,140 --> 00:02:27,060
manager, and the transaction manager on node A in turn contacts

41
00:02:27,060 --> 00:02:32,290
its peer on node B. And now a transaction link is established

42
00:02:32,290 --> 00:02:38,360
as a way of recording the trail of client-server interactions to later

43
00:02:38,360 --> 00:02:41,470
facilitate picking up the breadcrumbs that

44
00:02:41,470 --> 00:02:44,665
may potentially be left behind when the

45
00:02:44,665 --> 00:02:48,900
client-server interaction terminates either successfully, or

46
00:02:48,900 --> 00:02:52,080
unsuccessfully. So, the creator of the transaction

47
00:02:52,080 --> 00:02:56,860
is the default owner of the transaction, that is the root of the

48
00:02:56,860 --> 00:03:00,180
transaction T. Others are participants. In this example

49
00:03:00,180 --> 00:03:03,130
I'm just showing you that a client-server relationship

50
00:03:03,130 --> 00:03:06,830
exists here. The transaction manager contacts its peer,

51
00:03:06,830 --> 00:03:09,080
and this guy says yes I'm willing to participate

52
00:03:09,080 --> 00:03:12,160
in this transaction. So this is the transactional

53
00:03:12,160 --> 00:03:15,520
tree that gets established as a by-product of

54
00:03:15,520 --> 00:03:19,180
the original client-server interaction. So the owner, that

55
00:03:19,180 --> 00:03:21,870
is the root of the transaction, is the coordinator

56
00:03:21,870 --> 00:03:25,120
for the transaction tree that gets established.

57
00:03:25,120 --> 00:03:27,750
And as we will see shortly this transaction

58
00:03:27,750 --> 00:03:32,330
tree can span several sites, because a transaction

59
00:03:32,330 --> 00:03:34,580
that starts here, goes to the server, may

60
00:03:34,580 --> 00:03:36,660
go to other servers. So, the creator of

61
00:03:36,660 --> 00:03:40,080
the transaction is the owner of the transaction.

62
00:03:40,080 --> 00:03:43,600
But the owner can also change ownership as

63
00:03:43,600 --> 00:03:47,110
well as change the coordinator for this transaction,

64
00:03:47,110 --> 00:03:51,560
and we'll see how that is useful in a minute. The client-servers can choose to

65
00:03:51,560 --> 00:03:55,640
remain completely unaware of transactions if they

66
00:03:55,640 --> 00:03:59,470
so choose. In other words, the mechanisms are

67
00:03:59,470 --> 00:04:03,100
there provided by the Quicksilver Operating System,

68
00:04:03,100 --> 00:04:06,930
but it is up to each service provider

69
00:04:06,930 --> 00:04:12,200
whether or not to use them. And there is no extra overhead for the communication

70
00:04:12,200 --> 00:04:14,410
that I am showing you between these

71
00:04:14,410 --> 00:04:17,600
transaction managers on these different nodes, because it

72
00:04:17,600 --> 00:04:21,100
happens naturally as part of the IPC that

73
00:04:21,100 --> 00:04:24,745
has to happen anyway in the distributed system.

74
00:04:24,745 --> 00:04:28,920
That is the communication that is needed

75
00:04:28,920 --> 00:04:32,130
for these transaction managers to handshake, to say

76
00:04:32,130 --> 00:04:34,750
that yes, I've received your transaction request, I

77
00:04:34,750 --> 00:04:37,690
want to participate in it, that is piggybacked

78
00:04:37,690 --> 00:04:41,040
on the normal communication that happens to

79
00:04:41,040 --> 00:04:44,400
support this interprocess communication between the client

80
00:04:44,400 --> 00:04:47,550
and the server, through the communication managers

81
00:04:47,550 --> 00:04:49,990
on these different nodes. They are piggybacked

82
00:04:49,990 --> 00:04:55,640
on top of regular IPC. So there is no extra overhead for the communication

83
00:04:55,640 --> 00:04:58,530
among the transaction managers. So a chain

84
00:04:58,530 --> 00:05:03,190
of client-server interactions leads to a transaction tree

85
00:05:03,190 --> 00:05:07,750
as client-server interactions can span multiple nodes, or

86
00:05:07,750 --> 00:05:10,722
multiple sites, on the local area network. So

87
00:05:10,722 --> 00:05:13,110
there is the the root of the transaction

88
00:05:13,110 --> 00:05:15,870
tree, who is the owner that initiated the

89
00:05:15,870 --> 00:05:20,190
original transaction through the IPC call, and these

90
00:05:20,190 --> 00:05:22,660
are all the participants who said that yes,

91
00:05:22,660 --> 00:05:25,410
we are also part of this IPC chain,

92
00:05:25,410 --> 00:05:28,260
and we will participate in this transaction that was

93
00:05:28,260 --> 00:05:31,950
initiated by this owner. Examples of how

94
00:05:31,950 --> 00:05:35,930
these client-server interactions lead to the creation of

95
00:05:35,930 --> 00:05:38,720
transaction trees. You can have a client

96
00:05:38,720 --> 00:05:41,790
making a call to a window manager, asking

97
00:05:41,790 --> 00:05:46,930
for something to be painted on the screen. And that under the covers will result

98
00:05:46,930 --> 00:05:53,300
in a transaction link between these two nodes. Or a client could make a request

99
00:05:53,300 --> 00:05:55,760
to a file server for opening a file.

100
00:05:55,760 --> 00:06:00,260
That would result in a transaction tree getting established

101
00:06:00,260 --> 00:06:03,140
between the participating nodes. And you can see

102
00:06:03,140 --> 00:06:05,310
in these examples what kind of breadcrumbs will get

103
00:06:05,310 --> 00:06:08,470
created on behalf of the client. The window

104
00:06:08,470 --> 00:06:12,590
manager may have opened up a window on the

105
00:06:12,590 --> 00:06:15,660
display and that's a piece of breadcrumb that had

106
00:06:15,660 --> 00:06:18,630
been created on behalf of this client. And similarly,

107
00:06:18,630 --> 00:06:21,870
the file server may have opened a file

108
00:06:21,870 --> 00:06:25,780
and kept some pointers to where this client

109
00:06:25,780 --> 00:06:28,400
is in that particular file. That's part of

110
00:06:28,400 --> 00:06:30,940
the breadcrumb that the file server is creating

111
00:06:30,940 --> 00:06:37,550
on behalf of this client. And those are the states that we would like them to

112
00:06:37,550 --> 00:06:39,800
be recoverable if in fact there is any

113
00:06:39,800 --> 00:06:44,160
failure. I mentioned earlier that IPC calls are tagged

114
00:06:44,160 --> 00:06:47,380
with the transaction ID that gets created under the

115
00:06:47,380 --> 00:06:52,490
covers. And these transaction IDs are automatic. The clients and

116
00:06:52,490 --> 00:06:54,410
the servers don't have to do anything special for

117
00:06:54,410 --> 00:06:56,800
that. But at the same time, they don't have to

118
00:06:56,800 --> 00:06:58,480
care about them either, if they don't want to

119
00:06:58,480 --> 00:07:01,040
use it in any fashion or form. The key point

120
00:07:01,040 --> 00:07:05,700
is the transactions are provided in the operating system

121
00:07:05,700 --> 00:07:09,255
from the point of view of recovery. And because a

122
00:07:09,255 --> 00:07:13,900
client-server relationship can traverse multiple nodes or

123
00:07:13,900 --> 00:07:16,160
sites in the local area network, it

124
00:07:16,160 --> 00:07:19,580
is important to make sure that recoverability

125
00:07:19,580 --> 00:07:22,830
has to worry about multi-site atomicity. A

126
00:07:22,830 --> 00:07:25,285
transaction that originated in one node may

127
00:07:25,285 --> 00:07:27,990
traverse several different nodes and leave breadcrumbs

128
00:07:27,990 --> 00:07:30,600
all over the place. All those have

129
00:07:30,600 --> 00:07:34,880
to be cleared up when a transaction terminates.

130
00:07:34,880 --> 00:07:38,350
So there is coordination that needs to be done, and this is

131
00:07:38,350 --> 00:07:42,860
where the transaction tree is very useful. And since the transaction that is

132
00:07:42,860 --> 00:07:47,420
used as a secret sauce in Quicksilver is purely for recovery management,

133
00:07:47,420 --> 00:07:49,414
semantics are very simple and there

134
00:07:49,414 --> 00:07:51,610
is no worry about concurrency control either.
