1
00:00:00,280 --> 00:00:04,430
Now something that I glossed over that I want to return to is,

2
00:00:04,430 --> 00:00:10,270
in finding the minimum and maximum date, I simply accessed the date column.

3
00:00:10,270 --> 00:00:14,380
If you remember, from when we previously inspected our data in the console.

4
00:00:14,380 --> 00:00:18,150
The date column is actually a string representation.

5
00:00:18,150 --> 00:00:22,540
In order to ensure that when we're comparing dates to find the minimum and

6
00:00:22,540 --> 00:00:26,920
maximum that the comparison actually returns the correct date.

7
00:00:26,920 --> 00:00:30,800
For strings, there may be some ambiguity in what's greater or

8
00:00:30,800 --> 00:00:33,220
less when referring to a date.

9
00:00:33,220 --> 00:00:38,210
So, to be safe, you should always work with a JavaScript date object itself.

10
00:00:38,210 --> 00:00:42,560
To do so, you can either use d3's built in date parsers,

11
00:00:42,560 --> 00:00:44,135
which I'll show you in just a second,

12
00:00:44,135 --> 00:00:49,120
in-line in the functions which we need to do any sort of comparison.

13
00:00:49,120 --> 00:00:54,070
Or, since we will most likely always need the date column to be a date object.

14
00:00:54,070 --> 00:00:56,800
We can parse it as we load in the data.

15
00:00:56,800 --> 00:00:58,910
Scrolling to the bottom of the page here,

16
00:00:58,910 --> 00:01:04,500
we're going to revisit the D3 tab separated value file loading function.

17
00:01:04,500 --> 00:01:07,420
In this case, d3.tsv.

18
00:01:07,420 --> 00:01:09,760
And previously reloaded our data file.

19
00:01:09,760 --> 00:01:15,120
In this case, again, remember it's not simply the World Cup data set but

20
00:01:15,120 --> 00:01:18,100
it has geographic enhancements to it.

21
00:01:18,100 --> 00:01:20,760
The latitude, the longitude and the home team.

22
00:01:20,760 --> 00:01:25,260
Which once it's loaded will run the draw callback function

23
00:01:25,260 --> 00:01:27,840
which contains all the code to draw the chart.

24
00:01:27,840 --> 00:01:30,350
One thing that I haven't covered previously, but

25
00:01:30,350 --> 00:01:34,740
that's very powerful, is that in this function that initially loads the data,

26
00:01:34,740 --> 00:01:39,410
in addition to the file we're loading and the callback we run, in this

27
00:01:39,410 --> 00:01:44,600
case draw, once all the data's loaded, we can run an intermediate function.

28
00:01:44,600 --> 00:01:50,140
That can transform our parser data before our draw function gets called.

29
00:01:50,140 --> 00:01:53,620
In this case, this intermediate transformation function that

30
00:01:53,620 --> 00:01:57,540
we pass functions in much the same way as the functions we

31
00:01:57,540 --> 00:02:02,770
passed to our extents where the function gets run for every data point.

32
00:02:02,770 --> 00:02:04,200
In our data file.

33
00:02:04,200 --> 00:02:05,240
One at a time.

34
00:02:05,240 --> 00:02:11,000
The argument D in this function is simply a single row of our data file.

35
00:02:11,000 --> 00:02:14,780
And whatever we return from this function is what actually gets passed to

36
00:02:14,780 --> 00:02:15,330
the call back.
