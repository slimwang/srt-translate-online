1
00:00:00,790 --> 00:00:02,009
In the case of pipe and filter,

2
00:00:02,009 --> 00:00:06,360
we break the system into independently
executing components called filters.

3
00:00:06,360 --> 00:00:10,700
The filters are connected
together using a FIFO, or

4
00:00:10,700 --> 00:00:16,480
first in first out queue, and
these queues are called pipes.

5
00:00:16,480 --> 00:00:19,290
So we have pipes connecting
together the filters.

6
00:00:19,290 --> 00:00:24,010
Each of the filters is going to take
a single input, which has become

7
00:00:24,010 --> 00:00:28,160
called the standard input, and
it's going to produce a single output,

8
00:00:28,160 --> 00:00:30,480
which has now been called
the standard output.

9
00:00:30,480 --> 00:00:32,900
The filters share the assumptions
that the inputs and

10
00:00:32,900 --> 00:00:37,240
output consist of sequential files
containing lines of ASCII characters.

11
00:00:38,240 --> 00:00:42,190
Can you think of a situation
where you have a pipeline of

12
00:00:44,200 --> 00:00:46,205
filter components where it's non-ASCII?

13
00:00:49,440 --> 00:00:52,140
>> I mean,
I guess you could pipe together

14
00:00:52,140 --> 00:00:55,400
Linux processes that have binary output,
but.

15
00:00:55,400 --> 00:00:55,991
>> Yeah, but what-
>> Useful.

16
00:00:55,991 --> 00:00:57,551
>> Well, okay.

17
00:00:57,551 --> 00:00:59,338
>> In terms of, like, a user interface,

18
00:00:59,338 --> 00:01:01,920
you wouldn't be seeing
anything that might be useful.

19
00:01:01,920 --> 00:01:05,670
>> Well, it turns out that in
doing image processing, okay,

20
00:01:05,670 --> 00:01:13,150
you put various filters along the way to
deal with the processing of the images.

21
00:01:13,150 --> 00:01:17,130
Also in situations where there's
sensor data and you want to filter out

22
00:01:17,130 --> 00:01:21,960
noise of certain kinds or select
certain frequency bands and so on.

23
00:01:21,960 --> 00:01:25,230
It's binary data, but
it's going through a filtering process.

24
00:01:25,230 --> 00:01:29,970
So although this does work in other
situations, it's most familiar and

25
00:01:29,970 --> 00:01:31,859
most used in situations
where there's text files.

26
00:01:32,890 --> 00:01:37,280
So as you've indicated, there's going to
be filters having to do with circular

27
00:01:37,280 --> 00:01:41,540
shifting, and alphabetizing, and reading
things in and putting things out.

28
00:01:41,540 --> 00:01:45,840
And one of the essential elements of
this particular approach to solving

29
00:01:45,840 --> 00:01:48,910
things is there's no common
data storage elements.

30
00:01:48,910 --> 00:01:51,030
We're just passing
the solution along as we go.
