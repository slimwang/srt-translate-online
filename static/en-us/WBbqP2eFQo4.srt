1
00:00:00,000 --> 00:00:02,000
Here is what I did.

2
00:00:02,000 --> 00:00:07,000
I used the isupper method of the word, which is a string.

3
00:00:07,000 --> 00:00:12,000
String.isupper method to check if it is in fact an uppercase word.

4
00:00:12,000 --> 00:00:16,000
If it is, then I enumerate all the letters in the word.

5
00:00:16,000 --> 00:00:19,000
I reverse it, so this slice says reverse it.

6
00:00:19,000 --> 00:00:24,000
The missing numbers on either side says take the whole word,

7
00:00:24,000 --> 00:00:29,000
and the -1 says go from the back forward, so reverse the word,

8
00:00:29,000 --> 00:00:37,000
enumerate it give me pairs of indexes from 0 to N along with the individual digits.

9
00:00:37,000 --> 00:00:41,000
Then I'm going to just say 10 to the ith power and the digit.

10
00:00:41,000 --> 00:00:47,000
That gives us 1 times U plus 10 times O plus 100 times Y.

11
00:00:47,000 --> 00:00:52,000
It works out backwards from the normal YOU order, but that doesn't matter.

12
00:00:52,000 --> 00:00:58,000
I take those results, I put a plus sign in between them, and I wrap parentheses around them.

13
00:00:58,000 --> 00:01:01,000
If it's not upper, I just return the word itself.

14
00:01:01,000 --> 00:01:05,000
Now I explained the whole program.

15
00:01:05,000 --> 00:01:08,000
I'm calling it faster_solve, and I take a formula.

16
00:01:08,000 --> 00:01:10,000
The first thing I do is compile the formula.

17
00:01:10,000 --> 00:01:13,000
That gives me back the function that represents it,

18
00:01:13,000 --> 00:01:18,000
and while I'm there, I'm also returning the letters that are within the formula.

19
00:01:18,000 --> 00:01:22,000
That evaluation or compilation of the formula is done once.

20
00:01:22,000 --> 00:01:28,000
Then I go through all the permutations of the digits taken length of letters at a time.

21
00:01:28,000 --> 00:01:35,000
Notice that I'm using actual integers here, not strings, for the individual digits.

22
00:01:35,000 --> 00:01:40,000
If applying the function to the digits is true, then I did the same thing that I did before

23
00:01:40,000 --> 00:01:47,000
of making up a translation table and calling the formula.translate to get my final result.

24
00:01:47,000 --> 00:01:50,000
Note I only have to do this translation once.

25
00:01:50,000 --> 00:01:55,000
On the specific permutation that I know works, I don't have to do it every time

26
00:01:55,000 --> 00:01:58,000
like I did in the previous version of solve.

27
00:01:58,000 --> 00:02:03,000
Then if there's an arithmetic error, I catch that and go on to the next permutation.

28
00:02:03,000 --> 00:02:08,000
Now, the function compile_formula takes a formula as input.

29
00:02:08,000 --> 00:02:13,000
First I figure out all the letters, so that's going to be the Y, M, E, U, and O.

30
00:02:13,000 --> 00:02:19,000
Then I figure out that the list of parameters I want to put into my function

31
00:02:19,000 --> 00:02:23,000
is going to be a string consisting of the letters with a comma in between them.

32
00:02:23,000 --> 00:02:26,000
I figure out all the tokens.

33
00:02:26,000 --> 00:02:32,000
A token is an individual term like the U or the equal signs

34
00:02:32,000 --> 99:59:59,999
or the ME and so on.
