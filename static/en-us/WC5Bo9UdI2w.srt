1
00:00:00,180 --> 00:00:02,422
So now, lets see what happens when we do out of

2
00:00:02,422 --> 00:00:06,186
order load store execution. That is, we try the aggressive approach of

3
00:00:06,186 --> 00:00:09,114
loads going to memory as soon as they know the address, if

4
00:00:09,114 --> 00:00:13,000
there is no preceding store that is also the same address. And

5
00:00:13,000 --> 00:00:15,630
it later turns out that a store has been resolved to

6
00:00:15,630 --> 00:00:18,960
the same address. We have something like this: This is going to be

7
00:00:18,960 --> 00:00:21,950
our sequence of instructions in the load store queue. Let's say that

8
00:00:21,950 --> 00:00:25,520
we are executing these five instructions and this is their program order.

9
00:00:25,520 --> 00:00:27,340
First we have a load that loads from the

10
00:00:27,340 --> 00:00:31,130
address 0 plus R6, and puts the value into R3.

11
00:00:31,130 --> 00:00:36,400
Next we have an add that takes R3, adds R9 to it and puts the result to us into

12
00:00:36,400 --> 00:00:39,560
R7. Next we have a store that takes the

13
00:00:39,560 --> 00:00:42,380
value from R4 and puts it in a memory location

14
00:00:42,380 --> 00:00:46,520
determined by R7. Next we have a subtraction R1 minus

15
00:00:46,520 --> 00:00:50,820
R2 goes into R1. And finally, we use R1 as

16
00:00:50,820 --> 00:00:53,190
an address to access memory and put the value

17
00:00:53,190 --> 00:00:56,990
into R8. In an out-of-order processor, when we try to

18
00:00:56,990 --> 00:01:00,375
execute these instructions, this is what might happen. Let's say,

19
00:01:00,375 --> 00:01:04,010
that all of these have already been fetched, decoded, etc.

20
00:01:04,010 --> 00:01:07,120
So, let's say that the Load, because it only depends

21
00:01:07,120 --> 00:01:09,230
on R6 switch. No other instruction is supposed to produce,

22
00:01:09,230 --> 00:01:12,340
it can dispatch. So it goes to memory and, eventually,

23
00:01:12,340 --> 00:01:16,120
it will come back with R3. But let's say it's

24
00:01:16,120 --> 00:01:18,240
a cache miss, so it's going to take a

25
00:01:18,240 --> 00:01:21,620
while until this Load comes back. This instruction cannot

26
00:01:21,620 --> 00:01:24,750
be dispatched until that happens. And this instruction cannot

27
00:01:24,750 --> 00:01:27,740
be dispatched until that happens. In fact, the store doesn't

28
00:01:27,740 --> 00:01:29,320
even know the address to which it's going to be

29
00:01:29,320 --> 00:01:32,220
storing, until the add completes, which is going to happen

30
00:01:32,220 --> 00:01:37,340
at some future point. Meanwhile the subtract can dispatch

31
00:01:37,340 --> 00:01:41,620
and it produces R1 very quickly. At that point the

32
00:01:41,620 --> 00:01:44,860
load can dispatch. It has everything it needs to

33
00:01:44,860 --> 00:01:46,590
know. It has the address, now it can go to

34
00:01:46,590 --> 00:01:49,500
memory and load from it. Let's say that the load

35
00:01:49,500 --> 00:01:52,790
is cache hit, so it gets the R8 very quickly

36
00:01:52,790 --> 00:01:56,410
and maybe supplies it to subsequent instructions. So at

37
00:01:56,410 --> 00:01:59,590
this point in time. What we have is that the

38
00:01:59,590 --> 00:02:03,730
subtract and load have completed, we think we're just waiting

39
00:02:03,730 --> 00:02:06,650
to commit them. The load and the add, and the

40
00:02:06,650 --> 00:02:09,479
store are not done yet; because they're all waiting

41
00:02:09,479 --> 00:02:11,120
for the load to finish and then they can do

42
00:02:11,120 --> 00:02:15,120
something. Eventually let's say that this load is done, now

43
00:02:15,120 --> 00:02:18,280
we produce r 3 feed it to this add. The

44
00:02:18,280 --> 00:02:21,590
add is going to be done very soon afterwards and now

45
00:02:21,590 --> 00:02:24,960
we feed the R7 to the store. And now let's

46
00:02:24,960 --> 00:02:27,790
say that this was some address X that we have

47
00:02:27,790 --> 00:02:32,690
accessed here. If this results do not X, meaning the

48
00:02:32,690 --> 00:02:35,950
address addressed by R7 is not the same address as

49
00:02:35,950 --> 00:02:38,800
the one addressed by R1. Then everything is going to be

50
00:02:38,800 --> 00:02:41,640
fine. The store is storing to some other address, we

51
00:02:41,640 --> 00:02:45,930
have loaded something else entirely and everything is fine. However,

52
00:02:45,930 --> 00:02:49,550
the problem occurs when the address that the store resolves

53
00:02:49,550 --> 00:02:53,180
to si also x. At that point, the value from

54
00:02:53,180 --> 00:02:55,470
R4 that the store is storing is really the one

55
00:02:55,470 --> 00:02:57,800
that the load should have been loading, however the load

56
00:02:57,800 --> 00:03:00,140
already loaded some stale value from memory.
