1
00:00:00,190 --> 00:00:01,920
So what I'm showing you here is sort

2
00:00:01,920 --> 00:00:04,440
of a software engineering road map to synthesizing a

3
00:00:04,440 --> 00:00:07,590
complex system. So what we're going to do is, first

4
00:00:07,590 --> 00:00:10,720
we're going to go from specification to implementation. And the

5
00:00:10,720 --> 00:00:13,730
figure shows a workflow in building a complex

6
00:00:13,730 --> 00:00:16,835
system. In particular, what I focused on is a

7
00:00:16,835 --> 00:00:21,960
TCP/IP network protocol stack using this methodology of the

8
00:00:21,960 --> 00:00:25,050
design cycle that I presented. So I start with.

9
00:00:25,050 --> 00:00:29,670
What is called an Abstract Behavioral Spec. Now this is where we use this IoA

10
00:00:29,670 --> 00:00:33,200
automata. And this abstract behavioral spec is

11
00:00:33,200 --> 00:00:37,210
where we describe the functionality of the subsystem

12
00:00:37,210 --> 00:00:39,240
in terms of requirements. And we are

13
00:00:39,240 --> 00:00:43,310
presenting the high level logical specification of the

14
00:00:43,310 --> 00:00:46,700
components and the specification is really talking

15
00:00:46,700 --> 00:00:50,110
about the properties that we want, the subsystem

16
00:00:50,110 --> 00:00:52,500
to adhere to. Not how it is going to

17
00:00:52,500 --> 00:00:55,660
be accomplished, or how, how it is going to be executed,

18
00:00:55,660 --> 00:00:57,400
but the properties that it has to adhere to.

19
00:00:57,400 --> 00:01:00,390
For example, in the protocol. If we desire that the

20
00:01:00,390 --> 00:01:03,910
package should be delivered in order, that's a property

21
00:01:03,910 --> 00:01:06,610
that we want for the subsystem. Those are the behavioral

22
00:01:06,610 --> 00:01:10,870
properties that are going to express using the I/O Automata. Another

23
00:01:10,870 --> 00:01:15,280
behavioral specification properties that you can have are things like,

24
00:01:15,280 --> 00:01:18,240
well, on every packet there should be an acknowledgement. That's

25
00:01:18,240 --> 00:01:20,860
another property that you want the protocol to have. You

26
00:01:20,860 --> 00:01:24,100
can express that using the I/O Automata. So the abstract

27
00:01:24,100 --> 00:01:28,480
behavioral spec is simply and lends itself to deriving properties

28
00:01:28,480 --> 00:01:31,400
about the behavior of the system. Not the execution, but

29
00:01:31,400 --> 00:01:34,540
the behavior of the system, such as [UNKNOWN] and so

30
00:01:34,540 --> 00:01:37,290
on. It is not executable code, even though I told

31
00:01:37,290 --> 00:01:40,380
you that the syntax of I/O Automata is similar to C,

32
00:01:40,380 --> 00:01:42,880
it's not executable code. But the interesting thing

33
00:01:42,880 --> 00:01:45,770
is that Once you've expressed the abstract behavioral

34
00:01:45,770 --> 00:01:49,750
properties, you can actually verify whether the behavioral

35
00:01:49,750 --> 00:01:52,800
specification meets the properties that you want in

36
00:01:52,800 --> 00:01:56,890
the sub-system. So proving that the behavioral spec

37
00:01:56,890 --> 00:02:00,126
meets the properties is facilitated by the I/O

38
00:02:00,126 --> 00:02:02,740
Automata theoretical framework. That's the nice thing about

39
00:02:02,740 --> 00:02:05,600
this behavioral spec. Once we know that the

40
00:02:05,600 --> 00:02:08,880
behavioral spec is meeting the properties that we set

41
00:02:08,880 --> 00:02:11,770
up for the subsystem, then we are ready to roll

42
00:02:11,770 --> 00:02:14,580
our sleeves and go down the path of implementing

43
00:02:14,580 --> 00:02:18,290
the behavioral properties. Next step in the process is getting

44
00:02:18,290 --> 00:02:20,940
to a concrete behavioral spec. We get to this

45
00:02:20,940 --> 00:02:24,830
concrete behavioral spec from the abstract behavioral spec through a

46
00:02:24,830 --> 00:02:27,870
whole set of refinements to this abstract behavioral spec.

47
00:02:27,870 --> 00:02:30,814
For instance, the refinement could be that, if I have

48
00:02:30,814 --> 00:02:33,466
a Q Data structure. I want first come, first

49
00:02:33,466 --> 00:02:36,678
serve property, how do I make sure that the abstract

50
00:02:36,678 --> 00:02:40,912
behavioral spec adheres to the additional execution condition that

51
00:02:40,912 --> 00:02:43,827
I want of first come, first serve. Those are the

52
00:02:43,827 --> 00:02:46,095
kinds of things that I can do, and refining

53
00:02:46,095 --> 00:02:49,830
the abstract behavioral spec to get a concrete behavioral spec.

54
00:02:49,830 --> 00:02:51,810
This is still not code, but it is closer

55
00:02:51,810 --> 00:02:56,270
to code than abstract behavioral spec. It's closer to implementation.

56
00:02:56,270 --> 00:02:59,140
And from the concrete behavioral spec, we get to

57
00:02:59,140 --> 00:03:03,940
the actual implementation using OCaml as the programming language.

58
00:03:03,940 --> 00:03:07,080
And between the implementation and the concrete behavioral spec,

59
00:03:07,080 --> 00:03:09,680
there is not a whole lot of difference. It

60
00:03:09,680 --> 00:03:12,590
is really the scheduling of the operations that we

61
00:03:12,590 --> 00:03:15,140
want in the concrete behavioral spec that is being

62
00:03:15,140 --> 00:03:17,700
detailed. when we go from this step to this

63
00:03:17,700 --> 00:03:21,460
step and producing OCaml code, which is finally an executable

64
00:03:21,460 --> 00:03:24,320
code for the original abstract behavioral Spec

65
00:03:24,320 --> 00:03:26,640
that we started with. I already mentioned

66
00:03:26,640 --> 00:03:28,210
some of the reasons why they chose

67
00:03:28,210 --> 00:03:33,050
OCaml as the implementation vehicle. Functional programming language,

68
00:03:33,050 --> 00:03:36,020
formal semantics, and it also leads to

69
00:03:36,020 --> 00:03:40,024
compact code. High level operations and data structures

70
00:03:40,024 --> 00:03:42,466
and also it has features like automatic

71
00:03:42,466 --> 00:03:47,128
garbage collection, automatic memory allocation, and marshalling and

72
00:03:47,128 --> 00:03:50,420
unmarshalling of arguments. This is very important because

73
00:03:50,420 --> 00:03:54,840
I mentioned that we're going towards Building a complex

74
00:03:54,840 --> 00:03:58,670
system, from a specification, using a component based

75
00:03:58,670 --> 00:04:01,430
design approach, which means that we're going to take

76
00:04:01,430 --> 00:04:04,940
these components and mesh them together, just like

77
00:04:04,940 --> 00:04:07,472
you take Lego blocks to build a toy. Similar

78
00:04:07,472 --> 00:04:09,544
to that we are taking components and meshing

79
00:04:09,544 --> 00:04:12,344
them together to get the complex implementation, and when

80
00:04:12,344 --> 00:04:15,274
we do that We are necessarily going across different

81
00:04:15,274 --> 00:04:18,557
components and when we go across different components you

82
00:04:18,557 --> 00:04:21,706
have to adhere to the interface specifications of those

83
00:04:21,706 --> 00:04:24,989
components which means you have to marshall the arguments

84
00:04:24,989 --> 00:04:28,071
and unmarshall the arguments when you go between these

85
00:04:28,071 --> 00:04:31,354
components and Ocaml Has facilities for doing these kinds

86
00:04:31,354 --> 00:04:35,240
of marshalling and unmarshalling built into the language framework

87
00:04:35,240 --> 00:04:39,022
which makes it an ideal vehicle for Component-based design.

88
00:04:39,022 --> 00:04:44,612
And also the programmability of Ocaml is similar to C and the definition of the

89
00:04:44,612 --> 00:04:50,280
primitives in OCaml makes it a good vehicle for developing verifiable code.
