1
00:00:00,000 --> 00:00:05,000
So to solve this problem we're going to modify partition a little bit.

2
00:00:05,000 --> 00:00:10,000
That instead of actually just building a list for us, it actually separates that into three chunksâ

3
00:00:10,000 --> 00:00:17,000
the ones that are smaller than v, the chunk that is v, and the ones that are bigger than v.

4
00:00:17,000 --> 00:00:25,000
All right so given this modification to partition, we can run Top K as follows.

5
00:00:25,000 --> 00:00:31,000
We're given a list and some number K that we want that the smallest K elements of L.

6
00:00:31,000 --> 00:00:35,000
We start it off by choosing a random element of L.

7
00:00:35,000 --> 00:00:41,000
We just choose something random in the range of the length of L and call that v.

8
00:00:41,000 --> 00:00:45,000
Then we do a partition of L on v and separate it into the left, the middle, and the right.

9
00:00:45,000 --> 00:00:52,000
If the size of the thing on the left is exactly K, we're done. The thing on the left is what we want.

10
00:00:52,000 --> 00:00:59,000
Actually, I didn't talk about this before but if the length of the thing on the left plus 1 is equal to K

11
00:00:59,000 --> 00:01:04,000
then we still know the answer because it's the stuff on the left and including v.

12
00:01:04,000 --> 00:01:10,000
All right so it gets trickier when the stuff on the left is bigger than K.

13
00:01:10,000 --> 00:01:14,000
Well we went looking for the Top K, but we just found something more than the Top K.

14
00:01:14,000 --> 00:01:18,000
We have to whittle it down further and we can do that just by calling Top K

15
00:01:18,000 --> 00:01:22,000
on only the elements on the left and we just want the K best elements on the left.

16
00:01:22,000 --> 00:01:27,000
We've made some progress but we haven't completely solved the problem yet.

17
00:01:27,000 --> 00:01:34,000
And finally, in the last case, the length of left is smaller than K

18
00:01:34,000 --> 00:01:38,000
We know that everything on the left is something that we want as part of the Top K.

19
00:01:38,000 --> 00:01:44,000
And we know v itself is also part of the Top K but we need to search for the rest.

20
00:01:44,000 --> 00:01:47,000
And all the rest of the ones that we want are on the right

21
00:01:47,000 --> 00:01:49,000
so we're going to search through the list on the right.

22
00:01:49,000 --> 00:01:51,000
And how many things do we want off the right?

23
00:01:51,000 --> 00:01:56,000
Well, we wanted K but we found length of left plus 1 already.

24
00:01:56,000 --> 00:02:01,000
We can just subtract that off from the number that we want,

25
00:02:01,000 --> 00:02:04,000
call Top K recursively, and we're done.

26
00:02:04,000 --> 00:02:13,000
We call print top_k(L, 5) and we get back five elements not sorted.

27
00:02:13,000 --> 00:02:17,000
But these are exactly the five smallest elements of L so it did the work.
