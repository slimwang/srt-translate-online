1
00:00:00,240 --> 00:00:02,450
Let's start with coding
the insert method so

2
00:00:02,450 --> 00:00:05,190
that we can add data
to out task database.

3
00:00:05,190 --> 00:00:08,955
Our end goal for implementing this
function is to hook it up to our

4
00:00:08,955 --> 00:00:11,673
add task activity UI, so
then when a user types

5
00:00:11,673 --> 00:00:15,439
in a new task with a selected
priority and clicks the add button,

6
00:00:15,439 --> 00:00:19,304
this will insert that newly created
data into our task database.

7
00:00:19,304 --> 00:00:22,847
One thing that the provider will do
differently than straight up SQL code is

8
00:00:22,847 --> 00:00:26,019
to have different actions for
different URIs.

9
00:00:26,019 --> 00:00:28,620
In this way,
it can do some simple data validation

10
00:00:28,620 --> 00:00:30,920
by making sure it only
responds to valid URIs.

11
00:00:32,200 --> 00:00:35,100
When you insert data,
you'll be inserting a new row of data

12
00:00:35,100 --> 00:00:39,660
into the entire tasks directory,
which holds all of our existing data.

13
00:00:39,659 --> 00:00:43,559
So you'll want your content
provider to respond only to the URI

14
00:00:43,560 --> 00:00:45,690
that identifies that directory.

15
00:00:45,689 --> 00:00:49,449
And to handle this case, you'll use
your URI matcher and a switch statement.

16
00:00:51,119 --> 00:00:52,904
So that we can write new data to it,

17
00:00:52,905 --> 00:00:56,855
we'll use
mTaskDbHelper.getWritableDatabase().

18
00:00:56,854 --> 00:00:58,974
And we'll be using this
throughout this function.

19
00:00:58,975 --> 00:01:02,695
So I'm declaring it as
a final variable named db.

20
00:01:02,695 --> 00:01:07,055
This match will be either 100 for
all tasks or 101 for

21
00:01:07,055 --> 00:01:11,050
a task with ID, or an unrecognized URI.

22
00:01:11,049 --> 00:01:13,689
And we want to check these
cases with a switch case and

23
00:01:13,689 --> 00:01:15,747
respond to only the tasks case.

24
00:01:15,748 --> 00:01:22,090
If the tasks case is met, we can insert
a new row of data into this directory.

25
00:01:22,090 --> 00:01:26,700
We can't insert data into just one
row like in the task with id case.

26
00:01:26,700 --> 00:01:30,700
And if we receive any other
type of URI or an invalid one,

27
00:01:30,700 --> 00:01:35,049
the default behavior will be to throw
an UnsupportedOperationException and

28
00:01:35,049 --> 00:01:37,849
print out an Unknown uri message.

29
00:01:37,849 --> 00:01:41,000
Now let's actually fill in the code for
this directory case.

30
00:01:41,000 --> 00:01:43,200
First, we know this
method returns a URI.

31
00:01:44,239 --> 00:01:48,149
So let's create a variable to
store that, named returnUri.

32
00:01:48,150 --> 00:01:50,719
We'll declare this right
above our switch case so

33
00:01:50,719 --> 00:01:54,349
that we can assign it a value
later on in the directory case.

34
00:01:54,349 --> 00:01:58,829
Then, in the tasks case, we'll insert
new data into the tasks directory

35
00:01:58,829 --> 00:02:01,239
by calling insert on our database.

36
00:02:01,239 --> 00:02:06,259
We just say db.insert and pass in our
table name and our content values.

37
00:02:06,260 --> 00:02:09,594
And this may look familiar from
the wait list app you've coded before.

38
00:02:09,594 --> 00:02:12,344
This insert should return an integer ID.

39
00:02:12,344 --> 00:02:16,004
If the insert wasn't successful,
this ID will be -1.

40
00:02:16,004 --> 00:02:20,574
But if the insert is successful, we want
the provider's insert method to take

41
00:02:20,574 --> 00:02:26,014
that unique row ID and create and return
a URI for that newly inserted data.

42
00:02:26,014 --> 00:02:30,094
So first, let's write an if that checks
that this insert was successful.

43
00:02:30,094 --> 00:02:32,580
So if ID greater than 0 will work.

44
00:02:32,580 --> 00:02:36,380
That means the insert worked and
we can construct the new URI.

45
00:02:36,379 --> 00:02:38,519
Otherwise, we'll throw
a SQLiteException,

46
00:02:38,520 --> 00:02:40,560
because the insert failed.

47
00:02:40,560 --> 00:02:45,304
So if the ID is valid, then the URI we
construct will be our main content URI,

48
00:02:45,304 --> 00:02:49,549
which has the authority and tasks path,
with the id appended to it.

49
00:02:49,549 --> 00:02:54,283
And we can do that using
ContentUris.withAppendedId,

50
00:02:54,282 --> 00:02:59,022
and passing in our main CONTENT_URI and
this new row id.

51
00:02:59,022 --> 00:03:03,203
contentUris is an Android class
that contains helper methods for

52
00:03:03,203 --> 00:03:04,574
constructing URIs.

53
00:03:04,574 --> 00:03:09,338
And this method creates a URI starting
with this first argument as a base, and

54
00:03:09,337 --> 00:03:12,282
then with this id added on
to the end of the path.

55
00:03:12,282 --> 00:03:16,327
And we're storing this as the value for
our returnUri variable.

56
00:03:16,328 --> 00:03:20,719
Then at the end of our switch statement,
we can return that URI.

57
00:03:20,719 --> 00:03:24,026
And don't forget to delete the not yet
implemented exception.

58
00:03:24,026 --> 00:03:25,760
And we're almost done.

59
00:03:25,759 --> 00:03:28,699
One last thing, right before
this return statement, you'll

60
00:03:28,699 --> 00:03:33,819
also notify the resolver that a change
has occurred at this particular URI.

61
00:03:33,819 --> 00:03:36,739
You'll do this using
the notify change function.

62
00:03:36,740 --> 00:03:39,840
This is so that the resolver knows
that something has changed, and

63
00:03:39,840 --> 00:03:43,960
can update the database and
any associated UI accordingly.

64
00:03:43,960 --> 00:03:44,560
Phew!

65
00:03:44,560 --> 00:03:46,039
That was a lot of little steps.

66
00:03:46,039 --> 00:03:48,060
But now we have a complete
insert function.

67
00:03:48,061 --> 00:03:51,480
And the next step will be to
actually call this from the UI code.

