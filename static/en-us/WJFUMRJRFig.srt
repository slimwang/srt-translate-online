1
00:00:00,350 --> 00:00:04,700
One of the scariest problems related to multithreading is deadlocks.

2
00:00:04,700 --> 00:00:07,740
An informal definition of a deadlock is that,

3
00:00:07,740 --> 00:00:12,140
it is a situation in which competing threads, at least two or

4
00:00:12,140 --> 00:00:16,390
more, they're each waiting on each other to complete.

5
00:00:17,480 --> 00:00:21,830
However, none of them ever do because each waits on the other one.

6
00:00:21,830 --> 00:00:25,060
So thus, the execution of the process overall of all of

7
00:00:25,060 --> 00:00:27,700
these threads is stuck and it cannot continue.

8
00:00:27,700 --> 00:00:30,000
The threads are, we call, deadlocked.

9
00:00:30,000 --> 00:00:34,779
We can use the visual example to help explain a deadlock using our

10
00:00:34,779 --> 00:00:36,204
toy shop example.

11
00:00:36,204 --> 00:00:39,921
So, imagine that two workers in the toy shop are finishing toy

12
00:00:39,921 --> 00:00:44,424
orders that involve a train, and each worker will need a soldering iron and

13
00:00:44,424 --> 00:00:46,514
a solder wire to finish their toy.

14
00:00:46,514 --> 00:00:49,410
The problem is, there's only one of each of those.

15
00:00:49,410 --> 00:00:53,700
So, let's say the first worker grabs the soldering iron first, and

16
00:00:53,700 --> 00:00:56,270
the second worker grabs the solder wire.

17
00:00:56,270 --> 00:01:01,580
And because both workers are stubborn, they're unwilling to give up either one

18
00:01:01,580 --> 00:01:06,120
of the items that they've grabbed, so none of the toys will ever get made.

19
00:01:06,120 --> 00:01:09,540
The workers remain continuously stuck in a deadlock.

20
00:01:09,540 --> 00:01:13,980
In practice, the deadlock example can be described with the following situation.
