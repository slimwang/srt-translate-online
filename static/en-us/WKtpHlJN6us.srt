1
00:00:00,390 --> 00:00:03,040
Another problem that arises when reading state,

2
00:00:03,040 --> 00:00:07,390
is that ,extra unexpected events may introduce

3
00:00:07,390 --> 00:00:11,420
inconsistencies. A common programming idiom, is that,

4
00:00:11,420 --> 00:00:14,220
the first packet goes to the controller

5
00:00:14,220 --> 00:00:19,840
and once the controller figures out what policy to apply for that flow, the

6
00:00:19,840 --> 00:00:23,790
controller then installs rules in the switches,

7
00:00:23,790 --> 00:00:26,540
in the network, corresponding to that flow.

8
00:00:26,540 --> 00:00:29,390
What if more packets should arrive ,at the

9
00:00:29,390 --> 00:00:33,230
switch before the controller has a chance to install

10
00:00:33,230 --> 00:00:36,050
rules for that flow? At this point, multiple

11
00:00:36,050 --> 00:00:40,170
packets may reach the controller, but the application It

12
00:00:40,170 --> 00:00:42,270
is running on top of the controller, may

13
00:00:42,270 --> 00:00:45,600
not need or want to see these additional packets.

14
00:00:45,600 --> 00:00:48,940
So, the solution, is to have the programmer specify

15
00:00:48,940 --> 00:00:52,410
by a high level language a limit of one,

16
00:00:52,410 --> 00:00:55,320
indicating that the application should only see

17
00:00:55,320 --> 00:00:57,590
the first packet of the flow and that

18
00:00:57,590 --> 00:01:00,330
the subsequent packet should be suppressed. The

19
00:01:00,330 --> 00:01:03,690
runtime system then hides the extra events. So

20
00:01:03,690 --> 00:01:05,570
to remind you where we are, we

21
00:01:05,570 --> 00:01:09,240
talked about problems with consistency when reading state

22
00:01:09,240 --> 00:01:12,495
from the network, and we talked about ,three

23
00:01:12,495 --> 00:01:17,790
approaches to, helping guarantee consistency when reading state.

24
00:01:17,790 --> 00:01:21,270
Predicates, rule unfolding and suppression. And let's now talk

25
00:01:21,270 --> 00:01:25,090
about primitives that can help maintain consistency, when writing State.
