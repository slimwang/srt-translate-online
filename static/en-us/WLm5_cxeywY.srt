1
00:00:00,500 --> 00:00:04,480
Now let's discuss another
symmetric encryption algorithm,

2
00:00:04,480 --> 00:00:08,320
the advanced encryption standard,
or AES.

3
00:00:08,320 --> 00:00:12,750
Recall that a major
shortcoming of DES is that

4
00:00:12,750 --> 00:00:17,590
the key length is only 56 bit, and
that is considered to be short.

5
00:00:17,590 --> 00:00:22,810
In other words, the key space is
relatively small, and an attacker

6
00:00:22,810 --> 00:00:28,450
can use brute force to find the key
using the power of today's computers.

7
00:00:28,450 --> 00:00:33,130
Of course, we can use [INAUDIBLE]
to increase the key length, but

8
00:00:33,130 --> 00:00:35,780
that would mean running DES three times,
and

9
00:00:35,780 --> 00:00:38,800
that's not the most efficient
way of doing encryption.

10
00:00:38,800 --> 00:00:43,321
Therefore, there was a need for
a new encryption algorithm that can take

11
00:00:43,321 --> 00:00:46,074
longer key length, but
also be efficient.

12
00:00:46,074 --> 00:00:49,836
So in 1997,
NIST put out a public call for

13
00:00:49,836 --> 00:00:54,170
a new encryption
standard to replace DES.

14
00:00:54,170 --> 00:00:59,160
After a few rounds of submissions and
reviews, AES was finalized, and

15
00:00:59,160 --> 00:01:02,680
it became a new standard, replacing DES.

16
00:01:02,680 --> 00:01:08,700
Like DES, AES is also a block cipher,
whereas in DES,

17
00:01:08,700 --> 00:01:14,080
the input plaintext block is 64 bit,
in AES it is 128 bit.

18
00:01:15,300 --> 00:01:18,170
In DES the key length is only 56 bit.

19
00:01:18,170 --> 00:01:25,052
In AES it can be 128, 192, or 256 bits.

20
00:01:25,052 --> 00:01:27,697
These key lengths are considered long

21
00:01:27,697 --> 00:01:32,300
enough to defeat brute force
attempt to search for a key.

22
00:01:32,300 --> 00:01:35,540
Here is a high level view of AES.

23
00:01:35,540 --> 00:01:38,410
The encryption process is as follows.

24
00:01:38,410 --> 00:01:43,130
Again, the plaintext block is
represented as a square matrix.

25
00:01:43,130 --> 00:01:48,260
We call it a state array, and
we first XOR with the key.

26
00:01:48,260 --> 00:01:52,210
Again, the key is also
represented as a square matrix.

27
00:01:52,210 --> 00:01:57,310
Then the state arrays go through
multiple rounds of encryption.

28
00:01:57,310 --> 00:02:03,560
At each round, it goes through several
operations that represent substitution

29
00:02:03,560 --> 00:02:09,740
and permutation, and also the round
key is XOR to this state array.

30
00:02:09,740 --> 00:02:14,570
The operations at each round
include substitute bytes.

31
00:02:14,570 --> 00:02:19,580
This involves using a table
referred to as a S box to perform

32
00:02:19,580 --> 00:02:23,120
byte to byte substitution of the block.

33
00:02:23,120 --> 00:02:28,680
Shift rows is a simple permutation
that is performed row by row.

34
00:02:28,680 --> 00:02:33,930
Mixed columns is a substitution
that alters each byte in a column

35
00:02:33,930 --> 00:02:37,190
as a function of all
the bytes in the column.

36
00:02:37,190 --> 00:02:41,080
And then the result is
XOR in a round key.

37
00:02:41,080 --> 00:02:46,310
The operations of the last round
includes substitute bytes,

38
00:02:46,310 --> 00:02:51,580
shift rows and add round key,
and the result is a cipher text.

39
00:02:51,580 --> 00:02:57,210
In AES, the decryption process runs
the algorithm in the reverse direction.

40
00:02:57,210 --> 00:03:02,010
This means that each of these
operations must be reversible.

41
00:03:02,010 --> 00:03:03,160
Let's take a look.

42
00:03:03,160 --> 00:03:06,870
Now, adding round key
involves the XOR operation.

43
00:03:06,870 --> 00:03:10,460
An XOR operation by
itself is reversible.

44
00:03:10,460 --> 00:03:14,450
The other operations, meaning
substitute bytes, shift rows, and

45
00:03:14,450 --> 00:03:19,470
mix columns, an inverse function
is used in a decryption algorithm.

46
00:03:19,470 --> 00:03:23,350
By using this inverse function,
we can reverse

47
00:03:23,350 --> 00:03:27,850
the action of substitute bytes that
was performed in the encryption.

48
00:03:27,850 --> 00:03:31,370
Likewise, we can reverse
the effects of shift rows and

49
00:03:31,370 --> 00:03:33,700
mix columns in the decryption process.

50
00:03:33,700 --> 00:03:37,570
Therefore, each of
the operations are reversible.

51
00:03:37,570 --> 00:03:41,450
As a result, when we run
the algorithm in the reverse order,

52
00:03:41,450 --> 00:03:44,975
we can decrypt the cipher
text back into the plaintext.
