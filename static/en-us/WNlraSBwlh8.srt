1
00:00:00,180 --> 00:00:02,430
Let's take a look at
the Handshake Protocol.

2
00:00:02,430 --> 00:00:08,370
As we have discussed, the Handshake
Protocol establishes a TLS session.

3
00:00:08,370 --> 00:00:10,910
And it negotiates
the security parameters

4
00:00:10,910 --> 00:00:13,108
between the client and the server.

5
00:00:13,108 --> 00:00:18,170
The phase one of the protocol,
establishes the security capabilities,

6
00:00:18,170 --> 00:00:23,100
it is initiated by the client sending
a client hello message to the server.

7
00:00:23,100 --> 00:00:27,170
The client hello message
contains a number of parameters

8
00:00:27,170 --> 00:00:31,543
including version number,
session ID, crypto suite,

9
00:00:31,543 --> 00:00:36,160
compression method, and
the initial random numbers.

10
00:00:36,160 --> 00:00:39,430
After sending the client a hello
message, the client waits for

11
00:00:39,430 --> 00:00:41,250
the server hello message,

12
00:00:41,250 --> 00:00:46,000
which contains the same kind of
parameters as the client hello message.

13
00:00:46,000 --> 00:00:49,210
Therefore, at the interface one,
both the client and

14
00:00:49,210 --> 00:00:53,360
the server know each other's
security capabilities.

15
00:00:53,360 --> 00:00:57,890
The details of Phase 2 depend on the
underlying public key encryption scheme

16
00:00:57,890 --> 00:00:59,830
that is being used.

17
00:00:59,830 --> 00:01:04,580
In some cases, the server passes
a certificate to the client, and

18
00:01:04,580 --> 00:01:08,800
possibly, some additional key
information and the request for

19
00:01:08,800 --> 00:01:11,030
a certificate from the client.

20
00:01:11,030 --> 00:01:14,490
The final message has
to be server hello done

21
00:01:14,490 --> 00:01:16,960
which indicates the end of phase two.

22
00:01:16,960 --> 00:01:22,330
In phase three, the server should first
verify the certificate of the server.

23
00:01:22,330 --> 00:01:26,060
For example if the client
is connecting to a server

24
00:01:26,060 --> 00:01:30,880
say Georgia Tech's website then
the client should be able to verify

25
00:01:30,880 --> 00:01:35,020
that the certificate contains
the Georgia Tech's public key.

26
00:01:35,020 --> 00:01:39,370
That is, the public key certificate
is Georgia Tech's public key

27
00:01:39,370 --> 00:01:42,160
signed by the public key of
the certificate authority.

28
00:01:42,160 --> 00:01:46,950
And the client has the private
key of the certificate authority

29
00:01:46,950 --> 00:01:49,190
to verify the certificate.

30
00:01:49,190 --> 00:01:54,040
Then the client can send key
exchange information to the server.

31
00:01:54,040 --> 00:01:58,390
For example the client can
generate a secret key and encrypt

32
00:01:58,390 --> 00:02:03,020
the secret key using the server's
public key and send it to the server.

33
00:02:03,020 --> 00:02:07,330
Depending on the application
requirements the client may send

34
00:02:07,330 --> 00:02:12,600
a certificate To the server in order
to authenticate the client to a server.

35
00:02:12,600 --> 00:02:17,280
Usually, if a website is public facing,
then the authentication is usually

36
00:02:17,280 --> 00:02:21,440
one way, that is, the client
needs to authenticate the server.

37
00:02:21,440 --> 00:02:27,080
But the server does not require
the client to authenticate his self.

38
00:02:27,080 --> 00:02:29,490
On the other hand, for internal or

39
00:02:29,490 --> 00:02:33,660
private web servers,
mutual authentication may be required.

40
00:02:33,660 --> 00:02:38,290
In phase two, the client sends
a change cipher spec message and

41
00:02:38,290 --> 00:02:42,590
copies the pending security parameters
to the current cipher spec.

42
00:02:42,590 --> 00:02:46,190
It then signals the completion
of the handshake protocol.

43
00:02:46,190 --> 00:02:49,850
In response, the server sends
its own change_cipher_spec.

44
00:02:49,850 --> 00:02:52,700
Therefore, they now agree
on the security parameters.

45
00:02:52,700 --> 00:02:56,960
And then the server sends its own
message to signal the end of handshake.

46
00:02:56,960 --> 00:03:00,765
At this point, the handshake
is complete and the client and

47
00:03:00,765 --> 00:03:05,182
server can begin to exchange
application layer data protected using

48
00:03:05,182 --> 00:03:07,710
the agreed upon security parameters.
