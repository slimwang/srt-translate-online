1
00:00:00,000 --> 00:00:03,720
And there are several ways to employ randomness in a more intelligent way

2
00:00:03,720 --> 00:00:05,600
but there is one that is actually quite common.

3
00:00:05,600 --> 00:00:10,150
Let's assume that this here is a huge list of all possible solutions.

4
00:00:10,150 --> 00:00:15,460
So, for NP complete problems or NP hard problems, this will be an exponentially large list,

5
00:00:15,460 --> 00:00:19,110
and the strategy of more intelligent random algorithms,

6
00:00:19,110 --> 00:00:21,590
and we're soon going to see a concrete example for that,

7
00:00:21,590 --> 00:00:27,520
is basically to randomly pick out certain solutions here in this list,

8
00:00:27,520 --> 00:00:32,570
and let's say that the list is ordered in some way, which I'm going to explain in more detail

9
00:00:32,570 --> 00:00:36,190
when we get to the concrete example, and then, the strategy is

10
00:00:36,190 --> 00:00:41,840
to explore solutions that lie around the ones that we randomly picked so like this.

11
00:00:41,840 --> 00:00:46,600
So, you would look at all of these solutions here, something like this.

12
00:00:46,600 --> 00:00:49,340
Now, of course, each time the algorithm runs here,

13
00:00:49,340 --> 00:00:54,350
it can only investigate a number of solutions that is polynomial in size,

14
00:00:54,350 --> 00:00:58,510
but of course the list of all potential solutions, so this whole thing here,

15
00:00:58,510 --> 00:01:03,650
has exponential size, and through the way in which you design this algorithm,

16
00:01:03,650 --> 00:01:08,050
well, first of all, you want to ensure that you land in good places so to say,

17
00:01:08,050 --> 00:01:11,730
and this is often, of course, not very trivial to prove how to do that,

18
00:01:11,730 --> 00:01:14,410
and the other thing is that you want to have a good and intelligent

19
00:01:14,410 --> 00:01:16,640
exploration of the area around your solution

20
00:01:16,640 --> 00:01:20,220
again something which is of not very easy to prove or show.

21
00:01:20,220 --> 00:01:22,520
Actually, we can't expect it to be any other way

22
00:01:22,520 --> 00:01:27,350
after all we're solving a very challenging namely NP hard or NP complete problem here.

23
00:01:27,350 --> 00:01:32,650
So, just to prepare you a little bit for the realities that you are about to face. Let's do another quiz.

24
00:01:32,650 --> 00:01:36,160
Let's say we have a randomized algorithm for an NP complete problem

25
00:01:36,160 --> 00:01:39,240
and that algorithm has a fixed error probability.

26
00:01:39,240 --> 00:01:43,440
Let's say the algorithm makes an error with a 90% chance

27
00:01:43,440 --> 00:01:47,120
and only gives us the correct answer with 10% chance.

28
00:01:47,120 --> 00:01:51,550
So, should we expect that a randomized algorithm for an NP complete problem

29
00:01:51,550 --> 00:01:56,370
that has a fixed error probability so to say with 90% chance gives us

30
00:01:56,370 --> 00:02:00,120
the wrong solution and with 10% gives us the correct one?

31
00:02:00,120 --> 00:02:03,070
Should we expect such an algorithm to run in polynomial time?

32
00:02:03,070 --> 00:02:06,080
And I'll give you three choices, and as always, more than one can be true.

33
00:02:06,080 --> 00:02:11,580
The first choice I'm offering you is no because if we would run that algorithm just a few times

34
00:02:11,580 --> 00:02:14,850
we would almost be guaranteed a correct solution

35
00:02:14,850 --> 00:02:17,890
even though this algorithm here that I am asking you about

36
00:02:17,890 --> 00:02:21,060
makes an error with a 90% chance for each time that we run it

37
00:02:21,060 --> 00:02:23,830
or if the answer no we should not expect that

38
00:02:23,830 --> 00:02:28,440
because the number of potential solutions is exponential, and the algorithm,

39
00:02:28,440 --> 00:02:32,940
since it runs in polynomial time, and this of course anthropomorphises a bit

40
00:02:32,940 --> 00:02:39,100
can only afford to check a small part of that exponential solution space if you will.

41
00:02:39,100 --> 00:02:43,280
And finally, one choice I'm offering you is yes, we should expect that

42
00:02:43,280 --> 00:02:45,920
because the laws of NP completeness

43
00:02:45,920 --> 00:02:50,070
that we have gotten to know in the past units do not account for randomness.

44
00:02:50,070 --> 00:02:56,440
So, just as these laws don't account for small basis or if we are content with an approximate solution,

45
00:02:56,440 --> 00:03:00,630
it could be that randomness makes such algorithms possible.

46
00:03:00,630 --> 99:59:59,999
So, please check all of these here that you think are correct.
