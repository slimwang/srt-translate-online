1
00:00:00,000 --> 00:00:04,000
We just talked about random testing in this larger context as part of the software process.

2
00:00:04,000 --> 00:00:07,000
What I'd like to talk about now is one of the more advanced and frankly difficult

3
00:00:07,000 --> 00:00:10,000
parts of building a really good random test case generally.

4
00:00:10,000 --> 00:00:13,000
As I was saying a little while ago, the best way to start random testing

5
00:00:13,000 --> 00:00:17,000
started early in the software process and starts simple, and what's going to come out

6
00:00:17,000 --> 00:00:20,000
of a simple random test case generator is often a collection of

7
00:00:20,000 --> 00:00:22,000
testing results that are not particularly great.

8
00:00:22,000 --> 00:00:26,000
That is to say we get shallow coverage, we violate many constraints on valid inputs

9
00:00:26,000 --> 00:00:30,000
and overall it doesn't work all that well, and probably we doesn't find that all many bugs

10
00:00:30,000 --> 00:00:32,000
and that's for testing a particularly weak system like for example,

11
00:00:32,000 --> 00:00:35,000
the UNIX command line utilities from around 1990.

12
00:00:35,000 --> 00:00:38,000
The thing to do with these results, look hard at the test cases.

13
00:00:38,000 --> 00:00:42,000
Think hard about how they relate to the overall shape of the input domain for the system.

14
00:00:42,000 --> 00:00:45,000
For example, it maybe that we are generating a super set of the input domain

15
00:00:45,000 --> 00:00:47,000
that is to say we're generating invalid inputs,

16
00:00:47,000 --> 00:00:50,000
but it's also likely that in many cases we're generating a subset of the domain.

17
00:00:50,000 --> 00:00:55,000
That is to say we're generating test cases that fail to explore some parts of the behavior space

18
00:00:55,000 --> 00:00:58,000
of the software under test, and that's going to lead to missed bugs.

19
00:00:58,000 --> 00:01:01,000
You should definitely look at the fact that the random test cases have on code coverage.

20
00:01:01,000 --> 00:01:04,000
Often this is extremely revealing cause as we've seen,

21
00:01:04,000 --> 00:01:06,000
it's really easy to write a random test case generator.

22
00:01:06,000 --> 00:01:08,000
It gets very shallow coverage of the software under test.

23
00:01:08,000 --> 00:01:11,000
The next step, here's what you've learn

24
00:01:11,000 --> 00:01:16,000
to adjust the rules that are in the fact for generating random test cases and to tweak the probabilities.

25
00:01:16,000 --> 00:01:21,000
If that sounds very vague at this point, then that's good because it is very vague.

26
00:01:21,000 --> 00:01:24,000
What I'm going to do a little bit is going to some specific examples.

27
00:01:24,000 --> 00:01:26,000
Of course, we can also add functionality to our random tester.

28
00:01:26,000 --> 00:01:30,000
As I was saying earlier, it's often good to do this in a very slow and incremental fashion

29
00:01:30,000 --> 00:01:33,000
so we avoid overloading people with bugs that they don't have time to fix,

30
00:01:33,000 --> 00:01:37,000
and this is an iterative process that doesn't stop as long as we're using the random tester.

31
00:01:37,000 --> 00:01:41,000
We should sort of kind of keep looking at it and trying to evaluate how we can better

32
00:01:41,000 --> 00:01:44,000
adjust the random tester to find interesting things out about the software that we're testing,

33
00:01:44,000 --> 00:01:47,000
and I don't mean to say here that this has to take a lot of time.

34
00:01:47,000 --> 00:01:51,000
Something you do is just anytime you have time every couple a weeks or whenever,

35
00:01:51,000 --> 00:01:55,000
just take a look at the test cases, take a look at the coverage, think about things a little bit,

36
00:01:55,000 --> 00:01:59,000
see if anything has changed in the software under test that might make you want to

37
00:01:59,000 --> 00:02:02,000
tweak the random tester, and basically you just to put it back into production.
