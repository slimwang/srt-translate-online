1
00:00:00,420 --> 00:00:02,630
I think you can see how to write
the algorithm at this point, but

2
00:00:02,630 --> 00:00:04,560
just to be complete,
let me formalize it.

3
00:00:05,930 --> 00:00:11,080
First, my algorithm maintains two
copies of the rank and next buffers.

4
00:00:11,080 --> 00:00:16,355
You need two copies because the
interfaces to update ranks subroutines,

5
00:00:16,355 --> 00:00:18,125
always wrote their outputs
to a separate copy.

6
00:00:19,165 --> 00:00:21,835
Remember that the extra copies
ensure that rights can happen

7
00:00:21,835 --> 00:00:22,955
in parallels safely.

8
00:00:23,975 --> 00:00:29,135
The algorithm itself basically just
does a sequence of sealing of log m

9
00:00:29,135 --> 00:00:31,295
update and jump steps.

10
00:00:31,295 --> 00:00:32,585
You can see the two copies here.

11
00:00:33,885 --> 00:00:37,880
After we do the simultaneous update and
jump steps, we do a swap.

12
00:00:37,880 --> 00:00:41,000
There's one last step you need,
which is to return either R1 or

13
00:00:41,000 --> 00:00:43,290
R2 depending on which was
the last copy updated.
