1
00:00:00,000 --> 00:00:05,000
In this problem, we have been asked to complete a finite state machine

2
00:00:05,000 --> 00:00:10,000
so that it matches exactly the strings that this regular expression matches.

3
00:00:10,000 --> 00:00:13,000
Let's take a moment to look at what this regular expression does.

4
00:00:13,000 --> 00:00:19,000
The first part matches one or more a's or b's in any order.

5
00:00:19,000 --> 00:00:24,000
Then we match 0 or more c's, or together d and e,

6
00:00:24,000 --> 00:00:27,000
and lastly, we have an optional f that we match.

7
00:00:27,000 --> 00:00:31,000
Let's take it one part at a time while simultaneously trying to understand

8
00:00:31,000 --> 00:00:34,000
the finite state machine that we have partially built below.

9
00:00:34,000 --> 00:00:39,000
From the initial state, we go from 1 to 2 via b.

10
00:00:39,000 --> 00:00:45,000
Well, if we look at our regular expression, it's also valid that our first character is an a,

11
00:00:45,000 --> 00:00:49,000
so this probably means that this transaction is an a.

12
00:00:49,000 --> 00:00:52,000
And here at state 2, we repeat with an a,

13
00:00:52,000 --> 00:00:56,000
but we can also repeat with a b as well,

14
00:00:56,000 --> 00:01:00,000
and so far, we have the first part of our finite state machine

15
00:01:00,000 --> 00:01:04,000
in which we match one or more a's and b's.

16
00:01:04,000 --> 00:01:07,000
The next portion is the c, d, e business,

17
00:01:07,000 --> 00:01:10,000
and we see in our partially finished finite state machine

18
00:01:10,000 --> 00:01:13,000
we take an epsilon transition to 3.

19
00:01:13,000 --> 00:01:17,000
This is 0 or more matches,

20
00:01:17,000 --> 00:01:20,000
and the f is optional, so at this point,

21
00:01:20,000 --> 00:01:23,000
it is possible to finish in an accepting state.

22
00:01:23,000 --> 00:01:29,000
However, we can have as many c's as we want and then still finish,

23
00:01:29,000 --> 00:01:32,000
so this loop right here is probably a c.

24
00:01:32,000 --> 00:01:34,000
We still haven't dealt with the d and e.

25
00:01:34,000 --> 00:01:36,000
If we look at the d go down to state 4,

26
00:01:36,000 --> 00:01:39,000
in order to finish in an accepting state, we need to follow with an e,

27
00:01:39,000 --> 00:01:41,000
and the last part is the optional f.

28
00:01:41,000 --> 00:01:44,000
There's only 1 f, and if it does match,

29
00:01:44,000 --> 00:01:46,000
we still finish in an accepting state, which is exactly what happens

30
00:01:46,000 --> 00:01:49,000
when we go from state 3 to state 5,

31
00:01:49,000 --> 00:01:52,000
and so these are the portions of the finite state machine that we're missing

32
00:01:52,000 --> 99:59:59,999
that perfectly match the given regular expression.
