1
00:00:00,250 --> 00:00:02,260
So we've seen how to use recursive definitions to make

2
00:00:02,260 --> 00:00:05,410
words, and to define concepts like ancestors. Now we're going

3
00:00:05,410 --> 00:00:07,760
to see how to use recursive definitions to define a

4
00:00:07,760 --> 00:00:11,120
procedure. And we're going to start with the procedure that we

5
00:00:11,120 --> 00:00:14,370
already defined in unit two. We defined the factorial procedure.

6
00:00:14,370 --> 00:00:17,620
And we defined factorial as the number of ways that

7
00:00:17,620 --> 00:00:21,620
we can order n items, and the input is the

8
00:00:21,620 --> 00:00:25,420
number n. And that could be calculated by multiplying n times

9
00:00:25,420 --> 00:00:32,390
n minus 1 times n minus 2, and so on until we get down to the 1.

10
00:00:32,390 --> 00:00:36,760
So that definition is not very precise mathematically,

11
00:00:36,760 --> 00:00:39,345
and the problem with this as a mathematical definition.

12
00:00:39,345 --> 00:00:40,820
Is, it's got this, dot dot dot in

13
00:00:40,820 --> 00:00:44,820
it, and humans sort of understand that correctly, what

14
00:00:44,820 --> 00:00:46,780
that dot dot dot means, but it's not a

15
00:00:46,780 --> 00:00:50,510
very precise mathematical definition. If we use a recursive

16
00:00:50,510 --> 00:00:52,940
definition, we can define factorial in a much more

17
00:00:52,940 --> 00:00:55,750
precise way. And we need to do that by

18
00:00:55,750 --> 00:00:58,890
giving a base case, so for the base case

19
00:00:58,890 --> 00:01:01,870
we want to think about the simplest input, something where

20
00:01:01,870 --> 00:01:05,269
we already know that answer. And for factorial, and

21
00:01:05,269 --> 00:01:08,770
for many procedures that involved numbers, the simplest input

22
00:01:08,770 --> 00:01:11,675
is the number 0. So if we try factorial

23
00:01:11,675 --> 00:01:16,040
0, the number of ways to arrange 0 things is

24
00:01:16,040 --> 00:01:21,030
defined as 1. So we know that result. That's going to be our base case.

25
00:01:23,040 --> 00:01:27,630
Now all we need to do is define the recursive case, where we want to define what

26
00:01:27,630 --> 00:01:32,650
the meaning of factorial for any number n is. Where n is any

27
00:01:32,650 --> 00:01:38,100
integer greater than 0, and we can define that in terms of

28
00:01:38,100 --> 00:01:43,600
the factorial of the smaller numbers. So if you look at this definition

29
00:01:43,600 --> 00:01:48,750
with the dot dot dot, well we see that the factorial of n is

30
00:01:48,750 --> 00:01:54,590
n times n minus 1 and so forth. Well, this what we have here, is actually the

31
00:01:54,590 --> 00:02:00,610
factorial of n minus 1. So that means that we can define the factorial then as

32
00:02:00,610 --> 00:02:03,680
n times the factorial of n minus 1.

33
00:02:03,680 --> 00:02:08,690
And that's our recursive case, and this definition matches

34
00:02:08,690 --> 00:02:11,550
our intuition well, if we think about factorial

35
00:02:11,550 --> 00:02:14,420
meaning the number of ways to arrange n objects.

36
00:02:14,420 --> 00:02:16,750
This corresponds exactly the way we think about this, that

37
00:02:16,750 --> 00:02:20,420
we have n ways to pick the first item. And once

38
00:02:20,420 --> 00:02:23,550
we've picked the first item, well, we have n items left,

39
00:02:23,550 --> 00:02:26,270
and factorial of n minus 1, gives us the number of

40
00:02:26,270 --> 00:02:29,580
ways to arrange the remaining n minus 1 items. So

41
00:02:29,580 --> 00:02:32,510
that's a way to define this mathematically. So now, I'll leave

42
00:02:32,510 --> 00:02:34,670
it to you as a quiz, to figure out how to

43
00:02:34,670 --> 00:02:38,790
define a procedure, that computes factorial without using a y loop.
