1
00:00:00,000 --> 00:00:04,370
So in the last unit, we talked about the simple algorithms

2
00:00:04,370 --> 00:00:09,190
for our three problems that have to go through an exponential number of solutions

3
00:00:09,190 --> 00:00:13,900
to try all possible assignments of 0 and 1 to the vertices.

4
00:00:13,900 --> 00:00:21,260
And now I haven't told you yet what this super powerful computer down here in the left corner

5
00:00:21,260 --> 00:00:25,840
is actually capable of and the ability that this computer here has

6
00:00:25,840 --> 00:00:32,820
is that it can help us figure out the best possible 0 and 1 assignment to the vertices

7
00:00:32,820 --> 00:00:35,250
without actually going through them.

8
00:00:35,250 --> 00:00:41,470
And the way this computer can help us is that it has a special instruction that a normal computer

9
00:00:41,470 --> 00:00:46,990
or even the RAM model does not have and that instruction is called if-better.

10
00:00:46,990 --> 00:00:50,040
And I'm going to explain to you in a second what that means.

11
00:00:50,040 --> 00:00:55,170
So the if-better function basically works like a normal if-else instruction on the RAM.

12
00:00:55,170 --> 00:01:01,580
So the normal if-else instruction is if this part here which I haven't specified yet is true

13
00:01:01,580 --> 00:01:07,950
then this part of the code not yet written is executed and otherwise this part down here is executed.

14
00:01:07,950 --> 00:01:13,780
The second property is that calling the if-better function will cost us polynomial time.

15
00:01:13,780 --> 00:01:19,280
So a normal if-else on the RAM just costs one time step or constant time

16
00:01:19,280 --> 00:01:22,420
and calling this function here will cost polynomial time.

17
00:01:22,420 --> 00:01:24,620
And now here comes the special property of this function.

18
00:01:24,620 --> 00:01:29,250
Normally when you have an if, you would have to specify some condition here so that

19
00:01:29,250 --> 00:01:32,910
if the condition is satisfied this part of the code is executed.

20
00:01:32,910 --> 00:01:36,300
And if it's not satisfied, then this part here is executed.

21
00:01:36,300 --> 00:01:42,740
Now the if-better is a function that will figure out by itself if it's better for us,

22
00:01:42,740 --> 00:01:45,140
and I'm going to show you in a minute what I mean by that,

23
00:01:45,140 --> 00:01:50,290
if it's better for us to execute this part up here or this part down here.

24
00:01:50,290 --> 00:01:55,270
It will always, if you will, guess correctly which part of the code to execute.

25
00:01:55,270 --> 00:01:57,940
Now, the first time you hear this, it takes a bit getting used to.

26
00:01:57,940 --> 00:02:02,190
So let me give you one example for our vertex cover how we could use this powerful function

27
00:02:02,190 --> 99:59:59,999
to solve vertex cover almost trivially.
