1
00:00:00,136 --> 00:00:04,280
Final note on sort. All the algorithms we discussed were what we call key sorts,

2
00:00:04,280 --> 00:00:08,444
where we only sort a set of keys. Many interesting applications, however,

3
00:00:08,444 --> 00:00:12,216
require that you sort not just a key, but a value associated with that key.

4
00:00:12,216 --> 00:00:17,555
For instance, in unit two Dave described sorting a set of NBA players by height.

5
00:00:17,555 --> 00:00:22,297
In this case, the key might be the height, and the value would be the player's name,

6
00:00:22,297 --> 00:00:25,926
the player's team, the player's history and so on.

7
00:00:25,926 --> 00:00:29,531
Dealing with values as well as keys is pretty straightforward.

8
00:00:29,531 --> 00:00:35,139
First, if you have a value that's large in terms of bytes, it's usually smarter to make the value instead,

9
00:00:35,139 --> 00:00:39,710
a pointer to the actual data, and then just sort the value and its pointer.

10
00:00:39,710 --> 00:00:45,599
For instance, if you had a large NBA player data structure, don't sort the whole data structure as the value.

11
00:00:45,599 --> 00:00:48,618
Instead, just use a pointer to the data structure as the value.

12
00:00:48,618 --> 00:00:52,830
Second, our sort algorithms generally move around data keys,

13
00:00:52,830 --> 00:00:56,633
whether that be a sorting network, or a radix sort, or a merge.

14
00:00:56,633 --> 00:01:00,363
Instead of just moving the key, if you have to deal with a key value sort,

15
00:01:00,363 --> 00:01:03,433
move the key and the value together as one unit.

16
00:01:03,433 --> 00:01:07,535
Finally, since today's GPUs can often natively handle 64-bit data,

17
00:01:07,535 --> 00:01:14,045
it might make sense to use a 64-bit data type to store both a 32-bit key and a 32-bit value

18
00:01:14,045 --> 00:01:18,782
and just change any comparison functions you have to input 64-bit values instead.
