1
00:00:00,175 --> 00:00:04,509
We're going to introduce one of the most important parallel primitives--scan.

2
00:00:04,509 --> 00:00:07,926
Let me give you a very short example of a scan operation.

3
00:00:07,926 --> 00:00:11,593
The input to scan is a list of numbers, such as 1, 2, 3, 4,

4
00:00:11,593 --> 00:00:13,961
and an operation, such as add,

5
00:00:13,961 --> 00:00:17,201
and the output is the running sum of those numbers.

6
00:00:17,201 --> 00:00:22,300
So each output is the sum of all the numbers in the input up to that given point.

7
00:00:22,300 --> 00:00:25,239
6 is the sum of 1, 2, and 3.

8
00:00:25,239 --> 00:00:28,907
Scan is important because it allows us to address a set of problems

9
00:00:28,907 --> 00:00:31,276
that seem difficult to parallelize.

10
00:00:31,276 --> 00:00:36,765
At first glance it might seem difficult to compute this output from this input in parallel

11
00:00:36,765 --> 00:00:40,394
because each element in the output depends on the previous element.

12
00:00:40,394 --> 00:00:45,427
So 1st we compute this, add 2 and get 3, add 3 and get 6, add 4 and get 10.

13
00:00:45,427 --> 00:00:47,832
That doesn't seem like a very parallel operation.

14
00:00:47,832 --> 00:00:51,870
But this style of operation turns out to be incredibly useful.

15
00:00:51,870 --> 00:00:56,670
It's also interesting because scan is just not a very useful operation in the serial world.

16
00:00:56,670 --> 00:00:59,836
It's really only useful when you're doing parallel computation.

17
00:00:59,836 --> 00:01:03,341
But once you know it and use it, you'll wonder what you ever did without it.

18
00:01:04,370 --> 00:01:09,374
There's lots of uses for scan, with compaction and allocation being 2 of the most popular.

19
00:01:09,374 --> 00:01:12,542
Later in this lecture we'll discuss histogram, which uses scan.

20
00:01:12,542 --> 00:01:15,986
And our research group has used scan for quick sort, for sparse matrix computation,

21
00:01:15,986 --> 00:01:20,000
and for data compression, among others. It's a very useful parallel primitive.

22
00:01:20,000 --> 00:01:23,896
But for this part of the lecture I'm only going to concentrate on what scan does

23
00:01:23,896 --> 00:01:26,628
and how it works rather than how it's useful.

24
00:01:26,628 --> 00:01:30,441
We'll learn about some more general scan applications in the next unit.
