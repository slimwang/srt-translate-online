1
00:00:00,000 --> 00:00:04,120
Choosing the right algorithm and choosing an appropriate floating-point format

2
00:00:04,120 --> 00:00:09,080
are just 2 of the issues we encounter when we implement a solver,

3
00:00:09,080 --> 00:00:11,760
a program to solve a differential equation.

4
00:00:11,760 --> 00:00:16,309
On a higher level, one may think about reusability and maintainability.

5
00:00:16,309 --> 00:00:19,840
This is my replica rendering of the Plug and Play style

6
00:00:19,840 --> 00:00:23,020
of implementation that's used in the book "Numerical Recipes."

7
00:00:23,020 --> 00:00:27,100
With this type of implementation, you can mix and match components,

8
00:00:27,100 --> 00:00:29,920
which comes in very handy for experiments.

9
00:00:29,920 --> 00:00:33,240
Let's have a closer look: 1 minor but vital component

10
00:00:33,240 --> 00:00:37,680
is the right hand side; the right hand side of the differential equation, that is.

11
00:00:37,680 --> 00:00:40,320
The rate of change. It's used by the algorithm,

12
00:00:40,320 --> 00:00:46,060
the algorithm being, for instance, the forward Euler method, Hunt's method, and similar.

13
00:00:46,060 --> 00:00:48,370
The algorithm is called by the stepper.

14
00:00:48,370 --> 00:00:52,420
which controls which steps are being made at which size.

15
00:00:52,420 --> 00:00:55,130
The stepper is responsible to adapt the step sizes

16
00:00:55,130 --> 00:00:59,610
and maybe to reduce the steps when it finds the error has grown too large.

17
00:00:59,610 --> 00:01:03,790
So the algorithm is only able to do 1 single step.

18
00:01:03,790 --> 00:01:06,100
The stepper calls the algorithm.

19
00:01:06,100 --> 00:01:08,810
The driver is the interface to the user,

20
00:01:08,810 --> 00:01:11,590
which, of course, is a program and not a human.

21
00:01:11,590 --> 00:01:14,730
The driver can be sent commands to start and stop,

22
00:01:14,730 --> 00:01:18,400
and eventually the driver returns the data to the user.

23
00:01:18,400 --> 00:01:21,630
To this end, it has a subobject that's called output.

24
00:01:21,630 --> 00:01:26,460
The output may collect values at predefined instances of time,

25
00:01:26,460 --> 00:01:32,630
or it may interpolate the data it receives from the stepper to regular time intervals.

26
00:01:32,630 --> 00:01:36,300
The stepper will pick smaller and larger time intervals.

27
00:01:36,300 --> 99:59:59,999
The output may interpolate them to produce data at regular time intervals.
