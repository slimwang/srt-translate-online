1
00:00:00,500 --> 00:00:03,719
So now, that you know how
individual UI elements are sized.

2
00:00:03,719 --> 00:00:06,730
Let's talk about how to start
arranging them together.

3
00:00:06,730 --> 00:00:10,680
Let's have a quick refresher on what you
learned in Android Fundamentals 1 about

4
00:00:10,680 --> 00:00:12,740
the core layout managers.

5
00:00:12,740 --> 00:00:15,580
Like frame layout, linear layout,
and relative layout.

6
00:00:15,580 --> 00:00:18,870
Now, remember a frame layout
arranges the views inside it,

7
00:00:18,870 --> 00:00:22,410
one on top of each other and
each view can have a gravity or

8
00:00:22,410 --> 00:00:25,490
stretch to fill the width or
height of the parent frame layout.

9
00:00:25,490 --> 00:00:29,840
So frame layouts are a great way
to display overlapping content.

10
00:00:29,840 --> 00:00:33,430
A linear layout arranges its
children in a single direction.

11
00:00:33,430 --> 00:00:34,160
For example,

12
00:00:34,160 --> 00:00:37,730
a vertical linear layout arranges
its children from top to bottom.

13
00:00:37,730 --> 00:00:41,070
Linear layout is one of the most useful
layouts to have in your toolbox.

14
00:00:41,070 --> 00:00:43,690
You can create pretty
much any layout with it.

15
00:00:43,690 --> 00:00:48,080
Be careful though not to over rely
on this as another layout might be

16
00:00:48,080 --> 00:00:51,450
more efficient way to
create the desired effect.

17
00:00:51,450 --> 00:00:55,870
A relative layout arranges its chart
views relative to each other or

18
00:00:55,870 --> 00:00:56,980
to its bounds.

19
00:00:56,980 --> 00:01:01,150
So for example,
a field can align to the top left or

20
00:01:01,150 --> 00:01:04,840
top right or to the bottom
edge of the relative layout.

21
00:01:04,840 --> 00:01:06,740
While a relative layout can be powerful,

22
00:01:06,740 --> 00:01:09,240
it also has some
performance implications.

23
00:01:09,240 --> 00:01:12,440
So be weary of using this layout
especially near the root of your

24
00:01:12,440 --> 00:01:13,790
hierarchy.

25
00:01:13,790 --> 00:01:18,070
A GridLayout arranges
children in a grid, shocker.

26
00:01:18,070 --> 00:01:20,420
When each child has a given row or

27
00:01:20,420 --> 00:01:24,750
column within that grid, they can be
arranged automatically in any direction.

28
00:01:24,750 --> 00:01:28,555
And now, have a weight property
in order to fill a column or row.

29
00:01:28,555 --> 00:01:32,730
GridLayout is a great way if you want
to align content along multiple axes,

30
00:01:32,730 --> 00:01:36,030
such as vertically and
horizontally at the same time in a grid

31
00:01:36,030 --> 00:01:40,322
which you would be hard to achieve with
a different nested layout manager.

32
00:01:40,322 --> 00:01:44,160
A ScrollView is a very simple view
which holds one single child.

33
00:01:44,160 --> 00:01:47,480
It allows you to scroll its contents,
either up or down.

34
00:01:47,480 --> 00:01:50,100
In under fundamentals,
we also touched on ListView and

35
00:01:50,100 --> 00:01:53,910
its newer cousins RecyclerView and
ViewPager and how it dynamically uses

36
00:01:53,910 --> 00:01:58,900
a small number of child views to present
a small window into a larger collection.

37
00:01:58,900 --> 00:02:02,120
ListView and RecyclerView let you
scroll through a list of items,

38
00:02:02,120 --> 00:02:06,400
while ViewPager let's you horizontally
page through individual items.

39
00:02:06,400 --> 00:02:10,100
To understand when to use a particular
view group, let's take a look at some

40
00:02:10,100 --> 00:02:14,520
examples of real world screens and
talk about how you would build them.

41
00:02:14,520 --> 00:02:16,400
After that, we'll show you a quiz and

42
00:02:16,400 --> 00:02:21,400
ask you, yes you, to apply layouts
to build up a relatively complex UI.
