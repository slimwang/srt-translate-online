1
00:00:00,310 --> 00:00:03,976
In order to propagate wins and losses
up the game tree to the point where our

2
00:00:03,976 --> 00:00:07,963
computer player can make a decision, we
need to start at the bottom of the tree.

3
00:00:07,963 --> 00:00:10,375
Let's start with the left
side of the tree.

4
00:00:10,375 --> 00:00:12,667
In the left most branch, o wins.

5
00:00:12,667 --> 00:00:14,999
The next branch over,

6
00:00:14,999 --> 00:00:18,419
o never gets to use the last square
on the game board and loses.

7
00:00:18,420 --> 00:00:21,130
Since our opponent x plays to win and

8
00:00:21,129 --> 00:00:25,570
minimizes o's score, it will
never choose the leftmost branch.

9
00:00:25,570 --> 00:00:27,657
Instead, it will choose this branch,

10
00:00:27,657 --> 00:00:31,083
which is guaranteed to give
the computer player a score of -1.

11
00:00:31,083 --> 00:00:34,467
However, our computer player
can avoid this situation

12
00:00:34,468 --> 00:00:36,805
by making a wiser choice one level up.

13
00:00:36,804 --> 00:00:41,509
Both branches of this tree lead
to victory and scores a +1.

14
00:00:41,509 --> 00:00:45,509
We can keep propagating these scores
up the tree, alternating min and

15
00:00:45,509 --> 00:00:48,149
max levels, until we arrive at the top.

16
00:00:48,149 --> 00:00:50,420
This process of computing values for
each node,

17
00:00:50,420 --> 00:00:53,649
bottom to top,
is known as the minimax algorithm.

18
00:00:53,649 --> 00:00:58,171
For each max node, pick the maximum
value among its child nodes.

19
00:00:58,171 --> 00:01:03,159
If there's at least one +1 child, the
computer can always pick that to win.

20
00:01:03,159 --> 00:01:07,319
Otherwise, it can never win from that
point on assuming a perfect opponent.

21
00:01:07,319 --> 00:01:12,741
Of course to represent the opponent at
each min node, we pick minimum value.

