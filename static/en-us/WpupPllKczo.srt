1
00:00:00,000 --> 00:00:04,000
These easy-to-write FSMs that we've been using

2
00:00:04,000 --> 00:00:07,000
that involve epsilon transitions or ambiguity--

3
00:00:07,000 --> 00:00:11,000
remember, ambiguity means that I can go to 2 different places on the same input--

4
00:00:11,000 --> 00:00:16,000
are formerly known as non-deterministic finite state machines.

5
00:00:16,000 --> 00:00:19,000
Non-deterministic here just means that you may not know exactly

6
00:00:19,000 --> 00:00:21,000
where to go or where to put your finger.

7
00:00:21,000 --> 00:00:24,000
It's not lock-step. You have choices.

8
00:00:24,000 --> 00:00:26,000
You have freedom.

9
00:00:26,000 --> 00:00:29,000
A lock-step FSM with no epsilon transitions

10
00:00:29,000 --> 00:00:34,000
and no ambiguity by contrast is called a deterministic finite state machine.

11
00:00:34,000 --> 00:00:36,000
Everything is determined from the start.

12
00:00:36,000 --> 00:00:38,000
Given the finite state machine and the input, you always know

13
00:00:38,000 --> 00:00:40,000
exactly what will happen.

14
00:00:40,000 --> 00:00:43,000
Our finite state machine simulation procedure can handle

15
00:00:43,000 --> 00:00:46,000
deterministic finite state machines.

16
00:00:46,000 --> 00:00:49,000
That makes them really useful for implementing regular expressions

17
00:00:49,000 --> 00:00:51,000
under the hood.

18
00:00:51,000 --> 00:00:55,000
Let me just show you an example of this non-determinism just to drive it home.

19
00:00:55,000 --> 00:00:57,000
Suppose we were back here in this previous finite state machine,

20
00:00:57,000 --> 00:01:00,000
but now the input is 1-23.

21
00:01:00,000 --> 00:01:02,000
Where are we?

22
00:01:02,000 --> 00:01:05,000
We started here, and on a 1 we went here,

23
00:01:05,000 --> 00:01:08,000
and then I guess if we're supposed to stay alive and there's a hyphen,

24
00:01:08,000 --> 00:01:11,000
we must have gone here and taken the hyphen.

25
00:01:11,000 --> 00:01:14,000
And now there's a 2, but now this is really not obvious.

26
00:01:14,000 --> 00:01:17,000
I could stay here on this self-loop for a 3,

27
00:01:17,000 --> 00:01:20,000
or I could have gone back on this free epsilon transition

28
00:01:20,000 --> 00:01:25,000
and done the self-loop here on a 3, so I could be in state 2 or state 5.

29
00:01:25,000 --> 00:01:28,000
Since there isn't one single answer for where I could be,

30
00:01:28,000 --> 00:01:30,000
this is non-deterministic.

31
00:01:30,000 --> 00:01:34,000
As a bit of a fun aside, this notion of determinism

32
00:01:34,000 --> 00:01:39,000
or non-determinism can be related to the question of free will in philosophy.

33
00:01:39,000 --> 00:01:42,000
Can we actually make independent choices?

34
00:01:42,000 --> 00:01:45,000
Or is everything preordained by the current state of the world

35
00:01:45,000 --> 00:01:51,000
and forces acting on it, like a lock-step game of billiards or snooker or pool?

36
00:01:51,000 --> 00:01:53,000
Some philosophers will approach this by suggesting that we have

37
00:01:53,000 --> 00:01:57,000
the illusion of free will--that's a disconcerting thought--

38
00:01:57,000 --> 00:02:00,000
which is handy for describing subjective experience.

39
00:02:00,000 --> 00:02:02,000
We certainly often feel like we have free will.

40
00:02:02,000 --> 00:02:05,000
Regardless of what's going on in the real world,

41
00:02:05,000 --> 00:02:07,000
we're going to see that something similar holds

42
00:02:07,000 --> 00:02:09,000
for finite state machines.

43
00:02:09,000 --> 00:02:12,000
Although non-deterministic finite state machines look like they have

44
00:02:12,000 --> 00:02:14,000
much more power and much more freedom,

45
00:02:14,000 --> 00:02:17,000
anything that could be done with them could also be done

46
00:02:17,000 --> 00:02:19,000
in our deterministic billiard ball world.

47
00:02:19,000 --> 00:02:23,000
In fact, you can watch me suck free will out of this world right now.

48
00:02:23,000 --> 00:02:26,000
Every non-deterministic finite state machine

49
00:02:26,000 --> 00:02:29,000
has a corresponding deterministic finite state machine

50
00:02:29,000 --> 00:02:33,000
that accepts exactly the same strings.

51
00:02:33,000 --> 00:02:37,000
Non-deterministic finite state machines are not any more powerful

52
00:02:37,000 --> 00:02:39,000
than deterministic finite state machines.

53
00:02:39,000 --> 00:02:42,000
They're just more convenient.

54
00:02:42,000 --> 00:02:44,000
It's easier to write them down.

55
00:02:44,000 --> 00:02:46,000
Let's see an example of this extraordinary claim.

56
00:02:46,000 --> 00:02:48,000
Suppose we have this regular expression.

57
00:02:48,000 --> 00:02:51,000
There are only 2 strings in the language of this regular expression,

58
00:02:51,000 --> 00:02:55,000
but here I've drawn out a very elaborate finite state machine for it

59
00:02:55,000 --> 00:02:57,000
that has epsilon transitions coming out the wazoo.

60
00:02:57,000 --> 00:03:00,000
This is very non-deterministic.

61
00:03:00,000 --> 00:03:03,000
We definitely need to see an a, but then here these 2 epsilon transitions

62
00:03:03,000 --> 00:03:05,000
represent the explicit choice.

63
00:03:05,000 --> 00:03:08,000
Do I do the b, or do I skip over it?

64
00:03:08,000 --> 00:03:10,000
On the top road, we need to see the b.

65
00:03:10,000 --> 00:03:13,000
On the bottom road, we skip entirely past it.

66
00:03:13,000 --> 00:03:15,000
And then in any event, we need to see the c.

67
00:03:15,000 --> 00:03:19,000
I'm now going to write a deterministic finite state machine

68
00:03:19,000 --> 00:03:22,000
that does exactly the same thing, and I'm going to hint at

69
00:03:22,000 --> 00:03:24,000
how this conversion works.

70
00:03:24,000 --> 00:03:26,000
We'll see this again in just a minute.

71
00:03:26,000 --> 00:03:29,000
After I see an a, I could be in 2,

72
00:03:29,000 --> 00:03:31,000
or I could take the epsilon to 3.

73
00:03:31,000 --> 00:03:33,000
I could have taken the epsilon down here to 6

74
00:03:33,000 --> 00:03:36,000
or all the way over to 4, so there are 4 places

75
00:03:36,000 --> 00:03:38,000
I could be in.

76
00:03:38,000 --> 00:03:40,000
That's a lot of fingers.

77
00:03:40,000 --> 00:03:44,000
I'll just record all of them as the name for my new state, 2364.

78
00:03:44,000 --> 00:03:49,000
From here, if I see a b and I survive--remember, finite state machines work

79
00:03:49,000 --> 00:03:54,000
if there's any path that gets to the end--it must have been that I was in state 3,

80
00:03:54,000 --> 00:03:57,000
at which point now I'm just in state 4.

81
00:03:57,000 --> 00:04:03,000
By contrast, if I was back here and I saw a c,

82
00:04:03,000 --> 00:04:06,000
it must have been that I was in state 4, and now I'm in state 5.

83
00:04:06,000 --> 00:04:10,000
And then finally, if I'm in state 4 and I see a c,

84
00:04:10,000 --> 00:04:13,000
I end up here, so this deterministic finite state machine

85
00:04:13,000 --> 00:04:17,000
accepts the same language as the one above.

86
00:04:17,000 --> 00:04:20,000
The 2 strings, a, b, c, and a, c

87
00:04:20,000 --> 00:04:23,000
are both in it, but it does not have

88
00:04:23,000 --> 00:04:25,000
epsilon transitions or ambiguity.

89
00:04:25,000 --> 00:04:29,000
In any particular node, there are never 2 edges going out labeled a,

90
00:04:29,000 --> 00:04:31,000
and there are never epsilon transitions.

91
00:04:31,000 --> 00:04:34,000
Let's see another example of how this works.

92
00:04:34,000 --> 00:04:37,000
Again, I'm going to build a deterministic machine

93
00:04:37,000 --> 00:04:40,000
where every state in the deterministic machine

94
00:04:40,000 --> 00:04:44,000
corresponds to a set of states

95
00:04:44,000 --> 00:04:46,000
in the non-deterministic one.

96
00:04:46,000 --> 00:04:50,000
Again, to restate that, you give me a non-deterministic machine,

97
00:04:50,000 --> 00:04:53,000
I'm going to build you a deterministic machine d

98
00:04:53,000 --> 00:04:57,000
that accepts the same language, and the way I'll do it is

99
00:04:57,000 --> 00:05:01,000
every state in d is going to correspond to a set of states

100
00:05:01,000 --> 99:59:59,999
in the non-deterministic machine you gave me.
