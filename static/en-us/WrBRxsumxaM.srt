1
00:00:00,470 --> 00:00:04,910
Using Postman and Curl were great
tools for building our http requests.

2
00:00:04,910 --> 00:00:07,500
But let's create these requests and
responses in Python so

3
00:00:07,500 --> 00:00:11,040
that we can embed those functionalities
into our server-side code.

4
00:00:11,040 --> 00:00:13,780
Let's start by writing a simple
Python application that does

5
00:00:13,780 --> 00:00:16,740
the geolocation API requests for us.

6
00:00:16,740 --> 00:00:20,389
I'm going to name this
Python program geocode.py.

7
00:00:20,389 --> 00:00:25,290
I will import the httplib2 and
json libraries into my program.

8
00:00:25,290 --> 00:00:30,200
Httplib2 is a comprehensive
http client library in Python.

9
00:00:30,200 --> 00:00:32,030
And the JSON library in Python is for

10
00:00:32,030 --> 00:00:35,789
converting in-memory Python objects
to a serialized JSON representation.

11
00:00:36,830 --> 00:00:40,110
Now, I will create a function and
call it getGeocodeLocation.

12
00:00:40,110 --> 00:00:42,940
It will take in an input string,
that is the name for

13
00:00:42,940 --> 00:00:45,500
the place we want to get
the coordinates for.

14
00:00:45,500 --> 00:00:49,109
Then, I create a variable for
storing my google_api_key.

15
00:00:49,109 --> 00:00:51,350
You should paste in your key here.

16
00:00:51,350 --> 00:00:53,890
Having your secret keys
visible in your Python code

17
00:00:53,890 --> 00:00:56,210
isn't the safest practice for live code.

18
00:00:56,210 --> 00:00:57,460
But it's fine for this activity.

19
00:00:58,550 --> 00:01:02,850
Now, in my input string, I need to
replace any spaces with plus signs, such

20
00:01:02,850 --> 00:01:06,920
that there are no breaks in my URL path,
and the server can read it correctly.

21
00:01:06,920 --> 00:01:08,390
I do that with
the replace function here.

22
00:01:08,390 --> 00:01:12,720
I then build the URL here and
pass in the location string and

23
00:01:12,720 --> 00:01:14,620
my Google API key.

24
00:01:14,620 --> 00:01:19,420
Next, I create an instance of
the http class and name it h.

25
00:01:19,420 --> 00:01:22,700
I can now create a GET request
with the request method here.

26
00:01:22,700 --> 00:01:27,500
This request will return an array with
two values, the http response and

27
00:01:27,500 --> 00:01:28,110
the content.

28
00:01:28,110 --> 00:01:31,110
I will call json.loads on the content

29
00:01:31,110 --> 00:01:34,640
to format it in a way that is easier to
read, but still in proper JSON format.

30
00:01:35,690 --> 00:01:38,520
Now, just so we can see what
the response header looks like,

31
00:01:38,520 --> 00:01:40,330
I will have it print to the terminal.

32
00:01:40,330 --> 00:01:43,190
And then I will return the result
variable which contains the formatted

33
00:01:43,190 --> 00:01:45,020
content that I requested.

34
00:01:45,020 --> 00:01:48,180
Now, I will save my code and
start a Python instance in the terminal,

35
00:01:48,180 --> 00:01:50,960
in the same directory where
my geocode.py file is.

36
00:01:51,978 --> 00:01:55,170
I import the getGeocodeLocation
method from the geocode file, and

37
00:01:55,170 --> 00:01:59,300
we're trying to get the location
of my hometown, Dallas, Texas.

38
00:01:59,300 --> 00:02:03,950
Here, we can see that our response
header contains a successful status code

39
00:02:03,950 --> 00:02:07,940
along with a lot of other meta data
that Google provided with our request.

40
00:02:07,940 --> 00:02:10,560
Looking at the actual
content of the response,

41
00:02:10,560 --> 00:02:14,770
we see that we got a lot more data than
just latitude and longitude coordinates.

42
00:02:14,770 --> 00:02:18,840
But nevertheless, the information we
requested is in the response somewhere.

43
00:02:18,840 --> 00:02:21,930
In this next video, let's see if we can
figure out a way to parse through all of

44
00:02:21,930 --> 00:02:23,540
this information in this response.
