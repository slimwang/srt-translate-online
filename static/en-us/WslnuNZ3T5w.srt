1
00:00:00,000 --> 00:00:03,000
So, what I'd like to do now is talk quickly about an example of testing done right.

2
00:00:03,000 --> 00:00:07,000
The example that I'm going to use is an open source database called SQLite.

3
00:00:07,000 --> 00:00:09,000
And you can read about it more at the URL here.

4
00:00:09,000 --> 00:00:12,000
And so what SQLite is, this small open source database which is designed to be

5
00:00:12,000 --> 00:00:14,000
easily embeddable in other applications.

6
00:00:14,000 --> 00:00:18,000
It's really very widely used by companies like Airbus and Dropbox.

7
00:00:18,000 --> 00:00:21,000
It's used in various Apple products, Android phones run SQLite inside

8
00:00:21,000 --> 00:00:23,000
and really a lot more examples.

9
00:00:23,000 --> 00:00:27,000
And by the way, SQLite has good Python bindings if you want to use it yourself.

10
00:00:27,000 --> 00:00:30,000
So, this database is implemented in about 78,000 lines of code.

11
00:00:30,000 --> 00:00:35,000
So, you can see it's a sort of a medium to small size project as software projects go.

12
00:00:35,000 --> 00:00:39,000
Now, on the other hand, the test suite for SQLite comes out to more than 91 million lines of codes.

13
00:00:39,000 --> 00:00:42,000
So another way to think about that is, it's more than 1000 times more tests than code.

14
00:00:42,000 --> 00:00:48,000
So, if we have SQLite's code over here, it can be dwarfed by this gigantic mountain of test code.

15
00:00:48,000 --> 00:00:51,000
And so we might ask as well, what's in this test code? How is SQLite tested?

16
00:00:51,000 --> 00:00:54,000
What it turns out is the author of SQLite has achieved

17
00:00:54,000 --> 00:00:57,000
a 100 percent branch coverage and 100% MCDC coverage.

18
00:00:57,000 --> 00:00:59,000
The author has done a large amount of random testing

19
00:00:59,000 --> 00:01:01,000
and that'll be the subject of units 4, 5, and 6 of this class.

20
00:01:01,000 --> 00:01:04,000
Counter value testing has been used. The code contains a ton of assertions.

21
00:01:04,000 --> 00:01:07,000
It's one of the val render tool I mentioned earlier that is good

22
00:01:07,000 --> 00:01:09,000
for finding bugs in programs written in C.

23
00:01:09,000 --> 00:01:11,000
SQLIte is subjected to integer over flow checks and a large

24
00:01:11,000 --> 00:01:14,000
amount of false injection test are performed.

25
00:01:14,000 --> 00:01:18,000
So, what you can see here is that almost everything I've told you about in this course so far.

26
00:01:18,000 --> 00:01:23,000
Almost every single testing technique and many of the coverage metrics have been applied to SQLite,

27
00:01:23,000 --> 00:01:25,000
and the result is generally, a really solid piece of software.

28
00:01:25,000 --> 00:01:27,000
One reaction you might have when you see a thousand times

29
00:01:27,000 --> 00:01:30,000
more tests than code is that it's pretty extreme.

30
00:01:30,000 --> 00:01:33,000
On the other hand, when you consider the large number and wide variety of users that SQLite has,

31
00:01:33,000 --> 00:01:36,000
it's pretty great that it has been tested so thoroughly.

32
00:01:36,000 --> 00:01:39,000
Of course, what I'm not doing here is advocating that you go out and write

33
00:01:39,000 --> 00:01:41,000
a thousand times more lines of tests than you have code.

34
00:01:41,000 --> 00:01:43,000
On the other hand, it's nice to see that certain people

35
00:01:43,000 --> 99:59:59,999
who have extremely widely used codes actually do this kind of thing.
