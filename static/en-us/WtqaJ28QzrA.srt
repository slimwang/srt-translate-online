1
00:00:00,280 --> 00:00:03,560
Now for the formal definition
of a polynomial reduction.

2
00:00:03,560 --> 00:00:06,440
This should feel very similar to the
reductions that we considered when we

3
00:00:06,440 --> 00:00:07,700
were talking about computability.

4
00:00:09,020 --> 00:00:14,050
A language, A, is polynomial reducible
to a language, B, and we write this as

5
00:00:14,050 --> 00:00:18,020
A less than or equal to B with
the subscript P over the less than or

6
00:00:18,020 --> 00:00:23,470
equal to sign, if there is
a polynomial function, f where for

7
00:00:23,470 --> 00:00:29,210
every string w, w is in A, if and
only if f(w) is in the language B.

8
00:00:29,210 --> 00:00:33,030
The key difference from before is that
we have now required that the function

9
00:00:33,030 --> 00:00:36,490
be computable in polynomial time,
not just that it be computable.

10
00:00:36,490 --> 00:00:42,530
We will also say that f is
a polynomial time reduction of A to B,

11
00:00:42,530 --> 00:00:44,505
or sometimes from A to B.

12
00:00:44,505 --> 00:00:47,710
Here's the key implication of
there being a polynomial reduction

13
00:00:47,710 --> 00:00:48,760
of one language to another.

14
00:00:50,010 --> 00:00:53,660
Let's suppose that I want to know
whether a string x is in the language A.

15
00:00:53,660 --> 00:00:55,100
And suppose,

16
00:00:55,100 --> 00:00:59,960
also, that there exists a polynomial
decider, M for the language, B.

17
00:00:59,960 --> 00:01:02,140
Then all I need to do
is take the machine or

18
00:01:02,140 --> 00:01:05,770
program that computes
this reduction function.

19
00:01:05,770 --> 00:01:07,270
Let's call it N.

20
00:01:07,270 --> 00:01:09,560
And feed my string x into it.

21
00:01:09,560 --> 00:01:12,701
And then feed that output into M.

22
00:01:12,701 --> 00:01:15,770
M will tell if f(x) is in B.

23
00:01:15,770 --> 00:01:18,040
But by definition of a reduction,

24
00:01:18,040 --> 00:01:22,270
this also tells whether x is in A,
which is exactly what I wanted to know.

25
00:01:23,360 --> 00:01:27,840
I just had to change my problem into
one encoded by the language B and

26
00:01:27,840 --> 00:01:29,420
then I could use B as decider.

27
00:01:30,580 --> 00:01:33,100
By the way,
this square bracket notation means 1

28
00:01:33,100 --> 00:01:36,920
if the expression inside is true,
and 0 otherwise.

29
00:01:36,920 --> 00:01:40,650
Therefore, the composition
of M with N is a decider for

30
00:01:40,650 --> 00:01:45,480
A, by all the same arguments we used
in the context of computability.

31
00:01:45,480 --> 00:01:46,870
But is it a polynomial decider?
