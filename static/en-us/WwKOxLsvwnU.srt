1
00:00:00,000 --> 00:00:02,000
This can be determined easily.

2
00:00:02,000 --> 00:00:05,000
All we need is a counter in the testing function.

3
00:00:05,000 --> 00:00:07,000
I have extended the test function a bit,

4
00:00:07,000 --> 00:00:10,000
such that there would be a test counter up here.

5
00:00:10,000 --> 00:00:13,000
With every invocation the test counter will be increased by 1

6
00:00:13,000 --> 00:00:16,000
and so that we see what's going on behind the scenes

7
00:00:16,000 --> 00:00:19,000
I'm printing out the current value of test_count--

8
00:00:19,000 --> 00:00:21,000
that is, the number of the test that is being executed--

9
00:00:21,000 --> 00:00:24,000
and printing out the string that we're testing,

10
00:00:24,000 --> 00:00:26,000
and I'm printing out its current length.

11
00:00:26,000 --> 00:00:30,000
I'm also printing out the result--fail or pass.

12
00:00:30,000 --> 00:00:33,000
Now let's see what we get when we're executing this.

13
00:00:33,000 --> 00:00:35,000
You see this is the initial test.

14
00:00:35,000 --> 00:00:37,000
This is coming from the assertion.

15
00:00:37,000 --> 00:00:40,000
First test, select of foo, 20 characters long--failing.

16
00:00:40,000 --> 00:00:44,000
What you can see here is that delta debugging quickly progresses

17
00:00:44,000 --> 00:00:48,000
in its binary search phase from 20 to 10 to 5.

18
00:00:48,000 --> 00:00:51,000
Well, 5 doesn't work so it sticks with 8.

19
00:00:51,000 --> 00:00:55,000
In the 10th test already it already has determined the minimum.

20
00:00:55,000 --> 00:00:58,000
However, it still tries to remove single characters in here

21
00:00:58,000 --> 00:01:02,000
to make sure that the final result is really relevant.

22
00:01:02,000 --> 00:01:04,000
Overall, it takes 22 tests,

23
00:01:04,000 --> 00:01:07,000
but since the first test is due to the assertion,

24
00:01:07,000 --> 00:01:10,000
we overall have 21.

25
00:01:10,000 --> 00:01:12,000
The correct answer therefore is 21.
