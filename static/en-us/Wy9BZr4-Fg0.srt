1
00:00:00,125 --> 00:00:05,220
A hash function basically as we said,
the input is a password, this box is

2
00:00:05,220 --> 00:00:09,280
the hash function, whatever computation
goes on here is going to happen here.

3
00:00:09,280 --> 00:00:13,790
And the output, this password could be
any length, could be a past phrase that

4
00:00:13,790 --> 00:00:17,640
combines a bunch of words,
letters, digits, whatever it is.

5
00:00:17,640 --> 00:00:21,290
But it produces the hash
value is of a fixed length.

6
00:00:21,290 --> 00:00:25,200
In this direction we said,
it's one way so it's easy to go.

7
00:00:25,200 --> 00:00:28,460
It's easy to compute this
function given this input and

8
00:00:28,460 --> 00:00:29,870
for us to produce this output.

9
00:00:29,870 --> 00:00:34,260
If it just had this and wanted to invert
it going the other direction that's

10
00:00:34,260 --> 00:00:37,910
going to be really hard, which is the
basis of which we're talking about here.

11
00:00:37,910 --> 00:00:41,639
Given that we're going to derive
something from a password using

12
00:00:41,639 --> 00:00:45,725
a hash function and store that,
let's talk about a couple of threats.

13
00:00:45,725 --> 00:00:49,579
because of the security mindset we have,
anytime we sort of make a decision,

14
00:00:49,579 --> 00:00:52,710
we want to think about its
security implications.

15
00:00:52,710 --> 00:00:54,150
So what are some threats?

16
00:00:54,150 --> 00:00:59,470
We are going to assume that the one-way
property of the hash functions holds.

17
00:00:59,470 --> 00:01:03,020
You make some assumptions so
we are going to assume that inwarding or

18
00:01:03,020 --> 00:01:06,390
going the other direction from
hash value to a password,

19
00:01:06,390 --> 00:01:08,210
we're not going to worry about that.

20
00:01:08,210 --> 00:01:11,200
Let's say we're talking
about common passwords.

21
00:01:11,200 --> 00:01:14,710
You know that password is a common
password, or one, two, three,

22
00:01:14,710 --> 00:01:18,090
four, five is a common password,
but this hash function is known.

23
00:01:18,090 --> 00:01:21,950
This one-way hash function we're talking
about, we're not doing security,

24
00:01:21,950 --> 00:01:23,590
web security, so it's known.

25
00:01:23,590 --> 00:01:27,760
We can compute the hash values
off the common passwords.

26
00:01:27,760 --> 00:01:31,500
And we're saying these hash
values are stored by the system,

27
00:01:31,500 --> 00:01:33,260
those are the derived values.

28
00:01:33,260 --> 00:01:37,480
If you can get hold of the hash values
the system has and if you can find

29
00:01:37,480 --> 00:01:42,280
the hash values for the common passwords
among those stored values, it's not hard

30
00:01:42,280 --> 00:01:47,823
to see how we can find out passwords
of certain users in the system.

31
00:01:47,823 --> 00:01:49,620
So if the hash value of 1, 2, 3, 4,

32
00:01:49,620 --> 00:01:54,270
5 matches with the stored value, we know
that user's password is 1, 2, 3, 4, 5.

33
00:01:54,270 --> 00:01:58,810
The other kind of attacks we can mount,
one is called a dictionary attack.

34
00:01:58,810 --> 00:02:01,180
So it's like a dictionary
has lots of words and

35
00:02:01,180 --> 00:02:05,220
think about a long list of passwords,
a dictionary of possible passwords.

36
00:02:05,220 --> 00:02:11,030
Words and maybe they're mutated in
a certain way, you add a few digits or

37
00:02:11,030 --> 00:02:14,660
something like that, but you have
this called space of passwords or

38
00:02:14,660 --> 00:02:19,490
the dictionary of passwords, and you can
try to brute force each one of them.

39
00:02:19,490 --> 00:02:21,010
That's called a dictionary attack.

40
00:02:21,010 --> 00:02:25,390
An offline attack is one where we're
not interacting with the system.

41
00:02:25,390 --> 00:02:30,000
We're not trying to log in each time,
we try a different password.

42
00:02:30,000 --> 00:02:34,710
If you do that, then you are, that's
called an online attempt we are making.

43
00:02:34,710 --> 00:02:38,750
We are interacting with the system so
when you do an online, sort of guessing

44
00:02:38,750 --> 00:02:42,690
attack, the system can stop you
after a certain number of tries.

45
00:02:42,690 --> 00:02:43,870
It locks you out.

46
00:02:43,870 --> 00:02:48,900
So, to avoid that problem we can
sort of offline in our free time,

47
00:02:48,900 --> 00:02:53,230
we can take the hash values,
take a dictionary and

48
00:02:53,230 --> 00:02:58,210
sort of compute for each dictionary
word the hash value and search for

49
00:02:58,210 --> 00:03:00,810
that in the set of hash
values that we have.

50
00:03:00,810 --> 00:03:03,290
When we find a match
we know our password.

51
00:03:03,290 --> 00:03:08,110
And we can do this as I said
without interacting the system.

52
00:03:08,110 --> 00:03:12,000
We interact with the system only
when we discover a correct password.

53
00:03:12,000 --> 00:03:16,300
So those are called offline attacks and
dictionary attacks,

54
00:03:16,300 --> 00:03:17,390
sort of brute force attacks.

55
00:03:17,390 --> 00:03:21,790
So one thing even when
we store derive values

56
00:03:21,790 --> 00:03:26,750
in particular hash values here these
kind of attacks are always possible.

57
00:03:26,750 --> 00:03:31,550
Common passwords, the hash value,
dictionary or offline attacks.

58
00:03:31,550 --> 00:03:37,700
The assumption here is that the attacker
does have access to the hash values.

59
00:03:37,700 --> 00:03:40,440
And the hash values don't
immediately allow him or

60
00:03:40,440 --> 00:03:42,240
her to find out the password.

61
00:03:42,240 --> 00:03:45,910
They can try different, or try to
guess the passwords that match and

62
00:03:45,910 --> 00:03:48,700
when they run into a match for
the hash value then they know for

63
00:03:48,700 --> 00:03:50,390
sure that this is the password.

64
00:03:50,390 --> 00:03:53,300
So these are the kind of attacks
that are possible even when you

65
00:03:53,300 --> 00:03:54,700
only store hash values.
