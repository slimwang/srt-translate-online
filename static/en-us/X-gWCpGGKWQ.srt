1
00:00:00,140 --> 00:00:04,290
What about when your Objective-C
code is consuming Swift errors?

2
00:00:04,290 --> 00:00:08,153
Let's take a look at how a Swift method
that throws would be interpreted by

3
00:00:08,153 --> 00:00:09,038
Objective-C.

4
00:00:09,038 --> 00:00:12,750
Here I have a project whose main
function is in Objective-C.

5
00:00:12,750 --> 00:00:17,260
The project includes a Swift class with
the following error throwing function,

6
00:00:17,260 --> 00:00:21,230
this function throws
an error of type MyError.

7
00:00:21,230 --> 00:00:24,340
Notice that in order to expose
this enum to Objective-C,

8
00:00:24,340 --> 00:00:28,690
I mark it with the attribute @objc.

9
00:00:28,690 --> 00:00:33,295
Now we're going to call this
function from our main function.

10
00:00:33,295 --> 00:00:37,945
We've got a variable to hold our error
and an instance of SomeSwiftClass.

11
00:00:37,945 --> 00:00:39,605
Now let's call our Swift function.

12
00:00:40,705 --> 00:00:43,560
Notice that Xcode gives
us the option to call

13
00:00:43,560 --> 00:00:46,658
doSomethingThatMightFailAndReturnError.

14
00:00:46,658 --> 00:00:49,465
AndReturnError has been
appended to the method name and

15
00:00:49,465 --> 00:00:52,760
now we have the option to pass
an error parameter into the method.

16
00:00:54,100 --> 00:00:55,900
Cool, that's not that surprising.

17
00:00:55,900 --> 00:01:00,108
It's pretty much the reverse of what
we saw going from Objective-C to Swift.

18
00:01:00,108 --> 00:01:02,310
Now let's see how the error
might be processed.

19
00:01:02,310 --> 00:01:03,980
We'll write a log statement and

20
00:01:03,980 --> 00:01:08,690
in that statement we'll grab the domain
and code from the error that's returned.

21
00:01:08,690 --> 00:01:12,480
And then if we run it,
here's what we see in the console.

22
00:01:13,650 --> 00:01:17,640
So the domain and error code are
automatically populated, which is super.

23
00:01:17,640 --> 00:01:21,913
Unfortunately, if you want to know the
value of the enum member that goes with

24
00:01:21,913 --> 00:01:25,853
that code, like WeirdReason or
TypicalReason that you can see here,

25
00:01:25,853 --> 00:01:29,288
you can't access it directly
from your Objective-C code.

26
00:01:29,288 --> 00:01:32,370
You have to look back at
the enum implementation.

27
00:01:32,370 --> 00:01:36,460
It was no coincidence that I wrote
the MyError enum to be of type Int.

28
00:01:37,510 --> 00:01:41,640
Let's not forget that enums in
Objective-C can only hold ints.

29
00:01:41,640 --> 00:01:44,614
That means that if you have a Swift
error that you want to be consumed by

30
00:01:44,614 --> 00:01:48,120
Objective-C it has to be of type int.

31
00:01:48,120 --> 00:01:51,191
Unfortunately, that means
that enums like this one,

32
00:01:51,191 --> 00:01:55,131
that provide information about
the errors right in their raw values,

33
00:01:55,131 --> 00:01:57,418
can't be translated to Objective-C.

34
00:01:57,418 --> 00:02:01,897
Even though NS errors aren't as spiffy
as Swift errors, the takeaway here

35
00:02:01,897 --> 00:02:05,958
is that the interrupt for error
handling is mostly handled for you.

36
00:02:05,958 --> 00:02:08,580
NS errors just work in Swift.

37
00:02:08,580 --> 00:02:12,730
And all you have to do to get your Swift
errors to work in Objective-C is mark

38
00:02:12,730 --> 00:02:17,480
them with the attribute @objc, and
make sure they have an integer type.
