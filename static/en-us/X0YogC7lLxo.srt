1
00:00:00,600 --> 00:00:03,910
One of the best known tools for
batch processing raster and

2
00:00:03,910 --> 00:00:07,300
vector images is ImageMagick.

3
00:00:07,300 --> 00:00:12,157
ImageMagick is a free and open source
tool that enables you to automate

4
00:00:12,157 --> 00:00:17,197
just about anything you might normally
do with a GUI based image editor.

5
00:00:17,197 --> 00:00:23,670
Such as converting formats or
cropping or applying filters.

6
00:00:23,670 --> 00:00:26,990
Now for responsive images, this means
you can automate the process of

7
00:00:26,990 --> 00:00:31,750
creating multiple versions of the same
image with different sizes or formats.

8
00:00:32,780 --> 00:00:36,810
In this example I'm using the
ImageMagick convert command to create

9
00:00:36,810 --> 00:00:38,660
a webp goanna.

10
00:00:38,660 --> 00:00:40,920
Let's open those in Chrome.

11
00:00:40,920 --> 00:00:41,980
Identical.

12
00:00:41,980 --> 00:00:47,189
Cool thing is, the webp goanna is
about 10% smaller than the jpg.

13
00:00:47,189 --> 00:00:50,400
That could make quite a difference
on a flaky connection.

14
00:00:50,400 --> 00:00:53,930
In this example, I've written a shell
script that uses ImageMagick to

15
00:00:53,930 --> 00:00:58,290
create small and large versions of
my original photographic images,

16
00:00:58,290 --> 00:01:01,630
saving in webp and JPEG formats.

17
00:01:01,630 --> 00:01:04,830
Note that massive
reduction in file sizes.

18
00:01:04,830 --> 00:01:06,710
There's my originally goanna.

19
00:01:06,710 --> 00:01:10,280
And these are the versions
that I created.

20
00:01:10,280 --> 00:01:14,400
You can incorporate ImageMagick in
your build process via a Grunt task.

21
00:01:14,400 --> 00:01:18,080
In this example,
I'm using Grunt responsive images

22
00:01:18,080 --> 00:01:21,860
to automate production of images,
just like I did with the shell script.

23
00:01:21,860 --> 00:01:23,814
And then you can see the output.

24
00:01:23,814 --> 00:01:28,157
I've got a bunch of images
saved at 50% width and

25
00:01:28,157 --> 00:01:33,420
30% width in JPEG format
at different quality sizes.

26
00:01:34,590 --> 00:01:39,080
There are a couple of really useful
apps that combine other tools for

27
00:01:39,080 --> 00:01:40,585
image optimization.

28
00:01:40,585 --> 00:01:45,214
For example, ImageOptim enables
lossless image optimization using

29
00:01:45,214 --> 00:01:47,480
a number of open source tools.

30
00:01:47,480 --> 00:01:53,150
Pngout, pngcrush,
jpegoptim Giftical and so on.

31
00:01:53,150 --> 00:01:57,160
Now look at the file sizes of
our images before and after.

32
00:01:57,160 --> 00:02:01,360
ImageAlpha uses pngquant and
other tools for compression.

33
00:02:01,360 --> 00:02:06,369
ImageAlpha can reduce 24-bit PNG files
by applying lossy compression and

34
00:02:06,369 --> 00:02:10,139
converting to PNG-8 plus alpha format.

35
00:02:10,139 --> 00:02:13,590
Look at our PNG sizes before and after.

36
00:02:13,590 --> 00:02:20,417
But looking at that, it went down from
about 330 kilobytes to around about 118.

37
00:02:20,417 --> 00:02:22,270
That's like, around half the size.

38
00:02:23,460 --> 00:02:25,960
As well as the GUI
versions you've just seen,

39
00:02:25,960 --> 00:02:30,730
tools like ImageOptim and ImageAlpha
can also be run from the command line.

40
00:02:30,730 --> 00:02:33,500
And incorporated with
your build process.

41
00:02:33,500 --> 00:02:37,580
In this example I'm running
ImageOptum as a Grunt task.

42
00:02:37,580 --> 00:02:43,268
That means you can incorporate automated
image optimization in your work flow.

43
00:02:43,268 --> 00:02:46,380
To learn more about Grunt,
along with Imageoptum and

44
00:02:46,380 --> 00:02:49,720
other command line tools,
follow the links below the video.
