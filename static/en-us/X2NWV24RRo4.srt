1
00:00:00,990 --> 00:00:04,019
Often times,
you won't want to have a blanket role

2
00:00:04,019 --> 00:00:08,789
that allows all authorized users to
read or write anything in storage.

3
00:00:08,789 --> 00:00:13,799
Firebase storage rules include
context to handle these situations.

4
00:00:13,800 --> 00:00:16,679
Context are part of the rules condition,

5
00:00:16,679 --> 00:00:22,339
allowing you to specify when to enforce
rules, based on specific properties.

6
00:00:22,339 --> 00:00:26,199
For instance, here,
if request at off not equal null

7
00:00:26,199 --> 00:00:31,464
is the whole condition then request at
off is the context of the condition.

8
00:00:31,464 --> 00:00:34,850
Firebase provides two
main types of contexts.

9
00:00:34,850 --> 00:00:36,859
Request and resource.

10
00:00:36,859 --> 00:00:40,030
A resource context
contains information for

11
00:00:40,030 --> 00:00:43,340
resources that are already
on file based storage.

12
00:00:43,340 --> 00:00:47,680
So you can enforce a security rule
that's based on a file's name,

13
00:00:47,679 --> 00:00:50,140
a file's size, or a content type.

14
00:00:50,140 --> 00:00:53,270
Like whether it's an image,
an audio, or a video file.

15
00:00:53,270 --> 00:00:57,584
The request context is different
as it deals with request data.

16
00:00:57,584 --> 00:00:59,570
And that's incoming data.

17
00:00:59,570 --> 00:01:03,780
This includes context about the user
that's requesting to read or

18
00:01:03,780 --> 00:01:05,920
write to far a bay storage.

19
00:01:05,920 --> 00:01:08,930
You can get info like whether
the user is authenticated or

20
00:01:08,930 --> 00:01:11,130
not with request.off.

21
00:01:11,129 --> 00:01:16,039
For authenticated users, you can
enforce rules based on their UID.

22
00:01:16,040 --> 00:01:20,130
The request context can also include
information about files that are being

23
00:01:20,129 --> 00:01:25,259
uploaded, or updated we're updated
is a special case of uploading

24
00:01:25,260 --> 00:01:29,550
we're the old version of the content
already exist in storage.

25
00:01:29,549 --> 00:01:33,009
You can get the same properties
from request of resource

26
00:01:33,010 --> 00:01:35,079
like the resource context.

27
00:01:35,079 --> 00:01:39,319
The difference is the request
context is for in coming files,

28
00:01:39,319 --> 00:01:42,769
where the resource context are for
existing files in storage.

29
00:01:43,769 --> 00:01:45,250
An example condition for

30
00:01:45,250 --> 00:01:51,310
this context could be to limit the file
size that can be uploaded to storage.

31
00:01:51,310 --> 00:01:54,810
The request context has
a third piece of information

32
00:01:54,810 --> 00:01:57,100
which is the time of the request.

33
00:01:57,099 --> 00:02:01,439
It's a time stamp meaning it includes
both date info, like the day, month, and

34
00:02:01,439 --> 00:02:06,319
year as well as time info, like hours,
minutes, seconds, and time zone.

35
00:02:06,319 --> 00:02:10,659
An example condition here could allow
for time limited access such as only

36
00:02:10,659 --> 00:02:15,400
allowing users to read files that have
been uploaded within the last 24 hours.

37
00:02:16,449 --> 00:02:20,259
All that being said,
you can compose all of these contexts

38
00:02:20,259 --> 00:02:24,919
to build sophisticated security
rules for your files and storage.

39
00:02:24,919 --> 00:02:28,849
If you want to learn more about using
match, rules and context, take a look at

40
00:02:28,849 --> 00:02:32,590
the documentation where you can see
all about Firebase storage security.

