1
00:00:00,220 --> 00:00:02,750
Now let's talk about how
Receiver Applications work.

2
00:00:02,750 --> 00:00:06,540
First, recall that receivers are written
in HTML five and JavaScript.

3
00:00:06,540 --> 00:00:09,060
They're loaded onto
a cast device via URL,

4
00:00:09,060 --> 00:00:11,440
via an application ID
provided by the sender.

5
00:00:11,440 --> 00:00:14,410
Senders can control the receiver by
sending them messages, for example,

6
00:00:14,410 --> 00:00:15,850
to play or pause media.

7
00:00:15,850 --> 00:00:18,160
You can send custom messages as well.

8
00:00:18,160 --> 00:00:20,180
There are three types of
receiver applications.

9
00:00:20,180 --> 00:00:22,880
Two of which require you to register
an application ID on the cast

10
00:00:22,880 --> 00:00:24,060
developer console.

11
00:00:24,060 --> 00:00:25,530
And one of which does not.

12
00:00:25,530 --> 00:00:28,190
Which one you choose depends on the type
of application you're building, and

13
00:00:28,190 --> 00:00:30,490
how much customization you'd like to do.

14
00:00:30,490 --> 00:00:34,030
The Default Media Receiver plays
a wide variety of simple media types.

15
00:00:34,030 --> 00:00:36,050
No styling or
customization is possible though,

16
00:00:36,050 --> 00:00:38,760
and there's no way to modify
the receiver's behavior.

17
00:00:38,760 --> 00:00:40,610
Next up is the styled media receiver.

18
00:00:40,610 --> 00:00:43,540
This is also a prebuilt receiver
that's hosted by Google.

19
00:00:43,540 --> 00:00:46,570
Likewise, it's designed for
streaming audio and video content, and

20
00:00:46,570 --> 00:00:49,760
works with all the same types supported
by the default media receiver.

21
00:00:49,760 --> 00:00:52,720
This time though, you can customize
it's appearance by supplying a CSS

22
00:00:52,720 --> 00:00:55,100
file during registration
on the developer console.

23
00:00:55,100 --> 00:00:57,860
You can use this to add your own colors
and branding, and the styled media

24
00:00:57,860 --> 00:01:00,970
receiver is fully compliant with
the user experience guidelines.

25
00:01:00,970 --> 00:01:02,030
This is your best bet,

26
00:01:02,030 --> 00:01:05,860
if your app doesn't need to utilize
advanced capabilities like DRM.

27
00:01:05,860 --> 00:01:07,860
This style media receiver
also has a splash and

28
00:01:07,860 --> 00:01:09,820
loading screen that you can customize.

29
00:01:09,820 --> 00:01:12,690
Now, as I said, you can customize the
style of the media receiver by providing

30
00:01:12,690 --> 00:01:15,550
a CSS file, when you register
on the cast developer console.

31
00:01:15,550 --> 00:01:18,480
There's five elements you can customize,
such as the background, the logo,

32
00:01:18,480 --> 00:01:19,860
and a splash screen.

33
00:01:19,860 --> 00:01:21,650
You can also add a watermark
when your media's playing,

34
00:01:21,650 --> 00:01:24,340
and you can checkout the link in the
instructor notes for more details, and

35
00:01:24,340 --> 00:01:27,210
for requirements on the different
types of images you can use.

36
00:01:27,210 --> 00:01:30,010
Now Custom Receivers are the way to go,
if you want to have full control over

37
00:01:30,010 --> 00:01:32,220
all aspects of the behavior
of your application.

38
00:01:32,220 --> 00:01:34,000
There are main use cases
if you want to play d or

39
00:01:34,000 --> 00:01:37,170
m content with dynamic licenses,
or if you need authentication.

40
00:01:37,170 --> 00:01:39,640
Custom receivers also make sense
if you're building a data centric

41
00:01:39,640 --> 00:01:40,760
app, like a game.

42
00:01:40,760 --> 00:01:43,650
To help you build these, we've open
sourced a reference custom receiver

43
00:01:43,650 --> 00:01:46,020
that's equivalent to
the default media receiver.

44
00:01:46,020 --> 00:01:48,810
You can find a link to that in the
instruction notes, and many Google cast

45
00:01:48,810 --> 00:01:52,000
featured apps use this as the starting
point for their integration.

46
00:01:52,000 --> 00:01:56,060
Now custom receivers is a HTML five app
that you host on your own servers, and

47
00:01:56,060 --> 00:01:59,210
they must be implemented using
the JavaScript receiver API.

48
00:01:59,210 --> 00:02:02,010
You can use this API to hook into
the various events that are fired

49
00:02:02,010 --> 00:02:04,160
within the cast receiver message system.

50
00:02:04,160 --> 00:02:07,390
You can also use the cast media player
library to build media applications that

51
00:02:07,390 --> 00:02:09,979
use a variety of techniques,
like adaptive streaming,

52
00:02:09,979 --> 00:02:13,070
HLS, MPEG DASH,
smooth streaming, and more.

53
00:02:13,070 --> 00:02:14,600
I've switched over to Android Studio,
and

54
00:02:14,600 --> 00:02:18,490
I've brought up the sample receiver
from the hello cast text example.

55
00:02:18,490 --> 00:02:20,840
We'll explore this example in
a little bit more detail soon, and

56
00:02:20,840 --> 00:02:22,290
it's a great teaching tool.

57
00:02:22,290 --> 00:02:25,878
The reason is, is that it has a one file
sender app and a very simple receiver.

58
00:02:25,878 --> 00:02:26,720
I just want to note right here,

59
00:02:26,720 --> 00:02:30,090
that you should not use this as
a reference point for your integration.

60
00:02:30,090 --> 00:02:33,960
Instead, you can use the cast video
sample, which we'll also get into later.

61
00:02:33,960 --> 00:02:36,100
The receiver app is located
within the receiver folder.

62
00:02:36,100 --> 00:02:37,870
And if you don't see this by default,

63
00:02:37,870 --> 00:02:41,020
change this display here to be
project instead of Android.

64
00:02:41,020 --> 00:02:43,870
Your receiver app should access
the Google Cast receiver API

65
00:02:43,870 --> 00:02:45,160
using this reference.

66
00:02:45,160 --> 00:02:48,415
Don't self host this file because
it's updated periodically.

67
00:02:48,415 --> 00:02:51,075
You can then get an instance
of the castReceiverManager and

68
00:02:51,075 --> 00:02:54,065
use it to implement call backs
to handle various events.

69
00:02:54,065 --> 00:02:56,015
There are a number of these,
like onSenderConnected or

70
00:02:56,015 --> 00:02:56,945
onSenderDisconnected.

71
00:02:56,945 --> 00:02:59,820
And you can find details for
all of them in the notes.

72
00:02:59,820 --> 00:03:02,500
You can also debug your receiver
using the Chrome developer tools,

73
00:03:02,500 --> 00:03:06,460
by connecting your browser to your
receivers IP address on port 9222.

74
00:03:06,460 --> 00:03:10,170
Before you can connect, your Cast device
must be running your receiver app.

75
00:03:10,170 --> 00:03:11,890
And your Cast device
must be registered for

76
00:03:11,890 --> 00:03:14,030
debugging on the cast developer console.

77
00:03:14,030 --> 00:03:15,220
The debugger's quite powerful, and

78
00:03:15,220 --> 00:03:18,860
it supports full dom manipulation as
well as JavaScript console support.

79
00:03:18,860 --> 00:03:21,400
Let's recap with a quick quiz
about receiver types, and

80
00:03:21,400 --> 00:03:23,480
an optional learning exercise.

81
00:03:23,480 --> 00:03:26,250
The best way to verify that you've got
your cast device set up properly with

82
00:03:26,250 --> 00:03:29,360
the developer console, is to set up
your own custom receiver app, for

83
00:03:29,360 --> 00:03:31,740
the hello cast example
that you can find here.

84
00:03:31,740 --> 00:03:34,590
What I did on my own when I first
started using cast, was just basically

85
00:03:34,590 --> 00:03:37,500
copying it and changing the background
color, but making sure that I could get

86
00:03:37,500 --> 00:03:39,990
it up and running on my cast device
with its own application ID.
