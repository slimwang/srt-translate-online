1
00:00:00,190 --> 00:00:05,750
Jellyfish's topology is what is called a random regular graph.

2
00:00:05,750 --> 00:00:11,030
It's random because each graph is uniformly selected

3
00:00:11,030 --> 00:00:15,740
at random from the set of all regular graphs. A regular

4
00:00:15,740 --> 00:00:19,900
graph is simply one where each node has the same degree. And a graph in

5
00:00:19,900 --> 00:00:22,400
Jellyfish is one where the switches in

6
00:00:22,400 --> 00:00:25,350
the topology are the nodes. In contrast to

7
00:00:25,350 --> 00:00:30,980
the earlier data center topology diagram we saw, here is a picture of a

8
00:00:30,980 --> 00:00:38,980
Jellyfish random graph with 432 servers and 180 switches. Every node in this

9
00:00:38,980 --> 00:00:44,800
graph has a fixed degree of 12. Jellyfish's approach is to construct

10
00:00:44,800 --> 00:00:50,550
a random graph at the Top of Rack switch layer. Every Top of Rack switch i,

11
00:00:50,550 --> 00:00:56,070
has some total number of Ki ports, of which it uses Ri

12
00:00:56,070 --> 00:01:01,420
to connect to other Top of Rack switches. The remaining Ki minus Ri

13
00:01:01,420 --> 00:01:06,332
ports are used to connect servers. With n racks,

14
00:01:06,332 --> 00:01:10,994
the network then supports n times Ki minus Ri

15
00:01:10,994 --> 00:01:15,950
servers. And the network is a random regular graph

16
00:01:15,950 --> 00:01:22,220
denoted as follows. Formally, random regular graphs are sampled

17
00:01:22,220 --> 00:01:28,370
uniformly from the space of all R regular graphs. Achieving such a property is

18
00:01:28,370 --> 00:01:34,370
a complex graph theory problem, but there's a simple procedure that produces a

19
00:01:34,370 --> 00:01:39,370
sufficiently uniform random graph that empirically have the desired properties.
