1
00:00:00,530 --> 00:00:03,870
Now that we have seen how the ROB based processor is supposed to work,

2
00:00:03,870 --> 00:00:10,060
let's do a ROB quiz. This is actually going to be a series of quizzes.

3
00:00:10,060 --> 00:00:14,790
We will have this state of the processor, with these instructions.

4
00:00:14,790 --> 00:00:18,490
Note that the add now takes 1 cycle, multiplication 3 cycles, and

5
00:00:18,490 --> 00:00:23,510
divide takes 10 cycles and the assumptions about dispatching and execution and

6
00:00:23,510 --> 00:00:27,730
so on are the same as before. So, basically, even instruction captures results

7
00:00:27,730 --> 00:00:31,700
in one cycle, then it can dispatch in that cycle and begin executing in

8
00:00:31,700 --> 00:00:34,840
the next cycle, or if the instruction is issued in one cycle and

9
00:00:34,840 --> 00:00:38,670
it has operands ready to go. Then it can dispatch in that same cycle so

10
00:00:38,670 --> 00:00:41,210
that it begins executing in the very next cycle.

11
00:00:41,210 --> 00:00:46,410
But the last cycle of execution will complete before we broadcast the results.

12
00:00:46,410 --> 00:00:51,240
So, if an add begins executing in some cycle X, because it takes one cycle to

13
00:00:51,240 --> 00:00:55,560
do that, it's going to be able to broadcast the result in cycle X plus 1.

14
00:00:55,560 --> 00:01:00,370
The initial value of the registers are these. The cycle is one.

15
00:01:00,370 --> 00:01:04,540
Obviously, nothing will happen except for an issuing of an instruction. So

16
00:01:04,540 --> 00:01:10,200
the first question for you is, we will try to issue this instruction, What is

17
00:01:10,200 --> 00:01:15,670
going to be the content of the RAT entry for R2? So put the value here.
