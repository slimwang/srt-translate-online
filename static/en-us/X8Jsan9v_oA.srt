1
00:00:00,370 --> 00:00:04,280
OpenFlow makes modifying forwarding behavior easy,

2
00:00:04,280 --> 00:00:07,860
because forwarding decisions are based on

3
00:00:07,860 --> 00:00:15,230
matches on the openflow 10-tuple. There to switching is simply a match

4
00:00:15,230 --> 00:00:20,170
on the destination Mac address which has a corresponding action of forwarding

5
00:00:20,170 --> 00:00:25,810
out of particular output port. If all of the fields are specified for

6
00:00:25,810 --> 00:00:28,820
forwarding out a particular output port then

7
00:00:28,820 --> 00:00:32,800
we have flow switching behavior. If all

8
00:00:32,800 --> 00:00:35,700
of the flow specifications are wild carded

9
00:00:35,700 --> 00:00:39,060
except for say the source MAC address to

10
00:00:39,060 --> 00:00:41,560
make a forwarding or drop decision Then

11
00:00:41,560 --> 00:00:44,640
we have a firewall. Constructing a firewall

12
00:00:44,640 --> 00:00:50,970
is as simple as building a hash table that stores key value pairs where the

13
00:00:50,970 --> 00:00:56,690
table maps a switch and source MAC address to a true or false value

14
00:00:56,690 --> 00:00:59,440
depending on whether traffic should be forwarded

15
00:00:59,440 --> 00:01:02,260
or dropped. The controller Might then only decide

16
00:01:02,260 --> 00:01:08,440
to forward traffic if the firewall entry maps to true. It is important to

17
00:01:08,440 --> 00:01:12,515
emphasize the performance implications of caching the

18
00:01:12,515 --> 00:01:16,080
decisions at the switch. So, packets only reach

19
00:01:16,080 --> 00:01:18,730
the controller if there's no flow table entry at the

20
00:01:18,730 --> 00:01:21,400
switch. If on the other hand, there is a float

21
00:01:21,400 --> 00:01:24,160
table entry at the switch, then the switch can simply

22
00:01:24,160 --> 00:01:27,270
forward the packets rather than sending them to the controller.

23
00:01:27,270 --> 00:01:29,560
So when a controller decides to take an action on

24
00:01:29,560 --> 00:01:33,370
a packet, it installs that action as a flow table

25
00:01:33,370 --> 00:01:36,250
entry in the switch, and that decision or flow table

26
00:01:36,250 --> 00:01:41,660
entry is cached until that flow table entry expires. In summary,

27
00:01:41,660 --> 00:01:46,060
customizing control is easy. We've explored how to

28
00:01:46,060 --> 00:01:50,320
use the POX controller to develop alternate control

29
00:01:50,320 --> 00:01:52,830
programs. And it's possible to turn a switch

30
00:01:52,830 --> 00:01:55,340
into a firewall in less than 40 lines

31
00:01:55,340 --> 00:01:58,010
of python code. We also explored the performance

32
00:01:58,010 --> 00:02:01,760
benefits of caching rules and decisions, to avoid

33
00:02:01,760 --> 00:02:04,720
sending too much traffic to the controller. As

34
00:02:04,720 --> 00:02:06,820
we know, forwarding performance in a switch is as

35
00:02:06,820 --> 00:02:09,150
fast but whenever we have to send traffic

36
00:02:09,150 --> 00:02:12,250
to the controller it slows things down. So whatever

37
00:02:12,250 --> 00:02:15,240
decisions we can cache in the switch will

38
00:02:15,240 --> 00:02:18,010
only serve to improve the performance of the network.
