1
00:00:00,150 --> 00:00:02,350
The next RAID technique is RAID 1,

2
00:00:02,350 --> 00:00:06,910
which uses a technique called
mirroring to improve reliability.

3
00:00:06,910 --> 00:00:11,720
So really,
RAID 1 puts the same data on both disks.

4
00:00:11,720 --> 00:00:15,180
If we had only one disk,
we would keep the data on it.

5
00:00:15,180 --> 00:00:19,090
With the other disk,
it's just a copy of the first disk.

6
00:00:19,090 --> 00:00:25,540
So a write of the data from the system
will cause a write to each disk.

7
00:00:25,540 --> 00:00:29,853
Now note that this results in the same
write performance as when we had one

8
00:00:29,853 --> 00:00:33,450
disk alone because all of
the two writes are happening.

9
00:00:33,450 --> 00:00:35,280
They're happening at the same time.

10
00:00:35,280 --> 00:00:39,700
Each disk is given the same write,
so each disc does

11
00:00:39,700 --> 00:00:43,640
exactly what the single disc would be
doing, as far as writes are concerned.

12
00:00:43,640 --> 00:00:47,710
So this write takes approximately
the same time as it would take to do it

13
00:00:47,710 --> 00:00:50,930
on one disc, because they are really
doing it simultaneously, but

14
00:00:50,930 --> 00:00:54,320
for reads, we can read any one disk.

15
00:00:54,320 --> 00:00:55,820
Both of them have the same data.

16
00:00:55,820 --> 00:00:58,180
We only need to read the data once.

17
00:00:58,180 --> 00:01:00,738
So we end up reading
only one of the disks.

18
00:01:00,738 --> 00:01:04,750
So for reads, we get twice
the throughput of one disk alone.

19
00:01:04,750 --> 00:01:07,150
Pretty much if we have
more than one read to do,

20
00:01:07,150 --> 00:01:09,940
we're going to send half the reads
to one disk and half to the other.

21
00:01:09,940 --> 00:01:13,760
They have the identical data so
actually we can always split the disks.

22
00:01:13,760 --> 00:01:17,750
We never have the situation that all
the data we want is on one disk because

23
00:01:17,750 --> 00:01:21,600
really, any data can be read
from any of the two disks.

24
00:01:21,600 --> 00:01:27,540
And this scheme can tolerate any
faults that affect one of the disks.

25
00:01:27,540 --> 00:01:30,280
So, it could be that for example,
there's a bad sector on one disk.

26
00:01:30,280 --> 00:01:33,980
Well, we can just read the same
data from the other disk.

27
00:01:33,980 --> 00:01:36,540
Or we can have an entire disk fail,

28
00:01:36,540 --> 00:01:41,050
in which case we are left with one
disk that still has all the data.

29
00:01:42,110 --> 00:01:45,560
So remember when we said that we
have two copies of something, and

30
00:01:45,560 --> 00:01:48,040
we can detect, but
not correct the error.

31
00:01:48,040 --> 00:01:52,090
For disks this is not true,
because the ECC

32
00:01:52,090 --> 00:01:57,330
on each sector of each of the disks
will detect errors that occur already.

33
00:01:57,330 --> 00:01:59,550
So now that we know
which one has an error,

34
00:01:59,550 --> 00:02:02,910
we can always use the other one
that doesn't have an error there.

35
00:02:02,910 --> 00:02:06,560
So if you have two copies of something
and you know which copy is wrong, then

36
00:02:06,560 --> 00:02:10,389
you can, of course, correct the error
simply by reading the correct copy.
