1
00:00:00,220 --> 00:00:03,754
There are even more problems with simply sorting objects and drawing them

2
00:00:03,754 --> 00:00:07,992
roughly back to front. For example, notice that the back faces are not shown for

3
00:00:07,992 --> 00:00:12,570
any transparent objects. If you turn back faces on, you'll start to get strange

4
00:00:12,570 --> 00:00:17,045
rendering art effects. Some back faces will be drawn before front faces blend

5
00:00:17,045 --> 00:00:22,430
with them, some won't, giving this patchy look. For example, here's a view of a

6
00:00:22,430 --> 00:00:27,370
block from the side, along with an order that the phases are drawn. Since phase

7
00:00:27,370 --> 00:00:33,159
1 is drawn first, phase 2 blends with it. Phase 3 is drawn filling the z-buffer

8
00:00:33,159 --> 00:00:38,466
and also blends with phase 1. Phase 4 is behind phase 3, so is invisible when

9
00:00:38,466 --> 00:00:44,206
rendered. Of the two back faces, in this case only phase 1 has had an effect on

10
00:00:44,206 --> 00:00:48,856
the image generated. Even with back face calling on, and a good sort order, you

11
00:00:48,856 --> 00:00:53,600
can still have problems with different sized objects. Say a ground plane and a

12
00:00:53,600 --> 00:00:58,056
red object resting in it are both transparent. The middle of the ground plane is

13
00:00:58,056 --> 00:01:03,431
closer to the camera. So by sort order, it will be drawn after the red object.

14
00:01:03,431 --> 00:01:08,647
This will make the ground plane appear to be above the red object. Here's one

15
00:01:08,647 --> 00:01:13,284
more problem with transparency. Complex objects can have two or more surfaces

16
00:01:13,284 --> 00:01:17,630
overlapping a single pixel. Again it depends on draw order as to what appears on

17
00:01:17,630 --> 00:01:22,465
the screen. If the fragment on the left is drawn first, then the fragment on the

18
00:01:22,465 --> 00:01:26,376
right will en-properly blend with it at this pixel. There's even research about

19
00:01:26,376 --> 00:01:29,722
the ordering of triangles in the mesh itself to avoid these problems. But this

20
00:01:29,722 --> 00:01:34,710
type of technique can be costly to apply. At this point you might have given up

21
00:01:34,710 --> 00:01:38,980
all hope for transparency always working right. The z-buffer was meant to store

22
00:01:38,980 --> 00:01:42,945
only one object at a time and unless you can guarantee the order of objects

23
00:01:42,945 --> 00:01:46,916
covering the pixels, there's little else you can do. There are some further

24
00:01:46,916 --> 00:01:50,372
tricks you can do by only reading and not writing to the z-buffer, but there's

25
00:01:50,372 --> 00:01:54,666
no perfect solution. If you desperately want to get the right answer, there is

26
00:01:54,666 --> 00:01:59,394
one technique that works fairly well called Depth-Peeling. The idea is to peel

27
00:01:59,394 --> 00:02:03,796
away each transparent layer until all layers are processed, by storing an

28
00:02:03,796 --> 00:02:08,978
additional minimum z-depth for each pixel. So for example, the first layer is

29
00:02:08,978 --> 00:02:14,584
all the transparent surfaces closes to the camera. The second layer is all the

30
00:02:14,584 --> 00:02:19,266
second closes surfaces. The third and fourth layers are processed and turned

31
00:02:19,266 --> 00:02:23,365
until the whole object is rendered. That's conceptually the key idea, see the

32
00:02:23,365 --> 00:02:27,425
additional course materials for more about this algorithm. The draw back is that

33
00:02:27,425 --> 00:02:31,760
each peel operation needs to have all the transparent objects rendered again.

34
00:02:31,760 --> 00:02:35,674
Many passes may be needed before all the layers are found and processed.

35
00:02:35,675 --> 00:02:39,940
Ultimately what would solve the transparency problem is storing a list of all

36
00:02:39,940 --> 00:02:44,532
the transparent fragments in each pixel, along with their depths. This approach

37
00:02:44,532 --> 00:02:48,450
is known as the A-Buffer. Once we have all this information, we can then combine

38
00:02:48,450 --> 00:02:53,280
these fragments in the right order. This type of storage is possible in newer

39
00:02:53,280 --> 00:02:57,372
GPU's for the desktop, but can use a considerable amount of memory. What's

40
00:02:57,372 --> 00:03:01,928
interesting is that mobile devices usually use a different architecture called

41
00:03:01,928 --> 00:03:06,130
Tile Based that can more easily keep such fragment lists around. Yet another

42
00:03:06,130 --> 00:03:10,842
approach is called Stochastic Transparency. Which uses Screen-Door Transparency

43
00:03:10,842 --> 00:03:14,685
width in the pixel itself, along with some randomness to get it a reasonable

44
00:03:14,685 --> 00:03:18,924
average result. This brings us full circle back to the original transparency

45
00:03:18,924 --> 00:03:22,644
algorithm I presented. There's no simple answer on the GPU.
