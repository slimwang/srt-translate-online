1
00:00:00,370 --> 00:00:04,500
When you need to perform asynchronous
work, the work may not be isolated.

2
00:00:04,500 --> 00:00:07,680
You often need to perform
multiple asynchronous actions.

3
00:00:07,680 --> 00:00:10,700
And so you are in the chaining
stage of the course

4
00:00:10,700 --> 00:00:12,840
where you will be chaining
promises together.

5
00:00:13,960 --> 00:00:15,550
There are two main strategies for

6
00:00:15,550 --> 00:00:18,200
performing multiple
asynchronous actions.

7
00:00:18,200 --> 00:00:21,310
They are actions in series,
and actions in parallel.

8
00:00:22,620 --> 00:00:25,540
Action in series occur
one after another,

9
00:00:25,540 --> 00:00:29,620
like these three cats all waiting
their turn for the rocket.

10
00:00:29,620 --> 00:00:33,080
While actions in parallel
all occur simultaneously,

11
00:00:33,080 --> 00:00:36,180
like each of these cats getting
its own rocket to ride.

12
00:00:36,180 --> 00:00:39,310
You could say that synchronous
code is always in series.

13
00:00:39,310 --> 00:00:44,660
But asynchronous code can either be in
series or it can also be in parallel.

14
00:00:44,660 --> 00:00:48,825
Neither option, series or parallel,
is inherently better than the other,

15
00:00:48,825 --> 00:00:51,870
each has its own purposes.

16
00:00:51,870 --> 00:00:54,840
In the quiz where you fetched
the list of planet jsons and

17
00:00:54,840 --> 00:00:59,220
then performed a request for
an individual planet json You have to

18
00:00:59,220 --> 00:01:04,120
perform the two requests in series
because one depended on the other.

19
00:01:04,120 --> 00:01:07,890
But if you need to request a lot of
planet jsons, as you will soon be doing

20
00:01:07,890 --> 00:01:12,360
in a quiz, then you will need to
programmatically send out the request.

21
00:01:12,360 --> 00:01:14,990
You'll also want to make
the request in parallel

22
00:01:14,990 --> 00:01:18,230
because that will reduce the amount of
time it takes to load all of the data.

23
00:01:19,490 --> 00:01:21,350
So with that in mind,
here's a quiz for you.

24
00:01:22,410 --> 00:01:24,510
There's a problem with this code.

25
00:01:24,510 --> 00:01:29,490
It appears to be looping over the URLs
from the planet search query, but

26
00:01:29,490 --> 00:01:31,930
something unexpected will happen.

27
00:01:31,930 --> 00:01:32,430
What is it?

28
00:01:33,590 --> 00:01:36,200
Is it that the requests
are being sent in series but

29
00:01:36,200 --> 00:01:39,700
they will return in parallel,
causing some kind of collision?

30
00:01:41,030 --> 00:01:45,110
Is it that the requests are blocking so
that this code will never finish?

31
00:01:46,270 --> 00:01:49,550
Is it that the thumbnails will
be created in a random order?

32
00:01:50,830 --> 00:01:53,520
Or is there just simply nothing
wrong with this at all and

33
00:01:53,520 --> 00:01:54,850
I just gave you a trick question?

34
00:01:55,980 --> 00:01:58,230
I want you to pick one
of these four answers.
