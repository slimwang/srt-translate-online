1
00:00:00,120 --> 00:00:03,270
When you have a picture, you can think of it as a giant two-dimensional array

2
00:00:03,270 --> 00:00:07,336
of colors. It's a little tedious to work with the colors because they have red,

3
00:00:07,336 --> 00:00:12,032
blue, and green components. Here, we'll just use grayscale. Each element in the

4
00:00:12,032 --> 00:00:16,633
two-dimensional array will represent a gray level. As an integer between zero

5
00:00:16,633 --> 00:00:20,495
and 255. Now, here's the problem that we want to solve, we have a photo, which

6
00:00:20,495 --> 00:00:24,778
is represented as a two-dimensional array, of lots of grey level. And now we

7
00:00:24,778 --> 00:00:28,430
want to make it a little blockier. When I have groups of four neighbors like

8
00:00:28,430 --> 00:00:32,770
this, I want to compute the average color or rather the average gray level of

9
00:00:32,770 --> 00:00:38,774
these four pixels and color them all in that color. And this is, I'm making

10
00:00:38,774 --> 00:00:42,971
every pixel a bit fatter. Let me blow this up a little. So here are the pixel,

11
00:00:42,971 --> 00:00:47,311
and I want to know, what are it's three neighbors to the right, to the bottom,

12
00:00:47,311 --> 00:00:53,613
and diagonally. So let's assume the one that I'm starting with is pixels ij,

13
00:00:53,613 --> 00:01:00,630
that means my row is i, and my column is j. Let's look at the one to the right.

14
00:01:00,630 --> 00:01:06,068
The row number is the same, and the column number has increased by one. So here

15
00:01:06,068 --> 00:01:12,660
it is in Java. Same row, column increased by one. What about the one to the

16
00:01:12,660 --> 00:01:19,328
south? In this case, the column index j is the same. And the row index has

17
00:01:19,328 --> 00:01:24,508
increased by one. So here's the java code for that. Finally, the diagonal one

18
00:01:24,508 --> 00:01:30,716
has both the row and column index increase by one. And I'll leave it to you in

19
00:01:30,716 --> 00:01:35,389
the next lab exercise to figure that out. So go ahead and. Program this

20
00:01:35,389 --> 00:01:40,536
exercise. You need to traverse the first pixel here then you jump by two each

21
00:01:40,536 --> 00:01:47,340
time and also the columns you go down by two columns each time. In each step

22
00:01:47,340 --> 00:01:51,630
you average these four pixels, compute the average value and stick it back into

23
00:01:51,630 --> 00:01:54,987
all four pixels. Don't worry the friendly

24
00:01:54,987 --> 00:01:55,614
[INAUDIBLE]

25
00:01:55,614 --> 00:01:58,149
have given you some code to start with.
