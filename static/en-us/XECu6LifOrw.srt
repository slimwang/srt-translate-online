1
00:00:00,000 --> 00:00:04,000
Stormborn has a question.

2
00:00:04,000 --> 00:00:08,000
"Before enrolling here, my only experience with a programming language

3
00:00:08,000 --> 00:00:10,000
was a bit of JavaScript.

4
00:00:10,000 --> 00:00:16,000
In JavaScript there are a lot of brackets and semicolons to mark the end of statements,

5
00:00:16,000 --> 00:00:19,000
but there seems to be none of that in Python.

6
00:00:19,000 --> 00:00:23,000
I was just wondering how Python knows that you are done defining your procedure

7
00:00:23,000 --> 00:00:27,000
and that it should carry on with the rest of the program.

8
00:00:27,000 --> 00:00:30,000
Is it all about the indentation?"

9
00:00:30,000 --> 00:00:33,000
Thanks for the question, Stormborn.

10
00:00:33,000 --> 00:00:36,000
We notice in Python that the white space actually matters.

11
00:00:36,000 --> 00:00:39,000
This is different from many languages.

12
00:00:39,000 --> 00:00:43,000
Those of you who have programmed in other languages like Java or JavaScript or C

13
00:00:43,000 --> 00:00:48,000
know that you have to have lots of syntax to tell the compiler where statements end

14
00:00:48,000 --> 00:00:50,000
and where blocks end and begin--

15
00:00:50,000 --> 00:00:53,000
where you have semicolons and you have squiggly brackets and you have other things

16
00:00:53,000 --> 00:00:58,000
in your code that are really there just to help the compiler know where things begin and end.

17
00:00:58,000 --> 00:01:01,000
In Python, white space is used for that.

18
00:01:01,000 --> 00:01:03,000
The new lines matter. The indenting matters.

19
00:01:03,000 --> 00:01:08,000
The Python interpreter knows when a block ends based on where the indenting is.

20
00:01:08,000 --> 00:01:11,000
That's really nice in the sense that it makes it easy to read your code.

21
00:01:11,000 --> 00:01:14,000
You don't have to worry about adding brackets and things.

22
00:01:14,000 --> 00:01:16,000
If you look at someone else's code or you look at your own code,

23
00:01:16,000 --> 00:01:20,000
the structure of the code tells you what the code means,

24
00:01:20,000 --> 00:01:24,000
because it has to have the same indenting structure as the blocks that are interpreted

25
00:01:24,000 --> 00:01:26,000
by the Python interpreter.

26
00:01:26,000 --> 00:01:28,000
This sometimes causes problems, and this is why many languages

27
00:01:28,000 --> 00:01:31,000
don't pay any attention to white space.

28
00:01:31,000 --> 00:01:36,000
If you copy code between different editors or you change things that change the white space,

29
00:01:36,000 --> 00:01:38,000
in Python that changes the meaning of your code.

30
00:01:38,000 --> 00:01:41,000
You have to be careful that you don't change the indenting

31
00:01:41,000 --> 00:01:44,000
or don't change where the new line breaks are and things like that,

32
00:01:44,000 --> 00:01:47,000
because in Python that can actually change the meaning of your code.

33
00:01:47,000 --> 00:01:50,000
It is a handy way of making it clear to the interpreter

34
00:01:50,000 --> 00:01:53,000
as well as to a human reading the code--the structure of the code--

35
00:01:53,000 --> 00:01:57,000
and it saves having to need any extra syntax like squiggly braces or semicolons to do that.
