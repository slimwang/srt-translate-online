1
00:00:00,380 --> 00:00:03,600
Next we will be working
with boolean arrays.

2
00:00:03,600 --> 00:00:07,440
In simple terms arrays with
values true and false.

3
00:00:07,440 --> 00:00:09,900
This can also be used for indexing.

4
00:00:09,900 --> 00:00:14,460
Indexing using boolean arrays is very
different as compared to index arrays,

5
00:00:14,460 --> 00:00:15,930
we learned previously.

6
00:00:15,930 --> 00:00:19,910
Imagine a situation where we want to
get all the values from the array,

7
00:00:19,910 --> 00:00:22,800
which is less than mean
of the entire array.

8
00:00:22,800 --> 00:00:26,820
The first step to solve this problem
would be to calculate the mean.

9
00:00:26,820 --> 00:00:29,150
Consider a two dimensional array.

10
00:00:29,150 --> 00:00:30,410
As we learned before,

11
00:00:30,410 --> 00:00:35,160
we will calculate the mean using
the mean attribute of the array a.

12
00:00:35,160 --> 00:00:37,478
Let's check what the mean is.

13
00:00:37,478 --> 00:00:38,920
According to our problem,

14
00:00:38,920 --> 00:00:42,840
we want all the values from
the area which is less than mean.

15
00:00:42,840 --> 00:00:43,480
Mean is 14.2.

16
00:00:43,480 --> 00:00:48,250
You can imagine that the solution would
contain values 10, 10 again, 5, 0,

17
00:00:48,250 --> 00:00:54,420
0 again, 2, and so on and so forth.

18
00:00:54,420 --> 00:00:57,760
If you need all these values,
one way is to run the for

19
00:00:57,760 --> 00:00:59,868
loop over the array, and get them.

20
00:00:59,868 --> 00:01:03,900
But using masking,
we do this in one single line.

21
00:01:05,090 --> 00:01:08,710
To read this operation, it would be for

22
00:01:08,710 --> 00:01:12,560
each value in array A,
compare it with the mean.

23
00:01:12,560 --> 00:01:15,400
If it is less, we retain the value.

24
00:01:15,400 --> 00:01:17,130
Let's check the output.

25
00:01:17,130 --> 00:01:21,380
Here is the values which we
expected in the form of list.

26
00:01:21,380 --> 00:01:23,420
Now to go ahead with this concept,

27
00:01:23,420 --> 00:01:27,100
we can also replace these
values with the mean value.

28
00:01:27,100 --> 00:01:32,190
We just assign the mean value to
masking operation we performed before.

29
00:01:32,190 --> 00:01:34,140
Let's see the output.

30
00:01:34,140 --> 00:01:37,540
Observe that all the values
previously less than mean

31
00:01:37,540 --> 00:01:39,580
have been replaced by the mean.

32
00:01:39,580 --> 00:01:44,080
This is one of the important operation
that shows the power of the and

33
00:01:44,080 --> 00:01:46,520
justifies its extensive use throughout.
