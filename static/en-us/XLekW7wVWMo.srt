1
00:00:00,320 --> 00:00:03,035
Let's see the solution to
our write-update versus

2
00:00:03,035 --> 00:00:04,460
write-invalidate quiz.

3
00:00:04,460 --> 00:00:08,160
We have two cores that run our program,
where basically, core 0 writes, and

4
00:00:08,160 --> 00:00:11,620
then core 1 reads, and
that happens 1,000 times.

5
00:00:11,620 --> 00:00:15,080
How many bus uses do we get with
the write-update protocol, and

6
00:00:15,080 --> 00:00:17,130
then with the write-invalidate protocol?

7
00:00:17,130 --> 00:00:20,260
We have already seen a similar
example for write-update.

8
00:00:20,260 --> 00:00:24,030
What's going to happen is, with the
shared and dirty bits we do not really

9
00:00:24,030 --> 00:00:28,030
save much because there is
actual sharing going on here, so

10
00:00:28,030 --> 00:00:32,270
we are going to have a broadcast on
the bus for each of these writes, so

11
00:00:32,270 --> 00:00:35,820
we get 1,000 bus accesses
from these writes,

12
00:00:35,820 --> 00:00:40,370
and the very first read is going to be
a miss, so we get the bus access there.

13
00:00:40,370 --> 00:00:44,570
So overall we get 1,001 bus uses.

14
00:00:44,570 --> 00:00:48,670
In a write-invalidate protocol,
let's see what happens.

15
00:00:48,670 --> 00:00:51,590
Core 0 writes, this is a miss.

16
00:00:51,590 --> 00:00:54,810
We send something to the bus, and
now we get the only copy of this data.

17
00:00:55,880 --> 00:01:00,440
Core 1 reads, has a miss,
core 0 has to supply the data.

18
00:01:01,660 --> 00:01:08,250
So, so far we had 1 and 1, and
then what happens is ore 0 writes.

19
00:01:08,250 --> 00:01:12,460
We know that there is a sharer now
because this core has a block, so

20
00:01:12,460 --> 00:01:15,240
we need to send out an invalidation.

21
00:01:15,240 --> 00:01:19,810
That means that when core 1 reads next,
it's going to have a miss and

22
00:01:19,810 --> 00:01:21,020
use the bus.

23
00:01:21,020 --> 00:01:27,610
So this will repeat 1000 times, and
we get a total of 2000 bus uses,

24
00:01:27,610 --> 00:01:34,410
so as you can see write-update Is a lot
more efficient than write-validate,

25
00:01:34,410 --> 00:01:39,410
if we actually have a pattern where one
core produces the data continuously and

26
00:01:39,410 --> 00:01:42,410
the other one keeps reading the data.

27
00:01:42,410 --> 00:01:46,800
If we have a pattern in which one core
is the producer of all the data, and

28
00:01:46,800 --> 00:01:49,600
the other core is the consumer
because the data flow

29
00:01:49,600 --> 00:01:53,270
from the producer to the consumer
through the same memory location.

30
00:01:53,270 --> 00:01:57,810
In the write update protocol involves
just the update by the write,

31
00:01:57,810 --> 00:02:00,256
but the read can then find
the data in the cache,

32
00:02:00,256 --> 00:02:04,860
whereas in the invalidation protocol the
write just sends out an invalidation,

33
00:02:04,860 --> 00:02:08,320
and then the reader has to still
suffer a miss to obtain the data.
