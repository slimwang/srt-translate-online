1
00:00:00,000 --> 00:00:02,000
And now for the answer.

2
00:00:02,000 --> 00:00:04,000
Let's check each one by one.

3
00:00:04,000 --> 00:00:07,000
When all tests fail that's an interesting situation.

4
00:00:07,000 --> 00:00:11,000
It's rather unlikely, but let's assume this actually happens.

5
00:00:11,000 --> 00:00:14,000
Then we split the inputs initially into two separate sets,

6
00:00:14,000 --> 00:00:20,000
removing the first subset fails we proceed with this subset. N remains 2.

7
00:00:20,000 --> 00:00:24,000
And we do this again and we split again the input into two subsets

8
00:00:24,000 --> 00:00:27,000
and two subsets again and two two subsets again.

9
00:00:27,000 --> 00:00:31,000
This is exactly like binary search described by Kernighan and Pike,

10
00:00:31,000 --> 00:00:33,000
which is logarithmic.

11
00:00:33,000 --> 00:00:37,000
The next answer: where there always is a half that can be removed and fails,

12
00:00:37,000 --> 00:00:43,000
this is the same situation, expect that we may have to remove the first half first and getting a pass.

13
00:00:43,000 --> 00:00:48,000
But still in terms of complexity it's still logarithmic in proportion

14
00:00:48,000 --> 00:00:52,000
to the size of the input and therefore this is a nice situation

15
00:00:52,000 --> 00:00:55,000
in which delta debugging is very, very effective.

16
00:00:55,000 --> 00:01:00,000
This is actually one of the strings of delta debugging that if you can split the input

17
00:01:00,000 --> 00:01:04,000
into two halves and one of them fails, then it behaves like a binary search.

18
00:01:04,000 --> 00:01:06,000
By increasing the granularity later one,

19
00:01:06,000 --> 00:01:09,000
then it's no longer as efficient in the number of tests,

20
00:01:09,000 --> 00:01:14,000
but is very, very thorough by trying to remove small parts one after the other.

21
00:01:14,000 --> 00:01:17,000
It's like a binary search in the beginning--super efficient,

22
00:01:17,000 --> 00:01:22,000
and then it's as thorough as trying to remove every single part after another.

23
00:01:22,000 --> 00:01:25,000
When all tests pass, then delta debugging does not need a logarithmic number

24
00:01:25,000 --> 00:01:30,000
of tests. That's more like a linear number of tests.

25
00:01:30,000 --> 00:01:34,000
And never--that's not the case, because in these two situations,

26
00:01:34,000 --> 00:01:37,000
then indeed the number of tests is logarithmic.

27
00:01:37,000 --> 00:01:39,000
This is the answer.
