1
00:00:00,090 --> 00:00:03,030
So now that we know that
when we have a cache miss,

2
00:00:03,030 --> 00:00:06,870
we fetch an entire block
worth of stuff from memory,

3
00:00:06,870 --> 00:00:10,940
let's talk about where can
these blocks begin in memory.

4
00:00:10,940 --> 00:00:13,740
One option is a block
can begin anywhere.

5
00:00:13,740 --> 00:00:16,420
So let's say we have 64 byte blocks.

6
00:00:16,420 --> 00:00:18,210
That means that a block, for

7
00:00:18,210 --> 00:00:22,270
example, might go from
address 0 through 63 bytes.

8
00:00:23,480 --> 00:00:26,410
Or it can be from 1 through 64.

9
00:00:26,410 --> 00:00:30,270
Or it can go from 2 to 65, and so on.

10
00:00:30,270 --> 00:00:34,760
So pretty much if the starting
address of the block can be anywhere,

11
00:00:34,760 --> 00:00:38,250
then these are the possible blocks
that we might fetch in our cache.

12
00:00:38,250 --> 00:00:41,490
This complicates things a lot.

13
00:00:41,490 --> 00:00:43,590
First, our cache is a table.

14
00:00:43,590 --> 00:00:46,970
We want to index into
the table using some bits

15
00:00:46,970 --> 00:00:49,000
of the address that we are accessing.

16
00:00:49,000 --> 00:00:51,820
But let's say that what we
are accessing is the address 27.

17
00:00:51,820 --> 00:00:55,335
The problem is the block
can actually be found

18
00:00:55,335 --> 00:00:58,940
wherever the beginning
address of the block maps.

19
00:00:58,940 --> 00:01:03,210
So block 0 to 63 might
map here in the cache.

20
00:01:03,210 --> 00:01:07,622
Block 1 through 64 might map somewhere
else in the cache and so on.

21
00:01:07,622 --> 00:01:12,360
So basically,
there are many possible places where

22
00:01:12,360 --> 00:01:16,270
the address 27 might be,
simply because each of these blocks

23
00:01:16,270 --> 00:01:19,740
might map somewhere else depending
on what its beginning address is.

24
00:01:19,740 --> 00:01:25,070
Second, there is another complication,
which is these blocks overlap.

25
00:01:25,070 --> 00:01:27,970
So the block 0 through 63 contains

26
00:01:27,970 --> 00:01:32,850
stuff that overlaps with most
of what 1 through 64 contains.

27
00:01:32,850 --> 00:01:35,740
So this, other than this,
is the same stuff.

28
00:01:35,740 --> 00:01:37,930
Now, the problem is when we are reading,
it's easy.

29
00:01:37,930 --> 00:01:40,640
We just need to read one
of these copies for 27.

30
00:01:40,640 --> 00:01:44,420
But when we are writing, we need to
determine which of the copies exist and

31
00:01:44,420 --> 00:01:48,270
write to all of them so that reading
any of them will still be okay.

32
00:01:48,270 --> 00:01:50,220
So pretty much,
we don't want this to happen.

33
00:01:50,220 --> 00:01:54,178
We don't want to have multiple places
where the same byte address might be.

34
00:01:54,178 --> 00:01:58,750
So in order to both reduce the
complexity of accessing the cache, and

35
00:01:58,750 --> 00:02:03,290
eliminate the problem of this
repetition of stuff in the cache,

36
00:02:03,290 --> 00:02:09,770
we will only have caches where the
blocks start at block aligned addresses.

37
00:02:09,770 --> 00:02:11,927
So for a 64-bit block,

38
00:02:11,927 --> 00:02:16,960
we will have a block that
contains data from 0 to 63 bytes.

39
00:02:16,960 --> 00:02:22,485
The next block begins at byte 64 and
goes to 127 and so on.

40
00:02:22,485 --> 00:02:26,414
So pretty much any byte address can
be found in only one of the possible

41
00:02:26,414 --> 00:02:27,290
blocks.

42
00:02:27,290 --> 00:02:32,150
That also allows us to simply use
some bits of the address that

43
00:02:32,150 --> 00:02:35,100
tell us which of these blocks
are we talking about, and

44
00:02:35,100 --> 00:02:37,010
index into the cache, and find it there.

45
00:02:37,010 --> 00:02:41,210
So there is only one place in the cache
where each of these will fit, and so on.

46
00:02:41,210 --> 00:02:45,780
So for all reasonable caches, we will
really only consider aligned blocks.

47
00:02:45,780 --> 00:02:49,860
Meaning, you cannot fetch any 64 bytes,
or 32 bytes, or

48
00:02:49,860 --> 00:02:54,120
whatever block size is from
memory into the cache.

49
00:02:54,120 --> 00:02:59,315
We need to fetch the 64 byte block that
contains the data and is block-aligned.
