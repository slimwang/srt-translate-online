1
00:00:00,410 --> 00:00:03,990
Everything we've done so far, has
been to set up the rules of the game.

2
00:00:03,990 --> 00:00:07,090
We define the network, and
the notion of a flow over it.

3
00:00:07,090 --> 00:00:09,360
And we've justified some of
the simplifications that we've made.

4
00:00:10,550 --> 00:00:13,340
Now we're going to turn to the task
of actually finding a maximum flow.

5
00:00:14,370 --> 00:00:16,088
The search will be an incremental one.

6
00:00:16,088 --> 00:00:19,360
We'll start with a sub-optimum flow,
and then we'll look for

7
00:00:19,360 --> 00:00:20,485
a way to increase it.

8
00:00:20,485 --> 00:00:23,710
>> Supposed that we are given
a particular flow over a network, and

9
00:00:23,710 --> 00:00:25,870
we want to explore how
we might change it.

10
00:00:25,870 --> 00:00:28,490
Perhaps we realize that
we can increase the flow,

11
00:00:28,490 --> 00:00:32,509
by routing it through this link here,
instead of through these two.

12
00:00:32,509 --> 00:00:36,780
And that would then allow us to
add more flow, through this path.

13
00:00:36,780 --> 00:00:39,669
This is equivalent to adding
a flow that goes like this.

14
00:00:40,770 --> 00:00:43,900
Notice that the flows through
the middle, cancel out.

15
00:00:43,900 --> 00:00:47,660
By adding this flow to the original,
I get the desired result.

16
00:00:47,660 --> 00:00:51,800
Alternatively, if we just wanted to
reroute the flow through the top link,

17
00:00:51,800 --> 00:00:57,180
we could add a circular flow like this,
which would then reroute the flow.

18
00:00:57,180 --> 00:01:01,240
In fact, all possible changes that
we might make to our original flow,

19
00:01:01,240 --> 00:01:04,700
can be characterized as another flow,
but different rules apply.

20
00:01:05,760 --> 00:01:09,640
Certainly, if we've used up some
of the capacity on an edge,

21
00:01:09,640 --> 00:01:13,100
we can't use the full capacity
in the flow we're going to add.

22
00:01:13,100 --> 00:01:16,150
We capture the rules for
the flow that we are allowed to add,

23
00:01:16,150 --> 00:01:19,150
with the notion of
a residual flow network.

24
00:01:19,150 --> 00:01:23,550
We start by defining the residual
capacity, for all pairs of vertices.

25
00:01:23,550 --> 00:01:26,162
Let's consider a u,v edge.

26
00:01:26,162 --> 00:01:31,310
If u,v is an edge in the original graph,
then the residual capacity

27
00:01:31,310 --> 00:01:36,430
is the original capacity, minus whatever
flow we already sent across that edge.

28
00:01:36,430 --> 00:01:41,810
For reverse edges, where not u,v but
v,u is the edge in the graph,

29
00:01:41,810 --> 00:01:47,090
then we have a capacity equal to
the flow that we sent from v to u.

30
00:01:47,090 --> 00:01:49,200
We can unsend this much flow.

31
00:01:50,390 --> 00:01:54,090
Everywhere else,
the residual capacity is zero.

32
00:01:54,090 --> 00:01:58,410
In the residual graph,
the edges are those u,v pairs for

33
00:01:58,410 --> 00:02:00,660
which the capacity is positive.

34
00:02:00,660 --> 00:02:04,140
Keeping the network sparse,
helps in the analysis.

35
00:02:04,140 --> 00:02:08,570
In this example here, notice how
the direction of this edge is reversed.

36
00:02:08,570 --> 00:02:11,477
There's no residual capacity
going forwards anymore.

37
00:02:11,477 --> 00:02:13,995
That's all the new stuff.

38
00:02:13,995 --> 00:02:16,685
But there is a residual
capacity going backwards,

39
00:02:16,685 --> 00:02:20,375
since we can unsend the unit
of flow that we sent up here.

40
00:02:20,375 --> 00:02:22,725
This edge here remains the same.

41
00:02:22,725 --> 00:02:25,285
We can still send 1 unit
of flow along there.

42
00:02:26,652 --> 00:02:28,722
This edge in the middle
gets interesting,

43
00:02:28,722 --> 00:02:32,192
because we can either
send 1 unit of flow,

44
00:02:32,192 --> 00:02:36,632
that would still leave us inside of
these capacity constraints here.

45
00:02:36,632 --> 00:02:39,722
Or we can unsend the unit of
flow that we already sent.
