1
00:00:00,270 --> 00:00:03,230
Let's answer our NUMA
memory allocation quiz.

2
00:00:03,230 --> 00:00:07,300
In order to improve
performance of a NUMA machine,

3
00:00:07,300 --> 00:00:12,010
the operating system should really put
all data pages that are mostly accessed

4
00:00:12,010 --> 00:00:16,930
by a single core in the memory
slice local to that core.

5
00:00:16,930 --> 00:00:20,400
That will ensure that most of
the accesses by each of the cores

6
00:00:20,400 --> 00:00:22,480
are going to the local memory.

7
00:00:22,480 --> 00:00:27,530
Which both makes sure that accesses will
be quicker than they otherwise would be

8
00:00:27,530 --> 00:00:32,970
and also the network will not be
used for the majority of accesses.

9
00:00:32,970 --> 00:00:35,890
So this should be selected.

10
00:00:35,890 --> 00:00:41,250
If we, however, put all data pages ever
touched by core N in the memory slice N,

11
00:00:41,250 --> 00:00:45,600
then we have a problem because, for
example, one core might initialize all

12
00:00:45,600 --> 00:00:50,390
the data, and then we put all
of the data in its memory slice.

13
00:00:50,390 --> 00:00:54,200
And at that point, that memory slice
becomes the bottleneck because

14
00:00:54,200 --> 00:00:57,960
everybody will be accessing that slice,
and the data might not even fit there.

15
00:00:57,960 --> 00:01:01,470
So this is not a correct answer.

16
00:01:01,470 --> 00:01:06,140
And then put the stack pages for
core N in the memory slice N

17
00:01:06,140 --> 00:01:11,200
is a very extreme example of this where
really it will just be the core N

18
00:01:11,200 --> 00:01:15,830
that is ever accessing this data, so of
course it should be in its memory slice.

19
00:01:17,020 --> 00:01:19,580
So the stack is one of those things

20
00:01:19,580 --> 00:01:23,940
that the operating system can figure
out very easily where to put.

21
00:01:23,940 --> 00:01:27,380
Some of the other pages are a little
bit more difficult because

22
00:01:27,380 --> 00:01:29,700
more than one core are accessing it.

23
00:01:29,700 --> 00:01:33,420
And then the operating system
needs to choose a good location

24
00:01:33,420 --> 00:01:38,330
either because one core is accessing
it more than others, or to put it in

25
00:01:38,330 --> 00:01:42,240
a memory module that is kind of close
to all the cores that are accessing it.
