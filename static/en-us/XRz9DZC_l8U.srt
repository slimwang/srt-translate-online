1
00:00:00,480 --> 00:00:02,510
Let's now talk about the implementation of clustered

2
00:00:02,510 --> 00:00:05,390
objects. Given an object reference, there is a

3
00:00:05,390 --> 00:00:08,224
data structure in the operating system called the

4
00:00:08,224 --> 00:00:12,000
translation table and the translation table maps an

5
00:00:12,000 --> 00:00:16,650
object reference to a representation in memory. So,

6
00:00:16,650 --> 00:00:18,850
when you have an object reference presented to

7
00:00:18,850 --> 00:00:21,140
the operating system that can pointed to the

8
00:00:21,140 --> 00:00:26,110
particular representation. Remember that the reference itself is common,

9
00:00:26,110 --> 00:00:29,420
the same object reference may be pointing to this replica

10
00:00:29,420 --> 00:00:32,479
on a particular processor, a different replica on a different

11
00:00:32,479 --> 00:00:35,580
processor, and so on. That's a function of the translation

12
00:00:35,580 --> 00:00:38,970
table, so on each CPU, this is what happens. When

13
00:00:38,970 --> 00:00:42,140
an object reference is presented, the operating system converts it

14
00:00:42,140 --> 00:00:45,380
to a representation. And this is a normal operation. Now,

15
00:00:45,380 --> 00:00:48,400
you present an object reference but that object reference may

16
00:00:48,400 --> 00:00:51,400
not be in the translation table yet, because this object

17
00:00:51,400 --> 00:00:54,040
has not been referenced so far. In that

18
00:00:54,040 --> 00:00:57,590
case, you'll have a miss in looking up the

19
00:00:57,590 --> 00:01:00,910
translation table. And if a miss happens, then

20
00:01:00,910 --> 00:01:02,960
there is another data structure in the operating system

21
00:01:02,960 --> 00:01:05,090
called the miss handling table. And the miss

22
00:01:05,090 --> 00:01:09,490
handling table is a mapping between the object reference

23
00:01:09,490 --> 00:01:12,260
that you are presenting and the handler that

24
00:01:12,260 --> 00:01:16,800
the operating system has for dealing with this missing

25
00:01:16,800 --> 00:01:19,170
object reference. Because if an object reference is

26
00:01:19,170 --> 00:01:22,190
missing, then the operating system has to find some

27
00:01:22,190 --> 00:01:24,505
way to make this reference point to a

28
00:01:24,505 --> 00:01:27,990
representation. So that's the focus of this object miss

29
00:01:27,990 --> 00:01:31,170
handler. What this object miss handler does is

30
00:01:31,170 --> 00:01:35,800
it knows the particular representation for this reference. And

31
00:01:35,800 --> 00:01:37,470
it is also going to make a decision.

32
00:01:37,470 --> 00:01:42,320
Should this object reference point to a representation that

33
00:01:42,320 --> 00:01:44,840
is already existing or should it create a

34
00:01:44,840 --> 00:01:47,270
new representation for it? All of those decisions are

35
00:01:47,270 --> 00:01:50,120
going to be taken by this object miss handler.

36
00:01:50,120 --> 00:01:53,470
Once it takes the decision, it creates a representation

37
00:01:53,470 --> 00:01:56,450
for this object reference and it installs the

38
00:01:56,450 --> 00:02:00,550
mapping between this object reference and this representation in

39
00:02:00,550 --> 00:02:03,890
the translation table. So that subsequently, when you present

40
00:02:03,890 --> 00:02:07,620
the object reference, it'll go to the particular representation

41
00:02:07,620 --> 00:02:10,620
for that particular object reference. So that's the

42
00:02:10,620 --> 00:02:13,830
work done by the object miss handler. And,

43
00:02:13,830 --> 00:02:16,840
so this happens on every translation miss. And

44
00:02:16,840 --> 00:02:20,390
the object reference is locally resolved in this case

45
00:02:20,390 --> 00:02:22,990
because the object miss handler is locally available

46
00:02:22,990 --> 00:02:26,120
and it can handle that. But it can happen

47
00:02:26,120 --> 00:02:29,480
that the object miss handler is not available

48
00:02:29,480 --> 00:02:33,060
locally. Now how will that happen? Well, the idea

49
00:02:33,060 --> 00:02:35,640
is that the miss handling table itself is

50
00:02:35,640 --> 00:02:38,350
not a replicated data structure. It's a partitioned

51
00:02:38,350 --> 00:02:42,550
data structure. Remember that all of these are

52
00:02:42,550 --> 00:02:44,980
things that are being done under the cover

53
00:02:44,980 --> 00:02:48,650
to implement the idea of a clustered object.

54
00:02:48,650 --> 00:02:51,740
So, if you think about the region object

55
00:02:51,740 --> 00:02:55,050
that we talked about. The region object is

56
00:02:55,050 --> 00:02:58,500
something that is not going to be accessed

57
00:02:58,500 --> 00:03:01,610
on every processor because, depending on the threads

58
00:03:01,610 --> 00:03:04,720
that are executing in a particular region, those

59
00:03:04,720 --> 00:03:06,370
are the threads that need to access the

60
00:03:06,370 --> 00:03:10,120
region object. And therefore, this miss handling table is

61
00:03:10,120 --> 00:03:14,380
a partition data structure that contains the mapping

62
00:03:14,380 --> 00:03:17,810
between object references and the miss handlers that

63
00:03:17,810 --> 00:03:20,520
correspond to those object references. So in this

64
00:03:20,520 --> 00:03:23,900
particular example that I give you, the miss handling

65
00:03:23,900 --> 00:03:27,960
table happens to contain the miss handler for

66
00:03:27,960 --> 00:03:31,790
this particular object reference. It is possible that

67
00:03:31,790 --> 00:03:34,520
when an object referenced is presented in a

68
00:03:34,520 --> 00:03:38,820
particular processor, the object miss handler is not local,

69
00:03:38,820 --> 00:03:41,070
because the miss handling table is a partitioned

70
00:03:41,070 --> 00:03:43,800
data structure. What happens in that case? Well,

71
00:03:43,800 --> 00:03:48,920
that's why you have a notion of a global miss handler, and the idea here is if

72
00:03:48,920 --> 00:03:51,400
the miss handling table does not have

73
00:03:51,400 --> 00:03:55,240
the miss handler for that particular object reference,

74
00:03:55,240 --> 00:03:59,950
then you go to a global miss handler. This is something that is replicated on

75
00:03:59,950 --> 00:04:02,610
every node. Every node has its global

76
00:04:02,610 --> 00:04:06,200
miss handler. And this global miss handler knows

77
00:04:06,200 --> 00:04:10,570
exactly the partitioning of the miss handling table.

78
00:04:10,570 --> 00:04:13,990
So it knows, how this miss handler table

79
00:04:13,990 --> 00:04:17,209
has been partitioned and distributed on all the nodes

80
00:04:17,209 --> 00:04:20,560
of the multi-processer. And so, if an object reference is

81
00:04:20,560 --> 00:04:24,250
presented on a node, the translation table will say, well,

82
00:04:24,250 --> 00:04:27,360
you know, this particular object reference, we don't know how

83
00:04:27,360 --> 00:04:29,880
to resolve it because the object miss handler doesn't

84
00:04:29,880 --> 00:04:32,720
exist here. And therefore, we're going to go to this

85
00:04:32,720 --> 00:04:35,630
global miss handler. And the global miss handler, because it

86
00:04:35,630 --> 00:04:39,260
is replicated on every node, it says, oh, I know

87
00:04:39,260 --> 00:04:43,180
exactly which node has the miss handling table

88
00:04:43,180 --> 00:04:46,160
that corresponds to this object reference. And so it

89
00:04:46,160 --> 00:04:53,030
can go to that node. And from that node it can obtain a replica, and once it

90
00:04:53,030 --> 00:04:55,530
obtains a replica, it can populate it in

91
00:04:55,530 --> 00:04:59,140
the translation table for this particular node. And once

92
00:04:59,140 --> 00:05:01,300
it populates it, then we are back in

93
00:05:01,300 --> 00:05:04,260
business again, as in this case. So, the function

94
00:05:04,260 --> 00:05:06,730
of the global miss handler is to resolve the

95
00:05:06,730 --> 00:05:11,120
location of the object miss handler for a particular

96
00:05:11,120 --> 00:05:15,120
object reference i. So given an object reference i,

97
00:05:15,120 --> 00:05:17,870
if you have no way of resolving it locally,

98
00:05:17,870 --> 00:05:20,330
then the global miss handler that is present on

99
00:05:20,330 --> 00:05:23,540
every node can tell you the location of the

100
00:05:23,540 --> 00:05:26,290
object miss handler for this particular object, so that

101
00:05:26,290 --> 00:05:29,530
he can resolve that reference, get the replica for it,

102
00:05:29,530 --> 00:05:32,710
install it locally, populate the translation table,

103
00:05:32,710 --> 00:05:34,780
then you're back in business again. So what

104
00:05:34,780 --> 00:05:38,620
this workflow is telling you is how incrementally

105
00:05:38,620 --> 00:05:42,630
the Tornado system can optimize the implementation of

106
00:05:42,630 --> 00:05:46,720
the objects. So depending on the usage pattern,

107
00:05:46,720 --> 00:05:49,390
it can make a determination that I used

108
00:05:49,390 --> 00:05:51,490
to have a single replica, it is now

109
00:05:51,490 --> 00:05:54,790
accessed on multiple nodes. Maybe I should really

110
00:05:54,790 --> 00:05:59,060
replicate it on multiple nodes. So that's a decision that can be taken

111
00:05:59,060 --> 00:06:03,490
during the running of the system on the usage pattern of the different objects.
