1
00:00:00,350 --> 00:00:02,240
So now let's look at
forward warping again.

2
00:00:02,240 --> 00:00:05,920
And this time around, I've actually
changed the notation back where x prime,

3
00:00:05,920 --> 00:00:08,820
y prime are the coordinates
in the target.

4
00:00:08,820 --> 00:00:11,880
And x and y are the coordinates and
the source.

5
00:00:11,880 --> 00:00:14,770
And we basically want to create
a transformation that takes

6
00:00:14,770 --> 00:00:18,090
this function f and
generates a new function, g.

7
00:00:18,090 --> 00:00:24,410
With, of course, the inside values
having information that show the warps.

8
00:00:24,410 --> 00:00:27,778
So we have to basically now
take this in pixel value here,

9
00:00:27,778 --> 00:00:29,330
transform it to this one.

10
00:00:29,330 --> 00:00:33,837
So in essence, what we are trying to
do is send each pixel from f(x, y) to

11
00:00:33,837 --> 00:00:38,739
its corresponding location in g of x and
y and the transformation is T(x, y).

12
00:00:38,739 --> 00:00:40,512
So now the question comes up is,

13
00:00:40,512 --> 00:00:44,280
what happens if the pixel
lands between the two pixels?

14
00:00:44,280 --> 00:00:46,330
So now I'm basically
gotten rid of the images,

15
00:00:46,330 --> 00:00:50,100
and kind of just pointed out what I
mean by the fact, that the pixel line.

16
00:00:50,100 --> 00:00:53,090
So this is one pixel here, and
of course, now because of the fact,

17
00:00:53,090 --> 00:00:55,580
we have changed
the domain of this image.

18
00:00:55,580 --> 00:00:57,040
We now have pixel values here,

19
00:00:57,040 --> 00:00:59,560
but this one is now falling
in between all of them.

20
00:00:59,560 --> 00:01:02,230
To achieve this, we basically
have to distribute the color

21
00:01:02,230 --> 00:01:05,580
among the neighboring pixel to
generate this new pixel, and

22
00:01:05,580 --> 00:01:07,790
the technique widely used to
do this called splatting.
