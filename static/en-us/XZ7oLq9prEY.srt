1
00:00:00,103 --> 00:00:02,206
Now that's a contract.

2
00:00:02,774 --> 00:00:04,988
But we still don't have a database.

3
00:00:05,455 --> 00:00:08,945
Our database class 
will extend an Android class.

4
00:00:09,035 --> 00:00:11,313
SQLiteOpenHelper.

5
00:00:13,502 --> 00:00:18,766
SQLiteOpenHelper contains cool stuff
to help us handle database versioning.

6
00:00:18,766 --> 00:00:21,778
As we make changes
to our database in the future,

7
00:00:21,778 --> 00:00:24,392
it will help us modify our tables.

8
00:00:24,392 --> 00:00:27,312
For many apps, being able to upgrade
to a new version

9
00:00:27,312 --> 00:00:29,777
without data loss is critical.

10
00:00:29,777 --> 00:00:34,527
Let's create a WeatherDBHelper class
within the data package

11
00:00:34,527 --> 00:00:37,364
and have it extend SQLiteOpenHelper.

12
00:00:43,366 --> 00:00:46,643
We can add the required methods 
by hitting Ctrl+I,

13
00:00:46,643 --> 00:00:50,433
and we can override the constructor 
by hitting Ctrl+O.

14
00:00:50,433 --> 00:00:53,195
Now we can hard code 
these variables to constructor.

15
00:00:53,270 --> 00:00:57,163
Hard coding name to database name,

16
00:00:57,293 --> 00:00:59,809
our factory to null,

17
00:00:59,809 --> 00:01:03,236
and our version to database version.

18
00:01:03,400 --> 00:01:06,326
Now, you'll note I have made 
the database name public,

19
00:01:06,326 --> 00:01:09,237
and that's because we're going to use it
in our tests in the future.

20
00:01:09,312 --> 00:01:12,418
Now you see we've got it onCreate
and an onUpgrade method.

21
00:01:12,418 --> 00:01:13,408
In the onCreate method,

22
00:01:13,408 --> 00:01:15,486
we're going to start by creating a string

23
00:01:15,486 --> 00:01:18,116
to build the weather entry table
using data defined

24
00:01:18,116 --> 00:01:20,088
within the weather entry contract.

25
00:01:20,088 --> 00:01:23,125
Now I'm just going to add this comment
so you know where to go back

26
00:01:23,125 --> 00:01:25,615
and add the location entry stuff later.

27
00:01:25,615 --> 00:01:27,543
Since weather entry 
depends on location entry,

28
00:01:27,543 --> 00:01:29,882
I would normally write 
location entry first,

29
00:01:29,882 --> 00:01:31,954
but weather entry is pretty complicated.

30
00:01:31,954 --> 00:01:36,603
So I'd rather explain what we've done
and leave location entry up to you.

31
00:01:36,603 --> 00:01:40,934
We're going to use raw SQL 
for our create table query,

32
00:01:40,941 --> 00:01:43,331
beginning with the table name 
from our contract.

33
00:01:43,331 --> 00:01:47,175
At this point, it's helpful to import 
WeatherContract.locationentry

34
00:01:47,175 --> 00:01:48,419
and weather entry.

35
00:01:48,519 --> 00:01:51,044
It makes our query 
so much easier to read.

36
00:01:51,044 --> 00:01:52,792
We'll start with our ID field,

37
00:01:52,792 --> 00:01:56,879
which we'll set as our primary key 
in an auto increment field.

38
00:01:56,879 --> 00:01:59,530
Note that integer is actually 
a signed value

39
00:01:59,530 --> 00:02:02,751
up to eight bytes long in SQLite.

40
00:02:02,751 --> 00:02:06,998
Using the auto increment feature 
doesn't do precisely what one might think.

41
00:02:06,998 --> 00:02:10,002
Setting up the ID 
is an integer primary key

42
00:02:10,002 --> 00:02:13,209
actually makes the value unique
whenever you do an insert,

43
00:02:13,209 --> 00:02:15,410
but it may not always increment.

44
00:02:15,410 --> 00:02:19,284
It may reuse existing ID values 
if the records have been deleted.

45
00:02:19,284 --> 00:02:21,512
What auto-increment is really useful for,

46
00:02:21,512 --> 00:02:24,515
is if you're synchronizing data 
two ways with the server.

47
00:02:24,515 --> 00:02:27,917
But, we'll take advantage of it here 
because it makes data from our queries

48
00:02:27,917 --> 00:02:30,982
sort a bit more naturally 
because we insert them in the right order

49
00:02:30,982 --> 00:02:32,562
coming from the server.

50
00:02:32,562 --> 00:02:36,825
In general, we're using constraints 
on fields. In this case, not null.

51
00:02:36,825 --> 00:02:39,326
We do this because it allows 
the database to do much

52
00:02:39,326 --> 00:02:41,630
of our parameter validation for us.

53
00:02:41,630 --> 00:02:43,510
The tricky part about doing it this way,

54
00:02:43,510 --> 00:02:46,731
is that we don't get useful errors 
when these constraints fail,

55
00:02:46,731 --> 00:02:49,034
so it can be challenging to debug.

56
00:02:49,034 --> 00:02:52,110
We're using a human readable string 
for the date.

57
00:02:52,110 --> 00:02:55,618
There's no strong reason for 
or against this choice.

58
00:02:55,618 --> 00:02:58,666
We wanted to normalize the date 
to simplify our queries,

59
00:02:58,666 --> 00:03:01,262
and human readability 
simplifies debugging.

60
00:03:01,262 --> 00:03:04,826
The date comes from open weather 
in Unix time stamp format

61
00:03:04,826 --> 00:03:07,701
with some time information 
that we need to get rid of.

62
00:03:08,038 --> 00:03:10,097
I'm not going to cover every field.

63
00:03:10,433 --> 00:03:13,987
Real means floating point in SQL.

64
00:03:13,987 --> 00:03:15,786
It would have been fine 
to have used integer

65
00:03:15,786 --> 00:03:18,041
with fixed point math as well
and some would argue

66
00:03:18,041 --> 00:03:19,118
that this would be faster,

67
00:03:19,118 --> 00:03:23,516
but real is more straight forward 
since we're storing floating point values.

68
00:03:23,516 --> 00:03:26,662
Now for the fun stuff, 
we're going to set up a loc key.

69
00:03:26,662 --> 00:03:29,675
It's a foreign key 
to the location entry table

70
00:03:29,675 --> 00:03:31,228
that you will be building.

71
00:03:31,228 --> 00:03:35,829
This causes SQLite to enforce 
the relationship between the tables.

72
00:03:35,829 --> 00:03:38,095
We cannot insert a weather entry

73
00:03:38,095 --> 00:03:40,949
when there is no corresponding 
location entry.

74
00:03:40,949 --> 00:03:44,710
And we cannot delete a location entry
if there are still weather entries

75
00:03:44,710 --> 00:03:45,702
that depend on it.

76
00:03:45,888 --> 00:03:47,539
Cool stuff, right?

77
00:03:47,651 --> 00:03:53,682
One last constraint. Our date text 
plus location must be unique.

78
00:03:53,682 --> 00:03:56,041
On conflict, replace the data.

79
00:03:56,041 --> 00:04:00,086
This allows us to insert new data 
from the open weather EPI easily.

80
00:04:00,086 --> 00:04:03,897
Preserving existing keys and updating 
the value as the forecast changes.
