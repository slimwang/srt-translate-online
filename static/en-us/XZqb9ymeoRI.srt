1
00:00:00,460 --> 00:00:04,019
Okay. So I alluded to this before. Cookies are sent

2
00:00:04,019 --> 00:00:07,700
in HTTP headers. So when a server and, and an HTTP

3
00:00:07,700 --> 00:00:10,890
response, wants to give you a cookie, wants to assign a

4
00:00:10,890 --> 00:00:13,580
cookie to your browser it uses a header that looks something

5
00:00:13,580 --> 00:00:17,051
like this. The header name is Set-Cookie. Like all headers, it's

6
00:00:17,051 --> 00:00:18,590
followed by a colon and then a space and then the

7
00:00:18,590 --> 00:00:21,650
value of the header. And in this particular case, you say,

8
00:00:21,650 --> 00:00:25,760
name equals value. There are some other parameters you can have

9
00:00:25,760 --> 00:00:28,352
on the cookie that we'll discuss later but, basically, they use

10
00:00:28,352 --> 00:00:31,600
the Set-Cookie header to, to set cookie named user_id to this

11
00:00:31,600 --> 00:00:34,690
value. And remember, this is the value, and this is the

12
00:00:34,690 --> 00:00:38,100
name, and the value can be, you know, up to 4K.

13
00:00:38,100 --> 00:00:39,570
Honestly, I don't know if there's a limit to how big

14
00:00:39,570 --> 00:00:43,248
the name can be. generally, this is very, very short. If

15
00:00:43,248 --> 00:00:46,198
the server wants to set, send the multiple cookies, it can

16
00:00:46,198 --> 00:00:51,030
do so by using multiple Set-Cookie, Cookie headers. There's no restriction

17
00:00:51,030 --> 00:00:54,660
that says headers have to be unique. A, a server can

18
00:00:54,660 --> 00:00:57,420
send as many cookies as it wants. It's up to the browser

19
00:00:57,420 --> 00:01:00,260
to decide whether or not to store them. Remember, I said about

20
00:01:00,260 --> 00:01:02,920
20 is the max. So try to, try to keep it under

21
00:01:02,920 --> 00:01:06,410
there. Now, when, when a, this is under Response. Now, in

22
00:01:06,410 --> 00:01:10,365
future requests, the browser sends its own header, that this is the,

23
00:01:10,365 --> 00:01:12,300
the name of the header, and remember, this is, you know, this

24
00:01:12,300 --> 00:01:16,040
is also the name of the header, over here, Set-Cookie and then

25
00:01:16,040 --> 00:01:19,000
the value of the header, in this case, is user_id

26
00:01:19,000 --> 00:01:21,950
equals 12345. Again, we have the, the name of the

27
00:01:21,950 --> 00:01:23,990
cookie and the value of the cookie. If we were

28
00:01:23,990 --> 00:01:27,350
to make this H, this request match what these two cookies

29
00:01:27,350 --> 00:01:30,590
were to, when our browser sends multiple cookies, it'll look

30
00:01:30,590 --> 00:01:35,210
something like this, user_id equals 12345; which separates each cookie from

31
00:01:35,210 --> 00:01:38,750
each other, and then any other cookies. So the browser

32
00:01:38,750 --> 00:01:41,292
sends one cookie header with all of your cookies in it.

33
00:01:41,292 --> 00:01:44,360
The semicolon is important and you may be wondering, well, what

34
00:01:44,360 --> 00:01:46,980
if I want to put a semicolon in my cookie value? And the

35
00:01:46,980 --> 00:01:51,770
short answer is, don't. And if you really want to, encode

36
00:01:51,770 --> 00:01:53,860
the cookie value, you know? You, this, this can be whatever you

37
00:01:53,860 --> 00:01:56,130
want. The browser doesn't care so you can, you can Base64

38
00:01:56,130 --> 00:01:59,230
it, you can encrypt it, you can ROT13 it, you can do

39
00:01:59,230 --> 00:02:02,590
whatever you want here but make sure you escape those semicolons

40
00:02:02,590 --> 00:02:06,330
so you don't goof up your the incoming cookie header. Some frameworks

41
00:02:06,330 --> 00:02:08,720
will do this for you. We are going to be operating

42
00:02:08,720 --> 00:02:11,230
at a lower level so that's something you'll want to think about.
