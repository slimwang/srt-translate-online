1
00:00:00,250 --> 00:00:02,480
In this first final exam problem, we were

2
00:00:02,480 --> 00:00:04,830
tasked with writing the Lexar for a new

3
00:00:04,830 --> 00:00:08,189
programming language. There are seven types of tokens,

4
00:00:08,189 --> 00:00:10,630
and four of which are simple operators. We

5
00:00:10,630 --> 00:00:15,570
have plus, minus, times and divide. So, here

6
00:00:15,570 --> 00:00:18,850
I've written the token rule for the plus

7
00:00:18,850 --> 00:00:21,800
operator. The first line is a regular expression

8
00:00:21,800 --> 00:00:25,350
that matches the plus symbol. And then we return

9
00:00:25,350 --> 00:00:28,250
the token unchanged. And for the rest of the operators,

10
00:00:28,250 --> 00:00:30,510
we're going to follow that same format. We're just going to change

11
00:00:30,510 --> 00:00:33,070
the name of the function and we're going to change the

12
00:00:33,070 --> 00:00:36,560
symbol to which it matches. Our next token is the

13
00:00:36,560 --> 00:00:39,930
identifier. In our programming language, this will be the names

14
00:00:39,930 --> 00:00:41,940
that we have for things. So it can be something

15
00:00:41,940 --> 00:00:46,560
like. My _variable or something even more interesting like just

16
00:00:46,560 --> 00:00:50,590
the word Andy. More precisely, in our program language, an identifier

17
00:00:50,590 --> 00:00:54,660
is a non-empty sequence of letters and underscores, where

18
00:00:54,660 --> 00:00:56,860
the first character is not an underscore. So, we can

19
00:00:56,860 --> 00:00:59,590
write our rule for that pretty simply. Here I

20
00:00:59,590 --> 00:01:03,950
have a function, t_IDENT. And the regular expression is pretty

21
00:01:03,950 --> 00:01:06,970
simple. The first character, and it has to be

22
00:01:06,970 --> 00:01:09,830
at least one character because it's a non-empty string, it's

23
00:01:09,830 --> 00:01:12,240
just going to be some letter. And then we're going

24
00:01:12,240 --> 00:01:16,690
to be followed by zero or more letters or underscores.

25
00:01:16,690 --> 00:01:18,860
So strings in this language are very similar to

26
00:01:18,860 --> 00:01:22,660
strings in Python. We can have single or double quotes,

27
00:01:22,660 --> 00:01:25,880
but in this particular language, for which we are designing

28
00:01:25,880 --> 00:01:28,650
our Lexar, we don't have any escape sequences. This actually

29
00:01:28,650 --> 00:01:33,490
makes the expression to match the strings much simpler. So,

30
00:01:33,490 --> 00:01:36,400
the first rule I'm writing is just for single quoted

31
00:01:36,400 --> 00:01:39,030
strings. The rule for double quoted strings is going to

32
00:01:39,030 --> 00:01:42,100
be very similar. It's just that the right of expression

33
00:01:42,100 --> 00:01:44,880
to which we are matching is going to be slightly different.

34
00:01:44,880 --> 00:01:46,460
When I go over the code at the end and I

35
00:01:46,460 --> 00:01:48,800
show you the finished product, I'll show you what that looks

36
00:01:48,800 --> 00:01:52,350
like. But for now let's just concentrate on single quotas strings. Here

37
00:01:52,350 --> 00:01:56,450
I require that the string begins and ends with a single

38
00:01:56,450 --> 00:02:00,020
quote and is a sequence of zero or more, kind of

39
00:02:00,020 --> 00:02:03,370
an empty string, characters that aren't the single quote. Since we

40
00:02:03,370 --> 00:02:07,310
don't have escape characters that's all we need. So here I'm taking

41
00:02:07,310 --> 00:02:09,410
out the quotes from the beginning and end of

42
00:02:09,410 --> 00:02:11,810
the string, that way the value of this token is

43
00:02:11,810 --> 00:02:14,540
the string itself. And I'm setting the type to

44
00:02:14,540 --> 00:02:18,110
string. All caps. Numbers in this language are a little

45
00:02:18,110 --> 00:02:20,930
bit different than Python. First off, the only numbers

46
00:02:20,930 --> 00:02:25,520
we have are positive integers. So negative 5, and 5.5

47
00:02:25,520 --> 00:02:29,730
are both not valid numbers in this language. So, one

48
00:02:29,730 --> 00:02:32,560
example of a good one would be 5, we're also

49
00:02:32,560 --> 00:02:37,820
allowed to put underscores anywhere in the number, as long as it's not the first

50
00:02:37,820 --> 00:02:43,158
character in the number. So, 5_5 _ _ _ is going to be

51
00:02:43,158 --> 00:02:48,370
equivalent to just 55. A lot of languages actually have

52
00:02:48,370 --> 00:02:53,810
this feature because it's easier to read 1, 2, 3, _, 4, 5, 6. Similar

53
00:02:55,000 --> 00:03:00,070
to how we often put a 123,456.

54
00:03:00,070 --> 00:03:02,580
So here I've started writing out the token rule

55
00:03:02,580 --> 00:03:05,250
for numbers in this language. The first character has to

56
00:03:05,250 --> 00:03:07,790
be a digit, zero thru nine. And afterwards we

57
00:03:07,790 --> 00:03:12,690
can have zero or more digits or underscores. Now we

58
00:03:12,690 --> 00:03:15,540
want the value of the number token to be

59
00:03:15,540 --> 00:03:19,020
the number, the integer, that it represents. However if we

60
00:03:19,020 --> 00:03:22,620
just return the string, or try to call some. Integer

61
00:03:22,620 --> 00:03:25,240
conversion on it, we're just going to get a lot

62
00:03:25,240 --> 00:03:28,730
of underscores and it's not really going to work

63
00:03:28,730 --> 00:03:31,390
and it's not what we want. We want to take 5_5_

64
00:03:31,390 --> 00:03:33,860
_ _ and just get 55. So, my strategy

65
00:03:33,860 --> 00:03:36,450
is going to be to go through each character in

66
00:03:36,450 --> 00:03:40,340
our string, append any digits to a new string,

67
00:03:40,340 --> 00:03:44,170
ignore any underscores. And once I'm done call ent onto

68
00:03:44,170 --> 00:03:47,170
that string, to get the integer that the original token

69
00:03:47,170 --> 00:03:50,940
represented. So, here I have the finished function. I want to

70
00:03:50,940 --> 00:03:54,450
go through each character like I planned. If it's

71
00:03:54,450 --> 00:03:57,360
not an underscore I'm going to append it onto our

72
00:03:57,360 --> 00:04:00,160
temp string and then call ent on that temp

73
00:04:00,160 --> 00:04:02,890
string to get the new value. And here I

74
00:04:02,890 --> 00:04:05,930
have the finished code. We have our basic operators,

75
00:04:05,930 --> 00:04:09,960
plus, minus, times, and divide, the identifier function we

76
00:04:09,960 --> 00:04:13,320
wrote, single and double strings, [UNKNOWN] the only difference

77
00:04:13,320 --> 00:04:16,740
here is that we have single quotes right here,

78
00:04:16,740 --> 00:04:21,380
double quotes right there. And lastly, the number token function that we wrote.
