1
00:00:00,200 --> 00:00:04,540
In previous lessons we have seen, that a Superscalar processor will try to

2
00:00:04,540 --> 00:00:09,800
execute more than one instruction per cycle. The VLIW processors,

3
00:00:09,800 --> 00:00:14,740
are trying to achieve the same amount of work per cycle but in a different way.

4
00:00:14,740 --> 00:00:20,040
So let's compare the two approaches and see how the VLIW processors differ from

5
00:00:20,040 --> 00:00:24,340
the out of order, and in order Superscalar processors that we have been already

6
00:00:24,340 --> 00:00:29,400
seeing. So what we will do is compare the out of order Superscalar processor.

7
00:00:29,400 --> 00:00:34,150
The in-order Superscalar processor, and the very long instruction word, or

8
00:00:34,150 --> 00:00:38,240
the VLIW processor according to several things.

9
00:00:38,240 --> 00:00:42,680
First, how many instructions per cycle do we try to do.

10
00:00:42,680 --> 00:00:47,840
An N issue out-of-order Superscalar processor is trying to do

11
00:00:47,840 --> 00:00:52,960
up to N instructions per cycle. And in-order Superscalar processor,

12
00:00:52,960 --> 00:00:58,460
is also trying to do up to N instructions per cycle. A VLIW processor

13
00:00:58,460 --> 00:01:04,260
is different in that it tries to execute 1 large instruction per cycle, but

14
00:01:04,260 --> 00:01:10,280
that one large instruction does the same work as N normal instructions would do,

15
00:01:10,280 --> 00:01:14,420
so really we're trying to do the same work per cycle. But the Superscalar

16
00:01:14,420 --> 00:01:18,280
processors are trying to do more than one simple instruction per cycle,

17
00:01:18,280 --> 00:01:22,400
where as [UNKNOWN] VLIW processor does one large instruction that really does

18
00:01:22,400 --> 00:01:27,490
the same work as N of these; but it needs to be given a single instruction to do

19
00:01:27,490 --> 00:01:31,940
per cycle. In terms of, how do we find independent instructions that we can

20
00:01:31,940 --> 00:01:37,580
do in a cycle, the out-of-order Superscaler processor finds its N instructions,

21
00:01:37,580 --> 00:01:42,950
by looking at much than this number of instructions in its instruction window.

22
00:01:42,950 --> 00:01:44,980
So it fetches the code is, and

23
00:01:44,980 --> 00:01:48,530
then kind of has a window of more than n instructions. And

24
00:01:48,530 --> 00:01:54,550
among these it's trying to find the N, that it needs to execute. In contrast,

25
00:01:54,550 --> 00:01:58,870
an in-order Superscalar processor is trying to execute up to N instructions per

26
00:01:58,870 --> 00:02:03,810
cycle by looking at only the next N instructions in program order. So it

27
00:02:03,810 --> 00:02:07,770
doesn't maintain this huge instruction window among which it is trying to find N

28
00:02:07,770 --> 00:02:12,960
instructions, instead it just tries to see whether the next N instructions or

29
00:02:12,960 --> 00:02:17,156
some subset of them can be executed in program order in parallel.

30
00:02:17,156 --> 00:02:23,790
A VLIW processor doesn't. Even try to find independent instructions.

31
00:02:23,790 --> 00:02:27,876
It simply tries to do the next large instruction. So

32
00:02:27,876 --> 00:02:33,500
it behaves like a non-Superscalar processor that executes instructions in order.

33
00:02:34,510 --> 00:02:39,870
It's just that each of these instructions is really, describing a lot of work.

34
00:02:39,870 --> 00:02:45,330
In terms of hardware cost, this. Looking at many instructions,

35
00:02:45,330 --> 00:02:49,780
in order to find the N that we are looking for in an out-of-order Superscalar

36
00:02:49,780 --> 00:02:54,490
processor is really expensive. The in-order Superscalar processor,

37
00:02:54,490 --> 00:03:00,810
does a lot less work and needs a lot less hardware to find the instructions.

38
00:03:00,810 --> 00:03:05,204
So it's less expensive in terms of harder costs than they're out-of-order

39
00:03:05,204 --> 00:03:10,510
Superscalar cousins. The VLIW processor reduces that cost even further, so

40
00:03:10,510 --> 00:03:14,990
it's even less expensive than an in-order Superscalar processor for

41
00:03:14,990 --> 00:03:20,480
the same amount of work per cycle, assuming we can find that work

42
00:03:20,480 --> 00:03:25,310
because we are now even simpler in finding that work. And that brings us to

43
00:03:25,310 --> 00:03:29,848
our last point, which is does the processor need help from the compiler?

44
00:03:29,848 --> 00:03:34,010
In an out-of-order Superscalar processor, it does pretty well, even without any

45
00:03:34,010 --> 00:03:40,050
compiler help. But the compiler can help improve the program performance.

46
00:03:40,050 --> 00:03:44,410
An in-order Superscalar processor is more dependent on the compiler. If

47
00:03:44,410 --> 00:03:50,090
the compiler doesn't do anything to put independent instructions. Consecutively

48
00:03:50,090 --> 00:03:53,670
than an in-order Superscalar processor will not have good performance,

49
00:03:53,670 --> 00:03:58,239
it performance will lack significantly. The performance that an out-of-order

50
00:03:58,239 --> 00:04:01,968
Superscalar processor with the same issue with would be able to achieve. So

51
00:04:01,968 --> 00:04:06,050
an in-order Superscalar processor really needs help from the compiler,

52
00:04:06,050 --> 00:04:10,902
without such help it is going to perform significantly worse. Then,

53
00:04:10,902 --> 00:04:13,930
an out-of-order Superscalar processor would. And finally,

54
00:04:13,930 --> 00:04:18,878
VLIW processor completely depends on the compiler, to produce performance.

55
00:04:18,878 --> 00:04:24,120
If we don' have a good compiler, a VLIW processor will fail miserably as

56
00:04:24,120 --> 00:04:27,740
far as performance is concerned. So as we can see among this three,

57
00:04:27,740 --> 00:04:30,090
the out-of-order Superscalar processor is trying to do,

58
00:04:30,090 --> 00:04:34,380
kind of like a hardware intensive. I don't need much help from anybody, but

59
00:04:34,380 --> 00:04:39,350
it sacrifices hardware to do that. An in-order Superscalar processor tries to

60
00:04:39,350 --> 00:04:43,360
reduce the hardware cost, but still can execute the same program that

61
00:04:43,360 --> 00:04:47,450
an out-of-order Superscalar processor could. And in some programs,

62
00:04:47,450 --> 00:04:50,970
it really needs compiler help in order to achieve good performance. And

63
00:04:50,970 --> 00:04:55,690
finally, a VLIW processor goes to the extreme of completely depending on

64
00:04:55,690 --> 00:05:01,490
the compiler to provide and express the parallelism it needs to do work.

65
00:05:01,490 --> 00:05:04,990
But in exchange, it gives us much lower cost.
