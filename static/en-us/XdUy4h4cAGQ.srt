1
00:00:00,420 --> 00:00:04,980
In certain cases you might not want
to translate parts of a text string.

2
00:00:04,980 --> 00:00:07,590
For example you might want
to create a string and

3
00:00:07,590 --> 00:00:10,380
then leave spots that can be
filled in later with variables.

4
00:00:11,720 --> 00:00:15,250
In that case you want to mark off
the spots that shouldn't be translated

5
00:00:15,250 --> 00:00:16,490
With an xliff tag.

6
00:00:17,500 --> 00:00:19,750
It wouldn't make sense to
translate the user's name,

7
00:00:19,750 --> 00:00:22,170
but it would make sense
to translate name.

8
00:00:23,530 --> 00:00:27,240
So, when used properly,
this whole string resource would show up

9
00:00:27,240 --> 00:00:30,400
as name Colon and
then the person's name, like Amy.

10
00:00:31,490 --> 00:00:35,140
With the xliff tag you give it an id,
which is name,

11
00:00:35,140 --> 00:00:37,750
and then you can specify an example,
like Amy.

12
00:00:39,230 --> 00:00:43,230
Inside the xliff tags you would but
the string that shouldn't be translated.

13
00:00:44,290 --> 00:00:48,150
In this case,
we're using the %s formatter symbol,

14
00:00:48,150 --> 00:00:51,749
which specifies that a string will
be substituted in here later.

15
00:00:52,770 --> 00:00:55,800
If you're wondering why we don't just
add the strings using the plus symbol

16
00:00:55,800 --> 00:00:59,900
in the Java code, the reason is because
declaring it as a string resource

17
00:00:59,900 --> 00:01:04,810
allows the translator to decide if
this is the right format for the text.

18
00:01:04,810 --> 00:01:08,070
The translator may decide to flip
the order of some of these words,

19
00:01:08,070 --> 00:01:10,400
so that it makes more sense
in the local context.

20
00:01:11,450 --> 00:01:16,100
The translator only has control over
the words in the strings.xml file.

21
00:01:16,100 --> 00:01:17,760
They don't have control
over the Java code.

22
00:01:18,860 --> 00:01:22,730
For the xliff tag to be recognized you
will also want to add this thing to

23
00:01:22,730 --> 00:01:25,170
the resources tag in
your string.xml file.

24
00:01:26,520 --> 00:01:29,550
Now in the Java code we're going to
replace this part of the order summary

25
00:01:29,550 --> 00:01:30,590
with our string resource.

26
00:01:31,640 --> 00:01:34,970
Now we're using the order summary
named string resource and

27
00:01:34,970 --> 00:01:38,359
we're filling in the blank
using the name variable.

28
00:01:39,460 --> 00:01:42,100
Normally this getString
method in the activity

29
00:01:42,100 --> 00:01:46,800
would take as argument one input
which is the string resource.

30
00:01:46,800 --> 00:01:50,180
But now it takes in two arguments
because we want to pass in the name

31
00:01:50,180 --> 00:01:55,830
variable and have that be inserted
into the blank spot in this string.

32
00:01:55,830 --> 00:01:59,150
If your string resource had two
spots that needed to be filled in,

33
00:01:59,150 --> 00:02:02,260
then you would pass in two
additional inputs here.

34
00:02:02,260 --> 00:02:06,530
So that'd be a total of three inputs to
the method call, and so on from there.

35
00:02:07,560 --> 00:02:11,560
If you want anymore clarification on how
to use the xliff tags, you can can check

36
00:02:11,560 --> 00:02:14,640
the localization checklist which is
linked in the instructor notes below.
