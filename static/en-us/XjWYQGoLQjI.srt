1
00:00:00,290 --> 00:00:03,840
This is where multiprocessor comes in. If you're

2
00:00:03,840 --> 00:00:08,950
implementing this RPC package on a shared memory multiprocessor,

3
00:00:08,950 --> 00:00:11,800
then we can exploit multiprocessors that are are available

4
00:00:11,800 --> 00:00:14,140
in the SMP. What we can do is, we

5
00:00:14,140 --> 00:00:17,860
can preload the server domains. In a particular

6
00:00:17,860 --> 00:00:20,910
processor. And what we mean by that is, if

7
00:00:20,910 --> 00:00:23,830
we preload a server domain in a processor and,

8
00:00:23,830 --> 00:00:25,780
and don't let anything else run on this processor.

9
00:00:25,780 --> 00:00:28,470
This particular server is loaded on CPU 2.

10
00:00:28,470 --> 00:00:31,250
We're not going to let any other thing disturb

11
00:00:31,250 --> 00:00:33,990
what's going on in this CPU. What, what

12
00:00:33,990 --> 00:00:37,760
that would mean is that the caches associated with

13
00:00:37,760 --> 00:00:40,820
this CPU. Will be warm with the stuff

14
00:00:40,820 --> 00:00:43,640
that this particular domain needs. So, in other

15
00:00:43,640 --> 00:00:47,290
words, the server's address space is pre-loaded in

16
00:00:47,290 --> 00:00:50,790
a particular processor. If you have multiple processors then

17
00:00:50,790 --> 00:00:52,650
you can exploit the fact that you have

18
00:00:52,650 --> 00:00:56,650
multiple processors in the SMP. So, if a client

19
00:00:56,650 --> 00:01:00,000
comes along and wants to make an RPC call.

20
00:01:00,000 --> 00:01:03,340
Then what we want to do is use the server

21
00:01:03,340 --> 00:01:06,380
that has been preloaded in a particular CPU as

22
00:01:06,380 --> 00:01:10,060
a recipient of this particular RPC call. So when

23
00:01:10,060 --> 00:01:12,540
this client makes that call, that call is going to

24
00:01:12,540 --> 00:01:15,700
be directed to the server that has been preloaded.

25
00:01:15,700 --> 00:01:21,380
In a particular CPU and so the VP loaded in the CPU, the caches will be warm

26
00:01:21,380 --> 00:01:26,230
and therefore we can avoid or reduce, mitigate

27
00:01:26,230 --> 00:01:30,330
the impact on loss of locality. That I mention

28
00:01:30,330 --> 00:01:32,700
to you that goes on when you go

29
00:01:32,700 --> 00:01:35,840
from one protection domain to another protection domain. So

30
00:01:35,840 --> 00:01:38,140
this is the happy state of the world where

31
00:01:38,140 --> 00:01:41,030
what we have done is, we've first of all

32
00:01:41,030 --> 00:01:45,390
eliminated kernel intervention in making the actual call and

33
00:01:45,390 --> 00:01:48,790
return between the client and the server by providing

34
00:01:48,790 --> 00:01:52,100
an argument stack in shared memory that is shared

35
00:01:52,100 --> 00:01:54,590
in the address space of the client. And the address

36
00:01:54,590 --> 00:01:57,520
space of the server. And this way, the client

37
00:01:57,520 --> 00:02:00,045
can pass the actual arguments of the call to the

38
00:02:00,045 --> 00:02:02,275
A-stack, and the server can retrieve it from the

39
00:02:02,275 --> 00:02:06,070
A-stack without kernel intervention. And when the server is ready

40
00:02:06,070 --> 00:02:09,220
to return the results back to the client, once again

41
00:02:09,220 --> 00:02:10,690
it can do the same thing. Put it in the A-stack

42
00:02:10,690 --> 00:02:14,460
so that it is available for the client. So, without any

43
00:02:14,460 --> 00:02:18,830
kernel intervention, you can actually do the. Call and return, and

44
00:02:18,830 --> 00:02:22,280
of course the mediation happens only in the fact that the

45
00:02:22,280 --> 00:02:25,310
kernel has to validate the call. Every time the client makes

46
00:02:25,310 --> 00:02:27,620
a call it has to validate that call. But the loss

47
00:02:27,620 --> 00:02:31,110
of locality you can avoid by making sure that the server

48
00:02:31,110 --> 00:02:36,340
domain is pre-loaded in one of the CPUs. And the other thing that the kernel can

49
00:02:36,340 --> 00:02:39,440
do is look at the popularity of a

50
00:02:39,440 --> 00:02:43,850
particular server. If a server is serving lots of

51
00:02:43,850 --> 00:02:47,490
different clients than in a multiprocessor, then it

52
00:02:47,490 --> 00:02:50,520
can potentially based on monitoring the site that we

53
00:02:50,520 --> 00:02:53,310
may want to have multiple. CPUs very catered

54
00:02:53,310 --> 00:02:56,390
to, the servers and that way you have several

55
00:02:56,390 --> 00:03:02,180
different domains of the same server preloaded in several CPUs to, cater to the

56
00:03:02,180 --> 00:03:05,830
needs of several simultaneous requests that may

57
00:03:05,830 --> 00:03:07,800
be coming in for a particular service.
