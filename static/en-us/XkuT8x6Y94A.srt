1
00:00:00,000 --> 00:00:03,000
If you've used Reddit before, you know it's a big list of links

2
00:00:03,000 --> 00:00:05,000
and you can just vote on those links up and down.

3
00:00:05,000 --> 00:00:08,000
The front page is whatever is the most popular.

4
00:00:08,000 --> 00:00:11,000
They can be voted up or voted down.

5
00:00:11,000 --> 00:00:17,000
And good links stay at the top of the page for a long time,

6
00:00:17,000 --> 00:00:20,000
and mediocre links may make an appearance but disappear after a short while.

7
00:00:20,000 --> 00:00:22,000
So this is a really cool feature of Reddit,

8
00:00:22,000 --> 00:00:24,000
and it's actually not that hard to compute.

9
00:00:24,000 --> 00:00:27,000
What we do is we use a special index.

10
00:00:27,000 --> 00:00:29,000
I'll show you how that works.

11
00:00:29,000 --> 00:00:31,000
So we've got a table--a link table--

12
00:00:31,000 --> 00:00:33,000
that looks something a lot like what we've been dealing with.

13
00:00:33,000 --> 00:00:37,000
It's got an id and it's got a number of up votes,

14
00:00:37,000 --> 00:00:40,000
a number of down votes and a date.

15
00:00:40,000 --> 00:00:43,000
And it also has this field called score.

16
00:00:43,000 --> 00:00:45,000
It's a floating-point field.

17
00:00:45,000 --> 00:00:47,000
And this is the total score of the link.

18
00:00:47,000 --> 00:00:50,000
So you may have 10 ups, 1 down,

19
00:00:50,000 --> 00:00:52,000
and the score might be actually 25.

20
00:00:52,000 --> 00:00:55,000
And the way the Reddit hot algorithm works is

21
00:00:55,000 --> 00:00:58,000
there's an index on the score field--it used to just be called the hot index--

22
00:00:58,000 --> 00:01:02,000
and it was really just on the score field.

23
00:01:02,000 --> 00:01:05,000
One approach to generating this front page might be to

24
00:01:05,000 --> 00:01:08,000
take all the links submitted in the last 24 hours,

25
00:01:08,000 --> 00:01:11,000
do some fancy math, sort them by how many up votes and down votes--

26
00:01:11,000 --> 00:01:13,000
the spread between these two votes is--

27
00:01:13,000 --> 00:01:15,000
and sort it that way.

28
00:01:15,000 --> 00:01:18,000
But that doesn't really capture that hotness--

29
00:01:18,000 --> 00:01:20,000
how things rise and fall.

30
00:01:20,000 --> 00:01:23,000
So every time--like for example--you add 1 up vote,

31
00:01:23,000 --> 00:01:26,000
we actually increment the score by some other amount.

32
00:01:26,000 --> 00:01:30,000
And this other amount is computed through this hot function,

33
00:01:30,000 --> 00:01:32,000
and that hot function looks something like this.

34
00:01:32,000 --> 00:01:34,000
It's a hot function, and it takes the number of ups, the number of downs--

35
00:01:34,000 --> 00:01:37,000
so it can compute a total score, which is ups minus downs--

36
00:01:37,000 --> 00:01:40,000
and the submission date of the link--this field.

37
00:01:40,000 --> 00:01:43,000
So what happens is, over time,

38
00:01:43,000 --> 00:01:46,000
the value of an up vote increases.

39
00:01:46,000 --> 00:01:50,000
So an up vote today might be worth 1 point,

40
00:01:50,000 --> 00:01:53,000
and that same up vote tomorrow, on the same link,

41
00:01:53,000 --> 00:01:56,000
will be worth 10 points.

42
00:01:56,000 --> 00:01:59,000
And what this causes is it causes our scores to, over time,

43
00:01:59,000 --> 00:02:01,000
be constantly increasing.

44
00:02:01,000 --> 00:02:04,000
So newer links always have

45
00:02:04,000 --> 00:02:06,000
higher scores than older links.

46
00:02:06,000 --> 00:02:09,000
So a link

47
00:02:09,000 --> 00:02:12,000
that's one day old with lots of votes

48
00:02:12,000 --> 00:02:15,000
has the same popularity as a link that's one minute old

49
00:02:15,000 --> 00:02:19,000
with just a few votes, and that's what keeps our front page churning.

50
00:02:19,000 --> 00:02:21,000
And it's really actually very simple,

51
00:02:21,000 --> 00:02:23,000
and it's a very fast query we can do.

52
00:02:23,000 --> 00:02:25,000
We can just say effectively something like this.

53
00:02:25,000 --> 00:02:28,000
Select * from links order by score descending.

54
00:02:28,000 --> 00:02:30,000
And then we get the hottest links on Reddit.

55
00:02:30,000 --> 00:02:33,000
And this is a very simple and fast query,

56
00:02:33,000 --> 00:02:36,000
because all it does is really just bounce off the hot index.

57
00:02:36,000 --> 00:02:40,000
And it's neat. You get this really cool effect for not a lot of cost.

58
00:02:40,000 --> 00:02:43,000
Now, to be fair, it took us a little while to figure this out,

59
00:02:43,000 --> 00:02:46,000
and we actually--the first person who read it, took the approach of taking

60
00:02:46,000 --> 00:02:49,000
all of the links from the last 24 hours and doing some math on them

61
00:02:49,000 --> 00:02:51,000
and sorting them in memory.

62
00:02:51,000 --> 00:02:54,000
But later one of our guys came up with this notion of a hot score,

63
00:02:54,000 --> 00:02:57,000
and we can just convert that into an index, then there we go.

64
00:02:57,000 --> 00:03:00,000
We've got a database that keeps our links always sorted

65
00:03:00,000 --> 00:03:04,000
in order of hotness whenever we need them.

66
00:03:04,000 --> 00:03:06,000
So I thought you might enjoy that.

67
00:03:06,000 --> 00:03:10,000
Let's move along.
