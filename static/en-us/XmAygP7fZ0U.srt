1
00:00:00,000 --> 00:00:03,000
Now for the solution to the second problem of Unit 3,

2
00:00:03,000 --> 00:00:08,000
let's start it by adding in a constraint to the system with this line right here about n.

3
00:00:08,000 --> 00:00:14,000
This shows, I've explained earlier, that the total population n remains constant in all times.

4
00:00:14,000 --> 00:00:17,000
The people just switching between the S and I groups.

5
00:00:17,000 --> 00:00:19,000
Now let's move on to the core of the problem.

6
00:00:19,000 --> 00:00:23,000
Switching the contents to the for loop to use the trapezoidal rule

7
00:00:23,000 --> 00:00:25,000
instead of the forward Euler method.

8
00:00:25,000 --> 00:00:28,000
We begin with the standard expressions for Ṡ and İ,

9
00:00:28,000 --> 00:00:32,000
but this time showing that people can move from the infected population

10
00:00:32,000 --> 00:00:34,000
back to the susceptible population directly.

11
00:00:34,000 --> 00:00:38,000
Just for simplicity, I'm going to call our constants a and b right now

12
00:00:38,000 --> 00:00:41,000
and I'll change them later to show what's actually in the code.

13
00:00:41,000 --> 00:00:43,000
Now we can get a single equation that encapsulates

14
00:00:43,000 --> 00:00:50,000
the information in all three of these equations if we just substitute N-I for S in the equation for İ.

15
00:00:50,000 --> 00:00:52,000
This is what this line right here shows.

16
00:00:52,000 --> 00:00:57,000
If we do a little bit of rearranging and simplifying, we get a quadratic equation for I-dot.

17
00:00:57,000 --> 00:01:01,000
Now this make things a lot simpler altogether because now we have one equation

18
00:01:01,000 --> 00:01:05,000
and one independent variable instead of three equations in two independent variables.

19
00:01:05,000 --> 00:01:08,000
Now it's time to move on and use the trapezoidal rule.

20
00:01:08,000 --> 00:01:12,000
You'll notice here that I'm using a t in the subscripts instead of an n this time.

21
00:01:12,000 --> 00:01:16,000
That's just so that we don't get confused between big N's and the little n's.

22
00:01:16,000 --> 00:01:22,000
So we know that for the t+1 time step, I is going to equal this expression just in the trapezoidal rule.

23
00:01:22,000 --> 00:01:26,000
However, we just created an equation for I-dot that depends only on I.

24
00:01:26,000 --> 00:01:30,000
So we can plug that expression in to get this expanded equation right here.

25
00:01:30,000 --> 00:01:35,000
Since many of the terms in this expression have factors of h/2 and a outside of them,

26
00:01:35,000 --> 00:01:38,000
I'm just going to pull out a factor of ha/2.

27
00:01:38,000 --> 00:01:42,000
With a little bit of rearranging, we come up with this long expression.

28
00:01:42,000 --> 00:01:45,000
Now we can think of this equation as made up of two parts--

29
00:01:45,000 --> 00:01:50,000
one part that involves I sub-t+1 and another part that just involves I sub-t.

30
00:01:50,000 --> 00:01:55,000
Since we want to think of I t+1 as the only independent variable,

31
00:01:55,000 --> 00:01:58,000
we can lump everything else under other variable names.

32
00:01:58,000 --> 00:02:02,000
Looking at the equation, we have one term with (I subt+1)² .

33
00:02:02,000 --> 00:02:08,000
A couple of terms with I t+1¹ and several terms that don't have I t+1 at all

34
00:02:08,000 --> 00:02:12,000
and we're going to call everything that's in front of I t+1¹p.

35
00:02:12,000 --> 00:02:17,000
And we're going to call everything that doesn't involve at all q and this is going to give us

36
00:02:17,000 --> 00:02:20,000
the simplified quadratic expression that shows very clearly

37
00:02:20,000 --> 00:02:25,000
how this is a quadratic equation using I sub-t+1.

38
00:02:25,000 --> 00:02:29,000
Using the quadratic formula and rearranging a little bit, we get this expression right here

39
00:02:29,000 --> 00:02:33,000
using p and q to express I sub-t+1.

40
00:02:33,000 --> 00:02:36,000
Now this actually has two possible solutions--

41
00:02:36,000 --> 00:02:38,000
one with a plus sign here and then one with the minus sign here.

42
00:02:38,000 --> 00:02:44,000
So how do we decide which one to pick? Well we know that this h to times that goes to zero.

43
00:02:44,000 --> 00:02:48,000
We want I sub-t+1 and I sub-t to get closer and closer together

44
00:02:48,000 --> 00:02:51,000
since the curve is going to become smoother and smoother.

45
00:02:51,000 --> 00:02:57,000
Since p has a term of 1/h inside of it, this means that p is going to infinity as this happens.

46
00:02:57,000 --> 00:03:01,000
If we pick the minus sign over here, they're going to have minus infinity,

47
00:03:01,000 --> 00:03:03,000
which means that I-sub-t + 1

48
00:03:03,000 --> 00:03:06,000
is definitely going to go to negative infinity and this is definitely not what we want.

49
00:03:06,000 --> 00:03:09,000
So just to be safe, we will pick the plus sign here.

50
00:03:09,000 --> 00:03:16,000
Now we return to the code where we've translated our expressions for p and q into Python.

51
00:03:16,000 --> 00:03:20,000
To do this, we have to remember that the coefficients a and b that we were using

52
00:03:20,000 --> 00:03:24,000
when we're writing things by hand actually each have different names in the code.

53
00:03:24,000 --> 00:03:29,000
A is equal to a transmission coefficient and b is equal to one over the infectious time.

54
00:03:29,000 --> 00:03:34,000
Using this information, you've just done a simple translation of p and q into Python.

55
00:03:34,000 --> 00:03:40,000
This makes writing out the expressions for I step+1 and S step+1 very easy.

56
00:03:40,000 --> 00:03:45,000
For I step+1, we just write in the solution that we got from using the quadratic formula

57
00:03:45,000 --> 00:03:49,000
using of course the plus sign right here in the variables p and q

58
00:03:49,000 --> 00:03:51,000
since they are just written right here anyway.

59
00:03:51,000 --> 00:03:54,000
Because we know that I plus S is always equal to n,

60
00:03:54,000 --> 00:03:59,000
our expression for S is simply equal to n-I at the time step.

61
00:03:59,000 --> 00:04:05,000
Now, let's run this first with step size 0.5 and see what happens. This looks very nice.

62
00:04:05,000 --> 00:04:10,000
We have two really smooth curves with the infectious population is green

63
00:04:10,000 --> 00:04:13,000
and the susceptible population is blue just like in the last problem.

64
00:04:13,000 --> 00:04:19,000
We see that since each curve in the plot approaches a constant value at long times

65
00:04:19,000 --> 00:04:21,000
we're approaching a steady state situation.

66
00:04:21,000 --> 00:04:24,000
Now let's run the program instead with step size 10.

67
00:04:24,000 --> 00:04:29,000
So this is what we get from our model if we're using h=10 instead of h=0.5.

68
00:04:29,000 --> 00:04:32,000
Even though now that the curves is particularly smooth,

69
00:04:32,000 --> 00:04:38,000
we can see that they obey the same overall pattern as we saw in our graph using the smaller step size.

70
00:04:38,000 --> 00:04:40,000
The most important thing is that we still are approaching

71
00:04:40,000 --> 00:04:43,000
a stead state situation at the end of the graph.

72
00:04:43,000 --> 00:04:47,000
Now think back to what happen when you run the supplied code like we ask you to.

73
00:04:47,000 --> 00:04:53,000
When you run the supplied code with h=0.5, you should have gotten a graph that looks like this.

74
00:04:53,000 --> 00:04:58,000
This definitely looks a lot like what we saw when we run the solution code using h=0.5 as well.

75
00:04:58,000 --> 00:05:04,000
However, let's peek at what happen when you use h=10 using the forward Euler method.

76
00:05:04,000 --> 00:05:08,000
You can see that there are a lot of differences between this and the graph that we just saw

77
00:05:08,000 --> 00:05:12,000
and also between this and the graph with the solution code when we had h=10.

78
00:05:12,000 --> 00:05:16,000
The most important thing to notice though is what's happening over here in this region.

79
00:05:16,000 --> 00:05:21,000
You can see that instead of each curve approaching one set value as time goes on

80
00:05:21,000 --> 00:05:24,000
they keep crossing paths at each other.

81
00:05:24,000 --> 00:05:28,000
In other words, since I and S here don't obey nearly the same trend that they do

82
00:05:28,000 --> 00:05:33,000
with smaller step sizes, this shows that the forward Euler method doesn't allow for stability

83
00:05:33,000 --> 00:05:38,000
with large step sizes nearly as well as implicit methods like the trapezoidal method do.

84
00:05:38,000 --> 00:05:41,000
Hope that was an interesting investigation with the difference between implicit methods

85
00:05:41,000 --> 99:59:59,999
and other kinds of methods and get ready for the last problem of Unit 3.
