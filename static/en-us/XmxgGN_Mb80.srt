1
00:00:00,340 --> 00:00:04,744
Other property attributes you may want
to include between these parentheses

2
00:00:04,744 --> 00:00:07,820
include readwrite, readonly, and copy.

3
00:00:07,820 --> 00:00:10,670
Notice that for the House class
we declared our properties in

4
00:00:10,670 --> 00:00:13,560
the header file, the public interface.

5
00:00:13,560 --> 00:00:14,520
So right now,

6
00:00:14,520 --> 00:00:19,070
if I go into the main function, notice
that I'm outside of the House class.

7
00:00:19,070 --> 00:00:21,800
But I can get a hold of
an instance of House and

8
00:00:21,800 --> 00:00:24,900
change its number of bedrooms for
example.

9
00:00:24,900 --> 00:00:27,700
Let's say we wanted
to limit that access.

10
00:00:27,700 --> 00:00:31,640
We could start by declaring number of
bedrooms in the implementation file so

11
00:00:31,640 --> 00:00:32,910
that it's private.

12
00:00:32,910 --> 00:00:37,205
So we switch over to the .m file and
and we redeclare number of bedrooms.

13
00:00:38,365 --> 00:00:41,285
And we marked this private
implementation with the property

14
00:00:41,285 --> 00:00:43,925
attribute readwrite.

15
00:00:43,925 --> 00:00:45,785
Readwrite means what it sounds like.

16
00:00:45,785 --> 00:00:49,767
From inside the class, one can read or
write to this variable.

17
00:00:49,767 --> 00:00:52,517
Then we switch back to the .h file and

18
00:00:52,517 --> 00:00:56,047
we mark this version of
the property as readonly.

19
00:00:56,047 --> 00:00:59,697
Naturally, read only means that one
can read the value of the property but

20
00:00:59,697 --> 00:01:01,300
not write to it.

21
00:01:01,300 --> 00:01:03,520
Notice that if I go back
to the main function,

22
00:01:03,520 --> 00:01:07,470
I can access the number of
bedrooms from outside the class.

23
00:01:07,470 --> 00:01:10,640
But I don't have to worry about
accidentally changing it.

24
00:01:10,640 --> 00:01:13,830
If I try to write to this property,
the compiler won't allow it.

25
00:01:14,830 --> 00:01:18,870
You can think of readwrite and
readonly as being similar to var and

26
00:01:18,870 --> 00:01:20,740
lap in Swift.

27
00:01:20,740 --> 00:01:23,788
Readwrite is akin to defining
something as a variable and

28
00:01:23,788 --> 00:01:26,720
readonly is akin to defining
something as a constant.

29
00:01:27,940 --> 00:01:30,650
Since our address
property is an NSString,

30
00:01:30,650 --> 00:01:34,450
we're going to want to mark it
with the property attribute copy.

31
00:01:34,450 --> 00:01:37,330
In general,
you want to use copy for strings.

32
00:01:37,330 --> 00:01:38,810
To understand why,

33
00:01:38,810 --> 00:01:42,570
let's see what happens when we
don't mark the address with copy.

34
00:01:42,570 --> 00:01:45,450
Here we are in the main function
of the House class, and

35
00:01:45,450 --> 00:01:48,940
in this line we're creating
a string that's holding an address.

36
00:01:48,940 --> 00:01:52,810
Now we're going to use that address to
initialize an instance of the House

37
00:01:52,810 --> 00:01:55,100
class, myHouse.

38
00:01:55,100 --> 00:02:01,270
If we log the address of myHouse to
the console, we see 555 Park Ave.

39
00:02:01,270 --> 00:02:05,080
Cool, now let's say some joker
is writing test code and

40
00:02:05,080 --> 00:02:09,580
they append this string La la Land
to the addressString variable.

41
00:02:09,580 --> 00:02:13,810
Notice that we never accessed
myHouse.address a second time?

42
00:02:13,810 --> 00:02:17,980
But if we log the current value of
myHouse.address to the console,

43
00:02:17,980 --> 00:02:22,750
we see 555 Park Ave., La La Land.

44
00:02:22,750 --> 00:02:24,080
So that's no good.

45
00:02:24,080 --> 00:02:27,050
We don't want to leave properties
of our classes vulnerable to

46
00:02:27,050 --> 00:02:29,170
unintentional changes.

47
00:02:29,170 --> 00:02:29,810
Right now,

48
00:02:29,810 --> 00:02:34,260
we're initializing the address property
with a pointer to addressString.

49
00:02:34,260 --> 00:02:37,640
We can fix this problem by initializing
the address property with its

50
00:02:37,640 --> 00:02:40,360
own independent copy of addressString.

51
00:02:40,360 --> 00:02:43,390
So we'll go back to our house.h file,

52
00:02:43,390 --> 00:02:47,260
we'll mark address with copy,
and then run the program again.

53
00:02:48,340 --> 00:02:53,010
You can see that this time the value
of myHouse.address doesn't change.
