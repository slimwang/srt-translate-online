1
00:00:00,000 --> 00:00:04,510
1 decision that has to be made early on in the interpretation of a server

2
00:00:04,510 --> 00:00:06,760
is whether or not to use parallel computing.

3
00:00:06,760 --> 00:00:09,540
There are a range of ways for doing so

4
00:00:09,540 --> 00:00:12,190
and all of these can be combined with each other.

5
00:00:12,190 --> 00:00:15,310
We have vector units on the CPU,

6
00:00:15,310 --> 00:00:18,350
which are units that can operate on vectors;

7
00:00:18,350 --> 00:00:23,620
apply the same operation to say, 4 different values, at the same time.

8
00:00:23,620 --> 00:00:29,860
Multicore CPUs allow us to do several very complex things at the same time.

9
00:00:29,860 --> 00:00:32,479
The same is true for multiprocessor systems.

10
00:00:32,479 --> 00:00:38,270
GPUs, graphics chips, are optimized for working with huge arrays of pixels,

11
00:00:38,270 --> 00:00:40,270
but they can work with everything else as well.

12
00:00:40,270 --> 00:00:43,990
Which means, of course, they are also good at working with matrices.

13
00:00:43,990 --> 00:00:47,680
It's rather difficult to speed up servers for ordinary differential equations.

14
00:00:47,680 --> 00:00:50,140
The server does 1 step at a time,

15
00:00:50,140 --> 00:00:53,270
and every following step depends on the step before.

16
00:00:53,270 --> 00:00:55,770
How could you do some of these in parallel?

17
00:00:55,770 --> 00:00:57,770
That does not seem to work well.

18
00:00:57,770 --> 00:01:01,700
Speeding up a differential equation server for ordinary differential equations

19
00:01:01,700 --> 00:01:04,599
with the help of parallel computing may work,

20
00:01:04,599 --> 00:01:09,840
for instance in a situation where you have lots of isolated entities

21
00:01:09,840 --> 00:01:15,260
which rarely influence each other, such as the planets orbiting the sun.

22
00:01:15,260 --> 00:01:17,900
As you have seen in unit 6, it's of vital importance

23
00:01:17,900 --> 00:01:20,960
to speed up servers for partial differential equations.

24
00:01:20,960 --> 00:01:24,930
And in this case, parallel computing really comes to help.

25
00:01:24,930 --> 00:01:28,890
1 option for this is to use spatial subdivision.

26
00:01:28,890 --> 00:01:33,200
Each processor of a multicore system can handle its own spatial domain.

27
00:01:33,200 --> 00:01:37,730
Treating the borders between the different domains right requires communication.

28
00:01:37,730 --> 00:01:40,340
This can become an expensive overhead.

29
00:01:40,340 --> 00:01:42,380
We'll look into that in the next quiz.

30
00:01:42,380 --> 00:01:45,710
When we apply finite elements or work with implicit servers

31
00:01:45,710 --> 00:01:49,980
for partial differential equations, we often find huge matrices.

32
00:01:49,980 --> 99:59:59,999
They are an ideal workload for GPUs.
