1
00:00:00,000 --> 00:00:04,240
It's been awhile since we last met Alice. It was working on vertex cover.

2
00:00:04,240 --> 00:00:07,310
And actually, the last time we left off, Alice wasn't happy like that.

3
00:00:07,310 --> 00:00:12,410
Actually, Alice was quite unhappy because we proved vertex cover to be NP complete.

4
00:00:12,410 --> 00:00:16,730
The last time we left off, there was little hope for her to ever solve

5
00:00:16,730 --> 00:00:18,790
her vertex cover problem that she was working on.

6
00:00:18,790 --> 00:00:22,630
Now, I promised to show you an intelligent algorithm for vertex cover.

7
00:00:22,630 --> 00:00:24,870
At least one that's more intelligent than brute force.

8
00:00:24,870 --> 00:00:28,480
But in order to do that, let's first start out with a brute force algorithm.

9
00:00:28,480 --> 00:00:33,570
Let's say Alice is running her algorithm on a very simple graph like this.

10
00:00:33,570 --> 00:00:35,670
Just four vertices and five edges.

11
00:00:35,670 --> 00:00:39,480
What her simple algorithm or brute force algorithm was doing was it was considering

12
00:00:39,480 --> 00:00:43,320
all possible assignments of 0 and 1 to the vertices.

13
00:00:43,320 --> 00:00:48,830
For four vertices, we had a total of 16 possibilities that her algorithm needed to look at.

14
00:00:48,830 --> 00:00:51,970
Her algorithm starts out, for example, by saying,

15
00:00:51,970 --> 00:00:55,560
"Oh, let's put no vertices into the vertex cover."

16
00:00:55,560 --> 00:01:00,310
And of course this leaves all edges uncovered so it's not even a valid solution.

17
00:01:00,310 --> 00:01:04,959
Then, it would maybe start out by saying, "Oh, let's put one vertex into the vertex cover."

18
00:01:04,959 --> 00:01:09,650
There's actually four different ways of doing this and at least this time we have some edges covered.

19
00:01:09,650 --> 00:01:13,780
None of these solutions is the valid solution because we still have uncovered edges

20
00:01:13,780 --> 00:01:16,450
and I've drawn a red here so you can better see them.

21
00:01:16,450 --> 00:01:18,540
No valid solution for any of those.

22
00:01:18,540 --> 00:01:24,030
The algorithm continues and says, "Oh then, let's put two vertices into the vertex cover."

23
00:01:24,030 --> 00:01:28,850
Finally, the algorithm has found a valid vertex cover for our small network

24
00:01:28,850 --> 00:01:32,920
but of course it has also found many, many vertex covers that are actually invalid

25
00:01:32,920 --> 00:01:37,270
because not all edges are covered so again redundant, redundant, redundant.

26
00:01:37,270 --> 00:01:41,890
And all the algorithm proceeds and although it has already found a solution where

27
00:01:41,890 --> 00:01:46,890
two vertices are enough for the vertex cover, it now puts three vertices into the vertex cover

28
00:01:46,890 --> 00:01:51,940
which has the advantage that it will always find a valid vertex cover but the disadvantage that

29
00:01:51,940 --> 00:01:55,500
it's totally redundant and unnecessary work.

30
00:01:55,500 --> 00:02:00,400
Same thing if you put all four into the vertex cover. Valid solutions but not the best possible ones.

31
00:02:00,400 --> 00:02:05,810
This is what your brute force algorithm is doing and you can see why brute force is so stupid

32
00:02:05,810 --> 00:02:10,949
because first of all it considers many solutions where you could have immediately said,

33
00:02:10,949 --> 00:02:15,940
"Look, this is not valid." You've taken an edge and none of the two end points is in the vertex cover.

34
00:02:15,940 --> 00:02:18,070
Why even consider all the other possibilities?

35
00:02:18,070 --> 00:02:22,150
As soon as you have an edge that is not covered, you can basically scrap that solution

36
00:02:22,150 --> 00:02:27,150
and go looking for another one and the other thing that her algorithm did that wasn't very smart was

37
00:02:27,150 --> 00:02:31,190
once it had found a solution with two vertices it still tried all the solutions

38
00:02:31,190 --> 00:02:33,360
with three vertices and four vertices.

39
00:02:33,360 --> 00:02:37,190
It could've stopped right here because it knew that it would not be able to find

40
00:02:37,190 --> 00:02:39,120
any vertex cover that is smaller.

41
00:02:39,120 --> 00:02:41,880
And that is the difference between brute force and intelligent force.

42
00:02:41,880 --> 00:02:46,670
In brute force, we go through all of the possible assignments of the vertices into the vertex cover

43
00:02:46,670 --> 00:02:52,260
out of the vertex cover whereas what we're now going to do is we're going to avoid stupid choices.

44
00:02:52,260 --> 99:59:59,999
And that is the basis for intelligent force.
