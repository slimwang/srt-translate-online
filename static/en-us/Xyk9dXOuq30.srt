1
00:00:00,420 --> 00:00:02,930
Next, we will discuss strategies for allocating space on

2
00:00:02,930 --> 00:00:06,020
mass storage devices to a file. Just like caches

3
00:00:06,020 --> 00:00:08,480
work in terms of units of cache lines or

4
00:00:08,480 --> 00:00:12,330
cache blocks and virtual memory works in terms of pages,

5
00:00:12,330 --> 00:00:15,410
file systems work in terms of blocks also sometimes

6
00:00:15,410 --> 00:00:18,240
called clusters. In the case of a disk, a

7
00:00:18,240 --> 00:00:21,360
block address would need to identify the physical location.

8
00:00:21,360 --> 00:00:26,610
There are different vocabularies here. We'll refer to platter, track

9
00:00:26,610 --> 00:00:30,600
and most specifically, sector. The block address identifies the

10
00:00:30,600 --> 00:00:33,880
starting sector and the block itself might cover several more

11
00:00:33,880 --> 00:00:37,060
sectors, all blocks are of the same size. There are

12
00:00:37,060 --> 00:00:39,680
several strategies for keeping track of which blocks are free

13
00:00:39,680 --> 00:00:42,450
and which are used, one easy way is to keep

14
00:00:42,450 --> 00:00:45,560
a list of free blocks. Another is to use a

15
00:00:45,560 --> 00:00:48,610
bit vector where each bit indicates whether a block is

16
00:00:48,610 --> 00:00:51,320
free or not. There are more complex strategies as well.

17
00:00:52,400 --> 00:00:54,970
Which is more appropriate will depend on the strategies for

18
00:00:54,970 --> 00:00:57,820
assigning new blocks to a file as it grows. We won't

19
00:00:57,820 --> 00:01:00,900
go into those details here. Instead, we will focus on

20
00:01:00,900 --> 00:01:04,209
how a file system keeps track of which blocks belong to

21
00:01:04,209 --> 00:01:07,360
which files and of the ordering of these blocks within

22
00:01:07,360 --> 00:01:11,030
the file. Ideally, we would want a file system that allows

23
00:01:11,030 --> 00:01:14,490
for simple and fast creation and deletion of files. The

24
00:01:14,490 --> 00:01:17,710
simplicity here will help maintain consistency in the face of crashes.

25
00:01:18,910 --> 00:01:21,570
We want flexibility on size, that is, we ant to

26
00:01:21,570 --> 00:01:24,030
be able to handle file sizes large as well as

27
00:01:24,030 --> 00:01:27,050
small, and of course we want an efficient use of

28
00:01:27,050 --> 00:01:32,030
disc space, and we want fast access. Sequential refers to reading

29
00:01:32,030 --> 00:01:35,180
a file in sequence, from start to finish, and random

30
00:01:35,180 --> 00:01:38,660
access refers to jumping around in a file. Specifically, we'll

31
00:01:38,660 --> 00:01:41,440
look at the file allocation table strategy, which was widely

32
00:01:41,440 --> 00:01:43,920
used in the DOS era, and is still used on many

33
00:01:43,920 --> 00:01:46,730
USB devices. And we'll also look at the extended

34
00:01:46,730 --> 00:01:49,120
file format, which is the long time Linux standard.
