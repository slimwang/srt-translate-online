1
00:00:00,000 --> 00:00:04,000
Just go back to the diagram--what we just saw was exactly an example of this general

2
00:00:04,000 --> 00:00:08,000
outline that I showed you, so CCNet was the random test case generator.

3
00:00:08,000 --> 00:00:12,000
It was given seeds by a driver's script--the driver's script run the tools in a loop

4
00:00:12,000 --> 00:00:15,000
and the oracle in this case was just simply looking for compiler crashes,

5
00:00:15,000 --> 00:00:17,000
so it wasn't even running the compiler output.

6
00:00:17,000 --> 00:00:20,000
Of course, when the compiler runs, it generates code.

7
00:00:20,000 --> 00:00:23,000
We weren't even running that code or even looking at it--all we we're doing is waiting for the compiler

8
00:00:23,000 --> 00:00:28,000
to tell us that it fail, and the reason the compiler could tell us that it failed is because the

9
00:00:28,000 --> 00:00:31,000
compiler developers have conveniently included lots of assertion violations.

10
00:00:31,000 --> 00:00:35,000
If those compiler developers hadn't included all of those assertions, then these compilers

11
00:00:35,000 --> 00:00:38,000
wouldn't have failed in such an obvious way, but they still had encountered bugs and they

12
00:00:38,000 --> 00:00:43,000
probably would've failed in different ways later and it might have failed in the worse possible way

13
00:00:43,000 --> 00:00:47,000
which is where the compiler generates code and that code actually executes improperly at runtime.

14
00:00:47,000 --> 00:00:50,000
And that's bad because we, as compiler consumers,

15
00:00:50,000 --> 00:00:53,000
don't want the compiler giving us wrong code.

16
00:00:53,000 --> 00:00:56,000
So while those assertions can be annoying as compiler uses because the compiler crashes

17
00:00:56,000 --> 00:00:59,000
actually very good and we wanted them to be there.

18
00:00:59,000 --> 00:01:02,000
So the driver's script are then checking the output, taking the test cases wherein this case

19
00:01:02,000 --> 00:01:05,000
the seed in the log file and then go back and do it again.

20
00:01:05,000 --> 00:01:08,000
And so if you remember, we got about 2 days of testing time, this loop would've executed about

21
00:01:08,000 --> 00:01:12,000
150,000 times on a fast day core machine, and of course, we we're testing

22
00:01:12,000 --> 00:01:14,000
are simpler systems and compilers.

23
00:01:14,000 --> 00:01:17,000
We might have executed a much larger number of test than that and if we're executing the

24
00:01:17,000 --> 00:01:22,000
very slowest software under test, then we might've only execute a much smaller number of iterations
