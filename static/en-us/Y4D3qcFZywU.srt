1
00:00:00,240 --> 00:00:02,860
Okay, the first thing you need
to know about JavaScript,

2
00:00:02,860 --> 00:00:07,050
is that the code you write,
isn't actually the code that runs.

3
00:00:07,050 --> 00:00:10,390
Now that may sound a little strange
if you never heard it before, but

4
00:00:10,390 --> 00:00:13,920
it comes about because of the fact
that modern JavaScript engines

5
00:00:13,920 --> 00:00:17,890
recompile your code to something
that can run more quickly.

6
00:00:17,890 --> 00:00:24,510
It's done thru a Just In Time compiler,
or JIT.

7
00:00:24,510 --> 00:00:29,130
A JIT compiler will optimize the
JavaScript bit by bit as it runs, and

8
00:00:29,130 --> 00:00:32,830
it's a brilliant but
extremely complex engine.

9
00:00:32,830 --> 00:00:36,445
For us as developers, what that means
is that there's no way to look at

10
00:00:36,445 --> 00:00:40,890
JavaScript and know exactly what
code will run in the engine.

11
00:00:40,890 --> 00:00:42,850
Take a look at this
JavaScript code here.

12
00:00:42,850 --> 00:00:45,090
It's a for loop, it's pretty simple.

13
00:00:45,090 --> 00:00:48,320
But if we use this tool
called IRHydra to look at how

14
00:00:48,320 --> 00:00:53,970
Chrome's JavaScript engine V8 would look
at representing it, it looks like this.

15
00:00:53,970 --> 00:00:56,050
Now you don't need to
understand any of this.

16
00:00:56,050 --> 00:00:58,290
This is just how Chrome and

17
00:00:58,290 --> 00:01:02,160
its V8 JavaScript Engine understands
the code that you wrote.

18
00:01:02,160 --> 00:01:05,412
But what I want you to take away here
is that you should avoid what we call

19
00:01:05,412 --> 00:01:07,486
micro-optimizations.

20
00:01:07,486 --> 00:01:11,920
Micro-optimizations come about
when you try to write code

21
00:01:11,920 --> 00:01:15,150
that you would think would be a little
bit faster for a browser to run.

22
00:01:15,150 --> 00:01:19,610
Like say, which is faster,
this for loop or this while loop?

23
00:01:19,610 --> 00:01:22,660
But the thing is,
we don't know how the JavaScript engine

24
00:01:22,660 --> 00:01:25,850
is going to treat these
two pieces of code.

25
00:01:25,850 --> 00:01:27,620
So there's no point in guessing.

26
00:01:27,620 --> 00:01:31,270
Any micro-optimization you
write should be a last resort

27
00:01:31,270 --> 00:01:33,750
once you've exhausted
all your other options.

28
00:01:33,750 --> 00:01:36,770
In short,
what I'm saying is don't spend your time

29
00:01:36,770 --> 00:01:40,300
comparing similar pieces
of JavaScript in this way.

30
00:01:40,300 --> 00:01:41,420
It won't help you.

31
00:01:41,420 --> 00:01:44,080
There are other things you
can do to improve performance

32
00:01:44,080 --> 00:01:46,590
that don't involve micro-optimizations.

33
00:01:46,590 --> 00:01:47,330
So you're done, right?

34
00:01:47,330 --> 00:01:47,920
I mean,

35
00:01:47,920 --> 00:01:51,620
you can't guess exactly how a JavaScript
engine is going to handle your code.

36
00:01:51,620 --> 00:01:53,790
So obviously we can move on.

37
00:01:53,790 --> 00:01:55,340
Well, no, actually.

38
00:01:55,340 --> 00:01:58,460
It turns out there are plenty
of things that you can do

39
00:01:58,460 --> 00:02:00,200
to make your code run better.

40
00:02:00,200 --> 00:02:01,180
So let's get started.
