1
00:00:00,170 --> 00:00:04,340
So let's get back to the problem we had with our web server. And that's that we

2
00:00:04,340 --> 00:00:07,874
don't want to crawl the web every time we start the web application. We want to

3
00:00:07,874 --> 00:00:11,591
crawl the web once, store it in a file, read that file, and then be able to

4
00:00:11,591 --> 00:00:15,852
start the server without needing to do any crawls. So what we would like to do

5
00:00:15,852 --> 00:00:20,736
is move the actual crawling out of the server, replace this with something that

6
00:00:20,736 --> 00:00:25,493
just loads a file and turns that file into a web corpus object. So that means we

7
00:00:25,493 --> 00:00:29,611
need something that creates that file, and we're going to put that in the

8
00:00:29,611 --> 00:00:33,373
crawler module. So here's how we're going to modify our code. This is the

9
00:00:33,373 --> 00:00:37,950
crawler.py module, and we're going to add to it. So when we run it from the

10
00:00:37,950 --> 00:00:42,037
command line,when we run it as the main, and this one way to test for that if

11
00:00:42,037 --> 00:00:46,392
the name this is built in defined by Python is equal to name that means we ran

12
00:00:46,392 --> 00:00:52,208
this code directly. But what want to do is do the crawl and write the corpus to

13
00:00:52,208 --> 00:00:57,004
file. That'll be a file that we can load in the server to create the Web Corpus

14
00:00:57,004 --> 00:01:00,744
object. We could do this ourselves. We could add a method to Web Corpus that

15
00:01:00,744 --> 00:01:04,965
would output the object in a way that could be stored in a file, just using the

16
00:01:04,965 --> 00:01:08,936
file write operations that we've seen. And we could have another method that

17
00:01:08,936 --> 00:01:12,873
would read it. This would be quite a bit of work. We'd have to walk the entire

18
00:01:12,873 --> 00:01:16,796
structure to store it. There's actually an easier way to do that, that's built

19
00:01:16,796 --> 00:01:21,073
into Python. And the way to do it is called pickling. This is one of my favorite

20
00:01:21,073 --> 00:01:25,646
modules built into python. What the pickle module allows us to do, is take any

21
00:01:25,646 --> 00:01:29,808
object, actually almost any object. We won't get into the ones that it doesn't

22
00:01:29,808 --> 00:01:34,185
work on. Pickle it, and we can do that by using pickle.dump. That takes in an

23
00:01:34,185 --> 00:01:40,512
object in the file. This'll store the object in a file. We can store that on

24
00:01:40,512 --> 00:01:45,506
disk, we could mail that around, we could do anything we want with it. Then when

25
00:01:45,506 --> 00:01:50,114
we want to get the object back, we can do pickle.load, passing in the file, and

26
00:01:50,114 --> 00:01:55,904
magically we'll get back essentially the same object that we started with. If

27
00:01:55,904 --> 00:01:59,666
this file was created by someone you don't trust, well, they could create a file

28
00:01:59,666 --> 00:02:03,314
so that when you unpickle it, you get an object back that does things you don't

29
00:02:03,314 --> 00:02:08,560
like. It could potentially run any arbitrary code, so only use this with files

30
00:02:08,560 --> 00:02:12,290
you trust. In this case, we're going to create the file ourselves, and hope that

31
00:02:12,290 --> 00:02:15,494
no one else modifies it, and use it in our search engine. So we're going to do

32
00:02:15,494 --> 00:02:19,627
this in two quizzes. The first where you'll dump the file and the second where

33
00:02:19,627 --> 00:02:20,643
you did the load.
