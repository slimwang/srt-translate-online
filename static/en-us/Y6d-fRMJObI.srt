1
00:00:00,170 --> 00:00:03,600
Mutual authentication
protocol takes five steps.

2
00:00:03,600 --> 00:00:05,200
Can we simplify it?

3
00:00:05,200 --> 00:00:08,090
That is, can we use fewer steps?

4
00:00:08,090 --> 00:00:10,330
It seems that the following would work.

5
00:00:10,330 --> 00:00:15,160
First, Alice says hi to Bob and
sends along a challenge R2.

6
00:00:16,290 --> 00:00:21,890
Second, in response,
Bob sends Alice the ciphertext of R2,

7
00:00:21,890 --> 00:00:23,660
and his own challenge R1.

8
00:00:23,660 --> 00:00:29,740
Upon receiving this response,
Alice decrypts the ciphertext

9
00:00:29,740 --> 00:00:34,360
to see if it matches the plain text,
R2, that she has sent to Bob.

10
00:00:34,360 --> 00:00:39,310
If it matches, then she knows that
she's communicating with Bob.

11
00:00:39,310 --> 00:00:44,210
Third, Alice then sends
Bob the ciphertext of R1.

12
00:00:44,210 --> 00:00:47,370
And Bob decrypts it and
matches it with the plain text, R1,

13
00:00:47,370 --> 00:00:49,320
to authenticate Alice.

14
00:00:50,390 --> 00:00:54,080
Is there anything wrong with
this simplified protocol?

15
00:00:54,080 --> 00:00:57,540
It turns out that there
is a reflection attack,

16
00:00:57,540 --> 00:01:00,300
a kind of man in the middle attacks.

17
00:01:00,300 --> 00:01:01,790
Here's how it works.

18
00:01:01,790 --> 00:01:04,709
First, Trudy impersonates Alice.

19
00:01:04,709 --> 00:01:08,830
By following the protocol,
Trudy will be stuck at step three

20
00:01:08,830 --> 00:01:13,380
because she can not encrypt
the challenge, R1, sent from Bob.

21
00:01:13,380 --> 00:01:16,160
She does not have the key KAB.

22
00:01:16,160 --> 00:01:20,290
Then Trudy simply opens another
connection with Bob and, again,

23
00:01:20,290 --> 00:01:22,140
impersonating Alice.

24
00:01:22,140 --> 00:01:25,410
This time Trudy sends Bob the challenge,
R1,

25
00:01:25,410 --> 00:01:30,380
that Bob has sent her in the first
connection, the one that she stuck in.

26
00:01:30,380 --> 00:01:34,814
According to the protocol,
Bob responds with a ciphertext of R1 and

27
00:01:34,814 --> 00:01:37,210
another challenge, R3.

28
00:01:37,210 --> 00:01:41,710
Notice that Bob has send
the ciphertext of R1 to Alice.

29
00:01:41,710 --> 00:01:45,630
So what Trudy can do is to
take this ciphertext of R1.

30
00:01:45,630 --> 00:01:49,980
Then Trudy can now go back to the step
three of the first connection and

31
00:01:49,980 --> 00:01:54,560
send it back to Bob to
complete the first connection.

32
00:01:54,560 --> 00:01:59,280
That is, at this point, the first
connection successfully concludes, and

33
00:01:59,280 --> 00:02:02,830
Trudy has successfully
impersonated Alice.

34
00:02:02,830 --> 00:02:06,480
This is called a reflection
attack because Trudy simply

35
00:02:06,480 --> 00:02:11,360
sends back to Bob what Bob had just
sent her from another connection.

36
00:02:11,360 --> 00:02:14,950
So how can we prevent
reflection attacks?

37
00:02:14,950 --> 00:02:18,730
One way is to use two
different share keys.

38
00:02:18,730 --> 00:02:22,680
One is for the initiator of
the connection, say Alice, and

39
00:02:22,680 --> 00:02:26,080
the other is for the responder, say Bob.

40
00:02:26,080 --> 00:02:30,569
The result is that the ciphertext
that Trudy gets from Bob can not be

41
00:02:30,569 --> 00:02:35,142
presented as a ciphertext from
Alice because these two ciphertexts

42
00:02:35,142 --> 00:02:37,647
should be using two different keys.

43
00:02:37,647 --> 00:02:41,280
That is,
there are two share keys being used.

44
00:02:41,280 --> 00:02:45,057
Say Alice used KAB1 and Bob used KAB2.

45
00:02:45,057 --> 00:02:51,027
Therefore the ciphertext from
Bob is encrypted using KAB2,

46
00:02:51,027 --> 00:02:56,780
and Bob is going to expect
a ciphertext using KAB1.

47
00:02:56,780 --> 00:03:01,106
Therefore, even though Trudy
can accept the ciphertext, but

48
00:03:01,106 --> 00:03:04,880
this Cipher text is produced using KAB2.

49
00:03:04,880 --> 00:03:08,510
She cannot simply send
it back to Bob because

50
00:03:08,510 --> 00:03:13,660
the ciphertext sent to Bob
must be encrypted using KAB1.

51
00:03:13,660 --> 00:03:16,440
Another way to prevent
the reflection attack

52
00:03:16,440 --> 00:03:21,180
is to use different challenges for
the initiator and the responder.

53
00:03:21,180 --> 00:03:25,030
For example, we can use an even
number challenge for Alice and

54
00:03:25,030 --> 00:03:26,196
odd number for Bob.

55
00:03:26,196 --> 00:03:30,020
Therefore, when Trudy
receives a challenge, R1,

56
00:03:30,020 --> 00:03:34,910
from Bob the challenge is an odd number,
and Trudy cannot use.

57
00:03:34,910 --> 00:03:39,270
This is a new challenge for Bob because
Bob is expecting an even number.
