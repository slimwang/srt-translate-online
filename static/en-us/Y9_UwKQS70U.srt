1
00:00:00,093 --> 00:00:01,861
So this first one is pretty easy, right?

2
00:00:01,861 --> 00:00:07,645
There is a 1-to-1correspondence between the output and the input, so that's clearly an app operation.

3
00:00:07,645 --> 00:00:10,748
And this next one is also is 1-to-1 operation.

4
00:00:10,748 --> 00:00:16,213
One value gets written in the output array corresponding to every value that gets read from the input array.

5
00:00:16,213 --> 00:00:21,406
And you can see that we're writing into an array which is represented in

6
00:00:21,406 --> 00:00:26,845
I major order here in the output, and in j major order in the input.

7
00:00:26,845 --> 00:00:31,900
So this is a transpose operation. Now this next code, as I said, I put a guard around.

8
00:00:31,900 --> 00:00:34,292
Only odd the numbered threads are going to execute this.

9
00:00:34,292 --> 00:00:37,005
So that rules out a map, it's not 1- to-1.

10
00:00:37,005 --> 00:00:40,325
And that also rules out a transpose operation, which is also 1-to-1.

11
00:00:40,325 --> 00:00:45,152
And you really couldn't call it a stencil operation either because a stencil operation

12
00:00:45,152 --> 00:00:50,282
should generate a result for every element in the output array, and this doesn't do that.

13
00:00:50,282 --> 00:00:55,034
Now if you look the first one, the thread is taking the input at a given location,

14
00:00:55,034 --> 00:01:00,442
and multiplying it by pi, and placing that into a couple of different places in the output array.

15
00:01:00,442 --> 00:01:03,450
In fact it's incrementing a couple different places in the output array.

16
00:01:03,450 --> 00:01:05,795
So this would be a scatter operation.

17
00:01:05,795 --> 00:01:09,745
The thread is computing for itself where it needs to write its result.

18
00:01:09,745 --> 00:01:11,599
And this final line would be a gather.

19
00:01:11,599 --> 00:01:15,118
You can see that every thread is writing a single location in the output array

20
00:01:15,118 --> 00:01:19,734
and it's reading from multiple places in the input array, locations that it computes.

21
00:01:19,734 --> 00:01:21,371
So this would be a gather.

22
00:01:21,371 --> 00:01:26,656
And again, this looks very much like a stencil operation since it's reading from a local neighborhood,

23
00:01:26,656 --> 00:01:29,041
and doing some averaging, and writing the result.

24
00:01:29,041 --> 00:01:33,939
But I wouldn't call it a stencil because it's not writing into every location because of this guard here.

25
00:01:33,939 --> 00:01:37,053
So that's why I refer to this as a gather rather than a stencil.
