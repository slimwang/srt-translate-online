1
00:00:00,370 --> 00:00:03,220
Now let's move on to
the Nil-Coalescing operator,

2
00:00:03,220 --> 00:00:05,980
which is the double question mark.

3
00:00:05,980 --> 00:00:09,290
This is a great operator that's
built on top of the optional type.

4
00:00:10,310 --> 00:00:13,440
What it allows us to do is
safely unwrap an optional and

5
00:00:13,440 --> 00:00:16,900
if it contains something,
we use the unwrap value.

6
00:00:16,900 --> 00:00:20,740
But if it's nil, then we can
specify a different value to use.

7
00:00:20,740 --> 00:00:23,807
So let's look at this line that
uses the nil-coalescing operator.

8
00:00:25,010 --> 00:00:27,290
This is the way that
you want to read this.

9
00:00:27,290 --> 00:00:30,520
I want to assign the value
of newFavoriteRestaurant

10
00:00:30,520 --> 00:00:32,880
to the whereToEat constant.

11
00:00:32,880 --> 00:00:35,400
But if newFavoriteRestaurant is nil,

12
00:00:35,400 --> 00:00:38,310
then I want to use
the yummyRestaurant instead.

13
00:00:38,310 --> 00:00:42,630
So right now the newFavoriteRestaurant
is assigned to Chez Fonfon.

14
00:00:42,630 --> 00:00:44,330
So that's what gets
assigned to WhereToEat.

15
00:00:45,490 --> 00:00:47,160
But if we make this nil instead,

16
00:00:48,240 --> 00:00:52,500
then Chez Lulu gets used instead because
newFavoriteRestaurant is now nil so

17
00:00:52,500 --> 00:00:57,450
it skips and uses the yummyRestaurant
instead and that's pretty slick.

18
00:00:57,450 --> 00:01:01,500
Now below, I have a more complex example
that uses multiple nil coalescing

19
00:01:01,500 --> 00:01:03,170
operators together.

20
00:01:03,170 --> 00:01:04,140
I encourage you to check it out.
