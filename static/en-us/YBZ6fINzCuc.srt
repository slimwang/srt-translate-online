1
00:00:00,000 --> 00:00:03,410
So if you fast forward a few years, there're been a lot of new ideas

2
00:00:03,410 --> 00:00:07,004
that have come into CUDA between the time you launched 5 or 6 years ago and today.

3
00:00:07,004 --> 00:00:12,421
So what are maybe the 2 or 3 coolest ideas that you think have come in since the time you launched?

4
00:00:12,421 --> 00:00:15,994
>> Well certainly we've added a lot of support for managing concurrency.

5
00:00:15,994 --> 00:00:20,246
There's no shortage of parallelism in these codes if people want to move to the GPU.

6
00:00:20,246 --> 00:00:25,578
So we've added better support for concurrency, for streams.

7
00:00:25,578 --> 00:00:29,325
We've even moved some of that from what started out in software support--

8
00:00:29,325 --> 00:00:33,372
actually is now baked into the hardware with the Kepler and the hyper queue.

9
00:00:33,372 --> 00:00:37,329
Those are pieces of silk and they're actually inspired by

10
00:00:37,329 --> 00:00:40,658
some of the stuff we were doing in software, originally with CUDA 2.0.

11
00:00:40,658 --> 00:00:43,964
Other stuff we've been doing is integrating closer with the memory hierarchy.

12
00:00:43,964 --> 00:00:47,827
In CUDA 4.0 we did the UVA work, which is unifying the virtual address base

13
00:00:47,827 --> 00:00:51,744
of the entire machine such that--this was work we did

14
00:00:51,744 --> 00:00:54,418
so tightly integrating with the operating system

15
00:00:54,418 --> 00:00:57,452
such that a bi-pointer value,

16
00:00:57,452 --> 00:01:01,246
the system can know if memory is living on the CPU or living on the GPU.

17
00:01:01,246 --> 00:01:03,698
So there's no separate memory spaces anymore.

18
00:01:03,698 --> 00:01:06,743
You can simply dereference a pointer, it goes to the right machine--

19
00:01:06,743 --> 00:01:09,913
a right CPU or GPU or your peer's GPU.

20
00:01:09,913 --> 00:01:12,871
That made multi-GPU programming way easier

21
00:01:12,871 --> 00:01:15,664
than we had before CUDA 4.0.

22
00:01:15,664 --> 00:01:18,293
>> Yeah, I mean as a professor, I think usually what I say is

23
00:01:18,293 --> 00:01:22,786
the most common error is accessing memory on the wrong side of the machine. >> Yeah.

24
00:01:22,786 --> 00:01:26,245
>> You think you're dereferencing a GPU pointer, and it's really on the CPU.

25
00:01:26,245 --> 00:01:30,000
That's certainly very helpful in going out and doing those.
