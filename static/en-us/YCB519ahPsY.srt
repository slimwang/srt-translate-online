1
00:00:00,000 --> 00:00:04,000
Well, let's take another quick quiz and this one like the broken prime number function I showed you

2
00:00:04,000 --> 00:00:09,000
is designed to pry into the limitations of coverage metrics.

3
00:00:09,000 --> 00:00:16,000
So your job now is to insert a bug into the stats module, that is to say make it wrong but in a

4
00:00:16,000 --> 00:00:20,000
way that's undetectable by test cases that get full statement coverage.

5
00:00:20,000 --> 00:00:23,000
So test 1 is a function that you write which contains either the

6
00:00:23,000 --> 00:00:26,000
test cases you just submitted or different ones.

7
00:00:26,000 --> 00:00:31,000
These test cases together need to achieve 100% statement coverage for the stats function

8
00:00:31,000 --> 00:00:36,000
but we must not reveal the bug--that is to say you're broken stats function needs to return

9
00:00:36,000 --> 00:00:39,000
the correct answer for the test cases presented here.

10
00:00:39,000 --> 00:00:43,000
The second thing I want you to do is define a function test 2, which also

11
00:00:43,000 --> 00:00:47,000
calls the stats function, and this one should reveal the bug.

12
00:00:47,000 --> 00:00:51,000
Your assignment is to break the stats function in such a way that the flaw is undetectable

13
00:00:51,000 --> 00:00:55,000
by test cases that you design would get a 100% test coverage, but also you

14
00:00:55,000 --> 99:59:59,999
need to show us what the flaw is by supplying a second test case.
