1
00:00:00,150 --> 00:00:02,280
Coping files in Gradle is simple.

2
00:00:02,280 --> 00:00:04,480
We start by simply declaring a new task,
and

3
00:00:04,480 --> 00:00:07,540
specifying the type of the task as Copy.

4
00:00:07,540 --> 00:00:09,770
Of course this task won't
actually do anything,

5
00:00:09,770 --> 00:00:13,565
because we haven't told it what file
we'd like copied, and to where.

6
00:00:13,565 --> 00:00:17,045
Simplest example is to copy
the contents of one folder to another.

7
00:00:17,045 --> 00:00:19,965
We use the copy tasks from
method to add sources, and

8
00:00:19,965 --> 00:00:22,475
the into method to
specify the destination.

9
00:00:22,475 --> 00:00:25,875
This copy task will copy
the contents of the images directory

10
00:00:25,875 --> 00:00:27,430
into the build directory.

11
00:00:27,430 --> 00:00:31,930
We can specify files to include or
exclude, our filters can use wild cards,

12
00:00:31,930 --> 00:00:35,080
allowing us to do things like, include
all files that match a certain pattern,

13
00:00:35,080 --> 00:00:37,440
or have a particular file extension.

14
00:00:37,440 --> 00:00:38,790
This combination of source,

15
00:00:38,790 --> 00:00:42,450
destination, inclusions and
exclusions is called a copy spec.

16
00:00:42,450 --> 00:00:45,180
Let's configure our task to
only include jpeg images,

17
00:00:45,180 --> 00:00:48,010
by calling the include method,
and passing a file pattern.

18
00:00:48,010 --> 00:00:52,280
We can also configure a single copy
task to copy from multiple sources.

19
00:00:52,280 --> 00:00:55,930
Copy specs can be hierarchical, which
is particularly useful when you want to

20
00:00:55,930 --> 00:00:58,800
exclude certain files from
a particular sub-folder, or

21
00:00:58,800 --> 00:01:00,630
a specific Include them in another.

22
00:01:00,630 --> 00:01:04,800
Let's configure a copy task which
copies all JPEGs into one folder, and

23
00:01:04,800 --> 00:01:06,680
all GIFs into another.

24
00:01:06,680 --> 00:01:08,970
We define two child copy specs.

25
00:01:08,970 --> 00:01:12,320
One to include only JPEG files, and
the other to include only GIFs.

26
00:01:12,320 --> 00:01:16,010
We also specify the folder we
want to copy these files into.

27
00:01:16,010 --> 00:01:19,020
These folders will be created as
subfolders, under the root copy

28
00:01:19,020 --> 00:01:23,630
destination, the result being that
JPEGs will be copied to build/jpeg, and

29
00:01:23,630 --> 00:01:26,530
all GIFT files will be
copied to build/gif.

30
00:01:26,530 --> 00:01:30,640
Gradle provides task types for
creating archives like ZIP or TAR files.

31
00:01:30,640 --> 00:01:34,770
Archive tasks are nearly identical to
copy tasks, except instead of specifying

32
00:01:34,770 --> 00:01:38,020
a destination directory,
we specify an archive name.

33
00:01:38,020 --> 00:01:41,010
Let's zip up all files
in out images directory.

34
00:01:41,010 --> 00:01:44,870
We use the Zip task base name,
and destinationDir properties

35
00:01:44,870 --> 00:01:47,950
to tell Gradle what to name the archive,
and where to create it.

36
00:01:47,950 --> 00:01:51,530
Note the the destinationDir
property takes a Java file object.

37
00:01:51,530 --> 00:01:54,370
Luckily, the Gradle project interface
provides a convenience method for

38
00:01:54,370 --> 00:01:55,550
creating files.

39
00:01:55,550 --> 00:01:59,440
We can do similar things with
archive tasks and trial copy specs.

40
00:01:59,440 --> 00:02:01,780
We can create an archive
which puts JPEGs and

41
00:02:01,780 --> 00:02:04,070
GIFs into their own
directories inside the archive.

42
00:02:04,070 --> 00:02:06,500
The only difference from
our copy task example,

43
00:02:06,500 --> 00:02:09,449
is that we specify the archive name and
the destination.

44
00:02:09,449 --> 00:02:12,090
Sometimes we want to delete
files during our builds,

45
00:02:12,090 --> 00:02:14,200
usually to clean up
previous build outputs.

46
00:02:14,200 --> 00:02:18,370
We can use the delete task to delete
files or folders in our project.

47
00:02:18,370 --> 00:02:20,400
Here we have a task that
deletes the build folder.
