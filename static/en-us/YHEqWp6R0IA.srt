1
00:00:00,000 --> 00:00:01,000
Okay, here is my solution for a valid year.

2
00:00:01,000 --> 00:00:04,000
It's almost identifical to valid day. We take in a year.

3
00:00:04,000 --> 00:00:08,000
First, we make sure it's all digits, then we convert it to an integer.

4
00:00:08,000 --> 00:00:12,000
Then we check to see if it's within 1900 and 2020,

5
00:00:12,000 --> 00:00:14,000
and if it is, we return it.

6
00:00:14,000 --> 00:00:15,000
Let's go ahead and test this.

7
00:00:15,000 --> 00:00:18,000
Okay, I'll start with a valid year--1995.

8
00:00:18,000 --> 00:00:21,000
We'll run this. That works.

9
00:00:21,000 --> 00:00:25,000
Let's try another year--2000. Let's try that. That works. 2000.

10
00:00:25,000 --> 00:00:29,000
Let's try an invalid year--1875.

11
00:00:29,000 --> 00:00:35,000
If any of our users were born in 1875, they're probably not going to enjoy using our web app.

12
00:00:35,000 --> 00:00:37,000
Okay, so it returned none as we expected.

13
00:00:37,000 --> 00:00:43,000
Let's try some junk strings to make sure our function doesn't blow up.

14
00:00:43,000 --> 00:00:45,000
Also returning none.

15
00:00:45,000 --> 00:00:49,000
Let's try another string that's too big--2300.

16
00:00:49,000 --> 00:00:52,000
Also prints none, so our function is good.

17
00:00:52,000 --> 00:00:56,000
Alright, good job! Let's move on.
