1
00:00:00,012 --> 00:00:04,485
And [unknown] that I'm not the only one that thinks regular expressions are

2
00:00:04,485 --> 00:00:09,242
interesting and powerful, both West Weimer's 262 class and Peter Norwick's 212

3
00:00:09,242 --> 00:00:13,715
class have entire units that are focused mostly on understanding and using

4
00:00:13,715 --> 00:00:17,618
regular expressions. We're not going to go into that much depth now, but I'll

5
00:00:17,618 --> 00:00:21,370
explain enough so you can understand basic regular expressions, including the

6
00:00:21,370 --> 00:00:25,061
one that's used here. So, regular expressions define sets of strings. The

7
00:00:25,061 --> 00:00:28,424
simplest is to just have a single character and that represents the set

8
00:00:28,424 --> 00:00:32,656
containing just one string. So, for example, the regular expression A, defines a

9
00:00:32,656 --> 00:00:36,649
set containing the single string just A. And I'm not writing my strings with

10
00:00:36,649 --> 00:00:40,704
coats here or using Python set notation. I'm writing this in a more mathematical

11
00:00:40,704 --> 00:00:44,996
way. We can also concatenate in. And if we have two regular expressions next to

12
00:00:44,996 --> 00:00:49,150
each other, that gives us the set of everything we can get from R followed by

13
00:00:49,150 --> 00:00:53,757
everything in S. This will make more sense when we have Rs and Ss that can

14
00:00:53,757 --> 00:00:59,530
produce many strings. If it's just a followed by b, well, a can produce just a,

15
00:00:59,530 --> 00:01:04,168
b can produce just b. So, give this a set containing the strings ab. We can put

16
00:01:04,168 --> 00:01:08,524
multiple expressions within square braces like this and that produces a set of

17
00:01:08,524 --> 00:01:12,748
strings which is the union of all the strings R can produce and all the strings

18
00:01:12,748 --> 00:01:16,840
S can produce, so in this case this going to be a set of two elements containing

19
00:01:16,840 --> 00:01:21,640
the strings a and b. We can use the asterisk, which means zero or more

20
00:01:21,640 --> 00:01:28,011
occurrences of whatever precedes it. So, that would mean a star is the set of

21
00:01:28,011 --> 00:01:35,755
strings, the empty string, the string a, the string aa, the string aaa, and so

22
00:01:35,755 --> 00:01:42,370
on. Aaaa, and aaaaa. If we wrote that in Python, it would just be two quotes

23
00:01:42,370 --> 00:01:46,590
next to each other. Since I'm not using the quotes here, I'll just write empty.

24
00:01:46,590 --> 00:01:50,365
So a question mark is the set of two strings, either empty or the string a. The

25
00:01:50,365 --> 00:01:54,640
last thing that I need to mention is that we can use parenthesis for grouping.

26
00:01:54,640 --> 00:02:01,626
So, if you put parenthesis around two regular expressions, that becomes a single

27
00:02:01,626 --> 00:02:08,050
expression, for example, if we had ab star that would be the set of strings a,

28
00:02:08,050 --> 00:02:16,263
ab, abb, ab bb and so on. But if we use the parenthesis and we have ab

29
00:02:16,263 --> 00:02:27,237
surrounded by parenthesis star, well that's going to be the set of strings

30
00:02:27,237 --> 00:02:33,680
empty, abb bb and so on. The other thing parenthesis do is bind what's in

31
00:02:33,680 --> 00:02:38,162
between them as variables. And so, the first input to our query is what's

32
00:02:38,162 --> 00:02:40,863
contained in the first set of parenthesis.
