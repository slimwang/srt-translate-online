1
00:00:00,294 --> 00:00:04,145
We're going to start by looking at how
to convert just one clause from CNF to

2
00:00:04,145 --> 00:00:04,738
3-CNF.

3
00:00:04,738 --> 00:00:08,440
This is going to be the heart of
the argument because we're going to

4
00:00:08,440 --> 00:00:12,460
be able to apply this procedure to each
clause of the formula independently.

5
00:00:12,460 --> 00:00:16,340
So consider this one clause
consisting of literals Z1 through ZK.

6
00:00:16,340 --> 00:00:19,530
We're going to have three cases
depending on the number of

7
00:00:19,530 --> 00:00:20,579
literals in each clause.

8
00:00:21,710 --> 00:00:25,080
Note that I have left off K equals
3 since nothing needs to be done in

9
00:00:25,080 --> 00:00:26,270
that case.

10
00:00:26,270 --> 00:00:27,990
When there are two
literals in the clause,

11
00:00:27,990 --> 00:00:30,320
the situation is easier to understand.

12
00:00:30,320 --> 00:00:32,490
We just need to boost up
the number of literals to three.

13
00:00:33,570 --> 00:00:36,270
To do this we include
a single extra variable and

14
00:00:36,270 --> 00:00:41,180
trade in the clause z1 or
z2 for these two clauses here.

15
00:00:41,180 --> 00:00:44,750
One with the literal y1, and
one with the literal y1 nod.

16
00:00:46,040 --> 00:00:49,113
If in a truth assignment,
z1 or z2 is satisfied,

17
00:00:49,113 --> 00:00:51,550
then clearly both these have to be true.

18
00:00:53,010 --> 00:00:57,130
On the other hand, taking a satisfying
assignment from these clauses here,

19
00:00:57,130 --> 00:01:01,040
the Y literal has to be false
in one of these two clauses.

20
00:01:01,040 --> 00:01:04,480
And so therefore z1 or z2 must be true.

21
00:01:04,480 --> 00:01:07,070
We can play the same trick
when there's just one literal,

22
00:01:07,070 --> 00:01:09,450
z1 in the original clauses.

23
00:01:09,450 --> 00:01:14,040
This time we need to introduce two new
variables which we'll call y1 and y2.

24
00:01:15,480 --> 00:01:18,360
Then we replace the original
clause with these four.

25
00:01:19,670 --> 00:01:23,880
Note that if z1 is true, then all four
of these clauses are true as well.

26
00:01:25,170 --> 00:01:29,795
On the other hand, for any given
truth assignment for z1, y1 and

27
00:01:29,795 --> 00:01:34,800
y2, that satisfies these four clauses,
the y literals

28
00:01:34,800 --> 00:01:40,020
have to both be false in one of these
and that then implies that z1 is true.

29
00:01:40,020 --> 00:01:42,480
Lastly we have the case where
K is greater than three.

30
00:01:43,620 --> 00:01:46,290
Here we introduce K minus
three variables and

31
00:01:46,290 --> 00:01:49,100
use them to break up the clauses
according to this pattern.

32
00:01:50,440 --> 00:01:52,610
Let's illustrate this
idea with an example.

33
00:01:52,610 --> 00:01:55,600
Consider this sixth literal clause here.

34
00:01:55,600 --> 00:01:58,580
Looking at this, we might wish that
we could have a single variable

35
00:01:58,580 --> 00:02:02,210
that captured whether any of these
first four literals were true.

36
00:02:02,210 --> 00:02:03,745
Let's call this variable y3.

37
00:02:04,890 --> 00:02:10,836
Then we can express this overall clause
with just three of the literals,

38
00:02:10,836 --> 00:02:12,501
y3, or z5 or z6.

39
00:02:12,501 --> 00:02:18,520
At first I said that we wanted y3 to
be equal to z1 or z2 or z3 or z4.

40
00:02:18,520 --> 00:02:23,720
But actually it's efficient and
considerably less trouble for

41
00:02:23,720 --> 00:02:27,350
y3 just to imply the truth
of one of those literals.

42
00:02:27,350 --> 00:02:30,370
This idea is easy to
express as a clause.

43
00:02:30,370 --> 00:02:35,900
Either y3 is false, in which case
the implication doesn't apply, or

44
00:02:35,900 --> 00:02:39,290
one of z1 through z4 better be true.

45
00:02:39,290 --> 00:02:42,835
Together, these two clauses
imply the first one.

46
00:02:42,835 --> 00:02:46,165
If y3 is true,
then y3 bar is false, and so

47
00:02:46,165 --> 00:02:51,670
one of the z1 through z4 must be true,
and so must the original clause.

48
00:02:52,970 --> 00:02:56,800
On the other hand,
if y3 is false, then z5 or

49
00:02:56,800 --> 00:03:00,690
z6 must be true, and so
must the original clause.

50
00:03:02,100 --> 00:03:05,050
Also, if the original
clause is satisfied,

51
00:03:05,050 --> 00:03:09,120
then we can set Y3 equal to
the disjunction of z1 through z4,

52
00:03:09,120 --> 00:03:13,550
and these two clauses will
be satisfied as well.

53
00:03:13,550 --> 00:03:17,660
Note that we went from having
a longest clause length of six

54
00:03:17,660 --> 00:03:20,400
to having one of length 5 and
another of length 3.

55
00:03:20,400 --> 00:03:24,870
We can apply this strategy again
to the clause that's too long,

56
00:03:24,870 --> 00:03:26,810
by introducing another variable y2.

57
00:03:27,840 --> 00:03:31,128
And trade this long clause in for
a shorter clause,

58
00:03:31,128 --> 00:03:34,121
this time one of length 4 and
one of length 3.

59
00:03:34,121 --> 00:03:37,110
Of course we can play this trick again.

60
00:03:37,110 --> 00:03:40,930
And eventually we have just three
literal clauses, this example is for

61
00:03:40,930 --> 00:03:44,940
k equals 6 but an inductive argument
will show that the argument works for

62
00:03:44,940 --> 00:03:46,754
any k greater than 3.
