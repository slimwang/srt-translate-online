1
00:00:00,350 --> 00:00:03,200
Now that we have a handle on what
constructor functions are and

2
00:00:03,200 --> 00:00:06,660
how they're created,
let's dive in to underscore source code.

3
00:00:06,660 --> 00:00:08,150
Keep in mind the things
we've been discussing so

4
00:00:08,150 --> 00:00:10,090
far about template delimiters.

5
00:00:10,090 --> 00:00:13,420
Don't get bogged down in the nitty
gritty details of the function, but

6
00:00:13,420 --> 00:00:17,740
focus on what is happening to
the template string that's passed in.

7
00:00:17,740 --> 00:00:18,379
Let's do this.

8
00:00:19,950 --> 00:00:23,530
I've got the developer tools
open to the source tab and

9
00:00:23,530 --> 00:00:25,020
Iâ€™ve open the projects at file.

10
00:00:26,660 --> 00:00:31,570
When this line is run, remember that it
converts the template to a string and

11
00:00:31,570 --> 00:00:34,425
passes it to underscores
template function.

12
00:00:34,425 --> 00:00:39,781
This function is defined
in underscore on line 1415.

13
00:00:39,781 --> 00:00:43,365
As a tip, you can press control g and
type in the line number.

14
00:00:44,765 --> 00:00:47,510
Now, let's set a break
point on this first line.

15
00:00:47,510 --> 00:00:48,850
Refreshing the page with command or

16
00:00:48,850 --> 00:00:53,530
control r will pause execution right as
it's starting to build up the template.

17
00:00:53,530 --> 00:00:58,670
We can see that we got to this line
from f j.s by checking the call stack.

18
00:00:58,670 --> 00:01:03,420
Remember that the text variable holds
the contents of the html template.

19
00:01:03,420 --> 00:01:06,540
Chrome will show us what a variable
holds if we now mouse over the variable.

20
00:01:07,780 --> 00:01:11,190
If you're feeling adventurous,
how about you pause the video, and

21
00:01:11,190 --> 00:01:13,540
see if you can step
through the code yourself.

22
00:01:13,540 --> 00:01:16,980
If you get stumped, or even if you make
it all the way through to the end,

23
00:01:16,980 --> 00:01:18,520
come back, and
we can go through it together.

24
00:01:19,870 --> 00:01:24,040
These lines here determine what
delimiters to look for in the template.

25
00:01:24,040 --> 00:01:26,180
If you want to override
the default delimiters,

26
00:01:26,180 --> 00:01:29,360
you can pass them in as part
of the settings argument.

27
00:01:29,360 --> 00:01:32,610
This matcher variable is
the set of delimiters.

28
00:01:32,610 --> 00:01:35,510
Since we didn't override them,
they're the ones we looked at already.

29
00:01:36,510 --> 00:01:38,910
Matcher is a regular expression.

30
00:01:38,910 --> 00:01:41,520
Regular expressions are out of
the scope of this course, but

31
00:01:41,520 --> 00:01:43,440
it would be helpful to know the basics.

32
00:01:43,440 --> 00:01:46,530
You'll find some resources on regular
expressions in the instructor notes.

33
00:01:47,530 --> 00:01:50,070
These buttons over here let
us step through the code.

34
00:01:50,070 --> 00:01:52,730
And I'll use them as we
move through everything.

35
00:01:52,730 --> 00:01:54,410
This line starts the new source string.

36
00:01:54,410 --> 00:01:57,260
The rest of the function
will add to this string.

37
00:01:57,260 --> 00:02:00,530
This is what will become the body
of the constructor function.

38
00:02:00,530 --> 00:02:02,730
These lines here take the text and

39
00:02:02,730 --> 00:02:06,210
replaces it with the contents
of the matched delimiter.

40
00:02:06,210 --> 00:02:08,740
Let's step through one
loop to see how it works.

41
00:02:08,740 --> 00:02:13,480
Replace user's maitre which if you
remember is a regular expression.

42
00:02:13,480 --> 00:02:16,390
To search for a starting and
ending delimiter pair.

43
00:02:16,390 --> 00:02:19,020
The first one it found
is stored in match.

44
00:02:19,020 --> 00:02:23,080
The delimiters that were found in
this match were the interpolate ones.

45
00:02:23,080 --> 00:02:24,870
Looking at the current scope,

46
00:02:24,870 --> 00:02:29,280
the match's content is stored
in the interpolate variable.

47
00:02:29,280 --> 00:02:31,940
If the contents were stored
in the escape variable,

48
00:02:31,940 --> 00:02:35,540
then that variable would
get saved to a T variable.

49
00:02:35,540 --> 00:02:38,700
Which gets wrapped in
underscore's escape function and

50
00:02:38,700 --> 00:02:40,900
is added to the source string.

51
00:02:40,900 --> 00:02:43,760
If the contents were stored
in the escape variable

52
00:02:43,760 --> 00:02:48,260
then that variable will get saved to
a T variable which gets wrapped in

53
00:02:48,260 --> 00:02:51,610
underscore's escape function and
is added to the source string.

54
00:02:52,630 --> 00:02:55,220
If the contents were
stored in Interpolate,

55
00:02:55,220 --> 00:02:58,750
then it gets directly added
to the source string.

56
00:02:58,750 --> 00:03:00,620
If the contents are stored in evaluate,

57
00:03:00,620 --> 00:03:03,220
then it gets directly added
to the source string.

58
00:03:03,220 --> 00:03:05,880
Interpolate and
evaluate are similar, but

59
00:03:05,880 --> 00:03:08,910
interpolate will insert the contents.

60
00:03:08,910 --> 00:03:11,330
While evaluate will
actually run the code.

61
00:03:11,330 --> 00:03:15,340
The replace function loops through
the entire text string until it finds

62
00:03:15,340 --> 00:03:18,690
all the delimiters and adds their
contents to the source string.

63
00:03:18,690 --> 00:03:22,830
The next few lines add a little bit
more to the front of the source string.

64
00:03:22,830 --> 00:03:26,080
We've been using the t and
p variables already.

65
00:03:26,080 --> 00:03:27,930
This is where they are created.

66
00:03:27,930 --> 00:03:30,780
All of the hard work of building up
the source string is finally about

67
00:03:30,780 --> 00:03:31,760
to pay off.

68
00:03:31,760 --> 00:03:35,760
A new function is created with
the source string as the last argument.

69
00:03:35,760 --> 00:03:38,990
Remember that the last argument to a
constructor function becomes the body of

70
00:03:38,990 --> 00:03:39,840
that function.

71
00:03:39,840 --> 00:03:42,360
This new function is stored in render.

72
00:03:42,360 --> 00:03:46,290
Now this render function, and this
template function are very important.

73
00:03:46,290 --> 00:03:49,140
Template will be called at
some later point with data.

74
00:03:49,140 --> 00:03:53,740
When template is called it calls render
and passes along the data it receives.

75
00:03:53,740 --> 00:03:55,870
Believe it or not, that's the end.

76
00:03:55,870 --> 00:03:59,480
Underscore adds a source property to
the function, which we used earlier, and

77
00:03:59,480 --> 00:04:00,830
then it returns the template function.
