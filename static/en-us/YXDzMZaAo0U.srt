1
00:00:00,160 --> 00:00:03,088
Say you've designed your robot, now you want to put a skin over his frame to

2
00:00:03,088 --> 00:00:06,400
make him look more lifelike and infiltrate the humans, become more accepted by

3
00:00:06,400 --> 00:00:11,015
humanity. A robot model typically has a few rigid elements that do not change

4
00:00:11,015 --> 00:00:15,756
over time, such as a forearm and an upper arm. At the joint the objects are

5
00:00:15,756 --> 00:00:19,804
clearly separate. That's where you'd like to put skin. One simple solution is

6
00:00:19,804 --> 00:00:22,610
to just put some triangles connecting the two rigid pieces, sort of like a

7
00:00:22,610 --> 00:00:26,905
cylinder. As the joint bends, these triangles deform and stretch, keeping the

8
00:00:26,905 --> 00:00:31,220
two arm pieces attached. This doesn't look very good as the more the arm bends,

9
00:00:31,220 --> 00:00:35,022
the more the joint flattens out. What we'd prefer is something more like a

10
00:00:35,022 --> 00:00:38,742
flexible tube that bends, but mostly keeps its shape. Say we now add such a

11
00:00:38,742 --> 00:00:42,872
joint, with three cylinders, one after the other. The challenge now is how to

12
00:00:42,872 --> 00:00:46,590
move these cylinder vertices as the joint bends. The basic solution is

13
00:00:46,590 --> 00:00:51,377
surprisingly simple. Each vertex is assigned a weight. This weight is how much

14
00:00:51,377 --> 00:00:55,319
each rigid part's position affects the vertex. The top and bottom of the tube

15
00:00:55,319 --> 00:00:58,619
still stays connected to its rigid body part, so that body part's influence has

16
00:00:58,619 --> 00:01:03,370
a weight of 1. For vertices closer to the forearm, the weight is say, 2 3rds

17
00:01:03,370 --> 00:01:07,740
forearm, 1 3rds upper arm. This modeling process of adding polygons and

18
00:01:07,740 --> 00:01:12,218
assigning weights is called skinning, or sometimes vertex blending. The rigid

19
00:01:12,218 --> 00:01:16,000
parts of the model are defined by bones. These bones are like a skeleton, so

20
00:01:16,000 --> 00:01:19,890
this whole area is sometimes called skeletal animation. As a bone moves, the

21
00:01:19,890 --> 00:01:23,716
skin is influenced by the bone's transform times its weight. Specifically,

22
00:01:23,716 --> 00:01:27,170
let's look at this one vertex on the skin that's near the forearm. The vertex

23
00:01:27,170 --> 00:01:31,000
location is transformed twice. Once with respect to the forearm, and once with

24
00:01:31,000 --> 00:01:34,995
respect to the upper arm. These two transformed locations are then multiplied

25
00:01:34,995 --> 00:01:38,915
by their corresponding weights, giving the interpolated point between them. The

26
00:01:38,915 --> 00:01:42,526
basic algorithm works fairly well, but can have problems. For example, in the

27
00:01:42,526 --> 00:01:45,968
inner part of the elbow, the points may bend inwards in an unconvincing way. In

28
00:01:45,968 --> 00:01:49,959
practice, the vertex can be influenced by more than two bones. The bones and

29
00:01:49,959 --> 00:01:52,533
weights are something the person modeling decides, and the weights always add

30
00:01:52,533 --> 00:01:56,298
up to 1. These characters were exported from Valve's Team Fortress 2 game and

31
00:01:56,298 --> 00:02:00,099
animated with Three.js' skinning class called skinned mesh. Skinning is well

32
00:02:00,099 --> 00:02:04,125
suited to the GPU, as the vertex shader can transform plates multiple times and

33
00:02:04,125 --> 00:02:08,860
add together the weighted locations. There are more elaborate algorithms that

34
00:02:08,860 --> 00:02:11,674
give better results, but for interactive rendering in particular, skinning is

35
00:02:11,674 --> 00:02:12,970
the mainstay.
