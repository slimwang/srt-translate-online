1
00:00:00,370 --> 00:00:03,472
So there's a couple of different ways to
get your function to produce some sort

2
00:00:03,472 --> 00:00:03,950
of output.

3
00:00:03,950 --> 00:00:07,724
You should already be familiar with
using console.log to print out messages

4
00:00:07,724 --> 00:00:11,672
to the console, which you can do inside
a function or directly from the console,

5
00:00:11,672 --> 00:00:15,510
which is something we did way back in
the very first lesson of this course.

6
00:00:15,509 --> 00:00:17,429
Now, if you remember all
the way back to that lesson,

7
00:00:17,429 --> 00:00:21,210
when you first used console.log, then
you might also remember seeing the word

8
00:00:21,210 --> 00:00:23,230
undefined displayed after your message.

9
00:00:23,230 --> 00:00:28,339
So the question is what is undefined,
and where exactly is it coming from?

10
00:00:28,339 --> 00:00:31,710
Well, in reality, undefined is
actually what is being returned

11
00:00:31,710 --> 00:00:34,329
back from the console.log
function when you call it.

12
00:00:34,329 --> 00:00:39,099
You see, any function is always going to
return some value back to the caller.

13
00:00:39,100 --> 00:00:41,130
If a return value is not specified,

14
00:00:41,130 --> 00:00:43,790
then the function will just
return back undefined.

15
00:00:43,789 --> 00:00:46,799
When you call console.log and
pass it a message, you are,

16
00:00:46,799 --> 00:00:50,909
in effect, calling the console.log
function, passing it an argument,

17
00:00:50,909 --> 00:00:54,449
which is your message, and
then it's returning back undefined.

18
00:00:54,450 --> 00:00:58,490
However, the function is also printing
out the message back to the console.

19
00:00:58,490 --> 00:01:01,480
So the way to look at it is there's two
different ways you can get your function

20
00:01:01,479 --> 00:01:03,159
to produce some sort of output.

21
00:01:03,159 --> 00:01:05,479
The first way is printing
messages using console.log.

22
00:01:05,480 --> 00:01:08,340
And the second way is by
using the return keyword and

23
00:01:08,340 --> 00:01:11,109
a value to return back
some value to the caller.

24
00:01:11,109 --> 00:01:14,359
Two important things to point out
here is that the return keyword

25
00:01:14,359 --> 00:01:17,400
will be used to stop
the execution of a function, and

26
00:01:17,400 --> 00:01:20,990
it's going to return
a value back to the caller.

27
00:01:20,989 --> 00:01:24,149
If nothing is defined as
a value to be returned back,

28
00:01:24,150 --> 00:01:26,630
then undefined is going to be
returned back automatically.

29
00:01:26,629 --> 00:01:29,239
Now, if that didn't make any sense,
let's look at some code, and

30
00:01:29,239 --> 00:01:31,319
hopefully it will become
a little more clear.

31
00:01:31,319 --> 00:01:34,879
Now, one thing to keep in mind as
I do this is that console.log and

32
00:01:34,879 --> 00:01:36,939
return are not the same thing.

33
00:01:36,939 --> 00:01:39,349
So this example should show the key
difference between the two.

34
00:01:39,349 --> 00:01:42,299
All right, so I've got a function
here that I've written

35
00:01:42,299 --> 00:01:45,289
to tell me if an integer greater
than two is a prime number.

36
00:01:45,290 --> 00:01:49,180
Now, if you're not familiar with
prime numbers, a number is basically

37
00:01:49,180 --> 00:01:53,735
prime if it can't be divided by any
other numbers besides itself and one.

38
00:01:53,734 --> 00:01:57,079
That's not a super formal definition for
a prime number, but stay with me.

39
00:01:57,079 --> 00:02:01,090
The important thing here is that you see
the difference between console.log and

40
00:02:01,090 --> 00:02:01,650
return.

41
00:02:01,650 --> 00:02:05,920
So the way this function works is if
an integer passed to the function

42
00:02:05,920 --> 00:02:08,319
is a prime number,
then it's going to return true.

43
00:02:08,319 --> 00:02:09,099
It's that simple.

44
00:02:09,099 --> 00:02:12,919
But if the number is not prime, then
it will print to the console the first

45
00:02:12,919 --> 00:02:17,319
number that our integer that we're
passing, here, is divisible by, and

46
00:02:17,319 --> 00:02:19,139
then it will return false.

47
00:02:19,139 --> 00:02:22,259
So, again, don't worry too much
about the details of this function.

48
00:02:22,259 --> 00:02:25,109
But I'm going to copy it and
paste it over into the console.

49
00:02:25,110 --> 00:02:28,280
And then we'll run it and
see what kind of output we get back.

50
00:02:28,280 --> 00:02:31,979
All right, so I know 11 is a prime
number, so let's call our function and

51
00:02:31,979 --> 00:02:33,629
see what we get back.

52
00:02:33,629 --> 00:02:37,469
So I'll type isPrime(11),
and we get back true.

53
00:02:37,469 --> 00:02:39,340
Perfect, that's what we want to see.

54
00:02:39,340 --> 00:02:40,629
If you look at our function, that means,

55
00:02:40,629 --> 00:02:43,990
when I passed 11 to it,
that it started at the number 2 and

56
00:02:43,990 --> 00:02:48,469
went all the way to the number
10 because we're less than 11.

57
00:02:48,469 --> 00:02:50,199
So this loop would end at number 10.

58
00:02:50,199 --> 00:02:53,839
And it never found a number
11 was divisible by.

59
00:02:53,840 --> 00:02:55,560
So it never hit this
conditional statement.

60
00:02:55,560 --> 00:02:58,259
It never got inside this
conditional statement, and

61
00:02:58,259 --> 00:02:59,949
it just returned true, okay.

62
00:02:59,949 --> 00:03:01,979
Now let's try passing it another number.

63
00:03:01,979 --> 00:03:06,119
So how about 49 because
49 is an odd number.

64
00:03:06,120 --> 00:03:07,687
It's kind of weird, and

65
00:03:07,687 --> 00:03:11,513
I can't really remember if it's
divisible by seven or not.

66
00:03:11,513 --> 00:03:14,564
So, okay, cool.

67
00:03:14,564 --> 00:03:19,412
So it is divisible by 7, and
we get the return value of false.

68
00:03:19,412 --> 00:03:23,132
Again, if you look at our function
that means when I passed 49 to it,

69
00:03:23,132 --> 00:03:24,981
that we started at 2 and looped until 7.

70
00:03:24,981 --> 00:03:30,292
And when the loop reached 7,
our condition finally evaluated to true.

71
00:03:30,292 --> 00:03:34,129
So once that happened, it printed 49 is

72
00:03:34,129 --> 00:03:38,579
divisible by 7 to the console,
and then it returned false.

73
00:03:38,580 --> 00:03:41,913
Now the key thing here is that when
this return statement was called,

74
00:03:41,913 --> 00:03:44,569
this return false,
our function completely exited.

75
00:03:44,568 --> 00:03:49,366
It didn't keep looping over more numbers
to find out if 49 was divisible by 8,

76
00:03:49,366 --> 00:03:50,719
9, 10, and so on.

77
00:03:50,719 --> 00:03:51,637
It printed this out.

78
00:03:51,637 --> 00:03:54,251
And then, once our function
hit the return statement,

79
00:03:54,251 --> 00:03:57,020
completely exited the function,
we were done.

80
00:03:57,020 --> 00:04:00,850
So let's recap, biggest takeaways here
are that a function is always going to

81
00:04:00,850 --> 00:04:02,194
return something, okay.

82
00:04:02,194 --> 00:04:04,468
Let me remove these, return.

83
00:04:04,468 --> 00:04:07,824
And let's run our function again without
the return statements in there and

84
00:04:07,824 --> 00:04:08,985
see what happens, okay.

85
00:04:08,985 --> 00:04:11,168
So now I've remove the returns.

86
00:04:11,169 --> 00:04:14,269
And let's call isPrime,
and we'll do 49 again.

87
00:04:14,269 --> 00:04:18,276
So it still prints out our statement
that 49 is divisible by 7.

88
00:04:18,276 --> 00:04:22,278
And it looks like it's not divisible by
anything else either because it would've

89
00:04:22,278 --> 00:04:25,759
continued to loop here and go 8,
9, 10, all the way up until 48.

90
00:04:25,759 --> 00:04:28,074
But you'll see that here
it didn't return anything,

91
00:04:28,074 --> 00:04:29,340
it just returned undefined.

92
00:04:29,339 --> 00:04:31,560
So if you don't specify
any sort of return,

93
00:04:31,560 --> 00:04:34,983
then your function's always just
going to return back as undefined.

94
00:04:34,983 --> 00:04:38,935
So the second thing to remember is that
console.log is not the same thing as

95
00:04:38,935 --> 00:04:40,084
a return statement.

96
00:04:40,084 --> 00:04:43,824
So console.log is great for printing
out values to test your code and

97
00:04:43,824 --> 00:04:46,404
giving you helpful feedback, but
it's not a return statement.

