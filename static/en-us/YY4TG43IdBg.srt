1
00:00:01,010 --> 00:00:02,310
So there are lots more things we can do with

2
00:00:02,310 --> 00:00:04,760
strings. The next one I am going to talk about, is

3
00:00:04,760 --> 00:00:08,880
selecting sub-sequences from strings. So what we have seen so

4
00:00:08,880 --> 00:00:12,500
far, we have used indexing, where we have a string,

5
00:00:12,500 --> 00:00:15,640
where we have our square bracket. We have some expression

6
00:00:15,640 --> 00:00:18,880
that produces one number, and we have our closed square

7
00:00:18,880 --> 00:00:22,760
bracket, and that gives us a one-character string. And whatever

8
00:00:22,760 --> 00:00:26,160
position the number refers to in the string here. The other

9
00:00:26,160 --> 00:00:28,310
thing we can do with square brackets is select

10
00:00:28,310 --> 00:00:30,820
a sub-sequence of the string. Instead of just having

11
00:00:30,820 --> 00:00:33,930
one expression here, what we can have is an

12
00:00:33,930 --> 00:00:36,720
expression. This is also something that should evaluate to a

13
00:00:36,720 --> 00:00:41,800
number, followed by a colon, followed by another expression.

14
00:00:41,800 --> 00:00:44,810
Both of these expressions are numbers. And this will

15
00:00:44,810 --> 00:00:49,040
evaluate to a string, this is a subsequence of

16
00:00:49,040 --> 00:00:51,200
a characters in, the input string. So I called the

17
00:00:51,200 --> 00:00:54,090
string s, the value of this number will call

18
00:00:54,090 --> 00:00:56,020
start, and the value of this number will call

19
00:00:56,020 --> 00:01:00,120
stop. And what the result is, is a string

20
00:01:00,120 --> 00:01:02,760
that's a subsequence of all the characters in s,

21
00:01:02,760 --> 00:01:05,570
and the string that we had here. Starting from

22
00:01:05,570 --> 00:01:08,750
position start, so the number to the left of

23
00:01:08,750 --> 00:01:13,580
the colon, and ending with position stop, but not

24
00:01:13,580 --> 00:01:16,830
including that character. So it's going to really include the characters

25
00:01:16,830 --> 00:01:21,270
from position start, up through stop minus 1. So this construct allows us

26
00:01:21,270 --> 00:01:25,920
to select from any string A subsequence of continuous characters in that string.

27
00:01:29,400 --> 00:01:31,450
So, let's try an example in the Python interpreter.

28
00:01:31,450 --> 00:01:34,080
I'm going to initialize the variable word to be the

29
00:01:34,080 --> 00:01:37,820
string assume. And using the single index operator we

30
00:01:37,820 --> 00:01:40,660
saw initially, we can select a character from word.

31
00:01:40,660 --> 00:01:43,370
So, if I select word index 3. That will

32
00:01:43,370 --> 00:01:46,520
give us the fourth character, zero, one, two, three,

33
00:01:46,520 --> 00:01:49,680
which is u, and when we run that, we

34
00:01:49,680 --> 00:01:53,310
see the result is u. With the new operation,

35
00:01:54,400 --> 00:01:57,680
that's the same as selecting word 3:4,

36
00:01:57,680 --> 00:02:01,260
that's going to select starting from position three, going

37
00:02:01,260 --> 00:02:05,000
to just before position four. So that will end up being just the one letter u.

38
00:02:06,200 --> 00:02:09,574
Just to make this clear, if I selected

39
00:02:09,574 --> 00:02:14,820
3:3, there's no string there, that's just a

40
00:02:14,820 --> 00:02:16,890
single empty string which prints out in a

41
00:02:16,890 --> 00:02:19,740
way we can't see it. There's no characters

42
00:02:19,740 --> 00:02:23,430
between 3 and character 3. We'll go back to

43
00:02:23,430 --> 00:02:27,824
just selecting index 3. I could select from position 4

44
00:02:27,824 --> 00:02:30,950
through position 6. That would give us a string which

45
00:02:30,950 --> 00:02:34,552
is a subsequence of letters at position 4 and position

46
00:02:34,552 --> 00:02:36,380
5. So when we run this now we see the

47
00:02:36,380 --> 00:02:39,372
first one prints out to u. The second one prints

48
00:02:39,372 --> 00:02:42,360
out me which is position 4 and position 5. The

49
00:02:42,360 --> 00:02:44,850
last two characters in the word. I'll show you one

50
00:02:44,850 --> 00:02:48,550
other thing we can do. Which is, leave one of

51
00:02:48,550 --> 00:02:52,200
the sides of the colon empty. So it we did 4:

52
00:02:52,200 --> 00:02:55,250
to the end, that will select from position 4 to the

53
00:02:55,250 --> 00:02:57,320
end. We don't need to actually count the characters to know

54
00:02:57,320 --> 00:03:00,050
where the end is. So that will produce the same thing

55
00:03:00,050 --> 00:03:02,610
as we did before. We can also leave nothing in front

56
00:03:02,610 --> 00:03:05,520
of the colon. That will select from the beginning. So if

57
00:03:05,520 --> 00:03:10,140
we do :2, that will select from position 0 up to

58
00:03:10,140 --> 00:03:17,120
position 2, giving us the first two letters of the word, as. And we could

59
00:03:17,120 --> 00:03:22,180
leave both sides blank, selecting word, [:],

60
00:03:22,180 --> 00:03:25,640
with nothing on either side, well, it starts from the beginning, goes to the

61
00:03:25,640 --> 00:03:28,790
end. That's going to give us the whole word. There's

62
00:03:28,790 --> 00:03:31,120
no good reason to ever want to do this, but

63
00:03:31,120 --> 00:03:33,120
it's consistent with the syntax where we can leave

64
00:03:33,120 --> 00:03:35,260
one side of the colon empty and that means

65
00:03:35,260 --> 00:03:37,260
selecting from either the beginning or the end.
