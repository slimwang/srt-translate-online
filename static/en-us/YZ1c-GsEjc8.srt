1
00:00:00,000 --> 00:00:01,867
Okay. Let's work through some code.

2
00:00:01,867 --> 00:00:05,410
Now in this series of coding exercises I'm going to show you,

3
00:00:05,410 --> 00:00:11,413
I'm going to be transposing a matrix, and the coordinates of this matrix are going to be giving us I and J.

4
00:00:11,413 --> 00:00:17,636
I refers to the column of an element, J refers to the row of an element.

5
00:00:17,636 --> 00:00:20,555
Now, this matrix is going to be laid out in row major order,

6
00:00:20,555 --> 00:00:28,397
meaning that in memory all the elements of a given row will be adjacent and in the next row, and then in the next row, and so on.

7
00:00:28,397 --> 00:00:33,833
And remember that our goal is to take for every element IJ,

8
00:00:33,833 --> 00:00:37,779
we want to switch it with element JI. So that's what the code is going to do.

9
00:00:37,779 --> 00:00:41,845
Let me slide this over here as a reference, and I'll bring up the code window.

10
00:00:41,845 --> 00:00:47,480
So here's how you would code transpose on a serial machine like a CPU, really simple code.

11
00:00:47,480 --> 00:00:55,191
I'm going to pass in 2 matrices in and out, and I'm going to walk through a 4 loop that loops over the rows,

12
00:00:55,191 --> 00:00:58,390
J, and within each row loops over the column,

13
00:00:58,390 --> 00:01:03,834
and then this is where you can tell that the matrix is laid out in row major order.

14
00:01:03,834 --> 00:01:10,235
I, J in the input matrix maps to J, I in the output matrix. Okay, really simple,

15
00:01:10,235 --> 00:01:17,067
and here's how you would call that code. So, I'm going to allocate a few matrices,

16
00:01:17,067 --> 00:01:24,225
an input matrix and an output matrix. And I call this little utility routine fill_matrix,

17
00:01:24,225 --> 00:01:28,595
which is just going to put a bunch of consecutive numbers inside the matrix.

18
00:01:28,595 --> 00:01:33,556
I call the transpose routine, and I'm going to put the result in the matrix I call gold,

19
00:01:33,556 --> 00:01:36,857
meaning that this is our golden reference. We know that this code is correct,

20
00:01:36,857 --> 00:01:42,600
and we're going to compare the various GPU versions that we code to this golden reference and then print it.

21
00:01:42,600 --> 00:01:46,000
Okay. So let's compile and run this code.
