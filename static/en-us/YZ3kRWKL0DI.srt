1
00:00:00,150 --> 00:00:04,050
So, let's remember how we defined our ranking function.

2
00:00:04,050 --> 00:00:05,610
So, we said we're going to have a time

3
00:00:05,610 --> 00:00:07,540
step. We're going to keep going through steps to

4
00:00:07,540 --> 00:00:10,220
get more accurate rankings. But initially, we're going to give

5
00:00:10,220 --> 00:00:14,850
every rank 1 divided by the number of pages. Before I called that

6
00:00:14,850 --> 00:00:19,820
capital N. I'm going to use npages as a more Pythonic variable name for that.

7
00:00:20,930 --> 00:00:25,700
And we updated the rank at time step t by adding

8
00:00:25,700 --> 00:00:29,770
the probability that the random surfer starts over and

9
00:00:29,770 --> 00:00:32,500
randomly picks that page. So, that's 1 minus d,

10
00:00:32,500 --> 00:00:35,580
is the probability of starting over, divided by npages,

11
00:00:35,580 --> 00:00:38,090
how many pages there are. And remember than d

12
00:00:38,090 --> 00:00:41,160
is our damping constant, and we'll decide that d

13
00:00:41,160 --> 00:00:44,160
is 0.8. That's the damping constant. We add to

14
00:00:44,160 --> 00:00:50,710
that the sum that we get of all the ranks, all the pages that link to this URL.

15
00:00:50,710 --> 00:00:55,100
We add up d times the previous iterations. So,

16
00:00:55,100 --> 00:00:58,370
it's going to be d times rank on step t minus

17
00:00:58,370 --> 00:01:01,940
1 of that page. But we want to divide that by

18
00:01:01,940 --> 00:01:05,080
the number of out links from p. So, it's starting

19
00:01:05,080 --> 00:01:07,270
to look more like Python code. We want to simplify

20
00:01:07,270 --> 00:01:09,970
it a little bit before we get to Python code.

21
00:01:09,970 --> 00:01:12,000
And the first thing we're going to do to simplify

22
00:01:12,000 --> 00:01:16,960
it, is observe that well, we have this t parameter.

23
00:01:16,960 --> 00:01:19,990
But we only ever use the very previous one. So, we

24
00:01:19,990 --> 00:01:22,870
don't really need to keep track of the rank value for

25
00:01:22,870 --> 00:01:25,210
all of the different t values. We just need to keep

26
00:01:25,210 --> 00:01:28,650
track of the previous one. When we did Fibonacci, we kept

27
00:01:28,650 --> 00:01:31,730
track of current and next in variables. And that allowed us

28
00:01:31,730 --> 00:01:34,970
to keep track of the previous and the previous previous Fibonacci

29
00:01:34,970 --> 00:01:37,980
numbers. What we want to do with ranks is something similar.

30
00:01:37,980 --> 00:01:42,360
So, we're going to use the variable ranks to keep track of

31
00:01:42,360 --> 00:01:45,040
the current ranks. And as we compute the new

32
00:01:45,040 --> 00:01:48,880
ranks, we're going to use the variable newranks. So, we'll

33
00:01:48,880 --> 00:01:53,720
use ranks. This corresponds to the ranks at time

34
00:01:53,720 --> 00:01:56,670
t minus 1. The ranks of the previous iteration,

35
00:01:56,670 --> 00:01:59,520
and we'll have a variable newranks, which is the

36
00:01:59,520 --> 00:02:02,260
ranks at time t. And the reason we need

37
00:02:02,260 --> 00:02:05,260
both of those. As we update the rank from

38
00:02:05,260 --> 00:02:07,720
each page. So we're going to go through the pages.

39
00:02:07,720 --> 00:02:11,860
Recomputing its rank. We can't lose the previous one. We

40
00:02:11,860 --> 00:02:14,490
still need to get rank at the previous step for that

41
00:02:14,490 --> 00:02:17,790
page. If we use the one that we got this time,

42
00:02:17,790 --> 00:02:19,950
that would distort the results. It would mean that the order

43
00:02:19,950 --> 00:02:23,810
that we update the ranks for changes the results. So, we

44
00:02:23,810 --> 00:02:26,210
don't want the results to depend on the order that we

45
00:02:26,210 --> 00:02:28,950
go through the pages. That's why we need to keep track

46
00:02:28,950 --> 00:02:33,010
of both the previous values, which will be used for ranks,

47
00:02:33,010 --> 00:02:36,250
t minus 1 and the newranks. Once we have

48
00:02:36,250 --> 00:02:38,220
done that, we don't need the t parameter anymore.

49
00:02:38,220 --> 00:02:41,440
What we are going to do is change this rank,

50
00:02:41,440 --> 00:02:44,390
the rank at time t is going to be the value

51
00:02:44,390 --> 00:02:47,130
of newrank and the value of rank at time

52
00:02:47,130 --> 00:02:50,560
t minus 1. That's the value of ranks. The other

53
00:02:50,560 --> 00:02:54,720
change I slipped into this. Before we had parenths

54
00:02:54,720 --> 00:02:58,480
here and I've changed them to square brackets. And square,

55
00:02:58,480 --> 00:03:01,220
square brackets should give you the idea that well, this might

56
00:03:01,220 --> 00:03:05,390
be a data structure that we're indexing. And that's correct. We

57
00:03:05,390 --> 00:03:07,820
want to index the data structure. And we want to index

58
00:03:07,820 --> 00:03:12,540
it by the URL that we're looking for. And the Python dictionary

59
00:03:12,540 --> 00:03:14,630
provides a great way to do that. At the end of

60
00:03:14,630 --> 00:03:18,090
this will be a Python dictionary. And that's exactly what we want.

61
00:03:18,090 --> 00:03:20,450
So, I think we're ready to start looking at the code.

62
00:03:20,450 --> 00:03:23,870
We've written this formula. It's still a mix of math and Python.

63
00:03:23,870 --> 00:03:26,820
But we're going to turn this into the code for computing the page ranks.
