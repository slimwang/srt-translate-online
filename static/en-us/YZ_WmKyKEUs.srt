1
00:00:00,057 --> 00:00:03,933
So we talked about marshalling, data copying, and content

2
00:00:03,933 --> 00:00:07,809
switches, and the fourth component that adds to the latency

3
00:00:07,809 --> 00:00:11,761
of the RPC transmission is protocol processing, and that's

4
00:00:11,761 --> 00:00:14,904
the next thing that we're going to look at. Now the

5
00:00:14,904 --> 00:00:18,054
question is, what transport should we use for the

6
00:00:18,054 --> 00:00:20,223
RPC? And this is where we want to see how

7
00:00:20,223 --> 00:00:22,554
we can take advantage of what the hardware is

8
00:00:22,554 --> 00:00:25,311
giving us. If we are working in a local area

9
00:00:25,311 --> 00:00:29,471
network, the local area network is reliable, and therefore

10
00:00:29,471 --> 00:00:32,831
our focus should really be on reducing the latency

11
00:00:32,831 --> 00:00:35,973
and not worry so much about reliability. It is

12
00:00:35,973 --> 00:00:39,377
often the case that performance and reliability are at

13
00:00:39,377 --> 00:00:42,533
odds with each other. If you focus on reliability,

14
00:00:42,533 --> 00:00:45,262
then performance may take a back seat. So here,

15
00:00:45,262 --> 00:00:47,726
since the RPC performance is the most critical thing

16
00:00:47,726 --> 00:00:50,470
that we are worried about, we're going to focus on reducing

17
00:00:50,470 --> 00:00:53,571
the latency. And we're going to assume that the

18
00:00:53,571 --> 00:00:57,399
LAN is reliable and therefore let's not worry about

19
00:00:57,399 --> 00:01:01,140
the reliability of message transmission in a local

20
00:01:01,140 --> 00:01:04,644
area network. That's the idea behind, the next thing

21
00:01:04,644 --> 00:01:07,370
that we're going to look at. Let's think about

22
00:01:07,370 --> 00:01:09,926
all the thing that could go wrong in message

23
00:01:09,926 --> 00:01:12,979
transmission, and see why some of those things may

24
00:01:12,979 --> 00:01:15,535
not be that important, given that we have a

25
00:01:15,535 --> 00:01:18,635
reliable local area network. The first thing is, you

26
00:01:18,635 --> 00:01:21,146
send a message, it might get lost. But, if in

27
00:01:21,146 --> 00:01:24,476
a local area network, the chances that messages will

28
00:01:24,476 --> 00:01:27,613
actually get lost, is not very high. It happens in

29
00:01:27,613 --> 00:01:30,809
wide area internet, because messages have, have to go

30
00:01:30,809 --> 00:01:34,617
out through several different routers, and they maybe queuing in

31
00:01:34,617 --> 00:01:37,609
the routers, and there may be loss of packets in

32
00:01:37,609 --> 00:01:40,664
the wire and so on. But that's not something that

33
00:01:40,664 --> 00:01:42,803
you have to worry about in a local area

34
00:01:42,803 --> 00:01:46,239
network. So that assumption that messages may not get lost,

35
00:01:46,239 --> 00:01:50,956
suggests that there's no need for low level acknowledgements. Why?

36
00:01:50,956 --> 00:01:53,708
Because you're sending a call and the call is going to

37
00:01:53,708 --> 00:01:56,447
be executed and the result is going to come back. And

38
00:01:56,447 --> 00:01:59,849
usually in network transmission, we send acknowledgements to say that,

39
00:01:59,849 --> 00:02:02,907
yes, I received the message. Now, in this case because

40
00:02:02,907 --> 00:02:05,931
the semantics of RPC says that the act of receiving

41
00:02:05,931 --> 00:02:08,955
the RPC call is going to result in server procedure

42
00:02:08,955 --> 00:02:12,339
execution and the result is going to come back, the result

43
00:02:12,339 --> 00:02:15,658
itself serves as the ACK. And therefore we don't need

44
00:02:15,658 --> 00:02:18,738
low level ACKs to say, oh, I received you arguments

45
00:02:18,738 --> 00:02:20,913
of the call. You don't have to do that. And

46
00:02:20,913 --> 00:02:23,727
similarly, you don't have to have a low level ACK

47
00:02:23,727 --> 00:02:27,257
that says oh, I received the results. Because the results

48
00:02:27,257 --> 00:02:31,107
were not received, the caller, the client is going to resend

49
00:02:31,107 --> 00:02:35,989
the client call. So the high level semantic of RPC can itself serve as a way

50
00:02:35,989 --> 00:02:38,912
we can coordinate between the client and the

51
00:02:38,912 --> 00:02:41,914
server and we can eliminate low level ACKs and

52
00:02:41,914 --> 00:02:44,916
if we eliminate low level ACKs, that reduces

53
00:02:44,916 --> 00:02:48,147
a latency in the transport. The second thing is

54
00:02:48,147 --> 00:02:51,673
in message transmission on the Internet, we worry

55
00:02:51,673 --> 00:02:56,370
about messages getting corrupted. Not maliciously or anything like

56
00:02:56,370 --> 00:02:58,726
that, but just due to vagaries of the

57
00:02:58,726 --> 00:03:01,918
network messages may get corrupted in going on the

58
00:03:01,918 --> 00:03:05,302
wire that connects the source and destination. And

59
00:03:05,302 --> 00:03:08,902
for that reason, it's typical to employ checksum in

60
00:03:08,902 --> 00:03:11,942
the messages to indicate the integrity of the

61
00:03:11,942 --> 00:03:15,862
message that checksum is usually computed in software and

62
00:03:15,862 --> 00:03:18,808
appended to the message and sent on wire.

63
00:03:18,808 --> 00:03:21,391
But in a local area network things are reliable,

64
00:03:21,391 --> 00:03:23,407
we don't have to do extra overhead and

65
00:03:23,407 --> 00:03:26,494
software for generating the checksum, just use hardware

66
00:03:26,494 --> 00:03:29,014
checksum if it is available, just use hardware

67
00:03:29,014 --> 00:03:32,696
checksum for packet integrity. Don't worry about adding an

68
00:03:32,696 --> 00:03:36,007
extra layer of software in the protocol processing

69
00:03:36,007 --> 00:03:40,308
for doing software checksum. So that's the second optimization

70
00:03:40,308 --> 00:03:42,633
that you can make to make the protocol

71
00:03:42,633 --> 00:03:46,436
processing leaner. The third source of overhead that comes

72
00:03:46,436 --> 00:03:50,540
about in message transmission is once again related to the fact that

73
00:03:50,540 --> 00:03:55,007
messages may get lost in transmission. And therefore in order to make sure

74
00:03:55,007 --> 00:03:59,633
that if messages are lost in transmission, you usually buffer the packets. So

75
00:03:59,633 --> 00:04:03,778
that if the message is lost in transmission, you can re-transmit the package.
