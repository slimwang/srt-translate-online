1
00:00:00,000 --> 00:00:04,000
So the answer is, it really does nothing.

2
00:00:04,000 --> 00:00:07,000
It'll make the computer do some work when we call sum,

3
00:00:07,000 --> 00:00:11,000
but there's no good reason to ever call this procedure.

4
00:00:11,000 --> 00:00:14,000
It doesn't have a return, so it doesn't produce any output,

5
00:00:14,000 --> 00:00:20,000
and it doesn't actually modify the value of the first input in any way that's visible to the caller.

6
00:00:20,000 --> 00:00:23,000
It does modify the value of a inside sum,

7
00:00:23,000 --> 00:00:25,000
but the caller can't actually see that.

8
00:00:25,000 --> 00:00:30,000
Let's see that in the Python interpreter so we make sure we understand what's going on here.

9
00:00:30,000 --> 00:00:36,000
We'll define sum to take those 2 inputs and have the body that assigns to a,

10
00:00:36,000 --> 00:00:38,000
the value a + b,

11
00:00:38,000 --> 00:00:41,000
and we can try printing the result of calling sum.

12
00:00:41,000 --> 00:00:44,000
Let's see if it can add 1 + 1.

13
00:00:44,000 --> 00:00:48,000
When we run this, what we'll see is the result is actually None.

14
00:00:48,000 --> 00:00:52,000
The reason the result is None is, while the sum procedure doesn't actually return anything,

15
00:00:52,000 --> 00:00:54,000
so there's no value here.

16
00:00:54,000 --> 00:00:58,000
Python uses the special value "None" to mean there's no value.

17
00:00:58,000 --> 00:00:59,000
So that's not very useful.

18
00:00:59,000 --> 00:01:02,000
We could pass in bigger numbers.

19
00:01:02,000 --> 00:01:08,000
Whatever we pass in, will still get the result None because sum never returns anything.

20
00:01:08,000 --> 00:01:09,738
To make sure it's clear what's going on here,

21
00:01:09,738 --> 00:01:11,646
we're going to add some print statements to sum.

22
00:01:11,646 --> 00:01:16,769
Printing things out is actually a perfectly good and perfectly useful way to test your code

23
00:01:16,769 --> 00:01:18,538
to make sure that you understand what's going on.

24
00:01:18,538 --> 00:01:21,000
It's always a good idea to add print statements.

25
00:01:21,000 --> 00:01:22,000
Sometimes we call this debugging.

26
00:01:22,000 --> 00:01:26,000
if the code has problems, adding print statements to see more what's going on

27
00:01:26,000 --> 00:01:27,000
is a good way to figure that out.

28
00:01:27,000 --> 00:01:30,000
Here I'm going to print that I've entered sum,

29
00:01:30,000 --> 00:01:34,000
and I'll print the value of a, and I'll do the same thing again.

30
00:01:34,000 --> 00:01:38,000
Now when we run it, we see that we "enter sum!"

31
00:01:38,000 --> 00:01:40,000
When we enter sum, the value of a is 2.

32
00:01:40,000 --> 00:01:43,000
That was the value passed in as the first parameter.

33
00:01:43,000 --> 00:01:48,000
The value of b is 123. That was what we passed in at the second input.

34
00:01:48,000 --> 00:01:51,000
When we print out the first print, a is 2.

35
00:01:51,000 --> 00:01:54,000
We see a is 2. We do the arithmetic. That changes the value of a.

36
00:01:54,000 --> 00:01:59,000
So now running the same print, it prints out the value of a as 125.

37
00:01:59,000 --> 00:02:02,000
Then we return, we have the result. The result is None.

38
00:02:02,000 --> 00:02:06,000
There's no output from sum, and that's what gets printed out.

39
00:02:06,000 --> 00:02:12,000
So if we add a return statement to sum, now we have the original code that we had.

40
00:02:12,000 --> 00:02:14,000
I've removed the print statements.

41
00:02:14,000 --> 00:02:16,000
So we don't need to see those again.

42
00:02:16,000 --> 00:02:19,000
We have this, and now we've added a return statement.

43
00:02:19,000 --> 00:02:24,846
Now when we run this, we do get the value 125 because the output of sum

44
00:02:24,846 --> 00:02:31,000
is what's returned here, which is the result of a at this point, which is 2 + 123.

45
00:02:31,000 --> 00:02:36,323
The other thing I want to make clear without the return is that if we passed in variables for this,

46
00:02:36,323 --> 00:02:38,708
it still does not change their value.

47
00:02:38,708 --> 00:02:43,000
Let's say we had a variable--I'll even use a.

48
00:02:43,000 --> 00:02:47,000
So I'm going to use the variable a. We'll initialize it to 2.

49
00:02:47,000 --> 00:02:50,000
We'll have the variable b. We'll initialize that to 123.

50
00:02:50,000 --> 00:02:55,000
We'll call sum. We still don't have the return, so it will return no value.

51
00:02:55,000 --> 00:02:59,415
Let's see if the value of a has changed at the end, and it hasn't,

52
00:02:59,415 --> 00:03:02,354
and the reason it hasn't is what gets passed in here--

53
00:03:02,354 --> 00:03:04,446
even when we have a complex expression,

54
00:03:04,446 --> 00:03:08,277
even when we use a name, or we have some calculation that produces the value--

55
00:03:08,277 --> 00:03:11,800
what gets passed in is the value that that evaluates to.

56
00:03:11,800 --> 00:03:14,000
So the fact that it was a name doesn't matter.

57
00:03:14,000 --> 00:03:19,000
When we call sum, what's getting passed in as the value of a is the value that a refers to,

58
00:03:19,000 --> 00:03:20,000
which is the number 2.

59
00:03:20,000 --> 00:03:24,000
We don't actually modify what the variable is.

60
00:03:24,000 --> 00:03:25,877
That's a totally separate variable.

61
00:03:25,877 --> 00:03:29,000
Let me draw what that looks like to make it clear what's going on.

62
00:03:29,000 --> 00:03:30,000
Here we have our code.

63
00:03:30,000 --> 00:03:34,000
So that introduced a name "a,"

64
00:03:34,000 --> 00:03:36,000
and it refers to the value 2,

65
00:03:36,000 --> 00:03:41,000
and it introduced a name "b," and that refers to the value 123.

66
00:03:41,000 --> 00:03:42,000
Both of those are numbers.

67
00:03:42,000 --> 00:03:45,000
And we have our procedure that we defined like this.

68
00:03:45,000 --> 00:03:46,600
It takes the 2 inputs.

69
00:03:46,600 --> 00:03:50,238
It changes the the value of the input named a.

70
00:03:50,238 --> 00:03:54,754
We're going to call sum, passing in a and b.

71
00:03:54,754 --> 00:03:59,000
What happens when we call sum--we have these names here.

72
00:03:59,000 --> 00:04:00,000
The names are our parameters.

73
00:04:00,000 --> 00:04:05,000
We're going to have a name inside sum that's a.

74
00:04:05,000 --> 00:04:08,000
That is going to refer to whatever value is passed in here.

75
00:04:08,000 --> 00:04:13,000
So to know what the value is, we evaluate the name a. We get the value 2.

76
00:04:13,000 --> 00:04:16,000
This a will refer to the value 2.

77
00:04:16,000 --> 00:04:19,000
b will refer to the value passed in as b.

78
00:04:19,000 --> 00:04:21,000
It's going to be the number 123.

79
00:04:21,000 --> 00:04:23,000
And then when we run sum, we do the assignment.

80
00:04:23,000 --> 00:04:27,000
That's going to produce the new number adding 2 + 123.

81
00:04:27,000 --> 00:04:32,000
We get the value 125, and then we do the assignment.

82
00:04:32,000 --> 00:04:35,000
The assignment changes what a refers to.

83
00:04:35,000 --> 00:04:38,000
Now instead of referring to the number 2,

84
00:04:38,000 --> 00:04:45,000
the a that corresponds to the parameter to the procedure sum, now refers to the number 125.

85
00:04:45,000 --> 00:04:51,877
Note that the original value of a, the one that we named here, still refers to 2.

86
00:04:51,877 --> 00:04:57,554
When we come back from the procedure, so once we get to here, we return.

87
00:04:57,554 --> 00:05:00,000
We're back to running the code here.

88
00:05:00,000 --> 00:05:05,215
All of the parameters that were visible inside the body of sum,

89
00:05:05,215 --> 00:05:06,692
those are no longer visible.

90
00:05:06,692 --> 00:05:09,000
They were there for that execution, but they're done.

91
00:05:09,000 --> 00:05:11,000
We can't use those names anymore.

92
00:05:11,000 --> 00:05:14,800
They were only visible during that execution of the procedure.

93
00:05:14,800 --> 00:05:18,800
Now at this point, a refers to the number 2, just like it did before.
