1
00:00:00,340 --> 00:00:04,804
It's a fact of life that no matter how hard we try our programs have bugs. In

2
00:00:04,804 --> 00:00:08,602
the olden days, computers had real bugs. For example, the moth that you see

3
00:00:08,602 --> 00:00:12,201
here got trapped in a relay of the very first computer in the United States

4
00:00:12,201 --> 00:00:17,805
causing it to malfunction. But of course, nowadays, the bugs are usually the

5
00:00:17,805 --> 00:00:22,964
fault of the programmer by not having thought through everything. And that's

6
00:00:22,964 --> 00:00:26,425
normal. You can find simple bugs by putting print statements into your code,

7
00:00:26,425 --> 00:00:31,060
printing out everything in sight. Seeing what goes wrong, and then removing the

8
00:00:31,060 --> 00:00:35,296
print statements again, but that's no fun. There's a nifty software tool called

9
00:00:35,296 --> 00:00:39,290
a debugger, that you can use to control your program. Stop it and look around,

10
00:00:39,290 --> 00:00:42,188
and then find out what it actually does as opposed to what you think it's been

11
00:00:42,188 --> 00:00:47,240
doing. Using a debugger is pretty simple, there are three key concepts that you

12
00:00:47,240 --> 00:00:51,026
need to master. You can set breakpoints in your program, and then that the

13
00:00:51,026 --> 00:00:55,001
debugger will stop when the program reaches a breakpoint. You can then step

14
00:00:55,001 --> 00:00:58,992
through your program one instruction at a time. And you can even step inside

15
00:00:58,992 --> 00:01:04,004
method calls. And finally, you can inspect the contents of variables. So if you

16
00:01:04,004 --> 00:01:07,972
have a variable, you can ask the debugger what's inside at this point. So,

17
00:01:07,972 --> 00:01:11,510
these are the three key concepts that you want to keep in mind. Let me show you

18
00:01:11,510 --> 00:01:16,655
how to do these in BlueJ. This example program, tries to count the syllables in

19
00:01:16,655 --> 00:01:21,495
a word. Let me show you. enter a few words. And as you can see, the program

20
00:01:21,495 --> 00:01:27,629
doesn't seem to be doing so well. Hello has two syllables, not one. Yellow also

21
00:01:27,629 --> 00:01:32,708
has two. Oh, peach has one. Before debugging this program, let's have a quick

22
00:01:32,708 --> 00:01:38,064
look at algorithm is used to count the syllables. Here is our algorithm. We

23
00:01:38,064 --> 00:01:42,498
look for groups of vowels. There's one here, another group of length one, and

24
00:01:42,498 --> 00:01:48,146
another one, and we count the groups. This word has three syllables. However,

25
00:01:48,146 --> 00:01:52,114
here we'll count this group, but we won't count an "e" at the end, because nice

26
00:01:52,114 --> 00:01:57,400
only has one syllable. That second rule trips us up with some very short words

27
00:01:57,400 --> 00:02:02,087
such as the. We're not counting the E would give us zero syllables and we'll

28
00:02:02,087 --> 00:02:07,314
say if that happens we'll change the count to one. To summarize, we count vowel

29
00:02:07,314 --> 00:02:11,966
groups but not a final e and if that count gives us zero, we change it one. Now

30
00:02:11,966 --> 00:02:16,296
on, just seeing the debugger in action. Open the syllable counter program in

31
00:02:16,296 --> 00:02:20,427
BlueJ, and I really suggest that you do that with me. Click in this column here

32
00:02:20,427 --> 00:02:24,380
next to the first line of the main method and you'll see a tiny stop sign,

33
00:02:24,380 --> 00:02:30,100
that's a break point. Now, run the program in the usual way, and now the

34
00:02:30,100 --> 00:02:36,692
debugger wakes up. We've hit this break point and what you see over here is the

35
00:02:36,692 --> 00:02:43,278
console that controls the debugger. These buttons here, let you step through

36
00:02:43,278 --> 00:02:47,685
the program. Let's try it out. We'll click on step and you can see that we're

37
00:02:47,685 --> 00:02:52,705
now in the next line. We click on step again, oh, now it has produced the

38
00:02:52,705 --> 00:02:58,770
output here. And we're back where the little arrow is. Now when we step nothing

39
00:02:58,770 --> 00:03:03,047
seems to be happening, the arrow is gone. That's because right now, we're

40
00:03:03,047 --> 00:03:06,584
reading input. Let's look at the terminal window and here it is waiting for the

41
00:03:06,584 --> 00:03:11,634
input. I'll just apply it. Now I hit Enter, and you can see the debugger window

42
00:03:11,634 --> 00:03:17,844
again. And back here our program has advanced by one step. Let's bring this to

43
00:03:17,844 --> 00:03:22,003
the front. And we're past here. Now to make sure that you are trying this at

44
00:03:22,003 --> 00:03:27,512
home, let me ask you to do exactly what I did. Set the break point here, enter

45
00:03:27,512 --> 00:03:31,867
hello yellow peach, keep signal stepping. And I'd like you to tell me, how many

46
00:03:31,867 --> 00:03:35,332
times are you hitting this line, the call to the constructor, before you get

47
00:03:35,332 --> 00:03:37,540
out of the loop.
