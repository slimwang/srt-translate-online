1
00:00:00,000 --> 00:00:02,519
So we invented a third type of cache,

2
00:00:02,519 --> 00:00:06,994
which is called virtually indexed and
physically tagged cache,

3
00:00:06,994 --> 00:00:11,650
which is trying to combine the
advantages of the two types of cache.

4
00:00:11,650 --> 00:00:12,897
It works like this.

5
00:00:12,897 --> 00:00:17,830
We start with the virtual address,
we break it down into the cache offset,

6
00:00:17,830 --> 00:00:21,440
index and tag, but we don't use the tag.

7
00:00:21,440 --> 00:00:25,540
We do use the index bits
from the virtual address

8
00:00:25,540 --> 00:00:28,040
to find the set that
we want in the cache.

9
00:00:28,040 --> 00:00:31,927
We read the valid bits and
the tags here.

10
00:00:31,927 --> 00:00:36,547
But meanwhile, we use the page
number from the virtual address to

11
00:00:36,547 --> 00:00:39,404
access the TLB and get the frame number.

12
00:00:39,404 --> 00:00:42,249
So now that we got the physical address,

13
00:00:42,249 --> 00:00:47,368
we perform the tag check using the
physical address not the virtual one.

14
00:00:47,368 --> 00:00:50,741
This is why this is
called a virtual index.

15
00:00:50,741 --> 00:00:53,362
The index bits come from
the virtual address.

16
00:00:53,362 --> 00:00:57,101
The tag bits come from
the physical address, cache.

17
00:00:57,101 --> 00:01:01,550
And from here, it proceeds normally,
we know whether we have a hit and so on.

18
00:01:01,550 --> 00:01:03,510
So how does this help?

19
00:01:03,510 --> 00:01:09,349
Note that the cache array and the TLB
access are proceeding in parallel.

20
00:01:09,349 --> 00:01:13,763
So if the TLB is fast enough and
usually it is because it's small,

21
00:01:13,763 --> 00:01:16,988
the hit time will be equal
to the cache hit time.

22
00:01:16,988 --> 00:01:21,153
It's actually the maximum of the two,
which is usually the cache hit time.

23
00:01:21,153 --> 00:01:25,482
So this is just like the virtual or
virtual index virtually tagged cache and

24
00:01:25,482 --> 00:01:26,314
we like that.

25
00:01:26,314 --> 00:01:30,918
We get the speed advantage of
the virtual caches with this type of

26
00:01:30,918 --> 00:01:31,778
cache too.

27
00:01:31,778 --> 00:01:34,521
Do we need to flush on a context switch?

28
00:01:34,521 --> 00:01:35,909
Well, it turns out no.

29
00:01:35,909 --> 00:01:38,575
Because if we switch the process, so

30
00:01:38,575 --> 00:01:43,738
that virtual addresses correspond
to different physical addresses.

31
00:01:43,738 --> 00:01:47,658
What we find in the cache will be
checked against the actual physical

32
00:01:47,658 --> 00:01:48,290
address.

33
00:01:48,290 --> 00:01:53,430
So the virtual address in another
process will map maybe to the same set.

34
00:01:53,430 --> 00:01:57,717
But once it maps there,
the actual tag is not going to match,

35
00:01:57,717 --> 00:02:00,704
because these two have different tags.

36
00:02:00,704 --> 00:02:06,554
So this is like the physical cache and
is nice, but what about aliasing?

37
00:02:06,554 --> 00:02:11,481
Recall that aliasing happens,
because multiple virtual addresses in

38
00:02:11,481 --> 00:02:15,839
the same address space might map
to the same physical address.

39
00:02:15,839 --> 00:02:18,706
But because we do virtual
access to the cache,

40
00:02:18,706 --> 00:02:22,611
these addresses might end up in
different places in the cache.

41
00:02:22,611 --> 00:02:25,848
Thus, right to one will
not be seen by the other.

42
00:02:25,848 --> 00:02:30,427
It turns out that there are no aliasing
problems in the virtually index physical

43
00:02:30,427 --> 00:02:33,500
tagged cache,
as long as the cache is small enough and

44
00:02:33,500 --> 00:02:36,597
it has to do with where
are the index bits coming from.

45
00:02:36,597 --> 00:02:42,700
So this is very, very nice, because it
basically gives us the correctness.

46
00:02:42,700 --> 00:02:46,555
The no flush on context switch of
the physical caches with the hit time

47
00:02:46,555 --> 00:02:47,885
of the virtual caches,

48
00:02:47,885 --> 00:02:51,890
but let's figure out what do we need
to do in order to not have aliasing.
