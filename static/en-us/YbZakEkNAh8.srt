1
00:00:00,190 --> 00:00:03,570
Let's see the simplex algorithm
in action on an example

2
00:00:03,570 --> 00:00:05,520
from the first part of the lesson.

3
00:00:05,520 --> 00:00:08,100
I've changed the variable
names here a little bit.

4
00:00:08,100 --> 00:00:13,250
So we'll let x1 correspond to the number
of minutes spent doing step aerobics,

5
00:00:13,250 --> 00:00:17,790
and we'll let x2 correspond to
the number of minutes spent stretching.

6
00:00:17,790 --> 00:00:22,780
I've also introduced a slack variable,
x3, on this constraint for

7
00:00:22,780 --> 00:00:25,450
the length of the workout.

8
00:00:25,450 --> 00:00:28,400
And a surplus variable, x4, for

9
00:00:28,400 --> 00:00:34,490
how many minutes of extra stretching
that our actor decides to do.

10
00:00:34,490 --> 00:00:39,450
And together, these allow me to trade
the inequality constraints we had before

11
00:00:39,450 --> 00:00:41,460
for equality constraints.

12
00:00:41,460 --> 00:00:45,550
Let's suppose that our current
solution is down here in this corner,

13
00:00:45,550 --> 00:00:49,700
meaning that x1 is 0, x2 is 5.

14
00:00:49,700 --> 00:00:56,740
And our slack variable here will be 35,
and our surplus variable here will be 0.

15
00:00:56,740 --> 00:01:02,067
The basic variables here are clearly
x2 and x3, and the sub matrix

16
00:01:02,067 --> 00:01:07,840
B of the constraint matrix A consists
of these two columns here.

17
00:01:07,840 --> 00:01:09,720
Recall that we want to solve for

18
00:01:09,720 --> 00:01:12,920
these basic variables and
essentially eliminate them.

19
00:01:13,920 --> 00:01:20,250
And here, we see that we have x2 =
x4 + 5, from this equation here.

20
00:01:20,250 --> 00:01:24,852
And x3 then must be 35
minus x1 minus x4, and

21
00:01:24,852 --> 00:01:29,600
of course,
these need to remain non-negative.

22
00:01:29,600 --> 00:01:32,947
Substituting these into
the objective function,

23
00:01:32,947 --> 00:01:36,368
I now get this in terms of
the non-basic variables,

24
00:01:36,368 --> 00:01:40,987
the ones that I'm thinking about
moving into the basis, x1 and x4.

25
00:01:40,987 --> 00:01:47,040
And actually, both of these have
positive entries in the rd matrix.

26
00:01:47,040 --> 00:01:51,910
rd here just has 12 and
4 as its coefficients.

27
00:01:51,910 --> 00:01:53,500
Well, arbitrarily, we'll go ahead and

28
00:01:53,500 --> 00:01:57,948
choose x4 as the variable
to bring into the basis.

29
00:01:57,948 --> 00:02:02,530
So essentially,
x1 gets automatically set to 0, and

30
00:02:02,530 --> 00:02:05,250
these here then become the constraints.

31
00:02:05,250 --> 00:02:10,430
The negative sign here means that I
could send x4 as big as I wanted to,

32
00:02:10,430 --> 00:02:13,670
and that wouldn't affect
this constraint at all.

33
00:02:13,670 --> 00:02:18,540
Here however, the coefficient on x4
is positive, so we do need to worry

34
00:02:18,540 --> 00:02:23,940
about this constraint, and that
limits how much bigger I can make x4.

35
00:02:23,940 --> 00:02:26,595
Only up to 35.

36
00:02:26,595 --> 00:02:31,870
The fact that this constraint goes
tight implies that x3 became 0.

37
00:02:31,870 --> 00:02:36,700
So x3 should go out of the basis and
x4 should come in.

38
00:02:36,700 --> 00:02:41,700
Graphically, this corresponds to moving
from this point down here to this one up

39
00:02:41,700 --> 00:02:47,030
here, with these being the new
values for my x variables.

40
00:02:47,030 --> 00:02:50,170
And then I would repeat this process for
the new basis, and

41
00:02:50,170 --> 00:02:54,720
eventually come down this edge
here to the optimal solution.
