1
00:00:00,300 --> 00:00:06,899
So what goes into a regular expression? Well, we saw one example where the star was a special character,

2
00:00:06,900 --> 00:00:17,999
and where, for example, A* represents "a," "aa," "aaa," and so on, as well as the empty string,

3
00:00:18,000 --> 00:00:20,732
because it could be zero occurrences of A.

4
00:00:20,733 --> 00:00:27,332
So let's make a list of the special characters, examples of their use, and what they match.

5
00:00:27,333 --> 00:00:32,232
So we've seen the asterisk. Another special character is the question mark.

6
00:00:32,232 --> 00:00:39,999
So "A?" matches either the empty string or the single string A, and nothing else.

7
00:00:40,000 --> 00:00:45,799
So it means an optional occurrence of whatever comes before. In this case, an A.

8
00:00:45,800 --> 00:00:48,432
It could be a B, a C, whatever.

9
00:00:48,433 --> 00:00:56,266
Another special character is the dot or period, and that stands by itself. It doesn't have a two-character sequence.

10
00:00:56,267 --> 00:01:08,399
And so for example, a dot can match the character A or the character B or C or 7 or exclamation point,

11
00:01:08,400 --> 00:01:10,599
or any other single character.

12
00:01:10,600 --> 00:01:15,732
But it doesn't match the empty string, and it doesn't match a multiple character string.

13
00:01:15,733 --> 00:01:23,466
We're almost done. There's only two more special characters in this subset of regular expressions that I want to talk about.

14
00:01:23,467 --> 00:01:29,399
Languages like Python have very complicated patterns that they match against for regular expression.

15
00:01:29,400 --> 00:01:33,399
Some of them go beyond regular to irregular expressions.

16
00:01:33,400 --> 00:01:40,499
But we're going to talk about a specific subset that we can write a program for to do regular expression matching.

17
00:01:40,500 --> 00:01:43,132
And it's only going to have five special characters.

18
00:01:43,133 --> 00:01:49,932
So these three, then the up arrow, again, is a character that's by itself, not a two-character sequence.

19
00:01:49,933 --> 00:01:58,599
So the up arrow by itself matches only right at the beginning of the line, or, that is, the beginning of the text that we're matching against.

20
00:01:58,600 --> 00:02:06,199
And so it's not much use by itself, but in conjunction with another character, it can limit the match to the beginning.

21
00:02:06,200 --> 00:02:20,866
So for example, up arrow-B matches against any string that starts with a B, like "ba" or "bb" or anything else where B is the first character,

22
00:02:20,867 --> 00:02:26,099
but it doesn't match something where the B is in the middle, like ABC,

23
00:02:26,100 --> 00:02:31,399
Whereas B by itself would match against ABC in the middle.

24
00:02:31,400 --> 00:02:43,199
And finally, $ is the convention for matching at the end. So, A$ matches "ba", but doesn't match, say,

25
00:02:43,200 --> 00:02:46,166
"ab" or anything else where the A isn't at the end.

26
00:02:46,167 --> 00:02:51,999
So let's correctly strike these out to say that these are not matches for these two patterns.

27
00:02:52,000 --> 00:02:55,299
Okay, so that's it. These are the five special characters.

28
00:02:55,300 --> 00:03:01,899
What else goes into a regular expression? Well, the empty string, and the only example of the empty string is the empty string.

29
00:03:01,900 --> 00:03:04,799
And what does that match? Only the empty string.

30
00:03:04,800 --> 00:03:11,932
Then any character that's not one of these five, like an A, that matches exactly the character itself.

31
00:03:11,933 --> 00:03:14,932
A matches A, B matches B, and so on.

32
00:03:14,933 --> 00:03:24,099
And finally, any concatenation of two regular expressions matches those two one followed by another.

33
00:03:24,100 --> 00:03:33,866
So, "ba", that matches "ba", but doesn't match other sequences, like "aa" or "bb".

34
00:03:33,867 --> 00:03:40,032
Okay. So that's my language for regular expressions. Five special characters, empty character, one character,

35
00:03:40,033 --> 00:03:43,767
or two regular expressions concatenated to each other.
