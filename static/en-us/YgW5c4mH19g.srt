1
00:00:00,000 --> 00:00:05,000
For this procedure, we're going to write a converter

2
00:00:05,000 --> 00:00:10,000
which takes a dictionary and a date as its inputs.

3
00:00:10,000 --> 00:00:16,000
The dictionary converts the number of the month to the name of the month,

4
00:00:16,000 --> 00:00:20,000
and the date is in the format month/day/year,

5
00:00:20,000 --> 00:00:23,000
which I've written up here so we don't forget the order.

6
00:00:23,000 --> 00:00:29,000
The output should be in the form day, name of the month, year.

7
00:00:29,000 --> 00:00:32,000
How are we going to split up month, day, and year?

8
00:00:32,000 --> 00:00:37,000
The way we're going to do that is to look for the forward slashes in the string.

9
00:00:37,000 --> 00:00:45,000
The first forward slash we can find at the position between the month and the day.

10
00:00:45,000 --> 00:00:49,000
Everything up to the first forward slash is the month.

11
00:00:49,000 --> 00:00:58,000
The month is equal to everything up to the first slash, and that's exclusive.

12
00:00:58,000 --> 00:01:01,000
It's doesn't include the slash itself.

13
00:01:01,000 --> 00:01:07,000
The second slash we can find by looking from the first slash onwards.

14
00:01:07,000 --> 00:01:12,000
We look at the position one after the first slash to find the second slash.

15
00:01:12,000 --> 00:01:14,000
We know it's somewhere there.

16
00:01:14,000 --> 00:01:17,000
We can't say it's exactly two steps after or one step,

17
00:01:17,000 --> 00:01:22,000
because the day could be one digit or two digits.

18
00:01:22,000 --> 00:01:28,000
The day is between the first slash and the second slash.

19
00:01:28,000 --> 00:01:34,000
Note, that we have to add 1 onto first because we want to go 1 position after the slash

20
00:01:34,000 --> 00:01:40,000
and it's inclusive for the first place here, and exclusive for the second.

21
00:01:40,000 --> 00:01:48,000
Then year is the date from 1 position after the second forward slash.

22
00:01:48,000 --> 00:01:52,000
So now we've got the day, the month, and the year.

23
00:01:52,000 --> 00:01:57,000
We need to turn it into the format to return it.

24
00:01:57,000 --> 00:02:05,000
We're going return the string which is day and the space, then the month, and then the year.

25
00:02:05,000 --> 00:02:08,000
Now month we need to look up in our dictionary.

26
00:02:08,000 --> 00:02:13,000
We're going to look it up in the dictionary, but we can't just put month in straight away,

27
00:02:13,000 --> 00:02:21,000
because month is a string and the dictionary uses a number as it's index.

28
00:02:21,000 --> 00:02:24,000
We have to turn the string into an integer.

29
00:02:24,000 --> 00:02:30,000
Then we need a space again, and finally, the year on the end.

30
00:02:30,000 --> 00:02:32,000
That's the first method.

31
00:02:32,000 --> 00:02:35,000
The second method is much shorter.

32
00:02:35,000 --> 00:02:40,000
It uses a procedure you've seen before but something that you may not know about that procedure.

33
00:02:40,000 --> 00:02:43,000
I'll show it to you just for completeness' sake.

34
00:02:43,000 --> 00:02:49,000
We can get the month, the day, and the year by splitting the date

35
00:02:49,000 --> 00:02:52,000
and using an input for that split.

36
00:02:52,000 --> 00:02:56,000
Now, split without an input just splits on white space.

37
00:02:56,000 --> 00:03:00,000
Split with input splits on whatever that input is.

38
00:03:00,000 --> 00:03:05,000
Date.split will split into month, day, and year.

39
00:03:05,000 --> 00:03:09,000
We can use a triple assignment to get those out straight away.

40
00:03:09,000 --> 00:03:15,000
Then we just need to return exactly the same as we returned before.

41
00:03:15,000 --> 00:03:18,000
That's a very simple way of writing it, which does exactly the same as the first one.
