1
00:00:00,050 --> 00:00:02,220
So, we know we need
to create layouts and assets

2
00:00:02,220 --> 00:00:05,520
optimized for different 
screen pixel densities and sizes.

3
00:00:05,520 --> 00:00:10,100
So, now's a great time to introduce you
to the Android resource framework.

4
00:00:10,650 --> 00:00:15,440
All externalized Android resources,
everything from strings to layouts,

5
00:00:15,440 --> 00:00:17,220
to drawables and animations,

6
00:00:17,220 --> 00:00:20,620
are all stored within 
your project's res folder.

7
00:00:20,620 --> 00:00:23,640
You've already been putting
your strings in the strings.<i>xml</i> file

8
00:00:23,640 --> 00:00:25,380
stored in the values folder.

9
00:00:25,380 --> 00:00:28,680
And you've been putting 
your layouts into the layout folder.

10
00:00:28,680 --> 00:00:31,730
And you know to reference
your resources using <i>@</i> notation

11
00:00:31,730 --> 00:00:34,270
within both your XML 
or within the code,

12
00:00:34,270 --> 00:00:38,527
and then at runtime, Android will insert, 
the appropriate resource for you.

13
00:00:38,537 --> 00:00:40,040
So far, so good.

14
00:00:40,040 --> 00:00:42,825
And here's where things 
get a little more interesting.

15
00:00:42,825 --> 00:00:46,550
Android allows you to create 
alternative versions of every resource

16
00:00:46,550 --> 00:00:50,010
by placing them into folders
with different qualifiers.

17
00:00:50,010 --> 00:00:53,350
We separate each of those using a hyphen.

18
00:00:53,350 --> 00:00:55,730
And we add those qualifiers 
based on anything

19
00:00:55,730 --> 00:01:00,140
from language and/or dialect, 
to whether the device is docked,

20
00:01:00,140 --> 00:01:03,300
the type of touch screen,
the pixel density of the display,

21
00:01:03,300 --> 00:01:06,720
the orientation of the screen, 
and most importantly,

22
00:01:06,720 --> 00:01:10,340
for a responsive design in particular, 
the smallest available screen width

23
00:01:10,340 --> 00:01:12,715
which you can support with that layout.

24
00:01:12,715 --> 00:01:15,980
At runtime, Android will check 
the current device configuration,

25
00:01:15,980 --> 00:01:19,750
it's language, it's screen size, 
pixel density, everything,

26
00:01:19,750 --> 00:01:23,760
and then load the right layout strings 
and drawables accordingly.

27
00:01:23,760 --> 00:01:26,130
And you can even chain
these qualifiers together.

28
00:01:26,130 --> 00:01:29,380
For example, to create a different layout 
for German language users,

29
00:01:29,380 --> 00:01:32,900
to account for all of those 
really long German words,

30
00:01:32,900 --> 00:01:37,330
or more typically for a combination
of screen size and device configuration.

31
00:01:37,330 --> 00:01:39,650
Now keep in mind, 
that many of these values

32
00:01:39,650 --> 00:01:41,410
can change at runtime.

33
00:01:41,410 --> 00:01:44,270
The most common change
being that of orientation.

34
00:01:44,270 --> 00:01:46,200
And it's for this reason,
that Android activities

35
00:01:46,200 --> 00:01:50,920
are destroyed and recreated, whenever
the device configuration changes.

36
00:01:50,920 --> 00:01:53,770
And that's because the layout 
and all of the resources within it

37
00:01:53,770 --> 00:01:56,220
could be completely different 
based on something

38
00:01:56,220 --> 00:01:59,080
as simple as screen orientation change.

39
00:01:59,080 --> 00:02:01,966
Now it's good practice as well, 
to localize your apps

40
00:02:01,966 --> 00:02:04,552
and provide translated strings
for all of your users

41
00:02:04,552 --> 00:02:06,310
using this mechanism.

42
00:02:06,310 --> 00:02:09,660
And that's a task made a lot easier,
thanks to Google Play Publisher site

43
00:02:09,660 --> 00:02:11,850
that can offer you this service.

44
00:02:11,850 --> 00:02:15,060
It's also a really good idea 
to provide different drawables

45
00:02:15,060 --> 00:02:18,770
at the appropriate pixel density, 
so you can get a nice crisp image

46
00:02:18,770 --> 00:02:20,970
on every device.

47
00:02:20,970 --> 00:02:23,120
And when it comes to providing 
alternative layouts,

48
00:02:23,120 --> 00:02:25,930
Android has gone through
a few alternative models,

49
00:02:25,930 --> 00:02:29,266
starting in the early days, 
with this screen buckets idea

50
00:02:29,266 --> 00:02:31,772
of small, normal large and extra large.

51
00:02:31,772 --> 00:02:35,810
But, since Android 3.2, 
the new smallest width qualifier

52
00:02:35,810 --> 00:02:39,830
has given us much more 
fine grained control over our layouts.
