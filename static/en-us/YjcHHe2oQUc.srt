1
00:00:00,000 --> 00:00:03,000
Fortunately, the answer is the third one.

2
00:00:03,000 --> 00:00:08,000
What you need to do to prove an upper bound are on the hardest of a problem is

3
00:00:08,000 --> 00:00:12,000
if you can find an algorithm for example that solves the problem--provably solves the problem

4
00:00:12,000 --> 00:00:17,000
and provably into the fourth time, then--well, we don't know if a faster algorithm exists

5
00:00:17,000 --> 00:00:20,000
but we know it's at least solvable in end to the fourth.

6
00:00:20,000 --> 00:00:24,000
So the big O or Î that we get from that is exactly the upper bound.

7
00:00:24,000 --> 00:00:29,000
These sorts of things are really helpful to do--well, actually so this first one is really helpful to do,

8
00:00:29,000 --> 00:00:32,000
running on a bunch of inputs, look at the shape of the graph.

9
00:00:32,000 --> 00:00:37,000
I can give you a lot of insight that might help you decide what you want to prove about the algorithm,

10
00:00:37,000 --> 00:00:39,000
but this itself doesn't really prove anything.

11
00:00:39,000 --> 00:00:46,000
Running something on all possible inputs is impossible, unless it's a problem where the inputs

12
00:00:46,000 --> 00:00:49,000
are constrained, so there's only a few possible inputs.

13
00:00:49,000 --> 00:00:54,000
Generally, the running time scales with the size of the input and it can scale arbitrarily large.

14
00:00:54,000 --> 00:00:59,000
And yeah, actually studying algorithms and how to analyze it is exactly what we're doing in this class
