1
00:00:00,000 --> 00:00:04,390
So, here's the correct answers. The first one, 2^n*log(n).

2
00:00:04,390 --> 00:00:10,260
That is clearly an exponential running time because 2^n is exponential.

3
00:00:10,260 --> 00:00:14,100
Now, what about the next one, 2^log(n).

4
00:00:14,100 --> 00:00:19,810
Well, 2^log(n) is actually O(n) because...

5
00:00:19,810 --> 00:00:24,560
So, having the logarithm and exponent, well, actually cancel out the exponents. So, that is O(n).

6
00:00:24,560 --> 00:00:28,570
So, although it might look exponential, if you don't look closely enough,

7
00:00:28,570 --> 00:00:30,680
that is actually a polynomial running time.

8
00:00:30,680 --> 00:00:37,380
Now, O(1.00001^n), that is going to be a very, very slowly growing function,

9
00:00:37,380 --> 00:00:39,160
but nevertheless, it's exponential.

10
00:00:39,160 --> 00:00:46,290
So, this is the correct answer, and n^1000, that's basically the opposite.

11
00:00:46,290 --> 00:00:48,410
It's a polynomial that will grow rapidly fast

12
00:00:48,410 --> 00:00:51,380
and you would never want an algorithm actually with that running time,

13
00:00:51,380 --> 00:00:53,760
but nevertheless, it is a polynomial running time.

14
00:00:53,760 --> 00:00:59,500
Now, this is algorithm--well, you already figured that out I guess because it's 2^n*n²,

15
00:00:59,500 --> 00:01:02,830
that is an exponential running time algorithm, that's why it's really bad.

16
00:01:02,830 --> 00:01:05,880
Now, as you see with those two examples here,

17
00:01:05,880 --> 00:01:10,850
there's something to be said about saying that we consider polynomial running time to be acceptable

18
00:01:10,850 --> 00:01:13,500
and exponential running time to unacceptable,

19
00:01:13,500 --> 00:01:17,200
but in general, what you will find is that polynomial time algorithms

20
00:01:17,200 --> 00:01:21,420
tend to have a running time of n² or n³.

21
00:01:21,420 --> 00:01:24,320
So, there is not really any algorithm that I would know of,

22
00:01:24,320 --> 00:01:26,750
at least now that make sense that has a running time like this.

23
00:01:26,750 --> 00:01:31,950
So, it's kind of okay from empirical experience to call a polynomial time algorithm,

24
00:01:31,950 --> 00:01:34,250
actually one with an acceptable running time,

25
00:01:34,250 --> 00:01:37,140
and the same thing is with exponential running time.

26
00:01:37,140 --> 00:01:40,340
So, when you have an exponential time algorithm,

27
00:01:40,340 --> 00:01:47,190
you will not have one that has in the base of figure like 1.00001^n.

28
00:01:47,190 --> 00:01:50,590
For some algorithms, you might have 1.1 or 1.2,

29
00:01:50,590 --> 00:01:52,940
but even then, it's a fairly rapidly growing function.

30
00:01:52,940 --> 99:59:59,999
So, it's also okay to call exponential running time algorithms unacceptable in general.
