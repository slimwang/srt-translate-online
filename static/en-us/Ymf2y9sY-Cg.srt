1
00:00:00,522 --> 00:00:01,138
All right,

2
00:00:01,138 --> 00:00:05,088
now that we've got the first demo loaded
up let's see what we've got here.

3
00:00:05,088 --> 00:00:08,914
Well first what we've got is a README
file that actually contains the text

4
00:00:08,914 --> 00:00:11,640
version of everything I've said so
far this level.

5
00:00:11,640 --> 00:00:14,542
So if you need a refresher,
well you know where to find one.

6
00:00:14,542 --> 00:00:16,402
To find the real meat
of the demo though,

7
00:00:16,402 --> 00:00:18,768
let's open up the the TODO
pane down at the bottom.

8
00:00:18,768 --> 00:00:21,589
Find a nice entry that says
TODO: Start here to learn more about

9
00:00:21,589 --> 00:00:24,090
ApplicationListener and ShapeRenderer.

10
00:00:24,090 --> 00:00:26,163
Sounds good.

11
00:00:26,163 --> 00:00:30,604
Let's close the rest of these panes so
we have some room to work with.

12
00:00:30,604 --> 00:00:32,491
If you open up this file
on your own machine,

13
00:00:32,491 --> 00:00:35,310
you may notice that there's a whole
bunch more comments in here.

14
00:00:35,310 --> 00:00:39,518
And again, that's more or less the text
version of what I'm about to tell you.

15
00:00:39,518 --> 00:00:42,639
So the entry point into your
code that you write for

16
00:00:42,639 --> 00:00:46,216
a game is a class that
implements ApplicationListener.

17
00:00:46,216 --> 00:00:50,558
ApplicationListener has six required
methods that we'll walk through.

18
00:00:50,558 --> 00:00:54,403
We've also inserted logging messages
that fire when each of those methods

19
00:00:54,403 --> 00:00:55,021
is called.

20
00:00:55,021 --> 00:00:58,015
So in this demo, first thing,
we're setting up a tag so

21
00:00:58,015 --> 00:01:00,131
that we can identify our log messages.

22
00:01:00,131 --> 00:01:03,194
And then we declare
a private shape renderer.

23
00:01:03,194 --> 00:01:06,875
Create is the first one of the required
methods on an application listener and

24
00:01:06,875 --> 00:01:10,990
that's basically where you do anything
you do in a normal constructor.

25
00:01:10,990 --> 00:01:14,028
This will get called when
the host application is ready for

26
00:01:14,028 --> 00:01:16,263
your ApplicationListener to come alive.

27
00:01:16,263 --> 00:01:19,503
And of course, this is where we
initialize our shape renderer.

28
00:01:19,503 --> 00:01:22,678
Immediately after our
application listener is create,

29
00:01:22,678 --> 00:01:26,260
resize will be called to let
us know how big the screen is.

30
00:01:26,260 --> 00:01:28,810
We won't be doing anything
with resize just for now, but

31
00:01:28,810 --> 00:01:32,770
next level we will be using it to make
sure our camera doesn't go out of whack.

32
00:01:32,770 --> 00:01:35,609
Next, we have the dispose method.

33
00:01:35,609 --> 00:01:37,539
Now, you might be thinking this is Java,

34
00:01:37,539 --> 00:01:39,647
don't we get automatic
memory management?

35
00:01:39,647 --> 00:01:42,259
I thought garbage
collection was a thing.

36
00:01:42,259 --> 00:01:46,330
Well, while it's true that Java can
usually be relied upon to clean up

37
00:01:46,330 --> 00:01:50,276
your memory for you, a garbage
collection event takes a long time.

38
00:01:50,276 --> 00:01:53,936
And when you have a game that trying
to render itself 60 times a second,

39
00:01:53,936 --> 00:01:57,657
a garbage collection event can easily
make you drop a whole ton of frames.

40
00:01:57,657 --> 00:02:01,314
That makes it look like the game is
just frozen and users don't like that.

41
00:02:01,314 --> 00:02:05,109
So, there's a number of places where
we have to manage our own memory.

42
00:02:05,109 --> 00:02:08,811
In this case, when our application
listener receives a call of dispose,

43
00:02:08,811 --> 00:02:11,510
we should dispose of any
resources that we are using.

44
00:02:12,700 --> 00:02:14,700
All right, the render method.

45
00:02:14,700 --> 00:02:16,930
This is the real heart of the operation.

46
00:02:16,930 --> 00:02:20,139
This gets called every time
our game should draw itself.

47
00:02:21,140 --> 00:02:25,077
So, you know how I said we didn't
have to talk to OpenGL directly?

48
00:02:25,077 --> 00:02:27,468
Well, that's mostly true.

49
00:02:27,468 --> 00:02:30,930
These two lines clear
the previous screen.

50
00:02:30,930 --> 00:02:34,588
These lines get repeated pretty much
verbatim at the start of every render

51
00:02:34,588 --> 00:02:36,251
method throughout this course.

52
00:02:36,251 --> 00:02:39,791
The first line tells OpenGL, hey,
what's the background color?

53
00:02:39,791 --> 00:02:42,310
In this case it's black, that's opaque.

54
00:02:42,310 --> 00:02:46,465
And the second line actually tells open
GL to go ahead and clear the screen.

55
00:02:46,465 --> 00:02:50,105
All right, then we tell shape
renderer to start a new batch and

56
00:02:50,105 --> 00:02:52,492
we pass in the shape
type we want to draw.

57
00:02:52,492 --> 00:02:54,628
In this case we want to draw points.

58
00:02:54,628 --> 00:02:57,993
Then we draw point at location 100 100.

59
00:02:57,993 --> 00:03:01,927
So that's going to be 100 pixels
up from the bottom of the screen,

60
00:03:01,927 --> 00:03:04,677
100 pixels right of
the left of the screen.

61
00:03:04,677 --> 00:03:08,400
And then, we've got to remember
to end our shape renderer batch.

62
00:03:08,400 --> 00:03:12,470
Pause is the second to last of the
required application listener methods.

63
00:03:12,470 --> 00:03:16,564
And it gets called right before
our application is disposed of.

64
00:03:16,564 --> 00:03:20,840
It can also be called when our app goes
offscreen and is no longer active.

65
00:03:20,840 --> 00:03:24,220
This will usually happen in Android
when you hit the home button.

66
00:03:24,220 --> 00:03:28,659
Pauses where we want to save anything we
want to persist about the game like how

67
00:03:28,659 --> 00:03:30,519
many lives the player has left.

68
00:03:30,519 --> 00:03:34,021
Resume gets called if the game comes
back to life after being paused.

69
00:03:34,021 --> 00:03:36,802
Again this is pretty much
an android specific thing and

70
00:03:36,802 --> 00:03:38,862
we'll talk much more about this later.

71
00:03:38,862 --> 00:03:43,540
All right so we expect this code to
draw a single point to the screen.

72
00:03:43,540 --> 00:03:46,465
Let's give it a try.

73
00:03:46,465 --> 00:03:49,086
All right, it's not much,
but there we go.

74
00:03:49,086 --> 00:03:51,419
We've got a single point illuminated.

75
00:03:51,419 --> 00:03:54,350
It's kind of pretty kind of
like a star in the night sky.
