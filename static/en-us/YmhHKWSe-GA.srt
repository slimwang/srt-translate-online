1
00:00:00,400 --> 00:00:05,150
Now let's talk about the mechanisms that are there in Exokernel for

2
00:00:05,150 --> 00:00:10,260
implementing these secure bindings. There are three methods. The first method

3
00:00:10,260 --> 00:00:15,340
is Hardware mechanisms. And I gave you this example of a TLB entry. Other

4
00:00:15,340 --> 00:00:20,920
examples of hardware mechanisms include. Getting a physical page frame from

5
00:00:20,920 --> 00:00:25,450
exokernel or a portion of the frame buffer that is

6
00:00:25,450 --> 00:00:31,730
being used by the display. These are all examples of specific hardware resources

7
00:00:31,730 --> 00:00:38,100
that can be requested by the library operating system and can be bound to that

8
00:00:38,100 --> 00:00:41,490
library operating system by exokernel. And exported

9
00:00:41,490 --> 00:00:43,610
to the library operating system as an

10
00:00:43,610 --> 00:00:46,830
encrypted key, and once the library operating

11
00:00:46,830 --> 00:00:50,790
system has the encrypted key for that resource,

12
00:00:50,790 --> 00:00:55,950
it can use that any time it wants. The second mechanism that exokernel

13
00:00:55,950 --> 00:00:59,150
has is software caching on behalf of

14
00:00:59,150 --> 00:01:02,690
each library operating system, specifically the shadow

15
00:01:02,690 --> 00:01:09,620
TLB. Or caching the hardware TLB in a software cache for each library operating

16
00:01:09,620 --> 00:01:15,820
system is to avoid the context switch penalty when exokernel switches from one

17
00:01:15,820 --> 00:01:19,490
library operating system to another. Basically, what

18
00:01:19,490 --> 00:01:21,690
will happen is that at the point

19
00:01:21,690 --> 00:01:25,350
of context switch, exokernel will dump the

20
00:01:25,350 --> 00:01:28,720
hardware TLB into a software TLB native

21
00:01:28,720 --> 00:01:31,860
structure that is associated with that specific

22
00:01:31,860 --> 00:01:34,960
library operating system. And similarly load the

23
00:01:34,960 --> 00:01:41,070
software TLB of the library operating system to which it is switching to into

24
00:01:41,070 --> 00:01:42,995
the hardware TLB. We will talk about

25
00:01:42,995 --> 00:01:46,100
these mechanism in much more detail shortly but

26
00:01:46,100 --> 00:01:51,780
at this point I wanted to mention that this is second mechanism that exists in

27
00:01:51,780 --> 00:01:55,320
exokernel for establishing a secure binding between

28
00:01:55,320 --> 00:01:59,280
a library operating system and the hardware. The

29
00:01:59,280 --> 00:02:03,460
third mechanism that exokernel has for establishing a

30
00:02:03,460 --> 00:02:06,650
secure binding on behalf of an operating system

31
00:02:06,650 --> 00:02:12,700
is downloading code into the kernel. This is simply to avoid border crossing by

32
00:02:12,700 --> 00:02:17,310
inserting specific code. That an operating system

33
00:02:17,310 --> 00:02:20,180
once executed on behalf of it. I

34
00:02:20,180 --> 00:02:25,900
gave you the example of the packet filter earlier. So that's an example of

35
00:02:25,900 --> 00:02:28,890
downloading according to the kernel that needs

36
00:02:28,890 --> 00:02:32,460
to be executed on behalf of a particular

37
00:02:32,460 --> 00:02:38,080
guest operating system. And if you think about it, this idea of downloading code

38
00:02:38,080 --> 00:02:44,290
into the kernel is very similar to the spin idea of extending

39
00:02:44,290 --> 00:02:46,740
the kernel with logical protection domains

40
00:02:46,740 --> 00:02:49,980
that I created and dynamically linked in.

41
00:02:49,980 --> 00:02:53,250
Similarly, in the exokernel world, a library

42
00:02:53,250 --> 00:02:57,600
operating system can, if allowed by exokernel.

43
00:02:57,600 --> 00:03:02,500
Securely download code into the kernel that will get executed under

44
00:03:02,500 --> 00:03:06,290
specific conditions that are laid down by the library operating system.
