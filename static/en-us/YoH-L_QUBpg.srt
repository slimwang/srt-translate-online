1
00:00:00,000 --> 00:00:05,000
Now one thing I noticed as I was writing all those test patterns is that functions like

2
00:00:05,000 --> 00:00:10,000
seq and alt are binary, which means if I want a sequence of 4 patterns,

3
00:00:10,000 --> 00:00:19,000
I have to have a sequence of (a, followed by the sequence of (b, followed by sequence of (c,d),

4
00:00:19,000 --> 00:00:21,000
and then I have to count the number of parens and get them right.

5
00:00:21,000 --> 00:00:27,000
It seems like it'd be much easier if I could just write sequence of (a, b, c, d).

6
00:00:27,000 --> 00:00:33,000
And we talked before about this idea of refactoring, that is changing your code

7
00:00:33,000 --> 00:00:37,000
to come up with a better interface that makes the program easier to use,

8
00:00:37,000 --> 00:00:39,000
and this looks like a good example.

9
00:00:39,000 --> 00:00:41,000
This would be a really convenient thing to do.

10
00:00:41,000 --> 00:00:43,000
Why did I write seq this way?

11
00:00:43,000 --> 00:00:49,000
Well, it was really convenient to be able to define sequence of (x,y)

12
00:00:49,000 --> 00:00:51,000
and only have to worry about exactly 2 cases.

13
00:00:51,000 --> 00:00:58,000
If I had done it like this, and I had to define sequence of an arbitrary number

14
00:00:58,000 --> 00:01:01,000
of arguments, then the definition of sequence would have been more complex.

15
00:01:01,000 --> 00:01:03,000
So it's understandable that I did this.

16
00:01:03,000 --> 00:01:05,000
I want to make a change, so let's draw a picture.

17
00:01:05,000 --> 00:01:11,000
Imagine this is my whole program and then somewhere here

18
00:01:11,000 --> 00:01:13,000
is the sequence part of my program.

19
00:01:13,000 --> 00:01:16,000
Now, of course, this has connections to other parts of the program.

20
00:01:16,000 --> 00:01:21,000
Sequence is called by and calls other components,

21
00:01:21,000 --> 00:01:22,000
and if we make a change to sequence,

22
00:01:22,000 --> 00:01:27,000
then we have to consider the effects of those changes everywhere else in which it's used.

23
00:01:27,000 --> 00:01:32,000
When we consider these changes, there are 2 factors we would like to break out.

24
00:01:32,000 --> 00:01:36,000
One is, is the change backward compatible?

25
00:01:36,000 --> 00:01:38,000
That is, if I make some change to sequence,

26
00:01:38,000 --> 00:01:41,000
am I guaranteed that however it was used before,

27
00:01:41,000 --> 00:01:45,000
that those uses are still good, and they don't have to be changed?

28
00:01:45,000 --> 00:01:49,000
If so, then my change will be local to sequence, and I won't have to be able to go

29
00:01:49,000 --> 00:01:51,000
all over the program changing it everywhere else.

30
00:01:51,000 --> 00:01:53,000
So that's a good property to have.

31
00:01:53,000 --> 00:01:58,000
So for example, in this case, if I change sequence so that it still accepted

32
00:01:58,000 --> 00:02:02,000
2 arguments like it did before, but it also accepts more than 2,

33
00:02:02,000 --> 00:02:06,000
than that would be a backwards compatible change as long as I didn't break anything else.

34
00:02:06,000 --> 00:02:11,000
And then the second factor is whether the change is internal or external.

35
00:02:11,000 --> 00:02:17,000
So am I changing something on the inside of sequence that doesn't effect all the callers,

36
00:02:17,000 --> 00:02:20,000
than that's okay. In general, that's going to be backwards compatible.

37
00:02:20,000 --> 00:02:26,000
Or am I changing something on the outside--changing the interface to the rest of the world?

38
00:02:26,000 --> 00:02:32,000
In this case, going from the binary version to this n_ary version,

39
00:02:32,000 --> 00:02:35,000
I can make it backwards compatible if I'm careful.

40
00:02:35,000 --> 00:02:38,000
It's definitely going to be both an internal and external change.

41
00:02:38,000 --> 00:02:42,000
So I'm going to have to do something to the internal part of sequence.

42
00:02:42,000 --> 00:02:46,000
And then I'm also changing the signature of the function, so I'm effecting the outside as well.

43
00:02:46,000 --> 00:02:50,000
I can make that effect in a backwards compatible way.

44
00:02:50,000 --> 00:02:55,000
Thinking about those 2 factors, what would be the better way to implement this call?

45
00:02:55,000 --> 00:03:00,000
Let's say we're dealing with the match-set version where we're returning a tuple,

46
00:03:00,000 --> 00:03:07,000
would it be better to return the tuple sequence (a, b, c, d)

47
00:03:07,000 --> 00:03:15,000
or the tuple sequence of (a, sequence of (b, sequence of (c, d)?

48
00:03:15,000 --> 99:59:59,999
Tell me which of these do you prefer from these criteria.
