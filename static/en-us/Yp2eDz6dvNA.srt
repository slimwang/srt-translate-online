1
00:00:00,000 --> 00:00:03,820
Now in some applications you might have the need for many small scans

2
00:00:03,820 --> 00:00:05,708
instead of 1 large scan.

3
00:00:05,708 --> 00:00:08,321
We've said before that when you launch a kernel on a GPU,

4
00:00:08,321 --> 00:00:10,551
you want to have lots of work to do in that kernel.

5
00:00:10,551 --> 00:00:13,871
So it doesn't make a lot of sense to launch a scan kernel separately

6
00:00:13,871 --> 00:00:16,293
on each one of these small scans.

7
00:00:16,293 --> 00:00:21,870
Instead, we're going to pack these scans together as segments inside 1 big array

8
00:00:21,870 --> 00:00:26,790
and then have a special scan operator that scans each of the segments independently.

9
00:00:26,790 --> 00:00:29,375
Typically to indicate where segments begin in an array

10
00:00:29,375 --> 00:00:34,108
we use a second array that has 1s for segment heads and 0s for non-segment heads.

11
00:00:34,108 --> 00:00:35,447
Let's do an example.

12
00:00:35,447 --> 00:00:38,388
So if you'll recall, exclusive sum scan on an array

13
00:00:38,388 --> 00:00:43,188
simply takes the running sum of all elements that come before the current element.

14
00:00:43,188 --> 00:00:47,766
So the sum of all elements before 8, for instance, is 28.

15
00:00:47,766 --> 00:00:51,533
Now what's different about a segmented scan is that we have a normal array,

16
00:00:51,533 --> 00:00:57,126
but what we do is we're marking with these large lines here boundaries between these segments.

17
00:00:57,126 --> 00:01:02,240
So when we call a segmented exclusive sum scan on this array,

18
00:01:02,240 --> 00:01:07,344
what it's going to do is take separate scans of each of these 3 segments.

19
00:01:07,344 --> 00:01:13,751
So the result is the scan of 1, 2, the scan of 3, 4, 5, and the scan of 6, 7, 8.

20
00:01:13,751 --> 00:01:18,921
And so the way that we're going to represent these segments is with segment heads

21
00:01:18,921 --> 00:01:24,415
so that we have a second array the same length as the input array that marks where segments begin.

22
00:01:24,415 --> 00:01:27,328
So a segment begins here with the number 1,

23
00:01:27,328 --> 00:01:31,337
a segment begins with the number 3, and a segment begins with the number 6.

24
00:01:31,337 --> 00:01:32,834
So to make sure we're on the same page,

25
00:01:32,834 --> 00:01:34,906
we're going to take the same array we did last time

26
00:01:34,906 --> 00:01:37,497
where we computed an exclusive segmented sum scan

27
00:01:37,497 --> 00:01:43,739
and instead you're going to fill in the result of an inclusive segmented sum scan on this input array.

28
00:01:43,739 --> 00:01:48,977
If you'll recall, an inclusive sum scan is going to be the sum of all elements

29
00:01:48,977 --> 00:01:52,223
that came before in the segment as well as the current element.

30
00:01:52,223 --> 00:01:54,350
So why don't you fill in these 8 boxes?
