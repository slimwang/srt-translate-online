1
00:00:00,410 --> 00:00:04,720
We're almost done with the proof
that satisfiability is NP complete.

2
00:00:04,720 --> 00:00:06,047
But before making the final arguments,

3
00:00:06,047 --> 00:00:08,360
I want to remind you
what we're trying to do.

4
00:00:08,360 --> 00:00:12,280
Consider some language in NP, and
suppose that someone wants to be able to

5
00:00:12,280 --> 00:00:15,000
determine whether strings
are in this language.

6
00:00:15,000 --> 00:00:17,548
The Cook-Levin theorem argues
that because L is in NP,

7
00:00:17,548 --> 00:00:21,390
there's a non-deterministic
turn machine that decides it.

8
00:00:21,390 --> 00:00:26,141
And it uses this fact to create
a function computable in polynomial time

9
00:00:26,141 --> 00:00:28,594
that takes in any input string X, and

10
00:00:28,594 --> 00:00:31,853
outputs a boolean formula
that is satisfiable.

11
00:00:31,853 --> 00:00:34,850
If and only if,
the string X is in the language L.

12
00:00:36,240 --> 00:00:40,400
That way, any polynomial algorithm for
deciding satisfiability

13
00:00:40,400 --> 00:00:44,710
will be able to decide every
language in NP in polynomial time.

14
00:00:44,710 --> 00:00:46,510
Only two questions remain.

15
00:00:46,510 --> 00:00:51,030
Is the reduction correct, and is it
polynomial in the size of the input?

16
00:00:51,030 --> 00:00:53,070
Let's consider correctness first.

17
00:00:53,070 --> 00:00:57,710
If X is in the language, then clearly
the output formula is satisfiable.

18
00:00:57,710 --> 00:01:00,730
We can just use the truth assignment
that corresponds to an accepting

19
00:01:00,730 --> 00:01:04,780
computation of the non-deterministic
turning machine that accepts X,

20
00:01:04,780 --> 00:01:07,110
that will satisfy the formula F.

21
00:01:07,110 --> 00:01:08,340
That much is certainly true.

22
00:01:08,340 --> 00:01:10,670
How about the other direction?

23
00:01:10,670 --> 00:01:14,610
Does the formula being satisfiable
imply that X is in the language?

24
00:01:14,610 --> 00:01:17,370
Take some satisfying assignment for F.

25
00:01:17,370 --> 00:01:20,890
As we've argued, the corresponding
tableax is well-defined.

26
00:01:20,890 --> 00:01:24,620
Only one of the state variables
can be true at any time, etc.

27
00:01:24,620 --> 00:01:27,750
The Tableax also starts in
the initial configuration.

28
00:01:27,750 --> 00:01:29,810
Every transition is valid, and

29
00:01:29,810 --> 00:01:33,460
the configuration sequence
ends in an accepting state.

30
00:01:33,460 --> 00:01:34,726
That's all that's needed for

31
00:01:34,726 --> 00:01:36,679
a non-deterministic
turn machine to accept.

32
00:01:36,679 --> 00:01:39,684
So yes, this direction is true as well.

33
00:01:39,684 --> 00:01:45,910
Now we have to argue that
the reduction is polynomial.

34
00:01:45,910 --> 00:01:50,950
First, I claim that the running time is
polynomial in the output formula length.

35
00:01:50,950 --> 00:01:53,690
There just isn't much
calculation to be done besides

36
00:01:53,690 --> 00:01:58,690
iterating over the combination of steps,
head positions, states and tate symbols,

37
00:01:58,690 --> 00:02:01,300
and printing out the associated
terms of the formula.

38
00:02:02,300 --> 00:02:06,290
Second, I claim that the output formula
is polynomial in the input length.

39
00:02:06,290 --> 00:02:07,040
Let's go back and count.

40
00:02:08,090 --> 00:02:10,586
These clauses, pertaining to the states,

41
00:02:10,586 --> 00:02:13,220
require order p of n times
log n string length.

42
00:02:14,670 --> 00:02:17,530
The number of states to the machine
is a constant in this context.

43
00:02:18,890 --> 00:02:21,565
The p factor comes from the number
of steps of the machine.

44
00:02:21,565 --> 00:02:24,225
The four i here.

45
00:02:24,225 --> 00:02:27,809
The log in factor comes from the fact
that we have to distinguish the literals

46
00:02:27,809 --> 00:02:29,590
from one another.

47
00:02:29,590 --> 00:02:31,610
This requires log in bits.

48
00:02:31,610 --> 00:02:35,350
In fact, in all these calculations,
that's where the log factor comes from.

49
00:02:35,350 --> 00:02:39,800
For the head position, we have order
p of nq to log n string length.

50
00:02:41,210 --> 00:02:44,920
One factor p comes from
the number of steps, and

51
00:02:44,920 --> 00:02:47,910
we have two coming from all
pairs of head positions.

52
00:02:49,050 --> 00:02:53,020
They're order p squared
combinations of steps and squares.

53
00:02:53,020 --> 00:02:58,800
So this family of clauses requires
order p squared log n length as well.

54
00:02:58,800 --> 00:03:01,940
The size of the alphabet is
a constant in this context.

55
00:03:01,940 --> 00:03:05,363
As for the constraints pertaining
to the initial configuration,

56
00:03:05,363 --> 00:03:08,000
this require order p
log n string length.

57
00:03:08,000 --> 00:03:10,610
The dominant factor
being the constraints

58
00:03:10,610 --> 00:03:12,320
about the contents of the tape.

59
00:03:12,320 --> 00:03:17,150
And the constraint that the computation
be accepting requires only log n string

60
00:03:17,150 --> 00:03:22,160
length, since it just has to write out
this single literal one clause here.

61
00:03:22,160 --> 00:03:24,810
The transition clauses might
seem like they would require

62
00:03:24,810 --> 00:03:27,250
a high order polynomial of symbols.

63
00:03:27,250 --> 00:03:30,220
But remember that the size of
the non-deterministic turning machine

64
00:03:30,220 --> 00:03:31,350
is a constant in this context.

65
00:03:32,490 --> 00:03:35,590
Therefore, the fact that we might
have to write out clauses for

66
00:03:35,590 --> 00:03:39,789
all pairs of state and tape symbols,
doesn't affect asymptotic analysis.

67
00:03:40,850 --> 00:03:46,670
Only the range of the indices i and j
depend on the size of the input string.

68
00:03:46,670 --> 00:03:50,506
So we end up with order p
squared log n string length for

69
00:03:50,506 --> 00:03:52,840
all these transition clauses.

70
00:03:52,840 --> 00:03:55,642
Summing the length of all
those clauses up together,

71
00:03:55,642 --> 00:03:58,953
we have a sum of polynomials,
which is of course a polynomial.

72
00:03:58,953 --> 00:04:03,320
So yes, the overall reduction is a
polynomial and Cooks theorem is proved.
