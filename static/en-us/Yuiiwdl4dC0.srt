1
00:00:00,000 --> 00:00:05,000
In this homework we're going to show the power of functions as tools by computing

2
00:00:05,000 --> 00:00:10,000
inverse functions and doing the work just once, rather than having to do it for each function.

3
00:00:10,000 --> 00:00:15,000
What do I mean by that? The square function for squaring numbers is easy, right?

4
00:00:15,000 --> 00:00:20,000
We just return x times x.

5
00:00:20,000 --> 00:00:24,000
But if we wanted to define the square root function, that's a lot harder.

6
00:00:24,000 --> 00:00:27,000
Assuming we didn't have the exponentiation operator built in,

7
00:00:27,000 --> 00:00:32,000
if we wanted to define it in terms of elementary arithmetic, that's a lot of work.

8
00:00:32,000 --> 00:00:35,000
Isaac Newton came up with a way to do it, but he's Newton.

9
00:00:35,000 --> 00:00:41,000
For those of us who aren't, wouldn't it be great if instead of having to write all this code

10
00:00:41,000 --> 00:00:47,000
to define the square root, we could just say "sqrt" is the inverse of square and be done with it?

11
00:00:47,000 --> 00:00:49,000
Well, in this homework we're going to do just that.

12
00:00:49,000 --> 00:00:51,000
We're going to do it in a slightly restricted sense.

13
00:00:51,000 --> 00:00:58,000
We're only going to deal with functions that are defined on the non-negative numbers

14
00:00:58,000 --> 00:01:02,000
and are monotonically increasing. They have to keep on going up.

15
00:01:02,000 --> 00:01:04,000
That way they have a defined inverse.

16
00:01:04,000 --> 00:01:08,000
Functions that are non monotonic don't have a single inverse,

17
00:01:08,000 --> 00:01:11,000
because there's a two-to-one mapping.

18
00:01:11,000 --> 00:01:13,000
Here's my definition of inverse.

19
00:01:13,000 --> 00:01:18,000
I'm going to give you a simple version and then ask you to write a more efficient one.

20
00:01:18,000 --> 00:01:25,000
What does inverse do? It takes a function f and returns a function f_1.

21
00:01:25,000 --> 00:01:28,000
The way it figures out what to do is it says let's start at zero,

22
00:01:28,000 --> 00:01:32,000
because we said this is the function defined on the non-negative numbers,

23
00:01:32,000 --> 00:01:40,000
and ask is this f(x) greater than the y that's being passed to f_1.

24
00:01:40,000 --> 00:01:44,000
If it is, let's increment x by a little bit--a little bit being delta,

25
00:01:44,000 --> 00:01:49,000
which here I've defined as 1/128, but you can define it as what you want

26
00:01:49,000 --> 00:01:51,000
when you're asking for the inverse.

27
00:01:51,000 --> 00:01:56,000
Keep on going until we find an f(x) which is not less than y.

28
00:01:56,000 --> 00:02:02,000
Now x is too big. It's greater than or equal to y, and y minus delta is too small.

29
00:02:02,000 --> 00:02:06,000
It's less than y. We're somewhere in between the two, and we want to pick the closest one.

30
00:02:06,000 --> 00:02:08,000
That's what this expression does.

31
00:02:08,000 --> 00:02:12,000
It says we know the result is somewhere in there, and we want to choose which one is closer.

32
00:02:12,000 --> 00:02:16,000
How does that work? Well, we can define square. We can ask for the square root of 100.

33
00:02:16,000 --> 00:02:24,000
I guess I missed a step in here where I have to say that sqrt is equal to inverse(square).

34
00:02:24,000 --> 00:02:27,000
Now when we ask for the square root of 100

35
00:02:27,000 --> 00:02:30,000
we get exactly 10.0. That's the right answer.

36
00:02:30,000 --> 00:02:35,000
When we ask for the square root of 99, we get 9.95-something.

37
00:02:35,000 --> 00:02:39,000
That's pretty close, although there are more accurate representations

38
00:02:39,000 --> 00:02:41,000
that the computer could come up with.

39
00:02:41,000 --> 00:02:44,000
When we ask for the square root of 100 million, we get 10,000 exactly,

40
00:02:44,000 --> 00:02:46,000
which is exactly the right answer.

41
00:02:46,000 --> 00:02:51,000
But it took a little bit too long. It took almost a second to come up with this result.

42
00:02:51,000 --> 00:02:53,000
I'd like it to go much faster.

43
00:02:53,000 --> 00:02:55,000
So that's what I'm going to ask you to do.

44
00:02:55,000 --> 00:03:05,000
I want you to modify inverse so that it has a run time closer to the logarithm of the input to f_1

45
00:03:05,000 --> 00:03:11,000
rather than to linear in the input to f_1.

46
00:03:11,000 --> 00:03:13,000
I'll give you two hints of things to consider.

47
00:03:13,000 --> 00:03:18,000
One is binary search, and the other Newton's method.

48
00:03:18,000 --> 00:03:23,000
So do some research on those, and then modify the definition of inverse

49
00:03:23,000 --> 00:03:28,000
so that when we say sqrt = inverse(square) the whole function runs faster.
