1
00:00:00,380 --> 00:00:03,580
Now that we understand reductions,
we're ready to use them to help us prove

2
00:00:03,580 --> 00:00:08,130
decidability and
even more interestingly, undecidability.

3
00:00:08,130 --> 00:00:12,430
Suppose that we have a language
A that's reducible to B, and

4
00:00:12,430 --> 00:00:17,020
let's say that I want to know whether
some string x is in the language A.

5
00:00:17,020 --> 00:00:20,520
Well, if there's a decider for
B then I'm in luck.

6
00:00:20,520 --> 00:00:23,110
I can use the reduction,
which is a computable function,

7
00:00:23,110 --> 00:00:26,980
remember, that takes in one string and
outputs another.

8
00:00:26,980 --> 00:00:31,100
I just need to feed in x and
take the output and

9
00:00:31,100 --> 00:00:33,990
feed that into the decider for B.

10
00:00:33,990 --> 00:00:37,965
If B accepts, then I know that
x is in A and if B rejects,

11
00:00:37,965 --> 00:00:40,760
then I know that it isn't.

12
00:00:40,760 --> 00:00:46,000
This works because by the definition
of a reduction, x is in a, if and

13
00:00:46,000 --> 00:00:51,120
only if, r of x is in b and
by the definition of a decider,

14
00:00:51,120 --> 00:00:56,210
this is true if and
only if, d accepts r of x.

15
00:00:56,210 --> 00:01:00,470
Therefore the output of d
tells me whether x is in a.

16
00:01:00,470 --> 00:01:04,120
If I can figure out whether
a string is in b or not.

17
00:01:04,120 --> 00:01:06,240
Then by the properties of the reduction,

18
00:01:06,240 --> 00:01:10,590
this also lets me figure out whether
the original string x was in A.

19
00:01:11,770 --> 00:01:15,750
That means that we can say that
the composition of the reduction and

20
00:01:15,750 --> 00:01:19,220
the decider for
B is itself a decider for A.

21
00:01:20,470 --> 00:01:25,520
Thus, the fact that A is reducible to
B has four important consequences for

22
00:01:25,520 --> 00:01:27,820
decidability and recognizability.

23
00:01:27,820 --> 00:01:32,410
The easiest to see is that if B is
decidable, then A is also decidable.

24
00:01:33,450 --> 00:01:37,700
As we've seen, we can just compose
the reduction with the decider for B.

25
00:01:38,880 --> 00:01:41,935
The same logic also works if
there's only a recognizer for B.

26
00:01:41,935 --> 00:01:45,099
If we input a string X that is in A,

27
00:01:45,099 --> 00:01:50,302
then R of X will be in B, so
the recognizer will accept.

28
00:01:50,302 --> 00:01:55,229
And if we input a string that is not
in A, then R of X will not be in B, so

29
00:01:55,229 --> 00:01:58,525
the recognizer will not accept.

30
00:01:58,525 --> 00:01:59,950
It might loop.

31
00:01:59,950 --> 00:02:03,690
But we know it won't accept and that's
good enough for our recognizer for A.

32
00:02:04,700 --> 00:02:08,520
The other two consequences are just
the counter positives of these.

33
00:02:08,520 --> 00:02:12,670
If A is undecidable, then this
composition of the reduction and

34
00:02:12,670 --> 00:02:15,060
the decider can't be a decider for A.

35
00:02:16,440 --> 00:02:19,770
Since we're assuming that there is
a reduction, the only possibility

36
00:02:19,770 --> 00:02:24,100
is that the decider for B doesn't exist,
hence B is undecidable.

37
00:02:25,170 --> 00:02:29,080
And the same logic holds for
the unrecognizability of A and B.
