1
00:00:00,630 --> 00:00:05,130
Next, we consider a randomized algorithm
for finding a minimum cut in a graph.

2
00:00:05,130 --> 00:00:07,870
Likely this won't be as
familiar as quick sort.

3
00:00:07,870 --> 00:00:12,480
We're given a connected graph G and the
goal is to find a minimum set of edges

4
00:00:12,480 --> 00:00:17,070
whose removal from the graph causes the
graph to have two connective components.

5
00:00:17,070 --> 00:00:19,025
This set of edges is
called a minimum cut-set.

6
00:00:20,080 --> 00:00:23,010
Note that this is a different
problem from the minimum s-t

7
00:00:23,010 --> 00:00:25,640
cuts that we considered in
the context of maximum flow.

8
00:00:26,700 --> 00:00:30,050
There are no two particular vertices
that we're trying to separate here.

9
00:00:30,050 --> 00:00:33,280
Any two will do, and
all the edges have equal weight here.

10
00:00:34,520 --> 00:00:38,180
We can use the Minimum S-T Cut Algorithm
to help solve the problem but I think

11
00:00:38,180 --> 00:00:41,620
you'll agree that this randomized
algorithm is quite a bit simple.

12
00:00:41,620 --> 00:00:44,930
The algorithm proceeds by
repeatedly contracting edges so

13
00:00:44,930 --> 00:00:46,210
as to join two together.

14
00:00:47,500 --> 00:00:51,560
And once there are only two vertices
left they define the partition.

15
00:00:52,650 --> 00:00:54,350
I'll illustrate with an example.

16
00:00:54,350 --> 00:00:58,370
Consider this graph, and suppose that
we decide to contract this edge here.

17
00:00:59,780 --> 00:01:03,140
Then these two vertices are going to
get collapsed into one.

18
00:01:03,140 --> 00:01:05,550
And we're going to delete this edge,
like so.

19
00:01:06,920 --> 00:01:09,470
Note that we keep all
the other edges in the graph.

20
00:01:09,470 --> 00:01:13,630
Even if they end up being parallel
that is between the same two vertices.

21
00:01:13,630 --> 00:01:16,360
From this graph,
suppose that we choose this edge here.

22
00:01:17,630 --> 00:01:20,720
Then contracting this edge
will delete this edge

23
00:01:20,720 --> 00:01:24,010
as well as this parallel edge here,
like so.

24
00:01:24,010 --> 00:01:27,770
From this group,
suppose that we contract this edge.

25
00:01:27,770 --> 00:01:29,810
Deleting these two here, as well.

26
00:01:29,810 --> 00:01:33,260
Then the final result
is this graph here.

27
00:01:33,260 --> 00:01:37,997
And from the result, we can read
off both the partition, 1, 2,

28
00:01:37,997 --> 00:01:41,210
3, 4, on 1 side, and 5 on the other, and

29
00:01:41,210 --> 00:01:46,990
we can also read off the cut-set
represented by the 2 remaining edges.

30
00:01:46,990 --> 00:01:49,380
Just 3, 5 and 4, 5.

31
00:01:49,380 --> 00:01:54,200
That is these two edges
here in the original graph.

32
00:01:54,200 --> 00:01:57,940
Now, this particular choice of edges,
led to a minimum cut-set.

33
00:01:57,940 --> 00:02:00,360
But not all such choices would have.

34
00:02:00,360 --> 00:02:02,380
How then should we pick
an edge to contract?

35
00:02:02,380 --> 00:02:05,880
Well, it turns out that just picking
a random edge is a good idea.

36
00:02:06,980 --> 00:02:09,400
More often than not this
won't yield a correct answer.

37
00:02:10,419 --> 00:02:12,140
But as well see even so

38
00:02:12,140 --> 00:02:15,380
it will yield a correct answer
often enough to be useful.
