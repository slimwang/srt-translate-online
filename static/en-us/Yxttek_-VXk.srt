1
00:00:00,550 --> 00:00:03,740
All right,
let's move onto drawing rectangles now.

2
00:00:03,740 --> 00:00:05,540
The first interesting
thing about rectangles,

3
00:00:05,540 --> 00:00:08,490
is that they can be drawn with
two different shape types.

4
00:00:08,490 --> 00:00:11,650
They can either be drawn with shape
type line, just to get the outlines of

5
00:00:11,650 --> 00:00:15,790
the rectangles, or shape type
filled to fill in the rectangles.

6
00:00:15,790 --> 00:00:17,705
Let's go with filled for now.

7
00:00:17,705 --> 00:00:21,980
shapeRenderer.rect is overloaded with
about a dozen different functions to

8
00:00:21,980 --> 00:00:23,380
do different things.

9
00:00:23,380 --> 00:00:25,350
Honestly, to have a look at them
all you should probably just

10
00:00:25,350 --> 00:00:27,280
check out the documentation.

11
00:00:27,280 --> 00:00:30,680
The basic version though,
draws an access aligned rectangle,

12
00:00:30,680 --> 00:00:35,470
starting with the lower left corner and
then giving the width and the height.

13
00:00:35,470 --> 00:00:37,480
Let's try running this.

14
00:00:37,480 --> 00:00:39,295
So far, so good.

15
00:00:39,295 --> 00:00:41,060
Let's do something more interesting.

16
00:00:41,060 --> 00:00:43,470
We can do some super fun
stuff with the colors and

17
00:00:43,470 --> 00:00:46,630
rectangles, like specifying a color for
each corner.

18
00:00:46,630 --> 00:00:47,340
Let's try this.

19
00:00:48,710 --> 00:00:49,300
There we go,

20
00:00:49,300 --> 00:00:52,810
the rectangle smoothly transitions
between the colors at the corners.

21
00:00:54,040 --> 00:00:56,940
These next two rectangles
are being drawn in such a way that

22
00:00:56,940 --> 00:00:59,190
one's going to overlap the other.

23
00:00:59,190 --> 00:01:01,590
So, which one do you think
is going to come out on top?

24
00:01:01,590 --> 00:01:04,230
Is it this red one,
which is being drawn first, or

25
00:01:04,230 --> 00:01:05,940
the green one that's being drawn second?

26
00:01:07,150 --> 00:01:09,880
Ha, look like the green one wins.

27
00:01:09,880 --> 00:01:12,460
When shape render is asked to
draw things on top of each other

28
00:01:12,460 --> 00:01:14,950
it uses what's called
the painter's algorithm.

29
00:01:14,950 --> 00:01:18,610
Just like the initial layers of paint
laid down by a painter get covered up

30
00:01:18,610 --> 00:01:20,890
by what gets pained later, similarly,

31
00:01:20,890 --> 00:01:24,550
shapes that are drawn later on will
cover up shapes that were drawn earlier.

32
00:01:25,720 --> 00:01:29,310
We can also use shape render
to draw rotated rectangles.

33
00:01:29,310 --> 00:01:32,510
Now here's where the signature of
rect starts getting pretty crazy and

34
00:01:32,510 --> 00:01:33,920
the documentation will come in handy.

35
00:01:34,990 --> 00:01:39,940
Again, here is the bottom left corner,
and here's the width and height now.

36
00:01:39,940 --> 00:01:43,980
And this entry is the origin
about which we'll be rotating.

37
00:01:43,980 --> 00:01:45,890
So if the width and height are both 100,

38
00:01:45,890 --> 00:01:49,239
then 50/50 is right in
the middle of the rectangle.

39
00:01:50,390 --> 00:01:54,790
Then we have the x scale,
the y scale, and rotation.

40
00:01:55,970 --> 00:02:00,110
So, we're drawing this 100 by 100, but
then we're going to squash it by 50%

41
00:02:00,110 --> 00:02:03,190
horizontally, and
rotate it by 45 degrees.

42
00:02:03,190 --> 00:02:07,000
Same thing with this one, except
we're going to rotate it 135 degrees.

43
00:02:07,000 --> 00:02:08,008
Let's check out what this looks like.

44
00:02:09,610 --> 00:02:11,619
Cool.
So we've got two rectangles that were

45
00:02:11,619 --> 00:02:12,670
drawn at the same spot.

46
00:02:12,670 --> 00:02:15,740
They were smashed by 50% horizontally,
and

47
00:02:15,740 --> 00:02:18,130
then the yellow one was
rotated by 45 degrees.

48
00:02:18,130 --> 00:02:21,080
So it was initially straight up and
down, and now it's tilted to the left.

49
00:02:21,080 --> 00:02:24,830
And the green one has been
rotated by 135 degrees.

50
00:02:24,830 --> 00:02:27,625
To more easily understand what's
going on with this origin parameter,

51
00:02:27,625 --> 00:02:29,710
let's try something very similar.

52
00:02:29,710 --> 00:02:31,140
The setup is almost identical,

53
00:02:31,140 --> 00:02:34,530
but instead of the origin being
in the middle of the rectangle,

54
00:02:34,530 --> 00:02:38,420
the origin is now down at the bottom
left corner of the rectangle.

55
00:02:38,420 --> 00:02:41,250
So now, the rectangle's instead of
being rotated about their center,

56
00:02:41,250 --> 00:02:43,620
are being rotated about
this bottom left corner.

57
00:02:44,975 --> 00:02:47,500
OpenGL has an interesting quirk.

58
00:02:47,500 --> 00:02:50,050
It knows how to draw in filled shapes,
but

59
00:02:50,050 --> 00:02:53,060
it doesn't know how to draw thick lines.

60
00:02:53,060 --> 00:02:57,580
So if we want a thick line,
what we actually need is just a rotated,

61
00:02:57,580 --> 00:02:58,800
super skinny rectangle.

62
00:02:59,860 --> 00:03:03,520
Thankfully, shapeRenderer gives
us a super simple way to do this.

63
00:03:03,520 --> 00:03:05,350
It's called rectLine.

64
00:03:05,350 --> 00:03:08,310
We give it the x and the y position
of the start of the line, the x and

65
00:03:08,310 --> 00:03:10,860
y position of the end of the line,
and the thickness.

66
00:03:11,860 --> 00:03:13,565
And there we go, we get a fat line.

67
00:03:13,565 --> 00:03:17,680
[LAUGH] All right, last thing,
time for some silliness.

68
00:03:17,680 --> 00:03:22,100
Let's draw a rainbow flower, this
might come in handy for the next quiz.

69
00:03:23,320 --> 00:03:24,220
Pretty cool, right?
