1
00:00:00,000 --> 00:00:03,000
Let's put our hard one knowledge of these new regular expressions

2
00:00:03,000 --> 00:00:08,000
like any character except new line or set compliment of what we've been talking about

3
00:00:08,000 --> 00:00:10,000
to the test.

4
00:00:10,000 --> 00:00:14,000
I'd like you to submit via the interpreter, assign to the variable regexp,

5
00:00:14,000 --> 00:00:20,000
a Python regular expression that matches double-quoted string literals

6
00:00:20,000 --> 00:00:25,000
and--this is the sticker--allows for escaped double quotes.

7
00:00:25,000 --> 00:00:27,000
Let me just jump over to the interpreter briefly to show you what I'm talking about,

8
00:00:27,000 --> 00:00:29,000
and then we'll come back here.

9
00:00:29,000 --> 00:00:33,000
It turns out that there is 1 of those gritty details in this problem that makes life fun,

10
00:00:33,000 --> 00:00:35,000
but also complicated the first time.

11
00:00:35,000 --> 00:00:39,000
The sorts of strings that I want you to accept are like this one down here.

12
00:00:39,000 --> 00:00:46,000
"You say, and then there's a \yes\, I say, no.

13
00:00:46,000 --> 00:00:50,000
We've got \no\ and then it ends.

14
00:00:50,000 --> 00:00:55,000
This is a well-formed, well-balanced string literal with double quotes

15
00:00:55,000 --> 00:00:56,000
and some escaped double quotes.

16
00:00:56,000 --> 00:01:02,000
However, to get it to Python, remember that Python is going to treat the escaped sequences,

17
00:01:02,000 --> 00:01:05,000
meaning no literally the next thing.

18
00:01:05,000 --> 00:01:08,000
But what if you want to literally have a backslash?

19
00:01:08,000 --> 00:01:11,000
Then you need to escape the escape sequence.

20
00:01:11,000 --> 00:01:13,000
It is turtles all the way down, my friends.

21
00:01:13,000 --> 00:01:16,000
So if you want to do some testing on your procedure,

22
00:01:16,000 --> 00:01:20,000
here this string 1, this is what you'd have to enter into Python

23
00:01:20,000 --> 00:01:24,000
in order to get it to be the sort of string we're looking for.

24
00:01:24,000 --> 00:01:29,000
Here I started with single quotes, and then I've double escaped this backslash,

25
00:01:29,000 --> 00:01:31,000
then the double quotes, double escape again.

26
00:01:31,000 --> 00:01:35,000
Here I've added 2 more, just to make this extra clear.

27
00:01:35,000 --> 00:01:40,000
All 3 of these are positive examples--whoops! I'm so wrong!

28
00:01:40,000 --> 00:01:44,000
I have forgotten the closing double quote at the end of '"I say, \\"hello.\\"'.

29
00:01:44,000 --> 00:01:47,000
This is a negative example.

30
00:01:47,000 --> 00:01:51,000
Let's go fix it. There we go. Add in another quote.

31
00:01:51,000 --> 00:01:55,000
Now all 3 of these are positive examples of the sorts of strings you'd want to match.

32
00:01:55,000 --> 00:01:58,000
You say, yes. I say, no.

33
00:01:58,000 --> 00:02:00,000
I do realize that there should be a quote here,

34
00:02:00,000 --> 00:02:03,000
but I've intentionally left out the apostrophe in don't,

35
00:02:03,000 --> 00:02:07,000
so as not to confuse the issue since we're already talking about quoted strings.

36
00:02:07,000 --> 00:02:11,000
So here just to remind you, I've written out a positive example and a negative example.

37
00:02:11,000 --> 00:02:15,000
On the left is what you'd have to say to Python and on the right is what it means.

38
00:02:15,000 --> 00:02:19,000
And the big hints are that you'll probably want to escape the double quotes and the backslash,

39
00:02:19,000 --> 00:02:21,000
just like we did here.

40
00:02:21,000 --> 00:02:26,000
You may want to consider having parenthesis nested inside other parenthesis.

41
00:02:26,000 --> 99:59:59,999
This one's tricky. Good luck!
