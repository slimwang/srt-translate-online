1
00:00:00,300 --> 00:00:03,460
In this lesson we're going to be
talking about SWIFT collections,

2
00:00:03,460 --> 00:00:07,050
which include arrays,
dictionaries, and sets.

3
00:00:07,050 --> 00:00:11,510
Just as a quick refresher,
an array is an ordered list of items,

4
00:00:11,510 --> 00:00:15,200
a dictionary is a collection
of key value pairs, and

5
00:00:15,200 --> 00:00:18,790
a set is an unordered
list of distinct values.

6
00:00:19,890 --> 00:00:24,250
Of the three, arrays are the only
collection that has a defined order.

7
00:00:24,250 --> 00:00:27,230
And also the only one that
may have repeated values.

8
00:00:28,390 --> 00:00:33,270
As an iOS developer you're sure to use
arrays in dictionaries on a daily basis.

9
00:00:33,270 --> 00:00:36,240
You're undoubtedly already familiar
with these data structures, but

10
00:00:36,240 --> 00:00:39,920
it will pay to really internalize
their Swift implementations.

11
00:00:39,920 --> 00:00:42,480
For example,
when we get to the networking course

12
00:00:42,480 --> 00:00:45,740
you'll be using dictionaries
a lot in parsing JSON.

13
00:00:45,740 --> 00:00:48,400
We'll also briefly talk about sets.

14
00:00:48,400 --> 00:00:51,070
For this module you'll want to
open up the Playground file and

15
00:00:51,070 --> 00:00:52,390
titled Lesson3_Collections.

16
00:00:52,390 --> 00:00:55,030
Let's start with arrays.

17
00:00:55,030 --> 00:00:57,370
Arrays can be initialized in three ways.

18
00:00:57,370 --> 00:00:58,500
Here's the first option.

19
00:00:58,500 --> 00:01:00,900
By now you've seen these
parentheses a few times.

20
00:01:00,900 --> 00:01:03,220
They represent a call
to a constructor and

21
00:01:03,220 --> 00:01:06,390
init method where the word
init has been omitted.

22
00:01:06,390 --> 00:01:10,570
Here I've typed array to specify the
type of the object we're initializing.

23
00:01:10,570 --> 00:01:14,220
Just like you saw earlier with the light
switch class, with collections we

24
00:01:14,220 --> 00:01:17,900
also need to specify the type of
the item that the collection holds.

25
00:01:17,900 --> 00:01:21,400
So we type double here in
between angle brackets.

26
00:01:21,400 --> 00:01:25,030
And in the end the statement will
initialize an empty array of doubles.

27
00:01:25,030 --> 00:01:27,930
You actual will rarely see
that first option used.

28
00:01:27,930 --> 00:01:30,940
More often you'll see shorthand
that looks like this.

29
00:01:30,940 --> 00:01:33,190
Again, I'm initializing an empty array.

30
00:01:33,190 --> 00:01:35,860
The square brackets let the compiler
know that it's an array, so

31
00:01:35,860 --> 00:01:38,120
I don't need to type out array anymore.

32
00:01:38,120 --> 00:01:41,900
And then I indicate the type,
double, between square brackets.

33
00:01:41,900 --> 00:01:45,190
Like before, the parentheses at
the end signify the constructor.

34
00:01:45,190 --> 00:01:50,010
And then I can add items to my
more numbers array, like this.

35
00:01:50,010 --> 00:01:51,710
The third and most concise option for

36
00:01:51,710 --> 00:01:55,050
initialization is to use
array literal syntax.

37
00:01:55,050 --> 00:01:58,840
Here I just create a list of the
contained items, separated by commas and

38
00:01:58,840 --> 00:02:00,480
enclose them in square brackets.

39
00:02:00,480 --> 00:02:03,790
The same way I did to add
items to the previous array.

40
00:02:03,790 --> 00:02:06,360
This array also holds
items of type double.

41
00:02:06,360 --> 00:02:10,780
But as we've seen before the arrays
type can be inferred by the compiler.

42
00:02:10,780 --> 00:02:13,710
It's super easy to combine these
two arrays by concatenating them

43
00:02:13,710 --> 00:02:15,240
with the plus operator.

44
00:02:15,240 --> 00:02:19,100
Or to be even more concise I can use
the compound assignment operator.

45
00:02:19,100 --> 00:02:22,890
Notice that the compiler doesn't allow
me to add values to an array that's been

46
00:02:22,890 --> 00:02:25,500
defined as a constant using LET.

47
00:02:25,500 --> 00:02:29,510
If I've defined an array as a constant I
need to define a new constant in order

48
00:02:29,510 --> 00:02:30,660
to concatenate the two.

49
00:02:31,850 --> 00:02:35,370
An array can hold any type of object,
including custom classes.

50
00:02:35,370 --> 00:02:36,140
For example,

51
00:02:36,140 --> 00:02:40,610
here I'll define an array called circuit
which holds objects of type LightSwitch.

52
00:02:40,610 --> 00:02:44,260
And then I'll add some light switches I
want the circuit array to keep track of.

53
00:02:44,260 --> 00:02:47,184
Or I could just define the array's
components from the get-go.
