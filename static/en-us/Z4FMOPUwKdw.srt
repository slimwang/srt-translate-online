1
00:00:00,340 --> 00:00:05,130
The square root example has to do with specifying the properties of the results

2
00:00:05,130 --> 00:00:10,250
of a computation of a function. We might also consider situations where

3
00:00:10,250 --> 00:00:14,590
the effect of a particular operation is to change the attribute values for some

4
00:00:14,590 --> 00:00:19,430
class. How might we do that? Well, let's consider the example of a bank account.

5
00:00:19,430 --> 00:00:23,560
And has an attribute which is the current balance and has operations for

6
00:00:23,560 --> 00:00:29,130
deposits and withdraws. We might wish to guarantee that the balance,

7
00:00:29,130 --> 00:00:33,600
the current balance reflects any deposits that are made and

8
00:00:33,600 --> 00:00:37,460
any withdrawals that are taken out. How might we express such a constraint?

9
00:00:37,460 --> 00:00:43,341
Well here's an example, if we have a deposit operation in the account class,

10
00:00:43,341 --> 00:00:48,803
that takes a real argument. Which is the amount being deposited and

11
00:00:48,803 --> 00:00:54,417
as the sanity check we make sure that the amount is greater than 0,

12
00:00:54,417 --> 00:00:59,810
that's the precondition. We might try to express the post-condition

13
00:00:59,810 --> 00:01:03,480
with something like saying the balance equals balance plus the amount.

14
00:01:05,030 --> 00:01:10,270
However, remember that the OCL is a declarative language. An equal sign here

15
00:01:10,270 --> 00:01:14,530
means equality it doesn't mean assignment. So what we're saying with this

16
00:01:14,530 --> 00:01:18,640
as the way that it's written is the balance equals the balance plus the amount.

17
00:01:18,640 --> 00:01:21,660
Well, that can't be the case. All right, that doesn't make sense. Fortunately,

18
00:01:21,660 --> 00:01:26,620
OCL has a mechanism for allowing us to express these sorts of situations where

19
00:01:26,620 --> 00:01:30,780
we're changing, changing values. And that particular mechanism is,

20
00:01:30,780 --> 00:01:36,780
consists of an @ sign followed by the, the word pre.

21
00:01:36,780 --> 00:01:41,850
And what that denotes is the value before the operation executed.

22
00:01:43,050 --> 00:01:47,370
If we don't use @pre than what we're seeing when we express balance or

23
00:01:47,370 --> 00:01:53,908
deposit is the value afterwards. So we can express the post-condition

24
00:01:53,908 --> 00:02:00,580
this time correctly by saying that balance equals balance @pre plus amount.

25
00:02:00,580 --> 00:02:04,150
That is, we take the previous ba the previous balance,

26
00:02:04,150 --> 00:02:07,330
add in the amount being deposited and we get the new balance.

27
00:02:07,330 --> 00:02:09,780
Looks like an assignment segment, but it's really an equality.
