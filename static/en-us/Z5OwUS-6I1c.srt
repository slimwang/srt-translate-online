1
00:00:00,000 --> 00:00:04,320
For this problem, we're going to be implementing some pre-processing rules for SAT

2
00:00:04,320 --> 00:00:09,650
and we're going to be using the same format to represent SAT as in the problem set for Unit 2.

3
00:00:09,650 --> 00:00:13,410
So if you have any questions about that, go ahead and read through this part

4
00:00:13,410 --> 00:00:16,790
or go back and look at the problem set for Unit 2.

5
00:00:16,790 --> 00:00:21,000
Now, what you're going to be doing is writing a function that when given Boolean formula

6
00:00:21,000 --> 00:00:27,330
in the above format, we perform a few data reduction rules and I put the result in set of clauses.

7
00:00:27,330 --> 00:00:32,220
The goal for this is that we're going to give the actual SATs over a much, much smaller--

8
00:00:32,220 --> 00:00:38,240
well, hopefully much smaller Boolean formula than it would ordinarily get

9
00:00:38,240 --> 00:00:42,220
and hopefully, we can improve the performance of SAT in that way.

10
00:00:42,220 --> 00:00:47,310
Now, the data reduction rules we're going to be performing are these four here.

11
00:00:47,310 --> 00:00:50,880
First, if any clause consist of a single variable, we're going to set

12
00:00:50,880 --> 00:00:53,650
that variable so that the clause is satisfied.

13
00:00:53,650 --> 00:00:59,170
So if the clause just consist of x2 for instance, then we'll set it to true,

14
00:00:59,170 --> 00:01:03,690
or is that the clause just consist of not-x2, we're going to set x2 to false,

15
00:01:03,690 --> 00:01:09,610
and that way, we know that x2 has to be that in order for the Boolean formula to be satisfied.

16
00:01:09,610 --> 00:01:15,880
The second one is that if a variable appears just once and it hasn't been set, then we set it

17
00:01:15,880 --> 00:01:18,580
so that the respective clause is satisfied.

18
00:01:18,580 --> 00:01:22,140
The third rule is that we remove all clauses that have become satisfied.

19
00:01:22,140 --> 00:01:27,910
In that way, we just don't have to worry about them anymore in the upcoming SAT solver.

20
00:01:27,910 --> 00:01:33,300
The fourth final rule is that we remove all variables that evaluate to false--

21
00:01:33,300 --> 00:01:40,500
so all variables x that are set to false and all variables not x where x is set to true for instance

22
00:01:40,500 --> 00:01:43,140
that we know are set in that manner.

23
00:01:43,140 --> 00:01:47,760
Now, if this results in an empty clause, then well that means that the input formula

24
00:01:47,760 --> 00:01:52,030
doesn't have any satisfying assignment for that variable, which means

25
00:01:52,030 --> 00:01:55,280
that the Boolean formula itself isn't satisfiable.

26
00:01:55,280 --> 00:01:59,840
So then the function should return the Boolean formula 1, -1, and that is so that

27
00:01:59,840 --> 00:02:05,330
when we give it to a SAT solver, it will always result as unsatisfiable.

28
00:02:05,330 --> 00:02:12,480
Now, the difficult part is implementing rule 2 and rule 4--that's because your function

29
00:02:12,480 --> 00:02:18,000
must perform these data reduction rules excessively until they can't be applied any further.

30
00:02:18,000 --> 00:02:24,070
So after you applied these rules, there might be other clauses for which these rules now apply

31
00:02:24,070 --> 00:02:26,140
that they didn't apply to it before.

32
00:02:26,140 --> 00:02:31,120
Now, you have to be careful if a variable that now appears once has already been set earlier.

33
00:02:31,120 --> 00:02:34,990
If not, then rule 2 may apply, otherwise, it doesn't.

34
00:02:34,990 --> 00:02:40,580
Now, remember that during the course of this pre-processing, we can't change the satisfiability

35
00:02:40,580 --> 00:02:45,780
of the overall formula or else the pre-processing rules aren't really helpful at all.

36
00:02:45,780 --> 00:02:51,350
If a SAT problem is satisfiable, the output of pre-processing also needs to be satisfiable.

37
00:02:51,350 --> 99:59:59,999
So go ahead and implement this function in the space given.
