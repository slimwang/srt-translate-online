1
00:00:00,400 --> 00:00:03,100
Another important consequence of having several machines share the same

2
00:00:03,100 --> 00:00:05,660
medium is that two messages can't be sent at the same

3
00:00:05,660 --> 00:00:08,850
time, if they tried the data on the line would likely

4
00:00:08,850 --> 00:00:12,070
be corrected. We say that there is a collision when this

5
00:00:12,070 --> 00:00:15,470
happens. These collisions can have an important role in the performance

6
00:00:15,470 --> 00:00:19,280
of distributed systems where multiple machines, connected by a local network,

7
00:00:19,280 --> 00:00:22,140
are used to solve a problem. So understanding how and why

8
00:00:22,140 --> 00:00:25,860
these collisions occur is important for the study of operating systems.

9
00:00:25,860 --> 00:00:28,660
We'll discuss three solutions to the collision problem. The

10
00:00:28,660 --> 00:00:32,450
first is Carrier Sets Multiple Access with Collision Detection,

11
00:00:32,450 --> 00:00:37,550
or CSMA/CD, which was used with early ethernet. When

12
00:00:37,550 --> 00:00:39,460
a node sends a frame, it also measures the

13
00:00:39,460 --> 00:00:41,840
signal on the wire. If it finds what it

14
00:00:41,840 --> 00:00:45,520
sent, then great. If not, then it assumes another

15
00:00:45,520 --> 00:00:47,410
node was trying to send at the same time,

16
00:00:47,410 --> 00:00:51,230
causing a collision. Therefore, it sends a special jamming signal

17
00:00:51,230 --> 00:00:54,130
that helps ensure that all other nodes detect the collision.

18
00:00:54,130 --> 00:00:55,890
It then waits for an amount of time that is part

19
00:00:55,890 --> 00:00:59,460
exponentially based on the number of recent collisions it has detected

20
00:00:59,460 --> 00:01:02,160
but also random so that the nodes don't all just mirror

21
00:01:02,160 --> 00:01:05,560
each other and keep sending messages at the same time. Another

22
00:01:05,560 --> 00:01:09,280
solution to the collision problem is token ring or token bus.

23
00:01:09,280 --> 00:01:12,090
Here, the nodes in the network are arranged in a ring,

24
00:01:12,090 --> 00:01:13,430
either through physical connections or

25
00:01:13,430 --> 00:01:16,240
logically. They then continually pass around

26
00:01:16,240 --> 00:01:19,040
a token that is empty by default that determines whose

27
00:01:19,040 --> 00:01:22,000
turn it is. If this node here wants to send a

28
00:01:22,000 --> 00:01:25,810
message, he waits for the token, then sends out his message,

29
00:01:25,810 --> 00:01:28,990
and once he's received an acknowledgement, he then continues to pass

30
00:01:28,990 --> 00:01:31,670
the token on around. The next one wanting to send a

31
00:01:31,670 --> 00:01:35,470
message will grab the token, send out his message, wait for

32
00:01:35,470 --> 00:01:38,590
an acknowledgement, and then pass the token around some more. This

33
00:01:38,590 --> 00:01:41,880
system is fair, and it does not fail under heavy loads,

34
00:01:41,880 --> 00:01:43,810
but it suffers from more latency than the more

35
00:01:43,810 --> 00:01:48,860
aggressive CSMA/CD. Where possible, both traditional ethernet and token ring

36
00:01:48,860 --> 00:01:52,380
have been largely replaced by switched ethernet. A switch is

37
00:01:52,380 --> 00:01:55,020
physically connected to the nodes like the hub, but instead

38
00:01:55,020 --> 00:01:57,630
of broadcasting every frame that comes in like the hub

39
00:01:57,630 --> 00:02:00,020
it looks at the destination MAC address and routs the

40
00:02:00,020 --> 00:02:03,310
frames accordingly. The advantage is now that we have fewer

41
00:02:03,310 --> 00:02:07,730
collisions. For instance, two pairs of nodes can communicate simultaneously

42
00:02:07,730 --> 00:02:10,770
whereas this would have been impossible before. Naturally, a switch

43
00:02:10,770 --> 00:02:13,940
will need a table mapping MAC addresses to the physical

44
00:02:13,940 --> 00:02:17,070
port it should send the frame out to. One convenient

45
00:02:17,070 --> 00:02:21,080
way to populate this table is with learning. Whenever a switch

46
00:02:21,080 --> 00:02:24,590
sees a frame, it examines the MAC source and puts

47
00:02:24,590 --> 00:02:28,430
that MAC address along with the port number in the table.

48
00:02:28,430 --> 00:02:30,440
Then to figure out where to send it, it looks

49
00:02:30,440 --> 00:02:34,000
in the table and if it finds the appropriate port, great.

50
00:02:34,000 --> 00:02:37,000
If not, then it just broadcasts the ethernet frame to

51
00:02:37,000 --> 00:02:39,690
all the nodes. Once we run out of ports, we

52
00:02:39,690 --> 00:02:42,330
can begin to arrange switches in a hierarchy like so.

53
00:02:43,370 --> 00:02:46,650
In our top level switch, MAC addresses for this subtree

54
00:02:46,650 --> 00:02:49,760
will all map to port one. Those in this subtree

55
00:02:49,760 --> 00:02:52,630
will map to port two. And those in this subtree

56
00:02:52,630 --> 00:02:56,060
will map to port three. Lower down in this switch,

57
00:02:56,060 --> 00:02:59,880
the MAC addresses for these machines will map to their ports.

58
00:02:59,880 --> 00:03:02,320
And the MAC address for all these other machines in

59
00:03:02,320 --> 00:03:06,240
the network would map to this switch's uplink, since that's the

60
00:03:06,240 --> 00:03:10,230
path along which the frame would need to travel. Switches dramatically

61
00:03:10,230 --> 00:03:12,470
increase the number of messages that can be sent over a

62
00:03:12,470 --> 00:03:15,870
local network. In the simplest topology where all nodes are

63
00:03:15,870 --> 00:03:18,620
connected to a single switch, it's almost as good as having

64
00:03:18,620 --> 00:03:22,140
a dedicated link between each pair. The only way that server

65
00:03:22,140 --> 00:03:25,050
one wouldn't be able to send to server 1 is because

66
00:03:25,050 --> 00:03:29,850
server 2 itself is busy, never because the link is busy, and even when

67
00:03:29,850 --> 00:03:33,510
server 2 is busy the switch can cue up frames to be delivered later.
