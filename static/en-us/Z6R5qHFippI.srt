1
00:00:00,330 --> 00:00:04,019
Now I'd like you to define the remaining
transitions according to our state

2
00:00:04,019 --> 00:00:05,230
diagram.

3
00:00:05,230 --> 00:00:07,580
This will be a programming exercise.

4
00:00:07,580 --> 00:00:11,450
Please add the appropriate mythic
calls in this area of the code.

5
00:00:12,670 --> 00:00:16,950
Make sure you use action ID 0 for
each of the actions you define.

6
00:00:16,950 --> 00:00:20,350
Since each of the remaining
states besides the initial state

7
00:00:20,350 --> 00:00:22,440
has only a single action.

8
00:00:22,440 --> 00:00:26,370
You may also notice I've added
a getDomain method to the class.

9
00:00:26,370 --> 00:00:29,600
This is workaround to allow
our greater to see the domain

10
00:00:29,600 --> 00:00:33,650
object inside the first MDP class,
for the purposes of our grading.

11
00:00:34,890 --> 00:00:37,710
This sort of method is
discouraged in practice

12
00:00:37,710 --> 00:00:43,180
because it violates encapsulation
by exposing this private member.

13
00:00:43,180 --> 00:00:47,710
For these burlap programming exercises,
clicking test run will compile and

14
00:00:47,710 --> 00:00:49,740
run your code as it is in the editor.

15
00:00:50,920 --> 00:00:54,360
Clicking submit will
run the grading script.

16
00:00:54,360 --> 00:00:55,290
For this exercise,

17
00:00:55,290 --> 00:00:59,190
the grading script will call the
constructor of your first MDP class and

18
00:00:59,190 --> 00:01:03,510
check that all the required transitions
are present and are deterministic.

19
00:01:03,510 --> 00:01:06,050
You can write test
code in the main method

20
00:01:06,050 --> 00:01:08,460
to check that your solution is working.

21
00:01:08,460 --> 00:01:12,210
We started you off by calling
the first MDP constructor, so

22
00:01:12,210 --> 00:01:14,370
you can make sure no
runtime errors are thrown.

23
00:01:15,440 --> 00:01:19,050
If you want, you can dive into
the Burlap API on your own

24
00:01:19,050 --> 00:01:22,660
to learn how to examine your
domain object more closely.

25
00:01:22,660 --> 00:01:25,500
One place you might consider starting,
is in the documentation for

26
00:01:25,500 --> 00:01:27,350
the domain class.

27
00:01:27,350 --> 00:01:31,110
You can use the getAttribute method to
find the number of nodes in your domain

28
00:01:31,110 --> 00:01:35,810
object, checking the validity of
the actions is a bit more complicated.

29
00:01:35,810 --> 00:01:39,300
It involves the getActions
method of the domain class.

30
00:01:39,300 --> 00:01:43,390
As well as the getTransitions
method of the action class.

31
00:01:43,390 --> 00:01:46,847
We'll provide the code used by our
grader in the solution video after

32
00:01:46,847 --> 00:01:50,912
the quiz if you're interested in seeing
how to examine these objects yourself.
