1
00:00:00,500 --> 00:00:04,050
Next lets talk about how [UNKNOWN] uses

2
00:00:04,050 --> 00:00:06,880
the memory's available in the clients for

3
00:00:06,880 --> 00:00:09,860
cooperatively caching the files and reducing the

4
00:00:09,860 --> 00:00:14,262
stress on the management of data files. In

5
00:00:14,262 --> 00:00:16,730
[UNKNOWN] as supposed to traditional Unix file

6
00:00:16,730 --> 00:00:19,640
system, they also worry about the coherence

7
00:00:19,640 --> 00:00:22,400
of files. I mentioned earlier that in

8
00:00:22,400 --> 00:00:25,840
Unix file system, the file server assumes that

9
00:00:25,840 --> 00:00:29,820
it is serving each client independently, and therefore it

10
00:00:29,820 --> 00:00:32,910
doesn't worry about sharing a file, if a particular

11
00:00:32,910 --> 00:00:36,030
file happens to be access by multiple users at

12
00:00:36,030 --> 00:00:38,830
the same time, the server doesn't worry about the coherence

13
00:00:38,830 --> 00:00:40,940
of that file. But on the other hand in

14
00:00:40,940 --> 00:00:45,270
XFS the file system worries about cache coherence and

15
00:00:45,270 --> 00:00:48,230
I have already introduced the idea of cache coherence

16
00:00:48,230 --> 00:00:51,610
in the context of multi processes and distributed shared memory.

17
00:00:51,610 --> 00:00:54,590
So you are familiar with the terminology single writer,

18
00:00:54,590 --> 00:00:59,580
multiple reader meaning that a particular file. We have,

19
00:00:59,580 --> 00:01:02,110
at any point of time, only a single writer.

20
00:01:02,110 --> 00:01:05,209
There cannot be multiple writers to the same file,

21
00:01:05,209 --> 00:01:06,970
but it can have multiple readers at the same

22
00:01:06,970 --> 00:01:11,030
time. And the unit of cache coherence that XFS

23
00:01:11,030 --> 00:01:14,100
maintains is at the level of file blocks, not

24
00:01:14,100 --> 00:01:16,950
an entire file. But at the level of individual

25
00:01:16,950 --> 00:01:19,540
file blocks. So if you look at, a

26
00:01:19,540 --> 00:01:23,790
manager for a file, the guy that is responsible

27
00:01:23,790 --> 00:01:26,640
for the metadata management for the file. It

28
00:01:26,640 --> 00:01:30,230
has information about the files for which it is

29
00:01:30,230 --> 00:01:34,460
the manager. Let's say it has a file f1 for which it has a mana, it is

30
00:01:34,460 --> 00:01:38,110
a manager. Then the metadata in the memory of

31
00:01:38,110 --> 00:01:42,170
this manager will have information about the current state

32
00:01:42,170 --> 00:01:48,750
of that file. For instance, this particular entry says that a file f1 managed by

33
00:01:48,750 --> 00:01:52,180
this manager is being read concurrently by two

34
00:01:52,180 --> 00:01:54,870
different clients, c1 and c2. So there are

35
00:01:54,870 --> 00:02:01,500
two different clients, c1 and c2, and they have copies of this file that they

36
00:02:01,500 --> 00:02:03,940
have retrieved from this manager at some point

37
00:02:03,940 --> 00:02:07,700
of time, which means that the client caches,

38
00:02:07,700 --> 00:02:11,770
c1 and c2, contain the contents of this

39
00:02:11,770 --> 00:02:14,970
file. Now for simplicity, I'm showing this as

40
00:02:14,970 --> 00:02:17,730
a file, but in fact the granularity at

41
00:02:17,730 --> 00:02:21,190
which the coherence and information about files is

42
00:02:21,190 --> 00:02:26,370
kept is at a file block level. So at a block level the manager says a particular

43
00:02:26,370 --> 00:02:32,910
block of a file is in the cache of client C1 and in the cache of

44
00:02:32,910 --> 00:02:37,960
client C2. And yet I'm using the word cache to mean that it is in the memory.

45
00:02:37,960 --> 00:02:43,010
Of these clients. So the semantics that is observed

46
00:02:43,010 --> 00:02:48,680
for cache coherence, a single writer, multiple readers. So if client c3

47
00:02:48,680 --> 00:02:53,240
makes a request to the manager for writing to

48
00:02:53,240 --> 00:02:58,020
this file, f1, and again, I have to mentioned

49
00:02:58,020 --> 00:03:00,610
that, the request is going to be at the granularity

50
00:03:00,610 --> 00:03:03,510
of a file block, but for simplicity, I'm showing

51
00:03:03,510 --> 00:03:06,370
it as a write request for this file f1.

52
00:03:06,370 --> 00:03:09,480
But you understand that the granularity at which this request

53
00:03:09,480 --> 00:03:12,310
is being made is for writing a particular block

54
00:03:12,310 --> 00:03:15,390
of that file. So the manager gets this write request.

55
00:03:15,390 --> 00:03:19,190
It looks up the metadata for that particular file.

56
00:03:19,190 --> 00:03:23,200
And it sees that this file is now currently read-shared

57
00:03:23,200 --> 00:03:25,690
by two different clients, c1 and c2. This

58
00:03:25,690 --> 00:03:28,770
guy wants to write to the file. That results

59
00:03:28,770 --> 00:03:32,910
in a conflict, a read/write conflict, and what the

60
00:03:32,910 --> 00:03:36,090
manager is going to do is basically say, well, if

61
00:03:36,090 --> 00:03:38,210
somebody wants to write to that file I

62
00:03:38,210 --> 00:03:40,770
have to tell the guys that currently have the

63
00:03:40,770 --> 00:03:44,290
file. They cannot have it anymore. So just as

64
00:03:44,290 --> 00:03:48,150
in the case of cash coherence in a multi-processor.

65
00:03:48,150 --> 00:03:55,770
This manage is going to send an invalidation message for the file F1 to C1. And

66
00:03:55,770 --> 00:03:57,650
to C2, and they are going to acknowledge

67
00:03:57,650 --> 00:04:00,630
to the manager saying that yes, we have invalidated

68
00:04:00,630 --> 00:04:04,080
our local copies of the files, and once

69
00:04:04,080 --> 00:04:08,740
the manager gets that indication back from the clients,

70
00:04:08,740 --> 00:04:10,870
at that point the manager can tell the

71
00:04:10,870 --> 00:04:13,300
client C3 that Okay, now you have got dibs

72
00:04:13,300 --> 00:04:15,910
on writing to this file. That's the protocol that

73
00:04:15,910 --> 00:04:18,750
is being observed in [UNKNOWN]. To keep the copies

74
00:04:18,750 --> 00:04:21,230
of the files consistent so at the end of

75
00:04:21,230 --> 00:04:25,400
this exchange C3 will have the right to, right

76
00:04:25,400 --> 00:04:27,850
to this particular file. Now how long does it

77
00:04:27,850 --> 00:04:31,230
have that privilege? Well the write request when it

78
00:04:31,230 --> 00:04:34,500
is granted the client gets the token And the

79
00:04:34,500 --> 00:04:38,360
manager, at any point of time, can revoke the token

80
00:04:38,360 --> 00:04:41,480
that was given to C3. And this in particular

81
00:04:41,480 --> 00:04:44,990
will happen when a future read for the same file

82
00:04:44,990 --> 00:04:47,220
comes to the manager. At that point, the manager will

83
00:04:47,220 --> 00:04:50,210
go to C3 and say, I'm revoking the token from

84
00:04:50,210 --> 00:04:53,460
you. You cannot write to that file anymore. You can

85
00:04:53,460 --> 00:04:57,120
read it because the request that I got is only

86
00:04:57,120 --> 00:05:00,690
a read request and therefore you can keep the file,

87
00:05:00,690 --> 00:05:03,600
but you cannot write to it anymore. If you want

88
00:05:03,600 --> 00:05:05,660
to write it again, then you have to make

89
00:05:05,660 --> 00:05:09,170
a request again. This is the protocol that is observed.

90
00:05:09,170 --> 00:05:11,700
And of course, if a particular client is writing to

91
00:05:11,700 --> 00:05:14,550
a file, and another client also wants to write to

92
00:05:14,550 --> 00:05:16,930
the same file, at that point the manager once

93
00:05:16,930 --> 00:05:21,730
again is going to invoke the token, invalidate the file

94
00:05:21,730 --> 00:05:25,750
at this client, pull back the contents of the file,

95
00:05:25,750 --> 00:05:28,650
and then distribute it to a future requester who wants

96
00:05:28,650 --> 00:05:33,890
to write to the same file. That's how cache coherence works. And using

97
00:05:33,890 --> 00:05:38,820
the fact that copies of the file is existing in multiple

98
00:05:38,820 --> 00:05:44,280
clients excepts as exploits that fact to do cooperative caching.

99
00:05:44,280 --> 00:05:49,210
What that means is that if a client is currently

100
00:05:49,210 --> 00:05:54,120
having a copy of the file, lets say, after this interchange.

101
00:05:54,120 --> 00:05:59,330
C3 has a copy of the file. There is also writing to A future read request comes.

102
00:05:59,330 --> 00:06:04,990
When it comes, that read request can be satisfied by getting the

103
00:06:04,990 --> 00:06:10,770
contents of the file from the cache of C3. And that is what cooperative

104
00:06:10,770 --> 00:06:15,330
caching is all about, where instead of going to the disk to retrieve the file

105
00:06:15,330 --> 00:06:19,500
>> We can actual get the file content from the cache of one of the clients

106
00:06:19,500 --> 00:06:21,240
that happens to have a copy of the file.
