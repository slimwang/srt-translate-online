1
00:00:00,000 --> 00:00:04,000
So let's work together to extend our HTML Interpreter

2
00:00:04,000 --> 00:00:06,000
to handle these new JavaScript elements--

3
00:00:06,000 --> 00:00:08,000
just like we saw a few seconds ago.

4
00:00:08,000 --> 00:00:10,000
Just like we saw in the last example,

5
00:00:10,000 --> 00:00:12,000
typically, the parse tree for HTML

6
00:00:12,000 --> 00:00:14,000
will be a list of elements.

7
00:00:14,000 --> 00:00:16,000
So we'll just run down and process each one, in turn.

8
00:00:16,000 --> 00:00:19,000
How we process it depends on its type.

9
00:00:19,000 --> 00:00:22,000
Is it a word, a tag, JavaScript?

10
00:00:22,000 --> 00:00:24,000
One of the easiest cases for us is

11
00:00:24,000 --> 00:00:27,000
if it's a word_element, we just call our graphics library

12
00:00:27,000 --> 00:00:30,000
and add that word to the final Web page.

13
00:00:30,000 --> 00:00:34,000
We've already seen what to do with <tag>_ elements in a previous quiz,

14
00:00:34,000 --> 00:00:36,000
so let's just do JavaScript now.

15
00:00:36,000 --> 00:00:39,000
We can get the text of the embedded JavaScript fragment

16
00:00:39,000 --> 00:00:41,000
out of the Abstract Syntax Tree.

17
00:00:41,000 --> 00:00:44,000
That's going to be something like: "document.write(55);"--

18
00:00:44,000 --> 00:00:46,000
could be more complicated, calling Fibonacci functions--

19
00:00:46,000 --> 00:00:48,000
doing arbitrary computation, in fact.

20
00:00:48,000 --> 00:00:50,000
Here "js" stands for JavaScript,

21
00:00:50,000 --> 00:00:52,000
and this is the text of the program.

22
00:00:52,000 --> 00:00:54,000
This next bit is a bit arbitrary.

23
00:00:54,000 --> 00:00:56,000
I'm going to walk through all the steps, but you should

24
00:00:56,000 --> 00:00:58,000
not worry about having to guess these.

25
00:00:58,000 --> 00:01:02,000
These come out of nowhere or come from library integration.

26
00:01:02,000 --> 00:01:04,000
Let's say that we've written down our

27
00:01:04,000 --> 00:01:06,000
JavaScript token definitions

28
00:01:06,000 --> 00:01:09,000
in some other file called: jstokens.

29
00:01:09,000 --> 00:01:11,000
I'm going to need to build a lexer

30
00:01:11,000 --> 00:01:14,000
to break this string down into tokens.

31
00:01:14,000 --> 00:01:17,000
Similarly, let's say I've put all of my

32
00:01:17,000 --> 00:01:19,000
JavaScript grammar rules somewhere else.

33
00:01:19,000 --> 00:01:21,000
I'm not showing them right here, but they're saved

34
00:01:21,000 --> 00:01:23,000
somewhere else on the disc,

35
00:01:23,000 --> 00:01:25,000
in a file called: jsgrammar.

36
00:01:25,000 --> 00:01:28,000
Once I break this text down into tokens,

37
00:01:28,000 --> 00:01:30,000
I'm going to need to check and see if it's valid

38
00:01:30,000 --> 00:01:32,000
JavaScript and build a parse tree.

39
00:01:32,000 --> 00:01:36,000
"lex" is the name of our library module for doing lexing.

40
00:01:36,000 --> 00:01:41,000
"yacc" is the name for our library module for doing parsing.

41
00:01:41,000 --> 00:01:44,000
"yacc" does not sound like it should be doing parsing.

42
00:01:44,000 --> 00:01:46,000
It stands for: Yet Another Compiler-Compiler,

43
00:01:46,000 --> 00:01:49,000
a tool for making compilers or interpreters.

44
00:01:49,000 --> 00:01:52,000
In fact, just like the JavaScript interpreter that we're making now.

45
00:01:52,000 --> 00:01:55,000
For now, this name is just a historical accident.

46
00:01:55,000 --> 00:01:59,000
Here's the real exciting part: I'm going to call our JavaScript parser

47
00:01:59,000 --> 00:02:02,000
and ask it to parse the text

48
00:02:02,000 --> 00:02:04,000
from the embedded JavaScript fragment,

49
00:02:04,000 --> 00:02:09,000
using the lexer--the token definitions--from jslexer.

50
00:02:09,000 --> 00:02:13,000
So jstree now holds a parse tree for JavaScript.

51
00:02:13,000 --> 00:02:15,000
And now the quiz for you

52
00:02:15,000 --> 00:02:17,000
is just to fill in these two blanks.

53
00:02:17,000 --> 00:02:19,000
I have this parse tree for JavaScript,

54
00:02:19,000 --> 00:02:22,000
and now I want to do--(something).

55
00:02:22,000 --> 00:02:24,000
I want to call our JavaScript interpreter

56
00:02:24,000 --> 00:02:27,000
and ask it to interpret (something--you tell me)

57
00:02:27,000 --> 00:02:30,000
and then, eventually, I want to call the graphics library

58
00:02:30,000 --> 00:02:33,000
and draw some word in the Web page.

59
00:02:33,000 --> 99:59:59,999
Which word should it be? Let's fill in the blanks.
