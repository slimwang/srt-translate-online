1
00:00:00,140 --> 00:00:03,687
So let's think about the maximum number of iterations that we might have.

2
00:00:03,687 --> 00:00:06,209
What graph is going to give us the most iterations?

3
00:00:06,209 --> 00:00:10,266
And that graph is going to be this awful looking linear chain.

4
00:00:10,266 --> 00:00:12,525
How many iterations is that going to have?

5
00:00:12,525 --> 00:00:15,526
Well it's going to have on the order of V iterations,

6
00:00:15,526 --> 00:00:18,189
because we are going to have V vertices here.

7
00:00:18,189 --> 00:00:21,752
And how much work are we going to do in each one of those iterations?

8
00:00:21,752 --> 00:00:26,271
Well each one of these iterations, we know that we will visit all E edges,

9
00:00:26,271 --> 00:00:30,238
so if we take the amount of work here as a product between V and E,

10
00:00:30,238 --> 00:00:35,165
we know that our final answer is going to be on the order of V times E,

11
00:00:35,165 --> 00:00:37,882
so we know that it's at least going to be on the order of V,

12
00:00:37,882 --> 00:00:40,143
and we know that it's at least going to be in the order of E.

13
00:00:40,143 --> 00:00:42,561
Probably in any reasonable graph,

14
00:00:42,561 --> 00:00:47,001
there's going to be more edges than vertices; otherwise, it's not a very interesting graph,

15
00:00:47,001 --> 00:00:53,938
and if that's the case, we know that the overall work complexity is going to be at least order of V squared.

16
00:00:53,938 --> 00:00:58,043
It's quadratic in the number of vertices, and that's bad.

17
00:00:58,043 --> 00:01:00,252
That is a very bad property.

18
00:01:00,252 --> 00:01:02,781
And so I told you in the beginning of the discussion here

19
00:01:02,781 --> 00:01:05,281
that this was a crummy algorithm and this is why.

20
00:01:05,281 --> 00:01:11,162
We really do not want an algorithm that is quadratic in the number of vertices.
