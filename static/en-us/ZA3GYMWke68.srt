1
00:00:00,000 --> 00:00:04,000
This first question asks us to make a few statements about formal grammars.

2
00:00:04,000 --> 00:00:07,000
Let's go over a little bit of vocabulary.

3
00:00:07,000 --> 00:00:09,000
A language is simply a set of strings.

4
00:00:09,000 --> 00:00:12,000
A regular language is a type of language.

5
00:00:12,000 --> 00:00:15,000
In particular, it's a set of strings that can be represented by

6
00:00:15,000 --> 00:00:18,000
a finite-state machine or a regular expression.

7
00:00:18,000 --> 00:00:22,000
A context-free language is also a set of strings

8
00:00:22,000 --> 00:00:25,000
but can be represented by context-free grammar,

9
00:00:25,000 --> 00:00:28,000
and what these 3 questions are asking us in this problem

10
00:00:28,000 --> 00:00:33,000
is to determine the relationship between a regular language and a context-free language,

11
00:00:33,000 --> 00:00:39,000
so let's say this bubble represents the set of regular languages.

12
00:00:39,000 --> 00:00:41,000
It's a set of sets of strings.

13
00:00:41,000 --> 00:00:45,000
And let's say this blob is the set of context-free languages.

14
00:00:45,000 --> 00:00:49,000
What we want to determine is how we can connect these two.

15
00:00:49,000 --> 00:00:54,000
Is it the case that no regular languages are context-free languages and vice versa?

16
00:00:54,000 --> 00:00:57,000
Or perhaps there are some regular languages that are not context-free.

17
00:00:57,000 --> 00:01:00,000
There are some context-free languages that are not regular,

18
00:01:00,000 --> 00:01:03,000
but there are some languages that are regular and context-free.

19
00:01:03,000 --> 00:01:08,000
And the last 2 possibilities are that all regular languages are context-free and vice versa.

20
00:01:08,000 --> 00:01:12,000
This kind of looks like a Pac-Man. Nom, nom.

21
00:01:12,000 --> 00:01:14,000
As it turns out, this diagram is the correct one.

22
00:01:14,000 --> 00:01:19,000
All regular languages are context-free, but not all context-free languages are regular.

23
00:01:19,000 --> 00:01:23,000
Briefly in lecture, Wes outlined the proof that all regular languages are context-free.

24
00:01:23,000 --> 00:01:27,000
The way the proof works is that you show that given an arbitrary

25
00:01:27,000 --> 00:01:31,000
finite-state machine, you can create a context-free grammar

26
00:01:31,000 --> 00:01:34,000
that embodies it, that represents the same functionality.

27
00:01:34,000 --> 00:01:38,000
Namely, it generates the same exact set of strings,

28
00:01:38,000 --> 00:01:41,000
and to show that there are some context-free languages that are not regular,

29
00:01:41,000 --> 00:01:43,000
we just have to come up with an example.

30
00:01:43,000 --> 00:01:47,000
An example of this is this set of matching parentheses.

31
00:01:47,000 --> 00:01:51,000
As it turns out--and I'm not going to prove it here--you can't represent this language

32
00:01:51,000 --> 00:01:53,000
with a regular expression.

33
00:01:53,000 --> 00:01:56,000
That's because you can't count

34
00:01:56,000 --> 00:01:59,000
how many times you see a left parentheses

35
00:01:59,000 --> 00:02:03,000
and then require that you see exactly that many right parentheses.

36
00:02:03,000 --> 00:02:06,000
There's just no form of counting in a regular expression.

37
00:02:06,000 --> 00:02:08,000
You can't hold that much state.

38
00:02:08,000 --> 00:02:12,000
Given that review, let's go over the actual questions.

39
00:02:12,000 --> 00:02:17,000
If a language is regular, than that language is also context-free.

40
00:02:17,000 --> 00:02:21,000
This is always true because we have our Pac-Man diagram here,

41
00:02:21,000 --> 00:02:24,000
and also because you can take any regular language

42
00:02:24,000 --> 00:02:26,000
and represent it with a context-free grammar.

43
00:02:26,000 --> 00:02:30,000
You can take any finite-state machine and represent it with a context-free grammar.

44
00:02:30,000 --> 00:02:34,000
If a language L is context-free, than that language L is also regular.

45
00:02:34,000 --> 00:02:36,000
This is sometimes true.

46
00:02:36,000 --> 00:02:40,000
If we have a regular language, that language is context-free,

47
00:02:40,000 --> 00:02:42,000
and, well, it's also regular.

48
00:02:42,000 --> 00:02:46,000
We have a case where sometimes a context-free language is regular.

49
00:02:46,000 --> 00:02:49,000
The question is is this always true, and the answer is no.

50
00:02:49,000 --> 00:02:54,000
If we have a context-free language such as the matching parentheses I went over before,

51
00:02:54,000 --> 00:02:57,000
this is a language that's context-free, but it's not regular.

52
00:02:57,000 --> 00:03:00,000
Sometimes this statement is true, and sometimes it's not.

53
00:03:00,000 --> 00:03:04,000
If 2 context-free grammars, G1 and G2,

54
00:03:04,000 --> 00:03:08,000
both accept an infinite number of strings, than they accept the same strings.

55
00:03:08,000 --> 00:03:10,000
This is sometimes true.

56
00:03:10,000 --> 00:03:12,000
Let's think of a couple examples.

57
00:03:12,000 --> 00:03:14,000
Well, there's a straightforward example that shows

58
00:03:14,000 --> 00:03:17,000
that this is a statement that can be true,

59
00:03:17,000 --> 00:03:21,000
and that is when G1 and G2 are the same grammar.

60
00:03:21,000 --> 00:03:26,000
Let's say we have the language ba* that Wes likes to use in the examples.

61
00:03:26,000 --> 00:03:33,000
We have baaa, baaaaa.

62
00:03:33,000 --> 00:03:35,000
All right, so we have ba*.

63
00:03:35,000 --> 00:03:38,000
Let's say we have the grammar G2.

64
00:03:38,000 --> 00:03:40,000
And you know what?

65
00:03:40,000 --> 00:03:42,000
Let's make it the same exact language.

66
00:03:42,000 --> 00:03:44,000
I have 2 grammars.

67
00:03:44,000 --> 00:03:46,000
Both accept an infinite number of strings.

68
00:03:46,000 --> 00:03:50,000
They happen to be the same strings, so this statement is sometimes true.

69
00:03:50,000 --> 00:03:52,000
We didn't say G1 and G2 had to be unique.

70
00:03:52,000 --> 00:03:56,000
You could also come up with examples where G1 and G2 are different,

71
00:03:56,000 --> 00:04:02,000
but they're the same exact string, so you could do baa*.

72
00:04:02,000 --> 00:04:06,000
And you'll also note I used a regular expression for my grammar,

73
00:04:06,000 --> 00:04:11,000
but all regular languages are context-free, so this is perfectly acceptable.

74
00:04:11,000 --> 00:04:14,000
Let's come up with a situation where this isn't true.

75
00:04:14,000 --> 00:04:19,000
Let's change G2 so that instead of ba*

76
00:04:19,000 --> 00:04:24,000
it's fa*, so we've got fa, faaa, and faa.

77
00:04:24,000 --> 00:04:26,000
I don't know, a lot of a's.

78
00:04:26,000 --> 00:04:28,000
These are both infinite, infinite grammars.

79
00:04:28,000 --> 00:04:30,000
They're regular expressions, therefore, they're context-free,

80
00:04:30,000 --> 00:04:34,000
but they don't accept the same strings, so we've come up with a case

81
00:04:34,000 --> 00:04:37,000
where this can be true, and we come up with a case where it can be false,

82
00:04:37,000 --> 99:59:59,999
so we're going to say it's sometimes true.
