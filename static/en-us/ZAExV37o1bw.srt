1
00:00:00,457 --> 00:00:05,409
[BLANK_AUDIO]

2
00:00:05,409 --> 00:00:09,630
The heart and soul of this course are its projects. I can't really teach you to

3
00:00:09,630 --> 00:00:13,600
design. You have to learn it by doing it yourself. The best I can do is to

4
00:00:13,600 --> 00:00:17,050
introduce you to some specific techniques, such as modeling, and technology,

5
00:00:17,050 --> 00:00:21,960
such as UML, that you can use in thinking about how to solve design problems.

6
00:00:21,960 --> 00:00:25,640
The learning experience comes from applying them to a problem and getting a feel

7
00:00:25,640 --> 00:00:31,010
for how they work. A course on software design faces an important challenge.

8
00:00:31,010 --> 00:00:35,550
Interesting design typically occurs when confronting large complex problems but

9
00:00:35,550 --> 00:00:39,400
those can't be dealt with within the constraints of a single course.

10
00:00:39,400 --> 00:00:43,680
I have taken a different approach to structuring projects called design studies.

11
00:00:43,680 --> 00:00:47,060
The idea here comes from a world of building architecture in which

12
00:00:47,060 --> 00:00:51,170
the architect often constructs a variety of small scale models in order to

13
00:00:51,170 --> 00:00:55,840
explore a design space. For each of the projects in this course,

14
00:00:55,840 --> 00:00:59,540
I ask you to solve it several different ways and then to systematically study

15
00:00:59,540 --> 00:01:03,530
the differences. The projects themselves are relatively small, and

16
00:01:03,530 --> 00:01:06,730
although some coding is involved, you will be working on teams with

17
00:01:06,730 --> 00:01:10,550
enough members that you should have enough resources to get the job done, and

18
00:01:10,550 --> 00:01:15,670
then study the variations. I've also tried to make the projects similar to

19
00:01:15,670 --> 00:01:19,450
those in the real world. The first similarity is that you will be

20
00:01:19,450 --> 00:01:23,700
working with team members that you are not colocated with. You will have to

21
00:01:23,700 --> 00:01:28,600
learn to quickly organize yourself to work in a parallel distributive fashion.

22
00:01:28,600 --> 00:01:33,040
The second similarity, is that the projects are some what open ended. That is,

23
00:01:33,040 --> 00:01:35,170
though they are basically requirements, there is room for

24
00:01:35,170 --> 00:01:38,990
you to be creative in your solutions, and to go beyond those requirements,

25
00:01:38,990 --> 00:01:42,990
if you believe you can significantly add value to the product you are producing.

26
00:01:42,990 --> 00:01:46,640
Of course, the danger with an open ended project is you might get engaged in

27
00:01:46,640 --> 00:01:51,220
polishing an extension and not have a working solution to the basic problem.

28
00:01:51,220 --> 00:01:55,050
I strongly suggest that you tackle these projects in an incremental manner,

29
00:01:55,050 --> 00:01:58,960
that is, begin by producing a trivial working program providing only

30
00:01:58,960 --> 00:02:02,610
minimal functionality then add one new feature at a time.

31
00:02:02,610 --> 00:02:05,460
Ensuring that the older functionality still works.

32
00:02:05,460 --> 00:02:10,060
The third similarity to the real world is that the projects are phased. What

33
00:02:10,060 --> 00:02:14,210
this means is that the three projects all deal with the same problem domain and

34
00:02:14,210 --> 00:02:18,580
each subsequent project builds on the solutions developed in the previous ones.

35
00:02:18,580 --> 00:02:22,780
In fact, you're specifically encouraged to make use of code. From your own or

36
00:02:22,780 --> 00:02:26,430
other teams that was developed earlier. This situation is typical of

37
00:02:26,430 --> 00:02:30,170
the real world, where successful projects often have long lifetimes in

38
00:02:30,170 --> 00:02:34,140
which the additional features are added and released to customers.

39
00:02:34,140 --> 00:02:37,860
The fourth similarity is that the members of your project team change for

40
00:02:37,860 --> 00:02:41,400
each phase. In the real world, turnover of teams is common and

41
00:02:41,400 --> 00:02:45,860
you have to learn to work with a variety of people. One specific benefit is that

42
00:02:45,860 --> 00:02:50,070
by having team members with different teams, you will have familiarity with and

43
00:02:50,070 --> 00:02:53,690
access to a variety of working solutions from which you can choose components

44
00:02:53,690 --> 00:02:57,990
from previous phases. More over, managing teams in this fashion provides

45
00:02:57,990 --> 00:03:01,740
a motivation for designing your solutions in a way that they can be reused on

46
00:03:01,740 --> 00:03:05,320
future projects. Even if you don't know exactly what those projects are.
