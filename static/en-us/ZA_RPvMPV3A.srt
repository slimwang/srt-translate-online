1
00:00:00,190 --> 00:00:02,575
As part of building
a fluid user experience,

2
00:00:02,575 --> 00:00:06,734
it's important you avoid leaving your
user hanging or waiting for feedback.

3
00:00:06,734 --> 00:00:09,878
As a general rule, for
any action the user takes in your app,

4
00:00:09,878 --> 00:00:13,529
you should give some visible change or
feedback within half a second.

5
00:00:13,529 --> 00:00:15,657
If a task is taking
a particularly long time,

6
00:00:15,657 --> 00:00:19,430
it's a good idea to show the user
that progress is being made.

7
00:00:19,430 --> 00:00:21,648
As you can see here in
the material design spec,

8
00:00:21,648 --> 00:00:24,930
there are guidelines on how to show
progress and activity to the user.

9
00:00:24,930 --> 00:00:27,896
There are lots of great examples and
ideas on this page, so

10
00:00:27,896 --> 00:00:29,419
be sure to check it out later.

11
00:00:29,419 --> 00:00:33,051
Now I want to point out that there
a linear progress indicators,

12
00:00:33,051 --> 00:00:36,370
as well as circular progress indicators.

13
00:00:36,370 --> 00:00:39,580
Indeterminate means you don't know
how long the task will take, so

14
00:00:39,580 --> 00:00:41,620
it's a generic loading indicator.

15
00:00:41,620 --> 00:00:44,170
Determinate means that you know
exactly what percentage of the work is

16
00:00:44,170 --> 00:00:47,730
completed, so
it gradually completes the whole circle.

17
00:00:47,730 --> 00:00:48,510
In our case,

18
00:00:48,510 --> 00:00:51,630
when they user opens their app,
they should see some immediate signal

19
00:00:51,630 --> 00:00:56,250
that we're working on getting their data
such as a circular progress indicator.

20
00:00:56,250 --> 00:00:58,857
Now when the results
arrive from the server,

21
00:00:58,857 --> 00:01:02,767
we should hide the progress indicator
and show the data in the list or

22
00:01:02,767 --> 00:01:05,729
sometimes there may be no
results from the server.

23
00:01:05,729 --> 00:01:09,620
So, then we would hide the loading
indicator and show our empty view.

24
00:01:09,620 --> 00:01:12,657
Fortunately, Android contains
a nice Progress Bar view.

25
00:01:12,657 --> 00:01:15,085
One version of which is
a spinning loading indicator.

26
00:01:15,085 --> 00:01:17,823
Since we don't know how long
the network request will take,

27
00:01:17,823 --> 00:01:20,410
we'll use the indeterminate
version of the indicator.

28
00:01:20,410 --> 00:01:24,165
In this quiz, you're going to add
a loading indicator in the app when

29
00:01:24,165 --> 00:01:26,254
the network request is in progress.

30
00:01:26,254 --> 00:01:30,541
So the first thing you want to do is
in the earthquake_activity xml, add

31
00:01:30,541 --> 00:01:35,128
a ProgressBar view as a sibling to the
ListView in the empty state TextView.

32
00:01:35,128 --> 00:01:36,940
Now, it should be centered
within the screen.

33
00:01:36,940 --> 00:01:39,958
So check the cheat sheet from
the first course, for example,

34
00:01:39,958 --> 00:01:42,410
on how to declare a progress
view in an XML layout.

35
00:01:42,410 --> 00:01:44,981
Then in
the EarthquakeAcitivity.java file,

36
00:01:44,981 --> 00:01:48,901
I want you to hide the loading indicator
by setting the visibility to gone

37
00:01:48,901 --> 00:01:51,160
when the onLoadFinished() is called.

38
00:01:52,530 --> 00:01:57,100
Lastly, I want you to test both cases
work by temporarily modifying the code.

39
00:01:57,100 --> 00:01:58,400
So, see below for some hints.
