1
00:00:00,000 --> 00:00:03,000
Everything we've done so far has been pretty limited,

2
00:00:03,000 --> 00:00:06,000
that we had to do the same thing on all data.

3
00:00:06,000 --> 00:00:09,000
We couldn't do anything that really depended on what the data was.

4
00:00:09,000 --> 00:00:12,000
What we're going to do next is figure out a way to make code behave differently

5
00:00:12,000 --> 00:00:14,000
based on decisions.

6
00:00:14,000 --> 00:00:17,000
The first thing we're going to do is figure out some ways to make comparisons,

7
00:00:17,000 --> 00:00:20,000
so we have a way to test and decide what we should do.

8
00:00:20,000 --> 00:00:24,000
Python provides lots of different operators for doing comparisons.

9
00:00:24,000 --> 00:00:26,000
There are things similar to what we've used in math.

10
00:00:26,000 --> 00:00:29,000
We have a less than sign that compares 2 numbers.

11
00:00:29,000 --> 00:00:30,000
We have the greater than.

12
00:00:30,000 --> 00:00:33,000
We have a less than or equal to. Things like this...

13
00:00:33,000 --> 00:00:39,000
All of these operate on numbers, so we can have a number followed by

14
00:00:39,000 --> 00:00:43,000
a comparison operator, followed by another number.

15
00:00:43,000 --> 00:00:47,000
This is very similar to the grammar we saw earlier for arithmetic expressions,

16
00:00:47,000 --> 00:00:50,000
but now instead of having a plus or times here,

17
00:00:50,000 --> 00:00:52,000
we can have something that does a comparison.

18
00:00:52,000 --> 00:00:54,000
The output of a comparison though is not a number.

19
00:00:54,000 --> 00:00:59,000
It's a Boolean value, and a Boolean value is 1 of 2 things.

20
00:00:59,000 --> 00:01:04,000
It's either the value True or the value False.

21
00:01:04,000 --> 00:01:07,000
Let's see some examples in the Python interpreter.

22
00:01:07,000 --> 00:01:10,815
First, we'll use the less than to compare 2 and 3.

23
00:01:10,815 --> 00:01:14,000
So 2 is less than 3, so we expect the result to be true.

24
00:01:14,000 --> 00:01:17,000
When we run this, we see that the result is true.

25
00:01:17,000 --> 00:01:21,000
If we compare a number greater than 3, let's say 21 < 3.

26
00:01:21,000 --> 00:01:23,000
The result will be false.

27
00:01:23,000 --> 00:01:26,000
We can have any expression we want with a comparison,

28
00:01:26,000 --> 00:01:29,950
so we can do 7 * 3 < 21.

29
00:01:29,950 --> 00:01:33,692
When we run that, we also get false because 7 x 3 = 21,

30
00:01:33,692 --> 00:01:36,000
which is not less than 21.

31
00:01:36,000 --> 00:01:40,046
Another comparison operator we can use is not equal to.

32
00:01:40,046 --> 00:01:44,000
So != means not equal to.

33
00:01:44,000 --> 00:01:50,708
So 7 * 3 != 21 is false because 7 x 3 is equal to 21.

34
00:01:50,708 --> 00:01:56,000
If we want to do equality comparison, we don't use the equal sign,

35
00:01:56,000 --> 00:01:57,000
we use 2 equal signs.

36
00:01:57,000 --> 00:01:59,000
We call that the double equal.

37
00:01:59,000 --> 00:02:05,000
So now we have 7 * 3 == 21, and the result there is true.

38
00:02:05,000 --> 00:02:08,000
Now we're going to have a quiz to see if you can figure out why we need to use

39
00:02:08,000 --> 00:02:11,369
the == here instead of just the single =.

40
00:02:14,754 --> 00:02:19,000
The question is, why is the equality comparison done using ==,

41
00:02:19,000 --> 00:02:24,000
having 2 equals, instead of just a single = sign?

42
00:02:24,000 --> 00:02:29,000
The possible answers: Because = means approximately equal,

43
00:02:29,000 --> 00:02:32,000
and we want to do exact equality comparisons.

44
00:02:32,000 --> 00:02:36,000
Because we needed to use 2 characters for the not equal comparison,

45
00:02:36,000 --> 00:02:38,000
and we wanted the equal to be the same length.

46
00:02:38,000 --> 00:02:42,000
Because Guido, the designer of Python, really likes = signs.

47
00:02:42,000 --> 00:02:45,000
Because the single = sign means assignment,

48
00:02:45,000 --> 00:02:49,000
or it doesn't really matter. We can use either == or =.
