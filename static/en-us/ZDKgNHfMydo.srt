1
00:00:00,260 --> 00:00:04,460
One possibility for increasing the initial compromise rate,

2
00:00:04,460 --> 00:00:07,060
or designing a very fast spreading worm, is

3
00:00:07,060 --> 00:00:12,400
to create a hit list, or a list of vulnerable hosts ahead of time. That curve

4
00:00:12,400 --> 00:00:14,400
we just saw shows that the time to

5
00:00:14,400 --> 00:00:18,130
infect the first 10,000 hosts dominates infection time.

6
00:00:19,130 --> 00:00:22,400
So if we start by performing stealthy scans

7
00:00:22,400 --> 00:00:25,320
or some reconnaissance to construct a list of

8
00:00:25,320 --> 00:00:29,200
vulnerable hosts before we start spreading, then

9
00:00:29,200 --> 00:00:30,780
we can get rid of that initial flat

10
00:00:30,780 --> 00:00:32,810
part of the curve where the worm is

11
00:00:32,810 --> 00:00:36,200
effectively dormant. The second approach is to use

12
00:00:36,200 --> 00:00:40,200
something called permutation scanning Where every compromised

13
00:00:40,200 --> 00:00:43,360
host has a shared permutation of an IP

14
00:00:43,360 --> 00:00:47,270
address list to scan for vulnerabilities. Now if

15
00:00:47,270 --> 00:00:50,350
this list is randomly permuted and a particular

16
00:00:50,350 --> 00:00:56,220
host starts scanning from its own IP address in the list And works down,

17
00:00:56,220 --> 00:00:59,870
then different effected hosts will start scanning

18
00:00:59,870 --> 00:01:02,090
from different parts of this list ensuring

19
00:01:02,090 --> 00:01:04,860
that compromised hosts don't duplicate each other's

20
00:01:04,860 --> 00:01:08,390
work. One worm that exploited these techniques

21
00:01:08,390 --> 00:01:11,680
to spread particularly quickly was the Slammer

22
00:01:11,680 --> 00:01:16,250
worm, which spread in January of 2003.

23
00:01:16,250 --> 00:01:19,880
Exploiting a buffer overflow in Microsoft's SQL

24
00:01:19,880 --> 00:01:23,610
sever. In addition to using fast scanning techniques,

25
00:01:23,610 --> 00:01:29,990
the entire slammer code fit in a single small UDP packet. The UDP packet contain

26
00:01:29,990 --> 00:01:32,500
the worm binary, followed by an overflow

27
00:01:32,500 --> 00:01:35,660
pointer back to itself. It would say classic

28
00:01:35,660 --> 00:01:38,940
buffer overflow combined with random scanning. Once

29
00:01:38,940 --> 00:01:41,300
the control is passed to the worm code,

30
00:01:41,300 --> 00:01:44,520
it randomly generated IP addresses and attempted to

31
00:01:44,520 --> 00:01:48,490
send a copy of itself to Port 1434

32
00:01:48,490 --> 00:01:52,170
on other hosts. One brilliant aspect of the

33
00:01:52,170 --> 00:01:55,070
slammer worm, is that because it was spread

34
00:01:55,070 --> 00:01:58,350
by via single UDP packet, it was connectionless,

35
00:01:58,350 --> 00:02:00,830
meaning that it could spread. And was no

36
00:02:00,830 --> 00:02:04,030
longer limited by the latency of network round

37
00:02:04,030 --> 00:02:06,300
trip time, but only by the bandwidth of

38
00:02:06,300 --> 00:02:09,310
the network, the worm caused $1.2

39
00:02:09,310 --> 00:02:13,300
billion dollars in damage, and temporarily knocked

40
00:02:13,300 --> 00:02:16,970
out many elements of critical infrastructue, including

41
00:02:16,970 --> 00:02:19,940
Bank of America's ATM network. An entire

42
00:02:19,940 --> 00:02:25,450
cell phone network in South Korea, and five route DNS servers, as well as

43
00:02:25,450 --> 00:02:29,030
Continental Airlines' ticket processing software. The worm

44
00:02:29,030 --> 00:02:31,930
actually did not have a malicious payload,

45
00:02:31,930 --> 00:02:36,610
but the bandwidth exhaustion on the network caused resource exhaustion on

46
00:02:36,610 --> 00:02:41,270
all the infected machines. Here's a picture of the hosts around

47
00:02:41,270 --> 00:02:46,390
the world that Slammer infected. This damage was inflicted in just

48
00:02:46,390 --> 00:02:51,410
thirty minutes, due to the very lightweight nature in which Slammer spread.
