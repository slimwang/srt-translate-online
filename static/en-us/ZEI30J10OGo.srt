1
00:00:00,314 --> 00:00:03,013
This will be the equivalent of the long procedure we had before

2
00:00:03,013 --> 00:00:07,647
We are checking if the name at position "zero" is equal to D

3
00:00:07,647 --> 00:00:11,330
or the result of name at position zero is equal to N

4
00:00:11,330 --> 00:00:13,814
That produces the same result

5
00:00:13,814 --> 00:00:16,280
and we've introduced the new construct "or"

6
00:00:16,280 --> 00:00:21,313
which gives us the logic "or" of the two operands on its left and right

7
00:00:21,313 --> 00:00:24,930
so just to see how "or" works

8
00:00:24,930 --> 00:00:26,363
we can use "or" like this

9
00:00:26,363 --> 00:00:32,064
So if we have "True" or "False", the value of "True" or "False" is "True"

10
00:00:32,064 --> 00:00:39,463
If we have "False" or "True", that also has the value "True"

11
00:00:39,463 --> 00:00:46,947
"True" or "True" is also "True", but "False" or "False" is "False"

12
00:00:46,947 --> 00:00:50,214
And I'm showing these boolean literals

13
00:00:50,214 --> 00:00:54,981
This could be any expression we want, like we use the name at position zero here

14
00:00:54,981 --> 00:01:00,613
The one important thing that "or" does is different from other operators

15
00:01:00,613 --> 00:01:03,814
It only evaluates what it needs to

16
00:01:03,814 --> 00:01:06,346
So here's an important example

17
00:01:06,346 --> 00:01:10,264
So we could say "True" or "this_is_an_error"

18
00:01:10,264 --> 00:01:12,731
That will also evaluate to "True"

19
00:01:12,731 --> 00:01:16,714
even though if I just look at "this_is_an_error" by itself

20
00:01:16,714 --> 00:01:18,712
that's an undefinable variable

21
00:01:18,712 --> 00:01:21,080
We didn't define the variable "this_is_an_error"

22
00:01:21,080 --> 00:01:22,996
but when we evaluate the "or" expression

23
00:01:22,996 --> 00:01:27,563
because we already found that the first part was "True", we don't get an error

24
00:01:27,563 --> 00:01:31,581
If we try to evaluate instead of "True" or "this_is_an_error"

25
00:01:31,581 --> 00:01:34,747
if we evaluate "False" or "this_is_an_error"

26
00:01:34,747 --> 00:01:38,546
it's necessary to look at the second operand and then we will get an error

27
00:01:38,546 --> 00:01:42,080
So let's try that, we are doing "False" or" this_is_an_error"

28
00:01:42,080 --> 00:01:45,363
we get an error because since the first operand was "False"

29
00:01:45,363 --> 00:01:48,680
to know whether the "or" is "True" or "False", we need to look at the second operand

30
00:01:48,680 --> 00:01:50,546
and that's not defined

31
00:01:50,546 --> 00:01:53,679
This behavior of "or" will turn out to be very useful

32
00:01:53,679 --> 00:01:59,315
We'll see other places where we rely on the second operand not getting evaluated

33
00:01:59,315 --> 00:02:01,180
if the first one is "True"

34
00:02:01,180 --> 00:02:06,330
So to summarize, here's what the "or" construct looks like

35
00:02:06,330 --> 00:02:09,464
So if the first expression evaluates to "True"

36
00:02:09,464 --> 00:02:13,063
then the value of the "or" construct is "True"

37
00:02:13,063 --> 00:02:15,746
and there's no need to evaluate the second expression

38
00:02:15,746 --> 00:02:18,663
and in fact the Python interpreter does not evaluate it

39
00:02:18,663 --> 00:02:21,814
If the value of the first expression is "False"

40
00:02:21,814 --> 00:02:25,814
then the value of the "or" construct is the value of the second expression
