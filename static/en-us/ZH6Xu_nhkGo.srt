1
00:00:00,000 --> 00:00:02,000
You've just learned how to encode a grammar

2
00:00:02,000 --> 00:00:04,000
for HTML and JavaScript,

3
00:00:04,000 --> 00:00:06,000
and that is no mean feat.

4
00:00:06,000 --> 00:00:08,000
In fact, a number of years ago,

5
00:00:08,000 --> 00:00:11,000
for my research, I had to do something similar--

6
00:00:11,000 --> 00:00:13,000
but for perhaps an evil or more production,

7
00:00:13,000 --> 00:00:16,000
more popular language--Java.

8
00:00:16,000 --> 00:00:18,000
We wanted to analyze Java programs,

9
00:00:18,000 --> 00:00:20,000
to look for particular errors

10
00:00:20,000 --> 00:00:23,000
and there weren't really any convenient parsers

11
00:00:23,000 --> 00:00:25,000
available at the time.

12
00:00:25,000 --> 00:00:27,000
So I was faced with a decision:

13
00:00:27,000 --> 00:00:29,000
Should I use a tool that didn't really fit the bill?

14
00:00:29,000 --> 00:00:31,000
Or should I try and write my own?

15
00:00:31,000 --> 00:00:34,000
And I thought, boy, Java's a Real World production language;

16
00:00:34,000 --> 00:00:37,000
it's got to be really hideous to write down a parser for it--

17
00:00:37,000 --> 00:00:41,000
I'm sure its grammar is really hard to follow.

18
00:00:41,000 --> 00:00:44,000
So I figured I'd give myself a day to look at the official Java grammar

19
00:00:44,000 --> 00:00:46,000
and try to write a parser for it,

20
00:00:46,000 --> 00:00:49,000
using the same sorts of techniques we've covered in this class.

21
00:00:49,000 --> 00:00:51,000
Imagine my surprise, when it turns out

22
00:00:51,000 --> 00:00:54,000
that the official Java language specification

23
00:00:54,000 --> 00:00:57,000
actually uses the same sort of format--

24
00:00:57,000 --> 00:01:00,000
the same sort of context-free grammar that we've been going over here.

25
00:01:00,000 --> 00:01:02,000
In fact, if you'll take a look,

26
00:01:02,000 --> 00:01:04,000
their handling of if-then-else statements

27
00:01:04,000 --> 00:01:06,000
or argument lists

28
00:01:06,000 --> 00:01:08,000
should look very familiar to you.

29
00:01:08,000 --> 00:01:11,000
It's, more or less, exactly what we covered for JavaScript.

30
00:01:11,000 --> 00:01:14,000
And I ended up writing a parser

31
00:01:14,000 --> 00:01:16,000
for Java 1.1 at the time--

32
00:01:16,000 --> 00:01:19,000
this was many years ago--that worked for our research.

33
00:01:19,000 --> 00:01:21,000
I was able to make a tool that fit me,

34
00:01:21,000 --> 00:01:23,000
even though there was none available,

35
00:01:23,000 --> 99:59:59,999
using exactly the sort of techniques that you have just mastered through.
