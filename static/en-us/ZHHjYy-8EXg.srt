1
00:00:00,022 --> 00:00:02,270
Okay, let's have a quiz on communication patterns.

2
00:00:02,270 --> 00:00:05,289
I'm going to give you a bunch of code snippets and I'm going to ask you to label them

3
00:00:05,289 --> 00:00:07,790
according to the parallel communication pattern that they embody.

4
00:00:07,790 --> 00:00:12,430
For each code snippet, you should indicate whether it is a map operation, a gather operation,

5
00:00:12,430 --> 00:00:17,618
a scatter operation, a stencil operation, or a transpose operation.

6
00:00:17,618 --> 00:00:20,365
Here's the code, and this is really sort of pseudo code.

7
00:00:20,365 --> 00:00:22,388
I'm not explaining where these variables came from,

8
00:00:22,388 --> 00:00:25,562
or showing you that how many threads I'm watching, or anything like that.

9
00:00:25,562 --> 00:00:30,228
But this is kernel code, and as you can see, I have two variables, out and in.

10
00:00:30,228 --> 00:00:32,189
These are arrays, the floating point numbers.

11
00:00:32,189 --> 00:00:39,970
And just for berevity, I've created two variables, i and j, to represent thread Idx.x, and thread Idx.y.

12
00:00:39,970 --> 00:00:42,888
Just to have something to do, I'm going to multiply a bunch of numbers by pi.

13
00:00:42,888 --> 00:00:47,803
So I define pi here, and here are our code snippets. Out i equals pi times in.

14
00:00:47,803 --> 00:00:53,938
Out i plus j times 128 equals in j times, j plus i times 128.

15
00:00:53,938 --> 00:00:59,299
And then, you see these 2 I have guarded with an if statement, but only the odd threads get executed.

16
00:00:59,299 --> 00:01:07,001
Out i minus 1 plus equals pi times in i, out i plus 1 plus equals pi times in i.

17
00:01:07,001 --> 00:01:15,155
Finally, out i equals in i plus in i minus 1 plus in i plus 1 times pi divided by 3.

18
00:01:15,155 --> 00:01:18,528
So for each of these statements, each of these little code snippets

19
00:01:18,528 --> 00:01:22,688
indicate whether it's a map, a gather, a scatter, a stencil, or a transpose.
