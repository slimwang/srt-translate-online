1
00:00:00,370 --> 00:00:02,830
What are the strikes against a microkernel based

2
00:00:02,830 --> 00:00:06,160
design? The first strike is the border crossing

3
00:00:06,160 --> 00:00:12,050
cost going between kernel and the user and vice versa. And this you have to do

4
00:00:12,050 --> 00:00:15,990
every time a user-level process makes a system

5
00:00:15,990 --> 00:00:18,440
call. You have to go through the kernel.

6
00:00:18,440 --> 00:00:21,330
That's the border crossing cost. So that is

7
00:00:21,330 --> 00:00:25,500
the first explicit cost that can be a

8
00:00:25,500 --> 00:00:30,500
strike against microkernel if this were to happen too often. The second

9
00:00:30,500 --> 00:00:35,500
strike against a microkernel based design is address space

10
00:00:35,500 --> 00:00:40,640
switches. With the assumption that each system service is living in

11
00:00:40,640 --> 00:00:45,858
its own hardware address space, whenever an application needs

12
00:00:45,858 --> 00:00:50,630
any system service, that may involve the

13
00:00:50,630 --> 00:00:54,200
servers living above the microkernel having to talk

14
00:00:54,200 --> 00:00:56,060
to one another in order to provide that

15
00:00:56,060 --> 00:01:00,220
particular service that was requested by the application.

16
00:01:00,220 --> 00:01:03,900
And I mentioned that protected procedure call is

17
00:01:03,900 --> 00:01:07,160
the basis for cross protection domain calls. So

18
00:01:07,160 --> 00:01:09,830
here's the protection domain, a file system. Here

19
00:01:09,830 --> 00:01:13,320
is another protection domain, the storage module. And,

20
00:01:13,320 --> 00:01:16,120
if the file system has to get some service

21
00:01:16,120 --> 00:01:20,310
out of the storage module in order to serve the original request from the

22
00:01:20,310 --> 00:01:25,587
application process, that communication is implemented as a protected

23
00:01:25,587 --> 00:01:31,060
procedure call. And going across hardware address spaces minimally

24
00:01:31,060 --> 00:01:36,210
involves flushing the TLB of the processor in

25
00:01:36,210 --> 00:01:41,480
order to make room for the TLB entries of the domain

26
00:01:41,480 --> 00:01:45,450
that we're entering. And we'll talk about that in a little bit more detail

27
00:01:45,450 --> 00:01:51,540
shortly. But the key point is, there's an explicit cost involved in going from

28
00:01:51,540 --> 00:01:56,830
one address space to another address space, and that is the second strike

29
00:01:56,830 --> 00:02:01,895
against a microkernel based design. The third strike against

30
00:02:01,895 --> 00:02:06,670
microkernel-based design is the cost for doing

31
00:02:06,670 --> 00:02:12,840
thread switches. These thread switches have to be mediated by the kernel. If the

32
00:02:12,840 --> 00:02:15,100
file system needs to make a protected

33
00:02:15,100 --> 00:02:18,280
procedure call to the storage module, in order

34
00:02:18,280 --> 00:02:21,670
to complete an application level request for

35
00:02:21,670 --> 00:02:25,480
an operating system service, that involves the file

36
00:02:25,480 --> 00:02:28,095
system having to be mediated through the

37
00:02:28,095 --> 00:02:31,940
microkernel in order to go and execute some

38
00:02:31,940 --> 00:02:35,000
functionality in the storage module. So that

39
00:02:35,000 --> 00:02:38,080
involves a thread switch, and IPC, in order

40
00:02:38,080 --> 00:02:43,280
to do that. So in other words, the basis for protected procedure call is thread

41
00:02:43,280 --> 00:02:47,120
switches and interprocess communication, which has to

42
00:02:47,120 --> 00:02:50,314
be mediated through the kernel. And this kernel

43
00:02:50,314 --> 00:02:53,322
mediation can be expensive, that is, thread switches

44
00:02:53,322 --> 00:02:57,207
and interprocess communication can be expensive. That's the

45
00:02:57,207 --> 00:03:03,250
third strike against a microkernel. So all of these three strikes that I

46
00:03:03,250 --> 00:03:08,210
mentioned are explicit costs associated with

47
00:03:08,210 --> 00:03:11,245
providing an application level service in a

48
00:03:11,245 --> 00:03:14,300
microkernel based operating system, because the

49
00:03:14,300 --> 00:03:16,890
application has to first make a request

50
00:03:16,890 --> 00:03:22,350
to the micro kernel. Microkernel may have to pass that request on to server

51
00:03:22,350 --> 00:03:25,890
processes that are living above the microkernel, and

52
00:03:25,890 --> 00:03:27,720
the server processes may have to talk to

53
00:03:27,720 --> 00:03:31,290
one another. And this protected procedure call itself

54
00:03:31,290 --> 00:03:34,710
has to be mediated by the microkernel via

55
00:03:34,710 --> 00:03:38,710
thread switching and interprocess communication. And in addition

56
00:03:38,710 --> 00:03:41,900
to all of these explicit costs, there could

57
00:03:41,900 --> 00:03:47,700
be a fourth cost, which is the implicit cost. And this is due to the memory

58
00:03:47,700 --> 00:03:51,450
subsystem and the loss of locality that

59
00:03:51,450 --> 00:03:54,780
can happen when we are going across address

60
00:03:54,780 --> 00:03:57,800
spaces. And when the file system makes

61
00:03:57,800 --> 00:04:01,550
a protected procedure call into the storage module,

62
00:04:01,550 --> 00:04:04,260
at that point, we are changing locality

63
00:04:04,260 --> 00:04:06,960
from the address space of the file system

64
00:04:06,960 --> 00:04:09,600
to the address space of the storage module.

65
00:04:09,600 --> 00:04:12,900
And therefore, the thread that starts executing inside

66
00:04:12,900 --> 00:04:19,060
the storage module may not find the cache warm, meaning, the contents of the

67
00:04:19,060 --> 00:04:26,400
cache may not be reflecting the working set of the storage module that needs to

68
00:04:26,400 --> 00:04:32,460
get executed right now in order to satisfy the request coming from the file

69
00:04:32,460 --> 00:04:35,310
server. And this loss of locality can

70
00:04:35,310 --> 00:04:39,210
be both for address translation in the TLB,

71
00:04:39,210 --> 00:04:41,420
for this new address space that we are

72
00:04:41,420 --> 00:04:44,950
in, as well as for data and instructions that

73
00:04:44,950 --> 00:04:47,690
are contained in the cache. Both of those may

74
00:04:47,690 --> 00:04:50,270
take a hit because of the fact that we're

75
00:04:50,270 --> 00:04:52,040
going from one address space to another address

76
00:04:52,040 --> 00:04:56,060
space. That's the implicit cost of the locality loss

77
00:04:56,060 --> 00:04:59,630
that would be the fourth strike against a microkernel-based

78
00:04:59,630 --> 00:05:04,990
design. All of these strikes against a microkernel-based design,

79
00:05:04,990 --> 00:05:09,230
seems pretty solid. Now how does L3 go about

80
00:05:09,230 --> 00:05:11,730
debunking, the myths about microkernel-based

81
00:05:11,730 --> 00:05:14,180
design. Let's see that, systematically.
