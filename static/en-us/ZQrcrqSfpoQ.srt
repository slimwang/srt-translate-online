1
00:00:00,240 --> 00:00:05,270
As you remember, Objective-C is pretty
blase about its handling of nil values.

2
00:00:05,270 --> 00:00:09,940
Like Desmir mentioned, by default any
object can be nil in Objective-C.

3
00:00:09,940 --> 00:00:15,250
From Swift's perspective, the danger of
nil values lurks around every corner.

4
00:00:15,250 --> 00:00:18,050
If your Swift code is
consuming Objective-C code,

5
00:00:18,050 --> 00:00:20,980
you need to be constantly checking for
nil values.

6
00:00:20,980 --> 00:00:25,240
Unexpected nil values that are handled
incorrectly can crash your app.

7
00:00:25,240 --> 00:00:29,090
To see how an unexpected null value
might get passed to your Swift code,

8
00:00:29,090 --> 00:00:33,290
let's take a look at how Objective-C
gets translated into Swift by default.

9
00:00:33,290 --> 00:00:36,847
Let's say we have an Objective-C
class that represents a user.

10
00:00:36,847 --> 00:00:41,544
Our user class has properties
representing a user's name, email, and

11
00:00:41,544 --> 00:00:43,010
avatar.

12
00:00:43,010 --> 00:00:47,260
And down here we have an initializer
that takes two strings as parameters but

13
00:00:47,260 --> 00:00:48,660
doesn't take an avatar.

14
00:00:48,660 --> 00:00:50,230
Not every user has an avatar.

15
00:00:51,300 --> 00:00:54,420
If we click on this icon
in the top left corner,

16
00:00:54,420 --> 00:00:59,020
down at the bottom of the menu we see
this option for Generated interface.

17
00:00:59,020 --> 00:01:03,460
Clicking that option gives us the
interface that's generated for Swift.

18
00:01:03,460 --> 00:01:06,310
So, okay,
we've got some Swift code now and

19
00:01:06,310 --> 00:01:11,120
we see name, avatar, and
email along with the init method.

20
00:01:11,120 --> 00:01:14,330
But we also see a lot
of exclamation points.

21
00:01:14,330 --> 00:01:18,660
By default, Swift treats every
variable coming from Objective-C

22
00:01:18,660 --> 00:01:21,370
as an implicitly unwrapped optional.

23
00:01:21,370 --> 00:01:25,200
As we know, implicitly unwrapped
optionals are dangerous.

24
00:01:25,200 --> 00:01:27,910
We don't want to be accidentally
unwrapping null values.
