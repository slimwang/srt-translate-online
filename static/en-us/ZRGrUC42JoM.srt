1
00:00:00,460 --> 00:00:04,580
Lets now explore the Twitter4J API if your interested in

2
00:00:04,580 --> 00:00:08,610
modifying your data spout using the link in the instructors node we open the de

3
00:00:08,610 --> 00:00:12,260
facto official Twitter API Twitter4J as you've already explored in

4
00:00:12,260 --> 00:00:15,190
lesson 3 tweets are called status.

5
00:00:15,190 --> 00:00:19,420
We can search for the get text function, to explore what we have been using.

6
00:00:19,420 --> 00:00:23,410
And we see that getText returns the text of the status or tweet.

7
00:00:23,410 --> 00:00:27,739
Navigating to the TweetSpout, say, in lesson two, stage six,

8
00:00:27,739 --> 00:00:30,360
you see again that we've implemented this for you.

9
00:00:30,360 --> 00:00:33,130
Scrolling through the Twitter4J status options,

10
00:00:33,130 --> 00:00:37,710
you see we have information regarding a number of interesting data points.

11
00:00:37,710 --> 00:00:40,350
That you may want to explore in your final project.

12
00:00:40,350 --> 00:00:44,294
One could be getFavorite count, which indicates approximately how many times,

13
00:00:44,294 --> 00:00:46,990
the tweet has been favorited by Twitter users.

14
00:00:46,990 --> 00:00:50,930
Or maybe geoLocation, which returns a geoLocation object.

15
00:00:50,930 --> 00:00:53,120
Clicking on the geoLocation object, and

16
00:00:53,120 --> 00:00:56,540
scrolling down, we see in the method summary.

17
00:00:56,540 --> 00:01:00,370
The getLatitude, and getLongitude methods.

18
00:01:00,370 --> 00:01:03,230
These functions were used by one of our Hackathon's teams to

19
00:01:03,230 --> 00:01:05,820
drive their US map visualization.

20
00:01:05,820 --> 00:01:08,280
Navigating back to the status page,

21
00:01:08,280 --> 00:01:10,740
another interesting status method is getLang.

22
00:01:10,740 --> 00:01:14,160
In your final project one simple extension you could add is to

23
00:01:14,160 --> 00:01:17,710
emit tweet temples in only your favorite language, or

24
00:01:17,710 --> 00:01:20,170
emit language data in your emit schema.

25
00:01:20,170 --> 00:01:23,070
Another approach is to modify your Twitter4J listener.

26
00:01:23,070 --> 00:01:25,760
We navigate to the Twitter4J package.

27
00:01:25,760 --> 00:01:28,230
And navigate down to Twitter stream.

28
00:01:28,230 --> 00:01:29,600
Scrolling down a bit further,

29
00:01:29,600 --> 00:01:35,230
notice the function firehouse, which starts listening on all public statuses.

30
00:01:35,230 --> 00:01:39,070
This function listens to all public tweets, how cool is that?

31
00:01:39,070 --> 00:01:42,390
Here's an MIT Technology Review article from November 12th 2014,

32
00:01:42,390 --> 00:01:46,430
talking about the Twitter Firehose, and the ebb and

33
00:01:46,430 --> 00:01:51,750
flow of geolocated tweets as a social microscope about New York.

34
00:01:51,750 --> 00:01:54,190
It shows that the same functions we're exploring,

35
00:01:54,190 --> 00:01:58,980
are being used in popular research, culture, and analyses.

36
00:01:58,980 --> 00:02:01,190
Navigating back to the twitter4j.

37
00:02:01,190 --> 00:02:02,390
Twitter stream.

38
00:02:02,390 --> 00:02:05,400
Above the firehose, we see the filter method.

39
00:02:05,400 --> 00:02:10,199
We click on the FilterQuery, and scroll down to the Method summary, and

40
00:02:10,199 --> 00:02:13,120
we see that we can filter queries based on count,

41
00:02:13,120 --> 00:02:18,080
follows, language, location and keyword using track.

42
00:02:18,080 --> 00:02:19,990
If we click on Locations.

43
00:02:19,990 --> 00:02:23,050
We see the function our Hackathon team uses,

44
00:02:23,050 --> 00:02:26,480
to filter queries from Twitter based on a double 2D array.

45
00:02:26,480 --> 00:02:31,750
In the package overview, remember then after your basic implementation is

46
00:02:31,750 --> 00:02:36,850
complete, you can explore all types of data, filter queries and data types

47
00:02:36,850 --> 00:02:42,010
coming from Twitter, or choose data completely on your own from another source.

48
00:02:42,010 --> 00:02:44,650
I also hope you're following along with some of the discussions in our

49
00:02:44,650 --> 00:02:46,150
Hackathon teams.

50
00:02:46,150 --> 00:02:49,490
And use this as inspiration for some of your own awesome projects.
