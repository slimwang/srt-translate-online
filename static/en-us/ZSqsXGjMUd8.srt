1
00:00:00,220 --> 00:00:02,210
Before we can simulate a Turing machine,

2
00:00:02,210 --> 00:00:03,960
we first have to represent
it using a string.

3
00:00:05,210 --> 00:00:08,150
Notice that this represents
an immediate challenge.

4
00:00:08,150 --> 00:00:11,900
Our universal Turing machine must use
a fixed alphabet for its input and

5
00:00:11,900 --> 00:00:13,537
have a fixed number of states.

6
00:00:13,537 --> 00:00:16,856
But it must be able to simulate Turing
machines with arbitrarily larger

7
00:00:16,856 --> 00:00:19,028
alphabets and
an arbitrary number of states.

8
00:00:19,028 --> 00:00:23,014
As we'll see, one solutions is
essentially to enumerate all the symbols

9
00:00:23,014 --> 00:00:25,274
and states and represent them in binary.

10
00:00:25,274 --> 00:00:28,140
There are lots of ways to do this.

11
00:00:28,140 --> 00:00:30,871
The way we're going to do it,
is a compromise of readability and

12
00:00:30,871 --> 00:00:31,510
efficiency.

13
00:00:32,689 --> 00:00:38,426
So we'll let M be a turning machine
with states q0 through qn- 1.

14
00:00:38,426 --> 00:00:43,470
And we'll let it's tape alphabet
be gamma a1 through am.

15
00:00:43,470 --> 00:00:48,270
We'll define i and j so that 2 to the i
is at least the number of states.

16
00:00:48,270 --> 00:00:52,580
And 2 to the j is at least
the size of the tape alphabet.

17
00:00:52,580 --> 00:00:57,870
Then we can encode a state
qk as the string qw,

18
00:00:57,870 --> 00:01:00,600
where w is the binary
representation of k.

19
00:01:01,800 --> 00:01:05,708
For example,
if the number of states is 6,

20
00:01:05,708 --> 00:01:11,940
then we would need i to be 3, and so
we would encode q3 as the string q,

21
00:01:11,940 --> 00:01:15,873
and then 3 written out in binary, 011.

22
00:01:15,873 --> 00:01:19,278
By the way, we'll use
the convention that q followed by

23
00:01:19,278 --> 00:01:22,620
the binary representation
of 0 is the initial state.

24
00:01:22,620 --> 00:01:27,620
q followed by the binary representation
of 1 is the accept state, and

25
00:01:27,620 --> 00:01:32,840
q followed by the binary representation
of 2 Is the reject state.

26
00:01:32,840 --> 00:01:36,880
We encode symbols much in the same
way as we encoded states.

27
00:01:36,880 --> 00:01:42,400
We'll use a followed by w,
where w is the binary representation

28
00:01:42,400 --> 00:01:46,360
of this k to indicate the kth symbol.

29
00:01:46,360 --> 00:01:47,340
For example,

30
00:01:47,340 --> 00:01:51,540
if there are 10 different symbols, then
we need 4 bits to represent them all.

31
00:01:52,540 --> 00:01:55,990
And we might encode a5,
which could be any symbol.

32
00:01:55,990 --> 00:01:57,737
Maybe it's a star.

33
00:01:57,737 --> 00:02:00,311
We would encode that as the string, a,

34
00:02:00,311 --> 00:02:04,450
followed by the binary
representation of 5, 4 plus 1 is 5.

35
00:02:05,690 --> 00:02:07,410
Let's see an encoding for an example.

36
00:02:08,520 --> 00:02:12,840
This example decides whether the input
consists of a number of zeros,

37
00:02:12,840 --> 00:02:13,960
that is a power of two.

38
00:02:15,660 --> 00:02:17,460
To encode the Turing machine as a whole,

39
00:02:17,460 --> 00:02:20,280
we really just need to encode
the transition function.

40
00:02:21,570 --> 00:02:23,700
We'll start by considering
this edge here.

41
00:02:24,780 --> 00:02:28,720
We're going from state 0, so
I'll write that this way.

42
00:02:28,720 --> 00:02:35,160
We see the symbol 0, so I'll write
the encoding for that like so.

43
00:02:35,160 --> 00:02:39,520
And then we're to state 3,
so i'll write out that here.

44
00:02:40,550 --> 00:02:43,770
And then we need to write the $, so

45
00:02:43,770 --> 00:02:47,130
i'll write out the encoding for
that, like so.

46
00:02:47,130 --> 00:02:49,080
And we're supposed to move to the right.

47
00:02:49,080 --> 00:02:52,010
So I'll write the R there.

48
00:02:52,010 --> 00:02:54,080
Remember that the order is input state,

49
00:02:54,080 --> 00:02:58,700
input symbol, output state,
output symbol, and then direction.

50
00:02:58,700 --> 00:03:00,840
Next, let's do this
blue transition here.

51
00:03:02,050 --> 00:03:05,695
We go from state 3, and we read a 0.

52
00:03:06,990 --> 00:03:08,860
So I encode that that way.

53
00:03:08,860 --> 00:03:12,170
And then we're going to state 4.

54
00:03:12,170 --> 00:03:15,212
So, I'll write the encoding for
that with q,

55
00:03:15,212 --> 00:03:18,255
followed by the binary
representation of 4.

56
00:03:19,510 --> 00:03:20,670
And we're supposed to write x.

57
00:03:21,810 --> 00:03:26,830
So I look up the encoding for
x, that's a10, like so.

58
00:03:26,830 --> 00:03:28,710
And we want to move
the head to the right.

59
00:03:28,710 --> 00:03:30,990
So I include an R here.

60
00:03:30,990 --> 00:03:34,470
So that's the convention we'll use to
write out the transition function.

61
00:03:34,470 --> 00:03:38,840
It's just a sequence of these
five tuples of this form,

62
00:03:38,840 --> 00:03:43,240
input state, input symbol, output state,
output symbol and then direction.
