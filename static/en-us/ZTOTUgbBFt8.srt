1
00:00:00,450 --> 00:00:03,450
We've learned how to use build types
to customize Gradle's behavior.

2
00:00:03,450 --> 00:00:06,360
So now let's look at how build variants
allow you to control the behavior of

3
00:00:06,360 --> 00:00:07,910
your app itself.

4
00:00:07,910 --> 00:00:10,120
And depending on which
app we're building,

5
00:00:10,120 --> 00:00:13,100
the Android Gradle plugin creates
a whole slew of source sets.

6
00:00:13,100 --> 00:00:15,885
And depending on which variant you're
building, it will merge the sources and

7
00:00:15,885 --> 00:00:18,475
resources from those source
sets into the final APK.

8
00:00:18,475 --> 00:00:20,845
At the most broad level,

9
00:00:20,845 --> 00:00:24,315
there's the main source set
which is located in source main.

10
00:00:24,315 --> 00:00:27,155
This is where we've been
putting all of our code so far.

11
00:00:27,155 --> 00:00:30,120
Additionally, there's a source set for
each product flavor.

12
00:00:30,120 --> 00:00:33,280
Assuming our example from before,
let's say we have a free and

13
00:00:33,280 --> 00:00:34,890
a paid product flavor.

14
00:00:34,890 --> 00:00:38,910
There's also a source set for each build
type, in this case debug and release.

15
00:00:38,910 --> 00:00:41,740
Finally there's also a source for
each final variant.

16
00:00:41,740 --> 00:00:46,700
So that's source free debug, free
release, paid debug, and paid release.

17
00:00:46,700 --> 00:00:49,910
If we have sources and resources
that we need in a paid flavor but

18
00:00:49,910 --> 00:00:53,930
not in the free flavor,
we can put them in source paid.

19
00:00:53,930 --> 00:00:57,770
Similarly, if there are resources
we need for debug build but not for

20
00:00:57,770 --> 00:01:00,290
the release build,
we can put them in source debug.

21
00:01:01,520 --> 00:01:04,010
Finally, if we have resources
that are needed only for

22
00:01:04,010 --> 00:01:07,420
the paid debug variant, then we can
put them in the source paid debug.

23
00:01:08,560 --> 00:01:11,340
When we build a particular variant,
Gradle will take care of all

24
00:01:11,340 --> 00:01:13,810
the emerging sources and
resources we need for that variant.

25
00:01:13,810 --> 00:01:17,580
It will also take care of a variety of
resources that are defined in more than

26
00:01:17,580 --> 00:01:19,230
one configuration.

27
00:01:19,230 --> 00:01:21,860
The rule is that the more
specific configurations

28
00:01:21,860 --> 00:01:24,700
override the less
specific configurations.

29
00:01:24,700 --> 00:01:27,030
Java's source files
cannot be overwritten, so

30
00:01:27,030 --> 00:01:30,320
you need to be careful that you don't
try to define the same class definition,

31
00:01:30,320 --> 00:01:32,510
and it ends up in multiple variants.

32
00:01:32,510 --> 00:01:35,720
Gradle can do a bit better for
resource files like strings.xml, or

33
00:01:35,720 --> 00:01:37,540
even Android Manifests.

34
00:01:37,540 --> 00:01:40,390
For resources of that type,
the files will be merged, and

35
00:01:40,390 --> 00:01:42,890
the entries will be overridden by ID.

36
00:01:42,890 --> 00:01:46,520
To determine what sources and resources
are included when we build a particular

37
00:01:46,520 --> 00:01:49,790
variant, we can draw a diagram
that looks like this.

38
00:01:49,790 --> 00:01:51,530
We start in the middle.

39
00:01:51,530 --> 00:01:55,350
If we want to build the paid debug
variant, Gradle will include everything

40
00:01:55,350 --> 00:02:00,220
in main, then merge everything in paid,
overriding any conflicts.

41
00:02:00,220 --> 00:02:04,490
Next Gradle will merge in everything
from debug overriding again.

42
00:02:04,490 --> 00:02:07,210
Then, finally,
Gradle will merge in the resources and

43
00:02:07,210 --> 00:02:08,508
source that are in paid debug.
