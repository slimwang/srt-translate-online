1
00:00:00,560 --> 00:00:04,010
Let's walk through each of these
methods and then fill in the table.

2
00:00:04,010 --> 00:00:07,560
This is the gist of code that we
provided to you in the instructor notes.

3
00:00:07,560 --> 00:00:09,120
Let's start with Method 1.

4
00:00:09,120 --> 00:00:12,580
This method is meant to
create a reminder message for

5
00:00:12,580 --> 00:00:14,490
a particular calendar event.

6
00:00:14,490 --> 00:00:17,930
The message will be composed
of the event's name, and

7
00:00:17,930 --> 00:00:22,610
event location as well as how
many minutes away the event is.

8
00:00:22,610 --> 00:00:25,910
So the method name is
createCalendarEventReminder in

9
00:00:25,910 --> 00:00:30,750
Camel Case, and then the list of
inputs is in between the opening and

10
00:00:30,750 --> 00:00:32,640
closing parentheses here.

11
00:00:32,640 --> 00:00:36,660
There are three input parameters,
the first is String eventName,

12
00:00:36,660 --> 00:00:40,340
then String location, and
then int minutesAway.

13
00:00:40,340 --> 00:00:42,150
The output of this method or

14
00:00:42,150 --> 00:00:46,660
the return value is the reminder
message, which is text.

15
00:00:46,660 --> 00:00:49,050
So that's why the return
data type is a string.

16
00:00:50,380 --> 00:00:53,110
And this is what it looks
like filled in the table.

17
00:00:53,110 --> 00:00:56,740
Technically, this should all be
one word without any spaces, but

18
00:00:56,740 --> 00:00:59,240
it just doesn't fit in this box.

19
00:00:59,240 --> 00:01:01,210
And this is the second method.

20
00:01:01,210 --> 00:01:05,540
The goal of this method is to deduct a
certain number of points that were used

21
00:01:05,540 --> 00:01:09,120
from the overall number of points,
which is 100.

22
00:01:09,120 --> 00:01:12,500
So, it returns the remaining
number of points.

23
00:01:12,500 --> 00:01:15,670
The method name is
called deductPoints and

24
00:01:15,670 --> 00:01:18,730
there's one input parameter
in between this opening and

25
00:01:18,730 --> 00:01:25,000
closing parentheses It's called
pointsUsed, and the data type is int.

26
00:01:25,000 --> 00:01:28,680
The return value is numberOfPoints
remaining, and that's a number, so

27
00:01:28,680 --> 00:01:30,570
that's why the return
data type is an int.

28
00:01:31,880 --> 00:01:34,510
In the table,
this is what it would look like.

29
00:01:34,510 --> 00:01:36,410
And this is the third method,

30
00:01:36,410 --> 00:01:40,900
the goal of this method is to create
a text string that says the sum

31
00:01:40,900 --> 00:01:46,490
of all the individual trip lengths
the method name is findTotalTripLength.

32
00:01:46,490 --> 00:01:49,920
Then we have to scroll to the right
to see all the parameters.

33
00:01:49,920 --> 00:01:52,550
We have three input parameters
here in between the opening and

34
00:01:52,550 --> 00:01:56,210
closing parentheses, and
they're separated by commas.

35
00:01:56,210 --> 00:01:58,610
The first is Int distanceOfFirstTrip,

36
00:01:58,610 --> 00:02:04,580
the second is Int distanceOfSecondTrip,
and Int distanceOfThirdTrip.

37
00:02:04,580 --> 00:02:09,520
So, within this method,
we can refer to each of these variables.

38
00:02:09,520 --> 00:02:14,380
Since they're integers, we can add them
all up to the total length of the trip,

39
00:02:14,380 --> 00:02:16,190
which starts at two miles.

40
00:02:16,190 --> 00:02:20,340
And then we can concatenate
that to this string message.

41
00:02:21,460 --> 00:02:25,510
Since this message is text, the return
value of the method is string.

42
00:02:26,890 --> 00:02:28,320
And this is what it
looks like in the table.
