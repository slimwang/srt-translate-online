1
00:00:00,420 --> 00:00:05,270
All Objective C objects inherit an init
method from the NS object class.

2
00:00:05,270 --> 00:00:06,920
So unlike in Swift,

3
00:00:06,920 --> 00:00:10,230
it's not always necessary to
implement a custom initializer.

4
00:00:10,230 --> 00:00:13,190
If I go into the main function
of our house project,

5
00:00:13,190 --> 00:00:16,020
I can initialize an instance of
the house class with no problem.

6
00:00:16,020 --> 00:00:18,490
You've seen this a few times now.

7
00:00:18,490 --> 00:00:21,930
Every time you create an object,
you type alloc, which allocates

8
00:00:21,930 --> 00:00:26,450
some memory space and then init to
initialize the object instance.

9
00:00:26,450 --> 00:00:28,520
Alloc and
init are always written together.

10
00:00:28,520 --> 00:00:30,130
They're like entangled particles.

11
00:00:30,130 --> 00:00:31,850
They can't be separated.

12
00:00:31,850 --> 00:00:35,600
That being said,
this house I initialized has no address.

13
00:00:35,600 --> 00:00:38,180
So I think we should write
a custom initializer.

14
00:00:38,180 --> 00:00:41,750
We'll write our custom
initializer in the House.m file.

15
00:00:41,750 --> 00:00:44,120
This is the first method
we're writing together.

16
00:00:44,120 --> 00:00:48,080
So let's take a minute to talk about
the syntax of method definitions.

17
00:00:48,080 --> 00:00:51,360
Every method definition
starts with the return type.

18
00:00:51,360 --> 00:00:55,190
In this case, our return type
is going to be instancetype.

19
00:00:55,190 --> 00:00:59,170
Instancetype indicates an instance of
the class in which this method is found,

20
00:00:59,170 --> 00:01:02,410
in this case,
an instance of the House class.

21
00:01:02,410 --> 00:01:05,870
After the return type,
we'll type init, no surprise there.

22
00:01:05,870 --> 00:01:06,460
But generally,

23
00:01:06,460 --> 00:01:09,960
you're going to want to initialize
an instance of a class with some values.

24
00:01:09,960 --> 00:01:14,320
So it's common to name your
initializer initWithSomeProperty.

25
00:01:14,320 --> 00:01:17,160
In our case, we'll initWithAddress, and

26
00:01:17,160 --> 00:01:19,920
then we place a colon
after the method name.

27
00:01:19,920 --> 00:01:23,660
After the colon, we pass in our
parameter, address, and of course,

28
00:01:23,660 --> 00:01:26,240
address is going to be
a pointer to a string.

29
00:01:26,240 --> 00:01:29,550
We indicate the parameter type
here in between parentheses and

30
00:01:29,550 --> 00:01:33,800
include an asterisk to show that
the parameter is a pointer to an object.

31
00:01:33,800 --> 00:01:37,490
After the parameter type comes
the parameter itself, address, and

32
00:01:37,490 --> 00:01:40,610
then some curly braces to
hold the body of the method.

33
00:01:40,610 --> 00:01:43,891
So the general form for writing
a method definition looks like this,

34
00:01:43,891 --> 00:01:47,020
the returnType between parentheses,

35
00:01:47,020 --> 00:01:52,010
the methodName followed by a colon,
the parameterType between parentheses.

36
00:01:52,010 --> 00:01:56,320
If the parameter is an object,
include an asterisk, the parameterName,

37
00:01:56,320 --> 00:02:00,470
and then in between curly braces,
the body of the method.

38
00:02:00,470 --> 00:02:02,710
Now let's get back to initialization.

39
00:02:02,710 --> 00:02:05,940
Every init method is going to start
out by calling the init method of its

40
00:02:05,940 --> 00:02:09,210
superclass, which in this case,
is NSObject.

41
00:02:09,210 --> 00:02:12,388
So we set self = [super init].

42
00:02:12,388 --> 00:02:15,890
Next we want to check that everything
went well with that call to super init.

43
00:02:15,890 --> 00:02:17,810
So we type if(self).

44
00:02:17,810 --> 00:02:21,470
Self should have a value now, so
this statement should evaluate to true.

45
00:02:21,470 --> 00:02:25,410
Then in the body of this if statement,
we'll initialize our properties.

46
00:02:25,410 --> 00:02:27,980
I place an underscore
here before address, and

47
00:02:27,980 --> 00:02:31,970
this is how I access the address
instance variable directly.

48
00:02:31,970 --> 00:02:35,510
Remember that address is marked
with the attribute copy, so

49
00:02:35,510 --> 00:02:39,830
we want to initialize it with a copy
of the string that's being passed in.

50
00:02:39,830 --> 00:02:42,740
This line protects the address
from the unintentional changes

51
00:02:42,740 --> 00:02:44,500
we talked about earlier.

52
00:02:44,500 --> 00:02:45,040
So again,

53
00:02:45,040 --> 00:02:50,760
we set _address equal to a copy of
address, the parameter being passed in.

54
00:02:50,760 --> 00:02:53,380
We'll give these other
properties default values.

55
00:02:53,380 --> 00:02:56,130
Let's say the default
numberOfBedrooms is 2 and

56
00:02:56,130 --> 00:02:59,170
the default value of hasHotTub is false.

57
00:02:59,170 --> 00:03:02,800
When we're done setting the values
of the properties, we return self.
