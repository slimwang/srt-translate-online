1
00:00:00,110 --> 00:00:05,370
The cache first, then network strategy
is ideal for our weather app.

2
00:00:05,370 --> 00:00:09,290
It gets the weather forecast on
screen as quickly as possible.

3
00:00:09,290 --> 00:00:12,430
Then, it updates the forecast
once the network

4
00:00:12,430 --> 00:00:14,880
has returned with the latest data.

5
00:00:14,880 --> 00:00:19,620
Using this strategy, we expect
the network response to be the source of

6
00:00:19,620 --> 00:00:24,380
truth, always providing us
with the most up-to-date data.

7
00:00:24,380 --> 00:00:26,210
To implement this strategy,

8
00:00:26,210 --> 00:00:31,090
we need to kick off two
parallel asynchronous requests.

9
00:00:31,090 --> 00:00:35,800
One to the cache, so we can get some
data on screen as quickly as possible,

10
00:00:35,800 --> 00:00:37,610
even though it might be stale.

11
00:00:37,610 --> 00:00:42,431
The second request is made over
the network to get the latest data.

12
00:00:42,431 --> 00:00:46,289
Under normal circumstances,
the cache data will be returned almost

13
00:00:46,289 --> 00:00:50,290
immediately, providing the app with
some recent data that it can use.

14
00:00:51,380 --> 00:00:56,140
Then, when the network request returns,
the app should store the response in

15
00:00:56,140 --> 00:01:01,810
the cache and update the screen with
the latest data it just received.

16
00:01:01,810 --> 00:01:05,960
This also means that even on Wi-Fi
networks or when there's no network

17
00:01:05,960 --> 00:01:09,160
connection at all,
the user still sees data from the cache.
