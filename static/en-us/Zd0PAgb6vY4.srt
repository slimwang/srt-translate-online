1
00:00:00,240 --> 00:00:03,850
Here's an example of a Python program
that uses a DB-API Library to

2
00:00:03,850 --> 00:00:05,350
query a database.

3
00:00:05,350 --> 00:00:07,600
Everytime you use DB-API from your code,

4
00:00:07,600 --> 00:00:09,960
you're going to have
the following steps.

5
00:00:09,960 --> 00:00:13,100
First, we have import sqlite3,
that's the library for

6
00:00:13,100 --> 00:00:14,580
the database we're using.

7
00:00:14,580 --> 00:00:19,340
If we were using postgreSQL here,
we would import psyco-pg instead.

8
00:00:19,340 --> 00:00:21,590
Next, connect to the database.

9
00:00:21,590 --> 00:00:25,120
The string cookies here, is the name
of the database to connect to.

10
00:00:25,120 --> 00:00:27,730
Yes, there's a reason I've put
the name cookies in this example.

11
00:00:27,730 --> 00:00:30,380
I'll tell you at the end of the video,
I promise.

12
00:00:30,380 --> 00:00:34,050
If you were using a database system over
a network, instead you might have to

13
00:00:34,050 --> 00:00:38,450
specify the host name, username,
password and other information here.

14
00:00:38,450 --> 00:00:41,370
The connect function returns
a connection object,

15
00:00:41,370 --> 00:00:43,910
which is good until you
close that connection.

16
00:00:43,910 --> 00:00:47,150
Next, your code will make
an object called a cursor.

17
00:00:47,150 --> 00:00:50,730
The cursor is what actually runs
queries and fetches results.

18
00:00:50,730 --> 00:00:53,840
It's called a cursor because when
the database gives you results.

19
00:00:53,840 --> 00:00:55,780
You use the cursor to
scan through the results,

20
00:00:55,780 --> 00:00:58,260
kind of like a text cursor in an editor.

21
00:00:58,260 --> 00:01:02,060
You can see here that we execute
a query using a cursor, and

22
00:01:02,060 --> 00:01:05,880
then fetch all the results from
that query also using the cursor.

23
00:01:05,880 --> 00:01:08,810
Another possibility is to fetch
the results one at a time using

24
00:01:08,810 --> 00:01:10,950
the fetchone method on cursors.

25
00:01:10,950 --> 00:01:14,550
Now, if you were doing an insert
query instead of a select,

26
00:01:14,550 --> 00:01:18,980
you'd need to commit the insertion here,
or if something went wrong, roll back.

27
00:01:18,980 --> 00:01:22,410
Same if you were doing some other
query that changes the database.

28
00:01:22,410 --> 00:01:25,300
Commit and
roll back are methods on connection.

29
00:01:25,300 --> 00:01:28,550
In this case, we're doing a select,
so we don't need to.

30
00:01:28,550 --> 00:01:29,730
I'll tell you more about commits and

31
00:01:29,730 --> 00:01:33,450
roll backs a little later,
along with doing inserts and DBAPI.

32
00:01:33,450 --> 00:01:36,720
Finally, when you're done,
you close the connection.

33
00:01:36,720 --> 00:01:39,600
It's important to always close
connections when we're done with them,

34
00:01:39,600 --> 00:01:42,410
especially if this code were
running inside of a loop.

35
00:01:42,410 --> 00:01:44,980
We wouldn't want to have a bunch of
stale connections sitting around,

36
00:01:44,980 --> 00:01:46,900
taking up resources.

37
00:01:46,900 --> 00:01:50,055
By the way, I mentioned that cookies
here isn't just to be silly.

38
00:01:50,055 --> 00:01:53,455
If you were to run this exact code
against the cookies file from a Chrome

39
00:01:53,455 --> 00:01:56,745
web browser, it would tell you some of
the web servers you have cookies from.

40
00:01:56,745 --> 00:01:57,325
Both Chrome and

41
00:01:57,325 --> 00:02:00,815
Firefox use an SQLite database to
store cookies and web history.
