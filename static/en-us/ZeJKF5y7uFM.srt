1
00:00:00,650 --> 00:00:06,370
Nox was a first generation open flow controller. It is open source, stable, and

2
00:00:06,370 --> 00:00:13,620
widely used. There are two flavors of Nox. Classic Nox, and the New Nox.

3
00:00:13,620 --> 00:00:19,180
Classic Nox was written in C++ and Python and is no longer supported.

4
00:00:19,180 --> 00:00:26,000
The new Nox is C++ only. The Code base is fast, clean and well supported.

5
00:00:26,000 --> 00:00:32,580
More information about Nox is available at noxrepo.org. In a Nox network,

6
00:00:32,580 --> 00:00:38,570
there may be a set of switches and various network-attached servers. The

7
00:00:38,570 --> 00:00:44,920
controller maintains a network view and the controller may also run several

8
00:00:44,920 --> 00:00:47,400
applications that operate on that network

9
00:00:47,400 --> 00:00:51,860
view. The basic abstraction that NOX supports

10
00:00:51,860 --> 00:00:58,000
is a switch control abstraction where open flow is the prevailing protocol.

11
00:00:58,000 --> 00:01:03,300
Control is defined at the granularity of flows which are defined. By a ten-tuple

12
00:01:03,300 --> 00:01:06,430
in the original OpenFlow specification. So

13
00:01:06,430 --> 00:01:10,860
depending on whether a particular packet matches

14
00:01:10,860 --> 00:01:17,050
a subset of values specified as a flow rule, the controller may make

15
00:01:17,050 --> 00:01:22,000
different decisions for packets that belong to different parts of

16
00:01:22,000 --> 00:01:26,770
flow space. Or packets that match different subsets, of the

17
00:01:26,770 --> 00:01:32,330
fields defined by a flow. A flow is defined

18
00:01:32,330 --> 00:01:38,010
by the header or the 10-tuple which I distoluted to.

19
00:01:38,010 --> 00:01:42,890
A counter which maintains statistics and actions

20
00:01:42,890 --> 00:01:45,544
that should be performed. On packets that

21
00:01:45,544 --> 00:01:50,180
match this particular flow definition. Actions might

22
00:01:50,180 --> 00:01:52,850
include forwarding the packet. Dropping it or

23
00:01:52,850 --> 00:01:55,800
sending it to the controller. When a switch

24
00:01:55,800 --> 00:01:59,140
recives a packet, it updates it's counters

25
00:01:59,140 --> 00:02:01,300
for counting packets that belong to that

26
00:02:01,300 --> 00:02:04,320
flow and applies the correspondence actions for

27
00:02:04,320 --> 00:02:08,288
that flow, which include forwarding, dropping or sending

28
00:02:08,288 --> 00:02:11,018
to a controller. The basic programatic interface.

29
00:02:11,018 --> 00:02:13,560
For the [UNKNOWN] controller is based on

30
00:02:13,560 --> 00:02:17,190
events. The controller knows how to process

31
00:02:17,190 --> 00:02:20,770
different types of events, such as a switch,

32
00:02:20,770 --> 00:02:27,310
join or leave a packet in or packet received event should the switch redirect

33
00:02:27,310 --> 00:02:29,570
packet to controller as well as various

34
00:02:29,570 --> 00:02:33,420
statistics. The controller also keeps tracks of a

35
00:02:33,420 --> 00:02:39,890
network view. Which includes a view of the underlying network topology, and it

36
00:02:39,890 --> 00:02:42,210
also speaks a control protocol to the

37
00:02:42,210 --> 00:02:45,730
switches in the network. That control protocol

38
00:02:45,730 --> 00:02:48,500
effectively allows the controller to update the

39
00:02:48,500 --> 00:02:51,050
state in the network switches. The Nox

40
00:02:51,050 --> 00:02:55,338
controller implements the open flow protocol. Nox

41
00:02:55,338 --> 00:02:59,282
has implemented in C++ And it supports

42
00:02:59,282 --> 00:03:06,126
opaflow 1.0, a fork of nox called CPQD supports versions 1.1,

43
00:03:06,126 --> 00:03:12,070
1.2 and 1.3. The programming is event based and a programmer can write an

44
00:03:12,070 --> 00:03:14,140
application by writing even handlers for

45
00:03:14,140 --> 00:03:18,960
the nox controller. NOX provides good performance

46
00:03:18,960 --> 00:03:21,550
but requires you to understand and

47
00:03:21,550 --> 00:03:24,660
be comfortable with the facilities and semantics

48
00:03:24,660 --> 00:03:27,660
of low level open flow commands. Later

49
00:03:27,660 --> 00:03:31,160
in this module, we will explore controllers

50
00:03:31,160 --> 00:03:33,580
based on pyretic and frenetic that do

51
00:03:33,580 --> 00:03:37,540
not have this characteristic. NOX also requires the

52
00:03:37,540 --> 00:03:40,165
programmer to write the control application in

53
00:03:40,165 --> 00:03:43,610
C++, which can be slow for development and

54
00:03:43,610 --> 00:03:45,600
debugging. To address the shortcomings that are

55
00:03:45,600 --> 00:03:49,910
associated with development in C++, Pox was developed.

56
00:03:49,910 --> 00:03:54,750
Pox is widely used, maintained, and supported. It's also easy to

57
00:03:54,750 --> 00:03:58,960
use, and easy to read and write the control programs. Of

58
00:03:58,960 --> 00:04:03,090
course, as might come with implementing a controller in python, the

59
00:04:03,090 --> 00:04:06,890
performance of Pox is not as good as the performance of Nox.
