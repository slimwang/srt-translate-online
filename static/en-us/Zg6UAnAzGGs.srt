1
00:00:00,190 --> 00:00:02,150
The plan for the lesson is this.

2
00:00:02,150 --> 00:00:06,340
We'll start by defining bipartite
graphs, the concept of matchings and

3
00:00:06,340 --> 00:00:08,029
some other needed ideas.

4
00:00:08,029 --> 00:00:11,380
Then we'll show how the problem
of finding a maximum matching

5
00:00:11,380 --> 00:00:14,510
can be reduced to the problem
of finding a maximum flow.

6
00:00:14,510 --> 00:00:17,360
And this will give us
an E times V algorithm.

7
00:00:17,360 --> 00:00:20,460
Next, we'll show that the Vertex Cover
problem is related to the max

8
00:00:20,460 --> 00:00:21,520
matching problem.

9
00:00:21,520 --> 00:00:24,140
Much in the same way that
the minimum cut problem

10
00:00:24,140 --> 00:00:26,460
was related to the Max-Flow problem.

11
00:00:26,460 --> 00:00:29,750
And finally, we'll give
the Hopcroft-Karp algorithm and

12
00:00:29,750 --> 00:00:34,016
show that it finds a maximum matching in
time order E times the square root of V.

13
00:00:34,016 --> 00:00:37,171
There are many good references on
the topic of maximum matchings and

14
00:00:37,171 --> 00:00:38,800
bipartite graphs.

15
00:00:38,800 --> 00:00:41,135
This lesson will follow
most closely Kleinberg and

16
00:00:41,135 --> 00:00:44,510
Tardos' Algorithm Design for
the first three parts.

17
00:00:44,510 --> 00:00:47,760
And Dexter Kozen's, The Design and
Analysis of Algorithms, for

18
00:00:47,760 --> 00:00:49,840
the Hopcroft-Karp algorithm.

19
00:00:49,840 --> 00:00:54,040
We begin our discussion by defining
the notion of a Bipartite Graph.

20
00:00:54,040 --> 00:00:58,860
An undirected graph is bipartite if
there exists partition into L and

21
00:00:58,860 --> 00:01:01,050
R, think left and right.

22
00:01:01,050 --> 00:01:05,110
Such that every edge has one
vertex in L and one in R.

23
00:01:05,110 --> 00:01:07,967
For example,
this graph here is bipartite.

24
00:01:07,967 --> 00:01:13,010
I can label the green vertices as L,
and the orange ones as R.

25
00:01:13,010 --> 00:01:18,980
And then every edge has one vertex,
that's green and one that's orange.

26
00:01:18,980 --> 00:01:20,920
A few observations are in order.

27
00:01:20,920 --> 00:01:23,932
First, saying that a graph is
bipartite is equivalent to saying

28
00:01:23,932 --> 00:01:28,340
that's 2-colorable, for those of you
who are familiar with colorings.

29
00:01:28,340 --> 00:01:34,910
Next, let's take the same graph and add
this edge here to make it non-bipartite.

30
00:01:34,910 --> 00:01:37,350
Note that I've introduced
an odd-length cycle.

31
00:01:37,350 --> 00:01:40,906
And indeed, saying that a graph is
bipartite is equivalent to saying

32
00:01:40,906 --> 00:01:43,460
that it has no odd-length cycles.

33
00:01:43,460 --> 00:01:46,170
For graphs that aren't connected,
it's possible that there will be some

34
00:01:46,170 --> 00:01:48,700
ambiguity in the partition
of the vertices.

35
00:01:48,700 --> 00:01:51,960
So sometimes the partition is
included in the definition.

36
00:01:51,960 --> 00:01:54,630
And we also often draw the graphs

37
00:01:54,630 --> 00:01:57,780
with all the vertices in
one partition on the left.

38
00:01:57,780 --> 00:02:00,120
And all the vertices in the other
partition on the right.
