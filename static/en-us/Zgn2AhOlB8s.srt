1
00:00:00,148 --> 00:00:04,030
Although the trap-and-emulate model
seems like it will solve all problems

2
00:00:04,030 --> 00:00:10,240
and it worked beautifully on the
mainframes, when in the 90s, the need to

3
00:00:10,240 --> 00:00:15,940
reapply virtualization solutions to
the prevalent x86 architecture came up,

4
00:00:15,940 --> 00:00:19,130
it turned out that there were
certain problems with this model.

5
00:00:19,130 --> 00:00:23,370
At the time,
x86 platforms had just the 4 rings.

6
00:00:23,370 --> 00:00:27,070
There wasn't any support for
root or non-root mode.

7
00:00:27,070 --> 00:00:32,479
And so the way to virtualize them would
be to run the hypervisor in ring 0 and

8
00:00:32,479 --> 00:00:34,130
the guest OS in ring 1.

9
00:00:34,130 --> 00:00:38,540
However, it turned out that there
were exactly 17 instructions,

10
00:00:38,540 --> 00:00:42,040
that were privileged in that
hardware would not allow them to be

11
00:00:42,040 --> 00:00:46,190
executed if they're not issued
from the most privileged ring 0.

12
00:00:46,190 --> 00:00:48,480
However, they did not cause a trap.

13
00:00:48,480 --> 00:00:52,620
Issuing them from another protection
level from ring 1 or above

14
00:00:52,620 --> 00:00:57,450
wouldn't pass control to the hypervisor
and instead would just fail silently.

15
00:00:57,450 --> 00:01:01,720
For instance enabling or disabling
interrupts requires manipulating of

16
00:01:01,720 --> 00:01:04,450
a bit in a privileged flags register and

17
00:01:04,450 --> 00:01:07,670
this can be done via
the POPF/PUSHF instructions.

18
00:01:07,670 --> 00:01:11,480
However, when these instructions
are issued from ring1 in

19
00:01:11,480 --> 00:01:15,080
the Pre 2005 architecture,
they just fail and

20
00:01:15,080 --> 00:01:19,700
the instructions pipeline is allowed
to continue to the next instruction.

21
00:01:19,700 --> 00:01:23,760
The problem with the situation
that there is no trap is that

22
00:01:23,760 --> 00:01:26,440
since control isn't
passed to the hypervisor,

23
00:01:26,440 --> 00:01:31,970
the hypervisor has no idea that the OS
wanted to change the interrupt status.

24
00:01:31,970 --> 00:01:35,680
So, the hypervisor will not do anything
to change these settings, will not

25
00:01:35,680 --> 00:01:40,070
emulate the behavior that was required,
that was intended with this instruction.

26
00:01:40,070 --> 00:01:43,700
At the same time because the failure
of the instruction was silent,

27
00:01:43,700 --> 00:01:47,160
the operating system, the guest OS,
doesn't know that anything wrong

28
00:01:47,160 --> 00:01:50,250
happened, so
the OS will continue its execution,

29
00:01:50,250 --> 00:01:55,450
assuming that correctly the interrupts
were enabled or disabled as intend.

30
00:01:55,450 --> 00:01:59,330
So the OS will then go ahead and
perform operations that, for instance,

31
00:01:59,330 --> 00:02:02,650
if interrupted can leave it in
corrupt or in deadlock state.

32
00:02:02,650 --> 00:02:05,650
Which was intended to be avoided by

33
00:02:05,650 --> 00:02:09,470
some manipulation of this flags
register to disable interrupt.

34
00:02:09,470 --> 00:02:12,080
So clearly this is a major problem and

35
00:02:12,080 --> 00:02:16,780
makes this trap-and-emulate approach
not applicable for these architectures.
