1
00:00:01,310 --> 00:00:02,310
Ok we're live.

2
00:00:02,310 --> 00:00:06,480
Hi I'm Gari and
John is at home right now.

3
00:00:06,480 --> 00:00:06,980
>> Hi, everybody.

4
00:00:08,000 --> 00:00:12,327
>> And today John is going to
help us set up a Gulp workflow.

5
00:00:14,180 --> 00:00:16,160
So how was your weekend John?

6
00:00:16,160 --> 00:00:19,160
Everyone had a long weekend
in the United States?

7
00:00:19,160 --> 00:00:21,750
Yeah, no I had a pretty
good Fourth of July.

8
00:00:21,750 --> 00:00:25,370
Me and my friends,
we went out to Torino and

9
00:00:25,370 --> 00:00:31,094
we went to a food truck festival which,
I just ate way too much food.

10
00:00:31,094 --> 00:00:34,610
>> [LAUGH]
>> There was also a wing festival, and

11
00:00:34,610 --> 00:00:36,160
we went to that too.

12
00:00:36,160 --> 00:00:40,450
And so I probably ate enough food
to survive for the next week.

13
00:00:40,450 --> 00:00:44,210
So, I guess my diet this
week was nothing but water.

14
00:00:44,210 --> 00:00:46,470
But it was fun.

15
00:00:46,470 --> 00:00:47,930
I gambled a little.

16
00:00:47,930 --> 00:00:52,017
Didn't win big or anything, but
came back with more than I left with, so

17
00:00:52,017 --> 00:00:53,290
that's always good.

18
00:00:53,290 --> 00:00:54,290
But it was fun.

19
00:00:54,290 --> 00:00:55,630
How was your weekend?

20
00:00:55,630 --> 00:00:56,370
>> It was great.

21
00:00:56,370 --> 00:01:01,505
Good, it was quiet, I spent some time
with my niece and just sat at home.

22
00:01:01,505 --> 00:01:03,165
Which was really good.

23
00:01:03,165 --> 00:01:06,050
>> [LAUGH] I know,
that was I think my favorite part,

24
00:01:06,050 --> 00:01:08,120
was when we were all
done doing the stuff and

25
00:01:08,120 --> 00:01:12,710
I got to go sit back at the hotel for
a little bit and just relax.

26
00:01:12,710 --> 00:01:15,220
It was nice to get away.

27
00:01:15,220 --> 00:01:18,240
And it's always fun to
celebrate the Fourth of July

28
00:01:18,240 --> 00:01:20,420
shoveling deep-fried food in my face.

29
00:01:22,970 --> 00:01:27,340
But today I guess the big thing
we're talking about is Gulp.

30
00:01:27,340 --> 00:01:32,030
And so, a couple weeks ago
we did a demo about Grunt,

31
00:01:32,030 --> 00:01:36,210
which is a task runner and
sort of a build tool.

32
00:01:36,210 --> 00:01:38,900
And Gulp is in the same vein as that.

33
00:01:38,900 --> 00:01:41,860
It's here to run minification,

34
00:01:41,860 --> 00:01:46,110
concatenation and
all those kinds of tasks for you, so

35
00:01:46,110 --> 00:01:50,020
you can focus on what's most important
in that's the development of your site.

36
00:01:50,020 --> 00:01:52,740
As opposed to the building
process of your site.

37
00:01:55,565 --> 00:01:58,260
So, I set up a little
demonstration today.

38
00:01:59,340 --> 00:02:03,350
There's a repository as well,
which you can find in the broadcasts

39
00:02:04,610 --> 00:02:08,530
section of the discussion boards.

40
00:02:08,530 --> 00:02:12,800
It's under the title Gulp and
Setting Up a Gulp Workflow,

41
00:02:12,800 --> 00:02:14,690
or something similar to that.

42
00:02:14,690 --> 00:02:20,730
Or it's just
github.com/johnudacity/gulp-start.

43
00:02:20,730 --> 00:02:24,610
And you can follow along with
that repository if you want.

44
00:02:24,610 --> 00:02:26,411
Or if you can-
>> John,

45
00:02:26,411 --> 00:02:29,670
you also posted it in
the broadcast category.

46
00:02:29,670 --> 00:02:31,510
Yes, yes.

47
00:02:31,510 --> 00:02:35,500
And yeah, you can follow along now or

48
00:02:35,500 --> 00:02:37,810
you can download it and
follow along later.

49
00:02:37,810 --> 00:02:40,370
I'll also be posting up
sort of like a short

50
00:02:40,370 --> 00:02:43,740
guide of all the steps we
go through on the forum.

51
00:02:43,740 --> 00:02:45,640
So if you just want to watch now and

52
00:02:45,640 --> 00:02:50,070
then go through the guide later, I think
that's maybe the best way to do it.

53
00:02:50,070 --> 00:02:54,099
because I might go a little fast at some
parts and when I watch people do demos

54
00:02:54,099 --> 00:02:58,690
it's easy for me to miss something and
I'm like, wait a minute I just got lost.

55
00:02:58,690 --> 00:03:02,460
And then I'm spending more time figuring
out how to get back to where they were

56
00:03:02,460 --> 00:03:04,150
than actually listening to them.

57
00:03:05,270 --> 00:03:08,250
So it might be best to just like sit,
listen.

58
00:03:08,250 --> 00:03:10,910
If you think of any questions
feel free to ask them.

59
00:03:10,910 --> 00:03:16,050
But let me start screen sharing here,
and we can get started.

60
00:03:16,050 --> 00:03:20,273
Let me just make sure I'm sharing
the right screen, all right there we go.

61
00:03:20,273 --> 00:03:23,668
So, this is my repository.

62
00:03:23,668 --> 00:03:26,600
I have it downloaded all ready, but

63
00:03:26,600 --> 00:03:29,960
just to kind of give you a little
overview of what it looks like,

64
00:03:29,960 --> 00:03:35,380
there's an index.html file
which has some stuff going on.

65
00:03:35,380 --> 00:03:41,160
There's a CSS folder,
which has some compiled CSS in there.

66
00:03:41,160 --> 00:03:45,550
There's a JS folder that has
some JavaScript in here.

67
00:03:45,550 --> 00:03:50,470
And there's a style folder
which has a stylus file.

68
00:03:50,470 --> 00:03:53,254
So Stylus, for
those of you who aren't aware,

69
00:03:53,254 --> 00:03:55,210
is a little bit like LESS or Sass.

70
00:03:55,210 --> 00:04:00,115
It's a pre-compiled CSS language
which you can use Gulp to

71
00:04:00,115 --> 00:04:04,640
compile into CSS which makes
it usable by the browser.

72
00:04:04,640 --> 00:04:07,310
So we can take a quick peek at this and
see that, right?

73
00:04:07,310 --> 00:04:12,590
It kind of looks like CSS but
the syntax is all a little weird.

74
00:04:12,590 --> 00:04:15,550
So what we're going to be using today
is we're going to be using Gulp,

75
00:04:16,850 --> 00:04:20,589
which is known as
the streaming build system,

76
00:04:20,589 --> 00:04:25,620
to basically automate our workflow,
automate a bunch of these processes that

77
00:04:25,620 --> 00:04:29,850
we probably don't want to have to think
about when we're working on our project.

78
00:04:31,900 --> 00:04:34,270
So, I'm going to take you
from installing Gulp,

79
00:04:34,270 --> 00:04:37,740
to setting it up,
to running a few basic tasks,

80
00:04:37,740 --> 00:04:41,900
to setting up maybe some more
advanced tasks if we have time.

81
00:04:41,900 --> 00:04:42,730
So let's get started.

82
00:04:42,730 --> 00:04:46,900
So the first thing we actually
need before we begin using Gulp

83
00:04:46,900 --> 00:04:51,450
is we need to make sure we have
Node J.S. installed on our system.

84
00:04:51,450 --> 00:04:56,380
Installing Node is really easy,
it works on Linux, Mac, Windows.

85
00:04:56,380 --> 00:04:59,870
All you have to do is
you go to nodejs.org.

86
00:04:59,870 --> 00:05:04,380
And you click this big old
INSTALL button right here.

87
00:05:04,380 --> 00:05:08,640
It'll download some stuff, and
then you just run the executable.

88
00:05:08,640 --> 00:05:10,350
And it'll set up Node on your system.

89
00:05:11,700 --> 00:05:17,610
If you have any problem setting up Node
feel free to mention that in the forums,

90
00:05:17,610 --> 00:05:19,690
I'd be happy to help debug them.

91
00:05:19,690 --> 00:05:22,440
But it usually works pretty well.

92
00:05:22,440 --> 00:05:28,050
An easy way to check I think,
is if you do node-v it should spit out

93
00:05:28,050 --> 00:05:32,890
the version of Node in your
terminal on Mac and Linux.

94
00:05:32,890 --> 00:05:36,550
On Windows I believe it
downloads the Node shell.

95
00:05:36,550 --> 00:05:39,360
Which you just open up and you run all
your Node commands from there, and

96
00:05:39,360 --> 00:05:42,260
hopefully that shouldn't be broken.

97
00:05:42,260 --> 00:05:45,880
I think it's easier to break Node on
Mac and Linux than it is on Windows.

98
00:05:47,500 --> 00:05:50,398
Is my text big enough on my terminal,
Gari?

99
00:05:50,398 --> 00:05:52,440
>> Yep, looks good.

100
00:05:52,440 --> 00:05:53,780
>> Ok, cool.

101
00:05:53,780 --> 00:06:00,330
So once you have Node, the next step
is to navigate into your [COUGH].

102
00:06:00,330 --> 00:06:05,370
So I'm in my project that I
want to begin Gulping here.

103
00:06:05,370 --> 00:06:10,110
And I need to install Gulp, or
I need to set up Gulp on this project.

104
00:06:10,110 --> 00:06:13,810
So when you install Node you get what's
called a Node Package Manager or

105
00:06:13,810 --> 00:06:18,050
npm, and
you can use the command npm install

106
00:06:18,050 --> 00:06:21,230
to install just about any
Node package available.

107
00:06:21,230 --> 00:06:27,220
And you can search for the Node
packages on the Node Package Manager.

108
00:06:27,220 --> 00:06:30,550
But for our case we're using Gulp so

109
00:06:30,550 --> 00:06:34,140
we're going to use npm
install --save-dev gulp.

110
00:06:35,430 --> 00:06:39,270
So this is going to take just a second
and we can see that it's doing

111
00:06:39,270 --> 00:06:43,400
something, and my dog seems to be very
interested in something, come here dog.

112
00:06:45,990 --> 00:06:47,680
There we go, so it's all install.

113
00:06:49,400 --> 00:06:51,870
So now if we look at our project
directory we see we have

114
00:06:53,950 --> 00:06:58,530
this one folder that was created,
which is this Node modules folder.

115
00:06:58,530 --> 00:07:01,730
And if we take a look at what's
inside there we see we have Gulp.

116
00:07:01,730 --> 00:07:05,917
So basically what the npm
command did was it

117
00:07:05,917 --> 00:07:10,310
looked at the Node servers, it got Gulp.

118
00:07:10,310 --> 00:07:14,389
It brought that back to my project,
it created this Node modules folder, and

119
00:07:14,389 --> 00:07:16,050
then it set up Gulp.

120
00:07:16,050 --> 00:07:19,970
And it got all the necessary files and

121
00:07:19,970 --> 00:07:24,290
dependencies to run Gulp on my system
in this particular project folder.

122
00:07:26,350 --> 00:07:31,310
So now that I have a Gulp, just like
with Grunt, we needed a Grunt file

123
00:07:31,310 --> 00:07:35,830
to basically put all our code in and
run everything.

124
00:07:35,830 --> 00:07:37,310
Here we're going to
do something similar.

125
00:07:37,310 --> 00:07:39,130
We're going to make what's
called a Gulp file.

126
00:07:41,490 --> 00:07:42,960
And so we got our Gulp file.

127
00:07:42,960 --> 00:07:46,760
So let's actually open this up,
and open up our Gulp file.

128
00:07:46,760 --> 00:07:51,211
So, we've got a whole lot of
nothing in our Gulp file.

129
00:07:51,211 --> 00:07:56,121
So let's get started actually
setting up our Gulp file.

130
00:07:56,121 --> 00:07:57,572
So.

131
00:07:57,572 --> 00:08:02,259
When we did the demo with grunt,
grunt we saw, was very much like we set

132
00:08:02,259 --> 00:08:06,760
up a big JSON that sort of
configured all of our operations.

133
00:08:06,760 --> 00:08:13,220
Well, gulp kind of takes a different
way of thinking, different philosophy.

134
00:08:13,220 --> 00:08:16,440
It's very much a convention
over configuration.

135
00:08:16,440 --> 00:08:19,640
So we're actually going to be
writing a lot of JavaScript.

136
00:08:19,640 --> 00:08:24,995
So we're actually going
to start with bar equals

137
00:08:24,995 --> 00:08:29,000
require goal.

138
00:08:29,000 --> 00:08:33,250
So what this is doing is this
is using nodes require module

139
00:08:33,250 --> 00:08:37,700
which you can kind of think
of as like an import.

140
00:08:37,700 --> 00:08:43,900
It's basically importing
this necessary file.

141
00:08:43,900 --> 00:08:47,210
It's looking at the node modules folder,
it's pulling in gulp.

142
00:08:47,210 --> 00:08:51,720
And we're basically just storing it
in this variable gulp to use later.

143
00:08:53,480 --> 00:08:56,440
And grow.gulp all we're going
to be doing is we're going to be

144
00:08:56,440 --> 00:08:57,200
defining tasks.

145
00:08:58,580 --> 00:09:03,058
And so just like grunt there's
a default task we can define.

146
00:09:03,058 --> 00:09:06,660
And a task takes two parameters.

147
00:09:06,660 --> 00:09:10,830
It takes a name, and it also takes, and

148
00:09:10,830 --> 00:09:12,950
actually let me make the text
a little bit bigger.

149
00:09:14,360 --> 00:09:19,110
And it also takes a function,
or some sort of call back.

150
00:09:20,510 --> 00:09:23,810
There's a few other attributes
you can pass in to here, but

151
00:09:23,810 --> 00:09:26,790
this is the pretty plain and
simple all sort of gulp task.

152
00:09:28,130 --> 00:09:30,850
So let's make our function
actually do something and

153
00:09:30,850 --> 00:09:34,140
then we'll see how to run gulp.

154
00:09:34,140 --> 00:09:35,920
Let's just do something simple for now.

155
00:09:35,920 --> 00:09:38,870
Let's just do it simple console log.

156
00:09:42,240 --> 00:09:43,528
I'm running gulp.

157
00:09:43,528 --> 00:09:44,955
Ok.

158
00:09:44,955 --> 00:09:49,490
So we set up our gulp file.

159
00:09:49,490 --> 00:09:52,240
We've set up this really simple task.

160
00:09:52,240 --> 00:09:57,690
So just like with grunt the way we
run Gulp is just with the command go.

161
00:09:57,690 --> 00:09:59,530
And this will run our default task.

162
00:09:59,530 --> 00:10:03,290
So by putting this in,
we're going to run this default task.

163
00:10:05,470 --> 00:10:08,660
And we can see that our
console logged out.

164
00:10:08,660 --> 00:10:09,470
I'm running Gulp.

165
00:10:11,100 --> 00:10:12,300
Fantastic.

166
00:10:12,300 --> 00:10:14,380
So pretty simple set up.

167
00:10:14,380 --> 00:10:18,740
You can also you know create another
task and give it a specific name.

168
00:10:19,910 --> 00:10:23,965
It can just do another

169
00:10:23,965 --> 00:10:29,581
consul.log, or robot.

170
00:10:29,581 --> 00:10:31,460
Save it.

171
00:10:31,460 --> 00:10:36,850
And when we run gulp, you see that
it only runs our default task.

172
00:10:36,850 --> 00:10:40,060
If I do gulprobot So

173
00:10:40,060 --> 00:10:44,790
that's going to run our robot task.

174
00:10:44,790 --> 00:10:50,440
We can specify what tasks we want
Gulp to run by just saying Gulp and

175
00:10:50,440 --> 00:10:52,510
then the task's name.

176
00:10:52,510 --> 00:11:00,718
If we want to run multiple tasks,
say I have another task,is just hello.

177
00:11:00,718 --> 00:11:06,474
Console.log,

178
00:11:06,474 --> 00:11:11,280
hello world.

179
00:11:11,280 --> 00:11:14,730
In my default task or
in another named task.

180
00:11:14,730 --> 00:11:19,087
Instead of using a function as my
callback i can actually specify

181
00:11:19,087 --> 00:11:24,980
an array of method names or task names.

182
00:11:24,980 --> 00:11:28,770
So this is going to run on when I
just use gulp because this is my

183
00:11:28,770 --> 00:11:30,020
default task.

184
00:11:30,020 --> 00:11:33,760
It's going to look at this
array of callback functions and

185
00:11:33,760 --> 00:11:36,260
it's going to first run my robot task.

186
00:11:36,260 --> 00:11:38,750
And then it's going to
run my hello task.

187
00:11:40,090 --> 00:11:47,840
So let me save this and when I do Gulp,
you see that it ran my robot task,

188
00:11:47,840 --> 00:11:53,070
finished my robot task, ran my hello
task and finished my hello task.

189
00:11:53,070 --> 00:11:57,760
Then kind of I ran these default tasks
which was running these essentially.

190
00:11:59,630 --> 00:12:04,120
So that's sort of a basic
way of setting up.

191
00:12:04,120 --> 00:12:06,220
Just basic tasks and go.

192
00:12:06,220 --> 00:12:08,330
Obviously you're going to
want to do a lot more.

193
00:12:08,330 --> 00:12:12,960
But this is sort of the basic structure
of setting up a task that will run

194
00:12:12,960 --> 00:12:14,230
in the terminal elliptical.

195
00:12:16,610 --> 00:12:20,500
So Let's actually figure out now,

196
00:12:20,500 --> 00:12:27,210
how to do something a little bit more
than just logging out to the console.

197
00:12:27,210 --> 00:12:30,700
Obviously you can use Gulp
to do that if you want but

198
00:12:32,100 --> 00:12:34,260
nobody really wants to do that.

199
00:12:34,260 --> 00:12:39,230
You guys are here because you want to be
able to modify files Make things look

200
00:12:41,230 --> 00:12:43,560
really nice and make things perform.

201
00:12:43,560 --> 00:12:46,040
So let's get rid of everything
in my gulp file except for

202
00:12:46,040 --> 00:12:50,741
this var gulp = require('gulp').

203
00:12:50,741 --> 00:12:53,130
And let's install some plugins.

204
00:12:54,200 --> 00:13:02,060
So just like Grunt, Gulp has
A whole directory full of plugins.

205
00:13:03,330 --> 00:13:05,240
There's 1,532 plugins total.

206
00:13:05,240 --> 00:13:10,590
And I mean there's more
getting added every day.

207
00:13:10,590 --> 00:13:14,750
Most of the big ones that
you're probably using in grunt

208
00:13:14,750 --> 00:13:16,830
are probably also have been made for
gulp.

209
00:13:16,830 --> 00:13:21,630
So for example, a popular one,
right, is to concat your files.

210
00:13:21,630 --> 00:13:23,760
There's a gulp-concat.

211
00:13:23,760 --> 00:13:27,150
If you want to, you know,
uglify your files,

212
00:13:27,150 --> 00:13:30,540
which is basically
minify JavaScript files.

213
00:13:32,250 --> 00:13:34,540
You can do that with gulp as well.

214
00:13:36,650 --> 00:13:41,190
So you can search for plugins here,
and if you click on plugin name.

215
00:13:41,190 --> 00:13:44,290
It'll tell you a little
bit about that plugin at

216
00:13:44,290 --> 00:13:46,680
the Node Package manager's website.

217
00:13:46,680 --> 00:13:49,650
It'll tell you how to
install that plugin, so

218
00:13:49,650 --> 00:13:52,480
we would just run this
command in our terminal.

219
00:13:52,480 --> 00:13:53,390
To install the plugin.

220
00:13:53,390 --> 00:13:58,400
And it also gives you a little bit
of a demo of the usage, usually.

221
00:13:58,400 --> 00:14:02,920
And then,
depending on how well it's documented.

222
00:14:02,920 --> 00:14:06,000
Some of the plugins are not
documented very well.

223
00:14:06,000 --> 00:14:10,650
So sometimes you've got to go bug
the uou know GitHub owner to like

224
00:14:10,650 --> 00:14:15,990
explain some things but for the most
part they're pretty well documented.

225
00:14:15,990 --> 00:14:19,790
Just some of them, especially when
you start diving into the really new

226
00:14:19,790 --> 00:14:25,010
plugins is when you'll start finding
one's with kind of bad documentation.

227
00:14:25,010 --> 00:14:28,290
But the ones we're going to be using
today are pretty well documented.

228
00:14:28,290 --> 00:14:31,620
We also see options and any sort
of errors that could be outputted.

229
00:14:33,740 --> 00:14:40,960
So let's run this command,
this npm install --save-dev,

230
00:14:40,960 --> 00:14:44,884
and we're going to do gulp-uglify.

231
00:14:46,970 --> 00:14:49,430
And we're just going to give that
a little bit of a second to run.

232
00:14:51,010 --> 00:14:53,550
That runs and
I'm also going to install one more,

233
00:14:53,550 --> 00:14:58,450
I'm going to install
gulp-rename just because

234
00:14:58,450 --> 00:15:02,920
that's going to come in handy,
that's going to let us rename files

235
00:15:02,920 --> 00:15:07,170
pretty easily without having to dive
into like string manipulation and stuff.

236
00:15:09,930 --> 00:15:12,750
So let's pop open our gulp file again.

237
00:15:12,750 --> 00:15:15,220
And let's include these as well.

238
00:15:15,220 --> 00:15:19,980
So we're going to include uglify,
I can spell.

239
00:15:23,090 --> 00:15:26,080
And we're going to include
our rename plugins.

240
00:15:27,160 --> 00:15:32,010
Using the same code as we did
to include our Gulp file.

241
00:15:32,010 --> 00:15:35,860
Our sorry or go plug and module.

242
00:15:35,860 --> 00:15:37,720
Yes is the right word.

243
00:15:37,720 --> 00:15:40,660
Rename the.

244
00:15:40,660 --> 00:15:43,920
So now we have a glyph which will.

245
00:15:43,920 --> 00:15:47,200
Will use to mina five
I heard JavaScript.

246
00:15:47,200 --> 00:15:52,615
And we also have our renamed which we
use to sort of rename files as we need.

247
00:15:52,615 --> 00:15:57,345
So let's make a new task, and
let's call this one scripts.

248
00:15:57,345 --> 00:16:02,337
This will be our task which we use
to basically run any sort of script

249
00:16:02,337 --> 00:16:03,150
methods.

250
00:16:04,490 --> 00:16:06,100
And let's give it a callback function.

251
00:16:08,360 --> 00:16:13,130
And in this function we're
going to specify a source file,

252
00:16:13,130 --> 00:16:16,220
that we want to act on.

253
00:16:16,220 --> 00:16:20,010
And the way we do this is
we use our gulp module.

254
00:16:20,010 --> 00:16:21,532
And we use it source methods.

255
00:16:21,532 --> 00:16:27,330
So gulp.source and
then we specify what we want to look at.

256
00:16:27,330 --> 00:16:31,910
So specifically we want to look
in the JavaScript folder and

257
00:16:31,910 --> 00:16:34,690
any file that has JavaScript.

258
00:16:34,690 --> 00:16:41,370
So this star is what's
known as a catchall.

259
00:16:41,370 --> 00:16:44,630
What we've created here is
we've created here a glob.

260
00:16:44,630 --> 00:16:48,540
And this glob basically says
look in the js folder, for

261
00:16:48,540 --> 00:16:52,590
any file, any name,
that also includes a .js.

262
00:16:52,590 --> 00:16:56,280
This is a little bit
like regular expressions.

263
00:16:57,960 --> 00:17:02,440
But a little less robust
than regular expressions.

264
00:17:02,440 --> 00:17:06,220
We can also look for any
sub-directories that may be in there.

265
00:17:06,220 --> 00:17:08,480
By using like a double star and
then slash.

266
00:17:08,480 --> 00:17:13,671
So this basically says,
look in the js folder, for

267
00:17:13,671 --> 00:17:20,337
any other folders and then look for
files that have the js suffix.

268
00:17:20,337 --> 00:17:24,901
But since we don't have any folders
in there we're just going to do this.

269
00:17:24,901 --> 00:17:29,897
And now what we're going to do
is we're going to use a pipe.

270
00:17:29,897 --> 00:17:35,342
So gulp is all about using
the input output stream and

271
00:17:35,342 --> 00:17:41,480
a pipe basically pipes either to or
from this string.

272
00:17:41,480 --> 00:17:45,320
You can kind of think of it
like water pipes, I guess.

273
00:17:45,320 --> 00:17:48,970
The source is basically whatever
gets outputed from this,

274
00:17:48,970 --> 00:17:51,820
is going to get piped
into this next method.

275
00:17:53,390 --> 00:17:57,490
So we can chain them together like this,
you can have tons of pipes.

276
00:17:58,860 --> 00:17:59,950
Can get together like that.

277
00:18:01,290 --> 00:18:03,730
But sometimes you might
have a lot of steps.

278
00:18:03,730 --> 00:18:07,600
So usually it's just
easier to add a new line.

279
00:18:07,600 --> 00:18:08,550
Tab it.

280
00:18:08,550 --> 00:18:09,980
Then just line it up like this.

281
00:18:11,430 --> 00:18:14,343
So we're going to pipe
any of the contents that

282
00:18:14,343 --> 00:18:18,210
are gulp.source method finds
into our uglify function.

283
00:18:20,140 --> 00:18:24,010
So basically anything that ends
up getting picked out from this

284
00:18:24,010 --> 00:18:26,850
is going to get shoved into this method.

285
00:18:26,850 --> 00:18:29,310
And then we're going to
get some results and

286
00:18:29,310 --> 00:18:32,660
we're going to pipe that
into our rename method.

287
00:18:32,660 --> 00:18:36,494
And we're going to rename it app.min.js

288
00:18:40,247 --> 00:18:45,920
And then we're going to pipe the result
of that into a gulp.destination.

289
00:18:47,430 --> 00:18:50,040
And we're just going to shove
it into our JavaScript folder.

290
00:18:52,850 --> 00:18:56,810
So let's go ahead and run the scripts
task now and see what happens.

291
00:18:56,810 --> 00:19:00,210
So let's do gulp scripts.

292
00:19:03,760 --> 00:19:05,930
All right so it finished running.

293
00:19:05,930 --> 00:19:09,854
So let's take a look and
see what happens so

294
00:19:09,854 --> 00:19:14,977
we see here that we now have
this app.men.js file which

295
00:19:14,977 --> 00:19:20,328
has all the minified JavaScript
in from our app.js file.

296
00:19:20,328 --> 00:19:21,432
Pretty neat.

297
00:19:21,432 --> 00:19:25,568
Pretty simple too.

298
00:19:25,568 --> 00:19:31,000
I think the nice thing about using
this sort of streaming system as well

299
00:19:31,000 --> 00:19:35,235
is with grunt,
when you use the configuration file,

300
00:19:35,235 --> 00:19:39,765
what usually ends up happening is a lot
of temporary folders get created.

301
00:19:39,765 --> 00:19:43,935
And that ends up taking a lot of
time whereas with this input output

302
00:19:43,935 --> 00:19:49,685
streaming, there's no need to
create these temporary folders.

303
00:19:49,685 --> 00:19:53,130
And everything just kind of
runs a little bit faster.

304
00:19:53,130 --> 00:19:56,770
It may not be as noticeable
on smaller projects.

305
00:19:56,770 --> 00:20:01,186
But as these gulp files and grunt files
get a lot bigger that's when you start

306
00:20:01,186 --> 00:20:04,853
noticing sort of the performance
difference between the two.

307
00:20:07,000 --> 00:20:09,940
So that's great.

308
00:20:09,940 --> 00:20:11,110
Let's do the same thing.

309
00:20:11,110 --> 00:20:13,530
Let's minify our CSS now.

310
00:20:13,530 --> 00:20:16,120
So usually when I'm
working on a project and

311
00:20:16,120 --> 00:20:20,600
I have decided okay,
I need a new step in my build.

312
00:20:20,600 --> 00:20:23,920
I need to minify my CSS, for example.

313
00:20:23,920 --> 00:20:29,401
So we have this or is it our stylist,
and we also have just our regular

314
00:20:29,401 --> 00:20:34,802
CSS that gets outputted from that so
we need to minify that as well.

315
00:20:38,182 --> 00:20:40,476
So let's figure out how to do that, so

316
00:20:40,476 --> 00:20:45,430
what I would do is I would start by
going to the gulp js plugin directory.

317
00:20:45,430 --> 00:20:48,640
And I would look for maybe CSS and
let's see what that gives me.

318
00:20:49,900 --> 00:20:52,968
A bunch of things.

319
00:20:52,968 --> 00:20:57,680
Let's try minify that search as well.

320
00:20:59,410 --> 00:21:04,770
I don't think I want that let's just
try minify CSS and here we have we go.

321
00:21:04,770 --> 00:21:08,590
We have gulp-minify-CSS.

322
00:21:08,590 --> 00:21:12,790
And so this is a gulp plugin
to minify CSS using clean CSS.

323
00:21:14,040 --> 00:21:18,640
So let's use this file
to minify our CSS.

324
00:21:20,798 --> 00:21:27,288
So we're going to use the same sort
of command, mpm install, save dev.

325
00:21:27,288 --> 00:21:32,770
Gulp-minify-CSS.

326
00:21:32,770 --> 00:21:39,360
And I'm going to wait a second for
to install and there you go.

327
00:21:39,360 --> 00:21:43,010
So it's installed, it's set up, if we
look inside our node modules folder we

328
00:21:43,010 --> 00:21:45,850
see that we have
gulp-minify-CSS in there.

329
00:21:47,480 --> 00:21:50,670
So let's actually include that
in our gulp file as well.

330
00:21:50,670 --> 00:21:55,850
So we're going to have
minifyCSS = require(

331
00:21:55,850 --> 00:22:00,580
'gulp-minify-css' ).

332
00:22:00,580 --> 00:22:02,520
And now let's set up a new task.

333
00:22:03,940 --> 00:22:06,530
We're going to call
this our styles task.

334
00:22:11,870 --> 00:22:14,260
And now we're going to
have to specify a source.

335
00:22:15,640 --> 00:22:19,770
In this case we're going
to specify our css folder.

336
00:22:19,770 --> 00:22:24,430
We're not going to do anything
with the stylus file just yet and

337
00:22:24,430 --> 00:22:27,630
we're going to look for
anything that has a dot css.

338
00:22:27,630 --> 00:22:33,040
We're going to pipe that into our
minified CSS function or plug in,

339
00:22:34,470 --> 00:22:39,650
and we're going to spit
that out to a destination.

340
00:22:42,380 --> 00:22:46,210
And in this case we're going to spit
it out to just a minCSS folder.

341
00:22:48,280 --> 00:22:52,160
All right so let's run that gulp styles.

342
00:22:53,320 --> 00:22:54,330
Let it do its thing.

343
00:22:55,550 --> 00:22:59,780
And we see we get a min CSS folder and
we get some minified CSS.

344
00:23:02,000 --> 00:23:06,500
Pretty straightforward I think.

345
00:23:06,500 --> 00:23:09,000
And then let's say we want to
run these both together.

346
00:23:09,000 --> 00:23:16,040
So one way we can do this is we
can just say gulp scripts styles.

347
00:23:18,240 --> 00:23:20,170
And that should run both of them.

348
00:23:20,170 --> 00:23:22,820
But you probably don't want to
have to remember all the different

349
00:23:25,320 --> 00:23:27,850
names of all the tasks
that you want to run.

350
00:23:27,850 --> 00:23:32,900
So usually it's a little easier
to specify a default task.

351
00:23:32,900 --> 00:23:38,511
Or maybe like a like a smaller subset
of general tasks you want to be using.

352
00:23:38,511 --> 00:23:46,713
That just take you know scripts [COUGH].

353
00:23:46,713 --> 00:23:51,331
>> John, there are a couple
of questions [INAUDIBLE].

354
00:23:51,331 --> 00:23:52,507
>> Yeah.

355
00:23:52,507 --> 00:23:55,479
Can I, let me, yeah.

356
00:23:55,479 --> 00:23:56,748
I'm down to take some
questions right now.

357
00:23:56,748 --> 00:23:58,755
I think this is a good point
to take some questions.

358
00:23:58,755 --> 00:24:01,575
>> [CROSSTALK] Okay, so
that's the basic function I'm sorry.

359
00:24:01,575 --> 00:24:04,269
What was that?

360
00:24:04,269 --> 00:24:07,815
>> Do you want to see the questions
on your screen and answer them, or

361
00:24:07,815 --> 00:24:09,500
do you want me to read them out?

362
00:24:09,500 --> 00:24:11,580
>> No, yeah, feel free to them out.

363
00:24:11,580 --> 00:24:12,330
>> Okay.

364
00:24:12,330 --> 00:24:18,880
So Tom ask, what happens if there is
more than one .gs file in the folder?

365
00:24:19,920 --> 00:24:20,720
>> That's a good question.

366
00:24:20,720 --> 00:24:21,790
So let's take a look.

367
00:24:22,960 --> 00:24:29,120
So let's actually add a new file here,

368
00:24:29,120 --> 00:24:34,347
and let's call this app2.js,

369
00:24:34,347 --> 00:24:42,758
and let's just put in some
filler function here, =b

370
00:24:49,306 --> 00:24:52,859
They're mad because I didn't,
okay, so let's take a look.

371
00:24:52,859 --> 00:24:57,680
So we have this app2 with
some basic JavaScript in it.

372
00:24:57,680 --> 00:25:00,330
Let's see what happened when we
run gulp script in this case.

373
00:25:02,250 --> 00:25:08,030
All right, so it finished running,
and in my app.min.js,

374
00:25:08,030 --> 00:25:13,680
we see that it actually only
minified this new JavaScript file.

375
00:25:13,680 --> 00:25:16,860
The problem with this is it's because
we're not concatenating these

376
00:25:16,860 --> 00:25:17,405
two, first.

377
00:25:18,440 --> 00:25:23,930
So usually what you want
to do in this process,

378
00:25:23,930 --> 00:25:29,640
and it was something I was going to get
to later, was to concatenate your files.

379
00:25:29,640 --> 00:25:35,160
And actually add an extra step
here where you concatenate

380
00:25:35,160 --> 00:25:39,130
them using a concatenation plugin,
and then

381
00:25:39,130 --> 00:25:43,730
pipe them into the minification process,
and then set them as a destination.

382
00:25:46,290 --> 00:25:50,989
As you can see here when we ran this,
it just ran it on the single js

383
00:25:50,989 --> 00:25:55,181
file instead of grabbing all
of them inside this folder.

384
00:25:59,755 --> 00:26:00,452
See that, again.

385
00:26:00,452 --> 00:26:06,918
Yeah, so in this case there's
an Orchestrator error.

386
00:26:06,918 --> 00:26:10,610
Because it's mad concat's not defined.

387
00:26:10,610 --> 00:26:15,460
Yeah, so usually it's best to
concatenate your JavaScript files, or

388
00:26:15,460 --> 00:26:19,940
you need to output them
all to a different name.

389
00:26:19,940 --> 00:26:25,210
So this is a case where using this
rename function wouldn't be a good idea.

390
00:26:25,210 --> 00:26:30,240
Because I'm basically renaming all
of my files to this app.min.js and

391
00:26:31,300 --> 00:26:33,350
spitting them all out to here.

392
00:26:33,350 --> 00:26:37,290
And because it's doing one at a time
it does this one first, spits it out to

393
00:26:37,290 --> 00:26:42,960
here, does this one second, and it
overwrites everything in here with that.

394
00:26:42,960 --> 00:26:46,570
So, usually you should concatenate them,
or specify.

395
00:26:46,570 --> 00:26:54,270
You know, use some tricky stuff here to
specify sort of like an iterative name.

396
00:26:56,270 --> 00:26:57,410
There's a few things you can do.

397
00:26:57,410 --> 00:27:02,181
And we can talk about
those in a little bit.

398
00:27:02,181 --> 00:27:03,249
>> Okay, thanks, John.

399
00:27:03,249 --> 00:27:06,820
>> Thanks, John.

400
00:27:06,820 --> 00:27:11,170
>> So Tim asks, how would you go
about editing original documents

401
00:27:11,170 --> 00:27:14,050
if you have already ran them them for
a task, or

402
00:27:14,050 --> 00:27:16,630
does it keep the original
copy in the same folder?

403
00:27:17,640 --> 00:27:18,660
>> Yeah, good question.

404
00:27:19,730 --> 00:27:24,010
So, typically,
this actually might be a good chance,

405
00:27:25,840 --> 00:27:30,090
let me show you guys a little
bit better structure.

406
00:27:30,090 --> 00:27:33,940
So this is where structuring your
project is really important.

407
00:27:36,430 --> 00:27:41,050
So here's just a little project
that I've been working on.

408
00:27:44,410 --> 00:27:47,520
And so it's important to structure
your project really cleanly.

409
00:27:47,520 --> 00:27:52,160
So here I actually have two folders.

410
00:27:52,160 --> 00:27:54,460
I have an app and a public.

411
00:27:55,640 --> 00:27:57,600
And inside my public folder,

412
00:27:59,170 --> 00:28:04,930
actually pretty much all
my sort of minified code.

413
00:28:04,930 --> 00:28:09,990
Whereas in my app folder I have
basically anything that I'm working on.

414
00:28:09,990 --> 00:28:15,100
Another easy structure
to set up is just to do,

415
00:28:15,100 --> 00:28:18,420
let me just make a simple
test folder here,

416
00:28:19,530 --> 00:28:24,850
is to actually separate a source and
distribution folder.

417
00:28:24,850 --> 00:28:29,170
And in your distribution folder that's
where you're actually going to be sort

418
00:28:29,170 --> 00:28:33,400
of piping all of your outputed,
minified code to and

419
00:28:33,400 --> 00:28:38,050
you're going to do all your
development on the source code.

420
00:28:38,050 --> 00:28:44,533
So, hopefully, you won't have to go
about editing the minified files

421
00:28:44,533 --> 00:28:49,731
because nobody wants to go through and
try and edit this.

422
00:28:49,731 --> 00:28:51,410
You're not going to be
able to find anything.

423
00:28:51,410 --> 00:28:56,500
It's going to be much easier to just
be able to go back and edit this, and

424
00:28:56,500 --> 00:29:02,436
output the results of the minification
process to either a new folder or file.

425
00:29:02,436 --> 00:29:08,340
And it's easiest to organize them as
the source directory, or the development

426
00:29:08,340 --> 00:29:11,610
directory, which is you know where
you're doing all of your work.

427
00:29:11,610 --> 00:29:16,390
And then using gulp or grunt to
build to a distribution directory

428
00:29:16,390 --> 00:29:19,520
where you'll have basically all
your production ready code.

429
00:29:22,510 --> 00:29:23,260
>> All right.

430
00:29:23,260 --> 00:29:27,230
Thanks, John, and thanks,
Tim, for the question.

431
00:29:27,230 --> 00:29:31,690
So Robert asks,
what's the --save dev for?

432
00:29:31,690 --> 00:29:37,790
>> Yeah, so let me go back here.

433
00:29:39,620 --> 00:29:45,720
So typically in a node projects,
I didn't do it this time,

434
00:29:45,720 --> 00:29:50,220
but you should always
include a package.json file.

435
00:29:51,720 --> 00:29:57,098
You can set one up pretty quickly
using the command npm init,

436
00:29:57,098 --> 00:30:03,335
and it'll take you through this
sort of little step-through guide.

437
00:30:03,335 --> 00:30:06,981
And you'll see that it makes
this package.json file.

438
00:30:06,981 --> 00:30:11,532
So let me actually open that up and
show you what's in there.

439
00:30:11,532 --> 00:30:16,895
So this package.json file
tracks all of our dependencies.

440
00:30:16,895 --> 00:30:21,840
There's developer dependencies and
then regular dependencies.

441
00:30:21,840 --> 00:30:29,420
When you do save dev, it should throw
them inside the developer dependencies.

442
00:30:29,420 --> 00:30:33,424
It didn't because I did
this after the fact.

443
00:30:33,424 --> 00:30:37,013
But developer dependencies
are modules and

444
00:30:37,013 --> 00:30:41,870
plugins that you as a developer
are going to be using.

445
00:30:41,870 --> 00:30:46,910
That is, the public version of your site
isn't going to rely on these modules,

446
00:30:46,910 --> 00:30:48,620
or plugins, or frameworks, or whatever.

447
00:30:49,970 --> 00:30:53,710
Standard dependencies are going to
be things like if you include

448
00:30:53,710 --> 00:30:56,860
Angular in your project in
your site depends on Angular.

449
00:30:58,080 --> 00:31:02,268
Developer dependency is, like I said,
are only going to be things that you use

450
00:31:02,268 --> 00:31:04,997
in the development process,
or someone on a team,

451
00:31:04,997 --> 00:31:09,328
or is working your project, should also
be using in their development process.

452
00:31:09,328 --> 00:31:13,254
Because you've included say,
like a gulp file, or

453
00:31:13,254 --> 00:31:17,190
a certain bower components,
and things like that.

454
00:31:20,660 --> 00:31:22,600
That's what the save dev does.

455
00:31:22,600 --> 00:31:27,945
If you want to save just your
dependencies, you can do npm install

456
00:31:27,945 --> 00:31:33,980
--save, and that'll save them
to your projects dependencies.

457
00:31:35,530 --> 00:31:38,860
So, again, dependencies are basically
things that are required for

458
00:31:38,860 --> 00:31:40,750
your app to run.

459
00:31:40,750 --> 00:31:45,850
Developer dependencies are things that
are probably best to install if you plan

460
00:31:45,850 --> 00:31:50,660
on developing on that project as well.

461
00:31:50,660 --> 00:31:53,295
>> All right, thanks John,
and thanks Robert.

462
00:31:53,295 --> 00:31:55,880
Great question.

463
00:31:55,880 --> 00:32:01,476
Stephen asks, where and
how does gif fit with all of this?

464
00:32:04,186 --> 00:32:09,530
>> Yeah, so git and gulp are two very,
very different things.

465
00:32:09,530 --> 00:32:13,790
Git is strictly for version control.

466
00:32:13,790 --> 00:32:19,670
You're going to be using Git to
basically track the progress of

467
00:32:19,670 --> 00:32:24,760
your project, and sort of track
iterations throughout your project.

468
00:32:24,760 --> 00:32:27,718
You can kind of think of it, right,

469
00:32:27,718 --> 00:32:33,270
as you're saving points in time
at where your project's at.

470
00:32:33,270 --> 00:32:37,025
Whereas gulp is largely
going to be used for

471
00:32:37,025 --> 00:32:42,275
minifying and
getting code ready for production.

472
00:32:42,275 --> 00:32:46,860
Oftentimes, these things kind
of come hand in hand and,

473
00:32:46,860 --> 00:32:50,160
as you can see there's a lot
of sort of git plugins.

474
00:32:51,170 --> 00:32:56,880
Let's see git, or I think there
should be some git plugins.

475
00:32:56,880 --> 00:32:58,710
Let's see, gulp, get.

476
00:32:58,710 --> 00:32:59,995
No?

477
00:32:59,995 --> 00:33:04,738
I swear there were some git plugins,
because I've used them before, or

478
00:33:04,738 --> 00:33:08,106
maybe it's just not filtering right,
right now.

479
00:33:11,569 --> 00:33:14,240
Yeah, why didn't I find this?

480
00:33:14,240 --> 00:33:16,913
So, there's a gulp git plug in,

481
00:33:16,913 --> 00:33:23,360
which you can use to actually automate
a lot of your sort of git processes.

482
00:33:23,360 --> 00:33:30,270
So, say you only ever minify your code
when it's at a point that's ready

483
00:33:30,270 --> 00:33:35,180
to be committed, and you maybe just
want to automate that commit process.

484
00:33:35,180 --> 00:33:38,220
Well, they have some
definitions here for

485
00:33:38,220 --> 00:33:41,560
how you could write
tasks that do commits.

486
00:33:41,560 --> 00:33:45,070
They also have how you
can sort of add files.

487
00:33:45,070 --> 00:33:47,842
So you can, I guess,

488
00:33:47,842 --> 00:33:53,250
use gulp to automate your git processes.

489
00:33:53,250 --> 00:33:56,480
But ultimately the reason
you're using git and

490
00:33:56,480 --> 00:33:59,385
the reason you're using
gulp are different.

491
00:33:59,385 --> 00:34:03,925
Git is strictly for tracking
the progress of your project, and

492
00:34:03,925 --> 00:34:06,806
GitHub is for hosting it online.

493
00:34:06,806 --> 00:34:11,641
Whereas gulp is for
getting your code production ready and

494
00:34:11,641 --> 00:34:17,768
automating sort of all of these kinds
of workflows that you'll be doing.

495
00:34:17,768 --> 00:34:23,818
From magnifying concatenating
to compiling things like Stylus,

496
00:34:23,818 --> 00:34:30,739
Sass, CoffeeScript, to watching files
for changes and things like that.

497
00:34:30,739 --> 00:34:35,120
>> Okay, thank you.

498
00:34:35,120 --> 00:34:36,520
A couple of more questions, John.

499
00:34:37,639 --> 00:34:43,851
Michael asked, If you concatenated
the files, and I guess he's referring

500
00:34:43,851 --> 00:34:49,130
to the concat, wouldn't it try
to also include app.min.js?

501
00:34:49,130 --> 00:34:50,520
>> Yeah, you're actually right, and

502
00:34:50,520 --> 00:34:52,726
that's because I'm throwing
it in the same folder,

503
00:34:52,726 --> 00:34:58,270
which is why usually it's a good
idea to have separate folders.

504
00:35:00,700 --> 00:35:03,600
I did not structure this
demo project very well.

505
00:35:03,600 --> 00:35:07,510
So, it would try to include
the app.min.js, but

506
00:35:07,510 --> 00:35:11,264
you can use globs to
ignore files as well.

507
00:35:11,264 --> 00:35:14,695
I believe, let's see here,

508
00:35:14,695 --> 00:35:19,225
there is a way to exclude things using,

509
00:35:19,225 --> 00:35:25,005
I think it's like a double
minus sign in the glob.

510
00:35:25,005 --> 00:35:27,782
It's been a while since I've had
to try to something like that,

511
00:35:27,782 --> 00:35:28,870
but yeah you're right.

512
00:35:28,870 --> 00:35:33,140
It would totally try to
include the app.min.js,

513
00:35:33,140 --> 00:35:34,850
which is why later we would be putting

514
00:35:36,630 --> 00:35:41,226
that file somewhere else inside our
distribution directory for example.

515
00:35:41,226 --> 00:35:46,000
>> These questions keep coming John.

516
00:35:46,000 --> 00:35:47,060
>> That's fine.

517
00:35:47,060 --> 00:35:49,094
I'm totally fine with
just answering questions.

518
00:35:49,094 --> 00:35:50,860
>> [LAUGH]
>> That's why I'm here.

519
00:35:50,860 --> 00:35:54,172
>> James asks any chance there
is an unmodified plugin for

520
00:35:54,172 --> 00:35:58,204
working on someone else's production
code [INAUDIBLE] factors and

521
00:35:58,204 --> 00:36:01,530
things where you don't
necessarily have the source.

522
00:36:02,790 --> 00:36:09,870
>> So actually you can do that
right in Google Developer Tools.

523
00:36:09,870 --> 00:36:14,300
And actually there are unminified
plugins as well, but

524
00:36:14,300 --> 00:36:20,920
if you look in the developer tools,
if you go to say the sources.

525
00:36:20,920 --> 00:36:24,110
Let me see if I can find something,
some massive stuff here.

526
00:36:24,110 --> 00:36:30,870
And you actually click on this little
pair of brackets at the bottom here.

527
00:36:33,310 --> 00:36:36,240
It pretty prints it.

528
00:36:36,240 --> 00:36:40,230
The only thing it won't do
that's still a problem is that

529
00:36:40,230 --> 00:36:45,060
during the minification process
it replaces variable names with

530
00:36:46,730 --> 00:36:49,840
single letters to save bytes.

531
00:36:49,840 --> 00:36:54,770
So, as you can see here we have like a,
and you can see it all over the place,

532
00:36:54,770 --> 00:36:57,390
a, a or oa.

533
00:36:58,960 --> 00:37:07,350
There's no real way to sort of unminify
these to their original variable names,

534
00:37:07,350 --> 00:37:12,140
If you don't have the source
maps that you used.

535
00:37:12,140 --> 00:37:16,860
So you would either need to have
a copy of their source maps,

536
00:37:19,530 --> 00:37:25,420
or just have to deal with all the kind
single letter variable names and

537
00:37:25,420 --> 00:37:28,790
kind of figure out
what they're used for.

538
00:37:28,790 --> 00:37:35,368
There isn't a great way to unminify
source code to the original work,

539
00:37:35,368 --> 00:37:39,504
unless you have the source
maps like I said.

540
00:37:39,504 --> 00:37:43,116
>> All right, thanks John.

541
00:37:43,116 --> 00:37:46,025
The next one is from Jeff.

542
00:37:46,025 --> 00:37:50,062
Will this be recorded and
available for viewing later, if so

543
00:37:50,062 --> 00:37:52,694
where can I find it [INAUDIBLE] podcast?

544
00:37:52,694 --> 00:37:55,943
Jeff, if you go in your community.

545
00:37:55,943 --> 00:38:02,295
And in the events, just type grunt or
gulp, the recordings will show up, and

546
00:38:02,295 --> 00:38:08,846
as you can see on John's screen, he's
going through the broadcast category,

547
00:38:08,846 --> 00:38:13,679
where we also posted the transcript
along with the video.

548
00:38:13,679 --> 00:38:17,700
So, I think that should help you.

549
00:38:17,700 --> 00:38:20,538
Let us know if you have any troubles and

550
00:38:20,538 --> 00:38:23,826
we'll make sure we link
you with the video.

551
00:38:23,826 --> 00:38:24,731
Thank you.

552
00:38:24,731 --> 00:38:26,742
>> Yeah.

553
00:38:26,742 --> 00:38:32,675
>> More questions, Arvin asks, is there
a way to run these in the background,

554
00:38:32,675 --> 00:38:36,197
so you don't need to
run the tasks manually,

555
00:38:36,197 --> 00:38:39,829
especially while using copy plugin and
such?

556
00:38:39,829 --> 00:38:43,932
>> Yeah, and actually that was one
of the things I was going to hit on,

557
00:38:43,932 --> 00:38:45,337
which is watch tasks.

558
00:38:45,337 --> 00:38:51,246
So, this is now I guess
a good time to do this so.

559
00:38:51,246 --> 00:38:56,590
So, gulp just like grunt lets
you watch files for changes.

560
00:38:56,590 --> 00:39:02,100
So suppose I want to work

561
00:39:02,100 --> 00:39:08,030
on my JavaScript or
my CSS or something and

562
00:39:08,030 --> 00:39:13,240
not have to worry about okay, I made a
bunch of changes, let's compile my code.

563
00:39:13,240 --> 00:39:15,670
I just want it to compile
every time I make a change.

564
00:39:17,020 --> 00:39:22,801
So, what I can do is I can create
what are called watch tasks

565
00:39:27,776 --> 00:39:30,210
And so
the way we structure a watch task, so

566
00:39:30,210 --> 00:39:34,079
it used to be really kind of a pain
in the butt until gulp got updated.

567
00:39:34,079 --> 00:39:38,370
And then they've just sort of included
their own watch functionality.

568
00:39:38,370 --> 00:39:41,380
So now you can just say gulp.watch.

569
00:39:41,380 --> 00:39:45,942
And again, you specify what
directories you want to watch.

570
00:39:45,942 --> 00:39:50,249
And you specify a callback function, so

571
00:39:50,249 --> 00:39:53,674
it works very similar to a task.

572
00:39:53,674 --> 00:39:57,484
So, there's just the files
you want to watch And then.

573
00:39:57,484 --> 00:40:04,320
What tasks are scripts you want to
execute when that file gets to.

574
00:40:04,320 --> 00:40:06,560
Changes get detected in that file.

575
00:40:06,560 --> 00:40:11,500
So in this case we want to
run scripts for my c.s.s.

576
00:40:11,500 --> 00:40:14,500
If you know anything in my CSS changes.

577
00:40:15,570 --> 00:40:22,900
Then I probably want to run my styles
task So let's see what this looks like.

578
00:40:22,900 --> 00:40:24,680
I'm going to this add
this to my default.

579
00:40:29,730 --> 00:40:30,670
And so here we go.

580
00:40:30,670 --> 00:40:32,250
So we see that it runs my scripts.

581
00:40:32,250 --> 00:40:35,250
It runs my styles, and
then it runs this watch task.

582
00:40:35,250 --> 00:40:37,800
And we can see that it's just waiting.

583
00:40:37,800 --> 00:40:43,540
Whereas before when we ran our goal task
it just finished, and then it was done.

584
00:40:43,540 --> 00:40:47,470
Now it's actually sort of idling here
waiting for something to happen.

585
00:40:47,470 --> 00:40:48,290
So let's take a look and

586
00:40:48,290 --> 00:40:53,140
see what happens when we
change something in our CSS.

587
00:40:53,140 --> 00:40:58,400
So let's make this red and save.

588
00:40:58,400 --> 00:41:04,280
We can see over here in my terminal,
that my styles task ran again.

589
00:41:04,280 --> 00:41:08,020
So in case you missed that, I'm going to
make a change one more time, and

590
00:41:08,020 --> 00:41:12,125
watch here and you'll see
something changed let's make our

591
00:41:12,125 --> 00:41:16,910
padding maybe 20 px, save.

592
00:41:16,910 --> 00:41:19,880
And we can see that again
our styles task ran.

593
00:41:21,090 --> 00:41:25,660
So that's basically how you sort of
automate a lot of these processes.

594
00:41:26,810 --> 00:41:28,920
Is by setting up a watch task.

595
00:41:28,920 --> 00:41:34,090
And this becomes extremely
useful when you're developing.

596
00:41:34,090 --> 00:41:36,820
So you don't have to keep jumping
over to your terminal and

597
00:41:36,820 --> 00:41:39,240
saying like blah blah blah blah blah.

598
00:41:39,240 --> 00:41:45,180
You can just go in, work on your CSS,
know that the code is compiling.

599
00:41:45,180 --> 00:41:53,470
You're able to, open up your project and
examine it and watch for changes.

600
00:41:53,470 --> 00:41:55,580
It's really helpful
being able to do that.

601
00:41:57,770 --> 00:42:01,450
And then usually if like a lot of people
usually have a question like okay,

602
00:42:01,450 --> 00:42:03,130
how do I stop watching?

603
00:42:03,130 --> 00:42:08,440
In the terminal if you use control C,
that's just sort of like the kill task.

604
00:42:08,440 --> 00:42:12,868
And that'll take you back to just
sort of the normal terminal.

605
00:42:12,868 --> 00:42:17,724
One thing that may happen, and
I don't know if they actually updated

606
00:42:17,724 --> 00:42:22,008
this since then, was sometimes
if you include a syntax error

607
00:42:25,488 --> 00:42:27,828
It'll stop watching.

608
00:42:27,828 --> 00:42:33,404
So there's a few different methods you
can use to Just throw the error but

609
00:42:33,404 --> 00:42:35,940
not to stop watching.

610
00:42:35,940 --> 00:42:40,240
The one I suggest is you use a plumber,

611
00:42:40,240 --> 00:42:42,760
I believe is what it's called,
gulp plumber.

612
00:42:42,760 --> 00:42:47,260
And this basically prevents the pipe
from breaking when errors occur.

613
00:42:48,360 --> 00:42:51,690
This way when say maybe
you do type an error here

614
00:42:53,500 --> 00:42:57,740
It will spit the error out to you,
but it won't kill the stream.

615
00:42:57,740 --> 00:43:02,010
So in this case, because I'm not using
Plumber, when it threw this error it

616
00:43:02,010 --> 00:43:08,770
just blasted out this glob of problems,
and then it stopped the watch task.

617
00:43:08,770 --> 00:43:12,642
And now I'd have to go in here,
fix this.

618
00:43:12,642 --> 00:43:15,540
And then, run Gulp again

619
00:43:16,940 --> 00:43:21,840
using Plumber is definitely the right
thing to be doing to make sure that

620
00:43:21,840 --> 00:43:25,540
you're still receiving the errors, but
it's not wrecking your build process.

621
00:43:29,960 --> 00:43:32,050
>> Last two questions, John.

622
00:43:32,050 --> 00:43:34,290
So James asked,

623
00:43:34,290 --> 00:43:38,770
you mentioned earlier that Gulp
works best on Macs and Linuxes.

624
00:43:38,770 --> 00:43:47,190
Is there a particular version of Linux
that you would say it best works with?

625
00:43:47,190 --> 00:43:50,600
>> I maybe accidentally said that but
it also works good on Windows.

626
00:43:52,960 --> 00:43:57,340
Just with windows you have
to use the node shell,

627
00:43:57,340 --> 00:44:01,580
as opposed to just being able
to use the command prompt.

628
00:44:01,580 --> 00:44:06,080
I mean you can use the command prompt or
power shell but you're going to have to

629
00:44:06,080 --> 00:44:10,900
do some minor modification and
tweaking and stuff like that.

630
00:44:10,900 --> 00:44:14,930
Essentially, setting up node in
your path environment variable.

631
00:44:17,580 --> 00:44:23,610
As far as versions of Linux which
it works best with, I don't

632
00:44:23,610 --> 00:44:30,040
think there's a version of Linux
that it necessarily works best in.

633
00:44:30,040 --> 00:44:35,770
So Gulp, right,
is just a module for Node, so

634
00:44:35,770 --> 00:44:43,350
any Linux a platform that Node works
fine in, gulp is going to work fine in.

635
00:44:43,350 --> 00:44:43,900
And i think,

636
00:44:45,480 --> 00:44:49,590
Node works in just about any Linux
environment I've ever encountered.

637
00:44:51,520 --> 00:44:53,560
So, you shouldn't have
any problem there.

638
00:44:53,560 --> 00:44:59,530
If you do though, let me know,
I'd love to hear if there is

639
00:44:59,530 --> 00:45:04,260
a Linux platform you're using where your
node, your goal, isn't working properly.

640
00:45:08,110 --> 00:45:13,100
>> I'm not sure if I'm saying your name
right, she asked, how do you handle GIF,

641
00:45:13,100 --> 00:45:17,510
for your source code, GILF code or
even your GH pages for one project?

642
00:45:17,510 --> 00:45:19,125
Do you consider the same old repo?

643
00:45:19,125 --> 00:45:22,860
[INAUDIBLE].

644
00:45:22,860 --> 00:45:25,730
>> So yeah,
I keep them all in the same repo.

645
00:45:27,780 --> 00:45:30,430
There's a few common
patterns out there and

646
00:45:30,430 --> 00:45:34,790
this is actually something I know a lot
of students have been interested, in and

647
00:45:34,790 --> 00:45:36,470
I kind of want to do a write-up about.

648
00:45:37,800 --> 00:45:44,030
But usually what I have is
I have my master branch.

649
00:45:44,030 --> 00:45:49,616
And then I usually set
up two more branches.

650
00:45:49,616 --> 00:45:53,007
The development branch,

651
00:45:53,007 --> 00:45:58,378
right not a valid object name master.

652
00:45:58,378 --> 00:46:03,722
I don't think it will let me do
that until I add this stuff.

653
00:46:16,262 --> 00:46:20,140
And then,
I also make my gh-pages branch.

654
00:46:21,480 --> 00:46:28,358
As far as my source and distribution
code, it all lives on the master branch.

655
00:46:28,358 --> 00:46:33,360
For my gh-pages,

656
00:46:33,360 --> 00:46:36,300
I usually only keep my build.

657
00:46:38,110 --> 00:46:41,650
Code on there all my chief pages
one because that's the code

658
00:46:41,650 --> 00:46:45,000
that is going to be
running on my pages site.

659
00:46:45,000 --> 00:46:48,660
So usually you can specify which

660
00:46:48,660 --> 00:46:53,290
files get merged into that branch and
you can take them out as well.

661
00:46:53,290 --> 00:46:57,080
And then, for my development branch
that's pretty much a mirror of my master

662
00:46:57,080 --> 00:47:00,050
branch and
that's where I do all my development.

663
00:47:00,050 --> 00:47:05,880
And then when I'm ready to push changes,
I'll push changes

664
00:47:05,880 --> 00:47:11,430
from my development branch
to my master branch.

665
00:47:11,430 --> 00:47:13,000
And then from my master branch,

666
00:47:13,000 --> 00:47:18,710
I'll merge any changes into
my get hub pages branch.

667
00:47:18,710 --> 00:47:22,750
And specify that I only want to
merge over my production ready code.

668
00:47:25,180 --> 00:47:28,440
That's getting a little
out of scope of gulp.

669
00:47:28,440 --> 00:47:29,720
>> Yeah.
>> But

670
00:47:29,720 --> 00:47:31,270
that's sort of the process i would take.

671
00:47:31,270 --> 00:47:37,110
You can also, like I said, use gulp
with Git to set up the process for

672
00:47:37,110 --> 00:47:40,740
doing that so all you have to do
instead of having to do you know.

673
00:47:40,740 --> 00:47:44,390
Git add you can just say gulp build.

674
00:47:44,390 --> 00:47:49,491
And maybe that will run through all
these tasks and add the proper files and

675
00:47:49,491 --> 00:47:54,276
commit the changes and push them to
the right repository and branch.

676
00:47:54,276 --> 00:47:56,524
But that's kind of how i set it up.

677
00:47:56,524 --> 00:47:59,731
So I do pretty much all my
work on a development branch.

678
00:47:59,731 --> 00:48:02,949
Push any changes from the development
branch to the master.

679
00:48:02,949 --> 00:48:07,328
And then merge any needed changes
from the master to the pages branch.

680
00:48:07,328 --> 00:48:16,040
>> All right [INAUDIBLE]
>> So,

681
00:48:16,040 --> 00:48:21,140
Alf App, which is more common in your
transcript, could you please list all

682
00:48:21,140 --> 00:48:26,920
the helpful and most reliable plugins,
especially for image optimization.

683
00:48:26,920 --> 00:48:30,240
>> Yeah.
I think I include quite a few of them.

684
00:48:30,240 --> 00:48:34,270
I also share a Gulp file that I use.

685
00:48:36,440 --> 00:48:38,850
Yeah I'll make sure to
include those links as well.

686
00:48:41,950 --> 00:48:43,500
So yeah,
I'll make sure to include those.

687
00:48:44,860 --> 00:48:46,060
>> Thanks John and thanks Al.

688
00:48:48,820 --> 00:48:51,250
You're going to love answering this one,
John.

689
00:48:51,250 --> 00:48:54,410
How do you consider
Gulp better than Grunt?

690
00:48:54,410 --> 00:48:56,010
Assuming they serve the same purpose.

691
00:48:58,590 --> 00:49:01,910
So this is a very opinionated answer.

692
00:49:01,910 --> 00:49:08,560
But yes,
I really like the speed of golf.

693
00:49:08,560 --> 00:49:15,755
I like The way it utilizes node
more than the way Grunt does.

694
00:49:15,755 --> 00:49:19,535
I like the fact that I feel like I'm
writing in JavaScript as opposed to

695
00:49:19,535 --> 00:49:23,450
writing up a configuration file.

696
00:49:23,450 --> 00:49:28,560
However I will say grunt is very
straightforward and very easy.

697
00:49:28,560 --> 00:49:31,160
It's easy to get someone
started on grunt.

698
00:49:31,160 --> 00:49:33,230
Whereas with gulp,

699
00:49:33,230 --> 00:49:38,150
usually to get it to be a little bit
more masterful of it, you have to

700
00:49:38,150 --> 00:49:42,060
have a little bit of understanding
about things like JavaScript promises.

701
00:49:42,060 --> 00:49:44,260
The input output stream.

702
00:49:44,260 --> 00:49:49,200
And those are a little bit more
difficult to learn than just,

703
00:49:49,200 --> 00:49:49,798
here's grunt.

704
00:49:49,798 --> 00:49:51,990
Sure the plug-ins for grunt.

705
00:49:51,990 --> 00:49:54,410
Here's the configuration
file you write go.

706
00:49:55,970 --> 00:49:58,760
To really like dive into the gulp and

707
00:49:58,760 --> 00:50:04,165
get the full power out of it you
do need to know some JavaScript.

708
00:50:04,165 --> 00:50:09,090
[INAUDIBLE]
>> But

709
00:50:09,090 --> 00:50:11,198
in terms of being better than Grunt,
I think it is.

710
00:50:11,198 --> 00:50:12,892
>> All right.

711
00:50:15,230 --> 00:50:17,650
Asks, when watching.

712
00:50:17,650 --> 00:50:21,650
Is there a way to have the browser
free load when a file is changed?

713
00:50:22,700 --> 00:50:27,140
>> Yeah, yeah and that's something that
I'll include in my write up as well

714
00:50:27,140 --> 00:50:31,040
because i don't think we have
enough time to dive into it today.

715
00:50:31,040 --> 00:50:36,401
But you can use I believe
it's called browser sync.

716
00:50:41,579 --> 00:50:42,535
Okay.

717
00:50:42,535 --> 00:50:45,875
Both browser.

718
00:50:50,383 --> 00:50:54,608
There's a great write up on the browser
syncs website on how to use go

719
00:50:54,608 --> 00:50:57,100
Gulp JS with browser synch.

720
00:50:57,100 --> 00:50:58,280
And you can do that.

721
00:50:58,280 --> 00:51:04,550
There's also i think gulp-livereload.

722
00:51:04,550 --> 00:51:07,440
Yeah.
Go plug in for live reload so

723
00:51:07,440 --> 00:51:08,040
you can use it.

724
00:51:08,040 --> 00:51:10,360
There's a a lot of different options.

725
00:51:10,360 --> 00:51:16,590
And then basically all you do is you set
one of the tasks in your watch function.

726
00:51:17,780 --> 00:51:22,470
Say for example,
I set up a browser-sync task.

727
00:51:22,470 --> 00:51:27,520
Then here when there's a change,
it all run my scripts code and compile.

728
00:51:27,520 --> 00:51:34,960
And then it all also run my
livereload or something like that.

729
00:51:37,400 --> 00:51:39,370
So that's kind of what
you would do there.

730
00:51:39,370 --> 00:51:45,175
And then that way,
you can just have your index.html open.

731
00:51:47,929 --> 00:51:51,100
Obviously this isn't going to work,
but you'd be able to watch for

732
00:51:51,100 --> 00:51:53,880
changes here instead of having
to continually refresh.

733
00:51:56,850 --> 00:51:59,740
Thanks, Sean, and thanks,
Lettie for the questions.

734
00:51:59,740 --> 00:52:01,124
Now Michael asks,

735
00:52:01,124 --> 00:52:05,805
how would you integrate testing
with a framework like Jasmine?

736
00:52:07,952 --> 00:52:09,070
There you go.

737
00:52:09,070 --> 00:52:10,590
You've got it.

738
00:52:10,590 --> 00:52:15,490
>> Yeah so, just like Grunt, Gulp
>> If there's something you want to be

739
00:52:15,490 --> 00:52:20,990
able to do, say testing,
git, minification,

740
00:52:20,990 --> 00:52:25,960
just setting up production servers,
anything,

741
00:52:25,960 --> 00:52:30,550
Gulp has plug ins that do that,
more often than not.

742
00:52:32,560 --> 00:52:35,110
So in this case, your specific question,

743
00:52:35,110 --> 00:52:38,870
you were interested in integrating
tests with a framework like Jasmine.

744
00:52:38,870 --> 00:52:41,440
I simply just looked for gulp-jasmine.

745
00:52:41,440 --> 00:52:46,360
And sure enough there is a Gulp plugin
that will run Jasmine tests for you.

746
00:52:46,360 --> 00:52:50,820
You can set up a task, you can specify.

747
00:52:50,820 --> 00:52:55,220
You know what tests you want to run and
you can pipe in the jasmine method.

748
00:52:55,220 --> 00:53:00,340
This one's pretty well documented
it's created by who's a pretty

749
00:53:01,410 --> 00:53:04,820
pretty popular famous
JavaScript developer.

750
00:53:04,820 --> 00:53:09,920
If you're not familiar with him, he's
created quite a bit as you can see here.

751
00:53:13,540 --> 00:53:20,190
But more often than not, there's going
to be a plugin for the task at hand.

752
00:53:20,190 --> 00:53:24,320
So I would say just read
into it a little bit.

753
00:53:24,320 --> 00:53:29,230
This one's very well documented so
it should be pretty easy to figure out.

754
00:53:29,230 --> 00:53:35,960
But Almost anything that you normally
have to manually do while developing

755
00:53:35,960 --> 00:53:41,260
code, a tool like Grunt or Gulp is
going to allow you to automate that.

756
00:53:41,260 --> 00:53:46,030
And it's really,
really great to sort of have these tools

757
00:53:46,030 --> 00:53:49,320
just because it sucks having to do
this stuff manually all the time.

758
00:53:49,320 --> 00:53:54,530
It takes you out of the build
process to have to stop,

759
00:53:54,530 --> 00:54:00,540
open up your terminal, run your tests or
stop, open up your terminal,

760
00:54:00,540 --> 00:54:04,890
run some minification program or,
you know.

761
00:54:04,890 --> 00:54:08,250
Open up your index.html and
have to refresh.

762
00:54:08,250 --> 00:54:10,360
Open up your app and have to refresh.

763
00:54:10,360 --> 00:54:13,370
Just having Gulp handle
all that stuff for

764
00:54:13,370 --> 00:54:16,880
you is just going to make your life
as a developer so much better.

765
00:54:17,900 --> 00:54:22,280
There's also a lot of sort of pre or
written Gulp files out there.

766
00:54:23,510 --> 00:54:29,900
If you check out a scaffolding
tool such as like or

767
00:54:29,900 --> 00:54:33,910
if you clone someone
else's repository for

768
00:54:33,910 --> 00:54:40,000
a project typically they already
have sort of a build process setup.

769
00:54:40,000 --> 00:54:45,500
And you can just go about using their
build process to work on their project.

770
00:54:45,500 --> 00:54:46,450
Or, like i said,

771
00:54:46,450 --> 00:54:51,680
you can use Yeoman to use a generator
that sort of sets all this up for you.

772
00:54:51,680 --> 00:54:55,730
But I'd say for the first couple
times your using this tool and

773
00:54:55,730 --> 00:55:00,080
kind of understanding how it works,
and understanding what some of these

774
00:55:00,080 --> 00:55:05,390
processes and workflows are It's best
to just kind of start doing it yourself

775
00:55:05,390 --> 00:55:09,980
writing your build tool by
hand a couple times two or

776
00:55:09,980 --> 00:55:13,120
three projects because you'll learn so
much and

777
00:55:13,120 --> 00:55:16,880
it'll be that much easier to dive
into somebody else's project and

778
00:55:16,880 --> 00:55:22,460
look at what they're doing and
say okay I see that he is minifying

779
00:55:22,460 --> 00:55:27,130
the code in this file and running it
through this optimization process.

780
00:55:28,570 --> 00:55:29,950
Ok.

781
00:55:29,950 --> 00:55:33,130
So it's definitely a good idea to
sort of try these things out for

782
00:55:33,130 --> 00:55:37,375
yourself and trying out gulp-jasmine
is a great place to start.

783
00:55:37,375 --> 00:55:41,580
>> [INAUDIBLE]
>> Thanks Michael,

784
00:55:41,580 --> 00:55:42,900
and thank you so much John.

785
00:55:43,970 --> 00:55:45,370
We're almost out of time.

786
00:55:45,370 --> 00:55:48,550
So any parting thoughts John?

787
00:55:49,680 --> 00:55:55,050
>> Just that it can be a little
intimidating to get started on

788
00:55:55,050 --> 00:56:00,100
a build tool like Gulp or Grunt,
and I totally understand that.

789
00:56:00,100 --> 00:56:03,550
They're certainly A little
different than some

790
00:56:03,550 --> 00:56:05,720
of the work that you're
probably going to be doing.

791
00:56:05,720 --> 00:56:09,711
They're kind of doing a lot of
the boring stuff that we'd rather not be

792
00:56:09,711 --> 00:56:11,615
doing but are kind of important.

793
00:56:15,214 --> 00:56:19,909
But In the grand scheme of things,
it's just going to make your life so

794
00:56:19,909 --> 00:56:22,970
much easier using one of these tools.

795
00:56:22,970 --> 00:56:25,260
And it's good to get started now,

796
00:56:25,260 --> 00:56:28,170
when you're already sort of
absorbing all this material and

797
00:56:28,170 --> 00:56:33,160
you can kind of begin including small
steps of this into your workflow.

798
00:56:33,160 --> 00:56:39,060
By no means should you try to
write your whole workflow now.

799
00:56:39,060 --> 00:56:44,030
I would say, maybe for the next
project you work on, maybe just try

800
00:56:44,030 --> 00:56:48,160
getting gulp set up with it and have
it identify your files, and that's it.

801
00:56:48,160 --> 00:56:51,420
From there,
just worry about building the project.

802
00:56:51,420 --> 00:56:55,810
And then as you think about more things
you want to be able to do with Gulp.

803
00:56:55,810 --> 00:57:01,490
Try integrating those processes and
pieces one step at a time.

804
00:57:01,490 --> 00:57:04,000
So like I said, you know?

805
00:57:04,000 --> 00:57:07,270
For example, maybe one project,
just minify code.

806
00:57:07,270 --> 00:57:11,180
Maybe the next project,
you include live reloading.

807
00:57:11,180 --> 00:57:15,040
Maybe the next project,
you include some image optimization.

808
00:57:15,040 --> 00:57:19,120
There's by no means no hurry
to really learn these.

809
00:57:19,120 --> 00:57:23,050
But I'd say every
developer I know uses them.

810
00:57:23,050 --> 00:57:26,630
So it's important to know them
eventually as a front end developer.

811
00:57:26,630 --> 00:57:30,558
>> It's great to get started
right now with baby steps though.

812
00:57:30,558 --> 00:57:31,448
>> Mm-hm.

813
00:57:31,448 --> 00:57:33,890
Definitely.

814
00:57:33,890 --> 00:57:35,790
Well, that's all we had.

815
00:57:35,790 --> 00:57:39,210
Hope this was helpful.

816
00:57:39,210 --> 00:57:44,010
John will be putting up the transcript
on the black cats category,

817
00:57:44,010 --> 00:57:47,510
and we'll see you next
week in a webcast.

818
00:57:47,510 --> 00:57:48,450
>> Yeah.

819
00:57:48,450 --> 00:57:50,880
>> We'll let you know
when we'll be about.

820
00:57:50,880 --> 00:57:53,260
John and I have some docking to do.

821
00:57:53,260 --> 00:57:53,980
Yes.

822
00:57:53,980 --> 00:57:55,850
Yes, we need to figure
out what to do next week.

823
00:57:57,640 --> 00:58:04,670
The write-up 2 will be up in
probably about 20, 15 20 minutes.

824
00:58:04,670 --> 00:58:08,060
So you can feel free to go to again,

825
00:58:08,060 --> 00:58:14,930
the broadcast channel of the discussion
boards for the frontier nanodegree.

826
00:58:14,930 --> 00:58:17,210
And, you should be
able to find it there.

827
00:58:17,210 --> 00:58:21,820
I just have a few more things
that I gotta throw in there.

828
00:58:21,820 --> 00:58:25,320
And, yeah that's pretty much it.

829
00:58:25,320 --> 00:58:26,090
>> Well, all right.

830
00:58:26,090 --> 00:58:26,920
Thank you, bye.

831
00:58:26,920 --> 00:58:29,231
>> Yeah, thanks for coming everybody.
