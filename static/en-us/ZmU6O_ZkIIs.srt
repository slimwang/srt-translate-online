1
00:00:00,180 --> 00:00:05,870
For the two direct effects, which we, we use the term

2
00:00:05,870 --> 00:00:10,940
event handlers for, it makes sense to have methods responsible for doing that.

3
00:00:10,940 --> 00:00:12,820
And, with methods, we have pre and post conditions.

4
00:00:12,820 --> 00:00:16,510
And, it's pretty straight forward, which components are receiving the events, or

5
00:00:16,510 --> 00:00:19,540
the ones that responsible for, for dealing with them.

6
00:00:19,540 --> 00:00:26,700
For the three association, constraints that we've now assigned to components.

7
00:00:26,700 --> 00:00:28,830
Those were invariants.

8
00:00:28,830 --> 00:00:34,390
And remember that, OCL has pre-conditions, post-conditions, and invariants, and,

9
00:00:34,390 --> 00:00:39,460
as the system, as the user interacts with the system and makes a change,

10
00:00:39,460 --> 00:00:44,400
let's say, to the scroll bar handle, it's a responsibility of the system.

11
00:00:44,400 --> 00:00:48,770
To make sure that all the inter, indirect affect take place.

12
00:00:48,770 --> 00:00:52,515
That process is called invariant maintenance.

13
00:00:52,515 --> 00:00:55,230
An invariant is something which is always true.

14
00:00:55,230 --> 00:00:57,030
We've temporarily made it untrue.

15
00:00:57,030 --> 00:01:01,490
So we have to reset the system to a consistent state, we move the handle,

16
00:01:01,490 --> 00:01:04,129
we have to change what the contents on the screen.

17
00:01:04,129 --> 00:01:07,970
So that's and example of the, maintaining that particular invariant.

18
00:01:07,970 --> 00:01:09,220
Taking that a step further,

19
00:01:09,220 --> 00:01:12,500
when the user scrolls, remember we had three invariants.

20
00:01:12,500 --> 00:01:14,140
Which of those invariants do you think might break?
