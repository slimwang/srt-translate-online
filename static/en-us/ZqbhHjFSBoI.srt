1
00:00:00,170 --> 00:00:03,890
Now it often happens that when doing something like an exam on

2
00:00:03,890 --> 00:00:06,830
Tomasulo's Algorithm. We just care, for

3
00:00:06,830 --> 00:00:09,400
example, like in what cycle something issues or

4
00:00:09,400 --> 00:00:14,240
in what cycle something finishes, and so on, or how many cycles it took overall.

5
00:00:14,240 --> 00:00:17,250
So let's go to an example that is just trying to track the timing and

6
00:00:17,250 --> 00:00:19,930
not trying to keep track of everything in every structure, and

7
00:00:19,930 --> 00:00:24,080
so on, just to kind of show you how to do this on exams. So we will have

8
00:00:24,080 --> 00:00:29,180
the same processor, the same instructions, the same issue, execute write.

9
00:00:29,180 --> 00:00:33,900
But we're going to try to do that without having all of those tables in. So

10
00:00:33,900 --> 00:00:37,810
let's try to go through this example. Whats going to happen is we kind of need

11
00:00:37,810 --> 00:00:41,710
to know how many reservation stations we have for each type of instructions. And

12
00:00:41,710 --> 00:00:44,740
that's the only thing that we're kind of going to be missing a little bit.

13
00:00:44,740 --> 00:00:47,580
So, basically, in the first cycle we know we can issue this and

14
00:00:47,580 --> 00:00:52,270
nothing else will happen. In the next cycle, we know we can execute this and

15
00:00:52,270 --> 00:00:55,480
then because it takes three cycles. We know that we're going to try to write it

16
00:00:55,480 --> 00:01:01,680
in cycle 4. So kind of mark this tentatively now for cycle 4. In the next cycle,

17
00:01:01,680 --> 00:01:05,480
we will be issuing this load here. If we consider the same condition that

18
00:01:05,480 --> 00:01:09,920
the load cannot overlap with another load, then we know that in 2 and 3,

19
00:01:09,920 --> 00:01:13,670
this is going to execute, so that this can begin execution in 4, and

20
00:01:13,670 --> 00:01:18,089
then execute in 5, and try to broadcast in 6. In cycle 3,

21
00:01:18,089 --> 00:01:23,190
we're going to be issuing this. It uses a different unit. So, again,

22
00:01:23,190 --> 00:01:28,010
you have to check basically. In cycle 3, is there an available multiply unit but

23
00:01:28,010 --> 00:01:31,250
kind of looking at what is currently using the reservation stations? And then,

24
00:01:31,250 --> 00:01:35,265
you have to check for dependencies. So, for example, this is waiting for F2 and

25
00:01:35,265 --> 00:01:39,410
F4. F2 is produced by the second load, so actually this will not be able to

26
00:01:39,410 --> 00:01:44,760
execute until cycle 7. 6 here means that basically we will have 7.

27
00:01:44,760 --> 00:01:50,110
And we can kind of mark here that our F2 comes from instruction 2,

28
00:01:50,110 --> 00:01:53,780
which is why he had to execute only in the cycle that follows its write.

29
00:01:53,780 --> 00:01:57,440
Because this is a multiplication, add 10 cycles to that. We're going to try to

30
00:01:57,440 --> 00:02:01,240
write the result in cycle 17. The subtract is going to issue in

31
00:02:01,240 --> 00:02:04,870
the very next cycle if there are available reservation stations because, so

32
00:02:04,870 --> 00:02:09,430
far, we have used no add reservation stations that's going to be able to issue.

33
00:02:09,430 --> 00:02:12,310
The subtract is going to wait for 2 and 6, so

34
00:02:12,310 --> 00:02:17,190
the later of the two loads is really when we can start. So we can

35
00:02:17,190 --> 00:02:21,670
start in cycle 7. And we will mark here again that, you know, we are waiting.

36
00:02:21,670 --> 00:02:26,170
Kind of just give an indication like what was the delay somewhere. And then,

37
00:02:26,170 --> 00:02:30,020
it's a subtract, so it's going to finish in cycle 8, 7, 8. So it's going to

38
00:02:30,020 --> 00:02:35,360
try to write the result in 9. Next, we're going to consider this divide.

39
00:02:35,360 --> 00:02:41,130
Can it issue in in cycle 5? Well, yes it can because, so far, only

40
00:02:41,130 --> 00:02:44,830
one unit is used, then we have two such, only one reservation station is using.

41
00:02:44,830 --> 00:02:48,720
We have two of them. So the question is when can it execute? Well, look for

42
00:02:48,720 --> 00:02:54,194
F0 and F6. F0 comes from the multiply, it's 17. F6 comes at 4,

43
00:02:54,194 --> 00:02:59,228
so we will be able to execute in cycle 18 here because we were waiting for

44
00:02:59,228 --> 00:03:04,330
F0 like this. And it's a divide, so it's going to try to broadcast at cycle 58.

45
00:03:04,330 --> 00:03:09,515
Next, we're going to consider, what's the next issue cycle. Well,

46
00:03:09,515 --> 00:03:14,840
6. This add is going to issue in 6 because, again, we have units.

47
00:03:14,840 --> 00:03:19,915
It's going to look for F8 and F2, whichever is the latest. 2 is at 6,

48
00:03:19,915 --> 00:03:24,194
F8 is at 9, so it's going to start executing in cycle 10,

49
00:03:24,194 --> 00:03:28,637
execute in cycle 11, try to broadcast in cycle 12. And

50
00:03:28,637 --> 00:03:34,570
we're going to mark that F8 comes from instruction 4.

51
00:03:34,570 --> 00:03:38,760
And now, because we've been kind of doing this out of order, we have to check

52
00:03:38,760 --> 00:03:42,900
just are there any two instructions that are actually writing in the same cycle.

53
00:03:42,900 --> 00:03:46,330
If yes then we'll have to redo this. Basically, we have to postpone some of

54
00:03:46,330 --> 00:03:49,680
the writes in order for that to happen. But because these are all different

55
00:03:49,680 --> 00:03:54,360
cycles, everything is fine And this concludes our timing example. So, basically,

56
00:03:54,360 --> 00:03:58,010
now we know in which cycle each instruction executes issues and writes. And

57
00:03:58,010 --> 00:04:02,850
when does this all end without really having to go through all of those things?

58
00:04:02,850 --> 00:04:06,030
So if we're only worried about timing, then we can do something like this.
