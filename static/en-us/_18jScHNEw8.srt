1
00:00:00,670 --> 00:00:04,148
Hello, and welcome to this new lesson. In this lesson, you will learn more

2
00:00:04,148 --> 00:00:09,980
about how to become a pro at writing classes. We will start out with how you

3
00:00:09,980 --> 00:00:14,720
can discover which classes you should be implementing. Have a look at this

4
00:00:14,720 --> 00:00:19,632
description of a task that should be programmed. In a social network, people

5
00:00:19,632 --> 00:00:23,196
can send messaged to their friends and they can see pictures that their friends

6
00:00:23,196 --> 00:00:29,126
like. How do we know what classes might make sense of this situation? There is

7
00:00:29,126 --> 00:00:34,209
a very simple rule. Look for nouns in the problem description. Many of them can

8
00:00:34,209 --> 00:00:39,654
be good candidates for classes. So we might want to make a class person or

9
00:00:39,654 --> 00:00:44,490
message. What about friend? Well, a friend is just a kind of person so we might

10
00:00:44,490 --> 00:00:48,665
not be using that one. So, it's not that every noun turns into a class, but the

11
00:00:48,665 --> 00:00:54,810
nouns give a good idea where to start. What about methods? Well, methods are

12
00:00:54,810 --> 00:00:59,865
verbs. For example, here, sending would correspond to a method. And in

13
00:00:59,865 --> 00:01:05,645
object-oriented programming, there's this core belief that a method belongs to

14
00:01:05,645 --> 00:01:11,818
a class. There is a single class that is responsible for sending, and so we

15
00:01:11,818 --> 00:01:17,448
would want to make a choice. Is it the person class that has a send method, or

16
00:01:17,448 --> 00:01:22,718
is it the message class that has a send method? Or maybe there's another class

17
00:01:22,718 --> 00:01:26,756
that we haven't yet discovered, maybe a mailbox class. We're not going to get

18
00:01:26,756 --> 00:01:31,374
into the details about this application. Here I just wanted to point out the

19
00:01:31,374 --> 00:01:36,445
noun-verb rules. Nouns are good candidates for classes, verbs are good

20
00:01:36,445 --> 00:01:41,223
candidates for methods. And I wanted to remind you, that each method is the

21
00:01:41,223 --> 00:01:47,809
responsibility of a single class. In this lesson will be implementing a fairly

22
00:01:47,809 --> 00:01:52,810
complex program, and we'll start out by just covering the classes that we need.

23
00:01:52,810 --> 00:01:59,098
The program that we want to develop deals with car sharing. So, we know car

24
00:01:59,098 --> 00:02:02,992
sharing is great, means less waste, less environmental damage, people travel

25
00:02:02,992 --> 00:02:09,684
together when they can. So, we want to write an application that simulates car

26
00:02:09,684 --> 00:02:14,200
sharing so that we can learn how to make it better. Here is a problem

27
00:02:14,200 --> 00:02:18,630
description. So, cars can pick up people whose destination is along the way of

28
00:02:18,630 --> 00:02:23,351
their own. The simulation should read information about cars and passengers and

29
00:02:23,351 --> 00:02:28,529
print out who has been driven where. What I'd like you to do is to read through

30
00:02:28,529 --> 00:02:34,054
this description and tell me what might make some good classes to implement in

31
00:02:34,054 --> 00:02:42,182
a program that does this car-sharing simulation. Let me give you a few choices.

32
00:02:42,182 --> 00:02:47,640
Which of these do you think would work out? Check all that apply.
