1
00:00:00,940 --> 00:00:04,570
All right for our implementation, I'll
start by attempting to set latitude and

2
00:00:04,570 --> 00:00:08,100
longitude constants using their
corresponding text fields.

3
00:00:08,100 --> 00:00:12,050
Technically, this if let statement
should always pass because if we scroll

4
00:00:12,050 --> 00:00:16,650
up here, there's this isTextFieldValid
method that's being called on

5
00:00:16,650 --> 00:00:20,860
both of them and it's going to ensure
that we actually have valid, double, or

6
00:00:20,860 --> 00:00:22,450
floating point numbers.

7
00:00:22,450 --> 00:00:26,920
But this extra check that we're making
in the if let statement is nice in case

8
00:00:26,920 --> 00:00:30,930
we want to call this method without
assuming any prior checks were made, but

9
00:00:30,930 --> 00:00:37,140
if the check does fail, let's return
a valid string, but with all zeros.

10
00:00:37,140 --> 00:00:40,440
Now, after the latitude and
longitude constants are created,

11
00:00:40,440 --> 00:00:44,230
we need to create a value for
each item that shows up in the list.

12
00:00:44,230 --> 00:00:46,690
For the minimum longitude,
let's take the longitude and

13
00:00:46,690 --> 00:00:51,660
subtract away half the width,
the SearchBBoxHalfWidth.

14
00:00:51,660 --> 00:00:55,525
Now normally this statement would
work fine, but what if I try to

15
00:00:55,525 --> 00:00:59,550
subtract beyond a negative 180
degree minimum for longitude?

16
00:00:59,550 --> 00:01:04,214
Well, if that happens, maybe it would
be best to just return negative

17
00:01:04,214 --> 00:01:08,720
180 instead because there could
be the case where a user puts in,

18
00:01:08,720 --> 00:01:13,250
say, negative 179.6, and
we set our HalfWidth here to ones.

19
00:01:13,250 --> 00:01:18,913
So if we were to subtract that away we
would be at, what, negative 180.6, which

20
00:01:18,913 --> 00:01:24,120
is outside of the accepted range but,
to the user, they wouldn't know that.

21
00:01:24,120 --> 00:01:27,940
They'd be entering valid longitude,
so, yeah,

22
00:01:27,940 --> 00:01:32,170
returning negative 180 in that
particular edge case would be nice.

23
00:01:32,170 --> 00:01:36,865
So, what I'm going to use
is the max function and

24
00:01:36,865 --> 00:01:40,370
we want to return
the maximum of this value.

25
00:01:40,370 --> 00:01:43,080
Or we'll need our constant.

26
00:01:44,260 --> 00:01:45,080
Very good, okay.

27
00:01:45,080 --> 00:01:51,260
So if we subtract beyond negative
180 then just return negative 180.

28
00:01:51,260 --> 00:01:55,430
Similarly, for the minimum latitude,
we'll subtract away HalfHeight

29
00:01:55,430 --> 00:01:58,540
of the BBox which we have
here in this constant.

30
00:01:58,540 --> 00:02:00,250
And we're using max again and

31
00:02:00,250 --> 00:02:05,250
in this case we're using the minimum for
latitude which is -90.

32
00:02:05,250 --> 00:02:09,880
Then for the maximum longitude and
latitude we just do the reverse.

33
00:02:09,880 --> 00:02:13,700
We add HalfWidth and HalfHeight and then
we use the minimum function to ensure

34
00:02:13,700 --> 00:02:19,475
that we don't go over the maximum value
in our LonRange and our LatRange.

35
00:02:19,475 --> 00:02:24,050
With these created, we can use a little
string interpolation and we're done.

36
00:02:24,050 --> 00:02:25,250
And let's build and run to check.

37
00:02:27,750 --> 00:02:28,470
And there we go.

38
00:02:28,470 --> 00:02:29,060
There's our URL.
