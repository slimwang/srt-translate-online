1
00:00:00,000 --> 00:00:04,000
There's 2 correct answers here. The first one is very obvious. It's this one here.

2
00:00:04,000 --> 00:00:08,000
Because the algorithm, of course, returns the vertex cover and the vertex cover

3
00:00:08,000 --> 00:00:13,000
can never get smaller than K. But the really useful answer is this one here.

4
00:00:13,000 --> 00:00:19,000
The algorithm has chosen at most 2 K vertices where K would have been the

5
00:00:19,000 --> 00:00:23,000
optimum number. Because each time this loop is run, it chooses at least 1 vertex

6
00:00:23,000 --> 00:00:29,000
from the optimum solution. What that also means is that it chooses at most 1

7
00:00:29,000 --> 00:00:37,000
useless vertex that didn't have to be part of that solution. So the error that it makes

8
00:00:37,000 --> 00:00:42,000
is at most 1 extra vertex, but it can make that error at most K times.

9
00:00:42,000 --> 00:00:47,000
And for that reason, the algorithm chooses at most 2K vertices

10
00:00:47,000 --> 00:00:50,000
which means that although the Take 2 algorithm doesn't look very smart,

11
00:00:50,000 --> 00:00:54,000
it's actually a factor 2 approximation algorithm. It guarantees that

12
00:00:54,000 --> 00:00:58,000
the solution that it gives you is at most twice as big as an optimum solution.

13
00:00:58,000 --> 99:59:59,999
So let's now have a look at the algorithm that seems so sophisticated.
