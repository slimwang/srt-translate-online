1
00:00:00,380 --> 00:00:04,670
And if we lay it out graphically, it looks like a pipe and filters.

2
00:00:04,670 --> 00:00:06,510
The filters are the components along the way and

3
00:00:06,510 --> 00:00:09,590
the pipes are the little lines connecting them.

4
00:00:09,590 --> 00:00:15,760
And, and, and this, this form, will indeed,

5
00:00:15,760 --> 00:00:18,999
solve the problem and yet it's much different than the previous one.

6
00:00:20,364 --> 00:00:23,170
Well, Parnas also laid out two other solutions,

7
00:00:23,170 --> 00:00:27,780
which I want to briefly describe to you and they're probably many more.

8
00:00:27,780 --> 00:00:31,820
>> Is there a problem necessarily because the pipe and filter doesn't have

9
00:00:31,820 --> 00:00:35,930
any central storage location that we're not keeping that data?

10
00:00:35,930 --> 00:00:38,370
Do we need to have good like logging systems, for

11
00:00:38,370 --> 00:00:43,280
instance, if we use that type of approach because the data isn't persistent,

12
00:00:43,280 --> 00:00:47,320
maybe like it would be with a shared data model?

13
00:00:47,320 --> 00:00:48,120
>> Well, okay, so

14
00:00:48,120 --> 00:00:51,930
I haven't really laid out what the requirements of the problem are, okay?

15
00:00:51,930 --> 00:00:54,530
And even in the shared data solution, that's in memory and

16
00:00:54,530 --> 00:00:57,110
it's going to go away when the process is over.

17
00:00:57,110 --> 00:01:01,360
Now, we could imagine adding in or being more explicit about what

18
00:01:01,360 --> 00:01:04,260
the requirements are and whether we need to persist them, okay.

19
00:01:04,260 --> 00:01:06,560
And let's, let's come back to that in a couple of minutes.

20
00:01:06,560 --> 00:01:07,070
>> Okay. >> Okay?

21
00:01:08,270 --> 00:01:12,302
First I'd like to go over a couple of other solutions that Parnas proposes.

22
00:01:12,302 --> 00:01:18,390
The next one to consider is called the Abstract Data Type or

23
00:01:18,390 --> 00:01:21,150
ADT solution and this is

24
00:01:21,150 --> 00:01:25,410
breaking the system into components based upon important data structures.

25
00:01:25,410 --> 00:01:27,050
So when we had the shared memory solution,

26
00:01:27,050 --> 00:01:30,530
that was breaking things into components based upon functions and

27
00:01:30,530 --> 00:01:33,780
likewise, the pipe and filter was more breaking it into functions.

28
00:01:33,780 --> 00:01:36,350
Here we're thinking in terms of the data first.

29
00:01:36,350 --> 00:01:38,820
We're going to hide the represent,

30
00:01:38,820 --> 00:01:42,680
representations of those datas behind abstract interfaces.

31
00:01:42,680 --> 00:01:45,200
That is we have a function called interface to it and

32
00:01:45,200 --> 00:01:49,930
how exactly we store this stuff away is all hidden from the other components.

33
00:01:49,930 --> 00:01:51,978
The components holding the data, of course,

34
00:01:51,978 --> 00:01:55,290
are also going to have some operations available to them.

35
00:01:55,290 --> 00:01:59,090
In a sense, this is a precursor to an object oriented approach.

36
00:01:59,090 --> 00:02:03,140
It's not, it was, it was first developed before object oriented

37
00:02:03,140 --> 00:02:08,440
languages became popular but many of the features that ADTs have,

38
00:02:08,440 --> 00:02:12,890
have been incorporated into object oriented solutions to things
