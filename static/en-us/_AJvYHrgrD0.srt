1
00:00:00,510 --> 00:00:02,860
Okay, so one.

2
00:00:02,860 --> 00:00:05,046
>> See, now that was mean. So right, one is an

3
00:00:05,046 --> 00:00:07,443
epsilon, no because epsilon has to be less than or equal

4
00:00:07,443 --> 00:00:09,908
to half, we already said that, but you're right. In a

5
00:00:09,908 --> 00:00:13,076
sense setting epsilon to one, is always a valid answer to

6
00:00:13,076 --> 00:00:16,904
the question, find an epsilon set that we've epsilon exhausted the

7
00:00:16,904 --> 00:00:20,540
version space. Because all it's saying is, that there is nothing

8
00:00:20,540 --> 00:00:23,330
left in the set that has an error greater than one.

9
00:00:23,330 --> 00:00:25,590
And since the error is defined to be the probability, it can't

10
00:00:25,590 --> 00:00:29,040
be greater than one. So that was kind of you know, kind of rude.

11
00:00:29,040 --> 00:00:31,680
>> All right, I, I thought I just answered the

12
00:00:31,680 --> 00:00:33,636
question. But I guess you want me to give you [CROSSTALK]

13
00:00:33,636 --> 00:00:34,630
>> Yeah but you, but you prob-, what you probably should

14
00:00:34,630 --> 00:00:36,780
have pointed out is that I left out the word smallest.

15
00:00:36,780 --> 00:00:40,460
>> Oh! Yes, yes. Okay. Well, so, I don't know the answer

16
00:00:40,460 --> 00:00:43,650
to that but, I think I could walk through it very quickly.

17
00:00:43,650 --> 00:00:43,830
>> Okay.

18
00:00:43,830 --> 00:00:47,510
>> Okay, so you saying the ones that are

19
00:00:47,510 --> 00:00:50,550
in green are the training examples that we see, right?

20
00:00:50,550 --> 00:00:51,090
>> Right.

21
00:00:51,090 --> 00:00:53,210
>> So we should be able to use that

22
00:00:53,210 --> 00:00:56,070
to figure out what the version space actually is.

23
00:00:56,070 --> 00:00:58,430
>> Right, which we did in a previous question.

24
00:00:58,430 --> 00:01:01,030
>> Right, although I don't remember [LAUGH] what the answer was.

25
00:01:01,030 --> 00:01:01,500
>> I'll remind you.

26
00:01:01,500 --> 00:01:03,185
>> I'll remind you,It's okay. So it was x1

27
00:01:03,185 --> 00:01:03,641
>> Mh-hm.

28
00:01:03,641 --> 00:01:08,280
>> Right, because the x1 matches, it was, or and x or.

29
00:01:08,280 --> 00:01:09,043
>> Mh-hm.

30
00:01:09,043 --> 00:01:10,330
>> I think that was it.

31
00:01:10,330 --> 00:01:13,400
>> Yeah, I think that's right. Okay, so, then what we can do is

32
00:01:13,400 --> 00:01:14,660
given that those are the three things

33
00:01:14,660 --> 00:01:16,940
that we've done. We could actually compute,

34
00:01:16,940 --> 00:01:21,930
what the error is according to this distribution for each of those three.

35
00:01:21,930 --> 00:01:23,200
>> Yes, exactly so.

36
00:01:23,200 --> 00:01:27,700
>> So let's, let's start with X1. So which one, x1, so all three

37
00:01:27,700 --> 00:01:31,660
of those are going to get the first one and the third one correct, right?

38
00:01:31,660 --> 00:01:33,610
>> All of them are going to get the first

39
00:01:33,610 --> 00:01:35,850
one and the third one correct. Yes, by design.

40
00:01:35,850 --> 00:01:36,530
>> By design.

41
00:01:36,530 --> 00:01:38,000
>> Right, to be in the version space.

42
00:01:38,000 --> 00:01:42,020
>> So now we can ask which ones will get the second one wrong?

43
00:01:42,020 --> 00:01:45,310
The fourth one doesn't matter because it has zero probability of showing up.

44
00:01:45,310 --> 00:01:47,630
>> That's right. So, it doesn't matter if you get this one

45
00:01:47,630 --> 00:01:50,650
right or wrong, it's not going to contribute to this true error measure.

46
00:01:50,650 --> 00:01:54,220
>> Okay. So let's look at x one. So x one will in fact get the

47
00:01:54,220 --> 00:01:59,760
second one wrong, because the output Is not the same as the value for x one.

48
00:01:59,760 --> 00:02:04,010
>> Good. And so what;s the probablity that x one, this hypothesis

49
00:02:04,010 --> 00:02:06,520
x one, is going to give a wrong answer on a randomly drawn input?

50
00:02:06,520 --> 00:02:07,180
>> Well,

51
00:02:07,180 --> 00:02:09,419
half the time it will get the second answer,

52
00:02:09,419 --> 00:02:11,700
and so the error is, in fact, one half.

53
00:02:11,700 --> 00:02:15,210
>> Yes. Exaclty. Good. All right. Let's move on to the or.

54
00:02:15,210 --> 00:02:18,830
>> Okay. So, we can do an easy one actually. We can do x or. Since we know

55
00:02:18,830 --> 00:02:20,890
x or is the right answer, we know It

56
00:02:20,890 --> 00:02:23,020
will has a probablity of being wrong of zero.

57
00:02:23,020 --> 00:02:23,950
>> Oh, good point.

58
00:02:23,950 --> 00:02:27,670
>> Okay. And so for or we can do the same thing. So is, we know it's going to

59
00:02:27,670 --> 00:02:29,900
get the first and the third ones right. So

60
00:02:29,900 --> 00:02:32,460
now we can ask whether it's going to get the

61
00:02:32,460 --> 00:02:36,690
second one, right. And zero or one is in fact true.

62
00:02:36,690 --> 00:02:38,920
Or one. So in fact it also has an error of zero.

63
00:02:38,920 --> 00:02:40,670
>> Okay.

64
00:02:40,670 --> 00:02:42,420
>> Which is kind of interesting. So and so,

65
00:02:42,420 --> 00:02:44,770
even though the function is xor, if we can

66
00:02:44,770 --> 00:02:47,210
get to the point where we have or or

67
00:02:47,210 --> 00:02:50,410
xor left, we actually will get zero true error.

68
00:02:50,410 --> 00:02:51,200
>> That's right.

69
00:02:51,200 --> 00:02:53,730
>> But in the meantime, because x1 has still

70
00:02:53,730 --> 00:02:57,560
survived the two examples that we have. Epsilon is

71
00:02:57,560 --> 00:02:58,620
therefore 0.5.

72
00:02:58,620 --> 00:03:01,580
>> Right, in particular, we're saying that, this

73
00:03:01,580 --> 00:03:04,250
is, if, if epsilon were smaller than 0.5,

74
00:03:04,250 --> 00:03:06,640
then it wouldn't be epsilon exhausted because you'd

75
00:03:06,640 --> 00:03:08,740
have a hypothesis that has error that's too high.

76
00:03:08,740 --> 00:03:09,070
>> Right.

77
00:03:09,070 --> 00:03:10,910
>> So this is the smallest epsilon that we can use.

78
00:03:10,910 --> 00:03:14,026
And in fact, we let you through if if it was anything

79
00:03:14,026 --> 00:03:16,960
0.5 to, to one, but this is the, this is the

80
00:03:16,960 --> 00:03:19,730
value that I was really hoping you'd be able to reason out.

81
00:03:19,730 --> 00:03:21,300
>> Okay, well that all made sense.

82
00:03:21,300 --> 00:03:22,500
>> Good, nice work.

83
00:03:22,500 --> 00:03:23,640
>> Thanks.
