1
00:00:00,000 --> 00:00:03,000
Unfortunately, we got the wrong answer.

2
00:00:03,000 --> 00:00:07,000
Yes, we got a path that leads to the goal, but we didn't get the fastest path.

3
00:00:07,000 --> 00:00:09,000
Let's see what went wrong.

4
00:00:09,000 --> 00:00:14,000
We had our start state, and then we started expanding that and moving out.

5
00:00:14,000 --> 00:00:17,000
That defined our frontier.

6
00:00:17,000 --> 00:00:21,000
Then we were very careful about sorting the elements on the frontier,

7
00:00:21,000 --> 00:00:25,000
and then we pulled off the very best, the one with the least cost.

8
00:00:25,000 --> 00:00:28,000
Then expanded out from there.

9
00:00:28,000 --> 00:00:35,000
Let's say the cost of getting to the end of this path with 14, this one 15, this one 16.

10
00:00:35,000 --> 00:00:39,000
This is the lowest cost path, we expand that first.

11
00:00:39,000 --> 00:00:46,000
Let's say one of the steps cost 5, so that gets us to this state with a cost of 19.

12
00:00:46,000 --> 00:00:49,000
Let's say that is in fact a goal state.

13
00:00:49,000 --> 00:00:51,000
Now we just stopped there.

14
00:00:51,000 --> 00:00:58,000
We said we took off the least cost path. We expanded it. We found a goal. We're done.

15
00:00:58,000 --> 00:01:03,000
When we were looking for the shortest path in terms of the least number of steps,

16
00:01:03,000 --> 00:01:05,000
that was the right approach,

17
00:01:05,000 --> 00:01:09,000
but when we're looking for the least cost path, that's not the right approach.

18
00:01:09,000 --> 00:01:14,000
Because even though we pulled off the cheapest path here--the one with the lowerst cost--

19
00:01:14,000 --> 00:01:17,000
here's another path that has a higher cost,

20
00:01:17,000 --> 00:01:22,000
but if we expand that there might be a step that only costs 2.

21
00:01:22,000 --> 00:01:28,000
We get to this state with cost 17 and that's also a goal.

22
00:01:28,000 --> 00:01:31,000
So we made a mistake. We stopped here when we got this result that was 19

23
00:01:31,000 --> 00:01:34,000
when we really wanted this result that was 17.

24
00:01:34,000 --> 00:01:38,000
I think the problem was we were prematurely acting.

25
00:01:38,000 --> 00:01:43,000
We said just because this was the fastest solution here,

26
00:01:43,000 --> 00:01:46,000
we went ahead and took one step away from the fastest

27
00:01:46,000 --> 00:01:51,000
and accepted that when that might not be the best answer overall.

28
00:01:51,000 --> 00:01:55,000
How can we fix this? One possibility would be to exhaust the frontier.

29
00:01:55,000 --> 00:01:58,000
That is, we've got a frontier here.

30
00:01:58,000 --> 00:02:01,000
Even though we find a solution from the first element of the frontier,

31
00:02:01,000 --> 00:02:04,000
we keep going until we visit everybody on the frontier

32
00:02:04,000 --> 00:02:07,000
and give everybody a change to find the better solution.

33
00:02:07,000 --> 00:02:10,000
Another possibility is to give everybody one more chance.

34
00:02:10,000 --> 00:02:13,000
Once we've found the first solution, now we say,

35
00:02:13,000 --> 00:02:18,000
okay, everybody on the frontier gets one more step to see if they can find a solution.

36
00:02:18,000 --> 00:02:21,000
The third possibility would be to test later.

37
00:02:21,000 --> 00:02:26,000
That is, when we generate this solution, we don't check right here to see if it is a solution.

38
00:02:26,000 --> 00:02:30,000
Rather, we just go ahead and throw this onto the frontier

39
00:02:30,000 --> 00:02:37,000
and only check to see if it's a solution when we pull the next element off of the frontier.

40
00:02:37,000 --> 00:02:42,000
Rather than when we generate a new node and we're about to add them,

41
00:02:42,000 --> 00:02:46,000
do the checks later once we've pulled them off the frontier.

42
00:02:46,000 --> 99:59:59,999
Now tell me which, if any, of these will work to give us this fastest solution.
