1
00:00:00,920 --> 00:00:03,660
Now, the second of our 3 pillars is going to be

2
00:00:03,660 --> 00:00:07,670
compute performance. And, to get a sense of how your application is

3
00:00:07,670 --> 00:00:10,710
actually spending it's time during a given frame, you really want

4
00:00:10,710 --> 00:00:14,260
to check out the timeline tab inside of Chrome developer tools. How

5
00:00:14,260 --> 00:00:17,070
this works, is that you actually load the timeline, hit this

6
00:00:17,070 --> 00:00:20,310
beautiful record button down here on the bottom, and then watch magic

7
00:00:20,310 --> 00:00:22,480
unfold. So, let's take look at how this plays out with

8
00:00:22,480 --> 00:00:26,040
Biolad Disaster. If I start the game, it goes up very simple.

9
00:00:26,040 --> 00:00:28,740
Now, when I hit the record button down here on the bottom, you

10
00:00:28,740 --> 00:00:32,600
can actually see that it's logging all of the event information that's occurring

11
00:00:32,600 --> 00:00:35,060
while this game is happening. Now, I'm not doing anything, I want to point

12
00:00:35,060 --> 00:00:38,220
that out, yet events are actually being fired. So, let's take a look at

13
00:00:38,220 --> 00:00:40,820
what's actually going on under the hood here. So, if I size this

14
00:00:40,820 --> 00:00:44,350
up, I can actually see the number of events inside of my window

15
00:00:44,350 --> 00:00:47,610
and drill down into what's going on. So, I've an animation frame here.

16
00:00:47,610 --> 00:00:51,280
And if I expand that, you can see that there's actually a request animation

17
00:00:51,280 --> 00:00:53,660
frame that has occurred at that point. Now,

18
00:00:53,660 --> 00:00:55,340
you'll notice down here on the bottom that there's

19
00:00:55,340 --> 00:00:58,200
actually different type of check boxes to filter

20
00:00:58,200 --> 00:01:00,410
out what events you're looking at. And each one

21
00:01:00,410 --> 00:01:02,720
has a respective color. For example, loading is

22
00:01:02,720 --> 00:01:05,560
blue, scripting is gold, rendering is purple and painting

23
00:01:05,560 --> 00:01:07,300
is green. So, if I toggle painting you can

24
00:01:07,300 --> 00:01:09,870
see that those events actually disappear from the timeline.

25
00:01:12,220 --> 00:01:14,980
Now, I did another quick little capture while you weren't looking,

26
00:01:14,980 --> 00:01:17,520
I saw you going to get peanuts from the bag. Now, if

27
00:01:17,520 --> 00:01:20,380
I slide my visibility window to another part of the timeline,

28
00:01:20,380 --> 00:01:23,060
you can see that there's actually a little block here that seems

29
00:01:23,060 --> 00:01:25,900
to be wider than all the other blocks around it, what

30
00:01:25,900 --> 00:01:30,630
this implies is that there's some scripting occurring between our windows here

31
00:01:30,630 --> 00:01:34,200
that is taking longer than the other frames. Now, below us, we

32
00:01:34,200 --> 00:01:37,230
actually have a list of events that occurred, plus as you remember

33
00:01:37,230 --> 00:01:39,400
these little triangles that allows us to drill down into the

34
00:01:39,400 --> 00:01:41,900
event. On here in the side, you can see that we

35
00:01:41,900 --> 00:01:44,960
have the same animation Frame Fire that we saw earlier, but

36
00:01:44,960 --> 00:01:48,810
the new one that we see showing up, is a GC Event,

37
00:01:48,810 --> 00:01:52,450
where 1.4 megabytes of data was actually collected. Hovering over it

38
00:01:52,450 --> 00:01:55,815
brings a popup dialogue that shows you that this actually took

39
00:01:55,815 --> 00:01:58,820
2.7 milliseconds, out of our frame budget to actually do a

40
00:01:58,820 --> 00:02:02,170
garbage collection event. That's why you can see that this block here,

41
00:02:02,170 --> 00:02:04,300
is actually larger then the block next to it, because

42
00:02:04,300 --> 00:02:07,670
we have an extra 2.7 miliseconds that went to do

43
00:02:07,670 --> 00:02:11,170
a garbage collection event. We can actually see this mirrored,

44
00:02:11,170 --> 00:02:14,293
by clicking on the memory option for the timeline. Now, what

45
00:02:14,293 --> 00:02:17,630
this's actually going to show us is a linear graph of

46
00:02:17,630 --> 00:02:20,720
where allocations are actually occuring, and lo and behold, you can

47
00:02:20,720 --> 00:02:23,710
see, between our 2 divets here, when that GC event

48
00:02:23,710 --> 00:02:27,620
occurs, the amount of memory allocated in our application drops down,

49
00:02:27,620 --> 00:02:30,700
thus showing the garbage collection freed memory. Now, I want to show

50
00:02:30,700 --> 00:02:33,560
you what this looks like live, because it's really interesting to watch.

51
00:02:33,560 --> 00:02:37,200
How an application, actually allocates its memory. So, you can see

52
00:02:37,200 --> 00:02:40,780
that over time, this application, when I'm doing nothing on the screen,

53
00:02:40,780 --> 00:02:44,410
is actually allocating about 1 megabyte every second or so. And

54
00:02:44,410 --> 00:02:47,290
then you can see the garbage collector actually kicks in, and frees

55
00:02:47,290 --> 00:02:49,680
a lot of that data. This type of sawtooth pattern that

56
00:02:49,680 --> 00:02:52,730
you're seeing along the timeline here, is very common in different web

57
00:02:52,730 --> 00:02:57,030
applications, that do a lot of dynamic allocation of objects. Now, there's an

58
00:02:57,030 --> 00:03:01,590
article out there that I've written on HTML 5 Rocks, that details different ways

59
00:03:01,590 --> 00:03:03,630
to address this type of sawtooth pattern,

60
00:03:03,630 --> 00:03:06,020
using object pools. But, we're not going to

61
00:03:06,020 --> 00:03:08,520
go into that right now. Let's stay focused on what's in front of us.
