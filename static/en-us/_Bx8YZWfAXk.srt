1
00:00:00,150 --> 00:00:04,740
First, let's look at the Pthread's thread abstraction and the thread creation

2
00:00:04,740 --> 00:00:08,740
mechanism that corresponds to the mechanisms that were proposed by Birrell.

3
00:00:08,740 --> 00:00:11,790
Birrell proposed the Thread abstraction and the Fork and

4
00:00:11,790 --> 00:00:14,930
join mechanisms that work with that abstraction.

5
00:00:14,930 --> 00:00:21,110
To represent threads, Pthread supports a pthread_t data type.

6
00:00:21,110 --> 00:00:22,770
That's the thread data type.

7
00:00:22,770 --> 00:00:24,930
Like Birrell thread data type,

8
00:00:24,930 --> 00:00:30,050
variables of this type will uniquely be identified with an identifier and

9
00:00:30,050 --> 00:00:33,200
will describe a thread, in this case a Pthreads thread.

10
00:00:33,200 --> 00:00:34,160
They'll have an ID,

11
00:00:34,160 --> 00:00:38,690
execution state, any other information that's relevant to the thread.

12
00:00:38,690 --> 00:00:42,040
Most of this is not something that you will directly see as a developer.

13
00:00:42,040 --> 00:00:46,270
Instead this is information that's used and maintained by the Pthread's library.

14
00:00:46,270 --> 00:00:50,350
The equivalent to the Fork that Birrell proposes is a more

15
00:00:50,350 --> 00:00:52,920
intuitive called pthread create.

16
00:00:52,920 --> 00:00:55,250
It takes as arguments a start routine.

17
00:00:55,250 --> 00:00:56,960
That's the equivalent to proc and

18
00:00:56,960 --> 00:01:01,350
Fork, as well as arguments equivalent to the arguments in Fork.

19
00:01:01,350 --> 00:01:03,220
It creates as a result and

20
00:01:03,220 --> 00:01:07,780
returns a new data structure that's of the type pthread type.

21
00:01:07,780 --> 00:01:10,690
And it's populated with all the relevant information so

22
00:01:10,690 --> 00:01:13,040
that this thread can start executing.

23
00:01:13,040 --> 00:01:16,880
It also takes as an input, a variable of type pthread attribute type.

24
00:01:16,880 --> 00:01:21,040
And this is a data structure that you can use to specify certain things about

25
00:01:21,040 --> 00:01:23,720
the thread that the pthreads library will need to

26
00:01:23,720 --> 00:01:26,480
take into consideration when managing the thread.

27
00:01:26,480 --> 00:01:28,515
We'll look at this in more detail shortly.

28
00:01:28,515 --> 00:01:33,440
Pthread_create also returns status information that indicates whether

29
00:01:33,440 --> 00:01:36,070
the creation was successful or a failure.

30
00:01:36,070 --> 00:01:39,920
Last, the alternative to Join is pthread_join.

31
00:01:39,920 --> 00:01:42,580
It takes two parameters, the thread structure,

32
00:01:42,580 --> 00:01:46,520
that's the thread that need to be joined, as well as the status variable.

33
00:01:46,520 --> 00:01:50,440
The status variable will capture all of the relevant return information,

34
00:01:50,440 --> 00:01:53,380
as well as the results that are returned from the Thread.

35
00:01:53,380 --> 00:01:58,100
The overall operation also returns a status that indicates whether the Join was

36
00:01:58,100 --> 00:01:59,750
successful or it failed.

37
00:01:59,750 --> 00:02:03,680
As you can see, these operations are fairly analogous to the operations that

38
00:02:03,680 --> 00:02:05,040
were proposed by Birrell.

39
00:02:05,040 --> 00:02:09,110
I would now like to talk, in a little more detail about Pthread Attributes.

40
00:02:09,110 --> 00:02:10,330
As we previously saw,

41
00:02:10,330 --> 00:02:15,270
there is a Pthread attribute-type argument to the pthread_create function.

42
00:02:15,270 --> 00:02:19,340
This argument gives us flexibility to specify certain features of

43
00:02:19,340 --> 00:02:20,820
the newly created thread.

44
00:02:20,820 --> 00:02:24,430
For instance, we can specify the stack size, scheduling policy or

45
00:02:24,430 --> 00:02:26,110
priority of the new thread.

46
00:02:26,110 --> 00:02:29,160
We can set the scope of the new thread, whether it's system or

47
00:02:29,160 --> 00:02:32,500
process, like what we explained in the previous lesson.

48
00:02:32,500 --> 00:02:35,642
Whether the threads should inherit attributes from the calling thread,

49
00:02:35,642 --> 00:02:36,760
whether it's joinable.

50
00:02:36,760 --> 00:02:41,130
Pthread establishes some default values for all of these parameters.

51
00:02:41,130 --> 00:02:45,460
And if you pass NULL as an argument to the the pthread_create function,

52
00:02:45,460 --> 00:02:47,650
you will achieve that default behavior.

53
00:02:47,650 --> 00:02:52,010
There's several calls that support operations on Pthread Attributes.

54
00:02:52,010 --> 00:02:55,690
Pthread attribute init or destroy allow us to create and

55
00:02:55,690 --> 00:02:58,540
initialize the attribute data structure.

56
00:02:58,540 --> 00:03:02,200
Or to destroy it and free that data structure from memory.

57
00:03:02,200 --> 00:03:07,780
Pthread set/get allows us to either set the value of an attribute field or

58
00:03:07,780 --> 00:03:09,230
to read that value.

59
00:03:09,230 --> 00:03:13,520
One of these attributes requires particular attention, and that's joinable.

60
00:03:13,520 --> 00:03:16,930
To explain this, I will first need to explain some mechanisms that

61
00:03:16,930 --> 00:03:20,420
are supported by Pthreads, but were not considered by Birrell.

62
00:03:20,420 --> 00:03:24,950
The mechanism not considered by Birrell is detachable threads.

63
00:03:24,950 --> 00:03:28,720
In Pthreads, the default behavior of thread creation is just like

64
00:03:28,720 --> 00:03:29,920
what Birrell described.

65
00:03:29,920 --> 00:03:31,490
The threads are joinable.

66
00:03:31,490 --> 00:03:35,820
With joinable threads the parent thread creates children threads, and

67
00:03:35,820 --> 00:03:37,530
can join them at a later time.

68
00:03:37,530 --> 00:03:41,000
The parent thread should not terminate until the children threads have

69
00:03:41,000 --> 00:03:46,410
completed their execution and have been joined via the explicit join operation.

70
00:03:46,410 --> 00:03:51,130
If the parent thread exits early, the children threads can turn into zombies,

71
00:03:51,130 --> 00:03:53,120
because they may have completed or

72
00:03:53,120 --> 00:03:57,330
died, but not exited or have not been reaped properly.

73
00:03:57,330 --> 00:03:59,510
In Pthreads there is a possibility for

74
00:03:59,510 --> 00:04:02,950
the children threads to be detached from the parent.

75
00:04:02,950 --> 00:04:05,400
Once detached, these threads cannot be joined.

76
00:04:05,400 --> 00:04:09,580
If a parent exits, these children are free to continue their execution.

77
00:04:09,580 --> 00:04:11,240
This really makes the parent and

78
00:04:11,240 --> 00:04:15,580
the children equivalent to one another, with the exception that the parent

79
00:04:15,580 --> 00:04:19,910
threads have some additional information on the children that they have created.

80
00:04:19,910 --> 00:04:24,960
To detach threads, Pthread provides a pthread_detach operation.

81
00:04:24,960 --> 00:04:27,190
That takes the thread data structure,

82
00:04:27,190 --> 00:04:29,950
the thread that needs to be detached as an argument.

83
00:04:29,950 --> 00:04:33,380
Threads also can be created as detached threads

84
00:04:33,380 --> 00:04:36,510
using the attribute DETACHED state.

85
00:04:36,510 --> 00:04:41,900
The value of this attribute first needs to be set to PTHREAD_CREATE_DETACHED,

86
00:04:41,900 --> 00:04:45,130
because otherwise the default behavior for Pthreads is for

87
00:04:45,130 --> 00:04:47,730
threads to be created as joinable threads.

88
00:04:47,730 --> 00:04:51,390
So with DETACHED thread since the parent thread doesn't need to

89
00:04:51,390 --> 00:04:52,870
stick around to wait for

90
00:04:52,870 --> 00:04:58,360
the children threads to complete, it can simply exit using pthread_exit.

91
00:04:58,360 --> 00:05:01,210
Here is an example of using pthread attributes.

92
00:05:01,210 --> 00:05:06,160
First the pthread attribute data structure must be created and initialized.

93
00:05:06,160 --> 00:05:09,760
This will allocate the data structure with sufficient memory, and

94
00:05:09,760 --> 00:05:14,220
it will set its values to the default pthread parameters.

95
00:05:14,220 --> 00:05:17,780
We can also adjust the values of the attributes using

96
00:05:17,780 --> 00:05:20,960
calls like pthread_attr_setdetachstate or

97
00:05:20,960 --> 00:05:24,640
setscope, or which ever other attributes we want to adjust.

98
00:05:24,640 --> 00:05:28,135
For instance, here we are setting the detach state to be

99
00:05:28,135 --> 00:05:32,130
PTHREAD_CREATE_DETACHED like what we described just a minute ago.

100
00:05:32,130 --> 00:05:35,800
And we're setting the scope, the scheduling scope of the threading system,

101
00:05:35,800 --> 00:05:37,760
to be the system scope.

102
00:05:37,760 --> 00:05:42,440
This means that the newly created thread will share resources equally with

103
00:05:42,440 --> 00:05:44,570
all other threads in the system.

104
00:05:44,570 --> 00:05:48,410
Once the attributes have been initialized and set to the desired values,

105
00:05:48,410 --> 00:05:52,684
the resulting data structure is passed to the call pthread_create
