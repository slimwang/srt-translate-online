1
00:00:00,000 --> 00:00:03,000
[Male narrator] A* Search works by always expanding the path

2
00:00:03,000 --> 00:00:07,000
that has a minimum value of the function f

3
00:00:07,000 --> 00:00:12,000
which is defined as a sum of the g + h components.

4
00:00:12,000 --> 00:00:16,000
Now, the function g of a path

5
00:00:16,000 --> 00:00:19,000
is just the path cost,

6
00:00:19,000 --> 00:00:23,000
and the function h of a path

7
00:00:23,000 --> 00:00:27,000
is equal to the h value of the state,

8
00:00:27,000 --> 00:00:30,000
which is the final state of the path,

9
00:00:30,000 --> 00:00:36,000
which is equal to the estimated distance to the goal.

10
00:00:36,000 --> 00:00:39,000
Here's an example of how A* works.

11
00:00:39,000 --> 00:00:44,000
Suppose we found this path through the state's base to a state x

12
00:00:44,000 --> 00:00:48,000
and we're trying to give a measure to the value of this path.

13
00:00:48,000 --> 00:00:55,000
The measure f is a sum of g, the path cost so far,

14
00:00:55,000 --> 00:01:02,000
and h, which is the estimated distance that the path will take

15
00:01:02,000 --> 00:01:04,000
to complete its path to the goal.

16
00:01:04,000 --> 00:01:08,000
Now, minimizing g helps us keep the path short

17
00:01:08,000 --> 00:01:13,000
and minimizing h helps us keep focused on finding the goal

18
00:01:13,000 --> 00:01:17,000
and the result is a search strategy that is the best possible

19
00:01:17,000 --> 00:01:20,000
in the sense that it finds the shortest length path

20
00:01:20,000 --> 00:01:24,000
while expanding the minimum number of paths possible.

21
00:01:24,000 --> 00:01:28,000
It could be called "best estimated total path cost first,"

22
00:01:28,000 --> 00:01:32,000
but the name A* is traditional.

23
00:01:32,000 --> 00:01:36,000
Now let's go back to Romania and apply the A* algorithm

24
00:01:36,000 --> 00:01:40,000
and we're going to use a heuristic, which is a straight line distance

25
00:01:40,000 --> 00:01:42,000
between a state and the goal.

26
00:01:42,000 --> 00:01:44,000
The goal, again, is Bucharest,

27
00:01:44,000 --> 00:01:47,000
and so the distance from Bucharest to Bucharest is, of course, 0.

28
00:01:47,000 --> 00:01:51,000
And for all the other states, I've written in red

29
00:01:51,000 --> 00:01:53,000
the straight line distance.

30
00:01:53,000 --> 00:01:55,000
For example, straight across like that.

31
00:01:55,000 --> 00:01:59,000
Now, I should say that all the roads here I've drawn as straight lines,

32
00:01:59,000 --> 00:02:03,000
but actually, roads are going to be curved to some degree,

33
00:02:03,000 --> 00:02:06,000
so the actual distance along the roads is going to be longer

34
00:02:06,000 --> 00:02:09,000
than the straight line distance.

35
00:02:09,000 --> 00:02:13,000
Now, we start out as usual--we'll start in Arad as a start state--

36
00:02:13,000 --> 00:02:21,000
and we'll expand out Arad and so we'll add 3 paths

37
00:02:21,000 --> 00:02:26,000
and the evaluation function, f, will be the sum of the path length,

38
00:02:26,000 --> 00:02:29,000
which is given in black, and the estimated distance,

39
00:02:29,000 --> 00:02:32,000
which is given in red.

40
00:02:32,000 --> 00:02:37,000
And so the path length from this path

41
00:02:37,000 --> 00:02:45,000
will be 140+253 or 393;

42
00:02:45,000 --> 00:02:55,000
for this path, 75+374, or 449;

43
00:02:55,000 --> 00:03:05,000
and for this path, 118+329, or 447.

44
00:03:05,000 --> 00:03:09,000
And now, the question is out of all the paths that are on the frontier,

45
00:03:09,000 --> 99:59:59,999
which path would we expand next under the A* algorithm?
