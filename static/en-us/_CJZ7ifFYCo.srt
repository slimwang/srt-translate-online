1
00:00:00,170 --> 00:00:02,330
Alright, Michael, I got a quiz for you, okay?

2
00:00:02,330 --> 00:00:03,160
>> Sure.

3
00:00:03,160 --> 00:00:07,689
>> So, in the last example we had noise free data.

4
00:00:07,689 --> 00:00:09,840
So I want to think a little bit about what happens if we

5
00:00:09,840 --> 00:00:11,940
have some noisy data. And so I'm going to come up with

6
00:00:11,940 --> 00:00:16,360
a really weird, noisy model. But hopefully it illustrates the point. Okay.

7
00:00:16,360 --> 00:00:16,912
>> Sure.

8
00:00:16,912 --> 00:00:19,580
>> Okay so i got a bunch of training data, its x of i d

9
00:00:19,580 --> 00:00:25,310
of i and here's how the true underline process sort of works. So give us some

10
00:00:25,310 --> 00:00:28,330
particular x of i, you get a label which is

11
00:00:28,330 --> 00:00:31,950
d of i which is equal to k times x of

12
00:00:31,950 --> 00:00:34,000
i where k is some number So one of the

13
00:00:34,000 --> 00:00:38,220
counting numbers, one, two, three, four, five, six, seven, eight, and

14
00:00:38,220 --> 00:00:41,070
so on and so forth. And the probability that you

15
00:00:41,070 --> 00:00:45,000
actually get anyone of those multiples of x of i is

16
00:00:45,000 --> 00:00:47,850
equal to one over two to the k. Now why did

17
00:00:47,850 --> 00:00:50,360
I choose one over two to the k? Because it turns

18
00:00:50,360 --> 00:00:54,110
out that the sum of all those two to the k's from one

19
00:00:54,110 --> 00:00:55,550
through infinity happens to equal to

20
00:00:55,550 --> 00:00:57,650
one. So it's a true probability distribution.

21
00:00:57,650 --> 00:00:58,410
>> Hmm, okay.

22
00:00:58,410 --> 00:01:00,510
>> So it's just a neat little geometric

23
00:01:00,510 --> 00:01:03,630
distribution. So, you under understand the setup so far?

24
00:01:03,630 --> 00:01:07,300
>> I think so, so before hypothesis were producing

25
00:01:07,300 --> 00:01:09,790
answers then we looked for them to be exactly

26
00:01:09,790 --> 00:01:12,240
in the data. Now we're saying that the hypothesis

27
00:01:12,240 --> 00:01:15,590
produces an answer, and it gets kind of smooshed around

28
00:01:15,590 --> 00:01:18,300
a little bit before it reappears in the table, thats the noisy part.

29
00:01:18,300 --> 00:01:21,660
>> Right, so you, you're not going to be in a case now, that if

30
00:01:21,660 --> 00:01:27,620
the hypothesis disagrees with the label it sees. That in fact that means no it

31
00:01:27,620 --> 00:01:29,920
can't possibly be the right hypothesis because

32
00:01:29,920 --> 00:01:33,330
there's some stochastic process going on that might

33
00:01:33,330 --> 00:01:36,110
corrupt your output label, if you want to think

34
00:01:36,110 --> 00:01:38,350
of it as corruption, since it's noisy. Okay?

35
00:01:38,350 --> 00:01:39,050
>> Okay, yeah sure.

36
00:01:39,050 --> 00:01:39,330
>> Alright?

37
00:01:39,330 --> 00:01:40,650
>> Okay, so here's

38
00:01:40,650 --> 00:01:44,180
a set of data that you got. Here's a bunch of x's that, that make

39
00:01:44,180 --> 00:01:46,540
up our training data one, three, 11, 12,

40
00:01:46,540 --> 00:01:49,460
and 20. For some reason they're in ascending

41
00:01:49,460 --> 00:01:55,220
order. And the labels that go along with them are five, six, 11, 36, and 100. So

42
00:01:55,220 --> 00:02:01,580
you'll notice that they're all multiples of some sort of the input x. Okay?

43
00:02:01,580 --> 00:02:02,800
>> Alright.

44
00:02:02,800 --> 00:02:04,690
>> Now I have a candidate hypothesis.

45
00:02:05,704 --> 00:02:08,758
H of x which just returns x. That's kind of neat.

46
00:02:08,758 --> 00:02:11,750
So it's the identity function. So, what I want you to do

47
00:02:11,750 --> 00:02:16,360
is to compute the probability of seeing this particular data set in

48
00:02:16,360 --> 00:02:19,750
a world where that hypothesis, the identity function, is in fact true.

49
00:02:19,750 --> 00:02:22,790
>> The identity function plus this noise process.

50
00:02:22,790 --> 00:02:24,220
>> Yes.

51
00:02:24,220 --> 00:02:27,410
>> And one other question quickly this, this noise

52
00:02:27,410 --> 00:02:31,300
process is supplied independently to each of these inputs,

53
00:02:31,300 --> 00:02:32,270
outputs, pairs?

54
00:02:32,270 --> 00:02:32,960
>> Yes, absolutely.

55
00:02:32,960 --> 00:02:34,810
>> Okay, then, yeah, I think I can do that. Uh-huh.

56
00:02:34,810 --> 00:02:36,740
>> Okay, go.
