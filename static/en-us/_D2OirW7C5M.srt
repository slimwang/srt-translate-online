1
00:00:00,425 --> 00:00:04,617
Now that you've added the URI
information to the WeatherContract, step

2
00:00:04,617 --> 00:00:08,751
two of building our Content Provider,
I've got some explaining to do.

3
00:00:08,751 --> 00:00:11,038
At the beginning of our WeatherContract,

4
00:00:11,038 --> 00:00:13,652
you can see we defined
the CONTENT_AUTHORITY.

5
00:00:13,652 --> 00:00:17,551
Next we added strings for
the BASE paths for our URIs.

6
00:00:17,551 --> 00:00:20,618
Note how these paths
match our two tables.

7
00:00:20,618 --> 00:00:24,753
For each of our tables,
LocationEntry and WeatherEntry,

8
00:00:24,753 --> 00:00:30,138
we created a CONTENT_URI that represents
the base location for each table.

9
00:00:30,138 --> 00:00:34,011
Something else that is convenient to
have in the contract are functions to

10
00:00:34,011 --> 00:00:36,268
help build the Content Provider queries.

11
00:00:36,268 --> 00:00:39,309
Now, for some URI builders and
decoder functions for WeatherEntry.

12
00:00:39,309 --> 00:00:43,778
It's convenient to have these, as it
makes fewer places in your code aware of

13
00:00:43,778 --> 00:00:47,715
the actual URI in coding,
keeping this knowledge in the contract.

14
00:00:47,715 --> 00:00:51,741
Strings such as the location setting
can be impended with the impend path

15
00:00:51,741 --> 00:00:52,405
function.

16
00:00:52,405 --> 00:00:55,865
You'll be implementing the build
weather location function shortly.

17
00:00:55,865 --> 00:00:59,491
In this case adding an additional
path to the URI does not

18
00:00:59,491 --> 00:01:01,275
change the type of the URI.

19
00:01:01,275 --> 00:01:03,271
See, they're both type DIR.

20
00:01:03,271 --> 00:01:07,591
We can also use these functions to add
potentially useful query parameters.

21
00:01:07,591 --> 00:01:12,281
In this case, we use a query
parameter for the start date.

22
00:01:12,281 --> 00:01:16,077
Query parameters are useful when, for
when we have a fixed database query that

23
00:01:16,077 --> 00:01:18,504
we want to have some limited
parametrization for.

24
00:01:18,504 --> 00:01:23,751
In this case it will be a parameter for
our join between the two tables.

25
00:01:23,751 --> 00:01:25,470
More on that later.

26
00:01:25,470 --> 00:01:29,594
URI queries look just like
the queries you see in web URLs, and

27
00:01:29,594 --> 00:01:34,688
give us the ability to add more richness
and complexity to our URI contract.

28
00:01:34,688 --> 00:01:39,288
Finally, we have this function that
builds a two part URI with both weather

29
00:01:39,288 --> 00:01:40,538
and date segments.

30
00:01:40,538 --> 00:01:44,717
Below this we have helper functions that
hide the URI structure from our code.

31
00:01:44,717 --> 00:01:49,167
For retrieving values in the URI and
place all this knowledge in one place.

32
00:01:49,167 --> 00:01:52,423
Looking back at our list of URIs,
you can see that for

33
00:01:52,423 --> 00:01:56,271
each URI I called out whether
the URI returned a list of items.

34
00:01:56,271 --> 00:02:01,938
By labeling it with dir for directory or
a single item by labeling it with item.

35
00:02:01,938 --> 00:02:06,406
Cursors returned from a content provider
have unique types based upon their

36
00:02:06,406 --> 00:02:09,066
content and
the base path used for the query.

37
00:02:09,066 --> 00:02:12,497
Android uses a form similar
to the internet media type or

38
00:02:12,497 --> 00:02:15,637
mime type to describe
the type returned by the URI.

39
00:02:15,637 --> 00:02:18,589
Cursors that can return more
than one item are prefixed

40
00:02:18,589 --> 00:02:20,906
by the CURSOR_DIR_BASE_TYPE string.

41
00:02:20,906 --> 00:02:24,071
While cursors that return only
a single item are prefixed by

42
00:02:24,071 --> 00:02:26,295
the CURSOR_ITEM_BASE_TYPE string.

43
00:02:26,295 --> 00:02:31,120
We define these types here for both
the location and the weather queries.
