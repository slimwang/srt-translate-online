1
00:00:00,490 --> 00:00:02,440
Lets look at the CSV file containing our

2
00:00:02,440 --> 00:00:05,280
Aadhaar enrollment data once again. Each row has

3
00:00:05,280 --> 00:00:07,900
a number of columns such as, registrar, enrollment

4
00:00:07,900 --> 00:00:14,090
agency, state, district, Aadhaar generated, enrollment rejected, and a

5
00:00:14,090 --> 00:00:16,500
bunch of other information. If we want to count

6
00:00:16,500 --> 00:00:19,484
the number of Aadhaar generated per district. The

7
00:00:19,484 --> 00:00:22,476
columns that we're most interested in are district

8
00:00:22,476 --> 00:00:25,850
and Aadhaar generated. Can you fill in the missing

9
00:00:25,850 --> 00:00:28,860
pieces of the mapper? So if you wanted to complete this

10
00:00:28,860 --> 00:00:32,450
job using the mapper programming model, we would need to write

11
00:00:32,450 --> 00:00:35,560
a mapper and reducer. Why don't you give it a try.

12
00:00:35,560 --> 00:00:39,010
Here is the skeleton of a mapper for this job. We

13
00:00:39,010 --> 00:00:41,740
go through every single line in the input. In this case,

14
00:00:41,740 --> 00:00:44,530
it's going to be our CSV file containing all of the

15
00:00:44,530 --> 00:00:48,320
rows and our Aadhar-generated data. You're going to have to go

16
00:00:48,320 --> 00:00:51,910
through each line, which will be a list of comma-separated values.

17
00:00:51,910 --> 00:00:55,020
The header row will be included. Took a nice each

18
00:00:55,020 --> 00:00:58,060
row using the commas and emit a key value pair

19
00:00:58,060 --> 00:01:01,700
containing the district and the number of Aadhhar generated separated

20
00:01:01,700 --> 00:01:04,440
by a tab. Make sure that each row has the

21
00:01:04,440 --> 00:01:07,350
correct number of tokens and make sure it's not the

22
00:01:07,350 --> 00:01:10,550
header row. In order to count the number of Aadhaar

23
00:01:10,550 --> 00:01:13,530
generated per district using map reduce, we'll also have to

24
00:01:13,530 --> 00:01:17,060
write a reducer. Here's the skeleton of a reducer function

25
00:01:17,060 --> 00:01:20,760
that you'll fill in. We initialize aadhaar_generated to 0,

26
00:01:20,760 --> 00:01:23,690
and set old_key to None. You'll cycle through the list

27
00:01:23,690 --> 00:01:26,580
of key value pairs emitted by your mapper, and print

28
00:01:26,580 --> 00:01:29,230
out each key once, along with the total number of

29
00:01:29,230 --> 00:01:33,120
Aadhaar generated, separated by a tab. You can assume that

30
00:01:33,120 --> 00:01:35,070
the list of key value pairs will be ordered by

31
00:01:35,070 --> 00:01:38,660
key. Make sure that each key value pair is formatted

32
00:01:38,660 --> 00:01:42,150
correctly before you process it. Here's a sample final key

33
00:01:42,150 --> 00:01:46,111
value pair. Gujarat\t5.0.
