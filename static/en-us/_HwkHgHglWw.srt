1
00:00:00,160 --> 00:00:03,520
Throughout the course, we repeatedly mention that regular

2
00:00:03,520 --> 00:00:06,950
expression libraries simply use finite state machines underneath.

3
00:00:06,950 --> 00:00:09,140
So, in this last problem, we've asked you

4
00:00:09,140 --> 00:00:14,060
to implement the lexer, parser and interpreter for

5
00:00:14,060 --> 00:00:16,450
a basic regular expression library. So, given a

6
00:00:16,450 --> 00:00:18,570
regular expression as a string, you need to

7
00:00:18,570 --> 00:00:22,570
generate a non-deterministic finite state machine. That accepts

8
00:00:22,570 --> 00:00:25,670
the same exact strings as that regular expression.

9
00:00:25,670 --> 00:00:27,600
So, this is going to be a lot of code, and I'm

10
00:00:27,600 --> 00:00:29,660
not going to go through it line by line. But I'll give

11
00:00:29,660 --> 00:00:31,910
you an overview for one way to solve it. So, here I

12
00:00:31,910 --> 00:00:36,310
have a solution. Here's our five types of tokens, and four of which

13
00:00:36,310 --> 00:00:39,160
are defined right here and the letter is defined in the regular

14
00:00:39,160 --> 00:00:42,650
expression. Then we have our typical ignore and error rules. And here we

15
00:00:42,650 --> 00:00:47,270
have the precedence ordering for regular expressions, and then our parse rules.

16
00:00:47,270 --> 00:00:48,990
These should all look pretty straightforward,

17
00:00:48,990 --> 00:00:51,150
although you could have organized your abstract

18
00:00:51,150 --> 00:00:54,310
syntax tree any way you wanted. And here's the

19
00:00:54,310 --> 00:00:57,468
core of the solution, and that is the interpreter. We

20
00:00:57,468 --> 00:01:00,658
have, basically, three helper functions. To help us generate a

21
00:01:00,658 --> 00:01:04,370
non-deterministic finite state machine out of our abstract syntax tree

22
00:01:04,370 --> 00:01:06,470
that came out of our parser. We have one that

23
00:01:06,470 --> 00:01:10,270
adds edges to the finite state machine, one that creates

24
00:01:10,270 --> 00:01:13,707
new states, and the last one that walks the abstract

25
00:01:13,707 --> 00:01:16,260
syntax tree. So, if we see a letter on its

26
00:01:16,260 --> 00:01:17,870
own, that means we're going to have to take a

27
00:01:17,870 --> 00:01:22,390
transition to the next state. If we have two entities

28
00:01:22,390 --> 00:01:25,990
concatenated, we're going to have to go from the current

29
00:01:25,990 --> 00:01:30,710
state we're at to some middle state, and then lastly,

30
00:01:30,710 --> 00:01:33,186
to the goal state. We have a bar, that means

31
00:01:33,186 --> 00:01:35,684
we're going to go two possible directions in our finite

32
00:01:35,684 --> 00:01:38,420
state machine. And a star is going to loop back

33
00:01:38,420 --> 00:01:41,760
on itself. In our function that does all the magic,

34
00:01:41,760 --> 00:01:46,740
lex is the input, takes out the parse tree using our parser,

35
00:01:46,740 --> 00:01:48,440
and then interprets the parse tree,

36
00:01:48,440 --> 00:01:50,710
returning the finite state machine that resulted.
