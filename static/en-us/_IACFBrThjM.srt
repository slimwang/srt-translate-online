1
00:00:00,350 --> 00:00:04,430
Now for the remaining examples, we're
going to use a P list and a JSON file

2
00:00:04,430 --> 00:00:08,650
that both represent a maze like
the one you've seen in the maze app.

3
00:00:08,650 --> 00:00:10,940
Let's start by peeking at the P list.

4
00:00:10,940 --> 00:00:12,920
At the top level,
it contains a count for

5
00:00:12,920 --> 00:00:16,480
the number of rows, the number
of columns and some cell data.

6
00:00:17,700 --> 00:00:19,380
The cell data is an array, and

7
00:00:19,380 --> 00:00:23,470
if we drop down, we can see that
it contains arrays as well.

8
00:00:23,470 --> 00:00:26,540
And if we click one of the arrays,
it contains more arrays.

9
00:00:26,540 --> 00:00:28,950
Wow.
And if we click one of the arrays,

10
00:00:28,950 --> 00:00:31,970
then we see that we had
these four Boolean values.

11
00:00:31,970 --> 00:00:37,580
And this repeats for every single
one of their innermost arrays.

12
00:00:37,580 --> 00:00:40,160
Now that was pretty ugly to look at.

13
00:00:40,160 --> 00:00:44,590
And it may seem complicated, but
what it's really modeling is a 2D grid.

14
00:00:44,590 --> 00:00:49,210
Each of the innermost arrays describes
a grid cell like the one seen here.

15
00:00:49,210 --> 00:00:52,860
And it tells us if the grid
cell contains a wall or

16
00:00:52,860 --> 00:00:57,290
a path on the top, the right,
the bottom or the left of the cell.

17
00:00:58,392 --> 00:01:01,630
Now let's take a look at this
cell that we've marked in blue.

18
00:01:01,630 --> 00:01:04,452
The first value in the array is true or
yes.

19
00:01:04,452 --> 00:01:08,250
These map very directly so that means
that there should be a wall on the top.

20
00:01:09,340 --> 00:01:10,710
The next value's also true so

21
00:01:10,710 --> 00:01:13,680
that means there should also
be a wall on the right.

22
00:01:13,680 --> 00:01:16,060
The next item we have a no, or a false.

23
00:01:16,060 --> 00:01:20,500
So there's no wall, or we'd say there's
a path on the bottom of this cell.

24
00:01:20,500 --> 00:01:22,420
And the same goes for the left.

25
00:01:22,420 --> 00:01:25,410
Now if you think back to the maze app,
these top, right, bottom and

26
00:01:25,410 --> 00:01:31,090
left represents the walls and the paths
and you can see that more clearly here.

27
00:01:31,090 --> 00:01:34,040
That cell that we were just
looking at is the cell in the top

28
00:01:34,040 --> 00:01:35,240
right hand corner.

29
00:01:35,240 --> 00:01:37,060
And we can see that the top and
right are true.

30
00:01:37,060 --> 00:01:38,510
So we have a wall in the top and right.

31
00:01:38,510 --> 00:01:41,520
But the bottom and the left are false,
so there's a path here.

32
00:01:41,520 --> 00:01:46,340
Now if we go back to the P list file
we'll see that the number of arrays here

33
00:01:46,340 --> 00:01:47,990
matches the number of rows.

34
00:01:47,990 --> 00:01:49,380
So we have five rows.

35
00:01:49,380 --> 00:01:53,020
And then we have one, two,
three, four, five arrays.

36
00:01:53,020 --> 00:01:57,120
And the number of arrays within a row,
one, two, three, four, five,

37
00:01:57,120 --> 00:02:00,020
six, seven,
matches the number of columns.

38
00:02:00,020 --> 00:02:02,880
So this P list describes
a five by seven maze.

39
00:02:04,290 --> 00:02:07,370
Now, the JSON file contains
the exact same data, but

40
00:02:07,370 --> 00:02:10,039
it's formatted a little bit differently.

41
00:02:10,039 --> 00:02:12,660
And as we're looking at it here,
it's kind of hard to read.

42
00:02:12,660 --> 00:02:14,600
It's not very pretty.

43
00:02:14,600 --> 00:02:18,120
Now when you're faced with JSON
like this, I'd recommend copy and

44
00:02:18,120 --> 00:02:22,570
pasting it into an online
JSON tool that prettifies it.

45
00:02:22,570 --> 00:02:26,490
And prettify is not a real word.

46
00:02:26,490 --> 00:02:29,840
I mean to say that it formats
the JSON so it's much easier to read.

47
00:02:29,840 --> 00:02:31,860
So we'll go ahead and copy this.

48
00:02:32,950 --> 00:02:35,481
And then this is jsonprettyprint.com.

49
00:02:35,481 --> 00:02:37,730
And we'll paste it in.

50
00:02:37,730 --> 00:02:38,480
And then we'll run.

51
00:02:40,040 --> 00:02:40,815
And that's much better.

52
00:02:40,815 --> 00:02:44,625
So again, if you have some really
complex JSON that's kind of mangled and

53
00:02:44,625 --> 00:02:47,821
you want to spread it out and
make it pretty and easier to read,

54
00:02:47,821 --> 00:02:50,660
I'd recommend using a tool like this.

55
00:02:50,660 --> 00:02:53,430
So now that we have a rough idea
of what this data looks like and

56
00:02:53,430 --> 00:02:56,540
it represents, what can we do with it?

57
00:02:56,540 --> 00:02:59,890
So let's think about how we
would model this in code.

58
00:02:59,890 --> 00:03:02,920
Here's a struct that represents
one of the cells that we saw.

59
00:03:02,920 --> 00:03:06,530
So it's got four Boolean values, true
and false values representing whether

60
00:03:06,530 --> 00:03:09,240
there's a wall or a path for
the top, right, bottom, and left.

61
00:03:10,250 --> 00:03:14,490
And as we saw a second ago, based on the
true and false values in each array for

62
00:03:14,490 --> 00:03:18,530
each grid cell, we could determine
whether there's a wall or a path.

63
00:03:18,530 --> 00:03:21,280
So, these are a couple examples
that give us an idea of

64
00:03:21,280 --> 00:03:23,710
what the grid cell might look like.

65
00:03:23,710 --> 00:03:27,870
So when everything is true, we have
walls on the top, the left, the right,

66
00:03:27,870 --> 00:03:28,930
and the bottom.

67
00:03:28,930 --> 00:03:34,380
When this last Bool value is false,
and that represents the left,

68
00:03:34,380 --> 00:03:38,540
then the left side has a path
while everything else has a wall.

69
00:03:38,540 --> 00:03:39,910
And then if everything is false,

70
00:03:39,910 --> 00:03:44,080
the we have a path that goes to the top,
the left, the right, and the bottom.

71
00:03:44,080 --> 00:03:47,580
So let's imagine that we have this
simplified version of the cell data.

72
00:03:47,580 --> 00:03:50,260
It only has two rows and two columns.

73
00:03:50,260 --> 00:03:52,430
And if we were to go
through each grid cell,

74
00:03:52,430 --> 00:03:55,520
then we would result in a representation
that's something like this.
