1
00:00:00,000 --> 00:00:04,000
Here's the code. It's just 20 lines or so.

2
00:00:04,000 --> 00:00:07,000
I've left out a couple pieces to give you something to do,

3
00:00:07,000 --> 00:00:09,000
but let me first try to explain how it works.

4
00:00:09,000 --> 00:00:11,000
We take a pattern and a text.

5
00:00:11,000 --> 00:00:15,000
We're breaking down the pattern into its components.

6
00:00:15,000 --> 00:00:22,000
The components are an operator and then and x and a y part, depending on the definition.

7
00:00:22,000 --> 00:00:26,000
For example the literal will only have an x component.

8
00:00:26,000 --> 00:00:29,000
Sequence and alternative will have both and x and a y.

9
00:00:29,000 --> 00:00:31,000
We'll see how that component is written later,

10
00:00:31,000 --> 00:00:33,000
but for now just assume it's going to pick out the right pieces.

11
00:00:33,000 --> 00:00:39,000
Then we decide which operator we have, literal, sequence, alt, and so on,

12
00:00:39,000 --> 00:00:41,000
and return a proper set accordingly.

13
00:00:41,000 --> 00:00:45,000
For example, if the operator is asking for literal string x,

14
00:00:45,000 --> 00:00:48,000
we ask does the text start with x?

15
00:00:48,000 --> 00:00:53,000
If it does, then the remainder will be a singleton set, a set of just one element,

16
00:00:53,000 --> 00:00:58,000
which is the remainder of the text after we've broken off the length of text characters.

17
00:00:58,000 --> 00:01:01,000
If we matched a three-character sequence for x,

18
00:01:01,000 --> 00:01:03,000
we return the text without the first three characters.

19
00:01:03,000 --> 00:01:07,000
If x was 1 character, we return the text without the first character.

20
00:01:07,000 --> 00:01:10,000
Otherwise, we return the null set. There's no match.

21
00:01:10,000 --> 00:01:13,000
The alternative is particularly nice.

22
00:01:13,000 --> 00:01:17,000
It says if we have an alternative between x and y

23
00:01:17,000 --> 00:01:20,000
we just return the union of the those two match sets.

24
00:01:20,000 --> 00:01:25,000
This character, the or bar, means "union" in Python, the union of two sets.

25
00:01:25,000 --> 00:01:27,000
Sequence is a complicated one.

26
00:01:27,000 --> 00:01:31,000
It says if we're asked for a sequence of x and y,

27
00:01:31,000 --> 00:01:34,000
we first find a matching set for x.

28
00:01:34,000 --> 00:01:39,000
That's going to be a set of possible remainders, and we go through all of those.

29
00:01:39,000 --> 00:01:43,000
Then take the remainder of that text, which would be t1.

30
00:01:43,000 --> 00:01:47,000
Then match y against that remainder.

31
00:01:47,000 --> 00:01:51,000
For each of those alternatives, that's what we're going to return in this set.

32
00:01:51,000 --> 00:01:58,000
For example, if this is our pattern--seq(star(lit('a')) plus(lit('b')))--it looks like that,

33
00:01:58,000 --> 00:02:04,000
and we're matching against "aaab" then the x is the star(lit('a')),

34
00:02:04,000 --> 00:02:11,000
and y is the plus(lit('b')), and the matchset for x is this set here.

35
00:02:11,000 --> 00:02:16,000
We try to match y, the plus(lit('b')), against all of these match sets,

36
00:02:16,000 --> 00:02:19,000
and it'll fail to match against each of these three.

37
00:02:19,000 --> 00:02:26,000
It will match against this one, and so now we have a match that consumes the entire string.

38
00:02:26,000 --> 00:02:31,000
The result from the match of this sequence of x and y

39
00:02:31,000 --> 00:02:34,000
will be the set consisting of just the empty string,

40
00:02:34,000 --> 00:02:40,000
because we've matched off all the a's and one b, and there's no remainder left over.

41
00:02:40,000 --> 00:02:44,000
Note that there's a big difference between the outcome of saying

42
00:02:44,000 --> 00:02:47,000
here's a result consisting of one string, the empty string,

43
00:02:47,000 --> 00:02:50,000
versus the set that is the empty set.

44
00:02:50,000 --> 00:02:53,000
The empty set is a failed match,

45
00:02:53,000 --> 00:02:57,000
and the set consisting of the empty string is the successful match.

46
00:02:57,000 --> 00:03:01,000
Now let's see if you can fill in your code for these two missing cases here.

47
00:03:01,000 --> 00:03:05,000
Remember, you're going to be returning a set of possible remainders

48
00:03:05,000 --> 99:59:59,999
if the match is successful.
