1
00:00:00,000 --> 00:00:05,000
We can answer this question pretty quickly with the help of a little program.

2
00:00:05,000 --> 00:00:09,000
Like before I've got this make_link function, and I'm going to make an empty graph

3
00:00:09,000 --> 00:00:15,000
with 256 nodes which is going to be arranged a grid--a number nodes per row and column

4
00:00:15,000 --> 00:00:18,000
on a side here is the square root of n or 16.

5
00:00:18,000 --> 00:00:22,000
Then what we're going to do is we're going to run through all the pairs of nodes in the graph

6
00:00:22,000 --> 00:00:27,000
i, n, j, and for each one if it's not on the very edge, we're going to make a link--

7
00:00:27,000 --> 00:00:30,000
well, if it's not on the bottom edge, then we're going to make a link downward.

8
00:00:30,000 --> 00:00:34,000
If it's on the right edge, we're going to make a link to the right. That's going to build our gird.

9
00:00:34,000 --> 00:00:38,000
So, we print out the number of edges in this graph that we created and we get 480.

10
00:00:38,000 --> 00:00:44,000
We could do that kind of by reasoning as well, that just like in this grid example before

11
00:00:44,000 --> 00:00:49,000
the little chain that we have going across is the number of nodes in a column minus 1,

12
00:00:49,000 --> 00:00:51,000
and there are five of them because there are five rows.

13
00:00:51,000 --> 00:00:53,000
In this case there will be 16 of them.

14
00:00:53,000 --> 00:00:56,000
There will be 16 chains of length 15 across.

15
00:00:56,000 --> 00:00:58,000
The downward ones are going to be the same, so we'll just double that.

16
00:00:58,000 --> 00:01:00,000
We also get 480 that way.

17
00:01:00,000 --> 00:01:03,000
It'd be nice to be able to answer this question in a little bit more generality.

18
00:01:03,000 --> 00:01:06,000
How many edges do we have in a grid graph?

19
00:01:06,000 --> 00:01:10,000
We're assuming that there are n nodes and the nodes are arranged in a square.

20
00:01:10,000 --> 00:01:14,000
The picture of that looks like this where you have nodes arranged in a square.

21
00:01:14,000 --> 00:01:17,000
For this to make sense, we're assuming that n is a perfect square,

22
00:01:17,000 --> 00:01:21,000
so that we can actually arrange the nodes and form a square as so.

23
00:01:21,000 --> 00:01:25,000
There's √n nodes on each of the sides, and if we fill in the edges, these green edges,

24
00:01:25,000 --> 00:01:27,000
what's the total amount that we get?

25
00:01:27,000 --> 00:01:31,000
Well, the same basic idea as we used last time applies.

26
00:01:31,000 --> 00:01:38,000
That is, the number of edges that go across in a chain here is going to be √n - 1.

27
00:01:38,000 --> 00:01:40,000
That's going to be repeated for each of these rows.

28
00:01:40,000 --> 00:01:44,000
And we're going to get the same kind of analysis for the edges that are going down.

29
00:01:44,000 --> 00:01:51,000
So, what is that? That's 2n - 2√n.

30
00:01:51,000 --> 99:59:59,999
Does that give us the right answer when n is 256? Yes. Well, that's good.
