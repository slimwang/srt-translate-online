1
00:00:00,160 --> 00:00:03,719
A very different approach is to
give up on the goal of running

2
00:00:03,719 --> 00:00:05,960
unmodified operating systems.

3
00:00:05,960 --> 00:00:10,570
Instead, the primary goal is to
offer a virtualization solution that

4
00:00:10,570 --> 00:00:15,650
offers performance and avoids some of
the overheads that may be associated

5
00:00:15,650 --> 00:00:21,200
with any of the complexities that are
necessary to support unmodified guests.

6
00:00:21,200 --> 00:00:25,270
In contrast to full virtualization,
this is called paravirtualization.

7
00:00:25,270 --> 00:00:28,920
With paravirtualization,
the guest OS is modified so

8
00:00:28,920 --> 00:00:32,560
that it now knows that it's running
in a virtualized environment

9
00:00:32,560 --> 00:00:37,201
on top of a hypervisor as opposed to
on top of native physical resources.

10
00:00:38,280 --> 00:00:42,458
A paravirtualized guest OS will
not necessarily try to directly

11
00:00:42,458 --> 00:00:46,262
perform operations,
which it knows that they will fail.

12
00:00:46,262 --> 00:00:50,318
And instead, it will make explicit
calls to the hypervisor to

13
00:00:50,318 --> 00:00:52,741
request the desired behavior.

14
00:00:52,741 --> 00:00:55,702
Or specifically,
the desired hardware manipulations.

15
00:00:55,702 --> 00:00:59,460
These calls to the hypervisor
are called hypercalls.

16
00:00:59,460 --> 00:01:03,610
And they behave in a way that's
similar to the way system calls behave

17
00:01:03,610 --> 00:01:05,420
in an operating system.

18
00:01:05,420 --> 00:01:09,040
So the unprivileged guest
OS here that's modified

19
00:01:09,040 --> 00:01:14,470
will package all relevant information
about its context, its current state.

20
00:01:14,470 --> 00:01:17,140
And it will specify
the desired hypercall.

21
00:01:17,140 --> 00:01:19,210
And at that point,
it will issue the hypercall and

22
00:01:19,210 --> 00:01:21,870
that will trap to
the virtual machine monitor.

23
00:01:21,870 --> 00:01:24,100
When the hypervisor
completes the operation,

24
00:01:24,100 --> 00:01:28,540
control will be pass back to the virtual
machine, to the guest, and any data,

25
00:01:28,540 --> 00:01:31,250
if appropriate,
will be made available to it.

26
00:01:31,250 --> 00:01:35,201
This approach of paravirtualization
was originally adapted and

27
00:01:35,201 --> 00:01:37,435
popularized by the Xen hypervisor.

28
00:01:37,435 --> 00:01:40,570
This was a popular
virtualization solution and

29
00:01:40,570 --> 00:01:44,174
originally was an open source
hypervisor that started

30
00:01:44,174 --> 00:01:48,103
as a research project at
University of Cambridge in the UK.

31
00:01:48,103 --> 00:01:51,281
This was later commercialized
as XenSource and

32
00:01:51,281 --> 00:01:53,591
XenSource is now owned by Citrix.

33
00:01:53,591 --> 00:01:57,765
But there still remains a lot of
activity in the open source Xen project,

34
00:01:57,765 --> 00:02:00,830
including at our own
research group here.

35
00:02:00,830 --> 00:02:05,680
One thing to note, however, is that
the open source Xen version as, and

36
00:02:05,680 --> 00:02:09,840
the Citrix Xen version have diverged
perhaps substantially over time
