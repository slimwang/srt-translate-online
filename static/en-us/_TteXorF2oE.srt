1
00:00:00,000 --> 00:00:04,000
During lecture this week, we learned about context-free grammars and languages

2
00:00:04,000 --> 00:00:07,000
and about parsing them. But is there anything beyond that?

3
00:00:07,000 --> 00:00:09,000
Is there anything other than the context-free grammars

4
00:00:09,000 --> 00:00:11,000
and the regular languages that we've learned so far?

5
00:00:11,000 --> 00:00:14,000
Is there anything more powerful?

6
00:00:14,000 --> 00:00:16,000
That's an excellent question.

7
00:00:16,000 --> 00:00:21,000
It turns out that context-free grammars are not the end-all and be-all

8
00:00:21,000 --> 00:00:25,000
of interpreting languages like JavaScript or HTML.

9
00:00:25,000 --> 00:00:29,000
In fact, just as we saw that regular languages and regular expressions

10
00:00:29,000 --> 00:00:31,000
weren't powerful enough to do everything we needed--

11
00:00:31,000 --> 00:00:36,000
they couldn't handle balanced parentheses, so we couldn't use them for parsing--

12
00:00:36,000 --> 00:00:39,000
it's going to turn out that context-free languages and context-free grammars

13
00:00:39,000 --> 00:00:41,000
will only take us so far,

14
00:00:41,000 --> 00:00:45,000
and we're going to use additional techniques like interpretation

15
00:00:45,000 --> 00:00:50,000
or keeping track of local variables in order to find other things out.

16
00:00:50,000 --> 00:00:54,000
Here's a great example of what the "free" in context-free actually means.

17
00:00:54,000 --> 00:00:57,000
You might think, "Boy, is there a context-expensive grammar out there?"

18
00:00:57,000 --> 00:00:59,000
"What's the opposite of free?"

19
00:00:59,000 --> 00:01:04,000
It turns out in this domain the opposite of free is context-sensitive,

20
00:01:04,000 --> 00:01:08,000
and it's going to turn out that the meaning of a program depends on its context.

21
00:01:08,000 --> 00:01:12,000
For example, suppose I ask you what's X + 2?

22
00:01:12,000 --> 00:01:17,000
The meaning of that program depends a lot on the local value of X.

23
00:01:17,000 --> 00:01:20,000
So we're going to need something more than just parsing,

24
00:01:20,000 --> 00:01:24,000
more than context-free grammars, to reason about programs

25
00:01:24,000 --> 00:01:26,000
that include substrings like X + 2.

26
00:01:26,000 --> 00:01:32,000
If right above it I've written X = 4, then X = 4, X + 2 yields 6.

27
00:01:32,000 --> 00:01:37,000
But if right above it I've written X = 0, then we'd get a different answer.

28
00:01:37,000 --> 00:01:40,000
That line above it is the context.

29
00:01:40,000 --> 00:01:43,000
Our context-free grammar doesn't care about the line above it.

30
00:01:43,000 --> 00:01:48,000
You can write down X + 2 even if you've never assigned to X before.

31
00:01:48,000 --> 00:01:50,000
When we go to write our interpreter for JavaScript

32
00:01:50,000 --> 00:01:54,000
and our ability to render web pages by interpreting HTML,

33
00:01:54,000 --> 00:01:59,000
we're going to need to keep track of the context, the values, the variables,

34
00:01:59,000 --> 00:02:02,000
what has gone before, our history.

35
00:02:02,000 --> 00:02:06,000
All of that is going to matter for figuring out the true interpretations of programs.

36
00:02:06,000 --> 00:02:09,000
So again, just as regular expressions weren't powerful enough

37
00:02:09,000 --> 00:02:11,000
and we needed context-free grammars for parsing,

38
00:02:11,000 --> 00:02:16,000
we're going to need something else, context sensitivity, to make our final web server.

39
00:02:16,000 --> 99:59:59,999
And we're going to get to that in around Unit 5 in this class, so stay tuned.
