1
00:00:00,260 --> 00:00:03,699
Here are the answers that I got. The length method returns the number of

2
00:00:03,699 --> 00:00:08,644
individual characters in the string. There were 7. The substring method

3
00:00:08,644 --> 00:00:15,284
extracts a substring that sits inside the bigger string. In our case, it

4
00:00:15,284 --> 00:00:19,925
extracted this string. Whenever you want to extract substrings, you have to

5
00:00:19,925 --> 00:00:24,534
understand how the positions in a string are numbered. In Java the initial

6
00:00:24,534 --> 00:00:29,418
position is 0, that may sound strange but it's actually pretty useful, and then

7
00:00:29,418 --> 00:00:35,568
it goes from there. The string has length 7 and the position's in it are 0, 1,

8
00:00:35,568 --> 00:00:41,664
2, 3, 4, 5, 6. That's 7 position's. Now in the substring here you see this 3

9
00:00:41,664 --> 00:00:47,113
here. That is the position of the first character that we want to include in

10
00:00:47,113 --> 00:00:52,873
the substring. The seven here is the first position that we don't want to have

11
00:00:52,873 --> 00:00:57,632
anymore. We don't want position seven. In fact, there is no position seven. We

12
00:00:57,632 --> 00:01:02,083
want the ones from three to six. That sounds a bit odd to most people when they

13
00:01:02,083 --> 00:01:06,680
see it the first time. But there is an advantage. When you subtract these two

14
00:01:06,680 --> 00:01:10,280
numbers, 7 minus 3, that's 4, and that's the length of the substring that

15
00:01:10,280 --> 00:01:15,790
you're extracting. The next method here, the indexOf method finds the position

16
00:01:15,790 --> 00:01:20,004
of a given character. So, over here I want to know where does the C occur for

17
00:01:20,004 --> 00:01:25,126
the first time. And it will go through and say, that's at position three. And

18
00:01:25,126 --> 00:01:29,760
finally, you already seen this plus operator in lesson two. It takes two

19
00:01:29,760 --> 00:01:35,220
strings and glues them together or as we like to say in programming is, it

20
00:01:35,220 --> 00:01:41,675
concatenates them. So, here is the concatenation of Hello and Udacity, notice

21
00:01:41,675 --> 00:01:45,644
there's no space in between because there was no space in either this or that

22
00:01:45,644 --> 00:01:51,713
string. If you wanted a space, you'd have to add a space. Strings are really

23
00:01:51,713 --> 00:01:56,074
useful when you work with text. Sarah has a couple of nifty exercises prepared

24
00:01:56,074 --> 00:02:01,454
for you when you get to work with a rather long text and take it apart. And put

25
00:02:01,454 --> 00:02:05,065
pieces back together by using some of the string methods that you've seen here.

26
00:02:05,065 --> 00:02:06,860
Enjoy.
