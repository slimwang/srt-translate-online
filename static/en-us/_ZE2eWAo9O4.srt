1
00:00:00,000 --> 00:00:02,000
Let's take a look at my solution.

2
00:00:02,000 --> 00:00:06,450
So the first thing I do is assert that the length of the graph is equal to the length of the cover

3
00:00:06,450 --> 00:00:12,720
since we need the same number of nodes and vertices in both the cover and the graph.

4
00:00:12,720 --> 00:00:16,390
We set n equal to length of the graph then.

5
00:00:16,390 --> 00:00:19,910
So we go through every element in the adjacency matrix one by one

6
00:00:19,910 --> 00:00:26,020
and if the element is at 1, that is there's an edge between those two vertices,

7
00:00:26,020 --> 00:00:32,360
and either the first vertex which I think is not equal to 1, that is it is not part of the vertex cover

8
00:00:32,360 --> 00:00:35,990
or the second vertex it isn't, then we return false.

9
00:00:35,990 --> 00:00:41,410
And we check every single one of those and if we fall through all of those, then we go ahead

10
00:00:41,410 --> 00:00:44,270
and return true and then it is a valid vertex cover.

11
00:00:44,270 --> 00:00:48,080
Now for the naive vertex cover algorithm, what we do is first

12
00:00:48,080 --> 00:00:51,270
for every assignment and a product of 0's or 1's

13
00:00:51,270 --> 00:00:55,780
that is of length n, that's what this product statement does.

14
00:00:55,780 --> 00:00:59,600
And if the validity check is true for that assignment and that input graph,

15
00:00:59,600 --> 00:01:05,870
then we set the size to be the sum of the number of 1's in the assignments.

16
00:01:05,870 --> 00:01:09,000
So we add up all the elements in that list, all the 0's and 1's.

17
00:01:09,000 --> 00:01:14,290
Now if the minimum vertex cover is greater than the size, then we set that to be the size.

18
00:01:14,290 --> 00:01:17,270
We update it, otherwise, we leave it alone.

19
00:01:17,270 --> 00:01:19,070
Once we've look through every possible assignment

20
00:01:19,070 --> 00:01:22,740
and remember there are a lot of possible assignments,

21
00:01:22,740 --> 00:01:25,880
then we return the minimum vertex cover.
