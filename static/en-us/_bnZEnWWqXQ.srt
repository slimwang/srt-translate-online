1
00:00:00,160 --> 00:00:02,480
So we have these three
different situations.

2
00:00:02,480 --> 00:00:05,590
For the first one find
the ten oldest gorillas.

3
00:00:05,590 --> 00:00:10,520
Well, we're going to need, where,
in order to select out only gorillas.

4
00:00:10,520 --> 00:00:13,670
We're going to need to find the oldest,
so

5
00:00:13,670 --> 00:00:16,290
means we need to put them in
order by their birthdates.

6
00:00:17,340 --> 00:00:21,140
And we want to find the top ten so
that's going to be a limit.

7
00:00:21,140 --> 00:00:25,230
For the second one, list all the animals
in alphabetical order, ten per page.

8
00:00:25,230 --> 00:00:28,640
We're listing all of the animals,
not some of them.

9
00:00:28,640 --> 00:00:31,780
So we,
don't actually need where on this query.

10
00:00:31,780 --> 00:00:36,020
We're listing them in alphabetical order
though, so we're going to need order by.

11
00:00:36,020 --> 00:00:39,970
Since we want to get them ten per page,
we're going to need limit and

12
00:00:39,970 --> 00:00:44,000
offset to put them into separate pages.

13
00:00:44,000 --> 00:00:47,880
For the third situation, find out
which one species we have the most of.

14
00:00:47,880 --> 00:00:49,620
First we're going to need group by,

15
00:00:49,620 --> 00:00:53,480
to bin all the animals by species
using account aggregation.

16
00:00:53,480 --> 00:00:55,440
Then we're going to need order by,

17
00:00:55,440 --> 00:01:00,450
to sort by the result of that count,
and limit to get just the top one.

18
00:01:00,450 --> 00:01:04,269
There's actually another way to do this
using a different SQL feature called

19
00:01:04,269 --> 00:01:07,640
subselects, but with what you've seen so
far, this is how to do it.
