1
00:00:01,170 --> 00:00:04,070
So our goal is to write code now, that computes

2
00:00:04,070 --> 00:00:06,998
the formula that we worked out earlier. Then we want to compute

3
00:00:06,998 --> 00:00:10,250
the rank, for each page. The thing that we're going to do,

4
00:00:10,250 --> 00:00:15,920
instead of using this recursive definition. We're going to write a loop,

5
00:00:15,920 --> 00:00:17,950
that goes through the time steps, and we're going to figure out

6
00:00:17,950 --> 00:00:20,590
how many time steps we want. The more time steps, the

7
00:00:20,590 --> 00:00:23,430
more accurate rankings we'll have, but the longer it will take.

8
00:00:23,430 --> 00:00:26,180
So we'll just pick a value for the maximum number of

9
00:00:26,180 --> 00:00:28,300
time steps, and we'll make our loops go through

10
00:00:28,300 --> 00:00:32,310
those steps, computing these equations. So let's work out the

11
00:00:32,310 --> 00:00:34,605
code to do that. So now that we've got the

12
00:00:34,605 --> 00:00:37,390
graph. All that's left to do is figure out how

13
00:00:37,390 --> 00:00:39,830
to use it, to compute the page ranks. So to

14
00:00:39,830 --> 00:00:43,310
do that, we'll make a procedure called compute_ranks. It takes

15
00:00:43,310 --> 00:00:47,410
as input, a graph that gives the link structure. So,

16
00:00:47,410 --> 00:00:51,230
as an example we have our graph that has the

17
00:00:51,230 --> 00:00:56,920
URL's, and each URL, followed by the link of pages that it links to. And this is

18
00:00:56,920 --> 00:01:00,930
the graph that was produced by our crawler, and

19
00:01:00,930 --> 00:01:03,940
crawLweb produced as outputs, a graph as well as

20
00:01:03,940 --> 00:01:06,390
an index. We're going to use the graph as

21
00:01:06,390 --> 00:01:09,664
the input to compute_ranks. So the output from compute_ranks,

22
00:01:09,664 --> 00:01:12,990
will be a dictionary, giving for each URL, Q

23
00:01:12,990 --> 00:01:17,420
rank, the ranking. That we compute using our formula.

24
00:01:17,420 --> 00:01:20,360
And, the higher the rank, the better. And, what

25
00:01:20,360 --> 00:01:22,520
we're going to do once we have those ranks, and this

26
00:01:22,520 --> 00:01:24,250
last part is going to be left as a homework

27
00:01:24,250 --> 00:01:27,900
assignment for you, we're going to instead of having just look

28
00:01:27,900 --> 00:01:32,012
up, we're going to have lookup_best. And lookup_best will take

29
00:01:32,012 --> 00:01:35,050
three inputs. It will take the keyword we're looking for.

30
00:01:35,050 --> 00:01:38,640
It will also take the index that came from the

31
00:01:38,640 --> 00:01:42,550
crawl, and it will also take the ranks, and from

32
00:01:42,550 --> 00:01:45,000
those three inputs, the index will give us all

33
00:01:45,000 --> 00:01:48,070
the pages that contain the keyword, and then what lookup_best

34
00:01:48,070 --> 00:01:50,160
will do is, use the ranks to find the

35
00:01:50,160 --> 00:01:53,700
highest ranked page. And give that as the output. So

36
00:01:53,700 --> 00:01:55,810
once we've done that, you'll have a complete search

37
00:01:55,810 --> 00:02:00,020
engine. You'll have a crawler that starts from a seed,

38
00:02:00,020 --> 00:02:03,610
finds pages, produces an index, produces a graph. That

39
00:02:03,610 --> 00:02:07,580
graph is the input to compute_ranks, compute_ranks uses our page

40
00:02:07,580 --> 00:02:09,860
ranking algorithm to figure out the pages that

41
00:02:09,860 --> 00:02:13,420
are most popular, and then lookup_best takes the graph

42
00:02:13,420 --> 00:02:16,570
as input. The index as input, and the keyword,

43
00:02:16,570 --> 00:02:19,330
finds the pages that contain that keyword, and identifies

44
00:02:19,330 --> 00:02:21,840
the one that's best, using the ranks. So that's

45
00:02:21,840 --> 00:02:24,940
what you'll have after the homework of this unit.

46
00:02:24,940 --> 00:02:28,140
We're going to finish compute_ranks now, and leave it up

47
00:02:28,140 --> 00:02:30,810
to you to define lookup_best as a homework question.
