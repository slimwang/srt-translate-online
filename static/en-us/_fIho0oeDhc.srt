1
00:00:00,170 --> 00:00:02,170
So, we have seen that the duplication of

2
00:00:02,170 --> 00:00:04,660
all the register values that have all, ever been

3
00:00:04,660 --> 00:00:07,840
produced is a problem. So we will located registry

4
00:00:07,840 --> 00:00:11,450
naming, which is another scheme that can provide relief

5
00:00:11,450 --> 00:00:13,430
from false dependencies, but in a way that

6
00:00:13,430 --> 00:00:17,230
actually is more manageable. How does the registry naming

7
00:00:17,230 --> 00:00:21,850
work? So, register renaming separates the concept of architectural

8
00:00:21,850 --> 00:00:25,210
registers, which are the registers that the programmers and

9
00:00:25,210 --> 00:00:27,130
the compilers use. So, this is when you write

10
00:00:27,130 --> 00:00:28,420
an instruction like add r1, r2, r3, the r1,

11
00:00:28,420 --> 00:00:33,260
r2, and r3 that you're referring to are the

12
00:00:33,260 --> 00:00:38,170
architectural registers. In register renaming, there is also. A concept

13
00:00:38,170 --> 00:00:43,030
of physical registers, which is all the places that

14
00:00:43,030 --> 00:00:45,970
we can actually put a value in the processor. So,

15
00:00:45,970 --> 00:00:47,910
there is of course a place for, kind of,

16
00:00:47,910 --> 00:00:50,340
the latest value of R 1, for example, but there

17
00:00:50,340 --> 00:00:52,720
could be additional places where we could potentially store

18
00:00:52,720 --> 00:00:55,200
values that should be going to R 1, and then

19
00:00:55,200 --> 00:00:58,570
what we do is. As the processor reads instructions and

20
00:00:58,570 --> 00:01:01,390
figures out which registers they're using, and remember the program

21
00:01:01,390 --> 00:01:05,349
is referring to architectural registers. As it's fetching instructions, and

22
00:01:05,349 --> 00:01:08,870
decoding them, it also does register renaming which pretty much

23
00:01:08,870 --> 00:01:11,530
means that it re-writes the program to use the physical

24
00:01:11,530 --> 00:01:16,000
registers. So, basically if it sees Add R1, R2, R3.

25
00:01:16,000 --> 00:01:24,130
It is going to rename that into our ad or something else and so on, in order to

26
00:01:24,130 --> 00:01:26,340
basically refer to the places where it has actually

27
00:01:26,340 --> 00:01:29,180
put those values, and how does it know where

28
00:01:29,180 --> 00:01:33,040
the values are? Well, it uses a table called

29
00:01:33,040 --> 00:01:37,170
the register allocation table or. RAT, and you should

30
00:01:37,170 --> 00:01:39,580
remember this because we will be very frequently referring

31
00:01:39,580 --> 00:01:42,270
to the RAT because it's used very very often.

32
00:01:42,270 --> 00:01:47,050
What the RAT is, is a table that says which physical registers has the

33
00:01:47,050 --> 00:01:50,100
value for which architecture register. So, for

34
00:01:50,100 --> 00:01:52,090
each of the architecture registers, there will

35
00:01:52,090 --> 00:01:55,950
be an entry in this table and it will say. What is the current

36
00:01:55,950 --> 00:01:59,170
location in the physical registers, where the

37
00:01:59,170 --> 00:02:02,200
value for that architecture registers can be found?
