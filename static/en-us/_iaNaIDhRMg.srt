1
00:00:00,680 --> 00:00:02,750
We already did one input
parameter together.

2
00:00:02,750 --> 00:00:05,689
This was the code for the calculatePrice
method that was already included in

3
00:00:05,689 --> 00:00:07,110
the instructor notes.

4
00:00:07,110 --> 00:00:09,760
Now let's do the case of
two input parameters.

5
00:00:09,760 --> 00:00:14,450
In the submitOrder method, we want to
call calculatePrice (quantity, 10).

6
00:00:14,450 --> 00:00:18,580
Where 10 represents
$10 per cup of coffee.

7
00:00:18,580 --> 00:00:20,900
So let's first make this change.

8
00:00:20,900 --> 00:00:26,214
In the submitOrder method I'm going
to call calculatePrice(quantity, 10).

9
00:00:26,214 --> 00:00:29,610
I'm passing in two
arguments to this method.

10
00:00:29,610 --> 00:00:32,950
There's an error because it doesn't
match the method signature here.

11
00:00:32,950 --> 00:00:35,470
And I'm about to update that.

12
00:00:35,470 --> 00:00:38,580
Inside the parentheses
I'm going to add a comma.

13
00:00:38,580 --> 00:00:41,520
And then type in int price

14
00:00:41,520 --> 00:00:47,040
because we're passing in price as
the second input and that's an integer.

15
00:00:47,040 --> 00:00:50,190
Immediately it says that
there's an error because

16
00:00:50,190 --> 00:00:54,140
it doesn't match the method signature
here which only has one input parameter.

17
00:00:54,140 --> 00:00:57,200
I'm going to change it so
that it has a second input parameter.

18
00:00:57,200 --> 00:00:58,420
So inside this opening and

19
00:00:58,420 --> 00:01:01,070
closing parenthesis,
I'm going to add a second parameter.

20
00:01:02,280 --> 00:01:05,630
Since this is the price per cup
of coffee, I'm going to call it

21
00:01:05,630 --> 00:01:10,030
price per cup, and it's a number, so I'm
going to say that the data type is int.

22
00:01:11,050 --> 00:01:13,420
The name of the parameter type
can be anything you want.

23
00:01:13,420 --> 00:01:16,850
It should be descriptive to
the information that it's holding.

24
00:01:16,850 --> 00:01:20,530
Whereas the data type needs to
be a specific java data type.

25
00:01:20,530 --> 00:01:24,090
So int string and
other ones that we haven't learned yet.

26
00:01:24,090 --> 00:01:29,670
I also updated the java doc to
describe this second input parameter.

27
00:01:29,670 --> 00:01:33,070
When I look inside this method,
we're taking quantity and

28
00:01:33,070 --> 00:01:36,630
multiplying it by 5 for
$5 for a cup of coffee.

29
00:01:36,630 --> 00:01:40,130
But now the price per cup
has changed to a variable.

30
00:01:40,130 --> 00:01:43,960
So let's use price per cup instead
of hard coding to value 5.

31
00:01:43,960 --> 00:01:47,340
Now the total price of the order
is going to be quantity

32
00:01:47,340 --> 00:01:48,270
times price per cup.

33
00:01:48,270 --> 00:01:51,500
If you think back to the template
analogy that I was talking about

34
00:01:51,500 --> 00:01:55,350
earlier, now quantity and
price per cup are swappable for

35
00:01:55,350 --> 00:01:57,699
different values because
their input parameters.

36
00:01:58,940 --> 00:02:01,700
You could call calculate price
with a different quantity and

37
00:02:01,700 --> 00:02:04,860
a different price per cup and
this computation would still work.

38
00:02:06,030 --> 00:02:08,840
Now let's do the case of
zero input parameters.

39
00:02:08,840 --> 00:02:10,190
In the submit order method,

40
00:02:10,190 --> 00:02:13,110
we should call calculate
price with empty parenthesis.

41
00:02:14,310 --> 00:02:17,200
In the submit order method,
when I call calculate price,

42
00:02:17,200 --> 00:02:18,619
I'm going to remove the arguments.

43
00:02:19,620 --> 00:02:21,700
Now we don't pass any
inputs into this method.

44
00:02:22,790 --> 00:02:25,590
There's a red underline immediately
because there's a mismatch with

45
00:02:25,590 --> 00:02:28,290
the methods signature, so
I'm going to go ahead and

46
00:02:28,290 --> 00:02:29,900
erase all these input parameters.

47
00:02:31,110 --> 00:02:34,380
This is also complaining about an error
because these parameters don't exist so

48
00:02:34,380 --> 00:02:35,820
I can go ahead and delete this.

49
00:02:37,330 --> 00:02:41,460
Now we get an error saying that it
can't resolve the symbol price per cup.

50
00:02:41,460 --> 00:02:44,720
It's no longer an input variable,
so we need to switch back to

51
00:02:44,720 --> 00:02:49,060
the hard coded price value which is
$5 or you could pick any other price.

52
00:02:50,070 --> 00:02:53,230
The computer doesn't complain about
quantity because it's actually

53
00:02:53,230 --> 00:02:54,570
a global variable, and

54
00:02:54,570 --> 00:02:58,790
you can reference this quantity variable
from any method in the main activity.

55
00:02:58,790 --> 00:03:00,470
Sorry.
I should have picked a name other than

56
00:03:00,470 --> 00:03:02,360
quantity for the input parameter.

57
00:03:02,360 --> 00:03:05,830
But you get the idea,
without any input parameters,

58
00:03:05,830 --> 00:03:08,120
you could only refer
to global variables.

59
00:03:08,120 --> 00:03:11,680
You can use hard-coded values or
if you create local variables here,

60
00:03:11,680 --> 00:03:12,630
you can refer to those.
