1
00:00:00,000 --> 00:00:04,000
Now there's only one bit left--this generate sequence. Let's talk about that.

2
00:00:04,000 --> 00:00:11,000
Now sequence in this formulation is a function that takes x and y, two patterns,

3
00:00:11,000 --> 00:00:17,000
and what it returns is a function, and that function takes a list of numbers

4
00:00:17,000 --> 00:00:20,000
and returns a set of text that match.

5
00:00:20,000 --> 00:00:23,000
So sequence is delaying the calculation.

6
00:00:23,000 --> 00:00:27,000
It's computing a function which can do the calculation later on.

7
00:00:27,000 --> 00:00:30,000
Genseq does the calculation immediately.

8
00:00:30,000 --> 00:00:33,000
It takes x and y and a set of numbers,

9
00:00:33,000 --> 00:00:37,000
and it immediately calculates the set of possible text.

10
00:00:37,000 --> 00:00:43,000
Now the question is what do we know about genseq in terms of the patterns x and y

11
00:00:43,000 --> 00:00:46,000
and the set of possible numbers.

12
00:00:46,000 --> 00:00:51,000
We know at some point we're going to have to call the pattern x with some set of numbers.

13
00:00:51,000 --> 00:00:53,000
We're not yet quite sure what.

14
00:00:53,000 --> 00:00:56,000
That's going to return a list of possible text.

15
00:00:56,000 --> 00:01:00,000
Then we're going to have to call y with some other set of numbers.

16
00:01:00,000 --> 00:01:04,000
Then we're going to have to concatenate them together and see if they make sense,

17
00:01:04,000 --> 00:01:11,000
if the concatenation of some x and some y, if that length is within this allowable set.

18
00:01:11,000 --> 00:01:15,000
Now, what do we know about what these Ns should be

19
00:01:15,000 --> 00:01:20,000
in terms of this set of possible numbers here regardless of what this set is.

20
00:01:20,000 --> 00:01:29,000
This could be a dense set, so we could have Ns equals 0, 1, 2, all the way up to 10 or something.

21
00:01:29,000 --> 00:01:31,000
Or it could be a sparse set.

22
00:01:31,000 --> 00:01:33,000
It could be, say, only the number 10.

23
00:01:33,000 --> 00:01:41,000
But either way, the restriction on x and y is such that they have to add up to no more than 10.

24
00:01:41,000 --> 00:01:43,000
But x could be anything.

25
00:01:43,000 --> 00:01:47,000
If the list of possible numbers that we want to add up to is only 10,

26
00:01:47,000 --> 00:01:50,000
that doesn't constrain x at all other than to be less than 10.

27
00:01:50,000 --> 00:01:56,000
This N should be everything up to the maximum of N sub s.

28
00:01:56,000 --> 00:01:58,000
Then what should y be?

29
00:01:58,000 --> 00:02:01,000
Well, we have two choices.

30
00:02:01,000 --> 00:02:05,000
One, we could for each x that comes back we could generate the y's.

31
00:02:05,000 --> 00:02:09,000
Or we could generate the y's all at once and then try to combine them together

32
00:02:09,000 --> 00:02:12,000
and see if they match up. I think that's actually easier.

33
00:02:12,000 --> 00:02:17,000
So for the y's also, they can be any size up to the maximum.

34
00:02:17,000 --> 00:02:21,000
Then we take the two together, add up the x match and the y match

35
00:02:21,000 --> 00:02:25,000
and see if that length is within N.

36
00:02:25,000 --> 00:02:28,000
In this example, if Ns is equal to 10,

37
00:02:28,000 --> 00:02:35,000
here we want to have the Ns be everything from 0 up to 10 inclusive in both cases,

38
00:02:35,000 --> 00:02:43,000
and we get back some results like, say, a, abb, acde, and so on,

39
00:02:43,000 --> 00:02:48,000
and some other result over here--ab, bcd.

40
00:02:48,000 --> 00:02:51,000
Then for each of them we add them up,

41
00:02:51,000 --> 00:02:57,000
and if we say abb plus ab and check to see if that's in Ns.

42
00:02:57,000 --> 00:02:59,000
If it is, we keep it.

43
00:02:59,000 --> 00:03:03,000
If it's not, we don't keep it.

44
00:03:03,000 --> 00:03:06,000
Here is candidate solution for genseq.

45
00:03:06,000 --> 00:03:10,000
We take x, y, and a set of numbers, and then we define Ns

46
00:03:10,000 --> 00:03:15,000
as being everything up to the largest number, including the largest number.

47
00:03:15,000 --> 00:03:19,000
We have to add 1 to the maximum number in order to get a range

48
00:03:19,000 --> 00:03:22,000
going from 0 up to and including the largest number.

49
00:03:22,000 --> 00:03:26,000
Now that we know the possible values of the numbers that we're looking for

50
00:03:26,000 --> 00:03:28,000
for the sizes of the two components-the x and the y components--

51
00:03:28,000 --> 00:03:32,000
then we can say m1 is all the possible matches for x,

52
00:03:32,000 --> 00:03:35,000
m2 is all the possible matches for y.

53
00:03:35,000 --> 00:03:40,000
If the length of m1 plus m2 is in the original set of numbers that we're looking for,

54
00:03:40,000 --> 00:03:43,000
then return m1 plus m2.

55
00:03:43,000 --> 00:03:45,000
This seems reasonable.

56
00:03:45,000 --> 00:03:49,000
It looks like it's doing about what we're looking for to generate

57
00:03:49,000 --> 00:03:52,000
all sequences of x and y concatenated together.

58
00:03:52,000 --> 00:03:55,000
But I want you to think about it and say, have we really gotten this right?

59
00:03:55,000 --> 00:03:59,000
The choices are is this function correct for all inputs?

60
00:03:59,000 --> 00:04:01,000
Or is in incorrect for some?

61
00:04:01,000 --> 00:04:03,000
Does it return incorrect results?

62
00:04:03,000 --> 00:04:08,000
Or is it correct when it returns, but doesn't doesn't always return?

63
00:04:08,000 --> 00:04:10,000
Think about that.

64
00:04:10,000 --> 00:04:14,000
Think about is there any result that looks like it's incorrect that's being formed.

65
00:04:14,000 --> 00:04:16,000
Think about does it infinite loop or not.

66
00:04:16,000 --> 00:04:22,000
Think about base cases on recursion and saying is there any case where it looks like it might not return.

67
00:04:22,000 --> 00:04:26,000
This is a tricky question, so I want you to try it,

68
00:04:26,000 --> 99:59:59,999
but it may be difficult to get this one right.
