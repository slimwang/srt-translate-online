1
00:00:00,950 --> 00:00:03,510
Before you can run any
sign in applications,

2
00:00:03,510 --> 00:00:07,370
you need to get a key that gives access
to the Google sign in Android API.

3
00:00:07,370 --> 00:00:11,760
This is pretty easy to do, but
it does involve taking a few steps

4
00:00:11,760 --> 00:00:14,880
outside of Android Studio for
the time being.

5
00:00:14,880 --> 00:00:19,130
First, you need to get the SHA1
fingerprint for your app.

6
00:00:19,130 --> 00:00:22,830
Google uses this as a way to
identify your application.

7
00:00:22,830 --> 00:00:24,940
So it can give your app a good service.

8
00:00:24,940 --> 00:00:28,800
This fingerprint is a machine-readable
attribute of a certificate,

9
00:00:28,800 --> 00:00:31,850
a way of determining that
the certificate is real.

10
00:00:31,850 --> 00:00:33,260
And just like the real world,

11
00:00:33,260 --> 00:00:37,720
a certificate is a sign of an authority,
where you can call upon a third party

12
00:00:37,720 --> 00:00:40,780
to certify that you
are who you claim you are.

13
00:00:40,780 --> 00:00:42,880
Now we're just going to use
a debug certificate for

14
00:00:42,880 --> 00:00:45,390
this, as it's easier for
learning purposes.

15
00:00:45,390 --> 00:00:48,950
A debug certificate is
issued by you to yourself.

16
00:00:48,950 --> 00:00:51,630
And later, when you want to release
your app on the Play Store,

17
00:00:51,630 --> 00:00:56,030
you'll need a publication certificate,
which is going to be verified by Google.

18
00:00:56,030 --> 00:00:56,570
To do that,

19
00:00:56,570 --> 00:01:00,420
you can follow the instructions on
the developer website linked below.

20
00:01:00,420 --> 00:01:05,340
First, to get the debug certificate, you
have to locate your key store file for

21
00:01:05,340 --> 00:01:07,240
debugging using your terminal.

22
00:01:07,240 --> 00:01:11,090
It's called, imaginatively enough,
debug.keystore.

23
00:01:11,090 --> 00:01:15,190
One a Mac or Linux,
it's that squiggle slash dot android.

24
00:01:15,190 --> 00:01:21,700
So if I type cd ~/.android,
I know it's in this directory.

25
00:01:21,700 --> 00:01:27,250
If you're using Windows,
it's at C:/users/yourusername/.android.

26
00:01:27,250 --> 00:01:31,310
In both cases the .android
folder is hidden by default.

27
00:01:31,310 --> 00:01:34,019
So you may need to set your
system up to show hidden files.

28
00:01:35,050 --> 00:01:36,790
So now once I'm in this directory,

29
00:01:36,790 --> 00:01:40,510
the next thing I'll do is to
get the SHA1 fingerprint.

30
00:01:40,510 --> 00:01:43,650
And I do that with this command,
the keytool command.

31
00:01:43,650 --> 00:01:48,530
Now with the keytool command, I tell it
that the keystore is at ~/.android and

32
00:01:48,530 --> 00:01:51,490
in this directory is a debug.keystore.

33
00:01:51,490 --> 00:01:54,012
I then just give my
-storepass android and

34
00:01:54,012 --> 00:01:58,084
my -keypass android as dummy ones
to generate a debug certificate.

35
00:01:58,084 --> 00:02:02,799
So if I press Enter on this line, we'll
now see that I have my alias, which is

36
00:02:02,799 --> 00:02:07,736
androiddebugkey, and I have a number
of different things for my certificate,

37
00:02:07,736 --> 00:02:11,959
including the fingerprints in MD5,
in SHA1, and in SHA256.

38
00:02:11,959 --> 00:02:15,210
The SHA1 is the one that
you're going to be using.

39
00:02:15,210 --> 00:02:19,310
So keep this window open, and make sure
you understand that this is the one that

40
00:02:19,310 --> 00:02:22,580
you're going to use, and that you
can copy all of this out of here.

41
00:02:22,580 --> 00:02:25,340
Next, you're going to go to
the Google developer's console, and

42
00:02:25,340 --> 00:02:28,070
in the Google developer's console,
you'll be using this.
