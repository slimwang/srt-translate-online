1
00:00:00,240 --> 00:00:02,400
Let's look at a different example. So for the sake

2
00:00:02,400 --> 00:00:05,440
of illustration, I've increased the cost between x and z

3
00:00:05,440 --> 00:00:08,070
to 50, and now everyone starts with a different set

4
00:00:08,070 --> 00:00:12,170
of initial distance vectors. Now eventually, after running the distance vector

5
00:00:12,170 --> 00:00:15,740
protocol, we would see the tables converge as such. Let's

6
00:00:15,740 --> 00:00:18,110
suppose that the cost of the link between x and y

7
00:00:18,110 --> 00:00:21,430
suddenly increased from 1 to 60. Well now in this

8
00:00:21,430 --> 00:00:25,730
case, y would need to update Its view of the shortest

9
00:00:25,730 --> 00:00:29,605
path between Y and X. Now its no longer

10
00:00:29,605 --> 00:00:32,759
one, but its not 60 either. To see why let's

11
00:00:32,759 --> 00:00:34,860
go back to our Bellman-Ford equation. We can see that

12
00:00:34,860 --> 00:00:37,810
Y thinks it can get to Z with a cost

13
00:00:37,810 --> 00:00:42,120
of two, and that Z can get to X with a cost of three. So in fact it's going to

14
00:00:42,120 --> 00:00:46,600
update this entry from one to five. Then it will

15
00:00:46,600 --> 00:00:50,820
tell it's neighbor z it's new distance vector. In other

16
00:00:50,820 --> 00:00:54,070
words, that now its distance to x is no

17
00:00:54,070 --> 00:00:57,830
longer one but five. At this point, z needs

18
00:00:57,830 --> 00:01:01,300
to re-compute it's shortest path to x. Now, it

19
00:01:01,300 --> 00:01:03,690
knows that it can get to y with a cost

20
00:01:03,690 --> 00:01:08,727
of two but it thinks still that y can get to x with a cost of five. Therefore,

21
00:01:08,727 --> 00:01:11,510
this entry is no longer three but seven. And

22
00:01:11,510 --> 00:01:15,600
now z sends it's new distance vector back to y.

23
00:01:15,600 --> 00:01:18,250
Y then updates it's distance vector for z and

24
00:01:18,250 --> 00:01:22,210
this process continues. So then, y thinks it is

25
00:01:22,210 --> 00:01:27,211
now nine units away from x. So z has to do this all over again and now z thinks

26
00:01:27,211 --> 00:01:29,557
that its shortest path is two plus nine or

27
00:01:29,557 --> 00:01:33,250
11. And this process repeats, of course, until z

28
00:01:33,250 --> 00:01:36,770
finally realizes that it has a shorter path of

29
00:01:36,770 --> 00:01:41,290
50 directly through x. After this counting up process exceeds

30
00:01:41,290 --> 00:01:43,770
the value of 50. This problem is called

31
00:01:43,770 --> 00:01:47,010
the count to infinity problem, and the solution

32
00:01:47,010 --> 00:01:52,780
is called poison reverse. The idea here is that if y must route through z to

33
00:01:52,780 --> 00:01:59,630
get to x in its table, as it did here, then y advertizes an infinite cost

34
00:01:59,630 --> 00:02:03,374
for the destination x to z. So instead

35
00:02:03,374 --> 00:02:06,870
of sending five, zero, two, y would send infinity,

36
00:02:06,870 --> 00:02:11,310
zero, two. This would thus prevent z from routing back through y and

37
00:02:11,310 --> 00:02:16,651
Immediately, it would choose, the shortest path to x, of path cost 50.
