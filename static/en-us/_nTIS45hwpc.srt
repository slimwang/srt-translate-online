1
00:00:00,320 --> 00:00:03,010
One of the problems with
the constructs that we saw so

2
00:00:03,010 --> 00:00:07,980
far is that they require developers
to pay attention to the use

3
00:00:07,980 --> 00:00:12,450
of the peer-wise operations,
lock/unlock, wait signal and others.

4
00:00:12,450 --> 00:00:17,510
And this, as you can imagine, is one
of the important causes of errors.

5
00:00:17,510 --> 00:00:19,480
Monitors, on the other hand,

6
00:00:19,480 --> 00:00:23,840
are a higher-level synchronization
construct that helps with this problem.

7
00:00:23,840 --> 00:00:28,718
In an abstract way, the monitors will
explicitly specify what is the resource

8
00:00:28,718 --> 00:00:32,270
that's being protected by
the synchronization construct.

9
00:00:32,270 --> 00:00:36,180
What are all the possible entry
procedures to that resource, like, for

10
00:00:36,180 --> 00:00:40,150
instance, if we have to differentiate
between readers and writers?

11
00:00:40,150 --> 00:00:44,640
And also, it would explicitly
specify any condition variables that

12
00:00:44,640 --> 00:00:49,310
could potentially be used to wake up
different types of waiting threads.

13
00:00:49,310 --> 00:00:54,880
When performing certain types of access
on entry, all the necessary locking and

14
00:00:54,880 --> 00:00:58,810
checking will take place when
the thread is entering the monitor.

15
00:00:58,810 --> 00:01:01,740
Similarly, when the thread is
done with the shared resource and

16
00:01:01,740 --> 00:01:06,120
it's exiting the monitor,
all of the necessary unlock operations,

17
00:01:06,120 --> 00:01:10,140
checks, any of the signaling that's
necessary for the condition variables,

18
00:01:10,140 --> 00:01:13,920
all of that will happen automatically,
will be hidden from the programmer.

19
00:01:13,920 --> 00:01:14,940
Because of all of this,

20
00:01:14,940 --> 00:01:19,090
monitors are referred to as
a high-level synchronization construct.

21
00:01:19,090 --> 00:01:23,610
Historically, monitors were included
in the MESA language runtime

22
00:01:23,610 --> 00:01:25,480
developed by Xerox PARC.

23
00:01:25,480 --> 00:01:27,890
Today, Java supports monitors too.

24
00:01:27,890 --> 00:01:32,430
Every single object in Java has
an internal lock, and methods that

25
00:01:32,430 --> 00:01:38,260
are declared to be synchronized
are entry points into this monitor.

26
00:01:38,260 --> 00:01:39,290
When complied,

27
00:01:39,290 --> 00:01:43,790
the resulting code will include all of
the appropriate locking and checking.

28
00:01:43,790 --> 00:01:48,009
The only thing is that notify
has to be done explicitly.

29
00:01:48,009 --> 00:01:53,243
Monitors also refer to the programming
style that uses mutexes and condition

30
00:01:53,243 --> 00:01:59,200
variables to describe the entry and
exit codes from the critical section.

31
00:01:59,200 --> 00:02:03,020
And this is what we described in
the threads and concurrency lesson with

32
00:02:03,020 --> 00:02:06,800
the enter critical section and
exit critical section section sub code.
