1
00:00:00,470 --> 00:00:06,840
As you know, in Linux they use the term task to signify a schedulable entity.

2
00:00:06,840 --> 00:00:12,150
And so, we're using T1, T2, T3, to mean tasks, which are

3
00:00:12,150 --> 00:00:17,590
schedulable entities. And the timer-q data structure, what it contains is the

4
00:00:17,590 --> 00:00:25,810
tasks and the expiry time for that particular task. And the tasks are ordered in

5
00:00:25,810 --> 00:00:29,420
this Timer-q data structure maintained by the kernel, sorted

6
00:00:29,420 --> 00:00:32,600
by the expiry time. So task T1 is the

7
00:00:32,600 --> 00:00:34,955
earliest task to go off. Because it has the

8
00:00:34,955 --> 00:00:38,222
earliest expiry time. T2 is next, with an expiry time

9
00:00:38,222 --> 00:00:43,410
of 12. T3 with an expiry time of 15 and so on. So this is the way the kernel

10
00:00:43,410 --> 00:00:46,250
is maintaining the data structure to know when a

11
00:00:46,250 --> 00:00:51,070
particular task's expiry time is up for processing the event

12
00:00:51,070 --> 00:00:57,800
associated with that particular task. The basis for firm timer implementation

13
00:00:57,800 --> 00:01:01,760
is the availability of APIC hardware.

14
00:01:01,760 --> 00:01:05,550
APIC is advanced programmable interrupt controller,

15
00:01:05,550 --> 00:01:10,830
which is implemented on chip in modern CPU starting from Intel Pentium

16
00:01:10,830 --> 00:01:16,250
onwards, and the firm timer implementation in TS-Linux takes advantage of the

17
00:01:16,250 --> 00:01:19,180
APIC hardware. The good news is with

18
00:01:19,180 --> 00:01:22,400
the APIC timer hardware, re-programming a one shot

19
00:01:22,400 --> 00:01:25,340
timer takes only a few cycles. So there

20
00:01:25,340 --> 00:01:28,270
is not a significant overhead to re-programming a

21
00:01:28,270 --> 00:01:35,560
one shot timer on modern CPUs because of the availability of the APIC hardware.

22
00:01:35,560 --> 00:01:41,330
So if the task that is at the head of the queue, that had it's timer event go

23
00:01:41,330 --> 00:01:44,380
off, if it has to be reprogrammed, all that we need to do is

24
00:01:45,430 --> 00:01:48,850
execute a few instructions in modern processes

25
00:01:48,850 --> 00:01:51,060
to reprogram that one shot timer to go

26
00:01:51,060 --> 00:01:56,220
off at the next one shot interval. When the APIC timer

27
00:01:56,220 --> 00:02:01,360
expires, the interrupt handler will go through this timer-q

28
00:02:01,360 --> 00:02:06,530
data structures and look for tasks whose timers have expired.

29
00:02:06,530 --> 00:02:12,270
Some of these tasks may be periodic tasks, some of these tasks may have been

30
00:02:12,270 --> 00:02:15,080
programmed to deal with the APIC timer

31
00:02:15,080 --> 00:02:19,530
event. So, associated with each entry in this

32
00:02:19,530 --> 00:02:22,290
timer queue data structure is the callback

33
00:02:22,290 --> 00:02:26,420
handler for dealing with that particular event. And

34
00:02:26,420 --> 00:02:28,070
those callback handlers are going to be

35
00:02:28,070 --> 00:02:32,170
called by the interrupt handler upon the expiry

36
00:02:32,170 --> 00:02:37,290
of the APIC timer. The expired timers are going to be removed from those timer

37
00:02:37,290 --> 00:02:40,730
queue data structures. If the entry corresponds to

38
00:02:40,730 --> 00:02:44,102
a periodic timer, then the handler will re

39
00:02:44,102 --> 00:02:47,510
enqueue that particular task in the timer

40
00:02:47,510 --> 00:02:52,030
queue data structure after updating its expiry field

41
00:02:52,030 --> 00:02:57,640
for the next periodic event for that task. If it is a one shot timer that

42
00:02:57,640 --> 00:03:03,230
this task was using. In that case, the interrupt handler will reprogramme that

43
00:03:03,230 --> 00:03:09,890
task for the next one short event. The way the APIC timer hardware works is

44
00:03:09,890 --> 00:03:16,620
by setting a value into register which is decremented at each memory bus cycle

45
00:03:16,620 --> 00:03:22,860
until it reaches zero. At which point it'll generate an interrupt. Now given a

46
00:03:22,860 --> 00:03:29,900
100 megahertz memory bus, for instance, on modern CPUs, a one short timer has

47
00:03:29,900 --> 00:03:34,060
a theoretical accuracy of ten nanoseconds. However,

48
00:03:34,060 --> 00:03:36,570
in practice, the time needed to feel

49
00:03:36,570 --> 00:03:39,806
the timer interrupt is significantly higher. And

50
00:03:39,806 --> 00:03:42,512
that becomes the limiting factor in the

51
00:03:42,512 --> 00:03:45,054
granularity that you can get with one

52
00:03:45,054 --> 00:03:48,582
shot timers implemented using the APIC hardware.

53
00:03:48,582 --> 00:03:55,050
But the important point is that APIC hardware allows you to implement very fine

54
00:03:55,050 --> 00:04:01,265
grained timers in modern processes. And as I already mentioned, by choosing an

55
00:04:01,265 --> 00:04:05,498
appropriate overshoot parameter in reprogramming the epic

56
00:04:05,498 --> 00:04:08,634
timer. We can eliminate the need for

57
00:04:08,634 --> 00:04:11,474
fielding one shot interrupts, because of soft

58
00:04:11,474 --> 00:04:15,410
timers going off within that overshoot period.

59
00:04:15,410 --> 00:04:17,870
Another optimization that we can do, in the

60
00:04:17,870 --> 00:04:22,270
firm time at implementation, is looking at the distance

61
00:04:22,270 --> 00:04:24,960
between one shot events. For instance, in this

62
00:04:24,960 --> 00:04:29,590
picture I'm showing you, the long distance between two

63
00:04:29,590 --> 00:04:31,410
one shot events. There is a one shot

64
00:04:31,410 --> 00:04:34,250
event happening here. There is a one shot timer

65
00:04:34,250 --> 00:04:37,560
event happening here. Another one shot timer event happening

66
00:04:37,560 --> 00:04:40,600
here. And if you have such a long distance,

67
00:04:40,600 --> 00:04:43,010
it is possible that there may be several

68
00:04:43,010 --> 00:04:45,810
periodic timer events that may be going off

69
00:04:45,810 --> 00:04:51,080
within this long distance. So this suggests that

70
00:04:51,080 --> 00:04:53,910
if periodic events are going to go off, and

71
00:04:53,910 --> 00:04:58,730
if it is close enough to a one shot timer that would have gone off, why not take

72
00:04:58,730 --> 00:05:05,630
advantage of that? So what we want to do is dispatch a one shot event at

73
00:05:05,630 --> 00:05:09,080
a preceding periodic event. The key thing for

74
00:05:09,080 --> 00:05:13,690
time sensitivity is not missing the timer event.

75
00:05:13,690 --> 00:05:15,540
If you're going to process it a little

76
00:05:15,540 --> 00:05:18,870
bit sooner, that's okay. So that's exactly what

77
00:05:18,870 --> 00:05:20,820
is happening here. Just as in the case

78
00:05:20,820 --> 00:05:24,810
of the overshoot parameter being used in combing

79
00:05:24,810 --> 00:05:27,270
one shot to the soft timer. What we're

80
00:05:27,270 --> 00:05:30,756
doing here is, because periodic timers are going

81
00:05:30,756 --> 00:05:33,910
to interrupt anyhow and if the kernel notices

82
00:05:33,910 --> 00:05:36,400
that there is a one shot event that is

83
00:05:36,400 --> 00:05:39,969
coming up fairly soon, then it can simply dispatch

84
00:05:39,969 --> 00:05:43,538
that one shot event at the preceding periodic timer

85
00:05:43,538 --> 00:05:47,345
event that is any how accepting the processor. And

86
00:05:47,345 --> 00:05:50,461
once you do that, then you can reprogram this

87
00:05:50,461 --> 00:05:52,757
one shot event to go off at the next

88
00:05:52,757 --> 00:05:56,765
expiry point for that one shot event. So basically,

89
00:05:56,765 --> 00:06:02,765
what we're doing when we have a long distance between one shot events,

90
00:06:02,765 --> 00:06:08,765
is to use a preceding periodic timer event, so that we can both avoid the

91
00:06:08,765 --> 00:06:15,520
overhead of dealing with this one shot event. And also the cost of reprogramming

92
00:06:15,520 --> 00:06:17,850
it. Or in other words, we completely

93
00:06:17,850 --> 00:06:22,580
eliminate using one shot events for situations

94
00:06:22,580 --> 00:06:28,180
where the distance between the one shot events is so big that we can simply use

95
00:06:28,180 --> 00:06:31,306
the periodic event instead of the one shot

96
00:06:31,306 --> 00:06:34,230
event. And the reasons for doing that are twofold.

97
00:06:34,230 --> 00:06:38,230
One is, periodic event data structures are much

98
00:06:38,230 --> 00:06:40,559
more efficient than the kernel, they're order of one

99
00:06:40,559 --> 00:06:44,490
data structures. Whereas, the one shot event programming

100
00:06:44,490 --> 00:06:47,846
data structures in the kernel. Tends to be order

101
00:06:47,846 --> 00:06:53,850
of log n, where n is the number of active timers. So as an optimization,

102
00:06:53,850 --> 00:06:59,900
if the one shot events happen at fairly long distances. That there are several

103
00:06:59,900 --> 00:07:02,140
periodic events that are going to happen

104
00:07:02,140 --> 00:07:05,780
anyhow within that. We will simply use the

105
00:07:05,780 --> 00:07:08,590
periodic timers instead of the one shot

106
00:07:08,590 --> 00:07:13,090
timer. So to summarize, the firm timer implementation.

107
00:07:13,090 --> 00:07:19,440
The first point is that the APIC hardware allows reprogramming one shot timers

108
00:07:19,440 --> 00:07:23,260
in few cycles. And secondly, by choosing

109
00:07:23,260 --> 00:07:27,100
the appropriate overshoot distance, we can eliminate

110
00:07:27,100 --> 00:07:33,080
the need for fielding the one shot timer interrupts if soft timers go off within

111
00:07:33,080 --> 00:07:38,120
that overshoot period. And third, if the distance between one shot timers is

112
00:07:38,120 --> 00:07:42,830
really long, then instead of using one shot timers, we will simply

113
00:07:42,830 --> 00:07:47,790
use periodic timers and dispatch the one shot

114
00:07:47,790 --> 00:07:52,920
event at the preceding periodic timer event. Those are the ideas that

115
00:07:52,920 --> 00:07:58,190
are enshrined in the firm timer implementation in TS-Linux, that

116
00:07:58,190 --> 00:08:03,200
essentially combines the advantages of one shot timer with

117
00:08:03,200 --> 00:08:08,010
soft timers with periodic timers. So this should give you a feel

118
00:08:08,010 --> 00:08:13,590
for how TS-Linux, by a clever implementation,

119
00:08:13,590 --> 00:08:18,560
reduces the timer latency, the first component of the

120
00:08:18,560 --> 00:08:23,500
latency from the point of event happening to event activation.
