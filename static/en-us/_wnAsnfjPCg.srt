1
00:00:00,380 --> 00:00:04,428
Frame rate is the key to making your
game feel smooth and responsive.

2
00:00:04,428 --> 00:00:06,210
The faster you're able
to update the screen,

3
00:00:06,210 --> 00:00:09,880
the smoother objects will move and
the quicker they'll appear to react

4
00:00:09,880 --> 00:00:13,050
to collisions, bullets,
input from the player and so on.

5
00:00:14,050 --> 00:00:16,860
A low frame rate,
makes a game seem jerky and slow.

6
00:00:18,040 --> 00:00:21,890
The simplest game loop, gets input from
the player, does some game calculation,

7
00:00:21,890 --> 00:00:23,900
then updates the screen.

8
00:00:23,900 --> 00:00:27,260
The problem is that updating
the screen usually takes the most time,

9
00:00:27,260 --> 00:00:30,200
so time the games behavior
to screen updates,

10
00:00:30,200 --> 00:00:32,119
tends to make the whole
game feel sluggish.

11
00:00:33,360 --> 00:00:36,440
A better approach is to keep
track of how long it takes

12
00:00:36,440 --> 00:00:38,300
to update the screen each time.

13
00:00:38,300 --> 00:00:41,860
Then use that value to predict how long
it will take to render the next frame.

14
00:00:43,060 --> 00:00:47,730
Now, you can collect player input, then
update the game world in a tight loop,

15
00:00:47,730 --> 00:00:49,710
perhaps a millisecond at a time,

16
00:00:49,710 --> 00:00:52,970
effectively fast forwarding the state
of the game to that future point.

17
00:00:54,180 --> 00:00:58,300
In effect, this approach allows you to
tie your game processing to a universal

18
00:00:58,300 --> 00:01:01,500
wall clock instead of how
often the screen is updated.

19
00:01:02,820 --> 00:01:06,560
The result feels smoother because
each frame is now a snapshot

20
00:01:06,560 --> 00:01:10,310
capturing the game state as it
changes independent of screen updates.

21
00:01:11,470 --> 00:01:15,360
This is such a common practice that most
pre-built game engines and development

22
00:01:15,360 --> 00:01:19,790
frameworks will handle it for you or
make it very easy to implement yourself.
