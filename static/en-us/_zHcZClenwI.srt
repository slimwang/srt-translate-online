1
00:00:00,000 --> 00:00:05,000
Slightly more challenging to program is the function median.

2
00:00:05,000 --> 00:00:10,000
Now the median of this list is the middle element of the sorted list,

3
00:00:10,000 --> 00:00:14,000
which in this case will be 2.

4
00:00:14,000 --> 00:00:17,000
Of course, if there is an even number of elements--

5
00:00:17,000 --> 00:00:19,000
let me just add one--

6
00:00:19,000 --> 00:00:23,000
the median isn't exactly defined.

7
00:00:23,000 --> 00:00:26,000
So let's say I pick either one of the two center ones.

8
00:00:26,000 --> 00:00:30,000
All the examples I'm testing with will have an odd number of elements.

9
00:00:30,000 --> 00:00:34,000
Okay? So let's not worry about the case where it is of even length.

10
00:00:34,000 --> 00:00:37,000
Let's just make sure our code runs for an odd length.

11
00:00:37,000 --> 00:00:41,000
So this one is more complicated to program, and there are two hints.

12
00:00:41,000 --> 00:00:43,000
First, there is a function called "sorted."

13
00:00:43,000 --> 00:00:47,000
You can give a data, and the output of the function gives you a sorted list.

14
00:00:47,000 --> 00:00:50,000
That's built into Python, so we don't have to worry about how to sort things.

15
00:00:50,000 --> 00:00:52,000
Luckily not.

16
00:00:52,000 --> 00:00:54,000
It will be used to assign this to a new list,

17
00:00:54,000 --> 00:00:56,000
and the way you do this, you just give it a name.

18
00:00:56,000 --> 00:00:58,000
Say sorted data is data.

19
00:00:58,000 --> 00:01:00,000
That gives you a sorted list.

20
00:01:00,000 --> 00:01:02,000
The second thing to know is

21
00:01:02,000 --> 00:01:04,000
if you want to access any element in a structure like this

22
00:01:04,000 --> 00:01:07,000
or in a structure like this, you can do this using notation like this.

23
00:01:07,000 --> 00:01:10,000
Now this is the tricky thing. This doesn't give you the third element in the list.

24
00:01:10,000 --> 00:01:14,000
It gives you the fourth, and the reason is each list is indexed starting with zero.

25
00:01:14,000 --> 00:01:18,000
So this list has five elements, and the indices go from zero to four.

26
00:01:18,000 --> 00:01:20,000
So to go to the center element,

27
00:01:20,000 --> 00:01:22,000
you would have to use index number two,

28
00:01:22,000 --> 00:01:24,000
and that gives you effectively the third element in the list.

29
00:01:24,000 --> 00:01:27,000
I apologize for this. This is all over computer science,

30
00:01:27,000 --> 00:01:30,000
that the indices tend to run from zero on,

31
00:01:30,000 --> 00:01:32,000
not from number one on, whereas in the English language

32
00:01:32,000 --> 00:01:34,000
we use one as the first index.

33
00:01:34,000 --> 00:01:36,000
Some programming languages use one, some use zero.

34
00:01:36,000 --> 00:01:39,000
Python uses zero, so you have to know this.

35
00:01:39,000 --> 00:01:42,000
With those hints, you should be able to fill in the gaps,

36
00:01:42,000 --> 00:01:45,000
write your code over here, return something,

37
00:01:45,000 --> 00:01:48,000
and if you print the median off this data sequence over here,

38
00:01:48,000 --> 00:01:52,000
then it should output a 2, which is the median.

39
00:01:52,000 --> 00:01:54,000
So here is the code.

40
00:01:54,000 --> 00:01:57,000
To solve this, first make a new sorted list of the data

41
00:01:57,000 --> 00:02:00,000
and then find the corresponding element in the list to return.

42
00:02:00,000 --> 00:02:03,000
Let's assume there is an odd number of items in the list

43
00:02:03,000 --> 99:59:59,999
so things should always be fine.
