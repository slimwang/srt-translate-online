1
00:00:00,420 --> 00:00:05,250
We just demonstrated some powerful LLDB
commands and each of the commands is now

2
00:00:05,250 --> 00:00:08,510
another tool that you can use when
your paused at a break point.

3
00:00:08,510 --> 00:00:11,720
I hope you're beginning to see a pattern
in how we can use break points and

4
00:00:11,720 --> 00:00:12,840
tools together.

5
00:00:12,840 --> 00:00:14,570
That is, that we can set breakpoints,

6
00:00:14,570 --> 00:00:17,420
and then we can get our apps
to reach break points, and

7
00:00:17,420 --> 00:00:21,370
then we can use tools to examine our
applications while they're paused.

8
00:00:21,370 --> 00:00:24,020
But there are also some other
interesting ways that we can

9
00:00:24,020 --> 00:00:25,800
edit the very nature of a breakpoint so

10
00:00:25,800 --> 00:00:29,020
that it doesn't necessarily
pause an application.

11
00:00:29,020 --> 00:00:29,860
For example,

12
00:00:29,860 --> 00:00:33,540
we can modify breakpoints so that they
only pause in certain circumstances,

13
00:00:33,540 --> 00:00:38,570
like only pause after the 10th bug is
created, instead of just the first bug.

14
00:00:38,570 --> 00:00:41,450
Or we can make breakpoints that
don't pause the applications at all,

15
00:00:41,450 --> 00:00:43,580
instead they can perform
some behavior and

16
00:00:43,580 --> 00:00:46,450
then just let the application
continue running.

17
00:00:46,450 --> 00:00:49,230
For instance, don't pause, play a sound.

18
00:00:49,230 --> 00:00:52,520
To achieve these kinds of behaviors,
we'll use breakpoint actions, and

19
00:00:52,520 --> 00:00:54,280
specifically that's what
breakpoint actions are,

20
00:00:54,280 --> 00:00:57,880
they're behaviors that are triggered
when a breakpoint is reached.

21
00:00:57,880 --> 00:01:02,060
So to demonstrate, I'm going to start
in the breakpoint navigator and

22
00:01:02,060 --> 00:01:04,349
right now we have no breakpoints.

23
00:01:04,349 --> 00:01:10,220
I've removed the ones that we had, but
let's add one for the add bug to view.

24
00:01:10,220 --> 00:01:12,070
There we go, so now it shows up.

25
00:01:12,070 --> 00:01:15,960
And if we right click a breakpoint,
then a context menu pops up and

26
00:01:15,960 --> 00:01:19,470
we can select this option
to edit the breakpoint.

27
00:01:19,470 --> 00:01:21,210
And here's where the fun happens.

28
00:01:21,210 --> 00:01:22,660
But before we add and

29
00:01:22,660 --> 00:01:28,040
action or a breakpoint action,
let's work with the other fields first.

30
00:01:28,040 --> 00:01:31,460
So we see this condition field at
the top and this allows up to specify

31
00:01:31,460 --> 00:01:35,458
a condition that must be true in
order for a breakpoint to be active.

32
00:01:35,458 --> 00:01:40,490
For this breakpoint let's specify
that the count of the bug's array

33
00:01:40,490 --> 00:01:43,850
must be greater than three before
the breakpoint is triggered.

34
00:01:43,850 --> 00:01:47,247
And to do this,
I'll type in the expression

35
00:01:47,247 --> 00:01:52,260
bugs.count is greater than three,
and we'll hit enter.

36
00:01:52,260 --> 00:01:53,358
And let's go ahead and
run the application.

37
00:01:55,087 --> 00:01:59,335
And stopped.

38
00:02:00,962 --> 00:02:06,770
If we look down in bugs, we can
see that we have four image views.

39
00:02:06,770 --> 00:02:11,540
So the bugs are greater than three and
our breakpoint has now been triggered.

40
00:02:11,540 --> 00:02:16,300
So let's stop this and go back and
edit our breakpoint again.

41
00:02:16,300 --> 00:02:18,162
And I'll clear the condition and

42
00:02:18,162 --> 00:02:21,632
this time let's set the ignore
times before stopping value.

43
00:02:21,632 --> 00:02:28,700
We'll make it two and rerun the app,
tap the screen, and there we go.

44
00:02:28,700 --> 00:02:33,630
It ignored it the first two times,
and created two bugs, and now

45
00:02:33,630 --> 00:02:37,570
we're on the third iteration through,
and about to create our third bug.

46
00:02:38,600 --> 00:02:40,200
Let's stop this one more time.

47
00:02:41,430 --> 00:02:43,850
Go back to the breakpoint navigator and
edit again.

48
00:02:44,860 --> 00:02:49,860
So we'll make sure this is zero and
this time let's select this check box

49
00:02:49,860 --> 00:02:53,016
that says, automatically continue
after evaluating actions.

50
00:02:53,016 --> 00:02:55,810
I'll run this again and when we click,

51
00:02:55,810 --> 00:02:58,630
it appears that the break
point has been skipped.

52
00:02:58,630 --> 00:03:00,960
However, that's not exactly the case.

53
00:03:00,960 --> 00:03:03,080
It only looks like
the breakpoint's being skipped.

54
00:03:03,080 --> 00:03:06,632
What's happening, is because there
are no break point actions specified,

55
00:03:06,632 --> 00:03:08,500
the breakpoint was triggered, but

56
00:03:08,500 --> 00:03:12,640
then immediately evaluated
zero actions and continued.

57
00:03:12,640 --> 00:03:13,580
So if we add an action,

58
00:03:13,580 --> 00:03:16,336
we can prove that something
else should have happened.

59
00:03:16,336 --> 00:03:19,000
So we'll click edit and

60
00:03:19,000 --> 00:03:23,320
the first action type that we'll look
at is the debug or command action.

61
00:03:23,320 --> 00:03:26,980
This includes a text field for entering
any valid commands that we could use

62
00:03:26,980 --> 00:03:29,950
at the LLDB command line interface.

63
00:03:29,950 --> 00:03:34,365
So we'll do our PO command we saw
earlier, print out bugs, then run.

64
00:03:34,365 --> 00:03:38,030
Then we can see that it's evaluating,

65
00:03:38,030 --> 00:03:42,970
it's evaluating a lot because we're
creating a lot of bugs, but then it

66
00:03:42,970 --> 00:03:47,390
should just fall through our breakpoint,
it has never paused our application.

67
00:03:47,390 --> 00:03:49,900
It is taking more time to
actually execute though

68
00:03:49,900 --> 00:03:52,150
because it has to run the actions.

69
00:03:52,150 --> 00:03:54,720
So we can really see our problem now

70
00:03:54,720 --> 00:03:58,300
because with one tap way more than
one bug was being created, and

71
00:03:58,300 --> 00:04:02,150
we kept seeing the contents of
this update over and over again.

72
00:04:02,150 --> 00:04:06,880
So let's stop and see if we can
see this problem another way.

73
00:04:07,880 --> 00:04:10,480
So go back and edit.

74
00:04:10,480 --> 00:04:13,730
And this time we're going to
add a new breakpoint action, so

75
00:04:13,730 --> 00:04:18,110
we click the plus and
let's choose sound and

76
00:04:18,110 --> 00:04:23,140
we'll keep it this default
bottle sound and run again.

77
00:04:23,140 --> 00:04:24,685
Let me turn on,
make sure we can hear this.

78
00:04:24,685 --> 00:04:27,940
[SOUND] And now,

79
00:04:27,940 --> 00:04:33,955
we can hear the problem too.

80
00:04:33,955 --> 00:04:38,872
So each time a bug was added to the
view, the breakpoint was triggered and

81
00:04:38,872 --> 00:04:40,670
our sound played.

82
00:04:40,670 --> 00:04:44,600
And you can actually even add your
custom sounds instead of the default

83
00:04:44,600 --> 00:04:47,840
ones, and I've included a link in the
instructor notes if you're interested.

84
00:04:47,840 --> 00:04:49,430
So let's stop this one more time and

85
00:04:49,430 --> 00:04:51,876
talk about the remaining actions
that we haven't looked at yet.

86
00:04:51,876 --> 00:04:56,490
I'm not going to show examples for
each of the actions because some of them

87
00:04:56,490 --> 00:04:59,250
are outside the scope of this class but
there are additional

88
00:04:59,250 --> 00:05:03,110
resources in the instructor notes that
can guide you through using them.

89
00:05:03,110 --> 00:05:08,220
So in the breakpoint editor, which we
see here, we'll add one more action.

90
00:05:09,770 --> 00:05:12,850
And here at the top, we see AppleScript.

91
00:05:12,850 --> 00:05:15,470
And what an AppleScript action is
going to allow you to do is run

92
00:05:15,470 --> 00:05:18,240
an AppleScript's script
when the breakpoint is hit.

93
00:05:19,550 --> 00:05:24,440
The next one is capture a GPU frame,
and this does exactly what it says,

94
00:05:24,440 --> 00:05:28,480
and it can be useful if you're
debugging applications using OpenGL or

95
00:05:28,480 --> 00:05:30,260
something like that, using SpriteKit.

96
00:05:31,300 --> 00:05:35,630
Then we have the log message, which will
either log a message to the console,

97
00:05:35,630 --> 00:05:39,730
or we can actually speak it back to us
but I'll admit that having the computer

98
00:05:39,730 --> 00:05:45,160
speak back to you can feel
a little bit like Space Odyssey.

99
00:05:45,160 --> 00:05:48,480
And then the last action
is the Shell command.

100
00:05:48,480 --> 00:05:50,670
And similar to the AppleScript action,

101
00:05:50,670 --> 00:05:54,620
this allows you to run a shell script
when the breakpoint is reached.

102
00:05:54,620 --> 00:05:57,420
One way this can be really useful is for
an app that might need

103
00:05:57,420 --> 00:06:02,640
to clear the local database records each
time the app is run in the simulator.

104
00:06:02,640 --> 00:06:05,500
So instead of doing this manually,
you can set a breakpoint and

105
00:06:05,500 --> 00:06:09,200
actually run a script that clears
the local database for you.

106
00:06:09,200 --> 00:06:12,050
And really, there are endless
possibilities with what you could do

107
00:06:12,050 --> 00:06:15,420
with this, so I'd encourage you to
experiment with them in your own

108
00:06:15,420 --> 00:06:19,840
projects, and if you like, there's
another cool thing we can do here.

109
00:06:19,840 --> 00:06:22,070
We can actually share
our breakpoints too.

110
00:06:22,070 --> 00:06:24,840
So if you right click any
breakpoint in the navigator and

111
00:06:24,840 --> 00:06:29,531
you select share breakpoint,
then it'll now show up as shared, and

112
00:06:29,531 --> 00:06:33,570
the breakpoint will be included as
part of your Xcode project file.

113
00:06:33,570 --> 00:06:38,140
And this means that you can share your
Xcode project with anyone else, and they

114
00:06:38,140 --> 00:06:41,970
should see the breakpoint, and because
the shared breakpoint is recorded

115
00:06:41,970 --> 00:06:46,280
as part of a file, then it'll also show
up in version control systems like Git.
