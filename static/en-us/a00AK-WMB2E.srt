1
00:00:00,150 --> 00:00:02,990
So, we know how to create and
read from our database entries, but

2
00:00:02,990 --> 00:00:05,610
how do we update existing
data within our database?

3
00:00:05,610 --> 00:00:08,460
It seems we have a situation on
our hands that calls for this.

4
00:00:08,460 --> 00:00:10,680
Veggie burgers across town
have been all the rage,

5
00:00:10,680 --> 00:00:13,530
causing rapid price competition
amongst our restaurants.

6
00:00:13,530 --> 00:00:17,030
Urban Burger wants to cut the price
of their veggie burger to $2.99.

7
00:00:17,030 --> 00:00:20,975
With SQLAlchemy, performing an update
like this is a pretty simple,

8
00:00:20,975 --> 00:00:22,370
four-step process.

9
00:00:22,370 --> 00:00:25,530
First, we execute a query to find
the veggie burger we want and

10
00:00:25,530 --> 00:00:27,020
store it in a variable.

11
00:00:27,020 --> 00:00:29,660
Second, we declare the new
price of the variable.

12
00:00:29,660 --> 00:00:31,950
Next, we add the variable
to our session.

13
00:00:31,950 --> 00:00:34,006
And, finally,
we commit the session to the database.

14
00:00:34,006 --> 00:00:37,165
Follow along as I do this
from the Python shell.

15
00:00:37,165 --> 00:00:40,335
So, the first step in our update
process is to find the exact item we

16
00:00:40,335 --> 00:00:41,315
want to update.

17
00:00:41,315 --> 00:00:45,265
Looking at the SQLAlchemy documentation
for queries, I see we have a filter_by

18
00:00:45,265 --> 00:00:49,180
feature that lets us filter queries
based on attribute entries, like name.

19
00:00:49,180 --> 00:00:51,690
Let's go to our Python shell and
give it a try.

20
00:00:51,690 --> 00:00:54,750
So, let's use the filter_by function
to find all the veggie burgers in

21
00:00:54,750 --> 00:00:56,410
our restaurant menu database.

22
00:00:56,410 --> 00:00:58,140
Following the syntax
from the documentation,

23
00:00:58,140 --> 00:01:01,640
I append .filter_by to my
query on MenuItems and

24
00:01:01,640 --> 00:01:05,080
set the Veggie Burger as the name of
the menu item I want to search for.

25
00:01:05,080 --> 00:01:07,810
Then, I store it in the variable
named veggieBurgers.

26
00:01:07,810 --> 00:01:11,090
The filter_by function always
returns a collection of objects.

27
00:01:11,090 --> 00:01:14,100
So, let's create a for
loop to iterate over each object and

28
00:01:14,100 --> 00:01:17,200
retrieve the information about
each of these veggie burgers.

29
00:01:17,200 --> 00:01:20,650
Inside our for loop, let's print
out the ID of each veggie burger,

30
00:01:20,650 --> 00:01:23,930
its current price, and
the restaurant it belongs to.

31
00:01:23,930 --> 00:01:26,730
I'm also going to print a new line
character to make our results a little

32
00:01:26,730 --> 00:01:27,880
bit easier to read.

33
00:01:27,880 --> 00:01:28,790
When I close my for

34
00:01:28,790 --> 00:01:32,890
loop in execute, I get back a list of
all the veggie burgers in my database.

35
00:01:32,890 --> 00:01:36,420
The first one here is from
Urban Burger and has an ID of eight.

36
00:01:36,420 --> 00:01:39,700
Now, I will create another query where
I only return the menu item with

37
00:01:39,700 --> 00:01:40,960
an ID of eight.

38
00:01:40,960 --> 00:01:43,095
I will store it as UrbanVeggieBurger.

39
00:01:43,095 --> 00:01:46,620
If I append the .one function
to the end of my query,

40
00:01:46,620 --> 00:01:50,070
I make sure SQLalchemy only
gives me the one object I want,

41
00:01:50,070 --> 00:01:52,410
instead of a list that I
would have it iterate over.

42
00:01:52,410 --> 00:01:54,940
Just to double check we have
the right burger, let me go ahead and

43
00:01:54,940 --> 00:01:56,020
check its price.

44
00:01:56,020 --> 00:02:00,620
Yep, the veggie burger costs $5.99,
just like it did in our first query.

45
00:02:00,620 --> 00:02:04,390
Now, let's reset the price of
the Urban Veggie Burger to $2.99.

46
00:02:04,390 --> 00:02:07,710
We can then add the UrbanVeggieBurger
object to our session and

47
00:02:07,710 --> 00:02:09,130
commit it to the database.

48
00:02:09,130 --> 00:02:13,160
So now, if we execute the same original
query to see all the veggie burgers in

49
00:02:13,160 --> 00:02:17,960
our database, we see that Urban Burger's
veggie burger now has a price of $2.99.

50
00:02:17,960 --> 00:02:20,860
Now, let's assume all the other
restaurants have reacted to

51
00:02:20,860 --> 00:02:23,330
Urban Burger's audacious price drop and

52
00:02:23,330 --> 00:02:26,020
want to set their burger
prices to $2.99 as well.

53
00:02:26,020 --> 00:02:29,440
Let's use our same for loop and
modify it a bit to change the price of

54
00:02:29,440 --> 00:02:32,630
all the veggie burgers in
our database to $2.99.

55
00:02:32,630 --> 00:02:36,460
I'm going to use this if statement to
avoid unnecessary database updates to

56
00:02:36,460 --> 00:02:38,380
an entry that already
has a price of $2.99,

57
00:02:38,380 --> 00:02:41,510
and just update the other
veggie burger menu items.

58
00:02:41,510 --> 00:02:43,270
Now, querying a third time,

59
00:02:43,270 --> 00:02:46,300
I see all the veggie burgers in
our menu have the same price.

60
00:02:46,300 --> 00:02:49,240
Let's get a little more practice with
updates by answering the following

61
00:02:49,240 --> 00:02:49,825
quiz questions.
