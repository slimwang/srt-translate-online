1
00:00:00,000 --> 00:00:03,000
Now that we have an understanding of formal grammars,

2
00:00:03,000 --> 00:00:09,000
we're going to need to use them to understand or describe HTML and JavaScript.

3
00:00:09,000 --> 00:00:14,000
We're going to design together formal grammars that exactly capture HTML and JavaScript

4
00:00:14,000 --> 00:00:17,000
or at least interesting subsets of them.

5
00:00:17,000 --> 00:00:20,000
If we were trying to understand English sentences,

6
00:00:20,000 --> 00:00:25,000
there is a special kind of diagram we could make.

7
00:00:25,000 --> 00:00:29,000
Here I have a very high level partial grammar for English.

8
00:00:29,000 --> 00:00:33,000
A sentence has a noun phrase, a verb phrase, and an object.

9
00:00:33,000 --> 00:00:38,000
A noun phrase is just a decorated noun, like maybe a noun with an adjective in front of it.

10
00:00:38,000 --> 00:00:43,000
A verb phrase is a decorated verb, maybe a verb with an adverb in front of it.

11
00:00:43,000 --> 00:00:48,000
Then the object could be a noun phrase or a noun or something more complicated.

12
00:00:48,000 --> 00:00:54,000
For example, here is a sentence: "Wes reads Romance of the Three Kingdoms."

13
00:00:54,000 --> 00:00:57,000
Now, there are various different ways to diagram English sentences.

14
00:00:57,000 --> 00:01:00,000
We'll do something relatively simple.

15
00:01:00,000 --> 00:01:05,000
We just want to indicate which part matches which grammatical form.

16
00:01:05,000 --> 00:01:10,000
Our noun phrase is going to be "Wes." Our verb phrase is "reads."

17
00:01:10,000 --> 00:01:13,000
The object is "Romance of the Three Kingdoms."

18
00:01:13,000 --> 00:01:16,000
We could divide it up so that the object falls under the phrase

19
00:01:16,000 --> 00:01:20,000
or that we draw these slightly differently, but mostly we want to know which part goes where.

20
00:01:20,000 --> 00:01:23,000
Who is doing the reading? Is it Wes or the book.

21
00:01:23,000 --> 00:01:26,000
This sort or diagram will help us figure that out.

22
00:01:26,000 --> 00:01:30,000
In fact, in formal languages or with a grammar like this,

23
00:01:30,000 --> 00:01:36,000
there is a more common way, a more pictoral way of representing these sentences.

24
00:01:36,000 --> 00:01:40,000
We can draw something that looks a bit like an inverted tree.

25
00:01:40,000 --> 00:01:42,000
I'm going to take each one of these productive rules

26
00:01:42,000 --> 00:01:44,000
and puts its left hand-side at the top,

27
00:01:44,000 --> 00:01:50,000
and then give it children, or branches, based on which rule is chosen

28
00:01:50,000 --> 00:01:52,000
and what's available on the right.

29
00:01:52,000 --> 00:01:59,000
Here we have a sort of a pyramid-like shape, or what's officially called a parse tree.

30
00:01:59,000 --> 00:02:02,000
Remember that syntactic analysis is sometimes called parsing.

31
00:02:02,000 --> 00:02:05,000
This might not look like a tree, but what you want to do

32
00:02:05,000 --> 00:02:08,000
is imagine the tree growing upside down.

33
00:02:08,000 --> 00:02:14,000
Here is our tree, and at various places--although it's starting with the trunk or the root--

34
00:02:14,000 --> 00:02:18,000
it branches out, and all of these intermediate parts in the tree

35
00:02:18,000 --> 00:02:22,000
represent none terminals in the grammar.

36
00:02:22,000 --> 00:02:25,000
All of the leaves right at the end represent terminals

37
00:02:25,000 --> 00:02:29,000
or tokens in the final sentence or utterance.

38
00:02:29,000 --> 00:02:32,000
This is called a parse tree by longstanding tradition.

39
00:02:32,000 --> 00:02:37,000
We draw them upside down, starting at the root with the start nonterminal.

40
00:02:37,000 --> 00:02:41,000
While we're here, you too should consider reading Romance of the Three Kingdoms.

41
00:02:41,000 --> 00:02:44,000
Written in the 14th century, it's a Chinese historical novel

42
00:02:44,000 --> 00:02:47,000
about the end of the Han Dynasty. Good stuff.

43
00:02:47,000 --> 00:02:52,000
Here's one of our favorite grammars from before--a simple arithmetic expression grammar.

44
00:02:52,000 --> 00:02:58,000
Let's say that our input is 1 plus 2 plus 3.

45
00:02:58,000 --> 00:03:00,000
Here is a possible parse tree.

46
00:03:00,000 --> 00:03:05,000
We start at the top, at the root, with our nonterminal expression.

47
00:03:05,000 --> 00:03:09,000
Each time we have a number of children equal to the number of symbols

48
00:03:09,000 --> 00:03:11,000
to the right of the arrow.

49
00:03:11,000 --> 00:03:14,000
If I'm using expression goes to expression plus expression,

50
00:03:14,000 --> 00:03:16,000
I have one node with three children.

51
00:03:16,000 --> 00:03:20,000
I need to get 1 plus 2 plus 3, so I'm going to need to use this first rule

52
00:03:20,000 --> 00:03:25,000
at least twice--once to get this plus sign and once to get that one.

53
00:03:25,000 --> 00:03:29,000
Here I'm using it once--one instance of rule one.

54
00:03:29,000 --> 00:03:33,000
Here I'm using it twice--another instance of rule one.

55
00:03:33,000 --> 00:03:36,000
You'll note that they overlap.

56
00:03:36,000 --> 00:03:41,000
The first time we use this rule we started drawing this part of the tree.

57
00:03:41,000 --> 00:03:44,000
This expression node was the result.

58
00:03:44,000 --> 00:03:47,000
The second time, it was the thing we were choosing to expand.

59
00:03:47,000 --> 00:03:51,000
This is normal. This represents the recursive structure of a grammar.

60
00:03:51,000 --> 00:03:55,000
In a parse tree like this, these parts at the that have no children

61
00:03:55,000 --> 00:03:57,000
are called "leaves."

62
00:03:57,000 --> 00:03:59,000
The parts in the middle are called "nodes."

63
00:03:59,000 --> 00:04:02,000
Sometimes the leaves are called "leaf nodes," which is a bit ambiguous.

64
00:04:02,000 --> 00:04:05,000
These are always going to be terminals.

65
00:04:05,000 --> 99:59:59,999
The intermediate nodes are always going to be nonterminals.
