1
00:00:00,000 --> 00:00:02,000
Okay, here's 1 version of this function.

2
00:00:02,000 --> 00:00:07,000
First, what we do is we take the month string from the user, if it's there,

3
00:00:07,000 --> 00:00:09,000
if it's a nonempty string.

4
00:00:09,000 --> 00:00:12,000
I capitalize it because the list I include before of all of the months

5
00:00:12,000 --> 00:00:14,000
has the days capitalized,

6
00:00:14,000 --> 00:00:18,000
and if that capitalized month is in that list, return that value.

7
00:00:18,000 --> 00:00:21,000
So let's try a couple versions of this.

8
00:00:21,000 --> 00:00:25,000
Valid_month('january'), and we run this.

9
00:00:25,000 --> 00:00:28,000
We see it prints January.

10
00:00:28,000 --> 00:00:32,000
Let's try 'july'. I run this, and it prints July.

11
00:00:32,000 --> 00:00:35,000
Everything is formatted nicely, and all is well.

12
00:00:35,000 --> 00:00:38,000
Okay, now let's try answering some junk in here.

13
00:00:38,000 --> 00:00:42,000
Okay, we run this, and it returns nothing.

14
00:00:42,000 --> 00:00:46,000
What happens if I answer in nothing?

15
00:00:46,000 --> 00:00:48,000
We get nothing. Okay, so this seems to be working.

16
00:00:48,000 --> 00:00:50,000
Now what if we wanted to make this a little bit more user friendly,

17
00:00:50,000 --> 00:00:54,000
so the user doesn't have to type in a complete month and spell it correctly.

18
00:00:54,000 --> 00:00:56,000
Here's the change I would probably make.

19
00:00:56,000 --> 00:00:59,000
At the top of this file, we have a list of months.

20
00:00:59,000 --> 00:01:04,000
What I'm going to do is, I'm going to build a dictionary--a mapping of just the first 3 letters

21
00:01:04,000 --> 00:01:07,000
of the month name to the month name itself,

22
00:01:07,000 --> 00:01:10,000
so we're only going to match on the first 3 letters of what the user enters.

23
00:01:10,000 --> 00:01:13,000
Okay, so I've added this dictionary, and for m in months,

24
00:01:13,000 --> 00:01:15,000
which is our list from above of the month names,

25
00:01:15,000 --> 00:01:19,000
we're going to make a mapping of the first 3 letters of that month--

26
00:01:19,000 --> 00:01:24,000
that's what this m[:3] is--lowercase using the lower() function to the month name itself.

27
00:01:24,000 --> 00:01:27,000
If I were to print that out, it looks like this down here--

28
00:01:27,000 --> 00:01:31,000
'mar' to March, 'feb' to February, 'aug' to August--you get the point.

29
00:01:31,000 --> 00:01:36,000
Now this isn't in any particular order because in Python, dictionaries aren't ordered.

30
00:01:36,000 --> 00:01:40,000
Now let's update the main function here to use this new dictionary.

31
00:01:40,000 --> 00:01:43,000
Okay, so now I've made the changes. We still say, if month.

32
00:01:43,000 --> 00:01:45,000
Now I'm making a new variable called short_month,

33
00:01:45,000 --> 00:01:48,000
which just equals the first 3 letters of whatever the user typed in, lowercased--

34
00:01:48,000 --> 00:01:51,000
so first 3 letters, lowercase.

35
00:01:51,000 --> 00:01:56,000
Then I use the GET function on a Python dictionary to see if those first 3 letters

36
00:01:56,000 --> 00:02:01,000
the user typed in is in that mapping, and if it is, we return the value from that mapping.

37
00:02:01,000 --> 00:02:03,000
That's what the GET function does.

38
00:02:03,000 --> 00:02:09,000
It says, if our key is in the mapping, return the value. Otherwise, return none.

39
00:02:09,000 --> 00:02:11,000
We're going to return either that value or none.

40
00:02:11,000 --> 00:02:13,000
Let's try this out together.

41
00:02:13,000 --> 00:02:16,000
So print valid_months.

42
00:02:16,000 --> 00:02:20,000
Okay, so I run this function on 'january', like we did before, and it prints out January

43
00:02:20,000 --> 00:02:23,000
with a capital J. That's the behavior we had before.

44
00:02:23,000 --> 00:02:27,000
Let's try something a little bit different. What if I type in just 'feb'?

45
00:02:27,000 --> 00:02:33,000
If I run this, we get February with a capital F, so now our date field in our form

46
00:02:33,000 --> 00:02:35,000
will be able to accept a wider variety of things.

47
00:02:35,000 --> 00:02:41,000
If you're like me, and you can never spell February correctly--I'll misspell this,

48
00:02:41,000 --> 00:02:44,000
and I hit run, we still get February nicely.

49
00:02:44,000 --> 00:02:46,000
This is nice, so I can type in any sorts of junk,

50
00:02:46,000 --> 00:02:52,000
and if the first 3 letters match a month, we can assume the user was probably

51
00:02:52,000 --> 00:02:56,000
on the right track. Okay? See--December.
