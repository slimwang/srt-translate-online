1
00:00:00,420 --> 00:00:03,540
Let's say say we want to change
a compile flag in our Java project.

2
00:00:03,540 --> 00:00:06,536
We can just add some configuration
to the compile Java task.

3
00:00:06,536 --> 00:00:09,217
However, unlike simple Java projects,

4
00:00:09,217 --> 00:00:14,053
which have a finite set of tasks such
as, compile Java, jar, test, etc.

5
00:00:14,053 --> 00:00:16,625
Android projects can have
an indeterminate number of tasks,

6
00:00:16,625 --> 00:00:20,080
depending on the build types and
product flavors we have declared.

7
00:00:20,080 --> 00:00:22,610
Additionally, the names of
these tasks are generated, and

8
00:00:22,610 --> 00:00:26,130
they're based on the name of
the particular variant the task is for.

9
00:00:26,130 --> 00:00:29,020
Not only that, but these tasks
are created at a very late stage of

10
00:00:29,020 --> 00:00:30,970
the project configuration life cycle.

11
00:00:30,970 --> 00:00:32,490
Which means, in most cases,

12
00:00:32,490 --> 00:00:35,220
we can't directly reference
them in our build script.

13
00:00:35,220 --> 00:00:38,150
Essentially, we need
to solve two problems.

14
00:00:38,150 --> 00:00:41,560
First, we need a way to reference each
task used to build a particular variant

15
00:00:41,560 --> 00:00:44,210
without having to know
the task's actual name.

16
00:00:44,210 --> 00:00:47,910
Quite simply, we want to configure all
the tasks of a particular type for

17
00:00:47,910 --> 00:00:49,170
every variant.

18
00:00:49,170 --> 00:00:52,620
Second, we need a way to defer
the configuration of that task

19
00:00:52,620 --> 00:00:55,690
until after all of our build
variants have been created.

20
00:00:55,690 --> 00:01:00,130
Which really just means that we can't
configure the task until a task exists.

21
00:01:00,130 --> 00:01:03,120
The first problem is solved by
the Android Gradle Plugin itself,

22
00:01:03,120 --> 00:01:05,700
which groups all the information
to include the tasks

23
00:01:05,700 --> 00:01:08,600
associated with any given
variant into a single object.

24
00:01:08,600 --> 00:01:11,620
There are three main types of these
objects, the Application Variant,

25
00:01:11,620 --> 00:01:13,740
the Library Variant or the Test Variant.

26
00:01:13,740 --> 00:01:17,520
The type of variant we need depends on
the type of project we're building.

27
00:01:17,520 --> 00:01:18,750
Application Variants and

28
00:01:18,750 --> 00:01:23,390
Library Variants are created for Android
Applications or libraries respectively.

29
00:01:23,390 --> 00:01:26,880
And Test Variants are created for
the on device test APK.

30
00:01:26,880 --> 00:01:30,090
Each one has its own specific
properties, but they all have common

31
00:01:30,090 --> 00:01:33,110
tasks, like compiling Java,
merging resources, and so on.

32
00:01:34,340 --> 00:01:37,060
So the Android Griddle plugin is
nice enough to neatly package all

33
00:01:37,060 --> 00:01:38,610
the information about a variant for

34
00:01:38,610 --> 00:01:42,990
us, but the problem remains, how do
we reference these variant objects?

35
00:01:42,990 --> 00:01:46,160
This problem is solved by what
Gradle calls live collections.

36
00:01:46,160 --> 00:01:48,680
Essentially, as the Android
plugin creates variants,

37
00:01:48,680 --> 00:01:50,960
they are added to a fancy
type of collection.

38
00:01:50,960 --> 00:01:53,310
These collections allow us
to define configurations for

39
00:01:53,310 --> 00:01:55,260
objects that don't yet exist.

40
00:01:55,260 --> 00:01:57,660
Instead, Gradle will remember
our configuration and

41
00:01:57,660 --> 00:01:59,950
execute it when a new object is added.

42
00:01:59,950 --> 00:02:02,760
We specify this configuration
by calling the all method

43
00:02:02,760 --> 00:02:04,360
on our variant collection.

44
00:02:04,360 --> 00:02:08,110
For example, if we wanted to configure
all the Java compile tasks for

45
00:02:08,110 --> 00:02:10,970
our application variants
to add a compiler argument,

46
00:02:10,970 --> 00:02:12,620
we could do something like this.

47
00:02:12,620 --> 00:02:16,880
This will now configure each Java
compile task for each of our debug build

48
00:02:16,880 --> 00:02:20,110
types, regardless of how many
product flavors we have configured.

49
00:02:20,110 --> 00:02:21,660
Also, you don't have to try and

50
00:02:21,660 --> 00:02:24,210
guess what the final names of
each of those tasks might be.
