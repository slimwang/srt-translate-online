1
00:00:00,000 --> 00:00:05,000
Hi and welcome back to unit4 of CS215.

2
00:00:05,000 --> 00:00:10,000
We call this unit putting things in order or who is your 17th best friend.

3
00:00:10,000 --> 00:00:16,000
So, by now, you might not be surprised that I actually have a magic trick worked out

4
00:00:16,000 --> 00:00:21,000
that is, actually, in this case relevant to the topic at hand.

5
00:00:21,000 --> 00:00:28,000
So, in this magic trick, I'm going to put a bunch of animals in order with your help.

6
00:00:28,000 --> 00:00:33,000
So, here's some data, I have it stored as a Python structure at the moment.

7
00:00:33,000 --> 00:00:38,000
We caught animals--it has 11 animals in it, alphabetized dog to sparrow,

8
00:00:38,000 --> 00:00:43,000
and I've gone on the Internet and looked up the speed, how fast each of these animals is;

9
00:00:43,000 --> 00:00:46,000
it's weight, approximately in kg;

10
00:00:46,000 --> 00:00:52,000
Life span, how long they tend to live, and how big their brains are, measured in g.

11
00:00:52,000 --> 00:00:54,000
I did not go and measured these animals' brains.

12
00:00:54,000 --> 00:00:59,000
So, pretty common operation in social network analysis and lots of other problems

13
00:00:59,000 --> 00:01:02,000
is to be able to put items in order.

14
00:01:02,000 --> 00:01:07,000
So, in this particular case, we have a bunch of animals, we like to put them in order,

15
00:01:07,000 --> 00:01:09,000
but there's lots of different dimensions on which to order them.

16
00:01:09,000 --> 00:01:14,000
What we're going to do is we're going look at a linear combination of these numeric features,

17
00:01:14,000 --> 00:01:17,000
and you're going to pick from me the weight, the positive weights,

18
00:01:17,000 --> 00:01:21,000
to put on each of these different attributes and then we're going to take a sum,

19
00:01:21,000 --> 00:01:23,000
in fact, I got the code right here for you to look at.

20
00:01:23,000 --> 00:01:30,000
What I'd like you to do is run this code on this data and what you do is you call importance rank

21
00:01:30,000 --> 00:01:33,000
on this data set animals and you give it the weights.

22
00:01:33,000 --> 00:01:39,000
I gave a weight of 1 for the speed, 0.4 for the weight,

23
00:01:39,000 --> 00:01:45,000
2 for the life span, and 0.1 for the brain mass.

24
00:01:45,000 --> 00:01:50,000
So, if you would run it with this weights, it would actually compute a score for each of the animals

25
00:01:50,000 --> 00:01:54,000
and then print them out in sorted order, but I want you to give your own weight.

26
00:01:54,000 --> 00:01:56,000
Don't use mine because that wouldn't be very tricky with it.

27
00:01:56,000 --> 00:02:00,000
Any weight you want just as long as they are not negative or zero.

28
00:02:00,000 --> 00:02:04,000
But the program is going to print out are the numbers 0 through 10 for the 11 different animals

29
00:02:04,000 --> 00:02:08,000
and I want you to make a note of, I don't know, let's say the fourth highest in the list,

30
00:02:08,000 --> 00:02:10,000
the one that's associated with the number 3,

31
00:02:10,000 --> 00:02:14,000
and I want you to make note of which animal appears in this position

32
00:02:14,000 --> 00:02:16,000
and mark the corresponding circle.

33
00:02:16,000 --> 00:02:23,000
And what makes this as a magic trick is that the algorithm that I'm using, the running time is so fast,

34
00:02:23,000 --> 00:02:28,000
that it's Î¸(-n), that is to say I can compute the answer to this question

35
00:02:28,000 --> 00:02:32,000
before you've asked the question--so, I've already run this.

36
00:02:32,000 --> 00:02:36,000
I know what answer you're going to get, but now, you need to run it to make it so

37
00:02:36,000 --> 00:02:41,000
and let's see if you're right.
