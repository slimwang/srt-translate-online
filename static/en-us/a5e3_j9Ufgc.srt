1
00:00:00,260 --> 00:00:02,660
So we have seen our Function Inlining quiz.

2
00:00:02,660 --> 00:00:07,980
Now let's talk about its solution. After scheduling, how many cycles?

3
00:00:07,980 --> 00:00:11,720
Well, let's see first what the scheduling will do. We have a load.

4
00:00:11,720 --> 00:00:15,820
We have to do it before the call. And after the call we can do the store.

5
00:00:15,820 --> 00:00:20,620
So really scheduling can do nothing here. Here we need to do the multiplication.

6
00:00:20,620 --> 00:00:24,090
And then, the ADD depends on it. And then, we can only return. So really there

7
00:00:24,090 --> 00:00:27,830
is nothing scheduling can do here. So really we just need to figure out for

8
00:00:27,830 --> 00:00:31,830
this sequence of instructions. How many cycles does it take to do it?

9
00:00:31,830 --> 00:00:36,220
One way of doing that would be to say that the load begins in the first cycle.

10
00:00:36,220 --> 00:00:39,400
In the second cycle it's still going on. So, we can use the result in

11
00:00:39,400 --> 00:00:44,520
the third cycle. In the second cycle, however, we can do the call. The call also

12
00:00:44,520 --> 00:00:49,570
takes two cycles, so we're really can execute this instruction in cycle four.

13
00:00:49,570 --> 00:00:54,672
At that time, A0 is available. The multiplication takes three cycles. So

14
00:00:54,672 --> 00:00:59,492
in cycles four, five, and six, the multiplication is happening. And

15
00:00:59,492 --> 00:01:02,619
only cycle seven can we do this because it's using the result of

16
00:01:02,619 --> 00:01:08,258
this instruction. We can build a return immediately afterwards. So

17
00:01:08,258 --> 00:01:13,127
return now is happening in cycles eight and nine. And finally in cycle ten we

18
00:01:13,127 --> 00:01:17,170
are back here. And then the store of course takes only one cycle, so

19
00:01:17,170 --> 00:01:22,690
really after ten cycles we are done. Now let us see what the inlining will do.

20
00:01:22,690 --> 00:01:25,920
What it will do is it will simply take these two instructions and

21
00:01:25,920 --> 00:01:30,450
replace the call with them. Now let's see, can we do some scheduling around it?

22
00:01:30,450 --> 00:01:35,000
We need to load A0. Then we're going to use it in multiplication.

23
00:01:35,000 --> 00:01:37,472
Then we are going to use it in the addition. And

24
00:01:37,472 --> 00:01:40,270
then, we are going to use the result on it in the store. So again,

25
00:01:40,270 --> 00:01:44,490
scheduling is going to help us here. However, we have eliminated the call and

26
00:01:44,490 --> 00:01:49,980
the return. So now what happens is we have the load begins in cycle one.

27
00:01:49,980 --> 00:01:53,830
Next, we will try to do the multiplication but we can only do it in cycle three.

28
00:01:53,830 --> 00:01:57,700
Because the load needs to produce the value for two cycles in cycles one and

29
00:01:57,700 --> 00:02:01,900
two before we can use it. Next, we have the multiplication happening in

30
00:02:01,900 --> 00:02:06,270
cycles three, four and five. So we can only do this in cycle six.

31
00:02:06,270 --> 00:02:11,224
The add only takes one cycle. And the store can then happen in cycle seven. And

32
00:02:11,224 --> 00:02:15,640
that's when it finishes. So after inlining and scheduling, we have reduced this

33
00:02:15,640 --> 00:02:19,440
to seven cycles, mainly by eliminating the call and the return.
