1
00:00:00,000 --> 00:00:04,000
So let's write some Python code to solve this particular example.

2
00:00:04,000 --> 00:00:07,000
So here's a translation of that problem and the solution into Python.

3
00:00:07,000 --> 00:00:13,000
So first I have a list of the connections in that graph

4
00:00:13,000 --> 00:00:17,000
we were just looking at--nodes A through H.

5
00:00:17,000 --> 00:00:22,000
And for each of these pairs, I go through and make a link in a Graph G.

6
00:00:22,000 --> 00:00:25,000
Then I write a piece of code to list the component sizes

7
00:00:25,000 --> 00:00:28,000
for that Graph G, and here's what the output looks like.

8
00:00:28,000 --> 00:00:30,000
Then we'll go back and look at what the algorithm is.

9
00:00:30,000 --> 00:00:33,000
It goes through and identifies that there's two components.

10
00:00:33,000 --> 00:00:35,000
One we'll just name little A

11
00:00:35,000 --> 00:00:39,000
because it contains node little A; it has four nodes in it.

12
00:00:39,000 --> 00:00:42,000
Then there's a separate component that's not connected to the first one

13
00:00:42,000 --> 00:00:45,000
that contains B, and that also has four nodes.

14
00:00:45,000 --> 00:00:48,000
In fact, looking back at the graph here, that's exactly what we see.

15
00:00:48,000 --> 00:00:51,000
There's the purple nodes, which include node A,

16
00:00:51,000 --> 00:00:54,000
and then there's these blue-green nodes

17
00:00:54,000 --> 00:00:58,000
four of which are visible here that include B.

18
00:00:58,000 --> 00:01:01,000
So it finds the right stuff. How does it go about doing this?

19
00:01:01,000 --> 00:01:03,000
Well, it essentially uses the same algorithm that I did

20
00:01:03,000 --> 00:01:06,000
when I was doing it by hand, but of course it does it in code.

21
00:01:06,000 --> 00:01:10,000
The main routine that we call is called mark component.

22
00:01:10,000 --> 00:01:13,000
So that's kind of like what I was doing when I was turning nodes purple,

23
00:01:13,000 --> 00:01:16,000
and it works like this: we give it the graph that we're working on,

24
00:01:16,000 --> 00:01:19,000
the current node that we're marking,

25
00:01:19,000 --> 00:01:23,000
and data structure that keeps track of which things have been marked so far.

26
00:01:23,000 --> 00:01:25,000
Call this routine on this node,

27
00:01:25,000 --> 00:01:28,000
That's a new node; we haven't seen it before, and so we mark it.

28
00:01:28,000 --> 00:01:31,000
So that means we've visited that node, and we say

29
00:01:31,000 --> 00:01:33,000
that in this particular call to the routine

30
00:01:33,000 --> 00:01:36,000
so far we've marked exactly one node.

31
00:01:36,000 --> 00:01:38,000
Then we look at all the neighbors of that node.

32
00:01:38,000 --> 00:01:40,000
For each of them, we say

33
00:01:40,000 --> 00:01:43,000
if that neighbor of the node that we're looking at

34
00:01:43,000 --> 00:01:45,000
hasn't been marked so far,

35
00:01:45,000 --> 00:01:48,000
then what we're going to do is recursively

36
00:01:48,000 --> 00:01:50,000
call mark a component on that neighbor.

37
00:01:50,000 --> 00:01:53,000
It's going to go and get everywhere that it can get to

38
00:01:53,000 --> 00:01:55,000
that it hasn't already gotten to,

39
00:01:55,000 --> 00:01:57,000
mark them all, and return.

40
00:01:57,000 --> 00:02:00,000
What it returns is the number of nodes that it marked

41
00:02:00,000 --> 00:02:02,000
as part of this process.

42
00:02:02,000 --> 00:02:04,000
However many nodes it marked,

43
00:02:04,000 --> 00:02:06,000
we're going to add that to the total number marked.

44
00:02:06,000 --> 00:02:08,000
So we marked our current node, then we visited a neighbor

45
00:02:08,000 --> 00:02:11,000
and marked all the nodes connected to that neighbor,

46
00:02:11,000 --> 00:02:14,000
then we come back and repeat this loop

47
00:02:14,000 --> 00:02:16,000
for all the different neighbors of the node where we started.

48
00:02:16,000 --> 00:02:18,000
When that's exhausted, it means we've now reached out

49
00:02:18,000 --> 00:02:21,000
and touched all the nodes that are touchable

50
00:02:21,000 --> 00:02:23,000
from node node.

51
00:02:23,000 --> 00:02:27,000
And so we return the total that were actually marked as part of this process

52
00:02:27,000 --> 00:02:29,000
and then it's done.

53
00:02:29,000 --> 00:02:31,000
So that's the main routine that does all the hard work..

54
00:02:31,000 --> 00:02:33,000
There's also a routine on the outside

55
00:02:33,000 --> 00:02:35,000
that takes a graph

56
00:02:35,000 --> 00:02:37,000
and starts off saying nothing's been marked so far.

57
00:02:37,000 --> 00:02:39,000
We just have an empty data structure.

58
00:02:39,000 --> 00:02:42,000
Then what we're going to do is loop through all the nodes in the graph

59
00:02:42,000 --> 00:02:44,000
because we don't know which ones are going to be the beginnings

60
00:02:44,000 --> 00:02:47,000
of a new component or not.

61
00:02:47,000 --> 00:02:50,000
For each one that we visit, we say if that node hasn't been marked

62
00:02:50,000 --> 00:02:53,000
in some previous iteration, then we've got a new component.

63
00:02:53,000 --> 00:02:56,000
This node that we're just visiting is a part of that component.

64
00:02:56,000 --> 00:03:00,000
So we say, "Hey, we've got a component containing node node."

65
00:03:00,000 --> 00:03:02,000
Then what we do is we recursively go

66
00:03:02,000 --> 00:03:04,000
and mark all the things connected to that node,

67
00:03:04,000 --> 00:03:08,000
count up how many things got marked in that way, and then we return.

68
00:03:08,000 --> 00:03:11,000
So what we know is there was a component, it contained node node,

69
00:03:11,000 --> 00:03:13,000
and it has a certain count to it.

70
00:03:13,000 --> 00:03:15,000
When it's done that, it moves on to the next node.

71
00:03:15,000 --> 00:03:17,000
A bunch of these have probably already been marked,

72
00:03:17,000 --> 00:03:19,000
so they just get skipped really quickly,

73
00:03:19,000 --> 00:03:22,000
but eventually it maybe reaches a node that hasn't been marked

74
00:03:22,000 --> 00:03:24,000
because it wasn't connected to anything so far.

75
00:03:24,000 --> 00:03:26,000
Prints that one out and continues.

76
00:03:26,000 --> 00:03:29,000
So this really is very explicitly what we were doing by hand,

77
00:03:29,000 --> 00:03:32,000
just one piece at a time.
