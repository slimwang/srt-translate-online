1
00:00:00,450 --> 00:00:03,730
Building something that looks great in the visual layout editor is the easy

2
00:00:03,730 --> 00:00:08,960
part. You also need to consider different screens and orientations. As you

3
00:00:08,960 --> 00:00:12,460
begin to layout your UI, there's a temptation to build it pixel perfect for

4
00:00:12,460 --> 00:00:16,120
the device you happen to be using at the time. This is reinforced by

5
00:00:16,120 --> 00:00:20,320
the fact that your apps window doesn't generally change size while it's running.

6
00:00:20,320 --> 00:00:22,720
So you can't just grab the lower i-corner and grow and

7
00:00:22,720 --> 00:00:26,530
shrink your app to see how it behaves. But if you've ever developed for

8
00:00:26,530 --> 00:00:29,660
the web or desktop, you know this static approach is a bad idea.

9
00:00:30,760 --> 00:00:36,950
When Android first launched, HVGA 480 by 320 resolution screens were standard.

10
00:00:36,950 --> 00:00:41,260
As we began exploring how to build engaging user experiences on those devices,

11
00:00:41,260 --> 00:00:44,650
we could use absolute layouts to define the exact location of each

12
00:00:44,650 --> 00:00:50,840
screen element. But within a year, the first WVGA Android phones were released.

13
00:00:50,840 --> 00:00:54,850
And now Android runs on everything from phones to phablets, tablets, TVs and

14
00:00:54,850 --> 00:01:00,030
wearables with any screen size, resolution and aspect ratio you can imagine.

15
00:01:00,030 --> 00:01:03,008
So, just like desktop or web where you might use panels or

16
00:01:03,008 --> 00:01:07,104
CSS, your Android UI needs to scale based on the screen it's running within,

17
00:01:07,104 --> 00:01:09,546
which is why absolute layout was deprecated.

18
00:01:09,546 --> 00:01:14,284
[BLANK_AUDIO]

19
00:01:14,284 --> 00:01:17,559
In favor of layouts like LinearLayout, RelativeLayout and

20
00:01:17,559 --> 00:01:20,063
GridLayout, they can dynamically resize and

21
00:01:20,063 --> 00:01:23,930
adapt to any screen, following the principles of responsive design.
