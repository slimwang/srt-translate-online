1
00:00:00,250 --> 00:00:04,375
Another situation in which nested loops often arise is image editing. In the

2
00:00:04,375 --> 00:00:08,096
past we've traversed the pixels of an image in a single loop going a row at a

3
00:00:08,096 --> 00:00:12,516
time. But there are many situations when it makes more sense to make separate

4
00:00:12,516 --> 00:00:16,690
loops for the rows and columns. For example suppose that we want to have this

5
00:00:16,690 --> 00:00:21,644
effect where we hide all of the pixels that are outside the circle. In this

6
00:00:21,644 --> 00:00:26,774
case, you will want to know what the x and y position of the pixels are. Given

7
00:00:26,774 --> 00:00:30,804
values for x and y, you can get a pixel by calling a method called getColorAt

8
00:00:30,804 --> 00:00:34,769
and similarly there's a setColorAt that lets you set the color at an x and y

9
00:00:34,769 --> 00:00:40,447
location. To get this effect then, we will want to loop through all of the

10
00:00:40,447 --> 00:00:43,867
possible x's and all of the possible y's with coordinates x, y and see how

11
00:00:43,867 --> 00:00:49,750
close it is to the center point. If this distance is less than the radius of

12
00:00:49,750 --> 00:00:54,233
the circle, then we want to leave the pixel untouched. But for a point out

13
00:00:54,233 --> 00:00:57,773
here, where the distance is greater than the radius, we want to color this

14
00:00:57,773 --> 00:01:03,100
point black by calling setColorAt. Here's the outline of the program. Two

15
00:01:03,100 --> 00:01:07,635
nested loops for all values of x and y. Compute the distance. The problem gives

16
00:01:07,635 --> 00:01:11,057
you the general formula for computing that and then go ahead and do the

17
00:01:11,057 --> 00:01:12,670
coloring.
