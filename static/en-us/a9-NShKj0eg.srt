1
00:00:00,050 --> 00:00:03,440
We've already seen a few commands
that work with file names.

2
00:00:03,440 --> 00:00:07,740
For example, ls lists the files
in the current directory.

3
00:00:07,740 --> 00:00:10,114
Right now we have just one file,
things.zip.

4
00:00:10,114 --> 00:00:13,390
Let's go ahead and unzip that so
we have more files to work with.

5
00:00:13,390 --> 00:00:17,600
If you didn't download thing.zip earlier
refer to the instructors note below for

6
00:00:17,600 --> 00:00:18,810
instructions.

7
00:00:18,810 --> 00:00:21,360
The unzip command typically
takes one argument.

8
00:00:21,360 --> 00:00:23,970
The file name of the file to unzip.

9
00:00:23,970 --> 00:00:28,060
As it works, unzip lists the files and
directories it's uncompressing.

10
00:00:28,060 --> 00:00:30,690
Let's use ls to see all these new files.

11
00:00:30,690 --> 00:00:33,810
It looks like we have some text
files and some directories too.

12
00:00:33,810 --> 00:00:37,550
Another useful command is cat,
give cat a list of file names and

13
00:00:37,550 --> 00:00:39,900
it'll print out
the contents of the files.

14
00:00:39,900 --> 00:00:42,280
For example,
we can read bivalves.txt and

15
00:00:42,280 --> 00:00:45,360
gastropods.txt by running this command.

16
00:00:45,360 --> 00:00:47,140
Cat is a funny name for a command.

17
00:00:47,140 --> 00:00:50,790
But it makes sense when you realize
it's an abbreviation for concatenate.

18
00:00:50,790 --> 00:00:53,900
Cat, concatenate files,
and outputs the result.

19
00:00:53,900 --> 00:00:56,090
You can also use cat
to read a single file.

20
00:00:56,090 --> 00:00:58,290
Just give it one file name.

21
00:00:58,290 --> 00:01:02,220
A lot of people use cat as their go
to command for reading short files.

22
00:01:02,220 --> 00:01:03,430
Later on in the course,

23
00:01:03,430 --> 00:01:07,130
we'll learn other ways of reading files
that work well with larger files.

24
00:01:07,130 --> 00:01:09,880
If you were watching closely you may
have noticed that I was able to type

25
00:01:09,880 --> 00:01:12,250
those commands with super human speed.

26
00:01:12,250 --> 00:01:13,970
I'm not actually a very
good typist though,

27
00:01:13,970 --> 00:01:18,800
I was just using one of the shells built
in time saving features, tab completion.

28
00:01:18,800 --> 00:01:20,940
If you press the tab key
while typing a word,

29
00:01:20,940 --> 00:01:23,260
the shell will try to
autocomplete it for you.

30
00:01:23,260 --> 00:01:30,020
For example, I can cat bivalves.txt
by tapping cat bi and pressing tab.

31
00:01:30,020 --> 00:01:34,230
Since bivalves.txt is the only
file that starts with bi,

32
00:01:34,230 --> 00:01:36,360
the shell can autocomplete it for me.

33
00:01:36,360 --> 00:01:38,550
But what happens if you use tab
completion when there's more than

34
00:01:38,550 --> 00:01:39,700
one match?

35
00:01:39,700 --> 00:01:40,710
Let's try it.

36
00:01:40,710 --> 00:01:46,673
Two files start with gas,
gastropods.txt and gastropodsdraft.txt.

37
00:01:46,673 --> 00:01:50,830
When I hit the tab key, the shell
auto completes as far as it can.

38
00:01:50,830 --> 00:01:54,550
If I hit tab again, the shell will
tell me all the files that match.

39
00:01:54,550 --> 00:01:57,260
Since I want to read
gastropods_drafts.txt I

40
00:01:57,260 --> 00:02:01,970
can type an underscore and press tab
again to enter the complete file name.

41
00:02:01,970 --> 00:02:04,870
All right, we've read files
from the command line, but

42
00:02:04,870 --> 00:02:06,300
we can do more than that.

43
00:02:06,300 --> 00:02:09,038
There are also commands for
analyzing files.

44
00:02:09,038 --> 00:02:11,038
WC is the word count program.

45
00:02:11,038 --> 00:02:15,420
It tells us how many lines,
words, and bytes are in a file.

46
00:02:15,420 --> 00:02:18,410
Since bivalves.txt has
one species per line and

47
00:02:18,410 --> 00:02:23,030
two lines of citations, we know that the
file describes ten different critters.

48
00:02:23,030 --> 00:02:25,810
Another command for
analyzing files is diff.

49
00:02:25,810 --> 00:02:28,730
Diff compares files and
shows you how they differ.

50
00:02:28,730 --> 00:02:30,630
This can be useful if you
have multiple versions or

51
00:02:30,630 --> 00:02:34,350
editions of the same file and you want
to know what changes have been made.

52
00:02:34,350 --> 00:02:38,460
In this case, it looks like
a left file gastropods.txt has

53
00:02:38,460 --> 00:02:42,420
one line that the right file
gatropods_draft doesn't have.

54
00:02:42,420 --> 00:02:45,280
This little angle bracket points in
the direction of the file that includes

55
00:02:45,280 --> 00:02:45,800
that change
