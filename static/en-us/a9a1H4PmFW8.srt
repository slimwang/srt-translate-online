1
00:00:00,000 --> 00:00:02,000
[Norvig] Here is the algorithm I was able to come up with.

2
00:00:02,000 --> 00:00:04,000
Knuth calls it Algorithm P.

3
00:00:04,000 --> 00:00:08,000
Other people have discovered it before him, so it's been discovered over and over again.

4
00:00:08,000 --> 00:00:15,000
The idea is you just go through the deck and make 1 swap for each of the index i.

5
00:00:15,000 --> 00:00:18,000
And what we swap it with gives an equal chance

6
00:00:18,000 --> 00:00:22,000
for any of the items that haven't been seen yet to occur in position i.

7
00:00:22,000 --> 00:00:28,000
So again, we've got our deck and we're going through 1 at a time

8
00:00:28,000 --> 00:00:31,000
looking at each position.

9
00:00:31,000 --> 00:00:37,000
And when we get to a general position i, we're going to swap i

10
00:00:37,000 --> 00:00:41,000
with the range from i through to the end.

11
00:00:41,000 --> 00:00:46,000
So we're going to pick out for this element i any one of these elements

12
00:00:46,000 --> 00:00:48,000
and then swap them.

13
00:00:48,000 --> 00:00:52,000
Say we pick this one. Then we would swap those 2.

14
00:00:52,000 --> 00:00:55,000
And then we would move on to the next position of i.

15
00:00:55,000 --> 00:00:59,000
So the very first element we pick any element in the array,

16
00:00:59,000 --> 00:01:01,000
swap it into the first position,

17
00:01:01,000 --> 00:01:06,000
then we look at the second element and pick any element from the second on,

18
00:01:06,000 --> 00:01:09,000
swap it into that position and so on.

19
00:01:09,000 --> 00:01:11,000
And so we can see that every element in the array

20
00:01:11,000 --> 00:01:15,000
has an equal opportunity to appear at each position.

21
00:01:15,000 --> 00:01:21,000
So the qualities of this algorithm that I like is that it's so simple and clear.

22
00:01:21,000 --> 00:01:23,000
It just says in 1 statement.

23
00:01:23,000 --> 00:01:28,000
It makes it obvious that each location i can have any of the elements of the deck

24
00:01:28,000 --> 00:01:30,000
with equal probability.

25
00:01:30,000 --> 00:01:34,000
Now, there's one part of it, I guess, which is not the most clear,

26
00:01:34,000 --> 00:01:36,000
which is are we exactly right here?

27
00:01:36,000 --> 00:01:40,000
Here we've got N and here we've got N - 1, and that should bother you a little bit.

28
00:01:40,000 --> 00:01:42,000
Do we have this right?

29
00:01:42,000 --> 00:01:44,000
In general, ranges are tricky in Python

30
00:01:44,000 --> 00:01:48,000
because ranges go from--

31
00:01:48,000 --> 00:01:54,000
If we say random range from i to N, it's not going all the way up to N;

32
00:01:54,000 --> 00:01:57,000
it's only going to N - 1. And the same thing here.

33
00:01:57,000 --> 00:02:03,000
If we say from range to N - 1, actually the biggest number there is N - 2,

34
00:02:03,000 --> 00:02:06,000
but there's N - 1 of them because we include 0.

35
00:02:06,000 --> 00:02:09,000
So ranges are always a little bit tricky. We can have these off by 1 errors.

36
00:02:09,000 --> 00:02:12,000
We want to make sure that we got this right,

37
00:02:12,000 --> 00:02:14,000
and so let's have another quiz.

38
00:02:14,000 --> 00:02:21,000
The quiz is, for that statement for i in range (N - 1),

39
00:02:21,000 --> 00:02:27,000
what would happen if we replaced the (N - 1) with an N?

40
00:02:27,000 --> 00:02:31,000
And the options are, would that give us an index error

41
00:02:31,000 --> 00:02:35,000
that we've gone too far into the deck and we have the wrong index?

42
00:02:35,000 --> 00:02:38,000
Would it give us a value error from random range?

43
00:02:38,000 --> 00:02:41,000
Would it tell us, "You've got the wrong number in there"?

44
00:02:41,000 --> 00:02:45,000
Would it give us no error but the results would be unfair

45
00:02:45,000 --> 00:02:50,000
in that 1 permutation of the deck might be more common or more probable than another?

46
00:02:50,000 --> 00:02:56,000
Or would it give us no error and still be fair but maybe just a little bit slower?
