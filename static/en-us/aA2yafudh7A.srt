1
00:00:00,000 --> 00:00:03,000
Now, I'm going to talk about the question--What does it mean when we have code

2
00:00:03,000 --> 00:00:06,000
that doesn't get covered--for example, if we're using statement coverage,

3
00:00:06,000 --> 00:00:08,000
what happens when we have some statements that we haven't been able to cover?

4
00:00:08,000 --> 00:00:13,000
There're basically 3 possibilities. The first possibility is that the uncovered code was simply infeasible.

5
00:00:13,000 --> 00:00:15,000
An infeasible code means exactly what it sounds like.

6
00:00:15,000 --> 00:00:17,000
It's a code that can't be executed under any circumstances.

7
00:00:17,000 --> 00:00:21,000
Let's say that we're writing the check Rep function for a balance tree-data structure

8
00:00:21,000 --> 00:00:24,000
At some point in the check Rep, we're going to assert that the tree is balanced

9
00:00:24,000 --> 00:00:26,000
then in the implementation of the balanced method,

10
00:00:26,000 --> 00:00:30,000
we're going to check if the left subtree and right subtree have the same height,

11
00:00:30,000 --> 00:00:32,000
and if not, we're going to return false.

12
00:00:32,000 --> 00:00:36,000
If the tree becomes unbalance, we're going to return false causing an assertion evaluation.

13
00:00:36,000 --> 00:00:39,000
Assuming that the code is not bugged and assuming that we're testing a correct tree,

14
00:00:39,000 --> 00:00:41,000
we'll never going to be able to return false from a balanced function.

15
00:00:41,000 --> 00:00:43,000
And of course, a coverage tool is going to tell us,

16
00:00:43,000 --> 00:00:47,000
we failed to achieve code coverage for this particular statement in the code.

17
00:00:47,000 --> 00:00:49,000
We have to ask ourselves, is that a bad thing?

18
00:00:49,000 --> 00:00:51,000
Is that bad that we failed to execute this line of code,

19
00:00:51,000 --> 00:00:54,000
and of course, it's not bad because that code only can execute if we made a mistake somewhere.

20
00:00:54,000 --> 00:00:56,000
So, the proper response to this kind of situation is,

21
00:00:56,000 --> 00:01:00,000
we just need to tell our coverage tool that we believe this line to be infeasible

22
00:01:00,000 --> 00:01:03,000
and then the tool won't count this line against us when we're measuring code coverage,

23
00:01:03,000 --> 00:01:07,000
and so let's look an example of this--we have here is an open source AVL tree.

24
00:01:07,000 --> 00:01:10,000
An AVL tree is somewhat analogous to the splay tree that we already looked at.

25
00:01:10,000 --> 00:01:13,000
in the sense that it's a self-balancing binary search tree.

26
00:01:13,000 --> 00:01:15,000
As you can see, there's quite a lot of code here.

27
00:01:15,000 --> 00:01:17,000
AVL tree has a reputation for being fairly complicated as these things go.

28
00:01:17,000 --> 00:01:20,000
The code comes with its own test suite so let's run it under the coverage monitor.

29
00:01:20,000 --> 00:01:22,000
Okay. Now, let's look at the output.

30
00:01:22,000 --> 00:01:26,000
You could see here that out of the 389 statements in the AVL tree we failed to run 61 of them

31
00:01:26,000 --> 00:01:28,000
and 20 branches were partially executed.

32
00:01:28,000 --> 00:01:31,000
So, you can see that there're some various minor failures of the test,

33
00:01:31,000 --> 00:01:33,000
which exercise interesting behaviors.

34
00:01:33,000 --> 00:01:37,000
So, here is the AVL tree standard recheck function and what it does is check a bunch of properties

35
00:01:37,000 --> 00:01:41,000
of the AVL tree and if any of them fail, raises an exception.

36
00:01:41,000 --> 00:01:45,000
Every statement here that raises an exception has failed to have been covered,

37
00:01:45,000 --> 00:01:47,000
and then the branches which test the condition,

38
00:01:47,000 --> 00:01:49,000
which leads to raising the exception only partially covered.

39
00:01:49,000 --> 00:01:52,000
So superficially, we haven't gotten very good coverage of this function,

40
00:01:52,000 --> 00:01:55,000
but actually, of course, what we hope is that this AVL tree code is correct

41
00:01:55,000 --> 00:01:57,000
and these are truly infeasible.

42
00:01:57,000 --> 00:02:01,000
And if we really believe that, what we can start doing is go ahead and start telling the coverage tool

43
00:02:01,000 --> 00:02:05,000
to ignore this and the way we do that is to go back to the source code

44
00:02:05,000 --> 00:02:09,000
and left some of this with a comment that has a special form pragma, no cover.

45
00:02:09,000 --> 00:02:12,000
And then we go ahead do this for the rest of these and we should see that it does sort of thing.

46
00:02:12,000 --> 00:02:14,000
All right. So, now we run the coverage tool again and see if things look a little bit better.

47
00:02:14,000 --> 00:02:16,000
Okay. Good. We'll, it's starting to get all of this code.

48
00:02:16,000 --> 00:02:19,000
But we can see now that the coverage tool has marked these in sort of a light gray color

49
00:02:19,000 --> 99:59:59,999
indicating that it's ignoring the fact that they weren't coverage because we told it to.
