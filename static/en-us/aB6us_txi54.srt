1
00:00:00,450 --> 00:00:03,370
So we just recapped different
layout managers and

2
00:00:03,370 --> 00:00:08,050
looked at how you'd use various layouts
together to create some example screens.

3
00:00:08,050 --> 00:00:11,570
As you probably noticed we started using
these circles and buttons and toolbars.

4
00:00:11,570 --> 00:00:15,900
Let's start diving a little deeper into
what some of those elements were and

5
00:00:15,900 --> 00:00:18,320
why they keep appearing
all over the place.

6
00:00:18,320 --> 00:00:21,040
Now each application is
an individual snowflake

7
00:00:21,040 --> 00:00:23,090
with different content and goals.

8
00:00:23,090 --> 00:00:26,100
Just because they're unique though, it
doesn't mean that we should force users

9
00:00:26,100 --> 00:00:28,300
to learn new conventions
to operate them.

10
00:00:28,300 --> 00:00:31,240
By following some established
patterns of the platform, you

11
00:00:31,240 --> 00:00:35,320
can accelerate your users understanding
of the app, making it feel intuitive.

12
00:00:35,320 --> 00:00:38,370
Imagine if every model of car had
a different layout of the pedals,

13
00:00:38,370 --> 00:00:40,080
the steering wheel and the levers.

14
00:00:40,080 --> 00:00:42,090
While you might be able to
learn one model you'd have

15
00:00:42,090 --> 00:00:44,065
a hard time moving to another.

16
00:00:44,065 --> 00:00:46,390
Your UI is exactly the same.

17
00:00:46,390 --> 00:00:50,880
By following some conventions users
can quickly get in and drive your app.

18
00:00:50,880 --> 00:00:53,570
Here is some of the most
prevalent patterns used on Android

19
00:00:53,570 --> 00:00:56,690
to organize your interface and
navigate around it.

20
00:00:56,690 --> 00:00:58,360
A Toolbar is a horizontal bar,

21
00:00:58,360 --> 00:01:02,830
which provides a standard way to
present titles and actions in your lab.

22
00:01:02,830 --> 00:01:07,400
It's made up of a navigation
area on the left, a title area,

23
00:01:07,400 --> 00:01:10,060
and the menu of actions.

24
00:01:10,060 --> 00:01:14,070
It's a very flexible widget, and
each of these function is optional.

25
00:01:14,070 --> 00:01:17,460
A nice feature is that the toolbar can
show actions either directly within

26
00:01:17,460 --> 00:01:21,240
the tool bar, or they can be collapsed
under a sub menu known as an overflow

27
00:01:21,240 --> 00:01:22,110
if there isn't enough room.

28
00:01:22,110 --> 00:01:25,000
And it will base it's decision
on whether there's enough room

29
00:01:25,000 --> 00:01:26,540
to show everything.

30
00:01:26,540 --> 00:01:31,116
Tapping the overflow item itself yields
this overflow menu of additional actions

31
00:01:31,116 --> 00:01:32,500
you can take.

32
00:01:32,500 --> 00:01:35,780
The toolbar itself is a view group,
so you can add children to it.

33
00:01:35,780 --> 00:01:38,800
For example,
I could add a Spinner Control

34
00:01:38,800 --> 00:01:42,450
as a child view to provide some
kind of navigational control.

35
00:01:42,450 --> 00:01:44,960
Now, toolbars are used
extensively in Android.

36
00:01:44,960 --> 00:01:49,340
So they're very recognizable to your
users, and a common place to look for

37
00:01:49,340 --> 00:01:50,820
actions or present them.

38
00:01:50,820 --> 00:01:56,100
They generally use a standard
height which varies by screen size,

39
00:01:56,100 --> 00:02:00,090
and can be queried using
the actionBarSize Free match P.

40
00:02:00,090 --> 00:02:03,350
They're also a great place
to embed your brand's color.

41
00:02:03,350 --> 00:02:04,820
Next, the App bar.

42
00:02:04,820 --> 00:02:07,340
The app bar is just
a special case of a toolbar,

43
00:02:07,340 --> 00:02:10,330
where it's placed at
the very top of the screen.

44
00:02:10,330 --> 00:02:13,800
As such, the title field often
provides a screen title.

45
00:02:13,800 --> 00:02:19,090
And the navigation icon provides access
to screen level navigation options.

46
00:02:19,090 --> 00:02:23,540
The app bar often uses an extended
height to provide more space for

47
00:02:23,540 --> 00:02:26,015
branding or to contain a header image.

48
00:02:26,015 --> 00:02:29,795
In this case it's using multiples
of the standard height.

49
00:02:29,795 --> 00:02:31,295
Next up Tabs.

50
00:02:31,295 --> 00:02:32,825
Tabs let you organize and

51
00:02:32,825 --> 00:02:35,925
navigate to different sections
within your screen or app.

52
00:02:35,925 --> 00:02:39,080
On Android, tabs always appear
at the top of the screen.

53
00:02:39,080 --> 00:02:42,710
And you can switch between them
using a horizontal swipe gesture.

54
00:02:42,710 --> 00:02:46,640
Generally, they sit on the same surface
as your app bar, if you're using one.

55
00:02:46,640 --> 00:02:49,520
Now, tabs can be a great way to
provide the main way of navigating

56
00:02:49,520 --> 00:02:50,138
about your app.

57
00:02:50,138 --> 00:02:54,027
Or providing sub-navigation if
you're using a different top-level

58
00:02:54,027 --> 00:02:55,190
navigation construct.

59
00:02:55,190 --> 00:02:57,940
Such as a Navigation Drawer.

60
00:02:57,940 --> 00:03:00,700
Now a Navigation Drawer is a panel
that slides in from the left of

61
00:03:00,700 --> 00:03:04,010
the screen and it contains
the top level navigation options

62
00:03:04,010 --> 00:03:06,050
to different parts of your application.

63
00:03:06,050 --> 00:03:08,590
The drawer itself can be
divided into sections and

64
00:03:08,590 --> 00:03:12,520
frequently provides access to account
information here in this top area.

65
00:03:12,520 --> 00:03:15,800
Now, the drawer is closely associated
with the so-called hamburger icon.

66
00:03:15,800 --> 00:03:17,930
This three-line icon in your toolbar.

67
00:03:17,930 --> 00:03:19,070
Either pressing this or

68
00:03:19,070 --> 00:03:22,910
dragging from the left edge of
your device will open the drawer.

69
00:03:22,910 --> 00:03:25,490
The drawer can work well if you
have a number of different sections

70
00:03:25,490 --> 00:03:27,970
that you want to provide
quick navigation to

71
00:03:27,970 --> 00:03:30,970
without taking up persistent
space on every screen.

72
00:03:30,970 --> 00:03:34,340
However, if you don't need this, say if
you only have a few sections to navigate

73
00:03:34,340 --> 00:03:37,390
between, then a different pattern,
like tabs

74
00:03:37,390 --> 00:03:41,200
might be more relevant as they're
going to be more obvious to your users.

75
00:03:41,200 --> 00:03:43,440
It's also important to use restraint and

76
00:03:43,440 --> 00:03:46,680
thoughtfully select items to
put in the navigation drawer.

77
00:03:46,680 --> 00:03:50,160
It shouldn't become a dumping ground for
all the things.

78
00:03:50,160 --> 00:03:54,190
Android also has pretty common
patterns around Scrolling and Paging.

79
00:03:54,190 --> 00:03:56,920
Users are typically comfortable
with scrolling vertically to see

80
00:03:56,920 --> 00:03:58,620
more information on the screen.

81
00:03:58,620 --> 00:04:02,080
Horizontal scrolling is less common,
especially with text content,

82
00:04:02,080 --> 00:04:04,220
as it can be frustrating to read.

83
00:04:04,220 --> 00:04:07,920
More common is to use a horizontal
gesture to page through content.

84
00:04:07,920 --> 00:04:11,640
So, each gesture takes you to one
screen page, back or forward.

85
00:04:11,640 --> 00:04:13,860
So for example,
if you're reading emails or

86
00:04:13,860 --> 00:04:17,089
news stories,
then it's a very useful pattern.

87
00:04:17,089 --> 00:04:21,615
Horizontal Paging is especially common
for a details view launched from a list,

88
00:04:21,615 --> 00:04:26,125
where you have a mental model of what
the next page of items might be.

89
00:04:26,125 --> 00:04:28,765
Note, that as we just
covered in the tab section,

90
00:04:28,765 --> 00:04:31,650
horizontal swipes should
change pages between tabs.

91
00:04:31,650 --> 00:04:35,130
So the effort is kind of
incompatible to use both tabs and

92
00:04:35,130 --> 00:04:37,310
horizontally paid content.

93
00:04:37,310 --> 00:04:40,570
Another extremely common pattern
on Android is List to Details,

94
00:04:40,570 --> 00:04:44,370
where you would show a list
of individual items and

95
00:04:44,370 --> 00:04:48,040
clicking on one would take you
to a subsequent detail screen.

96
00:04:48,040 --> 00:04:50,020
You've probably used this 100 times.

97
00:04:50,020 --> 00:04:54,430
Such as viewing your contacts or
reading news stories for example.

98
00:04:54,430 --> 00:04:57,510
A variation on this pattern
is to show both the list and

99
00:04:57,510 --> 00:05:00,710
detail sections on the same
screen on larger devices.

100
00:05:00,710 --> 00:05:04,040
So here these two screen would be
separate on a small device and

101
00:05:04,040 --> 00:05:06,220
brought together on a larger device.

102
00:05:06,220 --> 00:05:09,540
Showing just a list on a large
screen can look awkward and

103
00:05:09,540 --> 00:05:11,480
leave a lot of empty space.

104
00:05:11,480 --> 00:05:15,440
Additionally, showing both items at once
can allow you to obtain more context

105
00:05:15,440 --> 00:05:19,523
about the activity you're performing and
prevents what we call Pogosticking.

106
00:05:19,523 --> 00:05:22,561
Where the user is forced to go
into details and back up, and

107
00:05:22,561 --> 00:05:24,000
into a details and back up.

108
00:05:24,000 --> 00:05:26,500
We'll go into much more
detail on other patterns for

109
00:05:26,500 --> 00:05:27,900
larger screens in lesson five.

110
00:05:27,900 --> 00:05:32,440
Now it's absolutely okay to
deviate from these patterns if and

111
00:05:32,440 --> 00:05:35,500
when it makes sense for
your specific use case.

112
00:05:35,500 --> 00:05:38,670
These are patterns after all,
not strict rules.

113
00:05:38,670 --> 00:05:40,390
But make sure you're doing so for

114
00:05:40,390 --> 00:05:45,000
good reasons, as you'll be asking your
users to learn a bespoke interaction.

115
00:05:45,000 --> 00:05:48,530
The phrase I like to use here
is deviate with purpose.

116
00:05:48,530 --> 00:05:50,210
Picking an application's structure and

117
00:05:50,210 --> 00:05:53,860
navigation scheme depends on
the content in your application.

118
00:05:53,860 --> 00:05:58,150
A good exercise is to sketch out
an Entity Relationship Diagram.

119
00:05:58,150 --> 00:06:00,180
This shows the objects
in your application and

120
00:06:00,180 --> 00:06:01,320
how they relate to each other.

121
00:06:02,650 --> 00:06:05,520
Once you understand this, you can pick
an application structure to match.
