1
00:00:00,000 --> 00:00:04,000
The next thing we're going to learn about is how do we parse XML?

2
00:00:04,000 --> 00:00:06,000
Now, I'm not going make you write an actual parser.

3
00:00:06,000 --> 00:00:12,000
I think there's actually probably a whole class in Udacity learning how to do almost exactly that.

4
00:00:12,000 --> 00:00:15,000
What I'm going to show you how to do is use the built-in parser in Python.

5
00:00:15,000 --> 00:00:20,000
Python has a library called "minidom," and you can get it by saying something like this:

6
00:00:20,000 --> 00:00:24,000
Now, one thing I would like to point out real quick here is when you're working with XML

7
00:00:24,000 --> 00:00:27,000
you'll often see this word "dom" up here.

8
00:00:27,000 --> 00:00:30,000
What this stands for is "document object model."

9
00:00:30,000 --> 00:00:38,000
This basically refers to the internal representation of an XML document.

10
00:00:38,000 --> 00:00:46,000
In Python you would have an object that has a list of children,

11
00:00:46,000 --> 00:00:49,000
and each of these children is some sort of tag object,

12
00:00:49,000 --> 00:00:53,000
and a tag object may have a name and an attribute and contents and that sort of thing.

13
00:00:53,000 --> 00:00:56,000
Any time you're dealing with XML programmatically,

14
00:00:56,000 --> 00:00:59,000
you'll see references to a dom,

15
00:00:59,000 --> 00:01:03,000
or if you're working in your browser, you'll see references to "the dom,"

16
00:01:03,000 --> 00:01:09,000
which kind of refers to the document, the HTML that you're manipulating programmatically.

17
00:01:09,000 --> 00:01:12,000
In this particular case we're going to use minidom.

18
00:01:12,000 --> 00:01:15,000
Why is it called minidom and not something else?

19
00:01:15,000 --> 00:01:20,000
Well, "mini" kind of implies that this is a smaller, lightweight version of this dom parser.

20
00:01:20,000 --> 00:01:24,000
Actually, parsing XML is actually a really complicated thing, because you can get XML

21
00:01:24,000 --> 00:01:28,000
that is many, many gigabytes large sometimes.

22
00:01:28,000 --> 00:01:31,000
Parsing all of that text is nontrivial.

23
00:01:31,000 --> 00:01:35,000
But when you're only parsing a little bit of text, you can use this library minidom,

24
00:01:35,000 --> 00:01:40,000
which is basically simple and fast and will break if you throw lots and lots of gigabytes of text at it

25
00:01:40,000 --> 00:01:42,000
but for our purposes will work just great.

26
00:01:42,000 --> 00:01:45,000
I'm not going to quiz you on this sort of stuff. Just kind of carry this with you.

27
00:01:45,000 --> 00:01:49,000
Dom refers to the computer representation of the XML,

28
00:01:49,000 --> 00:01:53,000
and minidom is a handy library for manipulating this stuff in Python.

29
00:01:53,000 --> 00:01:56,000
Now I will show you how to use it. Here we are in Python.

30
00:01:56,000 --> 00:02:00,000
I'm going to give you a little demo of minidom before you start using it on your own.

31
00:02:00,000 --> 00:02:05,000
From xml.dom import minidom.

32
00:02:05,000 --> 00:02:07,000
Now we have our minidom.

33
00:02:07,000 --> 00:02:10,000
Minidom has a function on it called "parseString,"

34
00:02:10,000 --> 00:02:13,000
which is a function for just parsing a string of XML.

35
00:02:13,000 --> 00:02:15,000
Let's go ahead and give that a whirl.

36
00:02:15,000 --> 00:02:18,000
I've typed up some example HTML.

37
00:02:18,000 --> 00:02:23,000
We have an opening , some text, an opening tag--

38
00:02:23,000 --> 00:02:25,000
remember these tag names I'm just making up.

39
00:02:25,000 --> 00:02:28,000
HTML has specific tags that you need to use.

40
00:02:28,000 --> 00:02:30,000
XML you can have whatever arbitrary tags you want.

41
00:02:30,000 --> 00:02:34,000
It's up to the people reading and writing the XML to agree on the tag names.

42
00:02:34,000 --> 00:02:37,000
I created some items--item 1, item 2.

43
00:02:37,000 --> 00:02:39,000
I closed my tag and I closed my .

44
00:02:39,000 --> 00:02:44,000
Now, when I was typing this, I had a little typo here, and I'm kind of curious to see what happens.

45
00:02:44,000 --> 00:02:50,000
Let's go ahead and run this with the typo and see--oh, boy! [chuckles]

46
00:02:50,000 --> 00:02:55,000
So I ran this with the typo to see what would happen, and we get an error--a mismatched tag.

47
00:02:55,000 --> 00:02:57,000
That kind of makes sense.

48
00:02:57,000 --> 00:03:02,000
We have an opening "chilrdren" and a closing "children."

49
00:03:02,000 --> 00:03:04,000
Let's just make this proper.

50
00:03:04,000 --> 00:03:07,000
Okay, we're going to run this without the type, and I'm going to store it in a variable

51
00:03:07,000 --> 00:03:09,000
so I have access to it. I'll call it x.

52
00:03:09,000 --> 00:03:11,000
All right. This time no exception.

53
00:03:11,000 --> 00:03:15,000
If we were to take a peak at x, we can see we have this minidom document instance.

54
00:03:15,000 --> 00:03:17,000
Let's take a peak at what we have on x.

55
00:03:17,000 --> 00:03:22,000
Holy smokes! Look at all this stuff.

56
00:03:22,000 --> 00:03:25,000
There is a lot of interesting things here in x.

57
00:03:25,000 --> 00:03:31,000
It looks like appendchild, functions for manipulating the document,

58
00:03:31,000 --> 00:03:33,000
all this creating nodes, and stuff like that.

59
00:03:33,000 --> 00:03:36,000
Some lookup functions--these are what we're going to be using later--

60
00:03:36,000 --> 00:03:41,000
getElementById, getElementByTagName. NS refers to a name space.

61
00:03:41,000 --> 00:03:45,000
All sorts of stuff--parentNode, some output functions.

62
00:03:45,000 --> 00:03:48,000
Toprettyxml--this is actually an interesting one, so let's play with this one.

63
00:03:48,000 --> 00:03:50,000
This is one I use all the time.

64
00:03:50,000 --> 00:03:55,000
If we were to take our document object and call "toprettyxml" on it--toprettyxml.

65
00:03:55,000 --> 00:03:58,000
This actually doesn't look very pretty, does it, at all?

66
00:03:58,000 --> 00:04:03,000
Let's print that, because this is the Python string with the new lines in it.

67
00:04:03,000 --> 00:04:06,000
If we were to actually print it, it would look a lot prettier.

68
00:04:06,000 --> 00:04:11,000
Here is the xml that I entered, and you can see the structure of the document.

69
00:04:11,000 --> 00:04:14,000
It indents it nicely for us. That's a handy little function.

70
00:04:14,000 --> 00:04:17,000
When you download XML from somewhere you can see the structure of it

71
00:04:17,000 --> 00:04:19,000
a little bit more clearly with prettyxml.

72
00:04:19,000 --> 00:04:21,000
Okay, there's a function I'd like to show you here.

73
00:04:21,000 --> 00:04:23,000
Get elements by a tag name.

74
00:04:23,000 --> 00:04:27,000
Now, if I were to run this function on our x object and give it mytag,

75
00:04:27,000 --> 00:04:29,000
it returns one dom element.

76
00:04:29,000 --> 00:04:33,000
If I were to run it on item, we actually get two dom elements.

77
00:04:33,000 --> 00:04:39,000
Looking at the first tag called "item," we can see that we have an item.

78
00:04:39,000 --> 00:04:43,000
If we were to look at its children, we can call child nodes

79
00:04:43,000 --> 00:04:47,000
to see a list of children. We can see that we have one text node.

80
00:04:47,000 --> 00:04:52,000
If we were to look at the first one of those, we can access the node value attribute

81
00:04:52,000 --> 00:04:54,000
and see that it's 1.

82
00:04:54,000 --> 00:04:56,000
Now, remember our pretty printed version of our XML.

83
00:04:56,000 --> 00:04:59,000
What we just did here was we said get me all of the elements that are called item.

84
00:04:59,000 --> 00:05:02,000
Here is 1, and here is 2.

85
00:05:02,000 --> 00:05:06,000
On this first one, which is this guy here, get me its first child,

86
00:05:06,000 --> 00:05:13,000
which is basically this node here, which isn't strictly a node,

87
00:05:13,000 --> 00:05:16,000
but in minidom it's represented as a text node,

88
00:05:16,000 --> 00:05:19,000
which is basically just this text content.

89
00:05:19,000 --> 00:05:24,000
Different libraries may handle contents differently, but in minidom this is how we get it.

90
00:05:24,000 --> 00:05:28,000
Then we can actually say get the value of that text node.

91
00:05:28,000 --> 00:05:30,000
That's how we got the number 1 right there.

92
00:05:30,000 --> 00:05:33,000
This u basically means that's a unicode string.

93
00:05:33,000 --> 00:05:37,000
Minidom assumed that we were entering a unicode string, which is fine.
