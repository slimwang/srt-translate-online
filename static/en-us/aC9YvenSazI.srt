1
00:00:00,140 --> 00:00:02,410
First, let's start
with a visual metaphor.

2
00:00:02,410 --> 00:00:06,070
Distributive file systems are like
distributed storage facilities,

3
00:00:06,070 --> 00:00:10,570
specifically storage facilities
containing toy parts for a toy shop.

4
00:00:10,570 --> 00:00:13,640
First, each is accessed via
some well-defined interface.

5
00:00:14,650 --> 00:00:18,400
Also, both focus on
maintaining consistent state

6
00:00:18,400 --> 00:00:21,340
as one of the major
functional requirements.

7
00:00:21,340 --> 00:00:25,080
And finally, both of these support
different distribution models.

8
00:00:25,080 --> 00:00:27,380
For the distributed storage facilities,

9
00:00:27,380 --> 00:00:30,550
the toy shop manager needs to
be able to access, check, and

10
00:00:30,550 --> 00:00:35,120
make decisions regarding the available
resources without having

11
00:00:35,120 --> 00:00:39,550
to leave the toy shop and directly
visit some of the storage facilities.

12
00:00:39,550 --> 00:00:42,160
This should be done via some
well-defined interfaces

13
00:00:42,160 --> 00:00:44,590
that the storage facilities export.

14
00:00:44,590 --> 00:00:49,550
Next, the distributed storage facilities
must constantly update their inventories

15
00:00:49,550 --> 00:00:54,070
to represent consistent information
about the parts that they can deliver.

16
00:00:54,070 --> 00:00:55,270
This helps managers and

17
00:00:55,270 --> 00:00:59,260
other workers accurately determine
what are the inventories and

18
00:00:59,260 --> 00:01:03,250
what are the times that these products
can be delivered, for instance.

19
00:01:03,250 --> 00:01:07,710
Finally, these distributive facilities
can be configured in different ways.

20
00:01:07,710 --> 00:01:10,380
Some of them can be for storage-only.

21
00:01:10,380 --> 00:01:13,290
Some can provide both storage and
processing services.

22
00:01:13,290 --> 00:01:14,440
Some can be specialized for

23
00:01:14,440 --> 00:01:16,610
different types of toys or
different types of parts.

24
00:01:16,610 --> 00:01:19,810
So there will be different
types of distribution models.

25
00:01:19,810 --> 00:01:24,030
Now let's look at how distributed file
systems relate to these properties of

26
00:01:24,030 --> 00:01:26,150
distributed storage facilities.

27
00:01:26,150 --> 00:01:28,890
First, distributed file
systems are also accessed

28
00:01:28,890 --> 00:01:31,970
via via some higher level
well-defined interfaces.

29
00:01:31,970 --> 00:01:32,680
In particular,

30
00:01:32,680 --> 00:01:36,490
this would be the virtual file system
interface that we already talked about.

31
00:01:36,490 --> 00:01:40,450
This allows the operating system to take
advantage of multiple types of storage

32
00:01:40,450 --> 00:01:44,450
devices or storage machines,
regardless of where they are.

33
00:01:44,450 --> 00:01:47,960
Next, distributed file systems
need to maintain consistent state

34
00:01:47,960 --> 00:01:50,240
of the files shared among clients.

35
00:01:50,240 --> 00:01:52,250
If a file is updated by one client,

36
00:01:52,250 --> 00:01:55,610
the distributed file system needs
to track information regarding

37
00:01:55,610 --> 00:01:59,560
all of the file updates, some state
that's necessary, for instance, for

38
00:01:59,560 --> 00:02:03,480
execution of cache coherence,
algorithms, and other information.

39
00:02:03,480 --> 00:02:06,400
And also, the distributed file
systems can be implemented

40
00:02:06,400 --> 00:02:08,570
via different distribution models.

41
00:02:08,570 --> 00:02:09,919
They can be replicated or

42
00:02:09,919 --> 00:02:14,210
the files can be partitioned across
the front machines in the file system.

43
00:02:14,210 --> 00:02:18,570
Or all of the notes in the file system
can act more like peers amongst each

44
00:02:18,570 --> 00:02:21,200
other when they're providing
the distributed file system service.
