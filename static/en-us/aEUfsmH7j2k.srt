1
00:00:00,000 --> 00:00:06,000
Now let's put them all together into a single piece of software.

2
00:00:06,000 --> 00:00:09,000
Upfront it took me about a whole day to do this.

3
00:00:09,000 --> 00:00:12,000
I'm not going to ask you to do it all yourself,

4
00:00:12,000 --> 00:00:16,000
because it's going to cost you probably at least an hour if it takes me a day.

5
00:00:16,000 --> 00:00:22,000
But I still want to be able to take all the lessons that we did together into a single system.

6
00:00:22,000 --> 00:00:25,000
I'm going to help you a little bit--bits and pieces--

7
00:00:25,000 --> 00:00:29,000
but up front here is the environment that I wrote for you,

8
00:00:29,000 --> 00:00:33,000
which is very much derived from the environment we studied in the past.

9
00:00:33,000 --> 00:00:37,000
We have a class robot that has certain kinds of noise characteristics you can find over here.

10
00:00:37,000 --> 00:00:47,000
As I scroll down, you can see the familiar init function, the position-setting function,

11
00:00:47,000 --> 00:00:54,000
the set_noise function, and then we have two checking functions--

12
00:00:54,000 --> 00:00:59,000
whether we have a collision with the world called "grid," which I will show you in a minute.

13
00:00:59,000 --> 00:01:02,000
and we have a check_goal function to see if we reached a goal

14
00:01:02,000 --> 00:01:05,000
according to a certain distance threshold.

15
00:01:05,000 --> 00:01:11,000
The move function should be very familiar at this point.

16
00:01:11,000 --> 00:01:15,000
It applies noise to the motion command.

17
00:01:15,000 --> 00:01:20,000
It the same code that you originally wrote.

18
00:01:20,000 --> 00:01:24,000
Then we have a very simple sense function, which measures the robot's (x, y) location,

19
00:01:24,000 --> 00:01:32,000
similar to a GPS on a car but with substantial measurement noise.

20
00:01:32,000 --> 00:01:36,000
Corresponding to this sense function we have a measurement probability function

21
00:01:36,000 --> 00:01:40,000
that you might want to use in your filter, and it evaluates the probability

22
00:01:40,000 --> 00:01:47,000
of a measurement relative to the ground truth coordinates of the robot using Gaussians.

23
00:01:47,000 --> 00:01:50,000
Armed with all this here is the problem.

24
00:01:50,000 --> 00:01:55,000
I'm going to give you a grid. Here is an example grid. Let me draw this for you.

25
00:01:55,000 --> 00:01:59,000
This specific one happens to be of dimensions 6 and 5,

26
00:01:59,000 --> 00:02:03,000
and there are a number of blocked off cells like this.

27
00:02:03,000 --> 00:02:09,000
If we look carefully into the code, you'll find information about the initial starting location

28
00:02:09,000 --> 00:02:14,000
on the left upper corner and the goal location, which is the bottom right corner.

29
00:02:14,000 --> 00:02:18,000
In putting everything together, you're going to build a robotic car using our bicycle model

30
00:02:18,000 --> 00:02:22,000
that'll drive through the free space through the continuous free space

31
00:02:22,000 --> 00:02:28,000
on something close to the shortest path all the way into the goal.

32
00:02:28,000 --> 00:02:31,000
Here is my solution that I implemented

33
00:02:31,000 --> 00:02:35,000
and that you will get to see for the most part towards the end of this class.

34
00:02:35,000 --> 00:02:38,000
I am starting up over here. These are my obstacles.

35
00:02:38,000 --> 00:02:43,000
They implement as circles through the center of these grid cells.

36
00:02:43,000 --> 00:02:47,000
It's not exactly correct but good enough for my implementation.

37
00:02:47,000 --> 00:02:51,000
Here are multiple runs using the same code, and you can see they're far from optimal.

38
00:02:51,000 --> 00:02:53,000
They are non-optimal because there is control noise,

39
00:02:53,000 --> 00:02:55,000
and there is also measurement noise.

40
00:02:55,000 --> 00:03:02,000
But they all make it safely through free space into the corner where the goal objective is.

41
00:03:02,000 --> 00:03:07,000
If we look at them in detail, like this solution over here.

42
00:03:07,000 --> 00:03:11,000
You'll find that the spacing of the circles is somewhat variable.

43
00:03:11,000 --> 00:03:15,000
You'll find that there's little corners over here that are either the result of control noise

44
00:03:15,000 --> 00:03:20,000
or of measurement noise or of my somewhat deficient implementation.

45
00:03:20,000 --> 00:03:24,000
You'll also find the control set points that are the smooth points of my A-star planner

46
00:03:24,000 --> 00:03:26,000
as shown here in green.

47
00:03:26,000 --> 00:03:31,000
In the version that I implemented for you, the controller does something very, very different.

48
00:03:31,000 --> 00:03:35,000
It actually chooses as the control objective to head straight to the goal,

49
00:03:35,000 --> 00:03:40,000
using the atan2 function, executes the action at a speed of 0.1,

50
00:03:40,000 --> 00:03:44,000
and then reports a collision whenever the robot is moving.

51
00:03:44,000 --> 00:03:48,000
Just looking down to the output where we see the robot's coordinates

52
00:03:48,000 --> 00:03:52,000
along with the orientation there are very frequent collisions

53
00:03:52,000 --> 00:03:56,000
that the robot undergoes in its attempt to reach the goal,

54
00:03:56,000 --> 00:04:01,000
which it eventually does, but you can see 2 big regions of collisions

55
00:04:01,000 --> 00:04:04,000
until the goal is finally reached.
