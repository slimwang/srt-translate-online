1
00:00:00,000 --> 00:00:04,000
Let's look at some tradeoffs in random testing, and what I really mean here is

2
00:00:04,000 --> 00:00:07,000
advantages and disadvantages of random testing that might lead you to spend

3
00:00:07,000 --> 00:00:10,000
more or less time doing it and so on this side I'm going to put advantages.

4
00:00:10,000 --> 00:00:12,000
Over here, I'm going to put some disadvantages.

5
00:00:12,000 --> 00:00:16,000
One of the main disadvantages of random testing is of course this something you spend

6
00:00:16,000 --> 00:00:19,000
a lot of time already dealing with is that the input validity problem can be really hard,

7
00:00:19,000 --> 00:00:21,000
and a lot of people would give up on random testing.

8
00:00:21,000 --> 00:00:24,000
In my opinion, give up on it too early before they've gotten good results

9
00:00:24,000 --> 00:00:28,000
and often it's this input validity problem that stops them.

10
00:00:28,000 --> 00:00:30,000
The fact is there might be some creativity required to get around this.

11
00:00:30,000 --> 00:00:35,000
For example, mutating existing inputs or getting a good enough understanding of the structure

12
00:00:35,000 --> 00:00:39,000
of the input that we can actually generate valid or random inputs from oracle.

13
00:00:39,000 --> 00:00:41,000
Oracles are hard too--so again, we need a substantial amount

14
00:00:41,000 --> 00:00:43,000
of creativity to deal with the lack of oracles.

15
00:00:43,000 --> 00:00:47,000
One of the people often like when doing testing is they like to have a fix test suite,

16
00:00:47,000 --> 00:00:49,000
and they like to run it and they like to know when it's done,

17
00:00:49,000 --> 00:00:51,000
but if they didn't get any failures, they can feel good.

18
00:00:51,000 --> 00:00:53,000
Random testing on the other hand has no stopping criterion,

19
00:00:53,000 --> 00:00:58,000
and so for example, if you run a random tester on eight course for a day without finding any problems

20
00:00:58,000 --> 00:01:00,000
that implies nothing about what you'll find in the future.

21
00:01:00,000 --> 00:01:02,000
You might find six or seven problems in the next hour of testing,

22
00:01:02,000 --> 00:01:06,000
and in the process of doing this compiler testing that I've been doing for several years now,

23
00:01:06,000 --> 00:01:08,000
I found this to really be the case.

24
00:01:08,000 --> 00:01:12,000
I can start a compiler testing run. For example the weight exertion of GCC and all of them.

25
00:01:12,000 --> 00:01:14,000
I won't find anything for a long time, and I think to myself--

26
00:01:14,000 --> 00:01:18,000
gee, they've really sort of nailed the issues and then just as the probability is working out, how they do,

27
00:01:18,000 --> 00:01:21,000
a bunch of problems will come out after a day or two.

28
00:01:21,000 --> 00:01:23,000
So another problem and this one we haven't really talked about yet

29
00:01:23,000 --> 00:01:26,000
is that random testing may find unimportant bugs

30
00:01:26,000 --> 00:01:30,000
and what I mean by this is that since random testing explores parts of the input demand

31
00:01:30,000 --> 00:01:34,000
they may not be often explored by real users of the system.

32
00:01:34,000 --> 00:01:36,000
It could be that the people developing this software under test

33
00:01:36,000 --> 00:01:40,000
are not remotely interested in fixing the bugs that are triggered by the strange inputs

34
00:01:40,000 --> 00:01:43,000
and this can be frustrating, but it is really just very situational.

35
00:01:43,000 --> 00:01:49,000
Some kind of bugs such as buffer overflows in a web server or in a pdf reader or something like that

36
00:01:49,000 --> 00:01:52,000
almost mandatory to fix because they are so often exploitable.

37
00:01:52,000 --> 00:01:58,000
So those kind of bugs really can't be labeled unimportant by right thinking developers

38
00:01:58,000 --> 00:02:02,000
On the other hand, if we're talking about problems that really might not come up in practice

39
00:02:02,000 --> 00:02:06,000
so let's say that with my C compiler testing, I generate a C function

40
00:02:06,000 --> 00:02:09,000
that's 100,000 lines long and this fails to compile.

41
00:02:09,000 --> 00:02:12,000
Well, the compiler developers all and certainly going to ignore me

42
00:02:12,000 --> 00:02:14,000
because people just don't like code like that,

43
00:02:14,000 --> 00:02:16,000
and similarly, if I make an identifier let's just say a variable name

44
00:02:16,000 --> 00:02:20,000
that's 800 characters long and that crushes the compiler and they may not care about that either.

45
00:02:20,000 --> 00:02:26,000
and so the general flavor of the solution to this problem is first of all to generate random inputs

46
00:02:26,000 --> 00:02:28,000
that are more like inputs of interest.

47
00:02:28,000 --> 00:02:31,000
So for example, when we're generating random C-codes, we don't make really long functions,

48
00:02:31,000 --> 00:02:35,000
we don't make really long identifier names, we don't nest parenthesis really deeply,

49
00:02:35,000 --> 00:02:37,000
and it could easily be of these things would find bugs, but we just don't really have

50
00:02:37,000 --> 00:02:40,000
any confidence that if we find these bugs that anybody would care about fixing them

51
00:02:40,000 --> 00:02:42,000
so we'd rather just not even find them.
