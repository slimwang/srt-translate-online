1
00:00:00,280 --> 00:00:03,060
The key to maintaining the virtual memory abstraction is

2
00:00:03,060 --> 00:00:07,010
a layer of indirection. Without this layer of indirection, two

3
00:00:07,010 --> 00:00:10,260
processes couldn't use the same address for a variable,

4
00:00:10,260 --> 00:00:12,900
because then they would end up overwriting each other. This

5
00:00:12,900 --> 00:00:16,110
would make life very difficult for programmers and compilers.

6
00:00:16,110 --> 00:00:19,130
So, we play one of the classic computer science tricks

7
00:00:19,130 --> 00:00:22,200
and introduce a layer of indirection. Inside the operating

8
00:00:22,200 --> 00:00:25,420
system, each process has something called the page table that

9
00:00:25,420 --> 00:00:28,380
acts like a phone directory or a dictionary. Giving for

10
00:00:28,380 --> 00:00:33,200
each virtual address, the physical address that it corresponds to.

11
00:00:33,200 --> 00:00:35,520
Usually this will be a place in memory, but when

12
00:00:35,520 --> 00:00:38,400
space in main memory is low it might also be on

13
00:00:38,400 --> 00:00:42,250
part of the disk, called swap in many systems. And

14
00:00:42,250 --> 00:00:44,540
when a program is first starting up, you usually don't

15
00:00:44,540 --> 00:00:47,800
load the whole application into memory first thing but rather

16
00:00:47,800 --> 00:00:50,320
leave part of the program, that might not always be needed,

17
00:00:50,320 --> 00:00:53,680
on the disk. This indirection allows us to accomplish

18
00:00:53,680 --> 00:00:56,820
several things. First, it allows us to have an address

19
00:00:56,820 --> 00:01:00,190
space that is bigger than physical main memory. This is

20
00:01:00,190 --> 00:01:02,910
convenient when main memory itself isn't big enough and we

21
00:01:02,910 --> 00:01:05,140
need to use the disk, or when we want

22
00:01:05,140 --> 00:01:08,480
to map other storage devices and treat them like memory.

23
00:01:08,480 --> 00:01:12,575
Second, it provides protection between processes, as mentioned earlier, without

24
00:01:12,575 --> 00:01:14,090
indirection the applications might find

25
00:01:14,090 --> 00:01:16,250
themselves overwriting each other's data.

26
00:01:16,250 --> 00:01:18,820
With the operating system properly managing the page tables,

27
00:01:18,820 --> 00:01:22,420
however, these two virtual addresses can be pointed to different

28
00:01:22,420 --> 00:01:26,640
physical addresses. Thirdly, it can allow for sharing. Even

29
00:01:26,640 --> 00:01:29,330
different virtual addresses can be made to refer to the

30
00:01:29,330 --> 00:01:33,380
same physical address, again, just by properly maintaining the

31
00:01:33,380 --> 00:01:36,380
page tables. Lastly I should point out that because kernel

32
00:01:36,380 --> 00:01:38,750
addresses are the same for each process, they get

33
00:01:38,750 --> 00:01:41,890
their own page table that is shared among the processes.

34
00:01:41,890 --> 00:01:43,340
This is called the global page table.
