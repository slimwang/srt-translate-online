1
00:00:00,230 --> 00:00:04,320
In this problem you need to divide your work up into chunks; in this case, tiles.

2
00:00:04,320 --> 00:00:08,013
We have a continuum between tiny tiles--lots of them,

3
00:00:08,013 --> 00:00:13,784
and fewer tiles where each tile is sized to the maximum that can fit in a single thread block.

4
00:00:13,784 --> 00:00:15,123
And in this particular problem,

5
00:00:15,123 --> 00:00:18,019
bigger tiles means less memory bandwidth; this is good.

6
00:00:18,019 --> 00:00:22,397
Generally then you want to make your tiles as big as can fit into a single thread block,

7
00:00:22,397 --> 00:00:24,970
because that minimizes overall memory bandwidth.

8
00:00:24,970 --> 00:00:26,929
But note the following 2 caveats.

9
00:00:26,929 --> 00:00:29,264
One, you need to have at least as many thread blocks

10
00:00:29,264 --> 00:00:31,266
as you have SMs in your GPU,

11
00:00:31,266 --> 00:00:33,437
because otherwise you'll have SMs sitting idle.

12
00:00:33,437 --> 00:00:36,319
Definitely you want to make sure fill the machine

13
00:00:36,319 --> 00:00:38,387
with enough work to keep all the SMs busy,

14
00:00:38,387 --> 00:00:41,368
even if you have to move a little bit this way on the continuum

15
00:00:41,368 --> 00:00:43,982
and size your tiles just a little bit smaller.

16
00:00:43,982 --> 00:00:46,720
Two, if you're sitting at the right end of this continuum,

17
00:00:46,720 --> 00:00:48,592
it's best for overall memory bandwidth,

18
00:00:48,592 --> 00:00:50,798
but often it turns out that you would actually prefer

19
00:00:50,798 --> 00:00:52,969
to just maybe 1 tick to the left.

20
00:00:52,969 --> 00:00:54,897
This allows a small number,

21
00:00:54,897 --> 00:00:57,670
say, 2 blocks to both B-resident at a time,

22
00:00:57,670 --> 00:01:00,595
And that potentially gives better latency-hiding characteristics,

23
00:01:00,595 --> 00:01:03,164
because you have more warps that may be in flight at the same time

24
00:01:03,164 --> 00:01:05,677
from slightly different pieces of the program.

25
00:01:05,677 --> 00:01:08,642
It's certainly something that you would want to tune carefully

26
00:01:08,642 --> 00:01:12,249
if you needed the fastest possible implementation.
