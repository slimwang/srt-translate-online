1
00:00:00,000 --> 00:00:07,000
In the past few units we've used regular expressions to classify or layout sets of strings.

2
00:00:07,000 --> 00:00:15,000
It turns out that grammars can encode all of these regular languages or regular expressions

3
00:00:15,000 --> 00:00:17,000
that we've been working with previously.

4
00:00:17,000 --> 00:00:20,000
Here I've written a grammar for number that's going to recognize

5
00:00:20,000 --> 00:00:25,000
exactly the same language, exactly the same set of strings as the regular expression above.

6
00:00:25,000 --> 00:00:30,000
We can rewrite number to be a digit followed by more digits.

7
00:00:30,000 --> 00:00:35,000
This construction is meant to mimic or get the same idea as this plus.

8
00:00:35,000 --> 00:00:37,000
We need at least one, but we could have some more.

9
00:00:37,000 --> 00:00:40,000
Down here I've just listed out all of the digits longhand.

10
00:00:40,000 --> 00:00:44,000
Well, I haven't on this particular page but you could imagine I could write out

11
00:00:44,000 --> 00:00:48,000
2 through 8 as optional alternate re-write rules in our grammar.

12
00:00:48,000 --> 00:00:51,000
More digits is where a lot of the action happens.

13
00:00:51,000 --> 00:00:56,000
One possibility is that we have one digit followed by potentially even more,

14
00:00:56,000 --> 00:00:59,000
and another is that we give up.

15
00:00:59,000 --> 00:01:04,000
I could write epsilon. This means more_digits goes to nothing.

16
00:01:04,000 --> 00:01:07,000
For example, down here at the bottom, I have a derivation

17
00:01:07,000 --> 00:01:11,000
starting with number getting to the number 42.

18
00:01:11,000 --> 00:01:16,000
Number goes to digit more-digits, using our first rule--rule number one.

19
00:01:16,000 --> 00:01:22,000
Then we're going to turn more digits into digit more_digit, using rule number 2.

20
00:01:22,000 --> 00:01:27,000
Then--oh my gosh, classic professor mistake--you cannot take me anywhere.

21
00:01:27,000 --> 00:01:30,000
Shwoop--oh look. It wraps. That that amazing.

22
00:01:30,000 --> 00:01:36,000
The from digit digit more_digits, we're going to turn more_digits into the empty string,

23
00:01:36,000 --> 00:01:40,000
using rule three. Now we're left with digit digit nothing.

24
00:01:40,000 --> 00:01:44,000
I'm going to turn that second digit into a 2--this empty string isn't really there.

25
00:01:44,000 --> 99:59:59,999
Then I'll turn that first digit into a four. Huzzah.
