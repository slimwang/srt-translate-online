1
00:00:00,110 --> 00:00:03,508
Let me show you an interesting application of random numbers. You know what pi

2
00:00:03,508 --> 00:00:06,816
is. It's the area of a circle with radius one, and of course, there are

3
00:00:06,816 --> 00:00:12,190
formulas for computing pi to any desired precision, but that's no fun. We'll

4
00:00:12,190 --> 00:00:17,000
compute pi by shooting darts. Specifically, we'll throw random darts into the

5
00:00:17,000 --> 00:00:21,812
square. Most of the time we'll hit the circle, sometimes we'll miss, and the

6
00:00:21,812 --> 00:00:25,966
ratio of the hits over the tries is going to be approximately the same as the

7
00:00:25,966 --> 00:00:32,880
area of the circle, over the area of the square. The square has side lengths 2,

8
00:00:32,880 --> 00:00:38,815
so that's 4, and the area of the circle is of course the desired pi. So how do

9
00:00:38,815 --> 00:00:44,896
we do this in Java? We generate a random x between minus 1 and 1. A random y

10
00:00:44,896 --> 00:00:49,420
also between minus 1 and 1. Compute the distance from the origin and if that

11
00:00:49,420 --> 00:00:53,470
distance was at most 1, then we had a hit. If that distance was larger than 1

12
00:00:53,470 --> 00:00:57,350
then we didn't have a hit. So go ahead and complete the program that does this.

13
00:00:57,350 --> 00:01:01,256
The biggest challenge is to get the x and y to be random values between minus 1

14
00:01:01,256 --> 00:01:06,260
and 1. Because nextDouble gives you values that are between 0 and 1. So you

15
00:01:06,260 --> 00:01:09,769
will need to be creative to adjust this range to the one that you want.
