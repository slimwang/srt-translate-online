1
00:00:00,210 --> 00:00:02,514
I want to explain this a little bit more

2
00:00:02,514 --> 00:00:05,370
detail. So, let's do this. If you look at

3
00:00:05,370 --> 00:00:08,060
the timeline for a particular process of Pj, it

4
00:00:08,060 --> 00:00:10,604
might look like this. That Ti was running here,

5
00:00:10,604 --> 00:00:13,915
got de-scheduled, and then there were a couple of

6
00:00:13,915 --> 00:00:16,533
other threads that ran on, on Pj, Tx and

7
00:00:16,533 --> 00:00:19,430
Ty. So now if I want to think about

8
00:00:19,430 --> 00:00:25,190
the affinity for Ti with respect to this processor Pj.

9
00:00:25,190 --> 00:00:28,100
That affinity, if we're going to schedule Ti

10
00:00:28,100 --> 00:00:31,992
now on Pj, the affinity number that I

11
00:00:31,992 --> 00:00:33,955
want to compute for this guy is two,

12
00:00:33,955 --> 00:00:38,260
indi-, indicating the number of intervening threads that ran

13
00:00:38,260 --> 00:00:44,820
on Pj between the last time Ti ran on it, and if I schedule Ti now

14
00:00:44,820 --> 00:00:47,140
at this point of time. And so clearly,

15
00:00:47,140 --> 00:00:50,320
this number that I'm talking about, the affinity number,

16
00:00:50,320 --> 00:00:53,950
the smaller the number the higher the affinity.

17
00:00:53,950 --> 00:00:56,090
So when we say the affinity number is two,

18
00:00:56,090 --> 00:00:58,780
it means there are two intervening threads that

19
00:00:58,780 --> 00:01:02,510
ran on Pj between the time Ti got dibs

20
00:01:02,510 --> 00:01:07,210
on Pj now at this point of time and at this point of time. 'Kay that's the

21
00:01:07,210 --> 00:01:11,844
idea behind this affinity index. So what we want

22
00:01:11,844 --> 00:01:15,309
to do is in a minimum intervening scheduling policy,

23
00:01:15,309 --> 00:01:18,697
you want to keep this information about the affinity

24
00:01:18,697 --> 00:01:21,120
for Ti to run on every processor. If I have

25
00:01:21,120 --> 00:01:25,110
a multiprocessor with 16 processors, then there is an affinity

26
00:01:25,110 --> 00:01:29,730
index associated with every one of those processors for Ti.

27
00:01:29,730 --> 00:01:32,700
It might be that on processor one Ti has

28
00:01:32,700 --> 00:01:36,100
an affinity index of two, on processor two it has

29
00:01:36,100 --> 00:01:38,280
an affinity index of four and so on and so

30
00:01:38,280 --> 00:01:40,460
forth. And what we want to do is when it

31
00:01:40,460 --> 00:01:46,700
comes time to scheduling Ti, I want to pick a processor on which the affinity

32
00:01:46,700 --> 00:01:49,790
index is the minimum. So the minimum affinity

33
00:01:49,790 --> 00:01:51,920
index indicates that there is the minimum number

34
00:01:51,920 --> 00:01:55,790
of intervening threads on this particular processor.

35
00:01:55,790 --> 00:01:57,770
That's the processor on which I want to

36
00:01:57,770 --> 00:02:02,530
run Ti. That is amplifying the chance that

37
00:02:02,530 --> 00:02:05,540
Ti is going to find its memory contents,

38
00:02:05,540 --> 00:02:08,419
the working set in the caches. That's

39
00:02:08,419 --> 00:02:11,870
the idea behind minimum intervening scheduling policy.
