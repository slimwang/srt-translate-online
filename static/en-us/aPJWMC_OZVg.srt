1
00:00:01,020 --> 00:00:04,150
Now, let's talk through what possible values d and

2
00:00:04,150 --> 00:00:06,540
c can have. You may have picked several of

3
00:00:06,540 --> 00:00:09,490
these choices, but it is okay, you know, whatever

4
00:00:09,490 --> 00:00:12,810
you picked, it's okay. Let's talk through these different choices,

5
00:00:12,810 --> 00:00:16,640
to see what are possible given this set of

6
00:00:16,640 --> 00:00:19,710
instructions and the fact that. Processing speed one and

7
00:00:19,710 --> 00:00:23,720
speed two are executing, independently on two different processors

8
00:00:23,720 --> 00:00:26,190
and, we have no way of knowing, what is going

9
00:00:26,190 --> 00:00:31,600
on with the shared memory. Now the first possibility, is that, these two

10
00:00:31,600 --> 00:00:39,280
instructions, assignment of, a B to D and C to A, they happen. In time

11
00:00:39,280 --> 00:00:41,680
order, before any of these instructions executed.

12
00:00:41,680 --> 00:00:45,390
That's possible, because if these shared memory

13
00:00:45,390 --> 00:00:47,990
accesses happen before these guys, they're responsible

14
00:00:47,990 --> 00:00:51,680
that both of these instructions are executed before

15
00:00:51,680 --> 00:00:56,740
any of these instructions executed. In that case, what you would get into DNC

16
00:00:56,740 --> 00:01:05,000
are the old values of a and b, namely zero. The second possibility is that

17
00:01:07,250 --> 00:01:11,240
the both these instructions that is executed on P2 they're

18
00:01:12,920 --> 00:01:16,930
executed after both the instructions on P1 have completed

19
00:01:16,930 --> 00:01:22,380
execution. So in this case, both a has gotten new value, b has gotten a new

20
00:01:22,380 --> 00:01:27,510
value, and so when we go here and make the assignments. Then both d and c are

21
00:01:27,510 --> 00:01:29,930
going to have new values that are in b and

22
00:01:29,930 --> 00:01:33,050
a respectively. And so, this is a possibility, right?

23
00:01:33,050 --> 00:01:38,910
There is a possibility that both c and d have a value of one in them. Let's see

24
00:01:38,910 --> 00:01:42,240
if the third possibility can happen. The third possibility

25
00:01:42,240 --> 00:01:45,780
for it to happen, it is conceivable that we insert

26
00:01:45,780 --> 00:01:47,400
these two instructions in the middle of this. Or

27
00:01:47,400 --> 00:01:52,240
in other words Process P1 executed this instruction and, and

28
00:01:52,240 --> 00:01:54,440
in time order, it so happens that these two

29
00:01:54,440 --> 00:01:58,190
instructions got executed, and then this, this instruction got executed.

30
00:01:58,190 --> 00:02:04,280
And therefore, once you get into d is the old value of b, that is

31
00:02:04,280 --> 00:02:10,389
zero. And once you get into c is the old value of a. I'm sorry, the new value of

32
00:02:10,389 --> 00:02:13,896
a. Because this instruction is executed. And therefore,

33
00:02:13,896 --> 00:02:15,980
you get one into c. And that's why this

34
00:02:15,980 --> 00:02:20,420
possibility is also, is also perfectly valid. Now,

35
00:02:20,420 --> 00:02:23,750
let's look at this last choice that I have.

36
00:02:23,750 --> 00:02:27,330
C gets zero and D gets one. Can this

37
00:02:27,330 --> 00:02:30,100
happen? C getting a zero and d getting a one.

38
00:02:30,100 --> 00:02:33,840
And the reason I ask you this question is because,

39
00:02:33,840 --> 00:02:36,750
if you look at this piece of code and this

40
00:02:36,750 --> 00:02:39,005
piece of code here. If d were to get

41
00:02:39,005 --> 00:02:42,980
one, what that means is that, this assignment of b

42
00:02:42,980 --> 00:02:46,060
gets b plus one has already happened on P1. That's

43
00:02:46,060 --> 00:02:49,430
how the new value of b has gotten into d.

44
00:02:49,430 --> 00:02:53,040
But yet, we're saying when this process completes,

45
00:02:53,040 --> 00:02:55,140
c has a value of zero. What does

46
00:02:55,140 --> 00:02:58,180
that mean? It means that the new value

47
00:02:58,180 --> 00:03:02,170
of a hasn't come into the processor P2. How

48
00:03:02,170 --> 00:03:07,850
can this happen? It can happen if messages go out of order. You have to remember

49
00:03:07,850 --> 00:03:10,880
that, if you recall the picture of the

50
00:03:10,880 --> 00:03:14,730
shared memory machine, you've got an interconnection network that

51
00:03:14,730 --> 00:03:17,500
is connecting all these processors. And a write

52
00:03:17,500 --> 00:03:19,740
that happens on this processor has to go

53
00:03:19,740 --> 00:03:21,560
through the interconnection network and get to this

54
00:03:21,560 --> 00:03:25,760
other processor. Now it is conceivable that if message

55
00:03:25,760 --> 00:03:29,060
go out of order. It is possible that

56
00:03:29,060 --> 00:03:34,550
when this process executes this statement. This new

57
00:03:34,550 --> 00:03:37,630
value of b has arrived, the message that

58
00:03:37,630 --> 00:03:40,520
contains a new value you b has arived and

59
00:03:40,520 --> 00:03:43,240
there for this assignment gets a new value of,

60
00:03:43,240 --> 00:03:47,530
of b, but when the process execute this statement. The

61
00:03:47,530 --> 00:03:50,090
new value of a hasn't arrived yet and it

62
00:03:50,090 --> 00:03:52,950
can happen if the messages go out of order and

63
00:03:52,950 --> 00:03:55,550
in that case, you can end up with this

64
00:03:55,550 --> 00:03:59,330
particular choice of c having a value of zero and

65
00:03:59,330 --> 00:04:01,730
d having a value of one when this process

66
00:04:01,730 --> 00:04:06,440
completes execution. Do you want it to happen? Now intuitively,

67
00:04:06,440 --> 00:04:09,330
you would see that this is not something

68
00:04:09,330 --> 00:04:12,330
you expect to happen. As a programmer, you don't

69
00:04:12,330 --> 00:04:16,010
want surprises, right? And if you don't want surprises,

70
00:04:16,010 --> 00:04:20,200
perhaps if it is a non-intuitive result, that's something

71
00:04:20,200 --> 00:04:22,900
that should not be allowed by the model.

72
00:04:22,900 --> 00:04:25,730
So, when we talk about memory consistency model, we're

73
00:04:25,730 --> 00:04:28,590
saying what is the contract between the programmer and

74
00:04:28,590 --> 00:04:32,110
system? And what we are seeing through this example

75
00:04:32,110 --> 00:04:36,410
is that, this particular outcome is counter-intuitive and

76
00:04:36,410 --> 00:04:40,860
therefore the model should not allow this particular outcome

77
00:04:40,860 --> 00:04:43,750
to be possible in the execution. And this

78
00:04:43,750 --> 00:04:46,180
is the reason why you have memory consistency model.
