1
00:00:00,200 --> 00:00:02,760
One of the challenging things about
working with a language that uses

2
00:00:02,760 --> 00:00:06,130
closures, is it's not always
particularly obvious when a piece of

3
00:00:06,130 --> 00:00:07,880
code is going to be run.

4
00:00:07,880 --> 00:00:10,850
When Gradle's invoked with
a name of a task to perform

5
00:00:10,850 --> 00:00:13,350
it can't just go ahead and
execute that task.

6
00:00:13,350 --> 00:00:16,250
It first has to figure out
that task dependency and

7
00:00:16,250 --> 00:00:18,380
those task dependencies, and so on.

8
00:00:18,380 --> 00:00:21,080
Gradle then executes all the tasks, and

9
00:00:21,080 --> 00:00:25,140
in the correct order, before
the target task is eventually executed.

10
00:00:25,140 --> 00:00:27,940
That means that before any
task execution happens,

11
00:00:27,940 --> 00:00:31,070
the whole dependency
graph has to be created.

12
00:00:31,070 --> 00:00:35,140
There are actually three phases to
the lifecycle of any Gradle build.

13
00:00:35,140 --> 00:00:38,560
Initialization, configuration,
and execution.

14
00:00:38,560 --> 00:00:41,225
The initialization phase is
mostly concerned with setting up

15
00:00:41,225 --> 00:00:44,960
multi-project builds which we'll
talk about later in the course.

16
00:00:44,960 --> 00:00:47,880
In the configuration phase
the build script is executing

17
00:00:47,880 --> 00:00:50,200
which configures all
the project's tasks.

18
00:00:50,200 --> 00:00:53,440
This is when a directed
acyclic task is built up and

19
00:00:53,440 --> 00:00:57,070
Gradle determines which tasks need
to be run, and in which order.

20
00:00:57,070 --> 00:01:01,261
Then finally, in the execution phase all
the task actions of all the tasks that

21
00:01:01,261 --> 00:01:03,690
are chosen are executed
in the proper order.
