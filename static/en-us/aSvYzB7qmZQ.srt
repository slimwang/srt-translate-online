1
00:00:00,520 --> 00:00:05,030
Before we get started, let's take a look
at our previous code, once refactored.

2
00:00:05,030 --> 00:00:07,670
Now it looks much better,
and most important of all,

3
00:00:07,670 --> 00:00:13,825
it won't crash if we provide a badly
formatted URL and NSURL returns a nil.

4
00:00:13,825 --> 00:00:16,965
However, even though it does look good,
it still sucks.

5
00:00:16,965 --> 00:00:20,215
It blocks the main queue,
so we're going to fix this.

6
00:00:20,215 --> 00:00:24,185
First of all we need to find
the line that it's blocking.

7
00:00:24,185 --> 00:00:27,230
Can you spot it just by
looking at the code?

8
00:00:27,230 --> 00:00:28,650
Yep.

9
00:00:28,650 --> 00:00:29,910
It's this one.

10
00:00:29,910 --> 00:00:31,380
The NS data one.

11
00:00:31,380 --> 00:00:36,180
That's the one that downloads the hued
image and stuff it into an NS data.

12
00:00:36,180 --> 00:00:39,040
We need to send this fellow
to background queue.

13
00:00:39,040 --> 00:00:43,790
Actually, the next line where we
convert this NS data into a UI image

14
00:00:43,790 --> 00:00:46,730
might also take some time,
although much less.

15
00:00:46,730 --> 00:00:48,780
So let's send both to the background.

16
00:00:48,780 --> 00:00:52,950
But hold on, UI image belongs to UI kit.

17
00:00:52,950 --> 00:00:55,790
So we should never use
it in the main queue.

18
00:00:55,790 --> 00:00:57,630
Well no, not really.

19
00:00:57,630 --> 00:01:00,790
Not all of UI kit is threat and save.

20
00:01:00,790 --> 00:01:03,590
There are a few exceptions
such as UI image.

21
00:01:03,590 --> 00:01:06,600
However all the visual stuff,
the views are unsaved.

22
00:01:06,600 --> 00:01:14,180
So changing the image property here,
that must be done in the main queue.

23
00:01:14,180 --> 00:01:18,080
Always remember the famous
haiku from Zen master Basho.

24
00:01:18,080 --> 00:01:21,950
If the name ends in view it
belongs in the main queue.

25
00:01:21,950 --> 00:01:24,944
First of all,
lets create a queue from scratch.

26
00:01:24,944 --> 00:01:27,980
So, the first step is to create the URL.

27
00:01:27,980 --> 00:01:31,972
Now that we have the URL we need
to create a queue from scratch.

28
00:01:33,260 --> 00:01:34,920
To create a queue from scratch,

29
00:01:34,920 --> 00:01:39,690
we use the function dispatched queue
create, and it takes two parameters.

30
00:01:39,690 --> 00:01:42,860
The first one is just a name you
can put there whatever you want.

31
00:01:42,860 --> 00:01:45,010
Doesn't really matter, and

32
00:01:45,010 --> 00:01:49,850
the second one tells GCD
what kind of queue you want.

33
00:01:49,850 --> 00:01:54,290
Neil in this case tells GCD
that we want a synchronous or

34
00:01:54,290 --> 00:01:57,030
a serial queue,
otherwise you would have to use

35
00:01:57,030 --> 00:01:59,850
a different constant that you
can check on the documentation.

36
00:01:59,850 --> 00:02:01,670
To create an asynchronous queue.

37
00:02:01,670 --> 00:02:03,780
But we're not going to
use those in this course.

38
00:02:05,000 --> 00:02:07,660
The following step is to
recall dispatch async.

39
00:02:07,660 --> 00:02:13,330
It will take two parameters, the queue,
in this case download and the closure.

40
00:02:13,330 --> 00:02:18,725
Although, notice that here I'm
using the trailing closure syntax.

41
00:02:18,725 --> 00:02:22,925
So in here is where we need
to download the NS data,

42
00:02:22,925 --> 00:02:26,055
turn it into a UA image and
then display it.

43
00:02:26,055 --> 00:02:26,785
Let's get started.

44
00:02:27,995 --> 00:02:33,540
Once we have the queue we can
call dispatch_async and send,

45
00:02:33,540 --> 00:02:38,460
encapsulate in a closure, the fending
code and send it to the background.

46
00:02:38,460 --> 00:02:43,220
However we have a problem here,
we're downloading the image

47
00:02:43,220 --> 00:02:47,400
in the background queue,
we're turning it into a UI image.

48
00:02:47,400 --> 00:02:51,770
Also in the background queue but
we need to run this code and

49
00:02:51,770 --> 00:02:54,650
display this image in the main queue.

50
00:02:54,650 --> 00:02:55,700
How could we do this?

51
00:02:55,700 --> 00:02:59,350
How can we hop from a background
queue to the main queue.

52
00:03:01,080 --> 00:03:02,980
Well I've been hinting it for some time.

53
00:03:02,980 --> 00:03:06,920
You gotta think of inception,
with dreams within dreams.

54
00:03:06,920 --> 00:03:10,169
In this case it's
closures within closures.

55
00:03:11,250 --> 00:03:14,588
So from within the background
closure in here,

56
00:03:14,588 --> 00:03:20,210
we're going to get a reference to the
main queue, and then call dispatch async

57
00:03:20,210 --> 00:03:26,190
within this closure and
send another closure to the main queue.

58
00:03:26,190 --> 00:03:30,640
So basically we're going to start
here in the background, and

59
00:03:30,640 --> 00:03:34,600
once we reach this point we're
going to jump to the main queue.

60
00:03:34,600 --> 00:03:36,080
Let's see how we can do this.

61
00:03:36,080 --> 00:03:37,910
Let's take a look at this code again.

62
00:03:37,910 --> 00:03:38,990
So, first of all,

63
00:03:38,990 --> 00:03:43,420
we jump to the background,
run a few lines of code that will block.

64
00:03:43,420 --> 00:03:45,970
And once we're done with this,

65
00:03:45,970 --> 00:03:49,410
we jump to the main queue
using the same function.

66
00:03:49,410 --> 00:03:50,920
Dispatch async.

67
00:03:50,920 --> 00:03:56,900
But this time, we're providing the main
queue with dispatch_get_main_queue.

68
00:03:56,900 --> 00:04:01,880
And within this closure,
that will run in the main queue,

69
00:04:01,880 --> 00:04:05,110
we set the image for the ImageView.

70
00:04:05,110 --> 00:04:05,960
So this way,

71
00:04:05,960 --> 00:04:11,930
we make sure that all of the code that
updates the UI runs in the maiden queue.

72
00:04:11,930 --> 00:04:15,350
So this is not only efficient,
it's absolutely safe.

73
00:04:15,350 --> 00:04:18,926
And this is the true beauty
of grand central dispatch.

74
00:04:18,926 --> 00:04:22,005
It makes asynchronous code
look like it's serial

75
00:04:22,005 --> 00:04:25,685
which is easier to understand
one line after the other

76
00:04:25,685 --> 00:04:29,185
while you're actually hopping from
one queue to the other queue.

77
00:04:29,185 --> 00:04:33,650
Before we move on, let's make sure that
this code actually does not block.

78
00:04:33,650 --> 00:04:35,540
Let's run it and take a look.

79
00:04:36,660 --> 00:04:37,710
So let's try again.

80
00:04:37,710 --> 00:04:39,350
The synchronous, it blocks.

81
00:04:40,720 --> 00:04:41,220
See?

82
00:04:42,640 --> 00:04:45,190
And let's try the asynchronous.

83
00:04:45,190 --> 00:04:49,896
See that it just kind of blips and
that's it.

84
00:04:49,896 --> 00:04:55,260
So, even though it seems

85
00:04:55,260 --> 00:04:59,886
like it's instantaneous, it's actually
downloading the image in the background.

86
00:04:59,886 --> 00:05:05,450
So let's get here and
once we click here it just blinks and

87
00:05:05,450 --> 00:05:10,780
we can, while it's downloading,
you can use the, the UI.

88
00:05:10,780 --> 00:05:13,540
So, so far, looks good.

89
00:05:13,540 --> 00:05:18,570
Let's move to the next step and
implement this last method.

90
00:05:18,570 --> 00:05:21,630
This is kind of your graduation for
this lesson.

91
00:05:21,630 --> 00:05:25,060
It's an asynchronous method
with a completion closure.

92
00:05:25,060 --> 00:05:25,680
Let's give it a try.
