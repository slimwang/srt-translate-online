1
00:00:01,220 --> 00:00:02,910
Okay, what'd you come up with.

2
00:00:02,910 --> 00:00:06,290
>> So the context for this constraint is

3
00:00:06,290 --> 00:00:09,950
the operation checkout which
belongs to the Patron class.

4
00:00:09,950 --> 00:00:13,020
And we're specifying the precondition.

5
00:00:13,020 --> 00:00:14,740
>> Well how about the arguments,
how about the signature?

6
00:00:14,740 --> 00:00:15,930
>> Oh, sorry.

7
00:00:15,930 --> 00:00:19,380
So checkout, and then it takes
a loanable item as an argument.

8
00:00:19,380 --> 00:00:21,700
And then you have the implied
argument of the Patron itself.

9
00:00:21,700 --> 00:00:22,830
>> Gotcha.

10
00:00:22,830 --> 00:00:28,350
>> And the precondition for
this particular constraint is that if

11
00:00:28,350 --> 00:00:32,920
the Patron's age is less than or
equal to 12, so they're a child,

12
00:00:32,920 --> 00:00:36,620
then that means that they can
only checkout up to five books.

13
00:00:36,620 --> 00:00:42,609
So, it's going to affect the operation

14
00:00:42,609 --> 00:00:47,370
of this function based on that.

15
00:00:47,370 --> 00:00:48,876
>> A couple of corrections.

16
00:00:48,876 --> 00:00:49,793
>> Okay.
>> It's less

17
00:00:49,793 --> 00:00:50,515
than five,
>> Less than five.

18
00:00:50,515 --> 00:00:53,376
>> okay, and
it's not going to affect the operation,

19
00:00:53,376 --> 00:00:56,380
it's going to prevent the operation.

20
00:00:56,380 --> 00:00:57,986
>> Okay.
>> It's a precondition right, and

21
00:00:57,986 --> 00:01:00,680
preconditions are essentially
preventative.

22
00:01:00,680 --> 00:01:05,302
Okay, because I had some confusion in
terms of how to specify because your

23
00:01:05,302 --> 00:01:10,403
less than or equal to twelve years old,
you age is less than or equal to 12,

24
00:01:10,403 --> 00:01:15,690
then how's that effect this method in
terms of how you express it in OCL.

25
00:01:15,690 --> 00:01:17,130
>> Okay so it prevents it.

26
00:01:17,130 --> 00:01:18,570
>> It just prevents it, okay.

27
00:01:18,570 --> 00:01:23,580
>> And ultimately the expression which

28
00:01:23,580 --> 00:01:28,490
comes with the keyword pre is a boolean,
okay?

29
00:01:28,490 --> 00:01:30,660
So booleans are true or false.

30
00:01:30,660 --> 00:01:31,900
In actually coming up
with the expression,

31
00:01:31,900 --> 00:01:37,710
there are several ways to manipulate the
logical connectives on it to get them.

32
00:01:37,710 --> 00:01:42,920
The one that's here is that it's
in the form of an implication.

33
00:01:42,920 --> 00:01:49,782
There's an implies keyword in OCL,
and we're saying that if the age and

34
00:01:49,782 --> 00:01:54,732
this is the age attribute
of the particular Patron,

35
00:01:54,732 --> 00:01:58,239
okay, is less than or equal to 12.

36
00:01:58,239 --> 00:02:02,159
In this case the 12 is for
years not weeks, okay.

37
00:02:02,159 --> 00:02:07,260
That then implies that
it must be the case that

38
00:02:07,260 --> 00:02:12,362
the size of the collection
of items currently

39
00:02:12,362 --> 00:02:17,330
checked out must be less than five.

40
00:02:17,330 --> 00:02:20,800
So a couple of things to say about that.

41
00:02:21,880 --> 00:02:25,460
There is an operation,
items currently checked out.

42
00:02:25,460 --> 00:02:29,040
And remember that it returned
a set of loanable items.

43
00:02:29,040 --> 00:02:29,760
>> Right.

44
00:02:29,760 --> 00:02:34,960
>> Now the set is a collection,
and collections themselves,

45
00:02:34,960 --> 00:02:39,544
collection class,
collections have operations.

46
00:02:39,544 --> 00:02:40,380
>> Mm-hm.

47
00:02:40,380 --> 00:02:43,780
>> And
one of the built in operations is size.

48
00:02:43,780 --> 00:02:45,080
So this is cardinality.

49
00:02:45,080 --> 00:02:48,860
Remember we had the in first year logic,
we had the vertical bars on things.

50
00:02:48,860 --> 00:02:53,820
So this is saying that the size of
the items currently checked out is less

51
00:02:53,820 --> 00:02:54,910
than five.

52
00:02:54,910 --> 00:02:57,900
>> Two more questions
before we move forward.

53
00:02:57,900 --> 00:03:01,977
Is the If-then syntax even supported in
OCL or if you're going to say something

54
00:03:01,977 --> 00:03:06,118
that's got that If-then structure which
is like an implication statement,

55
00:03:06,118 --> 00:03:07,460
you're just using was.

56
00:03:07,460 --> 00:03:10,450
>> So,
we actually had an if-then a minute ago.

57
00:03:10,450 --> 00:03:13,650
We had if the book was a best seller,

58
00:03:13,650 --> 00:03:18,250
it was only two weeks, and
else it was three weeks.

59
00:03:18,250 --> 00:03:19,170
>> Right.

60
00:03:19,170 --> 00:03:21,070
>> Okay, so
yes you can have the if-then.

61
00:03:21,070 --> 00:03:25,870
The difference is a technical

62
00:03:25,870 --> 00:03:30,184
difference having to do with the order
in which you check things, okay?

63
00:03:30,184 --> 00:03:36,610
So, if you have here a implies,

64
00:03:36,610 --> 00:03:40,910
you're first checking the age is
less than or equal to 12, okay?

65
00:03:40,910 --> 00:03:46,180
And then checking the other part
of it which was less than five.

66
00:03:46,180 --> 00:03:50,500
>> Okay, and
then the second question is, or

67
00:03:50,500 --> 00:03:51,540
it's not really a question I guess.

68
00:03:51,540 --> 00:03:55,260
I understand it more now that you say
a precondition is almost like if this

69
00:03:55,260 --> 00:03:58,930
does not hold,
then the method cannot execute.

70
00:03:58,930 --> 00:04:03,051
So therefore, when I was looking at the
original requirements that children can

71
00:04:03,051 --> 00:04:05,669
check out to five books,
less or equal to five was.

72
00:04:06,729 --> 00:04:09,260
I guess that was me kind of falling
back and saying okay it's less than or

73
00:04:09,260 --> 00:04:11,130
equal to five that's how
many books I can check out.

74
00:04:11,130 --> 00:04:14,520
But prior to this method executing,

75
00:04:14,520 --> 00:04:19,714
it can't have five books because then
they would go to six if it did execute.

76
00:04:19,714 --> 00:04:25,209
>> [CROSSTALK] An interesting point.

77
00:04:25,209 --> 00:04:29,551
If somehow magically, they had
checked out 50, and they came and

78
00:04:29,551 --> 00:04:34,650
tried to check out the 51st,
this would prevent them from doing it.

79
00:04:34,650 --> 00:04:35,280
>> Correct.

80
00:04:35,280 --> 00:04:39,984
>> Now, you can then ask,
how could they have gotten 50?

81
00:04:41,020 --> 00:04:42,520
Okay, and

82
00:04:42,520 --> 00:04:46,610
you could then prove to yourself that
they couldn't have gotten to 49, to 48.

83
00:04:46,610 --> 00:04:50,388
They couldn't have gotten past four,
right?

84
00:04:50,388 --> 00:04:52,292
>> Correct.

85
00:04:52,292 --> 00:04:56,410
>> So
this particular constraint is not saying

86
00:04:56,410 --> 00:04:59,770
how many they have checked
out explicitly, but

87
00:04:59,770 --> 00:05:04,950
you could use it to prove that they
could never have gotten above four.

88
00:05:06,140 --> 00:05:06,640
>> Okay.

89
00:05:06,640 --> 00:05:10,610
>> Okay, so I guess what we're talking
about here is the inner play between

90
00:05:10,610 --> 00:05:15,730
an invariant statement that they never
have more than four checked out, and

91
00:05:15,730 --> 00:05:19,515
the precondition on the operation of
which is preventing them from getting in

92
00:05:19,515 --> 00:05:21,559
a state which violates that invariant.

93
00:05:22,630 --> 00:05:25,520
>> So wait, the invariant though is
thick would never have more than five

94
00:05:25,520 --> 00:05:26,400
checked out.

95
00:05:26,400 --> 00:05:29,310
>> What's going on here is that

96
00:05:29,310 --> 00:05:33,130
the precondition says that they
have to have less than five.

97
00:05:33,130 --> 00:05:34,130
>> Right.
>> And then they can,

98
00:05:34,130 --> 00:05:36,720
the checkout on the operation
would allow them to add one more,

99
00:05:36,720 --> 00:05:38,050
and that would get them to five,
so you're right.

100
00:05:38,050 --> 00:05:38,750
>> Okay, okay.
