1
00:00:00,190 --> 00:00:04,680
Now in this scenario again, we'll need
to ultimately end up more workers,

2
00:00:04,680 --> 00:00:09,150
more work benches, more parts so in a
heterogeneous architecture we would need

3
00:00:09,150 --> 00:00:12,850
to add more processes,
more server note, more storage.

4
00:00:12,850 --> 00:00:15,270
However, before we can do that,

5
00:00:15,270 --> 00:00:19,650
we first need to profile what
kinds of toys are in the end.

6
00:00:19,650 --> 00:00:24,360
What kinds of requests
are the external users requesting?

7
00:00:24,360 --> 00:00:28,830
And then also profile what kinds
of resources is required for

8
00:00:28,830 --> 00:00:31,680
those particular types of requests for
those toys.

9
00:00:31,680 --> 00:00:36,750
Only after we perform these profiling
tasks will we be able to figure out

10
00:00:36,750 --> 00:00:42,000
exactly what kinds of resources
need to be added in order to

11
00:00:42,000 --> 00:00:45,790
continue maintaining some balance
in this heterogeneous design.

12
00:00:45,790 --> 00:00:49,690
The bottom line is that the management
of these systems is much more

13
00:00:49,690 --> 00:00:54,820
complex compared to what's required
in a homogeneous architecture.

14
00:00:54,820 --> 00:00:59,330
A very popular reference that discusses
the design space of these large scale

15
00:00:59,330 --> 00:01:05,019
Internet services is Eric Brewer's paper
Lessons from Giant Skill Services.

16
00:01:05,019 --> 00:01:08,870
This paper also describes some of the
trade-offs associated with choices for

17
00:01:08,870 --> 00:01:11,720
data replication versus
partitioning that we already

18
00:01:11,720 --> 00:01:13,290
discussed in the previous two lessons.

19
00:01:13,290 --> 00:01:15,385
I have linked the paper
in the instructor note.
