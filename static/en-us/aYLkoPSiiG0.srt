1
00:00:00,000 --> 00:00:06,000
For this procedure you're asked to reverse a list, and any elements that are lists

2
00:00:06,000 --> 00:00:10,000
within that list you're also asked to reverse.

3
00:00:10,000 --> 00:00:20,000
I'm going to label the elements A, B, C, and each of these elements needs to be in reverse order.

4
00:00:20,000 --> 00:00:22,000
C, B, A.

5
00:00:22,000 --> 00:00:31,000
Now C is itself a list, which means that C is going to have to be reversed as well.

6
00:00:31,000 --> 00:00:34,000
B is a list, and A is just a single element.

7
00:00:34,000 --> 00:00:38,000
Well, when it's a single element, that's it. We're done. A is fine.

8
00:00:38,000 --> 00:00:41,000
B we're going to have to reverse.

9
00:00:41,000 --> 00:00:49,000
Each element in B is now just an element. It's not a list. That's fine.

10
00:00:49,000 --> 00:00:53,000
Finally, in C it looks like we've got a lot of work to do here,

11
00:00:53,000 --> 00:00:58,000
because we've got 4 and this list of lists.

12
00:00:58,000 --> 00:01:01,000
Those need to be reversed.

13
00:01:01,000 --> 00:01:06,000
Four is okay, but 5, 6, 7--that's another list of lists.

14
00:01:06,000 --> 00:01:10,000
That one needs to be reversed, and so on.

15
00:01:10,000 --> 00:01:18,000
We're going to have to keep going until we get down to looking at the elements themselves which are not lists.

16
00:01:18,000 --> 00:01:21,000
That gives us the structure for our procedure,

17
00:01:21,000 --> 00:01:27,000
because we're doing the same thing over and over again to smaller parts of the lists,

18
00:01:27,000 --> 00:01:33,000
that really lends itself well to using recursion, and that's what we're going to do.

19
00:01:33,000 --> 00:01:37,000
No we're going to define the procedure deep_reverse.

20
00:01:37,000 --> 00:01:42,000
The first thing we're going to check is whether we have a list as our input.

21
00:01:42,000 --> 00:01:45,000
We're going use this function is_list,

22
00:01:45,000 --> 00:01:54,000
and if p is a list, then what we are going to do is create a new list, an empty list.

23
00:01:54,000 --> 00:02:00,000
We want to go through the elements in the original list in reverse order.

24
00:02:00,000 --> 00:02:04,000
In order to do that, we're going to count backwards.

25
00:02:04,000 --> 00:02:08,000
The last position is the length of the list -1.

26
00:02:08,000 --> 00:02:14,000
Then we want to go length of list -2, -3, and so on, all the way down to 0.

27
00:02:14,000 --> 00:02:16,000
We can do that using range.

28
00:02:16,000 --> 00:02:23,000
For i in range the length of the list -1.

29
00:02:23,000 --> 00:02:29,000
Because range stops one before the second input number,

30
00:02:29,000 --> 00:02:32,000
we have to go to -1 because we want to end at 0.

31
00:02:32,000 --> 00:02:35,000
We also want to tell it to count backwards.

32
00:02:35,000 --> 00:02:39,000
We want to count in -1 steps.

33
00:02:39,000 --> 00:02:45,000
What do we want to do? Well, we just want to append each element of the list in reverse order.

34
00:02:45,000 --> 00:02:48,000
But we don't want to just put the element in,

35
00:02:48,000 --> 00:02:52,000
because remember we've actually go to reverse each element as well.

36
00:02:52,000 --> 00:02:59,000
We're going to call the procedure again on each of the elements of the list.

37
00:02:59,000 --> 00:03:04,000
Then when the loop has finished, we're just going to return the result.

38
00:03:04,000 --> 00:03:07,000
Now, we haven't got a stopping condition yet.

39
00:03:07,000 --> 00:03:10,000
When did we stop when we were doing the example?

40
00:03:10,000 --> 00:03:14,000
We stopped when we got to an element that was not a list.

41
00:03:14,000 --> 00:03:20,000
So our else condition we just return whatever that element is.

42
00:03:20,000 --> 00:03:23,000
That's our base case for the recursion.
