1
00:00:00,000 --> 00:00:03,740
So let's say we are starting out and I'm going to do is using an example.

2
00:00:03,740 --> 00:00:11,450
So let's say we start up with the following Boolean formula (x₁ or not-x₂ or x₃)

3
00:00:11,450 --> 00:00:20,490
and (not-x₁ or x₂) and ( not-x₂ or x₃) and the array we're going to transform this into a network

4
00:00:20,490 --> 00:00:25,840
is we're going to do groups of vertices for each clause.

5
00:00:25,840 --> 00:00:29,120
So for this clause here, for this one here, and for this one here.

6
00:00:29,120 --> 00:00:33,000
So, this is our first group of vertices and we're going to have

7
00:00:33,000 --> 00:00:36,630
one vertex for each variable in that clause.

8
00:00:36,630 --> 00:00:45,030
So, this vertex here is for the x₁. This vertex here is for the not-x₂. This one here is for the x₃.

9
00:00:45,030 --> 00:00:52,430
For this one here, we're going to do another group. This one here is for the not-x₁.

10
00:00:52,430 --> 00:00:54,080
This one here is for the x₂.

11
00:00:54,080 --> 00:00:57,910
And for that clause done here. We're going to do the same thing.

12
00:00:57,910 --> 00:01:03,560
So we have not-x₂ and here we have x₃.

13
00:01:03,560 --> 00:01:07,910
And now, we're going to draw a lot of edges.

14
00:01:07,910 --> 00:01:15,310
So from each vertex, we're going to draw edges to every vertex

15
00:01:15,310 --> 00:01:19,070
in the other groups with one exception.

16
00:01:19,070 --> 00:01:23,380
We're not going to draw an edge if we have the same variable,

17
00:01:23,380 --> 00:01:28,020
but 1 is the untouched variable and the other one has a not.

18
00:01:28,020 --> 00:01:32,920
So x₁ and x₂, we're going to draw an edge. x₁ and x₃, we're going to do an edge..

19
00:01:32,920 --> 00:01:37,750
And x₁ and not-x₂ also but we're not going to do an edge here.

20
00:01:37,750 --> 00:01:44,260
And it works similarly for this one here. So not-x₂, not-x₁, that's something we don't care about.

21
00:01:44,260 --> 00:01:49,360
That's something where we draw an edge. no-x₂ and x₂.

22
00:01:49,360 --> 00:01:54,050
And then we have a not. Here, we do not have a not. So we don't draw an edge.

23
00:01:54,050 --> 00:01:59,550
And down here, that's fine. And here we have a case where we have not-x₂ and not-x₂.

24
00:01:59,550 --> 00:02:02,290
That's also fine. So we'll draw an edge here.

25
00:02:02,290 --> 00:02:05,560
It's early if we have a not and then here we don't have one.

26
00:02:05,560 --> 00:02:10,229
So for x₃, we can draw an edge down here. Down here.

27
00:02:10,229 --> 00:02:17,440
Again, those are the same. So we do draw an edge. That's fine and we're draw here.

28
00:02:17,440 --> 00:02:24,690
Now let's look at those here. So we already have all the edges all to these groups.

29
00:02:24,690 --> 00:02:29,980
So we only need to look down here and then the graph edges here

30
00:02:29,980 --> 00:02:33,400
and the same thing is going to happen here.

31
00:02:33,400 --> 00:02:40,230
So x₂, I'm not drawing an edge to this not-x₂ here and we're drawing an edge down here.

32
00:02:40,230 --> 00:02:45,830
And we've already drawn all the edges down here. So this is the network that we constructed.

33
00:02:45,830 --> 00:02:47,980
Now what about the size of the graph?

34
00:02:47,980 --> 00:02:53,970
So if the Boolean formula here has polynomial size, so we have n variables

35
00:02:53,970 --> 00:02:58,180
or in this case three variables and we said that we're going to have

36
00:02:58,180 --> 00:03:00,540
the total length of the Boolean formula.

37
00:03:00,540 --> 00:03:03,390
The polynomial and the number of variables.

38
00:03:03,390 --> 00:03:09,590
So, if this length here is polynomial, then the network also will have polynomial size

39
00:03:09,590 --> 00:03:13,090
because we have one vertex for each of the variables that occur here,

40
00:03:13,090 --> 00:03:15,450
so the size really doesn't change that much.

41
00:03:15,450 --> 00:03:19,130
We introduced edges but you already know that the number of edges is quadratic

42
00:03:19,130 --> 00:03:21,470
in the number of vertices that we have.

43
00:03:21,470 --> 00:03:24,790
So, the size stays polynomial which is already good for our reduction.

44
00:03:24,790 --> 00:03:28,920
But now I still need to show you what satisfiability has to do with clique.

45
00:03:28,920 --> 00:03:37,180
We're actually going to do this as a quiz. So let's say that the Boolean formula has m clauses.

46
00:03:37,180 --> 00:03:41,320
So in this case, m is 3 but you can consider the more general case here

47
00:03:41,320 --> 00:03:46,840
and then let's say that the graph that we have constructed has a clique of size m.

48
00:03:46,840 --> 00:03:52,220
So one clique of size m, for example here, because m is 3 would be this here.

49
00:03:52,220 --> 00:03:56,500
All vertices are connected to each other. There's others that you can find actually.

50
00:03:56,500 --> 00:04:02,330
So, if she can't find a clique of size m in a graph that was constructed this way,

51
00:04:02,330 --> 00:04:06,230
does that graph contain at least one vertex from each clause group

52
00:04:06,230 --> 00:04:09,680
and by clause group, I mean, the groups of vertices that we introduced

53
00:04:09,680 --> 00:04:14,720
for each of the clauses from our satisfiability formula.

54
00:04:14,720 --> 00:04:18,970
And what I would also like you to think about is if a clique can contain

55
00:04:18,970 --> 00:04:23,410
multiple vertices from one of this clause groups here.

56
00:04:23,410 --> 00:04:28,620
So if we could have a clique, say for example, that could contain these two vertices here

57
00:04:28,620 --> 00:04:32,260
or this two here or in the more general case, if we can have a clique

58
00:04:32,260 --> 00:04:36,010
that contains more than one vertex from each of these groups here.

59
00:04:36,010 --> 00:04:42,290
So please check those that are correct and leave the other ones blank.
