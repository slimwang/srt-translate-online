1
00:00:00,830 --> 00:00:04,064
We'll now put together everything that you've learned in this lesson, to solve

2
00:00:04,064 --> 00:00:08,410
an important problem, how to validate the input that a human user provided.

3
00:00:08,410 --> 00:00:12,570
Think again about the program with which we started this lesson, the elevator

4
00:00:12,570 --> 00:00:18,892
simulator. The user enters a number between one and 18, but not 13. There is no

5
00:00:18,892 --> 00:00:23,975
button labeled 13. And then that program computed the actual floor. Never mind

6
00:00:23,975 --> 00:00:27,880
that part. What I want to talk about is the part where we read the user input.

7
00:00:27,880 --> 00:00:32,400
In a program we don't have buttons. But we ask the user to type in the input.

8
00:00:32,400 --> 00:00:35,932
There's a prompt. And then what if some crazy user now enters 19 in the hope of

9
00:00:35,932 --> 00:00:42,362
getting to the roof or something. Or minus 2. Or some text, users do all sorts

10
00:00:42,362 --> 00:00:47,292
of interesting things. And when they do, the program might misbehave. So it's a

11
00:00:47,292 --> 00:00:50,708
better idea to catch those first, and just tell the user that, that was not

12
00:00:50,708 --> 00:00:54,903
right. Let's list the things that can go wrong and how one can address them in

13
00:00:54,903 --> 00:01:01,346
Java. First off, there's no button 13. And so in Java, you might write, if the

14
00:01:01,346 --> 00:01:07,505
floor equals 13, then print an error for the user. Let's continue. The next

15
00:01:07,505 --> 00:01:11,841
rule is that the bottom floor is one, and the top floor is 18. So if the user

16
00:01:11,841 --> 00:01:17,076
enters a number that is less than one, or greater than 18. We want to reject

17
00:01:17,076 --> 00:01:21,560
that. Here is the Java code. Note the use of the or operator here. If the floor

18
00:01:21,560 --> 00:01:26,594
is less than one, or greater than 18, then we print this error message. And

19
00:01:26,594 --> 00:01:30,309
finally, there is the issue. What if the user doesn't even type any number, but

20
00:01:30,309 --> 00:01:34,816
some words? That would actually be bad. Because, then, the nextInt method would

21
00:01:34,816 --> 00:01:39,504
fail. Let me show you how to protect against that. There is another method that

22
00:01:39,504 --> 00:01:43,032
we haven't yet seen, called hasNextInt, which looks at the user input, and,

23
00:01:43,032 --> 00:01:46,560
instead of, doing what the nextInt method does, namely returning it It just

24
00:01:46,560 --> 00:01:52,584
checks whether it is an integer or not. It returns true, if the user entered an

25
00:01:52,584 --> 00:01:58,351
integer. It returns false, if the user entered something else. In other words,

26
00:01:58,351 --> 00:02:02,540
it's a method that returns a Boolean value. So we can test for that, in the if

27
00:02:02,540 --> 00:02:08,215
statement. If the method returns true, then it is safe to call nextInt. We can

28
00:02:08,215 --> 00:02:12,334
read the input, and then process it in any way we want. If on the other hand

29
00:02:12,334 --> 00:02:16,470
this method returns false, then we print an error message. Now, it's your turn.

30
00:02:16,470 --> 00:02:20,565
Put those three pieces together, and fix up the elevator demo so that any bad

31
00:02:20,565 --> 00:02:24,660
input from the user is caught and the program only proceeds when the user did

32
00:02:24,660 --> 00:02:32,870
the right thing. An integer between 1 and 18, but not 13.
