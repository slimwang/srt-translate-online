1
00:00:00,260 --> 00:00:07,350
I have a new, challenging programming assignment for you that will take you a while,

2
00:00:07,440 --> 00:00:12,823
but I would like you to implement a multidimensional Kalman filter for the example

3
00:00:12,823 --> 00:00:13,930
I've just given you.

4
00:00:13,930 --> 00:00:20,181
The matrix class is a class for manipulating matrices that should make it really easy.

5
00:00:20,275 --> 00:00:26,064
It has a function that initializes matrices--I'll show you an example in a second.

6
00:00:26,131 --> 00:00:28,861
It can set them down to 0.

7
00:00:28,861 --> 00:00:31,130
It can compute an identity matrix.

8
00:00:31,130 --> 00:00:33,207
It can print out a matrix with show.

9
00:00:33,369 --> 00:00:38,170
It overloads operators like addition, subtraction,

10
00:00:39,542 --> 00:00:45,292
multiplication, and even computes the transpose of a matrix,

11
00:00:45,398 --> 00:00:49,291
and in some more extended code, it can actually invert a matrix

12
00:00:49,291 --> 00:00:51,249
using Cholesky factorization.

13
00:00:51,249 --> 00:00:53,671
There's a function here called inverse.

14
00:00:53,671 --> 00:00:56,131
This matrix class is available.

15
00:00:56,131 --> 00:00:59,492
It's a small version of what is found in typical libraries.

16
00:00:59,629 --> 00:01:03,121
I want to demonstrate it for you just for a second.

17
00:01:03,267 --> 00:01:08,202
You can make a matrix with a command like this with the argument in the parenthesis.

18
00:01:08,290 --> 00:01:10,347
It's a 2-dimensional matrix.

19
00:01:10,369 --> 00:01:12,328
In this case it's a vertical vector.

20
00:01:12,393 --> 00:01:17,041
With the show command, you can print out the result of the vertical vector.

21
00:01:17,077 --> 00:01:20,346
You can put the transpose as follows.

22
00:01:20,376 --> 00:01:23,779
If you run this, you'll find the horizontal vector.

23
00:01:23,779 --> 00:01:27,353
Say you wish to multiply a matrix by a vector,

24
00:01:27,449 --> 00:01:31,253
then we can make a 2 x 2 matrix with this initialization over here,

25
00:01:31,253 --> 00:01:33,953
a matrix of [12., 8.] and [6., 2.].

26
00:01:33,998 --> 00:01:35,983
We can print this matrix.

27
00:01:35,990 --> 00:01:38,688
Here it is: 12, 8, 6, 2.

28
00:01:38,724 --> 00:01:40,591
These are these values over here.

29
00:01:40,591 --> 00:01:42,986
And we can multiply F and a.

30
00:01:43,028 --> 00:01:45,538
So here b = F x a.

31
00:01:45,691 --> 00:01:50,155
And if we show the result, we get the vector 280.

32
00:01:50,155 --> 00:01:56,319
That's obtained by 10 x 12 + 10 x 8 is 200.

33
00:01:56,330 --> 00:01:59,232
10 x 6 + 10 x 2 is 80.

34
00:02:01,621 --> 00:02:06,040
So using my matrix libraries, I set an initial state.

35
00:02:06,040 --> 00:02:11,038
This is a tracking in 1D where the state is the position

36
00:02:11,038 --> 00:02:12,819
and the velocity.

37
00:02:12,819 --> 00:02:17,485
I initialized both with 0 because I don't know the actual location and the velocity.

38
00:02:17,485 --> 00:02:20,178
I get an uncertainty matrix

39
00:02:20,208 --> 00:02:23,106
where I have a really high uncertainty in the position

40
00:02:23,106 --> 00:02:26,827
and a really high uncertainty in the velocity,

41
00:02:26,827 --> 00:02:28,177
and they're both uncorrelated.

42
00:02:28,215 --> 00:02:31,298
That's the matrix of 1000, 0, 0, 1000.

43
00:02:31,298 --> 00:02:34,857
I specify an external motion, but it's 0, 0, so it has no effect,

44
00:02:34,903 --> 00:02:35,891
so just ignore this.

45
00:02:36,577 --> 00:02:40,331
I build the next state function, which is the one we just discussed,

46
00:02:40,331 --> 00:02:42,075
[1., 1] [0, 1.].

47
00:02:42,075 --> 00:02:47,046
That assumes that the velocity is just being added to the position,

48
00:02:47,053 --> 00:02:50,205
and the velocity and expectation stays the same.

49
00:02:50,391 --> 00:02:53,563
I build a measurement function that extracts just the first

50
00:02:53,567 --> 00:02:55,491
of the 2 values, 1 and 0,

51
00:02:55,491 --> 00:02:58,479
so I can observe the location but not the velocity.

52
00:02:58,479 --> 00:03:00,335
I have a measurement uncertainty.

53
00:03:00,335 --> 00:03:02,262
It happens to be 1 in this example.

54
00:03:02,262 --> 00:03:05,603
And I have an identity matrix, [1., 0.] [0., 1.].

55
00:03:05,603 --> 00:03:09,406
And then I run a filter with these 3 measurements over here,

56
00:03:09,406 --> 00:03:12,542
and what should come out is that by running the filter,

57
00:03:12,542 --> 00:03:15,305
I can estimate the velocity

58
00:03:15,331 --> 00:03:18,151
and therefore make better predictions.

59
00:03:18,163 --> 00:03:20,676
In the filter that I want you to program,

60
00:03:20,676 --> 00:03:25,775
I want the measurement update first and then the motion update.

61
00:03:25,775 --> 00:03:28,438
Every time we run the filter,

62
00:03:28,438 --> 00:03:33,058
I want you to update the measurement first, then the motion.

63
00:03:33,058 --> 00:03:37,387
Here is my empty procedure filter that we have to fill in

64
00:03:37,387 --> 00:03:39,527
where I go through our measurements,

65
00:03:39,527 --> 00:03:42,687
and it builds the measurement update and then the motion update,

66
00:03:42,687 --> 00:03:46,124
the prediction, and then I just print out the resulting estimates.

67
00:03:46,124 --> 00:03:49,705
I do this a number of times, 3 times in this case.

68
00:03:49,705 --> 00:03:52,622
Once we fill this in and I hit the Run button,

69
00:03:52,622 --> 00:03:54,387
I get the following output.

70
00:03:54,387 --> 00:03:57,037
After my first measurement update,

71
00:03:57,037 --> 00:04:01,738
I observed the location 1, which gets copied over

72
00:04:01,738 --> 00:04:04,878
essentially to .99 over here.

73
00:04:04,878 --> 00:04:09,833
I learn nothing about the velocity, so it's still 0, just the way I initialized it.

74
00:04:09,864 --> 00:04:13,561
And then there's an updated uncertainty matrix

75
00:04:13,561 --> 00:04:17,636
which now shows what happens to be a strong correlation,

76
00:04:17,636 --> 00:04:19,765
1000, 1000, 1000, 1000.

77
00:04:19,765 --> 00:04:22,484
That differs from the initial one only that we filled in

78
00:04:22,484 --> 00:04:23,924
the off-diagonal elements.

79
00:04:23,981 --> 00:04:26,942
It happens to be exactly what the Kalman filter does.

80
00:04:27,005 --> 00:04:29,160
And then I'll observe again the 2.

81
00:04:29,160 --> 00:04:33,855
I want the output to now tell me that my next prediction is 3.

82
00:04:33,855 --> 00:04:36,338
It's the observation plus the prediction.

83
00:04:36,338 --> 00:04:39,335
But now I have a really good estimate

84
00:04:39,335 --> 00:04:41,787
on what the velocity is.

85
00:04:41,787 --> 00:04:44,796
It's essentially 1, and the reason is

86
00:04:44,796 --> 00:04:47,432
my Kalman filter was able to use

87
00:04:47,432 --> 00:04:50,774
the Kalman filter equations to find this value.

88
00:04:50,774 --> 00:04:54,617
There's a new covariance matrix,

89
00:04:54,617 --> 00:04:58,272
and for the third observation followed by the prediction,

90
00:04:58,272 --> 00:05:02,637
the prediction is correctly effectively 4, 3.999.

91
00:05:02,637 --> 00:05:07,071
The velocity estimate is correctly 1, which is .99999,

92
00:05:07,071 --> 00:05:10,357
and I have yet another uncertainty matrix which illustrates

93
00:05:10,357 --> 00:05:13,375
I high certainty in the velocity estimate.

94
00:05:13,375 --> 00:05:16,124
Notice a relatively high certainty in the position estimate

95
00:05:16,124 --> 00:05:18,224
compared to my initial uncertainties.

96
00:05:18,224 --> 00:05:20,783
So can you write the algorithm filter

97
00:05:20,783 --> 00:05:25,292
that outputs those exact values over here?

98
00:05:25,292 --> 00:05:27,888
This is an involved programming assignment.

99
00:05:27,888 --> 00:05:30,604
What you have to do is you have to essentially

100
00:05:30,604 --> 00:05:32,906
implement the equations I gave you.

101
00:05:32,906 --> 00:05:35,881
You have to familiarize yourself with the matrix class

102
00:05:35,881 --> 00:05:39,674
and then go and fill in the filter code

103
00:05:39,674 --> 00:05:42,437
in accordance to the things that I showed you

104
00:05:42,437 --> 00:05:44,697
for the multivariate Kalman filter.
