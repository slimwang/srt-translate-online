1
00:00:00,000 --> 00:00:03,270
What would be the best possible input for the algorithm.

2
00:00:03,270 --> 00:00:08,800
The best possible input for the algorithm would be if we give it a string that does not contain

3
00:00:08,800 --> 00:00:18,870
the letter a at all because this rates at a to 0, so the overall running time will be 2<i>n+0</i>a+1,

4
00:00:18,870 --> 00:00:21,270
which is this constant here.

5
00:00:21,270 --> 00:00:28,660
Now, in the worst case, the string will just consist of a's and this will set a equal to n

6
00:00:28,660 --> 00:00:34,540
because each of the letters in the string will be added, and so if a=n,

7
00:00:34,540 --> 00:00:39,880
then the overall running time is 3<i>2+0</i>a+1.

8
00:00:39,880 --> 00:00:45,270
Now, the great thing about this here is that in both cases, both with a best-case view

9
00:00:45,270 --> 00:00:49,350
and with the worst-case view, we have eliminated the dependence on a,

10
00:00:49,350 --> 00:00:54,580
so we know that no matter what string the algorithm receives, the running time will always be

11
00:00:54,580 --> 00:00:59,000
between 2 and +1 and 3 and +1.

12
00:00:59,000 --> 00:01:04,910
Now, you could also say--why didn't we ask you to analyze the average running time

13
00:01:04,910 --> 00:01:09,080
or the running time for an average input and that is simply because it's very hard

14
00:01:09,080 --> 00:01:11,290
to define the notion of average.

15
00:01:11,290 --> 00:01:16,100
Does an average string, for example, contain only half of the letters as a

16
00:01:16,100 --> 00:01:20,690
or is it at end of sentence, in which case the number of a's will be very low.

17
00:01:20,690 --> 00:01:24,020
Unless we have a very precise view of the term average,

18
00:01:24,020 --> 99:59:59,999
the running time here would be very hard to define.
