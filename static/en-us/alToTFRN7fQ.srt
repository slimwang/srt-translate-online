1
00:00:00,680 --> 00:00:06,420
Let me give you a very quick refresher on encryption. There are two families of

2
00:00:06,420 --> 00:00:13,940
encryption systems. One is the private key cryptosystem. And in the private key

3
00:00:13,940 --> 00:00:19,830
cryptosystem both the sender and the receiver sse symmetric keys for encryption

4
00:00:19,830 --> 00:00:26,160
of the data and decryption of the data. A common private key system that we all

5
00:00:26,160 --> 00:00:30,950
are using probably on an every day basis is passwords. When we log

6
00:00:30,950 --> 00:00:36,170
into either a corporate network or a university network. We use a username

7
00:00:36,170 --> 00:00:41,400
and password and that is using a private key encryption systems. The

8
00:00:41,400 --> 00:00:46,270
idea is simple. The sender takes the data that they want to

9
00:00:46,270 --> 00:00:51,480
send a receiver and encrypts the data using a key and this key

10
00:00:51,480 --> 00:00:53,890
is a private key that is known only

11
00:00:53,890 --> 00:00:55,760
to the sender and the receiver space and nobody

12
00:00:55,760 --> 00:00:59,490
else. So by encrypting the data with this key

13
00:00:59,490 --> 00:01:02,950
they produce what is called a cyphertext and the

14
00:01:02,950 --> 00:01:08,140
cyphertext can go on insecure links. Anybody can see

15
00:01:08,140 --> 00:01:10,930
the bit pattern of the cyphertext, but in order

16
00:01:10,930 --> 00:01:13,900
to make sense out of the cyphertext they have

17
00:01:13,900 --> 00:01:16,610
to decrypt it. And to decrypt it they need

18
00:01:16,610 --> 00:01:22,420
the key and the key is only available between the sender and the receiver. So

19
00:01:22,420 --> 00:01:26,060
this is where Salsa's principle comes into play.

20
00:01:26,060 --> 00:01:28,800
That is, publish the design, but protect the

21
00:01:28,800 --> 00:01:31,450
key. The keys are protected between the sender

22
00:01:31,450 --> 00:01:34,590
and the receiver. You're publishing the method by

23
00:01:34,590 --> 00:01:37,500
which you are transfering information between sender and

24
00:01:37,500 --> 00:01:42,000
receiver. Namely, using a private key encryption system.

25
00:01:42,000 --> 00:01:46,920
But, for any bad guy to access information that is flowing on the

26
00:01:46,920 --> 00:01:51,890
wire they have to have the key in order to make sense out

27
00:01:51,890 --> 00:01:56,670
of the data that is flowing. And you make breaking the key hard

28
00:01:56,670 --> 00:02:01,860
enough, computationally, that the system is secure. Now

29
00:02:01,860 --> 00:02:07,070
one of the problems with the private key system is the fact that the

30
00:02:07,070 --> 00:02:08,889
keys have to be distributed to the

31
00:02:08,889 --> 00:02:12,390
sender and the receiver and key distribution problem

32
00:02:12,390 --> 00:02:15,125
is one of the difficulties with private key

33
00:02:15,125 --> 00:02:18,570
cryptosystems. Especially as the size of the organization

34
00:02:18,570 --> 00:02:22,602
becomes larger and larger. The public key cryptosystem

35
00:02:22,602 --> 00:02:25,680
overcomes this key distribution problem. And in this

36
00:02:25,680 --> 00:02:28,720
case there is a public key which is

37
00:02:28,720 --> 00:02:32,320
published. The name itself suggests the idea behind

38
00:02:32,320 --> 00:02:36,000
the public key cryptosystem. And that is, anyone

39
00:02:36,000 --> 00:02:39,910
can create an encrypted data by taking this public

40
00:02:39,910 --> 00:02:42,590
key, which is available, let's say published in the

41
00:02:42,590 --> 00:02:45,810
Yellow Pages. They can take the public key, take

42
00:02:45,810 --> 00:02:50,290
the data that they want to send and encrypt it, and send it on the wire. But

43
00:02:50,290 --> 00:02:53,560
in order to decrypt the data. The public key

44
00:02:53,560 --> 00:02:57,960
is no good. You need a private key that

45
00:02:57,960 --> 00:03:00,370
is the only way to decrypt this

46
00:03:00,370 --> 00:03:04,850
data. Well, in other words, the mathematical underpinning

47
00:03:04,850 --> 00:03:07,970
of the public key cryptosystem is that there

48
00:03:07,970 --> 00:03:11,420
are asymmetric keys, a pair of keys for

49
00:03:11,420 --> 00:03:15,650
information exchange. In order to encrypt you use

50
00:03:15,650 --> 00:03:17,960
a key that is a public key. Anybody

51
00:03:17,960 --> 00:03:23,920
can have access to that. But in order to decrypt that, you need a private key.

52
00:03:23,920 --> 00:03:31,500
And, conversion of data into a cyphertext using the public key

53
00:03:31,500 --> 00:03:37,520
is a one-way function, which is not reversible. Similarly, converting the

54
00:03:37,520 --> 00:03:43,472
encrypted message into the original data using the private key is another

55
00:03:43,472 --> 00:03:48,992
one-way function. So one-way functions are the mathematical basis for the

56
00:03:48,992 --> 00:03:55,810
public key cryptosystem. So now, the way you would send data, if you're the

57
00:03:55,810 --> 00:03:59,190
sender, take the data, encrypt it using

58
00:03:59,190 --> 00:04:02,710
the public key. You create a cyphertext. Once

59
00:04:02,710 --> 00:04:07,901
you have the cyphertext, you cannot convert it back to the data using the public

60
00:04:07,901 --> 00:04:11,140
key. The only entity that can convert

61
00:04:11,140 --> 00:04:14,690
the cyphertext back to its original data is

62
00:04:14,690 --> 00:04:17,120
the entity that has the private key.

63
00:04:17,120 --> 00:04:20,620
The other part of this asymmetric key infrastructure,

64
00:04:20,620 --> 00:04:22,800
namely, the private key and using the

65
00:04:22,800 --> 00:04:26,510
private key, you can decrypt the cyphertext and

66
00:04:26,510 --> 00:04:33,610
create the original data. So this is the workflow for a sender to encrypt the

67
00:04:33,610 --> 00:04:36,600
data, clear the cypher text, send it

68
00:04:36,600 --> 00:04:39,780
to the receiver, receiver decrypts it using the

69
00:04:39,780 --> 00:04:43,410
private key, and produces the original data.
