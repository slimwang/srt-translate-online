1
00:00:00,000 --> 00:00:04,000
In this problem, we want to be able to split a string

2
00:00:04,000 --> 00:00:08,000
by more than just spaces and white space but instead punctuation.

3
00:00:08,000 --> 00:00:12,000
This allows us to better index a web page

4
00:00:12,000 --> 00:00:16,000
so that we aren't fooled by punctuated text following a word, such as a comma,

5
00:00:16,000 --> 00:00:19,000
and instead we are able to search for that word itself

6
00:00:19,000 --> 00:00:21,000
instead of the word and the comma.

7
00:00:21,000 --> 00:00:24,000
The first thing I do is initialize the output list.

8
00:00:24,000 --> 00:00:27,000
This will contain the words separated by the splitlist.

9
00:00:27,000 --> 00:00:33,000
With this variable I'm going to keep track of whether or not I am at a point that's a split.

10
00:00:33,000 --> 00:00:36,000
This one might make more sense later, so let's keep going.

11
00:00:36,000 --> 00:00:38,000
Using the for loop construct like this

12
00:00:38,000 --> 00:00:42,000
iterates through the string source 1 character at a time.

13
00:00:42,000 --> 00:00:46,000
If the current character is one we're supposed to split on, such as a comma,

14
00:00:46,000 --> 00:00:49,000
then we're going to set atsplit to True.

15
00:00:49,000 --> 00:00:52,000
If we're at a character that isn't in the splitlist

16
00:00:52,000 --> 00:00:57,000
and we're at a split point, we're going to create a new entry in the list.

17
00:00:57,000 --> 00:00:59,000
So if we're looking at this example up top,

18
00:00:59,000 --> 00:01:02,000
if we just had a space and then we have a T

19
00:01:02,000 --> 00:01:06,000
where space is something that we want to split on and T is not,

20
00:01:06,000 --> 00:01:11,000
then we want to create a new entry that will contain what becomes the word 'the'

21
00:01:11,000 --> 00:01:15,000
instead of appending it on to the previous one after.

22
00:01:15,000 --> 00:01:18,000
If we're not at a split point but rather building up a word,

23
00:01:18,000 --> 00:01:23,000
such as in the middle of 'After', we simply add the current character to the end of that word,

24
00:01:23,000 --> 00:01:27,000
output [-1] finds the last entry in the output list,

25
00:01:27,000 --> 00:01:31,000
and we simply append the character using the + operator.

26
00:01:31,000 --> 00:01:34,000
Once we've gone through every character in our source string, we return the output list.
