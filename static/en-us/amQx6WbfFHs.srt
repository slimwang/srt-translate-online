1
00:00:00,160 --> 00:00:04,499
Now the second phase of this algorithm uses this table to construct the output order.

2
00:00:04,499 --> 00:00:08,485
What we're looking to generate is the list of nodes in order, and we computed this before.

3
00:00:08,485 --> 00:00:12,026
We see it over here: 0, 5, 2, 7, 4, 9, 1, 6, 3, 8.

4
00:00:12,026 --> 00:00:17,211
Remember we can get that by using a serial algorithm just to convince ourselves that it's correct.

5
00:00:17,211 --> 00:00:21,497
We start at node 0, its successor is 5, the successor to 5 is 2,

6
00:00:21,497 --> 00:00:23,759
the successor to 2 is 7 and so on.

7
00:00:23,759 --> 00:00:28,431
To generate this answer, each node is going to compute its position in the output list,

8
00:00:28,431 --> 00:00:30,867
and we're going to call that position outpos,

9
00:00:30,867 --> 00:00:36,645
and then when we're done, we can use that position to scatter the node into its proper location in that output list.

10
00:00:36,645 --> 00:00:38,975
So just to understand what outpos is going to look like,

11
00:00:38,975 --> 00:00:44,614
we see that node 0 ends up at location 0 in the output list, so outpos better be 0.

12
00:00:44,614 --> 00:00:50,172
Node 5 ends up at the first location in the output list, so it's going to get outpos equals 1.

13
00:00:50,172 --> 00:00:53,289
Node 2 was next and then node 7, and so on.

14
00:00:53,289 --> 00:00:54,993
So this is what we're trying to compute here.

15
00:00:54,993 --> 00:00:56,821
We're trying to compute outpos.

16
00:00:56,821 --> 00:01:03,636
So when we start this, all we know is that node 0 is in position 0, so we can fill in that outpos right away.

17
00:01:03,636 --> 00:01:06,811
Now that node 0 is calculated where it will end up in the output,

18
00:01:06,811 --> 00:01:10,107
we're going to consider it awake, but all the other nodes are asleep.

19
00:01:10,107 --> 00:01:14,684
A node is awake if it has filled in its value for outpos, otherwise it's asleep.

20
00:01:14,684 --> 00:01:19,200
So now we're going to do several iterations of an algorithm that will eventually wake up all the nodes

21
00:01:19,200 --> 00:01:21,050
and calculate their output positions.

22
00:01:21,050 --> 00:01:24,785
So on each iteration we're going to launch N threads, 1 per element here,

23
00:01:24,785 --> 00:01:27,623
but if a thread is asleep we immediately return from that thread.

24
00:01:27,623 --> 00:01:29,925
Only awake threads do any work at all.

25
00:01:29,925 --> 00:01:35,165
So for the first iteration, node 0 wants to wake up its successor, so how does it find the successor?

26
00:01:35,165 --> 00:01:39,103
Well it can look in this plus 1 array to find its immediate successor,

27
00:01:39,103 --> 00:01:42,004
and so we can immediately see that's node 5.

28
00:01:42,004 --> 00:01:44,472
So where will node number 5 write its output?

29
00:01:44,472 --> 00:01:46,895
That's what we need to fill in here for outpos.

30
00:01:46,895 --> 00:01:50,058
It knows that it's coming after node number 0, right here,

31
00:01:50,058 --> 00:01:53,972
and it knows that it's coming 1 hop past node number 0.

32
00:01:53,972 --> 00:01:56,350
So we can add these 2 values together

33
00:01:56,350 --> 00:02:01,922
to see that node number 5 will write its output to position number 1 in the output array,

34
00:02:01,922 --> 00:02:05,593
and so now we have 2 nodes that are awake: Node 0, node 5.

35
00:02:05,593 --> 00:02:08,864
So now both awake nodes are going to wake up another node

36
00:02:08,864 --> 00:02:11,581
and help those nodes calculate their output position.

37
00:02:11,581 --> 00:02:14,710
So now instead of looking at the immediate successors plus 1,

38
00:02:14,710 --> 00:02:17,080
we're going to look at the next line, plus 2,

39
00:02:17,080 --> 00:02:21,277
and we're going to use this to find the nodes 2 away from each of our awake nodes,

40
00:02:21,277 --> 00:02:24,713
so node 0 is going to wake up node number 2.

41
00:02:24,713 --> 00:02:27,869
So node 0 is going to wake up node number 2,

42
00:02:27,869 --> 00:02:30,204
and so where does node 2 write its output?

43
00:02:30,204 --> 00:02:35,515
Well it'll be the sum of where node 0 is at output location 0, and we know we're 2 hops away,

44
00:02:35,515 --> 00:02:39,881
so when we add those 2 up we know that node 2 will be written to position number 2.

45
00:02:39,881 --> 00:02:45,183
Similarly node 5 is going to wake up the node that's 2 hops away; in this case, node 7.

46
00:02:45,183 --> 00:02:47,070
Where will node 7 write its output?

47
00:02:47,070 --> 00:02:49,939
It knows that it'll start from node number 5 at position number 1,

48
00:02:49,939 --> 00:02:53,275
and then we'll add 2 hops to that and get position number 3.

49
00:02:53,275 --> 00:02:56,852
On the next iteration, we're going to use the next line of the array, the plus 4 array,

50
00:02:56,852 --> 00:03:01,382
and each of the 4 awake nodes from output position 0, 1, 2, and 3

51
00:03:01,382 --> 00:03:04,126
will wake up the node that's 4 hops away.

52
00:03:04,126 --> 00:03:07,090
This will allow us to fill in 4 more values into the outpos array.

53
00:03:07,090 --> 00:03:14,625
Node 4 will get position number 4, node 9 gets position 5, node 1 gets position 6, and node 6 gets position 7,

54
00:03:14,625 --> 00:03:17,065
and the final iteration using the plus 8 array

55
00:03:17,065 --> 00:03:21,005
lets us fill in node 3 as outpos 8 and node 8 as outpos 9.

56
00:03:21,005 --> 00:03:28,055
So the final step is to use outpos to scatter the nodes to their destinations, so let's see how that works.

57
00:03:28,055 --> 00:03:33,048
We're going to start by looking at the first node, and we know that node 0 is going to end up in output position 0.

58
00:03:33,048 --> 00:03:36,554
So we will scatter this 0 to output location 0 and write the 0.

59
00:03:36,554 --> 00:03:40,414
The next node, node number 1, is going to end up in output position 6.

60
00:03:40,414 --> 00:03:44,610
The next node, node 2, will end up directly in output position 2,

61
00:03:44,610 --> 00:03:47,282
and so after we do all of these scatter operations,

62
00:03:47,282 --> 00:03:50,005
we come up with the nodes in the correct order.

63
00:03:50,005 --> 00:03:53,002
So as a function of N how many steps does this take?

64
00:03:53,002 --> 00:03:56,453
Square root of N, log N, N or N squared?
