1
00:00:00,000 --> 00:00:02,959
The purpose of this segment is to talk about scope which is a concept that we've been

2
00:00:02,959 --> 00:00:06,370
using in the course but haven't actually talked about specifically

3
00:00:06,370 --> 00:00:09,939
And so if you've been getting confused by decorators which decorate decorators

4
00:00:09,939 --> 00:00:14,659
or functions, calling functions, return functions, and so on, this video is for you.

5
00:00:14,659 --> 00:00:16,699
So when we talk about a variable scope,

6
00:00:16,699 --> 00:00:19,869
we're talking about the region in the program in which we can access that variable.

7
00:00:19,869 --> 00:00:23,619
This is a concept that can go from being very simple to quite difficult.

8
00:00:23,619 --> 00:00:26,570
So let's start with something basic and build from there.

9
00:00:26,570 --> 00:00:31,728
Here we've got some very simple code, x=2, y=3, print the sum and of course, we get 5.

10
00:00:31,728 --> 00:00:34,689
In this example, x and y are what's called global variables

11
00:00:34,689 --> 00:00:38,669
and then later what we call the global environment which I'm going to represent with this box

12
00:00:38,669 --> 00:00:43,390
and in this environment, x is bound to the value 2 and y is bound to the value 3.

13
00:00:43,390 --> 00:00:46,660
The global environment is also where all our primitive operators are bound.

14
00:00:46,660 --> 00:00:50,090
So for example the plus sign is bound to some object which carries out addition

15
00:00:50,090 --> 00:00:52,649
and we won't go into too much detail about what's going on there.

16
00:00:52,649 --> 00:00:56,679
So let's make things a bit more interesting--so here I've just defined a function called add_nums

17
00:00:56,679 --> 00:01:01,679
and it returns x+y and when I run it, I get 11.

18
00:01:01,679 --> 00:01:05,789
So what's happened here is that our function has created a new scope

19
00:01:05,789 --> 00:01:11,669
and this scope is local to the function and so what happened when we defined add_nums

20
00:01:11,669 --> 00:01:15,078
was we made this binding between this name and the function object.

21
00:01:15,078 --> 00:01:19,687
Now that's fine but as soon as we call add_nums by saying

22
00:01:19,687 --> 00:01:23,686
print the result print add_nums, we created a new environment

23
00:01:23,686 --> 00:01:27,770
Now I'm going to call this environment add_nums, and in this environment, we made an assignment.

24
00:01:27,770 --> 00:01:31,410
There are two assignment from x to 5 and from y to 6

25
00:01:31,410 --> 00:01:37,100
and when we call add_nums, Python prefers to choose variables within its local scope.

26
00:01:37,100 --> 00:01:40,699
If it can do that, it then moves up following this pointer

27
00:01:40,699 --> 00:01:43,969
to what's called its enclosing environment since this add_nums environment

28
00:01:43,969 --> 00:01:47,619
lives inside of this global environment and lives there.

29
00:01:47,619 --> 00:01:50,709
If after following all these paths up into the global environment, it still doesn't find

30
00:01:50,709 --> 00:01:55,050
the variable it's looking for that's when we get an error-- specifically a name error.
