1
00:00:00,000 --> 00:00:03,000
Now I'm going to take quick look at the question what is testing.

2
00:00:03,000 --> 00:00:07,000
So it's always the case that we have some software under test.

3
00:00:07,000 --> 00:00:13,000
When we're doing testing, we always require a source of test inputs. This results in test outputs.

4
00:00:13,000 --> 00:00:16,000
The outputs are processed by an acceptability check.

5
00:00:16,000 --> 00:00:20,000
If the outputs are okay, then the test case succeeded.

6
00:00:20,000 --> 00:00:25,000
If the outputs are not okay, then the test case failed and we're going to have to debug.

7
00:00:25,000 --> 00:00:27,000
This is, of course, really simple.

8
00:00:27,000 --> 00:00:34,000
On the other hand, a couple of the things on this slide here--that is selecting a good set of test inputs,

9
00:00:34,000 --> 00:00:39,000
and designing good acceptability test--end up being actually really hard,

10
00:00:39,000 --> 00:00:42,000
and basically, these are what we are going to be spending this course talking about.

11
00:00:42,000 --> 00:00:47,000
I would like to give a few facts about testing--by facts of course I mean my own opinions.

12
00:00:47,000 --> 00:00:51,000
First of all, the goal of testing isn't so much as finding bugs,

13
00:00:51,000 --> 00:00:54,000
but rather it's finding bugs as early as possible.

14
00:00:54,000 --> 00:00:58,000
If our goal is just to find some bugs, we go ahead and give the software to our customers

15
00:00:58,000 --> 00:01:02,000
and let them find the bugs, but of course, there are huge cost associated with doing this.

16
00:01:02,000 --> 00:01:05,000
What we rather want to do is to move the time in which to find those bugs early.

17
00:01:05,000 --> 00:01:09,000
And the fundamental reason for that is, is that it's almost always the case

18
00:01:09,000 --> 00:01:13,000
that the bug that's found earlier is cheaper to fix.

19
00:01:13,000 --> 00:01:15,000
The second fact is that it's possible to spend a lot of time and effort

20
00:01:15,000 --> 00:01:18,000
on testing and still do a really bad job.

21
00:01:18,000 --> 00:01:22,000
Doing testing right requires some imagination and some good taste.

22
00:01:22,000 --> 00:01:25,000
Third, more testing is not always better.

23
00:01:25,000 --> 00:01:29,000
In fact, the quality of testing is all about the cost/benefit tradeoff.

24
00:01:29,000 --> 00:01:31,000
And fundamentally, testing is an economic activity.

25
00:01:31,000 --> 00:01:34,000
We're spending money or we're spending effort on testing

26
00:01:34,000 --> 00:01:37,000
in order to save ourselves money and effort later.

27
00:01:37,000 --> 00:01:42,000
Going along with this, testing methods should be evaluated about the cost per defect found.

28
00:01:42,000 --> 00:01:46,000
Fourth, testing can be made much easier by designing software to be testable.

29
00:01:46,000 --> 00:01:51,000
We have a quite a bit more to say about that later. Fifth, quality cannot be tested into software.

30
00:01:51,000 --> 00:01:55,000
And the corollary of that is--it is surprisingly easy to create software

31
00:01:55,000 --> 00:01:57,000
but it's impossible to test effectively at all.

32
00:01:57,000 --> 00:02:03,000
Finally, this is an important one, testing your own software is really hard and there are several reasons

33
00:02:03,000 --> 00:02:08,000
for this--first of all, it's pretty common for us as developers to be proud of our work.

34
00:02:08,000 --> 00:02:12,000
What that means is we may not really want our own software to fail.

35
00:02:12,000 --> 00:02:17,000
This isn't sort of blaming developers--it's rather just a fundamental fact of human nature.

36
00:02:17,000 --> 00:02:20,000
We're trying to shape software, we're trying to make good software, and we may fundamentally

37
00:02:20,000 --> 00:02:24,000
at some sort of subconscious level not really want to break it that badly.

38
00:02:24,000 --> 00:02:28,000
The second reason that testing our own software is hard is that as an individual developer,

39
00:02:28,000 --> 00:02:31,000
we tend to get our heads buried in the details.

40
00:02:31,000 --> 00:02:34,000
And we may not know the global context that would allows us to do really effective testing

41
00:02:34,000 --> 00:02:36,000
of the software that we just wrote.

42
00:02:36,000 --> 00:02:39,000
The third reason is we can't test the code that we left out

43
00:02:39,000 --> 00:02:42,000
because we didn't understand that it needed to be written.

44
00:02:42,000 --> 00:02:47,000
Finally, we can't write effective test cases for parts of the spec that we didn't understand correctly.

45
00:02:47,000 --> 00:02:51,000
So it's not uncommon of all for us to misunderstand things while reading this verification.

46
00:02:51,000 --> 00:02:54,000
For example, to keep aside or get something, otherwise, backwards

47
00:02:54,000 --> 00:02:59,000
and once we've done something like that, what we really have is a bug in our thinking.

48
00:02:59,000 --> 00:03:04,000
And it's mirrored by the bug in the software, but those kind of bugs are extremely hard for us to find.

49
00:03:04,000 --> 99:59:59,999
They rarely often takes somebody else testing it to find that kind of bug.
