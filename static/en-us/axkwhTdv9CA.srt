1
00:00:00,360 --> 00:00:04,520
Numpy also comes with bunch of
handy functions to generate arrays

2
00:00:04,520 --> 00:00:06,160
filled with random values.

3
00:00:06,160 --> 00:00:10,040
These functions are defined
in numpy's random module.

4
00:00:10,040 --> 00:00:13,810
The random function
generates uniformly sampled

5
00:00:13,810 --> 00:00:19,380
floating point values between 0 and
1, with 0 inclusive and 1 exclusive.

6
00:00:19,380 --> 00:00:20,240
More formally,

7
00:00:20,240 --> 00:00:25,805
we can say that it generates values in
the half open interval 0.0 and 1.0.

8
00:00:25,805 --> 00:00:28,370
Let's go ahead and print this.

9
00:00:28,370 --> 00:00:33,240
Here is the generated array with
five rows and four columns.

10
00:00:33,240 --> 00:00:36,480
Note that we pass the array
shape as a tupple.

11
00:00:36,480 --> 00:00:40,410
A slightly radiant of this function
is rand which randomly accepts

12
00:00:40,410 --> 00:00:43,960
a sequence of numbers as arguments and
straight of the tuple.

13
00:00:43,960 --> 00:00:45,990
It is otherwise equal valid.

14
00:00:45,990 --> 00:00:49,170
Observe that, we directly pass
the values of the rows and

15
00:00:49,170 --> 00:00:52,950
columns through the function and
did not define a tuple.

16
00:00:52,950 --> 00:00:57,530
Here it is the area with same shape
as before five rows and four columns.

17
00:00:57,530 --> 00:01:01,820
Numpy provides this to achieve
a greater compatibility

18
00:01:01,820 --> 00:01:04,830
with the more established
math lab syntax.

19
00:01:04,830 --> 00:01:08,300
We highly recommend using a more
consistent num pi function

20
00:01:08,300 --> 00:01:10,899
that explicitly accepts a shape tuple.

21
00:01:10,899 --> 00:01:15,140
Now both the function, rand and
random, sample, uniformly,

22
00:01:15,140 --> 00:01:16,790
from the rain 0 and 1.

23
00:01:16,790 --> 00:01:19,538
What if you wanted a sample
from a different distribution?

24
00:01:19,538 --> 00:01:25,010
To sample, or normal distribution,
we can use the normal function.

25
00:01:25,010 --> 00:01:28,820
Recall the normal function
from numpy dot random and

26
00:01:28,820 --> 00:01:31,670
pass the shape of the array required.

27
00:01:31,670 --> 00:01:33,290
Let's run this.

28
00:01:33,290 --> 00:01:35,850
The core produced a 2 into 3 array

29
00:01:35,850 --> 00:01:39,550
of random numbers with
a standard normal distribution.

30
00:01:39,550 --> 00:01:43,260
That is 0 mean, and
unit standard deviation.

31
00:01:43,260 --> 00:01:46,570
You can change the mean and
the standard deviation as well.

32
00:01:46,570 --> 00:01:48,530
Let's see how to do that.

33
00:01:48,530 --> 00:01:52,090
We change the mean to 50 and
standard deviation to 10.

34
00:01:52,090 --> 00:01:54,330
Now, let's see the output.

35
00:01:54,330 --> 00:01:56,960
Notice that the values
are centered around 50.

36
00:01:56,960 --> 00:01:59,540
To generate integers,

37
00:01:59,540 --> 00:02:04,230
we can use the randint function
in one of the several ways.

38
00:02:04,230 --> 00:02:09,419
Passing to values 0 and
10 will not divide randint to generate

39
00:02:09,419 --> 00:02:12,650
a single integer between the range 0 and
10.

40
00:02:12,650 --> 00:02:18,280
We can also specify randint how many
integers we want between between 0 and

41
00:02:18,280 --> 00:02:22,320
10 by specifying the size attribute and
giving it a value.

42
00:02:22,320 --> 00:02:25,510
So, this statement
will give us a 1d array

43
00:02:25,510 --> 00:02:28,610
of 5 integers between the range 0 and
10.

44
00:02:28,610 --> 00:02:33,330
Going forward with that, we can pass
a tuple value to the attribute size,

45
00:02:33,330 --> 00:02:38,130
which will create a 2d array with all
the values between the range 0 and 10.

46
00:02:38,130 --> 00:02:40,140
Now, let's see the output.

47
00:02:40,140 --> 00:02:43,790
These are the single random integers
between the range 0 and 10.

48
00:02:43,790 --> 00:02:47,990
Next, we created a 1d
array with five values.

49
00:02:47,990 --> 00:02:50,830
Note that,
we mentioned the number of values needed

50
00:02:50,830 --> 00:02:53,808
in the one dimensional array
with the parameter size.

51
00:02:53,808 --> 00:02:58,630
Passing a tuple to the size
parameter gave us the 2d values.

52
00:02:58,630 --> 00:03:04,690
And also note that all the values
of the array are between 0 and 10.

53
00:03:04,690 --> 00:03:08,840
Check out the random sampling
routines on the numpy website for

54
00:03:08,840 --> 00:03:11,700
more distribution and usage radiations.

55
00:03:11,700 --> 00:03:13,770
Find the link in the instructor's notes.
