1
00:00:00,000 --> 00:00:03,000
[Rob Pike, Google Engineer:] There is a standard problem, especially when you're learning to program.

2
00:00:03,000 --> 00:00:06,000
You have a piece of code on the page, and it doesn't work.

3
00:00:06,000 --> 00:00:09,000
You read it and you study it and you don't see what's wrong.

4
00:00:09,000 --> 00:00:14,000
Then it often helps in practice to just explain the code to somebody else.

5
00:00:14,000 --> 00:00:18,000
Sometimes just hearing yourself say it out loud you'll go, oh, I know what I did wrong--

6
00:00:18,000 --> 00:00:21,000
just explaining what's not working or why.

7
00:00:21,000 --> 00:00:24,000
It's such a common technique that there's a--I think it was a computer center

8
00:00:24,000 --> 00:00:28,000
at one of the universities--they had a teddy bear on the desk at the help desk.

9
00:00:28,000 --> 00:00:32,000
Before you were allowed to talk to an actual person,

10
00:00:32,000 --> 00:00:34,000
you had to explain your problem to the teddy bear,

11
00:00:34,000 --> 00:00:37,000
because chances were just saying it out loud to the teddy bear would show you

12
00:00:37,000 --> 00:00:39,000
what was wrong with your program.

13
00:00:39,000 --> 00:00:42,000
[Niniane Wang, CTO, Minted:] The more you like something, the more you'll naturally want to do it.

14
00:00:42,000 --> 00:00:45,000
I would say do not force yourself to do something, because other people are doing it.

15
00:00:45,000 --> 00:00:49,000
If everyone or if a bunch of people are talking about mobile programming

16
00:00:49,000 --> 00:00:52,000
or functional programming or functional programming languages

17
00:00:52,000 --> 00:00:56,000
or Lisp or front-end programming,

18
00:00:56,000 --> 00:01:01,000
if you try it and you don't like it, you should not try to force yourself to do that.

19
00:01:01,000 --> 00:01:04,000
[Sally Goldman, Professor, Washington Univ:] In the end, good code is code that other people can come

20
00:01:04,000 --> 00:01:06,000
and change and adapt.

21
00:01:06,000 --> 00:01:08,000
[Learning to Program]

22
00:01:08,000 --> 00:01:10,000
[Guido van Rossum, Author Python language:] I wasn't quite that ambitious.

23
00:01:10,000 --> 00:01:13,000
I initially just thought that I need another programming language.

24
00:01:13,000 --> 00:01:16,000
I definitely meant it to be a general purpose language.

25
00:01:16,000 --> 00:01:22,000
ABC actually sort of had multiple philosophies.

26
00:01:22,000 --> 00:01:25,000
It wanted to be easy to teach and easy to learn,

27
00:01:25,000 --> 00:01:30,000
but it also wanted to be a language that was useful for just

28
00:01:30,000 --> 00:01:34,000
slightly non-professional computer users.

29
00:01:34,000 --> 00:01:41,000
I just liked a lot of thing is the ABC language as a professional programmer.

30
00:01:41,000 --> 00:01:46,000
I started copying those ideas and sort of changing them, mutating the ideas

31
00:01:46,000 --> 00:01:50,000
and the details of the language of the implementation.

32
00:01:50,000 --> 00:01:55,000
[Alex Martelli, Tech Lead, Google:] Back when I joined it was the 1.52 version,

33
00:01:55,000 --> 00:02:00,000
so it had been already growing pretty pragmatically for a while.

34
00:02:00,000 --> 00:02:09,000
It was still in a phase of a tumult of new ideas and a general attitude in this small group

35
00:02:09,000 --> 00:02:14,000
of core committers of, hey, one more feature--how could it hurt?

36
00:02:14,000 --> 00:02:22,000
At some point, essentially moving towards the 2.0 release, a sobering sense

37
00:02:22,000 --> 00:02:29,000
that Python wasn't a toy language used by people for their own fun anymore.

38
00:02:29,000 --> 00:02:38,000
It was starting to become the material to build in very complex, important software system.

39
00:02:38,000 --> 00:02:45,000
In the process of designing Python 3, we did actually--as the core Python developer group--

40
00:02:45,000 --> 00:02:52,000
we did a lot of soul-searching and thinking about which parts of the language

41
00:02:52,000 --> 00:02:55,000
and which parts of the library can we improve.

42
00:02:55,000 --> 00:03:03,000
Using def to introduce a function--what does this mean? Define? Define what?

43
00:03:03,000 --> 00:03:08,000
Unfortunately, I have to admit that JavaScript has it right here.

44
00:03:08,000 --> 00:03:13,000
The proper keyword to introduce a function is "function."

45
00:03:13,000 --> 00:03:18,000
Why use--to save four letters? That's not the Python spirit.
