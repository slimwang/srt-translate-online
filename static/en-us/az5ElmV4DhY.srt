1
00:00:00,000 --> 00:00:04,700
Hey there! My name is Cezanne Camacho. And I'm an instructor here at Udacity.

2
00:00:04,700 --> 00:00:06,700
I've been working our self driving car course which focuses

3
00:00:06,700 --> 00:00:08,700
on how a car sees a world through

4
00:00:08,700 --> 00:00:10,700
cameras and sensors.

5
00:00:10,700 --> 00:00:12,700
and then makes driving decisions

6
00:00:12,700 --> 00:00:14,700
based on what it sees.

7
00:00:14,700 --> 00:00:16,700
And deep learning is one of the most

8
00:00:16,700 --> 00:00:18,700
exciting tools that self driving cars use

9
00:00:18,700 --> 00:00:20,700
to navigate the world. Using deep learning

10
00:00:20,700 --> 00:00:22,700
you can teach a car to drive

11
00:00:22,700 --> 00:00:24,700
based on observations about the environment it's in

12
00:00:24,700 --> 00:00:26,700
 

13
00:00:26,700 --> 00:00:28,700
like whether the car is surrounded by people or other cars

14
00:00:28,700 --> 00:00:30,700
Or if the car is moving quickly down the highway

15
00:00:30,700 --> 00:00:32,700
 

16
00:00:32,700 --> 00:00:34,700
The car should respond correctly in all kinds of situations

17
00:00:34,700 --> 00:00:36,700
 

18
00:00:36,700 --> 00:00:38,700
One problem that deep learning can help solve

19
00:00:38,700 --> 00:00:40,700
is navigating efficiently through traffic

20
00:00:40,700 --> 00:00:42,700
 

21
00:00:42,700 --> 00:00:44,700
A problem that's near to my heart living in California.

22
00:00:44,700 --> 00:00:46,700
People spend hours stuck in traffic every day.

23
00:00:46,700 --> 00:00:48,700
So let's see how deep learning can help

24
00:00:48,700 --> 00:00:50,700
To get you started, we'll be looking at a project developed by MIT

25
00:00:50,700 --> 00:00:52,700
 

26
00:00:52,700 --> 00:00:54,700
called Deep Traffic.

27
00:00:54,700 --> 00:00:56,700
Deep traffic is a simulation of highway traffic

28
00:00:56,700 --> 00:00:58,700
 

29
00:00:58,700 --> 00:01:00,700
where the car in red is controlled by a neural network

30
00:01:00,700 --> 00:01:02,700
that you can train.

31
00:01:02,700 --> 00:01:04,700
And a neural network is just

32
00:01:04,700 --> 00:01:06,700
a computer program that's loosely modeled

33
00:01:06,700 --> 00:01:08,700
how our brain processes information

34
00:01:08,700 --> 00:01:10,700
and learns from it. And these networks

35
00:01:10,700 --> 00:01:12,700
acquaint themselves with the world like

36
00:01:12,700 --> 00:01:14,700
humans do, learning by trial and error.

37
00:01:14,700 --> 00:01:16,700
Let's see how this example works.

38
00:01:16,700 --> 00:01:18,700
The car starts out not knowing much about its environment.

39
00:01:18,700 --> 00:01:20,700
 

40
00:01:20,700 --> 00:01:22,700
The only thing that's already programmed

41
00:01:22,700 --> 00:01:24,700
is safety. This car won't ever crash into other ones.

42
00:01:24,700 --> 00:01:26,700
The rest of its behavior is determined

43
00:01:26,700 --> 00:01:28,700
by a neural network.

44
00:01:28,700 --> 00:01:30,700
This neural network takes in input data

45
00:01:30,700 --> 00:01:32,700
 

46
00:01:32,700 --> 00:01:34,700
processes and learns from this input

47
00:01:34,700 --> 00:01:36,700
from hidden, or unseen layers,

48
00:01:36,700 --> 00:01:38,700
and outputs an action. The input

49
00:01:38,700 --> 00:01:40,700
is data about the car's surroundings

50
00:01:40,700 --> 00:01:42,700
like where it is in relation to other lanes

51
00:01:42,700 --> 00:01:44,700
cars and empty space.

52
00:01:44,700 --> 00:01:46,700
I'll call this data

53
00:01:46,700 --> 00:01:48,700
the car's state.

54
00:01:48,700 --> 00:01:50,700
And the action the car takes

55
00:01:50,700 --> 00:01:52,700
will be to move left or right

56
00:01:52,700 --> 00:01:54,700
or stay in the same place.

57
00:01:54,700 --> 00:01:56,700
and to speed up or slow down.

58
00:01:56,700 --> 00:01:58,700
New states and actions happen over

59
00:01:58,700 --> 00:02:00,700
and over again as time progresses

60
00:02:00,700 --> 00:02:02,700
and at each time step, the network

61
00:02:02,700 --> 00:02:04,700
learns more about which states and actions

62
00:02:04,700 --> 00:02:06,700
results in the fastest navigation

63
00:02:06,700 --> 00:02:08,699
through trafffic. This is a type

64
00:02:08,699 --> 00:02:10,699
of deep learning called

65
00:02:10,699 --> 00:02:12,700
reinfocement learning. The car

66
00:02:12,700 --> 00:02:14,700
starts out without any knowledge

67
00:02:14,700 --> 00:02:16,700
but learns how to act by favoring or

68
00:02:16,700 --> 00:02:18,700
rewarding actions and states

69
00:02:18,700 --> 00:02:20,700
that result in faster navigation.

70
00:02:20,700 --> 00:02:22,700
This reinforces the best behavior

71
00:02:22,700 --> 00:02:24,700
So, given only well-defined input

72
00:02:24,700 --> 00:02:26,700
and a goal,

73
00:02:26,700 --> 00:02:28,700
to drive the fastest, the car can

74
00:02:28,700 --> 00:02:30,700
learn for itself how to navigate traffic.

75
00:02:30,700 --> 00:02:32,700
 

76
00:02:32,700 --> 00:02:34,700
It'll be your job to tune the input to the neural network.

77
00:02:34,700 --> 00:02:36,700
In code, this is controlled by the variable

78
00:02:36,700 --> 00:02:42,000
"lanesSide," "patchesAhead," and "patchesBehind."

79
00:02:42,000 --> 00:02:44,000
This whole simulation is laid out in a grid

80
00:02:44,000 --> 00:02:46,000
defined by lanes and patches.

81
00:02:46,000 --> 00:02:48,000
Each car is about

82
00:02:48,000 --> 00:02:50,000
three or four patches in length

83
00:02:50,000 --> 00:02:52,000
and you can see what the input grid looks like

84
00:02:52,000 --> 00:02:54,000
by clicking Road Overlay and Learning Input.

85
00:02:54,000 --> 00:02:56,000
 

86
00:02:56,000 --> 00:02:58,000
Right now, the learning input is just one patch

87
00:02:58,000 --> 00:03:00,000
which doesn't provide much information.

88
00:03:00,000 --> 00:03:02,000
But if I change patchesAhead

89
00:03:02,000 --> 00:03:04,000
to be 6, and lanesSide to be 1,

90
00:03:04,000 --> 00:03:06,000
and I click "Apply Code,"

91
00:03:06,000 --> 00:03:08,000
I can see

92
00:03:08,000 --> 00:03:10,000
a larger learning input area.

93
00:03:10,000 --> 00:03:12,000
I'll see 6 patches ahead of the red car

94
00:03:12,000 --> 00:03:14,000
and one lane to the left and

95
00:03:14,000 --> 00:03:16,000
and one lane to the right of it. This gives

96
00:03:16,000 --> 00:03:18,000
a little more information, but you'll probably

97
00:03:18,000 --> 00:03:20,000
want to expand this even more. This

98
00:03:20,000 --> 00:03:22,000
area defines the input that the neural network will learn from.

99
00:03:22,000 --> 00:03:24,000
Other variables you should change

100
00:03:24,000 --> 00:03:26,000
include the number

101
00:03:26,000 --> 00:03:28,000
of hidden layers. And the number

102
00:03:28,000 --> 00:03:30,000
of neurons in the neural network.

103
00:03:30,000 --> 00:03:32,000
Here, there's a single layer defined for you

104
00:03:32,000 --> 00:03:34,000
in the starting code

105
00:03:34,000 --> 00:03:36,000
with just one neuron.

106
00:03:36,000 --> 00:03:38,000
I'd suggest increasing the number of neurons

107
00:03:38,000 --> 00:03:40,000
and copy and pasting this code

108
00:03:40,000 --> 00:03:42,000
to add more layers. This will

109
00:03:42,000 --> 00:03:46,000
improve the network's ability to learn from the incoming data. You'll learn more about

110
00:03:46,000 --> 00:03:48,000
these hidden layers and neurons later on.

111
00:03:48,000 --> 00:03:50,000
For now, just know that one layer

112
00:03:50,000 --> 00:03:52,000
can recognize a basic pattern in the data,

113
00:03:52,000 --> 00:03:54,000
like all the places where an empty grid cell

114
00:03:54,000 --> 00:03:56,000
is next to an occupied grid cell.

115
00:03:56,000 --> 00:03:58,000
Then each successive layer

116
00:03:58,000 --> 00:04:00,000
in the network looks for

117
00:04:00,000 --> 00:04:02,000
a pattern in the previous layer.

118
00:04:02,000 --> 00:04:04,000
Eventually these hidden layers produce

119
00:04:04,000 --> 00:04:06,000
the outputs we're looking for that

120
00:04:06,000 --> 00:04:08,000
determine the action that the car should take.

121
00:04:08,000 --> 00:04:10,000
I know this all seems mysterious for now, but these

122
00:04:10,000 --> 00:04:12,000
layers are just the way that neural networks

123
00:04:12,000 --> 00:04:14,000
find patterns in data

124
00:04:14,000 --> 00:04:16,000
and learn from those patterns.

125
00:04:16,000 --> 00:04:18,000
This example is mainly meant

126
00:04:18,000 --> 00:04:20,000
to give you some intuition for how

127
00:04:20,000 --> 00:04:22,000
deep learning works and how quickly

128
00:04:22,000 --> 00:04:24,000
a network can be changed

129
00:04:24,000 --> 00:04:26,000
to solve a real-world problem like traffic navigation.

130
00:04:26,000 --> 00:04:28,000
So, I urge you to play around

131
00:04:28,000 --> 00:04:30,000
with the inputs to the neural network

132
00:04:30,000 --> 00:04:32,000
then when you're done,

133
00:04:32,000 --> 00:04:34,000
click Apply Code, then Run Training.

134
00:04:34,000 --> 00:04:36,000
You should see the behavior of the car

135
00:04:36,000 --> 00:04:38,000
change pretty quickly. Then,

136
00:04:38,000 --> 00:04:40,000
to evaluate how well you're done,

137
00:04:40,000 --> 00:04:42,000
click "Start Evaluation Run,"

138
00:04:42,000 --> 00:04:44,000
or just take a look at how fast your

139
00:04:44,000 --> 00:04:46,000
car is moving and how many cars

140
00:04:46,000 --> 00:04:48,000
it passes. Try to get it to

141
00:04:48,000 --> 00:04:50,000
go faster than 65mph. Good luck!

