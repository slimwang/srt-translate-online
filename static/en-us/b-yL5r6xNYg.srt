1
00:00:00,000 --> 00:00:03,000
What we've been doing in this unit is looking at a progression of random testers,

2
00:00:03,000 --> 00:00:05,000
from the simpler ones to the more complicated ones.

3
00:00:05,000 --> 00:00:08,000
And as we've seen, one of the major things creating difficulties for us

4
00:00:08,000 --> 00:00:10,000
is that structure is required in inputs.

5
00:00:10,000 --> 00:00:12,000
What we're going to do now is look at the next level of structured inputs,

6
00:00:12,000 --> 00:00:15,000
and that level of structure is required for random testing of APIs.

7
00:00:15,000 --> 00:00:17,000
So if you remember from our pictures earlier in the course,

8
00:00:17,000 --> 00:00:20,000
we have some software under test, and it's providing an API

9
00:00:20,000 --> 00:00:23,000
or several APIs for other code to use.

10
00:00:23,000 --> 00:00:26,000
And this is the kind of APIs that we're going to focus on testing.

11
00:00:26,000 --> 00:00:29,000
What an API is is basically just a collection of function calls that can be invoked.

12
00:00:29,000 --> 00:00:31,000
And what we're going to find when we test APIs

13
00:00:31,000 --> 00:00:35,000
is that a single random test is not going to be something extremely simple

14
00:00:35,000 --> 00:00:39,000
like a credit card number or a couple of inputs to a single API call

15
00:00:39,000 --> 00:00:42,000
but rather, a single random test is going to constitute a string of API calls.

16
00:00:42,000 --> 00:00:44,000
There are a couple of things that make this situation

17
00:00:44,000 --> 00:00:46,000
more complicated than what we've seen so far.

18
00:00:46,000 --> 00:00:49,000
The first possibility is that there are dependencies among API calls.

19
00:00:49,000 --> 00:00:52,000
What this means is there might be certain orderings of API calls,

20
00:00:52,000 --> 00:00:56,000
perhaps even combined with dependencies on the arguments to those API calls,

21
00:00:56,000 --> 00:00:58,000
that are either illegal or undesirable,

22
00:00:58,000 --> 00:01:00,000
and we're going to need to teach our random tester to avoid those.

23
00:01:00,000 --> 00:01:04,000
So let's just for the moment take the example of randomly testing a file system.

24
00:01:04,000 --> 00:01:08,000
What file systems are are pieces of code that take the raw abstraction

25
00:01:08,000 --> 00:01:12,000
exported by a hard disk driver--so here's the disk itself.

26
00:01:12,000 --> 00:01:14,000
The disk is going to talk to a driver.

27
00:01:14,000 --> 00:01:16,000
The driver is a piece of code running in the operating system

28
00:01:16,000 --> 00:01:19,000
that understands the details of interacting with whatever kind of particular hard drive

29
00:01:19,000 --> 00:01:22,000
we're dealing with, and what it exports is the abstraction of a block array.

30
00:01:22,000 --> 00:01:25,000
A block array just means that from the point of view of the file system,

31
00:01:25,000 --> 00:01:28,000
what the hard disk looks like is an array of blocks

32
00:01:28,000 --> 00:01:31,000
where blocks are numbered 0, 1, 2 all the way up to some very large number

33
00:01:31,000 --> 00:01:33,000
for a modern hard drive.

34
00:01:33,000 --> 00:01:36,000
And so the purpose of the file system is to take this low level interface of a disk block array

35
00:01:36,000 --> 00:01:40,000
and build on top of it a hierarchical namespace--that is to say, a directory structure

36
00:01:40,000 --> 00:01:42,000
provided by file systems in UNIX or Windows--

37
00:01:42,000 --> 00:01:44,000
and then those directories, of course, contain files

38
00:01:44,000 --> 00:01:48,000
and files are just variable sized bags of bits that we can create and delete dynamically.

39
00:01:48,000 --> 00:01:52,000
And so the file system has to manage all of that structure just to manage the free space;

40
00:01:52,000 --> 00:01:57,000
it has to efficiently respond to all sorts of calls that perform file system operations.

41
00:01:57,000 --> 00:01:59,000
And so let's look at what the file system operations are.

42
00:01:59,000 --> 00:02:02,000
The question is, what are the contents of the file system API?

43
00:02:02,000 --> 00:02:04,000
We have things like mount and unmount,

44
00:02:04,000 --> 00:02:07,000
and these are the calls that invoke the file system code in the first place.

45
00:02:07,000 --> 00:02:09,000
So if a file system is not mounted, it's just sitting there on disk.

46
00:02:09,000 --> 00:02:11,000
It's not being used at all.

47
00:02:11,000 --> 00:02:14,000
Once it's mounted, its contents are available to the operating system.

48
00:02:14,000 --> 00:02:16,000
We have calls like make directory.

49
00:02:16,000 --> 00:02:19,000
Mkdir creates a directory, and remove directory deletes one.

50
00:02:19,000 --> 00:02:23,000
Open can be used to create or just open an existing file.

51
00:02:23,000 --> 00:02:26,000
Unlink deletes one. I'm talking about the UNIX style file system interface.

52
00:02:26,000 --> 00:02:28,000
And then there are a bunch more calls.

53
00:02:28,000 --> 00:02:30,000
So if we want to do random testing of a file system,

54
00:02:30,000 --> 00:02:32,000
we're going to be issuing sequences of calls in the file system API.

55
00:02:32,000 --> 00:02:34,000
Before we get into the details, let's just think about

56
00:02:34,000 --> 00:02:37,000
why we might want to do random testing of a file system.

57
00:02:37,000 --> 00:02:39,000
First of all, file systems are fairly long and complicated,

58
00:02:39,000 --> 00:02:43,000
and so I looked at the size of 5 of the file systems commonly used on Linux,

59
00:02:43,000 --> 00:02:46,000
and they're all between 15,000 and about 70,000 lines of code.

60
00:02:46,000 --> 00:02:48,000
File systems end up being substantially large chunks of code,

61
00:02:48,000 --> 00:02:51,000
and what's more, the integrity of our data

62
00:02:51,000 --> 00:02:53,000
depends on the correctness of that file system code.

63
00:02:53,000 --> 00:02:55,000
So for example, if we save some critical data to the disk

64
00:02:55,000 --> 00:02:59,000
and the file system messes it up--that is to say, it saves it in some wrong place

65
00:02:59,000 --> 00:03:02,000
or corrupts it in some other way--then we're not going to get that data back ever.

66
00:03:02,000 --> 00:03:05,000
And so it's really, really important the file systems work well.
