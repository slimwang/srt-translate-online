1
00:00:00,450 --> 00:00:03,880
It's worth pointing out that the Android
framework knows that overdraw is

2
00:00:03,880 --> 00:00:07,360
a problem, and will go out of its
way to avoid drawing UI widgets that

3
00:00:07,360 --> 00:00:09,490
may be invisible in the final image.

4
00:00:09,490 --> 00:00:10,620
This type of optimization,

5
00:00:10,620 --> 00:00:13,740
called clipping,
is highly important to UI performance.

6
00:00:13,740 --> 00:00:16,510
If you can determine an object
will be fully obscured,

7
00:00:16,510 --> 00:00:18,310
there's no reason to
go about drawing it.

8
00:00:18,310 --> 00:00:21,680
In fact this is actually one of the most
important performance optimizations that

9
00:00:21,680 --> 00:00:22,880
Android performs.

10
00:00:22,880 --> 00:00:26,840
But sadly this technique doesn't
extend itself to complex custom views,

11
00:00:26,840 --> 00:00:30,330
where you're overriding
the canvas dot on draw method.

12
00:00:30,330 --> 00:00:33,080
In these cases, the underlying
system doesn't have insight into

13
00:00:33,080 --> 00:00:36,400
how you're drawing your content,
which makes it really hard for

14
00:00:36,400 --> 00:00:39,489
it to remove hidden views
from your rendering pipeline.

15
00:00:39,489 --> 00:00:43,890
For example, in this stack of cards,only
the top card is fully visible and

16
00:00:43,890 --> 00:00:46,840
the rest of the cards are mostly hidden,
which means that drawing all

17
00:00:46,840 --> 00:00:50,280
of those overlapping pixels
is wasted processing time.

18
00:00:50,280 --> 00:00:52,870
To address this problem,
the canvas class is equipped with

19
00:00:52,870 --> 00:00:56,560
a few special methods that you can
use to tell the Android framework

20
00:00:56,560 --> 00:01:00,330
what parts of the canvas are hidden and
don't need to be drawn.

21
00:01:00,330 --> 00:01:04,440
The most useful method is canvas dot
clipRect, which allows you to define

22
00:01:04,440 --> 00:01:07,360
the drawable boundaries for
a given view, meaning that if

23
00:01:07,360 --> 00:01:11,470
any canvas drawing happens outside
these boundaries, it'll be ignored.

24
00:01:11,470 --> 00:01:14,530
This could be really helpful when
you've got this type of staggered view,

25
00:01:14,530 --> 00:01:16,180
like our cards for example.

26
00:01:16,180 --> 00:01:18,690
If you know how much of your
custom view is visible, or

27
00:01:18,690 --> 00:01:23,170
rather you know how much is obscured,
you can define the clipRect boundaries,

28
00:01:23,170 --> 00:01:27,800
which will prevent any drawing from
happening in the obscured areas.

29
00:01:27,800 --> 00:01:32,420
Now the clipRect API helps the system
know what to avoid drawing.

30
00:01:32,420 --> 00:01:35,890
But it would also be helpful for your
custom view to do some of this work on

31
00:01:35,890 --> 00:01:40,200
its own, ahead of time for example, it
would be really helpful if you knew what

32
00:01:40,200 --> 00:01:43,980
you were going to draw if it's actually
outside of the clipping rectangle.

33
00:01:43,980 --> 00:01:46,695
Fortunately, you don't have to figure
out all that intersection logic

34
00:01:46,695 --> 00:01:51,835
yourself, the canvas.quickReject method
tests whether a given area is completely

35
00:01:51,835 --> 00:01:56,265
outside the clipping rectangle, in which
case you can skip all that drawing work.

36
00:01:56,265 --> 00:01:59,295
Now let's take a look at a common
situation where this happens and

37
00:01:59,295 --> 00:02:00,375
take a swing at fixing it.
