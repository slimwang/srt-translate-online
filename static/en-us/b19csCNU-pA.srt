1
00:00:00,230 --> 00:00:03,550
Now that we have seen how instruction scheduling works, let's see

2
00:00:03,550 --> 00:00:07,330
how it interacts with things like if conversion. Recall that if

3
00:00:07,330 --> 00:00:10,820
conversion works like this. We had some code and then there

4
00:00:10,820 --> 00:00:13,060
is an if then else, which means there is a branch.

5
00:00:15,330 --> 00:00:17,310
Sometimes we do this, sometimes we do this, and then

6
00:00:17,310 --> 00:00:20,490
we go back to doing something after the if then

7
00:00:20,490 --> 00:00:24,050
else. Let's say this is the orange code and let's

8
00:00:24,050 --> 00:00:27,680
say that this is the green code. Before if conversion,

9
00:00:27,680 --> 00:00:31,540
we can easily reschedule code within here. We can also

10
00:00:31,540 --> 00:00:34,630
move things around within this, we can move things around

11
00:00:34,630 --> 00:00:38,100
within this, and we can move things around within this.

12
00:00:38,100 --> 00:00:40,700
But it's hard to mix the code from these together.

13
00:00:40,700 --> 00:00:42,720
For example, take an instruction from here to

14
00:00:42,720 --> 00:00:46,230
fill a store here. Because if we end up

15
00:00:46,230 --> 00:00:49,070
going this way that instruction doesn't get done, so

16
00:00:49,070 --> 00:00:52,160
it gets a lot more complicated. However after If

17
00:00:52,160 --> 00:00:54,820
conversion we do the stuff that was before the

18
00:00:54,820 --> 00:00:57,720
if then else. We then have the orange code

19
00:00:57,720 --> 00:01:02,090
predicated so that it only results in execution. And

20
00:01:02,090 --> 00:01:05,310
then we have the orange code predicated one way.

21
00:01:05,310 --> 00:01:07,990
Greens are code predicated the other way and then the

22
00:01:07,990 --> 00:01:10,870
stuff after the loop. And, now because this is branch

23
00:01:10,870 --> 00:01:14,170
free code and, because all of these instructions really execute

24
00:01:14,170 --> 00:01:18,170
every time, it's just that they are predicated sometimes. We can

25
00:01:18,170 --> 00:01:20,830
easily take instructions from here and put them here to

26
00:01:20,830 --> 00:01:24,890
avoid stalls. And that's nice. We can even take instructions

27
00:01:24,890 --> 00:01:27,420
from here and put them here or instructions from here

28
00:01:27,420 --> 00:01:30,390
and put them here, for that matter we can even take

29
00:01:30,390 --> 00:01:34,290
instructions from here and put them here. So overall, we get a lot more

30
00:01:34,290 --> 00:01:37,480
opportunities for filling stall cycles with something

31
00:01:37,480 --> 00:01:39,480
useful. So if conversion is one of

32
00:01:39,480 --> 00:01:42,300
those things that. It helps with branch

33
00:01:42,300 --> 00:01:45,050
prediction because you're going branches, and it

34
00:01:45,050 --> 00:01:47,880
also can tremendously help the compiler in

35
00:01:47,880 --> 00:01:49,970
making a better schedule for a processor.
