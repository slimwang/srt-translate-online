1
00:00:00,310 --> 00:00:03,418
You will immediately notice that there's a lot of

2
00:00:03,418 --> 00:00:08,006
similarity between the Tournament algorithm and the the sensor

3
00:00:08,006 --> 00:00:12,298
verse, interversing tree algorithm and also similarity to the

4
00:00:12,298 --> 00:00:15,409
[UNKNOWN] algorithm. So lets talk about the difference between

5
00:00:15,409 --> 00:00:17,940
the tree barrier and the tournament barrier first. So

6
00:00:17,940 --> 00:00:19,470
the, the, the main difference is that in the

7
00:00:19,470 --> 00:00:22,850
tournament barrier, the spin locations are statically determined, whereas

8
00:00:22,850 --> 00:00:25,730
in the tree barrier we saw that the spin locations

9
00:00:25,730 --> 00:00:28,770
are dynamically determined based on who arrives

10
00:00:28,770 --> 00:00:31,520
at a particular node in the barrier,

11
00:00:31,520 --> 00:00:36,930
in the tree in that algorithm. And what that means in the tournament barrier is

12
00:00:36,930 --> 00:00:39,560
that we can statically assign. The spin

13
00:00:39,560 --> 00:00:43,300
location for the processes at every round

14
00:00:43,300 --> 00:00:47,680
of the tournament. Another important difference between

15
00:00:47,680 --> 00:00:50,800
the tournament barrier and the the tree barrier,

16
00:00:50,800 --> 00:00:53,080
is that there is no need for a fetch

17
00:00:53,080 --> 00:00:56,290
and free operation. Because all that's happening at every

18
00:00:56,290 --> 00:00:58,640
level. At every round of the tournament, there is

19
00:00:58,640 --> 00:01:02,450
spinning happening. And what is spinning? Basically reading. And

20
00:01:02,450 --> 00:01:05,180
there is the signaling happening, what is this? This

21
00:01:05,180 --> 00:01:07,940
is just writing. So, so long as we have

22
00:01:07,940 --> 00:01:12,460
atomic read and write operations in the multi-processor, that's

23
00:01:12,460 --> 00:01:15,978
all we need in order to implement the tournament barrier.

24
00:01:15,978 --> 00:01:19,350
Whereas uh, if you recall in the tree barrier

25
00:01:19,350 --> 00:01:22,470
we need fetch and free operation in order to atomically

26
00:01:22,470 --> 00:01:25,410
decrement the count variable. So that doesn't exist in

27
00:01:25,410 --> 00:01:28,170
the tournament barrier. That's, that's another good use. Now what

28
00:01:28,170 --> 00:01:30,530
about the total amount of communication that is needed.

29
00:01:30,530 --> 00:01:34,630
Well, it's exactly similar because of the tree arrangement. As

30
00:01:34,630 --> 00:01:37,160
you go up the tree the amount of communication that

31
00:01:37,160 --> 00:01:41,520
happens is going to decrease. Because the tree is getting pruned

32
00:01:41,520 --> 00:01:43,870
as you go towards the root of the tree and

33
00:01:43,870 --> 00:01:47,010
so the amount of communication in the tournament barrier in

34
00:01:47,010 --> 00:01:49,250
terms of all the notation is exactly similar to the

35
00:01:49,250 --> 00:01:53,720
tree barrier it is older, login. That's the amount of communication

36
00:01:53,720 --> 00:01:57,050
that is needed. Now the other important thing that that

37
00:01:57,050 --> 00:02:00,670
I should mention is that at every round of the

38
00:02:00,670 --> 00:02:02,690
tournament you can see that there, there's quite a bit

39
00:02:02,690 --> 00:02:06,250
of communication happening. In the first round going up the tree,

40
00:02:06,250 --> 00:02:12,600
P1 is communicating with P0, P3 with P2 and so on. All of these red arrows. Are

41
00:02:12,600 --> 00:02:16,770
parallel communications that potentially take advantage of any

42
00:02:16,770 --> 00:02:20,670
inherent parallelism that exists in the interconnection network. So

43
00:02:20,670 --> 00:02:22,800
that's good news. That, that all of this

44
00:02:22,800 --> 00:02:26,020
communication can happen in parallel if the interconnection network

45
00:02:26,020 --> 00:02:29,450
allows that kind of parallelism. That can be exploited.

46
00:02:29,450 --> 00:02:31,410
And the, the other important point that I want

47
00:02:31,410 --> 00:02:34,830
you notice is that the tournament barrier works even

48
00:02:34,830 --> 00:02:38,590
if the processor is not a shared-memory machine. Because

49
00:02:38,590 --> 00:02:42,030
all that we're showing here is a message communication.

50
00:02:42,030 --> 00:02:44,600
So P1, P0 is waiting for a message from

51
00:02:44,600 --> 00:02:50,190
P1, and so on. So all of these arrows you can think of them as messages. And so

52
00:02:50,190 --> 00:02:54,740
even if the processor the multiprocessor is a cluster,

53
00:02:54,740 --> 00:02:56,690
well by a cluster what I mean is a

54
00:02:56,690 --> 00:02:59,220
set of processes in which the only way

55
00:02:59,220 --> 00:03:01,380
they can communicate with one another is through

56
00:03:01,380 --> 00:03:03,980
message passing. There is no shared memory, no

57
00:03:03,980 --> 00:03:07,525
physical shared memory. And even in that situation the,

58
00:03:07,525 --> 00:03:10,410
the tournament barrier will work perfectly fine to

59
00:03:10,410 --> 00:03:14,484
implement the barrier algorithm. Now let's make a comparison

60
00:03:14,484 --> 00:03:18,540
of tournament to to NCS. Now because this

61
00:03:18,540 --> 00:03:22,290
tournament is arranged as a tournament there are only

62
00:03:22,290 --> 00:03:26,940
two processes involved in this communication at any

63
00:03:26,940 --> 00:03:30,050
point of time in the parallel. So it means

64
00:03:30,050 --> 00:03:32,650
that it cannot exploit the spatial locality that

65
00:03:32,650 --> 00:03:34,830
may be there in the caches. If you recall,

66
00:03:34,830 --> 00:03:38,050
one of the virtues of the NCS algorithm

67
00:03:38,050 --> 00:03:41,710
is that it could exploit spatial locality. And that

68
00:03:41,710 --> 00:03:44,730
is, multiple spin variables could be located in

69
00:03:44,730 --> 00:03:47,590
the same cache line and, and the, the parent

70
00:03:47,590 --> 00:03:50,660
for instance could spin on a spin location

71
00:03:50,660 --> 00:03:53,730
to which multiple children are going to come and indicate

72
00:03:53,730 --> 00:03:56,244
that they are done. That's not possible in the,

73
00:03:56,244 --> 00:03:58,780
the tournament barrier because it is arranged as a

74
00:03:58,780 --> 00:04:03,510
tournament where there are two players playing against

75
00:04:03,510 --> 00:04:06,820
each other in every match. Similar to MCS, Tournament

76
00:04:06,820 --> 00:04:09,590
Barrier does not need a fetch and fee operation,

77
00:04:09,590 --> 00:04:12,080
so that's good. A common good property of both

78
00:04:12,080 --> 00:04:15,580
MCS and Tournament. The other important thing what tournament

79
00:04:15,580 --> 00:04:18,600
has an edge over MCS is the fact that tournament

80
00:04:18,600 --> 00:04:22,970
barrier works even if the processors are in a

81
00:04:22,970 --> 00:04:26,090
cluster. Meaning, it's not a shared memory machine and is

82
00:04:26,090 --> 00:04:29,320
only a cluster machine where only message passing is

83
00:04:29,320 --> 00:04:32,143
really good communicator to one another. Even in [INAUDIBLE] that

84
00:04:32,143 --> 00:04:35,470
situation, you can implement the tournament barrier. So that's, another

85
00:04:35,470 --> 00:04:37,140
good thing. Now is a good time for me to

86
00:04:37,140 --> 00:04:42,440
mention to you. I've been using the word cluster what that means is that the

87
00:04:42,440 --> 00:04:46,850
set of nodes in the multiprocessor they don't

88
00:04:46,850 --> 00:04:48,920
physically share memory and the only way they

89
00:04:48,920 --> 00:04:50,900
can communicate with one another is through

90
00:04:50,900 --> 00:04:53,930
message passing. And is important for you to

91
00:04:53,930 --> 00:04:58,730
know this particular terminology cluster because clusters become

92
00:04:58,730 --> 00:05:02,730
the work horses for data intensive computing today.

93
00:05:02,730 --> 00:05:06,130
The data centers and content distribution networks we're

94
00:05:06,130 --> 00:05:07,860
going to see a lot of that when we

95
00:05:07,860 --> 00:05:09,840
talk about giant skin services later on in

96
00:05:09,840 --> 00:05:14,660
this course, and those environments, they all use this

97
00:05:14,660 --> 00:05:17,670
kind of a, a, a computation cluster. And

98
00:05:17,670 --> 00:05:21,260
these computation clusters employ on the order of thousands

99
00:05:21,260 --> 00:05:25,050
or 10000 nodes connected together through an interconnected

100
00:05:25,050 --> 00:05:28,390
network and they can operate as a parallel machine

101
00:05:28,390 --> 00:05:32,610
with only message passing as the vehicle for communication among the processes.
