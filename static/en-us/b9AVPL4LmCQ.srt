1
00:00:00,110 --> 00:00:02,890
Here we are back in our
ViewController.swift file

2
00:00:02,890 --> 00:00:04,858
where we need to create two properties.

3
00:00:04,858 --> 00:00:09,170
We'll declare the count and label
properties here at the class level,

4
00:00:09,170 --> 00:00:13,780
setting count to 0 but
leaving the label undeclared for now.

5
00:00:13,780 --> 00:00:14,540
Hm.

6
00:00:14,540 --> 00:00:16,660
Looks like the compiler's complaining.

7
00:00:16,660 --> 00:00:18,220
Let's see what it has to say.

8
00:00:18,220 --> 00:00:21,120
Class ViewController
has no initializers.

9
00:00:21,120 --> 00:00:24,300
So something's going on with the
initialization of these variables that

10
00:00:24,300 --> 00:00:25,660
we just added.

11
00:00:25,660 --> 00:00:28,990
Right now, this label property
has a non-optional type.

12
00:00:28,990 --> 00:00:31,700
Let's see what happens when
we make it an optional.

13
00:00:31,700 --> 00:00:35,160
Okay, that seems to please the compiler.

14
00:00:35,160 --> 00:00:37,070
So what did I just do?

15
00:00:37,070 --> 00:00:42,220
This exclamation point here indicates
an implicitly unwrapped optional.

16
00:00:42,220 --> 00:00:43,670
We'll hear more about optionals and

17
00:00:43,670 --> 00:00:46,980
conditionals in the upcoming
Swift session with Jason, but

18
00:00:46,980 --> 00:00:51,570
the gist of it is that optional
properties can be nil and still compile.

19
00:00:51,570 --> 00:00:54,750
In this case, our label
property is nil at compile time

20
00:00:54,750 --> 00:00:57,200
because it hasn't been initialized yet.

21
00:00:57,200 --> 00:00:59,900
You can see that the code also
compiles if we go ahead and

22
00:00:59,900 --> 00:01:02,496
initialize the label
property when it's defined.

23
00:01:02,496 --> 00:01:04,959
But we'll leave it as an optional for
now.

24
00:01:04,959 --> 00:01:05,730
Okay.

25
00:01:05,730 --> 00:01:08,325
We have our label property,
but we still need to set it.

26
00:01:08,325 --> 00:01:09,795
With this line of code,

27
00:01:09,795 --> 00:01:14,795
we're taking the object reference stored
in a local variable in ViewDidLoad and

28
00:01:14,795 --> 00:01:18,970
giving that value a more
permanent home in our property.

29
00:01:18,970 --> 00:01:22,490
It is this connection that will enable
our ViewController to set the label's

30
00:01:22,490 --> 00:01:24,560
text when the button is clicked.

31
00:01:24,560 --> 00:01:28,020
Now let's write the method that will
be called when the button is clicked.

32
00:01:28,020 --> 00:01:31,380
Inside this method, we'll use
the two properties we just created

33
00:01:31,380 --> 00:01:34,820
to increment the count and
then set the label's text.

34
00:01:34,820 --> 00:01:37,860
Notice that we use this
self.label property

35
00:01:37,860 --> 00:01:41,740
to reach out of the ViewController
object and modify the label.

36
00:01:41,740 --> 00:01:43,720
It gives us an outlet to the label.

37
00:01:43,720 --> 00:01:48,000
This is the reason properties
are called IBOutlets in storyboard.

38
00:01:48,000 --> 00:01:51,050
Okay, now we're really close to
having a working click counter.

39
00:01:51,050 --> 00:01:54,817
All that's left to do is get the button
to invoke this incrementCount method.
