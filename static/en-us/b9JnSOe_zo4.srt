1
00:00:00,330 --> 00:00:03,520
Jake, did you manage to get the HTML
working from a custom response?

2
00:00:03,520 --> 00:00:04,820
>> I certainly did.

3
00:00:04,820 --> 00:00:06,210
And here's how i did it.

4
00:00:06,210 --> 00:00:07,410
Over in the service worker.

5
00:00:07,410 --> 00:00:10,970
I'm going to add the a-winner-is-me
class to this bold element.

6
00:00:10,970 --> 00:00:14,240
But the important bit is setting
the content type header.

7
00:00:14,240 --> 00:00:16,239
To text HTML.

8
00:00:16,239 --> 00:00:21,320
Now in the browser with force update
enabled I'll refresh the page and

9
00:00:21,320 --> 00:00:22,590
it's being passed as HTML.

10
00:00:23,600 --> 00:00:25,380
We can also see that
in the network panel.

11
00:00:27,010 --> 00:00:30,390
It's important to note that at this
point we've created something that works

12
00:00:30,390 --> 00:00:32,340
entirely offline first.

13
00:00:32,340 --> 00:00:35,140
I'm going to disable
the force update settings so

14
00:00:35,140 --> 00:00:37,900
we get the whole,
real user experience here.

15
00:00:37,900 --> 00:00:42,550
Now if I bring the server down and
refresh the page, it still works.

16
00:00:43,620 --> 00:00:47,290
Even if I switch to Lie-fi and
refresh the page.

17
00:00:47,290 --> 00:00:48,870
It still works.

18
00:00:48,870 --> 00:00:49,940
Instantly.

19
00:00:49,940 --> 00:00:52,720
The network is completely untouched
when it comes to serving this content.

20
00:00:53,750 --> 00:00:59,190
Of course, although it's offline
first it's a bit rubbish and useless.

21
00:00:59,190 --> 00:01:02,540
Especially since we're responding
to every request in the same way.

22
00:01:02,540 --> 00:01:05,580
In the next chapters we're going to
look at hijacking particular requests in

23
00:01:05,580 --> 00:01:09,130
particular ways depending on information
in the request and the response.
