1
00:00:00,260 --> 00:00:01,040
>> All right, let's figure it out.

2
00:00:02,070 --> 00:00:04,080
>> well, so, first off, I think the first thing,

3
00:00:04,080 --> 00:00:07,120
if I'm right is. So, is the following statement true?

4
00:00:07,120 --> 00:00:08,970
Once we know four of them are right, we will

5
00:00:08,970 --> 00:00:11,130
stumble onto the right answer when we do the neighborhood.

6
00:00:11,130 --> 00:00:12,750
>> Well, so, okay. So, that's a good

7
00:00:12,750 --> 00:00:16,219
idea. We could, actually, do one more step.

8
00:00:16,219 --> 00:00:16,681
>> Mm-hm.

9
00:00:16,681 --> 00:00:19,380
>> And see what happens. So yeah, because,

10
00:00:19,380 --> 00:00:21,120
in this particular case, that because of the

11
00:00:21,120 --> 00:00:23,310
fitness function is the way that it is,

12
00:00:23,310 --> 00:00:25,780
the number of correct bits. There's always a neighbor

13
00:00:25,780 --> 00:00:27,600
that is one step closer to the target.

14
00:00:27,600 --> 00:00:27,690
>> Right.

15
00:00:27,690 --> 00:00:29,720
>> So we're always going to be incrementing as we go.

16
00:00:29,720 --> 00:00:30,430
>> Mm-hm.

17
00:00:30,430 --> 00:00:32,759
>> So this is a very friendly fitness function.

18
00:00:32,759 --> 00:00:33,110
>> Mm-hm.

19
00:00:33,110 --> 00:00:34,820
>> It's only, only a global optimum.

20
00:00:34,820 --> 00:00:38,190
>> Right. So, do you want to do that? And then maybe we

21
00:00:38,190 --> 00:00:40,830
could talk about how we could have been even more clever? So, let's

22
00:00:40,830 --> 00:00:44,233
just pick the first one. Okay. And so, now we have to do

23
00:00:44,233 --> 00:00:48,591
the fourth one, so it's 10110, and then the fifth one is 10101.

24
00:00:48,591 --> 00:00:50,980
>> Okay. All right, so this if is x and these

25
00:00:50,980 --> 00:00:54,322
are the neighbors of x, these are the scores. And it turns out that

26
00:00:54,322 --> 00:00:57,313
one of them actually has all five matches. So that was in fact the

27
00:00:57,313 --> 00:01:05,418
pattern I was thinking of. Here, just to prove it 10110. And if we now continue

28
00:01:05,418 --> 00:01:09,880
the search from here, all the neighbors are going to be worse, obviously.

29
00:01:09,880 --> 00:01:11,350
>> Right.

30
00:01:11,350 --> 00:01:12,520
>> So, how could we have figured out the

31
00:01:12,520 --> 00:01:14,950
sequence without that extra information that I just gave you?

32
00:01:14,950 --> 00:01:16,084
>> Well, if we look

33
00:01:16,084 --> 00:01:21,754
at the two that have four, we can basically just see that where the, the, they

34
00:01:21,754 --> 00:01:24,630
must have three in common. Which they do.

35
00:01:25,996 --> 00:01:28,150
one, the first, the second, and the last one.

36
00:01:28,150 --> 00:01:28,750
>> Okay.

37
00:01:28,750 --> 00:01:33,250
>> And each is off by exactly one. So, that means

38
00:01:33,250 --> 00:01:35,972
that, well, since I know the answer, I know that you just

39
00:01:35,972 --> 00:01:38,290
take one, you just take one from each. So either they

40
00:01:38,290 --> 00:01:40,100
have to both be ones or they both have to be zeros.

41
00:01:40,100 --> 00:01:41,086
>> All right, and so do

42
00:01:41,086 --> 00:01:45,562
we know that the 01 doesn't work? We probably know that the 01 doesn't work.

43
00:01:45,562 --> 00:01:51,447
>> because that, then the answer would be 10000, 10000.

44
00:01:51,447 --> 00:01:51,871
>> Which we already have.

45
00:01:51,871 --> 00:01:53,487
>> Which is exactly, we already know is a three.

46
00:01:53,487 --> 00:01:57,750
>> Right. So then it has to be 10110, which in fact it is.

47
00:01:57,750 --> 00:01:58,330
>> Which it was.

48
00:02:02,680 --> 00:02:02,870
Cool

49
00:02:02,870 --> 00:02:06,000
>> Right, so this was in fact a very nice fitness function.

50
00:02:07,050 --> 00:02:09,669
and, and, and, you know, it seems to me that we had

51
00:02:09,669 --> 00:02:13,520
a, a, nice little advantage here in that we really understood the

52
00:02:13,520 --> 00:02:17,600
structure of our space. But if this were a 5000 bit sequence, where

53
00:02:17,600 --> 00:02:21,084
the fitness function was some weird thing. Where, in fact, we didn't

54
00:02:21,084 --> 00:02:23,480
even know what it was. We just knew that there was one.

55
00:02:23,480 --> 00:02:25,760
Then, that would've been a whole lot harder. actually, here's a question

56
00:02:25,760 --> 00:02:27,714
for you, Michael. If I had told you, if I had given you

57
00:02:27,714 --> 00:02:30,860
this, but I haven't, didn't tell you what the fitness function was.

58
00:02:30,860 --> 00:02:33,430
Just that when you gave me a sequence, I evaluated it for you.

59
00:02:33,430 --> 00:02:34,380
>> Uh-huh.

60
00:02:34,380 --> 00:02:35,942
>> We wouldn't have been able to do any of the stuff that we

61
00:02:35,942 --> 00:02:38,609
were doing. I mean, we'd still be able to do it, but we wouldn't have

62
00:02:38,609 --> 00:02:42,290
been able to jump ahead. Like, we just, like we could've done with those

63
00:02:42,290 --> 00:02:43,380
two that were four, because we wouldn't

64
00:02:43,380 --> 00:02:44,960
even know what the maximum fitness value was.

65
00:02:44,960 --> 00:02:46,800
>> Yeah, we would have to done this last

66
00:02:46,800 --> 00:02:49,120
step to, to find that one of them has

67
00:02:49,120 --> 00:02:50,620
a score of five. And then we would have

68
00:02:50,620 --> 00:02:52,780
to done that step again to make sure that

69
00:02:52,780 --> 00:02:55,190
there wasn't anything locally better than five, because we wouldn't

70
00:02:55,190 --> 00:02:57,830
of known that if we didn't have a kind of semantic

71
00:02:57,830 --> 00:03:01,010
understanding of the fitness function. But, but the rest of the

72
00:03:01,010 --> 00:03:04,290
algorithm was perfectly implementable without knowing that, right? All, all that

73
00:03:04,290 --> 00:03:07,600
you were basing your decisions on was, you gave me

74
00:03:07,600 --> 00:03:09,870
bit sequences, I gave you scores, and you used those to

75
00:03:09,870 --> 00:03:12,110
figure out what next bit sequence to ask. It, it didn't

76
00:03:12,110 --> 00:03:15,110
use the fact that the fitness function had a particular form.

77
00:03:15,110 --> 00:03:16,335
>> That's right. That's right.

78
00:03:16,335 --> 00:03:17,640
>> Now, this wouldn't,

79
00:03:17,640 --> 00:03:21,290
this particular problem is very, very well behaved, because it has

80
00:03:21,290 --> 00:03:26,320
one global optimum, this bit sequence that has a score of five.

81
00:03:26,320 --> 00:03:28,880
Nothing else had a five. And once you're at five, and,

82
00:03:28,880 --> 00:03:32,670
and no other bit sequence actually could you be stuck. Right, so

83
00:03:32,670 --> 00:03:34,750
it was always the case that you could always get closer

84
00:03:34,750 --> 00:03:37,960
to the target pattern, so your score can always go up. But,

85
00:03:37,960 --> 00:03:40,700
in general, that's not how things work. That you may actually be

86
00:03:40,700 --> 00:03:42,640
able to get stuck in local optima and we need a way

87
00:03:42,640 --> 00:03:43,410
of dealing with that.
