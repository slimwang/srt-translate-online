1
00:00:00,240 --> 00:00:05,090
So now let's look at what happens when we need to dispatch instructions. So

2
00:00:05,090 --> 00:00:11,050
this is the situation in a cycle. Dispatch basically means to

3
00:00:11,050 --> 00:00:15,940
consider latching operations results that are produced, and

4
00:00:15,940 --> 00:00:21,010
also deciding which instructions are ready to execute. So in the same cycle,

5
00:00:21,010 --> 00:00:23,830
usually we'll have both of them. So we will consider the situation where we

6
00:00:23,830 --> 00:00:26,300
can actually, kind of at the beginning of the cycle, do this and

7
00:00:26,300 --> 00:00:29,160
then towards the end of the cycle, actually choose among the instructions that

8
00:00:29,160 --> 00:00:31,970
are ready to go. None of these instructions are ready to go.

9
00:00:31,970 --> 00:00:35,590
So if we did it the other way around in the cycle nothing would really dispatch.

10
00:00:35,590 --> 00:00:40,070
So now let's do it. What's going to happen is, when we broadcast the result,

11
00:00:40,070 --> 00:00:45,920
we say which Reservation Station is producing the result. And what the value is.

12
00:00:45,920 --> 00:00:50,640
And now what happens is this. The reservation station who's result is

13
00:00:50,640 --> 00:00:55,220
being broadcast know that this reservation station has already dispatched this,

14
00:00:55,220 --> 00:00:58,860
it was executed, it was broadcast et cetera so night comes back here.

15
00:00:58,860 --> 00:01:02,570
We're now going to free this reservation station base its finished its job.

16
00:01:03,600 --> 00:01:07,310
So the first thing we're going to do is free this reservation station.

17
00:01:08,380 --> 00:01:12,030
Now it's empty and is ready to receive another instruction that issues.

18
00:01:12,030 --> 00:01:17,720
The next thing that we're going to do is match this tag against each of the two

19
00:01:17,720 --> 00:01:21,660
operands in each of the reservation stations. So what's going to happen is RS4

20
00:01:21,660 --> 00:01:26,570
doesn't match, so we're not going to do anything for this. RS1 here does match,

21
00:01:26,570 --> 00:01:32,260
so instead of RS1 here we are going to use a value of minus 0.29.

22
00:01:32,260 --> 00:01:37,620
For this instruction, it already has a value here,

23
00:01:37,620 --> 00:01:41,650
so we don't have to match anything. But RS1 here does match so

24
00:01:41,650 --> 00:01:47,950
we're going to take the value of 0.29. And here we have another match. Oh,

25
00:01:47,950 --> 00:01:54,810
zero oh, this is minus zero, okay, minus 0.29, and this value's already here.

26
00:01:54,810 --> 00:01:58,320
So this completes, basically, what happens when a result is kind of being

27
00:01:58,320 --> 00:02:03,470
broadcast as far as reservation stations are concerned. Now we need to consider

28
00:02:03,470 --> 00:02:08,500
which reservation stations have all the operands ready to go. This one doesn't.

29
00:02:08,500 --> 00:02:13,940
This one does. And this one does. Because these are going to different execution

30
00:02:13,940 --> 00:02:18,389
units, assuming that in each execution unit can take one operation per cycle.

31
00:02:19,530 --> 00:02:24,000
This instruction RS4 is going to execute in the multiplier. So

32
00:02:24,000 --> 00:02:27,810
the multiplier for a while it will be busy with the, you know RS4.

33
00:02:27,810 --> 00:02:34,460
This is a divide. And it's going to be basically doing this over this.

34
00:02:34,460 --> 00:02:38,330
And then here. This one is not ready to go so the only one that

35
00:02:38,330 --> 00:02:43,924
can really go here is this one so what we will be doing for awhile is RS3 minus

36
00:02:43,924 --> 00:02:49,590
0.29 plus 2.72. Once these are done,

37
00:02:49,590 --> 00:02:52,320
they're going to broadcast their results and this cycle will repeat
