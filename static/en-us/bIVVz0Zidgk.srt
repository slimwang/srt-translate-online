1
00:00:00,000 --> 00:00:03,000
Just as we can get a lot of use out of + for 1 or more copies,

2
00:00:03,000 --> 00:00:07,000
sometimes it's nice to have 0 or more copies.

3
00:00:07,000 --> 00:00:11,000
So we'll introduce the star regular expression for that.

4
00:00:11,000 --> 00:00:13,000
You can convert between the 2 of them.

5
00:00:13,000 --> 00:00:18,000
If you wanted 1 or more copies of a, you could have a, followed by 0 or more copies of a.

6
00:00:18,000 --> 00:00:22,000
Some classes or texts will teach the star first and then move on to the plus.

7
00:00:22,000 --> 00:00:26,000
We teach the plus first because it's more common for specifying Python and Javascript.

8
00:00:26,000 --> 00:00:31,000
So now, the plus, the star, the question mark, the open square brackets,

9
00:00:31,000 --> 00:00:34,000
the closed square brackets--they all mean something special in regular expressions.

10
00:00:34,000 --> 00:00:37,000
They help us to note sets of strings.

11
00:00:37,000 --> 00:00:40,000
What if the string I want to match is actually just a + sign.

12
00:00:40,000 --> 00:00:44,000
How do it do it if + means 1 or more copies of what came before?

13
00:00:44,000 --> 00:00:47,000
We need some way of saying, "No, no--I really mean it!

14
00:00:47,000 --> 00:00:50,000
Actually +, not 1 or more, just +."

15
00:00:50,000 --> 00:00:54,000
We're going to solve this by using something called escape sequences,

16
00:00:54,000 --> 00:00:58,000
but before I get into them, let's introduce them by way of analogy.

17
00:00:58,000 --> 00:01:03,000
In Python, you can declare a string using double quotes or single quotes.

18
00:01:03,000 --> 00:01:08,000
So if you want to have a constant string that reads, P & P is Jane's book.

19
00:01:08,000 --> 00:01:11,000
If you use single quotes, Python will get confused because you have 1 here,

20
00:01:11,000 --> 00:01:16,000
1 here, and 1 there, and it will think your string ends at the "e" in Jane.

21
00:01:16,000 --> 00:01:18,000
No problem, you say?

22
00:01:18,000 --> 00:01:21,000
I will just use double quotes.That's what they're there for.

23
00:01:21,000 --> 00:01:25,000
But what if you want to include quoted dialogue in your string?

24
00:01:25,000 --> 00:01:30,000
So now I want to say, "I said, P & P is Jane's book."

25
00:01:30,000 --> 00:01:34,000
So now I'm using both the single quote and the double quote for their actual meanings.

26
00:01:34,000 --> 00:01:36,000
What do I put on the side?

27
00:01:36,000 --> 00:01:41,000
Well, Python will actually let you bypass this by using triple quotes,

28
00:01:41,000 --> 00:01:43,000
but what if I really wanted to have triple quotes in the middle too?

29
00:01:43,000 --> 00:01:45,000
We can't do this forever.

30
00:01:45,000 --> 00:01:50,000
Well, it turns out that if I just put a backward slash, a backslash, in front of a quote

31
00:01:50,000 --> 00:01:52,000
or a double quote or whatnot,

32
00:01:52,000 --> 00:01:58,000
Python will treat it as being part of this string and not as being the end of the string.

33
00:01:58,000 --> 00:02:02,000
We're escaping out of treating quotes as string delimiters,

34
00:02:02,000 --> 00:02:05,000
so this is Python's way of saying, no, no, I really mean it.

35
00:02:05,000 --> 00:02:06,000
I actually have a quote there.

36
00:02:06,000 --> 00:02:09,000
Now when you actually go to write this down in Python,

37
00:02:09,000 --> 00:02:11,000
you may not get different colors or different fonts,

38
00:02:11,000 --> 00:02:13,000
so this maybe a little hard to read,

39
00:02:13,000 --> 00:02:14,000
but it does work.

40
00:02:14,000 --> 00:02:20,000
I can use these escape sequences to literally write down a special character.

41
00:02:20,000 --> 00:02:27,000
The backslash is sometimes called an escape character and the 2 of these together

42
00:02:27,000 --> 00:02:30,000
are an escape sequence, a sequence of characters that are treated as if it were

43
00:02:30,000 --> 00:02:33,000
just the double quotes, just a single quote.

44
00:02:33,000 --> 00:02:35,000
Note that Python is throwing away this backslash.

45
00:02:35,000 --> 00:02:37,000
You won't actually see it.

46
00:02:37,000 --> 00:02:40,000
Just to show you how this sort of thing plays out in Python,

47
00:02:40,000 --> 00:02:44,000
I've written down 2 different versions of P & P is Jane's book--

48
00:02:44,000 --> 00:02:47,000
one using double quotes and one using an escape sequence.

49
00:02:47,000 --> 00:02:51,000
We're going to print out both of their values and then check to see if they're actually equal.

50
00:02:51,000 --> 00:02:53,000
And in fact, they are.

51
00:02:53,000 --> 00:02:55,000
Even though we entered them slightly differently,

52
00:02:55,000 --> 00:03:00,000
Python treats them both the same internally and indicates that they're equal.

53
00:03:00,000 --> 00:03:02,000
Here's 1 more example of this.

54
00:03:02,000 --> 00:03:05,000
This time with a double quote being escaped twice.

55
00:03:05,000 --> 00:03:09,000
And again, the 2 strings are equal under the hood as Python deals with them.

56
00:03:09,000 --> 00:03:13,000
It turns out that we can do the same thing in regular expressions.

57
00:03:13,000 --> 00:03:16,000
Suppose you want to find the string '++'.

58
00:03:16,000 --> 00:03:23,000
This regular expression "\+\+" has 2 escape sequences,

59
00:03:23,000 --> 00:03:25,123
and it finds only the string '++'.
