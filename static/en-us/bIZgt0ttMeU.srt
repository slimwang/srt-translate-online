1
00:00:00,025 --> 00:00:03,417
So I'm starting with the code we had before that works correctly, except for,

2
00:00:03,417 --> 00:00:06,814
with this assumption that all months have 30 days. So the first step is going to

3
00:00:06,814 --> 00:00:10,335
be to define the stub procedure daysInMonth that gives the number of days in a

4
00:00:10,335 --> 00:00:14,272
month. But, for our stub procedure, we're just going to always return 30. And

5
00:00:14,272 --> 00:00:18,631
I'm going to modify nextDay to call daysInMonth. That's pretty simple, but I

6
00:00:18,631 --> 00:00:21,628
should start testing, and I'm going to write some code to do testing. We don't

7
00:00:21,628 --> 00:00:24,879
want to have to keep typing the same test cases in the shell. We want to write

8
00:00:24,879 --> 00:00:28,928
some code for testing. For the problem that's provided, there were some provided

9
00:00:28,928 --> 00:00:32,403
test cases. I'm going to write my own starting now. And I'm going to make sure

10
00:00:32,403 --> 00:00:35,941
that these test cases, we don't expect the correct results yet because I'm

11
00:00:35,941 --> 00:00:39,665
testing with 30-day months. So, I'm going to test two dates that are the same.

12
00:00:39,665 --> 00:00:43,560
It's a boundary case, it's a useful one to test. I'm going to test from one day

13
00:00:43,560 --> 00:00:47,409
to the next, that should give us one day. And these are test cases for days

14
00:00:47,409 --> 00:00:51,210
between dates. I should really be writing some test cases for next day. The

15
00:00:51,210 --> 00:00:54,060
reason for that is that, if they fail, well, it's going to be more easy to

16
00:00:54,060 --> 00:00:57,260
understand what went wrong, rather than just writing all of my test cases for

17
00:00:57,260 --> 00:01:02,486
days between days. So let's try some nextDay test cases. Got one where the day

18
00:01:02,486 --> 00:01:08,262
advances. Let's get one where the month advances. And I will use a month that

19
00:01:08,262 --> 00:01:14,082
has 30 days. So it will be correct in 30 months, but will still be correct once

20
00:01:14,082 --> 00:01:18,068
we fix this. And I'll use advancing the year. A few test cases, probably we

21
00:01:18,068 --> 00:01:23,198
should have more. But let's try that. We should save, and let's run this, and

22
00:01:23,198 --> 00:01:28,090
we'll run our test. And, something failed. Not too surprising, this happens.

23
00:01:28,090 --> 00:01:31,740
Let's see what failed. And the failure is type error that I'm calling

24
00:01:31,740 --> 00:01:36,380
daysInMonth Not passing in the right number of parameters. In fact, I passed in

25
00:01:36,380 --> 00:01:40,326
0. I should have passed in both the year and the month. So this is one of the

26
00:01:40,326 --> 00:01:44,050
reasons for writing things in stubs, we can find these kinds of errors quickly.

27
00:01:44,050 --> 00:01:48,239
So let's try again, and now we're test passed, and our test case is using

28
00:01:48,239 --> 00:01:52,716
restrictions. I'm going to be a little more careful and print something out when

29
00:01:52,716 --> 00:01:56,864
the test finishes, because it's a little bit dangerous to have nothing to tell

30
00:01:56,864 --> 00:02:00,909
when the test finished. Maybe we didn't get any output for some other reason.
