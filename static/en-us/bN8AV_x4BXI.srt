1
00:00:00,210 --> 00:00:02,876
So far we've examined what are called local illumination models, where an

2
00:00:02,876 --> 00:00:06,880
object is affected by a light, and the result is sent to the eye. Light comes

3
00:00:06,880 --> 00:00:11,585
only from, well, light sources. No light is reflected from other objects. There

4
00:00:11,585 --> 00:00:15,236
are many more light paths that can be tracked. One rendering technique that can

5
00:00:15,236 --> 00:00:18,834
simulate these is called ray tracing. We've seen how the GPU sends each object

6
00:00:18,834 --> 00:00:23,150
triangle in turn to the screen and rasterizes it. Ray tracing instead fires

7
00:00:23,150 --> 00:00:27,198
rays from the eye through each pixel. Objects are tested against each ray. The

8
00:00:27,198 --> 00:00:30,096
closest object found along a ray's path is the one that's used to compute the

9
00:00:30,096 --> 00:00:34,112
ray's color contribution. You can think of each ray from the eye as rendering a

10
00:00:34,112 --> 00:00:37,446
single one by one pixel. One way to find the closest object for this pixel is

11
00:00:37,446 --> 00:00:41,454
to send every triangle down the pipeline in attempt to rasterize it. Using the

12
00:00:41,454 --> 00:00:45,202
Z buffer to keep track of the closest object. This is perhaps the slowest way

13
00:00:45,202 --> 00:00:49,096
ever to perform ray tracing. In reality, researchers and practitioners have

14
00:00:49,096 --> 00:00:52,132
spent huge amounts of time creating and tuning algorithms to rapidly find this

15
00:00:52,132 --> 00:00:56,180
closest object along the ray. Where rasterization gets some of its speed is

16
00:00:56,180 --> 00:01:00,203
from the fact that a single triangle usually covers a bunch of pixels. Various

17
00:01:00,203 --> 00:01:03,615
intermediate results can then be shared when processing the triangle. At its

18
00:01:03,615 --> 00:01:07,348
simplest, ray tracing can give the same result as rasterization. Each ray from

19
00:01:07,348 --> 00:01:10,972
the eye finds the closest object along it. The effect of light on the surface

20
00:01:10,972 --> 00:01:14,733
is computed and the result is displayed. However that's just the starting point

21
00:01:14,733 --> 00:01:18,129
for ray tracing. For the light to surface pass, we've made one obvious

22
00:01:18,129 --> 00:01:22,844
simplification for basic rasterization. Objects don't block other objects. In

23
00:01:22,844 --> 00:01:26,312
other words, no shadows are cast. In ray tracing, adding basic shadows is

24
00:01:26,312 --> 00:01:29,640
trivial. Shoot a ray from the surface to the light. If there's something in the

25
00:01:29,640 --> 00:01:33,140
way, the light is blocked and can be ignored. Since all computations happen in

26
00:01:33,140 --> 00:01:36,110
World Space we can avoid many of the precision problems found in rasterization

27
00:01:36,110 --> 00:01:40,308
techniques, such as shadow mapping. Classical ray tracing also offers us the

28
00:01:40,308 --> 00:01:44,544
ability to create true reflections in glass effects. For shiny surfaces, we can

29
00:01:44,544 --> 00:01:48,632
spawn a new ray in the reflection direction. Whatever this ray hits is what is

30
00:01:48,632 --> 00:01:51,530
reflected in the surface, and so can be factored into the ray's final color,

31
00:01:51,530 --> 00:01:56,360
its radiance. Let's say our sphere is actually glass. Instead of simple

32
00:01:56,360 --> 00:02:00,100
filtering, we can also spot a refraction ray and see where it hits. When it

33
00:02:00,100 --> 00:02:02,460
encounters the other side of the sphere and exits, we spawn yet another

34
00:02:02,460 --> 00:02:06,069
refraction ray in the reflection ray. We can continue to spawn rays until we

35
00:02:06,069 --> 00:02:07,200
hit some limit.
