1
00:00:00,190 --> 00:00:03,338
Let's take a look at how sound works. Now say a bird starts singing

2
00:00:03,338 --> 00:00:03,702
[SOUND]

3
00:00:03,702 --> 00:00:09,346
and this travels through the air as a sound wave before reaching the ear. The

4
00:00:09,346 --> 00:00:12,518
sound wave is a analog signal, but in order to represent it on a computer we

5
00:00:12,518 --> 00:00:17,570
need to convert it to digital information. After it's converted to digital, we

6
00:00:17,570 --> 00:00:21,480
might want to perform some audio transforms on it. To change the volume.

7
00:00:21,480 --> 00:00:22,292
[NOISE]

8
00:00:22,292 --> 00:00:26,120
Or apply some other echo effect.

9
00:00:26,120 --> 00:00:26,659
[NOISE]

10
00:00:26,659 --> 00:00:30,208
Or something much more complicated and awesome

11
00:00:30,208 --> 00:00:30,934
[NOISE].

12
00:00:30,934 --> 00:00:35,722
We can think of all these transforms as a graph of processing notes that each

13
00:00:35,722 --> 00:00:41,143
transform our sound in some way. And you can put them together, and that's

14
00:00:41,143 --> 00:00:45,796
exactly how Web Audio is structured. In this case, you can take this sound, run

15
00:00:45,796 --> 00:00:50,074
it through a series of nodes to transform it into, for example, a slap-back

16
00:00:50,074 --> 00:00:54,854
echo effect. Let's take a look at the Web Audio Playground, which is a web

17
00:00:54,854 --> 00:00:58,985
application built by Chris Wilson. It's a great way to visualize how Web Audio

18
00:00:58,985 --> 00:01:02,450
works and you can actually play around with all the different nodes, you can

19
00:01:02,450 --> 00:01:05,805
create source nodes and add all these different processing nodes to your

20
00:01:05,805 --> 00:01:11,082
sounds. And you can create that same slap-back effect like this

21
00:01:11,082 --> 00:01:11,750
[SOUND].

22
00:01:15,210 --> 00:01:19,998
Now, Web Audio is a node graph that is contained in something called an audio

23
00:01:19,998 --> 00:01:25,203
context. Everything in the audio context is run natively in high performance

24
00:01:25,203 --> 00:01:30,152
code, specifically designed for audio processing. Of course, what we see here

25
00:01:30,152 --> 00:01:33,110
is a simple example, a real node graph may look quite complicated, but

26
00:01:33,110 --> 00:01:36,390
ultimately it's all using the same concepts.
