1
00:00:00,310 --> 00:00:04,310
During the last lecture, we talked about processes and process management.

2
00:00:04,310 --> 00:00:07,630
We said that a process is represented with its address space and

3
00:00:07,630 --> 00:00:08,970
its execution context.

4
00:00:08,970 --> 00:00:12,510
And this has registers and stack and stack pointer.

5
00:00:12,510 --> 00:00:15,770
This type of process, the process that's represented in this way,

6
00:00:15,770 --> 00:00:19,470
can only execute at one CPU at a given point of time.

7
00:00:19,470 --> 00:00:22,820
If we want a process to be able to execute on multiple CPUs,

8
00:00:22,820 --> 00:00:26,980
to take advantage of multi-CPU systems, of multi-core systems today,

9
00:00:26,980 --> 00:00:30,360
that process has to have multiple execution contexts.

10
00:00:30,360 --> 00:00:34,940
We call such execution context within a single process, threads.

11
00:00:34,940 --> 00:00:37,710
In this lecture, we will explain what threads are, and

12
00:00:37,710 --> 00:00:40,040
how they differ from processes.

13
00:00:40,040 --> 00:00:43,810
We will talk about some of the basic data structures and mechanisms that

14
00:00:43,810 --> 00:00:48,090
are needed to implement threads, and to manage and coordinate their execution.

15
00:00:48,090 --> 00:00:49,840
We will use Birrell's paper,

16
00:00:49,840 --> 00:00:53,890
An Introduction to Programming with Threads, to explain some of these concepts.

17
00:00:53,890 --> 00:00:58,700
And this is an excellent paper that describes fundamentals of multithreading,

18
00:00:58,700 --> 00:01:00,860
synchronization, and concurrency.

19
00:01:00,860 --> 00:01:01,880
In a later lesson,

20
00:01:01,880 --> 00:01:05,310
we will talk about a concrete multithreading system called Pthreads.
