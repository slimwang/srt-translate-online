1
00:00:00,260 --> 00:00:05,250
And the way to mae the circles properly displayed is by this block of code here.

2
00:00:05,250 --> 00:00:09,650
Currently all the circles are overlapping in the top left of the screen and

3
00:00:09,650 --> 00:00:13,900
visually don't have any representation, because we haven't set a radius or

4
00:00:13,900 --> 00:00:15,450
a fill for them.

5
00:00:15,450 --> 00:00:19,170
So what's happening in this code here, is we're saying find me all

6
00:00:19,170 --> 00:00:23,888
the circles on the webpage which there's 836 of them there.

7
00:00:23,888 --> 00:00:30,330
Change the .cxf attribute of the circle, which stands for center x, so change

8
00:00:30,330 --> 00:00:35,350
the x position of the circle, according to the anonymous accessor function.

9
00:00:35,350 --> 00:00:41,670
And again, since this function gets past to d, a different bound data object,

10
00:00:41,670 --> 00:00:46,230
every time it's called, we can position every circle at a completely different

11
00:00:46,230 --> 00:00:51,950
place on our chart corresponding to what's actually contained in its bound data.

12
00:00:53,150 --> 00:00:58,510
In this case, the pattern to do this in d3 is to take your scale object and

13
00:00:58,510 --> 00:01:03,440
pass in the column that corresponds to, in this case, the x axis.

14
00:01:03,440 --> 00:01:09,390
So, since our x axis corresponds to the date of the game we pass the date,

15
00:01:09,390 --> 00:01:13,630
which in this case is a JavaScript date object, to our time scale

16
00:01:13,630 --> 00:01:18,830
which converts it from a date object to a pixel value and return that from our

17
00:01:18,830 --> 00:01:24,020
anonymous excessor function to set the exposition of that circle.

18
00:01:24,020 --> 00:01:26,100
Again, that was quite a lot, so

19
00:01:26,100 --> 00:01:31,020
let's explore this in the web console by inserting a debugger statement.

20
00:01:31,020 --> 00:01:34,750
Refreshing the page and jumping to the debugger inside of

21
00:01:34,750 --> 00:01:38,960
our anonymous accessor function, we can now inspect what d is.

22
00:01:40,070 --> 00:01:43,150
In this case, we've broken on the first game.

23
00:01:43,150 --> 00:01:46,439
So game one, which has attendance 25,000.

24
00:01:46,439 --> 00:01:48,230
Looking at d[date],

25
00:01:48,230 --> 00:01:54,590
was have a JavaScript data object corresponding to May 27th of the year 1934.

26
00:01:54,590 --> 00:01:59,530
But again, d3 needs a pixel value to know where to actually draw the circle.

27
00:01:59,530 --> 00:02:03,290
We can't say draw the circle at position May 27th.

28
00:02:03,290 --> 00:02:08,419
And the way to go from a date, in this case, to a pixel value for

29
00:02:08,419 --> 00:02:12,180
our given chart is to use the time scale we created earlier.

30
00:02:12,180 --> 00:02:17,700
So in this case May 27 1934 happens to correspond to

31
00:02:17,700 --> 00:02:22,920
x pixel position 132.6 and so forth.

32
00:02:22,920 --> 00:02:27,280
And looking at the rest of the code here, we set the x position of the center of

33
00:02:27,280 --> 00:02:30,950
the circle to correspond to the attendance column.

34
00:02:30,950 --> 00:02:36,200
So again, whatever attribute we're trying to set in this case cy, gets set to be

35
00:02:36,200 --> 00:02:41,200
whatever gets returned from the accessor function for an individual data point.
