1
00:00:00,350 --> 00:00:05,840
Depending on what sort of input data
we provide when this string is read,

2
00:00:05,840 --> 00:00:10,080
we know that if we provide more that
12 bytes, we're going to overflow

3
00:00:10,080 --> 00:00:12,863
in this direction into these
variables as we're talking about.

4
00:00:14,000 --> 00:00:17,380
So what can you do if you,
sort of, are careful about it?

5
00:00:17,380 --> 00:00:22,660
First thing that we want to do is,
we want program control to go someplace

6
00:00:22,660 --> 00:00:27,340
where our code, the attacker
can actually craft some code.

7
00:00:27,340 --> 00:00:29,070
There are two things
the attacker has to do.

8
00:00:29,070 --> 00:00:34,070
It has to have its code that it wants to
run, and then it has to find a way to

9
00:00:34,070 --> 00:00:38,860
get the program control transfer to
happen, such that the program goes and

10
00:00:38,860 --> 00:00:43,730
starts executing the code that
the attacker has crafted.

11
00:00:43,730 --> 00:00:48,380
Here, we should sort of look at this and
say there is an opportunity here for

12
00:00:48,380 --> 00:00:49,260
the attacker.

13
00:00:49,260 --> 00:00:54,000
The attacker has found a way to go
up and write into this locations.

14
00:00:54,000 --> 00:00:58,246
We know that it has done that, because
if it passes more than 12 bytes these 4

15
00:00:58,246 --> 00:01:01,320
bytes are going to be overwritten,
that's allowed login.

16
00:01:01,320 --> 00:01:06,219
If it writes more than 16 bytes, then
the return address is gona be And so

17
00:01:06,219 --> 00:01:08,420
if we carefully sort of overflow, and

18
00:01:08,420 --> 00:01:11,850
you can find out the return
address where our code is.

19
00:01:11,850 --> 00:01:16,340
And the overflow actually ends up
writing the address of that code

20
00:01:16,340 --> 00:01:18,160
into this return address.

21
00:01:18,160 --> 00:01:19,770
What would happen in that case?

22
00:01:19,770 --> 00:01:24,460
The function, when it's done,
will not return to where it came from.

23
00:01:24,460 --> 00:01:29,110
Remember it had stored the address where
it needs go back in return address.

24
00:01:29,110 --> 00:01:31,440
But by carefully sort of overflowing and

25
00:01:31,440 --> 00:01:34,880
modifying this return address,
that old return address is history.

26
00:01:34,880 --> 00:01:36,255
It's gone.

27
00:01:36,255 --> 00:01:39,910
It's going to actually return to
the address that we have inserted or

28
00:01:39,910 --> 00:01:42,130
we have put in these 4 bytes.

29
00:01:42,130 --> 00:01:45,680
The 4 bytes where we have
the new address that we have put

30
00:01:45,680 --> 00:01:49,020
in to this area of memory where we
have the return address before.

31
00:01:49,020 --> 00:01:51,330
That's where this program
is going to return.

32
00:01:51,330 --> 00:01:53,600
So this is kind of an ha moment.

33
00:01:53,600 --> 00:01:57,360
By providing bad input,
the vulnerability is,

34
00:01:57,360 --> 00:01:59,560
we're going to know that,
we're not checking input.

35
00:01:59,560 --> 00:02:00,913
That's the vulnerability.

36
00:02:00,913 --> 00:02:03,397
That is what is going
exploited by that hacker.

37
00:02:03,397 --> 00:02:07,920
The attacker is providing
a carefully crafted input.

38
00:02:07,920 --> 00:02:11,630
And when we take that input,
an overflow occurs.

39
00:02:11,630 --> 00:02:15,500
And the way the overflow reaches
the return address area,

40
00:02:15,500 --> 00:02:18,030
the part of memory where
the return address is stored.

41
00:02:18,030 --> 00:02:23,640
We are actually going to put a new
return address where code that we have

42
00:02:23,640 --> 00:02:29,270
created, by we I mean the attacker, the
program will start executing that code.

43
00:02:29,270 --> 00:02:33,730
So some code that hacker wants executed,
if we know where that code is, and

44
00:02:33,730 --> 00:02:37,540
we know its address, and this is what
we override these four locations with,

45
00:02:37,540 --> 00:02:41,300
the return address by passing bad input,

46
00:02:41,300 --> 00:02:45,220
exploiting the vulnerability, when
the program doesn't check it's input.

47
00:02:45,220 --> 00:02:49,710
By passing carefully crafted input,
we are now able to take the program

48
00:02:49,710 --> 00:02:53,030
from where it was to a place where
our instructions are located.
