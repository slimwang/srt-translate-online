1
00:00:00,300 --> 00:00:01,940
Okay, if you've got it, great job.

2
00:00:01,940 --> 00:00:04,970
And if you didn't, good try and
keep watching for the answer.

3
00:00:06,190 --> 00:00:08,080
All right, so
here I am in Android Studio.

4
00:00:08,080 --> 00:00:11,150
And I'm looking at
the TextViews right now.

5
00:00:11,150 --> 00:00:13,870
But I'm going to scroll up
to look at the ImageView.

6
00:00:13,870 --> 00:00:16,950
Okay, so a little bit about what
I was talking about before.

7
00:00:16,950 --> 00:00:19,635
If I put my cursor somewhere
in this ImageView,

8
00:00:19,635 --> 00:00:23,473
it's going to give me a blue box that
shows me how big the ImageView is.

9
00:00:23,473 --> 00:00:26,743
And it's pretty much the entire
size of this phone screen.

10
00:00:26,743 --> 00:00:29,049
Now I'm going to go ahead and
add scaleType, and

11
00:00:29,049 --> 00:00:32,950
the two options that I'm looking
at are center or centerCrop.

12
00:00:32,950 --> 00:00:35,450
Now center doesn't
actually scale the image,

13
00:00:35,450 --> 00:00:37,380
it doesn't change the size of the image.

14
00:00:37,380 --> 00:00:40,800
So it makes it a pretty straightforward
that I need to use centerCrop.

15
00:00:40,800 --> 00:00:44,892
Okay, and you should see that the image
now expands to fill the entire

16
00:00:44,892 --> 00:00:46,770
ImageView space.

17
00:00:46,770 --> 00:00:50,470
You might notice here that at
the bottom there's a little white

18
00:00:50,470 --> 00:00:53,610
strip where the image doesn't expand to.

19
00:00:53,610 --> 00:00:57,860
If I go up here, which let's me
choose between different devices, and

20
00:00:57,860 --> 00:01:01,190
I choose say a tablet like a Nexus 10,

21
00:01:01,190 --> 00:01:04,530
we can see that this image is
not filling the entire space.

22
00:01:04,530 --> 00:01:07,600
Now this is bad because it means if
you're viewing this on a tablet you're

23
00:01:07,600 --> 00:01:11,610
going to get this weird boxy image
with this white space around it.

24
00:01:11,610 --> 00:01:13,810
Although it might look fine on a phone.

25
00:01:13,810 --> 00:01:14,575
The reasoning for

26
00:01:14,575 --> 00:01:18,190
this is because I've put wrap_content
instead of match_parent.

27
00:01:18,190 --> 00:01:20,300
Let me change these to match_parent.

28
00:01:20,300 --> 00:01:23,680
Now when I change these to
match_parent the image expands to fill

29
00:01:23,680 --> 00:01:24,910
the entire view.

30
00:01:24,910 --> 00:01:28,235
So the point I am trying to make is
that layout_width, layout_height, and

31
00:01:28,235 --> 00:01:30,080
scaleType all work together.

32
00:01:30,080 --> 00:01:34,080
Let me draw you a picture to show you
a little more detail about what I mean.

33
00:01:34,080 --> 00:01:37,460
Okay, so let's say you are a bit curious
about what's actually happening when we

34
00:01:37,460 --> 00:01:39,060
use centerCrop.

35
00:01:39,060 --> 00:01:40,910
If you go to
the Android Developers website,

36
00:01:40,910 --> 00:01:43,763
you will see that the documentation
says the following.

37
00:01:43,763 --> 00:01:46,510
centerCrop scales the image uniformly,

38
00:01:46,510 --> 00:01:49,460
meaning that it maintains
the image's aspect ratio.

39
00:01:49,460 --> 00:01:53,980
And what this means is that it does this
so that both dimensions, the width and

40
00:01:53,980 --> 00:01:56,290
the height of the image
will be equal to or

41
00:01:56,290 --> 00:02:00,340
larger than the corresponding dimension
of the image view (minus padding).

42
00:02:00,340 --> 00:02:03,380
Okay, so one thing I can say
about scaling uniformly,

43
00:02:03,380 --> 00:02:07,360
if you've ever tried to scale an image,
scaling uniformly means that it

44
00:02:07,360 --> 00:02:12,030
keeps the image from getting stretched
out either horizontally or vertically.

45
00:02:12,030 --> 00:02:16,320
So it does that scale, and
then it makes the image large enough so

46
00:02:16,320 --> 00:02:19,380
that both the width and
height are going to be equal to or

47
00:02:19,380 --> 00:02:23,700
larger than the corresponding
dimensions of the image itself.

48
00:02:23,700 --> 00:02:25,070
Let's look at a picture.

49
00:02:25,070 --> 00:02:26,910
Okay, so here's your phone.

50
00:02:26,910 --> 00:02:29,200
And on our phone we have an image view.

51
00:02:29,200 --> 00:02:31,150
Here's the picture for
the image view, and

52
00:02:31,150 --> 00:02:34,860
here's the green box representing
the actual size of the image view.

53
00:02:34,860 --> 00:02:37,680
What's centerCrop will do,
will scale this image up so

54
00:02:37,680 --> 00:02:40,790
that without warping it,
it fits in the box.

55
00:02:40,790 --> 00:02:44,627
Okay, so without changing the dimensions
I've scaled this image up to make it fit

56
00:02:44,627 --> 00:02:46,460
in this green box here.

57
00:02:46,460 --> 00:02:48,830
Now because the image
is this long rectangle,

58
00:02:48,830 --> 00:02:51,545
it actually expands over
the edge of the phone.

59
00:02:51,545 --> 00:02:54,610
centerCrop will center this
image in the view, and

60
00:02:54,610 --> 00:02:59,000
then as the name implies, it'll crop
off the excess parts of the image.

61
00:02:59,000 --> 00:03:01,940
Okay, so I want to talk about one more
problem that you might have run into.

62
00:03:03,400 --> 00:03:06,860
Views can overlap each other much like
playing cards can overlap each other.

63
00:03:06,860 --> 00:03:09,670
And the order of these view
tags here determines the order

64
00:03:09,670 --> 00:03:11,610
that the views get placed on the screen.

65
00:03:11,610 --> 00:03:12,910
So since view A is first,

66
00:03:12,910 --> 00:03:17,810
it would get placed on the screen first,
followed by view B, and then view C.

67
00:03:17,810 --> 00:03:20,530
Now because of the ordering
that I put in this XML,

68
00:03:20,530 --> 00:03:23,890
I can't really see my text
very well in text view A.

69
00:03:23,890 --> 00:03:26,910
Let's try changing the XML and
see how it rearranges my screen.

70
00:03:27,920 --> 00:03:31,710
Okay, so I've switched things around so
now I have view B, A, C.

71
00:03:31,710 --> 00:03:34,170
This will then draw view B first.

72
00:03:34,170 --> 00:03:35,220
Then it will draw view A.

73
00:03:35,220 --> 00:03:38,140
And finally it'll place view C.

74
00:03:38,140 --> 00:03:39,950
I've just reordered the views.

75
00:03:39,950 --> 00:03:42,347
Everything is placed
in the same position,

76
00:03:42,347 --> 00:03:46,252
but the ordering of how the views stack
on top of each other has changed.

77
00:03:46,252 --> 00:03:48,330
And because of that,
now I can see my text.

78
00:03:48,330 --> 00:03:51,280
So you might have run into
a similar problem with your card if

79
00:03:51,280 --> 00:03:55,010
you put your two text views here and
then you drew your image view.

80
00:03:55,010 --> 00:03:58,270
Because it would draw your first text
view, then your second text view, and

81
00:03:58,270 --> 00:04:01,870
then the image, which takes up the whole
screen, would have covered both of them.

82
00:04:01,870 --> 00:04:03,580
So just make sure that you
got the ordering correct.

83
00:04:04,750 --> 00:04:07,020
Let's take a look at what
that looks like in code.

84
00:04:07,020 --> 00:04:09,330
Okay so here's my working code.

85
00:04:09,330 --> 00:04:12,260
But I'm just going to show you what
I mean by the ordering of views.

86
00:04:12,260 --> 00:04:16,029
Right now my ImageView is placed first,
then my two TextViews.

87
00:04:16,029 --> 00:04:18,550
And we can see the text
easily on the screen.

88
00:04:18,550 --> 00:04:21,829
Now if I instead, cut this ImageView,
I'm going to scroll down,

89
00:04:21,829 --> 00:04:23,420
I'm going to past it right here.

90
00:04:23,420 --> 00:04:27,950
All right, and now I have TextView,
TextView, ImageView.

91
00:04:27,950 --> 00:04:29,140
Well, it draws the "Happy Birthday,

92
00:04:29,140 --> 00:04:33,140
Ben!" TextView, and then it draws
the "From, Lyla!" TextView.

93
00:04:33,140 --> 00:04:37,320
And then it draws this Android party
image over the other two TextViews.

94
00:04:37,320 --> 00:04:40,890
If I select the TextViews,
I can see that they're still there,

95
00:04:40,890 --> 00:04:43,100
they're just being covered
up by the ImageView.

96
00:04:43,100 --> 00:04:45,040
All right, I'm going to switch it back.

97
00:04:45,040 --> 00:04:47,350
That's much better,
my TextViews are on top now.

98
00:04:47,350 --> 00:04:50,280
Okay, and as we always do, let's go
ahead and run this on our phone,

99
00:04:50,280 --> 00:04:53,050
just to make sure that everything is
working with the match_parents and

100
00:04:53,050 --> 00:04:54,540
the centerCrop.

101
00:04:54,540 --> 00:04:56,720
Okay, awesome,
this is looking pretty great.

102
00:04:56,720 --> 00:05:02,070
We have our image expanded to fill the
entire view, we can see our text views.

103
00:05:02,070 --> 00:05:05,470
There's one tiny little problem that we
still need to fix, but great job so far.

104
00:05:05,470 --> 00:05:08,630
All right, you're doing a great job.
Only one more attribute to change,

105
00:05:08,630 --> 00:05:10,960
and then we're going to have
our final birthday card.
