1
00:00:00,210 --> 00:00:03,718
In the olden days of Android,
there wasn't an easy way to schedule

2
00:00:03,718 --> 00:00:08,390
a periodic job with complex run rules,
like, run within 15 minutes, but

3
00:00:08,390 --> 00:00:12,540
only while on WiFi, charging, and
if the job fails, keep re-trying, but

4
00:00:12,539 --> 00:00:16,210
wait more time between re-trying
the job to not overwhelm the network.

5
00:00:16,210 --> 00:00:18,730
And that's a lot of
constraints to keep straight.

6
00:00:18,730 --> 00:00:19,312
Well first,

7
00:00:19,312 --> 00:00:22,493
you'd need to set up a mechanism to
trigger the job after 15 minutes.

8
00:00:22,493 --> 00:00:25,501
Then, when the job was triggered,
you'd need to check all the WiFi and

9
00:00:25,501 --> 00:00:27,390
charging constraints manually.

10
00:00:27,390 --> 00:00:28,960
If the user wasn't on WiFi or

11
00:00:28,960 --> 00:00:33,000
charging, you'd need to manually
calculate when to re-schedule the task.

12
00:00:33,000 --> 00:00:36,140
Your app also would have to
be instantiated all the time

13
00:00:36,140 --> 00:00:38,840
just to check to see if
it has to run your job.

14
00:00:38,840 --> 00:00:41,650
Needless to say,
things were complicated.

15
00:00:41,649 --> 00:00:44,899
Thankfully, there is an easier and
more battery-friendly way.

16
00:00:44,899 --> 00:00:47,500
In Android L,
JobScheduler was introduced.

17
00:00:47,500 --> 00:00:50,979
JobScheduler allows you to simply
grab a reference to a job schedule or

18
00:00:50,979 --> 00:00:54,979
object from the context, create a new
job with all the constraints you wanted,

19
00:00:54,979 --> 00:00:58,739
and then schedule the job whenever
you want by calling js.schedule.

20
00:00:58,740 --> 00:01:02,859
In this course, we'll be using
a class called FirebaseJobDispatcher,

21
00:01:02,859 --> 00:01:05,590
which is a more compatible
version of JobScheduler.

22
00:01:05,590 --> 00:01:08,859
Since JobScheduler was introduced
in Android L, it only provides

23
00:01:08,859 --> 00:01:13,629
compatibility back to API level 21,
whereas FirebaseJobDispatcher provides

24
00:01:13,629 --> 00:01:16,899
compatibility back to
API level 9 Gingerbread.

25
00:01:16,900 --> 00:01:19,520
Here's what using
FirebaseJobDispatcher looks like.

26
00:01:19,519 --> 00:01:21,899
First, you make a GooglePlayDriver, and

27
00:01:21,900 --> 00:01:25,030
use that to create a new
FirebaseJobDispatcher object.

28
00:01:25,030 --> 00:01:28,049
Then you build the job,
specifying all the constraints.

29
00:01:28,049 --> 00:01:31,319
In this case,
the job triggers the MyJobService class.

30
00:01:31,319 --> 00:01:35,759
It has a unique identifier called a tag,
which is set to complex-job.

31
00:01:35,760 --> 00:01:39,875
The job doesn't recur, and it doesn't
persist if the device is rebooted.

32
00:01:39,875 --> 00:01:42,557
It starts between zero and
15 minutes, and

33
00:01:42,557 --> 00:01:46,022
will replace a current job with
the same tag if one exists.

34
00:01:46,022 --> 00:01:49,979
It uses an exponential backoff
strategy as a failure strategy.

35
00:01:49,980 --> 00:01:55,886
Jobs, especially network jobs,
might fail if a server is down.

36
00:01:55,885 --> 00:01:58,137
An exponential backoff strategy
will keep re-trying the job, but

37
00:01:58,137 --> 00:02:00,120
will wait longer and
longer between successive attempts.

38
00:02:00,120 --> 00:02:04,421
Finally, this job will only run on
an unmetered network like WiFi, and

39
00:02:04,421 --> 00:02:05,503
while charging.

40
00:02:05,503 --> 00:02:09,118
Taking a closer look at the timing,
we see that we can set when the job

41
00:02:09,118 --> 00:02:13,265
executes by using the setTrigger method
and passing it an executionWindow.

42
00:02:13,265 --> 00:02:15,649
The times applied here are in seconds.

43
00:02:15,650 --> 00:02:19,215
The first time is how long from when
the job is scheduled at minimum before

44
00:02:19,215 --> 00:02:20,734
the job service executes, and

45
00:02:20,734 --> 00:02:24,100
the second time is the maximum
time before it executes.

46
00:02:24,099 --> 00:02:26,609
The second time must be
greater than the first.

47
00:02:26,610 --> 00:02:29,370
And this all assumes that all of
the other constraints are met.

48
00:02:29,370 --> 00:02:33,360
Other constraints could be things like,
the device is currently plugged in.

49
00:02:33,360 --> 00:02:37,340
So if you put 60 and 120 as these
parameters, the job service would

50
00:02:37,340 --> 00:02:41,939
execute somewhere between 60 seconds and
120 seconds after it's scheduled.

51
00:02:41,939 --> 00:02:43,189
Why the window?

52
00:02:43,189 --> 00:02:46,199
Battery life is saved if the phone
can do a bunch of processing,

53
00:02:46,199 --> 00:02:48,669
especially network calls,
all in a batch.

54
00:02:48,669 --> 00:02:51,939
This allows the phone to stay more
continuously in a low-power state if

55
00:02:51,939 --> 00:02:55,870
the user is not actively using the
phone, which means more battery life for

56
00:02:55,870 --> 00:02:57,080
your user.

57
00:02:57,080 --> 00:03:00,020
Supplying a window lets the system
pick the best time to schedule

58
00:03:00,020 --> 00:03:01,855
your job in that window.

59
00:03:01,854 --> 00:03:04,019
I've provided the sample code below.

60
00:03:04,020 --> 00:03:07,310
Now that you know a little bit
more about FirebaseJobDispatcher,

61
00:03:07,310 --> 00:03:08,680
it's time to make your first job.

