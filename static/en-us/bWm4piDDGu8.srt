1
00:00:00,250 --> 00:00:03,000
So we're taking this
weight vector of ws and

2
00:00:03,000 --> 00:00:05,080
taking the dot product
with the feature weights.

3
00:00:05,080 --> 00:00:07,660
If the weights are all zero,
it's always going to predict zero

4
00:00:07,660 --> 00:00:10,300
which is actually the correct answer for
this NDP.

5
00:00:10,300 --> 00:00:13,280
So this it's really easy to set
the weights so that that happens.

6
00:00:13,280 --> 00:00:15,921
Is that the only way to set
the weights to make this happen?

7
00:00:15,921 --> 00:00:19,961
>> No because in fact for each one
of those states, there's only two

8
00:00:19,961 --> 00:00:24,147
features that are turned on and
there are different two features for

9
00:00:24,147 --> 00:00:28,640
every state except for state zero so
you could be pretty clever about it.

10
00:00:28,640 --> 00:00:33,201
So I think if you make the weight for
zero minus 1 maybe and

11
00:00:33,201 --> 00:00:38,904
then make features one through six
one-half, that would get you 0 for

12
00:00:38,904 --> 00:00:44,725
everything except state seven and
then state seven just needed to be 7.

13
00:00:44,725 --> 00:00:46,449
>> y or a seventh?

14
00:00:46,449 --> 00:00:47,527
>> 7.
7, good.

15
00:00:47,527 --> 00:00:52,455
So in particular, this weight vector
times this feature vector is going

16
00:00:52,455 --> 00:00:56,760
to give us, well minus 7 plus
0 plus 0 plus 0 plus 7, so 0.

17
00:00:56,760 --> 00:01:00,420
For this other one, it's going to give
us minus 1, plus 0, plus 0, plus 0,

18
00:01:00,420 --> 00:01:03,110
plus 0, plus 0, plus 1, which is 0.

19
00:01:03,110 --> 00:01:05,690
So, yeah, so this is a weight vector.

20
00:01:05,690 --> 00:01:07,460
So, not only can we represent
the value function, but

21
00:01:07,460 --> 00:01:09,450
we can represent it in
multiple different ways.

22
00:01:09,450 --> 00:01:12,020
It is multiply representable,
which I spelled wrong.

23
00:01:12,020 --> 00:01:15,260
Multiply, which is spelled
the same as multiply,

24
00:01:15,260 --> 00:01:18,660
but it's representable
in at least two ways.

25
00:01:18,660 --> 00:01:21,936
>> Actually an infinite number of ways
because you take that vector minus 1,

26
00:01:21,936 --> 00:01:23,990
one-half, 7,

27
00:01:23,990 --> 00:01:27,380
the multiplier by any constant
including zero and then it will work.

28
00:01:28,380 --> 00:01:28,938
>> Nice.

29
00:01:28,938 --> 00:01:32,537
Multiplied by 0 and you get that first
weight vector that we talked about

30
00:01:32,537 --> 00:01:35,723
anything else that we get were
multiplying 0 times a constant.

31
00:01:35,723 --> 00:01:39,031
So in fact there's an infinite set
of weight vectors that all capture

32
00:01:39,031 --> 00:01:41,440
the optimal value function,
which is also 0s.

33
00:01:41,440 --> 00:01:44,170
And so, we have plenty of rope.

34
00:01:44,170 --> 00:01:46,130
We should be able to
build a rope ladder.

35
00:01:46,130 --> 00:01:47,620
>> Yeah, paying ourselves.

36
00:01:47,620 --> 00:01:50,620
>> Ultimately that's actually what's
going to happen in this case.

37
00:01:50,620 --> 00:01:52,920
But it seems quite friendly, right?

38
00:01:52,920 --> 00:01:53,780
It's also tiny, right?

39
00:01:53,780 --> 00:01:54,670
>> Yeah.

40
00:01:54,670 --> 00:01:56,845
>> These are all things that would
seem like it should make it so

41
00:01:56,845 --> 00:01:58,380
that it's really easy to get this right.

42
00:01:58,380 --> 00:01:59,500
>> So then that's get it right.

43
00:01:59,500 --> 00:02:03,860
>> Yeah, well so it turns out that
what Baird showed is that, if you

44
00:02:03,860 --> 00:02:07,950
give it the right sequence of updates,
it will actually spiral out of control.

45
00:02:07,950 --> 00:02:09,201
So let's take a look at that.

46
00:02:09,201 --> 00:02:09,701
>> Okay.
