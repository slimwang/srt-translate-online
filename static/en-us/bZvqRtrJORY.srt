1
00:00:00,180 --> 00:00:03,460
Now that you know a little more
about enumerations, structs, and

2
00:00:03,460 --> 00:00:08,590
classes in Swift, I want to play a game
I'm calling enum, class, or struct?

3
00:00:08,590 --> 00:00:10,610
Choose the right type for the job.

4
00:00:10,610 --> 00:00:12,210
So for each type I describe,

5
00:00:12,210 --> 00:00:16,350
we're going to choose whether we should
use an enum, a class, or a struct.

6
00:00:16,350 --> 00:00:17,830
The first one is a triangle.

7
00:00:17,830 --> 00:00:21,970
It has two properties, an array
of angles and an array of sides.

8
00:00:21,970 --> 00:00:25,830
And I think we should choose, struct.

9
00:00:25,830 --> 00:00:29,780
This is a simple type, just a couple
collections with few values each.

10
00:00:29,780 --> 00:00:33,200
And one might imagine that each time
we make a triangle we want a distinct

11
00:00:33,200 --> 00:00:34,570
copy to be made.

12
00:00:34,570 --> 00:00:36,850
Also, there's no need for inheritance.

13
00:00:36,850 --> 00:00:41,040
If we did want inheritance, for
example for an isosceles triangle and

14
00:00:41,040 --> 00:00:43,690
a right triangle
the subclass from triangle.

15
00:00:43,690 --> 00:00:45,448
In that case we'd choose class.

16
00:00:45,448 --> 00:00:49,810
Number two,
UIImagePickerControllerSourceType.

17
00:00:49,810 --> 00:00:53,240
This is the type that indicates
where images should be chosen from,

18
00:00:53,240 --> 00:00:56,400
when they're being attached to
a text message, for example.

19
00:00:56,400 --> 00:01:00,680
Our biggest clue here is that the source
type has three distinct values,

20
00:01:00,680 --> 00:01:04,489
photo library, camera and
saved photos album.

21
00:01:04,489 --> 00:01:08,630
So we should choose, enum.

22
00:01:08,630 --> 00:01:12,570
The UIImagePickerControllerSourceType
is indeed an enumeration.

23
00:01:12,570 --> 00:01:13,640
Enums are convenient for

24
00:01:13,640 --> 00:01:17,740
types that can be described as one
property with a finite number of values.

25
00:01:17,740 --> 00:01:19,010
Here's another one.

26
00:01:19,010 --> 00:01:23,080
We need a type for a name object which
holds two strings, a first name and

27
00:01:23,080 --> 00:01:23,690
a last name.

28
00:01:24,790 --> 00:01:27,800
Again, I would choose struct
because we're dealing with few

29
00:01:27,800 --> 00:01:29,610
relatively simple values.

30
00:01:29,610 --> 00:01:33,420
And we're probably going to want every
instance of a name to have its own copy.

31
00:01:33,420 --> 00:01:35,230
Let's go through just a couple more.

32
00:01:35,230 --> 00:01:39,030
Lets say we need a type to represent
a subject in secondary school.

33
00:01:39,030 --> 00:01:42,550
This is a very traditional school at
which there are only four subjects.

34
00:01:42,550 --> 00:01:45,240
Math, English, Spanish and Science.

35
00:01:45,240 --> 00:01:46,650
What would you choose?

36
00:01:46,650 --> 00:01:50,090
For this one again with a finite
number of values an enumeration

37
00:01:50,090 --> 00:01:51,280
would work well.

38
00:01:51,280 --> 00:01:53,960
This last one is a little more complex.

39
00:01:53,960 --> 00:01:56,700
Here we need a type to
represent a student.

40
00:01:56,700 --> 00:02:00,430
It will have a grades property to hold
an array of grades, a name property to

41
00:02:00,430 --> 00:02:04,180
hold a name, a favorite subject
property which holds a subject, and

42
00:02:04,180 --> 00:02:06,960
a computed property to hold
the grade point average.

43
00:02:06,960 --> 00:02:10,090
Additionally there are a few
different types of students.

44
00:02:10,090 --> 00:02:12,670
High school, elementary school,
and middle school.

45
00:02:12,670 --> 00:02:16,800
So we want those subtypes to be able to
inherit from the more generally defined

46
00:02:16,800 --> 00:02:18,200
student type.

47
00:02:18,200 --> 00:02:20,260
So what kind of type should we choose?

48
00:02:20,260 --> 00:02:22,080
For this one, we'll want a class.

49
00:02:22,080 --> 00:02:26,140
Between classes, enums, and structs,
only classes have inheritance.

50
00:02:26,140 --> 00:02:29,090
On top of that, the structure of this
type is a little more complex than

51
00:02:29,090 --> 00:02:30,620
you see in most structs.

52
00:02:30,620 --> 00:02:33,720
A struct could hold the data,
but it would be unusual.

53
00:02:33,720 --> 00:02:36,860
That ought to give you a good
start on structs and enumerations.

54
00:02:36,860 --> 00:02:40,410
Be sure of complete the exercises to
deepen your understanding of value types

55
00:02:40,410 --> 00:02:43,500
and reference types, and for more
practice choosing the right type for

56
00:02:43,500 --> 00:02:44,670
your needs.

57
00:02:44,670 --> 00:02:48,510
Stay tuned to learn about how to expand
and customize the functionality of

58
00:02:48,510 --> 00:02:51,147
all of these type's with protocols and
extensions.
