1
00:00:00,000 --> 00:00:03,293
So for this problem imagine you’re a criminal,

2
00:00:03,293 --> 00:00:06,552
specifically a bank robber. And from the bank

3
00:00:06,552 --> 00:00:11,533
you stole three things, a statue, a mask, and

4
00:00:11,533 --> 00:00:13,868
an erne. And I should probably got pictures to

5
00:00:13,868 --> 00:00:17,409
help you visualize this scenario. So now I’ve

6
00:00:17,409 --> 00:00:19,869
added pictures. Believe me you have no idea

7
00:00:19,869 --> 00:00:21,958
how long it took indiscernible and to make

8
00:00:21,958 --> 00:00:25,119
any scenario more realistic we’re going to add

9
00:00:25,119 --> 00:00:28,674
of course monetary and physical attributes to

10
00:00:28,674 --> 00:00:31,408
each of these items. And you want to steal

11
00:00:31,408 --> 00:00:38,087
weighs 15 kilograms and costs $30,000 and

12
00:00:38,087 --> 00:00:42,788
the scary mask weighs 9 kilograms and is worth

13
00:00:42,788 --> 00:00:48,155
$16,000 and lastly we have the erne. The erne

14
00:00:48,155 --> 00:00:53,994
weighs 8 kilograms and costs $15,000. So now

15
00:00:53,994 --> 00:00:56,875
I present to you a question. You didn’t go

16
00:00:56,875 --> 00:00:59,772
to the Jim enough and you can only carry

17
00:00:59,772 --> 00:01:03,736
20 kilograms. So how would you solve this?

18
00:01:03,736 --> 00:01:07,088
One thing you might do, if you’re in a hurry and

19
00:01:07,088 --> 00:01:09,495
you’re about to be chased down by the police

20
00:01:09,495 --> 00:01:14,046
is take the one that weighs the least and try to

21
00:01:14,046 --> 00:01:16,924
get as many things as possible, hoping that you

22
00:01:16,924 --> 00:01:18,646
will make enough money from indiscernible

23
00:01:18,646 --> 00:01:23,210
Another opportunity might be to take the one that

24
00:01:23,210 --> 00:01:26,210
is worth the most, kind of ignoring what it weighs

25
00:01:26,210 --> 00:01:30,598
. Another choice would be to calculate the ratio

26
00:01:30,598 --> 00:01:34,049
between the weight and how much its worth.

27
00:01:34,049 --> 00:01:36,759
That way you chose items as long as you can carry

28
00:01:36,759 --> 00:01:42,084
them based on the cost per kilogram basically, the

29
00:01:42,084 --> 00:01:44,364
amount of money you’re making per weight.

30
00:01:44,364 --> 00:01:46,816
It turns out all three of those solution just

31
00:01:46,816 --> 00:01:49,285
don’t work for this problem. The last one

32
00:01:49,285 --> 00:01:52,150
will work, if you can take say half an erne

33
00:01:52,150 --> 00:01:54,361
, but for this you don’t really want to take

34
00:01:54,361 --> 00:01:57,646
half the erne. It’s worth nothing, unless it’s

35
00:01:57,646 --> 00:01:59,444
sold together and same for the mask and statue

36
00:01:59,444 --> 00:02:01,592
. So, you want to choose specifically which

37
00:02:01,592 --> 00:02:04,388
items to take. So taking the statue along

38
00:02:04,388 --> 00:02:07,084
doesn’t work. And it turns out the correct

39
00:02:07,084 --> 00:02:10,160
answer is to take the mask and the erne.

40
00:02:10,160 --> 00:02:12,209
So this is a surprisingly common problem in

41
00:02:12,209 --> 00:02:15,696
computer science and I suppose if you’re in

42
00:02:15,696 --> 00:02:17,880
a life of crime, it comes up often too. In

43
00:02:17,880 --> 00:02:20,325
computer science and economics this comes up

44
00:02:20,325 --> 00:02:22,909
when dealing with kind of resource obligation

45
00:02:22,909 --> 00:02:25,225
and making choices about which items to chose

46
00:02:25,225 --> 00:02:28,125
based on how much a cost function and how

47
00:02:28,125 --> 00:02:30,648
much they’re worth to you. So this is tricky to

48
00:02:30,648 --> 00:02:33,081
do quickly. And so when I’m going to ask you

49
00:02:33,081 --> 00:02:34,685
to do it, I mean, you can numerate all the

50
00:02:34,685 --> 00:02:38,016
possibilities, but that doesn’t really scale

51
00:02:38,016 --> 00:02:40,977
once you get to say, I don’t know, 15, 20

52
00:02:40,977 --> 00:02:44,099
items. So we’re going to ask you to do is to

53
00:02:44,099 --> 00:02:46,281
write two functions that will help us to check

54
00:02:46,281 --> 00:02:48,820
whether given solution is correct.

55
00:02:48,820 --> 00:02:51,069
The first answer we’re going to write is called

56
00:02:51,069 --> 00:02:54,002
heist valid. And this is going to return true or

57
00:02:54,002 --> 00:02:57,686
false on whether or not the items you’re stealing

58
00:02:57,686 --> 00:03:00,139
is a valid thing to take away. We’re going to

59
00:03:00,139 --> 00:03:02,611
ask if everything you’re trying to steal is less

60
00:03:02,611 --> 00:03:05,775
than the total weight that you can carry and

61
00:03:05,775 --> 00:03:08,529
never going to think about heist total, which

62
00:03:08,529 --> 00:03:11,698
given a list of things you’re going to steal

63
00:03:11,698 --> 00:03:15,287
returns how much all those items are worth

64
00:03:15,287 --> 00:03:18,037
. So heist valid for the mask and the erne,

65
00:03:18,037 --> 00:03:21,001
that’s the correct answer. Nine plus eight

66
00:03:21,001 --> 00:03:23,004
is less than 20, so we’re going to return true

67
00:03:23,004 --> 00:03:26,404
. And the heist total we’re going to add 16 or 15

68
00:03:26,404 --> 00:03:29,952
in return to that total, pretty straightforward.

69
00:03:29,952 --> 00:03:32,251
But we’re going to make it a little bit more

70
00:03:32,251 --> 00:03:34,818
tricky since we know how skilled you’re

71
00:03:34,818 --> 00:03:39,483
and require you to get off a one line solution

72
00:03:39,483 --> 00:03:42,376
. Hence this doesn’t really come off, up often

73
00:03:42,376 --> 00:03:45,016
when you’re in the real world programming

74
00:03:45,016 --> 00:03:47,683
, but we’re enforcing it here so that we

75
00:03:47,683 --> 00:03:49,646
encourage you to use these comprehensions

76
00:03:49,646 --> 00:03:51,799
and kind of think out of out of type the box

77
00:03:51,799 --> 00:03:55,064
. So what are inputs? We’re going to take in

78
00:03:55,064 --> 00:03:58,243
three things. A dictionary that essentially

79
00:03:58,243 --> 00:04:00,028
catalogues all the things that we’re able to

80
00:04:00,028 --> 00:04:03,786
steal. Each key in a dictionary is the name

81
00:04:03,786 --> 00:04:07,177
of the item that we can steal. And the value

82
00:04:07,177 --> 00:04:12,326
is a tuple where the first entry in the tuple

83
00:04:12,326 --> 00:04:15,060
is the weight of the item in kilograms and

84
00:04:15,060 --> 00:04:17,926
the second entry is the monetary value of

85
00:04:17,926 --> 00:04:20,713
the tuple in dollars. Although the units here

86
00:04:20,713 --> 00:04:23,077
don’t really matter as far as we’re consistent

87
00:04:23,077 --> 00:04:26,171
. We also have a limit to what we can carry

88
00:04:26,171 --> 00:04:29,146
. And lastly we have a list of strings

89
00:04:29,146 --> 00:04:33,086
corresponding to the heist here of what we’ve taken.

90
00:04:33,086 --> 00:04:36,528
So let’s do the first function. Since its

91
00:04:36,528 --> 00:04:38,838
we have to return something,

92
00:04:38,838 --> 00:04:41,308
its probably going to start with a return keyword

93
00:04:41,308 --> 00:04:43,278
. So what we’re going to do in this one line is

94
00:04:43,278 --> 00:04:46,006
add up the weight for each item that we’ve

95
00:04:46,006 --> 00:04:49,058
taken and see if its less than the limit. And

96
00:04:49,058 --> 00:04:51,428
because python is so awesome, this is pretty

97
00:04:51,428 --> 00:04:55,180
easy. So we’re going to take the sum of a

98
00:04:55,180 --> 00:04:58,439
list comprehension that generates a list of the

99
00:04:58,439 --> 00:05:01,861
weight of each item that we’ve taken. This is

100
00:05:01,861 --> 00:05:03,587
going to be the name of the item and that’s how

101
00:05:03,587 --> 00:05:06,451
we’re going to get the tuple out of the dictionary

102
00:05:06,451 --> 00:05:08,923
and we just care about the first item and

103
00:05:08,923 --> 00:05:10,772
that dictionary in for takings.

104
00:05:10,772 --> 00:05:12,988
So we’re going to go through each string and the

105
00:05:12,988 --> 00:05:17,612
taken list, look up the value in the dictionary

106
00:05:17,612 --> 00:05:21,338
corresponding to that item and take the first

107
00:05:21,338 --> 00:05:23,443
element in the tuple, which is the weight and

108
00:05:23,443 --> 00:05:25,013
we’re going to return that in our list. So when

109
00:05:25,013 --> 00:05:27,410
take the sum of that and we’re simply going

110
00:05:27,410 --> 00:05:30,897
to check, if it’s less than or equal to the

111
00:05:30,897 --> 00:05:34,523
limit. That’s a one line solution. Hurray!

112
00:05:34,523 --> 00:05:37,290
The next problem is going to have a very similar

113
00:05:37,290 --> 00:05:41,359
answer. In this case, we’re going to go through

114
00:05:41,359 --> 00:05:45,842
each item and take in get the tuple out of the

115
00:05:45,842 --> 00:05:49,342
available dictionary for that item and simply

116
00:05:49,342 --> 00:05:53,762
sum up the cost. Here is the key difference.

117
00:05:53,762 --> 00:05:57,890
So this list comprehension returns a list of all

118
00:05:57,890 --> 00:06:01,141
key values of each item and we’re going to

119
00:06:01,141 --> 00:06:03,638
take the sum of return. Those are

120
00:06:03,638 --> 00:06:07,638
one line solutions to each of those functions.
