1
00:00:00,150 --> 00:00:03,540
For this module you're going to want
to open up the playground file in title

2
00:00:03,540 --> 00:00:05,780
Lesson2_Optional.

3
00:00:05,780 --> 00:00:09,173
Here's an example of what I mean
when I say nil is disallowed in most

4
00:00:09,173 --> 00:00:10,400
Swift types.

5
00:00:10,400 --> 00:00:12,640
If I declare an int variable x and

6
00:00:12,640 --> 00:00:16,720
try to assign it a nil value,
I get the following error message.

7
00:00:16,720 --> 00:00:20,790
Cannot assign a value of type
nil to a value of type int.

8
00:00:20,790 --> 00:00:24,880
Ints can't store nil values and neither
can any of the other primitive types.

9
00:00:24,880 --> 00:00:26,810
This isn't all that surprising.

10
00:00:26,810 --> 00:00:31,460
It's more surprising to see that object
references can't store nil values.

11
00:00:31,460 --> 00:00:33,920
Here's a reference to a UI color object.

12
00:00:33,920 --> 00:00:38,620
It can store a UI color,
UIcolor.redcolor, but not nil.

13
00:00:38,620 --> 00:00:39,990
That's unusual.

14
00:00:39,990 --> 00:00:44,924
This isn't true in Java, C++,
Ruby, Python, C#, Objective C,

15
00:00:44,924 --> 00:00:50,510
they all have nil or null or some
special value that stands in for null.

16
00:00:50,510 --> 00:00:53,980
Notice that even if we change
the variable c to be an object of type

17
00:00:53,980 --> 00:00:55,100
any object.

18
00:00:55,100 --> 00:00:55,867
The data type for

19
00:00:55,867 --> 00:01:00,250
a general object reference, we can
see that it still can't store nil.

20
00:01:01,420 --> 00:01:03,530
In a way this is cool.

21
00:01:03,530 --> 00:01:06,920
This means null pointer
exceptions are impossible.

22
00:01:06,920 --> 00:01:11,200
But what about situations for
which we need nil values?

23
00:01:11,200 --> 00:01:12,450
Let's think.

24
00:01:12,450 --> 00:01:15,480
Under what conditions would
a value need to be no?

25
00:01:15,480 --> 00:01:18,240
Let's explore the two
most common scenarios.

26
00:01:18,240 --> 00:01:21,350
The first has to do with
values returned from methods.

27
00:01:21,350 --> 00:01:24,378
There are some cases in which
it wouldn't make sense for

28
00:01:24,378 --> 00:01:25,865
a method to return a value.

29
00:01:25,865 --> 00:01:28,470
A good example is this init method.

30
00:01:28,470 --> 00:01:31,740
This method is used to
initialize an int from a string.

31
00:01:31,740 --> 00:01:34,860
But not all strings can
be converted to ints.

32
00:01:34,860 --> 00:01:38,660
What should happen when s2
is converted to an int?

33
00:01:38,660 --> 00:01:41,380
It definitely can't
return an integer value.

34
00:01:41,380 --> 00:01:45,150
But throwing a fatal error isn't
a much better alternative.

35
00:01:45,150 --> 00:01:47,590
We can see that the compiler agrees.

36
00:01:47,590 --> 00:01:49,560
Something is wrong here.

37
00:01:49,560 --> 00:01:52,310
It's important that a method
like this int initializer

38
00:01:52,310 --> 00:01:56,290
can return something that
represents no value or none.

39
00:01:56,290 --> 00:01:59,300
Declaring y as a type Int isn't enough.

40
00:01:59,300 --> 00:02:04,460
We need a type that has two options,
either an Int value or no value.

41
00:02:04,460 --> 00:02:07,470
We can't pretend that
nil values don't exist.

42
00:02:07,470 --> 00:02:09,340
Another common scenario that we'll see,

43
00:02:09,340 --> 00:02:14,050
especially when working with UIKit,
has to do with properties of instances.

44
00:02:14,050 --> 00:02:17,610
Often classes of properties
that can't be initialized until

45
00:02:17,610 --> 00:02:19,970
after an instance is constructed.

46
00:02:19,970 --> 00:02:22,130
Consider the simple ViewController.

47
00:02:22,130 --> 00:02:25,710
Notice that the compiler won't allow
me to add this button property.

48
00:02:25,710 --> 00:02:27,310
Why is that?

49
00:02:27,310 --> 00:02:30,860
The problem is that the button
is a regular Swift variable, and

50
00:02:30,860 --> 00:02:33,270
Swift variables can't store nil values.

51
00:02:34,510 --> 00:02:39,590
So what value should this button member
store when a view controller is created?

52
00:02:39,590 --> 00:02:41,950
Just like the method
return types before,

53
00:02:41,950 --> 00:02:44,049
in this situation we need options.

54
00:02:45,140 --> 00:02:48,560
We often need to instantiate
a ViewController first, and

55
00:02:48,560 --> 00:02:50,940
then initialize its properties later.

56
00:02:50,940 --> 00:02:53,290
This is especially true when
we're using storyboard.

57
00:02:54,310 --> 00:02:55,560
Swift needs a way for

58
00:02:55,560 --> 00:02:59,280
this button variable to either
have a button value or to be nil.
