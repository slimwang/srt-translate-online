1
00:00:00,440 --> 00:00:02,870
Holy wow, that's a lot of fish.

2
00:00:02,870 --> 00:00:06,240
Fortunately, we've got a lot
of animals that eat fish.

3
00:00:06,240 --> 00:00:09,010
We talked about that
briefly in lesson one, but

4
00:00:09,010 --> 00:00:11,580
now we can put together
an actual query to find them.

5
00:00:11,580 --> 00:00:14,670
See if we can put it together
without looking back there.

6
00:00:14,670 --> 00:00:18,070
Trouble is, the animals table tells
us nothing about what each individual

7
00:00:18,070 --> 00:00:22,360
animal eats, and the diet table
doesn't list any individual animals.

8
00:00:22,360 --> 00:00:24,120
It only lists their species.

9
00:00:24,120 --> 00:00:25,260
Wait a minute though.

10
00:00:25,260 --> 00:00:28,000
That species column is
in both of those tables.

11
00:00:28,000 --> 00:00:30,920
That means it must be join time.

12
00:00:30,920 --> 00:00:32,630
So, if we join animals against diet,

13
00:00:32,630 --> 00:00:34,480
we should be to get the answer
that we're looking for.

14
00:00:35,490 --> 00:00:39,090
Now, we saw one syntax for
joins in lesson one, but

15
00:00:39,090 --> 00:00:42,150
it turns out there's also
a shortcut syntax we can use here.

16
00:00:42,150 --> 00:00:46,390
The shortcut syntax won't actually use
the word join when it lists the joined

17
00:00:46,390 --> 00:00:50,670
tables, but this form is actually
probably more common in real code.

18
00:00:50,670 --> 00:00:55,720
If we want to join two tables to match
up rows where the column target in

19
00:00:55,720 --> 00:01:01,750
table T equals the column match in
table S, we can do it like this.

20
00:01:01,750 --> 00:01:04,910
So on the next page,
write a query to answer this problem.

21
00:01:06,070 --> 00:01:08,950
You can use either kind of join,
but your query should only

22
00:01:08,950 --> 00:01:13,130
return the name column,
not the species or the word fish itself.
