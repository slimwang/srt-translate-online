1
00:00:00,000 --> 00:00:02,000
So let's go through them 1 by 1.

2
00:00:02,000 --> 00:00:05,630
Finding a polynomial-time algorithm for an NP-compete problem, yes.

3
00:00:05,630 --> 00:00:09,240
That would show that P=NP because the problem is NP-complete.

4
00:00:09,240 --> 00:00:12,280
So it means it's among the hardest-to-solve problems in NP.

5
00:00:12,280 --> 00:00:15,550
So polynomial-time algorithm for this problem will solve

6
00:00:15,550 --> 00:00:19,580
any other NP-complete problem in polynomial time as well.

7
00:00:19,580 --> 00:00:22,060
Finding an algorithm that solves an NP-complete problem

8
00:00:22,060 --> 00:00:24,180
in polynomial time on average.

9
00:00:24,180 --> 00:00:26,740
Now, that's a very interesting one, because you might be inclined to think,

10
00:00:26,740 --> 00:00:29,570
"Well, if it solves an NP-complete problem

11
00:00:29,570 --> 00:00:33,190
in polynomial time on average, then probably that is sufficient."

12
00:00:33,190 --> 00:00:35,960
Well, it shows a lot of interesting things, but it doesn't show anything

13
00:00:35,960 --> 00:00:40,860
with respect to P being = to NP, or P being ≠ to NP.

14
00:00:40,860 --> 00:00:45,800
Now, showing that the most efficient algorithm for clique requires exponential time,

15
00:00:45,800 --> 00:00:48,900
that would show that P≠NP.

16
00:00:48,900 --> 00:00:53,850
Because clique is contained in NP, so if it requires exponential time,

17
00:00:53,850 --> 00:01:01,360
it means that there's at least 1 problem, namely clique, that is contained in NP but not in P.

18
00:01:01,360 --> 00:01:03,610
Of course, as nice as it would be to show this, of course,

19
00:01:03,610 --> 00:01:07,820
it would also be quite difficult to prove this because you would have to show that,

20
00:01:07,820 --> 00:01:10,570
again, no matter what algorithm you come up with,

21
00:01:10,570 --> 00:01:13,060
it always requires exponential time.

22
00:01:13,060 --> 00:01:17,070
That would be hard to do because you would have to consider any algorithm,

23
00:01:17,070 --> 00:01:20,290
even algorithms that haven't been invented yet, so to say.

24
00:01:20,290 --> 00:01:25,320
Now, showing that vertex cover has an exponential number of potential solutions,

25
00:01:25,320 --> 00:01:29,090
that is similar to the example I pointed out to you in the beginning of this unit,

26
00:01:29,090 --> 00:01:32,370
namely, that just having an exponential number of potential solutions

27
00:01:32,370 --> 00:01:35,230
does not mean that the problem is hard.

28
00:01:35,230 --> 00:01:37,810
It can mean that the problem is hard, but as you've seen

29
00:01:37,810 --> 00:01:41,100
in the case of shortest path, it's not necessarily so.

30
00:01:41,100 --> 00:01:45,630
Now, reducing clique to shortest path versus reducing shortest path to clique,

31
00:01:45,630 --> 00:01:48,460
then you have to remember again what reduction means.

32
00:01:48,460 --> 00:01:55,560
So if you reduce clique to shortest path, it means that solving the shortest path problem

33
00:01:55,560 --> 00:01:58,910
is also capable of also solving the clique problem.

34
00:01:58,910 --> 00:02:02,710
And since shortest path is solvable in polynomial time,

35
00:02:02,710 --> 00:02:05,040
if you manage to reduce clique to shortest path,

36
00:02:05,040 --> 00:02:07,530
that would show that P=NP.

37
00:02:07,530 --> 00:02:12,050
If, on the other hand, you manage to reduce shortest path to clique,

38
00:02:12,050 --> 00:02:14,460
that doesn't really have any implications

39
00:02:14,460 --> 00:02:19,390
because all you've shown is that shortest path is an easier problem than clique,

40
00:02:19,390 --> 00:02:21,760
which is something we already know.

41
00:02:21,760 --> 00:02:24,530
Now if you look at all of these solutions, well, of course, it's a bit of

42
00:02:24,530 --> 00:02:27,310
a subjective selection here, but what you'll see,

43
00:02:27,310 --> 00:02:31,560
that showing that P=NP in a way would be quite easy.

44
00:02:31,560 --> 00:02:36,740
All you have to do is find 1 single polynomial-time algorithm for an NP-complete problem.

45
00:02:36,740 --> 00:02:39,850
Then you have immediately shown that P=NP.

46
00:02:39,850 --> 00:02:44,900
On the other hand, if you want to show that P≠NP, then you have to put in a lot of work,

47
00:02:44,900 --> 00:02:48,390
because you have to consider any possible algorithm,

48
00:02:48,390 --> 00:02:52,000
no matter how complex, how intelligent, how sophisticated,

49
00:02:52,000 --> 00:02:55,680
and still somehow make the case that this algorithm is not able

50
00:02:55,680 --> 99:59:59,999
to solve a problem like clique in polynomial time.
