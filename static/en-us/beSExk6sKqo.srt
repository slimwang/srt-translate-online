1
00:00:00,513 --> 00:00:03,935
So this Pavlov idea actually is more general than just the prisoner's

2
00:00:03,935 --> 00:00:08,243
dilemma or iterated prisoner's dilemma. And in fact, led to a result that

3
00:00:08,243 --> 00:00:11,860
I like to call the computational folk theorem. The idea of the

4
00:00:11,860 --> 00:00:16,640
computational folk theorem says that you give me any two player, bimatrix game.

5
00:00:16,640 --> 00:00:18,070
>> What's a bimatrix game?

6
00:00:19,670 --> 00:00:21,360
>> Just that there's two players. [LAUGH]

7
00:00:21,360 --> 00:00:23,422
>> Okay. [LAUGH]

8
00:00:23,422 --> 00:00:26,006
>> So it seems kind of redundant, doesn't

9
00:00:26,006 --> 00:00:26,340
it?

10
00:00:26,340 --> 00:00:26,840
>> It does.

11
00:00:28,060 --> 00:00:29,610
>> What makes it bimatrix as opposed to

12
00:00:29,610 --> 00:00:31,090
two player zero sum game which you can

13
00:00:31,090 --> 00:00:32,530
write down with a single matrix, this is

14
00:00:32,530 --> 00:00:34,930
like, each, each player has its own reward matrix.

15
00:00:34,930 --> 00:00:37,287
>> I see.

16
00:00:37,287 --> 00:00:38,673
>> But you're right, I should have, I could've just said bimatrix game and

17
00:00:38,673 --> 00:00:39,696
left out the two player. And it's

18
00:00:39,696 --> 00:00:42,840
an average reward repeated game. So we're going to

19
00:00:42,840 --> 00:00:45,210
play. Rip, Round after round after round.

20
00:00:45,210 --> 00:00:47,010
And we're going to look at the average reward.

21
00:00:47,010 --> 00:00:47,800
Or, you can also think of it

22
00:00:47,800 --> 00:00:49,950
as discounted with an extremely high discount factor.

23
00:00:49,950 --> 00:00:50,620
>> Okay.

24
00:00:50,620 --> 00:00:51,440
>> So

25
00:00:51,440 --> 00:00:53,050
you give me one of those games. And what I

26
00:00:53,050 --> 00:00:57,190
can do is, I can build a Pavlov-like machine for, the,

27
00:00:57,190 --> 00:01:01,046
for any of these games. And use that to construct a

28
00:01:01,046 --> 00:01:04,489
subgame-perfect Nash equilibrium, for any of these games, in polynomial time.

29
00:01:04,489 --> 00:01:05,882
>> Wow.

30
00:01:05,882 --> 00:01:09,250
>> And, so the way that this works is if it is possible for us

31
00:01:09,250 --> 00:01:12,590
to have some kind of mutually beneficial relationship,

32
00:01:12,590 --> 00:01:16,586
then I can build a Pavlov-like machine. Quickly.

33
00:01:16,586 --> 00:01:18,878
If not, the game is actually zero sum like, right? because

34
00:01:18,878 --> 00:01:21,275
in a zero sum game we can't mutually benefit, so we cant

35
00:01:21,275 --> 00:01:24,920
do anything like Pavlov we're just going to beat each other up. So

36
00:01:24,920 --> 00:01:29,145
we can actually solve, linear program in polynomial time, and work out

37
00:01:29,145 --> 00:01:32,330
what the strategies would be if we we're playing a zero sum

38
00:01:32,330 --> 00:01:34,914
like game. And so either that works, and produces a Nash equilibrium,

39
00:01:34,914 --> 00:01:37,528
and we can test that. Or it doesn't work, but at most

40
00:01:37,528 --> 00:01:42,210
one player can improve its behavior. And by taking that best response

41
00:01:42,210 --> 00:01:46,040
against what the other player does in a zero-sum like sense,

42
00:01:46,040 --> 00:01:49,610
then that will be a Nash equilibrium. So there's three possible forms

43
00:01:49,610 --> 00:01:52,050
of the Nash equilibrium. But, we can tick through these, figure out

44
00:01:52,050 --> 00:01:55,740
which one is right and drive the actual strategies in polynomial time.

45
00:01:55,740 --> 00:01:58,070
>> Wow, that's pretty impressive, who came up with this idea?

46
00:01:58,070 --> 00:02:04,510
>> So this is a result due to Peter Stone and somebody, Oh yeah me.

47
00:02:04,510 --> 00:02:06,780
>> Oh, well that's very impressive,

48
00:02:06,780 --> 00:02:10,235
so you managed to find a way to sneak in some of your own work into this class?

49
00:02:10,235 --> 00:02:11,430
>> Here, let's do some more of that.

50
00:02:11,430 --> 00:02:14,640
>> Okay, I'm a big fan. And I think that's

51
00:02:14,640 --> 00:02:17,760
fair because I did that way back when on mimic.

52
00:02:17,760 --> 00:02:22,350
>> Mimic. So, yeah, so what the last topic that, this is,

53
00:02:22,350 --> 00:02:25,280
that's all I really wanted to say about the Folk theorem and repeated

54
00:02:25,280 --> 00:02:28,220
games. What I'd like to do now is move to stochastic games,

55
00:02:28,220 --> 00:02:31,940
which is a generalization of repeating games. And, talk a little bit about

56
00:02:31,940 --> 00:02:35,210
how this relates Back to things like queue learning and MDPs.

57
00:02:35,210 --> 00:02:38,320
>> Oh, okay. That sounds cool, almost sounds like you're wrapping up.

58
00:02:38,320 --> 00:02:41,400
>> It is, that. And that will be the end of, end of the new material.

59
00:02:41,400 --> 00:02:44,590
>> Wow. Well that means we're coming towards the end of the entire course.

60
00:02:44,590 --> 00:02:47,520
>> I know. We're going to all cry with, disappointment.

61
00:02:47,520 --> 00:02:49,736
And I think. And, and I just say this,

62
00:02:49,736 --> 00:02:51,560
you know, as a, as an idle suggestion, that

63
00:02:51,560 --> 00:02:53,920
the students should demand that we teach more classes.

64
00:02:53,920 --> 00:02:56,570
>> I concur. So let's get there so that they can demand.

65
00:02:56,570 --> 00:02:57,792
>> [LAUGH]
