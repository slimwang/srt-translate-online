1
00:00:00,750 --> 00:00:04,230
I want you to pay attention to how this
native button element reacts when it

2
00:00:04,230 --> 00:00:07,120
receives input from different devices.

3
00:00:07,120 --> 00:00:10,670
When I go and click on it with a mouse,
you'll notice that I don't see a focus

4
00:00:10,670 --> 00:00:15,560
ring, but when I press the tab key,
I do see a focus ring.

5
00:00:15,560 --> 00:00:20,440
Now let's check out a custom button
that I've created using a focus style.

6
00:00:20,440 --> 00:00:23,420
Notice that when I go and
click on the button with a mouse,

7
00:00:23,420 --> 00:00:29,230
both the focus style and the focus ring
are applied, and they stick around.

8
00:00:29,230 --> 00:00:30,340
So what's going on here?

9
00:00:30,340 --> 00:00:33,530
Why does my custom button not
work like the native button?

10
00:00:34,680 --> 00:00:36,290
Well for native elements like button,

11
00:00:36,290 --> 00:00:40,450
browsers implement special behaviors to
let them differentiate between mouse and

12
00:00:40,450 --> 00:00:45,090
keyboard focus and they only display
the focus ring for keyboard focus.

13
00:00:45,090 --> 00:00:47,960
The thinking being that mouse
users are less likely to need

14
00:00:47,960 --> 00:00:49,920
the focus ring since they know
what they just clicked on.

15
00:00:49,920 --> 00:00:52,750
Now unfortunately that same trick does

16
00:00:52,750 --> 00:00:56,640
not apply to custom controls
you create yourself.

17
00:00:56,640 --> 00:01:00,540
Because I've added a tab index to this
element, it means that regardless of how

18
00:01:00,540 --> 00:01:03,760
it gained focus,
that ring will always be displayed.

19
00:01:03,760 --> 00:01:06,530
And because I've used a focused
pseudo class style on it,

20
00:01:06,530 --> 00:01:08,720
that style will also be displayed,

21
00:01:08,720 --> 00:01:11,919
regardless of whether this gained
focused through a keyboard or a mouse.

22
00:01:13,130 --> 00:01:15,490
Now, I should point out that as
of the time of this recording,

23
00:01:15,490 --> 00:01:18,730
this behavior I'm describing varies
by the different browsers, so

24
00:01:18,730 --> 00:01:22,220
it's not even consistent when and
where you'll see focused rings and

25
00:01:22,220 --> 00:01:25,550
focused dials once you start
applying them in your application.

26
00:01:25,550 --> 00:01:28,670
So this is actually pretty
frustrating for web developers.

27
00:01:28,670 --> 00:01:31,910
Unfortunately, there isn't
currently any single cross-browser

28
00:01:31,910 --> 00:01:36,270
solution that will let us differentiate
between mouse and keyboard focus.

29
00:01:36,270 --> 00:01:37,090
In Firefox,

30
00:01:37,090 --> 00:01:41,000
the moz-focusring CSS pseudoclass does
allow you to write a focus style that

31
00:01:41,000 --> 00:01:44,480
will only be applied if the element
is focused via the keyboard.

32
00:01:44,480 --> 00:01:47,230
So for instance, I can go in and click
on this custom button and I won't see

33
00:01:47,230 --> 00:01:51,050
anything, but when I press tab, I see
the focus states that I would expect.

34
00:01:52,120 --> 00:01:55,240
Now while the pseudoclass is
currently only supported in Firefox,

35
00:01:55,240 --> 00:01:59,380
there is currently work going on to
add it to other browsers, like Chrome.

36
00:01:59,380 --> 00:02:00,960
So who knows,
by the time you're watching this,

37
00:02:00,960 --> 00:02:04,970
maybe it will have shipped and this will
be a much easier problem to work around.

38
00:02:06,260 --> 00:02:09,930
Similarly, Alice and Brian Kardell have
written a great article exploring this

39
00:02:09,930 --> 00:02:13,810
topic in more detail, and their article
also contains a JavaScript shim for

40
00:02:13,810 --> 00:02:17,140
differentiating between mouse and
keyboard input.

41
00:02:17,140 --> 00:02:21,230
You can use this shim today in your
applications to split things up, and

42
00:02:21,230 --> 00:02:25,150
in the future roll in the focus
ring pseudoclass when it has

43
00:02:25,150 --> 00:02:27,210
more widespread browser support.
