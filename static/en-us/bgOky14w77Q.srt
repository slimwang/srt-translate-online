1
00:00:00,180 --> 00:00:01,270
OK, so we just looked at a way of

2
00:00:01,270 --> 00:00:04,660
modifying a document using the save method. Now let's

3
00:00:04,660 --> 00:00:07,040
look at an alternative way of updating documents. What

4
00:00:07,040 --> 00:00:09,870
I want to introduce you to here, are two things.

5
00:00:09,870 --> 00:00:13,520
One, the update command or method in pymongo it's

6
00:00:13,520 --> 00:00:18,020
a method on collection objects. And the set operator. Let's

7
00:00:18,020 --> 00:00:22,170
talk about update first. Update expects a query document

8
00:00:22,170 --> 00:00:25,480
as its first parameter, and then as its second parameter,

9
00:00:25,480 --> 00:00:27,760
it expects an update document. And that

10
00:00:27,760 --> 00:00:32,590
update document specifies what operations MongoDB should perform

11
00:00:32,590 --> 00:00:35,560
on the document matching this query. Now,

12
00:00:35,560 --> 00:00:39,270
by default, update operates on just one document.

13
00:00:39,270 --> 00:00:44,430
The first one it finds matching the query document. The semantics of set are, if

14
00:00:44,430 --> 00:00:47,270
this document does not already contain the

15
00:00:47,270 --> 00:00:51,260
fields specified here, then what should happen is

16
00:00:51,260 --> 00:00:54,430
that field should be added with this value.

17
00:00:54,430 --> 00:00:57,530
If the document already contains this field, then that

18
00:00:57,530 --> 00:01:00,440
field will be updated to the value supplied.

19
00:01:00,440 --> 00:01:03,120
Okay, now before I run this code, what I'd

20
00:01:03,120 --> 00:01:05,239
like to do is introduce you to the

21
00:01:05,239 --> 00:01:10,250
inverse operator for set, which is unset. Okay, so

22
00:01:10,250 --> 00:01:12,620
these two pieces of code are almost exactly

23
00:01:12,620 --> 00:01:16,630
the same. The only differences are here and here.

24
00:01:16,630 --> 00:01:19,500
The semantics of unset are, for whatever document matches

25
00:01:19,500 --> 00:01:22,580
this query, if it has the field specified here,

26
00:01:22,580 --> 00:01:26,160
remove it. This value is ignored. Now, if this

27
00:01:26,160 --> 00:01:29,480
document does not already have this field, then this

28
00:01:29,480 --> 00:01:32,834
call has no effect. Okay, so now we've looked

29
00:01:32,834 --> 00:01:35,154
at the set operator and the unset operator, and

30
00:01:35,154 --> 00:01:38,850
their use with the update command. Now, let's go

31
00:01:38,850 --> 00:01:41,740
and run these two programs. And see what their

32
00:01:41,740 --> 00:01:45,390
effect is. But first, I want to query for this

33
00:01:45,390 --> 00:01:49,140
document in the Mongo shell to look at its current state,

34
00:01:49,140 --> 00:01:51,660
and then we can see how running those two programs changes

35
00:01:51,660 --> 00:01:55,270
its current state. So I'm going to run a find one command

36
00:01:55,270 --> 00:01:58,260
here. Now, this is exactly the same command as we

37
00:01:58,260 --> 00:02:00,960
saw in the Python programs we were looking at. The only

38
00:02:00,960 --> 00:02:04,120
difference is in the name. And the names are different merely

39
00:02:04,120 --> 00:02:07,630
to match the conventions of the two different programming languages represented.

40
00:02:07,630 --> 00:02:10,300
In this case, JavaScript because the language of the

41
00:02:10,300 --> 00:02:13,110
Mongo Shell is JavaScript. And, in the other case,

42
00:02:13,110 --> 00:02:17,580
Python, because we're using the Pymongo driver. Okay? So,

43
00:02:17,580 --> 00:02:19,390
going to issue this query. And, I want to point out

44
00:02:19,390 --> 00:02:22,820
that the Iso Code is in fact present. Now

45
00:02:22,820 --> 00:02:25,830
let's run the unset example and then go back

46
00:02:25,830 --> 00:02:29,210
to the Mongo shell and issue our query again.

47
00:02:29,210 --> 00:02:33,020
Okay? And note that the iso country code has

48
00:02:33,020 --> 00:02:36,710
disappeared because we just ran this command. Okay,

49
00:02:36,710 --> 00:02:40,270
now let's run our set example. And again remember

50
00:02:40,270 --> 00:02:42,910
this simply uses the set operator. Let's do

51
00:02:42,910 --> 00:02:46,140
our query again in the Mongo shell and note

52
00:02:46,140 --> 00:02:48,890
that the iso country code is now in

53
00:02:48,890 --> 00:02:51,220
our document again. Okay, so now we've looked at

54
00:02:51,220 --> 00:02:54,570
two different commands that allow us to modify documents.

55
00:02:54,570 --> 00:02:58,370
The save command, and the update command. And we've

56
00:02:58,370 --> 00:03:01,020
looked at two different operators being used in conjunction

57
00:03:01,020 --> 00:03:04,049
with the update command. Okay, now I feel like it's

58
00:03:04,049 --> 00:03:06,010
necessary before we move on to just give you a

59
00:03:06,010 --> 00:03:08,830
heads up. It's really easy to forget to put an

60
00:03:08,830 --> 00:03:12,140
operator here. Okay? If you issue your command this

61
00:03:12,140 --> 00:03:15,900
way, what's going to happen is this entire document, the

62
00:03:15,900 --> 00:03:19,100
document matching this query, will be replaced so that it

63
00:03:19,100 --> 00:03:23,310
contains the underscore ID field and this field only. So,

64
00:03:23,310 --> 00:03:27,290
essentially, the document will be composed entirely of a

65
00:03:27,290 --> 00:03:31,570
single field. So, always take care to use update correctly.
