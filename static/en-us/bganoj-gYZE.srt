1
00:00:00,012 --> 00:00:03,935
>> Our solution for parsing the atlas definition is pretty straightforward.

2
00:00:03,935 --> 00:00:08,002
First, we're given atlasJSON data that's been loaded from an xhr request. The

3
00:00:08,002 --> 00:00:12,028
first step that we need to do is actually go through and call JSON.parse on

4
00:00:12,028 --> 00:00:15,726
that. This will turn the text JSON data into an actual JavaScript object with

5
00:00:15,726 --> 00:00:19,570
members and values that we can iterate over. We use this to affect here. The

6
00:00:19,570 --> 00:00:23,266
parsed object has a frames dictionary that we'll actually iterate over to load

7
00:00:23,266 --> 00:00:26,896
all of our sprites. We'd like to fetch each key inside of our dictionary. And

8
00:00:26,896 --> 00:00:30,546
then, fetch the associated sprite object that comes with it. From here, we now

9
00:00:30,546 --> 00:00:34,256
have the sprite name and effectively, the sprite values. The next step we take

10
00:00:34,256 --> 00:00:38,220
here is to actually define the center of the image. So, we actually multiply the

11
00:00:38,220 --> 00:00:42,307
width and the height times 0.5, which would give us the half width and half

12
00:00:42,307 --> 00:00:46,371
height. Now, we store this value in the cx and cy as a negative offset. The

13
00:00:46,371 --> 00:00:50,531
reason for this is that we'll use the cx and cy values a little later on, during

14
00:00:50,531 --> 00:00:54,768
rendering, to transform our object into proper space. We store them as negatives

15
00:00:54,768 --> 00:00:58,278
here so that we don't have to do the mathematics later on when we're drawing the

16
00:00:58,278 --> 00:01:01,643
image. Once we've got this data, we go ahead forward and call the defSprite

17
00:01:01,643 --> 00:01:05,060
function, passing in the image name as a key. And then, the frame.x, frame.y

18
00:01:05,060 --> 00:01:07,744
with height and center data that you've already seen before.
