1
00:00:00,270 --> 00:00:02,410
Here's an example of phase one.

2
00:00:02,410 --> 00:00:05,550
Both sides have
a pre-shared secret key and

3
00:00:05,550 --> 00:00:10,310
they use Diffie-Hellman to establish
a new shared key, and they use

4
00:00:10,310 --> 00:00:14,660
the pre-shared key to authenticate
this newly established shared key.

5
00:00:14,660 --> 00:00:15,940
Here's how it works.

6
00:00:15,940 --> 00:00:20,110
First the initiator sends to
the responder the crypto that

7
00:00:20,110 --> 00:00:23,130
it proposes to use,
along with the cookie.

8
00:00:23,130 --> 00:00:26,770
The cookie can be easily
computed by the initiator and

9
00:00:26,770 --> 00:00:29,730
can be easily verified by responder.

10
00:00:29,730 --> 00:00:33,360
For example,
this cookie can be computed as a hash

11
00:00:33,360 --> 00:00:37,800
over the initiator's IP address and
the current time stamp together.

12
00:00:37,800 --> 00:00:42,520
The cookie is used to prove that
the initiator has done some computation,

13
00:00:42,520 --> 00:00:45,370
is serious about following
through the protocol.

14
00:00:45,370 --> 00:00:50,250
In general, cookies are used to mitigate
denial of service attacks where

15
00:00:50,250 --> 00:00:56,050
an initiator can send a lot of requests
to a responder at no, or little, cost.

16
00:00:56,050 --> 00:01:00,360
The responder then sends back its
choice of crypto algorithms and

17
00:01:00,360 --> 00:01:03,150
its own cookie to the initiator.

18
00:01:03,150 --> 00:01:05,519
Second, here YI and

19
00:01:05,519 --> 00:01:10,640
YR are the property components of the
Diffie-Hellman key exchange, and NI and

20
00:01:10,640 --> 00:01:16,280
NR are the Nonce values of
the initiator and the responder.

21
00:01:16,280 --> 00:01:19,540
Third, both the initiator and responder

22
00:01:19,540 --> 00:01:23,550
compute the same shared key according
to Diffie-Hellman key exchange.

23
00:01:23,550 --> 00:01:28,820
And other keys for the IKSA,
fourth they then exchange hash values

24
00:01:28,820 --> 00:01:33,640
to authenticate the newly established
key using their pre-shared secret key.

25
00:01:33,640 --> 00:01:36,440
The hash is computed
using the information

26
00:01:36,440 --> 00:01:39,480
that they have just exchanged
along with the pre-shared key.

27
00:01:39,480 --> 00:01:41,270
We will explain this shortly.
