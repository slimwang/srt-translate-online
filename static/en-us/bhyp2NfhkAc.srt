1
00:00:00,170 --> 00:00:02,440
To deal with this great
device diversity,

2
00:00:02,440 --> 00:00:05,630
devices are roughly grouped
in several categories.

3
00:00:05,630 --> 00:00:08,580
This includes block devices like disks.

4
00:00:08,580 --> 00:00:12,620
These are devices that operate at
granularity of entire blocks of

5
00:00:12,620 --> 00:00:15,850
data that's delivered in and
out of the device and in and

6
00:00:15,850 --> 00:00:18,320
out of the CPU complex in the other end.

7
00:00:18,320 --> 00:00:23,300
A key property is that individual
blocks can be directly accessed.

8
00:00:23,300 --> 00:00:25,940
For instance if you have ten
blocks of data on the disk,

9
00:00:25,940 --> 00:00:28,590
you can request to directly
access the ninth one.

10
00:00:28,590 --> 00:00:30,410
That's what makes it a block device.

11
00:00:30,410 --> 00:00:34,260
Then there are character devices like
keyboards that work with a serial

12
00:00:34,260 --> 00:00:38,096
sequence of characters and support
something like a get-a-character,

13
00:00:38,096 --> 00:00:40,440
put-a-character type of interface.

14
00:00:40,440 --> 00:00:44,015
And then there are network devices that
are somewhat of a special case somewhere

15
00:00:44,015 --> 00:00:44,670
in-between.

16
00:00:44,670 --> 00:00:48,475
Since they deliver more than
a character at a time, but

17
00:00:48,475 --> 00:00:53,050
their granularity is not
necessarily a fixed block size.

18
00:00:53,050 --> 00:00:54,760
It can be more flexible.

19
00:00:54,760 --> 00:00:59,420
So this looks more like a stream of data
chunks of potentially different sizes.

20
00:00:59,420 --> 00:01:04,010
In this manner the interfaces from
the operating system to the devices

21
00:01:04,010 --> 00:01:06,810
are standardized based
on the type of device.

22
00:01:06,810 --> 00:01:10,330
For instance for a block devices,
the driver should support

23
00:01:10,330 --> 00:01:14,500
operations to read/write block of data,
for character devices, a driver should

24
00:01:14,500 --> 00:01:19,040
support operations to put/get
a character from, into the device.

25
00:01:19,040 --> 00:01:21,090
So, in that sense standard.

26
00:01:21,090 --> 00:01:25,450
Internally, the operating system
maintains some representation for

27
00:01:25,450 --> 00:01:28,280
each of the devices that
are available on the platform.

28
00:01:28,280 --> 00:01:31,110
This is typically done by using a file

29
00:01:31,110 --> 00:01:34,280
abstraction to represent
the different devices.

30
00:01:34,280 --> 00:01:39,190
And in that way what really the
operating system achieves is that it can

31
00:01:39,190 --> 00:01:43,970
use any of the other mechanisms that are
already part of the operating system to

32
00:01:43,970 --> 00:01:45,720
otherwise manipulate files.

33
00:01:45,720 --> 00:01:51,490
Too, now think mean to refer to
access different types of devices.

34
00:01:51,490 --> 00:01:56,080
Given ultimately that these files
will correspond to devices and

35
00:01:56,080 --> 00:02:01,940
not real files then things like read and
write operations or actual operations

36
00:02:01,940 --> 00:02:06,730
that manipulate this file will be
handled in some device-specific manner.

37
00:02:06,730 --> 00:02:13,090
On Unix-like systems all devices appear
as files underneath this /dev directory.

38
00:02:13,090 --> 00:02:16,450
As special files, they're also
treated by a special file system.

39
00:02:16,450 --> 00:02:19,850
They're not really stored
on the real file system.

40
00:02:19,850 --> 00:02:22,580
In Linux versions,
these are tmpfs and devfs.
