1
00:00:00,000 --> 00:00:02,000
Okay. Now that we've introduced this input validity problem,

2
00:00:02,000 --> 00:00:06,000
let's work toward a situation, which is going to lead towards a programming problem for you

3
00:00:06,000 --> 00:00:08,000
where you have to solve this kind of problem.

4
00:00:08,000 --> 00:00:11,000
The specific problem that we're going to look at is generating valid credit card numbers.

5
00:00:11,000 --> 00:00:13,000
And so you might ask the question, "Why would we care about generating

6
00:00:13,000 --> 00:00:17,000
valid credit card numbers?" and the assumption here is that you are working on some

7
00:00:17,000 --> 00:00:20,000
software under test whose input domain is valid credit card numbers.

8
00:00:20,000 --> 00:00:24,000
And so your software under test is probably doing something like processing payments

9
00:00:24,000 --> 00:00:28,000
and its output is going to be something like completed transactions.

10
00:00:28,000 --> 00:00:31,000
So now how are you going to test this? Well, one thing you're going to do is collect

11
00:00:31,000 --> 00:00:33,000
some credit cards that you have and that your friends have.

12
00:00:33,000 --> 00:00:36,000
And so you'll have a variety of Mastercard and American Express and other kinds of credit cards.

13
00:00:36,000 --> 00:00:38,000
You're going to run it through your payment processing system

14
00:00:38,000 --> 00:00:40,000
and you're going to see if it works.

15
00:00:40,000 --> 00:00:42,000
After you're finished doing that, the question you have to ask is "Have you shaken

16
00:00:42,000 --> 00:00:44,000
all the bugs out of your code?" and the answer is probably not.

17
00:00:44,000 --> 00:00:47,000
So what we're going to want to do is randomly generate valid credit card numbers

18
00:00:47,000 --> 00:00:49,000
and use that to test the payment processing system.

19
00:00:49,000 --> 00:00:52,000
To get any further here, what we're going to have to do is take a look at

20
00:00:52,000 --> 00:00:55,000
the structure of a credit card number so here's how those work.

21
00:00:55,000 --> 00:01:01,000
So there are some number of digits at the start of a credit card number, so let's say 6,

22
00:01:01,000 --> 00:01:03,000
that constitute the issuer identifier.

23
00:01:03,000 --> 00:01:05,000
What this means is that for example all of the American Express cards

24
00:01:05,000 --> 00:01:08,000
issued by a certain company are going to share an issuer identifier.

25
00:01:08,000 --> 00:01:11,000
The next set of digits, let's say 8 of them, is going to correspond to the account number

26
00:01:11,000 --> 00:01:15,000
for this credit card and then finally at the end is a check digit.

27
00:01:15,000 --> 00:01:19,000
And this is computed algorithmically from the preceding numbers, and the function of the check

28
00:01:19,000 --> 00:01:22,000
digit is to serve as a validity check for a credit card number.

29
00:01:22,000 --> 00:01:27,000
So if I'm entering my credit card into a website or if I'm swiping my credit card

30
00:01:27,000 --> 00:01:31,000
and the magnetic strip has gotten corrupted it's fairly likely that if any of these digits are wrong

31
00:01:31,000 --> 00:01:35,000
the check digit is going to catch it and the credit card number can be rejected rapidly

32
00:01:35,000 --> 00:01:38,000
and algorithmically other than actually having to submit this thing to somebody who can process

33
00:01:38,000 --> 00:01:41,000
the payments and forcing them to reject it when the account number

34
00:01:41,000 --> 00:01:44,000
or the issuer identifier fails to look up correctly.

35
00:01:44,000 --> 00:01:48,000
The check digit is computed using something called Luhn's algorithm.

36
00:01:48,000 --> 00:01:51,000
So this fellow Luhn was a guy who worked for IBM during the middle part of the 20th century.

37
00:01:51,000 --> 00:01:56,000
And in 1960, he patented Luhn's algorithm which was simply a method for calculating this check digit

38
00:01:56,000 --> 00:01:58,000
and it has been used ever since in applications like this.

39
00:01:58,000 --> 00:02:00,000
Let's look at how to use Luhn's algorithm to calculate a check digit.

40
00:02:00,000 --> 00:02:04,000
So what we're going to have is a sequence of numbers, and this will work for any number.

41
00:02:04,000 --> 00:02:08,000
And now there are two cases. If there's an odd number of digits, we're going to do one thing.

42
00:02:08,000 --> 00:02:11,000
And if there's an even number, there'll be a slight variation.

43
00:02:11,000 --> 00:02:15,000
If there's an odd number of digits, what we're going to do is go through the digits

44
00:02:15,000 --> 00:02:19,000
and take every even-numbered digit and multiply it times 2.

45
00:02:19,000 --> 00:02:22,000
So the odd digits we're going to leave alone and the even ones we're going to multiply times 2.

46
00:02:22,000 --> 00:02:28,000
And the next thing we're going to have to do is see if any of the resulting numbers are greater than 9.

47
00:02:28,000 --> 00:02:32,000
If so, we're going to have to subtract 9 and some number is going to result.
