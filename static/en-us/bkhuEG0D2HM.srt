1
00:00:00,220 --> 00:00:03,130
Below is a Python implementation of a reducer for

2
00:00:03,130 --> 00:00:06,460
our word count problem. Let's walk through this reducer line

3
00:00:06,460 --> 00:00:09,890
by line and discuss what it's doing. First, we set

4
00:00:09,890 --> 00:00:13,230
initial values for word_count and old_key to 0 and None

5
00:00:13,230 --> 00:00:17,010
respectively. We take in our data which you'll recall

6
00:00:17,010 --> 00:00:19,060
will be a bunch of key value pairs separated by

7
00:00:19,060 --> 00:00:22,670
a tab. If we have strange row with more or

8
00:00:22,670 --> 00:00:25,880
less than a key and a value, i.e., the length

9
00:00:25,880 --> 00:00:28,670
of the data array is not equal to, we'll

10
00:00:28,670 --> 00:00:31,390
just continue on to the next row. All of these

11
00:00:31,390 --> 00:00:34,570
lines down here are essentially summing up the count

12
00:00:34,570 --> 00:00:38,120
for every single key. We continue through all the key

13
00:00:38,120 --> 00:00:41,340
value pairs for a particular key until we notice

14
00:00:41,340 --> 00:00:44,390
that we're on to a new key. Once this happens,

15
00:00:44,390 --> 00:00:48,310
we print out the key and its final word count.

16
00:00:48,310 --> 00:00:51,392
We then set word count equal to 0 once again.

17
00:00:51,392 --> 00:00:54,040
You'll note that this implementation will not emit a key

18
00:00:54,040 --> 00:00:56,900
value pair for our final key. Because of that, we have

19
00:00:56,900 --> 00:01:00,340
to include this final bit of code down here. So

20
00:01:00,340 --> 00:01:02,810
if old key is not equal to none, let's print out

21
00:01:02,810 --> 00:01:06,140
one final key value paie. So, say that we ran

22
00:01:06,140 --> 00:01:09,030
this reducer on all of the intermediate key value pairs our

23
00:01:09,030 --> 00:01:12,504
mapper in the previous slide produced. We would go through

24
00:01:12,504 --> 00:01:16,260
all key value pairs with the key hello. There's only one,

25
00:01:16,260 --> 00:01:21,220
so we emit hello, 1. There are however, 2 key value

26
00:01:21,220 --> 00:01:26,610
pairs with the key my. So we would emit the final key value pair,

27
00:01:26,610 --> 00:01:31,450
my 2 for this key and so on. So now if

28
00:01:31,450 --> 00:01:33,680
we use the mapper and reducer we just wrote

29
00:01:33,680 --> 00:01:36,480
on a more significant example, say the text of

30
00:01:36,480 --> 00:01:38,990
Alice in Wonderland, we can check that it works

31
00:01:38,990 --> 00:01:41,620
and ensure that it produces the same type of result

32
00:01:41,620 --> 00:01:44,090
as the Python script that you wrote earlier in this lesson.

33
00:01:45,140 --> 00:01:48,580
We're going to simulate running this map reduced job by just

34
00:01:48,580 --> 00:01:52,710
running these scripts locally, using Python. Note this isn't a real

35
00:01:52,710 --> 00:01:56,880
map reduced deployment, we're only running this on one computer. If

36
00:01:56,880 --> 00:01:58,830
we run the script, we see that we have an output

37
00:01:58,830 --> 00:02:01,115
where we have all of the words that appear in Alice

38
00:02:01,115 --> 00:02:04,110
in Wonderland and the number of times that each of those

39
00:02:04,110 --> 00:02:07,150
words occurs. Note that all of the words are lowercase and

40
00:02:07,150 --> 00:02:08,440
are stripped of all punctuation.
