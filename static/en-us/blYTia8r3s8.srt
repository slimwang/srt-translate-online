1
00:00:00,420 --> 00:00:03,038
As I mentioned, Spring is a network operating system.

2
00:00:03,038 --> 00:00:05,980
So, what I described to you just now, is how

3
00:00:05,980 --> 00:00:10,280
object invocation works within a single node. But these doors

4
00:00:10,280 --> 00:00:14,170
are confined to the nucleus on a single node. And

5
00:00:14,170 --> 00:00:16,370
we need to be able to do object invocation

6
00:00:16,370 --> 00:00:18,980
across the network. The client domain may be over here

7
00:00:18,980 --> 00:00:21,590
and the server domain may be on a different node

8
00:00:21,590 --> 00:00:25,760
on the local area network. Object invocation between client and

9
00:00:25,760 --> 00:00:30,270
server across the network is extended using network

10
00:00:30,270 --> 00:00:34,240
proxies. For example, on the client box there

11
00:00:34,240 --> 00:00:39,640
is this Proxy B and on the server box, there is the Proxy A and proxies

12
00:00:39,640 --> 00:00:43,440
can be potentially different for connecting to different

13
00:00:43,440 --> 00:00:46,040
servers. So, this client may talk to this

14
00:00:46,040 --> 00:00:48,700
server using this proxy. And may talk to

15
00:00:48,700 --> 00:00:50,880
a different server, which I'm not showing here using

16
00:00:50,880 --> 00:00:53,200
a completely different proxy. In other words, the

17
00:00:53,200 --> 00:00:57,800
proxies can potentially employ different protocols. That's where you

18
00:00:57,800 --> 00:01:01,360
have the opportunity to specialize. Whether the communication

19
00:01:01,360 --> 00:01:04,489
that's happening between the client and server is on

20
00:01:04,489 --> 00:01:07,220
the local area network or on a wide

21
00:01:07,220 --> 00:01:09,960
area network, and so on. Depending on that, you

22
00:01:09,960 --> 00:01:12,920
can employ the protocol that is appropriate for

23
00:01:12,920 --> 00:01:15,950
use in the proxy. So, this is a key

24
00:01:15,950 --> 00:01:19,740
property of building a network operating system in Sun

25
00:01:19,740 --> 00:01:22,650
where they wanted to make sure that decisions are not

26
00:01:22,650 --> 00:01:26,640
being ingrained in the operating system of a single

27
00:01:26,640 --> 00:01:29,310
node, in terms of the connectivity of that node to

28
00:01:29,310 --> 00:01:31,790
other nodes on the network. Depending on where the

29
00:01:31,790 --> 00:01:35,150
servers for a particular client is going to be maintained,

30
00:01:35,150 --> 00:01:37,860
that is where the location of the server is.

31
00:01:37,860 --> 00:01:41,860
You can employ different protocols to talk between the proxies

32
00:01:41,860 --> 00:01:44,390
that are on the client machine and the

33
00:01:44,390 --> 00:01:47,390
server machine. And also the proxies are invisible

34
00:01:47,390 --> 00:01:49,450
to the client and the server. In other

35
00:01:49,450 --> 00:01:53,660
words, the client and the servers are unaware whether

36
00:01:53,660 --> 00:01:56,030
they are both on the same machine or

37
00:01:56,030 --> 00:01:58,560
on a different machine, and they don't care.

38
00:01:58,560 --> 00:02:02,560
Let's see how this client-server relationship is established

39
00:02:02,560 --> 00:02:06,984
using these proxies. So when a client-server connection has

40
00:02:06,984 --> 00:02:10,729
to be made across the network. The first

41
00:02:10,729 --> 00:02:13,600
thing that happens is, you instantiate a proxy

42
00:02:13,600 --> 00:02:17,000
on the server node and establish a door

43
00:02:17,000 --> 00:02:19,970
for communication between the Proxy A and the

44
00:02:19,970 --> 00:02:23,030
server domain through the nucleus on the server

45
00:02:23,030 --> 00:02:25,440
machine. And now what does Proxy A is

46
00:02:25,440 --> 00:02:28,700
going to do, is to export a network handle

47
00:02:28,700 --> 00:02:32,400
embedding this Door X to its peer proxy,

48
00:02:32,400 --> 00:02:35,800
B that is on the client domain. And

49
00:02:35,800 --> 00:02:39,300
see that this interaction that's going on between Proxy

50
00:02:39,300 --> 00:02:44,520
A and Proxy B is outside of anything that is in the preview of the nucleus. So

51
00:02:44,520 --> 00:02:47,150
the network handle that is being established has

52
00:02:47,150 --> 00:02:50,700
nothing to do with the primitives or the mechanism

53
00:02:50,700 --> 00:02:54,597
that are available in the nucleus of the Spring

54
00:02:54,597 --> 00:02:57,830
system. So what proxy is doing, is to create

55
00:02:57,830 --> 00:03:00,840
a network handle embedding this Door X. And

56
00:03:00,840 --> 00:03:03,940
it is going to export that to this Proxy B

57
00:03:03,940 --> 00:03:06,540
and Proxy B has a door that it has

58
00:03:06,540 --> 00:03:10,840
established locally on Nucleus B so that the client

59
00:03:10,840 --> 00:03:14,703
domain can communicate with it. And now what Proxy

60
00:03:14,703 --> 00:03:16,743
B will do, is it will use the network

61
00:03:16,743 --> 00:03:19,123
handle that has been exported by Proxy A to

62
00:03:19,123 --> 00:03:22,930
establish a connection between the two nuclei. So this

63
00:03:22,930 --> 00:03:26,350
network handle and the communication that goes on between

64
00:03:26,350 --> 00:03:28,810
these two guys is not through the nucleus. That's

65
00:03:28,810 --> 00:03:31,790
important for you to understand. So now, how does

66
00:03:31,790 --> 00:03:34,690
the client make an invocation on the server domain?

67
00:03:34,690 --> 00:03:38,060
Well, when the client wants to make an invocation,

68
00:03:38,060 --> 00:03:41,410
it thinks that when it is accessing Door Y,

69
00:03:41,410 --> 00:03:44,720
it is accessing the server's domain. But it isn't.

70
00:03:44,720 --> 00:03:48,060
What it is. What it is accessing, is this

71
00:03:48,060 --> 00:03:54,840
Proxy B and of course access to this Door Y, which is in Proxy B, is blessed by

72
00:03:54,840 --> 00:04:00,740
Nucleus B, and when this invocation happens, Proxy B then is going to

73
00:04:00,740 --> 00:04:03,650
communicate through this network handle that it

74
00:04:03,650 --> 00:04:06,880
has with its peer Proxy A. And the

75
00:04:06,880 --> 00:04:09,920
peer Proxy A, when it gets this

76
00:04:09,920 --> 00:04:13,080
client invocation proxied through this Proxy B and

77
00:04:13,080 --> 00:04:15,590
arriving at Proxy A, will know that oh, this

78
00:04:15,590 --> 00:04:19,870
is really intended for the server domain. And I know

79
00:04:19,870 --> 00:04:22,530
how to access that through the door that I

80
00:04:22,530 --> 00:04:25,400
have in the server domain, and it uses the door

81
00:04:25,400 --> 00:04:28,140
it has in the server domain in order to

82
00:04:28,140 --> 00:04:32,240
make the actual invocation. So to recap, what is really

83
00:04:32,240 --> 00:04:35,570
going on, the client wants to open this Door X.

84
00:04:35,570 --> 00:04:38,194
It doesn't have a direct handle on Door X because

85
00:04:38,194 --> 00:04:40,114
server domain is in a different node

86
00:04:40,114 --> 00:04:43,663
of the network. And therefore, the way remote

87
00:04:43,663 --> 00:04:47,563
invocation is accomplished, is by the server

88
00:04:47,563 --> 00:04:51,263
domain's door which is the entry point into

89
00:04:51,263 --> 00:04:57,263
the server domain, is passed on by this proxy via a network handle to its

90
00:04:57,263 --> 00:05:03,336
peer proxy on a different node, in this case the client node. And once this

91
00:05:03,336 --> 00:05:06,000
network handle is available to Proxy B, it

92
00:05:06,000 --> 00:05:09,552
can establish the connection between these nuclei, and

93
00:05:09,552 --> 00:05:13,256
once this connection is established. Then the client

94
00:05:13,256 --> 00:05:16,638
domain, it thinks it is making an invocation

95
00:05:16,638 --> 00:05:21,622
call for Door X, but in fact it is being passed through Door Y to this

96
00:05:21,622 --> 00:05:24,941
proxy. And the Proxy uses a network handle

97
00:05:24,941 --> 00:05:28,529
to communicate that invocation over to Proxy A

98
00:05:28,529 --> 00:05:32,301
which then uses the actual door that will open the

99
00:05:32,301 --> 00:05:38,360
invocation call under server domain and execute the client domain's call.
