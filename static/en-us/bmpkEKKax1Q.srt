1
00:00:00,000 --> 00:00:03,000
The answer is the first two. The first one is checking the signature.

2
00:00:03,000 --> 00:00:10,000
We're checking the signature here by decrypting using the public key

3
00:00:10,000 --> 00:00:15,000
that verifies that this message was created by someone who knows the private key

4
00:00:15,000 --> 00:00:19,000
so we verify the signature, and you might think that would be enough.

5
00:00:19,000 --> 00:00:22,000
We verify the signature, we obtain the public key, and we obtain the value

6
00:00:22,000 --> 00:00:26,000
that we need to produce our Diffie-Hellman key.

7
00:00:26,000 --> 00:00:29,000
The reason that's not enough is because we're also worried about replay attacks,

8
00:00:29,000 --> 00:00:32,000
and that's why we need to do the second check.

9
00:00:32,000 --> 00:00:35,000
We're going to recompute this hash. Note that the hash is one way.

10
00:00:35,000 --> 00:00:40,000
We can't use the hash to learn the key, but we can compute the key like this for the client

11
00:00:40,000 --> 00:00:43,000
and then check that the key and the hash matches that.

12
00:00:43,000 --> 00:00:48,000
By computing the hash, we know that there is no replay attack because these values are fresh.

13
00:00:48,000 --> 00:00:52,000
If there was a replay attack and a different hash value was replayed,

14
00:00:52,000 --> 00:00:55,000
then this hash wouldn't match, so we need both of those.

15
00:00:55,000 --> 00:01:00,000
The third check doesn't make sense, and this uses Yc as well as Xs,

16
00:01:00,000 --> 00:01:02,000
which is the secret value of the server.

17
00:01:02,000 --> 00:01:06,000
If that was revealed, that would break the protocol.
