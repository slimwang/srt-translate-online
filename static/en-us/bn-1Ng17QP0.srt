1
00:00:00,000 --> 00:00:02,000
Here's how we can solve this.

2
00:00:02,000 --> 00:00:04,000
We have our cipher text c.

3
00:00:04,000 --> 00:00:06,000
We have our public key component e.

4
00:00:06,000 --> 00:00:14,000
The key point here is that when m is small, if m^e is less than n,

5
00:00:14,000 --> 00:00:16,000
then we never wrapped around the modulus.

6
00:00:16,000 --> 00:00:21,000
That means decryption is as easy as finding these eth of the cipher text.

7
00:00:21,000 --> 00:00:26,000
What we're looking for is the eth root of c.

8
00:00:26,000 --> 00:00:30,000
We can compute that in Python using the pow function.

9
00:00:30,000 --> 00:00:34,000
So 1 divided by 17 will give us the 17th root of c.

10
00:00:34,000 --> 00:00:37,000
We get the message was 7.

11
00:00:37,000 --> 00:00:41,000
This means decrypting is very easy if m^e is less than n.

12
00:00:41,000 --> 00:00:45,000
This is also true if m^e is less than some multiple of n.

13
00:00:45,000 --> 00:00:49,000
We can try just adding n to the cipher text and taking the eth root.

14
00:00:49,000 --> 00:00:55,000
If we ever get an integer result, that's a good indication that that was the message.
