1
00:00:00,000 --> 00:00:06,040
One argument you might make against undecidability and the importance of saying

2
00:00:06,040 --> 00:00:11,330
whether a problem is undecidable, is that every computer is actually finite.

3
00:00:11,330 --> 00:00:13,330
It has a finite amount of state.

4
00:00:13,330 --> 00:00:15,930
It can run for a finite length of time.

5
00:00:15,930 --> 00:00:18,740
Therefore we can determine whether a program halts or not simply by letting it run

6
00:00:18,740 --> 00:00:26,260
either until it terminates or it arrives at a state where it has already been.

7
00:00:26,260 --> 00:00:30,650
By state I mean the memory in the computer is exactly the same,

8
00:00:30,650 --> 00:00:36,470
and we are executing the same line of code as we were the previous time around.

9
00:00:36,470 --> 00:00:38,800
Because if both of those things are true we are going to loop back around again

10
00:00:38,800 --> 00:00:40,820
and have the same memory and line of code executing,

11
00:00:40,820 --> 00:00:42,960
and again, and again.

12
00:00:42,960 --> 00:00:45,260
Then we'll know if it will terminate or not.

13
00:00:45,260 --> 00:00:49,850
One of the problems with this is that today's computers have a whole lot of memory.

14
00:00:49,850 --> 00:00:52,390
So why don't we try it with something a little bit smaller?

15
00:00:52,390 --> 00:00:54,490
Let's try it with a smaller computer.

16
00:00:54,490 --> 00:00:57,360
A computer that only has a single kilobyte of total memory.

17
00:00:57,360 --> 00:01:02,230
This is a ridiculously small amount of memory for this day and age.

18
00:01:02,230 --> 00:01:06,460
It's really kind of a joke. You can't even fit the Udacity logo in this amount of memory.

19
00:01:06,460 --> 00:01:12,010
Now remember, a kilobyte is a 1,000 bytes, and a byte has 8 bits in it,

20
00:01:12,010 --> 00:01:14,580
which can each be set to either 0 or 1.

21
00:01:14,580 --> 00:01:19,130
Let's say that this computer can take 10 billion steps in a single second.

22
00:01:19,130 --> 00:01:24,750
What I'd like to know is if we did this, and we wanted to know if a program that we were

23
00:01:24,750 --> 00:01:28,630
running on this computer would terminate, how many years could it potentially take us

24
00:01:28,630 --> 00:01:31,420
to decide if our given program terminates?

25
00:01:31,420 --> 00:01:36,760
I'd like your answer in the exponent for 10 to the---however many numbers of years.

26
00:01:36,760 --> 00:01:44,000
If you'd like a little bit of a hint, the age of the universe is estimated at about 14 billion

27
00:01:44,000 --> 00:01:46,740
or 10 to the 10th years.

28
00:01:46,740 --> 00:01:50,510
Your answer should be substantially larger than that.

29
00:01:50,510 --> 99:59:59,999
Go ahead and enter the exponent in here.
