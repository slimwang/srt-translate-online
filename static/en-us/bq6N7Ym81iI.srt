1
00:00:00,510 --> 00:00:03,440
So how do we implement the least
recently used policy that

2
00:00:03,440 --> 00:00:04,310
works really well?

3
00:00:04,310 --> 00:00:07,420
And it works really because
it exploits well locality.

4
00:00:07,420 --> 00:00:12,356
The most recently used thing is likely
to be used very soon afterwards.

5
00:00:12,356 --> 00:00:15,495
The thing that we haven't used for
a while means that there is less

6
00:00:15,495 --> 00:00:19,405
reason for locality to kind of
cause it to be accessed again.

7
00:00:19,405 --> 00:00:22,015
Let's say we have a four way
set associative cache and

8
00:00:22,015 --> 00:00:24,285
let's just track what's
happening in this one set.

9
00:00:24,285 --> 00:00:26,215
So there is four blocks in it.

10
00:00:26,215 --> 00:00:30,400
For each of these blocks we
keep the tag and the valid bit.

11
00:00:30,400 --> 00:00:33,980
And in order to track which
block was accessed when,

12
00:00:33,980 --> 00:00:37,950
we are going to also have
an LRU counter for each block.

13
00:00:37,950 --> 00:00:43,200
These counters take values that
correspond to the size of the set.

14
00:00:43,200 --> 00:00:46,680
In this case, 0 through 3 because
there are four things in the set.

15
00:00:47,780 --> 00:00:51,450
So let's initialize them to 0,
1, 2, and 3.

16
00:00:51,450 --> 00:00:54,050
They have to all be
different all the time, and

17
00:00:54,050 --> 00:00:56,270
we will see how that is maintained.

18
00:00:56,270 --> 00:00:58,350
So, we start like this.

19
00:00:58,350 --> 00:01:03,370
When we want to replace something,
we will replace the block whose count it

20
00:01:03,370 --> 00:01:07,210
is currently 0 because that's going to
be the least recently used block.

21
00:01:07,210 --> 00:01:09,940
So, let's say we access some block, A.

22
00:01:09,940 --> 00:01:11,530
And we need to put it somewhere.

23
00:01:11,530 --> 00:01:16,360
We will choose the place with
the 0 counter and put it there.

24
00:01:16,360 --> 00:01:21,460
Now that the block is placed there,
the processor accessing it

25
00:01:22,550 --> 00:01:25,720
and suddenly this becomes
the most recently used block.

26
00:01:25,720 --> 00:01:27,980
So, it's counter now needs to be 3.

27
00:01:27,980 --> 00:01:30,960
In order to make sure that all of
the counters still have different values

28
00:01:30,960 --> 00:01:34,410
that means that all of the other
counters now need to be decremented.

29
00:01:34,410 --> 00:01:36,950
So, the one that was 1 becomes 0.

30
00:01:37,980 --> 00:01:40,540
2 becomes 1, and 3 becomes 2.

31
00:01:40,540 --> 00:01:43,790
And now,
let's say that we access sum block B.

32
00:01:43,790 --> 00:01:47,190
We put it here,
because the counter is 0, now, here.

33
00:01:47,190 --> 00:01:51,800
When B is accessed after putting
it here, that counter becomes 3.

34
00:01:51,800 --> 00:01:53,660
This one becomes 2.

35
00:01:53,660 --> 00:01:56,650
This one becomes 0 and
this one becomes 1.

36
00:01:56,650 --> 00:01:59,130
We will now put in block C here.

37
00:01:59,130 --> 00:02:00,760
That becomes 3.

38
00:02:00,760 --> 00:02:01,740
This becomes 2.

39
00:02:01,740 --> 00:02:02,661
This becomes 1.

40
00:02:02,661 --> 00:02:04,426
This becomes 0.

41
00:02:04,426 --> 00:02:07,500
D, 3, 2, 1, 0.

42
00:02:07,500 --> 00:02:10,490
Now we're back to this situation.

43
00:02:10,490 --> 00:02:12,640
So I'm going to clean up here.

44
00:02:12,640 --> 00:02:15,670
And now, if we access E,

45
00:02:15,670 --> 00:02:18,920
we're going to find what was
the least recently used block.

46
00:02:18,920 --> 00:02:23,720
And A, at this point, is because it's
been accessed the least recently.

47
00:02:23,720 --> 00:02:27,160
So A will be replaced by E.

48
00:02:27,160 --> 00:02:32,400
And the LRU counter here becomes 3
which brings these one notch lower.

49
00:02:32,400 --> 00:02:34,750
So this is the state we have.

50
00:02:34,750 --> 00:02:40,200
Now let's say that B, which is the least
recently used block now, is re-accessed.

51
00:02:40,200 --> 00:02:44,900
What happens then is this
counter needs to become 3.

52
00:02:44,900 --> 00:02:47,450
All of the other ones now
need to be changed lower.

53
00:02:47,450 --> 00:02:52,860
What happens if the most recently block,
let's say, B is accessed again?

54
00:02:52,860 --> 00:02:56,812
Then this count just stays at 3 because
that indicates that this is already

55
00:02:56,812 --> 00:02:58,704
the most recently accessed block.

56
00:02:58,704 --> 00:03:02,807
What happens if block D,
which is neither the most nor

57
00:03:02,807 --> 00:03:05,368
the least recent, is accessed?

58
00:03:05,368 --> 00:03:10,820
Well this counter needs to become 3 and
now we have an interesting situation.

59
00:03:10,820 --> 00:03:14,370
We don't just lower all
the other counters a notch down.

60
00:03:14,370 --> 00:03:19,160
We take the ones that were above
the original value of this counter.

61
00:03:19,160 --> 00:03:22,350
So we take the counter that is above 1,
and

62
00:03:22,350 --> 00:03:24,940
those are the ones
that get a notch down.

63
00:03:24,940 --> 00:03:28,580
But the ones that are below
one stay the same.

64
00:03:28,580 --> 00:03:32,920
That ensures that the counters
still have different values.

65
00:03:32,920 --> 00:03:35,840
Lets do another one of those
where lets say block B,

66
00:03:35,840 --> 00:03:40,530
that is almost the most recently
used block, is accessed.

67
00:03:40,530 --> 00:03:44,190
In that case this counter
needs to become 3.

68
00:03:44,190 --> 00:03:47,325
All counters that were above its
original value of 2 need to be

69
00:03:47,325 --> 00:03:48,390
decremented.

70
00:03:48,390 --> 00:03:54,290
So, this becomes 2, but these two stay
the same because they're below 2.

71
00:03:54,290 --> 00:03:56,670
So again, we have this situation.

72
00:03:56,670 --> 00:04:00,851
So now you know how to maintain
the LRU counters properly.

73
00:04:00,851 --> 00:04:06,423
After every step you can verify that
the counters have different values.

74
00:04:06,423 --> 00:04:10,439
If they don't, then you probably
made a mistake somewhere.

75
00:04:10,439 --> 00:04:14,619
So as you can see maintaining
LRU is relatively complicated.

76
00:04:14,619 --> 00:04:18,432
For an N-way set-associative cache,

77
00:04:18,432 --> 00:04:22,700
we need N counters
whose size is LOG2(N).

78
00:04:22,700 --> 00:04:28,683
In this case the size of the counters is
2 bit because they need to have a number

79
00:04:28,683 --> 00:04:34,230
between 0 and 3 to tell us where are we
in the order of access in the set.

80
00:04:34,230 --> 00:04:36,290
So it's a four way set
associative cache,

81
00:04:36,290 --> 00:04:40,200
that means we need two bits
per counter and four counters.

82
00:04:40,200 --> 00:04:44,880
So for highly associative cache it's
something like 32 way associated.

83
00:04:44,880 --> 00:04:49,220
You would need to have 5 bit
counters and 32 of them per set.

84
00:04:49,220 --> 00:04:51,730
So this was the cost.

85
00:04:51,730 --> 00:04:52,490
It's pretty high.

86
00:04:53,620 --> 00:04:56,930
Worse, there is an energy problem.

87
00:04:56,930 --> 00:05:01,010
We need to modify up to N
counters on each access,

88
00:05:01,010 --> 00:05:03,960
even cache hits that can
happen very frequently.

89
00:05:03,960 --> 00:05:08,740
So the LRU approximations try
to keep fewer counters and

90
00:05:08,740 --> 00:05:11,200
do fewer updates on cache hits.
