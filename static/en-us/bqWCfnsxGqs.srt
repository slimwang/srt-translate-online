1
00:00:00,000 --> 00:00:02,000
These list comprehensions are amazing.

2
00:00:02,000 --> 00:00:05,000
They are one of my favorite parts of Python.

3
00:00:05,000 --> 00:00:07,000
This is really a great way to program. It's very declarative.

4
00:00:07,000 --> 00:00:10,000
You just say what you want, and the system makes it for you.

5
00:00:10,000 --> 00:00:14,000
Unfortunately, they have a slight downside, which is that thus far

6
00:00:14,000 --> 00:00:17,000
we've had to write out the starter list, and that's almost as much work

7
00:00:17,000 --> 00:00:19,000
as just writing down what we need.

8
00:00:19,000 --> 00:00:23,000
If only there were some way to generate this list,

9
00:00:23,000 --> 00:00:27,000
especially if it's really big, without us having to write it down explicitly.

10
00:00:27,000 --> 00:00:31,000
For example, suppose I started with a big list like this, 1, 2, 3, 4, 5, 6, 7.

11
00:00:31,000 --> 00:00:33,000
I assert it's big. It's big for me.

12
00:00:33,000 --> 00:00:35,000
This is heavy lifting for your professor.

13
00:00:35,000 --> 00:00:39,000
And what I want to do is filter it down so that we only have the odd numbers.

14
00:00:39,000 --> 00:00:41,000
I want to get this part out.

15
00:00:41,000 --> 00:00:43,000
I'm going to show you a new way to do that in Python.

16
00:00:43,000 --> 00:00:46,000
Here I've written a procedure called odds_only in Python

17
00:00:46,000 --> 00:00:50,000
that takes a list of numbers, and it's going to iterate over them.

18
00:00:50,000 --> 00:00:53,000
For every n in that list of numbers, if that number is odd,

19
00:00:53,000 --> 00:00:55,000
we divide it by 2 and check the remainder.

20
00:00:55,000 --> 00:00:57,000
5 divided by 2 is 4 with remainder 1, so it's odd.

21
00:00:57,000 --> 00:01:01,000
We yield that part into our results.

22
00:01:01,000 --> 00:01:03,000
Note that I did not write the word "return."

23
00:01:03,000 --> 00:01:07,000
Yield is a new special keyword that means we can use this sort of procedure

24
00:01:07,000 --> 00:01:09,000
to gather up multiple results.

25
00:01:09,000 --> 00:01:12,000
Let's imagine that this big list here was numbers.

26
00:01:12,000 --> 00:01:16,000
We'll yield 1, not do anything with 2, yield 3,

27
00:01:16,000 --> 00:01:20,000
not do anything with 4, yield 5, not do anything with 6, and yield 7,

28
00:01:20,000 --> 00:01:22,000
and that's exactly the output that we wanted.

29
00:01:22,000 --> 00:01:25,000
You can view this as sort of a convenient way of filtering.

30
00:01:25,000 --> 00:01:28,000
Here I've written out our odds_only procedure.

31
00:01:28,000 --> 00:01:30,000
I'm just going to show you in the interpreter how this plays out.

32
00:01:30,000 --> 00:01:32,000
I'm using a list comprehension.

33
00:01:32,000 --> 00:01:37,000
I want to print out every value of x that's in odds_only of 1, 2, 3, 4, 5,

34
00:01:37,000 --> 00:01:40,000
and we get 1, 3, and 5, as we expected.

35
00:01:40,000 --> 00:01:44,000
I'm also going to show you an even easier way to do this.

36
00:01:44,000 --> 00:01:46,000
Snap, it'll be so cool.

37
00:01:46,000 --> 00:01:48,000
Here I've written a list comprehension.

38
00:01:48,000 --> 00:01:50,000
I want [x for x in [1, 2, 3, 4, 5].

39
00:01:50,000 --> 00:01:53,000
But over here on the right I've put this sort of if conditional,

40
00:01:53,000 --> 00:01:57,000
a guard or a predicate we might call it in mathematics,

41
00:01:57,000 --> 00:01:59,000
and this is saying I only want you to yield

42
00:01:59,000 --> 00:02:01,000
those numbers for which the predicate is true.

43
00:02:01,000 --> 00:02:05,000
Only include x in the answer if x was an odd number,

44
00:02:05,000 --> 00:02:07,000
and look, we get the answer we wanted.

45
00:02:07,000 --> 00:02:10,000
I've written x a few times, but I can make these formulas

46
00:02:10,000 --> 00:02:12,000
arbitrarily more complicated.

47
00:02:12,000 --> 00:02:17,000
Here I've said take all of the odd numbers, and multiply them by 2.

48
00:02:17,000 --> 00:02:21,000
Since 1, 3, and 5 were the odd numbers, 2, 6, and 10 are the multiplication by 2.

49
00:02:21,000 --> 00:02:23,000
I love list comprehensions, and you will too soon.

50
00:02:23,000 --> 00:02:26,000
A function like odds_only that uses yield

51
00:02:26,000 --> 00:02:30,000
to potentially return multiple answers is called a generator

52
00:02:30,000 --> 99:59:59,999
because you can use it to generate another list or another enumeration.
