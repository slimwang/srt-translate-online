1
00:00:01,130 --> 00:00:04,340
Before we get into the gory
details of the sample application,

2
00:00:04,340 --> 00:00:08,160
let's make sure we understand why
it was designed the way it was.

3
00:00:08,160 --> 00:00:10,070
It's always best to
consult with an expert.

4
00:00:10,070 --> 00:00:14,100
So, let's ask Adrian Cockcroft about
the evolution of the applications.

5
00:00:14,100 --> 00:00:14,740
Hi, Adrian.

6
00:00:14,740 --> 00:00:15,440
>> Hi, Kevin.

7
00:00:15,440 --> 00:00:15,980
>> Thanks for being here.

8
00:00:17,340 --> 00:00:20,450
Adrian is the former cloud
architect of Netflix and

9
00:00:20,450 --> 00:00:23,900
the guy who Kelsey says made
micro services mainstream.

10
00:00:23,900 --> 00:00:26,130
What have you doing
since you left Netflix?

11
00:00:26,130 --> 00:00:26,830
>> So I work for

12
00:00:26,830 --> 00:00:31,150
a venture capital company
Battery Ventures about last two years.

13
00:00:31,150 --> 00:00:34,120
What I mostly do is I help up
a portfolio companies help with

14
00:00:34,120 --> 00:00:37,820
the technology consult with them and
spend time looking for

15
00:00:37,820 --> 00:00:39,930
interesting new companies to invest in.

16
00:00:39,930 --> 00:00:41,870
>> Very cool, very cool.

17
00:00:41,870 --> 00:00:42,920
Well, let's get right into it.

18
00:00:43,960 --> 00:00:47,790
Over the last decade or so, there's been
a ton happening in application space.

19
00:00:47,790 --> 00:00:50,010
Can we talk about some of those changes?

20
00:00:50,010 --> 00:00:54,350
>> Well if you think about the way
things were put together years ago,

21
00:00:54,350 --> 00:00:56,260
we had huge applications.

22
00:00:56,260 --> 00:01:01,700
Think of 5 million lines of Java or
something like that, and it would take

23
00:01:01,700 --> 00:01:05,480
I was to just do a build and then you'd
have to go and find somewhere to run it

24
00:01:05,480 --> 00:01:07,720
and it would take a long time to
work through all these things.

25
00:01:07,720 --> 00:01:11,720
So typically you would release
software relatively infrequently,

26
00:01:11,720 --> 00:01:14,450
because it was a lot of work to do it,
right?

27
00:01:14,450 --> 00:01:18,130
What's happened more recently is that
we've broken the software into smaller

28
00:01:18,130 --> 00:01:18,970
and smaller chunks.

29
00:01:18,970 --> 00:01:21,940
So part of micro services is
making the chunk smaller.

30
00:01:21,940 --> 00:01:25,970
So if your build time is now going from
hours to seconds and then you wrap it in

31
00:01:25,970 --> 00:01:30,415
a container and you deploy the container
it takes seconds to do a deployment.

32
00:01:30,415 --> 00:01:34,450
If you're doing it yourself and
you're doing it, you write some two

33
00:01:34,450 --> 00:01:37,730
piece of code you think that should
work you put it through and test it and

34
00:01:37,730 --> 00:01:41,680
it takes seconds to do, then you want
to do that as often as makes sense.

35
00:01:41,680 --> 00:01:45,580
You don't want to wait a month or
three months to release your code.

36
00:01:45,580 --> 00:01:48,120
>> Is that why people
have been using though?

37
00:01:48,120 --> 00:01:51,700
>> So the main reason for micro
services is speeding up development.

38
00:01:51,700 --> 00:01:55,380
If you think if you go to let's say one
hundred people building a monolithic

39
00:01:55,380 --> 00:01:58,480
application and somebody checks
in something that's broken.

40
00:01:58,480 --> 00:02:01,413
And then in testing they find it's
broken that delays the release

41
00:02:01,413 --> 00:02:01,955
for a week.

42
00:02:01,955 --> 00:02:04,368
99 people work didn't get out, right, or

43
00:02:04,368 --> 00:02:09,000
you put it at production it blows up you
have to roll it back another week or so.

44
00:02:09,000 --> 00:02:13,253
So what happens when you have too many
people contributing to a single large

45
00:02:13,253 --> 00:02:17,508
piece of code is that any small thing
that blocks it is blocking huge amounts

46
00:02:17,508 --> 00:02:19,014
of work from getting out.

47
00:02:19,014 --> 00:02:22,867
And you've created a choke point
that overly coordinates everything.

48
00:02:22,867 --> 00:02:26,080
So breaking it into micro services
is really about freeing up

49
00:02:26,080 --> 00:02:28,640
everybody to run at their own speed.

50
00:02:28,640 --> 00:02:32,030
You can have somebody with a brand new
thing they've just started building,

51
00:02:32,030 --> 00:02:34,570
they might do ten releases a day
as they're just trying to get it

52
00:02:34,570 --> 00:02:35,530
into shape.

53
00:02:35,530 --> 00:02:38,900
Something else that's very mature
might be updating once a month.

54
00:02:38,900 --> 00:02:40,910
Other pieces in between, right?

55
00:02:40,910 --> 00:02:41,680
>> Right.

56
00:02:41,680 --> 00:02:44,020
So then how do you coordinate all
those pieces that are out there?

57
00:02:45,080 --> 00:02:47,080
>> You don't coordinate, right?

58
00:02:47,080 --> 00:02:50,350
So if you coordinate them you're
going back to the monolith right.

59
00:02:50,350 --> 00:02:52,390
And that's what slows things down so

60
00:02:52,390 --> 00:02:56,620
the point really is to let everybody
release on their own cycle

61
00:02:56,620 --> 00:03:00,980
which means you need to make sure that
the interfaces are relatively stable.

62
00:03:00,980 --> 00:03:04,550
And you can deploy any piece of it
independently of any other piece

63
00:03:04,550 --> 00:03:06,980
typically without sort
of asking permission.

64
00:03:06,980 --> 00:03:09,210
But you typically let people know.

65
00:03:09,210 --> 00:03:11,030
>> Okay, that makes a lot of sense.

66
00:03:11,030 --> 00:03:14,200
So then what about all
the infrastructure that goes into

67
00:03:14,200 --> 00:03:17,420
being able to roll back,
deploy, monitor or test these?

68
00:03:17,420 --> 00:03:20,060
>> You need a lot of automation
to do it effectively.

69
00:03:20,060 --> 00:03:24,570
So think of what used to be
meetings with operations teams

70
00:03:24,570 --> 00:03:28,870
as being turned into APIs and
automation and scripts.

71
00:03:28,870 --> 00:03:32,770
Right, so the exact way you can figure
something complicated might be like

72
00:03:32,770 --> 00:03:36,820
a Chef script or something like that
does all of the set up on something or

73
00:03:36,820 --> 00:03:38,440
it might be baked into a container.

74
00:03:38,440 --> 00:03:42,750
If it say the chunk of code
that you want to deploy.

75
00:03:42,750 --> 00:03:46,000
So those sorts of things
will all tie together and

76
00:03:46,000 --> 00:03:50,250
then if you want to coordinate a lot
of things and release them at once,

77
00:03:50,250 --> 00:03:53,650
then you need some sort of
container scheduler with

78
00:03:53,650 --> 00:03:56,260
some way to compose them together and
link everything together.

79
00:03:56,260 --> 00:04:01,130
So like a Docker compose file, or
a kubernetes configuration file.

80
00:04:01,130 --> 00:04:02,370
>> Thank you, I've learned a lot.

81
00:04:02,370 --> 00:04:03,760
Thank you so much Adrian.

82
00:04:03,760 --> 00:04:05,700
>> Okay, thanks very much, cheers.

83
00:04:05,700 --> 00:04:08,460
>> After talking with Adrian it seems
like we need to explore this micro

84
00:04:08,460 --> 00:04:09,420
services pattern more.
