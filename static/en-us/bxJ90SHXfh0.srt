1
00:00:00,680 --> 00:00:05,830
In, digital images in computer vision, we typically operate on discrete images,

2
00:00:05,830 --> 00:00:09,670
right, and that means we have to do two types of discretizations.

3
00:00:09,670 --> 00:00:14,460
First of all, we have to sample, the 2D space on a regular grid, that is we have

4
00:00:14,460 --> 00:00:20,050
discrete pixels at locations, you know what pixels stand for, picture elements,

5
00:00:20,050 --> 00:00:23,610
okay, in the old television world that was called pells also for picture

6
00:00:23,610 --> 00:00:27,160
elements, but for computers we have to be special so we call them pixels.

7
00:00:27,160 --> 00:00:31,960
So we have to pick them at specific locations, the other thing is we have to

8
00:00:31,960 --> 00:00:37,850
quantize, each value, we don't get to have a continuous real value,

9
00:00:37,850 --> 00:00:42,200
we have some finite number of bits to represent that, so like we said,

10
00:00:42,200 --> 00:00:45,070
maybe have 8 bits, so it will go from zero to 255.

11
00:00:45,070 --> 00:00:49,930
These days, you tend to have 16-bit images, or 12-bit, or

12
00:00:49,930 --> 00:00:53,768
depending upon the device, but the idea is that it's quantized, to some level.

13
00:00:53,768 --> 00:00:58,280
Even though, it's quantized, later we're going to tend to think of

14
00:00:58,280 --> 00:01:01,510
these things as floating point, and I'll tell you now,

15
00:01:01,510 --> 00:01:05,936
that if you compute with integer images like unsigned integer 8,

16
00:01:05,936 --> 00:01:11,060
8 bits your code will just break, so, use floating point images.

17
00:01:11,060 --> 00:01:14,300
So in general, especially in MATLAB, which we'll be doing a lot of,

18
00:01:14,300 --> 00:01:19,200
images are represented as a matrix of values, typically integer values to

19
00:01:19,200 --> 00:01:25,170
start with [INAUDIBLE] so here's Phyllis, looking as delightful as ever, and,

20
00:01:25,170 --> 00:01:31,850
we index our matrices by, again, i and j, row and column,

21
00:01:31,850 --> 00:01:37,620
sometimes, x going over this way and y going that way,

22
00:01:37,620 --> 00:01:43,870
if I say some pixel i j it means row i column j, if I say some pixel at x y,

23
00:01:43,870 --> 00:01:48,820
all right, x y, x is horizontal so I have to go get the column that, so

24
00:01:48,820 --> 00:01:52,320
you'll have to swap them, and part of the problem is our math is always

25
00:01:52,320 --> 00:01:57,710
determined by x and y, and our computing is always determined by i and

26
00:01:57,710 --> 00:02:00,710
j, row and column, and, and that's a, a tension that we'll have.

27
00:02:00,710 --> 00:02:04,300
Sometimes we use 1D signals, 1D signals will just be an array of,

28
00:02:04,300 --> 00:02:05,340
of numbers as well.

29
00:02:06,640 --> 00:02:07,140
All right.
