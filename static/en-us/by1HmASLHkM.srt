1
00:00:00,000 --> 00:00:05,270
As we saw in the quiz, there are three things that our basic machine model needs to have.

2
00:00:05,270 --> 00:00:09,060
One is the memory, the second one is some sort of input/output capabilities,

3
00:00:09,060 --> 00:00:12,890
and finally, we need to have certain programming capabilities.

4
00:00:12,890 --> 00:00:16,329
There's a lot of different models that have these capabilities, but in this course,

5
00:00:16,329 --> 00:00:21,290
we're going to use a model called the RAM, and RAM stands for Random Access Machine.

6
00:00:21,290 --> 00:00:25,720
So, there are many different ways of defining a Random Access Machine, and we'll use a model

7
00:00:25,720 --> 00:00:31,000
similar to the one defined by Steven Skiena and his book, The Algorithm Design Manual.

8
00:00:31,000 --> 00:00:34,070
The first thing that the RAM has is the memory

9
00:00:34,070 --> 00:00:40,830
and that memory can of course be used for input, for output, and for holding the program

10
00:00:40,830 --> 00:00:43,560
that the RAM is running on, but as simplification,

11
00:00:43,560 --> 00:00:46,600
we're going to split the memory into three parts.

12
00:00:46,600 --> 00:00:51,790
We're just going to use this memory here for intermediate results and output,

13
00:00:51,790 --> 00:00:57,250
and we're going to have a separate memory for the input and a separate memory to hold the program.

14
00:00:57,250 --> 00:01:04,209
And, these two memories here on the left side are read only meaning that the RAM cannot modify

15
00:01:04,209 --> 00:01:08,460
the input, it can only read the input, and the RAM can also not modify the program.

16
00:01:08,460 --> 00:01:12,930
It could only read the program, and usually, when we will talk about the memory requirements

17
00:01:12,930 --> 00:01:17,850
of an algorithm, what we will be talking about is how much of this memory here the RAM is using.

18
00:01:17,850 --> 00:01:23,060
Generally, there is no limit of how much of this memory here we have

19
00:01:23,060 --> 00:01:30,550
so we always have as much as we want, but the memory is divided into single cells,

20
00:01:30,550 --> 00:01:34,780
and each of these cells has a limited capacity so each of these cells

21
00:01:34,780 --> 00:01:40,960
cannot have arbitrarily large values, but there are as many cells as the algorithm needs.

22
00:01:40,960 --> 00:01:45,620
Now, if we're running a program on the RAM, what we're mainly interested in is

23
00:01:45,620 --> 00:01:48,860
the time that this program is going to run for a given input,

24
00:01:48,860 --> 00:01:54,630
and there are basically three rules for how long the RAM requires to execute a program.

25
00:01:54,630 --> 00:02:01,950
Simple operations such as adding two numbers, multiplying them, or executing an if or for.

26
00:02:01,950 --> 00:02:04,260
Those all take one time step.

27
00:02:04,260 --> 00:02:08,490
If you have a loop in your program such as a four-loop, this will count

28
00:02:08,490 --> 00:02:12,410
not as a simple operation but count as often as it runs.

29
00:02:12,410 --> 00:02:16,390
So, if you have a loop that executes a simple operation 100 times,

30
00:02:16,390 --> 00:02:23,160
that will count as 100 time steps, and finally, you' ll also get something for free accessing memory.

31
00:02:23,160 --> 00:02:30,290
So, reading a part of the input or writing something into a memory cell here, that is free.

32
00:02:30,290 --> 00:02:33,620
That means that actually takes zero time steps.

33
00:02:33,620 --> 00:02:38,340
And these three rules give us a simple way of determining the running time of an algorithm

34
00:02:38,340 --> 00:02:42,890
or program or also of comparing the running time of two programs because all we need to do

35
00:02:42,890 --> 00:02:48,290
is count the number of time steps that we expect the RAM to execute for a given input.

36
00:02:48,290 --> 99:59:59,999
Let's practice this for a little bit.
