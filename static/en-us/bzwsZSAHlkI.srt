1
00:00:00,070 --> 00:00:03,510
The situations with signals differs because signals are not generated by

2
00:00:03,510 --> 00:00:05,180
an external entity.

3
00:00:05,180 --> 00:00:09,330
For instance, if this thread is trying to access a memory location that hasn't

4
00:00:09,330 --> 00:00:14,590
been allocated to it, so it's basically performing an illegal memory access.

5
00:00:14,590 --> 00:00:19,010
That will result in the signal being generated, that's called SIGSEGV.

6
00:00:20,240 --> 00:00:22,610
So once the OS generates this fault,

7
00:00:22,610 --> 00:00:27,680
then the rest of the processing is similar to what was happening in interrupts.

8
00:00:27,680 --> 00:00:32,420
The OS maintains a signal handler for every process in the system.

9
00:00:32,420 --> 00:00:34,580
For each signal in the system,

10
00:00:34,580 --> 00:00:39,380
this table will specify the starting address of a handling routine.

11
00:00:39,380 --> 00:00:41,940
So the signal would discuss SIGSEGV.

12
00:00:41,940 --> 00:00:45,880
That's number 11 in Linux, the access illegal memory.

13
00:00:45,880 --> 00:00:49,400
And for that signal, there will be a handling routine whose

14
00:00:49,400 --> 00:00:52,350
starting address will be specified in this table.

15
00:00:52,350 --> 00:00:56,340
And as a reminder, again, the signals that can occur on a particular

16
00:00:56,340 --> 00:01:01,280
platform are really defined by the operating system that executes there.

17
00:01:01,280 --> 00:01:05,200
And how they're handled can be specified by the process.

18
00:01:05,200 --> 00:01:07,580
A little more on signals now.

19
00:01:07,580 --> 00:01:13,120
The reason we said that a process may specify how a signal should be handled.

20
00:01:13,120 --> 00:01:18,620
Is because the operating system actually specifies some default actions for

21
00:01:18,620 --> 00:01:20,220
handling signals.

22
00:01:20,220 --> 00:01:21,990
For instance, a default action for

23
00:01:21,990 --> 00:01:27,470
a signal could be that when that signal occurs a process should be terminated.

24
00:01:27,470 --> 00:01:30,040
Or maybe that the signal should simply be ignored.

25
00:01:30,040 --> 00:01:34,450
An example of what could happen when the SIGSEGV signal occurs is

26
00:01:34,450 --> 00:01:36,830
to terminate at and core dump.

27
00:01:36,830 --> 00:01:41,800
So that one can inspect the core dump and determine the reason for

28
00:01:41,800 --> 00:01:43,450
the crash of the process.

29
00:01:43,450 --> 00:01:49,940
Other common default actions in UNIX like systems include to stop a process or

30
00:01:49,940 --> 00:01:51,940
to continue a stopped process.

31
00:01:51,940 --> 00:01:53,430
For most signals however,

32
00:01:53,430 --> 00:01:58,460
a process is also allowed to install its own custom handling routine.

33
00:01:58,460 --> 00:02:03,940
And there are system calls or library calls that allow a process to do this.

34
00:02:03,940 --> 00:02:07,110
There are certain signals which are exception to this.

35
00:02:07,110 --> 00:02:10,590
These refer to them as signals that cannot be caught.

36
00:02:10,590 --> 00:02:13,430
For instance, that would always kill the process.

37
00:02:13,430 --> 00:02:16,910
Here are a few examples of synchronous signals.

38
00:02:16,910 --> 00:02:19,780
For instance as a result of an attempt at

39
00:02:19,780 --> 00:02:24,480
access to illegal memory location to protect that memory location.

40
00:02:24,480 --> 00:02:26,550
This signal SIGSEGV would occur.

41
00:02:26,550 --> 00:02:30,980
Or that we have a signal that occurs synchronously as the result of

42
00:02:30,980 --> 00:02:32,940
an attempt to divide by 0.

43
00:02:32,940 --> 00:02:37,420
An example of a synchronous signal is also the one that can be

44
00:02:37,420 --> 00:02:39,790
directed from one process to another.

45
00:02:39,790 --> 00:02:45,070
So there is an API how to send a directed signal to a specific thread.

46
00:02:45,070 --> 00:02:47,001
And this is really asynchronous event.

47
00:02:47,001 --> 00:02:48,969
There are also asynchronous signals.

48
00:02:48,969 --> 00:02:53,610
For instance, this same command kill that's here used to

49
00:02:53,610 --> 00:02:59,830
send a directed signal can also be used to cause a process to terminate.

50
00:02:59,830 --> 00:03:03,730
And from the process perspective, this is generated asynchronously.

51
00:03:03,730 --> 00:03:08,360
Similarly, a timeout that's generated as a result of a time expiring,

52
00:03:08,360 --> 00:03:10,700
is another example of an asynchronous signal.
