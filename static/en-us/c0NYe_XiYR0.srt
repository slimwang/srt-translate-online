1
00:00:00,000 --> 00:00:04,000
So maybe you already see a pattern emerging here, but I am now going to

2
00:00:04,000 --> 00:00:11,000
deviate just a little bit from this. I am now going to add 3 vertices here, 3 vertices here,

3
00:00:11,000 --> 00:00:17,000
3 vertices here, 3 vertices here, so this is a total of 12 vertices.

4
00:00:17,000 --> 00:00:23,000
And just so that we keep that in mind here, up here we have 8, here we have 12,

5
00:00:23,000 --> 00:00:29,000
and here we have 24 in these layers here. Now how am I going to connect those?

6
00:00:29,000 --> 00:00:34,000
And this is where the picture gets actually quite messy. I'm going to connect

7
00:00:34,000 --> 00:00:41,000
them to all those here. So each of these 3 vertices here that I've added is connected

8
00:00:41,000 --> 00:00:48,000
to 6 other vertices, so there's 6 edges going out here--1, 2, 3, 4, 5, 6--and what you see

9
00:00:48,000 --> 00:00:53,000
also is that each of the vertices here in this layer--the first layer that I added--

10
00:00:53,000 --> 00:01:04,000
is connected to exactly 5 vertices. So 1, 2, 3, 4, 5. And of course I deliberately

11
00:01:04,000 --> 00:01:07,000
constructed this in this way, and I'm going to draw these out here in a minute.

12
00:01:07,000 --> 00:01:13,000
I just want you to understand the principle. I've added these 12 vertices here in a way

13
00:01:13,000 --> 00:01:22,000
such that the greedy algorithm will first take these 12 here, then it will take these 8 here,

14
00:01:22,000 --> 00:01:27,000
and then it will take these 12 here. So I'm constructing my graph so that the greedy

15
00:01:27,000 --> 00:01:32,000
algorithm will choose the vertices in exactly the reverse order that I am adding them

16
00:01:32,000 --> 00:01:37,000
to the network. And in that way I can make that algorithm behave very, very, very badly.

17
00:01:37,000 --> 00:01:41,000
You would think that theoretical computer science is a clean and not messy science,

18
00:01:41,000 --> 00:01:46,000
but I think I can just show you the opposite here. But you get the principle now.

19
00:01:46,000 --> 00:01:54,000
So these 24 vertices here are the first ones that I have added, and I have now added

20
00:01:54,000 --> 00:01:58,000
these layers here. So I first added these 12 here, then these 8, then these 12 here

21
00:01:58,000 --> 00:02:02,000
in such a way that the greedy algorithm will choose these vertices here to be in a

22
00:02:02,000 --> 00:02:08,000
vertex cover and these here in a vertex cover. So the question, of course, now is,

23
00:02:08,000 --> 00:02:13,000
can I add even more vertices to this so that I am still making the greedy algorithm

24
00:02:13,000 --> 00:02:19,000
take my new vertices that I add? And in fact I can, but it will become really messy

25
00:02:19,000 --> 00:02:22,000
to draw. So I'm more going to explain to you how I'm going to do this rather than

26
00:02:22,000 --> 00:02:26,000
actually draw out every single vertex. So you see for each of the vertices

27
00:02:26,000 --> 00:02:31,000
that I've added here, I've connected them to larger and larger groups of these vertices

28
00:02:31,000 --> 00:02:37,000
here in the middle of those original 24, and I can continue this for a little bit by now

29
00:02:37,000 --> 00:02:45,000
adding 2 vertices which would then be connected to groups of 8 down here.

30
00:02:45,000 --> 00:02:53,000
So this would be connected to all over here, and then I will do the same part here.

31
00:02:53,000 --> 00:02:58,000
So again I can add 2 vertices here, and I will connect them to this group of 8,

32
00:02:58,000 --> 00:03:02,000
then 2 more vertices here, and I will connect them to this group of 8.

33
00:03:02,000 --> 00:03:08,000
And if you want, you can of course check. It will still be such that the 6 vertices

34
00:03:08,000 --> 00:03:12,000
I've now added will be the first ones that are picked by the greedy algorithm.

35
00:03:12,000 --> 00:03:16,000
And then those 12, and then those 8, and then those 12.

36
00:03:16,000 --> 00:03:20,000
What I can then do is I can add another 4 vertices, and this time I will look at

37
00:03:20,000 --> 00:03:26,000
groups of 12. So I will add 4 vertices connected to these 12 here in the middle,

38
00:03:26,000 --> 00:03:30,000
and I will add 4 vertices connected to these 12 here in the middle.

39
00:03:30,000 --> 00:03:34,000
And we'll be done soon, so in case you think this gets very tedious, bear with me

40
00:03:34,000 --> 00:03:38,000
for just another moment here, and we'll be done.

41
00:03:38,000 --> 00:03:42,000
So we've added another 8 vertices, and again these will be the first ones picked by

42
00:03:42,000 --> 00:03:46,000
the greedy algorithm. And final addition of vertices actually. I will add

43
00:03:46,000 --> 00:03:53,000
another 11 vertices. And these vertices will be connected to all 24.

44
00:03:53,000 --> 00:03:59,000
Now my question for you is, how large is a minimum vertex cover for this network

45
00:03:59,000 --> 00:04:03,000
that I've constructed here? And remember every vertex is connected to those 24

46
00:04:03,000 --> 00:04:07,000
vertices here in the middle. So please enter the size of the minimum vertex cover

47
00:04:07,000 --> 99:59:59,999
here into this box.
