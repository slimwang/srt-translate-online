1
00:00:00,320 --> 00:00:04,105
I'd expect all three of
these conditions to be true.

2
00:00:04,105 --> 00:00:08,009
Unfortunately, one of them is not
with our current implementation.

3
00:00:08,009 --> 00:00:13,548
This third option 0.1
plus 0.2 equals 0.3

4
00:00:13,548 --> 00:00:19,700
would actually equal 0.300 more zeros,
4.

5
00:00:19,700 --> 00:00:23,360
The reason behind this weird math isn't
that important to this discussion, but

6
00:00:23,360 --> 00:00:26,700
it relates to how computers
perform floating point math.

7
00:00:26,700 --> 00:00:29,100
If you'd like to understand
this problem a bit more,

8
00:00:29,100 --> 00:00:31,210
check out the link in
the instructor notes.

9
00:00:31,210 --> 00:00:33,490
What is important is that
we've defined test and

10
00:00:33,490 --> 00:00:36,550
we've noticed one of these
tests isn't currently failing.

11
00:00:36,550 --> 00:00:38,710
Something as easy as adding
two numbers together.

12
00:00:38,710 --> 00:00:40,320
And we've already encountered an error.

13
00:00:40,320 --> 00:00:42,100
That's the value of testing.

14
00:00:42,100 --> 00:00:45,210
We now have definitive proof our
function is not working correctly,

15
00:00:45,210 --> 00:00:47,040
and we can start fixing that error.
