1
00:00:00,140 --> 00:00:04,290
As we go to cycle 3, again we can free this reservation station.

2
00:00:04,290 --> 00:00:08,200
The instruction has been dispatched. So, in cycle 3 we have,

3
00:00:08,200 --> 00:00:11,930
this reservation station free again. Don't forget to do that because you might

4
00:00:11,930 --> 00:00:16,270
run out of reservation stations pretty much surely otherwise. So in cycle 3,

5
00:00:16,270 --> 00:00:19,356
we are going to try to issue this instruction here, it's an ad. So

6
00:00:19,356 --> 00:00:22,740
we check that we have this type of reservation station. Do we have ROB entries,

7
00:00:22,740 --> 00:00:26,280
yes we do have both. So what we going to do is we going to issue this

8
00:00:26,280 --> 00:00:32,405
instruction. It's an add, it tries to R3, R3 is now renamed to Rob3.

9
00:00:32,405 --> 00:00:37,560
We mark here that we are issuing this add and we put this add here.

10
00:00:37,560 --> 00:00:42,790
The name of the result is Rob3, because we just put this instruction here.

11
00:00:42,790 --> 00:00:48,880
We check R7 and R8. They are renamed to. Just the Register file,

12
00:00:48,880 --> 00:00:53,185
so we can just take those values of 1 and 2 and this instruction is ready to

13
00:00:53,185 --> 00:00:58,687
dispatch,which means it will begin executing the next cycle. It takes only one

14
00:00:58,687 --> 00:01:03,490
cycle to execute so in, cycle 5, it's actually going to try to write the result.

15
00:01:03,490 --> 00:01:07,510
And, now that we have successfully renamed this instruction and so on,

16
00:01:07,510 --> 00:01:11,500
we don't have anything else to do in cycle 3 basically. These two instructions.

17
00:01:11,500 --> 00:01:15,200
I'm not going to write anything on the broadcast box yet.

18
00:01:15,200 --> 00:01:21,730
So with that we can move on to cycle 4. In cycle 4 the add begins execution and

19
00:01:21,730 --> 00:01:25,470
at the beginning of cycle 4, we already have this entry free because we

20
00:01:25,470 --> 00:01:28,830
have this patch in the previous cycles. So now we're going to try to issue this

21
00:01:28,830 --> 00:01:32,965
instruction here we have our free reservation station. We have free ROB entries

22
00:01:32,965 --> 00:01:38,540
so it will be able to ensure in cycle 4, it's going to take his ROB entry.

23
00:01:38,540 --> 00:01:44,050
It will write to R1 so we remember that. We take also a reservation station.

24
00:01:44,050 --> 00:01:49,550
We say that we're going to be broadcasting ROB4 when we do this. now what we do

25
00:01:49,550 --> 00:01:54,280
is, for this instruction we're going to look at the RAT before we update it

26
00:01:54,280 --> 00:01:58,420
to see where would we find our Registers that we're going to use as samples.

27
00:01:58,420 --> 00:02:03,990
We are using R1 and R3. R1 and R3 map to ROB2 and

28
00:02:03,990 --> 00:02:09,820
ROB3. So we actually mark here ROB2 and ROB3.

29
00:02:09,820 --> 00:02:14,350
And we don't have values yet, so this instruction actually will have to wait.

30
00:02:14,350 --> 00:02:17,940
It will not be able to dispatch now because it's actually waiting for, this is

31
00:02:17,940 --> 00:02:22,840
just ROB2 and ROB3, I'm not writing it out because, it would be too crowded.

32
00:02:22,840 --> 00:02:28,650
And after we have read these from the RAT, we are ready to update the RAT.

33
00:02:28,650 --> 00:02:32,620
R1 now needs to point to ROB4. Be careful when you update the RAT.

34
00:02:32,620 --> 00:02:36,570
You first need to check whether you find your register inputs, and

35
00:02:36,570 --> 00:02:40,740
then you rename for your outputs. Because if one of your inputs gets overwritten

36
00:02:40,740 --> 00:02:44,940
with your output, you first need to use the values of the RAT before you rename.

37
00:02:44,940 --> 00:02:47,460
Otherwise, you would, the instruction would be. Waiting for

38
00:02:47,460 --> 00:02:49,900
it's own result which will never happen. So

39
00:02:49,900 --> 00:02:55,280
now R1 begins to point at ROB4 because that's going to be the latest R1 that we,

40
00:02:55,280 --> 00:02:59,520
we're going to produce. And this instruction will not be able to execute here.

41
00:02:59,520 --> 00:03:04,390
It's actually going to execute once both of these operands are ready. So

42
00:03:04,390 --> 00:03:10,804
this basically finishes cycle 4. And we are ready to see what happens in cycle 5
