1
00:00:00,000 --> 00:00:02,000
Well, let's take a look together.

2
00:00:02,000 --> 00:00:05,000
Could we have seen 0 tokens so far?

3
00:00:05,000 --> 00:00:10,000
No, when we've seen 0 tokens the red dot has to be really far to the left.

4
00:00:10,000 --> 00:00:15,000
Currently, the red dot suggests that we've already seen an E and a +.

5
00:00:15,000 --> 00:00:20,000
The + alone takes up 1 token, so we can't be here.

6
00:00:20,000 --> 00:00:23,000
Alright, but could we have just seen 1 token?

7
00:00:23,000 --> 00:00:29,000
Well, since we've seen an expression and a + and the smallest expression is itself,

8
00:00:29,000 --> 00:00:33,000
1 token, we need to have seen at least 2, so we can't be here.

9
00:00:33,000 --> 00:00:41,000
However, we could have seen just 2 if the input so far was INT +.

10
00:00:41,000 --> 00:00:45,000
We've seen 2 tokens and one of our states would be exactly this one.

11
00:00:45,000 --> 00:00:51,000
INT reduces to, or can be rewritten from, E using one of the rules in our grammar.

12
00:00:51,000 --> 00:00:54,000
The + is a terminal, so it always stays the same.

13
00:00:54,000 --> 00:00:55,000
Here's where we are.

14
00:00:55,000 --> 00:00:56,000
How about 3?

15
00:00:56,000 --> 00:00:58,000
Well, this is a little trickier.

16
00:00:58,000 --> 00:01:03,000
In our grammar, if we had seen 3 input tokens, our red dot wouldn't be right here

17
00:01:03,000 --> 00:01:06,000
after the +, it would be over one more.

18
00:01:06,000 --> 00:01:08,000
Something a little different would happen.

19
00:01:08,000 --> 00:01:11,000
It's very hard to have a string in the language of this grammar,

20
00:01:11,000 --> 00:01:13,000
where after 3 tokens you've just seen a +.

21
00:01:13,000 --> 00:01:18,000
But surprisingly, 4 tokens does.

22
00:01:18,000 --> 00:01:20,000
Let's make a little room and take a look and see why.

23
00:01:20,000 --> 00:01:23,000
E can be rewritten by INT. E can be rewritten by INT.

24
00:01:23,000 --> 00:01:25,000
This + stays the same.

25
00:01:25,000 --> 00:01:31,000
So the 3 of these together, E + E are themselves--one more E.

26
00:01:31,000 --> 00:01:33,000
So conceptually from the parsers point of view,

27
00:01:33,000 --> 00:01:39,000
what we've seen so far is an E and a +, assuming we've done all these rewrites

28
00:01:39,000 --> 00:01:43,000
over here on the left, and we're looking for a little more input.

29
00:01:43,000 --> 00:01:48,000
So in fact, we could have seen 4 input tokens INT + INT +

30
00:01:48,000 --> 00:01:50,000
and been in this parsing state.

31
00:01:50,000 --> 00:01:54,000
This might seem a little counterintuitive but remember the glory of parsing,

32
00:01:54,000 --> 00:01:59,000
or the glory of context-free grammars, is that a very concise grammar notation

33
00:01:59,000 --> 00:02:02,000
stands for an infinite number of strings.

34
00:02:02,000 --> 00:02:05,000
Even this very simple grammar has an infinite number of strings in its language,

35
00:02:05,000 --> 00:02:14,000
so it shouldn't be surprising that longer strings than 2 can have very concise parse states.

36
00:02:14,000 --> 00:02:18,000
5 tokens isn't going to work for the same reason that 3 tokens didn't work.

37
00:02:18,000 --> 00:02:20,000
The dot would have to be in another place.

38
00:02:20,000 --> 00:02:23,000
However, if we were to add a few more INTs, this trick that I've done here

39
00:02:23,000 --> 00:02:28,000
of reducing INT goes to INT goes to INT--if I had 1, 2, 3, 4, 5, 6 tokens,

40
00:02:28,000 --> 00:02:31,000
I could also be in the same state.

41
00:02:31,000 --> 99:59:59,999
So 2, 4, 6, 8--the pattern repeats.
