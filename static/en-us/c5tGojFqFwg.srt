1
00:00:00,580 --> 00:00:03,020
All right, so
let's talk about memory leaks.

2
00:00:03,020 --> 00:00:05,170
Memory leaks are sneaky.

3
00:00:05,170 --> 00:00:07,920
They can be slow and insidious,
sometimes taking days or

4
00:00:07,920 --> 00:00:10,520
weeks before you even
realize that you have one.

5
00:00:10,520 --> 00:00:13,810
In fact, you might only realize
memory's an issue when your users start

6
00:00:13,810 --> 00:00:17,890
complaining about mysterious slowdowns
that happen after using your app.

7
00:00:17,890 --> 00:00:19,770
Don't let this happen to you.

8
00:00:19,770 --> 00:00:23,590
Fortunately, with some patience,
a perf mindset, and the right tools,

9
00:00:23,590 --> 00:00:27,040
you'll have the opportunity to abolish
these leaks from your app, period.

10
00:00:27,040 --> 00:00:30,380
We'll use Memory Monitor to watch
the behavior of a leak in action, and

11
00:00:30,380 --> 00:00:33,745
then in the next video, we'll use Heat
Viewer to gain initial confirmation.

12
00:00:34,795 --> 00:00:37,905
Now let's look at a micro example
of what a leak can look like, and

13
00:00:37,905 --> 00:00:40,745
see how the SDK tools can
help us identify such a leak.

14
00:00:41,845 --> 00:00:44,565
In this example, we're going to go
ahead and rotate the device for

15
00:00:44,565 --> 00:00:47,530
a few minutes and
profile it with Memory Monitor.

16
00:00:47,530 --> 00:00:50,940
This is by design to showcase a common
leak situation that can arise during

17
00:00:50,940 --> 00:00:53,640
the creation and
destruction of an activity.

18
00:00:53,640 --> 00:00:57,550
We can intentionally trigger this cycle
by changing the device's orientation.

19
00:00:57,550 --> 00:01:00,450
And yes, I know, it may seem that
this is a totally weird thing to do,

20
00:01:00,450 --> 00:01:04,099
but we're going to do this to
demonstrate how a leak may happen and

21
00:01:04,099 --> 00:01:05,579
to show how they can be slow and
insidious.

22
00:01:07,140 --> 00:01:10,780
Now, in the first pass, the leak slowly
consumes the free memory available to

23
00:01:10,780 --> 00:01:14,890
your app, until eventually it causes
a garbage collection or GC event.

24
00:01:14,890 --> 00:01:17,740
More important, the key thing to
notice is, the garbage collector

25
00:01:17,740 --> 00:01:21,980
isn't able to reclaim that much
energy due to the leak in the app.

26
00:01:21,980 --> 00:01:22,940
And then, eventually,

27
00:01:22,940 --> 00:01:26,500
a second GC event occurs much sooner,
about 30 seconds later.

28
00:01:27,520 --> 00:01:30,570
Now, notice when the leak
consumes all of the free memory,

29
00:01:30,570 --> 00:01:34,740
Android actually adjusts and
grants the app a higher memory ceiling.

30
00:01:34,740 --> 00:01:38,290
While this is a nice adjustment by
the system, if the leak isn't fixed,

31
00:01:38,290 --> 00:01:42,360
it will keep consuming memory until the
system can no longer allocate any more.

32
00:01:42,360 --> 00:01:44,252
This will slow the performance
of the device and

33
00:01:44,252 --> 00:01:46,810
eventually lead to your app crashing.

34
00:01:46,810 --> 00:01:49,140
You can wait a little bit longer,
and the third GC will occur.

35
00:01:49,140 --> 00:01:53,250
And then a fourth somewhat
similar to the first two.

36
00:01:53,250 --> 00:01:55,640
Now, as you can see,
the pattern continues, and

37
00:01:55,640 --> 00:01:57,870
more memory is allocated by the system.

38
00:01:57,870 --> 00:01:59,880
You can also similar
behavior using Heat Viewer.
