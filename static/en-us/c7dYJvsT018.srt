1
00:00:00,390 --> 00:00:06,400
Having seen SPIN's approach to extensibility, now we will look at Exokernel's

2
00:00:06,400 --> 00:00:09,360
approach to operating system extensibility. The

3
00:00:09,360 --> 00:00:12,280
name, Exokernel, itself comes from the

4
00:00:12,280 --> 00:00:15,720
fact that the kernel exposes hardware

5
00:00:15,720 --> 00:00:19,120
explicitly to the operating system extensions

6
00:00:19,120 --> 00:00:26,580
living above it. The basic idea in Exokernel, is to decouple authorization

7
00:00:26,580 --> 00:00:30,420
of the hardware from its actual use. Lets say

8
00:00:30,420 --> 00:00:33,750
you want to do research in my lab. I

9
00:00:33,750 --> 00:00:36,160
may interview you, and once we're on the same

10
00:00:36,160 --> 00:00:39,010
page, I'll give you a key to the lab. And

11
00:00:39,010 --> 00:00:41,820
the resources you need in order to do work

12
00:00:41,820 --> 00:00:45,210
in the lab. Mm, example, laptop, servers and so

13
00:00:45,210 --> 00:00:47,610
on. Then I get out of the way. When

14
00:00:47,610 --> 00:00:52,060
you actually use the resources, that's exactly the same idea

15
00:00:52,060 --> 00:00:58,280
in Exokernel. Library operating system asks for a resource. Exokernel will

16
00:00:58,280 --> 00:01:03,810
validate the request for the resource from the library. And bind the request

17
00:01:03,810 --> 00:01:06,300
to the specific hardware resource. In

18
00:01:06,300 --> 00:01:10,250
other words, Exokernel exposes the hardware

19
00:01:10,250 --> 00:01:17,700
that was requested by the Library OS through creating a secure binding between

20
00:01:17,700 --> 00:01:24,170
the ask and the actual hardware resource. Once Exokernel has established

21
00:01:24,170 --> 00:01:31,150
this binding, it creates an encrypted key for the resource, and gives it to

22
00:01:31,150 --> 00:01:37,090
the requesting library operating system. Similar to the analogy that I gave

23
00:01:37,090 --> 00:01:42,970
you, of a student using my lab resources, the semantics of how the resource

24
00:01:42,970 --> 00:01:48,800
is going to be used by the library is entirely up to the library.

25
00:01:48,800 --> 00:01:55,320
Of course, within the norm of accepted use, similar to what I may impose

26
00:01:55,320 --> 00:01:58,750
as certain restrictions or rules of behavior

27
00:01:58,750 --> 00:02:00,750
that students have to observe in the

28
00:02:00,750 --> 00:02:04,190
lab. Same way, there are certain accepted

29
00:02:04,190 --> 00:02:08,120
norms for the user's resource that Exokernel may

30
00:02:08,120 --> 00:02:10,500
have imposed. And so long as the

31
00:02:10,500 --> 00:02:13,900
library operating system is staying within those norms,

32
00:02:13,900 --> 00:02:17,130
then the semantics of how a particular

33
00:02:17,130 --> 00:02:19,710
hardware resource is used is entirely up to

34
00:02:19,710 --> 00:02:22,540
the library operating system. Once a library

35
00:02:22,540 --> 00:02:25,760
operating system has asked for a resource and

36
00:02:25,760 --> 00:02:28,560
Exokernel has created the binding for that

37
00:02:28,560 --> 00:02:33,190
resource to the requesting library operating system, then,

38
00:02:33,190 --> 00:02:36,740
the operating system is now ready to use the resource. Now, how does it use

39
00:02:36,740 --> 00:02:40,560
the resource? Basically, what the library operating

40
00:02:40,560 --> 00:02:44,380
system will do is present the encrypted key

41
00:02:44,380 --> 00:02:49,110
that is received, authenticating that use of

42
00:02:49,110 --> 00:02:52,600
the resource for this library to the Exokernel.

43
00:02:52,600 --> 00:02:54,890
In other words, Exokernel will be able

44
00:02:54,890 --> 00:02:58,380
to validate whether the key presented to it,

45
00:02:58,380 --> 00:03:00,848
is the key that was presented for this particular

46
00:03:00,848 --> 00:03:04,580
libraries operating system. So in other words, the key

47
00:03:04,580 --> 00:03:07,910
cannot be forged, cannot be passed around. If I

48
00:03:07,910 --> 00:03:11,230
gave a key to this library operating system, that

49
00:03:11,230 --> 00:03:13,970
key, if it is presented to the Exokernel by

50
00:03:13,970 --> 00:03:16,850
this library operating system, it's a valid key. Even

51
00:03:16,850 --> 00:03:20,240
if it's a valid key, but it is not

52
00:03:20,240 --> 00:03:23,760
the operating system to which Exokernel gave the key,

53
00:03:23,760 --> 00:03:26,690
then that request would be denied. So with

54
00:03:26,690 --> 00:03:29,990
a valid key, any time the library operating

55
00:03:29,990 --> 00:03:32,664
system can present the key to the Exokernel,

56
00:03:32,664 --> 00:03:36,390
Exokernel will validate it, and then, the library

57
00:03:36,390 --> 00:03:39,390
operating system is free to go in using

58
00:03:39,390 --> 00:03:42,790
that resource for which it has this valid

59
00:03:42,790 --> 00:03:45,560
key. This is sort of like a doorman

60
00:03:45,560 --> 00:03:48,980
in an apartment building, checking when a resident comes

61
00:03:48,980 --> 00:03:51,380
in, whether the resident is a bona fide

62
00:03:51,380 --> 00:03:55,380
occupant of the residence. Once inside his apartment,

63
00:03:55,380 --> 00:03:57,600
what the resident does is not something that

64
00:03:57,600 --> 00:04:00,490
the doorman cares about. Exactly the same thing

65
00:04:00,490 --> 00:04:03,100
is being done by Exokernel as a doorman

66
00:04:03,100 --> 00:04:06,220
for using the hardware resource for which a

67
00:04:06,220 --> 00:04:10,480
valid key exists with a library operating system.

68
00:04:10,480 --> 00:04:14,080
So, establishing the secure binding is a heavy

69
00:04:14,080 --> 00:04:19,649
duty operation. That's where Exokernel comes in the middle of saying, well, this

70
00:04:19,649 --> 00:04:22,360
particular library operating system wants access

71
00:04:22,360 --> 00:04:24,350
to a specific resource, can I give

72
00:04:24,350 --> 00:04:29,090
it? And it makes that decision. Once such a secure binding has been

73
00:04:29,090 --> 00:04:33,540
established, the actual use of the hardware is going to be much cheaper.
