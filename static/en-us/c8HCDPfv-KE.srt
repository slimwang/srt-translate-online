1
00:00:00,270 --> 00:00:02,150
All right, let's use these games and

2
00:00:02,150 --> 00:00:05,808
screens to create a game with multiple
different screens it can display.

3
00:00:05,808 --> 00:00:09,294
Instead of a ApplicationAdapter here,
we're using a Game.

4
00:00:09,294 --> 00:00:14,168
If we right click on Game,
and say Go To > Declaration,

5
00:00:14,168 --> 00:00:19,792
we can jump into the source code
of the Game class inside LibGDX.

6
00:00:19,792 --> 00:00:22,968
As we see,
Game implements ApplicationListener.

7
00:00:22,968 --> 00:00:27,251
It seems that the Game class has
a screen member variable, and then for

8
00:00:27,251 --> 00:00:30,302
each one of
the ApplicationListener callbacks,

9
00:00:30,302 --> 00:00:35,060
if it has a screen it then delegates
that callback to the screen.

10
00:00:35,060 --> 00:00:37,019
Here we've declared two screens,

11
00:00:37,019 --> 00:00:40,617
one of which displays the number
of frames displayed per second.

12
00:00:40,617 --> 00:00:43,559
And the other display is the number of
seconds between the current frame and

13
00:00:43,559 --> 00:00:44,127
the last one.

14
00:00:44,127 --> 00:00:48,010
To set the active screen, we just
need to call set screen on our game.

15
00:00:48,010 --> 00:00:50,060
Let's check out delta screen.

16
00:00:50,060 --> 00:00:53,236
>> Screens are very similar to
application listeners with a couple

17
00:00:53,236 --> 00:00:54,009
differences.

18
00:00:54,009 --> 00:00:56,837
Instead of create,
screens get a show call.

19
00:00:56,837 --> 00:01:00,967
Screens can receive a hide call when
another screen becomes active and

20
00:01:00,967 --> 00:01:06,120
the render call received by a screen
includes this argument called delta.

21
00:01:06,120 --> 00:01:09,485
The argument delta is the number
of seconds after the previous

22
00:01:09,485 --> 00:01:12,342
frame that this frame is
expected to hit the screen.

23
00:01:12,342 --> 00:01:15,685
In a normal game running
at 60 frames per second,

24
00:01:15,685 --> 00:01:20,834
this will be approximately 0.0167
seconds or 16.7 milliseconds.

25
00:01:20,834 --> 00:01:24,662
However if your game is running on
old hardware or is just trying to

26
00:01:24,662 --> 00:01:28,506
draw way too much stuff you may
end up with a delta that's larger.

27
00:01:28,506 --> 00:01:32,020
In this screen we've created a bitmap
font and a sprite batch, and

28
00:01:32,020 --> 00:01:36,428
we're just displaying the delta that's
been passed into the rendered callback.

29
00:01:36,428 --> 00:01:39,613
Also we've included logging on
all of the life cycle methods so

30
00:01:39,613 --> 00:01:42,750
that we can investigate what
happens when we switch screens.
