1
00:00:00,025 --> 00:00:03,440
So the first question we need to answer for any problem is; What are the inputs?

2
00:00:03,440 --> 00:00:07,334
For this problem their fairly clearly stated says, given your birthday and the

3
00:00:07,334 --> 00:00:10,502
current date. Well, that's the input to the problem. What's the set of inputs we

4
00:00:10,502 --> 00:00:13,685
really want this to work for? Should it really just work for my birthday? And

5
00:00:13,685 --> 00:00:17,305
today's current date? If that's all we wanted it to work for then we can figure

6
00:00:17,305 --> 00:00:20,508
this out once. We don't actually have to write a procedure. So I think what is

7
00:00:20,508 --> 00:00:24,729
intended by this is something much more general. So the inputs are really two

8
00:00:24,729 --> 00:00:27,803
dates, and that gives us the type of the input, that gives us a set of all

9
00:00:27,803 --> 00:00:31,180
possible inputs. We need to think a little more carefully to know if they're all

10
00:00:31,180 --> 00:00:34,283
valid. Well, the statement of the question give us a good clue here. It said,

11
00:00:34,283 --> 00:00:38,561
assume that the birthday and the current data are correct dates and no time

12
00:00:38,561 --> 00:00:41,988
travel. This probably is a valid assumption if we're talking about birthdays and

13
00:00:41,988 --> 00:00:46,499
current dates. If we're comparing any two dates, well this says that the second

14
00:00:46,499 --> 00:00:51,152
date needs to be after the first one. Assumptions like this make life easier for

15
00:00:51,152 --> 00:00:55,660
programmers. That means it's easier to write our code since it has to work for

16
00:00:55,660 --> 00:00:59,768
fewer possible inputs. I like the way Mattias stated this is no time travel. For

17
00:00:59,768 --> 00:01:04,058
a program specification, we probably want to be a little more precise, and just

18
00:01:04,058 --> 00:01:08,200
state simply the second date must be, not be before the first date. And if we're

19
00:01:08,200 --> 00:01:11,244
being good defensive programmers, we should check if this is true. It's an

20
00:01:11,244 --> 00:01:16,458
assumption, it's up to the user of our code to satisfy this, because we've said,

21
00:01:16,458 --> 00:01:20,610
well that's a requirement. To use our solution you have to make sure the second

22
00:01:20,610 --> 00:01:24,020
date is not before the first date, but if we're going to be smart we're going to

23
00:01:24,020 --> 00:01:27,485
program in a more defensive way, because sometimes other people might make

24
00:01:27,485 --> 00:01:30,944
mistakes or we might make mistakes. And we're actually going to check this in

25
00:01:30,944 --> 00:01:34,835
our code. The other assumption we might want is something about the range of

26
00:01:34,835 --> 00:01:39,105
dates. Calendars are very complicated and they've changed over history. We're

27
00:01:39,105 --> 00:01:44,110
going to require that the dates are valid dates in the Gregorian calendar, which

28
00:01:44,110 --> 00:01:48,142
started In October 1582. Our code will probably work for dates outside this

29
00:01:48,142 --> 00:01:51,726
range, but it might not get exactly the right answer, since when the calendar

30
00:01:51,726 --> 00:01:53,553
changed the meaning of dates changed.
