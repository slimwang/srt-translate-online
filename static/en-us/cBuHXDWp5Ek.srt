1
00:00:00,070 --> 00:00:04,610
Now let's discuss hash based
approach to message authentication.

2
00:00:04,610 --> 00:00:09,550
Using hash values for message
authentication has several advantages.

3
00:00:09,550 --> 00:00:13,140
For example, hash functions
are very efficient to compute.

4
00:00:13,140 --> 00:00:17,040
And libraries of hash functions
are widely available.

5
00:00:17,040 --> 00:00:22,270
On the other hand, a hash function such
as SHA cannot be used directly and

6
00:00:22,270 --> 00:00:27,455
by itself for message authentication
because it does not rely on a secret.

7
00:00:27,455 --> 00:00:31,790
There have been a number of proposals
to incorporate a secret key

8
00:00:31,790 --> 00:00:33,825
into an existing hash function.

9
00:00:33,825 --> 00:00:37,945
The approach that has received
the most support is HMAC, and

10
00:00:37,945 --> 00:00:42,785
it has been adopted to other
protocols such as IPsec and TLS.

11
00:00:42,785 --> 00:00:45,709
Here's an illustration
of how HMAC works.

12
00:00:45,709 --> 00:00:50,415
HMAC invokes a hash function and
also secret key K.

13
00:00:50,415 --> 00:00:55,052
The message M consists of
multiple blocks of b bits, for

14
00:00:55,052 --> 00:00:57,330
example, for SHA 512.

15
00:00:57,330 --> 00:01:02,584
Each block is 1,024 bits,
so b would be 1,024.

16
00:01:02,584 --> 00:01:06,210
So the key K would be
first padded to b bits.

17
00:01:06,210 --> 00:01:10,709
This is accomplished by simply
appending zeros to the end of K.

18
00:01:10,709 --> 00:01:13,595
Then the padded key is XORed with ipad,

19
00:01:13,595 --> 00:01:19,030
which is a constant designed to
eliminate any irregularities of the key.

20
00:01:19,030 --> 00:01:22,459
And the result is a b bit S1.

21
00:01:22,459 --> 00:01:25,510
S1 is prepended to the original message.

22
00:01:25,510 --> 00:01:28,500
Then the entire message there is S1, and

23
00:01:28,500 --> 00:01:33,360
the original message is hashed
to produce a n bit hash value.

24
00:01:33,360 --> 00:01:39,126
For example, if the hash function
is SHA 512, then n will be 512.

25
00:01:39,126 --> 00:01:44,100
Then the n bit hash value again
will be padded to b bits.

26
00:01:44,100 --> 00:01:48,130
Then the padded key,
K+, is XORed with opad.

27
00:01:48,130 --> 00:01:54,060
Again, opad is another constant designed
to eliminate irregularities in the key.

28
00:01:54,060 --> 00:01:57,030
The result is a b bit value, S0.

29
00:01:57,030 --> 00:02:02,360
The padded hash is then appended to S0,
and the entire message is hashed.

30
00:02:02,360 --> 00:02:07,810
And the n bit result is HMAC of
the message with the key, K.

31
00:02:07,810 --> 00:02:10,090
And this is how HMAC works.

32
00:02:10,090 --> 00:02:14,840
To summarize,
HMAC uses an existing hash function and

33
00:02:14,840 --> 00:02:18,430
includes a secret key,
K, in the processing.
