1
00:00:00,210 --> 00:00:02,440
The correct answer is all of the above.

2
00:00:02,440 --> 00:00:04,049
The more frequently you checkpoint,

3
00:00:04,049 --> 00:00:06,217
the faster you will be able
to recover from a fault.

4
00:00:06,217 --> 00:00:11,018
This is true because, with a frequent
checkpoint you will have a recent

5
00:00:11,018 --> 00:00:16,630
checkpoint compared to the point of
execution when the fault occurred.

6
00:00:16,630 --> 00:00:18,112
So you will have to replay or

7
00:00:18,112 --> 00:00:22,430
re-execute a less amount of time
of the execution of the process.

8
00:00:22,430 --> 00:00:24,760
Clearly the more
frequently you checkpoint,

9
00:00:24,760 --> 00:00:27,680
the higher the overheads
of that will be.

10
00:00:27,680 --> 00:00:31,490
And furthermore, with frequent
checkpoint, it's more likely that you

11
00:00:31,490 --> 00:00:35,230
will end up catching every single
write to your particular page.

12
00:00:35,230 --> 00:00:39,640
If you spread out the checkpoints,
it's possible that a single page will be

13
00:00:39,640 --> 00:00:43,470
written multiple times, so
dirtied multiple times.

14
00:00:43,470 --> 00:00:45,720
And also,
the more frequently you checkpoint,

15
00:00:45,720 --> 00:00:50,238
you will end up transmitting more state,
checkpointing more state.

16
00:00:50,238 --> 00:00:53,850
And the reason for
this is that with a frequent checkpoint,

17
00:00:53,850 --> 00:00:57,660
it's more likely that you will end
up catching every single one of

18
00:00:57,660 --> 00:01:01,910
the references of the write
updates to a particular page.

19
00:01:01,910 --> 00:01:06,355
If you spread out the checkpoints over
time, it's possible that there will be

20
00:01:06,355 --> 00:01:11,255
repeated writes to a particular page
that you will observe as a single dirty

21
00:01:11,255 --> 00:01:16,020
page and so you will amortize the
checkpoint costs over multiple writes.

22
00:01:16,020 --> 00:01:18,740
With a frequent checkpoint,
both the amount of the state

23
00:01:18,740 --> 00:01:21,450
that will be checkpoint, and
in general the overheads of

24
00:01:21,450 --> 00:01:25,330
the process will be higher than if
you do the checkpoint less recently.

25
00:01:25,330 --> 00:01:29,169
So this is just one of those tradeoffs
where you end up gaining something,

26
00:01:29,169 --> 00:01:31,020
but that's going to cost
you something else.
