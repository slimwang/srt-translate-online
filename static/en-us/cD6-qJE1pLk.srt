1
00:00:00,109 --> 00:00:03,807
Let's start by thinking about how we'll put tiles together after we compute them.

2
00:00:03,807 --> 00:00:09,313
Each individual tile will compute partial results for these P destination threads.

3
00:00:09,313 --> 00:00:15,350
The partial results will reflect the contributions of the forces produced by these P objects,

4
00:00:15,350 --> 00:00:19,957
then, for each of these tiles, we'll add the partial results from all the tiles in a row

5
00:00:19,957 --> 00:00:25,432
to get the complete set of forces that act on the P threads in this band right here.

6
00:00:25,432 --> 00:00:28,465
So let's say we run this tile with P squared threads.

7
00:00:28,465 --> 00:00:33,136
That's going to allow us to compute all P squared individual forces at the same time.

8
00:00:33,136 --> 00:00:39,451
This is good, very parallel, but it's got a couple of not too major, but still significant, downsides.

9
00:00:39,451 --> 00:00:45,715
First is that we would have to share both source and destination parameters for each object across multiple threads.

10
00:00:45,715 --> 00:00:48,490
Remember, we're only fetching each item once.

11
00:00:48,490 --> 00:00:52,490
How many threads must get the information of parameters for each source object and for each destination object?
