1
00:00:00,115 --> 00:00:04,728
The final algorithm we'll discuss, which we're going to call sort, then reduce by key,

2
00:00:04,728 --> 00:00:08,978
is one that I'll just sketch out, primarily because we haven't discussed the underlying algorithms yet.

3
00:00:08,978 --> 00:00:10,647
We'll get to them in the next lecture.

4
00:00:10,647 --> 00:00:14,733
However, it'll be a great mental exercise for you to think about how you might implement this approach.

5
00:00:14,733 --> 00:00:20,623
Let's think about our entries. Here we have 8 entries, as key-value pairs.

6
00:00:20,623 --> 00:00:26,031
The key is the bin number, and in this example we're going to have 3 bins--0, 1 and 2.

7
00:00:26,031 --> 00:00:29,953
And the value is 1, which we're going to add to each bin.

8
00:00:29,953 --> 00:00:34,517
This algorithm has 2 steps. The first is a sort, the second is a reduce.

9
00:00:34,517 --> 00:00:39,458
So first, let's look at the sort. We're going to sort the key value pairs by key.

10
00:00:39,458 --> 00:00:42,861
So here's our keys, and notice it's the same key value pairs that

11
00:00:42,861 --> 00:00:46,183
we have up here, but now they're in ascending order by key.

12
00:00:46,183 --> 00:00:49,818
And the second step is to reduce the result by key.

13
00:00:49,818 --> 00:00:52,788
Naturally enough, this algorithm is called reduce by key.

14
00:00:52,788 --> 00:00:55,621
What I mean here is to add all the elements that have the key together.

15
00:00:55,621 --> 00:01:00,415
So, we'd like to add these four 1's up to create the reduction value of 4,

16
00:01:00,415 --> 00:01:04,566
or, more generally, to reduce these values using reduction operator.

17
00:01:04,566 --> 00:01:07,799
Note that all elements with the same key are contiguous,

18
00:01:07,799 --> 00:01:10,619
which is the key to making an efficient implementation.

19
00:01:10,619 --> 00:01:15,127
Now again, this is likely not something you can do with the algorithms that you know so far.

20
00:01:15,127 --> 00:01:19,416
But libraries of parallel primitives may have implementations for both of these operations.

21
00:01:19,416 --> 00:01:22,931
For instance, the thrust library that accompanies acuda distribution implements

22
00:01:22,931 --> 00:01:25,400
both sort and reduce by key methods.

23
00:01:25,400 --> 00:01:29,400
Thinking about how you might implement these 2 operations is worth your time over the next week.
