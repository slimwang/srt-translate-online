1
00:00:00,000 --> 00:00:03,000
So now that we have an understanding of symmetric ciphers,

2
00:00:03,000 --> 00:00:05,000
and we know how to generate a random key,

3
00:00:05,000 --> 00:00:10,000
we're going to talk about an application, which is to store a file securely.

4
00:00:10,000 --> 00:00:13,000
And our goal here is that we have--this is the computer--

5
00:00:13,000 --> 00:00:16,000
it may look more like a stapler, but it is intended to be a computer.

6
00:00:16,000 --> 00:00:20,000
And we have on that computer, we have some file--

7
00:00:20,000 --> 00:00:23,000
what we'd like to do is store that data on the computer,

8
00:00:23,000 --> 00:00:28,000
know that if we leave the computer in a coffee shop and someone

9
00:00:28,000 --> 00:00:31,000
captures the computer, they won't be able to read the contents in that file

10
00:00:31,000 --> 00:00:34,000
this is to prevent the kind of incident one hears about fairly

11
00:00:34,000 --> 00:00:39,000
frequently in the news, where someone has a list of Social Security Numbers for everyone

12
00:00:39,000 --> 00:00:44,000
at the DMV, at the drivers' licensing office, and they leave that on their laptop

13
00:00:44,000 --> 00:00:47,000
and it gets stolen and then you've got a big worry about all that personal information

14
00:00:47,000 --> 00:00:52,000
being lost. Probably that kind of file shouldn't be stored on someone's laptop

15
00:00:52,000 --> 00:00:57,000
in the first place, but our goal is to be able to store files that contain sensitive information

16
00:00:57,000 --> 00:01:02,000
and know that even if the computer that they're stored on is stolen,

17
00:01:02,000 --> 00:01:04,000
the contents of the file will still be secure.

18
00:01:04,000 --> 00:01:08,000
Now we don't want to just throw the file away, we want the owner of the file

19
00:01:08,000 --> 00:01:10,000
to still be able to read the file.

20
00:01:10,000 --> 00:01:13,000
And so we're going to assume that there's some key that the owner

21
00:01:13,000 --> 00:01:17,000
of the file can store in some other place that's secure.

22
00:01:17,000 --> 00:01:21,000
We'll talk a little bit later--how we might want to do that.

23
00:01:21,000 --> 00:01:25,000
But let's assume there's a key that can be used to decrypt the file.

24
00:01:25,000 --> 00:01:28,000
So here's the straightforward way to do this: we're going to take our file--

25
00:01:28,000 --> 00:01:32,000
we'll call it m--and we'll divide it into blocks

26
00:01:32,000 --> 00:01:36,000
and the block size will depend on the cipher we're using.

27
00:01:36,000 --> 00:01:39,000
Let's assume we're using a cipher with 128-bit block size,

28
00:01:39,000 --> 00:01:43,000
which is the size that AES uses.

29
00:01:43,000 --> 00:01:47,000
Then what we'll store is the ciphertext, and each ciphertext block

30
00:01:47,000 --> 00:01:54,000
is the result of encrypting using the key k, the corresponding message block.

31
00:01:54,000 --> 00:01:59,000
So how well does this work? Let's try a quiz.

32
00:01:59,000 --> 00:02:02,000
So the question is: Assuming that E has perfect secrecy--

33
00:02:02,000 --> 00:02:05,000
we know this is not true, because we're reusing the key

34
00:02:05,000 --> 00:02:08,000
to encrypt multiple messages and Claude Shannon showed

35
00:02:08,000 --> 00:02:12,000
that this would only be possible in the case where

36
00:02:12,000 --> 00:02:16,000
the number of possible keys must exceed, or be equal to,

37
00:02:16,000 --> 00:02:19,000
the number of possible messages. And that's not the case here.

38
00:02:19,000 --> 00:02:21,000
But let's assume that for now.

39
00:02:21,000 --> 00:02:25,000
What can an attacker learn if they capture the laptop and acquire C?

40
00:02:25,000 --> 00:02:28,000
Check all the choices that are true--the choices are: nothing, the length of m,

41
00:02:28,000 --> 00:02:31,000
the value of k, which blocks in m are equal.
