1
00:00:00,260 --> 00:00:03,719
So let's look at what lock synchronization looks like.

2
00:00:03,719 --> 00:00:06,128
So we said that a lock, or mutex is

3
00:00:06,128 --> 00:00:09,105
just a location in memory. So let's say that

4
00:00:09,105 --> 00:00:12,488
we are using integers, to represent the lock structure. So

5
00:00:12,488 --> 00:00:16,110
really, a lock is just a number. We initialize

6
00:00:16,110 --> 00:00:18,980
a lock variable. So you pass a lock variable to

7
00:00:18,980 --> 00:00:22,410
initialize to let's say a lock_init function. And what

8
00:00:22,410 --> 00:00:25,272
it's going to do is set the lock. To an

9
00:00:25,272 --> 00:00:29,116
unlocked value, which, let's say that's 0. So pretty

10
00:00:29,116 --> 00:00:31,997
much lock initialization is just write 0, to that

11
00:00:31,997 --> 00:00:36,610
memory location that represents the lock. Zero means unlocked

12
00:00:36,610 --> 00:00:40,070
in this case. And now the lock function, the function

13
00:00:40,070 --> 00:00:42,120
that tries to acquire the lock and make sure

14
00:00:42,120 --> 00:00:44,870
that we're alone in doing that. We'll do something

15
00:00:44,870 --> 00:00:47,587
like this. It will spin, as long as the

16
00:00:47,587 --> 00:00:50,352
lock var is 1, which is the lock value and

17
00:00:50,352 --> 00:00:52,880
once it sees that lock var is 0 not 1,

18
00:00:52,880 --> 00:00:55,724
it's going to put 1 in that value, to mark

19
00:00:55,724 --> 00:00:58,884
it as locked, and then we can enter the critical

20
00:00:58,884 --> 00:01:02,202
section because others will now see our 1 and spin

21
00:01:02,202 --> 00:01:05,519
there, and then to unlock, we will just, set the

22
00:01:05,519 --> 00:01:09,640
lock variable back to being free, once we do this.

23
00:01:09,640 --> 00:01:12,853
Coherence insures that whatever is waiting here, now sees a

24
00:01:12,853 --> 00:01:15,499
0 and acquires the log themselves, so we let them

25
00:01:15,499 --> 00:01:19,320
go, into the critical section. But this log function

26
00:01:19,320 --> 00:01:23,044
doesn't really work. Suppose you have two threads, the

27
00:01:23,044 --> 00:01:25,932
purple, and the green that come to this point

28
00:01:25,932 --> 00:01:29,488
at the same time. The log was initialized to

29
00:01:29,488 --> 00:01:35,420
0, both of them read the log for the first time, see 0. Both of them exit this

30
00:01:35,420 --> 00:01:38,040
loop because the lock var is not 1, so

31
00:01:38,040 --> 00:01:40,640
both of them come here, write 1 to the lock

32
00:01:40,640 --> 00:01:43,740
var, and then leave this lock function, and now both

33
00:01:43,740 --> 00:01:46,070
of them are in the critical section, which is what we

34
00:01:46,070 --> 00:01:50,056
were trying to prevent. What we really need to correctly implement

35
00:01:50,056 --> 00:01:53,251
the lock function, is that the looking at lock var and

36
00:01:53,251 --> 00:01:56,985
seeing 0. And the writing to Lock var of 1, needs

37
00:01:56,985 --> 00:02:00,135
to be atomic, which means we really need to do this

38
00:02:00,135 --> 00:02:03,135
in a critical section of its own to make sure that

39
00:02:03,135 --> 00:02:05,835
when we see a 0, we end up writing 1 before

40
00:02:05,835 --> 00:02:11,152
anybody else gets to see a 0. Or at least, when we see a 0 we try to write 1,

41
00:02:11,152 --> 00:02:13,492
but we know if we were the one to write

42
00:02:13,492 --> 00:02:17,167
1 or if somebody did it before us. We should not

43
00:02:17,167 --> 00:02:21,260
write 1 if somebody succeeded in writing 1 before us.

44
00:02:21,260 --> 00:02:23,980
So we have some sort of a paradox here, in

45
00:02:23,980 --> 00:02:27,500
that, we need locks here, in order to implement the

46
00:02:27,500 --> 00:02:31,160
lock function. So how do we ever support a lock function?

47
00:02:31,160 --> 00:02:33,470
Because in order to have a working lock function we

48
00:02:33,470 --> 00:02:35,630
really need to have a lock and an unlock here.
