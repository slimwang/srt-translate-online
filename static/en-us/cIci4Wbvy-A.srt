1
00:00:00,150 --> 00:00:01,690
This puts us in a good position to be able

2
00:00:01,690 --> 00:00:04,019
to go back to that question we looked at before,

3
00:00:04,019 --> 00:00:06,080
so lets look at it a little bit differently this

4
00:00:06,080 --> 00:00:09,440
time. If our hypothesis space is the set of functions that

5
00:00:09,440 --> 00:00:14,970
take 10 bit inputs and there is a hypothesis corrisponding

6
00:00:14,970 --> 00:00:18,360
to returning each of those 10 bits, seperate hypthesis, one

7
00:00:18,360 --> 00:00:20,990
returns the first bit, one returns the second bit. And

8
00:00:20,990 --> 00:00:25,360
so on, and now we have a target of Epsilon equals

9
00:00:25,360 --> 00:00:31,620
point 1, so we would like to, return a hypothesis whose error is less

10
00:00:31,620 --> 00:00:34,080
than or equal to point 1, and we want to be pretty sure of it,

11
00:00:34,080 --> 00:00:37,740
the error, or failure probability needs to be less than or equal to point

12
00:00:37,740 --> 00:00:39,290
2, and lets just say for concreteness,

13
00:00:39,290 --> 00:00:41,680
that our distribution of our imput is uniform.

14
00:00:41,680 --> 00:00:42,270
>> Ok.

15
00:00:42,270 --> 00:00:44,640
>> So given this setup, how many samples

16
00:00:44,640 --> 00:00:47,550
do we need to pack learn this hypothesis set.

17
00:00:47,550 --> 00:00:47,680
>> Okay.

18
00:00:47,680 --> 00:00:50,370
>> And remember the algorithm that we're going to use is we're going to

19
00:00:50,370 --> 00:00:53,662
draw sample of the size that we want. Then we are

20
00:00:53,662 --> 00:00:58,190
going to be confident that we've epsilon exhausted that, that, version space.

21
00:00:58,190 --> 00:01:00,510
And so anything they left in the version space should have low

22
00:01:00,510 --> 00:01:05,155
error. And that procedure should fail with probability, no more than .2.

23
00:01:05,155 --> 00:01:08,291
>> Right. So it's just exceeds probability .8.

24
00:01:08,291 --> 00:01:08,524
>> Yeah.

25
00:01:08,524 --> 00:01:09,390
>> Or. Better.

26
00:01:09,390 --> 00:01:11,440
>> Okay, think we can work that through?

27
00:01:11,440 --> 00:01:12,490
>> I think we can.

28
00:01:12,490 --> 00:01:13,670
>> Alright let's do it.

29
00:01:13,670 --> 00:01:14,820
>> Okay. Cool.
