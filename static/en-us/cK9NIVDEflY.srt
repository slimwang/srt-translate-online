1
00:00:00,750 --> 00:00:03,050
Let's keep our image
cache under control.

2
00:00:03,050 --> 00:00:06,675
We're going to do this from
a index controller in public JS

3
00:00:06,675 --> 00:00:08,383
mainIndexControl.js.

4
00:00:08,383 --> 00:00:12,970
I'm going to start by creating a new
method called cleanImageCache.

5
00:00:14,970 --> 00:00:17,730
When the page loads it
starts the controller so

6
00:00:17,730 --> 00:00:22,390
in there I'm going to call a new
cleanImageCache method but that means

7
00:00:22,390 --> 00:00:26,310
the cache can still go out of control If
the user keeps the page open for ages.

8
00:00:26,310 --> 00:00:29,690
So will also call it every five minutes.

9
00:00:29,690 --> 00:00:33,590
Now we need to do is implement
this new clean image cache method.

10
00:00:33,590 --> 00:00:36,940
Implementing clean image cache is
going to bring together index TB and

11
00:00:36,940 --> 00:00:38,090
the cache API.

12
00:00:38,090 --> 00:00:40,029
A combination of things we've
learned in this course.

13
00:00:41,100 --> 00:00:43,150
And we've got a Mike on the line.

14
00:00:43,150 --> 00:00:46,830
So Mike it looks like this is
the end of course boss fight.

15
00:00:46,830 --> 00:00:48,320
>> Yeah.
This is a toughy but

16
00:00:48,320 --> 00:00:49,110
I bet they can do it.

17
00:00:50,190 --> 00:00:53,240
>> To start you want to catch up
with the code Jake just wrote.

18
00:00:53,240 --> 00:00:57,490
Do this by running git reset --hard
to remove any local changes you have.

19
00:00:57,490 --> 00:01:02,050
Then, git checkout task-clean-photos
to get the stubbed methods.

20
00:01:02,050 --> 00:01:06,406
Now head over to
public/js/main/indexcontroller.js,

21
00:01:06,406 --> 00:01:08,001
the main page script.

22
00:01:08,001 --> 00:01:11,589
Your task is to implement
_cleanImageCache.

23
00:01:11,589 --> 00:01:14,306
It involves getting all
the messages from the database,

24
00:01:14,306 --> 00:01:17,814
looking at what photos they need,
then going through the images cache and

25
00:01:17,814 --> 00:01:20,370
getting rid of ones you
don't need any more.

26
00:01:20,370 --> 00:01:24,370
Remember that the photo's property may
not exactly match the URL in the cache.

27
00:01:25,390 --> 00:01:27,550
Once you've written the code,
head over to the browser and

28
00:01:27,550 --> 00:01:30,470
refresh the page using the force
update on reload option.

29
00:01:30,470 --> 00:01:32,920
So you only need to refresh
once to see changes.

30
00:01:32,920 --> 00:01:34,110
Looking at dev tools,

31
00:01:34,110 --> 00:01:37,760
you should see the cache only
contains images that are on the page.

32
00:01:37,760 --> 00:01:42,780
An easy way to test is to open a new
tab and navigate to the URL here.

33
00:01:42,780 --> 00:01:45,990
We can see in the cache that
this image has been stored.

34
00:01:45,990 --> 00:01:48,880
Now when I reload witter
the cleanup code kicks in and

35
00:01:48,880 --> 00:01:51,080
the image is gone from the cache.

36
00:01:51,080 --> 00:01:53,960
To double check everything is working,
head to the Settings page and

37
00:01:53,960 --> 00:01:57,570
type cache-clean into the test field and
press Enter.

38
00:01:57,570 --> 00:02:00,250
You now have eight seconds to
trigger your cleanup code.

39
00:02:00,250 --> 00:02:02,453
The best way to do this is
to just refresh the app.
