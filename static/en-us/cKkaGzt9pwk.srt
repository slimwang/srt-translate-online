1
00:00:00,320 --> 00:00:03,490
So here's one way to define hashtable_lookup. So we're going to take

2
00:00:03,490 --> 00:00:06,540
the table and the key. And the first step is to

3
00:00:06,540 --> 00:00:09,960
find the bucket, so we'll use the hashtable_get_bucket that we defined

4
00:00:09,960 --> 00:00:13,140
earlier for that, and store it in a variable called bucket.

5
00:00:13,140 --> 00:00:17,110
So we'll use hashtable_get_bucket to look up in the hashtable where

6
00:00:17,110 --> 00:00:19,930
that key would occur, and we'll store that in the bucket.

7
00:00:19,930 --> 00:00:21,530
But now to do the lookup we need to go through

8
00:00:21,530 --> 00:00:25,660
all the entries in that bucket, find one that matches the key.

9
00:00:25,660 --> 00:00:27,360
To do the lookup, we need to go through all the

10
00:00:27,360 --> 00:00:29,502
entries in the bucket. So we'll use a for loop for that,

11
00:00:29,502 --> 00:00:33,540
going through the entries. For each entry, we need to check whether

12
00:00:33,540 --> 00:00:36,950
the key part of that entry, matches the key, and remember the

13
00:00:36,950 --> 00:00:40,430
bucket was a list of entries. And each entry in the bucket

14
00:00:40,430 --> 00:00:44,720
was a keyword in the value. In the case for our web

15
00:00:44,720 --> 00:00:47,880
crawler, the value was a list of URLs. So if the entry

16
00:00:47,880 --> 00:00:50,870
matches the key, so the first part of the entry is the

17
00:00:50,870 --> 00:00:53,760
keyword, if that matches the key we're looking for, then what

18
00:00:53,760 --> 00:00:57,080
we want to do is return the value. So that's the result

19
00:00:57,080 --> 00:01:00,600
of entry position one. If it doesn't match, well then we

20
00:01:00,600 --> 00:01:02,790
want to keep going, keep trying the next, we're going to keep going through

21
00:01:02,790 --> 00:01:06,450
this for loop, checking all the entries in the bucket. When

22
00:01:06,450 --> 00:01:08,870
we get to the end, we didn't find it, and what

23
00:01:08,870 --> 00:01:10,400
we said in the question was if it's not in the

24
00:01:10,400 --> 00:01:13,990
table, what we should do is output none, so now we'll return,

25
00:01:16,320 --> 00:01:20,440
the value none. So let's try that in the Python interpreter.

26
00:01:20,440 --> 00:01:24,170
So here's the code, we're defining a hashtable_lookup, we find the bucket,

27
00:01:24,170 --> 00:01:26,480
we loop through all the entries in the bucket, if we

28
00:01:26,480 --> 00:01:29,680
find one where the key matches, we return the value associated with

29
00:01:29,680 --> 00:01:32,560
that key, otherwise we return none. When we got to the

30
00:01:32,560 --> 00:01:35,290
end of the bucket without finding the entry, we know it couldn't

31
00:01:35,290 --> 00:01:38,090
exist anywhere else in the hash table because the only place that

32
00:01:38,090 --> 00:01:41,320
keyword could appear is in this bucket. We still have all the

33
00:01:41,320 --> 00:01:43,870
same code from before, that makes the hashtable, that gets the

34
00:01:43,870 --> 00:01:47,160
bucket and then adds to the table. And, we'll test it

35
00:01:47,160 --> 00:01:49,730
using some of the code we wrote before. We're going to add

36
00:01:49,730 --> 00:01:53,140
several words to our hashtable, and let's try looking up a

37
00:01:53,140 --> 00:01:57,370
keyword. We'll look up udacity. And we get the value 23,

38
00:01:57,370 --> 00:02:01,140
which is what we expect, that's the value that we associated

39
00:02:01,140 --> 00:02:03,408
with udacity. So this is looking pretty good. We've got our

40
00:02:03,408 --> 00:02:06,490
hashtable almost working. The one problem is the one we mentioned

41
00:02:06,490 --> 00:02:09,250
before, if we try to change the value

42
00:02:09,250 --> 00:02:11,320
associated with udacity, and we're going to need to

43
00:02:11,320 --> 00:02:15,680
do this for our web index, right? When we add all of the urls to the table,

44
00:02:15,680 --> 00:02:19,786
we need to keep adding UR, URLs. We don't want to lose the one we have, but we

45
00:02:19,786 --> 00:02:21,979
want to change the value associated with, with that

46
00:02:21,979 --> 00:02:24,710
keyword. Now, we do the look up again, and

47
00:02:26,750 --> 00:02:29,010
we get the same result. And the reason we got the

48
00:02:29,010 --> 00:02:31,740
same result, if we look at the bucket in the hashtable that's

49
00:02:31,740 --> 00:02:35,140
associated with the keyword udacity, well what we see is it's a

50
00:02:35,140 --> 00:02:38,690
list of two elements. And because of the way we implemeneted add,

51
00:02:38,690 --> 00:02:41,630
the newer one is later in that list, because of the way

52
00:02:41,630 --> 00:02:46,290
we define lookup, it's always going to find the first one it matches.

53
00:02:46,290 --> 00:02:48,980
It's going through the entries in order. The first one that matches

54
00:02:48,980 --> 00:02:51,590
it returns that value. So thats why we get the value 23.

55
00:02:51,590 --> 00:02:53,810
So we're really almost done, but we have to

56
00:02:53,810 --> 00:02:56,240
make one other change. We want to change add to be

57
00:02:56,240 --> 00:02:59,640
more like update. So instead of adding a new entry,

58
00:02:59,640 --> 00:03:02,270
we want to update the value that's associated with that entry.
