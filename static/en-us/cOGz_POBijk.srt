1
00:00:00,180 --> 00:00:04,420
Okay, so we have been asked when will this instruction commit. We already know

2
00:00:04,420 --> 00:00:09,960
that this one will broadcast the result in cycle 16, that means it cannot

3
00:00:09,960 --> 00:00:14,062
commit in the next cycle. So, basically in cycle 15 we have committed this,

4
00:00:14,062 --> 00:00:17,950
in cycle 16 we cannot commit this because the broadcast is happening in 16,

5
00:00:17,950 --> 00:00:22,460
we can only commit it at 17. Next cycle 18, we will check if this can commit.

6
00:00:22,460 --> 00:00:26,050
Yes it can because it has already broadcasted its result and it's done.

7
00:00:26,050 --> 00:00:31,040
And finally this becomes 19. So the correct answer here is 19.

8
00:00:31,040 --> 00:00:34,938
You can see that, to determine this we didn't actually have to figure out what

9
00:00:34,938 --> 00:00:40,360
really happens here. But let's do that for the sake of exercise. So in cycle 17,

10
00:00:40,360 --> 00:00:46,070
this gets marked down. 32 gets deposited in register 1. We check the mapping for

11
00:00:46,070 --> 00:00:50,670
R1. Is it ROB4, no. We leave the RAT alone, and free this ROB entry.

12
00:00:50,670 --> 00:00:56,480
In cycle 18, we can commit this. We put minus 1 in R4. We check the entry for

13
00:00:56,480 --> 00:01:01,282
R4. Is it pointing to ROB5? It is. We changed the RAT to point to this R4 and

14
00:01:01,282 --> 00:01:06,228
we free the ROB entry. And finally in cycle 19, we commit this instruction,

15
00:01:06,228 --> 00:01:10,192
we put the value of R3 into R1, we then check the ROB entry for

16
00:01:10,192 --> 00:01:14,516
R1, is it pointing to ROB6? Yes it is. Make it point to here, and

17
00:01:14,516 --> 00:01:19,017
we can free this ROB entry. And this concludes really what happens,

18
00:01:19,017 --> 00:01:24,890
in this whole program as far as, you know, cycles one through 19 are concerned.
