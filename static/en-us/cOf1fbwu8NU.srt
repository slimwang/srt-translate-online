1
00:00:00,500 --> 00:00:02,836
Okay, so we spent a lot of time talking

2
00:00:02,836 --> 00:00:05,683
about how to use hashing and, and the hmac

3
00:00:05,683 --> 00:00:08,968
variant of hashing to make cookies that won't be

4
00:00:08,968 --> 00:00:13,690
tampered with. Let's talk about using passwords for hashing. So,

5
00:00:15,180 --> 00:00:16,650
say we have a table for users in our

6
00:00:16,650 --> 00:00:20,230
database, and this table has a couple columns. One column

7
00:00:20,230 --> 00:00:23,170
is for the user's name. And another column is

8
00:00:23,170 --> 00:00:25,560
for the user's password. If we wanted to verify a,

9
00:00:25,560 --> 00:00:27,450
a user is valid we might have a function that looks

10
00:00:27,450 --> 00:00:29,660
like this. You know, and this would be called when somebody

11
00:00:29,660 --> 00:00:33,520
logs in, and it problably say like, user, you know, equals

12
00:00:33,520 --> 00:00:35,620
get user, where this is some function that gets the user

13
00:00:35,620 --> 00:00:38,250
from the database. And then we'd say, you know, so if

14
00:00:38,250 --> 00:00:42,260
this user exists and this user's password equals pw, what was

15
00:00:42,260 --> 00:00:46,100
passed in, return user, and that's, and that's simple enough. Now,

16
00:00:46,100 --> 00:00:50,802
the problem with this approach is that if your database gets

17
00:00:50,802 --> 00:00:53,790
compromised, you are in trouble. You gave away all of

18
00:00:53,790 --> 00:00:57,090
your users' passwords. Which means, not only are your users

19
00:00:57,090 --> 00:01:01,090
angry, because you compromised their privacy your website is in

20
00:01:01,090 --> 00:01:03,770
trouble, because you've got bad guys logging in, screwing around

21
00:01:03,770 --> 00:01:07,350
with all people's accounts, because they know everybody's passwords. So

22
00:01:07,350 --> 00:01:09,700
that's a really bad situation. So what we want to

23
00:01:09,700 --> 00:01:12,450
do is, instead of storing these plain text passwords in

24
00:01:12,450 --> 00:01:15,940
our database, we'll store a password hash in our database.

25
00:01:15,940 --> 00:01:23,706
So we'll have h of hunter two and h of Metallica. And if our

26
00:01:23,706 --> 00:01:28,746
database is compromised, all the attacker has is a bunch of a bunch of password

27
00:01:28,746 --> 00:01:31,266
hashes, and you know, it's very, very

28
00:01:31,266 --> 00:01:34,650
difficult, basically impossible, to turn the hash of

29
00:01:34,650 --> 00:01:38,286
this into the actual input parameter. This

30
00:01:38,286 --> 00:01:41,366
this function changes a little bit, so instead

31
00:01:41,366 --> 00:01:45,216
of comparing pw to the password field in the database,

32
00:01:45,216 --> 00:01:48,219
we compare hash of pw to the password hash in the

33
00:01:48,219 --> 00:01:52,620
database. And all a sudden we're in a much better situation.

34
00:01:52,620 --> 00:01:55,430
This takes very little work, and your database doesn't have any

35
00:01:55,430 --> 00:01:57,720
plain text passwords in it. And if your database does get

36
00:01:57,720 --> 00:02:00,650
compromised, all the attacker has is a bunch of hashes and

37
00:02:00,650 --> 00:02:03,760
not a, not a bunch of valuable passwords. So, this is

38
00:02:03,760 --> 00:02:06,960
a very important strategy that you should employ when building user

39
00:02:06,960 --> 00:02:09,820
registration systems, such as on this week's homework

40
00:02:11,280 --> 00:02:12,850
but before we get there, let's do a quiz.
