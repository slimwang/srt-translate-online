1
00:00:00,340 --> 00:00:02,719
The result comes back and when the result comes

2
00:00:02,719 --> 00:00:05,890
back the client box is executing some process C2. The

3
00:00:05,890 --> 00:00:08,790
kernel has to switch to this client, so that is

4
00:00:08,790 --> 00:00:12,240
can see the results, an continue with it's execution. So

5
00:00:12,240 --> 00:00:15,480
this context switch, is again in the critical path of

6
00:00:15,480 --> 00:00:19,180
RPC latency. So if you look at RPC call, the

7
00:00:19,180 --> 00:00:22,052
two contact switches that are in the critcal path of

8
00:00:22,052 --> 00:00:25,520
RPC latency. There's a context switch that happens here and

9
00:00:25,520 --> 00:00:28,210
the context switch that happens here. So only two

10
00:00:28,210 --> 00:00:31,450
context switches are in the critical path of the latency,

11
00:00:31,450 --> 00:00:34,170
the context switch that happens on the server machine

12
00:00:34,170 --> 00:00:37,490
when the call comes in, and similarity, the context switch

13
00:00:37,490 --> 00:00:40,590
that happens on the client machine when the results

14
00:00:40,590 --> 00:00:43,620
come in. So this context switch that happens on the

15
00:00:43,620 --> 00:00:48,030
client machine to keep the client machine Utilizied, can be

16
00:00:48,030 --> 00:00:50,840
overlapped with the network communication to send the call out.

17
00:00:50,840 --> 00:00:52,770
So in other words, this context which is

18
00:00:52,770 --> 00:00:55,690
not the critical path of RPC latency and

19
00:00:55,690 --> 00:00:59,600
therefore do this context which, while the RPC

20
00:00:59,600 --> 00:01:03,070
call. Is in transmission on the wire. So while

21
00:01:03,070 --> 00:01:06,120
overlapping the context switch that happens on the

22
00:01:06,120 --> 00:01:08,810
client box after the call has been sent

23
00:01:08,810 --> 00:01:11,320
out with the communication time on the wire

24
00:01:11,320 --> 00:01:15,790
for the opposite call. Similarly on the server side,

25
00:01:15,790 --> 00:01:19,280
once the server is completed execution and it is

26
00:01:19,280 --> 00:01:21,450
ready to send the results out, send it out of

27
00:01:21,450 --> 00:01:24,110
the wire and in parallel with sending it out

28
00:01:24,110 --> 00:01:27,580
in the wire, it can overlap The contact that happens

29
00:01:27,580 --> 00:01:30,310
here in order to keep the server box busy

30
00:01:30,310 --> 00:01:34,380
doing useful stuff, S2, S2 that can be overlapped with

31
00:01:34,380 --> 00:01:38,480
this network communication. So, only this contact switch and

32
00:01:38,480 --> 00:01:41,600
this contact switch are in the critical path of latency.

33
00:01:41,600 --> 00:01:44,490
So, we can reduce the number of contact switches

34
00:01:44,490 --> 00:01:47,370
down to two. Originally we started with 4, we

35
00:01:47,370 --> 00:01:50,840
can reduce it down to 2. By observing that

36
00:01:50,840 --> 00:01:53,030
the context which is that happened on the client end

37
00:01:53,030 --> 00:01:57,540
box and the server box to keep them utilized

38
00:01:57,540 --> 00:02:00,910
can be overlapped with a network communication for sending

39
00:02:00,910 --> 00:02:03,840
the arguments over to the server, or sending the

40
00:02:03,840 --> 00:02:06,800
results over to the client. Of course we are greedy.

41
00:02:06,800 --> 00:02:08,919
Can we reduce it to one? Can we actually

42
00:02:08,919 --> 00:02:12,640
reduce the number of context switches Down to one. Let's

43
00:02:12,640 --> 00:02:16,430
think about this. So we said that when this RPC

44
00:02:16,430 --> 00:02:19,490
call was made, the operating system on the client side

45
00:02:19,490 --> 00:02:24,040
said, well, this is a blocking semantic, and therefore,

46
00:02:24,040 --> 00:02:26,220
this guy is not going to do any useful work, so

47
00:02:26,220 --> 00:02:28,770
I'm going to block him and wait for the results to

48
00:02:28,770 --> 00:02:32,000
come in. So this context switch that c, the operating

49
00:02:32,000 --> 00:02:34,990
system did on the client side Was essentially to

50
00:02:34,990 --> 00:02:39,460
keep this client box from being under-utilized, but do we

51
00:02:39,460 --> 00:02:42,170
really need to do the switch? Well, it really

52
00:02:42,170 --> 00:02:45,840
depends. If the server procedure is going to execute for

53
00:02:45,840 --> 00:02:49,160
a long time, then, you know, this client box

54
00:02:49,160 --> 00:02:51,790
is going to be under-utilized for a long time. And

55
00:02:51,790 --> 00:02:53,900
in that case, it might be a good thing

56
00:02:53,900 --> 00:02:57,090
to context which in order to make sure that we

57
00:02:57,090 --> 00:03:00,070
are utilizing the resources that we have. But on

58
00:03:00,070 --> 00:03:04,870
the other hand, If, suppose, this RPC call, we know

59
00:03:04,870 --> 00:03:06,980
that this RPC call is going to come back very

60
00:03:06,980 --> 00:03:09,270
soon. And if it is on a local area network

61
00:03:09,270 --> 00:03:11,400
and the server procedure that is going to be executed

62
00:03:11,400 --> 00:03:13,672
is not going to take a long time. Then perhaps

63
00:03:13,672 --> 00:03:17,980
that RPC call will come back very quickly. If that

64
00:03:17,980 --> 00:03:22,320
is the case, we can get rid of this context

65
00:03:22,320 --> 00:03:25,230
switch that we talked about here. In order to

66
00:03:25,230 --> 00:03:27,930
keep the client box busy, we did this context switch.

67
00:03:27,930 --> 00:03:31,670
Don't do that. We can spin instead of switching

68
00:03:31,670 --> 00:03:34,760
on the client side. And if you do that, then

69
00:03:34,760 --> 00:03:37,750
the client is reading but is not being context

70
00:03:37,750 --> 00:03:41,470
restored. It is just that the box is underutilized, so

71
00:03:41,470 --> 00:03:44,950
the only context which that we incur. Is the context

72
00:03:44,950 --> 00:03:47,400
which on the server because you never know when an

73
00:03:47,400 --> 00:03:49,930
RPC call is going to come in. So when an RPC

74
00:03:49,930 --> 00:03:53,090
call comes in, you obviously have to contact switch into

75
00:03:53,090 --> 00:03:56,140
the server context in order to execute the call. That's

76
00:03:56,140 --> 00:03:59,390
the necessary evil. We'll incur that. But on the client side,

77
00:03:59,390 --> 00:04:01,740
what we're going to do is, we're going to spin instead of

78
00:04:01,740 --> 00:04:06,470
switching so that. Even though the box is underutilized, you're not

79
00:04:06,470 --> 00:04:09,390
doing anything on the client side, just sending the call

80
00:04:09,390 --> 00:04:12,780
out and waiting. And in that case, we've gotten rid of

81
00:04:12,780 --> 00:04:15,970
the second context switch that you need to incur. Because

82
00:04:15,970 --> 00:04:19,660
another context was stalled and therefore this context switch which we

83
00:04:19,660 --> 00:04:23,400
said is in, inevitable, because. It has to be done

84
00:04:23,400 --> 00:04:26,310
in order to receive the results for the client. Well, we

85
00:04:26,310 --> 00:04:28,850
can get rid of it if we never switched in

86
00:04:28,850 --> 00:04:32,060
the first place, and that's the trick here. To reduce the

87
00:04:32,060 --> 00:04:34,340
number of conflicts which is down to one, we can

88
00:04:34,340 --> 00:04:38,030
spin on the client side instead of switching so that we

89
00:04:38,030 --> 00:04:40,840
can be ready to receive. The results of

90
00:04:40,840 --> 00:04:44,370
the RPC call execution when the server is done.

91
00:04:44,370 --> 00:04:47,690
Again, the intent here is that we wanted to

92
00:04:47,690 --> 00:04:50,570
the latency that is incurred in the RPC call.

93
00:04:50,570 --> 00:04:53,810
And since these two contract switches were in the

94
00:04:53,810 --> 00:04:56,720
critical path of the latency, we would really like

95
00:04:56,720 --> 00:04:59,390
to see how we can elimintate at least one

96
00:04:59,390 --> 00:05:03,110
of them. And this context which is inevitable and

97
00:05:03,110 --> 00:05:05,730
this context which we can eliminate, by spinning on

98
00:05:05,730 --> 00:05:08,180
the client side instead of switching in the first place.
