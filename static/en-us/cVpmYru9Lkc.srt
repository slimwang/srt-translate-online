1
00:00:00,000 --> 00:00:04,000
A better random tester for these functions would set off making a completely random

2
00:00:04,000 --> 00:00:08,000
and then randomly flipping a random number of bits, so here we're going to make a random number

3
00:00:08,000 --> 00:00:10,000
between 0 and 63 and flip that many bits.

4
00:00:10,000 --> 00:00:13,000
We can make a much better random tester for this particular code by making a random

5
00:00:13,000 --> 00:00:16,000
and then making b a mutated function of a, so it's like that how to do that.

6
00:00:16,000 --> 00:00:18,000
We're going to still make a totally random. All right.

7
00:00:18,000 --> 00:00:21,000
So what we want to do is change our random number generator and here we're going to be

8
00:00:21,000 --> 00:00:25,000
slowing it down by adding a nested loop, so I've changed the number of total random test

9
00:00:25,000 --> 00:00:29,000
to 10,000 instead of 100,000, and so what we want to do is a is still a completely randomly

10
00:00:29,000 --> 00:00:32,000
regenerated 64-bit number and now what we're going to do is initialize b to be a

11
00:00:32,000 --> 00:00:35,000
and now for j in 0 to 63.

12
00:00:35,000 --> 00:00:40,000
For j in 0 to 63, so that is for some random number between 0 and 63, we're going to flip the sense

13
00:00:40,000 --> 00:00:43,000
using Python's XOR operator with one random bit at the input.

14
00:00:43,000 --> 00:00:47,000
And now our new test case is going to be a and a changed version of a

15
00:00:47,000 --> 00:00:49,000
with the idea that that's going to be a better test case.

16
00:00:49,000 --> 00:00:52,000
Let's see if that is indeed the case. So now we've completely covered our code.

17
00:00:52,000 --> 00:00:55,000
There are 27 statements. All of them ran with no partial executions.
