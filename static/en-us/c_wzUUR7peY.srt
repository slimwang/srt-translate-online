1
00:00:00,000 --> 00:00:02,000
[Andy] This lesson is on list comprehensions.

2
00:00:02,000 --> 00:00:06,000
This is something that wasn't covered in CS101 but will be used in many future classes,

3
00:00:06,000 --> 00:00:08,000
including CS212.

4
00:00:08,000 --> 00:00:12,000
List comprehensions are a powerful tool for quickly and concisely creating lists.

5
00:00:12,000 --> 00:00:17,000
For example, let's say you have a list of the Udacity TAs like this,

6
00:00:17,000 --> 00:00:19,000
and maybe we'll want to write the TA names in uppercase

7
00:00:19,000 --> 00:00:21,000
because lowercase is a little bit boring.

8
00:00:21,000 --> 00:00:25,000
One way we can do this is with a for loop like this one. And let's see how it works.

9
00:00:25,000 --> 00:00:28,000
This for loop is really doing 5 different things.

10
00:00:28,000 --> 00:00:32,000
First we create the empty list bad<u>uppercase</u>tas,

11
00:00:32,000 --> 00:00:34,000
and I've called it bad<u>uppercase</u>tas

12
00:00:34,000 --> 00:00:38,000
to emphasize that this really isn't the way we're going to want to create such a list.

13
00:00:38,000 --> 00:00:42,000
Next it generates the indices, and it does that here.

14
00:00:42,000 --> 00:00:49,000
These indices will be 0, 1, 2, 3, 4, 5 because udacity_tas is a list of length 6.

15
00:00:49,000 --> 00:00:52,000
Then we iterate over these indices.

16
00:00:52,000 --> 00:00:56,000
Next we apply the upper function, and this is a function that just takes a string

17
00:00:56,000 --> 00:00:59,000
and converts all of the characters to uppercase.

18
00:00:59,000 --> 00:01:03,000
Finally, we append to the bad<u>uppercase</u>tas list.

19
00:01:03,000 --> 00:01:13,000
And this code will be perfectly functional, but it is bad, it is ugly, and it is slow,

20
00:01:13,000 --> 00:01:15,000
which is why we have list comprehensions.

21
00:01:15,000 --> 00:01:19,000
And just to show that this code works, let's run it.

22
00:01:19,000 --> 00:01:22,000
And sure enough, we get a list of the TA names, and they are printed in uppercase.

23
00:01:22,000 --> 00:01:26,000
Using list comprehensions we could solve this problem in 1 line of code.

24
00:01:26,000 --> 00:01:31,000
And here Python recognizes that udacity_tas is an iterable.

25
00:01:31,000 --> 00:01:35,000
Iterable just means any object that can be iterated over.

26
00:01:35,000 --> 00:01:39,000
So for example, lists can be iterated over, strings can--and you'll see a lot of that

27
00:01:39,000 --> 00:01:45,000
in CS212 in the first unit--tuples--and if you don't know what those are yet, don't worry.

28
00:01:45,000 --> 00:01:48,000
These are all iterable objects, and this notation tells Python

29
00:01:48,000 --> 00:01:55,000
to iterate over all of the entries in udacity_tas, call each entry name,

30
00:01:55,000 --> 00:01:58,000
and then apply this upper function to name.

31
00:01:58,000 --> 00:02:02,000
The brackets indicate that we want to put the results into a list,

32
00:02:02,000 --> 00:02:05,000
and that's the list that we see down here:

33
00:02:05,000 --> 00:02:09,000
Peter, Andy, Sarah, Gundega, Job, Sean.

34
00:02:09,000 --> 00:02:14,000
And actually, I'd rather print each name on its own line, so let's do that like this.

35
00:02:17,000 --> 00:02:19,000
That's better.
