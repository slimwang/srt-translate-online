1
00:00:00,190 --> 00:00:03,370
The next topic we'll start discussing is

2
00:00:03,370 --> 00:00:08,490
Efficient Communication across address spaces. The client-server

3
00:00:08,490 --> 00:00:12,740
paradigm is used in structuring system services

4
00:00:12,740 --> 00:00:15,070
in a distributed system. If we're using

5
00:00:15,070 --> 00:00:19,495
a file server in a local area network every day, we are using a

6
00:00:19,495 --> 00:00:21,780
client-server system when we are accessing a

7
00:00:21,780 --> 00:00:24,910
remote file server. And remote procedure call.

8
00:00:24,910 --> 00:00:28,200
Is the mechanism that is used in building this

9
00:00:28,200 --> 00:00:31,260
kind of a client server relationship in a distributed

10
00:00:31,260 --> 00:00:33,340
system. What if the client and the server are

11
00:00:33,340 --> 00:00:36,170
on the same machine? Would it also not be

12
00:00:36,170 --> 00:00:39,930
a good way to structure the relationship between client

13
00:00:39,930 --> 00:00:43,500
and servers using RPC. Even if the clients and

14
00:00:43,500 --> 00:00:46,330
the servers happen to be on the same machine.

15
00:00:46,330 --> 00:00:50,180
It seems logical to structure clients of a systems even

16
00:00:50,180 --> 00:00:53,300
on the same machine using this RPC paradigm.

17
00:00:53,300 --> 00:00:57,370
But the main concern is performance. And the relationship

18
00:00:57,370 --> 00:01:01,160
between performance and safety. Now for reasons of safety,

19
00:01:01,160 --> 00:01:03,250
which we have, talked a lot about when we

20
00:01:03,250 --> 00:01:06,060
talked about operating system structures, you want to make

21
00:01:06,060 --> 00:01:10,350
sure that servers. And clients are in different address

22
00:01:10,350 --> 00:01:13,180
spaces, or different protection domains, as you've been calling

23
00:01:13,180 --> 00:01:15,215
them. Even if they are on the same machine

24
00:01:15,215 --> 00:01:18,910
uh,they will be running on different processors of an SMP,

25
00:01:18,910 --> 00:01:21,510
but they're still on the same machine. You, what you want to

26
00:01:21,510 --> 00:01:24,550
do is, you want to give a separate protection domain for

27
00:01:24,550 --> 00:01:26,710
each one of these servers from the point of view of

28
00:01:26,710 --> 00:01:30,020
safety. But, what that also means, because we are providing

29
00:01:30,020 --> 00:01:33,760
safety, there's going to be a hit on performance. Because of the

30
00:01:33,760 --> 00:01:37,690
fact that an RPC has to go across the outer spaces.

31
00:01:37,690 --> 00:01:40,510
A client on a particular outer space, server on a different

32
00:01:40,510 --> 00:01:42,210
outer space. So that is going to be

33
00:01:42,210 --> 00:01:44,920
a performance penalty that you pay. Now as operating

34
00:01:44,920 --> 00:01:47,870
system designers, what we would like to be able

35
00:01:47,870 --> 00:01:51,520
to do. Is to make RPC calls across protection

36
00:01:51,520 --> 00:01:55,790
domains as efficient as a normal procedure call

37
00:01:55,790 --> 00:01:58,670
that is happening inside a given process. If you

38
00:01:58,670 --> 00:02:02,370
could make the RPC across protection domains as efficient

39
00:02:02,370 --> 00:02:06,410
as a a normal procedure call, it would actually

40
00:02:06,410 --> 00:02:10,229
Encourage system designers to use RPC as a

41
00:02:10,229 --> 00:02:15,520
vehicle, for structuring services, even within a same

42
00:02:15,520 --> 00:02:18,200
machine. Why is that a good idea? Well,

43
00:02:18,200 --> 00:02:20,020
what that means is that you know, we've talked

44
00:02:20,020 --> 00:02:22,900
about the fact that in structuring operating systems

45
00:02:22,900 --> 00:02:25,120
in microkernel, you want. You want to be able

46
00:02:25,120 --> 00:02:29,300
to provide every service having its own protection

47
00:02:29,300 --> 00:02:31,920
domain. What that means is that to go across

48
00:02:31,920 --> 00:02:34,730
these protection domains, you're making a, a protected

49
00:02:34,730 --> 00:02:37,330
procedure call or a RPC call. Going from

50
00:02:37,330 --> 00:02:39,380
one from one protection domain to another protection

51
00:02:39,380 --> 00:02:41,850
domain. And that is going to be more expensive

52
00:02:41,850 --> 00:02:46,890
than. Simple procedure call. It won't encourage system

53
00:02:46,890 --> 00:02:50,950
designers to use these separate protection domains to

54
00:02:50,950 --> 00:02:54,850
provide the services independently. So, in some sense

55
00:02:54,850 --> 00:02:57,100
again is the same question of wanting to have

56
00:02:57,100 --> 00:02:58,430
the cake and eat it too. So you

57
00:02:58,430 --> 00:03:01,000
want the protection and you also want the performance.
