1
00:00:00,000 --> 00:00:02,000
Here's an example of how it all works.

2
00:00:02,000 --> 00:00:06,000
This I've actually typed into the Python interpreter.

3
00:00:06,000 --> 00:00:11,000
I've defined a function f as a lambda expression. It looks like this.

4
00:00:11,000 --> 00:00:13,000
Then I've asked what F is.

5
00:00:13,000 --> 00:00:18,000
All Python prints out is it says that it's an object of type function,

6
00:00:18,000 --> 00:00:21,000
which doesn't have a name other than the lambda

7
00:00:21,000 --> 00:00:24,000
and the address and memory where it's stored.

8
00:00:24,000 --> 00:00:29,000
Then I'd say, is F true of the sequence 1, 2, 3, 4, 5.

9
00:00:29,000 --> 00:00:35,000
That is, Y is equal to 1, M is 2, E is 3, U is 4, and O is 5.

10
00:00:35,000 --> 00:00:39,000
The answer is no, it's False. This is not equal.

11
00:00:39,000 --> 00:00:43,000
Then I asked is it true for 2, 1, 7, 9, 8. Yes, that's true.

12
00:00:43,000 --> 00:00:50,000
The reason is because it works out to this expression 289 equals 17-squared.

13
00:00:50,000 --> 00:00:55,000
Now I'm thinking of a design where we have some type of a solve function

14
00:00:55,000 --> 00:01:02,000
that's going to solve a formula, and we're going to have a compile formula function

15
00:01:02,000 --> 00:01:10,000
that's going to take a string formula as input and return a lambda expression function

16
00:01:10,000 --> 00:01:12,000
as the result of compiling the formula.

17
00:01:12,000 --> 00:01:18,000
As part of that, I want to have a function that I'm going to call compile_word,

18
00:01:18,000 --> 00:01:26,000
It's going to take a word like ME and compile that into something like 10M plus E.

19
00:01:26,000 --> 00:01:30,000
You could have some variation on exactly how you want to express that.

20
00:01:30,000 --> 00:01:35,000
It will also take a word like equals and compile that into itself,

21
00:01:35,000 --> 00:01:42,000
into equals, and a word like 2 and compile that into 2 itself.

22
00:01:42,000 --> 00:01:44,000
This is the function I want you to write.

23
00:01:44,000 --> 00:01:48,000
Compile_word where compile_word of YOU is something like this--

24
00:01:48,000 --> 00:01:51,000
don't worry about the communicativity and associativity.

25
00:01:51,000 --> 00:01:55,000
You can write this any way you want as long as it is a code that would compute the right answer.

26
00:01:55,000 --> 00:01:57,000
It's important to put parentheses around it.

27
00:01:57,000 --> 99:59:59,999
Anything that's not an uppercase word you should leave alone.
