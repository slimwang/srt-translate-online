1
00:00:00,330 --> 00:00:03,650
So far, the only option we've seen for
adding custom functionalities for

2
00:00:03,650 --> 00:00:06,450
our build script is via ad hoc tasks.

3
00:00:06,450 --> 00:00:09,110
We've also seen how typed
tasks make it simple to

4
00:00:09,110 --> 00:00:12,290
reuse common functionality
throughout our build scripts.

5
00:00:12,290 --> 00:00:15,105
We'll now learn how to
write our own task types.

6
00:00:15,105 --> 00:00:17,945
Creating a custom task
type in gradle is easy

7
00:00:17,945 --> 00:00:20,635
Let's start by defining our task class.

8
00:00:20,635 --> 00:00:23,215
Again, since Gradle
scripts are simply groovy,

9
00:00:23,215 --> 00:00:25,605
we can define a class
right in our build script.

10
00:00:25,605 --> 00:00:28,835
In general, we'll always extend
the default task class which provides

11
00:00:28,835 --> 00:00:31,405
a basic implementation
of the task interface.

12
00:00:31,405 --> 00:00:34,795
We've got class MyTask
extends DefaultTask.

13
00:00:34,795 --> 00:00:37,790
That's all there is to it to
define a custom task type.

14
00:00:37,790 --> 00:00:41,580
Of course, since we didn't provide any
additional capability for our task.

15
00:00:41,580 --> 00:00:45,440
It's functionally the same as defining
an ad hoc task in a build script.

16
00:00:45,440 --> 00:00:49,750
We have to somehow tell gradle what we
want our task to do when it executes.

17
00:00:49,750 --> 00:00:52,110
Luckily gradle has also
made this very simple.

18
00:00:52,110 --> 00:00:55,380
To add an action to our task
type we simply define a method

19
00:00:55,380 --> 00:00:58,300
annotated with the at
task action annotation.

20
00:00:58,300 --> 00:01:00,920
Let's start by adding an action
that simply prints a string out

21
00:01:00,920 --> 00:01:02,080
to the console.

22
00:01:02,080 --> 00:01:06,150
Now that we have defined our task
type and given it an action.

23
00:01:06,150 --> 00:01:09,180
We can create an instance of this
task type in our build script

24
00:01:09,180 --> 00:01:12,080
just as we would with
any other typed task.

25
00:01:12,080 --> 00:01:14,920
Let's go ahead and add a task named
Hello doorbelled\g script and

26
00:01:14,920 --> 00:01:18,710
declare its type as this new
hello task we've just created.

27
00:01:18,710 --> 00:01:23,840
So, we've got our new hello task of
type, hellotask, lets give it a try.

28
00:01:25,080 --> 00:01:26,510
There we go.

29
00:01:26,510 --> 00:01:30,530
The method of the HelloTask class
that we annotated with TaskAction

30
00:01:30,530 --> 00:01:31,540
got executed.

31
00:01:31,540 --> 00:01:32,840
Perfect.

32
00:01:32,840 --> 00:01:35,570
We can also easily make
our tasks configurable

33
00:01:35,570 --> 00:01:38,020
by adding properties to our class.

34
00:01:38,020 --> 00:01:42,100
Here we've added a firstName property,
which our task action then uses.

35
00:01:42,100 --> 00:01:45,050
Remember, since this is Groovy, we don't
need to worry about creating getter and

36
00:01:45,050 --> 00:01:46,340
setter methods.

37
00:01:46,340 --> 00:01:50,270
We've declared a task HelloName
of type HelloNameTask.

38
00:01:50,270 --> 00:01:54,640
And then we've configured the first
name property of our HelloNameTask.

39
00:01:54,640 --> 00:01:57,750
If we give this a try, aw, hey console.

40
00:01:57,750 --> 00:01:58,380
Hello to you too.
