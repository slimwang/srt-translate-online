1
00:00:00,600 --> 00:00:04,820
The most ambitious and most recent type of Middleware is sometimes called

2
00:00:04,820 --> 00:00:09,760
Object, or Component, Middleware. This is an extension of remote procedure calls

3
00:00:09,760 --> 00:00:14,400
to deal with objects. Thinking instead of making a function call, you're sending

4
00:00:14,400 --> 00:00:17,321
a message to an object which might happen to be on a remote machine.

5
00:00:18,330 --> 00:00:22,350
Some issues arise when we do this. One is what's called object identity.

6
00:00:22,350 --> 00:00:28,030
If you're on a single machine, the identity of an object is really its memory

7
00:00:28,030 --> 00:00:31,580
address. If you've got multiple machines, those memory addresses you can no

8
00:00:31,580 --> 00:00:35,334
longer guarantee to be unique. So you need some kind of a global mechanism for

9
00:00:35,334 --> 00:00:39,443
numbering or naming the various objects so that you can send message to

10
00:00:39,443 --> 00:00:45,046
the appropriate object. And then inheritance. Could it be that a child

11
00:00:45,046 --> 00:00:50,250
instance is on one machine and a parent instance is on another machine and

12
00:00:50,250 --> 00:00:55,420
thereâ€™s delegation of message passing from child to parent. Features that

13
00:00:55,420 --> 00:00:59,580
object and, and component middleware might provide include both synchronous and

14
00:00:59,580 --> 00:01:04,970
asynchronous message passing. Marshaling of data. Exception handling across

15
00:01:04,970 --> 00:01:10,775
machines. Some of the the product approaches for dealing with this include

16
00:01:10,775 --> 00:01:17,510
CORBA which was a mainframe approach developed in the 1990s. COM from Microsoft.

17
00:01:17,510 --> 00:01:23,270
And then SUN, SUN's now Oracle's Java remote messaging invocation RMI
