1
00:00:00,310 --> 00:00:04,560
So let's see if we understood
the coherence definition.

2
00:00:04,560 --> 00:00:09,640
Let's say that we have two cores, in a
system that is supposed to be coherent.

3
00:00:09,640 --> 00:00:12,886
Let's say that core 1
executes this program.

4
00:00:12,886 --> 00:00:17,290
It sets A = 1, then waits for

5
00:00:17,290 --> 00:00:21,760
A to change from 1, so it's going to
loop here as long as A == 1.

6
00:00:21,760 --> 00:00:25,650
Sets A again to 1, and
then prints done one.

7
00:00:25,650 --> 00:00:30,170
At the same time when core one is
started on this, core two starts on

8
00:00:30,170 --> 00:00:36,340
another program that writes zero to
the same location A in shared memory,

9
00:00:36,340 --> 00:00:43,360
waits until a changes from zero, sets
A to zero again, then prints done two.

10
00:00:43,360 --> 00:00:45,030
And remember that core one and

11
00:00:45,030 --> 00:00:49,880
core two, need not necessarily execute
these two programs in lockstep.

12
00:00:49,880 --> 00:00:53,940
So it's not necessary that core one
executes this while core two does this,

13
00:00:53,940 --> 00:00:56,680
core one does this while
core two this and so on.

14
00:00:56,680 --> 00:00:59,260
It could be for example that core one

15
00:00:59,260 --> 00:01:04,459
executes several of these while core
two is still not even beginning.

16
00:01:04,459 --> 00:01:07,830
So you can insert
arbitrary delays in between

17
00:01:07,830 --> 00:01:10,080
any of the statements here and here.

18
00:01:10,080 --> 00:01:14,870
The question for you is which of
the following print outs are possible?

19
00:01:14,870 --> 00:01:19,080
First, core one prints Done 1!,
then core two prints Done 2!.

20
00:01:19,080 --> 00:01:23,800
The next possibility,
first core two prints Done 2!,

21
00:01:23,800 --> 00:01:26,260
then core one prints Done 1!

22
00:01:26,260 --> 00:01:29,720
The next option,
core one prints Done 1!,

23
00:01:29,720 --> 00:01:33,770
but core two gets stuck and
never gets to print Done 2!.

24
00:01:33,770 --> 00:01:37,860
The next option is
core one gets stuck and

25
00:01:37,860 --> 00:01:42,830
never gets to print Done 1!, but
core two successfully prints Done 2!.

26
00:01:42,830 --> 00:01:46,900
And the final option, is that
nothing is printed because both of

27
00:01:46,900 --> 00:01:51,450
the cores gets stuck, so
neither of them prints anything ever.

28
00:01:51,450 --> 00:01:56,450
So which of these five
options are actually possible

29
00:01:56,450 --> 00:01:59,490
when these two programs
run in a coherent system?
