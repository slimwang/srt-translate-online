1
00:00:00,220 --> 00:00:04,090
Recall that the effect of running any function with the keyword new is that

2
00:00:04,090 --> 00:00:07,710
that functions runs as if it had a bit of extra code in it.

3
00:00:07,710 --> 00:00:10,960
Particularly, it's going to set the keyword this to equal some

4
00:00:10,960 --> 00:00:13,320
brand newly created object.

5
00:00:13,320 --> 00:00:16,970
And just because we ran the Van function with the keyword new and

6
00:00:16,970 --> 00:00:21,150
created another different object, does not mean that the other function is

7
00:00:21,150 --> 00:00:24,530
going to run with that same object as it's context.

8
00:00:24,530 --> 00:00:28,250
These are two different object.create statments that are being inserted into two

9
00:00:28,250 --> 00:00:32,759
different functions as a result of two different appearances of the keyword new.

10
00:00:32,759 --> 00:00:36,440
In the diagram this would mean that any time you run the Van function with or

11
00:00:36,440 --> 00:00:40,450
without the key word new, it would have the effect of building a brand new

12
00:00:40,450 --> 00:00:44,420
object, that delegates to the constructor of the car class.

13
00:00:44,420 --> 00:00:47,390
If your running the Van function with the key word new to begin with,

14
00:00:47,390 --> 00:00:50,630
then you've already got a brand new object and you don't need a second one.

15
00:00:50,630 --> 00:00:53,970
Sometimes people try to solve this by assigning the result of the new

16
00:00:53,970 --> 00:00:58,330
Car invocation, this object that gets created during the Car constructor,

17
00:00:58,330 --> 00:01:01,380
assigning to the local keyword this.

18
00:01:01,380 --> 00:01:05,370
But only is it disallowed to assign to the keyword this at all in your own code,

19
00:01:05,370 --> 00:01:08,810
even thought the interpreter is allowed to do such things,

20
00:01:08,810 --> 00:01:12,290
it doesn't solve the fact that you wind up having two different object,

21
00:01:12,290 --> 00:01:14,510
one of which you would be apparently throwing away.

22
00:01:14,510 --> 00:01:16,210
So this solution just doesn't work.

23
00:01:16,210 --> 00:01:17,150
Simple enough.

24
00:01:17,150 --> 00:01:20,100
What if we were to call the Car function without the keyword new?

25
00:01:20,100 --> 00:01:23,230
Perhaps that would have the effect of simply running the Car function in

26
00:01:23,230 --> 00:01:24,970
the context that we wanted.

27
00:01:24,970 --> 00:01:27,140
Unfortunately, this doesn't work either.

28
00:01:27,140 --> 00:01:30,000
In this situation, what would you expect the keyword this from within

29
00:01:30,000 --> 00:01:34,050
the Car function to be referring to as a result of being invoked on this line?
