1
00:00:00,000 --> 00:00:03,000
Here's a little bit of code for computing the clustering coefficient--

2
00:00:03,000 --> 00:00:05,000
at least one particular way of computing it.

3
00:00:05,000 --> 00:00:07,000
Here's our list of flights on our map.

4
00:00:07,000 --> 00:00:10,000
Catching between Chicago and Seattle, etc.,

5
00:00:10,000 --> 00:00:12,000
and I just have that as a list of pairs.

6
00:00:12,000 --> 00:00:15,000
And to create the graph, I start off with an empty graph,

7
00:00:15,000 --> 00:00:19,000
and then for each of the pairs that constitute the end points of a flight,

8
00:00:19,000 --> 00:00:22,000
we make a link between them like we were doing last time.

9
00:00:22,000 --> 00:00:27,000
Then to compute the clustering coefficient for the graph at some node,

10
00:00:27,000 --> 00:00:30,000
we list out the neighbors.

11
00:00:30,000 --> 00:00:32,000
If there's only one neighbor, it turns out to be very hard

12
00:00:32,000 --> 00:00:34,000
to compute the clustering coefficient.

13
00:00:34,000 --> 00:00:37,000
So we have to give it some kind of value; I chose zero.

14
00:00:37,000 --> 00:00:41,000
It actually kind of matters, but zero seems like a reasonable choice.

15
00:00:41,000 --> 00:00:43,000
Then what we're going to do is we're going to count up

16
00:00:43,000 --> 00:00:45,000
the number of links between these neighboring nodes.

17
00:00:45,000 --> 00:00:50,000
So we start off at zero, we loop through all the neighbors,

18
00:00:50,000 --> 00:00:54,000
and for each of those we loop through all the neighbors again

19
00:00:54,000 --> 00:00:56,000
and then we ask if this pair--

20
00:00:56,000 --> 00:00:58,000
WU--is there a link between them?

21
00:00:58,000 --> 00:01:01,000
And if so--in this case I'm counting it as a half

22
00:01:01,000 --> 00:01:03,000
because I wrote this inefficiently.

23
00:01:03,000 --> 00:01:05,000
It's going to do everything twice.

24
00:01:05,000 --> 00:01:09,000
So it's going to notice that Seattle and Los Angeles are connected

25
00:01:09,000 --> 00:01:11,000
and that Los Angeles and Seattle are connected.

26
00:01:11,000 --> 00:01:16,000
So I give it a half each time so that the total number works out.

27
00:01:16,000 --> 00:01:18,000
And then I apply the formula.

28
00:01:18,000 --> 00:01:22,000
Two times the number of links divided by length of neighbors

29
00:01:22,000 --> 00:01:24,000
times length of neighbors minus one.

30
00:01:24,000 --> 00:01:27,000
So now that we can compute the clustering coefficient for any node V

31
00:01:27,000 --> 00:01:31,000
we can actually loop through all the nodes in the graph

32
00:01:31,000 --> 00:01:34,000
computing the total of their clustering coefficients

33
00:01:34,000 --> 00:01:37,000
and then divide by the number of nodes to get the clustering coefficient

34
00:01:37,000 --> 00:01:39,000
for the whole graph.

35
00:01:39,000 --> 00:01:41,000
So in this case, it's a little bit of a quarter,

36
00:01:41,000 --> 00:01:43,000
which is pretty clumpy.

37
00:01:43,000 --> 00:01:45,000
So there's a fair amount of interconnection

38
00:01:45,000 --> 00:01:48,000
between a node's neighbors.

39
00:01:48,000 --> 00:01:53,000
From what I've read, social networks will often have clustering coefficients

40
00:01:53,000 --> 00:01:58,000
that are in the 0.1, maybe even up to the 0.8 range

41
00:01:58,000 --> 00:02:03,000
whereas the grid graphs, chain graphs, and ring graphs that we've looked at

42
00:02:03,000 --> 00:02:06,000
actually have clustering coefficients of zero.
