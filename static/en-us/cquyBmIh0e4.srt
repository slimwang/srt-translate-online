1
00:00:00,000 --> 00:00:02,000
Now we're going to talk about oracles.

2
00:00:02,000 --> 00:00:04,000
We really probably have deferred this topic for too long.

3
00:00:04,000 --> 00:00:07,000
Oracles are extremely important for random testing

4
00:00:07,000 --> 00:00:09,000
because if you don't have an automated oracle--that is to say,

5
00:00:09,000 --> 00:00:12,000
if you don't have an automated way to tell if a test case did something interesting--

6
00:00:12,000 --> 00:00:14,000
then you've got nothing.

7
00:00:14,000 --> 00:00:17,000
And in fact, Richard Hamlet in his sort of well-known article on random testing

8
00:00:17,000 --> 00:00:20,000
said that "random testing has only a specialized niche in practice

9
00:00:20,000 --> 00:00:22,000
"because an effective oracle is seldom available."

10
00:00:22,000 --> 00:00:24,000
And this is something that I don't actually agree with.

11
00:00:24,000 --> 00:00:27,000
What we're going to see is that sometimes you have to use some imagination,

12
00:00:27,000 --> 00:00:30,000
but really, there are potentially quite a few oracles available

13
00:00:30,000 --> 00:00:32,000
and that almost always we can make something work

14
00:00:32,000 --> 00:00:34,000
even if it's just a weak oracle like watching out for crashes.

15
00:00:34,000 --> 00:00:38,000
So what I'm going to do is organize the oracles that are suitable for random testing

16
00:00:38,000 --> 00:00:40,000
into a collection of categories.

17
00:00:40,000 --> 00:00:42,000
So we're going to start off with weak oracles.

18
00:00:42,000 --> 00:00:45,000
Weak oracles are some of the ones that are most useful in practice,

19
00:00:45,000 --> 00:00:48,000
but I'm calling them weak because they can only enforce fairly generic properties

20
00:00:48,000 --> 00:00:50,000
about the software under test.

21
00:00:50,000 --> 00:00:53,000
The most important weak oracle is just detecting whether or not

22
00:00:53,000 --> 00:00:55,000
the application crashed.

23
00:00:55,000 --> 00:00:58,000
What a crash usually really means is that the system under test

24
00:00:58,000 --> 00:01:01,000
violated some rule that the hardware imposed like, for example,

25
00:01:01,000 --> 00:01:03,000
memory accesses have to be aligned,

26
00:01:03,000 --> 00:01:05,000
or that the operating system imposed like, for example,

27
00:01:05,000 --> 00:01:08,000
the application isn't allowed to try to write to memory that's owned by the kernel,

28
00:01:08,000 --> 00:01:13,000
and in response to this violation, the operating system has decided to terminate the process

29
00:01:13,000 --> 00:01:15,000
in which the software under test is contained.

30
00:01:15,000 --> 00:01:19,000
The second most useful weak oracle is violation of a programming language rule.

31
00:01:19,000 --> 00:01:22,000
In Python, if you try to access an element of a list that's out of bounds

32
00:01:22,000 --> 00:01:24,000
and if you don't catch the resulting exception,

33
00:01:24,000 --> 00:01:26,000
then your Python program will get terminated.

34
00:01:26,000 --> 00:01:29,000
That's an example of the violation of a language rule killing an application

35
00:01:29,000 --> 00:01:33,000
and serving as an oracle that tells us basically that something went wrong.

36
00:01:33,000 --> 00:01:35,000
And basically, most any programming language has a number of rules like this

37
00:01:35,000 --> 00:01:38,000
and the stronger those rules are, the more effective of an oracle

38
00:01:38,000 --> 00:01:40,000
the programming language runtime can serve as.

39
00:01:40,000 --> 00:01:43,000
And one of the reasons why C and C++ applications crash so much

40
00:01:43,000 --> 00:01:46,000
is because the language is an extremely weak enforcer of runtime rules,

41
00:01:46,000 --> 00:01:49,000
and so basically, all of the enforcement falls upon the operating system

42
00:01:49,000 --> 00:01:51,000
and the hardware itself.
