1
00:00:00,000 --> 00:00:06,000
The tricky part is how to compute the best possible alignment.

2
00:00:06,000 --> 00:00:09,000
It's usually done by dynamic programming.

3
00:00:09,000 --> 00:00:13,000
The recognition here is that in principle there are

4
00:00:13,000 --> 00:00:17,000
exponentially many ways to align pixels in the left and right image,

5
00:00:17,000 --> 00:00:22,000
but in practice you can get away with an n-squared algorithm

6
00:00:22,000 --> 00:00:25,000
where n is the number of pixels in the scan line.

7
00:00:25,000 --> 00:00:29,000
Let's write this as n-squared. It's a much, much faster algorithm.

8
00:00:29,000 --> 00:00:34,000
Here's the idea. Let's write down both scan lines as shown over here.

9
00:00:34,000 --> 00:00:38,000
And let's write down a matrix of size and square.

10
00:00:38,000 --> 00:00:43,000
The neat thing here is that any path from the top left to the bottom right

11
00:00:43,000 --> 00:00:50,000
is a specific correspondence of pixels over here on the left scan line

12
00:00:50,000 --> 00:00:52,000
to pixels over here on the right scan line.

13
00:00:52,000 --> 00:00:58,000
For example, if I take the path that's diagonal, that line pixels by each other.

14
00:00:58,000 --> 00:01:03,000
But the best possible path would assume that the first two pixels correspond,

15
00:01:03,000 --> 00:01:06,000
and there's a left occlusion afterwards.

16
00:01:06,000 --> 00:01:08,000
Then all the red guys correspond.

17
00:01:08,000 --> 00:01:12,000
So this red guy over here corresponds to this red guy over here.

18
00:01:12,000 --> 00:01:14,000
There's an occlusion over here.

19
00:01:14,000 --> 00:01:16,000
Then we go diagonal again.

20
00:01:16,000 --> 00:01:21,000
So any path that picks actions that go diagonal, down, or right

21
00:01:21,000 --> 00:01:26,000
so that the top left is connected to the bottom right

22
00:01:26,000 --> 00:01:33,000
becomes a valid correspondence of the left scan line to the right scan line.

23
00:01:33,000 --> 00:01:35,000
How do we find the best one?

24
00:01:35,000 --> 00:01:40,000
Well, just like in MVPs we use the same methodology as an MVP.

25
00:01:40,000 --> 00:01:44,000
We define the value of any of these points in the grid to be the best,

26
00:01:44,000 --> 00:01:47,000
taking the value of getting there.

27
00:01:47,000 --> 00:01:54,000
The value of a point ij in the grid is the maximum of the match value

28
00:01:54,000 --> 00:01:59,000
if we chose diagonal, which is expressed over here to be the match of ij

29
00:01:59,000 --> 00:02:06,000
given that we chose the diagonal, which means add the value of i minus 1 and j minus 1,

30
00:02:06,000 --> 00:02:12,000
over the occlusion penalty plus any way we could have occluded for the left or the right.

31
00:02:12,000 --> 00:02:15,000
If we look at these three different things we maximize over here,

32
00:02:15,000 --> 00:02:21,000
then each value over here becomes the maximum of assuming we have no occlusion

33
00:02:21,000 --> 00:02:26,000
plus the corresponding match penalty or assuming we did have an occlusion,

34
00:02:26,000 --> 00:02:31,000
either from the top or the bottom, and then we just pay the occlusion penalty,

35
00:02:31,000 --> 00:02:34,000
and we assume the value over there.

36
00:02:34,000 --> 00:02:37,000
Now, that's not trivial. You have to think about this.

37
00:02:37,000 --> 00:02:39,000
Why does this give us the optimal path?

38
00:02:39,000 --> 00:02:42,000
But if you think about it and look at the optimal path,

39
00:02:42,000 --> 00:02:45,000
we pay no penalty over here because the match is perfect.

40
00:02:45,000 --> 00:02:48,000
We pay no penalty over here because the match is perfect again.

41
00:02:48,000 --> 00:02:50,000
So, again, the first clause in this formula.

42
00:02:50,000 --> 00:02:53,000
Over here we do pay a penalty.

43
00:02:53,000 --> 00:02:56,000
We pay a penalty of 10, which is the occlusion penalty,

44
00:02:56,000 --> 00:03:01,000
because we assume that between the blue pixel over here and the right scan image

45
00:03:01,000 --> 00:03:06,000
there's just no appropriate match. We're going to pay a penalty of 10 over here.

46
00:03:06,000 --> 00:03:09,000
Over here we pay no penalty, because the right corresponds perfectly to the red,

47
00:03:09,000 --> 00:03:12,000
and we assume it is a perfect match.

48
00:03:12,000 --> 00:03:14,000
The same over here and the same over here.

49
00:03:14,000 --> 00:03:18,000
Down here we pay a penalty of 10, because we assume an occlusion,

50
00:03:18,000 --> 00:03:21,000
and down here we just assume no penalty at all.

51
00:03:21,000 --> 00:03:25,000
Now with dynamic programming, it computes for every possible location.

52
00:03:25,000 --> 00:03:29,000
For example, this guy over here would have a best optimal path,

53
00:03:29,000 --> 00:03:34,000
which might assume we had a perfect match over here and two occlusions over there,

54
00:03:34,000 --> 00:03:37,000
but now the penalty is already 20 whereas the penalty over here is 10.

55
00:03:37,000 --> 00:03:40,000
So likely this point won't survive.

56
00:03:40,000 --> 00:03:46,000
By working out the value function in this really interesting grid over here,

57
00:03:46,000 --> 00:03:49,000
we find the value of the final point, which is 20,

58
00:03:49,000 --> 00:03:53,000
and we also find the best possible path

59
00:03:53,000 --> 00:03:57,000
by tracing the way in which the value propagated through this grid.

60
00:03:57,000 --> 00:04:02,000
This becomes the best possible correspondence of the left and the right image

61
00:04:02,000 --> 00:04:06,000
by aligning the entire left scan line and the entire right scan line

62
00:04:06,000 --> 00:04:10,000
simultaneously using dynamic programming.

63
00:04:10,000 --> 99:59:59,999
This is the state of the art in stereo computer vision.
