1
00:00:00,280 --> 00:00:03,020
So from algorithm description, we go to implementation

2
00:00:03,020 --> 00:00:06,540
now. This is where rubber meets the road

3
00:00:06,540 --> 00:00:10,500
in systems reset. In any good systems reset,

4
00:00:10,500 --> 00:00:13,760
the prescription is as follows. You identify a

5
00:00:13,760 --> 00:00:19,250
pain point. Once you identify the pain point. You think of what may be a clever

6
00:00:19,250 --> 00:00:21,650
solution to that. Then a lot of heavy

7
00:00:21,650 --> 00:00:25,290
lifting actually happens in taking that solution, which may

8
00:00:25,290 --> 00:00:30,390
be a very simple solution, but implementing that is the hard part. if you take

9
00:00:30,390 --> 00:00:33,290
this particular lesson that we're looking at The

10
00:00:33,290 --> 00:00:36,810
solution idea is fairly simple. The idea is

11
00:00:36,810 --> 00:00:39,800
that instead of using the disk as a

12
00:00:39,800 --> 00:00:43,240
paging device, use the cluster memory. But implementing

13
00:00:43,240 --> 00:00:46,000
that idea requires quite a bit of heavy

14
00:00:46,000 --> 00:00:50,560
lifting, and one might say that in systems

15
00:00:50,560 --> 00:00:53,860
research these technical details Of taking an

16
00:00:53,860 --> 00:00:57,980
idea and working out the technical details

17
00:00:57,980 --> 00:01:01,260
of implementing that idea is probably the

18
00:01:01,260 --> 00:01:03,910
most important nugget. Even if the idea

19
00:01:03,910 --> 00:01:07,430
itself is not enduring, the implementation tricks

20
00:01:07,430 --> 00:01:09,420
and techniques that are invented in order

21
00:01:09,420 --> 00:01:12,160
to do their implementation of their idea

22
00:01:12,160 --> 00:01:16,080
maybe reusable knowledge for other systems research.

23
00:01:16,080 --> 00:01:21,034
So that's a key takeaway in any systems research and this true for this one as

24
00:01:21,034 --> 00:01:23,670
well. Now in this particular case, the authors

25
00:01:23,670 --> 00:01:29,490
of GSM used a deck, little equipment corporations operating

26
00:01:29,490 --> 00:01:32,336
system as the base system. The operating system

27
00:01:32,336 --> 00:01:34,560
is called OS of 1 operating system. And

28
00:01:34,560 --> 00:01:38,460
there are two key components. In the OSF1

29
00:01:38,460 --> 00:01:41,750
memory system, which is what we're talking about here.

30
00:01:41,750 --> 00:01:44,830
The first one is the virtual memory system,

31
00:01:44,830 --> 00:01:46,760
and this is the one that is responsible

32
00:01:46,760 --> 00:01:50,300
for mapping process virtual address space to physical

33
00:01:50,300 --> 00:01:55,550
memory, and worrying about page faults that happen when

34
00:01:55,550 --> 00:02:00,480
a process is trying to access the stack and heap and so on. So that it can

35
00:02:00,480 --> 00:02:04,140
bring those missing pages perhaps from the disk.

36
00:02:04,140 --> 00:02:06,900
And these pages are sometimes referred to as anonymous

37
00:02:06,900 --> 00:02:13,500
pages because a page is housed in a physical page frame and when a page is

38
00:02:13,500 --> 00:02:16,400
replaced, that same physical page frame may host

39
00:02:16,400 --> 00:02:19,270
some other virtual page and so on. So

40
00:02:19,270 --> 00:02:22,490
the virtual memory system is devoted to managing

41
00:02:22,490 --> 00:02:26,380
the page faults that occur for process virtual

42
00:02:26,380 --> 00:02:28,510
address space, in particular the stack and the

43
00:02:28,510 --> 00:02:32,030
heap. And the unified buffer cache is the cache

44
00:02:32,030 --> 00:02:34,460
that is used by the file system. And remember

45
00:02:34,460 --> 00:02:37,410
the file system is also getting stuff from the

46
00:02:37,410 --> 00:02:40,550
disk. But the other system wants to cache it

47
00:02:40,550 --> 00:02:43,460
in physical memories so that it is faster, so the

48
00:02:43,460 --> 00:02:48,360
unified buffer cash is serving as the extraction for

49
00:02:48,360 --> 00:02:50,670
the disk resident files when it gets into physical

50
00:02:50,670 --> 00:02:54,170
memory and user processes. Are going to do explicit

51
00:02:54,170 --> 00:02:57,660
access to files. When they do that, they're actually accessing

52
00:02:57,660 --> 00:03:01,200
unified buffer cache. So reads and writes of files

53
00:03:01,200 --> 00:03:03,570
go to this unified buffer cache. In addition to

54
00:03:03,570 --> 00:03:07,430
that, Unix systems offer the ability to map a

55
00:03:07,430 --> 00:03:11,640
file. Into memory, which is called memory mapped files.

56
00:03:11,640 --> 00:03:13,590
And if you have a memory mapped file, you

57
00:03:13,590 --> 00:03:16,220
can also have page faults to a file that

58
00:03:16,220 --> 00:03:18,770
has been mapped into memory. So the unified buffer

59
00:03:18,770 --> 00:03:23,160
cache is responsible for handling page faults to map files,

60
00:03:23,160 --> 00:03:26,190
as well as explicit read and write calls.

61
00:03:26,190 --> 00:03:29,100
That an application process may make to the file

62
00:03:29,100 --> 00:03:33,500
system. So normally this is the picture of how

63
00:03:33,500 --> 00:03:37,740
the memory system hangs together in any typical implementation

64
00:03:37,740 --> 00:03:40,190
of an operating system. You have the virtual memory

65
00:03:40,190 --> 00:03:42,140
manager, you have the unified buffer cache, you have

66
00:03:42,140 --> 00:03:45,900
the disk, and region writes from the virtual memory

67
00:03:45,900 --> 00:03:48,189
manager go to the disk, and similarly reads and

68
00:03:48,189 --> 00:03:50,640
writes from the unified buffer cache, go to the

69
00:03:50,640 --> 00:03:54,500
disk and when a physical page frame is freed, you

70
00:03:54,500 --> 00:03:56,410
through it into the free list. So that it

71
00:03:56,410 --> 00:03:59,030
is available for future use by either the virtual memory

72
00:03:59,030 --> 00:04:03,100
manager or the unified buffer cache. And the Pageout

73
00:04:03,100 --> 00:04:06,250
Daemon, it's role is to look at every once in

74
00:04:06,250 --> 00:04:09,620
a while what are pages that can be swapped out

75
00:04:09,620 --> 00:04:13,560
to the disk so that you make room for page

76
00:04:13,560 --> 00:04:16,370
faults to be handled without necessarily running an

77
00:04:16,370 --> 00:04:19,459
algorithm to free up pages. so that's the structure

78
00:04:19,459 --> 00:04:22,089
of a memory management system, and what the

79
00:04:22,089 --> 00:04:27,240
authors of GMS did, was to integrate GMS into

80
00:04:27,240 --> 00:04:28,970
the operating system, and this is where I

81
00:04:28,970 --> 00:04:31,300
said that. There is heavy lifting to be done,

82
00:04:31,300 --> 00:04:36,060
because you are modifying the operating system to integrate

83
00:04:36,060 --> 00:04:38,710
an idea that you had for global memory system.
