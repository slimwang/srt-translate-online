1
00:00:00,260 --> 00:00:04,030
Okay, and the answer is memcached just throws away data

2
00:00:04,030 --> 00:00:06,500
that is least recently used. So as you insert more and

3
00:00:06,500 --> 00:00:09,530
more keys in the memcached. If there's not enough room, keys

4
00:00:09,530 --> 00:00:12,570
that you haven't accessed in, in the longest amount of time

5
00:00:12,570 --> 00:00:15,340
just get purged from the cache automatically. So the cache

6
00:00:15,340 --> 00:00:19,690
automatically has the most recently accessed things. Let's talk about some

7
00:00:19,690 --> 00:00:22,540
of these other answers. It doesn't throw an error. Now if

8
00:00:22,540 --> 00:00:25,260
this was a database, it should throw an error because you

9
00:00:25,260 --> 00:00:27,550
want your database. You, you rely on your database to store your

10
00:00:27,550 --> 00:00:29,850
data and if it's not going to be the store, it should tell

11
00:00:29,850 --> 00:00:34,970
you. It shouldn't just silently, you know, you know, accept new data

12
00:00:34,970 --> 00:00:37,583
and throw away all data or something like that. But memcached it's

13
00:00:37,583 --> 00:00:39,852
not an error to store too much data. It can, it can

14
00:00:39,852 --> 00:00:42,370
only store so much. The next answer, throw away data that is

15
00:00:42,370 --> 00:00:46,961
least frequently used. This commonly referred to as an LFU cache, least

16
00:00:46,961 --> 00:00:50,530
frequently used. This is the common way of doing caches, but memcached

17
00:00:50,530 --> 00:00:55,220
doesn't do it that way. They use what's called an LRU

18
00:00:55,220 --> 00:00:59,230
cache, which you know, is least recently used. You know, least frequently

19
00:00:59,230 --> 00:01:02,820
used implies some sort of notion of keeping track of how

20
00:01:02,820 --> 00:01:05,129
many times each key is accessed. You know, it's a little bit

21
00:01:05,129 --> 00:01:07,390
harder to implement than least recently used, which is just a

22
00:01:07,390 --> 00:01:11,120
simple sort. You know, just throw the, throw the key add the

23
00:01:11,120 --> 00:01:12,849
key to the front of the list. And the final answer

24
00:01:12,849 --> 00:01:15,890
write the extra data to disk. As we said memcached is entirely

25
00:01:15,890 --> 00:01:19,300
in memory. There are variations of memcached that write extra data

26
00:01:19,300 --> 00:01:22,270
to disk. But, you know, writing to disk means, you know it's

27
00:01:22,270 --> 00:01:25,180
a performance tradeoff. Writing to disk is slow, reading from disk

28
00:01:25,180 --> 00:01:28,310
is slow. If you want to be writing data to disk, memcache probably

29
00:01:28,310 --> 00:01:31,230
isn't the right solution for you You know you can use

30
00:01:31,230 --> 00:01:34,650
a database or you can use some other piece of technology that's

31
00:01:34,650 --> 00:01:37,300
you know, kind of splits the difference, you know, sacrifices a little

32
00:01:37,300 --> 00:01:40,084
speed for a little bit more durability or space or what not.
