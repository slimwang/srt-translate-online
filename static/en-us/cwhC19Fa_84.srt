1
00:00:00,000 --> 00:00:03,000
Okay, we finally got into my favorite testing topic, which is random testing.

2
00:00:03,000 --> 00:00:07,000
And random testing just means that test cases are created at least in part

3
00:00:07,000 --> 00:00:09,000
using input from a random number generator.

4
00:00:09,000 --> 00:00:12,000
This became my favorite testing method a few years ago, when I noticed though without even

5
00:00:12,000 --> 00:00:15,000
realizing it, I've written a random tester for every piece of software I ever wrote

6
00:00:15,000 --> 00:00:17,000
where I actually cared about its correctness.

7
00:00:17,000 --> 00:00:19,000
So, I've written at least a dozen random testers.

8
00:00:19,000 --> 00:00:21,000
So, let's look at how this works. We have a random case generator.

9
00:00:21,000 --> 00:00:25,000
The test case generator takes its input pseudorandom numbers,

10
00:00:25,000 --> 00:00:27,000
so PRNG here stands for pseudorandom number generator.

11
00:00:27,000 --> 00:00:31,000
Of course, on computers, we almost never get real random number generators.

12
00:00:31,000 --> 00:00:34,000
What we rather get are pseudorandom numbers which are algorithmically generated

13
00:00:34,000 --> 00:00:36,000
but for purposes of creating test cases, they're good enough.

14
00:00:36,000 --> 00:00:38,000
The nice thing about pseudorandom numbers is they're repeatable.

15
00:00:38,000 --> 00:00:41,000
So, when we start using a pseudorandom number generator, we give it a seed

16
00:00:41,000 --> 00:00:44,000
which completely determines the sequence of random numbers it's going to generate.

17
00:00:44,000 --> 00:00:48,000
So, if we ever want to generate the same random numbers, all we have to do is remember the seed.

18
00:00:48,000 --> 00:00:52,000
This is actually nice because we don't have to save of voluminous random tests.

19
00:00:52,000 --> 00:00:55,000
We can rather just remember what seed we started with

20
00:00:55,000 --> 00:00:58,000
if we ever wanted to get back a particular set of random tests.

21
00:00:58,000 --> 00:01:00,000
The other thing that goes into a random test case generator,

22
00:01:00,000 --> 00:01:03,000
usually to make a good one, you needed a significant amount of domain knowledge.

23
00:01:03,000 --> 00:01:05,000
By domain knowledge, I just mean that you have to understand

24
00:01:05,000 --> 00:01:07,000
some properties of the software under test.

25
00:01:07,000 --> 00:01:10,000
We're talking about quite a bit of detail about what form this domain knowledge might take

26
00:01:10,000 --> 00:01:13,000
and how you encode this as part of the random test case generator.

27
00:01:13,000 --> 00:01:16,000
Generated test cases come out of the random case generator

28
00:01:16,000 --> 00:01:18,000
and they go into the software under test.

29
00:01:18,000 --> 00:01:21,000
The software under test executes and produces some output.

30
00:01:21,000 --> 00:01:23,000
The output is inspected by a test oracle.

31
00:01:23,000 --> 00:01:25,000
The oracle, as we've already learned, makes a determination

32
00:01:25,000 --> 00:01:28,000
whether the output of the software under test is either good or bad.

33
00:01:28,000 --> 00:01:30,000
If the output is good--that is to say, if it passes whatever checks we have,

34
00:01:30,000 --> 00:01:32,000
we just go back and do it again.

35
00:01:32,000 --> 00:01:37,000
On the other hand, if it the output is not okay, we save the test case somewhere for later inspection

36
00:01:37,000 --> 00:01:39,000
and we go back and do more random testing.

37
00:01:39,000 --> 00:01:44,000
And so, the key to making this all work is, wrap the entire random testing tool chain

38
00:01:44,000 --> 00:01:47,000
and some sort of a driver script which runs it automatically.

39
00:01:47,000 --> 00:01:50,000
What we do is we start the random tester on some otherwise unused machine

40
00:01:50,000 --> 00:01:53,000
and we go and do other things or we go home.

41
00:01:53,000 --> 00:01:55,000
And while we're doing other things, the random testing loop executes

42
00:01:55,000 --> 00:01:57,000
hundreds, thousands, or millions of times.

43
00:01:57,000 --> 00:02:00,000
The next time we feel like seeing what's going on, maybe coming to work in the morning

44
00:02:00,000 --> 00:02:03,000
and we basically just see what kind of test cases have been saved.

45
00:02:03,000 --> 00:02:05,000
If anything interesting turned out, we have some followup work to do,

46
00:02:05,000 --> 00:02:07,000
like creating reportable test case and debugging.

47
00:02:07,000 --> 00:02:09,000
If nothing interesting happened, then that's good.

48
00:02:09,000 --> 00:02:11,000
We didn't introduce any new bugs and we can rebuild

49
00:02:11,000 --> 00:02:15,000
the latest version of a software under test and start the testing loop again.

50
00:02:15,000 --> 00:02:18,000
Generally, the way random testing works is, is not necessarily part of the test suite

51
00:02:18,000 --> 00:02:23,000
for the software under test, but rather it's a separate testing loop that gets run independently,

52
00:02:23,000 --> 00:02:25,000
acts to the separate or an external quality assurance mechanism.

53
00:02:25,000 --> 00:02:29,000
If the random test generator is well done, and if we give us a sufficient amount of CPU resources

54
00:02:29,000 --> 00:02:33,000
to the testing loop, and if it's not finding any problems, random testing can significantly increase

55
00:02:33,000 --> 00:02:37,000
our confidence that the software under test is working as intended.

56
00:02:37,000 --> 00:02:40,000
And it turns out that in general, there are only a couple of things that are hard about making this work.

57
00:02:40,000 --> 00:02:43,000
First of all, it can be tricky to come up with a good random test case generator,

58
00:02:43,000 --> 00:02:45,000
and second, they can be tricky to come up with good oracle.

59
00:02:45,000 --> 00:02:48,000
And of course, we've already said that these are the hard things about testing in general,

60
00:02:48,000 --> 00:02:51,000
making test cases, and determining if outputs are correct.

61
00:02:51,000 --> 00:02:54,000
Basically, the same thing is the case here, but the character of the problems that we run into

62
00:02:54,000 --> 00:02:58,000
while doing random testing are a little bit different and that's where we're going to spend

63
00:02:58,000 --> 00:03:00,000
the next several units of this course looking at.

64
00:03:00,000 --> 00:03:02,000
What I'd like to do now is go over a couple of real examples.

65
00:03:02,000 --> 00:03:06,000
One of them involves a very large random tester testing quite complicated pieces of software.

66
00:03:06,000 --> 00:03:10,000
The other one is almost trivial, it's a tiny almost one line random tester.

67
00:03:10,000 --> 00:03:12,000
This testing a small function, by the way, so let's take a look at this.
