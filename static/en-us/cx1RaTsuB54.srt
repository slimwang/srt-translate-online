1
00:00:00,420 --> 00:00:02,590
Now we turn to the question of halting.

2
00:00:02,590 --> 00:00:05,710
As we have seen, not being able to
tell whether a program will halt or

3
00:00:05,710 --> 00:00:09,640
not plays a central role in
the diagonalization paradox.

4
00:00:09,640 --> 00:00:12,470
And it's at least partly intuitive
that we can't tell whether

5
00:00:12,470 --> 00:00:15,660
a program is just taking a long time or
if it will run forever.

6
00:00:16,800 --> 00:00:21,160
It shouldn't be surprising then that
given an arbitrary program input pair,

7
00:00:21,160 --> 00:00:24,820
we can't decide whether the program
will halt on that input but

8
00:00:24,820 --> 00:00:27,300
actually the situation
is much more extreme.

9
00:00:27,300 --> 00:00:31,690
We can't even decide if a program will
halt when it is given no input at all

10
00:00:31,690 --> 00:00:33,280
just the empty string.

11
00:00:33,280 --> 00:00:35,030
Let's go ahead and prove this.

12
00:00:35,030 --> 00:00:39,010
The language of descriptions of Turing
machines that halt on the empty string

13
00:00:39,010 --> 00:00:40,350
is undecidable.

14
00:00:40,350 --> 00:00:43,840
We'll do this by reducing
from the diagonal language.

15
00:00:43,840 --> 00:00:46,310
That is,
we'll show that the halting problem

16
00:00:46,310 --> 00:00:49,490
is at least as hard as
the diagonal problem.

17
00:00:49,490 --> 00:00:52,130
Here's one of many possible reductions.

18
00:00:52,130 --> 00:00:56,450
The reduction creates a machine,
N That simply ignores the input and

19
00:00:56,450 --> 00:00:59,810
then runs the machine M on itself.

20
00:00:59,810 --> 00:01:03,720
If M rejects, then N is going to loop.

21
00:01:03,720 --> 00:01:04,790
Otherwise, N accepts.

22
00:01:06,050 --> 00:01:08,860
Note that because we're switching
from a language about accepting

23
00:01:08,860 --> 00:01:10,460
to a language about halting,

24
00:01:10,460 --> 00:01:15,070
We have to return a rejecting
non-acceptance into a looping one.

25
00:01:15,070 --> 00:01:20,540
The end result here is that if
M accepts its own description,

26
00:01:20,540 --> 00:01:25,735
then N accepts every string,
the empty one in particular.

27
00:01:25,735 --> 00:01:32,605
On the other hand, if M either rejects
or loops on itself, then N will loop.

28
00:01:33,665 --> 00:01:37,085
A decider for the halting problem,
could tell the difference

29
00:01:37,085 --> 00:01:40,320
between accepting everything and
looping on everything.

30
00:01:40,320 --> 00:01:42,340
So the reduction is complete.

31
00:01:42,340 --> 00:01:43,440
>> At this point,

32
00:01:43,440 --> 00:01:46,560
it might seem that we've just done
a bit of symbol manipulation.

33
00:01:46,560 --> 00:01:49,925
But let's step back and
realize what we've just seen.

34
00:01:49,925 --> 00:01:52,250
We showed that no Turing
machine can tell whether or

35
00:01:52,250 --> 00:01:55,780
not a computer program will halt or
remain in a loop forever.

36
00:01:56,980 --> 00:01:59,590
This is a problem that we care about and

37
00:01:59,590 --> 00:02:03,130
we can't solve it on a Turing machine,
or any other kind of computer.

38
00:02:03,130 --> 00:02:06,229
You can't solve the halting
problem on your iPhone.

39
00:02:06,229 --> 00:02:08,495
You can't solve the halting
problem in your desktop,

40
00:02:08,495 --> 00:02:10,479
no matter how many cords you have.

41
00:02:10,479 --> 00:02:12,960
You can't solve the halting
problem in the cloud.

42
00:02:12,960 --> 00:02:15,260
Even if someone invents
a quantum computer,

43
00:02:15,260 --> 00:02:18,030
it still won't be able to
solve the halting problem.

44
00:02:18,030 --> 00:02:21,810
To misquote Nick Selby If you want
to solve the halting problem,

45
00:02:21,810 --> 00:02:24,210
you're at Georgia Tech, but
you still can't do that.

46
00:02:24,210 --> 00:02:28,170
It's not just the halting
problem we can't solve, but

47
00:02:28,170 --> 00:02:32,090
we can't determine pretty much
anything about what a computer does.

48
00:02:32,090 --> 00:02:32,740
Let's keep going.
