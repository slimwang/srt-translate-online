1
00:00:00,200 --> 00:00:03,760
A set is an unordered
collection of distinct values.

2
00:00:03,760 --> 00:00:07,667
Like arrays and dictionaries, sets can
be initialized with literal syntax or

3
00:00:07,667 --> 00:00:09,630
initializer syntax.

4
00:00:09,630 --> 00:00:13,550
Notice that if I add two identical
values to my set, the compiler

5
00:00:13,550 --> 00:00:17,810
doesn't complain, but it doesn't add
that repeated item either because,

6
00:00:17,810 --> 00:00:20,090
of course, sets have no repeats.

7
00:00:20,090 --> 00:00:21,860
You'll find that inserting,
removing, and

8
00:00:21,860 --> 00:00:25,740
counting items from sets is similar to
working with arrays and dictionaries.

9
00:00:25,740 --> 00:00:29,128
Here I'm adding all of the emoji
trees to the trees set.

10
00:00:29,128 --> 00:00:33,286
Oops, except a cactus isn't really
a tree, so let's remove that one.

11
00:00:33,286 --> 00:00:38,190
And remember you can get to the emoji
keyboard by pressing Ctrl/Cmd+Spacebar.

12
00:00:38,190 --> 00:00:41,380
So we can remove the cactus
using the remove method.

13
00:00:41,380 --> 00:00:44,690
And as always if you want to know
how many items are in the set,

14
00:00:44,690 --> 00:00:48,500
you can use the count method which
is available to all collections.

15
00:00:48,500 --> 00:00:51,210
And that should be enough to
get you started with sets.

16
00:00:51,210 --> 00:00:54,310
You'll find they aren't used as
frequently as arrays and dictionaries.

17
00:00:54,310 --> 00:00:57,260
But for more on operations for
defining, manipulating, and

18
00:00:57,260 --> 00:00:59,950
comparing sets, follow the link
in the instructor's notes.
