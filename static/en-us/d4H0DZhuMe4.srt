1
00:00:00,250 --> 00:00:02,839
Speaking about saving time
through deep searching.

2
00:00:02,839 --> 00:00:06,070
Another powerful trick is to look
at the structure of the problem.

3
00:00:06,070 --> 00:00:09,710
And see if we can decompose it,
to several independent problems.

4
00:00:09,710 --> 00:00:13,620
>> For example, Tasmania is independent
of the rest of the Australia problem.

5
00:00:13,619 --> 00:00:15,359
We can solve it separately.

6
00:00:15,359 --> 00:00:17,619
>> Which takes a level
off our search tree.

7
00:00:17,620 --> 00:00:21,109
In general, suppose we have
a problem with 80 binary variables.

8
00:00:21,109 --> 00:00:24,390
We can divide it into four
problems of 20 variables.

9
00:00:24,390 --> 00:00:30,740
We go from a search space of two to
the 80th to four times two to the 20th.

10
00:00:30,739 --> 00:00:32,969
>> Even better, if we have
a CSP where there are no loops.

11
00:00:32,969 --> 00:00:38,310
We can solve the problem in OND squared
time, instead of O, D to the N.

12
00:00:38,310 --> 00:00:39,469
>> How?

13
00:00:39,469 --> 00:00:41,629
>> We pick any variable to
be the root of the tree, and

14
00:00:41,630 --> 00:00:43,010
choose an ordering of the variables.

15
00:00:43,009 --> 00:00:46,509
Such that, each variable appears
after it's parent in the tree.

16
00:00:46,509 --> 00:00:49,229
We then start at the end and
make each parent arc consistent.

17
00:00:49,229 --> 00:00:51,669
Going up the tree,
until we get to the top.

18
00:00:51,670 --> 00:00:53,520
>> What if that is not possible?

19
00:00:53,520 --> 00:00:55,640
>> Then we report
failure of the problem.

20
00:00:55,640 --> 00:00:57,549
>> Okay, what's next?

21
00:00:57,549 --> 00:00:59,579
>> It's simple,
we start at the top of the tree and

22
00:00:59,579 --> 00:01:00,979
pick any assignment available.

23
00:01:00,979 --> 00:01:03,509
Going back down the tree,
until we get to the end.

24
00:01:03,509 --> 00:01:04,909
Since the trees are consistent,

25
00:01:04,909 --> 00:01:07,539
any of the variable assignments
will solve the problem.

26
00:01:07,540 --> 00:01:09,480
>> How fast is this process?

27
00:01:09,480 --> 00:01:12,329
O of ND squared, where N is
the number of variables again,

28
00:01:12,329 --> 00:01:14,310
and D is the size of the domain.

29
00:01:14,310 --> 00:01:17,990
>> So this trick really helps out
with the speed of finding a solution.

30
00:01:17,989 --> 00:01:21,109
But what if the constraint
graph really isn't a tree?

31
00:01:21,109 --> 00:01:23,879
>> Well, sometimes you can condition
a problem by assigning values to

32
00:01:23,879 --> 00:01:24,920
some variables.

33
00:01:24,920 --> 00:01:26,659
And change the constraint
graph into a tree.

34
00:01:28,000 --> 00:01:30,519
>> Like with our Australia
coloring example.

35
00:01:30,519 --> 00:01:33,269
If we assign a value to
South Australia first, and

36
00:01:33,269 --> 00:01:36,119
remove that value from
the possibilities of its neighbors.

37
00:01:36,120 --> 00:01:37,460
Then the problem becomes a tree,

38
00:01:37,459 --> 00:01:40,349
and we can use our fast
method to solve the problem.

39
00:01:40,349 --> 00:01:40,849
>> Precisely.

