1
00:00:00,280 --> 00:00:03,430
Ports are an important addition to network communication. But if that

2
00:00:03,430 --> 00:00:06,040
were all the transport layer did, the application layer would be

3
00:00:06,040 --> 00:00:10,010
left to cope with some common problems. Given the terrific complexity

4
00:00:10,010 --> 00:00:13,060
and scale of the internet, it's no surprise that packets occasionally get

5
00:00:13,060 --> 00:00:15,920
lost or delivered out of order. It sure would be nice

6
00:00:15,920 --> 00:00:18,910
to have some kind of acknowledgment that the packet got through, that

7
00:00:18,910 --> 00:00:21,780
way we could resend the packet if necessary and achieve more

8
00:00:21,780 --> 00:00:25,320
reliable communication. And for larger messages that need to be broken up

9
00:00:25,320 --> 00:00:27,500
into lots of smaller packets, it would be nice to

10
00:00:27,500 --> 00:00:30,110
have some kind of numbering system so that if they arrived

11
00:00:30,110 --> 00:00:33,650
out of order, they can be re-assembled. Moreover, we would like

12
00:00:33,650 --> 00:00:36,040
to know if we are overwhelming the recipient with too many

13
00:00:36,040 --> 00:00:39,230
packets too fast, or if we are causing congestion on

14
00:00:39,230 --> 00:00:41,230
some link in the route, so that we can be a

15
00:00:41,230 --> 00:00:45,780
good citizen and slow down. All of this functionality is provided

16
00:00:45,780 --> 00:00:50,640
by the transmission control protocol, or TCP inside the transport layer.

17
00:00:50,640 --> 00:00:53,280
TCP doesn't just start off firing packets towards some

18
00:00:53,280 --> 00:00:56,940
destination without warning. The conversation begins and ends with a

19
00:00:56,940 --> 00:00:59,100
polite handshake to mark the beginning and end of

20
00:00:59,100 --> 00:01:03,060
an exchange. Once the connection is established, data can go

21
00:01:03,060 --> 00:01:06,050
both ways from initial data to recipient and visa

22
00:01:06,050 --> 00:01:08,750
versa. Let's take a look at an example. I'll use

23
00:01:08,750 --> 00:01:12,080
some unrealistically small numbers to keep things simple. And

24
00:01:12,080 --> 00:01:16,180
I'll rename the initiator G T and the recipient udacity.

25
00:01:16,180 --> 00:01:18,720
At this point, the connection is pretty much symmetric. So

26
00:01:18,720 --> 00:01:22,350
the vocabulary for the handshake becomes confusing. GT issues a

27
00:01:22,350 --> 00:01:25,350
request and sets a push flag, meaning send me your

28
00:01:25,350 --> 00:01:29,940
data, then Udacity begins transmission back. Great, but what if

29
00:01:29,940 --> 00:01:32,020
one of the packets is dropped, that is to say

30
00:01:32,020 --> 00:01:34,540
they don't make it across the internet? In our example,

31
00:01:34,540 --> 00:01:37,280
let's suppose that the first packet doesn't make it. We

32
00:01:37,280 --> 00:01:41,090
would like a way to detect the situation. Here's TCP solution.

33
00:01:41,090 --> 00:01:43,640
After the initial handshake, packet or segments as they

34
00:01:43,640 --> 00:01:46,690
are called in TCP parlance, indicate how much data

35
00:01:46,690 --> 00:01:50,100
the other side should have received already, and also

36
00:01:50,100 --> 00:01:53,230
how much data the sender has received. The former is

37
00:01:53,230 --> 00:01:56,440
called the sequence number, and the later the acknowledgement

38
00:01:56,440 --> 00:02:00,280
number. During the handshake both of these numbers get incremented

39
00:02:00,280 --> 00:02:03,140
by one. In this scenario, TCP will be able

40
00:02:03,140 --> 00:02:06,540
to detect the dropped packet, because the next message thinks

41
00:02:06,540 --> 00:02:08,530
that nine bites is the amount that should have

42
00:02:08,530 --> 00:02:12,420
been received. But in reality GT has only received

43
00:02:12,420 --> 00:02:16,000
the initial acknowledgement. You might think that GT would

44
00:02:16,000 --> 00:02:19,190
send the packet saying, could you resend that please. But

45
00:02:19,190 --> 00:02:22,050
actually the system works by positive acknowledgements instead of

46
00:02:22,050 --> 00:02:25,580
request or re-transmission. If the packet had gone through,

47
00:02:25,580 --> 00:02:28,210
the traffic should have looks like this. So even

48
00:02:28,210 --> 00:02:32,220
though GT doesn't really have anything to say to Udacity,

49
00:02:32,220 --> 00:02:34,700
he should have been sending empty acknowledge packets to

50
00:02:34,700 --> 00:02:38,700
Udacity, indicating that the packets were received. To make an

51
00:02:38,700 --> 00:02:42,970
analogy to human conversation, this is like saying uh-huh periodically

52
00:02:42,970 --> 00:02:45,690
to let the other person know you are listening. Going

53
00:02:45,690 --> 00:02:47,270
back to the case where the first packet is

54
00:02:47,270 --> 00:02:51,450
dropped, we now see that upon receiving the second packet,

55
00:02:51,450 --> 00:02:54,200
GT would see that a packed has been dropped, and

56
00:02:54,200 --> 00:02:58,170
simply won't acknowledge the first one or the later one.

57
00:02:58,170 --> 00:03:01,090
After enough time has passed, Udacity will notice

58
00:03:01,090 --> 00:03:03,600
that it hasn't received an acknowledgment for that first

59
00:03:03,600 --> 00:03:07,445
packet and will re-transmit it. When GT receives the

60
00:03:07,445 --> 00:03:10,610
re-transmitted package, he can now send an acknowledgment for

61
00:03:10,610 --> 00:03:14,190
both packets, saying that he has received 17

62
00:03:14,190 --> 00:03:17,780
bytes worth of data. Together, this system of acknowledgments

63
00:03:17,780 --> 00:03:21,270
and sequence numbers helps achieve the first two goals.

64
00:03:21,270 --> 00:03:23,310
I'll have to refer you to a networking class

65
00:03:23,310 --> 00:03:25,590
for a more complete discussion of the third goal, but I

66
00:03:25,590 --> 00:03:29,310
do want to briefly discuss the idea of window size. In this

67
00:03:29,310 --> 00:03:32,990
example, udacity has sometimes sent out a packet before it receives

68
00:03:32,990 --> 00:03:36,950
an acknowledgement of a previous one. This is typical for TCP

69
00:03:36,950 --> 00:03:38,770
And how much one side is allowed to get ahead of

70
00:03:38,770 --> 00:03:43,420
himself in the conversation is controlled by a window size parameter.

71
00:03:43,420 --> 00:03:46,000
A good way to visualize this, is by drawing the data

72
00:03:46,000 --> 00:03:48,410
that needs to be sent as a long bar and then

73
00:03:48,410 --> 00:03:50,610
dividing it into the packets that actually get

74
00:03:50,610 --> 00:03:53,420
sent. We have the packets that have been sent

75
00:03:53,420 --> 00:03:56,300
and acknowledged, the ones that have been sent

76
00:03:56,300 --> 00:04:00,780
but haven't been acknowledged yet, and the unsent packets.

77
00:04:00,780 --> 00:04:03,640
This middle part, representing the packets sent out

78
00:04:03,640 --> 00:04:07,850
but not acknowledged, represent the window. And as the,

79
00:04:07,850 --> 00:04:10,440
during transmission, the window will slide across to the

80
00:04:10,440 --> 00:04:13,620
right. The window size puts a limit on how

81
00:04:13,620 --> 00:04:16,329
a wide this window can get. If the window is too

82
00:04:16,329 --> 00:04:19,260
small, then it can slow the connection down as the sender

83
00:04:19,260 --> 00:04:22,950
has to stop and wait for an acknowledgement for every packet.

84
00:04:22,950 --> 00:04:25,750
If the window size is too big, then there's a risk that

85
00:04:25,750 --> 00:04:28,950
it will over flaw the buffers of the recipient, or of

86
00:04:28,950 --> 00:04:32,150
one of the hops along the way resulting in packet loss.

87
00:04:32,150 --> 00:04:34,540
So it's important to get the window size right. You can

88
00:04:34,540 --> 00:04:38,660
explore other aspects of TCP's flow and congestion control by following the

89
00:04:38,660 --> 00:04:39,864
links in the instructor notes.
