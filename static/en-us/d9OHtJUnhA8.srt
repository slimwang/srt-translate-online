1
00:00:00,000 --> 00:00:04,000
So we just filled out that previous code integrating our HTML interpreter

2
00:00:04,000 --> 00:00:06,000
with our JavaScript interpreter,

3
00:00:06,000 --> 00:00:10,000
assuming that our JavaScript interpreter returns a string.

4
00:00:10,000 --> 00:00:16,000
The basic idea is that if the embedded JavaScript code called document.write(x),

5
00:00:16,000 --> 00:00:19,000
we'd notice that x and save it and return it back to you.

6
00:00:19,000 --> 00:00:21,000
Unfortunately, there is an evil problem.

7
00:00:21,000 --> 00:00:24,000
This is a little more complicated than it looks.

8
00:00:24,000 --> 00:00:27,000
This is totally legitimate JavaScript code.

9
00:00:27,000 --> 00:00:32,000
Note that I have 1 call to document.write and then another call to document.write.

10
00:00:32,000 --> 00:00:38,000
Somehow I'm going to need to paste together "hello" and "world" and return both of them.

11
00:00:38,000 --> 00:00:42,000
So the basic problem here is that there may not be just 1 call to write.

12
00:00:42,000 --> 00:00:45,000
There may be many more or actually there may be 0,

13
00:00:45,000 --> 00:00:49,000
but we want to get out of this "hello-space-world!"

14
00:00:49,000 --> 00:00:52,000
So we have to store text printed by write,

15
00:00:52,000 --> 00:00:56,000
but we may find that as we execute or interpret the JavaScript program,

16
00:00:56,000 --> 00:00:58,000
the amount of output grows.

17
00:00:58,000 --> 00:01:01,000
Well, if we want to store values that may change--

18
00:01:01,000 --> 00:01:05,000
boy, if only we already had some way to do that--oh wait! We totally do.

19
00:01:05,000 --> 00:01:08,000
We went to all that trouble to learn about how environments work

20
00:01:08,000 --> 00:01:10,000
in nested environments and variable updates.

21
00:01:10,000 --> 99:59:59,999
Let's reuse that. That was really powerful!
