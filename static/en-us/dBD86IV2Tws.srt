1
00:00:00,240 --> 00:00:04,019
So, given this pipeline that was in the quiz, we found that B is the slow stage

2
00:00:04,019 --> 00:00:07,877
here and B is, in fact, called the bottleneck. It's the slowest stage and it's

3
00:00:07,877 --> 00:00:11,628
the one that determines how fast anything is going to come out of the pipeline.

4
00:00:11,628 --> 00:00:15,321
And there's always a bottleneck in the pipeline. In fact, there's always some

5
00:00:15,321 --> 00:00:19,149
slowest stage. Maybe two or three that are tied for slowest but there's always

6
00:00:19,149 --> 00:00:24,207
some stage that's the slowest. Objects 3 and 4 move on through the pipeline and

7
00:00:24,207 --> 00:00:29,044
object 2 is still being processed by B. So, what this is called is when stage C

8
00:00:29,044 --> 00:00:33,332
is waiting for input and nothing's coming because we're waiting for B to finish,

9
00:00:33,332 --> 00:00:37,790
that's called starvation. That's where C is not getting anything until B is

10
00:00:37,790 --> 00:00:42,105
totally complete. On the other hand, what's happening here is stage A has

11
00:00:42,105 --> 00:00:46,383
finished processing object 1 but object 1 can't move on because, stage B is

12
00:00:46,383 --> 00:00:51,200
still processing object 2. This is called stalling. With the rendering pipeline,

13
00:00:51,200 --> 00:00:54,989
these same sorts of principles apply. Having the application run efficiently and

14
00:00:54,989 --> 00:00:58,695
keep the GPU fed with data is a common bottleneck for example. The bottleneck

15
00:00:58,695 --> 00:01:02,250
will change over time. With sometimes one stage being the slowest sometimes

16
00:01:02,250 --> 00:01:06,570
another. Gpu designers use different techniques to perform load balancing, such

17
00:01:06,570 --> 00:01:10,604
as first in and first out queues. Where you sort of stack up a bunch of objects

18
00:01:10,604 --> 00:01:14,636
so that if the stage suddenly gets faster, a bunch of objects can move into it

19
00:01:14,636 --> 00:01:19,252
quickly, or other techniques such as unified shaders. We wont be describing

20
00:01:19,252 --> 00:01:22,969
these techniques in detail in this course, but it's good to be aware that the

21
00:01:22,969 --> 00:01:26,684
GPU has a lot going on inside of it. Various performance debugging tools let you

22
00:01:26,684 --> 00:01:30,129
see what parts of the pipeline are bottlenecks and so, can help you improve the

23
00:01:30,129 --> 00:01:31,693
performance of your application.
