1
00:00:00,076 --> 00:00:03,318
Atomic memory operation have a number of limitations that you need to know about.

2
00:00:03,334 --> 00:00:06,891
First of all, only certain operations and data types are supported.

3
00:00:06,891 --> 00:00:11,979
So there's things like add and subtract, and min and x or, and so forth.

4
00:00:11,979 --> 00:00:18,795
But you can't do every operation. There's no mod, for example. There's no exponentiate.

5
00:00:18,795 --> 00:00:24,039
You can't do every operation. And only certain data types are supported,

6
00:00:24,039 --> 00:00:27,245
in particular, mostly integer types.

7
00:00:27,245 --> 00:00:34,352
So, atomic ad and atomic exchange are the only types that actually support floating point operations.

8
00:00:34,352 --> 00:00:36,175
There's a workaround for this.

9
00:00:36,175 --> 00:00:38,606
It turns out that you can implement any atomic operation

10
00:00:38,606 --> 00:00:41,488
by using the atomic compare and swap operation.

11
00:00:41,488 --> 00:00:47,149
And I'm not going to go into the details. This gets into mutexes and critical sections.

12
00:00:47,149 --> 00:00:51,390
There's a short example in the programming guide that gives you an example

13
00:00:51,390 --> 00:00:56,056
of how to implement, for example, 64 bit operations using atomic CAS.

14
00:00:56,056 --> 00:00:59,090
You need to be aware that there's still is no ordering constraints, right?

15
00:00:59,090 --> 00:01:02,873
So the different threads in a thread block and the different thread blocks themselves

16
00:01:02,873 --> 00:01:05,039
will be running in some unspecified order.

17
00:01:05,040 --> 00:01:06,847
It will be different every time.

18
00:01:06,847 --> 00:01:13,525
So the operations that you're performing on memory using a atomics are

19
00:01:13,525 --> 00:01:16,387
still going to happen in an unspecified order.

20
00:01:16,387 --> 00:01:20,116
This is important, because floating-point arithmetic is actually non-associative.

21
00:01:20,116 --> 00:01:27,828
In other words, the quantity of "a plus b plus c" is not the same as "a plus the quantity of b plus c."

22
00:01:27,828 --> 00:01:32,253
It's real easy to convince yourself if you look at numbers like say, a equals 1,

23
00:01:32,253 --> 00:01:36,218
b equals 10 to the 99th, and c equals 10 to the 99th.

24
00:01:36,218 --> 00:01:40,788
You can just plug this into your c decompiler or your calculator, for that matter,

25
00:01:40,788 --> 00:01:44,934
and you'll discover that you don't get the same number, depending on what order you do these operations in.

26
00:01:44,934 --> 00:01:50,131
And the final thing to be really aware of with atomics is that there's no magic happening under the hood.

27
00:01:50,131 --> 00:01:55,118
The GPU is still forcing each thread to take turns giving access to that memory.

28
00:01:55,118 --> 00:01:58,455
It's serializing the access to memory among the different threads.

29
00:01:58,455 --> 00:02:01,855
And this can make atomic operations very slow, if you're not careful.

30
00:02:01,855 --> 00:02:03,980
Let's look into that.
