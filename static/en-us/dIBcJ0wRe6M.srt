1
00:00:00,000 --> 00:00:04,000
Okay, so let's go ahead and take a look at clients real quick.

2
00:00:04,000 --> 00:00:07,000
So, this is the original test function that you had test1

3
00:00:07,000 --> 00:00:13,000
and remember that you said that some of the behaviors that that doesn't test for

4
00:00:13,000 --> 00:00:15,000
is basically all of these if statements here.

5
00:00:15,000 --> 00:00:21,000
So, I'm going to go ahead and just try test2 to test these two main ones

6
00:00:21,000 --> 00:00:26,000
that is if the size is equal to max, then we will return false,

7
00:00:26,000 --> 00:00:30,000
and if the tail is equal to max, then we will reset the tail to zero.

8
00:00:30,000 --> 00:00:32,000
So let's go ahead and build that. Okay.

9
00:00:32,000 --> 00:00:39,000
So in test2, we create a queue of size two and we make sure that it is empty to begin with

10
00:00:39,000 --> 00:00:44,000
just as a good start, and we enqueue1 and enqueue2.

11
00:00:44,000 --> 00:00:47,000
We make sure that these both returned true.

12
00:00:47,000 --> 00:00:51,000
And then we enqueue 3 or we attempt to enqueue 3,

13
00:00:51,000 --> 00:00:57,000
which shouldn't work because remember it's only a queue of size 2--it can only store two elements.

14
00:00:57,000 --> 00:01:03,000
So, we should be able to check that, and the tail, queue.tail, does not equal to zero.

15
00:01:03,000 --> 00:01:10,000
If it doesn't, then we haven't reset it to zero like we said we did right up here, remember?

16
00:01:10,000 --> 00:01:12,000
So, that would be a problem.

17
00:01:12,000 --> 00:01:18,000
And we check that right there and, otherwise, we print out test2 as okay.

18
00:01:18,000 --> 00:01:21,000
So, we go ahead and run this. Okay.

19
00:01:21,000 --> 00:01:25,000
Now we see that we print out test2 as okay, so everything is good.

20
00:01:25,000 --> 00:01:28,000
So now, let's go ahead and check out test3.

21
00:01:28,000 --> 00:01:33,000
So for the third test, remember let's take a look at dequeue function really quick.

22
00:01:33,000 --> 00:01:36,000
So, we want to test that when you dequeue an empty queue,

23
00:01:36,000 --> 00:01:40,000
you should return none since there is nothing to return.

24
00:01:40,000 --> 00:01:46,000
Then, we also want to check that if we dequeue and we have gone pass the end of the queue

25
00:01:46,000 --> 00:01:51,000
that is the head pointer has stepped out into a larger element

26
00:01:51,000 --> 00:01:54,000
and the total length of the queue, the size of the queue,

27
00:01:54,000 --> 00:01:56,000
then we want to reset it to zero.

28
00:01:56,000 --> 00:02:01,000
So, if we go forward or pass the end then we want to wrap it that around.

29
00:02:01,000 --> 00:02:03,000
So, let's go ahead and take a look at test3.

30
00:02:03,000 --> 00:02:07,000
Okay, so the first thing we do is we initialize a queue of one element.

31
00:02:07,000 --> 00:02:11,000
So, it can only store one element. It's not a terribly exciting queue.

32
00:02:11,000 --> 00:02:15,000
So first, we try to empty it, which shouldn't work. If it does, then we got a problem.

33
00:02:15,000 --> 00:02:20,000
Then, after that, we try to dequeue and so remember this should return none.

34
00:02:20,000 --> 00:02:25,000
If it doesn't return none, then again we got a problem. If it does, then we continue.

35
00:02:25,000 --> 00:02:29,000
Now enqueue one element, so at this point, the queue is full

36
00:02:29,000 --> 00:02:34,000
and head should be at one, which is the max size of the queue.

37
00:02:34,000 --> 00:02:39,000
So now, when we try to dequeue, we should reset queue.head to zero.

38
00:02:39,000 --> 00:02:41,000
If we don't, then we got a problem.

39
00:02:41,000 --> 00:02:45,000
And we go ahead and check that the element that we get backed out from dequeue

40
00:02:45,000 --> 00:02:48,000
is also one--just to be complete.

41
00:02:48,000 --> 00:02:52,000
So, if we get through all of these, then we print out test3 okay.

42
00:02:52,000 --> 00:02:57,000
So, let's go ahead and run that and we see that, yes, test3 is okay.

43
00:02:57,000 --> 00:02:59,000
So, you might have tested different things.

44
00:02:59,000 --> 00:03:02,000
You also might have tested just some of these and that's fine.

45
00:03:02,000 --> 00:03:06,000
The goal was just to try to figure out different places in the code

46
00:03:06,000 --> 00:03:09,000
that you could test against that we had already given you.

47
00:03:09,000 --> 00:03:13,000
And that's a really important thing to learn how to do as a tester.

48
00:03:13,000 --> 99:59:59,999
So, okay, let's go ahead and move on.
