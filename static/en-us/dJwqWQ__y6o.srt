1
00:00:00,008 --> 00:00:03,380
Given how setTimeout works when passed a function reference,

2
00:00:03,380 --> 00:00:06,460
what would you expect to happen when you pass in a method that

3
00:00:06,460 --> 00:00:09,120
was first looked up as a property of an object?

4
00:00:09,120 --> 00:00:13,300
Notice that we're using dot notation to find the method at the moment we go

5
00:00:13,300 --> 00:00:15,840
looking for it, to pass it into setTimeout.

6
00:00:15,840 --> 00:00:19,320
Again, let's start by considering how we expect the positional

7
00:00:19,320 --> 00:00:20,770
parameters to work.

8
00:00:20,770 --> 00:00:24,590
As before, they're bound to undefined since no values were passed in

9
00:00:24,590 --> 00:00:28,820
in-between the parentheses on the line where we call the callback.

10
00:00:28,820 --> 00:00:32,016
Furthermore, the setTimeout function wasn't passed any of

11
00:00:32,016 --> 00:00:35,219
the color values that might have been passed to the callback.

12
00:00:35,219 --> 00:00:37,992
And so the body of setTimeout wouldn't have any way of

13
00:00:37,992 --> 00:00:40,500
knowing what values you wanted passed in.

14
00:00:40,500 --> 00:00:43,530
The next question is what will get bound to the parameter this.

15
00:00:43,530 --> 00:00:46,690
Hint, remember where we have to look to determine the binding for

16
00:00:46,690 --> 00:00:48,100
the parameter this.

17
00:00:48,100 --> 00:00:50,770
It isn't in the function definition nor

18
00:00:50,770 --> 00:00:53,600
is it where the function is looked up on the object.

19
00:00:53,600 --> 00:00:57,250
The important moment is where the function is actually invoked.

20
00:00:57,250 --> 00:01:00,030
Generally, people find it tempting to imagine that since we did

21
00:01:00,030 --> 00:01:03,940
a property lookup on the red object, perhaps that lookup event would have

22
00:01:03,940 --> 00:01:07,230
some bearing on the keyword this inside the function.

23
00:01:07,230 --> 00:01:10,960
But this moment is irrelevant since only the moment of call time influences how

24
00:01:10,960 --> 00:01:12,800
the parameter this will get bound.

25
00:01:12,800 --> 00:01:17,500
Just as in the previous example where we passed in fn instead of r.method,

26
00:01:17,500 --> 00:01:21,620
the last line of setTimeout is still a free function invocation and

27
00:01:21,620 --> 00:01:24,050
not a method invocation with a dot.

28
00:01:24,050 --> 00:01:28,440
Therefore, this would still be bound to its default value, the global object.
