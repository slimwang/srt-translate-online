1
00:00:00,380 --> 00:00:02,750
Now that we've understood
the satisfiability problem,

2
00:00:02,750 --> 00:00:04,790
we're ready to tackle
the Cook-Levin theorem.

3
00:00:05,880 --> 00:00:11,110
Remember that we have to turn any
problem in NP into an instance of SAT.

4
00:00:11,110 --> 00:00:14,760
So it's natural to start with the thing
that we know all problems in NP

5
00:00:14,760 --> 00:00:15,478
have in common.

6
00:00:15,478 --> 00:00:20,430
There's a non-deterministic machine
that decides them in polynomial time.

7
00:00:20,430 --> 00:00:22,060
That's the definition, after all.

8
00:00:22,060 --> 00:00:25,700
Therefore, let L be an arbitrary
language in NP, and

9
00:00:25,700 --> 00:00:29,610
let M be a non-deterministic
Turing machine that decides L

10
00:00:29,610 --> 00:00:33,490
in time at most p(n),
where, p is a polynomial.

11
00:00:33,490 --> 00:00:36,850
In accepting computation, or
sequence of configurations for

12
00:00:36,850 --> 00:00:40,340
the machine M, can be represented
in a tableau like this one here.

13
00:00:41,390 --> 00:00:44,450
Each configuration in a sequence
is represented by a row.

14
00:00:45,610 --> 00:00:50,589
Where we have one column for the state,
one column for the head position,

15
00:00:50,589 --> 00:00:55,100
and columns for the values of
the first p event squares of the tape.

16
00:00:56,330 --> 00:00:59,780
Note that no other squares can be
written to because there just isn't time

17
00:00:59,780 --> 00:01:03,480
to move the head that far
in only p event steps.

18
00:01:03,480 --> 00:01:07,170
Of course, the first row must
represent the initial configuration.

19
00:01:07,170 --> 00:01:11,200
And the last one must be in
an accepting state in order for

20
00:01:11,200 --> 00:01:13,010
the overall computation to be accepted.

21
00:01:14,200 --> 00:01:17,460
Note that it's possible that the machine
will enter an accepting state before

22
00:01:17,460 --> 00:01:20,980
step P event, but we can just
stipulate that when this happens,

23
00:01:20,980 --> 00:01:23,950
all the rest of the rows in
the table have the same values.

24
00:01:23,950 --> 00:01:27,140
This is like having the accept
state always transition to itself.

25
00:01:27,140 --> 00:01:30,810
The Cook-Levin theorem then,
consists of arguing that the existence

26
00:01:30,810 --> 00:01:34,990
of an accepting computation is
equivalent to being able to satisfy

27
00:01:34,990 --> 00:01:39,000
a CNF formula that captures all
the rules for filling out this table.
