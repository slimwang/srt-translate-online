1
00:00:00,680 --> 00:00:04,160
In addition to coding APIs that
are functional and high performing,

2
00:00:04,160 --> 00:00:07,230
documentation should be easy to
navigate, and aesthetically pleasing.

3
00:00:08,740 --> 00:00:11,860
If your documentation looks like
classified ads from a newspaper,

4
00:00:11,860 --> 00:00:14,060
developers are not going to be
eager to navigate through it.

5
00:00:15,060 --> 00:00:18,450
Let's take a look at Twilio's
documentation for using their API.

6
00:00:18,450 --> 00:00:22,240
Tulio has this overview page, which
easily guides developers to the major

7
00:00:22,240 --> 00:00:26,060
aspects of their API without
getting lost in the documentation.

8
00:00:26,060 --> 00:00:30,550
Some API providers like Udacity, for
instance, use what we call Hello World

9
00:00:30,550 --> 00:00:34,280
documentation containing boiler plate
code for using their APIs quickly.

10
00:00:35,280 --> 00:00:36,180
Having a section for

11
00:00:36,180 --> 00:00:40,290
frequently asked questions, like
the Google Maps API, makes it easy for

12
00:00:40,290 --> 00:00:43,020
developers to quickly get answers
to their most common questions.

13
00:00:44,120 --> 00:00:47,700
In some situations a good FAQ section
can be just as informative as

14
00:00:47,700 --> 00:00:49,480
the original documentation.

15
00:00:49,480 --> 00:00:53,300
Since it addresses constraints and
common corner cases of a system.

16
00:00:53,300 --> 00:00:57,050
Playgrounds and sand boxes are also
great tool sets many API providers

17
00:00:57,050 --> 00:00:59,220
are adding to their documentation.

18
00:00:59,220 --> 00:01:03,380
Developers can test out API end points
by executing sample API request

19
00:01:03,380 --> 00:01:05,500
directly on the providers web site.

20
00:01:05,500 --> 00:01:09,706
When developing your own APIs, consider
taking time to make fun, interactive and

21
00:01:09,706 --> 00:01:13,990
develop-friendly documentation in order
to gain popularity amongst your users.
