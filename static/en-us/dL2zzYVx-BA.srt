1
00:00:00,540 --> 00:00:01,920
The one thing that you do need to pay

2
00:00:01,920 --> 00:00:05,230
attention, to ,with touch on mobile, is the click delay.

3
00:00:05,230 --> 00:00:08,560
Touch supporting mobile browsers, usually interpret double tapping, as

4
00:00:08,560 --> 00:00:12,450
a zoom into this element gesture. Unfortunately, this means the

5
00:00:12,450 --> 00:00:15,250
platform, delays finds click of it until it can

6
00:00:15,250 --> 00:00:18,300
decide whether, the user is double tapping, about a third

7
00:00:18,300 --> 00:00:21,630
of a second, chrome has recently checked in some changes,

8
00:00:21,630 --> 00:00:25,230
that minimize this behavior. But, pretty much, all mobile browsers,

9
00:00:25,230 --> 00:00:28,910
have this click delay feature, to some degree. There are

10
00:00:28,910 --> 00:00:31,190
a few ways to fix this problem, and, get clicks

11
00:00:31,190 --> 00:00:33,760
without a delay, you can set the view port, to

12
00:00:33,760 --> 00:00:38,500
be non-scalable. Either, set user scalable, to no, or set minimum

13
00:00:38,500 --> 00:00:40,870
scale and maximum scale, to one, which has the same

14
00:00:40,870 --> 00:00:44,740
effect. This can cause accessibility problems, though, so be careful jumping,

15
00:00:44,740 --> 00:00:47,540
to this solution. You need to make sure, if you

16
00:00:47,540 --> 00:00:50,830
do this, that your site will never ,need to be zoomed.

17
00:00:50,830 --> 00:00:54,400
You can use a fast click library, like the ft labs one, that we've linked

18
00:00:54,400 --> 00:00:55,860
down below. But ,you do have to

19
00:00:55,860 --> 00:00:58,010
be careful, about how this impacts, your scrolling

20
00:00:58,010 --> 00:01:00,020
performance, be sure to read the directions,

21
00:01:00,020 --> 00:01:03,105
very carefully. Where finally, of course, you can

22
00:01:03,105 --> 00:01:06,160
implement tech support yourself directly, if you consume

23
00:01:06,160 --> 00:01:08,010
the touch events, you won't have this issue.
