1
00:00:00,000 --> 00:00:04,000
Here's an additional little nugget at the end. Let's make this function more complicated.

2
00:00:04,000 --> 00:00:10,000
Let's say that what I want to do is find the word that has an "l" closest to the end of it.

3
00:00:10,000 --> 00:00:12,000
So for example, here in "Bible" the "l" is in position 4.

4
00:00:12,000 --> 00:00:17,000
In "Kingsolver, it's in 0, 1, 2, 3, 4, 5, position something--I can't count.

5
00:00:17,000 --> 00:00:20,000
0, 1, 2, 3, 4, 5--position 6.

6
00:00:20,000 --> 00:00:22,000
Alright, and for the others, it's -1.

7
00:00:22,000 --> 00:00:24,000
Well, we can do that with our find function.

8
00:00:24,000 --> 00:00:28,000
So we'll just pass in lpos, and this should work, right?

9
00:00:28,000 --> 00:00:30,000
Actually there may be a bug here. Let's see it in a minute.

10
00:00:30,000 --> 00:00:32,000
Ha! That didn't seem very good.

11
00:00:32,000 --> 00:00:34,000
We got "Bible" instead of "Kingsolver".

12
00:00:34,000 --> 00:00:35,000
What could go wrong?

13
00:00:35,000 --> 00:00:38,000
Well, now let's put back in some of our debugging, make sure all the steps

14
00:00:38,000 --> 00:00:40,000
along the way are working out.

15
00:00:40,000 --> 00:00:45,000
Oh! Look at this. The f_value is none every time. Why is that?

16
00:00:45,000 --> 00:00:50,000
I could have sworn I was writing a function that was returning--Oh! Oh! I forgot the word return.

17
00:00:50,000 --> 00:00:54,000
The default return value for a function is none if you don't say anything.

18
00:00:54,000 --> 00:00:55,000
So let's try running it again.

19
00:00:55,000 --> 00:00:58,000
And now, the return values are as expected and "Kingsolver,"

20
00:00:58,000 --> 00:01:02,000
which has an "l" in position 6, beats out "Bible" with its "l" in position 3,

21
00:01:02,000 --> 00:01:03,000
and we return "Kingsolver."

22
00:01:03,000 --> 00:01:09,000
Now here, I had to add in 2 more lines just to make this simple function.

23
00:01:09,000 --> 00:01:13,000
It turns out that Python has a trick called lambda that let's you make a function

24
00:01:13,000 --> 00:01:17,000
in the middle of nowhere, and it looks something like this.

25
00:01:17,000 --> 00:01:22,000
Here, instead of making this function "l" position that returns word.find,

26
00:01:22,000 --> 00:01:24,000
I use lambda, which means make me a function.

27
00:01:24,000 --> 00:01:27,000
I don't have to call it anything because I'm only going to use it right here.

28
00:01:27,000 --> 00:01:31,000
Its argument is word, and its return value is word.find("l").

29
00:01:31,000 --> 00:01:34,000
The word return is implicit when you use lambda.

30
00:01:34,000 --> 00:01:39,000
Just to make sure this is working, I will totally delete our definition of lpos,

31
00:01:39,000 --> 00:01:44,000
and add some new "Super Long This L Comes Last" word,

32
00:01:44,000 --> 00:01:45,000
and it should beat out all the others.

33
00:01:45,000 --> 00:01:49,000
Actually, it won't. Now it will. Case matters.

34
00:01:49,000 --> 00:01:50,000
Oh! And here's our answer.

35
00:01:50,000 --> 00:01:56,000
This function made with lambda--these are sometimes called anonymous functions--

36
00:01:56,000 --> 00:01:59,000
had exactly the same semantics--exactly the same meaning as our previous

37
00:01:59,000 --> 00:02:06,000
lpos function, -1, 6, -1, -1, 3, but now "Super Long This L Comes Last" is 16.

38
00:02:06,000 --> 00:02:07,000
So it wins.

39
00:02:07,000 --> 00:02:11,000
So this time, we saw together how to write this function findmax.

40
00:02:11,000 --> 00:02:15,000
We also got a little experience with writing list test cases,

41
00:02:15,000 --> 00:02:18,000
where you typically want at least order, reverse, and random,

42
00:02:18,000 --> 00:02:20,000
and another good one is actually empty,

43
00:02:20,000 --> 00:02:23,000
but in this problem description, we were guaranteed nonempty.

44
00:02:23,000 --> 00:02:25,000
A bit about how to do print debugging.

45
00:02:25,000 --> 00:02:27,000
Everywhere there's something interesting in your code,

46
00:02:27,000 --> 00:02:29,000
you just print out some values and then you can look at them.

47
00:02:29,000 --> 00:02:31,000
And right at the end a little bit about lambda.

48
00:02:31,000 --> 99:59:59,999
Super productive! I hope you'll join me next time.
