1
00:00:00,000 --> 00:00:06,000
Now I want to get at the idea of reducing b, the branching factor.

2
00:00:06,000 --> 00:00:10,000
How is it that we can cut down on the number of nodes that we expand

3
00:00:10,000 --> 00:00:16,000
in the horizontal direction while still getting the right answer for the evaluation of the tree?

4
00:00:16,000 --> 00:00:21,000
Let's go back and consider that during our evaluation, if we get to this point,

5
00:00:21,000 --> 00:00:25,000
we've expanded these three nodes, we figured out that the value of this one is 3,

6
00:00:25,000 --> 00:00:29,000
we looked at this one so far and found its value was 2,

7
00:00:29,000 --> 00:00:35,000
and now, without looking at these, what can we say about the value of this node?

8
00:00:35,000 --> 00:00:39,000
Well, it's a minimizing node, so the least it could be is 2.

9
00:00:39,000 --> 00:00:44,000
If these are less than 2, it'll be less than that, and if these are more, it'll end up being 2.

10
00:00:44,000 --> 00:00:50,000
We can say that the value of this node is less than or equal to 2.

11
00:00:50,000 --> 00:00:53,000
Now if we look at it from Max's point of view,

12
00:00:53,000 --> 00:00:58,000
Max will have this choice here of choosing either this, this, or this,

13
00:00:58,000 --> 00:01:02,000
and if this one is 3 and this one is less than or equal to 2,

14
00:01:02,000 --> 00:01:05,000
then we know Max will always choose this one.

15
00:01:05,000 --> 00:01:11,000
What that tells us is that it doesn't matter what the value is of this node and this node.

16
00:01:11,000 --> 00:01:16,000
No matter what those values are this is still going to be less than or equal to 2,

17
00:01:16,000 --> 00:01:18,000
and is not going to matter to the total evaluation,

18
00:01:18,000 --> 00:01:20,000
because we're going to go this way anyway.

19
00:01:20,000 --> 00:01:26,000
We can prune the tree, chop off these nodes here, and never have to evaluate.

20
00:01:26,000 --> 00:01:29,000
Now, with this particular case, that doesn't save us very much,

21
00:01:29,000 --> 00:01:33,000
because these are terminal nodes, but these could have been large branches--

22
00:01:33,000 --> 00:01:36,000
big parts of the tree, and we still wouldn't have to look at them.

23
00:01:36,000 --> 00:01:41,000
We've made a potentially large pruning without effecting the value.

24
00:01:41,000 --> 99:59:59,999
We still get the exact correct value for the value of the tree.
