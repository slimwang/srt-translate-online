1
00:00:00,510 --> 00:00:03,920
Their major issue is reliability, which we've alluded to already.

2
00:00:03,920 --> 00:00:06,920
We have a complex system that has multiple pieces to it and

3
00:00:06,920 --> 00:00:12,690
that means a piece might go down, or might, be overloaded at,

4
00:00:12,690 --> 00:00:17,070
at some particular point and how does the rest of the system, respond to that.

5
00:00:17,070 --> 00:00:20,290
Overall we can call that a reliability question.

6
00:00:20,290 --> 00:00:24,930
That is what percentage of the time is the overall application providing the,

7
00:00:24,930 --> 00:00:29,140
the services that it should be providing. Typically you learn about

8
00:00:29,140 --> 00:00:34,340
a reliability problem when some message that is sent is not delivered. Or

9
00:00:34,340 --> 00:00:37,690
at least you don't get an acknowledgment back from it.

10
00:00:37,690 --> 00:00:42,140
When strategy is to try sending the message again. The danger there of

11
00:00:42,140 --> 00:00:46,790
course is that the, recipient receives two copies of the message,

12
00:00:46,790 --> 00:00:51,660
and does whatever action is doing twice which also may be a problem.

13
00:00:51,660 --> 00:00:56,180
This is an example of a classic reliability performance tradeoff.

14
00:00:56,180 --> 00:01:00,670
That is. Whenever you use replication that's going to take more time and

15
00:01:00,670 --> 00:01:05,620
more resources, as well as, as, as compromising the integrity of the system.

16
00:01:05,620 --> 00:01:09,680
You can do it faster but it may not be as reliable. Various policies for

17
00:01:09,680 --> 00:01:13,830
dealing with reliabilities use have arisen such as the,

18
00:01:13,830 --> 00:01:18,720
the client making its best effort. The client's saying it will do at most once,

19
00:01:18,720 --> 00:01:22,450
as far as message sending, at least once, exactly once and so on.
