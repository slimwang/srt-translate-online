1
00:00:00,000 --> 00:00:05,000
[Evans] There's an interesting story about using hash chains for hotel doors.

2
00:00:05,000 --> 00:00:09,000
I'm not positive if this story is true, but I've heard it from fairly reputable sources

3
00:00:09,000 --> 00:00:11,000
and it seems too good not to be true.

4
00:00:11,000 --> 00:00:14,000
So if you think about a hotel, you've got rooms--

5
00:00:14,000 --> 00:00:18,000
let's say this is Room 387--and you've got a check-in desk

6
00:00:18,000 --> 00:00:21,000
that may not be connected by any wire to the room.

7
00:00:21,000 --> 00:00:26,000
What you'd like to happen is when a new visitor checks in--

8
00:00:26,000 --> 00:00:29,000
let's say it's Alice--the desk at the check-in can give her a new key,

9
00:00:29,000 --> 00:00:32,000
and that key will allow her to open the door.

10
00:00:32,000 --> 00:00:35,000
There's no connection between the check-in desk and the door,

11
00:00:35,000 --> 00:00:38,000
and we want to know that Alice will be able to enter the room.

12
00:00:38,000 --> 00:00:41,000
Whoever stayed in the room previously--let's say that was Bob--

13
00:00:41,000 --> 00:00:43,000
shouldn't be able to enter the room anymore.

14
00:00:43,000 --> 00:00:46,000
At the point after Alice checks in and enters the room,

15
00:00:46,000 --> 00:00:49,000
Bob should no longer be able to enter it.

16
00:00:49,000 --> 00:00:52,000
We'd like to have all this happen without needing any coordination

17
00:00:52,000 --> 00:00:54,000
between the desk and the door.

18
00:00:54,000 --> 00:00:56,000
One way to do that would be to use a hash chain.

19
00:00:56,000 --> 00:01:00,000
What the door will do is when it reads a card--

20
00:01:00,000 --> 00:01:04,000
and I'll write this in sort of Python-ish code--

21
00:01:04,000 --> 00:01:07,000
the door will have some stored value x.

22
00:01:07,000 --> 00:01:14,000
What the door will do is check if the value of hashing that key is equal to x, the stored value.

23
00:01:14,000 --> 00:01:17,000
If it is, the door will unlock and everything is good.

24
00:01:17,000 --> 00:01:20,000
We open the door with the correct key.

25
00:01:20,000 --> 00:01:22,000
There's another situation that we need to test for,

26
00:01:22,000 --> 00:01:29,000
and that's if the hash of the hash of the key is equal to x.

27
00:01:29,000 --> 00:01:32,000
If the hash of the hash of the key--if we're thinking about a hash chain,

28
00:01:32,000 --> 00:01:34,000
that would be the next key in the hash chain.

29
00:01:34,000 --> 00:01:37,000
If that's the case, we also want to unlock the door,

30
00:01:37,000 --> 00:01:41,000
but we want to update the value that's stored as x.

31
00:01:41,000 --> 00:01:45,000
We'll update that value to be the hash of the current key, hash of k.

32
00:01:45,000 --> 00:01:47,000
So that's our read protocol.

33
00:01:47,000 --> 00:01:50,000
What this means is that if Bob is using the room first,

34
00:01:50,000 --> 00:01:56,000
his key is k1, and his key will have the value some number of hashes on some secret,

35
00:01:56,000 --> 00:02:00,000
and the value of x would be m + 1 of those hashes.

36
00:02:00,000 --> 00:02:05,000
And Bob keeps opening the door, going through this path through the code.

37
00:02:05,000 --> 00:02:07,000
There wouldn't really be a Python interpreter in the door.

38
00:02:07,000 --> 00:02:10,000
This could be done by something much simpler than having a full Python interpreter.

39
00:02:10,000 --> 00:02:13,000
Then when it comes time for Alice to open the door,

40
00:02:13,000 --> 00:02:19,000
Alice's key would have the value 1 fewer hash of s.

41
00:02:19,000 --> 00:02:24,000
That means that the value of the hash of the hash of Alice's key is equal to this value,

42
00:02:24,000 --> 00:02:28,000
hashing m + 1 times starting from s, and that means Alice would open the door.

43
00:02:28,000 --> 00:02:31,000
It would change the value of x, so now it no longer works for Bob.

44
00:02:31,000 --> 00:02:35,000
But the next person who enters, it will work, and then it will stop working for Alice.

45
00:02:35,000 --> 00:02:39,000
So what the check-in desk needs to do, it needs to keep track of some secret,

46
00:02:39,000 --> 00:02:43,000
and it needs to keep track of the number of the guest.

47
00:02:43,000 --> 00:02:46,000
The initial value stored as x needs to be set,

48
00:02:46,000 --> 00:02:50,000
but once those are done, there's no coordination needed.

49
00:02:50,000 --> 00:02:52,000
Every time a new guest arrives, they'll be given a key,

50
00:02:52,000 --> 00:02:56,000
which is the result of hashing n times starting from s,

51
00:02:56,000 --> 00:02:58,000
and the value of n would be decreased by 1.

52
00:02:58,000 --> 00:03:06,000
So this is our design for allowing secure doors with a sequence of users.

53
00:03:06,000 --> 00:03:10,000
So to see that you understand it and understand hash chains well, we have a quiz.

54
00:03:10,000 --> 00:03:13,000
What would cause problems with this design?

55
00:03:13,000 --> 00:03:16,000
If a criminal could extract the stored value from the lock;

56
00:03:16,000 --> 00:03:19,000
if a guest checks in to the hotel but never actually enters her room;

57
00:03:19,000 --> 99:59:59,999
or if a guest enters the room many times.
