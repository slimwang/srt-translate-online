1
00:00:00,310 --> 00:00:03,670
So let's look at the more general
redundancy-based approach which is

2
00:00:03,670 --> 00:00:05,440
the N-module redundancy.

3
00:00:05,440 --> 00:00:09,140
For N = 2, we have already
seen a brief example of that.

4
00:00:09,140 --> 00:00:14,230
We call this dual-module redundancy and
we have seen that it can

5
00:00:14,230 --> 00:00:19,230
guarantee detection, but
not also correction of one fault.

6
00:00:19,230 --> 00:00:22,040
Or one faulty module for that matter.

7
00:00:22,040 --> 00:00:23,520
Note that we can detect, sometimes,

8
00:00:23,520 --> 00:00:27,280
more than one fault, as long as these
faults are in the same module, or

9
00:00:27,280 --> 00:00:30,360
as long as they're affecting
different results of the modules.

10
00:00:30,360 --> 00:00:32,350
But all we can guarantee really,

11
00:00:32,350 --> 00:00:37,010
is that a single fault will be detected
and we cannot guarantee its correction

12
00:00:37,010 --> 00:00:39,008
because really this technique
doesn't correct anything.

13
00:00:39,008 --> 00:00:44,560
N = 3 gives us what's called
triple-module redundancy,

14
00:00:44,560 --> 00:00:48,330
and it allows us to
correct any one fault, or

15
00:00:48,330 --> 00:00:52,510
even all faults,
produced by a single faulty module.

16
00:00:52,510 --> 00:00:57,040
Again, sometimes we can tolerate
more than one faulty module

17
00:00:57,040 --> 00:01:01,050
if the two faults in the different
modules don't affect the same result.

18
00:01:01,050 --> 00:01:03,860
But all that we can really
guarantee as far as the number

19
00:01:03,860 --> 00:01:08,020
of faults we can correct is that all
faults that occur within the same module

20
00:01:08,020 --> 00:01:09,040
will be corrected, and

21
00:01:09,040 --> 00:01:13,110
that's because the other two modules are
functioning correctly and their correct

22
00:01:13,110 --> 00:01:17,630
outputs are going to output whatever
the faulty one is producing.

23
00:01:17,630 --> 00:01:20,431
We also have examples when N = 5, and

24
00:01:20,431 --> 00:01:24,240
that would be called
five-module redundancy.

25
00:01:24,240 --> 00:01:27,270
A good example for
that is the space shuttle.

26
00:01:27,270 --> 00:01:31,870
It has five computers that are doing
the same thing, and then they vote.

27
00:01:31,870 --> 00:01:34,510
If we get one wrong result in a vote,

28
00:01:34,510 --> 00:01:37,480
we just continue normal
operation of the space shuttle.

29
00:01:37,480 --> 00:01:42,570
If we get two wrong results in a vote,
the mission would be aborted, but

30
00:01:42,570 --> 00:01:45,480
there is still no failure
because the three

31
00:01:45,480 --> 00:01:49,940
correct wrong results are still
out voting the two bad ones.

32
00:01:49,940 --> 00:01:54,770
We are aborting our mission because
if another module fails, and

33
00:01:54,770 --> 00:01:59,680
now we have three wrong results in
our vote, we can no longer correct

34
00:01:59,680 --> 00:02:04,230
that and we can get the bye-bye
space shuttle scenario.

35
00:02:04,230 --> 00:02:07,955
So the idea Is if we got one vote wrong,
we know we can tolerate more than that

36
00:02:07,955 --> 00:02:11,545
without any problems, so
we would just continue normal operation.

37
00:02:11,545 --> 00:02:13,115
These missions are expensive, so

38
00:02:13,115 --> 00:02:18,505
really if there is a single failure we
want to be able to continue normally.

39
00:02:18,505 --> 00:02:23,690
Another one happening after the first
computer has had a problem, is a very

40
00:02:23,690 --> 00:02:28,450
rare occurrence, and we would abort the
mission because now we have some time

41
00:02:28,450 --> 00:02:33,570
to safely land the space shuttle while
we still have three functioning modules.

42
00:02:33,570 --> 00:02:37,385
If it ever gets to another
one failing after that,

43
00:02:37,385 --> 00:02:41,525
we can no longer promise that things
will be correct and at that point,

44
00:02:41,525 --> 00:02:46,095
we are risking the astronauts' lives and
possibly some people on Earth, too.

45
00:02:46,095 --> 00:02:48,765
So that's why the mission gets
aborted before this happens.
