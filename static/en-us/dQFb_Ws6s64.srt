1
00:00:00,340 --> 00:00:01,200
I'd like to take a moment and

2
00:00:01,200 --> 00:00:03,600
show you the process of
creating an object diagram.

3
00:00:03,600 --> 00:00:08,280
You might also hear this process
referred to as object decomposition.

4
00:00:08,280 --> 00:00:11,230
That is, we're taking something
that's a big object, like an app,

5
00:00:11,230 --> 00:00:13,750
and we're breaking it down into
its individual components.

6
00:00:13,750 --> 00:00:16,660
Now there's no right or
wrong way to do this.

7
00:00:16,660 --> 00:00:19,120
If 100 people create
an object diagram for an app,

8
00:00:19,120 --> 00:00:22,570
there might be 100 completely
different diagrams.

9
00:00:22,570 --> 00:00:26,260
Also, there are some informal and
formal ways to create them.

10
00:00:26,260 --> 00:00:29,250
A formal way might be creating
an object diagram using

11
00:00:29,250 --> 00:00:30,780
the Universal Modeling Language,

12
00:00:30,780 --> 00:00:35,940
or UML, and an example object
diagram's given here on the left.

13
00:00:35,940 --> 00:00:39,660
Now UML as a modeling language contains
a bunch of standard symbols and

14
00:00:39,660 --> 00:00:43,460
icons that are helpful for
laying out the components of a project.

15
00:00:43,460 --> 00:00:47,244
But for many, UML can be
really bulky to work with, and

16
00:00:47,244 --> 00:00:48,800
I fall into that category.

17
00:00:48,800 --> 00:00:52,070
I'm more of a fan of an informal
approach that takes some ideas from UML,

18
00:00:52,070 --> 00:00:56,350
but it doesn't get bogged down
in the nitty gritty details.

19
00:00:56,350 --> 00:01:00,930
And an example of a more informal object
diagram is given here on the right.

20
00:01:00,930 --> 00:01:03,650
So for this example I'm going to take
an app that you'll see later called

21
00:01:03,650 --> 00:01:05,410
Alien Adventure.

22
00:01:05,410 --> 00:01:06,750
This is the main screen for the app, and

23
00:01:06,750 --> 00:01:09,970
I can interact with it by
tapping on the screen.

24
00:01:09,970 --> 00:01:13,410
And we can see that this robot will
animate across the screen, and

25
00:01:13,410 --> 00:01:16,510
there's an alien,
there's actually multiple aliens.

26
00:01:16,510 --> 00:01:18,630
And the robot and
the alien will have a discussion,

27
00:01:18,630 --> 00:01:20,900
and they'll go back and forth.

28
00:01:20,900 --> 00:01:24,580
And if the robot answers the alien's
question correctly, then these little

29
00:01:24,580 --> 00:01:28,340
badges will appear in the lower
left hand corner of the screen.

30
00:01:28,340 --> 00:01:29,800
I'm going to stop right here.

31
00:01:29,800 --> 00:01:33,280
At this point we've already seen
enough of this app to actually start

32
00:01:33,280 --> 00:01:35,270
the object decomposition process.

33
00:01:35,270 --> 00:01:38,835
So I'm going to open a Google
drawing to build the diagram.

34
00:01:38,835 --> 00:01:42,100
But you could use a piece of paper,
a napkin,

35
00:01:42,100 --> 00:01:46,780
a tool like draw IO, which I have that
opened up in this other tab here.

36
00:01:46,780 --> 00:01:49,860
This is a Draw.IO diagram,
or really just

37
00:01:49,860 --> 00:01:54,200
any tool that gives you the ability
to put your ideas into a diagram.

38
00:01:54,200 --> 00:01:58,700
Personally I'm a big fan of napkins and
I can say from personal experience that

39
00:01:58,700 --> 00:02:01,223
a lot of great ideas I've
diagrammed on napkins, and

40
00:02:01,223 --> 00:02:03,780
I'm willing to say that there's
probably some other amazing apps out

41
00:02:03,780 --> 00:02:08,400
there that have been diagrammed on
napkins but that's a different story.

42
00:02:08,400 --> 00:02:11,060
The first thing we'll start with
is the first big object which is

43
00:02:11,060 --> 00:02:12,250
the app itself.

44
00:02:12,250 --> 00:02:15,466
Now the app isn't an actual
object in code, but

45
00:02:15,466 --> 00:02:18,278
that's okay, we're going to
use it as are starting point.

46
00:02:18,278 --> 00:02:22,080
And if we think about what we saw when
we were playing around with the app,

47
00:02:22,080 --> 00:02:24,960
we can start adding those
objects to the diagram.

48
00:02:24,960 --> 00:02:27,910
So we know that there's a robot and
that there were aliens, so

49
00:02:27,910 --> 00:02:31,070
I'm going to go ahead and
make some rectangles to represent those.

50
00:02:31,070 --> 00:02:35,060
And we'll add labels for
the robot object and the alien object.

51
00:02:35,060 --> 00:02:38,820
You'll notice that I'm using the
singular form of alien and not aliens,

52
00:02:38,820 --> 00:02:41,680
even though there were
multiple aliens in the app

53
00:02:41,680 --> 00:02:43,830
if we were to continue playing it.

54
00:02:43,830 --> 00:02:47,490
And this is a personal preference,
and it's one of those aspects of UML

55
00:02:47,490 --> 00:02:50,300
that I'm blending with
this informal approach.

56
00:02:50,300 --> 00:02:54,090
In UML you typically refer to
objects in their singular form.

57
00:02:54,090 --> 00:02:56,400
Also, if I was using
a more formal process,

58
00:02:56,400 --> 00:02:59,900
I might use a certain type of symbol for
an object maybe a rectangle.

59
00:02:59,900 --> 00:03:04,720
And then a certain type of symbol for
a struct like a rounded rectangle.

60
00:03:04,720 --> 00:03:07,110
But again, because we're
keeping it pretty informal,

61
00:03:07,110 --> 00:03:09,090
I'm just going to use rectangles for
everything.

62
00:03:10,120 --> 00:03:11,810
Now what else did we notice in the app.?

63
00:03:11,810 --> 00:03:15,770
What else seemed to stand out in our
mind as a self contained entity?

64
00:03:15,770 --> 00:03:19,140
What else could be considered
part of the application?

65
00:03:19,140 --> 00:03:21,870
Some of the things that I can
think of are the background.

66
00:03:21,870 --> 00:03:25,170
We also had badges that appeared
in the lower left hand corner.

67
00:03:25,170 --> 00:03:27,620
And there was a dialog
bubble at the top, and

68
00:03:27,620 --> 00:03:30,360
it consisted of multiple lines of text.

69
00:03:30,360 --> 00:03:32,620
This is a pretty good set
of objects to start with.

70
00:03:32,620 --> 00:03:36,140
These were all things that we
could clearly see with our eyes.

71
00:03:36,140 --> 00:03:38,890
But there could also be objects
that are behind the scenes.

72
00:03:38,890 --> 00:03:43,640
Things that we can't see, but still make
up some part of the application itself.

73
00:03:43,640 --> 00:03:46,860
For example,
what about the concept of a game world?

74
00:03:46,860 --> 00:03:48,630
Maybe the aliens and the robot and

75
00:03:48,630 --> 00:03:52,630
everything within it can be
thought as parts of a game world.

76
00:03:52,630 --> 00:03:55,845
So I am going to go ahead and add a
symbol for world to our object diagram.

77
00:03:55,845 --> 00:04:00,450
And adding world here is just another
example of what I want to stress to you,

78
00:04:00,450 --> 00:04:03,240
this process is not exact science.

79
00:04:03,240 --> 00:04:06,920
It's a very creative,
abstract thinking type of process.

80
00:04:06,920 --> 00:04:09,730
No two people will probably
create the same object diagram.

81
00:04:09,730 --> 00:04:11,215
Now I'm going to go ahead and

82
00:04:11,215 --> 00:04:14,585
stop here, in just a moment we're
going to refine this diagram.

83
00:04:14,585 --> 00:04:17,075
We're going to think about how
the objects are interconnected,

84
00:04:17,075 --> 00:04:20,295
and we're also going to look to see
if the objects have similarities,

85
00:04:20,295 --> 00:04:22,955
because that's a big
deal when designing apps.

86
00:04:22,955 --> 00:04:27,205
If some of the objects share traits and
other similar functionality,

87
00:04:27,205 --> 00:04:29,785
then we can take advantage of that
later when we start writing code.
