1
00:00:00,000 --> 00:00:04,000
Hi, and welcome to the sixth office hours. >>Welcome.

2
00:00:04,000 --> 00:00:08,000
It's going to be our last office hours, and it's been a ton of fun TAing this class.

3
00:00:08,000 --> 00:00:11,000
I'd first like to thank the students and Professor Norvig--you, too.

4
00:00:11,000 --> 00:00:13,000
This has been a great experience. >>Great.

5
00:00:13,000 --> 00:00:15,000
What have we got for questions this week?

6
00:00:15,000 --> 00:00:17,000
First question comes from Horace, and he says,

7
00:00:17,000 --> 00:00:23,000
What steps should I take after finishing this class to keep improving at a programmer?

8
00:00:23,000 --> 00:00:26,000
That's a great question. There's so much to do.

9
00:00:26,000 --> 00:00:29,000
Of course there are other classes available.

10
00:00:29,000 --> 00:00:32,000
So you can search online. You can see what classes are coming up next.

11
00:00:32,000 --> 00:00:36,000
Figure out what you're interested in and just have at it.

12
00:00:36,000 --> 00:00:40,000
Then the other thing is to do more programming on your own.

13
00:00:40,000 --> 00:00:45,000
Pick out a project and try to achieve it, try to complete something.

14
00:00:45,000 --> 00:00:49,000
That can either be find some opensource project where you can contribute

15
00:00:49,000 --> 00:00:52,000
or just something of your own, something that you always wanted to do.

16
00:00:52,000 --> 00:00:54,000
Just get started and try to build it.

17
00:00:54,000 --> 00:00:58,000
For small problems, project Euler has a lot of really great problems.

18
00:00:58,000 --> 00:01:00,000
You can check that out online.

19
00:01:00,000 --> 00:01:03,000
Next one comes from Lee.

20
00:01:03,000 --> 00:01:06,000
After teaching this class, you've been very active in the forums,

21
00:01:06,000 --> 00:01:09,000
and you've seen a lot of the common mistakes student's have made.

22
00:01:09,000 --> 00:01:12,000
What can you say about some of the common mistakes that have been made

23
00:01:12,000 --> 00:01:17,000
throughout this class and any general suggestions on being a good programmer.

24
00:01:17,000 --> 00:01:24,000
Huh. I didn't see that many things that were common across everywhere.

25
00:01:24,000 --> 00:01:34,000
I guess some around the structure of mutable variables seems to come up again and again.

26
00:01:34,000 --> 00:01:38,000
I made this array and then I altered the element of the array

27
00:01:38,000 --> 00:01:40,000
but all the elements got altered. Why did that happen?

28
00:01:40,000 --> 00:01:46,000
Well, it's because each row of your matrix was actually the same row.

29
00:01:46,000 --> 00:01:48,000
That seemed to be a problem.

30
00:01:48,000 --> 00:01:52,000
There was one today of the default arguments to functions.

31
00:01:52,000 --> 00:01:54,000
They're set up, and that's a single argument.

32
00:01:54,000 --> 00:01:58,000
If you modify it then you have a problem with that. That was one thing.

33
00:01:58,000 --> 00:02:04,000
I guess another one is just reading the documentation and getting familiar with things.

34
00:02:04,000 --> 00:02:08,000
I don't see that so much as an error on the part of the students.

35
00:02:08,000 --> 00:02:11,000
I just see it as not having enough familiarity,

36
00:02:11,000 --> 00:02:17,000
and it just takes time to get familiar with things.

37
00:02:17,000 --> 00:02:20,000
I guess another is just read carefully.

38
00:02:20,000 --> 00:02:27,000
I see people ask a question and then see the answer and say,

39
00:02:27,000 --> 00:02:32,000
"Ah! I realize the mistakes I made or the misconception I had."

40
00:02:32,000 --> 00:02:35,000
Sometimes that's just part of the learning process,

41
00:02:35,000 --> 00:02:39,000
but maybe you could use that as a lesson to yourself of saying,

42
00:02:39,000 --> 00:02:47,000
I'm stuck. I could be because there is some preconception that I have that is blocking me.

43
00:02:47,000 --> 00:02:54,000
Think of what preconceptions am I holding and should I relax one of those.

44
00:02:54,000 --> 00:02:57,000
Next question comes from Ginger, and she wants to know

45
00:02:57,000 --> 00:03:02,000
what areas of software you are particularly excited about.

46
00:03:02,000 --> 00:03:06,000
I think it's an exciting time now when there's so much going on

47
00:03:06,000 --> 00:03:10,000
and so many opportunities, new companies springing up,

48
00:03:10,000 --> 00:03:12,000
new ideas in software.

49
00:03:12,000 --> 00:03:18,000
I guess to me one of the things that's really interesting is connecting with the world

50
00:03:18,000 --> 00:03:21,000
in a deeper way.

51
00:03:21,000 --> 00:03:27,000
We're used to the idea of data like text and numbers can be processed by computers,

52
00:03:27,000 --> 00:03:33,000
but now we're starting to see images and video and sound,

53
00:03:33,000 --> 00:03:37,000
and people are walking around with phones that have input devices

54
00:03:37,000 --> 00:03:40,000
for all of these constantly with them.

55
00:03:40,000 --> 00:03:43,000
This connection to the real world is so much stronger,

56
00:03:43,000 --> 00:03:47,000
and that just opens up so many new areas.

57
00:03:47,000 --> 00:03:51,000
Next question comes from Egoots, and Egoots wants to know

58
00:03:51,000 --> 00:03:54,000
if you have any tips for reading other people's code

59
00:03:54,000 --> 00:03:57,000
and writing your own code so it's more readable by others.

60
00:03:57,000 --> 00:04:05,000
Okay. In terms of reading other people's code, a lot of it is practice.

61
00:04:05,000 --> 00:04:08,000
Just go out there and start doing it.

62
00:04:08,000 --> 00:04:11,000
I always like to play with code when I'm reading it.

63
00:04:11,000 --> 00:04:17,000
I find it hard and frustrating to read code without an interpreter or compiler available

64
00:04:17,000 --> 00:04:21,000
so that I can actually run it and try it and see what it does.

65
00:04:21,000 --> 00:04:25,000
Theoretically, you should be able to write code so you don't have to do that,

66
00:04:25,000 --> 00:04:27,000
but it's just so much easier if you can,

67
00:04:27,000 --> 00:04:34,000
to say I'm really want an example here of what does this function do?

68
00:04:34,000 --> 00:04:37,000
The person who wrote the code didn't document it, didn't give me an example.

69
00:04:37,000 --> 00:04:41,000
Okay, I can run it myself and see what it produces.

70
00:04:41,000 --> 00:04:46,000
I think of reading as more of an interactive process rather than a passive one--

71
00:04:46,000 --> 00:04:50,000
the way you read a novel and don't be afraid to do that.

72
00:04:50,000 --> 00:04:54,000
I think another aspect is how are you reading it?

73
00:04:54,000 --> 00:04:59,000
When you read a novel, you pretty much start at the front and you go to the end,

74
00:04:59,000 --> 00:05:02,000
but when you read code you don't do it like that.

75
00:05:02,000 --> 00:05:04,000
have to figure out what you're reading for.

76
00:05:04,000 --> 00:05:07,000
Are you trying to understand the whole code?

77
00:05:07,000 --> 00:05:11,000
In which case you're still jumping around and you're figuring out,

78
00:05:11,000 --> 00:05:14,000
well, what's the big idea? What are the key components?

79
00:05:14,000 --> 00:05:17,000
Let's flip back and forth. Let's follow this cross reference.

80
00:05:17,000 --> 00:05:20,000
It's another reason why I don't like reading statically.

81
00:05:20,000 --> 00:05:27,000
I want to be able to jump to the definition of a symbol and my IDE does that for me.

82
00:05:27,000 --> 00:05:33,000
You're jumping around, and then another way of reading is to say

83
00:05:33,000 --> 00:05:37,000
here's a big complicated package, but I just want it to do this one thing.

84
00:05:37,000 --> 00:05:42,000
So I'm going to restrict myself from trying to understand everything.

85
00:05:42,000 --> 00:05:46,000
I just want to understand one path through so I can get at this function call

86
00:05:46,000 --> 00:05:50,000
or this functionality and have it do what I want it to do.

87
00:05:50,000 --> 00:05:53,000
I find that hard for me.

88
00:05:53,000 --> 00:05:58,000
I guess one of the things I see is sort of maybe a generation gap in that the younger

89
00:05:58,000 --> 00:06:01,000
engineers I work with are so much better at that than I am.

90
00:06:01,000 --> 00:06:06,000
They can look at a piece of code and say, I just want to get this one functionality.

91
00:06:06,000 --> 00:06:09,000
They figure it out, they use it, and they're on to the next thing

92
00:06:09,000 --> 00:06:11,000
whereas I usually lag behind.

93
00:06:11,000 --> 00:06:14,000
I say, okay, I think I got this functionality but, gee, this is interesting.

94
00:06:14,000 --> 00:06:20,000
Let me look around a little bit more and see if I can understand the structure more deeply.

95
00:06:20,000 --> 00:06:25,000
I'm learning more from that, but I'm diverting myself from what my task really was--

96
00:06:25,000 --> 00:06:29,000
to just find out as much as I needed to know and not more.

97
00:06:29,000 --> 00:06:36,000
That's something I know I need to train myself on of doing a better job of reading selectively.

98
00:06:36,000 --> 00:06:39,000
All right. The last two questions both come from Jeff.

99
00:06:39,000 --> 00:06:43,000
His first question: Where do you get your wonderful shirts?

100
00:06:43,000 --> 00:06:51,000
[laughs] Okay, Jeff. Well, one answer is not available to you in that my wife makes some of them.

101
00:06:51,000 --> 00:06:54,000
She's not going into the business of mass producing them,

102
00:06:54,000 --> 00:06:56,000
so you won't be able to get one.

103
00:06:56,000 --> 00:07:01,000
This one I think is made by a company made by Jam's World,

104
00:07:01,000 --> 00:07:05,000
but I get wherever I can.

105
00:07:05,000 --> 00:07:11,000
The last one--a little more content-driven--is why do you structure

106
00:07:11,000 --> 00:07:14,000
so much of this course around games? What made you decide that?

107
00:07:14,000 --> 00:07:21,000
Yeah, I guess the reason I choose games is I wanted you to get experience

108
00:07:21,000 --> 00:07:27,000
of understanding a set of rules and following them.

109
00:07:27,000 --> 00:07:29,000
Games are sort of an abstraction of that.

110
00:07:29,000 --> 00:07:32,000
We wanted to have a seven-week class. It's not that long.

111
00:07:32,000 --> 00:07:36,000
We wanted to be able to go through a lot of examples

112
00:07:36,000 --> 00:07:41,000
and more real-world problems are just so complicated and messy.

113
00:07:41,000 --> 00:07:44,000
I think that's one reason games exist in the first place, right?

114
00:07:44,000 --> 00:07:48,000
They say the game of chess is supposed to be an abstraction of war.

115
00:07:48,000 --> 00:07:52,000
It's much easier to set up a chess board than it is to muster up a couple of armies

116
00:07:52,000 --> 00:07:56,000
and go through the messy business of destroying each other.

117
00:07:56,000 --> 00:08:00,000
Games are an abstraction, but they're still complicated.

118
00:08:00,000 --> 00:08:03,000
They have interactions. They have rules that you have to get right.

119
00:08:03,000 --> 00:08:07,000
So they seemed just at the right level for a short class like this

120
00:08:07,000 --> 00:08:11,000
as opposed to a more real world problem where we have to spend

121
00:08:11,000 --> 00:08:14,000
the whole seven weeks just to understand one of them.

122
00:08:14,000 --> 00:08:17,000
Great, that's all the questions we had.

123
00:08:17,000 --> 00:08:21,000
How about this one on recursion?

124
00:08:21,000 --> 00:08:23,000
Oh, sorry. I missed that one. Good.

125
00:08:23,000 --> 00:08:28,000
There was a question on recursion. This was from Egoots as well.

126
00:08:28,000 --> 00:08:34,000
Basically he's having a hard time implementing recursion in his daily coding routine.

127
00:08:34,000 --> 00:08:37,000
He finds that it's easier to just use loops,

128
00:08:37,000 --> 00:08:42,000
and do you use recursion in your everyday coding?

129
00:08:42,000 --> 00:08:45,000
I guess there is a couple answers to that.

130
00:08:45,000 --> 00:08:49,000
One is I think you should use it when it's appropriate and not when it's not.

131
00:08:49,000 --> 00:08:55,000
Now, there are some approaches and there are even some simple languages

132
00:08:55,000 --> 00:09:02,000
where recursion is your only way of implementing loops.

133
00:09:02,000 --> 00:09:07,000
I don't prefer that approach. I think you want to do what's most natural.

134
00:09:07,000 --> 00:09:09,000
When is recursion natural?

135
00:09:09,000 --> 00:09:11,000
I think there's a couple cases.

136
00:09:11,000 --> 00:09:13,000
One is when you have a recursive data structure.

137
00:09:13,000 --> 00:09:20,000
If you have a tree, a tree is defined as it's either a node or it's a node that has two trees

138
00:09:20,000 --> 00:09:24,000
or n trees as subparts.

139
00:09:24,000 --> 00:09:26,000
So there is recursion built right into the definition,

140
00:09:26,000 --> 00:09:31,000
and it just makes sense to implement the whole thing recursively.

141
00:09:31,000 --> 00:09:35,000
So most of the time when you have structure like a tree that's like that,

142
00:09:35,000 --> 00:09:37,000
it's simpler to do a recursive routine.

143
00:09:37,000 --> 00:09:42,000
Sometimes you don't, so we showed some search techniques where

144
00:09:42,000 --> 00:09:49,000
instead of just searching recursively we built up a queue like the frontier queue

145
00:09:49,000 --> 00:09:53,000
to essentially hold the equivalent of what would be on the recursive stack.

146
00:09:53,000 --> 00:09:55,000
Why do we do that?

147
00:09:55,000 --> 00:09:58,000
Because we wanted more control over the order of the recursion.

148
00:09:58,000 --> 00:10:02,000
We didn't want to just do left branch first or right branch first.

149
00:10:02,000 --> 00:10:05,000
We want to be able to pick where we went next.

150
00:10:05,000 --> 00:10:08,000
To make control we made the program more complicated.

151
00:10:08,000 --> 00:10:11,000
Anytime you take a naturally recursive data structure

152
00:10:11,000 --> 00:10:15,000
and process it nonrecursively it becomes more complicated.

153
00:10:15,000 --> 00:10:17,000
I think the opposite is also true.

154
00:10:17,000 --> 00:10:24,000
If you take a non-recursive thing like iterating over the elements of a list in a for loop--

155
00:10:24,000 --> 00:10:27,000
you know, for x in list--that's much simpler as a for loop

156
00:10:27,000 --> 00:10:31,000
but becomes more complicated if you write it recursively.

157
00:10:31,000 --> 00:10:34,000
There I would prefer having for loops.

158
00:10:34,000 --> 00:10:38,000
There's another case that's sort of intermediate where you have a mathematical formula.

159
00:10:38,000 --> 00:10:42,000
More often mathematical formulas are written recursively.

160
00:10:42,000 --> 00:10:44,000
Then you have to decide.

161
00:10:44,000 --> 00:10:49,000
Is it best to implement that with recursion or with a loop.

162
00:10:49,000 --> 00:10:51,000
That's how I see it.

163
00:10:51,000 --> 00:10:55,000
The other question was are there limitations in terms of the implementation,

164
00:10:55,000 --> 00:10:57,000
and yes, that's true.

165
00:10:57,000 --> 00:11:00,000
In many languages there's a recursion limit.

166
00:11:00,000 --> 00:11:06,000
In some languages specific types of calls in a location in the function

167
00:11:06,000 --> 00:11:13,000
where it's the last thing that the function does doesn't get counted against the call limit.

168
00:11:13,000 --> 00:11:15,000
In Python they do get counted, so you have a limit.

169
00:11:15,000 --> 00:11:21,000
By default in the Python implementation it's a thousand levels deep.

170
00:11:21,000 --> 00:11:25,000
And so you have to think about that.

171
00:11:25,000 --> 00:11:28,000
Even if it is more natural to do recursion.

172
00:11:28,000 --> 00:11:32,000
If you say, well, I'm going to be doing it over structures that are more than 1000 elements deep,

173
00:11:32,000 --> 00:11:35,000
then you have to accommodate.

174
00:11:35,000 --> 00:11:41,000
I guess that's another reason to say why recursing down a list is probably a bad idea,

175
00:11:41,000 --> 00:11:47,000
because in many applications you do have lists that are more than 1000 elements deep,

176
00:11:47,000 --> 00:11:51,000
but recursing over a tree is probably okay,

177
00:11:51,000 --> 00:11:55,000
because if you have, say, a balanced binary tree you would only hit the limit

178
00:11:55,000 --> 00:12:02,000
if it has 2^1000 elements, and you'd run out of memory before you hit that problem.

179
00:12:02,000 --> 00:12:06,000
All right. Well, I think that's all the questions.

180
00:12:06,000 --> 00:12:08,000
Again, it's been a lot of fun. Any last words for the students?

181
00:12:08,000 --> 00:12:14,000
Thank you so much and good luck on the rest of week six

182
00:12:14,000 --> 00:12:20,000
and on the exam. I think you'll find it interesting and challenging

183
00:12:20,000 --> 00:12:24,000
and a good conclusion to the class. Thank you all.
