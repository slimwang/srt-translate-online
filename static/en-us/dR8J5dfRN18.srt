1
00:00:00,140 --> 00:00:03,480
I've already introduced you to shared memory synchronization.

2
00:00:03,480 --> 00:00:07,140
Lock is a primitive and particularly the mutual exclusion

3
00:00:07,140 --> 00:00:10,650
lock is a primitive that is used ubiquitously

4
00:00:10,650 --> 00:00:14,010
in writing shared memory parallel programs to protect data

5
00:00:14,010 --> 00:00:17,070
structure so that one thread can exclusively modify

6
00:00:17,070 --> 00:00:19,430
the data and release the lock so that another

7
00:00:19,430 --> 00:00:21,380
thread can inspect the data later on and

8
00:00:21,380 --> 00:00:25,610
so on. And similarly, barrier synchronization is another synchronization

9
00:00:25,610 --> 00:00:28,590
primitive that is very popular in scientific programs and

10
00:00:28,590 --> 00:00:31,720
we have covered both of these in fairly great detail

11
00:00:31,720 --> 00:00:33,940
in talking about what the operating system has to

12
00:00:33,940 --> 00:00:38,860
do in order to have efficient implementation of locks as

13
00:00:38,860 --> 00:00:41,550
well as barriers. Now the up shot is, if

14
00:00:41,550 --> 00:00:44,000
you are writing a shared memory program, there are two

15
00:00:44,000 --> 00:00:47,280
types of memory accesses that are going to happen.

16
00:00:47,280 --> 00:00:51,000
One type of memory access is the normal reads and

17
00:00:51,000 --> 00:00:54,490
writes to shared data that is being manipulated

18
00:00:54,490 --> 00:00:57,710
by a particular thread. The second kind of

19
00:00:57,710 --> 00:01:00,780
memory access is going to be for synchronization

20
00:01:00,780 --> 00:01:04,489
variables that are used in implementing locks and barriers

21
00:01:04,489 --> 00:01:06,810
by the operating system itself. It may be

22
00:01:06,810 --> 00:01:08,750
the operating system, or it could be a user

23
00:01:08,750 --> 00:01:12,100
level threads library that is providing these mutual

24
00:01:12,100 --> 00:01:16,175
exclusion locks, or barrier primitives, but in implementing those

25
00:01:16,175 --> 00:01:21,980
synchronization primitives, those algorithms are going to use reads and writes

26
00:01:21,980 --> 00:01:25,900
to shared memory. So there are two types of shared memory accesses

27
00:01:25,900 --> 00:01:32,010
going on in the execution of a parallel program. One is access

28
00:01:32,010 --> 00:01:37,650
to normal shared data and the other is access to synchronization variables.
