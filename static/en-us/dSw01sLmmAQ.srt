1
00:00:00,073 --> 00:00:02,212
So what kind of processors are we going to build?

2
00:00:02,212 --> 00:00:04,944
Let's assume that the major design constraint is power.

3
00:00:04,944 --> 00:00:09,848
Why are traditional CPU-like processors not the most energy efficient processors?

4
00:00:09,848 --> 00:00:13,129
Well, traditional CPUs have very complicated control hardware.

5
00:00:13,129 --> 00:00:17,089
This allows flexibility in performance, but as control hardware gets more complicated,

6
00:00:17,089 --> 00:00:20,713
it's increasingly expensive in terms of power and design complexity.

7
00:00:20,713 --> 00:00:24,762
So if we want the most bang for the buck in terms of computation for a fixed amount of power,

8
00:00:24,762 --> 00:00:27,565
we might instead choose to build simpler control structures

9
00:00:27,565 --> 00:00:32,637
and instead take those transistors and devote them to supporting more computation in the data path.

10
00:00:32,637 --> 00:00:36,711
If we want the most bang for the buck in terms of computation for a fixed amount of power,

11
00:00:36,711 --> 00:00:38,880
we might choose to build simpler control structures

12
00:00:38,880 --> 00:00:42,848
and instead devote those transistors to supporting more computation to the data path.

13
00:00:42,848 --> 00:00:45,554
The way that we're going to build that data path in the GPU

14
00:00:45,554 --> 00:00:48,853
is by building a large number of parallel compute units.

15
00:00:48,853 --> 00:00:52,720
Individually, those compute units are small, simple, and power efficient.

16
00:00:52,720 --> 00:00:53,723
These are the chickens.

17
00:00:53,723 --> 00:00:56,711
But we can put a very large number of them on a single chip,

18
00:00:56,726 --> 00:01:00,373
and the challenge to us in this class, and more generally in the computing industry,

19
00:01:00,373 --> 00:01:04,638
is to program them in such a way that they can all work together to solve complex problems.
