1
00:00:00,200 --> 00:00:01,700
All right,
welcome back to Computer Vision.

2
00:00:01,700 --> 00:00:04,350
And when I say back,
I took a whole week off, so basically,

3
00:00:04,350 --> 00:00:05,870
I have no idea where we are.

4
00:00:05,870 --> 00:00:09,800
So hopefully you'll be more got
your act together better than I do.

5
00:00:09,800 --> 00:00:12,930
I think last time we were
talking something about

6
00:00:12,930 --> 00:00:17,530
the Lucas-Kanade method of solving for
optical flow or for motion.

7
00:00:17,530 --> 00:00:20,290
And if you remember,
we had this problem with optical flow

8
00:00:20,290 --> 00:00:22,150
that we refer to as
the aperture problem.

9
00:00:22,150 --> 00:00:25,890
The aperture problem was if you
look at a little local area and

10
00:00:25,890 --> 00:00:28,400
you can only tell the motion that is in

11
00:00:28,400 --> 00:00:31,120
the direction of the gradient
perpendicular to the edge.

12
00:00:31,120 --> 00:00:35,560
So, basically to solve that, we had
to compose some form of constraints.

13
00:00:35,560 --> 00:00:36,820
First we did the global constraints.

14
00:00:36,820 --> 00:00:39,490
Then we did the local
constraints of Lucas and Kanade.

15
00:00:39,490 --> 00:00:41,740
And the idea was by having
these local constraints,

16
00:00:41,740 --> 00:00:44,490
we could have more than
one equation per pixel.

17
00:00:44,490 --> 00:00:48,840
And the basic idea was to pretend
that all the pixels were moving

18
00:00:48,840 --> 00:00:52,110
in the same direction in a little,
local neighborhood, so

19
00:00:52,110 --> 00:00:54,180
we would sum up over that window.

20
00:00:54,180 --> 00:00:55,420
We said a five by five window.

21
00:00:55,420 --> 00:00:58,420
You'd have 25 equations per pixel.

22
00:00:58,420 --> 00:01:03,197
And that basically gave us this least
square solution, and we related that to

23
00:01:03,197 --> 00:01:08,208
the whole Harris Corners, where we said
that if the matrix, here A transpose A.

24
00:01:08,208 --> 00:01:10,084
If that matrix was well-conditioned,

25
00:01:10,084 --> 00:01:13,504
which meant we had two decent sized
eigenvalues it meant that the gradient

26
00:01:13,504 --> 00:01:16,210
occurred in various
directions over that window.

27
00:01:16,210 --> 00:01:20,170
And we mentioned how this method
of recovering how something moved

28
00:01:20,170 --> 00:01:23,562
was first proposed by Lukas and
Kanade in 1981.

29
00:01:23,562 --> 00:01:28,280
But, critical to the whole
derivation was the idea that

30
00:01:28,280 --> 00:01:30,630
we use this Taylor series expansion.

31
00:01:30,630 --> 00:01:33,758
That is, that we could approximate
how something would move or

32
00:01:33,758 --> 00:01:37,476
how much the intensity would change
by essentially fitting a planar ramp,

33
00:01:37,476 --> 00:01:40,500
that was the first-order
derivative approximation.

34
00:01:40,500 --> 00:01:43,804
Fitting a planar ramp to a point,
and then as the point would move,

35
00:01:43,804 --> 00:01:47,220
the intensity would change according
to the slope on that ramp.

36
00:01:47,220 --> 00:01:50,380
But, of course, there were certain
assumptions built into Lucas-Kanade that

37
00:01:50,380 --> 00:01:51,880
were sometimes problematic.

38
00:01:51,880 --> 00:01:55,120
So the main assumption was
that the pixel hasn't moved,

39
00:01:55,120 --> 00:01:57,490
didn't change it's color,
didn't change it's intensity.

40
00:01:57,490 --> 00:01:59,790
So if brightness constancy doesn't hold,

41
00:01:59,790 --> 00:02:02,270
then you have to do something
in terms of feature detection.

42
00:02:02,270 --> 00:02:04,490
Finding a feature from
one place to another, and

43
00:02:04,490 --> 00:02:08,400
we've already talk about doing SIFT
detections and characterization,

44
00:02:08,400 --> 00:02:10,913
in order to do these, these matches.

45
00:02:10,913 --> 00:02:12,042
And we can combine those.

46
00:02:12,042 --> 00:02:15,114
In fact, we're not going to but
I'll talk at the very end

47
00:02:15,114 --> 00:02:18,708
about how you can combine dense
estimation with SIFT estimation.

48
00:02:18,708 --> 00:02:23,427
The other thing we said is that possibly
a bunch of points are moving one way and

49
00:02:23,427 --> 00:02:25,910
another points are moving another way.

50
00:02:25,910 --> 00:02:30,360
So, in that area, it,
within a window you don't actually have

51
00:02:30,360 --> 00:02:32,350
all the points moving
in the same direction.

52
00:02:32,350 --> 00:02:34,490
And you have to solve that
with a motion segmentation.

53
00:02:34,490 --> 00:02:37,840
We mentioned that, we'll actually go
over, sort of, a mechanism of doing

54
00:02:37,840 --> 00:02:41,580
that, not at the end of this lecture,
but at the end of the, the next one.

55
00:02:41,580 --> 00:02:43,600
Oh, these aren't lectures,
these are videos, so

56
00:02:43,600 --> 00:02:45,240
that makes them sound
like they're more fun
