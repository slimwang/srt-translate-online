1
00:00:00,000 --> 00:00:03,000
One of the things we'd like to do is have a way of comparing algorithms

2
00:00:03,000 --> 00:00:06,000
in terms of the time it takes to run them without actually having to go and do

3
00:00:06,000 --> 00:00:08,000
all the hard work of running them.

4
00:00:08,000 --> 00:00:11,000
Instead what we're going to try to do is analyze what the running time is

5
00:00:11,000 --> 00:00:14,000
in more of an abstract model of computation.

6
00:00:14,000 --> 00:00:16,000
To do that is very difficult.

7
00:00:16,000 --> 00:00:18,000
To get the exact timing information without actually running it

8
00:00:18,000 --> 00:00:20,000
is something that we probably can't do.

9
00:00:20,000 --> 00:00:22,000
But we can make a series of simplifying assumptions.

10
00:00:22,000 --> 00:00:27,000
These simplifying assumptions will allow us to do an analysis that is more tractable.

11
00:00:27,000 --> 00:00:29,000
Here are some of the assumptions that we're going to make.

12
00:00:29,000 --> 00:00:33,000
We count a simple statement--something like x = x + 1

13
00:00:33,000 --> 00:00:35,000
as something that takes 1 unit of time.

14
00:00:35,000 --> 00:00:38,000
We're going to count of the units of time that an algorithm takes to run.

15
00:00:38,000 --> 00:00:42,000
The second simplifying assumption we'll make is that the time it takes to execute

16
00:00:42,000 --> 00:00:46,000
a pair of statements or three statements or ten statements in sequence

17
00:00:46,000 --> 00:00:50,000
is the sum of the times that it takes to execute each of the individual statements.

18
00:00:50,000 --> 00:00:54,000
This ignores a lot of issues that go on in the architecture of the computer--

19
00:00:54,000 --> 00:00:59,000
things like pipe-lining and caching--that make this actually not true in practice.

20
00:00:59,000 --> 00:01:03,000
But we're going to hope that it's a good enough approximation of reality.

21
00:01:03,000 --> 00:01:06,000
Measuring the time that it takes to run something like an if statement,

22
00:01:06,000 --> 00:01:11,000
we're going to imagine that there's the time that it takes to execute the condition evaluation

23
00:01:11,000 --> 00:01:13,000
and then the time that it takes to actually execute the statement.

24
00:01:13,000 --> 00:01:15,000
This would be essentially 2 units of time.

25
00:01:15,000 --> 00:01:20,000
It follows from these assumptions that the running time for a loop is going to be equal

26
00:01:20,000 --> 00:01:24,000
to the time it takes for the body of the loop to run times the number of times it's repeated--

27
00:01:24,000 --> 00:01:26,000
the number of iterations.

28
00:01:26,000 --> 00:01:30,000
A block of statements like this where i takes on a set of values 0, 1, 2, and 3

29
00:01:30,000 --> 00:01:33,000
and prints each one--we'll say that this takes 4 units of time,

30
00:01:33,000 --> 00:01:37,000
because this unit statement is repeated 4 times.

31
00:01:37,000 --> 00:01:40,000
Let's see if you're getting the hang of this. Here's a little quiz.

32
00:01:40,000 --> 00:01:43,000
How many units of time will this little block of Python code take to run?

33
00:01:43,000 --> 99:59:59,999
Fill in your numerical answer in the box.
