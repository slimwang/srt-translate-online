1
00:00:00,250 --> 00:00:02,800
The view contains three
sets of elements.

2
00:00:02,800 --> 00:00:06,310
The first element is the toolbar,
now styled in white.

3
00:00:06,310 --> 00:00:09,910
The second set is a view
reminiscent of the Today view.

4
00:00:09,910 --> 00:00:12,660
And the third set contains
additional weather detail.

5
00:00:12,660 --> 00:00:16,480
Some quick measurement shows that
the top set of Today elements is one and

6
00:00:16,480 --> 00:00:20,220
a half times the height of the bottom
half of the detail elements.

7
00:00:20,220 --> 00:00:23,120
Sounds like a job for
a LinearLayout with weights.

8
00:00:23,120 --> 00:00:26,830
Inside of the sets, we see some
interesting Android layout techniques.

9
00:00:26,830 --> 00:00:28,680
Two spacer views are in place above and

10
00:00:28,680 --> 00:00:32,595
below that vertically center
the content of the Today styled view.

11
00:00:32,595 --> 00:00:34,355
Following the rules of material design,

12
00:00:34,355 --> 00:00:37,833
we see 16dp spacers being used
liberally in the vertical direction,

13
00:00:37,833 --> 00:00:42,835
along with 32dp spacers in the
horizontal direction for the details.

14
00:00:42,835 --> 00:00:45,515
But we're still missing
the core of these layouts.

15
00:00:45,515 --> 00:00:49,940
It would be pretty easy to build the top
one with a nested LinearLayout, and

16
00:00:49,940 --> 00:00:52,330
slightly tricky with a RelativeLayout.

17
00:00:52,330 --> 00:00:55,150
But it turns out that both of
these sections are built with only

18
00:00:55,150 --> 00:00:57,240
one layout each, a GridLayout.

19
00:00:59,140 --> 00:01:03,098
GridLayout was added to Android for
the Ice Cream Sandwich release.

20
00:01:03,098 --> 00:01:06,690
Its goal is to address the limitations
of Android's nested layouts,

21
00:01:06,690 --> 00:01:09,140
which fall into three basic categories.

22
00:01:09,140 --> 00:01:11,970
Firstly, the inability
to control alignment

23
00:01:11,970 --> 00:01:14,170
along both axes simultaneously.

24
00:01:14,170 --> 00:01:16,630
Performance problems in
hierarchies that are too deep,

25
00:01:16,630 --> 00:01:20,220
especially when you're using expensive
features such as layout_weight.

26
00:01:20,220 --> 00:01:24,260
And unsuitability for design tools
that support freeform editing.

27
00:01:24,260 --> 00:01:27,020
And yes, we are looking at you,
RelativeLayout.

28
00:01:27,020 --> 00:01:32,270
As its name suggests, GridLayout uses
rows and columns to layout views.

29
00:01:32,270 --> 00:01:34,990
You can see it adjust the grid
automatically as controls in

30
00:01:34,990 --> 00:01:37,060
the righthand column get larger.

31
00:01:37,060 --> 00:01:39,671
Using GridLayout,
you give constraints to each view,

32
00:01:39,671 --> 00:01:42,502
as well as specify what to do
with the extra space in the cell,

33
00:01:42,502 --> 00:01:45,298
using the GridLayout's own
version of layout_gravity.

34
00:01:45,298 --> 00:01:48,957
The GridLayout then attempts to preserve
the constraints as it solves the problem

35
00:01:48,957 --> 00:01:50,695
of laying out the view.

36
00:01:50,695 --> 00:01:54,814
Android Lollipop added the ability to
GridLayout to reapportion space among

37
00:01:54,814 --> 00:01:58,705
its child's views automatically
using layout_weights.

38
00:01:58,705 --> 00:02:01,665
Fortunately, the support library
lets us use this latest and

39
00:02:01,665 --> 00:02:03,590
greatest version of GridLayout.

40
00:02:03,590 --> 00:02:05,510
GridLayout is a separate
support component.

41
00:02:05,510 --> 00:02:09,300
It requires a separate entry in
your Gradle dependency list.

42
00:02:09,300 --> 00:02:13,100
Here are a bunch of layout
elements in no particular layout.

43
00:02:13,100 --> 00:02:17,255
If we place the layouts into a default
GridLayout, it behaves similar to

44
00:02:17,255 --> 00:02:21,361
LinearLayout, although it aligns
text to the baseline by default.

45
00:02:22,630 --> 00:02:23,600
We didn't have to put the height or

46
00:02:23,600 --> 00:02:27,660
width of each into the layout XML
because GridLayout assumes wrap content.

47
00:02:28,820 --> 00:02:31,850
Here is the underlying grid
produced by this layout.

48
00:02:31,850 --> 00:02:35,350
Changing the orientation to vertical
makes it perform very similar to

49
00:02:35,350 --> 00:02:37,160
a vertical LinearLayout.

50
00:02:37,160 --> 00:02:39,780
And here is the grid
produced by that layout.

51
00:02:39,780 --> 00:02:43,460
Changing things back to the default
orientation of horizontal, but

52
00:02:43,460 --> 00:02:45,500
giving the GridLayout
a column count of two,

53
00:02:45,500 --> 00:02:49,610
causes GridLayout to automatically
place the child views into columns.

54
00:02:49,610 --> 00:02:52,330
Here's the underlying grid
produced by this layout.

55
00:02:52,330 --> 00:02:57,180
Explicitly setting the icon view to the
second layout row, first layout column

56
00:02:57,180 --> 00:03:00,990
causes the GridLayout to move the cloud
icon to the first column in the second

57
00:03:00,990 --> 00:03:04,740
row and continue laying out
all other views from there.

58
00:03:05,840 --> 00:03:08,960
Here's the underlying grid
produced by this layout.

59
00:03:08,960 --> 00:03:10,180
But even better,

60
00:03:10,180 --> 00:03:14,950
we can use layout_columnSpan to have
the date span both of the columns.

61
00:03:14,950 --> 00:03:16,900
Here's the underlying grid
produced by that layout.

62
00:03:18,050 --> 00:03:21,570
Now we can distribute the extra
weight across all columns by adding

63
00:03:21,570 --> 00:03:24,530
a layout_columnWeight
to all of the columns.

64
00:03:24,530 --> 00:03:27,790
Note that you need to add this to all
layouts in the column in each row for

65
00:03:27,790 --> 00:03:28,669
it to have the desired effect.

66
00:03:29,920 --> 00:03:32,020
And here's the underlying
grid produced by this layout.

67
00:03:33,470 --> 00:03:37,220
We can tell the GridLayout to center
a view horizontally within its cell

68
00:03:37,220 --> 00:03:40,250
by adding layout_gravity
equals center_horizontal.

69
00:03:40,250 --> 00:03:43,210
By adding this to each layout,
we get this effect.

70
00:03:43,210 --> 00:03:45,790
Note that the two columns
aren't exactly even,

71
00:03:45,790 --> 00:03:48,150
because we only distributed
the extra weight between them.

72
00:03:49,320 --> 00:03:52,070
It looks close because they
contain similar sized elements.

73
00:03:53,250 --> 00:03:56,900
You can really see that in
the grid produced by this layout.

74
00:03:56,900 --> 00:03:59,930
Material Design defines
these default styles.

75
00:03:59,930 --> 00:04:03,600
These sizes and styles were developed
to balance content density and

76
00:04:03,600 --> 00:04:06,560
reading comfort under
typical usage conditions.

77
00:04:06,560 --> 00:04:09,300
Consider using these styles
whenever possible as

78
00:04:09,300 --> 00:04:12,020
it will help you make
good design decisions.

79
00:04:12,020 --> 00:04:14,340
The support library provides
the definitions for

80
00:04:14,340 --> 00:04:16,360
all of these font styles.

81
00:04:16,360 --> 00:04:19,904
Here's how you would reference
the Display 4 112sp style in

82
00:04:19,904 --> 00:04:22,460
the textAppearance of a TextView.

83
00:04:22,460 --> 00:04:25,420
We're going to do our best to make
sunshine use as many of these styles

84
00:04:25,420 --> 00:04:27,610
as we can while implementing
the new design.
