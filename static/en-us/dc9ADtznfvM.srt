1
00:00:00,620 --> 00:00:03,589
So we talked about removing noise using a filter,

2
00:00:03,589 --> 00:00:06,920
let's see how well that really works.

3
00:00:06,920 --> 00:00:08,842
Let us load a perfectly good image.

4
00:00:13,027 --> 00:00:15,001
Spoil it by adding some noise.

5
00:00:18,996 --> 00:00:21,659
I should really name this sigma to avoid confusion later.

6
00:00:23,940 --> 00:00:26,800
Finally, we know how to create a Gaussian filter.

7
00:00:26,800 --> 00:00:29,510
We define a size and a sigma.

8
00:00:29,510 --> 00:00:33,110
And then we can use the fspecial function from the image package.

9
00:00:33,110 --> 00:00:35,170
So load up the package first.

10
00:00:35,170 --> 00:00:37,180
And then create the filter.

11
00:00:37,180 --> 00:00:40,080
Now, we can apply this filter to remove noise.

12
00:00:40,080 --> 00:00:42,570
Note the order of parameters in imfilter.

13
00:00:42,570 --> 00:00:45,660
First is the image and second is the filter.

14
00:00:45,660 --> 00:00:48,830
Notice how the filter has smoothed, or rather, blurred the image.

15
00:00:48,830 --> 00:00:53,820
The fine particle like appearance of the noise is now smudged.

16
00:00:53,820 --> 00:00:57,680
But the filter has also affected the original image a great deal.

17
00:00:57,680 --> 00:01:00,090
So, noise removal is no magic.

18
00:01:00,090 --> 00:01:03,240
You don't get back exactly what you started with.

19
00:01:03,240 --> 00:01:06,090
Visually, it might not seem very impressive, but

20
00:01:06,090 --> 00:01:08,940
image processing routines further down the road

21
00:01:08,940 --> 00:01:14,390
behave quite differently given a noisy image versus a smooth image.

22
00:01:14,390 --> 00:01:16,950
Go ahead and run this code yourself.

23
00:01:16,950 --> 00:01:19,810
Try out different parameters for noise generation and smoothing.
