1
00:00:00,000 --> 00:00:05,000
Here is my solution. I implement a variable int crosstrack error outside my main loop

2
00:00:05,000 --> 00:00:07,000
then initialize with zero.

3
00:00:07,000 --> 00:00:12,000
I then add to the int crosstrack error my local crosstrack_error.

4
00:00:12,000 --> 00:00:17,000
Then I have a controller that steers in proportion to the int<u>crosstrack</u>error.

5
00:00:17,000 --> 00:00:27,000
When I hit run, I find that my y variable slowly converges all the way down to 0 or 0.05.

6
00:00:27,000 --> 00:00:31,000
I get even faster conversions when I set this parameter to 0.01,

7
00:00:31,000 --> 00:00:38,000
looking down you can see a little overshoot, but my controller converges to 0.0 fairly quickly

8
00:00:38,000 --> 00:00:40,000
and then tends to stay close to 0.0.

9
00:00:40,000 --> 00:00:46,000
This PID controller is kind of the best solution for the control problem at hand.

10
00:00:46,000 --> 00:00:48,000
You just implemented one.

11
00:00:48,000 --> 00:00:51,000
Now, here's the big question for you.

12
00:00:51,000 --> 00:00:55,000
How can we find good control gains

13
00:00:55,000 --> 00:01:01,000
where control gains are these parameters tau p, d, and i.

14
00:01:01,000 --> 00:01:03,000
Now, this is my favorite part of this class.

15
00:01:03,000 --> 00:01:07,000
Every one of my students has made it through it, and every one of my students

16
00:01:07,000 --> 00:01:14,000
is puzzled why I insist on this, but when they implement it they get to love what I'm just about to show you.

17
00:01:14,000 --> 00:01:17,000
The answer is to called "twiddle."

18
00:01:17,000 --> 00:01:21,000
Twiddle is my favorite algorithm that I have used in my entire life.

19
00:01:21,000 --> 00:01:26,000
Some people call it "coordinate ascent" to make it sound a little more sophisticated,

20
00:01:26,000 --> 00:01:31,000
but I just called it twiddle, because it really gets to the heart of what's happening.
