1
00:00:00,310 --> 00:00:04,072
Because of scenarios like this, Python provides an extra construct that can be

2
00:00:04,072 --> 00:00:08,271
used as part of the try statement. It's called the Finally clause. And the way

3
00:00:08,271 --> 00:00:11,634
it works is, the code in the Finally Block is guaranteed to always run

4
00:00:11,634 --> 00:00:15,351
regardless of whether the try block finishes, or we go through an exception

5
00:00:15,351 --> 00:00:19,554
handler. So, it could work like this. We could run the try block, if we complete

6
00:00:19,554 --> 00:00:23,910
normally, it will go to the Finally Block, run the finally block, and then we're

7
00:00:23,910 --> 00:00:28,680
done. And note that even if there's something that changes control flow in here,

8
00:00:28,680 --> 00:00:33,220
suppose there's a return and we're inside a function definition. If that's in

9
00:00:33,220 --> 00:00:37,048
the middle of the Block here, normally you would think, well, when we return, we

10
00:00:37,048 --> 00:00:40,768
return, no other code runs. If we've got a Finally, that's not the case. The

11
00:00:40,768 --> 00:00:45,860
Finally code will run before the return happens. If there's an exception before

12
00:00:45,860 --> 00:00:50,435
we get to that, let's say, there's an exception in the try and it goes to the

13
00:00:50,435 --> 00:00:55,535
exception handler, well, that'll run, we're still guaranteed to run the Finally

14
00:00:55,535 --> 00:00:59,260
code. So, this is a construct that leads to lots of complex control flow.

15
00:00:59,260 --> 00:01:03,494
Execution can jump unexpectedly. Well, unexpectedly if you don't know what to

16
00:01:03,494 --> 00:01:06,502
expect. Hopefully, you know what to expect because you've been paying attention.

17
00:01:06,502 --> 00:01:10,732
But execution can jump around in all sorts of strange ways, but it guarantees

18
00:01:10,732 --> 00:01:15,050
that this Finally code, which cleans up if something failed always runs. So,

19
00:01:15,050 --> 00:01:19,898
this almost works. So, we've added our Finally clause and inside the Finally

20
00:01:19,898 --> 00:01:24,623
clause, we're closing the file and because of the semantics of the Finally,

21
00:01:24,623 --> 00:01:29,423
whether we succeed in writing or we go to the exception, we'll eventually run

22
00:01:29,423 --> 00:01:33,266
this close and we only need it in one place. So, this almost works but not

23
00:01:33,266 --> 00:01:37,350
quite. Let me show you what happens. So, I'm going to try running it. And I'm

24
00:01:37,350 --> 00:01:42,062
running it in a directory where the blim.py file is not writable. And here's

25
00:01:42,062 --> 00:01:47,248
what happens. I get the error, so I'm catching the exception, printing Error

26
00:01:47,248 --> 00:01:52,726
writing file, permission is denied, but now, when I try to do fout.close, as you

27
00:01:52,726 --> 00:01:57,540
can see here, I get a name error and I get an error because since the open

28
00:01:57,540 --> 00:02:03,018
didn't succeed, fout was never defined, and we get a name error because the name

29
00:02:03,018 --> 00:02:04,435
fout is not defined.
