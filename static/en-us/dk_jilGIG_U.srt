1
00:00:00,000 --> 00:00:02,000
That's not the only new power we're going to introduce.

2
00:00:02,000 --> 00:00:05,000
Suppose that you wanted to square

3
00:00:05,000 --> 00:00:08,000
all of the numbers in the list 1, 2, 3, 4, 5.

4
00:00:08,000 --> 00:00:10,000
Here's one way to do it.

5
00:00:10,000 --> 00:00:13,000
The function map takes a function as its first argument

6
00:00:13,000 --> 00:00:17,000
and then a list, and it applies that function to each element

7
00:00:17,000 --> 00:00:20,000
of the list in turn, creating a new list.

8
00:00:20,000 --> 00:00:23,000
I'm going to make a new list down here that's the output of map,

9
00:00:23,000 --> 00:00:27,000
and we're going to take 1 and square it, so we get 1 x 1 is 1.

10
00:00:27,000 --> 00:00:29,000
Now we're going to take 2 and square it.

11
00:00:29,000 --> 00:00:31,000
2 x 2 is 4.

12
00:00:31,000 --> 00:00:33,000
3 and square it is 9.

13
00:00:33,000 --> 00:00:36,000
4 and square it is 16.

14
00:00:36,000 --> 00:00:38,000
5 and square it is 25.

15
00:00:38,000 --> 00:00:42,000
Each one of these led directly to part of my output.

16
00:00:42,000 --> 00:00:44,000
This function map is a big part of functional programming,

17
00:00:44,000 --> 00:00:47,000
and it's also a big part of how Google

18
00:00:47,000 --> 00:00:51,000
is able to make very scalable search engines and related services.

19
00:00:51,000 --> 00:00:54,000
Map reduced is an easily parallelizable

20
00:00:54,000 --> 00:00:57,000
functional programming paradigm, lots of power here.

21
00:00:57,000 --> 00:01:01,000
I said that map takes a function as its first argument.

22
00:01:01,000 --> 00:01:04,000
One way to make a function is to define it earlier and refer to it by name,

23
00:01:04,000 --> 00:01:07,000
but we can also make a function right now

24
00:01:07,000 --> 00:01:10,000
right in this expression when we need it and pass that in.

25
00:01:10,000 --> 00:01:14,000
This map is going to produce the same result as the previous one.

26
00:01:14,000 --> 00:01:17,000
1 x 1 is 1. 2 x 2 is 4.

27
00:01:17,000 --> 00:01:20,000
3 x 3 is 9. 16, 25.

28
00:01:20,000 --> 00:01:23,000
But I didn't need to have mysquare defined in advance.

29
00:01:23,000 --> 00:01:27,000
This use of lambda is sometimes called an anonymous function

30
00:01:27,000 --> 00:01:30,000
because it was an important function, but we never actually gave it a name.

31
00:01:30,000 --> 00:01:32,000
But now here comes the real convenience.

32
00:01:32,000 --> 00:01:35,000
I'm going to show you a third way to make that list

33
00:01:35,000 --> 00:01:37,000
that's even more natural than the previous two.

34
00:01:37,000 --> 00:01:40,000
This approach is called a list comprehension.

35
00:01:40,000 --> 00:01:45,000
You ask for a list, but instead of actually putting elements in it,

36
00:01:45,000 --> 00:01:50,000
you write out a little formula here and then say that you want that formula applied

37
00:01:50,000 --> 00:01:54,000
for every element in some other list or collection.

38
00:01:54,000 --> 00:01:57,000
This is saying for every x in 1, 2, 3, 4, 5,

39
00:01:57,000 --> 00:02:00,000
so x is going to be 1, and then it will be 2, and then it will be 3,

40
00:02:00,000 --> 00:02:02,000
then it will be 4, then it will be 5,

41
00:02:02,000 --> 00:02:06,000
for each one of those, put x times x in the output list.

42
00:02:06,000 --> 00:02:10,000
These formulas can be arbitrarily complicated, any expression you like.

43
00:02:10,000 --> 00:02:14,000
Here x is going to be hello and then my and then friends,

44
00:02:14,000 --> 00:02:17,000
and we're going to make a list out of the length of each of those,

45
00:02:17,000 --> 00:02:22,000
so that's going to be 5 and then 2 and then--actually, you tell me.

46
00:02:22,000 --> 99:59:59,999
What's going to show up here?
