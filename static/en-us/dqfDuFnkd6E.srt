1
00:00:00,370 --> 00:00:04,400
So due to the client server interactions
that happen with the system,

2
00:00:04,400 --> 00:00:07,160
I'm giving you one
specific example here.

3
00:00:07,160 --> 00:00:10,490
A client makes a call to a file system.

4
00:00:10,490 --> 00:00:13,045
And the directory server
of the file system

5
00:00:13,045 --> 00:00:17,945
makes call to the data server where
the file is actually located.

6
00:00:17,945 --> 00:00:23,255
So all of these are IPC calls, but
under the cover a shadow graph structure

7
00:00:23,255 --> 00:00:27,985
emerges which is a trail of
the client server interactions.

8
00:00:27,985 --> 00:00:33,765
The client opening the file so
the TM on the owner has a link to

9
00:00:33,765 --> 00:00:37,160
a TM on the directory manager and
the directory manager

10
00:00:37,160 --> 00:00:41,930
is calling the data servers and
two different nodes and correspondingly,

11
00:00:41,930 --> 00:00:46,600
there is a link from the transaction
manager on the directory server

12
00:00:46,600 --> 00:00:50,930
to the transaction manager on the data
server on these two different nodes.

13
00:00:50,930 --> 00:00:53,990
So, if you look at it from the point
of view from the transaction tree,

14
00:00:53,990 --> 00:00:58,460
the client is the owner of
the transaction tree and

15
00:00:58,460 --> 00:01:02,220
all of these sites are participants
in the transaction tree.

16
00:01:02,220 --> 00:01:07,610
I mentioned earlier that as
the owner of a transaction tree,

17
00:01:07,610 --> 00:01:12,620
the owner has the right to delegate
the ownership to someone else.

18
00:01:12,620 --> 00:01:14,080
Why would they want to do that?

19
00:01:14,080 --> 00:01:16,950
We think about it from the point of
view of the distributed system that we

20
00:01:16,950 --> 00:01:17,840
are talking about.

21
00:01:17,840 --> 00:01:22,020
The most fragile parts of
the distributive system are the clients.

22
00:01:22,020 --> 00:01:24,500
They are the fickle minded
ones who can go away,

23
00:01:24,500 --> 00:01:27,539
who can abort a file request
that they started, and so on.

24
00:01:27,539 --> 00:01:32,189
So in that sense if the root of
the transaction tree is on a client node

25
00:01:32,189 --> 00:01:37,760
then cleaning up the bread crumbs may
become hard if the client box goes away.

26
00:01:37,760 --> 00:01:41,470
Because the owner will go away, and
that's the reason the owner can delegate

27
00:01:41,470 --> 00:01:45,880
the ownership to any node
in the system and that

28
00:01:45,880 --> 00:01:50,650
node becomes the transaction manager for
this particular transaction tree

29
00:01:50,650 --> 00:01:55,890
in terms of what needs to be done to
clean up anything that happens adversely

30
00:01:55,890 --> 00:01:59,490
during the interaction that I'm showing
you in this particular picture.

31
00:01:59,490 --> 00:02:04,380
So the heavy lifting that Quicksilver
does has to do with what it

32
00:02:04,380 --> 00:02:09,820
needs to do under the covers in keeping
this order tree of transactions.

33
00:02:09,820 --> 00:02:14,540
Corresponding to the IPC interactions
from the point of view of recovery.

34
00:02:14,540 --> 00:02:18,640
Let's talk about how this
order chain is managed

35
00:02:18,640 --> 00:02:22,570
by Quicksilver in order to
facilitate recovery management.
