1
00:00:00,000 --> 00:00:05,000
In this problem, we're going to build a procedure that sees into the mind

2
00:00:05,000 --> 00:00:07,000
of a finite state machine.

3
00:00:07,000 --> 00:00:10,000
Given the definition for a non-deterministic finite state machine,

4
00:00:10,000 --> 00:00:13,000
we're going to use our crystal ball of Python code

5
00:00:13,000 --> 00:00:16,000
to read into the mind of the finite state machine

6
00:00:16,000 --> 00:00:21,000
and output any string if there exists one

7
00:00:21,000 --> 00:00:24,000
that is accepted by that finite state machine.

8
00:00:24,000 --> 00:00:26,000
This sounds like some pretty powerful stuff, but believe it or not,

9
00:00:26,000 --> 00:00:29,000
you have all the tools to do this.

10
00:00:29,000 --> 00:00:31,000
Here I have an outline for a finite state machine,

11
00:00:31,000 --> 00:00:34,000
and I didn't bother to label any of the edges,

12
00:00:34,000 --> 00:00:36,000
and let's just add a few more for fun.

13
00:00:36,000 --> 00:00:39,000
The strategy we're going to use is starting from the starting state,

14
00:00:39,000 --> 00:00:43,000
we're going to follow every edge, and as long as we don't visit

15
00:00:43,000 --> 00:00:46,000
a node that we've already visited, we're going to continue along

16
00:00:46,000 --> 00:00:49,000
until we reach an accepting state.

17
00:00:49,000 --> 00:00:53,000
We're then going to go back, building up a string

18
00:00:53,000 --> 00:00:58,000
that goes the other way, so the last character is going to be this edge.

19
00:00:58,000 --> 00:01:00,000
The second to last is going to be this one,

20
00:01:00,000 --> 00:01:02,000
and the third to last will be this one.

21
00:01:02,000 --> 00:01:05,000
Yeah, there are strings that would match if we went here

22
00:01:05,000 --> 00:01:08,000
and then looped at the 3 for a while.

23
00:01:08,000 --> 00:01:11,000
But the question only asks us to give one, and this is the best way to do it.

24
00:01:11,000 --> 00:01:15,000
We do have to take into account the issue of kind of an infinite loop.

25
00:01:15,000 --> 00:01:19,000
How do we know that we're never going to finish,

26
00:01:19,000 --> 00:01:21,000
never going to reach the accepting state?

27
00:01:21,000 --> 00:01:24,000
And I hinted at that earlier.

28
00:01:24,000 --> 00:01:30,000
We're just going to avoid revisiting the same node over and over again

29
00:01:30,000 --> 00:01:33,000
because all we care about is making forward progress.

30
00:01:33,000 --> 00:01:37,000
In this one I can follow the 1 over and over again, just looping around forever,

31
00:01:37,000 --> 00:01:41,000
but I'll never reach the accepting state 2, so what I'm going to say is if I

32
00:01:41,000 --> 00:01:44,000
follow the edge back to the 1,

33
00:01:44,000 --> 00:01:47,000
I haven't made any progress, so I'm going to stop following edges

34
00:01:47,000 --> 00:01:49,000
from the 1 along that path.

35
00:01:49,000 --> 00:01:53,000
If there so existed a second edge that led from the 1 and the 2,

36
00:01:53,000 --> 00:01:57,000
I would take that immediately and go right to the 2,

37
00:01:57,000 --> 00:02:00,000
so I can ignore the looping forever.

38
00:02:00,000 --> 00:02:02,000
Hopefully you're still with me.

39
00:02:02,000 --> 00:02:05,000
Now I'm going to walk you through--believe it or not--

40
00:02:05,000 --> 00:02:09,000
the recursive solution to this problem.

41
00:02:09,000 --> 00:02:11,000
Here I have the declaration for my procedure.

42
00:02:11,000 --> 00:02:13,000
The inputs are the current state,

43
00:02:13,000 --> 00:02:16,000
the representation of our machine the accepting states,

44
00:02:16,000 --> 00:02:20,000
and the states that we visited so far, and as a reminder,

45
00:02:20,000 --> 00:02:25,000
what we're going to return is none if we reach a failure point.

46
00:02:25,000 --> 00:02:32,000
Otherwise we're going to start returning the edge that led us to this state,

47
00:02:32,000 --> 00:02:37,000
or more precisely, the next state, and build up the string as we go backwards

48
00:02:37,000 --> 00:02:39,000
from the accepting state.

49
00:02:39,000 --> 00:02:42,000
Okay, okay. Let's go right to the base case.

50
00:02:42,000 --> 00:02:45,000
If we've already visited this node, we're not making forward progress,

51
00:02:45,000 --> 00:02:48,000
and this isn't going to lead us to the accepting state,

52
00:02:48,000 --> 00:02:50,000
so we're going to return none.

53
00:02:50,000 --> 00:02:53,000
If we're currently in an accepting state, then we're going to return the empty string.

54
00:02:53,000 --> 00:02:57,000
We don't need to operate on any more edges

55
00:02:57,000 --> 00:02:59,000
to reach the accepting state.

56
00:02:59,000 --> 00:03:02,000
Here I'm adding the current state

57
00:03:02,000 --> 00:03:06,000
to what's going to be the new list of visited states.

58
00:03:06,000 --> 00:03:11,000
And here I'm looking up all the outgoing edges

59
00:03:11,000 --> 00:03:15,000
from the current state, and for each outgoing edge we find,

60
00:03:15,000 --> 00:03:18,000
we're going to recurse with the new state,

61
00:03:18,000 --> 00:03:23,000
and the new list of visited states, if following that path,

62
00:03:23,000 --> 00:03:27,000
eventually leads us back to something that we've already visited,

63
00:03:27,000 --> 00:03:31,000
or if there are no outgoing edges, basically if we failed,

64
00:03:31,000 --> 00:03:33,000
then foo will be none.

65
00:03:33,000 --> 00:03:36,000
If it's not none, that means we've found something.

66
00:03:36,000 --> 00:03:41,000
We found an accepting state, so we're going to start returning

67
00:03:41,000 --> 00:03:44,000
our string, and so the string I'm going to return is the character

68
00:03:44,000 --> 00:03:47,000
that I followed to the new state

69
00:03:47,000 --> 00:03:51,000
plus the string that was returned by our recursive call.

70
00:03:51,000 --> 00:03:55,000
This string represents all the characters that it took to get

71
00:03:55,000 --> 00:03:57,000
from newstate to the accepting state.

72
00:03:57,000 --> 00:03:59,000
This could be an empty string.

73
00:03:59,000 --> 00:04:02,000
It could be 100 different characters. It doesn't really matter.

74
00:04:02,000 --> 00:04:05,000
And in case there are no outgoing edges, as I mentioned before,

75
00:04:05,000 --> 00:04:07,000
we're going to return none as well.

76
00:04:07,000 --> 00:04:09,000
That's it.

77
00:04:09,000 --> 99:59:59,999
13 lines of code to read the mind of a finite state machine.
