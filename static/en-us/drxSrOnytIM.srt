1
00:00:00,000 --> 00:00:02,000
Our next guest is Andrew Goldberg.

2
00:00:02,000 --> 00:00:06,000
He's a principal researcher at Microsoft Research, Silicon Valley,

3
00:00:06,000 --> 00:00:10,000
and his work focuses on creating algorithms for real-world problems.

4
00:00:10,000 --> 00:00:12,000
One of the interesting problems he's studied

5
00:00:12,000 --> 00:00:18,000
is how to find the shortest path in really, really large networks in microseconds,

6
00:00:18,000 --> 00:00:22,000
so he's going to tell us a little bit about algorithms for doing that.

7
00:00:22,000 --> 00:00:24,000
[Andrew Goldberg] [Principal Researcher, Microsoft Research] Recently I've been

8
00:00:24,000 --> 00:00:28,000
working a lot on shortest path algorithms,

9
00:00:28,000 --> 00:00:33,000
especially motivated by GPS navigation applications,

10
00:00:33,000 --> 00:00:35,000
so basically how to get from A to B.

11
00:00:35,000 --> 00:00:37,000
That's great.

12
00:00:37,000 --> 00:00:41,000
When you analyze this problem, that problem itself is fairly classically studied.

13
00:00:41,000 --> 00:00:45,000
What are the new wrinkles in it that come up, and why do they come up?

14
00:00:45,000 --> 00:00:50,000
So, the new wrinkles came up when GPS navigation

15
00:00:50,000 --> 00:00:53,000
became very, very widely used,

16
00:00:53,000 --> 00:01:00,000
and also GPS maps became continent sized and detailed, digital maps.

17
00:01:00,000 --> 00:01:06,000
And then you really wanted to solve the problem much faster than in linear time.

18
00:01:06,000 --> 00:01:11,000
Basically when Bing Maps or Google Maps gets a request

19
00:01:11,000 --> 00:01:14,000
it doesn't have the time to look at the whole map,

20
00:01:14,000 --> 00:01:19,000
so linear time algorithms like your classical Dijkstra's algorithm are not good enough,

21
00:01:19,000 --> 00:01:22,000
and the new wrinkle was preprocessing,

22
00:01:22,000 --> 00:01:28,000
so you want to preprocess your graph to be able to answer queries

23
00:01:28,000 --> 00:01:34,000
very, very quickly, sort of in polylogarithmic time if you want to put your theory hat on.

24
00:01:34,000 --> 00:01:37,000
During the last 15 years or so there was a lot of research

25
00:01:37,000 --> 00:01:44,000
both at our group and also in many other places,

26
00:01:44,000 --> 00:01:48,000
and there have been very nice algorithms developed

27
00:01:48,000 --> 00:01:52,000
which 10 years ago I wouldn't have believed that it's possible,

28
00:01:52,000 --> 00:01:57,000
but basically these algorithms can answer queries in microseconds

29
00:01:57,000 --> 00:01:59,000
on continental-sized networks.

30
00:01:59,000 --> 00:02:04,000
Wow, and it doesn't pre-store all possible pair wise--

31
00:02:04,000 --> 00:02:09,000
No, so just to give you an idea of scale

32
00:02:09,000 --> 00:02:14,000
a continent-sized network has tens of millions of nodes,

33
00:02:14,000 --> 00:02:20,000
so 10 billion squared is too big even for today's huge disks.

34
00:02:20,000 --> 00:02:23,000
Are there any relationships between the kinds of graphs that you get

35
00:02:23,000 --> 00:02:27,000
in highways and the kinds of graphs that would come out of a social network?

36
00:02:27,000 --> 00:02:33,000
We did recent variation studies under submission now,

37
00:02:33,000 --> 00:02:38,000
and we studied some of the publicly available networks,

38
00:02:38,000 --> 00:02:43,000
and the sub-labeling algorithm I want to talk about next

39
00:02:43,000 --> 00:02:47,000
has actually worked fairly well for this kind of network

40
00:02:47,000 --> 00:02:50,000
like quarter networks and so on.

41
00:02:50,000 --> 00:02:55,000
But for example, it doesn't work so well for small world kind of networks.

42
00:02:55,000 --> 00:02:57,000
Okay, interesting.

43
00:02:57,000 --> 00:03:01,000
All right, good, so if you wouldn't mind telling me a little bit about the algorithm,

44
00:03:01,000 --> 00:03:03,000
I think that would be really interesting.

45
00:03:03,000 --> 00:03:06,000
Let's talk about implementing just the distance oracle,

46
00:03:06,000 --> 00:03:11,000
so basically given 2 points, you want to tell the distance between those 2 points.

47
00:03:11,000 --> 00:03:15,000
The algorithm first preprocesses the graph,

48
00:03:15,000 --> 00:03:17,000
and for each vertex it computes labels,

49
00:03:17,000 --> 00:03:21,000
and let's say for simplicity the graph is undirected.

50
00:03:21,000 --> 00:03:25,000
Then a label of a vertex is a set of vertices

51
00:03:25,000 --> 00:03:30,000
which we call hubs and distances to the hubs from the vertex.

52
00:03:30,000 --> 00:03:38,000
Each vertex has a label, and these labels must have the following property.

53
00:03:38,000 --> 00:03:44,000
If you take any 2 vertices, the set of hubs has to intersect,

54
00:03:44,000 --> 00:03:50,000
and the intersection mark contains a vertex on the shortest path between them.

55
00:03:50,000 --> 00:03:53,000
And why it's important is that for this vertex

56
00:03:53,000 --> 00:03:57,000
if you sum up the distances to the 2 hubs, which you have,

57
00:03:57,000 --> 00:03:59,000
you will get the shortest path distance.

58
00:03:59,000 --> 00:04:04,000
The sum of results, so all the hubs' shortest path distance is stored?

59
00:04:04,000 --> 00:04:06,000
No, for each vertex you have a set of hubs.

60
00:04:06,000 --> 00:04:10,000
The distance from this vertex to each hub.

61
00:04:10,000 --> 00:04:13,000
[Male] Oh, I see, and they have to share a hub.

62
00:04:13,000 --> 00:04:15,000
On the shortest path.

63
00:04:15,000 --> 00:04:18,000
That is also on the shortest path, I see.

64
00:04:18,000 --> 00:04:21,000
Right, so this is a fairly strong property, so the easiest way

65
00:04:21,000 --> 00:04:24,000
to do it is you say, okay, for each vertex

66
00:04:24,000 --> 00:04:26,000
all other vertices are at hubs.

67
00:04:26,000 --> 00:04:28,000
[Male] Then you're guaranteed.

68
00:04:28,000 --> 00:04:34,000
And then the property holds, but then your queue at a time is order of n,

69
00:04:34,000 --> 00:04:38,000
and what you really want is small labels,

70
00:04:38,000 --> 00:04:42,000
and it turns out that some graphs have more labels,

71
00:04:42,000 --> 00:04:46,000
and the reason why this works well in road networks

72
00:04:46,000 --> 00:04:49,000
is that we can compute labels

73
00:04:49,000 --> 00:04:54,000
for, say, the graph of Western Europe with about 18 million vertices.

74
00:04:54,000 --> 00:04:58,000
We can compute labels of size about 70.

75
00:04:58,000 --> 00:05:01,000
70, 7-0.>>[Andrew Goldberg] Yes.

76
00:05:01,000 --> 00:05:04,000
Out of how many million did you say? 16 million?

77
00:05:04,000 --> 00:05:06,000
18.>>[Male] 18 million.

78
00:05:06,000 --> 00:05:08,000
You only need 70.

79
00:05:08,000 --> 00:05:10,000
It's very, very fast.

80
00:05:10,000 --> 00:05:14,000
If you think about that if you sort these hubs by node ID

81
00:05:14,000 --> 00:05:19,000
we have 2 arrays, and you just need to intersect these 2 arrays of size 70,

82
00:05:19,000 --> 00:05:23,000
which you can do like a merge sort that is very good locality.

83
00:05:23,000 --> 00:05:27,000
This time becomes below a microsecond.

84
00:05:27,000 --> 00:05:29,000
It's very, very, fast.

85
00:05:29,000 --> 00:05:33,000
But this is not a very intuitive concept to me so what are the 70--

86
00:05:33,000 --> 00:05:36,000
so we're talking about like individual intersections in Europe, right?

87
00:05:36,000 --> 00:05:39,000
This is like Piccadilly Square or something like that

88
00:05:39,000 --> 00:05:42,000
or the northeast corner of Piccadilly Square,

89
00:05:42,000 --> 00:05:46,000
and you only need to know from there

90
00:05:46,000 --> 00:05:49,000
the distance to 70 other places in Europe.

91
00:05:49,000 --> 00:05:52,000
This is the amazing thing, and that's why people thought

92
00:05:52,000 --> 00:05:55,000
that this wouldn't be practical because

93
00:05:55,000 --> 00:05:58,000
if you think about it there are probably thousands,

94
00:05:58,000 --> 00:06:02,000
but the surprising thing was that you only needed a much smaller number,

95
00:06:02,000 --> 00:06:06,000
so if you think about this long range,

96
00:06:06,000 --> 00:06:10,000
it's basically intersections of major highways,

97
00:06:10,000 --> 00:06:13,000
and there are not that many of those, and sort of locally

98
00:06:13,000 --> 00:06:17,000
it's intersections of state highways and more locally

99
00:06:17,000 --> 00:06:20,000
it's intersections of major streets.

100
00:06:20,000 --> 00:06:25,000
The bad graphs of this kind of algorithm are grids,

101
00:06:25,000 --> 00:06:28,000
but fortunately there are no big grids in the maps,

102
00:06:28,000 --> 00:06:31,000
and even though there are grids like in Manhattan

103
00:06:31,000 --> 00:06:35,000
it's only 10 avenues wide, so it's not very big,

104
00:06:35,000 --> 00:06:38,000
and there is Broadway, which breaks the symmetry,

105
00:06:38,000 --> 00:06:43,000
so things are not as bad as one might think.

106
00:06:43,000 --> 00:06:45,000
That's fascinating.

107
00:06:45,000 --> 00:06:48,000
Of the 70 places, I could imagine that some fraction of them are

108
00:06:48,000 --> 00:06:52,000
for really long distance travel, like between countries,

109
00:06:52,000 --> 00:06:56,000
and some other fraction of them are for within the country

110
00:06:56,000 --> 00:06:59,000
but far distance, and then another fraction of them

111
00:06:59,000 --> 00:07:05,000
are for within the region of the country, and is it sort of equal buckets for each,

112
00:07:05,000 --> 00:07:09,000
or for really far distance you only need a small number, but for local you need more?

113
00:07:09,000 --> 00:07:11,000
What's the distribution like?

114
00:07:11,000 --> 00:07:16,000
It's roughly uniform as you increase the scale exponentially.

115
00:07:16,000 --> 00:07:19,000
[Male] Wow, wow.

116
00:07:19,000 --> 00:07:23,000
That really depends on where in the country you are

117
00:07:23,000 --> 00:07:28,000
because in that densely populated area you need more local things.

118
00:07:28,000 --> 00:07:30,000
If you are in the middle of nowhere--

119
00:07:30,000 --> 00:07:32,000
[Male] There's only one way out.
