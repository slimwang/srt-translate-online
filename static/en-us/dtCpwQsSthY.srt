1
00:00:00,190 --> 00:00:01,240
You've heard me say,

2
00:00:01,240 --> 00:00:05,179
do the stupid thing first,and only
add intelligence when necessary.

3
00:00:05,179 --> 00:00:08,080
It turns out that there
are a whole class of problems

4
00:00:08,080 --> 00:00:10,240
where just adding a little
bit of intelligence and

5
00:00:10,240 --> 00:00:14,839
iteratively improving the solution gets
you very close to an optimal solution.

6
00:00:14,839 --> 00:00:16,199
>> Like what?

7
00:00:16,199 --> 00:00:19,699
>> One of the classic ones is
the Traveling Salesman Problem.

8
00:00:19,699 --> 00:00:21,280
Imagine you're a salesman.

9
00:00:21,280 --> 00:00:22,220
>> That might be nice.

10
00:00:22,219 --> 00:00:24,179
I'd probably make more money
than what you're paying me.

11
00:00:25,780 --> 00:00:26,880
>> [COUGH] As I was saying.

12
00:00:26,879 --> 00:00:30,500
Imagine you're a salesman, and
you have five cities you want to visit.

13
00:00:30,500 --> 00:00:32,189
You can start at any city, but

14
00:00:32,189 --> 00:00:35,280
you have to fly to all of them
before your tour is over.

15
00:00:35,280 --> 00:00:38,484
And you have to come back to
the starting city in the end.

16
00:00:38,484 --> 00:00:41,479
What is the most efficient order
of flights to minimize overall

17
00:00:41,479 --> 00:00:42,699
distance flown?

18
00:00:42,700 --> 00:00:44,660
>> This problem sounds NP hard.

19
00:00:44,659 --> 00:00:45,819
>> What do you mean?

20
00:00:45,820 --> 00:00:49,899
>> Well, NP actually means
nondeterministic polynomial time.

21
00:00:49,899 --> 00:00:53,320
But people commonly talk about
non-polynomial algorithms as all being

22
00:00:53,320 --> 00:00:55,799
about as hard as each other, or NP hard.

23
00:00:55,799 --> 00:00:58,539
This problem seems exponentially
difficult in the number of cities

24
00:00:58,539 --> 00:01:02,519
considered, and so it seems just as bad
as our game playing or search problems.

25
00:01:02,520 --> 00:01:05,069
>> Precisely, but
like with our other problems,

26
00:01:05,069 --> 00:01:08,820
we're going to figure out tricks to
help solve the problem efficiently.

27
00:01:08,819 --> 00:01:11,179
First, we're going to
connect the cities randomly.

28
00:01:11,180 --> 00:01:12,410
>> How about like this?

29
00:01:12,409 --> 00:01:13,200
>> Great!

30
00:01:13,200 --> 00:01:16,210
Next, we are going to look at
any place where the paths cross.

31
00:01:16,209 --> 00:01:18,256
We'll show them in the red here.

32
00:01:18,256 --> 00:01:18,810
>> I get it.

33
00:01:18,810 --> 00:01:21,810
We need to revise the figure
to uncross each situation.

34
00:01:21,810 --> 00:01:23,700
That should reduce
the distance traveled.

35
00:01:23,700 --> 00:01:25,340
>> Yep, and for large problems,

36
00:01:25,340 --> 00:01:29,680
we can do the process iteratively
until there are no crossed paths.

37
00:01:29,680 --> 00:01:32,800
You can do this simple process
with thousands of cities and

38
00:01:32,799 --> 00:01:36,200
get a result that is within one
percent of the optimal solution.

39
00:01:36,200 --> 00:01:37,620
>> But that seems like a hack.

40
00:01:37,620 --> 00:01:39,430
How does this technique generalize?

41
00:01:39,430 --> 00:01:43,170
>> That is the subject of this section,
iterative improvement algorithms.

42
00:01:43,170 --> 00:01:44,939
Let's start out with
our challenge question.

