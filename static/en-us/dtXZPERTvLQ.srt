1
00:00:00,110 --> 00:00:02,760
To answer this question
we will need to add up

2
00:00:02,760 --> 00:00:07,680
the sizes that can be addressed with
every single type of the different

3
00:00:07,680 --> 00:00:10,920
pointers that are included
in the inode data structure.

4
00:00:10,920 --> 00:00:14,430
This includes the 12th direct
disk block pointers, and

5
00:00:14,430 --> 00:00:18,580
then the one single indirect pointer,
the one double indirect pointer, and

6
00:00:18,580 --> 00:00:20,630
the one triple indirect pointer.

7
00:00:20,630 --> 00:00:23,910
The answer to the first
question is 16 gigabytes.

8
00:00:23,910 --> 00:00:29,710
Remember, we have 1 kilobyte blocks, and
every single block pointer is 4 bytes.

9
00:00:29,710 --> 00:00:33,910
So, with a single block, again,
we address 256 pointers.

10
00:00:33,910 --> 00:00:37,353
Now, if we think about what is
the total number of file blocks

11
00:00:37,353 --> 00:00:41,691
that are addressed, their direct
pointers will address 12 file blocks.

12
00:00:41,691 --> 00:00:46,351
Then the single indirect will
address another 256 of those.

13
00:00:46,351 --> 00:00:50,120
The double indirect will
address 256 square.

14
00:00:50,120 --> 00:00:52,872
Triple indirect 256 cube.

15
00:00:52,872 --> 00:00:58,280
And all of that needs to be multiplied
by the actual size of the blocks.

16
00:00:58,280 --> 00:00:59,670
So that's 1 kilobyte.

17
00:00:59,670 --> 00:01:03,740
That will produce a maximum
file size of 16 gigabytes.

18
00:01:03,740 --> 00:01:07,020
The answer to the second
question is 64 terabytes.

19
00:01:07,020 --> 00:01:12,038
Remember here we have 8 kilobyte block
sizes, and given that the pointer size

20
00:01:12,038 --> 00:01:18,410
again is 4 bytes, each one of
the blocks can contain 2k pointers.

21
00:01:18,410 --> 00:01:22,510
Now if we do the math to compute what
is the total number of blocks that

22
00:01:22,510 --> 00:01:26,820
can be addressed with this inode, we
will come up with this calculation and

23
00:01:26,820 --> 00:01:29,920
multiply that by 8 kilobytes again,

24
00:01:29,920 --> 00:01:34,310
that is the block size will produce
the answer of 64 terabytes.

25
00:01:34,310 --> 00:01:38,410
So, although we've only increased
the block size from 1 kilobyte

26
00:01:38,410 --> 00:01:43,200
to 8 kilobyte, because of this
non-linear data structure that's used to

27
00:01:43,200 --> 00:01:47,220
address the blocks,
we're able to achieve much larger

28
00:01:47,220 --> 00:01:49,860
file sizes that can be
supported by these classes.
