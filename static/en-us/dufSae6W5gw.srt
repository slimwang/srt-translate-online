1
00:00:00,320 --> 00:00:04,170
So the ADD is peer producing a value of R1.

2
00:00:04,170 --> 00:00:07,740
That is not a problem because the previous instruction is just for

3
00:00:07,740 --> 00:00:12,770
using R2. So the ADD can't write its result when it's time. And when it,

4
00:00:12,770 --> 00:00:15,790
it's executed in cycle three, so it's going to write in cycle five.

5
00:00:15,790 --> 00:00:19,240
Now let's look at this multiplication instruction over here.

6
00:00:19,240 --> 00:00:23,140
Remember, we can execute any number of instructions. In the, in the same cycle.

7
00:00:23,140 --> 00:00:26,580
The reason we had to delay the ADD is because it actually has this dependence

8
00:00:26,580 --> 00:00:32,530
from R2 to R2. The multiplication is using only R3 and producing R3.

9
00:00:32,530 --> 00:00:36,750
Using R3 has no problem because neither the mul, nor the add are producing R3 so

10
00:00:36,750 --> 00:00:39,800
this multiplication can actually execute in cycle two.

11
00:00:39,800 --> 00:00:43,880
And then, there is no problem with R3 here because there is only R1 and

12
00:00:43,880 --> 00:00:46,710
R2, written by the previous instruction. So

13
00:00:46,710 --> 00:00:52,054
this multiplication can actually write R3 in cycle four. Because it's like two,

14
00:00:52,054 --> 00:00:57,780
three, four. Now, let's look at this ADD here. It uses R1 and R3. The R1 it's

15
00:00:57,780 --> 00:01:02,630
supposed to be using is produced by this ADD. Which executes in cycle three.

16
00:01:02,630 --> 00:01:07,300
The R3 is produced in cycle two by the multiplication. So this instruction

17
00:01:07,300 --> 00:01:13,195
actually has to wait for cycle four because of this. Then it's going to be cycle

18
00:01:13,195 --> 00:01:16,860
five when it's in the MEM stage. And it's able to write its result in cycle six.

19
00:01:16,860 --> 00:01:22,180
It's going to override the result from the ADD here but because the ADD is

20
00:01:22,180 --> 00:01:26,280
writing in cycle five. It's okay if we write in cycle six so everything is fine.

21
00:01:26,280 --> 00:01:32,300
Here we can write in cycle six. Now let's look at the multiplication here.

22
00:01:32,300 --> 00:01:35,450
It's using R4 none of the other instructions are producing R4.

23
00:01:35,450 --> 00:01:40,570
So it can also execute in the second cycle. It produces R4. None of the previous

24
00:01:40,570 --> 00:01:43,866
instructions are writing it so we have, we don't have to wait for anything. So

25
00:01:43,866 --> 00:01:48,590
we can actually write our R4 in cycle four as well. Just like this amount here.

26
00:01:48,590 --> 00:01:54,260
And then finally let's look at this add here. It's using R1 from here.

27
00:01:54,260 --> 00:01:59,710
It's using R4 from here. So our execution has to be

28
00:01:59,710 --> 00:02:04,150
in the cycle that follows the larger of these two. The larger is the cycle four,

29
00:02:04,150 --> 00:02:08,410
so we have to begin our execution in cycle five here. At the end of cycle five,

30
00:02:08,410 --> 00:02:11,180
then we will have the result. And the MEM, we can write the result in

31
00:02:11,180 --> 00:02:15,670
cycle seven. But we have to check, is somebody else going to override it later.

32
00:02:15,670 --> 00:02:19,360
And that's not going to happen, because if we write here in cycle seven,

33
00:02:19,360 --> 00:02:22,640
we are safe. This is the latest instruction, it should do the write of the,

34
00:02:22,640 --> 00:02:26,370
of the R1 at the latest time among all the other instructions. And if you

35
00:02:26,370 --> 00:02:29,802
look at the previous instructions have written the results in cycle five and

36
00:02:29,802 --> 00:02:33,360
cycle six. So it's okay if we here write it in cycle seven.

37
00:02:33,360 --> 00:02:35,250
So this is the solution to the quiz.
