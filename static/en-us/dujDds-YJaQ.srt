1
00:00:00,500 --> 00:00:04,210
All right, so that was the quick and
dirty tour of the debug bar.

2
00:00:04,210 --> 00:00:06,050
Let's talk about stepping
through our code.

3
00:00:07,220 --> 00:00:10,460
Right now, we believe that spiders are
not being drawn to the screen because

4
00:00:10,460 --> 00:00:14,570
the max bug value is set to zero,
and this is keeping us

5
00:00:14,570 --> 00:00:18,110
from actually entering the if
block that creates spiders.

6
00:00:18,110 --> 00:00:21,280
So if we use Step Over,
we can find out if this is really true.

7
00:00:22,700 --> 00:00:25,860
What Step Over is going to allow us
to do is execute the current line of

8
00:00:25,860 --> 00:00:28,450
code as if it were a black box.

9
00:00:28,450 --> 00:00:32,220
By black box, I mean you don't know
what's going on inside of the box, or

10
00:00:32,220 --> 00:00:34,950
inside of the line of code
that you're executing.

11
00:00:34,950 --> 00:00:38,050
You just see what happens on
the outside, or as a result.

12
00:00:38,050 --> 00:00:40,330
So, you might see the return
value of the function or

13
00:00:40,330 --> 00:00:43,870
the result of the computation for
this particular line of code.

14
00:00:44,970 --> 00:00:48,250
For example, if line 33
happened to be a function call,

15
00:00:48,250 --> 00:00:52,025
then by clicking Step Over we will
not go inside of the function,

16
00:00:52,025 --> 00:00:55,100
it'll just go ahead and
try and execute the function.

17
00:00:55,100 --> 00:00:58,630
So I'll click Step Over, and
it runs the current line of code.

18
00:00:58,630 --> 00:01:01,050
So with the green arrow at
the final closing brace,

19
00:01:01,050 --> 00:01:04,989
this is indicative that the function is,
or the method is, ready to return.

20
00:01:04,989 --> 00:01:10,350
So let's stop the app now and
change our max bug values to 100.

21
00:01:10,350 --> 00:01:11,850
Scroll up.

22
00:01:11,850 --> 00:01:13,180
There's max bugs.

23
00:01:13,180 --> 00:01:13,830
Change it to 100.

24
00:01:13,830 --> 00:01:18,150
And let's rebuild and run the app again.

25
00:01:19,370 --> 00:01:21,530
Go to the break point
debugging scene and we'll tap.

26
00:01:23,420 --> 00:01:24,500
And let's click Step Over.

27
00:01:25,550 --> 00:01:28,750
Or instead of clicking the button each
time, you can use the hot key, F6.

28
00:01:29,870 --> 00:01:33,200
This time Stepping Over drops
us right into the if block.

29
00:01:33,200 --> 00:01:37,410
So with our change, we've insured that
we've at least entered the if block.

30
00:01:37,410 --> 00:01:40,620
The next button we want to
talk about is Step Into.

31
00:01:40,620 --> 00:01:43,010
Step Into allows us to step inside or

32
00:01:43,010 --> 00:01:46,660
into a function call in order
to examine it's execution.

33
00:01:46,660 --> 00:01:48,320
The hot key for Step Into is F7.

34
00:01:48,320 --> 00:01:52,890
So let's step inside this line to see
what's happening when we call the bug

35
00:01:52,890 --> 00:01:55,020
factories create bug method.

36
00:01:55,020 --> 00:01:58,780
And we can see that X code that
automatically redirects us to

37
00:01:58,780 --> 00:02:01,770
the bug factory's create bug method.

38
00:02:01,770 --> 00:02:05,220
And we can step through this method
line by line using Step Over.

39
00:02:06,450 --> 00:02:08,788
Now it's going to be
a lot of Step Overs,

40
00:02:08,788 --> 00:02:13,180
because this particular method
has a lot of lines in it.

41
00:02:13,180 --> 00:02:15,590
And if this method was
hundreds of lines long,

42
00:02:15,590 --> 00:02:18,980
then stepping through each line
would get kind of tedious.

43
00:02:18,980 --> 00:02:21,930
So that's why our third
button Step Out exists.

44
00:02:21,930 --> 00:02:25,160
Step Out will jump us all the way
out of the current function,

45
00:02:25,160 --> 00:02:28,410
in this case the function
method create bug.

46
00:02:28,410 --> 00:02:32,380
The hot key for Stepping Out is F8.

47
00:02:32,380 --> 00:02:34,969
Once we step out of create bug,

48
00:02:34,969 --> 00:02:39,880
notice that our new bug
now has a memory address.

49
00:02:39,880 --> 00:02:42,110
And by the fact that it
shows a memory address,

50
00:02:42,110 --> 00:02:46,900
we can assume that a bug was created and
it contains some properties.

51
00:02:46,900 --> 00:02:50,540
So let's go ahead and click the continue
button to see what happens.

52
00:02:50,540 --> 00:02:52,030
Hmm, now that's weird.

53
00:02:52,030 --> 00:02:55,720
When we try to click continue, it
appears that we've hit the create bug or

54
00:02:55,720 --> 00:02:58,450
the add bug to view break point again.

55
00:02:58,450 --> 00:03:01,490
And this suggests that we may be
creating multiple bugs each time

56
00:03:01,490 --> 00:03:03,050
the user tabs.

57
00:03:03,050 --> 00:03:05,450
So this is actually
a separate problem and

58
00:03:05,450 --> 00:03:08,700
we're going to address it later
using another debugging tool.

59
00:03:08,700 --> 00:03:12,830
For now, let's just stop the program
and, if you remember from the print and

60
00:03:12,830 --> 00:03:14,680
debugging example, in this example,

61
00:03:14,680 --> 00:03:18,500
I'm also neglecting to add bugs to
the view after they're created.

62
00:03:18,500 --> 00:03:20,190
So let's go ahead and add that back.

63
00:03:21,310 --> 00:03:22,710
And let's disable this break point.

64
00:03:24,000 --> 00:03:25,210
And I did that by right clicking.

65
00:03:25,210 --> 00:03:28,300
You can right click as well,
or just toggle.

66
00:03:29,780 --> 00:03:30,410
And let's play.

67
00:03:33,470 --> 00:03:37,158
I'll tap and
it's a little laggy and whoa, okay.

68
00:03:37,158 --> 00:03:41,000
So I knew this was going to happen
because I looked at it ahead of time,

69
00:03:41,000 --> 00:03:45,440
but we have an issue here and
we're creating way too many spiders.

70
00:03:45,440 --> 00:03:46,370
That's actually kind of neat,

71
00:03:46,370 --> 00:03:49,830
I think some people may be
inclined to call this a feature.

72
00:03:49,830 --> 00:03:52,830
But all jokes aside,
this is another bug.

73
00:03:52,830 --> 00:03:55,450
For now, let's leave the app
in this broken state, and

74
00:03:55,450 --> 00:03:57,730
we'll get some more practice
stepping through our code.
