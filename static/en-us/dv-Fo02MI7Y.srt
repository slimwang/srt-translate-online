1
00:00:00,000 --> 00:00:05,000
Testing just means checking a program to gain confidence that it's correct.

2
00:00:05,000 --> 00:00:09,000
More formally, in a software engineering class we'd say that we want to gain confidence

3
00:00:09,000 --> 00:00:14,000
that the implementation adheres to the specification as refined from the requirements.

4
00:00:14,000 --> 00:00:17,000
I'm not going to spend much time on these words in this class.

5
00:00:17,000 --> 00:00:19,000
You may have a chance to learn about them later.

6
00:00:19,000 --> 00:00:24,000
But the implementation is your source code and the specification and requirements

7
00:00:24,000 --> 00:00:27,000
come from the problem statements--whatever you were told to do in the quiz

8
00:00:27,000 --> 00:00:30,000
or in the homework or by your boss or some such.

9
00:00:30,000 --> 00:00:34,000
This is a bit of a personal aside, but in my mind,

10
00:00:34,000 --> 00:00:39,000
one of the most important things about testing is noticing that it only gains you confidence.

11
00:00:39,000 --> 00:00:41,000
It's not a proof.

12
00:00:41,000 --> 00:00:44,000
If you have a big program like a web browser and you try it on 10 web pages

13
00:00:44,000 --> 00:00:49,000
and it seems good, that is not a proof that it's always going to work perfectly in the future,

14
00:00:49,000 --> 00:00:52,000
but it does give you more confidence than only trying it on 1 web page.

15
00:00:52,000 --> 00:00:55,000
Probably. It depends on how cool that web page is.

16
00:00:55,000 --> 00:01:00,000
So typically, programs are very big and accept an infinite set of inputs.

17
00:01:00,000 --> 00:01:03,000
There are an infinite number of possible web pages out there.

18
00:01:03,000 --> 00:01:06,000
We know that because the grammar for web pages is recursive

19
00:01:06,000 --> 00:01:08,000
and allows for infinite creativity.

20
00:01:08,000 --> 00:01:12,000
We could write down any work of literature and have it be a web page.

21
00:01:12,000 --> 00:01:14,000
So we're not going to test them all in finite time;

22
00:01:14,000 --> 00:01:17,000
we're only going to gain confidence by testing a few.

23
00:01:17,000 --> 00:01:22,000
And because we can't test everything, we have to pick the things to test well.

24
00:01:22,000 --> 00:01:26,000
Just like in the previous quiz, we don't want to waste time on test cases

25
00:01:26,000 --> 00:01:28,000
that aren't going to get us a debug.

26
00:01:28,000 --> 00:01:30,000
In the real world, in commercial software engineering

27
00:01:30,000 --> 00:01:32,000
testing is a huge cost.

28
00:01:32,000 --> 00:01:38,000
In fact, maintenance often accounts for 90% of the life cycle cost of software.

29
00:01:38,000 --> 00:01:41,000
We spend very little time writing a program originally

30
00:01:41,000 --> 00:01:44,000
and a huge amount of time maintaining it, refactoring it,

31
00:01:44,000 --> 00:01:47,000
making it better in the face of changing ideas of what the users want,

32
00:01:47,000 --> 00:01:49,000
all that sort of thing.

33
00:01:49,000 --> 99:59:59,999
So testing is massive.
