1
00:00:00,090 --> 00:00:02,690
Alright. So I'd like to talk just really briefly about building a test

2
00:00:02,690 --> 00:00:04,840
suite for a piece of software. So test suite is just a collection

3
00:00:04,840 --> 00:00:07,320
of tests. And it's often the case that the test suite can be

4
00:00:07,320 --> 00:00:09,580
run automatically. It's also often the case

5
00:00:09,580 --> 00:00:11,380
that test suite gets run periodically. So

6
00:00:11,380 --> 00:00:13,980
for example, perhaps nightly, on every

7
00:00:13,980 --> 00:00:15,630
commit. Although in many cases that's infeasible,

8
00:00:15,630 --> 00:00:18,620
since, if commits are frequent and the test case is slow. The goal of

9
00:00:18,620 --> 00:00:21,430
a test suite is to show that some software under test has some

10
00:00:21,430 --> 00:00:23,500
desired properties, namely passing all of the

11
00:00:23,500 --> 00:00:25,110
tests. Although it's very common for real

12
00:00:25,110 --> 00:00:28,810
software to almost always be in a state of partial failure. But what

13
00:00:28,810 --> 00:00:31,490
we hope is that most of the time, most of these failures are

14
00:00:31,490 --> 00:00:33,180
not particularly severe ones. So the

15
00:00:33,180 --> 00:00:34,990
question is, if you're maintaining a software

16
00:00:34,990 --> 00:00:37,710
project, what goes into the test suite? And to a large extent, this is

17
00:00:37,710 --> 00:00:40,070
a matter of taste and preference, but on the other hand there's some

18
00:00:40,070 --> 00:00:41,800
pretty common features of nearly all test

19
00:00:41,800 --> 00:00:43,430
suites. It's very common, first of all,

20
00:00:43,430 --> 00:00:46,320
to have a lot of unit tests or at least feature-specific tests that

21
00:00:46,320 --> 00:00:48,570
are small tests that exercise very specialized

22
00:00:48,570 --> 00:00:50,850
behaviors. So, for example, if we're developing

23
00:00:50,850 --> 00:00:54,000
some sort of a web browser, we might have tested effect that different

24
00:00:54,000 --> 00:00:58,190
HTML elements render correctly and that sort of thing. It's also very common

25
00:00:58,190 --> 00:01:01,830
for a test suite to contain large realistic inputs. So, for example, if

26
00:01:01,830 --> 00:01:04,910
we're testing some sort of a microprocessor, maybe we'd boot up Linux and

27
00:01:04,910 --> 00:01:06,700
run it for a couple of hours, and the purpose of these kind

28
00:01:06,700 --> 00:01:10,100
of inputs is to provide realistic stresses on the system. And to exercise

29
00:01:10,100 --> 00:01:12,381
a lot of features and combination. And make sure that things are up

30
00:01:12,381 --> 00:01:15,866
to scuff. It's nearly, always a good idea to include regression tests in

31
00:01:15,866 --> 00:01:17,837
a test suite. Now, regression tests is

32
00:01:17,837 --> 00:01:19,982
basically any input that's cause any version

33
00:01:19,982 --> 00:01:23,070
in the software in the test, to fail at any time. And, there are several

34
00:01:23,070 --> 00:01:26,130
reasons regression tests exist. The main one of which, is we want to make sure

35
00:01:26,130 --> 00:01:28,640
that the software in your test doesn't regress. That is to say that it doesn't

36
00:01:28,640 --> 00:01:31,360
go back into a state in which it fails on a bug that we

37
00:01:31,360 --> 00:01:32,810
already fixed. There are a number of

38
00:01:32,810 --> 00:01:35,050
reasons why that could happen. First of all,

39
00:01:35,050 --> 00:01:36,770
regression tests are useful because whatever the

40
00:01:36,770 --> 00:01:38,350
defect was in the software that caused the

41
00:01:38,350 --> 00:01:41,030
bug in the first place, we might not have gotten rid of all the instances

42
00:01:41,030 --> 00:01:43,790
of that defect in a source code. So, for example, a buggy piece of

43
00:01:43,790 --> 00:01:46,800
code might have been cut and pasted to several other places, and those other

44
00:01:46,800 --> 00:01:48,930
locations might not be causing our system

45
00:01:48,930 --> 00:01:50,970
to fail currently, but some other change

46
00:01:50,970 --> 00:01:54,200
might enable the buggy code to fire, and make the bug happen again. Another

47
00:01:54,200 --> 00:01:56,880
reason is it is pretty easy through, for example, mess ups with the revision

48
00:01:56,880 --> 00:02:00,140
control system. To accidently go back to an old version of a file, before

49
00:02:00,140 --> 00:02:02,450
we fix the bug; if that happens we want to catch it as soon

50
00:02:02,450 --> 00:02:04,360
as possible, because, because some regression test

51
00:02:04,360 --> 00:02:06,600
trips. Third reasons is that defect in software

52
00:02:06,600 --> 00:02:08,419
come from errors in people's thinking, it's

53
00:02:08,419 --> 00:02:09,650
pretty often the case, that the person

54
00:02:09,650 --> 00:02:11,460
who introduce the defect into the software;

55
00:02:11,460 --> 00:02:13,080
didn't actually correct the error that they

56
00:02:13,080 --> 00:02:16,300
had in their thinking. Rather maybe somebody else fix the defect. And the person

57
00:02:16,300 --> 00:02:18,450
retains their mistaken assumption about some sort

58
00:02:18,450 --> 00:02:20,280
of an API or something. And due

59
00:02:20,280 --> 00:02:23,300
to this latent error in somebody's head, they can go ahead and start adding

60
00:02:23,300 --> 00:02:26,700
similar defects to the system later on. And if we have good regression tests,

61
00:02:26,700 --> 00:02:29,030
we stand more of a chance of catching those kind of things. And something

62
00:02:29,030 --> 00:02:31,780
that usually doesn't go into a test suite is a random tester. And for whatever

63
00:02:31,780 --> 00:02:32,790
reason I'm not totally sure that I

64
00:02:32,790 --> 00:02:34,510
understand all the reasons even. Random testing

65
00:02:34,510 --> 00:02:37,270
is often treated as a separate activity. This is related to the fact that random

66
00:02:37,270 --> 00:02:39,120
tests often are non deterministic unless we're

67
00:02:39,120 --> 00:02:40,860
being careful to preserve the same seed. They

68
00:02:40,860 --> 00:02:42,710
don't have a clear correctness criterion. And

69
00:02:42,710 --> 00:02:44,710
perhaps more importantly, random tests always have a

70
00:02:44,710 --> 00:02:46,370
possibility of showing us something new. That

71
00:02:46,370 --> 00:02:47,660
is to say, they have the possibility of

72
00:02:47,660 --> 00:02:48,900
introducing a test case that we haven't

73
00:02:48,900 --> 00:02:50,400
seen before. In fact, that's what we hope

74
00:02:50,400 --> 00:02:51,770
will happen. And the reason that might

75
00:02:51,770 --> 00:02:53,540
be undesirable, is the test suite is supposed

76
00:02:53,540 --> 00:02:56,770
to be predictable. It's supposed to consist of things that we know to test for.

77
00:02:56,770 --> 00:02:58,120
Now, if all of a sudden, the test

78
00:02:58,120 --> 00:03:00,620
starts containing new and different tests, then that's

79
00:03:00,620 --> 00:03:02,970
not necessarily good. So, for whatever combination of

80
00:03:02,970 --> 00:03:05,270
these reasons, random testing is often a separate activity.
