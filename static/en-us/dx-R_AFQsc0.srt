1
00:00:00,170 --> 00:00:02,029
So let's look at another example.

2
00:00:02,029 --> 00:00:05,710
Maybe you say, well, the one I
just gave is not that realistic.

3
00:00:05,710 --> 00:00:08,410
What if everybody takes
the exam at the same time?

4
00:00:08,410 --> 00:00:11,600
Well, that particular attack
will not succeed in that case.

5
00:00:11,600 --> 00:00:14,600
So we're going to craft
a different kind of an attack,

6
00:00:14,600 --> 00:00:19,480
using the same authorized query which
returns the average score on an exam.

7
00:00:19,480 --> 00:00:21,290
So let's say in this case,

8
00:00:21,290 --> 00:00:26,310
we have only one student with
a standing that is junior.

9
00:00:26,310 --> 00:00:29,180
Because the course, let's say,
is a senior course.

10
00:00:29,180 --> 00:00:33,320
And one smart junior student
chose to take it or enroll in it.

11
00:00:33,320 --> 00:00:37,600
So it's a senior class and we only
have one student who is a junior.

12
00:00:37,600 --> 00:00:41,675
It's useful information that we know
where there's groups of students.

13
00:00:41,675 --> 00:00:46,270
Okay, you may ask for the average
scorer, male students, female students,

14
00:00:46,270 --> 00:00:49,740
students who are juniors, students who
are seniors, and things like that.

15
00:00:49,740 --> 00:00:53,960
Because in general, if there are a lot
of junior students, maybe you want to

16
00:00:53,960 --> 00:00:58,268
know how did you perform relative
to your peers who are also juniors.

17
00:00:58,268 --> 00:01:02,810
So let's take the query that says,
which also specifies

18
00:01:02,810 --> 00:01:06,320
the standing of a student, but
it's still asking for average score.

19
00:01:06,320 --> 00:01:07,580
Let's say that's allowed.

20
00:01:07,580 --> 00:01:12,860
So here we get average score of
students when the standing was junior.

21
00:01:12,860 --> 00:01:16,600
So that's where our query says,
where standing equals junior.

22
00:01:16,600 --> 00:01:19,710
In that case, we're still
running the average score query,

23
00:01:19,710 --> 00:01:23,520
so it will take the tuples where
the standing is junior, and

24
00:01:23,520 --> 00:01:26,910
then compute the average on those and
return that value.

25
00:01:26,910 --> 00:01:29,160
Well, that's a problem
if it does do that.

26
00:01:29,160 --> 00:01:33,090
Because in this case, the query's
actually going to disclose the average.

27
00:01:33,090 --> 00:01:36,270
If you're doing average for
one value, then you are actually,

28
00:01:36,270 --> 00:01:38,210
this average discloses the value itself.

29
00:01:38,210 --> 00:01:42,430
So this query, if there's only one
student, of course the result it's

30
00:01:42,430 --> 00:01:46,330
going to return is going to be the score
of the student who had junior standing.

31
00:01:46,330 --> 00:01:50,440
So this is another example
where I think the reason

32
00:01:50,440 --> 00:01:54,830
this happens is that we're computing
the average which is an aggregate,

33
00:01:54,830 --> 00:02:00,220
which is authorized as we said before,
over a small set of tuples for

34
00:02:00,220 --> 00:02:02,900
the exam score values in
tuples that are selected.

35
00:02:02,900 --> 00:02:05,920
In extreme case,
there's only one of these tuples.

36
00:02:05,920 --> 00:02:07,760
And in that case, it's the exact score.

37
00:02:07,760 --> 00:02:12,240
So this query again allows someone to
make an inference, saying the student

38
00:02:12,240 --> 00:02:16,800
who's standing a junior, this, the
average that we get is his or her score.
