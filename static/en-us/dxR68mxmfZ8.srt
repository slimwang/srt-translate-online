1
00:00:00,830 --> 00:00:04,340
Now, actually all these choices sound kind
of weird, don't they?

2
00:00:04,340 --> 00:00:09,980
But the right one is this third one here and
the reason that this actually works,

3
00:00:09,980 --> 00:00:12,290
is if you search using the algorithm that
we've been looking at,

4
00:00:12,290 --> 00:00:16,859
if you search from V1 for something that's
not in the graph at all,

5
00:00:16,859 --> 00:00:20,750
what is going to do it's just going to keep
searching and searching and searching and

6
00:00:20,750 --> 00:00:21,100
searching

7
00:00:21,100 --> 00:00:25,010
and building shortest paths to all the nodes
it encounters along the way

8
00:00:25,010 --> 00:00:28,869
until it discovers that the node that it's
looking for just isn't there.

9
00:00:28,869 --> 00:00:33,290
At the end of that process, every single node
in the graph will have a shortest path

10
00:00:33,290 --> 00:00:39,560
from the--will be notated, annotated with
the shortest path from V1 to that node.

11
00:00:39,560 --> 00:00:44,120
So, the running time here is just the time
it takes to do a single search,

12
00:00:44,120 --> 00:00:47,750
big theta of (n+m) and then you get the answer
for all the nodes in the graph.
