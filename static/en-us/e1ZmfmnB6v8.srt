1
00:00:00,445 --> 00:00:05,240
aria-labelledby is an example of what we
refer to as a relationship attribute.

2
00:00:05,240 --> 00:00:08,750
A relationship attribute creates
some kind of semantic relationship

3
00:00:08,750 --> 00:00:10,000
between elements on the page.

4
00:00:11,020 --> 00:00:13,175
In the case of aria-labelledby,

5
00:00:13,175 --> 00:00:17,262
that relationship is this element
is labeled by that element, or

6
00:00:17,262 --> 00:00:21,222
as the case may be, this element
is labeled by those elements.

7
00:00:21,222 --> 00:00:25,294
The Aria 1.0 spec lists several
relationship attributes,

8
00:00:25,294 --> 00:00:27,940
with a few more coming in at Aria 1.1.

9
00:00:27,940 --> 00:00:31,590
Most Aria relationship attributes
take a reference to one or

10
00:00:31,590 --> 00:00:35,880
more elements to create a new link
between elements on the page.

11
00:00:35,880 --> 00:00:39,270
What differs in each case
is what that link means and

12
00:00:39,270 --> 00:00:40,530
how it is presented to users.

13
00:00:41,560 --> 00:00:45,770
One of the most widely used Aria
relationships is aria-owns.

14
00:00:45,770 --> 00:00:49,800
This allows us to tell assistive
technology that an element, which is

15
00:00:49,800 --> 00:00:54,680
separate in the DOM, should be treated
as a child of the current element,

16
00:00:54,680 --> 00:00:58,540
or to rearrange existing child
elements into a different order.

17
00:00:58,540 --> 00:01:02,200
For example, if a pop-up submenu is
visually positioned near its parent

18
00:01:02,200 --> 00:01:05,410
menu, but cannot be a DOM child of it
because that would affect the visual

19
00:01:05,410 --> 00:01:09,310
presentation, or because the element
is used in several different contexts,

20
00:01:09,310 --> 00:01:14,180
we can use aria-owns to present the
submenu as a child of the parent menu.

21
00:01:14,180 --> 00:01:16,030
In terms of the accessibility tree,

22
00:01:16,030 --> 00:01:20,500
we start off with two menus which
aren't semantically linked in any way.

23
00:01:20,500 --> 00:01:24,096
If the submenu is showing, an assistive
technology user would not be able

24
00:01:24,096 --> 00:01:26,595
to explore into it in
the context of the other menu.

25
00:01:26,595 --> 00:01:28,504
It would appear after the end of it.

26
00:01:28,504 --> 00:01:31,793
[BLANK_AUDIO]

27
00:01:31,793 --> 00:01:36,192
By setting aria-owns on a placeholder
in the top level menu, we can express

28
00:01:36,192 --> 00:01:40,730
the submenu relationship without
affecting the appearance of the submenu.

29
00:01:40,730 --> 00:01:44,221
aria-owns can take a list
of ID references, so

30
00:01:44,221 --> 00:01:49,030
it can also be used to explicitly
specify the order of children.

31
00:01:49,030 --> 00:01:51,300
For example, to rearrange children, or

32
00:01:51,300 --> 00:01:54,626
into live native and
non-native children.

33
00:01:54,626 --> 00:01:59,660
By default, aria-owned children will
come after natively-owned children.

34
00:01:59,660 --> 00:02:03,400
aria-activedescendant plays
a related role.

35
00:02:03,400 --> 00:02:07,045
Just as the active element of
a page is the one which has focus,

36
00:02:07,045 --> 00:02:10,509
setting the active descendant of
an element allows us to tell assistive

37
00:02:10,509 --> 00:02:13,910
technology that when its
parent has page focus,

38
00:02:13,910 --> 00:02:16,790
it should be presented to the user
as the actual focused element.

39
00:02:17,840 --> 00:02:21,480
For example, if we have a list box
widget, we may wish to keep focus

40
00:02:21,480 --> 00:02:25,485
on the list box container, so that it
can receive keyboard events and keep its

41
00:02:25,485 --> 00:02:30,590
aria-activedescendant attribute updated
to the currently selected list item.

42
00:02:30,590 --> 00:02:33,880
This makes the currently selected
item appear to assistive technology

43
00:02:33,880 --> 00:02:36,195
as if it is the focused item.

44
00:02:36,195 --> 00:02:40,690
aria-describedby allows you to provide
an accessible description, in the exact

45
00:02:40,690 --> 00:02:43,940
same way that aria-labelledby
allows you to provide a label.

46
00:02:43,940 --> 00:02:47,420
This is a useful technique whenever
there is some extra explanatory text

47
00:02:47,420 --> 00:02:48,840
that a user might need,

48
00:02:48,840 --> 00:02:53,740
whether that applies to only users of
assistive technology or all users.

49
00:02:53,740 --> 00:02:56,940
One common example is a password input
field, which is accompanied by some

50
00:02:56,940 --> 00:03:01,290
descriptive text explaining
the requirements for a valid password.

51
00:03:01,290 --> 00:03:05,210
Unlike a label, the description may or
may not ever be presented to the user.

52
00:03:05,210 --> 00:03:08,200
They may have a choice of whether
to access it or it may come after

53
00:03:08,200 --> 00:03:11,670
all the other information and
be preempted by something else.

54
00:03:11,670 --> 00:03:15,020
For example, if they start entering
information, their input would be

55
00:03:15,020 --> 00:03:17,620
echoed back and interact with
the description of the element.

56
00:03:18,680 --> 00:03:21,240
So description is a great way
to communicate information,

57
00:03:21,240 --> 00:03:23,680
which is supplementary,
but not essential.

58
00:03:23,680 --> 00:03:26,410
It won't get in the way of other
more essential information,

59
00:03:26,410 --> 00:03:27,700
like the role of the element.

60
00:03:29,290 --> 00:03:30,577
Like aria-labelledby,

61
00:03:30,577 --> 00:03:34,435
aria-describedby may reference elements
which are otherwise not visible,

62
00:03:34,435 --> 00:03:38,480
whether they're hidden from the DOM or
hidden from assistive technology users.

63
00:03:39,500 --> 00:03:42,630
The remaining two relationship
attributes are a little different and

64
00:03:42,630 --> 00:03:43,175
work together.

65
00:03:43,175 --> 00:03:49,060
aria-posinset, short for position inset,
and aria-setsize are about

66
00:03:49,060 --> 00:03:53,000
defining a relationship between sibling
elements in a set, such as a list.

67
00:03:54,020 --> 00:03:58,564
In the case where the size of the full
set cannot be determined by the elements

68
00:03:58,564 --> 00:04:03,108
present in the DOM, such as when lazy
rendering is used to avoid having all of

69
00:04:03,108 --> 00:04:05,735
our large lists in the DOM
at any given time,

70
00:04:05,735 --> 00:04:09,571
aria-setsize can be used to specify
the actual size of the set.

71
00:04:09,571 --> 00:04:14,690
And aria-posinset can be used to specify
the position of the element in the set.

72
00:04:14,690 --> 00:04:18,440
For example, in a set which might
potentially contain 1,000 elements,

73
00:04:18,440 --> 00:04:22,089
I can say that a particular element
has an aria-posinset of 857,

74
00:04:22,089 --> 00:04:25,970
even though it appears first in the DOM.

75
00:04:25,970 --> 00:04:29,894
And then use dynamic HTML techniques
to ensure the user can explore the full

76
00:04:29,894 --> 00:04:30,772
list on demand.

77
00:04:30,772 --> 00:04:34,265
Note that aria-setsize is set
on the items in the set and

78
00:04:34,265 --> 00:04:35,910
not on the set container.
