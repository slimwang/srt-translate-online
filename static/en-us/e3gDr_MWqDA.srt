1
00:00:00,450 --> 00:00:04,570
So here's one way to define make_hashtable. We're going to start by

2
00:00:04,570 --> 00:00:09,710
initializing a variable i = 0. So we're going to start by creating

3
00:00:09,710 --> 00:00:11,940
an empty table and what we want to do is add

4
00:00:11,940 --> 00:00:14,520
n buckets, number of buckets to the table. So we're going to use

5
00:00:14,520 --> 00:00:17,500
a while loop and we're going to loop while i is less

6
00:00:17,500 --> 00:00:20,110
than number of buckets. So each time that I want to go

7
00:00:20,110 --> 00:00:22,000
through the loop what we want to do is add on empty

8
00:00:22,000 --> 00:00:25,770
bucket to our hash table. So we can do that using Append.

9
00:00:25,770 --> 00:00:28,130
That adds a new empty bucket and we need to

10
00:00:28,130 --> 00:00:31,850
remember to increase I to make sure that we don't

11
00:00:31,850 --> 00:00:34,160
keep looping forever. So we're going to go through this

12
00:00:34,160 --> 00:00:38,710
loop nbuckets number of times each time adding an empty bucket

13
00:00:38,710 --> 00:00:41,030
to the table and then we need to return the

14
00:00:41,030 --> 00:00:44,660
table at the end. So let's try that in the Python

15
00:00:44,660 --> 00:00:48,040
interpreter. So here's the code just like we read out

16
00:00:48,040 --> 00:00:50,920
and we'll print out the result of making a hash table.

17
00:00:50,920 --> 00:00:53,670
We'll keep the number of buckets small for printing. For a real

18
00:00:53,670 --> 00:00:56,710
use were going to want to have many more than three buckets. And let's

19
00:00:56,710 --> 00:01:00,330
run that. And we see what we got is a list with

20
00:01:00,330 --> 00:01:04,519
three empty lists as it's elements. So this works okay. It seems like

21
00:01:04,519 --> 00:01:06,980
a lot more code than we need. And it is more code

22
00:01:06,980 --> 00:01:09,210
than we need. There's a better way to write this, which is to

23
00:01:09,210 --> 00:01:11,900
use a four loop. So, the general structure we've seen for four

24
00:01:11,900 --> 00:01:16,000
loops. Alright. We've seen a loop that has, has a structure like this,

25
00:01:16,000 --> 00:01:18,540
where the collection could be a list. It could be

26
00:01:18,540 --> 00:01:22,520
a string. [SOUND] To have a four loop, we need some

27
00:01:22,520 --> 00:01:25,180
set of objects that we're looping through. In this case, what

28
00:01:25,180 --> 00:01:28,150
we want to do is loop through the numbers from 0 to

29
00:01:28,150 --> 00:01:31,510
n buckets minus 1. So we want to create a list

30
00:01:31,510 --> 00:01:34,590
that contains those values. So we, what we would like in

31
00:01:34,590 --> 00:01:36,840
order to be able to define a procedure like make hash

32
00:01:36,840 --> 00:01:41,330
table, is to have a list, which is the numbers from

33
00:01:41,330 --> 00:01:44,530
0 to n buckets minus 1. Python provides an easy

34
00:01:44,530 --> 00:01:47,110
way to do that, its called range. So range takes

35
00:01:47,110 --> 00:01:50,150
two numbers, as inputs. The start and the stop number.

36
00:01:50,150 --> 00:01:53,100
And what it outputs is a list of all the

37
00:01:53,100 --> 00:01:56,830
numbers from start up to stop minus 1. So this

38
00:01:56,830 --> 00:01:59,470
is what ranges outputs, a list of numbers, starting from

39
00:01:59,470 --> 00:02:02,957
start. Increasing by 1, until we get to stop minus

40
00:02:02,957 --> 00:02:06,340
1. We'll note that it doesn't include the value passed

41
00:02:06,340 --> 00:02:08,919
in is the second parameter in the list. This turns

42
00:02:08,919 --> 00:02:11,470
out to be useful because oftentimes when we look through

43
00:02:11,470 --> 00:02:14,390
elements, we don't want to include the last element. So

44
00:02:14,390 --> 00:02:18,310
that means if we evaluated something like range 0,10, the

45
00:02:20,400 --> 00:02:26,250
result would be the list 0,1,2, up to 9. So

46
00:02:26,250 --> 00:02:29,210
now that we know about range. We could change our loop

47
00:02:29,210 --> 00:02:32,160
here. Instead of having this while loop, we could do

48
00:02:32,160 --> 00:02:34,360
the for loop. And we prefer this for two reasons. The

49
00:02:34,360 --> 00:02:36,590
first is it's going to make our code shorter. Anytime we

50
00:02:36,590 --> 00:02:39,130
can make code shorter, that's usually a good thing. The second

51
00:02:39,130 --> 00:02:42,430
is, it saves us from the danger of forgetting to increment

52
00:02:42,430 --> 00:02:45,440
the variable. This is a common mistake, and when we forget

53
00:02:45,440 --> 00:02:47,740
to increment the variable, the loop's just going to run forever. So

54
00:02:47,740 --> 00:02:50,050
if we can write our while loops at for loops, that's usually

55
00:02:50,050 --> 00:02:53,530
a good idea. So a better way to define the catch table

56
00:02:53,530 --> 00:02:56,770
is to use the for loop. We're no longer going to need the

57
00:02:56,770 --> 00:03:00,490
variable i. We still need table and now instead of using a

58
00:03:00,490 --> 00:03:03,400
y loop we're going to use a for loop. We're going to leave the

59
00:03:03,400 --> 00:03:05,780
variable name blank for a second, we'll figure out what to put

60
00:03:05,780 --> 00:03:10,570
there later, and what we're looping through. Is from the range from

61
00:03:10,570 --> 00:03:12,720
0 up to nbuckets. So we want to look through the

62
00:03:12,720 --> 00:03:17,350
elements of the list range to nbuckets. That's going to be the

63
00:03:17,350 --> 00:03:20,800
list of numbers from zero to nbuckets, minus 1. And for

64
00:03:20,800 --> 00:03:25,050
each one of those we want to append, one new bucket to

65
00:03:25,050 --> 00:03:27,540
the table, just like we did before. We don't need

66
00:03:27,540 --> 00:03:29,880
to increment i, there's not i variable now. And at the

67
00:03:29,880 --> 00:03:33,440
end of the loop, we return the table just as before.

68
00:03:33,440 --> 00:03:35,950
For this loop, we didn't actually need a variable here, right?

69
00:03:35,950 --> 00:03:38,550
We never used the variable inside. For this index of the

70
00:03:38,550 --> 00:03:41,320
four loop, well, we still need something here, so I'm just

71
00:03:41,320 --> 00:03:46,280
going to call the variable unused. To make it clear that we

72
00:03:46,280 --> 00:03:48,670
have a name there. We don't actually use it in the body

73
00:03:48,670 --> 00:03:51,100
of the formula. So this makes the code a lot smaller.

74
00:03:51,100 --> 00:03:53,730
It will work the same way as what we had before.

75
00:03:53,730 --> 00:03:57,290
So here's the new code. Several lines shorter than what we

76
00:03:57,290 --> 00:04:01,240
had before. Does exactly the same thing. If you were really clever,

77
00:04:01,240 --> 00:04:03,630
you might have thought of an even shorter way.

78
00:04:03,630 --> 00:04:06,620
To define make hash table, that unfortunately doesn't quite

79
00:04:06,620 --> 00:04:10,140
work. So the shorter way would be to guess,

80
00:04:10,140 --> 00:04:13,300
that the times operator works on list, the same

81
00:04:13,300 --> 00:04:15,680
way it worked on strings. So we could do

82
00:04:15,680 --> 00:04:21,339
this by creating empty list, times nbuckets. This seems

83
00:04:21,339 --> 00:04:23,710
great, it's only one line, really clear and easy

84
00:04:23,710 --> 00:04:26,690
to understand, and it looks like it almost works.

85
00:04:26,690 --> 00:04:30,250
So let's try that in the Python interpreter. And it looks like

86
00:04:30,250 --> 00:04:33,170
it worked, we've got a hash table, a list with three empty

87
00:04:33,170 --> 00:04:37,790
buckets. There's one big problem with this approach, and I'll show you

88
00:04:37,790 --> 00:04:40,340
a hint why it is, and then we'll have a quiz to see

89
00:04:40,340 --> 00:04:42,550
if you can figure out why. So now instead of just printing

90
00:04:42,550 --> 00:04:46,460
out the result. We're going to assign it to a variable called table, and

91
00:04:46,460 --> 00:04:49,220
now we're going to mimic what would happen when we add something to

92
00:04:49,220 --> 00:04:52,760
the hashtable. That means we're going to add something to one of the buckets.

93
00:04:52,760 --> 00:04:56,300
Let's pick bucket one, and let's assume

94
00:04:56,300 --> 00:05:01,470
we're going to add the entry for udacity with

95
00:05:01,470 --> 00:05:03,870
one url. And now we can print out

96
00:05:03,870 --> 00:05:06,950
what's in that bucket. Looks like everything is

97
00:05:06,950 --> 00:05:09,870
okay. What about what's in bucket zero? Now

98
00:05:09,870 --> 00:05:13,420
we get the same result. So, think about

99
00:05:13,420 --> 00:05:17,790
what went wrong. I'm going to ask a quiz to see if you can understand why this

100
00:05:17,790 --> 00:05:21,610
simpler definition of make hash table doesn't actually work correctly.
