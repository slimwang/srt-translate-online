1
00:00:00,320 --> 00:00:04,300
So, I will return back to my code. And here, I will attempt to make

2
00:00:04,300 --> 00:00:09,000
an instance of class Movie, in much the same way we did for class Turtle. I

3
00:00:09,000 --> 00:00:14,340
will start by creating a new Python file. I will then Save this file, in the

4
00:00:14,340 --> 00:00:17,890
same folder as my previous Python file. And

5
00:00:17,890 --> 00:00:23,290
I will call this new file entertainment_center.py. So,

6
00:00:25,720 --> 00:00:27,890
here are my two Python files that I have created

7
00:00:27,890 --> 00:00:30,370
thus far. Here's the first one, where I began to

8
00:00:30,370 --> 00:00:33,740
define the class Movie. It was called media.py. And here

9
00:00:33,740 --> 00:00:37,810
is is the new file called entertainment_center.py. Now, here in

10
00:00:37,810 --> 00:00:42,280
this new file, I will say, import media. Now notice

11
00:00:42,280 --> 00:00:44,480
that this is my media file, which is where I

12
00:00:44,480 --> 00:00:47,350
was beginning to define my Movie class and therefore, with

13
00:00:47,350 --> 00:00:51,480
this line of code, I am telling my program, hey here,

14
00:00:51,480 --> 00:00:56,535
I want to use the contents of my previous Python file. Then I will go on to

15
00:00:56,535 --> 00:01:02,680
say toy_story is equal to media.Movie. So, you may

16
00:01:02,680 --> 00:01:05,590
notice here that media is name of my previous

17
00:01:05,590 --> 00:01:08,220
Python file and Movie is the name of

18
00:01:08,220 --> 00:01:10,730
the class that's defined inside that file. One quick

19
00:01:10,730 --> 00:01:16,510
side note here is that I did not have to create a new file. In fact, I could

20
00:01:16,510 --> 00:01:18,680
have written this entire piece of code right here

21
00:01:18,680 --> 00:01:21,850
in my previous file. But it is good practice to

22
00:01:21,850 --> 00:01:24,840
keep the class definition in one file and to call

23
00:01:24,840 --> 00:01:28,020
your class, or to use your class from another file.

24
00:01:28,020 --> 00:01:30,760
Okay, let's continue. So, there is one thing I

25
00:01:30,760 --> 00:01:34,330
want to highlight here. Which is that this line of

26
00:01:34,330 --> 00:01:37,700
code is pretty similar to how we created the turtle

27
00:01:37,700 --> 00:01:42,010
brad. In both cases, I am saying, some module or

28
00:01:42,010 --> 00:01:45,490
file name dot a class name. Now, the next

29
00:01:45,490 --> 00:01:48,270
thing we have to do is figure out exactly what

30
00:01:48,270 --> 00:01:51,330
happens when we run this line of code. One way

31
00:01:51,330 --> 00:01:53,560
to do that is to remember what happened behind the

32
00:01:53,560 --> 00:01:57,290
scenes. When we created the turtle brad. So, let's

33
00:01:57,290 --> 00:02:00,495
investigate that together. Do you remember what happens when we

34
00:02:00,495 --> 00:02:03,360
run the following line of code? Here are some answer

35
00:02:03,360 --> 00:02:07,410
choices. A function named init is called; it initializes or

36
00:02:07,410 --> 00:02:11,020
creates space in memory for the new instance brad. Or, a

37
00:02:11,020 --> 00:02:15,720
function named D-E-L, or del it's called, it deletes the instance brad.

38
00:02:15,720 --> 00:02:20,134
A function named cmp, or compare is called. It compares the instance

39
00:02:20,134 --> 00:02:23,910
brad to angie, or, I don't know. Tell us what you think.
