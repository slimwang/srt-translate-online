1
00:00:00,330 --> 00:00:03,890
So far the connectors we have been talking about have been simple connectors.

2
00:00:03,890 --> 00:00:07,590
It's also possible to put connectors together; that is, to compose them,

3
00:00:07,590 --> 00:00:09,900
make it more complex connectors.

4
00:00:09,900 --> 00:00:13,265
One example I'd like to give is a science data server.

5
00:00:13,265 --> 00:00:14,460
Whether you're aware of it or

6
00:00:14,460 --> 00:00:17,680
not, there's lots of data being generated out there.

7
00:00:17,680 --> 00:00:21,050
Think of all the land sat photographs being taken.

8
00:00:21,050 --> 00:00:25,550
Using different frequencies of light they can record all kinds of

9
00:00:25,550 --> 00:00:28,520
information that's stored away on data servers.

10
00:00:30,200 --> 00:00:32,189
Then there are clients for these servers.

11
00:00:32,189 --> 00:00:34,380
The clients may be synchronous or asynchronous.

12
00:00:34,380 --> 00:00:36,310
That is, they may have specific requests or

13
00:00:36,310 --> 00:00:39,340
they might want to get a stream of data themselves.

14
00:00:39,340 --> 00:00:43,980
Okay, and we need to be able to build a composite connector to provide this

15
00:00:43,980 --> 00:00:45,470
overall capability.

16
00:00:45,470 --> 00:00:49,270
It may involve event connectors, data acc, certainly will involve data

17
00:00:49,270 --> 00:00:53,310
access connectors might be streaming of data, and it might be distribution.

18
00:00:53,310 --> 00:00:59,800
There are different policies that we might want to enforce for delivery.

19
00:01:00,930 --> 00:01:05,150
We might, we almost certainly will have multiple producers and consumers.

20
00:01:05,150 --> 00:01:10,360
There's going to be almost certainly some data transformation going on and

21
00:01:10,360 --> 00:01:13,620
the access may be public or it may be, may be private, okay?

22
00:01:13,620 --> 00:01:15,050
It may be transient, or

23
00:01:15,050 --> 00:01:19,780
it may be persistent, persistent depending upon the policy of the data server.

24
00:01:19,780 --> 00:01:23,680
It might be packaged into streams or it might be packetized, okay?

25
00:01:23,680 --> 00:01:25,090
And there might be a naming registry involved so

26
00:01:25,090 --> 00:01:32,450
that they information can be accessed via a specific query.

27
00:01:32,450 --> 00:01:37,020
Another example of a composite connector are various FTP applications,

28
00:01:37,020 --> 00:01:39,910
such as Globus, bbFTP, and GridFTP.

29
00:01:39,910 --> 00:01:43,510
These combine procedure call, data access, steam, and

30
00:01:43,510 --> 00:01:46,630
distributor simple connectors.

31
00:01:46,630 --> 00:01:50,120
Therefore moving and distributing large amounts of grid data.

32
00:01:50,120 --> 00:01:52,690
Could be hierarchically or flatly named.

33
00:01:52,690 --> 00:01:54,340
Typically synchronous.

34
00:01:54,340 --> 00:01:59,018
Using web protocols such as SOAP might involve time-outs,

35
00:01:59,018 --> 00:02:04,390
authentication would prevent unwanted access to the data.

36
00:02:04,390 --> 00:02:05,540
There's parameter passing.

37
00:02:06,540 --> 00:02:07,600
The data might be transient or

38
00:02:07,600 --> 00:02:11,270
it might be persistent might be public or it might be private.

39
00:02:11,270 --> 00:02:14,200
And it might be at the level of byte stream or

40
00:02:14,200 --> 00:02:16,690
the underlying bytes might be raw or structured.

41
00:02:16,690 --> 00:02:20,711
Probably one exactly-once deliver, a bounded buffering, and

42
00:02:20,711 --> 00:02:24,290
unicast, that is, point to point transmission.

43
00:02:24,290 --> 00:02:29,110
The third example of a composite connector is client-server based distributed

44
00:02:29,110 --> 00:02:35,030
distribution connectors that involve things like REST architectural style,

45
00:02:35,030 --> 00:02:36,080
HTTP protocol.

46
00:02:36,080 --> 00:02:37,829
Remote messaging vocation.

47
00:02:37,829 --> 00:02:42,097
CORBA, FTP, SOAP, this particular kind of connector,

48
00:02:42,097 --> 00:02:47,654
kind of composite connector might use procedure call connectors, data access,

49
00:02:47,654 --> 00:02:50,565
stream and distributor connectors.

50
00:02:50,565 --> 00:02:54,488
Involve revoke procedure call, would name parameters, persistent and

51
00:02:54,488 --> 00:02:59,430
transient data, and naming registry, and typically unicast type connections.

52
00:02:59,430 --> 00:03:02,100
The final example of composite connector is peer to

53
00:03:02,100 --> 00:03:05,470
peer based data distribution connector such as BitTorrent.

54
00:03:05,470 --> 00:03:09,040
Here there is a combination of arbitrator, data access, stream, and

55
00:03:09,040 --> 00:03:10,498
distributor connectors.

56
00:03:10,498 --> 00:03:17,740
Typically peer-to-peer is, major facility is controlling the flow of, of things.

57
00:03:17,740 --> 00:03:19,310
And that is, control flow redirection.

58
00:03:19,310 --> 00:03:21,150
If one of the peers is not available,

59
00:03:21,150 --> 00:03:23,690
you go to another peer to provide the information.

60
00:03:23,690 --> 00:03:27,400
There may be negotiation of protocols, scheduling and timing.

61
00:03:27,400 --> 00:03:28,730
There may be voting involved,

62
00:03:28,730 --> 00:03:35,360
depending upon circumstances might use either rendezvous or transactions.

63
00:03:35,360 --> 00:03:37,200
The data may be transient or persistent.

64
00:03:38,290 --> 00:03:41,350
typically, streams are what's what, what's used.

65
00:03:41,350 --> 00:03:43,168
They may be buffering involved.

66
00:03:43,168 --> 00:03:49,270
And for these types of applications, typically it's at least one semantics.

67
00:03:49,270 --> 00:03:50,720
You don't want to deliver more than once
