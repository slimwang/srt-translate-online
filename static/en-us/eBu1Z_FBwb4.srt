1
00:00:00,420 --> 00:00:04,130
We're going to define Fibonacci, so here's

2
00:00:04,130 --> 00:00:07,360
our definition, and let's try this out, so

3
00:00:07,360 --> 00:00:10,850
we'll print the result of fibonacci 0, first,

4
00:00:10,850 --> 00:00:14,094
we should get 0, which we do. We'll

5
00:00:14,094 --> 00:00:19,870
try fibonacci 1, we get 1, so we've seen our two base cases. Now, when

6
00:00:19,870 --> 00:00:25,598
we do fibonacci 2, what we should get is the result of. Fibonacci 1, which is 1,

7
00:00:25,598 --> 00:00:30,290
plus Fibonacci 2, minus 2, which is Fibonacci 0, which

8
00:00:30,290 --> 00:00:35,128
is 0. So we should get 1 again, which we do. And now

9
00:00:35,128 --> 00:00:40,810
let's try printing Fibonacci 3, we get 2.

10
00:00:40,810 --> 00:00:45,690
And if we print Fibonacci 4 we should

11
00:00:45,690 --> 00:00:50,820
get 1 plus 2, which is 3, which we get. And if we try 5,

12
00:00:50,820 --> 00:00:59,950
we should get 2 plus 3, which is 5. And let's try something a little bigger,

13
00:01:02,410 --> 00:01:06,550
let's try Fibonacci 10. We get 55. We'll try

14
00:01:08,890 --> 00:01:15,240
Fibonacci 25, so we'll try Fibonacci 24. So for counting months that would be

15
00:01:15,240 --> 00:01:22,190
the number of rabbits in two years, and we get 46,000. And let's try, in 3

16
00:01:22,190 --> 00:01:26,230
years. Our program times out. So I'm

17
00:01:26,230 --> 00:01:28,750
going to try the soon in the Python interpreter,

18
00:01:28,750 --> 00:01:30,180
well see we can do slightly bigger ones.

19
00:01:31,180 --> 00:01:34,330
But, the time it takes to solve Fibonacci,

20
00:01:34,330 --> 00:01:38,210
this way, is very long. And, the reason

21
00:01:38,210 --> 00:01:40,010
for that is because we're doing lots and lots

22
00:01:40,010 --> 00:01:42,830
of redundant calculation. So, if we look at

23
00:01:42,830 --> 00:01:46,620
what our code is doing. Every time, we call

24
00:01:46,620 --> 00:01:49,960
Fibonacci n, what's happening is we're calling Fibonacci

25
00:01:49,960 --> 00:01:52,680
n minus 1 and we're calling Fibonacci n minus

26
00:01:52,680 --> 00:01:56,090
2. So we're starting, we're calling Fibonacci 36,

27
00:01:56,090 --> 00:01:59,520
that was the example, where the interpreter didn't finish.

28
00:01:59,520 --> 00:02:02,250
And, what we'll get is that's going to

29
00:02:02,250 --> 00:02:06,980
be broken down into calling fibonacci 35, plus

30
00:02:06,980 --> 00:02:09,008
the result that we get from calling fibonacci

31
00:02:09,008 --> 00:02:11,970
34. Each of those is another call to

32
00:02:11,970 --> 00:02:15,180
fibonacci, so the call to fibonacci 35, well

33
00:02:15,180 --> 00:02:19,080
that will be broken into calling fibonacci 34,

34
00:02:19,080 --> 00:02:24,960
and adding that result to what we get from calling fibonacci 33. And when we do

35
00:02:24,960 --> 00:02:28,340
fibonacci 34 here. Well, that's going to be turned into,

36
00:02:28,340 --> 00:02:32,590
calling Fibonacci 33, and adding the result to Fibonacci 32.

37
00:02:32,590 --> 00:02:35,570
We're going to do lots, and lots, of calculations here.

38
00:02:35,570 --> 00:02:38,670
And we haven't got close to getting down, to fibo

39
00:02:38,670 --> 00:02:40,840
1, or fibo 0, which are the only places

40
00:02:40,840 --> 00:02:43,030
that we stop. If we look at the number of

41
00:02:43,030 --> 00:02:46,780
times we have to evaluate, fibo 32, let's pick

42
00:02:46,780 --> 00:02:50,440
that one, so Fibonacci 32. So we need to evaluate,

43
00:02:50,440 --> 00:02:55,130
Fibonacci 32, 1, 2, 3, 4, 5, times. The number of times we had to evaluate,

44
00:02:55,130 --> 00:03:01,280
Fibonacci 33, was 1, 2, 3, times The

45
00:03:01,280 --> 00:03:04,875
number of times we had to evaluate Fibonacci

46
00:03:04,875 --> 00:03:10,860
34 was 2 times, and the number of times we had to evaluate fibonacci 35,

47
00:03:10,860 --> 00:03:15,340
was 1 time, and the number of times we had to evaluate fibonacci 36 was 1 time.

48
00:03:15,340 --> 00:03:19,250
So, maybe you can see a pattern here. How many times

49
00:03:19,250 --> 00:03:22,203
do you think we're going to need to evaluate fibonacci 31?
