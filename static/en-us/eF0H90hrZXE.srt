1
00:00:00,240 --> 00:00:03,650
The really important thing here is that
policy iteration does not get stuck in

2
00:00:03,650 --> 00:00:04,550
the local optimum.

3
00:00:04,550 --> 00:00:07,880
That is to say if there's any way to
improve it will actually improve.

4
00:00:07,880 --> 00:00:09,890
It won't get stuck before.

5
00:00:09,890 --> 00:00:14,480
So, the important step in the proof for
that is actually back one slide when

6
00:00:14,480 --> 00:00:18,220
we talked about value non deprovement or
what I called value improvement.

7
00:00:18,220 --> 00:00:20,230
So I went back a slide so
we could look at this together.

8
00:00:21,980 --> 00:00:23,830
So, this is the claim that I'm making,
Charles.

9
00:00:25,150 --> 00:00:30,640
If it's the case that pi 1 is optimal,
than the greedy policy

10
00:00:30,640 --> 00:00:36,980
pi 2 with respect to the fixed point
of pie 1, is going to be the same.

11
00:00:36,980 --> 00:00:39,200
We're actually going to be
stuck at the fixed point.

12
00:00:39,200 --> 00:00:41,690
Because that's the whole
thing about a fixed point.

13
00:00:41,690 --> 00:00:46,170
But if it's not, if it's not then there
has to be at least one state someplace

14
00:00:46,170 --> 00:00:50,140
where this value non-deprovement
is actually value improvement,

15
00:00:50,140 --> 00:00:52,970
like strict value improvement for
some state.

16
00:00:52,970 --> 00:00:53,590
Like that.

17
00:00:53,590 --> 00:00:54,340
>> I see.

18
00:00:54,340 --> 00:00:59,930
So what's really going on here is
we should be more precise, maybe,

19
00:00:59,930 --> 00:01:03,100
about what value improvement really
means, what value non-deprovement means.

20
00:01:03,100 --> 00:01:04,930
>> Okay.
>> We're talking about it.

21
00:01:04,930 --> 00:01:07,620
Every time we talk about it, we talk
about it in terms of one value function

22
00:01:07,620 --> 00:01:10,590
better than another so
it's easy to think of it that way.

23
00:01:10,590 --> 00:01:14,510
But if that were the case,
then I could have sort of cycles, right,

24
00:01:14,510 --> 00:01:18,410
where You know I have two states where I
keep on each iteration swapping back and

25
00:01:18,410 --> 00:01:20,380
forth, which one is better
than the other, and

26
00:01:20,380 --> 00:01:22,530
you'd still have domination
in both cases, right?

27
00:01:22,530 --> 00:01:24,270
Does that make sense, what I just said?

28
00:01:24,270 --> 00:01:27,140
>> Wait, no, because domination
is point wise, it's state wise.

29
00:01:27,140 --> 00:01:29,580
>> Yes it is statewise, but
imagine I had two states,

30
00:01:29,580 --> 00:01:30,930
let's call them S1 and S2.

31
00:01:30,930 --> 00:01:36,100
And let's say for one particular value
function, if I were going to compare,

32
00:01:36,100 --> 00:01:39,920
let's say Q1 and Q2 or V1 and
V2, going to compare V1 and V2.

33
00:01:39,920 --> 00:01:45,800
It turns out that in S1 V1
is greater than it is in V2.

34
00:01:45,800 --> 00:01:48,280
So just making up some numbers.

35
00:01:48,280 --> 00:01:50,900
Right in the other
case they're the same.

36
00:01:50,900 --> 00:01:51,820
>> The same.

37
00:01:51,820 --> 00:01:52,770
>> Yeah.
>> Okay.

38
00:01:52,770 --> 00:01:55,110
>> Then I could apply
an operator to both of them.

39
00:01:55,110 --> 00:01:58,230
It would also be the case, so
here V1 dominates V2, right?

40
00:01:58,230 --> 00:01:58,960
>> Right.
>> So

41
00:01:58,960 --> 00:02:02,650
here's another set of numbers I could
write down where V1 still dominates V2.

42
00:02:02,650 --> 00:02:04,890
>> Okay.
>> So rewrite the S1 and

43
00:02:04,890 --> 00:02:06,050
S2 again underneath.

44
00:02:06,050 --> 00:02:07,770
>> All right, so V1 still dominates V2.

45
00:02:07,770 --> 00:02:12,480
>> Right, so V1 still dominates V2
if I just swap the two rows around.

46
00:02:12,480 --> 00:02:16,150
And, so if you weren't thinking
carefully about what value improvement

47
00:02:16,150 --> 00:02:19,550
or value non-deprovement meant, you
would think that you could just go back

48
00:02:19,550 --> 00:02:25,060
and forth between these two different
values where 10, 6 and 3, 3, those

49
00:02:25,060 --> 00:02:29,270
rows sort of swap, because in both cases
you're still getting V1 dominating V2.

50
00:02:29,270 --> 00:02:33,580
But it's actually the case that the way
this value improvement works, is that

51
00:02:33,580 --> 00:02:38,030
it's true not just for the overall value
functions, it's true at every state.

52
00:02:39,750 --> 00:02:46,230
>> Oh I see, yes it can't be the case
that we go from V 1 S 1 being ten,

53
00:02:46,230 --> 00:02:51,830
to V 1 S 1 being three,
because it's actually non-deproving.

54
00:02:51,830 --> 00:02:54,040
>> Right.
>> In other words, we can't go down,

55
00:02:54,040 --> 00:02:55,410
we can stay the same but
we can't go down.

56
00:02:55,410 --> 00:03:01,040
>> Right, so the statement has to
be the case for all the states,

57
00:03:01,040 --> 00:03:03,480
as well as the overall set of states.

58
00:03:03,480 --> 00:03:08,430
So once V1 is better
than V2 in some state,

59
00:03:08,430 --> 00:03:10,370
it basically has to stay that way.

60
00:03:10,370 --> 00:03:10,870
>> Got it.
>> So

61
00:03:10,870 --> 00:03:12,700
this keeps us from cycling back and
forth.

62
00:03:12,700 --> 00:03:18,411
And this is what keeps us
from getting locally stuck.

63
00:03:18,411 --> 00:03:19,293
That's my claim.

64
00:03:19,293 --> 00:03:20,090
>> Okay.

65
00:03:20,090 --> 00:03:22,780
All right so
local stuckness doesn't happen.

66
00:03:22,780 --> 00:03:26,350
And in particular we get strict value
improvement in at least one state

67
00:03:26,350 --> 00:03:29,420
if we haven't actually reached
the fix point yet, and

68
00:03:29,420 --> 00:03:32,380
therefore each time we go through
policy iteration it's actually getting

69
00:03:32,380 --> 00:03:34,250
better until it can't
get better anymore.

70
00:03:34,250 --> 00:03:37,570
So one other interesting thing to point
out, is that the number of policies,

71
00:03:37,570 --> 00:03:40,790
each time that we go through
an iteration of policy iteration.

72
00:03:40,790 --> 00:03:43,160
We have a new deterministic policy.

73
00:03:43,160 --> 00:03:47,230
There's just a finite number of them,
therefore; at some point we exhaust

74
00:03:47,230 --> 00:03:49,390
the set of possible
improvements that we can make.

75
00:03:49,390 --> 00:03:51,370
And we have to have found
the optimal policy.

76
00:03:51,370 --> 00:03:52,630
>> You know what that reminds me of?

77
00:03:52,630 --> 00:03:53,480
>> Yeah
>> Oh

78
00:03:53,480 --> 00:03:54,310
so
>> Okay.

79
00:03:54,310 --> 00:03:56,800
>> Reminds me of the proof we had for

80
00:03:56,800 --> 00:03:59,400
YK means how to convert
>> Oh, yes, yes, yes.

81
00:03:59,400 --> 00:04:00,620
It's exactly the same argument.

82
00:04:00,620 --> 00:04:03,300
When we talked about
k-means in the other class,

83
00:04:03,300 --> 00:04:07,660
we talked about how there's a finite
set of assignments that can be made and

84
00:04:07,660 --> 00:04:09,610
each time you do
an iteration of k-means,

85
00:04:09,610 --> 00:04:14,050
we get either the same assignment or
one that has a better score and

86
00:04:14,050 --> 00:04:16,310
therefore, we're going to find
the one with the best score.

87
00:04:16,310 --> 00:04:18,380
>> Well, we're going to find a one
that doesn't change anymore.

88
00:04:18,380 --> 00:04:21,170
But the difference
between k-means proof and

89
00:04:21,170 --> 00:04:24,414
this, is that you could get
stuck in a local optimum.

90
00:04:24,414 --> 00:04:25,457
>> In K-means.

91
00:04:25,457 --> 00:04:27,040
>> K-means, but here you can.

92
00:04:27,040 --> 00:04:30,745
And I think the big difference is that
you basically, it's statement of value

93
00:04:30,745 --> 00:04:35,920
non-deprovement is, at every single
point, every single state, in this case.

94
00:04:35,920 --> 00:04:39,130
Where as with K-means,
that wasn't necessarily the case.

95
00:04:39,130 --> 00:04:39,630
Okay, super.

96
00:04:39,630 --> 00:04:42,750
So do you feel like your
grokking policy iteration now?

97
00:04:42,750 --> 00:04:45,640
>> Yeah, in particular I'm grokking
that it actually kind of has to work.

98
00:04:45,640 --> 00:04:46,980
That's sort of cool.

99
00:04:46,980 --> 00:04:48,970
>> Cool, I think we can sum up then.

100
00:04:48,970 --> 00:04:49,980
>> Let's sum up.
I like summing up.
