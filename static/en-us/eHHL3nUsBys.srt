1
00:00:00,290 --> 00:00:02,920
Now we turn to another problem
that we'll be able to tackle

2
00:00:02,920 --> 00:00:07,120
with the dynamic programming paradigm,
chain matrix multiplication.

3
00:00:07,120 --> 00:00:11,810
>> We are given a sequence of
matrices of sizes m0 by m1, m1 by m2,

4
00:00:11,810 --> 00:00:14,120
and so forth.

5
00:00:14,120 --> 00:00:17,889
And we want to compute the product
A1 through An efficiently.

6
00:00:19,230 --> 00:00:21,660
Note how the dimensions
here are arranged so

7
00:00:21,660 --> 00:00:24,750
that such a product is always defined.

8
00:00:24,750 --> 00:00:27,830
The number of columns in one matrix
always matches the number of

9
00:00:27,830 --> 00:00:28,630
rows in the next.

10
00:00:29,700 --> 00:00:35,610
First, recall that the product of a m by
n matrix with an n by p matrix produces

11
00:00:35,610 --> 00:00:41,050
a matrix that is m by p, and that
the cost of computing each entry is n.

12
00:00:42,430 --> 00:00:46,730
Each entry can be thought of as the dot
product between the corresponding row

13
00:00:46,730 --> 00:00:51,350
of the first matrix, and
the corresponding column of the second.

14
00:00:51,350 --> 00:00:53,690
Both these vectors have n entries.

15
00:00:53,690 --> 00:00:57,900
In total, we have about m
times n times p additions, and

16
00:00:57,900 --> 00:00:59,810
as many multiplications.

17
00:00:59,810 --> 00:01:03,660
Next, recall that matrix
multiplication is associative.

18
00:01:03,660 --> 00:01:07,350
Thus, as far as the answer goes, it
doesn't matter whether I multiply A and

19
00:01:07,350 --> 00:01:10,760
B first and
then multiply that product by C.

20
00:01:10,760 --> 00:01:14,660
Or if I multiplied B and C first and
then multiplied that product by A.

21
00:01:15,680 --> 00:01:18,390
The product of all these
three will be the same, but

22
00:01:18,390 --> 00:01:20,810
the number of operations may not be.

23
00:01:20,810 --> 00:01:21,910
Lets see this with an example.

24
00:01:21,910 --> 00:01:25,340
We will take matrices with
these dimensions here and

25
00:01:25,340 --> 00:01:29,340
count the number of multiplications
using both of these strategies.

26
00:01:29,340 --> 00:01:37,470
If we multiply A and B first, then we
spend 50 times 20 times 50 computing AB.

27
00:01:37,470 --> 00:01:41,718
This matrix will have 50 rows and
50 columns, so

28
00:01:41,718 --> 00:01:48,509
its product with C will take 50 times
50 times 1, for a total of 52,500.

29
00:01:48,509 --> 00:01:55,930
On the other hand, if we multiply B and
C first, this costs 20 times 50 times 1.

30
00:01:55,930 --> 00:01:59,390
This produces a 20 by 1 matrix.

31
00:01:59,390 --> 00:02:03,940
And multiplying it by a costs
50 times 20 times 1, for

32
00:02:03,940 --> 00:02:09,400
a total of only 2,000,
a big improvement.

33
00:02:09,400 --> 00:02:12,580
So it's important to be clever
about which order we choose for

34
00:02:12,580 --> 00:02:13,930
multiplying these matrices.
