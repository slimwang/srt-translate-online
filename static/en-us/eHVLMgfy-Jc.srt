1
00:00:00,580 --> 00:00:03,610
Okay, to illustrate the operation of the LSQ we will

2
00:00:03,610 --> 00:00:06,388
do an example. So here I have a loadster Q,

3
00:00:06,388 --> 00:00:09,226
where this is the oldest instruction and this is the

4
00:00:09,226 --> 00:00:13,510
youngest instruction in the Q. Note that the Q is storing

5
00:00:13,510 --> 00:00:17,220
instructions in the correct program order, so basically in program

6
00:00:17,220 --> 00:00:19,950
order this was the first load, this was the second

7
00:00:19,950 --> 00:00:22,780
instruction and so on. This says whether it's a load

8
00:00:22,780 --> 00:00:25,717
or a store. This tells us what address the load or

9
00:00:25,717 --> 00:00:28,930
store was fetched from. This is the sequence number.

10
00:00:28,930 --> 00:00:32,441
Basically, just, going up. And, this is the address

11
00:00:32,441 --> 00:00:37,625
to which the load or a store resolves to, and this is the value that we will get

12
00:00:37,625 --> 00:00:40,490
for that load of store. And let's say that

13
00:00:40,490 --> 00:00:43,032
this is the content of the data cache. Let's

14
00:00:43,032 --> 00:00:46,718
say that the initial content of the data cache

15
00:00:46,718 --> 00:00:50,695
is 42 here, 1 here, 38 here, and 1, 2,

16
00:00:50,695 --> 00:00:55,406
3, 4 here. This load goes first, axises address

17
00:00:55,406 --> 00:00:59,102
3290, which is this one, and loads the value

18
00:00:59,102 --> 00:01:02,310
of 42. Let's say now that this store here,

19
00:01:02,310 --> 00:01:05,980
computes its result,. It basically gets the value it's going to

20
00:01:05,980 --> 00:01:09,160
store. Let's say that it gets 25. Note that

21
00:01:09,160 --> 00:01:11,150
this store doesn't really put that value yet in

22
00:01:11,150 --> 00:01:13,150
the cash. That will happen when it commits. So

23
00:01:13,150 --> 00:01:15,710
this is only that we have gotten the value from

24
00:01:15,710 --> 00:01:18,320
the instruction that produces the register that we will

25
00:01:18,320 --> 00:01:21,700
use as our source value to storing memory. Let's

26
00:01:21,700 --> 00:01:23,720
say that this next load also gets a value

27
00:01:23,720 --> 00:01:27,280
of -16 this time. Now let's say that this load

28
00:01:27,280 --> 00:01:32,610
executes next, accesses the address 3418, and it tries

29
00:01:32,610 --> 00:01:35,110
to see whether any of the previous stores matches that

30
00:01:35,110 --> 00:01:37,750
address. They don't, so it loads the value from

31
00:01:37,750 --> 00:01:40,965
memory. This is the address in the cache that matches

32
00:01:40,965 --> 00:01:47,256
this, so we're going to get 1, 2, 3, 4. Next, this load tries to load a value,

33
00:01:47,256 --> 00:01:53,052
it has the address of 3290, it's going to search upward for the latest

34
00:01:53,052 --> 00:01:56,548
store that still precedes it that matches the

35
00:01:56,548 --> 00:02:00,940
address. And it finds one. This store is

36
00:02:00,940 --> 00:02:03,680
having the address of 3290. So instead of

37
00:02:03,680 --> 00:02:06,030
going to the cache, we are directly going to

38
00:02:06,030 --> 00:02:09,199
copy just the value of minus 17 here. So

39
00:02:09,199 --> 00:02:11,360
now we actually had a load that never really accesses

40
00:02:11,360 --> 00:02:13,090
the cache, it just gets the value from the

41
00:02:13,090 --> 00:02:18,580
store. The next load accesses address 3300. It searches the

42
00:02:18,580 --> 00:02:21,360
previous stores and doesn't find any that match this

43
00:02:21,360 --> 00:02:24,250
address. So it's going to go to the cache and load

44
00:02:24,250 --> 00:02:28,190
from address 3300. And it gets 1. Next, we

45
00:02:28,190 --> 00:02:31,363
have another store to 3290. Let's say that the value

46
00:02:31,363 --> 00:02:34,430
stored there is now 0. Next we have a load

47
00:02:34,430 --> 00:02:38,686
from 3410, it searches the previous accesses for a store that

48
00:02:38,686 --> 00:02:41,954
matches this address and it finds one over here, so

49
00:02:41,954 --> 00:02:45,045
it just copies the value of 25. So again, we have

50
00:02:45,045 --> 00:02:47,575
a load that never accesses the cache because it founded

51
00:02:47,575 --> 00:02:50,700
what it needed in the Load-Store Queue. Next we have a

52
00:02:50,700 --> 00:02:54,080
load to 3290. It searches the load store queue to

53
00:02:54,080 --> 00:02:56,550
find a store that matches this address and it finds one

54
00:02:56,550 --> 00:02:59,490
over here. So it just copies the value of 0

55
00:02:59,490 --> 00:03:03,640
here. Noted by now, there have been several stores to

56
00:03:03,640 --> 00:03:06,510
3290. We always want to get the value from the

57
00:03:06,510 --> 00:03:09,946
most recent one that still proceeds us. Because if things were

58
00:03:09,946 --> 00:03:12,570
happening in order one at a time, this is exactly

59
00:03:12,570 --> 00:03:16,020
what the value should be in the memory location. Note,

60
00:03:16,020 --> 00:03:18,970
however, that the memory location, as far as the cache

61
00:03:18,970 --> 00:03:21,580
and the memory are concerned, still contains the value of 42

62
00:03:21,580 --> 00:03:24,110
at this time, although there have been several modifications.

63
00:03:24,110 --> 00:03:26,860
Why? Well, because the stores haven't sent the values

64
00:03:26,860 --> 00:03:29,570
to the data cache yet. And finally, we have

65
00:03:29,570 --> 00:03:35,150
another load to, 3300. It searches backward to find any

66
00:03:35,150 --> 00:03:38,120
stores to the same address. Note that this is

67
00:03:38,120 --> 00:03:40,824
a load. We don't do that. So there're no

68
00:03:40,824 --> 00:03:43,476
stores to this same address so we actually load

69
00:03:43,476 --> 00:03:47,030
the value from the cache, and the value is 1.

70
00:03:47,030 --> 00:03:49,270
Now let's say that at some point, the

71
00:03:49,270 --> 00:03:52,320
loads and stores start committing. So we will

72
00:03:52,320 --> 00:03:55,610
have this load commit. A load commits by

73
00:03:55,610 --> 00:04:00,400
simply copying the value to the register file. And

74
00:04:00,400 --> 00:04:03,210
now, the oldest pointer is here. This store

75
00:04:03,210 --> 00:04:05,510
commits by putting the value in the cache.

76
00:04:05,510 --> 00:04:12,190
So, now we take the value of 25 and put it in address 3410, so we overwrite

77
00:04:12,190 --> 00:04:15,400
this 38 with 25, and now the store can

78
00:04:15,400 --> 00:04:19,214
commit. .And our pointer moves here, we commit another

79
00:04:19,214 --> 00:04:22,058
store here, so the value of minus 17 goes

80
00:04:22,058 --> 00:04:25,534
to location 3290, so we override this 42 with

81
00:04:25,534 --> 00:04:29,470
17. Now our store is committed, we move the

82
00:04:29,470 --> 00:04:32,570
pointer here. If you remember, we said that we

83
00:04:32,570 --> 00:04:34,910
need to send the values to the memory or

84
00:04:34,910 --> 00:04:37,430
the data cache at the time the store commits

85
00:04:37,430 --> 00:04:40,382
not at the time it executes. Here's why, if at

86
00:04:40,382 --> 00:04:43,766
this point we decide that we are taking an exception, we

87
00:04:43,766 --> 00:04:47,150
can just flush this from the lowest queue, and the value

88
00:04:47,150 --> 00:04:50,246
in the data cache in memory is exactly the value that

89
00:04:50,246 --> 00:04:53,900
should be there as of this point in the program execution.

90
00:04:53,900 --> 00:04:56,693
So just like we had our architecture register file, and we

91
00:04:56,693 --> 00:04:59,600
were copying values and commit into it for register; so that

92
00:04:59,600 --> 00:05:02,507
at any given time we know exactly what the committed register

93
00:05:02,507 --> 00:05:05,846
value are. Similarly, at any given time, we

94
00:05:05,846 --> 00:05:08,288
have in our data cache in memory exactly

95
00:05:08,288 --> 00:05:10,980
what is there as of the commit point.

96
00:05:10,980 --> 00:05:14,420
This process will now go on. The load commits

97
00:05:14,420 --> 00:05:17,010
and deposits its value in it's register. Another

98
00:05:17,010 --> 00:05:20,568
load can commit and another one. When the store

99
00:05:20,568 --> 00:05:23,158
commits, it overrides this 17 with a 0

100
00:05:23,158 --> 00:05:27,620
and then the loads commit. And the final content

101
00:05:27,620 --> 00:05:28,690
of the cache is this.
