1
00:00:00,230 --> 00:00:02,660
A good exercise for understanding the perils of deadlock

2
00:00:02,660 --> 00:00:06,190
Its the famous Dining Philosophers Problem originally posed by Dijkstra.

3
00:00:06,190 --> 00:00:09,862
There are five philosophers setting around the table. Plato,

4
00:00:09,862 --> 00:00:13,670
Aristotle, Rousseau, Nietzsche, and Allen Bloom would be my choice.

5
00:00:13,670 --> 00:00:16,104
And being philosophers, they like to think. But they

6
00:00:16,104 --> 00:00:18,916
also have to eat every now and again. Each philosopher

7
00:00:18,916 --> 00:00:21,175
gets his own rice bowl. But there are only

8
00:00:21,175 --> 00:00:25,630
five chopsticks. One made between each pair of neighboring philosophers.

9
00:00:25,630 --> 00:00:28,420
For permission to eat, a philosopher has to pick up the

10
00:00:28,420 --> 00:00:31,780
chopsticks on either side of him. For permission to think, he

11
00:00:31,780 --> 00:00:34,280
places the chopsticks back in their place for his neighbors to

12
00:00:34,280 --> 00:00:38,070
use. The main loop for a thread representing a philosopher therefore,

13
00:00:38,070 --> 00:00:41,130
looks like this. Your task is going to be to implement the

14
00:00:41,130 --> 00:00:44,750
pickup chopsticks and put down chopsticks method by filling the code

15
00:00:44,750 --> 00:00:47,920
in where indicated in the template that I'll give you. The

16
00:00:47,920 --> 00:00:51,010
output should read like the directions for a play where the

17
00:00:51,010 --> 00:00:54,820
action involves philosophers thinking, picking up chopsticks, eating, and

18
00:00:54,820 --> 00:00:56,950
putting them down. The directions for the play must be

19
00:00:56,950 --> 00:00:59,840
valid. That is, a philospher can only pick up a

20
00:00:59,840 --> 00:01:02,890
chopstick that's next to him and he can only put

21
00:01:02,890 --> 00:01:06,190
one down if he already has it. So equally important

22
00:01:06,190 --> 00:01:09,160
is that no philosopher should be starved. A particularly bad

23
00:01:09,160 --> 00:01:12,410
situation is deadlock, where all five philosophers pick up the

24
00:01:12,410 --> 00:01:16,420
chopsticks to the left. So Rousseau might grab this one,

25
00:01:16,420 --> 00:01:19,920
Nietzsche this one, Allen Bloom this one, Plato this

26
00:01:19,920 --> 00:01:25,020
one, and Aristotle this one. And then, they would wait

27
00:01:25,020 --> 00:01:26,280
for the one to their right to be set

28
00:01:26,280 --> 00:01:28,920
down, so that they could pick it up. Of course

29
00:01:28,920 --> 00:01:31,460
this chopsticks will never be put down because another

30
00:01:31,460 --> 00:01:33,970
philosopher is holding it waiting for the one to his

31
00:01:33,970 --> 00:01:37,680
right to be picked up. In this deadlock situation the

32
00:01:37,680 --> 00:01:41,380
philosophers starve. Take care that your program avoids this problem.
