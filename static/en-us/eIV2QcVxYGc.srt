1
00:00:00,367 --> 00:00:05,599
And the way that we're going to prove that the halting problem is undecideable is by using a technique

2
00:00:05,600 --> 00:00:12,899
known as a proof by contradiction, which means that I will first assume that the halting problem is, in fact, decideable,

3
00:00:12,900 --> 00:00:17,766
and then show you that this assumption leads to an unresolvable contradiction.

4
00:00:17,767 --> 00:00:20,999
So let's start out by assuming that the halting problem is, in fact, decideable.

5
00:00:21,000 --> 00:00:26,999
So it follows directly from the assumption that the halting problem is decide-able that there must be some algorithm

6
00:00:27,000 --> 00:00:32,232
for the halting problem. Now, this algorithm can be very sophisticated, very complicated, whatsoever.

7
00:00:32,232 --> 00:00:37,899
But since the halting problem is decideable, or since we assume that the halting problem is decideable,

8
00:00:37,900 --> 00:00:42,666
we can directly conclude from this assumption that there must be some algorithm solving it,

9
00:00:42,667 --> 00:00:45,299
no matter what the program, no matter what the input.

10
00:00:45,300 --> 00:00:49,632
So now that we assume that we have this halt algorithm, what we're now going to do is something sneaky,

11
00:00:49,633 --> 00:00:55,666
and this will lead us to the proof by contradiction. We're going to write a program that uses this algorithm here,

12
00:00:55,667 --> 00:00:58,699
and this program I call inverse halt, and it's defined as following:

13
00:00:58,700 --> 00:01:03,999
So inverse halt takes as input a program, so not a program and input, but just a program,

14
00:01:04,000 --> 00:01:11,032
and then it calls the halt algorithm with two inputs. So the first input is, again, the program, just as in halt,

15
00:01:11,033 --> 00:01:17,466
but it also gives the program source code itself, if you will, as an input to halt.

16
00:01:17,467 --> 00:01:24,266
So it's basically the question of what happens if I give a program its own program code as an input?

17
00:01:24,267 --> 00:01:31,132
And the way this then reacts is the following: If halt says the program when it's fed its own code, it will stop.

18
00:01:31,133 --> 00:01:34,966
Then inverse halt, that's why I call it inverse halt, will go into an infinite loop.

19
00:01:34,967 --> 00:01:43,399
So if program stops on being fed itself, then inverse halt of that program will not stop. It will not halt.

20
00:01:43,400 --> 00:01:51,899
If, on the other hand, halt determines that program, given itself as an input, would not stop, so go into an infinite loop,

21
00:01:51,900 --> 00:01:57,766
then this whole program here, inverse halt, would in fact terminate. And we're guaranteed in this case that the overall program,

22
00:01:57,767 --> 00:02:01,966
inverse halt, will terminate, because we know that halt is guaranteed to terminate.

23
00:02:01,967 --> 00:02:07,232
After all, it's a valid algorithm that solves the halting program for any program and any input.

24
00:02:07,233 --> 00:02:12,532
Now we're almost there; there's just one more step missing to arrive at our proof by contradiction.

25
00:02:12,533 --> 00:02:17,866
And that is that we now run the following program: So we're almost ready to have proof by contradiction,

26
00:02:17,867 --> 00:02:22,099
and to actually conclude the proof, we'll now consider the following program:

27
00:02:22,100 --> 00:02:27,499
We run inverse halt with inverse halt as an input. So it's kinda similar to up here.

28
00:02:27,500 --> 00:02:32,899
We consider inverse halt in two ways: This one up here is the program inverse halt that we actually run,

29
00:02:32,900 --> 00:02:38,332
and this here is inverse halt, if you will, it's the source code of inverse halt that we want to analyze.

30
00:02:38,333 --> 00:02:43,899
So it's similar to up here again. We're considering a program both as an actual algorithm,

31
00:02:43,900 --> 00:02:48,499
but also the description of that algorithm. And what we're now going to show is that inverse halt,

32
00:02:48,500 --> 00:02:52,232
when given inverse halt as an input, is going to basically choke on itself.

33
00:02:52,233 --> 00:02:54,633
And of course, we're going to do this as a quiz.
