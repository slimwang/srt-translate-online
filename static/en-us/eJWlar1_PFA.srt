1
00:00:00,440 --> 00:00:02,670
To have a good understanding of a file systems, we need

2
00:00:02,670 --> 00:00:05,870
to know how application developers interact with it. There are two

3
00:00:05,870 --> 00:00:09,010
main ways of doing this. One way, keeps track of a

4
00:00:09,010 --> 00:00:12,320
position or cursor in the file, and as we read or

5
00:00:12,320 --> 00:00:14,880
write to the file, we move the cursor around. The other

6
00:00:14,880 --> 00:00:17,580
way allows us to treat a file, as though just a

7
00:00:17,580 --> 00:00:21,760
block of memory. Let's cover the position-based strategy first. We begin

8
00:00:21,760 --> 00:00:25,740
by opening the file, with the open procedure, specifying how we intend

9
00:00:25,740 --> 00:00:28,415
to use it, with some flags. Notice that I'm using the

10
00:00:28,415 --> 00:00:33,100
lower-level system calls, rather than C's built-in procedures like fopen, which

11
00:00:33,100 --> 00:00:35,760
sometimes use an extra layer of buffering. It's not that the

12
00:00:35,760 --> 00:00:38,240
extra layer's a bad idea, I just want to interact more

13
00:00:38,240 --> 00:00:41,460
directly with the operating system. Having opened the file, we can

14
00:00:41,460 --> 00:00:43,940
then call read or write as we wish. Write, I should

15
00:00:43,940 --> 00:00:47,910
say, overwrites instead of inserting, as the cursor does by default

16
00:00:47,910 --> 00:00:50,890
in most editors. And as we read and write, we move

17
00:00:50,890 --> 00:00:53,020
the cursor through the file. If we want to move

18
00:00:53,020 --> 00:00:55,560
the cursor without reading or writing, we use the lseek

19
00:00:55,560 --> 00:00:59,590
command. Which repositions the cursor in the file. And finally

20
00:00:59,590 --> 00:01:01,570
when we're done with the file we should close it,

21
00:01:01,570 --> 00:01:03,730
so that the file system knows we're done. Now I've

22
00:01:03,730 --> 00:01:05,990
skipped over most of the details here, because I thought

23
00:01:05,990 --> 00:01:07,250
it would be a lot more fun for you to

24
00:01:07,250 --> 00:01:09,590
learn them on your own, with a little programming exercise.
