1
00:00:00,330 --> 00:00:03,020
Memory is a precious resource. You don't

2
00:00:03,020 --> 00:00:05,670
want to waste it. You want protection for the

3
00:00:05,670 --> 00:00:08,590
virtual machines from one another. But at the

4
00:00:08,590 --> 00:00:11,560
same time if there's an opportunity to share

5
00:00:11,560 --> 00:00:15,630
memory so that the available physical resource can

6
00:00:15,630 --> 00:00:18,090
be maximally utilized you want to be able

7
00:00:18,090 --> 00:00:21,480
to do that. So the question is can

8
00:00:21,480 --> 00:00:25,980
we share memory across virtual machines without affecting

9
00:00:25,980 --> 00:00:28,820
the integrity of these machines? Because protection

10
00:00:28,820 --> 00:00:31,960
is important, but without affecting the protection, can

11
00:00:31,960 --> 00:00:34,980
we actually enhance the utility of the

12
00:00:34,980 --> 00:00:38,340
available physical memory in the hyperviser? And the

13
00:00:38,340 --> 00:00:43,740
answer is yes, think about it. You may have one instance of Linux contained in a

14
00:00:43,740 --> 00:00:51,330
virtual machine, maybe hosted by me. And maybe you have the same Linux hosted in

15
00:00:51,330 --> 00:00:54,970
another virtual machine, virtual machine number two. And in

16
00:00:54,970 --> 00:00:58,310
both of our virtual machines, the memory footprint of the

17
00:00:58,310 --> 00:01:01,130
operating system is exactly the same. And even the

18
00:01:01,130 --> 00:01:03,540
applications that run on it are going to be exactly

19
00:01:03,540 --> 00:01:05,650
the same, in terms of the contents. Because of

20
00:01:05,650 --> 00:01:08,440
the same operating system, it is just that we have

21
00:01:08,440 --> 00:01:12,297
two different instances. And let's say that we have Firefox

22
00:01:12,297 --> 00:01:16,364
running on this VM, and similarly this Firefox running on

23
00:01:16,364 --> 00:01:21,530
this VM. This copy of Linux is going to have a page table, unique for this

24
00:01:21,530 --> 00:01:25,850
particular Firefox instance. Similarly, this instance of Linux

25
00:01:25,850 --> 00:01:28,570
is going to have a piece-table deal structure unique

26
00:01:28,570 --> 00:01:32,330
for this instance of Firefox and if all

27
00:01:32,330 --> 00:01:34,370
things are equal, in terms of versions and so

28
00:01:34,370 --> 00:01:38,280
on, then a particular virtual page of, the

29
00:01:38,280 --> 00:01:41,460
Firefox instance running here and the Firefox instance running

30
00:01:41,460 --> 00:01:45,530
here is going to have the same content, whether we are talking about this VM or

31
00:01:45,530 --> 00:01:48,660
this VM. And so there is an opportunity

32
00:01:48,660 --> 00:01:52,390
to make both of those page table entires to

33
00:01:52,390 --> 00:01:55,260
point to the same machine page. If we

34
00:01:55,260 --> 00:01:59,020
can do that, then we are avoiding duplication. We're

35
00:01:59,020 --> 00:02:02,824
not comprimising safety, but we're avoiding duplication. This

36
00:02:02,824 --> 00:02:06,610
is particularly true for the core pages. The core

37
00:02:06,610 --> 00:02:12,560
pages are immutable. So, the core pages for this Firefox instance and this

38
00:02:12,560 --> 00:02:16,210
Firefox instance could actually share the same

39
00:02:16,210 --> 00:02:18,650
page in physical memory. And if it

40
00:02:18,650 --> 00:02:24,560
does that you're using the resources taht much more effectively in a virtualized

41
00:02:24,560 --> 00:02:31,940
setting. One way of doing the sharing is by a cooperation between the virtual

42
00:02:31,940 --> 00:02:34,784
machines and the hypervisor. In other words the

43
00:02:34,784 --> 00:02:38,200
guest OS has hooks that allows the hypervisor to

44
00:02:38,200 --> 00:02:41,860
mark pages, copy on write, and have the

45
00:02:41,860 --> 00:02:46,310
PPNs point to exactly the same machine page. And

46
00:02:46,310 --> 00:02:48,772
this way if a page is going to be

47
00:02:48,772 --> 00:02:51,690
written into by the operating system, it'll result in

48
00:02:51,690 --> 00:02:57,640
a fault and we can make a copy of the page that is currently being shared across

49
00:02:57,640 --> 00:03:02,150
two different virtual machines. That is one way of doing it. That is, with the

50
00:03:02,150 --> 00:03:07,800
cooperation between the hypervisor, and the virtual machines.

51
00:03:07,800 --> 00:03:12,890
So that we can, with their connivance, share machine pages

52
00:03:12,890 --> 00:03:17,720
across virtual machines, but mark the entries in the individual

53
00:03:17,720 --> 00:03:23,000
page tables as copy on write, meaning that, so long as

54
00:03:23,000 --> 00:03:26,950
they reach here, perfectly fine. The minute any one of these

55
00:03:26,950 --> 00:03:31,250
guys wants to write into a particular page, at that point, you

56
00:03:31,250 --> 00:03:35,660
make a copy of it and make these two instances point

57
00:03:35,660 --> 00:03:37,950
to different machine pages, so that is one way of doing it.
