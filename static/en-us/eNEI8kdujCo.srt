1
00:00:00,470 --> 00:00:04,340
Let's revisit the CSV baseball data that we downloaded earlier.

2
00:00:04,340 --> 00:00:07,450
CSV is a very popular way to store data, likely because

3
00:00:07,450 --> 00:00:09,930
it's easy to read and comprehend for both humans and

4
00:00:09,930 --> 00:00:14,470
computers. It also probably doesn't hurt that Microsoft Excel can export

5
00:00:14,470 --> 00:00:17,330
data as a CSV. As you can see, every element

6
00:00:17,330 --> 00:00:20,080
of each row is separated by a comma. If we wanted

7
00:00:20,080 --> 00:00:22,070
to load this data into Pandas, we can do this

8
00:00:22,070 --> 00:00:26,050
in one line. It's super easy. We simply import pandas, and

9
00:00:26,050 --> 00:00:32,110
then write baseball_data equals pandas.read_csv Master.csv. This will

10
00:00:32,110 --> 00:00:34,800
load the comma separated data into what Pandas calls

11
00:00:34,800 --> 00:00:36,930
a data frame, where we can retrieve each

12
00:00:36,930 --> 00:00:41,300
column like this, print baseball_data name first. We can

13
00:00:41,300 --> 00:00:43,270
also create new columns on the data frame

14
00:00:43,270 --> 00:00:46,668
by manipulating the columns in a vectorized way. For

15
00:00:46,668 --> 00:00:48,460
example, if I wanted a new column that

16
00:00:48,460 --> 00:00:50,756
was the sum of each player's height and weight,

17
00:00:50,756 --> 00:00:54,284
called baseball_data height plus weight, I could write baseball_data

18
00:00:54,284 --> 00:00:58,310
height plus weight equals baseball_data height, plus baseball_data weight.
