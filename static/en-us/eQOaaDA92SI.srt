1
00:00:00,200 --> 00:00:05,440
As with described in Birrell condition variables are synchronization constructs

2
00:00:05,440 --> 00:00:10,140
which allow block threads to be notified once a specific condition occurs.

3
00:00:10,140 --> 00:00:15,200
Birrell proposed the condition as condition variable abstraction as well as

4
00:00:15,200 --> 00:00:16,490
three operations.

5
00:00:16,490 --> 00:00:20,742
Weight, signal, and broadcast that can be performed on conditioned variables.

6
00:00:20,742 --> 00:00:24,160
In pthreads condition variables are represented via

7
00:00:24,160 --> 00:00:27,390
the designated condition variable data type.

8
00:00:27,390 --> 00:00:32,100
The remaining operations align really well with Birrell's mechanisms.

9
00:00:32,100 --> 00:00:34,110
For instance, for weight,

10
00:00:34,110 --> 00:00:38,470
pthread has a pthread condition weight that takes two arguments,

11
00:00:38,470 --> 00:00:42,830
a condition variable and a mutex, just like what we saw in Birrell's weight.

12
00:00:42,830 --> 00:00:47,160
The semantics of this operation is also identical to Birrell's wait.

13
00:00:47,160 --> 00:00:51,170
A thread that's entering the wait operation, a thread that must wait,

14
00:00:51,170 --> 00:00:54,510
will automatically release the mutex and

15
00:00:54,510 --> 00:00:58,840
place itself on the wait queue that's associated with the condition variable.

16
00:00:58,840 --> 00:01:04,200
When the thread is woken up, it will automatically re-acquire the mutex before

17
00:01:04,200 --> 00:01:06,540
actually exiting the wait operation.

18
00:01:06,540 --> 00:01:10,060
This is identical to the behavior we saw in Birrell's wait.

19
00:01:10,060 --> 00:01:14,480
Identical to the signal and broadcast mechanisms in Birrell, PThreads has.

20
00:01:14,480 --> 00:01:18,060
Pthread condition signal and pthread condition broadcast,

21
00:01:18,060 --> 00:01:23,210
that we can use to either notify one thread that's waiting on a condition

22
00:01:23,210 --> 00:01:28,280
variable using the signal operation, or to notify all threads that are waiting

23
00:01:28,280 --> 00:01:32,870
on a condition variable using the pthread condition broadcast operation.

24
00:01:32,870 --> 00:01:35,910
There are also some other common operations that are used in

25
00:01:35,910 --> 00:01:38,170
conjunction with condition variables.

26
00:01:38,170 --> 00:01:40,715
These include the init and destroy functions.

27
00:01:40,715 --> 00:01:44,090
Pthread_condition_init is pretty straight forward,

28
00:01:44,090 --> 00:01:49,300
you have to use this operation in order to allocate the data structure for

29
00:01:49,300 --> 00:01:53,450
the condition and in order to initialize it's attributes.

30
00:01:53,450 --> 00:01:55,480
Like what we saw with mutexes.

31
00:01:55,480 --> 00:01:59,780
The attributes can further specify the behavior that

32
00:01:59,780 --> 00:02:02,320
pthreads provides with conditions.

33
00:02:02,320 --> 00:02:04,470
For instance an example is whether or

34
00:02:04,470 --> 00:02:09,008
not the conditions variable will be used only within threads that belong to

35
00:02:09,008 --> 00:02:12,990
a single process or also shared across processes.

36
00:02:12,990 --> 00:02:15,670
And similar to what we saw with the mutex and

37
00:02:15,670 --> 00:02:18,440
threads attributes data structures.

38
00:02:18,440 --> 00:02:21,730
Passing null in this call will result in

39
00:02:21,730 --> 00:02:25,010
the default behavior that's supported by pthreads.

40
00:02:25,010 --> 00:02:29,250
That happens to be that the condition variable is private to a process.

41
00:02:29,250 --> 00:02:32,770
Just like threads condition variables should be explicitly freed and

42
00:02:32,770 --> 00:02:36,490
reallocated, we use the condition destroy call for that.

43
00:02:36,490 --> 00:02:40,550
And finally, a few pieces of advice regarding the use of condition variables.

44
00:02:40,550 --> 00:02:43,850
First make sure you don't forget to notify the waiting threads.

45
00:02:44,890 --> 00:02:50,060
Whenever any aspect off a predicate that some threads are waiting on change,

46
00:02:51,260 --> 00:02:52,910
make sure that you signal or

47
00:02:52,910 --> 00:02:57,670
broadcast the correct condition variables that these threads are waiting on.

48
00:02:57,670 --> 00:03:00,330
Next, if you're ever in doubt whether you should use signal or

49
00:03:00,330 --> 00:03:06,700
broadcast, use broadcast untill you figure out what the desired behaviour is.

50
00:03:06,700 --> 00:03:09,740
Note that with broadcast you will lose performance.

51
00:03:09,740 --> 00:03:13,530
So, make sure you use the correct notification mechanism, signal or

52
00:03:13,530 --> 00:03:18,120
broadcast, when you need to wake up threads from a condition variable.

53
00:03:18,120 --> 00:03:22,530
Remember, since you don't actually need the mutex to signal and broadcast,

54
00:03:22,530 --> 00:03:27,910
it may be appropriate for you to remove that signal and broadcast operation.

55
00:03:27,910 --> 00:03:30,110
Until after you've unlocked the mutex,

56
00:03:30,110 --> 00:03:33,720
just like what we saw in the introductory lecture about threads.

57
00:03:33,720 --> 00:03:37,880
We will point out some of these options during the discussion of

58
00:03:37,880 --> 00:03:40,690
an actual pthreads example that we'll do next.
