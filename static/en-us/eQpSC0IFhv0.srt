1
00:00:00,270 --> 00:00:02,450
XML was designed with a number of goals in

2
00:00:02,450 --> 00:00:05,090
mind. One of the most important for purposes of this

3
00:00:05,090 --> 00:00:08,340
class is, it was designed to provide data transfer

4
00:00:08,340 --> 00:00:12,120
that's platform independent. What does that mean? Well the idea

5
00:00:12,120 --> 00:00:14,740
here is that you can have a Producer App.

6
00:00:14,740 --> 00:00:18,390
That's written in any programming language on any operating system

7
00:00:18,390 --> 00:00:21,090
and any type of hardware. And the consumer app

8
00:00:21,090 --> 00:00:25,660
implemented in any other programming language operating system or hardware.

9
00:00:25,660 --> 00:00:28,710
There is no binding between how the consumer app

10
00:00:28,710 --> 00:00:31,580
or the Producer app is implemented, because they both agree

11
00:00:31,580 --> 00:00:33,970
to speak XML to one another. And of course

12
00:00:33,970 --> 00:00:36,767
in addition to consuming XML from the Producer app, the

13
00:00:36,767 --> 00:00:40,040
consumer, wouId also write XML to the Producer app.

14
00:00:41,140 --> 00:00:43,140
Another important goal for XML is that it would be

15
00:00:43,140 --> 00:00:47,030
easy to write programs to read and write XML. The

16
00:00:47,030 --> 00:00:51,370
designers also wanted a data format that could be validated.

17
00:00:51,370 --> 00:00:54,160
So in XML, we write a specification for a

18
00:00:54,160 --> 00:00:58,180
particular type of document. And then any specific examples

19
00:00:58,180 --> 00:01:00,500
of that document that are produced can be validated

20
00:01:00,500 --> 00:01:05,540
against that specification. So BioMed Central has a specification for

21
00:01:05,540 --> 00:01:08,020
the research article format, and any articles that are

22
00:01:08,020 --> 00:01:11,340
produced are validated against that format to ensure They

23
00:01:11,340 --> 00:01:14,250
adhere to the rules for that data model. XML

24
00:01:14,250 --> 00:01:16,450
is designed to be human readable, and as we saw

25
00:01:16,450 --> 00:01:18,750
in the example, we can get a pretty good idea

26
00:01:18,750 --> 00:01:22,480
of what information is contained with in an XML encoding

27
00:01:22,480 --> 00:01:25,740
just by looking at it. And finally, XML is designed

28
00:01:25,740 --> 00:01:28,780
to support a wide variety of applications. We've seen one

29
00:01:28,780 --> 00:01:31,080
application of XML, we're going to take a look at

30
00:01:31,080 --> 00:01:34,510
several others. That essentially span a number of different ways

31
00:01:34,510 --> 00:01:37,400
in which XML can be applied to exchanging data between

32
00:01:37,400 --> 00:01:41,800
applications. If you're interested in more information about this data format,

33
00:01:41,800 --> 00:01:43,490
I encourage you to take a look at the

34
00:01:43,490 --> 00:01:46,450
W3C site. We're going to talk a little bit about what

35
00:01:46,450 --> 00:01:50,170
having a standard means. One of the most important benefits

36
00:01:50,170 --> 00:01:52,700
of there being an XML standard, is that we have

37
00:01:52,700 --> 00:01:57,050
robust parsers in most programming languages, Python included. What this

38
00:01:57,050 --> 00:02:00,040
means for us as data scientists, is that we get

39
00:02:00,040 --> 00:02:02,430
to focus on our own applications. We don't have to

40
00:02:02,430 --> 00:02:07,020
worry about writing parsers. For some ad hoc data format.

41
00:02:07,020 --> 00:02:10,460
Previously each messaging system had its own format

42
00:02:10,460 --> 00:02:12,580
and all were different which made the type

43
00:02:12,580 --> 00:02:15,360
of messaging that we do now very messy,

44
00:02:15,360 --> 00:02:18,720
complex and expensive to do. If everyone uses the

45
00:02:18,720 --> 00:02:21,520
same syntax, it makes writing these systems a

46
00:02:21,520 --> 00:02:25,520
lot faster. And much more reliable. Another advantage for

47
00:02:25,520 --> 00:02:28,800
XML is that it's free. Now, that's free

48
00:02:28,800 --> 00:02:32,190
as in beer but also free from legal encumbrances.

49
00:02:32,190 --> 00:02:37,700
It's not a format that any company owns and may change out from under us. XML

50
00:02:37,700 --> 00:02:40,830
information can be manipulated programmatically. So we can

51
00:02:40,830 --> 00:02:45,020
build databases to support specific types of queries. Or,

52
00:02:45,020 --> 00:02:47,890
we can piece together data from different sources

53
00:02:47,890 --> 00:02:49,920
or take it apart to be reused in

54
00:02:49,920 --> 00:02:53,400
different ways. XML documents can also be reliably

55
00:02:53,400 --> 00:02:56,280
converted into other formats with no loss of information.

56
00:02:57,710 --> 00:03:01,010
XML lets you separate form, or appearance,

57
00:03:01,010 --> 00:03:04,070
from content. So, your XML file contains

58
00:03:04,070 --> 00:03:06,990
your document information, all of your text

59
00:03:06,990 --> 00:03:11,660
and data and identifies it's structure. Formatting

60
00:03:11,660 --> 00:03:14,060
and other processing needs are identified separately

61
00:03:14,060 --> 00:03:17,890
in a Stylesheet or processing system. In

62
00:03:17,890 --> 00:03:23,000
the BoiMed Central example, it is actually the XML that is transformed into HTML

63
00:03:23,000 --> 00:03:29,070
for rendering on the website or into PDF for download. Using a Stylesheet.

64
00:03:29,070 --> 00:03:32,970
And style sheet processing system. The two are combined in output time to

65
00:03:32,970 --> 00:03:37,490
apply the required formatting to the text of data identified by its structure.

66
00:03:37,490 --> 00:03:40,730
This structure might define location, position, order

67
00:03:40,730 --> 00:03:42,690
or any other aspects of the data.
