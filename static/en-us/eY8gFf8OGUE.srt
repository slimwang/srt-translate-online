1
00:00:00,160 --> 00:00:04,160
You've just worked through a batch of tricky problems with Sarah. And maybe the

2
00:00:04,160 --> 00:00:08,180
results of the programs were not always what you expected. That's why it's such

3
00:00:08,180 --> 00:00:13,010
a good idea to test your programs to see that they produce the right result.

4
00:00:13,010 --> 00:00:17,440
Testing is incredibly important in software engineering. And when testing isn't

5
00:00:17,440 --> 00:00:23,888
done right, the results can be quite dramatic. Over here, you see the lift off

6
00:00:23,888 --> 00:00:30,590
of a rocket, an Ariane rockets off the European space agency that unfortunately

7
00:00:30,590 --> 00:00:37,450
a few seconds afterward explodes in midair. Now what happened here is that the

8
00:00:37,450 --> 00:00:42,333
rocket had a device to maintain its position and it actually had two backups.

9
00:00:42,333 --> 00:00:47,310
And because of that, the rocket engineers didn't think they had to test it. But

10
00:00:47,310 --> 00:00:52,210
both back ups failed for the exact same reason actually and testing really

11
00:00:52,210 --> 00:00:56,500
would have been beneficial in this case. So let's learn more about how you can

12
00:00:56,500 --> 00:01:00,750
test your own programs. Okay, here we are in BlueJ, and I'm going to write a

13
00:01:00,750 --> 00:01:07,010
program that tests the translate method of rectangles. Let's have a look. Here,

14
00:01:07,010 --> 00:01:12,510
we construct a rectangle, we call the translate method. We print out what

15
00:01:12,510 --> 00:01:17,050
happens to the x coordinate and we also print out what happens to the width of

16
00:01:17,050 --> 00:01:22,515
the rectangle. And now for the important part. The important part is that

17
00:01:22,515 --> 00:01:29,090
before compiling the program, we also think what should it do? And it is

18
00:01:29,090 --> 00:01:33,920
really, really important that you think about that right when you write your

19
00:01:33,920 --> 00:01:39,045
test program. Here is a super easy way of doing that. You simply add a print

20
00:01:39,045 --> 00:01:45,950
statement that prints what you expect that this program should do. Hmm, what do

21
00:01:45,950 --> 00:01:51,160
we expect? Let's see. The x coordinate of the rectangle is at 5, the y

22
00:01:51,160 --> 00:01:57,840
coordinate is at 10. And now, we translate it by 25 pixels to the right and 15

23
00:01:57,840 --> 00:02:04,910
pixels down. So we have a 5. Translated by 25 pixels, so we expect that the x

24
00:02:04,910 --> 00:02:09,580
coordinate is now 30 pixels, and that's what I'm putting here. What about the

25
00:02:09,580 --> 00:02:14,800
width? The width is 60 and moving the rectangle shouldn't change it, so we'll

26
00:02:14,800 --> 00:02:19,560
expect this to be 60 again. So this is a good example of a Tester program. We

27
00:02:19,560 --> 00:02:24,775
do something. We print the results and we print the expected results. Lets

28
00:02:24,775 --> 00:02:33,950
quickly run the program. We have the actual x position of 30 and the expected

29
00:02:33,950 --> 00:02:39,380
position of 30. And similarly we have the actual width of 60 at the expected

30
00:02:39,380 --> 00:02:45,080
width of 60 so the actual and the expected Matchup. That's great. So, the

31
00:02:45,080 --> 00:02:51,710
simple lesson is always print the actual and the expected results. Sarah has an

32
00:02:51,710 --> 00:02:55,560
activity where you can write you're own test program and practice this.
