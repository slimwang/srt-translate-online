1
00:00:00,000 --> 00:00:02,890
So now our Boolean formula that we are building

2
00:00:02,890 --> 00:00:05,950
as it inputs to SAT is going to become even larger.

3
00:00:05,950 --> 00:00:07,770
So as you have seen before,

4
00:00:07,770 --> 00:00:11,610
the calculation that a non deterministic RAM makes

5
00:00:11,610 --> 00:00:14,220
for a given input can be represented as

6
00:00:14,220 --> 00:00:17,020
a polynomial number of snapshots,

7
00:00:17,020 --> 00:00:19,630
and I'm now going to draw the snapshots only like this;

8
00:00:19,630 --> 00:00:22,310
you know that represents the input, the program,

9
00:00:22,310 --> 00:00:25,110
the read-write memory, as well.

10
00:00:25,110 --> 00:00:28,290
We've already seen that the state of the

11
00:00:28,290 --> 00:00:31,010
non deterministic RAM at each point in time

12
00:00:31,010 --> 00:00:33,900
can be represented as a snapshot

13
00:00:33,900 --> 00:00:36,420
and that snapshot

14
00:00:36,420 --> 00:00:39,060
can be represented as the Boolean formula,

15
00:00:39,060 --> 00:00:43,060
so now that we found out how we can encode a snapshot into a Boolean formula,

16
00:00:43,060 --> 00:00:45,210
let's go back to our main mission,

17
00:00:45,210 --> 00:00:47,260
showing that any problem

18
00:00:47,260 --> 00:00:49,570
that can be solved on a non deterministic RAM

19
00:00:49,570 --> 00:00:52,400
can be encoded as a SAT formula.

20
00:00:52,400 --> 00:00:55,660
And the idea of this is to build a huge--

21
00:00:55,660 --> 00:00:58,730
well, not that huge; it's all going to be polynomial size,

22
00:00:58,730 --> 00:01:00,580
but it's still going to be very large,

23
00:01:00,580 --> 00:01:04,110
so the idea is to build a very large Boolean formula

24
00:01:04,110 --> 00:01:05,220
as follows.

25
00:01:05,220 --> 00:01:07,720
each timestep of the algorithm

26
00:01:07,720 --> 00:01:10,390
is going to be represented as a snapshot.

27
00:01:10,390 --> 00:01:12,640
Then we're going to ensure that

28
00:01:12,640 --> 00:01:14,920
the first of these snapshots

29
00:01:14,920 --> 00:01:17,960
represents the memory of the RAM at

30
00:01:17,960 --> 00:01:19,220
t =0.

31
00:01:19,220 --> 00:01:22,020
What that means is that the program starts

32
00:01:22,020 --> 00:01:24,510
at the first line of execution

33
00:01:24,510 --> 00:01:27,790
and of course that memory contains the input

34
00:01:27,790 --> 00:01:30,580
that we're giving to that program or algorithm.

35
00:01:30,580 --> 00:01:33,160
Then thirdly, we have to ensure that the snapshots

36
00:01:33,160 --> 00:01:34,900
fit together.

37
00:01:34,900 --> 00:01:37,320
What I mean by that is even though it's a non deterministic RAM

38
00:01:37,320 --> 00:01:39,180
if at a certain point in time,

39
00:01:39,180 --> 00:01:41,210
say t = x,

40
00:01:41,210 --> 00:01:43,180
it is in a certain state,

41
00:01:43,180 --> 00:01:45,310
then at the next timestep,

42
00:01:45,310 --> 00:01:46,910
t at x plus 1,

43
00:01:46,910 --> 00:01:49,320
there's only a limited number of choices

44
00:01:49,320 --> 00:01:52,050
or potential states that machine can be in.

45
00:01:52,050 --> 00:01:54,890
So if we were having a deterministic RAM,

46
00:01:54,890 --> 00:01:57,160
actually as we already said,

47
00:01:57,160 --> 00:02:00,200
the state of the machine added time point x

48
00:02:00,200 --> 00:02:04,580
already clearly determines what state the machine will be in at point x plus 1.

49
00:02:04,580 --> 00:02:06,780
For a non deterministic RAM,

50
00:02:06,780 --> 00:02:09,400
if you use the if better operation

51
00:02:09,400 --> 00:02:11,940
then there can be 2 different states at the next time point.

52
00:02:11,940 --> 00:02:14,720
And then finally, we have to ensure that the Boolean formula

53
00:02:14,720 --> 00:02:17,610
that we're building has an input to SAT

54
00:02:17,610 --> 00:02:19,170
can only be satisfied

55
00:02:19,170 --> 00:02:23,060
if the algorithm returns yes at some point in time.

56
00:02:23,060 --> 00:02:26,430
Otherwise, because we have a decision problem, if the algorithm returns no,

57
00:02:26,430 --> 00:02:29,280
we do not want the Boolean formula

58
00:02:29,280 --> 99:59:59,999
to be satisfiable.
