1
00:00:00,012 --> 00:00:02,379
Let's talk about the different kinds of communication,

2
00:00:02,379 --> 00:00:05,009
the different patterns of communication you'll see in parallel computing.

3
00:00:05,009 --> 00:00:09,836
And as you'll see, this is really all about how to map tasks and memory together--

4
00:00:09,836 --> 00:00:11,915
how to map tasks, which are threads in CUDA,

5
00:00:11,915 --> 00:00:14,684
and the memory that they're communicating through.

6
00:00:14,684 --> 00:00:17,688
The communication pattern you've already seen is called map.

7
00:00:17,688 --> 00:00:20,302
Now with map, you've got many data elements

8
00:00:20,302 --> 00:00:24,799
such as elements of an array, or entries in a matrix, or pixels in an image,

9
00:00:24,799 --> 00:00:29,899
And you're going to do the same function or computational on each piece of data.

10
00:00:29,899 --> 00:00:34,404
This means each task is going to read from and write to a specific place in memory.

11
00:00:34,404 --> 00:00:37,772
There's a 1 to 1 correspondence between input and output.

12
00:00:37,772 --> 00:00:40,651
So map is very efficient on GPUs,

13
00:00:40,651 --> 00:00:43,409
and it's easily expressed in an efficient way in CUDA

14
00:00:43,409 --> 00:00:47,515
by simply having 1 thread do each task, but this isn't a very flexible framework.

15
00:00:47,515 --> 00:00:50,350
There's many things you can't do with a simple map operation.

16
00:00:50,350 --> 00:00:53,744
Now suppose that you want each thread to compute and store the average

17
00:00:53,744 --> 00:00:55,915
across a range of data elements.

18
00:00:55,915 --> 00:01:00,610
Say maybe we want to average each set of 3 elements together.

19
00:01:00,610 --> 00:01:04,488
In this case, each thread is going to read the values from 3 locations in memory

20
00:01:04,488 --> 00:01:07,722
and write them into a single place and so on.

21
00:01:07,722 --> 00:01:10,060
Or suppose you want to blur an image

22
00:01:10,060 --> 00:01:13,897
by setting each pixel to the average of its neighboring pixels,

23
00:01:13,897 --> 00:01:18,501
so that this pixel would average together the values of all 5 of these pixels,

24
00:01:18,501 --> 00:01:21,705
and then let's take this pixel next to it,

25
00:01:21,705 --> 00:01:26,307
would average together the values of all these pixels and so on.

26
00:01:26,307 --> 00:01:29,218
We'll do exactly this kind of blurring operation in the homework assignment

27
00:01:29,218 --> 00:01:31,387
that's coming up at the end of this lecture.

28
00:01:31,387 --> 00:01:35,715
This operation is called a gather, because each calculation gathers input data elements together

29
00:01:35,715 --> 00:01:39,799
from different places to compute an output result.
