1
00:00:00,080 --> 00:00:02,384
Le'ts take a look at the 4-ary trie where

2
00:00:02,384 --> 00:00:04,840
k equals 2. Suppose we have the same forwarding table

3
00:00:04,840 --> 00:00:07,970
as before. But now, each node in the trie is

4
00:00:07,970 --> 00:00:12,200
responsible for resolving two bits. So if we take one

5
00:00:12,200 --> 00:00:15,650
one, and now we take one star, that's one zero

6
00:00:15,650 --> 00:00:17,780
and one one. And now we basically have to put

7
00:00:17,780 --> 00:00:20,819
p1. In two places in the tree. One zero star

8
00:00:20,819 --> 00:00:25,250
results in just one entry. 1010 star results in two

9
00:00:25,250 --> 00:00:30,796
traversals, and 10101 star again represents two

10
00:00:30,796 --> 00:00:36,755
entries, for 101010 and 101011. Now suppose we

11
00:00:36,755 --> 00:00:43,010
want to look up 10111. Again, we can spell this out. 101 and

12
00:00:43,010 --> 00:00:46,220
we can see that we get no further than P2 and again, that we

13
00:00:46,220 --> 00:00:50,400
match at P2. One thing we can do to save space further is create

14
00:00:50,400 --> 00:00:53,290
what's called a leaf-pushed trie. In such a

15
00:00:53,290 --> 00:00:55,630
setting, we can save our self some space.

16
00:00:55,630 --> 00:00:58,450
Instead of having these pointers. We can push

17
00:00:58,450 --> 00:01:01,840
these entries into the left and right side

18
00:01:01,840 --> 00:01:07,920
of this note, respectively. So 10 becomes P1 on the left side and 11 becomes P1

19
00:01:07,920 --> 00:01:10,490
on the right side. There are variety of

20
00:01:10,490 --> 00:01:15,160
other atomization algorithms. Including one called Lulea and another

21
00:01:15,160 --> 00:01:18,460
called Patricia. Each of them use the same basic idea

22
00:01:18,460 --> 00:01:21,280
that we have explored here, except some of them like Lulea

23
00:01:21,280 --> 00:01:24,180
are a three level trie, and often they use a bitmap

24
00:01:24,180 --> 00:01:27,960
to compress out repeated entry such as those that exist here.
