1
00:00:00,190 --> 00:00:02,025
And the answer is we will use a

2
00:00:02,025 --> 00:00:05,580
return-address stack, which is a separate predictor, dedicated

3
00:00:05,580 --> 00:00:09,350
to predicting function returns. The way it works

4
00:00:09,350 --> 00:00:12,830
is that we have a small stack in hardware,

5
00:00:12,830 --> 00:00:18,888
with a pointer. As we execute the program, when we have a function call, we will

6
00:00:18,888 --> 00:00:25,380
push the return address, in this case 123. 0 is the address of the call, so 1234

7
00:00:25,380 --> 00:00:28,371
would be the return address. To the return

8
00:00:28,371 --> 00:00:32,680
address stack, and move the pointer. In the function,

9
00:00:32,680 --> 00:00:36,292
when we encounter the return instruction, we will

10
00:00:36,292 --> 00:00:39,484
pop from this return address stack and use the

11
00:00:39,484 --> 00:00:42,508
1234 to return, and in that case, get

12
00:00:42,508 --> 00:00:46,420
the correct target address. Now, our pointer is here,

13
00:00:46,420 --> 00:00:48,170
we don't really have to delete this entry

14
00:00:48,170 --> 00:00:51,060
because the pointer being here means that it's free.

15
00:00:51,060 --> 00:00:53,625
Next, when we reach the next place where the function

16
00:00:53,625 --> 00:00:56,304
is called from, we will see the return address, in this

17
00:00:56,304 --> 00:00:59,670
case, 1254, on to the return address stack. The function

18
00:00:59,670 --> 00:01:04,450
executes when we see the return instruction. We pop the return

19
00:01:04,450 --> 00:01:07,560
address and we again predict correctly. So why is this

20
00:01:07,560 --> 00:01:10,620
a predictor? Why not just use the actual stack of the

21
00:01:10,620 --> 00:01:13,788
program? Well because this predictor needs to be on a

22
00:01:13,788 --> 00:01:16,332
chip very close to where the rest of the branch prediction

23
00:01:16,332 --> 00:01:18,469
is happening and needs to be very, very small.

24
00:01:18,469 --> 00:01:22,837
So unlike your traditional stack, where you would push something

25
00:01:22,837 --> 00:01:26,305
onto this stack. Call another function from there, call a

26
00:01:26,305 --> 00:01:29,190
nested function. And you can do that many many times

27
00:01:29,190 --> 00:01:32,550
until you run out of memory. In this particular case,

28
00:01:32,550 --> 00:01:35,345
we can have very small hardware structure so that it

29
00:01:35,345 --> 00:01:39,000
can make a prediction very quickly, like in one cycle.

30
00:01:39,000 --> 00:01:41,710
Thus it can only have a limited number of entries.

31
00:01:41,710 --> 00:01:45,040
So what happens when we exceed the size of the

32
00:01:45,040 --> 00:01:48,020
RAS? Let's say we have only four entries. Let's say

33
00:01:48,020 --> 00:01:50,760
that we call a function. Call another one. We call

34
00:01:50,760 --> 00:01:54,280
another one. We call another one. And now, the question

35
00:01:54,280 --> 00:01:56,678
is what do we do? So if our RAS is

36
00:01:56,678 --> 00:01:59,720
full, what do we do? There are really two choices.

37
00:01:59,720 --> 00:02:04,018
One, don't push anything. Pretty much preserve what we already

38
00:02:04,018 --> 00:02:07,490
have on the RAS, so that we don't overwrite anything.

39
00:02:07,490 --> 00:02:11,110
The other choice is, once we have filled these four entries,

40
00:02:11,110 --> 00:02:13,880
just wrap around and keep filling them if we call more functions.
