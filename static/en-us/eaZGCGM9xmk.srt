1
00:00:00,690 --> 00:00:05,110
So far, we have designed an abstract coffee maker with three classes and

2
00:00:05,110 --> 00:00:08,730
a set of behaviors. By abstract I mean we, we haven't done anything specific to

3
00:00:08,730 --> 00:00:12,970
the Mark IV. This design is of value by itself. That is,

4
00:00:12,970 --> 00:00:16,309
it could be used in a variety of different models. And so

5
00:00:16,309 --> 00:00:20,990
we want to somehow, be able to capture that and reuse it later.

6
00:00:20,990 --> 00:00:25,890
Hence we should not add specifics to it, instead we should sub class it for

7
00:00:25,890 --> 00:00:30,590
each specific coffee maker. By sub class I mean have a sub class for

8
00:00:30,590 --> 00:00:34,630
each of the classes that is part of the overall system.

9
00:00:34,630 --> 00:00:40,000
In particular, the dependency inversion principle says that high level modules,

10
00:00:40,000 --> 00:00:44,330
like the ones that we have just designed, should not depend on low level ones.

11
00:00:44,330 --> 00:00:46,120
Like those wrapping the API.

12
00:00:46,120 --> 00:00:50,800
Note that this is the opposite philosophy from layered architectures,

13
00:00:50,800 --> 00:00:54,420
where high level model, modules are built on top of low-level ones.
