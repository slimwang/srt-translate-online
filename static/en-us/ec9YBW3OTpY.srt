1
00:00:00,122 --> 00:00:04,170
So I know there are a lot of steps in
that quiz and it was a lot to process.

2
00:00:04,170 --> 00:00:07,340
So let's start off by looking
at the Android flavor app and

3
00:00:07,340 --> 00:00:10,350
understanding that code
base first because it has

4
00:00:10,350 --> 00:00:13,310
all these pieces working
together in a single project.

5
00:00:13,310 --> 00:00:16,700
Remember, you can always download
a simple version of the project, import

6
00:00:16,700 --> 00:00:21,360
app, and enter studio and it be easier
to navigate through all these files.

7
00:00:21,360 --> 00:00:22,860
So if we scroll down to the bottom,

8
00:00:22,860 --> 00:00:26,630
we see the ReadMe which is
the explanation of what this app is.

9
00:00:26,630 --> 00:00:29,330
So this example uses a list view and

10
00:00:29,330 --> 00:00:33,970
a custom array adapter called
Flavor Adapter to display a custom list

11
00:00:33,970 --> 00:00:38,780
item view that contains that image and
two text views.

12
00:00:38,780 --> 00:00:42,930
And so all this information is used to
display the Android flavor names and

13
00:00:42,930 --> 00:00:44,300
version names.

14
00:00:44,300 --> 00:00:45,900
So this item layout pattern and

15
00:00:45,900 --> 00:00:49,360
custom adapter sound very similar
to what we need for the Miwok app.

16
00:00:49,360 --> 00:00:53,910
So as a note, whenever the comments
in the app refer to the adapter view

17
00:00:53,910 --> 00:00:57,100
it means a view such as the list view or
grid view.

18
00:00:57,100 --> 00:00:59,230
Which are common adapter views.

19
00:00:59,230 --> 00:01:01,780
So here we are again in Android Studio.

20
00:01:01,780 --> 00:01:04,720
So I downloaded a zipped
version of the project and

21
00:01:04,720 --> 00:01:07,650
opened it here in Android Studio
to explore it some more.

22
00:01:07,650 --> 00:01:11,340
So to see how this project looks,
let's first explore the Java files.

23
00:01:12,580 --> 00:01:15,840
So opening up, we see that there
are three Java files here.

24
00:01:15,840 --> 00:01:18,720
And the first one to take
a look at is the MainActivity.

25
00:01:18,720 --> 00:01:22,043
So given its name, it's probably
the main screen of the app.

26
00:01:22,043 --> 00:01:27,472
So when we first open the app the main
activity is created by the onCreate

27
00:01:27,472 --> 00:01:32,736
method and then we set the content
view to be activity_mainlayout.

28
00:01:32,736 --> 00:01:37,600
So following that, we see there is
an array list call Android flavors that

29
00:01:37,600 --> 00:01:41,440
contains objects of
the type Android flavor.

30
00:01:41,440 --> 00:01:44,160
So Andrew flavor doesn't
sound like a standard class.

31
00:01:44,160 --> 00:01:46,420
So it's most likely a custom class.

32
00:01:46,420 --> 00:01:50,670
Now to check this out, we'll use
the declaration function in Android.

33
00:01:50,670 --> 00:01:54,750
So to use this, iIll right
click on the name of the class,

34
00:01:54,750 --> 00:01:58,570
go to Go To and then Declaration.

35
00:01:58,570 --> 00:02:02,428
Nice so notice the jumps us
to the Android flavor class.

36
00:02:02,428 --> 00:02:06,530
So the AndroidFlavor.java is
a custom class that we created.

37
00:02:08,080 --> 00:02:11,356
Notice here that the objects of
this class have three properties,

38
00:02:11,356 --> 00:02:16,880
version name version number,
and image resource ID.

39
00:02:16,880 --> 00:02:20,845
So values for these are signed in
the constructor which we find down

40
00:02:20,845 --> 00:02:26,250
here and this class also
contains some getter methods.

41
00:02:26,250 --> 00:02:28,750
So what we've done is
we've created an array

42
00:02:28,750 --> 00:02:31,580
containing these AndroidFlavor objects.

43
00:02:31,580 --> 00:02:34,770
So here we have an example of
a single AndroidFlavor object.

44
00:02:34,770 --> 00:02:38,150
So, with the knowledge of the box and
the states and sign, and

45
00:02:38,150 --> 00:02:43,220
we've taken each of these objects and
put them inside an AndroidFlavors array.

46
00:02:43,220 --> 00:02:47,460
So, many AndroidFlavor objects
are stored in an androidFlavors array.

47
00:02:47,460 --> 00:02:48,900
So, let's go back to the MainActivity.

48
00:02:50,820 --> 00:02:54,360
So, we just saw the array
list getting created up here.

49
00:02:54,360 --> 00:02:57,840
So next are the array adapter calls.

50
00:02:58,880 --> 00:03:02,190
So here's the line where we
instantiate a custom adapter that

51
00:03:02,190 --> 00:03:04,510
is stored in a variable
called flavorAdapter.

52
00:03:05,980 --> 00:03:10,026
Now to create this AndroidFlavorAdapter,

53
00:03:10,026 --> 00:03:14,410
we call the constructor and
pass in two inputs.

54
00:03:15,850 --> 00:03:20,500
So this one likely refers to the context
and the second one AndroidFlavors.

55
00:03:20,500 --> 00:03:24,480
It sounds like we're passing in our
AndroidFlavors array so let's see more

56
00:03:24,480 --> 00:03:29,490
of a host adapters to find by going to
where AndroidFlavorAdapters to find.

57
00:03:29,490 --> 00:03:33,620
So right click, go to Declaration.

58
00:03:33,620 --> 00:03:36,540
So here's
the AndroidFlavorAdapter Java file.

59
00:03:36,540 --> 00:03:39,440
So notice at the top,
AndroidFlavorAdapter extends

60
00:03:39,440 --> 00:03:42,880
ArrayAdapter, meaning that it
inherits from the ArrayAdapter.

61
00:03:44,130 --> 00:03:50,280
So ArrayAdapter is a superclass and
AndroidFlavorAdapterr is a subclass.

62
00:03:50,280 --> 00:03:55,260
So in addition to just inheriting from
ArrayAdapter, we also customize our

63
00:03:55,260 --> 00:03:59,960
adapter class to expect the data source
to be a list of AndroidFlavor objects.

64
00:04:01,910 --> 00:04:03,280
So let's take a look at its constructor.

65
00:04:04,470 --> 00:04:08,650
Notice here that we called
the superclasses constructor, so

66
00:04:08,650 --> 00:04:11,230
we're calling ArrayAdapters
constructor here.

67
00:04:11,230 --> 00:04:13,190
And pass in three inputs.

68
00:04:13,190 --> 00:04:16,704
Now if you remember back to
the discussion about inheritance,

69
00:04:16,704 --> 00:04:20,480
because AndroidFlavorAdapter
extends ArrayAdapter.

70
00:04:20,480 --> 00:04:23,270
We can use the constructor
from ArrayAdapter so

71
00:04:23,270 --> 00:04:27,039
that we get all the logic to initialize
the state of the ArrayAdapter for

72
00:04:27,039 --> 00:04:29,640
free without needing to
write that ourselves.

73
00:04:29,640 --> 00:04:33,710
So this means we can take a look
into ArrayAdapter documentation

74
00:04:33,710 --> 00:04:35,260
to find out more about its constructor.

75
00:04:36,530 --> 00:04:40,760
So I'm back here in the ArrayAdapter
developer documentation.

76
00:04:40,760 --> 00:04:43,410
I'm going to scroll down to
the public constructor section.

77
00:04:44,600 --> 00:04:48,720
Now out of all of these public
constructors, the second to last one is

78
00:04:48,720 --> 00:04:52,480
the one that we're using for
our AndroidFlavorAdapter.

79
00:04:52,480 --> 00:04:56,306
So what we call the supercross
class constructor, AKA the array

80
00:04:56,306 --> 00:05:01,440
adapters contractor,
we need to pass in three inputs.

81
00:05:01,440 --> 00:05:05,920
So the context,
the list item layout resource ID, and

82
00:05:05,920 --> 00:05:08,760
a list of AndroidFlavor objects.

83
00:05:08,760 --> 00:05:13,130
So I want to copy this code and
paste it over here so

84
00:05:13,130 --> 00:05:16,930
that we can have it to refer to
when we look back at our code.

85
00:05:18,750 --> 00:05:21,440
Now we're back in Android
studio looking at the code for

86
00:05:21,440 --> 00:05:25,230
the AndroidFlavorAdapter and
here's the constructor code for

87
00:05:25,230 --> 00:05:28,600
the array adapter
the superclass in this case.

88
00:05:28,600 --> 00:05:33,110
So notice here that we pass in
zero as the layout resource ID

89
00:05:33,110 --> 00:05:37,150
because we don't need to rely on the
superclass array adapter inflating or

90
00:05:37,150 --> 00:05:39,960
creating a list item view for us.

91
00:05:39,960 --> 00:05:43,630
Instead, our Get view method will
mentally handle the inflating of

92
00:05:43,630 --> 00:05:46,920
the layout from the layout
resource ID ourselves.

93
00:05:46,920 --> 00:05:48,290
So moving down a little bit further,

94
00:05:49,750 --> 00:05:52,190
we'll see more about
what I was talking about.

95
00:05:52,190 --> 00:05:57,310
So, down here, we have the getView
method, and we're overriding the getView

96
00:05:57,310 --> 00:06:02,360
method from the superclass and adding in
our own logic for a specific use case.

97
00:06:03,750 --> 00:06:08,220
So, the comment above mentions that our
getView provides a list item view for

98
00:06:08,220 --> 00:06:09,499
an AdapterView of some sorts.

99
00:06:10,640 --> 00:06:14,410
An AdapterView like we mentioned
before could be either a ListView or

100
00:06:14,410 --> 00:06:17,220
a GridView or
some other type of AdapterView.

101
00:06:18,350 --> 00:06:21,820
So the getView method should
take in three parameters.

102
00:06:21,820 --> 00:06:24,750
So the first is the position
which is the position in the list

103
00:06:24,750 --> 00:06:28,470
of data this layout should represent,
the convert view

104
00:06:28,470 --> 00:06:33,620
which is the RecycleView that needs to
be populated and the parent ViewGroup.

105
00:06:33,620 --> 00:06:38,450
So the list items will be added to
this parent ViewGroup as children.

106
00:06:38,450 --> 00:06:42,800
So the first step inside the GetView
method is the getItem method

107
00:06:42,800 --> 00:06:46,980
which is originally defined in
the superclass ArrayAdapter.

108
00:06:46,980 --> 00:06:51,631
So this method returns the item in
the list at the given index position and

109
00:06:51,631 --> 00:06:56,130
note that the return value of this
method is an object with the datatype

110
00:06:56,130 --> 00:06:57,287
AndroidFlavor.

111
00:06:57,287 --> 00:07:00,779
And this is because in
the class declaration,

112
00:07:00,779 --> 00:07:06,520
we specified an ArrayAdapter will
expect a list of AndroidFlavor objects.

113
00:07:06,520 --> 00:07:08,766
So as a list a few calls
the getView method for

114
00:07:08,766 --> 00:07:11,210
different positions in the list.

115
00:07:11,210 --> 00:07:14,550
The adapter will go get the items
at the different positions,

116
00:07:14,550 --> 00:07:16,878
in the list of androidFlavor objects.

117
00:07:16,878 --> 00:07:20,560
So this androidFlavor object contains
the information though populate the list

118
00:07:20,560 --> 00:07:22,720
item and
will read out that data from it shortly.

119
00:07:23,730 --> 00:07:28,140
So the second input parameter of
the getView method is convertView,

120
00:07:29,230 --> 00:07:33,710
which we said earlier is
an existing view that we can reuse.

121
00:07:33,710 --> 00:07:36,310
However sometimes this view
will be equal to null.

122
00:07:37,310 --> 00:07:39,240
Meaning that there is no
view that we can reuse.

123
00:07:40,340 --> 00:07:44,800
So the view being null is common when
you first open up the activity, and

124
00:07:44,800 --> 00:07:47,590
you're creating items in the list for
the first time to fill up the screen.

125
00:07:48,610 --> 00:07:50,090
Now once the screen is filled up,

126
00:07:50,090 --> 00:07:53,510
then it's likely that there will be
a valid view that we can we reuse.

127
00:07:53,510 --> 00:07:54,400
Now in our case,

128
00:07:54,400 --> 00:07:59,060
because we know that we're working with
list items, I'll assign convertView

129
00:07:59,060 --> 00:08:01,960
to listItemView to make it clear what
type of view we're working with.

130
00:08:02,960 --> 00:08:05,490
First, we check there's
an existing view that we can reuse

131
00:08:05,490 --> 00:08:06,310
using this if statement.

132
00:08:07,390 --> 00:08:09,050
If the list item view is dull,

133
00:08:09,050 --> 00:08:13,800
then we execute this line of code inside
the if statement and this inflates all

134
00:08:13,800 --> 00:08:17,810
new list item view from the XML
layout file called list item.

135
00:08:17,810 --> 00:08:22,030
And in case you're wondering,
we're using a LayoutInflater which turns

136
00:08:22,030 --> 00:08:25,190
the XML layout file into
actual view objects.

137
00:08:25,190 --> 00:08:29,270
So we're manually inflating the view
which is why we don't need to pass

138
00:08:29,270 --> 00:08:32,789
the layout resource ID to
the superclass in the constructor,

139
00:08:32,789 --> 00:08:35,440
because remember here we passed in zero.

140
00:08:35,440 --> 00:08:38,150
So once we know
the listItemView was valid and

141
00:08:38,150 --> 00:08:41,840
not null, then we can start
update the text views and

142
00:08:41,840 --> 00:08:45,480
image views within the list item
based on the AndroidFlavor object.

143
00:08:45,480 --> 00:08:49,380
So notice that we're using the fine
view by ID calls to find the view within

144
00:08:49,380 --> 00:08:56,580
the ID list_item_icon or
list_item_name or list_item_number.

145
00:08:56,580 --> 00:09:01,530
So once we find ImageView and
TextViews, we can call methods like

146
00:09:01,530 --> 00:09:07,112
setImageResource or setText and
pass in the value from the AndroidFlavor

147
00:09:07,112 --> 00:09:11,984
object to change the data displaying
displayed on these views.

148
00:09:11,984 --> 00:09:15,534
So to summarize,
from the current Android flavor object,

149
00:09:15,534 --> 00:09:19,368
we can get the different states
from it such as the version name,

150
00:09:19,368 --> 00:09:22,074
the version number,
and image resource ID.

151
00:09:22,074 --> 00:09:26,776
So knowing that information from
the specific AndroidFlavor object,

152
00:09:26,776 --> 00:09:29,828
we can set either the image of or
the text view,

153
00:09:29,828 --> 00:09:34,720
to be the information that we've
gotten from the AndroidFlavor object.

154
00:09:34,720 --> 00:09:37,190
So at the very end,
we return a list item view.

155
00:09:37,190 --> 00:09:40,250
Which is the list item view
with updated information

156
00:09:40,250 --> 00:09:41,870
from the current Android flavor object.

157
00:09:43,070 --> 00:09:46,760
So this ListItemView will be added
as a child to the AdapterView.

158
00:09:46,760 --> 00:09:52,520
All right so that's an overview
of how the AndroidFlavorAdapter

159
00:09:52,520 --> 00:09:59,310
is a custom adapter the takes as its
input a list of AndroidFlavor objects.

160
00:09:59,310 --> 00:10:01,900
So, when a list of items uses requested,

161
00:10:01,900 --> 00:10:07,450
the AndroidFlavorAdapter will find the
Android view at the correct position and

162
00:10:07,450 --> 00:10:10,590
then create or reuse a list item layout.

163
00:10:10,590 --> 00:10:14,540
So the views will be updated based on
the information in the AndroidFlavor

164
00:10:14,540 --> 00:10:18,450
object and then the list item view
is returned to the list view.

165
00:10:18,450 --> 00:10:19,460
So back to the main activity.

166
00:10:19,460 --> 00:10:23,899
So the last two lines are related
to implementing the list view and

167
00:10:23,899 --> 00:10:25,370
array adapter.

168
00:10:25,370 --> 00:10:28,110
So one that we've seen before
when modifying them you walk up.

169
00:10:28,110 --> 00:10:30,520
So here we get to
reference the listView and

170
00:10:30,520 --> 00:10:32,025
we're calling that reference listView.

171
00:10:33,500 --> 00:10:37,163
And then finally we attach
the flavorAdapter to the listView so

172
00:10:37,163 --> 00:10:38,900
we can populate it with data.

173
00:10:38,900 --> 00:10:41,760
All right so we just unpacked
a rather complex structure.

174
00:10:41,760 --> 00:10:42,840
So let's recap all of it.

175
00:10:43,990 --> 00:10:47,540
So first off we created a way
to store custom objects.

176
00:10:48,580 --> 00:10:52,550
And in this case we use
the androidFlavors array

177
00:10:52,550 --> 00:10:55,630
which contains AndroidFlavor objects.

178
00:10:55,630 --> 00:11:00,740
Next we create a custom adapter that
extends from the ArrayAdapter and

179
00:11:00,740 --> 00:11:03,000
takes a custom object.

180
00:11:03,000 --> 00:11:03,600
So in this case,

181
00:11:03,600 --> 00:11:07,610
we created AndroidFlavorAdapter
which extends from the ArrayAdapter.

182
00:11:09,280 --> 00:11:12,660
And it took in the custom
object AndroidFlavor.

183
00:11:12,660 --> 00:11:15,650
Also for the last step,
we modified the getView method

184
00:11:15,650 --> 00:11:19,110
in the custom adapter to provide
a list item view for your ListView.

185
00:11:20,220 --> 00:11:23,790
So we modify the getView method
to get AndroidFlavor objects

186
00:11:23,790 --> 00:11:25,500
from the ArrayAdapter.

187
00:11:25,500 --> 00:11:30,020
So those at the appropriate position and
then to use that information to populate

188
00:11:30,020 --> 00:11:33,990
either recycled View or
to populate a newly created View.

189
00:11:33,990 --> 00:11:37,600
So I highly recommend you to walk
through this project on your own and

190
00:11:37,600 --> 00:11:40,770
see if you can move through how
all these pieces fit together.

191
00:11:40,770 --> 00:11:42,350
So it's well documented.

192
00:11:42,350 --> 00:11:45,520
If you do ever get lost,
refer back to the walkthrough above.

193
00:11:45,520 --> 00:11:48,790
If it helps,
draw out a diagram of the connections.

194
00:11:48,790 --> 00:11:51,870
So understand that the custom
ArrayAdapter pattern is a very powerful

195
00:11:51,870 --> 00:11:54,170
concept for displaying list in Android.
