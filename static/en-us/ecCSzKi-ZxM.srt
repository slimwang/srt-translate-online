1
00:00:00,440 --> 00:00:02,506
To craft delightful details like these,

2
00:00:02,506 --> 00:00:07,260
we'll take a look at the VectorDrawable
and AnimatedVectorDrawable classes.

3
00:00:07,260 --> 00:00:10,410
We'll start by looking at what
VectorDrawable allows us to do,

4
00:00:10,410 --> 00:00:12,825
to understand what we can animate.

5
00:00:12,825 --> 00:00:16,400
VectorDrawable was introduced in
Lollipop and lets you create density

6
00:00:16,400 --> 00:00:20,290
independent images by defining
a series of drawing commands.

7
00:00:20,290 --> 00:00:23,410
It's similar in concept
to SVG on the web.

8
00:00:23,410 --> 00:00:25,510
Here's an example of a VectorDrawable.

9
00:00:25,510 --> 00:00:30,530
It defines a path which has a series
of space separated drawing commands,

10
00:00:30,530 --> 00:00:35,860
which use a subset of the SVG path data
spec to draw lines, curves and so on.

11
00:00:35,860 --> 00:00:40,380
For example, these commands draw
a cross by moving to a point.

12
00:00:40,380 --> 00:00:42,680
Drawing a line to another point.

13
00:00:42,680 --> 00:00:44,660
Lifting and moving to another point.

14
00:00:44,660 --> 00:00:46,030
And drawing another line.

15
00:00:46,030 --> 00:00:47,090
Simple.

16
00:00:47,090 --> 00:00:49,910
Now vectors aren't appropriate for
every kind of image.

17
00:00:49,910 --> 00:00:52,910
You wouldn't want to represent
a person's face with a vector,

18
00:00:52,910 --> 00:00:53,980
for example.

19
00:00:53,980 --> 00:00:58,190
But iconography and simple
illustrations are great candidates.

20
00:00:58,190 --> 00:01:01,380
The vector format provides
density independence,

21
00:01:01,380 --> 00:01:05,170
meaning that the same image
works on any screen density.

22
00:01:05,170 --> 00:01:08,430
When vector support reaches enough
devices, you won't have to explore

23
00:01:08,430 --> 00:01:12,400
assets at multiple different sizes
like we covered in Lesson One.

24
00:01:12,400 --> 00:01:15,410
It also generally produces
a small file size.

25
00:01:15,410 --> 00:01:17,640
But the opportunity to animate all or

26
00:01:17,640 --> 00:01:21,030
parts of the image is what we're
really interested in right now.

27
00:01:21,030 --> 00:01:25,495
The AnimatedVectorDrawable class lets
you animate any property of a part of

28
00:01:25,495 --> 00:01:26,340
set of parts.

29
00:01:27,390 --> 00:01:29,390
Here's a list of what you can animate.

30
00:01:29,390 --> 00:01:32,910
Now, the first five have pretty
standard animation properties.

31
00:01:32,910 --> 00:01:36,670
But having the ability to target
individual elements within the drawable

32
00:01:36,670 --> 00:01:37,711
is quite powerful.

33
00:01:37,711 --> 00:01:42,360
Let's take a closer look at these
last three more unique properties and

34
00:01:42,360 --> 00:01:44,830
the kind of animation they allow.

35
00:01:44,830 --> 00:01:49,480
We can animate the actual path data
itself, allowing you to morph, so

36
00:01:49,480 --> 00:01:51,880
to speak, one shape into another.

37
00:01:51,880 --> 00:01:55,880
Here's a simple example of
changing a tick into a cross.

38
00:01:55,880 --> 00:01:59,170
We can, of course,
combine this with other effects,

39
00:01:59,170 --> 00:02:03,070
such as throwing in a rotate,
to get a little bit fancier.

40
00:02:03,070 --> 00:02:06,610
The restriction when morphing is that
the shapes need to have the same number

41
00:02:06,610 --> 00:02:10,680
of drawing commands in them in order
to interpolate between the two states.

42
00:02:10,680 --> 00:02:15,140
When drawing a path, VectorDrawable
allows you to only draw a portion of it

43
00:02:15,140 --> 00:02:18,240
by trimming the start or end of it.

44
00:02:18,240 --> 00:02:23,200
In this example, we had a path, which is
the handwritten word, Android design.

45
00:02:23,200 --> 00:02:27,585
And animating the trim on it
produces this fun writing effect.

46
00:02:27,585 --> 00:02:30,640
VectorDrawables also support
the notion of clip pass.

47
00:02:30,640 --> 00:02:33,240
That is applying a clip
region to your drawing.

48
00:02:33,240 --> 00:02:37,900
Animating this clip region allows you to
reveal or hide portions of the image.

49
00:02:37,900 --> 00:02:41,120
So in this example we
have an outline heart.

50
00:02:41,120 --> 00:02:43,620
And then on top of that a filled heart.

51
00:02:43,620 --> 00:02:46,810
By applying a clip region to
the filled heart on top and

52
00:02:46,810 --> 00:02:51,950
animating it, we can produce this
filling up and emptying effect.

53
00:02:51,950 --> 00:02:55,860
These were just a few examples of what
you can do with animated vectors.

54
00:02:55,860 --> 00:02:58,540
They're a great opportunity
to make your app feel alive.
