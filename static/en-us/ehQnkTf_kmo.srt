1
00:00:00,000 --> 00:00:06,000
For this problem, we're going to write a lexer that's able to go through and create tokens

2
00:00:06,000 --> 00:00:10,000
for each of the JavaScript keywords and also ignore JavaScript comments,

3
00:00:10,000 --> 00:00:15,000
which are specified with little stars for long comments,

4
00:00:15,000 --> 00:00:19,000
just a slash and a star--this is a multi-line comment--

5
00:00:19,000 --> 00:00:22,000
or just a slash, slash which comments everything for the rest of the line.

6
00:00:22,000 --> 00:00:24,000
So we've got 2 types of comments to handle.

7
00:00:24,000 --> 00:00:28,000
We did this 1 in class, but this one you're going to have to use some state variable

8
00:00:28,000 --> 00:00:31,000
like we did with HTML in class.

9
00:00:31,000 --> 00:00:33,000
So let's see how that's done.

10
00:00:33,000 --> 00:00:35,000
So here I have the solution.

11
00:00:35,000 --> 00:00:39,000
The first thing, which we gave you, was the long list of tokens--

12
00:00:39,000 --> 00:00:42,000
the names and what they should match.

13
00:00:42,000 --> 00:00:45,000
So if I scroll down, I have them all defined.

14
00:00:45,000 --> 00:00:50,000
It's a little tedious, but it's what you have to do, and it's only a 1-time thing you have to do it.

15
00:00:50,000 --> 00:00:53,000
The only thing you really have to keep in mind is you have to escape characters

16
00:00:53,000 --> 00:00:57,000
that are particular to a regular expression.

17
00:00:57,000 --> 00:01:02,000
So freezing means you escape the parenthesis.

18
00:01:02,000 --> 00:01:06,000
We need to escape the pipes, plus, star--

19
00:01:06,000 --> 00:01:09,000
things that have meaning in a regular expression.

20
00:01:09,000 --> 00:01:14,000
So the other major part of this problem was handling the comments.

21
00:01:14,000 --> 00:01:19,000
We have the end-of-line comment, which we did in lecture, and that's almost exactly the same.

22
00:01:19,000 --> 00:01:23,000
If you see 2 slashes, no matter what follows you simply pass by it.

23
00:01:23,000 --> 00:01:27,000
But what we're going to have to handle, just like we did with HTML,

24
00:01:27,000 --> 00:01:34,000
is if we're in a block comment--a multi-line comment, which is indicated by

25
00:01:34,000 --> 00:01:38,000
the slash, a star, blah, blah, blah, blah, and another star and a slash,

26
00:01:38,000 --> 00:01:40,000
we assign our states.

27
00:01:40,000 --> 00:01:44,000
We have a state called comment, and it's exclusive when you're in a comment,

28
00:01:44,000 --> 00:01:46,000
and you're not in anything else.

29
00:01:46,000 --> 00:01:51,000
A comment begins with the slash and the star, which is indicated right here.

30
00:01:51,000 --> 00:01:54,000
You have to escape both of them since they both have meaning.

31
00:01:54,000 --> 00:01:56,000
And then we begin the comment.

32
00:01:56,000 --> 00:01:59,000
We're done when we see the other star and then the slash.

33
00:01:59,000 --> 00:02:03,000
We increment our line count based on how many things we've passed by,

34
00:02:03,000 --> 00:02:06,000
and then we go back to the initial state.

35
00:02:06,000 --> 00:02:09,000
We need to remember an error for when something goes wrong,

36
00:02:09,000 --> 00:02:14,000
and then down here, I've defined what we want to ignore for the comment state,

37
00:02:14,000 --> 99:59:59,999
and it's the same exact stuff that we ignore when we're tokenizing the rest of it.
