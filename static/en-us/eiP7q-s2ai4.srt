1
00:00:00,000 --> 00:00:02,000
Now that you've gotten a bit of a taste for this,

2
00:00:02,000 --> 00:00:06,000
let's check in with someone who toils in the trenches of the real world.

3
00:00:06,000 --> 00:00:08,000
I'm here at Mozilla with Steve Fink,

4
00:00:08,000 --> 00:00:13,000
and one of the topics that we cover in class is debugging or testing--

5
00:00:13,000 --> 00:00:17,000
making small, convenient test cases that are going to lead us to a bug

6
00:00:17,000 --> 00:00:22,000
or a defect in our program. That's tricky even for small classroom examples.

7
00:00:22,000 --> 00:00:24,000
It can be really difficult in the real world.

8
00:00:24,000 --> 00:00:27,000
Steve, have you run into problems like this in your job?

9
00:00:27,000 --> 00:00:31,000
Sure, and in fact right now I'm dealing with a particular test program

10
00:00:31,000 --> 00:00:36,000
that went to a great deal of effort to kind of re-implement the algorithm that it's testing,

11
00:00:36,000 --> 00:00:41,000
which is great in terms of comparing the C++ implementation

12
00:00:41,000 --> 00:00:45,000
and this JavaScript test program and giving you a yes/no answer--

13
00:00:45,000 --> 00:00:47,000
it works/it doesn't work.

14
00:00:47,000 --> 00:00:53,000
But if you actually do have a bug, it can be a bit of a pain tracking it down

15
00:00:53,000 --> 00:00:56,000
just because, okay, you have a failure somewhere in the test;

16
00:00:56,000 --> 00:01:00,000
now you have to figure out what the test program is actually doing

17
00:01:00,000 --> 00:01:06,000
to figure out why it made the particular invocations into the C++ engine

18
00:01:06,000 --> 00:01:12,000
that resulted in the behavior that it's actually testing.

19
00:01:12,000 --> 00:01:16,000
So in many cases, it's actually easier just to have a brain dead, simple

20
00:01:16,000 --> 00:01:19,000
series of call this, call this, call this, call this

21
00:01:19,000 --> 00:01:24,000
rather than for each of these items call this if this is true

22
00:01:24,000 --> 00:01:27,000
and expect this output if--

23
00:01:27,000 --> 00:01:31,000
This is where the re-implementation of the algorithm comes.

24
00:01:31,000 --> 00:01:34,000
Let me give a specific example.

25
00:01:34,000 --> 00:01:37,000
This was a test of typed array code,

26
00:01:37,000 --> 00:01:44,000
and if you access outside of the bounds of a typed array,

27
00:01:44,000 --> 00:01:47,000
then it should give you a range error. >>An exception.

28
00:01:47,000 --> 00:01:50,000
Yeah, an exception, which of type range error.

29
00:01:50,000 --> 00:01:57,000
And so this test program just went through an array of different possible inputs

30
00:01:57,000 --> 00:02:01,000
and then said, "Well, based on this logic, if this index is higher than this number,

31
00:02:01,000 --> 00:02:07,000
"then expect range error; otherwise, expect this value that it pulled out of the array."

32
00:02:07,000 --> 00:02:15,000
So the actual test invocation right there is array element i

33
00:02:15,000 --> 00:02:17,000
should be retrieved from this typed array,

34
00:02:17,000 --> 00:02:23,000
and then you should get the result based on element j of this array.

35
00:02:23,000 --> 00:02:27,000
And it turns out, no, I didn't throw the right error. There was a problem.

36
00:02:27,000 --> 00:02:31,000
But figuring out, "Okay, so what exact element were you looking for

37
00:02:31,000 --> 00:02:35,000
"and what did you actually expect to find based on this other array?"

38
00:02:35,000 --> 00:02:37,000
was very indirect, very difficult.

39
00:02:37,000 --> 00:02:42,000
It would have been easier if it was just a dumb, simple series of statements saying,

40
00:02:42,000 --> 00:02:47,000
"Pull this element out, expect this error. Pull this element out, expect this value."

41
00:02:47,000 --> 00:02:52,000
And in fact, that's kind of what I plan to do is instrument the test case itself

42
00:02:52,000 --> 00:02:57,000
to generate a series of silly, stupid linear statements

43
00:02:57,000 --> 00:03:01,000
and generate a new test case out of that and then throw away the original

44
00:03:01,000 --> 00:03:06,000
because as clever and as easy to modify as it is, it's not actually helpful

45
00:03:06,000 --> 00:03:09,000
when you're trying to track down a particular bug.

46
00:03:09,000 --> 00:03:11,000
It's an excellent point.

47
00:03:11,000 --> 00:03:14,000
In one of the things we cover in class you'll notice that in class

48
00:03:14,000 --> 00:03:17,000
most of our test cases are relatively small and simple.

49
00:03:17,000 --> 00:03:19,000
And this is good advice.

50
00:03:19,000 --> 00:03:22,000
Sometimes it's better to have 2 test cases--1 for each feature--

51
00:03:22,000 --> 00:03:27,000
than to try to combine them together and then have to tease apart an interaction later on.

52
00:03:27,000 --> 00:03:31,000
Yeah. It also makes it much easier to do, for example, binary search.

53
00:03:31,000 --> 00:03:37,000
You can whack off half of the test file if it is a very simple, straightforward test file.

54
00:03:37,000 --> 00:03:43,000
If it's all interrelated, then it's really hard to take off half at a time. >>Exactly.

55
00:03:43,000 --> 00:03:46,000
We'll get a chance to see in class commenting out parts of a test file

56
00:03:46,000 --> 00:03:48,000
to see if it still causes an error.

57
00:03:48,000 --> 00:03:52,000
In a linear test file or just a sequence of assignments, that's much easier to do

58
00:03:52,000 --> 99:59:59,999
than if there's a lot of complicated control flow.
