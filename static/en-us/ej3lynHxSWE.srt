1
00:00:00,430 --> 00:00:03,832
So let's look at the solution
of our MSYNC quiz.

2
00:00:03,832 --> 00:00:07,770
This processor allows all
possible reorderings.

3
00:00:07,770 --> 00:00:13,441
However, it only allows reorderings
of accesses to different locations

4
00:00:13,441 --> 00:00:18,745
because cache coherence and
correct uniprocessor behavior ensures

5
00:00:18,745 --> 00:00:23,970
that accesses to the same variable
are still done in correct order.

6
00:00:25,060 --> 00:00:28,640
So we don't have to
worry about the LL and

7
00:00:28,640 --> 00:00:32,140
SC and this store being reordered
with respect to each other.

8
00:00:32,140 --> 00:00:36,560
They're still going to behave exactly
as if they were in program order.

9
00:00:36,560 --> 00:00:41,970
However, the variable and the lock
are different memory locations so

10
00:00:41,970 --> 00:00:43,910
they can be arbitrarily reordered here.

11
00:00:45,290 --> 00:00:49,780
So what can happen is that this
load of a variable could be

12
00:00:49,780 --> 00:00:54,130
moved all the way up,
before we even try to acquire the lock.

13
00:00:54,130 --> 00:00:57,020
So now we are loading potentially
while somebody is still in

14
00:00:57,020 --> 00:01:01,430
their critical section, so
what we need is an MSYNC here to ensure

15
00:01:01,430 --> 00:01:05,980
that we first get the lock and only then
actually try to actually do our work in

16
00:01:05,980 --> 00:01:10,070
the critical section so that our work
doesn't escape the critical section.

17
00:01:10,070 --> 00:01:15,159
Now, another problem is that stores
in this processor can be reordered.

18
00:01:15,159 --> 00:01:19,360
So we can easily release the lock and
then update the variable.

19
00:01:19,360 --> 00:01:21,450
Which again we need to prevent.

20
00:01:21,450 --> 00:01:24,530
So we need to prevent
that type of reordering.

21
00:01:24,530 --> 00:01:28,360
We don't have to put an MSYNC here
because the load of the variable and

22
00:01:28,360 --> 00:01:29,940
the store will happen in order.

23
00:01:29,940 --> 00:01:32,090
because they're to
the same memory location.

24
00:01:32,090 --> 00:01:36,470
And we don't have to put anything
here or anywhere in between because

25
00:01:37,560 --> 00:01:41,830
all of these accesses to the lock
are going to be in program order anyway.

26
00:01:41,830 --> 00:01:42,950
In general,

27
00:01:42,950 --> 00:01:48,410
a lock function is considered to be
an acquire type of synchronization.

28
00:01:48,410 --> 00:01:51,430
And then we put an MSYNC after it.

29
00:01:51,430 --> 00:01:55,990
An unlock is considered to be
a release type of synchronization.

30
00:01:55,990 --> 00:01:57,840
And we put the MSYNC before it.

31
00:01:57,840 --> 00:02:01,787
So the idea is that you first acquire
access to something, then you MSYNC,

32
00:02:01,787 --> 00:02:06,510
then you actually access it to make sure
that you access it after you acquire it.

33
00:02:06,510 --> 00:02:11,890
And then when you want to release, you
first do what you want, then MSYNC, then

34
00:02:11,890 --> 00:02:16,390
release to make sure that the release
actually happens after the work is done.

35
00:02:16,390 --> 00:02:19,765
With flag synchronization we
have seen that waiting for

36
00:02:19,765 --> 00:02:25,273
a flag is an acquire and that releasing
the flag is really a release.

37
00:02:25,273 --> 00:02:29,565
And then a barrier is a weird case
where we have both an acquire and

38
00:02:29,565 --> 00:02:31,957
a release in the same operation.

39
00:02:31,957 --> 00:02:35,867
So we need an MSYNC both before and
after the barrier to ensure that

40
00:02:35,867 --> 00:02:38,977
the work gets done before
we enter the barrier and

41
00:02:38,977 --> 00:02:42,147
that nobody leaves until we
are done with the barrier.
