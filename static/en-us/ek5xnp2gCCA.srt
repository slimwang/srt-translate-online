1
00:00:00,000 --> 00:00:03,000
Context-free grammars always produce a finite number of utterances.

2
00:00:03,000 --> 00:00:06,000
No. This one produces an infinite number of utterances.

3
00:00:06,000 --> 00:00:10,000
I can keep looping around rule one as many times as I want.

4
00:00:10,000 --> 00:00:13,000
And in fact, this is one of the glories of context-free grammars--

5
00:00:13,000 --> 00:00:16,000
that they can often accept an infinite number strings,

6
00:00:16,000 --> 00:00:20,000
thus, giving you room for creativity based on just a finite grammar.

7
00:00:20,000 --> 00:00:23,000
Context-free grammars can capture a^N b^N.

8
00:00:23,000 --> 00:00:28,000
Yes. It looks like this. Just like the balanced parentheses one but with "ab" instead.

9
00:00:28,000 --> 00:00:30,000
So by "yes" I of course meant "Yes."

10
00:00:30,000 --> 00:00:34,000
Context-free grammars are more powerful than regular expressions. Yes.

11
00:00:34,000 --> 00:00:37,000
Here, more powerful or more expressive means that there are some languages--

12
00:00:37,000 --> 00:00:41,000
remember, a language is set of string--that context-free grammars

13
00:00:41,000 --> 00:00:43,000
can recognize that regular expressions cannot.

14
00:00:43,000 --> 00:00:47,000
This is one of them, a^N b^N can't be captured by regular expressions,

15
00:00:47,000 --> 00:00:50,000
but it can be done by context-free grammars. Therefore, they are more powerful.

16
00:00:50,000 --> 00:00:54,000
Context-free grammars can tell if a program declares a variable before using it.

17
00:00:54,000 --> 00:00:58,000
No. If you think back to our grammars for JavaScript, we couldn't tell the difference

18
00:00:58,000 --> 00:01:01,000
between a variable that had been declared than one that had not been yet.

19
00:01:01,000 --> 00:01:07,000
That's a context-sensitive property. We won't be able to check it with context-free grammars.

20
00:01:07,000 --> 00:01:12,000
We could only notice that later when we are doing interpreting or in a statically typed language

21
00:01:12,000 --> 00:01:16,000
if we were type-checking things to make sure we are using integers and strings correctly.

22
00:01:16,000 --> 00:01:18,000
We might also check to see which variables were in scope.

23
00:01:18,000 --> 00:01:22,000
But in general, it's very hard to tell if a variable has already been used.

24
00:01:22,000 --> 00:01:27,000
That depends on the previous program. That previous program is the context.

25
00:01:27,000 --> 99:59:59,999
Context-free grammars don't get any context.
