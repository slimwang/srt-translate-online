1
00:00:00,410 --> 00:00:02,630
The traditional approach, which I'll call the

2
00:00:02,630 --> 00:00:07,790
greedy approach, in constructing distributed hash table is

3
00:00:07,790 --> 00:00:14,410
when you want to place a key value, you pick a node, n, where n is

4
00:00:14,410 --> 00:00:19,760
very close to key. And now, if you want to retrieve a given key,

5
00:00:19,760 --> 00:00:25,700
K, the algorithm you know is going to be, you want to go to a node N,

6
00:00:25,700 --> 00:00:28,990
which is closest to this key K, because

7
00:00:28,990 --> 00:00:31,430
that is the algorithm that is being used for

8
00:00:31,430 --> 00:00:35,336
placing, so for retrieval you just do the reverse.

9
00:00:35,336 --> 00:00:37,210
When you want a key K, you go to

10
00:00:37,210 --> 00:00:41,260
a node which is closest to key K. That's

11
00:00:41,260 --> 00:00:45,690
how these routing tables get populated at different nodes

12
00:00:45,690 --> 00:00:48,230
in the distributed system at the user level. So

13
00:00:48,230 --> 00:00:51,140
the routing table at A says that these are

14
00:00:51,140 --> 00:00:57,610
the known peers to me whose node IDs I know and I know their mapping of the node

15
00:00:57,610 --> 00:01:01,520
ID to the IP addresses. Now the node space

16
00:01:01,520 --> 00:01:04,430
may be much bigger than the number entries I have

17
00:01:04,430 --> 00:01:07,810
in my routing table. So what do I do

18
00:01:07,810 --> 00:01:11,685
if I want to communicate with a node whose node

19
00:01:11,685 --> 00:01:13,740
ID I know, but I don't have a mapping

20
00:01:13,740 --> 00:01:16,560
for that node ID with respect to the IP address.

21
00:01:16,560 --> 00:01:20,260
Basically the routing table at every node is

22
00:01:20,260 --> 00:01:23,220
just saying these are the nodes that I

23
00:01:23,220 --> 00:01:25,820
know how to communicate with directly. That is

24
00:01:25,820 --> 00:01:29,330
all the nodes that are reachable from node A.

25
00:01:29,330 --> 00:01:36,120
Because, at the user level, I have a mapping between the virtual node ID that is

26
00:01:36,120 --> 00:01:39,230
used in the DHT and the IP address

27
00:01:39,230 --> 00:01:41,720
that corresponds to it. And remember that IP address

28
00:01:41,720 --> 00:01:43,756
is the only thing that the operating system is going

29
00:01:43,756 --> 00:01:46,780
to understand. And therefore I know how to communicate with node

30
00:01:46,780 --> 00:01:50,280
60, because I can give the IP address that corresponds to

31
00:01:50,280 --> 00:01:52,750
node 60 when I want to send a message to node

32
00:01:52,750 --> 00:01:57,200
60. Similarly for 79. Over here, node B knows how

33
00:01:57,200 --> 00:02:01,260
to communicate with 60, knows how to communicate with 109. And

34
00:02:01,260 --> 00:02:04,260
if these are the only entries that are in the routing

35
00:02:04,260 --> 00:02:07,630
tables of A and B, these are the ones to which

36
00:02:07,630 --> 00:02:12,150
node A knows how to communicate directly. What if I want to go to some other

37
00:02:12,150 --> 00:02:17,860
node that is not in my routing my table yet? For example let's say

38
00:02:17,860 --> 00:02:22,960
that I am trying to retrieve a key, 58 or 59. I know

39
00:02:22,960 --> 00:02:28,150
that 58 or 59, in terms of the DST construction, it's

40
00:02:28,150 --> 00:02:33,640
most likely stored in some node whose ID

41
00:02:33,640 --> 00:02:42,040
is very close to this key. Now in my table I have a node ID 60, close enough to

42
00:02:42,040 --> 00:02:45,800
the key that I'm looking for. So what I'm going to hope is that if I am looking

43
00:02:45,800 --> 00:02:49,910
for this particular key, 58 or 59, good chance

44
00:02:49,910 --> 00:02:53,590
that the key value pair that corresponds to 58

45
00:02:53,590 --> 00:02:56,550
or 59 is stored in this node ID 60.

46
00:02:56,550 --> 00:03:00,130
So that's the one that I'm going to communicate with.

47
00:03:00,130 --> 00:03:05,050
It's possible that 58 is actually stored in

48
00:03:05,050 --> 00:03:10,000
a node ID 58, in which case my hope is the desired

49
00:03:10,000 --> 00:03:14,570
destination that I want to reach to is known to this peer,

50
00:03:14,570 --> 00:03:20,430
60, who is close to the node number 58. So in other words,

51
00:03:20,430 --> 00:03:25,700
if I want to communicate with node number 58, my best bet

52
00:03:25,700 --> 00:03:27,990
is to communicate with node number 60 with

53
00:03:27,990 --> 00:03:30,680
the hope that 60 may actually know how

54
00:03:30,680 --> 00:03:34,310
to communicate with node number 58, because ultimately

55
00:03:34,310 --> 00:03:37,870
I'm hoping that that's where this particular key value

56
00:03:37,870 --> 00:03:42,980
pair may be actually stored. On the other hand, if the key that I am looking for

57
00:03:42,980 --> 00:03:50,890
is 80 or 81, then I'll say well, chances are this key is toward a node

58
00:03:50,890 --> 00:03:57,840
ID 79 for whom I have a mapping. Or if I go to him, he might know how to get to

59
00:03:57,840 --> 00:04:03,300
node number 80 which may be actually storing this key 80, which may be actually

60
00:04:03,300 --> 00:04:06,350
storing this key 80. So in other words, in

61
00:04:06,350 --> 00:04:08,740
the greedy approach what we're going to do is

62
00:04:08,740 --> 00:04:12,490
in placing a key value we're going to place

63
00:04:12,490 --> 00:04:16,170
the key value pair at a node N where N

64
00:04:16,170 --> 00:04:22,680
is equal to K, ideally, or close to K. Similarly, if I want to retrieve

65
00:04:22,680 --> 00:04:29,360
a key K, I'm going to go to a node N, where N is either equal to K if I know

66
00:04:29,360 --> 00:04:35,190
how to get to it from my routing table. Or get to a node that is close enough to

67
00:04:35,190 --> 00:04:41,190
the desired N. In this case, the desired N is 58 or 59, but the one that I

68
00:04:41,190 --> 00:04:47,370
can get to is 60, and my hope is that when I get to 60 he will know how to get

69
00:04:47,370 --> 00:04:53,430
me to node number 58 or 59. Or even better, he may be the one that is storing

70
00:04:53,430 --> 00:04:56,620
this particular key value pair that corresponds to the key

71
00:04:56,620 --> 00:04:59,350
that I'm looking for. So in other words, in the

72
00:04:59,350 --> 00:05:02,830
greedy approach we are trying to get to our desired

73
00:05:02,830 --> 00:05:06,300
destination as quickly as possible with the minimum number of

74
00:05:06,300 --> 00:05:09,530
hops to get to the desired destination. And when

75
00:05:09,530 --> 00:05:12,680
I say the number of hops, it is at the

76
00:05:12,680 --> 00:05:16,070
level of the virtual overlay network, not in terms of

77
00:05:16,070 --> 00:05:19,040
the physical network. Because at the user level have no

78
00:05:19,040 --> 00:05:22,730
idea how many hops my message may actually take

79
00:05:22,730 --> 00:05:26,090
going from source to destination. All that we are saying

80
00:05:26,090 --> 00:05:28,790
is at the user level we are trying to minimize

81
00:05:28,790 --> 00:05:31,500
the number of hops to get to the desired destination.
