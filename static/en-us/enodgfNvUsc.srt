1
00:00:00,460 --> 00:00:03,100
You've seen how a commit is a snapshot of every file in

2
00:00:03,100 --> 00:00:05,939
the repository at the time the commit was made.

3
00:00:05,939 --> 00:00:09,220
We can use git to view the difference between any two commits.

4
00:00:09,220 --> 00:00:11,330
For example the difference between these two commits,

5
00:00:11,330 --> 00:00:14,750
would show what code I added to add more color to the game.

6
00:00:14,750 --> 00:00:18,540
Being able to view the difference between any two commits is pretty convenient.

7
00:00:18,540 --> 00:00:21,880
But we can also temporarily change our files back to how they were at

8
00:00:21,880 --> 00:00:23,420
the time of any commit.

9
00:00:23,420 --> 00:00:25,830
This is called a git checkout, and

10
00:00:25,830 --> 00:00:28,920
it's sort of like restoring a previous version.

11
00:00:28,920 --> 00:00:33,880
If you're coming from SVN, this is not the same thing as a SVN checkout.

12
00:00:33,880 --> 00:00:37,270
In git, checking out a commit means resetting all of your files to

13
00:00:37,270 --> 00:00:39,700
how they were at the time that commit was made.

14
00:00:39,700 --> 00:00:42,970
Why would you want to check out a previous version of your code?

15
00:00:42,970 --> 00:00:43,730
One reason might be,

16
00:00:43,730 --> 00:00:47,520
if a bug was introduced, but you're not sure which commit introduced it.

17
00:00:47,520 --> 00:00:50,750
You can test wether a commit has the bug by checking out that commit and

18
00:00:50,750 --> 00:00:52,110
running the code.

19
00:00:52,110 --> 00:00:54,520
To run the code in the Asteroids Repo,

20
00:00:54,520 --> 00:00:58,080
I'll need to open up the index.html file on a web browser.

21
00:00:58,080 --> 00:01:01,960
If I'm on Windows I'll first open up this file navigation GUI.

22
00:01:01,960 --> 00:01:05,670
Next I'll need to navigate to the directory where the Asteroids Repository is.

23
00:01:05,670 --> 00:01:12,250
For me that's in my home directory, so under C, users, Seabucky.

24
00:01:12,250 --> 00:01:14,910
And then I put it in a version control directory and

25
00:01:14,910 --> 00:01:16,940
then in the Asteroids folder.

26
00:01:16,940 --> 00:01:20,030
Now I want to open this index.html file.

27
00:01:20,030 --> 00:01:24,900
So I'll right-click on it and select Open with Google Chrome.

28
00:01:24,900 --> 00:01:28,210
Now, sadly, this game will not work in Internet Explorer.

29
00:01:28,210 --> 00:01:30,070
So you'll need to use either Chrome or

30
00:01:30,070 --> 00:01:34,260
Firefox to open this file, unless the process is the same.

31
00:01:34,260 --> 00:01:37,200
But you should navigate to the file using Finder.

32
00:01:37,200 --> 00:01:39,990
If you've stored your repository in your home directory and you're

33
00:01:39,990 --> 00:01:44,880
having trouble finding it, just press CMD+SHIFT+H to find your home directory.

34
00:01:44,880 --> 00:01:48,120
For me the files are in the version control directory and

35
00:01:48,120 --> 00:01:49,595
then the Asteroids directory.

36
00:01:49,595 --> 00:01:55,060
So I'll right-click on index.html and open with Google Chrome.

37
00:01:57,050 --> 00:01:59,160
So you can see the game looks a little different now.

38
00:01:59,160 --> 00:02:01,310
The asteroids are solid and gray.

39
00:02:01,310 --> 00:02:03,400
And my spaceship is blue.

40
00:02:03,400 --> 00:02:06,110
I'll just go ahead and play for a little bit.

41
00:02:06,110 --> 00:02:08,870
Whoa, what just happened?

42
00:02:08,870 --> 00:02:11,060
I can shoot an endless stream of bullets.

43
00:02:11,060 --> 00:02:13,690
This isn't how I remember Asteroids working.

44
00:02:13,690 --> 00:02:17,250
Okay, as fun as that was I don't think it was the intended behavior.

45
00:02:17,250 --> 00:02:20,050
One of the recent commits must have introduced this bug.

46
00:02:20,050 --> 00:02:21,140
But which one?

47
00:02:21,140 --> 00:02:24,040
It's going to be hard to tell just by looking at the git log.

48
00:02:24,040 --> 00:02:25,000
So.

49
00:02:25,000 --> 00:02:28,240
Let's check out an older commit and see whether it has the bug.

50
00:02:28,240 --> 00:02:31,530
I'm pretty sure the code was working when I reverted the controls.

51
00:02:31,530 --> 00:02:34,620
So I'll start by checking out that commit to double check.

52
00:02:34,620 --> 00:02:36,310
I'll type git checkout.

53
00:02:36,310 --> 00:02:38,640
And then copy and paste the commit ID.

54
00:02:38,640 --> 00:02:40,230
If you're on Mac you can copy and

55
00:02:40,230 --> 00:02:44,430
paste the commit ID by just using Cmd+C and Cmd+V.

56
00:02:44,430 --> 00:02:46,290
If you're using Linux you'll need to copy and

57
00:02:46,290 --> 00:02:49,670
paste with Ctrl+Shift+C and Ctrl+Shift+V.

58
00:02:49,670 --> 00:02:54,690
And if you're using Windows, then you'll need to enable QuickEdit mode.

59
00:02:54,690 --> 00:02:58,050
Which you can find instructions for how to do in the instructor's notes.

60
00:02:58,050 --> 00:03:00,590
And then you can copy and paste by right-clicking.

61
00:03:00,590 --> 00:03:02,840
So now I'll go ahead and check out this commit.

62
00:03:02,840 --> 00:03:05,550
Now I get this strange warning we mentioned before.

63
00:03:05,550 --> 00:03:07,540
You are in detached head state.

64
00:03:07,540 --> 00:03:10,970
Like we mentioned, head is what git calls the commit that you're currently

65
00:03:10,970 --> 00:03:15,250
working on, and you've detached it here by checking out an older commit.

66
00:03:15,250 --> 00:03:18,140
Now here's the reason git thinks this is worth learning about.

67
00:03:18,140 --> 00:03:20,880
What do you think would happen if we made changes while we

68
00:03:20,880 --> 00:03:22,610
had this older commit checked out?

69
00:03:22,610 --> 00:03:24,780
Where would the commit fit in our history?

70
00:03:24,780 --> 00:03:28,870
It gets a little complicated so git includes some instructions for

71
00:03:28,870 --> 00:03:30,280
how you can deal with this.

72
00:03:30,280 --> 00:03:32,680
Don't worry if you don't understand these instructions yet.

73
00:03:32,680 --> 00:03:35,500
We'll be going over them in detail in lesson two.

74
00:03:35,500 --> 00:03:39,440
For now, we're not going to make any changes, we're just going to run the code,

75
00:03:39,440 --> 00:03:42,010
so you won't need to worry about the rest of this message.

76
00:03:42,010 --> 00:03:44,330
Now I'm going to run the code and see if it has a bug.

77
00:03:44,330 --> 00:03:48,950
Even when I hold down space, I can only shoot one bullet at a time.

78
00:03:48,950 --> 00:03:51,350
It looks like the bug hasn't been introduced yet.

79
00:03:51,350 --> 00:03:55,460
If it had we could have just checked out an even older commit and tried again.

80
00:03:55,460 --> 00:03:58,080
Now an interesting thing happens if I type git log while I

81
00:03:58,080 --> 00:04:00,100
have this older commit checked out.

82
00:04:00,100 --> 00:04:04,510
Revert controls shows up as the most recent commit, and the commits from

83
00:04:04,510 --> 00:04:09,110
before like Doug touching up the iPad version of the game and me adding color.

84
00:04:09,110 --> 00:04:10,900
Aren't showed in git log at all.

85
00:04:10,900 --> 00:04:14,280
Now can still get back to the most recent commit by typing git checkout,

86
00:04:14,280 --> 00:04:15,740
followed by its ID.

87
00:04:15,740 --> 00:04:18,050
But what if you don't remember the ID?

88
00:04:18,050 --> 00:04:20,540
For now we've put it into the instructor's notes for you, so

89
00:04:20,540 --> 00:04:21,600
don't worry about it.

90
00:04:21,600 --> 00:04:25,320
In lesson two, you'll also learn another way to switch between commits without

91
00:04:25,320 --> 00:04:26,950
knowing their IDs.

92
00:04:26,950 --> 00:04:30,440
Now I've narrowed down the commit that introduced the bug to one of five.

93
00:04:30,440 --> 00:04:30,950
Go ahead and

94
00:04:30,950 --> 00:04:34,430
do the rest of the work and find the exact commit that introduced the bug.

95
00:04:34,430 --> 00:04:38,110
Paste the ID of the first commit with the bug into this box.

96
00:04:38,110 --> 00:04:41,270
If you run into any issues, check out the troubleshooting guide we've added to

97
00:04:41,270 --> 00:04:44,450
the downloadable section, and see whether your problem is covered.

98
00:04:44,450 --> 00:04:47,200
If it's not, please ask about your problem on the forms.

99
00:04:47,200 --> 00:04:50,420
Since this is your first time using git to check out previous commits,

100
00:04:50,420 --> 00:04:53,090
this process might take a little longer than you'd like.

101
00:04:53,090 --> 00:04:56,820
You might even find it faster to track down the bug without using git.

102
00:04:56,820 --> 00:04:59,730
Or you might want to throw your computer out the window.

103
00:04:59,730 --> 00:05:03,790
However the time you're investing now, will keep paying off in your projects for

104
00:05:03,790 --> 00:05:05,150
years to come.

105
00:05:05,150 --> 00:05:08,840
Eventually you'll barely be able to remember how hard using git was at first.
