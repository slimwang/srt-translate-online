1
00:00:00,290 --> 00:00:04,160
Now let's look at the solution for our MOVZ MOVN Performance Quiz.

2
00:00:04,160 --> 00:00:08,420
The fact that this branch is 50% taken means that on average,

3
00:00:08,420 --> 00:00:11,910
we execute half of the time three instructions and

4
00:00:11,910 --> 00:00:16,290
half of the time two instructions. So if we perfectly predict this,

5
00:00:16,290 --> 00:00:21,950
we will be executing 2.5 instructions on average per execution of this code.

6
00:00:21,950 --> 00:00:26,210
In contrast here, we get four instructions, but we cannot have mis-predictions.

7
00:00:26,210 --> 00:00:33,090
However, here we have our misprediction rate times a 30 instruction penalty.

8
00:00:33,090 --> 00:00:37,160
And if the misprediction is such that these two are equal, then this would be

9
00:00:37,160 --> 00:00:44,735
equal to 4. Then, our x, the misprediction rate, needs to be 4 minus 2.5,

10
00:00:44,735 --> 00:00:50,970
leaves us with 1.5 instructions worth of advantage here.

11
00:00:50,970 --> 00:00:56,330
And 30 instructions worth of disadvantage if we mispredict. So in order for

12
00:00:56,330 --> 00:01:02,622
them to balance, the misprediction rate needs to be 0.05, which amounts to 5%.

13
00:01:02,622 --> 00:01:07,916
So pretty much, if the prediction accuracy is below 95%, then if

14
00:01:07,916 --> 00:01:13,711
converted code is better. If the prediction accuracy in this case is above 95%,

15
00:01:13,711 --> 00:01:19,110
then the original code is better. If the misprediction accuracy is exactly 95%,

16
00:01:19,110 --> 00:01:21,410
then the two have equal performance.
