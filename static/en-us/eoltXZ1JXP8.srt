1
00:00:00,120 --> 00:00:02,969
The other extreme, of course, is to use a direct

2
00:00:02,969 --> 00:00:06,010
trie where instead of 1 bit per look up we might

3
00:00:06,010 --> 00:00:09,760
have 1 memory access responsible for looking up a much

4
00:00:09,760 --> 00:00:12,420
larger number of bits. So, for example, we might have a

5
00:00:12,420 --> 00:00:15,900
2 level trie. Where the first memory access is dictated

6
00:00:15,900 --> 00:00:18,540
by the first 24 bits of the address, and the second

7
00:00:18,540 --> 00:00:22,580
memory access is dictated by last 8 bits of the address.

8
00:00:22,580 --> 00:00:25,360
Now here, we can look up an entry in the forwarding

9
00:00:25,360 --> 00:00:27,900
table with just two memory accesses, the

10
00:00:27,900 --> 00:00:31,020
problem is that this structure results In a

11
00:00:31,020 --> 00:00:34,130
very inefficient use of memory, unlike the single

12
00:00:34,130 --> 00:00:36,780
bit trie. To see why suppose that we

13
00:00:36,780 --> 00:00:43,580
want to represent a /16 prefix. Well unfortunately we have no way of encoding a

14
00:00:43,580 --> 00:00:46,720
lookup that's just 16 bits. We have to

15
00:00:46,720 --> 00:00:50,150
rather encode 2 to the 8th identical entries,

16
00:00:50,150 --> 00:00:55,470
corresponding to the 2 to the 8th/24 prefixes that are

17
00:00:55,470 --> 00:01:00,840
contained in that /16, so this is extremely inefficient use of memory.
