1
00:00:00,200 --> 00:00:02,936
At this point, you should have a pretty good sense of what the various

2
00:00:02,936 --> 00:00:06,635
transforms do. Three.js supports these basic transforms without you needing to

3
00:00:06,635 --> 00:00:10,170
understand what's going on inside the code. However, three.js can't provide

4
00:00:10,170 --> 00:00:13,780
every possible type of transform out there. Though it tries. More importantly,

5
00:00:13,780 --> 00:00:17,119
you'll need to know more about how transforms are coded if you want to program

6
00:00:17,119 --> 00:00:20,548
the vertex and pixel shaders in the pipeline. Here's a screenshot of the

7
00:00:20,548 --> 00:00:25,662
contents of the forearm object 3D from the robot arm demo. Using the debugger.

8
00:00:25,662 --> 00:00:29,156
You have been using the debugger in your browser, right? If not, please go look

9
00:00:29,156 --> 00:00:32,764
at the additional course materials right now and learn more about it. If you dig

10
00:00:32,764 --> 00:00:37,384
inside any object 3D, you'll see a parameter called matrix. It is a Matrix4 with

11
00:00:37,384 --> 00:00:41,192
a bunch of numbers in it. Ultimately this matrix parameter is what holds the

12
00:00:41,192 --> 00:00:44,983
transform that changes the object's shape, orientation, and location. When you

13
00:00:44,983 --> 00:00:48,877
set the position, rotation, and scale these all affect what gets stored in this

14
00:00:48,877 --> 00:00:53,124
array. This matrix represents all these transforms put together in a tidy

15
00:00:53,124 --> 00:00:57,545
package. We can multiply a coordinate, represented by a pointer vector, by this

16
00:00:57,545 --> 00:01:01,396
matrix and get a new coordinate. That's honestly it in a nut shell. Any object

17
00:01:01,396 --> 00:01:05,208
we make is ultimately represented by a bunch of points. These points are in the

18
00:01:05,208 --> 00:01:08,900
object's own sort of space. For example if we make a cube using cube geometry

19
00:01:08,900 --> 00:01:13,532
it's centered around the origin. We transform the cube's points by a transfer

20
00:01:13,532 --> 00:01:18,709
matrix to move, rotate and scale it as desired. A transform matrix is a 4 by 4

21
00:01:18,709 --> 00:01:23,640
set of numbers. Three.js also supports a Matrix3 type which almost no one uses.

22
00:01:23,640 --> 00:01:28,983
In math in general a matrix can have any dimensions at all. Such as 12 by 38.

23
00:01:28,984 --> 00:01:34,000
The 4 by 4 matrix is the size that the GPU prefers. We can multiply a coordinate

24
00:01:34,000 --> 00:01:39,120
by a matrix. This is shown by putting the coordinate to the right of the matrix.

25
00:01:39,121 --> 00:01:42,189
The new resulting coordinate is put to the left of the equals sign. The

26
00:01:42,189 --> 00:01:47,130
mathematical notation is shown here. The coordinate times the matrix gives this

27
00:01:47,130 --> 00:01:52,943
new coordinate. To multiply a coordinate by a matrix you take the coordinate and

28
00:01:52,943 --> 00:01:58,263
perform a dot product with each row of the matrix. For example the dot product

29
00:01:58,263 --> 00:02:03,326
of the first row and the coordinate is this, D1 equals N11 times C1 plus N21

30
00:02:03,326 --> 00:02:08,389
times C2 and so on the sum of these four terms is the first coordinate of the

31
00:02:08,389 --> 00:02:13,698
result. The dot product of the second row in a coordinate gives D2, the second

32
00:02:13,698 --> 00:02:19,573
coordinate of the result. After four dot products, you have a new coordinate.
