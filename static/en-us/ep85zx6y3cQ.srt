1
00:00:00,000 --> 00:00:03,000
So we've just had a chance to learn a bit about debugging,

2
00:00:03,000 --> 00:00:08,000
which is made up of testing and then trying to localize or isolate the fault

3
00:00:08,000 --> 00:00:10,000
and then fixing it.

4
00:00:10,000 --> 00:00:13,000
I actually had a chance to work at a lovely company in Santa Barbara,

5
00:00:13,000 --> 00:00:17,000
Green Hills Software, where my job was to do just that

6
00:00:17,000 --> 00:00:19,000
for just the sort of interpreter that you're writing.

7
00:00:19,000 --> 00:00:23,000
Every day I'd come in and there would be a stack of input programs on my desk,

8
00:00:23,000 --> 00:00:26,000
and our interpreter--or our compiler--was currently computing

9
00:00:26,000 --> 00:00:28,000
the wrong answers for them.

10
00:00:28,000 --> 00:00:33,000
And I would do this sort of hypothesis testing that we've been considering here.

11
00:00:33,000 --> 00:00:35,000
I'd say, oh; what if the bug is in the top half of the program?

12
00:00:35,000 --> 00:00:39,000
Then I can comment out the bottom half, and I should still see the bug.

13
00:00:39,000 --> 00:00:41,000
Oh, that didn't work.

14
00:00:41,000 --> 00:00:44,000
Maybe I'll hypothesize now that the bug is in the bottom half of the program.

15
00:00:44,000 --> 00:00:46,000
I'll comment out the top half and we'll still see the bug.

16
00:00:46,000 --> 00:00:49,000
And I could refine my way down--maybe it's in the top fourth,

17
00:00:49,000 --> 00:00:53,000
maybe it's in the top eighth, until eventually I had a very small input

18
00:00:53,000 --> 00:00:55,000
that still showed the bug.

19
00:00:55,000 --> 00:00:58,000
And then it was easy for me to localize the fault and fix it.

20
00:00:58,000 --> 00:01:02,000
The process was relatively lockstep, so lockstep in fact that a few years ago

21
00:01:02,000 --> 00:01:08,000
a researcher, Andreas Zeller, published a technique for automating it.

22
00:01:08,000 --> 00:01:12,000
His approach, called Delta Debugging, makes it systematic--

23
00:01:12,000 --> 00:01:16,000
does this systematic hypothesis testing by dividing a program input

24
00:01:16,000 --> 00:01:21,000
in half and half again until it finds the smallest input that still reproduces the bug.

25
00:01:21,000 --> 00:01:26,000
In fact, looking back on it now, the job that I had is almost completely automated.

26
00:01:26,000 --> 00:01:30,000
When you run into defects or bugs in your code, and you probably will--

27
00:01:30,000 --> 00:01:35,000
I certainly do all the time--I want you to apply that same level of formal reasoning.

28
00:01:35,000 --> 00:01:37,000
Think about where the bug might be.

29
00:01:37,000 --> 00:01:40,000
Make a test case that probes or falsifies that hypothesis.

30
00:01:40,000 --> 00:01:42,000
Localize the defect.

31
00:01:42,000 --> 99:59:59,999
And then move in to fix it.
