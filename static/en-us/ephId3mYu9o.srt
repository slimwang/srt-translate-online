1
00:00:00,240 --> 00:00:04,190
So, the top most directory in the file
system is the root directory.

2
00:00:04,190 --> 00:00:06,640
And we denote the root
directory with a slash.

3
00:00:06,640 --> 00:00:08,282
You can describe
the location of any file or

4
00:00:08,282 --> 00:00:12,580
directory in the file system,
with a full path beginning with a slash.

5
00:00:12,580 --> 00:00:14,320
The full path is called
the absolute path,

6
00:00:14,320 --> 00:00:18,540
and that means that it tells every step
that has to be taken from the root, or

7
00:00:18,540 --> 00:00:21,160
the absolute beginning
of the file system.

8
00:00:21,160 --> 00:00:24,500
Absolute paths are unambiguous and
easy to understand, but

9
00:00:24,500 --> 00:00:26,370
they can also be
inconvenient to work with,

10
00:00:26,370 --> 00:00:29,390
especially if you're working
with deeply nested directories.

11
00:00:29,390 --> 00:00:32,720
To make things simpler,
we can use relative paths instead.

12
00:00:32,720 --> 00:00:34,010
A file's relative path,

13
00:00:34,010 --> 00:00:37,230
is its location relative to
the current working directory.

14
00:00:37,230 --> 00:00:38,610
If you're working with files in or

15
00:00:38,610 --> 00:00:42,070
near the current working directory,
this can save you a lot of typing.

16
00:00:42,070 --> 00:00:44,520
Every time you've referred
to a file by just its name,

17
00:00:44,520 --> 00:00:46,730
you've actually been
using a relative path.

18
00:00:46,730 --> 00:00:48,880
This is the simplest
sort of relative path.

19
00:00:48,880 --> 00:00:52,230
The shell looks for the specified file
name within the current directory.

20
00:00:52,230 --> 00:00:55,510
For example, if the current
working directory is ocean,

21
00:00:55,510 --> 00:00:59,200
then the relative path of
the clam directory is just clam.

22
00:00:59,200 --> 00:01:01,370
Rather than having the full
path from the root,

23
00:01:01,370 --> 00:01:04,300
we can just have the path
from the working directory.

24
00:01:04,300 --> 00:01:09,590
Oh, and cwd here is just an abbreviation
for current working directory.

25
00:01:09,590 --> 00:01:12,890
You could also write relative paths for
files and other directories.

26
00:01:12,890 --> 00:01:15,470
For example,
the relative path of the giant file,

27
00:01:15,470 --> 00:01:19,446
and the clam directory,
is just clam/giant.

28
00:01:19,446 --> 00:01:20,670
Notice that,

29
00:01:20,670 --> 00:01:24,470
unlike a full path, the relative
path does not start with a slash.

30
00:01:24,470 --> 00:01:27,550
That's how you can tell a relative
path from an absolute one.

31
00:01:27,550 --> 00:01:30,880
You can also write relative paths for
items that are closer to the root.

32
00:01:30,880 --> 00:01:35,828
The special directory entry '..'
points from a directory to its parent.

33
00:01:35,828 --> 00:01:40,859
So, if you're in /home/philip/ocean,
and you refer to '..',

34
00:01:40,859 --> 00:01:44,742
you're talking about
the directory /home/philip.

35
00:01:44,742 --> 00:01:51,814
And if you refer to ../mountain, you're
referring to /home/philip/mountain.

36
00:01:51,814 --> 00:01:54,692
There's also a special
entry which is just '.'.

37
00:01:54,692 --> 00:01:57,150
'.' points from each
directory to itself.

38
00:01:57,150 --> 00:01:59,950
For example, because our current
working directory is ocean,

39
00:01:59,950 --> 00:02:04,860
if we use .,
that refers to /home/philip/ocean.

40
00:02:04,860 --> 00:02:07,535
Another handy shortcut is ~.

41
00:02:07,535 --> 00:02:10,560
~ is an abbreviation for
your own home directory.

42
00:02:10,560 --> 00:02:12,250
By starting a relative path with ~,

43
00:02:12,250 --> 00:02:15,450
you can easily specify paths
relative to your own home directory.
