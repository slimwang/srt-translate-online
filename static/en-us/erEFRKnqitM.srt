1
00:00:00,270 --> 00:00:04,110
While it's tempting to respond to the input event inside of the event hamper,

2
00:00:04,110 --> 00:00:08,740
it's generally considered bad practice to do that. Now to get a better

3
00:00:08,740 --> 00:00:12,630
understanding of that, let's look at this representation of a frame over time.

4
00:00:12,630 --> 00:00:16,328
Our green boxes represent the update of individual items that exist. And the

5
00:00:16,328 --> 00:00:20,255
red boxes represent the rendering of those items. Now, let's say, for instance,

6
00:00:20,255 --> 00:00:24,020
the user hits their keyboard which would move the player around. And, let's

7
00:00:24,020 --> 00:00:27,922
say, that our engine actually gets that call back right here. So, our updating

8
00:00:27,922 --> 00:00:31,314
of the player in a specific position has already occurred, including physic

9
00:00:31,314 --> 00:00:35,935
engine processing and everything else. While our rendering will now be pulling

10
00:00:35,935 --> 00:00:40,493
data for a new position in the environment. Now what this particular instance

11
00:00:40,493 --> 00:00:44,027
can lead to is an interesting phenomena. This makes a disjoint correlation

12
00:00:44,027 --> 00:00:47,534
between our update loop and our render loop. We can actually be updating our

13
00:00:47,534 --> 00:00:51,025
environment with the player at this position. Yet rendering with the player at

14
00:00:51,025 --> 00:00:54,440
this new position. Now while all this may seem minute in a 30-frames or

15
00:00:54,440 --> 00:00:58,678
60-frames per second environment. Things get a little cooky once you start

16
00:00:58,678 --> 00:01:02,634
factoring in network physics which hopefully we'll cover a little bit later. In

17
00:01:02,634 --> 00:01:05,782
practice the events come out a little bit like this. So, let's say we have a

18
00:01:05,782 --> 00:01:09,513
timeline of events that are going to be passed into our application. In a

19
00:01:09,513 --> 00:01:13,489
timeline that represents our update loop. Now what occurs is that we're not

20
00:01:13,489 --> 00:01:18,235
really sure when the events are going to come to us from the browser. They can

21
00:01:18,235 --> 00:01:18,685
occur

22
00:01:18,685 --> 00:01:19,135
[SOUND]

23
00:01:19,135 --> 00:01:20,474
pretty much any time

24
00:01:20,474 --> 00:01:20,935
[SOUND]

25
00:01:20,935 --> 00:01:24,570
they want. Now, what happens is, if we respond to them in turn, we're not

26
00:01:24,570 --> 00:01:27,437
going to have the ability for our update system, or rather, our game code, to

27
00:01:27,437 --> 00:01:32,208
properly be able to react to them. And so what we do is actually store the

28
00:01:32,208 --> 00:01:37,440
input event data inside of our input manager. So that the update loop, or game

29
00:01:37,440 --> 00:01:40,320
code, can query it whenever it wants.
