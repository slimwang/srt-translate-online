1
00:00:00,000 --> 00:00:04,000
Another question we had about relational databases were about joins.

2
00:00:04,000 --> 00:00:10,000
Specifically, how you do a lot of more complicated queries without joins,

3
00:00:10,000 --> 00:00:15,000
because that seems pretty fundamental to a lot of database administrators.

4
00:00:15,000 --> 00:00:22,000
Yes. Joins are fundamental to databases and particularly SQL databases, and I said don't use joins.

5
00:00:22,000 --> 00:00:26,000
Now, a lot of this is opinion, but it's based on experience.

6
00:00:26,000 --> 00:00:29,000
The reason I say don't use joins is because joins don't scale very well.

7
00:00:29,000 --> 00:00:34,000
If you're writing a typical web problem where you think you're going to have lots of data,

8
00:00:34,000 --> 00:00:38,000
and that data is going to eventually need to be spread across multiple machines,

9
00:00:38,000 --> 00:00:43,000
running queries that involve multiple tables joining these two large pieces of data together,

10
00:00:43,000 --> 00:00:46,000
or potentially more than two, across multiple machines is very, very difficult.

11
00:00:46,000 --> 00:00:49,000
There's a lot of research going on to make that possible,

12
00:00:49,000 --> 00:00:52,000
but with the consumer tools, it's not going to work very well for you.

13
00:00:52,000 --> 00:00:54,000
You're going to have to figure out something on your own.

14
00:00:54,000 --> 00:00:59,000
Now, if you structure your data in such a way that everything is independent,

15
00:00:59,000 --> 00:01:02,000
you don't have to worry about that. Things scale a lot nicer.

16
00:01:02,000 --> 00:01:05,000
You have to take this into account when you start, though.

17
00:01:05,000 --> 00:01:08,000
You need to think of your databases as basically these large key value stores,

18
00:01:08,000 --> 00:01:10,000
and you're not going to be able to do complex queries.

19
00:01:10,000 --> 00:01:14,000
You're going to look up things by ID or maybe look up things by single coms,

20
00:01:14,000 --> 00:01:16,000
but you're not going to be joining things together.

21
00:01:16,000 --> 00:01:23,000
Now, one of the things you have to do there then is store some redundant data.

22
00:01:23,000 --> 00:01:25,000
If you have your data nice and normalized--

23
00:01:25,000 --> 00:01:29,000
that is, all of the table for a particular type is in a table for that type--

24
00:01:29,000 --> 00:01:34,000
and you join everything together at query time, that's a nice-looking database,

25
00:01:34,000 --> 00:01:37,000
but as soon as you break things apart you might need to store--

26
00:01:37,000 --> 00:01:41,000
effectively kind of cache other pieces of data in other tables.

27
00:01:41,000 --> 00:01:47,000
On Reddit, we store a users karma, I think, on a link they submit it,

28
00:01:47,000 --> 00:01:50,000
so we have that piece of data handy, so we don't have to fetch the user and the lnk

29
00:01:50,000 --> 00:01:53,000
and all that sort of stuff.

30
00:01:53,000 --> 00:01:55,000
It means there's some more maintenance overhead.

31
00:01:55,000 --> 00:01:57,000
When you do an insert--when you update a particular field--you may have to update it

32
00:01:57,000 --> 00:02:02,000
in a couple places, but that to me is easier--a little bit more easy to manage

33
00:02:02,000 --> 00:02:05,000
than trying to figure out how do you run joins across large datasets

34
00:02:05,000 --> 00:02:07,000
across multiple machines.

35
00:02:07,000 --> 00:02:11,000
Now, if you have a small dataset and if it's on one machine, great. Use joins.

36
00:02:11,000 --> 00:02:13,000
Do what works for you.

37
00:02:13,000 --> 00:02:17,000
On Hipmunk, for example we have a database of hotels. It's 300,000 entries long.

38
00:02:17,000 --> 00:02:21,000
It's not getting any bigger, because that's about how many hotels there are in the world.

39
00:02:21,000 --> 00:02:23,000
We use joins in that database. It makes the problem easier.

40
00:02:23,000 --> 00:02:26,000
But on Reddit, we have databases of links and comments and votes.

41
00:02:26,000 --> 00:02:29,000
Those tables can have more than 1 billion rows.

42
00:02:29,000 --> 00:02:31,000
We're not doing joins on those tables.

43
00:02:31,000 --> 00:02:35,000
Those are spread across many machines just to make the queries work.

44
00:02:35,000 --> 00:02:38,000
Again, use what makes sense.

45
00:02:38,000 --> 00:02:41,000
If you're going to be storing lots of data, try to think about how you store data

46
00:02:41,000 --> 00:02:44,000
in individual tables. >>Okay.
