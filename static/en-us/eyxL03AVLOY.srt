1
00:00:00,280 --> 00:00:03,100
So, let's understand exactly what happens during a

2
00:00:03,100 --> 00:00:05,740
page fault service. So when a thread is executing

3
00:00:05,740 --> 00:00:09,730
on the CPU, it generates a virtual address and

4
00:00:09,730 --> 00:00:13,210
the hardware takes that virtual page number and looks

5
00:00:13,210 --> 00:00:16,040
up the TLB to see if it can translate

6
00:00:16,040 --> 00:00:19,060
that virtual page to a physical page frame that

7
00:00:19,060 --> 00:00:22,330
contains the contents of that page. Now the TLB

8
00:00:22,330 --> 00:00:25,400
look up fails, that's a miss in the TLB.

9
00:00:25,400 --> 00:00:29,040
At that point, the hardware, if the hardware is doing

10
00:00:29,040 --> 00:00:32,439
the page table lookup, it'll go to the page table

11
00:00:32,439 --> 00:00:34,350
and look up the page table to see if the

12
00:00:34,350 --> 00:00:37,580
mapping between the virtual page and the physical page is in

13
00:00:37,580 --> 00:00:40,690
the page table. And this would have been there if

14
00:00:40,690 --> 00:00:43,490
the operating system has already put the contents of the

15
00:00:43,490 --> 00:00:46,560
page in physical memory. But if the operating system has

16
00:00:46,560 --> 00:00:51,210
not brought in that page from the disk into physical memory

17
00:00:51,210 --> 00:00:54,250
then when the hardware goes and looks into, into the page

18
00:00:54,250 --> 00:00:57,040
table, it may not find the mapping between the virtual page

19
00:00:57,040 --> 00:00:59,640
and the physical frame. And so that will deserve a page

20
00:00:59,640 --> 00:01:03,570
table miss. And that miss is the point at which you have

21
00:01:03,570 --> 00:01:05,780
a page fold. So you have a page fold now that

22
00:01:05,780 --> 00:01:09,010
says that I don't have the page in physical memory. And so

23
00:01:09,010 --> 00:01:11,980
what the operating system at that point in the handler, what

24
00:01:11,980 --> 00:01:16,230
it has to do is to locate where on the disk that

25
00:01:16,230 --> 00:01:19,470
particular page, which were pages residing on the

26
00:01:19,470 --> 00:01:22,700
disk, and as part of the page fold

27
00:01:22,700 --> 00:01:25,970
service, the operating system has to allocate a

28
00:01:25,970 --> 00:01:28,940
physical page frame, because it's now missing in

29
00:01:28,940 --> 00:01:35,970
physical memory. And do the I/O to move the virtual page from the disk into the

30
00:01:35,970 --> 00:01:41,140
page frame that is allocated. And once it has done the I/O, the I/O is complete.

31
00:01:41,140 --> 00:01:43,910
Then at that point the operating system can update the

32
00:01:43,910 --> 00:01:47,350
page table to indicate now it has a mapping between

33
00:01:47,350 --> 00:01:50,480
that virtual page and the physical frame number, which was

34
00:01:50,480 --> 00:01:52,910
missing in the original scheme of things, and that's the

35
00:01:52,910 --> 00:01:54,940
reason that we have this fault. And we handle the

36
00:01:54,940 --> 00:01:59,720
fault by bringing in the missing page from the disc

37
00:01:59,720 --> 00:02:02,700
into physical memory. And we update the page table to

38
00:02:02,700 --> 00:02:06,360
indicate that the mapping is now established between the virtual

39
00:02:06,360 --> 00:02:08,788
page and the physical frame number. And then

40
00:02:08,788 --> 00:02:12,230
we can update the TLB to indicate that

41
00:02:12,230 --> 00:02:14,020
now we have the mapping between VPN and

42
00:02:14,020 --> 00:02:17,970
PFN, and once the TLB is also been updated,

43
00:02:17,970 --> 00:02:20,210
the page fault service is complete, and life

44
00:02:20,210 --> 00:02:24,380
is good. So that's the whole workflow in taking

45
00:02:24,380 --> 00:02:27,870
a virtual page and mapping it to a

46
00:02:27,870 --> 00:02:31,580
physical frame when there's a miss. Now let's analyze

47
00:02:31,580 --> 00:02:34,480
this picture and ask the question, where

48
00:02:34,480 --> 00:02:38,470
are potential points of bottlenecks? Now what

49
00:02:38,470 --> 00:02:44,440
I'm showing you here is thread specific. A thread is executing on the CPU. And

50
00:02:44,440 --> 00:02:47,780
looking up the virtual page, advance leading

51
00:02:47,780 --> 00:02:50,770
that to physical frame. It's entirely local

52
00:02:50,770 --> 00:02:53,630
to a particular thread and local to

53
00:02:53,630 --> 00:02:56,710
the processor on which that thread is executing.

54
00:02:56,710 --> 00:02:59,790
No problem with that. No serialization at that point.

55
00:02:59,790 --> 00:03:02,920
Now, moving over here, once the page fault has

56
00:03:02,920 --> 00:03:06,910
been serviced, updating the TLB to indicate that there

57
00:03:06,910 --> 00:03:09,800
is a mapping now, a valid mapping between the virtual

58
00:03:09,800 --> 00:03:12,910
page number and the physical page number, that is

59
00:03:12,910 --> 00:03:14,900
done on the TLB that is local to a

60
00:03:14,900 --> 00:03:18,680
particular processor and therefore it processes a specific action

61
00:03:18,680 --> 00:03:22,390
that's going on in terms of updating this TLB. Now,

62
00:03:22,390 --> 00:03:25,050
let's come to the middle structure here. This is

63
00:03:25,050 --> 00:03:28,320
where all the problem is. So what we have

64
00:03:28,320 --> 00:03:31,670
here, is the situation where we have to first

65
00:03:31,670 --> 00:03:35,650
allocate a physical page frame. That's an operating system function,

66
00:03:35,650 --> 00:03:38,440
in order to allocate a physical page frame. You

67
00:03:38,440 --> 00:03:42,280
have to update the page table to indicate now, that

68
00:03:42,280 --> 00:03:44,420
the IO has been complete and now we can

69
00:03:44,420 --> 00:03:47,460
have a mapping between virtual plane and physical frame. And

70
00:03:47,460 --> 00:03:50,420
I told you that the page table data structure

71
00:03:50,420 --> 00:03:52,530
is a common data structure that might be shared by

72
00:03:52,530 --> 00:03:55,650
the threads in which case all of these things, what

73
00:03:55,650 --> 00:03:59,880
I've shown you here can lead to serialization. So this

74
00:03:59,880 --> 00:04:01,740
is what we want to avoid. We want to avoid

75
00:04:01,740 --> 00:04:07,250
the serialization that is possible in allocating data structures, allocating

76
00:04:07,250 --> 00:04:10,650
physical resources in order to serve as a page fault.

77
00:04:10,650 --> 00:04:13,250
So what we are seeing here is entirely lookup, and

78
00:04:13,250 --> 00:04:15,655
that can be done in parallel. No problem with that.

79
00:04:15,655 --> 00:04:19,046
Reading is something that you can do in parallel. And similarly

80
00:04:19,046 --> 00:04:22,220
what is happening over here is we are updating the

81
00:04:22,220 --> 00:04:24,928
tlb but it is local to a processor. There's no serialization

82
00:04:24,928 --> 00:04:29,200
that's going to happen here. But here we can have serialization

83
00:04:29,200 --> 00:04:33,540
if you're not careful. So, as an OS designer and designing

84
00:04:33,540 --> 00:04:36,390
this particular service, page fault service, this is what you

85
00:04:36,390 --> 00:04:39,310
have to focus on to make sure that you avoid serialization.
