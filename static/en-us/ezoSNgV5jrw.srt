1
00:00:00,000 --> 00:00:04,000
The first I'm going to talk about the strategy for my solution, and then I'm going to show you the code.

2
00:00:04,000 --> 00:00:08,000
Now, I said before that a bad strategy would be to start at the front

3
00:00:08,000 --> 00:00:13,000
and then when we find the palindrome, try to extend it by extending onto the end.

4
00:00:13,000 --> 00:00:15,000
Why is that bad?

5
00:00:15,000 --> 00:00:19,000
Because just knowing that the first characters of a substring

6
00:00:19,000 --> 00:00:25,000
is a palindrome doesn't tell you anything by expanding it by adding characters onto one end.

7
00:00:25,000 --> 00:00:28,000
There's another way to look at it where it does work.

8
00:00:28,000 --> 00:00:31,000
If we start in the middle, then we can expand

9
00:00:31,000 --> 00:00:35,000
and then every time we move out we are gaining some information.

10
00:00:35,000 --> 00:00:39,000
Let's say that instead of starting here we started here.

11
00:00:39,000 --> 00:00:43,000
We say is c by itself a palindrome?

12
00:00:43,000 --> 00:00:46,000
Well, yes, it is, because every one-character string is a palindrome.

13
00:00:46,000 --> 00:00:52,000
Then instead of going only forward, we go 1 character in both directions.

14
00:00:52,000 --> 00:00:58,000
Now we're looking at bcb, and say is that a palindrome?

15
00:00:58,000 --> 00:01:02,000
Yes it is. Now we can go out again in both directions.

16
00:01:02,000 --> 00:01:05,000
Abcba--is that a palindrome? Yes.

17
00:01:05,000 --> 00:01:12,000
We keep on growing the solution out from the middle in both directions.

18
00:01:12,000 --> 00:01:15,000
We keep on going as long as we can and find

19
00:01:15,000 --> 00:01:19,000
the longest palindrome that's centered on one of these positions.

20
00:01:19,000 --> 00:01:23,000
As soon as we find something that's not a palindrome--

21
00:01:23,000 --> 00:01:26,000
let's say if instead of a here there was an x--then we can stop.

22
00:01:26,000 --> 00:01:32,000
No matter how long the string is, no matter how many characters are here and here,

23
00:01:32,000 --> 00:01:37,000
we know that nothing centered on the c is going to be a palindrome that's any longer than that.

24
00:01:37,000 --> 00:01:40,000
We can eliminate a lot of the work.

25
00:01:40,000 --> 00:01:42,000
That's the advantage of doing this.

26
00:01:42,000 --> 00:01:44,000
What about the starting positions?

27
00:01:44,000 --> 00:01:47,000
Well, we've got to start with every character being the center,

28
00:01:47,000 --> 00:01:52,000
and then we also have to start with between every character being the center.

29
00:01:52,000 --> 00:01:58,000
Maybe the longest palindrome in the string is just a two-character sequence.

30
00:01:58,000 --> 00:02:02,000
If we only looked at the first one and then went out to the side we wouldn't find it.

31
00:02:02,000 --> 00:02:09,000
If we start by looking in between them--in other words, start not with "b" but with the empty string--

32
00:02:09,000 --> 00:02:14,000
then when we move out in both directions from the empty string then we check "bb."

33
00:02:14,000 --> 00:02:17,000
That's my approach for the strategy.

34
00:02:17,000 --> 00:02:20,000
If you didn't get the question right, why don't you try it again.

35
00:02:20,000 --> 00:02:23,000
Try to implement this strategy before you look at my solution.

36
00:02:23,000 --> 00:02:25,000
Now I'll show you what I did.

37
00:02:25,000 --> 00:02:27,000
The key to this function is the grow function.

38
00:02:27,000 --> 00:02:31,000
How do you grow a potential palindrome from the middle out?

39
00:02:31,000 --> 00:02:34,000
Grow is going to a text, a start, and an end position,

40
00:02:34,000 --> 00:02:38,000
which the end is going to be either 0 or 1 more than the start,

41
00:02:38,000 --> 00:02:41,000
then we keep on going until we hit the end.

42
00:02:41,000 --> 00:02:45,000
While the start is greater than 0, the start of the string, and while the end

43
00:02:45,000 --> 00:02:50,000
is less than the end of the string and while they match,

44
00:02:50,000 --> 00:02:55,000
while the character 1 to the left is equal to the character 1 to the right,

45
00:02:55,000 --> 00:02:59,000
but we allow for one of them to be in a different case.

46
00:02:59,000 --> 00:03:05,000
If that's true, then we grow by expanding the start to the left and expanding the end to the right.

47
00:03:05,000 --> 00:03:09,000
We keep on doing that as long as we can and then we return the start and the end.

48
00:03:09,000 --> 00:03:11,000
That's the grow function.

49
00:03:11,000 --> 00:03:17,000
That'll find you the longest sequence that is centered on a particular text

50
00:03:17,000 --> 00:03:19,000
with a particular start and end.

51
00:03:19,000 --> 00:03:24,000
Then longest<u>subpalindrome</u>slice just goes through all the possibilities.

52
00:03:24,000 --> 00:03:28,000
It tries to grow for every possible start and end location.

53
00:03:28,000 --> 00:03:32,000
Then we just take the maximum length out of all of those candidates

54
00:03:32,000 --> 00:03:35,000
where the length of a slice is just the different between the two.
