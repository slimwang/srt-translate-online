1
00:00:00,430 --> 00:00:04,040
We spent a good amount of time playing
with what are known as line breakpoints.

2
00:00:04,040 --> 00:00:06,780
We created these by clicking
in the gutter on the line of

3
00:00:06,780 --> 00:00:09,860
code where we wanted to pause
the execution of our application.

4
00:00:09,860 --> 00:00:12,590
But Xcode gives us options to
create other types of useful

5
00:00:12,590 --> 00:00:17,260
breakpoints that are not associated with
any single, particular line of code.

6
00:00:17,260 --> 00:00:20,350
To create them, we'll need to
go to the break point navigator.

7
00:00:20,350 --> 00:00:22,770
And I'll remove this breakpoint for now.

8
00:00:22,770 --> 00:00:25,900
And then we'll want to focus our
attention on this plus sign in the lower

9
00:00:25,900 --> 00:00:27,380
left hand corner.

10
00:00:27,380 --> 00:00:31,689
If we click it, a context menu appears,
allowing us to add exception

11
00:00:31,689 --> 00:00:35,796
breakpoints, open GLES breakpoints,
symbolic breakpoints.

12
00:00:35,796 --> 00:00:37,850
And a test failure breakpoint.

13
00:00:37,850 --> 00:00:41,120
In this course we're going to
focus on only the exception and

14
00:00:41,120 --> 00:00:42,190
symbolic breakpoints.

15
00:00:42,190 --> 00:00:47,840
Because the other two, open GL and test
failure, are more specialized cases.

16
00:00:47,840 --> 00:00:51,890
So let's add an exception breakpoint and
see what happens.

17
00:00:51,890 --> 00:00:55,720
The first that we can see is that Xcode
creates a breakpoint that does not

18
00:00:55,720 --> 00:00:59,330
belong to any single file and
it reads all exceptions.

19
00:00:59,330 --> 00:01:01,150
To show the difference I'll
set a line breakpoint.

20
00:01:01,150 --> 00:01:05,820
You can see how this one belongs
to a file and this one does not.

21
00:01:05,820 --> 00:01:10,790
So like it sounds, this breakpoint can
be triggered by any and all exceptions.

22
00:01:10,790 --> 00:01:12,670
If we right click and
edit this breakpoint,

23
00:01:12,670 --> 00:01:16,880
we can see that the break
option is set to on throw.

24
00:01:16,880 --> 00:01:19,980
Thus, anytime the run time
environment throws an exception,

25
00:01:19,980 --> 00:01:21,830
this breakpoint will be hit.

26
00:01:21,830 --> 00:01:26,370
We could change this to on catch but
let's leave this setting for now.

27
00:01:26,370 --> 00:01:30,850
To demonstrate how this breakpoint's
used I'll go to the breakpoint bug

28
00:01:30,850 --> 00:01:32,210
view controller.

29
00:01:32,210 --> 00:01:36,960
Scroll up to the viewDidLoad and
we'll change the action for

30
00:01:36,960 --> 00:01:40,160
the singleTapRecognizer
from handleSingleTap

31
00:01:40,160 --> 00:01:45,510
to hangleSingleTaps with an S because we
know that that method does not exist.

32
00:01:45,510 --> 00:01:47,850
And this will force
an exception to be thrown.

33
00:01:47,850 --> 00:01:49,020
So let's run the application.

34
00:01:50,180 --> 00:01:52,850
We'll tap in the breakpoint
debugging scene.

35
00:01:52,850 --> 00:01:54,240
So once I've tapped the screen,

36
00:01:54,240 --> 00:01:56,920
we can see that our
breakpoint is being reached.

37
00:01:56,920 --> 00:02:00,900
And it's saying that an unrecognized
selector is being sent to the instance

38
00:02:00,900 --> 00:02:04,070
of a memory address for
a breakpoint bug view controller.

39
00:02:04,070 --> 00:02:08,788
And if I try to continue,
then our application will crash.

40
00:02:08,788 --> 00:02:13,490
And it's terminating on a uncaught
exception of NS exception type.

41
00:02:13,490 --> 00:02:15,800
So let's go ahead and
look at the other options we have.

42
00:02:15,800 --> 00:02:19,140
Let's stop for the exception breakpoint.

43
00:02:19,140 --> 00:02:22,483
So the only thing that's different,
besides the action and options,

44
00:02:22,483 --> 00:02:25,620
which we've seen before,
is this exception option.

45
00:02:25,620 --> 00:02:29,887
And we can set it for a particular
language, like objective C and C++, so

46
00:02:29,887 --> 00:02:34,270
that we only fire on exceptions
triggered in either language.

47
00:02:34,270 --> 00:02:37,270
And that's really it for
exception breakpoints.

48
00:02:37,270 --> 00:02:41,110
You may be wondering to yourself, well,
how is a exception breakpoint useful?

49
00:02:41,110 --> 00:02:43,910
This type of breakpoint can be
extremely useful if your application is

50
00:02:43,910 --> 00:02:46,310
crashing on a particular line of code.

51
00:02:46,310 --> 00:02:47,040
But Xcode and

52
00:02:47,040 --> 00:02:50,990
the stack trace really just aren't
giving you a whole lot of information.

53
00:02:50,990 --> 00:02:55,030
So with an exception breakpoint, you
can pause right before the app crashes,

54
00:02:55,030 --> 00:02:57,795
because say it's not
handling the exception.

55
00:02:57,795 --> 00:03:00,120
And then determine who is
the culprit of the crash.
