1
00:00:00,240 --> 00:00:04,077
This looks better, but it won't work yet. First, you'll need to implement

2
00:00:04,077 --> 00:00:09,030
getLowScorePosition. Implement it so that it only looks through the data once.

3
00:00:09,030 --> 00:00:13,596
And remembers the position of the low score, as well as the score itself. To

4
00:00:13,596 --> 00:00:16,620
implement getLowScoreIndex, we'll follow the algorithim we talked about

5
00:00:16,620 --> 00:00:20,730
earlier, for finding the first portrait in the picture gallery. But this time,

6
00:00:20,730 --> 00:00:25,214
we're using it on a partially filled array, instead of an ArrayList. So we have

7
00:00:25,214 --> 00:00:29,085
to be more careful. We'll start by assuming that the lowest score, is the first

8
00:00:29,085 --> 00:00:32,979
one. Then we'll look at all of the items, starting at one, because we already

9
00:00:32,979 --> 00:00:37,754
looked at zero. Now for each of those elemlents, we'll compare it to the lowest

10
00:00:37,754 --> 00:00:44,432
score, and if it's smaller, we changed what we think the lowest score is. Now,

11
00:00:44,432 --> 00:00:49,390
while we're looking for the lowest score, we also need to look for its index.

12
00:00:49,390 --> 00:00:52,640
So, initially we assumed that the lowest score index was zero, and when we find

13
00:00:52,640 --> 00:00:55,640
a lower score, we'll update the lowest score index to be the index of that

14
00:00:55,640 --> 00:01:00,751
score. Now, when we finish looking at everything, the lowest score index that

15
00:01:00,751 --> 00:01:05,500
we found so far will be the overall lowest score index. Now that I have this

16
00:01:05,500 --> 00:01:09,596
method, the simpler version of removing the minimum score will work. I'll test

17
00:01:09,596 --> 00:01:13,590
it so I can be sure. And it looks like it correctly dropped one of the fives.
