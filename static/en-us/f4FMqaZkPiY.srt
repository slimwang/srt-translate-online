1
00:00:00,270 --> 00:00:03,271
Since I've already run git fetch,
my origin/master will

2
00:00:03,271 --> 00:00:07,490
contain Sarah's changes, which I
can verify by running git status.

3
00:00:07,490 --> 00:00:09,415
As expected, I see that my branch and

4
00:00:09,415 --> 00:00:13,610
origin/master have diverged and
have one and one different commit each.

5
00:00:13,610 --> 00:00:16,550
Now I'm ready to merge Sarah's
changes into my local master.

6
00:00:16,550 --> 00:00:19,780
So, to do that, first I'll make sure
I have the master branch checked out.

7
00:00:19,780 --> 00:00:20,910
And then I'll run git merge, and

8
00:00:20,910 --> 00:00:26,560
the two branches I want to merge
are master and origin/master.

9
00:00:26,560 --> 00:00:31,132
Like I expected, I got a merge conflict,
so I'll open the file and resolve it.

10
00:00:31,132 --> 00:00:34,490
So I can see here's the original version
before either of us made changes.

11
00:00:35,490 --> 00:00:37,536
Here are my changes
with onion power added,

12
00:00:37,536 --> 00:00:40,940
and here is Sarah's version
with cumin removed.

13
00:00:42,140 --> 00:00:44,610
I'll just take Sarah's version and
add onion powder to it.

14
00:00:46,340 --> 00:00:50,380
Then I'll delete both of the other
versions and save my changes.

15
00:00:51,450 --> 00:00:54,260
Finally, I'll let git know that
the conflict was resolved by

16
00:00:54,260 --> 00:00:56,772
adding the chili recipe and committing.

17
00:00:58,020 --> 00:00:59,670
As usual, when I merge,

18
00:00:59,670 --> 00:01:02,990
Git creates an automatic commit
message for me, this time letting me

19
00:01:02,990 --> 00:01:07,730
know that I've merged the
remote-tracking branch origin/master.

20
00:01:07,730 --> 00:01:12,140
Since running git pull is the same as
running git fetch and then git merge,

21
00:01:12,140 --> 00:01:17,380
I could have run git pull origin master
and the same thing would have happened.

22
00:01:17,380 --> 00:01:22,790
If I run this now, then I can see
that master is already up-to-date,

23
00:01:22,790 --> 00:01:23,630
which makes sense.

24
00:01:24,870 --> 00:01:26,960
Now create a merged version
of your changes and

25
00:01:26,960 --> 00:01:32,420
Sarah's changes by running either git
pull or both git fetch and git merge.

26
00:01:33,840 --> 00:01:35,780
Then push the merged
version up to GitHub.

27
00:01:36,860 --> 00:01:40,350
Once you're finished, run git status and
paste the output in this box.
