1
00:00:00,520 --> 00:00:03,240
Predication, is another way that we can

2
00:00:03,240 --> 00:00:06,520
try to deal with control hazards, Unlike branch

3
00:00:06,520 --> 00:00:09,554
prediction. when we are really trying to guess

4
00:00:09,554 --> 00:00:12,181
which way, the if-then-else or a bloop or

5
00:00:12,181 --> 00:00:15,731
something branch will be going, predication, is another

6
00:00:15,731 --> 00:00:20,065
way for dealing with control dependencies. Brown friction,

7
00:00:20,065 --> 00:00:23,032
Is about guessing, where the program is going.,

8
00:00:23,032 --> 00:00:25,654
Usually there is no penalty for being correct

9
00:00:25,654 --> 00:00:29,242
in branch prediction, pretty much we just keep fetching, as

10
00:00:29,242 --> 00:00:32,369
if the branch wasn't even there. Even if the branch

11
00:00:32,369 --> 00:00:34,430
is actually taken, we can just keep fetching from the

12
00:00:34,430 --> 00:00:37,945
right place and thus avoid any penalty. But the problem with

13
00:00:37,945 --> 00:00:41,260
branch prediction, Is that in modern processor, there is a

14
00:00:41,260 --> 00:00:44,728
huge penalty if we are wrong in predicting. Keep in

15
00:00:44,728 --> 00:00:47,924
mind that modern processors have a deep bite, with lots

16
00:00:47,924 --> 00:00:50,848
of stages, before the one in which we figure out the

17
00:00:50,848 --> 00:00:53,160
mass prediction, And in each stage, we

18
00:00:53,160 --> 00:00:55,540
have a number of instructions that we have

19
00:00:55,540 --> 00:00:59,155
been doing. So, in this prediction, results

20
00:00:59,155 --> 00:01:02,207
in throwing away all of that work. Usually,

21
00:01:02,207 --> 00:01:05,444
at least several tens, of instructions worth

22
00:01:05,444 --> 00:01:08,017
of work, So the penalty is usually 0

23
00:01:08,017 --> 00:01:11,669
instructions here, and if we have something like,

24
00:01:11,669 --> 00:01:15,985
maybe, a 12 stage pipeline,with four instructions, Per

25
00:01:15,985 --> 00:01:20,950
cycle. We're talking about something like 48 possible

26
00:01:20,950 --> 00:01:23,610
instructions or so, so let's say about 50

27
00:01:23,610 --> 00:01:27,970
instructions, worth of work wasted. Predication is about

28
00:01:27,970 --> 00:01:30,895
doing work, of the both of the directions,so

29
00:01:30,895 --> 00:01:35,770
we basically do the work of both the taken and not taken direction of a branch,

30
00:01:35,770 --> 00:01:40,730
that way the waste is up to 50% of the work that we have been doing.

31
00:01:40,730 --> 00:01:43,835
Because at the position where the branch was supposed

32
00:01:43,835 --> 00:01:46,997
to be, about half of the stuff we've been fetching.

33
00:01:46,997 --> 00:01:49,307
could have been from one path, half of the

34
00:01:49,307 --> 00:01:51,749
stuff was from the other and only half of that

35
00:01:51,749 --> 00:01:54,191
work will actually be used, the rest will be

36
00:01:54,191 --> 00:01:57,923
thrown away. And then we simply throw away the work

37
00:01:57,923 --> 00:02:01,650
from the wrong path, So, what is good about this?

38
00:02:01,650 --> 00:02:05,913
It seems like here, if we're correct, We lose nothing,

39
00:02:05,913 --> 00:02:12,920
if we are wrong we lose a lot, but we can very accurate prediction. While here,

40
00:02:12,920 --> 00:02:18,661
either way, we lose quite a bit. Well, let's see how the branch prediction

41
00:02:18,661 --> 00:02:21,937
and something like predication,compare on different types

42
00:02:21,937 --> 00:02:25,330
of condition branches we might want to predict.

43
00:02:25,330 --> 00:02:27,180
For a loop, usually we want to

44
00:02:27,180 --> 00:02:30,954
do branch prediction, Loop branches, the more iterations

45
00:02:30,954 --> 00:02:35,130
we have, the more they are predictable. Whereas,

46
00:02:35,130 --> 00:02:38,270
with predication, in each iteration of the loop, we

47
00:02:38,270 --> 00:02:41,505
will be dividing our work into two. One is

48
00:02:41,505 --> 00:02:44,060
do the next iteration, the other one is do

49
00:02:44,060 --> 00:02:46,177
the work after the loop, So, if we

50
00:02:46,177 --> 00:02:49,754
have 1,000 iterations, very little of the work will

51
00:02:49,754 --> 00:02:53,337
end up being done correctly. Simply the branch is

52
00:02:53,337 --> 00:02:55,960
diverging too much, When we need to decide whether

53
00:02:55,960 --> 00:03:00,290
to stay in the loop or not, we will be starting the work of both of these.

54
00:03:00,290 --> 00:03:04,470
One, path goes after the loop, the other one,goes

55
00:03:04,470 --> 00:03:07,510
back into the loop and then here we have

56
00:03:07,510 --> 00:03:11,310
a decision again to follow that path,or stay in

57
00:03:11,310 --> 00:03:15,348
the loop that path, stay in the loop. So,

58
00:03:15,348 --> 00:03:17,894
after awhile if we're still doing the work of

59
00:03:17,894 --> 00:03:21,177
all of these paths concurrently, a very small fraction,

60
00:03:21,177 --> 00:03:24,460
of the work we are doing ends up being the staying in the loop

61
00:03:24,460 --> 00:03:29,872
work. And a lot of it has to do with various variants of exiting

62
00:03:29,872 --> 00:03:35,484
the loop, in each iteration, So for a loop, we want to predict function

63
00:03:35,484 --> 00:03:40,399
call returns, Same thing. Except, predication

64
00:03:40,399 --> 00:03:46,040
really makes no sense, because calls and returns.

65
00:03:46,040 --> 00:03:51,080
Always go there, so somehow the direction of not going there makes no sense

66
00:03:51,080 --> 00:03:55,926
to do so we want to predict. Let's say no we have a

67
00:03:55,926 --> 00:04:01,062
large if then else, so what happens we have a decision and

68
00:04:01,062 --> 00:04:05,877
based on it we do,this or we do this, Now the question

69
00:04:05,877 --> 00:04:11,110
is? Should we try to predict this decision or predicate so

70
00:04:11,110 --> 00:04:16,098
that we are doing the work of both and eventually, they will merge and

71
00:04:16,098 --> 00:04:21,774
re-continue, and the answer here, is that if we predict, we waste up to 50

72
00:04:21,774 --> 00:04:26,480
instructions, More likely we wasted nothing. If

73
00:04:26,480 --> 00:04:29,840
we predicate and these branches, have equal wave

74
00:04:29,840 --> 00:04:32,960
then, let's say we have 100 instructions

75
00:04:32,960 --> 00:04:36,480
here and 100 instructions here, We will execute

76
00:04:36,480 --> 00:04:40,710
200 instructions, waste 100 of them either way.

77
00:04:40,710 --> 00:04:44,790
To somehow, the amount of waste with predication here,

78
00:04:44,790 --> 00:04:47,680
Is larger than even the penalty of branch

79
00:04:47,680 --> 00:04:51,070
misprediction. Pretty much, if we predict, and we are

80
00:04:51,070 --> 00:04:53,350
right, we lose nothing, If we predict, and

81
00:04:53,350 --> 00:04:55,990
we are wrong, we lose 50 instructions, Here, we

82
00:04:55,990 --> 00:04:59,140
lose 100 instructions. And we cannot be wrong or

83
00:04:59,140 --> 00:05:01,772
right. But either iii way, we are losing 100

84
00:05:01,772 --> 00:05:05,036
inst,ructions, So for a large if-then-else it seems

85
00:05:05,036 --> 00:05:07,960
like we should be predicting, but let's see, how

86
00:05:07,960 --> 00:05:11,160
things look like for a small if-then-else. Let's

87
00:05:11,160 --> 00:05:13,635
say that we have a decision to make, and

88
00:05:13,635 --> 00:05:16,560
depending on the decision, we have the, Then

89
00:05:16,560 --> 00:05:18,810
or the L spot, but let's say each is

90
00:05:18,810 --> 00:05:22,335
something like five instructions long, now it becomes

91
00:05:22,335 --> 00:05:26,768
interesting. If we do predication, we will be executing,

92
00:05:26,768 --> 00:05:29,963
ten instructions here followed by instructions that

93
00:05:29,963 --> 00:05:31,809
we will do anyway, so the waste

94
00:05:31,809 --> 00:05:36,740
is five instructions either way. Here we're

95
00:05:36,740 --> 00:05:39,610
predicting, and if we're right we waste

96
00:05:39,610 --> 00:05:45,879
nothing but if we're wrong we waste 50, instructions. So, our comparison is that

97
00:05:45,879 --> 00:05:48,369
100% of the time, we waste five

98
00:05:48,369 --> 00:05:51,938
instructions with predications, so we end up with

99
00:05:51,938 --> 00:05:58,992
five on average. For instance of this, whereas here,our branch prediction

100
00:05:58,992 --> 00:06:05,156
rate determines how often we waste this 50 so it's going to be,lets say 0 point

101
00:06:05,156 --> 00:06:10,952
10 because it's 10%, probability of mis predicting in which case we

102
00:06:10,952 --> 00:06:16,940
end up at five two. So if our accuracy of prediction is 90% or better,

103
00:06:16,940 --> 00:06:19,700
then in this case we are better off predicting

104
00:06:19,700 --> 00:06:22,200
the branch. But if our accuracy is less than

105
00:06:22,200 --> 00:06:26,410
90%, we are better off predicating. If, if then

106
00:06:26,410 --> 00:06:29,740
else, is even smaller, then it biases more in

107
00:06:29,740 --> 00:06:32,760
favor of predication, and less in favor of branch

108
00:06:32,760 --> 00:06:36,204
prediction. So for really small, if then elses, We

109
00:06:36,204 --> 00:06:39,332
want to predicate unless we are reasonably sure, that

110
00:06:39,332 --> 00:06:42,530
the branch prediction is going to be highly accurate.
