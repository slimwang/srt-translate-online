1
00:00:00,000 --> 00:00:03,260
So the answer no is something we cannot obtain in finite time

2
00:00:03,260 --> 00:00:07,560
and that is why the Halting Problem is called semi-decidable,

3
00:00:07,560 --> 00:00:10,850
because we can kind of decide half of the answers

4
00:00:10,850 --> 00:00:13,290
and it's also called undecidable

5
00:00:13,290 --> 00:00:16,440
because we cannot output a clear yes or no

6
00:00:16,440 --> 00:00:18,510
after a finite amount of time.

7
00:00:18,510 --> 00:00:21,300
Why this nit-picking; what's the difference, you might ask.

8
00:00:21,300 --> 00:00:23,810
The interest of this, of course, is rather theoretic,

9
00:00:23,810 --> 00:00:26,130
but semi-decidable problems

10
00:00:26,130 --> 00:00:29,740
have a very interesting property called recursive enumerability.

11
00:00:29,740 --> 00:00:32,570
Now that sounds a bit strange; what does that mean?

12
00:00:32,570 --> 00:00:35,190
Recursive enumerability means that you can

13
00:00:35,190 --> 00:00:38,960
write a program that outputs all combinations

14
00:00:38,960 --> 00:00:42,090
of inputs and programs, and I seriously mean

15
00:00:42,090 --> 00:00:44,410
all combinations of inputs and programs

16
00:00:44,410 --> 00:00:46,010
that halt.

17
00:00:46,010 --> 00:00:48,280
So this program here cannot say

18
00:00:48,280 --> 00:00:52,320
for any input and program that this combination will not halt

19
00:00:52,320 --> 00:00:55,000
but it can output a complete list

20
00:00:55,000 --> 00:00:57,870
of inputs and programs that will halt,

21
00:00:57,870 --> 00:00:59,520
so let's have a look at this program,

22
00:00:59,520 --> 00:01:02,120
and of course, this program runs on infinitely,

23
00:01:02,120 --> 00:01:05,069
so it start off by defining a length called max length

24
00:01:05,069 --> 00:01:08,069
to be 0

25
00:01:08,069 --> 00:01:10,410
and then it goes into an infinite loop, which is this one here,

26
00:01:10,410 --> 00:01:13,080
and what it does then is it increases max length

27
00:01:13,080 --> 00:01:15,710
by one each time it goes into this loop here,

28
00:01:15,710 --> 00:01:19,310
enumerates all programs of length at most max length.

29
00:01:19,310 --> 00:01:21,630
Now if you fix this max length here,

30
00:01:21,630 --> 00:01:24,590
there is a huge number of programs

31
00:01:24,590 --> 00:01:26,220
that have a length at most max length

32
00:01:26,220 --> 00:01:28,600
but it's finite; it's huge but finite,

33
00:01:28,600 --> 00:01:30,330
and the same goes for the inputs.

34
00:01:30,330 --> 00:01:33,270
So for all combinations of programs and inputs

35
00:01:33,270 --> 00:01:36,630
that are shorter than this value max length here,

36
00:01:36,630 --> 00:01:40,190
we run a simulation for exactly max length steps

37
00:01:40,190 --> 00:01:43,900
and if the program halts on the input

38
00:01:43,900 --> 00:01:45,850
after exactly max length steps,

39
00:01:45,850 --> 00:01:48,850
then we print the program, and we print the input.

40
00:01:48,850 --> 00:01:50,400
If it hasn't halted yet,

41
00:01:50,400 --> 99:59:59,999
don't care, throw it away, wait until the next loop.
