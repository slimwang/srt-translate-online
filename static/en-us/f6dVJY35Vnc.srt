1
00:00:00,620 --> 00:00:05,360
The second major kind of relationship that you use in

2
00:00:05,360 --> 00:00:10,340
UML class model diagrams is generalization. Generalization is

3
00:00:10,340 --> 00:00:15,500
also indicated by a solid line, but in this case the line ends with a triangle.

4
00:00:17,320 --> 00:00:22,230
The class rectangle that's adjacent to the triangle is the superclass or

5
00:00:22,230 --> 00:00:27,780
parent class. And the other class rectangle is the child class or subclass.

6
00:00:30,620 --> 00:00:36,020
The semantic import of generalization is that

7
00:00:36,020 --> 00:00:41,270
all instances of the subclass are also instances of the parent class. That is

8
00:00:41,270 --> 00:00:46,830
there's a subset relationship. Let me warn you though that generalization is

9
00:00:46,830 --> 00:00:49,890
not the same as inheritance in object oriented programming languages.

10
00:00:50,900 --> 00:00:55,600
Inheritance is an implementation technique, generalization is a modeling,

11
00:00:56,990 --> 00:01:01,750
approach. We'll see how that difference plays out later in the course.

12
00:01:05,930 --> 00:01:11,120
In UML, generalization supports both multiple parent classes for

13
00:01:11,120 --> 00:01:17,670
a given class and multiple child classes for a given parent class. Moreover,

14
00:01:17,670 --> 00:01:24,460
you can specify discriminators. That is names of groups of subclasses.

15
00:01:24,460 --> 00:01:27,860
So here's an example of the UML class model diagram in

16
00:01:27,860 --> 00:01:33,260
which generalization is illustrated. We have a superclass called Vehicle.

17
00:01:33,260 --> 00:01:37,660
Note that it's got four lines coming into it each with an open triangle so

18
00:01:37,660 --> 00:01:42,525
it's got four sub-classes. Those sub-classes are wind powered vehicle,

19
00:01:42,525 --> 00:01:45,220
motor-powered vehicle, land vehicle and water vehicle.

20
00:01:46,590 --> 00:01:52,510
Notice also that we have two grandchild classes.

21
00:01:52,510 --> 00:01:57,640
We have trucks and we have sailboats. So let's think for a minute

22
00:01:57,640 --> 00:02:01,870
about trucks. Trucks are motor powered vehicles are motor powered vehicles but

23
00:02:01,870 --> 00:02:06,600
they're also land vehicles, that is truck has two parent classes.

24
00:02:07,900 --> 00:02:12,520
Similarly sailboat is a wind powered vehicle and a water vehicle so

25
00:02:12,520 --> 00:02:18,750
its got two parent classes as well. With respect to the parent level.

26
00:02:19,790 --> 00:02:25,100
We have two categories of sub-classes. We have a category related to

27
00:02:25,100 --> 00:02:29,790
the power that moves the vehicle, it might be wind or

28
00:02:29,790 --> 00:02:35,710
it might be motor. And we have a category having this labeled here as venue,

29
00:02:35,710 --> 00:02:41,130
indicating where the vehicle does its moving. Is it on land or is it on water?

30
00:02:43,240 --> 00:02:47,230
Also visible in this diagram are some properties in curly braces.

31
00:02:48,360 --> 00:02:55,260
Those properties indicate properties of the sub-classes. If a parent class has

32
00:02:55,260 --> 00:03:01,950
two child classes, and instances can belong to both of the child classes.

33
00:03:01,950 --> 00:03:07,570
We want to use the overlapping property. If that

34
00:03:07,570 --> 00:03:12,100
can't be the case that is if a given instance can only belong to one child,

35
00:03:12,100 --> 00:03:17,490
we say that those particular sub-classes are disjoint,

36
00:03:17,490 --> 00:03:23,180
their members belong to one of the child classes not the other and. But

37
00:03:23,180 --> 00:03:28,280
by our definition of generalization, the instances do belong to the,

38
00:03:28,280 --> 00:03:33,400
to the parent class. A second kind of constrained or

39
00:03:33,400 --> 00:03:35,840
property we might want to express is whether or

40
00:03:35,840 --> 00:03:41,270
not the set, of child classes covers all of the instances or not.

41
00:03:43,190 --> 00:03:49,100
If that's the case we say, we would use the, property, complete, and

42
00:03:49,100 --> 00:03:54,480
otherwise we would say incomplete. Why might a modeling situation be incomplete?

43
00:03:55,590 --> 00:04:00,810
Well you might have some weird hybrid vehicle that doesn't belong to any of the.

44
00:04:00,810 --> 00:04:04,000
The child classes, but nevertheless we want to have an instance that,

45
00:04:05,580 --> 00:04:09,420
that recognizes it, or, or models it, say the Segway, for example.
