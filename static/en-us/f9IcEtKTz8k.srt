1
00:00:00,310 --> 00:00:03,080
Okay. So now that we have seen a little example of

2
00:00:03,080 --> 00:00:07,970
how the ROB-based processor works, let's look at a ROB timing example. So this

3
00:00:07,970 --> 00:00:12,710
is how we can figure out what happens when without actually tracking everything,

4
00:00:12,710 --> 00:00:17,840
like in the previous, very busy video. Here we have some instructions.

5
00:00:17,840 --> 00:00:20,890
Here we have what latencies of various units are.

6
00:00:20,890 --> 00:00:23,430
And now we're just going to track when instructions are issued,

7
00:00:23,430 --> 00:00:27,420
when they begin executing, when do they write the result, broadcast it, and

8
00:00:27,420 --> 00:00:31,740
when do they commit. And here we will put some comments that kind of, you know,

9
00:00:31,740 --> 00:00:34,030
help us tell what happened when and

10
00:00:34,030 --> 00:00:39,340
why. This time, let's make it a bit different from before. First,

11
00:00:39,340 --> 00:00:43,450
our processor will free our reservation station when the result is broadcast,

12
00:00:43,450 --> 00:00:47,210
not when we actually dispatch the instruction. This can happen for

13
00:00:47,210 --> 00:00:50,940
example, because a processor is doing something speculative and

14
00:00:50,940 --> 00:00:54,540
it wants to keep the instruction until it's really sure that you know,

15
00:00:54,540 --> 00:00:58,350
the instructions should have executed. So some of the processors actually do

16
00:00:58,350 --> 00:01:02,830
this. So, let's try an example with this. The processor can still issue,

17
00:01:02,830 --> 00:01:08,240
capture a result and dispatch the instruction in the same cycle. But

18
00:01:08,240 --> 00:01:12,870
the execution will again happen in the following cycle. This is just like

19
00:01:12,870 --> 00:01:16,680
the previous processors. And again, we have the add take one cycle,

20
00:01:16,680 --> 00:01:19,800
the multiplication takes ten cycles and divide takes 40 cycles.

21
00:01:19,800 --> 00:01:26,070
So let's see. Well, in cycle one, we will try to issue the first instruction and

22
00:01:26,070 --> 00:01:28,730
nothing else can happen because we do not have any other instructions in

23
00:01:28,730 --> 00:01:32,130
the processor. This instruction, of course, being the first one that we know

24
00:01:32,130 --> 00:01:35,930
does not depend on anything, so it will being executing in the second cycle.

25
00:01:35,930 --> 00:01:39,130
It is a divide instructions, it takes 40 cycles to do it.

26
00:01:39,130 --> 00:01:43,550
So, 40 cycles after this one, we will try to write the result, and

27
00:01:43,550 --> 00:01:48,420
that happens in cycle 42. And commit will happen in the following cycle,

28
00:01:48,420 --> 00:01:52,060
because this is the very first instruction, so we can just say 43 here.

29
00:01:52,060 --> 00:01:55,060
Now let's go to this multiplication. Once we have some instructions in

30
00:01:55,060 --> 00:01:58,100
the processor, we have to start worrying about reservation stations and

31
00:01:58,100 --> 00:02:01,910
ROB entries and so on, and we haven't said how many ROB entries we have, but

32
00:02:01,910 --> 00:02:05,830
let's say we have a lot of ROB entries. However, we still have two divide

33
00:02:05,830 --> 00:02:10,500
multiply reservation stations and three add subtract reservations stations.

34
00:02:10,500 --> 00:02:13,610
So now, one of our reservation stations for divide and

35
00:02:13,610 --> 00:02:19,350
multiply is busy between cycles one and 42. There is, however,

36
00:02:19,350 --> 00:02:24,070
another one so this multiplication can be issued in the following cycle. So

37
00:02:24,070 --> 00:02:29,310
it will issue in cycle two. When can it execute? Well, it uses R5 and R6.

38
00:02:29,310 --> 00:02:34,900
This doesn't use R3, so it can actually execute in the very following cycle.

39
00:02:34,900 --> 00:02:38,255
So we will star executing it here, takes ten cycles, so

40
00:02:38,255 --> 00:02:43,650
it will broadcast the result in cycle 13. And when will we commit?

41
00:02:43,650 --> 00:02:47,660
Well, we cannot commit in cycle 14. Now, we have to wait for

42
00:02:47,660 --> 00:02:51,130
both the previous instruction to commit N for us to have a result, so

43
00:02:51,130 --> 00:02:55,065
really we will commit in cycle 44. Now let's look at this add here.

44
00:02:55,065 --> 00:03:00,697
It's using R7 and R8, so it will be executing right after it issues.

45
00:03:00,697 --> 00:03:04,460
We have ADDand subtract reservation stations, remember we have

46
00:03:04,460 --> 00:03:09,020
three separate reservation stations for that. So we will issue in cycle three,

47
00:03:09,020 --> 00:03:13,470
start execution in cycle four, takes only one cycle so we will write the result

48
00:03:13,470 --> 00:03:17,760
in cycle five, and now when do we commit this instruction in cycle 45.

49
00:03:17,760 --> 00:03:22,630
Now things become a little bit more interesting because this multiplication.

50
00:03:22,630 --> 00:03:26,330
Wants to issue in cycle four. Remember we are issuing instructions in order,

51
00:03:26,330 --> 00:03:31,030
we have reached this instruction in cycle four, we want to issue it. However,

52
00:03:31,030 --> 00:03:36,410
we need a multiplication and divide reservation station for that. And we free

53
00:03:36,410 --> 00:03:40,820
reservation stations when we broadcast, not when we dispatch this processor.

54
00:03:40,820 --> 00:03:46,420
So we already have in cycle two both of the reservation stations used.

55
00:03:46,420 --> 00:03:50,210
The first available one will become at cycle 13.

56
00:03:50,210 --> 00:03:54,950
So basically we only cycle 14 we can actually issue this instruction. So

57
00:03:54,950 --> 00:03:58,600
this instruction was waiting to issue, but couldn't because there was no

58
00:03:58,600 --> 00:04:02,200
free reservation station. So let's kind of note this. So

59
00:04:02,200 --> 00:04:06,410
this is just kind of to note that basically we have been delayed in our issue

60
00:04:06,410 --> 00:04:12,170
because of the needing the reservation station. We're using results of R1 and

61
00:04:12,170 --> 00:04:18,820
R3. So we have to wait for the multiplication and ADD before we can execute.

62
00:04:18,820 --> 00:04:24,900
But those are results having broadcast in cycles 13 and five, so in cycle 15,

63
00:04:24,900 --> 00:04:29,720
which is when we can try to execute, we can. If we manage to issue in cycle

64
00:04:29,720 --> 00:04:34,050
four, we will still have to wait until cycle 14 here because of cycle 13 here.

65
00:04:34,050 --> 00:04:36,800
So pretty much, our result will be broadcast in cycle 13.

66
00:04:36,800 --> 00:04:41,040
We will be able to dispatch only in 13, we would be executing in 14. Because we

67
00:04:41,040 --> 00:04:45,370
also needed to wait for a reservation station, we couldn't issue until cycle 14,

68
00:04:45,370 --> 00:04:49,760
so we can only execute in cycle 15. It's a multiplication instruction, so

69
00:04:49,760 --> 00:04:54,120
it's going to try to broadcast the result in cycle 25 and we will be able to

70
00:04:54,120 --> 00:04:58,092
commit it in cycle 46. Now let's look at this attract instruction.

71
00:04:58,092 --> 00:05:02,010
If it's going to try to issue in cycle 15 we have to issue in order.

72
00:05:02,010 --> 00:05:07,470
So although we could have issued this instruction in cycle four as far as,

73
00:05:07,470 --> 00:05:10,517
you know, dependencies are concerned, because we couldn't have

74
00:05:10,517 --> 00:05:14,510
issue this instruction in cycle three, four, five if everything was okay. And

75
00:05:14,510 --> 00:05:16,760
there was a free reservation station at the time here.

76
00:05:16,760 --> 00:05:21,950
But remember, we have to issue instructions in order. Because of that, this will

77
00:05:21,950 --> 00:05:26,690
issue in cycle 15, and we will now grab another reservation station in the ADD,

78
00:05:26,690 --> 00:05:32,110
subtracting. So now what happens is we need to figure out when do we execute?

79
00:05:32,110 --> 00:05:36,478
We need R1 and R5, the R1 comes from this multiplication.

80
00:05:36,478 --> 00:05:40,320
The R5 is already available because none of them are producing it.

81
00:05:40,320 --> 00:05:45,120
The R1 here becomes available after this result is written. So

82
00:05:45,120 --> 00:05:50,130
in cycle 25, we grab the value we need. And then in cycle 26,

83
00:05:50,130 --> 00:05:55,290
we begin executing. It's a subtract. It's going to finish in cycle 27.

84
00:05:55,290 --> 00:06:01,710
And it's going to commit in cycle 47, not because of this, but because of this.

85
00:06:01,710 --> 00:06:06,707
And finally let's look at this ADD here. It's going to issue in cycle 16.

86
00:06:06,707 --> 00:06:11,032
Execution will begin when R4 and R2 are available.

87
00:06:11,032 --> 00:06:16,070
R4 is available in cycle 27, but R2 is available only cycle 42.

88
00:06:16,070 --> 00:06:22,190
So we will dispatch in cycle 42 and begin executing in cycle 43.

89
00:06:22,190 --> 00:06:28,740
We will write our result one cycle after that. And we will commit in cycle 48.

90
00:06:28,740 --> 00:06:34,300
And that concludes our discussion. Now, here you want to make a note, for

91
00:06:34,300 --> 00:06:39,040
example, that the issue has been delayed because of reservation stations. And

92
00:06:39,040 --> 00:06:43,050
for these instructions, for example here, you may want to note that execution

93
00:06:43,050 --> 00:06:48,850
has been delayed because of R2. Just so that if you, on an exam or something,

94
00:06:48,850 --> 00:06:53,690
if you slightly mess this up, if you made these notes at least whoever is

95
00:06:53,690 --> 00:06:57,700
grading this will be able to follow, you know, what went wrong and you know,

96
00:06:57,700 --> 00:07:00,900
what was your real mistake, and what was just a consequence of that mistake.
