1
00:00:00,000 --> 00:00:06,000
And the answer is rabbit. Tada!

2
00:00:06,000 --> 00:00:12,000
I figured that was a good animal to use for a magic trick and have it come out of the hat.

3
00:00:12,000 --> 00:00:17,000
But how did that work? There wasn't anything tricky about the code itself.

4
00:00:17,000 --> 00:00:20,000
It really is literally doing what I said, which is taking the weights that you give it,

5
00:00:20,000 --> 00:00:25,000
multiplying them by the feature values for each of the animals computing a score and then sorting.

6
00:00:25,000 --> 00:00:31,000
Here's what happens when I gave it the values that I just had in the code here,

7
00:00:31,000 --> 00:00:34,000
and you see that just like the numbers that you used with the numbers that I used,

8
00:00:34,000 --> 00:00:40,000
rabbit ended up in this fourth position and in this position, that's labeled no. 3.

9
00:00:40,000 --> 00:00:42,000
But you can change these values.

10
00:00:42,000 --> 00:00:46,000
You get a different ordering for everything, but you always get rabbit coming out in that position.

11
00:00:46,000 --> 00:00:49,000
And so that's the little bit of trickiness, right?

12
00:00:49,000 --> 00:00:52,000
I had to set things up so that rabbit would always come out in exactly this position.

13
00:00:52,000 --> 00:00:55,000
The other ones can change values, but rabbit can't.

14
00:00:55,000 --> 00:01:02,000
And the way that I did this is by making sure that in all of these lists

15
00:01:02,000 --> 00:01:09,000
all these different feature values, the rabbit was always the fourth highest

16
00:01:09,000 --> 00:01:14,000
and it was always higher than mouse, frog, and sparrow

17
00:01:14,000 --> 00:01:18,000
and always smaller than dog, shark, lion, horse, human, hippopotamus, and elephant.

18
00:01:18,000 --> 00:01:21,000
They can have different orderings relative to each other,

19
00:01:21,000 --> 00:01:25,000
but they always have to have the same ordering relative to rabbit.

20
00:01:25,000 --> 00:01:28,000
And so once we've actually combined all these weights together,

21
00:01:28,000 --> 00:01:34,000
what we'll find is that whatever the weight is that the total score is going to be for rabbit--

22
00:01:34,000 --> 00:01:38,000
for example, horse has to be bigger because it's bigger on every single one of the dimensions

23
00:01:38,000 --> 00:01:42,000
when we take this non-negative weighted combination--

24
00:01:42,000 --> 00:01:49,000
it's going to keep that property as it is and that's the magic trick.

25
00:01:49,000 --> 00:01:52,000
There's one other thing I could've done, but I didn't do,

26
00:01:52,000 --> 00:01:58,000
which is to have two different animals who always have exactly opposite values on some feature.

27
00:01:58,000 --> 00:02:04,000
That no matter what combination I used, they're either, let's say frog and shark, that either

28
00:02:04,000 --> 00:02:09,000
frog is below and shark is above or shark is above and frog is below.

29
00:02:09,000 --> 00:02:15,000
But I wanted to stay as close as possible to the actual values that I was able to find on the Internet.

30
00:02:15,000 --> 00:02:17,000
As you might imagine, these aren't actually the values that I found.

31
00:02:17,000 --> 00:02:23,000
I found values and then I tweaked them to make sure that the property held.
