1
00:00:00,320 --> 00:00:02,860
In the previous lesson we looked at efficient

2
00:00:02,860 --> 00:00:08,170
implementation of mutual exclusion lock algorithms. In this lesson

3
00:00:08,170 --> 00:00:10,750
we're going to look at barrier synchronization how, how

4
00:00:10,750 --> 00:00:15,290
to implement that efficiently in the operating system. And

5
00:00:15,290 --> 00:00:17,930
just to refresh your memory about the barrier

6
00:00:17,930 --> 00:00:20,560
the barrier synchronization works like this, that you have

7
00:00:20,560 --> 00:00:22,580
a bunch of processors and they all need to

8
00:00:22,580 --> 00:00:25,600
know where they are with respect to each other.

9
00:00:25,600 --> 00:00:27,920
Where they want to, reach a barrier. And they want to

10
00:00:27,920 --> 00:00:31,620
wait here until everybody has arrived at this barrier. So

11
00:00:31,620 --> 00:00:35,530
if T1 arrives at the barrier, it's going to wait until

12
00:00:35,530 --> 00:00:38,500
everybody else has come. So one of the guys, maybe

13
00:00:38,500 --> 00:00:40,910
a straggler is going to come a little later, and in

14
00:00:40,910 --> 00:00:45,240
that case, everybody has to wait until all the threads

15
00:00:45,240 --> 00:00:47,660
that are part of this application have arrived at the

16
00:00:47,660 --> 00:00:51,110
barrier, then they can move on. And, and I mentioned

17
00:00:51,110 --> 00:00:54,070
to you that this kind of synchronization is very popular

18
00:00:54,070 --> 00:00:57,810
in scientific applications and they go through these phases where

19
00:00:57,810 --> 00:01:01,050
they execute code for a while, reach a barrier, and

20
00:01:01,050 --> 00:01:04,075
then execute code for a while, reach another barrier, execute

21
00:01:04,075 --> 00:01:06,040
four code for a while, reach a barrier and so

22
00:01:06,040 --> 00:01:09,740
on and so forth. And, and I mentioned also that

23
00:01:09,740 --> 00:01:12,850
in real life this happens quite often. When we go

24
00:01:12,850 --> 00:01:17,110
to a dinner with with a bunch of our friends and

25
00:01:17,110 --> 00:01:19,470
some of us show up early and others come

26
00:01:19,470 --> 00:01:23,894
late. The usher is going to hold us all, ransom. Wait

27
00:01:23,894 --> 00:01:26,610
'til everyone is here. Until, until then I cannot

28
00:01:26,610 --> 00:01:29,160
seat you. So that same sort of this that's happening,

29
00:01:29,160 --> 00:01:31,460
with the barrier that all of the threads have

30
00:01:31,460 --> 00:01:34,480
to arrive at the barrier, only then they can proceed

31
00:01:34,480 --> 00:01:39,430
on. So that's the semantic of the Barrier Synchronization. And

32
00:01:39,430 --> 00:01:43,190
I'm going to describe to you a very simple implementation

33
00:01:43,190 --> 00:01:46,130
of this barrier. The first algorithm I'm going to describe to

34
00:01:46,130 --> 00:01:48,930
you as what is called a centralized barrier or also sometimes

35
00:01:48,930 --> 00:01:52,610
called a counting barrier. So centralized barrier, counting barrier, that's a

36
00:01:52,610 --> 00:01:56,550
name that, that's given to this. The idea is very, very

37
00:01:56,550 --> 00:01:58,880
simple. You have a counter, that's why it's called a counting

38
00:01:58,880 --> 00:02:02,180
barrier. You have a counter. And the counter is initialized to

39
00:02:02,180 --> 00:02:04,840
N, where N is the number of threads that need to

40
00:02:04,840 --> 00:02:08,729
synchronize at the barrier. And what is going to happen is that,

41
00:02:08,729 --> 00:02:12,010
when a thread arrives at the barrier, it's going to atomically decrement

42
00:02:12,010 --> 00:02:14,940
the count. A key thing is it has to be done

43
00:02:14,940 --> 00:02:20,085
atomically. So once is it atomically decremented and the count then,

44
00:02:20,085 --> 00:02:23,290
it's going to wait for the count to become zero. So long

45
00:02:23,290 --> 00:02:26,300
as the count is not zero, it's going to wait. So if

46
00:02:26,300 --> 00:02:28,810
the count is zero, we're going to do something else, but if

47
00:02:28,810 --> 00:02:31,970
the count is not zero that means that, I've arrived at

48
00:02:31,970 --> 00:02:34,490
the barrier, but I don't know where the others are yet.

49
00:02:34,490 --> 00:02:36,800
So I'm going to wait. So they're, they're going to spin

50
00:02:36,800 --> 00:02:39,050
and the spin is basically saying while count is greater

51
00:02:39,050 --> 00:02:42,630
then zero, spin. And all the processors except the last

52
00:02:42,630 --> 00:02:46,210
one are going to be doing this spinning on count

53
00:02:46,210 --> 00:02:49,240
becoming zero. Now the last processor, the straggler may

54
00:02:49,240 --> 00:02:54,150
be the T2's sta-, straggler. And the straggler arrives eventually.

55
00:02:54,150 --> 00:02:56,410
And when he arrives, then what he's going to do is

56
00:02:56,410 --> 00:02:59,195
he's going to decrement also. And when he decrements the count,

57
00:02:59,195 --> 00:03:02,600
he'll see that the count has become zero. And so what

58
00:03:02,600 --> 00:03:04,840
he will do is he'll reset the count back up to

59
00:03:04,840 --> 00:03:07,780
N. And that is indication that everybody, so, so all of

60
00:03:07,780 --> 00:03:10,800
these guys are waiting on count being greater than zero. So

61
00:03:10,800 --> 00:03:13,630
as soon as the count becomes zero, then they can, they

62
00:03:13,630 --> 00:03:17,830
can be released from the barrier. And the last processor to

63
00:03:17,830 --> 00:03:20,920
arrive is going to reset the count to N to indicate that

64
00:03:20,920 --> 00:03:24,600
when these guys go off, before they come to the next barrier,

65
00:03:24,600 --> 00:03:26,600
the count has to be N. So that's the

66
00:03:26,600 --> 00:03:31,273
idea behind that. So very simple algorithm. Decrement the count

67
00:03:31,273 --> 00:03:34,820
atomically when you come to the barrier. If the count

68
00:03:34,820 --> 00:03:37,290
is greater than zero, then you know that everybody has

69
00:03:37,290 --> 00:03:41,370
not arrived, spin. And everybody except the last guy

70
00:03:41,370 --> 00:03:43,680
will do the spin. And the last guy that comes

71
00:03:43,680 --> 00:03:46,580
around decrements the counter for, and, and the counter becomes

72
00:03:46,580 --> 00:03:49,630
zero. And once the counter becomes zero, all the guys

73
00:03:49,630 --> 00:03:50,690
that are stuck here, they're going to be

74
00:03:50,690 --> 00:03:54,270
released. And then the last processor will reset this

75
00:03:54,270 --> 00:03:58,880
count to N so that you know, all these guys are now on their way to the

76
00:03:58,880 --> 00:04:00,980
next barrier. So, it is resetting it to

77
00:04:00,980 --> 00:04:04,110
N so that the barrier can be executed again

78
00:04:04,110 --> 00:04:05,870
when all these guys get to the next

79
00:04:05,870 --> 00:04:08,390
barrier. And that's the idea behind the centralized barrier.
