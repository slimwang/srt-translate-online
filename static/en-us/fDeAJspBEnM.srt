1
00:00:00,480 --> 00:00:04,830
One reason to build this network
by stacking simple operations,

2
00:00:04,830 --> 00:00:06,630
like multiplications, and sums,

3
00:00:06,630 --> 00:00:11,490
and RELUs, on top of each other is
that it makes the math very simple.

4
00:00:11,490 --> 00:00:14,420
Simple enough that a deep learning
framework can manage it for you.

5
00:00:16,090 --> 00:00:18,330
The key mathematical
insight is the chain rule.

6
00:00:18,330 --> 00:00:22,140
If you have two functions
that get composed, that is,

7
00:00:22,140 --> 00:00:24,390
one is applied to
the output of the other,

8
00:00:24,390 --> 00:00:27,550
then the chain rule tells you that you
can compute the derivatives of that

9
00:00:27,550 --> 00:00:32,119
function simply by taking the product
of the derivatives of the components.

10
00:00:33,140 --> 00:00:34,720
That's very powerful.

11
00:00:34,720 --> 00:00:37,440
As long as you know how to write
the derivatives of your individual

12
00:00:37,440 --> 00:00:41,540
functions, there is a simple graphical
way to combine them together and

13
00:00:41,540 --> 00:00:43,720
compute the derivative for
the whole function.

14
00:00:44,730 --> 00:00:47,710
There's even better news for
the computer scientist in you.

15
00:00:47,710 --> 00:00:51,700
There is a way to write this chain rule
that is very efficient computationally,

16
00:00:51,700 --> 00:00:55,230
with lots of data reuse, and that looks
like a very simple data pipeline.
