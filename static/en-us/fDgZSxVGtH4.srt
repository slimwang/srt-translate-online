1
00:00:00,000 --> 00:00:03,000
Once again generalize.

2
00:00:03,000 --> 00:00:07,000
This time I want to go back to the bridge problem and generalize that.

3
00:00:07,000 --> 00:00:10,000
What we're going to come up with is lower<u>cost</u>search,

4
00:00:10,000 --> 00:00:15,000
and that'll take some arguments and again return a path, but let's figure out what we need.

5
00:00:15,000 --> 00:00:18,000
Yes, we're going to need the start state just like before.

6
00:00:18,000 --> 00:00:23,000
We're going to need a successor function, and we're going to need a goal function.

7
00:00:23,000 --> 00:00:26,000
In addition, we're going to need one more thing.

8
00:00:26,000 --> 00:00:29,000
We're going to need to know the cost of an action.

9
00:00:29,000 --> 00:00:33,000
That's going to be necessary. It's going to have to be a parameter to the function.

10
00:00:33,000 --> 00:00:41,000
We'll have the start, the successors, the goal, and the action cost and return from that a path.

11
00:00:41,000 --> 00:00:45,000
There's a notion of action_cost, and as part of our inventory of concepts,

12
00:00:45,000 --> 00:00:51,000
there's also the notion of path cost, but that won't have to be passed in as a prohibitor.

13
00:00:51,000 --> 00:00:54,000
Let's see if you can define for me lowest<u>cost</u>search,

14
00:00:54,000 --> 00:00:59,000
which takes these four parameters and should perform the same type of search

15
00:00:59,000 --> 99:59:59,999
as we saw previously with the bridge problem.
