1
00:00:00,230 --> 00:00:04,541
The answer is going to depend on how each Z-def comparison goes. When the object

2
00:00:04,541 --> 00:00:08,762
is closer than whatever is already in the Z-buffer then the cost is 3 cycles,

3
00:00:08,762 --> 00:00:12,782
read the old z-def value, write the new Z-def value and then write the new

4
00:00:12,782 --> 00:00:16,361
color. We call the new value coming in the source and the old value the

5
00:00:16,361 --> 00:00:20,835
destination. When the object is farther away, only 1 cycle is needed. We'll

6
00:00:20,835 --> 00:00:24,358
always have the cost of leaving the destination of reading the Z-Buffer depth.

7
00:00:24,358 --> 00:00:28,268
When we compare the source to the destination, we get 3 cycles due to this path

8
00:00:28,268 --> 00:00:32,021
of having to actually replace the old color with the new color. And the old

9
00:00:32,021 --> 00:00:35,575
depth with the new depth. However, if we have the case where the source is

10
00:00:35,575 --> 00:00:39,824
greater than the destination, we're done. The object's hidden, and we don't have

11
00:00:39,824 --> 00:00:43,804
to do any further processing. So we only need 1 cycle. So let's look at the

12
00:00:43,804 --> 00:00:47,630
answers in reverse order. Back to front order, in fact, is the worst case

13
00:00:47,630 --> 00:00:52,110
possible. Since each object in turn is the closest object so far. So all values

14
00:00:52,110 --> 00:00:55,798
read in the z buffer will also be written. Randomizing might help avoid worst

15
00:00:55,798 --> 00:00:59,376
case behavior, but it's not the fastest way. Largest to smallest has no

16
00:00:59,376 --> 00:01:03,002
predictable effect as the testing process is happening per pixel. So size

17
00:01:03,002 --> 00:01:06,911
doesn't really matter. So this first answer is the correct one. Roughly sorting

18
00:01:06,911 --> 00:01:11,195
and drawing objects from front to back is indeed a way in which applications

19
00:01:11,195 --> 00:01:12,760
optimize GTU performance.
