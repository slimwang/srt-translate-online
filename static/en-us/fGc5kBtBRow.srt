1
00:00:00,140 --> 00:00:01,861
You've learned how to create branches and

2
00:00:01,861 --> 00:00:05,310
how to keep track of which branches contain which commits, using diagrams.

3
00:00:05,310 --> 00:00:08,790
Now, let's take a look at how to combine changes from multiple branches into

4
00:00:08,790 --> 00:00:10,190
a single version.

5
00:00:10,190 --> 00:00:12,200
Since the coins branch is finished,

6
00:00:12,200 --> 00:00:14,354
I'd like to incorporate the changes into the master branch.

7
00:00:14,354 --> 00:00:17,700
If no changes had been made to the master in the meantime, back when I

8
00:00:17,700 --> 00:00:21,670
first started it, I could just update the label to be where I am now.

9
00:00:21,670 --> 00:00:23,860
But changes have been made in master.

10
00:00:23,860 --> 00:00:28,420
So I'll need to somehow combine the coin branch, with the master branch and

11
00:00:28,420 --> 00:00:32,500
create a single version that contains all the changes from both.

12
00:00:32,500 --> 00:00:35,810
Git can actually combine the master branch with the coin branch automatically,

13
00:00:35,810 --> 00:00:37,160
which is pretty impressive.

14
00:00:37,160 --> 00:00:41,370
To get an idea of how this works, let's look at a simple example first.

15
00:00:41,370 --> 00:00:44,310
Suppose two people, I'll call them Jake and

16
00:00:44,310 --> 00:00:47,820
Rachel, are editing two copies of the same file independently.

17
00:00:47,820 --> 00:00:52,490
You can imagine that this is the game.js file from the Asteroids repository or

18
00:00:52,490 --> 00:00:53,700
any other file, really.

19
00:00:53,700 --> 00:00:57,100
At the beginning of the day, they both start with the same version of the file.

20
00:00:57,100 --> 00:01:01,840
During the day, each of them makes some changes, possibly adding some lines, or

21
00:01:01,840 --> 00:01:03,420
removing some lines.

22
00:01:03,420 --> 00:01:04,330
At the end of the day,

23
00:01:04,330 --> 00:01:07,170
Jake's version of the file contains some lines of content.

24
00:01:07,170 --> 00:01:09,500
We'll refer to them as B, D and E.

25
00:01:09,500 --> 00:01:11,750
Now of course, in reality,

26
00:01:11,750 --> 00:01:15,310
these would be lines of code or may be instructions for a recipe.

27
00:01:15,310 --> 00:01:16,620
But I'm using letters instead, so

28
00:01:16,620 --> 00:01:19,790
that you can focus on how to create a combined version of file without getting

29
00:01:19,790 --> 00:01:22,390
bugged down by thinking about the specific content.

30
00:01:22,390 --> 00:01:25,860
Similarly Rachel's version contained a couple of lines.

31
00:01:25,860 --> 00:01:27,370
A, B, C and D.

32
00:01:28,420 --> 00:01:32,270
Now, Jake and Rachel want to combine their two files into a single version with

33
00:01:32,270 --> 00:01:33,790
both of their changes.

34
00:01:33,790 --> 00:01:37,470
For each line, mark whether you think it should be present in the final file.

35
00:01:37,470 --> 00:01:40,040
Pick yes if it should definitely be in the file.

36
00:01:40,040 --> 00:01:41,580
No if definitely not.

37
00:01:41,580 --> 00:01:45,400
And unknown if it's impossible to figure this out from the information you have.

38
00:01:45,400 --> 00:01:48,590
This is a hard question, so don't worry about getting it right on the first try.

39
00:01:48,590 --> 00:01:51,670
Just try your best and think about each line individually
