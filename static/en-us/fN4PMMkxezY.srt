1
00:00:00,340 --> 00:00:03,435
I find that it helps me to break these down. So I'm going to start with just

2
00:00:03,435 --> 00:00:07,670
imaging printing the first row. This for loop might seem a little bit silly,

3
00:00:07,670 --> 00:00:13,582
but once I write it, I can compare it to the one for the second row. For each

4
00:00:13,582 --> 00:00:16,942
column, I want to print out a pair of square brackets, but in this case, the

5
00:00:16,942 --> 00:00:22,200
columns start at the first column and only go up to the first column. So

6
00:00:22,200 --> 00:00:25,393
that'll look like this. The for loop for the second row will look pretty

7
00:00:25,393 --> 00:00:30,450
similar except it'll print two pairs of brackets. One for column 1, one for

8
00:00:30,450 --> 00:00:34,000
column 2. So this is interesting, instead of something changing inside the

9
00:00:34,000 --> 00:00:38,040
loop, it's the actual loop condition itself that's changing form row to row.

10
00:00:38,040 --> 00:00:43,377
The threshold is actually the row itself, now these are exactly the same. So I

11
00:00:43,377 --> 00:00:47,379
could set row to 1 and do this and then increment row to 2 and do the exact

12
00:00:47,379 --> 00:00:52,365
same thing. Which means that I can put this code into a loop. So I'll indent

13
00:00:52,365 --> 00:00:57,305
it, remove the extra repetitions and now instead of just setting row to 1, I'll

14
00:00:57,305 --> 00:01:04,152
actually loop over all of the rows starting at 1. And going while row is less

15
00:01:04,152 --> 00:01:10,149
than or equal to the total number of rows. Let's see how much progress we've

16
00:01:10,149 --> 00:01:15,023
made after fixing typos. Well, it's certainly printing some brackets. Let's put

17
00:01:15,023 --> 00:01:22,474
some line breaks between the rows. Much better. This was kind of neat. In this

18
00:01:22,474 --> 00:01:27,028
problem, we used the outer loop variable to control the number of iterations in

19
00:01:27,028 --> 00:01:31,774
the inner loop. The loop condition of the inner loop depends on the loop

20
00:01:31,774 --> 00:01:34,330
counter variable for the outer loop.
