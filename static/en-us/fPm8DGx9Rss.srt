1
00:00:00,012 --> 00:00:02,419
Here's an example of the need for barriers.

2
00:00:02,419 --> 00:00:06,209
Say we've got an array in memory with a bunch of elements: 1, 2, 3, 4, 5, 6,

3
00:00:06,209 --> 00:00:08,878
and we want to shift each of these left by 1.

4
00:00:08,878 --> 00:00:11,615
In other words, we want this element go here,

5
00:00:11,615 --> 00:00:15,185
this element go here, this element go here and so on.

6
00:00:15,185 --> 00:00:18,223
So here's a little code snippet that should do this.

7
00:00:18,223 --> 00:00:21,859
We first initialize the elements of array to the thread index,

8
00:00:21,859 --> 00:00:25,528
and you'll see that I've hardcoded of this to 128 just to be lazy.

9
00:00:25,528 --> 00:00:31,201
So every thread is going to set its corresponding array element to its own index.

10
00:00:31,201 --> 00:00:34,946
So this should initialize things to 1, 2, 3, 4, 5, 6 and so on.

11
00:00:34,946 --> 00:00:39,075
And then avoiding stepping off the end of the array with this if statement,

12
00:00:39,075 --> 00:00:43,252
every thread will set its corresponding array element

13
00:00:43,252 --> 00:00:49,818
at its index equal to the value of the array element at the thread's index plus 1.

14
00:00:49,818 --> 00:00:54,155
So thread 1 will set its value to whatever is written in array sub 2.

15
00:00:54,155 --> 00:00:59,093
Thread 2 will set array sub 2 equal to whatever is in array sub 3 and so forth.

16
00:00:59,093 --> 00:01:04,803
So here's a quick quiz: How many barriers does this code need?
