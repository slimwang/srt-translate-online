1
00:00:00,420 --> 00:00:02,340
So that brings us to this concept of

2
00:00:02,340 --> 00:00:06,980
cache affinity scheduling. Basically, the idea is very, very

3
00:00:06,980 --> 00:00:10,730
simple. And, and that is, if let's say, that

4
00:00:10,730 --> 00:00:13,810
a particular process at P1. I had this thread

5
00:00:13,810 --> 00:00:15,920
T1 running for a while and it got

6
00:00:15,920 --> 00:00:18,070
descheduled at some point of time becuase it made

7
00:00:18,070 --> 00:00:20,920
an I/O call, it tried to synchronizes another thread.

8
00:00:20,920 --> 00:00:25,440
Whatever it is. Or time quantum. Expired for T1,

9
00:00:25,440 --> 00:00:27,420
any of those situations will result in T1 one

10
00:00:27,420 --> 00:00:31,090
getting descheduled, and then the schedule is going to

11
00:00:31,090 --> 00:00:33,560
use the process of for, perhaps running some of

12
00:00:33,560 --> 00:00:36,540
the thread, but finally, at some point of time,

13
00:00:36,540 --> 00:00:42,180
if T1 gets ready to be scheduled again It makes a lot of sense for T1 to be

14
00:00:42,180 --> 00:00:46,650
scheduled on the same processor. Why? Because it used

15
00:00:46,650 --> 00:00:51,040
to run on, this processor P1 and therefore the,

16
00:00:51,040 --> 00:00:54,670
the memory contents of T1, T1 that needed

17
00:00:54,670 --> 00:00:58,710
to have its execution. We're in the cache

18
00:00:58,710 --> 00:01:04,739
of P1, and therefore, when T1 gets ready to run again, if I schedule T1 on the

19
00:01:04,739 --> 00:01:07,800
same processor, it is likely that T1 will

20
00:01:07,800 --> 00:01:11,430
find its working set in the caches of P1.

21
00:01:11,430 --> 00:01:12,970
That's the reason why it makes sense to

22
00:01:12,970 --> 00:01:16,240
say well, look, let's look at the affinity Of

23
00:01:16,240 --> 00:01:19,710
a particular threat to a processor. Cache affinity of

24
00:01:19,710 --> 00:01:22,800
a particular threat to a processor. So, the cache affinity

25
00:01:22,800 --> 00:01:24,990
for this thread is likely to be higher for

26
00:01:24,990 --> 00:01:28,840
P1 because, it ran on P1 before, got descheduled and

27
00:01:28,840 --> 00:01:30,960
is rescheduled on, when it is time to reschedule

28
00:01:30,960 --> 00:01:33,720
it if you reschedule it on the same processor, good

29
00:01:33,720 --> 00:01:37,480
chance that T1 will find its working set. In the

30
00:01:37,480 --> 00:01:41,630
memory hierarchy, the caches of processor P1. But can something

31
00:01:41,630 --> 00:01:44,100
go wrong? Well, what can go wrong is

32
00:01:44,100 --> 00:01:48,510
the following. When T1 was descheduled, the scheduler may

33
00:01:48,510 --> 00:01:51,000
have decided that, okay, P1 is now available for

34
00:01:51,000 --> 00:01:52,940
doing business for some of the thread, so it

35
00:01:52,940 --> 00:01:57,150
scheduled T2 and it scheduled T3 And eventually, when

36
00:01:57,150 --> 00:02:00,320
T1 gets ready to run again, it's ready to

37
00:02:00,320 --> 00:02:03,370
run again, but in between, it's running on the

38
00:02:03,370 --> 00:02:07,340
processor here and running on the processor again here,

39
00:02:07,340 --> 00:02:11,060
along this timeline. Two other intervening threads ran on

40
00:02:11,060 --> 00:02:14,730
P1. So watch out. The cache may be polluted

41
00:02:14,730 --> 00:02:20,550
by the contents of threads T2 and T3 So far as T1 is concerned. So, when T1 runs

42
00:02:20,550 --> 00:02:23,630
again, it's quite possible that it may not find

43
00:02:23,630 --> 00:02:26,220
a lot of its memory contents in the Cache

44
00:02:26,220 --> 00:02:29,410
because these two guys that got in the middle

45
00:02:29,410 --> 00:02:32,500
of its running on the process at T1 may have

46
00:02:32,500 --> 00:02:35,460
polluted the cache and gotten rid of a lot of

47
00:02:35,460 --> 00:02:38,328
this stuff that used to belong to T1, and therefore even

48
00:02:38,328 --> 00:02:41,950
though we, we made this choice that, well, when T1

49
00:02:41,950 --> 00:02:44,080
is ready to run, let's put it in on P1. But

50
00:02:44,080 --> 00:02:46,710
it used to run before. And that way, we can

51
00:02:46,710 --> 00:02:50,760
ensure that T1's working set, is probably in the cache of,

52
00:02:50,760 --> 00:02:55,240
process of B1. But unfortunately, these intervening threads may have

53
00:02:55,240 --> 00:02:57,620
polluted the cache. So that's something that you have to watch

54
00:02:57,620 --> 00:03:00,060
out for. So the moral of the story is

55
00:03:00,060 --> 00:03:03,880
that you want to exploit cache affinity. In scheduling threads

56
00:03:03,880 --> 00:03:07,490
on processors. But also, you have to be worried about

57
00:03:07,490 --> 00:03:10,420
any intervening threads that may have run on the same

58
00:03:10,420 --> 00:03:13,490
processor and may have polluted the cache as a result.

59
00:03:13,490 --> 00:03:15,900
So, that's something that you have to watch out for.

60
00:03:15,900 --> 00:03:19,050
So, now that I've introduced the idea of cache affinity

61
00:03:19,050 --> 00:03:23,140
for a processor,uh, we'll just pick to a particular thread,

62
00:03:23,140 --> 00:03:25,550
we are now ready to discuss different scheduling

63
00:03:25,550 --> 00:03:29,440
policies, that an operating system may choose to employ
