1
00:00:00,000 --> 00:00:03,000
Now speaking precisely.

2
00:00:03,000 --> 00:00:08,000
A heap isn't actually any particular data structure with some particular running time.

3
00:00:08,000 --> 00:00:14,000
It's actually kind of an abstract data type. It's a data type that supports three different operations.

4
00:00:14,000 --> 00:00:20,000
We have some kind of data and we can add a new number to say the set.

5
00:00:20,000 --> 00:00:25,000
We can also ask, of all the numbers that are in the set what's the smallest that we've got?

6
00:00:25,000 --> 00:00:32,000
And we can say, if you don't mind please remove the smallest from the structure that we have

7
00:00:32,000 --> 00:00:38,000
doing whatever updates are necessary so that the rest of the operations can be fulfilled.

8
00:00:38,000 --> 00:00:42,000
And we can implement these operations using ideas that we've already got.

9
00:00:42,000 --> 00:00:48,000
So things like we can insert into a structure, we can ask what's the smallest element in the structure,

10
00:00:48,000 --> 00:00:50,000
and we can remove the structure from it.

11
00:00:50,000 --> 00:00:52,000
Let's use this as an excuse to do a little review.

12
00:00:52,000 --> 00:00:58,000
Here's two natural ways of implementing the heap operations of inserting

13
00:00:58,000 --> 00:01:01,000
and finding and removing the minimum from the structure.

14
00:01:01,000 --> 00:01:05,000
We can do it with an ordered list or we can do it with an unordered list.

15
00:01:05,000 --> 00:01:07,000
And there's tradeoffs to doing it this way.

16
00:01:07,000 --> 00:01:16,000
What I'd like you to do is, for how long does it take to do an insert into an ordered list of logn.

17
00:01:16,000 --> 00:01:24,000
Is that constant time, log time, or linear time? Same thing for an unordered list.

18
00:01:24,000 --> 00:01:27,000
How long does it take to stick a new item into the list?

19
00:01:27,000 --> 00:01:30,000
And finally, now that you've done that, we've inserted a bunch of elements

20
00:01:30,000 --> 00:01:34,000
into the list and they're in there now and we want to ask the question,

21
00:01:34,000 --> 00:01:41,000
how long does it take to find and remove the minimum from an ordered list?

22
00:01:41,000 --> 00:01:44,000
Is it constant, log, or linear?

23
00:01:44,000 --> 00:01:48,000
Form an unordered list, to find the minimum value and remove it.

24
00:01:48,000 --> 00:01:53,000
I'd like for each of these rows you should check exactly one of the boxes.
