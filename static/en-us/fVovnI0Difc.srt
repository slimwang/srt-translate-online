1
00:00:00,320 --> 00:00:04,040
So let's take a minute and exam each of these five non-functional requirements

2
00:00:04,040 --> 00:00:06,730
that we'll be using in this lesson.

3
00:00:06,730 --> 00:00:10,260
After we do this we'll see how each of them influences systems built with

4
00:00:10,260 --> 00:00:12,330
different architectural styles.

5
00:00:12,330 --> 00:00:15,122
For each quality we will provide a definition.

6
00:00:15,122 --> 00:00:18,440
The ways in which the quality might be measured.

7
00:00:18,440 --> 00:00:21,330
And some devices that are used to provide this quality.

8
00:00:21,330 --> 00:00:25,120
First off for performance, the Software Engineering Institute's

9
00:00:25,120 --> 00:00:28,260
definition of performance is, that attribute of a computer system

10
00:00:28,260 --> 00:00:33,650
that characterizes the timeliness of the services delivered by the system.

11
00:00:33,650 --> 00:00:37,220
And we can measure this in a lot of different ways, in terms of response time,

12
00:00:37,220 --> 00:00:40,740
throughput, system capacity, system utilization.

13
00:00:40,740 --> 00:00:45,190
And there are many devices that programmers can use to improve performance for

14
00:00:45,190 --> 00:00:48,850
example caching, concurrency, memory management, and so on.

15
00:00:48,850 --> 00:00:52,740
The second quality we want to look at is maintainability, and

16
00:00:52,740 --> 00:00:56,590
this is the extent to which enhancements can be readily added to a system.

17
00:00:56,590 --> 00:00:58,510
This is sometimes also called evolvability,

18
00:00:58,510 --> 00:01:00,820
flexibility, adaptability, and so on.

19
00:01:00,820 --> 00:01:03,620
The measures and we have talked about these earlier are coupling and

20
00:01:03,620 --> 00:01:07,750
cohesion, and there's many devices such as encapsulation,

21
00:01:07,750 --> 00:01:12,670
publishing your interfaces, use of sub-classing, indirection, and wrapping.

22
00:01:12,670 --> 00:01:14,880
The third quality is reliability and

23
00:01:14,880 --> 00:01:20,055
this is the likelihood of failure, of system failure, in a given period of time.

24
00:01:20,055 --> 00:01:23,810
That is, the continuity of service that the system provides.

25
00:01:23,810 --> 00:01:28,400
The typical measure for this is called Mean Time To Failure, or MTTF.

26
00:01:28,400 --> 00:01:31,630
Some of the devices that can be used to provide a high

27
00:01:31,630 --> 00:01:36,210
reliability include redundancy, fault tolerance, and recovery blocks.

28
00:01:36,210 --> 00:01:40,390
Software safety is the extent to which a system protects against injury,

29
00:01:40,390 --> 00:01:45,330
loss of life, or property damage absence of catastrophic consequences.

30
00:01:45,330 --> 00:01:49,950
It can be measured in terms of the complexity of the system, the time coupling,

31
00:01:49,950 --> 00:01:52,240
and by fault tree analysis.

32
00:01:52,240 --> 00:01:55,920
Some of the devices include hardware interlocks, in the case that the particular

33
00:01:55,920 --> 00:02:00,870
system has peripheral hardware devices, and false containment strategies.

34
00:02:00,870 --> 00:02:03,810
The fifth quality that we'll, that we will look at, it is security.

35
00:02:03,810 --> 00:02:07,430
And this is the extent to which the system protects against unauthorized

36
00:02:07,430 --> 00:02:10,280
intrusion or provides confidentiality.

37
00:02:10,280 --> 00:02:14,650
Security is measured by levels such as confidential and top secret.

38
00:02:14,650 --> 00:02:17,650
And sometimes formal proofs are used to guarantee that

39
00:02:17,650 --> 00:02:21,380
the system obeys whatever its confidence level is.

40
00:02:21,380 --> 00:02:26,380
Some of the devices include authentication, authorization, security kernels,

41
00:02:26,380 --> 00:02:30,290
encryption, auditing and logging, and access control mechanisms
