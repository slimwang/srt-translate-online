1
00:00:07,720 --> 00:00:12,220
>> Sure. So once we built the code generator, we built a number of

2
00:00:12,220 --> 00:00:16,129
supporting tools that were useful in just understanding these assemblies and

3
00:00:16,129 --> 00:00:20,730
communicating them to to others. One of them is a graphical visualization tool

4
00:00:20,730 --> 00:00:25,580
that'll let you, let you look at in graph form in a,

5
00:00:25,580 --> 00:00:31,110
in a dot form. One of your assembly specs so that you can see exactly what

6
00:00:31,110 --> 00:00:34,980
the dependencies are, how the different refinements compose with one another.

7
00:00:34,980 --> 00:00:40,070
That's been really useful particularly as we were developing our [UNKNOWN] to

8
00:00:40,070 --> 00:00:43,320
begin with, because we've found that over time we could compare these,

9
00:00:43,320 --> 00:00:46,500
these different visualizations and we could see them getting simpler and

10
00:00:46,500 --> 00:00:52,190
simpler. So that was very useful. We also did we implemented some code metrics,

11
00:00:52,190 --> 00:00:58,250
so that we could track how large or small our refinements were.

12
00:00:58,250 --> 00:01:03,520
We, we hypothesized and this actually born out to be true that over time and

13
00:01:03,520 --> 00:01:09,090
after a lot of use, big refinements will break down into compositions

14
00:01:09,090 --> 00:01:13,450
of smaller ones and in fact that's happened. And we use code metrics now to,

15
00:01:13,450 --> 00:01:16,490
to help us find candidates that we should, should go

16
00:01:16,490 --> 00:01:21,080
kind of proactively dive into. So yeah, there are a number of little tools and

17
00:01:21,080 --> 00:01:23,430
supports like that, that are pretty useful.
