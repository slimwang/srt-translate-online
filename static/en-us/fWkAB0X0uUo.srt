1
00:00:00,158 --> 00:00:04,271
The way to do that is what we call a "procedure."

2
00:00:04,271 --> 00:00:08,372
A procedure is something that takes inputs in--

3
00:00:08,372 --> 00:00:10,550
there can be more than one--

4
00:00:10,550 --> 00:00:12,765
does some work on those inputs;

5
00:00:12,765 --> 00:00:16,891
and produces outputs as results.

6
00:00:16,952 --> 00:00:20,271
The idea of a procedure is a very powerful idea.

7
00:00:20,271 --> 00:00:22,818
This allows us to use a small amount of code

8
00:00:22,818 --> 00:00:24,508
to do many different things.

9
00:00:24,508 --> 00:00:27,131
We can have the same code operate on different inputs.

10
00:00:27,146 --> 00:00:30,994
Whatever we pass in as inputs to the procedure

11
00:00:30,994 --> 00:00:33,032
will be what that code operates on--

12
00:00:33,032 --> 00:00:35,460
and it can do different things depending on those inputs--

13
00:00:35,460 --> 00:00:38,260
and it produces outputs that tell us the result,

14
00:00:38,260 --> 00:00:40,132
based on the inputs that we passed in.

15
00:00:40,132 --> 00:00:42,466
You've seen things very similar to procedures

16
00:00:42,466 --> 00:00:44,693
in the previous unit.

17
00:00:44,693 --> 00:00:46,664
You saw the built-in operators--

18
00:00:46,664 --> 00:00:48,521
operators like "+."

19
00:00:48,521 --> 00:00:50,766
"+" took two numbers as its inputs,

20
00:00:50,766 --> 00:00:52,946
and, as its output,

21
00:00:52,946 --> 00:00:55,899
it produced the sum of those two numbers.

22
00:00:55,899 --> 00:00:57,486
Because it's a built-in operator,

23
00:00:57,486 --> 00:00:59,284
it's a little different from a procedure--

24
00:00:59,284 --> 00:01:03,026
the syntax that we use for it is different because it's a built-in operator--

25
00:01:03,026 --> 00:01:06,558
but, in terms of being something that abstractly operates on different inputs

26
00:01:06,558 --> 00:01:08,560
and produces the corresponding output,

27
00:01:08,560 --> 00:01:11,417
it's very much the same idea.

28
00:01:11,417 --> 00:01:12,821
What we're going to learn in this unit,

29
00:01:12,821 --> 00:01:14,777
is how to make our own procedures.

30
00:01:14,777 --> 00:01:16,979
Python provides a construct for doing that,

31
00:01:16,979 --> 00:01:19,710
and the grammar is to have the keyword "def"--

32
00:01:19,710 --> 00:01:21,843
that's short for "define"--

33
00:01:21,843 --> 00:01:23,643
followed by a name.

34
00:01:23,643 --> 00:01:26,504
And the name of a procedure is just like the name of a variable.

35
00:01:26,504 --> 00:01:29,283
It can be any string that starts with a letter,

36
00:01:29,283 --> 00:01:32,765
can be followed by letters and numbers and underscores.

37
00:01:32,765 --> 00:01:34,741
Anything that we could use as a variable,

38
00:01:34,741 --> 00:01:37,228
we can use as the name of a procedure.

39
00:01:37,228 --> 00:01:39,294
Then there's a left paren "("

40
00:01:39,294 --> 00:01:40,362
the left paren is very important--

41
00:01:40,378 --> 00:01:42,618
that's what makes it a procedure--

42
00:01:42,618 --> 00:01:45,968
and after the left paren we have a list of parameters.

43
00:01:45,968 --> 00:01:50,432
"Parameters" is just a fancy name for the inputs to the procedure.

44
00:01:50,432 --> 00:01:53,084
After that, there's a colon ":"

45
00:01:53,084 --> 00:01:56,290
This is what says we're making a procedure--

46
00:01:56,290 --> 00:01:58,481
it has this name;

47
00:01:58,481 --> 00:01:59,472
it takes these inputs.

48
00:01:59,472 --> 00:02:01,705
Then what we have to do is actually define the code.

49
00:02:01,705 --> 00:02:04,294
So, what follows that is a "block"--

50
00:02:04,294 --> 00:02:07,122
and a "block" is just a sequence of statements,

51
00:02:07,122 --> 00:02:09,720
the code that we want to run,

52
00:02:09,720 --> 00:02:11,754
as the body of the procedure.

53
00:02:11,754 --> 00:02:13,290
What the inputs are

54
00:02:13,290 --> 00:02:17,128
is just a list of names, separated by commas.

55
00:02:17,128 --> 00:02:19,129
We can have as many inputs as we want.

56
00:02:19,129 --> 00:02:20,972
There could be no inputs.

57
00:02:20,972 --> 00:02:24,948
In that case, what the parameters would look like is just two parens

58
00:02:24,948 --> 00:02:26,606
with nothing between them - "()"

59
00:02:26,606 --> 00:02:29,714
There could be one input.

60
00:02:29,714 --> 00:02:30,239
In that case, we'd have a paren, followed by a name,

61
00:02:30,239 --> 00:02:32,609
followed by a closed paren.

62
00:02:32,609 --> 00:02:33,917
Or there could be many inputs;

63
00:02:33,917 --> 00:02:35,855
in which case, we'd have a paren,

64
00:02:35,855 --> 00:02:37,454
followed by the name of the first input,

65
00:02:37,454 --> 00:02:39,522
followed by the name of the second input,

66
00:02:39,522 --> 00:02:41,723
followed by the name of the third,

67
00:02:41,723 --> 00:02:43,856
followed by as many inputs as we want.

68
00:02:43,856 --> 00:02:45,522
So, we could have five inputs,

69
00:02:45,522 --> 00:02:48,129
give them the names "a," "b," "c," "d," "e."

70
00:02:48,129 --> 00:02:49,866
This is not a good idea, usually,

71
00:02:49,866 --> 00:02:52,080
to give our parameters meaningless names;

72
00:02:52,080 --> 00:02:54,229
that makes it hard to remember what they are

73
00:02:54,229 --> 00:02:57,241
when we use them in the code that we write as the "block."

74
00:02:57,241 --> 00:02:59,798
We're much better off having parameters with names like "page"

75
00:02:59,798 --> 00:03:02,612
that remind us what they mean.

76
00:03:02,612 --> 00:03:04,429
The body of the procedure is the "block."

77
00:03:04,429 --> 00:03:08,337
This is the code that runs to execute the procedure.

78
00:03:08,337 --> 00:03:11,982
The "block" is indented inside the definition.

79
00:03:11,982 --> 00:03:13,979
Usually we like to use four spaces--

80
00:03:13,979 --> 00:03:15,552
that's just the convention in Python,

81
00:03:15,552 --> 00:03:18,519
and that makes it easy for people to see and read the code--

82
00:03:18,519 --> 00:03:21,460
but all the lines in the "block" have to be indented the same amount.

83
00:03:21,460 --> 00:03:23,148
That's how the interpreter knows

84
00:03:23,148 --> 00:03:25,235
that we've got to the end of the procedure,

85
00:03:25,235 --> 00:04:57,000
when we get to some code that's not indented anymore.
