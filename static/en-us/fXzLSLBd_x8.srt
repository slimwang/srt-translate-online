1
00:00:00,183 --> 00:00:04,278
You probably already know that computers
represent numbers in binary, or

2
00:00:04,278 --> 00:00:05,516
base two internally.

3
00:00:05,516 --> 00:00:10,031
The value of computer memory is
literally represented as a sequence of 1

4
00:00:10,031 --> 00:00:10,851
and 0 bits.

5
00:00:10,851 --> 00:00:14,361
But when you're writing code in
a language like Python or JavaScript,

6
00:00:14,361 --> 00:00:16,183
you don't normally see the binary.

7
00:00:16,183 --> 00:00:19,383
Numeric values are normally
displayed in decimal, and

8
00:00:19,383 --> 00:00:22,989
other values such as strings or
Booleans hide the actual binary

9
00:00:22,989 --> 00:00:26,200
representation away from
the programmer and the user.

10
00:00:26,200 --> 00:00:32,170
The letter a can be encoded as 01100001.

11
00:00:32,170 --> 00:00:35,958
But you don't need to know
that to print the word apple.

12
00:00:35,958 --> 00:00:38,881
The binary representation is
available to you when you need it.

13
00:00:38,881 --> 00:00:43,751
But IP addresses are one of those places
that the binary becomes a little bit

14
00:00:43,751 --> 00:00:44,764
more obvious.

15
00:00:44,764 --> 00:00:48,309
All of the information that's
transmitted over a network link travels

16
00:00:48,309 --> 00:00:50,088
in the form of a long stream of bits.

17
00:00:50,088 --> 00:00:53,344
It's divided up into
messages called packets, and

18
00:00:53,344 --> 00:00:57,118
each packet carries with it the IP
addresses of the sender and

19
00:00:57,118 --> 00:01:00,375
the recipient, and
these are each a binary number.

20
00:01:00,375 --> 00:01:04,497
An IP address is a 32-bit value or
4 bytes.

21
00:01:04,497 --> 00:01:08,349
Networking people will often said that
it's four octets instead of bytes

22
00:01:08,349 --> 00:01:11,402
because some old computers
use different sizes of bytes.

23
00:01:11,402 --> 00:01:14,781
An octet is specifically eight bits.

24
00:01:14,781 --> 00:01:19,602
This binary or this hexadecimal
representation make up the same IP

25
00:01:19,602 --> 00:01:24,350
address that in decimal
we write as 241.10.27.53.

26
00:01:24,350 --> 00:01:27,986
Writing the bytes or
octets separated with dots makes them

27
00:01:27,986 --> 00:01:32,228
a lot easier to read, than if we
ran them together in plain decimal.

28
00:01:32,228 --> 00:01:36,631
Besides IP addresses, we'll see several
other binary values that occur in

29
00:01:36,631 --> 00:01:39,464
packets which have different lengths and
bits.

30
00:01:39,464 --> 00:01:45,200
In networking, the width of a field
tells how many bits are in that field.

31
00:01:45,200 --> 00:01:47,360
We'll say, for instance,

32
00:01:47,360 --> 00:01:52,677
that an IPv4 address has a bit
width of 32 or it's 32-bits wide.

33
00:01:52,677 --> 00:01:55,545
Meaning 32 bits are used
to represent that value.
