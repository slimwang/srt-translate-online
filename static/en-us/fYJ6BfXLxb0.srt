1
00:00:00,000 --> 00:00:02,000
Let's go through this one in parts.

2
00:00:02,000 --> 00:00:08,000
Any regular expression starts with r' or r".

3
00:00:08,000 --> 00:00:11,000
I'm going to use the single quotes this time so that I won't have to escape

4
00:00:11,000 --> 00:00:12,000
quite as many of these.

5
00:00:12,000 --> 00:00:16,000
Then we want to match the blue " here at the beginning,

6
00:00:16,000 --> 00:00:19,000
and somewhere way at the end, we'll want to match the closing one,

7
00:00:19,000 --> 00:00:21,000
and that will be the end of our regular expression.

8
00:00:21,000 --> 00:00:23,000
So now we just have to think of what goes in here in the middle,

9
00:00:23,000 --> 00:00:26,000
and this may not be enough room. I may have to erase it and write it again.

10
00:00:26,000 --> 00:00:30,000
Now whatever it is, it's going to be 0 or more of something,

11
00:00:30,000 --> 00:00:35,000
and as we're going across the string, there's sort of backslashes,

12
00:00:35,000 --> 00:00:40,000
which are important, and everything else, which is not so important.

13
00:00:40,000 --> 00:00:43,000
So if there's any character that's not a backslash,

14
00:00:43,000 --> 00:00:45,000
and here I'm escaping the backslash,

15
00:00:45,000 --> 00:00:48,000
we can just read right over it--that's no problem inside of our string--

16
00:00:48,000 --> 00:00:54,000
or you could actually have an escape sequence, like this \".

17
00:00:54,000 --> 00:01:01,000
That looks like a literal backslash, followed by anything, and then it's done.

18
00:01:01,000 --> 00:01:03,000
So let me just diagram this a little more.

19
00:01:03,000 --> 00:01:09,000
Say this opening quote is 1, that matches things like this opening quote in the string.

20
00:01:09,000 --> 00:01:12,000
Then in here, we have anything that's not a backslash--that's 2.

21
00:01:12,000 --> 00:01:16,000
That's I-space-say-s-a-y-comma,

22
00:01:16,000 --> 00:01:18,000
but then eventually we do get to a backslash.

23
00:01:18,000 --> 00:01:23,000
Over here, we have a 2-character sequence that's a backslash followed by a dot.

24
00:01:23,000 --> 00:01:27,000
These 2 characters--the backslash, followed by the quote--they are 3,

25
00:01:27,000 --> 00:01:31,000
and then we're back to matching 2's--h, e, l, l, o, dot.

26
00:01:31,000 --> 00:01:36,000
Now we have another backslash and a quote, so these 2 together will be another 3,

27
00:01:36,000 --> 00:01:39,000
and then this part at the end is number 4.

28
00:01:39,000 --> 00:01:42,000
So I have 0 or more copies of my string body.

29
00:01:42,000 --> 00:01:47,000
The elements of my string body are either normal characters

30
00:01:47,000 --> 00:01:49,000
or 2-character escape sequences.

31
00:01:49,000 --> 00:01:52,000
All of this looks like 3 characters. It's really just 2.

32
00:01:52,000 --> 00:01:55,000
I have to escape the backslash.

33
00:01:55,000 --> 00:01:59,000
As a minor aside, after the Beatles and Sound of Music examples from above,

34
00:01:59,000 --> 00:02:02,000
you may not be surprised to know that a number of English songs

35
00:02:02,000 --> 00:02:12,000
of enduring popularity--ABC 123, BINGO--seem to have a regular expression sort of feel.

36
00:02:12,000 --> 00:02:16,000
Repetition is very common in songs, and you get the same thing out of it

37
00:02:16,000 --> 00:02:18,000
that you get out of a regular expression,

38
00:02:18,000 --> 00:02:22,000
a concise notation versus in choruses, but then when you expand it out,

39
00:02:22,000 --> 00:02:24,000
it takes a long time to sing.

40
00:02:24,000 --> 00:02:29,000
However, there is 1 song that is actually too complicated for regular expressions--

41
00:02:29,000 --> 00:02:32,000
the dreaded 99 Bottles of Beer on the Wall.

42
00:02:32,000 --> 00:02:34,000
If you actually want the counting to work out correctly--

43
00:02:34,000 --> 00:02:39,000
99 to 98 to 97--we can't fit it in a regular expression framework.

44
00:02:39,000 --> 00:02:44,000
We'll have to return to that later, and eventually we'll be smart enough to sing this song.

45
00:02:44,000 --> 00:02:48,000
For more info on this, Don Knuth, the computer scientist has written an essay

46
00:02:48,000 --> 99:59:59,999
on the complexity of songs.
