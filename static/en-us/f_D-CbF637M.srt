1
00:00:00,440 --> 00:00:02,300
We're going to cover
a lot in this lesson.

2
00:00:02,300 --> 00:00:06,400
Touching on both design and
implementation aspects of animation.

3
00:00:07,420 --> 00:00:10,300
Let's start by jumping
straight into some code.

4
00:00:10,300 --> 00:00:13,990
More specifically let's look at how
building animations with the Android SDK

5
00:00:13,990 --> 00:00:15,170
has evolved.

6
00:00:15,170 --> 00:00:17,360
From its humble beginnings
to the powerful and

7
00:00:17,360 --> 00:00:20,070
flexible APIs we have today.

8
00:00:20,070 --> 00:00:22,956
From the earliest releases
the Android .view,

9
00:00:22,956 --> 00:00:27,990
.animation APIs let you move,
scale, and fade items onscreen.

10
00:00:27,990 --> 00:00:32,210
This is available to every device
out there, but it's pretty limited.

11
00:00:32,210 --> 00:00:34,260
Here's a really simple example.

12
00:00:34,260 --> 00:00:38,380
Pressing the button slides it up, fades
it out, and then shows a new screen.

13
00:00:39,410 --> 00:00:40,760
And here's the code.

14
00:00:40,760 --> 00:00:43,970
First we create some objects,
like AlphaAnimation and

15
00:00:43,970 --> 00:00:47,969
TranslateAnimation and combine them
together using an AnimationSet.

16
00:00:49,020 --> 00:00:53,860
Then we add a listener, allowing us
to run code when the animation ends.

17
00:00:53,860 --> 00:00:58,530
In this example, when the animation
finishes we'll start another activity.

18
00:00:58,530 --> 00:01:01,140
We're also providing a custom transition

19
00:01:01,140 --> 00:01:04,050
telling the new activity how it
should appear on the screen, and

20
00:01:04,050 --> 00:01:07,480
telling the current activity
how it should disappear.

21
00:01:07,480 --> 00:01:12,540
Once we call startAnimation on the
button it'll begin to slide and fade.

22
00:01:12,540 --> 00:01:16,360
And once those are done our
animation listener will get called.

23
00:01:16,360 --> 00:01:21,170
It's worth noting that you could also
define these animations in XML and

24
00:01:21,170 --> 00:01:25,264
inflate them into real animation
objects using animation utils.

25
00:01:25,264 --> 00:01:30,540
And here's what the actual XML
looks like, back in the early

26
00:01:30,540 --> 00:01:35,520
days this seam XML format was used to
describe animations on views as well

27
00:01:35,520 --> 00:01:41,020
as transitions for activities It was
really simple, but also really limited.

28
00:01:41,020 --> 00:01:43,190
All you could really do was scale,

29
00:01:43,190 --> 00:01:47,860
move, rotate, and fade different
views or different activities.

30
00:01:47,860 --> 00:01:50,362
So around the time of Android 3.0 and

31
00:01:50,362 --> 00:01:56,040
4.0, the animation API started
receiving a slew of major upgrades.

32
00:01:56,040 --> 00:02:00,910
The API for basic view animations
got a lot simpler and easier to use.

33
00:02:00,910 --> 00:02:04,850
Here's that same animation
from before with the new API.

34
00:02:04,850 --> 00:02:08,310
Notice how the API uses
a fluent interface.

35
00:02:08,310 --> 00:02:13,570
You could chain together multiple calls
like .animate, .alpha, .translationY.

36
00:02:13,570 --> 00:02:17,700
This made for a much more compact code,
more importantly,

37
00:02:17,700 --> 00:02:21,810
you could also now animate
any property on any object.

38
00:02:21,810 --> 00:02:25,170
So while before you could animate
the x position of a view,

39
00:02:25,170 --> 00:02:29,250
you could now also animate
a buttons text color for example.

40
00:02:29,250 --> 00:02:31,260
So here's a quick example of this, and

41
00:02:31,260 --> 00:02:36,650
note that the Argbevevlatuator tells the
object animator what text color to set,

42
00:02:36,650 --> 00:02:40,150
ranging between black and red,
over the course of one second.
