1
00:00:00,590 --> 00:00:02,820
Now there's one more thing I
want to add to our diagram and

2
00:00:02,820 --> 00:00:06,320
that's something to represent
the idea of multiplicity.

3
00:00:06,320 --> 00:00:09,849
In object diagrams,
multiplicity is just a fancy word for

4
00:00:09,849 --> 00:00:13,168
the number of objects
represented in a relationship.

5
00:00:13,168 --> 00:00:16,753
This is another one of those things
that we're borrowing from UML.

6
00:00:16,753 --> 00:00:22,320
Now multiplicity goes hand and
hand with the contains relationships.

7
00:00:22,320 --> 00:00:23,930
If we look back at the world object,

8
00:00:23,930 --> 00:00:26,980
let's ask ourselves some
how many questions.

9
00:00:26,980 --> 00:00:27,530
For example,

10
00:00:27,530 --> 00:00:32,080
how many actors are in the world, or
how many backgrounds are in a world?

11
00:00:32,080 --> 00:00:36,700
You might say for every world we have
what looks like, could be, many actors,

12
00:00:36,700 --> 00:00:40,380
or for every world we
might have one background.

13
00:00:40,380 --> 00:00:44,430
And conventionally we use terms like
one to many, or many to many, or

14
00:00:44,430 --> 00:00:48,830
even many to one to
represent this multiplicity.

15
00:00:48,830 --> 00:00:50,934
So right now if we
think about the actors,

16
00:00:50,934 --> 00:00:54,722
we can see that there's two actors on
the screen, but there could be more or

17
00:00:54,722 --> 00:00:58,120
there could be worlds where
there's no actors at all.

18
00:00:58,120 --> 00:01:00,330
To be honest, we don't really know.

19
00:01:00,330 --> 00:01:03,890
So we could do two things here, since
we already have the app built, we could

20
00:01:03,890 --> 00:01:07,636
play around with it some more and find
out what are all the different cases for

21
00:01:07,636 --> 00:01:09,610
the number of actors in a world.

22
00:01:09,610 --> 00:01:12,920
Or for what would be the case if
we're designing this from scratch and

23
00:01:12,920 --> 00:01:17,400
we didn't have the app already, we could
just make a decision and go with it.

24
00:01:17,400 --> 00:01:23,120
For instance, we could say for any given
world there may be one to many actors.

25
00:01:23,120 --> 00:01:24,600
We don't know how many,
there could be a lot,

26
00:01:24,600 --> 00:01:26,980
there could be a little,
doesn't really matter.

27
00:01:26,980 --> 00:01:27,870
We could limit it.

28
00:01:27,870 --> 00:01:31,940
We could say for any one world there's
only ever going to be two actors.

29
00:01:31,940 --> 00:01:35,114
But I have a little bit of
an advantage because I already know

30
00:01:35,114 --> 00:01:37,733
that there could be one to
many actors in a world.

31
00:01:37,733 --> 00:01:39,409
And if we go back to our diagram,

32
00:01:39,409 --> 00:01:43,990
we can add the multiplicity to this
contains relationship for actors.

33
00:01:43,990 --> 00:01:47,840
And if we read the multiplicity from
left to right, it follows the same order

34
00:01:47,840 --> 00:01:52,910
as our arrows, so for every one world
we have, we can have many actors.

35
00:01:52,910 --> 00:01:55,750
Now let's look at another example,
this one'll be for

36
00:01:55,750 --> 00:01:57,660
the contains relationship for
the background.

37
00:01:58,660 --> 00:02:01,600
From what we saw there's only
one background for the world, so

38
00:02:01,600 --> 00:02:04,760
that means this relationship is 1-to-1.

39
00:02:04,760 --> 00:02:08,280
For every one world object
there's one background.

40
00:02:08,280 --> 00:02:10,526
The use of the 1-to-M and the 1-to-1,

41
00:02:10,526 --> 00:02:13,080
this is another thing that
we're taking from UML.

42
00:02:13,080 --> 00:02:18,590
So again, this is kind of a blend of
both a formal and a informal process.

43
00:02:18,590 --> 00:02:20,240
There's something else that
I want to point out and

44
00:02:20,240 --> 00:02:23,900
that is that the relationships
themselves and even the multiplicity

45
00:02:23,900 --> 00:02:28,660
can go in different directions, and
these arrows could be bidirectional.

46
00:02:28,660 --> 00:02:32,630
For example, right now the world
contains 1-to-M actors, but

47
00:02:32,630 --> 00:02:36,340
you may want an arrow going from
actor to world that says for

48
00:02:36,340 --> 00:02:39,910
every one actor,
it could live in many different worlds.

49
00:02:39,910 --> 00:02:43,600
If it were the case that in
the game an actor might show up in

50
00:02:43,600 --> 00:02:45,410
multiple different worlds.

51
00:02:45,410 --> 00:02:46,370
It's really up to you.

52
00:02:46,370 --> 00:02:48,660
You could build these diagrams
however you want, but

53
00:02:48,660 --> 00:02:51,070
these are just some really
popular conventions.

54
00:02:51,070 --> 00:02:53,981
And if you stick close to these
conventions, then it makes it easier for

55
00:02:53,981 --> 00:02:56,400
you to share your diagrams with others.

56
00:02:56,400 --> 00:02:59,560
It also makes it easier to take this
diagram and actually start writing code.

57
00:02:59,560 --> 00:03:04,150
And that's why there are the formal
processes like UML in place because it

58
00:03:04,150 --> 00:03:08,460
makes it easier to go from something
like UML to code, or historically has.

59
00:03:09,460 --> 00:03:12,642
There's one other key takeaway
that I want you to leave with and

60
00:03:12,642 --> 00:03:15,947
that is that you should use a process
for creating object diagrams

61
00:03:15,947 --> 00:03:19,089
that's the least restrictive
to you getting your work done.

62
00:03:19,089 --> 00:03:23,320
I mean, you could spend an entire day,
or weeks, designing an object diagram,

63
00:03:23,320 --> 00:03:26,372
but if it doesn't get you any
closer to a functioning app,

64
00:03:26,372 --> 00:03:29,230
then you might just
be wasting your time.

65
00:03:29,230 --> 00:03:33,390
But there's also great benefit of having
some kind of structure in mind before

66
00:03:33,390 --> 00:03:34,650
you build it.

67
00:03:34,650 --> 00:03:37,890
As a developer,
you'll discover what works best for you.

68
00:03:37,890 --> 00:03:41,138
Some people like to spend five
minutes on an object diagram,

69
00:03:41,138 --> 00:03:43,060
others could spend an entire week.

70
00:03:43,060 --> 00:03:45,912
And another thing is,
if you're working with a team,

71
00:03:45,912 --> 00:03:48,206
a good object diagram
could be a great way for

72
00:03:48,206 --> 00:03:52,830
the whole team to work together to
understand a really complex system.

73
00:03:52,830 --> 00:03:55,220
All right, I'm going to go ahead and
wrap things up here.

74
00:03:55,220 --> 00:03:58,280
But if you're interested, here's our
final diagram for the Alien Adventure,

75
00:03:58,280 --> 00:04:00,690
so take some time to look at it, and

76
00:04:00,690 --> 00:04:03,380
maybe you have a better idea
how to organize things.

77
00:04:03,380 --> 00:04:06,970
Anyways, I hope this was helpful, and
I encourage you to reach out to us, or

78
00:04:06,970 --> 00:04:08,670
to your peers if you
still have questions.
