1
00:00:00,000 --> 00:00:02,000
The third one is the correct answer.

2
00:00:02,000 --> 00:00:07,000
The first one wouldn't work. R2 couldn't decrypt this message

3
00:00:07,000 --> 00:00:10,000
and wouldn't know where to send the next hop.

4
00:00:10,000 --> 00:00:13,000
This one would work for the first hop. R2 would decrypt it.

5
00:00:13,000 --> 00:00:17,000
Note to send it on to R5, but would then when R5 receives it,

6
00:00:17,000 --> 00:00:21,000
it wouldn't be able to decrypt this message and know where to send it.

7
00:00:21,000 --> 00:00:26,000
It's also unnecessary to have this extra decryption using KUR2.

8
00:00:26,000 --> 00:00:30,000
This outer method has already encrypted using that public key.

9
00:00:30,000 --> 00:00:33,000
Anyone who can decrypt this message can also decrypt that one,

10
00:00:33,000 --> 00:00:36,000
so there's no value added by having this encryption.

11
00:00:36,000 --> 00:00:39,000
The third one is the best answer.

12
00:00:39,000 --> 00:00:45,000
Here we sending the message encrypted using R2's public key, so R2 can decrypt it.

13
00:00:45,000 --> 00:00:51,000
It has the next routing hop in plaintext in the message that R2 can decrypt.

14
00:00:51,000 --> 00:00:55,000
Then it has the rest of it encrypted using R5's public key,

15
00:00:55,000 --> 00:01:00,000
so R5 will be able to decrypt the next hop and learn that that should be sent on to R4.

16
00:01:00,000 --> 00:01:03,000
The problem with the fourth choice--it would work for this hop,

17
00:01:03,000 --> 00:01:07,000
but then when R5 decrypts it, it wouldn't know what the next hop is.

18
00:01:07,000 --> 00:01:14,000
The final option wouldn't work, because R2 would get the message to send to R5

19
00:01:14,000 --> 00:01:17,000
and send the message here--which is M4.

20
00:01:17,000 --> 00:01:23,000
That's encrypted using R4's public key. R5 wouldn't know where to send the message.

21
00:01:23,000 --> 00:01:25,000
The only one that works is the third choice.

22
00:01:25,000 --> 00:01:31,000
In general, for onion routing to work, we need each message in the chain to be the message

23
00:01:31,000 --> 00:01:34,000
that's sent to the router Rik.

24
00:01:34,000 --> 00:01:37,000
It's going to be a message encrypted with that router's public key.

25
00:01:37,000 --> 00:01:42,000
It will have as its contents something explaining the next destination

26
00:01:42,000 --> 00:01:47,000
as well as the message that should go to that next destination.

27
00:01:47,000 --> 00:01:49,000
We can wrap as many layers as we want.

28
00:01:49,000 --> 00:01:52,000
The more layers there are, the more hops we go through,

29
00:01:52,000 --> 00:01:55,000
the less risk there is that all of the links in the chain can collude

30
00:01:55,000 --> 99:59:59,999
or that a party can observe all of the communication and learn what's being communicated.
