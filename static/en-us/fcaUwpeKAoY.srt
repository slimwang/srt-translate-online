1
00:00:00,270 --> 00:00:02,870
It may often be necessary for a

2
00:00:02,870 --> 00:00:06,310
server object to provide different privilege levels

3
00:00:06,310 --> 00:00:11,130
to different clients. For instance if you have a file server the file server may

4
00:00:11,130 --> 00:00:14,660
have different access privileges to different classes

5
00:00:14,660 --> 00:00:18,380
of users. And in order to facilitate

6
00:00:18,380 --> 00:00:21,470
that kind of a differential invocation of

7
00:00:21,470 --> 00:00:25,640
objects, the security model that Spring provides is

8
00:00:25,640 --> 00:00:29,970
via what is called a front object, so this is the underlying object. And an

9
00:00:29,970 --> 00:00:34,230
underlying object may have a front object that

10
00:00:34,230 --> 00:00:38,490
is completely outside of the Spring semantics for

11
00:00:38,490 --> 00:00:41,690
object invocation. The connection between the front object

12
00:00:41,690 --> 00:00:44,500
and the underlying object is entirely within the

13
00:00:44,500 --> 00:00:47,520
purview of the implementer of the service. In

14
00:00:47,520 --> 00:00:50,900
other words, this connection is not through the

15
00:00:50,900 --> 00:00:54,650
door mechanism that I told you about that Spring

16
00:00:54,650 --> 00:00:58,930
system provides you. So, all that the client domain is

17
00:00:58,930 --> 00:01:01,890
going to be able to do is access the front

18
00:01:01,890 --> 00:01:05,530
object. And the front object will register the door for

19
00:01:05,530 --> 00:01:07,890
accessing it with the nucleus, so that the client

20
00:01:07,890 --> 00:01:10,560
can go through this door to this front object, and

21
00:01:10,560 --> 00:01:12,200
the front object is the one that is going to

22
00:01:12,200 --> 00:01:15,950
then check the access control list, ACL, in order to

23
00:01:15,950 --> 00:01:18,900
see what kind of privileges this client domain

24
00:01:18,900 --> 00:01:21,940
has in order to make an invocation on

25
00:01:21,940 --> 00:01:24,620
the underlying object. And it is possible to

26
00:01:24,620 --> 00:01:28,150
have multiple front objects to the underlying objects with

27
00:01:28,150 --> 00:01:31,650
distinct doors registered with the Nucleus for different

28
00:01:31,650 --> 00:01:34,500
implementation of control policies that you want for

29
00:01:34,500 --> 00:01:37,130
a particular service. So, in other words, the

30
00:01:37,130 --> 00:01:41,370
policies that you want for accessing the services available

31
00:01:41,370 --> 00:01:44,600
in an underlying object can be implemented in

32
00:01:44,600 --> 00:01:47,420
this front object or different instances of this front

33
00:01:47,420 --> 00:01:50,320
object depending on how many different control policies

34
00:01:50,320 --> 00:01:53,360
you want. So when a client invocation comes in

35
00:01:53,360 --> 00:01:55,470
through this door to the front object, the

36
00:01:55,470 --> 00:02:00,730
ACL, the access control list is checked before allowing

37
00:02:00,730 --> 00:02:02,780
this invocation to actually go through to the

38
00:02:02,780 --> 00:02:06,540
underlying object. As I mentioned earlier if this client

39
00:02:06,540 --> 00:02:10,970
domain has access to an invocation entry point in

40
00:02:10,970 --> 00:02:13,170
a server, that is it has access to a

41
00:02:13,170 --> 00:02:16,370
door, the client domain can pass this around because

42
00:02:16,370 --> 00:02:18,990
of the software capability. And the software capability can

43
00:02:18,990 --> 00:02:21,220
be passed around by the client domain to other

44
00:02:21,220 --> 00:02:23,934
domains in order to use that same capability to

45
00:02:23,934 --> 00:02:28,010
access the same object. But in so doing the

46
00:02:28,010 --> 00:02:31,730
client domain can decide whether it wants to give the

47
00:02:31,730 --> 00:02:35,070
same privilege for accessing this object or lesser

48
00:02:35,070 --> 00:02:37,700
privilege than what it has. Those are the things

49
00:02:37,700 --> 00:02:40,610
that can be implemented as policies through this front

50
00:02:40,610 --> 00:02:43,930
object. For example, let's say that the user wants

51
00:02:43,930 --> 00:02:50,470
to print a file foo. The user, of course, has full access to the file system for

52
00:02:50,470 --> 00:02:53,520
this particular object, that is the file that the

53
00:02:53,520 --> 00:02:57,320
user has created. This is a reference to the

54
00:02:57,320 --> 00:03:00,630
object foo and user has full access to that.

55
00:03:00,630 --> 00:03:02,920
But it wants to print the file. But it

56
00:03:02,920 --> 00:03:07,030
doesn't want to give privilege to the printer object

57
00:03:07,030 --> 00:03:11,200
any more privilege than it needs to have to print

58
00:03:11,200 --> 00:03:17,075
this. In particular, if I want to print a file, then all I need to do is give a

59
00:03:17,075 --> 00:03:20,520
one-time privilege to the printer object in order to

60
00:03:20,520 --> 00:03:22,900
print that file. So what I'm going to do is

61
00:03:22,900 --> 00:03:24,780
I'm going to take this capability that I've

62
00:03:24,780 --> 00:03:29,280
got for this file foo, reduce the privilege level

63
00:03:29,280 --> 00:03:32,120
and say that you've got a reference to the

64
00:03:32,120 --> 00:03:35,100
same object, but you have a one time reference.

65
00:03:35,100 --> 00:03:37,890
Now the printer object can access the file system

66
00:03:37,890 --> 00:03:41,370
and present its capability, and the front object, which

67
00:03:41,370 --> 00:03:44,370
is associated with the file system, will verify that

68
00:03:44,370 --> 00:03:48,070
yes, the one-time ticket that this guy has is

69
00:03:48,070 --> 00:03:51,150
not expended yet, and therefore it is allowed to

70
00:03:51,150 --> 00:03:53,430
access this file so that it can do its

71
00:03:53,430 --> 00:03:55,990
job of printing. But if it tries to present

72
00:03:55,990 --> 00:03:59,210
the same handle again, it'll be rejected by the

73
00:03:59,210 --> 00:04:01,678
front object associated with the file system because this

74
00:04:01,678 --> 00:04:05,050
is a one-time reference. The capability that is being

75
00:04:05,050 --> 00:04:08,240
provided by the user the printer is a one-time

76
00:04:08,240 --> 00:04:14,450
capability. So we've seen how object invocation can happen efficiently

77
00:04:14,450 --> 00:04:18,399
through the door mechanism and the thread hand-off

78
00:04:18,399 --> 00:04:21,240
mechanism that I mentioned within a single node,

79
00:04:21,240 --> 00:04:24,870
and it can happen efficiently across the network

80
00:04:24,870 --> 00:04:28,100
through the proxies, and it can also happen

81
00:04:28,100 --> 00:04:31,670
securely by the fact that you can associate

82
00:04:31,670 --> 00:04:34,830
policies in front objects that govern access to

83
00:04:34,830 --> 00:04:36,960
the objects. So these are all the mechanisms

84
00:04:36,960 --> 00:04:40,450
that are provided in the Spring kernel and

85
00:04:40,450 --> 00:04:43,920
this is where the innovation happens. Or in another words, the

86
00:04:43,920 --> 00:04:46,900
external interface, even though it is a Unix operating system, under

87
00:04:46,900 --> 00:04:50,540
the cover the Spring system does all of these innovation in

88
00:04:50,540 --> 00:04:55,400
terms of how to structure the operating system itself using object technology.
