1
00:00:00,350 --> 00:00:03,570
So, the answer is many of the properties are

2
00:00:03,570 --> 00:00:08,710
desirable. The second property is desirable. So, the first property

3
00:00:08,710 --> 00:00:10,940
is not desirable. That if the hash function outputs a

4
00:00:10,940 --> 00:00:14,040
unique number for every keyword, well then, the range for

5
00:00:14,040 --> 00:00:16,780
the hash function would be very large. We'd need

6
00:00:16,780 --> 00:00:20,270
a huge amount of memory to store the hash table.

7
00:00:20,270 --> 00:00:22,360
And the number of buckets would be the same as

8
00:00:22,360 --> 00:00:25,860
the number of keyboards. That's not going to work very well.

9
00:00:25,860 --> 00:00:29,210
What we want is the number of buckets to be b, so

10
00:00:29,210 --> 00:00:31,590
that means that the output of the hash function should be in

11
00:00:31,590 --> 00:00:34,550
the range between 0 and b minus 1. That will find the

12
00:00:34,550 --> 00:00:37,890
element of the list that corresponds to that bucket. So, we do want

13
00:00:37,890 --> 00:00:41,660
the second property. The third and the fourth properties say that we

14
00:00:41,660 --> 00:00:44,790
want the number of keywords in each bucket to be approximately the

15
00:00:44,790 --> 00:00:47,720
same. So, if there are k keywords and we're fitting them into

16
00:00:47,720 --> 00:00:52,030
b buckets, if we want the buckets to be approximately the same size,

17
00:00:52,030 --> 00:00:55,960
then each bucket should have approximately k divided by b keywords.

18
00:00:55,960 --> 00:00:59,590
So, both the third and the fourth property are true. The

19
00:00:59,590 --> 00:01:02,250
final property says that we should have more keywords in bucket

20
00:01:02,250 --> 00:01:06,690
zero than in bucket one. There's no reason that we would prefer

21
00:01:06,690 --> 00:01:08,650
that, so you, you might think it would be better to

22
00:01:08,650 --> 00:01:12,790
have more keywords at the beginning than later on, that's not

23
00:01:12,790 --> 00:01:15,040
the case with a hash table. Remember, what our hash function

24
00:01:15,040 --> 00:01:17,640
does is, it tells us right away which bucket to go through.

25
00:01:17,640 --> 00:01:19,850
We don't have to look through the earlier buckets. This

26
00:01:19,850 --> 00:01:22,440
is different from the list index that we started with.

27
00:01:22,440 --> 00:01:24,930
Where the first one is the fastest one to find.

28
00:01:24,930 --> 00:01:27,580
And the last one requires going through all the elements.

29
00:01:27,580 --> 00:01:29,870
For the hash table, that's not the case. There's no

30
00:01:29,870 --> 00:01:32,210
reason to prefer having more entries in bucket zero to

31
00:01:32,210 --> 00:01:34,540
bucket one. What we really want is to try to

32
00:01:34,540 --> 00:01:38,140
have all the buckets have approximately the same number of keywords.
