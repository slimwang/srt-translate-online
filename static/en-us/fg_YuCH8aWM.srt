1
00:00:00,490 --> 00:00:05,520
So, let's try this. I would put all of this functionality in a method, give me

2
00:00:05,520 --> 00:00:09,760
a minute to arrange that and then I'll show you. As promised, here is my method.

3
00:00:13,070 --> 00:00:16,219
This method keeps reading an integer until it finds

4
00:00:16,219 --> 00:00:19,250
one that is within the desired range and then it

5
00:00:19,250 --> 00:00:22,060
returns it. The exact code isn't really important right

6
00:00:22,060 --> 00:00:24,180
now. You can have a look at it in the

7
00:00:24,180 --> 00:00:27,740
code distribution, if you want to. And, out here,

8
00:00:27,740 --> 00:00:31,700
I'm calling it. But, there's a problem. When I compile

9
00:00:31,700 --> 00:00:35,040
it, I get an error message. And, that error

10
00:00:35,040 --> 00:00:38,820
message, right now, must truly appear like gibberish to you.

11
00:00:38,820 --> 00:00:41,530
It talks about non-static methods and static methods.

12
00:00:41,530 --> 00:00:44,190
So let me explain what's happening and why the

13
00:00:44,190 --> 00:00:48,470
compiler is unhappy. Normally, we call a method on

14
00:00:48,470 --> 00:00:51,080
an object and I didn't do that here because

15
00:00:51,080 --> 00:00:54,850
I figured, well I'm in elevator demo. So I

16
00:00:54,850 --> 00:00:57,450
should be able to call any elevator demo method

17
00:00:57,450 --> 00:00:59,830
as well. But the trouble is I'm calling from

18
00:00:59,830 --> 00:01:04,470
main. So there are no elevator demo objects and

19
00:01:04,470 --> 00:01:09,590
the compiler complains. So going back here, that is

20
00:01:09,590 --> 00:01:12,470
the crux of the problem. ReadBetween is not called

21
00:01:12,470 --> 00:01:15,400
on an object And there really isn't a great

22
00:01:15,400 --> 00:01:17,430
object to call it on. it would have been nice

23
00:01:17,430 --> 00:01:19,380
to call it on the scanner, but like I

24
00:01:19,380 --> 00:01:23,100
already said, we can't do that. Whenever you're in this

25
00:01:23,100 --> 00:01:25,760
kind of situation where you have a method that

26
00:01:25,760 --> 00:01:30,010
can't really be called in an object, then you make

27
00:01:30,010 --> 00:01:35,120
a static method. The static method is a method that's not called in any

28
00:01:35,120 --> 00:01:40,760
object. So, one remedy is, simply, to go back into elevator

29
00:01:40,760 --> 00:01:48,160
demo. And, declare the helper method static. Like this. Now, all

30
00:01:48,160 --> 00:01:54,970
will be well. And the syntax error is gone. So to answer our original question,

31
00:01:54,970 --> 00:01:57,680
it is perfectly legitimate to put read between

32
00:01:57,680 --> 00:02:01,810
intra ElevatorDemo as a static method but maybe

33
00:02:01,810 --> 00:02:05,940
it's not optimal. Because what if I want

34
00:02:05,940 --> 00:02:08,780
to use that perfectly nifty method in another

35
00:02:08,780 --> 00:02:14,060
class? So really, read between is a method that seems it would be useful in any

36
00:02:14,060 --> 00:02:17,020
situation that you want to read a value from

37
00:02:17,020 --> 00:02:20,170
some range. So we, we might really want to put

38
00:02:20,170 --> 00:02:23,390
this somewhere else, and the dos that I'm going

39
00:02:23,390 --> 00:02:27,690
to put it on I'll call IO Helper. I've

40
00:02:27,690 --> 00:02:29,254
prepared that class for you, let me show you.

41
00:02:29,254 --> 00:02:30,570
Here is the IO Helper class. Here is the

42
00:02:32,790 --> 00:02:35,900
read between method. And again, that is a static

43
00:02:35,900 --> 00:02:39,190
method because I'm not going to actually make any

44
00:02:39,190 --> 00:02:42,750
objects off the IO Helper class. I just want

45
00:02:42,750 --> 00:02:45,860
it to be the home for this method. That means

46
00:02:45,860 --> 00:02:48,530
when I call the method, I have to specify

47
00:02:48,530 --> 00:02:51,890
the name of the class like this. Here you

48
00:02:51,890 --> 00:02:54,160
see the name of the class, IOHelper, the name

49
00:02:54,160 --> 00:02:58,536
of the method. Static methods are not incredibly common because,

50
00:02:58,536 --> 00:03:03,620
like I said,most of the time, an actual object

51
00:03:03,620 --> 00:03:06,570
is responsible for carrying out a method, but they do

52
00:03:06,570 --> 00:03:08,930
happen. In fact, you've seen a few of them. In

53
00:03:08,930 --> 00:03:11,670
lesson four, you saw a good number of static methods

54
00:03:11,670 --> 00:03:15,130
in the math class. Again, the syntax is the name

55
00:03:15,130 --> 00:03:17,800
of the class, a period, and then the name of

56
00:03:17,800 --> 00:03:20,630
the method. And once again there is no object of

57
00:03:20,630 --> 00:03:23,810
the math class. We simply call the square root method

58
00:03:23,810 --> 00:03:26,850
directly on the class. Now, you may wonder, why

59
00:03:26,850 --> 00:03:28,370
did we have to use a static method? Why

60
00:03:28,370 --> 00:03:32,467
couldn't we just call the method on the number

61
00:03:32,467 --> 00:03:35,670
2? Well, that's what it's like in Java. In

62
00:03:35,670 --> 00:03:38,330
Java, numbers are not objects so you can never

63
00:03:38,330 --> 00:03:41,600
call a method on an object. A call such

64
00:03:42,610 --> 00:03:45,470
as 2. square root might be more logical, but

65
00:03:45,470 --> 00:03:48,550
it's an error. So to summarize the static method.

66
00:03:48,550 --> 00:03:53,130
Belongs to a class. It's not called in an object and they're not actually all

67
00:03:53,130 --> 00:03:54,940
that common. Why do you call them

68
00:03:54,940 --> 00:03:58,430
static methods? There's no good reason actually. That's

69
00:03:58,430 --> 00:04:01,090
a holdover from another much more ancient

70
00:04:01,090 --> 00:04:04,860
programming language. There's nothing particularly static about them.

71
00:04:04,860 --> 00:04:07,160
In addition to static methods, there are static

72
00:04:07,160 --> 00:04:09,470
variables. Let's have a look at them next.
