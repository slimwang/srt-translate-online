1
00:00:00,000 --> 00:00:03,000
And in fact, this is one of the ways that we actually test operating systems.

2
00:00:03,000 --> 00:00:05,000
So the Linux kernel developers--

3
00:00:05,000 --> 00:00:11,000
or actually, this tool works for multiple versions of UNIX--have a tool called crashme.

4
00:00:11,000 --> 00:00:15,000
Here we have the OS kernel, and here we have this program called crashme.

5
00:00:15,000 --> 00:00:20,000
What it does is it allocates a block of memory, writes totally random garbage into it,

6
00:00:20,000 --> 00:00:26,000
then it masks off all signal handlers--that is to say, system level exception handlers--

7
00:00:26,000 --> 00:00:29,000
and it just jumps into the block of garbage--

8
00:00:29,000 --> 00:00:32,000
that is to say, it starts executing completely garbage bytes.

9
00:00:32,000 --> 00:00:34,000
And what happens when you start executing garbage bytes

10
00:00:34,000 --> 00:00:39,000
is often the instructions are illegal, and the operating system kernel has to handle this.

11
00:00:39,000 --> 00:00:43,000
So over time what we end up doing is exploring--that is to say, testing--

12
00:00:43,000 --> 00:00:46,000
a lot of operating system system calls, a lot of calls into the operating system,

13
00:00:46,000 --> 00:00:49,000
that contain really weird and unexpected values.

14
00:00:49,000 --> 00:00:53,000
And if the kernel goes ahead and keeps running properly

15
00:00:53,000 --> 00:00:55,000
and keeps trying to kill the crashme process,

16
00:00:55,000 --> 00:00:58,000
then the operating system kernel is succeeding.

17
00:00:58,000 --> 00:01:02,000
If the kernel ever falls over, if it crashes, then we've discovered a bug.

18
00:01:02,000 --> 00:01:04,000
We have to go ahead and fix the operating system.

19
00:01:04,000 --> 00:01:06,000
And the experience is that if you take a real operating system

20
00:01:06,000 --> 00:01:10,000
and you test it with a tool like crashme,

21
00:01:10,000 --> 00:01:12,000
you'll end up crashing the kernel

22
00:01:12,000 --> 00:01:15,000
unless the operating system has already been hardened with a tool like this.

23
00:01:15,000 --> 00:01:17,000
And so what we're getting at here is something very fundamental about testing.

24
00:01:17,000 --> 00:01:19,000
We're working towards another testing principle,

25
00:01:19,000 --> 00:01:23,000
and the principle is that if you have an interface or an API that represents a trust boundary,

26
00:01:23,000 --> 00:01:27,000
that is a boundary between part of the system that we trust

27
00:01:27,000 --> 00:01:30,000
and users on the other side who we can't trust

28
00:01:30,000 --> 00:01:35,000
to stay within the domain of the API that we're implementing,

29
00:01:35,000 --> 00:01:39,000
then we have to test that API with all possible representative values,

30
00:01:39,000 --> 00:01:43,000
not just ones that the developers happen to think are in the domain.

31
00:01:43,000 --> 00:01:45,000
So there's our principle.

32
00:01:45,000 --> 00:01:48,000
And it turns out that in practice, people are pretty bad at this--

33
00:01:48,000 --> 00:01:53,000
that is to say, people aren't empirically very good at testing these interfaces

34
00:01:53,000 --> 00:01:55,000
with a full range of values.

35
00:01:55,000 --> 00:01:59,000
And this lies at the core of a lot of the security vulnerables

36
00:01:59,000 --> 99:59:59,999
that we see in real software today.
