1
00:00:00,190 --> 00:00:04,939
Once the iOS kernel has started,
it controls which user processes and

2
00:00:04,939 --> 00:00:08,700
apps can be run to ensure that
all apps come from a known or

3
00:00:08,700 --> 00:00:12,010
approved source and
have not been tampered with.

4
00:00:12,010 --> 00:00:14,720
iOS requires that all executable code

5
00:00:14,720 --> 00:00:17,500
be signed using an Apple
issued certificate.

6
00:00:17,500 --> 00:00:22,230
More specifically, apps provided
with the device, such as Mail or

7
00:00:22,230 --> 00:00:24,880
Safari, are already signed by Apple.

8
00:00:24,880 --> 00:00:27,530
Third party apps must
also be validated and

9
00:00:27,530 --> 00:00:30,468
signed using an Apple-issued
certificate.

10
00:00:30,468 --> 00:00:35,310
This mandatory co-signing extends the
concept of chain of trust from the iOS

11
00:00:35,310 --> 00:00:40,080
to the apps, and prevents third party
apps from loading unsigned code, or

12
00:00:40,080 --> 00:00:41,946
using self modifying code.

13
00:00:41,946 --> 00:00:46,900
A run time co-signature checks
of all executable memory pages

14
00:00:46,900 --> 00:00:51,350
are being performed as the pages
are loaded to ensure that

15
00:00:51,350 --> 00:00:56,430
our apps has not been modified since
it was installed or last updated.

16
00:00:56,430 --> 00:01:01,590
This is done through a user-space
daemon and is enforced by the kernel.

17
00:01:01,590 --> 00:01:05,640
In summary,
iOS enforces mandatory code signing and

18
00:01:05,640 --> 00:01:10,450
identification to extend the chain
of trust from iOS to the apps.
