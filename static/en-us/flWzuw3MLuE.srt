1
00:00:00,550 --> 00:00:01,250
All right.

2
00:00:01,250 --> 00:00:05,300
So, J.P. gave you a very good summary of
what the options are, available to you.

3
00:00:05,300 --> 00:00:06,720
When you use firebases rules and

4
00:00:06,720 --> 00:00:10,270
security language But,
what do these rules actually look like.

5
00:00:10,270 --> 00:00:11,650
Before we dive into validation,

6
00:00:11,650 --> 00:00:14,720
let's take a quick look at how
these rules are structured.

7
00:00:14,720 --> 00:00:17,280
You already saw an example of what
rules look like ,when we looked at

8
00:00:17,280 --> 00:00:18,550
the dashboard before.

9
00:00:18,550 --> 00:00:21,450
In fact clicking here, is where
you'll need to go to edit your rules.

10
00:00:21,450 --> 00:00:24,768
Once you're in the Security & Rules tab,
you could write your rules here and

11
00:00:24,768 --> 00:00:26,160
save them using this button.

12
00:00:26,160 --> 00:00:29,070
Any changes that you save,
will immediately affect any read or

13
00:00:29,070 --> 00:00:31,740
write calls sent to
your Firebase database.

14
00:00:31,740 --> 00:00:35,200
These rules should also look
familiar from when in Version 0.4,

15
00:00:35,200 --> 00:00:37,859
we talked about using index on and
value rules, okay.

16
00:00:37,859 --> 00:00:41,870
So, here are the default rules,
the rules themselves are adjacent,

17
00:00:41,870 --> 00:00:44,670
which look similar to your
firebase database itself.

18
00:00:44,670 --> 00:00:48,170
There are string key value pairs,
which are separated by colons nd

19
00:00:48,170 --> 00:00:50,370
everything that's considered
an object or list.

20
00:00:50,370 --> 00:00:51,820
Is surrounded by curly braces,

21
00:00:51,820 --> 00:00:55,390
as seen here, remember that these
strings are enclosed in quotes.

22
00:00:55,390 --> 00:00:58,260
If you're not super familiar with
this sort of adjacent syntax,

23
00:00:58,260 --> 00:01:00,480
I've provided a link to
a sample rules file.

24
00:01:00,480 --> 00:01:02,520
That you could look at to
base your rule syntax off of.

25
00:01:03,580 --> 00:01:05,010
So, what are these rules doing?

26
00:01:05,010 --> 00:01:08,210
Well, these are the simplest
of simple list rules,

27
00:01:08,210 --> 00:01:11,860
your rules file will always start
with this rules object here.

28
00:01:11,860 --> 00:01:12,450
And then usually,

29
00:01:12,450 --> 00:01:16,050
the children inside of it mirror
the structure of your actual database.

30
00:01:16,050 --> 00:01:19,230
In this case, these rules are providing
access to the entire database,

31
00:01:19,230 --> 00:01:21,100
no matter what the structure
happens to be.

32
00:01:21,100 --> 00:01:24,370
It's read and write viewable and
there are no validation rules, so

33
00:01:24,370 --> 00:01:26,390
there aren't any structural
constraints here.

34
00:01:26,390 --> 00:01:28,480
Including these two rules
is actually important,

35
00:01:28,480 --> 00:01:31,400
because by default access
to the data is false.

36
00:01:31,400 --> 00:01:34,530
So, you do need these rules to
explicitly say, that read is true for

37
00:01:34,530 --> 00:01:37,230
the whole database and
right is true for the whole database.

38
00:01:37,230 --> 00:01:40,910
Because if I actually deleted this and
saved it, by default,

39
00:01:40,910 --> 00:01:44,000
nobody would be able to write anything
to the database but I would do that.

40
00:01:45,040 --> 00:01:47,840
Normally your rules are going to
mirror your database structure.

41
00:01:47,840 --> 00:01:50,770
So for example, if I wanted to
write some rules to validate

42
00:01:50,770 --> 00:01:54,140
the structure of my user node,
I might write something like this.

43
00:01:54,140 --> 00:01:58,560
As you can see here, I've got
the exact route name of the user and

44
00:01:58,560 --> 00:02:02,060
here, I've got the key names
embedded of all the properties.

45
00:02:02,060 --> 00:02:05,270
So your key names here need to match
exactly what's shown in your database

46
00:02:05,270 --> 00:02:07,400
and they need to be nested
in exactly the same way.

47
00:02:07,400 --> 00:02:10,723
Now, you might be wondering what
this key here is all about.

48
00:02:10,723 --> 00:02:13,260
the dollar sign followed by a word,

49
00:02:13,260 --> 00:02:17,010
indicates what is noted firebase
as a wildcard variable.

50
00:02:17,010 --> 00:02:19,740
Now wildcard variables have
a couple different uses but

51
00:02:19,740 --> 00:02:23,970
the most common one is,
to represent dynamic keys like push ids.

52
00:02:23,970 --> 00:02:26,890
And in this case, user emails,
because remember,

53
00:02:26,890 --> 00:02:29,860
under the user node is
a list of user emails.

54
00:02:29,860 --> 00:02:32,690
The keys of which we
can't guess in advance.

55
00:02:32,690 --> 00:02:34,320
Now, once you've laid
out this structure,

56
00:02:34,320 --> 00:02:36,980
you can start defining rules for
the user object.

57
00:02:36,980 --> 00:02:40,040
When you want to write a rule for
a particular location, you go to

58
00:02:40,040 --> 00:02:43,890
the location in your rules file that
mirrors the location in your database.

59
00:02:43,890 --> 00:02:46,230
And this is your first
example of a rule,

60
00:02:46,230 --> 00:02:50,630
the Kiva rule is always a dot read,
dot write or dot validate value.

61
00:02:50,630 --> 00:02:53,540
And the value of a rule
will always be something

62
00:02:53,540 --> 00:02:56,670
that evaluates to a boolean and
this is important.

63
00:02:56,670 --> 00:02:59,740
Because when a user tries to read or
write at that location,

64
00:02:59,740 --> 00:03:03,700
the value of this boolean affects
whether they're actually able to do so.

65
00:03:03,700 --> 00:03:07,240
Now, these expressions that evaluate
to billions can get pretty complicated,

66
00:03:07,240 --> 00:03:10,070
they can include comparison and
logical operators.

67
00:03:10,070 --> 00:03:12,770
And Firebase also provides
additional methods and

68
00:03:12,770 --> 00:03:17,430
internal preset variables that allow you
to get a value at the current location.

69
00:03:17,430 --> 00:03:19,990
Or compare to other
locations of the database.

70
00:03:19,990 --> 00:03:23,700
For example, there are methods that let
you look at the data at children and

71
00:03:23,700 --> 00:03:26,190
parent locations of
your current location.

72
00:03:26,190 --> 00:03:26,900
So if necessary,

73
00:03:26,900 --> 00:03:31,020
you could do comparisons between
the value of name of the value of email.

74
00:03:31,020 --> 00:03:35,430
Or even the value of name and
someplace totally else in the database.

75
00:03:35,430 --> 00:03:36,990
Okay, so
once you've written this out and

76
00:03:36,990 --> 00:03:40,860
you actually start to try to read or
write data at certain locations.

77
00:03:40,860 --> 00:03:45,090
All of the applicable rules along the
path to that location, will be checked.

78
00:03:45,090 --> 00:03:48,550
Validate and write rules are checked
whenever a value is written, and

79
00:03:48,550 --> 00:03:50,930
read rules are checked whenever
listeners are attached.

80
00:03:50,930 --> 00:03:54,200
For example,
if I try to write in this location,

81
00:03:54,200 --> 00:03:59,330
with a value Lyla, any rules that
are at the lylafish@gmail.com location.

82
00:03:59,330 --> 00:04:03,610
Which is this variable here,
there aren't any rules here, and

83
00:04:03,610 --> 00:04:07,110
at the name location,
which has one validate rule here.

84
00:04:07,110 --> 00:04:10,920
So total, because this is a right,
these two rules would be checked,

85
00:04:10,920 --> 00:04:13,520
now let's pretend that this
right rule wasn't here.

86
00:04:13,520 --> 00:04:16,290
This was actually the rule that was
giving me the ability to write to

87
00:04:16,290 --> 00:04:17,279
this location.

88
00:04:17,279 --> 00:04:19,240
So if you ever tried to
do something like that,

89
00:04:19,240 --> 00:04:22,370
where you don't have permission to
do the action that you want to do.

90
00:04:22,370 --> 00:04:25,610
The on cancel callback method Will
be triggered in your code, and

91
00:04:25,610 --> 00:04:29,320
it will be given a FirebaseError Of
type PERMISSION_DENIED.

92
00:04:29,320 --> 00:04:32,700
All right, I've just thrown in
lot of information at you, so

93
00:04:32,700 --> 00:04:34,610
let me take a moment to summarize.

94
00:04:34,610 --> 00:04:38,510
Your rules file as found in the firebase
dashboard in the security and

95
00:04:38,510 --> 00:04:41,310
rules tab and the rules
themselves are written in JSON.

96
00:04:42,330 --> 00:04:47,240
The actual permissions will have keys
that are .right, .read or .validate and

97
00:04:47,240 --> 00:04:51,270
they will always have values that
evaluate to either true or false.

98
00:04:51,270 --> 00:04:54,460
If there is no read or
write rule at a location or

99
00:04:54,460 --> 00:04:57,150
its parent locations,
then it will default to false.

100
00:04:58,280 --> 00:05:01,410
When you are writing your permission
rule, you'll place it in the rules

101
00:05:01,410 --> 00:05:05,190
location that mirrors the database
location that you're interested in.

102
00:05:05,190 --> 00:05:08,440
If a user tries to do something that
is not allowed by the read, write or

103
00:05:08,440 --> 00:05:09,700
validate rules.

104
00:05:09,700 --> 00:05:12,150
The FirebaseError will
be returned to them and

105
00:05:12,150 --> 00:05:14,580
its value will be Permission_Denied.

106
00:05:14,580 --> 00:05:17,520
Okay, and those are basically the facts
that you need to get started.

107
00:05:17,520 --> 00:05:20,190
So go ahead and we'll start
laying out some of these rules.
