1
00:00:00,460 --> 00:00:03,480
It's time for us to step through
some code using breakpoints.

2
00:00:03,480 --> 00:00:06,330
Currently we're in the breakpoint
bug view controller and

3
00:00:06,330 --> 00:00:10,240
we have a single breakpoint set
in the addBugToView method.

4
00:00:10,240 --> 00:00:12,790
As we've seen before we can
set breakpoints like this on

5
00:00:12,790 --> 00:00:14,870
individual lines of code.

6
00:00:14,870 --> 00:00:18,505
And if the breakpoint's reached then
our app will go into a paused state.

7
00:00:18,505 --> 00:00:21,940
And from here the application's
technically running, but

8
00:00:21,940 --> 00:00:24,710
we have the power to execute
our app line by line.

9
00:00:24,710 --> 00:00:27,840
And this is what is known
as stepping through code.

10
00:00:27,840 --> 00:00:31,270
You can think of stepping through code
like having fine grain control over

11
00:00:31,270 --> 00:00:33,420
the execution of your program.

12
00:00:33,420 --> 00:00:36,420
So lets go ahead and run the application
and trigger this breakpoint.

13
00:00:38,020 --> 00:00:42,020
So go to the breakpoint and
debugging scene and tap the screen.

14
00:00:42,020 --> 00:00:42,520
There we go.

15
00:00:43,820 --> 00:00:45,400
And now our breakpoint's reached.

16
00:00:45,400 --> 00:00:49,630
The debug area appears, and we can
focus our attention to the horizontal

17
00:00:49,630 --> 00:00:53,540
debug bar, here, that runs across
the top of the debug area.

18
00:00:55,040 --> 00:01:01,720
On the far left there's a button for
hiding and revealing the debug area.

19
00:01:01,720 --> 00:01:04,590
The next button,
called the Breakpoint Activation button,

20
00:01:04,590 --> 00:01:08,300
looks like a smaller version of the
breakpoint arrow that we seen before.

21
00:01:08,300 --> 00:01:09,650
And if we click it,

22
00:01:09,650 --> 00:01:13,760
then it will toggle all the currently
enabled breakpoints as either on or off.

23
00:01:13,760 --> 00:01:17,910
So it's kind of like a global state for
active break points.

24
00:01:17,910 --> 00:01:21,230
Note that any breakpoints that are
currently disabled when you click this

25
00:01:21,230 --> 00:01:23,650
button are not going to be effected.

26
00:01:23,650 --> 00:01:27,630
So it only works with active
breakpoints, and we can demonstrate

27
00:01:27,630 --> 00:01:32,210
this if I set a break point here
on the moveBugsAnimation line.

28
00:01:32,210 --> 00:01:36,070
I'll keep it inactive, and
then we'll toggle this button.

29
00:01:36,070 --> 00:01:40,400
Now they both go grey but when I go
back and the global state is active,

30
00:01:40,400 --> 00:01:45,970
only our previously active breakpoints
are actually enabled by this.

31
00:01:45,970 --> 00:01:49,540
This inactive breakpoint
is not affected.

32
00:01:49,540 --> 00:01:52,030
We can drag this off,
we don't need it for now.

33
00:01:52,030 --> 00:01:56,250
The next button on the bar is for
continuing the programs execution.

34
00:01:56,250 --> 00:01:59,240
The hotkey for
this button is control command y,

35
00:01:59,240 --> 00:02:01,280
you may be using this one pretty often.

36
00:02:02,330 --> 00:02:05,010
And if we click it then our
app will resume like so.

37
00:02:06,010 --> 00:02:09,297
So let's tap the screen again and
we'll reach the breakpoint again.

38
00:02:10,500 --> 00:02:14,100
The next three buttons are also
related to execution control, and

39
00:02:14,100 --> 00:02:18,310
they're called Step Over,
Step Into and Step Out.

40
00:02:18,310 --> 00:02:20,950
You will really want to become
comfortable with these buttons because

41
00:02:20,950 --> 00:02:23,730
they are most frequently
used when you are debugging.

42
00:02:23,730 --> 00:02:26,260
And we'll get back to
them in just a moment.

43
00:02:26,260 --> 00:02:28,130
Continuing right, we have a button for

44
00:02:28,130 --> 00:02:31,980
the debug view hierarchy which allows
us to debug our apps visually.

45
00:02:31,980 --> 00:02:34,090
And we're going to talk more
about it in the next lesson.

46
00:02:34,090 --> 00:02:37,980
And then next, we have this arrow which
will allow us to simulate a location.

47
00:02:37,980 --> 00:02:40,540
And we're not going to use this
button for this particular course.

48
00:02:41,550 --> 00:02:44,480
The last three pieces of the tool
bar are called the jump bar and

49
00:02:44,480 --> 00:02:47,940
they're similar to what we saw
earlier in the debug navigator.

50
00:02:47,940 --> 00:02:51,480
So let's give our self some
more space first, there we go.

51
00:02:52,510 --> 00:02:56,460
So the first element of the jump
bar is the current process.

52
00:02:56,460 --> 00:02:59,540
And if we select so many bugs,
the current process.

53
00:02:59,540 --> 00:03:02,900
Then we could see all the different
threads in this process.

54
00:03:02,900 --> 00:03:05,810
And then from there we can jump to
the different stack frames within

55
00:03:05,810 --> 00:03:06,980
a particular thread.

56
00:03:07,980 --> 00:03:12,040
Now at the top level this might be
really useful if you're debugging two

57
00:03:12,040 --> 00:03:15,700
processes at the same time,
like a client and a server.

58
00:03:15,700 --> 00:03:19,850
If you want to investigate multiple
processes simultaneously it's a little

59
00:03:19,850 --> 00:03:24,730
bit advanced, but Apple has
a great example in their 2012 WWDC

60
00:03:24,730 --> 00:03:27,540
video called Debugging in XCode.

61
00:03:27,540 --> 00:03:31,160
And I posted a link to this
particular session that they recorded

62
00:03:31,160 --> 00:03:33,470
in the instructor notes
if you're interested.

63
00:03:33,470 --> 00:03:37,780
The second element in the jump bar
is the currently selected thread.

64
00:03:37,780 --> 00:03:40,290
If you click this element,
just like we saw a second ago,

65
00:03:40,290 --> 00:03:44,430
we can jump between threads and
the thread stack frames.

66
00:03:44,430 --> 00:03:47,080
And then the final element
is the current stack frame.
