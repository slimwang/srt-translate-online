1
00:00:00,000 --> 00:00:03,000
Now when you have a decision under uncertainty and there's an opponent,

2
00:00:03,000 --> 00:00:05,000
it's called game theory.

3
00:00:05,000 --> 00:00:09,000
If there's no opponent, it's usually called decision under uncertainty.

4
00:00:09,000 --> 00:00:10,000
There is other names.

5
00:00:10,000 --> 00:00:14,000
So let's look at an example of that first before we get back to the game of pig.

6
00:00:14,000 --> 00:00:15,000
Here's the decision I'm going to give you.

7
00:00:15,000 --> 00:00:23,000
You're on a game show, and you won, and you get a prize of 1 million dollars or euros

8
00:00:23,000 --> 00:00:25,000
or whatever currency you want to use.

9
00:00:25,000 --> 00:00:27,000
Now you're given a decision.

10
00:00:27,000 --> 00:00:33,000
You can keep the $1 million, or the host will flip a coin and you believe it to be a fair coin,

11
00:00:33,000 --> 00:00:40,000
and if you call it correctly you get $3 million, but if you get it wrong, you get nothing.

12
00:00:40,000 --> 00:00:48,000
So you analyze the outcome of this and you believe that this is a choice by the coin

13
00:00:48,000 --> 00:00:55,000
that has a 50% probability of each outcome, and you want to say, what should I do?

14
00:00:55,000 --> 00:00:58,000
Should I keep the million or should I go for the 3 million?

15
00:00:58,000 --> 00:01:03,000
What I'm going to do is code up a model for this, and then let the decision theory decide.

16
00:01:03,000 --> 00:01:07,000
First, I just define a variable million because it's hard to see the number of 0's

17
00:01:07,000 --> 00:01:08,000
and count correctly.

18
00:01:08,000 --> 00:01:15,000
Now traditionally, utility is used with the abbreviation U and quality with abbreviation Q.

19
00:01:15,000 --> 00:01:20,000
So I'm going to define here a quality function that says, given a state and an action,

20
00:01:20,000 --> 00:01:26,000
what's my--and given utility, what state is worth to me that's going to tell me

21
00:01:26,000 --> 00:01:30,000
the value of that state action pair?

22
00:01:30,000 --> 00:01:33,000
And the actions available to me are holding and gambling.

23
00:01:33,000 --> 00:01:34,000
Let's go ahead and make that explicit.

24
00:01:34,000 --> 00:01:37,000
So in any state, the actions available are holding and gambling,

25
00:01:37,000 --> 00:01:41,000
where we're only going to deal with 1 state, but we make this perfectly general.

26
00:01:41,000 --> 00:01:46,000
And the state that I start with is, however many dollars I have in my pocket--

27
00:01:46,000 --> 00:01:47,000
could be anything.

28
00:01:47,000 --> 00:01:53,000
And given that state, if I hold, my state is going to be increased by $1 million,

29
00:01:53,000 --> 00:01:57,000
and then there's some utility on that--how much do I value having what I have now

30
00:01:57,000 --> 00:01:58,000
plus 1 million.

31
00:01:58,000 --> 00:02:03,000
And if I gamble, there's a 50% chance that I get 3 million more than I have now.

32
00:02:03,000 --> 00:02:05,000
There's some utility for that.

33
00:02:05,000 --> 00:02:11,000
And a 50% chance that I get nothing more than I have now, and some utility for that.

34
00:02:11,000 --> 00:02:16,000
So that describes the quality of the state, but only describes it if I have a utility function.

35
00:02:16,000 --> 00:02:19,000
I have to know how much do I like money?

36
00:02:19,000 --> 00:02:22,000
Well, the simplest choice for utility function is the identity function.

37
00:02:22,000 --> 00:02:27,000
Say the identity function just takes any input x and returns x.

38
00:02:27,000 --> 00:02:33,000
It's the input itself, and so we could say, if I start with nothing,

39
00:02:33,000 --> 00:02:37,000
the value of the state of having nothing is 0, and the value of the state of having

40
00:02:37,000 --> 00:02:39,000
a million is a million.

41
00:02:39,000 --> 00:02:44,000
Now here's--the amazing thing is, I can just write out what the optimal strategy is,

42
00:02:44,000 --> 00:02:46,000
what the best action is for this state,

43
00:02:46,000 --> 00:02:50,000
and what it's going to be is the maximum over all the possible actions from the state,

44
00:02:50,000 --> 00:02:52,000
that was just hold and gamble,

45
00:02:52,000 --> 00:02:56,000
maximized by EU, which stands for Expected Utility.

46
00:02:56,000 --> 00:02:58,000
Expected meaning average.

47
00:02:58,000 --> 00:03:03,000
So what's the average utility of each of the actions, and I've defined the average utility

48
00:03:03,000 --> 00:03:10,000
as the quality of that state, given that state action pair under the utility function?

49
00:03:10,000 --> 00:03:14,000
And that means that the Q had to deal with the averaging,

50
00:03:14,000 --> 00:03:16,000
and it did that.

51
00:03:16,000 --> 00:03:22,000
It said, 50% this, 50% that. That's the value of gambling.

52
00:03:22,000 --> 00:03:25,000
Now this best_action function solves this particular problem.

53
00:03:25,000 --> 00:03:29,000
But the amazing thing is is that we can completely generalize this,

54
00:03:29,000 --> 00:03:34,000
so if we just add in parameters, now we're saying what's the best_action

55
00:03:34,000 --> 00:03:38,000
in a particular state if you tell me what the available actions are,

56
00:03:38,000 --> 00:03:44,000
what the quality of each state action pair is, and what the utility is over states,

57
00:03:44,000 --> 00:03:46,000
then I can tell you what the best_action is.

58
00:03:46,000 --> 00:03:48,000
That works for any possible domain that you can define.

59
00:03:48,000 --> 00:03:52,000
It's an amazing thing that we solved all the problems at once.

60
00:03:52,000 --> 00:03:57,000
Similarly to the way in search where we had 1 best_search algorithm

61
00:03:57,000 --> 00:03:59,000
that could solve all of the search problems.

62
00:03:59,000 --> 00:04:05,000
Now it doesn't mean that we're done, and we never have to program anything again

63
00:04:05,000 --> 00:04:08,000
because programming can be difficult.

64
00:04:08,000 --> 00:04:11,000
There's some problems that don't fit into this type of formulation,

65
00:04:11,000 --> 00:04:14,000
and there are many, many problems which you can describe,

66
00:04:14,000 --> 00:04:17,000
but which you can't solve in a feasible amount of time.

67
00:04:17,000 --> 00:04:19,000
So we haven't solved everything, but it is amazing how much we can do

68
00:04:19,000 --> 00:04:22,000
with just this 1 short function.

69
00:04:22,000 --> 00:04:23,000
Let's go ahead and solve it.

70
00:04:23,000 --> 00:04:30,000
Let's solve this problem, and let's say I start off with $100, what's my best_action?

71
00:04:30,000 --> 00:04:33,000
Then when I run that, it tells me the best_action is gamble.

72
00:04:33,000 --> 00:04:35,000
Now that doesn't sound quite right to me.

73
00:04:35,000 --> 00:04:40,000
If you are faced with that problem, assuming you had $100 to your name.

74
00:04:40,000 --> 00:04:43,000
Would you take the gamble--try to go for the 3 million,

75
00:04:43,000 --> 00:04:45,000
or would you hold with 1 million?

76
00:04:45,000 --> 00:04:50,000
And there's no right or wrong answer to this despite what the interface has to do.

77
00:04:50,000 --> 00:04:54,000
It has to tell you one answer is right or wrong, but you can ignore that.

78
00:04:54,000 --> 00:04:58,000
I just want to collect some data on how many people think that they would gamble

79
00:04:58,000 --> 99:59:59,999
in that situation and how many people think they would hold.
