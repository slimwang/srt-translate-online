1
00:00:00,000 --> 00:00:03,000
Alright, so the first problem is false,

2
00:00:03,000 --> 00:00:06,000
and this comes from the definition of NP-completeness.

3
00:00:06,000 --> 00:00:10,000
By definition since SAT is in NP-complete,

4
00:00:10,000 --> 00:00:15,000
every problem in NP can be reduced to it in polynomial time,

5
00:00:15,000 --> 00:00:20,000
so there can't exist NP problems that can't be transformed

6
00:00:20,000 --> 00:00:22,000
into SAT in polynomial time.

7
00:00:22,000 --> 00:00:24,000
The second problem is also false.

8
00:00:24,000 --> 00:00:28,000
Nondeterministic RAMs don't give different results for the same decision problem.

9
00:00:28,000 --> 00:00:31,000
This is something that a lot of people have problems with,

10
00:00:31,000 --> 00:00:35,000
but the key is that nondeterminism isn't the same thing as randomness.

11
00:00:35,000 --> 00:00:40,000
At each step, remember whenever the if better procedure is called,

12
00:00:40,000 --> 00:00:42,000
it makes the best possible decision,

13
00:00:42,000 --> 00:00:45,000
so it's not going to make a random one,

14
00:00:45,000 --> 00:00:49,000
and it's going to make the same best possible decision every time,

15
00:00:49,000 --> 00:00:52,000
so it won't give different results for the same decision problem.

16
00:00:52,000 --> 00:00:55,000
The third problem is also false.

17
00:00:55,000 --> 00:00:59,000
A problem with exponential possible solutions can only be in P if P equals NP.

18
00:00:59,000 --> 00:01:03,000
A good problem to see this on is sorting.

19
00:01:03,000 --> 00:01:07,000
Whenever you sort a list of N elements, let's say,

20
00:01:07,000 --> 00:01:12,000
there are exponentially many different possible sorts,

21
00:01:12,000 --> 00:01:15,000
but actually, there are quite a few sorting algorithms that

22
00:01:15,000 --> 00:01:19,000
can find the correct sort of an element list

23
00:01:19,000 --> 00:01:22,000
in much shorter than exponential time,

24
00:01:22,000 --> 00:01:25,000
so this is actually not true.

25
00:01:25,000 --> 00:01:29,000
The fourth problem, just like the other 3, is also false.

26
00:01:29,000 --> 00:01:33,000
It is not true that every program that takes exponential time

27
00:01:33,000 --> 00:01:35,000
on a deterministic machine can be made to run in

28
00:01:35,000 --> 00:01:38,000
polynomial time on a nondeterministic machine,

29
00:01:38,000 --> 00:01:41,000
and good examples of this are any program where the

30
00:01:41,000 --> 00:01:45,000
output size is exponential in the input size.

31
00:01:45,000 --> 00:01:49,000
For example, if you have a list of N elements

32
00:01:49,000 --> 00:01:53,000
and then you want to print out all possible sub lists,

33
00:01:53,000 --> 00:01:57,000
then the fact that you have to print out every single possible sub list,

34
00:01:57,000 --> 00:02:01,000
of which there are exponentially many in the input size of the list,

35
00:02:01,000 --> 00:02:05,000
means that if better doesn't actually buy you anything.

36
00:02:05,000 --> 00:02:08,000
You still have to explore the entire exponential space,

37
00:02:08,000 --> 00:02:11,000
so even a nondeterministic machine

38
00:02:11,000 --> 99:59:59,999
will have to take exponential time in that case.
