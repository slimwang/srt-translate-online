1
00:00:00,260 --> 00:00:02,410
Okay, it's finally time to do a little data wrangling

2
00:00:02,410 --> 00:00:07,310
for ourselves. We're going to look at parsing CSV files in Python.

3
00:00:07,310 --> 00:00:09,620
In this case, we're going to be reading the CSV data into

4
00:00:09,620 --> 00:00:13,140
our program and creating on dictionary for each item in that

5
00:00:13,140 --> 00:00:15,940
file. So you might ask yourself, why would we do something

6
00:00:15,940 --> 00:00:19,370
like this? Why not just open it in a spreadsheet application?

7
00:00:19,370 --> 00:00:22,360
One reason, is because if the file is big, let's tens

8
00:00:22,360 --> 00:00:25,550
or even hundreds of megabytes, opening it in a spreadsheet application

9
00:00:25,550 --> 00:00:28,860
like Excel can be slow, inefficient or maybe even

10
00:00:28,860 --> 00:00:31,850
impossible. Your app might do the software equivalent of

11
00:00:31,850 --> 00:00:35,710
this. Another reason we might want to programmatically process

12
00:00:35,710 --> 00:00:37,650
tabular data, is because we might have a whole

13
00:00:37,650 --> 00:00:40,340
lot of files to process. So, doing it manually

14
00:00:40,340 --> 00:00:43,900
in the spreadsheet application simply isn't an option. Alright,

15
00:00:43,900 --> 00:00:46,770
let's take a look at the code provided. Here

16
00:00:46,770 --> 00:00:50,570
you can see, we have a parse file application.

17
00:00:50,570 --> 00:00:52,360
In this exercise, we're going to be working with

18
00:00:52,360 --> 00:00:55,720
the Beatles' disckography data, one more time. You'll be

19
00:00:55,720 --> 00:00:58,700
working in the parse file function in the provided

20
00:00:58,700 --> 00:01:02,280
code. And, your assignment is to use the Python

21
00:01:02,280 --> 00:01:06,910
function split to parse each row into a dictionary.

22
00:01:06,910 --> 00:01:10,520
For each dictionary, the names of the fields will

23
00:01:10,520 --> 00:01:16,200
serve as the keys and the value you find on a given row will serve as the values

24
00:01:16,200 --> 00:01:19,710
for those keys. You should produce an array of

25
00:01:19,710 --> 00:01:23,090
these dictionaries, one dictionary for each item remember. And you

26
00:01:23,090 --> 00:01:26,310
should return that array from the parse file function.

27
00:01:26,310 --> 00:01:30,400
Now, one final instruction here, is that rather than processing

28
00:01:30,400 --> 00:01:33,100
the entire file, you should only parse the first

29
00:01:33,100 --> 00:01:35,740
ten lines in this file. If you go beyond that,

30
00:01:35,740 --> 00:01:39,010
you run into trouble with this particular dataset. Since this

31
00:01:39,010 --> 00:01:41,880
is the first exercise we're looking at in this course.

32
00:01:41,880 --> 00:01:43,850
Let me talk a little bit about this test

33
00:01:43,850 --> 00:01:47,240
function here. We're providing this as a means for you

34
00:01:47,240 --> 00:01:51,170
to test your implementation of parse file. This will run

35
00:01:51,170 --> 00:01:53,420
a little bit of code which calls the parse file

36
00:01:53,420 --> 00:01:56,730
function and sample the result that it gets back

37
00:01:56,730 --> 00:01:59,020
from parse file, checking to see if it has the

38
00:01:59,020 --> 00:02:02,540
expected values. When you actually submit your program, we'll be

39
00:02:02,540 --> 00:02:05,661
running some different test code, possibly on a different dataset.
