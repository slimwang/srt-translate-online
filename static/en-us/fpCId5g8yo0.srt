1
00:00:00,000 --> 00:00:04,000
So we just remembered that one of the great powers of grammars

2
00:00:04,000 --> 00:00:06,000
is that they can be recursive, just like procedures.

3
00:00:06,000 --> 00:00:10,000
You can have a grammar rule that expands to itself, allowing you to have an infinite

4
00:00:10,000 --> 00:00:14,000
number of utterances from a finite formal grammar.

5
00:00:14,000 --> 00:00:18,000
That gives us a huge amount of power, almost a magical amount of power,

6
00:00:18,000 --> 00:00:21,000
but it does mean that we'll need one more element of bookkeeping

7
00:00:21,000 --> 00:00:23,000
in order to correctly do parsing.

8
00:00:23,000 --> 00:00:28,000
We saw before in one of the quizzes that we could be in a particular state after seeing

9
00:00:28,000 --> 00:00:33,000
two tokens, four tokens, six tokens, eight tokens,

10
00:00:33,000 --> 00:00:37,000
so we'll need to keep track of one more number to know which one of those it was.

11
00:00:37,000 --> 00:00:41,000
We'll need to know where we came from or how many tokens we'd seen thus far.

12
00:00:41,000 --> 00:00:43,000
Here's a grammar we've seen before.

13
00:00:43,000 --> 00:00:46,000
E goes to E plus E or E goes to int.

14
00:00:46,000 --> 00:00:48,000
Our input string is int plus int.

15
00:00:48,000 --> 00:00:53,000
I'm going to start filling out that chart that shows us what parsing states we could be in

16
00:00:53,000 --> 00:00:56,000
if we've only seen a subset of the input.

17
00:00:56,000 --> 00:00:59,000
If we've only seen zero tokens, then we could either

18
00:00:59,000 --> 00:01:02,000
be looking for E plus E or we could be looking for int.

19
00:01:02,000 --> 00:01:05,000
Those are our two grammar rules. We haven't seen anything yet.

20
00:01:05,000 --> 00:01:07,000
There is nothing to the past. Everything is to the future.

21
00:01:07,000 --> 00:01:11,000
Once we've seen the single int, then we could either be in the middle of parsing

22
00:01:11,000 --> 00:01:13,000
E goes to int, and we're totally done with it.

23
00:01:13,000 --> 00:01:17,000
Or, if the input is longer, we could be expecting a plus and an E in the future.

24
00:01:17,000 --> 00:01:19,000
Here is where things start getting fun

25
00:01:19,000 --> 00:01:22,000
If we've seen the int and the plus, then we could definitely be in the middle of parsing

26
00:01:22,000 --> 00:01:26,000
E goes to E plus E with a dot right here.

27
00:01:26,000 --> 00:01:29,000
We've seen two things to the left. There is one thing in our future.

28
00:01:29,000 --> 00:01:35,000
But now we could also start looking for another int.

29
00:01:35,000 --> 00:01:38,000
We're expecting in int to be the third token.

30
00:01:38,000 --> 00:01:43,000
If we saw it, it would reduce or it would be rewritten from E goes to int.

31
00:01:43,000 --> 00:01:48,000
Our current parsing state is we have seen it yet, but we're really expecting it in the future.

32
00:01:48,000 --> 00:01:51,000
But here is where the potential ambiguity comes in.

33
00:01:51,000 --> 00:01:57,000
This states is exactly E goes to dot int.

34
00:01:57,000 --> 00:02:03,000
We saw that same state back here in chart position 0.

35
00:02:03,000 --> 00:02:07,000
However, they're not exactly the same.

36
00:02:07,000 --> 00:02:10,000
This one corresponds to the first int in our input.

37
00:02:10,000 --> 00:02:15,000
This one corresponds to the second int in our input.

38
00:02:15,000 --> 00:02:18,000
This is what we're thinking about when we haven't seen any tokens yet.

39
00:02:18,000 --> 00:02:22,000
This is what we're thinking about when we've seen two tokens by not the third.

40
00:02:22,000 --> 00:02:26,000
The parsing rule is similar, because the grammar is recursive.

41
00:02:26,000 --> 00:02:28,000
It has a small, finite structure.

42
00:02:28,000 --> 00:02:31,000
But we really need to remember one extra bit of information.

43
00:02:31,000 --> 00:02:36,000
When we're thinking about it this time, we've sort of seen zero tokens so far.

44
00:02:36,000 --> 00:02:39,000
Over here, we've seen two tokens so far.

45
00:02:39,000 --> 00:02:44,000
Or we decided to add this state based on reasoning about state 2.

46
00:02:44,000 --> 00:02:48,000
This fact that we could have two otherwise identical parse states

47
00:02:48,000 --> 00:02:53,000
means we'll need to augment our parse states with one more number of information.

48
00:02:53,000 --> 00:02:58,000
We're going to call this new information the "starting position" or the "from position"

49
00:02:58,000 --> 00:03:00,000
associated with a parse state.

50
00:03:00,000 --> 00:03:02,000
One last way to see way to see why we need it.

51
00:03:02,000 --> 00:03:05,000
Let's say one of our current states is E goes to dot int,

52
00:03:05,000 --> 00:03:09,000
and we actually see that int. It's part of the input.

53
00:03:09,000 --> 00:03:12,000
We need to know whether we should go on

54
00:03:12,000 --> 00:03:15,000
to sort of chart position one and start looking around here

55
00:03:15,000 --> 00:03:20,000
or whether we should go on to chart position 3, which I haven't filled in, and start looking there.

56
00:03:20,000 --> 00:03:23,000
We need to know where we came from in order to know where we're going.

57
00:03:23,000 --> 00:03:28,000
This is one of the reasons why context-free grammars are more powerful than finite state machines.

58
00:03:28,000 --> 00:03:31,000
Finite state machines did not really need to know where they were coming from.

59
00:03:31,000 --> 00:03:34,000
They were memory-less in some sense aside from the current state.

60
00:03:34,000 --> 00:03:37,000
We're doing all of this because we want to master parsing.

61
00:03:37,000 --> 00:03:40,000
We want to see which strings are in the language of a grammar,

62
00:03:40,000 --> 00:03:43,000
to see if HTML or JavaScript is valid before we try to through it

63
00:03:43,000 --> 00:03:46,000
to our web browser's rendering engine.

64
00:03:46,000 --> 00:03:50,000
Another way to think about this is that parsing is the inverse of producing strings.

65
00:03:50,000 --> 00:03:53,000
Rather than producing all the strings in the world,

66
00:03:53,000 --> 00:03:56,000
I want to see if this one string could have been produced by our grammar.

67
00:03:56,000 --> 00:04:02,000
Over here I've drawn a little diagram of parsing a simple sentence int plus int using our grammar.

68
00:04:02,000 --> 00:04:09,000
Well, one way to view this is to think about the parse tree, which I've kind of drawn here upside down.

69
00:04:09,000 --> 00:04:15,000
Conceptually, I could apply this E goes to int rule in reverse and rewrite this int with an E,

70
00:04:15,000 --> 00:04:19,000
changing the input string so that it has a nonterminal in it.

71
00:04:19,000 --> 00:04:23,000
Then I can do the same thing again over here, and now I have E plus E.

72
00:04:23,000 --> 00:04:25,000
I can rewrite that to be just E.

73
00:04:25,000 --> 00:04:30,000
It's as if I'm taking the rules and the grammar and changing the direction of the arrow.

74
00:04:30,000 --> 00:04:35,000
If I view this story this way, we're parsing.

75
00:04:35,000 --> 00:04:41,000
Magic trick of perspective--if I read from the bottom up we're generating or producing strings.

76
00:04:41,000 --> 00:04:44,000
Starting with E, I choose to apply E goes to E plus E.

77
00:04:44,000 --> 00:04:48,000
I choose to apply E goes to int. I choose to apply E goes to int.

78
00:04:48,000 --> 00:04:51,000
I end up with a string at the end of the day.

79
00:04:51,000 --> 00:04:56,000
This way, from the bottom to the top, is generating or producing a string.

80
00:04:56,000 --> 00:05:00,000
This way, from the top to the bottom, is parsing a string,

81
00:05:00,000 --> 00:05:04,000
applying the reductions in reverse order until you get back to the start symbol.

82
00:05:04,000 --> 00:05:07,000
If you could apply all the reductions in reverse order,

83
00:05:07,000 --> 00:05:11,000
then you know that the string is in the language of the grammar,

84
00:05:11,000 --> 00:05:13,000
because you have a script for generating it.

85
00:05:13,000 --> 99:59:59,999
Just do everything you did backwards.
