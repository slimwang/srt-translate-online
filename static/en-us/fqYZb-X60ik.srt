1
00:00:00,305 --> 00:00:04,030
Let's look at the solution to
our DRAM access scheduling quiz.

2
00:00:04,030 --> 00:00:07,596
So we have 32 arrays,
each is 16 megabits and

3
00:00:07,596 --> 00:00:12,740
takes a 12 bit row address,
and a 12 bit column address.

4
00:00:12,740 --> 00:00:18,160
Twelve bits is three hex digits, so
the row address will be the upper

5
00:00:18,160 --> 00:00:23,440
three hex digits, and the column
address will be the lower hex digits.

6
00:00:23,440 --> 00:00:28,090
Each of these corresponds to
a 32-bit memory location.

7
00:00:28,090 --> 00:00:33,140
So what happens is each of these
arrays sees the same address, but

8
00:00:33,140 --> 00:00:36,600
it provides a different bit for
that address.

9
00:00:36,600 --> 00:00:40,600
So each address will have the same
sequence of row and column addresses,

10
00:00:40,600 --> 00:00:44,360
it's just that they will implement
different bits of that address.

11
00:00:44,360 --> 00:00:49,970
So what we have here is the first one,
of course, needs to be a page open.

12
00:00:49,970 --> 00:00:52,770
So we have 10 nanoseconds
to open this first page.

13
00:00:54,140 --> 00:00:59,670
We will then read in two nanoseconds,
then we will close the page

14
00:01:00,780 --> 00:01:06,040
in another five nanoseconds, because
the next one is on a different page.

15
00:01:06,040 --> 00:01:08,060
The row address is different.

16
00:01:08,060 --> 00:01:14,050
So we spent 17 nanoseconds here,
we will spend another 17 here,

17
00:01:14,050 --> 00:01:18,590
we will then spend another 17 here
because it's again in a different row.

18
00:01:18,590 --> 00:01:23,770
17 here and here and here and here.

19
00:01:23,770 --> 00:01:28,610
Overall, we have 7 accesses,
each to a different page, so

20
00:01:28,610 --> 00:01:33,150
each of them requires 17 nanoseconds,
for

21
00:01:33,150 --> 00:01:36,900
a total of 119 nanoseconds.

22
00:01:36,900 --> 00:01:39,210
Now let's try to reorganize these.

23
00:01:39,210 --> 00:01:44,560
What we want to do when we reorganize
these, is once we open a page, access

24
00:01:44,560 --> 00:01:49,980
everything on that page before we move
on, which means we will open this row,

25
00:01:51,050 --> 00:01:56,650
and then we will access everything in
that row, which means this and this too.

26
00:01:57,790 --> 00:02:01,622
Now, what happens is we spend
10 nanoseconds opening that row,

27
00:02:01,622 --> 00:02:06,323
3 times 2 nanoseconds reading
these three things, and

28
00:02:06,323 --> 00:02:10,570
then we need to close the row
in another 5 nanoseconds.

29
00:02:10,570 --> 00:02:13,860
Then what happens is we
open the next row, and

30
00:02:13,860 --> 00:02:18,610
we read everything from that row,
which includes this too, so

31
00:02:18,610 --> 00:02:23,760
we end up opening one row, reading two
things from it, and then closing it.

32
00:02:23,760 --> 00:02:28,770
And now we spend 17 nanoseconds for
each one of these.

33
00:02:28,770 --> 00:02:36,250
In total, we spent 74 nanoseconds
doing these accesses.

34
00:02:36,250 --> 00:02:41,420
So as you can see, when caches have
a number of pending misses and we need

35
00:02:41,420 --> 00:02:47,660
to send these misses to memory, it pays
to rearrange the order of the addresses

36
00:02:47,660 --> 00:02:52,560
we are accessing to benefit from
the organization of the data.
