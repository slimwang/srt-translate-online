1
00:00:00,004 --> 00:00:03,139
So remember that we only fetch each source object once,

2
00:00:03,139 --> 00:00:06,539
but we have to distribute that information across all P threads,

3
00:00:06,539 --> 00:00:10,935
and for each destination object, again we're going to fetch that information once,

4
00:00:10,935 --> 00:00:15,370
but then we have to distribute that information across all P source threads.

5
00:00:15,370 --> 00:00:20,782
It would be nicer if we didn't have to do this because we can store that information in shared memory once,

6
00:00:20,782 --> 00:00:22,947
but then we have to read out of shared memory,

7
00:00:22,947 --> 00:00:27,150
which is slower, or we have to replicate that information in each thread's local storage,

8
00:00:27,150 --> 00:00:31,551
which wastes space and limits the number of threads we can have resident in a single thread block.

9
00:00:31,551 --> 00:00:35,838
The second downside is that we have to communicate between threads to sum up the forces.

10
00:00:35,838 --> 00:00:40,562
So we've individually computed each separate force on separate threads,

11
00:00:40,562 --> 00:00:45,634
and then we have to communicate between all these threads to sum up the force for this particular tile.

12
00:00:45,634 --> 00:00:49,634
We'd prefer not to have to do that either, so instead we'll look at another way to compute a tile.
