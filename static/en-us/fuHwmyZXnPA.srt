1
00:00:00,360 --> 00:00:03,710
So lets look at the load linked/store
conditional instructions,

2
00:00:03,710 --> 00:00:06,930
which usually we call LL/SC instruction.

3
00:00:06,930 --> 00:00:12,090
We have them because atomic reading and
writing in the same instruction

4
00:00:12,090 --> 00:00:16,810
even if we just do the write, if the
read has tested positive for something.

5
00:00:16,810 --> 00:00:20,020
Is really bad for
pipelining your processor.

6
00:00:20,020 --> 00:00:25,080
Let's look at the classical five stage
pipeline where we fetch the code and

7
00:00:25,080 --> 00:00:26,480
read registers.

8
00:00:26,480 --> 00:00:27,960
Do the area operation.

9
00:00:27,960 --> 00:00:31,240
This is where compute the address for
memory instructions.

10
00:00:31,240 --> 00:00:36,440
Then we have a memory axis stage and
finally, we write the result

11
00:00:36,440 --> 00:00:40,920
to a register, if a register
result exists in the instruction.

12
00:00:40,920 --> 00:00:45,760
Loads will be fetched, decoded and
read the register, compute the address

13
00:00:45,760 --> 00:00:49,280
using that register, access memory to
get the value from that address and

14
00:00:49,280 --> 00:00:50,658
then write the result to a register.

15
00:00:50,658 --> 00:00:55,120
An atomic read/write instruction,
such as a swap, or test and

16
00:00:55,120 --> 00:00:59,750
set, or test and write, would compute
the address and read registers.

17
00:00:59,750 --> 00:01:02,160
And then when it gets
to the memory stage,

18
00:01:02,160 --> 00:01:05,540
it cannot do everything it needs
to do in one access to memory.

19
00:01:05,540 --> 00:01:08,860
because loads and
stores do either a read or a write.

20
00:01:08,860 --> 00:01:11,410
A read/write instruction
needs to do both and

21
00:01:11,410 --> 00:01:13,770
that cannot be done
in the same cycle for

22
00:01:13,770 --> 00:01:18,810
the same memory location without really
complicating the memory stage a lot.

23
00:01:18,810 --> 00:01:22,970
So just for the sake of atomic
read/write instructions, we would need

24
00:01:22,970 --> 00:01:28,080
to add memory 2 stage, possibly memory
3, so that they can read the memory,

25
00:01:28,080 --> 00:01:30,700
do some checking and
then finally write the memory.

26
00:01:30,700 --> 00:01:33,940
So we would be adding to our
pipeline several stages,

27
00:01:33,940 --> 00:01:36,990
possibly, just for
these instructions, but

28
00:01:36,990 --> 00:01:40,560
remember that every instruction flows
through the pipeline the same way.

29
00:01:40,560 --> 00:01:44,940
So if we add these two stages for
these instructions we really have added

30
00:01:44,940 --> 00:01:49,110
two stages for all instructions,
which is not very good.

31
00:01:49,110 --> 00:01:53,470
because these are actually not going to
execute that frequently to justify this.

32
00:01:53,470 --> 00:01:57,310
So we will separate the atomic read and
write into two instructions.

33
00:01:57,310 --> 00:02:00,060
The first will be a load
linked instruction.

34
00:02:00,060 --> 00:02:04,140
Its purpose is to implement the read
part of the atomic operation.

35
00:02:04,140 --> 00:02:07,970
What it does is it behaves
just like a normal load.

36
00:02:07,970 --> 00:02:12,250
It just reads from a memory location and
puts the value in a register.

37
00:02:12,250 --> 00:02:13,770
But in addition to that,

38
00:02:13,770 --> 00:02:18,630
it saves the address from which it
loaded into a special link register.

39
00:02:18,630 --> 00:02:22,730
So that's the only thing that it does
that is different from a normal load.

40
00:02:22,730 --> 00:02:26,490
The store instruction that we
will use to implement the right

41
00:02:26,490 --> 00:02:31,760
part of the atomic read/write operation
is called a store conditional.

42
00:02:31,760 --> 00:02:36,930
What it does is to check first
if the address that it computes

43
00:02:36,930 --> 00:02:39,890
is the same as the one
in the link register.

44
00:02:39,890 --> 00:02:44,680
If the address is the same, then it does
a normal store to that memory location,

45
00:02:44,680 --> 00:02:47,140
and returns a 1 in it's register.

46
00:02:47,140 --> 00:02:51,110
If the address that the store computes
is not the same as the one in the link

47
00:02:51,110 --> 00:02:56,890
register, then it just returns 0 in the
the register without storing anything.

48
00:02:56,890 --> 00:03:01,330
These two are behaving like
a single atomic operation

49
00:03:01,330 --> 00:03:02,860
because of the link register.

50
00:03:02,860 --> 00:03:05,370
So let's see in more
detail how that works.
