1
00:00:00,106 --> 00:00:02,703
Here's an example of some simple BLAS code.

2
00:00:02,703 --> 00:00:08,842
First we initialize N to 2 to the 20th, or about a million, and then we perform SAXPY.

3
00:00:08,842 --> 00:00:13,185
Remember, SAXPY--the S single precision, and that stands for AX plus Y.

4
00:00:13,185 --> 00:00:17,286
So we're going to set Y equal to AX plus Y by calling SAXPY,

5
00:00:17,286 --> 00:00:21,156
and we're going to do this on a million elements, or more exactly, M elements.

6
00:00:21,156 --> 00:00:27,282
So here we're going to say Y is equal to A, which is 2.0, times X plus Y.

7
00:00:27,282 --> 00:00:29,332
This is the original BLAS code.

8
00:00:29,332 --> 00:00:32,836
If we want to run this on the GPU, then the first thing we're going to do is

9
00:00:32,836 --> 00:00:35,404
change the comment at the top.

10
00:00:35,404 --> 00:00:38,310
So the first thing we're going to do after we change the comment at the top

11
00:00:38,310 --> 00:00:42,814
is add a CUBLAS Prefix and change these to be device variables.

12
00:00:42,814 --> 00:00:47,118
Next we need to initialize CUBLAS and shut it down again when we're done.

13
00:00:47,118 --> 00:00:51,454
And now we need to allocate those device vectors and free them when we're done.

14
00:00:51,454 --> 00:00:57,329
Finally, we need to set the vectors, so copying the data over to the GPU, and get the result back.

15
00:00:57,329 --> 00:01:01,933
Okay, so by the addition of just a few lines, we've accelerated this using CUBLAS,

16
00:01:01,933 --> 00:01:06,815
and I'll point out that of course, if you were doing more than just this one simple SAXPY operation,

17
00:01:06,815 --> 00:01:09,007
you'd probably leave the intermediate results.

18
00:01:09,007 --> 00:01:13,585
You wouldn't keep setting and getting your vectors back and forth to the CPU.

19
00:01:13,585 --> 00:01:17,445
You would do some operation, then you'd use the results to do the next operation and so forth.

20
00:01:17,445 --> 00:01:20,814
So a lot of this overhead really only appears once

21
00:01:20,814 --> 00:01:24,000
at the beginning and end of your calculation.
