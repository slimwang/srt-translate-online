1
00:00:00,140 --> 00:00:02,552
So, let's see what is memory consistency

2
00:00:02,552 --> 00:00:06,190
and how it differs from coherence. What coherence

3
00:00:06,190 --> 00:00:09,720
does is define the order of accesses

4
00:00:09,720 --> 00:00:13,100
observable by different threads, if these accesses go

5
00:00:13,100 --> 00:00:18,750
to the same memory location or to the same address. Coherence is needed in order

6
00:00:18,750 --> 00:00:21,970
to share data. Without coherence, a thread

7
00:00:21,970 --> 00:00:25,270
is allowed to modify memory location while another

8
00:00:25,270 --> 00:00:28,910
thread is allowed to read forever the old

9
00:00:28,910 --> 00:00:31,460
value of that location, in which case we

10
00:00:31,460 --> 00:00:33,600
can not really write shared memory programs that

11
00:00:33,600 --> 00:00:37,456
work. An important thing about coherence, however, is

12
00:00:37,456 --> 00:00:39,832
that it defines the order of accesses to

13
00:00:39,832 --> 00:00:43,130
the same address. It does not say anything

14
00:00:43,130 --> 00:00:46,280
about accesses that go to different location. And

15
00:00:46,280 --> 00:00:50,340
that is what memory consistency is about. It defines

16
00:00:50,340 --> 00:00:54,037
the order of accesses to different addresses. So, the

17
00:00:54,037 --> 00:00:57,331
big question now, before we get into consistencies, does this

18
00:00:57,331 --> 00:01:00,320
even matter? If we guarantee that when I write

19
00:01:00,320 --> 00:01:03,520
to something, all the other cores get to see it,

20
00:01:03,520 --> 00:01:07,220
and that happens for every address. As in, I

21
00:01:07,220 --> 00:01:09,530
write to A, somebody sees what I wrote. I write

22
00:01:09,530 --> 00:01:12,210
to B, somebody sees what I wrote. What can

23
00:01:12,210 --> 00:01:15,460
change about the order of accesses to different addresses and

24
00:01:15,460 --> 00:01:19,090
how does that even matter if I need to maintain this?
