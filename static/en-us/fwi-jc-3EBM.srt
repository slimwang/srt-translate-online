1
00:00:00,330 --> 00:00:03,350
Letâs turn to key conflicts. Remember we talked

2
00:00:03,350 --> 00:00:05,300
about two different ways to assign a key.

3
00:00:06,870 --> 00:00:09,580
The first where datastore automatically assigns a key

4
00:00:09,580 --> 00:00:12,940
value for you. And the second was you can

5
00:00:12,940 --> 00:00:18,910
provide a key name ID that generates the key. And when you provide a keyname ID,

6
00:00:18,910 --> 00:00:21,330
you're responsible for ensuring that they are unique

7
00:00:21,330 --> 00:00:25,350
for all entities of that kind. This is important,

8
00:00:25,350 --> 00:00:30,035
because otherwise you will generate a key conflict. That's

9
00:00:30,035 --> 00:00:32,179
right, we do not want to cause a datastore key

10
00:00:32,179 --> 00:00:35,380
conflict. That's for sure. Let's see what they are

11
00:00:35,380 --> 00:00:37,840
and how we can avoid them. Let's go back to

12
00:00:37,840 --> 00:00:40,720
recipes for a moment. Say, for example, that we

13
00:00:40,720 --> 00:00:43,910
have the recipe kind that we worked with before. And

14
00:00:43,910 --> 00:00:46,900
we want to insert a vegetarian lasagna entity and a

15
00:00:46,900 --> 00:00:50,505
meat lasagna entity into the datastore. Well, if I let

16
00:00:50,505 --> 00:00:53,150
datastore generate the keys then it will make sure

17
00:00:53,150 --> 00:00:56,420
to create two unique keys. One for the vegetarian

18
00:00:56,420 --> 00:01:00,750
lasagna entity. And one for the meat lasagna entity.

19
00:01:00,750 --> 00:01:04,110
So two unique keys. But let's say that I

20
00:01:04,110 --> 00:01:06,580
instead want to generate a key from a keyname

21
00:01:06,580 --> 00:01:09,840
ID that I specify. Then it is very important

22
00:01:09,840 --> 00:01:13,380
that I can guarantee that those are unique. In

23
00:01:13,380 --> 00:01:16,220
this example, it is very bad to choose lasagna

24
00:01:16,220 --> 00:01:19,430
as a keyname ID if both vegetarian lasagna

25
00:01:19,430 --> 00:01:21,690
and meat lasagna would have lasagna as the

26
00:01:21,690 --> 00:01:24,410
key name. The reason is that when you

27
00:01:24,410 --> 00:01:27,980
insert the first entity, it will get it's key

28
00:01:27,980 --> 00:01:33,570
based on the key name ID lasagna. But when you later insert the meat lasagna, it

29
00:01:33,570 --> 00:01:36,720
will override the vegetarian lasagna, because it also

30
00:01:36,720 --> 00:01:41,470
has the key name/ID lasagna. So again, remember this,

31
00:01:41,470 --> 00:01:44,560
when you are explicitly setting a key name ID.

32
00:01:44,560 --> 00:01:47,430
You have to ensure that they will be unique and

33
00:01:47,430 --> 00:01:49,930
in our application, it is safe to use user

34
00:01:49,930 --> 00:01:52,830
ID, because the uniqueness of it is ensured by the

35
00:01:52,830 --> 00:01:56,260
user authentication system. As it turns out, this is

36
00:01:56,260 --> 00:01:59,220
actually quite convenient since it makes it easy to retrieve

37
00:01:59,220 --> 00:02:02,150
the profile from the data store. That's exactly the

38
00:02:02,150 --> 00:02:04,920
code we will add in the coming exercise. Have fun.
