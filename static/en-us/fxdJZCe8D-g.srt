1
00:00:00,300 --> 00:00:02,643
Now the first thing to notice is that all

2
00:00:02,643 --> 00:00:06,070
of these are read and write accesses. There's nothing special

3
00:00:06,070 --> 00:00:08,890
about them. This is, this is going to be modifying

4
00:00:08,890 --> 00:00:11,410
data using loads and stores, and this is storing a

5
00:00:11,410 --> 00:00:13,900
value into it, and this is reading a value and

6
00:00:13,900 --> 00:00:16,309
using a value. So all of these are normal read

7
00:00:16,309 --> 00:00:21,140
write accesses, but there is a difference between. The way

8
00:00:21,140 --> 00:00:25,990
the program uses this flag variable versus this data structure.

9
00:00:25,990 --> 00:00:28,680
The flag variable is being used as a synchronization

10
00:00:28,680 --> 00:00:31,850
variable. And that's a, a secret that only this P1

11
00:00:31,850 --> 00:00:35,810
and P2 know about. That this, even though innocuously

12
00:00:35,810 --> 00:00:38,820
it looks like a simple Integer variable that is used

13
00:00:38,820 --> 00:00:41,200
in a program where there is special semantic for

14
00:00:41,200 --> 00:00:44,000
this particular variable so far as this, this program is

15
00:00:44,000 --> 00:00:47,090
concerned. P1 and P2 know that this is the way

16
00:00:47,090 --> 00:00:51,080
by which their signalling each other, that something that this

17
00:00:51,080 --> 00:00:53,360
guy waiting on is available from P1.

18
00:00:53,360 --> 00:00:56,850
Right? And so its a synchronization variable. On

19
00:00:56,850 --> 00:01:03,540
the other hand, the - The data structure A is a normal data. But, both accessing

20
00:01:03,540 --> 00:01:06,920
the synchronization variable and normal data is being

21
00:01:06,920 --> 00:01:10,710
accomplished by simple read write accesses that's available

22
00:01:10,710 --> 00:01:13,490
in the processor. And that's how we're able

23
00:01:13,490 --> 00:01:16,630
to get the solution for this particular question.

24
00:01:17,830 --> 00:01:20,940
It's comforting to know that atomic read and

25
00:01:20,940 --> 00:01:25,416
write operations are good for doing simple co-ordination

26
00:01:25,416 --> 00:01:27,980
among processes as we illustrate it through this

27
00:01:27,980 --> 00:01:32,210
question. And in fact, when we look at

28
00:01:32,210 --> 00:01:35,850
certain implementation of barrier algorithms later on You'll

29
00:01:35,850 --> 00:01:37,580
find that this is all that is needed

30
00:01:37,580 --> 00:01:39,410
from the architecture in order to implement some

31
00:01:39,410 --> 00:01:43,070
of them. But now, how about implementing a synchronization

32
00:01:43,070 --> 00:01:48,630
primitive like a mutual-exclusion lock? Are atomic reads and writes sufficient

33
00:01:48,630 --> 00:01:51,360
to implement a synchronization primitive like

34
00:01:51,360 --> 00:01:54,310
a mutual-exclusion lock? Let's investigate that.
