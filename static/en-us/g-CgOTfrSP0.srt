1
00:00:00,000 --> 00:00:04,820
And for me the problem is that this solution uses too much memory, uses it unnecessarily.

2
00:00:04,820 --> 00:00:11,690
We quit this gigantic list with a million elements and actually a million and one elements

3
00:00:11,690 --> 00:00:13,950
and we don't ever use it again.

4
00:00:13,950 --> 00:00:17,980
We just use it once to calculate the sum. That seems like sort of waste to me.

5
00:00:17,980 --> 00:00:21,580
And this is exactly the motivation for generator expression.

6
00:00:21,580 --> 00:00:24,060
We don't want to create list that we're never going to use.

7
00:00:24,060 --> 00:00:27,740
So if we want to solve this exact same problem with the generator expression,

8
00:00:27,740 --> 00:00:31,720
it's a simple as converting brackets to parenthesis.

9
00:00:31,720 --> 00:00:37,030
Actually, we could do away with one set of parenthesis here but I'm going to leave them in

10
00:00:37,030 --> 00:00:39,340
and running gives the exact same result.

11
00:00:39,340 --> 00:00:45,180
Interesting aside here since range is actually creating a gigantic list as well,

12
00:00:45,180 --> 00:00:48,420
we can use Python's built-in xrange function--

13
00:00:48,420 --> 00:00:51,430
basically, this prevents us from generating this entire list.

14
00:00:51,430 --> 00:00:55,220
Okay. So now we know how to use generator expressions.

15
00:00:55,220 --> 00:01:00,260
Let's poke around a bit and figure out exactly what's going on inside of them.
