1
00:00:00,000 --> 00:00:03,770
The second one would be a good choice, and I'll explain why.

2
00:00:03,770 --> 00:00:08,000
The total amount of computation to be done is proportional to l²,

3
00:00:08,000 --> 00:00:10,360
the number of cells in the domain.

4
00:00:10,360 --> 00:00:12,930
So if we have n² course or processors,

5
00:00:12,930 --> 00:00:17,220
the amount of work for each of these is proportional to l² over n².

6
00:00:17,220 --> 00:00:21,520
Which means that the first term describes the time taken by the computation alone.

7
00:00:21,520 --> 00:00:24,440
But then the processors, or the course,

8
00:00:24,440 --> 00:00:27,270
have to exchange data at the boundaries.

9
00:00:27,270 --> 00:00:32,640
Add that, and the amount of that data is proportional to n minus 1.

10
00:00:32,640 --> 00:00:35,600
We have n minus 1 vertical boundary lines

11
00:00:35,600 --> 00:00:38,660
and n minus 1 horizontal boundary lines,

12
00:00:38,660 --> 00:00:43,880
and it is proportional to l, because we have l cells along each boundary line.

13
00:00:43,880 --> 00:00:47,020
So of these expressions, the second one makes the most sense.

14
00:00:47,020 --> 00:00:49,300
Footnote: When we use this expression,

15
00:00:49,300 --> 00:00:52,540
we'll find that the optimum number of processors

16
00:00:52,540 --> 00:00:57,280
is proportional to the cubed root of the number of cells, l².

17
00:00:57,280 --> 00:01:00,250
This is a little surprising on first sight.

18
00:01:00,250 --> 00:01:03,170
You may expect that the optimum number is proportional

19
00:01:03,170 --> 00:01:06,960
to the number of cells, not proportional to its cubed root.

20
00:01:06,960 --> 99:59:59,999
This relationship is easy to verify by looking at the minimum of this expression.
