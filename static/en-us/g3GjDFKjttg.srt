1
00:00:00,000 --> 00:00:03,000
[Narrator] Wow was that actually it for HTML?

2
00:00:03,000 --> 00:00:09,000
Actually, yes, remember we only have 3 types of HTML elements.

3
00:00:09,000 --> 00:00:12,000
The word element, which we just shot how to handle.

4
00:00:12,000 --> 00:00:15,000
We call graphics.word; the tag element, which we also saw how to handle.

5
00:00:15,000 --> 00:00:17,000
We check to make sure the tags match.

6
00:00:17,000 --> 00:00:21,000
We call graphics begin tag and graphics end tag, and the Java script element.

7
00:00:21,000 --> 00:00:25,000
Now, this is super tough, but it's not really HTML proper.

8
00:00:25,000 --> 00:00:29,000
Here's what we're going to do: step 1, we'll interpret the Java script until we get a string.

9
00:00:29,000 --> 00:00:32,000
Step 2, we'll just call graphics.word on that string.

10
00:00:32,000 --> 00:00:35,000
Whatever they want us to print out, we will.

11
00:00:35,000 --> 00:00:38,000
Now, we just need to know how to interpret Java script,

12
00:00:38,000 --> 00:00:40,000
and then we'll be done with our web browser.

13
00:00:40,000 --> 00:00:44,000
However, Java script is symantically richer than HTML,

14
00:00:44,000 --> 00:00:47,000
which means it will be harder to interpret.

15
00:00:47,000 --> 00:00:52,000
For example, Java script has arithmetic and HTML rarely has arithmetic.

16
00:00:52,000 --> 00:00:55,000
Java script also has variables.

17
00:00:55,000 --> 00:00:59,000
HTML rarely has variables, and we're going to have to deal with all of these things,

18
00:00:59,000 --> 00:01:02,000
but we have to start somewhere so let's just start with arithmetic.

19
00:01:02,000 --> 00:01:06,000
Suppose our input is 1<i>2 + 3</i>4.

20
00:01:06,000 --> 00:01:10,000
We'll be given a parse tree that looks mostly like this,

21
00:01:10,000 --> 00:01:12,000
but with some extra decorations.

22
00:01:12,000 --> 00:01:15,000
Remember that our parse tree is actually more--it will look more like this for the leaves.

23
00:01:15,000 --> 00:01:20,000
They're all tuples, but I'm abstracting away the tuples stuff just to show you the shape of it.

24
00:01:20,000 --> 00:01:26,000
What we're going to do is just write a procedure, again, called interpret or Java script interpret,

25
00:01:26,000 --> 00:01:31,000
that walks down the tree and computes values and returns them back up.

26
00:01:31,000 --> 00:01:33,000
How do I figure out what this plus means?

27
00:01:33,000 --> 00:01:35,000
Well, I'm going to call myself recursively.

28
00:01:35,000 --> 00:01:37,000
How do I figure out what this times means?

29
00:01:37,000 --> 00:01:40,000
Well, it's a binary operator so I'm going to figure out my left child.

30
00:01:40,000 --> 00:01:45,000
That's 1, and figure out my right child that's 2, so 1*2 is 2.

31
00:01:45,000 --> 00:01:48,000
I'll just bring that up, pass that up to my parent.

32
00:01:48,000 --> 00:01:50,000
Now, I'll call myself recursively over here.

33
00:01:50,000 --> 00:01:52,000
How do I figure out this times?

34
00:01:52,000 --> 00:01:59,000
Well, this is a 3, and that's a 4, so together they make 12, so this whole thing is 14.

35
00:01:59,000 --> 00:02:06,000
Our order was down this way, down that way, back up, down this way, all the way back up,

36
00:02:06,000 --> 00:02:09,000
and that's how we're going to figure out Java script arithmetic.

37
00:02:09,000 --> 00:02:14,000
Interpreting complicated languages in computer science is often called evaluation,

38
00:02:14,000 --> 00:02:18,000
which is abbreviated to eval in many instances.

39
00:02:18,000 --> 00:02:23,000
We're going to write an eval procedure for arithmetic expressions like this.

40
00:02:23,000 --> 99:59:59,999
It will therefore be called evaluate expression.
