1
00:00:00,840 --> 00:00:04,150
Couple of issues arise with respect to visitor pattern.

2
00:00:04,150 --> 00:00:09,150
First off, if you think about it, the actual operation called at any

3
00:00:09,150 --> 00:00:13,140
time is dependent on two things. An element such as assignment statement and

4
00:00:13,140 --> 00:00:17,090
a particular visitor such as type checking. This dependency is sometimes called

5
00:00:17,090 --> 00:00:21,243
double dispatch. It most of object oriented languages you're familiar with,

6
00:00:21,243 --> 00:00:26,490
there's single dispatch. That is, you send a message to a particular object.

7
00:00:26,490 --> 00:00:31,730
That, whatever method responds to that message, depends on what object

8
00:00:31,730 --> 00:00:36,660
you're sending it to. In languages like Ada, the determination of who's going to

9
00:00:36,660 --> 00:00:41,430
handle a particular message is determined not just by one argument, but by all

10
00:00:41,430 --> 00:00:45,240
the arguments. Here we're looking at a situation where we're going to make that

11
00:00:45,240 --> 00:00:49,350
determination on what operation we're going to apply based upon two arguments.

12
00:00:49,350 --> 00:00:53,000
Second issue is, who is responsible for performing the actual traversal,

13
00:00:53,000 --> 00:00:58,020
if we're talking about a compiler what we want to do is a tree walk and there

14
00:00:58,020 --> 00:01:02,420
are variant, various variants of tree walks. We can place the code to perform

15
00:01:02,420 --> 00:01:07,130
that tree walk in several places. We can place it in the ObjectStructure class,

16
00:01:07,130 --> 00:01:10,020
in the Visitor class, or we can have some kind of Iterator object.
