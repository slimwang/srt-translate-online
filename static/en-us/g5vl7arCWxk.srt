1
00:00:00,320 --> 00:00:04,590
The first question that popped to your mind whenever we suggest a solution

2
00:00:04,590 --> 00:00:09,840
approach is why? In particular, whose pain point are we trying to

3
00:00:09,840 --> 00:00:15,040
solve? It turns out that many operating system's subsystems need

4
00:00:15,040 --> 00:00:20,210
persistence. For example file system, it has metadata

5
00:00:20,210 --> 00:00:25,530
such as inodes that say where and how files are actually

6
00:00:25,530 --> 00:00:28,870
stored on the disc. And this data structure, which

7
00:00:28,870 --> 00:00:31,210
is the inode data structure, is a persistent data

8
00:00:31,210 --> 00:00:34,070
structure and while the operating system may manipulate that

9
00:00:34,070 --> 00:00:37,640
data structure by bringing it into main memory for performance

10
00:00:37,640 --> 00:00:41,120
reasons. Finally, it has to put it back on

11
00:00:41,120 --> 00:00:44,490
the disk in a persistent state once permanent changes have

12
00:00:44,490 --> 00:00:46,740
been made to that data structure. And that's the

13
00:00:46,740 --> 00:00:50,732
reason why persistence is very, very important for building several

14
00:00:50,732 --> 00:00:52,660
such subsystems. So, a file system I gave

15
00:00:52,660 --> 00:00:56,300
you as an example. Similarly runtime systems of

16
00:00:56,300 --> 00:01:00,770
many languages may require support for persistent objects

17
00:01:00,770 --> 00:01:04,709
that need to be stored on permanent storage.

18
00:01:04,709 --> 00:01:10,310
And all of these subsystems, what they would do is in order to make it efficient

19
00:01:10,310 --> 00:01:12,390
from the point of view of your processing,

20
00:01:12,390 --> 00:01:15,910
they will have in memory a cache copy of

21
00:01:15,910 --> 00:01:19,050
the persistent data that lives on permanent

22
00:01:19,050 --> 00:01:22,070
storage such as the disk. But, if and

23
00:01:22,070 --> 00:01:27,510
when changes are made to those data structures that are in memory, they have to

24
00:01:27,510 --> 00:01:30,310
be committed back to the permanent storage

25
00:01:30,310 --> 00:01:34,240
so that there is consistency for actions that

26
00:01:34,240 --> 00:01:36,710
are being taken by these subsystems. So how

27
00:01:36,710 --> 00:01:40,640
can we provide persistent support for these subsystems?

28
00:01:40,640 --> 00:01:44,030
Well, one possibility is to make virtual

29
00:01:44,030 --> 00:01:47,190
memory persistent, because if you make the virtual

30
00:01:47,190 --> 00:01:49,305
memory system persistent then all the data

31
00:01:49,305 --> 00:01:51,600
structures that are contained in the virtual memory

32
00:01:51,600 --> 00:01:54,770
become automatically persistent. Now the upshot of

33
00:01:54,770 --> 00:01:57,800
doing that would be that the subsystems do

34
00:01:57,800 --> 00:02:00,660
not have to worry about flushing the

35
00:02:00,660 --> 00:02:06,010
persistent data structures from memory into the disk

36
00:02:06,010 --> 00:02:09,139
because some other layer in the software stack is

37
00:02:09,139 --> 00:02:11,600
going to take care of it if in fact

38
00:02:11,600 --> 00:02:15,440
we make virtual memory persistent. That also means that

39
00:02:15,440 --> 00:02:17,370
if the system were to crash either due to

40
00:02:17,370 --> 00:02:20,966
power failure or due to problems in the software,

41
00:02:20,966 --> 00:02:25,430
meaning software bugs, recovering from such crashes becomes easy

42
00:02:25,430 --> 00:02:28,780
because the data structures are persistent and anything that

43
00:02:28,780 --> 00:02:32,020
was done in the virtual memory of the process

44
00:02:32,020 --> 00:02:35,030
that represents that subsystem is going to

45
00:02:35,030 --> 00:02:38,170
be available in the persistent storage. The question

46
00:02:38,170 --> 00:02:40,970
is then, who will use it? Well,

47
00:02:40,970 --> 00:02:43,820
we are expecting that the subsystem designers will

48
00:02:43,820 --> 00:02:46,250
use such an abstraction if we provide

49
00:02:46,250 --> 00:02:50,290
it. But subsystem designers also care about performance.

50
00:02:50,290 --> 00:02:53,200
And therefore, subsystem designers will use it

51
00:02:53,200 --> 00:02:57,650
only if the abstraction is a performant abstraction.

52
00:02:57,650 --> 00:03:02,150
In other words, it is not enough to come up with an abstraction, but it is

53
00:03:02,150 --> 00:03:05,950
also important to make the abstraction efficient. So

54
00:03:05,950 --> 00:03:09,730
if an abstraction is cheap to use, easy

55
00:03:09,730 --> 00:03:13,880
to understand, and flexible, then subsystem designers will

56
00:03:13,880 --> 00:03:16,950
use it. If it is not, they won't.

57
00:03:16,950 --> 00:03:19,440
So the question is, if we want to

58
00:03:19,440 --> 00:03:22,820
make virtual memory persistent, can we also make

59
00:03:22,820 --> 00:03:27,560
it an efficient implementation of the abstraction

60
00:03:27,560 --> 00:03:29,680
of a persistent virtual memory? Now how can

61
00:03:29,680 --> 00:03:33,495
we make it efficient? Now if we think about it, the virtual address base of a

62
00:03:33,495 --> 00:03:36,008
process, and let's say that this virtual address

63
00:03:36,008 --> 00:03:38,970
space represents a process that belongs to a

64
00:03:38,970 --> 00:03:43,580
particular subsystem. It may have persistent data structures

65
00:03:43,580 --> 00:03:47,720
that are strewn all over this address space.

66
00:03:47,720 --> 00:03:51,560
And if these data structures, persistent data structures,

67
00:03:51,560 --> 00:03:54,510
are written into and if these persistent data structures

68
00:03:54,510 --> 00:03:57,070
are manipulated by the subsystem and if we want

69
00:03:57,070 --> 00:03:59,810
them to be committed to the storage, then it

70
00:03:59,810 --> 00:04:02,552
requires that every time we touch a persistent data

71
00:04:02,552 --> 00:04:06,195
structure in-memory version of it and modify it, the

72
00:04:06,195 --> 00:04:09,380
on-disk version of that same data structure needs to

73
00:04:09,380 --> 00:04:12,740
be updated. Now what that means is if these

74
00:04:12,740 --> 00:04:15,380
data structures are spread out all over the

75
00:04:15,380 --> 00:04:18,355
virtual address space, that could result in many

76
00:04:18,355 --> 00:04:21,709
I/O operations, first of all. Second, it could

77
00:04:21,709 --> 00:04:25,290
also mean that we may be writing, to

78
00:04:25,290 --> 00:04:27,920
different portions of the disk. And both of

79
00:04:27,920 --> 00:04:30,880
these are bad news, because disk by it's

80
00:04:30,880 --> 00:04:34,690
very nature, it's electromechanical in nature. And, disk

81
00:04:34,690 --> 00:04:38,080
is electromechanical in nature. And as a result there

82
00:04:38,080 --> 00:04:41,940
are latencies associated with the disc, namely,

83
00:04:41,940 --> 00:04:45,900
seek latency and rotational latency. And if the

84
00:04:45,900 --> 00:04:48,540
writing that we are doing to virtual

85
00:04:48,540 --> 00:04:52,005
memory, which is backed up by the persistent

86
00:04:52,005 --> 00:04:58,560
disk, is all over the disk, then it's going to result in many random writes

87
00:04:58,560 --> 00:05:01,060
to the storage system. And random writes are

88
00:05:01,060 --> 00:05:03,860
going to be resulting in very poor performance.

89
00:05:03,860 --> 00:05:10,030
So instead of doing this, what we would like to do is have what we will

90
00:05:10,030 --> 00:05:16,160
call a log segment. And the idea is very similar to the log structure file

91
00:05:16,160 --> 00:05:22,960
system that we have seen earlier when we discussed XFS. The idea is that, when

92
00:05:22,960 --> 00:05:26,610
you're making changes to the virtual memory and

93
00:05:26,610 --> 00:05:29,250
you know what portions of it are persistent,

94
00:05:29,250 --> 00:05:33,140
every time you write to a persistent data structure

95
00:05:33,140 --> 00:05:36,130
that is in memory, then you write a log

96
00:05:36,130 --> 00:05:39,100
record that corresponds to the change that you made

97
00:05:39,100 --> 00:05:41,820
to the persistent data structure. So this is the

98
00:05:41,820 --> 00:05:44,350
change you made to this persistent data structure, and

99
00:05:44,350 --> 00:05:46,680
this is the change you made to this persistent

100
00:05:46,680 --> 00:05:50,320
data structure. The log segment is itself a data

101
00:05:50,320 --> 00:05:54,390
structure in support of these subsystems when implementing the

102
00:05:54,390 --> 00:05:57,220
persistent virtual memory. We have this log segment

103
00:05:57,220 --> 00:06:00,370
as a data structure that the implementation uses to

104
00:06:00,370 --> 00:06:04,850
record changes to persistent portions of the virtual address

105
00:06:04,850 --> 00:06:07,530
space. And because we are putting it into this

106
00:06:07,530 --> 00:06:09,814
data structure called log segment, we can write this

107
00:06:09,814 --> 00:06:13,520
contiguously. And of course, we have to commit these

108
00:06:13,520 --> 00:06:17,000
changes to the disk. But now you can see

109
00:06:17,000 --> 00:06:19,280
the difference in the picture between here and here.

110
00:06:19,280 --> 00:06:22,080
Here we were doing random writes all over the

111
00:06:22,080 --> 00:06:26,100
disk. But here we are writing the changes to

112
00:06:26,100 --> 00:06:29,140
the persistent data structures to contiguous portions of a

113
00:06:29,140 --> 00:06:32,400
log segment and we can take this and store this

114
00:06:32,400 --> 00:06:35,610
contiguously on the disk, and that's the attraction. So

115
00:06:35,610 --> 00:06:38,210
these log segments are going to be stored contiguously

116
00:06:38,210 --> 00:06:40,950
on the disk. And therefore, even though we are

117
00:06:40,950 --> 00:06:44,600
making random writes in the address space of the subsystem

118
00:06:44,600 --> 00:06:47,420
that we are building that requires certain persistent

119
00:06:47,420 --> 00:06:51,990
data structures, because those changes are being recorded as

120
00:06:51,990 --> 00:06:57,940
logs in a log segment, and we are committing the log segment to the disk we can

121
00:06:57,940 --> 00:07:01,052
convert these random writes to sequential writes and

122
00:07:01,052 --> 00:07:04,040
write sequentially on the disk. So two things we

123
00:07:04,040 --> 00:07:06,590
are accomplishing by doing that. The first is

124
00:07:06,590 --> 00:07:09,730
we are not making individual I/O operations for every

125
00:07:09,730 --> 00:07:12,450
time we touch different portions of the virtual address

126
00:07:12,450 --> 00:07:15,730
space, because we are writing it into this log segment,

127
00:07:15,730 --> 00:07:18,890
which may be an in-memory data structure. And therefore,

128
00:07:18,890 --> 00:07:22,100
we are reducing the number of I/O operations that we

129
00:07:22,100 --> 00:07:25,020
need in order to commit these changes finally to

130
00:07:25,020 --> 00:07:29,250
the storage. And second because we are writing this contiguously,

131
00:07:29,250 --> 00:07:30,960
we don't have the random writes that we talked

132
00:07:30,960 --> 00:07:35,090
about. All of this, will help make the design and

133
00:07:35,090 --> 00:07:38,810
implementation of a persistent virtual memory much more

134
00:07:38,810 --> 00:07:41,970
efficient. That is the key idea, which is

135
00:07:41,970 --> 00:07:44,740
there in the paper that I've assigned to

136
00:07:44,740 --> 00:07:47,070
you for reading, which is the LRVM paper.
