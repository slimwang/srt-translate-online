1
00:00:00,260 --> 00:00:02,960
>> So okay, so let's think about General sum games, so not zero sum any

2
00:00:02,960 --> 00:00:04,630
more. But we're not, you know, restricted,

3
00:00:04,630 --> 00:00:07,590
it could be any kind of relationship between

4
00:00:07,590 --> 00:00:10,670
the two players. And so the first thing we need to do is realize well,

5
00:00:10,670 --> 00:00:13,350
well we can't really do minimax here

6
00:00:13,350 --> 00:00:15,980
any more. Right, because that doesn't make sense.

7
00:00:15,980 --> 00:00:18,410
>> Right. That only works with zero-sum games.

8
00:00:18,410 --> 00:00:21,180
>> Well it's only, yeah. That's, well, it sort of assumes that the

9
00:00:21,180 --> 00:00:25,389
other player's trying to minimize my reward and that's not the, that's not the

10
00:00:25,389 --> 00:00:27,793
concept of the Nash equilibrium. We'd like to

11
00:00:27,793 --> 00:00:30,223
do something analogous and find a Nash equilibrium in

12
00:00:30,223 --> 00:00:32,840
this general sum setting. So what, what operator do

13
00:00:32,840 --> 00:00:34,570
you think we would need in this context here?

14
00:00:34,570 --> 00:00:35,675
>> Nash equilibrium?

15
00:00:35,675 --> 00:00:38,370
>> Yeah, so that would be a very reasonable thing to

16
00:00:38,370 --> 00:00:42,746
do, is instead of computing mini max, we actually compute of the

17
00:00:42,746 --> 00:00:47,490
two matrix game, right, using Q1 and Q2, compute the Nash

18
00:00:47,490 --> 00:00:51,190
equilibrium of that and propagate that value back. It's a well defined

19
00:00:51,190 --> 00:00:55,400
notion, right, that we can summarize the value of these two pay of matrices

20
00:00:55,400 --> 00:01:00,450
with with a pair of numbers which are the values of the Nash equilibrium.

21
00:01:00,450 --> 00:01:01,795
>> Mm-hm.

22
00:01:01,795 --> 00:01:04,220
>> Alright, so so good. So we can

23
00:01:04,220 --> 00:01:06,450
do the same thing in the Q learning setting.

24
00:01:06,450 --> 00:01:08,830
Substitute in a Nash equilibrium. And we can call

25
00:01:08,830 --> 00:01:12,760
that algorithm Nash-Q, which is, appears in the literature.

26
00:01:12,760 --> 00:01:13,690
>> Nice.

27
00:01:13,690 --> 00:01:16,200
>> Oh minimax Q by the way is something

28
00:01:16,200 --> 00:01:19,540
that I wrote about. Nash-Q is a different algorithm.

29
00:01:19,540 --> 00:01:20,820
>> So it's not as cool, is what you're saying.

30
00:01:20,820 --> 00:01:24,920
>> Well, let's let's see how it goes. So this is

31
00:01:24,920 --> 00:01:28,880
now an algorithm, you can actually, well, this set of equations it's

32
00:01:28,880 --> 00:01:33,010
not exactly clear what it means, but we can think about turning

33
00:01:33,010 --> 00:01:36,350
that into value iteration, right? By turning this into an assignment statement.

34
00:01:36,350 --> 00:01:37,650
>> Mm-hm.

35
00:01:37,650 --> 00:01:41,630
>> So, what happens? Well, value iteration

36
00:01:41,630 --> 00:01:42,740
doesn't work.

37
00:01:42,740 --> 00:01:43,970
>> No.

38
00:01:43,970 --> 00:01:46,360
>> So, yeah, so if you, you repeat

39
00:01:46,360 --> 00:01:48,590
this over and over again, things, weird things

40
00:01:48,590 --> 00:01:50,680
can happen, it doesn't, it doesn't really converge,

41
00:01:50,680 --> 00:01:52,910
it doesn't really solve this system of equations necessarily.

42
00:01:52,910 --> 00:01:54,190
>> Hm.

43
00:01:54,190 --> 00:01:57,240
>> And unfortunately the, the reasoning here is even

44
00:01:57,240 --> 00:02:00,270
harder in the case of Nash-Q because in the case

45
00:02:00,270 --> 00:02:03,250
of Nash-Q, it's really trying to solve this system of

46
00:02:03,250 --> 00:02:06,360
equations using something like value iteration, but with extra stocasticity.

47
00:02:06,360 --> 00:02:08,770
And so it also suffers the same problem.

48
00:02:08,770 --> 00:02:11,470
It doesn't necessarily converge. There's not really a

49
00:02:11,470 --> 00:02:13,850
unique solution to Q star because you can

50
00:02:13,850 --> 00:02:15,980
have different Nash equilibria that have different values.

51
00:02:15,980 --> 00:02:17,180
>> Right.

52
00:02:17,180 --> 00:02:19,040
>> So there isn't really much hope of converting to

53
00:02:19,040 --> 00:02:25,200
the answer because there isn't the answer. The the policies

54
00:02:25,200 --> 00:02:28,340
can not be computed independently, right, so Nash equilibrium is

55
00:02:28,340 --> 00:02:31,500
really defined as a joint behavior, and so we can't

56
00:02:31,500 --> 00:02:35,100
just have two different players computing Q values. Even if we could compute the

57
00:02:35,100 --> 00:02:40,160
Q values. It wouldn't necessarily tell us what to do with the policies, because

58
00:02:40,160 --> 00:02:43,900
if you take two different policies that are both half of a Nash equilibrium,

59
00:02:43,900 --> 00:02:45,450
two halves of a Nash equilibrium do

60
00:02:45,450 --> 00:02:47,550
not necessarily make a whole Nash equilibrium.

61
00:02:47,550 --> 00:02:48,240
>> Right.

62
00:02:48,240 --> 00:02:52,050
>> because they could be incompatible. So, you know, so far so good, right?

63
00:02:52,050 --> 00:02:54,840
>> Yeah, I can't wait to see what happens next.

64
00:02:54,840 --> 00:02:56,900
>> The update is not efficient unless

65
00:02:56,900 --> 00:03:00,350
P equals PPAD, which is to say, computing a Nash

66
00:03:00,350 --> 00:03:03,050
equilibrium is not a polynomial time operation as far as

67
00:03:03,050 --> 00:03:05,370
we know. It is as hard as any problem in

68
00:03:05,370 --> 00:03:08,570
a class that's known as PPAD. And this is actually a

69
00:03:08,570 --> 00:03:11,265
relatively recent result, in the, in the last five, ten

70
00:03:11,265 --> 00:03:14,640
years. And this class is believed to be as hard

71
00:03:14,640 --> 00:03:18,690
as, as NP. So, possibly harder. So it doesn't really,

72
00:03:18,690 --> 00:03:22,070
doesn't really give us any leverage to, computational leverage to kind of

73
00:03:22,070 --> 00:03:25,220
break it down in this way. So that's unfortunate. And

74
00:03:25,220 --> 00:03:28,610
finally, the last little hope of, well, maybe we can define

75
00:03:28,610 --> 00:03:31,310
this kind of learning scenario using Q functions the same way

76
00:03:31,310 --> 00:03:35,200
we've been doing, Q functions are not sufficient to specify the

77
00:03:35,200 --> 00:03:38,230
policy. That is to say, even if I could do all

78
00:03:38,230 --> 00:03:42,250
these other things, efficiently compute a solution of, you know, build

79
00:03:42,250 --> 00:03:44,800
the Q values, make them so that they're compatible with each

80
00:03:44,800 --> 00:03:47,910
other. And now I just tell you, here's your Q function.

81
00:03:47,910 --> 00:03:51,950
Now decide how to behave, you can't. It's, there's not enough information.

82
00:03:51,950 --> 00:03:53,310
>> You're depressing me, Michael.

83
00:03:53,310 --> 00:03:56,050
>> Yes, so this is kind of sad. We go to the general sum

84
00:03:56,050 --> 00:03:59,480
case, which in some sense is the only case that matters' because zero sum

85
00:03:59,480 --> 00:04:04,440
never really happens. And what we discover is that we lose all, seemingly lose

86
00:04:04,440 --> 00:04:08,830
all of the leverage that we have in the context of Q type algorithms.

87
00:04:08,830 --> 00:04:09,850
>> Mm, mm, mm.

88
00:04:09,850 --> 00:04:11,090
>> And that's where we'll stop.

89
00:04:11,090 --> 00:04:13,010
>> Oh. So we're going to end on a high note.

90
00:04:13,010 --> 00:04:15,560
>> No, maybe we should say something before we depart.

91
00:04:15,560 --> 00:04:17,839
>> Let's do that. Come up with something positive to say.

92
00:04:17,839 --> 00:04:18,570
>> Okay.
