1
00:00:00,370 --> 00:00:02,370
How about you write
the function to do this?

2
00:00:02,370 --> 00:00:05,200
That is compute an integral image.

3
00:00:05,200 --> 00:00:09,834
At every location (y, x) and
the resulting image I,

4
00:00:09,834 --> 00:00:16,630
you should store the, the sum of
the pixels from (1, 1) through y, x.

5
00:00:16,630 --> 00:00:23,210
That is from the top left corner 'til
that pixel including y x coordinate.

6
00:00:23,210 --> 00:00:24,170
Here's some test code.

7
00:00:25,260 --> 00:00:28,390
We're using a magnified
image of blood cells, for

8
00:00:28,390 --> 00:00:32,740
no apparent reason, and this is how we
should be able to call your function.

9
00:00:34,560 --> 00:00:38,370
You should then be able to
display it scaled, like here.

10
00:00:38,370 --> 00:00:42,970
Or just by passing an empty
vector in as the second argument.

11
00:00:42,970 --> 00:00:45,700
Note that the maximum
value in an integral image

12
00:00:45,700 --> 00:00:48,160
is in the bottom right pixel.

13
00:00:48,160 --> 00:00:53,770
So this max expression can
be replaced by I end, end.

14
00:00:53,770 --> 00:00:57,930
To check whether the function is working
correctly, let's define a window.

15
00:00:57,930 --> 00:01:02,260
As a ground truth, we can select this
window within the original image, and

16
00:01:02,260 --> 00:01:03,140
compute its sum.

17
00:01:04,230 --> 00:01:07,850
Note that when reading the image,
we converted it to double type.

18
00:01:07,850 --> 00:01:10,500
So we shouldn't face
any overflow errors.

19
00:01:10,500 --> 00:01:13,820
The equivalent expression,
using the integral image I,

20
00:01:13,820 --> 00:01:15,850
looks something like this.

21
00:01:15,850 --> 00:01:20,598
I'll explain this later, but

22
00:01:20,598 --> 00:01:26,820
it's basically A minus B minus C plus D.

23
00:01:26,820 --> 00:01:29,530
These two values should be equal.

24
00:01:29,530 --> 00:01:30,080
All right?

25
00:01:30,080 --> 00:01:30,690
Give it a shot.
