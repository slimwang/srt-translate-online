1
00:00:00,420 --> 00:00:02,160
So how does an application,

2
00:00:02,160 --> 00:00:06,980
like Gmail, which can literally have
a list of millions of messages, work?

3
00:00:06,980 --> 00:00:10,179
It has to do with recycling and
RecyclerView.

4
00:00:10,179 --> 00:00:12,830
Here's our final forecast view for
Sunshine.

5
00:00:12,830 --> 00:00:15,379
As you can see it's scrolls beautifully.

6
00:00:15,380 --> 00:00:18,390
What's actually happening
is something like this.

7
00:00:18,390 --> 00:00:21,019
Rather than creating these
list items as we scroll,

8
00:00:21,019 --> 00:00:22,679
which would potentially
cause glitches and

9
00:00:22,679 --> 00:00:27,530
performance problems, we keep some in
a queue, or recycling bin, for reuse.

10
00:00:27,530 --> 00:00:30,410
What's actually happening
is something like this.

11
00:00:30,410 --> 00:00:33,079
Rather than creating these
list items as we scroll,

12
00:00:33,079 --> 00:00:34,809
which would potentially
cause glitches and

13
00:00:34,810 --> 00:00:39,570
performance problems, we keep some in
a queue, or recycling bin, for reuse.

14
00:00:39,570 --> 00:00:40,969
When we're about to scroll,

15
00:00:40,969 --> 00:00:45,429
the RecyclerView returns one of these
previously created list items to you.

16
00:00:45,429 --> 00:00:48,979
Your code then binds the list
item view with new content

17
00:00:48,979 --> 00:00:50,919
then it can be scrolled in.

18
00:00:50,920 --> 00:00:55,285
Views that are scrolled out are then
placed back into the queue for reuse.

19
00:00:55,284 --> 00:00:58,289
This is a simplistic version
of what actually happens.

20
00:00:58,289 --> 00:01:01,304
RecyclerViews have to deal with
fast flings, animations and

21
00:01:01,304 --> 00:01:04,715
lots of other conditions, but
this is what's going on at a high level.

