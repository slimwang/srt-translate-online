1
00:00:00,070 --> 00:00:03,340
When we move to a signal,
which is now of course pulsed or

2
00:00:03,340 --> 00:00:05,990
flutter shuttered like this,
we might have a signal like this.

3
00:00:05,990 --> 00:00:09,040
Of course, the output we know is
convolution of this to this one,

4
00:00:09,040 --> 00:00:11,800
and this is also a sinc function.

5
00:00:11,800 --> 00:00:12,570
And of course,

6
00:00:12,570 --> 00:00:16,260
the big thing here is it is actually
preserving all of the high frequencies.

7
00:00:16,260 --> 00:00:18,660
It's not going down into
the low frequencies.

8
00:00:18,660 --> 00:00:22,320
By basically being able to do this,
we actually now are able to get rid of

9
00:00:22,320 --> 00:00:25,080
modeling all of the low frequencies and
high frequencies are there.

10
00:00:25,080 --> 00:00:26,315
And this is my sinc function.

11
00:00:26,315 --> 00:00:30,456
Again, I would get this by trying to
compute the discrete Fourier transform

12
00:00:30,456 --> 00:00:32,270
of an image in this process.

13
00:00:32,270 --> 00:00:36,380
Recall again, that convolution has a lot
to do with Fourier transforms, when we

14
00:00:36,380 --> 00:00:40,000
looked at all of our signal processing
stuff in one of the earlier lectures.

15
00:00:40,000 --> 00:00:41,760
Here are the two signals
next to each other.

16
00:00:41,760 --> 00:00:44,640
Full open shutter,
sinc function looks like this.

17
00:00:44,640 --> 00:00:47,678
And of course, our flutter shutter,
or a pulse shutter like this,

18
00:00:47,678 --> 00:00:49,331
the since function looks like this,

19
00:00:49,331 --> 00:00:52,076
never gets to some of the low
frequencies always basically.

20
00:00:52,076 --> 00:00:55,130
And again you can see this that
there is a lot more low frequency

21
00:00:55,130 --> 00:00:56,146
information here.

22
00:00:56,146 --> 00:00:58,773
And because of the sharp lines and
stuff like that,

23
00:00:58,773 --> 00:01:02,050
here we are actually seeing a lot
more of the high frequencies.

24
00:01:02,050 --> 00:01:05,700
Simply, again, we flutter shuttered or
pulsed our sense,

25
00:01:05,700 --> 00:01:08,420
our, our shutter to be
able to get this image.

26
00:01:08,420 --> 00:01:10,480
We are interest in, of course,
is the inversion, right?

27
00:01:10,480 --> 00:01:13,800
We are trying to invert this, being able
to go from this to an original image.

28
00:01:13,800 --> 00:01:17,010
Of course, we can do this by
doing inverse Fourier transforms.

29
00:01:17,010 --> 00:01:21,580
And again, in this case, we can now look
at the inverse filters for doing these

30
00:01:21,580 --> 00:01:24,520
types of things, and of course we look
at the two different sine functions.

31
00:01:24,520 --> 00:01:27,260
The thing that is, and this is something
I'm going to refer you to back

32
00:01:27,260 --> 00:01:29,450
to some of the literature
on signal processing.

33
00:01:29,450 --> 00:01:34,438
This kind of a filter is unstable, while
a signal like this is much more stable

34
00:01:34,438 --> 00:01:37,893
because again it's only kind
of capturing the high or

35
00:01:37,893 --> 00:01:40,224
low frequencies in this instance.

36
00:01:40,224 --> 00:01:43,483
And we can represent this much better to
be able to kind of do the inversion to

37
00:01:43,483 --> 00:01:44,640
compute our signals.

38
00:01:44,640 --> 00:01:48,040
And that's the basic idea here
is that trying to do an inverse

39
00:01:48,040 --> 00:01:52,190
discrete Fourier transform, this kind
actually would be much more suitable for

40
00:01:52,190 --> 00:01:53,850
our reconstruction.

41
00:01:53,850 --> 00:01:54,980
Let's look at the examples.

42
00:01:54,980 --> 00:01:58,320
In this case I'm going to basically
show short exposure, long exposure and

43
00:01:58,320 --> 00:01:59,630
coded exposure.

44
00:01:59,630 --> 00:02:02,310
For a long, short exposure,
of course, no light.

45
00:02:02,310 --> 00:02:05,160
We get a ray thing, but
of course we get a nice, crisp image.

46
00:02:05,160 --> 00:02:07,420
Long exposure,
we get a lot of blurriness.

47
00:02:07,420 --> 00:02:10,370
Coded exposure we get
blurriness with a lot more

48
00:02:10,370 --> 00:02:12,279
high frequency information still there.

49
00:02:13,400 --> 00:02:16,810
And of course, we can de-blur this using
the approach I kind of talked about, and

50
00:02:16,810 --> 00:02:19,510
this is what we would get,
much crisper image.

51
00:02:19,510 --> 00:02:22,511
If we were to de-blurring this with
a variety of different approaches,

52
00:02:22,511 --> 00:02:24,242
we might still get some incompleteness.

53
00:02:24,242 --> 00:02:27,767
But in this case by doing it the method
I was doing with discrete Fourier

54
00:02:27,767 --> 00:02:31,010
transforms and stuff like that,
we will get more bars.

55
00:02:31,010 --> 00:02:34,065
By the way, just to compare, this is the
ground truth image that we would have

56
00:02:34,065 --> 00:02:36,350
had if we actually had
captured it correctly.

57
00:02:36,350 --> 00:02:37,830
And this one looks pretty good.

58
00:02:37,830 --> 00:02:40,720
There's a little bit of noise, and
a little bit of banding going on, but

59
00:02:40,720 --> 00:02:41,740
much better than this.

60
00:02:41,740 --> 00:02:44,840
And that's the basic idea of
this flutter shutter camera.

61
00:02:44,840 --> 00:02:50,090
Being able to kind of use this knowledge
to be able to now reconstruct an image

62
00:02:50,090 --> 00:02:52,310
that knows how the variations happen.

63
00:02:52,310 --> 00:02:56,060
Again, we know the code,
we know the output, we can deconvolve

64
00:02:56,060 --> 00:02:59,670
with the knowledge itself to help us
figure out how to actually generate

65
00:02:59,670 --> 00:03:03,590
a reconstruction that's much more true
to what the original image would be.

66
00:03:03,590 --> 00:03:05,440
Same idea as what we looked at for

67
00:03:05,440 --> 00:03:09,510
coded aperture, except this time
of course it's a coded shutter.

68
00:03:09,510 --> 00:03:12,520
Let's see some examples produced
by these authors and their paper.

69
00:03:12,520 --> 00:03:17,288
Here is an example using this camera
here, of basically looking at a car.

70
00:03:17,288 --> 00:03:19,660
Of course, if this car is moving fast,

71
00:03:19,660 --> 00:03:24,840
you cannot actually see
the license plate, which is here.

72
00:03:24,840 --> 00:03:28,800
But, of course, if we had a flutter
shutter camera, you should be able to

73
00:03:28,800 --> 00:03:31,944
reconstruct from this and
actually get the license plate number.

74
00:03:31,944 --> 00:03:36,450
Another example of the same thing again,
somebody says I want more detail here.

75
00:03:36,450 --> 00:03:37,860
This is the original image, but

76
00:03:37,860 --> 00:03:41,390
if I had a flutter shutter camera,
I should be able to generate more.

77
00:03:41,390 --> 00:03:45,370
Another example with the cars again,
this is the orig image, image.

78
00:03:45,370 --> 00:03:46,693
Let's just focus in in there.

79
00:03:46,693 --> 00:03:49,807
And actually,
the whole car image can be regenerated.

80
00:03:49,807 --> 00:03:54,025
And if you notice, we can actually
now start looking up, and

81
00:03:54,025 --> 00:03:58,450
start even reading some of
the numbers and additional detail.

82
00:03:58,450 --> 00:04:02,450
Another input image, we can
rectify the cropped image here and

83
00:04:02,450 --> 00:04:05,720
again create a de-blurred result,
much more crisper.
