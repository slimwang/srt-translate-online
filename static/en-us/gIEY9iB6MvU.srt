1
00:00:00,610 --> 00:00:05,920
Pretty hard to understand PageSpeed
Insights and related components.

2
00:00:05,920 --> 00:00:06,720
Any advice?

3
00:00:08,060 --> 00:00:08,760
Okay, yeah.

4
00:00:08,760 --> 00:00:12,590
So, PageSpeed Insight does
sometimes give you these sort of,

5
00:00:14,580 --> 00:00:18,180
I guess,
vague problems about your website.

6
00:00:18,180 --> 00:00:23,820
They might just say, you know,
eliminate render blocking CSS or

7
00:00:23,820 --> 00:00:26,340
eliminate render blocking JavaScript.

8
00:00:26,340 --> 00:00:28,800
And then it kind of gives you some
hints on what that means, but

9
00:00:28,800 --> 00:00:33,910
it never really gives you a clear
guideline on, okay, go and fix this.

10
00:00:33,910 --> 00:00:39,324
So I would say the first thing
to do is to definitely read what

11
00:00:39,324 --> 00:00:45,480
PageSpeed Insights gives you as
information about those things.

12
00:00:45,480 --> 00:00:49,470
Then go back and look at your code and
see if you can pick out any parts of

13
00:00:49,470 --> 00:00:52,720
your code that sort of match
with what they've described.

14
00:00:52,720 --> 00:00:58,800
For example, if you have render blocking
CSS that means that you have components

15
00:00:58,800 --> 00:01:03,360
in your CSS that are preventing
your entire page from rendering.

16
00:01:03,360 --> 00:01:08,040
So you need to go and
look at what particular CSS script

17
00:01:08,040 --> 00:01:10,370
is the one that's causing
this render blocking.

18
00:01:10,370 --> 00:01:14,080
You can kind of do that by
taking them out one at a time or

19
00:01:14,080 --> 00:01:16,230
you can come up with some
clever ways to do that.

20
00:01:16,230 --> 00:01:20,460
Do you have any insights on
the best way to interpret and

21
00:01:20,460 --> 00:01:23,310
use PageSpeed Insights, Turner?

22
00:01:23,310 --> 00:01:26,360
>> Yeah, that's great advice John.

23
00:01:26,360 --> 00:01:29,440
And, if you ever have a question about
something you can also Google for

24
00:01:29,440 --> 00:01:33,130
the exact phrase and you'll probably
find a wealth of extra pages

25
00:01:34,640 --> 00:01:36,960
on minimizing the critical
rendering path, beside and

26
00:01:36,960 --> 00:01:39,170
in addition to what you
learned in the course.

27
00:01:39,170 --> 00:01:41,400
So, that never hurts in
case you're extra curious,

28
00:01:41,400 --> 00:01:45,100
but a lot of times,
hopefully it does refer to

29
00:01:45,100 --> 00:01:47,420
new terminology that
you've learned of course.

30
00:01:47,420 --> 00:01:52,080
But when it doesn't, certainly just go
look it up and see if it's applicable,

31
00:01:52,080 --> 00:01:54,490
learn a new thing here and there.

32
00:01:54,490 --> 00:01:59,540
>> Can we load different images with
different compression levels while using

33
00:01:59,540 --> 00:02:02,852
different devices or
different screen resolutions.

34
00:02:02,852 --> 00:02:05,784
[LAUGH]
>> But that way it's going to be

35
00:02:05,784 --> 00:02:10,610
taking responsive images and
wants to really optimize this.

36
00:02:10,610 --> 00:02:15,170
>> The answer to that is absolutely,
yes you can.

37
00:02:15,170 --> 00:02:17,230
So it's a little trickier.

38
00:02:17,230 --> 00:02:21,930
You have to utilize, CSS to

39
00:02:21,930 --> 00:02:27,310
serve the appropriate images as opposed
to hard coding them in your HTML.

40
00:02:27,310 --> 00:02:31,670
You can also do it with JavaScript but

41
00:02:31,670 --> 00:02:37,390
I prefer using CSS to render
those kinds of images.

42
00:02:37,390 --> 00:02:40,950
And then while using different devices
with different screen resolution, yeah,

43
00:02:40,950 --> 00:02:44,500
you're going to have to look into using
media queries for that kind of stuff.

44
00:02:44,500 --> 00:02:48,090
And serving your images
with media queries and CSS.

45
00:02:48,090 --> 00:02:52,560
In terms of actually creating
all these different images for

46
00:02:52,560 --> 00:02:56,110
all these different devices and
different screen resolutions,

47
00:02:56,110 --> 00:03:00,420
if you haven't looked at the responsive
images course yet, you totally should.

48
00:03:00,420 --> 00:03:05,260
Cameron breaks down how to use
task runners like Grunt, for

49
00:03:05,260 --> 00:03:07,720
example, to automate all of this.

50
00:03:07,720 --> 00:03:10,885
And you don't have to sit there and
tweak a bunch of images by

51
00:03:10,885 --> 00:03:15,400
hand in some photo editor hoping
that they're rendered correctly.

52
00:03:15,400 --> 00:03:19,124
Different events on the page that
change the render tree would cause

53
00:03:19,124 --> 00:03:21,150
a new layout event each time.

54
00:03:21,150 --> 00:03:23,950
We could increase or speed, supposedly,

55
00:03:23,950 --> 00:03:27,073
by using batch updates
according to the video.

56
00:03:27,073 --> 00:03:32,094
Yeah, so Liam, what this means is,
we can create these JavaScript

57
00:03:32,094 --> 00:03:36,689
events that basically manipulate
our DOM or our render tree.

58
00:03:38,580 --> 00:03:42,158
And the more times we call those events,

59
00:03:42,158 --> 00:03:46,265
the more times we're
re-accessing the DOM,

60
00:03:46,265 --> 00:03:51,350
changing something, and
then redrawing the tree.

61
00:03:51,350 --> 00:03:54,630
Basically creating a new
layout event each time.

62
00:03:54,630 --> 00:03:57,052
What they mean by batch updates is,

63
00:03:57,052 --> 00:04:01,817
you want to create basically a function
or some sort of methods that do as

64
00:04:01,817 --> 00:04:07,140
much of this as possible without
accessing the DOM multiple times.

65
00:04:07,140 --> 00:04:11,357
A good way to do this is when you
access a DOM, the DOM elements,

66
00:04:11,357 --> 00:04:16,790
you actually put those in a variable and
then you manipulate that variable.

67
00:04:16,790 --> 00:04:20,087
And that way you only call the up
document object model once.

68
00:04:20,087 --> 00:04:24,540
And then you make all the changes you
want and then all the updates happen.

69
00:04:24,540 --> 00:04:27,160
And then the layout event happens.

70
00:04:27,160 --> 00:04:32,860
because every time you take
requests from the DOM,

71
00:04:32,860 --> 00:04:37,030
it has to process all those
changes that have been previously.

72
00:04:37,030 --> 00:04:42,450
And, so you'll actually notice
this in the pizza page.

73
00:04:42,450 --> 00:04:46,150
For example, with the moving
pieces in the background.

74
00:04:46,150 --> 00:04:49,553
Pay close attention to how many times
you're actually accessing your document

75
00:04:49,553 --> 00:04:51,050
object model.

76
00:04:51,050 --> 00:04:55,605
Because it's a lot, and if you can
reduce the number of times that that

77
00:04:55,605 --> 00:05:01,550
query selector is selecting everything,
the faster you're page is going to load,

78
00:05:01,550 --> 00:05:04,930
and you'll be amazed at how much faster,
too.

79
00:05:04,930 --> 00:05:11,119
It literally goes from a couple
seconds to a couple milliseconds.

80
00:05:12,130 --> 00:05:16,736
>> Do we not care about frames
per second for page loading.

81
00:05:16,736 --> 00:05:18,666
>> Yes, so this thing is,

82
00:05:18,666 --> 00:05:23,596
there are two fixes that you
have to do in your main.js file.

83
00:05:23,596 --> 00:05:28,460
If you had read the comments,
Cameron has given you that.

84
00:05:28,460 --> 00:05:33,296
There are two fixes to do in main.js,
and they are completely pertaining

85
00:05:33,296 --> 00:05:38,330
how you scroll through through the page
and how the pizza sizes changes.

86
00:05:38,330 --> 00:05:41,874
And how the background pizzas
move around in the page.

87
00:05:41,874 --> 00:05:46,730
So, whenever you scroll up and down you
can see the background pizzas moving.

88
00:05:46,730 --> 00:05:53,190
So, that is one area where there
is a major fix to be carried out.

89
00:05:53,190 --> 00:05:57,943
So for this project and for
this particular solution we

90
00:05:57,943 --> 00:06:02,488
are only looking for
scrolling over the page, up and

91
00:06:02,488 --> 00:06:06,534
down the page, and
then resizing the pizzas.

92
00:06:06,534 --> 00:06:10,786
So, yeah,
you should only worry about that,

93
00:06:10,786 --> 00:06:14,941
don't be too concerned
about page loading.
