1
00:00:00,000 --> 00:00:08,000
[Carson] If we treat an encryption function--as the one in GSM--as something

2
00:00:08,000 --> 00:00:15,000
that takes a message, produces an encrypted message,

3
00:00:15,000 --> 00:00:19,000
and it consumes a key to perform that.

4
00:00:19,000 --> 00:00:28,000
There are different ways in which you can make this resistant against time-memory trails.

5
00:00:28,000 --> 00:00:33,000
Three different mitigations.

6
00:00:33,000 --> 00:00:38,000
First, you can make the message unpredictable.

7
00:00:44,000 --> 00:00:49,000
Sounds obvious. Why would you encrypt something predictable?

8
00:00:49,000 --> 00:00:52,000
But a lot of systems do just encrypt a whole stream of data,

9
00:00:52,000 --> 00:00:57,000
some of which is encrypted. Something is worth protecting. GSM mixes the two.

10
00:00:57,000 --> 00:01:03,000
[Dave] All of these attacks you know some--because of the GSM protocol--

11
00:01:03,000 --> 00:01:06,000
there are some messages that are very easy to guess. >> [Carson] Exactly.

12
00:01:06,000 --> 00:01:09,000
[Dave] And you know what they are and can you those in this attack.

13
00:01:09,000 --> 00:01:14,000
To exchange a text message, for instance, between the base station and your phone,

14
00:01:14,000 --> 00:01:17,000
somewhere between 20 and 40 messages are exchanged,

15
00:01:17,000 --> 00:01:20,000
only one of which has the actual text message content.

16
00:01:20,000 --> 00:01:25,000
Another one may have some unpredictable set of information.

17
00:01:25,000 --> 00:01:28,000
All the rest is just management information--encrypted though--

18
00:01:28,000 --> 00:01:31,000
and that management information is usually--

19
00:01:31,000 --> 00:01:35,000
[Dave] Does it make sense as one solution to not encrypt the management information.

20
00:01:35,000 --> 00:01:42,000
[Carson] Clear, yeah. There's a standard extension that suggests exactly that.

21
00:01:42,000 --> 00:01:46,000
But basically the whole ecosystem would have to change to accommodate for that.

22
00:01:46,000 --> 00:01:50,000
Currently, it's just the encryption is switched on at some point

23
00:01:50,000 --> 00:01:55,000
and everything thereafter is encrypted, be it predictable or not.

24
00:01:55,000 --> 00:02:01,000
There are measures, though, to make predictable messages more randomized

25
00:02:01,000 --> 00:02:04,000
to create some wiggle room for how you send a message.

26
00:02:04,000 --> 00:02:09,000
That's currently being deployed--not in all networks, though.

27
00:02:09,000 --> 00:02:12,000
I've not seen--one of the two American networks I don't think has it.

28
00:02:12,000 --> 00:02:17,000
You need to know the base station is understanding if you change the protocol like that.

29
00:02:17,000 --> 00:02:23,000
The base station would have to change to go all the way of making all messages unpredictable,

30
00:02:23,000 --> 00:02:29,000
but even changing the base station controllers, bigger installations

31
00:02:29,000 --> 00:02:32,000
that control dozens of base stations that control dozens of base stations

32
00:02:32,000 --> 00:02:36,000
would do the job, and those are usually software updateable,

33
00:02:36,000 --> 00:02:41,000
because they have to accommodate for usually faster connections all the time.

34
00:02:41,000 --> 00:02:46,000
Now, more secure connections that could that, too, hasn't been seen too much yet.

35
00:02:46,000 --> 00:02:51,000
We do track that on gsmmap.org.

36
00:02:51,000 --> 00:03:00,000
The second way, of course, of making this system uncorrectable

37
00:03:00,000 --> 00:03:05,000
is to decrease the key size sufficiently so that none of these tradeoffs

38
00:03:05,000 --> 00:03:09,000
leads to practical values anymore.

39
00:03:09,000 --> 00:03:18,000
That is used, for instance, in 3G and 4G networks most of the time.

40
00:03:20,000 --> 00:03:27,000
Then a third way of protecting against these types of attacks that assume,

41
00:03:27,000 --> 00:03:33,000
if you predict a message you have a direct mapping between message out and key,

42
00:03:33,000 --> 00:03:37,000
is to introduce an auxiliary input.

43
00:03:37,000 --> 00:03:44,000
It's usually called either a "nonce" for random number or initialization vector.

44
00:03:44,000 --> 00:03:48,000
GSM, in fact, does have an initialization vector,

45
00:03:48,000 --> 00:03:54,000
so you would think that it breaks the correlation between key and message.

46
00:03:54,000 --> 00:03:59,000
Now you'd have to compute your table separately for every nonce.

47
00:03:59,000 --> 00:04:01,000
This is sort of like adding SALT to passwords.

48
00:04:01,000 --> 00:04:07,000
Exactly. This is the exact same system as adding SALT.

49
00:04:07,000 --> 00:04:09,000
This has been included in GSM.

50
00:04:09,000 --> 00:04:16,000
However, the nonce is only effective if the attacker has to go for the key

51
00:04:16,000 --> 00:04:20,000
to break the system.

52
00:04:20,000 --> 00:04:24,000
There are different encryption functions that are attackable

53
00:04:24,000 --> 00:04:27,000
with time-memory trade-offs in different ways,

54
00:04:27,000 --> 00:04:30,000
in particular for block ciphers.

55
00:04:33,000 --> 00:04:37,000
This protection measure works out of the box,

56
00:04:37,000 --> 00:04:44,000
because the block cipher consumes the key, crunches it in complex ways

57
00:04:44,000 --> 00:04:46,000
and outputs the message.

58
00:04:46,000 --> 00:04:54,000
Unlike those, stream ciphers take the key, do once more computation,

59
00:04:54,000 --> 00:04:57,000
do the same computation again, do the same computation again--

60
00:04:57,000 --> 00:05:01,000
in the case of GSM 100 times--and then outputs the message.

61
00:05:01,000 --> 00:05:08,000
It becomes a function that's consistent over very many smaller functions

62
00:05:08,000 --> 00:05:13,000
and the nonce is, of course, only input at the very beginning.

63
00:05:13,000 --> 00:05:20,000
To make this now resistant against time-memory tradeoff

64
00:05:20,000 --> 00:05:26,000
their intermediate states--those results of the first round, second round, and so forth

65
00:05:26,000 --> 00:05:30,000
to the 100th round--have to be a non-attackable time-memory tradeoff.

66
00:05:30,000 --> 00:05:39,000
That sometimes is achieved by a large, internal state of the function.

67
00:05:39,000 --> 00:05:46,000
For instance, the GPRS functions or etch function--2.5G networks--

68
00:05:46,000 --> 00:05:50,000
they also consume a 64-bit key,

69
00:05:50,000 --> 00:05:54,000
but they have an internal state of at least 96 bits.

70
00:05:54,000 --> 00:05:59,000
That is a protection, because now the attacker has to go for the key after all.

71
00:05:59,000 --> 00:06:06,000
However, if you use a small internal state, then the attacker can go to attack

72
00:06:06,000 --> 00:06:11,000
that internal state and GSM falls exactly in this category,

73
00:06:11,000 --> 00:06:13,000
and then the countermeasure doesn't work anymore.

74
00:06:13,000 --> 00:06:17,000
So the internal state is still 64 bits. >>Exactly. >>Combining the key and the nonce.

75
00:06:17,000 --> 00:06:22,000
Yeah. Message in, the key, and the message out as well as the internal state--

76
00:06:22,000 --> 00:06:25,000
everything is 64 bits in GSM.

77
00:06:25,000 --> 00:06:31,000
Of course, adding a large internal state doesn't come at a great cost.

78
00:06:31,000 --> 00:06:39,000
It takes a few more flipflops and hyper-implementation or slightly larger words

79
00:06:39,000 --> 00:06:41,000
in the software implementation.

80
00:06:41,000 --> 00:06:44,000
This didn't prevent the attack that you described,

81
00:06:44,000 --> 00:06:47,000
but the attack you showed us would actually be better than this.

82
00:06:47,000 --> 00:06:50,000
To do the n lookups would have taken hours.

83
00:06:50,000 --> 00:06:52,000
You were able to show it working in a manner of seconds or minutes.

84
00:06:52,000 --> 00:06:57,000
To explain why JSM is more vulnerable, we have to go a little bit into this discussion

85
00:06:57,000 --> 00:07:01,000
we started earlier on the hundred little functions instead of one big function--

86
00:07:01,000 --> 00:07:04,000
what makes this a stream cipher.

87
00:07:04,000 --> 00:07:10,000
This stream cipher consumes in the beginning both a key and IV, as we've seen,

88
00:07:10,000 --> 00:07:18,000
but does a computation 100 times to produce an internal state

89
00:07:18,000 --> 00:07:26,000
that is then mapped onto the output that's then XORed

90
00:07:26,000 --> 00:07:31,000
with the message is basically the output message.

91
00:07:31,000 --> 00:07:33,000
Interesting is this part, though.

92
00:07:33,000 --> 00:07:36,000
Each of these links is such a small computation

93
00:07:36,000 --> 00:07:39,000
that you can easily reverse it.

94
00:07:39,000 --> 00:07:46,000
It is nonlinear, meaning you cannot really reverse it without 100% certainty,

95
00:07:46,000 --> 00:07:51,000
but it's such a small computation that you can just kind of brute force the input space.

96
00:07:51,000 --> 00:07:53,000
[Dave] Okay. >>[Carson] Right? So little--

97
00:07:53,000 --> 00:07:55,000
[Carson] But the input space is small.

98
00:07:55,000 --> 00:07:57,000
[Carson] Yeah, just a few bits change in each of these steps,

99
00:07:57,000 --> 00:08:02,000
so you can just go through all the possibilities of input space and see which ones

100
00:08:02,000 --> 00:08:05,000
map back to your output. Right?

101
00:08:05,000 --> 00:08:12,000
Now, you may end up with several, so it's not always that only one of the inputs

102
00:08:12,000 --> 00:08:15,000
would have produced. That's exactly the nonlinear property.

103
00:08:15,000 --> 00:08:22,000
However, this may look as a complication at first

104
00:08:22,000 --> 00:08:29,000
but does, in fact, help the hacker because each of these also generates

105
00:08:29,000 --> 00:08:33,000
a key for some given IV that you assume.

106
00:08:33,000 --> 00:08:37,000
Well, at least some. Some may be dead ends.

107
00:08:37,000 --> 00:08:48,000
But at least in a lot of cases you can track one point that you store in your table

108
00:08:48,000 --> 00:08:50,000
back to different keys. >>[Dave] I see.

109
00:08:50,000 --> 00:08:55,000
Different starting key IV pairs lead to the same output.

110
00:08:55,000 --> 00:09:00,000
Exactly, and on average, for each value that you store in the table

111
00:09:00,000 --> 00:09:04,000
you have 13 keys that you find every time.

112
00:09:04,000 --> 00:09:06,000
Only one of them will be the correct one.

113
00:09:06,000 --> 00:09:09,000
Sometimes even all 13 are wrong. >>[Dave] I see.

114
00:09:09,000 --> 00:09:13,000
[Carson] But if you do find a key it will just be one of them.

115
00:09:13,000 --> 00:09:20,000
However, storing this point in the table is equivalent to storing 13 points in this table.

116
00:09:20,000 --> 00:09:24,000
[Dave] Right, and now each lookup is the equivalent of doing 13 lookups.

117
00:09:24,000 --> 00:09:28,000
[Carson] No, the lookup is actually the same effort, but the storage is decreased.

118
00:09:28,000 --> 00:09:33,000
This is basically an inherit encryption function for rainbow tables

119
00:09:33,000 --> 00:09:36,000
that this system comes with.

120
00:09:36,000 --> 00:09:42,000
We are 13 times more efficient with this encryption function

121
00:09:42,000 --> 00:09:45,000
than with a generic 64-bit encryption function.

122
00:09:45,000 --> 00:09:49,000
Thirteen times and such a tradeoff with all the different tweaks

123
00:09:49,000 --> 00:09:52,000
is the difference between hours and seconds.

124
00:09:52,000 --> 00:09:54,000
[Dave] You're shrinking the table by a factor of 10,

125
00:09:54,000 --> 00:09:58,000
which is making all the lookups less expensive. >>[Carson] Exactly.

126
00:09:58,000 --> 00:10:07,000
Basically we're having 13 times more storage, and the crate of storage is quadratic.

127
00:10:07,000 --> 00:10:11,000
We're more efficient as an approximation by this factor,

128
00:10:11,000 --> 00:10:15,000
and that's the difference between seconds and hours.

129
00:10:15,000 --> 00:10:18,000
That's why SMS can be snooped in seconds.
