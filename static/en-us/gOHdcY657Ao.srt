1
00:00:00,460 --> 00:00:02,650
Let's play a game of connect the dots.

2
00:00:02,650 --> 00:00:05,300
Instead of drawing lines by hand,
though, we'll use a polyline.

3
00:00:06,330 --> 00:00:10,256
So here we are in 1.3.04 ConnectTheDots.

4
00:00:10,256 --> 00:00:12,420
Let's try running just
what we start out with.

5
00:00:13,880 --> 00:00:17,690
Hmm, not sure,
well maybe that's some legs?

6
00:00:17,690 --> 00:00:19,920
Well, let's draw a line and
figure it out.

7
00:00:21,030 --> 00:00:24,150
The TODOs in this file will explain
further what you're going to need to do

8
00:00:24,150 --> 00:00:25,612
to draw that line.

9
00:00:25,612 --> 00:00:31,270
But it looks like the dot positions are
wrapped up in this array of Vector2s.

10
00:00:31,270 --> 00:00:33,020
What's a Vector2?

11
00:00:33,020 --> 00:00:39,565
Well, if we right-click on it and
we say Go To, Declaration, we see that

12
00:00:39,565 --> 00:00:44,710
Vector2 is a class provided by lib GDX
that just holds an X and a Y component.

13
00:00:44,710 --> 00:00:46,120
Super convenient.

14
00:00:46,120 --> 00:00:49,660
So what we're going to need to do
is convert this array of Vector2s,

15
00:00:49,660 --> 00:00:53,160
into an array of floats
that polyline will accept.

16
00:00:53,160 --> 00:00:57,160
And then we'll go ahead and start a
shape render batch, with Shapetype.Line.

17
00:00:57,160 --> 00:01:01,070
Actually draw the poly line and then
as always, remember to end the batch.

18
00:01:02,430 --> 00:01:06,570
Try connecting the dots and when
you're done, what animal do you see?

19
00:01:06,570 --> 00:01:10,170
Remember, if you get stuck, or just
when you're done with your solution,

20
00:01:10,170 --> 00:01:11,980
I'd go ahead and
check out our solution as well.
