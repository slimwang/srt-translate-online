1
00:00:00,000 --> 00:00:02,000
When we were writing our interpreter,

2
00:00:02,000 --> 00:00:04,000
we saw that JavaScript lets us modify

3
00:00:04,000 --> 00:00:06,000
global variables from within a function.

4
00:00:06,000 --> 00:00:09,000
Does this have security implications for our browser?

5
00:00:09,000 --> 00:00:16,000
Oh yes, there are very tragic--very problematic security implications

6
00:00:16,000 --> 00:00:20,000
of the ability to overwrite or even read from

7
00:00:20,000 --> 00:00:22,000
a variable that you're not expecting.

8
00:00:22,000 --> 00:00:25,000
Especially when you have a program written in JavaScript

9
00:00:25,000 --> 00:00:28,000
or something like PHP, another language

10
00:00:28,000 --> 00:00:30,000
commonly used to write web applications,

11
00:00:30,000 --> 00:00:32,000
that's outward facing--where adversaries

12
00:00:32,000 --> 00:00:36,000
can keep poking you until you fall over.

13
00:00:36,000 --> 00:00:39,000
One of the historically most common ways this came up--

14
00:00:39,000 --> 00:00:42,000
and I'll use PHP as an example.

15
00:00:42,000 --> 00:00:48,000
In PHP--was known as registering or register global variables.

16
00:00:48,000 --> 00:00:51,000
Early on, PHP was commonly used

17
00:00:51,000 --> 00:00:54,000
to write code that would respond to web forms.

18
00:00:54,000 --> 00:00:56,000
Now if you're not familiar with web forms,

19
00:00:56,000 --> 00:01:01,000
just think about registering for an account online

20
00:01:01,000 --> 00:01:03,000
or maybe buying some food or buying a book.

21
00:01:03,000 --> 00:01:05,000
You often have to fill in things like this is my name,

22
00:01:05,000 --> 00:01:08,000
this is my address, this is my credit card number,

23
00:01:08,000 --> 00:01:10,000
here's how much I'm paying, here's how much I'm tipping.

24
00:01:10,000 --> 00:01:12,000
You write all of those things in text,

25
00:01:12,000 --> 00:01:16,000
and then some computer program on the other side is going to do calculations on them.

26
00:01:16,000 --> 00:01:19,000
For example, maybe it's going to

27
00:01:19,000 --> 00:01:23,000
add in sales tax, or calculate how much shipping is going to be,

28
00:01:23,000 --> 00:01:25,000
or figure out when to send you some email later

29
00:01:25,000 --> 00:01:29,000
based on the time and your zip code and the particular shipping company--

30
00:01:29,000 --> 00:01:31,000
any sort of business logic in the middle.

31
00:01:31,000 --> 00:01:33,000
In order to do that, though, it needs to know

32
00:01:33,000 --> 00:01:36,000
what your zip code was when you entered it in the form field

33
00:01:36,000 --> 00:01:38,000
or how much money you said you were paying.

34
00:01:38,000 --> 00:01:40,000
So we need to get that information.

35
00:01:40,000 --> 00:01:44,000
In order to make it very simple for early PHP programmers,

36
00:01:44,000 --> 00:01:47,000
if you wrote your web page and said

37
00:01:47,000 --> 00:01:49,000
name here--this is the name field--

38
00:01:49,000 --> 00:01:51,000
zip code here--this is the zip code field--

39
00:01:51,000 --> 00:01:55,000
it might automatically make global variables

40
00:01:55,000 --> 00:01:57,000
in the middle of your PHP program

41
00:01:57,000 --> 00:01:59,000
called Name and Zip Code.

42
00:01:59,000 --> 00:02:01,000
Then you could just read out of them

43
00:02:01,000 --> 00:02:03,000
and get whatever the user had posted in the form.

44
00:02:03,000 --> 00:02:07,000
This was super convenient, but also super deadly.

45
00:02:07,000 --> 00:02:11,000
It is phenomenally easy to take over a web page

46
00:02:11,000 --> 00:02:13,000
or otherwise maliciously attack a web page

47
00:02:13,000 --> 00:02:18,000
or a web application that uses this sort of register global variables behavior.

48
00:02:18,000 --> 00:02:20,000
One easy way to think about this is,

49
00:02:20,000 --> 00:02:25,000
the values of these variable aren't set by the programmer, and they may not be validated.

50
00:02:25,000 --> 00:02:27,000
You can't trust people on the web

51
00:02:27,000 --> 00:02:31,000
to always put in an exact integer for their zip code.

52
00:02:31,000 --> 00:02:33,000
You can't trust them not to make up

53
00:02:33,000 --> 00:02:36,000
fake form fields that weren't really there

54
00:02:36,000 --> 00:02:38,000
that contain things like am I cleared

55
00:02:38,000 --> 00:02:41,000
or password credentials or how much money should I give this user

56
00:02:41,000 --> 00:02:43,000
or what's the sale or whatnot.

57
00:02:43,000 --> 00:02:46,000
In essence, any bit of business logic that you had in your program,

58
00:02:46,000 --> 00:02:48,000
they could fake up new values for it.

59
00:02:48,000 --> 00:02:50,000
You thought you were giving a 10% sale,

60
00:02:50,000 --> 00:02:54,000
suddenly you are giving a 110% sale--worst case sort of scenario.

61
00:02:54,000 --> 00:02:57,000
So this register global variables approach

62
00:02:57,000 --> 00:02:59,000
turned out to be a really poor design decision

63
00:02:59,000 --> 00:03:01,000
in early versions of PHP.

64
00:03:01,000 --> 00:03:05,000
These days, it's more or less off by default,

65
00:03:05,000 --> 00:03:07,000
but still it's what a lot of people think of

66
00:03:07,000 --> 00:03:10,000
when they think of global variables that we don't necessarily

67
00:03:10,000 --> 00:03:13,000
have control over where reading or writing them.

68
00:03:13,000 --> 00:03:15,000
But so is some adversary.

69
00:03:15,000 --> 00:03:17,000
Now this can definitely lead to security problems.

70
00:03:17,000 --> 00:03:20,000
Now these days, even if register global variables

71
00:03:20,000 --> 00:03:23,000
isn't a PHP feature, PHP programmers will still find

72
00:03:23,000 --> 00:03:26,000
fun ways to make the web insecure.

73
00:03:26,000 --> 00:03:30,000
Functions like Explode, which are very similar to things like

74
00:03:30,000 --> 00:03:36,000
String.Split in Python, are often used to assign to local variables,

75
00:03:36,000 --> 00:03:39,000
trusting the user or trusting the person on the other side

76
00:03:39,000 --> 00:03:41,000
of some sort of web interface to be well behaved.

77
00:03:41,000 --> 00:03:43,000
One of the big problems with computer security

78
00:03:43,000 --> 00:03:46,000
is that often the adversary is not well behaved.

79
00:03:46,000 --> 00:03:49,000
We have to pay attention and validate these sorts of strings.

80
00:03:49,000 --> 00:03:51,000
So this issue that you saw in class,

81
00:03:51,000 --> 00:03:54,000
relating to when can I change global variables,

82
00:03:54,000 --> 00:03:58,000
when are they in scope, am I going to get the value that I expect or make a new one.

83
00:03:58,000 --> 00:04:02,000
Now this can have unfortunate security implications.

84
00:04:02,000 --> 00:04:05,000
So it's worth understanding exactly how it works.
