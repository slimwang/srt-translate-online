1
00:00:00,810 --> 00:00:05,160
Martin's Acyclic Dependency Principle states that the dependencies between

2
00:00:05,160 --> 00:00:10,040
packages must not form cycles. Expressed in terms of D.S.M.'s this

3
00:00:10,040 --> 00:00:13,750
says that you should be able to permute the rows and columns of the D.S.M.

4
00:00:13,750 --> 00:00:18,100
in such a way that the transitive closer of the matrix is lower triangular.

5
00:00:18,100 --> 00:00:21,460
What this means is that there's a strict ordering among the Components,

6
00:00:21,460 --> 00:00:24,960
such that a Component only depends on other components beneath it,

7
00:00:24,960 --> 00:00:29,060
and never on one above it. A violation of this property is seen in

8
00:00:29,060 --> 00:00:31,610
a system where component A depends upon component B,

9
00:00:31,610 --> 00:00:36,010
and component B depends directly or indirectly on component A.

10
00:00:36,010 --> 00:00:39,570
Not only is it difficult to maintain such systems it is even hard to

11
00:00:39,570 --> 00:00:42,660
understand them in other words, you can't understand A without understanding B,

12
00:00:42,660 --> 00:00:46,330
and you can't understand B without understanding A. There are several ways to

13
00:00:46,330 --> 00:00:49,800
deal with violations of the Acyclic Dependency Principle. If you have

14
00:00:49,800 --> 00:00:54,750
a situation where A depends on B and B depends on A, you can invent a module C,

15
00:00:54,750 --> 00:00:59,790
take the part of A that B depends on and place it in C, and have both A and

16
00:00:59,790 --> 00:01:03,910
B depend upon C. Another way to break the cycle where the packages

17
00:01:03,910 --> 00:01:08,360
are siblings is to add an interface class into b and have a implement it.
