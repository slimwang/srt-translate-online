1
00:00:00,000 --> 00:00:05,000
Now we are ready to finish off our parser.

2
00:00:05,000 --> 00:00:10,000
There were three ways to add to the chart, and you've already done one and two,

3
00:00:10,000 --> 00:00:14,000
computing the closure or predicting what's happening next and shifting.

4
00:00:14,000 --> 00:00:17,000
The last way is reductions.

5
00:00:17,000 --> 00:00:20,000
Let's say once again that we're looking at chart i,

6
00:00:20,000 --> 00:00:26,000
and one element of it is the state x goes to ab dot cd coming from j.

7
00:00:26,000 --> 00:00:29,000
I'm going to write this code. I'll lock it into our parser.

8
00:00:29,000 --> 00:00:37,000
Next_states equals reductions, a function that gets to look at the chart, i, x, ab, cd, and j.

9
00:00:37,000 --> 00:00:41,000
It's going to return a list of possible next states.

10
00:00:41,000 --> 00:00:46,000
For each one, we will add it to the chart and notice if anything changed.

11
00:00:46,000 --> 00:00:49,000
Reductions are relatively tricky,

12
00:00:49,000 --> 00:00:54,000
so my first hint for you is you only want to do reductions if cd is empty.

13
00:00:54,000 --> 00:00:58,000
Remember reductions only apply if the red dot is as far right as possible.

14
00:00:58,000 --> 00:01:04,000
My other hint for you is that you'll have to look back previously at the chart.

15
00:01:04,000 --> 00:01:07,000
Remember when we worked through examples together, we'd start over here,

16
00:01:07,000 --> 00:01:10,000
go back over the chart, and then go back to the right.

17
00:01:10,000 --> 00:01:13,000
You'll have to do the same sort of thing, so we're passing in the chart.

18
00:01:13,000 --> 99:59:59,999
Try it out. This one's a bit tricky.
