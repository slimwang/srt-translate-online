1
00:00:00,450 --> 00:00:03,560
The pseudocode starts with,
when the order button is clicked.

2
00:00:03,560 --> 00:00:07,020
This indicates that we should add
our code in the submit order method.

3
00:00:08,180 --> 00:00:11,280
Then, we need to get the checked
state from the checkbox.

4
00:00:11,280 --> 00:00:14,990
In order to call any methods on a view,
in the view hierarchy,

5
00:00:14,990 --> 00:00:17,570
we need to first find view by id.

6
00:00:17,570 --> 00:00:21,560
The first thing I need to do is assign
a view id to this check box view.

7
00:00:22,770 --> 00:00:25,920
In android studio in activity main
layout I'm going to find the check

8
00:00:25,920 --> 00:00:27,420
box layout view.

9
00:00:27,420 --> 00:00:31,690
Since my cursors here it highlights
this view in the preview.

10
00:00:31,690 --> 00:00:34,600
Then I'm going to add a line to
send a view ID to this view.

11
00:00:35,750 --> 00:00:39,140
Now in the Java code,
I can refer to this view, and

12
00:00:39,140 --> 00:00:42,140
then try to extract the state from it.

13
00:00:42,140 --> 00:00:43,410
Let's go into the main activity.

14
00:00:43,410 --> 00:00:46,410
I'm going to put my code
in the submit order method.

15
00:00:47,700 --> 00:00:51,250
I know that I need to find the CheckBox
Java object in the view hierarchy.

16
00:00:52,270 --> 00:00:55,650
I start by creating a variable,
whippedCreamCheckBox,

17
00:00:55,650 --> 00:00:57,810
with data type CheckBox.

18
00:00:57,810 --> 00:01:01,380
Then I can call the findViewById
method within that activity.

19
00:01:01,380 --> 00:01:03,950
This will find a view
based on the given ID.

20
00:01:03,950 --> 00:01:09,080
I'm going to pass in the ID
(R.id.whipped_cream_checkbox),

21
00:01:09,080 --> 00:01:12,060
which I just assigned in
the other layout file.

22
00:01:12,060 --> 00:01:16,070
This gives me an error immediately
because the required type is CheckBox,

23
00:01:16,070 --> 00:01:19,020
because this is what the variable
on the left-hand side is.

24
00:01:19,020 --> 00:01:22,230
However, the return value of
this method is of type view.

25
00:01:22,230 --> 00:01:23,330
So, just like we learned earlier,

26
00:01:23,330 --> 00:01:25,710
we need to cast the return
value of this method.

27
00:01:25,710 --> 00:01:29,380
I'm going to cast it to
be a CheckBox object.

28
00:01:29,380 --> 00:01:33,720
The reason why I can cast it Is because
CheckBox is a subclass of View.

29
00:01:34,910 --> 00:01:37,480
Okay, now I have
the CheckBox Java object

30
00:01:37,480 --> 00:01:40,450
that represents the checkbox in the UI.

31
00:01:40,450 --> 00:01:42,570
In order to figure out
whether the box is checked or

32
00:01:42,570 --> 00:01:45,760
not, I need to call
a method on the object.

33
00:01:45,760 --> 00:01:48,360
You may not know which method
to call on the CheckBox object.

34
00:01:48,360 --> 00:01:49,790
And that's perfectly fine.

35
00:01:49,790 --> 00:01:52,000
So you can just Google search for it.

36
00:01:52,000 --> 00:01:55,520
Search for CheckBox Android, and
then click on the first link.

37
00:01:56,940 --> 00:02:01,560
And to reinforce what I mentioned
earlier, checkbox is a subclass of view.

38
00:02:01,560 --> 00:02:03,080
There's other views in between, but

39
00:02:03,080 --> 00:02:04,820
ultimately it's still
a subclass of view.

40
00:02:06,050 --> 00:02:09,120
This class overview is kind of
interesting because it has some

41
00:02:09,120 --> 00:02:10,780
Java code here.

42
00:02:10,780 --> 00:02:13,730
It has this line of code which
we already have in our app,

43
00:02:13,730 --> 00:02:19,530
we're doing find view by id, given an id
and then getting a check box item back.

44
00:02:19,530 --> 00:02:21,560
This next line is even more interesting.

45
00:02:21,560 --> 00:02:26,630
It says check box, which is the name
of this variable, dot is checked.

46
00:02:26,630 --> 00:02:29,510
This looks like a method call
with no input arguments.

47
00:02:29,510 --> 00:02:33,450
This appears to be telling us whether
the box is checked or not, and returning

48
00:02:33,450 --> 00:02:37,580
a true or false value, but let's check
the check boxes guide to be sure.

49
00:02:37,580 --> 00:02:42,740
Let's scroll through this We
see some checkbox xml code,

50
00:02:42,740 --> 00:02:44,770
and some more Java code.

51
00:02:45,910 --> 00:02:49,910
This method looks like it's called
when the checkbox is clicked.

52
00:02:49,910 --> 00:02:53,840
This method name matches the method
name specified in the xml.

53
00:02:53,840 --> 00:02:58,530
I'm assuming that the view that is
being passed in is the check box view.

54
00:02:58,530 --> 00:03:00,800
And, we cast it to CheckBox, and

55
00:03:00,800 --> 00:03:05,360
we also called IsChecked, and
the return value is a boolean.

56
00:03:05,360 --> 00:03:09,380
The comment also describes it further,
it says is the view now checked?

57
00:03:09,380 --> 00:03:11,880
So I think this is exactly what we need.

58
00:03:11,880 --> 00:03:13,520
Let's try to use the method IsChecked.

59
00:03:14,640 --> 00:03:18,010
First we type the variable
name of the CheckBox object.

60
00:03:18,010 --> 00:03:20,210
It's whippedCreamCheckBox.

61
00:03:20,210 --> 00:03:23,020
Then I add a dot to call a method on it.

62
00:03:23,020 --> 00:03:26,290
I can start typing isChecked,
and it pops up here.

63
00:03:26,290 --> 00:03:29,400
So I can hit Enter to
use this suggestion.

64
00:03:29,400 --> 00:03:33,150
On the right hand side here, it says
what the return value of this method is,

65
00:03:33,150 --> 00:03:35,150
and it says it returns a boolean.

66
00:03:35,150 --> 00:03:39,330
So after I use this suggestion,
I'm going to go to the left hand side of

67
00:03:39,330 --> 00:03:44,110
this method call and then I'm going to
store this result in a boolean variable.

68
00:03:44,110 --> 00:03:48,260
I'm going to call this boolean variable
hasWhippedCream, then hit Enter.

69
00:03:48,260 --> 00:03:52,860
To recap, we're calling a method on the
whippedCreamCheckbox Java object, and

70
00:03:52,860 --> 00:03:54,690
the method is called isChecked.

71
00:03:54,690 --> 00:03:56,750
This has a return value of a boolean and

72
00:03:56,750 --> 00:03:59,210
it's being stored on
the left-hand side here.

73
00:03:59,210 --> 00:04:01,970
In this variable called hasWhippedCream.

74
00:04:01,970 --> 00:04:03,220
This completes the first task.

75
00:04:03,220 --> 00:04:06,530
I also mentioned that you
can log this variable so

76
00:04:06,530 --> 00:04:09,130
you could verify that
you're on the right path.

77
00:04:09,130 --> 00:04:10,870
So, on the next line,
I'm going to add a log message.

78
00:04:12,050 --> 00:04:14,150
The first argument is a tag name.

79
00:04:14,150 --> 00:04:17,100
And I'm just going to use the name
of our class, which is MainActivity.

80
00:04:17,100 --> 00:04:19,810
Then I'm going to put my own message.

81
00:04:19,810 --> 00:04:22,058
I'm going to say Has whipped cream.

82
00:04:22,058 --> 00:04:26,660
And then add in the boolean variable.

83
00:04:26,660 --> 00:04:30,930
By concatenating this string
here with the boolean variable,

84
00:04:30,930 --> 00:04:34,560
it will turn this boolean
value into a string as well.

85
00:04:34,560 --> 00:04:38,319
So then the text will say has whipped
cream true, or has whipped cream false.

86
00:04:39,400 --> 00:04:41,330
Now let's run the app on our device, and

87
00:04:41,330 --> 00:04:43,780
check that this is actually
printing out the right log message.

88
00:04:44,810 --> 00:04:48,170
I increased the size of the log
window using this control here.

89
00:04:48,170 --> 00:04:50,030
Now when I click on
the whipped cream check box and

90
00:04:50,030 --> 00:04:53,850
then hit the order button, I'll expect
to see a message down here that says,

91
00:04:53,850 --> 00:04:56,319
has whipped cream true or false.

92
00:04:57,360 --> 00:04:59,770
I'm going to scroll this over so
that I can see the actual message.

93
00:05:00,790 --> 00:05:03,540
Okay, let's see if this works.

94
00:05:03,540 --> 00:05:06,210
I'm going to check this box and
then hit order.

95
00:05:06,210 --> 00:05:10,101
Okay, I think a new message got
printed out and it says Main Activity.

96
00:05:10,101 --> 00:05:12,335
Has whipped cream: true.

97
00:05:12,335 --> 00:05:15,215
That's correct because
the checkbox is checked.

98
00:05:15,215 --> 00:05:20,645
If I uncheck this box and then hit the
order button, I expect it to say false.

99
00:05:20,645 --> 00:05:24,825
And scroll to the right again, and
it says has whipped cream: false.

100
00:05:24,825 --> 00:05:28,475
Okay, so it looks like our
code is correct so far for

101
00:05:28,475 --> 00:05:32,195
finding the checkbox view, and
then getting the check state out of it.

102
00:05:32,195 --> 00:05:33,945
Now let's continue to the second task.

103
00:05:35,410 --> 00:05:40,000
Okay, now we need to pass this boolean
variable into the order summary method.

104
00:05:40,000 --> 00:05:43,580
If I want to pass another argument
into the createOrderSummary method,

105
00:05:43,580 --> 00:05:48,410
I'll just add a comma here, and
then pass the variable, hasWhippedCream.

106
00:05:49,820 --> 00:05:53,680
Immediately I get an error that says,
It can't be applied to

107
00:05:53,680 --> 00:05:58,730
the method createOrderSummary, because
that just expects an integer parameter.

108
00:05:58,730 --> 00:06:02,050
So let's scroll down to where
createOrderSummary is declared.

109
00:06:03,310 --> 00:06:05,590
Now I need to modify
the method signature

110
00:06:05,590 --> 00:06:07,900
of the createOrderSummary method.

111
00:06:07,900 --> 00:06:10,440
Instead of taking in one input
parameter, it needs to take in two.

112
00:06:10,440 --> 00:06:15,430
So I'm going to add a comma and
then specify the second parameter.

113
00:06:15,430 --> 00:06:20,810
The data type should be a boolean, and
I'm going to call it addwhippedCream.

114
00:06:20,810 --> 00:06:23,850
You can call the input parameter
whatever name you want, but

115
00:06:23,850 --> 00:06:27,430
I just want to show you that this name
does not have to match this name here.

116
00:06:28,490 --> 00:06:32,580
Since we modified the method's signature
here, we have to update the Java dock as

117
00:06:32,580 --> 00:06:35,440
well to specify what this
input parameter is about.

118
00:06:36,510 --> 00:06:38,140
Okay, that completes the second task.

119
00:06:39,600 --> 00:06:42,850
The third task is to change the order
summary text to include whether or

120
00:06:42,850 --> 00:06:44,450
not the user wants whip cream.

121
00:06:45,800 --> 00:06:49,490
Essentially that means we need
to use this input parameter here

122
00:06:49,490 --> 00:06:52,410
to modify our order summary message.

123
00:06:52,410 --> 00:06:56,260
In the screen shot the whip cream
topping line appeared below the name.

124
00:06:56,260 --> 00:06:58,030
So let's add a new line here.

125
00:06:58,030 --> 00:07:01,450
I'm going to type out
price message plus equals

126
00:07:01,450 --> 00:07:03,950
to modify the existing price message.

127
00:07:03,950 --> 00:07:06,720
And then add the line Add whipped cream?

128
00:07:06,720 --> 00:07:10,520
I'm going to add a space, and
then add the boolean variable.

129
00:07:10,520 --> 00:07:14,060
Again, I can catonate a string
literal with a boolean value,

130
00:07:14,060 --> 00:07:16,770
and this will turn this
whole thing into a string.

131
00:07:16,770 --> 00:07:18,100
Cool, now let's try it on our device.

132
00:07:19,230 --> 00:07:20,770
If I click on this check box and

133
00:07:20,770 --> 00:07:24,720
then click on the order button it
should say add whip cream topping true.

134
00:07:24,720 --> 00:07:28,480
And it does, except again,
I forgot the new line character, so

135
00:07:28,480 --> 00:07:29,410
I need to modify that now.

136
00:07:29,410 --> 00:07:32,590
Well since I'm here I should
just check the other case.

137
00:07:32,590 --> 00:07:34,680
So I'm going to uncheck this box and
hit the order button.

138
00:07:34,680 --> 00:07:36,640
And it says false.

139
00:07:36,640 --> 00:07:40,310
So it's correctly reflecting
the state of the checked box.

140
00:07:40,310 --> 00:07:43,800
Now let's add the new line character and
run the app again.

141
00:07:43,800 --> 00:07:46,590
if I click the check box and then hit
the order button then it's says true.

142
00:07:46,590 --> 00:07:49,480
If I uncheck it then click on order,
it says false.

143
00:07:50,610 --> 00:07:51,550
Awesome.

144
00:07:51,550 --> 00:07:52,810
That handles both cases.

145
00:07:54,550 --> 00:07:56,750
The later parts of
this task were easier.

146
00:07:56,750 --> 00:08:00,610
Because once we verified in the logs
that we were getting the right check

147
00:08:00,610 --> 00:08:04,200
state, it was only a matter
of showing on the screen.

148
00:08:04,200 --> 00:08:06,000
Since things are working
inside the app now,

149
00:08:06,000 --> 00:08:08,660
I can remove the log message
because it's not needed anymore.

150
00:08:08,660 --> 00:08:11,810
And then run the app one final time.

151
00:08:11,810 --> 00:08:12,830
Okay, great work.

152
00:08:12,830 --> 00:08:14,260
Let's move on to the next task.
