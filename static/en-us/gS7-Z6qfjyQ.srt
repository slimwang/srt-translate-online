1
00:00:00,250 --> 00:00:03,220
So what types of shared
memory hardware do we have?

2
00:00:03,220 --> 00:00:09,020
We can have multiple single cores that
share the same physical address space,

3
00:00:09,020 --> 00:00:13,300
so all of them can each
address to any memory address.

4
00:00:13,300 --> 00:00:16,695
And the examples we have seen
of these are the UMA and NUMA.

5
00:00:16,695 --> 00:00:19,823
Both of them actually
are individual cores,

6
00:00:19,823 --> 00:00:23,950
each of them being able to
access the entire address space.

7
00:00:25,170 --> 00:00:30,840
The other extreme is to only have one
core and then do multi-threading,

8
00:00:30,840 --> 00:00:35,480
basically, run two threads by
just time-sharing the same core.

9
00:00:35,480 --> 00:00:38,170
So, because they're now running
really on the same core,

10
00:00:38,170 --> 00:00:41,010
they're naturally accessing
the same physical memory.

11
00:00:41,010 --> 00:00:43,698
So, we get the shared memory
behavior simply by virtue of

12
00:00:43,698 --> 00:00:45,611
actually not having more than one core.

13
00:00:45,611 --> 00:00:49,000
And now the question is,
is there something in-between them?

14
00:00:49,000 --> 00:00:53,782
Because this is not really capable of
benefiting from having multi-threading.

15
00:00:53,782 --> 00:00:58,312
We can have hardware multi-threading
support in one core that

16
00:00:58,312 --> 00:01:03,748
actually tries to benefit from
there being multiple threads.

17
00:01:03,748 --> 00:01:07,330
This hardware multi-threading
can be at the coarse-grain

18
00:01:07,330 --> 00:01:11,050
where we change the thread we
are working on every few cycles.

19
00:01:11,050 --> 00:01:15,820
And we now need to have hardware
support that switches between threads

20
00:01:15,820 --> 00:01:20,240
this often, because without hardware
support, we would be spending

21
00:01:20,240 --> 00:01:24,020
all of the time just saving and
restoring registers of these threads.

22
00:01:24,020 --> 00:01:27,108
So we actually need to now have every
thread has its own set of hardware

23
00:01:27,108 --> 00:01:28,074
registers and so on.

24
00:01:28,074 --> 00:01:31,410
So there is hardware support needed for
this.

25
00:01:31,410 --> 00:01:35,160
We can have fine-grain
hardware multi-threading where

26
00:01:35,160 --> 00:01:38,510
every cycle we are working
on another thread.

27
00:01:38,510 --> 00:01:41,970
This, of course, needs even more
hardware support because now we need to

28
00:01:41,970 --> 00:01:46,230
be able to very quickly
change between these threads.

29
00:01:46,230 --> 00:01:50,938
And, we can also have
simultaneous multi-threading or

30
00:01:50,938 --> 00:01:52,820
SMT, where in any given cycles,

31
00:01:52,820 --> 00:01:56,370
we could be doing instructions that
belong to these different threads.

32
00:01:56,370 --> 00:02:00,537
This is called
Simultaneous Multi-Threading or SMT.

33
00:02:00,537 --> 00:02:07,090
And it's also called Hyper Threading
by some manufacturers of processors.

34
00:02:07,090 --> 00:02:09,637
So now, we need hardware support for
any one of these three.

35
00:02:09,637 --> 00:02:12,997
And, of course, the hardware support
becomes more extensive as we move from

36
00:02:12,997 --> 00:02:15,387
coarse-grain, to fine-grain,
to simultaneous.

37
00:02:15,387 --> 00:02:17,000
So the question is, but

38
00:02:17,000 --> 00:02:21,848
what do we benefit by kind of sharing
the same core by multiple threads.

39
00:02:21,848 --> 00:02:24,320
Don't we get the same thing as here?
