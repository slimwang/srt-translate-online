1
00:00:00,000 --> 00:00:04,000
We want to break up strings like the source to a webpage into important words,

2
00:00:04,000 --> 00:00:07,000
and we're going to use Python to do it.

3
00:00:07,000 --> 00:00:10,000
We're given as input part of a webpage like this--

4
00:00:10,000 --> 00:00:14,000
"Hello 1" with some syntax over here on the left that we'll get to in a bit.

5
00:00:14,000 --> 00:00:19,000
One approach to breaking this up would be to use Python's string.find function

6
00:00:19,000 --> 00:00:25,000
to find this space and then split up the string into everything to the right of the space

7
00:00:25,000 --> 00:00:27,000
and everything to the left of the space.

8
00:00:27,000 --> 00:00:30,000
You may already be familiar with Python's string.find function

9
00:00:30,000 --> 00:00:33,000
from previous experience with computer science.

10
00:00:33,000 --> 00:00:38,000
But if you're not, it's often described as finding a needle in a haystack.

11
00:00:38,000 --> 00:00:42,000
For example, let's say that I want to find the "fun" in "Mifune Toshiro."

12
00:00:42,000 --> 00:00:46,000
This is our needle, and we're going to look for the first copy of it we can find

13
00:00:46,000 --> 00:00:51,000
over here in the haystack string on the left, and there is some "fun" hidden in there.

14
00:00:51,000 --> 00:00:58,000
The answer we get back will be the string index of the beginning of the fun, which for us is 2.

15
00:00:58,000 --> 00:01:02,000
You may be wondering why this is 2 and not some other value like, say, 7.

16
00:01:02,000 --> 00:01:08,000
Remember that Python strings--and, in fact, almost all Python collections start counting at zero.

17
00:01:08,000 --> 00:01:12,000
The "m" is at position zero, the "i" is at position 1, and the "f" is at position 2,

18
00:01:12,000 --> 00:01:14,000
and that's where the fun starts.

19
00:01:14,000 --> 00:01:19,000
Toshiro Mifune is a Japanese actor, and one of his most famous roles is the bandit in Rashamon.

20
00:01:19,000 --> 00:01:23,000
Well, we found the fun, so snap, the rest of the job's a game.

21
00:01:23,000 --> 00:01:25,000
Let's see a few more examples of this.

22
00:01:25,000 --> 00:01:29,000
We want to find a space in "Hello world," and there's one right here--

23
00:01:29,000 --> 00:01:34,000
position 0, 1, 2, 3, 4, 5. Our final answer is 5.

24
00:01:34,000 --> 00:01:37,000
You can also find a starting position.

25
00:01:37,000 --> 00:01:43,000
Here, if we're trying to find 1 in "1 + 1 = 2," the first occurrence can be found at position 0,

26
00:01:43,000 --> 00:01:48,000
but if we only start around position 2, then the answer we get will be 4.

27
00:01:48,000 --> 00:01:53,000
If the needle you're looking for does occur in your big base string

28
00:01:53,000 --> 00:01:58,000
Python returns negative 1, which is out of range for the string, to indicate as much.

29
00:01:58,000 --> 00:02:03,000
Let's review and test your knowledge of string.find with a quiz.

30
00:02:03,000 --> 00:02:06,000
In this class, quizzes are for your benefit. They check your understanding.

31
00:02:06,000 --> 00:02:10,000
They don't count for your grade in any way.

32
00:02:10,000 --> 00:02:13,000
They are not meant to be stressful, and you can try them as many times

33
00:02:13,000 --> 00:02:15,000
as you like until you get the right answer.

34
00:02:15,000 --> 00:02:19,000
Here I've written two Python expressions-- "Ada Lovelace" dot find space.

35
00:02:19,000 --> 00:02:21,000
Let's say we're trying to break this up into words.

36
00:02:21,000 --> 00:02:25,000
And "Alan Turing" dot find "n" starting at 4.

37
00:02:25,000 --> 00:02:29,000
I'd like you to fill in each blank with the answer we would get from the Python interpreter.

38
00:02:29,000 --> 00:02:33,000
You can use Python if you'd like to get a better feel for how this is going to turn out,

39
00:02:33,000 --> 00:02:35,000
but you can also just try to solve it on your own

40
00:02:35,000 --> 00:02:37,820
by thinking hard about the structure of the problem.
