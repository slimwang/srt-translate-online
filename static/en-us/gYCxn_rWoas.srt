1
00:00:00,000 --> 00:00:02,831
Now the answer is that it actually does do something.

2
00:00:02,831 --> 00:00:04,814
It produces an output.

3
00:00:04,814 --> 00:00:08,492
If it takes numbers as inputs then it produces their sum.

4
00:00:08,492 --> 00:00:12,000
But it works also if we pass in strings.

5
00:00:12,000 --> 00:00:14,354
It would produce the concatenation of the 2 strings,

6
00:00:14,354 --> 00:00:15,969
because the "+" operator

7
00:00:15,969 --> 00:00:18,000
works on both strings and numbers.

8
00:00:18,000 --> 00:00:22,000
Given the name sum, it makes more sense to use it to add numbers,

9
00:00:22,000 --> 00:00:25,000
but it will work perfectly well using strings as well.

10
00:00:25,000 --> 00:00:30,000
And let me just show you that in the Python interpreter.

11
00:00:30,000 --> 00:00:34,000
So now, I changed sum to return the value of a.

12
00:00:34,000 --> 00:00:36,338
I have 2 variables that are strings.

13
00:00:36,338 --> 00:00:41,000
We've introduced s to 'Hello ' with a space at the end and t to 'Dave!'

14
00:00:41,000 --> 00:00:44,000
Now I'm calling sum, passing in s and t,

15
00:00:44,000 --> 00:00:49,000
and what I get as a result is Hello Dave!

16
00:00:49,000 --> 00:00:51,000
Note that it does not change the value of s.

17
00:00:51,000 --> 00:00:53,000
s is passed into the first input.

18
00:00:53,000 --> 00:00:55,291
Even though we change the value of a here,

19
00:00:55,291 --> 00:00:57,568
that does not change the value of s.
