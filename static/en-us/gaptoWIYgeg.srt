1
00:00:00,290 --> 00:00:02,930
So now we're ready to describe the conditions for

2
00:00:02,930 --> 00:00:06,090
the logical clock proposed by Lamport. First of all,

3
00:00:06,090 --> 00:00:08,750
the first condition is that if I have two

4
00:00:08,750 --> 00:00:11,430
events, A and B, in the same process, the

5
00:00:11,430 --> 00:00:15,740
first condition says that the clock value associated, or

6
00:00:15,740 --> 00:00:19,150
the time stamp that it associated with event A

7
00:00:19,150 --> 00:00:22,500
has to be less than the time stamp associated

8
00:00:22,500 --> 00:00:25,590
with event B. In other words, we have this

9
00:00:25,590 --> 00:00:29,110
counter or a logical clock on every node

10
00:00:29,110 --> 00:00:32,710
of the distributed system that is monotonically increasing

11
00:00:32,710 --> 00:00:36,210
as events happen on that process. The second

12
00:00:36,210 --> 00:00:39,180
condition is that when we have a receipt of

13
00:00:39,180 --> 00:00:44,470
a message, we want to make sure that the receipt of the message has a time stamp

14
00:00:44,470 --> 00:00:51,100
that is greater for sure than the sending time span. So in other words if A and

15
00:00:51,100 --> 00:00:57,060
D are the act of sending a message from process I and D is the act of

16
00:00:57,060 --> 00:01:00,940
receiving the same message on process J, then

17
00:01:00,940 --> 00:01:03,960
what we are saying is the time stamp associated

18
00:01:03,960 --> 00:01:09,750
with the event A has to be less than the time stamp that is associated with the

19
00:01:09,750 --> 00:01:12,830
event D. In other words, we want to choose the

20
00:01:12,830 --> 00:01:16,900
time stamp associated with D as the max of

21
00:01:16,900 --> 00:01:19,450
the time stamp that I see in the incoming message,

22
00:01:19,450 --> 00:01:23,350
incremented by some value. Whatever the local counter is saying. These

23
00:01:23,350 --> 00:01:25,520
are the two things that I'm going to look at and decide

24
00:01:25,520 --> 00:01:28,860
the max of that as the time stamp to associate with

25
00:01:28,860 --> 00:01:32,920
event D. And if the events are concurrent, in this

26
00:01:32,920 --> 00:01:35,910
case, if I look at this picture here, A is the

27
00:01:35,910 --> 00:01:38,530
act of sending the message, D is the act of receiving

28
00:01:38,530 --> 00:01:42,120
the same message. B is an independent event that's happening on

29
00:01:42,120 --> 00:01:45,380
process PI, it has nothing to do with this

30
00:01:45,380 --> 00:01:48,710
event D that is happening on process PJ. And

31
00:01:48,710 --> 00:01:51,750
these are concurrent events. So the concurrent events, we've

32
00:01:51,750 --> 00:01:53,840
already seen this when we talked about the happened

33
00:01:53,840 --> 00:01:57,200
before relationship. In the case of concurrent events, the

34
00:01:57,200 --> 00:02:00,618
timestamps are arbitrary. Just by looking at the time

35
00:02:00,618 --> 00:02:03,930
stamp, I cannot say that B happened before D

36
00:02:03,930 --> 00:02:07,210
because, if I see the time stamp associated with B

37
00:02:07,210 --> 00:02:10,270
here, happens to be four. Over here, we picked the time

38
00:02:10,270 --> 00:02:12,590
stamp for D by saying that it has to be at

39
00:02:12,590 --> 00:02:14,790
least greater than the incoming time stamp. So we gave it

40
00:02:14,790 --> 00:02:17,310
a time stamp of 3. And so if I look at

41
00:02:17,310 --> 00:02:20,810
these two events, B and D, D has a time stamp

42
00:02:20,810 --> 00:02:24,990
that is smaller than B, but that does not mean that

43
00:02:24,990 --> 00:02:28,690
D happened before B, because these two are concurrent events, and

44
00:02:28,690 --> 00:02:33,040
therefore there's no way to know which event happened before the other.

45
00:02:33,040 --> 00:02:38,540
So in other words, just because we find that there is an event X, which has

46
00:02:38,540 --> 00:02:41,132
a time stamp that is smaller than a

47
00:02:41,132 --> 00:02:45,520
time stamp associated with another event, Y, doesn't mean

48
00:02:45,520 --> 00:02:48,620
that X happened before Y. So, while this

49
00:02:48,620 --> 00:02:52,320
condition is an important condition, the condition that

50
00:02:52,320 --> 00:02:58,510
if an event A happened before B, as we show in this picture, we have to ensure

51
00:02:58,510 --> 00:03:02,550
that the time stamp associated with event A is

52
00:03:02,550 --> 00:03:05,360
less than the time stamp associated with event B.

53
00:03:05,360 --> 00:03:07,380
But the converse is not true. Or in other

54
00:03:07,380 --> 00:03:10,550
words, if I have two events, and it so happens

55
00:03:10,550 --> 00:03:13,700
that the time stamp associated with this event X

56
00:03:13,700 --> 00:03:16,660
is less than the time stamp associated with this event

57
00:03:16,660 --> 00:03:20,480
Y, that does not mean that X happened before

58
00:03:20,480 --> 00:03:23,830
Y. This is very, very important. What that means is

59
00:03:23,830 --> 00:03:27,950
that Lamport's logical clock gives us a partial

60
00:03:27,950 --> 00:03:30,690
order of events happening in the entire distributed

61
00:03:30,690 --> 00:03:36,050
system. So if I take any one process, I know all the events, the ordering of all

62
00:03:36,050 --> 00:03:39,090
the events that happened on this process both

63
00:03:39,090 --> 00:03:42,370
the events that happened sequentially in this process

64
00:03:42,370 --> 00:03:45,300
itself as well as events that happened in

65
00:03:45,300 --> 00:03:48,780
which this process happened to communicate with other processes.

66
00:03:48,780 --> 00:03:50,210
In this case it sends a message over

67
00:03:50,210 --> 00:03:53,990
here. Similarly by looking at the record of all

68
00:03:53,990 --> 00:03:57,920
the events accumulated on process Pj, I can know

69
00:03:57,920 --> 00:04:01,270
the order in which the events happened in this

70
00:04:01,270 --> 00:04:04,120
process, in which process PJ had a part to

71
00:04:04,120 --> 00:04:07,460
play meaning all the local events as well as

72
00:04:07,460 --> 00:04:11,555
communication events that PJ participated in when it communicated

73
00:04:11,555 --> 00:04:14,200
with the other nodes in the entire distributed system.

74
00:04:14,200 --> 00:04:17,800
This is what the Lamport's logical clock gives you is a

75
00:04:17,800 --> 00:04:22,540
partial order of all the events that happened in the distributed system.
