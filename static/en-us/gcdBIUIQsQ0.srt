1
00:00:00,480 --> 00:00:02,500
Why do we have this potential for

2
00:00:02,500 --> 00:00:06,330
performance loss, with the microkernel based design?

3
00:00:06,330 --> 00:00:08,710
Mainly because of the border crossings. That

4
00:00:08,710 --> 00:00:12,320
is, going across hardware address spaces, can

5
00:00:12,320 --> 00:00:15,230
be quite expensive. First there is this

6
00:00:15,230 --> 00:00:19,050
explicit cost of switching the address space,

7
00:00:19,050 --> 00:00:22,030
from one hardware address space to another

8
00:00:22,030 --> 00:00:25,610
hardware address space. That is the explicit cost.

9
00:00:25,610 --> 00:00:28,700
And in addition to the explicit cost

10
00:00:28,700 --> 00:00:31,640
of going across address spaces, there are implicit

11
00:00:31,640 --> 00:00:35,210
costs involved in this border crossing. And that

12
00:00:35,210 --> 00:00:37,640
comes about because of change in locality. We're

13
00:00:37,640 --> 00:00:39,760
going from one hardware address space to a

14
00:00:39,760 --> 00:00:43,840
different address space, and that changes the locality

15
00:00:43,840 --> 00:00:47,230
of execution of the processor. And that means

16
00:00:47,230 --> 00:00:50,810
that me memory hierarchy, the caches in particular,

17
00:00:50,810 --> 00:00:55,430
close to the processor, may not have the contents that are needed for

18
00:00:55,430 --> 00:00:58,320
executing the code and accessing the data

19
00:00:58,320 --> 00:01:01,610
structures of a particular server, different from

20
00:01:01,610 --> 00:01:04,730
the application. A change in locality is

21
00:01:04,730 --> 00:01:08,920
another important determinant of performance and it

22
00:01:08,920 --> 00:01:13,120
can adversely effect the performance. And also,

23
00:01:13,120 --> 00:01:16,390
when we are going across address spaces

24
00:01:16,390 --> 00:01:23,050
to ensure the integrity of the system, either the micro kernel, or the server

25
00:01:23,050 --> 00:01:27,850
that is living on top of the microkernel. There may be a need to copy from

26
00:01:27,850 --> 00:01:30,500
user space to system space. And those

27
00:01:30,500 --> 00:01:34,530
kind of copying of data from the application's

28
00:01:34,530 --> 00:01:38,510
memory space into the microkernel and back out

29
00:01:38,510 --> 00:01:41,720
to a server process. All of those can

30
00:01:41,720 --> 00:01:45,630
result in affecting the performance of

31
00:01:45,630 --> 00:01:47,390
the operating system. Whether they're in a

32
00:01:47,390 --> 00:01:50,350
monolithic structure, since all the components

33
00:01:50,350 --> 00:01:53,830
are contained within the same address space,

34
00:01:53,830 --> 00:01:59,130
it is much easier for sharing data without copying. And that's one of

35
00:01:59,130 --> 00:02:02,830
the biggest potential sources of performance loss

36
00:02:02,830 --> 00:02:04,810
when we have this microkernel based structure.
