1
00:00:00,240 --> 00:00:03,166
So here's one way we can define hashtable_add. We're going to define

2
00:00:03,166 --> 00:00:06,720
the procedure hashtable_add. So the first thing we want to do is

3
00:00:06,720 --> 00:00:10,310
find the right bucket. We'll use hashtable_get_bucket we just defined to do

4
00:00:10,310 --> 00:00:13,790
that, passing in the table and the key. We'll store that in

5
00:00:13,790 --> 00:00:16,430
the variable bucket. The next thing we would need to do

6
00:00:16,430 --> 00:00:19,350
is add the new key value pair. And we can do that

7
00:00:19,350 --> 00:00:23,000
using append. Append will add a new element to the list. And

8
00:00:23,000 --> 00:00:25,560
what we want the list to be, is a new list with

9
00:00:25,560 --> 00:00:29,460
two elements, the key and the value. So let's try this in

10
00:00:29,460 --> 00:00:32,930
the Python interpreter, and I've done essentially the same thing that we

11
00:00:32,930 --> 00:00:35,780
did before, except for we don't really need the variable bucket. We

12
00:00:35,780 --> 00:00:38,490
can do the append right away. So i'm getting the bucket and

13
00:00:38,490 --> 00:00:41,360
then append the new entry to it. So we'll start, we'll make

14
00:00:41,360 --> 00:00:44,540
a hash table. We'll keep the size of the hash table very

15
00:00:44,540 --> 00:00:47,520
low. We would never really want a hash table with only three

16
00:00:47,520 --> 00:00:50,650
buckets. But to make it easy to look at the results, we'll keep

17
00:00:50,650 --> 00:00:54,414
the hash table very small, and let's add to our table a key

18
00:00:54,414 --> 00:00:59,080
and value. And for our actual web index the values will be a

19
00:00:59,080 --> 00:01:03,190
list of urls. For our test, they could be anything, so lets just

20
00:01:03,190 --> 00:01:08,160
use a number, and now we can look at table, and lets run that.

21
00:01:10,280 --> 00:01:11,750
And we see we have the table. We have

22
00:01:11,750 --> 00:01:16,120
three buckets, and one of the buckets contains an elements.

23
00:01:16,120 --> 00:01:18,650
If we look at the bucket that we get

24
00:01:18,650 --> 00:01:22,690
from hashtable_get_bucket for the key udacity, we should get the

25
00:01:22,690 --> 00:01:26,830
bucket, that contains the word udacity. Lets try that.

26
00:01:28,108 --> 00:01:30,660
That works and we can add some more words to

27
00:01:30,660 --> 00:01:32,720
our hash table, more key value pairs to our

28
00:01:32,720 --> 00:01:35,460
hash table. So now we've, we have got three entries

29
00:01:35,460 --> 00:01:40,650
on our hash table, they all happen to end up in different buckets. That's just

30
00:01:40,650 --> 00:01:45,730
lucky in this case. Lets add one more, so we have a bucket that contains more

31
00:01:45,730 --> 00:01:51,400
than one entry. And we should print our table after adding one more.

32
00:01:55,740 --> 00:02:00,800
And now we have one bucket with one word, one bucket with two entries and one

33
00:02:00,800 --> 00:02:02,630
bucket with just one. Now, there is one

34
00:02:02,630 --> 00:02:05,259
big problem, with the way we did hashtable_add.

35
00:02:07,970 --> 00:02:11,470
Suppose we add the same word again, and let's say

36
00:02:11,470 --> 00:02:14,690
now the value of udacity is 27. So now we

37
00:02:14,690 --> 00:02:18,150
are making a hashtable that has three buckets. We're adding

38
00:02:18,150 --> 00:02:21,900
a bunch of entries to it, we've added the entry udacity

39
00:02:21,900 --> 00:02:25,940
twice, now when we get the bucket for udacity. What

40
00:02:25,940 --> 00:02:27,350
we see is we have a bucket that has the

41
00:02:27,350 --> 00:02:30,280
same keyword twice. If we want our hash table to

42
00:02:30,280 --> 00:02:33,080
be a mapping between keys and values, this is going to be

43
00:02:33,080 --> 00:02:36,150
a problem. If we have the same keyword twice, when we

44
00:02:36,150 --> 00:02:38,880
look up udacity, well, we don't know which answer we should get.

45
00:02:38,880 --> 00:02:43,410
Is the value 23 or is the value 27? So, what we

46
00:02:43,410 --> 00:02:46,580
want is something a little different from add. What we want is

47
00:02:46,580 --> 00:02:49,180
to make sure that every time we add a new keyword

48
00:02:49,180 --> 00:02:52,190
to the hash table. If it already exists, instead of having two

49
00:02:52,190 --> 00:02:55,180
entries with the same keyword. What we'll do is change the value

50
00:02:55,180 --> 00:02:58,170
associated that is associated with that keyword. So we have a problem

51
00:02:58,170 --> 00:03:00,990
if we have two entries with the same keyword. We're

52
00:03:00,990 --> 00:03:03,490
going to fix that later. Before we fix that, let's define

53
00:03:03,490 --> 00:03:05,760
look up. And it will turn out that lookup will

54
00:03:05,760 --> 00:03:08,240
actually be helpful in defining a better version of add.
