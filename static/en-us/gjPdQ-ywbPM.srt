1
00:00:00,000 --> 00:00:02,000
Okay, so we're just playing in the browser,

2
00:00:02,000 --> 00:00:04,000
and we had a couple of annoyances.

3
00:00:04,000 --> 00:00:06,000
They were: We can't share the success link

4
00:00:06,000 --> 00:00:08,000
and we can't reload the page without an annoying message.

5
00:00:08,000 --> 00:00:12,000
The way we work around this issue is by using a redirect.

6
00:00:12,000 --> 00:00:15,000
Instead of rendering the result in the post,

7
00:00:15,000 --> 00:00:18,000
we send them to another page that says thanks.

8
00:00:18,000 --> 00:00:23,000
So remember I drew this picture before of you and the servers making requests,

9
00:00:23,000 --> 00:00:24,000
or you and your browser.

10
00:00:24,000 --> 00:00:31,000
We made that first request, the get request for the form, and then the server responded

11
00:00:31,000 --> 00:00:33,000
with the form HTML.

12
00:00:33,000 --> 00:00:37,000
You posted your answer, and then if you submitted something correct,

13
00:00:37,000 --> 00:00:41,000
the browser responded with the success message.

14
00:00:41,000 --> 00:00:44,000
Now, this seems simple and nice, but as we said,

15
00:00:44,000 --> 00:00:49,000
if you respond to a post with content you've got these two major limitations.

16
00:00:49,000 --> 00:00:52,000
The link doesn't share well, and you can't reload the page.

17
00:00:52,000 --> 00:00:59,000
Now imagine we weren't doing a contrived example like entering dates into text boxes.

18
00:00:59,000 --> 00:01:02,000
Instead we were adding a new blog post to our blog.

19
00:01:02,000 --> 00:01:05,000
We'd want to be able to see our blog post once we submit it.

20
00:01:05,000 --> 00:01:08,000
We want to be able to link to that blog post.

21
00:01:08,000 --> 00:01:12,000
We want to be able to reload that page without editing our blog post.

22
00:01:12,000 --> 00:01:16,000
Every time you post something to the server, the server has to do some work.

23
00:01:16,000 --> 00:01:20,000
We don't want the server to have to do that work of validating our date every time

24
00:01:20,000 --> 00:01:23,000
over and over just when we want to see our success message.

25
00:01:23,000 --> 00:01:28,000
So instead of returning the success HTML, we return a redirect.

26
00:01:28,000 --> 00:01:33,000
We'll send a redirect to go to a different URL, our success page,

27
00:01:33,000 --> 00:01:40,000
to which the server will respond with our success HTML.

28
00:01:40,000 --> 00:01:48,000
Now, you may think the old way had only 2 round trips: Get, post, answer.

29
00:01:48,000 --> 00:01:52,000
The new way has: Get, post, and get the success page.

30
00:01:52,000 --> 00:01:56,000
So that's three round trips, but we can avoid both of these issues.
