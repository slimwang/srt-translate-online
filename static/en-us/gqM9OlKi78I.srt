1
00:00:00,510 --> 00:00:04,760
Finally, let us discuss in arrow B based out of order execution processor,

2
00:00:04,760 --> 00:00:10,030
what really is out of order here? So this is our processor pipeline, lets say,

3
00:00:10,030 --> 00:00:14,860
this is the fetch stage, there is a decode stage, we issue, then we dispatch and

4
00:00:14,860 --> 00:00:17,920
then we have execution, and then the right of the result which is

5
00:00:17,920 --> 00:00:22,890
the broadcast we have and then finally the commit. So in this pipeline,

6
00:00:22,890 --> 00:00:27,360
if this was an out of order processor, keep in mind that not all of these stages

7
00:00:27,360 --> 00:00:33,510
are processing instructions out of order. In fact, from fetch up to issue,

8
00:00:33,510 --> 00:00:37,590
we are processing instructions in order. We have to fetch them in the order that

9
00:00:37,590 --> 00:00:41,200
they should appear in the program. We then decode them in the correct order, and

10
00:00:41,200 --> 00:00:45,390
we fetch them if you remember in order. This ensures that any dependencies we

11
00:00:45,390 --> 00:00:48,530
figure out here are the dependencies that are compatible with the original

12
00:00:48,530 --> 00:00:52,810
program order. Now that, we have issued instructions to reservation stations and

13
00:00:52,810 --> 00:00:56,340
they're waiting for execution, they're going to execute in,

14
00:00:56,340 --> 00:00:59,900
the order of data dependencies, not necessarily in program order. So

15
00:00:59,900 --> 00:01:05,090
the execution and writing of results, are happening out of order. And then,

16
00:01:05,090 --> 00:01:09,900
again, commit needs to do instructions in the proper program order because if

17
00:01:09,900 --> 00:01:13,160
you remember the order of committing is really the order in

18
00:01:13,160 --> 00:01:17,250
which we tell the outside world that we are finishing instructions. So,

19
00:01:17,250 --> 00:01:20,420
this has to happen in order to give the appearance that we're executing

20
00:01:20,420 --> 00:01:24,860
instructions in program order. So, when we have an out of order processor,

21
00:01:24,860 --> 00:01:30,760
it really is going many stages in order and only the execution and broadcast and

22
00:01:30,760 --> 00:01:34,600
things in between are happening out of order. So the dispatching, the execution,

23
00:01:34,600 --> 00:01:38,640
the, the writing of results, everything else is still in order. In contrast,

24
00:01:38,640 --> 00:01:42,590
what we would call an in-order processor, just as these in order too.

25
00:01:42,590 --> 00:01:45,240
But even an out of order proser does a lot of things in order.
