1
00:00:00,200 --> 00:00:02,040
So if I have this graph,

2
00:00:02,040 --> 00:00:06,660
segmenting the image is just
breaking the graph into segments.

3
00:00:06,660 --> 00:00:10,940
So here I'm showing you that I, I took
all those points I had before, and

4
00:00:10,940 --> 00:00:13,580
I broke this thing into three segments.

5
00:00:13,580 --> 00:00:17,480
So that would mean that there
were three regions in this image.

6
00:00:17,480 --> 00:00:20,880
And the idea is that what I want
to do is I want to delete links

7
00:00:20,880 --> 00:00:22,580
that are between the segments, right?

8
00:00:22,580 --> 00:00:26,240
So maybe there used to be a link that
connected this point to that point, and

9
00:00:26,240 --> 00:00:28,020
it's been broken, all right?

10
00:00:28,020 --> 00:00:30,970
So I'm going to delete links
that go between segments.

11
00:00:30,970 --> 00:00:33,180
And so,
which links should be easiest to break?

12
00:00:33,180 --> 00:00:36,330
Well, obviously those with
the lowest affinity, right?

13
00:00:36,330 --> 00:00:39,040
because if I break them they're saying,
you know, the blue pixel and

14
00:00:39,040 --> 00:00:43,090
the red pixel, which maybe have
great distance in my feature space.

15
00:00:43,090 --> 00:00:45,710
So, they have a very low
affinity between them.

16
00:00:45,710 --> 00:00:46,580
By the way, here's a,

17
00:00:46,580 --> 00:00:51,380
an actual example of segmenting this
tiger against the background, and

18
00:00:51,380 --> 00:00:55,980
you can see that it's got spatially
contiguous regions by, by, doing that.

19
00:00:55,980 --> 00:00:59,390
So, what I need to do is I need to
construct a distance function, such that

20
00:00:59,390 --> 00:01:04,330
similar pixels will end up being in the
same segments, if, if they're near by.

21
00:01:04,330 --> 00:01:05,720
And dissimilar pixels,

22
00:01:05,720 --> 00:01:08,740
ones that are very different,
will end up in different segments.
