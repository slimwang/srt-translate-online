1
00:00:00,350 --> 00:00:05,530
Recall that in one of our earlier lectures, we discussed memory consistency

2
00:00:05,530 --> 00:00:10,330
model and the relationship of memory consistency model to cache

3
00:00:10,330 --> 00:00:15,480
coherence, in the context of shared memory systems. Memory consistency model is

4
00:00:15,480 --> 00:00:20,510
a contract between the application programmer and the

5
00:00:20,510 --> 00:00:25,590
system. It answers the when question, that is, when a shared

6
00:00:25,590 --> 00:00:32,420
memory location is modified by one processor, when, that is how soon, that

7
00:00:32,420 --> 00:00:37,790
change is going to be made visible to other processes that have the same memory

8
00:00:37,790 --> 00:00:41,280
location in their respective private caches. That's

9
00:00:41,280 --> 00:00:43,620
the question that is being answered by

10
00:00:43,620 --> 00:00:47,220
the memory consistency model. Cache coherence, on

11
00:00:47,220 --> 00:00:51,230
the other hand, is answering the how question,

12
00:00:51,230 --> 00:00:57,470
that is, how is the system, by system we mean the system software plus the

13
00:00:57,470 --> 00:01:01,270
hardware working together, implementing the contract of

14
00:01:01,270 --> 00:01:04,160
the memory consistency model? In other words, the

15
00:01:04,160 --> 00:01:05,680
guarantee that has been made by the

16
00:01:05,680 --> 00:01:09,380
memory consistency model, to the application programmer has

17
00:01:09,380 --> 00:01:12,700
to be fulfilled by the cache coherence

18
00:01:12,700 --> 00:01:16,400
mechanism. So coming back to writing a parallel

19
00:01:16,400 --> 00:01:20,640
program, when accesses are made to the shared memory,

20
00:01:20,640 --> 00:01:25,490
the underlying coherence mechanism has to ensure that all

21
00:01:25,490 --> 00:01:29,390
the processes see the changes that are being made

22
00:01:29,390 --> 00:01:32,960
to shared memory, commensurate with the memory consistency model.
