1
00:00:00,260 --> 00:00:06,170
The benefits that Taylor eluded to included, include the fact that what we have

2
00:00:06,170 --> 00:00:11,730
done by documenting an architectural style is encode our experience on it.

3
00:00:13,310 --> 00:00:18,750
For example with the client server there are certain ways of, of dividing things

4
00:00:18,750 --> 00:00:23,630
up and, and connecting them together. That, work better than other ways.

5
00:00:23,630 --> 00:00:28,920
We also know, with client server what kinds of problems can arise and,

6
00:00:28,920 --> 00:00:33,470
how we can best cope with those. And having that knowledge then allows us to,

7
00:00:34,500 --> 00:00:37,920
reduce our overall development effort because we're not stumbling down

8
00:00:37,920 --> 00:00:42,080
blind alleys. Architectural styles can also be encoded into Standards.

9
00:00:43,260 --> 00:00:48,720
Standard sometimes call reference architectures. And those Standards can then

10
00:00:48,720 --> 00:00:52,920
support the validation process, the way that we check whether our architectural

11
00:00:52,920 --> 00:00:57,460
solution is, is a good one. Architectural styles can also support Reuse.

12
00:00:57,460 --> 00:01:01,960
The fact that there are, all kinds of, client server.

13
00:01:03,302 --> 00:01:08,842
Systems out there means we maybe able to make use of standard

14
00:01:08,842 --> 00:01:14,270
components such as [UNKNOWN] database server. And because different styles

15
00:01:16,060 --> 00:01:21,600
provide different ways of, of structuring the development process, we may even,

16
00:01:21,600 --> 00:01:27,450
even be able to. Use the, the style to guide us in,

17
00:01:27,450 --> 00:01:30,370
in what our groups should look like and the steps that they should take

18
00:01:30,370 --> 00:01:35,090
when validation can come and so on. What I'd like to do now is have a look at

19
00:01:35,090 --> 00:01:39,859
some of the different architectural styles that have arisen over the years
