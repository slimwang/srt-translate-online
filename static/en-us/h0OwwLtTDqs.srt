1
00:00:01,580 --> 00:00:03,250
Hey cool.
>> Hey what's going on man?

2
00:00:03,250 --> 00:00:07,230
>> So I found this stack overflow post,
that says if I change the syntax of my

3
00:00:07,230 --> 00:00:10,500
for loop, and use a pre-increment
over post-incrementor,

4
00:00:10,500 --> 00:00:13,360
I'll get like a hundred x
performance on my for loops.

5
00:00:13,360 --> 00:00:14,610
Pretty awesome yeah?

6
00:00:14,610 --> 00:00:16,040
>> Mm, that's not a thing, Chris.

7
00:00:16,040 --> 00:00:17,120
What do you mean?

8
00:00:17,120 --> 00:00:21,960
That seems really useful all I need to
do is plus plus i versus i plus plus,

9
00:00:21,960 --> 00:00:24,700
I mean, then I get a boost for
every loop I write.

10
00:00:24,700 --> 00:00:27,610
>> Chris you should probably stop now,
I mean we are recording, it's,

11
00:00:27,610 --> 00:00:28,660
it's not a thing.

12
00:00:28,660 --> 00:00:32,360
>> Jeez.
That's kind of harsh if you know better,

13
00:00:32,360 --> 00:00:33,304
why don't you show me then?

14
00:00:33,304 --> 00:00:34,708
>> Let me check this out.

15
00:00:38,520 --> 00:00:42,238
Okay, so here's the deal, you need to
remember that Java running on Android

16
00:00:42,238 --> 00:00:45,214
is effectively executing in
a virtual machine environment,

17
00:00:45,214 --> 00:00:48,760
which means there's lots and lots of
layers of complexity going on here,

18
00:00:48,760 --> 00:00:52,532
from the precompiler to the compiler
to the optimizer to the code itself,

19
00:00:52,532 --> 00:00:54,500
actually running on the device.

20
00:00:54,500 --> 00:00:56,810
What you're identifying here
is something that we call

21
00:00:56,810 --> 00:00:57,720
compute performance.

22
00:00:57,720 --> 00:01:02,386
>> So, like,
the performance of my computer?

23
00:01:02,386 --> 00:01:08,560
>> No, more like how the algorithms or
the computing processes are performing.

24
00:01:08,560 --> 00:01:11,660
Which has everything to do with how
the compiler is generating the code and

25
00:01:11,660 --> 00:01:14,950
how the virtual machine itself is
actually executing it on the hardware.

26
00:01:14,950 --> 00:01:19,050
See, what this post has identified
was a very, very specific instance

27
00:01:19,050 --> 00:01:23,870
where the compiler could make
a pre-fetching optimization on gigantic

28
00:01:23,870 --> 00:01:29,040
four loops where a collection class
has more than 20,000 elements in it.

29
00:01:29,040 --> 00:01:31,700
Effectively by changing
the syntax there for

30
00:01:31,700 --> 00:01:35,590
your incrementer it was able to hint to
the compiler that this particular type

31
00:01:35,590 --> 00:01:37,210
of optimization could actually be made.

32
00:01:37,210 --> 00:01:38,230
>> Totally.

33
00:01:38,230 --> 00:01:40,310
You know, I was hoping,
I could use it in general, though.

34
00:01:40,310 --> 00:01:43,390
>> Well, see, it's not that easy
when you actually want to get

35
00:01:43,390 --> 00:01:47,520
huge wins in computer performance
scenarios, it actually means

36
00:01:47,520 --> 00:01:50,670
understanding what each piece of code
is actually doing on the hardware.

37
00:01:50,670 --> 00:01:52,540
Which usually means, having to go and

38
00:01:52,540 --> 00:01:55,690
make small little changes
throughout your entire code base,

39
00:01:55,690 --> 00:01:57,825
just to get the performance wins
that you're actually looking for.

40
00:01:57,825 --> 00:02:02,770
>> Jeez, that sounds like a lot of work,
I'm already exhausted.

41
00:02:02,770 --> 00:02:04,830
>> Chris, my friend it's
the whole reason I'm bald.
