1
00:00:00,240 --> 00:00:03,130
Now that we have a better understanding of our variables, and

2
00:00:03,130 --> 00:00:06,530
the overall demand for diamonds, let's replot the data. This time

3
00:00:06,530 --> 00:00:09,070
we'll put price on a log10 scale, and here's what it

4
00:00:09,070 --> 00:00:11,860
looks like. This plot looks better than before. On the log

5
00:00:11,860 --> 00:00:14,830
scale, the prices look less dispersed at the high end of

6
00:00:14,830 --> 00:00:18,110
Carat size and price, but actually we can do better. Let's

7
00:00:18,110 --> 00:00:20,350
try using the cube root of Carat in light of our

8
00:00:20,350 --> 00:00:22,770
speculation about flaws being exponentially more

9
00:00:22,770 --> 00:00:24,860
likely in diamonds with more volume.

10
00:00:24,860 --> 00:00:27,640
Remember, volume is on a cubic scale. First, we need

11
00:00:27,640 --> 00:00:30,730
a function to transform the Carat variable. If you'd like to

12
00:00:30,730 --> 00:00:33,290
learn more about writing your own functions in R, check out

13
00:00:33,290 --> 00:00:35,830
the links in the instructor notes. This may seem like a

14
00:00:35,830 --> 00:00:38,840
lot of code, but really, there's only one new piece here.

15
00:00:38,840 --> 00:00:42,240
It's this cube root trans-function. It's a function that takes the

16
00:00:42,240 --> 00:00:46,100
cube root of any input variable, and it also has an

17
00:00:46,100 --> 00:00:49,950
inverse function to undo that operation, which we need to display

18
00:00:49,950 --> 00:00:52,310
the plot correctly. Then when we get to

19
00:00:52,310 --> 00:00:55,380
our actual ggplot command. What we'll do is we'll

20
00:00:55,380 --> 00:01:01,200
use the scale_x_continuous argument to transform the x

21
00:01:01,200 --> 00:01:04,810
axis with this cube root transformation function. Keep in

22
00:01:04,810 --> 00:01:07,634
mind we're also transforming the y axis with

23
00:01:07,634 --> 00:01:11,350
this log10 transformation that we discussed previously. And, let's

24
00:01:11,350 --> 00:01:13,080
see what this plot looks like. Taking a

25
00:01:13,080 --> 00:01:14,970
look at the plot, we can actually see that

26
00:01:14,970 --> 00:01:17,150
with these transformations that we used to get

27
00:01:17,150 --> 00:01:19,930
our data on this nice scale. Things look almost

28
00:01:19,930 --> 00:01:22,310
linear. We can now move forward and see

29
00:01:22,310 --> 00:01:24,930
about modelling our data using just a linear model.
