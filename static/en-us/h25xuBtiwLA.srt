1
00:00:00,370 --> 00:00:02,780
We are now ready to formally
define the Class P.

2
00:00:03,870 --> 00:00:08,571
Most precisely, P is the set of
languages recognized by an order n to

3
00:00:08,571 --> 00:00:12,955
the k deterministic Turing machine for
some natural number k.

4
00:00:12,955 --> 00:00:16,230
There are several important things
to note about this definition.

5
00:00:16,230 --> 00:00:19,260
First, is that P is a set of languages.

6
00:00:19,260 --> 00:00:22,720
Intuitively, we talk about
P as a set of problems, but

7
00:00:22,720 --> 00:00:26,360
to be rigorous, we have to ultimately
define it in terms of languages.

8
00:00:26,360 --> 00:00:29,030
A second point is
the word deterministic.

9
00:00:29,030 --> 00:00:33,220
We haven't seen a nondeterministic
Turing machine yet, but one is coming.

10
00:00:33,220 --> 00:00:36,640
Deterministic just means that
given a current state and

11
00:00:36,640 --> 00:00:41,040
tape symbol being read there's only one
transition for the machine to follow,

12
00:00:41,040 --> 00:00:45,440
but in order n to the k time Turing
machine here I mean, a Turing machine

13
00:00:45,440 --> 00:00:50,210
with running time order n to the k as
we defined the terms a minute ago.

14
00:00:50,210 --> 00:00:54,590
Perhaps the most interesting thing about
this definition is the choice of for

15
00:00:54,590 --> 00:00:57,000
any k in the natural numbers.

16
00:00:57,000 --> 00:00:58,780
Why is this the right definition?

17
00:00:58,780 --> 00:01:00,780
After all, if k is 100,

18
00:01:00,780 --> 00:01:03,360
then deciding the language
isn't tractable in practice.

19
00:01:04,800 --> 00:01:07,860
The answer is that,
the notion of the class P

20
00:01:07,860 --> 00:01:11,400
doesn't exactly capture what
is tractable in practice.

21
00:01:11,400 --> 00:01:14,230
It's not clear that any mathematical
definition would stand the test of

22
00:01:14,230 --> 00:01:17,770
time in this regard,
given how often computers change.

23
00:01:17,770 --> 00:01:19,680
Or how it could be relevant in so
many context.

24
00:01:20,700 --> 00:01:24,020
This choice however does have
some very nice properties.

25
00:01:24,020 --> 00:01:27,840
First, is that it matches tractability
better than one might think.

26
00:01:27,840 --> 00:01:31,570
In practice k is usually low for
polynomial algorithms and

27
00:01:31,570 --> 00:01:35,450
there are plenty of interesting
problems not known to be in P.

28
00:01:35,450 --> 00:01:39,290
Second, is that the definition is
robust to changes in the model.

29
00:01:39,290 --> 00:01:43,710
That is to say P is the same for
single tape, multitape machines,

30
00:01:43,710 --> 00:01:46,390
random access machines, and so forth.

31
00:01:46,390 --> 00:01:48,740
In fact, we pointed out
that the running times for

32
00:01:48,740 --> 00:01:52,900
each of those models are polynomially
related when we introduced them.

33
00:01:52,900 --> 00:01:57,820
Lastly, P has a nice property of closure
under the composition of algorithms.

34
00:01:57,820 --> 00:02:02,385
If one algorithm calls another
algorithm as a subroutine a polynomial

35
00:02:02,385 --> 00:02:06,329
number of times, and
that algorithm is still polynomial and

36
00:02:06,329 --> 00:02:08,282
the problem it solves is in P.

37
00:02:08,282 --> 00:02:12,404
In other words, if we do something
efficient a reasonably small number of

38
00:02:12,404 --> 00:02:16,300
times then the overall
solution will be efficient.

39
00:02:16,300 --> 00:02:18,880
P is exactly the smallest
class of problems

40
00:02:18,880 --> 00:02:22,640
containing linear time algorithms and
which is closed under composition.
