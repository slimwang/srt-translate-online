1
00:00:00,000 --> 00:00:04,000
Now, out of those many choices, I made a choice to say I'm going to represent

2
00:00:04,000 --> 00:00:09,000
as a tuple of (here, there, t),

3
00:00:09,000 --> 00:00:13,000
where "here" represents everything that's on this side,

4
00:00:13,000 --> 00:00:16,000
"there" represents everything that's on that side,

5
00:00:16,000 --> 00:00:20,000
and "t" is the total elapsed time since the start.

6
00:00:20,000 --> 00:00:26,000
I'm going to represent here and there with frozen sets, because those are hashable.

7
00:00:26,000 --> 00:00:33,000
So this collection here would be the frozen set consisting of {1, 2, 5, 10},

8
00:00:33,000 --> 00:00:40,000
and I'm going to just use the string "light" to represent the flashlight.

9
00:00:40,000 --> 00:00:44,000
There would be the empty frozen set.

10
00:00:44,000 --> 00:00:48,000
Now, consider this state here representing the start state.

11
00:00:48,000 --> 00:00:50,000
What are the successors of that state?

12
00:00:50,000 --> 00:00:52,000
Well, any one of the people could go across.

13
00:00:52,000 --> 00:00:54,000
They've got to bring the light with them.

14
00:00:54,000 --> 00:00:58,000
In the successor state, the light will definitely be there, and it will not be here.

15
00:00:58,000 --> 00:01:00,000
It can only be in one place.

16
00:01:00,000 --> 00:01:03,000
At least one of the people will be over there

17
00:01:03,000 --> 00:01:05,000
and possibly two of the people,

18
00:01:05,000 --> 00:01:09,000
so all combinations of sending either one person or two people to the other side,

19
00:01:09,000 --> 00:01:12,000
those will each be distinct successor states.

20
00:01:12,000 --> 00:01:18,000
Let's see--we've got 4 x 3 is 12, but order doesn't matter, so there's 6 of those.

21
00:01:18,000 --> 00:01:22,000
Then 4 more, so it looks like there should be 10 successor states.

22
00:01:22,000 --> 00:01:25,000
What I want you to do is write for me the successor function.

23
00:01:25,000 --> 00:01:29,000
We're calling it bsuccessors, because we already had a and we're on to b.

24
00:01:29,000 --> 00:01:32,000
Or b could stand for "bridge."

25
00:01:32,000 --> 00:01:39,000
Remember that a result of the successor function is the dictionary of state action pairs.

26
00:01:39,000 --> 00:01:42,000
A state is this (here, there, t) tuple.

27
00:01:42,000 --> 00:01:45,000
Here and there have to be frozen sets.

28
00:01:45,000 --> 00:01:50,000
The frozen sets contained people--1, 2, 5, and 10--

29
00:01:50,000 --> 00:01:55,000
and/or this light, indicated by the string "light."

30
00:01:55,000 --> 00:01:58,000
Show me the function that will generate all the successors.

31
00:01:58,000 --> 00:02:05,000
Here I've given you a hint of here's a way to break up the state into those three variables.

32
00:02:05,000 --> 00:02:10,000
Then put your code here.

33
00:02:10,000 --> 00:02:13,000
Oh, one more thing I forgot is what are the actions.

34
00:02:13,000 --> 00:02:20,000
Well, let's say that an action will be represented by the character string arrow going to the right

35
00:02:20,000 --> 00:02:23,000
if we're moving from here to there and an arrow going to the left

36
00:02:23,000 --> 99:59:59,999
if we're moving from there to here.
