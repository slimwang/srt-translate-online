1
00:00:00,000 --> 00:00:06,000
This question asks us to see whether new code that modifies our web crawler

2
00:00:06,000 --> 00:00:10,000
changes the way it behaves, and if so, how does it affect the run time?

3
00:00:10,000 --> 00:00:14,000
First let's figure out if the new code acts the same way

4
00:00:14,000 --> 00:00:17,000
or produces the same results as the old code.

5
00:00:17,000 --> 00:00:23,000
Looking just at add<u>to</u>index, we can see that it changes the structure of the index.

6
00:00:23,000 --> 00:00:27,000
In the end we're going to get an index that looks like this.

7
00:00:27,000 --> 00:00:31,000
This means that we might have the same keyword appear multiple times,

8
00:00:31,000 --> 00:00:36,000
but each time it'll appear it'll be with perhaps a different URL.

9
00:00:36,000 --> 00:00:38,000
Looking at the lookup procedure,

10
00:00:38,000 --> 00:00:42,000
it'll go through the entire index and every time it finds a keyword

11
00:00:42,000 --> 00:00:46,000
that matches the one it's looking for, it'll pin the URL to a result list.

12
00:00:46,000 --> 00:00:50,000
In the end, you'll get a list of all the URLs.

13
00:00:50,000 --> 00:00:53,000
In fact, it'll be the same list you would if you used the original add<u>to</u>index

14
00:00:53,000 --> 00:00:55,000
and lookup procedures.

15
00:00:55,000 --> 00:01:00,000
But now we must ask ourselves, how does this new code affect the run time,

16
00:01:00,000 --> 00:01:04,000
the speed at which add<u>to</u>index and lookup run?

17
00:01:04,000 --> 00:01:08,000
Before, add<u>to</u>index had to go through perhaps the entire index

18
00:01:08,000 --> 00:01:11,000
looking for the entry that corresponded to the keyword.

19
00:01:11,000 --> 00:01:16,000
But in this code all it has to do is append the new keyword and URL to the end.

20
00:01:16,000 --> 00:01:18,000
This is faster than searching through the index.

21
00:01:18,000 --> 00:01:21,000
Before, lookup would just go through the index

22
00:01:21,000 --> 00:01:24,000
until it found the keyword corresponding to this lookup.

23
00:01:24,000 --> 00:01:28,000
In the previous case, the lookup would stop as soon as it found the keyword.

24
00:01:28,000 --> 00:01:32,000
But now lookup has to go through the entire index no matter what

25
00:01:32,000 --> 00:01:34,000
because it doesn't know how many times the keyword appears,

26
00:01:34,000 --> 00:01:39,000
whereas before, all it had to do was find the one occurrence of the keyword.

27
00:01:39,000 --> 00:01:41,000
So in the end, all things considered,

28
00:01:41,000 --> 00:01:44,000
the behavior is the same, but add to index runs faster and lookup will run slower.
