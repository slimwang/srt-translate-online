1
00:00:00,310 --> 00:00:06,300
The APIs provided by LRVM, are designed to remove an important pin point for

2
00:00:06,300 --> 00:00:11,170
system developers, namely system crashes. We know,

3
00:00:11,170 --> 00:00:14,830
that system crashes can come from software errors

4
00:00:14,830 --> 00:00:20,080
as well as from power failure. That brings up an interesting thought experiment.

5
00:00:20,080 --> 00:00:25,520
Which is what we're going to discuss next. So how does LRVM do it? Well, it does

6
00:00:25,520 --> 00:00:27,920
it by providing transaction synaptics for

7
00:00:27,920 --> 00:00:31,430
persistent data structures. It calls itself lightweight

8
00:00:31,430 --> 00:00:34,890
since it eliminates all the usual heavyweight

9
00:00:34,890 --> 00:00:38,310
properties associated with transactions, which are usually

10
00:00:38,310 --> 00:00:41,270
called acid properties. And LRVM makes

11
00:00:41,270 --> 00:00:44,570
transactions light weight, for use precisely for

12
00:00:44,570 --> 00:00:47,580
the intended purpose which is recovery management.

13
00:00:47,580 --> 00:00:50,640
In LRVM, changes to virtual memory are

14
00:00:50,640 --> 00:00:53,750
written as re-do logs, at the end of

15
00:00:53,750 --> 00:00:56,500
a transaction. And these re-do logs are forced to

16
00:00:56,500 --> 00:00:58,680
the disk at the end of the transaction as

17
00:00:58,680 --> 00:01:02,195
common records Of changes made to virtual memory. And

18
00:01:02,195 --> 00:01:05,140
as it log force that happens at commit point

19
00:01:05,140 --> 00:01:07,755
is what is called a synchronist IO, because the

20
00:01:07,755 --> 00:01:10,850
application has to wait for the IO to complete

21
00:01:10,850 --> 00:01:16,000
before proceeding with further execution. So implementation, a precise

22
00:01:16,000 --> 00:01:21,870
implementation of the transaction semantics of LRVM requires a log force to the

23
00:01:21,870 --> 00:01:28,410
disk to make sure that the redo log that represents all of the changes made to

24
00:01:28,410 --> 00:01:31,660
virtual memory Within that critical section bound

25
00:01:31,660 --> 00:01:34,890
by, a begin transaction, end transaction is

26
00:01:34,890 --> 00:01:38,170
actually committed and persisted on the disk.

27
00:01:38,170 --> 00:01:41,720
It is precisely for this reason namely synchronous

28
00:01:41,720 --> 00:01:45,030
IO, that transactions are considered heavy weight,

29
00:01:45,030 --> 00:01:47,750
even though the synantics of transactions have

30
00:01:47,750 --> 00:01:51,490
been considerably reduced and made simpler in

31
00:01:51,490 --> 00:01:54,040
the design of LRVM. In other words,

32
00:01:54,040 --> 00:02:00,040
for a precise implementation of LRVM, at the commit point, it requires at least

33
00:02:00,040 --> 00:02:03,460
one synchronous disk I/O. The system design

34
00:02:03,460 --> 00:02:07,230
tend to avoid transaction despite the precise semantics

35
00:02:07,230 --> 00:02:10,630
of transaction due to the time penalty associated

36
00:02:10,630 --> 00:02:13,310
with disk I/O. If disk I/O can be

37
00:02:13,310 --> 00:02:16,370
eliminated, then transactions would be cheap. And if

38
00:02:16,370 --> 00:02:19,320
transactions become cheap then everyone will use it and

39
00:02:19,320 --> 00:02:22,250
life is good. Rio Vista, the lesson that

40
00:02:22,250 --> 00:02:25,290
we're going to review now, asks the question, "How

41
00:02:25,290 --> 00:02:28,380
can we eliminate synchronous disk I/O?" So in

42
00:02:28,380 --> 00:02:32,930
other words, Rio Vista is going towards a performance-conscious

43
00:02:32,930 --> 00:02:35,750
design and implementation of persistent memory

44
00:02:35,750 --> 00:02:38,420
starting from where LRVM left off.
