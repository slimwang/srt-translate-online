1
00:00:00,120 --> 00:00:02,990
Okay, let's talk about PyMongo. Now PyMongo is one of the

2
00:00:02,990 --> 00:00:07,200
MongoDB drivers. Or client libraries. And because Python is the programming

3
00:00:07,200 --> 00:00:11,050
language for this course, we'll be using the Python driver. You'll

4
00:00:11,050 --> 00:00:14,280
find that you have access to PyMongo in the IDE. Now one

5
00:00:14,280 --> 00:00:17,190
thing to keep in mind about PyMongo or any other MongoDB

6
00:00:17,190 --> 00:00:19,780
driver is that, their basic job is to maintain a connection to

7
00:00:19,780 --> 00:00:22,240
the database and to allow you to work in your language

8
00:00:22,240 --> 00:00:26,560
of choice and interact with your data in a very natural way.

9
00:00:26,560 --> 00:00:28,920
Now if you'd like to know about drivers for other languages

10
00:00:28,920 --> 00:00:32,640
I'd encourage you to visit api.mongodb.org where you can read about

11
00:00:32,640 --> 00:00:35,490
all supported drivers. Now before we dive in and look at

12
00:00:35,490 --> 00:00:38,160
an example I want to talk a little bit about the application

13
00:00:38,160 --> 00:00:40,800
architecture, just so you have that picture in your mind as

14
00:00:40,800 --> 00:00:42,840
we're working through the rest of the material in this lesson.

15
00:00:43,950 --> 00:00:46,610
Okay, so if you download MongoDB and run it on your

16
00:00:46,610 --> 00:00:49,080
local computer This picture basically represents

17
00:00:49,080 --> 00:00:51,610
the architecture. You'll start Mongo DB,

18
00:00:51,610 --> 00:00:54,420
and the demon that's running is Mongo D.

19
00:00:54,420 --> 00:00:57,780
And then you'll create a Python application that includes

20
00:00:57,780 --> 00:01:01,950
the PyMongo module. And using the PyMongo module,

21
00:01:01,950 --> 00:01:04,769
you can send requests, and receive responses from Mongo

22
00:01:04,769 --> 00:01:08,540
DB. PyMongo communicates with the database using what

23
00:01:08,540 --> 00:01:10,840
we call the wire protocol, and the data that's

24
00:01:10,840 --> 00:01:14,020
exchanged is in a format we call BSON.

25
00:01:14,020 --> 00:01:17,420
BSON is a binary encoding for JSON. If you

26
00:01:17,420 --> 00:01:20,050
Google for BSON, you'll easily find the spec.

27
00:01:20,050 --> 00:01:22,230
Okay, so let's look at an app. Okay. Here

28
00:01:22,230 --> 00:01:23,820
I'm going to use that example that we say

29
00:01:23,820 --> 00:01:26,760
before for the Tesla S but let's talk about

30
00:01:26,760 --> 00:01:30,560
the PyMongo components of this particular application. Here

31
00:01:30,560 --> 00:01:35,630
we're inputting the MongoClient class from the pymongo module.

32
00:01:35,630 --> 00:01:38,910
And then we're going to create a client object

33
00:01:38,910 --> 00:01:42,970
and note that here, we specify the connection string.

34
00:01:42,970 --> 00:01:44,400
We won't go into too much detail into this but

35
00:01:44,400 --> 00:01:47,370
essentially this will allow us to connect to Any MongoD

36
00:01:47,370 --> 00:01:51,430
instance that we have access to. Okay, here's the encoding

37
00:01:51,430 --> 00:01:55,250
of the Tesla as a Python dictionary, and then here what

38
00:01:55,250 --> 00:01:58,010
we're doing is specifying that we want to use the examples

39
00:01:58,010 --> 00:02:01,880
database, and what we want to do here is insert this document

40
00:02:01,880 --> 00:02:05,570
here. Finally, we're going to do a find query, and

41
00:02:05,570 --> 00:02:07,980
then for every document that we get back We're simply going

42
00:02:07,980 --> 00:02:10,940
to print that document out. Okay, now before we run

43
00:02:10,940 --> 00:02:13,090
this, I want to point out two things, one is that

44
00:02:13,090 --> 00:02:15,520
we're using the insert command in order to store this

45
00:02:15,520 --> 00:02:20,730
document in the autos collection for the examples database. Here

46
00:02:20,730 --> 00:02:23,530
we're using the find command, and find, when run this

47
00:02:23,530 --> 00:02:26,840
way, will simply give us back a cursor for all

48
00:02:26,840 --> 00:02:30,100
of the documents in, in this case, the autos collection.

49
00:02:30,100 --> 00:02:33,010
Whatever collection we specify here. Okay? And we'll go into more

50
00:02:33,010 --> 00:02:36,700
detail on these, later on in this lesson. So, let's run this.

51
00:02:38,970 --> 00:02:41,370
Okay, and we can see that what we got back and printed

52
00:02:41,370 --> 00:02:44,720
out was the one and only document that we had inserted into this

53
00:02:44,720 --> 00:02:48,190
collection. Brand new collection. When we inserted the document, that became the

54
00:02:48,190 --> 00:02:50,780
first document in the collection. And one thing I want to point out

55
00:02:50,780 --> 00:02:53,070
is that in addition to all of the fields we specified in

56
00:02:53,070 --> 00:02:57,690
our code, there is a new field, underscore ID that has this object

57
00:02:57,690 --> 00:03:00,650
ID value. Okay? That's a value that was added by the database

58
00:03:00,650 --> 00:03:04,900
and we'll talk a little bit later about exactly what this value represents.

59
00:03:04,900 --> 00:03:07,990
The short story is that MongoDB ensures that any

60
00:03:07,990 --> 00:03:11,420
document we insert can be uniquely identified by it's

61
00:03:11,420 --> 00:03:14,340
underscore id field. And if we don't specify a

62
00:03:14,340 --> 00:03:17,380
value for underscore id, mongoDB will create one for us.
