1
00:00:00,200 --> 00:00:04,460
You may have images that work fine on
a low-resolution desktop monitor but

2
00:00:04,460 --> 00:00:07,640
look terrible on a high DPI display.

3
00:00:07,640 --> 00:00:11,300
Not a problem, we'll just save
an image with larger dimensions.

4
00:00:11,300 --> 00:00:12,530
That wallaby's a lot happier now.

5
00:00:13,870 --> 00:00:16,620
Trouble is, we're now serving
a bigger image file to everyone,

6
00:00:16,620 --> 00:00:18,050
whether they need it or not.

7
00:00:18,050 --> 00:00:21,800
And that's going to result in a terrible
experience on a slow network,

8
00:00:21,800 --> 00:00:26,320
especially you know, on a smaller
screen with lower resolution.

9
00:00:26,320 --> 00:00:28,850
The problem with the plain
old image source

10
00:00:28,850 --> 00:00:33,030
attribute is that it only
gives one URL for one image.

11
00:00:33,030 --> 00:00:36,060
What if you want to provide
alternative files for the same image?

12
00:00:36,060 --> 00:00:39,440
So the browser can choose the best
option for the view port size and

13
00:00:39,440 --> 00:00:40,270
device capabilities.

14
00:00:41,420 --> 00:00:43,370
Source set to the rescue.

15
00:00:43,370 --> 00:00:47,190
Here we added a source set
attribute to our image element.

16
00:00:47,190 --> 00:00:50,650
The syntax here simply means
that the browser should choose

17
00:00:50,650 --> 00:00:54,950
the high resolution of wallaby_2x.jpg
for a higher DPI display, or

18
00:00:54,950 --> 00:00:59,770
the lower resolution of
wallaby_1x.jpg otherwise.

19
00:00:59,770 --> 00:01:04,680
The 1x, 2x syntax is called
a Pixel Density Descriptor.

20
00:01:04,680 --> 00:01:08,250
And if we check from the dev
tools using emulation mode for

21
00:01:08,250 --> 00:01:11,800
a 1x device, you'll see that only
the 1x image has been loaded.

22
00:01:12,890 --> 00:01:13,390
Nice wallaby.

23
00:01:14,730 --> 00:01:18,690
By the way, I've added a 1x
descriptor after the 1x image source,

24
00:01:18,690 --> 00:01:20,210
but that's the default.

25
00:01:20,210 --> 00:01:23,440
Different screens have different
pixel densities, more or

26
00:01:23,440 --> 00:01:27,270
less dots of color per square inch,
the, the physical pixels.

27
00:01:27,270 --> 00:01:30,410
And the more dots per inch,
the higher resolution the display and

28
00:01:30,410 --> 00:01:31,625
the greater the pixel density.

29
00:01:31,625 --> 00:01:37,490
But Standard laptop and desktop monitors
are regarded as being 1x displays,

30
00:01:37,490 --> 00:01:43,870
whereas devices such has high spec
laptops and phones can be 2x or more.

31
00:01:43,870 --> 00:01:48,040
Everyday, there are more and more new
screens with different pixel densities.

32
00:01:48,040 --> 00:01:50,180
You can check this from
the dev tools console,

33
00:01:50,180 --> 00:01:53,740
by looking at the device pixel ratio for
your display.

34
00:01:53,740 --> 00:01:58,920
Here, the device pixel ratio is 1.75 for
my monitor.

35
00:01:58,920 --> 00:02:02,960
And, now I'm using remote debugging for
my phone with the dev tools, and

36
00:02:02,960 --> 00:02:06,750
you can see our device picks
our ratio there, is three.

37
00:02:06,750 --> 00:02:08,680
You can find out more
about pixel density,

38
00:02:08,680 --> 00:02:10,330
by following the link below the video.

39
00:02:11,480 --> 00:02:15,010
What if the browser doesn't
support the source set attribute?

40
00:02:15,010 --> 00:02:17,780
That's not a problem,
the source set attribute is ignored, and

41
00:02:17,780 --> 00:02:21,960
the image is loaded in the usual
way using the source attribute.

42
00:02:21,960 --> 00:02:24,310
Here I'm opening the page in Firefox,

43
00:02:24,310 --> 00:02:26,930
where the source set attribute
is still behind the flag and

44
00:02:26,930 --> 00:02:31,360
you'll see the 1x version is downloaded
to default from the source attribute.

45
00:02:32,480 --> 00:02:35,360
Turn on the flag, reload and press that.

46
00:02:35,360 --> 00:02:37,900
You can see the source
set attribute in action.

47
00:02:39,110 --> 00:02:42,810
Source set can also be
used with width units.

48
00:02:42,810 --> 00:02:43,560
For a browser,

49
00:02:43,560 --> 00:02:47,410
there's a catch-22 when it comes to
choosing which image to download.

50
00:02:47,410 --> 00:02:50,570
The browser needs to know
the dimensions of each image, but

51
00:02:50,570 --> 00:02:55,160
it can't know that without
downloading each image to check.

52
00:02:55,160 --> 00:02:56,910
Until the mighty W unit.

53
00:02:58,080 --> 00:03:02,030
The W unit tells the browser
the width of each image.

54
00:03:02,030 --> 00:03:05,980
Thereby enabling the browser to
choose the right image to retrieve

55
00:03:05,980 --> 00:03:09,120
depending on the screen pixel
density and the viewport size.

56
00:03:10,150 --> 00:03:11,130
Think about it.

57
00:03:11,130 --> 00:03:15,600
If you have a browser
window sized at say 500

58
00:03:15,600 --> 00:03:20,431
pixels wide on a 2x display and
image 1000 pixels wide,

59
00:03:20,431 --> 00:03:25,140
that's 2 times 500 would be adequate for
any display size in that window.

60
00:03:26,690 --> 00:03:30,220
The point is that we're enabling
the browser to make the right choice

61
00:03:30,220 --> 00:03:32,010
of image since at runtime,

62
00:03:32,010 --> 00:03:37,240
the browser knows the screen size and
pixel density, but not the image size.

63
00:03:37,240 --> 00:03:40,390
Later, you'll see how to work
with image display sizes

64
00:03:40,390 --> 00:03:42,730
that are less then the full
width of the viewport.

65
00:03:42,730 --> 00:03:47,420
Now, you might be wondering,
why width and not height?

66
00:03:47,420 --> 00:03:50,150
Well, width covers most use cases.

67
00:03:50,150 --> 00:03:53,780
But there has been some discussion
of introducing an H unit.

68
00:03:53,780 --> 00:03:57,690
And for the responsive obsessives among
you, follow the link below the video.
