1
00:00:00,250 --> 00:00:05,380
Let's revisit the semantics of LRVM and what it does. So

2
00:00:05,380 --> 00:00:10,690
this is a time axis, the application when it calls the begin transaction

3
00:00:10,690 --> 00:00:15,940
primitive of LRVN. What LRVN does is it says,

4
00:00:15,940 --> 00:00:20,890
okay, the application is going to modify some portion of the memory.

5
00:00:20,890 --> 00:00:25,500
So let me create a memory copy of the old contents of

6
00:00:25,500 --> 00:00:27,980
the portion of the memory that this transaction

7
00:00:27,980 --> 00:00:30,310
is going to modify. And that's what is

8
00:00:30,310 --> 00:00:33,720
called the in-memory undo record of LRVM. In

9
00:00:33,720 --> 00:00:36,680
the body of the transaction the program is doing

10
00:00:36,680 --> 00:00:39,780
normal program writes and they are going into

11
00:00:39,780 --> 00:00:43,800
the memory. No problem with that because LRVM

12
00:00:43,800 --> 00:00:47,760
has the undo record already stashed away. So

13
00:00:47,760 --> 00:00:51,370
all of these are writes to normal memory and

14
00:00:51,370 --> 00:00:54,260
there is no interaction with LRVM during

15
00:00:54,260 --> 00:00:57,380
this portion of the transaction code. Then

16
00:00:57,380 --> 00:00:59,610
the application reaches the end transaction, makes

17
00:00:59,610 --> 00:01:03,490
the end transaction call to LRVM. At that

18
00:01:03,490 --> 00:01:09,690
point, LRVM is going to write a redo record onto the disk when the

19
00:01:09,690 --> 00:01:12,980
transaction commits, because end transaction is synonymous

20
00:01:12,980 --> 00:01:16,570
with commiting, so far as LRVM is concerned.

21
00:01:16,570 --> 00:01:21,600
And therefore, at this point, the changes that have been made to virtual memory

22
00:01:21,600 --> 00:01:28,270
are written out as a redo log record and forced to the disk by LRVM. We know

23
00:01:28,270 --> 00:01:32,450
disk I/O is slow and the more you do it, the slower will be the subsystem

24
00:01:32,450 --> 00:01:36,140
that is using these LRVM primitives, and that's

25
00:01:36,140 --> 00:01:42,150
why LRVM provides the no-flush option in transaction

26
00:01:42,150 --> 00:01:46,350
call, which allows an applicaiton to tell LRVM write

27
00:01:46,350 --> 00:01:48,500
it out to the disc but don't stop me

28
00:01:48,500 --> 00:01:51,680
from progressing further in my computation. In other words,

29
00:01:51,680 --> 00:01:56,400
the applicaiton is hoping that there won't be any failures

30
00:01:56,400 --> 00:01:58,905
that will result in all the changes that it

31
00:01:58,905 --> 00:02:02,190
recorded in memory not being forced to the disc. So

32
00:02:02,190 --> 00:02:04,460
the LRVM is going to write out the redo log

33
00:02:04,460 --> 00:02:07,270
as the background activity and the hope is that there

34
00:02:07,270 --> 00:02:11,380
won't be any system crash during the time that it takes for it to do. And this

35
00:02:11,380 --> 00:02:14,340
is what we called as the window of vulnerability

36
00:02:14,340 --> 00:02:17,150
when we talked about LRVM. So what the no

37
00:02:17,150 --> 00:02:21,610
flash option does is to increase the vulnerability

38
00:02:21,610 --> 00:02:24,550
of the system to power failures in favor of

39
00:02:24,550 --> 00:02:29,094
performance. And that's a calculated risk an application developer

40
00:02:29,094 --> 00:02:32,478
is taking if they specify no-flush optimization in the

41
00:02:32,478 --> 00:02:35,080
end transaction. So, on the other hand, if

42
00:02:35,080 --> 00:02:37,680
you are conservative then what you would do is

43
00:02:37,680 --> 00:02:41,410
you let the end transaction have the normal transaction

44
00:02:41,410 --> 00:02:45,680
semantic ,which to say that adding transaction force the

45
00:02:45,680 --> 00:02:49,030
write of the log into the disc to ensure

46
00:02:49,030 --> 00:02:51,130
that the log segment has been commmited to the

47
00:02:51,130 --> 00:02:54,400
disc. And only then allow the application to proceed

48
00:02:54,400 --> 00:02:57,440
further. And at this point, at the commit point,

49
00:02:57,440 --> 00:02:59,650
the other thing that LRVM would do is, in

50
00:02:59,650 --> 00:03:02,500
addition to forcing the log record to the disc,

51
00:03:02,500 --> 00:03:04,250
it will also get rid of the undo record

52
00:03:04,250 --> 00:03:07,370
because the undo record is no longer needed for

53
00:03:07,370 --> 00:03:11,740
this transaction since the transaction was successfully committed. And we know

54
00:03:11,740 --> 00:03:17,140
as a background activity what LRVM does is to update the

55
00:03:17,140 --> 00:03:22,550
original data segments with the changes that have been recorded in the redo logs

56
00:03:22,550 --> 00:03:26,210
because, as you recall, the data segment contains

57
00:03:26,210 --> 00:03:29,550
a persistent data which are being brought into memory

58
00:03:29,550 --> 00:03:33,370
and modified during this transaction. And those changes had

59
00:03:33,370 --> 00:03:35,700
to be eventually persistent. Right now, they're sitting in

60
00:03:35,700 --> 00:03:39,030
the redo log records and what the log truncation

61
00:03:39,030 --> 00:03:42,680
part of the elarvian library does is to read

62
00:03:42,680 --> 00:03:45,020
the redo log records and apply them to the

63
00:03:45,020 --> 00:03:47,680
data segment and get rid of the redo logs.

64
00:03:47,680 --> 00:03:50,320
So this is the log truncation or clean-up

65
00:03:50,320 --> 00:03:53,690
of the disk space that is done periodically by

66
00:03:53,690 --> 00:03:57,030
LRVM. Because in the absence of crashes you have

67
00:03:57,030 --> 00:03:59,060
to make sure that you clean up the disk

68
00:03:59,060 --> 00:04:01,050
every once in a while. So the upshot

69
00:04:01,050 --> 00:04:04,260
of LRVM implementation is there are three copies of

70
00:04:04,260 --> 00:04:08,700
the VM space, done by LRVM to manage persistence

71
00:04:08,700 --> 00:04:13,060
for recoverable objects. Of course, it optimizes log force

72
00:04:13,060 --> 00:04:16,839
by dealing them at transaction endpoint. But

73
00:04:16,839 --> 00:04:20,160
in implementing LRVM one of the biggest sources

74
00:04:20,160 --> 00:04:22,890
of vulnerability is power failure. Because if

75
00:04:22,890 --> 00:04:27,060
you, in fact, use at optimization to defer

76
00:04:27,060 --> 00:04:32,590
writing out the log record to the permanent storage, then all the work that

77
00:04:32,590 --> 00:04:38,170
you did in this transaction may actually be wasted if in fact there is a power

78
00:04:38,170 --> 00:04:41,380
failure before the log force happens. Now

79
00:04:41,380 --> 00:04:45,240
what does providing a battery-backed DRAM give you?
