1
00:00:00,220 --> 00:00:01,773
So we talked a little bit
about value iteration.

2
00:00:01,773 --> 00:00:06,648
And we said, that eventually,
it identifies an optimal policy and

3
00:00:06,648 --> 00:00:10,730
polynomial time,
in 1 over 1 minus gamma.

4
00:00:10,730 --> 00:00:13,630
And I pointed out that,
1 over 1 minus gamma isn't really

5
00:00:13,630 --> 00:00:16,690
a polynomial in the number of bits
that it takes to write down gamma.

6
00:00:16,690 --> 00:00:19,620
because you can, with every few bits,
specify a number that's very,

7
00:00:19,620 --> 00:00:23,300
very close to 1,
causing this value to explode.

8
00:00:23,300 --> 00:00:27,624
So, in fact, value iteration doesn't
give us a polynomial time algorithm for

9
00:00:27,624 --> 00:00:28,473
solving MDPs.

10
00:00:28,473 --> 00:00:32,473
There is only one way that we know
to solve MDPs in polynomial time and

11
00:00:32,473 --> 00:00:34,871
that is, [SOUND], Linear Programming.

12
00:00:34,871 --> 00:00:35,451
>> Okay.

13
00:00:35,451 --> 00:00:37,240
>> Do you know what
Linear Programming is?

14
00:00:37,240 --> 00:00:38,354
>> I'm going to say yes.

15
00:00:38,354 --> 00:00:39,000
>> All right.

16
00:00:39,000 --> 00:00:41,980
So it's optimization framework,
in which,

17
00:00:41,980 --> 00:00:45,260
you can give linear constraint
in a linear objective function.

18
00:00:45,260 --> 00:00:47,900
And in polynomial time,
as long as the number of variables and

19
00:00:47,900 --> 00:00:50,500
constraints is polynomial,
get a solution.

20
00:00:50,500 --> 00:00:52,060
>> That's exactly what
I was going to say.

21
00:00:52,060 --> 00:00:53,860
>> Yeah, well, this is why I
was going to say it for you.

22
00:00:53,860 --> 00:00:55,608
>> Thank you.
>> So if we're going to use this idea

23
00:00:55,608 --> 00:00:58,426
to solve Markov decision processes,
we need a way of

24
00:00:58,426 --> 00:01:02,027
encoding a Markov decision process
solution as a linear program.

25
00:01:02,027 --> 00:01:06,270
So we need to encode our
MDP as a linear program.

26
00:01:06,270 --> 00:01:08,628
So linear constraints and
a linear objective function.

27
00:01:08,628 --> 00:01:11,530
So how do we know how to solve a MDP?

28
00:01:11,530 --> 00:01:14,177
>> We just have to solve
the Bellman equation.

29
00:01:14,177 --> 00:01:14,757
>> Bellman Equation.

30
00:01:14,757 --> 00:01:16,388
Right.

31
00:01:16,388 --> 00:01:20,493
I can write the Bellman equation in
terms of the value function as a set of

32
00:01:20,493 --> 00:01:25,230
equations where the variables are the
value function that we're interested in.

33
00:01:25,230 --> 00:01:28,363
So for each state s,
we have a variable v sub s.

34
00:01:28,363 --> 00:01:32,658
And we relate the v sub s' through this
equation to the v sub s primes which

35
00:01:32,658 --> 00:01:36,473
are themselves just v sub s',
just ordered in a different way.

36
00:01:36,473 --> 00:01:39,020
And that seems really good, right?

37
00:01:39,020 --> 00:01:41,380
We have a set of constraints.

38
00:01:41,380 --> 00:01:43,930
And if we could just solve this set
of constraints, we'll be good to go.

39
00:01:43,930 --> 00:01:45,010
So are we done?

40
00:01:45,010 --> 00:01:47,812
Do we have a way of doing this with
linear programming directly from this

41
00:01:47,812 --> 00:01:48,380
expression?

42
00:01:48,380 --> 00:01:54,700
>> Not if max, unless max has become
linear since I last looked, no.

43
00:01:54,700 --> 00:01:57,060
>> Right, which they're not so much.

44
00:01:57,060 --> 00:02:01,070
Yeah, so since the max over
actions in not a linear operator,

45
00:02:01,070 --> 00:02:05,450
this isn't translatable directly
to a set of linear equations and

46
00:02:05,450 --> 00:02:07,110
a linear objective function.

47
00:02:07,110 --> 00:02:11,560
We have a system of non-linear
equations, but that's not so good.

48
00:02:11,560 --> 00:02:16,410
So, the cool thing about max is that
we can actually think about max as

49
00:02:16,410 --> 00:02:21,270
being specifiable in terms of
a set of linear constraints,

50
00:02:21,270 --> 00:02:23,820
and a linear objective function.

51
00:02:23,820 --> 00:02:24,970
Let's think of it this way.

52
00:02:24,970 --> 00:02:26,960
Let's say,
that we're trying to compute a max, and

53
00:02:26,960 --> 00:02:29,390
this is just as a simple
little concrete example.

54
00:02:29,390 --> 00:02:32,540
Here's a thing that we're
trying to compute the max of.

55
00:02:32,540 --> 00:02:34,850
And the max is going to be some value x.

56
00:02:34,850 --> 00:02:38,403
What is the relationship between x and
all these values?

57
00:02:38,403 --> 00:02:41,700
So what's the relationship between x and
-3?

58
00:02:41,700 --> 00:02:43,558
>> X is greater than -3.

59
00:02:43,558 --> 00:02:47,140
>> Greater than -3, or in general,
we could say greater than or equal to.

60
00:02:47,140 --> 00:02:49,184
>> Mm-hm, I knew that's
what you were going to say.

61
00:02:49,184 --> 00:02:51,961
>> Yeah, you know,
it's always nicer to have or equal to's,

62
00:02:51,961 --> 00:02:53,438
it's more inclusive that way.

63
00:02:53,438 --> 00:02:54,205
>> Mm-hm.

64
00:02:54,205 --> 00:02:56,131
>> And we can say the same
thing about 7, right?

65
00:02:56,131 --> 00:02:58,630
X is going to be greater than or
equal to 7.

66
00:02:58,630 --> 00:03:01,207
And x is going to be greater than or
equal to 2.

67
00:03:01,207 --> 00:03:03,297
And x is going to be greater than or
equal to 5.

68
00:03:03,297 --> 00:03:04,621
And how do we know this?

69
00:03:04,621 --> 00:03:06,432
Because it's the max of those.

70
00:03:06,432 --> 00:03:08,638
So it has to be at least as
big as any one of them, right?

71
00:03:08,638 --> 00:03:09,241
>> Right.

72
00:03:09,241 --> 00:03:11,029
By the way,
your bottom thing says equals.

73
00:03:11,029 --> 00:03:11,702
>> Greater than or equal to.

74
00:03:11,702 --> 00:03:12,237
>> Mm-hm.

75
00:03:12,237 --> 00:03:14,187
>> It could be equal to 5,
if I get rid of the 7.

76
00:03:14,187 --> 00:03:14,698
>> Yes.

77
00:03:14,698 --> 00:03:17,095
[LAUGH]
>> All right, so

78
00:03:17,095 --> 00:03:20,224
this is a set of constraints,
of inequality constraints.

79
00:03:20,224 --> 00:03:20,804
Right?

80
00:03:20,804 --> 00:03:22,314
So is it true that now,

81
00:03:22,314 --> 00:03:27,097
the solution to this set of inequality
constraints is exactly the max?

82
00:03:27,097 --> 00:03:28,142
>> No.

83
00:03:28,142 --> 00:03:29,001
>> And why is that?

84
00:03:29,001 --> 00:03:32,414
>> Because 9 is also greater than or
equal to all of those things.

85
00:03:32,414 --> 00:03:33,064
>> It is!

86
00:03:33,064 --> 00:03:35,339
And 9 is the max of these things.

87
00:03:35,339 --> 00:03:36,129
>> No.

88
00:03:36,129 --> 00:03:37,290
No, that's not quite true.

89
00:03:37,290 --> 00:03:37,801
>> No.

90
00:03:37,801 --> 00:03:38,706
So what do we have to say?

91
00:03:38,706 --> 00:03:41,570
We have to say that, it's bigger
than equal to all these things.

92
00:03:41,570 --> 00:03:45,290
And of all the things that are bigger
than equal to all these things,

93
00:03:45,290 --> 00:03:47,580
we want the smallest such x.

94
00:03:47,580 --> 00:03:50,296
We want the x that is the smallest
possible while still satisfying all of

95
00:03:50,296 --> 00:03:51,120
these constraints.

96
00:03:51,120 --> 00:03:53,535
In this case,
that's going to have to be 7.

97
00:03:53,535 --> 00:03:54,742
>> Right.

98
00:03:54,742 --> 00:03:56,919
>> Right, because 7 is bigger
than all the other ones, and

99
00:03:56,919 --> 00:03:59,456
you can't get any smaller
without getting smaller than 7.

100
00:03:59,456 --> 00:04:02,637
>> Right, and of course,
min is a linear operator so we're good.

101
00:04:02,637 --> 00:04:04,517
>> No, no, no,
min is an objective function.

102
00:04:04,517 --> 00:04:05,702
This is a linear objective function.

103
00:04:05,702 --> 00:04:07,096
This is okay.

104
00:04:07,096 --> 00:04:09,093
>> Good, good, good.

105
00:04:09,093 --> 00:04:10,601
>> That's what we are going to do.

106
00:04:10,601 --> 00:04:15,308
We are going to generalize this idea
to the equations in the Bellman

107
00:04:15,308 --> 00:04:17,589
equation in a very similar way.

108
00:04:17,589 --> 00:04:18,570
>> I look forward to it.
