1
00:00:00,012 --> 00:00:03,171
>> All right. So let's take a look at how this falls out. The drawSprite

2
00:00:03,171 --> 00:00:06,627
function is given a string representing the name of the loose asset that we'd

3
00:00:06,627 --> 00:00:10,031
like to draw. In order to draw it on the screen, the first thing we have to do

4
00:00:10,031 --> 00:00:13,606
is iterate through all of the sprite sheets that have already been loaded, and

5
00:00:13,606 --> 00:00:17,249
determine whether or not this sprite name exists on that sprite sheet. Now, to

6
00:00:17,249 --> 00:00:20,954
make this a little bit easier, we've actually abstracted out and created a new

7
00:00:20,954 --> 00:00:25,233
GetStats object on our spreadsheet. The getStats function will effectively take

8
00:00:25,233 --> 00:00:29,009
in a name, and walk through all of the sprites for the sheet to determine

9
00:00:29,009 --> 00:00:33,193
whether of not this sprite with that name exists on this sheet. If so, it will

10
00:00:33,193 --> 00:00:37,560
go ahead and return the sprite information, if not, will return no. Passing it,

11
00:00:37,560 --> 00:00:41,614
the sprite information from the sheet. The sheet itself as well as the position

12
00:00:41,614 --> 00:00:45,097
x and position y, passing it through. Now drawSpriteInternal is where all the

13
00:00:45,097 --> 00:00:48,510
magic happens. First we start at the top of it by defining a few sanity checks

14
00:00:48,510 --> 00:00:52,074
to make sure that someone else in the code base isn't calling this function with

15
00:00:52,074 --> 00:00:56,439
improper data. Next what we do is actually create a nice little variable that

16
00:00:56,439 --> 00:01:00,660
holds off the center x and center y translation value that we defined when we

17
00:01:00,660 --> 00:01:05,122
were loading our asset. Next we go to our version of draw image that has all the

18
00:01:05,122 --> 00:01:09,800
fancy perameters. From here, we define the source x, y, width and height values

19
00:01:09,800 --> 00:01:14,202
passed to us directly from the sprite object that was defined from our json

20
00:01:14,202 --> 00:01:18,555
atlas definition. The next 2 values is the, where we want to draw this sprite to

21
00:01:18,555 --> 00:01:22,638
on the destination canvas. And that's going to equal to the position x that

22
00:01:22,638 --> 00:01:26,952
we've been given by the calling function, as well as half x and half y. So that

23
00:01:26,952 --> 00:01:30,846
we can actually put the center of the Sprite, at the location that we're

24
00:01:30,846 --> 00:01:35,077
interested in drawing in, as opposed to the top-left corner. And, as we said

25
00:01:35,077 --> 00:01:39,365
before, the destination width and height should be equal to our source width and

26
00:01:39,365 --> 00:01:40,881
height in the sprite atlas.
