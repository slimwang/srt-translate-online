1
00:00:00,340 --> 00:00:05,020
And the last thing to do from this aggregation here, is to return some object

2
00:00:05,020 --> 00:00:09,710
which will then get stored in the final result returned from our rollup.

3
00:00:09,710 --> 00:00:12,870
And here, we simply returned the attendance, the x and the y,

4
00:00:12,870 --> 00:00:17,180
which correspond to the total, the center x and the center y that we computed.

5
00:00:18,430 --> 00:00:21,500
And again the last part of this, is to simply pass our

6
00:00:21,500 --> 00:00:26,620
data using the .entries function through all of these transforms.

7
00:00:26,620 --> 00:00:30,169
We put a debugger right after all of the nest function,

8
00:00:30,169 --> 00:00:34,735
we can then inspect both the input to the nest pipeline and the output.

9
00:00:34,735 --> 00:00:39,810
Again, we can examine what data is, before we pass it through nest,

10
00:00:39,810 --> 00:00:43,571
in this case, all the rows of our attendance data,

11
00:00:43,571 --> 00:00:47,348
which corresponds to an array of 836 elements.

12
00:00:47,348 --> 00:00:51,819
And if we examine what gets returned and store it in our nested array,

13
00:00:51,819 --> 00:00:56,984
you can see that nested is an array of objects, of length 20, which happens to

14
00:00:56,984 --> 00:01:03,070
correspond to the total number of World Cups that have been held over the years.

15
00:01:03,070 --> 00:01:07,040
And if we inspect each nested Object, you can see here,

16
00:01:07,040 --> 00:01:11,970
that it has a key corresponding to what we defined in our Key Function, or

17
00:01:11,970 --> 00:01:16,880
rather the year of the game, and it has a values Object which corresponds to

18
00:01:16,880 --> 00:01:20,628
what we returned from our rollup function.

19
00:01:20,628 --> 00:01:25,080
Which has the total attendance for the year, the x pixel coordinate and

20
00:01:25,080 --> 00:01:27,230
the y pixel coordinate.

21
00:01:27,230 --> 00:01:31,620
And while this may seem like a lot of data transformation work to be doing

22
00:01:31,620 --> 00:01:36,270
in our JavaScript and in d3, if you understand these types of grouping and

23
00:01:36,270 --> 00:01:42,230
aggregates, it allows you to create very powerful interactive graphics,

24
00:01:42,230 --> 00:01:46,690
where the data you load might have to take on many different forms depending on

25
00:01:46,690 --> 00:01:49,206
how your user interacts with your visualization.

26
00:01:49,206 --> 00:01:52,900
But, enough data munching in the browser, let's get back to our map.
