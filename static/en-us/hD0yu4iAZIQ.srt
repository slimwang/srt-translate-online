1
00:00:00,260 --> 00:00:02,580
Let's program one final turn machine.

2
00:00:02,580 --> 00:00:05,100
We're given a binary string,
and we want to accept

3
00:00:05,100 --> 00:00:09,440
if it has an equal number of 0's and
1's, and reject otherwise.

4
00:00:09,440 --> 00:00:10,800
This is going to be an exercise, but

5
00:00:10,800 --> 00:00:15,180
I'll recommend a strategy that leads
to a relatively small number of states.

6
00:00:15,180 --> 00:00:16,990
Starting from the initial configuration,

7
00:00:16,990 --> 00:00:18,790
we'll accept if the current
symbol is blank.

8
00:00:19,840 --> 00:00:22,670
An empty string has a balanced
number of 0s and 1s.

9
00:00:22,670 --> 00:00:26,980
Again, because this is an exercise,
we'll use the character b,

10
00:00:26,980 --> 00:00:29,750
instead of the square cup,
to indicate blank.

11
00:00:29,750 --> 00:00:34,020
And if the current symbol isn't blank
then we can replace it with a blank.

12
00:00:34,020 --> 00:00:36,260
Now, if that old symbol was a 1,

13
00:00:36,260 --> 00:00:40,520
then we move right until
we encounter the next 1.

14
00:00:40,520 --> 00:00:41,340
And we'll change it to an x.

15
00:00:41,340 --> 00:00:44,980
And in fact, if we find a 0,
we go hunting for a 1,

16
00:00:44,980 --> 00:00:49,730
and if we find a 1, then we want
to go hunting for the matching 0.

17
00:00:49,730 --> 00:00:53,600
These have the effect of cancelling
each other out, essentially.

18
00:00:53,600 --> 00:00:59,500
If we don't find a match for whichever
symbol we found here, then we reject.

19
00:00:59,500 --> 00:01:01,530
We found the blank, that means we
reached the end of the string.

20
00:01:02,560 --> 00:01:08,300
If we did find a match, however, then
we need to rewind to the next blank,

21
00:01:08,300 --> 00:01:10,710
that would be the one that
we over rode here, and

22
00:01:10,710 --> 00:01:14,470
change that to X to indicate
that we've crossed it off.

23
00:01:14,470 --> 00:01:18,900
Then we move right past all the xs and
then we're ready to repeat.

24
00:01:18,900 --> 00:01:22,200
Either finding a 0 (1) and
then hunting for its match.

25
00:01:23,400 --> 00:01:29,190
Let's consider the sequence of tape
values for the example input 00101.

26
00:01:29,190 --> 00:01:32,140
First, we blank out the first entry and

27
00:01:32,140 --> 00:01:35,360
then we go looking for
a 1 to match that 0.

28
00:01:35,360 --> 00:01:40,910
Once that is found, we rewind the tape
and mark off this blank here.

29
00:01:40,910 --> 00:01:45,258
And then we step forward until
the next x'd out symbol.

30
00:01:45,258 --> 00:01:49,190
That's a 0, so
we cross it off with a blank, and

31
00:01:49,190 --> 00:01:51,160
then we go look for
a 1 to cancel it out.

32
00:01:52,160 --> 00:01:53,680
And we find one here.

33
00:01:53,680 --> 00:01:57,950
Then, we rewind back to the blank,
cross it out, and

34
00:01:57,950 --> 00:02:00,680
then advance to the next
uncrossed character.

35
00:02:00,680 --> 00:02:04,180
We find this 0, blank it out,
and then we go looking for

36
00:02:04,180 --> 00:02:08,130
a 1, but we don't find one,
so we reject.

37
00:02:08,130 --> 00:02:09,650
This string is imbalanced.

38
00:02:09,650 --> 00:02:11,660
You may use this strategy,
or one of your own,

39
00:02:11,660 --> 00:02:14,760
to construct a turn machine
that decides this language.

40
00:02:14,760 --> 00:02:15,260
Good luck.
