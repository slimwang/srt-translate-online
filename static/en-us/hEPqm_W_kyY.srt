1
00:00:00,420 --> 00:00:02,890
Okay, square root was
intentionally simple here.

2
00:00:02,890 --> 00:00:06,100
Let's try now giving a precondition for
sort, okay?

3
00:00:06,100 --> 00:00:11,960
What do you think are the required
conditions in order for sort to execute?

4
00:00:11,960 --> 00:00:15,930
>> I guess depending on how you
might want to write your function,

5
00:00:17,170 --> 00:00:20,010
we should say something
about having an empty,

6
00:00:20,010 --> 00:00:24,050
we need a non-empty set
of a vector of integers.

7
00:00:24,050 --> 00:00:27,690
I guess you could have an empty set
of integers, or an empty vector and

8
00:00:27,690 --> 00:00:31,250
still have integers, but you wouldn't
get anything meaningful back.

9
00:00:31,250 --> 00:00:36,130
So it seems to kind of fall in the same
category with the negative number in our

10
00:00:36,130 --> 00:00:38,230
square root function, maybe.

11
00:00:39,800 --> 00:00:40,890
Does it matter?

12
00:00:40,890 --> 00:00:43,730
>> Okay, so
Jared mentioned a couple things here.

13
00:00:43,730 --> 00:00:46,790
One is he did say that

14
00:00:46,790 --> 00:00:50,450
it was important in our particular
case to deal with integers.

15
00:00:50,450 --> 00:00:55,260
And what we're going to do there
is we're going to say as far as

16
00:00:55,260 --> 00:00:58,690
our preconditions and post-conditions
are concerned, we're not going to be

17
00:00:58,690 --> 00:01:04,410
concerned with the data types of the
input arguments and the output results.

18
00:01:04,410 --> 00:01:07,040
We're going to assume that
the signature took care of that.

19
00:01:07,040 --> 00:01:11,210
And ultimately when
the program is turned into code

20
00:01:11,210 --> 00:01:15,760
the type checker on the compiler is
going to do that kind of checking, okay?

21
00:01:15,760 --> 00:01:20,050
So we're not going to include
in the precondition any

22
00:01:20,050 --> 00:01:23,520
statements about the types of things,
okay?

23
00:01:23,520 --> 00:01:26,570
And then the second thing
that Jared mentioned was,

24
00:01:28,070 --> 00:01:32,920
there was an uncertainty about what to
do in the case of an empty vector, okay?

25
00:01:32,920 --> 00:01:36,100
And he said if you give
in an empty vector,

26
00:01:36,100 --> 00:01:39,450
you wouldn't get any
meaningful results back.

27
00:01:39,450 --> 00:01:42,290
But I would come back and say, well,

28
00:01:42,290 --> 00:01:44,389
isn't the sort of an empty
vector an empty vector?

29
00:01:45,720 --> 00:01:46,380
>> It is.

30
00:01:46,380 --> 00:01:49,240
>> Okay, so
it's a meaningful result there.

31
00:01:49,240 --> 00:01:52,890
Now we could have a precondition that
said the length is greater than or

32
00:01:52,890 --> 00:01:54,240
equal to one.

33
00:01:54,240 --> 00:01:56,410
And we have a perfectly
good sort routine there.

34
00:01:56,410 --> 00:01:59,140
But we can stretch it,
make it a little bit more general,

35
00:01:59,140 --> 00:02:01,429
by saying that the sort of an empty
vector is an empty vector.

36
00:02:02,880 --> 00:02:07,730
And of course, all of us are computer
scientists, and as such we

37
00:02:07,730 --> 00:02:12,470
like to have general solutions that work
in as many cases as we can deal with.

38
00:02:12,470 --> 00:02:15,980
So in this case we're going to go with
the fact that we're going to specify

39
00:02:15,980 --> 00:02:20,790
something that will work on an empty
vector and produce an empty result.

40
00:02:20,790 --> 00:02:24,268
So when you factor all those things in,
what's the precondition of sort?

41
00:02:24,268 --> 00:02:32,470
>> Okay, so x must be a vector, and-
>> But

42
00:02:32,470 --> 00:02:33,960
that the compiler's
going to take care of.

43
00:02:33,960 --> 00:02:35,450
We're not worried about that.

44
00:02:35,450 --> 00:02:37,560
>> Right, okay.

45
00:02:37,560 --> 00:02:38,190
>> Okay?

46
00:02:38,190 --> 00:02:40,410
What are the conditions
on x that must hold.

47
00:02:41,580 --> 00:02:43,260
>> I don't know if there are any.

48
00:02:43,260 --> 00:02:43,980
>> That's right.

49
00:02:43,980 --> 00:02:48,380
And if we are not concerned about
the type checking parts of things,

50
00:02:48,380 --> 00:02:53,236
then any input vector of integers
sort should be able to deal with.

51
00:02:53,236 --> 00:02:56,110
So in this case there
is no precondition, or

52
00:02:56,110 --> 00:02:58,010
we could also say
the precondition is true.

53
00:02:58,010 --> 00:03:00,140
That is, the precondition always holds.
