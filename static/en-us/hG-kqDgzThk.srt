1
00:00:00,420 --> 00:00:03,800
If you can add to images, you can subtract them as well.

2
00:00:03,800 --> 00:00:08,380
The difference between two images is simply one image minus the other.

3
00:00:08,380 --> 00:00:11,510
It might be hard to understand at first whatâ€™s going on.

4
00:00:11,510 --> 00:00:14,710
Greater values in the difference image signify greater

5
00:00:14,710 --> 00:00:17,120
difference between the two images.

6
00:00:17,120 --> 00:00:21,760
Brighter areas in this result indicate where the two images differ more.

7
00:00:21,760 --> 00:00:25,210
Note that this is dolphin minus bicycle.

8
00:00:25,210 --> 00:00:26,620
Here the order mattered.

9
00:00:26,620 --> 00:00:29,630
Bicycle minus dolphin gives us a different result.

10
00:00:30,710 --> 00:00:33,790
This makes sense, as what the difference operation is

11
00:00:33,790 --> 00:00:39,010
doing is simply subtracting pixels in corresponding locations.

12
00:00:39,010 --> 00:00:41,320
If two such pixel values are a and

13
00:00:41,320 --> 00:00:45,870
b, then a minus b is different from b minus a.

14
00:00:45,870 --> 00:00:49,370
But when thinking about the difference between two images,

15
00:00:49,370 --> 00:00:53,660
we often don't care about which one is greater, and which one is less?

16
00:00:54,700 --> 00:00:58,830
Note that b minus a is simply a minus b negated.

17
00:00:58,830 --> 00:01:01,960
When thinking about the difference between two images,

18
00:01:01,960 --> 00:01:07,700
we often don't care about the sign of this difference, only the magnitude.

19
00:01:07,700 --> 00:01:11,359
That is, we're interested in the absolute difference between two images.

20
00:01:12,730 --> 00:01:16,360
For that you use the Octave ABS, or ABS function.

21
00:01:17,690 --> 00:01:19,480
Let's see how different the two results are.

22
00:01:21,030 --> 00:01:22,290
Wait a second.

23
00:01:22,290 --> 00:01:24,040
These two don't look different.

24
00:01:24,040 --> 00:01:26,630
In fact, they're exactly the same.

25
00:01:26,630 --> 00:01:27,870
What's going on?

26
00:01:27,870 --> 00:01:29,930
Let's take a closer look at our code.

27
00:01:29,930 --> 00:01:32,070
Especially this line.

28
00:01:32,070 --> 00:01:40,200
Let's say two values being subtracted are 20 from bicycle and 56 from dolphin.

29
00:01:40,200 --> 00:01:43,490
Theoretically the result should be minus 36.

30
00:01:43,490 --> 00:01:45,710
But remember uint8?

31
00:01:45,710 --> 00:01:50,600
These images can only represent numbers between zero and 255.

32
00:01:50,600 --> 00:01:52,080
So what happens here?

33
00:01:52,080 --> 00:01:54,010
It gets truncated to zero.

34
00:01:54,010 --> 00:01:57,420
Notice that even in the absolute difference case,

35
00:01:57,420 --> 00:02:00,390
the subtraction is performed first.

36
00:02:00,390 --> 00:02:04,050
This intermediate result is the same as the original difference.

37
00:02:05,240 --> 00:02:08,800
The numbers here are already between zero and 255.

38
00:02:08,800 --> 00:02:13,489
So the absolute value operator doesn't make any difference.

39
00:02:14,700 --> 00:02:16,260
So what can we do about this.
