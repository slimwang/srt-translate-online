1
00:00:00,670 --> 00:00:04,070
To do this, we'll need to add a counter. The counter will be incremented every

2
00:00:04,070 --> 00:00:07,670
time you look at a word, not only when we find a long word, because we want to

3
00:00:07,670 --> 00:00:12,940
count how many short words come before the long word. Let's try to hand trace a

4
00:00:12,940 --> 00:00:15,960
little bit and see if this would work. If the first word is longer than nine

5
00:00:15,960 --> 00:00:20,514
characters, that would mean we would want to return a position of zero. So we

6
00:00:20,514 --> 00:00:24,210
would go into the loop, we would find the word, we would go into the if

7
00:00:24,210 --> 00:00:30,146
statement because the word length would be longer than nine. We would mark the

8
00:00:30,146 --> 00:00:34,199
word as found. And then we would increment position to one. Okay, that's not

9
00:00:34,199 --> 00:00:38,388
quite right, so, maybe this we'll need to start at negative one. So that'll fix

10
00:00:38,388 --> 00:00:41,970
it for the case where the first word is long. What if the first word is short,

11
00:00:41,970 --> 00:00:47,411
and the second word is long? We'll start with position as -1, go into the while

12
00:00:47,411 --> 00:00:53,157
loop. There are more words, and it's not found yet. We read the word. The word

13
00:00:53,157 --> 00:00:58,470
is short, so we skip past the if statement and increment the position to zero.

14
00:00:58,470 --> 00:01:01,670
Now we go back into the loop. There are more words, and we still haven't found

15
00:01:01,670 --> 00:01:05,883
it. We read the second word, which is long so we go into the if statement, set

16
00:01:05,883 --> 00:01:11,488
longWord to be the word that we just read, and say that we found it. Then

17
00:01:11,488 --> 00:01:15,457
update the position which was previously zero, so now it'll be one, and then

18
00:01:15,457 --> 00:01:18,503
get back to the while loop. But we

19
00:01:18,503 --> 00:01:19,008
[UNKNOWN]

20
00:01:19,008 --> 00:01:23,584
found so we break out, this should work, but I forgot to print it. Alright it

21
00:01:23,584 --> 00:01:27,056
looks like the first long word in Alice in Wonderland is Adventures and its

22
00:01:27,056 --> 00:01:32,001
position is one. Let's compare this to the text. It looks like Adventures in

23
00:01:32,001 --> 00:01:35,535
position one and it's no wonder it would be related to the book, it's part of

24
00:01:35,535 --> 00:01:37,359
the title.
