1
00:00:00,000 --> 00:00:02,000
Here's the answer to our programming exercise.

2
00:00:02,000 --> 00:00:06,000
We set up an index, I, which we let run over all lines.

3
00:00:06,000 --> 00:00:12,000
In the coverage array, now I is running from 0 to the number of lines minus 1.

4
00:00:12,000 --> 00:00:16,000
However, in coverage, lines are started with 1 and not with 0.

5
00:00:16,000 --> 00:00:21,000
So we check whether I + 1 is in the set of lines covered

6
00:00:21,000 --> 00:00:23,000
for that specific file name.

7
00:00:23,000 --> 00:00:27,000
If the line is in the set, then we print out a star followed by the line.

8
00:00:27,000 --> 00:00:29,000
Since the line already includes new line characters,

9
00:00:29,000 --> 00:00:32,000
we omit this by adding another comma at the end.

10
00:00:32,000 --> 00:00:36,000
If the line is not covered, then we output a blank in front of the line.

11
00:00:36,000 --> 00:00:41,000
Let's see whether we get a nice listing together with the covered lines.

12
00:00:41,000 --> 00:00:45,000
Unfortunately, our web page IDE strips away all leading blanks.

13
00:00:45,000 --> 00:00:50,000
But what we see still is the executed lines prefixed by stars

14
00:00:50,000 --> 00:00:52,000
and the nonexecuted lines which have no such prefix.

15
00:00:52,000 --> 00:00:55,000
Again we can see that we do have a number of lines

16
00:00:55,000 --> 00:00:57,000
that are not executed at all.

17
00:00:57,000 --> 00:01:01,000
That is, for this particular input, foo, without HTML markup.

18
00:01:01,000 --> 00:01:06,000
A coverage tool such as this one can be very helpful in debugging,

19
00:01:06,000 --> 00:01:08,000
as it is in testing.

20
00:01:08,000 --> 00:01:13,000
In testing, you'd like to come up with tests that cover as many execution features as possible.

21
00:01:13,000 --> 00:01:17,000
So if you see, for instance, that what we have executed so far

22
00:01:17,000 --> 00:01:19,000
does not cover these lines,

23
00:01:19,000 --> 00:01:22,000
you may wish to come up with additional test cases.

24
00:01:22,000 --> 00:01:27,000
Better coverage tools would also count the number of times a line has been executed

25
00:01:27,000 --> 00:01:31,000
or save coverage that has been achieved so far in a file

26
00:01:31,000 --> 00:01:36,000
and thus allow for accumulating coverage over multiple runs with different inputs.

27
00:01:36,000 --> 00:01:41,000
For now, however, we're going to use the computed coverage for debugging purposes.

28
00:01:41,000 --> 00:01:43,000
Namely, to find lines whose execution correlate with failure.
