1
00:00:00,480 --> 00:00:03,750
You've seen how to create
objects using the Unity Editor.

2
00:00:03,750 --> 00:00:07,140
Now let's learn how to create
new 3D objects using code.

3
00:00:07,140 --> 00:00:11,480
This is called instanciating an object
and it's called that because,

4
00:00:11,480 --> 00:00:13,010
you're creating a new
instances something.

5
00:00:14,040 --> 00:00:18,050
Okay, let's load up Unity and
create a new project.

6
00:00:18,050 --> 00:00:21,670
First, create a new script
called object maker.

7
00:00:21,670 --> 00:00:24,600
This script is going to
make new objects for us.

8
00:00:24,600 --> 00:00:26,480
Let's open up this script and
add some code.

9
00:00:27,730 --> 00:00:30,990
We want to create an object
right when the game starts.

10
00:00:30,990 --> 00:00:35,380
So, we know we want to put
some code in the start method.

11
00:00:35,380 --> 00:00:39,460
Now, we want to instantiate an object,
but which object?

12
00:00:39,460 --> 00:00:41,390
There are many ways to do it.

13
00:00:41,390 --> 00:00:45,150
For now, let's try to do
this as simply as possible.

14
00:00:45,150 --> 00:00:47,740
We're going to use something
called a reference.

15
00:00:47,740 --> 00:00:51,500
References allow you to pass objects and
components into a script and

16
00:00:51,500 --> 00:00:51,940
control them.

17
00:00:53,370 --> 00:00:56,090
In this case, we're going to
use a reference to determine

18
00:00:56,090 --> 00:00:57,640
which kind of object to create.

19
00:00:58,810 --> 00:01:01,510
You're basically saying,
using the Unity Editor,

20
00:01:01,510 --> 00:01:03,949
I'm going to specify which
object I want to create.

21
00:01:05,090 --> 00:01:07,410
Above the start method,
type the following code.

22
00:01:08,600 --> 00:01:10,250
We'll break this down in just a second.

23
00:01:10,250 --> 00:01:13,940
But first, save your script and
go back to the Unity Editor.

24
00:01:13,940 --> 00:01:19,390
In the editor, create an empty game
object, and call it my object maker.

25
00:01:19,390 --> 00:01:23,590
Then drag and
drop your object maker script onto it.

26
00:01:23,590 --> 00:01:26,270
Notice the little field
called object to create.

27
00:01:26,270 --> 00:01:29,780
This the type of object that
will be created by the script.

28
00:01:29,780 --> 00:01:31,525
Let's go ahead, and fill it in.

29
00:01:31,525 --> 00:01:35,280
Create a new cube, and
call it my cube, great.

30
00:01:35,280 --> 00:01:38,040
Now, drag and drop that cube
into the object create field.

31
00:01:39,370 --> 00:01:42,390
Cool, you just assigned
your first reference.

32
00:01:42,390 --> 00:01:46,060
References are often the best way
to control objects using code.

33
00:01:46,060 --> 00:01:48,190
They're fast, easy, and configurable.

34
00:01:49,200 --> 00:01:51,560
Okay, now let's hope
back into the code and

35
00:01:51,560 --> 00:01:53,770
break down the command we just wrote.

36
00:01:53,770 --> 00:01:55,830
Okay, the first part is public.

37
00:01:57,210 --> 00:02:00,660
This part makes sure that
the reference shows up in the editor.

38
00:02:00,660 --> 00:02:02,760
If you leave it out,
your code will work.

39
00:02:02,760 --> 00:02:04,920
But you won't see the slot,
in the editor and that means,

40
00:02:04,920 --> 00:02:06,610
you won't be able to drag and
drop objects.

41
00:02:07,870 --> 00:02:10,600
Okay, the second part is, game object.

42
00:02:11,710 --> 00:02:13,480
This is called a data type.

43
00:02:13,480 --> 00:02:16,320
And it tells Unity,
what kind of reference you want.

44
00:02:16,320 --> 00:02:17,760
In this case, you'll be dragging and

45
00:02:17,760 --> 00:02:21,140
dropping game objects into the script,
like our cube.

46
00:02:21,140 --> 00:02:24,920
The data type could also be a number,
a word, or all kinds of other things.

47
00:02:24,920 --> 00:02:26,723
[BLANK_AUDIO]

48
00:02:26,723 --> 00:02:28,830
And then lastly, object to create.

49
00:02:28,830 --> 00:02:33,650
And this is just the name of the
reference, it can be anything you want.

50
00:02:33,650 --> 00:02:37,190
Notice how the first
letter is lowercase and

51
00:02:37,190 --> 00:02:40,750
then every subsequent new
word has an uppercase letter?

52
00:02:40,750 --> 00:02:45,060
This is called CamelCase and
it's the preferred style for

53
00:02:45,060 --> 00:02:49,216
naming variables and
unity c-sharp programming.

54
00:02:49,216 --> 00:02:52,670
Lastly, the semicolon at the end just
tells unity that you're done with your

55
00:02:52,670 --> 00:02:53,130
instruction.

56
00:02:54,320 --> 00:02:57,110
Okay, now you know how
to setup a reference.

57
00:02:57,110 --> 00:03:00,860
And the next step is to actually create
an object based on this reference.

58
00:03:00,860 --> 00:03:01,530
Let's do that now.
