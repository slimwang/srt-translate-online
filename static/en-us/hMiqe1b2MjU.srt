1
00:00:00,140 --> 00:00:03,680
Let's look at the solution
to our block size quiz.

2
00:00:03,680 --> 00:00:08,650
We have a 32 kilobyte cache,
with 64 byte block size.

3
00:00:08,650 --> 00:00:11,970
And the program that
accesses N variables,

4
00:00:11,970 --> 00:00:14,160
that have lots of temporal locality.

5
00:00:14,160 --> 00:00:19,130
Meaning each of these variables is
accessed often in the program, but

6
00:00:19,130 --> 00:00:23,260
no spatial locality, meaning they're
nowhere close to each other.

7
00:00:23,260 --> 00:00:27,220
The question is what is the largest N,
the number of these variables,

8
00:00:27,220 --> 00:00:29,580
that still results in a high hit rate?

9
00:00:29,580 --> 00:00:35,090
Now X1, when we bring it into the cache,
we will bring an entire

10
00:00:35,090 --> 00:00:40,120
block worth of stuff around it, and
because there is no spatial locality,

11
00:00:40,120 --> 00:00:45,190
that means that none of the other
variables will be in that block.

12
00:00:45,190 --> 00:00:50,120
When we access X2, same thing,
we will bring 64 bytes worth of stuff

13
00:00:50,120 --> 00:00:52,470
that doesn't include any
of the other variables.

14
00:00:52,470 --> 00:00:55,000
So every time we access
one of these variables,

15
00:00:55,000 --> 00:00:58,770
we will need 64 bytes worth
of space in the cache.

16
00:00:58,770 --> 00:01:02,380
If we want to have a high hit rate,
because these variables have lots of

17
00:01:02,380 --> 00:01:06,660
temporal locality, we want all
of them to remain in the cache.

18
00:01:06,660 --> 00:01:09,307
That is,
we want all of them to fit in the cache.

19
00:01:09,307 --> 00:01:13,918
So the largest N that still results
in a high hit rate Is how many

20
00:01:13,918 --> 00:01:16,947
blocks can we fit in our cache, really?

21
00:01:16,947 --> 00:01:21,876
It's a 32 kB cache,
there are 64 byte blocks,

22
00:01:21,876 --> 00:01:26,691
how many blocks do we have,
so the answer is 32 kB

23
00:01:26,691 --> 00:01:31,300
divided by 64 bytes, which gives us 512.

24
00:01:31,300 --> 00:01:32,770
So the answer here is 512.

25
00:01:32,770 --> 00:01:38,100
If we have 512, or fewer variables,

26
00:01:38,100 --> 00:01:42,990
then the fact that each one of them
has its own cache block in the cache,

27
00:01:42,990 --> 00:01:47,630
although the variable is probably only 4
bytes in size, is not going to hurt us

28
00:01:47,630 --> 00:01:53,830
in terms of hit rate, but
if we have more than 512 variables.

29
00:01:53,830 --> 00:01:58,290
Then even though there is
plenty of space in the cache,

30
00:01:58,290 --> 00:02:00,170
if it's four byte variables,

31
00:02:00,170 --> 00:02:05,980
512 variables is two kilobytes worth
of actual stuff that we are using.

32
00:02:05,980 --> 00:02:07,990
The block is much larger than that, but

33
00:02:07,990 --> 00:02:11,850
because we are fetching an entire
block when we have a miss.

34
00:02:11,850 --> 00:02:16,180
We will not have a good hit rate if we
have more than 512 of these variables.

35
00:02:16,180 --> 00:02:20,710
In order to be able to have more
variables than this, we really need them

36
00:02:20,710 --> 00:02:24,110
to be close to each other, so that we
can benefit from spacial locality.

37
00:02:24,110 --> 00:02:26,310
Meaning that a block we fetch for

38
00:02:26,310 --> 00:02:29,590
one variable needs to include
some of the other variables.
