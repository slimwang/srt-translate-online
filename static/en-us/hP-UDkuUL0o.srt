1
00:00:00,000 --> 00:00:04,000
For this question you're asked to modify the compute ranks code

2
00:00:04,000 --> 00:00:10,000
in order to take into consideration whether links are reciprocal or not.

3
00:00:10,000 --> 00:00:16,000
What we want to know is is aÃ¢ÂÂc a reciprocal link?

4
00:00:16,000 --> 00:00:25,000
It's a reciprocal link if there is a path from c back to a of at most length k

5
00:00:25,000 --> 00:00:28,000
where k is a number that's given to us.

6
00:00:28,000 --> 00:00:35,000
If there is a path back then we won't include a in the calculation for c's rank.

7
00:00:35,000 --> 00:00:39,000
I'm going to look at values of k-- k = 0.

8
00:00:39,000 --> 00:00:43,000
I'm going to ask is aÃ¢ÂÂc reciprocal?

9
00:00:43,000 --> 00:00:51,000
Then from that I'll be able to tell whether to include a or not in the calculation of c's rank.

10
00:00:51,000 --> 00:00:55,000
This is the link we're looking at.

11
00:00:55,000 --> 00:01:03,000
If k = 0 the only links that are excluded are the self links--link to the page itself.

12
00:01:03,000 --> 00:01:09,000
So aÃ¢ÂÂc is not reciprocal in this case, and we should include a in c's calculation.

13
00:01:09,000 --> 00:01:18,000
If k = 1, we're looking to see if there is a direct link back from c to a, and there isn't.

14
00:01:18,000 --> 00:01:22,000
So a Ã¢ÂÂc is not reciprocal and we should include a.

15
00:01:22,000 --> 00:01:28,000
If k = 2, we need to see if there's a path of length 2 from c to a.

16
00:01:28,000 --> 00:01:32,000
If we start at c, then we can only get to d.

17
00:01:32,000 --> 00:01:38,000
That's just one of the two links we're allowed to click on to get back to a.

18
00:01:38,000 --> 00:01:43,000
What we want to know now is can we click on one link from d to get back to a?

19
00:01:43,000 --> 00:01:49,000
The answer is no. We can't, which means that aÃ¢ÂÂc is not reciprocal. We should include a.

20
00:01:49,000 --> 00:01:53,000
If k = 3, we're going to do the same again. We start at c.

21
00:01:53,000 --> 00:01:55,000
We go to d, using up one link.

22
00:01:55,000 --> 00:02:01,000
Then we want to know if by using two clicks we can get back from d to a.

23
00:02:01,000 --> 00:02:06,000
Let's have a look at that. From d we can get to b.

24
00:02:06,000 --> 00:02:11,000
Then that uses up one link, and then can we get to a with one more link?

25
00:02:11,000 --> 00:02:16,000
Yes, we can, because there is a direct link from b to a,

26
00:02:16,000 --> 00:02:20,000
which means that aÃ¢ÂÂc is reciprocal and we should not include a.

27
00:02:20,000 --> 00:02:27,000
If k Ã¢ÂÂ¥ 3, then there is definitely a path of length at least three in there,

28
00:02:27,000 --> 00:02:33,000
which means we should not include a for any values of k Ã¢ÂÂ¥ 3.

29
00:02:33,000 --> 00:02:35,000
Now we're going to code that.

30
00:02:35,000 --> 00:02:39,000
We're going to code a procedure to check whether aÃ¢ÂÂc is reciprocal,

31
00:02:39,000 --> 00:02:46,000
and then we're going to edit the code and compute ranks to take that into consideration.

32
00:02:46,000 --> 00:02:48,000
This is the supplied code.

33
00:02:48,000 --> 00:02:52,000
I'm going to change it to include a second input k.

34
00:02:52,000 --> 00:02:58,000
Then we want to know whether we have that reciprocal link or not. We include the page.

35
00:02:58,000 --> 00:03:02,000
If we don't have a reciprocal link in the graph,

36
00:03:02,000 --> 00:03:11,000
we're going to include node in the calculation if the link nodeÃ¢ÂÂpage is not reciprocal.

37
00:03:11,000 --> 00:03:18,000
I just need to adjust the spacing here, and that's all the change that we need to do to compute ranks.

38
00:03:18,000 --> 00:03:23,000
To code it's reciprocal link, I'm going to use recursion.

39
00:03:23,000 --> 00:03:29,000
If k is 0--that was the first case we looked at in the example--

40
00:03:29,000 --> 00:03:35,000
then we have a reciprocal link whenever the destination and the source are the same.

41
00:03:35,000 --> 00:03:42,000
In that case, I'll return true and otherwise we return false.

42
00:03:42,000 --> 00:03:49,000
If k is not equal to 0, then it's at least 1, which means if there is a direct link

43
00:03:49,000 --> 00:03:56,000
from the destination to the source, then there is most definitely a reciprocal link.

44
00:03:56,000 --> 00:04:04,000
If that's not the case, we're going to look at every node that is linked to from destination.

45
00:04:04,000 --> 00:04:13,000
We're going to check if there is a path of links from that node to the source of length k - 1.

46
00:04:13,000 --> 00:04:16,000
We're already used one step going from destination to node.

47
00:04:16,000 --> 00:04:19,000
That leaves us with k - 1 steps left.

48
00:04:19,000 --> 00:04:27,000
If there is a path--in other words, if reciprocal link graphs in the same graph--

49
00:04:27,000 --> 00:04:29,000
we've got the same source.

50
00:04:29,000 --> 00:04:34,000
We've got our new node, which is hopefully one step closer to the destination.

51
00:04:34,000 --> 00:04:38,000
If that's true, then we're going to return true.

52
00:04:38,000 --> 00:04:43,000
If there is no node for which that's true, we're going to return false.

53
00:04:43,000 --> 00:04:46,000
That completes the procedure.
