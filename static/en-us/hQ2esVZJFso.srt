1
00:00:00,000 --> 00:00:03,000
We'll start with a language that many of you may be familiar with--

2
00:00:03,000 --> 00:00:05,000
the language of regular expressions.

3
00:00:05,000 --> 00:00:07,000
You've seen them if you've taken CS101.

4
00:00:07,000 --> 00:00:09,000
Maybe you've seen them elsewhere.

5
00:00:09,000 --> 00:00:11,000
In any event, we'll give an overview of them.

6
00:00:11,000 --> 00:00:13,000
There's a language for regular expressions.

7
00:00:13,000 --> 00:00:15,000
They can be expressed as strings.

8
00:00:15,000 --> 00:00:21,000
For example, the string a<i>b</i>c* describes a language,

9
00:00:21,000 --> 00:00:26,000
and that language consists of any number of a's followed by any number of b's

10
00:00:26,000 --> 00:00:28,000
followed by any number of c's.

11
00:00:28,000 --> 00:00:36,000
Elements of this language include the strings abc, aaa, bcc.

12
00:00:36,000 --> 00:00:39,000
Stars can be any number, so it could be zero of them.

13
00:00:39,000 --> 00:00:41,000
Say, just b would be an example.

14
00:00:41,000 --> 00:00:44,000
The empty string all by itself would be an example.

15
00:00:44,000 --> 00:00:48,000
Ccccc would be an example. An so on.

16
00:00:48,000 --> 00:00:54,000
Now, there's a whole language of symbols like + and ? and so on for regular expressions.

17
00:00:54,000 --> 00:01:00,000
To make sense of them, we have to be able to describe what are the possible grammars

18
00:01:00,000 --> 00:01:05,000
and then what are the possible languages that those grammar correspond to?

19
00:01:05,000 --> 00:01:08,000
A grammar is a description of a language,

20
00:01:08,000 --> 00:01:12,000
and a language is a set of strings.

21
00:01:12,000 --> 00:01:16,000
Now, this form of description of the grammar as a long sequence of characters

22
00:01:16,000 --> 00:01:19,000
is convenient when you're quickly typing something in,

23
00:01:19,000 --> 00:01:23,000
but it can be difficult to work with. Grammar expressions get long.

24
00:01:23,000 --> 00:01:29,000
So we're going to describe the possible grammars in a format that's more compositional.

25
00:01:29,000 --> 00:01:33,000
In other words, what I'm going to describe is an API,

26
00:01:33,000 --> 00:01:37,000
which stands for application programming interface.

27
00:01:37,000 --> 00:01:43,000
This is the interface that a programmer uses rather than the UI or user interface

28
00:01:43,000 --> 00:01:46,000
that a user uses when you click with your mouse.

29
00:01:46,000 --> 00:01:49,000
We'll describe a series of functions calls that can be used

30
00:01:49,000 --> 00:01:52,000
to describe the grammar of a regular expression.

31
00:01:52,000 --> 00:01:55,000
We'll say that a regular expression can be built up by these types of calls.

32
00:01:55,000 --> 00:01:59,000
First, a literal of some string S.

33
00:01:59,000 --> 00:02:08,000
For example, if we say lit(a) then that describes the language consisting

34
00:02:08,000 --> 00:02:12,000
of just the character string "a" and nothing else.

35
00:02:12,000 --> 00:02:18,000
We have the API call seq(x, y).

36
00:02:18,000 --> 00:02:29,000
We could say seq(lit(a), lit(b)), and that would consist of just the string "ab."

37
00:02:29,000 --> 00:02:31,000
So far not very interesting.

38
00:02:31,000 --> 00:02:35,000
Then we could say alt(x, y,).

39
00:02:35,000 --> 00:02:43,000
Similarly, alt(lit(a), lit(b)), and that would consist of two possibilities--

40
00:02:43,000 --> 00:02:46,000
either the string "a" or the string "b."

41
00:02:46,000 --> 00:02:51,000
We'll use the standard notation for the name of our API call here.

42
00:02:51,000 --> 00:02:57,000
Star(x) stands for any number of repetitions--zero or more.

43
00:02:57,000 --> 00:03:05,000
Star(lit(a)) would be the empty string or "a" or "aa" and so on.

44
00:03:05,000 --> 00:03:11,000
We can say oneof(c) and then string of possible characters.

45
00:03:11,000 --> 00:03:16,000
That's that same as the alternative of all the individual characters.

46
00:03:16,000 --> 00:03:22,000
Oneof('abc') matches "a" or "b" or "c."

47
00:03:22,000 --> 00:03:25,000
It's a constrained version of the alt function.

48
00:03:25,000 --> 00:03:28,000
We'll use the symbol "eol," standing for "end of line"

49
00:03:28,000 --> 00:03:31,000
to match only the end of a character string and nowhere else.

50
00:03:31,000 --> 00:03:36,000
What matches is the empty string, but it matches only at the end.

51
00:03:36,000 --> 00:03:40,000
The only example we can give is "eol" itself,

52
00:03:40,000 --> 00:03:45,000
and we can give an example of seq(lit('a'), eol),

53
00:03:45,000 --> 00:03:50,000
and that matches exactly the "a" and nothing else at the end.

54
00:03:50,000 --> 00:03:54,000
Then we'll add "dot," which matches any possible character--

55
00:03:54,000 --> 99:59:59,999
a, b, c, any other character in the alphabet.
