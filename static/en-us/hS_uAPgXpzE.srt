1
00:00:00,000 --> 00:00:05,158
Like reduce, scan takes an input array and a binary associative operator as inputs.

2
00:00:05,158 --> 00:00:07,934
You may recall that associativity was useful in reduce

3
00:00:07,934 --> 00:00:11,315
to allow us to reorder operations to expose concurrency.

4
00:00:11,315 --> 00:00:14,427
And you'd be right in thinking that we're going to do the same thing here.

5
00:00:14,427 --> 00:00:17,735
For completeness, I should note that all the operators we use in this class

6
00:00:17,735 --> 00:00:19,444
are also commutative.

7
00:00:19,444 --> 00:00:22,801
X op y gives you the same result as y op x.

8
00:00:22,801 --> 00:00:26,431
Implementations turn out to be a little bit more complex if you don't use that assumption,

9
00:00:26,431 --> 00:00:28,208
but we're not going to cover that here.

10
00:00:28,208 --> 00:00:30,850
Now, scan also requires a 3rd input--

11
00:00:30,850 --> 00:00:34,112
an identity value associated with the binary operator.

12
00:00:34,112 --> 00:00:43,122
So for any operator, op, I op a, where I is the identity element and a is any value, always gives you back a.

13
00:00:43,122 --> 00:00:46,260
For the binary associative operator addition then,

14
00:00:46,260 --> 00:00:49,993
the identity element is 0 because if you add 0 to any value,

15
00:00:49,993 --> 00:00:52,093
you get back that value.

16
00:00:52,093 --> 00:00:54,916
For the binary associative operator minimum,

17
00:00:54,931 --> 00:00:58,091
the identity element is the maximum representative value.

18
00:00:58,091 --> 00:01:00,695
Consider an unsigned char data type, for instance.

19
00:01:00,695 --> 00:01:03,473
The identity element there is 0xFF,

20
00:01:03,473 --> 00:01:11,106
because min of unsigned chars between 0xFF and any value a will always give you back a.

21
00:01:11,106 --> 00:01:17,156
So a little quiz to make sure we understand binary associative operators and their identity elements.

22
00:01:17,156 --> 00:01:20,771
What are the identity elements for multiplication,

23
00:01:20,771 --> 00:01:24,838
for the logical or operator, and for the logical and operator?
