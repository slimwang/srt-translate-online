1
00:00:00,450 --> 00:00:01,140
Enter LibGDX.

2
00:00:02,160 --> 00:00:05,150
LibGDX is a Java game engine
an application framework

3
00:00:05,150 --> 00:00:07,780
that makes making games so much easier.

4
00:00:07,780 --> 00:00:10,560
It provides a bunch of useful
functionality, including great

5
00:00:10,560 --> 00:00:15,060
drawing APIs, sound and asset handling,
user input management and

6
00:00:15,060 --> 00:00:17,660
a ton of other features that
make writing a game super fast.

7
00:00:18,840 --> 00:00:20,830
LibGDX does one better though.

8
00:00:20,830 --> 00:00:25,120
Games written for LibGDX can be
deployed on Android, IOS, browsers,

9
00:00:25,120 --> 00:00:28,470
and anywhere else the Java runs,
like your desktop computer.

10
00:00:28,470 --> 00:00:31,280
So, lets check out how LibGDX works.

11
00:00:31,280 --> 00:00:35,130
Up at the top of the stack here, here's
your game, and then here is LibGDX.

12
00:00:36,300 --> 00:00:40,020
LibGDX provides a bunch of functionality
related to calling into your game when

13
00:00:40,020 --> 00:00:41,530
it's time to do stuff.

14
00:00:41,530 --> 00:00:45,090
But it also provides all of these
libraries for drawing, sound, storage,

15
00:00:45,090 --> 00:00:46,970
networking, a bunch of other stuff.

16
00:00:46,970 --> 00:00:49,120
So when your game needs
to draw something,

17
00:00:49,120 --> 00:00:53,760
you call into LibGDX to ask it
to go draw something for you.

18
00:00:53,760 --> 00:00:56,880
Now whenever you call a library
to go do some drawing for

19
00:00:56,880 --> 00:01:00,180
you, that library doesn't
actually do the drawing itself.

20
00:01:00,180 --> 00:01:03,830
It delegates that task to the underlying
hardware it's running on.

21
00:01:03,830 --> 00:01:07,770
So, either that it talks to
the video card driver directly, or

22
00:01:07,770 --> 00:01:11,090
it talks to some other abstraction
offered by the host operating system.

23
00:01:12,200 --> 00:01:13,520
So here's the trick.

24
00:01:13,520 --> 00:01:17,395
When LibGDX receives a request to
go draw something, it can go and

25
00:01:17,395 --> 00:01:21,270
dispatch that command to an Android
system it's running on, but

26
00:01:21,270 --> 00:01:25,302
it also knows how to tell if it's
running on iOS instead of Android.

27
00:01:25,302 --> 00:01:29,360
It will dispatch a different
set of drawing commands to iOS.

28
00:01:29,360 --> 00:01:33,695
Or LibGDX has an HTML backend, where
when your game requests some networking

29
00:01:33,695 --> 00:01:37,506
to be done, LibGDX Intel,
I'm running as a web app this time.

30
00:01:37,506 --> 00:01:41,809
I'm going to go do my networking using
a different set of commands than I would

31
00:01:41,809 --> 00:01:43,740
if I was on Android or iOS.

32
00:01:43,740 --> 00:01:47,050
And LibGDX has a background that
runs on desktop computers as well.

33
00:01:47,050 --> 00:01:52,480
So, the APIs that your game uses, look
identical to you, regardless of whether

34
00:01:52,480 --> 00:01:55,940
your game is running on Android, iOS, as
a web app, or on your desktop computer.

35
00:01:57,140 --> 00:01:59,840
That means you only need
to write your game once and

36
00:01:59,840 --> 00:02:01,590
LibGDX will allow it to run anywhere.
