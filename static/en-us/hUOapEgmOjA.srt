1
00:00:00,000 --> 00:00:06,000
Now, if you took CS101, you had to find HTML tags within a document,

2
00:00:06,000 --> 00:00:10,000
and you did that mostly using the string.find method,

3
00:00:10,000 --> 00:00:14,000
which works okay, but it's fragile and doesn't quite get everything quite right.

4
00:00:14,000 --> 00:00:19,000
The code you wrote was not completely robust to having spaces and lines feeds

5
00:00:19,000 --> 00:00:23,000
and other things anywhere in the text, so we'd like to do something that's a little bit more robust.

6
00:00:23,000 --> 00:00:27,000
Your problem is to find these HTML tags,

7
00:00:27,000 --> 00:00:30,000
and in particular what I'm looking for are start tags.

8
00:00:30,000 --> 00:00:38,000
Things like we'd begin, and then a would be a tag, and table would be another one and so on.

9
00:00:38,000 --> 00:00:45,000
I'm not looking for the end tags, so don't worry about those. Just the start tags.

10
00:00:45,000 --> 00:00:52,000
Then something like a and then a set of attribute value pairs.

11
00:00:52,000 --> 00:00:54,000
Then a closing angle bracket.

12
00:00:54,000 --> 00:00:59,000
We're looking to find all the instances that look like that.

13
00:00:59,000 --> 00:01:06,000
This whole thing--angle bracket, tag, optional set of parameters--parameter equal string.

14
00:01:06,000 --> 00:01:09,000
These will have to be a string, and they have to be enclosed in double quotes.

15
00:01:09,000 --> 00:01:13,000
You can rely on that, and there won't be any double quotes within the string.

16
00:01:13,000 --> 00:01:16,000
That simplifies it a little bit. Then the closing bracket.

17
00:01:16,000 --> 00:01:19,000
But there can be spaces anywhere and so on.

18
00:01:19,000 --> 00:01:25,000
I want you to write a function--call it "findtags"--which you pass it a text,

19
00:01:25,000 --> 00:01:32,000
and then it returns a list of strings that look like that that come out of the text.

20
00:01:32,000 --> 00:01:34,000
You could use whatever tools you found.

21
00:01:34,000 --> 00:01:39,000
You can use the regular expression module "re."

22
00:01:39,000 --> 00:01:42,000
You can use the regular expression parsers that we built.

23
00:01:42,000 --> 00:01:45,000
You can use the context-free parser that we built.

24
00:01:45,000 --> 00:01:48,000
Whatever you think is appropriate.
