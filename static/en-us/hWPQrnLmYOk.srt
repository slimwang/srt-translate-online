1
00:00:00,330 --> 00:00:04,419
Okay, great, but what do we do when we
get to level nine in our mini-max tree?

2
00:00:04,419 --> 00:00:07,209
>> That's when things
really get interesting.

3
00:00:07,209 --> 00:00:09,810
We want to evaluate
the goodness of a node at level

4
00:00:09,810 --> 00:00:14,240
nine based on how much we expect it to
lead to a win for our computer player.

5
00:00:14,240 --> 00:00:17,199
Can we create an evaluation
function that takes in each

6
00:00:17,199 --> 00:00:21,050
game board generated level nine of our
mini-max game tree, return a number that

7
00:00:21,050 --> 00:00:25,149
we can use to compare that node to
all the other nodes at that level?

8
00:00:25,149 --> 00:00:28,259
>> Well we know the only way to win
is to have our computer player have

9
00:00:28,260 --> 00:00:30,270
moves left at the end of the game.

10
00:00:30,269 --> 00:00:33,630
Maybe our computer player should
maximize the number of moves it has?

11
00:00:33,630 --> 00:00:35,030
>> That sounds right.

12
00:00:35,030 --> 00:00:38,770
We want an evaluation function that
returns a higher number depending on how

13
00:00:38,770 --> 00:00:40,602
good the board is for
our computer player.

14
00:00:40,601 --> 00:00:44,279
With ann evaluation function like
simply counting the number of moves our

15
00:00:44,280 --> 00:00:46,810
computer player has
available at a given node.

16
00:00:46,810 --> 00:00:49,620
The player would select
branches in the mini-max tree

17
00:00:49,619 --> 00:00:52,539
that lead to spaces where our
player has the most options.

18
00:00:52,539 --> 00:00:54,859
It seems like a really good idea.

19
00:00:54,859 --> 00:00:59,679
Let's call that evaluation function,
Number My Moves for convenience.

20
00:00:59,679 --> 00:01:03,100
Why don't we test it out on our
simple five-move game board and

21
00:01:03,100 --> 00:01:04,510
see how well it works?

22
00:01:04,510 --> 00:01:05,010
>> Let's do it.

