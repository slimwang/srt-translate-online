1
00:00:00,370 --> 00:00:02,705
So how would you use a production system to design an agent that

2
00:00:02,705 --> 00:00:06,160
can solve Raven's Progressive Matrices. We could think about this kind of at

3
00:00:06,160 --> 00:00:09,430
two different levels. At one level we could imagine a production system that's

4
00:00:09,430 --> 00:00:13,300
able to address any incoming problem. It has a set of rules for what to look for

5
00:00:13,300 --> 00:00:17,030
in a new problem and it knows how to reply when it finds those things. But

6
00:00:17,030 --> 00:00:20,240
on the other hand, we can also imagine production rules that are specific to

7
00:00:20,240 --> 00:00:24,070
a given problem. When the agent receives a new problem, it induces some

8
00:00:24,070 --> 00:00:27,210
production rules that govern the transformation between certain figures and

9
00:00:27,210 --> 00:00:30,600
then transfers that to other rows and columns. So in that way, it's able to

10
00:00:30,600 --> 00:00:34,340
use that same kind of production system methodology to answer these problems,

11
00:00:34,340 --> 00:00:37,390
even though it doesn't come into the problem with any production rules written

12
00:00:37,390 --> 00:00:41,760
in advance. So, inherent in this idea though, is the idea of learning from

13
00:00:41,760 --> 00:00:44,780
the problem that it receives. How is this learning going to take place? How is

14
00:00:44,780 --> 00:00:48,360
it actually going to write these production rules, based on a new problem? And

15
00:00:48,360 --> 00:00:51,110
what's the benefit of doing it this way? What do we get out of actually having

16
00:00:51,110 --> 00:00:54,010
these production rules, that are written based on individual problems?
