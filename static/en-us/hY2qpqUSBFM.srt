1
00:00:00,500 --> 00:00:04,560
Wouldn't this also be dependent on
the position of the handle as well?

2
00:00:04,560 --> 00:00:06,440
>> I just want to know
the number of lines displayed.

3
00:00:08,480 --> 00:00:11,760
>> Okay, so
the view port's height would give

4
00:00:11,760 --> 00:00:16,379
you the number of lines that you need.

5
00:00:16,379 --> 00:00:18,640
>> Well, not exactly, go on.

6
00:00:18,640 --> 00:00:19,970
>> So.

7
00:00:19,970 --> 00:00:20,970
In some cases.

8
00:00:20,970 --> 00:00:23,570
Assuming that the file is big enough,

9
00:00:23,570 --> 00:00:28,230
then whatever the size of your
viewport is, say it's 100 at the max.

10
00:00:28,230 --> 00:00:31,339
Then you can get all 100 lines because
there's going to be maybe some extra

11
00:00:31,339 --> 00:00:32,519
[CROSSTALK]
>> Okay, so

12
00:00:32,519 --> 00:00:38,363
the maximum number of lines that you can
display is the size of the viewport,

13
00:00:38,363 --> 00:00:41,720
if there's enough lines in the file.

14
00:00:41,720 --> 00:00:42,250
>> Right.

15
00:00:42,250 --> 00:00:43,060
>> Okay?

16
00:00:43,060 --> 00:00:47,520
>> And I guess conversely, you could
have a situation where you have a plenty

17
00:00:47,520 --> 00:00:50,940
big enough view port, but your,
you might have a one line file.

18
00:00:50,940 --> 00:00:52,460
So you'd only need the one line.

19
00:00:52,460 --> 00:00:53,330
>> Okay, so

20
00:00:53,330 --> 00:00:58,256
what is the number of lines displayed
as a function of those two factors?

21
00:00:58,256 --> 00:01:01,688
>> Okay, so,

22
00:01:01,688 --> 00:01:08,650
given the size of
the number of lines and

23
00:01:08,650 --> 00:01:16,170
the file, it would be, okay.

24
00:01:16,170 --> 00:01:18,720
I guess start with view port size,
view port height.

25
00:01:18,720 --> 00:01:23,788
So view port height minus the-

26
00:01:23,788 --> 00:01:27,580
>> So as you can kind of guess here,

27
00:01:27,580 --> 00:01:30,770
it's a little tricky to come up with
an answer to this on the fly and

28
00:01:30,770 --> 00:01:34,170
it's clearly not going to be the case
that our UML diagram can't express it.

29
00:01:34,170 --> 00:01:37,550
And we're going to need some
other mechanism to do that.

30
00:01:37,550 --> 00:01:40,300
Clearly the number of lines is
limited by the size of the view port.

31
00:01:40,300 --> 00:01:42,170
You can't display more
lines than will fit.

32
00:01:42,170 --> 00:01:44,880
It is also limited by the number
of lines in the file.

33
00:01:44,880 --> 00:01:46,690
It can't display lines
that aren't there.

34
00:01:46,690 --> 00:01:51,070
The actual number of lines that's
displayed is the minimum of these two.

35
00:01:51,070 --> 00:01:52,180
>> Okay.
>> Okay?

36
00:01:52,180 --> 00:01:54,240
And we can't express
this in the diagram.

37
00:01:54,240 --> 00:01:55,920
We'll have to use some
other mechanism and

38
00:01:55,920 --> 00:01:59,670
that mechanism is called OCL which
is the Object Constraint Language.

39
00:01:59,670 --> 00:02:03,840
This is a part of UML that's
a textual part that allows us to

40
00:02:03,840 --> 00:02:08,810
more precisely express various
requirements that we have to deal with.

41
00:02:08,810 --> 00:02:09,690
And we're going to have to

42
00:02:11,200 --> 00:02:15,510
bring that into our model in order to
deal with this particular situation.

43
00:02:15,510 --> 00:02:19,550
The fact that the number of lines shown
depends on both the file size and

44
00:02:19,550 --> 00:02:22,670
the viewport size indicates that there's
a relationship between these two

45
00:02:22,670 --> 00:02:23,580
components.

46
00:02:23,580 --> 00:02:26,520
We call this the line's
visible association.

47
00:02:26,520 --> 00:02:29,730
We can show its existence graphically
with a labeled line between the two

48
00:02:29,730 --> 00:02:30,300
classes.
