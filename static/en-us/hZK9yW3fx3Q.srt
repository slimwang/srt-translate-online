1
00:00:00,230 --> 00:00:03,630
So now that we have seen that unrolling can really help both reduce the overall

2
00:00:03,630 --> 00:00:07,570
work, and also schedule the work better. We might be tempted to do unrolling all

3
00:00:07,570 --> 00:00:12,200
the time. So is there any downside to unrolling? Well, yes there is. So

4
00:00:12,200 --> 00:00:13,810
first there is code bloat.

5
00:00:13,810 --> 00:00:18,430
Let's say that our original body was four instructions. After we unroll, for

6
00:00:18,430 --> 00:00:22,190
example it might be that instructions one through three,. Need to be replicated,

7
00:00:22,190 --> 00:00:26,520
and this is for example our branch, so we can just have one. So now there is

8
00:00:26,520 --> 00:00:31,500
fewer instructions executed per original iteration. We had four per iteration,

9
00:00:31,500 --> 00:00:36,550
now we have seven per two iterations. But the code size is much larger. Here we

10
00:00:36,550 --> 00:00:41,790
had four instructions in a our code, now we have seven instructions in our code.

11
00:00:41,790 --> 00:00:45,630
If we decide to unroll more than once, meaning. Do the work of let's say,

12
00:00:45,630 --> 00:00:49,700
four of these iterations. The code size will be proportionally larger.

13
00:00:49,700 --> 00:00:55,570
So the code grows quickly, with the number of un-rollings with we do. Second,

14
00:00:55,570 --> 00:00:58,950
what if the number of iterations is unknown at the beginning? For example,

15
00:00:58,950 --> 00:01:03,800
this could be a y loop. In that case, here, we do one iteration at a time.

16
00:01:03,800 --> 00:01:08,480
Here we're doing two iterations at a time. What if we needed to exit here?

17
00:01:08,480 --> 00:01:12,540
Even in a four loop where we know the number of iterations in advance.

18
00:01:12,540 --> 00:01:16,538
What if the number of iterations we need is not a multiple of N?

19
00:01:16,538 --> 00:01:19,156
The number of iterations we are doing per iteration of the loop. So

20
00:01:19,156 --> 00:01:22,650
we might still for example, we might need to do seven iterations of this loop.

21
00:01:22,650 --> 00:01:26,580
We unroll it once. Now we need to do this three times and then exit in

22
00:01:26,580 --> 00:01:31,560
the middle. So, how do we handle this? The solutions to this problems do exist,

23
00:01:31,560 --> 00:01:34,750
but they are beyond the scope of this class. So, these are questions that

24
00:01:34,750 --> 00:01:38,900
are better answered in advanced compiler class, not in an architecture class.
