1
00:00:00,250 --> 00:00:04,357
Let's see how a simple hierarchy works in practice. I'll make a robot with two

2
00:00:04,357 --> 00:00:09,098
parts to its arm, a forearm and an upper arm. This is kind of a classic computer

3
00:00:09,098 --> 00:00:13,980
graphics example, except that my robot is going to be a T850. The forearm is

4
00:00:13,980 --> 00:00:18,328
this piece made of six objects. I run some tests on it and it looks good. I've

5
00:00:18,328 --> 00:00:21,292
made it so that the point where I'll attach it to the upper arm is at the

6
00:00:21,292 --> 00:00:25,529
origin. I do this because I know that when a rotation is applied, the rotation

7
00:00:25,529 --> 00:00:29,772
happens with respect to the point at the origin. Here's the code to create my

8
00:00:29,772 --> 00:00:34,104
forearm, there's not a lot to it. I create an Object3D, i call,

9
00:00:34,104 --> 00:00:39,724
createRobotExtender, and then I add the forearm to the scene, so I can see it.

10
00:00:39,725 --> 00:00:43,962
My createRobotExtender function adds a bunch of geometric objects to the forearm

11
00:00:43,962 --> 00:00:48,200
object. A faLength is passed in to let this function know how tall to make the

12
00:00:48,200 --> 00:00:52,591
extender. It doesn't really matter what I add to the forearm object. The only

13
00:00:52,591 --> 00:00:56,371
rule is that whatever I put into this object, I need to remember that this

14
00:00:56,371 --> 00:01:01,286
object will itself rotate around the origin. I designed my upper arm in the same

15
00:01:01,286 --> 00:01:05,642
way and coded up about the same. Again, it rotates around the origin. The bit

16
00:01:05,642 --> 00:01:09,548
we're interested in is how these two objects get hooked together so that the

17
00:01:09,548 --> 00:01:12,987
forearm is the child of the upper arm. Here's the code that attaches the two

18
00:01:12,987 --> 00:01:17,524
objects together. We make the two arm pieces the same as before. The key

19
00:01:17,524 --> 00:01:21,418
difference is that instead of adding the forearm to the scene itself, we add the

20
00:01:21,418 --> 00:01:25,670
forearm to the upper arm. We also move the forearm to be at the top of the upper

21
00:01:25,670 --> 00:01:29,426
arm. At this point the upper arm can be moved around, rotated, scaled and all of

22
00:01:29,426 --> 00:01:33,250
its parts will be transformed in the same way. This is why we name this object

23
00:01:33,250 --> 00:01:37,276
to be the arm instead of the upper arm, since in fact it holds both the upper

24
00:01:37,276 --> 00:01:41,838
arm and the forearm. For example, if we set a rotation on the arm, the whole

25
00:01:41,838 --> 00:01:45,849
object will rotate. What's important to realize here is that the arm doesn't

26
00:01:45,849 --> 00:01:49,417
particularly know or care what's inside any of its children. When I add the

27
00:01:49,417 --> 00:01:52,780
forearm to the arm, the forearm becomes just another part of the arm, no

28
00:01:52,780 --> 00:01:57,038
different than adding a simple sphere or block. However, since we can manipulate

29
00:01:57,038 --> 00:02:01,326
any object by changing its transforms, we can also change the position of the

30
00:02:01,326 --> 00:02:04,950
forearm itself. So changing the angle with this line of code, will change the

31
00:02:04,950 --> 00:02:08,780
angle of the forearm without affecting anything else. The transform order is the

32
00:02:08,780 --> 00:02:12,320
forearms rotation and translation, followed by the arms rotation and

33
00:02:12,320 --> 00:02:16,007
translation. This means the forearm can be transformed however you wish, without

34
00:02:16,007 --> 00:02:20,380
knowing about the arm as a whole. The arms transforms are applied later. Give

35
00:02:20,380 --> 00:02:25,183
the demo a try to see how the two parts interact with their separate controls.
