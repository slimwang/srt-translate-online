1
00:00:00,160 --> 00:00:03,877
You've just implemented a program that shows two kinds of question; a plain

2
00:00:03,877 --> 00:00:08,795
question and a numeric question. Both of them work past to the presentQuestion

3
00:00:08,795 --> 00:00:12,941
method. Clearly we can extend the system with all sorts of other question

4
00:00:12,941 --> 00:00:18,022
types, and we won't ever have to change the presentQuestion method. So, what

5
00:00:18,022 --> 00:00:22,241
polymorphism gives us is extensible software systems. We can start out with

6
00:00:22,241 --> 00:00:26,948
something simple and without having to change any of the basic structure. We

7
00:00:26,948 --> 00:00:31,438
can extend the functionality by adding more and more subclasses. Polymorphism

8
00:00:31,438 --> 00:00:35,658
is one of the two corner stones of object orientated programming. The other one

9
00:00:35,658 --> 00:00:39,623
is encapsulation. Remember that encapsulation means, we separate the interface

10
00:00:39,623 --> 00:00:44,226
of a class from it's implementation. And that means that the implementations

11
00:00:44,226 --> 00:00:48,386
can evolve over time and gain more functionality without having to change the

12
00:00:48,386 --> 00:00:53,400
rest of the system. So, both of these cornerstone properties let us build

13
00:00:53,400 --> 00:00:58,665
systems that start out small and that can be functional for a long time. Which

14
00:00:58,665 --> 00:01:02,295
is why object-oriented programming has become such a popular methodology for

15
00:01:02,295 --> 00:01:06,246
writing programs. Now, in a few short weeks, you have gone from just becoming

16
00:01:06,246 --> 00:01:08,925
familiar with objects and how they work, to being able to write quite

17
00:01:08,925 --> 00:01:13,850
sophisticated programs that can withstand the test of time. So, you've really

18
00:01:13,850 --> 00:01:19,164
come a long way in this introduction to programming, and I hope you enjoyed it.
