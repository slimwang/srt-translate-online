1
00:00:00,210 --> 00:00:03,960
So, let's use these TimeUtils
tools to create simple movement.

2
00:00:03,960 --> 00:00:06,320
Just a ball moving around in a circle.

3
00:00:06,320 --> 00:00:09,450
The first thing we need to do, is set
up some constants that determine what

4
00:00:09,450 --> 00:00:12,000
the movement of the ball looks like,
including how many

5
00:00:12,000 --> 00:00:15,570
seconds the ball should take to
go all the way through one cycle.

6
00:00:15,570 --> 00:00:19,130
Then we need to store the time at which
the application adapter was created

7
00:00:19,130 --> 00:00:20,970
by declaring a long called initialTime.

8
00:00:20,970 --> 00:00:24,180
And then setting equal
it to TimeUtils.nanoTime

9
00:00:24,180 --> 00:00:25,750
in the create callback.

10
00:00:25,750 --> 00:00:27,480
Now, down in the renderer callback,

11
00:00:27,480 --> 00:00:30,890
we can figure out how long it's
been since the game started running

12
00:00:30,890 --> 00:00:35,380
by subtracting the initial time from
the current value of TimeUtils.nanoTime.

13
00:00:35,380 --> 00:00:38,380
This gives the number of nanoseconds
that the game has been running.

14
00:00:38,380 --> 00:00:40,150
But seconds would be
a lot more convenient.

15
00:00:41,240 --> 00:00:44,890
LibGDX provides a very nice
MathUtils.nanoToSec constant

16
00:00:44,890 --> 00:00:46,560
to help with that conversion.

17
00:00:46,560 --> 00:00:49,770
Now we need to figure out
where in the cycle we're at.

18
00:00:49,770 --> 00:00:53,650
If we take the elapsedSeconds and
divide it by the period,

19
00:00:53,650 --> 00:00:57,350
we get the number of elapsed periods
since the game started running.

20
00:00:57,350 --> 00:01:00,090
We can then take the modulis
with 1 to determine what

21
00:01:00,090 --> 00:01:02,450
fractional part of a cycle has elapsed.

22
00:01:02,450 --> 00:01:06,770
So we now have a number that counts up
from 0 to 1 and then resets back to 0.

23
00:01:06,770 --> 00:01:10,840
And we need to map that interval
to a position on a circle.

24
00:01:10,840 --> 00:01:14,220
Don't suppose you remember
the parametric equation on a circle?

25
00:01:14,220 --> 00:01:16,260
You can check out the link
in the instructor notes for

26
00:01:16,260 --> 00:01:18,740
a short refresher on some trigonometry.

27
00:01:18,740 --> 00:01:21,305
To figure out the x
position of our ball,

28
00:01:21,305 --> 00:01:25,907
we take the center point of the world,
and then we add the movement radius

29
00:01:25,907 --> 00:01:29,235
times the cosine of the cycle
position times two Pi.

30
00:01:29,235 --> 00:01:30,889
For the y position
it's almost identical,

31
00:01:30,889 --> 00:01:33,540
except we're taking the sine
instead of the cosine.

32
00:01:33,540 --> 00:01:35,970
And there we go,
we've achieved circular movement.

33
00:01:37,040 --> 00:01:39,950
Even with something so
simple as balls moving in circles,

34
00:01:39,950 --> 00:01:42,670
we can make some surprisingly
beautiful patterns.

35
00:01:42,670 --> 00:01:45,074
Check out what we can do with 20 balls,

36
00:01:45,074 --> 00:01:47,709
each moving at a different
harmonic speed.

37
00:01:47,709 --> 00:01:52,119
[MUSIC]
