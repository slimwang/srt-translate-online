1
00:00:00,380 --> 00:00:02,950
So let's suppose we're
trying to extend a stack.

2
00:00:02,950 --> 00:00:06,110
So what are some common methods
that you see, first of all for

3
00:00:06,110 --> 00:00:08,750
just a stack as a data structure.

4
00:00:08,750 --> 00:00:11,950
>> Well the most important
ones are push and pop.

5
00:00:11,950 --> 00:00:15,820
You want to be able to push items
to the stack and get them back.

6
00:00:15,820 --> 00:00:20,050
And then peak is usually a common one
too, or top, sometimes it's called.

7
00:00:20,050 --> 00:00:23,800
And that's to get the top
element of the stack, so

8
00:00:23,800 --> 00:00:26,040
what would be pops next
if you were to pop.

9
00:00:26,040 --> 00:00:26,890
>> If you were to pop it.

10
00:00:26,890 --> 00:00:30,550
So I want to expand on
the standard methods that you see.

11
00:00:30,550 --> 00:00:35,130
So push pop and peek, but
I want to add a min method as well,

12
00:00:35,130 --> 00:00:40,200
and so the min method, the constraint
is, it needs to run in constant time.

13
00:00:40,200 --> 00:00:43,980
So if we didn't have that constraint and
I have a stack for

14
00:00:43,980 --> 00:00:47,930
instance, what would be some method
that I could do to retrieve them in?

15
00:00:47,930 --> 00:00:52,360
>> So if you had no, if you weren't
worried about run time at all,

16
00:00:52,360 --> 00:00:57,525
you could save those items
over to a new data structure,

17
00:00:57,525 --> 00:01:02,995
you could sort it in ascending order
descending order and get the first

18
00:01:02,995 --> 00:01:07,035
element or the last element depending
on if it's ascending or descending.

19
00:01:07,035 --> 00:01:12,540
You could just loop through it and
keep track of min elements,

20
00:01:12,540 --> 00:01:16,410
replace them as you find a lower one
that type of thing those are things

21
00:01:16,410 --> 00:01:19,040
are much slower, but-
>> Yes, if we were inefficient,

22
00:01:19,040 --> 00:01:22,230
we would just say, we could search the
entire space find them an element and

23
00:01:22,230 --> 00:01:24,290
then just retrieve that.

24
00:01:24,290 --> 00:01:27,070
But the constant time
restriction is important,

25
00:01:27,070 --> 00:01:31,950
because now we have to design the stack
in such a way that we can keep track of

26
00:01:31,950 --> 00:01:36,550
the bin at any moment, no matter what I
push in, or what I pop from the stack.

27
00:01:36,550 --> 00:01:39,850
How would we start to
approach that problem?

28
00:01:39,850 --> 00:01:44,410
Where, as I'm pushing in values,
let's say they're integers, and

29
00:01:44,410 --> 00:01:46,610
that I want to be able to track them in.

30
00:01:46,610 --> 00:01:48,300
What are some ideas
you have around that?

31
00:01:48,300 --> 00:01:52,730
>> Outside of increasing the memory
complexity, this isn't really possible.

32
00:01:54,380 --> 00:02:00,800
As far as I understand, because you need
to keep track of what's going in and

33
00:02:00,800 --> 00:02:03,190
what's going out and
that requires more storage.

34
00:02:03,190 --> 00:02:06,090
But the way that I would do this is to

35
00:02:08,610 --> 00:02:13,550
have sort of a secondary stack to my
regular stack and push them in values.

36
00:02:13,550 --> 00:02:16,040
>> If it was in a two second method.

37
00:02:16,040 --> 00:02:18,220
So we have two separate stacks,
one striking them in,

38
00:02:18,220 --> 00:02:21,630
one striking in where you would
expect a normal stack to look like.

39
00:02:21,630 --> 00:02:23,620
So let's draw some sample data, so

40
00:02:23,620 --> 00:02:26,300
that we can start to build
the problem around this.

41
00:02:26,300 --> 00:02:28,940
So maybe you put like five or
six integers,

42
00:02:28,940 --> 00:02:30,520
something interesting
that we would test.

43
00:02:30,520 --> 00:02:33,969
>> Okay, so something like.

44
00:02:33,969 --> 00:02:40,124
Say 5, 6, 3,1.

45
00:02:40,124 --> 00:02:45,273
>> Okay and we can just draw out some
boxes for your two stacks, all right?

46
00:02:45,273 --> 00:02:50,733
>> So this will be my My
normal stack right here,

47
00:02:50,733 --> 00:02:53,470
something like this.

48
00:02:58,320 --> 00:02:59,153
And this will be my.

49
00:03:01,718 --> 00:03:02,520
Main stack.

50
00:03:09,240 --> 00:03:13,550
>> Cool, so let's assume that we're
starting with five, so we push five on.

51
00:03:13,550 --> 00:03:14,406
So what happens here?

52
00:03:14,406 --> 00:03:17,600
>> So five will get pushed
here to my regular stack, and

53
00:03:17,600 --> 00:03:21,670
then also get pushed to my admin stack,
in this case.

54
00:03:21,670 --> 00:03:25,010
>> And yes, we cross 5 out,
we go on the 6.

55
00:03:25,010 --> 00:03:26,410
What happens with 6?

56
00:03:26,410 --> 00:03:28,000
>> So, then we push 6.

57
00:03:28,000 --> 00:03:29,410
So this will go into the stack.

58
00:03:30,460 --> 00:03:33,390
>> So let's say, yes, we push 6 on.

59
00:03:33,390 --> 00:03:35,260
So let's cross out 6.

60
00:03:35,260 --> 00:03:37,930
And then, let's push 3 on.

61
00:03:37,930 --> 00:03:39,440
So we push 3 onto the stack.

62
00:03:39,440 --> 00:03:44,312
So the 3 goes on to the regular
stack and as usual, and

63
00:03:44,312 --> 00:03:49,072
now 5 and 3, we compare the 2,
3 is less than 5,

64
00:03:49,072 --> 00:03:53,380
we would push 3
>> Yup, perfect, so

65
00:03:53,380 --> 00:03:58,770
this is still consistent, we can clear
in, it's correct the top is correct.

66
00:03:58,770 --> 00:04:00,630
So we can cross 3 out.

67
00:04:00,630 --> 00:04:05,381
But let's say, before we push one
on that we pop two off of here.

68
00:04:05,381 --> 00:04:06,664
>> Okay.
>> Right, so let's say,

69
00:04:06,664 --> 00:04:07,384
I get rid of three.

70
00:04:07,384 --> 00:04:09,158
So we pop 3 and 6, so

71
00:04:09,158 --> 00:04:15,600
when we pop this we could run them
on this as well and compare the two.

72
00:04:15,600 --> 00:04:19,890
If they're equal because-
>> Conceivably,

73
00:04:19,890 --> 00:04:21,940
if this happens to be
the item that were popping,

74
00:04:21,940 --> 00:04:24,630
then we could safely assume
that we can get rid of it.

75
00:04:24,630 --> 00:04:25,250
>> Yes.

76
00:04:25,250 --> 00:04:28,410
Yeah, if they're the same value,

77
00:04:28,410 --> 00:04:32,250
we could get rid of them even
if there is another 3 in here.

78
00:04:32,250 --> 00:04:35,810
What we could do is, so say,
I wanted to push 3 twice.

79
00:04:35,810 --> 00:04:38,460
So, I'd have 3 and 3.

80
00:04:38,460 --> 00:04:43,500
When I push that second 3, if I compared
the two, and they were the same,

81
00:04:43,500 --> 00:04:46,110
then I'd have to push 3 again,
because I know there's two.

82
00:04:46,110 --> 00:04:48,850
I would know there is two 3's there.

83
00:04:48,850 --> 00:04:51,470
>> Yeah, because I feel like, if you're
checking the top of this, and you're

84
00:04:51,470 --> 00:04:56,000
always making sure that this is the min
So, I think what you're saying is,

85
00:04:56,000 --> 00:04:59,370
you would have a situation in which
the min is the same for two values.

86
00:04:59,370 --> 00:05:04,060
So let's say right now, that if we
didn't pop 3 and I push another 3, you

87
00:05:04,060 --> 00:05:09,020
would have to push that one here again,
because it's equal to the current min.

88
00:05:09,020 --> 00:05:10,510
>> Yes, if we just pushed it once and

89
00:05:10,510 --> 00:05:14,250
removed one 3, we couldn't just
pop that, we can remove it.

90
00:05:14,250 --> 00:05:16,760
I suppose,
if we could do a similar thing,

91
00:05:16,760 --> 00:05:21,828
where instead of pushing 3 twice,
when we pop 3 here, we could say.

92
00:05:21,828 --> 00:05:27,120
>> I think what you're hinting
at is a good edge case,

93
00:05:27,120 --> 00:05:31,870
where if we were to have
two sequential min numbers,

94
00:05:31,870 --> 00:05:37,590
that we have to make sure that it's That
this value is essentially less than or

95
00:05:37,590 --> 00:05:42,370
equal to what we think is a minute or
a sec, so that's that's good.

96
00:05:42,370 --> 00:05:44,900
So, yeah, so we pop 3 off,
so it crosses.

97
00:05:44,900 --> 00:05:47,940
>> So this would be popped, and
then we would run a second pop.

98
00:05:47,940 --> 00:05:52,360
When we run that second pop,
we could compare the two.

99
00:05:52,360 --> 00:05:56,940
If we see that this is greater
than what we'd be popping here.

100
00:05:56,940 --> 00:05:59,500
We would want to keep that,
so we wouldn't pop that.

101
00:05:59,500 --> 00:06:01,100
>> Yeah, so that makes sense.

102
00:06:01,100 --> 00:06:02,370
Okay, and then, so

103
00:06:02,370 --> 00:06:06,400
easily we would push, like I don't
think 1 is very interesting.

104
00:06:06,400 --> 00:06:10,490
But if I was to pop 5,
then you pop five here, and

105
00:06:10,490 --> 00:06:13,690
then you also pop from here as well.

106
00:06:13,690 --> 00:06:16,570
>> Yeah, which you could do
is have a check to see if,

107
00:06:16,570 --> 00:06:18,950
if this were the last item
if you know the size.

108
00:06:18,950 --> 00:06:22,020
Your stack were one or
something like that.

109
00:06:22,020 --> 00:06:23,340
>> Yeah, I feel like the.

110
00:06:23,340 --> 00:06:27,920
Well, I think we'll see when we start to
program, but yeah, we'll see if that's

111
00:06:27,920 --> 00:06:32,370
a condition we have to check for
as we build up the algorithm here.

112
00:06:32,370 --> 00:06:36,870
So let's start to draw out the new
interface that we're expecting.

113
00:06:36,870 --> 00:06:39,903
So maybe having just some
simple pseudo-code around,

114
00:06:39,903 --> 00:06:42,232
what this new stack
class would look like.

115
00:06:42,232 --> 00:06:47,548
>> Okay, so what I might do is

116
00:06:47,548 --> 00:06:55,542
something like within my stack class.

117
00:06:55,542 --> 00:07:01,040
I would have something like this,
I'd have another class.

118
00:07:01,040 --> 00:07:04,730
>> And
you can use a standard Java stack.

119
00:07:04,730 --> 00:07:06,947
Like this structures shows they're fine.

120
00:07:06,947 --> 00:07:09,830
>> I'm totally not familiar
with like the generic class.

121
00:07:09,830 --> 00:07:12,312
So like are we overriding.

122
00:07:12,312 --> 00:07:12,980
>> Yes, so.

123
00:07:12,980 --> 00:07:16,641
>> We're trying to
override them correct.

124
00:07:16,641 --> 00:07:20,398
>> Yeah, so for,
if I have a stack here, so

125
00:07:20,398 --> 00:07:24,790
let's say that this is a public class.

126
00:07:24,790 --> 00:07:26,740
>> Right.
>> And then we call it like Min Stack.

127
00:07:26,740 --> 00:07:27,240
>> Yeah.

128
00:07:30,270 --> 00:07:33,280
>> And so using-
>> Would we not be extending

129
00:07:33,280 --> 00:07:34,660
stack for that?

130
00:07:34,660 --> 00:07:35,890
>> We could but,

131
00:07:35,890 --> 00:07:39,500
in this case, the solution we're
proposing was having two separate.

132
00:07:39,500 --> 00:07:43,230
You have a min stack, only this
min stack, and a regular stack.

133
00:07:43,230 --> 00:07:46,840
>> Right.
>> And so, if we wanted to Instead,

134
00:07:46,840 --> 00:07:52,480
we could just have effectively
this would be private final stack.

135
00:07:53,750 --> 00:07:56,810
And then using generics,
we could just put integer.

136
00:07:56,810 --> 00:07:57,570
Right?
>> Right.

137
00:07:57,570 --> 00:07:59,420
>> And then this would be stack.

138
00:07:59,420 --> 00:08:00,284
Right.

139
00:08:00,284 --> 00:08:05,814
And then equals new stack.

140
00:08:05,814 --> 00:08:06,650
>> Yeah.

141
00:08:06,650 --> 00:08:09,948
>> And then we would do the same thing,
so private.

142
00:08:09,948 --> 00:08:12,072
Final stack.

143
00:08:12,072 --> 00:08:12,827
>> For them in stack.

144
00:08:12,827 --> 00:08:13,768
>> Yeah, for them in stack.

145
00:08:13,768 --> 00:08:16,206
>> So same thing have been stack.

146
00:08:16,206 --> 00:08:19,572
>> Yeah.

147
00:08:19,572 --> 00:08:21,500
>> So that's fine.

148
00:08:21,500 --> 00:08:23,580
And then, so
if we were doing it this way,

149
00:08:23,580 --> 00:08:27,370
let's assume that we're
doing our push right.

150
00:08:27,370 --> 00:08:30,050
So then, you have let's say.

151
00:08:30,050 --> 00:08:36,049
It's public, it's a void and it's push
and like sure, we could use generics

152
00:08:36,049 --> 00:08:39,870
if we put generics on here, we can make
this easier and have generics and here.

153
00:08:39,870 --> 00:08:43,837
But since we're doing ints, let's just
say, here's an int and here's a value.

154
00:08:43,837 --> 00:08:44,696
>> Great.

155
00:08:44,696 --> 00:08:45,358
>> For now.

156
00:08:45,358 --> 00:08:50,879
>> And so, from here, what we're
doing is, we before we actually

157
00:08:50,879 --> 00:08:56,730
push the value to the min stack
we're going to do something like if.

158
00:09:00,900 --> 00:09:05,920
Yeah, if so, yeah ,if not min stack.

159
00:09:05,920 --> 00:09:08,870
Every time we're going to to push
to stack, no matter what, but

160
00:09:08,870 --> 00:09:14,707
if in this case,
if not minstack.isempty whatever,

161
00:09:14,707 --> 00:09:17,620
yeah, it was like that.

162
00:09:18,770 --> 00:09:25,570
We compare it with the top,
we would do something

163
00:09:26,760 --> 00:09:32,139
like, if it's in this list for
now we'll go if it's

164
00:09:35,940 --> 00:09:41,430
If value is less than or

165
00:09:41,430 --> 00:09:46,260
equal to min stack.

166
00:09:48,390 --> 00:09:52,830
going to erase this peak.

167
00:09:55,090 --> 00:09:57,060
>> I guess before you go there.

168
00:09:57,060 --> 00:09:58,330
Like we know that.

169
00:09:58,330 --> 00:10:01,350
So before we even start to
tackle like any of the.

170
00:10:01,350 --> 00:10:05,170
Like interesting pieces that
could make this different.

171
00:10:06,470 --> 00:10:09,380
We really do want to just push
onto the stack, so we don't

172
00:10:09,380 --> 00:10:10,680
>> Yeah, that's what I was saying, so.

173
00:10:10,680 --> 00:10:11,701
>> We're going to push
>> Every time we're

174
00:10:11,701 --> 00:10:12,304
going to push to stack.

175
00:10:12,304 --> 00:10:13,200
Yeah, no matter what.

176
00:10:13,200 --> 00:10:15,359
>> So let's do that.

177
00:10:15,359 --> 00:10:19,898
>> Stacked out push in value.

178
00:10:19,898 --> 00:10:21,083
You know that happen every time.

179
00:10:21,083 --> 00:10:22,240
>> Yeah, that happens every time.

180
00:10:22,240 --> 00:10:26,645
>> And then From there, you would
check your edge cases for this one.

181
00:10:26,645 --> 00:10:29,766
>> Mm-hm, so the edge case really
that we're trying to check, and

182
00:10:29,766 --> 00:10:32,166
based on the example we had,
was you just have to.

183
00:10:32,166 --> 00:10:35,323
You're looking to peak at the min stack.

184
00:10:35,323 --> 00:10:36,310
>> Right.

185
00:10:36,310 --> 00:10:38,450
>> And
then make decisions based on that.

186
00:10:38,450 --> 00:10:42,750
>> Yeah, so
this is sort of a sanity check for.

187
00:10:42,750 --> 00:10:46,680
Other, I mean if we, if I suppose
it'll return because it could return.

188
00:10:47,870 --> 00:10:49,850
No, is what I was thinking
when stacked up he.

189
00:10:49,850 --> 00:10:51,370
>> Yeah.
I think it's, that's okay.

190
00:10:51,370 --> 00:10:57,030
So it's we going to erase this and
let's do mean start up peak.

191
00:10:57,030 --> 00:10:57,574
>> All right.

192
00:10:57,574 --> 00:10:58,632
>> But we still we have a chance.

193
00:10:58,632 --> 00:10:59,571
So we still have value with the two.

194
00:10:59,571 --> 00:11:07,190
>> So yeah we could say Int minTop or
something like that.

195
00:11:07,190 --> 00:11:15,680
Yeah, it would be minStack.peak.

196
00:11:15,680 --> 00:11:17,880
From there I would still
want to do that comparison.

197
00:11:17,880 --> 00:11:20,846
>> Yes, and then this would be
where you have to do a comparison.

198
00:11:20,846 --> 00:11:27,465
>> Value is <=

199
00:11:27,465 --> 00:11:32,290
minTop.

200
00:11:32,290 --> 00:11:34,580
Then we would push two min stack.

201
00:11:34,580 --> 00:11:41,139
Yes, that's

202
00:11:41,139 --> 00:11:46,870
right push

203
00:11:46,870 --> 00:11:49,290
>> And let's write out.

204
00:11:49,290 --> 00:11:51,180
So I think this makes a lot of sense.

205
00:11:51,180 --> 00:11:54,070
And let's write out
our pop really quick.

206
00:11:54,070 --> 00:12:03,040
>> And then pop Pop doesn't
need to take any value.

207
00:12:03,040 --> 00:12:05,620
>> And we know throughout the whole
thing, but generally the logic.

208
00:12:05,620 --> 00:12:06,950
If you can describe the logic.

209
00:12:06,950 --> 00:12:08,450
>> Yeah, so essentially.

210
00:12:08,450 --> 00:12:09,030
There.

211
00:12:09,030 --> 00:12:11,610
We want to say.

212
00:12:11,610 --> 00:12:12,990
We want to stagger going to get pop.

213
00:12:12,990 --> 00:12:14,720
We want to say what gets.

214
00:12:14,720 --> 00:12:18,675
Popular stack, so we would say,

215
00:12:23,268 --> 00:12:27,980
Stacked up pop, and then save that,
and something like-

216
00:12:27,980 --> 00:12:30,710
>> Just some type of variable.

217
00:12:30,710 --> 00:12:33,140
X = stacked up pop.

218
00:12:33,140 --> 00:12:40,690
And then if X is equal to.

219
00:12:40,690 --> 00:12:48,235
Yeah, if X is equal to min stack.peak.

220
00:12:48,235 --> 00:12:52,410
Then we want to remove it.

221
00:12:52,410 --> 00:12:56,195
So we would also run a min stack.

222
00:12:56,195 --> 00:12:59,915
>> So you're just trying to do
a sanity check to make sure that

223
00:12:59,915 --> 00:13:02,613
as the stacks are changing,
that they're being kept in sync.

224
00:13:02,613 --> 00:13:05,935
>> Yeah, and so that's the reason
why I just, if they're less than or

225
00:13:05,935 --> 00:13:09,375
equal to, so if the three got pushed
twice it's in here twice, and

226
00:13:09,375 --> 00:13:11,245
that way we can just say, well you know,

227
00:13:11,245 --> 00:13:13,695
whatever's getting popped from
here they're consistent sizes.

228
00:13:13,695 --> 00:13:18,650
If this is equal, if this is equal
to this, then we just we pop it off

229
00:13:18,650 --> 00:13:21,750
of stack, otherwise we leave it,
we don't do anything to it.

230
00:13:21,750 --> 00:13:23,390
>> Yeah, I have level this makes sense.

231
00:13:23,390 --> 00:13:27,340
I know we can write this out, and
then also whenever I need to query, so

232
00:13:27,340 --> 00:13:29,460
I have this new method called min.

233
00:13:29,460 --> 00:13:31,490
What happens when minutes call,
just in general.

234
00:13:31,490 --> 00:13:38,180
>> Min, at this point is just going
to be Basically, minstack.peak.

235
00:13:38,180 --> 00:13:41,400
Is what it returns, so
min is really just returning that.

236
00:13:41,400 --> 00:13:42,060
>> Cool.
Perfect.
