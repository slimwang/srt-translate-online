1
00:00:00,100 --> 00:00:02,070
Now, after we've gone through and cleaned our data, we're

2
00:00:02,070 --> 00:00:03,750
at a place where we need to get the data

3
00:00:03,750 --> 00:00:08,710
into MongoDB. So, we've looked at queries to MongoDB and

4
00:00:08,710 --> 00:00:11,970
you've done some exercises. Let's look at inserting documents into

5
00:00:11,970 --> 00:00:15,600
collections. Now, the database we've been working with all along

6
00:00:15,600 --> 00:00:19,550
has been the examples database, and we've looked at a

7
00:00:19,550 --> 00:00:22,780
couple of different collections here. We've looked at the autos

8
00:00:22,780 --> 00:00:25,900
collection. We've also done some queries against the cities collection.

9
00:00:25,900 --> 00:00:28,180
Now this script that we're looking at here is actually the

10
00:00:28,180 --> 00:00:31,580
script that I wrote to clean the automobiles data. The way

11
00:00:31,580 --> 00:00:34,950
that I originally wrote this was that it would simply output

12
00:00:34,950 --> 00:00:38,410
JSON documents that I could then import into MongoDB. And that's actually

13
00:00:38,410 --> 00:00:40,680
the, the strategy that I would recommend. But I think it's

14
00:00:40,680 --> 00:00:44,060
also important for you to have an understanding of inserting documents

15
00:00:44,060 --> 00:00:47,980
Into MongoDB. And so, we'll take this opportunity to show you

16
00:00:47,980 --> 00:00:50,900
a little bit about how to do that. Now, there's a lot

17
00:00:50,900 --> 00:00:53,040
about the insert statement that I'm not going to cover

18
00:00:53,040 --> 00:00:55,880
right here. But, this is the simplest form of using

19
00:00:55,880 --> 00:00:59,920
insert. Now, what we're going to do is simply loop through

20
00:00:59,920 --> 00:01:02,420
all of the autos that I've created up here in

21
00:01:02,420 --> 00:01:06,285
the code. Where I've cleaned the data and essentially created

22
00:01:06,285 --> 00:01:09,196
a dictionary for each auto that needs to be inserted

23
00:01:09,196 --> 00:01:12,630
into a MongoDB collection. Then we're going to simply loop

24
00:01:12,630 --> 00:01:16,030
through the list of those autos that I've created and call

25
00:01:16,030 --> 00:01:19,530
the insert statement for each one of them. Passing it

26
00:01:19,530 --> 00:01:24,544
a Python dictionary, PyMongo will translate this into a BSON

27
00:01:24,544 --> 00:01:28,480
encoding and send it across to the database. Now, what

28
00:01:28,480 --> 00:01:30,800
I've got here, is I've just got a couple of print

29
00:01:30,800 --> 00:01:33,380
statements. One that's going to demonstrate how many autos there

30
00:01:33,380 --> 00:01:36,000
are before we do this series of inserts and one that's

31
00:01:36,000 --> 00:01:38,530
going to show how many there are after. Now to

32
00:01:38,530 --> 00:01:41,240
do this, I'm using a command we haven't looked at before,

33
00:01:41,240 --> 00:01:44,650
but I'm sure you can figure out what it does. Simply tells us

34
00:01:44,650 --> 00:01:47,330
how many documents were returned for this

35
00:01:47,330 --> 00:01:50,710
find command. Okay now, let's run this.

36
00:01:53,240 --> 00:01:56,040
Okay. So, what happened was, we went ahead and

37
00:01:56,040 --> 00:01:59,010
inserted all of those documents that we had parsed out

38
00:01:59,010 --> 00:02:02,030
of the CSV file from DBpedia for autos. Then what

39
00:02:02,030 --> 00:02:05,730
I did was check the collection, this myautos collection, before

40
00:02:05,730 --> 00:02:08,060
I did the inserts and got a count of how

41
00:02:08,060 --> 00:02:10,750
many were in it. There were none. After doing all

42
00:02:10,750 --> 00:02:14,558
my inserts, I have close to 7800 documents in this,

43
00:02:14,558 --> 00:02:18,340
myautos collection now. So again, this is an example of

44
00:02:18,340 --> 00:02:23,770
the insert command in MongoDB, one way of getting documents into the database.
