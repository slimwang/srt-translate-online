1
00:00:00,000 --> 00:00:03,000
The answer is 6370.

2
00:00:03,000 --> 00:00:07,000
In order for this to work, well, we need a mapping.

3
00:00:07,000 --> 00:00:09,000
We need encryption to be invertible.

4
00:00:09,000 --> 00:00:11,000
Given that the output is mod n,

5
00:00:11,000 --> 00:00:16,000
we have output values that the possible values here

6
00:00:16,000 --> 00:00:19,000
would be from 0 to n - 1.

7
00:00:19,000 --> 00:00:22,000
We need to know that this mapping

8
00:00:22,000 --> 00:00:27,000
maps each message to a unique cipher text, otherwise they wouldn't be invertible.

9
00:00:27,000 --> 00:00:30,000
If 2 messages map to the same value,

10
00:00:30,000 --> 00:00:32,000
then we wouldn't know which to decrypt to.

11
00:00:32,000 --> 00:00:36,000
That would definitely be the case if we have more than the modulus number of values.

12
00:00:36,000 --> 00:00:40,000
That would mean that we've wrapped around and we've definitely used one at least twice.

13
00:00:40,000 --> 00:00:43,000
But as long as m and n are relatively prime,

14
00:00:43,000 --> 00:00:46,000
we should generate all the different values, so we can use each of these as

15
00:00:46,000 --> 00:00:49,000
different messages, but we should be very careful.

16
00:00:49,000 --> 00:00:51,000
What if the value m is 0?

17
00:00:51,000 --> 00:00:54,000
If m is 0 no matter what the exponent is,

18
00:00:54,000 --> 00:00:56,000
we still get 0 as our result.

19
00:00:56,000 --> 00:00:59,000
That's not a very good encryption function if the result doesn't depend on the key.

20
00:00:59,000 --> 00:01:01,000
The same thing if m is 1.

21
00:01:01,000 --> 00:01:03,000
We still get 1 as the output, and in fact,

22
00:01:03,000 --> 00:01:07,000
it's dangerous for any small value to use this encryption.

23
00:01:07,000 --> 00:01:10,000
And one reason you can see that--and we'll talk more about this later--

24
00:01:10,000 --> 00:01:13,000
is the key is public.

25
00:01:13,000 --> 00:01:15,000
We're assuming that the adversary knows e,

26
00:01:15,000 --> 00:01:19,000
so if there's only a small possible set of m values,

27
00:01:19,000 --> 00:01:22,000
the adversary can just try them all and see which one maps,

28
00:01:22,000 --> 00:01:27,000
so it's very dangerous to use a small m as the input message for RSA.

29
00:01:27,000 --> 00:01:30,000
We'll talk more about that later,

30
00:01:30,000 --> 00:01:33,000
but first I want to talk about why RSA is correct

31
00:01:33,000 --> 00:01:36,000
and then why we think it's secure,

32
00:01:36,000 --> 99:59:59,999
at least when it's used in a very careful way.
