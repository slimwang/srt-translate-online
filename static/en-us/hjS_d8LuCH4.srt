1
00:00:00,330 --> 00:00:04,080
So let's outline what we want to do and
in the next segment we'll execute it.

2
00:00:04,080 --> 00:00:07,410
We'll need to make our first request
to see how many results we get,

3
00:00:07,410 --> 00:00:09,900
then parse the JSON that returns,

4
00:00:09,900 --> 00:00:13,030
then determine how many pages
of results that ends up being.

5
00:00:13,030 --> 00:00:15,860
We can then generate a random
number in that range

6
00:00:15,860 --> 00:00:18,650
then use that number to make
a second request for a random page.

7
00:00:19,750 --> 00:00:21,810
And finally,
repeat what we did previously and

8
00:00:21,810 --> 00:00:24,920
get a random photo from that
random page of results.

9
00:00:24,920 --> 00:00:27,640
In this chart, the steps are defined
in a way that suggests that each step

10
00:00:27,640 --> 00:00:29,950
happens one after
the other without delay.

11
00:00:29,950 --> 00:00:32,210
But remember, when we're working
with networking requests,

12
00:00:32,210 --> 00:00:34,710
the requests don't complete immediately.

13
00:00:34,710 --> 00:00:37,560
That's why we use a completion handler
to define what we want to happen

14
00:00:37,560 --> 00:00:39,590
once a network request finishes.

15
00:00:39,590 --> 00:00:42,310
It's like saying, I don't know when
the request will complete, but

16
00:00:42,310 --> 00:00:44,450
run this code when it does.

17
00:00:44,450 --> 00:00:47,860
Another added benefit is that while
the network request is being processed,

18
00:00:47,860 --> 00:00:49,730
our app can continue running.

19
00:00:49,730 --> 00:00:53,340
We describe this kind of request as
an asynchronous request, or asynchronous

20
00:00:53,340 --> 00:00:56,850
task, because it gives us the ability
to define the behavior we want and

21
00:00:56,850 --> 00:00:59,920
to defer its execution until
after something happens.

22
00:00:59,920 --> 00:01:02,210
In this case,
after the request completes.

23
00:01:02,210 --> 00:01:05,090
You can think of an asynchronous request
like putting a cake in an oven and

24
00:01:05,090 --> 00:01:07,970
setting a timer to indicate when
the cake will finish baking.

25
00:01:07,970 --> 00:01:11,940
While the cake is baking we can go do
other things like make frosting, but

26
00:01:11,940 --> 00:01:15,610
as soon as the timer goes off, we need
to pull the cake out of the oven.

27
00:01:15,610 --> 00:01:18,710
Pulling the cake out of the oven
is like our completion handler,

28
00:01:18,710 --> 00:01:21,500
it's what we do as soon
as the timer goes off.

29
00:01:21,500 --> 00:01:24,340
In the same way,
we want to make the second request only

30
00:01:24,340 --> 00:01:27,550
after the first request finishes and
we've gotten a random page number.

31
00:01:27,550 --> 00:01:31,630
In the second request we'll
define another completion handler

32
00:01:31,630 --> 00:01:35,490
to handle getting a random photo
from the random page of results.

33
00:01:35,490 --> 00:01:37,840
So you can see how to
achieve this flow of steps,

34
00:01:37,840 --> 00:01:40,450
we're chaining together
asynchronous requests.

35
00:01:40,450 --> 00:01:44,040
When one request finishes,
we'll move on to the next and so forth.

36
00:01:44,040 --> 00:01:47,700
This kind of chaining of asynchronous
network tasks is a common occurrence and

37
00:01:47,700 --> 00:01:50,150
there's some popular frameworks
out there for dealing with this.

38
00:01:50,150 --> 00:01:52,260
We won't go into detail about
them in this course though but

39
00:01:52,260 --> 00:01:54,760
if you're curious, you should check
out the links in the instructor notes.
