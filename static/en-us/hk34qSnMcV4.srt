1
00:00:00,160 --> 00:00:03,330
Now that we have seen how pipelines work and how

2
00:00:03,330 --> 00:00:07,170
they are affected by hazards and dependencies, let's talk about

3
00:00:07,170 --> 00:00:10,760
how many stages a pipeline should have. In the pipelines

4
00:00:10,760 --> 00:00:13,800
we have seen so far, the ideal CPI is one. We

5
00:00:13,800 --> 00:00:16,930
will later, in this course, see pipelines where the ideal

6
00:00:16,930 --> 00:00:19,280
CPI will be larger than one because they try to

7
00:00:19,280 --> 00:00:22,490
do more than one instruction per cycle. But regardless, there

8
00:00:22,490 --> 00:00:25,958
is some ideal CPI that the pipeline should be achieving, and

9
00:00:25,958 --> 00:00:29,086
it boils down to executing some number of instructions

10
00:00:29,086 --> 00:00:32,960
every single cycle. Now let's consider what happens when

11
00:00:32,960 --> 00:00:36,650
we add more stages to the pipeline. We get

12
00:00:36,650 --> 00:00:40,150
more hazards this way. We have already seen that some

13
00:00:40,150 --> 00:00:42,870
of the dependencies caused a number of stalls to

14
00:00:42,870 --> 00:00:45,658
flush cycles that depend on how deep the pipeline

15
00:00:45,658 --> 00:00:48,174
is; for example, if a branch is resolved in

16
00:00:48,174 --> 00:00:51,030
the second or third stage of the pipeline, we only

17
00:00:51,030 --> 00:00:53,410
have to flush one or two instructions that

18
00:00:53,410 --> 00:00:57,497
we have incorrectly fetched. If the pipeline involves

19
00:00:57,497 --> 00:01:00,577
branches in something like 15 cycle, then we

20
00:01:00,577 --> 00:01:03,965
will flush 14 instructions when have a branch that

21
00:01:03,965 --> 00:01:07,220
we incorrectly resolve. So we have more hazards

22
00:01:07,220 --> 00:01:09,970
when we have more stages. And what that

23
00:01:09,970 --> 00:01:12,610
does, is it adds more of that CPI

24
00:01:12,610 --> 00:01:16,595
penalty. So the CPI increases because of that penalty

25
00:01:16,595 --> 00:01:19,869
that we have when we have a hazard. But

26
00:01:19,869 --> 00:01:23,687
with more stages, there is less work per stage, which

27
00:01:23,687 --> 00:01:27,200
means that our cycle time can be decreased. Less

28
00:01:27,200 --> 00:01:30,180
work per stage means that every cycle there is less

29
00:01:30,180 --> 00:01:35,550
work to do, which means we can do it in less time, so we can speed up our clock.

30
00:01:35,550 --> 00:01:38,420
We already know the iron law, which says that the

31
00:01:38,420 --> 00:01:41,920
execution time is equal to the number of instructions times

32
00:01:41,920 --> 00:01:44,997
the CPI times the cycle time. If we have the

33
00:01:44,997 --> 00:01:48,132
same number of instructions because we're just trying to figure

34
00:01:48,132 --> 00:01:50,754
out for the same instruction set whether we should have

35
00:01:50,754 --> 00:01:53,486
a processor that has more or fewer stages. If we

36
00:01:53,486 --> 00:01:56,660
increase the number of stages, our CPI goes up, which

37
00:01:56,660 --> 00:02:00,800
increases execution time, but the cycle time drops, which decreases

38
00:02:00,800 --> 00:02:04,022
execution time. So the number of stages needs to be

39
00:02:04,022 --> 00:02:07,056
chosen in a way that balances the CPI and the cycle

40
00:02:07,056 --> 00:02:09,720
time; you don't want to have to few stages

41
00:02:09,720 --> 00:02:12,828
because then your cycle time will be too long, but

42
00:02:12,828 --> 00:02:15,714
you don't want to have too many stages because

43
00:02:15,714 --> 00:02:18,948
then your CPI will be too high. We can plot

44
00:02:18,948 --> 00:02:21,828
the number of stages here and how execution time

45
00:02:21,828 --> 00:02:25,170
depends on it, and this is what it looks like.

46
00:02:25,170 --> 00:02:28,514
As you increase the number of stages, the execution

47
00:02:28,514 --> 00:02:32,390
time drops because you still don't have too many hazards.

48
00:02:33,450 --> 00:02:35,794
But you're improving the clock cycle time. At

49
00:02:35,794 --> 00:02:39,028
some point, you get fewer benefits from reducing

50
00:02:39,028 --> 00:02:41,877
the cycle time, and the CPI increase starts

51
00:02:41,877 --> 00:02:45,132
to hurt. Beyond some point, you are no longer

52
00:02:45,132 --> 00:02:48,618
shortening the cycle time very much, but you're

53
00:02:48,618 --> 00:02:51,440
suffering a lot from hazards that are now

54
00:02:51,440 --> 00:02:55,258
causing dependencies that cause many, many cycles of

55
00:02:55,258 --> 00:02:58,568
stores or flushes. So the bottom of this curve,

56
00:02:58,568 --> 00:03:01,247
for modern processors, would be at be at something like

57
00:03:01,247 --> 00:03:03,584
30 to 40 stages, which would be a very, very

58
00:03:03,584 --> 00:03:06,360
deep pipeline. So this would be if you only consider

59
00:03:06,360 --> 00:03:09,952
performance. So for performance, we want a pipeline that is

60
00:03:09,952 --> 00:03:12,330
30 to 40 stages deep, but we need to consider

61
00:03:12,330 --> 00:03:15,992
power. If we have more stages, we are shortening the

62
00:03:15,992 --> 00:03:19,440
cycle time, so we have more cycles per second. And

63
00:03:19,440 --> 00:03:24,160
in each of those cycles, we now have more pipeline latches

64
00:03:24,160 --> 00:03:28,016
that spend energy latching temporary results. So

65
00:03:28,016 --> 00:03:32,270
power quickly increases with the number of stages.

66
00:03:32,270 --> 00:03:34,970
If we plot power, it does something

67
00:03:34,970 --> 00:03:38,610
like this. So because of performance and power

68
00:03:38,610 --> 00:03:41,880
considerations, we want to choose something that

69
00:03:41,880 --> 00:03:44,722
is not in this performance optimal point. We

70
00:03:44,722 --> 00:03:49,434
want something that is also power efficient, so we end up with 10 to 15

71
00:03:49,434 --> 00:03:53,520
stages in modern processors. So again, this is not because

72
00:03:53,520 --> 00:03:58,540
performance is best when you have this many stages. It's because

73
00:03:58,540 --> 00:04:02,790
it's the number of stages that balances pretty good performance

74
00:04:02,790 --> 00:04:07,060
with relatively low power consumption. Or at least manageable power consumption.
