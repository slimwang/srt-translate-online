1
00:00:00,200 --> 00:00:02,340
Cool, let's take a look at a solution to the parsing

2
00:00:02,340 --> 00:00:06,320
CSV files exercise. We're going to begin here by opening the file. The

3
00:00:06,320 --> 00:00:08,510
next thing to note is that we're going to read the first

4
00:00:08,510 --> 00:00:12,180
line of that file, and split it using the common character as

5
00:00:12,180 --> 00:00:15,350
the delimiter. This will give us a list of values that

6
00:00:15,350 --> 00:00:18,990
we can use as keys for each one of the data items

7
00:00:18,990 --> 00:00:22,430
that we pull out of this file later on. Okay, we're

8
00:00:22,430 --> 00:00:25,320
then going to loop through the lines of the file. We'll break out

9
00:00:25,320 --> 00:00:28,270
of this loop once we've processed ten lines. For every

10
00:00:28,270 --> 00:00:30,920
line up to that, we're going to split the line, again using

11
00:00:30,920 --> 00:00:34,050
the comma as the delimiter, and then we're going to initialize this

12
00:00:34,050 --> 00:00:36,980
empty dictionary. Now, the entry each time through is going to

13
00:00:36,980 --> 00:00:41,110
be this data item that we'll construct using the keys

14
00:00:41,110 --> 00:00:43,320
that we got from the first line of the file, and

15
00:00:43,320 --> 00:00:46,870
the individual field values that we just got here. We going to

16
00:00:46,870 --> 00:00:50,670
loop through the fields and using enumerate, we'll get a index

17
00:00:50,670 --> 00:00:53,740
value in addition to the value for each item

18
00:00:53,740 --> 00:00:56,740
in this field's list. That would allow us to access

19
00:00:56,740 --> 00:00:59,430
the appropriate value in the header to use as

20
00:00:59,430 --> 00:01:03,230
a key for that particular field in our entry or

21
00:01:03,230 --> 00:01:06,450
data item. And then we'll use the corresponding value

22
00:01:06,450 --> 00:01:09,890
as the value for that particular field. Now note that

23
00:01:09,890 --> 00:01:12,510
in both cases we're using the strip method here

24
00:01:12,510 --> 00:01:15,990
in here in order to pull off any extraneous white-space

25
00:01:15,990 --> 00:01:19,910
around either the header value or the individual value for

26
00:01:19,910 --> 00:01:22,940
this line of the file. This is our first example

27
00:01:22,940 --> 00:01:25,130
of data cleaning which is another major theme of this

28
00:01:25,130 --> 00:01:28,750
course. In Excel files or .CSV files, a lot of times

29
00:01:28,750 --> 00:01:32,700
you'll have Garbage white space that surround values. You don't

30
00:01:32,700 --> 00:01:35,280
really notice them or care about them in the file

31
00:01:35,280 --> 00:01:37,550
itself. But, when you're processing them in Python, they can

32
00:01:37,550 --> 00:01:40,830
make a big difference especially if you're doing comparisons between values.

33
00:01:40,830 --> 00:01:45,080
So, it's always a good idea to use strip. Okay,

34
00:01:45,080 --> 00:01:47,630
finally, we're going to append that one data item to

35
00:01:47,630 --> 00:01:51,170
our data array. So that it's included in the list

36
00:01:51,170 --> 00:01:53,530
of items that we return from this function first file.
