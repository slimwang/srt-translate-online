1
00:00:00,430 --> 00:00:05,550
Just as materials can change width and
height, they can also change elevation.

2
00:00:05,550 --> 00:00:08,119
We saw a glimpse of this with
the magnetic reaction of

3
00:00:08,119 --> 00:00:09,620
buttons to the touch of your finger,

4
00:00:09,620 --> 00:00:13,360
but this can also occur with
interactions such as scrolling.

5
00:00:13,360 --> 00:00:18,030
Consider two surfaces which start off
in the same plane and move together and

6
00:00:18,030 --> 00:00:19,030
lock step.

7
00:00:19,030 --> 00:00:21,950
At a certain point,
one surface may need to stick and

8
00:00:21,950 --> 00:00:24,490
raise up to allow
the other to pass below it.

9
00:00:24,490 --> 00:00:28,000
We call this a seam to step transition.

10
00:00:28,000 --> 00:00:30,741
The two adjacent surfaces
first form a seam.

11
00:00:30,741 --> 00:00:35,330
But when the lower surface slides
below the other, they form a step.

12
00:00:35,330 --> 00:00:39,810
>> For example, this app employs
an extended app bar that collapses to

13
00:00:39,810 --> 00:00:44,470
a standard height and pins to the top
of the screen as the user scrolls.

14
00:00:44,470 --> 00:00:47,290
So you see the elevation increasing.

15
00:00:47,290 --> 00:00:52,250
Now, you can build this effect entirely
in XML using the new at bar layout and

16
00:00:52,250 --> 00:00:54,510
collapsing toolbar layout.

17
00:00:54,510 --> 00:00:55,970
Let's look at some layout XML code.

18
00:00:56,990 --> 00:00:59,780
At the root,
we start with coordinator layout

19
00:00:59,780 --> 00:01:03,900
which helps coordinate behaviors
across several kinds of views.

20
00:01:03,900 --> 00:01:06,980
In this case it will coordinate
the scrolling of a list

21
00:01:06,980 --> 00:01:09,400
with the scrolling of our app bar.

22
00:01:09,400 --> 00:01:12,990
Since CoordinatorLayout is in
the android design support library.

23
00:01:12,990 --> 00:01:16,210
We'll need to references it
by its full class name and

24
00:01:16,210 --> 00:01:21,080
also include the app name space for
support library attributes.

25
00:01:21,080 --> 00:01:24,580
We'll use and AppBarLayout
under the CoordinatorLayout and

26
00:01:24,580 --> 00:01:27,455
give it the expanded
height we want of 168dp.

27
00:01:28,490 --> 00:01:31,470
Within that we'll include
a CollapsingToolbarLayout and

28
00:01:31,470 --> 00:01:35,790
tell it to scroll off the screen
until it reaches the collapsed size,

29
00:01:35,790 --> 00:01:38,720
that's this exitUntilCollapsed flag.

30
00:01:38,720 --> 00:01:41,420
Inside that we'll place
our Toolbar widget.

31
00:01:41,420 --> 00:01:44,150
And give it the smaller height we
want to collapse to the 56dps.

32
00:01:45,350 --> 00:01:48,040
Note that the collapsing toolbar
layout will be responsible for

33
00:01:48,040 --> 00:01:49,260
drawing the title.

34
00:01:49,260 --> 00:01:53,580
The toolbar widget here is only
responsible for drawing the icons.

35
00:01:53,580 --> 00:01:57,220
Finally, the other widget
here will be a RecyclerView,

36
00:01:57,220 --> 00:02:00,560
which uses a special
predefined layout behavior

37
00:02:00,560 --> 00:02:05,070
that triggers appbar_scrolling
when the RecyclerView is scrolled.

38
00:02:05,070 --> 00:02:08,860
The Android design support
library does all the rest.

39
00:02:08,860 --> 00:02:13,210
Check out the documentation for scroll
flags in layout behaviors to find out

40
00:02:13,210 --> 00:02:16,430
about other great scrolling behaviors
you can build with the library.

41
00:02:17,550 --> 00:02:21,210
>> Using these techniques we can
divide our UIs into surfaces

42
00:02:21,210 --> 00:02:24,880
to communicate the relationship and
provide interaction cues.

43
00:02:24,880 --> 00:02:26,950
Interfaces should be dynamic.

44
00:02:26,950 --> 00:02:28,940
Responding to user interaction and

45
00:02:28,940 --> 00:02:31,860
clearly communicating
any changes in state.

46
00:02:31,860 --> 00:02:35,480
Remember these techniques when trying
to express the relationship between

47
00:02:35,480 --> 00:02:36,670
your UI elements.

48
00:02:36,670 --> 00:02:39,550
They'll help make your screens
immediately comprehensible and

49
00:02:39,550 --> 00:02:41,710
make your app much more intuitive.

50
00:02:41,710 --> 00:02:45,300
Let's go to James, who will show you
how to put this to practise with code.
