1
00:00:00,330 --> 00:00:05,295
Well, clearly you'd like to have a description of what those components do

2
00:00:05,295 --> 00:00:10,210
orf what those connectors do. ACME doesn't provide this, but you

3
00:00:10,210 --> 00:00:16,370
can well imagine some additional syntax for describing those kinds of behaviors.

4
00:00:16,370 --> 00:00:20,420
Also, ACME doesn't have representation for functional properties. So going back

5
00:00:20,420 --> 00:00:25,820
to our original understanding of systems having function behavior and structure,

6
00:00:25,820 --> 00:00:29,090
ACME tells you a lot about structure, but it doesn't tell you much about

7
00:00:29,090 --> 00:00:34,560
function behavior. Also, ACME doesn't directly provide a way for connecting code

8
00:00:34,560 --> 00:00:38,080
with architectural elements, and you can imagine that going in either direction.

9
00:00:38,080 --> 00:00:41,760
That is, you might like to take an architectural description and

10
00:00:41,760 --> 00:00:47,270
automatically generate stub code for it. Similarly, if you've got some existing

11
00:00:47,270 --> 00:00:51,840
code, you can imagine a tool that can do some kind of analysis on that code to

12
00:00:51,840 --> 00:00:57,310
generate an architectural description that can then be imported into ACME and

13
00:00:57,310 --> 00:01:02,700
you can visualize it using the ACME Studio Graphical Editor. Also, of course,

14
00:01:02,700 --> 00:01:05,880
is the fact that ACME doesn't say anything at all about non-functional

15
00:01:05,880 --> 00:01:10,940
requirements other than what the property sub-language allows you to describe on

16
00:01:10,940 --> 00:01:14,710
your own. The essential role of non-functional requirements in any

17
00:01:14,710 --> 00:01:18,790
architectural description means that it would be of value to come up with some

18
00:01:18,790 --> 00:01:22,670
way in a standard fashion, trying to characterize these particular requirements.
