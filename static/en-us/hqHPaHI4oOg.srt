1
00:00:00,190 --> 00:00:03,658
The solution is something that we've seen in the previous examples. In order to

2
00:00:03,658 --> 00:00:07,879
update the move_dir vector, we query the state of the move-up, move-down, left,

3
00:00:07,879 --> 00:00:13,530
and right actions. And adjust the movement vector accordingly. Once this is

4
00:00:13,530 --> 00:00:17,700
done, we can test whether or not the length of the vector is equal to 0 or not.

5
00:00:17,700 --> 00:00:21,025
This gives us the ability to determine if the user's even pressed a key. If the

6
00:00:21,025 --> 00:00:25,656
user hasn't pressed a key. Then the length of mov_dir will actually be 0. We

7
00:00:25,656 --> 00:00:29,352
can test this with the LengthSquared function. It allows us to then only call

8
00:00:29,352 --> 00:00:34,142
normalize or multiply when a user has pressed a movement key. And of course all

9
00:00:34,142 --> 00:00:36,937
of this data after being computed gets funneled into setLinearVelocity so we

10
00:00:36,937 --> 00:00:41,085
can move our fancy awesome robot into the future. Now that we have the ability

11
00:00:41,085 --> 00:00:44,495
to move the player around the world using keys The next step is to figure out

12
00:00:44,495 --> 00:00:49,649
how they actually fire their fancy missiles towards the other robots.
