1
00:00:01,160 --> 00:00:03,469
Structs are a great way to
encapsulate values, but

2
00:00:03,469 --> 00:00:05,410
we can take this one step further.

3
00:00:05,410 --> 00:00:08,610
Let's modify the original syntax for
creating a struct.

4
00:00:08,610 --> 00:00:12,110
Right now, we know that a struct
has the struct keyword and

5
00:00:12,110 --> 00:00:15,420
then we give the name of the struct
followed by variables or

6
00:00:15,420 --> 00:00:20,210
constants of any type, as many as we
want and these are known as properties.

7
00:00:20,210 --> 00:00:22,830
So I'm going to go ahead and
make a quick change to this.

8
00:00:22,830 --> 00:00:24,060
Here's the difference.

9
00:00:24,060 --> 00:00:27,490
With this syntax, we can see that
a struct can not only contain variables

10
00:00:27,490 --> 00:00:30,820
and constants, but
instances of any type.

11
00:00:30,820 --> 00:00:34,630
That means you can have strucks that
contain strucks, that contain strucks.

12
00:00:34,630 --> 00:00:37,630
Essentially, strucks
on strucks on strucks.

13
00:00:37,630 --> 00:00:40,650
Let's say we have the struct
representing a Song and

14
00:00:40,650 --> 00:00:45,390
inside the struct we have a property for
the song's title, its length.

15
00:00:45,390 --> 00:00:48,420
And also properties for
the artist first and last name.

16
00:00:49,540 --> 00:00:53,670
So as we define a struct like this,
maybe we decide that we want to include

17
00:00:53,670 --> 00:00:57,230
some more information about the artist
like their age and their hometown.

18
00:00:58,300 --> 00:01:01,370
We can go ahead and
add these properties like so.

19
00:01:01,370 --> 00:01:05,349
But this is beginning to look exactly
like the problem we had before structs.

20
00:01:05,349 --> 00:01:06,750
We just have a bunch of variables and

21
00:01:06,750 --> 00:01:09,910
constants and they're starting
to get a little disorganized.

22
00:01:09,910 --> 00:01:12,690
And all this related information
could continue to grow and

23
00:01:12,690 --> 00:01:14,600
get more unmanageable.

24
00:01:14,600 --> 00:01:18,390
The best way to handle this is by
pulling the artist data out of the song

25
00:01:18,390 --> 00:01:21,710
struct and creating a separate
struct that represents an artist.

26
00:01:22,970 --> 00:01:25,560
There we go now we have an artist
struct with first name,

27
00:01:25,560 --> 00:01:27,940
last name, age and hometown.

28
00:01:27,940 --> 00:01:30,880
And actually we could probably
get rid of this prefix

29
00:01:30,880 --> 00:01:33,030
because that would be redundant.

30
00:01:33,030 --> 00:01:36,800
Now here's the powerful part within
the song struct we can have our own

31
00:01:36,800 --> 00:01:39,660
property which itself is a struct.

32
00:01:39,660 --> 00:01:41,580
So let's do that now.

33
00:01:41,580 --> 00:01:45,560
So now the song struct itself contains
an artist and this is really nice and

34
00:01:45,560 --> 00:01:49,430
elegant and as we'll see later
expanding this to support

35
00:01:49,430 --> 00:01:53,990
multiple artist is actually
quite intuitive process as well.

36
00:01:53,990 --> 00:01:58,060
So how would we access the properties
of a struct within a struct?

37
00:01:58,060 --> 00:02:00,600
Let's go ahead and
see a code example to explain.

38
00:02:01,740 --> 00:02:03,830
First, we'll create an artist track.

39
00:02:03,830 --> 00:02:06,150
How about country music
artist Garth Brooks.

40
00:02:07,190 --> 00:02:09,710
We will use the syntax
we've seen before.

41
00:02:09,710 --> 00:02:14,350
For the first name we've given Garth,
for the last name Brooks, age 53 and

42
00:02:14,350 --> 00:02:17,020
home town is Tulsa, Oklahoma.

43
00:02:17,020 --> 00:02:21,270
And this is according to Wikipedia when
I looked it up a couple minutes ago.

44
00:02:21,270 --> 00:02:23,890
And now that we have our artist
struct creating a song struct

45
00:02:23,890 --> 00:02:25,870
becomes pretty simple.

46
00:02:25,870 --> 00:02:28,360
Let's create a struct for
his song Thunder Rolls.

47
00:02:29,490 --> 00:02:34,600
So we'll use the song name Thunder Rolls
which has a length of 3:42.

48
00:02:34,600 --> 00:02:36,820
And we could represent
this as a number but

49
00:02:36,820 --> 00:02:39,240
we're choosing to do it as a string for
right now.

50
00:02:39,240 --> 00:02:43,160
And the last property that this
initializer needs is an artist and

51
00:02:43,160 --> 00:02:46,950
low and behold we have this artist
instance right here called Garth.

52
00:02:46,950 --> 00:02:52,110
So we'll use Garth and there we go,
we have an instance of a song struct.

53
00:02:52,110 --> 00:02:55,550
Now to access the information about
the artist contained within is

54
00:02:55,550 --> 00:02:58,120
pretty straightforward and
uses the dot operator again.

55
00:02:59,260 --> 00:03:04,640
So we'll start with Thunder Rolls
then .artist and if we go on we

56
00:03:04,640 --> 00:03:09,960
look to see what it contains, we can see
all the properties of the artist within.

57
00:03:09,960 --> 00:03:13,650
And if we want to take this one step
further we can use another dot operator

58
00:03:13,650 --> 00:03:17,640
to access one of the properties with
an artist like last name in this case

59
00:03:17,640 --> 00:03:18,960
which is Brooks.

60
00:03:18,960 --> 00:03:21,980
So I'm sure you can start thinking
of some pretty complex and

61
00:03:21,980 --> 00:03:24,800
cool relationships of
structs within structs.
