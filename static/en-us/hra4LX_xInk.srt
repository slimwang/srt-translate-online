1
00:00:00,500 --> 00:00:03,280
You are thinking, wow this sounds tedious

2
00:00:03,280 --> 00:00:06,270
and not performance conscious if exokernel has to

3
00:00:06,270 --> 00:00:13,340
validate the key every time for the library to use it. Well, it depends on what

4
00:00:13,340 --> 00:00:18,710
we mean by a resource. Let's look at some examples. Here is an example of a

5
00:00:18,710 --> 00:00:23,332
candidate resource, a TLB entry. TLB entry is

6
00:00:23,332 --> 00:00:25,870
going to establish a mapping between a virtual

7
00:00:25,870 --> 00:00:31,430
page to a physical page. That mapping of the virtual page

8
00:00:31,430 --> 00:00:36,530
to the physical page is done by the library. Now, once the mapping has been done

9
00:00:36,530 --> 00:00:41,630
by the library, it presents the mapping to the exokernel along

10
00:00:41,630 --> 00:00:46,900
with capability of the key, the encrypted key that it has for a particular

11
00:00:46,900 --> 00:00:52,280
TLB entry. Exokernel validates it and puts this

12
00:00:52,280 --> 00:00:59,260
mapping into the specific TLB entry of the hardware TLB. Now this is a

13
00:00:59,260 --> 00:01:02,120
privileged operation. Putting an entry into the

14
00:01:02,120 --> 00:01:04,660
hardware TLB, is a privileged operation. The

15
00:01:04,660 --> 00:01:06,650
library operating system cannot do it by

16
00:01:06,650 --> 00:01:09,160
itself, because it doesn't have the same

17
00:01:09,160 --> 00:01:14,820
privilege as exokernel. And therefore, once that

18
00:01:14,820 --> 00:01:17,510
capability in the form of the encrypted key

19
00:01:17,510 --> 00:01:20,040
for this TLB entry is presented to

20
00:01:20,040 --> 00:01:23,980
exokernel, then exokernel, on behalf of that operating

21
00:01:23,980 --> 00:01:26,940
system, is putting that mapping that has

22
00:01:26,940 --> 00:01:30,090
been established by the library operating system into

23
00:01:30,090 --> 00:01:36,740
the specific TLB entry of the hardware TLB. Once this entry has been put into

24
00:01:36,740 --> 00:01:42,570
the TLB, the process that is going to be using that virtual page, when it is

25
00:01:42,570 --> 00:01:45,350
running, can use this multiple times

26
00:01:45,350 --> 00:01:49,260
without exokernel intervention. So even though putting

27
00:01:49,260 --> 00:01:55,830
it into the hardware TLB require the intervention of exokernel because we are

28
00:01:55,830 --> 00:02:01,630
messing with hardware. Once that entry has been put in, that entry is

29
00:02:01,630 --> 00:02:04,280
on behalf of this library operating system.

30
00:02:04,280 --> 00:02:07,280
And processes of that library operating system,

31
00:02:07,280 --> 00:02:10,050
when they are running on the CPU, can

32
00:02:10,050 --> 00:02:13,900
access the TLB. And do the translation any number

33
00:02:13,900 --> 00:02:15,775
of times because all of that is happening

34
00:02:15,775 --> 00:02:18,630
under hardware control and exokernel, of course, is not

35
00:02:18,630 --> 00:02:23,580
in the middle of any of that. So that gives you an idea of how, even though

36
00:02:24,590 --> 00:02:27,890
we are seeing that in order to do certain

37
00:02:27,890 --> 00:02:32,580
things in the hardware, you need exokernel help for

38
00:02:32,580 --> 00:02:38,260
the library operating system. The normal use of a hardware resource is not

39
00:02:38,260 --> 00:02:44,640
going to be in any way affected by the fact that exokernel is in the middle

40
00:02:44,640 --> 00:02:47,870
between the hardware and the library operating

41
00:02:47,870 --> 00:02:50,250
systems. Here is another example of a

42
00:02:50,250 --> 00:02:53,970
candidate resource. Let's say that the operating

43
00:02:53,970 --> 00:02:58,250
system wants to install a packet filter that

44
00:02:58,250 --> 00:03:03,070
needs to be executed every time a network packet arrives on behalf of a

45
00:03:03,070 --> 00:03:08,470
library operating system. Predicates for looking at

46
00:03:08,470 --> 00:03:12,310
this incoming packet are loaded into the kernel

47
00:03:12,310 --> 00:03:14,303
by the library operating system. Now, this

48
00:03:14,303 --> 00:03:17,010
is a heavy-duty operation, because you're doing

49
00:03:17,010 --> 00:03:20,260
it with the help of exokernel. But

50
00:03:20,260 --> 00:03:23,400
once those predicates have been loaded into exokernel

51
00:03:23,400 --> 00:03:25,630
by the library operating system, on

52
00:03:25,630 --> 00:03:28,910
every packet arrival exokernel will automatically check

53
00:03:28,910 --> 00:03:31,860
it using those predicates. So those are

54
00:03:31,860 --> 00:03:35,690
examples of candidate resources that tell you

55
00:03:35,690 --> 00:03:39,110
that establishing the binding may be expensive

56
00:03:39,110 --> 00:03:41,750
but using the binding, once established, does

57
00:03:41,750 --> 00:03:44,750
not incur the intervention by exokernal and

58
00:03:44,750 --> 00:03:47,010
therefore it can happen at hardware speeds.
