1
00:00:00,220 --> 00:00:05,280
Now we will see how loop unrolling works. Suppose we have this loop

2
00:00:05,280 --> 00:00:10,140
in the C language, where i goes from 1,000 down to zero. And in each

3
00:00:10,140 --> 00:00:15,830
iteration of the loop, we add something to the ith element of the array a.

4
00:00:15,830 --> 00:00:20,210
When we translate this into instructions, we get a loop like the one we

5
00:00:20,210 --> 00:00:24,360
have already seen. We load from the array elements so

6
00:00:24,360 --> 00:00:30,100
R1 is now the pointer to the ith element of the array. We load that. We add R3,

7
00:00:30,100 --> 00:00:37,230
that would be Rs to that and then we store it back into the A of i. And

8
00:00:37,230 --> 00:00:42,100
then we move our pointer four places down. That's equivalent to decrementing i.

9
00:00:42,100 --> 00:00:46,190
And then we check whether the pointer has reached the beginning of the array,

10
00:00:46,190 --> 00:00:50,730
which is equivalent to checking whether i is zero. Now let's

11
00:00:50,730 --> 00:00:56,560
apply loop unrolling to this loop. We will do what we call unrolling once.

12
00:00:56,560 --> 00:01:01,810
We unroll the loop by making each iteration of the new loop do more than one

13
00:01:01,810 --> 00:01:07,790
iteration of the old loop. So, when we unroll once, what we want to do is now

14
00:01:07,790 --> 00:01:13,010
each iteration of the new loop will be doing the work that it should be doing,

15
00:01:13,010 --> 00:01:17,250
plus the work of the next iteration. However, if we just do it this way,

16
00:01:17,250 --> 00:01:22,590
then we are doing the same work twice. So, instead, what we will do is we will

17
00:01:22,590 --> 00:01:27,180
adjust the index so that this is doing the ith element of the array. And then,

18
00:01:27,180 --> 00:01:33,630
i would be decremented. And the next iteration would now do a of i minus 1.

19
00:01:33,630 --> 00:01:39,120
However, this loop still counts one at a time.

20
00:01:39,120 --> 00:01:43,810
So we do this, we add s to the next element in the next iteration of the loop.

21
00:01:43,810 --> 00:01:49,100
We would now add s again to the same element we already processed here.

22
00:01:49,100 --> 00:01:54,040
So we also need to adjust the loop counter update to update by 2 now.

23
00:01:54,040 --> 00:01:58,280
And now we have a new loop that has half as many iterations,

24
00:01:58,280 --> 00:02:02,280
each of which is doing the work of the two original iterations.

25
00:02:02,280 --> 00:02:07,900
We could unroll the loop more than once. For example, unrolling two times would

26
00:02:07,900 --> 00:02:13,370
mean that this loop is doing now three times the work of the original iteration.

27
00:02:13,370 --> 00:02:19,700
For this once unrolled loop, the instructions would look like this.

28
00:02:19,700 --> 00:02:23,590
We would have the actual work of the one iteration.

29
00:02:23,590 --> 00:02:28,520
These are the same instructions as here. We now want to do this work once more.

30
00:02:28,520 --> 00:02:34,000
This would be this. However, if we just copy the instructions again,

31
00:02:34,000 --> 00:02:40,590
we would be doing the same work twice. We would just add R3 again to our

32
00:02:40,590 --> 00:02:46,410
same element a of i. So, instead, we will adjust the offset here so

33
00:02:46,410 --> 00:02:51,770
that we are accessing the element right below the one that R1 is pointing to.

34
00:02:51,770 --> 00:02:57,060
This would be the a of i minus 1. And now we need our loop counter update and

35
00:02:57,060 --> 00:03:02,750
the actual loop back branch. But those we cannot simply copy,

36
00:03:02,750 --> 00:03:07,650
just like here we had to update the counter to count by two iterations.

37
00:03:07,650 --> 00:03:11,790
In this code, we were decrementing R1 to move to the element below.

38
00:03:11,790 --> 00:03:16,440
Now we're processing two elements at a time, so we need to move 8 bytes at

39
00:03:16,440 --> 00:03:22,210
a time. So the approach to unrolling once is take the original work, copy twice,

40
00:03:22,210 --> 00:03:27,580
adjust the second copy so that it does the second iteration's worth of work, and

41
00:03:27,580 --> 00:03:32,520
then adjust the loop count so that it's moving by two iterations,

42
00:03:32,520 --> 00:03:37,660
not by one. This is what it means to unroll once. So

43
00:03:37,660 --> 00:03:40,530
keep in mind that when we are doing two iterations at a time,

44
00:03:40,530 --> 00:03:45,260
we have unrolled the loop once because we have added one iteration

45
00:03:45,260 --> 00:03:49,790
of the original loop in addition to what the iteration normally would be doing.

46
00:03:49,790 --> 00:03:55,200
Unrolling twice would mean that we're doing three iterations at the time.

47
00:03:55,200 --> 00:03:59,410
Unrolling three times means that were going four times the work and so

48
00:03:59,410 --> 00:04:04,300
on. It is a very common mistake that when you're asked to unroll the loop twice,

49
00:04:04,300 --> 00:04:09,500
unroll it this way. This is unrolling only once. Again, unrolling twice is not,

50
00:04:09,500 --> 00:04:14,060
do two iterations at a time. It's do one plus two iterations at a time.

51
00:04:14,060 --> 00:04:19,519
Because you always have to do one iteration, so this loop is not unrolled once,

52
00:04:19,519 --> 00:04:23,080
it is not unrolled at all. This is unrolled once.
