1
00:00:00,006 --> 00:00:04,643
Our old app is currently 30% Swift and
70% Objective-C.

2
00:00:04,643 --> 00:00:09,611
So we had a lot of Objective-C
code that was interopting to Swift

3
00:00:09,611 --> 00:00:11,544
with the Swift headers.

4
00:00:11,544 --> 00:00:16,687
And a lot of the time because of
implicitly unwrapped optionals,

5
00:00:16,687 --> 00:00:21,457
we would expect some variables
to be non-nil but because for

6
00:00:21,457 --> 00:00:24,168
some reason or for some edge case,

7
00:00:24,168 --> 00:00:29,526
we had a nil parameter passed through
that would cause lots of bugs.

8
00:00:29,526 --> 00:00:32,540
And I think we had thousands and
thousands of crashes in our current app

9
00:00:32,540 --> 00:00:34,980
because of that interop
issue in general.

10
00:00:34,980 --> 00:00:39,928
And that's actually one of the reasons
we decided that like going 100%

11
00:00:39,928 --> 00:00:43,540
Swift is important for
both our developer happiness,

12
00:00:43,540 --> 00:00:47,700
because this is a much nicer code
base to work with, but also for

13
00:00:47,700 --> 00:00:53,180
the happiness of our users, who will
be able to use a more robust product.

14
00:00:53,180 --> 00:00:57,876
So the most common interoperability
ability challenge I've encountered

15
00:00:57,876 --> 00:01:01,007
is when I'm going from
Swift to Objective-C, so

16
00:01:01,007 --> 00:01:04,739
my Objective-C code is
consuming my Swift code.

17
00:01:04,739 --> 00:01:09,690
And the challenge I face is that all the
time my Swift code, it includes structs

18
00:01:09,690 --> 00:01:14,000
and enums and other constructs that
are specific to Swift only, so

19
00:01:14,000 --> 00:01:18,010
it's very difficult, or actually Xcode
doesn't make it possible at all to

20
00:01:19,290 --> 00:01:22,950
create headers for those in Objective-C.

21
00:01:22,950 --> 00:01:27,350
And in order to have your Objective-C
code consume that's that Swift code,

22
00:01:27,350 --> 00:01:30,850
you have to create like wrapper classes
that kind of shim your code from Swift

23
00:01:30,850 --> 00:01:34,680
to Objective-C, which leads to like more
lines of code, more files of code, and

24
00:01:34,680 --> 00:01:38,330
more complexity, which was probably
one of the larger reasons as to why we

25
00:01:38,330 --> 00:01:41,683
decided to do a rewrite where we
don't run into issues like this.

26
00:01:41,683 --> 00:01:45,600
After we completed our nullability
audit, it wasn't completely smooth

27
00:01:45,600 --> 00:01:51,240
sailing, because we realized that our
nullability audit actually exposed some

28
00:01:51,240 --> 00:01:53,530
bad practices that we were doing
in our Objective-C code base,

29
00:01:53,530 --> 00:01:57,640
because sometimes things that shouldn't
be nil ever, we were setting to nil,

30
00:01:57,640 --> 00:02:00,160
just not realizing that we were.

31
00:02:00,160 --> 00:02:04,760
But thankfully, with Apple's toolkit
they've given us with Objective-C,

32
00:02:04,760 --> 00:02:08,156
and when they introduced
the nullability audit,

33
00:02:08,156 --> 00:02:11,370
so the ability to do them, they'll
give you warnings every time you set

34
00:02:11,370 --> 00:02:13,680
something to nil that's
not supposed to be nil.

35
00:02:13,680 --> 00:02:16,860
And that was helpful in us improving
the quality of our code base,

36
00:02:16,860 --> 00:02:19,630
making it more robust by
removing those warnings,

37
00:02:19,630 --> 00:02:24,950
by making sure we'd never set those
values to nil, or if they should be nil,

38
00:02:24,950 --> 00:02:29,190
by making sure that we
make them nullable.

39
00:02:29,190 --> 00:02:33,139
There were actually no features that
were especially difficult to port from

40
00:02:33,139 --> 00:02:35,120
Objective-C to Swift.

41
00:02:35,120 --> 00:02:38,950
And that's because porting anything
from the Objective-C to Swift

42
00:02:38,950 --> 00:02:40,710
is relatively straightforward.

43
00:02:40,710 --> 00:02:44,061
Because Objective-C, when you went
from Objective-C to Swift, like,

44
00:02:44,061 --> 00:02:47,610
all the constructs that exist in
Objective-C also exist in Swift.

45
00:02:47,610 --> 00:02:49,830
So you can literally just go
from a syntactical change

46
00:02:49,830 --> 00:02:51,810
from Objective-C to Swift.

47
00:02:51,810 --> 00:02:56,460
The point of our rewrite, though, was
not to port the code like one to one,

48
00:02:56,460 --> 00:03:00,800
it was to make architectural decisions
that led to a more robust code base.

49
00:03:00,800 --> 00:03:02,399
And that meant a lot of whiteboarding.

50
00:03:02,399 --> 00:03:05,633
There were multiple correct solutions,
but probably one best solution.

51
00:03:05,633 --> 00:03:07,959
So it meant a lot of like
just meeting as a team and

52
00:03:07,959 --> 00:03:10,064
figuring out what that
best solution was.

53
00:03:10,064 --> 00:03:14,981
And that's where I think
our brains worked the most.

54
00:03:14,981 --> 00:03:20,950
And it was an engaging, but
also a difficult problem to solve.

55
00:03:20,950 --> 00:03:24,160
So for the most part,
if I was writing a new app,

56
00:03:24,160 --> 00:03:27,090
I would write it 100% in Swift, because

57
00:03:27,090 --> 00:03:32,320
almost all the features that exist
in Objective-C also exist in Swift.

58
00:03:32,320 --> 00:03:36,468
That said, if I wanted to do something
crazy like method swizzling,

59
00:03:36,468 --> 00:03:41,628
I think because Objective-C's a dynamic
language, I would do it in Objective-C.

60
00:03:41,628 --> 00:03:44,982
That said, I don't think I'd ever
be doing method swizzling if

61
00:03:44,982 --> 00:03:46,917
I'm doing something the right way.

62
00:03:46,917 --> 00:03:51,747
So I would probably go 100% Swift and
maybe some Objective-C dependencies if

63
00:03:51,747 --> 00:03:56,227
it made my life easier, but write my
main product in Swift, because it gives

64
00:03:56,227 --> 00:04:00,147
you all the powers of map and
flat map and generics and structs, and

65
00:04:00,147 --> 00:04:04,910
value types, which is very powerful
that Objective-C just doesn't give you.
