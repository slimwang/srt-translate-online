1
00:00:00,000 --> 00:00:06,000
In this problem, we're going to modify the lexer to handle hexadecimal numbers.

2
00:00:06,000 --> 00:00:08,000
So what it is hexadecimal number?

3
00:00:08,000 --> 00:00:11,000
Well, more importantly, what is a decimal number?

4
00:00:11,000 --> 00:00:12,000
Let's go over this very quickly.

5
00:00:12,000 --> 00:00:17,000
If you have--let's say a number we write out--451--we consider this the ones place,

6
00:00:17,000 --> 00:00:19,000
the tens place, and the hundreds place.

7
00:00:19,000 --> 00:00:24,000
We do that because this is the 0th position, the 1th, and the 2nd,

8
00:00:24,000 --> 00:00:29,000
and 10 to the 0, 10 to the 1, and 10 to the 2.

9
00:00:29,000 --> 00:00:31,000
This is one, tens, hundreds.

10
00:00:31,000 --> 00:00:38,000
We calculate the value of this by multiplying the position of the digit by the value of the place.

11
00:00:38,000 --> 00:00:43,000
So this would yield 451.

12
00:00:43,000 --> 00:00:45,000
In computer science, we often use base 2.

13
00:00:45,000 --> 00:00:50,000
That's because the electronic circuits that we use in all of our fun little computers

14
00:00:50,000 --> 00:00:54,000
are most easily designed with 2 states--on and off.

15
00:00:54,000 --> 00:00:59,000
That's represented by a 1 or a 0.

16
00:00:59,000 --> 00:01:03,000
So the numbers that we often use are binary.

17
00:01:03,000 --> 00:01:07,000
Let's say we have this number--1101.

18
00:01:07,000 --> 00:01:11,000
In this case, it's not the ones place, the tens place, the hundreds place,

19
00:01:11,000 --> 00:01:12,000
and the thousands place.

20
00:01:12,000 --> 00:01:18,000
We've abstracted this idea of a base so that we have 2 to the 0, 2 to the 1, 2 to the 2,

21
00:01:18,000 --> 00:01:20,000
and 2 to the 3.

22
00:01:20,000 --> 00:01:25,000
If we multiply all of that out like we did with the decimal number,

23
00:01:25,000 --> 00:01:26,000
we get 13.

24
00:01:26,000 --> 00:01:29,000
So I still haven't answered what a hexadecimal number is.

25
00:01:29,000 --> 00:01:34,000
Hexadecimal is just base 16, and the reason we really like base 16--

26
00:01:34,000 --> 00:01:40,000
it may seem odd to you at first--is that it's a very nice way of representing these base 2 numbers

27
00:01:40,000 --> 00:01:44,000
and handling them in a more concise manner.

28
00:01:44,000 --> 00:01:51,000
So 1, 1, 0, 1--I can write that with 1 hexadecimal number which happens to be d

29
00:01:51,000 --> 00:01:54,000
and convention dictates that whenever we write a hexadecimal number,

30
00:01:54,000 --> 00:01:57,000
we're going to put a 0 and an x in front of it.

31
00:01:57,000 --> 00:02:03,000
0 and the x don't mean anything, except that it's a hexadecimal number that follows.

32
00:02:03,000 --> 00:02:08,000
So that's a hexadecimal, and for short, I'll say hex.

33
00:02:08,000 --> 00:02:13,000
So the goal of this problem is to modify the lexer to identify numbers written in hex

34
00:02:13,000 --> 00:02:17,000
and store the value of the number as what it equals.

35
00:02:17,000 --> 00:02:22,000
So we're going to identify the number using a regular expression,

36
00:02:22,000 --> 00:02:26,000
and then we're going to calculate the value using a formula much like this.

37
00:02:26,000 --> 00:02:29,000
So let's go straight to the IDE.

38
00:02:29,000 --> 00:02:33,000
So here I have the given code for this problem.

39
00:02:33,000 --> 00:02:34,000
Let's quickly run through it.

40
00:02:34,000 --> 00:02:38,000
Right here we have importing the lexer.

41
00:02:38,000 --> 00:02:42,000
Then we name the tokens that we want to have.

42
00:02:42,000 --> 00:02:45,000
Num stands for the hexadecimal numbers that we're going to identify,

43
00:02:45,000 --> 00:02:50,000
and ID is pretty much everything else, but the definition is described in the problem.

44
00:02:50,000 --> 00:02:52,000
We have 2 types of NUMs.

45
00:02:52,000 --> 00:02:57,000
One is a decimal number and the other is going to be the hexadecimal number,

46
00:02:57,000 --> 00:02:58,000
which we have to write.

47
00:02:58,000 --> 00:03:05,000
We ignore spaces, tabs, returns, etc., and we throw an error when there's something

48
00:03:05,000 --> 00:03:07,000
we don't understand.

49
00:03:07,000 --> 00:03:11,000
We have some code that runs our lexer for the sake of texting,

50
00:03:11,000 --> 00:03:14,000
and then we have some test cases.

51
00:03:14,000 --> 00:03:17,000
Let's fill in our code!

52
00:03:17,000 --> 00:03:21,000
Because it's easier, let's do the ID first.

53
00:03:21,000 --> 00:03:23,000
We have to come up with a regular expression.

54
00:03:23,000 --> 00:03:25,000
The definition for the ID is pretty simple.

55
00:03:25,000 --> 00:03:32,000
It's just a regular expression that matches sequences of characters with the letters a - z

56
00:03:32,000 --> 00:03:34,000
regardless of their capitalization,

57
00:03:34,000 --> 00:03:36,000
and then we just return it.

58
00:03:36,000 --> 00:03:40,000
So now we want to do the definition for hexadecimal numbers.

59
00:03:40,000 --> 00:03:43,000
The regular expression here is also not that bad.

60
00:03:43,000 --> 00:03:46,000
Here we have our definition for a hexadecimal number.

61
00:03:46,000 --> 00:03:50,000
We require that there's a 0 in x because that's what indicates that this is written in hex

62
00:03:50,000 --> 00:03:52,000
and not decimal.

63
00:03:52,000 --> 00:03:57,000
And then we have 1 or more numbers or letters a - f.

64
00:03:57,000 --> 00:04:01,000
In this line, I'm going to strip off the 0 and the x because that doesn't really help me

65
00:04:01,000 --> 00:04:05,000
calculate anything that has to do with the value of the number.

66
00:04:05,000 --> 00:04:10,000
Now I'm going to go through each digit of our number.

67
00:04:10,000 --> 00:04:16,000
For every digit that there is we're going to multiply our number by 16.

68
00:04:16,000 --> 00:04:21,000
That gives us the power of 16 for every digit that we've done so far.

69
00:04:21,000 --> 00:04:25,000
Here I want to check, if the digit we're at is between 0 and 9,

70
00:04:25,000 --> 00:04:29,000
so we don't have to do anything special with the fact that it's a letter,

71
00:04:29,000 --> 00:04:33,000
but we do have to do a bit of a conversion from the fact that it's a character

72
00:04:33,000 --> 00:04:34,000
and not a number.

73
00:04:34,000 --> 00:04:42,000
So one way to do this is take the numerical order value of our digit - data 0,

74
00:04:42,000 --> 00:04:46,000
and that's going to yield a number between 0 and 9 because they're all together in that.

75
00:04:46,000 --> 00:04:53,000
Also you could take--use INT--the INT function which will convert that string into an integer.

76
00:04:53,000 --> 00:04:55,000
Either way works.

77
00:04:55,000 --> 00:05:01,000
Here, I'm going to handle the case where the current digit is a letter a- f.

78
00:05:01,000 --> 00:05:04,000
I'm going to find out how many places away from a it is,

79
00:05:04,000 --> 00:05:07,000
and then I'm going to add 10, so a is going to equal 10.

80
00:05:07,000 --> 00:05:13,000
b is going to be some number - the value of a, which is going to give 1,

81
00:05:13,000 --> 00:05:17,000
so 1 + 10 + our number--we're going to add 11 to the number

82
00:05:17,000 --> 00:05:19,000
because b represents 11 and so on.

83
00:05:19,000 --> 00:05:24,000
I'm going to wrap up this function by setting the value of this token to the number

84
00:05:24,000 --> 00:05:29,000
and setting the type to NUM and returning the token itself.

85
00:05:29,000 --> 99:59:59,999
That's everything you have to do for this problem.
