1
00:00:00,000 --> 00:00:03,000
The challenged problem for this problem set

2
00:00:03,000 --> 00:00:07,000
is essentially an extension of what's already done in the first problem.

3
00:00:07,000 --> 00:00:12,000
Instead of checking whether a Sudoku board is valid, we're actually going to be solving

4
00:00:12,000 --> 00:00:18,000
the Sudoku board and coming up with a valid solution assuming that it is valid.

5
00:00:18,000 --> 00:00:21,000
So, we're going to be extending new check Sudoku function.

6
00:00:21,000 --> 00:00:25,000
Since I don't know what you wrote, then I invite you to paste this in

7
00:00:25,000 --> 00:00:32,000
or paste it into something else, run it locally, and then give your findings on the forum

8
00:00:32,000 --> 00:00:36,000
and the code for people to handle has end and hopefully break.

9
00:00:36,000 --> 00:00:43,000
Now, our Sudoku solver is going to be essentially an extension,

10
00:00:43,000 --> 00:00:47,000
so it should return None for broken input just like check_Sudoku does.

11
00:00:47,000 --> 00:00:54,000
False for inputs with no valid solutions and a valid 9/9 Sudoku grid

12
00:00:54,000 --> 00:00:57,000
containing no zero elements at the end.

13
00:00:57,000 --> 00:01:03,000
Any 0 elements that are in board that's pass N assuming it's valid

14
00:01:03,000 --> 00:01:09,000
should be solved and changed into numbers one through nine that give a valid solution.

15
00:01:09,000 --> 00:01:11,000
There are a lot of ways you can do that.

16
00:01:11,000 --> 00:01:17,000
There are a lot of clever ways to solve a partially completed Sudoku board.

17
00:01:17,000 --> 00:01:20,000
We could always just go with brute-force recursive solution

18
00:01:20,000 --> 00:01:27,000
may be not the best idea if people end up testing against very, very difficult puzzles,

19
00:01:27,000 --> 00:01:33,000
and you can come up with some really pathologically evil Sudoku puzzles

20
00:01:33,000 --> 00:01:37,000
if you don't have fast algorithm.

21
00:01:37,000 --> 00:01:44,000
The one I'll be showing you in the solution video is essentially just a brute-force algorithm.

22
00:01:44,000 --> 00:01:49,000
Please give some example of some Sudoku puzzles

23
00:01:49,000 --> 00:01:55,000
that maybe it wouldn't fair so well against or maybe it would take a very, very long time to complete.

24
00:01:55,000 --> 00:02:01,000
We're going to be running this in the equator against the same Sudoku puzzles.

25
00:02:01,000 --> 00:02:07,000
Hardest commented out by default because for a more naive Sudoku solver,

26
00:02:07,000 --> 00:02:12,000
it will take a little bit of time maybe five to 10 seconds or so

27
00:02:12,000 --> 00:02:17,000
depending on exactly how you plotted it out to actually solve this one

28
00:02:17,000 --> 00:02:22,000
and there are going to be multiple different solutions depending on exactly how you code this up.

29
00:02:22,000 --> 00:02:25,000
We are going to be checking that.

30
00:02:25,000 --> 00:02:29,000
We would simply be checking that it's a valid Sudoku board with no zeros.

31
00:02:29,000 --> 00:02:34,000
And again, I invite you to post your solution code in the forums,

32
00:02:34,000 --> 00:02:38,000
how you coded it out, what you think it might be vulnerable to,

33
00:02:38,000 --> 00:02:44,000
and to break other people's code and see how you would test against a Sudoku solver,

34
00:02:44,000 --> 00:02:52,000
which is a bit more complicated of a piece of code than the checker itself.

35
00:02:52,000 --> 00:02:55,000
There are a few more ways that things can go wrong.

36
00:02:55,000 --> 00:03:04,000
Okay, I hope you had fun with this, and I hope you enjoy breaking everyone else's code.
