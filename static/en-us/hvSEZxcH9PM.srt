1
00:00:01,660 --> 00:00:05,530
Also allows you operate on your data frame in a vectorized and item by item way.

2
00:00:06,610 --> 00:00:09,060
What does it mean to operate on data frame in a vectorized way?

3
00:00:10,060 --> 00:00:12,480
Let's say we have the following data frame.

4
00:00:12,480 --> 00:00:15,230
This data frame has 2 columns, 1 and 2.

5
00:00:16,560 --> 00:00:19,400
And 4 rows, a, b, c, and d.

6
00:00:20,590 --> 00:00:22,620
All of the values are integers.

7
00:00:22,620 --> 00:00:24,440
We can call data frame that apply and

8
00:00:24,440 --> 00:00:27,470
provide us the argument sum arbitrary function.

9
00:00:27,470 --> 00:00:28,175
In this case,

10
00:00:28,175 --> 00:00:33,430
numpy.mean to perform that function on the vector that is every single column.

11
00:00:33,430 --> 00:00:36,400
So when we call df.apply numpy.mean.

12
00:00:36,400 --> 00:00:38,870
What we get back is the mean of every single column in df.

13
00:00:38,870 --> 00:00:41,450
This is itself a new data frame.

14
00:00:41,450 --> 00:00:45,310
There are also some operations that simply cannot be vectorized in this way.

15
00:00:45,310 --> 00:00:47,880
That is, take an numpy array as their input and

16
00:00:47,880 --> 00:00:49,650
then return another array or value.

17
00:00:50,770 --> 00:00:54,430
We can also, in this case, call map on particular columns.

18
00:00:54,430 --> 00:00:56,400
Or apply map on entire data frames.

19
00:00:57,880 --> 00:01:01,470
These methods will accept functions that take in a single value, and

20
00:01:01,470 --> 00:01:03,120
return a single value.

21
00:01:03,120 --> 00:01:08,060
For example let's say that we said df one.map lambda x x greater than or

22
00:01:08,060 --> 00:01:08,980
equal to 1.

23
00:01:08,980 --> 00:01:12,970
What this does is goes through every single value in the 1 column, and

24
00:01:12,970 --> 00:01:16,510
evaluates whether or not that value is greater than or equal to 1.

25
00:01:16,510 --> 00:01:23,869
If we were to call df.applymap lambda x x greater than or equal to 1.

26
00:01:23,869 --> 00:01:28,470
The same function is evaluated over every single value in the data frame.

27
00:01:28,470 --> 00:01:30,200
As opposed to just the "one" column.
