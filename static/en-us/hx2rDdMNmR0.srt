1
00:00:00,220 --> 00:00:02,000
One way of composing policies is to

2
00:00:02,000 --> 00:00:07,100
perform both operations simultaneously. For example, one might

3
00:00:07,100 --> 00:00:09,910
want to forward traffic but also count how

4
00:00:09,910 --> 00:00:11,910
much traffic is being forwarded. Both of those

5
00:00:11,910 --> 00:00:14,670
operations can be performed in parallel. Another

6
00:00:14,670 --> 00:00:18,130
way of composing policies is in sequence. Sequential

7
00:00:18,130 --> 00:00:21,860
composition performs one operation then the next. For

8
00:00:21,860 --> 00:00:25,420
example, we might want to implement a firewall.

9
00:00:25,420 --> 00:00:27,680
And whatever traffic makes it though the firewall

10
00:00:27,680 --> 00:00:31,800
might then be subjected to the switching policy.

11
00:00:31,800 --> 00:00:35,100
One example of sequential composition, might be a

12
00:00:35,100 --> 00:00:38,930
load balancer. In this example, a policy might

13
00:00:38,930 --> 00:00:42,040
take some traffic coming from, half of the

14
00:00:42,040 --> 00:00:45,140
source IP addresses, and rewrite that to one

15
00:00:45,140 --> 00:00:47,220
server replica and take the other half of

16
00:00:47,220 --> 00:00:50,870
the traffic and rewrite it to the other replica.

17
00:00:50,870 --> 00:00:53,920
After the load balancer rewrites the destination

18
00:00:53,920 --> 00:00:57,000
IP address, we need a routing module to

19
00:00:57,000 --> 00:01:00,010
forward the traffic out the appropriate port on

20
00:01:00,010 --> 00:01:03,030
the switch. In this case, we've used sequential

21
00:01:03,030 --> 00:01:06,400
composition to first apply a load balance policy

22
00:01:06,400 --> 00:01:09,270
that rewrites the destination IP address based on

23
00:01:09,270 --> 00:01:11,200
the source IP address where the traffic is

24
00:01:11,200 --> 00:01:16,600
coming from and sequentially apply a routing policy

25
00:01:16,600 --> 00:01:19,300
that forwards the traffic out the appropriate

26
00:01:19,300 --> 00:01:23,290
port. Depending on the resulting destination IP

27
00:01:23,290 --> 00:01:28,670
address after that rewrite has taken place. Notice that we can use predicates to

28
00:01:28,670 --> 00:01:32,620
specify which traffic traverses which modules. Those

29
00:01:32,620 --> 00:01:37,260
predicates can apply specific actions based on

30
00:01:37,260 --> 00:01:41,940
things like the input port and the packet header fields. The ability to compose

31
00:01:41,940 --> 00:01:45,500
policies in this fashion allows each module

32
00:01:45,500 --> 00:01:49,860
to partially specify functionality without having to write

33
00:01:49,860 --> 00:01:52,260
the policy for the entire network. This

34
00:01:52,260 --> 00:01:56,000
leaves some flexibility so that one module can

35
00:01:56,000 --> 00:01:57,750
implement a small bit of the network

36
00:01:57,750 --> 00:02:02,470
function, leaving some functions for other modules. This

37
00:02:02,470 --> 00:02:06,940
also allows for module re-use, since a module need not be tied to a particular

38
00:02:06,940 --> 00:02:10,758
network setting. For example, in this particular

39
00:02:10,758 --> 00:02:12,880
example where we've applied that load balancer

40
00:02:12,880 --> 00:02:15,910
followed by routing, the load balancer spreads

41
00:02:15,910 --> 00:02:18,740
traffic across the replicas without regard to the

42
00:02:18,740 --> 00:02:22,370
underlying network paths that traffic takes once

43
00:02:22,370 --> 00:02:26,210
those destination IP addresses are rewritten. In summary,

44
00:02:26,210 --> 00:02:32,070
we've covered two concepts. One is the notion of a Northbound API, which sits on

45
00:02:32,070 --> 00:02:38,750
top of an SDN controller and provides and exposes higher level abstractions that

46
00:02:38,750 --> 00:02:44,060
allows the operator or programmer to write policies without regard to how open

47
00:02:44,060 --> 00:02:46,490
flow rules eventually get installed. We've

48
00:02:46,490 --> 00:02:49,700
also talked about two different composition operators.

49
00:02:49,700 --> 00:02:53,920
Parallel composition and sequential composition, which specify

50
00:02:53,920 --> 00:02:57,990
how individual simpler policies can be composed

51
00:02:57,990 --> 00:03:03,100
to implement more complex network applications, thus allowing different SDN

52
00:03:03,100 --> 00:03:07,550
control programs to independently perform tasks on the same traffic.
