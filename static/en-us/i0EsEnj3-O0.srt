1
00:00:00,000 --> 00:00:04,000
Unit 1 introduces a lot of new list methods that you may never have seen.

2
00:00:04,000 --> 00:00:08,000
Let's talk about count, sort, and reverse.

3
00:00:08,000 --> 00:00:13,000
List.count(x) returns the number of occurrences of x in the list.

4
00:00:13,000 --> 00:00:16,000
Here we've just called it list.

5
00:00:16,000 --> 00:00:18,000
The way you would use this is you would write the name of your list here

6
00:00:18,000 --> 00:00:21,000
and whatever element you want to count.

7
00:00:21,000 --> 00:00:26,000
I should mention that I've basically taken this description straight from the Python documentation.

8
00:00:26,000 --> 00:00:33,000
List.sort sorts the list in place, and I'll talk a little bit more about what "in place" means later.

9
00:00:33,000 --> 00:00:35,000
List.reverse does what you would think.

10
00:00:35,000 --> 00:00:39,000
It just reverses the elements of the list, and again it does so in place.

11
00:00:39,000 --> 00:00:41,000
Now, let's try using these methods.

12
00:00:41,000 --> 00:00:44,000
Let's define a list of the Udacity professors.

13
00:00:44,000 --> 00:00:47,000
In this list I've included all of the professors of the six classes,

14
00:00:47,000 --> 00:00:50,000
and you'll see that Dave's name comes up twice.

15
00:00:50,000 --> 00:00:53,000
This is because Dave teaches two of the classes.

16
00:00:53,000 --> 00:00:55,000
Also, it makes this problem a bit more interesting.

17
00:00:55,000 --> 00:00:59,000
Let's say we want to know how many times Steve's name shows up on this list.

18
00:00:59,000 --> 00:01:04,000
For this example, it's pretty easy to count ourselves, but let's have Python do it anyway.

19
00:01:04,000 --> 00:01:08,000
We'll define a variable called "steve_count" and set it equal to this.

20
00:01:08,000 --> 00:01:13,000
Here the name of our list.count, and I'm counting the occurrences of Steve.

21
00:01:13,000 --> 00:01:16,000
If I print steve_count, I get 1--just as I'd expect.

22
00:01:16,000 --> 00:01:19,000
We could also count the number of occurrences of Dave.

23
00:01:19,000 --> 00:01:23,000
When I run this I get 2, as expected--Dave and Dave.

24
00:01:23,000 --> 00:01:26,000
Okay, now let's see what happens when we sort this list.

25
00:01:26,000 --> 00:01:33,000
We'll define a new variable called "sorted_profs" and set it equal to udacity_profs.sort.

26
00:01:33,000 --> 00:01:39,000
When I print sorted profs, I get None. Wait. What happened here?

27
00:01:39,000 --> 00:01:42,000
I would have expected a sorted version of this list,

28
00:01:42,000 --> 00:01:46,000
and this is where that "in place" comes from that I was talking about before.

29
00:01:46,000 --> 00:01:50,000
Methods that work in place only modify the existing list.

30
00:01:50,000 --> 00:01:54,000
They modify udacity_profs. They do not create a new list.

31
00:01:54,000 --> 00:02:03,000
In fact, since we've just sorted udacity_profs let's see what happens when we print udacity_profs.

32
00:02:03,000 --> 00:02:06,000
Now you can see that they've been sorted in alphabetical order.

33
00:02:06,000 --> 00:02:08,000
Isn't mutability just wonderful?

34
00:02:08,000 --> 00:02:11,000
Now, poor Wes is alway at the end of these sorted lists.

35
00:02:11,000 --> 00:02:14,000
Let's give Wes some love by reversing this list.

36
00:02:14,000 --> 00:02:19,000
Just as we'd expect, this is the same list but sorted in reverse alphabetical order.

37
00:02:19,000 --> 00:02:22,000
There is plenty other Python list methods.

38
00:02:22,000 --> 99:59:59,999
Feel free to check out the link below this video to see them.
