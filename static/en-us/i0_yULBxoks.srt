1
00:00:00,080 --> 00:00:03,260
If we look at the execution here,
we see that P3 and P4

2
00:00:04,300 --> 00:00:09,790
observe the updates to the memory
allocations M1 and M2 in reverse way.

3
00:00:09,790 --> 00:00:13,630
We take a look at what's happening here,
we see that M1 and

4
00:00:13,630 --> 00:00:16,160
M2 are not causally related.

5
00:00:16,160 --> 00:00:19,150
So regarding causal consistency,
this is okay.

6
00:00:19,150 --> 00:00:23,010
This execution is correct with
respect to causal consistency.

7
00:00:23,010 --> 00:00:25,320
However, regarding
sequential consistency,

8
00:00:25,320 --> 00:00:29,840
we said that that all the processors
in the system must observe

9
00:00:29,840 --> 00:00:34,650
the same order of the events that
are occurring on some other processors.

10
00:00:34,650 --> 00:00:35,600
So, in this case,

11
00:00:35,600 --> 00:00:40,130
this would not be legal as far as
sequential consistency is concerned.

12
00:00:40,130 --> 00:00:41,316
So, the correct answers for

13
00:00:41,316 --> 00:00:45,230
these questions is this is
not a valid execution for

14
00:00:45,230 --> 00:00:48,880
sequential consistency, but it is
with respect to causal consistency.

15
00:00:49,930 --> 00:00:53,970
Meaning that, if we're running
an application on top of a memory model,

16
00:00:53,970 --> 00:00:57,370
that we know [INAUDIBLE]
causal consistency,

17
00:00:57,370 --> 00:01:00,570
if we observe this kind of behavior,
this is perfectly legal.

18
00:01:00,570 --> 00:01:02,450
We cannot complain to anyone.

19
00:01:02,450 --> 00:01:07,070
However, if we observe this kind of
behavior when running an application

20
00:01:07,070 --> 00:01:10,840
on top of a supposedly
sequentially consistent system,

21
00:01:10,840 --> 00:01:13,400
we have the rights to complain,
this is not correct.

22
00:01:13,400 --> 00:01:15,990
Somebody has made a mistake with
their implementation of this system.
