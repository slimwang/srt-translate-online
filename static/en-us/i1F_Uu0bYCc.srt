1
00:00:00,000 --> 00:00:05,090
What did we just do when we determined that the running time of algorithm B grows much faster

2
00:00:05,090 --> 00:00:07,620
than the running time of algorithm A.

3
00:00:07,620 --> 00:00:12,810
Well first of all we said that there was some value of n.

4
00:00:12,810 --> 00:00:18,000
So some value for the size of the input where this running time function

5
00:00:18,000 --> 00:00:20,800
is always larger than this running time function.

6
00:00:20,800 --> 00:00:27,710
So the running time of algorithm A is some function f(n) and the running time of algorithm B

7
00:00:27,710 --> 00:00:30,750
is some function g(n).

8
00:00:30,750 --> 00:00:42,080
So if g(n) grows faster than f(n) then there must be some value of n for which g(n) is larger than f(n).

9
00:00:42,080 --> 00:00:48,110
And for any value larger than that, this must also be true and we are going to call that value n‘.

10
00:00:48,110 --> 00:00:53,570
And for that value n‘, we must have that g(n‘) is larger than f(n‘)

11
00:00:53,570 --> 00:00:57,110
because we're saying that g(n) grows faster than f(n)

12
00:00:57,110 --> 00:01:00,660
and of course this must hold true for all values larger than n‘

13
00:01:00,660 --> 00:01:05,160
So we have a second condition here that for any value larger than n‘,

14
00:01:05,160 --> 00:01:08,610
we must also satisfy this condition here.

15
00:01:08,610 --> 00:01:12,410
Now we also said that we do not want to care about constants.

16
00:01:12,410 --> 00:01:18,040
So we do not want to care about if this here says 3n² or 5n².

17
00:01:18,040 --> 00:01:22,420
We would just say that this function basically grows depending on n².

18
00:01:22,420 --> 00:01:28,150
So in order to do that, we need another number in here and that number is a constant

19
00:01:28,150 --> 00:01:32,110
that would allow us to scale the function g(n) and

20
00:01:32,110 --> 00:01:35,310
I'm soon going to give you a few example to show what that means exactly.

21
00:01:35,310 --> 00:01:42,110
But in general it means that if we can multiply this function here with some number,

22
00:01:42,110 --> 00:01:43,310
let's call that constant c,

23
00:01:43,310 --> 00:01:49,410
so that it outgrows f(n) then we would be still be satisfied.

24
00:01:49,410 --> 00:01:55,630
Then we would still say that g(n) grows at least as fast as f(n).

25
00:01:55,630 --> 00:01:59,240
And this is all you need to know to understand big O notation

26
00:01:59,240 --> 00:02:01,710
because if those two conditions here are satisfied

27
00:02:01,710 --> 00:02:11,740
so there are some numbers n‘ and c so that c*g(n‘)≥f(n‘) so there's some point where

28
00:02:11,740 --> 00:02:17,370
this function gets at least as large as this function and from any point onwards,

29
00:02:17,370 --> 00:02:26,450
this function continues to be at least at large then we would say that f(n) is contained in O(g(n)).

30
00:02:26,450 --> 00:02:32,990
So the big O means that g(n) is a function that grows at least as fast as f(n)

31
00:02:32,990 --> 99:59:59,999
and this is the O that gives big O notation its name.
