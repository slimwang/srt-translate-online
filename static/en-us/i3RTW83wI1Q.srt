1
00:00:00,350 --> 00:00:03,440
So for the next question I wanted to

2
00:00:03,440 --> 00:00:07,250
do a more general programming question
which you can solve any language.

3
00:00:07,250 --> 00:00:11,700
I want to see so
given a certain array of integers.

4
00:00:13,040 --> 00:00:15,550
I will allow you to tell
me which indexes will give

5
00:00:16,790 --> 00:00:21,150
you the maximum difference between
them so let's say index i and j so

6
00:00:21,150 --> 00:00:24,330
you want to know that
direct is called x.

7
00:00:24,330 --> 00:00:28,290
Which X I minus X J gives
you the largest difference.

8
00:00:29,480 --> 00:00:33,570
>> Okay, so for any I and
J in the array.

9
00:00:33,570 --> 00:00:35,340
>> Where J is greater than I.

10
00:00:35,340 --> 00:00:36,245
>> Okay, I see.

11
00:00:36,245 --> 00:00:43,454
[NOISE] And I'm going to just think and
draw an array to start with.

12
00:00:43,454 --> 00:00:44,700
>> That's sounds perfect.

13
00:00:44,700 --> 00:00:45,970
>> And play with it.

14
00:00:45,970 --> 00:00:48,350
So I've got integers.

15
00:00:48,350 --> 00:00:53,221
So you know they've been here and
they could be more fun.

16
00:00:53,221 --> 00:00:57,230
[LAUGH]
And so

17
00:00:57,230 --> 00:01:01,480
I want the biggest difference
between two of them where

18
00:01:03,460 --> 00:01:08,420
the bigger one is to the right
of the small one, right?

19
00:01:08,420 --> 00:01:10,040
Is it the size of the difference.

20
00:01:10,040 --> 00:01:11,550
Or.
>> Yes so we want to know.

21
00:01:11,550 --> 00:01:13,870
>> Okay so it has to be a positive
difference otherwise it wouldn't matter.

22
00:01:13,870 --> 00:01:15,210
>> Exactly [LAUGH] Yeah.

23
00:01:15,210 --> 00:01:16,128
>> Yeah.
Okay.

24
00:01:16,128 --> 00:01:21,702
So really

25
00:01:21,702 --> 00:01:25,658
like the stupidest method.

26
00:01:25,658 --> 00:01:31,020
Would be to look at every pair.

27
00:01:31,020 --> 00:01:35,750
And the cut the difference and
pick the largest difference.

28
00:01:35,750 --> 00:01:37,380
>> That is one way to do it.

29
00:01:37,380 --> 00:01:41,420
>> That would be relatively inefficient
i bet you there's a better way.

30
00:01:41,420 --> 00:01:42,170
That does that.

31
00:01:42,170 --> 00:01:43,400
>> That is okay.

32
00:01:43,400 --> 00:01:48,170
>> Maybe i'll just start with
because then i've coated it.

33
00:01:48,170 --> 00:01:48,670
Yeah.

34
00:01:51,160 --> 00:01:56,890
I want to loop through,

35
00:01:56,890 --> 00:02:01,920
I think i'm going to try and
loop through the J's and

36
00:02:01,920 --> 00:02:04,700
then loop through the i's
less than each j.

37
00:02:06,220 --> 00:02:08,100
>> Okay.
>> So that's so.

38
00:02:08,100 --> 00:02:08,600
So.

39
00:02:16,368 --> 00:02:19,220
I'm just trying to think maybe I should.

40
00:02:19,220 --> 00:02:20,050
No, it doesn't matter.

41
00:02:20,050 --> 00:02:23,080
I was going to think about storing
the length of the array somewhere but

42
00:02:23,080 --> 00:02:24,210
I'm only going to use it once.

43
00:02:25,640 --> 00:02:30,543
So for j in range

44
00:02:30,543 --> 00:02:37,340
length of, and
you called it x didn't you?

45
00:02:37,340 --> 00:02:37,840
>> Yeah.

46
00:02:43,170 --> 00:02:45,133
>> And then I want to do my inner loop.

47
00:02:45,133 --> 00:02:54,405
For I In range (J).

48
00:02:54,405 --> 00:02:55,565
Okay.

49
00:02:55,565 --> 00:03:00,382
So maybe I need to think about

50
00:03:00,382 --> 00:03:05,200
storing the maximum so far,

51
00:03:05,200 --> 00:03:09,630
or something somewhere.

52
00:03:09,630 --> 00:03:10,240
>> Okay.

53
00:03:10,240 --> 00:03:16,050
>> So like I could start with a max of
zero because if they're all the same

54
00:03:16,050 --> 00:03:17,980
then it's going to be zero.

55
00:03:17,980 --> 00:03:18,590
Hang on.

56
00:03:18,590 --> 00:03:22,110
No if they're descending, so
if they were just getting smaller and

57
00:03:22,110 --> 00:03:24,190
smaller then, okay.

58
00:03:24,190 --> 00:03:27,010
So, I should start with my first one,

59
00:03:27,010 --> 00:03:32,628
my first difference.

60
00:03:32,628 --> 00:03:36,945
So max = X.

61
00:03:36,945 --> 00:03:39,815
One.
No, zero counts.

62
00:03:39,815 --> 00:03:43,525
Zero counts because you could take, does
j need to be strictly greater than i,

63
00:03:43,525 --> 00:03:45,545
or could it be greater than or equal to?

64
00:03:45,545 --> 00:03:47,585
>> It has to be strictly greater, yeah.

65
00:03:47,585 --> 00:03:49,770
>> Okay, we'll start with that then,
because this is the first thing,

66
00:03:49,770 --> 00:03:50,458
I'll come across.

67
00:03:56,166 --> 00:03:57,083
And.

68
00:04:04,885 --> 00:04:06,960
I'm going to I'm going
to store those as well.

69
00:04:06,960 --> 00:04:11,980
So best J so far equals one.

70
00:04:14,430 --> 00:04:17,195
Best I so far equals zero.

71
00:04:17,195 --> 00:04:24,430
So, I'm going to say if the difference

72
00:04:24,430 --> 00:04:29,475
of x j and x i is bigger than max,
then I'm going to update all of these.

73
00:04:29,475 --> 00:04:32,279
>> Okay.

74
00:04:32,279 --> 00:04:36,501
>> So if x j

75
00:04:36,501 --> 00:04:45,090
>> Minus x [ i ] is greater than,

76
00:04:46,728 --> 00:04:52,057
Max.

77
00:04:52,057 --> 00:04:58,231
Then, max = x [ j ]- x i

78
00:05:02,074 --> 00:05:11,090
Best-j=j, best i=i.

79
00:05:11,090 --> 00:05:13,980
So, do you want this inside
a function or something?

80
00:05:13,980 --> 00:05:15,070
>> Yeah.
Let's put it inside a function

81
00:05:15,070 --> 00:05:16,090
for a formality.

82
00:05:16,090 --> 00:05:16,590
>> Okay.

83
00:05:19,380 --> 00:05:20,433
So we'll call it

84
00:05:25,578 --> 00:05:30,601
find_max_difference, and

85
00:05:30,601 --> 00:05:35,240
it's going to take an array x.

86
00:05:37,650 --> 00:05:43,694
x, and it's going to return

87
00:05:49,673 --> 00:05:54,062
Max s j.

88
00:05:57,970 --> 00:05:58,730
Best i okay, so.

89
00:05:58,730 --> 00:06:05,610
Let me just think, have I, have I,
does this seem to be right?

90
00:06:05,610 --> 00:06:08,260
And then maybe I'll try a test case.

91
00:06:09,520 --> 00:06:11,650
>> Okay.
>> So okay, the very first attempt.

92
00:06:11,650 --> 00:06:14,960
Okay, so
what Ive missed already is empty array.

93
00:06:14,960 --> 00:06:20,220
Array with With nothing with one number.

94
00:06:20,220 --> 00:06:21,008
>> That's okay.

95
00:06:21,008 --> 00:06:25,710
>> So yeah, I guess both of those

96
00:06:27,590 --> 00:06:30,400
like, you can't say the problem so

97
00:06:30,400 --> 00:06:33,200
they don't count
>> You can have some where you can get

98
00:06:33,200 --> 00:06:38,180
a proper array
>> So then I take the first

99
00:06:38,180 --> 00:06:42,564
difference and then I'm going to
loop over the size of the range and

100
00:06:42,564 --> 00:06:48,816
I'm going to come

101
00:06:48,816 --> 00:06:55,280
up to okay does this
include the j element?

102
00:06:55,280 --> 00:06:55,866
No it doesn't.

103
00:06:55,866 --> 00:06:57,463
It doesn't.

104
00:06:57,463 --> 00:06:59,220
That's okay.

105
00:06:59,220 --> 00:07:02,960
So, I think I've missed out
accidentally having i equal to j.

106
00:07:02,960 --> 00:07:04,430
So I was worried about.

107
00:07:04,430 --> 00:07:10,214
And then if the current difference is
bigger than the previously best one,

108
00:07:10,214 --> 00:07:14,081
then I update it and

109
00:07:14,081 --> 00:07:19,050
then I'm going to come back here and
do it again.

110
00:07:19,050 --> 00:07:23,950
And then come back here and
do all of that again.

111
00:07:23,950 --> 00:07:27,790
And then return, yeah.

112
00:07:27,790 --> 00:07:30,580
Okay now for test.

113
00:07:30,580 --> 00:07:35,630
Let's say do you have any suggestions
of a test or should I pick them myself?

114
00:07:35,630 --> 00:07:37,665
>> Just go ahead and pick one.

115
00:07:37,665 --> 00:07:42,870
>> Okay so I said that something that
decreasing seem to be a problematic one

116
00:07:42,870 --> 00:07:48,650
so let's try [4, 3, 2,1]
>> So

117
00:07:48,650 --> 00:07:53,340
here max will be a match
will be start off being.

118
00:07:53,340 --> 00:07:53,860
Minus one.

119
00:07:53,860 --> 00:07:58,376
And then we'll go to.

120
00:07:58,376 --> 00:08:03,070
So that minus one will also come
up as the first thing here and

121
00:08:03,070 --> 00:08:05,640
then we'll go to difference
between two so we'll have.

122
00:08:05,640 --> 00:08:09,360
Minus two minus one but
it won't update because this.

123
00:08:09,360 --> 00:08:16,450
This is strict and then we'll go to
minus three, minus two, minus one and

124
00:08:16,450 --> 00:08:21,290
nothing will update so
that seems to work in that case.

125
00:08:21,290 --> 00:08:28,413
What about something a bit
more scattered [1, 5, 2, 7].

126
00:08:28,413 --> 00:08:33,831
So here we'd start with for,
then at the max

127
00:08:33,831 --> 00:08:39,549
because that's 5 -1,
then we would go to.

128
00:08:39,549 --> 00:08:44,039
It would be one, I guess we're looking

129
00:08:45,360 --> 00:08:48,960
at this, one and then minus three,

130
00:08:48,960 --> 00:08:52,090
so neither of those would do anything,
then we go back up here.

131
00:08:52,090 --> 00:08:56,020
And then we come to six,
which would update,

132
00:08:56,020 --> 00:08:58,500
and then it wouldn't get any better.

133
00:08:58,500 --> 00:09:00,970
Okay, I think I'm okay
with this solution.

134
00:09:00,970 --> 00:09:02,950
>> I think this solution will work.

135
00:09:02,950 --> 00:09:06,390
I haven't heard that in the time
that you have written this.

136
00:09:06,390 --> 00:09:08,690
Do you have any ideas on how
you can make it more efficient?

137
00:09:08,690 --> 00:09:10,440
because right now, actually.

138
00:09:10,440 --> 00:09:13,670
Can you tell me what
order it is right now?

139
00:09:13,670 --> 00:09:17,700
Well, you kind of looping
through everything twice because

140
00:09:17,700 --> 00:09:22,280
you've got a loop over entries and
then loop over those.

141
00:09:22,280 --> 00:09:25,350
So i really think there
must be a better way.

142
00:09:25,350 --> 00:09:29,770
And I can't say off the top
of my head to code it.

143
00:09:29,770 --> 00:09:38,100
But there must be a way
to maybe compare.

144
00:09:38,100 --> 00:09:45,556
If you step along, then does this
next one make it better or not.

145
00:09:45,556 --> 00:09:46,056
Okay.

146
00:09:49,971 --> 00:09:56,518
So How, okay, I'm not completely clear
on this yet, but looking at this one,

147
00:09:56,518 --> 00:10:02,310
imagine so you start with like we did
before then you look at the next j.

148
00:10:03,600 --> 00:10:07,220
Does that make the difference better or
not?

149
00:10:08,650 --> 00:10:15,543
No, hm I think there
must be a better way.

150
00:10:17,713 --> 00:10:21,930
And it would involve stepping
through the array only once.

151
00:10:21,930 --> 00:10:24,090
But like in tandem.

152
00:10:24,090 --> 00:10:25,310
I can't quite see it.

153
00:10:28,360 --> 00:10:31,867
I'm sorry, I don't think I can code
it right now, it's fucking me.

154
00:10:31,867 --> 00:10:34,730
[LAUGH]
>> That's okay, that's okay.

155
00:10:34,730 --> 00:10:37,090
This is a solution that works.
