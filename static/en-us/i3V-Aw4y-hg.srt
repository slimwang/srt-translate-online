1
00:00:00,000 --> 00:00:02,540
Here's one way to define add page to index.

2
00:00:02,540 --> 00:00:05,040
We're defining a procedure that takes in 3 inputs--

3
00:00:05,040 --> 00:00:09,010
the index, the URL and the content at that location--

4
00:00:09,010 --> 00:00:12,810
We use the split method to divide the content into its component words.

5
00:00:12,810 --> 00:00:14,880
We store that into the words variable.

6
00:00:14,880 --> 00:00:19,220
Then what we want to do is go through all of the words, adding each word into the index.

7
00:00:19,220 --> 00:00:21,260
We can do that using a 4-loop.

8
00:00:21,260 --> 00:00:24,590
We're going through all of the words, we'll use word as our variable.

9
00:00:24,590 --> 00:00:31,230
For each word, we call add to index, pass in to index the word and the URL.

10
00:00:31,230 --> 00:00:35,200
Note that if a word occurs more than once on the same page,

11
00:00:35,200 --> 00:00:37,540
we're going to keep adding it to the index each time.

12
00:00:37,540 --> 00:00:40,180
There might be more than one occurrence of the same URL

13
00:00:40,180 --> 00:00:43,180
in the list of URLs associated with a word.

14
00:00:43,180 --> 00:00:44,980
Depending on what we want our search engine to do,

15
00:00:44,980 --> 00:00:48,020
and how we are going to decide on how to respond to queries,

16
00:00:48,020 --> 00:00:51,020
this might be a good thing or a bad thing. We'll talk more about that in a later class.

17
00:00:51,020 --> 00:00:55,160
Let's try this in the Python interpreter.

18
00:00:55,160 --> 00:00:57,030
Let's recap the code we already wrote--

19
00:00:57,030 --> 00:00:59,760
we have the add to index procedure--

20
00:00:59,760 --> 00:01:02,760
that takes in the index, the keyword and the URL.

21
00:01:02,760 --> 00:01:04,830
It goes through the entries in the index,

22
00:01:04,830 --> 00:01:07,830
and it appends the URLs to the entries that matches the keyword.

23
00:01:07,830 --> 00:01:11,640
If it's not found, it adds a new entry to the index,

24
00:01:11,640 --> 00:01:15,110
that's the list of the keyword, and the single URL.

25
00:01:15,110 --> 00:01:19,010
We defined the lookup procedure that takes the index and the keyword,

26
00:01:19,010 --> 00:01:22,320
finds the entry in the index that corresponds to that keyword,

27
00:01:22,320 --> 00:01:24,990
and returns the URLs associated with that keyword.

28
00:01:24,990 --> 00:01:28,820
So, now we're going to define the add page to index procedure.

29
00:01:28,820 --> 00:01:32,860
So, here it is, we're splitting the content into it's component words,

30
00:01:32,860 --> 00:01:36,060
we're looping through the words, and we're adding each word to the index--

31
00:01:36,060 --> 00:01:38,100
note that we don't need to return anything--

32
00:01:38,100 --> 00:01:41,400
the point of this procedure is to modify the index.

33
00:01:41,400 --> 00:01:45,470
Let's try add page to index with a few simple examples.

34
00:01:45,470 --> 00:01:48,880
Here we have the test we tried before--

35
00:01:48,880 --> 00:01:51,250
we see that we get the expected result--

36
00:01:51,250 --> 00:01:57,220
if we're adding the first quote to the index, we see that there is the 4 words in the quote

37
00:01:57,220 --> 00:02:02,290
each has the list of pages associated with it--the list of URLs contains fake.test.

38
00:02:02,290 --> 00:02:06,030
Then we added the 2nd page, the 2nd print we see,

39
00:02:06,030 --> 00:02:09,030
now for most of the words we have both fake.test and not.test except for not,

40
00:02:09,030 --> 00:02:13,030
which only has not.test.

41
00:02:13,030 --> 00:02:17,200
So, to be really convinced that this works, let's try a few more interesting examples.

42
00:02:17,200 --> 00:02:20,910
Now we're going to add page to index that might be on the dilbert.com page--

43
00:02:20,910 --> 00:02:23,780
this quote from Scott Adams about time management--

44
00:02:23,780 --> 00:02:27,240
"Another strategy is to ignore the fact that you're slowly killing yourself

45
00:02:27,240 --> 00:02:29,050
by not sleeping and exercising enough

46
00:02:29,050 --> 00:02:33,150
that frees up several hours a day, the only down side is that you get fat and die."

47
00:02:33,150 --> 00:02:36,420
Hopefully that is not happening to anyone in this class.

48
00:02:36,420 --> 00:02:38,130
I know that it's a lot of work,

49
00:02:38,130 --> 00:02:41,760
but you need to manage your time so that you're still getting enough sleep and exercise.

50
00:02:41,760 --> 00:02:48,000
The second quote we'll add to the page index and we'll give the URL randy.pousch for that.

51
00:02:48,000 --> 00:02:49,940
And it's a quote that says "Good judgement comes from experience,

52
00:02:49,940 --> 00:02:52,010
experience comes from bad judgement.

53
00:02:52,010 --> 00:02:53,610
If things aren't going well,

54
00:02:53,610 --> 00:02:56,180
it probably means you are learning a lot and things will go better later."

55
00:02:56,180 --> 00:02:57,510
So, hopefully things are going well in this class,

56
00:02:57,510 --> 00:03:02,550
but if they're not, that means you're learning a lot and hopefully things will go better later.

57
00:03:02,550 --> 00:03:06,690
Let's see what the index looks like after adding these 2 pages.

58
00:03:06,690 --> 00:03:10,790
You see that it is pretty big, there are a lot of words in those 2 quotes.

59
00:03:10,790 --> 00:03:14,460
We can see that some of them only appear at dilbert.com

60
00:03:14,460 --> 00:03:16,330
and from the quote from Scott Adams on time management--

61
00:03:16,330 --> 00:03:18,970
others appear on both pages--

62
00:03:18,970 --> 00:03:22,470
We'll see more if we try a query. Let's try a query.

63
00:03:22,470 --> 00:03:27,540
We'll look up in our index to see where the word you appears.

64
00:03:27,540 --> 00:03:31,310
And when we run that, we see it appears in both documents.

65
00:03:31,310 --> 00:03:35,980
It was there in the dilbert quote twice, it was listed 2 times at the URL dilbert.com

66
00:03:35,980 --> 00:03:39,020
and once and the Randy Pousch URL.

67
00:03:39,020 --> 00:03:46,460
Just to confirm, the 2 occurrences in this quote, there is one here--and there's one here.

68
00:03:46,460 --> 00:03:51,630
And there's one in the second quote right here.

69
00:03:51,630 --> 00:03:56,570
If we look up another word, we see good did not occur in any of the quotes,

70
00:03:56,570 --> 00:03:58,610
but bad appeared in the 2nd one.

71
00:03:58,610 --> 00:04:01,810
So, it looks like all the code that we have seems to be working.

72
00:04:01,810 --> 00:04:06,350
We can look up words that are indexed and get the list of URLs where they were found.

73
00:04:06,350 --> 00:04:09,720
We can add pages to our index.

74
00:04:09,720 --> 00:04:13,750
And we can record all of the words in that page at the location they occur.

75
00:04:13,750 --> 00:04:15,220
We're really close to having a search engine.

76
00:04:15,220 --> 00:04:16,560
The one thing that we have left to do

77
00:04:16,560 --> 00:04:20,029
is to connect the code we already wrote for crawling the web to

78
00:04:20,029 --> 00:04:24,400
the code that we have for indexing documents and looking up the keywords.

79
00:04:24,400 --> 00:04:27,570
It's been awhile since we looked at the code for crawling the web.

80
00:04:27,570 --> 00:04:30,570
Let's look at that again and see if we can think how to connect the two.
