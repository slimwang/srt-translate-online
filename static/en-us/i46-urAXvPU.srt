1
00:00:00,000 --> 00:00:02,000
Now that was a lot of code again,

2
00:00:02,000 --> 00:00:06,000
so I'm really going to need some tests to makes sure I got this right.

3
00:00:06,000 --> 00:00:09,000
Rather than write the types of tests that we had before with the search statements,

4
00:00:09,000 --> 00:00:12,000
I'm going to introduce a new type of test.

5
00:00:12,000 --> 00:00:15,000
This comes from the standard Python module called "doctest."

6
00:00:15,000 --> 00:00:18,000
It stands for documentation test.

7
00:00:18,000 --> 00:00:21,000
The idea is that you can write comments--

8
00:00:21,000 --> 00:00:26,000
the sort of comments that go with your class items and with your function items

9
00:00:26,000 --> 00:00:29,000
and then automatically have them run its tests.

10
00:00:29,000 --> 00:00:35,000
The tests look just like something that you would type into the Python interpreter.

11
00:00:35,000 --> 00:00:38,000
The way doctest knows that you've got a test

12
00:00:38,000 --> 00:00:41,000
is you have three-arrow prompt,

13
00:00:41,000 --> 00:00:44,000
and an expression is input and the following lines

14
00:00:44,000 --> 00:00:47,000
are the output that comes back from that expression.

15
00:00:47,000 --> 00:00:52,000
It tests to see if what comes back when you run the test is what was expected.

16
00:00:52,000 --> 00:00:59,000
Here I've typed in what I've done at an interactive session,

17
00:00:59,000 --> 00:01:04,000
what the results should be, and then when I make a change to my program

18
00:01:04,000 --> 00:01:07,000
I can run it again and make sure I haven't messed anything up.

19
00:01:07,000 --> 00:01:11,000
For example, at the start here I just want to test out what are the successors

20
00:01:11,000 --> 00:01:18,000
of the start state with both glasses empty and when one glass has capacity 4

21
00:01:18,000 --> 00:01:20,000
and the other has capacity 9.

22
00:01:20,000 --> 00:01:25,000
In general there are six actions but here a lot of them end up being the same,

23
00:01:25,000 --> 00:01:30,000
because if you pour zero into zero either way or if you empty out either of them,

24
00:01:30,000 --> 00:01:32,000
it all comes out the same.

25
00:01:32,000 --> 00:01:37,000
We only end up with three states, and they happen to have these labels--

26
00:01:37,000 --> 00:01:46,000
(0, 9) filling Y, (0, 0)--we called that emptying Y, but of course emptying 0 gives you 0.

27
00:01:46,000 --> 00:01:51,000
It could have been the no opt, but that's just the way the successor function works out.

28
00:01:51,000 --> 00:01:54,000
Then (4, 0) is filling X.

29
00:01:54,000 --> 00:01:59,000
More interestingly, if you have 3 and 5 and you fill--

30
00:01:59,000 --> 00:02:04,000
so this is testing when we aren't exceeding the capacity,

31
00:02:04,000 --> 00:02:07,000
and this test is when we do exceed the capacity.

32
00:02:07,000 --> 00:02:09,000
We can see they work out to the right numbers.

33
00:02:09,000 --> 00:02:15,000
Then we solve a problem and come up with a solution and so on.

34
00:02:15,000 --> 00:02:19,000
Doctest is a nice capacity to allow you to write tests this way.

35
00:02:19,000 --> 00:02:23,000
You can sprinkle them throughout your program, and then you can run the test.

36
00:02:23,000 --> 00:02:26,000
Just say print doctest.testmod, which stands for test module.

37
00:02:26,000 --> 00:02:30,000
If you give it no arguments, it tests the current module.

38
00:02:30,000 --> 00:02:33,000
When I run this I get the comforting message

39
00:02:33,000 --> 00:02:39,000
that there's a test result that is none of the tests failed, and there were 9 that were attempted.

40
00:02:39,000 --> 00:02:42,000
Let's go back and look at the solution.

41
00:02:42,000 --> 00:02:48,000
I'm asking given glasses of levels 4 and 9 trying to find the goal 6.

42
00:02:48,000 --> 00:02:56,000
This is the shortest solution possible--fill Y, pour from Y into X, empty X, do the same,

43
00:02:56,000 --> 00:03:05,000
empty X again, fill Y into X again, fill Y, and pour from Y into X, and then we end up with a 6 in Y.

44
00:03:05,000 --> 00:03:08,000
We can solve problems more generally.

45
00:03:08,000 --> 00:03:15,000
Here I've defined a function num_actions, which says given an X and Y capacity and a goal

46
00:03:15,000 --> 00:03:21,000
how long does it take to solve the goal--the total number of steps it's going to take.

47
00:03:21,000 --> 00:03:27,000
Then I asked here for all values of X and Y less than 10--for all capacities less than 10--

48
00:03:27,000 --> 00:03:34,000
and for all goals smaller than the capacity,

49
00:03:34,000 --> 00:03:39,000
what's the longest? What's the hardest? Which combinations of those takes the most actions?

50
00:03:39,000 --> 00:03:44,000
The answer was if you're given glasses of size 7 and 9

51
00:03:44,000 --> 99:59:59,999
and asked to pour out 8, that's the hardest problem within that range.
