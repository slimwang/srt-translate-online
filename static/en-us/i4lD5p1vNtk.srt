1
00:00:00,260 --> 00:00:02,910
Let's look at a simple case of
iterative deepening on a tree

2
00:00:02,910 --> 00:00:05,110
with a branching factor of two.

3
00:00:05,110 --> 00:00:08,108
At level zero only one node is searched.

4
00:00:08,108 --> 00:00:10,720
At level one we touch
the first node again, and

5
00:00:10,720 --> 00:00:13,190
then look at the two child nodes.

6
00:00:13,189 --> 00:00:17,609
We've had to explore three nodes for
level one, plus one node

7
00:00:17,609 --> 00:00:22,518
from level zero, so our total for
iterative deepening nodes is 4.

8
00:00:22,518 --> 00:00:26,760
At Level Two, we add four nodes
to the bottom of the tree.

9
00:00:26,760 --> 00:00:30,260
To add these nodes, we are looking
at the three above it as well, for

10
00:00:30,260 --> 00:00:32,130
a total of seven for this level.

11
00:00:32,130 --> 00:00:37,005
Adding Level Two to our running tally is
eleven nodes for iterative deepening.

12
00:00:37,005 --> 00:00:39,625
At level three, we add eight more nodes.

13
00:00:39,625 --> 00:00:43,284
So we examine 15 nodes for
this level in total.

14
00:00:43,284 --> 00:00:45,214
Our iterative deepening total is now 26.

15
00:00:45,215 --> 00:00:49,980
Note that at each level,
the sum total of nodes visited, and

16
00:00:49,979 --> 00:00:52,129
revisited by iterative deepening,

17
00:00:52,130 --> 00:00:56,370
is actually under two times the number
of nodes expanded by that level.

18
00:00:56,369 --> 00:01:00,589
A depth limited search to level
four would examine 31 nodes, but

19
00:01:00,590 --> 00:01:02,240
the iterative deepening total was 57.

20
00:01:02,240 --> 00:01:05,750
Depth limited to level five would be 63.

21
00:01:05,750 --> 00:01:07,560
Iterative deepening would be 120.

22
00:01:07,560 --> 00:01:11,329
While researching the tree may
seem like a waste in practice.

23
00:01:11,329 --> 00:01:15,289
It is a small multiplier compared to the
exponential increase from searching each

24
00:01:15,290 --> 00:01:16,730
level deeper.

25
00:01:16,730 --> 00:01:18,770
With the branching factor of two,

26
00:01:18,769 --> 00:01:22,569
iterative deepening expands less than
two times the number of nodes a depth

27
00:01:22,569 --> 00:01:25,359
iterative search would have
done at the same level.

28
00:01:25,359 --> 00:01:28,879
When the branching factor is greater
than two, as the most games,

29
00:01:28,879 --> 00:01:32,079
then the redundancy caused by
iterative deepening is even less.

30
00:01:32,079 --> 00:01:33,329
Perhaps a quick quiz would help.

