1
00:00:00,000 --> 00:00:07,000
So in this problem, we're going to try to build up a given row of Pascal's triangle.

2
00:00:07,000 --> 00:00:11,000
So you could solve this problem recursively, and that's what I did my first time,

3
00:00:11,000 --> 00:00:16,000
but I feel that the iterative solution is a bit simpler and more intuitive to understand.

4
00:00:16,000 --> 00:00:20,000
This isn't always the case, but this is how I'm going to explain this problem.

5
00:00:20,000 --> 00:00:25,000
What we're going to do is, we're going to start with a list that's row 1,

6
00:00:25,000 --> 00:00:29,000
and then we're going to build the next list by adding the 2 numbers above it.

7
00:00:29,000 --> 00:00:35,000
More precisely, let's say we're doing the last row, and we have the previous row

8
00:00:35,000 --> 00:00:38,000
already made, we're going to start an invisible 0 here,

9
00:00:38,000 --> 00:00:43,000
and we're going to say, 1 is going to be the sum of the 0 number that I just made up

10
00:00:43,000 --> 00:00:49,000
and the 1 that's the first element of the previous row.

11
00:00:49,000 --> 00:00:52,000
We're going to update our pointers to move over by 1,

12
00:00:52,000 --> 00:00:55,000
and we get to the element 4 by adding 1 and 3.

13
00:00:55,000 --> 00:00:58,000
I'm going to repeat this process all the way through.

14
00:00:58,000 --> 00:01:04,000
6 is 3 + 3. 4 is 3 + 1. 1 is 1 and 0.

15
00:01:04,000 --> 00:01:08,000
So that's pretty easy to explain, and that's basically how you would do it

16
00:01:08,000 --> 00:01:10,000
if you were building it out by hand,

17
00:01:10,000 --> 00:01:15,000
but putting it in a code may be a little bit more complicated and have alluded you.

18
00:01:15,000 --> 00:01:16,000
So let's see how it's done.

19
00:01:16,000 --> 00:01:21,000
So if I initialize the first row in the triangle to 1.

20
00:01:21,000 --> 00:01:24,000
We don't have anything for a result yet, so that's an empty list.

21
00:01:24,000 --> 00:01:30,000
I'm then going to iterate through the process of building each row 1 at a time, n times.

22
00:01:30,000 --> 00:01:33,000
That way we can get to the nth row.

23
00:01:33,000 --> 00:01:37,000
We're going to append the row that we just discovered onto the result list.

24
00:01:37,000 --> 00:01:41,000
The first time around it will just be the list of 1 because that's how the triangle starts.

25
00:01:41,000 --> 00:01:44,000
We're then going to find the next row, which I haven't defined yet,

26
00:01:44,000 --> 00:01:48,000
and then repeat this process appending the current row onto the result list.

27
00:01:48,000 --> 00:01:51,000
Once we're done, we're going to return the result.

28
00:01:51,000 --> 00:01:55,000
So this is a good outline of what we're doing, but we're missing the most important part,

29
00:01:55,000 --> 00:01:57,000
and that is the make<u>next</u>row.

30
00:01:57,000 --> 00:02:00,000
So a row is going to start as an empty list.

31
00:02:00,000 --> 00:02:03,000
As I had the 2 pointers before, we're going to have the previous one

32
00:02:03,000 --> 00:02:05,000
and then we're going to have one that I'm going to call e.

33
00:02:05,000 --> 00:02:10,000
So as I said in the description, we're going to start out with 0.

34
00:02:10,000 --> 00:02:14,000
That way when we add 1, we get 1, which is the sides of the triangle.

35
00:02:14,000 --> 00:02:18,000
We're going to calculate the new entry in the current row

36
00:02:18,000 --> 00:02:25,000
by adding e--that's our right pointer--with the previous one that we start at 0

37
00:02:25,000 --> 00:02:26,000
so that we get 1.

38
00:02:26,000 --> 00:02:29,000
We're going to update the values in previous and then the next iteration,

39
00:02:29,000 --> 00:02:32,000
e will update to the next value in row.

40
00:02:32,000 --> 00:02:36,000
This last line basically includes the 1 on the right-hand side.

41
00:02:36,000 --> 00:02:39,000
Once we return result, triangle can use make<u>next</u>row accordingly, and we're done.
