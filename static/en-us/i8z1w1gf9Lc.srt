1
00:00:00,330 --> 00:00:01,960
Now let's make sure that this program has all

2
00:00:01,960 --> 00:00:07,689
the properties we want. Namely, concurrency, absence of deadlock, and

3
00:00:07,689 --> 00:00:11,010
mutual exclusion of the important shared memory. Does it

4
00:00:11,010 --> 00:00:14,020
have concurrency? For this, we just need to convince ourselves

5
00:00:14,020 --> 00:00:16,520
that the critical sections of the code are short.

6
00:00:16,520 --> 00:00:19,140
This critical section here is just decrementing a variable and

7
00:00:19,140 --> 00:00:22,500
sending a signal. Not much work to be done there.

8
00:00:22,500 --> 00:00:25,360
And the tracker does the analogous thing. So we're okay

9
00:00:25,360 --> 00:00:28,840
on that front. The top two blocks, just this one

10
00:00:28,840 --> 00:00:32,860
and this one, these just check the condition and then

11
00:00:32,860 --> 00:00:36,600
call the wait procedure. And then they immediately unlock afterwards.

12
00:00:36,600 --> 00:00:39,370
So this also is short. Okay, so let's check off

13
00:00:39,370 --> 00:00:42,045
concurrency. The absence of deadlock, we can convince ourselves that

14
00:00:42,045 --> 00:00:44,395
both threads are never blocked. We can see that the

15
00:00:44,395 --> 00:00:47,290
mutex_lock can't be responsible for a deadlock because both the

16
00:00:47,290 --> 00:00:50,730
producer and consumer give up the lock writing after acquiring

17
00:00:50,730 --> 00:00:53,290
it, just as we argued about concurrency. There

18
00:00:53,290 --> 00:00:55,620
isn't much work to be done here. Nor is

19
00:00:55,620 --> 00:00:58,660
there much going on up here. It's just a

20
00:00:58,660 --> 00:01:02,530
matter of checking the value of the bufavail variable.

21
00:01:02,530 --> 00:01:05,780
That leaves the possibility that we get blocked

22
00:01:05,780 --> 00:01:08,660
on one of these cond wait calls. Let's suppose

23
00:01:08,660 --> 00:01:12,170
that a digitizer is blocked on this line. Because

24
00:01:12,170 --> 00:01:16,190
he's waiting for bufavail to be greater than zero.

25
00:01:16,190 --> 00:01:18,610
Let's suppose that the digitiser is blocked because

26
00:01:18,610 --> 00:01:21,670
he's waiting for a signal saying that bufavail is

27
00:01:21,670 --> 00:01:24,430
greater than zero. We know that right after condwait

28
00:01:24,430 --> 00:01:27,030
was called bufavail was zero. Remember we had the

29
00:01:27,030 --> 00:01:30,020
lock at the time. This means that the tracker

30
00:01:30,020 --> 00:01:33,320
can't possibly be blocked on its wait because that

31
00:01:33,320 --> 00:01:36,760
would imply that bufavail were equal to max. We

32
00:01:36,760 --> 00:01:41,420
also know that our digitizer unlocks the newtext variable.

33
00:01:41,420 --> 00:01:43,510
Again, that's part of the cond wait call.

34
00:01:43,510 --> 00:01:46,410
Hence, our tracker can't be blocked on this while

35
00:01:46,410 --> 00:01:49,210
he tries to acquire the lock either. Eventually,

36
00:01:49,210 --> 00:01:52,730
the tracker will get around to incrementing bufavail and

37
00:01:52,730 --> 00:01:56,760
then sending the signal back to the digitizer

38
00:01:56,760 --> 00:02:00,400
thread. And so we can be confident that eventually,

39
00:02:00,400 --> 00:02:03,700
this signal will arrive and we'll exit this procedure.

40
00:02:03,700 --> 00:02:06,610
The argument is analogous if we suppose that the

41
00:02:06,610 --> 00:02:09,900
tracker is waiting on cond wait. That means

42
00:02:09,900 --> 00:02:12,170
the digitizer will be able to make progress and

43
00:02:12,170 --> 00:02:16,300
eventually decrement bufavail and send the signal. Alright, so

44
00:02:16,300 --> 00:02:19,340
hopefully we've convinced ourselves that there's no deadlock. Lastly,

45
00:02:19,340 --> 00:02:22,060
we want to convince ourselves, that we have achieved

46
00:02:22,060 --> 00:02:25,630
mutual exclusion of the necessary shared memory. Well, the

47
00:02:25,630 --> 00:02:28,830
use of this mutex box, around all the, accesses

48
00:02:28,830 --> 00:02:31,700
and rights to bufavail should convince ourselves that we

49
00:02:31,700 --> 00:02:34,940
don't have a race there. That leaves the frame

50
00:02:34,940 --> 00:02:38,160
buff variable. But the logic of the program, that is

51
00:02:38,160 --> 00:02:40,590
the logic of the ring buffer that we talked about

52
00:02:40,590 --> 00:02:43,320
earlier, prevents the head from ever catching up with the

53
00:02:43,320 --> 00:02:45,350
tail, or vice versa, as they chase each other

54
00:02:45,350 --> 00:02:48,080
around the ring buffer. In fact that's the whole point

55
00:02:48,080 --> 00:02:51,990
of the buff avail variable. So mutual exclusion is achieved,

56
00:02:51,990 --> 00:02:55,130
and our program has all three properties that we desired.
