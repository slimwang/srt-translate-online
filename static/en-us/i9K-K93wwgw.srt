1
00:00:00,000 --> 00:00:03,000
The answer is 0.

2
00:00:03,000 --> 00:00:06,000
The reason is because calling gensquares on 11

3
00:00:06,000 --> 00:00:09,000
actually made this object again.

4
00:00:09,000 --> 00:00:15,000
So we've sort of reset everything and calling next just gives us our first item, zero.

5
00:00:15,000 --> 00:00:20,000
If we want to keep incrementing--0, 1, 4, and so on--

6
00:00:20,000 --> 00:00:22,000
we'll need to make an assignment.

7
00:00:22,000 --> 00:00:26,000
Now we've assigned G to this generator object by calling gensquares.

8
00:00:26,000 --> 00:00:32,000
I can find next--0, 1, and so on. Just like we expect.

9
00:00:32,000 --> 00:00:36,000
We decided that the function was too messy to solve our original problem.

10
00:00:36,000 --> 00:00:41,000
List comprehensions were okay, but used a bit too much memory.

11
00:00:41,000 --> 00:00:45,000
The best answer was really the generator.

12
00:00:45,000 --> 00:00:49,000
We showed how to use a generator expression and how to use a generator function.

13
00:00:49,000 --> 00:00:55,000
The generator is a really powerful tool to add to your arsenal of Python techniques.

14
00:00:55,000 --> 00:00:59,000
I hope that you understand it a little better than you did before.
