1
00:00:00,000 --> 00:00:04,000
I'm not sure what assertions you added, but let's look at some of the ones that I decided to add.

2
00:00:04,000 --> 00:00:08,000
One condition we can do is if self.tail is greater than self.head,

3
00:00:08,000 --> 00:00:11,000
then the difference between them has to be the size.

4
00:00:11,000 --> 00:00:14,000
That is to say, the distance between the head and tail has to be the number of elements

5
00:00:14,000 --> 00:00:16,000
currently in the queue.

6
00:00:16,000 --> 00:00:18,000
On the other hand, if the tail is less than the head,

7
00:00:18,000 --> 00:00:20,000
then that means that the tail has already wrapped around,

8
00:00:20,000 --> 00:00:22,000
and in this case the difference between head and tail

9
00:00:22,000 --> 00:00:26,000
has to be equal to max minus the size of the queue.

10
00:00:26,000 --> 00:00:29,000
The third case that we have here is that if the head and tail are at the same place,

11
00:00:29,000 --> 00:00:33,000
then either the queue is empty or the queue is full.

12
00:00:33,000 --> 00:00:35,000
Let's go ahead and run this on the bugging and see what happens.

13
00:00:35,000 --> 00:00:37,000
So, we violated an assertion,

14
00:00:37,000 --> 00:00:42,000
and better yet, we violated an assertion in the checkRep function. So, that's good.

15
00:00:42,000 --> 00:00:45,000
What this means is by violating an assertion in a checkRep function,

16
00:00:45,000 --> 00:00:49,000
we caught the bug, we're terminating the program, and we can debug the code,

17
00:00:49,000 --> 00:00:51,000
using sort of localized debugging inside this data structure.

18
00:00:51,000 --> 00:00:56,000
We don't have to do some huge tracking down of where the bad values came from.

19
00:00:56,000 --> 00:01:00,000
So, we want to do one final check here to make sure that my assertions are right.

20
00:01:00,000 --> 00:01:06,000
I want to go to my buggy key code, fix it, and run the code again.

21
00:01:06,000 --> 00:01:10,000
What we want is all of these assertions should succeed during the test cases.

22
00:01:10,000 --> 99:59:59,999
Okay, good. So, that was the case.
