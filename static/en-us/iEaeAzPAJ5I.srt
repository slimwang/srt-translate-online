1
00:00:00,167 --> 00:00:03,678
The basic functionality
of GCD is as follows.

2
00:00:03,678 --> 00:00:07,559
We need to be able to create a queue,
either from scratch or

3
00:00:07,559 --> 00:00:09,152
reuse an existing one.

4
00:00:09,152 --> 00:00:14,413
Get the main queue and
also add a closure to an existing queue.

5
00:00:14,413 --> 00:00:17,545
Grand Central Dispatch was
not written in SWF, but see.

6
00:00:17,545 --> 00:00:20,771
Unlike SWF, C has no classes or objects.

7
00:00:20,771 --> 00:00:23,563
So, Grand Central Dispatch
is made of functions and

8
00:00:23,563 --> 00:00:25,664
types instead of classes and methods.

9
00:00:25,664 --> 00:00:30,089
These functions and types have different
naming conventions than those used in

10
00:00:30,089 --> 00:00:33,135
SWF, but they behave exactly
as if they were SWFcode.

11
00:00:33,135 --> 00:00:35,585
First of all,
we need a type to represent queues.

12
00:00:35,585 --> 00:00:38,130
That's dispatch_queue_t,

13
00:00:38,130 --> 00:00:42,848
then we will need a function to
create a queue from scratch.

14
00:00:42,848 --> 00:00:44,792
Dispatch_queue_create.

15
00:00:44,792 --> 00:00:49,750
It takes two parameters, a name and the
type of the queue, serial or concurrent.

16
00:00:49,750 --> 00:00:54,380
To specify serial,
just pass dispatch_queue_serial or nill.

17
00:00:54,380 --> 00:00:59,361
IOS always gives each app four extra
queues on top of the name one.

18
00:00:59,361 --> 00:01:01,648
These are called global queues.

19
00:01:01,648 --> 00:01:06,867
We access those global queues with
a function, dispatch_get_global_queue.

20
00:01:06,867 --> 00:01:10,755
The only difference between those
four queues is the priority or

21
00:01:10,755 --> 00:01:13,500
how fast it will get
the attention of the CBU.

22
00:01:13,500 --> 00:01:17,518
It's a good practice to avoid creating
queues when using an existing one is

23
00:01:17,518 --> 00:01:18,038
enough.

24
00:01:18,038 --> 00:01:21,612
We will use dispatch_get_
global_queue for that.

25
00:01:21,612 --> 00:01:24,434
We also need a way to
obtain the main queue.

26
00:01:24,434 --> 00:01:27,355
This is the queue that runs all your UI.

27
00:01:27,355 --> 00:01:31,208
We will use the dispatch_get_main_queue
function for this.

28
00:01:31,208 --> 00:01:34,580
Why we need this might not
be obvious right now, but

29
00:01:34,580 --> 00:01:38,200
it will be as soon as we get
started with the sample app.

30
00:01:38,200 --> 00:01:42,494
Last but not least, we need a way
of adding closures to the queue,

31
00:01:42,494 --> 00:01:45,318
that's where dispatch_async comes in.

32
00:01:45,318 --> 00:01:47,221
This function takes a queue and

33
00:01:47,221 --> 00:01:51,916
a closure, it adds this closure to
the queue and then returns immediately.

34
00:01:51,916 --> 00:01:55,647
The code inside the queue will run
sometime in the immediate future,

35
00:01:55,647 --> 00:01:58,606
the exact time will depend
on how many closures already

36
00:01:58,606 --> 00:02:01,390
waiting in the queue and
the priority of the queue.
