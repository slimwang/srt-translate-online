1
00:00:00,000 --> 00:00:05,000
We can illustrate this idea of reducibility by introducing another problem on social networks

2
00:00:05,000 --> 00:00:09,000
that we'll call the S independent set problem and the problem goes like this.

3
00:00:09,000 --> 00:00:18,000
Given the graph H and a number S, is there a set of nodes of size S, the set is a size S not the nodes,

4
00:00:18,000 --> 00:00:23,000
in H such that node to node in the set are connected in the original graph H.

5
00:00:23,000 --> 00:00:26,000
In some sense, they're independent of each other.

6
00:00:26,000 --> 00:00:29,000
You can think of this as the find the strangers problem.

7
00:00:29,000 --> 00:00:32,000
So they need to be in the social network together but none of them know each other.

8
00:00:32,000 --> 00:00:37,000
So for example, if we look in this graph H for an independent set size of three,

9
00:00:37,000 --> 00:00:44,000
We noticed that there is at least this triple, this set of nodes where none of the pairs know each other.

10
00:00:44,000 --> 00:00:47,000
We can't make it any bigger than this at least including those three nodes

11
00:00:47,000 --> 00:00:53,000
because every other nodes that we didn't include is connected to at least one of these guys.

12
00:00:53,000 --> 00:00:56,000
I think this is probably the biggest independent set in this graph.

13
00:00:56,000 --> 00:01:01,000
All right, so now what we're going to try to do is reduce this problem to K-clique

14
00:01:01,000 --> 00:01:05,000
or more concretely show how a polynomial time solution

15
00:01:05,000 --> 00:01:09,000
to K-clique solves the S-independent set problem.

16
00:01:09,000 --> 00:01:13,000
So here's four approaches that we might be able to use to solve this problem.

17
00:01:13,000 --> 00:01:19,000
One is first note that the S-independent set problem can be solved by guessing a set of nodes,

18
00:01:19,000 --> 00:01:24,000
and then making sure that none of the pairs of nodes in that set are connected.

19
00:01:24,000 --> 00:01:31,000
All you have to do is check SÂ˛ edges or big Î of SÂ˛ edges so this runs in polynomial time.

20
00:01:31,000 --> 00:01:37,000
Here's another possibility. Let's actually take the graph H and run the S-clique algorithm on it.

21
00:01:37,000 --> 00:01:42,000
That is to say the K-clique algorithm that we use when looking for a clique of size S,

22
00:01:42,000 --> 00:01:45,000
and whatever it returns, return the opposite of the answer.

23
00:01:45,000 --> 00:01:50,000
The idea being that if a graph has a very big clique in it, there's lot of nodes

24
00:01:50,000 --> 00:01:56,000
that are densely connected, then it's unlikely to have a large independent set.

25
00:01:56,000 --> 00:01:58,000
All right, here's another approach.

26
00:01:58,000 --> 00:02:03,000
Let's take the graph H and build a new graph G that is the complement of H.

27
00:02:03,000 --> 00:02:06,000
That is to say every place there's an edge in H.

28
00:02:06,000 --> 00:02:11,000
There's no edge in G. Every place there's no edge in H. There is an edge in G.

29
00:02:11,000 --> 00:02:17,000
Then we run the S-clique algorithm that the K-clique algorithm looking for a clique of size S

30
00:02:17,000 --> 00:02:22,000
on this new graph G and whatever answer it gives just return the opposite.

31
00:02:22,000 --> 00:02:26,000
So if it says that there's an S-clique in G return false

32
00:02:26,000 --> 00:02:30,000
and if it says there's no S-clique in G then return true.

33
00:02:30,000 --> 00:02:35,000
And this last option is the reverse of that, so you build the complement graph.

34
00:02:35,000 --> 00:02:41,000
You look for a size S-clique in that graph and if there is one say yes and if there isn't one say no.

35
00:02:41,000 --> 00:02:43,000
So think about these a little bit.

36
00:02:43,000 --> 00:02:49,000
Maybe even sketch an example problem for yourself to see which of these makes sense.
