1
00:00:00,120 --> 00:00:02,000
Okay, so now I'd like to talk about another type

2
00:00:02,000 --> 00:00:06,450
of index. Geospatial indexes, in particular. Support for geospatial indexes in

3
00:00:06,450 --> 00:00:10,360
MongoDB give us the ability to perform queries for locations

4
00:00:10,360 --> 00:00:13,540
near another location. So, the type of thing that a lot

5
00:00:13,540 --> 00:00:15,550
of phone apps will do, when you're say, looking for

6
00:00:15,550 --> 00:00:18,340
a nearby cafe. Now the type of geospatial index that we're

7
00:00:18,340 --> 00:00:21,240
going to talk about is 2D geospatial indexes. But I'm going

8
00:00:21,240 --> 00:00:25,220
to be, also provide support for spherical geospatial indexes, that is

9
00:00:25,220 --> 00:00:27,760
those that take into account the curvature of the earth.

10
00:00:27,760 --> 00:00:29,770
But I'll direct you to the documentation and our courses

11
00:00:29,770 --> 00:00:32,200
at MongoDB University if you're interested in learning more about

12
00:00:32,200 --> 00:00:36,230
those. So, with 2D Geospatial Indexes, we're essentially thinking of our

13
00:00:36,230 --> 00:00:39,080
data as all lying on a Cartesian plane, with values

14
00:00:39,080 --> 00:00:43,530
in the x direction and the y direction. So, in these

15
00:00:43,530 --> 00:00:47,220
situations we have a query location of some kind, and

16
00:00:47,220 --> 00:00:50,470
what we want to find in response to queries are other

17
00:00:50,470 --> 00:00:55,390
items or documents that are close to this query location.

18
00:00:55,390 --> 00:00:57,590
So there's essentially three things that you need to know about

19
00:00:57,590 --> 00:01:01,350
in order to construct a geospacial index in MongoDB. The

20
00:01:01,350 --> 00:01:04,720
first of those is that you need a field that holds

21
00:01:04,720 --> 00:01:07,200
a location, and the location needs to be stored as

22
00:01:07,200 --> 00:01:09,940
an array with first an x value and then a y

23
00:01:09,940 --> 00:01:13,390
value. Now you can name this field whatever you want. I've

24
00:01:13,390 --> 00:01:16,980
just chosen the name location here. It could be loc or

25
00:01:16,980 --> 00:01:20,410
position point anything you like, but it does need

26
00:01:20,410 --> 00:01:23,490
to follow this form of having the x value first

27
00:01:23,490 --> 00:01:25,520
and then the y. The second thing you need to

28
00:01:25,520 --> 00:01:27,590
know about is that you need to ensure there's an

29
00:01:27,590 --> 00:01:30,450
index, need to all ensure index and create an

30
00:01:30,450 --> 00:01:34,460
index on this particular field. So in this case I

31
00:01:34,460 --> 00:01:39,180
would need to call insure index. Specifying location as the

32
00:01:39,180 --> 00:01:42,720
field, and I would need to specify a direction here.

33
00:01:42,720 --> 00:01:44,720
We'll take a look at a specific example of that

34
00:01:44,720 --> 00:01:47,570
in just a bit. So again, we need to create an

35
00:01:47,570 --> 00:01:49,980
index now on this field that we have for our

36
00:01:49,980 --> 00:01:54,390
documents that we want to use in geospatial queries. And finally

37
00:01:54,390 --> 00:01:57,120
the way we do queries against the geospatial index, is

38
00:01:57,120 --> 00:02:00,860
through the use of the $near operator. So it's these three

39
00:02:00,860 --> 00:02:04,540
steps in combination that allow us to do something like this,

40
00:02:04,540 --> 00:02:08,340
and get all of the documents that have a location near

41
00:02:08,340 --> 00:02:10,490
this one. So let's take a look at this in some

42
00:02:10,490 --> 00:02:12,690
code, and then we'll do an example query in the Mongo

43
00:02:12,690 --> 00:02:16,260
shell. So this is a script that I actually retrieved from

44
00:02:16,260 --> 00:02:19,180
the OpenStreetMap, folks. This is a script that they wrote

45
00:02:19,180 --> 00:02:23,130
for putting OSM data into MongoDB. So you could see here

46
00:02:23,130 --> 00:02:26,970
that it's going to do iterative parsing of our Osm data,

47
00:02:26,970 --> 00:02:29,995
just like we did in a previous example back in lesson

48
00:02:29,995 --> 00:02:33,820
three. Now, let's take a look a little bit further down first,

49
00:02:33,820 --> 00:02:35,130
because I want to show you the location

50
00:02:35,130 --> 00:02:38,420
field here. So, for every node in this file,

51
00:02:38,420 --> 00:02:41,560
this script builds a value called loc and it

52
00:02:41,560 --> 00:02:44,470
is composed of the latitude value and the longitude

53
00:02:44,470 --> 00:02:48,220
value for a node element in the XML file.

54
00:02:48,220 --> 00:02:51,920
Then it adds that field to the record that

55
00:02:51,920 --> 00:02:55,310
it's building up as it moves through the node

56
00:02:55,310 --> 00:02:58,395
that it's creating a document for, okay? And then,

57
00:02:58,395 --> 00:03:01,170
finally, it will end up creating a document

58
00:03:01,170 --> 00:03:03,969
in MongoDB by doing an insert at some point.

59
00:03:03,969 --> 00:03:07,210
Okay? Now, using that location field, at the

60
00:03:07,210 --> 00:03:10,625
very top of this code. Ensure_index, it's called. And

61
00:03:10,625 --> 00:03:14,880
ensure_index is called using that location field which

62
00:03:14,880 --> 00:03:17,450
stores the xy coordinates. Four nodes that are parsed

63
00:03:17,450 --> 00:03:20,830
out of the OSM XML file. Now, the syntax

64
00:03:20,830 --> 00:03:23,810
for ensure_index is slightly different in pymongo. It matches

65
00:03:23,810 --> 00:03:25,500
the syntax for the language here, which of course is

66
00:03:25,500 --> 00:03:30,950
Python. Okay? But then also, rather than passing a dictionary,

67
00:03:30,950 --> 00:03:34,930
what we pass instead is a list of tuples. So,

68
00:03:34,930 --> 00:03:38,050
we pass the name of the field that we want

69
00:03:38,050 --> 00:03:40,460
to create an index on, as well as a direction.

70
00:03:40,460 --> 00:03:42,900
So these are constant values that are available to us

71
00:03:42,900 --> 00:03:45,573
on pymongo. So we're not simply typing strings here, which

72
00:03:45,573 --> 00:03:48,622
is potentially very airprone. Okay? And you can see that,

73
00:03:48,622 --> 00:03:50,767
since your index is actually being used here to

74
00:03:50,767 --> 00:03:54,287
create several indexes, here's another example where we're creating an

75
00:03:54,287 --> 00:03:56,377
index on id and we're specifying that we want

76
00:03:56,377 --> 00:04:00,320
that index to be created in ascending order. Okay? So,

77
00:04:00,320 --> 00:04:05,886
technically speaking, GEO2D is a direction argument for ensure_index.

78
00:04:05,886 --> 00:04:08,109
And the reason why it makes sense to think about

79
00:04:08,109 --> 00:04:10,788
this as a direction argument, is because queries using

80
00:04:10,788 --> 00:04:13,809
the near operator will always return documents sorted by those

81
00:04:13,809 --> 00:04:17,260
that are nearest to the query location. Okay, so now

82
00:04:17,260 --> 00:04:19,890
let's take a look at an actual query, and bear in

83
00:04:19,890 --> 00:04:22,029
mind that the query we're going to look at in the Mongo

84
00:04:22,029 --> 00:04:26,550
shell is a query against the collection that we created using

85
00:04:26,550 --> 00:04:28,770
this script. This is exactly the script that I used to

86
00:04:28,770 --> 00:04:33,430
create this collection and store documents in it within MongoDB. Okay

87
00:04:33,430 --> 00:04:36,680
so lets take a look at query here. Now what I

88
00:04:36,680 --> 00:04:39,370
need to do is make sure that I'm using the OSM

89
00:04:39,370 --> 00:04:42,670
data base and then I'm going to create

90
00:04:42,670 --> 00:04:45,030
the nodes collection that script we just looked

91
00:04:45,030 --> 00:04:48,040
at actually creates several collections one of which

92
00:04:48,040 --> 00:04:50,170
is nodes and these are based on the nodes

93
00:04:50,170 --> 00:04:55,170
tags that appear in the OSM dataset. Now

94
00:04:55,170 --> 00:04:57,840
again, we're using the Chicago OSM dataset just for

95
00:04:57,840 --> 00:05:00,160
point of clarification. Okay, so what I'm going

96
00:05:00,160 --> 00:05:04,080
to do here then is query this particular collection,

97
00:05:04,080 --> 00:05:07,630
and note that I'm querying against location field. And

98
00:05:07,630 --> 00:05:11,970
I'm using the near operator, okay? And I'm specifying a

99
00:05:11,970 --> 00:05:15,120
set of coordinates here. Okay? So, this is the

100
00:05:15,120 --> 00:05:17,540
type of thing that an application might do in order

101
00:05:17,540 --> 00:05:22,340
to find restaurants or other amenities near the location

102
00:05:22,340 --> 00:05:24,680
of a user making the query. Okay, this is how

103
00:05:24,680 --> 00:05:26,405
we might do this sort of thing in the

104
00:05:26,405 --> 00:05:29,360
back-end of an application that supports that type of functionality.

105
00:05:29,360 --> 00:05:31,470
Now, I'm doing one other thing here, and this is just is

106
00:05:31,470 --> 00:05:35,230
really purposes of this example. And you remember from a little earlier in

107
00:05:35,230 --> 00:05:38,000
the lesson when we looked at the tags that get applied to nodes.

108
00:05:38,000 --> 00:05:41,910
That there is this tg field in this collection. Okay? And just so

109
00:05:41,910 --> 00:05:43,870
that the data we get back is a little bit more interesting,

110
00:05:43,870 --> 00:05:47,320
I'm just ensuring that there is a tg field, that it actually exists.

111
00:05:47,320 --> 00:05:50,960
Because then we'll have some data that has some names and other sort

112
00:05:50,960 --> 00:05:54,550
of tagging associated with it. So, we can kind of figure out what's

113
00:05:54,550 --> 00:05:59,390
there, near this particular location. Now, this location happens

114
00:05:59,390 --> 00:06:01,590
to be quite close to Wrigley Field. So, what we're

115
00:06:01,590 --> 00:06:05,540
going to get are a number of restaurants, cafes, convenient

116
00:06:05,540 --> 00:06:08,284
stores, that sort of thing in that neighborhood, so imagine

117
00:06:08,284 --> 00:06:10,690
you've just walked out of Wrigley Field and you're looking

118
00:06:10,690 --> 00:06:12,960
to see what's nearby on your phone. This is a

119
00:06:12,960 --> 00:06:15,310
type of query we might do in the backend of

120
00:06:15,310 --> 00:06:19,960
application to support this sort of thing. Okay. So here's

121
00:06:19,960 --> 00:06:24,460
our initial set of results. We could get more by typing IT here in the shell.

122
00:06:24,460 --> 00:06:26,010
Right? We can see there's a Jamba Juice.

123
00:06:27,100 --> 00:06:32,250
There's a school, church, convenience store in this

124
00:06:32,250 --> 00:06:35,900
case, happens to be a Walgreens, Domino's Pizza,

125
00:06:35,900 --> 00:06:39,829
and a Dunkin' Donuts. Okay, so that's pretty

126
00:06:39,829 --> 00:06:41,761
much what you need to know in order

127
00:06:41,761 --> 00:06:44,990
to build geospatial indexes In MongoDB. We'll take a

128
00:06:44,990 --> 00:06:49,130
look at using geospacial indexes in the case study in the next lesson.
