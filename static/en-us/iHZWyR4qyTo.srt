1
00:00:00,000 --> 00:00:02,000
So now let's talk about the 1988 Internet worm.

2
00:00:02,000 --> 00:00:04,000
There are several interesting things about this Internet worm.

3
00:00:04,000 --> 00:00:07,000
Probably the main one is that it was one of the first worms

4
00:00:07,000 --> 00:00:09,000
that actually got widespread attention.

5
00:00:09,000 --> 00:00:11,000
It got this attention for good reason.

6
00:00:11,000 --> 00:00:14,000
If you remember 1988, the Internet was not particularly well known to the general public,

7
00:00:14,000 --> 00:00:16,000
and it had a relatively small number of users.

8
00:00:16,000 --> 00:00:19,000
And even so, this worm infected an estimated 6,000 machines.

9
00:00:19,000 --> 00:00:22,000
And while this is a really tiny number compared to a modern worm

10
00:00:22,000 --> 00:00:24,000
or a modern botnet or something like this,

11
00:00:24,000 --> 00:00:28,000
this was a substantial fraction of the number of machines connected to the Internet at the time.

12
00:00:28,000 --> 00:00:32,000
The way this worm spread is it used computers' Internet connections

13
00:00:32,000 --> 00:00:35,000
to exploit known vulnerabilities in the UNIX hosts of the time.

14
00:00:35,000 --> 00:00:38,000
Of course, at the time, the existence of a remotely exploitable bug

15
00:00:38,000 --> 00:00:41,000
wasn't considered nearly as serious as it would be considered today

16
00:00:41,000 --> 00:00:45,000
because, of course, the 1988 worm and all of the subsequent ones hadn't happened yet.

17
00:00:45,000 --> 00:00:48,000
One of these bugs was a buffer overflow exploit in the finger daemon,

18
00:00:48,000 --> 00:00:50,000
and this was a service that would run on UNIX machines of the time,

19
00:00:50,000 --> 00:00:52,000
and the finger daemon would let you query a remote machine

20
00:00:52,000 --> 00:00:56,000
to learn about whether a user was logged in to that machine and some other stuff.

21
00:00:56,000 --> 00:00:59,000
And so now let's ask the question, would random testing have changed the outcome?

22
00:00:59,000 --> 00:01:03,000
Well, it seems extremely likely not because these bugs were known at the time.

23
00:01:03,000 --> 00:01:05,000
On the other hand, let's ask a little bit different question.

24
00:01:05,000 --> 00:01:08,000
Could this bug in finger daemon and lots of other bugs like it

25
00:01:08,000 --> 00:01:10,000
have been found by random testing?

26
00:01:10,000 --> 00:01:12,000
And the answer to the question is probably yes.

27
00:01:12,000 --> 00:01:14,000
In fact, if we go back to the original fuzzing paper,

28
00:01:14,000 --> 00:01:17,000
one of the bugs that was found was caused by the same programming practice

29
00:01:17,000 --> 00:01:20,000
that provided one of the security holes to the Internet worm.

30
00:01:20,000 --> 00:01:24,000
So basically, even in its original fairly weak form

31
00:01:24,000 --> 00:01:26,000
where fuzzing was done with completely random data,

32
00:01:26,000 --> 00:01:29,000
it was finding the kind of bugs that were causing security holes.

33
00:01:29,000 --> 00:01:33,000
This remains true to this day, but fuzzers are used to find a lot of exploitable vulnerabilities

34
00:01:33,000 --> 00:01:35,000
in hosts that have Internet-facing services.

35
00:01:35,000 --> 00:01:38,000
So in summary, it could have found the kind of bugs that the worm exploited

36
00:01:38,000 --> 00:01:41,000
and others like it had people been running fuzzers a couple of years earlier.
