1
00:00:00,021 --> 00:00:02,767
Now, there's actually 2 different flavors of scan.

2
00:00:02,767 --> 00:00:06,176
The one I just presented is exclusive scan.

3
00:00:06,176 --> 00:00:10,359
The output at each location is a function of all the elements that came before,

4
00:00:10,359 --> 00:00:13,028
not including the current element.

5
00:00:13,028 --> 00:00:19,162
So let's see what the output would be if we do a sum scan on this 8-element input array.

6
00:00:19,162 --> 00:00:21,330
So this is straightforward to compute, and let's just keep in mind

7
00:00:21,330 --> 00:00:27,341
the output here is the sum of all elements that come before it but not including it.

8
00:00:27,341 --> 00:00:30,206
Inclusive scan is defined slightly differently.

9
00:00:30,206 --> 00:00:33,947
Whereas exclusive scan summed up all the elements that came before

10
00:00:33,947 --> 00:00:36,049
and didn't include the current element,

11
00:00:36,049 --> 00:00:40,920
inclusive scan instead sums up all the elements before and including the current element.

12
00:00:40,920 --> 00:00:43,236
So let's see what the answer is here.

13
00:00:43,236 --> 00:00:47,878
And so in inclusive scan, this element is the sum of all the elements up to

14
00:00:47,878 --> 00:00:51,078
and including the current element.

15
00:00:51,078 --> 00:00:54,031
Now, we're not really covering applications of the scan primitives in this lecture.

16
00:00:54,031 --> 00:00:55,956
We'll do these in the next lecture.

17
00:00:55,956 --> 00:00:59,274
So it's not immediately obvious why you might need both flavors.

18
00:00:59,274 --> 00:01:03,546
But what you'll find is that some algorithms are best expressed using an inclusive scan.

19
00:01:03,546 --> 00:01:06,145
Others prefer using an exclusive scan.

20
00:01:06,145 --> 00:01:10,875
It's likely that if you use a library that contains scan primitives, you'll have access to both flavors.

21
00:01:10,875 --> 00:01:14,942
Fortunately, it's fairly straightforward to convert between them if you need to.
