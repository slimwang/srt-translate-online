1
00:00:00,370 --> 00:00:03,190
We'll create a new Pod
name secure monolith.

2
00:00:03,190 --> 00:00:06,050
Secure monolith secures
access to the monolith

3
00:00:06,050 --> 00:00:10,634
container using nginx which will serve
as the reverse proxy serving HTTPS.

4
00:00:10,634 --> 00:00:14,319
The nginx container will be deployed
in the same Pod as a monolith container

5
00:00:14,319 --> 00:00:15,967
because it's tightly coupled.

6
00:00:15,967 --> 00:00:19,327
Before we can use the nginx
container to survey HTTP traffic,

7
00:00:19,327 --> 00:00:22,040
we'll need some TLS certificate.

8
00:00:22,040 --> 00:00:23,490
In this tutorial,

9
00:00:23,490 --> 00:00:28,220
we'll store a set of self-signed TLS
certificates in kubernetes as secrets.

10
00:00:28,220 --> 00:00:32,290
Then we won't dive into all the details
here, but we want to be secure.

11
00:00:32,290 --> 00:00:35,340
So we'll need some certs,
let's look at the certs we have for

12
00:00:35,340 --> 00:00:36,625
this particular application.

13
00:00:36,625 --> 00:00:37,796
The cert.pem and

14
00:00:37,796 --> 00:00:42,484
the key.pem files will be used to
secure traffic on a monolith server.

15
00:00:42,484 --> 00:00:48,520
And the ca.pem will be used by
HTTP clients as a CA to trust.

16
00:00:48,520 --> 00:00:51,670
Since the certs being used by
the monolith server were signed by

17
00:00:51,670 --> 00:00:56,270
the CA represented by ca.pem,
HTTP clients that trust ca.pem

18
00:00:56,270 --> 00:01:00,810
will be able to validate the SSL
connection to the Malware Server.

19
00:01:00,810 --> 00:01:04,739
Next we'll use QCTL to
cure rate the TLS cert

20
00:01:04,739 --> 00:01:08,770
secret from the TLS certificates
stored out of the TLS directory.

21
00:01:08,770 --> 00:01:10,550
kubectl will create a key for

22
00:01:10,550 --> 00:01:15,830
each file in the TLS directory
under the TLS cert secret book.

23
00:01:15,830 --> 00:01:19,620
Use the kubectl describe
command to verify this.

24
00:01:19,620 --> 00:01:23,470
The secure monolith pod requires
an nginx config to handle the secure

25
00:01:23,470 --> 00:01:24,860
reverse proxy.

26
00:01:24,860 --> 00:01:28,220
Let's review the nginx
configuration file that does this.

27
00:01:28,220 --> 00:01:32,880
The proxy.conf configuration file
causes nginx to listen on port 443.

28
00:01:32,880 --> 00:01:35,689
For secure connections and
proxy traffic to localhost

29
00:01:35,689 --> 00:01:39,600
on port 80 where the monolithic
container is listening.

30
00:01:39,600 --> 00:01:42,230
This works because the nginx
on monolithic containers,

31
00:01:42,230 --> 00:01:45,780
sharing network namespace
while running in the same pod.

32
00:01:45,780 --> 00:01:49,400
Next, we need to create a configmap
entry for the proxy.com

33
00:01:49,400 --> 00:01:54,230
nginx configuration file using
the kubectl create config map command.

34
00:01:54,230 --> 00:01:57,410
Use the kubectl describe
config map command

35
00:01:57,410 --> 00:02:01,400
to get more details about
the nginx-proxy-conf config map entry.

36
00:02:02,540 --> 00:02:06,450
At this point we're ready to attach
the nginx configuration files and

37
00:02:06,450 --> 00:02:09,500
tailor certificates for
the secure monolith Pod.
