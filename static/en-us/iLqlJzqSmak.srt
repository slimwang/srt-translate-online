1
00:00:00,100 --> 00:00:02,830
This is our old code, I want to demonstrate the vulnerability

2
00:00:02,830 --> 00:00:04,620
in our old code so we can make sure we fixed

3
00:00:04,620 --> 00:00:06,938
it. This is the old code running here and if we

4
00:00:06,938 --> 00:00:09,670
were to take a look at this. We're going to modify our

5
00:00:09,670 --> 00:00:13,850
cookie. Document.cookie. That is the value. Let's say we want to set this to

6
00:00:13,850 --> 00:00:18,840
visits to 10,001. First we need to find what the hash of 10,001. We can use

7
00:00:18,840 --> 00:00:24,424
python for that. Lets go ahead and try that real quick. Import hasLib,

8
00:00:24,424 --> 00:00:30,804
hashLib.md5.("10001").hexdigest,

9
00:00:30,804 --> 00:00:32,740
'kay. We'll take this value here. Let's

10
00:00:32,740 --> 00:00:34,610
take that with us into our browser. We're

11
00:00:34,610 --> 00:00:40,543
forging cookies here. So we're going to say documents.cookie

12
00:00:40,543 --> 00:00:45,303
equals Visits equals 10,001 pipe our new

13
00:00:45,303 --> 00:00:52,260
hash value, now when we reload this page, we are the best ever. But we're

14
00:00:52,260 --> 00:00:53,820
not the best ever, we just cheated. Okay,

15
00:00:53,820 --> 00:00:55,920
so, let's incorporate the new functions we just

16
00:00:55,920 --> 00:00:58,220
wrote into our code. So here we are in

17
00:00:58,220 --> 00:01:02,900
our editor, and I've plopped in our new function. We're

18
00:01:02,900 --> 00:01:05,170
going to, move secret out of the way. We are going

19
00:01:05,170 --> 00:01:08,890
to pretend it is actually in another module that you

20
00:01:08,890 --> 00:01:13,680
don't publish or share. And now our functions should be

21
00:01:13,680 --> 00:01:16,640
as good as new. Let's try this, let's try this

22
00:01:16,640 --> 00:01:18,500
out in our browser. So here we are in our

23
00:01:18,500 --> 00:01:21,620
browser, we have dropped in a new hashing function so

24
00:01:21,620 --> 00:01:23,710
our old cookies are going to become invalid and when we

25
00:01:23,710 --> 00:01:26,660
reload the page you can see we've been here one time.

26
00:01:27,840 --> 00:01:32,470
If we were to inspect the cookie, document.cookie, we see that

27
00:01:32,470 --> 00:01:34,720
we have this cookie. Now, it's got the same format at

28
00:01:34,720 --> 00:01:37,450
the previous cookie, except this one is very hard to forge.

29
00:01:37,450 --> 00:01:40,080
Without knowing that secret, we, all we can do is guess

30
00:01:40,080 --> 00:01:43,790
at the hash. And that's. You know, the property of the

31
00:01:43,790 --> 00:01:47,330
hashing algorithms is that that is basically impossible to get correct.

32
00:01:47,330 --> 00:01:51,250
So if I were to modify this cookie, document the

33
00:01:51,250 --> 00:01:55,647
cookie equals visits equals 10001. I mean what value do we

34
00:01:55,647 --> 00:01:57,877
even put in here. I mean we can iterate over,

35
00:01:57,877 --> 00:02:00,913
you know, every possible hash and just kind of guess at

36
00:02:00,913 --> 00:02:03,370
it and maybe get lucky. But we'd have to get

37
00:02:03,370 --> 00:02:06,120
extraordinarily lucky. You see, I reloaded the page and reset down

38
00:02:06,120 --> 00:02:09,240
to one. When I mean extraordinarily lucky, I mean we'd have

39
00:02:09,240 --> 00:02:12,170
to you know, take more time than there are you know,

40
00:02:12,170 --> 00:02:14,670
atoms in the universe to figure it out. So, that's

41
00:02:14,670 --> 00:02:16,800
not going to work in our favor. Okay, so that's pretty

42
00:02:16,800 --> 00:02:19,430
cool. I just want to summarize that algorithm so, so it's

43
00:02:19,430 --> 00:02:22,010
clear what we did. Instead of setting the cookie visits

44
00:02:22,010 --> 00:02:26,470
equal 1, which can be easily forged And instead of setting the cookie visits

45
00:02:26,470 --> 00:02:31,730
equals 1, and then the md5 of 1, which can also be,

46
00:02:31,730 --> 00:02:37,295
also be easily forged if you know that we're using md5. We instead set

47
00:02:37,295 --> 00:02:41,830
it to visits equals 1 pipe HMAC, Secret comma 1. And

48
00:02:41,830 --> 00:02:44,740
as long as we keep this secret secret, they can know our

49
00:02:44,740 --> 00:02:46,730
algorithm, they can know what we're doing, they can even see

50
00:02:46,730 --> 00:02:50,860
our code and they won't be able to forge invalid cookies, which

51
00:02:50,860 --> 00:02:53,650
is a pretty neat property. We use this all the time

52
00:02:53,650 --> 00:02:55,090
because imagine, if we're not counting,

53
00:02:55,090 --> 00:02:56,990
instead of counting visits, we're counting

54
00:02:56,990 --> 00:02:59,690
user IDs. It would be a real big problem, you know?

55
00:02:59,690 --> 00:03:02,880
If, if I'm logged into, you know, my mail, my Gmail, and

56
00:03:02,880 --> 00:03:06,060
I've got a cookie that identifies, you know, who I am, if somebody

57
00:03:06,060 --> 00:03:10,560
could just say, well, you know, my user ID is Steve's user ID,

58
00:03:10,560 --> 00:03:13,160
and then, if he logged into my email, that would be a very

59
00:03:13,160 --> 00:03:16,930
big problem. So, that's why you do things like this. This prevents people from

60
00:03:16,930 --> 00:03:19,922
forging your cookie. And also, it saves you some effort validating on the

61
00:03:19,922 --> 00:03:23,234
server side, because if, if this doesn't validate, you don't have to check to

62
00:03:23,234 --> 00:03:25,634
see if the string is all digits and that sort of stuff because

63
00:03:25,634 --> 00:03:28,034
you know, it came from you, you know what you set it to, and

64
00:03:28,034 --> 00:03:30,748
that makes your life a little simpler. So this is a really

65
00:03:30,748 --> 00:03:34,920
popular strategy we're going to use for all sorts of things in this class.
