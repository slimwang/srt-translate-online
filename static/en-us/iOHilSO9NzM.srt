1
00:00:00,440 --> 00:00:02,700
I mentioned software caching as a

2
00:00:02,700 --> 00:00:06,830
mechanism that's available in exokernel for establishing

3
00:00:06,830 --> 00:00:13,750
secure binding. And software TLB is one specific example of using the software

4
00:00:13,750 --> 00:00:19,730
caching idea. As we know, when we have a context switch one of the biggest

5
00:00:19,730 --> 00:00:25,980
sources of performance loss is the fact that you're losing locality

6
00:00:25,980 --> 00:00:29,420
for the newly scheduled process. And since the

7
00:00:29,420 --> 00:00:33,300
address base occupied by this library operating system

8
00:00:33,300 --> 00:00:36,470
and this library operating system are necessarily completely

9
00:00:36,470 --> 00:00:39,770
different, when we switch from one library operating system

10
00:00:39,770 --> 00:00:44,830
to another, we have to flush out the entire TLB. And if we do that, when

11
00:00:44,830 --> 00:00:47,700
we run this other library operating system, it's

12
00:00:47,700 --> 00:00:52,180
not going to find any of its virtual addresses in

13
00:00:52,180 --> 00:00:57,770
the TLB. And that's a huge source of overhead and in order to mitigate that

14
00:00:57,770 --> 00:01:01,260
overhead, exokernel has this mechanism called software

15
00:01:01,260 --> 00:01:04,360
TLB. The idea is quite simple, the software

16
00:01:04,360 --> 00:01:11,200
TLB is sort of a snapshot of the hardware TLB for each of the operating

17
00:01:11,200 --> 00:01:14,400
systems. So this software TLB, if a data

18
00:01:14,400 --> 00:01:17,310
structure in the exokernel that represents the mappings

19
00:01:17,310 --> 00:01:20,780
for operating system one. Similarly, this

20
00:01:20,780 --> 00:01:24,960
data structure represents the mapping for library

21
00:01:24,960 --> 00:01:27,050
operating system number two. So let's

22
00:01:27,050 --> 00:01:29,770
say currently we're running library operating system

23
00:01:29,770 --> 00:01:32,840
one. So the TLB entries correspond

24
00:01:32,840 --> 00:01:36,600
to valid mappings for library operating systems

25
00:01:36,600 --> 00:01:40,010
one. And let's say that exokernel decides

26
00:01:40,010 --> 00:01:42,730
to switch from this library operating system

27
00:01:42,730 --> 00:01:46,180
to this one. At that point, what exokernel

28
00:01:46,180 --> 00:01:50,600
will do is dump the TLB into the software

29
00:01:50,600 --> 00:01:52,865
TLB data structure it has on behalf of

30
00:01:52,865 --> 00:01:55,850
OS1. Actually not all of the TLB, but we'll

31
00:01:55,850 --> 00:01:58,610
get to that later on, some subset of

32
00:01:58,610 --> 00:02:02,190
the TLB mappings will be dumped into this data

33
00:02:02,190 --> 00:02:05,320
structure. And let's say that we are switching from

34
00:02:05,320 --> 00:02:08,370
this library operating system to this library operating system.

35
00:02:08,370 --> 00:02:12,670
In that case, what exokernel is going to do is, it's going to pre-load the

36
00:02:12,670 --> 00:02:16,060
TLB with the software TLB data set that

37
00:02:16,060 --> 00:02:20,120
is associated with this library operating system. Essentially,

38
00:02:20,120 --> 00:02:23,040
what we are accomplishing is that when the

39
00:02:23,040 --> 00:02:26,950
library operating system starts running on the CPU

40
00:02:26,950 --> 00:02:30,360
it will find some of its mappings already

41
00:02:30,360 --> 00:02:33,670
present in the hardware TLB. That's the idea

42
00:02:33,670 --> 00:02:37,230
in exokernel of having the STLB data structure

43
00:02:37,230 --> 00:02:40,940
associated with every library operating system to mitigate

44
00:02:40,940 --> 00:02:43,350
the loss of locality that happens when you

45
00:02:43,350 --> 00:02:47,080
do context switch, in terms of address translations.

46
00:02:47,080 --> 00:02:50,190
Of course, when the library operating system starts

47
00:02:50,190 --> 00:02:53,200
running, and it does not find a mapping

48
00:02:53,200 --> 00:02:55,850
for a virtual address in the TLB, at

49
00:02:55,850 --> 00:02:59,310
that point, exokernel is going to kick up that

50
00:02:59,310 --> 00:03:06,050
missing virtual page translation in the TLB as a page fault up into the

51
00:03:06,050 --> 00:03:10,730
library operating system and you'll get result exactly as we detailed earlier.
