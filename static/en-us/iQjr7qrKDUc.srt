1
00:00:00,000 --> 00:00:03,000
So on the subject of statement coverage, we will take a very short quiz.

2
00:00:03,000 --> 00:00:05,000
The quiz is going to have two parts, both of which

3
00:00:05,000 --> 00:00:08,000
stem from a little statistics module that we have here.

4
00:00:08,000 --> 00:00:12,000
The function stats is defined to take a list of inputs and what the function does is

5
00:00:12,000 --> 00:00:18,000
computes the smallest element in the list, the largest element in the list, the median element of the list--

6
00:00:18,000 --> 00:00:23,000
that is to say if we order the list numerically the middle element where the average of the two

7
00:00:23,000 --> 00:00:28,000
middle elements if the list has an even number of elements and finally, it computes the mode of the list

8
00:00:28,000 --> 00:00:32,000
where the mode is the element which occurs the most frequently in the list.

9
00:00:32,000 --> 00:00:35,000
In the case where the list is bimodal--meaning it has two modes or

10
00:00:35,000 --> 00:00:38,000
multimodal--more than two modes--we'll print all of it.

11
00:00:38,000 --> 00:00:42,000
What we do here is test the stats function extremely badly, so I'm going to create a list containing

12
00:00:42,000 --> 00:00:46,000
only the #31 and I'm going to call stats on the list and so let's look at the coverage that we get.

13
00:00:46,000 --> 00:00:51,000
We can see here that even my fairly bad test managed to cover 29 statements in

14
00:00:51,000 --> 00:00:55,000
the stats function but these statements are uncovered and it's shown right here.

15
00:00:55,000 --> 00:00:59,000
Your assignment for the first part of this API quiz is to--early collection

16
00:00:59,000 --> 00:01:03,000
of test cases for it which is 100% statement coverage.

17
00:01:03,000 --> 00:01:06,000
What I mean by that specifically is that your job is to construct a several lists,

18
00:01:06,000 --> 00:01:09,000
calls stats on them, and cover all statements.

19
00:01:09,000 --> 00:01:13,000
What I'd like you to do is think about it a little bit, try to visualize the effect that your inputs

20
00:01:13,000 --> 00:01:16,000
are having on the code, try to come up with the corruption of inputs that gets false

21
00:01:16,000 --> 99:59:59,999
statement coverage on the first try but then, of course, check your answer using the coverage tool.
