1
00:00:00,000 --> 00:00:03,936
Up ahead in this course, you'll be using
a Python language feature that you might

2
00:00:03,936 --> 00:00:05,373
not have seen much of before.

3
00:00:05,373 --> 00:00:08,074
This feature is called
the decorator syntax.

4
00:00:08,074 --> 00:00:11,612
If you're already comfortable with
decorators, feel free to skip ahead.

5
00:00:11,612 --> 00:00:13,875
A decorator is way of
modifying a function or

6
00:00:13,875 --> 00:00:16,819
class definition by wrapping
it with another function.

7
00:00:16,819 --> 00:00:19,817
A decorator can modify how
the decorated code works or

8
00:00:19,817 --> 00:00:22,556
even hook it up to other
pieces of code entirely.

9
00:00:22,556 --> 00:00:25,529
For instance, to register a class
as being part of an API or

10
00:00:25,529 --> 00:00:27,728
to connect a function
up with a framework.

11
00:00:27,728 --> 00:00:30,197
Here's what a decorator call looks like.

12
00:00:30,197 --> 00:00:34,101
You will always appear on the line
before a def or class block.

13
00:00:34,101 --> 00:00:37,150
That is before a function or
a class definition and

14
00:00:37,150 --> 00:00:39,409
it will always start with an at sign.

15
00:00:39,409 --> 00:00:43,210
And some decorators have arguments
of their own while others don't.

16
00:00:43,210 --> 00:00:46,640
The decorator syntax is a shortcut for
calling a function that wraps

17
00:00:46,640 --> 00:00:49,116
the function or
class that's being decorated.

18
00:00:49,116 --> 00:00:53,176
Right after the function somefunc is
defined, Python will call the function

19
00:00:53,176 --> 00:00:56,057
special to wrap that function
up with extra behavior.

20
00:00:56,057 --> 00:00:57,825
Hey, how about you try it out?

21
00:00:57,825 --> 00:01:00,878
Up ahead, you'll see a piece of code
that you can add a decorator to,

22
00:01:00,878 --> 00:01:04,370
then you can tab over and take a look at
the source code of the decorator itself.
