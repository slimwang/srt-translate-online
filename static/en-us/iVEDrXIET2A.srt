1
00:00:00,270 --> 00:00:03,240
The last thing I'm going to
talk about is custom operators.

2
00:00:03,240 --> 00:00:06,939
Custom operators allow us to define
completely new operators that we can use

3
00:00:06,939 --> 00:00:07,470
in our code.

4
00:00:08,480 --> 00:00:10,170
To create a new operator,

5
00:00:10,170 --> 00:00:13,300
you need to specify what kind
of operator it is first.

6
00:00:13,300 --> 00:00:17,610
Is it a prefix operator, an infix
operator, or a postfix operator?

7
00:00:17,610 --> 00:00:20,628
So you specify the type of operator,
operator, and

8
00:00:20,628 --> 00:00:24,170
then the symbol you want to use for
the operator.

9
00:00:24,170 --> 00:00:26,930
So, we'll use the bank
symbol in this case.

10
00:00:26,930 --> 00:00:31,120
So now that we know what the symbol is
for this operator, we need to define

11
00:00:31,120 --> 00:00:34,660
a function that tells the compiler
what kind of operand it accepts, and

12
00:00:34,660 --> 00:00:35,250
what it returns.

13
00:00:36,720 --> 00:00:40,810
The reason I'm using the word
operand instead of parameter is,

14
00:00:40,810 --> 00:00:43,500
that's just conventional when
we're talking about operators.

15
00:00:43,500 --> 00:00:47,560
The arguments that they accept
are referred to as operands.

16
00:00:47,560 --> 00:00:50,720
This one keeps things simple, and
it takes a string operand, and

17
00:00:50,720 --> 00:00:52,360
it returns a string.

18
00:00:52,360 --> 00:00:54,220
Then what the operator actually does,

19
00:00:54,220 --> 00:00:58,450
is add the dis prefix to
whatever the word operand was.

20
00:00:58,450 --> 00:01:00,220
And now we can use this
operator right in our code,

21
00:01:00,220 --> 00:01:04,709
and we can see that we get disassociate,
and disconnect, and disappear.

22
00:01:05,770 --> 00:01:08,030
Now let's look at an infix operator.

23
00:01:08,030 --> 00:01:12,440
For an infix operator we need to define
its associativity and precedence, and so

24
00:01:12,440 --> 00:01:14,440
it's a little bit different
than the prefix operator.

25
00:01:15,550 --> 00:01:21,291
Here we've assigned this to left
associative and it's precedence to 155.

26
00:01:21,291 --> 00:01:24,902
And then the rest of the operator
definition continues like we saw.

27
00:01:24,902 --> 00:01:29,340
For this operator, we're going to take
two operands, which are integers, and

28
00:01:29,340 --> 00:01:30,828
then return another Int.

29
00:01:30,828 --> 00:01:34,108
I'm going to give you a second to see if
you can figure out what this operator is

30
00:01:34,108 --> 00:01:35,370
actually doing.

31
00:01:35,370 --> 00:01:38,479
So go ahead, take a second and
see if you can figure it out.

32
00:01:41,762 --> 00:01:47,470
If you guessed exponentiation, or
the exponent, then you got it right.

33
00:01:47,470 --> 00:01:49,890
So, for this first example we have here,

34
00:01:49,890 --> 00:01:54,910
we're raising 5 to the second power and
this gives us a result of 25.

35
00:01:54,910 --> 00:02:00,194
And then we take and chain it together,
so this is actually computing 25.

36
00:02:00,194 --> 00:02:02,510
I could just write 25.

37
00:02:02,510 --> 00:02:07,228
And then it's raising that to
the second power and giving us 625.

38
00:02:07,228 --> 00:02:10,919
Now I'll skip on down to the bottom for
our postfix example.

39
00:02:10,919 --> 00:02:14,810
This definition's similar to the prefix
example and it takes one operand and

40
00:02:14,810 --> 00:02:16,350
returns a result.

41
00:02:16,350 --> 00:02:19,710
In this case, we're taking an Int and
we're returning a Double.

42
00:02:19,710 --> 00:02:23,374
So you'll notice that it doesn't have
to be the case that the types of

43
00:02:23,374 --> 00:02:25,346
the operands match the return type.

44
00:02:25,346 --> 00:02:27,250
And this operator's pretty slick.

45
00:02:27,250 --> 00:02:30,030
It converts an integer
followed by a percent sign

46
00:02:30,030 --> 00:02:32,500
into its decimal representation.

47
00:02:32,500 --> 00:02:33,290
Now that's pretty cool.
