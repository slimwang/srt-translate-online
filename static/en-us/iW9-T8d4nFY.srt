1
00:00:00,208 --> 00:00:03,880
The secret sauce that makes this dynamic relation between

2
00:00:03,880 --> 00:00:07,500
the client and the server possible is this mechanism

3
00:00:07,500 --> 00:00:11,028
called subcontract. It's sort of like the real life

4
00:00:11,028 --> 00:00:13,422
analogy of off loading work to a third party,

5
00:00:13,422 --> 00:00:15,879
you know, you give sub contract to somebody to

6
00:00:15,879 --> 00:00:18,890
get some work done. That's the same analogy that

7
00:00:18,890 --> 00:00:21,080
is being used here, in the structure of the

8
00:00:21,080 --> 00:00:25,460
Spring network operating system. I mentioned earlier, that the

9
00:00:25,460 --> 00:00:28,200
contract between the client and the server is

10
00:00:28,200 --> 00:00:31,280
established thru the IDL. That is the Interface

11
00:00:31,280 --> 00:00:34,790
Description language, used to create the contract between

12
00:00:34,790 --> 00:00:38,600
the client and the server. And the subcontract is

13
00:00:38,600 --> 00:00:42,330
the interface that is provided for realizing the

14
00:00:42,330 --> 00:00:44,650
IDL contract between the client and the server. So

15
00:00:44,650 --> 00:00:46,710
here is the IDL interface and the client

16
00:00:46,710 --> 00:00:50,860
is using the server's IDL interface to make invocation

17
00:00:50,860 --> 00:00:54,010
calls on the server. An implementation of this

18
00:00:54,010 --> 00:00:57,655
IDL interface is accomplished through the Subcontract mechanism.

19
00:00:57,655 --> 00:01:01,380
Put differently, subcontract is a mechanism to hide

20
00:01:01,380 --> 00:01:04,519
the runtime behavior of an object from the

21
00:01:04,519 --> 00:01:07,770
actual interface. For instance, there could be a

22
00:01:07,770 --> 00:01:10,390
singleton implementation of the server, or it could

23
00:01:10,390 --> 00:01:12,980
be a replicated implementation of the server. The

24
00:01:12,980 --> 00:01:16,130
client does not care, and does not know.

25
00:01:16,130 --> 00:01:23,400
And all of the detail of how this client's IDL interface is satisfied is in the

26
00:01:23,400 --> 00:01:26,430
details of the sub contract itself. So what

27
00:01:26,430 --> 00:01:29,860
that means is, the client side stub generation

28
00:01:29,860 --> 00:01:34,320
becomes very simple because all of the detail

29
00:01:34,320 --> 00:01:37,250
of where the server is. How to access

30
00:01:37,250 --> 00:01:39,130
the server? Whether the server is on the

31
00:01:39,130 --> 00:01:41,790
same machine or on a different machine and

32
00:01:41,790 --> 00:01:44,200
are there multiple copies of the server? Which copy of

33
00:01:44,200 --> 00:01:47,480
the server should I go to? All of those details are

34
00:01:47,480 --> 00:01:51,110
in the subcontract mechanism. That makes the life of client

35
00:01:51,110 --> 00:01:55,530
side stub generation very, very simple. So subcontract lives under the

36
00:01:55,530 --> 00:01:58,780
covers of the IDL contract and you can change the

37
00:01:58,780 --> 00:02:01,700
subcontract at any time. So, for instance, if you don't like

38
00:02:01,700 --> 00:02:04,550
the work being done by one contractor, you give it

39
00:02:04,550 --> 00:02:07,020
to a different subcontract. Same sort of thing that can happen

40
00:02:07,020 --> 00:02:10,330
here is that the subcontract is something

41
00:02:10,330 --> 00:02:13,760
that you can discover and install at runtime.

42
00:02:13,760 --> 00:02:16,430
So, in other words, you can dynamically load

43
00:02:16,430 --> 00:02:20,090
new subcontracts. For instance, if a singleton server

44
00:02:20,090 --> 00:02:23,320
got replicated, then you get a new sub-contract

45
00:02:23,320 --> 00:02:26,450
that corresponds to this replicated server, so that

46
00:02:26,450 --> 00:02:29,160
now you can access the replicated servers using

47
00:02:29,160 --> 00:02:32,330
the subcontract. And nothing needs to change above

48
00:02:32,330 --> 00:02:34,350
this line. The client stub doesn't have to do

49
00:02:34,350 --> 00:02:38,006
anything differently. All of the details are handled by this

50
00:02:38,006 --> 00:02:42,450
subcontract, seamlessly. So in other words, you can seamlessly

51
00:02:42,450 --> 00:02:47,260
add functionality, to existing services, using the sub contract mechanism.
