1
00:00:00,000 --> 00:00:03,000
Okay--so, cool. Let's try this out in practice.

2
00:00:03,000 --> 00:00:06,000
So here we are in our Editor--here's our form HTML.

3
00:00:06,000 --> 00:00:08,000
We're going to have to edit this to make it a little bit more complex.

4
00:00:08,000 --> 00:00:11,000
And I want to put in a few new lines as well

5
00:00:11,000 --> 00:00:13,000
to make it a little bit easier to read.

6
00:00:13,000 --> 00:00:15,000
So I'm done editing the HTML.

7
00:00:15,000 --> 00:00:17,000
I've actually only made a fairly small change

8
00:00:17,000 --> 00:00:19,000
but I put some new lines in here so we can read it.

9
00:00:19,000 --> 00:00:21,000
So now we've got ,

10
00:00:21,000 --> 00:00:23,000
the string, Month--which is what it said before,

11
00:00:23,000 --> 00:00:25,000
and our field--and I've added

12
00:00:25,000 --> 00:00:28,000
this new value parameter for (month),

13
00:00:28,000 --> 00:00:30,000
and I've added another one for (day), and another one for (year).

14
00:00:30,000 --> 00:00:32,000
And we're going to pass these values in

15
00:00:32,000 --> 00:00:34,000
to our function below

16
00:00:34,000 --> 00:00:37,000
so that our form renders extra values.

17
00:00:37,000 --> 00:00:40,000
Okay. So let's edit the function below

18
00:00:40,000 --> 00:00:42,000
and put this whole thing together.

19
00:00:42,000 --> 00:00:44,000
We're going to edit, now, our write_form function.

20
00:00:44,000 --> 00:00:47,000
We're already passing in error--let's add in the other parameters.

21
00:00:47,000 --> 00:00:49,000
So I'm adding the extra parameters, and they're all going to

22
00:00:49,000 --> 00:00:51,000
have defaults to (blank) month, day, and year--

23
00:00:51,000 --> 00:00:53,000
nothing crazy about that.

24
00:00:53,000 --> 00:00:56,000
and let's also edit our Dictionary that we pass into the form

25
00:00:56,000 --> 00:00:58,000
to use these variables.

26
00:00:58,000 --> 00:01:01,000
We've updated the dictionary; now we're passing these variables

27
00:01:01,000 --> 00:01:04,000
into this dictionary, which gets passed into our form string.

28
00:01:04,000 --> 00:01:06,000
And so, now, whenever we write the form,

29
00:01:06,000 --> 00:01:08,000
our form function--our write_form function--

30
00:01:08,000 --> 00:01:10,000
can take extra variables to populate the form.

31
00:01:10,000 --> 00:01:12,000
Let's make sure everything still works the way it did before--

32
00:01:12,000 --> 00:01:14,000
before we go ahead and call this function.

33
00:01:14,000 --> 00:01:18,000
Here we are in our browser; let's type in: some junk,

34
00:01:18,000 --> 00:01:21,000
submit our form, and see if everything works.

35
00:01:21,000 --> 00:01:25,000
Okay. We didn't get an exception; nothing broke--

36
00:01:25,000 --> 00:01:27,000
so we're in good shape.

37
00:01:27,000 --> 00:01:30,000
Let's go ahead and get these fields populated.

38
00:01:30,000 --> 00:01:33,000
Here's our new write_form function, here's our POST function.

39
00:01:33,000 --> 00:01:35,000
Here we've got our three variables that represent

40
00:01:35,000 --> 00:01:38,000
what the user entered--we're getting them from the request here.

41
00:01:38,000 --> 00:01:40,000
Let's edit our POST function

42
00:01:40,000 --> 00:01:42,000
to use these new variables.

43
00:01:42,000 --> 00:01:44,000
Now we're going to have to restructure this a little bit because

44
00:01:44,000 --> 00:01:47,000
right now we're calling valid_month on the request parameters.

45
00:01:47,000 --> 00:01:49,000
And if one of these parameters is invalid,

46
00:01:49,000 --> 00:01:53,000
we're just going to get False back,

47
00:01:53,000 --> 00:01:55,000
and that's not what we want--so we need to change just a little bit.

48
00:01:55,000 --> 00:01:59,000
So let's restructure this.

49
00:01:59,000 --> 00:02:01,000
So I got rid of our calls to valid_month, day and year--

50
00:02:01,000 --> 00:02:03,000
and user_month just equals

51
00:02:03,000 --> 00:02:05,000
what the user actually entered in for month, day, and year.

52
00:02:05,000 --> 00:02:07,000
And then I'm going to use different variables

53
00:02:07,000 --> 00:02:10,000
to test their validity, and I'll add those now.

54
00:02:10,000 --> 00:02:14,000
Okay--so I separated the calling of valid_month, day, and year

55
00:02:14,000 --> 00:02:17,000
from fetching the parameter out of the request.

56
00:02:17,000 --> 00:02:19,000
And this is so we can have both variables

57
00:02:19,000 --> 00:02:23,000
that represent whether the values are valid or not,

58
00:02:23,000 --> 00:02:25,000
and also variables that represent what the user actually entered--

59
00:02:25,000 --> 00:02:27,000
because we may have to reuse those.

60
00:02:27,000 --> 00:02:29,000
Okay--so let's change our validity check now

61
00:02:29,000 --> 00:02:31,000
to use the proper variables.

62
00:02:31,000 --> 00:02:33,000
Okay. I've changed our validity check here

63
00:02:33,000 --> 00:02:35,000
to make sure we're using month, day, and year now--

64
00:02:35,000 --> 00:02:38,000
those variables instead of user_month, day, and year.

65
00:02:38,000 --> 00:02:41,000
And now let's change our call to write_form.

66
00:02:41,000 --> 00:02:44,000
And now I'm passing in these strings

67
00:02:44,000 --> 00:02:46,000
that the user originally entered

68
00:02:46,000 --> 00:02:49,000
into our form so that when we have an error

69
00:02:49,000 --> 00:02:52,000
we'll render the form with whatever the user typed in.

70
00:02:52,000 --> 00:02:54,000
Let's give this a shot in production.

71
00:02:54,000 --> 00:02:59,000
So we've got our form; let's type in: some junk.

72
00:02:59,000 --> 00:03:01,000
When we submit our form now what we should see

73
00:03:01,000 --> 00:03:05,000
is an error message and our form field should still have our values in it.

74
00:03:05,000 --> 00:03:07,000
There we go.

75
00:03:07,000 --> 00:03:09,000
It doesn't even look like our form was rerendered

76
00:03:09,000 --> 00:03:11,000
because all that appeared was our error message.

77
00:03:11,000 --> 00:03:13,000
That's pretty neat, huh?

78
00:03:13,000 --> 00:03:16,000
And let's make sure that submitting the correct answer still works.

79
00:03:16,000 --> 00:03:19,000
Okay--so we're going to enter in real data.

80
00:03:19,000 --> 00:03:22,000
This is going to go through our validators,

81
00:03:22,000 --> 00:03:26,000
and let's submit this form: success!

82
00:03:26,000 --> 00:03:29,000
So it rejected our bad form and it accepted our good form.

83
00:03:29,000 --> 00:03:31,000
That's pretty cool.

84
00:03:31,000 --> 00:03:32,000
So I've entered in a normal dau and a normal year

85
00:03:32,000 --> 00:03:35,000
but in a month, I've entered in a quote

86
00:03:35,000 --> 00:03:37,000
and some more text.

87
00:03:37,000 --> 00:03:39,000
What's going to happen when I click the Submit button?

88
00:03:39,000 --> 00:03:41,000
Are we going to see an error message and our inputs will be on our form

89
00:03:41,000 --> 00:03:43,000
--you know--our normal error behavior?

90
00:03:43,000 --> 00:03:46,000
We'll see an error message, but quote messes up our HTML?

91
00:03:46,000 --> 00:03:48,000
Will we cause on error on the Server side?

92
00:03:48,000 --> 00:03:50,000
Or will the page just render: blank?
