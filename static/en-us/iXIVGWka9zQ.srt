1
00:00:00,300 --> 00:00:02,390
So, to look up algorithm, that a router

2
00:00:02,390 --> 00:00:05,900
uses, depends on the protocol that it's using to

3
00:00:05,900 --> 00:00:08,720
forward packets. And the look up mechanism might be

4
00:00:08,720 --> 00:00:12,130
implemented with a variety of different algorithms or techniques.

5
00:00:12,130 --> 00:00:15,610
For example, MPLS, ethernet, and ATM use an

6
00:00:15,610 --> 00:00:18,680
exact match look up. Exact matches can be implemented

7
00:00:18,680 --> 00:00:21,350
as a direct look up, and associative look up,

8
00:00:21,350 --> 00:00:25,510
hashing, or via a binary tree. IPv4 and IPv6

9
00:00:25,510 --> 00:00:29,320
on the other hand are implemented with what's called longest prefix

10
00:00:29,320 --> 00:00:32,450
match. We've already looked at longest prefix match a little bit

11
00:00:32,450 --> 00:00:35,150
in some lessons and, in this lesson we'll look at it

12
00:00:35,150 --> 00:00:37,790
in a bit more detail as well as how it's implemented.

13
00:00:37,790 --> 00:00:41,250
It might be implemented as a radix trie, a compressed trie.

14
00:00:41,250 --> 00:00:43,340
Which is something that we will look at in this lesson.

15
00:00:43,340 --> 00:00:46,430
And it can also be implemented as a binary search on

16
00:00:46,430 --> 00:00:50,560
the prefix intervals. Ethenet based forwarding is based on exact match

17
00:00:50,560 --> 00:00:53,500
of a layer two address. Which is usually 48

18
00:00:53,500 --> 00:00:56,390
bits long. It's address is global, not just local to

19
00:00:56,390 --> 00:00:58,830
the link. And the range or size of the

20
00:00:58,830 --> 00:01:02,760
address is not negotiable. Now 2 to the 48th is

21
00:01:02,760 --> 00:01:06,260
far bigger than 2 to the 12th, therefore, it's

22
00:01:06,260 --> 00:01:09,250
not possible to hold all the addresses in the table

23
00:01:09,250 --> 00:01:12,870
and use direct look up. The advantages of exact matches

24
00:01:12,870 --> 00:01:16,120
and ethernet switches, is that exact match is simple and

25
00:01:16,120 --> 00:01:19,230
the expected lookup time is small, or O of 1.

26
00:01:19,230 --> 00:01:22,060
But the disadvantages include inefficient

27
00:01:22,060 --> 00:01:24,370
use of memory. This potentially results

28
00:01:24,370 --> 00:01:29,000
in nondeterministic lookup time if the lookup might require multiple memory

29
00:01:29,000 --> 00:01:32,500
accesses. Lets now take a closer look at longest prefix match.
