1
00:00:00,000 --> 00:00:03,730
In my opinion, I would say that the assumption that simple operation

2
00:00:03,730 --> 00:00:06,760
take only one-time step is rather unrealistic

3
00:00:06,760 --> 00:00:12,680
because in real computer you have lots of differences between simple operations

4
00:00:12,680 --> 00:00:17,660
and also loops such as ifs and whys it can take very different amounts of time

5
00:00:17,660 --> 00:00:19,810
depending on where and when they are executed.

6
00:00:19,810 --> 00:00:24,860
The second one we have as much memory as we need that might be debatable for some cases

7
00:00:24,860 --> 00:00:28,590
given that memory is actually not that expensive anymore,

8
00:00:28,590 --> 00:00:32,630
but there's still lots of problems where you can run out of memory and so that is still a real issue.

9
00:00:32,630 --> 00:00:35,170
I would also say this is rather unrealistic.

10
00:00:35,170 --> 00:00:39,810
Memory access being free in terms of times that is very unrealistic

11
00:00:39,810 --> 00:00:42,790
because in the real computer, you really have to watch out

12
00:00:42,790 --> 00:00:44,250
what kind of memory you're using.

13
00:00:44,250 --> 00:00:47,540
For example, if you're using register and a processor

14
00:00:47,540 --> 00:00:50,900
that is memory that almost come for free that's very fast,

15
00:00:50,900 --> 00:00:53,410
but when you have to read and write to your hard disk that is going to take very long.

16
00:00:53,410 --> 00:00:56,330
Memory access being free is really unrealistic.

17
00:00:56,330 --> 00:01:03,110
Finally, a unit of memory not being able to hold an arbitrarily large number that is very realistic

18
00:01:03,110 --> 00:01:06,860
because your computer depending on how many bits each unit of memory can hold.

19
00:01:06,860 --> 00:01:13,720
If its 32 or 64 and there is always the limit of how much you can store in a single unit of memory

20
00:01:13,720 --> 00:01:15,040
and then you have to go to the next one.

21
00:01:15,040 --> 00:01:19,790
Given that there's lots of unrealistic aspects for the RAM,

22
00:01:19,790 --> 00:01:21,760
why are we using it in this course?

23
00:01:21,760 --> 00:01:28,850
Well, there's basically two reasons. The first reason is that its a very simple model to use.

24
00:01:28,850 --> 00:01:31,840
So, if we have to consider all of those aspect as well,

25
00:01:31,840 --> 00:01:35,409
our analysis would get even more complicated than in the simple example.

26
00:01:35,409 --> 00:01:41,100
And the second thing is that when we are running or analyzing algorithms on the RAM,

27
00:01:41,100 --> 00:01:45,440
the general behavior of the algorithm, how it behaves on various inputs,

28
00:01:45,440 --> 00:01:49,070
and how the running time changes with various types of inputs

29
00:01:49,070 --> 00:01:54,920
still is rather realistic even though we're not really taking into account these aspects.

30
00:01:54,920 --> 00:01:57,950
When you have to implement an algorithm,

31
00:01:57,950 --> 00:01:59,880
which is something that we're not doing in this course

32
00:01:59,880 --> 00:02:03,230
then of course, you have to take care of these things

33
00:02:03,230 --> 00:02:08,340
and see for example if the types of operation you're using is making your algorithm

34
00:02:08,340 --> 99:59:59,999
run faster or slower or if you need to take care of memory.
