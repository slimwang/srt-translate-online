1
00:00:00,370 --> 00:00:03,440
So what I just showed you is
the basic Lukas-Kanade method.

2
00:00:03,440 --> 00:00:04,210
kind of elegant.

3
00:00:05,620 --> 00:00:07,570
Basically, we've made
a lot of assumptions, and

4
00:00:07,570 --> 00:00:09,610
these assumptions can give us errors.

5
00:00:09,610 --> 00:00:13,110
The biggest error we have, that is
the assumption that we made that's,

6
00:00:13,110 --> 00:00:17,680
in some sense, the most wrong,
is the idea that the motion is small.

7
00:00:17,680 --> 00:00:18,530
Okay?

8
00:00:18,530 --> 00:00:20,156
Often, motion is large.

9
00:00:20,156 --> 00:00:21,633
And when motion is large,

10
00:00:21,633 --> 00:00:24,798
a couple of things are wrong
with the Taylor expansion.

11
00:00:24,798 --> 00:00:30,498
One is even if things are nice and
smooth, they may not be linear.

12
00:00:30,498 --> 00:00:33,516
So we were doing a first order,
Taylor expansion, not a second order.

13
00:00:33,516 --> 00:00:34,660
No second derivatives here.

14
00:00:34,660 --> 00:00:37,180
So that assumes that things are planar.

15
00:00:37,180 --> 00:00:38,825
Well, suppose things
are curved a little bit.

16
00:00:38,825 --> 00:00:41,333
Well, we, we're going to handle that.

17
00:00:41,333 --> 00:00:42,238
In fact, we're going to talk
about that in a minute.

18
00:00:42,238 --> 00:00:44,610
By doing something called
iterative refinement.

19
00:00:44,610 --> 00:00:47,030
Which is, we're going to
assume it's a plane, solve it.

20
00:00:47,030 --> 00:00:48,590
Move the picture over a little bit.

21
00:00:48,590 --> 00:00:50,020
Do it again, do it again, do it again,

22
00:00:50,020 --> 00:00:53,080
until we've converged finally to the,
to the right point.

23
00:00:53,080 --> 00:00:56,470
And its, allows us to handle
the non-planar component.

24
00:00:56,470 --> 00:00:58,560
But in some sense, even much more worse.

25
00:00:58,560 --> 00:00:59,570
Much more worse?

26
00:00:59,570 --> 00:01:05,610
Even worse than that, is maybe,
I've got a nice bright pixel here and

27
00:01:05,610 --> 00:01:10,580
then the bright pixel jumps
over a bunch of dark pixels.

28
00:01:10,580 --> 00:01:14,840
So it's not even, and then there's some
other, so it's not even local anymore.

29
00:01:14,840 --> 00:01:19,000
That is, I can't find my, my ni,

30
00:01:19,000 --> 00:01:22,290
the, where I went by just sort
of following my derivatives.

31
00:01:22,290 --> 00:01:25,760
And the way we're going to handle
that is with a course define method

32
00:01:25,760 --> 00:01:27,650
which actually we're
going to do next lesson.

33
00:01:27,650 --> 00:01:28,811
Today, the on, the, this lesson,

34
00:01:28,811 --> 00:01:32,100
the only remaining thing we're going to
talk about is this iterative refinement.

35
00:01:32,100 --> 00:01:34,750
So, iterative refinement is
designed to handle the fact

36
00:01:34,750 --> 00:01:36,690
that things are not exactly tangent.

37
00:01:36,690 --> 00:01:37,560
And so, here's how it works.

38
00:01:37,560 --> 00:01:38,340
I'll write down the algorithm.

39
00:01:38,340 --> 00:01:40,720
And then it's a lot easier
to see in a picture.

40
00:01:40,720 --> 00:01:41,630
All right?

41
00:01:41,630 --> 00:01:44,390
So, the first thing is,
the way you do it is,

42
00:01:44,390 --> 00:01:46,040
you say okay, I'm going to pretend.

43
00:01:47,590 --> 00:01:50,440
I'm good at pretending,
that it's just going to work.

44
00:01:50,440 --> 00:01:51,100
All right?

45
00:01:51,100 --> 00:01:54,240
So, I solve for my velocities
using the standard Lukas-Kanade.

46
00:01:54,240 --> 00:01:57,100
So I find,
I assume linear Taylor approximation.

47
00:01:57,100 --> 00:01:58,520
I solve for u, v.

48
00:01:58,520 --> 00:02:01,090
Great.
So, now I've got a u, v at every pixel.

49
00:02:01,090 --> 00:02:06,390
Now, it says I'm going to
warp It to It plus 1.

50
00:02:06,390 --> 00:02:07,470
Okay.

51
00:02:07,470 --> 00:02:11,530
We talked about doing image warping
when we were applying transformations.

52
00:02:11,530 --> 00:02:13,570
And those of you who
are going to do the problem set,

53
00:02:13,570 --> 00:02:16,030
you'll probably get to know and
love how to do warping.

54
00:02:16,030 --> 00:02:17,566
But basically, the u,

55
00:02:17,566 --> 00:02:21,790
v says how to move every pixel from
one image to get to the next one.

56
00:02:21,790 --> 00:02:22,400
So you know what?

57
00:02:22,400 --> 00:02:25,270
I take this picture and
I move all the pixels.

58
00:02:25,270 --> 00:02:27,120
And if you remember,
we have to do this backward warp so

59
00:02:27,120 --> 00:02:28,200
we don't end up with holes.

60
00:02:28,200 --> 00:02:29,130
If you don't remember that,

61
00:02:29,130 --> 00:02:31,560
go back to the transformation lecture
where we talked about warping.

62
00:02:32,650 --> 00:02:35,695
But the idea is that we
essentially distort the,

63
00:02:35,695 --> 00:02:39,400
the t image to move to where
I think all the pixels go.

64
00:02:39,400 --> 00:02:42,420
So it's almost the t plus one image.

65
00:02:42,420 --> 00:02:44,890
But it's not exactly the t
plus one image, is it?

66
00:02:46,730 --> 00:02:48,260
It's close.

67
00:02:48,260 --> 00:02:48,910
So what do I do?

68
00:02:50,350 --> 00:02:53,176
I just do it again.
I take the image that I created and

69
00:02:53,176 --> 00:02:56,494
I compare that to the real
t plus one image.

70
00:02:56,494 --> 00:02:58,526
And I get a small amount of more motion.

71
00:02:58,526 --> 00:03:02,750
I could actually add that
motion to the original motion.

72
00:03:02,750 --> 00:03:04,950
That's the new flow field.

73
00:03:04,950 --> 00:03:06,234
Well, I can take that one I created.

74
00:03:06,234 --> 00:03:07,203
Move it a little bit.

75
00:03:07,203 --> 00:03:08,225
And what do I do?

76
00:03:08,225 --> 00:03:08,956
Do it again.

77
00:03:08,956 --> 00:03:12,758
Until the pixels stop moving,
and that will it,

78
00:03:12,758 --> 00:03:16,240
that will converge to a solution.

79
00:03:16,240 --> 00:03:18,980
So that's really easier
seeing here graphically.
