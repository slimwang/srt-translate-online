1
00:00:00,910 --> 00:00:06,640
What we will be talking about is just
different techniques and ways to

2
00:00:06,640 --> 00:00:13,880
optimize the 60 frames per second
section of the web optimization project.

3
00:00:13,880 --> 00:00:16,760
So what is this 60 frames per second?

4
00:00:16,760 --> 00:00:19,900
Just want to remind everyone
who are on project four, or

5
00:00:19,900 --> 00:00:22,243
who will be on going on project four,

6
00:00:22,243 --> 00:00:27,110
is that you need to achieve 65 per
second when you are scrolling.

7
00:00:27,110 --> 00:00:33,270
So basically when you're browsing, when
you're scrolling through the website

8
00:00:33,270 --> 00:00:37,280
on the pizzas page, all those little
pizzas that are animating and

9
00:00:37,280 --> 00:00:40,550
the background should be
rendered at 60 frames per second.

10
00:00:40,550 --> 00:00:44,085
So let's first look at
the Google Dev tools and

11
00:00:44,085 --> 00:00:46,960
see what does that really mean.

12
00:00:46,960 --> 00:00:49,460
This is Google Dev Tools here.

13
00:00:49,460 --> 00:00:52,023
This is what recording
the timeline look like.

14
00:00:52,023 --> 00:00:56,459
And if you can see here,
what I basically did I launched

15
00:00:56,459 --> 00:01:00,520
the Dev Tools and
I picked on the Timeline option.

16
00:01:02,430 --> 00:01:07,740
I then look in and record my timeline
I press this black button here and

17
00:01:07,740 --> 00:01:09,690
then I scroll up and down here.

18
00:01:11,220 --> 00:01:13,930
And Google Dev Tools will give
me a nice timeline of that.

19
00:01:13,930 --> 00:01:15,540
It will tell, okay,

20
00:01:15,540 --> 00:01:21,660
how much time it takes to calculate
my events using my scripting.

21
00:01:21,660 --> 00:01:25,320
How much time it takes to
lay out my elements, or

22
00:01:25,320 --> 00:01:27,700
how much time does it take
to paint my elements.

23
00:01:27,700 --> 00:01:31,270
As you can see here,
these individual bars,

24
00:01:31,270 --> 00:01:35,340
they all should be lower than
the story parts per second line.

25
00:01:36,490 --> 00:01:38,700
We do not even see the 60
frames per second.

26
00:01:38,700 --> 00:01:45,630
Because the calculations were so high
that it's beyond 60 frames per second.

27
00:01:45,630 --> 00:01:47,770
It's actually lower than
30 frames per second.

28
00:01:47,770 --> 00:01:51,150
So basically what we want to do is be,
we want to squish and

29
00:01:51,150 --> 00:01:53,530
lower the height of these bars.

30
00:01:53,530 --> 00:01:56,650
So low that the 60 frames per
second line will show up and

31
00:01:56,650 --> 00:02:00,892
we could then be able to see okay, what
are we achieve 60 frames per second.

32
00:02:02,763 --> 00:02:06,849
So we're going to walk through
different stages of an optimization,

33
00:02:06,849 --> 00:02:09,619
and we're going to show
you how it will look like

34
00:02:09,619 --> 00:02:12,419
once you optimize certain
things of your code.

35
00:02:12,419 --> 00:02:19,610
So the first thing that I want to
show you realize here is the code.

36
00:02:19,610 --> 00:02:24,865
Whenever we scroll, we're going to
launch this function here at line 577.

37
00:02:24,865 --> 00:02:27,885
So window.addEventListener scroll.

38
00:02:27,885 --> 00:02:32,505
So it's going to listen to
the event whenever a user scrolls,

39
00:02:32,505 --> 00:02:34,755
it's going to launch this function here,
optimization.

40
00:02:34,755 --> 00:02:38,165
And this is the actual function
that we need to optimize.

41
00:02:38,165 --> 00:02:40,545
There we go.
And then, we're going to scroll up and

42
00:02:40,545 --> 00:02:43,695
try to look at
the definition of positions.

43
00:02:43,695 --> 00:02:45,425
So it's right here.

44
00:02:45,425 --> 00:02:51,890
So basically we know that we need
to somehow optimize this function.

45
00:02:51,890 --> 00:02:56,030
Because guess what, from our timeline as
you can see, if I were to click on one

46
00:02:56,030 --> 00:03:02,650
bar or one frame, it takes a lot of
time to actually calculate all of

47
00:03:02,650 --> 00:03:05,880
our calculations to be able to calculate
all the pizzas that's scrolling.

48
00:03:05,880 --> 00:03:10,800
So basically this is how you
should read this scroll event,

49
00:03:10,800 --> 00:03:12,340
is that you had this event scroll.

50
00:03:13,530 --> 00:03:15,390
This takes up a lot of time.

51
00:03:15,390 --> 00:03:17,295
And then the next event will be,

52
00:03:17,295 --> 00:03:21,980
recalculate style, it goes into layout,
it goes into paint.

53
00:03:21,980 --> 00:03:24,780
It's painting the actual
pixels on screen.

54
00:03:24,780 --> 00:03:29,225
And then it does some other previous
calculations that are not so

55
00:03:29,225 --> 00:03:30,955
trivial but basically,

56
00:03:30,955 --> 00:03:36,162
the main bottleneck looks like this
yellow thing which is onEventScroll.

57
00:03:36,162 --> 00:03:39,365
If you click and expand this,
you see this function call here.

58
00:03:39,365 --> 00:03:42,565
And this function call
is update positions.

59
00:03:42,565 --> 00:03:43,635
So that's optimization.

60
00:03:43,635 --> 00:03:45,980
So I already know that
I have a bottleneck.

61
00:03:47,070 --> 00:03:51,976
We go in, step through this function, I
commented this function fairly well and

62
00:03:51,976 --> 00:03:54,610
I just comment it with my questions and
my observations.

63
00:03:54,610 --> 00:03:57,920
So basically your first step
is to look at each line and

64
00:03:57,920 --> 00:04:00,420
really understand what
each line is trying to do.

65
00:04:00,420 --> 00:04:03,875
In this case,
I am getting all the pizzas from here

66
00:04:03,875 --> 00:04:09,290
because all the pizzas that
are animating has a class name mover.

67
00:04:09,290 --> 00:04:11,350
I'm going through a for loop and
then I'm changing some,

68
00:04:11,350 --> 00:04:16,495
I'm doing a lot of
calculations here on line 31.

69
00:04:16,495 --> 00:04:22,810
And then,
I then do this calculation here on

70
00:04:22,810 --> 00:04:28,250
line 541 to actually change
the left position on each pizza.

71
00:04:29,330 --> 00:04:31,145
Now the first thing
that I want to ask is,

72
00:04:31,145 --> 00:04:34,790
is okay, focusing on really,
on this part right here.

73
00:04:34,790 --> 00:04:38,718
Is that okay, in order for
me to understand whether this loop is

74
00:04:38,718 --> 00:04:41,960
efficient or not,
let's log out all these numbers and see.

75
00:04:41,960 --> 00:04:43,550
Let's log out.

76
00:04:43,550 --> 00:04:46,770
Basically what I would do,
I would like basically do a console log.

77
00:04:46,770 --> 00:04:50,324
I'll log off the base number and it will
log out the document.body.scroll and and

78
00:04:50,324 --> 00:04:53,342
basically, any other type of variable
that is the being calculated.

79
00:04:53,342 --> 00:04:58,985
And I want to see which
variables are really crucial for

80
00:04:58,985 --> 00:05:05,130
me to be inside my for
loop which can be outside the for loop.

81
00:05:05,130 --> 00:05:07,830
Because basically I'm thinking
inside a for loop and

82
00:05:07,830 --> 00:05:09,820
this is the majority
of instructions here.

83
00:05:11,110 --> 00:05:16,190
I'm doing a lot of calculations
per loop, and I'm trying to think.

84
00:05:16,190 --> 00:05:16,930
Is there any way for

85
00:05:16,930 --> 00:05:23,530
me to reduce the amount of time to
calculate these complex calculation?

86
00:05:23,530 --> 00:05:27,466
And notice that another optimization
that I'm looking at is,

87
00:05:27,466 --> 00:05:29,330
when the DOM has been loaded.

88
00:05:30,430 --> 00:05:33,137
This basically says if
the page has been loaded,

89
00:05:33,137 --> 00:05:36,450
I'm going to create 200 pizzas
that will be animating.

90
00:05:38,490 --> 00:05:40,380
And assigned them the class mover,
right.

91
00:05:40,380 --> 00:05:43,410
So, because basically all the animated
pizzas are assigned the class mover.

92
00:05:43,410 --> 00:05:50,050
That's when we know those
are the pizzas that should be animated.

93
00:05:50,050 --> 00:05:57,207
And I want to ask myself, here's 200
pizzas that should be animated but

94
00:05:57,207 --> 00:06:02,997
then if I go back to my pizzas page,
I'm only seeing a handful

95
00:06:02,997 --> 00:06:08,124
of the pizzas that are animating
at any point in time.

96
00:06:08,124 --> 00:06:12,956
So my second question, do I
necessary need to animate 200 pizzas

97
00:06:12,956 --> 00:06:17,260
if only a handful of them
are showing up on my screen?

98
00:06:17,260 --> 00:06:19,330
So food for thought for everyone.

99
00:06:19,330 --> 00:06:22,970
I'm giving everyone hints, I'm actually
not going to give anyone the answers but

100
00:06:24,080 --> 00:06:28,220
hopefully this will give you guys and
gals good enough hints for

101
00:06:28,220 --> 00:06:33,460
you to start thinking about
certain aspects to your

102
00:06:34,740 --> 00:06:38,740
function and to try to basically
pick apart every line of the code.

103
00:06:38,740 --> 00:06:44,010
And try to ask yourself,
can I make each line efficient

104
00:06:44,010 --> 00:06:48,280
as much as possible.

105
00:06:48,280 --> 00:06:52,960
Basically if I were to make those
optimizations that I talked about,

106
00:06:52,960 --> 00:06:54,820
I'm going to get a timeline like this.

107
00:06:55,980 --> 00:06:57,820
As you can see,
this timeline is drastically different.

108
00:06:57,820 --> 00:07:03,140
So now we can see the 60 FPS timeline,
and this is the goal.

109
00:07:03,140 --> 00:07:06,900
Our goal is to be able to
basically get all the color bars

110
00:07:08,300 --> 00:07:11,550
underneath this 60
frames per second line.

111
00:07:13,390 --> 00:07:17,180
And if I were to actually go and

112
00:07:17,180 --> 00:07:22,760
click on a bar here,
select a bar, basically.

113
00:07:22,760 --> 00:07:24,280
Reduce my timeline.

114
00:07:24,280 --> 00:07:26,420
I can see on my bed scroll,
my yellow here.

115
00:07:26,420 --> 00:07:30,930
Which used to take up the whole time.

116
00:07:30,930 --> 00:07:32,760
The whole 16.667 milliseconds.

117
00:07:32,760 --> 00:07:36,260
It has been drastically
reduced to around

118
00:07:36,260 --> 00:07:37,960
point 6.2 milliseconds for scripting.

119
00:07:37,960 --> 00:07:41,960
If you look at the numbers to
my lower right hand corner.

120
00:07:44,280 --> 00:07:48,995
It went from 25 milliseconds
to 0.642 milliseconds, so

121
00:07:48,995 --> 00:07:51,711
that's pretty good optimization.

122
00:07:51,711 --> 00:07:56,327
And actually for,
just to meet the minimal qualifications,

123
00:07:56,327 --> 00:07:57,934
this is good enough.

124
00:08:00,345 --> 00:08:03,936
We still have a couple of other things
that we could increase optimizations on,

125
00:08:03,936 --> 00:08:06,860
especially the paint here,
because the green bar's here.

126
00:08:06,860 --> 00:08:11,309
And a little bit of the purple bar here
because this is actually the layout.

127
00:08:11,309 --> 00:08:17,797
Remember our stages in rendering
from the web optimization file.

128
00:08:17,797 --> 00:08:22,448
We have the HTML, the DOM,
we then download the seesaw we look at

129
00:08:22,448 --> 00:08:26,000
the JavaScript and
we go into the render tree.

130
00:08:26,000 --> 00:08:27,770
Then after that we'd go into layout.

131
00:08:27,770 --> 00:08:31,760
That should lay out the elements,
and then we actually paint.

132
00:08:31,760 --> 00:08:34,880
So this actually shows you
the relationship of okay,

133
00:08:34,880 --> 00:08:37,440
I have event JavaScript.

134
00:08:37,440 --> 00:08:38,490
I'm going to do layout.

135
00:08:38,490 --> 00:08:41,270
Since I've rendered my
rendered shit already.

136
00:08:42,760 --> 00:08:49,800
I go and paint and
then I basically rinse and repeat.

137
00:08:49,800 --> 00:08:51,181
If you think about it,

138
00:08:51,181 --> 00:08:55,100
this yellow line could actually
be reduced a little bit more.

139
00:08:55,100 --> 00:08:58,634
We can actually have a little bit
more opposition from our JavaScript.

140
00:08:58,634 --> 00:09:01,152
And we can actually get rid
of one of these stages called

141
00:09:01,152 --> 00:09:02,470
mainly the layout stage.

142
00:09:02,470 --> 00:09:08,830
So let's go back into the code and
figure out what else can we do.

143
00:09:08,830 --> 00:09:12,450
So the first thing that we see that any
other things that we can squeeze out,

144
00:09:12,450 --> 00:09:16,090
any other performances
using query selector, all.

145
00:09:16,090 --> 00:09:22,480
Because basically there's a more
efficient way to access your DOM,

146
00:09:24,560 --> 00:09:29,445
and that's using
document.getElementsByClass.

147
00:09:32,320 --> 00:09:37,810
This is actually a more efficient way to
get all the piece of elements and mover.

148
00:09:37,810 --> 00:09:42,970
So this is actually good way
to make things more efficient.

149
00:09:42,970 --> 00:09:45,610
Another one is this line here.

150
00:09:46,720 --> 00:09:48,150
This modular operator here.

151
00:09:48,150 --> 00:09:49,370
If you notice.

152
00:09:49,370 --> 00:09:52,940
Let's let's go back to understand
what the modular operator is.

153
00:09:54,230 --> 00:09:56,780
The modular operator,
I'm looking at my notes,

154
00:09:56,780 --> 00:09:59,890
gives us the remainder
when we divide 1 by 5.

155
00:09:59,890 --> 00:10:01,110
So it's a remainder.

156
00:10:01,110 --> 00:10:02,686
It's not a division it's a remainder.

157
00:10:02,686 --> 00:10:10,480
So basically if i is 1,
1 remainder of 5 is one.

158
00:10:10,480 --> 00:10:11,820
2 remainder of 5 is 2.

159
00:10:11,820 --> 00:10:15,240
3 remainder of 5 is 3, and so forth.

160
00:10:15,240 --> 00:10:17,500
And these numbers repeat itself, so

161
00:10:17,500 --> 00:10:20,830
basically we will have in
a nutshell if you do all the math.

162
00:10:21,900 --> 00:10:25,820
This will be just five numbers.

163
00:10:27,570 --> 00:10:32,066
No matter how many pizzas you have,
whether it be 200 pizzas or

164
00:10:32,066 --> 00:10:33,469
a thousand pizzas.

165
00:10:33,469 --> 00:10:36,907
Every time you iterate you will only
have five unique numbers because

166
00:10:36,907 --> 00:10:39,940
the module operator basically
gives us just the remainder.

167
00:10:41,110 --> 00:10:45,650
And we fix the base number of five.

168
00:10:45,650 --> 00:10:50,250
So If you think about it,
why can't we just store five numbers and

169
00:10:50,250 --> 00:10:54,550
then use those numbers to change
the position of our element?

170
00:10:56,150 --> 00:11:01,326
One last thing here is
a lot of people have wrote

171
00:11:01,326 --> 00:11:09,230
on the forum is to use some sort of
CSS3 hardware acceleration here.

172
00:11:09,230 --> 00:11:17,220
Because basically CSS3 has
hardware acceleration and

173
00:11:17,220 --> 00:11:22,660
certain transformations that reduce

174
00:11:22,660 --> 00:11:27,936
the need to retrigger a read layout.

175
00:11:27,936 --> 00:11:31,160
Basically what I'm talking about is
a lot of people used to translateX.

176
00:11:32,970 --> 00:11:38,254
And if you look it up, there's some
articles that talk about this,

177
00:11:38,254 --> 00:11:41,510
here's the hack to increase your speed.

178
00:11:41,510 --> 00:11:46,041
So again, you could do this
instead of using style.left,

179
00:11:46,041 --> 00:11:51,850
you use transfprm translateX to
actually position your element.

180
00:11:51,850 --> 00:11:56,200
Now, what this does is this gets rid
of the need to trigger a read layout.

181
00:11:57,210 --> 00:11:58,110
And if you think about it,

182
00:11:59,390 --> 00:12:01,510
it just basically gets rid of
one event in the purple bar.

183
00:12:01,510 --> 00:12:03,760
And a lot of people says you need
to do this, you must do that.

184
00:12:03,760 --> 00:12:07,490
If you think about, let's go back and
look at the numbers.

185
00:12:07,490 --> 00:12:10,740
Once we do that, this doesn't really
make that much of a difference.

186
00:12:10,740 --> 00:12:12,320
It does but in this case,

187
00:12:13,450 --> 00:12:18,620
you can get away with perfectly
using this level of code.

188
00:12:18,620 --> 00:12:21,150
For every scroll I'm
repainting the whole screen.

189
00:12:21,150 --> 00:12:25,520
Now the question is, is there a way for
me to only paint the moving pizzas and

190
00:12:25,520 --> 00:12:26,560
not the rest of the screen.

191
00:12:26,560 --> 00:12:30,390
Because everything else doesn't need
to get repainted because the pixels

192
00:12:30,390 --> 00:12:33,010
are still good.

193
00:12:33,010 --> 00:12:37,875
So is there a way for
me to reduce this green bar too.

194
00:12:37,875 --> 00:12:42,720
So I can reduce these total
bars to basically near zero.

195
00:12:42,720 --> 00:12:47,890
How we're going to do that,
this is a hacky way, so

196
00:12:47,890 --> 00:12:52,960
I want to preface that, that there
are tradeoffs to doing the tech way.

197
00:12:52,960 --> 00:12:55,590
So just be aware as
a developer of the tradeoffs.

198
00:12:55,590 --> 00:12:59,010
So there's a hacky way
to reduce the paint now.

199
00:12:59,010 --> 00:13:03,576
because basically what we do,
is that we tell the browser to

200
00:13:03,576 --> 00:13:08,145
actually render our pizzas,
our individual pizzas,

201
00:13:08,145 --> 00:13:12,400
and put them into individual
composite layers.

202
00:13:12,400 --> 00:13:16,400
because basically, even if there
is one pixel that's changed,

203
00:13:16,400 --> 00:13:18,960
the whole layer gets repainted.

204
00:13:18,960 --> 00:13:20,120
So what we do is,

205
00:13:20,120 --> 00:13:24,960
we put all of our individual pizzas
into their individual layers.

206
00:13:24,960 --> 00:13:25,910
Now how can we do that?

207
00:13:25,910 --> 00:13:27,040
We actually do some CSS hacks.

208
00:13:27,040 --> 00:13:31,060
The hack that I'm going to use is
called backface-visibility: hidden.

209
00:13:31,060 --> 00:13:35,620
I'm actually going to use
this hack to actually force

210
00:13:35,620 --> 00:13:40,870
the browser to render each
pizza element in its own layer.

211
00:13:40,870 --> 00:13:43,736
So basically,
if I were to animate it now, and

212
00:13:43,736 --> 00:13:48,340
these pizzas are in their own layer,
it means that I only need to paint

213
00:13:48,340 --> 00:13:52,090
a small section of the screen,
and not the whole screen.

214
00:13:52,090 --> 00:13:54,900
So how you would do that is,
you basically

215
00:13:54,900 --> 00:13:59,330
put this backface-visibility: hidden
in the [INAUDIBLE] class in your CSS.

216
00:13:59,330 --> 00:14:01,760
So let's go back to the timeline.

217
00:14:01,760 --> 00:14:04,773
So basically this is what
our current performance is.

218
00:14:04,773 --> 00:14:10,370
If I choose backface-visibility: hidden,
this is the timeline.

219
00:14:10,370 --> 00:14:16,870
And we can see here all of the green
basically no painting involved at all.

220
00:14:16,870 --> 00:14:20,320
So I have a lot of extra bandwidth and

221
00:14:20,320 --> 00:14:22,230
memory now be able to
do additional things.

222
00:14:22,230 --> 00:14:25,950
I would say this is a very smooth frame
rate because you're barely hitting

223
00:14:25,950 --> 00:14:29,580
no more than a half of
your available bandwidth

224
00:14:29,580 --> 00:14:31,780
to be able to render each frame.

225
00:14:32,935 --> 00:14:33,605
There's one caveat.

226
00:14:33,605 --> 00:14:35,865
So here's the caveat,
here's the tradeoff.

227
00:14:35,865 --> 00:14:39,782
So painting here, if you look at this,
painting here is reduced from two

228
00:14:39,782 --> 00:14:42,455
milliseconds to about
a half a millisecond.

229
00:14:42,455 --> 00:14:48,288
But the time to fix the script and
to render it should increase but

230
00:14:48,288 --> 00:14:54,136
just from 0.5 scripting here
to 2 milliseconds scripting.

231
00:14:54,136 --> 00:14:56,381
And then we went basically four or

232
00:14:56,381 --> 00:15:01,280
five milliseconds rendering to
almost three milliseconds rendering.

233
00:15:01,280 --> 00:15:05,774
And that's the trail that you have to
take because this is my hypothesis,

234
00:15:05,774 --> 00:15:09,180
I haven't confirmed this,
the more layers you put on,

235
00:15:09,180 --> 00:15:14,400
that there's probably more overhead that
you need to do, and you need to track.

236
00:15:14,400 --> 00:15:16,910
But if you look at the overall
net performance that's

237
00:15:16,910 --> 00:15:18,450
probably a good tradeoff.

238
00:15:18,450 --> 00:15:20,315
For mobile devices here,

239
00:15:20,315 --> 00:15:25,499
this hack can really do a number on
mobile devices with low video memory.

240
00:15:25,499 --> 00:15:29,359
Because basically,
this hack is forcing the GPU or

241
00:15:29,359 --> 00:15:34,854
the video card to actually render those
pizzas for us instead of the CPU.

242
00:15:34,854 --> 00:15:37,905
If a mobile device has
low video memory or

243
00:15:37,905 --> 00:15:43,220
it's not a very fast device,
performance may actually be poorer.

244
00:15:43,220 --> 00:15:47,810
The best way to really find out
what trials to use is to use these

245
00:15:47,810 --> 00:15:49,970
development tools that were given us.

246
00:15:49,970 --> 00:15:52,310
And also to test the performance
on other devices.
