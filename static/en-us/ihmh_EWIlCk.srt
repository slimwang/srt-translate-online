1
00:00:00,000 --> 00:00:06,000
Sprinting to the finish line. We're almost there. Just a little bit left to go.

2
00:00:06,000 --> 00:00:09,000
Only one more slightly difficult part.

3
00:00:09,000 --> 00:00:12,000
Here is find<u>cross</u>word, and because I can see the finish line,

4
00:00:12,000 --> 00:00:16,000
I'm not going to explain it line-by-line, but you go ahead and read it.

5
00:00:16,000 --> 00:00:22,000
Two other small bits--we need this list of neighbors in the north, south, east, west order,

6
00:00:22,000 --> 00:00:24,000
and we've got to be able to transpose a matrix.

7
00:00:24,000 --> 00:00:28,000
It turns out that one way to transpose a matrix is an old trick.

8
00:00:28,000 --> 00:00:34,000
You map list to the zip of the application of all the rows in the matrix.

9
00:00:34,000 --> 00:00:36,000
If that makes your head hurt, don't worry about it.

10
00:00:36,000 --> 00:00:40,000
You can play with it a little bit to see why it works or you could use this expression here--

11
00:00:40,000 --> 00:00:44,000
[ M [ j ][ i ] ] for j in the range and for i in the range.

12
00:00:44,000 --> 00:00:48,000
Now I'm excited to see it work. I ran it. It did, in fact, work.

13
00:00:48,000 --> 00:00:52,000
Solidified the results by putting them into a test--examples of finding cross words,

14
00:00:52,000 --> 00:00:56,000
finding neighbors, transpose--that looks like it works.

15
00:00:56,000 --> 00:00:59,000
Transpose of a transpose--you get back what you started with.

16
00:00:59,000 --> 00:01:05,000
If we set anchors on our sample board--we get back the sample row that we did by hand.

17
00:01:05,000 --> 00:01:09,000
If we call horizontal plays, we get back this list now.

18
00:01:09,000 --> 00:01:14,000
I feel a little bit bad here that I wrote this as a test, and yet I can't really verify

19
00:01:14,000 --> 00:01:16,000
that this is exactly the right answer.

20
00:01:16,000 --> 00:01:21,000
I haven't gone through every word in the dictionary to figure out if I got this exactly right.

21
00:01:21,000 --> 00:01:25,000
This serves not so much as a unit test--a unit test is something that verifies

22
00:01:25,000 --> 00:01:27,000
that your function is doing the right thing--

23
00:01:27,000 --> 00:01:30,000
rather this serves as a regression test.

24
00:01:30,000 --> 00:01:35,000
Regression test means that we're just testing it to see if we broke something.

25
00:01:35,000 --> 00:01:38,000
We want to get the same result this time as we got next time

26
00:01:38,000 --> 00:01:40,000
if we make a small change to our program.

27
00:01:40,000 --> 00:01:45,000
We can verify that this looks reasonable--that we got the big word we were looking for,

28
00:01:45,000 --> 00:01:50,000
BACKBENCH, other components of it like BENCH and then a bunch of three-letter words,

29
00:01:50,000 --> 00:01:52,000
which always show up in Scrabble.

30
00:01:52,000 --> 00:01:55,000
That was the horizontal plays. We can also do the all_plays.

31
00:01:55,000 --> 00:01:58,000
It's gratifying that all_plays is a bit longer.

32
00:01:58,000 --> 00:02:02,000
It's gratifying that BACKBENCH is still there, and when we run it, it passes.

33
00:02:02,000 --> 00:02:05,000
Bird-by-bird--we can check off one more.

34
00:02:05,000 --> 00:02:08,000
Now there is only one left--scoring.
