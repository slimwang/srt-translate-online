1
00:00:00,580 --> 00:00:03,000
Project two is a fun project.

2
00:00:04,240 --> 00:00:05,305
Honestly to me,

3
00:00:05,305 --> 00:00:10,140
it's one of the easiest projects
through the Nano Degree program.

4
00:00:10,140 --> 00:00:13,390
And I say that just because
the associated class

5
00:00:13,390 --> 00:00:16,990
helps students get started
with writing JSON objects.

6
00:00:16,990 --> 00:00:21,896
And for those of you working on project
two, the JSON object kind of related

7
00:00:21,896 --> 00:00:25,680
to how they'll be defining object for
project three.

8
00:00:25,680 --> 00:00:29,740
There we go.
So the first section is pretty clear.

9
00:00:29,740 --> 00:00:33,240
Make sure you have some information,
real or fake, about yourself or

10
00:00:33,240 --> 00:00:34,040
someone else.

11
00:00:36,050 --> 00:00:40,445
You have their bio, their contact info and
the project gets you started along

12
00:00:40,445 --> 00:00:43,538
a really good path if you just go and
read the readMe.

13
00:00:43,538 --> 00:00:46,222
It's associated,
it's going to help you done.

14
00:00:46,222 --> 00:00:51,840
Just read this part, tells you exactly
what you need for each of those parts.

15
00:00:53,560 --> 00:00:56,030
The second part of it has
to do with functions and

16
00:00:56,030 --> 00:01:01,130
it says all the resume functions should be
built with modular functions.

17
00:01:01,130 --> 00:01:02,760
Now what is the big
deal with modularity.

18
00:01:04,280 --> 00:01:06,030
Basically the word modular,

19
00:01:06,030 --> 00:01:10,100
itself, means something that
can be broken down into parts.

20
00:01:10,100 --> 00:01:14,890
It separates your code into independent
parts which can be put together

21
00:01:14,890 --> 00:01:16,210
very easily.

22
00:01:16,210 --> 00:01:20,940
And a way to think about
this is modular sofas.

23
00:01:20,940 --> 00:01:24,260
You can buy it in individual pieces and
just piece them together.

24
00:01:24,260 --> 00:01:29,420
You can have just a single sofa and
then add on a double one to it,

25
00:01:29,420 --> 00:01:35,650
depending on how long your living your
room is, I guess, and your style.

26
00:01:35,650 --> 00:01:38,350
>> That's very important, right?

27
00:01:38,350 --> 00:01:41,070
>> It can also help
when there are multiple

28
00:01:41,070 --> 00:01:46,130
people working on the same project and
each person can work on parts of it.

29
00:01:46,130 --> 00:01:48,650
And you can put them
together afterwards.

30
00:01:48,650 --> 00:01:53,909
So each member would flush out a module
and when they work perfectly, by that

31
00:01:53,909 --> 00:01:59,014
you would also be checking on small
snippets of code to work the right way.

32
00:01:59,014 --> 00:02:07,040
And once that happens you can just
assemble them together in one project.

33
00:02:07,040 --> 00:02:09,400
Now, it can also help extend things.

34
00:02:09,400 --> 00:02:14,930
So, say right now I have a function or
code that only does things A, B, and C.

35
00:02:16,420 --> 00:02:20,280
I can add modules to it so
that it can do C, D, and E.

36
00:02:20,280 --> 00:02:24,000
And in case of the interactive resume,
maybe you just want to start

37
00:02:24,000 --> 00:02:29,240
with one thing, say your bio, and
make sure that works perfectly fine.

38
00:02:29,240 --> 00:02:34,480
And then come back and add a little
bit of module for your work.

39
00:02:34,480 --> 00:02:35,620
And then your project.

40
00:02:35,620 --> 00:02:39,600
So you can keep extending
it in a really easy way.

41
00:02:39,600 --> 00:02:41,920
And that really helps debugging as well.

42
00:02:41,920 --> 00:02:43,790
>> Yeah.
>> because you don't want to write all

43
00:02:43,790 --> 00:02:49,360
your code, just to see a blank page
on your Chrome browser window.

44
00:02:49,360 --> 00:02:54,754
You open it up and you don't know what
is going on, where you made the error.

45
00:02:54,754 --> 00:03:00,173
So it's very convenient if you
want to build out part by part,

46
00:03:00,173 --> 00:03:01,920
module by module.

47
00:03:01,920 --> 00:03:06,590
So you want to build up your bio
section first, see if it renders, and

48
00:03:06,590 --> 00:03:09,420
then go ahead with
the rest of the sections.

49
00:03:09,420 --> 00:03:11,780
>> Just go piece by piece.

50
00:03:11,780 --> 00:03:15,300
And I guess with that,
although we covered this in the class,

51
00:03:15,300 --> 00:03:19,238
I would like to just show our students
how to go and define functions.

52
00:03:19,238 --> 00:03:21,647
And talk about the difference
between function expression and

53
00:03:21,647 --> 00:03:22,610
function declaration.

54
00:03:24,140 --> 00:03:28,364
Let's just make sure that we
actually go in to Sublime and

55
00:03:28,364 --> 00:03:31,270
tell Sublime that this is JavaScript.

56
00:03:31,270 --> 00:03:34,700
Now something that I am
missing here is a semicolon.

57
00:03:36,150 --> 00:03:39,270
This is called a function expression.

58
00:03:39,270 --> 00:03:43,480
And it must come with semicolon
at the end of the curly braces.

59
00:03:43,480 --> 00:03:48,370
It's really important with styling,
and styling your code in

60
00:03:48,370 --> 00:03:52,510
a certain way is really important
to work with the Industry and

61
00:03:52,510 --> 00:03:55,780
just work at industry standards.

62
00:03:55,780 --> 00:04:00,800
There's another way to define
a function and we can just call it

63
00:04:02,580 --> 00:04:07,220
this way, and
the code associated with go over there.

64
00:04:09,010 --> 00:04:13,620
However in this case since it is a
function declaration, it should not have

65
00:04:13,620 --> 00:04:15,390
a semicolon at the end of it.

66
00:04:15,390 --> 00:04:18,100
That is an extra semicolon,
you don't need it.

67
00:04:18,100 --> 00:04:24,430
So quickly, to remember, if there is
a var associated with your function,

68
00:04:24,430 --> 00:04:27,080
it must have a semicolon.

69
00:04:27,080 --> 00:04:32,390
If you don't have a var in you declaration or when you're
beginning to write your function,

70
00:04:32,390 --> 00:04:37,265
you do not need to have
a semicolon in the end.

71
00:04:37,265 --> 00:04:41,161
And then the way we would call each
of these functions is just by writing

72
00:04:41,161 --> 00:04:44,411
thisFunction(), and
thisFunction2().

73
00:04:44,411 --> 00:04:47,201
Again my semicolons are missing.

74
00:04:47,201 --> 00:04:48,058
>> I just nudged Gauril.

75
00:04:48,058 --> 00:04:49,270
>> [LAUGH] Semicolon.

76
00:04:49,270 --> 00:04:53,582
So that's the way you
would define a function.

77
00:04:53,582 --> 00:04:58,923
So make sure you understand
the difference between what

78
00:04:58,923 --> 00:05:05,100
a function declaration versus
a function expression is.

79
00:05:05,100 --> 00:05:07,435
The expression comes with var,

80
00:05:07,435 --> 00:05:11,020
V-A-R associated with it
the declaration doesn't.

81
00:05:11,020 --> 00:05:15,060
And when you have var
associated with a function,

82
00:05:15,060 --> 00:05:18,243
have a semicolon, otherwise don't.

83
00:05:18,243 --> 00:05:22,130
It's an extra semicolon
in your code reviews,

84
00:05:22,130 --> 00:05:27,217
you will get pointed out on that little semicolon.
>> For sure [CROSSTALK], yeah.

85
00:05:27,217 --> 00:05:29,385
What does encapsulating something mean?

86
00:05:29,385 --> 00:05:35,050
It's to covering it up
into separate objects.

87
00:05:35,050 --> 00:05:41,860
So, hold inside, or keep data pertaining
to a particular object with it.

88
00:05:41,860 --> 00:05:44,050
And it also helps with modularity.

89
00:05:44,050 --> 00:05:49,020
So, you don't have a function defined
there, and then it's associated.

90
00:05:50,038 --> 00:05:53,880
If you are adding onto it, a function
that you're adding on in some other

91
00:05:53,880 --> 00:06:00,710
place, so it helps with unspaghettifying
your code, if that word even exists.

92
00:06:00,710 --> 00:06:05,620
>> Yeah, we can maybe show
them a quick example of

93
00:06:05,620 --> 00:06:09,160
how to write a basic
structure of encapsulation.

94
00:06:09,160 --> 00:06:13,770
So basically what you're doing is,
you're just wraping your data and

95
00:06:13,770 --> 00:06:17,020
your functions together
within an object, right.

96
00:06:17,020 --> 00:06:19,560
So this object is going to be able to

97
00:06:19,560 --> 00:06:24,410
access all the data as well as
access the member functions.

98
00:06:24,410 --> 00:06:27,899
So I can type up something
real quick in Sublime.

99
00:06:27,899 --> 00:06:30,620
>> That's good and
I'll go share your screen.

100
00:06:30,620 --> 00:06:35,430
Great!
So I'm screen sharing and right now

101
00:06:35,430 --> 00:06:40,797
I'm going to give a JSON
object named person.

102
00:06:40,797 --> 00:06:45,740
And what I'm going to do is,
I'm going to create a name attribute.

103
00:06:45,740 --> 00:06:49,440
Oops I guess I forgot my parentheses.

104
00:06:49,440 --> 00:06:55,710
>> They are quotes.
>> So I have a name property, and
then I assigned Poornima to it.

105
00:06:55,710 --> 00:06:56,890
And then.

106
00:06:56,890 --> 00:07:00,450
>> Do you want a comma, Poornima?

107
00:07:00,450 --> 00:07:02,340
>> Yeah but
I'm just introducing [CROSSTALK].

108
00:07:02,340 --> 00:07:03,410
>> Okay.

109
00:07:03,410 --> 00:07:07,753
>> Yeah.
And then what I do is I have

110
00:07:07,753 --> 00:07:15,330
a person.display function defined here.

111
00:07:15,330 --> 00:07:15,830
Whoops.

112
00:07:17,816 --> 00:07:20,414
Whoops, whoops.

113
00:07:20,414 --> 00:07:25,748
>> [LAUGH]
>> Okay, and then what

114
00:07:25,748 --> 00:07:30,767
I'm going to do here is just say

115
00:07:30,767 --> 00:07:36,175
console.log of person.name,

116
00:07:36,175 --> 00:07:39,694
so semicolon [LAUGH].

117
00:07:39,694 --> 00:07:43,330
And now how I can access, so

118
00:07:43,330 --> 00:07:48,730
as you can see this person
object has a name attribute,

119
00:07:48,730 --> 00:07:52,760
and that has my name assigned to it,
and it has a display function.

120
00:07:52,760 --> 00:07:58,040
So, to call this function all
I have to do is say display.

121
00:07:58,040 --> 00:07:58,658
>> Poonima, hang on.

122
00:07:58,658 --> 00:07:59,859
>> Okay.

123
00:07:59,859 --> 00:08:06,300
So I just showed you
encapsulate a function and

124
00:08:06,300 --> 00:08:11,560
it's attribute within an object,
how do you call the object and

125
00:08:11,560 --> 00:08:17,590
access these functions and
the attributes.

126
00:08:17,590 --> 00:08:22,130
So that's what I did here and
you can extend this like Gary said.

127
00:08:22,130 --> 00:08:28,206
I can add a role to this and say coach.

128
00:08:28,206 --> 00:08:35,385
Yeah and I can add [CROSSTALK]
organization, okay, yeah.

129
00:08:35,385 --> 00:08:36,190
>> Udacity.

130
00:08:36,190 --> 00:08:36,860
>> Udacity.

131
00:08:36,860 --> 00:08:43,922
So defining your function outside
of the object using dot notation.

132
00:08:43,922 --> 00:08:48,360
The dot is like an apostrophe
in the English language.

133
00:08:48,360 --> 00:08:52,989
So it's basically saying person's
display function is going to

134
00:08:52,989 --> 00:08:55,830
console.log that person.name.

135
00:08:55,830 --> 00:08:59,995
Now there is another way by
defining the display function,

136
00:08:59,995 --> 00:09:04,660
and let's call it something else,
inside the object itself.

137
00:09:05,770 --> 00:09:07,180
And to do that.

138
00:09:10,500 --> 00:09:12,971
Okay I guess you all are seeing.

139
00:09:12,971 --> 00:09:14,090
This screen.

140
00:09:14,090 --> 00:09:15,690
Thank you I'm just going to go ahead and

141
00:09:15,690 --> 00:09:18,920
keep delivering your responses,
as questions.

142
00:09:20,090 --> 00:09:23,926
I guess we can go ahead and
Poornima can

143
00:09:23,926 --> 00:09:28,934
you define the function
inside the person object.

144
00:09:28,934 --> 00:09:33,614
So the way we would do that
is just have a function, and

145
00:09:33,614 --> 00:09:37,370
let's call it functionTwo or something.

146
00:09:37,370 --> 00:09:38,230
And you are missing a comma.

147
00:09:38,230 --> 00:09:42,055
Okay and then function name,

148
00:09:42,055 --> 00:09:46,190
functionTwo, and then colon.

149
00:09:46,190 --> 00:09:50,541
And this would be the function
that you're telling it that this

150
00:09:50,541 --> 00:09:55,710
property's actually a function, and
you have curly braces and your code.

151
00:09:55,710 --> 00:10:04,120
And this time it might be console.log
the person's role, or something.

152
00:10:04,120 --> 00:10:08,460
And then the way to actually call
this function is very similar

153
00:10:08,460 --> 00:10:12,372
to the display one, and
you would still go person dot.

154
00:10:12,372 --> 00:10:14,200
>> FunctionTwo.

155
00:10:14,200 --> 00:10:15,985
>> And it will pull it for me.

156
00:10:15,985 --> 00:10:18,511
>> [LAUGH] This is convenient.

157
00:10:18,511 --> 00:10:19,780
>> FunctionTwo.

158
00:10:19,780 --> 00:10:21,600
That's the way we'd be
calling that function.

159
00:10:23,720 --> 00:10:28,200
So that basically is encapsulation.

160
00:10:29,680 --> 00:10:30,690
To meet specifications,

161
00:10:30,690 --> 00:10:33,950
you definitely want to have
your Google map that renders.

162
00:10:33,950 --> 00:10:38,660
And the code for
it is given to you in your helper.js.

163
00:10:38,660 --> 00:10:41,360
So you need to go and
uncomment that code.

164
00:10:41,360 --> 00:10:43,485
And it should take the place or

165
00:10:43,485 --> 00:10:47,991
location associated with wherever
you live or where you work or

166
00:10:47,991 --> 00:10:53,410
where you got your education from,
and help you display it on the map.

167
00:10:53,410 --> 00:10:58,867
That is the basic interactivity we do
expect to see to meet specifications.

168
00:10:58,867 --> 00:11:04,674
Beyond that you can add many bars or
navigation bars.

169
00:11:04,674 --> 00:11:11,520
Some sort of a skills chart that is
the one I have seen and enjoyed a lot.

170
00:11:11,520 --> 00:11:18,270
>> I think that is called the navigation
bars are a part of Polymer.

171
00:11:18,270 --> 00:11:20,780
So you can check that out.

172
00:11:20,780 --> 00:11:26,452
And definitely for
exceeding specifications in that area,

173
00:11:26,452 --> 00:11:32,245
I've seen some of them just
provide links to their contacts.

174
00:11:32,245 --> 00:11:37,873
So wherever you provide contacts and
where you have your LinkedIn handle or

175
00:11:37,873 --> 00:11:42,785
your twitter handle mentioned there,
what do you can do is you add

176
00:11:42,785 --> 00:11:47,698
a hyperlink that will actually
take anyone who's looking at your

177
00:11:47,698 --> 00:11:52,650
resume to your Twitter account or
your LinkedIn page or however.

178
00:11:52,650 --> 00:11:53,710
So you can do that.

179
00:11:53,710 --> 00:11:55,170
That is also definitely [CROSSTALK].

180
00:11:55,170 --> 00:11:58,544
>> So something that I have seen and
enjoyed a lot, and

181
00:11:58,544 --> 00:12:02,311
it had to do with going and
modifying the styling as well,

182
00:12:02,311 --> 00:12:08,260
was when I hovered over a certain skill
or contact, it would change the color.

183
00:12:08,260 --> 00:12:11,980
Or there was one where it would jump,
and

184
00:12:11,980 --> 00:12:15,980
that I thought was particularly helpful
with the nanodegree because you do

185
00:12:15,980 --> 00:12:18,900
have something of that
sort in your project five.

186
00:12:20,260 --> 00:12:26,230
And while you all are far away from that
right now, it is something to consider.

187
00:12:26,230 --> 00:12:30,600
So we love seeing projects
that exceed specifications.

188
00:12:32,090 --> 00:12:34,990
So we encourage you to work on that.

189
00:12:34,990 --> 00:12:39,420
>> And the next part also,
the artistic creativity,

190
00:12:39,420 --> 00:12:45,110
that if you exceed in that you get
an overall Exceeds in your project.

191
00:12:46,800 --> 00:12:50,590
Sometimes students overlook
that they have to go above and

192
00:12:50,590 --> 00:12:54,810
beyond in both the sections to actually
exceed specifications in the project.

193
00:12:55,850 --> 00:12:58,615
So, yeah, do you want to talk
about the artistic creativity?

194
00:12:58,615 --> 00:12:59,350
[LAUGH]
>> Sure.

195
00:12:59,350 --> 00:13:01,980
>> Okay.
>> So the artistic creativity

196
00:13:01,980 --> 00:13:06,200
has basically got to do with
your layout in your CSS.

197
00:13:06,200 --> 00:13:11,600
And we want you to have
fun with the project.

198
00:13:11,600 --> 00:13:20,350
It doesn't necessarily mean that you
have to completely change the project.

199
00:13:20,350 --> 00:13:24,030
We do love to see those projects, but

200
00:13:24,030 --> 00:13:28,400
the basic expectation is that you change
your font, you change the layout, and

201
00:13:28,400 --> 00:13:30,694
we'll show you
>> Font and colors,

202
00:13:30,694 --> 00:13:31,356
because-
>> Font and color scheme.

203
00:13:31,356 --> 00:13:34,050
[COUGH]
>> I think right now it's a shade of

204
00:13:34,050 --> 00:13:36,980
gray and orange, that you used.

205
00:13:36,980 --> 00:13:38,100
So yeah, go ahead.

206
00:13:38,100 --> 00:13:42,920
You can alter colors and
change the layout of the page entirely.
