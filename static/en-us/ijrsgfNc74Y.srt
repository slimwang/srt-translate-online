1
00:00:00,320 --> 00:00:04,630
Although we use passwords almost
universally, very commonly,

2
00:00:04,630 --> 00:00:07,530
there are plenty of
problems with passwords.

3
00:00:07,530 --> 00:00:10,020
People been predicting
the demise of passwords for

4
00:00:10,020 --> 00:00:13,880
a long time because of these problems,
but they sort of refuse to go away.

5
00:00:13,880 --> 00:00:15,930
So what are some of these problems?

6
00:00:15,930 --> 00:00:20,530
For passwords to be strong, and
by strong we mean harder to guess,

7
00:00:20,530 --> 00:00:25,830
they need to be long and they need to
have these upper, lower digits, special

8
00:00:25,830 --> 00:00:29,730
characters and things like that, so
we are increasing the space of possible

9
00:00:29,730 --> 00:00:34,140
passwords but that increases complexity
for users and usability suffers.

10
00:00:34,140 --> 00:00:36,156
Even if you have good passwords,

11
00:00:36,156 --> 00:00:40,620
there are problems with sort of the
trusted paths discussion that we had.

12
00:00:40,620 --> 00:00:42,150
This is sort of related to that.

13
00:00:42,150 --> 00:00:47,250
Phishing and social engineering attacks,
really users don't authenticate who is

14
00:00:47,250 --> 00:00:49,775
really that their giving
their password to.

15
00:00:49,775 --> 00:00:51,355
So this idea of mutual authentication,

16
00:00:51,355 --> 00:00:55,680
you trying to convince
that it is really you.

17
00:00:55,680 --> 00:00:56,730
It's Alice.

18
00:00:56,730 --> 00:00:59,820
Do you assume the system
is the true system?

19
00:00:59,820 --> 00:01:03,920
Do you ever ask the system to
authenticate itself to you?

20
00:01:03,920 --> 00:01:08,250
In particular if you're using
a remote service, your bank or

21
00:01:08,250 --> 00:01:10,560
something like that,
how do you know it's really your bank?

22
00:01:10,560 --> 00:01:13,250
It could be someone else that
just looks like your bank.

23
00:01:13,250 --> 00:01:16,540
And those are the sort of
fphshing attacks that we have.

24
00:01:16,540 --> 00:01:20,560
Unfortunately once a password is stolen,
it can be used many times.

25
00:01:20,560 --> 00:01:24,530
Not a one time use sort of a thing, and

26
00:01:24,530 --> 00:01:27,400
they can gain access to your
account again and again.

27
00:01:27,400 --> 00:01:32,370
And the way we address that is
by having policies that say you

28
00:01:32,370 --> 00:01:36,770
must change your password every 90 days,
or every six months, or whatever it is.

29
00:01:36,770 --> 00:01:39,070
Of course, usability's going
to suffer because of that.

30
00:01:39,070 --> 00:01:41,550
And finally, humans are humans, and

31
00:01:41,550 --> 00:01:44,170
they have a hard time
remembering lots of passwords.

32
00:01:44,170 --> 00:01:46,640
These days it's not just
one system that we have.

33
00:01:46,640 --> 00:01:51,185
You have your bank, you have your mail,
you have various merchants,

34
00:01:51,185 --> 00:01:55,540
retailers, and things like that, so
you have lots of passwords to remember.

35
00:01:55,540 --> 00:01:58,710
You don't want to have the same password
everywhere because when one gets

36
00:01:58,710 --> 00:02:03,610
compromised, you're vulnerable to
all your services that you access,

37
00:02:03,610 --> 00:02:06,600
somebody can get to them with
that one stolen password.

38
00:02:06,600 --> 00:02:08,490
So if you're going to
have different passwords,

39
00:02:08,490 --> 00:02:11,850
well that's going It's going to be hard
for us to remember so many of those

40
00:02:11,850 --> 00:02:15,930
passwords if they're really hard to
guess, and they're long and complex.

41
00:02:15,930 --> 00:02:18,340
Well all of the many problems,
there are of course,

42
00:02:18,340 --> 00:02:21,620
some best practices when
it comes to passwords.

43
00:02:21,620 --> 00:02:24,250
So when it comes to Sys administrators,

44
00:02:24,250 --> 00:02:27,620
obviously the password should
never be stored in the clear.

45
00:02:27,620 --> 00:02:29,720
So you only store hashed values.

46
00:02:29,720 --> 00:02:33,680
And we use salting, random salt,
to avoid the problems,

47
00:02:33,680 --> 00:02:36,650
multiple users having the same
password and things like that.

48
00:02:36,650 --> 00:02:40,260
We have to limit access to the file
where these passwords are stored,

49
00:02:40,260 --> 00:02:43,900
the hash values are stored, so
shadow files we talked about and so on.

50
00:02:43,900 --> 00:02:48,270
And we want to use a function
here that is not fast.

51
00:02:48,270 --> 00:02:51,490
We have to do it only once it's
in it once the user logs in.

52
00:02:51,490 --> 00:02:53,300
We don't need to run it a million times.

53
00:02:53,300 --> 00:02:55,820
So it doesn't have to be fast,
it can be slow.

54
00:02:55,820 --> 00:02:56,990
On the other hand,

55
00:02:56,990 --> 00:03:00,320
somebody doing a brute force attack
has to run it again and again.

56
00:03:00,320 --> 00:03:01,960
They have to run it millions of times.

57
00:03:01,960 --> 00:03:05,580
So using a slow function
actually is helpful, and

58
00:03:05,580 --> 00:03:07,960
current implementations
actually do that.

59
00:03:07,960 --> 00:03:10,590
They use slower hash functions.

60
00:03:10,590 --> 00:03:14,250
What users can do is,
a lot of password managers these days,

61
00:03:14,250 --> 00:03:17,020
we're talking about having
lot of passwords, one for

62
00:03:17,020 --> 00:03:20,525
each different service you want to
use and hard to remember all of them.

63
00:03:20,525 --> 00:03:24,795
Password managers actually can
generate complex high entropy.

64
00:03:24,795 --> 00:03:27,395
We didn't talk about
the word entropy but

65
00:03:27,395 --> 00:03:32,197
entropy is sort of high entropy means
it's harder to guess, so they can

66
00:03:32,197 --> 00:03:35,977
have these difficult to guess passwords
and they can keep track of those.

67
00:03:35,977 --> 00:03:40,317
You basically have one strong password
to access the password manager and

68
00:03:40,317 --> 00:03:42,347
they can keep track of
your other passwords.
