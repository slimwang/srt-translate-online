1
00:00:00,450 --> 00:00:02,650
You are doing awesome work.

2
00:00:02,650 --> 00:00:04,780
To recap, let's talk a little
bit about what you've done.

3
00:00:04,780 --> 00:00:08,410
So the first thing that you did is you
defined a rule structure at that mirrors

4
00:00:08,410 --> 00:00:09,950
our actual database.

5
00:00:09,950 --> 00:00:13,420
Then, using that rule structure,
you created validations for

6
00:00:13,420 --> 00:00:16,050
both properties and entire objects.

7
00:00:16,050 --> 00:00:19,440
Next we figured out what kind of read
and write rules that you need for

8
00:00:19,440 --> 00:00:20,060
each root node.

9
00:00:20,060 --> 00:00:22,560
And that's all been laid out for
you in a spec.

10
00:00:22,560 --> 00:00:26,580
So now we're ready to actually implement
those rules, of course using those handy

11
00:00:26,580 --> 00:00:29,820
UID mapping and
owner mapping rules that you just made.

12
00:00:29,820 --> 00:00:32,740
But before I throw you in the wild
of writing read and write rules,

13
00:00:32,740 --> 00:00:36,140
I wanted to give you a couple of tips
and tricks about troubleshooting.

14
00:00:36,140 --> 00:00:37,650
Because you might be wondering,

15
00:00:37,650 --> 00:00:40,500
how do you actually test
a rule when it's not working?

16
00:00:40,500 --> 00:00:43,640
So my first tip is a oldie but
a goodie, and

17
00:00:43,640 --> 00:00:46,120
it's basically to turn
on the debug mode.

18
00:00:46,120 --> 00:00:48,340
This gives you access to
all sorts of good data.

19
00:00:48,340 --> 00:00:49,360
In the case of a read,

20
00:00:49,360 --> 00:00:52,120
it will show you the exact location
you're trying to read from.

21
00:00:52,120 --> 00:00:55,370
And in the case of write, it'll show
you the exact data that you're sending

22
00:00:55,370 --> 00:00:58,500
to the app, that might or
might not be getting denied.

23
00:00:58,500 --> 00:01:02,300
In addition though, Firebase actually
provides you with a simulator to test

24
00:01:02,300 --> 00:01:03,760
out reading and writing data.

25
00:01:03,760 --> 00:01:06,610
And the simulator's pretty
cool because it allows you to

26
00:01:06,610 --> 00:01:09,470
very clearly see what's
happening with your permissions.

27
00:01:09,470 --> 00:01:11,000
Okay.
So, in the Firebase dashboard,

28
00:01:11,000 --> 00:01:15,020
you can go ahead and go over to this
Simulator tab and, for our app,

29
00:01:15,020 --> 00:01:19,910
because login is so important, you're
going to want to select a Custom Auth.

30
00:01:19,910 --> 00:01:22,790
The provider doesn't,
matter but the UID does.

31
00:01:22,790 --> 00:01:26,260
This will make it so that when
you're using your read/write rules,

32
00:01:26,260 --> 00:01:28,450
in this case the provider
isn't important, but

33
00:01:28,450 --> 00:01:32,030
you should put in a UID of
a pre-existing user in your app.

34
00:01:32,030 --> 00:01:34,445
In my case, I'm going to go ahead and
put in UID.

35
00:01:34,445 --> 00:01:37,972
And I just copied and
pasted this over from my data here,

36
00:01:37,972 --> 00:01:42,050
where if you look at the UID mappings,
you can grab her UID.

37
00:01:42,050 --> 00:01:45,890
Okay, so I put in UID, and
I can press Authenticate.

38
00:01:45,890 --> 00:01:49,730
And this will basically make it so
I am impersonating.

39
00:01:49,730 --> 00:01:54,190
And then, here, I can simulate
different read or write rules.

40
00:01:54,190 --> 00:01:57,140
Write rules allow you to also specify
some data that you tring to write.

41
00:01:57,140 --> 00:02:00,980
So, for example, if you wanted to
test that rule that you just created,

42
00:02:00,980 --> 00:02:05,370
you could find a shopping list that
is shared on, another list that she's

43
00:02:05,370 --> 00:02:09,320
the owner of, and finally a list
that she has nothing to do with, and

44
00:02:09,320 --> 00:02:11,880
make sure that they all
give the correct responses.

45
00:02:11,880 --> 00:02:15,600
So, for example, I'm going to get
a shopping list that is shared on.

46
00:02:15,600 --> 00:02:18,430
So over here I'm looking at lists.

47
00:02:18,430 --> 00:02:23,796
Okay, here's one that she shared on,
and it has the name K7J0.

48
00:02:23,796 --> 00:02:27,094
So I'll go over here to shopping
list items, go to list K7J0,

49
00:02:27,094 --> 00:02:30,410
and then I'll go ahead and
open that link in the other tab.

50
00:02:30,410 --> 00:02:34,120
I'll copy this location, and
then over here in the simulator

51
00:02:34,120 --> 00:02:36,940
I can put that location
that I just copied here.

52
00:02:36,940 --> 00:02:40,400
So basically, I'm now doing a simulated
read for shopping list items for

53
00:02:40,400 --> 00:02:42,610
that list that she was shared on.

54
00:02:42,610 --> 00:02:45,670
Okay, and
I'm already authenticated as her.

55
00:02:45,670 --> 00:02:48,474
So, I could come down here,
and I'm authenticated as.

56
00:02:48,474 --> 00:02:50,760
I'm trying to read at this
list that she's shared on.

57
00:02:50,760 --> 00:02:55,650
I can press simulate read, and
it says here that the read is allowed.

58
00:02:55,650 --> 00:02:59,110
It even goes through each of
the rules of these different steps.

59
00:02:59,110 --> 00:03:02,750
So you get a lot of output information
and it will tell you, actually, if there

60
00:03:02,750 --> 00:03:06,840
are multiple rules along the path, which
one it passes and which one it fails.

61
00:03:06,840 --> 00:03:07,997
So it's very useful.

62
00:03:07,997 --> 00:03:11,264
And so, similarly, I can take
a list that she's not a part of,

63
00:03:11,264 --> 00:03:13,720
which she's not a part of this list.

64
00:03:13,720 --> 00:03:15,310
And I can simulate a read.

65
00:03:15,310 --> 00:03:17,800
And it would show that
the read was denied, and

66
00:03:17,800 --> 00:03:20,210
point out which of
these rules was false.

67
00:03:20,210 --> 00:03:22,640
Finally, Bolt could be
a pretty helpful tool for

68
00:03:22,640 --> 00:03:24,980
writing rules,
including read and write rules.

69
00:03:24,980 --> 00:03:28,150
As I mentioned, checking whether
a user is shared on the list, or

70
00:03:28,150 --> 00:03:30,620
the owner of a list,
is a fairly common rule.

71
00:03:30,620 --> 00:03:32,655
You've also probably seen that
it's a little bit long to write.

72
00:03:32,655 --> 00:03:34,540
Bolt allows you to write functions, and

73
00:03:34,540 --> 00:03:36,950
then use those functions
in different places.

74
00:03:36,950 --> 00:03:39,730
And this is, essentially,
gives you a pretty easy way to make

75
00:03:39,730 --> 00:03:43,450
fairly similar rules in a bunch of
different parts of the rule stock.

76
00:03:43,450 --> 00:03:46,630
So here's a quick example of a function
in Bolt, and I'm not going to go over

77
00:03:46,630 --> 00:03:50,300
the semantics of all the [INAUDIBLE] to
some of the bolt documentation for that.

78
00:03:50,300 --> 00:03:53,540
But, basically, it's doing the look
up in that UID mappings table

79
00:03:53,540 --> 00:03:55,400
to get you the encoded email.

80
00:03:55,400 --> 00:03:59,390
And here's another function, which when
passed in a ListID parameter, it goes

81
00:03:59,390 --> 00:04:03,890
into the owner mappings node and gets
you back the owner email for that list.

82
00:04:04,890 --> 00:04:09,180
And here's yet another function which
combines these two other functions

83
00:04:09,180 --> 00:04:13,760
to get your encoded email and
compare it to the email of a list.

84
00:04:13,760 --> 00:04:16,660
So, you might write up a bunch
of functions in Bolt, and

85
00:04:16,660 --> 00:04:20,620
then in your paths part of your Bolt
file, you can write something like this.

86
00:04:20,620 --> 00:04:23,000
And what this rule is
basically doing is saying,

87
00:04:23,000 --> 00:04:26,830
for a list name in
a specific shopping list,

88
00:04:26,830 --> 00:04:30,340
the owner of that shopping list is the
only one who can change the list name.

89
00:04:30,340 --> 00:04:32,420
And while he had to write
all these functions,

90
00:04:32,420 --> 00:04:36,670
you can now use this owner function
in as many places as you want.

91
00:04:36,670 --> 00:04:40,450
So there might be ten places in the app
that you want to check for ownership.

92
00:04:40,450 --> 00:04:43,270
All you have to do now is write
this isOwner function call.

93
00:04:43,270 --> 00:04:45,830
A full explanation of writing
functions in Bolt is accessible in

94
00:04:45,830 --> 00:04:47,390
the instructor notes, but

95
00:04:47,390 --> 00:04:52,240
hopefully this is enough to prove to you
that using Bolt might be a good idea.

96
00:04:52,240 --> 00:04:54,570
So now that you know the different
options for troubleshooting and

97
00:04:54,570 --> 00:04:57,700
debugging your rules, do you think that
you could write the rest of the read,

98
00:04:57,700 --> 00:05:00,030
write, and validate rules that I'm
giving you in the spec right now?
