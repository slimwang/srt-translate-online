1
00:00:00,730 --> 00:00:03,700
We are entering the wrapping stage.

2
00:00:03,700 --> 00:00:07,540
I want you to keep in mind that
a promise is a tricatch wrapper around

3
00:00:07,540 --> 00:00:11,360
code that will finish at
an unpredictable time.

4
00:00:11,360 --> 00:00:13,480
Here, let me show you an example.

5
00:00:13,480 --> 00:00:15,980
Promise is a constructor.

6
00:00:15,980 --> 00:00:20,410
You can either store a promise as
a variable like I'm doing right here.

7
00:00:20,410 --> 00:00:23,860
Or you can simply work on it
as soon as you create it.

8
00:00:23,860 --> 00:00:25,820
Either way works just fine.

9
00:00:25,820 --> 00:00:28,550
But you'll often see me
simply work on the promise

10
00:00:28,550 --> 00:00:31,250
without storing it as a variable.

11
00:00:31,250 --> 00:00:34,160
You pass a function to
the promise with two arguments.

12
00:00:34,160 --> 00:00:35,750
Resolve and reject.

13
00:00:36,850 --> 00:00:39,540
Resolve and reject are two callbacks

14
00:00:39,540 --> 00:00:43,230
that you use to specify when
a promise has either fulfilled,

15
00:00:43,230 --> 00:00:47,820
because something worked, or
rejected because something went wrong.

16
00:00:47,820 --> 00:00:49,420
Let me show you what
this actually looks like.

17
00:00:50,420 --> 00:00:54,380
In this example, I'm wrapping an image
tag loader in a promise because

18
00:00:54,380 --> 00:00:58,530
I want to do some work after
the image loads on a page.

19
00:00:58,530 --> 00:01:03,340
I'm using the image tag's onload
handler to specify success.

20
00:01:03,340 --> 00:01:06,408
Onload calls resolve,
which queues up the function,

21
00:01:06,408 --> 00:01:13,190
passed to then to execute after
this function finishes executing.

22
00:01:13,190 --> 00:01:18,300
Note, the JavaScript engine does
not immediately stop executing

23
00:01:18,300 --> 00:01:20,340
this function upon calling resolve.

24
00:01:21,340 --> 00:01:23,370
In this case,
that's the last piece of work so

25
00:01:23,370 --> 00:01:27,410
effectively it's the end of the function
however, that's not always the case.

26
00:01:27,410 --> 00:01:30,170
Check the link in the instructor
notes to see what I mean.

27
00:01:30,170 --> 00:01:33,710
Being able to called resolve and
reject is important.

28
00:01:33,710 --> 00:01:37,514
This is what it gives you
the flexibility to explicitly say what

29
00:01:37,514 --> 00:01:42,870
constitutes fulfillment and what
constitutes rejection for the promise.

30
00:01:42,870 --> 00:01:47,840
When either resolve or reject has been
called, the promise has been settled,

31
00:01:47,840 --> 00:01:49,888
and then at that point,
the next part of the chain.

32
00:01:49,888 --> 00:01:54,620
Usually, a .then, or
it could be a .catch is then executed.

33
00:01:55,680 --> 00:01:59,710
Back to the original example,
any value passed to resolve or

34
00:01:59,710 --> 00:02:06,310
reject will be received as an argument
by this subsequent .then or .catch.

35
00:02:06,310 --> 00:02:08,550
In the event that nothing
is passed to resolve or

36
00:02:08,550 --> 00:02:12,470
reject as is the case here with
the reject, then it's totally fine.

37
00:02:12,470 --> 00:02:16,360
The next link in the chain
simply receives undefined.

38
00:02:16,360 --> 00:02:21,320
There's a third case and that is if
the value that's passed is a promise.

39
00:02:21,320 --> 00:02:23,700
If so,
then the promise will execute first and

40
00:02:23,700 --> 00:02:27,490
then whatever value it resolves to will
be passed to the next link in the chain.

41
00:02:28,700 --> 00:02:32,170
Note that resolve and
reject have the same syntax.

42
00:02:32,170 --> 00:02:34,230
Resolve leads to the next
then in the chain,

43
00:02:34,230 --> 00:02:37,020
while reject leads to the next catch.

44
00:02:37,020 --> 00:02:40,860
Incidentally, if there is a JavaScript
error somewhere in the body of

45
00:02:40,860 --> 00:02:44,970
the promise, .catch will also
automatically get called.

46
00:02:44,970 --> 00:02:48,220
And by the way,
there's a bit more to error handling and

47
00:02:48,220 --> 00:02:50,480
you'll be learning about
it in the next lesson.

48
00:02:50,480 --> 00:02:54,010
In the meantime, it is time for
you to write your first promise.
