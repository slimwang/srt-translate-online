1
00:00:00,000 --> 00:00:03,000
The whole point of building up all this heap based technology

2
00:00:03,000 --> 00:00:06,000
is to allow us to do two things efficiently.

3
00:00:06,000 --> 00:00:11,000
One is getting and removing the min and the other one is inserting new elements into the heap.

4
00:00:11,000 --> 00:00:16,000
We like both of these to run in log n time, and if they are, then we can use them

5
00:00:16,000 --> 00:00:20,000
in the top k scenario that I was describing before.

6
00:00:20,000 --> 00:00:24,000
Finding the min is really easy right as the tippe top of the tree.

7
00:00:24,000 --> 00:00:27,000
In fact, getting the min done--easy, constant time.

8
00:00:27,000 --> 00:00:31,000
The problem is if where going to remove the min, look what happens.

9
00:00:31,000 --> 00:00:37,000
There's a sort of gaping volcanic hole at the top. Whatever will we do to fix this.

10
00:00:37,000 --> 00:00:42,000
We kind of have broken our big nice heap into two small nice heaps,

11
00:00:42,000 --> 00:00:45,000
but really want them to be one nice heap, so what can we do.

12
00:00:45,000 --> 00:00:48,000
Well, it would be nice if we had some kind of node someplace

13
00:00:48,000 --> 00:00:50,000
that we could fill in here and then maybe down heapify it.

14
00:00:50,000 --> 00:00:55,000
The natural place to get that node though is right there. The very last element to the heap.

15
00:00:55,000 --> 00:01:00,000
It some value, actually popping it off there doesn't cause any damage to the heap.

16
00:01:00,000 --> 00:01:03,000
We can move it to the tippy top and run down heapify.

17
00:01:03,000 --> 00:01:09,000
Once that concludes in about log in time, we've got our self a heap again. We're back in business.

18
00:01:09,000 --> 00:01:18,000
The steps were, remove the L zero node, copy the last node to the tippy top,

19
00:01:18,000 --> 00:01:23,000
then run down heapify on this no slightly smaller heap, write it fully.

20
00:01:23,000 --> 00:01:27,000
I've got n-1 elements in it now, but we run down heapify it on it

21
00:01:27,000 --> 00:01:29,000
and re-established heap property and we are done.

22
00:01:29,000 --> 00:01:33,000
Log n time. I want you to write some Python code to actually do this to remove min.

23
00:01:33,000 --> 00:01:35,000
It's only a couple of lines long.

24
00:01:35,000 --> 00:01:42,000
We'll give you down heapify and the build heap algorithm so that you can take a list,

25
00:01:42,000 --> 00:01:45,000
create a heap out of it and then remove the min from it.
