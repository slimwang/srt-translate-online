1
00:00:00,340 --> 00:00:04,770
The nice thing about the Java remote object model is that much of the

2
00:00:04,770 --> 00:00:07,810
heavy lifting that an application programmer has

3
00:00:07,810 --> 00:00:11,580
to do in building a client-server system using

4
00:00:11,580 --> 00:00:16,250
RPC. Things like marshaling, unmarshaling, publishing the

5
00:00:16,250 --> 00:00:19,360
remote object on the network for the

6
00:00:19,360 --> 00:00:22,820
clients to access. They're all subsumed under

7
00:00:22,820 --> 00:00:26,290
the covers by the Java distributed object runtime.

8
00:00:26,290 --> 00:00:27,685
And this is where one can see the

9
00:00:27,685 --> 00:00:31,790
similarity between the subcontract mechanism in the spring system

10
00:00:31,790 --> 00:00:34,920
that we saw recently, which was the origin in

11
00:00:34,920 --> 00:00:38,180
some sense for the Java RMI. Before we dig

12
00:00:38,180 --> 00:00:40,240
deeper, let me give you at a high

13
00:00:40,240 --> 00:00:43,420
level the distributed object model of Java. The term

14
00:00:43,420 --> 00:00:47,130
remote object in the object model of Java, refers

15
00:00:47,130 --> 00:00:51,370
to objects that are accessible from different address spaces.

16
00:00:51,370 --> 00:00:53,630
And the term remote interface is used in

17
00:00:53,630 --> 00:00:56,600
the distributed object model to say what are all

18
00:00:56,600 --> 00:00:59,950
the declarations. For methods in a remote object. Once

19
00:00:59,950 --> 00:01:03,540
you have a remote object the interface, remote interface

20
00:01:03,540 --> 00:01:06,040
is saying what are all the declarations for

21
00:01:06,040 --> 00:01:08,960
methods that are existing in the remote object that

22
00:01:08,960 --> 00:01:12,812
are accessible from clients anywhere. That's what remote interface

23
00:01:12,812 --> 00:01:16,186
is. And then the distributed object model of Java,

24
00:01:16,186 --> 00:01:18,346
the clients have to deal with RMI

25
00:01:18,346 --> 00:01:21,836
exceptions. So that's the failure semantics of the

26
00:01:21,836 --> 00:01:24,648
distributive model that the clients have to

27
00:01:24,648 --> 00:01:27,536
deal with exceptions that might happen when a

28
00:01:27,536 --> 00:01:29,981
remote method is invoked by a client.

29
00:01:29,981 --> 00:01:34,589
And there are some similarities and differences between

30
00:01:34,589 --> 00:01:38,341
local objects in Java and remote objects. The

31
00:01:38,341 --> 00:01:41,953
similarity is that you can pass object references

32
00:01:41,953 --> 00:01:44,189
as parameters when you make a an

33
00:01:44,189 --> 00:01:49,200
object invocation. An object invocation arguments of the

34
00:01:49,200 --> 00:01:54,100
invocation could include object references. That's the similarity,

35
00:01:54,100 --> 00:01:57,600
but the difference is that the parameters. When

36
00:01:57,600 --> 00:01:59,050
it is passed, it is passed as

37
00:01:59,050 --> 00:02:01,870
value result. That's the difference between local object

38
00:02:01,870 --> 00:02:04,300
and, and remote object. In the case of

39
00:02:04,300 --> 00:02:07,200
local object, when you pass an object reference

40
00:02:07,200 --> 00:02:09,600
as a parameter, then the method that is

41
00:02:09,600 --> 00:02:13,530
invoked can reach into that object that has

42
00:02:13,530 --> 00:02:16,040
been passed as a parameter as a reference

43
00:02:16,040 --> 00:02:18,530
and make modifications to it and that modifications

44
00:02:18,530 --> 00:02:21,638
will get reflected. In the original object but

45
00:02:21,638 --> 00:02:25,509
in the distributed model, because the object references

46
00:02:25,509 --> 00:02:28,649
are passed as value result. If going across

47
00:02:28,649 --> 00:02:32,513
a network, that is passed as value result meaning

48
00:02:32,513 --> 00:02:38,309
the copy of their object is actually sent over to the invoked method and that

49
00:02:38,309 --> 00:02:44,105
invoked method is seeing the copy of the object and it is even though there is

50
00:02:44,105 --> 00:02:47,333
a reference being given. But the reference

51
00:02:47,333 --> 00:02:50,258
is actually converted into value result in the

52
00:02:50,258 --> 00:02:54,406
parameter passing mechanism for the distributed object model.

53
00:02:54,406 --> 00:02:57,890
So that's a fundamental difference in parameter passing.

54
00:02:57,890 --> 00:03:00,940
So they're both similarities in the sense that you

55
00:03:00,940 --> 00:03:03,510
can pass object references as a parameter. But the

56
00:03:03,510 --> 00:03:06,450
difference is the reference is passed in a value

57
00:03:06,450 --> 00:03:09,620
result mode, as opposed to a pure reference. So, in

58
00:03:09,620 --> 00:03:13,140
other words, once an object reference has been passed

59
00:03:13,140 --> 00:03:15,660
as a parameter to the server. If the client

60
00:03:15,660 --> 00:03:18,910
makes changes to that particular object whose reference is

61
00:03:18,910 --> 00:03:22,950
being given in the invoked method, those changes, the server

62
00:03:22,950 --> 00:03:24,830
will not see it, because that is

63
00:03:24,830 --> 00:03:27,790
local to the client. That's fundamentally different

64
00:03:27,790 --> 00:03:29,710
from between the local object model of

65
00:03:29,710 --> 00:03:32,170
Java and the distributed object model of Java.
