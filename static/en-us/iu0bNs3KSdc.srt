1
00:00:00,000 --> 00:00:03,000
[Norvig] And the answer is that all 3 of them would work just fine.

2
00:00:03,000 --> 00:00:05,000
We could make it work in all cases.

3
00:00:05,000 --> 00:00:07,000
It makes the necessary distinction.

4
00:00:07,000 --> 00:00:13,000
And in each of these cases, the entries in this column

5
00:00:13,000 --> 00:00:16,000
are greater than the entries in this column,

6
00:00:16,000 --> 00:00:18,000
and so max could do the job.

7
00:00:18,000 --> 00:00:24,000
But it seems to me that the case with tuples is the most convenient.

8
00:00:24,000 --> 00:00:29,000
Here with these integers or reals we'd have to be doing very complicated arithmetic

9
00:00:29,000 --> 00:00:34,000
to add things up and then break them apart to make sure we got the right answer.

10
00:00:34,000 --> 00:00:36,000
But with the tuples it's simple.

11
00:00:36,000 --> 00:00:38,000
We just use a comma operator.

12
00:00:38,000 --> 00:00:44,000
We say start with a 7, add in what we have 4 of a kind in,

13
00:00:44,000 --> 00:00:50,000
add in what we have the remaining 1 card of, and that gives you the 3 values,

14
00:00:50,000 --> 00:00:53,000
and we don't have to deal with any complicated arithmetic.

15
00:00:53,000 --> 00:00:59,000
Now, if you aren't familiar with tuples, you might want a little bit of practice

16
00:00:59,000 --> 00:01:02,000
to understand how they work.

17
00:01:02,000 --> 00:01:14,000
We said that 7, 9, 5 is greater than 7, 3, 2.

18
00:01:14,000 --> 00:01:18,000
So in other words, this expression is a true expression in Python.

19
00:01:18,000 --> 00:01:22,000
And the way the evaluation works is you first look at the first element.

20
00:01:22,000 --> 00:01:25,000
If one of them is greater, then that element is greater.

21
00:01:25,000 --> 00:01:28,000
If they're the same, then you go on to the second element.

22
00:01:28,000 --> 00:01:32,000
So in this case, 7 is equal to 7 so we move on.

23
00:01:32,000 --> 00:01:38,000
9 is greater than 3, and so that means this guy is greater than that guy.

24
00:01:38,000 --> 00:01:43,000
You may have seen a similar type of thing in ordering between strings.

25
00:01:43,000 --> 00:01:54,000
So we can have the string 'hello' and compare that to the string 'help',

26
00:01:54,000 --> 00:01:57,000
and we do it in exactly the same way that we compare tuples.

27
00:01:57,000 --> 00:01:59,000
We go left to right.

28
00:01:59,000 --> 00:02:04,000
H compares to h. They're the same, so we move on to the next character.

29
00:02:04,000 --> 00:02:08,000
E compares to e. They're the same, so we move on to the next.

30
00:02:08,000 --> 00:02:11,000
L is equal to l. Move on.

31
00:02:11,000 --> 00:02:17,000
And here we have an l and a p, and p comes later in the alphabet than l,

32
00:02:17,000 --> 00:02:23,000
so help would be greater than hello, or hello would be less than help.

33
00:02:23,000 --> 00:02:30,000
The same type of idea, and this is known as lexigraphic ordering.

34
00:02:30,000 --> 00:02:33,000
It's so called because lex meaning words.

35
00:02:33,000 --> 00:02:36,000
This is the way that words are ordered.

36
00:02:36,000 --> 00:02:39,000
But we use the same name when we're comparing strings

37
00:02:39,000 --> 99:59:59,999
or when we're comparing lists of numbers or lists of any other type of value.
