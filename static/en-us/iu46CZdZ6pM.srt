1
00:00:00,000 --> 00:00:02,530
One of the most powerful 
features of Android,

2
00:00:02,530 --> 00:00:05,550
since the start of the platform 
has been the ability to deliver

3
00:00:05,550 --> 00:00:09,100
timely notifications to users. 
We're going to add a simple

4
00:00:09,100 --> 00:00:12,480
one to our weather app. 
This simple notification will show

5
00:00:12,480 --> 00:00:16,520
the weather icon for the forecast, 
the forecast text,

6
00:00:16,520 --> 00:00:18,960
and the high and low 
temperature for the day.

7
00:00:18,960 --> 00:00:22,620
One of the key things we wanted 
to point out is how not to be spammy

8
00:00:22,620 --> 00:00:25,920
with our notification. 
Our app will display, at most,

9
00:00:25,920 --> 00:00:29,080
a single notification. 
It really wouldn't make sense

10
00:00:29,080 --> 00:00:33,120
if these notifications stacked up anyhow. 
They don't display enough information

11
00:00:33,120 --> 00:00:35,520
to give context. 
The key thing with notifications

12
00:00:35,520 --> 00:00:38,250
is to deliver a useful morsel 
of information,

13
00:00:38,250 --> 00:00:41,010
formatted in a standard way, 
so that it harmonizes

14
00:00:41,010 --> 00:00:44,310
with the rest of the system. 
We'll start by adding a string

15
00:00:44,310 --> 00:00:48,140
for the preference for the last time 
we sent a notification to the user.

16
00:00:48,140 --> 00:00:51,210
As well as a format string 
for the body of the notification.

17
00:00:51,210 --> 00:00:54,610
Let's implement the notification 
inside of our sync adapter.

18
00:00:54,610 --> 00:00:57,480
Our notification will be based upon 
what is in the database.

19
00:00:57,480 --> 00:01:00,100
So, we'll create projection 
and column indices

20
00:01:00,100 --> 00:01:04,110
values in our sync adapter, 
for the weather id.

21
00:01:04,110 --> 00:01:08,210
Description, max and min temperature, 
let's add a function to notify us

22
00:01:08,210 --> 00:01:10,230
of the weather. 
We'll add some additional

23
00:01:10,230 --> 00:01:13,430
constants up here. 
One for day in mili's

24
00:01:13,430 --> 00:01:16,220
and one so that we can use 
the same notification ID.

25
00:01:16,220 --> 00:01:19,330
Reusing the notification ID 
means that our application will only

26
00:01:19,330 --> 00:01:23,260
post at most one notification. 
And then finally, we'll call this function

27
00:01:23,260 --> 00:01:25,750
at a reasonable place 
within our on perform

28
00:01:25,750 --> 00:01:29,730
sync function within our sync adapter. 
Inside of notify weather, we'll check

29
00:01:29,730 --> 00:01:33,081
to see whether or not we've 
actually shown notification that day.

30
00:01:33,081 --> 00:01:36,010
If we haven't, 
then we'll talk to the database.

31
00:01:36,010 --> 00:01:38,850
Get a cursor for the current resolver 
for the current day,

32
00:01:38,850 --> 00:01:41,720
and then fetch the data, 
but one thing we're not doing

33
00:01:41,720 --> 00:01:46,510
is actually showing the notification. 
Now all right, were getting near the end.

34
00:01:46,510 --> 00:01:48,970
Implement a weather notification,

35
00:01:48,970 --> 00:01:53,380
build our notification 
using Notification Compat.builder

36
00:01:53,380 --> 00:01:59,870
pointing to a Pending Intent built 
by the v4 compatible, TaskStackBuilder,

37
00:01:59,870 --> 00:02:05,000
and sent with the NotificationManager. 
Hint: an explicit intent

38
00:02:05,000 --> 00:02:08,210
to our main activity
is a good idea here.

39
00:02:08,210 --> 00:02:11,680
There's lots of documentation 
on this you'll want to read.
