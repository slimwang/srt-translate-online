1
00:00:00,290 --> 00:00:03,060
In this lesson, we've seen that there
are some problems that we can not

2
00:00:03,060 --> 00:00:06,440
compute in a traditional
programming language like Python.

3
00:00:06,440 --> 00:00:09,170
But somehow this feels
a bit unsatisfying,

4
00:00:09,170 --> 00:00:12,160
since all we showed was there
are more problems to solve than there

5
00:00:12,160 --> 00:00:14,140
are computer programs to solve them.

6
00:00:14,140 --> 00:00:17,120
But we haven't actually given
you any specific problem

7
00:00:17,120 --> 00:00:18,510
that can't be solved on a computer.

8
00:00:19,780 --> 00:00:22,680
The set of problems with finite
descriptions accountable, so

9
00:00:22,680 --> 00:00:25,170
at this point we haven't even ruled out

10
00:00:25,170 --> 00:00:28,620
that every problem we can describe
we can solve in a computer.

11
00:00:28,620 --> 00:00:32,200
Turns out this isn't the case,
there's some very natural problems that

12
00:00:32,200 --> 00:00:35,270
cannot be solved by computers,
now or ever.

13
00:00:36,280 --> 00:00:39,020
To get to that point we need more tools.

14
00:00:39,020 --> 00:00:42,900
We need to find some model of
computation simple enough to study yet

15
00:00:42,900 --> 00:00:45,490
powerful enough to capture
everything we mean by computing.

16
00:00:45,490 --> 00:00:48,550
In the next lecture we
do exactly that and

17
00:00:48,550 --> 00:00:50,390
introduce you to
the wonderful Turing machine.
