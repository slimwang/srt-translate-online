1
00:00:00,000 --> 00:00:04,000
The first reason, I think, is that it's because the developers of the commercial software systems

2
00:00:04,000 --> 00:00:08,000
aren't doing it or at least not doing it enough and I think it's pretty clear that the kind of bugs found,

3
00:00:08,000 --> 00:00:12,000
for example, in the fuzzing papers, or in Charlie Miler's talk would'nt have been there in the software

4
00:00:12,000 --> 00:00:15,000
if the developers of Adobe Acrobat or the Unix utilities have

5
00:00:15,000 --> 00:00:19,000
had a reasonably aggressive random testing program, and remember that

6
00:00:19,000 --> 00:00:21,000
some of those bugs Charlie Norris was talking about were secured liabilities.

7
00:00:21,000 --> 00:00:25,000
These are things that they really don't want in their software, and so what I'd argue--

8
00:00:25,000 --> 00:00:30,000
Software development efforts that don't make proper use of random testing are flawed,

9
00:00:30,000 --> 00:00:32,000
and the reason that these efforts are flawed is because

10
00:00:32,000 --> 00:00:34,000
modern software systems are so large and so complicated

11
00:00:34,000 --> 00:00:38,000
that test cases produced by nonrandom processes are simply unlikely to find

12
00:00:38,000 --> 00:00:41,000
the kind of bugs that are lurking in these software systems.

13
00:00:41,000 --> 00:00:44,000
What that leaves us with is a question: what should they have done?

14
00:00:44,000 --> 00:00:47,000
How is random testing supposed to work? Let me give some ideas about that.

15
00:00:47,000 --> 00:00:51,000
What I'm going to do here is show sort of a rough software development timeline

16
00:00:51,000 --> 00:00:55,000
with a releasing software over here and early development stages over here.

17
00:00:55,000 --> 00:00:59,000
What we've looked at mainly so far in this course is random unit testing.

18
00:00:59,000 --> 00:01:04,000
We're developing these software units and what we're trying to do is make sure that they are robust enough.

19
00:01:04,000 --> 00:01:07,000
Then we start composing them together later, they'll be a solid foundation.

20
00:01:07,000 --> 00:01:11,000
We looked at several cases of, for example, with a queue--bounded queue here.

21
00:01:11,000 --> 00:01:13,000
We looked at fuzzing the interfaces that it provides.

22
00:01:13,000 --> 00:01:17,000
We also looked at an example of random fault injection and that was for the read_all function,

23
00:01:17,000 --> 00:01:19,000
and if you remember, that was the function that was supposed

24
00:01:19,000 --> 00:01:25,000
to cope with the fact that the Unix read system call can display partial success.

25
00:01:25,000 --> 00:01:28,000
They were doing fault injections that were fuzzing the interface used

26
00:01:28,000 --> 00:01:31,000
by the read_all call not the interface that it provides.

27
00:01:31,000 --> 00:01:35,000
And so, like I said, what we want to do is ensure as we're developing the modules

28
00:01:35,000 --> 00:01:39,000
that we're creating robust pieces of software whose interfaces we understand

29
00:01:39,000 --> 00:01:41,000
and that are going to be solid foundation for future work,

30
00:01:41,000 --> 00:01:45,000
so I would start developing more elaborate software stacks.

31
00:01:45,000 --> 00:01:47,000
It's going to be the case that some of our random testers become useless.

32
00:01:47,000 --> 00:01:50,000
For example, if we have a Q instantiated here that is used by some

33
00:01:50,000 --> 00:01:55,000
more sophisticated piece of software, we no longer are interested in the ability to randomly test

34
00:01:55,000 --> 00:01:59,000
the interface provided by the Q because it's simply being used by the rest of the software.

35
00:01:59,000 --> 00:02:04,000
On the other hand, other kinds of random testers such as those that come in at the top level

36
00:02:04,000 --> 00:02:08,000
and those that perform system-level fault injection are absolutely still useful.

37
00:02:08,000 --> 00:02:12,000
In fact, fault injection of things like erroneous responses to system calls

38
00:02:12,000 --> 00:02:15,000
are really important things to test larger pieces of software with

39
00:02:15,000 --> 00:02:18,000
because typically, those kind of errors can result in failures propagating

40
00:02:18,000 --> 00:02:21,000
all the way through our software stack and we'd really like to understand

41
00:02:21,000 --> 00:02:23,000
how our system responds to that sort of thing.

42
00:02:23,000 --> 00:02:25,000
To be part of something that's more of a complete product

43
00:02:25,000 --> 00:02:28,000
our focus should be on external interfaces provided, so this is going to be things like

44
00:02:28,000 --> 00:02:34,000
file I/O and the graphical user interface, and so, if you recall those fuzzing papers,

45
00:02:34,000 --> 00:02:36,000
we're fuzzing exactly these sorts of things.

46
00:02:36,000 --> 00:02:39,000
Here, we're delivering random bits to the file interface and they were delivering

47
00:02:39,000 --> 00:02:42,000
random gooey events to applications and knocking over

48
00:02:42,000 --> 00:02:44,000
a pretty large proportion of applications that they tested.
