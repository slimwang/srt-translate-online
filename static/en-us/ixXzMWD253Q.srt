1
00:00:00,180 --> 00:00:02,840
The first point we need to consider is for

2
00:00:02,840 --> 00:00:06,850
store instructions, when does the memory write actually happen?

3
00:00:06,850 --> 00:00:09,980
And it happens at commit. We have to do

4
00:00:09,980 --> 00:00:13,510
writes to memory at commit because it is unsafe

5
00:00:13,510 --> 00:00:16,090
to update memory at any point before the instruction

6
00:00:16,090 --> 00:00:18,910
commits. Any instruction that has not yet committed is

7
00:00:18,910 --> 00:00:21,242
subject to being canceled. For example, because of a

8
00:00:21,242 --> 00:00:25,440
branch misprediction or exception. So doing a memory write prematurely

9
00:00:25,440 --> 00:00:28,024
might mean that later we have to undo access to

10
00:00:28,024 --> 00:00:30,676
memory, meaning we have to kind of put back the

11
00:00:30,676 --> 00:00:34,076
old value of a memory location which is extremely difficult

12
00:00:34,076 --> 00:00:37,770
to do. So what we will do is we will delay

13
00:00:37,770 --> 00:00:42,220
memory writes and restores untill commit. But does it mean

14
00:00:42,220 --> 00:00:44,570
that the load has to also wait until commit before it

15
00:00:44,570 --> 00:00:46,700
can get data, because only then the data is in

16
00:00:46,700 --> 00:00:50,600
memory? So the question is, if we write values on stores

17
00:00:50,600 --> 00:00:53,190
at commit, where does the load get data? And

18
00:00:53,190 --> 00:00:55,250
we want our loads to get data as early

19
00:00:55,250 --> 00:00:57,920
as possible, so that we can finish those loads

20
00:00:57,920 --> 00:01:00,370
and supply that data to the subsequent instructions that

21
00:01:00,370 --> 00:01:03,090
depend on the load. For this purpose, we introduce

22
00:01:03,090 --> 00:01:06,070
a structure called load-store queue. And that is where

23
00:01:06,070 --> 00:01:08,350
we will keep all loads and stores, and we

24
00:01:08,350 --> 00:01:11,320
will next see how loads get data from the stores.
