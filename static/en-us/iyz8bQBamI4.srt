1
00:00:00,220 --> 00:00:03,020
Now let's look at some frequent problems that come up

2
00:00:03,020 --> 00:00:05,370
when writing multi-threaded applications.

3
00:00:05,370 --> 00:00:08,710
First, make sure to keep track of the mutex and

4
00:00:08,710 --> 00:00:12,930
condition variables that are specifically used with a given shared resource.

5
00:00:12,930 --> 00:00:14,520
What that means, for instance,

6
00:00:14,520 --> 00:00:20,260
is that when defining these variables make sure to write immediately a comment,

7
00:00:20,260 --> 00:00:25,150
which shared resource, which operation, which other piece of shared state,

8
00:00:25,150 --> 00:00:28,790
do you want this synchronization variable to be used with.

9
00:00:28,790 --> 00:00:32,860
For instance, you're creating a mutex m1 and

10
00:00:32,860 --> 00:00:37,710
you want to use it to protect the state of a file, file 1.

11
00:00:37,710 --> 00:00:40,750
Next, make sure that if a variable or

12
00:00:40,750 --> 00:00:46,130
a piece of code is protected with a mutex in one portion of your code,

13
00:00:46,130 --> 00:00:51,180
that you're always consistently protecting that same variable, or

14
00:00:51,180 --> 00:00:56,530
that same type of operation with the same mutex everywhere else in your count.

15
00:00:56,530 --> 00:01:00,160
Basically, a common mistake is that sometimes we

16
00:01:00,160 --> 00:01:04,300
simply forget to use the lock/unlock construct.

17
00:01:04,300 --> 00:01:08,580
And therefore, sometimes access the variable in a safe way.

18
00:01:08,580 --> 00:01:10,410
And if we don't use the lock and

19
00:01:10,410 --> 00:01:13,980
unlock, then it won't be accessed in a safe way period.

20
00:01:13,980 --> 00:01:18,150
Some compilers will sometimes generate warnings or, or

21
00:01:18,150 --> 00:01:23,250
even errors, to tell us that there is a potentially dangerous situation, where

22
00:01:23,250 --> 00:01:28,720
shared variable is and isn't used with a mutex in different places in the code.

23
00:01:28,720 --> 00:01:31,750
Or, maybe they will generate a warning to tell us that there is

24
00:01:31,750 --> 00:01:36,110
a lock construct that's not followed by the appropriate unlock construct.

25
00:01:36,110 --> 00:01:42,530
So certainly you can rely on compilers and tools to help avoid mistakes but

26
00:01:42,530 --> 00:01:45,470
it's just easier not to make them in the first place.

27
00:01:45,470 --> 00:01:50,740
Another common mistakes that's just as bad as not locking a resource,

28
00:01:50,740 --> 00:01:54,670
is to use different mutexes for a single resource.

29
00:01:54,670 --> 00:01:59,580
So, some threads read the same file by locking mutex m1,

30
00:01:59,580 --> 00:02:03,940
and other threads write to the same file by locking mutex m2.

31
00:02:03,940 --> 00:02:08,320
At the same time, different threads can hold different mutexes and

32
00:02:08,320 --> 00:02:11,890
they can perform concurrently operations on this file,

33
00:02:11,890 --> 00:02:14,690
which is not what we want to be happening.

34
00:02:14,690 --> 00:02:18,630
So this scenario can lead to these undesirable situation, actually

35
00:02:18,630 --> 00:02:23,980
dangerous situations where different types of accesses happen concurrently.

36
00:02:23,980 --> 00:02:27,740
Also it's important to make sure that when you're using a signal or

37
00:02:27,740 --> 00:02:32,090
a broadcast you're actually signaling the correct condition.

38
00:02:32,090 --> 00:02:35,520
That's the only way that you can make sure that the correct set of

39
00:02:35,520 --> 00:02:39,190
threads are potentially going to be notified.

40
00:02:39,190 --> 00:02:43,650
Again, using comments when you are declaring these conditions can be helpful.

41
00:02:43,650 --> 00:02:46,850
Also make sure that you're not using signal when you

42
00:02:46,850 --> 00:02:49,140
actually need to use broadcast.

43
00:02:49,140 --> 00:02:51,390
Note that the opposite is actually safe.

44
00:02:51,390 --> 00:02:55,750
If you need to use signal but use broadcast, that's fine.

45
00:02:55,750 --> 00:03:00,190
You will still end up waking up one thread or more.

46
00:03:00,190 --> 00:03:03,500
And you will not affect the correctness of the program.

47
00:03:03,500 --> 00:03:05,870
You may just end up affecting its performance.

48
00:03:05,870 --> 00:03:07,630
But that's not as dangerous.

49
00:03:07,630 --> 00:03:13,080
Remember that with a signal only one thread will be woken up to proceed.

50
00:03:13,080 --> 00:03:15,950
And if, when the condition occurred we had

51
00:03:15,950 --> 00:03:18,870
more than one thread waiting on the condition.

52
00:03:18,870 --> 00:03:21,220
The remaining threads will continue to wait.

53
00:03:21,220 --> 00:03:24,680
And in fact they may continue to wait possibly indefinitely.

54
00:03:24,680 --> 00:03:28,960
Using a signal instead of a broadcast can also possibly cause deadlocks.

55
00:03:28,960 --> 00:03:30,610
And we'll talk about that shortly.

56
00:03:30,610 --> 00:03:35,130
You also have to remember that the use of signal or broadcast or

57
00:03:35,130 --> 00:03:37,680
rather, the order of signal or broadcast.

58
00:03:37,680 --> 00:03:40,390
Doesn't do anything about making any kind of

59
00:03:40,390 --> 00:03:45,970
priority guarantees as far as which one of the threads will execute next.

60
00:03:45,970 --> 00:03:48,810
As we explained in the previous example,

61
00:03:48,810 --> 00:03:53,740
the execution of the threads is not directly controlled by

62
00:03:53,740 --> 00:03:58,050
the order in which we issue signals to a condition variables.

63
00:03:58,050 --> 00:04:02,950
Two other common pitfalls spurious wake ups and dead locks,

64
00:04:02,950 --> 00:04:07,560
deserve special attention and we will discuss these two in more detail next.
