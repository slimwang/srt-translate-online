1
00:00:00,520 --> 00:00:03,700
Now we know that we can refer to
XML resources in the Java code.

2
00:00:04,710 --> 00:00:08,680
But what exactly is the relationship
between the resources and the Java code?

3
00:00:08,680 --> 00:00:11,380
How do they come together as
part of a full app experience?

4
00:00:12,460 --> 00:00:15,215
Let's start at the point when you
click on the JustJava app icon.

5
00:00:16,335 --> 00:00:18,615
It opens up the Main Activity.

6
00:00:18,615 --> 00:00:21,925
Now you don't see anything yet
because it's still being initialized.

7
00:00:21,925 --> 00:00:25,835
Thankfully, a lot of the complexity
involved in initializing the activity is

8
00:00:25,835 --> 00:00:28,565
handled automatically for
you by Android.

9
00:00:28,565 --> 00:00:31,995
The important part that we care about
is that in the Main Activity file,

10
00:00:31,995 --> 00:00:34,875
the onCreate method gets
called automatically.

11
00:00:34,875 --> 00:00:37,590
This is when the activity
is getting created.

12
00:00:37,590 --> 00:00:40,580
There's a bunch of work and
then we have an important line that says

13
00:00:40,580 --> 00:00:45,120
setContentView and then the resource
ID for the layout file.

14
00:00:45,120 --> 00:00:47,640
It's R.layout.activity_main.

15
00:00:47,640 --> 00:00:52,280
This means that the content view of
the activity should be set to the layout

16
00:00:52,280 --> 00:00:55,720
as specified in
the activity main XML file.

17
00:00:55,720 --> 00:00:59,700
This is the method call and
the input parameter is this resource ID.

18
00:00:59,700 --> 00:01:02,600
Once you set the lay out that you're
going to use for the content view,

19
00:01:02,600 --> 00:01:07,660
then the android device can go ahead and
start parsing this XML layout file.

20
00:01:07,660 --> 00:01:09,410
Parsing is like reading this file and

21
00:01:09,410 --> 00:01:12,490
trying to interpret that like
oh this is a linear layout.

22
00:01:12,490 --> 00:01:13,570
Oh this is a text view.

23
00:01:13,570 --> 00:01:15,270
These are the attributes, and so on.

24
00:01:15,270 --> 00:01:18,850
So it's trying to understand
what this file contains.

25
00:01:18,850 --> 00:01:21,960
The Android device starts by
reading at the top of the file.

26
00:01:21,960 --> 00:01:24,670
It recognizes that there's
a linear layout here.

27
00:01:24,670 --> 00:01:29,170
Then it inflates a Java object
to represent that linear layout.

28
00:01:29,170 --> 00:01:30,570
Then it goes to the next line and

29
00:01:30,570 --> 00:01:36,120
sees that we need to add a TextView as a
child to that linear layout, like that.

30
00:01:36,120 --> 00:01:39,865
This is starting to look like
the view hierarchy from lesson two.

31
00:01:39,865 --> 00:01:43,125
What I didn't tell you earlier is
that this is actually a hierarchy

32
00:01:43,125 --> 00:01:45,265
of Java objects.

33
00:01:45,265 --> 00:01:47,975
We're going to be learning more about
Java objects in the coming videos so

34
00:01:47,975 --> 00:01:50,515
it's okay if you don't
fully understand it yet.

35
00:01:50,515 --> 00:01:53,085
When we get to the next line
we see that we need to inflate

36
00:01:53,085 --> 00:01:55,385
a linear layout Java object.

37
00:01:55,385 --> 00:01:58,855
That gets added as a child
to this root LinearLayout.

38
00:01:58,855 --> 00:02:00,480
Then we see a Button element.

39
00:02:00,480 --> 00:02:03,300
So we add that as a child
to the LinearLayout.

40
00:02:03,300 --> 00:02:07,470
So we continue down the file until we've
inflated all the views that we need for

41
00:02:07,470 --> 00:02:09,280
our view hierarchy.

42
00:02:09,280 --> 00:02:13,740
Once we have this view hierarchy of Java
objects, then we can manipulate them and

43
00:02:13,740 --> 00:02:15,470
change them while the app is running.

44
00:02:16,570 --> 00:02:19,930
An object like the TextView here
contains state information.

45
00:02:19,930 --> 00:02:23,070
Like the text, the text color,
the text size.

46
00:02:23,070 --> 00:02:26,880
The object also has methods so
we can call those methods and

47
00:02:26,880 --> 00:02:29,130
change their internal state.

48
00:02:29,130 --> 00:02:31,670
So for example, we can change
the text while the app is running.

49
00:02:32,690 --> 00:02:36,700
Interacting with all these objects is
called object oriented programming.

50
00:02:36,700 --> 00:02:40,220
We will cover this in more
detail in the coming videos.

51
00:02:40,220 --> 00:02:44,230
So to summarize, in the main activity
when we call setContentView to this

52
00:02:44,230 --> 00:02:49,440
layout, then we read this layout and
then inflate a bunch of Java objects.

53
00:02:49,440 --> 00:02:53,590
These Java objects make up
the view hierarchy of the app.

54
00:02:53,590 --> 00:02:56,920
The MainActivity holds on to
this view hierarchy, and then

55
00:02:56,920 --> 00:03:00,400
as you interact with the MainActivity,
it can update these objects.
