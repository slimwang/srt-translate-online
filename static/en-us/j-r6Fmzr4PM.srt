1
00:00:00,220 --> 00:00:04,740
There's one last set of concepts I'd
like to cover before we move into some

2
00:00:04,740 --> 00:00:07,160
actual programming and this is ACID.

3
00:00:07,160 --> 00:00:11,880
Now again, like many of the concepts
in this lecture this is a very,

4
00:00:11,880 --> 00:00:14,850
very broad topic and we're just
barely going to scratch the surface.

5
00:00:14,850 --> 00:00:17,620
But I want you to be familiar with these
concepts because this is the type of

6
00:00:17,620 --> 00:00:19,610
language we'll be using when
we're building our system.

7
00:00:19,610 --> 00:00:25,020
So, ACID, this stands for,
A for atomicity,

8
00:00:25,020 --> 00:00:30,020
C for consistency, I for
isolation, and D for durability.

9
00:00:30,020 --> 00:00:33,710
Atomicity refers to the notion that
all parts of a transaction succeed or

10
00:00:33,710 --> 00:00:36,770
fail together, Now,
we haven't talked about transactions.

11
00:00:36,770 --> 00:00:40,240
But these are basically
just a group of statements.

12
00:00:40,240 --> 00:00:43,740
So if we were updating our database
which is actually not something

13
00:00:43,740 --> 00:00:45,600
we spent much time on.

14
00:00:45,600 --> 00:00:49,320
There maybe the case where
updating two tables at once or

15
00:00:49,320 --> 00:00:53,570
updating multiple rows in our database
together, in one cohesive unit.

16
00:00:53,570 --> 00:00:54,840
For example, if for

17
00:00:54,840 --> 00:00:58,610
working from the written example if we
had a link table and user's table and

18
00:00:58,610 --> 00:01:03,070
somebody upvoted on the link and
that increases the user's reputation.

19
00:01:03,070 --> 00:01:05,319
In that increase
the score of the link and

20
00:01:05,319 --> 00:01:07,960
also increase
the reputation of the user.

21
00:01:07,960 --> 00:01:10,020
And those would happen in something
that's called a transaction,

22
00:01:10,020 --> 00:01:13,400
which groups together multiple commands.

23
00:01:13,400 --> 00:01:16,310
Atomicity refers to the notion
that either all of those commands

24
00:01:16,310 --> 00:01:18,300
are going to succeed, or
they're all going to fail.

25
00:01:18,300 --> 00:01:20,040
But we don't do part of it.

26
00:01:20,040 --> 00:01:22,700
We don't have just updating the link and

27
00:01:22,700 --> 00:01:25,160
not updating the user,
everything happens together.

28
00:01:25,160 --> 00:01:28,060
So this is a nice property for
a database to have.

29
00:01:28,060 --> 00:01:33,260
Consistency refers to the notion that
the database will always be consistent.

30
00:01:33,260 --> 00:01:34,460
And to work from our Reddit example,

31
00:01:34,460 --> 00:01:39,590
let's talk about this idea where we have
a link and a user who have properties.

32
00:01:39,590 --> 00:01:45,140
If we have this notion that
a link has a score that gets

33
00:01:45,140 --> 00:01:48,870
updated periodically, and the author or
the submitter of that link

34
00:01:48,870 --> 00:01:52,780
also has a karma score that also
gets updated at the same time.

35
00:01:52,780 --> 00:01:56,480
Consistency refers to the notion
that both the score and

36
00:01:56,480 --> 00:01:59,390
the karma will be consistent
with one another, so

37
00:01:59,390 --> 00:02:03,920
that we don't update the score
without also updating the karma.

38
00:02:03,920 --> 00:02:07,220
Basically means the database will move
from one valid transaction to the next

39
00:02:07,220 --> 00:02:12,020
so we'll never run a query that
gets a link's updated score but

40
00:02:12,020 --> 00:02:15,290
can't also get the user's updated karma.

41
00:02:15,290 --> 00:02:18,280
So isolation refers to the notion
that no transaction can interfere

42
00:02:18,280 --> 00:02:19,420
with another.

43
00:02:19,420 --> 00:02:22,668
So let's say we a link
that is both getting,

44
00:02:22,668 --> 00:02:27,450
two votes coming at the same time
to increase the score of this link.

45
00:02:27,450 --> 00:02:31,290
That means we're going to be updating
the link score up and down, and

46
00:02:31,290 --> 00:02:33,280
the user's karma up and down.

47
00:02:33,280 --> 00:02:36,270
And isolation refers to
the notion that this

48
00:02:36,270 --> 00:02:40,030
upvote won't affect
the computation of this downvote.

49
00:02:40,030 --> 00:02:43,230
If we were overriding this
link in our database,

50
00:02:43,230 --> 00:02:46,930
it would be a shame if that downvote was
applied to the original link's score

51
00:02:46,930 --> 00:02:48,800
before the upvote was applied.

52
00:02:48,800 --> 00:02:50,980
Because the net score change
in here should be zero, but

53
00:02:50,980 --> 00:02:54,110
it could be negative one if
these aren't handled properly.

54
00:02:54,110 --> 00:02:58,280
So, isolation refers the notion
that each transaction cannot affect

55
00:02:58,280 --> 00:02:59,820
other transactions.

56
00:02:59,820 --> 00:03:02,080
Sometimes this is
accomplished through locking.

57
00:03:02,080 --> 00:03:05,520
If two transactions affect the same row,
only one can go at a time,

58
00:03:05,520 --> 00:03:09,530
and there are other ways of resolving
transaction and conflicts like that.

59
00:03:09,530 --> 00:03:12,410
Isolation refers to a database's
ability to do that.

60
00:03:12,410 --> 00:03:13,730
Finally, we have durability.

61
00:03:13,730 --> 00:03:16,928
Durability refers to notion that
once a transaction is committed it

62
00:03:16,928 --> 00:03:18,310
won't be lost.

63
00:03:18,310 --> 00:03:22,040
This means that for example if we
send an update to our database and

64
00:03:22,040 --> 00:03:26,640
we update some rows and
the database says okay successful.

65
00:03:26,640 --> 00:03:30,180
That even if the database
is turned off or crashes or

66
00:03:30,180 --> 00:03:32,080
is unplugged we won't lose that data.

67
00:03:33,260 --> 00:03:35,144
That is durability.

68
00:03:35,144 --> 00:03:39,800
One thing, I'd like you to know, I know
we introduced a lot of new concepts

69
00:03:39,800 --> 00:03:44,640
in this portion here, but
the important takeaway from this,

70
00:03:44,640 --> 00:03:47,770
is that when you're talking about
different database systems,

71
00:03:47,770 --> 00:03:49,000
that you have different trade offs.

72
00:03:49,000 --> 00:03:52,420
It's hard to be fully, have
a database that's completely atomic,

73
00:03:52,420 --> 00:03:54,490
that's completely consistent.

74
00:03:54,490 --> 00:03:56,730
All transactions are isolated and
is completely durable.

75
00:03:56,730 --> 00:03:59,054
There is always some trade-offs.
