1
00:00:00,000 --> 00:00:05,000
To implement the function C, I have to tell you about a new tool called a generator function,

2
00:00:05,000 --> 00:00:09,000
which is almost the same as a generator expression, and we'll show you what it looks like.

3
00:00:09,000 --> 00:00:16,000
I'm going to define a function to iterate over the integers from some start to some end.

4
00:00:16,000 --> 00:00:18,000
This is going to be just like range.

5
00:00:18,000 --> 00:00:21,000
Range is a great function, but sometimes it's annoying, because you really don't want

6
00:00:21,000 --> 00:00:24,000
to 1 less than the end. You want to go up all the way to the end.

7
00:00:24,000 --> 00:00:28,000
That's what ints is going to do. I'm going to implement it as a generator function.

8
00:00:28,000 --> 00:00:32,000
I'm going to start off with an integer I that starts at start number that you told me.

9
00:00:32,000 --> 00:00:35,000
Then while i is less than or equal to the end

10
00:00:35,000 --> 00:00:39,000
I'm going to introduce a new type of statement here called yield,

11
00:00:39,000 --> 00:00:43,000
and I say yield i, and then I'll say i equals i plus 1.

12
00:00:43,000 --> 00:00:47,000
Now, the yield is something new, and it makes this definition a generator function

13
00:00:47,000 --> 00:00:49,000
rather than a regular function.

14
00:00:49,000 --> 00:00:53,000
What that means is what's going to happen is it's going to execute.

15
00:00:53,000 --> 00:00:59,000
As soon as it sees this yield statement, it's going to generate that value i

16
00:00:59,000 --> 00:01:03,000
but keep it's place and when asked for the next, it will continue

17
00:01:03,000 --> 00:01:06,000
incrementing i and then continuing through the loop.

18
00:01:06,000 --> 00:01:15,000
When we call this function, if we say L equals the integers from 0 to 1 million,

19
00:01:15,000 --> 00:01:17,000
now L won't be a list right away.

20
00:01:17,000 --> 00:01:19,000
It'll be a generator.

21
00:01:19,000 --> 00:01:24,000
Now L is equal to this generator, some funny object.

22
00:01:24,000 --> 00:01:30,000
Then you call next of L to get the next object, and you keep on going through.

23
00:01:30,000 --> 00:01:36,000
More commonly, instead of calling next explicitly, you'd say for i in L.

24
00:01:36,000 --> 00:01:42,000
And so generators obey this iteration protocol just like other types of sequences.

25
00:01:42,000 --> 00:01:47,000
The great thing is we can yield from anywhere inside this function.

26
00:01:47,000 --> 00:01:52,000
We get a very complicated logic here and then yield a partial result

27
00:01:52,000 --> 00:01:56,000
and then continue getting the next result right where we are.

28
00:01:56,000 --> 00:02:00,000
This is a convenient feature for writing functions.

29
00:02:00,000 --> 00:02:05,000
Another great thing about generator functions is it allows us to deal with infinite sequences.

30
00:02:05,000 --> 00:02:09,000
Let's say we wanted to allow the possibility of an open ended interval of integers.

31
00:02:09,000 --> 00:02:14,000
We'll make end be an optional argument, which can be None.

32
00:02:14,000 --> 00:02:22,000
The idea is that if we have a call, say ints, starting at zero, but I don't give it a end,

33
00:02:22,000 --> 00:02:28,000
then that means all the non-negative integers--0, 1, 2, 3, going on forever and never stopping.

34
00:02:28,000 --> 00:02:33,000
The question for you is how would you modify generator function in order

35
00:02:33,000 --> 00:02:38,000
to make it obey this idea of never stopping when end is equal to None.

36
00:02:38,000 --> 00:02:43,000
You should be able to modify just this line here to make it obey this idea

37
00:02:43,000 --> 99:59:59,999
that it should keep on going forever when end is None.
