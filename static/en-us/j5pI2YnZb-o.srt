1
00:00:00,310 --> 00:00:02,390
I'm going to show you how to run background tasks

2
00:00:02,390 --> 00:00:07,010
in App Engine applications using queues. When a conference is

3
00:00:07,010 --> 00:00:09,740
created, you can imagine that there might be a variety

4
00:00:09,740 --> 00:00:12,700
of tasks that need to be executed. Such as starting

5
00:00:12,700 --> 00:00:15,370
the process to book the venue, creating the agenda, organizing

6
00:00:15,370 --> 00:00:19,090
the catering. And sending a confirmation email to the organizer.

7
00:00:19,090 --> 00:00:20,920
You'd want to do all of these tasks in the

8
00:00:20,920 --> 00:00:22,750
background rather than trying to

9
00:00:22,750 --> 00:00:25,340
complete everything before the create conference

10
00:00:25,340 --> 00:00:28,980
function returns. In this exercise we're going to use

11
00:00:28,980 --> 00:00:32,430
the default task queue to send a confirmation email, like

12
00:00:32,430 --> 00:00:36,570
this one. When someone creates a conference. The learning

13
00:00:36,570 --> 00:00:39,450
goal is to understand how to use task cues. But

14
00:00:39,450 --> 00:00:41,530
you can understand that there are many other tasks

15
00:00:41,530 --> 00:00:44,230
that needed to be completed, when a new conference is

16
00:00:44,230 --> 00:00:48,110
created. To execute a task in the background using the

17
00:00:48,110 --> 00:00:51,280
task cue. The first thing you need to do is

18
00:00:51,280 --> 00:00:53,810
to find the work to be done. It's up to you

19
00:00:53,810 --> 00:00:56,760
to write the code to execute the task. This can be in

20
00:00:56,760 --> 00:00:59,780
a servlet or in an endpoints function. It just needs to

21
00:00:59,780 --> 00:01:03,580
be somewhere that can be accessed by a URL. Another thing you're

22
00:01:03,580 --> 00:01:05,860
going to need to do is to configure the queue. And

23
00:01:05,860 --> 00:01:09,810
you do that in queue.xml. If you're using the default queue, you

24
00:01:09,810 --> 00:01:13,010
actually don't have to do any configuration. But if you're using

25
00:01:13,010 --> 00:01:16,500
anything other than all the defaults, you're going to need to configure

26
00:01:16,500 --> 00:01:20,230
your queue in queue.xml. So here's an example of

27
00:01:20,230 --> 00:01:24,790
the content of queue.xml. You have the queue-entries element, that

28
00:01:24,790 --> 00:01:28,260
contains. A queue element for every queue that you want

29
00:01:28,260 --> 00:01:31,690
to configure. Specify the name of the queue and the

30
00:01:31,690 --> 00:01:33,980
rate that it operates at. And there's a bunch

31
00:01:33,980 --> 00:01:36,900
of other parameters you can specify as well. And then

32
00:01:36,900 --> 00:01:39,290
you're going to need to write the code to add the

33
00:01:39,290 --> 00:01:41,790
task to the queue. You need to start by getting

34
00:01:41,790 --> 00:01:44,500
the queue. And you use the QueueFactory to

35
00:01:44,500 --> 00:01:46,800
get a queue. If you want the default queue,

36
00:01:46,800 --> 00:01:49,720
then you just call getDefaultQueue on it. If you've

37
00:01:49,720 --> 00:01:52,360
configured a queue in queue.xml and you want to

38
00:01:52,360 --> 00:01:55,360
use that queue. Then you call the getQueue

39
00:01:55,360 --> 00:01:59,630
method on QueueFactory and passing the queueName. Where the

40
00:01:59,630 --> 00:02:03,580
queueName is a name from q.xml. Many need to

41
00:02:03,580 --> 00:02:06,900
specify the options for the tasks. The options include

42
00:02:06,900 --> 00:02:08,919
the parameters for the task and the URL

43
00:02:08,919 --> 00:02:11,640
that's going to execute the task. And the easiest

44
00:02:11,640 --> 00:02:14,330
way to build up the task options, is to

45
00:02:14,330 --> 00:02:18,680
use TaskOptions.Builder. You must provide the URL that's going to

46
00:02:18,680 --> 00:02:22,280
execute the task. When you use TaskOptions.Builder you just

47
00:02:22,280 --> 00:02:26,120
call the withURL method and you pass the URL.

48
00:02:26,120 --> 00:02:29,360
That's going to execute the task. Then to add params

49
00:02:29,360 --> 00:02:32,790
to the task and just call the .param method.

50
00:02:32,790 --> 00:02:34,650
I'm passing the params you can have as many

51
00:02:34,650 --> 00:02:37,870
as you want here I've just got two. If your

52
00:02:37,870 --> 00:02:40,100
task doesn't have any params and obviously you don't

53
00:02:40,100 --> 00:02:42,642
need to do that. You can write the code that

54
00:02:42,642 --> 00:02:46,746
adds the task to the queue, inside of the transaction if you want. And to do

55
00:02:46,746 --> 00:02:52,991
that, you specify the transaction as a very first argument to queue.add.

56
00:02:52,991 --> 00:02:59,079
When you're using objectify. You can just call the ofy.getTransaction

57
00:02:59,079 --> 00:03:02,800
method to get the current transaction. It's important to

58
00:03:02,800 --> 00:03:05,310
understand that you can put the task on the queue

59
00:03:05,310 --> 00:03:08,200
during the transaction. So the task only gets put on

60
00:03:08,200 --> 00:03:11,470
the queue if the transaction is committed. But the execution

61
00:03:11,470 --> 00:03:15,310
of the task takes places outside the transaction. The task

62
00:03:15,310 --> 00:03:18,170
going to be executed whenever the task gets to the

63
00:03:18,170 --> 00:03:20,840
top of the queue, whenever that happens to be. So

64
00:03:20,840 --> 00:03:23,890
long of course, that the transaction has already been committed.

65
00:03:25,220 --> 00:03:27,000
So let's take a look at the send

66
00:03:27,000 --> 00:03:30,790
confirmation email servlet. This servlet has a doPost method

67
00:03:30,790 --> 00:03:35,140
that sends an email whenever anybody creates a conference.

68
00:03:35,140 --> 00:03:37,340
We're implementing as a servlet rather than as an

69
00:03:37,340 --> 00:03:40,320
endpoint function. Because this functionality needs to be

70
00:03:40,320 --> 00:03:43,810
completely internal to the application. We absolutely don't want

71
00:03:43,810 --> 00:03:46,540
anybody else to trigger the sending of these emails.

72
00:03:47,650 --> 00:03:50,270
We've written this servlet for you. You can find

73
00:03:50,270 --> 00:03:53,100
the servlet in the lesson five folder if you want to.

74
00:03:53,100 --> 00:03:56,460
We've already defined it for you completely because our goal here is

75
00:03:56,460 --> 00:03:59,410
not to teach you how to use email but to, how

76
00:03:59,410 --> 00:04:02,490
to add a task to a task queue. However if you prefer

77
00:04:02,490 --> 00:04:05,930
you can write it from scratch yourself. And actually I do

78
00:04:05,930 --> 00:04:08,540
recommend that you read through this code because it does help you

79
00:04:08,540 --> 00:04:11,200
learn how to send emails from App Engine. Which is a cool

80
00:04:11,200 --> 00:04:15,197
thing to know how to do. So, basically what we do is,

81
00:04:15,197 --> 00:04:18,447
we get the email out of the request. We get

82
00:04:18,447 --> 00:04:21,841
the information about the conference out of the request. Then

83
00:04:21,841 --> 00:04:24,020
we create the body for the email, and include the

84
00:04:24,020 --> 00:04:27,400
information about the conference that just got created. We set

85
00:04:27,400 --> 00:04:30,517
the from field, we add the recipient, we set the

86
00:04:30,517 --> 00:04:33,404
subject, we set the text. And then here we send

87
00:04:33,404 --> 00:04:36,135
the email, and then we catch the exception in the

88
00:04:36,135 --> 00:04:40,210
case email didn't get sent. One thing to be aware of

89
00:04:40,210 --> 00:04:42,340
it is there errors in your code and the email

90
00:04:42,340 --> 00:04:45,690
doesn't get sent, your going to get an error in the last.

91
00:04:45,690 --> 00:04:49,080
However if the email doesn't get sent because you have exceeded

92
00:04:49,080 --> 00:04:51,870
your email closure for the day you not going to get an

93
00:04:51,870 --> 00:04:55,700
error here. So if you're email doesn't get sent, you might

94
00:04:55,700 --> 00:04:59,220
want to come and check your quota for sending emails. And you

95
00:04:59,220 --> 00:05:02,200
can see the quota page shows you exactly how many emails

96
00:05:02,200 --> 00:05:05,440
you've sent. Oh good, I've only sent one so far today.

97
00:05:05,440 --> 00:05:08,880
So, you can add the same confirmation email servlet as a

98
00:05:08,880 --> 00:05:11,780
done deal if you want. But then you do need to

99
00:05:11,780 --> 00:05:15,530
write the code to schedule the task, to add the task

100
00:05:15,530 --> 00:05:17,800
to the task queue. And to do that, you're going to

101
00:05:17,800 --> 00:05:21,540
need to update the createConference function, to add the send confirmation

102
00:05:21,540 --> 00:05:24,190
email task to the default task queue. And you're going to be

103
00:05:24,190 --> 00:05:27,690
doing that yourself. First though, I want to show you that

104
00:05:27,690 --> 00:05:31,540
you can use the admin console. To explore your task queues.

105
00:05:31,540 --> 00:05:33,550
So here in the task queues page you see the

106
00:05:33,550 --> 00:05:36,560
quota of your task queues. Iâve had one API call

107
00:05:36,560 --> 00:05:38,770
go out for task queues so far. And you can

108
00:05:38,770 --> 00:05:41,780
see the individual queues get listed. Iâm only using the default

109
00:05:41,780 --> 00:05:45,780
queue. So, we only see the default queue here. So

110
00:05:45,780 --> 00:05:48,780
I drill down into it and I have nothing in my

111
00:05:48,780 --> 00:05:51,590
queue. So we go to my application though and create

112
00:05:51,590 --> 00:05:56,770
a conference. See here, Iâve created this conference task queues everybody.

113
00:05:56,770 --> 00:05:59,120
Now very quickly, I'm going to go to the Admin

114
00:05:59,120 --> 00:06:03,560
console, and update my Task Queues page. Okay, I wasn't quick

115
00:06:03,560 --> 00:06:05,660
enough to see it running. You can see that one

116
00:06:05,660 --> 00:06:09,190
task ran in the last minute. If I check my email,

117
00:06:09,190 --> 00:06:11,860
I see that I've got an email confirming the conference

118
00:06:11,860 --> 00:06:14,800
I just created. So we see that my task ran, and

119
00:06:14,800 --> 00:06:17,840
it ran successfully. But I wonder what happens if the

120
00:06:17,840 --> 00:06:22,320
task isn't successful. So over here in the create conference function

121
00:06:22,320 --> 00:06:25,340
in conference API, this is the code where I

122
00:06:25,340 --> 00:06:29,000
add the task to the queue. What I'm going to do

123
00:06:29,000 --> 00:06:32,670
now is, I'm going to change the URL for the task

124
00:06:32,670 --> 00:06:36,280
to be a non existent URL. So, I've redeployed my

125
00:06:36,280 --> 00:06:38,890
app. It has an incorrect URL for the task

126
00:06:38,890 --> 00:06:41,780
that's going to be executed when I create a conference. So

127
00:06:41,780 --> 00:06:45,750
let's just see. Okay, my conference got created. Now let's

128
00:06:45,750 --> 00:06:48,120
go look at the task queues in the admin console.

129
00:06:48,120 --> 00:06:50,060
So now let's see what happens when I refresh the

130
00:06:50,060 --> 00:06:54,170
task queues viewer in the admin console. Okay. So now

131
00:06:54,170 --> 00:06:56,790
looking down into the default queue I see there's one

132
00:06:56,790 --> 00:06:58,920
task in the queue, two were run in the last

133
00:06:58,920 --> 00:07:04,260
minute. It's running five per second. Scroll down, see over

134
00:07:04,260 --> 00:07:07,010
here there has been three retries so far. We are

135
00:07:07,010 --> 00:07:09,800
going to leave that running just for a little bit.

136
00:07:09,800 --> 00:07:13,867
So far we have had nine retries, that's probably enough.

137
00:07:13,867 --> 00:07:15,704
So I am going to purge the queue, to get the

138
00:07:15,704 --> 00:07:18,410
task off the queue, because it is never going to complete.

139
00:07:18,410 --> 00:07:21,990
It is important to understand that when a task gets onto

140
00:07:21,990 --> 00:07:24,690
the push queue and reaches the top of the queue it is

141
00:07:24,690 --> 00:07:27,270
going to. App Engine is going to keep trying to run it,

142
00:07:27,270 --> 00:07:31,800
until it actually succeeds, if you use all the default options.

143
00:07:31,800 --> 00:07:35,370
So it's really important to test your queues, so that you

144
00:07:35,370 --> 00:07:39,220
don't get some task wedged in there that's never going to finish.

145
00:07:39,220 --> 00:07:41,759
One other thing we can do here is we can look in the logs.

146
00:07:43,820 --> 00:07:45,290
And you can see that we do have

147
00:07:45,290 --> 00:07:52,700
this report, that the tasks/send_confirmation_email_x. That no handlers matched

148
00:07:52,700 --> 00:07:55,570
this URL. So whenever you see that kind

149
00:07:55,570 --> 00:07:58,460
of error, no handlers matched this url, that means

150
00:07:58,460 --> 00:08:01,092
your app's trying to do something. With a

151
00:08:01,092 --> 00:08:03,324
URL that doesn't exist and that often just means

152
00:08:03,324 --> 00:08:05,095
you've got a typo in your code. Yeah,

153
00:08:05,095 --> 00:08:09,340
and of course, that never happens. You could actually

154
00:08:09,340 --> 00:08:11,920
choose a different lock level to show so here if

155
00:08:11,920 --> 00:08:15,200
we just show warnings, we very quickly see the problem.

156
00:08:17,720 --> 00:08:19,168
No handlers matches this URL. No handlers

157
00:08:19,168 --> 00:08:20,950
matches this URL. It's pretty easy here to

158
00:08:20,950 --> 00:08:26,640
see what the problem was. So I've shown you how to use the task keys

159
00:08:26,640 --> 00:08:30,070
viewer and admin console. And talked about

160
00:08:30,070 --> 00:08:32,620
how to schedule the task. Now it's your

161
00:08:32,620 --> 00:08:34,650
turn to write the code, to send the

162
00:08:34,650 --> 00:08:38,220
confirmation email whenever anybody creates a new conference.
