1
00:00:00,000 --> 00:00:02,000
What I'd like to do now is look a few examples.

2
00:00:02,000 --> 00:00:05,000
The first is file system testing and we've already talked about this a little bit,

3
00:00:05,000 --> 00:00:07,000
so I'm not going to reintroduce this subject.

4
00:00:07,000 --> 00:00:10,000
If we start with a simple file system tester, what we're probably going to do

5
00:00:10,000 --> 00:00:13,000
is make a list of all the API calls that we'd like to test.

6
00:00:13,000 --> 00:00:16,000
We can mount and unmount a file system, we can open and close a file,

7
00:00:16,000 --> 00:00:19,000
we can create a directory and remove a directory, make list of all these kinds of functions,

8
00:00:19,000 --> 00:00:22,000
and basically just call them randomly with random arguments.

9
00:00:22,000 --> 00:00:25,000
Then, we'll look at the results and think about them

10
00:00:25,000 --> 00:00:29,000
and we will see is that probably our testing is highly suboptimal because, for example,

11
00:00:29,000 --> 00:00:32,000
if we're throwing unmount calls randomly into the max,

12
00:00:32,000 --> 00:00:36,000
we're going to end up on average operating on an unmount file system at least 50% of the time.

13
00:00:36,000 --> 00:00:40,000
Similarly, if there is no correlation in randomly chosen file names

14
00:00:40,000 --> 00:00:44,000
between different calls to open-close and read and write and such,

15
00:00:44,000 --> 00:00:48,000
we may effectively never actually perform a read or write call on an open file,

16
00:00:48,000 --> 00:00:50,000
of course, that's obviously undesirable.

17
00:00:50,000 --> 00:00:55,000
We're going to do then is, for example, first is special case mount and unmount.

18
00:00:55,000 --> 00:00:59,000
We're also going to need to, almost certainly, special case open and close,

19
00:00:59,000 --> 00:01:02,000
and namely, one thing that we might want to do is keep track in the random tester

20
00:01:02,000 --> 00:01:04,000
of the set or currently open files.

21
00:01:04,000 --> 00:01:08,000
And just these couple of simple things is probably enough to get a file system fuzzer off the ground.

22
00:01:08,000 --> 00:01:10,000
But there's more, we probably want to limit the size of files

23
00:01:10,000 --> 00:01:14,000
so we don't waste a lot of time writing many, many, many gigabytes to files

24
00:01:14,000 --> 00:01:16,000
and we could be using that time better and perhaps

25
00:01:16,000 --> 00:01:18,000
we also want to limit the height of the directory hierarchy

26
00:01:18,000 --> 00:01:22,000
in order that we don't generate incredibly deep directory hierarchies that aren't interesting.

27
00:01:22,000 --> 00:01:24,000
On the other hand, we may want to do exactly that.

28
00:01:24,000 --> 00:01:28,000
we want to know exactly test extreme deep directory hierarchies or extremely large files,

29
00:01:28,000 --> 00:01:30,000
but it might be the case that these are special cases that we want to test

30
00:01:30,000 --> 00:01:32,000
separately from the main body of our fuzzer.

31
00:01:32,000 --> 00:01:36,000
Okay, so what I hope is the general pattern is clear here. We start off doing something really simple.

32
00:01:36,000 --> 00:01:39,000
We probably observed this doesn't work very well and then we start special casing things

33
00:01:39,000 --> 00:01:43,000
in order to remove limitations of our random tester and, over time,

34
00:01:43,000 --> 00:01:45,000
so maybe over weeks or months or even years,

35
00:01:45,000 --> 00:01:48,000
This process ends up with a random tester that will be extremely strong.
