1
00:00:00,000 --> 00:00:03,000
[Evans] The last thing we'll do this unit is look at an application

2
00:00:03,000 --> 00:00:06,000
that combines many of the things we've seen so far.

3
00:00:06,000 --> 00:00:10,000
Our goal is to figure out how to use passwords to do authentication.

4
00:00:10,000 --> 00:00:15,000
We're going to assume that we have some file or database to keep track of users.

5
00:00:15,000 --> 00:00:18,000
And for each user we want to keep track of something

6
00:00:18,000 --> 00:00:21,000
that will allow us to authenticate that user.

7
00:00:21,000 --> 00:00:25,000
In UNIX, this file is stored in /etc/passwd.

8
00:00:25,000 --> 00:00:28,000
So our goal is that even if some malicious insider

9
00:00:28,000 --> 00:00:32,000
or someone who can compromise our system can get access to the database

10
00:00:32,000 --> 00:00:36,000
or the password file, they won't be able to impersonate users.

11
00:00:36,000 --> 00:00:40,000
They won't be able to log in by just being able to read this file.

12
00:00:40,000 --> 00:00:43,000
If they can modify this file, that's another story.

13
00:00:43,000 --> 00:00:45,000
But let's assume that they can't modify it, they can just read it.

14
00:00:45,000 --> 00:00:48,000
This is not a completely unrealistic model.

15
00:00:48,000 --> 00:00:52,000
This is actually the model that motivated the design of the UNIX password system.

16
00:00:52,000 --> 00:00:55,000
There are lots of people that need to read this password file

17
00:00:55,000 --> 00:00:58,000
but only very privileged applications that need to write to it.

18
00:00:58,000 --> 00:01:03,000
So the really bad idea number 1 is to just keep the passwords in clear text.

19
00:01:03,000 --> 00:01:06,000
There actually are web applications that do that.

20
00:01:06,000 --> 00:01:10,000
Any web application that actually does that is doing some things very, very wrong.

21
00:01:10,000 --> 00:01:13,000
First of all, it's wrong to send a password in email,

22
00:01:13,000 --> 00:01:16,000
especially one that was created by a user,

23
00:01:16,000 --> 00:01:19,000
but it also means that they're actually storing your password

24
00:01:19,000 --> 00:01:21,000
in a way that they can recover it.

25
00:01:21,000 --> 00:01:23,000
And that probably means that anyone else who has access to their database

26
00:01:23,000 --> 00:01:26,000
can also recover it. So we want to do something better.

27
00:01:26,000 --> 00:01:30,000
We want to provide this property that even if someone can get access to the database

28
00:01:30,000 --> 00:01:33,000
and read all the user and password information,

29
00:01:33,000 --> 00:01:35,000
they can't break into your account.

30
00:01:35,000 --> 00:01:39,000
So that was really bad idea number 0: keeping the passwords in clear text.

31
00:01:39,000 --> 00:01:42,000
Now we're going to move on to really bad idea number 1,

32
00:01:42,000 --> 00:01:46,000
which sounds a little bit more plausible but is not a good way to store passwords.

33
00:01:46,000 --> 00:01:48,000
So here is the plan.

34
00:01:48,000 --> 00:01:51,000
The server operator will generate some key.

35
00:01:51,000 --> 00:01:54,000
Let's assume the server can generate a good random key.

36
00:01:54,000 --> 00:01:58,000
And for each password we're going to store the encrypted value of that password,

37
00:01:58,000 --> 00:02:01,000
encrypting using the key using CFB mode.

38
00:02:01,000 --> 00:02:05,000
That's cipher feedback mode with message block size 8,

39
00:02:05,000 --> 00:02:10,000
so that will allow us to use this for any size string.

40
00:02:10,000 --> 00:02:12,000
8 is the number of bits per character.

41
00:02:12,000 --> 00:02:15,000
That could be 7 or 8 depending on how we encode the characters.

42
00:02:15,000 --> 00:02:17,000
The question is, why is this a really bad idea?

43
00:02:17,000 --> 00:02:19,000
Here are all the possible choices.

44
00:02:19,000 --> 00:02:21,000
Select all the ones that apply.

45
00:02:21,000 --> 00:02:23,000
That it reveals the length of the password;

46
00:02:23,000 --> 00:02:28,000
that the encrypted text reveals when 2 users have the same password;

47
00:02:28,000 --> 00:02:33,000
that it requires use of E, an encryption function, which is slower than using a hash function;

48
00:02:33,000 --> 99:59:59,999
that if the key is compromised, that reveals all of the passwords.
