1
00:00:00,310 --> 00:00:03,726
We've done some simple code at this point, to load assets and resources in

2
00:00:03,726 --> 00:00:08,194
memory. But as our code base gets more complex, we'll quickly find that we need

3
00:00:08,194 --> 00:00:11,722
additional power and flexibility to help us get larger amounts of data into

4
00:00:11,722 --> 00:00:18,870
memory. For example, what if you issue a load of the same file multiple times.

5
00:00:18,870 --> 00:00:23,550
Well, each load will hit disk or at worst the web, and load that asset into

6
00:00:23,550 --> 00:00:27,744
memory. This can become a large performance burden as each from disk fetch can

7
00:00:27,744 --> 00:00:31,258
have performance costs. As an improvement, it would be great if once an asset

8
00:00:31,258 --> 00:00:34,110
had been loaded, to know if it's in memory already, so that we can return the

9
00:00:34,110 --> 00:00:36,916
in memory version, rather than going back to hitting the disk, or the web,

10
00:00:36,916 --> 00:00:42,190
multiple times. This concept starts us down the path of an asset loading

11
00:00:42,190 --> 00:00:46,519
manager, which we'll cover in this unit. Now in contrast to other languages

12
00:00:46,519 --> 00:00:50,423
which handle File I/O as a synchronous or a blocking functionality, all File

13
00:00:50,423 --> 00:00:56,110
I/O functions in JavaScript are by definition asynchronous. As you already saw

14
00:00:56,110 --> 00:00:59,334
before, we specify a load function that is called later, once the image has

15
00:00:59,334 --> 00:01:03,050
been loaded. This is a benefit to JavaScript, because we don't have to put

16
00:01:03,050 --> 00:01:05,802
together all the logic of communicating between threads in order to load our

17
00:01:05,802 --> 00:01:10,699
assets asynchronously. Giving HTML5 an edge in terms of features for gaming.
