1
00:00:00,149 --> 00:00:02,873
It's actually easy to construct such a kernel.

2
00:00:02,873 --> 00:00:10,513
For example, we could have a switch statement with 32 or more cases. If each thread in a warp switches to a different case,

3
00:00:10,513 --> 00:00:13,184
and each case took the same amount of time to execute,

4
00:00:13,184 --> 00:00:19,195
this segment of the kernel would run 32 times slower than if all the threads in a warp switch to the same case.

5
00:00:19,195 --> 00:00:21,889
Okay, so let's explore this with a quiz.

6
00:00:21,889 --> 00:00:25,666
So I'm going to give you a bunch of switch statements, and we're going to pretend that

7
00:00:25,666 --> 00:00:30,498
they're in a kernel and that all of the cases of those switch statements take an equal amount of time.

8
00:00:30,498 --> 00:00:34,604
Okay, so I'll do the first example to explain the format that I'm looking for.

9
00:00:34,604 --> 00:00:38,107
Here, we've got a switch statement, this is in kernel code.

10
00:00:38,107 --> 00:00:43,046
It's switching on the thread index, .x, mod 32,

11
00:00:43,046 --> 00:00:46,616
and that means that you're going to get a number from 0 to 31.

12
00:00:46,616 --> 00:00:53,331
And I've just sort of used this short-cut notation to indicate that I've got cases 0 through 31.

13
00:00:53,331 --> 00:00:56,158
I want you to assume that all these cases take the same amount of time,

14
00:00:56,158 --> 00:01:00,996
and then there's some more code, and later on I'm actually going to launch this kernel,

15
00:01:00,996 --> 00:01:03,500
and I'm going to launch it in a configuration like this.

16
00:01:03,500 --> 00:01:06,813
It's going to have a single thread block with 1024 threads.

17
00:01:06,813 --> 00:01:09,706
And so the question that I'm asking you is, what is the slowdown?

18
00:01:09,706 --> 00:01:16,602
Is it 1x, meaning no slowdown at all? Is it 32x, meaning a factor of 30--

19
00:01:16,602 --> 00:01:23,575
you know, assuming all these cases take the same amount of time, it's going to run 32 times slower through this section of the code due to branch divergence?

20
00:01:23,575 --> 00:01:27,955
What's going on? And so I'll give you a series of these, using this sort of short-hand notation,

21
00:01:27,955 --> 00:01:32,852
and I want you to think about what is the slowdown that you're going to get due to the thread divergence,

22
00:01:32,852 --> 00:01:34,767
the different threads in a warp.

23
00:01:34,767 --> 00:01:37,851
So the answer to this first one, this is sort of the example we've been discussing.

24
00:01:37,851 --> 00:01:41,301
Okay, every thread is going to go a different path.

25
00:01:41,301 --> 00:01:45,512
Every thread in the warp will have a different value for this thread index,

26
00:01:45,512 --> 00:01:49,510
those values will be 0 through 31, so every single thread will take a different path,

27
00:01:49,510 --> 00:01:55,974
and that means that the warp is going to have to activate each thread in turn, run through that particular case,

28
00:01:55,974 --> 00:01:59,613
deactivate that thread, activate another thread, run through that case and so forth.

29
00:01:59,613 --> 00:02:02,812
So this will lead to the maximum slowdown of 32 times.

30
00:02:02,812 --> 00:02:07,550
Here is our next example, and what I am going to try to do for each of these examples is highlight in black

31
00:02:07,550 --> 00:02:12,988
the parts of the code that are different from the first example that I gave.

32
00:02:12,988 --> 00:02:21,831
So in this case we are similarly launching a kernel with 1024 threads, and now we have got cases 0 through 63,

33
00:02:21,831 --> 00:02:27,169
and we're taking the thread index and we're moding it by 64 instead of by 32,

34
00:02:27,169 --> 00:02:29,664
Your job is to figure out the slowdown.

35
00:02:29,680 --> 00:02:34,849
What about a two-dimensional kernel? Here, I'm using some shorthand to indicate

36
00:02:34,849 --> 00:02:41,020
that I'm launching a thread block which has 64 threads in the X direction and 16 threads in the Y direction,

37
00:02:41,020 --> 00:02:46,523
again a single thread block, and I'm going to switch on the Y index of the thread.

38
00:02:46,523 --> 00:02:51,337
And next, another example where I'm going to switch on the Y index of the thread as before,

39
00:02:51,337 --> 00:02:56,784
except this time I'm launching a thread block with 16 by 16 threads.
