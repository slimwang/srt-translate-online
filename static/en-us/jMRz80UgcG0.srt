1
00:00:00,160 --> 00:00:01,900
What are the best practices for your customers?

2
00:00:01,900 --> 00:00:04,160
>> For the people you take I mean, the best practices so far,

3
00:00:04,160 --> 00:00:06,910
whatever we have today is that low key has more value.

4
00:00:06,910 --> 00:00:12,450
And, the topography, the CEO output is doing well online.

5
00:00:12,450 --> 00:00:16,490
Another way to do that is you can actually construct a topology.

6
00:00:16,490 --> 00:00:17,840
>> Yeah. >> So, you have this spout.

7
00:00:18,890 --> 00:00:21,810
And then this [INAUDIBLE] is out and think about that it,

8
00:00:21,810 --> 00:00:24,230
that apology has only one of it's [INAUDIBLE] >> Mm-hm.

9
00:00:24,230 --> 00:00:25,960
>> And, see how, you know?

10
00:00:25,960 --> 00:00:27,850
Output looks like [INAUDIBLE] >> Yeah.

11
00:00:27,850 --> 00:00:30,070
>> Then, if it is fine and not doing well.

12
00:00:30,070 --> 00:00:31,235
The you have the bolt.

13
00:00:31,235 --> 00:00:33,880
>> Mm-hm. >> Then, you'll look at what is output of them both is

14
00:00:33,880 --> 00:00:36,840
suppose to be, right?

15
00:00:36,840 --> 00:00:38,864
>> Yeah. >> So, so you, [INAUDIBLE] stage by stage and ,.

16
00:00:40,130 --> 00:00:41,150
You're breaking up the topologies.

17
00:00:41,150 --> 00:00:43,090
RIght? >> Mm-hm. >> That's one way to do it.

18
00:00:43,090 --> 00:00:48,350
And, then of course the open model cluster is it allows you to do that kind

19
00:00:48,350 --> 00:00:52,000
of integrating testing except without a distributed cluster in a local cluster.

20
00:00:52,000 --> 00:00:52,935
Right? >> Mm-hm.

21
00:00:52,935 --> 00:00:54,200
>> So, that's one.

22
00:00:54,200 --> 00:00:57,700
I mean, I do really wish that we can do some kind of simple unit testing on

23
00:00:57,700 --> 00:00:58,320
IV pole.

24
00:00:58,320 --> 00:01:02,720
Than the spout level where you will say this is my input that is my output for

25
00:01:02,720 --> 00:01:05,330
every spout or every volt that you have right?

26
00:01:05,330 --> 00:01:08,700
>> Is there a way to say like what is your throughput per you know,

27
00:01:08,700 --> 00:01:11,170
like say like, how much data you gain from your spout and

28
00:01:11,170 --> 00:01:13,475
then like how long it takes for your bolt to run.

29
00:01:13,475 --> 00:01:15,745
>> Mm-hm. >> because you know, because you gave that example of say you have.

30
00:01:15,745 --> 00:01:16,305
>> 200,000, you know- >> Mm-hm.

31
00:01:16,305 --> 00:01:20,274
>> [INAUDIBLE] per second, but your [INAUDIBLE] can only do, like 50,000.

32
00:01:20,274 --> 00:01:21,060
>> Yeah, yeah, yeah, yeah.

33
00:01:21,060 --> 00:01:26,120
So, so but the way we do that is, I mean, that is different from testing.

34
00:01:26,120 --> 00:01:29,190
>> Yeah. >> But, it's more of a what we call as a capacity planning to

35
00:01:29,190 --> 00:01:31,051
determine how much [INAUDIBLE].

36
00:01:31,051 --> 00:01:34,580
>> Yeah. >> And, typically, your testing occurs on a smaller amount of data.

37
00:01:34,580 --> 00:01:38,600
Like what we used here on the sample data, right?

38
00:01:38,600 --> 00:01:40,940
So, like a 10% sample, 20% sample, or 50% sample, right?

39
00:01:40,940 --> 00:01:41,850
>> Yeah.

40
00:01:41,850 --> 00:01:44,710
>> When you go into full blown data that is all you,

41
00:01:44,710 --> 00:01:48,470
when you know what your decide about the right?

42
00:01:48,470 --> 00:01:52,530
So, what we do is like we take the same samples that you use to

43
00:01:52,530 --> 00:01:53,429
debug your program on.

44
00:01:53,429 --> 00:01:58,290
>> Mm-hm. >> And, when the sample and look at your Yeah.

45
00:01:58,290 --> 00:02:00,180
>> So, what we do is at every bold and

46
00:02:00,180 --> 00:02:04,340
every spot level in the customer intacts that we have we look at the CP usage.

47
00:02:04,340 --> 00:02:05,590
>> Yep.

48
00:02:05,590 --> 00:02:08,060
>> So, we have a climbing dumps of how much CPU it say.

49
00:02:08,060 --> 00:02:10,669
Because even if for a few days before it goes into production.

50
00:02:10,669 --> 00:02:11,910
>> Yep. >> So, that then so

51
00:02:11,910 --> 00:02:15,010
that you can capture the traffic radiations or what a.

52
00:02:15,010 --> 00:02:19,270
Or, during a particular time of the day and for a particular time of the week.

53
00:02:19,270 --> 00:02:20,870
Or, or all the things, right?

54
00:02:20,870 --> 00:02:23,980
So, once you have know the CPU usage.

55
00:02:23,980 --> 00:02:24,750
Then, you can work.

56
00:02:24,750 --> 00:02:30,050
By the way, you want topology that can tasks seem to take 90% of the time.

57
00:02:30,050 --> 00:02:31,640
>> Yeah. >> 90% CPU usage, which is not a good thing,

58
00:02:31,640 --> 00:02:37,550
because you needed some head room for, if any, or any surge in traffic.

59
00:02:37,550 --> 00:02:38,380
>> Yeah. >> Right?

60
00:02:38,380 --> 00:02:42,360
So, between, so you should not be doing a 90% identity census.

61
00:02:42,360 --> 00:02:47,692
Instead we should be going down to like the, say keep it at 60%.

62
00:02:47,692 --> 00:02:50,710
Like 60%, 50% to 60%'s the normal.

63
00:02:50,710 --> 00:02:54,850
So, that you are determining the number of [INAUDIBLE].

64
00:02:54,850 --> 00:02:57,950
Where the CPU is saying it's 50% approximately, right?

65
00:02:57,950 --> 00:03:00,990
So then, and you keep that running, then you have a, another HTML file that the,

66
00:03:00,990 --> 00:03:02,390
the person to go up and down.

67
00:03:02,390 --> 00:03:06,485
>> Mm. >> That is saying, you really shouldn't need it that good, right?

68
00:03:06,485 --> 00:03:07,220
>> Mm-hm. >> So, that's a way then.

69
00:03:07,220 --> 00:03:10,790
For the 50% CPU utilization, based on our current number of instances,

70
00:03:10,790 --> 00:03:13,420
current number of sample set that you have.

71
00:03:13,420 --> 00:03:15,860
And, what is your least sound currency using.

72
00:03:15,860 --> 00:03:17,990
Then, you can determine okay this many number

73
00:03:20,400 --> 00:03:22,600
of things inferences we give the [INAUDIBLE] for direction.

74
00:03:22,600 --> 00:03:24,050
>> Okay. >> So, that's the way you decide that.

75
00:03:24,050 --> 00:03:27,390
And, we have the CPU map for every bulge and every [INAUDIBLE] So

76
00:03:27,390 --> 00:03:30,479
then you can determine at every stage how much [INAUDIBLE]
