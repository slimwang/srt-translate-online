1
00:00:00,420 --> 00:00:03,190
So many of the resources we
have in life, such as time and

2
00:00:03,190 --> 00:00:04,520
money, are limited.

3
00:00:04,520 --> 00:00:07,380
So we have to be efficient in
how we decide to use them.

4
00:00:07,380 --> 00:00:10,280
For example,
there's only 24 hours in a day.

5
00:00:10,280 --> 00:00:13,980
And if we decide to spend one of those
hours watching the latest TV drama,

6
00:00:13,980 --> 00:00:17,129
we can't use that same hour to, say,
cook a delicious meal with friends.

7
00:00:18,320 --> 00:00:19,720
So, this ultimately
means that we should be

8
00:00:19,720 --> 00:00:21,250
careful of how we decide
to use that type.

9
00:00:22,510 --> 00:00:26,080
Similarly, the human memory is
a limited resource as well.

10
00:00:26,080 --> 00:00:28,670
We can only hold so
many things in our head, right?

11
00:00:28,670 --> 00:00:29,910
For example, at a party,

12
00:00:29,910 --> 00:00:32,750
we have a limit to the number of
new names that we can remember.

13
00:00:32,750 --> 00:00:34,920
Our mobile devices have
memory of a digital kind,

14
00:00:34,920 --> 00:00:37,060
and that memory is fixed and

15
00:00:37,060 --> 00:00:42,060
extremely limited compared to that of a
traditional laptop or desktop computer.

16
00:00:42,060 --> 00:00:45,330
Now memory on our mobile device is
used to store all types of things,

17
00:00:45,330 --> 00:00:49,610
such as music, text messages,
photos and much more.

18
00:00:49,610 --> 00:00:52,780
Now on top of all this,
that limited amount of memory

19
00:00:52,780 --> 00:00:56,400
must also be shared across
the Android operating system for

20
00:00:56,400 --> 00:01:00,440
all the other awesome apps that we use,
including our app as well.

21
00:01:00,440 --> 00:01:03,277
So if one of these apps ends
up eating up a lot of memory,

22
00:01:03,277 --> 00:01:06,686
that can have a significant impact
on running all the other apps.

23
00:01:06,686 --> 00:01:10,135
And worse of all, that would negatively
effect the overall experience of

24
00:01:10,135 --> 00:01:14,466
the entire device, which could lead to
a very frustrating user experience.

25
00:01:14,466 --> 00:01:16,210
All of this discussion is meant to say,

26
00:01:16,210 --> 00:01:20,240
that as developers we must keep in mind
that memory is a limited resource, and

27
00:01:20,240 --> 00:01:23,390
we need to create apps that
use this memory efficiently.

28
00:01:23,390 --> 00:01:25,670
Consider the contacts list app.

29
00:01:25,670 --> 00:01:29,095
A user may have 1,000 names and phone
numbers stored into their contacts list.

30
00:01:29,095 --> 00:01:30,476
[BLANK_AUDIO]

31
00:01:30,476 --> 00:01:34,732
Now, if each contact were stored as
TextViews in a linear layout, the phone

32
00:01:34,732 --> 00:01:39,867
would expense a lot of memory creating,
storing, and displaying 1,000 TextViews.

33
00:01:39,867 --> 00:01:44,740
Even though maybe not all 1,000 would be
shown on the screen at the same time.

34
00:01:44,740 --> 00:01:48,319
If a large part of the system's memory
goes into creating and storing 1,000

35
00:01:48,319 --> 00:01:51,820
contacts, then there's not much left
to run other parts of the phone.

36
00:01:51,820 --> 00:01:55,322
And this may cause other apps
to stall or not even run at all.

37
00:01:55,322 --> 00:01:58,110
We want to be smart about
using the memory resources so

38
00:01:58,110 --> 00:02:00,370
our app plays nicely with
other programs on the device.

39
00:02:01,450 --> 00:02:05,250
Now, in this simplification of a
contacts app, when the user's looking at

40
00:02:05,250 --> 00:02:08,949
the list on their phone, they only see
five contacts on the screen at a time.

41
00:02:10,150 --> 00:02:13,800
And anything above or below the list
currently visible on the screen

42
00:02:13,800 --> 00:02:17,620
doesn't even need to exist, because that
would just take up memory resources.

43
00:02:17,620 --> 00:02:22,410
So there's no need to create all 1,000
TextViews and have them take up memory,

44
00:02:22,410 --> 00:02:26,430
especially since the user may never
scroll through the entire list.

45
00:02:26,430 --> 00:02:29,733
So, to solve this issue, we could reuse
views, because there's only five to

46
00:02:29,733 --> 00:02:33,058
seven contacts that would ever actually
appear on the screen at the time.

47
00:02:33,058 --> 00:02:37,110
And so here the blue rectangle
represents the device screen.

48
00:02:37,110 --> 00:02:41,156
So notice that all of the contacts that
do end up needing to be displayed can

49
00:02:41,156 --> 00:02:43,519
just use one of these pre-created views.

50
00:02:44,520 --> 00:02:47,410
And when a contact is no
longer visible on the screen,

51
00:02:47,410 --> 00:02:50,590
then the view can be used to display
information for a different contact.

52
00:02:51,690 --> 00:02:54,080
So this strategy is
called view recycling.

53
00:02:55,080 --> 00:03:00,130
And we can accomplish this with
a combination of a ListView and Adapter.

54
00:03:00,130 --> 00:03:03,870
So we'll talk more about the details
of this whole view recycling process

55
00:03:03,870 --> 00:03:05,160
in more detail in the next video.

56
00:03:06,180 --> 00:03:09,400
So the takeaway is to remember not
to abuse your device's memory.

57
00:03:09,400 --> 00:03:12,500
Remember that our apps run on devices
that have a set amount of memory

58
00:03:12,500 --> 00:03:15,250
that it needs to share with
other apps and functions.

59
00:03:15,250 --> 00:03:18,865
So if a device is running several
applications at a time and

60
00:03:18,865 --> 00:03:22,095
runs out of memory because maybe your
app is hogging all the resources.

61
00:03:22,095 --> 00:03:24,825
Well, the device will have to stop
running all the other apps in order to

62
00:03:24,825 --> 00:03:26,225
free up space.

63
00:03:26,225 --> 00:03:27,835
Now, armed with this knowledge,

64
00:03:27,835 --> 00:03:31,445
we can all be good citizens when
creating apps for Android devices by

65
00:03:31,445 --> 00:03:34,425
ensuring that they efficiently minimize
the amount of memory they're using.
