1
00:00:00,200 --> 00:00:04,080
As a quiz, let's look at a possible
spinlock implementation.

2
00:00:04,080 --> 00:00:05,460
Here is a possible pseudo code.

3
00:00:06,540 --> 00:00:11,610
To be clear, the lock needs to be
initialized as free and that will be 0.

4
00:00:11,610 --> 00:00:14,220
And 1 will indicate
that the lock is busy.

5
00:00:14,220 --> 00:00:15,490
To lock the spinlock,

6
00:00:15,490 --> 00:00:19,740
we first need to check to make
sure that the lock is free.

7
00:00:19,740 --> 00:00:23,560
And if so, then we can change
its state and block it.

8
00:00:23,560 --> 00:00:25,810
So change its state to busy.

9
00:00:25,810 --> 00:00:30,220
Otherwise, if the lock isn't free,
we have to keep spinning.

10
00:00:30,220 --> 00:00:33,790
So we have to keep repeating
this check and this operation.

11
00:00:33,790 --> 00:00:38,230
Finally, releasing the lock means that
we set the value of the lock to free.

12
00:00:38,230 --> 00:00:40,990
These steps are listed
in the Instructor Notes.

13
00:00:40,990 --> 00:00:45,700
The questions in this quiz are does
the implementation of the lock

14
00:00:45,700 --> 00:00:48,710
correctly guarantee mutual exclusion?

15
00:00:48,710 --> 00:00:52,430
Also, is this implementation efficient?

16
00:00:52,430 --> 00:00:53,670
Mark your answers here.
