1
00:00:00,000 --> 00:00:02,000
[Norvig] And the answer is simple.

2
00:00:02,000 --> 00:00:10,000
We take the maximum out of all the hands, with the key equal to the hand_rank.

3
00:00:10,000 --> 00:00:12,000
I like this definition because it's so simple--

4
00:00:12,000 --> 00:00:14,000
the whole body is just 1 line--

5
00:00:14,000 --> 00:00:19,000
and also because it corresponds so closely to the problem specification.

6
00:00:19,000 --> 00:00:23,000
The specification says, return the highest ranking hand.

7
00:00:23,000 --> 00:00:28,000
The function definition says, return the max of the hands according to the hand_rank,

8
00:00:28,000 --> 00:00:30,000
which is basically the same thing.

9
00:00:30,000 --> 00:00:33,000
It's easy to see that the implementation matches the specification.

10
00:00:33,000 --> 00:00:37,000
Now, if we can just make the hand_rank function clear and correct,

11
00:00:37,000 --> 00:00:39,000
we'll be in great shape.

12
00:00:39,000 --> 00:00:43,000
But before moving on to defining hand_rank, which will be the most complex function

13
00:00:43,000 --> 00:00:46,000
that we will write, it's a good idea to think about how the functions will be used

14
00:00:46,000 --> 00:00:49,000
and to write down some test cases.

15
00:00:49,000 --> 00:00:53,000
There are several ways to write tests in Python, and here's the simplest way I know.

16
00:00:53,000 --> 00:00:58,000
That is, we define and then call a function.

17
00:00:58,000 --> 00:01:04,000
I'm calling the function here test, and test consists of some setup of some variables

18
00:01:04,000 --> 00:01:09,000
and then some tests that I'm writing with the assert statement.

19
00:01:09,000 --> 00:01:12,000
An assert statement in Python, if you haven't seen that before, says,

20
00:01:12,000 --> 00:01:15,000
I'm asserting that the following thing must be true.

21
00:01:15,000 --> 00:01:20,000
And if it's not true, then the program will stop and print an error message.

22
00:01:20,000 --> 00:01:26,000
If it is true, it'll just move on, and if the tests pass--here I have only 1 test--

23
00:01:26,000 --> 99:59:59,999
if that test passed, then we'll return tests pass and print that.
