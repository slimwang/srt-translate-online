1
00:00:00,150 --> 00:00:04,572
Instead of having P-squared threads to compute P-squared force interactions

2
00:00:04,572 --> 00:00:08,546
and then summing them up between threads, we'll only use P threads total.

3
00:00:08,546 --> 00:00:12,846
Each of these P threads will then be responsible for P interactions.

4
00:00:12,846 --> 00:00:16,386
Another way to think about it is that 1 thread, this horizontal thread here,

5
00:00:16,386 --> 00:00:22,995
is responsible for applying the force of all P source objects to 1 destination object.

6
00:00:22,995 --> 00:00:25,128
So the code for this is really simple, and we're showing it here.

7
00:00:25,128 --> 00:00:29,475
Our kernel code simply loops N over P times over this particular routine.

8
00:00:29,475 --> 00:00:33,663
It accumulates P by P interactions onto P threads in each iteration.

9
00:00:33,663 --> 00:00:35,673
So what's happening in this code?

10
00:00:35,673 --> 00:00:40,616
Well the input to the kernel is my parameters, those associated with my destination object.

11
00:00:40,616 --> 00:00:44,143
Those would be say, your position and your mass or your charge

12
00:00:44,143 --> 00:00:47,384
and the accumulated force that has acted on my object so far.

13
00:00:47,384 --> 00:00:51,608
And the output will be the accumulated force after I add in P more interactions,

14
00:00:51,608 --> 00:00:54,788
1 for each of the source objects with which I'm interacting.

15
00:00:54,788 --> 00:00:59,195
So we assume that we store parameters for the P source objects in shared memory,

16
00:00:59,195 --> 00:01:00,895
sourceParams here,

17
00:01:00,895 --> 00:01:03,199
and then we just loop P times over those P objects.

18
00:01:03,199 --> 00:01:08,980
We compute the interaction, and this might be computation of gravitational force, it might be electrostatic force,

19
00:01:08,980 --> 00:01:11,675
and the params will differ depending on what kind of force it is.

20
00:01:11,675 --> 00:01:17,194
And then we'll compute the interaction and add resulting force into the force accumulator variable and return it.
