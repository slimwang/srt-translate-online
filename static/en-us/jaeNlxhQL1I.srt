1
00:00:00,000 --> 00:00:04,000
[Narrator] I now want to ask you the really challenging question over here,

2
00:00:04,000 --> 00:00:07,000
and it goes as follows: one of the weaknesses of slam is

3
00:00:07,000 --> 00:00:12,000
as we move along and map a world by seeing these landmarks,

4
00:00:12,000 --> 00:00:16,000
the matrix omega which is the big thing here and of course the vector C

5
00:00:16,000 --> 00:00:19,000
grow linearly with the length of the path.

6
00:00:19,000 --> 00:00:24,000
Now this means if you go to your local supermarket and buy a robot,

7
00:00:24,000 --> 00:00:28,000
and that robot lives for a long time, say a year or a decade,

8
00:00:28,000 --> 00:00:33,000
then this thing here, the path will be a really, really large even though the environment

9
00:00:33,000 --> 00:00:37,000
in which it might operate, the map might be of a fixed size,

10
00:00:37,000 --> 00:00:40,000
and that means a robot programmed by graph SLAM

11
00:00:40,000 --> 00:00:44,000
will eventually stop working because it gets slower and slower.

12
00:00:44,000 --> 00:00:48,000
Now, we all know computer operating systems that have that property.

13
00:00:48,000 --> 00:00:52,000
The older they are the slower they are, but we're not talking about how to fix operating systems.

14
00:00:52,000 --> 00:00:54,000
We're just talking about how to fix SLAM.

15
00:00:54,000 --> 00:01:00,000
The crucial idea that I want to tell you about and I want you to implement from scratch in our software

16
00:01:00,000 --> 00:01:03,000
is the following: we can actually reduce the map we maintain

17
00:01:03,000 --> 00:01:08,000
to one that only contains the most recent position in the path,

18
00:01:08,000 --> 00:01:15,000
and all of the stuff over here can be safely erased when we build our map.

19
00:01:15,000 --> 00:01:18,000
You don't know how to do it, but let me tell you.

20
00:01:18,000 --> 00:01:22,000
Suppose we have a robot position and we have a matrix omega

21
00:01:22,000 --> 00:01:25,000
that only contains the information pertaining to 1 position.

22
00:01:25,000 --> 00:01:30,000
If the position is 1 dimensional, it's just 1 row and 1 column.

23
00:01:30,000 --> 00:01:33,000
Whereas, you might have many different entries for the map.

24
00:01:33,000 --> 00:01:37,000
Suppose the robot moves to a new position; let's call it XT+1.

25
00:01:37,000 --> 00:01:43,000
Then, we'd do exactly the following: we'd grow the matrix in the vector

26
00:01:43,000 --> 00:01:46,000
by using the expand function that you're already familiar with

27
00:01:46,000 --> 00:01:51,000
such that we now have space for our new position.

28
00:01:51,000 --> 00:01:54,000
The new area we added are these rows over here.

29
00:01:54,000 --> 00:01:57,000
It's a single row of numbers of a position 1 dimensional.

30
00:01:57,000 --> 00:02:00,000
It's 2 rows of number of a position that is 2 dimensional,

31
00:02:00,000 --> 00:02:06,000
and it's this column, again, is just a single column if our position is 1 dimensional;

32
00:02:06,000 --> 00:02:10,000
otherwise, it is 2 column, and we initialize those all by 0,

33
00:02:10,000 --> 00:02:13,000
and then we can apply our regular motion update,

34
00:02:13,000 --> 00:02:18,000
that as you know adds 1 or some number like 1 to the main diagonal

35
00:02:18,000 --> 00:02:24,000
and -1s off diagonal, and the same on the right side for the vector C.

36
00:02:24,000 --> 00:02:29,000
That is just a motion update but that runs the risk that our path increases.

37
00:02:29,000 --> 00:02:31,000
Now we go back to a form like this.

38
00:02:31,000 --> 00:02:34,000
We make X2+1 survive.

39
00:02:34,000 --> 00:02:41,000
Simplified speaking, you might think about doing this by just cutting out the new sub-matrix that starts over here,

40
00:02:41,000 --> 00:02:45,000
and the sub-vector that starts over here; however, if you do this

41
00:02:45,000 --> 00:02:51,000
as you can easily verify, that sub-matrix doesn't give you the correct answer,

42
00:02:51,000 --> 00:02:53,000
and here is where the meat is.

43
00:02:53,000 --> 00:03:01,000
We now cut out 3 sub-matrices or values from the full matrix on the right side.

44
00:03:01,000 --> 00:03:04,000
One sits here, that one I will call A.

45
00:03:04,000 --> 00:03:08,000
One is over here; it's a single element for a 1D robot,

46
00:03:08,000 --> 00:03:12,000
but is a 2 x 2 matrix for a robot in 2D coordinates,

47
00:03:12,000 --> 00:03:17,000
and one that I'll call C, and it's obvious to see that this thing over here

48
00:03:17,000 --> 00:03:20,000
that you want to cut out is called A-1.

49
00:03:20,000 --> 00:03:22,000
These values carry a lot of importance.

50
00:03:22,000 --> 00:03:27,000
We can't just erase them, but we can forward them back into the surviving matrix

51
00:03:27,000 --> 00:03:30,000
by the following simple operation:

52
00:03:30,000 --> 00:03:33,000
we take the surviving matrix to be called omega prime

53
00:03:33,000 --> 00:03:36,000
and the surviving vector to be called X prime,

54
00:03:36,000 --> 00:03:42,000
and you can get omega prime and X prime by using the function take that is in your own matrix library.

55
00:03:42,000 --> 00:03:46,000
You have to look into how to make take take exactly those elements over here,

56
00:03:46,000 --> 00:03:52,000
and then if we modify X prime and C prime with the following piece of math.

57
00:03:52,000 --> 00:04:01,000
We subtract from omega prime A transpose times B to the -1, the inverse, times A.

58
00:04:01,000 --> 00:04:06,000
If we implement this correctly this gives you a matrix of the same size as sigma prime,

59
00:04:06,000 --> 00:04:10,000
and that's what you subtract to arrive at our reduced sigma.

60
00:04:10,000 --> 00:04:13,000
Similarly you do the same for C.

61
00:04:13,000 --> 00:04:18,000
You subtract A prime minus B to the -1 times C.

62
00:04:18,000 --> 00:04:23,000
This tends to be the same as Gaussian where we technically do away

63
00:04:23,000 --> 00:04:27,000
or we call it integrate away the variable X1,

64
00:04:27,000 --> 00:04:30,000
and I don't want to go into detail why that's correct.

65
00:04:30,000 --> 00:04:35,000
My book has a multi-page proof of that simple equation.

66
00:04:35,000 --> 00:04:40,000
I just want to give you intuition here, which is these values do carry importance,

67
00:04:40,000 --> 00:04:44,000
and to get rid of those you have to redistribute them into the remaining variables

68
00:04:44,000 --> 00:04:47,000
and that over here happens to be the math.

69
00:04:47,000 --> 00:04:53,000
It's A transpose times B times A that you subtract from the remaining omega prime,

70
00:04:53,000 --> 00:04:55,000
and the same for C over here.

71
00:04:55,000 --> 00:05:01,000
When you do this, you are now left with a matrix of the same original dimension

72
00:05:01,000 --> 00:05:04,000
because we first added the post and then we subtracted one,

73
00:05:04,000 --> 00:05:07,000
and as you can see when you do this many, many times

74
00:05:07,000 --> 00:05:12,000
the final dimension of the matrix is only determined based on the size of the map

75
00:05:12,000 --> 00:05:17,000
plus, well, a single entry which in the 1D case is 1 row and 1 column.

76
00:05:17,000 --> 00:05:21,000
In the 2D case is 2 of those corresponding to the robot position.

77
00:05:21,000 --> 00:05:25,000
That means SLAM scales to really large environments

78
00:05:25,000 --> 00:05:29,000
because we can do the trick every single time a robot moves.

79
00:05:29,000 --> 00:05:32,000
You asked for a challenging program assignment.

80
00:05:32,000 --> 00:05:35,000
I promise you, you will be busy with it for awhile.

81
00:05:35,000 --> 00:05:40,000
I'm giving you now my piece of code in which I implemented SLAM for you.

82
00:05:40,000 --> 00:05:42,000
You're familiar with this.

83
00:05:42,000 --> 00:05:45,000
You have all of that, and then I run SLAM with 3 landmarks,

84
00:05:45,000 --> 00:05:50,000
3 time steps, a world size of 100, and a measurement range of 100.

85
00:05:50,000 --> 00:05:54,000
I make data at random as you're familiar with and you'll complete the result,

86
00:05:54,000 --> 00:06:00,000
and the result in this case contains a vector of omega C and U concatenated.

87
00:06:00,000 --> 00:06:03,000
Then what I might get out looks as follows:

88
00:06:03,000 --> 00:06:06,000
there's 3 landmarks.

89
00:06:06,000 --> 00:06:09,000
There's a sequence of estimated positions leading up to the actual robot position.

90
00:06:09,000 --> 00:06:13,000
They're both correct, and then there's estimates for where landmarks are.

91
00:06:13,000 --> 00:06:20,000
Every time I run it, I get a different answer because my landmarks and my world is different every time.

92
00:06:20,000 --> 00:06:23,000
Now I also implemented and that's your task now

93
00:06:23,000 --> 00:06:25,000
a function called online SLAM.

94
00:06:25,000 --> 00:06:28,000
It does exactly what I told you to do.

95
00:06:28,000 --> 00:06:32,000
It resizes the matrix every time a new motion occurs

96
00:06:32,000 --> 00:06:35,000
and then goes back to the original size,

97
00:06:35,000 --> 00:06:39,000
and I've printed out here as an example the information matrix omega

98
00:06:39,000 --> 00:06:44,000
and in the vector C that I obtained, and I also printed out the final result.

99
00:06:44,000 --> 00:06:50,000
In the final result, we get exactly the same estimated pose as for the full SLAM algorithm

100
00:06:50,000 --> 00:06:54,000
which is 86.0 and 33.7.

101
00:06:54,000 --> 00:06:59,000
I go down, these are exactly the same number for the estimated pose; that's how you can verify this.

102
00:06:59,000 --> 00:07:01,000
The same is true for the estimated landmark.

103
00:07:01,000 --> 00:07:08,000
Those coordinates are identical despite the fact that I reduce the size of omega and C,

104
00:07:08,000 --> 00:07:13,000
but when I print omega and C, we find that the dimensionality is reduced.

105
00:07:13,000 --> 00:07:21,000
It's an 8 x 8 matrix omega, and the number 8 comes because there's 6 coordinates for the landmarks and 1 final robot pose.

106
00:07:21,000 --> 00:07:25,000
That is substantially smaller than the matrix I would obtain

107
00:07:25,000 --> 00:07:31,000
for the full SLAM case, and the same is true for the information vector of size 8; here's an example.

108
00:07:31,000 --> 00:07:37,000
What you are asked to do is to fill the entire online SLAM routine and to do this,

109
00:07:37,000 --> 00:07:46,000
every time you get a new pose, you want to expand to grow the matrix by inserting something right behind the existing pose.

110
00:07:46,000 --> 00:07:51,000
You then run take to take out the sub-matrix.

111
00:07:51,000 --> 00:07:59,000
You also calculate A, B, and for the information vector C,

112
00:07:59,000 --> 00:08:05,000
and then as before your reduced omega is obtained with this equation,

113
00:08:05,000 --> 00:08:08,000
and your reduced C is obtained with this equation.

114
00:08:08,000 --> 00:08:13,000
If you make no mistake, then you get exactly the same area as you had before,

115
00:08:13,000 --> 00:08:16,000
and you can test your routine and arbitrary maps and arbitrary data sets,

116
00:08:16,000 --> 00:08:18,000
and it'll just be fine.

117
00:08:18,000 --> 00:08:21,000
So, good luck; this is a wonderful programming assignment

118
00:08:21,000 --> 00:08:26,000
because it gives you the first really scalable SLAM algorithm

119
00:08:26,000 --> 00:08:29,000
and when you implement it, it's actually a major achievement.

120
00:08:29,000 --> 00:08:35,000
I can tell you it took the scientific feat of SLAM easily 15 years to really discover this form,

121
00:08:35,000 --> 00:08:40,000
and ever since what was really complex and involved lots of common failures,

122
00:08:40,000 --> 00:08:45,000
and I can tell you lots of headaches, became amazingly easy.

123
00:08:45,000 --> 00:08:50,000
So, implement it and you can call yourself a robotic mapper.
