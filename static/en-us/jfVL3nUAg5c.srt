1
00:00:00,160 --> 00:00:02,480
To understand this a little bit more, let's take a look at a very unique

2
00:00:02,480 --> 00:00:06,200
scenario. Let's say we have a happy, little tank trudging along through a war

3
00:00:06,200 --> 00:00:09,890
zone. The tank randomly fires a bullet into the air, which is actually aimed at

4
00:00:09,890 --> 00:00:13,821
a bunch of little enemy soldiers camping out in the environment. The tank

5
00:00:13,821 --> 00:00:17,312
itself has a small amount of hit points, say three or so. And the mortar in

6
00:00:17,312 --> 00:00:19,706
flight will actually destroy all of these awesome little enemy soldiers up

7
00:00:19,706 --> 00:00:23,976
here. The question for you, then, is this. Which updates first in your update

8
00:00:23,976 --> 00:00:28,108
loop? Let's say, for instance, the infantry update first. Well, this frame, the

9
00:00:28,108 --> 00:00:30,650
infantry, will shoot at the tank and kill the tank, and then the bullet will

10
00:00:30,650 --> 00:00:34,709
update, killing the infantry. This would actually create a level playing field.

11
00:00:34,709 --> 00:00:37,735
An alternative scenario, however, is what if the bullet updates first? The

12
00:00:37,735 --> 00:00:40,660
bullet would actually kill the infantry and they wouldn't have time to update

13
00:00:40,660 --> 00:00:44,052
and kill the tank. In this solution, the tank itself will actually be pretty

14
00:00:44,052 --> 00:00:47,525
happy trudging along through the war zone. Now, there's not really a good

15
00:00:47,525 --> 00:00:51,710
pattern to attack all this. Most networked RTS games actually allow this to

16
00:00:51,710 --> 00:00:55,545
occur quite blindly, and simply ensure that all the clients in the simulation

17
00:00:55,545 --> 00:01:00,612
have the same ordering of entities. This ensures that one client doesn't update

18
00:01:00,612 --> 00:01:03,372
infantry then bullet then tank and the other one do tank then bullet then

19
00:01:03,372 --> 00:01:07,502
infantry. I've also seen some games take a different approach to it, in a

20
00:01:07,502 --> 00:01:11,450
bucketized manner. So, for instance, you may go ahead and bucketize and say

21
00:01:11,450 --> 00:01:14,650
that all of your infantry update first, and then all of your tanks and then all

22
00:01:14,650 --> 00:01:19,100
of your bullets. If you ensure this grouped ordering of entities this allows

23
00:01:19,100 --> 00:01:21,998
you to have the infantry get the upper hand on tanks which gets the upper hand

24
00:01:21,998 --> 00:01:26,494
on those evil, evil bullets. With this layout the infantry would update first,

25
00:01:26,494 --> 00:01:29,361
killing the tank, and then the bullet would update this frame killing the

26
00:01:29,361 --> 00:01:32,933
infantry, leaving a level playing field for next frame.
