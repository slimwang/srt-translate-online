1
00:00:00,190 --> 00:00:02,944
Take a look and examine the legs of the model. I expect you'll see some odd

2
00:00:02,944 --> 00:00:05,878
shading on them. If you make the headlight brighter, the effect will become

3
00:00:05,878 --> 00:00:08,811
more obvious. Moving the spot like this is likely to shift these patterns

4
00:00:08,811 --> 00:00:12,182
around. The shadow mapping algorithm works by seeing the world from the lights

5
00:00:12,182 --> 00:00:16,010
point of view. The depth image form is then checked during normal rendering.

6
00:00:16,010 --> 00:00:18,971
The depth of the surface visible at a point is compared with the transformed

7
00:00:18,971 --> 00:00:23,140
depth of the shadow map buffer holds. And that's where all the trouble begins.

8
00:00:23,140 --> 00:00:25,870
The pixels in the Light's image of the world don't exactly match-up with those

9
00:00:25,870 --> 00:00:29,924
in the Camera's view. These cause some form of what's called Surface Acne,

10
00:00:29,924 --> 00:00:33,820
where little dark dots or patches appear in areas that should be fully lit.

11
00:00:33,820 --> 00:00:37,194
Take this example. The Light's view of the surface says that it's 3.80 meters

12
00:00:37,194 --> 00:00:41,500
away from the light. The Camera's view of the surface says that the location is

13
00:00:41,500 --> 00:00:45,382
3.81 meters away from the light. Since this value is slightly higher than the

14
00:00:45,382 --> 00:00:49,233
Light's view. The surface is considered in shadow. The surface is something

15
00:00:49,233 --> 00:00:52,692
that should be impossible. It shadows itself, as the depths don't compare as

16
00:00:52,692 --> 00:00:56,605
well as we would like. Here's a demo showing the problem, as well as a partial

17
00:00:56,605 --> 00:01:00,056
solution. On these surfaces, you can see patterns of acne, where the geometry

18
00:01:00,056 --> 00:01:03,530
is shadowing itself. One obvious solution is to add some tolerance value,

19
00:01:03,530 --> 00:01:07,578
called the shadow bias. If the cameras computed distance along the lights view

20
00:01:07,578 --> 00:01:11,710
plus this bias is less than the lights depth, then consider the surface lit.

21
00:01:11,710 --> 00:01:15,270
Unfortunately, a simple bias leads to another problem called Peter Panning.

22
00:01:15,270 --> 00:01:18,090
Just like Peter Pan the object starts to look as if it's detached from its

23
00:01:18,090 --> 00:01:22,361
shadow and sometimes as if it's hovering above its true location. In the 35 or

24
00:01:22,361 --> 00:01:25,369
so years this algorithm has been around, many different solutions have been

25
00:01:25,369 --> 00:01:29,058
proposed to this problem. There are other problems with shadow mappings. Such

26
00:01:29,058 --> 00:01:32,598
as the edges of the shadows looking pixelated. And solutions such as percentage

27
00:01:32,598 --> 00:01:36,288
cluster filtering and cascaded shadow maps. I won't explain these here except

28
00:01:36,288 --> 00:01:39,330
to say that 3JS has both of these solutions built in.
