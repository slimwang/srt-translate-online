1
00:00:00,320 --> 00:00:02,906
The answer is (q(p(n))).

2
00:00:02,906 --> 00:00:07,710
It's tempting to think that we run N and
then we run M.

3
00:00:07,710 --> 00:00:11,270
So, the total running time should
just be the sum of the two

4
00:00:11,270 --> 00:00:12,300
individual running times.

5
00:00:13,510 --> 00:00:15,750
The trouble with this,
is that it doesn't account for

6
00:00:15,750 --> 00:00:21,570
the possibility that the output of N
could be much longer than the input.

7
00:00:21,570 --> 00:00:24,780
In fact, it could be almost p(n).

8
00:00:24,780 --> 00:00:28,455
Most of the program's instructions
could have been print statements, or

9
00:00:28,455 --> 00:00:30,916
writes to the end of the tape for
Turing machines.

10
00:00:30,916 --> 00:00:39,040
So that the output of N is p(n) long and
would then take q(p(n)) time.

11
00:00:39,040 --> 00:00:42,370
And then that becomes
the dominant factor in our bound.

12
00:00:42,370 --> 00:00:48,390
In particular, this means that if both
p and q are bounded by polynomials,

13
00:00:48,390 --> 00:00:52,560
then the running time of the composition
will also be bounded by a polynomial,

14
00:00:52,560 --> 00:00:55,290
since the composition of two
polynomials is a polynomial.
