1
00:00:00,360 --> 00:00:02,820
Before talking about conditional weight variables, I want to make a

2
00:00:02,820 --> 00:00:04,820
distinction between mutual exclusion and

3
00:00:04,820 --> 00:00:07,070
synchronization. Mutual exclusion, as we

4
00:00:07,070 --> 00:00:09,540
have seen, is about preventing two threads from accessing a

5
00:00:09,540 --> 00:00:12,460
resource, often a piece of memory, at the same time

6
00:00:12,460 --> 00:00:15,660
regardless of exactly where they are in their execution. For

7
00:00:15,660 --> 00:00:18,860
example, if Thread 1 is accessing this memory, then the

8
00:00:18,860 --> 00:00:22,580
lock should block Thread 2 from accessing it or vice

9
00:00:22,580 --> 00:00:25,850
versa. If Thread 2 is accessing the piece of memory then

10
00:00:25,850 --> 00:00:29,310
the lock should block Thread 1 from accessing it. Synchronization,

11
00:00:29,310 --> 00:00:32,259
by contrast, is about controlling where the threads are in

12
00:00:32,259 --> 00:00:35,716
the flow of their executions. For instance, it might be

13
00:00:35,716 --> 00:00:39,055
important that Thread 1 completes some task A before Thread 2

14
00:00:39,055 --> 00:00:42,200
can start task B. In effect, we want the message

15
00:00:42,200 --> 00:00:46,010
that A happened to get sent to thread B. Mutual exclusion

16
00:00:46,010 --> 00:00:48,620
and synchronization are related. But it is important as a

17
00:00:48,620 --> 00:00:51,140
program to know which of these goals you are after so

18
00:00:51,140 --> 00:00:52,650
that you can use the right constructs.
