1
00:00:00,036 --> 00:00:05,174
Assuming that you're already using a library--say, the equivalent of one of these libraries on the CPU,

2
00:00:05,174 --> 00:00:09,943
then porting to use one of the GPU libraries is a simple 3-step process.

3
00:00:09,943 --> 00:00:14,587
First, you need to substitute library calls with their equivalent, CUDA library calls.

4
00:00:14,587 --> 00:00:17,728
So if you're using blas, and you call the function SAXPY--

5
00:00:17,728 --> 00:00:21,230
stands for Single Precision AX plus Y,

6
00:00:21,230 --> 00:00:25,595
then you will simply shift that to be a call to cublas SAXPY.

7
00:00:25,595 --> 00:00:28,114
Next, you need to manage data locality,

8
00:00:28,114 --> 00:00:31,901
so if you are going to be running on the GPU, you want the data to already be on the GPU.

9
00:00:31,901 --> 00:00:36,606
So for example you might need to call CUDA Malloc and CUDA Memcpy

10
00:00:36,606 --> 00:00:39,772
to move the data on the GPU where the library can use to it.

11
00:00:39,772 --> 00:00:45,054
Cublas as CUDA cublas Alloc, cublas SetVector, cublas get vector, for getting the result.

12
00:00:45,054 --> 00:00:50,420
And some of the libraries manage this entirely transparently for you, and others you do it explicitly.

13
00:00:50,420 --> 00:00:54,531
And finally, step 3, you want to rebuild and link with the CUDA accelerated library;

14
00:00:54,531 --> 00:00:58,531
for example, calling the compiler with the -L cublas line.
