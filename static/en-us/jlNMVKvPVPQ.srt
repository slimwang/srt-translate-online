1
00:00:00,054 --> 00:00:03,964
So one way we could do this operation is to allocate the maximum space per element.

2
00:00:03,964 --> 00:00:08,985
In this case we would create an output array with 5 output triangles per input triangle.

3
00:00:08,985 --> 00:00:12,369
And we're going to put these in an intermediate array and then compact the result.

4
00:00:12,369 --> 00:00:15,196
However, this has 2 significant disadvantages.

5
00:00:15,196 --> 00:00:17,759
The first is that it's really wasteful in space.

6
00:00:17,759 --> 00:00:22,584
We've now allocated an intermediate array that has the maximum amount of space per element,

7
00:00:22,584 --> 00:00:25,475
and that's going to lead to a very large array overall.

8
00:00:25,475 --> 00:00:29,682
The second disadvantage is that now we have to scan this large intermediate array,

9
00:00:29,682 --> 00:00:32,782
and that's not going to be as efficient as we would like either.

10
00:00:32,782 --> 00:00:34,993
So how can we do this more efficiently?

11
00:00:34,993 --> 00:00:37,180
So let's go back to what we'd really like to do.

12
00:00:37,180 --> 00:00:42,021
What we'd like to do is have a list of allocation requests, 1 per input element,

13
00:00:42,021 --> 00:00:45,627
and then get back a location to write your requests.

14
00:00:45,627 --> 00:00:50,894
As an example, let's say we have 8 input triangles here, and those 8 triangles want to generate,

15
00:00:50,894 --> 00:00:57,496
in order, 1, 0, 1, 2, 1, 0, 3, and 0 triangles.

16
00:00:57,496 --> 00:00:59,503
So what's that going to look like?

17
00:00:59,503 --> 00:01:05,527
The first input element is going to want to write its 1 triangle here into the output array.

18
00:01:05,527 --> 00:01:09,471
The second triangle isn't going to have any output elements to write.

19
00:01:09,471 --> 00:01:15,922
The third input triangle is wanting to write into this element here. The next triangle has 2 outputs.

20
00:01:15,922 --> 00:01:18,456
It will write them into the next 2 slots of the array.

21
00:01:18,456 --> 00:01:23,059
The next triangle wants to write its output here. The next triangle wants to write nothing.

22
00:01:23,059 --> 00:01:29,331
The next triangle wants to write its output into these 3 output slots.

23
00:01:29,331 --> 00:01:33,938
So what we want to generate here is the output addresses for these.

24
00:01:33,938 --> 00:01:39,847
He wants to write his output into address 0. He wants to write his output into address 1.

25
00:01:39,847 --> 00:01:43,947
He wants to write his output into address 2 and 3.

26
00:01:43,947 --> 00:01:49,253
And this guy wants to write his output into addresses 5, 6, and 7, and so on.

27
00:01:49,253 --> 00:01:52,761
And look. This is exclusive scan as well.

28
00:01:52,761 --> 00:01:55,217
It generalizes what we did with compact.

29
00:01:55,217 --> 00:02:00,959
In compact we allocated 1 slot in the output array for each true element and 0 for each false element.

30
00:02:00,959 --> 00:02:05,504
Instead, now we've generalized this so that we simply indicate in the input array

31
00:02:05,504 --> 00:02:07,725
the exact number that we need.

32
00:02:07,725 --> 00:02:09,725
This is simpler and it's more efficient.

33
00:02:09,725 --> 00:02:14,304
Instead of scanning an array that has the maximum possible allocation for all elements--

34
00:02:14,304 --> 00:02:17,672
in the case of clipping, 5 times the size of the input array--

35
00:02:17,672 --> 00:02:21,544
now we just have to scan something the size of the input array.

36
00:02:21,544 --> 00:02:23,783
So it's more efficient to be able to do it this way.

37
00:02:23,783 --> 00:02:26,396
So that's a couple of interesting applications of scan.

38
00:02:26,396 --> 00:02:29,603
If you're doing any sort of GPU programming with irregular workloads,

39
00:02:29,603 --> 00:02:32,342
you'll find that scan comes up all the time.

40
00:02:32,342 --> 00:02:36,176
Recent work has used scan in diverse application domains, such as graft reversal,

41
00:02:36,176 --> 00:02:39,539
data compression, and collision detection, among many others.

42
00:02:39,539 --> 00:02:45,208
And we'll see later in this lecture that scan is the core of the fastest GPU sort as well.
