1
00:00:00,665 --> 00:00:02,570
All right, you're done.

2
00:00:02,570 --> 00:00:04,110
Let's take a look at the solution.

3
00:00:04,780 --> 00:00:07,130
Delete is actually pretty straightforward.

4
00:00:07,720 --> 00:00:10,860
Note that once again
we have almost useless parameters.

5
00:00:10,860 --> 00:00:12,780
S actually refers to our selection

6
00:00:12,780 --> 00:00:15,760
while our strings here
are actually our selection Rs.

7
00:00:15,900 --> 00:00:20,290
One little trickiness in delete is that
if you actually put no selection in,

8
00:00:20,290 --> 00:00:22,070
it'll delete all the rows.

9
00:00:22,680 --> 00:00:25,040
I still want to make sure we
notify the change.

10
00:00:25,480 --> 00:00:27,500
I've done the slide optimization here.

11
00:00:27,620 --> 00:00:30,140
It would be fine
to just notify the change always,

12
00:00:30,680 --> 00:00:32,580
but I've decided
if no rows have been deleted,

13
00:00:33,380 --> 00:00:35,276
then we should bother not notifying.

14
00:00:35,776 --> 00:00:39,532
Unless the selection is null,
in which case we deleted all the rows,

15
00:00:40,152 --> 00:00:43,020
but again, it would be fine to just
use notify change here

16
00:00:43,440 --> 00:00:45,040
even if no rows are actually deleted.

17
00:00:45,970 --> 00:00:48,580
After all, the intention was that rows
would be deleted.

18
00:00:48,990 --> 00:00:51,460
Once again, let's take pity on someone

19
00:00:51,460 --> 00:00:55,120
who might have to maintain your code,
and change these default parameter names

20
00:00:55,120 --> 00:00:59,860
to something more useful
like selection and selectionargs.

21
00:01:03,480 --> 00:01:06,160
Other than that,
update looks almost exactly like delete.

22
00:01:06,690 --> 00:01:09,300
Once again, we are returning
the number of rows

23
00:01:09,300 --> 00:01:12,310
impacted by the update,
and we don't bother notifying

24
00:01:12,310 --> 00:01:13,896
if no rows were impacted.

25
00:01:14,036 --> 00:01:16,152
Now that we've finished
writing update and delete

26
00:01:16,152 --> 00:01:18,390
we can go back to test provider
and add some tests.

27
00:01:18,950 --> 00:01:21,363
First, let's remove test delete.db,

28
00:01:21,503 --> 00:01:23,876
the last test that doesn't depend
on the provider.

29
00:01:24,546 --> 00:01:26,730
Instead, let's have a test that deletes

30
00:01:26,730 --> 00:01:29,300
all the records and checks to make sure
they're actually deleted.

31
00:01:29,940 --> 00:01:31,710
Remember, passing a null query

32
00:01:31,710 --> 00:01:33,760
actually deletes
all of the records in a table.

33
00:01:33,980 --> 00:01:37,000
So this is really straightforward,
just passing nulls.

34
00:01:37,000 --> 00:01:39,040
Since we're depending
on the database for our deletes,

35
00:01:39,040 --> 00:01:43,430
it's not all that particularly important
that we actually test the delete functions,

36
00:01:43,430 --> 00:01:45,790
although it would be nice to add that later on.

37
00:01:45,900 --> 00:01:47,363
The reason we'd want to add it

38
00:01:47,363 --> 00:01:49,916
is to make sure
that our constraints are valid.

39
00:01:49,916 --> 00:01:51,780
And once we're done doing the deletes,

40
00:01:51,780 --> 00:01:53,860
we check to make sure
that there are no rows left.

41
00:01:54,800 --> 00:01:58,240
Note that we have to delete weather entry
before we delete location entry

42
00:01:58,240 --> 00:02:01,620
because you've got constraints
in the database that prevent weather entry

43
00:02:01,620 --> 00:02:04,170
from existing if location entries
do not also exist

44
00:02:04,170 --> 00:02:06,403
and would also prevent
the deletion of those entries.

45
00:02:06,403 --> 00:02:08,786
So let's check to see
whether that actually works.

46
00:02:08,786 --> 00:02:11,440
All right, that passes. Good news.

47
00:02:12,030 --> 00:02:14,430
Now we can add the same test
to the end to make sure

48
00:02:14,430 --> 00:02:17,210
we can delete all of the rows
at the end and it still works.

49
00:02:17,470 --> 00:02:18,940
And as you can see, they still pass.

50
00:02:19,350 --> 00:02:22,550
So now we know we've deleted records
before and after running tests.

51
00:02:23,030 --> 00:02:24,420
Now let's try that update.

52
00:02:25,370 --> 00:02:27,490
We'll do just an update of the location.

53
00:02:28,030 --> 00:02:30,240
Again, let's start by deleting all records

54
00:02:30,240 --> 00:02:32,393
and inserting a record that we want to update.

55
00:02:32,973 --> 00:02:34,606
One of the nice things
about content values

56
00:02:34,606 --> 00:02:37,170
is you can actually copy them
using a copy constructor.

57
00:02:37,710 --> 00:02:40,900
After that, we can add the ID
we want to update

58
00:02:40,900 --> 00:02:43,520
and then put the name of the city
we want to update it to.

59
00:02:43,520 --> 00:02:46,240
In this case, from North Pole
to Santa's Village.

60
00:02:46,650 --> 00:02:48,830
And then, finally, we call update.

61
00:02:49,470 --> 00:02:51,925
Assert that we've actually
updated exactly one record

62
00:02:51,925 --> 00:02:54,810
as we'd expect, and then do a query on that,

63
00:02:55,600 --> 00:02:58,980
validating our cursor,
making sure our update actually works.

64
00:02:58,980 --> 00:03:01,330
And then finally, we close our cursor.

65
00:03:01,330 --> 00:03:02,690
It all looks pretty good.

66
00:03:02,690 --> 00:03:05,400
And let's see that it actually runs,
and does the right thing.

67
00:03:06,270 --> 00:03:07,910
And our tests pass.

68
00:03:07,910 --> 00:03:12,170
So, we've now proved that we
can update, delete, insert, and query,

69
00:03:12,170 --> 00:03:14,250
and all this is fully tested.

70
00:03:14,250 --> 00:03:16,280
In other words, the bones of our application

71
00:03:16,280 --> 00:03:19,850
are finished, just waiting to attach our UI.

72
00:03:19,850 --> 00:03:22,170
Let's go through and attach some of our UI.
