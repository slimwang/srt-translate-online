1
00:00:00,680 --> 00:00:04,950
Before moving on, I want to show you one
more useful approach to print debugging.

2
00:00:04,950 --> 00:00:08,410
You may have noticed that while print
statements can help us solve problems,

3
00:00:08,410 --> 00:00:10,560
they're kind of hard to maintain.

4
00:00:10,560 --> 00:00:14,110
For example, if we wanted to temporarily
remove certain print statements from

5
00:00:14,110 --> 00:00:19,440
code, we'd either have to comment them
or we'd have to delete them completely.

6
00:00:19,440 --> 00:00:21,530
And there is also other considerations.

7
00:00:21,530 --> 00:00:24,890
For example, if you wanted to
have print statements in some

8
00:00:24,890 --> 00:00:28,845
debugging version of your code but then
not in the ship version of the code.

9
00:00:28,845 --> 00:00:32,820
You'd also have to remove them and
this kind of maintenance just gets

10
00:00:32,820 --> 00:00:37,940
tedious and one commonly used
solution for this is logging.

11
00:00:37,940 --> 00:00:40,790
Logging or logging systems and
frameworks

12
00:00:40,790 --> 00:00:44,650
allow us to write log statements, much
like print statements, that can include

13
00:00:44,650 --> 00:00:49,095
additional information such as data,
function names and the line numbers.

14
00:00:49,095 --> 00:00:53,830
And most importantly, you can specify
level of severity for each log

15
00:00:53,830 --> 00:00:58,630
statement, which will control the actual
statements that get printed based on

16
00:00:58,630 --> 00:01:03,200
the overarching severity that you've
set for your particular application.

17
00:01:03,200 --> 00:01:05,990
And I'll show you how this
works in just a second.

18
00:01:05,990 --> 00:01:11,710
So one such logging framework is
Dave Wood's XCGLogger for Swift.

19
00:01:11,710 --> 00:01:13,690
And this is the GitHub project for it.

20
00:01:13,690 --> 00:01:16,230
I've posted a link in the instructor
notes if you're interested.

21
00:01:17,470 --> 00:01:19,000
So I've already downloaded
the project and

22
00:01:19,000 --> 00:01:21,780
I'm going to run the demo
application that comes with it.

23
00:01:22,920 --> 00:01:26,160
You can see stated at the bottom
of the view that the XCGLogger

24
00:01:26,160 --> 00:01:29,240
will only log messages that are set for
the same or

25
00:01:29,240 --> 00:01:34,150
higher log level or you may hear it
referred to as a severity level.

26
00:01:34,150 --> 00:01:35,890
So the current log level is debug.

27
00:01:35,890 --> 00:01:38,390
And if I click this Debug button,

28
00:01:38,390 --> 00:01:41,850
we see that the execute
debug code block was logged.

29
00:01:41,850 --> 00:01:46,640
Because it corresponds to
a debug log statement.

30
00:01:46,640 --> 00:01:49,310
Let me hide this away so
we can see it a little bit better.

31
00:01:49,310 --> 00:01:51,320
If I click Info.

32
00:01:51,320 --> 00:01:53,430
Info is also log.

33
00:01:53,430 --> 00:01:56,050
but if I click Verbose, nothing happens.

34
00:01:56,050 --> 00:01:58,890
And the reason that
nothing happens is because

35
00:01:58,890 --> 00:02:02,120
verbose is a lower level than our
current level which is debug, but

36
00:02:02,120 --> 00:02:06,700
if I drag it down to verbose,
now verbose is executed.

37
00:02:06,700 --> 00:02:11,110
So we can play with this again,
we'll go up to error, so now error and

38
00:02:11,110 --> 00:02:15,310
severe are the only ones that should
work, here we go, both of them.

39
00:02:15,310 --> 00:02:19,910
The Warning nothing, Info nothing,
Debug nothing, Verbose nothing.

40
00:02:19,910 --> 00:02:21,390
And it's that simple.

41
00:02:21,390 --> 00:02:24,330
If you want to know more feel free
to play around with the demo app

42
00:02:24,330 --> 00:02:25,110
before moving on.
