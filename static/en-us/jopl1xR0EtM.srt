1
00:00:00,230 --> 00:00:02,440
Okay, so let's look at the solution.

2
00:00:02,440 --> 00:00:05,041
If you said either layout_width or
layout_height,

3
00:00:05,041 --> 00:00:07,040
those wouldn't be bad guesses.

4
00:00:07,040 --> 00:00:09,750
It's really important to choose
these values carefully as as they

5
00:00:09,750 --> 00:00:12,310
affect the space that
your element takes up.

6
00:00:12,310 --> 00:00:14,905
For example let's talk
about layout_width.

7
00:00:14,905 --> 00:00:17,595
Suppose that I have
a text box that says, hi.

8
00:00:17,595 --> 00:00:20,655
And I set the layout_width
to be wrap content.

9
00:00:20,655 --> 00:00:21,545
By default,

10
00:00:21,545 --> 00:00:25,295
this will just stick that text box
into the upper left-hand corner.

11
00:00:25,295 --> 00:00:28,695
Then, if I use another attribute
to push it over to the right,

12
00:00:28,695 --> 00:00:30,625
the text box will be here.

13
00:00:30,625 --> 00:00:31,315
If instead,

14
00:00:31,315 --> 00:00:36,960
I use match parent, by default, hi will
still be in the upper left-hand corner.

15
00:00:36,960 --> 00:00:40,050
But if I then try to set an attribute
to push it to the right,

16
00:00:40,050 --> 00:00:42,140
it'll try to push this
text box to the right.

17
00:00:42,140 --> 00:00:45,520
But it already is as far right as
it could be because it's expanding

18
00:00:45,520 --> 00:00:48,700
to match the parent and
fill the whole view group.

19
00:00:48,700 --> 00:00:50,120
In the case of using match parent,

20
00:00:50,120 --> 00:00:52,900
we can see that the hi text
hasn't actually moved.

21
00:00:52,900 --> 00:00:55,760
So one thing that's hopefully clear for
this example is that we're going to

22
00:00:55,760 --> 00:00:59,680
want to set both layout_width and
layout_height to wrap content.

23
00:00:59,680 --> 00:01:01,980
So it wraps exactly
around the content and

24
00:01:01,980 --> 00:01:06,160
then when you tell the TextView to
be either to the right, left, above,

25
00:01:06,160 --> 00:01:10,210
below, it'll actually move
that text to that location.

26
00:01:10,210 --> 00:01:13,650
Okay, so both layout width and
layout height are important.

27
00:01:13,650 --> 00:01:17,380
TextStyle is an attribute for
bolding or italicizing text, and

28
00:01:17,380 --> 00:01:20,630
it really doesn't involve positioning or
spacing.

29
00:01:20,630 --> 00:01:24,530
Orientation is an attribute used
specifically with linear layouts,

30
00:01:24,530 --> 00:01:27,780
to determine whether they are going
to be vertical or horizontal.

31
00:01:27,780 --> 00:01:31,505
Because we're using a relative layout
this also doesn't make any sense.

32
00:01:31,505 --> 00:01:35,640
Layout_weight is really useful for
spacing out elements evenly but again,

33
00:01:35,640 --> 00:01:37,900
this is a linear layout attribute.

34
00:01:37,900 --> 00:01:40,150
Which leaves us with these attributes.

35
00:01:40,150 --> 00:01:42,920
All of these attributes have
to do with relative layouts.

36
00:01:43,980 --> 00:01:48,280
Now these attributes layout_to Right Of
and layout_below are categorically

37
00:01:48,280 --> 00:01:52,980
different than the layout_alignParent
either Bottom left or right.

38
00:01:52,980 --> 00:01:55,250
These attributes take
two child views and

39
00:01:55,250 --> 00:01:57,800
position them relative to one another.

40
00:01:57,800 --> 00:02:03,070
For example, we could say position
from Lyla to the right of and

41
00:02:03,070 --> 00:02:05,920
below the happy birthday Ben TextView.

42
00:02:05,920 --> 00:02:07,810
Let's see what that would like like.

43
00:02:07,810 --> 00:02:09,400
Okay, so if we did that and

44
00:02:09,400 --> 00:02:12,920
we just looked at the two TextViews,
this is the code that we would use.

45
00:02:12,920 --> 00:02:16,580
With the happy birthday Ben TextView,
I've created an ID here.

46
00:02:16,580 --> 00:02:21,430
And then I refer to that ID from the
from Lyla TextView with the layout below

47
00:02:21,430 --> 00:02:23,080
and layout right of attributes.

48
00:02:24,350 --> 00:02:28,530
Here's a picture of what that actually
looks like in the app and unfortunately,

49
00:02:28,530 --> 00:02:30,510
that didn't really do what we wanted.

50
00:02:30,510 --> 00:02:33,180
The From Lyla view is
in fact to the right of

51
00:02:33,180 --> 00:02:35,300
the Happy Birthday Ben TextView.

52
00:02:35,300 --> 00:02:39,930
And it is also below, but
it's not in the lower right-hand corner.

53
00:02:39,930 --> 00:02:41,150
So these two aren't correct.

54
00:02:42,350 --> 00:02:45,110
Okay, so that leaves us with
these three attributes,

55
00:02:45,110 --> 00:02:47,080
which will take my TextView and

56
00:02:47,080 --> 00:02:51,720
align them in relation to the Parent,
which happens to be the whole screen.

57
00:02:51,720 --> 00:02:54,720
Now I want From Lyla to be down here.

58
00:02:54,720 --> 00:02:58,310
Which is in the lower right-hand
corner of the parent.

59
00:02:58,310 --> 00:03:02,880
So I'm not going to be using
layout_alignParentLeft, so in fact I

60
00:03:02,880 --> 00:03:07,330
will be using layout_alignParentRight
and layout_alignParentBottom.

61
00:03:07,330 --> 00:03:09,660
Let's see how this all
comes together in the code.

62
00:03:09,660 --> 00:03:11,114
Okay, so first things first.

63
00:03:11,114 --> 00:03:14,469
I'm going to find the From Lyla TextView
and iIm going to make sure that

64
00:03:14,469 --> 00:03:18,617
the layout width and the layout height
are both set to wrap_content otherwise,

65
00:03:18,617 --> 00:03:22,910
even if we position our textview
correctly it might not actually move.

66
00:03:22,910 --> 00:03:25,450
Next I'm going to add
the additional attributes.

67
00:03:25,450 --> 00:03:27,980
For the value, I go ahead and put true.

68
00:03:27,980 --> 00:03:31,430
This is affirming that I want
this TextView to be aligned

69
00:03:31,430 --> 00:03:32,490
to the Parent's Right.

70
00:03:32,490 --> 00:03:36,080
The other value I could put here
is false, but that would mean

71
00:03:36,080 --> 00:03:40,220
that it is false that it aligns to the
Parent Right, which is not what I want.

72
00:03:40,220 --> 00:03:42,790
So now I'm going to type the other
attribute to put at the bottom.

73
00:03:43,800 --> 00:03:45,370
And I will also set this to true.

74
00:03:45,370 --> 00:03:49,310
All right, so for those of you at home
this might be a little bit hard to see

75
00:03:49,310 --> 00:03:52,650
but it seems like we've positioned
our view down here correctly.

76
00:03:52,650 --> 00:03:55,480
That said, let's see if it actually
shows up correctly on the phone

77
00:03:55,480 --> 00:03:57,705
by pressing the green Run button.

78
00:03:57,705 --> 00:03:59,645
Okay, I select my phone and I click OK.

79
00:04:00,705 --> 00:04:01,665
Okay, awesome.

80
00:04:01,665 --> 00:04:05,795
So up here I have my Happy Birthday,
Ben, and down here, I have From Lyla.

81
00:04:05,795 --> 00:04:07,085
And with that,

82
00:04:07,085 --> 00:04:09,395
everything looks like it's pretty
much in the correct position.
