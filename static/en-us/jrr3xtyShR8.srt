1
00:00:00,490 --> 00:00:02,740
Now let's look at the client side. Look

2
00:00:02,740 --> 00:00:05,780
at the ease with which any arbitrary client on

3
00:00:05,780 --> 00:00:08,860
the network can access the server object. What

4
00:00:08,860 --> 00:00:12,680
a client will do is, look up the service

5
00:00:12,680 --> 00:00:17,100
provider, by contacting a boot strap name server

6
00:00:17,100 --> 00:00:20,232
in the Java RMI system. And, it does a

7
00:00:20,232 --> 00:00:25,510
look up of the URL and when it does this look up, so this URL is published,

8
00:00:25,510 --> 00:00:30,480
once it is published, then it can look up this URL. And when it does this look

9
00:00:30,480 --> 00:00:33,520
up of this URL using the facility that's available

10
00:00:33,520 --> 00:00:37,750
in the Java RMI system, then a local access

11
00:00:37,750 --> 00:00:40,910
point for that object is created on the

12
00:00:40,910 --> 00:00:43,530
client side. And so now we've got the access

13
00:00:43,530 --> 00:00:46,970
to the object that is at the server through

14
00:00:46,970 --> 00:00:51,060
this local name account. And once I have that,

15
00:00:51,060 --> 00:00:54,460
then I can do invocations on the methods that

16
00:00:54,460 --> 00:00:59,000
is available in this server object by simply calling those

17
00:00:59,000 --> 00:01:01,410
methods. I can do a deposit. I can do

18
00:01:01,410 --> 00:01:03,750
a withdrawal. I can do a balance check. All of

19
00:01:03,750 --> 00:01:06,400
this, they look like normal procedure calls so far

20
00:01:06,400 --> 00:01:09,130
as the client is concerned. But each of this is

21
00:01:09,130 --> 00:01:12,910
really a call that is going out to the server

22
00:01:12,910 --> 00:01:16,390
wherever that server happens to be, and the Java Runtime

23
00:01:16,390 --> 00:01:19,290
system knows how to locate that server in

24
00:01:19,290 --> 00:01:21,810
order to do this invocation. That's the power of

25
00:01:21,810 --> 00:01:25,470
the Java RMI. The client does not know

26
00:01:25,470 --> 00:01:28,740
and does not care the location of the server.

27
00:01:28,740 --> 00:01:30,890
And if there a failures in any of

28
00:01:30,890 --> 00:01:34,770
these function executions, then remote exceptions will be thrown

29
00:01:34,770 --> 00:01:37,810
by the server through the Java run-time system

30
00:01:37,810 --> 00:01:42,050
back to the client. Of course with the networked

31
00:01:42,050 --> 00:01:46,110
nature of this client/server relationship, if a remote expression

32
00:01:46,110 --> 00:01:50,115
is thrown and the client sees that the invocation

33
00:01:50,115 --> 00:01:52,970
did not succeed, which is a reason the client

34
00:01:52,970 --> 00:01:55,460
saw an exception thrown. It may have no way

35
00:01:55,460 --> 00:01:59,540
of knowing at what point in the invocation the

36
00:01:59,540 --> 00:02:02,390
call actually failed. And this is one of the

37
00:02:02,390 --> 00:02:04,940
problems when you have services that you have to

38
00:02:04,940 --> 00:02:07,230
reach across the network and you have to handle

39
00:02:07,230 --> 00:02:08,310
the exception.
