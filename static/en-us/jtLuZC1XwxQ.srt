1
00:00:00,290 --> 00:00:03,660
Here's a little warm-up exercise to get
you thinking about Parallel Algorithms

2
00:00:03,660 --> 00:00:04,770
on Trees.

3
00:00:04,770 --> 00:00:06,780
Consider the following tree.

4
00:00:06,780 --> 00:00:09,430
By the way, you can store this
tree in an array pool style,

5
00:00:09,430 --> 00:00:11,500
just as you did with linked lists.

6
00:00:11,500 --> 00:00:14,320
In particular,
let's start by numbering the nodes.

7
00:00:14,320 --> 00:00:18,820
Then let's store the tree by storing
the parent of each node in an array.

8
00:00:18,820 --> 00:00:19,960
As a mnemonic device,

9
00:00:19,960 --> 00:00:23,850
I've converted these formerly
undirected edges to directed edges.

10
00:00:23,850 --> 00:00:26,960
Later in this lesson,
you'll see other representations.

11
00:00:26,960 --> 00:00:31,370
Now this array of parents is named P,
and it has one entry per node.

12
00:00:31,370 --> 00:00:33,841
For example,
node two points to node three,

13
00:00:33,841 --> 00:00:38,610
that corresponds to an entry of three
at position two of the parents array.

14
00:00:38,610 --> 00:00:40,630
Let me fill in the rest for you.

15
00:00:40,630 --> 00:00:43,700
Now let's say you want to
find the root of this tree.

16
00:00:43,700 --> 00:00:46,030
Here's an easy Sequential Algorithm.

17
00:00:46,030 --> 00:00:47,290
Start by picking any node.

18
00:00:47,290 --> 00:00:50,770
For the sake of example,
let's pick node one.

19
00:00:50,770 --> 00:00:55,410
Then follow the parent pointers
until you reach the root.

20
00:00:55,410 --> 00:00:58,150
The root will be a node with no parent.

21
00:00:58,150 --> 00:01:01,150
Let's quickly trace this
algorithm's execution.

22
00:01:01,150 --> 00:01:03,840
First, you'll look up the parent of one,
which is eight.

23
00:01:03,840 --> 00:01:07,338
Since eight is not equal to null or
zero, you'll move up the tree.

24
00:01:07,338 --> 00:01:09,008
Then repeat.

25
00:01:11,840 --> 00:01:16,070
In this case, the algorithm stops when
it hits three, which has no parent.

26
00:01:16,070 --> 00:01:19,490
Now the running time of this algorithm
is linear in the number of nodes.

27
00:01:19,490 --> 00:01:20,430
Why?

28
00:01:20,430 --> 00:01:23,810
In the worst case,
you might have a very unbalanced tree.

29
00:01:23,810 --> 00:01:24,940
One might be a the leaf and

30
00:01:24,940 --> 00:01:28,360
you'd have to march up the entire
tree in order to get to root.

31
00:01:28,360 --> 00:01:31,310
So, how do you do this in parallel?

32
00:01:31,310 --> 00:01:35,250
Well, you could explore
all nodes simultaneously.

33
00:01:35,250 --> 00:01:35,950
That is, for

34
00:01:35,950 --> 00:01:40,970
every node, change it's parent, to point
to it's grandparent, if one exists.

35
00:01:40,970 --> 00:01:43,260
Does this process sound familiar?

36
00:01:43,260 --> 00:01:45,988
[SOUND] I'm back.

37
00:01:45,988 --> 00:01:51,300
In these example, nodes one, five, six,
seven, and four all have grandparents.

38
00:01:51,300 --> 00:01:54,300
For example the grandparents of
seven and four are both one.

39
00:01:55,310 --> 00:01:56,510
So according to this idea,

40
00:01:56,510 --> 00:01:59,790
you would visit seven and
four in parallel at the same time and

41
00:01:59,790 --> 00:02:03,480
you would rewrite their parent
pointers to point to the grandparent.

42
00:02:03,480 --> 00:02:07,040
Now if a node has no grandparent then
it must be pointing to the root, so

43
00:02:07,040 --> 00:02:08,620
you'd leave it alone.

44
00:02:08,620 --> 00:02:12,620
Here, neither nodes two or
node eight have grandparents.

45
00:02:12,620 --> 00:02:18,010
So you would repeat this test and jump
process on all nodes yielding this tree.

46
00:02:18,010 --> 00:02:21,110
Notice that after step one nodes one,
two, five and

47
00:02:21,110 --> 00:02:24,210
eight all point to the root
which is node three.

48
00:02:24,210 --> 00:02:26,700
Since the remaining nodes
still have grandparents,

49
00:02:26,700 --> 00:02:28,810
you'd need to repeat this process.

50
00:02:28,810 --> 00:02:30,630
And by the way,
you may be asking yourself,

51
00:02:30,630 --> 00:02:32,780
why can't I just terminate
the search right away?

52
00:02:34,950 --> 00:02:37,170
Why indeed?

53
00:02:37,170 --> 00:02:41,720
Anyway, if you keep going, eventually
every node will point to its own route.

54
00:02:41,720 --> 00:02:44,030
Here's some pseudo code
summarizing this procedure.

55
00:02:44,030 --> 00:02:47,540
The pseudo code will use
two auxiliary routines.

56
00:02:47,540 --> 00:02:50,140
The first one is called hasGrandparent.

57
00:02:50,140 --> 00:02:54,680
HasGrandparent test whether
a given node, K, has a grandparent

58
00:02:54,680 --> 00:02:59,640
give the set of all grandparents P and
it returns a true or false value.

59
00:02:59,640 --> 00:03:01,420
Take a minute to parse the condition.

60
00:03:02,770 --> 00:03:05,590
The second helper routine is adopt.

61
00:03:05,590 --> 00:03:08,330
Adopt sweeps over the nodes in parallel.

62
00:03:08,330 --> 00:03:12,550
If a given node has a grandparent,
then it records the grandparent's ID

63
00:03:12,550 --> 00:03:15,960
otherwise, he records
just the parents ID.

64
00:03:15,960 --> 00:03:19,270
Adopt essentially implements
this pointer jumping step.

65
00:03:19,270 --> 00:03:23,030
Now giving these helper routines,
the algorithm is very concise to state.

66
00:03:23,030 --> 00:03:25,620
It double buffers the parents array.

67
00:03:25,620 --> 00:03:29,880
It's outer loop is sequential and
taking it over all the possible levels.

68
00:03:29,880 --> 00:03:32,590
The maximum number, which is log n.

69
00:03:32,590 --> 00:03:34,390
Now think about that last statement.

70
00:03:34,390 --> 00:03:35,430
Does it make sense why?

71
00:03:36,750 --> 00:03:40,210
At each level it performs
this adoption procedure.

72
00:03:40,210 --> 00:03:41,910
Then before moving on to the next level,

73
00:03:41,910 --> 00:03:45,900
the algorithm just needs
to update current by next.

74
00:03:45,900 --> 00:03:48,680
Now in a practical implementation
you would probably just swap

75
00:03:48,680 --> 00:03:50,970
these rather than copying them.

76
00:03:50,970 --> 00:03:54,030
The final values are the roots and
that's what's returned in R.
