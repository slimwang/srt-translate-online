1
00:00:00,000 --> 00:00:02,000
Here's a look at what you're going to do in a little bit more detail.

2
00:00:02,000 --> 00:00:04,000
Remember that what you're writing is a random tester

3
00:00:04,000 --> 00:00:06,000
for the credit card transaction processing system.

4
00:00:06,000 --> 00:00:08,000
The core of this random tester is going to be a function called generate,

5
00:00:08,000 --> 00:00:11,000
which is what you're going to implement, so generate is going to take two parameters.

6
00:00:11,000 --> 00:00:15,000
The first one is the prefix, which is going to correspond to the issuer identifier.

7
00:00:15,000 --> 00:00:18,000
And this is a sequence of digits which is given to you, which has to appear at the start

8
00:00:18,000 --> 00:00:20,000
of the credit card number that you generate.

9
00:00:20,000 --> 00:00:23,000
The second parameter is the length. That is to say, an integer parameter that determines the total length

10
00:00:23,000 --> 00:00:26,000
in digits of the credit card number that you're going to generate.

11
00:00:26,000 --> 00:00:28,000
So your job then is to construct your credit card number,

12
00:00:28,000 --> 00:00:31,000
which has the given issuer identifier or prefix, has the required total length,

13
00:00:31,000 --> 00:00:35,000
has completely random integers in the middle here, and has a valid checksum digit

14
00:00:35,000 --> 00:00:40,000
as computed using Luhn's algorithm plus this little procedure for turning the Luhn checksum

15
00:00:40,000 --> 00:00:43,000
into a digit, which makes an overall credit card number's checksum

16
00:00:43,000 --> 00:00:45,000
come out to be 0 and therefore be valid.

17
00:00:45,000 --> 00:00:49,000
So let's just look at the code quick. So what you're writing is a function called generate.

18
00:00:49,000 --> 00:00:52,000
It takes the prefix and the length and so you're code is going to go here.

19
00:00:52,000 --> 00:00:56,000
And so we might call it like this. We might say the prefix is 372542.

20
00:00:56,000 --> 00:00:58,000
This happens to be the prefix for a credit card that I have in my pocket.

21
00:00:58,000 --> 00:01:01,000
and a 15-digit credit card number and now you're going to create a valid credit card number

22
00:01:01,000 --> 00:01:03,000
with the required properties.

23
00:01:03,000 --> 00:01:06,000
To do this, you're probably going to want to implement a function called Lahn checksum

24
00:01:06,000 --> 00:01:10,000
which computes the checksum of a number and this axillary function is-luhn-valid simply checks

25
00:01:10,000 --> 00:01:13,000
if the Lahn checksum or a given input is 0.

26
00:01:13,000 --> 00:01:15,000
what I'd like you to do is implement that now.

27
00:01:15,000 --> 00:01:21,000
If you get totally stuck and you like kind of a hint, there's something you can do

28
00:01:21,000 --> 00:01:24,000
which is look up Lahn's algorithm on Wikipedia.

29
00:01:24,000 --> 00:01:27,000
The reason that's kind of cheating is because on this Wikipedia page for Luhn's algorithm

30
00:01:27,000 --> 00:01:29,000
they actually will give you a Python code that works.

31
00:01:29,000 --> 00:01:31,000
But don't go there unless you actually want to see the real answer.

32
00:01:31,000 --> 00:01:35,000
Okay. Take a few minutes now, write the code, and what our API will do is use it

33
00:01:35,000 --> 00:01:38,000
to generate a number of credit cards and check if they're valid.

34
00:01:38,000 --> 00:01:42,000
If they're not valid, it will give you some indication on that the problem is.

35
00:01:42,000 --> 00:01:45,000
And if they are valid, then it will tell you what the N and you can move on to the solution.

36
00:01:45,000 --> 00:01:49,000
Before I let you go hack on this, I just want to give you a quick reminder about something

37
00:01:49,000 --> 00:01:53,000
that should save you some trouble so in the discussion I did here about Luhn's algorithm

38
00:01:53,000 --> 00:01:56,000
I assumed that the digits were numbered starting out 1.

39
00:01:56,000 --> 00:02:00,000
For example, #1 here is an odd-numbered digit.

40
00:02:00,000 --> 00:02:03,000
This is digit #2 which is an even-numbered digit, #3 is odd, etc.

41
00:02:03,000 --> 00:02:07,000
Now on the other hand, Python strings are index starting at 0.

42
00:02:07,000 --> 00:02:09,000
That's something you're going to have to watch out for.

43
00:02:09,000 --> 00:02:14,000
Or else you're going to go a little off by 1 error in your code that makes it a pain to debug.
