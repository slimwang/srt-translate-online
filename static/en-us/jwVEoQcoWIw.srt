1
00:00:00,000 --> 00:00:05,000
The next case is we pick this v at random, and it just so happens that it partitions

2
00:00:05,000 --> 00:00:10,000
to something bigger than K--so this is case III here.

3
00:00:10,000 --> 00:00:14,000
What happens at this point? Well, all the values get separated out.

4
00:00:14,000 --> 00:00:16,000
all the ones smaller than v end up over here,

5
00:00:16,000 --> 00:00:18,000
and all the ones bigger than v end up over here.

6
00:00:18,000 --> 00:00:22,000
And we haven't really solved the problem yet but we have made it a lot smaller.

7
00:00:22,000 --> 00:00:30,000
Consider at this point the list of the Lâ from here to here.

8
00:00:30,000 --> 00:00:36,000
This is a list of elements that Top K of this list is going to be exactly the Top K of the original list

9
00:00:36,000 --> 00:00:41,000
because the values that we're throwing out here can't possibly be in the Top K.

10
00:00:41,000 --> 00:00:45,000
What we can do at this point is look again for the Top K,

11
00:00:45,000 --> 00:00:52,000
but now just do it on the sublist of L[0:rank(v)].

12
00:00:52,000 --> 00:00:56,000
By picking v, we've actually just made this problem smaller. So great.

13
00:00:56,000 --> 00:01:00,000
Now we've handled two of the three cases. One case, it's completely solved.

14
00:01:00,000 --> 00:01:03,000
And another case, we have a smaller version of the same problem.

15
00:01:03,000 --> 00:01:09,000
What about the third case? So the third case is when the rank(v) is smaller than K.

16
00:01:09,000 --> 00:01:15,000
We do a partition and the v that we happened to pick is off to the left here.

17
00:01:15,000 --> 00:01:23,000
So what that means is we've now separated the list into elements that are smaller than this v value

18
00:01:23,000 --> 00:01:27,000
over here and elements that are bigger than this v value over here.

19
00:01:27,000 --> 00:01:31,000
And what do we know about this initial list? Well, we know that this actually is in the Top K.

20
00:01:31,000 --> 00:01:35,000
But we don't know about what's going on with the rest of the world over here.

21
00:01:35,000 --> 00:01:37,000
But we learned enough to have made some progress.

22
00:01:37,000 --> 00:01:42,000
Again we're going to recurse. Now what do we need to do?

23
00:01:42,000 --> 00:01:48,000
Well, this is the list that we are still unsure about.

24
00:01:48,000 --> 00:01:52,000
And there could be some off by ones in here but just to give you the basic idea

25
00:01:52,000 --> 00:01:58,000
from the rank of v, from this position here to the end of the list is what we care about.

26
00:01:58,000 --> 00:02:11,000
But we don't want to find the Top K of this. We want to find the Top K - rank(v). Why?

27
00:02:11,000 --> 00:02:17,000
Because we already know these elements here are already in the Top K.

28
00:02:17,000 --> 00:02:22,000
We only really need to care about what's left. The K - rank(v) that we haven't found yet.

29
00:02:22,000 --> 00:02:28,000
Those are the three cases that we care about, and we ought to be able to code this up

30
00:02:28,000 --> 00:02:33,000
and actually find the Top K in this list.
