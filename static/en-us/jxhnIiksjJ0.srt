1
00:00:00,012 --> 00:00:03,660
The first thing we have to do is actually test whether or not the boundaries of

2
00:00:03,660 --> 00:00:07,507
this style intersect with the boundaries of the view rectangle. Now if you look

3
00:00:07,507 --> 00:00:10,870
online you can actually find some really nice blocks of code that are 2D

4
00:00:10,870 --> 00:00:14,859
rectangle to 2D rectangle testing. Effectively we're playing the same principle

5
00:00:14,859 --> 00:00:18,353
here. We compute the boundaries of the x and y of the actual tile and world

6
00:00:18,353 --> 00:00:22,941
space. And test this against our view rectangle boundaries as well. If the tile

7
00:00:22,941 --> 00:00:27,430
lands outside of the viewRect, or it's not intersecting with the viewRect, then

8
00:00:27,430 --> 00:00:31,580
it's not visible and we can move on. For those tiles that past this test, we

9
00:00:31,580 --> 00:00:35,738
actually modify the worldX, and worldY translating it by the inverse of the

10
00:00:35,738 --> 00:00:39,362
viewRect off set. What this is going to do is it's going to take our viewRect

11
00:00:39,362 --> 00:00:43,142
and actually recenter it on the canvas itself, so that the worldX and worldY

12
00:00:43,142 --> 00:00:47,182
coordinates are actually canvas oriented rather than world oriented. These

13
00:00:47,182 --> 00:00:50,958
values are then passed down to canvas.drawimage directly and the image will

14
00:00:50,958 --> 00:00:52,630
magically appear on the screen.
