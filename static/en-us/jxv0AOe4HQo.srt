1
00:00:00,190 --> 00:00:02,797
Now back to our discussion of the Spring

2
00:00:02,797 --> 00:00:05,792
system at Sun. There is always a quadrum

3
00:00:05,792 --> 00:00:09,209
of how to innovate in the operating system.

4
00:00:09,209 --> 00:00:12,317
Academia is ripe for pursuing ideas that are

5
00:00:12,317 --> 00:00:14,921
on the lunatic French but, if you are

6
00:00:14,921 --> 00:00:18,617
an industry, you are always worried about, should

7
00:00:18,617 --> 00:00:22,440
we do a brand new operating system? Or

8
00:00:22,440 --> 00:00:25,720
do a better implementation of a known operating system.

9
00:00:25,720 --> 00:00:28,350
Research industry is usually constrained by the

10
00:00:28,350 --> 00:00:32,310
market place that it serves, specifically if you're

11
00:00:32,310 --> 00:00:35,520
a company like Sun Microsystems; which in

12
00:00:35,520 --> 00:00:39,390
its heydays, between 1980 and the 2005, it

13
00:00:39,390 --> 00:00:42,690
was making Unix workstations. And it was

14
00:00:42,690 --> 00:00:46,700
building large complex server systems which run 24/7

15
00:00:46,700 --> 00:00:48,930
for a variety of applications, such as

16
00:00:48,930 --> 00:00:51,390
airline reservation and so on and so forth.

17
00:00:51,390 --> 00:00:54,900
And if you are in that marketplace, the

18
00:00:54,900 --> 00:00:58,330
question becomes should we build a brand new

19
00:00:58,330 --> 00:01:01,150
operating system or build a better implementation of

20
00:01:01,150 --> 00:01:05,069
a known operating system? Marketplace demand says that, well,

21
00:01:05,069 --> 00:01:07,740
there are legacy applications that are running on

22
00:01:07,740 --> 00:01:10,630
your current operating system and therefore building a brand

23
00:01:10,630 --> 00:01:13,200
new operating system may not be that viable

24
00:01:13,200 --> 00:01:17,040
in an industrial setting. So the approach they took

25
00:01:17,040 --> 00:01:23,070
in the Spring system at Sun Microsystems, is to be different but innovate where

26
00:01:23,070 --> 00:01:28,130
it makes sense. And, it is a sort of like the, you may have seen commercials

27
00:01:28,130 --> 00:01:30,810
that says, Intel inside, and the idea

28
00:01:30,810 --> 00:01:36,120
is in processor architecture, Intel is dominant and

29
00:01:36,120 --> 00:01:39,270
a lot of interesting computer architecture research

30
00:01:39,270 --> 00:01:42,081
happens in innovating under the covers in the

31
00:01:42,081 --> 00:01:45,070
micro architecture. So the external interface is

32
00:01:45,070 --> 00:01:48,620
still well known interface like the Intel processor

33
00:01:48,620 --> 00:01:50,630
but underneath they do a lot of innovation

34
00:01:50,630 --> 00:01:53,250
in the micro architecture. In a similar manner,

35
00:01:53,250 --> 00:01:55,570
if you are a company like Sun Microsystems

36
00:01:55,570 --> 00:01:59,170
that peddles Unix boxes and you want to retain

37
00:01:59,170 --> 00:02:03,072
your customer base, then you want to make sure

38
00:02:03,072 --> 00:02:07,412
that the external interface remains UNIX and external

39
00:02:07,412 --> 00:02:10,639
interface remains as UNIX. But under the covers,

40
00:02:10,639 --> 00:02:14,270
you innovate where it makes sense. And in particular,

41
00:02:14,270 --> 00:02:16,930
you want to make sure that everything that you

42
00:02:16,930 --> 00:02:20,220
do in the operating system allows third party vendors,

43
00:02:20,220 --> 00:02:23,090
to develop software against the new APIs that you

44
00:02:23,090 --> 00:02:26,310
may provide in the operating system and integrate that

45
00:02:26,310 --> 00:02:29,510
into operating system. While at the same time, making

46
00:02:29,510 --> 00:02:33,660
sure that such integration is not going to break anything.

47
00:02:33,660 --> 00:02:36,490
Or said differently, you want to preserve all the things

48
00:02:36,490 --> 00:02:39,080
that are good in standard operating system, but at the

49
00:02:39,080 --> 00:02:41,820
same time you want to make sure that the innovation

50
00:02:41,820 --> 00:02:46,490
allows extensibility, flexibility and so on. That's sort of the

51
00:02:46,490 --> 00:02:49,610
approach that Spring system took and for all the things

52
00:02:49,610 --> 00:02:53,470
that I just said, using object orientation is a good

53
00:02:53,470 --> 00:02:55,780
choice in order to make sure that we can do

54
00:02:55,780 --> 00:03:00,040
innovation under the covers, while keeping the external interface the same.
