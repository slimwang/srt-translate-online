1
00:00:00,230 --> 00:00:01,760
This is the hint portion of the video.

2
00:00:01,760 --> 00:00:03,469
In this portion,

3
00:00:03,469 --> 00:00:07,210
I'll write some pseudocode describing
how I structure the algorithm.

4
00:00:07,210 --> 00:00:10,820
Then, I'll fill in some of the details
in the second portion of the video.

5
00:00:10,820 --> 00:00:13,230
If you just want to see
the pseudocode as a hint,

6
00:00:13,230 --> 00:00:17,320
watch up until the timestamp listed
in the instructor notes on this page.

7
00:00:17,320 --> 00:00:20,470
Let's assume the system is
already in triangular form,

8
00:00:20,470 --> 00:00:22,660
in order to compute our RREF.

9
00:00:22,660 --> 00:00:26,620
We work from the bottom equation
up dividing through each equation

10
00:00:26,620 --> 00:00:29,150
by the coefficient of
its leading variable and

11
00:00:29,150 --> 00:00:32,759
then clearing that lead variable
from all the equations above.

12
00:00:32,759 --> 00:00:36,670
Let's call M the number of equations,
and then let's make a for

13
00:00:36,670 --> 00:00:39,610
loop iterating upward through the rows.

14
00:00:39,610 --> 00:00:44,270
First, let's check if there are any
non-zero coefficients in our given row.

15
00:00:44,270 --> 00:00:48,080
For example In these
rows zero equals blank.

16
00:00:48,080 --> 00:00:49,850
There is no variable to solve for.

17
00:00:49,850 --> 00:00:52,060
So we need to move up to the next row.

18
00:00:52,060 --> 00:00:55,400
So, if there are no non-zero
coefficients in row I

19
00:00:55,400 --> 00:00:57,150
we continue to the next row.

20
00:00:57,150 --> 00:00:59,400
Let J be the index of the variable.

21
00:00:59,400 --> 00:01:01,220
That's the pivot on row I.

22
00:01:01,220 --> 00:01:05,150
Luckily, there's a function already
included in the linear system class

23
00:01:05,150 --> 00:01:06,750
that finds this for us.

24
00:01:06,750 --> 00:01:11,850
Then we need to make the coefficient
of the variable j in row i equal one.

25
00:01:11,850 --> 00:01:15,130
So let's scale row i to
make this coefficient one.

26
00:01:15,130 --> 00:01:19,770
Finally, we need to clear all terms
with variable j in rows above i.

27
00:01:19,770 --> 00:01:24,190
There's still a bit of work to be done
in filling in what these last two steps

28
00:01:24,190 --> 00:01:26,750
mean, but
that's the sketch of the algorithm.

29
00:01:26,750 --> 00:01:30,010
Next in the full solution,
I'll show my python code for

30
00:01:30,010 --> 00:01:34,280
this pseudocode and also my code for
the last two steps of the for loop.

31
00:01:34,280 --> 00:01:36,860
This is the end of the hint
portion of this video.

32
00:01:36,860 --> 00:01:38,920
The full solution will now follow.

33
00:01:38,920 --> 00:01:41,300
Here's the function compute RREF.

34
00:01:41,300 --> 00:01:43,760
Now in proper Python syntax.

35
00:01:43,760 --> 00:01:46,900
Although it was given in the code
stuff I showed earlier, it's worth

36
00:01:46,900 --> 00:01:51,580
pointing out that the variable tf refers
to the triangular form of the system.

37
00:01:51,580 --> 00:01:56,760
And then, all the rref operations
are performed on this triangular form.

38
00:01:56,760 --> 00:01:59,390
I'd also like to note that
to compute pivot indices

39
00:01:59,390 --> 00:02:03,850
which is a list giving the index of
the leading variable on each row.

40
00:02:03,850 --> 00:02:05,675
I use the preexisting function

41
00:02:05,675 --> 00:02:09,720
indices_of_first_nonzero_terms_in_each_-
row.

42
00:02:09,720 --> 00:02:12,010
Since we followed the pseudocode,
more or

43
00:02:12,010 --> 00:02:15,136
less the only thing left to do
is to fill in the two functions

44
00:02:15,136 --> 00:02:20,364
scale_row_to_make_coefficient_equal_one
and clear_coefficients_above.

45
00:02:20,364 --> 00:02:25,480
scale_row_to_make_coefficient_equal_one
multiplies the given row through

46
00:02:25,480 --> 00:02:27,570
by the reciprocal, of the coefficient,

47
00:02:27,570 --> 00:02:30,370
of the specified variable,
in the specified row.

48
00:02:30,370 --> 00:02:32,250
Nothing too special going on here.

49
00:02:32,250 --> 00:02:35,985
And clear_coefficients_above is
almost identical to the function

50
00:02:35,985 --> 00:02:40,580
clear_coefficients_below that we
used in computing triangular form.

51
00:02:40,580 --> 00:02:43,600
The difference is that the range
of equations I loop through

52
00:02:43,600 --> 00:02:45,110
is in reverse order.

53
00:02:45,110 --> 00:02:49,090
Also, since I know that the coefficient
of the pivot variable is one.

54
00:02:49,090 --> 00:02:51,530
I can simplify my
arithmetic a little bit.

55
00:02:51,530 --> 00:02:53,350
Otherwise, it's exactly the same logic.
