1
00:00:00,000 --> 00:00:06,000
As I was describing it before, for each node we do this test to find the shortest distance so far.

2
00:00:06,000 --> 00:00:11,000
That's a heap operation--there's n things in the heap, so this is a logn operation.

3
00:00:11,000 --> 00:00:16,000
So this altogether is going to get run once for each node--so this part of the algorithm

4
00:00:16,000 --> 00:00:18,000
actually takes time and logn.

5
00:00:18,000 --> 00:00:21,000
For each of the edges in the graph, we do this distance reduction operation,

6
00:00:21,000 --> 00:00:28,000
which also is a logn time operation--so that becomes for each edge a logn or mlogn.

7
00:00:28,000 --> 00:00:33,000
Now, both of these have to get done so we actually add these together nlogn and mlogn,

8
00:00:33,000 --> 00:00:39,000
and into the assumption that the graph is connected, this m has to be at least as big as this n--

9
00:00:39,000 --> 00:00:43,000
because this term dominates--so that gives us a total running time of Î(mlogn).

10
00:00:43,000 --> 00:00:48,000
Just I'll mention as an aside, there're some very clever data structure work that's been done

11
00:00:48,000 --> 00:00:54,000
by Fredman and Tarjan, the same Tarjan as before, that allows this actually to be decreased

12
00:00:54,000 --> 00:00:59,000
using a very special kind of heap that allows the running time to become nlogn+m.

13
00:00:59,000 --> 00:01:04,000
We need at least m just to visit all the edges. So this is a pretty remarkable result.

14
00:01:04,000 --> 00:01:07,000
I've implemented this in the past. It didn't run so fast for me.

15
00:01:07,000 --> 00:01:11,000
These are asymptotic results in that the overhead in keeping this fancy heap type

16
00:01:11,000 --> 00:01:15,000
structure updated was more than--well, I wasn't able to implement it so it was efficient enough.

17
00:01:15,000 --> 00:01:18,000
But the heaps that we were talking about the overhead is pretty raw

18
00:01:18,000 --> 00:01:20,000
and we get this kind of running time, the elapse should be pretty efficient.
