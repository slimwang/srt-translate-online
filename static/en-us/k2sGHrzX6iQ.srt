1
00:00:00,150 --> 00:00:04,620
Before we discuss the widely
used public key algorithms,

2
00:00:04,620 --> 00:00:09,600
RSA and Diffie–Hellman,
let's go over the background first.

3
00:00:09,600 --> 00:00:13,430
Both RSA and Diffie–Hellman
are based on number theory.

4
00:00:13,430 --> 00:00:17,350
An ancient and yet
active field in mathematics.

5
00:00:17,350 --> 00:00:23,030
These public key algorithms use
modular arithmetic, including

6
00:00:23,030 --> 00:00:29,150
modular edition, modular multiplication
and modular exponentiation.

7
00:00:29,150 --> 00:00:32,400
And they make use of
results from number theory.

8
00:00:32,400 --> 00:00:37,220
Let's briefly introduce
the background of modular arithmetic.

9
00:00:37,220 --> 00:00:40,590
First, let's explain modular addition.

10
00:00:40,590 --> 00:00:44,090
Given a modular M, x plus y,

11
00:00:44,090 --> 00:00:49,460
Mod m is the remainder of
x plus y divided by M.

12
00:00:49,460 --> 00:00:54,120
For example, 2 plus 8 divided
by 10 the remainder is 0.

13
00:00:54,120 --> 00:01:00,140
So therefore 2 plus 8
MOD 10 is 0 whereas,

14
00:01:00,140 --> 00:01:06,630
3 plus 8 MOD 10 is 1,
because 3 plus 8 is 11.

15
00:01:06,630 --> 00:01:13,113
And 11 divided by 10, the remainder
is 1 therefore, 3 plus 8 MOD 10 is 1.

16
00:01:13,113 --> 00:01:19,260
The modular addition if we add a number
and its inverse, then the result is 0.

17
00:01:19,260 --> 00:01:24,110
For example,
If the modulus is 10 then for

18
00:01:24,110 --> 00:01:31,760
k equal to 2 is inverse is 8
because 2 plus 8 MOD 10 is 0.

19
00:01:31,760 --> 00:01:38,130
Having additive inverse means that
modular addition is reversible.

20
00:01:38,130 --> 00:01:43,740
That is, by adding the inverse we can
reverse the result of modular addition.

21
00:01:43,740 --> 00:01:47,720
This is very convenient for
encryption and decryption because, as we

22
00:01:47,720 --> 00:01:52,180
have discussed, we want the encryption
process to be reversible, meaning that

23
00:01:52,180 --> 00:01:57,830
ideally, the decryption process is just
the reverse of the encryption process.

24
00:01:57,830 --> 00:02:03,180
For example, given plain text,
p = 3 Suppose the key k is 2,

25
00:02:03,180 --> 00:02:08,389
and the way we include the plain
text p is to add the key

26
00:02:08,389 --> 00:02:13,980
under modular addition to plain text
p and the result is cipher text c.

27
00:02:13,980 --> 00:02:18,250
So the c equal to p plus k,
which is 3 plus 2 MOD 10.

28
00:02:18,250 --> 00:02:21,210
The result is 5.

29
00:02:21,210 --> 00:02:27,730
There is the cipher text c of
plain text p equal to 3 is 5.

30
00:02:27,730 --> 00:02:29,310
Now how do we decrypt?

31
00:02:29,310 --> 00:02:32,000
To decrypt we use the same process but

32
00:02:32,000 --> 00:02:35,590
instead of using the key
we use the key's inverse.

33
00:02:35,590 --> 00:02:38,620
We know that the inverse of 2 is 8.

34
00:02:38,620 --> 00:02:45,530
So therefore c plus k inverse is 5
plus 8 MOD 10 that is, 13 MOD 10.

35
00:02:45,530 --> 00:02:50,178
The result is 3,
which is exactly the plain text.

36
00:02:50,178 --> 00:02:54,678
And so this is how we can do decryption
by using the exact same process as

37
00:02:54,678 --> 00:02:59,959
the encryption, and instead of using the
key, we use its inverse in decryption.

38
00:02:59,959 --> 00:03:03,585
And we take advantage the fact
that under modular addition,

39
00:03:03,585 --> 00:03:05,360
each number has a inverse.

40
00:03:05,360 --> 00:03:07,573
Therefore each key has a inverse and

41
00:03:07,573 --> 00:03:10,610
we just use the inverse
of the key in decryption.
