1
00:00:00,360 --> 00:00:01,630
Good job so far.

2
00:00:01,630 --> 00:00:04,580
You're well on your way to
building really great layouts.

3
00:00:04,580 --> 00:00:09,360
However, I do see a problem with almost
all of the layouts that we built so far.

4
00:00:09,360 --> 00:00:12,740
The views are right up against
the edge of the ViewGroup or

5
00:00:12,740 --> 00:00:14,300
up against the device.

6
00:00:14,300 --> 00:00:16,490
For all of the layouts that
we've built in this lesson so

7
00:00:16,490 --> 00:00:19,990
far, we could add a little
more visual polish to them, so

8
00:00:19,990 --> 00:00:23,840
that they're more beautiful by adding
a little bit more white space.

9
00:00:23,840 --> 00:00:26,240
We'll do this using the concepts
of padding and margin,

10
00:00:26,240 --> 00:00:28,580
which we'll cover in this video.

11
00:00:28,580 --> 00:00:31,240
For example, we could add a little
more white space here, here,

12
00:00:31,240 --> 00:00:33,780
or even at the top, so
that the views aren't crowded

13
00:00:33,780 --> 00:00:37,780
up against the edge of the parent and
up against the edge of the device.

14
00:00:37,780 --> 00:00:39,350
It's really a design decision though,

15
00:00:39,350 --> 00:00:41,550
because sometimes you do want
it to go edge to edge, like for

16
00:00:41,550 --> 00:00:45,140
the full bleed image effect that
I was talking about earlier.

17
00:00:45,140 --> 00:00:49,109
But in any case, you can use white space
to add a little more breathing room,

18
00:00:49,109 --> 00:00:53,130
so that the content is a little
bit easier to read and scan.

19
00:00:53,130 --> 00:00:56,840
I'll show you the effect of adding
padding or margin to a view.

20
00:00:56,840 --> 00:00:59,480
Let's start with a TextView
that says Hello.

21
00:00:59,480 --> 00:01:01,880
If we add eight dips of
padding to the view,

22
00:01:01,880 --> 00:01:05,450
then it makes it bigger by eight
dips in every single direction here.

23
00:01:05,450 --> 00:01:08,081
If we add layout margin of
eight dips to the TextView,

24
00:01:08,081 --> 00:01:10,850
then this is what it would look like.

25
00:01:10,850 --> 00:01:13,470
In order to add a margin, you need
to put it inside a ViewGroup, so

26
00:01:13,470 --> 00:01:16,360
that's why I have it in
this linear layout here.

27
00:01:16,360 --> 00:01:19,350
The linear layout is the one
that takes original TextView and

28
00:01:19,350 --> 00:01:21,260
pushes it by eight dips.

29
00:01:21,260 --> 00:01:23,330
From the left and from the top.

30
00:01:23,330 --> 00:01:25,510
And also from the sides as well.

31
00:01:25,510 --> 00:01:27,860
So even though you declare padding or

32
00:01:27,860 --> 00:01:32,780
margin on child TextView, the padding
gets handled by the TextView itself.

33
00:01:32,780 --> 00:01:35,900
Whereas the margin gets handled
by the parent ViewGroup.

34
00:01:35,900 --> 00:01:39,685
If you both of these on a real device,
and you didn't have a background for

35
00:01:39,685 --> 00:01:42,820
the TextView, then technically
both would look the same.

36
00:01:42,820 --> 00:01:46,030
the text would start eight
dips over from the left, and

37
00:01:46,030 --> 00:01:48,390
eight dips below the top of the device.

38
00:01:48,390 --> 00:01:51,780
However, if you do have a background
color for the TextView,

39
00:01:51,780 --> 00:01:54,990
then the user would be able to see
that the TextView is this big.

40
00:01:54,990 --> 00:01:58,660
Whereas, on the other device,
the TextView would only be this big.

41
00:01:58,660 --> 00:02:00,700
Here's a code for
displaying padding on a view.

42
00:02:02,040 --> 00:02:06,576
On the TextView XML Element, you would
declare a new attribute that says,

43
00:02:06,576 --> 00:02:10,800
android colon padding equals
eight dips in quotation marks.

44
00:02:10,800 --> 00:02:12,320
You can choose whatever
size you want for

45
00:02:12,320 --> 00:02:15,330
the padding,
as long as it's a dip value.

46
00:02:15,330 --> 00:02:19,080
When we specify eight dips of padding,
it adds eight dips to the left,

47
00:02:19,080 --> 00:02:21,410
top, bottom, and
right edges of the TextView.

48
00:02:22,460 --> 00:02:25,100
Instead of using the general
android padding attribute,

49
00:02:25,100 --> 00:02:28,970
you can also split it out to left,
right, top, or bottom.

50
00:02:28,970 --> 00:02:32,550
Essentially, these four lines of code
do the same thing as this one line.

51
00:02:32,550 --> 00:02:35,820
However, these fine grained controls
allow you to have different padding

52
00:02:35,820 --> 00:02:39,420
values for left or
right, or top or bottom.

53
00:02:39,420 --> 00:02:43,390
You don't have to have an equal
padding value for all four directions.

54
00:02:43,390 --> 00:02:47,280
The default value for padding is zero,
so if you specify left, right, and

55
00:02:47,280 --> 00:02:52,110
top padding, but not bottom, then that
will be zero dips of bottom padding.

56
00:02:52,110 --> 00:02:55,990
To specify margin, you add
an attribute again to the TextView.

57
00:02:55,990 --> 00:03:00,206
The name of the attribute is android
colon layout underscore margin we can

58
00:03:00,206 --> 00:03:02,750
set it equal to, for
example, eight dips.

59
00:03:02,750 --> 00:03:07,440
This moves the child TextView eight
dips away from the parent on all edges.

60
00:03:07,440 --> 00:03:11,770
If there was another child TextView at
the top here, then having a margin would

61
00:03:11,770 --> 00:03:15,000
push this TextView eight dips
below that first TextView.

62
00:03:16,060 --> 00:03:18,820
You can think of having a margin as
having a little force field around

63
00:03:18,820 --> 00:03:20,050
this view.

64
00:03:20,050 --> 00:03:23,750
No other view can enter this
eight dip region around it.

65
00:03:23,750 --> 00:03:27,621
Or you can also split out layout margin
into each of the four directions,

66
00:03:27,621 --> 00:03:31,750
layout marginLeft,
layout marginRight, top, and bottom.

67
00:03:31,750 --> 00:03:35,780
If you don't specify any of these
values, then it will default to zero.

68
00:03:35,780 --> 00:03:38,730
To remember that the ViewGroup
is the one that positions these

69
00:03:38,730 --> 00:03:41,930
children based on margin,
you can look at the attributes.

70
00:03:41,930 --> 00:03:45,130
They all start with layout
underscore for margin.

71
00:03:45,130 --> 00:03:48,340
That way, you know that the ViewGroup
is the one who's handling the position

72
00:03:48,340 --> 00:03:48,929
of these views.

73
00:03:50,160 --> 00:03:52,790
Padding and
margin can apply to all views.

74
00:03:52,790 --> 00:03:55,960
Let's put the attributes we just
learned about into practice.

75
00:03:55,960 --> 00:03:58,500
Here I have three TextViews
in a linear layout.

76
00:03:58,500 --> 00:04:01,000
They're all squished up against
the left edge of the screen, so

77
00:04:01,000 --> 00:04:02,259
I want to add a little more space.

78
00:04:03,390 --> 00:04:04,910
Let's start by trying
to add some margin.

79
00:04:05,910 --> 00:04:08,235
Cool, now there's more
space around this TextView.

80
00:04:09,420 --> 00:04:11,155
I'll do the same for
the other two TextViews.

81
00:04:12,250 --> 00:04:17,029
Interesting, so this is 16 dips up here,
but this is actually 32 dips because

82
00:04:17,029 --> 00:04:20,260
it's getting eight dips of bottom
margin from the first TextView and

83
00:04:20,260 --> 00:04:22,960
eight dips of top margin
from the second TextView.

84
00:04:22,960 --> 00:04:24,780
If we want the spacing to be consistent,
so

85
00:04:24,780 --> 00:04:30,250
it's always 16 dips in between each view
then we have to change the margin here.

86
00:04:30,250 --> 00:04:33,100
I can break it out in to
individual margin values.

87
00:04:33,100 --> 00:04:37,980
With this code, I have a left margin
of 16 dips and a top margin of 16 dips.

88
00:04:37,980 --> 00:04:40,750
There's no bottom margin
from this first TextView, so

89
00:04:40,750 --> 00:04:43,290
this space in between is
now correct at 16 dips.

90
00:04:43,290 --> 00:04:46,970
The same will go for the last TextView.

91
00:04:46,970 --> 00:04:48,780
Cool, now all the vertical
spacing is equal.

92
00:04:49,900 --> 00:04:53,420
Earlier when I said we're adding white
spaces to the edges of these views,

93
00:04:53,420 --> 00:04:56,240
technically that space is transparent.

94
00:04:56,240 --> 00:04:58,690
You can see through it,
to what's behind it.

95
00:04:58,690 --> 00:05:02,100
In this case we have a gray
background on the ViewGroup.

96
00:05:02,100 --> 00:05:05,390
The layout would look the same on
the device wether we use margin or

97
00:05:05,390 --> 00:05:08,785
padding, because in this case we have
no background color on the TextView.

98
00:05:09,820 --> 00:05:12,090
Let's add it and
see where the bounds of each view are.

99
00:05:13,330 --> 00:05:16,180
Okay, now there's a background
color on this first TextView.

100
00:05:16,180 --> 00:05:20,178
When we added the left and top margin,
we see that the ViewGroup just pushes

101
00:05:20,178 --> 00:05:22,600
the TextView over by eight and
down by eight.

102
00:05:22,600 --> 00:05:26,950
We can change this to padding, and now
we see that the TextView is larger and

103
00:05:26,950 --> 00:05:29,580
takes up that 8 dips of
space on the left and top.

104
00:05:30,700 --> 00:05:33,210
So visually, things would
look different on the device,

105
00:05:33,210 --> 00:05:35,120
whether you have padding or margin.

106
00:05:35,120 --> 00:05:38,000
If there is a background
color on this TextView.

107
00:05:38,000 --> 00:05:40,570
We can do the same for the other
views so you see that it's well.

108
00:05:41,830 --> 00:05:45,400
Adding padding and margin values isn't
just restricted to these children views,

109
00:05:45,400 --> 00:05:47,840
you can also add it on the ViewGroup.

110
00:05:47,840 --> 00:05:50,520
If I add a padding value for
the linear layout.

111
00:05:50,520 --> 00:05:55,680
Then you can see that it shifts the
views over by 16 dips in all directions.

112
00:05:55,680 --> 00:05:59,390
I mentioned that you could set any
value for a padding or a margin.

113
00:05:59,390 --> 00:06:01,380
But how do you know which value to pick?

114
00:06:01,380 --> 00:06:04,740
Well, the material design guidelines
recommend that you use increments of

115
00:06:04,740 --> 00:06:05,750
eight dips.

116
00:06:05,750 --> 00:06:09,190
This is a little bit more advanced
knowledge, but essentially we want our

117
00:06:09,190 --> 00:06:13,000
components to line up on the screen
along this eight dip square grid.

118
00:06:13,000 --> 00:06:15,870
Now the squares don't actually
show up on the screen, but

119
00:06:15,870 --> 00:06:17,710
if you want to position text here,

120
00:06:17,710 --> 00:06:21,090
you might want to move it over
like two squares to the left.

121
00:06:21,090 --> 00:06:25,280
Two squares on this Grid
would equal 16 dips.

122
00:06:25,280 --> 00:06:28,980
On this email screen,
all the icons are lined up to this line.

123
00:06:28,980 --> 00:06:33,120
They're positioned 16 dips over from
the left edge of this screen, and

124
00:06:33,120 --> 00:06:38,020
all this text here is positioned 72 dips
over from the left edge of this screen.

125
00:06:38,020 --> 00:06:41,280
So you can kind of imagine that the
content is starting to follow certain

126
00:06:41,280 --> 00:06:42,250
lines here.

127
00:06:42,250 --> 00:06:44,440
Here's another way to visualize it.

128
00:06:44,440 --> 00:06:47,160
In this screenshot from
the Google I/O app,

129
00:06:47,160 --> 00:06:53,920
we have the content lined up to this 16
dip line, as well as this 72 dip line.

130
00:06:53,920 --> 00:06:57,395
It's essentially 72 dips over
from the left edge of the screen.

131
00:06:57,395 --> 00:06:58,855
And on this edge,

132
00:06:58,855 --> 00:07:03,303
the content stops 16 dips before
the right edge of the screen.

133
00:07:03,303 --> 00:07:05,485
On the tablet,
you have more screen real estate, so

134
00:07:05,485 --> 00:07:07,495
you can have a little more padding.

135
00:07:07,495 --> 00:07:10,635
It can be 24 dips over from the left
edge of the screen, and so on for

136
00:07:10,635 --> 00:07:12,175
the other values.

137
00:07:12,175 --> 00:07:16,645
The reason we recommend these values
is to make your content easier to read.

138
00:07:16,645 --> 00:07:20,250
For example, if this title was
shifted over by a couple pixels, and

139
00:07:20,250 --> 00:07:23,660
the Subtext was shifted over to
the right by a couple pixels,

140
00:07:23,660 --> 00:07:25,560
there would be a jagged edge here.

141
00:07:25,560 --> 00:07:29,780
And it would distract the user from
actually reading your actual content.

142
00:07:29,780 --> 00:07:34,540
So by lining everything up, it makes
your app easier to read and use.

143
00:07:34,540 --> 00:07:38,120
Here are a couple of real life
examples of using padding in margin.

144
00:07:38,120 --> 00:07:40,190
In this Google Calendar app screenshot,

145
00:07:40,190 --> 00:07:43,680
we see some text here that's
shifted over by a little bit here.

146
00:07:43,680 --> 00:07:46,680
There's also a little bit of space
between these calendar events.

147
00:07:46,680 --> 00:07:48,180
If we implement it using padding,

148
00:07:48,180 --> 00:07:52,360
then this background image would
probably extend into that blank space.

149
00:07:52,360 --> 00:07:55,920
Instead if we use margin, then it adds
a little buffer zone around the view, so

150
00:07:55,920 --> 00:07:57,820
it's probably margin.

151
00:07:57,820 --> 00:08:01,890
Here's another screenshot of
the detail page for a calendar event.

152
00:08:01,890 --> 00:08:06,160
There's a lot of text here and there
seems to be larger gaps than others.

153
00:08:06,160 --> 00:08:08,700
We can create those larger
gaps by adding padding.

154
00:08:08,700 --> 00:08:13,370
To add this gap here, you can either
add bottom padding to this TextView, or

155
00:08:13,370 --> 00:08:15,130
you can add top padding to this view.

156
00:08:16,140 --> 00:08:17,600
Either way would work.

157
00:08:17,600 --> 00:08:20,680
Or you could even implement
it using layout margin.

158
00:08:20,680 --> 00:08:23,910
You really can't tell the difference
between using layout margin or padding

159
00:08:23,910 --> 00:08:28,050
in this case, because the background
of the text used is transparent.

160
00:08:28,050 --> 00:08:30,574
Now it's your turn to practice
with setting different padding and

161
00:08:30,574 --> 00:08:32,169
margin values.

162
00:08:32,169 --> 00:08:35,090
We've provided some initial code for
you to get started using the link below.

163
00:08:35,090 --> 00:08:38,940
Once you're comfortable with padding and
margin values, go ahead and

164
00:08:38,940 --> 00:08:40,169
try to build out this layout.

165
00:08:41,210 --> 00:08:45,780
By the way, this text is located
16 dips from the edges here.

166
00:08:45,780 --> 00:08:49,410
But it's ony eight dips in
between the two TextViews.

167
00:08:49,410 --> 00:08:50,530
When you're done, check this box.
