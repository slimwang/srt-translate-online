1
00:00:00,250 --> 00:00:05,033
To define an orthographic camera in 3GS you do two operations. One is to define

2
00:00:05,033 --> 00:00:08,436
a volume in space. The other is to move and orient that volume of space as you

3
00:00:08,436 --> 00:00:12,278
wish. This first piece of code creates the orthographic camera and defines the

4
00:00:12,278 --> 00:00:16,290
rectangular box of space it's viewing. This box is defined by the left to right

5
00:00:16,290 --> 00:00:20,974
width limits. The top-to-bottom height limits and front-to-back limits, all in

6
00:00:20,974 --> 00:00:26,443
world-space coordinates. These correspond to the x, y, and z axes. The camera

7
00:00:26,443 --> 00:00:29,990
can be thought of being positioned on the plus z end of the box defined.

8
00:00:29,990 --> 00:00:33,913
Looking down the minus z axis, with upting the y plus direction, as usual. For

9
00:00:33,913 --> 00:00:37,033
convenience, I define a view size, which is how much vertical space I'd like to

10
00:00:37,033 --> 00:00:41,198
fit in the view. The aspect ratio is just that, what's called the aspect ratio

11
00:00:41,198 --> 00:00:45,490
of the window. It describes how wide the view is compared to how high it is.

12
00:00:45,490 --> 00:00:49,089
For example, if your view was 1000 pixel wide and 500 high the aspect ratio

13
00:00:49,089 --> 00:00:53,410
would be equal to 2. In other words you'd want your box to be twice as wide as

14
00:00:53,410 --> 00:00:56,380
it is tall. If you don't, you'll get a stretch view of the world, which is

15
00:00:56,380 --> 00:00:59,992
probably not what you wanted. What all this code does is defines a box in

16
00:00:59,992 --> 00:01:03,878
space. In this case it happens to be centered around the origin. By the way,

17
00:01:03,878 --> 00:01:07,102
I've seen some demos just use the camera's width and height directly as the

18
00:01:07,102 --> 00:01:11,513
camera size. Don't do this. You're setting the camera size in your scene in

19
00:01:11,513 --> 00:01:14,615
world coordinates which is most definitely not the same as the width and height

20
00:01:14,615 --> 00:01:18,976
as your canvas in pixels. If we stopped here and put our drinking bird in the

21
00:01:18,976 --> 00:01:22,156
scene, we'd get a side view of the bird. What we'd now like to do is position

22
00:01:22,156 --> 00:01:25,986
and orient this camera in space to make a more interesting view. This code does

23
00:01:25,986 --> 00:01:27,050
that. The first

24
00:01:27,050 --> 00:01:27,380
[UNKNOWN]

25
00:01:27,380 --> 00:01:30,452
moves the box by this amount. It's a translation. The same as for a normal

26
00:01:30,452 --> 00:01:34,076
object. The camera controls code does two things. First, it sets up what sort

27
00:01:34,076 --> 00:01:37,681
of mouse controller you want for the camera, if any. I came up with this custom

28
00:01:37,681 --> 00:01:40,894
orbit and pan controls class, extending the orbit controls class I found in

29
00:01:40,894 --> 00:01:45,620
3JS. This control keeps the camera oriented, so that the plus y axis is always

30
00:01:45,620 --> 00:01:49,246
up. For a more unconstrained, but trickier to use control, the trackball

31
00:01:49,246 --> 00:01:53,146
controls class could be specified instead. In either case, the next line sets

32
00:01:53,146 --> 00:01:57,170
the target for the camera. The target is the location being looked at. This

33
00:01:57,170 --> 00:02:00,880
defines a new z axis direction for the Camera. The Y axis kept pointing up as

34
00:02:00,880 --> 00:02:04,137
best as possible. We'll talk about that later, when we look at the matrices

35
00:02:04,137 --> 00:02:07,636
forming this camera. Once we've positioned this box in space it defines what

36
00:02:07,636 --> 00:02:11,130
part of the scene we want to render. Whatever happens to be inside this box is

37
00:02:11,130 --> 00:02:14,527
what we'll see on the screen. The z buffer is applied as usual so that objects

38
00:02:14,527 --> 00:02:18,258
that are closer to the camera cover up what's behind them. This is just an

39
00:02:18,258 --> 00:02:21,614
overview of the basic idea. The camera defines a chunk of space defining it's

40
00:02:21,614 --> 00:02:24,342
limits and this chunk then gets positioned and oriented in space to make an

41
00:02:24,342 --> 00:02:28,440
image. I'll go over this process in detail in the following lessons
