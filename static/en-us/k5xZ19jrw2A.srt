1
00:00:00,000 --> 00:00:04,449
To address this Agarwala et al basically
kind of went back to an approach

2
00:00:04,449 --> 00:00:09,104
that I'd also talked about before, which
is what we're interested in doing is

3
00:00:09,104 --> 00:00:13,083
we want to be able to find cuts not
just blending from one to the other.

4
00:00:13,083 --> 00:00:16,375
So here example, basically is
something I'll show you here.

5
00:00:16,375 --> 00:00:19,811
This is something again from
an effort by Quatra et al,

6
00:00:19,811 --> 00:00:24,584
where we basically rather than actually
just frame by frame do boundary matches.

7
00:00:24,584 --> 00:00:28,743
We find a surface between the two
of them that actually lets you find

8
00:00:28,743 --> 00:00:29,792
a better match.

9
00:00:29,792 --> 00:00:33,643
In essence of that basically means is I
have an input video and output video,

10
00:00:33,643 --> 00:00:34,918
I find a patch like this.

11
00:00:34,918 --> 00:00:38,959
And this again, we had seen before was
when we actually had videos like this.

12
00:00:38,959 --> 00:00:42,698
If we just did a simple video texture,
you found blurring and

13
00:00:42,698 --> 00:00:44,834
kind of mixing of things going on.

14
00:00:44,834 --> 00:00:48,520
But if you actually did this kind of
approach, where you found the cut,

15
00:00:48,520 --> 00:00:50,609
you found a much better video sequence,

16
00:00:50,609 --> 00:00:54,000
because the blending was much
better from one frame to the other.

17
00:00:54,000 --> 00:00:58,168
Again, showcasing in this
video example of a waterfall.

18
00:00:58,168 --> 00:01:03,356
If we just did graph cut textures again
found the boundaries, you can see a much

19
00:01:03,356 --> 00:01:09,269
cleaner version much defined transitions
and actually much better quality video.

20
00:01:09,269 --> 00:01:12,875
So, in essence, we can use the same kind
of thing here for us to help us do this.

21
00:01:12,875 --> 00:01:16,042
And in essence,
that's what Agarwal et al did.

22
00:01:16,042 --> 00:01:19,675
So this was of course, just finding
the continuous diagonal slice.

23
00:01:19,675 --> 00:01:24,250
And between boundaries of all of this
to generate this new video volume.

24
00:01:24,250 --> 00:01:27,085
Well, with this,
just it is rather than do this,

25
00:01:27,085 --> 00:01:29,458
find cuts between different one of them.

26
00:01:29,458 --> 00:01:33,333
You still get a continuous video
volume here, that's shown by this.

27
00:01:33,333 --> 00:01:37,750
But now rather than having simple cuts
like this, you find different regions.

28
00:01:37,750 --> 00:01:41,622
And again, they use a min cut
algorithm very similar to the graph,

29
00:01:41,622 --> 00:01:44,786
cut algorithm to optimize
on the cost to get this.

30
00:01:44,786 --> 00:01:46,993
Please look at the paper for
more details,

31
00:01:46,993 --> 00:01:50,487
but you kind of see that this kind
of way of generating a video volume,

32
00:01:50,487 --> 00:01:54,375
allows us to of course have a much
better way of looking at the results.

33
00:01:54,375 --> 00:01:58,083
And here let's look at
the same example again.

34
00:01:58,083 --> 00:02:01,550
Here basically is the video and
now with coherent fragments,

35
00:02:01,550 --> 00:02:03,958
much better no more sharing going on.

36
00:02:03,958 --> 00:02:07,538
And actually get much cleaner
transitions between each and

37
00:02:07,538 --> 00:02:11,130
every one of the frames to generate
a much better video texture.
