1
00:00:00,380 --> 00:00:03,210
There is a concept of data race that

2
00:00:03,210 --> 00:00:06,000
plays an important role in considering how we can

3
00:00:06,000 --> 00:00:09,580
relax consistency. A data race occurs when there is

4
00:00:09,580 --> 00:00:13,420
a data dependence between accesses that are on different

5
00:00:13,420 --> 00:00:17,990
cores, and the accesses are not ordered by synchronization.

6
00:00:17,990 --> 00:00:19,700
So, for a data race to occur, we need

7
00:00:19,700 --> 00:00:22,320
to really have one process rating and another writing

8
00:00:22,320 --> 00:00:25,500
to the same variable. Or the other way around,

9
00:00:25,500 --> 00:00:28,378
or both of them writing. And, the

10
00:00:28,378 --> 00:00:31,618
access on this different course are not ordered

11
00:00:31,618 --> 00:00:36,390
by synchronization. So, here's an example of

12
00:00:36,390 --> 00:00:39,113
a data race. A data race here exists

13
00:00:39,113 --> 00:00:44,855
because really we can have this happen or in another execution this store might

14
00:00:44,855 --> 00:00:51,150
occur before the load and thus, this can happen too. So this is a data race.

15
00:00:51,150 --> 00:00:56,250
In contrast, something like this, where we do load A, then a barrier, and this

16
00:00:56,250 --> 00:00:59,550
thread participates in that barrier, and then thus

17
00:00:59,550 --> 00:01:02,325
store A, there is a data dependence between

18
00:01:02,325 --> 00:01:06,270
accesses but, they are clearly order by synchronization.

19
00:01:06,270 --> 00:01:09,082
This one will happen before this one because

20
00:01:09,082 --> 00:01:12,122
of the barrier synchronization, so there is no

21
00:01:12,122 --> 00:01:16,279
data race here. Conceptually, our data race allows

22
00:01:16,279 --> 00:01:18,807
any order of these operations and that

23
00:01:18,807 --> 00:01:22,125
might change the outcome of the program, whereas

24
00:01:22,125 --> 00:01:28,840
here we know what's going to happen. Then there is a concept of a data race free

25
00:01:28,840 --> 00:01:32,740
program which is a program that cannot create

26
00:01:32,740 --> 00:01:35,790
any data races in its execution. Pretty much

27
00:01:35,790 --> 00:01:39,058
that program is considered to be well synchronized

28
00:01:39,058 --> 00:01:41,718
so that any accesses to data are correctly

29
00:01:41,718 --> 00:01:45,518
ordered by synchronization, barriers, locks, flags,

30
00:01:45,518 --> 00:01:50,270
etcetera. A key property of data-race-free programs

31
00:01:50,270 --> 00:01:54,990
is that they behave exactly the same as they would in sequential consistency,

32
00:01:54,990 --> 00:02:00,090
even if we run them in any relaxed consistency model. Why is that

33
00:02:00,090 --> 00:02:03,048
so? Well, because if your synchronization is

34
00:02:03,048 --> 00:02:06,844
implemented correctly, then your synchronization is going to

35
00:02:06,844 --> 00:02:11,881
create the right orderings for things, and then, there is no opportunity for the

36
00:02:11,881 --> 00:02:16,050
re-orderings that might violate sequential consistencies. So

37
00:02:16,050 --> 00:02:20,460
data-race-free program is actually sequentially consistent, even if

38
00:02:20,460 --> 00:02:25,010
we run it on a machine that doesn't support sequential consistency as long as

39
00:02:25,010 --> 00:02:29,800
synchronization is correctly implemented for that machine.

40
00:02:29,800 --> 00:02:32,355
But keep in mind that while your debugging

41
00:02:32,355 --> 00:02:34,910
your programs, even if you intend them to

42
00:02:34,910 --> 00:02:37,392
be data race free, they may not actually

43
00:02:37,392 --> 00:02:42,450
be data race free. In which case, theoretically,

44
00:02:42,450 --> 00:02:45,430
anything can happen. So pretty much, while we

45
00:02:45,430 --> 00:02:48,561
are debugging a program. To remove data races,

46
00:02:48,561 --> 00:02:50,838
the behavior of that program on a weekly

47
00:02:50,838 --> 00:02:53,529
consistent system might be very weird and thus

48
00:02:53,529 --> 00:02:57,450
is makes the bugging really, really difficult. So for

49
00:02:57,450 --> 00:03:00,135
most programs that are correct, and that means

50
00:03:00,135 --> 00:03:03,750
data-race-free, we can relax the consistency model. But

51
00:03:03,750 --> 00:03:05,670
for the debugging it really helps if we

52
00:03:05,670 --> 00:03:10,170
can support sequential consistency. So some processors actually

53
00:03:10,170 --> 00:03:13,355
have support to flip between sequential consistency, or

54
00:03:13,355 --> 00:03:16,150
some more relaxed consistency that gives us better

55
00:03:16,150 --> 00:03:19,442
performance. So that when you're debugging, you can

56
00:03:19,442 --> 00:03:22,574
use sequential consistency until you're reasonably sure that

57
00:03:22,574 --> 00:03:25,870
your program is working correctly and is data-race-free.

58
00:03:25,870 --> 00:03:27,787
At which point, we can run it on a

59
00:03:27,787 --> 00:03:31,195
weaker consistency model to benefit from the additional

60
00:03:31,195 --> 00:03:34,550
re-ordering that the processor is now allowed to do.
