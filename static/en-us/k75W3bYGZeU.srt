1
00:00:00,340 --> 00:00:03,380
Estimating the intensity of an algorithm
can tell you whether you need to work

2
00:00:03,380 --> 00:00:05,330
harder to come up with a better one.

3
00:00:05,330 --> 00:00:06,802
Just don't over do it.

4
00:00:06,802 --> 00:00:10,130
Consider non matrix matrix multiply.

5
00:00:10,130 --> 00:00:13,140
Let's say you were to implement it
with the conventional three nested

6
00:00:13,140 --> 00:00:14,460
loops algorithm.

7
00:00:14,460 --> 00:00:17,208
It essentially loops
over the elements of C.

8
00:00:17,208 --> 00:00:21,140
For each value of C, it computes
the dot product between a row of A and

9
00:00:21,140 --> 00:00:22,550
a column of B.

10
00:00:22,550 --> 00:00:25,790
Now suppose you run this algorithm on
a machine with a two level memory of

11
00:00:25,790 --> 00:00:27,190
size Z.

12
00:00:27,190 --> 00:00:29,400
And let's make some
simplifying assumptions.

13
00:00:29,400 --> 00:00:33,160
First, let's suppose the transfer
size is equal to one word,

14
00:00:33,160 --> 00:00:36,000
this way you don't have to worry
about stuff like alignment.

15
00:00:36,000 --> 00:00:39,890
With respect to Z, let's suppose that
it's big enough to hold two vectors

16
00:00:39,890 --> 00:00:42,080
plus a little bit of extra space.

17
00:00:42,080 --> 00:00:46,250
Now let's transform the three nested
loops into something IO aware.

18
00:00:46,250 --> 00:00:49,900
I've inserted some comments to indicate
where you might load pieces of A,

19
00:00:49,900 --> 00:00:51,360
B and C.

20
00:00:51,360 --> 00:00:54,270
So, at the beginning of the body of
the i loop is a good place to load

21
00:00:54,270 --> 00:00:55,920
row i of A.

22
00:00:55,920 --> 00:00:59,620
And at the beginning of the body of the
j loop is a good place to load both C i,

23
00:00:59,620 --> 00:01:02,480
j and column j of B.

24
00:01:02,480 --> 00:01:05,900
Finally since we're done
computing C ij after the K loop

25
00:01:05,900 --> 00:01:08,300
we can store it immediately afterwards.

26
00:01:08,300 --> 00:01:09,170
Notice these loads and

27
00:01:09,170 --> 00:01:14,370
stores respect our assumption two that
Z holds two vectors plus a little bit.

28
00:01:14,370 --> 00:01:16,020
Here's my question.

29
00:01:16,020 --> 00:01:19,330
What is the asymptotic
intensity of this algorithm?

30
00:01:19,330 --> 00:01:23,492
Enter your answer symbolically
in terms of N and Z in this box.
