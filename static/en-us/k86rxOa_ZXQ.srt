1
00:00:00,200 --> 00:00:02,105
Well, we're done with
the core of our content provider,

2
00:00:02,105 --> 00:00:04,130
but there's still one more
optional method

3
00:00:04,130 --> 00:00:06,250
that will make things much more efficient.

4
00:00:06,900 --> 00:00:10,160
We'll start by hitting Ctrl+O
to look at the functions we can override.

5
00:00:11,240 --> 00:00:13,510
It turns out there's
a function called bulkInsert.

6
00:00:14,390 --> 00:00:16,400
Anyone out there who
has done database work

7
00:00:16,400 --> 00:00:19,340
knows that putting a bunch of inserts
into a single transaction

8
00:00:19,340 --> 00:00:22,500
is usually much faster
than inserting them individually.

9
00:00:22,500 --> 00:00:25,060
Bulk insert allows us to do just that.

10
00:00:25,320 --> 00:00:28,300
The default implementation
just calls insert a bunch of times,

11
00:00:28,300 --> 00:00:31,350
but we can wrap it in a transaction
if we implement it ourselves.

12
00:00:31,370 --> 00:00:34,780
We're only going to add support
for weather forecast transactions here,

13
00:00:34,780 --> 00:00:37,270
since they're the only ones
we insert in bulk.

14
00:00:37,270 --> 00:00:40,090
We start by calling db.beginTransaction.

15
00:00:40,530 --> 00:00:43,610
For each ContentValues passed in,
we insert and update

16
00:00:43,610 --> 00:00:45,586
the number of records inserted.

17
00:00:45,586 --> 00:00:48,672
When we're done, we set the transaction
to be successful.

18
00:00:48,672 --> 00:00:50,960
Otherwise our records will not be committed,

19
00:00:50,960 --> 00:00:54,130
and then rely on the finally statement
to end the transaction.

20
00:00:54,240 --> 00:00:56,500
In the default case,
we just call the super class.

21
00:00:56,500 --> 00:00:59,591
Remember, it does the insert,
just not optimally.

22
00:01:00,241 --> 00:01:01,332
And that's it.

23
00:01:01,332 --> 00:01:03,545
That's all we have to do
to implement bulkInsert.
