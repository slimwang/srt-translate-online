1
00:00:00,430 --> 00:00:03,710
I just said that using
a combination of push and set value

2
00:00:03,710 --> 00:00:07,939
is the best option for adding new
shopping lists to the Firebase database.

3
00:00:07,939 --> 00:00:10,330
But let me show you why
instead of just telling you.

4
00:00:11,410 --> 00:00:14,700
Right here is where we have
our list of shopping lists.

5
00:00:14,700 --> 00:00:18,320
This is all the data for one list and
here's all the data for another list.

6
00:00:18,320 --> 00:00:20,770
And for the sake of space,
I'm not drawing out the whole tree for

7
00:00:20,770 --> 00:00:22,530
every single shopping list.

8
00:00:22,530 --> 00:00:24,760
Using the three other
methods besides push,

9
00:00:24,760 --> 00:00:28,660
we need to choose what to use as
the key for each of these objects.

10
00:00:28,660 --> 00:00:32,750
A reasonable approach might be to
choose the name of the list as the key.

11
00:00:32,750 --> 00:00:36,390
Consider a scenario where we've
written the code for user accounts.

12
00:00:36,390 --> 00:00:37,180
And in this scenario,

13
00:00:37,180 --> 00:00:41,170
we'll say that both my roommates Walter
and Kagure have their own user accounts.

14
00:00:41,170 --> 00:00:44,545
And we'll say Walter has one list,
which is named grocery list and

15
00:00:44,545 --> 00:00:48,880
Kagure has one list which is named party
supplies, and they're represented here.

16
00:00:48,880 --> 00:00:51,025
Let's decide that at some
point while using the app,

17
00:00:51,025 --> 00:00:55,620
Kagure decides that she wants to make
a list called grocery list for herself.

18
00:00:55,620 --> 00:00:59,400
It's completely separate from Walter's
grocery list that he's made for himself.

19
00:00:59,400 --> 00:01:00,860
At this point, if we're using keys for

20
00:01:00,860 --> 00:01:05,190
names, we'd run into the issue of having
two lists that have the exact same name,

21
00:01:05,190 --> 00:01:08,120
and therefore the exact
same URL location.

22
00:01:08,120 --> 00:01:09,810
So what would happen?

23
00:01:09,810 --> 00:01:12,860
Well, if there aren't any permissions
that are protecting lists from being

24
00:01:12,860 --> 00:01:16,690
overwritten, Kagure's list could
simply overwrite Walter's.

25
00:01:16,690 --> 00:01:19,590
Walter would probably not be
super thrilled to find that

26
00:01:19,590 --> 00:01:22,260
his list has been randomly overwritten.

27
00:01:22,260 --> 00:01:26,220
If we had permissions that kept users
from overwriting other user's data,

28
00:01:26,220 --> 00:01:28,970
then Kagure would be in this
position where she's being

29
00:01:28,970 --> 00:01:32,020
denied to write a list
called Grocery List.

30
00:01:32,020 --> 00:01:34,810
So maybe if Kagure was feeling
particularly like she really

31
00:01:34,810 --> 00:01:38,920
wanted a list called Grocery List, she'd
make something like Grocery List 1.

32
00:01:38,920 --> 00:01:43,550
And the next person could make something
like Grocery List 2, and Grocery List 3,

33
00:01:43,550 --> 00:01:45,000
and so on.

34
00:01:45,000 --> 00:01:48,895
This isn't the best user experience,
and this is kind of silly.

35
00:01:48,895 --> 00:01:51,868
Just because one person has
a shopping list named grocery list,

36
00:01:51,868 --> 00:01:55,169
that doesn't mean that nobody else
using the app should also have a list

37
00:01:55,169 --> 00:01:56,920
called grocery list.

38
00:01:56,920 --> 00:02:00,640
Another option is to not
use list names as keys and

39
00:02:00,640 --> 00:02:05,000
instead to try to find something
else that is certain to be unique.

40
00:02:05,000 --> 00:02:06,460
Enter Push.

41
00:02:06,460 --> 00:02:09,940
Push generates a unique ID for
you to store a list under and

42
00:02:09,940 --> 00:02:12,240
it ensures uniqueness.

43
00:02:12,240 --> 00:02:15,035
Here's some examples of
what push keys look like.

44
00:02:15,035 --> 00:02:17,811
They're sort of bizarre collections
of numbers and letters.

45
00:02:17,811 --> 00:02:22,465
Via Firebase magic, this ordinary string
has the extraordinary attribute of being

46
00:02:22,465 --> 00:02:23,653
completely unique.

47
00:02:23,653 --> 00:02:28,137
So when Kagure wants to add her grocery
list, push will generate a unique

48
00:02:28,137 --> 00:02:32,933
key for her, thus allowing for both
Walter and Kagure to have grocery lists.

49
00:02:32,933 --> 00:02:36,760
Okay so hopefully right now you agree
that using Push is a good choice.

50
00:02:36,760 --> 00:02:39,520
Now Push only generates this key,
so you also need to

51
00:02:39,520 --> 00:02:43,280
use set value to actually generate and
store this value here.

52
00:02:43,280 --> 00:02:45,670
What I want you to do is
update this button so

53
00:02:45,670 --> 00:02:49,430
that it adds a new shopping list
to the Firebase database and

54
00:02:49,430 --> 00:02:52,750
if I keep adding lists I should
see my data growing here.

55
00:02:52,750 --> 00:02:56,970
Now you could watch me do it, but you're
a developer, so why not try it yourself?

56
00:02:56,970 --> 00:02:58,490
I'll send you a spec.

57
00:02:58,490 --> 00:03:01,070
And actually,
in addition to implementing Push,

58
00:03:01,070 --> 00:03:03,950
could you also add
a timestamp created property?

59
00:03:03,950 --> 00:03:06,320
It should store when
the list was created.

60
00:03:06,320 --> 00:03:08,460
It's always good to keep
track of these things.

61
00:03:08,460 --> 00:03:12,300
Before you get started, you probably
want to go ahead and flush the database.

62
00:03:12,300 --> 00:03:15,050
You're making a big enough change
right now that having old data

63
00:03:15,050 --> 00:03:17,280
could create errors or confuse you.

64
00:03:17,280 --> 00:03:20,944
To quote, unquote, flush the database
you can go to the Dashboard and

65
00:03:20,944 --> 00:03:21,575
delete it.

66
00:03:21,575 --> 00:03:23,955
[BLANK_AUDIO]

67
00:03:23,955 --> 00:03:27,610
It's scarily simple,
just click this little red x.

68
00:03:27,610 --> 00:03:31,260
Obviously, in a production app and a lot
of times when you're in development,

69
00:03:31,260 --> 00:03:33,080
this could be really disastrous.

70
00:03:33,080 --> 00:03:35,975
So if you're worried that you might want
to revert back to the dataset that you

71
00:03:35,975 --> 00:03:39,140
had before,
you could always export your data here.

72
00:03:39,140 --> 00:03:40,830
It spits it out as JSON and

73
00:03:40,830 --> 00:03:43,840
then if you ever need the data
back you can import it here.

74
00:03:43,840 --> 00:03:48,705
But this is sort of throwaway data.

75
00:03:48,705 --> 00:03:50,061
>> What?

76
00:03:50,061 --> 00:03:52,461
Where did my shopping list go?

77
00:03:52,461 --> 00:03:54,841
Lila?

78
00:03:54,841 --> 00:03:57,720
>> Got to go but
I'll send over the spec right away.
