1
00:00:00,000 --> 00:00:06,930
So the original running time here was O(n*V) since the V was this value here and now

2
00:00:06,930 --> 00:00:11,700
since we scaled it down using this factor here what we now have to do is we have

3
00:00:11,700 --> 00:00:24,640
to replace V by V/V/n(1-c), which is the same as O(nÂ²*1/1-c), which is the same as this one here.

4
00:00:24,640 --> 00:00:30,000
Now, of course, in order to be very correct here, we have to constraint c so that it cannot be 1;

5
00:00:30,000 --> 00:00:32,750
otherwise, this running time here would be undefined--well, that's okay.

6
00:00:32,750 --> 00:00:35,810
As you will soon see that actually makes quite a lot of sense.

7
00:00:35,810 --> 00:00:41,660
So you've seen that we now have made the running time independent of V

8
00:00:41,660 --> 00:00:46,720
and that is of course a very cool thing because V originally was what could make this algorithm

9
00:00:46,720 --> 00:00:52,110
run in exponential time and now we can use this factor 1-c here to control the running time.

10
00:00:52,110 --> 00:00:58,400
So the running time will, of course, again become exponential if c becomes very close to 1,

11
00:00:58,400 --> 00:01:02,210
but it will be polynomial if for example we set c to 0

12
00:01:02,210 --> 00:01:04,879
and something in between when we set c to other values.

13
00:01:04,879 --> 99:59:59,999
Now, I still haven't told you what the c here is going to be about, but we'll soon figure that out.
