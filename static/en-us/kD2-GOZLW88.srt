1
00:00:00,880 --> 00:00:02,340
I know we've had a lot of questions

2
00:00:03,460 --> 00:00:08,260
surrounding some of the files we provide
students like the engine the resources.

3
00:00:08,260 --> 00:00:13,776
So all the work that students will
be doing will be in the app.js file,

4
00:00:13,776 --> 00:00:16,110
which is, has tons of comments in it.

5
00:00:16,110 --> 00:00:19,050
So make sure you read through
that first before you even start.

6
00:00:20,130 --> 00:00:21,560
Mike put in sort of

7
00:00:22,620 --> 00:00:26,400
comments that sort of guide you
through what you have to build.

8
00:00:26,400 --> 00:00:29,590
If you haven't had a chance to look at
it I mean it just kind of gives you that

9
00:00:29,590 --> 00:00:32,110
basic structure for a few things.

10
00:00:32,110 --> 00:00:35,030
And then you just have to
sort of flush out the rest.

11
00:00:35,030 --> 00:00:35,910
>> Yep.

12
00:00:35,910 --> 00:00:37,260
We'll start with the engine.js

13
00:00:37,260 --> 00:00:39,290
>> Yes.
>> So, as I mentioned,

14
00:00:39,290 --> 00:00:42,660
a game is really just a flip book.

15
00:00:42,660 --> 00:00:46,180
It's the process of drawing images on
top of each other, over, and over,

16
00:00:46,180 --> 00:00:48,900
and It'll provide the optical
illusion of animation.

17
00:00:50,460 --> 00:00:54,470
So we created this engine.js
file because we haven't taught you

18
00:00:54,470 --> 00:00:56,620
anything about the canvas tag yet
really.

19
00:00:56,620 --> 00:01:00,020
At this point but we do have HTML 5
 canvas course which is awesome.

20
00:01:00,020 --> 00:01:03,300
>> So I actually I went through that
one last night, it's a lot of fun.

21
00:01:03,300 --> 00:01:04,640
>> It is a lot of fun, it's really cool.

22
00:01:04,640 --> 00:01:07,240
Cameron and James did a really
good job to make that for us.

23
00:01:07,240 --> 00:01:11,270
So again if you haven't had a chance
to look at the HTML 5 Canvas Course,

24
00:01:11,270 --> 00:01:13,380
if you're interested
in that kind of stuff.

25
00:01:13,380 --> 00:01:16,600
It's a really fun short
course that gets to us and

26
00:01:16,600 --> 00:01:18,640
it took me like an hour to
have to get through it.

27
00:01:18,640 --> 00:01:19,790
>> Yeah and it's a lot of fun.

28
00:01:19,790 --> 00:01:23,790
It'll teach you a lot of what's
going on in this engine .js file.

29
00:01:23,790 --> 00:01:25,030
But.
That's the reason this

30
00:01:25,030 --> 00:01:29,150
file exists is because for the purposes
of objects oriented in JavaScript we

31
00:01:29,150 --> 00:01:32,380
don't really want you to worry about
what's going on on the canvas.

32
00:01:32,380 --> 00:01:35,290
So this file creates
a canvas element for you.

33
00:01:35,290 --> 00:01:36,960
Puts it on the screen.

34
00:01:36,960 --> 00:01:39,840
It then sets up what
we call a game loop.

35
00:01:39,840 --> 00:01:42,360
Your typical game loop has

36
00:01:42,360 --> 00:01:45,680
a render function which will
render everything on the screen.

37
00:01:45,680 --> 00:01:48,740
Based off of various data points.

38
00:01:48,740 --> 00:01:50,760
And then it'll have an update function,

39
00:01:50,760 --> 00:01:53,680
which serves as updating
those data points.

40
00:01:53,680 --> 00:01:54,990
>> It's like flipping
the page in our book.

41
00:01:54,990 --> 00:01:55,490
>> Exactly.

42
00:01:55,490 --> 00:01:58,920
So let's take your player character for
instance.

43
00:01:58,920 --> 00:02:02,020
When you first start the game up, your
player character should have an X and

44
00:02:02,020 --> 00:02:04,460
a Y position of where it's at, and

45
00:02:04,460 --> 00:02:06,649
a sprite that tells you
what image to load.

46
00:02:07,820 --> 00:02:11,910
Any time you press the up key,
we listen for that event.

47
00:02:11,910 --> 00:02:15,120
And then in your player's update
function you should say ok, if the up

48
00:02:15,120 --> 00:02:20,520
key is pressed, I need to decrease my x
value on that player from this to this.

49
00:02:21,540 --> 00:02:24,370
The update function only
updates that property,

50
00:02:24,370 --> 00:02:29,170
it's the render function that later
on says, ok now redraw everything.

51
00:02:29,170 --> 00:02:33,310
And by the process of the x
property being different.

52
00:02:33,310 --> 00:02:36,330
now your character is drawn
in a different location.

53
00:02:36,330 --> 00:02:40,280
In the main function, you see we're
kind of playing around with dates and

54
00:02:40,280 --> 00:02:42,490
times a little bit.

55
00:02:42,490 --> 00:02:45,535
The reason we do that is to provide
the opportunity for smooth animation.

56
00:02:45,535 --> 00:02:46,170
>> Mm-hm.

57
00:02:46,170 --> 00:02:47,260
>> So everyone's computer.

58
00:02:47,260 --> 00:02:48,810
Like, I don't know what
kind of computer you have.

59
00:02:48,810 --> 00:02:49,310
And, you know?

60
00:02:49,310 --> 00:02:52,500
If you run this on a Macbook Pro or
a Macbook Air, your computer can

61
00:02:52,500 --> 00:02:56,930
process animation faster than mine,
potentially, or slower.

62
00:02:56,930 --> 00:03:00,400
And so what that means is,
on your computer for every tick.

63
00:03:00,400 --> 00:03:02,090
And a tick is.

64
00:03:02,090 --> 00:03:03,380
The game loop.

65
00:03:03,380 --> 00:03:04,910
Each time it loops we call that a tick.

66
00:03:04,910 --> 00:03:07,660
So it updates and
renders and that's a tick.

67
00:03:07,660 --> 00:03:09,440
If you're on a really good computer,

68
00:03:09,440 --> 00:03:10,880
your ticks will be going really,
really fast.

69
00:03:10,880 --> 00:03:12,050
>> Yeah.
>> And my ticks

70
00:03:12,050 --> 00:03:14,490
on a slower computer might
not be going that quick.

71
00:03:14,490 --> 00:03:16,990
And the way that plays itself out is

72
00:03:16,990 --> 00:03:19,205
your bugs are screaming across
the screen really quick.

73
00:03:19,205 --> 00:03:19,720
>> [LAUGH]
>> And

74
00:03:19,720 --> 00:03:22,050
mine are cruising along a little slower.

75
00:03:22,050 --> 00:03:26,250
So we need a constant to smooth this
out and make sure that my ticks and

76
00:03:26,250 --> 00:03:30,870
your ticks generate a same pace for
these animations.

77
00:03:30,870 --> 00:03:33,280
Thankfully, time is
a pretty good constant.

78
00:03:33,280 --> 00:03:37,290
So anytime you have smooth animation,
you want to multiply that animation

79
00:03:38,970 --> 00:03:43,920
against the difference of the time that
the last tick ran and the current tick.

80
00:03:43,920 --> 00:03:46,900
And that's what creates the smooth
animation for your bugs.

81
00:03:46,900 --> 00:03:48,580
That way your bugs run just
as quickly as mine do.

82
00:03:48,580 --> 00:03:51,930
>> And the variable we've defined
that as is the dt variable.

83
00:03:53,100 --> 00:03:56,430
>> The engine function also
draws what we call the level.

84
00:03:56,430 --> 00:03:58,340
And so that's the base layer.

85
00:03:58,340 --> 00:04:00,500
If you think of kind of layering a cake.

86
00:04:00,500 --> 00:04:02,640
You know the level we draw first and

87
00:04:02,640 --> 00:04:05,580
then we draw all our characters,
because they're transparent PNGs.

88
00:04:05,580 --> 00:04:08,260
So we can draw them
without affecting things.

89
00:04:08,260 --> 00:04:11,270
So we also take care of
drawing the level for you.

90
00:04:11,270 --> 00:04:14,090
You can go in and
modify this if you want to.

91
00:04:14,090 --> 00:04:16,490
>> Plenty of people have made
the board wider, taller,

92
00:04:16,490 --> 00:04:18,940
added their own sprites and
things like that.

93
00:04:18,940 --> 00:04:19,550
>> Yeah.

94
00:04:19,550 --> 00:04:21,000
It's pretty easy.

95
00:04:21,000 --> 00:04:25,280
If you want to modify it you pretty
much just add a new item into the array,

96
00:04:25,280 --> 00:04:27,450
a new image into the array,
and then either increase or

97
00:04:27,450 --> 00:04:32,180
decrease the number of rows and
columns based on how big you wanted it.

98
00:04:32,180 --> 00:04:36,080
>> Yep, and we have all the code there
to handle loading up your images.

99
00:04:36,080 --> 00:04:37,894
So i guess we'll look at resources.js?

100
00:04:39,170 --> 00:04:42,800
This is just an easy image loader for
you.

101
00:04:42,800 --> 00:04:47,980
So loading an image in JavaScript
can kind of be an intense process.

102
00:04:47,980 --> 00:04:49,180
You have to create a new image and

103
00:04:49,180 --> 00:04:51,380
then you have to apply
a source attribute to it.

104
00:04:51,380 --> 00:04:55,290
And if you want any events
to happen when that

105
00:04:55,290 --> 00:04:57,910
image loads then you have to do
things in a different order.

106
00:04:57,910 --> 00:05:01,710
It can get messy so all this does
is it handles all of that for you.

107
00:05:01,710 --> 00:05:05,780
So you have a really nice helper
function called resources.get.

108
00:05:05,780 --> 00:05:10,440
Anytime you call that with passing in
a URL, it will go grab that URL for

109
00:05:10,440 --> 00:05:13,660
you and load it up as an image
you can use in your canvas.

110
00:05:13,660 --> 00:05:17,850
One of the other benefits of this
is that we have a caching layer,

111
00:05:17,850 --> 00:05:20,300
like a really simple cache built in.

112
00:05:20,300 --> 00:05:25,240
So if you call resource.get an image
one hundred times, it's only going

113
00:05:25,240 --> 00:05:28,240
to go build that image one time
because it knows it already has.

114
00:05:28,240 --> 00:05:33,700
So it's just helps in
the memory of performance.

115
00:05:33,700 --> 00:05:40,250
>> I'm going to show you the app.js
which is very important because what,

116
00:05:40,250 --> 00:05:45,090
as you can see we have already
provided you with an enemy class.

117
00:05:45,090 --> 00:05:46,810
So in JavaScript.

118
00:05:46,810 --> 00:05:51,030
A class object or and
a function is going to look the same.

119
00:05:51,030 --> 00:05:52,605
And is going to be defined the same.

120
00:05:52,605 --> 00:05:53,415
same way.

121
00:05:53,415 --> 00:05:57,005
So when you see variable emeny
equals function,

122
00:05:57,005 --> 00:06:02,655
this is actually an enemy class and
they have given this stop's Sprite,

123
00:06:02,655 --> 00:06:07,795
so Sprite is actually a keyword for
a presenting images.

124
00:06:07,795 --> 00:06:12,090
So it's going to give you
the image of the enemy and

125
00:06:12,090 --> 00:06:15,250
then right here you have
the update function for

126
00:06:15,250 --> 00:06:19,080
the enemies as well as the render
function for the enemy.

127
00:06:19,080 --> 00:06:24,555
So these are going to be the member
functions of the enemy class.

128
00:06:24,555 --> 00:06:28,435
And as you can see the update
function takes a dt.

129
00:06:28,435 --> 00:06:33,075
So dt parameter is to be multiplied
with the movement of the bug for

130
00:06:33,075 --> 00:06:35,115
a smooth transition.

131
00:06:35,115 --> 00:06:37,705
That is why we are doing it. And

132
00:06:37,705 --> 00:06:41,785
It's going to be the same on all browsers
on all sort of operating system so

133
00:06:41,785 --> 00:06:45,535
you don't need to worry about it and
that's why we use the parameter.

134
00:06:47,820 --> 00:06:50,360
Render, is again,
going to render the bug.

135
00:06:50,360 --> 00:06:53,000
And then what you're going to do is

136
00:06:54,360 --> 00:06:58,480
add in the player class
similar to the enemy class.

137
00:06:58,480 --> 00:07:03,580
Only that you should add in
an additional functionality in your player

138
00:07:03,580 --> 00:07:08,480
class which is called checkCollisions,
because every time a bug and

139
00:07:08,480 --> 00:07:10,850
a player collide you
need to reset the game.

140
00:07:10,850 --> 00:07:16,410
So that is why you are going to
be using the checkCollisions function.

141
00:07:16,410 --> 00:07:21,330
All the way at the end as you can see
we have a number of keys specified.

142
00:07:21,330 --> 00:07:23,870
Left, right, up and down.

143
00:07:23,870 --> 00:07:28,600
So these keys are going
to be an event listener.

144
00:07:28,600 --> 00:07:33,490
So anytime you hold down any of
these keys, the left, right, up or

145
00:07:33,490 --> 00:07:37,990
down arrows, you need to call and
handle input method.

146
00:07:37,990 --> 00:07:42,360
That is going to increment or
decrement your X and

147
00:07:42,360 --> 00:07:46,100
Y values for
your player depending on his movements.

148
00:07:46,100 --> 00:07:51,210
So, left is going to move the player,

149
00:07:51,210 --> 00:07:54,070
left and right are going to move
the player along the x-axis,

150
00:07:54,070 --> 00:07:57,330
whereas up and down will move
the player along the y-axis.

151
00:07:57,330 --> 00:08:01,730
So you need to define another
method called handleInput.

152
00:08:01,730 --> 00:08:07,530
That is going to take in, that is going
to listen to your keyboard strokes and

153
00:08:07,530 --> 00:08:10,220
are do the necessary movements.

154
00:08:10,220 --> 00:08:16,530
So that's about, it would be app.js
file and do look into the rubric.

155
00:08:16,530 --> 00:08:21,048
Amanda do you have any important
pointers for our students?

156
00:08:21,048 --> 00:08:24,760
[LAUGH]
>> I think the most important thing

157
00:08:24,760 --> 00:08:29,580
I've seen students not taking as
much time as they might need to to

158
00:08:29,580 --> 00:08:32,299
just really walk through
what's already here.

159
00:08:32,299 --> 00:08:36,100
I think it's really important to get
comfortable with a star-rich code, and

160
00:08:36,100 --> 00:08:42,700
then recall that most of your code
is going to go into the app.js.

161
00:08:42,700 --> 00:08:44,940
That's where you're going
to do most of your work.
