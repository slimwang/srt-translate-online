1
00:00:00,000 --> 00:00:02,000
[Narrator] Naive Bayes can also be applied to

2
00:00:02,000 --> 00:00:05,000
the problem of hand written digits recognition.

3
00:00:05,000 --> 00:00:09,000
This is a sample of hand-written digits taken

4
00:00:09,000 --> 00:00:12,000
from a U.S. postal data set

5
00:00:12,000 --> 00:00:17,000
where hand written zip codes on letters are

6
00:00:17,000 --> 00:00:21,000
being scanned and automatically classified.

7
00:00:21,000 --> 00:00:23,000
The machine-learning problem here is

8
00:00:23,000 --> 00:00:28,000
taken a symbol just like this.

9
00:00:28,000 --> 00:00:30,000
What is the corresponding number?

10
00:00:30,000 --> 00:00:32,000
Here it's obviously 0.

11
00:00:32,000 --> 00:00:34,000
Here it's obviously 1.

12
00:00:34,000 --> 00:00:36,000
Here it's obviously 2, 1.

13
00:00:36,000 --> 00:00:38,000
For the one down here,

14
00:00:38,000 --> 00:00:41,000
it's a little bit harder to tell.

15
00:00:41,000 --> 00:00:44,000
Now when you apply Naive Bayes,

16
00:00:44,000 --> 00:00:46,000
the input vector

17
00:00:46,000 --> 00:00:48,000
could be the pixel values

18
00:00:48,000 --> 00:00:50,000
of each individual pixel so we have

19
00:00:50,000 --> 00:00:54,000
a 16 x 16 input resolution.

20
00:00:54,000 --> 00:00:59,000
You would get 256 different values

21
00:00:59,000 --> 00:01:02,000
corresponding to the brightness of each pixel.

22
00:01:02,000 --> 00:01:05,000
Now obviously given sufficiently made

23
00:01:05,000 --> 00:01:07,000
training example, you might hope

24
00:01:07,000 --> 00:01:09,000
to recognize digits,

25
00:01:09,000 --> 00:01:12,000
but one of the deficiencies of this approach is

26
00:01:12,000 --> 00:01:15,000
it is not particularly shifted range.

27
00:01:15,000 --> 00:01:19,000
So for example a pattern like this

28
00:01:19,000 --> 00:01:21,000
will look fundamentally different

29
00:01:21,000 --> 00:01:24,000
from a pattern like this.

30
00:01:24,000 --> 00:01:27,000
Even though the pattern on the right is obtained

31
00:01:27,000 --> 00:01:29,000
by shifting the pattern on the left

32
00:01:29,000 --> 00:01:31,000
by 1 to the right.

33
00:01:31,000 --> 00:01:34,000
There's many different solutions, but a common one could be

34
00:01:34,000 --> 00:01:36,000
to use smoothing in a different way from

35
00:01:36,000 --> 00:01:38,000
the way we discussed it before.

36
00:01:38,000 --> 00:01:40,000
Instead of just counting 1 pixel value's count,

37
00:01:40,000 --> 00:01:42,000
you could mix it with counts of the

38
00:01:42,000 --> 00:01:44,000
neighboring pixel values so if

39
00:01:44,000 --> 00:01:46,000
all pixels are slightly shifted,

40
00:01:46,000 --> 00:01:48,000
we get about the same statistics

41
00:01:48,000 --> 00:01:50,000
as the pixel itself.

42
00:01:50,000 --> 00:01:52,000
Such a method is called input smoothing.

43
00:01:52,000 --> 00:01:55,000
You can what's technically called convolve

44
00:01:55,000 --> 00:01:57,000
the input vector equals pixel value variable, and

45
00:01:57,000 --> 00:02:00,000
you might get better results than if you

46
00:02:00,000 --> 00:02:02,000
do Naive Bayes on the raw pixels.

47
00:02:02,000 --> 00:02:04,000
Now to tell you the truth for

48
00:02:04,000 --> 00:02:06,000
digit recognition of this type,

49
00:02:06,000 --> 00:02:08,000
Naive Bayes is not a good choice.

50
00:02:08,000 --> 00:02:10,000
The conditional independence assumption

51
00:02:10,000 --> 00:02:12,000
of each pixel, given the class,

52
00:02:12,000 --> 00:02:14,000
is too strong an assumption in this case,

53
00:02:14,000 --> 00:02:17,000
but it's fun to talk about image recognition

54
00:02:17,000 --> 99:59:59,999
in the context of Naive Bayes regardless.
