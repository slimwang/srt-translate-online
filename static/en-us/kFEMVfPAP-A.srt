1
00:00:00,000 --> 00:00:04,000
In this problem, we have to determine that if we have some code that does some stuff,

2
00:00:04,000 --> 00:00:08,000
and we have a list, and we compute some solution,

3
00:00:08,000 --> 00:00:14,000
that if I insert this call to the function "proc" 1, 2, 3, or 4 as we'll go through them

4
00:00:14,000 --> 00:00:20,000
that this code behaves exactly the same no matter what else it does. So let's get to it.

5
00:00:20,000 --> 00:00:22,000
In this first procedure, there's only one line.

6
00:00:22,000 --> 00:00:28,000
We set the first value of p to equal its second value.

7
00:00:28,000 --> 00:00:31,000
This is going to change the elements in p.

8
00:00:31,000 --> 00:00:40,000
I mean, if we had in a list [1, 2] executing proc1 would then change it to [1, 2].

9
00:00:40,000 --> 00:00:45,000
Obviously, that can very well effect how this could execute, so this isn't right.

10
00:00:45,000 --> 00:00:48,000
This one can be a little tricky, so let's work through it.

11
00:00:48,000 --> 00:00:55,000
We know that p is a pointer to a list--let's say it's 1, 2, and 3.

12
00:00:55,000 --> 00:01:01,000
Now we're reassigning what p points to to the original value of p, which is this,

13
00:01:01,000 --> 00:01:03,000
concatenated with the list 1.

14
00:01:03,000 --> 00:01:07,000
This is going to create a new list, because that's what the plus operator does with lists.

15
00:01:07,000 --> 00:01:09,000
We want to create a new list.

16
00:01:09,000 --> 00:01:12,000
Now p points to this. We don't do anything with p.

17
00:01:12,000 --> 00:01:16,000
But most importantly the original list has been left unchanged.

18
00:01:16,000 --> 00:01:19,000
The end result is that this is good.

19
00:01:19,000 --> 00:01:22,000
We can go through this problem like we did the previous one.

20
00:01:22,000 --> 00:01:25,000
We start with a variable p that points to a list.

21
00:01:25,000 --> 00:01:29,000
We then create a new variable "q," which points to the same thing as p.

22
00:01:29,000 --> 00:01:35,000
On p we append 3, and then on q, which is the same list, we pop 3.

23
00:01:35,000 --> 00:01:39,000
The end result is the same list we had before.

24
00:01:39,000 --> 00:01:44,000
Here we create a new list called "q," which is an empty list. There's nothing there.

25
00:01:44,000 --> 00:01:48,000
While p is not empty, we append onto q what we pop from p.

26
00:01:48,000 --> 00:01:53,000
If we remember, the pop is going to take the last entry in p and return it.

27
00:01:53,000 --> 00:01:56,000
It's going to pop off 32, and then we're going to append that on the q.

28
00:01:56,000 --> 00:02:02,000
This is going to continue until we have the reverse of the previous list here and p is empty,

29
00:02:02,000 --> 00:02:05,000
which I'll just symbolize with that.

30
00:02:05,000 --> 00:02:07,000
Then we're going to reverse the process here.

31
00:02:07,000 --> 00:02:13,000
If I undo what I just did, the end result is we have the original list, and we have the empty list.

32
00:02:13,000 --> 00:02:15,000
Although, this doesn't matter.

33
00:02:15,000 --> 00:02:18,000
The main point is that we still have our original list.

34
00:02:18,000 --> 00:02:21,000
This one is good.
