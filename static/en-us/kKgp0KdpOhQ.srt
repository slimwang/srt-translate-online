1
00:00:00,420 --> 00:00:03,180
Here's the math on why RSA works.

2
00:00:03,180 --> 00:00:07,770
We know that the public key is e and
n and the private key is d,n.

3
00:00:07,770 --> 00:00:14,020
We also know that n equals to p times q,
and p and q are prime numbers.

4
00:00:14,020 --> 00:00:18,400
Therefore, quotient n is p
minus 1 times q minus 1.

5
00:00:18,400 --> 00:00:19,700
The public key e and

6
00:00:19,700 --> 00:00:24,660
the public key d are multiplicative
inverse of each other, mod potion n.

7
00:00:24,660 --> 00:00:29,160
That's why we say the public key and
the private key are paired together.

8
00:00:29,160 --> 00:00:35,390
And therefore when we compute X raised
the power of e times d it's the same as

9
00:00:35,390 --> 00:00:41,020
X raised to the power of e times d
mod potion n which happens to be 1.

10
00:00:41,020 --> 00:00:44,940
That is, let me compute X raised
to the power of e times d

11
00:00:44,940 --> 00:00:47,290
is the same as X mod n.

12
00:00:47,290 --> 00:00:51,890
So that is a quick recap of
the properties of the RSA public and

13
00:00:51,890 --> 00:00:52,980
private keys.

14
00:00:52,980 --> 00:00:58,920
Now, to encrypt a message m,
we raise m to the power of e mod n.

15
00:00:58,920 --> 00:01:04,200
To decrypt, we take the ciphertext,
raise it to the power of d mod n.

16
00:01:04,200 --> 00:01:09,500
This is the same as raising m
to the power of e times d mod n,

17
00:01:09,500 --> 00:01:13,428
which is the same as m mod n
according to this property.

18
00:01:13,428 --> 00:01:18,640
Since we require that the plain
text input is smaller than the key,

19
00:01:18,640 --> 00:01:23,770
that means m mod n equal to m and
that's the original plaintext.

20
00:01:23,770 --> 00:01:27,370
So this shows that
decryption indeed works.

21
00:01:27,370 --> 00:01:28,550
As an exercise,

22
00:01:28,550 --> 00:01:33,880
you can similarly verify that digital
signature under RSA also works.

23
00:01:33,880 --> 00:01:38,260
Here's an example of RSA,
the keys are generated as follows.

24
00:01:38,260 --> 00:01:40,754
We select two prime numbers.

25
00:01:40,754 --> 00:01:46,610
p equal to 17, q equal to 11 so
n is p times q,

26
00:01:46,610 --> 00:01:50,810
which is 187 and totient n

27
00:01:50,810 --> 00:01:55,780
is p minus 1 times q minus 1
because p and q are prime numbers.

28
00:01:55,780 --> 00:02:02,620
So in this case,
totient 187 is 16 times 10 which is 160.

29
00:02:02,620 --> 00:02:07,930
For public key we select a number
that's relatively prime to totient n.

30
00:02:07,930 --> 00:02:13,300
In this case, we select 7,
because 7 is relatively prime to 160.

31
00:02:13,300 --> 00:02:20,050
The private key d, is the multiplicative
inverse of e Mod potion n.

32
00:02:20,050 --> 00:02:24,500
So the multiplicative
inverse of 7 mod 160 is 23,

33
00:02:24,500 --> 00:02:27,460
therefore the private key is 23.

34
00:02:27,460 --> 00:02:32,470
To summarize the key generation process,
we have

35
00:02:32,470 --> 00:02:37,000
the public key 7, 187,
public key 23, 187.

36
00:02:37,000 --> 00:02:41,410
Suppose we use a public key to
encrypt the plaintext message 88.

37
00:02:41,410 --> 00:02:47,920
We raised 88 to a power of 7 mod 187,
the result is 11.

38
00:02:47,920 --> 00:02:53,640
To decrypt we raise 11 to
power of 23 and then mod 187.

39
00:02:53,640 --> 00:02:58,375
The result is 88,
the same as the plaintext.
