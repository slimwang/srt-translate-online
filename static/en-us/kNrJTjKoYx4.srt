1
00:00:00,410 --> 00:00:03,944
We now have some sense of how we can make lighting calculations, not take an

2
00:00:03,944 --> 00:00:07,622
incredible amount of time. In this lesson, we're going to take an extremely high

3
00:00:07,622 --> 00:00:11,484
level view of how objects get rendered by a graphics accelerator. This graphics

4
00:00:11,484 --> 00:00:16,074
hardware is usually called the GPU, for graphics processing unit. A GPU uses a

5
00:00:16,074 --> 00:00:20,274
rendering process called rasterization or scan conversion, which is optimized to

6
00:00:20,274 --> 00:00:25,450
use the simplifications I've outlined. Let's look at one rendering pipeline from

7
00:00:25,450 --> 00:00:29,614
end to end. The idea of a pipeline is to treat each object separately. The first

8
00:00:29,614 --> 00:00:33,676
step is simply that the application sends objects to the GPU. What objects?

9
00:00:33,676 --> 00:00:37,926
Typically, 3D triangles. Each triangle is defined by the full locations of its

10
00:00:37,926 --> 00:00:42,491
three points. An application converts a cube into just a few triangles. A sphere

11
00:00:42,491 --> 00:00:46,477
gets turned into a bunch of triangles. So, in the first step, the application

12
00:00:46,477 --> 00:00:50,159
decides what triangles to send down the pipeline. In the second stage of the

13
00:00:50,159 --> 00:00:53,393
pipeline, these triangles are modified by the camera's view of the world along

14
00:00:53,393 --> 00:00:57,169
with whatever modelling transform is applied. A modelling transform is a way to

15
00:00:57,169 --> 00:01:01,430
modify the location, orientation and even the size of a part. For example, if

16
00:01:01,430 --> 00:01:05,390
you were rendering a bouncing ball, the ball's modeling transform each frame,

17
00:01:05,390 --> 00:01:09,216
would move the ball to a different location along it's path. The effect of the

18
00:01:09,216 --> 00:01:12,966
camera view is clear enough. After the object is moved to it's location for the

19
00:01:12,966 --> 00:01:17,196
frame, is it still in view of the camera? That is, is the object inside the view

20
00:01:17,196 --> 00:01:21,570
frustum. If not, then we're done with this object, since it won't affect any

21
00:01:21,570 --> 00:01:25,936
pixels on the screen. In this case, we say the object is fully clipped. So here,

22
00:01:25,936 --> 00:01:30,794
this cube is fully clipped since its outside of the view frustum. The camera and

23
00:01:30,794 --> 00:01:34,410
modelling transforms compute the location of each triangle on the screen. If the

24
00:01:34,410 --> 00:01:38,130
triangle is partially or fully inside the frustum, the three points of the

25
00:01:38,130 --> 00:01:42,004
triangle on the screen are then used in a process called rasterization. If a

26
00:01:42,004 --> 00:01:45,774
triangle is slightly off the screen, it gets clipped and it's turned into more

27
00:01:45,774 --> 00:01:50,142
triangles. This process identifies all the pixels whose centers are inside the

28
00:01:50,142 --> 00:01:54,451
triangle. In other words, it fills in the triangle. So, rasterization here has

29
00:01:54,451 --> 00:01:59,000
found that this triangle covers the pixel centers, in these various places.

30
00:01:59,000 --> 00:02:03,193
These locations are then used to show the image of the triangle on the screen.
