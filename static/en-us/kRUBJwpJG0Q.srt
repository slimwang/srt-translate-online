1
00:00:00,445 --> 00:00:04,170
We created our data task, but
print statement is not executing.

2
00:00:04,170 --> 00:00:05,380
What's going on?

3
00:00:05,380 --> 00:00:10,400
Well, the problem is the NSURL session
doesn't directly run tasks for us.

4
00:00:10,400 --> 00:00:14,520
Instead it gives us methods to create
tasks, but then we're responsible for

5
00:00:14,520 --> 00:00:16,250
starting them ourselves.

6
00:00:16,250 --> 00:00:20,630
Now, this may seem tedious, but it
actually gives us much more flexibility

7
00:00:20,630 --> 00:00:23,930
for starting, stopping,
and resuming tasks.

8
00:00:23,930 --> 00:00:28,200
To start the task, we just need to call
the resume method on the task itself.

9
00:00:28,200 --> 00:00:29,180
Now let's run this.

10
00:00:31,786 --> 00:00:34,930
>> There we go, now that's the print
statement we were expecting.

11
00:00:34,930 --> 00:00:38,950
The next step will be to take the data
that's Its a completion handler and

12
00:00:38,950 --> 00:00:41,770
create an image that we
can display to the user.

13
00:00:41,770 --> 00:00:44,014
Let's look at Apple's documentation for

14
00:00:44,014 --> 00:00:46,725
the data task with URL
completion handler method.

15
00:00:46,725 --> 00:00:48,420
In the discussion section,

16
00:00:48,420 --> 00:00:51,450
there's this one really important
blur that I want to focus on.

17
00:00:51,450 --> 00:00:55,230
It says, If the request completes
successfully, the data parameter of

18
00:00:55,230 --> 00:00:58,930
the completion handler block
contains the resource data.

19
00:00:58,930 --> 00:01:03,420
And the air parameter's nil, but if the
request fails the data parameter is nil,

20
00:01:03,420 --> 00:01:06,900
and air parameter contains
information about the failure.

21
00:01:06,900 --> 00:01:09,880
So back in the code we can use this
information to our advantage and

22
00:01:09,880 --> 00:01:12,360
check first to see if the air is nil.

23
00:01:12,360 --> 00:01:16,320
As long as the air is nill then
our data should be good to use.

24
00:01:16,320 --> 00:01:20,300
Now, how can we take our data, which is
in the form of an NS data object, and

25
00:01:20,300 --> 00:01:23,290
turn it into an image
that we can display?

26
00:01:23,290 --> 00:01:24,740
Actually, it's quite easy.

27
00:01:24,740 --> 00:01:28,490
The UI image class has a handy
initializer that can construct an image

28
00:01:28,490 --> 00:01:29,420
directly from NS data.

29
00:01:29,420 --> 00:01:32,160
So we'll use it to create an image.

30
00:01:32,160 --> 00:01:36,590
And then we'll set the image views
image property to our downloaded image.

31
00:01:36,590 --> 00:01:39,050
This looks great,
let's run it and see if it works.

32
00:01:44,887 --> 00:01:47,420
>> Well, somethings wrong again,
we're not getting our image.

33
00:01:47,420 --> 00:01:48,300
Let me try something else,

34
00:01:48,300 --> 00:01:51,530
since I have a little experience
dealing with these kind of problems.

35
00:01:51,530 --> 00:01:54,550
In the simulator, I'm going to
simulate hitting the home button.

36
00:01:54,550 --> 00:01:58,760
The hot key for
this is command shift h, there we go.

37
00:01:59,890 --> 00:02:02,970
Or you can select it from
the simulator's toolbar here at the top.

38
00:02:04,530 --> 00:02:05,590
There it is, home button.

39
00:02:07,690 --> 00:02:09,600
This takes us out of the app.

40
00:02:09,600 --> 00:02:10,440
Now, let's reopen it.

41
00:02:12,050 --> 00:02:13,710
There's our image.

42
00:02:13,710 --> 00:02:15,470
How come it didn't show up at first?

43
00:02:15,470 --> 00:02:16,940
Let's investigate this problem next.
