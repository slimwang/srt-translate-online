1
00:00:00,120 --> 00:00:03,950
Another piece of information that the
cache maintains about each of the blocks

2
00:00:03,950 --> 00:00:06,790
it has is the so-called valid bit.

3
00:00:06,790 --> 00:00:10,390
If we look at the cache with
four blocks of data and

4
00:00:10,390 --> 00:00:14,410
the tag that tells us which block
we have in each of the lines,

5
00:00:14,410 --> 00:00:18,190
the question is, what happens
when we turn on the processor?

6
00:00:18,190 --> 00:00:22,660
At that time the cache
contains no useful data.

7
00:00:22,660 --> 00:00:25,420
But the data will have some bits here.

8
00:00:25,420 --> 00:00:30,040
Even if all of the bits are zero,
we need to know that whatever address we

9
00:00:30,040 --> 00:00:33,340
produce, it doesn't match
any of these blocks here, so

10
00:00:33,340 --> 00:00:37,160
that we need to access memory and
bring the actual data into the cache.

11
00:00:37,160 --> 00:00:39,850
We do this by matching the tag.

12
00:00:39,850 --> 00:00:41,860
But what does the tag initially have?

13
00:00:43,200 --> 00:00:45,840
If the tag initially
just has all zeroes,

14
00:00:47,150 --> 00:00:51,890
what if we're accessing address
like this where it might

15
00:00:51,890 --> 00:00:57,090
happen that this address actually has
a tag bit that correspond to zero?

16
00:00:57,090 --> 00:01:00,660
In that case the initial
tag would match this and

17
00:01:00,660 --> 00:01:03,710
we would be accessing this
garbage data in the cache.

18
00:01:03,710 --> 00:01:07,630
Which hasn't been brought from memory,
so we're really accessing something

19
00:01:07,630 --> 00:01:10,240
that is not equal to what
we should be accessing.

20
00:01:10,240 --> 00:01:12,430
Note that any possible value for

21
00:01:12,430 --> 00:01:16,699
the tag might match the tag
of an actual address.

22
00:01:17,760 --> 00:01:21,160
So, it is not that it is
wrong to initialize to 0,

23
00:01:21,160 --> 00:01:25,830
it's that any particular initial value
here, would produce the same problem.

24
00:01:25,830 --> 00:01:32,790
So what we do, is we add an additional
bit of state to the cache for each line.

25
00:01:32,790 --> 00:01:38,340
That tells us whether the tag and
the data are valid.

26
00:01:38,340 --> 00:01:44,290
Initially, the valid bits need to be
set to 0, which means that if our tag

27
00:01:44,290 --> 00:01:50,800
matches the address but the valid bit
is 0, we treat that as not a hit.

28
00:01:50,800 --> 00:01:56,770
So the hit condition is really
the tag matches our block number and

29
00:01:56,770 --> 00:01:58,860
the valid bit is set to one.

30
00:01:58,860 --> 00:02:01,420
By setting the valid
bits to zero initially,

31
00:02:01,420 --> 00:02:06,480
we make sure that none of these can
hit until real data is brought in.

32
00:02:06,480 --> 00:02:10,590
And thus, we also remove the problem
of initializing the data and the tag.

33
00:02:10,590 --> 00:02:12,650
We can leave anything here.

34
00:02:12,650 --> 00:02:16,430
So these don't need to be zeroed out
as long as the valid bit is set to

35
00:02:16,430 --> 00:02:17,830
zero correctly.

36
00:02:17,830 --> 00:02:21,110
So when we boot up the processor,
we set all the valid bits to zero.

37
00:02:21,110 --> 00:02:24,230
And then,
when we bring stuff from memory,

38
00:02:24,230 --> 00:02:28,560
put the data here, set the tag to
correspond to the block's number.

39
00:02:28,560 --> 00:02:31,430
And at that time,
we also set the valid bit to one.
