1
00:00:00,430 --> 00:00:07,296
Now there's a convention in situation
calculus that predicates like at,

2
00:00:07,296 --> 00:00:11,550
we said plane p was at
airport x in situation s.

3
00:00:11,551 --> 00:00:16,664
These types of predicates that can vary
from one situation to another are called

4
00:00:16,664 --> 00:00:21,869
fluents, from the word fluent having to
do with fluidity, or change over time.

5
00:00:22,920 --> 00:00:27,410
And the convention is that they
refer to a specific situation and

6
00:00:27,410 --> 00:00:32,149
we always put that situation argument
as the last in the predicate.

7
00:00:33,679 --> 00:00:39,070
Now, the trickiest part about situation
calculus is describing what changes and

8
00:00:39,070 --> 00:00:42,070
what doesn't change as
a result of an action.

9
00:00:42,070 --> 00:00:46,630
Remember in classical planning
we had action schemas,

10
00:00:46,630 --> 00:00:49,719
where we described one action at a time,
and said what changed.

11
00:00:51,049 --> 00:00:54,617
For situation calculus, it turns out to
be easier to do it the other way around.

12
00:00:54,618 --> 00:00:59,870
Instead of writing one action,
or one schema, or one axiom for

13
00:00:59,869 --> 00:01:04,500
each action, we do one for each fluent,
for each predicate that can change.

14
00:01:05,989 --> 00:01:10,509
And we use a convention called
Successor-State Axioms and

15
00:01:10,510 --> 00:01:14,670
these are used to describe what happens
in the state that's a successor

16
00:01:14,670 --> 00:01:16,540
of executing an action.

17
00:01:16,540 --> 00:01:22,610
And in general, a Successor-State Axiom
will have the form of saying for

18
00:01:22,609 --> 00:01:29,799
all actions and states, if it's possible
to execute action a in state s,

19
00:01:29,799 --> 00:01:36,439
then, and I'll show in general what they
look like here, then the fluent is true,

20
00:01:36,439 --> 00:01:44,329
if and only if action a made it true or
action a didn't undo it.

21
00:01:44,329 --> 00:01:49,310
So that is either it wasn't true
before and a made it be true.

22
00:01:49,310 --> 00:01:53,240
Or it was true before and a didn't
do something to stop it being true.

23
00:01:53,239 --> 00:01:57,199
For example, I'll show you
the Successor- State Axiom for

24
00:01:57,200 --> 00:01:58,420
the in predicate.

25
00:01:58,420 --> 00:02:01,430
And just to make it a little bit
simpler, I'll leave out all the for

26
00:02:01,430 --> 00:02:02,360
all quantifiers.

27
00:02:02,359 --> 00:02:05,819
So wherever you see a variable without
a quantifier, assume that there's a for

28
00:02:05,819 --> 00:02:06,649
all.

29
00:02:06,650 --> 00:02:14,138
And what we'll say is it's possible
to execute a in situation s.

30
00:02:14,138 --> 00:02:20,411
If that's true, then the in
predicate holds some cargo c and

31
00:02:20,411 --> 00:02:28,710
some plane in the state which is the
result of executing action a in state s.

32
00:02:28,710 --> 00:02:36,700
So that end predicate will hold if and
only if either a was a load action.

33
00:02:36,699 --> 00:02:41,869
So if we load the cargo into the plane,
then the result

34
00:02:41,870 --> 00:02:46,180
of executing that action a,
is that the cargo is in the plane.

35
00:02:47,210 --> 00:02:52,659
Or it might be that it was already true
that the cargo was in the plane in

36
00:02:52,659 --> 00:03:00,409
situation s, and a,
is not equal to an unload action.

37
00:03:00,409 --> 00:03:06,329
So, for all a and s for which it's
possible to execute a in situation s,

38
00:03:06,330 --> 00:03:12,630
the inpredicate holds if and only if
the action was a load or the inpredicate

39
00:03:12,629 --> 00:03:16,030
used to hold in the previous state and
the action is not an unload.

