1
00:00:00,000 --> 00:00:05,000
The basic next question is is there a way to void the overshoot?

2
00:00:05,000 --> 00:00:11,000
It would be nice if we could do this, because driving in an oscillating car is no fun.

3
00:00:11,000 --> 00:00:14,000
In fact, it makes you really seasick, believe me.

4
00:00:14,000 --> 00:00:20,000
I've been in this car for months on end when we prepared for the Darpa Grand Challenge.

5
00:00:20,000 --> 00:00:23,000
The trick is called "PD-control."

6
00:00:23,000 --> 00:00:30,000
In PD-control my steering alpha is no just related to the crosstrack error by virtue

7
00:00:30,000 --> 00:00:33,000
by virtue of the gain parameter tau p,

8
00:00:33,000 --> 00:00:36,000
but also to the temporal derivative of the crosstrack error.

9
00:00:36,000 --> 00:00:43,000
What this means is that when the car has turned enough to reduce the crosstrack error,

10
00:00:43,000 --> 00:00:46,000
it won't just go shooting for the x axis,

11
00:00:46,000 --> 00:00:51,000
but it will notice that it's already reducing the error.

12
00:00:51,000 --> 00:00:57,000
The error is becoming smaller over time. It counter steers. It steers up again.

13
00:00:57,000 --> 00:01:00,000
This will allow it to gracefully approach our target trajectory,

14
00:01:00,000 --> 00:01:08,000
assuming appropriate settings of our differential gain--tau d versus the proportional gain tau p.

15
00:01:08,000 --> 00:01:10,000
How do you compute this derivative over here?

16
00:01:10,000 --> 00:01:18,000
Well, at time t this is the same as the crosstrack error at time t minus the crosstrack error

17
00:01:18,000 --> 00:01:25,000
at time t minus 1 divided by the time span between t and t minus 1.

18
00:01:25,000 --> 00:01:29,000
In our code, we assume delta t equals 1, so so we can omit this.

19
00:01:29,000 --> 00:01:36,000
The difference of the current crosscheck error and the previous one is this term over here.

20
00:01:36,000 --> 00:01:41,000
We now control not just in proportion to the error itself but also to this difference

21
00:01:41,000 --> 00:01:47,000
of the error using a second constant tau d.

22
00:01:47,000 --> 00:01:53,000
Let's implement this. Now I give the run command two parameters--param1 and param2.

23
00:01:53,000 --> 00:01:58,000
I want you to implement a controller that varies the steering direction proportionally

24
00:01:58,000 --> 00:02:03,000
according to parameter 1, and differentially proportionally to parameter 2.

25
00:02:03,000 --> 00:02:08,000
Again, run for 100 time steps and see what happens.

26
00:02:08,000 --> 00:02:13,000
When I run my new controller with proportionality parameter of 0.2

27
00:02:13,000 --> 00:02:16,000
and the differentiation one is 3.0.

28
00:02:16,000 --> 00:02:22,000
Then, I get a sequence of y values that converge much more gently to 0.

29
00:02:22,000 --> 00:02:29,000
Miraculously, as time goes on, they really go down to 0 and stay at 0,

30
00:02:29,000 --> 00:02:32,000
which we didn't achieve for the proportional controller.

31
00:02:32,000 --> 99:59:59,999
Please write that routine so we can test it.
