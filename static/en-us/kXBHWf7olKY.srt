1
00:00:00,250 --> 00:00:04,240
So, forward search simply means you start with a feature. Let's see

2
00:00:04,240 --> 00:00:07,220
if I can draw a picture. So in forward search, you simply

3
00:00:07,220 --> 00:00:10,490
start with a feature, of your end features. You look at all

4
00:00:10,490 --> 00:00:13,930
of your features in isolation. Let's imagine we have five features. And I

5
00:00:13,930 --> 00:00:16,360
say well, I'm just going to pass you the first feature. Pass the

6
00:00:16,360 --> 00:00:18,990
first feature to the learning algorithm, I get a score. Then the

7
00:00:18,990 --> 00:00:21,470
second feature, then the third feature, then the fourth feature to the

8
00:00:21,470 --> 00:00:24,900
fifth feature. And which ever one of those features is best, I keep.

9
00:00:25,980 --> 00:00:28,330
So let's say it's the first one over here. So now

10
00:00:28,330 --> 00:00:31,800
I keep the first feature. And then I say, well now that

11
00:00:31,800 --> 00:00:35,000
I'm given the first feature, let's look at each of the remaining

12
00:00:35,000 --> 00:00:39,200
features and see if I add them, which one does best. So,

13
00:00:39,200 --> 00:00:42,580
I end up with one, two, three, four, five. I pick

14
00:00:42,580 --> 00:00:45,450
the best one. And let's say that turns out to be feature

15
00:00:45,450 --> 00:00:47,993
one. And then I look at feature one in combination with two

16
00:00:47,993 --> 00:00:51,269
and combination with three and in combination with four and in combination

17
00:00:51,269 --> 00:00:54,822
with five. Whichever one has the highest score that's the one

18
00:00:54,822 --> 00:00:57,967
I move forward. And so that would be let's say in this

19
00:00:57,967 --> 00:01:00,697
case worked out to be feature five and now that I

20
00:01:00,697 --> 00:01:04,126
have these two features, I pick a third feature of the ones

21
00:01:04,126 --> 00:01:07,861
that are remaining, two, three and four. And whichever one of

22
00:01:07,861 --> 00:01:11,074
those in combination with one and five I add next, and let's

23
00:01:11,074 --> 00:01:13,705
just say that turns out to be feature three. But it

24
00:01:13,705 --> 00:01:16,405
turns out the error, or the score that I get for adding

25
00:01:16,405 --> 00:01:19,285
the third feature to one and five, isn't significantly

26
00:01:19,285 --> 00:01:21,505
better than just having one and five, and so

27
00:01:21,505 --> 00:01:23,605
I stop here and say, that's the subset of

28
00:01:23,605 --> 00:01:26,130
features that I would take. Does that make sense?

29
00:01:26,130 --> 00:01:29,030
>> Yeah, that seems like a really neat idea and I could

30
00:01:29,030 --> 00:01:33,100
see that as being a kind of efficient polynomial way of searching this

31
00:01:33,100 --> 00:01:36,970
space. Though couldn't, could I think of it as a kind of hill

32
00:01:36,970 --> 00:01:38,910
climbing, though? Where, where my neighborhood

33
00:01:38,910 --> 00:01:41,700
relation is basically adding, one more feature?

34
00:01:41,700 --> 00:01:45,170
>> Sure. Absolutely. And if it's only adding one more feature,

35
00:01:45,170 --> 00:01:47,570
that's exactly what you're doing. You are doing a kind of,

36
00:01:47,570 --> 00:01:51,960
a kind of hill climb. So, in fact, the, alternative, or

37
00:01:51,960 --> 00:01:55,100
the sort of complement to forward search is backward search. And

38
00:01:55,100 --> 00:01:57,210
backward search is, I think, by the way, you describe it

39
00:01:57,210 --> 00:02:00,210
as exactly another kind of hill climbing. We're here we start

40
00:02:00,210 --> 00:02:02,600
out with all of the features, and you say which one

41
00:02:02,600 --> 00:02:06,830
can I eliminate, so I try one, two, three, four. I try

42
00:02:06,830 --> 00:02:10,690
one, two, three, five. I try one, two, four, five.

43
00:02:10,690 --> 00:02:14,722
I try two, three, four, five, and whichever four work

44
00:02:14,722 --> 00:02:17,326
out best are the ones that I keep in the

45
00:02:17,326 --> 00:02:21,022
second round, at let's just say that turns out to be

46
00:02:21,022 --> 00:02:24,193
one, two, three, and five. And then I see, well,

47
00:02:24,193 --> 00:02:26,643
of the remaining four, which one can I eliminate and still

48
00:02:26,643 --> 00:02:29,441
have the best score? And I keep doing that until

49
00:02:29,441 --> 00:02:32,631
I get down to a subset that still does pretty well.

50
00:02:32,631 --> 00:02:34,583
So let's say I get to this case, and it

51
00:02:34,583 --> 00:02:37,339
turns out, you know what? One, two, and five do bet,

52
00:02:37,339 --> 00:02:40,260
just, almost as well as one, two, three, and five. But

53
00:02:40,260 --> 00:02:44,110
once I go to just one and five, it does much

54
00:02:44,110 --> 00:02:48,940
worse and so I'm going to stick with that. So here

55
00:02:48,940 --> 00:02:50,560
you're right, I liked the way you described this, Michael, as

56
00:02:50,560 --> 00:02:53,510
hill climbing. Here I'm doing hill climbing, except my neighborhood is

57
00:02:53,510 --> 00:02:56,860
removing a, a single point instead of adding a single point.

58
00:02:56,860 --> 00:02:57,660
>> Yeah, that's

59
00:02:57,660 --> 00:03:02,950
cool. It's, for some reason, reminding me of like making it team,

60
00:03:02,950 --> 00:03:05,690
like you could, I could imagine tryouts where you put everybody on

61
00:03:05,690 --> 00:03:08,380
the field and you have them play, and whoever's helping the least,

62
00:03:08,380 --> 00:03:10,730
you kick them off the team, so that's kind of the backward

63
00:03:10,730 --> 00:03:13,940
case. We just keep kicking people out until we have the team

64
00:03:13,940 --> 00:03:16,530
we want. And then the forward case is kind of like the

65
00:03:16,530 --> 00:03:19,150
dream team model where you start off saying, I got nobody let's

66
00:03:19,150 --> 00:03:22,690
take the best person around, add that person to my team. And,

67
00:03:22,690 --> 00:03:25,130
keep doing that until we have a full set of players.

68
00:03:25,130 --> 00:03:26,800
>> Okay. So this all makes sense?

69
00:03:26,800 --> 00:03:28,270
>> Yeah.

70
00:03:28,270 --> 00:03:32,300
>> Okay. Just for, just to summarize, filtering

71
00:03:32,300 --> 00:03:35,110
algorithms don't necess, while they do, then can take

72
00:03:35,110 --> 00:03:36,660
advantage of a label they don't really care

73
00:03:36,660 --> 00:03:38,870
about the learner. And so you have to come

74
00:03:38,870 --> 00:03:41,010
up with criteria that all probably makes sense,

75
00:03:41,010 --> 00:03:43,190
like the ones you came up with. Information gain,

76
00:03:43,190 --> 00:03:44,930
entropy variance, and you can tell stories for

77
00:03:44,930 --> 00:03:47,760
why all of these make sense. This by the

78
00:03:47,760 --> 00:03:51,390
way is where your domain knowledge comes in. It's the choice

79
00:03:51,390 --> 00:03:55,920
of the criterion or the optimization function that, that you're using.

80
00:03:55,920 --> 00:03:58,650
But they have a problem in that they don't actually take

81
00:03:58,650 --> 00:04:02,430
advantage of the bias of the learner, where wrapping definitely takes advantage

82
00:04:02,430 --> 00:04:04,370
of the bias of the learner. And then you just hit,

83
00:04:04,370 --> 00:04:06,430
simply have a question of how to deal with the exponential

84
00:04:06,430 --> 00:04:09,390
search problem by doing, I think in all of these cases,

85
00:04:09,390 --> 00:04:13,080
what looks a lot like hill climbing. You just have different methods

86
00:04:13,080 --> 00:04:14,660
for thinking about how to do the hill climbing.

87
00:04:14,660 --> 00:04:17,730
Do you add variables, or remove variables, or do you

88
00:04:17,730 --> 00:04:20,730
do some kind of random search. But ultimately, in both

89
00:04:20,730 --> 00:04:23,340
cases, you have some function you're trying to optimize over.
