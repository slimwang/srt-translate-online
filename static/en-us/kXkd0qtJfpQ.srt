1
00:00:00,000 --> 00:00:03,000
We want to do even more with regular expressions,

2
00:00:03,000 --> 00:00:06,000
such as matching a word or a number.

3
00:00:06,000 --> 00:00:11,000
To do this, we're going to introduce a visual representation for regular expressions

4
00:00:11,000 --> 00:00:15,000
that actually shows exactly what's going on behind the scenes,

5
00:00:15,000 --> 00:00:17,000
and then we're going to follow along in Python.

6
00:00:17,000 --> 00:00:22,000
Suppose we have the regular expression [0 - 9] + % sign.

7
00:00:22,000 --> 00:00:27,000
Any character like this that just appears on its own is matched directly,

8
00:00:27,000 --> 00:00:34,000
so this catches strings like 30%, 99%, 2% and various other things we might find

9
00:00:34,000 --> 00:00:37,000
describing sales or the fat content of milk.

10
00:00:37,000 --> 00:00:42,000
Here I've drawn a finite state machine, a visual representation of this regular expression.

11
00:00:42,000 --> 00:00:46,000
Often there's an arrow coming out of nowhere on the left that's not connected

12
00:00:46,000 --> 00:00:47,000
to the rest of the picture.

13
00:00:47,000 --> 00:00:50,000
That indicates where we start.

14
00:00:50,000 --> 00:00:53,000
These 3 circles are states.

15
00:00:53,000 --> 00:00:56,000
They represent what we're up to when we're matching a string

16
00:00:56,000 --> 00:00:58,000
against the regular expression--

17
00:00:58,000 --> 00:01:02,000
what configuration we're in, what our current state of mind is, what we've seen so far.

18
00:01:02,000 --> 00:01:05,000
I've labeled my states 1, 2, and 3.

19
00:01:05,000 --> 00:01:11,000
These other arrows are called edges or transitions.

20
00:01:11,000 --> 00:01:14,000
They tell us when to move from 1 state to another.

21
00:01:14,000 --> 00:01:20,000
I start in state 1, and if I see a 0 - 9, I move over to state 2.

22
00:01:20,000 --> 00:01:25,000
This 0 - 9 is the label associated with this edge.

23
00:01:25,000 --> 00:01:29,000
Finally, you'll notice that 1 of my states has a double circle.

24
00:01:29,000 --> 00:01:30,000
That's an accepting state.

25
00:01:30,000 --> 00:01:34,000
If we end up in an accepting state at the end of the input,

26
00:01:34,000 --> 00:01:37,000
this finite state machine matches the given string.

27
00:01:37,000 --> 00:01:40,000
Let's trace through what happens on input 23%.

28
00:01:40,000 --> 00:01:44,000
We start in the start state, and the character we see is a 2,

29
00:01:44,000 --> 00:01:46,000
so we follow this edge to state 2.

30
00:01:46,000 --> 00:01:50,000
Now the next thing we see is a 3, so we follow this edge back to state 2.

31
00:01:50,000 --> 00:01:53,000
These are sometimes called self-loops.

32
00:01:53,000 --> 00:01:55,000
It's a loop that takes me back to right where I started.

33
00:01:55,000 --> 00:02:00,000
Now we see the % sign, and we end up in state 3, which is an accepting state,

34
00:02:00,000 --> 00:02:07,000
so our finite state machine accepts this string '23%' just like our regular expression would.

35
00:02:07,000 --> 00:02:09,000
Let's try just the string '2'.

36
00:02:09,000 --> 00:02:13,000
We start in the start state. We see a 2, so we move over here, and then we're done.

37
00:02:13,000 --> 00:02:17,000
We ran out of input, but we're not in an accepting state.

38
00:02:17,000 --> 00:02:22,000
Our finite state machine rejects this just like our regular expression would.

39
00:02:22,000 --> 00:02:25,000
Finally, let's consider the string '2x'.

40
00:02:25,000 --> 00:02:29,000
We start here in state 1. We see a 2, so we go over to state 2.

41
00:02:29,000 --> 00:02:37,000
Then we see an x, and there's no outgoing edge from state 2 on an x,

42
00:02:37,000 --> 00:02:39,000
so we fall off the finite state machine and die.

43
00:02:39,000 --> 00:02:46,000
This is very sad, and when this happens our finite state machine does not accept the string,

44
00:02:46,000 --> 00:02:48,123
just like the regular expression would not.
