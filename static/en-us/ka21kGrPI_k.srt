1
00:00:00,190 --> 00:00:04,580
So for the VLIW let's discuss the good and the bad sides of it.

2
00:00:04,580 --> 00:00:08,670
Among the good things is that the compiler does the hard work.

3
00:00:08,670 --> 00:00:12,920
Because the compiler is run only once and then we run the program many times

4
00:00:12,920 --> 00:00:17,130
the compiler can have plenty of time to figure out a good schedule. In contrast,

5
00:00:17,130 --> 00:00:20,690
in an out of order processor we have very little time to come up with a decent

6
00:00:20,690 --> 00:00:25,450
schedule because any time we spend figuring out the schedule is the time

7
00:00:25,450 --> 00:00:30,100
we're adding to the program execution time. The VLIW processor typically will

8
00:00:30,100 --> 00:00:34,570
have simpler hardware than a comparable out of order processor.

9
00:00:34,570 --> 00:00:38,880
A VLIW processor can be more efficient than an out of order processor because

10
00:00:38,880 --> 00:00:42,560
the hardware had less to do per executed instruction. And the VLIW

11
00:00:42,560 --> 00:00:47,030
processors typically work really well on loops and so called regular code,

12
00:00:47,030 --> 00:00:50,580
where regular code is basically things like sweeping to arrays,

13
00:00:50,580 --> 00:00:54,750
multiplying matrices, and other things that a compiler can easily figure out and

14
00:00:54,750 --> 00:00:56,350
then schedule well around it.

15
00:00:56,350 --> 00:01:02,760
The bad side of VLIW are that latencies of instructions are not always the same.

16
00:01:02,760 --> 00:01:07,580
The compiler has to assume some sort of latency in order to schedule code well,

17
00:01:07,580 --> 00:01:10,380
but sometimes the latencies cannot be determined exactly. So

18
00:01:10,380 --> 00:01:14,700
for example, we can plan for a load to have a cache hit latency but

19
00:01:14,700 --> 00:01:18,090
then when it has a cache miss suddenly there is a much longer latency than

20
00:01:18,090 --> 00:01:23,250
the compiler planned for. Second, many applications are irregular,

21
00:01:23,250 --> 00:01:27,024
almost every application that does a lot of decision making, like for

22
00:01:27,024 --> 00:01:31,550
example A.I. applications, applications that work on pointers or pointer

23
00:01:31,550 --> 00:01:35,290
intensive structures and so on, are very hard for the compiler to figure out.

24
00:01:35,290 --> 00:01:38,900
And finally there is the code bloat issue. We have already seen in our quiz,

25
00:01:38,900 --> 00:01:43,330
that the code for a VAW can be much larger than the code for a normal,

26
00:01:43,330 --> 00:01:48,240
out of order processor. Because we are inserting a lot of NOPs to prevent things

27
00:01:48,240 --> 00:01:51,820
that are dependent on each other from being in the same large instruction.
