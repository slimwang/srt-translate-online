1
00:00:00,300 --> 00:00:06,520
If the content hash of 1096 and 123b are exactly the same, then

2
00:00:06,520 --> 00:00:13,760
we can modify the PPN to MPN mapping in VM2 for the page 2868,

3
00:00:13,760 --> 00:00:19,490
which used to point to 1096, we can now make it, point to

4
00:00:19,490 --> 00:00:25,350
123b because they both are exactly the same content. And once we have done that,

5
00:00:25,350 --> 00:00:30,160
then we increment the reference count to this hash

6
00:00:30,160 --> 00:00:34,940
table entry to 2, indicating that there are 2 different virtual

7
00:00:34,940 --> 00:00:40,520
machines that map to the same machine page, 123b.

8
00:00:40,520 --> 00:00:45,470
And, we're also going to remember that these two mappings. Between

9
00:00:45,470 --> 00:00:50,840
PPN 2868 to 123b, 43f8 to 123b are

10
00:00:50,840 --> 00:00:56,130
copy on write entries, indicating that they can share

11
00:00:56,130 --> 00:01:00,460
this page, so long as these 2 virtual machines are reading it. But if any one of

12
00:01:00,460 --> 00:01:05,930
them tries to write it, at that point For the integrity of the system,

13
00:01:05,930 --> 00:01:11,050
you have to make a copy of this page and change

14
00:01:11,050 --> 00:01:16,110
the mappings for those PPNs to go to different

15
00:01:16,110 --> 00:01:21,735
MPNs, that's the reason that we want to do this copy on write. And now, we can

16
00:01:21,735 --> 00:01:24,500
free-up page number 1096. So there is one

17
00:01:24,500 --> 00:01:28,270
more page frame that's available for the house,

18
00:01:28,270 --> 00:01:30,920
in terms of allocation. because all of these

19
00:01:30,920 --> 00:01:33,375
things that I mentioned just now, are fairly

20
00:01:33,375 --> 00:01:36,850
labor-intensive operations. So you don't want to do this

21
00:01:36,850 --> 00:01:40,870
when there is active usage of the system.

22
00:01:40,870 --> 00:01:44,570
So, scanning the pages, that is. Going through

23
00:01:44,570 --> 00:01:49,020
all of a virtual machine's pages to see

24
00:01:49,020 --> 00:01:51,770
if pages that are contained in a virtual

25
00:01:51,770 --> 00:01:54,990
machine may already be present in the machine

26
00:01:54,990 --> 00:01:58,320
memory reflecting the contents of some of the

27
00:01:58,320 --> 00:02:01,180
virtual machine. That kind of scanning you want to

28
00:02:01,180 --> 00:02:02,850
do it as a background activity of the

29
00:02:02,850 --> 00:02:06,000
server, when it is lightly loaded. Looking for such

30
00:02:06,000 --> 00:02:09,460
matches and mapping the virtual machines to

31
00:02:09,460 --> 00:02:12,920
share the same machine page and freeing up

32
00:02:12,920 --> 00:02:17,940
machine memory for allocation by the hypervisor.

33
00:02:17,940 --> 00:02:19,190
And the important thing that you have to

34
00:02:19,190 --> 00:02:21,600
notice is that, as opposed to the

35
00:02:21,600 --> 00:02:24,990
earlier mechanism that I mentioned where I said

36
00:02:24,990 --> 00:02:27,630
that with the coninements of the guest operating

37
00:02:27,630 --> 00:02:31,010
system, the hypervisor can get into the page

38
00:02:31,010 --> 00:02:33,440
table data structures inside the guest operating

39
00:02:33,440 --> 00:02:36,570
systems. No such thing here. It is completely

40
00:02:36,570 --> 00:02:41,000
done oblivious to the guest operating systems and

41
00:02:41,000 --> 00:02:43,670
therefore, there is no change that needs to

42
00:02:43,670 --> 00:02:46,100
be made to the guest operating systems. In

43
00:02:46,100 --> 00:02:48,980
order to do the sharing in an oblivious

44
00:02:48,980 --> 00:02:52,150
way. And this technique is applicable to both

45
00:02:52,150 --> 00:02:55,880
fully virtualized, as well as the paravirtualized environments.

46
00:02:55,880 --> 00:02:57,930
Because basically, all that we are saying is

47
00:02:57,930 --> 00:03:01,490
that, let's go through the memory contents of

48
00:03:01,490 --> 00:03:04,020
a virtual machine, and see if. The memory

49
00:03:04,020 --> 00:03:07,080
contents of the virtual machine, any particular page

50
00:03:07,080 --> 00:03:10,410
frames can be shared with other virtual machines,

51
00:03:10,410 --> 00:03:13,220
and if so, let's do that. And free

52
00:03:13,220 --> 00:03:15,350
up some memory. That's the idea, can be

53
00:03:15,350 --> 00:03:18,340
applied to both fully virtualized and para virtualized settings.
