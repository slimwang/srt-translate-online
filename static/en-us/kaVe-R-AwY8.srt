1
00:00:00,000 --> 00:00:04,000
Let us simulate the situation in our IE.

2
00:00:04,000 --> 00:00:11,000
Let us assume the individual subpatches all identified by numbers from 1 to 8.

3
00:00:11,000 --> 00:00:16,000
Again, we write a testing function that simulates the behavior of the system.

4
00:00:16,000 --> 00:00:23,000
We assume that if the patches 3 and 6 are applied, then the failure occurs.

5
00:00:23,000 --> 00:00:30,000
If patches 3 and 6 are not applied together, then the failure does not occur.

6
00:00:30,000 --> 00:00:33,000
Thanks to the beauty of Python, all of our infrastructures

7
00:00:33,000 --> 00:00:37,000
we had previously set up for string also works for lists.

8
00:00:37,000 --> 00:00:41,000
Let's see what happens if we test the entire set of patches.

9
00:00:41,000 --> 00:00:47,000
We see it fails, which is not much of a surprise because 3 and 6 are both in here.

10
00:00:47,000 --> 00:00:52,000
If we test the empty list instead, that is no patches applied, then the test passes.

11
00:00:52,000 --> 00:00:58,000
Again, we print out the list we're testing, its length and the result.

12
00:00:58,000 --> 00:01:06,000
Now, we can again invoke delta debugging with the set of patches and the above test function.

13
00:01:06,000 --> 00:01:13,000
Let's see how this works. We invoke ddmin to see whether we can simplify this list of patches

14
00:01:13,000 --> 00:01:16,000
to see which of these patches are relevant.

15
00:01:16,000 --> 00:01:23,000
Press on run, here we get the result, and the final result is patches 3 and 6 suffice to cause the failure.

16
00:01:23,000 --> 00:01:26,000
Well, that's something we knew all along, didn't we?

17
00:01:26,000 --> 00:01:31,000
If your original patch would have been 10,000s of lines long,

18
00:01:31,000 --> 00:01:35,000
then chances are that delta debugging reduces this to just two lines

19
00:01:35,000 --> 00:01:41,000
or another very small set of locations in your code for which you didn't know.

20
00:01:41,000 --> 00:01:44,000
But if you change these two lines, the failure will occur

21
00:01:44,000 --> 00:01:47,000
and if you don't change them, the failure will not occur.

22
00:01:47,000 --> 00:01:52,000
This approach for determining the culprit for regression has also been named

23
00:01:52,000 --> 00:01:56,000
the blame-o-meter, as a means to know who to blame.

24
00:01:56,000 --> 00:02:00,000
Where who to blame means which places in the code are to blame

25
00:02:00,000 --> 00:02:05,000
but it can also mean which patches are to blame and it can also mean

26
00:02:05,000 --> 00:02:08,000
which programmers made these changes which are now to blame.

27
00:02:08,000 --> 00:02:13,000
The idea is that such a scheme can be used in any situation

28
00:02:13,000 --> 00:02:16,000
in which an old version work and a new version does not.

29
00:02:16,000 --> 00:02:23,000
So when you have any regression test failing and the regression test does exactly that

30
00:02:23,000 --> 00:02:26,000
comparing the results of the new version against the old version,

31
00:02:26,000 --> 00:02:31,000
you can and possibly should run delta debugging in order to figure out

32
00:02:31,000 --> 00:02:33,000
which lines in the code are actually responsible for the failure.
