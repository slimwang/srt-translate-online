1
00:00:00,280 --> 00:00:03,030
Now that we've covered querying
with our content provider,

2
00:00:03,030 --> 00:00:05,120
it's time to start inserting data.

3
00:00:05,120 --> 00:00:08,080
Let's take a look at the incomplete
content provider insert function

4
00:00:08,080 --> 00:00:10,110
we provided in the source code.

5
00:00:10,110 --> 00:00:14,290
As you can see, this function takes
advantage of the URI matcher code.

6
00:00:14,290 --> 00:00:16,830
But it only requires the base URIs.

7
00:00:16,830 --> 00:00:19,620
That's because inserts
are fundamentally simpler.

8
00:00:19,620 --> 00:00:23,000
We simply want to make sure that the
right record ends up in the right table.

9
00:00:23,000 --> 00:00:26,060
The data that is contained in
the other URI, such as location and

10
00:00:26,060 --> 00:00:29,610
date, will actually be in the content
values used in the insert.

11
00:00:29,610 --> 00:00:33,480
Note that if we wanted to,
we could support all of the URIs here.

12
00:00:33,480 --> 00:00:37,590
But it makes the implementation of the
insert function far more complicated.

13
00:00:37,590 --> 00:00:39,450
When we insert into the database.

14
00:00:39,450 --> 00:00:42,170
We wanted to notify every
content observer that might have

15
00:00:42,170 --> 00:00:44,240
data modified by our insert.

16
00:00:44,240 --> 00:00:49,050
It turns out that cursors register
themselves as notify for descendents.

17
00:00:49,050 --> 00:00:53,438
Which means that notifying the route
URI will also notify all descendents

18
00:00:53,438 --> 00:00:57,760
of the URI, ones that contain
additional path information.

19
00:00:57,760 --> 00:01:00,750
Just like with calling
our content providers.

20
00:01:00,750 --> 00:01:05,140
We can use a content resolver
to notify our content observer.

21
00:01:05,140 --> 00:01:09,100
As you can see, the root URI for
each table in sunshine

22
00:01:09,100 --> 00:01:13,380
just contains the context scope,
the authority, and the table name.

23
00:01:13,380 --> 00:01:18,680
In the case presented,
the content URI that contains a date.

24
00:01:18,680 --> 00:01:21,270
Is a descendant of the plain
weather content URI.

25
00:01:22,330 --> 00:01:25,080
If we notify based on anything
other than the root URI.

26
00:01:26,080 --> 00:01:29,350
Then a cursor listening on the root
URI will not get notified of a change

27
00:01:29,350 --> 00:01:31,300
that would certainly impact it.

28
00:01:31,300 --> 00:01:34,250
So we have to be very
careful when doing that.

29
00:01:34,250 --> 00:01:36,320
Let's go back to the source code.

30
00:01:36,320 --> 00:01:39,220
For weather,
we just passed the perimeters that came

31
00:01:39,220 --> 00:01:42,500
into the content provider into
the data base insert call.

32
00:01:43,620 --> 00:01:46,770
We should throw an exception
if the insert fails.

33
00:01:46,770 --> 00:01:50,200
The only trick here is to make
sure we return the correct value.

34
00:01:50,200 --> 00:01:51,950
Which is a URI.

35
00:01:51,950 --> 00:01:55,450
Fortunately we made a function
to build these URIs

36
00:01:55,450 --> 00:01:58,110
which contained the weather
path followed by an ID.

37
00:01:59,200 --> 00:02:03,220
If we were being complete in our content
provider implementation, we should also

38
00:02:03,220 --> 00:02:07,710
implement these URI types in the
contract URI matcher and query function.

39
00:02:07,710 --> 00:02:10,820
But the beautiful thing about
implementing a content provider,

40
00:02:10,820 --> 00:02:14,120
especially if it's only being
used by your application,

41
00:02:14,120 --> 00:02:16,480
is it you only need to
implement the features you use.

42
00:02:17,580 --> 00:02:21,380
So we just set the return URI by
using the build weather URI function.
