1
00:00:00,000 --> 00:00:05,000
Another topic that I would like to address is malformed HTML.

2
00:00:05,000 --> 00:00:12,000
One of the questions on the forums was, are we going to talk about mistakes in web pages?

3
00:00:12,000 --> 00:00:17,000
What if a real web developer forgets to close off a tag or makes a sort of subtle mistake

4
00:00:17,000 --> 00:00:18,000
in punctuation?

5
00:00:18,000 --> 00:00:21,000
Are we going to talk about that in the web browser that we build for this class?

6
00:00:21,000 --> 00:00:23,000
And the answer is, yes!

7
00:00:23,000 --> 00:00:28,000
In fact, very prescient on your part. That's a very predictive question.

8
00:00:28,000 --> 00:00:30,000
We're going to get to it in unit 3, exactly the next unit.

9
00:00:30,000 --> 00:00:34,000
We're going to talk about recognizing malformed HTML and JavaScript.

10
00:00:34,000 --> 00:00:39,000
But in this class, we're mostly going to talk about recognizing them,

11
00:00:39,000 --> 00:00:42,000
and for the particular project that we work on for our simple web browser,

12
00:00:42,000 --> 00:00:46,000
if the HTML is malformed, we're not going to do anything about it.

13
00:00:46,000 --> 00:00:48,000
We just won't render that part of the web page.

14
00:00:48,000 --> 00:00:55,000
In practice, web browsers put a lot--a huge amount--of effort into being very forgiving.

15
00:00:55,000 --> 00:01:00,000
They want to render as much information as possible, even if the web page is out of date

16
00:01:00,000 --> 00:01:05,000
or written without knowledge of the standards or in any other way messed up.

17
00:01:05,000 --> 00:01:11,000
This approach of keeping going is sometimes known as error recovery

18
00:01:11,000 --> 00:01:14,000
or error tolerance or fault tolerance.

19
00:01:14,000 --> 00:01:21,000
In unit 3, we're going to talk about breaking up tokens and seeing if they match

20
00:01:21,000 --> 00:01:25,000
a particular structure, seeing if they're in the language of a formal grammar

21
00:01:25,000 --> 00:01:28,000
that describes all of JavaScript or all of web pages.

22
00:01:28,000 --> 00:01:31,000
You know in the real world, a lot of web pages are not.

23
00:01:31,000 --> 00:01:36,000
They don't match the formal idealized grammar I've written down on the walls of Plato's cave.

24
00:01:36,000 --> 00:01:41,000
Similarly, not every JavaScript program adheres to exactly the same idea of--

25
00:01:41,000 --> 00:01:46,000
to pick a timely example--where the semicolons go after statements.

26
00:01:46,000 --> 00:01:50,000
So in practice, what you'll often want to do if you're doing commercial software

27
00:01:50,000 --> 00:01:53,000
if you want to make your customers as happy as possible by supporting everything

28
00:01:53,000 --> 00:01:56,000
that they've written, you'll write about your duplicate rules.

29
00:01:56,000 --> 00:02:01,000
For example, you might write one regular expression that accepts normal numbers,

30
00:02:01,000 --> 00:02:04,000
but if people make a common mistake when writing numbers,

31
00:02:04,000 --> 00:02:07,000
maybe they write multiple.multiple period signs or something like that,

32
00:02:07,000 --> 00:02:11,000
you might write another rule that accepts those,

33
00:02:11,000 --> 00:02:15,000
and maybe print out some warning but then does it's best to figure out what the value is

34
00:02:15,000 --> 00:02:16,000
and keeps going.

35
00:02:16,000 --> 00:02:20,000
Again, in real world industrial software development for a web browser,

36
00:02:20,000 --> 00:02:25,000
this sort of error recovery when you're doing lexical analysis or syntactic analysis

37
00:02:25,000 --> 00:02:30,000
is of critical importance because the vast majority of web pages are not

38
00:02:30,000 --> 00:02:31,000
standards compliant.

39
00:02:31,000 --> 00:02:36,000
In this class, we're going to tell you how to tell the difference between good HTML and bad,

40
00:02:36,000 --> 00:02:39,000
between well-formed JavaScript and malformed JavaScript.

41
00:02:39,000 --> 00:02:44,000
But I'm only going to require that you deal with well-formed strings.

42
00:02:44,000 --> 00:02:46,000
Once you know how to do it the good way though,

43
00:02:46,000 --> 00:02:48,000
you could do it for ill-formed strings.

44
00:02:48,000 --> 00:02:51,000
You'd have all the tools after finishing this class.

45
00:02:51,000 --> 00:02:53,000
It would just be more busy work, elbow grease.

46
00:02:53,000 --> 00:02:57,000
It would take additional time, and it wouldn't really teach you more concepts.

47
00:02:57,000 --> 99:59:59,999
That's why I'm not going to focus on it.
