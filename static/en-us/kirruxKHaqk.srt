1
00:00:01,230 --> 00:00:04,270
So any procedure that we could write recursively. We're going to

2
00:00:04,270 --> 00:00:07,430
also write without using a recursive definition. And I want to

3
00:00:07,430 --> 00:00:09,760
show you another way that we might have defined is

4
00:00:09,760 --> 00:00:12,620
palindrome. So here we're doing this with the for loop,

5
00:00:12,620 --> 00:00:16,340
and we're looping using the variable i and the range

6
00:00:16,340 --> 00:00:19,200
from 0 to the length of s divided by 2.

7
00:00:19,200 --> 00:00:23,630
So that's going through halfway of s. And inside the

8
00:00:23,630 --> 00:00:26,500
loop we have an if-test that checks if the character

9
00:00:26,500 --> 00:00:30,740
at position i is different at the position negative i

10
00:00:30,740 --> 00:00:33,220
plus 1. So that's going to be counting from the back

11
00:00:33,220 --> 00:00:37,320
of the string, i's positions away. If those are different,

12
00:00:37,320 --> 00:00:40,420
then we've found a mismatch and we return false. If they're

13
00:00:40,420 --> 00:00:42,900
not different, we're going to keep going through the loop. Once

14
00:00:42,900 --> 00:00:44,495
we get to the end of the loop without finding any

15
00:00:44,495 --> 00:00:48,380
differences, we know it's a palindrome and we return true.

16
00:00:48,380 --> 00:00:51,510
So this is also another way we could define is palindrome.

17
00:00:51,510 --> 00:00:54,210
I think this is more complicated to understand, and harder to

18
00:00:54,210 --> 00:00:58,210
get right. It took me three tries before this code worked correctly,

19
00:00:58,210 --> 00:01:02,250
whereas the recursive definition, I could get right the first time.

20
00:01:02,250 --> 00:01:05,450
If we wanted to test very long palindromes, this would be much

21
00:01:05,450 --> 00:01:07,720
more efficient, than the code that we had with the recursive

22
00:01:07,720 --> 00:01:11,310
definition. And there are a couple of reasons for that. One is

23
00:01:11,310 --> 00:01:14,410
that the recursive definition keeps making new strings, every time we

24
00:01:14,410 --> 00:01:17,080
do the recursive call, we have to create a new string, and

25
00:01:17,080 --> 00:01:20,370
that's pretty expensive. Another reason is that the recursive calls

26
00:01:20,370 --> 00:01:24,230
themselves are fairly expensive, and there are languages that make

27
00:01:24,230 --> 00:01:27,170
recursive calls fairly cheap. Python is not one of them.

28
00:01:27,170 --> 00:01:30,980
In Python, it's fairly expensive to do a recursive call. So

29
00:01:30,980 --> 00:01:33,970
for most procedures, the recursive way is often the most

30
00:01:33,970 --> 00:01:36,570
elegant, and the easiest way to get correct. If we're

31
00:01:36,570 --> 00:01:39,060
really worried about performance, and we need procedures to work

32
00:01:39,060 --> 00:01:42,340
on really large inputs. We're often better off trying to find

33
00:01:42,340 --> 00:01:44,550
a non recursive way of defining that procedure.
