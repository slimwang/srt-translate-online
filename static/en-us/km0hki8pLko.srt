1
00:00:00,210 --> 00:00:03,960
Let's take a quiz now in which we will compare the performance of some of

2
00:00:03,960 --> 00:00:05,820
the multithreading patterns that we saw.

3
00:00:05,820 --> 00:00:09,730
For this quiz we will look at an extremely simplified performance

4
00:00:09,730 --> 00:00:12,800
calculation for the toy order application.

5
00:00:12,800 --> 00:00:15,120
And we will compare two solutions.

6
00:00:15,120 --> 00:00:19,230
One, which is implemented via the boss-workers pattern.

7
00:00:19,230 --> 00:00:23,380
And then the second one that's implemented via the pipeline pattern.

8
00:00:23,380 --> 00:00:25,860
For both solutions, we will use six threads.

9
00:00:25,860 --> 00:00:30,047
We'll assume, also, that in the boss-workers solution,

10
00:00:30,047 --> 00:00:33,690
a worker takes 120 milliseconds to process a toy.

11
00:00:33,690 --> 00:00:37,740
For the pipeline solution, we will assume that each of the six stages,

12
00:00:37,740 --> 00:00:41,870
where a stage is a step from this application, take 20 milliseconds.

13
00:00:41,870 --> 00:00:43,100
The question then is,

14
00:00:43,100 --> 00:00:48,770
how long will it take for each of these solutions to complete ten toy orders?

15
00:00:48,770 --> 00:00:53,990
You should ignore any time that's spent waiting in the shared queues in

16
00:00:53,990 --> 00:00:59,660
order to pass orders from the boss to the workers or across the pipeline stages.

17
00:00:59,660 --> 00:01:03,600
And assume infinite processing resources, like tools or work areas.

18
00:01:03,600 --> 00:01:07,180
Then, you should answer, what if there were 11 toy orders?

19
00:01:07,180 --> 00:01:12,060
How long will it take each of these solutions to process the 11 orders?

20
00:01:12,060 --> 00:01:14,960
You should write your answers below, expressed in milliseconds.
