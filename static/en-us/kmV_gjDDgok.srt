1
00:00:00,470 --> 00:00:02,070
So let's take a look on how to implement

2
00:00:02,070 --> 00:00:05,570
app cache, in our conference application. First, we go

3
00:00:05,570 --> 00:00:08,920
into out HTML file, and we add the manifest.

4
00:00:08,920 --> 00:00:11,390
In our manifest file, we list in the cache

5
00:00:11,390 --> 00:00:14,580
section all of the static resources for our application.

6
00:00:14,580 --> 00:00:18,390
Our javascript files, our CSS, our favicon. All of

7
00:00:18,390 --> 00:00:21,430
the images we need to use. But, note one

8
00:00:21,430 --> 00:00:25,530
file that's missing. Our index.html. Any page that points

9
00:00:25,530 --> 00:00:28,910
to the manifest, that's, that has that magic manifest

10
00:00:28,910 --> 00:00:33,010
equal in the html element, is implicitly cached, which can

11
00:00:33,010 --> 00:00:35,370
very easily got out of control. It's kind of

12
00:00:35,370 --> 00:00:37,360
hard to get them out of the cache once they're

13
00:00:37,360 --> 00:00:39,730
in it. Which is why we're only using the

14
00:00:39,730 --> 00:00:43,530
manifest attribute, on this one page. Note though, in the

15
00:00:43,530 --> 00:00:47,050
NETWORK section, we put the google analytics javascript file

16
00:00:47,050 --> 00:00:50,800
and all the maps api serves. We can't really usefully

17
00:00:50,800 --> 00:00:53,250
cache these API servers. So, we'll have to be

18
00:00:53,250 --> 00:00:56,820
online for now. Now let's go back to our app,

19
00:00:56,820 --> 00:00:59,670
and with the Devtools console open, let's reload and see

20
00:00:59,670 --> 00:01:03,450
what happens. You can see in the console, a whole

21
00:01:03,450 --> 00:01:06,550
bunch of application cache messages. If we go up

22
00:01:06,550 --> 00:01:09,230
to the top of this, you can see it's creating

23
00:01:09,230 --> 00:01:13,250
an application cache based on this file. It checks that,

24
00:01:13,250 --> 00:01:15,850
and then it starts downloading all of the resources that

25
00:01:15,850 --> 00:01:19,360
are inside that manifest. When it completes, it

26
00:01:19,360 --> 00:01:21,360
sends us an event that says the application

27
00:01:21,360 --> 00:01:24,830
cache is cached. Now, if we reload the

28
00:01:24,830 --> 00:01:28,950
page again, we get a much shorter set. This

29
00:01:28,950 --> 00:01:30,900
time it says, the document was loaded from

30
00:01:30,900 --> 00:01:32,860
the application cache. It tells us where the

31
00:01:32,860 --> 00:01:35,820
manifest is. It checks the cache, but there's

32
00:01:35,820 --> 00:01:38,450
no update ready, so it doesn't bother doing anything.
