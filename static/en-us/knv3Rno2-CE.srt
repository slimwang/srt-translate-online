1
00:00:00,057 --> 00:00:02,632
Our focus is instead to compute the histogram itself.

2
00:00:02,632 --> 00:00:05,079
Look forward in this week's assignment.

3
00:00:05,086 --> 00:00:08,337
You'll compute the histogram of pixel intensity values in an image.

4
00:00:08,344 --> 00:00:11,437
Histograms are not a difficult problem if you think about them serially,

5
00:00:11,437 --> 00:00:13,413
but they get more interesting and parallel.

6
00:00:13,413 --> 00:00:18,919
So let's first take a look at the serial histogram algorithm. Here's our code here.

7
00:00:18,919 --> 00:00:22,580
We're going to have 2 for loops where we loop over all the histogram bins.

8
00:00:22,603 --> 00:00:28,926
So in the first phase, we initialize all the Bins to 0, the counts for each of the bins to zero.

9
00:00:28,926 --> 00:00:33,697
This is so simple, we're not going to mention it again. Much more interesting is the second phase.

10
00:00:33,704 --> 00:00:36,522
We're going to loop through all the data measurements.

11
00:00:36,522 --> 00:00:40,916
For each data measurement, we first determine to which bin it belongs.

12
00:00:40,916 --> 00:00:44,313
That's the compute bin call. And I'll show an example in a second.

13
00:00:44,329 --> 00:00:46,727
Then we fetch the current value of that bin,

14
00:00:46,734 --> 00:00:50,126
increment it, and store the new value back into the bin.

15
00:00:50,133 --> 00:00:56,211
For instance, in the previous example, let's say the input to compute bin is 175 centimeters.

16
00:00:56,211 --> 00:00:59,343
So we take a measurement. It's 175 centimeters.

17
00:00:59,343 --> 00:01:06,077
Compute bin then decides which of these bins is associated with 175 centimeters.

18
00:01:06,084 --> 00:01:08,663
In this case, compute bin would return this bin

19
00:01:08,663 --> 00:01:11,842
because it stores all of the measurements between 165 and 180.

20
00:01:11,842 --> 00:01:17,997
So, we take 175. It's then associated with this bin, and now we increment the value of this bin.

21
00:01:18,004 --> 00:01:21,467
So now let's consider these 4 bins, and we're going to trace

22
00:01:21,467 --> 00:01:26,690
a program with the 4 measurements 155, 150, 175, and 170 centimeters.

23
00:01:26,697 --> 00:01:32,954
So the first loop here will initialize each of these bins to 0 items, and then we'll

24
00:01:32,954 --> 00:01:37,627
walk through these 4 measurements using compute bin to decide which bin they're in

25
00:01:37,634 --> 00:01:39,997
and incrementing the values in those bins.

26
00:01:40,004 --> 00:01:42,711
So, first we'll consider 155.

27
00:01:42,711 --> 00:01:46,849
Compute bin will tell us it's in this bin right here, so I'll increment its value to 1.

28
00:01:46,849 --> 00:01:52,067
Then we look at 150. Compute bin will tell us its value is in this bin again,

29
00:01:52,067 --> 00:01:54,120
and we'll increment its value to 2.

30
00:01:54,120 --> 00:01:57,758
Next we'll consider 175, which is associated with this bin.

31
00:01:57,758 --> 00:01:59,565
And now we've incremented its value.

32
00:01:59,565 --> 00:02:01,982
And finally 170 will allow us to store 2.

33
00:02:01,998 --> 00:02:05,319
So a couple of quick questions to make sure you understand the histogram.

34
00:02:05,357 --> 00:02:08,455
Let's say we have n measurements and b bins.

35
00:02:08,470 --> 00:02:11,425
As a function of n and b, what is the maximum number of

36
00:02:11,425 --> 00:02:14,179
measurements we would possibly ever see per bin,

37
00:02:14,202 --> 00:02:17,698
and what is the average number of measurement you would see per bin?
