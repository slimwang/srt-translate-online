1
00:00:00,340 --> 00:00:04,530
So far we have talked about the very
basic process of case based reasoning

2
00:00:04,530 --> 00:00:08,090
and we have portrayed as
if this process was linear.

3
00:00:08,090 --> 00:00:12,450
But of course the case based reasoning
process may not necessarily be linear.

4
00:00:12,450 --> 00:00:15,700
As an example, if the evaluation fails,

5
00:00:15,700 --> 00:00:21,230
then we might want to adapt that
particular case in a different way.

6
00:00:21,230 --> 00:00:24,690
As an example of the evaluation
of the candidate solution,

7
00:00:24,690 --> 00:00:26,790
that adaptation had produced fails.

8
00:00:27,910 --> 00:00:30,840
Then, instead of abandoning
that particular case,

9
00:00:30,840 --> 00:00:33,248
you might want to try to adapt it again.

10
00:00:33,248 --> 00:00:38,120
Alternatively, if we try to adapt
the same case several times, but

11
00:00:38,120 --> 00:00:41,730
we just cannot adapt it,
we might want to abandon that case and

12
00:00:41,730 --> 00:00:44,710
try to find a different
case from the case memory.

13
00:00:44,710 --> 00:00:46,140
There is another possibility.

14
00:00:46,140 --> 00:00:48,430
Suppose that we retrieve
a case from memory.

15
00:00:48,430 --> 00:00:49,970
And we try to adapt it but

16
00:00:49,970 --> 00:00:53,770
we are unable to adapt it to meet
the requirements of the new problem.

17
00:00:53,770 --> 00:00:58,190
In that case, you might want to abandon
the case and try to do a new one.

18
00:00:58,190 --> 00:01:00,300
There is yet another possibility.

19
00:01:00,300 --> 00:01:02,960
Let us suppose that we retrieve
a case from memory and

20
00:01:02,960 --> 00:01:04,940
it exactly matches the new problem.

21
00:01:04,940 --> 00:01:07,951
In that case, no adaptation needs to be
done and we can jump down to evaluation.

22
00:01:07,951 --> 00:01:08,706
In fact this is what happened when
we're discussing the KNN method.

23
00:01:08,706 --> 00:01:13,588
In this way we can see that there
are many ways in which this

24
00:01:13,588 --> 00:01:17,740
process need not necessarily be linear.

25
00:01:17,740 --> 00:01:20,590
>> So Ashok,
earlier you said that if the evaluation

26
00:01:20,590 --> 00:01:23,750
shows that the new solution is good,
then we should store it.

27
00:01:23,750 --> 00:01:26,480
If the evaluation shows that
the new solution is not good,

28
00:01:26,480 --> 00:01:29,340
we should try adapting again or
we should try retrieving again.

29
00:01:29,340 --> 00:01:32,690
But what about evaluation showing
that new solution is not good?

30
00:01:32,690 --> 00:01:34,220
Should we ever store those?

31
00:01:34,220 --> 00:01:39,040
>> Indeed, sometimes studying
failed cases is also very useful.

32
00:01:39,040 --> 00:01:41,750
Failed cases can help
us anticipate problems.

33
00:01:41,750 --> 00:01:43,930
So imagine if you're
given a new problem, and

34
00:01:43,930 --> 00:01:47,570
you retrieve from your
case memory a failed case.

35
00:01:47,570 --> 00:01:51,300
That failed case can be very useful
because it can help you anticipate

36
00:01:51,300 --> 00:01:55,440
the kinds of problems that will
occur in solving the new problem.

37
00:01:55,440 --> 00:01:58,830
>> So that reminds me of another
example from our file input problem.

38
00:01:58,830 --> 00:02:01,920
One thing I've encountered a lot when
I'm doing a file input is that if you

39
00:02:01,920 --> 00:02:03,260
read too far in the file,

40
00:02:03,260 --> 00:02:05,470
then the program will crash and
it'll give you an error.

41
00:02:05,470 --> 00:02:08,330
It will always give you the same error,
and it's a very common problem

42
00:02:08,330 --> 00:02:11,230
because different languages do
file input slightly differently.

43
00:02:11,230 --> 00:02:14,190
So in my mind, I must have cases of
the different ways that it's failed

44
00:02:14,190 --> 00:02:17,990
in the past, so I can anticipate those
and do it correctly in the future.

45
00:02:17,990 --> 00:02:21,200
>> Failures are great opportunities for
learning.

46
00:02:21,200 --> 00:02:24,490
When failures occur,
we can try to repair the failure

47
00:02:24,490 --> 00:02:28,650
by going back from the evaluation
step to the adaptation step.

48
00:02:28,650 --> 00:02:31,680
Or we can try to recover
from the failure

49
00:02:31,680 --> 00:02:35,150
by going from the evaluation step
all the way to the retrieval step.

50
00:02:36,820 --> 00:02:40,560
In addition, we can store these
failures in the case memory.

51
00:02:40,560 --> 00:02:44,190
When we store them in the case memory,
then these failures can help us

52
00:02:44,190 --> 00:02:48,400
anticipate failures that might
occur with new problems.

53
00:02:48,400 --> 00:02:50,000
There's a flip side to this.

54
00:02:50,000 --> 00:02:52,810
Just like it is useful
to store failed cases,

55
00:02:52,810 --> 00:02:56,180
it is not useful to store
every successful case.

56
00:02:56,180 --> 00:03:00,260
If we stored every successful case, then
very soon the case memory will become

57
00:03:00,260 --> 00:03:05,000
very, very large, and the retrieval
step will become less efficient.

58
00:03:05,000 --> 00:03:06,970
This is sometimes called
the utility problem.

59
00:03:06,970 --> 00:03:11,550
We want to store only those successful
cases that in fact help us cover

60
00:03:11,550 --> 00:03:13,540
a larger span of problems.

61
00:03:13,540 --> 00:03:17,300
This means that, even when a case
succeeds, we want to store it

62
00:03:17,300 --> 00:03:20,380
only if there is something interesting
or noteworthy about that case.
