1
00:00:00,000 --> 00:00:02,000
Now let's go through each one of them.

2
00:00:02,000 --> 00:00:07,000
Writing "potato" may be fun, but it does not involve any sort of if-then-else processing,

3
00:00:07,000 --> 00:00:09,000
so it won't show off our defect.

4
00:00:09,000 --> 00:00:12,000
The expected answer is that the web page shows potato,

5
00:00:12,000 --> 00:00:15,000
and the answer we'll get is the web page shows potato.

6
00:00:15,000 --> 00:00:17,000
So this is not a good test case.

7
00:00:17,000 --> 00:00:22,000
Over here, if x is less than y write "tomato", else write "eggplant".

8
00:00:22,000 --> 00:00:26,000
We need a little more in this test case like values of x and y,

9
00:00:26,000 --> 00:00:28,000
but this is the right idea.

10
00:00:28,000 --> 00:00:32,000
Let's say that x is something like 0 and y is something like 1.

11
00:00:32,000 --> 00:00:37,000
We then expect it to print out "tomato" but because we've made this bug over here,

12
00:00:37,000 --> 00:00:39,000
it will print out "eggplant" instead.

13
00:00:39,000 --> 00:00:42,000
So the observed behavior will differ from our intuition

14
00:00:42,000 --> 00:00:45,000
or from our specification of what should really happen,

15
00:00:45,000 --> 00:00:47,000
so then we know there's a mistake.

16
00:00:47,000 --> 00:00:49,000
Over here return 2 + 3.

17
00:00:49,000 --> 00:00:52,000
Again there's no conditional control flow, so this is not a very good test for us.

18
00:00:52,000 --> 00:00:56,000
Finally, over here factorial does involve an if

19
00:00:56,000 --> 00:00:59,000
in determining whether or not the program terminates.

20
00:00:59,000 --> 00:01:03,000
This is a very good test because almost immediately, factorial of 5,

21
00:01:03,000 --> 00:01:05,000
we're going to see, oh, is 5 equal to 0?

22
00:01:05,000 --> 00:01:07,000
It's not. Bug. We'll return 1.

23
00:01:07,000 --> 00:01:09,000
We won't actually make any recursive calls.

24
00:01:09,000 --> 00:01:11,000
We'll get the wrong answer really fast.

25
00:01:11,000 --> 99:59:59,999
So this is a good test case for us.
