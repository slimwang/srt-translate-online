1
00:00:00,320 --> 00:00:04,050
So once the kernel gets all the information from the

2
00:00:04,050 --> 00:00:07,210
server, kernel gets to work. First of all, it creates

3
00:00:07,210 --> 00:00:10,470
this data structure on behalf of the server, and holds

4
00:00:10,470 --> 00:00:13,670
it internally for itself. So there's a data structure that

5
00:00:13,670 --> 00:00:16,840
is entirely in the kernel, and nobody else has to

6
00:00:16,840 --> 00:00:18,700
see it, [LAUGH] it is only for the kernel to

7
00:00:18,700 --> 00:00:22,100
know all the information that is needed, in order to

8
00:00:22,100 --> 00:00:25,690
make this upcall into the entry point procedure. It also

9
00:00:25,690 --> 00:00:28,740
establishes a buffer, and this is what is called

10
00:00:28,740 --> 00:00:32,450
the A-stack, and this A-stack sizes as A-stack was just

11
00:00:32,450 --> 00:00:36,560
specified by the server as part of this grand communication

12
00:00:36,560 --> 00:00:39,260
to indicate how big this A-stack is got to be.

13
00:00:39,260 --> 00:00:42,127
Because the you kernel has no idea what the relationship

14
00:00:42,127 --> 00:00:45,310
is, is between the, the client and the server. And

15
00:00:45,310 --> 00:00:47,900
so the server is saying, telling the kernel that look,

16
00:00:47,900 --> 00:00:50,620
in order for us to communicate, I need a buffer,

17
00:00:50,620 --> 00:00:52,540
and the size of the buffer is this much. So,

18
00:00:52,540 --> 00:00:56,970
the kernel allocates shared memory, and takes the shared memory

19
00:00:56,970 --> 00:01:00,280
that is allocated, and maps it into the address space

20
00:01:00,280 --> 00:01:03,190
of both the client and the server. So there's the

21
00:01:03,190 --> 00:01:06,330
client's address space. There's the server's address space. So, in

22
00:01:06,330 --> 00:01:09,040
some part of the client address space and the server

23
00:01:09,040 --> 00:01:12,060
address space, need not be exactly matching parts of the

24
00:01:12,060 --> 00:01:15,758
virtual memory space of the client and the server. But somewhere

25
00:01:15,758 --> 00:01:18,656
in the address space of the client and the server,

26
00:01:18,656 --> 00:01:22,700
it maps this A-stack. So essentially, what we have now.

27
00:01:22,700 --> 00:01:26,770
Is shared memory for communication directly between the client and

28
00:01:26,770 --> 00:01:29,600
the server, without mediation of the kernel, because once this

29
00:01:29,600 --> 00:01:32,420
has been setup as shared memory and mapped through the

30
00:01:32,420 --> 00:01:35,270
address space of the server and the client then the

31
00:01:35,270 --> 00:01:37,690
client can write into it, the server can write into

32
00:01:37,690 --> 00:01:40,620
it, client can read from it, server can read from it.

33
00:01:40,620 --> 00:01:43,690
No mediation by the kernel, or in other words, what we

34
00:01:43,690 --> 00:01:46,690
have accomplished is, we are getting the kernel out of the

35
00:01:46,690 --> 00:01:49,930
loop in terms of copying. Client and the server can directly

36
00:01:49,930 --> 00:01:54,315
communicate the arguments and the results back and forth, using this

37
00:01:54,315 --> 00:01:56,890
A-Stack. And that's the reason it's called A-Stack, it stands for

38
00:01:56,890 --> 00:02:00,300
argument stack. It's available for communication between the client and the

39
00:02:00,300 --> 00:02:03,430
server. So now the cla, the kernel is done with all

40
00:02:03,430 --> 00:02:05,680
the work that it has to do in order to set

41
00:02:05,680 --> 00:02:08,699
up this remote procedure call mechanism between the

42
00:02:08,699 --> 00:02:11,820
caller, the client and the callee, which is the

43
00:02:11,820 --> 00:02:15,570
server. And what the kernel is going to do is,

44
00:02:15,570 --> 00:02:18,630
it's going to authenticate the client that you're good to

45
00:02:18,630 --> 00:02:21,970
go. You can make calls on uh,this procedure

46
00:02:21,970 --> 00:02:25,650
foo that is being exported through the main server

47
00:02:25,650 --> 00:02:30,770
by the server, so I let you make calls on this in the future, and what you need

48
00:02:30,770 --> 00:02:35,170
to do every time you want to make a call to S.foo you have to give

49
00:02:35,170 --> 00:02:37,730
me a descriptive which i'm going to call

50
00:02:37,730 --> 00:02:41,170
the binding object B.O stands for the binding

51
00:02:41,170 --> 00:02:44,200
object In the Western world, BO has

52
00:02:44,200 --> 00:02:47,130
a different colloquial connotation. I won't go there.

53
00:02:48,360 --> 00:02:52,110
But here, BO stands for, Binding Object

54
00:02:52,110 --> 00:02:56,310
and it's basically a capability for the client.

55
00:02:56,310 --> 00:02:59,780
To present to the kernel that I am authenticated

56
00:02:59,780 --> 00:03:02,690
in order to make this call into the service

57
00:03:02,690 --> 00:03:06,536
domain to this particular procedure called s.foo. So that's

58
00:03:06,536 --> 00:03:09,540
the idea. So all the work that I have

59
00:03:09,540 --> 00:03:12,220
described to you up until now, is the kernel

60
00:03:12,220 --> 00:03:15,903
mediation that happens in terms of entry point setup,

61
00:03:15,903 --> 00:03:18,620
on the first call from the client. On the

62
00:03:18,620 --> 00:03:21,320
first call from the client, all of this magic

63
00:03:21,320 --> 00:03:23,520
happens in order to set up the communication

64
00:03:23,520 --> 00:03:27,600
buffer between the client and the server and authenticate

65
00:03:27,600 --> 00:03:30,890
client that you can make future calls on

66
00:03:30,890 --> 00:03:35,530
this particular entry point procedure, by providing or presenting

67
00:03:35,530 --> 00:03:38,220
to the kernel this capability which is called

68
00:03:38,220 --> 00:03:40,700
the BO, the binding object. And of course the

69
00:03:40,700 --> 00:03:43,560
important point is that the kernel knows that

70
00:03:43,560 --> 00:03:46,970
this binding object and this procedure descriptor are related.

71
00:03:46,970 --> 00:03:48,452
Or in other words, if the client is

72
00:03:48,452 --> 00:03:51,300
going to present a binding object, the kernel knows from

73
00:03:51,300 --> 00:03:53,690
the binding object What is the proceeded descriptor

74
00:03:53,690 --> 00:03:56,140
that corresponds to the binding object so that it

75
00:03:56,140 --> 00:03:58,790
can find the entry point to call into

76
00:03:58,790 --> 00:04:01,560
the server. So once again, what I want to stress

77
00:04:01,560 --> 00:04:05,330
is the fact that this kernel mediation happens only

78
00:04:05,330 --> 00:04:08,310
one time. On the first call by the client.
