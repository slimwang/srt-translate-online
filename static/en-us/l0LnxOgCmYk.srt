1
00:00:00,111 --> 00:00:03,667
This problem could get pretty complicated, so let's write some test cases out.

2
00:00:03,667 --> 00:00:09,963
I'll index spots by row and column. So 2, 2 would be right here, and that spot

3
00:00:09,963 --> 00:00:17,542
should be blue. So, we need an expression that when given 2 and 2 gets 0. The

4
00:00:17,542 --> 00:00:28,710
spot 3, 3 should also be blue. So again, we need a zero. 2, 3 should be red.

5
00:00:28,710 --> 00:00:37,878
So, that should be a 1. And 3, 2 should be red. So, also 1. So, what's an

6
00:00:37,878 --> 00:00:42,780
expression I could try to use to turn 2 and 2 into 0, 3 and 3 into 0, 2 and 3

7
00:00:42,780 --> 00:00:49,332
into 1, and 3 and 2 into 1. It kind of looks like maybe I'm taking the mod of

8
00:00:49,332 --> 00:00:58,555
these and adding that together. So, row mod 2 plus column mod 2. Let's see what

9
00:00:58,555 --> 00:01:06,820
this gives in each case. 2 mod 2 would be 0. 0 and 0 gives 0, so that's good. 3

10
00:01:06,820 --> 00:01:15,357
mod 2 is 1 and 2 mod 2 is 0, so that gives 1. The same will happen here. This

11
00:01:15,357 --> 00:01:22,381
one doesn't quite work. 3 mod 2 is 1 and 3 mod 2 is also 1, so I would get 2.

12
00:01:22,381 --> 00:01:26,905
But then maybe if I just mod the whole thing by 2 again, then I would get 0

13
00:01:26,905 --> 00:01:33,270
which is the same. The 2 would turn into 0 and the ones would stay. So, this

14
00:01:33,270 --> 00:01:38,781
expression might work. Let's test it out in BlueJ. First, I'll check my test

15
00:01:38,781 --> 00:01:45,144
and put some actual values in it. The test cases I came up with were 2, 2; 3,

16
00:01:45,144 --> 00:01:51,794
3; 2, 3 and 3, 2. For 2, 2 I expected 0, and I expected the same thing for 3,

17
00:01:51,794 --> 00:02:02,462
3. At 2, 3 I expected 1, so 1, and at 3, 2 I also expected 1. So, my tester

18
00:02:02,462 --> 00:02:06,606
should be good to go. Now, I'll try putting that expression into the actual

19
00:02:06,606 --> 00:02:13,397
program. In the checker board painter, instead of returning five, I want to

20
00:02:13,397 --> 00:02:21,424
return row mod 2, plus col mod 2, and then all mod 2. I don't have to put these

21
00:02:21,424 --> 00:02:26,412
in parentheses because the plus has lower precedence. And let's try it. If I

22
00:02:26,412 --> 00:02:34,312
run the tester, my actual and expected values match up. But could we make this

23
00:02:34,312 --> 00:02:40,384
any simpler? What if I noticed that adding an even number plus an even number

24
00:02:40,384 --> 00:02:46,786
gives me another even number. And an odd number plus an odd number gives me

25
00:02:46,786 --> 00:02:54,670
another even number, but odd plus even or even plus odd both give odd numbers.

26
00:02:54,670 --> 00:02:58,900
Then I can just add row and column, and take the mod 2 right at the end.

27
00:02:59,920 --> 00:03:03,282
Because if they match, their sum is even. And if they don't match, the sum is

28
00:03:03,282 --> 00:03:08,424
odd. So, I'll just get rid of the mod 2 and the mod 2. If I change it in the

29
00:03:08,424 --> 00:03:14,032
checkerboard painter, erase that and erase that. What will my test say? Is this

30
00:03:14,032 --> 00:03:21,723
still the same? And if I run the test again, still works. As a bonus question,

31
00:03:21,723 --> 00:03:26,683
what if instead of returning 0 when they match and 1 when they don't match, I

32
00:03:26,683 --> 00:03:34,285
wanted to return one when they match and zero when they don't match. How would

33
00:03:34,285 --> 00:03:39,238
you do that? I won't go over it, but it's something to think about.
