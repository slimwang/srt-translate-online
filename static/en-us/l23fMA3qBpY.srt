1
00:00:00,000 --> 00:00:02,000
What we're going to do right now is a recurrence relation,

2
00:00:02,000 --> 00:00:05,000
which is a kind of recursive mathematical function,

3
00:00:05,000 --> 00:00:09,000
which is a good match for this recursive algorithmic expression for Rec_Russian--

4
00:00:09,000 --> 00:00:11,000
Rec_Russian recurrence relation.

5
00:00:11,000 --> 00:00:16,000
Looking at the structure of Rec_Russian, if a is 0, then it's going to execute 1 statement--

6
00:00:16,000 --> 00:00:19,000
basically the test to see whether itâ€™s 0 and returns.

7
00:00:19,000 --> 00:00:25,000
Otherwise, if a is bigger than 0 and even, let's take a look at what Rec_Russian does in that case.

8
00:00:25,000 --> 00:00:29,000
We come in here with a number that is even and greater than 0 is going to execute

9
00:00:29,000 --> 00:00:32,000
the condition of this if statement, which fails so there's 1 of that.

10
00:00:32,000 --> 00:00:38,000
Then 1 more to do this plus it's going to recursively workout the value of this quantity.

11
00:00:38,000 --> 00:00:41,000
Then one more operation to multiply that by 2.

12
00:00:41,000 --> 00:00:48,000
I call a total of 3 plus however long it takes to multiply a over 2 times b.

13
00:00:48,000 --> 00:00:50,000
We don't know what that is.

14
00:00:50,000 --> 00:00:52,000
We're imaging that we're going be able to create a function T

15
00:00:52,000 --> 00:00:54,000
that is going to give us the answer to that.

16
00:00:54,000 --> 00:00:56,000
Let's just leave it at that for now.

17
00:00:56,000 --> 00:01:01,000
Finally, in the case where a is odd, it's going to execute the condition of this if statement,

18
00:01:01,000 --> 00:01:04,000
the condition of this if statement, both of which will fail.

19
00:01:04,000 --> 00:01:09,000
Then it will recursively compute the product, and then basically execute the returns.

20
00:01:09,000 --> 00:01:13,000
A total of 3 statements plus however long it takes to do the recursive call--

21
00:01:13,000 --> 00:01:17,000
so 3 statements plus this particular kind of recursive call.

22
00:01:17,000 --> 00:01:20,000
This now is a mathematical specification of a function.

23
00:01:20,000 --> 00:01:24,000
We don't know at the moment what the relationship is between a and T(a),

24
00:01:24,000 --> 00:01:26,000
but at least it's fully specified.

25
00:01:26,000 --> 00:01:29,000
It turns out that you actually can solve this pretty easily

26
00:01:29,000 --> 00:01:33,000
by using what we already worked out about the number of times

27
00:01:33,000 --> 00:01:36,000
you can divide a number a in half, rounding down if it's odd,

28
00:01:36,000 --> 00:01:38,000
before you get down to 0.

29
00:01:38,000 --> 00:01:41,000
See if you can put that together to try to answer the question

30
00:01:41,000 --> 99:59:59,999
what does T(a) equal from these set of choices.
