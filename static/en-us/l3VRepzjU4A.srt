1
00:00:00,460 --> 00:00:03,790
I mentioned earlier that RVM provides opportunities

2
00:00:03,790 --> 00:00:06,560
for the developer to give hints to

3
00:00:06,560 --> 00:00:11,070
the library on optimizing the performance of

4
00:00:11,070 --> 00:00:13,498
the library for the chosen application. Or

5
00:00:13,498 --> 00:00:16,579
in other words, the transaction semantics of

6
00:00:16,579 --> 00:00:19,423
RVN is already a stripped-down version of

7
00:00:19,423 --> 00:00:23,480
the traditional transaction semantic. It doesn't what

8
00:00:23,480 --> 00:00:25,590
you are able nested transaction and so on,

9
00:00:25,590 --> 00:00:31,290
but still transaction by it's very nature requires that

10
00:00:31,290 --> 00:00:34,750
a commit point, you have to do a synchronous

11
00:00:34,750 --> 00:00:37,230
to the I/O to the disc. And similarly transaction

12
00:00:37,230 --> 00:00:39,990
by it's very nature says that, it has an all

13
00:00:39,990 --> 00:00:42,980
or nothing property. So the transaction is not going

14
00:00:42,980 --> 00:00:45,650
to commit, that is that it's going to abort, then

15
00:00:45,650 --> 00:00:47,500
we have to make sure that all the changes

16
00:00:47,500 --> 00:00:50,720
that have been made between begin transaction and abort transaction

17
00:00:50,720 --> 00:00:52,880
are thrown away. And similarly, if the transaction

18
00:00:52,880 --> 00:00:55,570
commits, then we have to make sure that at

19
00:00:55,570 --> 00:00:57,660
the commit point all of the changes that have

20
00:00:57,660 --> 00:01:00,990
been made to in memory copies of persistent data

21
00:01:00,990 --> 00:01:03,300
structures are committed to the disk. That's where

22
00:01:03,300 --> 00:01:06,770
synchronous I/O comes in. But if the developer wants

23
00:01:06,770 --> 00:01:10,890
to optimize his performance, RVM gives opportunities for such

24
00:01:10,890 --> 00:01:15,750
optimizations. The first opportunity is the no_restore mode in

25
00:01:15,750 --> 00:01:20,090
the begin_xact call. The no_restore mode in begin_xact is

26
00:01:20,090 --> 00:01:24,420
signalling to RVN that this transaction that I am

27
00:01:24,420 --> 00:01:28,070
starting is not going to abort, and therefore there

28
00:01:28,070 --> 00:01:30,400
is no need for you to create an in

29
00:01:30,400 --> 00:01:32,995
memory, undo record for me. Even though I am

30
00:01:32,995 --> 00:01:35,310
going to give you a set range call, don't bother

31
00:01:35,310 --> 00:01:38,450
creating an undo record for the range of addresses

32
00:01:38,450 --> 00:01:41,620
that I intend to modify in this beginning transaction.

33
00:01:41,620 --> 00:01:44,970
That's what is meant by the no_restore mode. So

34
00:01:44,970 --> 00:01:46,850
that reduce the amount of work that the RVM

35
00:01:46,850 --> 00:01:50,060
has to do in doing a memory copy and

36
00:01:50,060 --> 00:01:53,570
the application is going to gain because RVM is

37
00:01:53,570 --> 00:01:57,740
doing less work which means the overhead in performing

38
00:01:57,740 --> 00:02:00,320
a transaction is going to be less as seen

39
00:02:00,320 --> 00:02:03,505
by the application. The second optimization opportunity is a

40
00:02:03,505 --> 00:02:06,920
no-flush mode in the end transaction. As I mentioned,

41
00:02:06,920 --> 00:02:11,030
a transaction truly has committed only when

42
00:02:11,030 --> 00:02:14,460
the changes to the critical section between

43
00:02:14,460 --> 00:02:17,080
begin transaction and end transaction have been

44
00:02:17,080 --> 00:02:20,430
synchronously written out to the disk. So, the

45
00:02:20,430 --> 00:02:25,730
normal semantic of an end transaction, that is a commit of a transaction, would

46
00:02:25,730 --> 00:02:28,970
require that our VM should block the

47
00:02:28,970 --> 00:02:31,910
process that made that call for end transaction,

48
00:02:31,910 --> 00:02:36,980
until that redo record has been written synchronously to the disk.

49
00:02:36,980 --> 00:02:42,560
But if the application developer is opportunistic and believes

50
00:02:42,560 --> 00:02:47,250
that the chances of failure either due to power

51
00:02:47,250 --> 00:02:52,040
failure or due to his own software caching is pretty small, he could be brave

52
00:02:52,040 --> 00:02:57,555
enough to say no-flush mode. And what that no-flush mode is telling the RVM

53
00:02:57,555 --> 00:03:00,362
library is that there is no need to do a

54
00:03:00,362 --> 00:03:03,930
synchronous I/O. Of course I want you to write it to

55
00:03:03,930 --> 00:03:06,790
the disk but don't block me in order to write

56
00:03:06,790 --> 00:03:09,290
to the disk. So no need to do the synchronous flash

57
00:03:09,290 --> 00:03:11,940
of the redo log to the disk. And, in other

58
00:03:11,940 --> 00:03:16,400
words, what we're getting by doing a no-flush mode in end

59
00:03:16,400 --> 00:03:20,370
transaction is lazy persistence. We know it is going to

60
00:03:20,370 --> 00:03:22,840
be persistent on the disk, that is the work that RVM

61
00:03:22,840 --> 00:03:25,060
is going to do, but it is not doing it

62
00:03:25,060 --> 00:03:28,770
exactly at the point of end transaction. So the

63
00:03:28,770 --> 00:03:31,950
upshot is, there is a window of vulnerability. End

64
00:03:31,950 --> 00:03:36,460
transaction happened here, and maybe by the time RVM

65
00:03:36,460 --> 00:03:38,950
gets to write it out to the disk, so

66
00:03:38,950 --> 00:03:42,070
much time has elapsed. So this time window is

67
00:03:42,070 --> 00:03:44,760
the window of vulnerability. So if this axis is

68
00:03:44,760 --> 00:03:47,950
time, then n transaction happened here, and this is

69
00:03:47,950 --> 00:03:51,540
the point where the redo record was committed to

70
00:03:51,540 --> 00:03:54,310
the disk, so this is the portion which we're calling

71
00:03:54,310 --> 00:03:58,700
as a window of vulnerability, and the app developer

72
00:03:58,700 --> 00:04:01,810
is taking a chance, saying that I am so sure

73
00:04:01,810 --> 00:04:04,310
that no crash is going to happen in this window,

74
00:04:04,310 --> 00:04:07,300
I'm going to go ahead and say no-flush. So, in other

75
00:04:07,300 --> 00:04:10,870
words, the transaction is being used as an insurance, and

76
00:04:10,870 --> 00:04:13,730
this should remind you of the old at the age

77
00:04:13,730 --> 00:04:18,649
that we saw when we talked about shared memory systems. Shared memory systems

78
00:04:18,649 --> 00:04:20,500
scale really well when you don't share

79
00:04:20,500 --> 00:04:24,400
memory. Similarly, transactional systems scale really well,

80
00:04:24,400 --> 00:04:27,260
perform really well, when you don't use

81
00:04:27,260 --> 00:04:30,590
the full semantic requirement of transaction, in

82
00:04:30,590 --> 00:04:32,390
particular if you can get rid of

83
00:04:32,390 --> 00:04:35,250
synchronous I/O, it'll make the performance better.
