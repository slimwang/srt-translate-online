1
00:00:00,390 --> 00:00:02,796
So you just saw that if you
add two series together and

2
00:00:02,796 --> 00:00:05,960
if the indexes don't match,
NaN will be filled in.

3
00:00:05,960 --> 00:00:08,620
Now, in a lot of cases,
I might not want NaN or

4
00:00:08,620 --> 00:00:11,360
not a number to show up
in my resulting series.

5
00:00:11,360 --> 00:00:14,950
So if I didn't want the NaNs to be
included, how would I deal with that?

6
00:00:14,950 --> 00:00:19,000
For questions like this there's almost a
way to do what you want with Pandas, but

7
00:00:19,000 --> 00:00:21,740
it can be a bit tricky to
figure out what that way is.

8
00:00:21,740 --> 00:00:26,490
One thing I might try is doing a Google
search for pandas remove missing values.

9
00:00:26,490 --> 00:00:29,690
The second result,
dropna looks promising.

10
00:00:29,690 --> 00:00:33,050
The first thing I noticed about this
documentation is that it operates on

11
00:00:33,050 --> 00:00:35,020
DataFrames, not series.

12
00:00:35,020 --> 00:00:37,430
You'll learn about
DataFrames next lesson.

13
00:00:37,430 --> 00:00:40,480
Now the documentation for
pandas isn't always perfect.

14
00:00:40,480 --> 00:00:44,640
When I saw this result, I wondered if
dropna would work on a series as well.

15
00:00:44,640 --> 00:00:47,260
I decided to try it and
it runs out it did.

16
00:00:47,260 --> 00:00:50,400
This documentation
also refers to an axis.

17
00:00:50,400 --> 00:00:53,710
Again, this is something you'll
learn about in the next lesson.

18
00:00:53,710 --> 00:00:57,500
For now, the fact that this function
is emitting labels where some or

19
00:00:57,500 --> 00:01:00,400
all of the data are missing
sounds promising.

20
00:01:00,400 --> 00:01:03,998
So I'll try saving the result of this
addition to the variable sum result and

21
00:01:03,998 --> 00:01:07,830
then I'll run sum_result.dropna.

22
00:01:07,830 --> 00:01:11,680
And sure enough, I get a new series
where all missing values are removed.

23
00:01:11,680 --> 00:01:15,600
There's actually a few different ways
you could solve this problem in pandas.

24
00:01:15,600 --> 00:01:16,160
For example,

25
00:01:16,160 --> 00:01:19,940
there's a way to treat missing
values as zero before the addition.

26
00:01:19,940 --> 00:01:23,160
So then the result of adding these
two series would have value 1 for

27
00:01:23,160 --> 00:01:26,320
index a, since there's
an assumed zero in series 2.

28
00:01:26,320 --> 00:01:29,370
See if you can figure
out how to do this.

29
00:01:29,370 --> 00:01:33,480
If you find a third solution to the
problem of NaNs, that's great as well.

30
00:01:33,480 --> 00:01:37,280
Now figuring things out like this by
Googling can be very challenging, but

31
00:01:37,280 --> 00:01:38,930
it's also very important.

32
00:01:38,930 --> 00:01:40,810
Pandas has a lot of functionality, and

33
00:01:40,810 --> 00:01:43,090
this course won't be
able to cover all of it.

34
00:01:43,090 --> 00:01:44,430
If you don't find what
you're looking for

35
00:01:44,430 --> 00:01:46,930
right away, try a few different queries.

36
00:01:46,930 --> 00:01:49,060
If you get stuck,
you can always watch the solution video.

37
00:01:49,060 --> 00:01:51,820
You can use the programming
quiz on the next screen

38
00:01:51,820 --> 00:01:53,700
to test out whether your
solution is working.
