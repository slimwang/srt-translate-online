1
00:00:00,008 --> 00:00:03,189
By setting up Van.prototype to delegate to Car.prototype,

2
00:00:03,189 --> 00:00:06,979
field lookups on van instances like Amy, will fall all the way through to

3
00:00:06,979 --> 00:00:11,150
Car.prototype when necessary, to find methods that are shared there.

4
00:00:11,150 --> 00:00:15,060
Another common mistake is to try and make an object that delegates directly to

5
00:00:15,060 --> 00:00:17,530
the superclass constructor function itself.

6
00:00:17,530 --> 00:00:20,250
Creating an object that delegates to car,

7
00:00:20,250 --> 00:00:23,980
instead of an object that delegates to car.prototype, won't work,

8
00:00:23,980 --> 00:00:28,430
because car instances themselves are supposed to delegate to car.prototype.

9
00:00:28,430 --> 00:00:31,780
This is an example of a much larger problem that you should be aware of.

10
00:00:31,780 --> 00:00:35,270
People are forever tempted to conflate a constructor function and

11
00:00:35,270 --> 00:00:37,250
it's companion prototype object.

12
00:00:37,250 --> 00:00:39,470
But the two serve very different purposes.

13
00:00:39,470 --> 00:00:43,540
Perhaps the most common mistake, is attempting to instantiate the superclass

14
00:00:43,540 --> 00:00:47,930
constructor as a method of creating something that delegates to its prototype.

15
00:00:47,930 --> 00:00:52,450
This has a nearly identical effect, with the sole exception that it runs the car

16
00:00:52,450 --> 00:00:56,750
function in the process of creating this new object, which is undesirable.

17
00:00:56,750 --> 00:01:00,030
The object.create function is actually a rather new language feature,

18
00:01:00,030 --> 00:01:02,550
and before the community knew too much about it,

19
00:01:02,550 --> 00:01:07,600
common practice prescribed setting van.prototype to equal a new car instance.

20
00:01:07,600 --> 00:01:09,563
But this causes a number of problems.

21
00:01:09,563 --> 00:01:11,790
Notice that if we use this technique,

22
00:01:11,790 --> 00:01:15,800
every time we made a car subclass like van, or any other subclass of car,

23
00:01:15,800 --> 00:01:20,132
we would invoke car, the function, as part of that process.

24
00:01:20,132 --> 00:01:24,440
The superclass constructor may also require some arguments as part of

25
00:01:24,440 --> 00:01:26,210
it's invocation, like loc.

26
00:01:26,210 --> 00:01:27,990
But we don't have any way of passing them in,

27
00:01:27,990 --> 00:01:31,640
because the new car prototype doesn't really have a meaningful location.

28
00:01:31,640 --> 00:01:34,960
The only thing that has a meaningful location is a car instance or

29
00:01:34,960 --> 00:01:35,930
a van instance.

30
00:01:35,930 --> 00:01:39,380
The abstract notion of all vans does not have a meaningful location.

31
00:01:39,380 --> 00:01:43,750
Since there's nothing useful we could pass in for the loc input variable,

32
00:01:43,750 --> 00:01:47,180
the function will run with all of it's inputs being bound to undefined.

33
00:01:47,180 --> 00:01:50,940
Imagine we were doing something with those inputs, like this dot access.

34
00:01:50,940 --> 00:01:54,800
What do you think would happen in the case where we tried dot access while

35
00:01:54,800 --> 00:01:58,100
having passed nothing in particular in between the parens on new car?
