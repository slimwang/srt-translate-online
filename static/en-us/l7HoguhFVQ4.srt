1
00:00:00,120 --> 00:00:03,610
So now that we know that the program
generates virtual addresses but

2
00:00:03,610 --> 00:00:07,700
the processor needs physical addresses
to access the actual memory,

3
00:00:07,700 --> 00:00:11,920
let's see how the processor does the
virtual to physical address translation.

4
00:00:12,920 --> 00:00:16,149
So the program generates
a virtual address.

5
00:00:16,149 --> 00:00:20,510
This is what the load, for example,
will compute as its address.

6
00:00:20,510 --> 00:00:24,870
The processor divides this
address into the page offset part

7
00:00:24,870 --> 00:00:28,310
which tells us where in the page we are.

8
00:00:28,310 --> 00:00:32,259
The virtual page number
which tells us which page

9
00:00:32,259 --> 00:00:34,660
in the process are we talking about.

10
00:00:34,660 --> 00:00:40,890
If we have a 4 kilobyte page 12 bits
are telling us where in the page we are,

11
00:00:40,890 --> 00:00:44,920
and the remaining bits are telling
us what the page number is.

12
00:00:44,920 --> 00:00:52,000
So let's consider the address FC51908B,
which is a 32 bit address.

13
00:00:52,000 --> 00:00:56,270
The least significant 12 bits are
telling us where in the 4 kilobyte page

14
00:00:56,270 --> 00:00:57,969
we are, so that's the page offset.

15
00:00:58,970 --> 00:01:04,239
The more significant bits are telling
us what the virtual page number is.

16
00:01:04,239 --> 00:01:08,810
Now what happens is we take
the virtual page number and

17
00:01:08,810 --> 00:01:12,240
use it as an index into the page table.

18
00:01:12,240 --> 00:01:16,930
In this case, the index into
the page table will be FC159,

19
00:01:16,930 --> 00:01:22,020
so we find the entry with that index.

20
00:01:22,020 --> 00:01:25,180
What that entry tells us is what

21
00:01:25,180 --> 00:01:28,620
the frame number is that corresponds
to this virtual page number,

22
00:01:28,620 --> 00:01:32,710
that is where did we put that page
in the actual physical memory.

23
00:01:32,710 --> 00:01:37,180
Let's say that the frame
number in this entry is 00152.

24
00:01:37,180 --> 00:01:40,340
We take this physical frame number and

25
00:01:40,340 --> 00:01:45,550
put it together with the page
offset into a physical address.

26
00:01:45,550 --> 00:01:50,220
And that is what we use to actually
access the physical memory.

27
00:01:50,220 --> 00:01:51,610
In this example,

28
00:01:51,610 --> 00:01:56,840
the physical address is composed of
the frame number and the page offset.

29
00:01:56,840 --> 00:02:00,840
So this is a 32 bit physical address
that we will use to access the memory.

30
00:02:00,840 --> 00:02:06,050
Note that the page offset is
present in both the virtual and

31
00:02:06,050 --> 00:02:07,720
the physical address.

32
00:02:07,720 --> 00:02:11,900
So from the virtual address, the least
significant bits that corresponds to

33
00:02:11,900 --> 00:02:17,300
the page offset do not change when we
translate into the physical address.

34
00:02:17,300 --> 00:02:19,820
But the virtual page number

35
00:02:19,820 --> 00:02:24,240
does change because it gets
translated into the frame number.
