1
00:00:00,270 --> 00:00:03,108
So, let's do the solution to our BTB &

2
00:00:03,108 --> 00:00:06,430
BHT quiz. We have a BHT with 16 entries which

3
00:00:06,430 --> 00:00:09,350
gives perfect predictions. We have a BTB with four

4
00:00:09,350 --> 00:00:12,310
entries, gives us perfect predictions. The question was, how many

5
00:00:12,310 --> 00:00:14,680
times do we access the BHT for each of

6
00:00:14,680 --> 00:00:19,120
these instructions? We access the BHT in order to tell

7
00:00:19,120 --> 00:00:21,580
us whether this instruction is a taken branch. We

8
00:00:21,580 --> 00:00:25,280
do that every time we fetch an instruction. And because

9
00:00:25,280 --> 00:00:28,090
we have a perfect prediction for both BHT and the

10
00:00:28,090 --> 00:00:30,940
BTB that means that we will never fetch any instruction

11
00:00:30,940 --> 00:00:33,330
that actually is not supposed to execute. So we now

12
00:00:33,330 --> 00:00:35,790
just need to figure out how many times each of

13
00:00:35,790 --> 00:00:40,860
these instructions execute. This instruction here initalizes R2 to 100

14
00:00:40,860 --> 00:00:44,360
and that instructions executes only one time once we have

15
00:00:44,360 --> 00:00:47,050
done executing it we will go into the loop, loop

16
00:00:47,050 --> 00:00:50,620
here and then exit never coming back here. Same here.

17
00:00:50,620 --> 00:00:56,150
This puts zero in R1. That executes only once. Now we have a loop. This loop

18
00:00:56,150 --> 00:01:02,160
will execute as long as R1 and R2 are different. R1 initially has a zero

19
00:01:02,160 --> 00:01:05,099
value, goes through here gets incremented, and then

20
00:01:05,099 --> 00:01:08,470
we branch back. Now we execute this loop

21
00:01:08,470 --> 00:01:15,969
once more, with R1 being equal to 1, and then 2, 3, et cetera. The last

22
00:01:15,969 --> 00:01:22,662
iteration we do will be with R1 equal 99, and finally R1 will be incremented,

23
00:01:22,662 --> 00:01:28,524
we jump back here. FInd out that R1 and R2 are now the same, because

24
00:01:28,524 --> 00:01:33,250
RI is now 100 and exit the loop. So, there is 100 iterations of this

25
00:01:33,250 --> 00:01:35,940
loop, and each of these instructions does

26
00:01:35,940 --> 00:01:40,990
executes 100 times. This instruction here executes 100

27
00:01:40,990 --> 00:01:44,480
times when we're staying in the loop, and once we, for the 100th time

28
00:01:44,480 --> 00:01:49,690
jump back, it executes once more in order to exit the loop. So this instruction

29
00:01:49,690 --> 00:01:53,060
executes for 101 times, and each time

30
00:01:53,060 --> 00:01:55,980
any of these instructions execute, we're gong

31
00:01:55,980 --> 00:02:01,350
to access the BHT to see whether those instruction is in taken branch or not.
