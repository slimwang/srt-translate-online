1
00:00:00,110 --> 00:00:04,250
The problem of losing parameter bindings is pretty widespread since any

2
00:00:04,250 --> 00:00:07,070
function like setTimeout that takes another function as

3
00:00:07,070 --> 00:00:11,150
a calback may actually call that function differently than you expected.

4
00:00:11,150 --> 00:00:13,930
Callback functions are inherently designed so

5
00:00:13,930 --> 00:00:16,680
that they will be invoked by the system you pass them to.

6
00:00:16,680 --> 00:00:20,380
Thus, you generally have very little control over what the bindings will be for

7
00:00:20,380 --> 00:00:22,830
the parameter of the functions that you passed in.

8
00:00:22,830 --> 00:00:26,000
For this reason, you need to be careful about all the parameter bindings,

9
00:00:26,000 --> 00:00:27,800
including the parameter this,

10
00:00:27,800 --> 00:00:31,470
whenever you pass a function as an input to another function.

11
00:00:31,470 --> 00:00:35,030
Despite the fact that you see an object on the left of the dot when you

12
00:00:35,030 --> 00:00:39,460
pass the function in, this object will not be passed along as the binding for

13
00:00:39,460 --> 00:00:40,710
the parameter this.

14
00:00:40,710 --> 00:00:44,090
When the system you passed it to eventually calls your Callback Function.

15
00:00:44,090 --> 00:00:47,250
One way to pass the callback without complicating the parameter binding

16
00:00:47,250 --> 00:00:50,140
situation is to pass a different function,

17
00:00:50,140 --> 00:00:53,780
one that doesn't receive any parameters at all, including this.

18
00:00:53,780 --> 00:00:57,600
Then you just make room in the body of that function for your custom code.

19
00:00:57,600 --> 00:01:00,480
And inside that area, you reference your method and

20
00:01:00,480 --> 00:01:02,590
then you can do the indication yourself,

21
00:01:02,590 --> 00:01:06,340
passing along whichever bindings you want for the parameter this.

22
00:01:06,340 --> 00:01:10,060
We talked a lot about the keyword this, where it appears within a function.

23
00:01:10,060 --> 00:01:13,080
And some value may have been passed in to be bound to it.

24
00:01:13,080 --> 00:01:17,520
But what would happen if we saw the keyword this appearing in the global scope,

25
00:01:17,520 --> 00:01:19,970
not inside the body of any functions at all?

26
00:01:19,970 --> 00:01:21,130
Taking a step back for

27
00:01:21,130 --> 00:01:24,440
a moment, we should first consider what we expect to happen when we

28
00:01:24,440 --> 00:01:28,500
access parameters outside of the function scope that they were defined within.

29
00:01:28,500 --> 00:01:32,620
What would we expect to happen with this attempt to log the one variable?
