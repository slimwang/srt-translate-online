1
00:00:00,000 --> 00:00:02,000
Now let's generalize.

2
00:00:02,000 --> 00:00:05,000
Let's take the specific solver--we had a specific one

3
00:00:05,000 --> 00:00:08,000
for the pouring problem and one for the missionaries and cannibals.

4
00:00:08,000 --> 00:00:12,000
Let's generalize them. I'm going to call the generalization "shortest<u>path</u>search."

5
00:00:12,000 --> 00:00:16,000
That's a search for the shortest path that reaches a goal.

6
00:00:16,000 --> 00:00:18,000
Let's take our inventory.

7
00:00:18,000 --> 00:00:24,000
The concepts we have to deal with--we've got paths, states, actions, successors.

8
00:00:24,000 --> 00:00:28,000
We have a start state. We have a goal.

9
00:00:28,000 --> 00:00:32,000
Now let's figure out how we're going to represent each of these concepts.

10
00:00:32,000 --> 00:00:36,000
Paths we already had. I don't see any reason to change.

11
00:00:36,000 --> 00:00:40,000
We have [state, action, state...].

12
00:00:40,000 --> 00:00:45,000
Notice we're just doing shortest<u>path</u>search. We're not doing best<u>cost</u>search.

13
00:00:45,000 --> 00:00:47,000
We don't need to put in the total cost in here.

14
00:00:47,000 --> 00:00:50,000
We can just have the action by itself.

15
00:00:50,000 --> 00:00:53,000
We have states, and here the states can be atomic.

16
00:00:53,000 --> 00:00:55,000
We don't have to know anything about the states.

17
00:00:55,000 --> 00:00:58,000
In other words, a state can be anything

18
00:00:58,000 --> 00:01:01,000
that a particular problem wants to deal with.

19
00:01:01,000 --> 00:01:04,000
Shortest<u>path</u>search doesn't have to know about that.

20
00:01:04,000 --> 00:01:06,000
Now, why is that the case?

21
00:01:06,000 --> 00:01:11,000
Because shortest<u>path</u>search can interface with states through these two functions--

22
00:01:11,000 --> 00:01:17,000
through successors and through the goal function and through the start state.

23
00:01:17,000 --> 00:01:21,000
What do I mean by that? The start state is going to be some atomic state.

24
00:01:21,000 --> 00:01:25,000
We don't know anything more about that. Shortest_path doesn't know anything about that.

25
00:01:25,000 --> 00:01:28,000
When we go to use shortest<u>path</u>search for a particular problem,

26
00:01:28,000 --> 00:01:30,000
then we have to specify what a state looks like,

27
00:01:30,000 --> 00:01:33,000
but shortest<u>path</u>search itself doesn't have to know.

28
00:01:33,000 --> 00:01:38,000
All it has to know is that if you give the start state to the successor function--

29
00:01:38,000 --> 00:01:42,000
so successor will be a function which takes a state as input

30
00:01:42,000 --> 00:01:46,000
and returns a dictionary of state-action pairs.

31
00:01:46,000 --> 00:01:51,000
Now, given that initial state that we passed in,

32
00:01:51,000 --> 00:01:53,000
we can generate new states and new actions.

33
00:01:53,000 --> 00:01:56,000
So the actions also are atomic.

34
00:01:56,000 --> 00:01:59,000
Shortest<u>path</u>search doesn't have to know anything about the representation

35
00:01:59,000 --> 00:02:03,000
other than that this is where they come from--from the successor function.

36
00:02:03,000 --> 00:02:05,000
Now, what about the goal?

37
00:02:05,000 --> 00:02:08,000
Well, we could specify an exact state that we're looking for,

38
00:02:08,000 --> 00:02:10,000
but sometimes we're looking for multiple states.

39
00:02:10,000 --> 00:02:14,000
We could specify a set of states, but sometimes the set of states is really big.

40
00:02:14,000 --> 00:02:17,000
There's lots of states that satisfy the goal.

41
00:02:17,000 --> 00:02:20,000
Instead, let's have the goal be a function.

42
00:02:20,000 --> 00:02:23,000
Its's a function. When you pass it a state it returns a boolean.

43
00:02:23,000 --> 00:02:26,000
True or False? Is that the goal?

44
00:02:26,000 --> 00:02:30,000
With that now we're ready to specify shortest<u>path</u>search.

45
00:02:30,000 --> 00:02:33,000
Shortest<u>path</u>search is going to be a function.

46
00:02:33,000 --> 00:02:36,000
It's going to take some inputs, and it's going to return a path,

47
00:02:36,000 --> 00:02:40,000
and return failure as a path if it can't find a solution.

48
00:02:40,000 --> 00:02:44,000
Now the question is out of this inventory, which of these things do we have

49
00:02:44,000 --> 00:02:49,000
to pass into shortest<u>path</u>search to allow us to solve a problem?

50
00:02:49,000 --> 99:59:59,999
Check all those that apply.
