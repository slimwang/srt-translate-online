1
00:00:00,000 --> 00:00:03,000
Now let's look at these calls and try to figure out what the dependencies are among them.

2
00:00:03,000 --> 00:00:06,000
First and most obviously, nothing is going to succeed,

3
00:00:06,000 --> 00:00:09,000
no file system call is going to succeed, until we've mounted the file system.

4
00:00:09,000 --> 00:00:12,000
Similarly, no file system call will succeed after we've unmounted it.

5
00:00:12,000 --> 00:00:14,000
So we want to be careful with mount and unmount.

6
00:00:14,000 --> 00:00:17,000
We don't want to just freely mix those into our stream of random API calls that we're making

7
00:00:17,000 --> 00:00:20,000
because if we do that, we're going to be mounting and unmounting the thing so often

8
00:00:20,000 --> 00:00:22,000
that the file system code is never going to get into the kind of steady state

9
00:00:22,000 --> 00:00:26,000
that we're going to need it to be in in order to do effective random testing of it.

10
00:00:26,000 --> 00:00:30,000
So similarly, some of the other calls in a file system, like reading and writing to a file,

11
00:00:30,000 --> 00:00:32,000
are only going to succeed if the file has been opened.

12
00:00:32,000 --> 00:00:35,000
And so if we do something silly like providing completely random arguments

13
00:00:35,000 --> 00:00:40,000
to open read and write, then the odds of us actually successfully reading or writing

14
00:00:40,000 --> 00:00:42,000
to an open file are going to be extremely low.

15
00:00:42,000 --> 00:00:44,000
So we're going to have to do something more systematic.

16
00:00:44,000 --> 00:00:46,000
We're probably going to have to do something like open a file

17
00:00:46,000 --> 00:00:48,000
and keep track of the fact that it's open

18
00:00:48,000 --> 00:00:50,000
so we can randomly generate read and write calls into it.

19
00:00:50,000 --> 00:00:52,000
There are probably some other dependencies as well.

20
00:00:52,000 --> 00:00:55,000
So what we're seeing is that if we want to do effective random testing of a file system,

21
00:00:55,000 --> 00:00:57,000
we're going to need to track these dependencies,

22
00:00:57,000 --> 00:01:01,000
at least in some rudimentary fashion, in order to issue a sequence of API calls

23
00:01:01,000 --> 00:01:03,000
that's going to do reasonably effective random testing of a file system.

24
00:01:03,000 --> 00:01:07,000
The second issue that starts to come up as we perform random testing of APIs

25
00:01:07,000 --> 00:01:11,000
is that our tests--that is to say, a sequence of file system operations in this example--

26
00:01:11,000 --> 00:01:13,000
are going to become quite large, and that's going to beg the question,

27
00:01:13,000 --> 00:01:15,000
how are those tests represented?

28
00:01:15,000 --> 00:01:17,000
In the examples we've seen so far,

29
00:01:17,000 --> 00:01:20,000
test cases haven't had any sort of official existence of their own.

30
00:01:20,000 --> 00:01:23,000
What we've rather done is mix the software under test

31
00:01:23,000 --> 00:01:26,000
and the test driver code in a single piece of Python code.

32
00:01:26,000 --> 00:01:30,000
So now if we do this, what's the actual form taken by the test cases?

33
00:01:30,000 --> 00:01:34,000
And the answer has to be that those test cases only exist as ephemeral objects in memory.

34
00:01:34,000 --> 00:01:36,000
For most testing purposes, that's fine.

35
00:01:36,000 --> 00:01:38,000
The driver code creates the test cases, passes them to the software under test,

36
00:01:38,000 --> 00:01:41,000
looks at the results, and keeps going until it finishes.

37
00:01:41,000 --> 00:01:43,000
There are a couple cases in which that's not so good.

38
00:01:43,000 --> 00:01:46,000
One of them is where we find a particular test case that makes our system fail

39
00:01:46,000 --> 00:01:49,000
and we'd like to save off that test case for later use in regression testing.

40
00:01:49,000 --> 00:01:53,000
And so what we end up having to do to make that work is writing some separate code

41
00:01:53,000 --> 00:01:56,000
which also lives in the Python program to load and save test cases.

42
00:01:56,000 --> 00:02:01,000
And so now this module is going to be doing file AO in order to load and save test cases,

43
00:02:01,000 --> 00:02:04,000
and most likely those test cases are going to be saved as text files or something.

44
00:02:04,000 --> 00:02:08,000
So for example, if we wanted to represent a sequence of file system calls as a text file,

45
00:02:08,000 --> 00:02:12,000
we could just have the word mkdir followed by whatever the arguments to mkdir are,

46
00:02:12,000 --> 00:02:16,000
and then the loading and saving code would need to either parse those files

47
00:02:16,000 --> 00:02:19,000
in order to create a test case in memory or unparse them--

48
00:02:19,000 --> 00:02:22,000
that is to say, pretty print them to disk in order to save a test case.

49
00:02:22,000 --> 00:02:24,000
And so there's a couple advantages of doing this.

50
00:02:24,000 --> 00:02:27,000
First of all, as I was saying, it facilitates regression testing.

51
00:02:27,000 --> 00:02:29,000
And the second reason is that it's often the case

52
00:02:29,000 --> 00:02:31,000
that when random tests become extremely large,

53
00:02:31,000 --> 00:02:34,000
we need to turn them into first class objects--that is to say, objects living on disk

54
00:02:34,000 --> 00:02:37,000
using some sort of a save and load routine--in order to perform test case reduction.

55
00:02:37,000 --> 00:02:41,000
Test case reduction is a piece of technology that's very often combined with random testing,

56
00:02:41,000 --> 00:02:44,000
and what it is and what it does is takes a large test case

57
00:02:44,000 --> 00:02:48,000
that makes the software under test fail and turns it into a smaller test case

58
00:02:48,000 --> 00:02:50,000
that still makes the software under test fail.

59
00:02:50,000 --> 00:02:52,000
We'll look at more detail and we'll look at test case reduction in more detail

60
00:02:52,000 --> 00:02:55,000
later on in this course. Now what I'd like to do...
