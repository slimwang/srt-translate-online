1
00:00:00,420 --> 00:00:02,770
When you don't have a clear plan for
debugging your issues,

2
00:00:02,770 --> 00:00:06,610
you can waste a ton of time wandering
aimlessly through your code.

3
00:00:06,610 --> 00:00:10,180
I've been there before, and it sucks
the joy right out of programming.

4
00:00:10,180 --> 00:00:12,250
But it doesn't have to be this way.

5
00:00:12,250 --> 00:00:16,900
A better approach to debugging is
having a consistent debugging process.

6
00:00:16,900 --> 00:00:19,910
First, you want to
reproduce the problem.

7
00:00:19,910 --> 00:00:24,320
The more complex the problem is,
the more important this step becomes.

8
00:00:24,320 --> 00:00:27,160
Being able to reproduce the problem
ensures that you understand

9
00:00:27,160 --> 00:00:28,878
the reasons which led to it.

10
00:00:28,878 --> 00:00:32,700
And sometimes it's as easy as clicking
a button for your program to crash, but

11
00:00:32,700 --> 00:00:34,390
other times it may take
running your app for

12
00:00:34,390 --> 00:00:36,520
thirty minutes before
the problem occurs.

13
00:00:36,520 --> 00:00:41,220
The point is, you can't reproduce a
problem if you don't understand it, and

14
00:00:41,220 --> 00:00:43,840
if you don't understand it,
then you can't fix it.

15
00:00:43,840 --> 00:00:48,010
Which leads to the second step,
gathering debug information.

16
00:00:48,010 --> 00:00:48,790
Now this is crucial.

17
00:00:48,790 --> 00:00:53,010
But you may be wondering what type of
information are you looking for exactly?

18
00:00:53,010 --> 00:00:54,550
Well it depends on the problem,

19
00:00:54,550 --> 00:00:59,120
but typically you want to start by
examining the program state or logs.

20
00:00:59,120 --> 00:01:02,740
Now the program state is all the stored
information that you have at a given

21
00:01:02,740 --> 00:01:05,230
point in your program's execution.

22
00:01:05,230 --> 00:01:09,430
For instance, when the error occurred,
what is the value of a variable?

23
00:01:09,430 --> 00:01:11,510
What kind of error are we looking at?

24
00:01:11,510 --> 00:01:14,680
Maybe it's in EXC, BAD_ACCESS,

25
00:01:14,680 --> 00:01:18,800
maybe it's a off by one problem,
it could be anything.

26
00:01:18,800 --> 00:01:21,460
What line of code caused the error?

27
00:01:21,460 --> 00:01:25,250
Or what functions or
methods led to the error?

28
00:01:25,250 --> 00:01:27,750
This is the information that you'll
want to know when you're debugging,

29
00:01:27,750 --> 00:01:31,000
and ExcCode reveals this
to us through its tools.

30
00:01:31,000 --> 00:01:35,340
And thankfully there are a bunch of
tools, and they're really easy to use.

31
00:01:35,340 --> 00:01:38,650
Now the hope is, of course, is that with
all the information that you gather,

32
00:01:38,650 --> 00:01:42,340
you can form a strong hypothesis
about what went wrong.

33
00:01:42,340 --> 00:01:45,030
But as you may already know,
having an hypothesis and

34
00:01:45,030 --> 00:01:49,460
actually testing that hypothesis,
are two entirely different tasks.

35
00:01:49,460 --> 00:01:53,990
If you're certain about what went wrong,
then you can go ahead and try to fix it.

36
00:01:53,990 --> 00:01:57,240
But if you're unsure at all,
then you should probably go back and

37
00:01:57,240 --> 00:01:59,560
gather more information
before trying your fix.

38
00:02:00,660 --> 00:02:01,690
In some cases however,

39
00:02:01,690 --> 00:02:05,990
trying a fix that you're not 100%
sure about isn't a bad thing.

40
00:02:05,990 --> 00:02:07,820
Even if it doesn't fix the problem,

41
00:02:07,820 --> 00:02:11,770
it could reveal more information
about why and what is happening.

42
00:02:11,770 --> 00:02:14,620
The trick is to make sure that
you maximize the amount of

43
00:02:14,620 --> 00:02:16,800
information you gain
per fix that you try.

44
00:02:17,875 --> 00:02:21,815
If you find yourself making small
changes and your program keeps crashing,

45
00:02:21,815 --> 00:02:26,265
or it doesn't behave like you expect,
then stop for a moment, pause,

46
00:02:26,265 --> 00:02:30,615
collect your thoughts, and make sure
that you really understand the problem.

47
00:02:30,615 --> 00:02:32,935
Once you do,
you can make a more informed fix and

48
00:02:32,935 --> 00:02:35,420
try to reproduce the problem again.

49
00:02:35,420 --> 00:02:36,670
And if your fix works,

50
00:02:36,670 --> 00:02:39,235
then when you try to reproduce
the problem it won't happen.

51
00:02:39,235 --> 00:02:42,210
But if the problem still occurs
then you'll have to go back and

52
00:02:42,210 --> 00:02:45,260
start in the same debug spin cycle.

53
00:02:45,260 --> 00:02:47,020
Now this can be tough,
but it's expected.

54
00:02:47,020 --> 00:02:51,110
It often takes multiple iterations
of this full debugging process to

55
00:02:51,110 --> 00:02:53,580
ultimately figure out
what your problem is.

56
00:02:53,580 --> 00:02:55,010
So let's review.

57
00:02:55,010 --> 00:02:57,200
The debugging process is as follows.

58
00:02:57,200 --> 00:02:59,940
First, reproduce the problem.

59
00:02:59,940 --> 00:03:04,270
Then gather any debugging information
you can about the problem.

60
00:03:04,270 --> 00:03:07,670
Once you have enough information,
form a hypothesis about what went wrong.

61
00:03:08,780 --> 00:03:10,360
Then determine an implement affix.

62
00:03:11,460 --> 00:03:14,570
Last, test the fix by trying to
reproduce the problem again.

63
00:03:14,570 --> 00:03:18,320
If you stay true to this method, and
you know which tools are available,

64
00:03:18,320 --> 00:03:21,360
then debugging isn't so
much of a headache anymore.

65
00:03:21,360 --> 00:03:23,750
It's almost like solving
a code mystery each time.

66
00:03:23,750 --> 00:03:27,110
If you treat it that way then it can
be a much more pleasant experience

67
00:03:27,110 --> 00:03:27,870
when you're programming.
