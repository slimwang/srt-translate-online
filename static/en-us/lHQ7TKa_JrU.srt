1
00:00:00,000 --> 00:00:03,629
From the code example in the
documentation you'll notice that the

2
00:00:03,629 --> 00:00:09,590
DownloadFilesTask class extends async
task, the name is followed by additional

3
00:00:09,590 --> 00:00:10,739
class games in brackets

4
00:00:10,740 --> 00:00:14,639
remember that the brackets indicate that
there are three generic parameters for

5
00:00:14,639 --> 00:00:19,470
the async task. We first learned about
generics when we were building the Miwok

6
00:00:19,470 --> 00:00:23,880
app we created an ArrayList of
vocabulary words and displayed them

7
00:00:23,880 --> 00:00:28,619
using a custom ArrayAdapter the
ArrayList and ArrayAdapter classes

8
00:00:28,619 --> 00:00:35,219
except generic type parameters. The E and T
are placeholders for the specific object

9
00:00:35,219 --> 00:00:40,200
data types that we want to use. By using
generics we can rely on the Java

10
00:00:40,200 --> 00:00:44,760
language to ensure that the right type
of data is being passed into and out of

11
00:00:44,760 --> 00:00:47,489
methods. For example,

12
00:00:47,489 --> 00:00:52,260
whatever data type E represents, it will be
the required data type for input to the

13
00:00:52,260 --> 00:00:56,309
ArrayList add method to add another
element to the list.

14
00:00:56,309 --> 00:01:00,959
If you call the get method at a certain
index an object of type E will be

15
00:01:00,960 --> 00:01:01,980
returned,

16
00:01:01,980 --> 00:01:06,750
this is called type safety, the Java
language enforces type safety by

17
00:01:06,750 --> 00:01:11,100
showing errors if you're passing on the
wrong data type, or if you store the

18
00:01:11,100 --> 00:01:13,890
return value of method in the wrong data
type.

19
00:01:13,890 --> 00:01:18,720
You won't be able to run your app until
you fix these errors. When we use this

20
00:01:18,720 --> 00:01:23,640
generic class, we swapped the generic E
placeholder for a specific data type

21
00:01:23,640 --> 00:01:28,110
like the string class to have an ArrayList 
of strings we replace every where

22
00:01:28,110 --> 00:01:35,340
there used to be an E with a string. As a
result we can only add objects of the

23
00:01:35,340 --> 00:01:37,500
string data type to the list.

24
00:01:37,500 --> 00:01:42,150
If we request an item at a specific
index, the ArrayList will return a string

25
00:01:42,150 --> 00:01:45,900
data type. in the MeWork app

26
00:01:45,900 --> 00:01:48,899
we wanted to use a custom data type that
was a little more complex than the

27
00:01:48,899 --> 00:01:54,540
string object. Recall that we created a
custom word class to hold the English

28
00:01:54,540 --> 00:02:00,119
and Miwok translations for a word to
form a list we specified the generic E

29
00:02:00,119 --> 00:02:05,000
parameter to be a word object so we
would have an ArrayList of words,

30
00:02:05,159 --> 00:02:09,660
then when we added to retrieve an entry
from the ArrayList we could ensure

31
00:02:09,660 --> 00:02:13,329
that it was a word object, then we could
call a specific method

32
00:02:13,330 --> 00:02:17,620
on the word object to extract out
English for Miwok translations that

33
00:02:17,620 --> 00:02:21,880
would not be possible if the get method
return a string or a different object

34
00:02:21,880 --> 00:02:23,260
data type.

35
00:02:23,260 --> 00:02:27,609
Similarly, in the Miwok app we use
generics to create a custom ArrayAdapter

36
00:02:27,610 --> 00:02:32,920
of words, we could expect each item in
the adapters data set to be a word

37
00:02:32,920 --> 00:02:33,820
object.

38
00:02:33,820 --> 00:02:39,340
Now that we've reviewed generics, let's
go back to the async task documentation.
