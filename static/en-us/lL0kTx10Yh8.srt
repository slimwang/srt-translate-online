1
00:00:00,280 --> 00:00:01,200
Before we do a quiz,

2
00:00:01,199 --> 00:00:05,500
can we talk about why we care about this
topics, why would our student use them?

3
00:00:05,500 --> 00:00:07,750
>> Oops,
I really shouldintroduce Shelly.

4
00:00:07,750 --> 00:00:08,369
Hi, Shelly.

5
00:00:08,369 --> 00:00:09,469
>> Hi, Dan.

6
00:00:09,470 --> 00:00:11,790
>> Shelly, is going to be
helping teach the class and

7
00:00:11,789 --> 00:00:14,279
providing you quizzes along the way.

8
00:00:14,279 --> 00:00:18,769
Doing these problems is try
the best way to learn the material.

9
00:00:18,769 --> 00:00:22,960
So Shelly, let's talk about problem
solving in game playing and

10
00:00:22,960 --> 00:00:24,929
provide some context for this lesson.

11
00:00:25,940 --> 00:00:30,590
Hopefully, you all are like me and love
to play strategy games, like checkers,

12
00:00:30,589 --> 00:00:33,590
or isolation, or Othello, or chess.

13
00:00:33,590 --> 00:00:36,600
Amazingly, we can use
the same algorithms,

14
00:00:36,600 --> 00:00:39,939
even the same code,
to make the computer player for

15
00:00:39,939 --> 00:00:44,429
a game that's as simple as tic-tac-toe,
or as complex as chess.

16
00:00:44,429 --> 00:00:45,420
In principle,

17
00:00:45,420 --> 00:00:50,010
the only thing that is different
between these games is the code for

18
00:00:50,009 --> 00:00:55,000
generating all the next possible moves,
as well as the user interface.

19
00:00:55,000 --> 00:00:57,750
Minimax is our primary algorithm

20
00:00:57,750 --> 00:01:01,130
to figure out what is
the best move at every turn.

21
00:01:01,130 --> 00:01:04,340
Alpha beta pruning helps
optimize this algorithm,

22
00:01:04,340 --> 00:01:05,570
making the agent play quicker.

23
00:01:06,709 --> 00:01:11,049
>> I see, so tic-tac-toe and chess
are both deterministic games, right?

24
00:01:11,049 --> 00:01:13,230
So the outcome of each move is known.

25
00:01:13,230 --> 00:01:14,299
Can we also use Minimax for

26
00:01:14,299 --> 00:01:17,459
games that have an element
of chance like Backgammon?

27
00:01:17,459 --> 00:01:18,959
>> That's a good question.

28
00:01:18,959 --> 00:01:20,439
For those types of games,

29
00:01:20,439 --> 00:01:24,000
we use a modification of
Minimax called Expectimax.

30
00:01:24,000 --> 00:01:27,090
It considers all the possible outcomes,
and

31
00:01:27,090 --> 00:01:30,115
chooses the one with
the maximum expected return.

32
00:01:30,114 --> 00:01:34,125
This is assuming the opponent is
making the best moves available.

33
00:01:34,125 --> 00:01:38,784
Again, once we have it, this expected
max algorithm can be used for

34
00:01:38,784 --> 00:01:40,174
many different games.

35
00:01:40,174 --> 00:01:40,694
>> Okay, great.

36
00:01:40,694 --> 00:01:42,914
I think I see where we're going now.

37
00:01:42,915 --> 00:01:43,585
>> Good.

38
00:01:43,584 --> 00:01:45,224
Let's get back to that
challenge question.

