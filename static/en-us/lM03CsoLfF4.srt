1
00:00:00,012 --> 00:00:04,420
So now we've gone through the basics of javascript syntax: structuring and

2
00:00:04,432 --> 00:00:09,070
interacting with JSON data, and requesting data from a server. Now, we need to

3
00:00:09,082 --> 00:00:13,695
talk about how to interface to the browser. More specifically, we need to talk

4
00:00:13,707 --> 00:00:17,865
about the DOM, or document object model. The DOM is an interface to the

5
00:00:17,877 --> 00:00:19,709
structure of an HTML.document,

6
00:00:19,717 --> 00:00:25,128
for example, the head or body element. The DOM allows us to access and modify

7
00:00:25,140 --> 00:00:29,925
our HTML document dynamically, using Javascript. Our game is primarily going to

8
00:00:29,937 --> 00:00:34,706
exist within a single element, the canvas, which we'll get into later. But what

9
00:00:34,718 --> 00:00:39,545
this means is that we won't have a lot of reason to heavily access the DOM.

10
00:00:39,551 --> 00:00:44,406
In fact we're only going to need a few things. So let's take a look at a quick

11
00:00:44,418 --> 00:00:47,507
example. Let's say you want to validate whether a user has entered a valid

12
00:00:47,507 --> 00:00:54,206
password into an input field. Here's how you would do that using the DOM API in

13
00:00:54,218 --> 00:00:59,187
Javascript. You can see the basic HTML here with the form and the password

14
00:00:59,199 --> 00:01:03,967
input and the submit button, and we have a script down here where we start

15
00:01:03,979 --> 00:01:09,206
executing our javascript. First, we have this document.getElementById method.

16
00:01:09,316 --> 00:01:13,915
What this does is grab a DOM element of the given id. In this case, it's

17
00:01:13,927 --> 00:01:19,310
exampleForm, which is right here, so we would grab this entire form. When

18
00:01:19,322 --> 00:01:24,385
it's submitted, we run this function in here. Now, you don't really need to

19
00:01:24,397 --> 00:01:29,610
worry about the passwordRegex too much. We're interested in this part down

20
00:01:29,622 --> 00:01:34,760
here. Now if the password doesn't match, then we create a new "p" tag element,

21
00:01:34,872 --> 00:01:40,217
assuming it doesn't already exist. We check if it exists by again using the

22
00:01:40,229 --> 00:01:45,863
document.getElementById method and checking for the ID "notify". If it doesn't

23
00:01:45,875 --> 00:01:50,577
exist we use the document.createElement method specified at "p" tag. This

24
00:01:50,577 --> 00:01:56,227
parameter is just the name of a type of element. For example p or form or

25
00:01:56,239 --> 00:02:02,058
canvas. Now we set the text content of that p tag to this bit here and we set

26
00:02:02,070 --> 00:02:08,001
the ID attribute to notify. That way, if we submit multiple times, we don't

27
00:02:08,013 --> 00:02:14,236
simply create a new p tag every single time. Finally, we grab a reference to the

28
00:02:14,248 --> 00:02:19,479
body tag, since the body element has an ID of body we can do that, and we

29
00:02:19,491 --> 00:02:24,282
append "notify" to the body. Now if we look at this in our browser, we can see

30
00:02:24,294 --> 00:02:28,985
we have an input form with a submit button and you can see our basic HTML down

31
00:02:28,997 --> 00:02:34,058
here. However, if we submit an incorrect password -- press submit -- we can see that

32
00:02:34,070 --> 00:02:38,767
this pops up right here, which is the text that we set our p tag to. You can

33
00:02:38,779 --> 00:02:43,729
also see that this p tag was created down here. With an idea of notify and the

34
00:02:43,741 --> 00:02:48,840
correct text. You'll also see that if we keep pressing Submit again, more p tags

35
00:02:48,852 --> 00:02:51,621
don't get created, since we made that check.
