1
00:00:00,000 --> 00:00:04,000
Now that we have seen how delta debugging works on paper,

2
00:00:04,000 --> 00:00:08,000
we should actually go and implement it as a Python program.

3
00:00:08,000 --> 00:00:11,000
Here we start implementing the delta debugging function.

4
00:00:11,000 --> 00:00:15,000
Formally, this is the delta debugging algorithm for minimizing,

5
00:00:15,000 --> 00:00:19,000
so we call it ddmin for delta debugging minimizing.

6
00:00:19,000 --> 00:00:23,000
It takes an input, and it takes a string as a parameter.

7
00:00:23,000 --> 00:00:26,000
This is the string to be simplified.

8
00:00:26,000 --> 00:00:31,000
We could make the ddmin even more generic by also passing the test function as a parameter.

9
00:00:31,000 --> 00:00:36,000
Then we could use it for arbitrary tests in arbitrary context.

10
00:00:36,000 --> 00:00:40,000
For this exercise, however, we'll simply use the hardwire testing function,

11
00:00:40,000 --> 00:00:42,000
which you already have seen.

12
00:00:42,000 --> 00:00:47,000
And we start with the assertion that, again, testing the entire input should fail.

13
00:00:47,000 --> 00:00:50,000
We have a variable n which sets granularity.

14
00:00:50,000 --> 00:00:53,000
As described before, this is initially 2.

15
00:00:53,000 --> 00:00:59,000
We now set up a while loop, which loops while the input still has at least two characters.

16
00:00:59,000 --> 00:01:02,000
If it has one character, then there's nothing left to simplify.

17
00:01:02,000 --> 00:01:07,000
We define the length of the individual subset by simply dividing the length of the entire input

18
00:01:07,000 --> 00:01:09,000
by occurring granularity.

19
00:01:09,000 --> 00:01:11,000
We have a loop guard in here.

20
00:01:11,000 --> 00:01:14,000
This variable will be set as soon as some tests fail.

21
00:01:14,000 --> 00:01:19,000
The variable start is a cursor over the input which tells us where to start

22
00:01:19,000 --> 00:01:22,000
chopping away individual parts of the input.

23
00:01:22,000 --> 00:01:24,000
Here precisely we do the chopping.

24
00:01:24,000 --> 00:01:27,000
Start tells us where to start chopping away things.

25
00:01:27,000 --> 00:01:30,000
That is, everything up to start should be included in our test.

26
00:01:30,000 --> 00:01:34,000
Then beginning from start plus the length of the subset,

27
00:01:34,000 --> 00:01:38,000
we also want this to be included in our testing input.

28
00:01:38,000 --> 00:01:44,000
What's missing in here, of course, is a string starting from start with the length subset_length.

29
00:01:44,000 --> 00:01:48,000
This is what we test, and we check whether the result is fail.

30
00:01:48,000 --> 00:01:54,000
That is, if after chopping away a subset the test fails, what do we do then?

31
00:01:54,000 --> 00:01:57,000
We set our input to the complement.

32
00:01:57,000 --> 00:02:01,000
That is, we keep on working with a now simplified string.

33
00:02:01,000 --> 00:02:04,000
We decrease the granularity by 1 but don't let it fall below 2,

34
00:02:04,000 --> 00:02:08,000
and we set the variable some complement is failing to true,

35
00:02:08,000 --> 00:02:11,000
because we need this to step out of this loop,

36
00:02:11,000 --> 00:02:13,000
which we do right away.

37
00:02:13,000 --> 00:02:17,000
If the test has not failed, then we have to proceed to the next subset,

38
00:02:17,000 --> 00:02:21,000
which we get by simply increasing our start cursor,

39
00:02:21,000 --> 00:02:24,000
which now points to the beginning of the next subset.

40
00:02:24,000 --> 00:02:29,000
This is something we do until we have reached the end of our string.

41
00:02:29,000 --> 00:02:32,000
Now, at this point we have gone through all the subsets

42
00:02:32,000 --> 00:02:35,000
and either some complement has failed.

43
00:02:35,000 --> 00:02:38,000
Then this variable is true. So far so good.

44
00:02:38,000 --> 00:02:41,000
We simply keep on working with these new reduced, simplified inputs

45
00:02:41,000 --> 00:02:45,000
and a decreased granularity.

46
00:02:45,000 --> 00:02:50,000
However, all of these tests pass. What should we do?

47
00:02:50,000 --> 00:02:53,000
Remember the third step in the delta debugging algorithm.

48
00:02:53,000 --> 00:02:57,000
We now need to increase the granularity but must make sure it doesn't get

49
00:02:57,000 --> 00:03:00,000
over the length of the total string.

50
00:03:00,000 --> 00:03:02,000
I will leave it to you as a programming exercise to complete this code. Over to you.
