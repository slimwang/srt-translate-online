1
00:00:00,120 --> 00:00:03,800
Requiring users to use strong passwords
can be implemented in different ways.

2
00:00:03,800 --> 00:00:06,500
You can check for it only the client
side with JavaScript, but

3
00:00:06,500 --> 00:00:07,990
that would be very insecure.

4
00:00:07,990 --> 00:00:11,200
As the client could work around it if
they figured out a way to mimic the HTTP

5
00:00:11,200 --> 00:00:13,000
request sent from the browser.

6
00:00:13,000 --> 00:00:16,309
If we make sure that an insecure
password cannot be saved in the server,

7
00:00:16,309 --> 00:00:19,500
then we effectively prevent our
user from making weak passwords.

8
00:00:19,500 --> 00:00:22,410
But they won't figure that out until
the server responds with an error.

9
00:00:22,410 --> 00:00:24,460
We could implement a solution
that is user friendly and

10
00:00:24,460 --> 00:00:26,330
secure, however, by doing both.

11
00:00:26,330 --> 00:00:29,820
Informing the user on the client side
if their password is strong or not.

12
00:00:29,820 --> 00:00:33,610
And then preventing weak passwords from
being stored on the server site as well.

13
00:00:33,610 --> 00:00:36,980
Securely storing passwords has to
implemented on a sever site in

14
00:00:36,980 --> 00:00:39,430
the database where the passwords reside.

15
00:00:39,430 --> 00:00:42,110
And protection from man in the middle
attacks has to implemented on

16
00:00:42,110 --> 00:00:43,020
both sides.

17
00:00:43,020 --> 00:00:45,630
Since sensitive information can
be coming from both the client

18
00:00:45,630 --> 00:00:46,830
and the server.

19
00:00:46,830 --> 00:00:49,650
Let's see in the next video how
using third party authentication

20
00:00:49,650 --> 00:00:51,590
simplifies implementing
these concerns for us.
