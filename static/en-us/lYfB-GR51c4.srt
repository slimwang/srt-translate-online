1
00:00:01,080 --> 00:00:02,460
Returning once again to our,

2
00:00:02,460 --> 00:00:07,150
our window diagram. Now let's look at the third compartment, this is the one for

3
00:00:07,150 --> 00:00:11,950
operations. Once again, there's optional visibility, using the same symbols we

4
00:00:11,950 --> 00:00:17,200
had before. There's the name. There may be a return type,

5
00:00:17,200 --> 00:00:20,520
if the operation returns some value. It's not shown in, in these particular

6
00:00:20,520 --> 00:00:25,710
examples. Then there's a list of parameters. Just like you would have,

7
00:00:25,710 --> 00:00:29,700
if you were describing some method within an object oriented language.

8
00:00:29,700 --> 00:00:36,810
The parameter list includes a name of the parameter. It's type. You

9
00:00:36,810 --> 00:00:42,420
may express a default value. And you may also indicate, whether the particular.

10
00:00:43,720 --> 00:00:48,060
Parameter, is an input parameter, an output parameter or an in,

11
00:00:48,060 --> 00:00:52,370
out parameter. In, out parameters are those in which the value can come in,

12
00:00:52,370 --> 00:00:57,800
and a different value can be returned. Those kinds of param adjectives in,

13
00:00:57,800 --> 00:01:02,390
out and in out are not shown in this particular example. In addition to

14
00:01:02,390 --> 00:01:07,550
the parameters in the operations section, you can give some properties. Some of

15
00:01:07,550 --> 00:01:12,390
those properties are expressed within the braces, like we've seen before. For

16
00:01:12,390 --> 00:01:16,310
example, you can indicate that a particular operation is a query operation.

17
00:01:16,310 --> 00:01:22,910
That is, it's only providing information about some existing attributes

18
00:01:22,910 --> 00:01:28,190
that in, within the class. You can, there's, there's, properties to

19
00:01:28,190 --> 00:01:32,690
describing concurrency. there's, there's properties describing whether or

20
00:01:32,690 --> 00:01:36,230
not this particular operation is abstract, as would be

21
00:01:37,610 --> 00:01:42,960
seen in an abstract method in obscuring language. And you can also show,

22
00:01:42,960 --> 00:01:48,330
that a particular operation has Class Scope. That's shown by an underline on

23
00:01:48,330 --> 00:01:55,380
the operation name, and what class scope means, is that it's not a operation

24
00:01:55,380 --> 00:02:00,730
of particular instance, but a operation for the class as a whole.

25
00:02:00,730 --> 00:02:06,900
For example, let's say you wanted to know how many instances of vehicles,

26
00:02:06,900 --> 00:02:13,000
you had already instantiated. You can't query any particular instance and

27
00:02:13,000 --> 00:02:19,140
ask it about other instances. Instead you query the class, using

28
00:02:19,140 --> 00:02:24,710
a Class Scoped operation, and the class

29
00:02:24,710 --> 00:02:27,760
if you've implemented things correctly can provide the answer back to you.
