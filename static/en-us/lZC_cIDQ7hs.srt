1
00:00:00,450 --> 00:00:03,290
Now that we have some groovy under our
belts, we're in a much better position

2
00:00:03,290 --> 00:00:05,880
to understand what's going on
inside of Gradle build script.

3
00:00:06,939 --> 00:00:08,900
Just like a closure can
have a delegate object,

4
00:00:08,900 --> 00:00:12,870
the entire build script
delegates to a project object.

5
00:00:12,870 --> 00:00:15,700
All the keywords in the Gradle DSL
are properties of, or

6
00:00:15,700 --> 00:00:17,530
methods on the project object.

7
00:00:18,620 --> 00:00:23,320
For instance, the project object has a
method called task for declaring tasks.

8
00:00:23,320 --> 00:00:25,370
It accepts the name of a new task and

9
00:00:25,370 --> 00:00:28,670
optionally a configuration closure
which we'll talk about shortly.

10
00:00:28,670 --> 00:00:33,250
If we run Gradle tasks to have a look at
all the tasks that are currently defined

11
00:00:33,250 --> 00:00:36,730
we see under other tasks my
task one that we just defined.

12
00:00:36,730 --> 00:00:38,680
All right.
Everything's working so far.

13
00:00:38,680 --> 00:00:42,370
Because the entire build script
delegates to the project object,

14
00:00:42,370 --> 00:00:45,680
we can actually go ahead and leave
that off when we're declaring tasks.

15
00:00:45,680 --> 00:00:49,560
Also, because Groovy Syntax is awesome,
we can knock of those parentheses as

16
00:00:49,560 --> 00:00:51,610
well, since this is just
calling a function.

17
00:00:51,610 --> 00:00:54,570
Now this next part is tricky.

18
00:00:54,570 --> 00:00:58,571
Gradle actually reaches into
Groovy's execution model.

19
00:00:58,571 --> 00:01:01,147
And uses an advanced Groovy feature
called an abstract syntax tree

20
00:01:01,147 --> 00:01:01,885
transformation.

21
00:01:01,885 --> 00:01:04,959
The upshot of which is,
you can knock off the quotes as well.

22
00:01:04,959 --> 00:01:07,200
This is not a thing you need
to understand super deeply,

23
00:01:07,200 --> 00:01:11,000
however we do have more information in
the demo code provided with the class.

24
00:01:11,000 --> 00:01:15,050
Now that we have declared a task, we can
also configure some properties on it.

25
00:01:15,050 --> 00:01:19,160
So, we can give myTask4 a description,
and we can give it a group.

26
00:01:19,160 --> 00:01:22,830
If we then run Gradle tasks again,
this is what we see.

27
00:01:22,830 --> 00:01:25,770
Here's the group up here,
and here's the description.

28
00:01:25,770 --> 00:01:28,290
The most important property
of a task is the list of

29
00:01:28,290 --> 00:01:30,460
actions the task will perform.

30
00:01:30,460 --> 00:01:34,720
Instead of setting the actions property
directly, we add a closure to the end of

31
00:01:34,720 --> 00:01:38,140
list of actions to perform
using the do last method.

32
00:01:38,140 --> 00:01:40,430
So, let's give task four a try.

33
00:01:40,430 --> 00:01:44,570
Gradle helpfully tells us that it ran
myTask4, and that it went ahead and

34
00:01:44,570 --> 00:01:46,110
printed the statement.

35
00:01:46,110 --> 00:01:49,190
There's a few other ways to add
closures to that list of actions for

36
00:01:49,190 --> 00:01:50,880
the task to perform.

37
00:01:50,880 --> 00:01:54,740
We can add doFirst to add a task
on to the front of a list.

38
00:01:54,740 --> 00:01:58,260
We can also use the left shift operator
which does exactly the same thing as

39
00:01:58,260 --> 00:01:59,220
doLast.

40
00:01:59,220 --> 00:02:02,110
This is nice because it allows us
to use this very compact syntax,

41
00:02:02,110 --> 00:02:04,750
and this is what you'll see most
often when people are declaring,

42
00:02:04,750 --> 00:02:06,780
very simple tasks in Gradle.

43
00:02:06,780 --> 00:02:08,449
We can also declare a task, and

44
00:02:08,449 --> 00:02:11,310
then immediately pass it a closure
to execute as its action.

45
00:02:11,310 --> 00:02:12,974
This is an extremely common pattern,

46
00:02:12,974 --> 00:02:15,919
and it's probably the most common way
that people declare simple Gradle tasks.

47
00:02:17,120 --> 00:02:20,760
Instead of configuring a task line
by line as we were doing previously,

48
00:02:20,760 --> 00:02:24,980
we can also pass a configuration
closure when we're defining a task.

49
00:02:24,980 --> 00:02:28,310
The configuration closure
delegates to the task object.

50
00:02:28,310 --> 00:02:31,690
So it can go ahead and
set the description, the group, and

51
00:02:31,690 --> 00:02:33,560
the actions of the task.

52
00:02:33,560 --> 00:02:35,590
Now you may have noticed something
a little bit weird about that

53
00:02:35,590 --> 00:02:37,190
configuration block.

54
00:02:37,190 --> 00:02:39,700
We are trying to assign
this string description,

55
00:02:39,700 --> 00:02:41,690
but there's no equal sign here.

56
00:02:41,690 --> 00:02:44,180
Well Gradle's actually done
something very clever.

57
00:02:44,180 --> 00:02:47,950
For every property, it's created
a setter with the exact same name.

58
00:02:47,950 --> 00:02:52,620
So this line is actually a function call
omitting the parentheses because Groovy.

59
00:02:53,660 --> 00:02:55,670
Assignment also works just as well.

60
00:02:55,670 --> 00:02:57,170
There's only one gotcha with this.

61
00:02:57,170 --> 00:02:59,950
And that is, if you're assigning
a collection to a property in

62
00:02:59,950 --> 00:03:02,730
a configuration closure,
you gotta use the equals sign.

63
00:03:02,730 --> 00:03:04,100
Just a thing to keep in mind.

64
00:03:04,100 --> 00:03:05,850
One more thing to know about tasks,

65
00:03:05,850 --> 00:03:09,330
some task properties can be set in
the task declaration like this.

66
00:03:09,330 --> 00:03:11,960
However, not all properties
can be set this way, so

67
00:03:11,960 --> 00:03:13,620
check out the course code for
the full story.

68
00:03:13,620 --> 00:03:17,500
The only time you actually have to use
this syntax is when you're declaring

69
00:03:17,500 --> 00:03:19,270
a typed task,
which we'll talk about soon.
