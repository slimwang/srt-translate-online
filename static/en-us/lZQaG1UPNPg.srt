1
00:00:00,530 --> 00:00:03,101
So now that we've got our
pets.db database file open,

2
00:00:03,101 --> 00:00:05,351
let's learn how to add
a table to that database.

3
00:00:05,351 --> 00:00:06,247
So first off,

4
00:00:06,247 --> 00:00:10,590
here are the different columns that
we decided would be in our table.

5
00:00:14,410 --> 00:00:18,180
In order to make a table we need to
identify what the table would be called

6
00:00:19,820 --> 00:00:24,470
and what each of the columns
would be called, and

7
00:00:24,470 --> 00:00:27,420
lastly, we need to determine
what type each column should be.

8
00:00:29,360 --> 00:00:33,860
Now, types work a little bit differently
in SQLite than they do in Java.

9
00:00:33,860 --> 00:00:37,120
The names or the types are slightly
different but the idea is the same.

10
00:00:37,120 --> 00:00:38,110
So let's take a deeper look.

11
00:00:39,220 --> 00:00:42,660
So SQLite uses a more
general typing system and

12
00:00:42,660 --> 00:00:45,200
to better understand what this means,
let's take a look at an example.

13
00:00:46,480 --> 00:00:50,210
So for integers, there are many
distinct type of integers.

14
00:00:50,210 --> 00:00:53,120
And in fact there are over
six different data types that

15
00:00:53,120 --> 00:00:55,600
could represent different
sizes of integers.

16
00:00:55,600 --> 00:00:58,704
So for example, we can have
a 1-byte integer, a 3-byte integer,

17
00:00:58,704 --> 00:01:00,650
or maybe a 6-byte integer.

18
00:01:00,650 --> 00:01:03,580
And translating that into SQLite,
these ad types

19
00:01:03,580 --> 00:01:07,670
can be grouped into a single category or
what's called a storage class in SQLite.

20
00:01:07,670 --> 00:01:10,790
And these are grouped into
the INTEGER storage class.

21
00:01:12,090 --> 00:01:15,220
So you can use both
the generalized storage class

22
00:01:15,220 --> 00:01:20,530
as well as the more specific data
types as different types as SQLite.

23
00:01:20,530 --> 00:01:23,210
But I don't want you to get caught up
in the technical details of different

24
00:01:23,210 --> 00:01:23,979
memory sizes.

25
00:01:25,070 --> 00:01:29,810
So we'll be using the main storage
classes in this lesson and throughout

26
00:01:29,810 --> 00:01:34,100
the course I'll be using the words types
and storage classes interchangeably.

27
00:01:35,220 --> 00:01:37,370
But if you're interested in learning
more about the distinctions

28
00:01:37,370 --> 00:01:38,810
between these two,

29
00:01:38,810 --> 00:01:43,470
I've linked below a documentation to
the SQLite data type information.

30
00:01:44,790 --> 00:01:48,340
So with that said, here's a list
of the general storage classes or

31
00:01:48,340 --> 00:01:49,480
different types.

32
00:01:49,480 --> 00:01:51,570
A single value and a SQLite can have.

33
00:01:52,800 --> 00:01:56,740
So first off, we have null,
meaning that the value is a null value.

34
00:01:58,150 --> 00:02:02,820
Next is integer, so this is
a signed integer thing such as one,

35
00:02:02,820 --> 00:02:04,190
two, or three.

36
00:02:04,190 --> 00:02:05,920
Pointing that we have reals.

37
00:02:05,920 --> 00:02:08,280
And this means the value
is a floating point.

38
00:02:08,280 --> 00:02:09,197
So for example 7.8.

39
00:02:09,197 --> 00:02:10,991
And next we have text.

40
00:02:10,991 --> 00:02:14,470
And those are things that are strings.

41
00:02:14,470 --> 00:02:17,060
And lastly, here, we'll see blobs.

42
00:02:17,060 --> 00:02:20,590
So this means that the data is
stored exactly as we input it.

43
00:02:20,590 --> 00:02:24,370
An examples of these are images or
binaries.

44
00:02:24,370 --> 00:02:25,474
So from this list,

45
00:02:25,474 --> 00:02:29,452
you'll notice that our standard
data type of Booleans is missing.

46
00:02:29,452 --> 00:02:33,100
Now, SQLite doesn't have
a separate type for Boolean.

47
00:02:33,100 --> 00:02:37,900
Instead, a more efficient way to store
Booleans is just store them as integers.

48
00:02:37,900 --> 00:02:39,240
What does this look like?

49
00:02:39,240 --> 00:02:44,590
Well, for example, you can associate the
number 0 with the Boolean value false,

50
00:02:44,590 --> 00:02:47,770
or the number 1 with
the Boolean value true.

51
00:02:47,770 --> 00:02:51,020
In fact, integers are a great
way to store information for

52
00:02:51,020 --> 00:02:54,780
columns, where there are only a few
options that could be in that column.

53
00:02:54,780 --> 00:02:59,510
So let's take a look at an example where
we're associating integers with values.

54
00:02:59,510 --> 00:03:01,290
Looking at our headphones
example from before.

55
00:03:02,470 --> 00:03:05,320
Well, one of the attributes for
headphones was style.

56
00:03:07,180 --> 00:03:10,290
And let's say there are four different
styles that the headphones could have.

57
00:03:10,290 --> 00:03:14,160
So it could be ear buds, over ear,
on ear or bone conduction.

58
00:03:15,170 --> 00:03:16,960
And one way we could have
stored all these values

59
00:03:16,960 --> 00:03:18,210
is by storing them as texts.

60
00:03:19,940 --> 00:03:23,280
Now, a simpler way would just be
associate a number with each of these.

61
00:03:25,170 --> 00:03:29,240
And storing that number
in the styles attribute.

62
00:03:29,240 --> 00:03:33,040
So first of all, storing a single
digit takes up way less space

63
00:03:33,040 --> 00:03:34,690
than an entire word,
like phone conduction.

64
00:03:35,820 --> 00:03:39,830
And secondly, a long string
of text can be less precise.

65
00:03:39,830 --> 00:03:42,710
For example, if we imagine
people typing in, On Ear or

66
00:03:42,710 --> 00:03:45,320
Over Ear, it's possible they
could misspell that entry.

67
00:03:46,430 --> 00:03:49,890
Now, let's take a step back and discuss
how we could choose a data type for

68
00:03:49,890 --> 00:03:52,960
each of the attributes
of our headphones.

69
00:03:52,960 --> 00:03:57,160
So remember first off, we had name and
that could be stored just as a text.

70
00:03:58,190 --> 00:04:00,620
Next, we have the price
of the headphones.

71
00:04:00,620 --> 00:04:03,410
And we can see we want to
store that as an integer.

72
00:04:03,410 --> 00:04:07,180
So it's often easier to store
prices as integers representing

73
00:04:07,180 --> 00:04:11,640
just the total number of cents and then
dividing it by 100 to get the dollars.

74
00:04:11,640 --> 00:04:12,379
So doing so

75
00:04:12,379 --> 00:04:18,380
ensures that you never get a nonsensical
number such as 33 dollars and 787 cents.

76
00:04:18,380 --> 00:04:20,041
And next we have style.

77
00:04:20,041 --> 00:04:24,527
Remember the different styles
we had could be inner ear,

78
00:04:24,527 --> 00:04:26,870
over ear or bunk conduction.

79
00:04:27,890 --> 00:04:28,700
Well, in this case,

80
00:04:28,700 --> 00:04:34,200
we can store as an integer and associate
an integer value with the style.

81
00:04:34,200 --> 00:04:39,330
So say zero for earbuds, one for
on ear, and so on and so on.

82
00:04:39,330 --> 00:04:41,210
Next up we have in stock.

83
00:04:41,210 --> 00:04:42,730
And we want to store this as an integer.

84
00:04:43,980 --> 00:04:48,570
So in stock is essentially a bullion,
meaning that we can store zero for

85
00:04:48,570 --> 00:04:51,260
not in stock or one for in stock.

86
00:04:51,260 --> 00:04:53,530
And lastly, we have the description.

87
00:04:53,530 --> 00:04:55,043
And this can be simply stored as text.

88
00:04:55,043 --> 00:04:58,340
So here's your chance
to practice this out.

89
00:04:58,340 --> 00:05:01,980
I've listed the column names in
the pets table and I like you to choose

90
00:05:01,980 --> 00:05:05,820
which of these storage types would be
a best fit for each of these attributes.

91
00:05:07,140 --> 00:05:08,400
So the couple of things to note here.

92
00:05:09,760 --> 00:05:13,210
First off, for weight,
we're going to simplify things and

93
00:05:13,210 --> 00:05:14,400
not be including the decimal point.

94
00:05:15,830 --> 00:05:19,810
Next, for gender, we're going to
have three gender options.

95
00:05:19,810 --> 00:05:24,270
So male, female and unknown and
lastly for breeds, as

96
00:05:24,270 --> 00:05:28,720
soon that there'd be lots of breeds with
pets of new breeds coming in everyday.

97
00:05:28,720 --> 00:05:34,120
I notice in our storage class options,
I've removed NULL because

98
00:05:34,120 --> 00:05:38,110
there is no situation where you'll have
a column that only has NULL values.

99
00:05:38,110 --> 00:05:42,020
Much like you never have a variable
in Java with a NULL type.

100
00:05:42,020 --> 00:05:45,970
Now, the rest are possible answers and
go ahead and pick the storage class that

101
00:05:45,970 --> 00:05:48,380
you think is the best match for
each of these attributes.
