1
00:00:00,288 --> 00:00:04,200
Now we are going to do a slightly
more detailed directory example,

2
00:00:04,200 --> 00:00:08,039
to show how the directory doesn't
become a bottleneck when a bus would.

3
00:00:09,060 --> 00:00:13,530
Here we have four cores,
each with its own cache and also,

4
00:00:13,530 --> 00:00:16,570
next to each core is
a slice of the directory.

5
00:00:16,570 --> 00:00:20,050
Let's assume that each slice
just keeps track of one block.

6
00:00:20,050 --> 00:00:25,560
So this is the directory slice where
we keep the block X information,

7
00:00:25,560 --> 00:00:30,033
and then next to cache one
there is directory Y, Z and W.

8
00:00:30,033 --> 00:00:35,114
And now let's assume that
the core 0 write X at about

9
00:00:35,114 --> 00:00:39,859
the same time,
where core 1 is trying to read Y.

10
00:00:39,859 --> 00:00:44,794
This is a cache miss, and we send
the request to the directory that is

11
00:00:44,794 --> 00:00:50,620
the home for X, which happens to be
around nearby slice of the directory.

12
00:00:50,620 --> 00:00:54,180
When we read Y we go to our own slice.

13
00:00:54,180 --> 00:00:59,640
Let's say that cache 2 also
reads Y at about the same time.

14
00:00:59,640 --> 00:01:03,450
So what happens now is the write to X,
and

15
00:01:03,450 --> 00:01:07,440
the read to Y here are probably going to
be processed at about the same time,

16
00:01:07,440 --> 00:01:10,070
completely independently
by these directories.

17
00:01:10,070 --> 00:01:14,050
Meanwhile, the read Y is travelling
through the network to this directory.

18
00:01:14,050 --> 00:01:18,670
In each of these directories, we see
that the block is not present in any of

19
00:01:18,670 --> 00:01:25,370
the caches, so we allow exclusive access
for the read, and here, of course,

20
00:01:25,370 --> 00:01:31,004
the block will be modified, anyway, so
here, we will set the dirty bit and

21
00:01:31,004 --> 00:01:36,240
note that block X is now in the cache 0,
and

22
00:01:36,240 --> 00:01:40,880
here we will set the dirty bit because
exclusive can become dirty easily, and

23
00:01:40,880 --> 00:01:43,820
set the presence bit for cache 1.

24
00:01:43,820 --> 00:01:47,100
Now the read Y is traveling
to this directory,

25
00:01:47,100 --> 00:01:51,375
let's say that cache 1 is being
accessed with a write to X and

26
00:01:51,375 --> 00:01:54,725
it's a cache miss so
it gets sent to this directory.

27
00:01:54,725 --> 00:01:57,405
So this will probably arrive here first.

28
00:01:57,405 --> 00:02:01,425
We will check the presence vector and
the dirtiness information and

29
00:02:01,425 --> 00:02:06,175
see that cache 1 is the one that has the
data, and that it might be dirty there.

30
00:02:06,175 --> 00:02:10,100
So we forward the request
to read to cache 1.

31
00:02:10,100 --> 00:02:14,600
Cache 1 acknowledges that request,
changes its state to shared,

32
00:02:14,600 --> 00:02:18,187
we get the response that
it doesn't carry data,

33
00:02:18,187 --> 00:02:22,170
so now we know that the block was not
dirty, and we change it to not dirty.

34
00:02:22,170 --> 00:02:27,630
We then get the data and forward it
to cache 2, and now we know also that

35
00:02:27,630 --> 00:02:33,390
cache 2 might have the data, and that
cache 2 eventually will get the data,

36
00:02:33,390 --> 00:02:38,538
so it will eventually get
the shared state and the block Y.

37
00:02:38,538 --> 00:02:43,045
Meanwhile, the write X is getting here,
and because we need to write we're

38
00:02:43,045 --> 00:02:48,220
going to send an invalidation and
an external write request to cache 0,

39
00:02:48,220 --> 00:02:53,780
so here the cache needs to responds with
the data because it's a write request,

40
00:02:53,780 --> 00:02:57,530
it sets the state to invalid and
responds with the data.

41
00:02:57,530 --> 00:03:03,430
This is also a write, so the block will
remain dirty, but now the directory

42
00:03:03,430 --> 00:03:08,230
knows that cache 0 no longer has the
data, and we send the data to cache 1.

43
00:03:08,230 --> 00:03:12,710
So now the cache 1 will eventually get
the data in the modified state, and, as

44
00:03:12,710 --> 00:03:18,080
you can see, the write to X and the read
to Y are largely proceeding independent

45
00:03:18,080 --> 00:03:21,290
of each other, except for maybe
possible connection in the network.

46
00:03:21,290 --> 00:03:25,100
So, if our network is good and has many
different paths between these caches and

47
00:03:25,100 --> 00:03:27,270
directories, then really,

48
00:03:27,270 --> 00:03:31,020
there was no point where these requests
competed with each other for anything.

49
00:03:31,020 --> 00:03:35,380
This one was processed by this cache and
this directory, this one was processed

50
00:03:35,380 --> 00:03:39,970
by this cache and this directory, and
we involved other caches if necessary.

51
00:03:39,970 --> 00:03:42,410
But in this case, it was this cache, so

52
00:03:42,410 --> 00:03:45,210
these requests were still
largely independent.

53
00:03:45,210 --> 00:03:48,630
Now let's say we want to
write to Y in this cache.

54
00:03:48,630 --> 00:03:51,980
This will be sent to the directory for
Y.

55
00:03:51,980 --> 00:03:53,760
So the message travels over here.

56
00:03:53,760 --> 00:03:57,964
The directory for
Y now sees that caches 1 and

57
00:03:57,964 --> 00:04:01,650
2 might have the data and
that none of them are dirty, so

58
00:04:01,650 --> 00:04:06,710
it just sends the invalidation
request to caches 1 and 2.

59
00:04:06,710 --> 00:04:11,280
When they receive this
invalidate the block Y and

60
00:04:11,280 --> 00:04:15,850
send back responses that
indicate that they have done so.

61
00:04:15,850 --> 00:04:18,410
When the first response arrives from,
let's say, cache 1,

62
00:04:18,410 --> 00:04:21,170
the directory eliminates this bit.

63
00:04:21,170 --> 00:04:25,600
When the second response comes,
the directory eliminates this bit.

64
00:04:25,600 --> 00:04:30,030
Now that we know there are no more
remaining sharers we can send the data

65
00:04:30,030 --> 00:04:34,790
to the requesting writer and note
that it's going to have the block and

66
00:04:34,790 --> 00:04:36,600
that the block will be dirty.

67
00:04:36,600 --> 00:04:38,900
So now we send the block over here and

68
00:04:38,900 --> 00:04:42,160
this block becomes modified here and
so on.

69
00:04:42,160 --> 00:04:46,220
So again this write only
involved the caches and

70
00:04:46,220 --> 00:04:51,630
the directory entry that actually
needed to be involved for this block.

71
00:04:51,630 --> 00:04:55,820
This cache and directory, for example,
were completely operating independently

72
00:04:55,820 --> 00:04:58,890
of this, and these two directories
could've done something else.
