1
00:00:00,470 --> 00:00:01,898
First, why don't we talk about NumPy.

2
00:00:01,898 --> 00:00:04,340
NumPy has built-in functions for

3
00:00:04,340 --> 00:00:07,720
a lot of basic tasks you'll perform while doing statistical analysis.

4
00:00:08,890 --> 00:00:12,140
So examples might include calculating the mean, median, or

5
00:00:12,140 --> 00:00:13,990
standard deviation of an array.

6
00:00:15,330 --> 00:00:19,070
For example, let's say I had an array of all of the integers ranging from one to

7
00:00:19,070 --> 00:00:20,159
five, called numbers.

8
00:00:21,270 --> 00:00:24,410
Technically, NumPy arrays are different from Python lists, but

9
00:00:24,410 --> 00:00:27,590
performing these operations on a Python list like this will cast it

10
00:00:27,590 --> 00:00:29,180
as a NumPy array behind the scenes.

11
00:00:29,180 --> 00:00:30,420
So let's not worry about it too much.

12
00:00:31,940 --> 00:00:34,791
If I wanted to find the average of this array of numbers,

13
00:00:34,791 --> 00:00:37,230
I could simply type numpy.mean(numbers).

14
00:00:42,452 --> 00:00:44,800
We see that it returns that the mean is 3.

15
00:00:44,800 --> 00:00:46,890
As we know is the case.

16
00:00:46,890 --> 00:00:50,787
Similarly, if I want to find the median, I can call numpy.median(numbers).

17
00:00:56,995 --> 00:00:59,567
Finally, if I wish to know the standard deviation,

18
00:00:59,567 --> 00:01:01,619
I can just call numpy.std(numbers).

19
00:01:04,638 --> 00:01:07,824
These are just a few of the functions that make it easier to analyze data when

20
00:01:07,824 --> 00:01:08,440
using NumPy.
