1
00:00:00,140 --> 00:00:02,540
One of the ways you're most likely to encounter JSON data,

2
00:00:02,540 --> 00:00:05,090
is through the use of a web service. A web service

3
00:00:05,090 --> 00:00:09,190
is essentially a database that you can access using HTTP requests.

4
00:00:09,190 --> 00:00:12,230
With a web service, you formulate queries as URLs. So I'd

5
00:00:12,230 --> 00:00:14,465
like to take a look at a simple example using the

6
00:00:14,465 --> 00:00:17,660
musicbrainz.org site. The nice thing about this site is that we

7
00:00:17,660 --> 00:00:21,040
don't need an API key, so it'll be very easy for

8
00:00:21,040 --> 00:00:25,130
you to experiment with the code I'm going to give you. Okay,

9
00:00:25,130 --> 00:00:27,790
MusicBrainz is essentially a wiki, but one that

10
00:00:27,790 --> 00:00:31,400
provides a web service with access to their data.

11
00:00:31,400 --> 00:00:33,690
The type of data that MusicBrainz maintains, is

12
00:00:33,690 --> 00:00:37,090
metadata on music. So we can ask questions about

13
00:00:37,090 --> 00:00:41,050
artists, labels, recordings, etcetera. Now the way that

14
00:00:41,050 --> 00:00:44,330
we query this site, is by constructing a URL

15
00:00:44,330 --> 00:00:47,780
that has musicbrainz.org as a base, but then specifies

16
00:00:47,780 --> 00:00:50,550
a particular entity, the type of data we're interested

17
00:00:50,550 --> 00:00:54,220
in getting back. And we can specify some additional parameters

18
00:00:54,220 --> 00:00:58,420
that allow us to be specific about exactly what features or

19
00:00:58,420 --> 00:01:01,120
what meta data we'd like to get back for a given

20
00:01:01,120 --> 00:01:04,519
entity, say for an artist. Now, one thing that we're going to

21
00:01:04,519 --> 00:01:07,020
have to do in order to use this site is,

22
00:01:07,020 --> 00:01:09,480
if we want to get specific information about an artist. We

23
00:01:09,480 --> 00:01:12,390
actually need to know its unique identifier, that is the MusicBrainz's

24
00:01:12,390 --> 00:01:15,570
unique identifier. And this theme of unique identifiers is something that's

25
00:01:15,570 --> 00:01:18,260
going to come up over and over and over again in

26
00:01:18,260 --> 00:01:21,150
this course in a variety of different ways. So the first

27
00:01:21,150 --> 00:01:23,290
thing that we're going to do, is actually use their Search interface

28
00:01:23,290 --> 00:01:26,340
and we're just going to pass in a query. That includes some, a

29
00:01:26,340 --> 00:01:29,960
search for the artists we're interested in finding some information about.

30
00:01:29,960 --> 00:01:33,200
We're going to process the results that come back from that query in

31
00:01:33,200 --> 00:01:36,650
order to get the id for that particular artist and then

32
00:01:36,650 --> 00:01:40,690
we can request information about a specific artist using that id. Now,

33
00:01:40,690 --> 00:01:42,720
unless you think I'm a one-trick pony, we're actually going to

34
00:01:42,720 --> 00:01:45,580
ask for data for a different artist, in this case

35
00:01:45,580 --> 00:01:49,740
Lucero. So, here's where we're doing our first query. And

36
00:01:49,740 --> 00:01:51,580
this is going to give us back a results set. Now,

37
00:01:51,580 --> 00:01:54,600
we're going to process that results set in order to get

38
00:01:54,600 --> 00:02:01,010
back the id for Lucero, the MusicBrainz's id for Lucero. Now,

39
00:02:01,010 --> 00:02:02,840
I'm not going to go into this in too much detail.

40
00:02:02,840 --> 00:02:05,990
But something I want to point out here is that, what's happening

41
00:02:05,990 --> 00:02:11,330
is, when we issue this query, the response we get back is JSON data. Using the

42
00:02:11,330 --> 00:02:14,770
JSON module in Python, we can read in

43
00:02:14,770 --> 00:02:17,690
that data and it will simply be translated into

44
00:02:17,690 --> 00:02:22,250
the appropriate Python objects. Now, a JSON object

45
00:02:22,250 --> 00:02:25,730
is equivalent to a Python dictionary. So, what we're

46
00:02:25,730 --> 00:02:28,850
accessing right here is, that Python dictionary and

47
00:02:28,850 --> 00:02:31,320
we're going to access the artists field of that dictionary.

48
00:02:31,320 --> 00:02:33,810
That field happens to have an array as its

49
00:02:33,810 --> 00:02:38,230
value and I happen to know that the second object

50
00:02:38,230 --> 00:02:40,760
in that array is the one I'm actually interested

51
00:02:40,760 --> 00:02:44,360
in, the band Lucero from Memphis, okay. Now we want

52
00:02:44,360 --> 00:02:47,620
the id for this particular artist. The value of

53
00:02:47,620 --> 00:02:51,260
an artist is another object. It was a JSON object

54
00:02:51,260 --> 00:02:53,350
and the results we got back from MusicBrainz in

55
00:02:53,350 --> 00:02:56,460
our case, because we're working in Python, the JSON module

56
00:02:56,460 --> 00:03:00,930
has translated it into another Python dictionary. So,

57
00:03:00,930 --> 00:03:03,290
the id field contains the value we're actually interested

58
00:03:03,290 --> 00:03:06,440
in getting here. Okay, then what we're going to

59
00:03:06,440 --> 00:03:09,720
do is query this side again, this time specifically

60
00:03:09,720 --> 00:03:13,880
requesting information on this particular id, the id that

61
00:03:13,880 --> 00:03:16,080
we got back from our first query. Well, I

62
00:03:16,080 --> 00:03:19,362
should say from processing our first query. Alright. So,

63
00:03:19,362 --> 00:03:21,720
then we're going to issue this second query. We're actually

64
00:03:21,720 --> 00:03:23,700
going to ask for releases. And you can look above in

65
00:03:23,700 --> 00:03:26,400
the code here, to see what's going on here. Essentially, what

66
00:03:26,400 --> 00:03:30,260
I've done is implemented some convenience code that allows us to

67
00:03:30,260 --> 00:03:33,600
easily pass in the parameters that MusicBrainz is expecting in order

68
00:03:33,600 --> 00:03:37,440
to get the releases data back. Okay. And then the

69
00:03:37,440 --> 00:03:40,300
rest of this is simply printing out the results. So, let's

70
00:03:40,300 --> 00:03:43,730
take a look at, what the results look like. So, here's

71
00:03:43,730 --> 00:03:46,810
the result of having dived into the result set from that

72
00:03:46,810 --> 00:03:49,790
first query to get the artists we're interested in. Okay, here's the

73
00:03:49,790 --> 00:03:53,330
id we care about. And then, if we look down, a couple

74
00:03:53,330 --> 00:03:55,680
of things I want to point out here. I've set up this code

75
00:03:55,680 --> 00:03:58,050
so that each time it makes a request out to this web service,

76
00:03:58,050 --> 00:04:02,790
it prints out the URL, right. Again, remember that URL is how

77
00:04:02,790 --> 00:04:06,770
we specify our query to a web service. So, at musicbrainz.org, I'm

78
00:04:06,770 --> 00:04:09,210
specifying that I want to access the web service, version two of the

79
00:04:09,210 --> 00:04:12,053
web service. I believe at least that's what this two means. And then

80
00:04:12,053 --> 00:04:15,740
I'm saying the entity I'm interested in is artist, and

81
00:04:15,740 --> 00:04:17,750
here's the id for that artist. Now, what I want

82
00:04:17,750 --> 00:04:20,600
you to do is give me back data that's formatted

83
00:04:20,600 --> 00:04:26,000
as JSON and this particular parameter for MusicBrainz is where we

84
00:04:26,000 --> 00:04:29,610
specify exactly what metadata we'd like to receive in response.

85
00:04:29,610 --> 00:04:31,160
It's kind of a catch all for everything. If we

86
00:04:31,160 --> 00:04:33,840
want more than one type of metadata, we simply concatenate

87
00:04:33,840 --> 00:04:37,120
them together, here. In this case, I'm just interested in releases,

88
00:04:37,120 --> 00:04:39,330
okay? So then what I did in the code was,

89
00:04:39,330 --> 00:04:42,260
I actually processed the response that I got back to

90
00:04:42,260 --> 00:04:45,990
this query, to pull out the very first release, okay?

91
00:04:45,990 --> 00:04:49,260
And here is the object in Python that's going to be

92
00:04:49,260 --> 00:04:52,720
a dictionary. That represents or that stores the data for

93
00:04:52,720 --> 00:04:57,240
that first release. This happens to be a release entitled 2012-04-20

94
00:04:57,240 --> 00:04:59,840
Webster Hall, New York. As it turns out, I was

95
00:04:59,840 --> 00:05:02,170
actually at this show. My wife had surprised me by flying

96
00:05:02,170 --> 00:05:04,020
in my best friend, who is also a big Lucero

97
00:05:04,020 --> 00:05:08,850
fan. Okay? So then what I did was, in here, I

98
00:05:08,850 --> 00:05:13,070
used a list comprehension to process all of the releases,

99
00:05:13,070 --> 00:05:16,960
and extract just the title for each one of those releases.

100
00:05:16,960 --> 00:05:20,200
And then I'm simply printing them all out here. So

101
00:05:20,200 --> 00:05:22,950
what I encourage you to do with this code, is take

102
00:05:22,950 --> 00:05:24,680
a look at all of it, get a sense for how

103
00:05:24,680 --> 00:05:27,940
it works, and then experiment on your own with some queries.

104
00:05:27,940 --> 00:05:30,570
You can look for different artists, you can use some

105
00:05:30,570 --> 00:05:33,550
of the conveniences that we've provided. Here to query for different

106
00:05:33,550 --> 00:05:37,000
types of metadata about a given artist, okay? So just

107
00:05:37,000 --> 00:05:39,980
play with this part of the code or work with Python

108
00:05:39,980 --> 00:05:42,640
in the Python interpreter, and just get a sense for

109
00:05:42,640 --> 00:05:44,990
the data that's here. What I really encourage you to do,

110
00:05:44,990 --> 00:05:49,100
is print out the full results set, dive into exactly what

111
00:05:49,100 --> 00:05:53,180
type of data is coming back. It's all just hierarchical data

112
00:05:53,180 --> 00:05:58,090
structure that has objects or arrays nested within other objects

113
00:05:58,090 --> 00:06:01,150
or arrays. Following this, we'll have a quiz where we

114
00:06:01,150 --> 00:06:04,020
actually ask you to answer some specific questions, so you

115
00:06:04,020 --> 00:06:07,180
will have to be able to query this web service correctly.
