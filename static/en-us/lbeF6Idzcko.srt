1
00:00:00,390 --> 00:00:03,900
With SQLAlchemy, we can write
a single Python file to set up and

2
00:00:03,900 --> 00:00:04,900
configure our database.

3
00:00:04,900 --> 00:00:08,330
I will call this file database_setup.py.

4
00:00:08,330 --> 00:00:12,770
Creating a database with SQLAlchemy
has four major coding components.

5
00:00:12,770 --> 00:00:17,350
The configuration code, which is what we
use to import all the necessary modules.

6
00:00:17,350 --> 00:00:20,730
The class code that we use to
represent our data in Python.

7
00:00:20,730 --> 00:00:24,240
The table that represents
the specific table in our database.

8
00:00:24,240 --> 00:00:27,600
And the mapper that connects the columns
of our table to the class that

9
00:00:27,600 --> 00:00:28,720
represents it.

10
00:00:28,720 --> 00:00:31,810
Our configuration code sets up all
of the dependencies needed for

11
00:00:31,810 --> 00:00:35,380
my database and
binds my code to the SQLAlchemy engine.

12
00:00:35,380 --> 00:00:39,020
For most cases, this code doesn't
change much from project to project.

13
00:00:39,020 --> 00:00:42,770
We also have to create an instance
of a class called declarative base,

14
00:00:42,770 --> 00:00:46,220
in order for our class to inherit
all the features of SQLAlchemy.

15
00:00:46,220 --> 00:00:49,150
In addition, we need to add some
configuration code at the end of

16
00:00:49,150 --> 00:00:51,920
our Python file to connect
to an existing database.

17
00:00:51,920 --> 00:00:53,570
Or in this case, create a new one.

18
00:00:53,570 --> 00:00:55,565
This might not make much
sense right now, so

19
00:00:55,565 --> 00:00:57,720
let's jump into writing
the configuration code.

20
00:00:57,720 --> 00:01:00,590
Open a text editor like Sublime and
follow along.

21
00:01:00,590 --> 00:01:04,200
You may have seen this import if you've
worked on a few Python projects before.

22
00:01:04,200 --> 00:01:07,600
The sys module provides a number of
functions and variables that can be

23
00:01:07,600 --> 00:01:11,170
used to manipulate different parts
of the Python run-time environment.

24
00:01:11,170 --> 00:01:13,290
Next, we're going to import the column.

25
00:01:13,290 --> 00:01:17,150
ForeignKey, Integer, and
String classes from SQLAlchemy.

26
00:01:17,150 --> 00:01:19,820
These will come in handy when
we are writing our mapper code.

27
00:01:19,820 --> 00:01:23,915
From the sqlalchemy.ext.declarative
library, we need to import our

28
00:01:23,915 --> 00:01:28,060
declarative_base, which we will use
in the configuration and class code.

29
00:01:28,060 --> 00:01:32,820
After that, we import relationship from
sqalchemy.orm in order to create our

30
00:01:32,820 --> 00:01:34,350
foreign key relationships.

31
00:01:34,350 --> 00:01:36,990
This, too, will be used when
we write up our mapper.

32
00:01:36,990 --> 00:01:39,210
Let's also import
the create_engine class,

33
00:01:39,210 --> 00:01:42,670
which we will use in our configuration
code at the end of the file.

34
00:01:42,670 --> 00:01:44,770
This last piece of code isn't an import,
but

35
00:01:44,770 --> 00:01:47,670
will help us get set up when we
begin to write our class code.

36
00:01:47,670 --> 00:01:51,000
Let's make an instance of the
declarative_base class we just imported

37
00:01:51,000 --> 00:01:52,560
and call it Base, for short.

38
00:01:52,560 --> 00:01:55,910
The declarative_base will let
SQLAlchemy know that our classes

39
00:01:55,910 --> 00:02:00,610
are special SQLAlchemy classes that
correspond to tables in our database.

40
00:02:00,610 --> 00:02:03,940
At the end of our file,
we need to add two more lines of code.

41
00:02:03,940 --> 00:02:06,770
We create an instance of
our create_engine class and

42
00:02:06,770 --> 00:02:08,900
point to the database we will use.

43
00:02:08,900 --> 00:02:10,400
Since we are using SQLite 3 for

44
00:02:10,400 --> 00:02:14,100
this lesson, the create_engine will
create a new file that we can use

45
00:02:14,100 --> 00:02:19,560
similarly to a more robust database
like MySQL or The last piece we need

46
00:02:19,560 --> 00:02:23,880
is Base.metadata.create_all(engine),
which goes into the database and

47
00:02:23,880 --> 00:02:26,950
adds the classes we will soon create
as new tables in our database.
