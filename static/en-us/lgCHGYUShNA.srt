1
00:00:00,130 --> 00:00:03,820
Let's look at the solution to our
write-update optimization quiz

2
00:00:03,820 --> 00:00:08,360
where we have two cores with
write-update coherence and

3
00:00:08,360 --> 00:00:12,560
we consider the case of no optimization,
dirty-bit only optimization,

4
00:00:12,560 --> 00:00:16,250
and both dirty-bit and
shared-bit optimization.

5
00:00:16,250 --> 00:00:20,890
And for this program, how many bus
uses and memory writes do we get?

6
00:00:20,890 --> 00:00:24,500
So, let's consider the case
of no optimization first.

7
00:00:24,500 --> 00:00:27,890
Let us first consider
the no optimization case.

8
00:00:27,890 --> 00:00:33,320
This right here we'll use the bus and
we'll write to memory.

9
00:00:33,320 --> 00:00:38,230
This read here,
the first one we'll use the bus but

10
00:00:38,230 --> 00:00:40,920
we'll not update the memory
because this is a read miss.

11
00:00:42,470 --> 00:00:48,500
From then on, each write on core 0
will use the bus to broadcast and

12
00:00:48,500 --> 00:00:55,180
update memory, so we get 999 more
accesses to each because of this,

13
00:00:55,180 --> 00:00:59,950
whereas reads are no longer going to
be misses, and they find what they

14
00:00:59,950 --> 00:01:04,260
are looking for in the cache, so they're
no longer going to either bus or memory.

15
00:01:04,260 --> 00:01:06,588
Eventually this cache is replace this.

16
00:01:06,588 --> 00:01:09,340
But nothing happens on
the replacement in this case

17
00:01:09,340 --> 00:01:12,050
because everything is
already up to date.

18
00:01:12,050 --> 00:01:15,620
So overall here we got 1001 bus use.

19
00:01:15,620 --> 00:01:17,750
And 1000 memory writes.

20
00:01:17,750 --> 00:01:20,420
Now let us look at the dirty-bit
only optimization.

21
00:01:21,700 --> 00:01:27,440
In this optimization, the writes on
core 0 will all be happening to core

22
00:01:27,440 --> 00:01:31,950
0s cache and the only write to memory
will be when the block is replaced.

23
00:01:31,950 --> 00:01:34,450
So we get only one memory write.

24
00:01:34,450 --> 00:01:36,480
How many bus uses do we need?

25
00:01:36,480 --> 00:01:41,060
While the first write and every
subsequent write will be broadcast.

26
00:01:41,060 --> 00:01:45,290
So we get 1000 bus accesses
because of these writes.

27
00:01:45,290 --> 00:01:49,730
We still have the one access because the
first read is a miss after that they're

28
00:01:49,730 --> 00:01:51,720
all hits and don't go to the bus.

29
00:01:52,760 --> 00:01:58,320
And now we have an additional bus
access because the replacement

30
00:01:58,320 --> 00:02:04,080
of A here needs to send the data to
memory for which we need a bus access.

31
00:02:04,080 --> 00:02:09,090
So overall, we reduce dramatically the
number of memory writes in exchange for

32
00:02:09,090 --> 00:02:10,929
one more bus use.

33
00:02:12,130 --> 00:02:15,310
Now let's see what happens with
a dirty and shared optimization.

34
00:02:16,420 --> 00:02:20,834
We're right here and at this point we
are the only one who has this blocked so

35
00:02:20,834 --> 00:02:22,390
the shared bit is not set.

36
00:02:23,390 --> 00:02:27,680
This would normally allow us to write
to it without going to the bus anymore.

37
00:02:27,680 --> 00:02:32,060
But because the very next access
is a read of a on core 1.

38
00:02:32,060 --> 00:02:36,570
The sharing starts and
that means that really

39
00:02:36,570 --> 00:02:40,820
we have exactly the same number
of bus uses and memory writes.

40
00:02:40,820 --> 00:02:46,430
Remember that the sharing optimization
only works when we are accessing

41
00:02:46,430 --> 00:02:48,120
a block only on one core.

42
00:02:48,120 --> 00:02:52,920
This block is actually being read
on one core, written on another,

43
00:02:52,920 --> 00:02:57,790
so all the writes on this core need
to be propagated to the bus so

44
00:02:57,790 --> 00:03:00,250
that this core's cache can be updated.

45
00:03:00,250 --> 00:03:03,450
So really here the shared
bit optimization

46
00:03:03,450 --> 00:03:05,310
doesn't result in any savings.
