1
00:00:00,420 --> 00:00:03,880
Let's keep working together and wire up the view.

2
00:00:03,880 --> 00:00:07,400
Now previously, when we were doing model view octopus,

3
00:00:07,400 --> 00:00:11,690
the octopus was grabbing on to these elements by their ids and

4
00:00:11,690 --> 00:00:15,320
then updating them whenever view.render got called.

5
00:00:15,320 --> 00:00:19,700
Now, Knockout doesn't actually need these elements to have ids.

6
00:00:19,700 --> 00:00:22,520
It just need us to put data bindings on them.

7
00:00:22,520 --> 00:00:25,840
Now, the very first thing I'm going to do is remove the ids.

8
00:00:25,840 --> 00:00:31,250
Removing the ids is not necessary, but I'm taking them away just for clarity.

9
00:00:31,250 --> 00:00:32,409
In a real situation,

10
00:00:32,409 --> 00:00:36,340
I might have a class on each of these describing what they do.

11
00:00:36,340 --> 00:00:40,470
That way, our CSS can hook onto it and style it and make it look pretty.

12
00:00:40,470 --> 00:00:46,450
So now, our h2, div, and image all have data-bind attributes here.

13
00:00:46,450 --> 00:00:47,810
First, let's talk about the h2.

14
00:00:47,810 --> 00:00:52,300
We want the h2 to be wired up with the name of the cat.

15
00:00:53,370 --> 00:00:54,760
In fact, more specifically,

16
00:00:54,760 --> 00:00:59,110
we want the text of the h2 to be whatever the name of the cat is.

17
00:00:59,110 --> 00:01:02,680
Knockout's binding for this is text: name.

18
00:01:02,680 --> 00:01:07,318
Whatever the name property is on the view model over in our JavaScript file,

19
00:01:07,318 --> 00:01:10,078
that's what the text of this h2 gets set to.

20
00:01:10,078 --> 00:01:12,814
And in fact, if we hop back over to our app,

21
00:01:12,814 --> 00:01:16,215
we can see there is the name right there.

22
00:01:16,215 --> 00:01:18,550
Its initial value should be Tabby.

23
00:01:18,550 --> 00:01:20,780
If I save my work and I hop back over here and

24
00:01:20,780 --> 00:01:25,560
refresh, we should see the name update with Tabby.

25
00:01:25,560 --> 00:01:27,930
Let's hop back to our HTML.

26
00:01:27,930 --> 00:01:30,720
This div here is going to be very similar.

27
00:01:30,720 --> 00:01:34,480
The text inside of the div is going to be a click count.

28
00:01:35,520 --> 00:01:38,610
Now, the image itself is going to be a little bit different.

29
00:01:38,610 --> 00:01:43,300
First of all, we know that when we click, we want increment counter to run.

30
00:01:43,300 --> 00:01:48,650
We also want the source attribute of this image to update as the source changes.

31
00:01:48,650 --> 00:01:50,840
In this simple example, it won't change, but

32
00:01:50,840 --> 00:01:54,600
we still want to use Knockout's binding system to do this.

33
00:01:54,600 --> 00:01:59,540
To put multiple bindings inside of a data-bind, just use a comma.

34
00:01:59,540 --> 00:02:04,730
The way you bind an attribute inside of Knockout is with the binding attr colon,

35
00:02:04,730 --> 00:02:10,130
and then an object literal here with source to whatever you want to bind it to.

36
00:02:11,200 --> 00:02:16,210
In this case, in app.js, it's called image source.

37
00:02:16,210 --> 00:02:20,190
If the image source observable were ever to change, then the attribute,

38
00:02:20,190 --> 00:02:22,080
source, on this image would change.

39
00:02:23,090 --> 00:02:26,680
Let's save this and go back to our browser and see if it works.

40
00:02:26,680 --> 00:02:31,750
Sure enough, the image pops up, and when you click, the number increments.

41
00:02:31,750 --> 00:02:33,150
Pretty cool.

42
00:02:33,150 --> 00:02:34,230
Now, once again,

43
00:02:34,230 --> 00:02:39,514
these bindings are the things that are connecting up the view and the model, and

44
00:02:39,514 --> 00:02:44,420
Knockout is handling all of the logic to make that synchronization happen.
