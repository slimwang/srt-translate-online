1
00:00:02,760 --> 00:00:05,140
Great you want take a look
at the app that I'm making?

2
00:00:05,140 --> 00:00:05,640
>> Sure.

3
00:00:07,330 --> 00:00:08,320
>> And wait for it.

4
00:00:13,580 --> 00:00:15,630
>> I'm not sure what I'm looking at.

5
00:00:15,630 --> 00:00:17,560
It says house shopping list.

6
00:00:17,560 --> 00:00:21,530
And then there is nothing underneath
like who am I shopping with?

7
00:00:21,530 --> 00:00:22,920
What items are we buying?

8
00:00:22,920 --> 00:00:25,220
You have anymore data on this?

9
00:00:25,220 --> 00:00:27,710
>> Well it's an early prototype.

10
00:00:27,710 --> 00:00:28,820
>> Okay.

11
00:00:28,820 --> 00:00:33,490
>> Okay but I hear you saying it
seems like you want more data.

12
00:00:33,490 --> 00:00:37,720
>> Bingo
>> How did the initial user test go?

13
00:00:37,720 --> 00:00:40,150
Did they like it?

14
00:00:40,150 --> 00:00:41,565
>> They seemed underwhelmed.

15
00:00:41,565 --> 00:00:44,930
J.P., the users want more
data to be shown in the app.

16
00:00:44,930 --> 00:00:47,290
>> Well, we should give
the people what they want.

17
00:00:47,290 --> 00:00:48,480
>> Yeah.

18
00:00:48,480 --> 00:00:50,390
>> Implementing a list of
list ends sounds hard and

19
00:00:50,390 --> 00:00:54,660
a bit beyond version 0.1, but we could
start by trying to store two pieces of

20
00:00:54,660 --> 00:00:58,030
data with a shopping list instead
of just the name of the list.

21
00:00:58,030 --> 00:01:00,570
We could store the name and the owner.

22
00:01:00,570 --> 00:01:03,210
The owner will need to be a dummy value
though since we don't have any user

23
00:01:03,210 --> 00:01:03,860
accounts working.

24
00:01:04,940 --> 00:01:07,830
>> Well I have heard that you can
convert simple Java objects into

25
00:01:07,830 --> 00:01:09,840
firebase database JSON.

26
00:01:09,840 --> 00:01:13,790
So we could make the shopping list
an object with two fields and

27
00:01:13,790 --> 00:01:15,320
then store it in the database.

28
00:01:15,320 --> 00:01:17,270
I'll take a look at it
with our developer.

29
00:01:17,270 --> 00:01:19,460
When you're working in Java and
storing data.

30
00:01:19,460 --> 00:01:22,620
You might find that it be really great
if you could just save an object to

31
00:01:22,620 --> 00:01:23,540
the database.

32
00:01:23,540 --> 00:01:27,220
In this case I bet you'd really
like to store shopping list object

33
00:01:27,220 --> 00:01:29,920
which let's say has a name and
an owner to start.

34
00:01:29,920 --> 00:01:33,040
Now it is possible it fire
base to make a hash map

35
00:01:33,040 --> 00:01:35,020
with a collection of key value pairs,
and

36
00:01:35,020 --> 00:01:38,250
then you can use that hash map to
change your data and fire base.

37
00:01:38,250 --> 00:01:40,370
You can easily forget a key
value pair though, so

38
00:01:40,370 --> 00:01:42,330
this is not the recommended
way to do it.

39
00:01:42,330 --> 00:01:45,170
The expert recommended way to
do this is to make a POJO.

40
00:01:45,170 --> 00:01:47,730
AKA a plain old Java object.

41
00:01:47,730 --> 00:01:51,410
And then you can use Firebase's
built in serialization capabilities

42
00:01:51,410 --> 00:01:56,070
to both put Java objects into the
database and take back out Java objects.

43
00:01:56,070 --> 00:01:58,100
To allow the Firebase STK to do this,

44
00:01:58,100 --> 00:02:00,860
our object structure needs to
adhere to a few simple rules.

45
00:02:00,860 --> 00:02:01,920
And here they are.

46
00:02:01,920 --> 00:02:03,970
Let's go ahead and
take a look at each of these.

47
00:02:03,970 --> 00:02:07,590
The first rule, is that every instance
variable must match your children's

48
00:02:07,590 --> 00:02:09,440
key names in Firebase.

49
00:02:09,440 --> 00:02:12,560
When your object goes into Firebase,
it's basically going to look like this.

50
00:02:12,560 --> 00:02:15,720
You'll have some sort of root node and
then a bunch of properties that

51
00:02:15,720 --> 00:02:17,990
correspond to member
variables of the object.

52
00:02:17,990 --> 00:02:21,420
And these keys here need to match
the member variable names exactly.

53
00:02:21,420 --> 00:02:22,440
Also, the types for

54
00:02:22,440 --> 00:02:26,300
all these variables should be Java
types that Firebase could handle.

55
00:02:26,300 --> 00:02:27,680
And those types are booleans,

56
00:02:27,680 --> 00:02:32,620
strings, logs, doubles, lists containing
objects that are any of these,

57
00:02:32,620 --> 00:02:35,750
maps containing strings and
objects that are any of these.

58
00:02:35,750 --> 00:02:37,500
And any other Firebase POJOs.

59
00:02:37,500 --> 00:02:40,500
These two values happen to be strings,
so we're all set there.

60
00:02:40,500 --> 00:02:44,030
Rule two, you must have at least an
empty constructor in your POJO object.

61
00:02:44,030 --> 00:02:47,560
You can make other constructors, and you
don't need to use the empty constructor

62
00:02:47,560 --> 00:02:48,850
but it does need to be there.

63
00:02:48,850 --> 00:02:52,570
And rule three is that you need a public
getter method for every member variable.

64
00:02:52,570 --> 00:02:55,440
For example here's a public
getter method for owner.

65
00:02:55,440 --> 00:02:58,750
It should say get in the member
variable's name in CamelCase.

66
00:02:58,750 --> 00:02:59,960
Okay, so let's do this in the code.
