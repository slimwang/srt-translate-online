1
00:00:00,170 --> 00:00:01,869
In Problem Set Number 5,

2
00:00:01,869 --> 00:00:03,873
you will be designing and implementing

3
00:00:03,873 --> 00:00:08,242
a fast parallel algorithm to compute histograms.

4
00:00:08,242 --> 00:00:10,776
You already implemented a kernel

5
00:00:10,776 --> 00:00:15,696
for computing histograms in Problem Set Number 3 that used atomic operations.

6
00:00:15,696 --> 00:00:19,196
However, it turns out that we can get much better performance

7
00:00:19,196 --> 00:00:22,592
if we avoid atomic operations all together.

8
00:00:22,592 --> 00:00:25,993
And that is our goal in Problem Set Number 5.

9
00:00:25,993 --> 00:00:30,333
There are a lot of different ways to efficiently compute histograms.

10
00:00:30,333 --> 00:00:35,277
We strongly encourage you to experiment and test out different ideas,

11
00:00:35,277 --> 00:00:40,010
but one basic strategy that works well is as follows.

12
00:00:40,010 --> 00:00:45,415
First, sort the input data into coarse bins.

13
00:00:45,415 --> 00:00:48,152
Two, use each thread block to compute

14
00:00:48,152 --> 00:00:53,657
a local histogram for the data that falls into a single coarse bin.

15
00:00:53,657 --> 00:00:58,529
Three, concatenate each of the coarse histograms together.

16
00:00:58,529 --> 00:01:00,630
This strategy is advantageous,

17
00:01:00,630 --> 00:01:04,233
because each local histogram will have a small number of bins,

18
00:01:04,233 --> 00:01:07,612
so it will be able to fit into shared memory.

19
00:01:07,612 --> 00:01:11,942
This is true regardless of how many bins the final histogram has.

20
00:01:11,942 --> 00:01:15,385
Let's look at a simple example to see how this strategy will work.

21
00:01:15,385 --> 00:01:20,548
Suppose our input data is in the range of 0 to 999.

22
00:01:20,548 --> 00:01:23,326
And suppose we want to bin our input data

23
00:01:23,326 --> 00:01:27,624
into 100 different equally sized histogram bins.

24
00:01:27,624 --> 00:01:29,259
And here's our data.

25
00:01:29,259 --> 00:01:32,729
As you can see, it ranges from 0 to 999.

26
00:01:32,729 --> 00:01:36,166
And now, let's compute the bin ID for each input element

27
00:01:36,166 --> 00:01:39,910
as well as the coarse bin ID for each input element.

28
00:01:39,910 --> 00:01:44,172
So let's suppose we have 10 equally sized coarse bins.

29
00:01:44,172 --> 00:01:48,978
And this is the result of calculating the bin ID

30
00:01:48,978 --> 00:01:52,862
as well as the coarse bin ID for each of the input element.

31
00:01:52,862 --> 00:01:58,362
And now, let's sort the final bin ID by the coarse bin ID,

32
00:01:58,362 --> 00:02:00,558
and let's see what we have.

33
00:02:00,558 --> 00:02:06,194
And this is the final result after we sort the bin ID by its coarse bin ID.

34
00:02:06,194 --> 00:02:11,278
Now, let's assign a thread block to each coarse bin.

35
00:02:11,278 --> 00:02:13,711
So thread block 0 is responsible

36
00:02:13,711 --> 00:02:17,207
for computing the histogram of coarse bin ID 0.

37
00:02:17,207 --> 00:02:19,612
Thread block 1 won't have anything to do,

38
00:02:19,612 --> 00:02:24,547
because in the sorted coarse bin ID, there is not a bin with an ID of 1.

39
00:02:24,547 --> 00:02:27,584
So it will compute an empty histogram.

40
00:02:27,584 --> 00:02:31,221
Thread block 2 will compute the histogram

41
00:02:31,221 --> 00:02:34,755
of coarse bin ID of 2, and so on.

42
00:02:34,755 --> 00:02:36,890
And to get our final histogram,

43
00:02:36,890 --> 00:02:41,072
we can simply concatenate all those histograms together end to end.

44
00:02:41,072 --> 00:02:45,032
So when we would combine the histogram

45
00:02:45,032 --> 00:02:49,579
that we calculated for coarse bin ID of 1 with the histogram

46
00:02:49,579 --> 00:02:55,612
that we computed for coarse bin ID of 2 and so on and so forth.

47
00:02:55,612 --> 00:02:58,000
And that's it. Good luck.
