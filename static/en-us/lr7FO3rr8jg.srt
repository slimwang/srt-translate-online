1
00:00:00,307 --> 00:00:03,387
I said we didn't need any new constructs, but we are gonna introduce one

2
00:00:03,387 --> 00:00:07,173
and that's gonna make writing the code we need for a search engine much more convenient

3
00:00:07,173 --> 00:00:10,788
It's also gonna be very useful for lots and lots of procedures that we wanna write

4
00:00:10,788 --> 00:00:13,637
and the construct we are gonna introduce is called a loop

5
00:00:13,637 --> 00:00:15,722
It's a way to do things over and over again

6
00:00:15,722 --> 00:00:19,105
The kind of loop that we are gonna introduce first is called the while loop

7
00:00:19,105 --> 00:00:20,588
The syntax for the while loop is this

8
00:00:20,588 --> 00:00:23,822
We have the key word "while", followed by a test expression

9
00:00:23,822 --> 00:00:28,506
followed by a colon, and then inside we have a "block"

10
00:00:28,506 --> 00:00:31,656
and the "block" is a sequence of instructions

11
00:00:31,656 --> 00:00:34,273
This is very similar to the "if" statement

12
00:00:34,273 --> 00:00:36,771
So as a reminder, here's what the "if" statement look like

13
00:00:36,771 --> 00:00:40,940
we had an "if" followed by a test expression, followed by a colon

14
00:00:40,940 --> 00:00:45,107
and then an indented "block", which is a list of statements

15
00:00:45,107 --> 00:00:49,623
that executes whenever the test expression evaluates to a "True" value

16
00:00:49,623 --> 00:00:55,190
With "if", the block executes either zero or one times, depending on whether the test expression is "True"

17
00:00:55,190 --> 00:01:00,473
With "while", the block can execute any number of times

18
00:01:00,473 --> 00:01:03,640
It keeps going as long as the test expression is "True"

19
00:01:03,640 --> 00:01:06,272
So with the "if " statement, if the test expression is "True"

20
00:01:06,272 --> 00:01:09,723
we go to the block, run the block and then continue

21
00:01:09,723 --> 00:01:14,523
if the test expression was "False", we go right to the next expression

22
00:01:14,523 --> 00:01:19,091
With a "while", we also start by checking the test expression

23
00:01:19,091 --> 00:01:21,007
if it's "True", we go to the block

24
00:01:21,007 --> 00:01:25,973
But now, instead of going to the next statement, after the block, we go back

25
00:01:25,973 --> 00:01:29,889
we try the test expression again, if it's "True", we go back to the block

26
00:01:29,889 --> 00:01:32,856
we always go back to the test expression

27
00:01:32,856 --> 00:01:36,924
if it's "True", we do the block again, we go back to the test expression

28
00:01:36,924 --> 00:01:41,456
If it's "True" again, we do the block again, we go back to the test expression

29
00:01:41,456 --> 00:01:47,675
and we can keep going around as many times as we need as long as the test expression is "True"

30
00:01:47,675 --> 00:01:52,022
we'll keep executing the block and keep trying the test expression again

31
00:01:52,022 --> 00:01:54,973
At some point, maybe the test expression is "False"

32
00:01:54,973 --> 00:01:59,056
Once the test expression is "False", we go to the next instruction

33
00:01:59,056 --> 00:02:02,123
So this means a while loop can execute the block

34
00:02:02,123 --> 00:02:05,424
either zero times if the test expression was "False" at the beginning

35
00:02:05,424 --> 00:02:08,639
one time if it was "True" the first time, but "False" after that

36
00:02:08,639 --> 00:02:12,073
two times, three times...any number of times, it could keep going forever

37
00:02:12,073 --> 00:02:16,706
There's no requirement that guarantees the test expression eventually becomes "False"

38
00:02:16,706 --> 00:02:19,257
So here's an example of while loop.

39
00:02:19,257 --> 00:02:23,056
We start by initializing variable i, and we'll give it a value, zero

40
00:02:23,056 --> 00:02:27,939
then we have the "while", the test expression says i is less than ten

41
00:02:27,939 --> 00:02:32,406
So that means as long as this evaluates to "True", we'll evaluate the block

42
00:02:32,406 --> 00:02:35,806
and what the block does is print i and then add one to i

43
00:02:35,806 --> 00:02:38,040
So here's what happens when this executes

44
00:02:38,040 --> 00:02:42,391
So initially, the value of i is zero, i is less than ten

45
00:02:42,391 --> 00:02:45,090
So that means we'll enter the loop

46
00:02:45,090 --> 00:02:50,655
So that means the test expression is "True", so we'll enter the block, we'll print i

47
00:02:50,655 --> 00:02:54,540
So we'll see the value zero printed

48
00:02:54,540 --> 00:02:59,205
and then we'll do the assignment, so that will change the value of i

49
00:02:59,205 --> 00:03:05,205
We add one to i, so that's gonna be making the value of i now refers to one

50
00:03:05,205 --> 00:03:08,956
So if it was an "if", we would be done now, but because it's a "while", we keep going

51
00:03:08,956 --> 00:03:13,790
We go back, test again, if i is less than ten

52
00:03:13,790 --> 00:03:17,257
Now the value of i is one, which also is less than ten

53
00:03:17,257 --> 00:03:19,873
so we continue, go to the block again

54
00:03:19,873 --> 00:03:22,474
we are gonna print i, this time we'll see the value one

55
00:03:22,474 --> 00:03:27,190
Then we go to the next statement, increase the value of i by one

56
00:03:27,190 --> 00:03:29,757
that's gonna make the value of i two

57
00:03:29,757 --> 00:03:33,841
Now i refers to the number two

58
00:03:33,841 --> 00:03:38,807
Because it's a "while", we keep going, we go back to the test expression

59
00:03:38,807 --> 00:03:44,341
i is less than ten, still less than ten, now it's two, we are gonna print the two

60
00:03:44,341 --> 00:03:49,356
we are gonna add one that it will make the value of i three

61
00:03:50,756 --> 00:03:51,773
and we are gonna keep going

62
00:04:19,023 --> 00:04:24,456
Test again, and i is still less than ten, so we are gonna print i again

63
00:04:24,456 --> 00:04:33,040
we will print the value nine, then we add one, so that's gonna have one to nine, we'll get ten

64
00:04:33,040 --> 00:04:35,540
So that's the new value of i

65
00:04:39,490 --> 00:04:40,972
and we go back again

66
00:04:41,072 --> 00:04:48,723
and now we do i is less than ten, and now i has the value ten

67
00:04:48,723 --> 00:04:54,674
Ten is not less than ten, so that will be "False" and we are done with the while loop

68
00:04:54,674 --> 00:04:57,940
We'll continue with whatever statements here, in this case, there is none

69
00:04:57,990 --> 00:05:02,190
So then the loopÃ¢ÂÂÃ¢ÂÂwhat we've done, we've gone through it ten times

70
00:05:02,190 --> 00:05:04,323
we've printed the numbers from zero to nine

71
00:05:04,323 --> 00:05:10,340
The new value of i will be ten, if we do anything here that uses the value of i

72
00:05:10,340 --> 00:05:12,240
we'll see that the value of i is ten

73
00:05:12,240 --> 00:05:16,156
So to see that you understand while loops, we'll have a quiz

74
00:05:16,156 --> 00:05:18,924
So the question is what does this program do

75
00:05:18,924 --> 00:05:20,623
Here's the program

76
00:05:20,623 --> 00:05:24,306
We start by assigning zero to i

77
00:05:24,306 --> 00:05:32,223
We have a while loop, where the test is not equal to ten

78
00:05:32,223 --> 00:05:34,207
So the test is i is not equal to ten

79
00:05:34,207 --> 00:05:40,223
Then we have i equals i plus one, so we are assigning to i the value of i plus one

80
00:05:40,223 --> 00:05:43,056
and then we are printing i

81
00:05:43,056 --> 00:05:46,990
So this is similar to the example, but different in a couple of ways

82
00:05:46,990 --> 00:05:50,440
So it's up to you to see if you can figure out what the program does

83
00:05:50,440 --> 00:05:51,656
Try to figure out yourself

84
00:05:51,656 --> 00:05:54,623
You can certainly also try running this in the Python interpreter

85
00:05:54,623 --> 00:05:56,240
The choices are

86
00:05:56,240 --> 00:05:57,424
produce an error

87
00:05:57,424 --> 00:06:00,356
print out the numbers from zero to nine

88
00:06:00,356 --> 00:06:03,039
print out the numbers from one to nine

89
00:06:03,039 --> 00:06:06,055
print out the numbers from one to ten

90
00:06:06,055 --> 00:06:12,189
or the final choice is it runs forever or at least until our machine runs out of power

91
00:06:12,589 --> 00:06:15,257
So see if you can figure out what it does

92
00:06:15,257 --> 00:06:16,340
You can definitely try running it

93
00:06:16,340 --> 00:06:20,000
but try to figure out on your own before running it in the Python interpreter
