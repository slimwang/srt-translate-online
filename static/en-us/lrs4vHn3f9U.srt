1
00:00:00,452 --> 00:00:03,620
All right, that was a really
challenging coding task.

2
00:00:03,620 --> 00:00:08,150
It had many parts to it and it involved
a view that you've never used before.

3
00:00:08,150 --> 00:00:10,650
Let's walk through
the solution together.

4
00:00:10,650 --> 00:00:13,840
To start, I asked you to plan out
the steps that you need to do.

5
00:00:13,840 --> 00:00:16,160
The first step should be
to add this text field so

6
00:00:16,160 --> 00:00:18,250
that the user can enter in their name.

7
00:00:18,250 --> 00:00:20,880
The second step is that when
the order button is clicked,

8
00:00:20,880 --> 00:00:24,630
we want to get the name from the text
field and store it in a variable.

9
00:00:24,630 --> 00:00:27,270
Then the third step is to update
the order summary to actually

10
00:00:27,270 --> 00:00:27,880
show that name.

11
00:00:29,240 --> 00:00:30,460
Let's dive into this first step.

12
00:00:31,500 --> 00:00:34,800
We haven't added a text input
field in our app before, so

13
00:00:34,800 --> 00:00:36,250
let's Google search for how to do this.

14
00:00:37,270 --> 00:00:38,850
Since we're trying to
get input from the user,

15
00:00:38,850 --> 00:00:42,165
I'm going to search for
user input android.

16
00:00:42,165 --> 00:00:45,275
The result is a developer.android.com
site, so that looks good.

17
00:00:46,295 --> 00:00:49,765
This page describes best practices for
user input.

18
00:00:49,765 --> 00:00:55,455
It talks about touch gestures, as well
as keyboard input and game controllers.

19
00:00:55,455 --> 00:00:59,455
Keyboard input is what we want,
so let's click on the first link.

20
00:00:59,455 --> 00:01:02,045
I start by scrolling
through the page quickly.

21
00:01:02,045 --> 00:01:05,150
I see a bunch of XML examples,
which will be helpful.

22
00:01:05,150 --> 00:01:08,710
I notice that there is an opening
angle bracket and then the view name.

23
00:01:08,710 --> 00:01:11,550
In this case the view name
seems to be EditText.

24
00:01:12,610 --> 00:01:17,260
If I scroll through the other examples,
I also see that it's an EditText view.

25
00:01:17,260 --> 00:01:22,330
So, it seems like this view that takes
in keyboard input is called EditText.

26
00:01:22,330 --> 00:01:25,269
Another approach is to use
the Common Android Views cheat sheet.

27
00:01:26,330 --> 00:01:29,360
The EditText is also in
this list of views and

28
00:01:29,360 --> 00:01:32,670
this album description example is
similar to the name field in our app.

29
00:01:33,730 --> 00:01:35,680
Let's copy this XMLand
add it into our app.

30
00:01:36,850 --> 00:01:39,790
We want the name field at
the very top of our order form,

31
00:01:39,790 --> 00:01:42,910
above the toppings header,
so let's add it here.

32
00:01:42,910 --> 00:01:45,440
Immediately, there's an error
saying that it can't resolve

33
00:01:45,440 --> 00:01:46,449
this symbol for hint.

34
00:01:47,600 --> 00:01:51,430
This references the album description
text, but that was for the cheat sheet.

35
00:01:51,430 --> 00:01:55,640
Let's delete this and replace it
with our own hint, which is Name.

36
00:01:55,640 --> 00:01:58,640
Since we want the name field
at the top of our order form,

37
00:01:58,640 --> 00:02:01,910
above the toppings header,
let's paste it right here.

38
00:02:01,910 --> 00:02:05,150
It'll be the first child in
this vertical linear layout.

39
00:02:05,150 --> 00:02:08,109
Now let's make sure that all the
attributes are set the way that we want.

40
00:02:09,120 --> 00:02:10,220
First, we have the view ID.

41
00:02:10,220 --> 00:02:13,350
And it's called album_description_view.

42
00:02:13,350 --> 00:02:15,590
This is referring to
the cheat sheet example, so

43
00:02:15,590 --> 00:02:18,000
let's change this to
a more appropriate name.

44
00:02:19,020 --> 00:02:20,470
Let's call it the name field.

45
00:02:21,840 --> 00:02:24,419
Next we have width and
height which are familiar attributes.

46
00:02:26,000 --> 00:02:29,052
Currently, the width of the edit
text field is set to match parent.

47
00:02:29,052 --> 00:02:33,620
That means the field will be as
wide as the parent linear layout.

48
00:02:33,620 --> 00:02:34,960
Next, we have height.

49
00:02:34,960 --> 00:02:36,820
Height is set to be wrap content, so

50
00:02:36,820 --> 00:02:39,380
it will be as tall as
the content inside of it.

51
00:02:39,380 --> 00:02:42,630
These two values seem reasonable,
so let's leave them as is.

52
00:02:42,630 --> 00:02:44,230
Next we have hint.

53
00:02:44,230 --> 00:02:46,450
We haven't worked with
this attribute before and

54
00:02:46,450 --> 00:02:49,800
there's an error saying that
it can't resolve this string.

55
00:02:49,800 --> 00:02:51,580
Let's look up the documentation for

56
00:02:51,580 --> 00:02:55,020
EditText android to figure out
what this attribute means.

57
00:02:56,020 --> 00:03:00,220
By searching for edittext android we
can find the documentation page for it.

58
00:03:00,220 --> 00:03:05,040
There's a quick class overview here and
then a list of the XML attributes.

59
00:03:05,040 --> 00:03:08,900
It turns out that the edit text class
inherits from text view and view.

60
00:03:08,900 --> 00:03:12,250
So, that's why we have these
inherited XML attributes.

61
00:03:12,250 --> 00:03:14,720
Once they're expanded we can search for
android hint.

62
00:03:15,990 --> 00:03:18,230
All right this was the attribute
we were looking for.

63
00:03:18,230 --> 00:03:21,270
If we scroll over to
the right it says that

64
00:03:21,270 --> 00:03:24,860
this is the hint text to
display when the text is empty.

65
00:03:24,860 --> 00:03:27,850
This helps the user know what
they show type in to that field.

66
00:03:27,850 --> 00:03:31,870
In that app that I demonstrated to you,
the hint text said name.

67
00:03:31,870 --> 00:03:35,440
So in our code, we show erase
this string and type in name.

68
00:03:36,500 --> 00:03:37,750
Next we have the inputType.

69
00:03:37,750 --> 00:03:41,690
This is also a new attribute, so
let's look at the documentation.

70
00:03:41,690 --> 00:03:44,790
Now I'm going to search for
Android input type.

71
00:03:44,790 --> 00:03:46,100
It's listed here and

72
00:03:46,100 --> 00:03:50,830
the description says, this is the type
of data being placed in the text field.

73
00:03:50,830 --> 00:03:54,980
It's used to help an input method decide
how to let the user enter the text.

74
00:03:54,980 --> 00:03:58,240
This is a bit of a vague description,
so let's click on this attribute for

75
00:03:58,240 --> 00:03:59,610
more information.

76
00:03:59,610 --> 00:04:02,760
Here’s the full
description of InputType.

77
00:04:02,760 --> 00:04:05,780
These are the possible
values that we can set.

78
00:04:05,780 --> 00:04:09,750
In the example from the cheat sheet,
the XML said textMultiLine.

79
00:04:09,750 --> 00:04:14,120
Apparently this means that the edit text
field can allow multiple lines of text.

80
00:04:14,120 --> 00:04:16,470
We don’t expect someone’s
name to be really long,

81
00:04:16,470 --> 00:04:19,550
so one line of text
should be good enough.

82
00:04:19,550 --> 00:04:21,959
Let’s just use text as the input type.

83
00:04:21,959 --> 00:04:25,010
If I erase textMultiline and
start typing text,

84
00:04:25,010 --> 00:04:29,710
then I get a list of all the options
as auto complete suggestions.

85
00:04:29,710 --> 00:04:31,910
I'll just select text and hit enter.

86
00:04:31,910 --> 00:04:34,660
Now I'm going to run the app on
the device to check if the EditText

87
00:04:34,660 --> 00:04:36,180
field shows up.

88
00:04:36,180 --> 00:04:38,490
When the app launches,
I see the name field.

89
00:04:38,490 --> 00:04:39,410
Awesome.

90
00:04:39,410 --> 00:04:40,055
And I can type in to it as well.

91
00:04:40,055 --> 00:04:42,540
But actually,
it starts with a lowercase letter.

92
00:04:42,540 --> 00:04:47,260
When I type,
I want it to start as a capital letter.

93
00:04:47,260 --> 00:04:51,030
To fix this,
I can modify the input type here.

94
00:04:51,030 --> 00:04:52,350
Let's look at the other options here.

95
00:04:53,390 --> 00:04:57,713
There's textCapcharacters,
textCapwords, textCapsentences and

96
00:04:57,713 --> 00:05:00,210
a whole bunch of things.

97
00:05:00,210 --> 00:05:02,350
The ones about capitalization
look promising.

98
00:05:03,690 --> 00:05:05,530
After reading through
these descriptions,

99
00:05:05,530 --> 00:05:08,500
I think textCapwords could
be a good option to try.

100
00:05:08,500 --> 00:05:10,000
So, let's copy this and use it.

101
00:05:11,040 --> 00:05:13,699
And so, instead of text I'm
going to use textCapwords.

102
00:05:14,930 --> 00:05:16,170
Let's run the app again.

103
00:05:16,170 --> 00:05:19,415
Okay, now the keyboard starts
with the letters capitalized, so

104
00:05:19,415 --> 00:05:22,306
then I can just start typing the name,
and if I add a space,

105
00:05:22,306 --> 00:05:24,088
then the next word is capitalized.

106
00:05:24,088 --> 00:05:25,380
Awesome.

107
00:05:25,380 --> 00:05:29,220
The last thing I notice is that
we need a little bit of space

108
00:05:29,220 --> 00:05:31,645
in between this name field and
the toppings header.

109
00:05:31,645 --> 00:05:36,010
We've been adding 16 dp of vertical
spacing, so let's do the same here.

110
00:05:36,010 --> 00:05:38,816
I could add it as bottom margin
on the EditText field, but

111
00:05:38,816 --> 00:05:42,800
I'm just going to choose to add it as
top margin on the toppings header.

112
00:05:42,800 --> 00:05:45,700
Okay, now the spacing looks and
the name field is correct already.

113
00:05:46,730 --> 00:05:49,650
That took care of all
the XML changes for step one.

114
00:05:49,650 --> 00:05:51,970
Now we need to modify the java code.

115
00:05:51,970 --> 00:05:54,340
For step two,
when the order button is clicked,

116
00:05:54,340 --> 00:05:57,650
we want to get the name from the text
field and store it in a variable.

117
00:05:58,730 --> 00:06:03,140
It's easy for our human eyes to see
the name in this field, but the Android

118
00:06:03,140 --> 00:06:06,980
app doesn't know that we want to put
this name in to the order summary here.

119
00:06:08,070 --> 00:06:10,840
It's still using Lyla's hard coded name.

120
00:06:10,840 --> 00:06:13,190
We need to switch it to use this name.

121
00:06:13,190 --> 00:06:16,540
This is just like how we had to figure
out if the check box is checked or

122
00:06:16,540 --> 00:06:19,560
not in order to update
the order summary.

123
00:06:19,560 --> 00:06:22,560
We haven't learned how to read
text from EditText field, so

124
00:06:22,560 --> 00:06:23,570
let's Google search for that.

125
00:06:23,570 --> 00:06:29,190
I'm going to search for how do I get
text from the EditText field Android.

126
00:06:29,190 --> 00:06:30,390
The first result looks good.

127
00:06:30,390 --> 00:06:32,720
It's a stack overflow question.

128
00:06:32,720 --> 00:06:35,880
I can read the question but
I'm mostly looking for the answer.

129
00:06:35,880 --> 00:06:40,050
I can scan through quickly to see
if this page is helpful or not.

130
00:06:40,050 --> 00:06:43,510
This answer has a green check mark
by it and has a lot of upvotes, so

131
00:06:43,510 --> 00:06:45,610
I can read this more carefully.

132
00:06:45,610 --> 00:06:47,810
I start with the code snippet.

133
00:06:47,810 --> 00:06:51,820
It looks like this code would go inside
an activity class because we're calling

134
00:06:51,820 --> 00:06:53,030
FindViewById method.

135
00:06:53,030 --> 00:06:57,970
We're trying to search the view
hierarchy for a view with this ID.

136
00:06:57,970 --> 00:07:01,910
Once we find this view,
we're casting it to an EditText view and

137
00:07:01,910 --> 00:07:05,250
then storing that in
a variable called text.

138
00:07:05,250 --> 00:07:09,100
On the second line we're trying to
declare a string variable called value.

139
00:07:09,100 --> 00:07:10,330
And store this inside of it.

140
00:07:10,330 --> 00:07:14,751
Now this has a lot of parenthesis, and
dots, and words, but you might be able

141
00:07:14,751 --> 00:07:18,780
to guess that we're trying to get
the text out of this EditText field.

142
00:07:18,780 --> 00:07:23,260
And we're trying to store it inside
a string variable called value.

143
00:07:23,260 --> 00:07:27,120
Let's copy and paste this code in
to our app to see if it works.

144
00:07:27,120 --> 00:07:31,480
In the MainActivity class I'm going to
add the code in the submitOrder method.

145
00:07:31,480 --> 00:07:34,400
I chose this method because this is
where the order button is getting

146
00:07:34,400 --> 00:07:37,170
clicked and this is where we
want to read from the name field.

147
00:07:38,230 --> 00:07:41,260
I'm going to paste the code from
the stack overflow post into the top of

148
00:07:41,260 --> 00:07:41,820
the method.

149
00:07:43,110 --> 00:07:46,610
Immediately there's an error that
says it can't resolve this symbol.

150
00:07:46,610 --> 00:07:50,340
We need to replace this with
the ViewId for the name field.

151
00:07:50,340 --> 00:07:52,440
Switching back to our layout.xml,

152
00:07:52,440 --> 00:07:56,588
we gave the EditText field
a view id of name_field,

153
00:07:56,588 --> 00:08:01,410
so in the Java file, I'm going to
change this to be R.id.name_field.

154
00:08:01,410 --> 00:08:04,530
There's no more errors, so
I can try to run the app, but

155
00:08:04,530 --> 00:08:07,400
how will I know if this code
is actually working or not?

156
00:08:07,400 --> 00:08:10,520
I could add a log message here to verify

157
00:08:10,520 --> 00:08:14,300
that value actually holds
the name in this field.

158
00:08:14,300 --> 00:08:16,760
And here's the code for the log message.

159
00:08:16,760 --> 00:08:20,110
I'm printing out name colon and
then the value string.

160
00:08:21,110 --> 00:08:23,150
Value is a vague name for
this variable so

161
00:08:23,150 --> 00:08:25,260
I'm going to switch
it to be called name.

162
00:08:25,260 --> 00:08:28,460
That would be a little bit more
of a descriptive name for it.

163
00:08:28,460 --> 00:08:31,005
Speaking of which, I'm going to
change the variable name for

164
00:08:31,005 --> 00:08:33,760
EditText to also be name field.

165
00:08:33,760 --> 00:08:37,070
Text could be confused with
other things within our code.

166
00:08:37,070 --> 00:08:40,299
Now let's run the app and
check for this log message.

167
00:08:40,299 --> 00:08:40,840
Okay.

168
00:08:40,840 --> 00:08:42,190
If I fill out the order form and

169
00:08:42,190 --> 00:08:45,790
then hit the order button,
then I can check the logs here.

170
00:08:46,810 --> 00:08:51,210
I see a new message for MainActivity
that says Name: Antigravity Anthony.

171
00:08:51,210 --> 00:08:52,680
So, it worked.

172
00:08:52,680 --> 00:08:56,360
This code actually did pull
out the name from this field.

173
00:08:56,360 --> 00:08:59,620
Cool.
Now that we have the user's name in

174
00:08:59,620 --> 00:09:04,060
a variable, and we verified that with
logging, that it's the correct name,

175
00:09:04,060 --> 00:09:06,330
then we can update the order
summary to show this name.

176
00:09:07,380 --> 00:09:10,280
In order for the order summary
to show the correct name,

177
00:09:10,280 --> 00:09:13,860
we need to pass it as an input
parameter to this method.

178
00:09:13,860 --> 00:09:16,610
That means when we call
the create order summary method,

179
00:09:16,610 --> 00:09:20,450
we have to pass this name
variable in as an input argument.

180
00:09:20,450 --> 00:09:22,410
Let's make that change first.

181
00:09:22,410 --> 00:09:24,840
If I add name as an input argument,

182
00:09:24,840 --> 00:09:29,660
I get an error because the method call
doesn't match the method signature.

183
00:09:29,660 --> 00:09:31,950
Scrolling down to the method definition,

184
00:09:31,950 --> 00:09:35,670
I can add String name
as an input parameter.

185
00:09:35,670 --> 00:09:38,410
I'll also update the Java doc as well.

186
00:09:38,410 --> 00:09:41,600
Now, inside the createOrderSummary
method, I can use this variable.

187
00:09:41,600 --> 00:09:46,630
I'm going to erase the hard coded name
and then concatenate this name variable.

188
00:09:47,930 --> 00:09:51,360
So, to recap, we're getting
the name from the name_field and

189
00:09:51,360 --> 00:09:55,590
then passing it as an input to
the createOrderSummary method.

190
00:09:55,590 --> 00:09:59,620
Inside this method, we can append
the name to the order summary.

191
00:09:59,620 --> 00:10:01,720
Let's run the app to check our code.

192
00:10:01,720 --> 00:10:05,200
Once the app launches, I can type in
a name, select some toppings, and

193
00:10:05,200 --> 00:10:06,790
then change the quantity.

194
00:10:06,790 --> 00:10:08,600
Then I can hit the order button.

195
00:10:08,600 --> 00:10:11,190
Now I see that the order summary
contains the name that I typed

196
00:10:11,190 --> 00:10:12,160
in earlier.

197
00:10:12,160 --> 00:10:13,458
Woohoo!

198
00:10:13,458 --> 00:10:17,140
If I change the name and
then hit order, then it updates again.

199
00:10:17,140 --> 00:10:17,800
That's exciting.

200
00:10:17,800 --> 00:10:22,440
Now that everything in the app is
working, I can remove this log message.

201
00:10:22,440 --> 00:10:24,900
I can run the app again one more
time to make sure that things work.

202
00:10:26,000 --> 00:10:28,640
Now let's go back and
answer these quiz questions.

203
00:10:28,640 --> 00:10:31,700
The view that we added to
our app is called EditText.

204
00:10:31,700 --> 00:10:35,260
The second question asks
what Java method we called

205
00:10:35,260 --> 00:10:37,010
to get the text from this view.

206
00:10:38,120 --> 00:10:40,910
We can answer this by
going back to our code.

207
00:10:40,910 --> 00:10:42,885
We search the view hierarchy for

208
00:10:42,885 --> 00:10:46,710
theEditText java object that
represented the name field.

209
00:10:46,710 --> 00:10:49,570
We store that in a variable
called nameField.

210
00:10:49,570 --> 00:10:52,310
And on that object we called the method.

211
00:10:52,310 --> 00:10:56,310
We called the getText method,
which takes no input arguments and

212
00:10:56,310 --> 00:10:58,500
it has a return value of another object.

213
00:10:59,510 --> 00:11:01,460
That leads us to our third question.

214
00:11:01,460 --> 00:11:04,790
What's the return data type
of the getText method?

215
00:11:04,790 --> 00:11:06,330
The answer is editable and

216
00:11:06,330 --> 00:11:09,540
I figured this out by looking
at the Android documentation.

217
00:11:09,540 --> 00:11:14,320
For the Edit Text Class, if you scroll
down you can see all the public methods.

218
00:11:14,320 --> 00:11:17,970
GetText is listed as a method as
returning the text that the text view is

219
00:11:17,970 --> 00:11:19,350
displaying.

220
00:11:19,350 --> 00:11:21,960
The return data type is editable.

221
00:11:21,960 --> 00:11:27,280
This returns an editable object, and we
can call another method on this object

222
00:11:27,280 --> 00:11:30,750
by adding the dot notation and
then the method name.

223
00:11:30,750 --> 00:11:35,730
So in this case we're calling the
toString method on the editable object,

224
00:11:35,730 --> 00:11:38,790
and the toString method
returns a string, so

225
00:11:38,790 --> 00:11:41,050
that can be stored in the name variable.

226
00:11:42,080 --> 00:11:45,880
This is a more advanced concept, and
it's called chaining method calls.

227
00:11:45,880 --> 00:11:49,560
Because we're calling one method,
getting the return value and

228
00:11:49,560 --> 00:11:52,800
then calling another method and
if this returns an object,

229
00:11:52,800 --> 00:11:53,980
you can call another method on it.

230
00:11:53,980 --> 00:11:57,690
And you can keep calling
methods one after the other.

231
00:11:57,690 --> 00:12:01,230
The reason we chain method calls
is because getText method returns

232
00:12:01,230 --> 00:12:02,650
an editable object.

233
00:12:02,650 --> 00:12:05,920
An editable object cannot be
stored inside a string variable,

234
00:12:05,920 --> 00:12:09,980
as seen by this Android Studio
error saying incompatible types.

235
00:12:09,980 --> 00:12:14,410
So, if we add the toString method, then
the return value of this whole thing is

236
00:12:14,410 --> 00:12:17,790
a string, and
that can be stored in the name variable.

237
00:12:17,790 --> 00:12:20,550
We can verify this by
checking the documentation.

238
00:12:20,550 --> 00:12:23,160
The getText method returns
an editable object.

239
00:12:23,160 --> 00:12:25,660
If I click on this,
in the editable class,

240
00:12:25,660 --> 00:12:27,880
we should find a method called toString.

241
00:12:27,880 --> 00:12:28,600
Scrolling down,

242
00:12:28,600 --> 00:12:32,830
in the public method section,
I don't see toString listed here.

243
00:12:32,830 --> 00:12:34,670
But there are inherited methods.

244
00:12:34,670 --> 00:12:38,520
So, if I open this drop down,
then I see that toString is a method.

245
00:12:38,520 --> 00:12:40,930
And the return value is string.

246
00:12:40,930 --> 00:12:44,850
So, to hammer it home one more time,
this method call returns an editable

247
00:12:44,850 --> 00:12:48,000
object, and then we can call
the toString method on it.

248
00:12:48,000 --> 00:12:50,670
The toString method returns a string and
so

249
00:12:50,670 --> 00:12:53,680
this whole thing on the right
hand side here, returns a string.

250
00:12:53,680 --> 00:12:57,150
And that can be stored in
the string variable called name.

251
00:12:58,270 --> 00:13:00,180
Wow, that was a really long coding task.

252
00:13:01,330 --> 00:13:04,070
You can take a quick break now and
then come back because we need to

253
00:13:04,070 --> 00:13:07,620
figure out how to change the price
based on what the user ordered.

254
00:13:07,620 --> 00:13:09,740
We're going to do this by
learning about control flow.
