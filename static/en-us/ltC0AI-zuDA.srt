1
00:00:00,240 --> 00:00:02,760
In this course, we have learned about a large number of reasoning methods.

2
00:00:02,760 --> 00:00:06,220
Here are some of them. We could have added a lot more here, for example,

3
00:00:06,220 --> 00:00:10,790
plan refinement or logic or scripts. Typically when you and

4
00:00:10,790 --> 00:00:14,290
I program an AI agent, we pick a method, and we program that

5
00:00:14,290 --> 00:00:19,640
method into the agent. One unanswered question is, how might an agent know about

6
00:00:19,640 --> 00:00:23,580
all of these methods and the autonomously select the right method for

7
00:00:23,580 --> 00:00:27,260
a given problem? This is the problem of strategy selection and

8
00:00:27,260 --> 00:00:31,942
metacognition helps with strategy selection. Given a problem, and given that all

9
00:00:31,942 --> 00:00:36,171
of these matters are relative to the agent to potentially address problem.

10
00:00:36,171 --> 00:00:40,830
Metacognition is select between these matters using several criteria.

11
00:00:40,830 --> 00:00:44,825
First, each of these methods require some knowledge of the world. For example,

12
00:00:44,825 --> 00:00:47,320
case-based reasoning requires knowledge of cases.

13
00:00:47,320 --> 00:00:50,110
Constraint propagation requires knowledge of constraint. And so

14
00:00:50,110 --> 00:00:54,860
on. Metacognition is select one particular method, depending on

15
00:00:54,860 --> 00:01:00,610
what knowledge is exactly available for addressing that specific input problem.

16
00:01:00,610 --> 00:01:04,330
If that specific input problem, case does not have a label, then clearly

17
00:01:04,330 --> 00:01:07,520
the method of case-based reasoning cannot be used. If, on the other hand,

18
00:01:07,520 --> 00:01:11,870
constraints are available, the constraint propagation might be a useful method.

19
00:01:11,870 --> 00:01:15,350
Second, if the knowledge required by multiple methods is available, then

20
00:01:15,350 --> 00:01:19,190
metacognition must select between the competing methods. Under the criteria for

21
00:01:19,190 --> 00:01:22,830
selecting between these methods might be computational efficiency.

22
00:01:22,830 --> 00:01:25,440
For a given class of problems, some of these methods might be

23
00:01:25,440 --> 00:01:29,390
computationally more efficient than other methods. As an example,

24
00:01:29,390 --> 00:01:33,640
if the problem is very close to a previously encountered case, then a case-based

25
00:01:33,640 --> 00:01:36,890
reasoning might be computationally a very good method to use. On the other hand,

26
00:01:36,890 --> 00:01:39,970
if the new problem is very different from a previously encountered case,

27
00:01:39,970 --> 00:01:43,430
then case-based reasoning may not be a computationally efficient method.

28
00:01:43,430 --> 00:01:47,140
We've come across this issue of computational efficiency earlier in this class.

29
00:01:47,140 --> 00:01:48,900
For example, when we were discussing generate and

30
00:01:48,900 --> 00:01:52,330
test. If the problem is simple, then it is potentially possible to

31
00:01:52,330 --> 00:01:56,400
write a generator that will produce good solutions to it. On the other hand, for

32
00:01:56,400 --> 00:01:59,760
a very complex problem, the process of generating good solutions may be

33
00:01:59,760 --> 00:02:03,300
computationally inefficient. Similarly, if there is a single goal,

34
00:02:03,300 --> 00:02:06,630
then the method of means-ends analysis may be a good choice. On the other hand,

35
00:02:06,630 --> 00:02:08,880
if there are multiple goals that are interacting with each other,

36
00:02:08,880 --> 00:02:11,860
the means-ends analysis can run into all kind of cul-de-sacs, and

37
00:02:11,860 --> 00:02:16,270
have poor computational efficiency. A third criteria that metacognition can

38
00:02:16,270 --> 00:02:20,340
use to select between these various methods is quality of solutions.

39
00:02:20,340 --> 00:02:23,380
Some methods come with guarantees of quality of solutions. For example,

40
00:02:23,380 --> 00:02:27,410
logic is a method of provide some guarantees of the correctness of solutions.

41
00:02:27,410 --> 00:02:31,380
Thus, if this is a problem for which computational efficiency is not important,

42
00:02:31,380 --> 00:02:34,960
where the quality of solutions is critical, you might want to use the method of

43
00:02:34,960 --> 00:02:38,050
logic. Because it provides some guarantees of the quality, although it

44
00:02:38,050 --> 00:02:42,480
might be computationally inefficient. The same kind of analysis holds for

45
00:02:42,480 --> 00:02:45,110
selecting between different learning methods. Once again,

46
00:02:45,110 --> 00:02:48,140
given a problem, the agent may have multiple learning methods for

47
00:02:48,140 --> 00:02:51,120
addressing their particular problem. What method should the learning agent

48
00:02:51,120 --> 00:02:54,200
choose? That depends partly on the nature of the problem.

49
00:02:54,200 --> 00:02:57,120
Some methods are applicable to that problem, and some methods may not be

50
00:02:57,120 --> 00:03:01,940
applicable to that problem. Second, for example, in this learning task,

51
00:03:01,940 --> 00:03:05,900
if the examples come in one at a time we might use incremental concept learning.

52
00:03:05,900 --> 00:03:09,245
On the other hand, if all the examples are given together, then we might use

53
00:03:09,245 --> 00:03:13,000
decision-tree learning or identification-tree learning. Another criteria for

54
00:03:13,000 --> 00:03:16,100
deciding between these methods could be computational efficiency that

55
00:03:16,100 --> 00:03:18,550
lay down what the criteria could have to do with quality of solutions.
