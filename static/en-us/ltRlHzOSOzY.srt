1
00:00:00,250 --> 00:00:03,240
So, now let's look at the process of pipeline stalls and

2
00:00:03,240 --> 00:00:06,780
how they can happen. Let's say we have a five stage pipeline and

3
00:00:06,780 --> 00:00:11,680
this is where we fetch the instruction, then we decode it and read registers,

4
00:00:11,680 --> 00:00:16,360
then we use the ALU to compute the result of the instruction, then we access

5
00:00:16,360 --> 00:00:20,350
memory. This is a loaded store instruction. And then we write the result of

6
00:00:20,350 --> 00:00:26,030
the instruction to a register. This is what happens in cycle one, cycle two,

7
00:00:26,030 --> 00:00:31,040
cycle three, etc. Supposed we have a load instruction here in our pipeline. And

8
00:00:31,040 --> 00:00:35,730
it's going in to R1 something from memory. While this load is in

9
00:00:35,730 --> 00:00:40,870
the ALU stage here computing the address. So it hasn't accessed memory yet.

10
00:00:40,870 --> 00:00:45,470
Suppose we have an add instruction that needs to use the R1 and

11
00:00:45,470 --> 00:00:49,870
this instruction is already reading registers here so it can compute the result

12
00:00:49,870 --> 00:00:54,800
in the next stage, and we have a subsequence instruction here, let's say,

13
00:00:54,800 --> 00:01:00,160
another add that adds our 2 to 1 and produces our 3.

14
00:01:00,160 --> 00:01:03,330
So now the problem is that this ADD here,

15
00:01:03,330 --> 00:01:09,480
is reading the wrong value of the register. So, if we let it proceed further,

16
00:01:09,480 --> 00:01:12,810
because in the next cycle, this load will be here and

17
00:01:12,810 --> 00:01:16,650
now, it's actually accessing memory. But by then, it's too late. This ADD,

18
00:01:16,650 --> 00:01:23,370
if it moves here will use the value of R1 that is the wrong one.

19
00:01:23,370 --> 00:01:27,840
It's the value of the R1 before the load actually produced a value and

20
00:01:27,840 --> 00:01:32,680
this is where we get a processor stall. Pretty much what needs to happen is,

21
00:01:32,680 --> 00:01:39,850
the add needs to stay here until it gets the correct value of R1 from the load.

22
00:01:39,850 --> 00:01:44,530
Because the add is stuck here, the next instruction also needs to

23
00:01:44,530 --> 00:01:50,370
stay where it is, because it cannot move here. That means that in our pipeline,

24
00:01:50,370 --> 00:01:55,250
now we have a bubble, just like we did in the production line. We can have

25
00:01:55,250 --> 00:02:00,600
more than one bubble because of a single dependence between instructions. So

26
00:02:00,600 --> 00:02:05,316
in this example, next cycle, the load has loaded the value

27
00:02:05,316 --> 00:02:10,332
from memory into R1 and is now writing that value to a register.

28
00:02:10,332 --> 00:02:16,744
The ADD needs to repeat the read of R1 because in this cycle here,

29
00:02:16,744 --> 00:02:21,302
it still didn't get the correct value of R1.

30
00:02:21,302 --> 00:02:26,461
Although the load was now loading that value from memory the R1 was not

31
00:02:26,461 --> 00:02:31,555
written yet. So, now the load is writing, the ADD repeats the read and

32
00:02:31,555 --> 00:02:36,853
because the ADD is still here, the next instruction is still stuck here and

33
00:02:36,853 --> 00:02:41,920
that means that we have two cycles worth of stall. In this cycle it could be

34
00:02:41,920 --> 00:02:46,230
that for example the load is writing to R1 in the first half of the cycle and

35
00:02:46,230 --> 00:02:50,530
this ADD is reading R1 in the second half of the cycle. So next cycle,

36
00:02:50,530 --> 00:02:55,860
the ADD can move on. But it could be that the load actually takes a full

37
00:02:55,860 --> 00:02:59,920
cycle to write the result, in which case we will have another cycle stalling.

38
00:02:59,920 --> 00:03:01,690
So let's suppose that we can do this,

39
00:03:01,690 --> 00:03:06,220
that we can write R1 and then read it in the same cycle. If that is the case,

40
00:03:06,220 --> 00:03:12,300
the next cycle, which is cycle four, we will have the load leaves the pipeline.

41
00:03:12,300 --> 00:03:16,910
The pipeline bubble here moves forward in the pipeline, this pipeline bubble

42
00:03:16,910 --> 00:03:21,980
moves forward in the pipeline and now the ad finally moves on. So the next

43
00:03:21,980 --> 00:03:26,970
instruction after this side can move on. We can fetch the next instruction, and

44
00:03:26,970 --> 00:03:32,230
so on. So as you can see here. A processor pipeline stall creates

45
00:03:32,230 --> 00:03:37,430
a problem because normally every cycle after the load leaves, every cycle will

46
00:03:37,430 --> 00:03:42,310
have the next instruction leave, but in this case after the load leaves, there

47
00:03:42,310 --> 00:03:47,540
are two cycles worth of pipeline bubble that finish before the next instruction.

48
00:03:47,540 --> 00:03:51,700
So, really instead of having just one cycle for the load, one cycle for

49
00:03:51,700 --> 00:03:55,580
the add and so on to finish, we now have one cycle for the load,

50
00:03:55,580 --> 00:04:00,020
2 cycles worth of not finishing anything and then the ADD and so on and

51
00:04:00,020 --> 00:04:05,340
that causes our pipeline to have a CPI of more than 1.

52
00:04:05,340 --> 00:04:11,370
If we count the 3 instructions, 1, 2, 3 instructions we'll finish over 5 cycles.

53
00:04:11,370 --> 00:04:16,190
Three cycles for them and 2 cycles for the bubble. So really, our CPI is

54
00:04:16,190 --> 00:04:22,650
significantly larger than one. A processor pipeline may also need to be flushed.

55
00:04:22,650 --> 00:04:25,960
This is an example that we didn't have in our car assembly line.
