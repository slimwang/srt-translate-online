1
00:00:00,000 --> 00:00:04,000
In a project as big as a JavaScript interpreter in a web browser,

2
00:00:04,000 --> 00:00:06,000
we will make mistakes.

3
00:00:06,000 --> 00:00:09,000
And in fact, even a single word flip can be deadly.

4
00:00:09,000 --> 00:00:12,000
Consider this hypothetical utterance from Joan of Arc:

5
00:00:12,000 --> 00:00:16,000
I would rather have a sandwich then be burned alive.

6
00:00:16,000 --> 00:00:19,000
Up here we've got the sandwich, here we've got the fire.

7
00:00:19,000 --> 00:00:23,000
The meaning of this single word really, really matters in this sentence.

8
00:00:23,000 --> 00:00:27,000
Then actually means "and subsequently."

9
00:00:27,000 --> 00:00:32,000
For most of us, I would rather have a sandwich and subsequently be burned alive

10
00:00:32,000 --> 00:00:34,000
is not actually what we would go for.

11
00:00:34,000 --> 00:00:39,000
So the difference between then and than--a single word in a natural language--

12
00:00:39,000 --> 00:00:42,000
changes the meaning almost entirely.

13
00:00:42,000 --> 00:00:45,000
Joan of Arc was a French national heroine and martyr,

14
00:00:45,000 --> 00:00:49,000
and although it's easy to imagine these sorts of single word flips in natural languages,

15
00:00:49,000 --> 00:00:54,000
we're going to see the same problem in constructed languages like JavaScript or HTML.

16
00:00:54,000 --> 00:00:58,000
We're going to have to get every word right in order for the meaning to be correct,

17
00:00:58,000 --> 00:01:00,000
and this is a big project.

18
00:01:00,000 --> 00:01:06,000
That means we will need to focus some of our efforts on removing or finding mistakes,

19
00:01:06,000 --> 00:01:09,000
and that process is called debugging in computer science.

20
00:01:09,000 --> 00:01:14,000
For example, suppose when we were writing out the if-then-else part

21
00:01:14,000 --> 00:01:18,000
of our JavaScript interpreter we made a single mistake.

22
00:01:18,000 --> 00:01:21,000
We pull the conditional expression from the oneth element of the tree,

23
00:01:21,000 --> 00:01:25,000
we pull the then branch from the second element of the tree,

24
00:01:25,000 --> 00:01:28,000
and we pull the else branch from the third element of the tree.

25
00:01:28,000 --> 00:01:31,000
Then we evaluate the conditional expression in the environment,

26
00:01:31,000 --> 00:01:35,000
and if it's true, we execute the else statements,

27
00:01:35,000 --> 00:01:38,000
and if it's false, we execute the then branch statements.

28
00:01:38,000 --> 00:01:40,000
Did you catch the mistake?

29
00:01:40,000 --> 00:01:42,000
We've swapped these 2 lines.

30
00:01:42,000 --> 00:01:46,000
If the conditional comes out true, we will mistakenly go to the else branch.

31
00:01:46,000 --> 00:01:50,000
If the conditional comes out false, we'll mistakenly go to the then branch.

32
00:01:50,000 --> 00:01:52,000
We'll get almost every program incorrect.

33
00:01:52,000 --> 00:01:56,000
But not actually every program, and this is a skill in debugging.

34
00:01:56,000 --> 00:02:00,000
What we want to do is make a test case, a sample JavaScript programmer web page,

35
00:02:00,000 --> 00:02:06,000
that will show off this mistake, where the answer won't be what we expected.

36
00:02:06,000 --> 00:02:12,000
So here I've written down 4 candidate JavaScript programs that we might use

37
00:02:12,000 --> 00:02:15,000
as test cases to notice this mistake.

38
00:02:15,000 --> 00:02:18,000
In this multiple multiple choice quiz, what I would like you to do

39
00:02:18,000 --> 00:02:23,000
is select each test case that will actually show off the mistake.

40
00:02:23,000 --> 00:02:27,000
That is, imagine our interpreter has this bug in it and we feed it this input.

41
00:02:27,000 --> 00:02:32,000
Will we get the same answer we expect from reasoning in our minds,

42
00:02:32,000 --> 00:02:34,000
or will we get something different?

43
00:02:34,000 --> 00:02:37,000
If we get something different than what we expect, then we know there's a bug,

44
00:02:37,000 --> 00:02:39,000
and we can get started on fixing it.

45
00:02:39,000 --> 99:59:59,999
Which of these inputs will highlight this bug?
