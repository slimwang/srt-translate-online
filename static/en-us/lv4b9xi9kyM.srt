1
00:00:00,210 --> 00:00:02,230
So now we have this 128 vector.

2
00:00:02,230 --> 00:00:05,470
And also remember we've been smoothing by these Gaussians so

3
00:00:05,470 --> 00:00:07,360
the middle has more weight.

4
00:00:07,360 --> 00:00:12,650
In fact, and I mentioned this before in order to make these things work,

5
00:00:12,650 --> 00:00:13,868
we ensured smoothness.

6
00:00:13,868 --> 00:00:16,540
In fact I think in, in Davy Lowe's work,

7
00:00:16,540 --> 00:00:19,460
they originally talked about sort of trilinear interpolation.

8
00:00:19,460 --> 00:00:21,500
What they meant, was that.

9
00:00:21,500 --> 00:00:25,560
Points get smooth and they contribute not only to bins they,

10
00:00:25,560 --> 00:00:29,000
they actually overlap the histogram bins a little bit.

11
00:00:29,000 --> 00:00:36,110
And that way each pixel corresponds multiple times, is, is used multiple times.

12
00:00:36,110 --> 00:00:42,600
In different gradients and also they, they vote in to adjacent orientations.

13
00:00:42,600 --> 00:00:44,070
The details don't matter, so much.

14
00:00:44,070 --> 00:00:47,950
But what it means is, is that if you get a small shift in where

15
00:00:47,950 --> 00:00:51,750
this neighborhood of eight by eight, or 16 by 16 pixels lands.

16
00:00:51,750 --> 00:00:54,990
You don't get, a large change in the scriptor.

17
00:00:54,990 --> 00:00:56,110
And that's really important,

18
00:00:56,110 --> 00:00:59,080
because when you re-localize a point from one image to the next,

19
00:00:59,080 --> 00:01:02,510
you're not going to land, you may not land in exactly the same spot.

20
00:01:02,510 --> 00:01:06,420
So the smoothness allows you to get a very slow change,

21
00:01:06,420 --> 00:01:08,540
in the descriptor as you move just a little bit.

22
00:01:08,540 --> 00:01:10,360
And that's really important.

23
00:01:10,360 --> 00:01:14,890
This also is why I said it takes effort to make these SIFT libraries function.

24
00:01:14,890 --> 00:01:20,790
One of the things you don't want to do is remember.

25
00:01:20,790 --> 00:01:22,960
The magnitude, of the gradient.

26
00:01:22,960 --> 00:01:23,890
I mean I'm not sure I said this.

27
00:01:23,890 --> 00:01:25,540
That the, that it's weighted by the,

28
00:01:25,540 --> 00:01:29,860
the gradient, it's actually a weighted magnitude gets used in the histogram.

29
00:01:29,860 --> 00:01:36,230
Well, a problem with that is, if something has very high magnitude.

30
00:01:36,230 --> 00:01:38,180
It's going to dominate the votes, or

31
00:01:38,180 --> 00:01:41,470
it's going to dominate the descriptor in a way you might not like.

32
00:01:41,470 --> 00:01:45,500
And so, one of the things that they advocate doing is after you

33
00:01:45,500 --> 00:01:48,120
rotate your normalize the rotation,

34
00:01:48,120 --> 00:01:50,910
clip the magnitude of the gradient to some maximum, okay?

35
00:01:50,910 --> 00:01:54,820
So you don't let it get more than a certain amount.

36
00:01:54,820 --> 00:01:59,060
Talks here about point two, the which one you use is a function of

37
00:01:59,060 --> 00:02:01,350
your know imagery but the idea is that it gets clipped.

38
00:02:01,350 --> 00:02:06,380
The second thing that you do in order to prevent any sort of illumination change

39
00:02:06,380 --> 00:02:10,860
from really, harming you is that you take this 128 long vector and

40
00:02:10,860 --> 00:02:13,380
you normalize it to be magnitude 1.

41
00:02:13,380 --> 00:02:18,650
And that way if, if more gradient vectors show up because you scale everything.

42
00:02:18,650 --> 00:02:20,030
Essentially things are better behaved,

43
00:02:20,030 --> 00:02:24,510
because you're going to be comparing these descriptors one to another.

44
00:02:24,510 --> 00:02:27,100
And you want them to be, sort of a similar magnitude.

45
00:02:27,100 --> 00:02:30,430
So by normalizing to one, they're all exactly the same magnitude.

46
00:02:30,430 --> 00:02:33,810
And it's just the distribution within that vector that gets used to,

47
00:02:33,810 --> 00:02:34,480
to compare them.

48
00:02:35,560 --> 00:02:38,790
I suspect that has function of exactly how you do the comparison.

49
00:02:38,790 --> 00:02:40,840
If you were doing dot product kinds of things,

50
00:02:40,840 --> 00:02:43,270
the magnitude normalization might matter a little bit less.
