1
00:00:00,000 --> 00:00:04,639
Since you have so many different tasks to complete in this problem, let's go through them one by one.

2
00:00:04,639 --> 00:00:06,909
First things first the moon position function.

3
00:00:06,909 --> 00:00:10,649
Now we ask to start the moon off at moon initial angle.

4
00:00:10,649 --> 00:00:14,459
So we define moon angle or the angle of the moon at a given time

5
00:00:14,459 --> 00:00:22,759
as moon initial angle plus 2Ï€ times the time that has past divided by the total period of the moon.

6
00:00:22,759 --> 00:00:27,670
So this is basically the fraction of its orbit that the moon has gone through so far.

7
00:00:27,670 --> 00:00:30,759
We then created a 2-dimensional array for the moon's position

8
00:00:30,759 --> 00:00:33,869
but looks like the horizontal position in this drawing is equal to

9
00:00:33,869 --> 00:00:37,619
the distance between the earth and the moon or moon distance

10
00:00:37,619 --> 00:00:43,719
times the cosine of moon angle and the vertical position is the same except use a sine instead.

11
00:00:43,719 --> 00:00:46,669
So next comes the function of the acceleration of the spacecraft.

12
00:00:46,669 --> 00:00:49,709
Now let's talk about gravity for a second--we know that the gravitational force

13
00:00:49,709 --> 00:00:56,619
that one body feels as a result of another body is dictated by Newton's law of universal gravitation.

14
00:00:56,619 --> 00:01:01,689
We know that our spaceship is going to be pulled towards the earth and also towards the moon.

15
00:01:01,689 --> 00:01:03,409
So we need to take into account how the

16
00:01:03,409 --> 00:01:05,939
acceleration would be affected by both of these objects.

17
00:01:05,939 --> 00:01:08,629
Since we're interested in acceleration rather than force,

18
00:01:08,629 --> 00:01:12,648
we can use Newton's second law along this law of gravitation

19
00:01:12,648 --> 00:01:15,689
to come up with an expression for the total acceleration of the spaceship.

20
00:01:15,689 --> 00:01:20,659
To figure this out, however, we need information about the relative position of our three objects.

21
00:01:20,659 --> 00:01:25,989
So we started in the acceleration function by declaring a new variable called moon pause,

22
00:01:25,989 --> 00:01:29,728
which is just equal to the moon's position at any given time.

23
00:01:29,728 --> 00:01:34,978
Now we can define a vector from the moon to the spaceship, this green vector right here,

24
00:01:34,978 --> 00:01:38,639
as just the position vector of the spacecraft minus moon_pos.

25
00:01:38,639 --> 00:01:42,558
Since moon_pos is just the position vector of the moon.

26
00:01:42,558 --> 00:01:47,729
Then we can define a new variable called acc or at least that's what I'm going to pronounce this word.

27
00:01:47,729 --> 00:01:50,348
Using the equation of the acceleration due to gravity.

28
00:01:50,348 --> 00:01:53,618
We really owe Isaac Newton a lot of credit in this problem

29
00:01:53,618 --> 00:01:55,388
consider we're using two of his different laws.

30
00:01:55,388 --> 00:01:59,709
So you can see modifying his law of gravitation using the second law give us an expression

31
00:01:59,709 --> 00:02:03,689
for the vector sum of the total acceleration of the spacecraft.

32
00:02:03,689 --> 00:02:06,759
Here everything with a subscript as it stands for spacecraft.

33
00:02:06,759 --> 00:02:10,709
Now our next task was to make the velocity changes happen.

34
00:02:10,709 --> 00:02:14,769
If the first shift in velocity has not happened yet but it's after the time

35
00:02:14,769 --> 00:02:20,217
at which it was suppose to happen, then we decreased the velocity by 7.04 m/s

36
00:02:20,217 --> 00:02:22,839
but keep the spaceship moving in the same direction

37
00:02:22,839 --> 00:02:29,709
by dividing our quantity by the norm of the velocity vector and then multiplying it by this vector again.

38
00:02:29,709 --> 00:02:31,819
We do pretty much the same thing for boost

39
00:02:31,819 --> 00:02:36,739
but this time we replaced the time with the correct value 212,100 seconds.

40
00:02:36,739 --> 00:02:40,669
In each case since you've changed the velocity in the way it's prescribed,

41
00:02:40,669 --> 00:02:42,789
you can change the proper booleans to true.

42
00:02:42,789 --> 00:02:46,729
Now finally we get expressions for velocity and position using Heun's method.

43
00:02:46,729 --> 00:02:50,758
Right here we have a simple translation of his equations into Python.

44
00:02:50,758 --> 00:02:54,789
You can see Euler values with the e's and Heun's values with the h's .

45
00:02:54,789 --> 00:03:00,748
At the end of this, we set velocity and position equal to velocity h and position h.

46
00:03:00,748 --> 00:03:05,669
So that each time we go through another iteration, they will shift to equal the new Heun's values.

47
00:03:05,669 --> 00:03:08,539
Now in order to adjust the step size for each position of the spacecraft,

48
00:03:08,539 --> 00:03:13,619
we need to know the difference between Heun's and Euler values for position and velocity.

49
00:03:13,619 --> 00:03:16,629
You'll remember that we use this to calculate the error.

50
00:03:16,629 --> 00:03:21,659
Then the new step size is set as prescribed here in this line of code.

51
00:03:21,659 --> 00:03:25,729
Since we're up finishing up the step in which h, the current step size is valid,

52
00:03:25,729 --> 00:03:30,668
we add this to the current time and now that the next time step is about to happen,

53
00:03:30,668 --> 00:03:34,008
we set h equal to h new--updating its value.

54
00:03:34,008 --> 00:03:37,649
So this explains why we use h in the equations for Heun's method

55
00:03:37,649 --> 00:03:40,648
but are still able to lock the value cycle.

56
00:03:40,648 --> 00:03:44,639
Since our program is now complete, we can run it using different values for boost.

57
00:03:44,639 --> 00:03:48,587
We're getting zero as a value to start out with but let's try -10 first

58
00:03:48,587 --> 00:03:52,129
so we can check out one extreme of the range that we gave you.

59
00:03:52,129 --> 00:03:58,489
But a boost of -10 m/s, we can tell that the ship is pretty far away from touching the earth

60
00:03:58,489 --> 00:04:02,589
and then when we extend the path out again, it travels past the moon's orbit.

61
00:04:02,589 --> 00:04:04,619
We can clearly tell that this is not right.

62
00:04:04,619 --> 00:04:07,630
We definitely want to make sure that the crew actually gets back to the earth

63
00:04:07,630 --> 00:04:09,660
not just circles around again.

64
00:04:09,660 --> 00:04:11,310
Let's try a different value.

65
00:04:11,310 --> 00:04:16,738
Now since 100 is the largest value that we gave you to try, let's see what happens with that.

66
00:04:16,738 --> 00:04:18,768
Well that certainly looks different from the last plot that we saw.

67
00:04:18,768 --> 00:04:21,939
Though, this also doesn't look exactly right.

68
00:04:21,939 --> 00:04:26,669
So up close we can tell that it looks like the ship is actually crashing into the earth

69
00:04:26,669 --> 00:04:29,709
and that's definitely not what we want to happen either.

70
00:04:29,709 --> 00:04:32,139
We wanted to just barely scan the surface.

71
00:04:32,139 --> 00:04:35,599
Zooming out again, you can see that the tail of its trajectory

72
00:04:35,599 --> 00:04:38,899
doesn't reach out to the radius of the moon's orbit like we said that it would.

73
00:04:38,899 --> 00:04:44,619
So the correct value for boost is in between these two values at 10 m/s.

74
00:04:44,619 --> 00:04:47,619
Here is the solution plot. This looks perfect.

75
00:04:47,619 --> 00:04:50,749
You can see that the spaceship takes off, loops around the moon, comes back

76
00:04:50,749 --> 00:04:55,319
and just cruise the surface of the earth, and then, if we let it go out again,

77
00:04:55,319 --> 00:04:59,659
it will return to exactly the same radius that it left to initially.

78
00:04:59,659 --> 00:05:03,539
This is a really complex problem so great job for getting it done.

79
00:05:03,539 --> 00:05:07,709
The fact that we're done talking about spaceships and orbits, I get excited for Unit 3.

80
00:05:07,709 --> 99:59:59,999
We're going to talk about how diseases spread to the populations.
