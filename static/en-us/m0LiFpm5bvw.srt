1
00:00:00,000 --> 00:00:03,000
Let's now go for a systematic reproduction process.

2
00:00:03,000 --> 00:00:07,000
First we need to reproduce the environment in which the bug occurs.

3
00:00:07,000 --> 00:00:10,000
Second we need to reproduce the steps required

4
00:00:10,000 --> 00:00:12,000
to reproduce the problem.

5
00:00:12,000 --> 00:00:14,000
Both of these can be abstracted to input.

6
00:00:14,000 --> 00:00:17,000
All your program does is dependent on its input.

7
00:00:17,000 --> 00:00:20,000
Therefore, if you can reproduce the input,

8
00:00:20,000 --> 00:00:23,000
you can also reproduce the execution.

9
00:00:23,000 --> 00:00:25,000
With that we already solved the problem.

10
00:00:25,000 --> 00:00:28,000
Programs are nothing but mathematical functions.

11
00:00:28,000 --> 00:00:31,000
If they have the same input, they will reproduce the same output, right?

12
00:00:31,000 --> 00:00:35,000
Why is there actually a problem of reproducing?

13
00:00:35,000 --> 00:00:38,000
That's the difference between theory and practice.

14
00:00:38,000 --> 00:00:40,000
In theory, there is no difference.

15
00:00:40,000 --> 00:00:43,000
In practice, there is, at least that's the theory.

16
00:00:43,000 --> 00:00:46,000
Indeed, in practice the concept of what makes input to a program

17
00:00:46,000 --> 00:00:48,000
is very variable.

18
00:00:48,000 --> 00:00:51,000
We distinguish a number of typical inputs,

19
00:00:51,000 --> 00:00:54,000
each coming up with its own issues.

20
00:00:54,000 --> 00:00:59,000
We do have static data, user interaction, time of day or general time,

21
00:00:59,000 --> 00:01:02,000
randomness, that is randomness on purpose.

22
00:01:02,000 --> 00:01:04,000
We have the operating environment.

23
00:01:04,000 --> 00:01:07,000
We have schedules, in particular for parallel programs.

24
00:01:07,000 --> 00:01:10,000
We have physical influences, and we do have debugging tools.

25
00:01:10,000 --> 00:01:13,000
All of these constitute input to the program,

26
00:01:13,000 --> 00:01:16,000
and each of these brings up its own issues

27
00:01:16,000 --> 00:01:19,000
as it comes to reproducing failures.

28
00:01:19,000 --> 00:01:22,000
Let's start with regular static data.

29
00:01:22,000 --> 00:01:28,000
In a batch-oriented program, these are the inputs that is the files of documents

30
00:01:28,000 --> 00:01:30,000
your program processes.

31
00:01:30,000 --> 00:01:34,000
Static data is the easiest to reproduce, because it can be

32
00:01:34,000 --> 00:01:36,000
handled as an individual entity outside of your program.

33
00:01:36,000 --> 00:01:41,000
If your program operates on files, all you need to do is to ship the data files.

34
00:01:41,000 --> 00:01:45,000
If it works on a database, then use tables instead.

35
00:01:45,000 --> 00:01:49,000
This includes all data that is under the control of the user.

36
00:01:49,000 --> 00:01:52,000
If it's under your control, you probably already know it.

37
00:01:52,000 --> 00:01:55,000
So, you care about the variable stuff.

38
00:01:55,000 --> 00:01:58,000
For one thing, these are documents under the user's control

39
00:01:58,000 --> 00:02:02,000
as well as configuration files, in which user's store their preferences

40
00:02:02,000 --> 00:02:04,000
or the settings for they system at hand.

41
00:02:04,000 --> 00:02:08,000
Obviously, if you have all the documents and the configuration files

42
00:02:08,000 --> 00:02:10,000
that your program operates upon,

43
00:02:10,000 --> 00:02:13,000
then it's fairly easy to reproduce the exact problem.

44
00:02:13,000 --> 00:02:18,000
However, there's a small catch with that--just a tiny, tiny catch.

45
00:02:18,000 --> 00:02:21,000
This tiny, tiny catch can become a big issue.

46
00:02:21,000 --> 00:02:24,000
Let me illustrate this with an example.

47
00:02:24,000 --> 00:02:27,000
Here again we have our remove html markup function,

48
00:02:27,000 --> 00:02:32,000
and here comes an input as one could find it in, say, a user's document.

49
00:02:32,000 --> 00:02:34,000
We can run the whole thing with this input

50
00:02:34,000 --> 00:02:37,000
and very easily reproduce the failure.

51
00:02:37,000 --> 00:02:39,000
In this case, the failing assertion.
