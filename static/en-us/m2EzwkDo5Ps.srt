1
00:00:00,210 --> 00:00:03,985
So this quiz was probably little tricky to answer based on just what I've told

2
00:00:03,985 --> 00:00:07,852
you so far and the picture might be a little receptive. But I hope you thought

3
00:00:07,852 --> 00:00:12,230
about this from the perspective of constructing a program. The answer I think is

4
00:00:12,230 --> 00:00:16,388
correct is that it's not the case that all modules should be of similar size,

5
00:00:16,388 --> 00:00:20,414
it's okay of they are like shown in the picture, but this shouldn't be a big

6
00:00:20,414 --> 00:00:24,722
design constraint. It's okay if the sizes vary, and in a typical program we'll

7
00:00:24,722 --> 00:00:28,689
have some small modules and some larger ones. The second answer is true. Our

8
00:00:28,689 --> 00:00:32,583
goal in using modularity is to manage complexities. So we want to break the

9
00:00:32,583 --> 00:00:36,477
program into pieces small enough that one programmer can understand and build

10
00:00:36,477 --> 00:00:41,670
them. Note that if we're a very large program. This may require hierarchy. We

11
00:00:41,670 --> 00:00:45,722
might need modules of modules. The third answer is incorrect. If they're no

12
00:00:45,722 --> 00:00:49,102
dependencies at all between the modules, well that means they're not working

13
00:00:49,102 --> 00:00:52,512
together. In order for the modules to work together there's has to be some

14
00:00:52,512 --> 00:00:56,406
connections between them. What we want is for those dependencies to be

15
00:00:56,406 --> 00:01:00,798
manageable. We want there to be small Well-defined interfaces between the

16
00:01:00,798 --> 00:01:05,379
modules. That means that in order to use one module, what we need to understand

17
00:01:05,379 --> 00:01:09,720
about that module is as little as possible, but enough to be able to use it to

18
00:01:09,720 --> 00:01:13,495
build something useful. And that's going to be one of the main things we focus

19
00:01:13,495 --> 00:01:17,714
on in this lesson. One of the advantages of having narrow well-defined

20
00:01:17,714 --> 00:01:22,640
interfaces is we can separate the implementation from the use of the module.

21
00:01:22,640 --> 00:01:26,410
That if we have some other way of implementing this piece, well, we could still

22
00:01:26,410 --> 00:01:30,236
plug it in and we wouldn't need to change the green piece at all. That's one of

23
00:01:30,236 --> 00:01:34,394
our goals of modular design, to be able to plug in different modules without

24
00:01:34,394 --> 00:01:36,633
having to reconsider the whole system.
