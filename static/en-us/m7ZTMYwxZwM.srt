1
00:00:01,080 --> 00:00:03,480
Now the final tool I want to show you today, is going to

2
00:00:03,480 --> 00:00:07,220
help you track down a lot of your compute performance problems,

3
00:00:07,220 --> 00:00:10,370
so this is actually the profile tabs on chrome dev tools,

4
00:00:10,370 --> 00:00:14,140
clicking this option will give you three options or more depending on

5
00:00:14,140 --> 00:00:16,460
what chrome decides to roll out in the future. The first

6
00:00:16,460 --> 00:00:18,530
one you need to take a look at is, Collect JavaScript

7
00:00:18,530 --> 00:00:22,370
CPU Profile. By hitting the Start button, what actually occurs is,

8
00:00:22,370 --> 00:00:26,310
Chrome is recording all of the application and JavaScript code that's running

9
00:00:26,310 --> 00:00:29,740
right now. Hitting Stop actually gives us this beautiful chart

10
00:00:29,740 --> 00:00:33,530
that allows us to see where my JavaScript was going.

11
00:00:33,530 --> 00:00:35,790
Now, this is actually broken up into two areas. On

12
00:00:35,790 --> 00:00:38,410
the top here, you can actually see a generalization of spike

13
00:00:38,410 --> 00:00:41,680
of CPU time utilized, and on the bottom, these beautiful,

14
00:00:41,680 --> 00:00:44,750
beautiful colored line is actually what we call a flame

15
00:00:44,750 --> 00:00:47,900
chart. Scrolling my mouse cursor actually allows me to zoom

16
00:00:47,900 --> 00:00:52,220
in, and what you see is a treasure trove of information.

17
00:00:52,220 --> 00:00:55,700
This flamechart doesn't just show us pretty rainbow pictures

18
00:00:55,700 --> 00:00:58,700
on the screen, but it actually represents a inverse call

19
00:00:58,700 --> 00:01:03,190
graph whose horizontal size represents how long a function

20
00:01:03,190 --> 00:01:06,540
took to execute. So for example you can see the

21
00:01:06,540 --> 00:01:09,940
animate function was called here, and then it called

22
00:01:09,940 --> 00:01:12,680
the run function, then the draw function, then another draw,

23
00:01:12,680 --> 00:01:15,270
and then another draw. And eventually we keep going up

24
00:01:15,270 --> 00:01:17,450
and up and up the chain. Of course, hovering over

25
00:01:17,450 --> 00:01:19,830
shows you the total time that these events took.

26
00:01:19,830 --> 00:01:23,390
And then where, in the name, shows you who actually

27
00:01:23,390 --> 00:01:25,910
called that function. Now you can see we have

28
00:01:25,910 --> 00:01:29,040
pillars of function calls. Basically, that's the call graph going

29
00:01:29,040 --> 00:01:32,280
through. But between them we have this really interesting

30
00:01:32,280 --> 00:01:34,680
little program bar that no one seems to understand what's

31
00:01:34,680 --> 00:01:37,420
going on there. What you're looking at here, is

32
00:01:37,420 --> 00:01:42,840
that these tall pillars actually represent a frame of computation.

33
00:01:42,840 --> 00:01:45,670
So this is actually a request animation frame where the page

34
00:01:45,670 --> 00:01:49,120
is updated, scripts are run, everything's drawn to your screen. And then

35
00:01:49,120 --> 00:01:52,240
when it's done, it relinguishes control back over to Chrome. What

36
00:01:52,240 --> 00:01:55,350
you see here in the program bar, accounts for the time that

37
00:01:55,350 --> 00:01:59,890
the browser takes before it comes back and gives control to

38
00:01:59,890 --> 00:02:02,250
the game again. So you can see here that we're actually giving

39
00:02:02,250 --> 00:02:05,120
about 12 milliseconds for Chrome to do it's job, and then once

40
00:02:05,120 --> 00:02:07,850
we get back it takes about two milliseconds for up to update

41
00:02:07,850 --> 00:02:12,440
the scene, do any important calculations, and move onto the next frame.
