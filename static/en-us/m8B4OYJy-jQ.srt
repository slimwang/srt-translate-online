1
00:00:00,000 --> 00:00:05,070
To see how any of those strings make the algorithm behave, now let's have a closer look at it.

2
00:00:05,070 --> 00:00:09,580
The first three lines here are independent of the structure of the input.

3
00:00:09,580 --> 00:00:14,200
If you look at them, the counter is set to 0, we go through a range,

4
00:00:14,200 --> 00:00:20,430
and then we look if the letter that we're currently at is an 'a'.

5
00:00:20,430 --> 00:00:23,590
Those are independent of what kind of string we're looking at.

6
00:00:23,590 --> 00:00:26,440
We'll always be executing these parts of the code.

7
00:00:26,440 --> 00:00:30,450
But for those two parts here, that's kind of different.

8
00:00:30,450 --> 00:00:33,300
This line here, which is the fourth line,

9
00:00:33,300 --> 00:00:38,030
so this line here will only be executed if we have encountered an 'a'.

10
00:00:38,030 --> 00:00:44,970
And this line here will only be executed if we have encountered an 'a', then the next character is a 'b'.

11
00:00:44,970 --> 00:00:50,100
How often these two lines here are executed is dependent on the structure of the input.

12
00:00:50,100 --> 00:00:56,180
Now, in the worst case input, we would want these two lines to get executed as often as possible

13
00:00:56,180 --> 00:01:03,050
and in a best case scenario we would want them to get executed the least possible number of times.

14
00:01:03,050 --> 00:01:10,450
What we can already say is that a best case input will cause these two lines here

15
00:01:10,450 --> 00:01:16,180
to never be called and that only happens if the string does not contain the letter 'a' at all,

16
00:01:16,180 --> 00:01:18,340
which is the one down here.

17
00:01:18,340 --> 00:01:22,000
For the other strings, let's just go through the algorithm and count

18
00:01:22,000 --> 00:01:27,200
how many times this line here is executed and how many times this line down here is executed.

19
00:01:27,200 --> 00:01:36,460
If the string looks like ababab and so on, then every time that the algorithm encounters an 'a'

20
00:01:36,460 --> 00:01:43,800
it will execute this line down here and it will also execute this line down here

21
00:01:43,800 --> 00:01:45,920
because the next letter is a 'b'.

22
00:01:45,920 --> 00:01:47,920
Now, what if it encounters 'ab'?

23
00:01:47,920 --> 00:01:51,180
It will not execute this line, and it will not execute this line.

24
00:01:51,180 --> 00:01:55,940
And then it encounters an 'a' again, so this line will be executed and this line will be executed.

25
00:01:55,940 --> 00:02:01,000
And then again those two won't be. Then we have them both again.

26
00:02:01,000 --> 00:02:04,140
Then zero times and so on.

27
00:02:04,140 --> 00:02:12,620
Basically, for every two letters that it encounters, it will execute these two lines.

28
00:02:12,620 --> 00:02:20,200
So two lines per two letters makes one extra line per letter.

29
00:02:20,200 --> 00:02:23,670
Now for the second string, what happens is this.

30
00:02:23,670 --> 00:02:27,090
The algorithm encounters an 'a' so it will execute this line

31
00:02:27,090 --> 00:02:30,760
but the next letter is not a 'b' so it will not execute that line down here.

32
00:02:30,760 --> 00:02:33,710
And then it goes on to the next letter and again it encounters an 'a'

33
00:02:33,710 --> 00:02:36,520
so this line here will be executed but not this one down here

34
00:02:36,520 --> 00:02:39,180
because the next letter again is not an 'a'.

35
00:02:39,180 --> 00:02:44,960
So as the algorithm progresses, it executes one extra line per letter just as the string above.

36
00:02:44,960 --> 00:02:51,600
Now, finally, if the algorithm encounters acacac, what will happen is this.

37
00:02:51,600 --> 00:02:56,190
First, the algorithm encounters an 'a' so it executes this line down here.

38
00:02:56,190 --> 00:03:00,350
But then it does not encounter a 'b' so it will not go into this line.

39
00:03:00,350 --> 00:03:08,120
Next letter, the algorithm encounters a 'c' so it will not execute this line down here and so on.

40
00:03:08,120 --> 00:03:14,600
I think you get the picture. So this is not one extra line or letter but it will only be 0.5.

41
00:03:14,600 --> 00:03:22,000
It already tells us that the string here is not a worst case string but it's something in between.

42
00:03:22,000 --> 00:03:26,520
Now those two strings because they both require the same amount of time

43
00:03:26,520 --> 00:03:31,200
are either both worst case or they're both something in between.

44
00:03:31,200 --> 00:03:35,000
Now, this is something where you just have to look closely at the algorithm

45
00:03:35,000 --> 00:03:42,110
to see that a worst case input is among others one that contains as many times the letters 'a' 'b'

46
00:03:42,110 --> 00:03:44,530
as possible which is exactly this string.

47
00:03:44,530 --> 00:03:48,730
So there's no worse strings to encounter for this algorithm.

48
00:03:48,730 --> 00:03:50,810
So this one is a worst-case input.

49
00:03:50,810 --> 00:03:56,170
But surprisingly also this one down here although it doesn't contain the sequence ab at all

50
00:03:56,170 --> 00:03:58,170
it's also a worst-case input.

51
00:03:58,170 --> 00:04:00,960
Even now that we have introduced a number of simplifications.

52
00:04:00,960 --> 00:04:05,260
We have introduced the RAM as a simplified computer model to count the number if time steps

53
00:04:05,260 --> 00:04:09,590
and we've also said that we're just going to look at worst case running time

54
00:04:09,590 --> 00:04:13,030
you see that the analysis of algorithms can still be quite tedious.

55
00:04:13,030 --> 00:04:17,980
It's sometimes hard to identify what exactly a worst-case input will be.

56
00:04:17,980 --> 00:04:21,360
And even if we know the worst-case input, finding the exact formula

57
00:04:21,360 --> 00:04:25,450
for the running time is very difficult, which is why we're going to introduce

58
00:04:25,450 --> 99:59:59,999
another simplification to state running time and that simplification is known as big O notation.
