1
00:00:00,400 --> 00:00:03,550
What are the potentials for performance loss

2
00:00:03,550 --> 00:00:05,910
when you have a microkernel based operating system

3
00:00:05,910 --> 00:00:10,150
design? Well, the main source of potential

4
00:00:10,150 --> 00:00:13,110
performance loss would occur at border crossings as

5
00:00:13,110 --> 00:00:16,210
we have seen before, and border crossings

6
00:00:16,210 --> 00:00:20,160
have both an explicit cost associated with it

7
00:00:20,160 --> 00:00:25,490
as well as an implicit cost associated with it. The explicit cost is the fact

8
00:00:25,490 --> 00:00:31,470
that from an application which is at a particular protection level, namely the

9
00:00:31,470 --> 00:00:33,760
user level protection level of the processor

10
00:00:33,760 --> 00:00:37,560
architecture, you are slipping into the microkernel,

11
00:00:37,560 --> 00:00:42,790
and, which is at a different privilege level. That is the explicit cost in

12
00:00:42,790 --> 00:00:46,270
border crossing. And in order to accomplish

13
00:00:47,340 --> 00:00:50,870
a particular service that an application has

14
00:00:50,870 --> 00:00:54,160
requested, the service has actually provided by several

15
00:00:54,160 --> 00:00:57,580
processes above the Micro Kernal, and therefore, there are

16
00:00:57,580 --> 00:01:00,660
boarder crossings involved going from the application to

17
00:01:00,660 --> 00:01:03,850
the Micro Kernal to the particular service you're talking

18
00:01:03,850 --> 00:01:06,380
about Let's say a file system service. And

19
00:01:06,380 --> 00:01:08,900
on top of that, a system service like file

20
00:01:08,900 --> 00:01:13,130
system may have to consult other services such

21
00:01:13,130 --> 00:01:16,510
as a storage module or a memory management module,

22
00:01:16,510 --> 00:01:19,560
in order to complete the requested service

23
00:01:19,560 --> 00:01:22,000
of the application. In which case there are

24
00:01:22,000 --> 00:01:24,330
going to be protected procedure calls that are

25
00:01:24,330 --> 00:01:28,100
going to be executed. Between services that are

26
00:01:28,100 --> 00:01:30,540
part of the operating system. And these

27
00:01:30,540 --> 00:01:33,770
protected the procedure calls, because they are going

28
00:01:33,770 --> 00:01:38,080
across address spaces, is going to be more expensive

29
00:01:38,080 --> 00:01:41,580
than simple or normal procedure calls. And typically,

30
00:01:41,580 --> 00:01:44,350
protected procedure calls can be as expensive

31
00:01:44,350 --> 00:01:47,310
as 100 x, 100 times. Normal procedure

32
00:01:47,310 --> 00:01:52,350
calls and this is coming up because of the fact that each of these services

33
00:01:52,350 --> 00:01:56,260
in a micro-kernel based design is assumed

34
00:01:56,260 --> 00:02:00,060
to be implemented in its own address base

35
00:02:00,060 --> 00:02:02,940
to protect the integrity of each of

36
00:02:02,940 --> 00:02:06,790
these system services. Now why are protector procedure

37
00:02:06,790 --> 00:02:09,160
calls that much more expensive than normal

38
00:02:09,160 --> 00:02:12,960
procedure calls. This is where the implicit Cost

39
00:02:12,960 --> 00:02:15,380
of border crossings comes in. Whether the border

40
00:02:15,380 --> 00:02:19,300
crossing happens when we go from the user

41
00:02:19,300 --> 00:02:22,360
address piece into the kernel address piece

42
00:02:22,360 --> 00:02:25,900
or between one hardware address piece representing a

43
00:02:25,900 --> 00:02:29,210
paticular system service. To the hardware address space

44
00:02:29,210 --> 00:02:32,890
of another system service. And that implicit cost

45
00:02:32,890 --> 00:02:38,280
is a fact that we're losing locality, both in terms of address translations

46
00:02:38,280 --> 00:02:43,220
contained in the TLB, as well as the contents of the cache that the processor

47
00:02:43,220 --> 00:02:50,160
uses in order to access memory. All of those add up. In making protective

48
00:02:50,160 --> 00:02:53,450
procedure calls or going between user space

49
00:02:53,450 --> 00:02:55,660
and kernel space, that much more expensive.
