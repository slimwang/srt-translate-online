1
00:00:00,000 --> 00:00:02,535
Knowing the standard widget library is nice,

2
00:00:02,535 --> 00:00:06,930
but as someone who was once accused 
as not so much recreating the wheel,

3
00:00:06,930 --> 00:00:10,140
as hand machining my own nuts and bolts,

4
00:00:10,140 --> 00:00:13,470
I know there are times when nothing
in the tool chest will quite do the job.

5
00:00:13,470 --> 00:00:17,420
That's when it's time to dive in and build
your own custom view from scratch.

6
00:00:17,420 --> 00:00:20,830
Now we're not going to be including 
any custom views within Sunshine,

7
00:00:20,830 --> 00:00:23,160
but we can still take a look at how
you would build one.

8
00:00:23,160 --> 00:00:25,760
We'll start by creating 
a new class for our view.

9
00:00:25,760 --> 00:00:26,940
Let's call it My View.

10
00:00:26,940 --> 00:00:28,640
If you're building 
something from scratch,

11
00:00:28,640 --> 00:00:30,399
rather than modifying an existing view,

12
00:00:30,399 --> 00:00:35,040
it should descend from either 
view itself, or from surface view.

13
00:00:35,040 --> 00:00:38,180
View offers a lightweight, 
canvas-based approach

14
00:00:38,180 --> 00:00:42,285
while surface view is designed
specifically to support UI elements

15
00:00:42,285 --> 00:00:45,026
that require rapid redraws 
and/or 3D graphics,

16
00:00:45,026 --> 00:00:47,087
using something like Open GL.

17
00:00:47,087 --> 00:00:50,200
It's perfect for views 
that display video or games.

18
00:00:50,200 --> 00:00:53,880
Now the existing widget library 
is entirely view-based.

19
00:00:53,880 --> 00:00:55,490
So let's take that approach.

20
00:00:55,490 --> 00:01:01,890
The base view class draws an empty,
borderless, 100 x 100 pixel box.

21
00:01:01,890 --> 00:01:04,560
To change that, we override
the onMeasure handler,

22
00:01:04,560 --> 00:01:06,950
which allows us to indicate the view size.

23
00:01:06,950 --> 00:01:10,040
We'll also override onDraw, 
in order to draw our own

24
00:01:10,040 --> 00:01:12,000
custom view content.

25
00:01:12,000 --> 00:01:16,010
Now if it turns out that your view 
should always be an empty 100 pixel box

26
00:01:16,010 --> 00:01:17,350
then you're in luck.

27
00:01:17,350 --> 00:01:19,460
Otherwise we need to do some work.

28
00:01:19,460 --> 00:01:21,770
So let's start by setting our view's size.

29
00:01:21,770 --> 00:01:24,236
onMeasure is called 
when your view's parent

30
00:01:24,236 --> 00:01:25,662
is laying out its children.

31
00:01:25,662 --> 00:01:27,580
As you know, when you add
a view to a layout,

32
00:01:27,580 --> 00:01:29,900
you can specify a 
specific height or width,

33
00:01:29,900 --> 00:01:33,750
but in most cases you'll want to either 
match parent or wrap the content.

34
00:01:33,750 --> 00:01:36,400
When a view's onMeasure
is called by its parent layout,

35
00:01:36,400 --> 00:01:38,983
it asks how much space will you use?

36
00:01:38,983 --> 00:01:40,806
And passes in how much
space is available

37
00:01:40,806 --> 00:01:43,350
and whether the view will be given 
exactly that much space,

38
00:01:43,350 --> 00:01:46,480
or most of that much space
using these parameters.

39
00:01:46,480 --> 00:01:48,560
You can decode those
parameters like this.

40
00:01:48,560 --> 00:01:53,220
And that'll allow you to obtain 
the size and the mode

41
00:01:53,220 --> 00:01:56,353
for your height and width specifications.

42
00:01:56,353 --> 00:01:59,326
In this example we're demonstrating
just for the height parameter,

43
00:01:59,326 --> 00:02:01,080
but it works the same for width.

44
00:02:01,080 --> 00:02:03,620
We can then use the 
decoded mode parameter

45
00:02:03,620 --> 00:02:06,380
to find out what size
we should set our view to.

46
00:02:06,380 --> 00:02:09,880
If the returned mode is exactly, 
the view will be placed

47
00:02:09,880 --> 00:02:11,620
into an area of exactly that size.

48
00:02:11,620 --> 00:02:14,970
You'll be passed that value if the layout
has specified a specific size

49
00:02:14,970 --> 00:02:18,090
or if the view has been
asked to fill the parent.

50
00:02:18,090 --> 00:02:21,810
In either case, it's best practice 
to simply return the value passed in

51
00:02:21,810 --> 00:02:24,210
unless that value is below your
your view's minimum size,

52
00:02:24,210 --> 00:02:26,520
in which case you can return
the minimum value

53
00:02:26,520 --> 00:02:29,660
and rely on the parent layout 
to crop or scroll as necessary.

54
00:02:29,660 --> 00:02:32,150
Another alternative is AT_MOST.

55
00:02:32,150 --> 00:02:35,010
This indicates that your view 
can define its own size,

56
00:02:35,010 --> 00:02:36,800
up to the size given.

57
00:02:36,800 --> 00:02:39,483
This is typically the case
for views set to wrap content,

58
00:02:39,483 --> 00:02:41,846
where the view should be
as wide as it needs to be

59
00:02:41,846 --> 00:02:44,370
to display its content, 
but no wider than that.

60
00:02:44,370 --> 00:02:46,820
And of course, all of that's 
provided that it still fits

61
00:02:46,820 --> 00:02:50,600
within the parent container 
as indicated by the size parameter.

62
00:02:50,600 --> 00:02:53,870
And we've just finished calculating
all of that for the height parameter

63
00:02:53,870 --> 00:02:56,460
and you'd need to do exactly
the same thing again for width.

64
00:02:56,460 --> 00:02:58,170
Once you've done that 
and determined

65
00:02:58,170 --> 00:03:00,636
the size of your control,
you have to call

66
00:03:00,636 --> 00:03:03,152
the setMeasuredDimension method.

67
00:03:03,152 --> 00:03:05,980
Here you pass in your
width and height values.

68
00:03:05,980 --> 00:03:08,789
If you don't call these 
setMeasureDimension method,

69
00:03:08,789 --> 00:03:11,230
your app will crash 
as soon as your view is laid out.
