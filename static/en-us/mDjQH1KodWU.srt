1
00:00:00,110 --> 00:00:02,070
When you get a Lego set from the store,

2
00:00:02,070 --> 00:00:04,620
the pieces inside are in
sealed little bags.

3
00:00:04,620 --> 00:00:07,840
Larger sets like this one
have multiple sealed bags.

4
00:00:07,840 --> 00:00:12,060
All of the pieces in one bag create just
a portion, or component, of the model.

5
00:00:12,060 --> 00:00:13,650
After building each of the components,

6
00:00:13,650 --> 00:00:16,760
you can combine them together
to form the completed model.

7
00:00:16,760 --> 00:00:20,110
An Angular module is just
like this cardboard box.

8
00:00:20,110 --> 00:00:23,140
It's a container that houses all of
the different components of an angular

9
00:00:23,140 --> 00:00:24,390
application.

10
00:00:24,390 --> 00:00:28,070
If the box is like a module,
then this bag might be a controller, and

11
00:00:28,070 --> 00:00:30,950
this little bag could be the router or
a service.

12
00:00:30,950 --> 00:00:33,560
Applications aren't limited
to just one module.

13
00:00:33,560 --> 00:00:36,450
When an application becomes
more complex, it's a good idea

14
00:00:36,450 --> 00:00:39,880
to break out the different features
of the application into modules.

15
00:00:39,880 --> 00:00:43,580
This keeps your app more organized,
manageable and easier to test.

16
00:00:43,580 --> 00:00:48,700
When we used a Yoman to generate our
app, we gave it the name udaciMeals.

17
00:00:48,700 --> 00:00:50,580
This became the default module for
the app.

18
00:00:51,790 --> 00:00:54,739
The generator creates
the apps model inside appJs.

19
00:00:55,980 --> 00:00:59,840
The module is created by
calling Angular.module,

20
00:00:59,840 --> 00:01:03,170
passing it the name of the module, which
can be anything but automatically uses

21
00:01:03,170 --> 00:01:06,749
the name provided on the terminal, and
passing it in a ray of dependencies.

22
00:01:07,890 --> 00:01:11,120
Remember that Angular applications
can have more than one module.

23
00:01:11,120 --> 00:01:14,790
If this app depended on other modules,
then those modules are required for

24
00:01:14,790 --> 00:01:16,240
this app to function.

25
00:01:16,240 --> 00:01:17,960
Those modules names
would be listed here.

26
00:01:20,140 --> 00:01:23,500
So, this tells the angular to
create the udaciMealsApp module and

27
00:01:23,500 --> 00:01:25,300
that it depends on dep1 and dep2.

28
00:01:28,159 --> 00:01:30,908
This tells Angular to create
the udaciMeals app module,

29
00:01:30,908 --> 00:01:33,320
and that it doesn't depend
on any other modules.

30
00:01:34,530 --> 00:01:36,247
So this creates the module.

31
00:01:38,005 --> 00:01:40,756
To get the module,
we would write angular.module, and

32
00:01:40,756 --> 00:01:42,829
give it the name of
the module we want to get.

33
00:01:44,050 --> 00:01:48,330
These two forms are very similar,
but do totally different things.

34
00:01:48,330 --> 00:01:49,940
If you're creating a module,

35
00:01:49,940 --> 00:01:52,260
make sure you pass an array
as the second argument,

36
00:01:52,260 --> 00:01:56,260
even if the module does not depend on
anything, it needs to have that array.

37
00:01:56,260 --> 00:01:59,138
Also make sure that you create your
module before you try getting it, or

38
00:01:59,138 --> 00:01:59,971
Angular will complain.
