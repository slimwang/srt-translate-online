1
00:00:05,290 --> 00:00:07,470
Alright, I feel like the finish line is in sight. We've

2
00:00:07,470 --> 00:00:10,040
got our render tree. Can we put pixels on the screen now?

3
00:00:10,040 --> 00:00:11,920
>> We're definitely very close, but there's one more

4
00:00:11,920 --> 00:00:14,150
step. We still need to figure out where and

5
00:00:14,150 --> 00:00:16,050
how all the elements are positioned on the page.

6
00:00:16,050 --> 00:00:19,100
And that's the layout step. Let's take a look. To

7
00:00:19,100 --> 00:00:20,840
show a layout in action I've come up with

8
00:00:20,840 --> 00:00:24,410
a simple render tree. Here's what the final result will

9
00:00:24,410 --> 00:00:27,470
look like. Note that if we rotate the phone,

10
00:00:27,470 --> 00:00:30,660
the dimensions of the boxes change. But their proportions stay

11
00:00:30,660 --> 00:00:33,030
the same. Let's see if we can figure out what the

12
00:00:33,030 --> 00:00:36,390
browser is doing here. Let's start at the top. We set

13
00:00:36,390 --> 00:00:39,890
the background on the body element to gray. That makes sense.

14
00:00:39,890 --> 00:00:43,972
That's exactly what we saw. And we set its width to 100%.

15
00:00:43,972 --> 00:00:47,290
>> Wait, that's 100% of what exactly?

16
00:00:47,290 --> 00:00:49,740
>> It's 100% of the layout viewport size. If you

17
00:00:49,740 --> 00:00:54,590
paid attention, our hello world examples contained an extra meta tag.

18
00:00:54,590 --> 00:00:55,920
>> Oh yeah, I was reading the web

19
00:00:55,920 --> 00:00:58,690
fundamentals guide on responsive design. And it said that I should always

20
00:00:58,690 --> 00:01:01,760
have this tag. But I never really understood what it was for.

21
00:01:01,760 --> 00:01:05,129
>> It is a bit cryptic, but let's try to make sense of it. What

22
00:01:05,129 --> 00:01:06,390
it's doing is telling the browser that

23
00:01:06,390 --> 00:01:08,690
the width of the layout viewport should be

24
00:01:08,690 --> 00:01:15,070
equal to the device width. So, let's say that the device width is 320 pixels.

25
00:01:16,130 --> 00:01:18,790
Then, if this meta viewport tag is present,

26
00:01:18,790 --> 00:01:20,920
the browser will set the layout viewport to

27
00:01:20,920 --> 00:01:24,719
320 pixels and that will be our 100%.

28
00:01:24,719 --> 00:01:28,210
>> Oh, I see. But what happens if I don't provide this tag?

29
00:01:28,210 --> 00:01:31,040
>> Then the browser will use the default viewport width, which is

30
00:01:31,040 --> 00:01:36,580
typically 980 pixels. And it's optimized for large screens. You know how

31
00:01:36,580 --> 00:01:40,000
sometimes, sites render zoomed out and you have to zoom to navigate

32
00:01:40,000 --> 00:01:44,270
and read the text. That's because they're not setting delay at viewport.

33
00:01:44,270 --> 00:01:45,950
>> Oh that makes sense. I am

34
00:01:45,950 --> 00:01:47,710
definitely not a big fan of those sites.

35
00:01:48,780 --> 00:01:52,990
>> Neither am I. To build great mobile experience, you should always set them at

36
00:01:52,990 --> 00:01:56,000
a viewport. But getting back to our example.

37
00:01:56,000 --> 00:01:59,140
If the device with this 320 pixels, then

38
00:01:59,140 --> 00:02:05,440
the body will be 320 pixels wide. Next, we have the divnote at 50%

39
00:02:05,440 --> 00:02:10,620
of the width. And it is a child of body, so its width is relative to its parent.

40
00:02:10,620 --> 00:02:16,380
And 50% of 320 pixels is 160 pixels. And, for

41
00:02:16,380 --> 00:02:19,390
paragraph, the width is 50% of its parent. Giving us

42
00:02:19,390 --> 00:02:22,950
the width of 80 pixels. And, with that, we're done.

43
00:02:22,950 --> 00:02:25,050
That's layout. Now, how about you give it a try?
