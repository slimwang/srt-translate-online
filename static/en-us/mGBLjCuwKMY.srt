1
00:00:00,059 --> 00:00:04,606
So let's look at a demo. This is what the example white balance routine looks like in Matlab.

2
00:00:04,606 --> 00:00:07,983
As you can see it's quite short. Matlab is a high level programming language.

3
00:00:07,983 --> 00:00:12,533
It's got a simple syntax and a whole lot of built in math and engineering functions.

4
00:00:12,533 --> 00:00:14,980
So this whole routine can be written in just 6 lines of code.

5
00:00:14,980 --> 00:00:18,512
Now the way this is written out, currently this function runs entirely on a CPU.

6
00:00:18,512 --> 00:00:21,340
And so next what we're going to do is use the Matlab profiler

7
00:00:21,340 --> 00:00:25,992
to identify sections of this code that might be candidates to run on GPU to improve performance.

8
00:00:25,992 --> 00:00:31,035
So we run the profiler and it indicates that this last line is by far the most time consuming.

9
00:00:31,035 --> 00:00:35,838
This line of code is applying an operation to each color channel across every pixel on the image.

10
00:00:35,838 --> 00:00:39,294
Such an operation could be sped up when executed on a GPU.

11
00:00:39,294 --> 00:00:41,658
This is clearly a good candidate for parallel computing.

12
00:00:41,658 --> 00:00:45,684
So before using the GPU, let's first measure how long it takes to execute the white balance function

13
00:00:45,684 --> 00:00:48,502
on the CPU, using the tick and tock commands.

14
00:00:48,502 --> 00:00:53,521
Notice that it takes approximately 0.124 seconds to execute the code entirely on the CPU.

15
00:00:53,521 --> 00:00:58,447
Now to utilize the GPU for executing that last line of code, there's a couple of options.

16
00:00:58,447 --> 00:01:01,166
One thing that we could do is simply transfer the image data

17
00:01:01,166 --> 00:01:03,764
to the GPU memory using the GPU array command.

18
00:01:03,764 --> 00:01:07,913
And that's what we're doing here on line 14 of this slightly modified white balance routine.

19
00:01:07,913 --> 00:01:12,557
Whenever a GPU is passed as input to the most common core Matlab functions,

20
00:01:12,557 --> 00:01:17,696
as in this last line of code, then those computations will automatically be executed on the GPU.

21
00:01:17,696 --> 00:01:20,363
So, here by adding just that single line of code,

22
00:01:20,363 --> 00:01:23,555
notice that the time it takes to execute the white balance function

23
00:01:23,555 --> 00:01:26,989
went down from 0.124 seconds to 0.026 seconds.

24
00:01:26,989 --> 00:01:29,738
So that's a big speed up, especially for a single line of code.

25
00:01:29,738 --> 00:01:33,758
So the second approach to using the GPU for computing within Matlab

26
00:01:33,758 --> 00:01:36,714
is to use the Matlab interface to invoke custom Cuda kernels.

27
00:01:36,714 --> 00:01:40,359
Here's a Cuda kernel that performs the same operation that was causing

28
00:01:40,359 --> 00:01:42,635
that original bottleneck in the white balance routine.

29
00:01:42,635 --> 00:01:46,357
And in this Matlab function, that Cuda kernel is being used

30
00:01:46,357 --> 00:01:49,229
to speed up the execution time instead of using GPU array.

31
00:01:49,229 --> 00:01:52,832
So the first 12 lines of code are the same as in the original white balance routine.

32
00:01:52,832 --> 00:01:56,819
Then, however, Matlab loads the kernel and sets up the threading parameters,

33
00:01:56,819 --> 00:02:01,651
Creates data on the GPU, and finally invokes the kernel using f eval.

34
00:02:01,651 --> 00:02:06,975
And now notice that the white balance routine executes in .022 seconds using the Cuda kernel.

35
00:02:06,975 --> 00:02:11,881
So the application executes faster but we should still verify that our Cuda does what its supposed to do.

36
00:02:11,881 --> 00:02:14,057
So we need ask the question, do the results from the GPU

37
00:02:14,057 --> 00:02:16,173
match the results that we were getting on the CPU?

38
00:02:16,173 --> 00:02:19,204
And you can check that the outputs match, using this simple script

39
00:02:19,204 --> 00:02:21,793
which computes the norm of the difference between outputs.

40
00:02:21,793 --> 00:02:24,526
So a norm equal to 0, signifies that the 2 outputs are the same.

41
00:02:24,526 --> 00:02:29,762
After running verified script, we can see that the 2 outputs are the same, and there we go.

42
00:02:29,762 --> 00:02:32,865
So, in summary, Matlab is a nice high-level language.

43
00:02:32,865 --> 00:02:35,787
It is used heavily by scientists and engineers all over the world

44
00:02:35,787 --> 00:02:38,725
for all kinds of applications, and its a great way to quickly design

45
00:02:38,725 --> 00:02:43,768
and test algorithms that perform computations on a GPU, either by using the gpuArray command,

46
00:02:43,768 --> 00:02:46,140
or by using an interface directly to CUDA kernels.

47
00:02:46,147 --> 00:02:50,097
Furthermore, existing CUDA kernels can be quickly and easily tested inside Matlab.

48
00:02:50,097 --> 00:02:55,190
It makes a great harness for developing an exploring and testing CUDA kernels.

49
00:02:55,190 --> 00:02:57,312
And that's Matlab.
