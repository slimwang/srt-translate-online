1
00:00:00,000 --> 00:00:04,000
What I have to do is I have to check all my cases where I have recursion

2
00:00:04,000 --> 00:00:07,000
and eliminate any possibility for infinite recursion.

3
00:00:07,000 --> 00:00:11,000
Now, there are two possibilities in the star function and the plus function.

4
00:00:11,000 --> 00:00:15,000
Those are the two cases where regular expressions have recursion.

5
00:00:15,000 --> 00:00:19,000
But now star I defined in terms of plus,

6
00:00:19,000 --> 00:00:23,000
so all that's left is to fix plus to not have an infinite recursion.

7
00:00:23,000 --> 00:00:25,000
Here's how I define plus.

8
00:00:25,000 --> 00:00:31,000
Basically, I said that x+ is defined as x followed by x*,

9
00:00:31,000 --> 00:00:35,000
and the x* is in turn defined in terms of x+.

10
00:00:35,000 --> 00:00:39,000
The problem was that I was going through and saying, okay,

11
00:00:39,000 --> 00:00:44,000
for x when I'm doing plus(opt(a)), for my x I want to choose opt(a).

12
00:00:44,000 --> 00:00:46,000
Okay, I think I'll choose the empty string.

13
00:00:46,000 --> 00:00:49,000
So I chose that, and now I'm left in a recursion

14
00:00:49,000 --> 00:00:52,000
where I have an x*, which is defined in terms of x+,

15
00:00:52,000 --> 00:00:54,000
and I haven't made any progress.

16
00:00:54,000 --> 00:00:57,000
I have a recursive call that's defined in terms of itself.

17
00:00:57,000 --> 00:01:01,000
We know in order to make sure that a recursion terminates,

18
00:01:01,000 --> 00:01:05,000
we have to have some induction where we're reducing something.

19
00:01:05,000 --> 00:01:11,000
It makes sense here that what we're going to reduce is our set Ns.

20
00:01:11,000 --> 00:01:15,000
One way to guarantee to do that is to say

21
00:01:15,000 --> 00:01:18,000
when I'm generating the x followed by the x*

22
00:01:18,000 --> 00:01:22,000
let's make sure that the x generates at least 1 character.

23
00:01:22,000 --> 00:01:25,000
If we can guarantee that x generates a character,

24
00:01:25,000 --> 00:01:29,000
then when we go to do the x* we've reduced our input.

25
00:01:29,000 --> 00:01:35,000
So we have this inductive property saying that now our set of Ns will be smaller.

26
00:01:35,000 --> 00:01:40,000
It's smaller by 1 each time, and if it started out finite and we reduce by 1 every time,

27
00:01:40,000 --> 00:01:42,000
then eventually we're going to terminate.

28
00:01:42,000 --> 00:01:45,000
Let's see how we can implement that idea of saying

29
00:01:45,000 --> 00:01:49,000
every time we have an x+ we have a x and an x*,

30
00:01:49,000 --> 00:01:51,000
we have to choose at least 1 character for x.

31
00:01:51,000 --> 00:01:54,000
Note that that's not limiting us in any way.

32
00:01:54,000 --> 00:01:57,000
That hasn't stopped us from generating all possible expressions,

33
00:01:57,000 --> 00:02:00,000
because if we were going to generate something,

34
00:02:00,000 --> 00:02:03,000
it would have to come from somewhere--either from this x or this x--

35
00:02:03,000 --> 00:02:06,000
and we might as well make sure it comes from here

36
00:02:06,000 --> 99:59:59,999
rather than adding an infinite number of nothings before we generate something.
