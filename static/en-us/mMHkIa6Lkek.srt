1
00:00:00,230 --> 00:00:03,930
So lets look at the problem of aliasing
in the virtual index physical tag

2
00:00:03,930 --> 00:00:04,830
caches.

3
00:00:04,830 --> 00:00:06,490
This is a virtual address.

4
00:00:06,490 --> 00:00:11,440
And the way we access the cache is
these are the offset bits, this will

5
00:00:11,440 --> 00:00:16,050
be our index bits, and this will be the
tag if we use this to access the cache.

6
00:00:16,050 --> 00:00:19,890
In a virtual index cache,
we use the index part of the address.

7
00:00:19,890 --> 00:00:23,710
From the virtual address, the rest
comes from the physical address.

8
00:00:23,710 --> 00:00:26,490
But how do we form the physical address?

9
00:00:26,490 --> 00:00:30,180
Well some lower bits of the virtual
address will be the page offset.

10
00:00:30,180 --> 00:00:32,940
The rest will be the page number.

11
00:00:32,940 --> 00:00:36,840
And now remember that the page
number gets translated

12
00:00:36,840 --> 00:00:39,700
to become the frame number
in the physical address.

13
00:00:39,700 --> 00:00:41,550
While the page offs just goes and

14
00:00:41,550 --> 00:00:45,150
becomes the least significant
base of the physically address.

15
00:00:45,150 --> 00:00:50,580
And in a virtually indexed, physically
tagged cache, our tag comes from here,

16
00:00:50,580 --> 00:00:55,780
but our index came from from here, so
that we could begin the access quickly.

17
00:00:55,780 --> 00:00:59,730
The thing to note is that the index
bits are relatively close to

18
00:00:59,730 --> 00:01:02,710
the least significant bit
of the virtual address, and

19
00:01:02,710 --> 00:01:05,420
that the page offset
has a number of bits.

20
00:01:05,420 --> 00:01:08,330
So for a small cache it can happen

21
00:01:08,330 --> 00:01:12,310
that the index bits that we use
all come from the page offset,

22
00:01:12,310 --> 00:01:16,620
which means they are the same as if we
took them from the physical address.

23
00:01:16,620 --> 00:01:19,890
So, although we are indexing
using the virtual address,

24
00:01:19,890 --> 00:01:24,440
in reality, we are actually using
the same index that we would be using

25
00:01:24,440 --> 00:01:26,380
if we were using the physical address.

26
00:01:26,380 --> 00:01:28,930
Which means, there will be no aliasing.

27
00:01:28,930 --> 00:01:30,750
How is there no aliasing?

28
00:01:30,750 --> 00:01:35,194
Well, because the virtual pages, that
have different page numbers that map to

29
00:01:35,194 --> 00:01:38,707
the same frame number,
can only differ in the page number, but

30
00:01:38,707 --> 00:01:42,250
they have to have the same offsets for
the same data.

31
00:01:42,250 --> 00:01:44,370
And because only the offset matters for

32
00:01:44,370 --> 00:01:48,040
the index if the index
is low enough here.

33
00:01:48,040 --> 00:01:52,480
What happens here is, pretty much,
all of the data that can possibly

34
00:01:52,480 --> 00:01:56,830
be in the same place in the physical
memory has to be in the same set,

35
00:01:56,830 --> 00:02:01,760
because the index is determined only
from the part that has to be the same.

36
00:02:01,760 --> 00:02:05,030
So we have that there is no aliasing

37
00:02:05,030 --> 00:02:08,919
if all of the index bits that we
use came from the page offset.

38
00:02:08,919 --> 00:02:11,850
Because really those are the same
index bits that would

39
00:02:11,850 --> 00:02:15,170
come from the physical address if
we had the physical index cache.

40
00:02:15,170 --> 00:02:19,760
We like this very much, but the cache
has to be small enough to do this.

41
00:02:19,760 --> 00:02:26,580
So for example, if we have a 4 kilobyte
page, we will have a 12-bit page offset.

42
00:02:26,580 --> 00:02:32,750
If our cache is a 32 byte block,
it has a 5-bit block offset here.

43
00:02:32,750 --> 00:02:37,240
That means that the index,
which still needs to fit in the 12

44
00:02:37,240 --> 00:02:41,370
bits of the page offset,
can only have 7 bits, so

45
00:02:41,370 --> 00:02:46,520
we can only have 128 sets in this cache,
which limits its size.

46
00:02:46,520 --> 00:02:48,760
If we have more sets than this,

47
00:02:48,760 --> 00:02:52,310
then some of the index bits
here come from the page number.

48
00:02:52,310 --> 00:02:57,190
And that changes when we have
the frame number, so it can easily be

49
00:02:57,190 --> 00:03:01,470
that the different these bits here end
up mapping to the same frame number,

50
00:03:01,470 --> 00:03:05,200
which we don't want because that
means that multiple sets in the cache

51
00:03:05,200 --> 00:03:09,370
could have the same actual data, which
is bad because we cannot find it then.
