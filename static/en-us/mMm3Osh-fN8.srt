1
00:00:00,840 --> 00:00:04,560
So much of mapping is focused
on lat long coordinates, but

2
00:00:04,559 --> 00:00:06,449
who ever knows those?

3
00:00:06,450 --> 00:00:11,250
A really important feature in the Google
Maps APIs is the ability to go back and

4
00:00:11,250 --> 00:00:15,800
forth between lat longs and places,
like the happiest place on earth.

5
00:00:15,800 --> 00:00:20,660
This is called geo coding, taking
an address and getting the lat wrong.

6
00:00:21,670 --> 00:00:25,875
And reverse geocoding, getting
the address or place from a lat long.

7
00:00:27,179 --> 00:00:30,480
We'll test out using the geocoding API,

8
00:00:30,480 --> 00:00:34,520
VN HTTP request,
to get a lat long back from an address.

9
00:00:36,299 --> 00:00:38,390
I copied this request right
from our developer sites.

10
00:00:39,520 --> 00:00:42,470
All of the requests start out
in the same name space, and

11
00:00:42,469 --> 00:00:48,299
then specify the service, and the output
format, in either JSON or XML.

12
00:00:48,299 --> 00:00:50,929
We then specify the input parameters.

13
00:00:50,929 --> 00:00:55,298
The required parameters here are only
the address and your API key.

14
00:00:55,298 --> 00:00:59,393
We can also optionally include things
such as the component restriction,

15
00:00:59,393 --> 00:01:02,170
to limit the results to a city or
a country.

16
00:01:02,170 --> 00:01:05,774
Or a region bias to tell the geocoder
that certain regions are better than

17
00:01:05,774 --> 00:01:07,798
others for the results that you expect.

18
00:01:07,798 --> 00:01:10,591
Let's execute this and
see what we get back.

19
00:01:10,591 --> 00:01:13,575
Okay, at the highest level we
get back a few things here.

20
00:01:13,575 --> 00:01:17,169
The first thing that we'll
look at its the status.

21
00:01:17,170 --> 00:01:20,150
This tells us whether our
request was successful, and

22
00:01:20,150 --> 00:01:23,870
is also largely shared between
the various web services.

23
00:01:23,870 --> 00:01:25,650
There are several
possibilities that we can see.

24
00:01:25,650 --> 00:01:30,320
OK, means it found one or more results,
so that is the one we want.

25
00:01:31,879 --> 00:01:34,918
Invalid request, means something
wasn't right in our request.

26
00:01:36,129 --> 00:01:39,219
Unknown error, usually means there's
some kind of error on the server, and

27
00:01:39,219 --> 00:01:42,090
the request can be repeated
until it's successful.

28
00:01:42,090 --> 00:01:44,868
We'll talk later about over
query limit errors and

29
00:01:44,867 --> 00:01:48,304
also request denied errors, so
don't worry about those yet.

30
00:01:48,305 --> 00:01:53,028
The address component section has
information broken down into things such

31
00:01:53,028 --> 00:01:56,800
as street, town, neighborhood,
country, state, etc.

32
00:01:57,930 --> 00:02:01,330
We also get a formatted address
that we can use on its own.

33
00:02:01,329 --> 00:02:05,489
The geometry contains the lat
long of the actual location and

34
00:02:05,489 --> 00:02:07,349
other important info.

35
00:02:07,349 --> 00:02:11,608
And finally we get a place ID which
is another unique identifier for any

36
00:02:11,608 --> 00:02:16,462
place ranging from a whole country down
to the granularity of a single address.

37
00:02:16,461 --> 00:02:19,709
We'll use that in conjunction with
the places API later in the course.

38
00:02:21,259 --> 00:02:24,750
Right now we're interested in
the geometry, so let's focus on that.

39
00:02:24,750 --> 00:02:28,471
This location is the lat
long that we're looking for.

40
00:02:28,471 --> 00:02:32,020
The location type is
also very important.

41
00:02:32,020 --> 00:02:33,969
This tells us more about
the point that we got back.

42
00:02:35,139 --> 00:02:38,979
Since this is a rooftop, it means we
got an exact match for our location.

43
00:02:40,300 --> 00:02:44,245
Other values could be range interpolated
which means that the geocoder

44
00:02:44,245 --> 00:02:47,615
approximated a point based
on surrounding points.

45
00:02:47,615 --> 00:02:51,715
Or geometric center, which means
that we got the center of a line.

46
00:02:51,715 --> 00:02:55,145
For example, if we had searched only for
a road without an address,

47
00:02:55,145 --> 00:02:56,558
we would get the center of that road.

48
00:02:57,719 --> 00:03:00,479
Let's take another look at
the address components.

49
00:03:00,479 --> 00:03:03,939
If we had done reverse geocoding,
for example, and specified

50
00:03:03,939 --> 00:03:08,199
a lat long in our request instead of an
address, we'd be looking for this data.

51
00:03:08,199 --> 00:03:13,149
We can get the exact street address, or
we can pull out other useful things.

52
00:03:13,150 --> 00:03:15,170
For example, the county, or

53
00:03:15,169 --> 00:03:18,889
that this address is on
the Upper East Side of Manhattan.

54
00:03:18,889 --> 00:03:23,629
Typically, the components contain more
information than the formatted address.

55
00:03:23,629 --> 00:03:25,454
So if you needed
the detailed information,

56
00:03:25,455 --> 00:03:27,555
you'd need to parse through them.

57
00:03:27,555 --> 00:03:30,105
The link in the instructor
notes has some detailed info on

58
00:03:30,104 --> 00:03:31,125
all the address components.

59
00:03:32,194 --> 00:03:34,694
>> Before we go back and
improve our listings app

60
00:03:34,694 --> 00:03:38,344
let's review some stuff about
the HTTP requests and responses.


