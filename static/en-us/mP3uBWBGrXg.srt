1
00:00:00,460 --> 00:00:03,850
Now we want to see how to insert an element, here is my partially filled array.

2
00:00:03,850 --> 00:00:09,978
And I want to insert an element before this position. So I need to move all of

3
00:00:09,978 --> 00:00:14,342
these elements out of the way, so that the green element can go into the slot.

4
00:00:14,342 --> 00:00:19,093
Now, you have to be a bit careful with the move out of the way part. If I were

5
00:00:19,093 --> 00:00:23,876
to move this element over here, and then this element over here and so on. That

6
00:00:23,876 --> 00:00:27,652
will be bad because then this element would override the next one before I had

7
00:00:27,652 --> 00:00:32,478
a chance to move that one out of the way. So, in other words, this element

8
00:00:32,478 --> 00:00:36,658
would flood the entire tail of the array. The remedy is to do the movement

9
00:00:36,658 --> 00:00:41,094
starting at the end of the array. So, I first move this one, then it's

10
00:00:41,094 --> 00:00:46,134
predecessor, then it's predecessor. And I keep going until I've moved the one

11
00:00:46,134 --> 00:00:51,435
into who's slot that I want to put the new one. The other thing to remember is

12
00:00:51,435 --> 00:00:55,404
that insertion increases the size, so I have to make sure to add one to size of

13
00:00:55,404 --> 00:01:01,004
my partially filled array. Le'ts look at this in Java code. I increase the

14
00:01:01,004 --> 00:01:06,130
size. Here is the loop to make room for the new element. So when I increase my

15
00:01:06,130 --> 00:01:11,791
size then I am starting at size minus 1, which is same as the old size. I now

16
00:01:11,791 --> 00:01:15,450
go backwards. And each of the moves goes the other direction than the one that

17
00:01:15,450 --> 00:01:21,186
you've seen with removal. It goes from a lower index to a higher index. And the

18
00:01:21,186 --> 00:01:25,446
last movement is the one that moves pos to pos plus 1, so we want this one to

19
00:01:25,446 --> 00:01:32,380
be pos, which means we want I to be plus, plus one and that's where we stop.

20
00:01:32,380 --> 00:01:37,720
Finally, when we're all done, we can insert the new value after position pos.

21
00:01:37,720 --> 00:01:41,880
As you have seen inserting and removing array elements requires quite a bit of

22
00:01:41,880 --> 00:01:46,703
movement. You need to move elements out of the way, in the case of insertion,

23
00:01:46,703 --> 00:01:51,945
or move them to close up the gap in the situation of removal. It was also easy

24
00:01:51,945 --> 00:01:55,884
with the array list, where you just called add and removed. But the reason

25
00:01:55,884 --> 00:01:59,212
that, as explained to you, what actually goes on with arrays, is an array list

26
00:01:59,212 --> 00:02:02,540
has a partially filled array inside it, and it's sometimes important to know

27
00:02:02,540 --> 00:02:07,849
which operations are cheap, and which ones are expensive. And sorting and

28
00:02:07,849 --> 00:02:10,310
removing can be expensive for a long array.
