1
00:00:00,120 --> 00:00:02,476
Here's one way to prove it to yourself that you drop the fraction instead of

2
00:00:02,476 --> 00:00:07,510
rounding. Try computing the texel location using U V's for a 1 by 1 texture. A

3
00:00:07,510 --> 00:00:11,622
texture with 1 texel. You know in advance the answer you always want for the

4
00:00:11,622 --> 00:00:15,650
texture coordinate is the integer 0. A texture coordinate of 0.72 multiplied by

5
00:00:15,650 --> 00:00:20,582
1 will have its fraction dropped, and you'll get 0. As will every other texel

6
00:00:20,582 --> 00:00:24,540
coordinate. If you round instead, you would get the wrong answer of 1. I like

7
00:00:24,540 --> 00:00:27,688
testing with simple cases like this. If the formula doesn't work for a single

8
00:00:27,688 --> 00:00:31,884
pixel conversion, we can't expect it will work for larger textures. It's

9
00:00:31,884 --> 00:00:35,524
interesting to note that the upper right hand corner of the texel, which has UV

10
00:00:35,524 --> 00:00:41,366
of 1.0, 1.0. Would when multiplied by the texture resolution of 16 by 16, then

11
00:00:41,366 --> 00:00:47,560
have texel coordinates of 16.0, 16.0, a texel that doesn't exist. In practical

12
00:00:47,560 --> 00:00:52,180
terms, this doesn't matter as the value 15.99999 repeating is the same value as

13
00:00:52,180 --> 00:00:56,750
16.0. So, there is a valid texel and a valid texel location to sample.
