1
00:00:00,410 --> 00:00:04,634
Let's look at the answer to our atomic instruction quiz which asks, what do we

2
00:00:04,634 --> 00:00:08,482
need to implement locks easily. An instruction that,

3
00:00:08,482 --> 00:00:11,446
loads memory, stores to memory, or one that

4
00:00:11,446 --> 00:00:14,488
reads and writes memory, or one that doesn't

5
00:00:14,488 --> 00:00:17,980
access memory at all. We already, saw that

6
00:00:17,980 --> 00:00:22,315
when either instruction does something like this, without

7
00:00:22,315 --> 00:00:25,560
interference from others. So we the instruction that

8
00:00:25,560 --> 00:00:29,900
atomically does this to operations. One is a read, one

9
00:00:29,900 --> 00:00:33,476
is a write. So an instruction to just read's memory,

10
00:00:33,476 --> 00:00:35,610
will not give us what we want. It's capable of

11
00:00:35,610 --> 00:00:37,970
doing this, but it's not going to let us do

12
00:00:37,970 --> 00:00:40,742
this. A store, might be able to do this, but

13
00:00:40,742 --> 00:00:42,999
it can not first check the log variable to see

14
00:00:42,999 --> 00:00:45,828
if it's available. So what we need really is an

15
00:00:45,828 --> 00:00:50,610
instruction that both reads, and then writes the memory. And certainly

16
00:00:50,610 --> 00:00:53,520
we don't need instruction that doesn't access memory because the lock

17
00:00:53,520 --> 00:00:58,650
var is a memory location. So the correct answer is this.
