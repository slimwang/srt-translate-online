1
00:00:00,290 --> 00:00:04,960
To alleviate some of the pain points that I just mentioned, what we want to ask

2
00:00:04,960 --> 00:00:08,630
is the question, can virtualization help? We've seen

3
00:00:08,630 --> 00:00:13,250
how virtualization is a powerful technique for hosting

4
00:00:13,250 --> 00:00:16,830
multiple operating systems images on the same hardware

5
00:00:16,830 --> 00:00:19,130
without a significant loss of performance. In the

6
00:00:19,130 --> 00:00:21,360
context of a single processor. Now, the question

7
00:00:21,360 --> 00:00:25,650
is, can this idea be extended to a multiprocessor?

8
00:00:25,650 --> 00:00:30,810
And this is the thought experiment that was carried out at Stanford, in the

9
00:00:30,810 --> 00:00:34,600
cellular disco project. Cellular disco combines the

10
00:00:34,600 --> 00:00:38,940
idea of virtualization. And the needs for

11
00:00:38,940 --> 00:00:43,150
scalability of parallel operating system, commensurate with

12
00:00:43,150 --> 00:00:45,030
the underlying hardware. So there is a

13
00:00:45,030 --> 00:00:47,710
thin virtualization layer, which is the cellular

14
00:00:47,710 --> 00:00:51,920
disco layer. And the cellular disco layer manages

15
00:00:51,920 --> 00:00:55,980
the hardware resources namely CPU, the I/O

16
00:00:55,980 --> 00:00:59,540
devices, memory management and so on. Now

17
00:00:59,540 --> 00:01:05,980
the most hairy part in dealing with any operating system is the IO management.

18
00:01:05,980 --> 00:01:11,500
Even in a desktop environment and a PC environment most of the code is

19
00:01:11,500 --> 00:01:14,640
really third-party code that is device driver

20
00:01:14,640 --> 00:01:17,630
code that is sitting inside the operating system.

21
00:01:17,630 --> 00:01:18,960
And so that is the thing that is

22
00:01:18,960 --> 00:01:22,160
one of the hairy parts. Managing the IO subsystem.

23
00:01:22,160 --> 00:01:25,060
So in this start experiment, what cellular disco

24
00:01:25,060 --> 00:01:29,960
does is to show by construction that you can

25
00:01:29,960 --> 00:01:32,690
alleviate some of the pinpoints in building an

26
00:01:32,690 --> 00:01:35,220
operating system, especially with this I/O management. So I'm

27
00:01:35,220 --> 00:01:42,720
going to focus on just the I/O management part and on how IO is handled with the

28
00:01:42,720 --> 00:01:45,720
cellular disco sitting in the middle between the

29
00:01:45,720 --> 00:01:48,830
virtual machine that is sitting on top. And

30
00:01:48,830 --> 00:01:51,020
the, the physical hardware sitting at the bottom.

31
00:01:51,020 --> 00:01:54,530
So, this particular thought experiment was conducted on

32
00:01:54,530 --> 00:01:58,230
a machine called the Origin 2000 from, SGI.

33
00:01:58,230 --> 00:02:00,800
It's a 32 node, machine. And that was

34
00:02:00,800 --> 00:02:03,790
the shared memory multiprocessor on which this, thought

35
00:02:03,790 --> 00:02:07,940
experiment was conducted. And the, operating system is

36
00:02:07,940 --> 00:02:09,990
a flavor of a UNIX operating system called

37
00:02:09,990 --> 00:02:12,450
IRIX. That's the host operating system running on

38
00:02:12,450 --> 00:02:16,440
top of the, Origin 2000. The VMM layer

39
00:02:16,440 --> 00:02:19,520
cellular disco sits in between the guest operating

40
00:02:19,520 --> 00:02:22,950
system, and the. Host operating system, and the

41
00:02:22,950 --> 00:02:26,290
way visualization is done is a standard virtual

42
00:02:26,290 --> 00:02:30,160
machine trick, and that is trap and emulate.

43
00:02:30,160 --> 00:02:33,600
And what they've done is shown the construction that

44
00:02:33,600 --> 00:02:37,520
it is possible to do this and do this efficiently. And let's just walk through

45
00:02:37,520 --> 00:02:40,440
what happens on an I/O request. The guest

46
00:02:40,440 --> 00:02:43,940
operating system makes an IO request. And this

47
00:02:43,940 --> 00:02:49,060
results in a trap into the VMM layer, cellular disco. Cellular

48
00:02:49,060 --> 00:02:53,970
disco rewrites this request as coming from it, rather

49
00:02:53,970 --> 00:02:58,960
than from the guest operating system. And. Makes the actual I/O request,

50
00:02:58,960 --> 00:03:02,160
this is the virtual request coming from the guest

51
00:03:02,160 --> 00:03:04,800
operating system, so this is the actual I/O request

52
00:03:04,800 --> 00:03:07,540
that is passed down to the host operating system,

53
00:03:07,540 --> 00:03:10,070
Irix in this case. And the Irix operating system

54
00:03:10,070 --> 00:03:12,470
does its own thing, the, whatever the device travel

55
00:03:12,470 --> 00:03:17,420
is going to do, and carries out that operation, And

56
00:03:17,420 --> 00:03:21,420
once that operation has been scheduled, it might indicate

57
00:03:21,420 --> 00:03:24,020
that, yes, I've scheduled it. Let's say, it's a

58
00:03:24,020 --> 00:03:26,520
DMA operation. So it might say that, yes, I

59
00:03:26,520 --> 00:03:29,430
scheduled it, sends it up to them, the Host

60
00:03:29,430 --> 00:03:32,220
Irix operating system. And the Host Irix operating system

61
00:03:32,220 --> 00:03:35,170
passes it to Cellular Disco, passes it to the

62
00:03:35,170 --> 00:03:38,680
Guest Operating System. So this is the path of

63
00:03:38,680 --> 00:03:42,205
dispatching an IO request. Now, what happens when the

64
00:03:42,205 --> 00:03:45,070
I/O request actually completes? This is where the trick

65
00:03:45,070 --> 00:03:49,670
comes in of trap and emulate. Because Cellular Disco

66
00:03:49,670 --> 00:03:55,830
has made it appear that this request is really coming from it, it is installed,

67
00:03:55,830 --> 00:04:01,410
when it gave this I/O request, it installed in it The place that needs to

68
00:04:01,410 --> 00:04:04,960
be called in the VMM layer. So

69
00:04:04,960 --> 00:04:08,270
when the completion interrupt comes in, normally, in

70
00:04:08,270 --> 00:04:12,030
any vanilla operating system, completion interrupt will go

71
00:04:12,030 --> 00:04:15,250
to the host operating system. But Cellular Disco

72
00:04:15,250 --> 00:04:19,390
has faked it When it passed the request

73
00:04:19,390 --> 00:04:21,820
to say that when a completion request comes in,

74
00:04:21,820 --> 00:04:24,420
call me. That's what was the magic that

75
00:04:24,420 --> 00:04:26,440
was done in the forward path. And therefore, when

76
00:04:26,440 --> 00:04:29,570
the completion request happens, it really calls the

77
00:04:29,570 --> 00:04:33,110
VMM layer, and the VMM layer does what it

78
00:04:33,110 --> 00:04:36,470
needs to do and Makes it appear as though

79
00:04:36,470 --> 00:04:40,460
it's a normal interrupt coming from the device back

80
00:04:40,460 --> 00:04:43,440
to the host Irix operating system and the host

81
00:04:43,440 --> 00:04:46,180
Irix operating system in turn passes it back to

82
00:04:46,180 --> 00:04:49,370
Cellular Disco and then onto the Guest operating system.

83
00:04:49,370 --> 00:04:52,000
So this is the trick by which it does the

84
00:04:52,000 --> 00:04:55,270
trap and emulate for dealing with every I/O subsystem

85
00:04:55,270 --> 00:04:58,630
so there's no need to change Any part of

86
00:04:58,630 --> 00:05:02,250
the I/O subsystem in the host operating system, everything

87
00:05:02,250 --> 00:05:05,740
is being managed by this trick of trap and emulate

88
00:05:05,740 --> 00:05:07,640
that is happening in the cellular disco layer.

89
00:05:07,640 --> 00:05:10,690
So, the standard virtual machine trick of trap

90
00:05:10,690 --> 00:05:14,180
and emulate is being used extensively in providing

91
00:05:14,180 --> 00:05:16,370
the services that you need. In a guest

92
00:05:16,370 --> 00:05:21,460
operating system, that is running on a multiprocessor. So the start experiment

93
00:05:21,460 --> 00:05:26,820
was, was really to show by construction how to do this

94
00:05:26,820 --> 00:05:31,890
idea of developing an operating system for a new hardware,

95
00:05:31,890 --> 00:05:34,790
without completely rewriting the operating system, by

96
00:05:34,790 --> 00:05:38,400
exploiting the facilities that, that maybe their already

97
00:05:38,400 --> 00:05:40,820
In the host operating system. Once again this

98
00:05:40,820 --> 00:05:42,780
should remind you of another thing that we've

99
00:05:42,780 --> 00:05:45,470
seen before when we discussed operating system

100
00:05:45,470 --> 00:05:49,420
structures and that is, lead case, showing by

101
00:05:49,420 --> 00:05:52,970
construction. That a microkernel design can be as

102
00:05:52,970 --> 00:05:56,690
efficient as a monolithic design. Similar to that,

103
00:05:56,690 --> 00:05:58,400
what these folks have done is that by

104
00:05:58,400 --> 00:06:01,950
construction they have shown that a virtual machine

105
00:06:01,950 --> 00:06:05,750
monitor can manage the resources of a multiprocessor

106
00:06:05,750 --> 00:06:08,210
as well as a native operating system. And they

107
00:06:08,210 --> 00:06:12,070
showed it by construction. This cellular disco runs

108
00:06:12,070 --> 00:06:16,730
as a multithreaded kernel process on top of, the

109
00:06:16,730 --> 00:06:19,600
host operating system. Irix in this case. And

110
00:06:19,600 --> 00:06:22,530
the other thing that they have shown the construction

111
00:06:22,530 --> 00:06:25,420
is that the overhead of doing it this

112
00:06:25,420 --> 00:06:28,270
way providing the services that is needed for

113
00:06:28,270 --> 00:06:31,590
the desktop operating system. Through this cellular disco

114
00:06:31,590 --> 00:06:36,110
virtualization layer can be kept efficient, keep the overhead

115
00:06:36,110 --> 00:06:39,370
low, and the virtualization can be efficient, and

116
00:06:39,370 --> 00:06:41,800
they've shown that it can be done within 10%

117
00:06:41,800 --> 00:06:45,220
for many applications that run on the guest

118
00:06:45,220 --> 00:06:47,630
operating system. So that's the proof of the pudding

119
00:06:47,630 --> 00:06:50,910
is of course, the ED. And so what they have shown is that the

120
00:06:50,910 --> 00:06:54,250
virtualization overhead can be kept low, by

121
00:06:54,250 --> 00:06:56,930
really showing how applications can be run

122
00:06:56,930 --> 00:07:01,380
on a guest operating system and through the services provided by the VMM layer,

123
00:07:01,380 --> 00:07:06,770
cellular disco, they show that the drop in performance can be kept fairly low.
