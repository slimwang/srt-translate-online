1
00:00:00,000 --> 00:00:02,000
Here's the whole program.

2
00:00:02,000 --> 00:00:07,000
Now, compilers have a reputation as being difficult and more complicated than interpreters,

3
00:00:07,000 --> 00:00:13,000
but notice here that the compilers is actually in many ways simpler than the interpreter.

4
00:00:13,000 --> 00:00:16,000
It's fewer lines of code over all.

5
00:00:16,000 --> 00:00:20,000
One reason is because we didn't have to duplicate effort here

6
00:00:20,000 --> 00:00:23,000
of saying first we need constructors to build up a literal

7
00:00:23,000 --> 00:00:27,000
and then within matchset have an interpreter for that literal.

8
00:00:27,000 --> 00:00:29,000
Rather we did it just once.

9
00:00:29,000 --> 00:00:35,000
We said the constructor for literal returns a function which is going to be

10
00:00:35,000 --> 00:00:38,000
the implementation of the compiler for that type of pattern.

11
00:00:38,000 --> 00:00:40,000
It's very concise. Most of these are one-liners.

12
00:00:40,000 --> 00:00:44,000
Maybe I cheated a little bit and I replaced the word "text" with the word "t"

13
00:00:44,000 --> 00:00:49,000
to make it a little bit shorter and fit on one line. There's only one that's complicated.

14
00:00:49,000 --> 00:00:52,000
That's the star of x, because it's recursive.

15
00:00:52,000 --> 00:00:56,000
The ones I haven't listed here is because they're all the same as before.

16
00:00:56,000 --> 00:00:58,000
Before we get into star(x) let me note that.

17
00:00:58,000 --> 00:01:03,000
I didn't have to put down search here, because search is exactly the same as before.

18
00:01:03,000 --> 00:01:08,000
I didn't have to put down plus, because plus is exactly the same as before.

19
00:01:08,000 --> 00:01:10,000
It's defined in terms of star.

20
00:01:10,000 --> 00:01:12,000
What is the definition of star?

21
00:01:12,000 --> 00:01:15,000
One thing we could return is the remainder could be the text itself.

22
00:01:15,000 --> 00:01:20,000
Star of something--you could choose not to take any of it and return the entire text

23
00:01:20,000 --> 00:01:22,000
as the remainder. That's one possibility.

24
00:01:22,000 --> 00:01:26,000
The other possibility is we could apply the pattern x.

25
00:01:26,000 --> 00:01:31,000
From star(x) apply the pattern x to the text and take those sets as remainders.

26
00:01:31,000 --> 00:01:35,000
For every remainder that's not the text itself--

27
00:01:35,000 --> 00:01:38,000
because we already took care of that. We don't need to take care of it again.

28
00:01:38,000 --> 00:01:42,000
For all the remainders that are different from the whole text

29
00:01:42,000 --> 00:01:46,000
then we go through and we apply star(x) to that remainder.

30
00:01:46,000 --> 00:01:48,000
We get a new remainder and that's the result.

31
00:01:48,000 --> 00:01:50,000
That's all we need for the compiler result.

32
00:01:50,000 --> 00:01:56,000
Oh, one piece that was missing is how do interface the match function,

33
00:01:56,000 --> 00:02:02,000
which takes a pattern and a text, with this compiler where a pattern is applied to the text.

34
00:02:02,000 --> 00:02:04,000
That's one line, which is slightly different.

35
00:02:04,000 --> 00:02:06,000
Here before we called matchset.

36
00:02:06,000 --> 00:02:14,000
In the previous implementation we had matchset(pattern, text).

37
00:02:14,000 --> 99:59:59,999
Your job then is to replace that with the proper code for the implementation that calls the compiler.
