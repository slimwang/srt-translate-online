1
00:00:00,140 --> 00:00:03,930
So far, we've seen two aggregation operators, group and sort. There

2
00:00:03,930 --> 00:00:05,920
are several others in addition to these two. I'm going to

3
00:00:05,920 --> 00:00:09,790
go through each one briefly to explain how it works. I'll

4
00:00:09,790 --> 00:00:13,160
just summarize them here. Later we'll dig into each one individually, and

5
00:00:13,160 --> 00:00:15,670
I'll show you what it does. All right, so the first

6
00:00:15,670 --> 00:00:19,300
operator we'll look at is project. I've put together some dummy

7
00:00:19,300 --> 00:00:21,590
data here that we can use as we talk about each

8
00:00:21,590 --> 00:00:25,260
one of these operators. Now, the project operator, allows you to shape

9
00:00:25,260 --> 00:00:28,130
documents you receive as input into what you need for

10
00:00:28,130 --> 00:00:31,050
the next stage. The simplest form of shaping is using

11
00:00:31,050 --> 00:00:34,880
project to select which fields you're interested in exactly. Like

12
00:00:34,880 --> 00:00:37,050
we did in the last lesson, when projecting out the

13
00:00:37,050 --> 00:00:40,060
motto for cities, and other single fields we were interested

14
00:00:40,060 --> 00:00:43,160
in looking at. So for example here, if in the

15
00:00:43,160 --> 00:00:45,650
documents I receive to my stage in which I'm using

16
00:00:45,650 --> 00:00:50,410
the project operator, I'm interested, say, in this field, and perhaps

17
00:00:50,410 --> 00:00:52,570
this one as well. Then I can use the

18
00:00:52,570 --> 00:00:57,030
Project operator to simply pull out these individual values, regardless

19
00:00:57,030 --> 00:01:00,780
of where they're nested in the input documents. And,

20
00:01:00,780 --> 00:01:04,120
project them out in documents, into the next stage of

21
00:01:04,120 --> 00:01:06,740
the pipeline, or the result if I'm at the

22
00:01:06,740 --> 00:01:09,490
end of the pipeline. We'll look at the syntax for

23
00:01:09,490 --> 00:01:13,110
Project a little bit later. Essentially with Project I can

24
00:01:13,110 --> 00:01:15,990
take the fields I receive in an individual document, and

25
00:01:15,990 --> 00:01:18,070
perform a number of different types of operations on

26
00:01:18,070 --> 00:01:21,100
them, in order to produce documents for the next stage

27
00:01:21,100 --> 00:01:24,000
of the pipeline. Select is one. I could also

28
00:01:24,000 --> 00:01:26,390
say, for example, as we'll look at later, produce a

29
00:01:26,390 --> 00:01:29,970
ratio based on two numeric fields and create a

30
00:01:29,970 --> 00:01:32,910
new field that will then be passed on in documents

31
00:01:32,910 --> 00:01:35,380
to the next stage of the pipeline. The next

32
00:01:35,380 --> 00:01:40,790
operator I want to look at is match. Match filters documents,

33
00:01:40,790 --> 00:01:44,130
so for example, I might set up some match criteria

34
00:01:44,130 --> 00:01:46,880
that might cause me to end up filtering, so that

35
00:01:46,880 --> 00:01:50,170
I only ended up with this document and this document.

36
00:01:50,170 --> 00:01:53,920
From the documents I was passed as input to my aggregation

37
00:01:53,920 --> 00:01:56,860
stage using the new match operator. I can, of course,

38
00:01:56,860 --> 00:02:01,200
also group and sort. And we looked at a pretty detailed

39
00:02:01,200 --> 00:02:02,610
example for both of these, so I wont' go into

40
00:02:02,610 --> 00:02:06,290
further detail here. So the next operator I'd like to cover

41
00:02:06,290 --> 00:02:09,710
is skip. Skip is designed to allow us to simply

42
00:02:09,710 --> 00:02:12,880
skip over a certain number of documents at the beginning

43
00:02:12,880 --> 00:02:15,850
of our input set of documents to the aggregation stage

44
00:02:15,850 --> 00:02:18,550
using skip. So, for example, if I wanted to skip

45
00:02:18,550 --> 00:02:22,020
the first three input documents. Then the first document I

46
00:02:22,020 --> 00:02:25,530
would output would be this one, and all documents following

47
00:02:25,530 --> 00:02:28,975
it. Limit kind of does the reverse of skip, so

48
00:02:28,975 --> 00:02:31,354
in this case, if I limited what I was passing on

49
00:02:31,354 --> 00:02:34,861
to the next stage of the pipeline to three documents. Then what I

50
00:02:34,861 --> 00:02:37,303
would be doing, is simply taking those

51
00:02:37,303 --> 00:02:40,640
three documents and filtering out everything else.
