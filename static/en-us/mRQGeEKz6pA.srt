1
00:00:00,000 --> 00:00:05,000
Based on our coverage tracker, we can now compare the coverage for different inputs.

2
00:00:05,000 --> 00:00:09,000
I'm going to use the input foo without markup, as we've just seen it,

3
00:00:09,000 --> 00:00:12,000
I'm going to use foo with HTML markup,

4
00:00:12,000 --> 00:00:16,000
and I'm going to use the same enclosed in double quotes.

5
00:00:16,000 --> 00:00:19,000
Let's first start with foo as we've just seen it.

6
00:00:19,000 --> 00:00:21,000
Here the tag line is being executed,

7
00:00:21,000 --> 00:00:24,000
initialization of code, initialization of out is being executed.

8
00:00:24,000 --> 00:00:27,000
We have the loop, overall characters, we have the 1st condition,

9
00:00:27,000 --> 00:00:29,000
we have the 2nd condition,

10
00:00:29,000 --> 00:00:31,000
and we have the 3rd condition.

11
00:00:31,000 --> 00:00:34,000
As we've seen before, none of these conditions evaluates to true

12
00:00:34,000 --> 00:00:37,000
for any of the characters in foo.

13
00:00:37,000 --> 00:00:40,000
Instead, only adding characters to out is being executed.

14
00:00:40,000 --> 00:00:43,000
The assertion, finally, passes.

15
00:00:43,000 --> 00:00:47,000
Now let's see what this looks like for foo with markup.

16
00:00:47,000 --> 00:00:50,000
Again, the initialization is carried out

17
00:00:50,000 --> 00:00:52,000
for this input as well, as is the loop.

18
00:00:52,000 --> 00:00:57,000
However, here this condition immediately becomes true already on the 1st character,

19
00:00:57,000 --> 00:00:59,000
so tag is being set to true too.

20
00:00:59,000 --> 00:01:02,000
At the end of the tag, tag is being set to false again.

21
00:01:02,000 --> 00:01:04,000
We also check this condition,

22
00:01:04,000 --> 00:01:07,000
but since we don't have any quotes in there, this line is never executed,

23
00:01:07,000 --> 00:01:09,000
and, of course, we add individual characters.

24
00:01:09,000 --> 00:01:11,000
The assertion in the end passes.

25
00:01:11,000 --> 00:01:14,000
Now let's come to our input which should trigger a failure.

26
00:01:14,000 --> 00:01:18,000
That is, the same thing as before but now enclosed in double quotes.

27
00:01:18,000 --> 00:01:21,000
Again, all of this is executed, no way to avoid this.

28
00:01:21,000 --> 00:01:25,000
The 1st thing that happens in here is that quote is being set

29
00:01:25,000 --> 00:01:27,000
over here with the 1st character.

30
00:01:27,000 --> 00:01:31,000
And since quote is being set, these 2 conditions never hold.

31
00:01:31,000 --> 00:01:34,000
And everything, including the tag characters up here,

32
00:01:34,000 --> 00:01:36,000
is being added to the output.

33
00:01:36,000 --> 00:01:39,000
Since the markup characters are being added,

34
00:01:39,000 --> 00:01:41,000
the assertion finally fails.

35
00:01:41,000 --> 00:01:43,000
If you look at the coverage up here,

36
00:01:43,000 --> 00:01:45,000
you find that there is one line in the program

37
00:01:45,000 --> 00:01:49,000
whose execution correlates with failure.

38
00:01:49,000 --> 00:01:53,000
And this is precisely this line, namely, quote = not quote.

39
00:01:53,000 --> 00:01:56,000
This line is only executed in the failing run.

40
00:01:56,000 --> 00:02:01,000
So all we need in this situation is to look at the governing condition,

41
00:02:01,000 --> 00:02:04,000
and lo and behold, we do have a defect.

42
00:02:04,000 --> 00:02:07,000
Ha! That was easy, wasn't it?

43
00:02:07,000 --> 00:02:09,000
Unfortunately, things are not always that easy.
