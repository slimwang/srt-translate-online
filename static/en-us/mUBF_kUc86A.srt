1
00:00:00,640 --> 00:00:04,951
First, let's look at how we're going to use the decode method. It's going to

2
00:00:04,951 --> 00:00:10,390
return a string with the decoded message. And it doesn't need any arguments.

3
00:00:10,390 --> 00:00:18,660
So, in the decoder tester, we want to print out the result of decoder.decode.

4
00:00:18,660 --> 00:00:23,664
The decoder was made with the coded messages string already in it. So we don't

5
00:00:23,664 --> 00:00:28,448
need to pass that string in again. Now, back to the decoder itself. We need to

6
00:00:28,448 --> 00:00:33,820
write a for loop that reads every 10th letter, starting with the 0th one. Since

7
00:00:33,820 --> 00:00:36,180
we're reading a string, we want to go as long as the index is less than the

8
00:00:36,180 --> 00:00:40,652
length of the string. EncodedMessage is the string that we're reading. And

9
00:00:40,652 --> 00:00:45,092
instead of incrementing by one at a time I'm going to increment i by 10 every

10
00:00:45,092 --> 00:00:51,552
time, so that we only see every tenth letter. Inside the loop, the part that I

11
00:00:51,552 --> 00:00:57,730
want to repeat is reading the ith letter, and adding it to decoded message. So

12
00:00:57,730 --> 00:01:03,425
decoded message will be itself Plus, encodedMessage.substring from i to i plus

13
00:01:03,425 --> 00:01:08,560
1. Remember, this is how we got one letter out of a longer string. Let's see if

14
00:01:08,560 --> 00:01:12,718
this works. Looks like there are more secret messages in here. If you're

15
00:01:12,718 --> 00:01:14,842
curious what they are, I guess you'll have to try starting at different

16
00:01:14,842 --> 00:01:18,781
indices. Let me talk for a moment about a couple of bugs that you might have

17
00:01:18,781 --> 00:01:23,722
encountered. If you accidentally wrote less than or equals to, right here like

18
00:01:23,722 --> 00:01:28,556
this. You might encounter a string out of bounds exception. When you try to

19
00:01:28,556 --> 00:01:34,239
access too high of an index in encodedMessage. A string index out of bounds

20
00:01:34,239 --> 00:01:38,411
exception is a runtime error. That particular runtime error is nice, because it

21
00:01:38,411 --> 00:01:41,711
stops the program and tells you, you tried to access a value that doesn't

22
00:01:41,711 --> 00:01:47,214
exist. Which is much better than silently messing up your program's result. You

23
00:01:47,214 --> 00:01:50,926
could correctly, though, a little clumsily write the condition as, i is less

24
00:01:50,926 --> 00:01:55,637
than or equal to encodedMessage.length(), minus 1. That would work, but I don't

25
00:01:55,637 --> 00:02:00,806
think it's as clean. When you iterate over a string, it's best, to go, as long,

26
00:02:00,806 --> 00:02:04,674
as i, is less than, the length.
