1
00:00:00,650 --> 00:00:02,320
To get started with
SleepingInTheLibrary,

2
00:00:02,320 --> 00:00:05,190
you'll want to download
the starter project for the app.

3
00:00:05,190 --> 00:00:07,450
The download link is posted
in the instructor notes.

4
00:00:08,510 --> 00:00:10,259
The UI is already built for this app, so

5
00:00:10,259 --> 00:00:12,276
we can focus on just
the networking aspects.

6
00:00:19,288 --> 00:00:21,522
If we run the app,
we have a title label at the top, and

7
00:00:21,522 --> 00:00:24,580
then we have a button at the bottom
that'll grab a new image from Flickr.

8
00:00:26,030 --> 00:00:29,530
Right now, if we tap the button,
it just disables the UI and it waits for

9
00:00:29,530 --> 00:00:31,000
an image to be loaded from Flickr.

10
00:00:32,530 --> 00:00:35,941
Back in our Story Board, we can
see that there's an image view for

11
00:00:35,941 --> 00:00:39,103
our image, as well as a label,
this photo title label that we

12
00:00:39,103 --> 00:00:41,975
can use to display any text
associated with the image.

13
00:00:49,129 --> 00:00:52,151
Then in the viewController.swift file,
we have a single action,

14
00:00:52,151 --> 00:00:55,450
grabNewImage, that's called
when the button is pressed.

15
00:00:55,450 --> 00:00:58,440
In the action, we disabled the UI so
that we can't ask for

16
00:00:58,440 --> 00:01:01,660
a new image while waiting for
another image to load.

17
00:01:01,660 --> 00:01:03,939
And then we call
the getImageFromFlickr method.

18
00:01:10,250 --> 00:01:12,644
This is where we'll start
writing our networking code.

19
00:01:15,574 --> 00:01:18,240
First, we'll create the NSURL.

20
00:01:18,240 --> 00:01:22,830
We can do this directly just by copying
the URL like we saw in the API Explorer.

21
00:01:22,830 --> 00:01:27,250
But from a design standpoint something
doesn't really feel right about this.

22
00:01:27,250 --> 00:01:29,010
It's not very maintainable.

23
00:01:29,010 --> 00:01:32,340
What if the names for the arguments
change, or we want to change the URL and

24
00:01:32,340 --> 00:01:33,520
use different arguments?

25
00:01:35,030 --> 00:01:38,099
It'd be much better if we
broke this URL to pieces.

26
00:01:47,343 --> 00:01:49,400
The good news is, is we're going to
help you out a little bit.

27
00:01:49,400 --> 00:01:52,370
If you've been poking around,
you may have noticed that we've created

28
00:01:52,370 --> 00:01:56,210
a separate Swift file,
Constants.swift, where we've defined

29
00:01:56,210 --> 00:01:59,960
all the constants for doing just that,
breaking the URL into pieces.

30
00:02:01,020 --> 00:02:03,450
Here in this file there are structs
that contain constants for

31
00:02:03,450 --> 00:02:07,010
the different parameter keys and
values that we want to use in our URL.

32
00:02:08,250 --> 00:02:10,710
So what's with the static keyword and

33
00:02:10,710 --> 00:02:15,370
also what are the structs that are
contained within the constant struct?

34
00:02:17,700 --> 00:02:21,590
First, the static keyword,
it's similar to the class keyword.

35
00:02:21,590 --> 00:02:25,350
And what it's doing here is it's saying,
this Method property,

36
00:02:25,350 --> 00:02:29,940
it doesn't belong to FlickrParameterKeys
struct instances, but

37
00:02:29,940 --> 00:02:33,490
instead it belongs to
the whole struct itself.

38
00:02:33,490 --> 00:02:38,040
Now, that may sound a little confusing,
but the benefit of this approach is that

39
00:02:38,040 --> 00:02:41,920
we can refer to these constant values
using a really nice dot notation,

40
00:02:41,920 --> 00:02:43,370
and it's very intuitive.

41
00:02:43,370 --> 00:02:45,204
So let me show you
what I'm talking about.

42
00:02:50,424 --> 00:02:53,687
And this is also going to help explain
the structs within structs that we

43
00:02:53,687 --> 00:02:54,990
saw in the constants file.

44
00:02:57,450 --> 00:03:02,395
So if we want to specify the method,
let me make sure which one that is, so

45
00:03:02,395 --> 00:03:06,980
FlickrPrameterKeys, and
then the method value, we can do this.

46
00:03:08,220 --> 00:03:12,640
And just like that, we're referring to a
constant in this very nice dot notation

47
00:03:12,640 --> 00:03:16,223
that kind of goes left to right and
it reads in a very intuitive way.

48
00:03:18,540 --> 00:03:26,965
Similarly, we could specify the API
key by going Constants.Flickr.

49
00:03:26,965 --> 00:03:32,134
Nope it's in Flickr, I think values,
ParameterValues, here we go.

50
00:03:32,134 --> 00:03:33,612
API key.

51
00:03:33,612 --> 00:03:35,549
Like so.

52
00:03:39,759 --> 00:03:42,439
And because of each of these properties,
the method and

53
00:03:42,439 --> 00:03:44,150
the API key are declared as static,

54
00:03:44,150 --> 00:03:47,300
we never have to make instants of
the constant struct to use them.

55
00:03:49,480 --> 00:03:51,510
Now you don't have to do it this way but

56
00:03:51,510 --> 00:03:55,571
we've chosen it because it's a nice way
to maintain all the constant values

57
00:03:55,571 --> 00:03:58,122
in one place,
where we can easily change them.

58
00:04:03,879 --> 00:04:07,130
Now, back in the view controller, we can
use these constants to build the URL.

59
00:04:08,530 --> 00:04:11,220
And I'll add a print statement for
good measure.

60
00:04:11,220 --> 00:04:14,430
So let's build and run, and
test if our URL is what we want.

61
00:04:16,970 --> 00:04:18,320
And this is not bad.

62
00:04:18,320 --> 00:04:21,040
You'll notice that in
the API key argument

63
00:04:21,040 --> 00:04:23,200
here I have the YOUR API KEY value.

64
00:04:23,200 --> 00:04:27,117
You want to substitute
your API key in there.

65
00:04:27,117 --> 00:04:29,916
But I think we can do
a lot better than this.

66
00:04:29,916 --> 00:04:33,950
This might be harder to see
than the first one was.

67
00:04:33,950 --> 00:04:38,290
I propose that we optimize the building
of our URL by creating a method that

68
00:04:38,290 --> 00:04:40,790
formats all of the arguments.

69
00:04:40,790 --> 00:04:43,310
And this will be more
reusable obviously, and

70
00:04:43,310 --> 00:04:47,460
it'll also give us an opportunity
to escape any of the characters

71
00:04:47,460 --> 00:04:51,310
in the arguments that might
include unsafe ASCII characters.

72
00:04:51,310 --> 00:04:51,910
Let's do this next.
