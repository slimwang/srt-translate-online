1
00:00:00,220 --> 00:00:03,120
One benefit of the algorithm
we've developed is that it

2
00:00:03,120 --> 00:00:04,990
is highly generalizable.

3
00:00:04,990 --> 00:00:08,740
It does not depend on working
only in three dimensions.

4
00:00:08,740 --> 00:00:13,290
In fact, just by changing the word
plane in our algorithm to the word line

5
00:00:13,290 --> 00:00:17,800
we can immediately use the code to solve
systems of equations in two dimensions.

6
00:00:17,800 --> 00:00:20,780
On the other hand,
this algorithm will allow us to work

7
00:00:20,780 --> 00:00:23,450
with higher dimensional
systems of equations too.

8
00:00:23,450 --> 00:00:27,020
Recall that a two dimensional
plane in 3 dimensions

9
00:00:27,020 --> 00:00:30,700
is defined by a single linear
equation in 3 variables.

10
00:00:30,700 --> 00:00:35,510
If we move to end dimensions a similar
notion is called a hyperplane.

11
00:00:35,510 --> 00:00:39,580
Which is defined by a single
linear equation with n variables.

12
00:00:39,580 --> 00:00:42,220
The geometry of higher
dimensional objects,

13
00:00:42,220 --> 00:00:45,500
even though we can't visualize
them in three dimensional space,

14
00:00:45,500 --> 00:00:48,530
is analogous to the geometry
we've studied so far.

15
00:00:48,530 --> 00:00:53,600
As with lines and planes, a hyperplane
in n dimensions is an (n-1)-dimensional

16
00:00:53,600 --> 00:00:58,270
object and it can be specified by
a normal vector and a base point.

17
00:00:58,270 --> 00:01:01,870
Also like lines and planes
the coefficients of the variables in

18
00:01:01,870 --> 00:01:05,920
the equation have a normal vector for
the higher dimensional hyperplane.

19
00:01:05,920 --> 00:01:08,420
And we need at least n
different hyperplanes and

20
00:01:08,420 --> 00:01:12,060
n dimensions in order to obtain
a unique intersection point.

21
00:01:12,060 --> 00:01:16,480
Most importantly Gaussian elimination
works just as well on systems of

22
00:01:16,480 --> 00:01:20,400
equations in more than three variables
as it does with just two and

23
00:01:20,400 --> 00:01:21,560
three variables.

24
00:01:21,560 --> 00:01:24,580
Similar to the line in
plain classes we created,

25
00:01:24,580 --> 00:01:26,990
let's now create a hyperplane class.

26
00:01:26,990 --> 00:01:31,920
To make it, I almost literally copy and
paste my code for the plain object

27
00:01:31,920 --> 00:01:35,250
just replacing all instances of
the word plane with hyperplane.

28
00:01:35,250 --> 00:01:39,920
The only other change I need to make
is in the initializer function.

29
00:01:39,920 --> 00:01:43,760
Here, since the hyperplane could
live in an arbitrary dimension.

30
00:01:43,760 --> 00:01:48,480
I'm adding an optional parameter,
dimension, to the list of arguments.

31
00:01:48,480 --> 00:01:52,450
If both the dimension and the normal
vector are missing in the initializer

32
00:01:52,450 --> 00:01:56,430
call, then I can't figure out which
dimension is being asked for, so

33
00:01:56,430 --> 00:01:57,770
I raise an exception.

34
00:01:57,770 --> 00:02:01,953
Otherwise, I either set the normal
vector to be all zeros in the given

35
00:02:01,953 --> 00:02:02,747
dimension or

36
00:02:02,747 --> 00:02:06,808
I set the dimension to be the dimension
of the normal vector given.

37
00:02:06,808 --> 00:02:08,300
And that's pretty much it.

38
00:02:08,300 --> 00:02:10,810
Going back to the linear system class

39
00:02:10,810 --> 00:02:14,680
after importing the hyperplane class
from my hyperplane module, and

40
00:02:14,680 --> 00:02:18,190
without changing any of the code
in my linear system class.

41
00:02:18,190 --> 00:02:21,209
I can now build a linear
system out of hyperplanes and

42
00:02:21,209 --> 00:02:25,049
as long as the dimensions of each
hyperplane in a system are the same

43
00:02:25,049 --> 00:02:26,571
it will work as expected.

44
00:02:26,571 --> 00:02:30,542
Here I have a system of lines,
here I have a system of planes, and

45
00:02:30,542 --> 00:02:36,110
here I have a system of four dimensional
hyperplanes in five dimensional space.

46
00:02:36,110 --> 00:02:40,090
And running the code I obtain
parameterizations of the solutions for

47
00:02:40,090 --> 00:02:43,540
each of the systems, or I'm told that
the system doesn't have a solution.
