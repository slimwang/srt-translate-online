1
00:00:00,000 --> 00:00:05,000
[Norvig] To understand the idea of heuristics, let's talk about another domain.

2
00:00:05,000 --> 00:00:07,000
Here we have the sliding puzzle domain.

3
00:00:07,000 --> 00:00:13,000
Remember we can slide around these little tiles and we try to reach a goal state.

4
00:00:13,000 --> 00:00:20,000
A 16 puzzle is kind of big, so let's show you the state space for the smaller 8 puzzle.

5
00:00:20,000 --> 00:00:22,000
Here is just a small portion of it.

6
00:00:22,000 --> 00:00:27,000
Let's figure out what the action schema looks like for this puzzle.

7
00:00:27,000 --> 00:00:33,000
We only need to describe one action, which is to slide a tile, T,

8
00:00:33,000 --> 00:00:38,000
from location A to location B.

9
00:00:38,000 --> 00:00:45,000
The precondition: the tile has to be on location A

10
00:00:45,000 --> 00:00:50,000
and has to be a tile

11
00:00:50,000 --> 00:01:02,000
and B has to be blank and A and B have to be adjacent.

12
00:01:02,000 --> 00:01:06,000
This should be an And sign, not an A.

13
00:01:06,000 --> 00:01:08,000
So that's the action schema.

14
00:01:08,000 --> 00:01:19,000
Oops. I forgot we need an effect, which should be that the tile is now on B

15
00:01:19,000 --> 00:01:38,000
and the blank is now on A and the tile is no longer on A and the blank is no longer on B.

16
00:01:38,000 --> 00:01:43,000
We talked before about how a human analyst could examine a problem

17
00:01:43,000 --> 00:01:47,000
and come up with heuristics and encode those heuristics as a function

18
00:01:47,000 --> 00:01:50,000
that would help search do a better job.

19
00:01:50,000 --> 00:01:53,000
But with this kind of a formal representation

20
00:01:53,000 --> 00:01:57,000
we can automatically come up with good representations of heuristics.

21
00:01:57,000 --> 00:02:02,000
For example, if we came up with a relaxed problem

22
00:02:02,000 --> 00:02:06,000
by automatically going in and throwing out some of the prerequisites--

23
00:02:06,000 --> 00:02:10,000
if you throw out a prerequisite, you make the problem strictly easier--

24
00:02:10,000 --> 00:02:12,000
then you get a new heuristic.

25
00:02:12,000 --> 00:02:17,000
So for example, if we crossed out the requirement that B has to be blank,

26
00:02:17,000 --> 00:02:22,000
then we end up with the Manhattan or city block heuristic.

27
00:02:22,000 --> 00:02:28,000
And if we also throw out the requirement that A and B have to be adjacent,

28
00:02:28,000 --> 00:02:31,000
then we get the number of misplaced tiles heuristic.

29
00:02:31,000 --> 00:02:37,000
So that means we could slide a tile from any A to any B, no matter how far apart they were.

30
00:02:37,000 --> 00:02:40,000
That's the number of misplaced tiles.

31
00:02:40,000 --> 00:02:42,000
Other heuristics are possible.

32
00:02:42,000 --> 00:02:46,000
For example, one popular thing is to ignore negative effects,

33
00:02:46,000 --> 00:02:52,000
to say let's not say that this takes away the blank being in B.

34
00:02:52,000 --> 00:02:56,000
So if we ignore that negative effect, we make the whole problem strictly easier.

35
00:02:56,000 --> 00:03:00,000
We'd have a relaxed problem, and that might end up being a good heuristic.

36
00:03:00,000 --> 00:03:04,000
So because we have our actions encoded in this logical form,

37
00:03:04,000 --> 00:03:07,000
we can automatically edit that form.

38
00:03:07,000 --> 00:03:10,000
A program can do that, and the program can come up with heuristics

39
00:03:10,000 --> 99:59:59,999
rather than requiring the human to come up with heuristics.
