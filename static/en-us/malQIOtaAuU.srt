1
00:00:00,150 --> 00:00:02,742
So we have seen in the latest quiz, that the

2
00:00:02,742 --> 00:00:06,342
one bit predictor works reasonably well for rules that have

3
00:00:06,342 --> 00:00:09,214
a lot of iterations. So what are the problems with

4
00:00:09,214 --> 00:00:13,227
one bit prediction that have related to better predictors. The

5
00:00:13,227 --> 00:00:16,590
one bit predictor predicts well,branches that are always taken it

6
00:00:16,590 --> 00:00:19,068
might make a mistake that first time it's used the

7
00:00:19,068 --> 00:00:22,136
branch, but after that it's going to start predicting taken

8
00:00:22,136 --> 00:00:25,360
and because of branches always take it always works well.

9
00:00:25,360 --> 00:00:28,285
Similarly always not taken is predict as well because

10
00:00:28,285 --> 00:00:31,340
the very first time it might mispredict, but after that

11
00:00:31,340 --> 00:00:33,810
it learns the behavior and it stays the same so

12
00:00:33,810 --> 00:00:37,290
we just have the always not taken. It also predicts

13
00:00:37,290 --> 00:00:40,410
well,the branches where the number of taken outcomes is

14
00:00:40,410 --> 00:00:43,702
vastly more than the number of not taken outcomes. Here

15
00:00:43,702 --> 00:00:46,898
it's going to learn after the first taken outcome that the

16
00:00:46,898 --> 00:00:50,570
next outcome should be predicted taken, and very, very rarely

17
00:00:50,570 --> 00:00:52,950
it's going to be wrong because of a not taken

18
00:00:52,950 --> 00:00:57,178
outcome. Similarly, the one way predictor predicts well when the

19
00:00:57,178 --> 00:01:00,016
number of not taken outcomes is vastly more than the

20
00:01:00,016 --> 00:01:04,250
number of taken outcomes for the same reason. Basically we

21
00:01:04,250 --> 00:01:06,700
will see not taken, not taken, not taken many, many

22
00:01:06,700 --> 00:01:08,780
times. The first time we see one of those we're

23
00:01:08,780 --> 00:01:11,960
going to learn it. And then the taken outcome will be

24
00:01:11,960 --> 00:01:15,550
mispredicted. So what's wrong with the one, one bit predictor.

25
00:01:15,550 --> 00:01:18,770
What's wrong with it, can be glimpsed from these.

26
00:01:18,770 --> 00:01:21,800
Let's look at the branch that is for example,

27
00:01:21,800 --> 00:01:24,760
more taken than not. So it's been taken many

28
00:01:24,760 --> 00:01:28,580
times. And then there is a not taken outcome and

29
00:01:28,580 --> 00:01:31,240
then it's going to be taken many more times.

30
00:01:31,240 --> 00:01:34,470
Let's now look at whether the one we predicted would

31
00:01:34,470 --> 00:01:37,130
be right on these. It's been taken many times,

32
00:01:37,130 --> 00:01:40,600
so it's going to predict taken, and then because it's

33
00:01:40,600 --> 00:01:42,500
been taken it's going to predict the next one as

34
00:01:42,500 --> 00:01:45,190
taken. The next one is going to be predicted taken,

35
00:01:45,190 --> 00:01:48,400
taken again. When we reach the not taken outcome, the

36
00:01:48,400 --> 00:01:52,840
last outcome was taken, so we will have a misprediction.

37
00:01:52,840 --> 00:01:55,210
This would not be much of a problem if not

38
00:01:55,210 --> 00:01:58,700
taken occurs very rarely, because we are basically mispredicting just

39
00:01:58,700 --> 00:02:03,440
the very rare occurrences. However, there is an interesting problem

40
00:02:03,440 --> 00:02:05,910
here, which is now that we are back to our

41
00:02:05,910 --> 00:02:09,610
taken behavior, which is the vastly dominant behavior

42
00:02:09,610 --> 00:02:12,450
in this case,. The last outcome was not not

43
00:02:12,450 --> 00:02:15,290
taken. So we're going to mispredict this branch too.

44
00:02:16,470 --> 00:02:18,830
Now, we're predicting not taken and the branch will

45
00:02:18,830 --> 00:02:21,650
be taken. After this, the previous outcome was taken

46
00:02:21,650 --> 00:02:24,770
so we predict taken. And we continue predicting taken.

47
00:02:24,770 --> 00:02:28,730
So the problem really is. That each anomaly, such

48
00:02:28,730 --> 00:02:30,970
as we have a branch that is almost always

49
00:02:30,970 --> 00:02:33,920
taken but sometimes it's not taken, results in two

50
00:02:33,920 --> 00:02:37,532
mispredictions. One for the anomalous behavior and then once

51
00:02:37,532 --> 00:02:40,648
more for the normal behavior that follows the anomaly.

52
00:02:40,648 --> 00:02:43,035
So the one bit predictor will not do so

53
00:02:43,035 --> 00:02:46,654
well, when the branch is biased towards, let's say,

54
00:02:46,654 --> 00:02:49,657
doing more taken branches but the number of not

55
00:02:49,657 --> 00:02:53,199
taken branches is still significant, or when there is

56
00:02:53,199 --> 00:02:56,230
more not taken branches. But the number of taken

57
00:02:56,230 --> 00:03:00,070
branches is significant. Because for each of the less

58
00:03:00,070 --> 00:03:03,730
dominant behavior is going to do mispredictions not just

59
00:03:03,730 --> 00:03:06,674
one. Typically also a branch predictor like this will

60
00:03:06,674 --> 00:03:09,550
not do well on short loops. Why? Because in a

61
00:03:09,550 --> 00:03:12,520
short loop we have a branch,that for example, exits

62
00:03:12,520 --> 00:03:15,460
the loop. Then we have some loop behavior and then

63
00:03:15,460 --> 00:03:18,580
a branch that loops back. The branch that exits

64
00:03:18,580 --> 00:03:21,260
the loop. Will be predicted correctly as long as we

65
00:03:21,260 --> 00:03:24,290
stay in the loop by this predictor. The exit from

66
00:03:24,290 --> 00:03:27,320
the loop will be mispredicted. The branch vector will now

67
00:03:27,320 --> 00:03:30,950
be trained to take this path here. When we come

68
00:03:30,950 --> 00:03:34,400
back to this short loop. It's going to mispredict the very

69
00:03:34,400 --> 00:03:38,290
first iteration for this branch. Because now it's going to think

70
00:03:38,290 --> 00:03:40,560
it should be this way. But, in fact, now we're

71
00:03:40,560 --> 00:03:43,132
staying in the loop. So have, for example, an eight

72
00:03:43,132 --> 00:03:47,640
iteration loop. We will have two mispredictions every 80 duration's.

73
00:03:47,640 --> 00:03:50,620
One at the end of the loop and one

74
00:03:50,620 --> 00:03:52,930
at the beginning of the loop because the previous

75
00:03:52,930 --> 00:03:55,640
ending of the loop trained the predictor that way.

76
00:03:55,640 --> 00:03:57,840
And then of course the one with predictor will be

77
00:03:57,840 --> 00:04:03,030
pretty bad. When the number of taken and not taken outcomes is similar, yet

78
00:04:03,030 --> 00:04:07,900
predictable. We will talk about this more later. But now, let's

79
00:04:07,900 --> 00:04:13,070
first devise a predictor that will fix this. So, can we devise

80
00:04:13,070 --> 00:04:16,252
a predictor that behaves similarly well here, but

81
00:04:16,252 --> 00:04:19,880
does not mispredict twice whenever there is an anomaly.
