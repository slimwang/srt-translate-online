1
00:00:00,290 --> 00:00:04,700
It is entirely possible that, for example, for this store and this load,

2
00:00:04,700 --> 00:00:09,660
the store doesn't have the address at the time when the load

3
00:00:10,720 --> 00:00:15,230
produces the address. And now, what do we do? The options for

4
00:00:15,230 --> 00:00:19,520
this situation are. Make loads and stores execute in order.

5
00:00:19,520 --> 00:00:23,780
So this load is not allowed to execute until all previous instructions have been

6
00:00:23,780 --> 00:00:27,970
completed. That guarantees that at the time when we want to figure out what to

7
00:00:27,970 --> 00:00:31,770
do with this load, we have all the store addresses and values so

8
00:00:31,770 --> 00:00:37,760
we can have a situation just like this one here. But of course, the orders,

9
00:00:37,760 --> 00:00:42,090
these instructions, so for example, loads cannot really proceed. So for

10
00:00:42,090 --> 00:00:46,654
example, if this load has been a cache mission takes a long time,

11
00:00:46,654 --> 00:00:50,940
all of these instructions will have to wait for that. The waiting can be

12
00:00:50,940 --> 00:00:55,270
reduced by not waiting for all of these instructions to complete,

13
00:00:55,270 --> 00:00:59,765
instead we just wait for all previous stored addresses to be known. Once we

14
00:00:59,765 --> 00:01:03,879
now all the stored addresses, our load address can be compared with them and

15
00:01:03,879 --> 00:01:08,290
then we know what to do. We either go to memory if nothing matches.

16
00:01:08,290 --> 00:01:12,140
We get the value from the store if it is available or we wait for the store to

17
00:01:12,140 --> 00:01:15,490
produce the value if the address matches but the store is not done yet

18
00:01:15,490 --> 00:01:19,890
with its value. The third option is the most aggressive, and it is to just let

19
00:01:19,890 --> 00:01:24,370
the load go anyway. So pretty much when we produce the address of the load,

20
00:01:24,370 --> 00:01:28,770
we check the addresses of the previous stores. If one of them does match,

21
00:01:28,770 --> 00:01:33,690
we wait for it, because clearly going to memory will be wrong. But if none of

22
00:01:33,690 --> 00:01:38,950
them match, we ignore the fact that some of them might match once we resolve

23
00:01:38,950 --> 00:01:44,010
their addresses. So in this situation, this load will end up going to memory.

24
00:01:44,010 --> 00:01:49,290
Now two things can happen. One is, this store resolves to something like 74,

25
00:01:49,290 --> 00:01:54,220
in which case we confirm that this was done, okay. Or

26
00:01:54,220 --> 00:02:00,710
the store might actually get the address of 174 in which case this load

27
00:02:00,710 --> 00:02:06,270
loaded the wrong value from memory. In that case we need to recover

28
00:02:06,270 --> 00:02:10,960
this load loaded the wrong value and possibly supplied it to other instructions.

29
00:02:10,960 --> 00:02:15,890
So in this case, the stores, when they produce the address will

30
00:02:15,890 --> 00:02:21,350
check whether any of the loads that follow them match the address and were done.

31
00:02:21,350 --> 00:02:26,600
And if so, then request a re-doing of the load and all of the subsequent

32
00:02:26,600 --> 00:02:31,790
instructions to fix the problem of the load loading the wrong value.

33
00:02:31,790 --> 00:02:37,360
Most modern processors today actually go with the go anyway option because it

34
00:02:37,360 --> 00:02:43,450
produces the best performance. If we let the loads go without waiting for

35
00:02:43,450 --> 00:02:48,730
store addresses, it turns out that most of the time we are right. So this

36
00:02:48,730 --> 00:02:53,520
most of the time successfully loads the value earlier than if we waited. But

37
00:02:53,520 --> 00:02:57,990
occasionally we have a cost of the recovery because we were wrong about this.

38
00:02:57,990 --> 00:03:01,860
And then there are entire schemes that try to predict when is this going to

39
00:03:01,860 --> 00:03:06,700
happen, let the loads go if it's unlikely and for loads that often conflict with

40
00:03:06,700 --> 00:03:10,300
some store, wait for that store to produce the address before we proceed.
