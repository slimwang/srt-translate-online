1
00:00:00,180 --> 00:00:02,890
So essentially, what the reference count and

2
00:00:02,890 --> 00:00:07,170
the existence guarantee is giving you is, it

3
00:00:07,170 --> 00:00:10,360
is giving you the same facility, without

4
00:00:10,360 --> 00:00:14,300
doing the hierarchical locking, that was what we

5
00:00:14,300 --> 00:00:16,820
really wanted. What we really wanted in

6
00:00:16,820 --> 00:00:20,000
this hierarchical locking is the existence guarantee of

7
00:00:20,000 --> 00:00:23,260
this process object to guarantee the integrity

8
00:00:23,260 --> 00:00:25,410
of this object. We're getting that. We're getting

9
00:00:25,410 --> 00:00:28,790
that by associating a reference count and making

10
00:00:28,790 --> 00:00:31,320
sure that this particular object is not gotten

11
00:00:31,320 --> 00:00:33,470
rid of until the reference count goes to

12
00:00:33,470 --> 00:00:37,180
zero. So we're achieving the effect of hierarchical

13
00:00:37,180 --> 00:00:41,107
locking without losing concurrency for operations that can

14
00:00:41,107 --> 00:00:44,410
go on in parallel. Of course if these

15
00:00:44,410 --> 00:00:47,880
page faults for T1 and T2 are accessing

16
00:00:47,880 --> 00:00:50,610
the same region of memory, you have no choice

17
00:00:50,610 --> 00:00:53,160
except to go to the same region object. But there

18
00:00:53,160 --> 00:00:56,280
again, this is something that the operating system can monitor

19
00:00:56,280 --> 00:00:59,370
over time and see if, even though it is the

20
00:00:59,370 --> 00:01:03,712
same region, maybe this region itself can be carved up into

21
00:01:03,712 --> 00:01:07,470
sub regions and promote concurrency. And the limit, you can

22
00:01:07,470 --> 00:01:10,320
have a region for every virtual page, but that might

23
00:01:10,320 --> 00:01:13,190
be too much, right? And that's the reason that you

24
00:01:13,190 --> 00:01:16,040
don't want to have a detonation of a page table into

25
00:01:16,040 --> 00:01:21,130
such a fine grain partition. But you might want to think about what is the

26
00:01:21,130 --> 00:01:26,650
right granularity to promote concurrency for services like this to go on

27
00:01:26,650 --> 00:01:29,530
in the multiprocessor. So coming back again

28
00:01:29,530 --> 00:01:32,560
to the hierarchical locking. The key to

29
00:01:32,560 --> 00:01:37,690
avoiding hierarchical locking in Tornado is to

30
00:01:37,690 --> 00:01:40,910
make the locking encapsulated in individual objects.

31
00:01:40,910 --> 00:01:44,300
There's no hierarchical locking. Locking is encapsulated in

32
00:01:44,300 --> 00:01:48,440
the individual object and you're reducing the scope

33
00:01:48,440 --> 00:01:51,200
of the lock to that particular object. So

34
00:01:51,200 --> 00:01:54,500
if there's a replica of this region, then

35
00:01:54,500 --> 00:01:57,910
a lock for a particular replica is only

36
00:01:57,910 --> 00:02:00,870
limited to that replica. And not across all

37
00:02:00,870 --> 00:02:03,630
the replicas of a particular region. That's important,

38
00:02:03,630 --> 00:02:06,700
it reduces the scope of the lock. And therefore

39
00:02:06,700 --> 00:02:11,530
it limits the contention for the lock. But of course it is l incumbent on the

40
00:02:11,530 --> 00:02:13,740
service provider to make sure that if a

41
00:02:13,740 --> 00:02:18,450
particular region is replicated, then the integrity of

42
00:02:18,450 --> 00:02:23,430
that replication is guaranteed by the operating system

43
00:02:23,430 --> 00:02:27,050
through a protective procedure called mechanism that keeps

44
00:02:27,050 --> 00:02:29,240
these regions consistent with one another because you

45
00:02:29,240 --> 00:02:31,740
made a replica of that. Even if the hardware

46
00:02:31,740 --> 00:02:35,290
provides cache coherence, there's no way to guarantee that these replicas

47
00:02:35,290 --> 00:02:40,710
will be consistent. Because they are dealing with different physical memories,

48
00:02:40,710 --> 00:02:44,720
and therefore, it is the responsibility of the operating system to

49
00:02:44,720 --> 00:02:48,230
make sure that these regions are kept consistent with one another.
