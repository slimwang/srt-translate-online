1
00:00:00,159 --> 00:00:05,200
Now, there is a convention in situation
calculus that predicates like At.

2
00:00:05,200 --> 00:00:11,554
We said plane p was at
airport x in situation s.

3
00:00:11,554 --> 00:00:17,150
These types of predicates that can vary
from one situation to another are called

4
00:00:17,150 --> 00:00:22,675
fluents, from the word fluent having to
do with fluidity or change over time.

5
00:00:22,675 --> 00:00:27,300
And the convention is that they
refer to a specific situation.

6
00:00:27,300 --> 00:00:31,955
And we always put that situation
argument that's the last

7
00:00:31,954 --> 00:00:33,475
in the predicate.

8
00:00:33,475 --> 00:00:38,388
Now, the trickiest part about situation
calculus is describing what changes and

9
00:00:38,389 --> 00:00:42,020
what doesn't change,
as a result of an action.

10
00:00:42,020 --> 00:00:46,620
Now remember, in classical planning,
we had action schemas,

11
00:00:46,619 --> 00:00:49,709
where we described one action at a time,
and said what changed.

12
00:00:51,039 --> 00:00:55,140
For situation calculus, it turns out to
be easier to do it the other way around.

13
00:00:55,140 --> 00:01:00,280
Instead of writing one action, or one
schema, or one axiom for each action,

14
00:01:00,280 --> 00:01:04,489
we do one for each fluent, for
each predicate that can change.

15
00:01:05,980 --> 00:01:10,500
And we use a convention called
successor state axioms, and

16
00:01:10,500 --> 00:01:14,659
these are used to describe what happens
in the state that's a successor

17
00:01:14,659 --> 00:01:16,530
of executing an action.

18
00:01:16,530 --> 00:01:22,590
And in general, a successor state
axiom will have the form of saying for

19
00:01:22,590 --> 00:01:27,799
all actions and
states If it's possible to execute

20
00:01:27,799 --> 00:01:33,179
action a instead s then I will show
in general what they look like here.

21
00:01:33,180 --> 00:01:38,190
Then the fluent is true if and
only if action

22
00:01:38,189 --> 00:01:44,319
a made it true or action a Then undo it.

23
00:01:44,319 --> 00:01:49,259
So that is either, it wasn't true
before and a made it be true.

24
00:01:49,260 --> 00:01:53,892
Or if it was true before, and a didn't
do something to stop it being true.

25
00:01:53,891 --> 00:01:57,012
For example, I'll show you
the successor's state axiom for

26
00:01:57,013 --> 00:01:58,410
the end predicate.

27
00:01:58,409 --> 00:02:01,420
And just to make it a little bit
simpler, I'll leave out all of the for

28
00:02:01,420 --> 00:02:02,350
all quantifiers.

29
00:02:02,349 --> 00:02:06,629
So wherever you see a variable without
a quantifier, assume there is a for all.

30
00:02:06,629 --> 00:02:14,310
And what we'll say is, it's possible
to execute a in situation s.

31
00:02:14,310 --> 00:02:19,819
If that's true, then then the in
predicate holds between some cargo C and

32
00:02:19,819 --> 00:02:25,299
some plane in the state
which is the result

33
00:02:25,300 --> 00:02:28,700
of executing action A in state has.

34
00:02:28,699 --> 00:02:36,689
So that in predicate will hold, if and
only if, either A was a load action.

35
00:02:36,689 --> 00:02:41,800
So if we load the cargo into the plane,
and then that results,

36
00:02:41,800 --> 00:02:46,170
the result of executing that action
A is that the cargo is in the plane.

37
00:02:47,199 --> 00:02:49,649
Or it might that

38
00:02:49,650 --> 00:02:54,530
it was already true that the cargo
is in the plane in situation s.

39
00:02:54,530 --> 00:03:00,400
And a is not equal to an on load action.

40
00:03:00,400 --> 00:03:06,319
So, for all a and s for which it's
possible to execute a in situation s

41
00:03:06,319 --> 00:03:12,189
the in predicate holds If and
only if the action was a load or the end

42
00:03:12,189 --> 00:03:16,030
predicate used to hold in the previous
state and the action is not an unload.

