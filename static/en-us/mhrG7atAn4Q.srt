1
00:00:00,000 --> 00:00:05,000
Just as in the Laplacian smoothing example before,

2
00:00:05,000 --> 00:00:08,000
the value of k is a smoothing parameter.

3
00:00:08,000 --> 00:00:11,000
It makes the function less scattered.

4
00:00:11,000 --> 00:00:15,000
Here is an example of k=1

5
00:00:15,000 --> 00:00:18,000
for a 2-class nearest neighbor problem.

6
00:00:18,000 --> 00:00:25,000
You can see the separation boundary is what's called a Voronoi diagram

7
00:00:25,000 --> 00:00:29,000
between the positive and negative class, and

8
00:00:29,000 --> 00:00:33,000
in cases where there is noise between these class boundaries,

9
00:00:33,000 --> 00:00:38,000
you'll find really funny, complex boundaries as indicated over here.

10
00:00:38,000 --> 00:00:45,000
Particularly interesting is this guy over here where the class of this circle over here

11
00:00:45,000 --> 00:00:50,000
protrudes way into the otherwise solid class.

12
00:00:50,000 --> 00:00:55,000
Now, as you go to k=3, you get this graph over here,

13
00:00:55,000 --> 00:00:57,000
which is smoother.

14
00:00:57,000 --> 00:01:01,000
So if you are over here, your two nearest neighbors are of this type over there,

15
00:01:01,000 --> 00:01:05,000
and you get a uniform class over here.

16
00:01:05,000 --> 00:01:09,000
In this region over here, you get uniform classes as solid classes

17
00:01:09,000 --> 00:01:11,000
as shown over here.

18
00:01:11,000 --> 00:01:15,000
The more you drive up k, the more clean this decision boundary becomes,

19
00:01:15,000 --> 00:01:19,000
but the more outliers are actually misclassified as well.

20
00:01:19,000 --> 00:01:22,000
So if I go back to my k-nearest neighbor method,

21
00:01:22,000 --> 00:01:26,000
we just learned that k is a regularizer.

22
00:01:26,000 --> 00:01:30,000
It controls the complexity of the k-nearest neighbor algorithm.

23
00:01:30,000 --> 00:01:34,000
and the larger k is, the smoother the output.

24
00:01:34,000 --> 00:01:38,000
We can, once again, use cross-validation to find the optimal k

25
00:01:38,000 --> 00:01:42,000
because there is an inherent trade off--between the complexity of what we want to fit

26
00:01:42,000 --> 99:59:59,999
and the goodness of the fit.
