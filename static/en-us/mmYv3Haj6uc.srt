1
00:00:00,000 --> 00:00:02,237
So Hillis and Steele scan is fairly efficient.

2
00:00:02,237 --> 00:00:04,684
It's actually the first scan to be implemented on GPUs.

3
00:00:04,684 --> 00:00:08,795
Guy Blelloch popularized another formulation of scan in 1990, however,

4
00:00:08,795 --> 00:00:11,090
that is even better at work efficiency.

5
00:00:11,090 --> 00:00:15,373
It's a little bit more complex in terms of the algorithm though, so let's take a look at another example.

6
00:00:15,373 --> 00:00:19,396
This algorithm has 2 stages--first to reduce, then to downsweep.

7
00:00:19,396 --> 00:00:22,450
And let's note that this is an exclusive scan.

8
00:00:22,450 --> 00:00:29,102
So we're going to do a sum scan that is exclusive, on the input array 1 through 8.

9
00:00:29,102 --> 00:00:31,327
And so it's going to, again, have 2 stages.

10
00:00:31,327 --> 00:00:35,187
The first is going to be a reduction, and it looks similar to the reductions that we've seen already.

11
00:00:35,187 --> 00:00:37,133
And then the second stage is going to be new.

12
00:00:37,133 --> 00:00:40,896
It's going to be a downsweep, and so that's going to take a different operator than we've seen before.

13
00:00:40,896 --> 00:00:45,931
Let's start with the reduction. The reduce step actually looks like a fairly standard reduction.

14
00:00:45,931 --> 00:00:48,696
The first step adds neighbors 1 hop away.

15
00:00:48,696 --> 00:00:51,488
The next step adds neighbors 2 hops away.

16
00:00:51,488 --> 00:00:54,862
And the third step is going to add neighbors 4 hops away.

17
00:00:54,862 --> 00:00:58,670
However, unlike in reduce, we're going to keep the intermediate results around.

18
00:00:58,670 --> 00:01:05,363
By intermediate results I mean this 1, this 3, this 3, this 10, 5, 11 and 7

19
00:01:05,363 --> 00:01:08,715
because we're going to use them during the downsweep step.

20
00:01:08,715 --> 00:01:11,037
Now step 2, the downsweep.

21
00:01:11,037 --> 00:01:15,153
We're going to start by resetting the rightmost piece of data to the identify operator.

22
00:01:15,153 --> 00:01:20,169
For sum, that identify operator is 0 and now we're going to use a communication

23
00:01:20,169 --> 00:01:25,487
pattern that is exactly the same as what we saw in the reduction step except in mirror image.

24
00:01:25,487 --> 00:01:28,539
So we see that we have this triangle kind of structure here.

25
00:01:28,539 --> 00:01:32,565
We're going to do the same thing upside down when we do downsweep.

26
00:01:32,565 --> 00:01:35,222
But what's going to be different about downsweep are 2 things.

27
00:01:35,222 --> 00:01:39,218
The first one is that we're going to use a different operator.

28
00:01:39,218 --> 00:01:43,798
So each operator is going to take 2 inputs, just as we did in reduction,

29
00:01:43,798 --> 00:01:48,314
a left input and a right input, but it's going to produce 2 outputs, not 1.

30
00:01:48,314 --> 00:01:52,852
So the left-most output is simply the right output copied to the left.

31
00:01:52,852 --> 00:01:58,175
The right output is equal to the sum because we're doing sum scan of the 2 inputs.

32
00:01:58,175 --> 00:02:03,224
The second thing that's a little bit different is that we're going to be using these intermediate results.

33
00:02:03,224 --> 00:02:07,960
As we need to do a downsweep between 2 elements, some of the downsweep operators might

34
00:02:07,960 --> 00:02:10,590
be written down here because we've derived them during the down-sweep.

35
00:02:10,590 --> 00:02:14,274
But if we're missing a piece of data, then we just simply drag down the piece of data

36
00:02:14,274 --> 00:02:18,290
that we need from the intermediate results that we stored up here during the reduce.

37
00:02:18,290 --> 00:02:24,123
So let's get started. We're going to being the downsweep by operating on this element and this element.

38
00:02:24,123 --> 00:02:27,383
That's, again, the mirror image of the communication pattern that we had before.

39
00:02:27,383 --> 00:02:29,619
So since we don't have an element written here,

40
00:02:29,619 --> 00:02:32,658
we'll just copy it down from the element that we have, right?

41
00:02:32,658 --> 00:02:37,092
So now we'll apply this down sweep operator to this pair of elements.

42
00:02:37,092 --> 00:02:41,316
The first we're going to do is we're going to take this 0, copy it over here.

43
00:02:41,316 --> 00:02:45,661
And then we'll take this 10, add it to this 0, and get 10.

44
00:02:45,661 --> 00:02:49,098
Now, we're going to operate on elements 2 to our left.

45
00:02:49,098 --> 00:02:54,763
So, the 10 is going to be paired with this 11 here, that we've dragged down.

46
00:02:54,763 --> 00:03:01,464
The 0 is going to be paired with this 3. So 0 will be copied over to the left.

47
00:03:01,464 --> 00:03:04,446
Three and 0 will be added to get a 3 here.

48
00:03:04,446 --> 00:03:09,422
Ten will be copied to the left, and 11 plus 10 is 21.

49
00:03:09,422 --> 00:03:14,947
Now for the final step, each of these elements will be paired with the item to its left.

50
00:03:14,947 --> 00:03:18,630
So, again, we're going to have to drag down intermediate values we kept around.

51
00:03:18,630 --> 00:03:24,708
We're going to drag down the 7, drag down this 5, drag down this 3, drag down this 1.

52
00:03:24,708 --> 00:03:27,910
And then for the final time apply your downsweep operator--

53
00:03:27,910 --> 00:03:33,917
0, 0 plus 1 is 1, copy the 3, 3 and 3 make 6.

54
00:03:33,917 --> 00:03:42,554
Copy the 10, 10 and 5 makes 15. Copy the 21, 7 and 21 make 28.

55
00:03:42,554 --> 00:03:47,342
So now our output sequence is 0, 1, 3, 6, 10, 15, 21, 28,

56
00:03:47,342 --> 00:03:52,983
which is the exclusive sum scan of the input of the vector from 1 to 8.

57
00:03:52,983 --> 00:03:57,135
What we see, for instance, is that every output such as this 21 here--

58
00:03:57,135 --> 00:04:01,574
21 is the sum of all the elements that came before.

59
00:04:01,574 --> 00:04:06,552
So 21 is the sum of 1 to 6, and so on.

60
00:04:06,552 --> 00:04:10,824
As a quiz I'd like you to compute the max scan of this input sequence--

61
00:04:10,824 --> 00:04:15,205
2 1 4 3, using this reduced downsweep method.

62
00:04:15,205 --> 00:04:20,043
So you're going to fill in these values from reduction and then fill in each of these values from a downsweep.

63
00:04:20,043 --> 00:04:23,196
And when you finish you should have the max scan,

64
00:04:23,196 --> 00:04:26,790
the max exclusive scan of these elements given these inputs.

65
00:04:26,798 --> 00:04:29,000
So give it a shot.
