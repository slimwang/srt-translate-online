1
00:00:00,000 --> 00:00:02,000
We go back to our overall master diagram.

2
00:00:02,000 --> 00:00:05,000
What we have is a driver's script which in this case was just the c program.

3
00:00:05,000 --> 00:00:09,000
We have a random test case generator which is basically two lines of code--one of them

4
00:00:09,000 --> 00:00:12,000
we had computed that used a random number to compute the number of bytes to read

5
00:00:12,000 --> 00:00:14,000
and the other one, actually called the read function.

6
00:00:14,000 --> 00:00:18,000
The software under test was the other function--the read all function that we wrote.

7
00:00:18,000 --> 00:00:21,000
The oracle was implemented by memory comparison function--that is to say

8
00:00:21,000 --> 00:00:24,000
did the read all command actually read the right bytes from a file--and so as we saw,

9
00:00:24,000 --> 00:00:30,000
the oracle never detect an error since we got the function right and everything work out.

10
00:00:30,000 --> 00:00:34,000
This case of implementing a read all call which is stand in for read that behaves better.

11
00:00:34,000 --> 00:00:38,000
It has been on my mind lately because I assigned this is as one problem on the final exam

12
00:00:38,000 --> 00:00:41,000
for my operating systems class that my students finished a couple of weeks ago.

13
00:00:41,000 --> 00:00:44,000
And it turned out that many of the students didn't implement the right code.

14
00:00:44,000 --> 00:00:48,000
A lot of times they forgot in the read all command, for example, to increment buffer so that

15
00:00:48,000 --> 00:00:51,000
subsequent calls to read wouldn't overwrite the original call to read.

16
00:00:51,000 --> 00:00:54,000
I saw so many of those that I decided I write the function myself and see if it was hard,

17
00:00:54,000 --> 00:00:57,000
and it was a little bit tricky but it worked out and that's why I thought it might

18
00:00:57,000 --> 00:00:59,000
make a good example for you all.
