1
00:00:00,140 --> 00:00:02,300
Okay, so we've looked at a number of different ways

2
00:00:02,300 --> 00:00:06,020
of interacting with MongoDB collections. We've looked at, how we go

3
00:00:06,020 --> 00:00:09,070
about inserting documents into the collection and a number of

4
00:00:09,070 --> 00:00:13,220
different ways of querying a collection to find documents of interest.

5
00:00:13,220 --> 00:00:15,980
We're now going to turn our attention to updating. And

6
00:00:15,980 --> 00:00:18,980
by that, I mean making modifications to existing documents in a

7
00:00:18,980 --> 00:00:21,760
collection. There are several ways to do this in MongoDB. The

8
00:00:21,760 --> 00:00:25,190
one that we're going to look at here, is the use

9
00:00:25,190 --> 00:00:28,480
of the save command. Now in PyMongo, this is

10
00:00:28,480 --> 00:00:32,381
actually a method on collections objects. Save does one

11
00:00:32,381 --> 00:00:35,030
or two things. If the object we pass to

12
00:00:35,030 --> 00:00:38,260
it already has an underscore ID and a document with

13
00:00:38,260 --> 00:00:41,380
that underscore ID is already in the collection. Then

14
00:00:41,380 --> 00:00:44,770
it simply replaces the document with that ID with this

15
00:00:44,770 --> 00:00:47,300
one. If there is no document with that underscore

16
00:00:47,300 --> 00:00:50,560
ID or the object that we're passing does not have

17
00:00:50,560 --> 00:00:54,080
an underscore ID field, then MongoDB will create a

18
00:00:54,080 --> 00:00:56,700
new document for us. Okay, so what we're doing

19
00:00:56,700 --> 00:01:00,790
here is, querying the cities collection for the city

20
00:01:00,790 --> 00:01:04,000
Munich or Munchen. And in this case, we'll get

21
00:01:04,000 --> 00:01:06,527
back a single document. And the reason why we're

22
00:01:06,527 --> 00:01:08,642
guaranteed to get back a single document, is because

23
00:01:08,642 --> 00:01:11,094
instead of using find, we're using the find_one command.

24
00:01:12,120 --> 00:01:15,643
Instead of returning a cursor as find does, find_one simply

25
00:01:15,643 --> 00:01:18,100
returns towards the first document it finds, that

26
00:01:18,100 --> 00:01:20,070
matches our query. So what we're doing in

27
00:01:20,070 --> 00:01:23,910
this code, is modifying this city document, so

28
00:01:23,910 --> 00:01:27,110
that it has a field for isoCountyCode and

29
00:01:27,110 --> 00:01:31,270
value for the appropriate three-character isoCountyCode for Germany,

30
00:01:31,270 --> 00:01:34,070
which is DEU. Okay? When we call save

31
00:01:34,070 --> 00:01:37,090
here, this document will be updated to include

32
00:01:37,090 --> 00:01:41,600
this field. Let's go ahead and run this. Okay,

33
00:01:41,600 --> 00:01:43,710
and now what I'm going to do is, I'm

34
00:01:43,710 --> 00:01:48,370
going to check that the document was updated appropriately. Here

35
00:01:48,370 --> 00:01:49,860
we can see the document before we did the

36
00:01:49,860 --> 00:01:54,014
update. I did a find on it earlier. And now

37
00:01:54,014 --> 00:01:56,766
we see this isoCountyCode field, showing up in the

38
00:01:56,766 --> 00:02:00,550
document. So what I'm going to do here is look at

39
00:02:00,550 --> 00:02:04,030
a few different examples, run them and then test

40
00:02:04,030 --> 00:02:06,468
the results of having run them, in the MongoDB shell.
