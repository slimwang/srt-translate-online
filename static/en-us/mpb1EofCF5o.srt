1
00:00:00,000 --> 00:00:02,000
So here is my solution.

2
00:00:02,000 --> 00:00:05,000
I created a new data structure called sdata,

3
00:00:05,000 --> 00:00:11,000
and I get it by sorting it using the sorted command applied to data.

4
00:00:11,000 --> 00:00:13,000
So that's Python notation.

5
00:00:13,000 --> 00:00:15,000
If you've never programmed before,

6
00:00:15,000 --> 00:00:17,000
get the notation by saying we get this thing data,

7
00:00:17,000 --> 00:00:20,000
we run it through the sorter, out comes something new,

8
00:00:20,000 --> 00:00:23,000
and we assign it to the left side over here--this new thing called sdata.

9
00:00:23,000 --> 00:00:25,000
I can just make these things up.

10
00:00:25,000 --> 00:00:27,000
And then I ask myself, "What's the right index?"

11
00:00:27,000 --> 00:00:33,000
So if sdata is of length 5, the index I want is not number 3, but number 2

12
00:00:33,000 --> 00:00:35,000
because the indexing starts at zero.

13
00:00:35,000 --> 00:00:38,000
So say len(data) returns 5.

14
00:00:38,000 --> 00:00:41,000
I subtract 1. It gives me 4.

15
00:00:41,000 --> 00:00:44,000
And I divide the 4 by 2.

16
00:00:44,000 --> 00:00:47,000
That gives me the index number 2, and that works for any data length.

17
00:00:47,000 --> 00:00:51,000
So if I had 7, for example, 7 minus 1 is 6.

18
00:00:51,000 --> 00:00:53,000
Divided by 2 is 3. It always gives me the middle element.

19
00:00:53,000 --> 00:00:58,000
And then we just return with this indexing over here the center element.

20
00:00:58,000 --> 00:01:00,000
This return with this command over here,

21
00:01:00,000 --> 00:01:03,000
the element of the sorted list that's right in the middle.

22
00:01:03,000 --> 00:01:05,000
And that returns the median.

23
00:01:05,000 --> 99:59:59,999
So if I hit the run button, I get back 2.
