1
00:00:00,000 --> 00:00:02,000
Okay. Let's just run this.

2
00:00:02,000 --> 00:00:06,000
I was getting sick of writing out 1,000,001, so I'm just going to do 11 now.

3
00:00:06,000 --> 00:00:11,000
So you see when we run this, we get what's called a generator object.

4
00:00:11,000 --> 00:00:16,000
It says "genexpr," and that's a memory location.

5
00:00:16,000 --> 00:00:19,000
We've created a generator object.

6
00:00:19,000 --> 00:00:23,000
Let's see what we can do with it. Let's actually make an assignment here.

7
00:00:23,000 --> 00:00:27,000
Now g is this generator object, and basically all it means to be a generator object

8
00:00:27,000 --> 00:00:30,000
is that this object can be iterated over,

9
00:00:30,000 --> 00:00:34,000
which basically means we can call this next function on it.

10
00:00:34,000 --> 00:00:41,000
If I call next on g, hit enter, I get zero. That's zero squared as I would expect.

11
00:00:41,000 --> 00:00:47,000
If I do it again, 1, which is 1 squared, and so on until i get to 10,

12
00:00:47,000 --> 00:00:52,000
which is the last number is my range, and then of course stop iteration as you saw in class.

13
00:00:52,000 --> 00:00:57,000
But next isn't the only function that does this sort of iteration.

14
00:00:57,000 --> 00:01:02,000
Let's reassign g, because now that we've gotten to this stop iteration g is sort of spent.

15
00:01:02,000 --> 00:01:06,000
So we've reassigned it, and let's take the sum of g.

16
00:01:06,000 --> 00:01:08,000
Sum performs the iteration for us.

17
00:01:08,000 --> 00:01:13,000
We could also do a for loop, and that does exactly what we'd expect.

18
00:01:13,000 --> 00:01:18,000
How else can we get one of these generator objects besides using a generator expression?

19
00:01:18,000 --> 00:01:20,000
Well, we can define a function.

20
00:01:20,000 --> 00:01:25,000
This function "gensquares" does the exact same thing as our previous generator expression.

21
00:01:25,000 --> 00:01:28,000
Note this yield statement. This is interesting.

22
00:01:28,000 --> 00:01:32,000
This is what makes it a generator function and not a normal function.

23
00:01:32,000 --> 00:01:36,000
Of course, if we call gensquares right now, we'll see that this is a function.

24
00:01:36,000 --> 00:01:39,000
But the reason why it behaves differently is because of this yield statement.

25
00:01:39,000 --> 00:01:42,000
Basically, the main difference between yield and return

26
00:01:42,000 --> 00:01:45,000
is that when a generator reaches a yield statement

27
00:01:45,000 --> 00:01:50,000
it suspends execution and remembers the state of all local variables. That's really important.

28
00:01:50,000 --> 00:01:54,000
This memory of the local variables allows it to pick up where it left off

29
00:01:54,000 --> 00:01:58,000
when we call, for example, next on it again.

30
00:01:58,000 --> 00:02:02,000
So we have our generator function. How can we get a generator object out of that?

31
00:02:02,000 --> 00:02:07,000
Well, we just have to call the function. Let's call it with an argument of--I don't know--let's say 11.

32
00:02:07,000 --> 00:02:09,000
There we go. There's our generator object.

33
00:02:09,000 --> 00:02:15,000
Just like before, we can call next. Here we get zero as expected.

34
00:02:15,000 --> 00:02:20,000
If I call next one more time, what do you think the output will be?

35
00:02:20,000 --> 00:02:26,000
Do you think the output would be 0, 1, 4, or 121?
