1
00:00:00,000 --> 00:00:01,949
Let's walk through the

2
00:00:01,949 --> 00:00:04,410
PlaySoundsViewController+Audio class extension to

3
00:00:04,410 --> 00:00:06,209
understand what exactly this code is doing.

4
00:00:06,209 --> 00:00:08,820
As you master these concepts,

5
00:00:08,820 --> 00:00:10,468
you'll be making great strides towards

6
00:00:10,468 --> 00:00:13,859
becoming a skilled iOS developer.

7
00:00:13,859 --> 00:00:15,150
Make sure you have the

8
00:00:15,150 --> 00:00:17,250
PlaySoundsViewController+Audio.swift file

9
00:00:17,250 --> 00:00:19,559
open, and navigate to the top.

10
00:00:19,559 --> 00:00:22,710
The first thing you see is a struct of

11
00:00:22,710 --> 00:00:25,679
alert messages. This is a convenient way

12
00:00:25,679 --> 00:00:27,719
to have the alert messages in a single

13
00:00:27,719 --> 00:00:30,390
place. If you have strings or other

14
00:00:30,390 --> 00:00:31,829
static items that you want to use

15
00:00:31,829 --> 00:00:33,390
throughout your app, this is a good

16
00:00:33,390 --> 00:00:37,079
practice to follow. Below that, you can

17
00:00:37,079 --> 00:00:38,789
see the PlayingState enumeration,

18
00:00:38,789 --> 00:00:41,070
which will be used by the configureUI

19
00:00:41,070 --> 00:00:42,899
function to set the button states

20
00:00:42,899 --> 00:00:45,030
depending on if you're playing or not

21
00:00:45,030 --> 00:00:48,539
playing any audio. Next up is the setupAudio

22
00:00:48,539 --> 00:00:50,369
function which is where we try to

23
00:00:50,369 --> 00:00:52,649
load the audio recording file past in

24
00:00:52,649 --> 00:00:56,789
from the RecordSoundViewController.

25
00:00:56,789 --> 00:00:59,039
If loading the audio file fails, we present

26
00:00:59,039 --> 00:01:00,929
an alert message to the user.

27
00:01:00,929 --> 00:01:03,359
By the way, did you notice these MARK

28
00:01:03,359 --> 00:01:04,948
statements here in the comments?

29
00:01:04,948 --> 00:01:07,019
These are to make it easier for you to

30
00:01:07,019 --> 00:01:10,079
jump around your code. If you left-click

31
00:01:10,079 --> 00:01:15,390
the last item in the editor toolbar, you

32
00:01:15,390 --> 00:01:18,299
can see section headings in bold.

33
00:01:18,299 --> 00:01:20,489
These section headings correspond to the MARK

34
00:01:20,489 --> 00:01:24,118
statements we see in the comments. And if

35
00:01:24,118 --> 00:01:26,099
you click a section header, the editor

36
00:01:26,099 --> 00:01:29,400
will jump you to the right location.

37
00:01:29,400 --> 00:01:32,129
So I’ll click Alerts and jumps me to the

38
00:01:32,129 --> 00:01:35,849
Alerts. And I’ll click Audio Functions,

39
00:01:35,849 --> 00:01:38,188
and it jumps me back to the Audio

40
00:01:38,188 --> 00:01:41,400
Functions. The playSound function is

41
00:01:41,400 --> 00:01:43,890
the main function in this extension.

42
00:01:43,890 --> 00:01:46,170
As the name suggests, it carries out playing

43
00:01:46,170 --> 00:01:49,170
back audio. This function has something

44
00:01:49,170 --> 00:01:51,540
you probably haven't seen before, that is

45
00:01:51,540 --> 00:01:55,618
optional parameters. See this code

46
00:01:55,618 --> 00:01:57,509
=nil that comes after the rate parameter?

47
00:01:57,509 --> 00:02:01,140
This indicates that rate is an optional

48
00:02:01,140 --> 00:02:04,078
parameter to the function. That means if

49
00:02:04,078 --> 00:02:05,670
you don't pass a rate into the function,

50
00:02:05,670 --> 00:02:07,799
it will automatically be set to this

51
00:02:07,799 --> 00:02:11,310
default value of nil. pitch, echo and

52
00:02:11,310 --> 00:02:13,439
reverb are also optional parameters.

53
00:02:13,439 --> 00:02:16,469
But for echo and reverb, if they are

54
00:02:16,469 --> 00:02:18,389
not passed into the function, then

55
00:02:18,389 --> 00:02:21,599
they're set to false. The first part of

56
00:02:21,599 --> 00:02:23,310
this function is to grab the AVAudioEngine

57
00:02:23,310 --> 00:02:26,009
and create a AVAudioPlayerNode.

58
00:02:26,009 --> 00:02:29,639
Next we check if the rate or the

59
00:02:29,639 --> 00:02:31,560
pitch parameters were passed in, since

60
00:02:31,560 --> 00:02:34,050
they're optional. The way we do this

61
00:02:34,050 --> 00:02:35,639
check may look a little weird at first,

62
00:02:35,639 --> 00:02:38,550
as we're doing a value binding inside of

63
00:02:38,550 --> 00:02:41,669
an if statement. See the line here,

64
00:02:41,669 --> 00:02:44,430
“if let pitch = pitch”? you should really read

65
00:02:44,430 --> 00:02:47,009
it as “if the pitch variable is not nil,

66
00:02:47,009 --> 00:02:49,409
then execute this if statement,

67
00:02:49,409 --> 00:02:52,259
otherwise we'll skip over this code and

68
00:02:52,259 --> 00:02:55,439
go on to the next if statement. if the

69
00:02:55,439 --> 00:02:57,330
rate variable is not nil, then we'll

70
00:02:57,330 --> 00:02:59,550
execute this if statement,

71
00:02:59,550 --> 00:03:01,919
otherwise we'll skip it and move on to

72
00:03:01,919 --> 00:03:04,650
the next line of code. The concept of

73
00:03:04,650 --> 00:03:06,509
value binding like we see here will be

74
00:03:06,509 --> 00:03:08,159
covered in greater detail later in this program.

75
00:03:08,159 --> 00:03:11,669
Next we create echo and reverb

76
00:03:11,669 --> 00:03:14,250
nodes, but we'll only use them if the

77
00:03:14,250 --> 00:03:16,500
echo or reverb parameters were passed in

78
00:03:16,500 --> 00:03:20,759
and set to true. We can have either echo

79
00:03:20,759 --> 00:03:24,360
and reverb, just echo just reverb or neither.

80
00:03:24,360 --> 00:03:27,569
These if statements wire up the

81
00:03:27,569 --> 00:03:29,819
connections correctly based on any of

82
00:03:29,819 --> 00:03:31,409
the cases we just mentioned.

83
00:03:31,409 --> 00:03:35,159
Lastly we tell the audio player to stop

84
00:03:35,159 --> 00:03:37,259
playing any current audio and schedule

85
00:03:37,259 --> 00:03:39,629
our recorded audio for playback.

86
00:03:39,629 --> 00:03:42,209
This ensures that the recorded audio is

87
00:03:42,209 --> 00:03:45,629
in memory and ready to be played.

88
00:03:45,629 --> 00:03:47,069
This part here that looks like another

89
00:03:47,069 --> 00:03:49,739
function is actually a trailing closure.

90
00:03:49,739 --> 00:03:52,709
Closures are another concept that will

91
00:03:52,709 --> 00:03:54,750
be covered later in the program. They're

92
00:03:54,750 --> 00:03:56,759
essentially functions or chunks of code

93
00:03:56,759 --> 00:03:58,469
that can be passed around just like

94
00:03:58,469 --> 00:04:01,769
regular variables. The scheduleFile

95
00:04:01,769 --> 00:04:03,629
function takes a closure that it runs

96
00:04:03,629 --> 00:04:05,759
when the audio file is ready to start

97
00:04:05,759 --> 00:04:09,389
playing. The code in this closure sets a

98
00:04:09,389 --> 00:04:11,400
timer to fire when the audio is done

99
00:04:11,400 --> 00:04:13,590
playing, that resets the buttons to the

100
00:04:13,590 --> 00:04:16,980
notPlaying state. Now that everything is

101
00:04:16,980 --> 00:04:19,019
setup, we try to start the audio engine

102
00:04:19,019 --> 00:04:22,079
in the audio node playback. When the

103
00:04:22,079 --> 00:04:24,149
execution reaches this point, the audio

104
00:04:24,149 --> 00:04:27,180
would be playing. The stopAudio

105
00:04:27,180 --> 00:04:29,160
function is in charge of stopping the audio.

106
00:04:29,160 --> 00:04:32,639
Remember that timer we set back in

107
00:04:32,639 --> 00:04:35,910
the playSound function? We don't want it

108
00:04:35,910 --> 00:04:37,949
to fire as we're stopping the sound here.

109
00:04:37,949 --> 00:04:40,889
So this if statement invalidates or

110
00:04:40,889 --> 00:04:44,490
cancels that timer. Collectively the rest

111
00:04:44,490 --> 00:04:46,319
of the lines of code stop the

112
00:04:46,319 --> 00:04:48,569
audioPlayerNode and the audioEngine itself.

113
00:04:48,569 --> 00:04:52,288
connectAudioNodes is a helper function

114
00:04:52,288 --> 00:04:54,269
to connect a set of audio notes together

115
00:04:54,269 --> 00:04:57,269
in the audioEngine. As with most helper

116
00:04:57,269 --> 00:04:59,220
functions, this just cuts down on the

117
00:04:59,220 --> 00:05:01,500
duplication of code in the playSound

118
00:05:01,500 --> 00:05:04,560
function. Next we come to the UI

119
00:05:04,560 --> 00:05:06,360
Functions, which are really just in

120
00:05:06,360 --> 00:05:08,310
charge of enabling and disabling the

121
00:05:08,310 --> 00:05:10,470
playback buttons and the stop button.

122
00:05:10,470 --> 00:05:13,500
These are helper functions and they help

123
00:05:13,500 --> 00:05:17,250
us by avoiding duplication of code. We

124
00:05:17,250 --> 00:05:19,348
have one place to enable or disable the

125
00:05:19,348 --> 00:05:21,269
buttons depending on if we are playing

126
00:05:21,269 --> 00:05:25,168
or not playing audio. You can also see

127
00:05:25,168 --> 00:05:27,689
that configureUI itself uses another

128
00:05:27,689 --> 00:05:29,610
helper function to toggle the playback

129
00:05:29,610 --> 00:05:32,908
buttons. If you pass in false, they all

130
00:05:32,908 --> 00:05:35,759
get disabled. If you pass in true,

131
00:05:35,759 --> 00:05:38,788
they'll all be enabled. Last up is the

132
00:05:38,788 --> 00:05:40,379
showAlert function, which simply

133
00:05:40,379 --> 00:05:42,779
displays an alert to the user using

134
00:05:42,779 --> 00:05:45,209
UIAlertController if something goes wrong.

135
00:05:45,209 --> 00:05:47,610
That's it. I take you through the class

136
00:05:47,610 --> 00:05:49,500
extension that allows the audio to be

137
00:05:49,500 --> 00:05:51,418
played back with various sound effects.

138
00:05:51,418 --> 00:05:53,370
Remember there's no harm in playing

139
00:05:53,370 --> 00:05:55,408
around with this code, you should feel

140
00:05:55,408 --> 00:05:57,598
free to experiment changing settings and

141
00:05:57,598 --> 00:06:02,779
more.

