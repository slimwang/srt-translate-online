1
00:00:00,510 --> 00:00:03,290
That's the idea behind a technique that

2
00:00:03,290 --> 00:00:05,450
I'm going to describe to you called ballooning.

3
00:00:05,450 --> 00:00:12,590
The idea is to have a special device driver installed in every guest operating

4
00:00:12,590 --> 00:00:18,740
system. So even if it is a fully virtualized setting, since device drivers can

5
00:00:18,740 --> 00:00:21,410
be installed on the fly, with the

6
00:00:21,410 --> 00:00:25,930
cooperation of the guest operating system. The hypervisor

7
00:00:25,930 --> 00:00:28,450
can install the device driver, which is

8
00:00:28,450 --> 00:00:31,390
called a balloon, in the operating system.

9
00:00:31,390 --> 00:00:33,850
And this balloon device driver is the

10
00:00:33,850 --> 00:00:40,070
key for managing memory pressures that maybe experienced

11
00:00:40,070 --> 00:00:45,360
by a virtual machine or a desktop operating system. In a virtualized setting.

12
00:00:45,360 --> 00:00:51,800
Let's say that the house needs more memory suddenly. And this may be a result of

13
00:00:51,800 --> 00:00:54,850
another guest operating system, saying that it

14
00:00:54,850 --> 00:00:58,240
needs more memory. So what the hypervisor would

15
00:00:58,240 --> 00:01:01,470
do, is It'll contact one of the

16
00:01:01,470 --> 00:01:06,000
guest operating system that currently is not actively

17
00:01:06,000 --> 00:01:11,630
using all of its memory, let's say. And talk to this balloon driver that it

18
00:01:11,630 --> 00:01:14,440
has installed through a private channel that

19
00:01:14,440 --> 00:01:17,090
exists between the hypervisor and the balloon driver.

20
00:01:17,090 --> 00:01:20,230
So this is something that only the hypervisor knows

21
00:01:20,230 --> 00:01:23,080
about because this is a special device driver that

22
00:01:23,080 --> 00:01:26,100
the hypervisor has installed. It knows how to get

23
00:01:26,100 --> 00:01:29,030
to this device driver and tell it to do something.

24
00:01:29,030 --> 00:01:31,540
And in this case, what the hypervisor is going to

25
00:01:31,540 --> 00:01:35,680
do is tell this balloon device driver to inflate. What

26
00:01:35,680 --> 00:01:39,525
that means is that this balloon device driver is

27
00:01:39,525 --> 00:01:42,410
going to make requests to the guest operating system saying I

28
00:01:42,410 --> 00:01:44,190
need more memory. I need more memory, I

29
00:01:44,190 --> 00:01:46,680
need more memory. And the guest operating system will

30
00:01:46,680 --> 00:01:49,430
of course, give this balloon driver the memory that

31
00:01:49,430 --> 00:01:53,530
it is requesting. And since the amount of physical

32
00:01:53,530 --> 00:01:56,150
memory that's available to the guest operating system

33
00:01:56,150 --> 00:02:00,100
is finite. If one process, in this case, the

34
00:02:00,100 --> 00:02:03,870
balloon driver, is making requests from the guest saying

35
00:02:03,870 --> 00:02:07,740
give me more memory. Guest has to necessarily make

36
00:02:07,740 --> 00:02:09,810
room for that by paging out to the

37
00:02:09,810 --> 00:02:14,830
disk unwanted pages from the total memory footprint

38
00:02:14,830 --> 00:02:17,650
of all the processes that are currently running

39
00:02:17,650 --> 00:02:20,470
in this guest operating system. And once it is

40
00:02:20,470 --> 00:02:24,330
done the swapping out of pages, and perhaps

41
00:02:24,330 --> 00:02:27,390
even entire processes out onto the disc. That's

42
00:02:27,390 --> 00:02:30,000
the way it can make room for the

43
00:02:30,000 --> 00:02:32,630
request that is coming from this balloon driver. Now,

44
00:02:32,630 --> 00:02:37,490
once the balloon driver has gotten all this extra memory out of this

45
00:02:37,490 --> 00:02:42,560
guest operating system. It can return those physical memories.

46
00:02:42,560 --> 00:02:46,990
The real physical memory, or the machine memory, back to the hypervisor. So we

47
00:02:46,990 --> 00:02:52,700
started with this house needing more machine memory. And the way,

48
00:02:52,700 --> 00:02:58,050
the house got that more machine memory is by contacting

49
00:02:58,050 --> 00:03:03,050
its balloon driver installed in one of the guest operating systems that is not

50
00:03:03,050 --> 00:03:08,650
actively using all of its resources. Asking the balloon to inflate and inflating

51
00:03:08,650 --> 00:03:12,690
the balloon is essentially meaning that we

52
00:03:12,690 --> 00:03:15,580
are acquiring more memory from the guest

53
00:03:15,580 --> 00:03:19,780
operating system. So, you can see visually

54
00:03:19,780 --> 00:03:23,080
that the footprint of the balloon goes

55
00:03:23,080 --> 00:03:25,890
up because of the inflation. That means, it's got

56
00:03:25,890 --> 00:03:28,600
a bigger memory footprint. And all of this memory

57
00:03:28,600 --> 00:03:32,370
footprint has extra resources that it can simply return

58
00:03:32,370 --> 00:03:34,570
to the hypervisor. It's not going to use it. It

59
00:03:34,570 --> 00:03:36,550
just wants to get it so that it can

60
00:03:36,550 --> 00:03:39,700
return it to the hypervisor. So that's this path

61
00:03:39,700 --> 00:03:44,190
here. So the opposite of what I've just described

62
00:03:44,190 --> 00:03:48,440
is a situation where the house needs less memory.

63
00:03:48,440 --> 00:03:50,750
Or, in other words, it has more memory

64
00:03:50,750 --> 00:03:53,850
to give away to guest operating system. So maybe

65
00:03:53,850 --> 00:03:57,020
it is this guest that requested more memory

66
00:03:57,020 --> 00:03:59,360
in the first place, And in that case, it

67
00:03:59,360 --> 00:04:04,080
wants the guest to get to the memory that it wanted. And the way it

68
00:04:04,080 --> 00:04:08,733
can do that is as follows. Once again the

69
00:04:08,733 --> 00:04:14,530
hypovisor through it's private channel will contact the balloon driver and

70
00:04:14,530 --> 00:04:16,260
tell the balloon driver to deflate the

71
00:04:16,260 --> 00:04:20,029
balloon. By deflate what is being instructed

72
00:04:20,029 --> 00:04:23,510
to the balloon driver is to contract

73
00:04:23,510 --> 00:04:26,180
its memory footprint. So, if it contracts its

74
00:04:26,180 --> 00:04:29,260
memory footprint by deflating, it is actually

75
00:04:29,260 --> 00:04:33,860
releasing memory into the guest operations. So,

76
00:04:33,860 --> 00:04:36,950
available physical memory. In the guest operating

77
00:04:36,950 --> 00:04:39,920
system is going to increase, because of the fact

78
00:04:39,920 --> 00:04:43,130
that the balloon is deflating and giving out

79
00:04:43,130 --> 00:04:46,820
the memory that is currently sitting on. So

80
00:04:46,820 --> 00:04:49,380
now the guest operating system has more memory

81
00:04:49,380 --> 00:04:52,700
to play with. That's the effect of the balloon

82
00:04:52,700 --> 00:04:55,610
deflating is that the guest operating system has

83
00:04:55,610 --> 00:04:59,360
more memory. Which means that it can page

84
00:04:59,360 --> 00:05:02,180
in from the disk, the working set of

85
00:05:02,180 --> 00:05:05,910
processes that are executing on this guest operating system.

86
00:05:05,910 --> 00:05:12,180
So that those processes can have more memory resources than they've been able to

87
00:05:12,180 --> 00:05:18,040
because of the balloon occupying a lot of the memory. So, this technique

88
00:05:18,040 --> 00:05:21,350
of ballooning assumes cooperation with the guest

89
00:05:21,350 --> 00:05:23,940
operating system. So that based on the

90
00:05:23,940 --> 00:05:26,460
need of the hour the hypervisor can

91
00:05:26,460 --> 00:05:30,570
work with the guest operating system implicitly.

92
00:05:30,570 --> 00:05:32,900
Without the guest really knowing about it

93
00:05:32,900 --> 00:05:35,280
because it is all happening through the

94
00:05:35,280 --> 00:05:40,470
balloon driver that has been installed. By the hypervisor in each of the guest

95
00:05:40,470 --> 00:05:44,120
operating systems. And this technique of ballooning

96
00:05:44,120 --> 00:05:47,855
is applicable to both fully virtualized and

97
00:05:47,855 --> 00:05:51,970
para-virtualized environments to ease the over commitment

98
00:05:51,970 --> 00:05:55,660
of memory by the hypervisor to the guests.

99
00:05:55,660 --> 00:05:57,640
I mean, it's sort of line airline reservations. You

100
00:05:57,640 --> 00:06:02,060
always Notice that in airline reservation, the airlines tend

101
00:06:02,060 --> 00:06:05,210
to sell more seats than what they have with

102
00:06:05,210 --> 00:06:08,290
the hope that someone is not going to show up.

103
00:06:08,290 --> 00:06:09,800
That's the same sort of thing that is being

104
00:06:09,800 --> 00:06:12,700
done here that there is a finite amount of

105
00:06:12,700 --> 00:06:16,490
physical resources available with the hypervisor. And it is

106
00:06:16,490 --> 00:06:19,270
doling it out to all the guest operating systems.

107
00:06:19,270 --> 00:06:21,070
>> And what it wants to do is,

108
00:06:21,070 --> 00:06:27,510
it wants to be able to reacquire some of those resources to satisfy the needs

109
00:06:27,510 --> 00:06:31,560
of another guest operating system that is experiencing

110
00:06:31,560 --> 00:06:33,210
a memory pressure at any point of time.
