1
00:00:00,205 --> 00:00:03,890
Let's just look at this code
execution that we're talking about.

2
00:00:03,890 --> 00:00:07,598
If the attacker actually guesses
our correct password, and

3
00:00:07,598 --> 00:00:11,463
types that as input to the program,
login is going to be allowed.

4
00:00:11,463 --> 00:00:15,028
What they're saying here is
the attacker doesn't have to do that,

5
00:00:15,028 --> 00:00:18,470
doesn't have to guess the password,
the correct password.

6
00:00:18,470 --> 00:00:20,830
So it's guessing some password,

7
00:00:20,830 --> 00:00:24,160
might takes trying different
types of passwords and so on.

8
00:00:24,160 --> 00:00:27,846
It gives a BadPassWd and
we don't have an all flow.

9
00:00:27,846 --> 00:00:32,427
Because the BadPassWd here, if you look
at it, it's still three, four, seven,

10
00:00:32,427 --> 00:00:35,187
nine, ten characters long
terminated by a null.

11
00:00:35,187 --> 00:00:38,369
We still are good,
because we don't have an overflow.

12
00:00:38,369 --> 00:00:42,024
And when we don't have an overflow, this
actually fits into the space we have for

13
00:00:42,024 --> 00:00:43,060
the password string.

14
00:00:43,060 --> 00:00:46,000
So, no overflow, and
it doesn't match, so

15
00:00:46,000 --> 00:00:48,500
as a result the request
is going to be rejected.

16
00:00:48,500 --> 00:00:49,970
So this is sort of the things you do.

17
00:00:49,970 --> 00:00:53,680
You either find a password,
then you have access.

18
00:00:53,680 --> 00:00:57,350
You can become that user and
do what that user is allowed to do.

19
00:00:57,350 --> 00:00:59,169
Or you can try a password,

20
00:00:59,169 --> 00:01:03,990
but you're not going to be successful
by just trying any password.

21
00:01:03,990 --> 00:01:04,845
The chances are,

22
00:01:04,845 --> 00:01:09,960
the password you type Is going to be, is
not going to match the user's password.

23
00:01:09,960 --> 00:01:11,730
And match fails, login fails
