1
00:00:00,310 --> 00:00:02,140
Most any time that you use a computer,

2
00:00:02,140 --> 00:00:03,760
you're going to interact with a file system.

3
00:00:06,500 --> 00:00:08,010
Here you see me navigating the file

4
00:00:08,010 --> 00:00:10,570
system on my computer to find this presentation.

5
00:00:14,610 --> 00:00:15,110
There it is.

6
00:00:17,590 --> 00:00:20,170
I started off at my Home folder, inside of there I

7
00:00:20,170 --> 00:00:24,060
went to Pictures. And then the filesystems, and there I found

8
00:00:24,060 --> 00:00:27,400
this image that I was looking for. This is really convenient.

9
00:00:27,400 --> 00:00:29,610
In my case, the data I was looking for was on

10
00:00:29,610 --> 00:00:32,270
the hard disk of my local machine. But I didn't have

11
00:00:32,270 --> 00:00:35,550
to remember physically where the data was, i.e., the platter, the

12
00:00:35,550 --> 00:00:39,460
track, the sector number, et cetera. Instead, I was able to

13
00:00:39,460 --> 00:00:42,830
access the data through a very intuitive interface provided by a file

14
00:00:42,830 --> 00:00:45,850
system module of the operating system. There are at least

15
00:00:45,850 --> 00:00:48,580
three key abstractions at work here. The first is the notion

16
00:00:48,580 --> 00:00:52,000
of the file itself. In reality, the data may not

17
00:00:52,000 --> 00:00:54,300
be placed next to each other on a disk orl in

18
00:00:54,300 --> 00:00:57,170
the right order. But an application developer, the author of

19
00:00:57,170 --> 00:01:00,100
the sketchbook program I'm using for instance, gets to create the

20
00:01:00,100 --> 00:01:03,410
data of a file as one big, long contiguous string of

21
00:01:03,410 --> 00:01:07,830
bytes. Second is the filename. I don't have to remember any

22
00:01:07,830 --> 00:01:10,040
of the physical information about how my file is

23
00:01:10,040 --> 00:01:13,500
stored, the sector number where it starts, for instance. Instead,

24
00:01:13,500 --> 00:01:15,700
I get to assign my file an intuitive name, in

25
00:01:15,700 --> 00:01:20,500
my case, Image001.tif. Third is the notion of folders, or

26
00:01:20,500 --> 00:01:23,600
directories, as we will call them. These are containers for

27
00:01:23,600 --> 00:01:27,060
other files or directories that help keep things organized. The

28
00:01:27,060 --> 00:01:29,550
idea is that we have an electronic version of what

29
00:01:29,550 --> 00:01:32,890
was once the more common physical filing system. We put

30
00:01:32,890 --> 00:01:36,690
folders withing folders to help us keep things organized. So

31
00:01:36,690 --> 00:01:38,540
in this machine then, I don't just have a pictures

32
00:01:38,540 --> 00:01:41,800
folder but also a documents folder. And within there I

33
00:01:41,800 --> 00:01:44,340
have a folder for advanced operating systems. And maybe there's

34
00:01:44,340 --> 00:01:48,150
another one for software development process, etc. And even this

35
00:01:48,150 --> 00:01:52,120
home directory sits inside a larger directory for all users,

36
00:01:52,120 --> 00:01:54,960
which then sits inside of a directory called root. Which

37
00:01:54,960 --> 00:01:58,780
then contains folders for the operating systems and other things.

38
00:01:58,780 --> 00:02:00,520
This directory is called the root because if we

39
00:02:00,520 --> 00:02:03,720
think of this directory structure as an upside down tree,

40
00:02:03,720 --> 00:02:06,830
then this all encompassing directory would be the root or

41
00:02:06,830 --> 00:02:09,360
the base of the tree. Indeed, the structure will always

42
00:02:09,360 --> 00:02:11,610
be a tree, just by the nature of directories

43
00:02:11,610 --> 00:02:14,280
or the nature of physical file folders for that matter.

44
00:02:14,280 --> 00:02:18,420
We call the directory immediately above another directory its parent.

45
00:02:18,420 --> 00:02:23,330
File systems, for instancce, is the parent directory of image001.tif.

46
00:02:23,330 --> 00:02:26,410
Pictures is the parent director of File Systems,

47
00:02:26,410 --> 00:02:29,180
et cetera. Together, these three abstractions provide a

48
00:02:29,180 --> 00:02:31,870
convenient and almost universal interface for storing and

49
00:02:31,870 --> 00:02:34,760
retrieving data from mass storage. In this lecture,

50
00:02:34,760 --> 00:02:37,060
we'll talk about how this interface is implemented

51
00:02:37,060 --> 00:02:39,510
and some of the common optimizations. We'll focus

52
00:02:39,510 --> 00:02:41,210
on the disk medium, but many of the

53
00:02:41,210 --> 00:02:43,500
ideas we discuss apply to other media as well.
