1
00:00:00,770 --> 00:00:02,340
Being a little more formal now,

2
00:00:02,340 --> 00:00:07,410
we define P to be the set of problems
solvable in polynomial time.

3
00:00:07,410 --> 00:00:11,090
By polynomial time, we mean that
the number of Turing machine steps

4
00:00:11,090 --> 00:00:12,950
is bounded by a polynomial.

5
00:00:12,950 --> 00:00:15,580
We'll formalize this more in a moment.

6
00:00:15,580 --> 00:00:20,010
Bipartite matching was one example
of this class of problems.

7
00:00:20,010 --> 00:00:24,990
NP we define as the class of problems
verifiable in polynomial time.

8
00:00:24,990 --> 00:00:29,120
This includes everything in P, since if
a problem can be solved in polynomial

9
00:00:29,120 --> 00:00:32,280
time, a potential solution can
be verified in that time too.

10
00:00:33,570 --> 00:00:37,400
Most computer scientists strongly
believe that this containment is strict,

11
00:00:37,400 --> 00:00:41,680
that is to say, there are some problems
that are efficiently verifiable, but

12
00:00:41,680 --> 00:00:43,650
not efficiently solvable.

13
00:00:43,650 --> 00:00:44,880
But we don't have a proof for this yet.

14
00:00:46,000 --> 00:00:49,950
The clique problem that we considered is
one of the problems that belongs in NP,

15
00:00:49,950 --> 00:00:52,710
but we think does not belong in P.

16
00:00:52,710 --> 00:00:55,390
There's one more class of problems that
we'll talk about in this section on

17
00:00:55,390 --> 00:00:59,630
complexity, and
that is the set of NP complete problems.

18
00:00:59,630 --> 00:01:03,980
These are the hardest problems in NP,
and we call them the hardest because any

19
00:01:03,980 --> 00:01:09,150
problem in NP we can efficiently
transform into an NP complete problem.

20
00:01:10,470 --> 00:01:13,570
Therefore, if someone were to come
up with an polynomial algorithm for

21
00:01:13,570 --> 00:01:18,590
even one NP complete problem,
then P would expand out in this diagram,

22
00:01:18,590 --> 00:01:21,080
making P and NP into the same class.

23
00:01:22,210 --> 00:01:25,020
Finding a polynomial solution for
clique would do this.

24
00:01:25,020 --> 00:01:26,950
So we say that clique is NP complete.

25
00:01:28,410 --> 00:01:31,020
Since solving problems doesn't
seem to be as easy as checking

26
00:01:31,020 --> 00:01:34,500
answers to problems, we're pretty
sure that NP complete problems

27
00:01:34,500 --> 00:01:37,050
can't be solved in polynomial time.

28
00:01:37,050 --> 00:01:39,190
And therefore, that P does not equal NP.

29
00:01:41,120 --> 00:01:43,810
To computer science novices,
the difference between matching and

30
00:01:43,810 --> 00:01:46,900
clique might not seem to be a big deal.

31
00:01:46,900 --> 00:01:50,180
And, it's surprising that one is so
much harder than the other.

32
00:01:50,180 --> 00:01:53,790
In fact, the difference between
the polynomial solvable algorithm and

33
00:01:53,790 --> 00:01:56,260
an NP complete one, can be very subtle.

34
00:01:56,260 --> 00:01:58,730
Being able to tell the difference
is an important skill for

35
00:01:58,730 --> 00:02:01,110
everyone who'll be designing
algorithms for the real world.
