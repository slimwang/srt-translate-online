1
00:00:00,460 --> 00:00:04,370
But what if you wanted to call a function and it didn't happen to be stored as

2
00:00:04,370 --> 00:00:08,820
a property of the object that you want the parameter this to be bound to?

3
00:00:08,820 --> 00:00:10,910
So imagine this function looks great but

4
00:00:10,910 --> 00:00:13,770
the keyword this is supposed to refer to a specific object.

5
00:00:13,770 --> 00:00:17,130
And that specific object doesn't have this function as a property.

6
00:00:17,130 --> 00:00:18,150
There would be no way,

7
00:00:18,150 --> 00:00:24,400
in that situation, to address this function as the given object dot anything.

8
00:00:24,400 --> 00:00:26,020
If this isn't stored as a property,

9
00:00:26,020 --> 00:00:29,850
there's no key you can use on that object in order to access the function.

10
00:00:29,850 --> 00:00:32,369
Besides the left of the dot rule that we just described,

11
00:00:32,369 --> 00:00:33,510
there's actually another way for

12
00:00:33,510 --> 00:00:37,370
you to specify the value that you'd like the parameter this to get bound to.

13
00:00:37,370 --> 00:00:41,290
Let's make a copy of that previous line which had the effect of assigning global

14
00:00:41,290 --> 00:00:45,060
as the default binding for this, and we'll edit the line with an attempt to

15
00:00:45,060 --> 00:00:49,960
specify exactly what we'd like this function to bind the keyword this to.

16
00:00:49,960 --> 00:00:54,020
By using a function's .call method, we get to override the default binding to

17
00:00:54,020 --> 00:00:57,400
global and override the left of the dot rule.

18
00:00:57,400 --> 00:01:00,010
In this case, we'll pass in any value we want and

19
00:01:00,010 --> 00:01:02,350
it'll get bound to the keyword this.

20
00:01:02,350 --> 00:01:03,380
When using .call,

21
00:01:03,380 --> 00:01:06,690
we pass in one extra value at the beginning of the argument list.

22
00:01:06,690 --> 00:01:09,410
And that value will be bound to the parameter this.

23
00:01:09,410 --> 00:01:12,440
So what would happen if we used .call on a function that

24
00:01:12,440 --> 00:01:14,920
was also being accessed as a property?

25
00:01:14,920 --> 00:01:18,650
Here we're using .call to pass in this new yellow object, but

26
00:01:18,650 --> 00:01:22,080
that method was already found as a property of the red object.
