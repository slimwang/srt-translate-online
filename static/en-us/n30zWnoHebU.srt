1
00:00:00,000 --> 00:00:02,000
Let's go through one way to do this.

2
00:00:02,000 --> 00:00:08,000
Hopefully what we're currently looking at is x goes to ab dot nothing come from j.

3
00:00:08,000 --> 00:00:13,000
Hopefully then, if we look back to chart j where we originally came from,

4
00:00:13,000 --> 00:00:19,000
it will have some rule something go to blah, blah, blah dot x.

5
00:00:19,000 --> 00:00:21,000
This is the important part.

6
00:00:21,000 --> 00:00:27,000
We're reducing goes to ab, so I really hope somebody was looking for an x.

7
00:00:27,000 --> 00:00:30,000
If they were, then that can be one of our reductions.

8
00:00:30,000 --> 00:00:35,000
Once again, we're going to use the phenomenal cosmic power of Python list comprehensions.

9
00:00:35,000 --> 00:00:41,000
In general, we're going to take all of these states that were already in chart j

10
00:00:41,000 --> 00:00:43,000
and just modify them a bit.

11
00:00:43,000 --> 00:00:47,000
Let's call each one of those states in chart j jstate.

12
00:00:47,000 --> 00:00:51,000
Conceptually, what we're going to do is move the red dot over one.

13
00:00:51,000 --> 00:00:58,000
Our return value, the new state we're returning, is going to have this same y that we saw from jstate.

14
00:00:58,000 --> 00:01:01,000
Whatever that is that's still going to be our left-hand side.

15
00:01:01,000 --> 00:01:05,000
Then we want to take whatever jstate had before the dot,

16
00:01:05,000 --> 00:01:09,000
and that corresponds to all of this stuff that I've sort of left out here,

17
00:01:09,000 --> 00:01:15,000
but then add on x, because we're shifting over x, conceptually, as we do the reduction.

18
00:01:15,000 --> 00:01:20,000
Now we want to take everything jstate had after the dot, except we want to remove the x,

19
00:01:20,000 --> 00:01:23,000
because we shifted the red dot over it.

20
00:01:23,000 --> 00:01:27,000
Everything jstate had after the dot was j-state bracket 2.

21
00:01:27,000 --> 00:01:30,000
and we're going to do range selection on that to get rid of the first element.

22
00:01:30,000 --> 00:01:33,000
Then it looks like I can't preplan.

23
00:01:33,000 --> 00:01:37,000
Whatever this k value was, we're just going to leave it alone.

24
00:01:37,000 --> 00:01:40,000
Jstate 3 corresponds to k.

25
00:01:40,000 --> 00:01:45,000
However, we only want to do this if certain conditions hold.

26
00:01:45,000 --> 00:01:48,000
First, cd has to be the empty list which corresponds

27
00:01:48,000 --> 00:01:51,000
to this red dot being as far to the right as possible.

28
00:01:51,000 --> 00:01:56,000
The second thing we have to check for is that this x and that one match exactly.

29
00:01:56,000 --> 00:02:03,000
This x was the first element of jstate 0 1 2, so I'll check to make sure that jstate 2 is not empty.

30
00:02:03,000 --> 00:02:07,000
If this red dot were all the way to the right, there would be nothing there to check for.

31
00:02:07,000 --> 00:02:13,000
If it's not empty, I'm going to check its first character and make sure that matches up with our x.

32
00:02:13,000 --> 99:59:59,999
Those are all of the states we bring in as part of doing reductions.
