1
00:00:00,080 --> 00:00:03,000
We have our dispatch quiz. Let's look at the solution.

2
00:00:03,000 --> 00:00:05,750
If this instruction was indeed issued in the previous cycle,

3
00:00:05,750 --> 00:00:08,964
meaning it came into the reservation station. Then, depending on,

4
00:00:08,964 --> 00:00:12,580
when do we select [INAUDIBLE] instructions for execution. Let's say we do it,

5
00:00:12,580 --> 00:00:16,620
kind of, you know, towards the end of the cycle. There might not be enough time.

6
00:00:16,620 --> 00:00:19,100
Simply, this reservation station, when we're considering,

7
00:00:19,100 --> 00:00:23,200
what can be dispatch for execution. This one simply wasn't there yet, basically.

8
00:00:23,200 --> 00:00:26,610
In the same cycle where we select something, this got inserted here and it

9
00:00:26,610 --> 00:00:30,880
wasn't inserted early enough in the cycle, so this is possibly correct. It can

10
00:00:30,880 --> 00:00:34,840
happen that's, that's basically you cannot do both of the things consecutively

11
00:00:34,840 --> 00:00:38,810
in the same cycle. Another instruction was dispatched to the add unit. This is

12
00:00:38,810 --> 00:00:43,770
entirely possible if, for example, RS1 will sent. In the previous cycle to,

13
00:00:43,770 --> 00:00:48,300
to the execution unit, then this instruction couldn't have because then it can,

14
00:00:48,300 --> 00:00:51,980
can't take only one instruction. So this is also possibly correct.

15
00:00:51,980 --> 00:00:56,240
RS2 is older than RS3, so RS3 cannot dispatch until RS2 does.

16
00:00:56,240 --> 00:01:01,350
This cannot be correct. Because, in out of order execution in [UNKNOWN]

17
00:01:01,350 --> 00:01:06,490
algorithm is one of the out of order algorithms, we will dispatch an instruction

18
00:01:06,490 --> 00:01:11,960
as soon as its operands are ready. If we were concerned about this,

19
00:01:11,960 --> 00:01:15,780
when the operands are ready, we still don't dispatch the instruction, then we

20
00:01:15,780 --> 00:01:19,690
will have an in-ordered processor, which we don't want. Actually, the reason why

21
00:01:19,690 --> 00:01:23,940
this is an out-of-order processor is because, is that instructions like this can

22
00:01:23,940 --> 00:01:27,790
execute even if they are not the oldest instruction in the reservation stations.

23
00:01:27,790 --> 00:01:31,090
So this is definitely not true. So the correct answers are only one and two.
