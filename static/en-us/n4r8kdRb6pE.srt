1
00:00:00,150 --> 00:00:03,130
A more common approach today is the modular approach,

2
00:00:03,130 --> 00:00:05,710
as with the Linux operating system.

3
00:00:05,710 --> 00:00:10,100
This kind of operating system has a number of basic services and

4
00:00:10,100 --> 00:00:12,450
EPIs already part of it, but

5
00:00:12,450 --> 00:00:18,060
more importantly, as the name suggests, everything can be added as a module.

6
00:00:18,060 --> 00:00:22,490
With this approach, you can easily customize which particular file system or

7
00:00:22,490 --> 00:00:25,580
scheduler the operating system uses.

8
00:00:25,580 --> 00:00:30,700
This is possible because the operating system specifies certain interfaces that

9
00:00:30,700 --> 00:00:35,640
any module must implement in order to be part of the operating system.

10
00:00:35,640 --> 00:00:40,980
And then dynamically, depending on the workload, we can install a module

11
00:00:40,980 --> 00:00:46,060
that implements this interface in a way that makes sense for this workload.

12
00:00:46,060 --> 00:00:48,260
Like, if these are database applications,

13
00:00:48,260 --> 00:00:52,710
we may run the file system that's optimized for random file access.

14
00:00:52,710 --> 00:00:55,660
And if these are some other types of computations,

15
00:00:55,660 --> 00:01:00,040
we may run the file system that's optimized for sequential access.

16
00:01:00,040 --> 00:01:01,490
And most importantly,

17
00:01:01,490 --> 00:01:05,540
we can dynamically install new modules in the operating system.

18
00:01:05,540 --> 00:01:09,900
The benefits of this approach is that it's easier to maintain an upgrade.

19
00:01:09,900 --> 00:01:14,380
It also has a smaller code base and it's less resource intensive,

20
00:01:14,380 --> 00:01:19,660
which means that it will leave more resources more memory for the applications.

21
00:01:19,660 --> 00:01:21,820
This can lead to better performance as well.

22
00:01:21,820 --> 00:01:25,770
The downside of this approach is that all the modularity may be

23
00:01:25,770 --> 00:01:28,190
good for maintainability.

24
00:01:28,190 --> 00:01:30,810
The level of interaction that it requires,

25
00:01:30,810 --> 00:01:34,490
because we have to go through this interface specification before we

26
00:01:34,490 --> 00:01:38,290
actually go into the implementation of a particular service.

27
00:01:38,290 --> 00:01:41,990
This can reduce some opportunities for optimizations.

28
00:01:41,990 --> 00:01:44,620
Ultimately, this can have some impact on performance, though,

29
00:01:44,620 --> 00:01:47,490
typically, not very significant.

30
00:01:47,490 --> 00:01:52,470
Maintenance, however, can still be an issue given that these modules

31
00:01:52,470 --> 00:01:57,600
may come from completely disparate code bases and can be a source of bugs.

32
00:01:57,600 --> 00:02:01,600
But overall, this approach delivers significant improvements over

33
00:02:01,600 --> 00:02:05,840
the monolithic approach, and it's the one that's more commonly used today.
