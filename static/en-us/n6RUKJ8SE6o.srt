1
00:00:00,000 --> 00:00:02,000
Well, there are a number of ways to go about this--

2
00:00:02,000 --> 00:00:05,000
actually, an infinite number of ways to go about this.

3
00:00:05,000 --> 00:00:09,000
An entirely legitimate strategy but one that might feel almost like cheating

4
00:00:09,000 --> 00:00:11,000
would be just to put these together.

5
00:00:11,000 --> 00:00:16,000
You could submit the Python code that corresponds to either this or this or this.

6
00:00:16,000 --> 00:00:20,000
Now you're guaranteed that it accepts the three strings on the left and nothing else.

7
00:00:20,000 --> 00:00:23,000
Now, you'd have to be careful about how you group things or whatnot,

8
00:00:23,000 --> 00:00:27,000
so that the or and the parentheses would bind correctly, but that's one way to do it.

9
00:00:27,000 --> 00:00:32,000
Let's go see if we can make a more natural feeling regular expression that actually does it though.

10
00:00:32,000 --> 00:00:34,000
It looks like we definitely have to start with an a.

11
00:00:34,000 --> 00:00:39,000
Now I have my choice of what I want to say the difference is between these other strings--

12
00:00:39,000 --> 00:00:42,000
abb and here we've got aabbb.

13
00:00:42,000 --> 00:00:46,000
In some sense one of the key differences is the number of b's.

14
00:00:46,000 --> 00:00:51,000
Here's one regular expression that captures all the ones on the left and none of the ones on the right.

15
00:00:51,000 --> 00:00:56,000
It's an a*--so that gets this first one, and then after you're done with the a's,

16
00:00:56,000 --> 00:01:01,000
you may optionally have either bb or cc. Great.

17
00:01:01,000 --> 00:01:04,000
That gets 1, 2, and 3 but none of these to hers.

18
00:01:04,000 --> 00:01:08,000
This one is ruled because it's not bb cc with a's in front of it.

19
00:01:08,000 --> 00:01:10,000
These have too many b's. These have too many c's.

20
00:01:10,000 --> 00:01:13,000
But there are a large number of ways you could've done this.

21
00:01:13,000 --> 00:01:19,000
In fact, there is an area of study called learning theory that tries to make machines find patterns

22
00:01:19,000 --> 00:01:21,000
the same way that we can with our brain.

23
00:01:21,000 --> 00:01:27,000
There's a notion that you've really learned something when you've abstracted it to a small rule.

24
00:01:27,000 --> 00:01:32,000
The reason we're less happy with this answer up here is because its' over-fitting the data in some sense.

25
00:01:32,000 --> 00:01:36,000
It's just recording the yes instances. It's not really generalizing the pattern.

26
00:01:36,000 --> 00:01:41,000
We say that more learning is happening when we generalize a smaller pattern

27
00:01:41,000 --> 99:59:59,999
than just copying all of the available input, but that was by no means required for this problem.
