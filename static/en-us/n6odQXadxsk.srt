1
00:00:00,000 --> 00:00:05,532
So we already know that we arrived at the contradiction. We checked that in the two quizzes, and we didn't

2
00:00:05,533 --> 00:00:11,399
make any mistake here. One thing that could be wrong is that we just cannot run the program inverse halt on itself.

3
00:00:11,400 --> 00:00:16,732
But again, this is perfectly fine because inverse halt is a program, and because it's a program,

4
00:00:16,733 --> 00:00:20,366
we also have its source codes. So we can easily feed this program to itself.

5
00:00:20,367 --> 00:00:25,332
So let's go back one more step, step number three. The program inverse halt, how we wrote that--

6
00:00:25,333 --> 00:00:32,432
Did we make any mistake here? Well, no, we didn't. We just used the algorithm halt, we gave it a valid input.

7
00:00:32,433 --> 00:00:35,966
So we gave it a program to check, and we gave it also an input for that program.

8
00:00:35,967 --> 00:00:41,399
Sometimes it might be confusing that the program is both an input and an actual program,

9
00:00:41,400 --> 00:00:47,299
but it's perfectly fine again, because the program here is the source code, so we can take it as both.

10
00:00:47,300 --> 00:00:52,966
The rest of the code is fully valid, so it's deterministic, there doesn't really go anything wrong here.

11
00:00:52,967 --> 00:00:58,499
So this contradiction here cannot be due to step four, it can also not be due to step three.

12
00:00:58,500 --> 00:01:06,666
What about step two? Well, that there is an algorithm "halt" for the halting problem was a direct conclusion of assumption

13
00:01:06,667 --> 00:01:16,566
number one. So there also cannot be something wrong with number two, unless of course number one in itself was wrong.

14
00:01:16,567 --> 00:01:22,032
And since we checked two, three, and four, and there must be some sort of error in the proof,

15
00:01:22,033 --> 00:01:28,432
the only place where this error can be is here in step number one. So what does step number one say?

16
00:01:28,433 --> 00:01:33,399
Step number one assumed that the halting problem is in fact decideable.

17
00:01:33,400 --> 00:01:37,932
And since this logically leads us to contradiction, this assumption here must be false.

18
00:01:37,933 --> 00:01:42,666
So the halting problem cannot be decideable. It is in fact undecideable.

19
00:01:42,667 --> 00:01:48,899
And that of course means that there's no algorithm that will tell you, for any given program, and any given input,

20
00:01:48,900 --> 00:01:54,766
if that program will ever stop. Now, the technique that we used here, at least if you're not used to it,

21
00:01:54,767 --> 00:02:01,799
can sometimes be a little bit confusing. I would therefore like to give you a second illustration of exactly this proof here,

22
00:02:01,800 --> 00:02:04,433
just to make sure that you understand it.
