1
00:00:00,390 --> 00:00:06,120
As I said, L3, by proof of construction, systematically debunks all of

2
00:00:06,120 --> 00:00:11,970
the myths I detailed in the previous slide. The first myth is the border

3
00:00:11,970 --> 00:00:17,770
crossing myth. That is, the user space to kernel space switching. Now L

4
00:00:17,770 --> 00:00:21,420
3 accomplishes this boarder crossing in

5
00:00:21,420 --> 00:00:26,020
123 processor cycles. And this includes the

6
00:00:26,020 --> 00:00:29,830
TLB misses that may be incurred because of

7
00:00:29,830 --> 00:00:31,710
the fact that we're going from user space

8
00:00:31,710 --> 00:00:34,555
to kernel space. As well as cache misses

9
00:00:34,555 --> 00:00:37,330
that may be incurred because we are starting

10
00:00:37,330 --> 00:00:42,989
to execute some code in the micro kernel. All of that put together, L3 shows, by

11
00:00:42,989 --> 00:00:46,245
proof of construction, that you can do that

12
00:00:46,245 --> 00:00:51,210
border crossing in 123 processor cycles. And L3 goes

13
00:00:51,210 --> 00:00:54,440
one step further, it actually cones through

14
00:00:54,440 --> 00:00:57,415
a back of the envelope calculation, what

15
00:00:57,415 --> 00:00:59,965
will be the minimum cost involved in

16
00:00:59,965 --> 00:01:03,623
doing this border crossing? Or, in other words,

17
00:01:03,623 --> 00:01:08,983
how many cycles will the instructions that are needed, in order to do the border

18
00:01:08,983 --> 00:01:13,710
crossing, take on a particular processor architecture?

19
00:01:13,710 --> 00:01:16,160
And they count the number of processor cycles,

20
00:01:16,160 --> 00:01:20,420
and they show that the number of processor cycles needed is about 107 and

21
00:01:20,420 --> 00:01:24,860
L3 microkernel accomplishes that in 123 processor

22
00:01:24,860 --> 00:01:27,915
cycles. Or, in other words, this is debunking

23
00:01:27,915 --> 00:01:30,315
the myth that border crossing is going to

24
00:01:30,315 --> 00:01:34,600
be expensive in microkernel based design. It's as

25
00:01:34,600 --> 00:01:41,350
close to what it would take minimally in the processor, even if you hand code

26
00:01:41,350 --> 00:01:45,950
through machine instructions, what needs to happen to go from the user space to

27
00:01:45,950 --> 00:01:51,200
the kernel space? So that is proof that microkernel-based

28
00:01:51,200 --> 00:01:56,660
design is not going to be incurring any more overhead for

29
00:01:56,660 --> 00:02:01,400
border crossing. It turns out that CMU's Mach operating

30
00:02:01,400 --> 00:02:06,380
system, on the same hardware, takes 900 cycles, as opposed to

31
00:02:06,380 --> 00:02:09,020
the 123 cycles taken by L3 for border

32
00:02:09,020 --> 00:02:13,020
crossing. Spin and exokernel that we have looked

33
00:02:13,020 --> 00:02:16,330
at in fairly great detail, used Mach as

34
00:02:16,330 --> 00:02:21,010
the basis for decrying microkernel based design, saying

35
00:02:21,010 --> 00:02:24,080
that, well, border crossing in microkernel based design

36
00:02:24,080 --> 00:02:26,980
is expensive because it takes this much time.

37
00:02:26,980 --> 00:02:31,580
But what L3 has shown is that it need not take this much time, it can

38
00:02:31,580 --> 00:02:35,500
be done in much shorter amount of time. Which

39
00:02:35,500 --> 00:02:38,350
is close to what the hardware can actually do.
