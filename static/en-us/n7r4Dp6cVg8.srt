1
00:00:00,320 --> 00:00:03,110
The Hopcroft-Karp
algorithm goes like this.

2
00:00:03,110 --> 00:00:08,260
We first initialize the matching to the
empty set, then we repeat the following.

3
00:00:08,260 --> 00:00:12,658
First, we build an alternating
level graph rooted at the unmatched

4
00:00:12,658 --> 00:00:17,460
vertices on the left part of the
partition using breadth-first search.

5
00:00:17,460 --> 00:00:21,340
Let's pause for a moment here and
see how this works in an example.

6
00:00:21,340 --> 00:00:23,220
The first iteration is trivial, so

7
00:00:23,220 --> 00:00:27,290
let's start with a later iteration
where we have some existing matching

8
00:00:27,290 --> 00:00:31,840
marked by the orange edges here
that we're trying to augment.

9
00:00:31,840 --> 00:00:36,300
Level 0 consists of the unmatched
vertices on the left side and

10
00:00:36,300 --> 00:00:39,640
to go to the next level,
we follow the unmatched edges.

11
00:00:39,640 --> 00:00:43,420
Then we follow matched edges to
get back to the left hand side.

12
00:00:43,420 --> 00:00:48,680
And then we follow along unmatched
vertices which lead us to

13
00:00:48,680 --> 00:00:52,020
an unmatched vertex on
the right hand side.

14
00:00:52,020 --> 00:00:54,190
So that's a level we can stop at.

15
00:00:54,190 --> 00:00:57,390
And we end up with this here for
our total level graph.

16
00:00:58,530 --> 00:01:02,160
Having built this level graph, we use
it to augment the current matching

17
00:01:02,160 --> 00:01:07,200
with a maximal set of vertex
disjoint shortest augmenting paths.

18
00:01:07,200 --> 00:01:11,920
We accomplish this by starting at one
of the unmatched vertices in R and

19
00:01:11,920 --> 00:01:13,620
tracing our way back.

20
00:01:13,620 --> 00:01:16,540
Let's say that I used this path here.

21
00:01:16,540 --> 00:01:17,610
Well then because I'm looking for

22
00:01:17,610 --> 00:01:21,920
a set of vertex disjoint paths, I can
go ahead and delete these vertices.

23
00:01:21,920 --> 00:01:26,090
And with these vertices deleted,
I can also go and

24
00:01:26,090 --> 00:01:30,370
delete all the other vertices
that got orphaned in the process.

25
00:01:30,370 --> 00:01:34,650
And at this point we note that I had
to delete the other unmatched vertex,

26
00:01:34,650 --> 00:01:38,740
nr, and
that tells me that I found a maximal

27
00:01:38,740 --> 00:01:41,390
set of vertex disjoint
shortest-length paths.

28
00:01:42,600 --> 00:01:45,740
Once we've applied all these
augmenting paths, we go back and

29
00:01:45,740 --> 00:01:49,990
rebuild the level graph, and keeping
doing this until no more augmenting

30
00:01:49,990 --> 00:01:54,524
paths exist, and then we can
return the matching that we found.

31
00:01:54,524 --> 00:01:57,890
From the description, it's clear
that each iteration of this loop,

32
00:01:57,890 --> 00:02:00,840
what we'll call a phase from now
on takes on the order E time,

33
00:02:01,980 --> 00:02:05,119
building a level graph is
done by breadth first search.

34
00:02:05,119 --> 00:02:09,479
And so that only takes order E time and
the second part

35
00:02:09,479 --> 00:02:13,850
can also be thought of as a single
traversal of the graph essentially.

36
00:02:13,850 --> 00:02:17,490
As we're picking a path from one
of the unmatched vertices in R

37
00:02:17,490 --> 00:02:22,300
to one of the unmatched in L
we can follow any edge here.

38
00:02:22,300 --> 00:02:25,900
We don't have to be careful at all,
because in effect,

39
00:02:25,900 --> 00:02:29,160
all roads lead to
an unmatched vertex in L.

40
00:02:29,160 --> 00:02:34,440
The key insight is that only about
the square root of V phases are needed

41
00:02:34,440 --> 00:02:38,830
in order for us to get to a point where
there are no more augmenting paths.

42
00:02:38,830 --> 00:02:41,550
Overall then,
we seek to prove the theorem stating

43
00:02:41,550 --> 00:02:45,250
that given a bipartite graph,
the Hopcroft-Karp algorithm

44
00:02:45,250 --> 00:02:49,590
finds a maximum matching in time
order E times the square root of V.
