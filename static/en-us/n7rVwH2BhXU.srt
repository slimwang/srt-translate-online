1
00:00:00,440 --> 00:00:04,090
This calls for modifying both the virtual memory part

2
00:00:04,090 --> 00:00:06,810
as well as the UBC part of the original

3
00:00:06,810 --> 00:00:10,840
system, to handle the needs of the global memory

4
00:00:10,840 --> 00:00:14,740
system. And particular what you notice, is that the

5
00:00:14,740 --> 00:00:18,640
VM and the unified buffer cache, when it wanted

6
00:00:18,640 --> 00:00:19,850
a missing page, it used to go to the

7
00:00:19,850 --> 00:00:22,680
disk. But here what we're going to do is we're

8
00:00:22,680 --> 00:00:25,700
going to make it go to the GMS Because GMS

9
00:00:25,700 --> 00:00:29,480
knows whether a particular page, that is

10
00:00:29,480 --> 00:00:33,100
missing in the address space of a process,

11
00:00:33,100 --> 00:00:38,460
is present in some remote GMS and similarly, if a page is missing from the

12
00:00:38,460 --> 00:00:44,820
file cache, it knows whether that page. Is perhaps in the remote GMS. So that's

13
00:00:44,820 --> 00:00:47,650
why, what we do is, we modify the

14
00:00:47,650 --> 00:00:50,990
virtual memory manager and unified buffer cache manager

15
00:00:50,990 --> 00:00:56,210
to get their calls for getting and putting pages. Get

16
00:00:56,210 --> 00:00:58,570
page is when there is a page fault I need to

17
00:00:58,570 --> 00:01:01,000
get that page. I would go to the disc normally,

18
00:01:01,000 --> 00:01:04,090
but I now, I go to GMS. That GMS worry about

19
00:01:04,090 --> 00:01:07,280
getting it for me. Similarly if a page is missing

20
00:01:07,280 --> 00:01:10,700
in the unified buffer cache, I go to the GMS to

21
00:01:10,700 --> 00:01:12,800
say get me that page for me, and he will

22
00:01:12,800 --> 00:01:16,070
then do the work of finding out whether it is in

23
00:01:16,070 --> 00:01:18,840
remote GMS or if it is not anywhere in the

24
00:01:18,840 --> 00:01:22,276
cluster as we've seen in some of the cases. It

25
00:01:22,276 --> 00:01:23,644
could be under disk, it will get it from the

26
00:01:23,644 --> 00:01:29,590
disk. Notice also writes to disk is unchanged. Originally, whenever

27
00:01:29,590 --> 00:01:32,280
the VM manager decides to write to the disk, it's

28
00:01:32,280 --> 00:01:35,960
because a page is dirty. It writes to the disk.

29
00:01:35,960 --> 00:01:38,270
That part we don't want to mess with, because we

30
00:01:38,270 --> 00:01:41,390
are not affecting the reliability of the system in any way.

31
00:01:41,390 --> 00:01:46,080
Writes remain unchanged. Only when you have a

32
00:01:46,080 --> 00:01:48,990
page fault, you have to get it Get the

33
00:01:48,990 --> 00:01:53,410
page from the disk, you don't go to the disk anymore, but you come to GMS, and

34
00:01:53,410 --> 00:01:56,280
GMS then is integrated into the system so

35
00:01:56,280 --> 00:01:58,890
that it figures out where to get the missing

36
00:01:58,890 --> 00:02:02,490
page from. Remember that the most important thing

37
00:02:02,490 --> 00:02:06,760
that we have to do in implementing this global

38
00:02:06,760 --> 00:02:10,130
LRU at approximation to global LRU. Is

39
00:02:10,130 --> 00:02:14,270
collecting age information. That's pretty tricky. And

40
00:02:14,270 --> 00:02:15,890
the case of file cache is pretty

41
00:02:15,890 --> 00:02:19,690
straightforward, because it is explicit from the process

42
00:02:19,690 --> 00:02:22,120
where it is making regenerate calls, we

43
00:02:22,120 --> 00:02:25,550
can insert code as part of integrating GMS

44
00:02:25,550 --> 00:02:28,460
into this unified buffer cache, to see

45
00:02:28,460 --> 00:02:32,090
what pages are being accessed based on the

46
00:02:32,090 --> 00:02:34,240
region rights that are happening to the

47
00:02:34,240 --> 00:02:39,140
unified buffer cache. Because these calls are explicit

48
00:02:39,140 --> 00:02:42,070
from the application, going into the operating

49
00:02:42,070 --> 00:02:45,540
system and therefore, we can intercept those calls

50
00:02:45,540 --> 00:02:48,100
as part of integrating DMS to collect

51
00:02:48,100 --> 00:02:51,000
age information for the pages that are housed

52
00:02:51,000 --> 00:02:53,630
in the unified buffer cache. VM on the

53
00:02:53,630 --> 00:02:57,400
other hand, is very, very complicated. Because memory

54
00:02:57,400 --> 00:03:01,360
access, that a process does, is happening

55
00:03:01,360 --> 00:03:04,610
in hardware on the CPU. The operating system

56
00:03:04,610 --> 00:03:08,330
does not see the individual memory access that

57
00:03:08,330 --> 00:03:11,060
a user program is making, so how does

58
00:03:11,060 --> 00:03:15,490
GMS collect aid information for the anonymous,

59
00:03:15,490 --> 00:03:18,340
that's why these pages are called anonymous pages.

60
00:03:18,340 --> 00:03:20,500
In this case, the pages are not anonymous

61
00:03:20,500 --> 00:03:22,500
because we know exactly what pages are being

62
00:03:22,500 --> 00:03:25,772
reached in by a particular read or write

63
00:03:25,772 --> 00:03:28,690
by a file system, but the reads and writes

64
00:03:28,690 --> 00:03:31,700
that a user process is making to its virtual

65
00:03:31,700 --> 00:03:34,740
address space are the pages that are anonymous so

66
00:03:34,740 --> 00:03:37,220
far as the operating system is concerned. So, how

67
00:03:37,220 --> 00:03:41,030
does the operating system collect the age information? In

68
00:03:41,030 --> 00:03:47,920
order to do that, the authors of GMS what they did, was to have a daemon part of

69
00:03:47,920 --> 00:03:54,970
the memory manager in the OSF implementation. The daemon's job is

70
00:03:54,970 --> 00:04:00,850
to dump information from the TLB. If you recall, TLB, the translation lookaside

71
00:04:00,850 --> 00:04:07,060
buffer, contains the recent translations that have been done on a particular

72
00:04:07,060 --> 00:04:13,740
node. So the TLB contains information about the recently accessed pages on

73
00:04:13,740 --> 00:04:17,570
a particular processor. Periodically, say every minute, it

74
00:04:17,570 --> 00:04:21,600
dumps the contents of the TLB into a

75
00:04:21,600 --> 00:04:24,070
data structure that the GMS maintains so that

76
00:04:24,070 --> 00:04:28,390
it can use that information in deriving the age

77
00:04:28,390 --> 00:04:30,660
information for all the anonymous pages that are

78
00:04:30,660 --> 00:04:33,500
being handled by the VM. So that is

79
00:04:33,500 --> 00:04:36,130
how GMS collects the age information at every

80
00:04:36,130 --> 00:04:39,020
node. So this is where I meant, the technical

81
00:04:39,020 --> 00:04:42,540
details are very important. Because this idea of how

82
00:04:42,540 --> 00:04:45,290
to gather age information is something that might be

83
00:04:45,290 --> 00:04:49,300
useful if you're implementing a completely different facility. And

84
00:04:49,300 --> 00:04:53,190
similarly, when it comes to the pageout daemon. The pageout

85
00:04:53,190 --> 00:04:56,510
daemon, normally, what it would do is, when it

86
00:04:56,510 --> 00:04:59,960
is throwing out pages. If they are dirty pages, he'll

87
00:04:59,960 --> 00:05:01,650
write it on to the disk. And if it

88
00:05:01,650 --> 00:05:04,670
is clean pages, he can simply discard it. But now,

89
00:05:04,670 --> 00:05:07,110
when it has a clean page, it wants to

90
00:05:07,110 --> 00:05:10,100
discard a clean page, a pageout daemon. We'll give

91
00:05:10,100 --> 00:05:13,460
it to GMS, because GMS will say, well, don't

92
00:05:13,460 --> 00:05:16,070
throw it out. I'll put it into cluster memory

93
00:05:16,070 --> 00:05:18,860
so that it is available later on for retrieval

94
00:05:18,860 --> 00:05:21,350
rather than going to the disk. So this is

95
00:05:21,350 --> 00:05:25,590
how GMS is integrated into this whole picture, interacting

96
00:05:25,590 --> 00:05:29,800
with the Unified Buffer Cache, interacting with the VM Manager,

97
00:05:29,800 --> 00:05:33,340
interacting with the Pageout Daemon and the Free List Maintenance as

98
00:05:33,340 --> 00:05:37,620
well in terms of allocating and freeing frames on every node.
