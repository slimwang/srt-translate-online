1
00:00:00,000 --> 00:00:03,960
This is a bit of a tricky question, so let's go over the first one first

2
00:00:03,960 --> 00:00:06,610
and let's go back and take a look at the code.

3
00:00:06,610 --> 00:00:11,670
So, most of these are arithmetic operations and if you remember from the RAM model that we've

4
00:00:11,670 --> 00:00:16,490
been discussing in the lecture that according to the RAM model that we've been using,

5
00:00:16,490 --> 00:00:28,550
all arithmetic operations take constant time, so it means this, this, this, and this all take constant time.

6
00:00:28,550 --> 00:00:37,410
The only thing that doesn't is this for loop right here. So how many times does the for loop execute?

7
00:00:37,410 --> 00:00:44,680
Well, that executes based on n, the value of the input about square root of n times

8
00:00:44,680 --> 00:00:49,030
and if everything else is constant time and this executes square root of n times,

9
00:00:49,030 --> 00:00:52,410
well from around the order the square root of n.

10
00:00:52,410 --> 00:00:55,020
You can go ahead and check this.

11
00:00:55,020 --> 00:01:00,890
So this next part is very pretty tricky and it hinges on getting this part right.

12
00:01:00,890 --> 00:01:04,019
So if you have trouble with this, that is totally understandable.

13
00:01:04,019 --> 00:01:07,660
So first, let's remember that we can represent n

14
00:01:07,660 --> 00:01:11,610
with a logarithm and number of digits which is what d is.

15
00:01:11,610 --> 00:01:20,280
What this means is that n=c where c is just some constant that we're not going by * 10⁻¹

16
00:01:20,280 --> 00:01:27,000
and as an example of this, let's say, that n is 4000 like we had before.

17
00:01:27,000 --> 00:01:38,550
So 4000=c where c is something * 10d⁻¹, d is 4-1 is ³,

18
00:01:38,550 --> 00:01:43,940
and well then that means that this has to be 4, 4*10³ is 4000.

19
00:01:43,940 --> 00:01:50,340
So this is how it represent an n by d and c is just some constant to make everything more count

20
00:01:50,340 --> 00:01:54,990
and since this is big O equation, we're not really that concerned with constants.

21
00:01:54,990 --> 00:01:59,130
Now, if we know this and we also know that the algorithm

22
00:01:59,130 --> 00:02:06,360
has a running time from the order of square root of n, and we're talking about it in terms of n,

23
00:02:06,360 --> 00:02:12,550
and then we can put these together, so square root of n is the square root of all this

24
00:02:12,550 --> 00:02:15,610
and we're going to have to do a bit of math here.

25
00:02:15,610 --> 00:02:26,660
Well, we can separate this two out to the √c and √10d⁻¹,

26
00:02:26,660 --> 00:02:37,280
well we can describe this by saying this, 10d⁻¹/2 since that's exactly that the square root is.

27
00:02:37,280 --> 00:02:42,380
And now we can pull this out and so now we have this nice three separate terms,

28
00:02:42,380 --> 00:02:47,470
and again since we don't really care about constants, we can just kind of get rid of these.

29
00:02:47,470 --> 00:02:54,920
We can say that √c * 10⁻¹/² is just some other constant we don't really care about code k.

30
00:02:54,920 --> 00:02:57,330
Because the only thing we really care about is D.

31
00:02:57,330 --> 00:03:03,960
So this is k * 10d/² and this is exactly what we need to say

32
00:03:03,960 --> 00:03:10,850
but this algorithm is in big O notation until we can say that in terms of d

33
00:03:10,850 --> 00:03:16,230
the running time in this algorithm is 0(10d/2).

34
00:03:16,230 --> 00:03:19,760
Now, if you didn't get that or if you had problems with it,

35
00:03:19,760 --> 00:03:24,690
don't worry about that it's really kind of a challenging problem

36
00:03:24,690 --> 00:03:28,960
and if you still don't understand it,then I recommend checking on the forms and discussing it.

37
00:03:28,960 --> 00:03:35,260
This is really the kind of basic math calculations that you're going to have to do

38
00:03:35,260 --> 00:03:39,460
and part of the problem here that a lot of people run into is

39
00:03:39,460 --> 00:03:44,150
these constants that we just drop or don't care about really

40
00:03:44,150 --> 00:03:48,880
and that's the kind of thing that makes big O notation really very powerful

41
00:03:48,880 --> 00:03:55,920
that we can just drop those and say we don't really care about those in the grand scheme of things.
