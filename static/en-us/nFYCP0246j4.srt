1
00:00:00,120 --> 00:00:02,370
The answer is it will fail for some data sets.

2
00:00:02,370 --> 00:00:04,450
If the user inputs a bunch of numbers that are all

3
00:00:04,450 --> 00:00:07,610
negative, none of these will ever be greater than 0.

4
00:00:07,610 --> 00:00:10,720
So largest will just stay 0 the whole time even though

5
00:00:10,720 --> 00:00:12,640
there's no number as large as 0 in the data

6
00:00:12,640 --> 00:00:16,508
set. Having a 0 in the data set is okay. If

7
00:00:16,508 --> 00:00:20,738
the data set was negative 2, negative 3, 0, 4,

8
00:00:20,738 --> 00:00:25,250
eventually we would find the 4, and that would be larger

9
00:00:25,250 --> 00:00:28,088
than 0. We can even take away the 4.

10
00:00:28,088 --> 00:00:30,539
If the data set was just negative 2, negative 3,

11
00:00:30,539 --> 00:00:32,705
and 0, this code would find that the largest

12
00:00:32,705 --> 00:00:35,070
number is 0, which is true in this case. So

13
00:00:35,070 --> 00:00:38,180
having a 0 in the data set doesn't affect

14
00:00:38,180 --> 00:00:40,240
whether this code works or not. We know it won't

15
00:00:40,240 --> 00:00:42,770
work because of the example that I gave before. And

16
00:00:42,770 --> 00:00:44,590
this will work fine even if there's only one input.
