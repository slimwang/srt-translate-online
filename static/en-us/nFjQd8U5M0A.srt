1
00:00:00,000 --> 00:00:02,600
For this next problem, we're going to be looking at

2
00:00:02,600 --> 00:00:08,800
some tricky behavior of O notation when we're dealing with numbers.

3
00:00:08,800 --> 00:00:13,240
To illustrate this, let's take a look at the number 4000.

4
00:00:13,240 --> 00:00:19,100
Now 4000 has a magnitude of size of well 4000

5
00:00:19,100 --> 00:00:24,360
but you can write it down with a lot less than 4000 digits.

6
00:00:24,360 --> 00:00:29,140
In fact, you can write it down with 1, 2, 3, 4 digits.

7
00:00:29,140 --> 00:00:35,490
So it's actually a logarithmic number of digits in relation to the size of the number.

8
00:00:35,490 --> 00:00:43,850
Similarly, if we wanted to write down 40,000, which is 10 times as big as 4000,

9
00:00:43,850 --> 00:00:47,800
we only need to write down well 5 digits.

10
00:00:47,800 --> 00:00:51,470
So the number of digits is growing logarithmically with the size

11
00:00:51,470 --> 00:00:53,730
of the number that we want to represent.

12
00:00:53,730 --> 00:00:59,890
Now, let's say we call the actual number we want to represent n.

13
00:00:59,890 --> 00:01:06,590
And let's say the number of digits necessary to represent n, we'll call d.

14
00:01:06,590 --> 00:01:13,690
And now, let's take a look at a fairly simple algorithm to test whether n is prime.

15
00:01:13,690 --> 00:01:18,770
So we have this basic isprime function to test whether n is prime.

16
00:01:18,770 --> 00:01:22,620
And it does this by first checking if n is less than 2

17
00:01:22,620 --> 00:01:25,440
since 0 and 1 are not prime and returning false in that case.

18
00:01:25,440 --> 00:01:31,570
If n equals 2, then we return 2 because 2 is prime and then we get rid of all the even numbers

19
00:01:31,570 --> 00:01:34,620
because none of the even numbers other than 2 are prime.

20
00:01:34,620 --> 00:01:41,520
And then we check if there are any odd numbers between 3 and the √n that divide n.

21
00:01:41,520 --> 00:01:45,320
Because if there are any numbers that divide n, then it's not prime.

22
00:01:45,320 --> 00:01:49,500
And it turns out to check for primality, you actually only need to check up to the √n

23
00:01:49,500 --> 00:01:54,490
and we're not going to get into why that is the case right now because well that's another course.

24
00:01:54,490 --> 00:01:58,030
But if it finds any numbers that divide n then we return false

25
00:01:58,030 --> 00:02:01,860
and otherwise we go all the way through this and return true.

26
00:02:01,860 --> 00:02:06,840
So my first question is, which of these answers best characterize the asymptotic running time

27
00:02:06,840 --> 00:02:14,130
of this primality algorithm as a function of n, the value of the input size?

28
00:02:14,130 --> 00:02:21,770
Is it a constant order? Logarithmic? Is it in the order of √n? Is it linear? Quadratic?

29
00:02:21,770 --> 00:02:24,720
Or does it turn out that this is exponential?

30
00:02:24,720 --> 00:02:30,760
And my second question is, what about if we express the running time as a function of d,

31
00:02:30,760 --> 00:02:34,130
the number of digits that it takes to represent the number

32
00:02:34,130 --> 00:02:37,890
rather than as a function of n, the actual value of the number?

33
00:02:37,890 --> 00:02:45,070
If we express the running time in this way, then is it linear in the number of digits? Quadratic?

34
00:02:45,070 --> 00:02:51,150
Does it grow to the 10th power? Does it grow 10 to the log of d? 10 to the d/2?

35
00:02:51,150 --> 00:02:58,620
10 to the √d? Or 10 to the d? Check whichever one is best.
