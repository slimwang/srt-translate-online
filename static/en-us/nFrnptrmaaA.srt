1
00:00:00,350 --> 00:00:03,280
Okay, here's my version. First thing we do is, we

2
00:00:03,280 --> 00:00:06,473
call our make_salt function. We imported hashlib so we can

3
00:00:06,473 --> 00:00:09,360
have SHA256. And so, first I create the hash, this

4
00:00:09,360 --> 00:00:14,670
part of the response. SHA256 of name plus pw plus salt.

5
00:00:14,670 --> 00:00:18,770
Call hexdigest on that. And then I, we return that,

6
00:00:18,770 --> 00:00:20,630
and the salt separated with a comma. So let's give

7
00:00:20,630 --> 00:00:22,860
this a whirl. We run this function and we see

8
00:00:22,860 --> 00:00:25,465
we get this nice hash and we get our salt and

9
00:00:25,465 --> 00:00:28,280
if I were to run this again, I should get a completely different hash and a

10
00:00:28,280 --> 00:00:30,520
completely different salt. There we go. And I

11
00:00:30,520 --> 00:00:32,540
can keep running this and keep getting different answers.

12
00:00:34,980 --> 00:00:37,350
So you can see the salt basically adds an extra

13
00:00:39,100 --> 00:00:40,910
bit of randomness to, to what we're going to see in our

14
00:00:40,910 --> 00:00:45,405
hash. And it prevents a, a would be attacker from

15
00:00:45,405 --> 00:00:48,330
pre-computing all of the possible hashes. And it also prevent a

16
00:00:48,330 --> 00:00:50,550
would be attacker from you know, of course seeing all

17
00:00:50,550 --> 00:00:53,230
of our plain text passwords. So now we've got a reasonably

18
00:00:53,230 --> 00:00:56,450
decent password hashing thing. There's a, we need to write

19
00:00:56,450 --> 00:00:58,410
one last function in this. Let's go ahead and do that.
