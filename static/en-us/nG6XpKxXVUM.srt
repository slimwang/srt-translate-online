1
00:00:00,200 --> 00:00:05,220
Before we get into an investigation of how the bandwidth choice affects our

2
00:00:05,220 --> 00:00:08,210
kernel density estimate, lets form some kernel

3
00:00:08,210 --> 00:00:14,180
density estimator using our iPython notebook and some python code.

4
00:00:14,180 --> 00:00:16,510
Look at the block off code here.

5
00:00:16,510 --> 00:00:19,960
We are going to use the stats marginal from si pi.

6
00:00:19,960 --> 00:00:25,680
Here we are defining a function that chooses various bandwidth factors.

7
00:00:25,680 --> 00:00:29,590
This part of the code defines a function that gives

8
00:00:29,590 --> 00:00:33,878
us a kernel density estimate from our data.

9
00:00:33,878 --> 00:00:36,270
Let's run both these pieces of code,

10
00:00:36,270 --> 00:00:40,839
as they were both simply functions that didn't give us any results yet.

11
00:00:40,839 --> 00:00:47,851
But let's now call the function, and plot them with a bandwidth factor of 0.1.

12
00:00:47,851 --> 00:00:51,090
Let's see what happens, round this piece of code.

13
00:00:51,090 --> 00:00:57,010
Upon running the code, you will get a plot that looks something like this.

14
00:00:57,010 --> 00:00:59,510
It might have taken you a while to run,

15
00:00:59,510 --> 00:01:04,910
depending on the computer you're using, so have patience and let it finish.

16
00:01:04,910 --> 00:01:07,220
Here, the bandwidth is very,

17
00:01:07,220 --> 00:01:13,610
very small, and we see a density estimate that is quite jaggedy.

18
00:01:13,610 --> 00:01:17,180
We are now going to increase the bandwidth factor, by two.

19
00:01:17,180 --> 00:01:18,640
Let's see what happens.

20
00:01:18,640 --> 00:01:23,780
Again, once it finishes running, you will see a kernel density estimate.

21
00:01:23,780 --> 00:01:29,520
The green line is still a little bit jaggedy, but smoother then the last one.

22
00:01:29,520 --> 00:01:31,358
Let's keep doing this.

23
00:01:31,358 --> 00:01:34,272
For each of the next three lines of code,

24
00:01:34,272 --> 00:01:39,601
we have changed the bandwidth factor to 0.7, 0.9, and 0.99.

25
00:01:39,601 --> 00:01:41,807
Run all three.

26
00:01:41,807 --> 00:01:48,077
For a factor of 0.7, you see a more smooth density estimate.

27
00:01:48,077 --> 00:01:53,150
Here's the density obtained for the factor of 0.09.

28
00:01:53,150 --> 00:01:58,080
Here's the density estimate with the largest bandwidth selected.

29
00:01:58,080 --> 00:02:02,120
Now we have a much smoother kernel density estimate.

30
00:02:02,120 --> 00:02:08,310
So you see as we vary h from a small value to a large value.

31
00:02:08,310 --> 00:02:13,660
The variations in the kernel density estimate itself becomes smaller, and

32
00:02:13,660 --> 00:02:17,000
the smoothness of the curve increases.

33
00:02:17,000 --> 00:02:22,320
The jaggedness of the variation is in fact called the variance.

34
00:02:22,320 --> 00:02:26,360
The smoothness is part of what is called the bias.

35
00:02:26,360 --> 00:02:29,520
We can trade off between variance and

36
00:02:29,520 --> 00:02:34,480
bias by choosing a higher or lower bandwidth.

37
00:02:34,480 --> 00:02:39,340
We will now investigate if there is a way to find an optimal bandwidth.
