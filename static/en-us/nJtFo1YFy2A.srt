1
00:00:00,000 --> 00:00:02,000
Let's go through a couple of solutions to this programming quiz

2
00:00:02,000 --> 00:00:06,000
where we're trying to get 100% branch coverage for an 8-bit adder.

3
00:00:06,000 --> 00:00:10,000
And so they way I solved this is using exhaustive testing.

4
00:00:10,000 --> 00:00:16,000
The insight is that 8-bit inputs characterize the full range of values from 0 to 255.

5
00:00:16,000 --> 00:00:21,000
What I can do is write a function test_exhaustive which lets i loop over the range 0-255,

6
00:00:21,000 --> 00:00:26,000
j loop over the range 0 to 255, and then define a my_add function

7
00:00:26,000 --> 00:00:29,000
which is going to invoke the 8-bit adder with those inputs.

8
00:00:29,000 --> 00:00:33,000
Then what we're going to do is print the output and assert that the result is equal

9
00:00:33,000 --> 00:00:36,000
to the actual i + j output.

10
00:00:36,000 --> 00:00:38,000
This goes a little bit beyond what I asked you to do for the quiz,

11
00:00:38,000 --> 00:00:40,000
but it's a good idea to make sure that the code is right.

12
00:00:40,000 --> 00:00:43,000
So, now this my_add function is kind of where the magic happens.

13
00:00:43,000 --> 00:00:48,000
What my_add does is takes an integer a and splits that into the bits,

14
00:00:48,000 --> 00:00:51,000
splits it into 8 bits that represent the same value as the integer,

15
00:00:51,000 --> 00:00:53,000
do the same thing for b.

16
00:00:53,000 --> 00:00:57,000
Then we're going to call the addEightBits function with the bits of a and the bits of b,

17
00:00:57,000 --> 00:00:59,000
resulting in a set of bits representing the sum.

18
00:00:59,000 --> 00:01:02,000
Then, we can glue those back into an integer

19
00:01:02,000 --> 00:01:05,000
and that's going to be returned to check our assertion.

20
00:01:05,000 --> 00:01:07,000
Let's look at the split and glue functions.

21
00:01:07,000 --> 00:01:14,000
Split is pretty simple. It just takes an integer, and if n bit-wise and with 1 is true,

22
00:01:14,000 --> 00:01:17,000
then the lower the bit must have been set, and so we'll return a true value

23
00:01:17,000 --> 00:01:19,000
for the low order bit position.

24
00:01:19,000 --> 00:01:24,000
Then we'll go to comparing with 2, 4, 8, 16, 32, 64, and 128.

25
00:01:24,000 --> 00:01:28,000
Together these tests serve to split the input integer into a sequence of true and false values

26
00:01:28,000 --> 00:01:31,000
that together represent that integer.

27
00:01:31,000 --> 00:01:33,000
The glue function does exactly the opposite thing.

28
00:01:33,000 --> 00:01:37,000
It takes a series of boolean values and glues them into an integer.

29
00:01:37,000 --> 00:01:40,000
The way we do this is by keeping a running total.

30
00:01:40,000 --> 00:01:46,000
If b 0--that is to say, if the low-order bit of the input is set, we increment a running total by 1.

31
00:01:46,000 --> 00:01:48,000
If the next bit if set, we increment it by two.

32
00:01:48,000 --> 00:01:54,000
If the third bit is set, we increment it by 4, then 8, 16, 32, 64, 128, and 256.

33
00:01:54,000 --> 00:01:59,000
And so together, this lets us reconstruct an integer value from its set of bits.

34
00:01:59,000 --> 00:02:04,000
So, when we call these things together, we can verify that the code actually implements an adder

35
00:02:04,000 --> 00:02:07,000
and incidentally, because we're testing it on all possible values,

36
00:02:07,000 --> 00:02:10,000
we're going to get full branch coverage. Let's just make sure that that's the case.

37
00:02:10,000 --> 00:02:13,000
Okay, so we just ran the code. Now let's look at the coverage output.

38
00:02:13,000 --> 00:02:17,000
Here we're looking at the coverage output, and what we can see is that of the 85 statements

39
00:02:17,000 --> 00:02:19,000
present in the adder, all 85 of them are ran,

40
00:02:19,000 --> 00:02:24,000
so none of them are missing, and there were 9 partially executed comparison statements.

41
00:02:24,000 --> 00:02:27,000
That is to say 0 comparison statements, which only went one way.

42
00:02:27,000 --> 00:02:31,000
If we look through the code we can see that indeed, the coverage tool believes that it's all covered.

43
00:02:31,000 --> 00:02:33,000
So, now let's look at an alternative solution.

44
00:02:33,000 --> 00:02:36,000
Instead of our exhaustive test, we could have written a much smaller test that gets 100% branch coverage.

45
00:02:36,000 --> 00:02:40,000
This is based on the observation that it we look at the cascading series of tests

46
00:02:40,000 --> 00:02:44,000
in the branch coverage, basically all that makers are whether the input bits are 0 or 1.

47
00:02:44,000 --> 00:02:49,000
So, if we call the adder with all 0 bits, we call it with all 1 bits,

48
00:02:49,000 --> 00:02:52,000
and then we need 1 more test case, we can get 100% branch coverage this way,

49
00:02:52,000 --> 00:02:54,000
so let's just make sure that that's, indeed, the case.

50
00:02:54,000 --> 00:02:57,000
I'm going to run the adder again. This time it's not printing out anything.

51
00:02:57,000 --> 00:02:59,000
Let's go back to the webpage.

52
00:02:59,000 --> 00:03:03,000
This time we have 81 statements, and they all ran, and we have 0 mission statements

53
00:03:03,000 --> 00:03:05,000
and 0 partially executed statements.

54
00:03:05,000 --> 00:03:10,000
So, as you can see, the coverage tool believes that just these three really simple test cases

55
00:03:10,000 --> 99:59:59,999
were sufficient to get 100% branch coverage of our adder.
