1
00:00:00,000 --> 00:00:04,000
Let me tell you about my favorite method of all, called "Graph SLAM."

2
00:00:04,000 --> 00:00:09,000
This is one of many methods for SLAM, and it's the one that is by far the easiest to explain.

3
00:00:09,000 --> 00:00:11,000
Let's assume we have a robot,

4
00:00:11,000 --> 00:00:17,000
and let's call arbitrarily the initial location x equals zero and y equals zero.

5
00:00:17,000 --> 00:00:20,000
For this example, we just assume the road has a perfect compass,

6
00:00:20,000 --> 00:00:23,000
and we don't care about heading direction just to keep things simple.

7
00:00:23,000 --> 00:00:29,000
Let's assume the robot moves to the right in x-direction by 10, so it's now over here.

8
00:00:29,000 --> 00:00:34,000
In a perfect world, we would know that x1, the location after motion,

9
00:00:34,000 --> 00:00:40,000
is the same as x0+10 and y1 is the same as y0.

10
00:00:40,000 --> 00:00:44,000
But we learned from our various robotic Kalman filter lessons and others

11
00:00:44,000 --> 00:00:47,000
that the location is actually uncertain.

12
00:00:47,000 --> 00:00:52,000
Rather than assuming in our (x, y) coordinate system the robot moved to the right by 10 exactly,

13
00:00:52,000 --> 00:00:58,000
we know that the actual location is a Gaussian centered around (10, 0),

14
00:00:58,000 --> 00:01:00,000
but it's possible the robot is somewhere else.

15
00:01:00,000 --> 00:01:03,000
Remember we worked out the math for this Gaussian?

16
00:01:03,000 --> 00:01:06,000
Here's how it looks just for the x variable.

17
00:01:06,000 --> 00:01:11,000
Rather than setting x1 to x0 plus 10, we try to express the Gaussian

18
00:01:11,000 --> 00:01:14,000
that peaks when these two things are the same.

19
00:01:14,000 --> 00:01:18,000
If we subtract from x1 x0 and 10,

20
00:01:18,000 --> 00:01:22,000
put this into a squared format and turn this into a Gaussian,

21
00:01:22,000 --> 00:01:27,000
we get a probability distribution that relates x1 and x0.

22
00:01:27,000 --> 00:01:29,000
We can do the same for y.

23
00:01:29,000 --> 00:01:32,000
Since there is no change in y, according to our motion,

24
00:01:32,000 --> 00:01:37,000
all we ask is that y1 and y0 are as close together as possible.

25
00:01:37,000 --> 00:01:41,000
The product of these two Gaussians is now our constraint.

26
00:01:41,000 --> 00:01:50,000
We wish to maximize the likelihood of the position x1 given the position x0 is (0, 0).

27
00:01:50,000 --> 00:01:59,000
What Graph SLAM does is defining our probabilities using a sequence of such constraints.

28
00:01:59,000 --> 00:02:03,000
Say we have a robot that moves in some space,

29
00:02:03,000 --> 00:02:07,000
and each location is now characterized by a vector x0

30
00:02:07,000 --> 00:02:13,000
and a vector x1, vector x2, vector x3. Often they are 3-dimensional vectors.

31
00:02:13,000 --> 00:02:18,000
What Graph SLAM collects is initial location, which is a (0, 0, 0) initially--

32
00:02:18,000 --> 00:02:20,000
although here it looks a little bit different--

33
00:02:20,000 --> 00:02:23,000
then, really importantly, lots of relative constraints

34
00:02:23,000 --> 00:02:28,000
that relate each robot pose to the previous robot pose.

35
00:02:28,000 --> 00:02:30,000
We call them relative motion constraints.

36
00:02:30,000 --> 00:02:32,000
You can think of those as rubber bands.

37
00:02:32,000 --> 00:02:38,000
In expectation, this rubber band will be exactly the motion the robot sensed or commanded,

38
00:02:38,000 --> 00:02:43,000
but in reality, it might have to bend it a little bit to make the map more consistent.

39
00:02:43,000 --> 00:02:47,000
Speaking about maps, let's use landmarks as an example.

40
00:02:47,000 --> 00:02:50,000
Suppose there is a landmark out here, and the landmark is being seen

41
00:02:50,000 --> 00:02:54,000
from the robot with some relative measurement--z0, z1.

42
00:02:54,000 --> 00:02:58,000
Perhaps I didn't see it it during time 2, but this is z3.

43
00:02:58,000 --> 00:03:01,000
All these are also relative constraints

44
00:03:01,000 --> 00:03:03,000
very much like the ones before.

45
00:03:03,000 --> 00:03:07,000
Again, they are captured by Gaussians, and we get relative measurement contraints.

46
00:03:07,000 --> 00:03:11,000
One such constraint is every time the robot sees a landmark.

47
00:03:11,000 --> 00:03:15,000
Graph SLAM collects thosee constraints, and as we'll see,

48
00:03:15,000 --> 00:03:19,000
they're insanely easy to collect, and it just relaxes the set of rubber bands

49
00:03:19,000 --> 00:03:25,000
to find the most likely configuration of robot path along with the location of landmarks.

50
00:03:25,000 --> 00:03:27,000
That is the mapping process.

51
00:03:27,000 --> 00:03:30,000
Let me ask you a quick quiz that'll take thinking.

52
00:03:30,000 --> 00:03:35,000
Suppose we have six robot poses--that is, one initial and five motions.

53
00:03:35,000 --> 00:03:39,000
We have eight measurements of landmarks that we've seen.

54
00:03:39,000 --> 00:03:42,000
These might be multiple landmarks. Sometimes the robot saw more than one.

55
00:03:42,000 --> 00:03:46,000
The question now is how many total constraints do we have if we count each

56
00:03:46,000 --> 99:59:59,999
of these constraints as exactly one constraint.
