1
00:00:00,000 --> 00:00:04,000
The last thing that we need to show is there isn't an easier way to compute d

2
00:00:04,000 --> 00:00:06,000
than finding the factors of n.

3
00:00:06,000 --> 00:00:08,000
This follows from what we just showed--

4
00:00:08,000 --> 00:00:11,000
that if we know the totient, we could easily find the factors,

5
00:00:11,000 --> 00:00:14,000
because the correctness of RSA depends on this property.

6
00:00:14,000 --> 00:00:22,000
That means that there is some integer k such that k * Ï†(n) is equal to ed - 1,

7
00:00:22,000 --> 00:00:25,000
which means that we already know the value of e.

8
00:00:25,000 --> 00:00:29,000
We're assuming now that we figure out a way to compute d.

9
00:00:29,000 --> 00:00:32,000
If we can solve this, then we know a multiple of the totient.

10
00:00:32,000 --> 00:00:37,000
Once we know a multiple of the totient, it's easy to find the factors p and q.

11
00:00:37,000 --> 00:00:42,000
If there were some easier way to find d than factoring the modulus,

12
00:00:42,000 --> 00:00:45,000
that would provide an easy way to factor.

13
00:00:45,000 --> 00:00:50,000
We finished showing that at least all the obvious mathematical ways

14
00:00:50,000 --> 00:00:54,000
of breaking RSA would easily allow us to factor n.

15
00:00:54,000 --> 00:00:57,000
This certainly doesn't cover issues in implementation

16
00:00:57,000 --> 00:01:00,000
or issues in weak choices of messages or keys,

17
00:01:00,000 --> 00:01:04,000
but assuming all of those things are good

18
00:01:04,000 --> 00:01:07,000
then we've shown that all the obvious mathematical ways to break RSA

19
00:01:07,000 --> 00:01:10,000
are equivalent to factoring n.

20
00:01:10,000 --> 00:01:14,000
That means if factoring is hard, breaking RSA would be hard.

21
00:01:14,000 --> 99:59:59,999
That's the second part of this claim--that factoring is, indeed, hard.
