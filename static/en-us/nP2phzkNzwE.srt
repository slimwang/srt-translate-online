1
00:00:00,450 --> 00:00:01,850
Once you've gained enough practice,

2
00:00:01,850 --> 00:00:04,590
these reductions begin to
feel a little repetitive.

3
00:00:04,590 --> 00:00:07,130
And it's natural to wonder whether
there is a theorem that would

4
00:00:07,130 --> 00:00:08,650
capture them all.

5
00:00:08,650 --> 00:00:11,950
Indeed there is, and it is
traditionally called Rice's Theorem,

6
00:00:11,950 --> 00:00:14,390
after H.G Rice's 1953
paper on the subject.

7
00:00:14,390 --> 00:00:19,170
This is a very powerful theorem,
and it implies that we can't say

8
00:00:19,170 --> 00:00:22,480
anything about a computer just based
on the language that it recognizes.

9
00:00:23,700 --> 00:00:27,590
So far the pattern has been that we've
wanted to show that some language L

10
00:00:27,590 --> 00:00:29,610
was undecidable, and

11
00:00:29,610 --> 00:00:33,780
this language L was about descriptions
of Turing machines whose languages,

12
00:00:33,780 --> 00:00:37,080
that is the set of strings that they
accept, have a certain property.

13
00:00:38,130 --> 00:00:40,290
Two things have to be
true about this language.

14
00:00:40,290 --> 00:00:44,070
First, as we have said,
that the membership can only depend

15
00:00:44,070 --> 00:00:48,470
on the language of the machine,
not about its particular implementation

16
00:00:48,470 --> 00:00:51,360
like the number of states or
the tape alphabet, and so forth.

17
00:00:52,430 --> 00:00:56,020
Second is that the language can't
be trivial, either including or

18
00:00:56,020 --> 00:00:58,230
excluding every Turing machine.

19
00:00:58,230 --> 00:01:02,200
We'll assume that there's some
machine M1 in the language and

20
00:01:02,200 --> 00:01:05,260
another machine M2 outside the language.

21
00:01:05,260 --> 00:01:06,890
That's the only additional
assumption we need.

22
00:01:07,970 --> 00:01:11,340
Recall that in all the reductions,
we created a machine N,

23
00:01:11,340 --> 00:01:14,510
that either accepts nothing, or
else it has some other behavior,

24
00:01:14,510 --> 00:01:17,010
depending on the behavior
of the input machine M.

25
00:01:18,270 --> 00:01:21,480
Similarly, there are two cases for
Rice's Theorem.

26
00:01:21,480 --> 00:01:26,710
Either the empty set is in P in and
therefore, every machine that doesn't

27
00:01:26,710 --> 00:01:31,680
accept anything is in the language L,
or else the empty set is not in P.

28
00:01:33,000 --> 00:01:36,210
Similarly, there are two cases for
Rice's theorem.

29
00:01:36,210 --> 00:01:40,090
Either the empty set is in P, and
therefore every machine that doesn't

30
00:01:40,090 --> 00:01:45,350
accept anything is in the language L,
or else the empty set is not in P,

31
00:01:45,350 --> 00:01:48,620
and every language that doesn't
accept anything is not in L.

32
00:01:49,720 --> 00:01:53,160
Let's take a look at the case where
the empty set is not in P first.

33
00:01:54,270 --> 00:01:57,730
In that case,
we reduce from the halting problem.

34
00:01:57,730 --> 00:02:01,990
The reduction looks like this, and
just runs M with the end to end input.

35
00:02:02,990 --> 00:02:08,479
And if M halts, then we define N
to act just like this machine M1,

36
00:02:08,479 --> 00:02:10,990
which is in the language.

37
00:02:10,990 --> 00:02:16,980
Thus, N acts like M1 if M halts on the
empty string, and it loops otherwise.

38
00:02:16,980 --> 00:02:18,810
This is exactly what we want.

39
00:02:20,000 --> 00:02:24,350
In the one case, the language
of N is the language of M1, and

40
00:02:24,350 --> 00:02:25,980
hence, N must be in the language.

41
00:02:27,130 --> 00:02:27,910
In the other case,

42
00:02:27,910 --> 00:02:32,140
the language of N is the empty string,
meaning that it's not in L.

43
00:02:33,550 --> 00:02:36,520
And a decider for
L can thus tell the difference and

44
00:02:36,520 --> 00:02:39,080
tell us whether M halted
on the empty string or not.

45
00:02:40,230 --> 00:02:42,670
Now for the other case where
the empty set is in P.

46
00:02:43,770 --> 00:02:48,480
Thus every machine that doesn't accept
any string shouldn't be in the language.

47
00:02:48,480 --> 00:02:53,690
In this case, we just replace M1 by M2
in the definition of the reduction,

48
00:02:54,690 --> 00:03:00,040
so that N behaves like M2,
if M halts on the empty string.

49
00:03:00,040 --> 00:03:04,630
This is fine, but we need to reduce from
the complement of the halting problem.

50
00:03:04,630 --> 00:03:07,590
That is, from the set of descriptions
of Turing machines that loop on

51
00:03:07,590 --> 00:03:09,030
the empty input.

52
00:03:09,030 --> 00:03:12,350
Otherwise, we would end up accepting
when we want to not accept and

53
00:03:12,350 --> 00:03:12,880
vice versa.

54
00:03:14,010 --> 00:03:16,850
All in all then,
we have proved the following theorem.

55
00:03:16,850 --> 00:03:21,060
We'll let L be a subset of strings
representing Turing machines

56
00:03:21,060 --> 00:03:22,019
having two key properties.

57
00:03:23,120 --> 00:03:28,200
First, if M1 and M2 recognize the same
language, that is the same set

58
00:03:28,200 --> 00:03:34,190
of strings, then their descriptions
are both in or out of the language.

59
00:03:34,190 --> 00:03:38,230
This just says that the language only
depends on the behavior of the machine.

60
00:03:38,230 --> 00:03:39,480
And, not on its implementation.

61
00:03:40,870 --> 00:03:43,180
Second, the language can't be trivial.

62
00:03:43,180 --> 00:03:46,240
There must be a machine whose
description is in the language and

63
00:03:46,240 --> 00:03:48,400
a machine whose description
is not in the language.

64
00:03:49,510 --> 00:03:53,370
If these two properties hold,
then the language L is undecidable.
