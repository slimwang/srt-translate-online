1
00:00:00,080 --> 00:00:02,610
So here's the answer. The result of the first expression

2
00:00:02,610 --> 00:00:05,930
is always 0. No matter what string s is, we

3
00:00:05,930 --> 00:00:09,000
always find s at the beginning of itself. So, if

4
00:00:09,000 --> 00:00:12,940
we think of s as any string. If we search for

5
00:00:12,940 --> 00:00:16,300
the string hello, in hello, well, we're going to find hello

6
00:00:16,300 --> 00:00:19,230
at the beginning of hello, and that's position 0, that's

7
00:00:19,230 --> 00:00:22,000
what fun will return, no matter what string s is,

8
00:00:22,000 --> 00:00:25,170
the result of s.find s will always be 0. The result

9
00:00:25,170 --> 00:00:27,860
of s.find passing in the string s, will only

10
00:00:27,860 --> 00:00:31,550
be 0, if s started with the letter s. So

11
00:00:31,550 --> 00:00:35,930
this is not always true. The third example always is

12
00:00:35,930 --> 00:00:39,200
true, so here we have the string s, that's a

13
00:00:39,200 --> 00:00:41,510
string with one character s, and what we're trying

14
00:00:41,510 --> 00:00:43,770
to find in it is the string s. Well, we

15
00:00:43,770 --> 00:00:47,340
find that at position 0. So that's the result find

16
00:00:47,340 --> 00:00:50,550
we'll produce. The fourth one gets a little more tricky.

17
00:00:50,550 --> 00:00:54,100
So here we're looking in the string s. We're looking for the

18
00:00:54,100 --> 00:00:57,280
empty string. Remember the definition of find says it will give us

19
00:00:57,280 --> 00:01:01,460
the first occurrence where that string appears. Well the empty string appears

20
00:01:01,460 --> 00:01:03,700
in s. We don't actually see it, but it's there. We found

21
00:01:03,700 --> 00:01:06,630
the empty string. There's no string there no matter what s is.

22
00:01:06,630 --> 00:01:08,650
We can find the empty string in it, because we don't need

23
00:01:08,650 --> 00:01:11,860
any string to find the empty string. So the result of s.find

24
00:01:11,860 --> 00:01:15,630
passing an empty string, will always be 0, no matter what the

25
00:01:15,630 --> 00:01:18,815
string s is. So the final one is also always

26
00:01:18,815 --> 00:01:21,440
0. And the reason for this, is when we search

27
00:01:21,440 --> 00:01:26,890
in s for the string s plus ! ! , well, no matter what s is. So even if it

28
00:01:26,890 --> 00:01:30,870
was a string that already included ! ! . So

29
00:01:30,870 --> 00:01:34,640
let's suppose that's the value of s. What we're trying

30
00:01:34,640 --> 00:01:38,230
to find is now s plus ! ! . So

31
00:01:38,230 --> 00:01:41,030
that's going to be what we had before, plus three more

32
00:01:41,030 --> 00:01:44,780
exclamation points. Searching for that within the string s

33
00:01:44,780 --> 00:01:47,030
will never be found. And we know it can't be

34
00:01:47,030 --> 00:01:49,750
found because this string is actually longer than the

35
00:01:49,750 --> 00:01:52,440
string s that we started with. So the result of

36
00:01:52,440 --> 00:01:55,830
this expression is always going to be -1. That means

37
00:01:55,830 --> 00:01:58,540
the string was never found. We add 1 to that,

38
00:01:58,540 --> 00:02:01,660
we get 0. That's why this expression will always evaluate

39
00:02:01,660 --> 00:02:03,800
to 0, no matter what the value of s is.
