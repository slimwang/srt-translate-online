1
00:00:00,270 --> 00:00:05,330
Thus far, I've given you a general idea of how an

2
00:00:05,330 --> 00:00:10,330
individual site that hosts computation resources and handles

3
00:00:10,330 --> 00:00:15,020
a whole bunch of incoming client requests may handle these incoming client

4
00:00:15,020 --> 00:00:20,960
requests in terms of load management. This brings us to the DQ principle.

5
00:00:20,960 --> 00:00:26,050
The server has all the data that is required

6
00:00:26,050 --> 00:00:28,770
for dealing with incoming client queries. So this

7
00:00:28,770 --> 00:00:30,580
the full data set, or DF if the

8
00:00:30,580 --> 00:00:33,600
full data set, that is required for handling

9
00:00:33,600 --> 00:00:37,800
any incoming queries to the server. Now clients

10
00:00:37,800 --> 00:00:45,080
come in with their queries and we will call Q0 as the offered load to the

11
00:00:45,080 --> 00:00:49,150
server, meaning this is the amount of requests

12
00:00:49,150 --> 00:00:52,050
that are hitting the unit per server time.

13
00:00:52,050 --> 00:00:57,200
Even though the offered load is still Q0, maybe the server

14
00:00:57,200 --> 00:01:02,200
could only manage to serve a portion of this incoming requests. And

15
00:01:02,200 --> 00:01:07,130
that portion of the incoming requests that is completed by

16
00:01:07,130 --> 00:01:12,430
the server is Qc. These are the completed requests. We define the yield Q

17
00:01:12,430 --> 00:01:17,590
as the ratio. Qc over Qo. That is the ratio

18
00:01:17,590 --> 00:01:21,360
of completed requests to the offered load. So, Q

19
00:01:21,360 --> 00:01:24,190
is going to be a fraction between zero and one.

20
00:01:24,190 --> 00:01:26,220
Ideally you want it to be one so that

21
00:01:26,220 --> 00:01:28,970
all the client requests are serviced, but if the server

22
00:01:28,970 --> 00:01:31,550
is not able to deal with the offered load

23
00:01:31,550 --> 00:01:34,070
entirely, then the yield is going to be less than

24
00:01:34,070 --> 00:01:37,660
one. Now each query that is coming into the server

25
00:01:37,660 --> 00:01:43,200
May require processing all of the data that's available in

26
00:01:43,200 --> 00:01:45,810
the server to answer this particular query. For

27
00:01:45,810 --> 00:01:48,810
instance, if there's a Google search and the

28
00:01:48,810 --> 00:01:52,760
search requires looking at all the corpus of

29
00:01:52,760 --> 00:01:55,450
data that the server has to answer the query,

30
00:01:55,450 --> 00:02:02,000
then you want to look at the full data set DF. However, it may be that because

31
00:02:02,000 --> 00:02:08,620
of either failures of some of the data servers or the load on the server, it is

32
00:02:08,620 --> 00:02:14,890
only able to process the query using a portion of the total data set, Dv. Dv is

33
00:02:14,890 --> 00:02:18,150
the available data. That is used in processing the

34
00:02:18,150 --> 00:02:22,670
query, in that case the harvest D is defined

35
00:02:22,670 --> 00:02:26,020
as the ratio Dv over Df. That is harvest

36
00:02:26,020 --> 00:02:29,130
is defined as the ratio of the available data

37
00:02:29,130 --> 00:02:32,190
to the full corpus of data. Again, this is

38
00:02:32,190 --> 00:02:34,540
going to be a ratio between zero and one.

39
00:02:34,540 --> 00:02:37,090
Ideally, you want to make sure that the harvest is

40
00:02:37,090 --> 00:02:42,320
one, meaning that incoming requests is completely served with all

41
00:02:42,320 --> 00:02:44,830
the data that it wants. Depending on the service I

42
00:02:44,830 --> 00:02:47,580
can give you different examples. So for instance if the

43
00:02:47,580 --> 00:02:50,890
incoming request is a search, you want to look at

44
00:02:50,890 --> 00:02:54,690
the whole corpus of data that is available to you

45
00:02:54,690 --> 00:02:56,990
to answer that search. But if you are not able

46
00:02:56,990 --> 00:02:59,570
to do that and the server is only using a

47
00:02:59,570 --> 00:03:04,270
portion of the full data in the harvest in terms of the quality of

48
00:03:04,270 --> 00:03:08,770
the results that is being given out to a particular client is less than one.
