1
00:00:00,430 --> 00:00:03,390
This line of code's responsible for
creating a variable.

2
00:00:03,390 --> 00:00:06,510
Remember that a variable is like
this box, number of coffees,

3
00:00:06,510 --> 00:00:08,290
with a value of two inside.

4
00:00:08,290 --> 00:00:10,700
We'll talk about each part
of this line of code and

5
00:00:10,700 --> 00:00:13,500
then we're going to create
more variables in this lesson.

6
00:00:13,500 --> 00:00:17,040
You may have noticed there's specific
rules for how to declare a variable.

7
00:00:18,160 --> 00:00:22,080
When I say declare a variable it means
the same thing as defining a variable or

8
00:00:22,080 --> 00:00:23,970
creating a variable.

9
00:00:23,970 --> 00:00:26,560
This is the line of code
that we've seen so far.

10
00:00:26,560 --> 00:00:30,420
It follows a very specific format for
how to declare variables in Java.

11
00:00:30,420 --> 00:00:32,490
You could think of it
almost like a formula.

12
00:00:32,490 --> 00:00:35,840
First, we need to say what type of
data can go inside the variable.

13
00:00:35,840 --> 00:00:39,350
In this case, it's an integer,
which we call int for short.

14
00:00:39,350 --> 00:00:41,400
Next is the variable name.

15
00:00:41,400 --> 00:00:42,130
In our case,

16
00:00:42,130 --> 00:00:46,830
the variable name is numberOfCoffees
followed by the initial value.

17
00:00:46,830 --> 00:00:50,310
In this case it's 2; for
2 cups of coffee ordered, and

18
00:00:50,310 --> 00:00:54,250
this code statement ends with a ;
according to the rules of Java.

19
00:00:54,250 --> 00:00:56,860
Let's break down this
line one piece at a time.

20
00:00:56,860 --> 00:00:58,580
The first word is Data type,

21
00:00:58,580 --> 00:01:02,070
this is a type of data that's allowed
to go inside at this variable.

22
00:01:02,070 --> 00:01:04,250
In this case we only
let integer numbers.

23
00:01:04,250 --> 00:01:06,450
Gets stored inside the variable.

24
00:01:06,450 --> 00:01:09,690
As I mentioned earlier int is short for
integer.

25
00:01:09,690 --> 00:01:11,440
An integer is a whole number.

26
00:01:11,440 --> 00:01:13,735
Basically any number including zero and

27
00:01:13,735 --> 00:01:16,845
negative numbers that are not
fractions or decimals.

28
00:01:16,845 --> 00:01:21,450
0, 5, 145,
all of these are examples of integers.

29
00:01:21,450 --> 00:01:24,900
The number of coffees ordered should
only be a whole number like one,

30
00:01:24,900 --> 00:01:26,320
two, four, et cetera.

31
00:01:26,320 --> 00:01:29,890
We don't want the customer
to order 1.5 cups of coffee.

32
00:01:29,890 --> 00:01:31,780
If they want more than one cup,
they're going to have to buy two,

33
00:01:31,780 --> 00:01:35,020
then they can give the remaining
half to a friend or something.

34
00:01:35,020 --> 00:01:38,450
As for negative numbers, it doesn't
make as much sense in our case.

35
00:01:38,450 --> 00:01:42,160
There's no data type in Java that
only allows positive numbers.

36
00:01:42,160 --> 00:01:45,020
So later in the next lesson,
we're going to learn how to add code

37
00:01:45,020 --> 00:01:48,690
that prevents negative numbers
from going inside the variable.

38
00:01:48,690 --> 00:01:52,250
The next part of the declaration
is the Variable name.

39
00:01:52,250 --> 00:01:54,570
In this case it's numberOfCoffees.

40
00:01:54,570 --> 00:01:56,890
Notice that it's spelled camel case.

41
00:01:56,890 --> 00:02:00,230
It starts with a lowercase letter and
since there are multiple words,

42
00:02:00,230 --> 00:02:02,250
it capitalizes the start
of each other word.

43
00:02:02,250 --> 00:02:06,450
You can think of it as putting
a name tag on the variable.

44
00:02:06,450 --> 00:02:09,160
You can refer to this
variable with this name.

45
00:02:09,160 --> 00:02:11,490
And here I've drawn it
out like this as well.

46
00:02:11,490 --> 00:02:13,960
This variable box has this name.

47
00:02:13,960 --> 00:02:15,950
If you want to know what this value is.

48
00:02:15,950 --> 00:02:18,690
Or change it, you need to use the name.

49
00:02:18,690 --> 00:02:22,340
Choosing an appropriate variable name
is actually up to you the developer,

50
00:02:22,340 --> 00:02:25,050
depending on what
the variable is used for.

51
00:02:25,050 --> 00:02:28,420
In this case, since the variable is
storing the numberOfCoffees ordered

52
00:02:28,420 --> 00:02:30,310
I just picked this variable name.

53
00:02:30,310 --> 00:02:33,610
You could have picked other names,
like coffee count or

54
00:02:33,610 --> 00:02:37,250
number of coffees ordered or
ordered coffees.

55
00:02:37,250 --> 00:02:40,050
Really it could be anything,
as long as it's easy for

56
00:02:40,050 --> 00:02:43,680
other people to understand
what this variable represents.

57
00:02:43,680 --> 00:02:45,960
When I say that the variable
name can be anything,

58
00:02:45,960 --> 00:02:49,570
there's actually a couple of rules
that Java has about variable names.

59
00:02:49,570 --> 00:02:50,720
Let's look up those rules now.

60
00:02:50,720 --> 00:02:54,560
Let me type in variable names Java.

61
00:02:54,560 --> 00:02:55,680
This first link looks good.

62
00:02:57,090 --> 00:03:00,070
This is official Java
documentation from Oracle.

63
00:03:00,070 --> 00:03:02,130
This top part talks about variables,

64
00:03:02,130 --> 00:03:03,990
which you can read in
your infinite free time.

65
00:03:03,990 --> 00:03:06,870
Down here is what we're interested in.

66
00:03:06,870 --> 00:03:09,110
It talks about naming for variables.

67
00:03:09,110 --> 00:03:13,770
It can be any length, but a really
long name is not very practical.

68
00:03:13,770 --> 00:03:16,810
A really short name,
on the other hand, can be good, but

69
00:03:16,810 --> 00:03:21,550
if it's only one character, like N,
you may not know what n stands for.

70
00:03:21,550 --> 00:03:24,260
So you want to strike a balance
between a descriptive name and

71
00:03:24,260 --> 00:03:26,660
one that isn't a pain to
type out every single time.

72
00:03:26,660 --> 00:03:30,770
There are a bunch more details here
that you can read if you want.

73
00:03:30,770 --> 00:03:34,580
But the main point is that if your
name only consists of one word

74
00:03:34,580 --> 00:03:37,360
then spell out that word
in all lower case letters.

75
00:03:37,360 --> 00:03:40,470
Like cadence, speed,
gear, things like that.

76
00:03:40,470 --> 00:03:43,330
If the variable name consists of
more than one word then you want to

77
00:03:43,330 --> 00:03:45,940
capitalize the first letter
of each subsequent word but

78
00:03:45,940 --> 00:03:48,500
it needs to start with
a lower case first.

79
00:03:48,500 --> 00:03:50,700
So gear ratio is an example or
current gear.

80
00:03:51,710 --> 00:03:54,580
Our example of number of
coffees also follows this rule.

81
00:03:55,630 --> 00:03:59,560
The next part of the declaration is
Assignment operator or the = sign.

82
00:04:00,880 --> 00:04:04,440
In math class, you're used to seeing
things like one plus one equals two.

83
00:04:04,440 --> 00:04:07,070
But in Java,
equals means a different thing.

84
00:04:07,070 --> 00:04:10,270
Equal means assigning
a value to a variable.

85
00:04:10,270 --> 00:04:14,628
In this case, we're assigning the value
2 to the variable numberOfCoffees.

86
00:04:14,628 --> 00:04:16,029
Using our box metaphor,

87
00:04:16,029 --> 00:04:20,550
we put the number 2 inside the variable
that represents number of coffees.

88
00:04:20,550 --> 00:04:22,250
So whenever you see the equals sign,

89
00:04:22,250 --> 00:04:24,950
think about grabbing what's on
the right-hand side of it and

90
00:04:24,950 --> 00:04:28,570
putting it inside the variable
on the left-hand side.

91
00:04:28,570 --> 00:04:30,540
We already talked a little
bit about this, but

92
00:04:30,540 --> 00:04:33,790
this two here is the initial
value of the variable.

93
00:04:33,790 --> 00:04:36,530
So you put the 2 inside this variable.

94
00:04:36,530 --> 00:04:40,380
Remember that this initial
value must be of a valid type

95
00:04:40,380 --> 00:04:42,270
according to this data type.

96
00:04:42,270 --> 00:04:44,800
In this case only integers
are allowed in this variable.

97
00:04:44,800 --> 00:04:49,190
2 is a valid integer so it's okay for
it to go inside this variable.

98
00:04:50,500 --> 00:04:54,580
And last but not least,
we have this ; at the very end.

99
00:04:54,580 --> 00:04:56,620
So to summarize,
when you declare a variable,

100
00:04:56,620 --> 00:05:00,090
you need to specify the data type,
followed by the variable name,

101
00:05:00,090 --> 00:05:04,440
and then an equal sign, and then
an initial value, and then a semicolon.

102
00:05:05,510 --> 00:05:08,570
In this case, we're creating
a variable called numberOfCoffees.

103
00:05:08,570 --> 00:05:12,770
The data type is int, so only integers
can be stored in this variable.

104
00:05:12,770 --> 00:05:17,110
And we're assigning the value 2 to be
the initial value of this variable.

105
00:05:17,110 --> 00:05:19,910
Or you can change the variable name
according to the rules we talked about.

106
00:05:19,910 --> 00:05:24,070
And you can change the initial value
as long as it's the same data type.

107
00:05:24,070 --> 00:05:27,550
You can't change this data type,
it needs to be spelled int, I-N-T.

108
00:05:27,550 --> 00:05:30,240
We're going to be learning
about other data types as well,

109
00:05:30,240 --> 00:05:32,410
and those have to be
spelled a specific way.

110
00:05:33,530 --> 00:05:36,900
Now any time you need to use a variable,
just refer to it by it's name, and

111
00:05:36,900 --> 00:05:38,410
then it will be swapped out for

112
00:05:38,410 --> 00:05:41,320
the actual value later when
the app is actually running.

113
00:05:42,350 --> 00:05:43,490
Now I want you to go ahead and

114
00:05:43,490 --> 00:05:47,080
add these lines of code to your app,
please don't copy and past though,

115
00:05:47,080 --> 00:05:51,310
because I want you to practice typing
out, creating and using a variable.

116
00:05:51,310 --> 00:05:52,800
Then go ahead and
run the app on your phone.

117
00:05:52,800 --> 00:05:55,390
Make sure that when you hit the Order
button, this is what you see.

118
00:05:56,760 --> 00:05:59,770
After that, I want you to do
a little bit of experimenting.

119
00:05:59,770 --> 00:06:01,940
Try to assign a new initial
value to the variable.

120
00:06:03,160 --> 00:06:06,070
Then go ahead and
try to assign a new variable name.

121
00:06:06,070 --> 00:06:07,420
Instead of numberOfCoffees,

122
00:06:07,420 --> 00:06:09,930
try something else like quantity for
example.

123
00:06:11,290 --> 00:06:14,630
A common beginner mistake is to think
that you typed it out correctly

124
00:06:14,630 --> 00:06:17,650
because your eyes are scanning over
the whole thing really quickly.

125
00:06:17,650 --> 00:06:20,140
But if you look individually
at every single character you

126
00:06:20,140 --> 00:06:21,950
would notice that there
might be a problem.

127
00:06:23,020 --> 00:06:25,810
This will take you some time to
finish but take your time and

128
00:06:25,810 --> 00:06:29,050
pay close attentions to each
character that you type.

129
00:06:29,050 --> 00:06:32,650
If you run into problems,
try reading the error message.

130
00:06:32,650 --> 00:06:38,160
For example, this error message says
cannot resolve symbol numberOCoffees.

131
00:06:38,160 --> 00:06:41,160
Java doesn't recognize
what numberOCoffees is

132
00:06:41,160 --> 00:06:44,950
because the variable name was
actually numberOfCoffees.

133
00:06:44,950 --> 00:06:48,370
Hopefully you can figure out from
the error or you can hit undo and

134
00:06:48,370 --> 00:06:49,900
that sometimes resolves
the error as well.

135
00:06:51,080 --> 00:06:54,370
Or you can go back to code that you know
works, like the code that we gave you.

136
00:06:55,720 --> 00:06:57,780
When you're done,
check these boxes and continue.
