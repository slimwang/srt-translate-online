1
00:00:00,000 --> 00:00:02,000
Now we have our formal grammar for JavaScript,

2
00:00:02,000 --> 00:00:05,000
and previously we had a formal grammar for HTML,

3
00:00:05,000 --> 00:00:08,000
but there's a slight difference between the creative work of

4
00:00:08,000 --> 00:00:12,000
making up the grammar, thinking of the right one, designing your own language,

5
00:00:12,000 --> 00:00:16,000
making the new Esperanto, and checking utterances to see if they're valid.

6
00:00:16,000 --> 00:00:20,000
For example, we really want to accept expressions like

7
00:00:20,000 --> 00:00:24,000
1 + 2 + 3, but we really want to reject random sequences of tokens

8
00:00:24,000 --> 00:00:27,000
like this 1 + + + ) 3.

9
00:00:27,000 --> 00:00:29,000
This makes us super sad.

10
00:00:29,000 --> 00:00:33,000
It's not immediately clear how you check to see if an utterance is in a grammar.

11
00:00:33,000 --> 00:00:37,000
We can do it in our heads, but how would we write a computer program to do it?

12
00:00:37,000 --> 00:00:41,000
Remember, we're making a web browser, and we want to render as much valid

13
00:00:41,000 --> 00:00:45,000
HTML in JavaScript as we can, but web designers sometimes make errors,

14
00:00:45,000 --> 00:00:47,000
and we're going to need to know how to detect that,

15
00:00:47,000 --> 00:00:51,000
so this decision, is it in my formal language, or is it not?

16
00:00:51,000 --> 00:00:54,000
Am I super happy, or am I super sad is something that we're going to need

17
00:00:54,000 --> 00:00:56,000
our web browser, a computer program, to do.

18
00:00:56,000 --> 00:00:59,000
We're going to need some sort of automated technique.

19
00:00:59,000 --> 00:01:02,000
One approach--and this approach is super slow.

20
00:01:02,000 --> 00:01:04,000
We're talking snail speed here.

21
00:01:04,000 --> 00:01:09,000
Actually, I think I may claim this doodle is so good that I do not even need to label it.

22
00:01:09,000 --> 00:01:11,000
We'll just know it's a snail.

23
00:01:11,000 --> 00:01:16,000
One approach would be to enumerate all strings in the language of the grammar

24
00:01:16,000 --> 00:01:18,000
and then just check to see if yours is in there.

25
00:01:18,000 --> 00:01:22,000
If it is, you win. If not, your string must have been invalid.

26
00:01:22,000 --> 00:01:25,000
Unfortunately, we mentioned earlier that often a finite grammar

27
00:01:25,000 --> 00:01:30,000
has an infinite number of strings, so spending an infinite amount of time

28
00:01:30,000 --> 00:01:35,000
to enumerate them all is probably not feasible, but let's try it anyway.

29
00:01:35,000 --> 00:01:38,000
We're going to try this approach first, even though we have some intuition

30
00:01:38,000 --> 00:01:41,000
that it's not going to work out, and the reasons are, 1,

31
00:01:41,000 --> 00:01:46,000
it's instructive--to see why we need more complicated parsing techniques later--

32
00:01:46,000 --> 00:01:50,000
but also because it gives us a chance to learn a little bit more about Python

33
00:01:50,000 --> 00:01:54,000
and some cool programming techniques that will help you in this class and later on.

34
00:01:54,000 --> 00:01:56,000
Here are my power tools.

35
00:01:56,000 --> 00:01:58,000
This is a hammer, which I guess is technically not a power tool,

36
00:01:58,000 --> 00:02:03,000
but it's possible for me to draw it, and this is my--let's say--circular saw.

37
00:02:03,000 --> 00:02:05,000
It could also be an unhappy squid.

38
00:02:05,000 --> 00:02:08,000
This one definitely needs a label. Let's imagine circular saw.

39
00:02:08,000 --> 00:02:13,000
I'm going to introduce you to a new type of expression in Python, lambda,

40
00:02:13,000 --> 00:02:16,000
which is another way of defining functions.

41
00:02:16,000 --> 00:02:19,000
Here I've written Python code to make a function addtwo(x),

42
00:02:19,000 --> 00:02:21,000
which returns x + 2.

43
00:02:21,000 --> 00:02:25,000
You can put a Python function like this all on 1 line as long as it fits,

44
00:02:25,000 --> 00:02:28,000
and if I write addtwo(2), I expect to get 4 out.

45
00:02:28,000 --> 00:02:30,000
Here I've written something apparently completely different.

46
00:02:30,000 --> 00:02:36,000
I'm assigning to the variable mystery the result of a lambda expression.

47
00:02:36,000 --> 00:02:39,000
Here the word lambda is fixed. It's a terminal.

48
00:02:39,000 --> 00:02:43,000
And then you list some number of arguments, and then you have a colon,

49
00:02:43,000 --> 00:02:46,000
and then here you can put any expression you like.

50
00:02:46,000 --> 00:02:49,000
If I call mystery(3), I'm going to get out a 5

51
00:02:49,000 --> 00:02:52,000
because the interpretation of this is that lambda has made a function

52
00:02:52,000 --> 00:02:56,000
that takes x as its argument and returns x + 2.

53
00:02:56,000 --> 00:02:58,000
We just take this 3, and we substitute it in for x.

54
00:02:58,000 --> 00:03:01,000
3 + 2 is 5. 5 is what we get out.

55
00:03:01,000 --> 00:03:04,000
Mystery and addtwo are in fact the same,

56
00:03:04,000 --> 00:03:08,000
but now I can do cute things like saying pele gets mystery,

57
00:03:08,000 --> 00:03:12,000
and then if I write pele(4), I'm going to get 6.

58
00:03:12,000 --> 00:03:16,000
I can make up functions with this lambda expression and then assign them around.

59
00:03:16,000 --> 00:03:19,000
Pele was a Brazilian footballer, one of the best of all times.

60
00:03:19,000 --> 00:03:22,000
Lambda means make me a function,

61
00:03:22,000 --> 00:03:25,000
and it's very popular in a paradigm of programming

62
00:03:25,000 --> 00:03:27,000
known as functional programming.

63
00:03:27,000 --> 00:03:30,000
Functional programming sometimes contrasts with

64
00:03:30,000 --> 00:03:33,000
object oriented programming and imperative programming.

65
00:03:33,000 --> 00:03:36,000
You'll get a chance to learn about those in other classes.

66
00:03:36,000 --> 99:59:59,999
Lambda means make me a function. It's a lot like def.
