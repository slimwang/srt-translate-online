1
00:00:00,000 --> 00:00:02,000
Here I've continued my wishful thinking,

2
00:00:02,000 --> 00:00:06,000
and I've written out the complete grammar. I think I've got it right.

3
00:00:06,000 --> 00:00:10,000
Now all I'm missing is something that understands this format.

4
00:00:10,000 --> 00:00:13,000
Let's continue the wishful thinking and wish that we had

5
00:00:13,000 --> 00:00:16,000
a function that could take this format and turn it into something

6
00:00:16,000 --> 00:00:19,000
that we can then use in a parser.

7
00:00:19,000 --> 00:00:23,000
Here I have applied the wishful thinking and said I wish I had this function grammar

8
00:00:23,000 --> 00:00:28,000
that would give me this grammar G, and then I could use it to parse expressions.

9
00:00:28,000 --> 00:00:32,000
Now it's up to me to deliver on that promise or that wishful thinking.

10
00:00:32,000 --> 00:00:36,000
The first thing I should ask myself is what do I want this object G to look like?

11
00:00:36,000 --> 00:00:40,000
One good idea is that G could be a dictionary.

12
00:00:40,000 --> 00:00:43,000
The keys of the dictionary would be these things on the left-hand side,

13
00:00:43,000 --> 00:00:47,000
and then the values of each key would be some object corresponding

14
00:00:47,000 --> 00:00:49,000
to this representation on the right-hand side.

15
00:00:49,000 --> 00:00:52,000
I would have expression--something like this.

16
00:00:52,000 --> 00:00:56,000
Now all I've got to do is figure out what goes on the right-hand side.

17
00:00:56,000 --> 00:00:59,000
Here I've made a choice, and what I've said is,

18
00:00:59,000 --> 00:01:04,000
well, the right-hand side looks like it's always going to be a set of alternatives.

19
00:01:04,000 --> 00:01:06,000
The order matters, so I'm not going to make it into a set.

20
00:01:06,000 --> 00:01:10,000
I'm going to make it into a sequence of some kind, and let's make that a tuple.

21
00:01:10,000 --> 00:01:14,000
The right-hand side is always going to be a tuple of alternatives.

22
00:01:14,000 --> 00:01:17,000
It might be a tuple of length 1, but it's always going to be a tuple.

23
00:01:17,000 --> 00:01:21,000
Each element of that tuple is going to be a sequence--

24
00:01:21,000 --> 00:01:24,000
here a sequence of three items, here a sequence of one items.

25
00:01:24,000 --> 00:01:27,000
We'll represent sequences as lists.

26
00:01:27,000 --> 00:01:29,000
Here are the three items, and here is the one item.

27
00:01:29,000 --> 00:01:34,000
Every right-hand side is a tuple of lists where the lists are a sequence

28
00:01:34,000 --> 00:01:37,000
and each element of the list is a atom.

29
00:01:37,000 --> 00:01:42,000
The atoms can either be the name of a category that's defined on the left-hand side,

30
00:01:42,000 --> 00:01:46,000
or they can be a regular expression that's going to match actual characters

31
00:01:46,000 --> 00:01:49,000
in the input when we go to parse.

32
00:01:49,000 --> 00:01:53,000
Now, of course I could have typed in the whole grammar like this to begin with,

33
00:01:53,000 --> 00:01:56,000
but that would have been messy and error-prone and harder to read.

34
00:01:56,000 --> 00:02:01,000
I did myself a favor imagining the language I wanted and writing in that language,

35
00:02:01,000 --> 00:02:05,000
then figuring out how to get it into something the computer can understand.

36
00:02:05,000 --> 00:02:11,000
Now all I have to do is write this function grammar that translates from this format into this format.

37
00:02:11,000 --> 00:02:15,000
Fortunately, it's really easy to write this function. Here the whole thing is. Here's what I've done.

38
00:02:15,000 --> 00:02:19,000
I've initialized the grammar that I'm going to produce to be the empty dictionary.

39
00:02:19,000 --> 00:02:23,000
Then I've gone through the whole description--the description is the input--

40
00:02:23,000 --> 00:02:25,000
and split it up by lines.

41
00:02:25,000 --> 00:02:32,000
For each line I've split up each line by the arrow into left-hand side an a right-hand side.

42
00:02:32,000 --> 00:02:37,000
Then for each right-hand side I've split that up, using the or sign,

43
00:02:37,000 --> 00:02:40,000
into a list of alternatives of one or more.

44
00:02:40,000 --> 00:02:46,000
Then I've just said let's assign to the left-hand side--expression or term--a tuple,

45
00:02:46,000 --> 00:02:52,000
because that's what we're using for alternatives of the map of splitting up each alternative.

46
00:02:52,000 --> 00:02:54,000
The alternative here would be a string.

47
00:02:54,000 --> 00:02:58,000
It would be the string of everything starting from term and ending with expression.

48
00:02:58,000 --> 00:03:03,000
Then I just mapped the split function to it to split it up into individual atoms.

49
00:03:03,000 --> 00:03:07,000
That would split it up into a three-element list--term, plus or minus, and expression.

50
00:03:07,000 --> 00:03:09,000
That's all I need.

51
00:03:09,000 --> 00:03:15,000
This is a description of the grammar format, immediately implements it, and builds up a dictionary for us.

52
00:03:15,000 --> 00:03:18,000
I should say I've used here this utility function "split."

53
00:03:18,000 --> 00:03:22,000
It's just like string.split, except when it splits things up it strips the white space

54
00:03:22,000 --> 00:03:25,000
from each of the pieces.
