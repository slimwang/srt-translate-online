1
00:00:00,120 --> 00:00:04,050
And finally, the issue we want to consider is, what if we broadcast a stale

2
00:00:04,050 --> 00:00:08,740
result. Let's see what a stale result is. Okay, so what we have here is

3
00:00:08,740 --> 00:00:13,410
a situation when this divide here, is going to broadcast this result.

4
00:00:13,410 --> 00:00:16,840
It's going to broadcast that it's a reservation station 4, and broadcasting this

5
00:00:16,840 --> 00:00:20,640
result which is the result of the division between these two numbers. But

6
00:00:20,640 --> 00:00:25,630
if you look closely at the RAT. None of the registers is currently renamed to

7
00:00:25,630 --> 00:00:31,320
this instruction. So how can this happen? Well, one way of it happening is that,

8
00:00:31,320 --> 00:00:35,860
when this instruction was renamed let's say that F4 was renamed to be this

9
00:00:35,860 --> 00:00:40,250
result. So for a while this was saying RS4, but then another instruction came

10
00:00:40,250 --> 00:00:45,320
let's say RS2 [UNKNOWN]. And let's say that it was taking R4 and

11
00:00:45,320 --> 00:00:50,500
this, and writing again to the register 4. In that case, this would not say RS2,

12
00:00:50,500 --> 00:00:56,080
so simply this instruction no longer has any of the rad pointing to it. So

13
00:00:56,080 --> 00:01:00,000
what's going to happen when we broadcast this result. What's going to happen is,

14
00:01:00,000 --> 00:01:04,180
for the filling the reservation stations, it's going to be done normally.

15
00:01:04,180 --> 00:01:09,020
Pretty much every entry, for every instruction is going to be matched against

16
00:01:09,020 --> 00:01:13,070
the tag here, and wherever we match the tag, we're going to replace it

17
00:01:13,070 --> 00:01:18,200
with a value. So in this case we're going to write instead of this RS4 here,

18
00:01:18,200 --> 00:01:23,240
we're going to get minus 0.11. Okay? That's the only match, so we are done.

19
00:01:23,240 --> 00:01:28,090
The question is what happens with the register file and the RAT. In that case,

20
00:01:28,090 --> 00:01:35,070
in the RAT we do nothing. Why? Well because, the value from this instruction.

21
00:01:35,070 --> 00:01:38,540
Will never be used by any of the instructions that come later.

22
00:01:38,540 --> 00:01:42,100
The only reason why we needed the values in the register file is that,

23
00:01:42,100 --> 00:01:46,560
after this broadcast happens, all the instructions that need that value

24
00:01:46,560 --> 00:01:49,930
are going to get it from the register file, so the value had better be in there.

25
00:01:49,930 --> 00:01:53,190
Also, all the instructions that come in after this instruction are going to

26
00:01:53,190 --> 00:01:58,530
look here to see. What is the newest renamed value of this result?

27
00:01:58,530 --> 00:02:02,380
And they're going to find RS2, for example, for the, for this value.

28
00:02:02,380 --> 00:02:07,330
However, if this is RS4 and this is RS2, that means that there is

29
00:02:07,330 --> 00:02:12,000
a new instruction that is producing the value for this register. So basically,

30
00:02:12,000 --> 00:02:16,740
after this instruction here has been renamed. All the instructions that come and

31
00:02:16,740 --> 00:02:20,870
read F4 should actually get the new value from you know, from this. So

32
00:02:20,870 --> 00:02:25,670
this is basically the situation. We had a divide come first, for

33
00:02:25,670 --> 00:02:30,420
awhile everything that reads F4 should be getting the value from the divide.

34
00:02:31,420 --> 00:02:36,570
After the ad here, as renamed F4 to point to it. All the instructions that

35
00:02:36,570 --> 00:02:39,750
come after that, are supposed to use this value when they read R4.

36
00:02:39,750 --> 00:02:43,490
So, so this is entirely correct behavior. So pretty much what we're doing is,

37
00:02:43,490 --> 00:02:47,030
when we broadcast this and capture it here, we're giving it to any of

38
00:02:47,030 --> 00:02:50,180
the instructions that sit between this divide and this side that

39
00:02:50,180 --> 00:02:54,680
are actually using this result. But because the add has already been renamed.

40
00:02:54,680 --> 00:02:57,840
The instructions that we are renaming now and that we are getting results from

41
00:02:57,840 --> 00:03:01,660
the register file, those instructions actually need the value from the add, so

42
00:03:01,660 --> 00:03:05,220
they really don't need anything from, from this divide. So pretty much,

43
00:03:05,220 --> 00:03:10,430
if the tag that has been broadcast doesn't match any of the entries in the RAT.

44
00:03:10,430 --> 00:03:14,250
Then we don't update the RAT, and we dont update the register file. And

45
00:03:14,250 --> 00:03:17,810
it, it is perfectly fine because all of the instructions that possibly need this

46
00:03:17,810 --> 00:03:22,380
value, are already reservation stations. When you do quizzes and so

47
00:03:22,380 --> 00:03:25,600
on, be careful about this because it is so easy to you know,

48
00:03:25,600 --> 00:03:31,077
kind of just. Make the entry here point to the registar file. For example, here,

49
00:03:31,077 --> 00:03:34,240
you know, it would be incorrect to delete this because it doesn't match this.
