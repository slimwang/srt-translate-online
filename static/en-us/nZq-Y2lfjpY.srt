1
00:00:00,440 --> 00:00:02,440
I decided to write three functions.

2
00:00:02,440 --> 00:00:04,700
One to group the records by account_key.

3
00:00:04,700 --> 00:00:07,220
One to sum up all the entries for
each account_key.

4
00:00:07,220 --> 00:00:10,660
And one to print out summary statistics
like the mean and standard deviation.

5
00:00:11,990 --> 00:00:13,790
I named my function group_data.

6
00:00:13,790 --> 00:00:16,710
And I decided to make it take
the data as an argument, and

7
00:00:16,710 --> 00:00:20,800
return the dictionary mapping
account keys to lists of records.

8
00:00:20,800 --> 00:00:23,650
Now I could have left the function
like this, and made it always group

9
00:00:23,650 --> 00:00:27,110
by account key, but I wanted to
leave some flexibility there.

10
00:00:27,110 --> 00:00:29,850
So I added an extra argument
key name which would

11
00:00:29,850 --> 00:00:31,190
indicate the key to group by.

12
00:00:32,200 --> 00:00:35,090
Then I indented the code
I had previously, so

13
00:00:35,090 --> 00:00:36,660
it would be part of the function.

14
00:00:36,660 --> 00:00:39,890
And I changed the variable I was
looping over to be the input data.

15
00:00:39,890 --> 00:00:43,060
I also changed the field
name I was grouping by,

16
00:00:43,060 --> 00:00:46,500
to be the input key_name
rather than account_key.

17
00:00:46,500 --> 00:00:50,000
Then I changed each of the variable
names to be suitably generic.

18
00:00:50,000 --> 00:00:52,290
And finally return to the grouped data.

19
00:00:52,290 --> 00:00:55,500
Finally, I called this function
to create the same engagement by

20
00:00:55,500 --> 00:00:57,460
account dictionary
that I had previously.

21
00:00:58,490 --> 00:01:01,110
Now the calculation I asked you
to do for a number of lessons,

22
00:01:01,110 --> 00:01:04,180
will use this same engagement
by account dictionary, so

23
00:01:04,180 --> 00:01:07,400
it actually wasn't necessary to
write this function just yet.

24
00:01:07,400 --> 00:01:09,110
But I liked the idea of writing it,

25
00:01:09,110 --> 00:01:12,140
because this felt like a clean
interface for our function.

26
00:01:12,140 --> 00:01:15,290
It takes in some data and
it groups it by some key name.

27
00:01:15,290 --> 00:01:18,130
Later, you'll see that the library
pandas has some function that works

28
00:01:18,130 --> 00:01:20,360
pretty similarly to this one.

29
00:01:20,360 --> 00:01:24,270
Next, I moved on to the function to sum
up the entries for each account key.

30
00:01:24,270 --> 00:01:26,370
I named my function,
sum_grouped_items and

31
00:01:26,370 --> 00:01:30,320
I had it take as inputs the grouped
data and the field name to sum up.

32
00:01:30,320 --> 00:01:33,400
In this case, the field name
definitely needed to be an argument.

33
00:01:33,400 --> 00:01:36,560
Because I wanted to sum up both
the total minutes visited and

34
00:01:36,560 --> 00:01:38,230
the lessons completed.

35
00:01:38,230 --> 00:01:42,470
Again I indented the code I had
previously to be a part of the function.

36
00:01:42,470 --> 00:01:46,210
Next I changed the dictionary I was
looping over to be the input grouped

37
00:01:46,210 --> 00:01:51,740
data, and I changed the field name I was
summing up to be the input field name.

38
00:01:51,740 --> 00:01:55,730
Again, I updated each of the variable
names to be suitably generic.

39
00:01:55,730 --> 00:01:58,420
And finally I returned the summed data.

40
00:01:58,420 --> 00:02:02,090
Again, I called my function to recreate
the total minutes by account dictionary

41
00:02:02,090 --> 00:02:04,320
that I had created recently.

42
00:02:04,320 --> 00:02:07,480
Next I was ready to write a function to
print summary statistics about the data,

43
00:02:07,480 --> 00:02:09,038
such as the mean and standard deviation.

44
00:02:10,300 --> 00:02:11,100
I named my function,

45
00:02:11,100 --> 00:02:15,330
describe data and I had it take one
argument, the data to describe.

46
00:02:15,330 --> 00:02:19,040
Then I moved all these print
statements within the function, and

47
00:02:19,040 --> 00:02:22,750
I changed the data I was
summarizing to the argument data.

48
00:02:22,750 --> 00:02:24,940
I also moved the import statement
to the top of the cell.

49
00:02:26,030 --> 00:02:28,752
And I called my new function to
describe the total minutes data.

50
00:02:28,752 --> 00:02:33,830
When I re-ran this cell, I got the same
results as before which is good.

51
00:02:33,830 --> 00:02:36,960
Next I was ready to analyze
the lessons completed by account

52
00:02:36,960 --> 00:02:38,330
using the functions I'd just written.

53
00:02:39,360 --> 00:02:42,370
I started with the engagement
data grouped by account.

54
00:02:42,370 --> 00:02:46,010
And then I summed up the number of
lessons completed for each account key.

55
00:02:46,010 --> 00:02:48,240
Then I called the describe
data function and

56
00:02:48,240 --> 00:02:52,090
again, I needed to take the values of my
lessons completed by account dictionary

57
00:02:52,090 --> 00:02:55,020
before passing into
the describe data function.

58
00:02:55,020 --> 00:02:57,950
When I ran this cell,
I saw that the mean number of lessons

59
00:02:57,950 --> 00:03:00,480
completed in the first week
is about one and a half.

60
00:03:00,480 --> 00:03:01,920
With a standard deviation of three.

61
00:03:01,920 --> 00:03:06,520
It makes sense that there would be a lot
of variations, since some students might

62
00:03:06,520 --> 00:03:09,700
complete a lot more lessons in
the first week than others.

63
00:03:09,700 --> 00:03:13,430
The minimum number of lessons competed
is zero, which is not surprising.

64
00:03:13,430 --> 00:03:16,120
I certainly expected there would be
some students who didnâ€™t complete any

65
00:03:16,120 --> 00:03:17,630
lessons in their first week.

66
00:03:17,630 --> 00:03:20,930
And the maximum is 36,
which is quite some.

67
00:03:20,930 --> 00:03:23,570
Now you probably didn't write exactly
the same functions that I did,

68
00:03:23,570 --> 00:03:24,740
and that's fine.

69
00:03:24,740 --> 00:03:26,770
There's a lot of valid ways to do this.

70
00:03:26,770 --> 00:03:28,740
As long as you got the correct answers,
then you're good.
