1
00:00:00,000 --> 00:00:07,000
Delta debugging can be used to simplify other domains rather than just input.

2
00:00:07,000 --> 00:00:12,000
For instance, it can be used to simplify changes. Let me illustrate this.

3
00:00:12,000 --> 00:00:17,000
For instance, it can also be used to simplify changes to your code.

4
00:00:17,000 --> 00:00:20,000
When would such a thing be needed? Well, simple situation.

5
00:00:20,000 --> 00:00:25,000
This is you and this is your major web hosting service

6
00:00:25,000 --> 00:00:31,000
The building or infrastructure and lots and lots of third party open-source libraries

7
00:00:31,000 --> 00:00:35,000
and since you want to keep your service up-to-date

8
00:00:35,000 --> 00:00:42,000
with respect to security patches and everything, you have to update these libraries on regular intervals

9
00:00:42,000 --> 00:00:48,000
So you're getting patches that is large changes to a code base on regular intervals.

10
00:00:48,000 --> 00:00:52,000
This is the same as upgrading the libraries to the newest version

11
00:00:52,000 --> 00:00:58,000
and the changes between versions that is the patches, can easily contain 10,000s of source lines.

12
00:00:58,000 --> 00:01:03,000
Here comes in new patch, patch 3 also with 10,000 source code lines.

13
00:01:03,000 --> 00:01:09,000
All of a sudden, your infrastructure fails after applying the patch. What is the cause of the error.

14
00:01:09,000 --> 00:01:13,000
This is an instance of a problem that's more generally called,

15
00:01:13,000 --> 00:01:17,000
yesterday, my program worked, today it does not--why?

16
00:01:17,000 --> 00:01:21,000
Changed something--as a result of the change, something no longer works

17
00:01:21,000 --> 00:01:27,000
and you want to figure out what is it in that change that makes the program go wrong?

18
00:01:27,000 --> 00:01:31,000
Again, we can use delta debugging to simplify this.

19
00:01:31,000 --> 00:01:37,000
Assume the patch that causes the failure can be broken down into several subpatches.

20
00:01:37,000 --> 00:01:43,000
For instance, these 10,000 of changed lines would be different locations of the program

21
00:01:43,000 --> 00:01:49,000
and each of these locations that means a separate place to patch or a different subpatch.

22
00:01:49,000 --> 00:01:54,000
The idea would now be that maybe a subset of these subpatches

23
00:01:54,000 --> 00:01:57,000
would already suffice to create the error.

24
00:01:57,000 --> 00:01:59,000
In other words, we would simplify the patch to find a minimal subset of the patch that creates the failure.
