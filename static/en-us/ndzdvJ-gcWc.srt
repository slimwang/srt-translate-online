1
00:00:00,160 --> 00:00:03,740
So hopefully you were able to connect the rolling count bolt.

2
00:00:03,740 --> 00:00:05,689
And I'll just show you the solution, and

3
00:00:05,689 --> 00:00:08,350
probably more importantly the process that I took to do it.

4
00:00:09,690 --> 00:00:14,699
So in the first hint after creating your rolling count bolt.java file, and

5
00:00:14,699 --> 00:00:18,900
again, we are taking this code from the Apache Storm,

6
00:00:18,900 --> 00:00:21,780
storm starter rolling count bolt file.

7
00:00:21,780 --> 00:00:26,080
After Copying and Pasting this into our project, the first thing we need to do

8
00:00:26,080 --> 00:00:32,240
is change the package name from storm.starter.bolt to our package.

9
00:00:32,240 --> 00:00:35,310
As an example we can go to our tweet topology, and

10
00:00:35,310 --> 00:00:38,405
see that our package is udacity.storm.

11
00:00:38,405 --> 00:00:42,260
You can Copy and Paste that into our storm.starter.bolt.

12
00:00:42,260 --> 00:00:45,210
I'll leave this as a comment.

13
00:00:45,210 --> 00:00:48,990
Next, we see the import statement used in the original Storm starter,

14
00:00:48,990 --> 00:00:53,800
is storm.starter.tools, and there are three of them in the import statement.

15
00:00:53,800 --> 00:00:57,220
We created our tools folder under Storm, and so

16
00:00:57,220 --> 00:01:03,620
therefore, our import statements are going to be udocity.storm.tools.

17
00:01:03,620 --> 00:01:08,460
I'll just Copy and Paste these, I'll comment out the originals, and

18
00:01:08,460 --> 00:01:12,856
I'll simply change these to udocity.storm, and there we go.

19
00:01:12,856 --> 00:01:17,410
Well now what we need to do is copy it nthlastmodifiedtimetracker

20
00:01:17,410 --> 00:01:21,790
slidingwindowcounter and tuplehelpers into our tools folder, and

21
00:01:21,790 --> 00:01:25,930
we can find those with the path udocity.storm.tools.

22
00:01:25,930 --> 00:01:33,850
Therefore we come to storm/examples/storm-starter/scr/storm/starter and tools.

23
00:01:33,850 --> 00:01:37,510
Remember this is the structure of the storm.starter source code.

24
00:01:37,510 --> 00:01:43,330
And we see we have N, NthLastModifiedTimeTracker, SlidingWindowCounter, and

25
00:01:43,330 --> 00:01:49,590
we see in storm.tools, we have NthLastModifiedTimeTracker here.

26
00:01:49,590 --> 00:01:52,900
And we have SlidingWindowCounter here.

27
00:01:52,900 --> 00:01:55,000
Let's go ahead and Copy those two.

28
00:01:55,000 --> 00:01:58,070
And we create them in the appropriate place in Tools.

29
00:01:58,070 --> 00:01:58,585
Add a File.

30
00:01:58,585 --> 00:02:03,434
NthLastModifiedTimeTracker.java.

31
00:02:04,550 --> 00:02:06,080
And we'll Paste that in.

32
00:02:06,080 --> 00:02:12,900
Let's make sure to change our package name to udacity.storm.tools and

33
00:02:12,900 --> 00:02:17,110
we navigate back, come to our sliding window counter, Copy.

34
00:02:17,110 --> 00:02:18,810
Add a file in tools.

35
00:02:18,810 --> 00:02:23,031
Remember the name is called sliding window counter,

36
00:02:23,031 --> 00:02:26,610
SlidingWindowCounter.java, and paste.

37
00:02:26,610 --> 00:02:29,750
And just to make sure see our m.last modified and

38
00:02:29,750 --> 00:02:32,880
our sliding window counter in our tools folder.

39
00:02:32,880 --> 00:02:34,440
Next we come back to rolling count bull.

40
00:02:34,440 --> 00:02:39,010
And we see that storm.starter.util is our tuple helper.

41
00:02:39,010 --> 00:02:41,600
And we'll just put those in the tools as well.

42
00:02:41,600 --> 00:02:45,450
So we want starter, util, and TupleHelpers.

43
00:02:45,450 --> 00:02:48,810
We can Copy and Paste and complete the same exercise.

44
00:02:48,810 --> 00:02:50,230
We're going to tools.

45
00:02:50,230 --> 00:02:50,735
Add file.

46
00:02:50,735 --> 00:02:53,940
TupleHelpers.java.

47
00:02:53,940 --> 00:02:55,320
And we'll Copy and Paste that.

48
00:02:55,320 --> 00:02:57,485
And again, we remember to change this too.

49
00:02:57,485 --> 00:03:02,270
Udacity.storm tools.

50
00:03:02,270 --> 00:03:05,460
Make sure we do that with our sliding window counter too.

51
00:03:05,460 --> 00:03:07,710
Now taking this approach and we have three files.

52
00:03:07,710 --> 00:03:12,090
Let's run a Maven package and we see that we have an error, and

53
00:03:12,090 --> 00:03:15,240
the error is the slot based counter.

54
00:03:15,240 --> 00:03:18,220
And this means that we have at least one additional file to copy.

55
00:03:19,354 --> 00:03:23,730
Back in storm.starter.tools we find the SlotBasedCounter, and

56
00:03:23,730 --> 00:03:27,640
again we see that here where the symbol class slot based counter is missing.

57
00:03:27,640 --> 00:03:29,720
So, we open SlotBasedCounter.

58
00:03:29,720 --> 00:03:31,940
Complete the process, Copy.

59
00:03:31,940 --> 00:03:33,335
Let's add it, again, to tools.

60
00:03:33,335 --> 00:03:38,797
Add file, SlotBasedCounter.java.

61
00:03:38,797 --> 00:03:40,500
Copy, Paste.

62
00:03:40,500 --> 00:03:44,820
Change the package name, udacity.storm.tools.

63
00:03:44,820 --> 00:03:46,380
And let's Rerun.

64
00:03:46,380 --> 00:03:49,490
And here we need to be careful on another build failure, and

65
00:03:49,490 --> 00:03:52,260
I'm just leaving this in to show you the process that I went through.

66
00:03:52,260 --> 00:03:55,380
And here we see the variable TupleHelpers is missing, and

67
00:03:55,380 --> 00:04:00,560
It turns out that I have the same structure as udacity.storm.utill, but

68
00:04:00,560 --> 00:04:02,830
we don't have a utill folder.

69
00:04:02,830 --> 00:04:04,920
I put TupleHelpers, in tools.

70
00:04:04,920 --> 00:04:06,610
So, this needs to change.

71
00:04:06,610 --> 00:04:10,060
Well, Maven package again, and we have a build success.

72
00:04:10,060 --> 00:04:12,902
Finally, in step seven of the written instruction,

73
00:04:12,902 --> 00:04:16,540
we want to ignore the count-bolt and use the rolling count-bolt.

74
00:04:16,540 --> 00:04:21,310
Remember that we'll have to check the rolling-count-bolt for the correct syntax.

75
00:04:21,310 --> 00:04:24,800
To do this, let's Copy and Paste an existing bolt.

76
00:04:24,800 --> 00:04:28,850
Let's ignore the count-bolt, set the rolling-count-bolt.

77
00:04:28,850 --> 00:04:32,200
Component ID with the new rolling-count-bolt.

78
00:04:32,200 --> 00:04:35,110
Note that the default constructor for RollingCountBolt with no

79
00:04:35,110 --> 00:04:38,449
arguments takes in the DEFAULT_SLIDING_WINDOW_IN_SECONDS and

80
00:04:38,449 --> 00:04:40,644
the DEFAULT_EMIT_FREQUENCY_IN_SECONDS.

81
00:04:40,644 --> 00:04:44,880
The DEFAULT_SLIDING_WINDOW_IN_SECONDS takes in the number of window chunks,

82
00:04:44,880 --> 00:04:47,890
which is 5, times 60.

83
00:04:47,890 --> 00:04:51,740
We don't want to wait this long, so we see that the rolling count bolt

84
00:04:51,740 --> 00:04:57,330
that takes in arguments windowLengthInSeconds and emit frequency in seconds.

85
00:04:57,330 --> 00:05:00,200
Let's use this constructor in our topology.

86
00:05:00,200 --> 00:05:03,250
Here for the rolling count bolt in seconds, and

87
00:05:03,250 --> 00:05:08,630
let's set this as 30 seconds with an emit frequency of ten seconds.

88
00:05:08,630 --> 00:05:11,460
Finally we want to connect this to our report bolt.

89
00:05:11,460 --> 00:05:13,170
And again we can Copy.

90
00:05:13,170 --> 00:05:15,320
Comment out our old report bolt.

91
00:05:15,320 --> 00:05:18,510
Finally, once we connect our report bolt to the rolling count bolt,

92
00:05:18,510 --> 00:05:20,310
let's try to run this in Maven.

93
00:05:21,420 --> 00:05:23,080
Maven package.

94
00:05:23,080 --> 00:05:24,370
And we have a built success.

95
00:05:24,370 --> 00:05:26,685
Let's submit the job, storm jar target.

96
00:05:26,685 --> 00:05:30,280
Udacity.storm.TweetTopology.

97
00:05:31,430 --> 00:05:33,160
And I'll leave it on the terminal,

98
00:05:33,160 --> 00:05:37,300
simply because we see that we have a runtime error.

99
00:05:37,300 --> 00:05:42,210
Basically, the halting process that a worker died at the report bolt.

100
00:05:42,210 --> 00:05:45,340
And this is one of the difficulties of Storm that I found after

101
00:05:45,340 --> 00:05:46,640
working through it.

102
00:05:46,640 --> 00:05:51,570
In that Storm has runtime errors that are usually type based.

103
00:05:51,570 --> 00:05:54,410
So let's explore our rolling count bolt a bit more in

104
00:05:54,410 --> 00:05:56,630
detail to figure out what's happening.

105
00:05:57,660 --> 00:06:00,670
If we go to the report bolt which is the worker that's dying,

106
00:06:00,670 --> 00:06:05,270
we see that the report bolt expects a tuple with a string word

107
00:06:05,270 --> 00:06:08,900
that's labeled word and an integer count of count.

108
00:06:08,900 --> 00:06:10,980
Looking deeper at the rolling count bolt,

109
00:06:10,980 --> 00:06:14,510
we scroll down to the emit function and the declare output fields,

110
00:06:14,510 --> 00:06:19,210
first we see that declare field is declaring an object and a count.

111
00:06:19,210 --> 00:06:22,730
Again the report poll is expecting word and count.

112
00:06:22,730 --> 00:06:27,610
To make it more robust we could either change the report bolt to take in

113
00:06:27,610 --> 00:06:33,690
a string at location zero and an integer at location one,

114
00:06:33,690 --> 00:06:37,670
or we can change the field name to match the report pulled.

115
00:06:37,670 --> 00:06:43,950
I'm going to call object word, in order to match the report poll word and count.

116
00:06:43,950 --> 00:06:47,570
The next problem we have in the report poll is that the count,

117
00:06:47,570 --> 00:06:51,070
looking up to the emit function, is a long.

118
00:06:51,070 --> 00:06:56,500
Therefore, we need to change the long to an integer to match our report bolt.

119
00:06:56,500 --> 00:07:02,471
To do this we can use integer intCount equals count of not null,

120
00:07:02,471 --> 00:07:06,320
and returned count.intValue or null.

121
00:07:06,320 --> 00:07:08,370
And simply this is an if then statement and

122
00:07:08,370 --> 00:07:12,970
instead of returning count, we will return our in count.

123
00:07:12,970 --> 00:07:14,900
So therefore we have word and count.

124
00:07:14,900 --> 00:07:16,820
Word is as expected.

125
00:07:16,820 --> 00:07:20,600
We will get an object that's a string of the words that we're counting, and

126
00:07:20,600 --> 00:07:23,150
an integer of in count.

127
00:07:23,150 --> 00:07:25,770
Finally we just recheck our topology, and

128
00:07:25,770 --> 00:07:27,720
see that the rolling count bolt is connected.

129
00:07:28,860 --> 00:07:30,790
And we'll go back to maven package.

130
00:07:32,160 --> 00:07:33,250
Finally, we have a build success.

131
00:07:33,250 --> 00:07:37,500
And we'll submit storm jar target.

132
00:07:37,500 --> 00:07:39,340
And submit our TweetTopology.

133
00:07:39,340 --> 00:07:42,030
And we see now that the program continues to run we'll open up

134
00:07:42,030 --> 00:07:43,670
our visualization, and

135
00:07:43,670 --> 00:07:47,890
we see that the rolling count bolt is now driving the visualization.

136
00:07:47,890 --> 00:07:52,980
And we know the rolling counts of each word is being displayed.

137
00:07:52,980 --> 00:07:56,710
And finally we know that we can take the rolling comp bolt or other bolts that

138
00:07:56,710 --> 00:08:00,960
are open sourced or spouts word for that matter, and integrate them into our

139
00:08:00,960 --> 00:08:05,830
storm typology to be able to use other's codes and develop more efficiently.

140
00:08:05,830 --> 00:08:06,330
Great job.
