1
00:00:00,550 --> 00:00:06,010
So, L3 Microkernel shares to debunk the myth about Microkernel-based

2
00:00:06,010 --> 00:00:10,700
operating system structure. It goes beyond that, and it has a thesis for

3
00:00:10,700 --> 00:00:15,960
how operating systems should be structured. The first

4
00:00:15,960 --> 00:00:20,980
principle advocated by L3 is that the Microkernel should

5
00:00:20,980 --> 00:00:25,550
have minimal abstractions that includes support for address

6
00:00:25,550 --> 00:00:30,308
spaces, threads, interprocess communication,

7
00:00:30,308 --> 00:00:35,360
and generating unique IDs. Why do we need these abstractions in

8
00:00:35,360 --> 00:00:40,480
the microkernel? The argument is that these four abstractions

9
00:00:40,480 --> 00:00:45,280
that I mentioned, address space, threads, IPC, and

10
00:00:45,280 --> 00:00:50,810
UID, Our extractions that are needed by any subsystem that

11
00:00:50,810 --> 00:00:56,710
provides a functionality for end users in an operating system and therefore,

12
00:00:56,710 --> 00:00:59,330
the principle of optimizing the common

13
00:00:59,330 --> 00:01:02,850
case suggests that these abstractions should be

14
00:01:02,850 --> 00:01:05,430
part of any microkernel. The second

15
00:01:05,430 --> 00:01:08,890
thesis coming out of L3 microkernel experience

16
00:01:08,890 --> 00:01:12,370
is that microkernels are process specific

17
00:01:12,370 --> 00:01:15,860
in implementation. In other words, if you

18
00:01:15,860 --> 00:01:21,270
want an efficient implementation of microkernel, you have to take advantage of

19
00:01:21,270 --> 00:01:27,650
whatever the hardware is offering you. Which suggests that micro kernels by the

20
00:01:27,650 --> 00:01:33,210
very nature are non-portable if you want to focus on performance. Making a

21
00:01:33,210 --> 00:01:37,890
micro kernel processor independent is essentially

22
00:01:37,890 --> 00:01:41,070
sacrificing performance. So if you put these

23
00:01:41,070 --> 00:01:46,730
two principles together, what L3 is advocating is the right set of

24
00:01:46,730 --> 00:01:52,010
kernel abstractions and processor-specific implementation. If you do

25
00:01:52,010 --> 00:01:57,090
that, then you can build efficient processor-independent

26
00:01:57,090 --> 00:02:01,630
abstractions at the upper layers. All of the services

27
00:02:01,630 --> 00:02:06,800
that we associate in a monolithic kernel like

28
00:02:06,800 --> 00:02:08,930
a UNIX operating system such as,

29
00:02:10,100 --> 00:02:13,650
file system, network protocols, scheduling, memory

30
00:02:13,650 --> 00:02:20,480
management. They all can be implemented in a processor independent way on top

31
00:02:20,480 --> 00:02:26,030
of a microkernel that provides the right set of abstractions and exploits

32
00:02:26,030 --> 00:02:28,370
whatever the hardware gives in terms

33
00:02:28,370 --> 00:02:32,040
of capabilities to get an efficient processor

34
00:02:32,040 --> 00:02:35,100
specific implementation. That's the thesis of

35
00:02:35,100 --> 00:02:39,020
L3 microkernel, processor specific kernel and

36
00:02:39,020 --> 00:02:42,580
process the independent abstractions at higher

37
00:02:42,580 --> 00:02:44,560
layers of the operating system stack.
