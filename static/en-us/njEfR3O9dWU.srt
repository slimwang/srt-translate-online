1
00:00:00,000 --> 00:00:02,000
Let's restate our protocol.

2
00:00:02,000 --> 00:00:04,000
Alice starts by generating a large prime--

3
00:00:04,000 --> 00:00:07,000
we've seen how she can use that using the Rabin-Miller primality test--

4
00:00:07,000 --> 00:00:09,000
finding a primitive root--we haven't seen how to compute that,

5
00:00:09,000 --> 00:00:11,000
but there are efficient ways to do it--

6
00:00:11,000 --> 00:00:16,000
and selecting a random secret in the range 1 to the value of her prime-- -1.

7
00:00:16,000 --> 00:00:21,000
Then she computes the value of raising g to that power mod q,

8
00:00:21,000 --> 00:00:25,000
sends that to Bob, and I'm showing in this version of the program I'm sending

9
00:00:25,000 --> 00:00:27,000
bot the prime and the primitive root.

10
00:00:27,000 --> 00:00:31,000
Those could've been agreed on earlier in public. Nothing secret about them.

11
00:00:31,000 --> 00:00:35,000
Then Bob computes his value, selecting his random secret

12
00:00:35,000 --> 00:00:37,000
and computing yb.

13
00:00:37,000 --> 00:00:40,000
At the end they can both compute the same key,

14
00:00:40,000 --> 00:00:44,000
raising their respective values to the appropriate powers.

15
00:00:44,000 --> 00:00:48,000
So we've assumed so far an eavesdropper--a passive attacker--

16
00:00:48,000 --> 00:00:52,000
who can hear all the messages on this channel but can't disrupt the channel.

17
00:00:52,000 --> 00:00:54,000
What happens if we have an active attacker?

18
00:00:54,000 --> 00:00:58,000
An active attacker can change messages on this channel.

19
00:00:58,000 --> 00:01:02,000
instead of just intercepting them and listening to them--eavesdropping on the message--

20
00:01:02,000 --> 00:01:04,000
they can intercept and change the messages.

21
00:01:04,000 --> 99:59:59,999
Is this protocol secure against an active attacker who can modify messages in transit?
