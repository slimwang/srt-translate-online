1
00:00:00,012 --> 00:00:02,740
Okay, so here's my solution to that.

2
00:00:02,740 --> 00:00:07,277
I started by adding a constant in; K equals 16, like we talked about.

3
00:00:07,277 --> 00:00:10,380
So now if you think about this, we're going to have thread blocks,

4
00:00:10,380 --> 00:00:12,983
each of which is responsible for a tile in the matrix.

5
00:00:12,983 --> 00:00:15,204
Let's draw that.

6
00:00:15,204 --> 00:00:18,012
We'll be processing this matrix in blocks called tiles,

7
00:00:18,012 --> 00:00:21,384
each tile corresponding to a single in the thread block.

8
00:00:21,384 --> 00:00:23,331
Here's the new kernel I wrote.

9
00:00:23,331 --> 00:00:25,355
Very similar to the previous one.

10
00:00:25,355 --> 00:00:29,369
The difference is that now I need to compute the INJ values,

11
00:00:29,369 --> 00:00:31,175
not just the I values,

12
00:00:31,175 --> 00:00:34,835
and that computation involves using the block index as well as the thread index,

13
00:00:34,835 --> 00:00:39,509
so the block index times K plus the thread index plus x.x

14
00:00:39,509 --> 00:00:41,577
gives me my I value.

15
00:00:41,577 --> 00:00:43,784
Similarly, I get my J value from the Y,

16
00:00:43,784 --> 00:00:48,167
and so now the threads in my grid have an overall index, X and Y,

17
00:00:48,167 --> 00:00:52,081
as well as an index within their block, which is the thread index.

18
00:00:52,081 --> 00:00:54,225
So I am going to compute that X and Y,

19
00:00:54,225 --> 00:00:56,801
and that's going to correspond to the INJ of the output matrix,

20
00:00:56,801 --> 00:00:59,378
and that's the calculation that's going on here.

21
00:00:59,378 --> 00:01:03,167
And finally I do the same final calculation that I've done all along.

22
00:01:03,167 --> 00:01:09,457
I go and grab an element from the input matrix, equal to the coordinates IJ,

23
00:01:09,457 --> 00:01:12,041
and I write that into the output matrix,

24
00:01:12,041 --> 00:01:16,908
the location of the output matrix corresponding to element JI,

25
00:01:16,908 --> 00:01:19,088
and here's how I'm going to call it.

26
00:01:19,088 --> 00:01:22,990
Now I need to define the number of blocks and the number of threads,

27
00:01:22,990 --> 00:01:25,960
which is simply N over K, N over K.

28
00:01:25,960 --> 00:01:28,447
I'm being a little lazy here; you can tell.

29
00:01:28,447 --> 00:01:31,934
I'm assuming that N is a multiple of K.

30
00:01:31,934 --> 00:01:34,910
There's K by K threads in a block,

31
00:01:34,910 --> 00:01:38,808
and now when I launch, instead of launching a single thread, I launch blocks threads.

32
00:01:38,808 --> 00:01:41,150
N over K by N over K,

33
00:01:41,150 --> 00:01:45,509
and instead of launching 1,024 elements or N elements,

34
00:01:45,509 --> 00:01:48,544
I'm going to launch K by K elements per block.

35
00:01:48,544 --> 00:01:50,719
Let's go and compile and run this.

36
00:01:50,719 --> 00:01:52,725
Okay, now we're talking.

37
00:01:52,725 --> 00:01:55,753
So now we're down to about 0.67 milliseconds.

38
00:01:55,753 --> 00:01:57,528
Let's make a note.

39
00:01:57,528 --> 00:01:59,592
And thinking about what we've done here is

40
00:01:59,592 --> 00:02:02,523
we've now extracted the maximum amount of parallelism from the application, right?

41
00:02:02,523 --> 00:02:06,030
We started with a single serial code, 1 thread doing all the work.

42
00:02:06,030 --> 00:02:11,453
We switched to a code that used 1 thread per row of the input matrix,

43
00:02:11,453 --> 00:02:14,351
and now we're down to something that uses 1 thread per element.

44
00:02:14,351 --> 00:02:17,307
There's really no more parallelism that we can extract here,

45
00:02:17,307 --> 00:02:20,905
And you can see that increasing the parallelism has really helped us.
