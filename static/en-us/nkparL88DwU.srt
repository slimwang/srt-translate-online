1
00:00:00,220 --> 00:00:04,890
So to describe the ideas that are discussed in this distributed file

2
00:00:04,890 --> 00:00:09,770
system lesson, I have to introduce you to a lot of background

3
00:00:09,770 --> 00:00:15,010
technologies. The first background technology that I'm going to introduce you to

4
00:00:15,010 --> 00:00:19,830
is what is called RAID storage. RAID

5
00:00:19,830 --> 00:00:25,460
stands for redundant array of inexpensive disks.

6
00:00:25,460 --> 00:00:31,600
The idea is a given disk may have a certain IO bandwidth available. Now, if

7
00:00:31,600 --> 00:00:37,820
I can string together a number of disks in parallel, then cumulatively I can

8
00:00:37,820 --> 00:00:42,610
get much more IO bandwidth coming out of all of these disks. That's the

9
00:00:42,610 --> 00:00:46,210
idea of the RAID technology, which is

10
00:00:46,210 --> 00:00:50,650
redundant array of inexpensive disks. Since we have

11
00:00:50,650 --> 00:00:53,790
an array of disks, we are also increasing

12
00:00:53,790 --> 00:00:57,170
the probability of failures. And that is why

13
00:00:57,170 --> 00:00:59,740
in the RAID technology they also use an

14
00:00:59,740 --> 00:01:04,930
error correcting technology associated with RAID. And the basic

15
00:01:04,930 --> 00:01:10,650
idea, is that when you write a file, you're going to do the following: You take

16
00:01:10,650 --> 00:01:15,980
a file, let's say the file has four parts to it. What I'm going to do, is when

17
00:01:15,980 --> 00:01:21,160
I write this file, I'm going to write part one to this disk, part two to this

18
00:01:21,160 --> 00:01:23,970
disk, three to this and four to this.

19
00:01:23,970 --> 00:01:27,530
Because my data is on multiple disks, I'm also

20
00:01:27,530 --> 00:01:30,640
increasing the chance that there may be failures

21
00:01:30,640 --> 00:01:33,060
that can hurt me. And therefore, what we do

22
00:01:33,060 --> 00:01:37,870
is we compute a checksum for this particular

23
00:01:37,870 --> 00:01:41,280
data that I've stored on these disks and store

24
00:01:41,280 --> 00:01:44,720
that in a fifth disk. And this is

25
00:01:44,720 --> 00:01:46,800
what is called Error Correcting Code. So an Error

26
00:01:46,800 --> 00:01:50,540
Correcting Code allows errors to be detected when

27
00:01:50,540 --> 00:01:52,700
I read things from the disk and I see,

28
00:01:52,700 --> 00:01:54,790
oh, something is wrong I can correct it

29
00:01:54,790 --> 00:01:58,300
using this extra information that I'm writing on the

30
00:01:58,300 --> 00:02:02,000
fifth disk here. So that's the big picture

31
00:02:02,000 --> 00:02:05,920
of how striping a file to multiple disks works.

32
00:02:05,920 --> 00:02:08,157
Basically, what we do is we take a file

33
00:02:08,157 --> 00:02:11,640
and decide that if it is going to be striped

34
00:02:11,640 --> 00:02:14,710
over four disks, we stripe it on the four

35
00:02:14,710 --> 00:02:18,930
disks and we also write an error correcting code for

36
00:02:18,930 --> 00:02:21,060
the data that we have striped across these disks.

37
00:02:21,060 --> 00:02:23,070
So that if in fact there is an error that

38
00:02:23,070 --> 00:02:26,720
manifests itself in the future, with anyone of these disks

39
00:02:26,720 --> 00:02:31,100
that error can be corrected using this error correcting data

40
00:02:31,100 --> 00:02:34,100
that we have written to augment the original

41
00:02:34,100 --> 00:02:37,990
data. So failure protection is being achieved through this

42
00:02:37,990 --> 00:02:40,760
error correction code. That's the idea of striping

43
00:02:40,760 --> 00:02:44,762
a file in the RAID system, the drawback in

44
00:02:44,762 --> 00:02:46,690
the RAID technology is first of all the

45
00:02:46,690 --> 00:02:49,841
cost. The fact that we have to have multiple

46
00:02:49,841 --> 00:02:52,676
hardware drives in order to store a single

47
00:02:52,676 --> 00:02:56,299
file. And the second problem is what is called

48
00:02:56,299 --> 00:02:59,554
a small write problem and that is if my file

49
00:02:59,554 --> 00:03:03,646
is really really small, then I'm saying that a part

50
00:03:03,646 --> 00:03:06,901
of this file is going to be written on each one

51
00:03:06,901 --> 00:03:11,272
of these disks, and that's inefficient in terms of how

52
00:03:11,272 --> 00:03:14,472
you store data. And the reason why it is inefficient

53
00:03:14,472 --> 00:03:16,241
of course is the fact if it is a small

54
00:03:16,241 --> 00:03:19,230
file and I've striped it across multiple disks, in order

55
00:03:19,230 --> 00:03:21,365
to read this small file, I have to get data

56
00:03:21,365 --> 00:03:24,210
from all of these disks, and that's inefficient.

57
00:03:24,210 --> 00:03:27,810
And that's the thing that is detrimental about the

58
00:03:27,810 --> 00:03:31,190
hardware RAID in terms of handling a normal file

59
00:03:31,190 --> 00:03:34,500
system that may have a population of small files

60
00:03:34,500 --> 00:03:40,170
and large files, and so on and so forth. But the idea of having an array of

61
00:03:40,170 --> 00:03:43,300
disks to serve the file system is a good

62
00:03:43,300 --> 00:03:46,500
one, because it increases the overall I/O bandwidth that's

63
00:03:46,500 --> 00:03:50,370
available in the server. So, how can we solve the small write problem?
