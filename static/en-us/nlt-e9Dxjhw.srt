1
00:00:00,000 --> 00:00:06,448
Then we'll actually implement a fast compact primitive that operates on a single block of data.

2
00:00:06,448 --> 00:00:11,911
Recall that a compact inputs a true or false flag for

3
00:00:11,911 --> 00:00:19,555
every thread and a value for every thread, and outputs only those values which the input flags as true.

4
00:00:19,555 --> 00:00:25,179
So, in this problem, the strategy that we will do this scan is as follows.

5
00:00:25,179 --> 00:00:31,476
For step 1, within each warp, we will sum up the number of true flags.

6
00:00:31,476 --> 00:00:38,762
For step 2, we will do an exclusive sum scan of the per warp results.

7
00:00:38,762 --> 00:00:45,547
For step 3, we will do a exclusive sum scan of each warp, with the

8
00:00:45,547 --> 00:00:50,171
starting value of each warp equal to the corresponding output in step 2.

9
00:00:50,171 --> 00:00:56,432
For step 4, we will use the resulting address as scatter address into the

10
00:00:56,432 --> 00:01:03,908
output array for each thread for which the flag is true and we will scatter the value into the output array.

11
00:01:03,908 --> 00:01:08,610
As an example, consider the following, where we

12
00:01:08,610 --> 00:01:13,620
used a warp of size 4 to make the example easy to understand.

13
00:01:13,620 --> 00:01:16,996
And here's our input of 4 warps of 4 flags each.

14
00:01:16,996 --> 00:01:34,477
Step 1, I'll put 2241. Step 2, I'll put 0248. Step 3, I'll put 0112, 2233, 4567, 8999.

15
00:01:34,478 --> 00:01:41,234
And step 4 scatters the underlined elements to the following flags.

16
00:01:41,234 --> 00:01:45,772
And that's that, and I will follow them up with programming questions.
