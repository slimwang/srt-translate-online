1
00:00:00,000 --> 00:00:07,000
For this question you're asked to decide which of the procedures run in linear time.

2
00:00:07,000 --> 00:00:12,000
That is, the running time scales linearly with the length of the input.

3
00:00:12,000 --> 00:00:17,000
What we need to make sure is that there aren't too many steps.

4
00:00:17,000 --> 00:00:20,000
If we have a look at the first procedure,

5
00:00:20,000 --> 00:00:25,000
we initialize a variable--that doesn't take very much time.

6
00:00:25,000 --> 00:00:34,000
Then we have a for loop, and the for loop iterates through the input list here.

7
00:00:34,000 --> 00:00:42,000
If nothing happens in here, then it will iterate input list times.

8
00:00:42,000 --> 00:00:50,000
In order for it to be linear, the steps within the for loop must be in constant time.

9
00:00:50,000 --> 00:00:52,000
What are we doing?

10
00:00:52,000 --> 00:00:55,000
We're just comparing the variable maximum with an element,

11
00:00:55,000 --> 00:01:01,000
and then if the comparison is true, then we're setting maximum to be the element.

12
00:01:01,000 --> 00:01:04,000
This is just looking for the maximum element in the list.

13
00:01:04,000 --> 00:01:09,000
That's just a constant time operation there.

14
00:01:09,000 --> 00:01:16,000
So that is constant time, so procedure 1 does run in linear time.

15
00:01:16,000 --> 00:01:20,000
Now onto our second procedure. What's it doing?

16
00:01:20,000 --> 00:01:27,000
It's taking the first element of the input list and adding it onto sum.

17
00:01:27,000 --> 00:01:33,000
Sum starts at zero and then adds the first element of the input list,

18
00:01:33,000 --> 00:01:40,000
and then the input list is set to be the second element onwards in the list.

19
00:01:40,000 --> 00:01:46,000
Then it keeps summing. Now, how many steps does this take?

20
00:01:46,000 --> 00:01:51,000
Well, it just cuts off the first element each time in the list.

21
00:01:51,000 --> 00:01:54,000
That's the one that we've already added on.

22
00:01:54,000 --> 00:01:59,000
Then the list continues as long as it's not empty.

23
00:01:59,000 --> 00:02:06,000
This is actually performed the length of the input list times.

24
00:02:06,000 --> 00:02:09,000
One thing we always need to look at when we're doing this

25
00:02:09,000 --> 00:02:12,000
is to check whether they're constant time.

26
00:02:12,000 --> 00:02:18,000
You're told in the question that both of these are constant time,

27
00:02:18,000 --> 00:02:25,000
which means that the whole procedure runs in linear time.

28
00:02:25,000 --> 00:02:27,000
Now onto procedure 3.

29
00:02:27,000 --> 00:02:34,000
What it's doing is running through the list, checking each element against every other element.

30
00:02:34,000 --> 00:02:39,000
If you're not checking at element against itself and the two elements are the same,

31
00:02:39,000 --> 00:02:41,000
then return false.

32
00:02:41,000 --> 00:02:44,000
Otherwise, return true.

33
00:02:44,000 --> 00:02:47,000
It's checking whether there is a repeated element in the list.

34
00:02:47,000 --> 00:02:55,000
Now, looking at how it's done it, this inner loop here runs through all the values of j.

35
00:02:55,000 --> 00:03:02,000
In the worst case, when the input list of i is never equal to the input list j--

36
00:03:02,000 --> 00:03:07,000
when i and j are different--this will run through the whole list.

37
00:03:07,000 --> 00:03:14,000
This is going to go through length of input list times in the worst case.

38
00:03:14,000 --> 00:03:18,000
The inner loop for j--that's going to go through that many times.

39
00:03:18,000 --> 00:03:25,000
Now, it's going to go through that many times when i = 0 and when i = 1 and when i = 2 and so on.

40
00:03:25,000 --> 00:03:32,000
It's actually going to go through that inner loop length of input times.

41
00:03:32,000 --> 00:03:39,000
That's squared and if it's something squared, it's no longer linear.

42
00:03:39,000 --> 00:03:43,000
So this is not linear time.

43
00:03:43,000 --> 00:03:52,000
The correct answer was procedures 1 and 2 run in linear with respect to the input list,

44
00:03:52,000 --> 00:03:55,000
and procedure 3 does not.
