1
00:00:00,630 --> 00:00:03,500
It might feel a little weird that
we're going to be using Android Studio

2
00:00:03,500 --> 00:00:06,730
to load up a project that's only
partially about Android, but

3
00:00:06,730 --> 00:00:10,340
it'll make a ton more sense once we
talk about the Gradle build system.

4
00:00:10,340 --> 00:00:14,670
So how does a game turn from source code
in your editor into a form you can run?

5
00:00:14,670 --> 00:00:17,690
Well there's actually way more code
in a LibGDX game than just the code

6
00:00:17,690 --> 00:00:18,790
you're going to write.

7
00:00:18,790 --> 00:00:21,860
There's all the middleware that
defines the LibGDX APIs, and

8
00:00:21,860 --> 00:00:24,120
then there's all the code for
whatever backend you're building.

9
00:00:25,140 --> 00:00:28,380
To compile your game, all the relevant
code will need to be collected,

10
00:00:28,380 --> 00:00:29,980
compiled, and linked.

11
00:00:29,980 --> 00:00:33,300
Not only that, but your game will likely
feature resources like images and

12
00:00:33,300 --> 00:00:35,570
sounds, which will need to
be processed and packaged.

13
00:00:36,730 --> 00:00:39,900
Building an Android project
is even more complicated.

14
00:00:39,900 --> 00:00:42,590
As it needs to know about all
of your resources before any of

15
00:00:42,590 --> 00:00:44,150
the Java gets compiled.

16
00:00:44,150 --> 00:00:45,750
This is starting to sound
like a nightmare, right?

17
00:00:46,850 --> 00:00:47,460
Well, thankfully,

18
00:00:47,460 --> 00:00:50,470
the Gradle build system knows how
to handle pretty much all of this.

19
00:00:50,470 --> 00:00:53,740
A Gradle project is described in one or
more build.gradle files,

20
00:00:53,740 --> 00:00:57,560
which define what sort of project is
being built, where the code lives, and

21
00:00:57,560 --> 00:00:59,540
what external libraries are being used.

22
00:00:59,540 --> 00:01:01,590
Finally, how to package the output.

23
00:01:01,590 --> 00:01:05,840
Gradle also exposes a list of tasks that
define what Gradle knows how to do with

24
00:01:05,840 --> 00:01:07,850
the source files and
the resources it has.

25
00:01:08,990 --> 00:01:12,330
Full disclosure, the course I made
before this one was all about Gradle and

26
00:01:12,330 --> 00:01:13,910
how it makes Android builds awesome.

27
00:01:15,360 --> 00:01:17,750
So what does this have to
do with Android studio?

28
00:01:17,750 --> 00:01:21,180
Well, Gradle is very tightly
integrated into Android Studio.

29
00:01:21,180 --> 00:01:23,370
In fact,
Android Studio will happily import and

30
00:01:23,370 --> 00:01:25,710
build any project that uses Gradle.

31
00:01:25,710 --> 00:01:28,540
Android Studio maintains its own
internal model of what your project

32
00:01:28,540 --> 00:01:31,490
looks like, which is how it does
cool stuff like auto-importing and

33
00:01:31,490 --> 00:01:33,050
code completion.

34
00:01:33,050 --> 00:01:36,250
This also means that when it imports
a Gradle project, or when one of

35
00:01:36,250 --> 00:01:39,850
the .gradle files changes, Android
Studio has to synchronize its internal

36
00:01:39,850 --> 00:01:43,490
model of the project with the model
of the project as defined by Gradle.

37
00:01:43,490 --> 00:01:46,180
So, if you ever see Android Studio
complaining about having to

38
00:01:46,180 --> 00:01:47,210
sync with Gradle.

39
00:01:47,210 --> 00:01:47,810
That's what's going on.
