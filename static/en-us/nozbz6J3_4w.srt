1
00:00:00,300 --> 00:00:02,680
Let's start with what a request is.

2
00:00:02,680 --> 00:00:05,260
It's actually pretty useful to imagine the internet as a bunch of

3
00:00:05,260 --> 00:00:08,690
people who are just simply sending messages back and forth.

4
00:00:08,690 --> 00:00:10,840
For this example, I'll be the client,

5
00:00:10,840 --> 00:00:14,370
which means that I'm actually a browser like Chrome or Firefox.

6
00:00:14,370 --> 00:00:16,239
Jessica represents the internet.

7
00:00:16,239 --> 00:00:19,660
She is the middleman and will be passing information back and forth.

8
00:00:19,660 --> 00:00:23,410
And Ben here is the server, which means that he's computer dedicated to

9
00:00:23,410 --> 00:00:26,050
providing content to browsers like me.

10
00:00:26,050 --> 00:00:29,750
If I want something from Ben, I'll send a get request to him.

11
00:00:29,750 --> 00:00:33,310
A get request is a message that tells him who I am and what I want.

12
00:00:33,310 --> 00:00:37,778
So, got my message, Jessica takes it and passes it to Ben.

13
00:00:37,778 --> 00:00:42,520
Ben, the server, looks at my message and then sends back what I requested.

14
00:00:42,520 --> 00:00:43,970
This is called a response.

15
00:00:45,630 --> 00:00:49,150
I can open the response and then do something with it.

16
00:00:50,620 --> 00:00:53,170
In order for a website to open, it performs many requests for

17
00:00:53,170 --> 00:00:55,190
data, like Ben and I are doing right now.

18
00:00:56,990 --> 00:01:00,510
Most of the time, the response is critical for the page to load.

19
00:01:00,510 --> 00:01:06,010
For instance, I must have Ben's HTML to load the page and the CSS to lay it out.

20
00:01:06,010 --> 00:01:06,834
Thank you very much.

21
00:01:09,503 --> 00:01:12,184
When your browser makes a request synchronously, or

22
00:01:12,184 --> 00:01:16,070
without AJAX, it has to wait for responses before proceeding with the load.

23
00:01:17,160 --> 00:01:20,130
AJAX is special because it allows these types of requests

24
00:01:20,130 --> 00:01:23,300
asynchronously, which means that they can happen in the background without

25
00:01:23,300 --> 00:01:24,500
blocking the rest of the page load.

26
00:01:25,610 --> 00:01:28,550
Let's take this analogy just a little bit further.

27
00:01:28,550 --> 00:01:32,240
Let's imagine I send off a get request to Ben, but I've got some plans in

28
00:01:32,240 --> 00:01:35,720
mind for what I want to do with it when the response gets back.

29
00:01:35,720 --> 00:01:38,970
So, when I send off the request, I will take the instructions and

30
00:01:38,970 --> 00:01:40,550
set them aside for myself.

31
00:01:40,550 --> 00:01:42,730
And they'll patiently wait right here.

32
00:01:42,730 --> 00:01:46,160
And now, I'm free to go off and work on other tasks.

33
00:01:46,160 --> 00:01:50,170
When Ben's response eventually gets back, I'll open up the response,

34
00:01:50,170 --> 00:01:52,590
take a look at my instructions, and then do something with them.

35
00:01:53,620 --> 00:01:56,660
These instructions that I set aside are called a callback,

36
00:01:56,660 --> 00:01:58,970
in that I call them when I get a response back.
