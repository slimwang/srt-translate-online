1
00:00:00,463 --> 00:00:05,641
Okay, so for our next question,
I find it important that a full stack

2
00:00:05,641 --> 00:00:10,934
engineer is able to reason about
the entire stack of web development.

3
00:00:10,934 --> 00:00:15,632
So maybe we could go into as much
detail as possible about what happens

4
00:00:15,632 --> 00:00:17,667
when you visit Google.com.

5
00:00:17,667 --> 00:00:18,862
>> Okay.

6
00:00:18,862 --> 00:00:19,651
>> Just take it from the top.

7
00:00:19,651 --> 00:00:23,239
>> Cool, so starting, so I guess,
the user goes to their browser.

8
00:00:23,239 --> 00:00:26,206
They click the, I guess,
they type the url.

9
00:00:26,206 --> 00:00:28,006
>> Maybe, can you also just
write down the steps as you-

10
00:00:28,006 --> 00:00:29,805
>> Cool, okay, I'll dive in a stack.

11
00:00:29,805 --> 00:00:30,489
>> Okay, perfect!

12
00:00:30,489 --> 00:00:34,522
>> So we'll say at the top level,
we have, I guess,

13
00:00:34,522 --> 00:00:39,421
I'll have two kind of layers here,
we'll have two stacks,

14
00:00:39,421 --> 00:00:45,977
we'll have over here the user's PC,
or computer ,or smartphone, whatever.

15
00:00:45,977 --> 00:00:48,334
It's all kind of this
is actually similar.

16
00:00:48,334 --> 00:00:50,900
And then over here we'll
have a Google server.

17
00:00:50,900 --> 00:00:51,714
So.

18
00:00:58,297 --> 00:01:03,562
Cool, okay, so at the highest level
we have a user clicks a button.

19
00:01:03,562 --> 00:01:04,409
User clicks.

20
00:01:04,409 --> 00:01:06,171
>> Mm-hm.

21
00:01:06,171 --> 00:01:08,493
>> They typed in the URL,
they're clicking, and

22
00:01:08,493 --> 00:01:10,300
their browser starts doing things.

23
00:01:10,300 --> 00:01:11,042
>> Okay.

24
00:01:11,042 --> 00:01:14,468
>> So the browser needs to go to
Google.com and get some data to serve.

25
00:01:14,468 --> 00:01:17,165
So the first thing the browser needs
to know is, where is the server.

26
00:01:17,165 --> 00:01:21,160
So it takes that string and

27
00:01:21,160 --> 00:01:24,977
it says, Google.com.

28
00:01:24,977 --> 00:01:26,718
And usually you can turn
that into an IP address.

29
00:01:26,718 --> 00:01:31,739
So what their browser does is it goes,
I guess, it's network stack,

30
00:01:31,739 --> 00:01:36,090
and it makes an even DNS request
to get the IP address of this.

31
00:01:36,090 --> 00:01:39,560
So that's probably going to be cached
somewhere, either on their own computer,

32
00:01:39,560 --> 00:01:42,189
even, or their local network,
or they're ISP's network.

33
00:01:42,189 --> 00:01:48,373
So next, I guess, what's called
the DNS step, so now we have IP.

34
00:01:48,373 --> 00:01:54,619
Let's just call it a 8.8.8.8, because
that's one of google's IP addresses.

35
00:01:54,619 --> 00:01:57,428
Great, okay, so
now the browser has that.

36
00:01:57,428 --> 00:01:59,123
>> Quick question here,

37
00:01:59,123 --> 00:02:04,124
what if I want to make my own domain
that's not registered with DNS.

38
00:02:04,124 --> 00:02:10,497
Is it still going to work if I
make a fake, a fake domain .com?

39
00:02:10,497 --> 00:02:12,438
I just want to test it on my computer.

40
00:02:12,438 --> 00:02:16,565
>> Okay, so,
let's see if i understand the question.

41
00:02:16,565 --> 00:02:20,670
So you're saying what if the user
enters a domain that isn't valid?

42
00:02:20,670 --> 00:02:24,660
>> That isn't propagated through DNS,
let's say.

43
00:02:24,660 --> 00:02:26,940
>> So i guess we kind of go
through the same process.

44
00:02:26,940 --> 00:02:30,022
They would make a DNS request and
they would go through the chain.

45
00:02:30,022 --> 00:02:33,723
They would ask it's local DNS server,
do you have an IP address for this,

46
00:02:33,723 --> 00:02:37,739
and they'd be like, no, but I can ask my
next higher up server if it knows that.

47
00:02:37,739 --> 00:02:39,946
And that'll work upwards and
upwards, DNS is complicated.

48
00:02:39,946 --> 00:02:44,562
But there's a big hierarchy of servers
that kind of record the each domain

49
00:02:44,562 --> 00:02:48,219
of each sub domain for each,
the entire public internet.

50
00:02:48,219 --> 00:02:51,307
And it kind of work that entire
hierarchy until it realize that no one

51
00:02:51,307 --> 00:02:54,503
no one has this IP address and
then that'd return to your browser, and

52
00:02:54,503 --> 00:02:57,292
that's where you get a DNS
unresolve error in your browser.

53
00:02:57,292 --> 00:03:00,747
>> Okay, cool
>> Anyway you could

54
00:03:00,747 --> 00:03:03,045
use your Etsy host file.

55
00:03:03,045 --> 00:03:06,769
>> Sure, yes if you have like
a test server for instance, yeah.

56
00:03:06,769 --> 00:03:10,620
So what you could do is, you could make
a mapping between that domain name and

57
00:03:10,620 --> 00:03:12,425
the IP address of your test server,

58
00:03:12,425 --> 00:03:14,971
which would be a local host
in some port, I guess.

59
00:03:14,971 --> 00:03:19,420
So yeah,
that kind of bypassed the DNS look up.

60
00:03:19,420 --> 00:03:21,697
>> Perfect, all right, cool.

61
00:03:21,697 --> 00:03:22,205
>> Yeah, so

62
00:03:22,205 --> 00:03:26,336
once this process has happened we can
actually communicate with the server.

63
00:03:26,336 --> 00:03:27,091
>> Mm-hm.

64
00:03:27,091 --> 00:03:29,862
>> So
what will happen then is a get request,

65
00:03:29,862 --> 00:03:33,198
because that's kind of
the default HTTP action.

66
00:03:33,198 --> 00:03:37,714
Your browser will do if you're not,
if you're just going to a URL, so

67
00:03:37,714 --> 00:03:39,718
it'll get to this IP address.

68
00:03:39,718 --> 00:03:44,511
And what that does is it initiates kind
of the HTTP transaction or session

69
00:03:44,511 --> 00:03:49,867
between your computer, or where you are
on the network, and the Google server.

70
00:03:49,867 --> 00:03:53,300
>> Okay, and what port is it
connecting to the Google server at?

71
00:03:53,300 --> 00:03:55,950
>> Because we didn't specify one,
it's going to be port 80,

72
00:03:55,950 --> 00:03:58,494
because that's the default one for
the world wide web and

73
00:03:58,494 --> 00:04:01,531
that's what a browser uses for
the websites if you don't specify.

74
00:04:01,531 --> 00:04:06,324
>> Okay, does that happen when you go,
when you type in Google.com right now,

75
00:04:06,324 --> 00:04:08,406
it connects to port 80 for you.

76
00:04:08,406 --> 00:04:10,415
>> Correct, yeah, that's what,
on Google server,

77
00:04:10,415 --> 00:04:12,895
that's where they're running
the web servers, on port 80.

78
00:04:12,895 --> 00:04:16,250
>> Okay, what if I type in
HTTPS at the beginning.

79
00:04:16,250 --> 00:04:20,490
>> Okay, that's a good point,
HTTPS runs on a different port,

80
00:04:20,490 --> 00:04:22,295
I don't know it off hand.

81
00:04:22,295 --> 00:04:23,340
>> Okay.

82
00:04:23,340 --> 00:04:26,307
>> The difference there is just
it's on a different protocol,

83
00:04:26,307 --> 00:04:30,158
the server has to recognize that, so
that's why it runs on another port, so.

84
00:04:30,158 --> 00:04:33,033
>> Can you tell me the difference
between HTTP and HTTPS?

85
00:04:33,033 --> 00:04:36,539
>> Yeah, so it's really a wrapper
around the same protocol, but

86
00:04:36,539 --> 00:04:40,178
the idea is that before it begins
transmitting the information of

87
00:04:40,178 --> 00:04:41,845
the contents of the web page.

88
00:04:41,845 --> 00:04:42,366
>> Mm-hm.

89
00:04:42,366 --> 00:04:47,337
>> I guess, it kind of does two things,
it verifies the identity of the server.

90
00:04:47,337 --> 00:04:47,907
>> Okay.
>> And

91
00:04:47,907 --> 00:04:51,062
the way I bought a certificate from
a certifying authority ahead of time.

92
00:04:51,062 --> 00:04:51,818
>> Okay.

93
00:04:51,818 --> 00:04:54,359
>> And I guess also, so
it verifies your identity.

94
00:04:54,359 --> 00:04:54,895
>> Mm-hm.

95
00:04:54,895 --> 00:04:58,633
>> And it also encrypts the traffic
from their server to your PC.

96
00:04:58,633 --> 00:04:59,156
>> Okay.

97
00:04:59,156 --> 00:05:02,042
>> And so that's all negotiated
before the main, I guess,

98
00:05:02,042 --> 00:05:03,916
the main content delivery happens.

99
00:05:03,916 --> 00:05:04,577
>> I see.

100
00:05:04,577 --> 00:05:05,180
>> Yeah.

101
00:05:05,180 --> 00:05:06,097
>> I see, okay cool.

102
00:05:06,097 --> 00:05:10,699
So at some point we figure out whether
we're talking to the HTTPS port and

103
00:05:10,699 --> 00:05:14,402
the centered ATT port,
then we're making a GET request.

104
00:05:14,402 --> 00:05:14,972
>> Yeah.

105
00:05:14,972 --> 00:05:15,807
>> Right, okay, go ahead.

106
00:05:15,807 --> 00:05:20,727
>> Yeah, so I guess, we can get into
a lot of detail here, but what happens

107
00:05:20,727 --> 00:05:25,894
here is the, there's an entire network
stack that we're talking about.

108
00:05:25,894 --> 00:05:29,875
But your computer and the Google server
kind of, they initiate like a handshake,

109
00:05:29,875 --> 00:05:32,660
just so they can establish
a TCP session between the two.

110
00:05:32,660 --> 00:05:34,402
>> Can you tell me
what a TCP session is?

111
00:05:34,402 --> 00:05:39,394
>> Yeah, so what that is, is it's a way
that, I guess, previous developers have

112
00:05:39,394 --> 00:05:42,759
kind of simplified the process
of networking for us.

113
00:05:42,759 --> 00:05:45,561
Because in real life when you have
a network, you have like a bunch of

114
00:05:45,561 --> 00:05:48,177
cables and fiber optics, and
wireless links between things.

115
00:05:48,177 --> 00:05:48,838
>> Sure.

116
00:05:48,838 --> 00:05:53,129
>> And there's a lot of traction in
between us, the application developer,

117
00:05:53,129 --> 00:05:55,717
and the physical electrons moving in,
and,

118
00:05:55,717 --> 00:05:59,141
I guess, this TCP connection
is one of those attractions.

119
00:05:59,141 --> 00:06:03,474
So what it does for us is, it kind of,
on top of all that, the physical layer,

120
00:06:03,474 --> 00:06:07,377
as I just described, it gives us
a simple model of networking to use.

121
00:06:07,377 --> 00:06:11,126
Where every message that's sent from
server to server will reliably arrive,

122
00:06:11,126 --> 00:06:13,240
even if there's some
break in the network.

123
00:06:13,240 --> 00:06:17,084
The net would automatically, TCP will
resend it to make sure it gets there, so

124
00:06:17,084 --> 00:06:19,312
you don't have to care
about error control.

125
00:06:19,312 --> 00:06:20,475
>> I see.

126
00:06:20,475 --> 00:06:22,869
And it does other cool things too,
for instance,

127
00:06:22,869 --> 00:06:26,346
sometimes if you send two packets at
the same time, or the similar time,

128
00:06:26,346 --> 00:06:28,288
crazy things can happen in the routers.

129
00:06:28,288 --> 00:06:32,108
Maybe one gets there before the previous
one, it may happen out of order,

130
00:06:32,108 --> 00:06:34,026
TCP decides all that detail from us.

131
00:06:34,026 --> 00:06:37,980
So that the application it can just work
in a really simple model of the network,

132
00:06:37,980 --> 00:06:39,701
instead of the more complicated.

133
00:06:39,701 --> 00:06:41,223
>> Okay perfect, great, keep going.

134
00:06:41,223 --> 00:06:44,036
>> Yeah, so let's assume that
TCP is already been negotiated,

135
00:06:44,036 --> 00:06:45,235
we have that connection.

136
00:06:45,235 --> 00:06:49,107
So at that point, this string,
this GET query is like a string,

137
00:06:49,107 --> 00:06:53,505
that has the name of the resource
that it's requesting from the server.

138
00:06:53,505 --> 00:06:55,385
I guess,
requesting something like slash.

139
00:06:55,385 --> 00:06:55,966
>> Mm-hm.

140
00:06:55,966 --> 00:06:59,236
>> So, this point,
we're not on the user's PC anymore,

141
00:06:59,236 --> 00:07:03,411
the data's going through the network,
and now, it's a service job to

142
00:07:03,411 --> 00:07:07,118
understand this response so
it can serve the correct content.

143
00:07:07,118 --> 00:07:07,697
>> Hm-hm.

144
00:07:07,697 --> 00:07:13,393
>> So, Google server, it gets this HTTP
message, and says, we have a server,

145
00:07:13,393 --> 00:07:18,363
I mean, client, that's come to us,
it's asked us for this content.

146
00:07:18,363 --> 00:07:22,709
And so at this point, well,
I don't actually know how Google works

147
00:07:22,709 --> 00:07:27,224
internally, but there's probably
complicated things happening.

148
00:07:27,224 --> 00:07:31,917
So even before the server, Google
probably has some sort of load balancing

149
00:07:31,917 --> 00:07:36,022
servers, or some kind of edge gateways,
or something going on.

150
00:07:36,022 --> 00:07:36,844
>> Yeah, definitely.

151
00:07:36,844 --> 00:07:41,469
>> So, I guess,
maybe even on top of the server

152
00:07:41,469 --> 00:07:45,971
there's some edge of Google's network.

153
00:07:45,971 --> 00:07:50,113
And what that will do is, that will,
depending on where you are physically

154
00:07:50,113 --> 00:07:54,407
located, this DNS query will kind of
route you to the nearest Google server.

155
00:07:54,407 --> 00:07:56,325
>> Okay.
>> Or the nearest Google network, or

156
00:07:56,325 --> 00:07:56,833
whatever.

157
00:07:56,833 --> 00:08:00,760
And so once you're in
Google's network at least,

158
00:08:00,760 --> 00:08:04,334
you get to an IP address
in Google's network.

159
00:08:04,334 --> 00:08:08,494
It will determine which content server
is available as the lowest loader, or

160
00:08:08,494 --> 00:08:11,703
is closest to you,
whoever can respond to you the fastest.

161
00:08:11,703 --> 00:08:12,482
>> Mm-hm.

162
00:08:12,482 --> 00:08:15,173
>> So this will route you
to the actual server,

163
00:08:15,173 --> 00:08:18,020
who will like actually
fulfill this request.

164
00:08:18,020 --> 00:08:20,720
So in a way, that finally happens,

165
00:08:20,720 --> 00:08:24,959
a whole bunch of this networking
happens in basically.

166
00:08:24,959 --> 00:08:29,189
Yeah, so now we're finally on an actual
server, has the actual know HTML and

167
00:08:29,189 --> 00:08:31,218
things it's going to return to you.

168
00:08:31,218 --> 00:08:36,352
So now I guess, a running code on
the server on this web server and

169
00:08:36,352 --> 00:08:41,010
so that'll, it's job is to
construct an HTTP response,

170
00:08:41,010 --> 00:08:46,929
which is kind of like you sent it a GET
and it will respond with its response.

171
00:08:46,929 --> 00:08:53,091
So that will have some headers,
it'll say, 200, meanings of success.

172
00:08:53,091 --> 00:08:54,681
This is a good URL you chose to come to.

173
00:08:54,681 --> 00:08:55,332
>> Mm-hm.

174
00:08:55,332 --> 00:08:57,929
>> And then there'll be some
other like header details,

175
00:08:57,929 --> 00:08:59,400
like how big this response is.

176
00:08:59,400 --> 00:09:02,510
And then we get to the meat of
the response which is just like

177
00:09:02,510 --> 00:09:03,280
an HTML page.

178
00:09:03,280 --> 00:09:03,999
>> Okay.

179
00:09:03,999 --> 00:09:09,166
>> So, and I guess depending on how
Google works like it will like see,

180
00:09:09,166 --> 00:09:13,803
if it like recognizes that
you're a user that's logged in.

181
00:09:13,803 --> 00:09:17,928
It might format this differently,
it might tell you your news articles or

182
00:09:17,928 --> 00:09:21,399
your default background picture
if it's Gmail or whatever.

183
00:09:21,399 --> 00:09:22,106
>> Mm-hm.

184
00:09:22,106 --> 00:09:25,585
>> But the server,
it will just construct your response and

185
00:09:25,585 --> 00:09:29,283
then it will use that
pre-established HTTP connection that

186
00:09:29,283 --> 00:09:29,909
it has
>> And

187
00:09:29,909 --> 00:09:33,659
send it just back through
that tired at work stack and

188
00:09:33,659 --> 00:09:38,022
kind of reversing the direction
until you're a happy user.

189
00:09:38,022 --> 00:09:39,986
Did I leave out any of the details?

190
00:09:39,986 --> 00:09:45,198
>> Maybe once the browser gets the HTML,
how does it become the pixels we see?

191
00:09:45,198 --> 00:09:46,078
>> Okay, yeah.

192
00:09:46,078 --> 00:09:50,504
So that's in between the response and
the happy user.

193
00:09:50,504 --> 00:09:51,224
Okay?

194
00:09:51,224 --> 00:09:56,708
So i guess, this issue to your
response is basically a big string.

195
00:09:56,708 --> 00:10:01,863
And so the browser needs to turn that
string like you said, into pixels.

196
00:10:01,863 --> 00:10:06,327
So HTML is very well specified
language and then CSS and all too, so

197
00:10:06,327 --> 00:10:11,112
the browser has are rendering engine
where it takes in that string, And

198
00:10:11,112 --> 00:10:14,964
it is engineered very well to
quickly parse that string.

199
00:10:14,964 --> 00:10:18,888
And constructs the interface elements,
like paragraph tags and images.

200
00:10:18,888 --> 00:10:19,713
>> Mm-hm.

201
00:10:19,713 --> 00:10:22,592
>> And I guess i glossed over a detail.

202
00:10:22,592 --> 00:10:23,832
Like, earlier,
when it responds with this.

203
00:10:23,832 --> 00:10:24,992
HTML page.

204
00:10:24,992 --> 00:10:28,545
It'll also make multiple responses,
probably, like the different images or

205
00:10:28,545 --> 00:10:29,454
assets on the page.

206
00:10:29,454 --> 00:10:31,381
So all those get
returned to the browser.

207
00:10:31,381 --> 00:10:33,423
And it recognizes all these things and
it's like okay,

208
00:10:33,423 --> 00:10:35,085
let's make a coherent
document out of this.

209
00:10:35,085 --> 00:10:35,600
>> Mm-hm.

210
00:10:35,600 --> 00:10:37,222
>> And
that's the job of the rendering engine.

211
00:10:37,222 --> 00:10:38,265
>> Mm-hm.
>> I've never written

212
00:10:38,265 --> 00:10:40,471
a rendering engine, though, so
the specifics are beyond me.

213
00:10:40,471 --> 00:10:43,819
But yeah the browser just
get's the information and

214
00:10:43,819 --> 00:10:46,949
like parses the responses and
makes the images.

215
00:10:46,949 --> 00:10:48,250
>> Okay, alright perfect.

216
00:10:48,250 --> 00:10:49,340
That sounds great.
