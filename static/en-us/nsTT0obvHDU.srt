1
00:00:00,090 --> 00:00:03,840
So now let's talk about how
password-based authentication

2
00:00:03,840 --> 00:00:04,920
can be implemented.

3
00:00:04,920 --> 00:00:07,860
So we know the evidence that's
going to be provided is

4
00:00:07,860 --> 00:00:10,140
a password user is going to supply,

5
00:00:10,140 --> 00:00:14,240
and then they're going to type or
touch the screen or something like that.

6
00:00:14,240 --> 00:00:18,330
And that's going to follow,
you're telling the system who they are,

7
00:00:18,330 --> 00:00:21,070
which typically they
provide the user ID.

8
00:00:21,070 --> 00:00:25,590
So they tied their user ID and
password, let's say.

9
00:00:25,590 --> 00:00:28,510
And the system now has this task of,

10
00:00:28,510 --> 00:00:33,460
well, how do I know that this is
the correct password for this user, and

11
00:00:33,460 --> 00:00:37,100
if it is the correct password,
authentication will be successful.

12
00:00:37,100 --> 00:00:39,840
So how can we perform this check?

13
00:00:39,840 --> 00:00:43,400
So you would say well an obvious
solution to this problem is that

14
00:00:43,400 --> 00:00:48,010
we ask users to share their
passwords with the system.

15
00:00:48,010 --> 00:00:52,540
So the first time this is called
registration or enrollment or

16
00:00:52,540 --> 00:00:55,120
some out of band method by which.

17
00:00:55,120 --> 00:00:58,010
Of course the system has to know
something about your secret.

18
00:00:58,010 --> 00:01:00,170
If it doesn't, it can't check it.

19
00:01:00,170 --> 00:01:07,160
So let's say the secret is password so
we have a set of users with passwords.

20
00:01:07,160 --> 00:01:09,270
And the system stores those passwords.

21
00:01:09,270 --> 00:01:13,750
It's trusted system we,
let's say, give it our password.

22
00:01:13,750 --> 00:01:17,640
And if we do that, it's not a good idea
and actually we won't have to do that.

23
00:01:17,640 --> 00:01:22,510
But if you do that than how can we do
that check that we're talking about.

24
00:01:22,510 --> 00:01:24,585
I will see it's pretty straight forward.

25
00:01:24,585 --> 00:01:29,530
All we have to do is impair the type
password with the one that's stored.

26
00:01:29,530 --> 00:01:31,070
So where do we store it?

27
00:01:31,070 --> 00:01:32,860
We have to store it in a file.

28
00:01:32,860 --> 00:01:36,080
People come back, you turn the computer
off and then come back and

29
00:01:36,080 --> 00:01:39,210
login so
this information has to persist.

30
00:01:39,210 --> 00:01:41,570
Your computer multiple sessions, so

31
00:01:41,570 --> 00:01:44,260
persistent information
is stored in files.

32
00:01:44,260 --> 00:01:49,640
One thing we should be smart enough to
do is that only the trusted root or

33
00:01:49,640 --> 00:01:52,430
admin be able to read this file.

34
00:01:52,430 --> 00:01:56,870
The login program is going to run on
behalf of them and they are the ones

35
00:01:56,870 --> 00:02:00,875
that are going to check and somebody's
trying to authenticate themselves.

36
00:02:00,875 --> 00:02:06,085
So this file should be made readable
only by the admin or the root.

37
00:02:06,085 --> 00:02:09,305
The most user we have in the system.

38
00:02:09,305 --> 00:02:11,215
But what if we make a mistake?

39
00:02:11,215 --> 00:02:14,045
What if permissions are set incorrectly?

40
00:02:14,045 --> 00:02:16,895
The permissions are set incorrectly
somebody else may be able to

41
00:02:16,895 --> 00:02:18,238
read that file.

42
00:02:18,238 --> 00:02:20,130
And if they're able to read that file,

43
00:02:20,130 --> 00:02:24,110
they're able to learn everyone's
password, which is not a good thing.

44
00:02:24,110 --> 00:02:26,880
Even if the permissioners are set right,

45
00:02:26,880 --> 00:02:30,640
why should an admin be able
to know all the passwords?

46
00:02:30,640 --> 00:02:34,210
Okay, every user's password,
if they know it, there's no reason for

47
00:02:34,210 --> 00:02:38,670
them to have access to passwords
of all users in the system.

48
00:02:38,670 --> 00:02:41,260
And the one reason we don't
want to have that is that in

49
00:02:41,260 --> 00:02:45,700
case you have security breach,
the passwords are going to be exposed,

50
00:02:45,700 --> 00:02:48,870
everyone's password is going
to be exposed to that hacker.

51
00:02:48,870 --> 00:02:54,230
So it's clear that something about the
secret has to be shared with the system,

52
00:02:54,230 --> 00:02:56,860
the password has to be
shared with the system.

53
00:02:56,860 --> 00:02:59,490
But storing those secrets in a file,

54
00:02:59,490 --> 00:03:02,390
even if you do access control,
is not a good idea.

55
00:03:02,390 --> 00:03:04,020
So can we do better?

56
00:03:04,020 --> 00:03:06,430
So indeed,
we can actually do better, and

57
00:03:06,430 --> 00:03:10,180
the way to think about that is that we
don't store the passwords themselves,

58
00:03:10,180 --> 00:03:13,580
but store something that
is derived from it.

59
00:03:13,580 --> 00:03:19,150
It's not the actual password But
something that is possible to

60
00:03:19,150 --> 00:03:24,600
get hold of only if you had access
to the password at some point.

61
00:03:24,600 --> 00:03:27,280
Or at least in the beginning or
the enrollment time or

62
00:03:27,280 --> 00:03:31,890
when the password was changed and then
you're not storing the full password but

63
00:03:31,890 --> 00:03:33,910
just something derived from it.

64
00:03:33,910 --> 00:03:37,560
The question is if you're storing
something derived from what is it and

65
00:03:37,560 --> 00:03:38,760
how do you use it.

66
00:03:38,760 --> 00:03:40,930
The result that we
derived from password.

67
00:03:40,930 --> 00:03:44,540
One way to do that is to use what
is called a one-way function.

68
00:03:44,540 --> 00:03:46,630
This called are called hash functions.

69
00:03:46,630 --> 00:03:51,250
Hash functions are widely used to
take an arbitrary length of input and

70
00:03:51,250 --> 00:03:57,820
produce a fixed size output that
is fairly unique to the input.

71
00:03:57,820 --> 00:04:02,380
And one-way basically says that it's
easy to compute given the input of

72
00:04:02,380 --> 00:04:05,020
the hash value is easy to compute, but

73
00:04:05,020 --> 00:04:09,420
it's very hard to compute the input
if you just had the hash value.

74
00:04:09,420 --> 00:04:14,170
So such functions exist, we're going to
talk about some examples of those.

75
00:04:14,170 --> 00:04:17,450
So thing to remember here is that

76
00:04:17,450 --> 00:04:22,089
given a password it produced
a hash value of that password.

77
00:04:22,089 --> 00:04:26,350
And going from password to hash value
is straightforward going in the other

78
00:04:26,350 --> 00:04:30,190
direction which is from hash value
to the password is really hard.

79
00:04:30,190 --> 00:04:33,530
So what you're going to do is you're
going to use a function like that so

80
00:04:33,530 --> 00:04:37,190
rather than storing the password we're
going to store something derived

81
00:04:37,190 --> 00:04:37,920
from it.

82
00:04:37,920 --> 00:04:41,580
In particular, we're going to store
a hash value, and that's what we're

83
00:04:41,580 --> 00:04:46,730
going to have, and even the hash values
that we have, those have to be stored in

84
00:04:46,730 --> 00:04:50,850
a file as earlier we were talking
we're storing the passwords in a file.

85
00:04:50,850 --> 00:04:56,380
Even this file should be readable only
for the perlist user or the admin user

86
00:04:56,380 --> 00:04:59,910
that we're talking about on whose behalf
the log in program is going to run.
