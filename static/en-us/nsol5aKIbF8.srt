1
00:00:00,270 --> 00:00:03,130
Now, I'm going to show
you some pseudo code for

2
00:00:03,130 --> 00:00:08,109
how you might implement this API for
a linear regression learner.

3
00:00:08,109 --> 00:00:10,730
So we define our class as LimRegLearner.

4
00:00:10,730 --> 00:00:15,300
And this first method init with
underscores on either side

5
00:00:15,300 --> 00:00:16,690
is the constructor.

6
00:00:16,690 --> 00:00:18,960
The constructor is really easy.

7
00:00:18,960 --> 00:00:23,030
For the linear regression learner,
we actually don't have to do anything

8
00:00:23,030 --> 00:00:26,040
when we instantiated
an instance of the learner.

9
00:00:26,040 --> 00:00:29,540
So we just use pass,
which means do nothing.

10
00:00:29,540 --> 00:00:37,200
Our training method takes an x and a y,
and remember, x can be multidimensional.

11
00:00:37,200 --> 00:00:39,540
And what it's doing,
it should take this x data and

12
00:00:39,540 --> 00:00:42,840
this y data and fit a line to it.

13
00:00:42,840 --> 00:00:45,470
So it's trying to find an m and a b.

14
00:00:45,470 --> 00:00:50,620
So the job of the train method is
to find that linear equation or

15
00:00:50,620 --> 00:00:53,900
the parameters for
that linear equation, m and b.

16
00:00:53,900 --> 00:00:57,306
So here on the left-hand side,

17
00:00:57,306 --> 00:01:02,950
we have self.m which means the m
goes to the local instance,

18
00:01:02,950 --> 00:01:08,340
and b to the local instance, and
you're allowed to use any number of

19
00:01:08,340 --> 00:01:13,820
linear regression algorithms at your
disposal as part of SciPy and NumPy.

20
00:01:13,820 --> 00:01:19,430
So go Google and
find which one you want to use here and

21
00:01:19,430 --> 00:01:24,040
just stuff it's output into m and b.

22
00:01:24,040 --> 00:01:30,270
Finally, query is passed in x and it's
supposed to predicted y given that x.

23
00:01:30,270 --> 00:01:33,250
And remember,
this is potentially a list of x's and

24
00:01:33,250 --> 00:01:34,690
it can also be multidimensional.

25
00:01:35,720 --> 00:01:37,530
Anyways, it's very simple.

26
00:01:37,530 --> 00:01:44,730
You just multiply that x times m and
add b and return y, boom, that's it.

27
00:01:44,730 --> 00:01:48,694
In short, this is literally how
short your LinRegLearner can be.

28
00:01:48,694 --> 00:01:54,360
Now, the k and
n API is going to look exactly the same.

29
00:01:54,360 --> 00:01:59,170
And the reason for that is if we have
the same API, we can easily mix and

30
00:01:59,170 --> 00:02:02,800
match, and try training and

31
00:02:02,800 --> 00:02:07,070
querying with the different
algorithms and see how they compare.

32
00:02:07,070 --> 00:02:10,199
Okay, that is it for regression.

33
00:02:10,199 --> 00:02:11,590
I'll see you at the next lesson.

34
00:02:11,590 --> 00:02:12,380
Have a great day.
