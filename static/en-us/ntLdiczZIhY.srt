1
00:00:00,340 --> 00:00:02,070
Okay, so what do you have for the viewport?

2
00:00:02,070 --> 00:00:06,080
>> So for the viewport, we've added our resize operation and

3
00:00:06,080 --> 00:00:11,290
we've left some space for, you know, this new position that we'll be giving it.

4
00:00:11,290 --> 00:00:15,340
>> Okay and what remember we said that

5
00:00:15,340 --> 00:00:22,390
the viewport is an, can hold an integer number of lines of text, so

6
00:00:22,390 --> 00:00:27,910
it makes sense that we express the size in terms of the integer data type.

7
00:00:27,910 --> 00:00:31,060
>> Okay. >> What's the return type of this operation?

8
00:00:34,730 --> 00:00:38,870
>> I guess we could return the new verified size or

9
00:00:38,870 --> 00:00:43,220
like maybe a Boolean that it successfully executed.

10
00:00:44,470 --> 00:00:46,110
>> Or nothing at all.

11
00:00:46,110 --> 00:00:49,400
You know, in this case, we're performing the operation for

12
00:00:49,400 --> 00:00:53,200
its effect rather than its return value.

13
00:00:53,200 --> 00:00:57,570
Okay, so we'll use the UML void type to indicate that

14
00:00:57,570 --> 00:01:00,680
there's no return value of interest to us here.

15
00:01:00,680 --> 00:01:03,800
>> And I guess that I had a question in regards to,

16
00:01:03,800 --> 00:01:06,120
if we're going to list some types for the arguments and

17
00:01:06,120 --> 00:01:11,490
then also the return values, but without getting too implementation specific.

18
00:01:11,490 --> 00:01:14,720
We're going to use types that are UML-based and not language-based.

19
00:01:14,720 --> 00:01:18,950
You know integers for Java, for instance, might be expressed a certain way.

20
00:01:18,950 --> 00:01:20,984
It might be different than another language, right?

21
00:01:20,984 --> 00:01:27,190
>> So we're not, we're not, we're not concerned with implementation data types,

22
00:01:27,190 --> 00:01:32,910
however, the particular tool that you may use to actually draw this,

23
00:01:32,910 --> 00:01:39,100
might express the UML types in terms of programming language types.

24
00:01:39,100 --> 00:01:44,820
So for example Argo UML does make exactly that

25
00:01:44,820 --> 00:01:50,140
choice and map the UML types to, to Java types.

26
00:01:50,140 --> 00:01:53,991
But for purposes of doing an analysis model we're concerned with kind of

27
00:01:53,991 --> 00:01:58,440
the concepts and we're willing to abstract away those implementation details.

28
00:01:58,440 --> 00:01:59,210
>> Okay.

29
00:01:59,210 --> 00:02:03,520
>> So how about the other use case in terms of moving the scroll bar handle?

30
00:02:03,520 --> 00:02:07,970
So that's added to our rectangle for the scroll bar and

31
00:02:07,970 --> 00:02:11,980
I indicated that there would be an argument for the new position of the handle.

32
00:02:11,980 --> 00:02:13,880
And it-

33
00:02:13,880 --> 00:02:14,830
>> And a, and a return type?

34
00:02:16,830 --> 00:02:17,540
>> So void two.

35
00:02:17,540 --> 00:02:18,080
>> Okay.

36
00:02:18,080 --> 00:02:19,670
>> Based on our last one.

37
00:02:19,670 --> 00:02:24,970
>> Now, conventionally the operations go in the lower, the,

38
00:02:24,970 --> 00:02:29,138
the lowest of the three compartments rather than, than the middle.

39
00:02:29,138 --> 00:02:34,940
But UML is actually flexible and you can have anything between one and

40
00:02:34,940 --> 00:02:38,070
number of, of boxes there and you can use them however you want.

41
00:02:38,070 --> 00:02:40,690
Your particular tool may, may differ.

42
00:02:40,690 --> 00:02:44,600
There are some subtleties here which ultimately we're going to have to,

43
00:02:44,600 --> 00:02:45,140
to deal with.

44
00:02:46,530 --> 00:02:51,990
The requirements didn't say only that the size of the viewport was an int.

45
00:02:51,990 --> 00:02:56,220
It said that that int must be between 1 and 100.

46
00:02:56,220 --> 00:03:01,560
So the UML diagramming notation doesn't allow us to express that, and

47
00:03:01,560 --> 00:03:07,666
we would have to use some other mechanism to to get at that particular detail.

48
00:03:07,666 --> 00:03:13,700
And also our GUI tool kit, when it's dealing with the scroll bar is,

49
00:03:13,700 --> 00:03:16,530
is probably going to return some kind of pixel position.

50
00:03:16,530 --> 00:03:21,560
But we're at, we're at the analysis stage and not the design stage, and so we're

51
00:03:21,560 --> 00:03:27,810
just going to, once again, assume that we could deal with, with numbers between

52
00:03:27,810 --> 00:03:32,660
between 1 and, 1 and 100 as the particular position of the scroll bar handle.
