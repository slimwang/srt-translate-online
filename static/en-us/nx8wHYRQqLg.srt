1
00:00:00,603 --> 00:00:05,130
As you might expect, Android stores
your persistent data in the file system.

2
00:00:05,130 --> 00:00:09,172
To simplify what app developers
need to write, Android provides

3
00:00:09,172 --> 00:00:13,077
several structured storage options
on top of the file system.

4
00:00:13,077 --> 00:00:19,253
For Sunshine, we'll leverage both Shared
Preferences and an SQLite Database.

5
00:00:19,253 --> 00:00:21,690
Let's look at both of these options.

6
00:00:21,690 --> 00:00:26,864
The Shared Preferences class, which we
are already using to store our user

7
00:00:26,864 --> 00:00:32,036
zip code in units, provides a general
framework that allows you to save and

8
00:00:32,036 --> 00:00:36,390
retrieve persistent key value
pairs of primitive data types,

9
00:00:36,390 --> 00:00:40,192
such as Booleans, floats,
ins, longs and strings.

10
00:00:40,192 --> 00:00:44,416
There are times when a simple key value
pair framework like Shared Preferences

11
00:00:44,416 --> 00:00:46,601
doesnâ€™t provide enough flexibility.

12
00:00:46,601 --> 00:00:50,210
Fortunately, Android also has SQLite.

13
00:00:50,210 --> 00:00:54,181
SQLite implements a light
weight relational database.

14
00:00:54,181 --> 00:00:57,804
We interact with SQLite
databases by writing queries and

15
00:00:57,804 --> 00:01:02,644
statements and SQLite's variant of
the structured query language or SQL.

16
00:01:02,644 --> 00:01:05,867
Storing something in a a database
is more complicated than using

17
00:01:05,867 --> 00:01:07,008
Shared Preferences.

18
00:01:07,008 --> 00:01:09,366
So why would we ever choose this option?

19
00:01:09,366 --> 00:01:12,956
After all,
Android supports both raw files and

20
00:01:12,956 --> 00:01:15,926
shared preferences as alternatives.

21
00:01:15,926 --> 00:01:20,100
Well, for the same reason that it's
inefficient to find things if you

22
00:01:20,100 --> 00:01:22,588
throw your clothes in
a pile on the floor.

23
00:01:22,588 --> 00:01:27,996
Storing things in an SQLite Database
helps you organize and find data easily.

24
00:01:27,996 --> 00:01:30,064
Thanks to the power of indexing and
tables.

25
00:01:30,064 --> 00:01:32,583
Let's see what this looks like.

26
00:01:32,583 --> 00:01:36,484
Here is an SQLite Database table
from our weather database.

27
00:01:36,484 --> 00:01:38,689
Note not all fields are represented.

28
00:01:38,689 --> 00:01:41,788
All of the data for
the first day is in the first row.

29
00:01:41,788 --> 00:01:45,666
The data for the second day is
in the second row and so on.

30
00:01:45,666 --> 00:01:46,989
With key valued pairs,

31
00:01:46,989 --> 00:01:50,171
it would be difficult to
associate a row of data this way.

32
00:01:50,171 --> 00:01:54,583
As you continue through this section
on database storage and Android.

33
00:01:54,583 --> 00:01:58,656
We're going to expect some basic
understanding of SQLite and

34
00:01:58,656 --> 00:02:02,649
relational databases,
including what a create, select,

35
00:02:02,649 --> 00:02:05,484
update, delete and insert operation is.

36
00:02:05,484 --> 00:02:07,725
We'll help you write these operations.

37
00:02:07,725 --> 00:02:10,606
But if you are new to SQLite or
need a refresher,

38
00:02:10,606 --> 00:02:14,505
head over to the tutorial linked
in the instructor notes below.

39
00:02:14,505 --> 00:02:17,662
Once we have a database up and
running on our device for our app.

40
00:02:17,662 --> 00:02:20,982
Getting the information we
need using SQL is easy.

41
00:02:20,982 --> 00:02:24,734
We can perform queries against this
database, such as this SELECT statement

42
00:02:24,734 --> 00:02:27,519
here, which returns the weather
on the specified date.

43
00:02:27,519 --> 00:02:30,363
Similar to what we would want to do for
the detail view.

44
00:02:30,363 --> 00:02:34,611
We can use this slightly more complex
query to return a range of dates,

45
00:02:34,611 --> 00:02:38,506
which is similar to what we'd do
on the main forecast list view.

46
00:02:38,506 --> 00:02:42,566
Once again, if any of this was
unfamiliar, please consider working

47
00:02:42,566 --> 00:02:46,076
through the SQLite tutorial
link in the instructor notes.

48
00:02:46,076 --> 00:02:49,897
And even if isn't unfamiliar,
you might just learn something.

49
00:02:49,897 --> 00:02:50,684
Okay.

50
00:02:50,684 --> 00:02:53,704
Here's a slightly more
complicated SQL query.

51
00:02:53,704 --> 00:02:55,192
See the instructor notes for

52
00:02:55,192 --> 00:02:58,545
some resources that you can use
to help parse the SQL statement.

53
00:02:58,545 --> 00:03:03,362
One note, max is the name of the column
that stores the high temperature for

54
00:03:03,362 --> 00:03:03,980
the day.
