1
00:00:00,660 --> 00:00:06,900
Nucleus is micro kernel of a spring and it is subset of leap case prescription

2
00:00:06,900 --> 00:00:09,580
as I mentioned just now. In the

3
00:00:09,580 --> 00:00:14,100
sense that, nucleus manages only threads and IPC.

4
00:00:14,100 --> 00:00:16,860
The abstractions available in nucleus are the

5
00:00:16,860 --> 00:00:19,900
following. There is this domain. A domain is

6
00:00:19,900 --> 00:00:22,280
similar to Unix process, it's a container, or

7
00:00:22,280 --> 00:00:25,870
an address space, and threads can execute in

8
00:00:25,870 --> 00:00:30,570
a particular domain. These threads are similar in semantics

9
00:00:30,570 --> 00:00:33,020
to P thread that we have seen before, and this

10
00:00:33,020 --> 00:00:36,440
abstraction called door, is a software capability to a

11
00:00:36,440 --> 00:00:39,050
domain. It's you can think of it as a real

12
00:00:39,050 --> 00:00:42,080
life analogy of. Opening a door in order to

13
00:00:42,080 --> 00:00:44,890
get into a room. In a similar manner, if you

14
00:00:44,890 --> 00:00:48,100
have a handle to the door you can open the

15
00:00:48,100 --> 00:00:51,500
door and enter a target domain. So that's the idea

16
00:00:51,500 --> 00:00:54,940
behind door. So, any domain can create

17
00:00:54,940 --> 00:00:58,910
these nucleus entities called doors, which are essentially

18
00:00:58,910 --> 00:01:03,070
entry points for entering the target domain.

19
00:01:03,070 --> 00:01:05,600
With the object orientation, I told you that

20
00:01:05,600 --> 00:01:10,460
the only thing that you can do is make invocations on objects, and the entry

21
00:01:10,460 --> 00:01:13,560
points available and the objects that are contained

22
00:01:13,560 --> 00:01:16,630
in a domain are represented by this abstraction

23
00:01:16,630 --> 00:01:20,790
called door, that's provided by nucleus. Let's say, I'm a

24
00:01:20,790 --> 00:01:23,067
file server. What will I do? Well I have entry

25
00:01:23,067 --> 00:01:26,235
points in my file server, such as, opening a file,

26
00:01:26,235 --> 00:01:29,109
or reading a file, writing a file, and so on.

27
00:01:29,109 --> 00:01:33,225
Basically, I will create those entry points as doors into

28
00:01:33,225 --> 00:01:35,830
my domain. And if I'm a client, how do I

29
00:01:35,830 --> 00:01:38,130
get access to the entry point that's available in the

30
00:01:38,130 --> 00:01:42,080
target domain? Well, the way I do that is exactly similar

31
00:01:42,080 --> 00:01:46,650
to how you may be opening your file in a Unix file system. What you do is an f

32
00:01:46,650 --> 00:01:48,630
open, and when you do that, you get a

33
00:01:48,630 --> 00:01:52,800
file descriptor, which is a small integer that is a

34
00:01:52,800 --> 00:01:55,340
handle for you to access that file. In a

35
00:01:55,340 --> 00:01:59,200
similar manner. If I'm a client and if I want

36
00:01:59,200 --> 00:02:04,150
the ability to invoke a target domain, a particular entry

37
00:02:04,150 --> 00:02:07,270
point, then what I want is an access to this

38
00:02:07,270 --> 00:02:10,199
door and the way I get that is by getting

39
00:02:10,199 --> 00:02:12,620
a door handle. So I get a door handle. So

40
00:02:12,620 --> 00:02:16,030
every domain will have this door table, which is similar

41
00:02:16,030 --> 00:02:18,200
to the file descriptors that you may have in a

42
00:02:18,200 --> 00:02:23,050
Unix process. And every door ID that you have in

43
00:02:23,050 --> 00:02:25,710
this door table points to a particular door. If I

44
00:02:25,710 --> 00:02:29,030
have a door handle in my door table for a

45
00:02:29,030 --> 00:02:32,320
particular door, what that tells me is that, oh, I have

46
00:02:32,320 --> 00:02:35,050
the ability. To, make an invocation in

47
00:02:35,050 --> 00:02:38,390
the target domain that this particular door

48
00:02:38,390 --> 00:02:41,270
corresponds to. So the possessor of a

49
00:02:41,270 --> 00:02:45,740
door handle, is able to make object invocations

50
00:02:45,740 --> 00:02:51,750
on the target domain using this door handle. And as you can see, a particular

51
00:02:51,750 --> 00:02:54,390
client domain can have a door table

52
00:02:54,390 --> 00:02:57,380
that has access to several different target domains.

53
00:02:57,380 --> 00:03:00,850
So in this case, these two entries in my door

54
00:03:00,850 --> 00:03:04,390
table points to this door, which probably are entry points

55
00:03:04,390 --> 00:03:09,390
into this target domain. And other door, which are a

56
00:03:09,390 --> 00:03:12,020
different set of entry points, and I have access to

57
00:03:12,020 --> 00:03:15,330
them as well. And multiple clients may have access to

58
00:03:15,330 --> 00:03:18,100
the same door, because if it's a file system, for

59
00:03:18,100 --> 00:03:21,040
instance, you may be able to access the file system,

60
00:03:21,040 --> 00:03:22,770
I may be able to access the file system, and

61
00:03:22,770 --> 00:03:25,190
so on. So, the door table is something

62
00:03:25,190 --> 00:03:28,400
that is unique to every domain and it gives

63
00:03:28,400 --> 00:03:31,890
that domain an ability to access the entry

64
00:03:31,890 --> 00:03:34,680
points in the target domain, so that they can

65
00:03:34,680 --> 00:03:37,560
make object invocations. So, the way to think

66
00:03:37,560 --> 00:03:41,650
about this door, it's basically a software capability to

67
00:03:41,650 --> 00:03:44,360
a domain. Since we are using object orientation,

68
00:03:44,360 --> 00:03:48,150
it is represented by a pointer. To a C++

69
00:03:48,150 --> 00:03:52,510
object that represents the target domain. And door

70
00:03:52,510 --> 00:03:55,170
can be passed from domain to domain but it

71
00:03:55,170 --> 00:03:57,490
is a software capability and it can be passed

72
00:03:57,490 --> 00:04:00,290
from domain to domain, and when it is passed

73
00:04:00,290 --> 00:04:02,710
from domain to domain it gives the ability

74
00:04:02,710 --> 00:04:06,370
for those domains to actually get access to the

75
00:04:06,370 --> 00:04:09,530
entry points specified through the door, to the target

76
00:04:09,530 --> 00:04:13,610
domain. And the spring kernel itself is a composition

77
00:04:13,610 --> 00:04:17,779
of the nucleus plus the memory management, that is

78
00:04:17,779 --> 00:04:20,928
inherent in the fact that these domains represent an

79
00:04:20,928 --> 00:04:24,470
address space. Now, how do you go about making

80
00:04:24,470 --> 00:04:27,250
an object invocation, that is, you want to make

81
00:04:27,250 --> 00:04:30,580
a protected procedure call into a target domain from

82
00:04:30,580 --> 00:04:33,180
a client domain. How do I do that? Well,

83
00:04:33,180 --> 00:04:36,180
the nucleus is involved in every door call, so

84
00:04:36,180 --> 00:04:38,830
they won't open the door. I need the permission

85
00:04:38,830 --> 00:04:45,140
of the nucleus. And what I do is, when I make the invocation using the small

86
00:04:45,140 --> 00:04:47,090
descriptor that I have, which is a door

87
00:04:47,090 --> 00:04:50,640
handle, the nucleus looks at it, says okay this

88
00:04:50,640 --> 00:04:53,600
domain has the ability to do this invocation.

89
00:04:53,600 --> 00:04:56,010
And it allocates a server thread on the target

90
00:04:56,010 --> 00:05:00,920
domain, and executes the invocation that is indicated

91
00:05:00,920 --> 00:05:04,020
by this particular door handle. It's a protected procedure

92
00:05:04,020 --> 00:05:06,870
call, and since it is procedure call semantics,

93
00:05:06,870 --> 00:05:10,650
the client thread is deactivated, and the thread

94
00:05:10,650 --> 00:05:14,250
is allocated to the target domain, so that

95
00:05:14,250 --> 00:05:17,400
it can execute the invocation for the method

96
00:05:17,400 --> 00:05:19,960
that is indicated by this door handle. And

97
00:05:19,960 --> 00:05:22,910
on return from this target domain, once that

98
00:05:22,910 --> 00:05:25,240
protected procedure call is complete, the thread is

99
00:05:25,240 --> 00:05:29,020
deactivated. And the client thread is reactivated so

100
00:05:29,020 --> 00:05:34,320
that the client can continue with whatever it was doing before. So, this is

101
00:05:34,320 --> 00:05:37,810
very very similar to the communication mechanism

102
00:05:37,810 --> 00:05:40,110
that we discussed in the lightweight remote

103
00:05:40,110 --> 00:05:46,703
RPC paper before, in the sense that, we're doing very fast cross address space

104
00:05:46,703 --> 00:05:49,970
calls using this door mechanism. This protected

105
00:05:49,970 --> 00:05:54,670
procedure call is in illustration of how nucleus

106
00:05:54,670 --> 00:06:00,070
makes sure that even though it has an object based design and it is using object

107
00:06:00,070 --> 00:06:03,430
orientation in the building of the, in the,

108
00:06:03,430 --> 00:06:05,950
it is using object orientation in the structuring

109
00:06:05,950 --> 00:06:08,680
of the operating system kernel. It ensures that

110
00:06:08,680 --> 00:06:12,540
it'll still be performant, in the sense that

111
00:06:12,540 --> 00:06:15,580
you can do this cross domain calls very

112
00:06:15,580 --> 00:06:19,770
quickly through this idea of deactivating the client

113
00:06:19,770 --> 00:06:22,860
thread and quickly activating the thread to

114
00:06:22,860 --> 00:06:25,980
execute the entry point procedure in the target

115
00:06:25,980 --> 00:06:29,560
domain and on return reactivating the client thread.

116
00:06:29,560 --> 00:06:32,130
And all of this results in very fast

117
00:06:32,130 --> 00:06:35,538
cross address space calls through this lower mechanism.

118
00:06:35,538 --> 00:06:37,750
That's how you make sure that you get

119
00:06:37,750 --> 00:06:40,600
all the good attributes of object orientation and

120
00:06:40,600 --> 00:06:43,080
not sacrifice on performance at the same time.
