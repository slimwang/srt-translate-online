1
00:00:00,500 --> 00:00:04,510
So a different kind of partitioning
strategy is known as multi-level graph

2
00:00:04,510 --> 00:00:05,400
coarsening.

3
00:00:05,400 --> 00:00:07,780
It's a form of divide and conquer.

4
00:00:07,780 --> 00:00:10,140
Let's start with
a conceptual illustration.

5
00:00:10,140 --> 00:00:14,010
You start with an imput graph,
pretend this is an input graph.

6
00:00:14,010 --> 00:00:16,820
You would then replace it
with a smaller version.

7
00:00:16,820 --> 00:00:20,580
In the graph sense, the coarse graph
would have fewer nodes and edges, but

8
00:00:20,580 --> 00:00:23,290
would somehow look like
the original graph.

9
00:00:23,290 --> 00:00:26,740
We might repeat this a few times until
you get a version of the graph that is

10
00:00:26,740 --> 00:00:28,820
small enough to partition quickly.

11
00:00:28,820 --> 00:00:31,260
You then partition the smallest graph.

12
00:00:31,260 --> 00:00:35,630
If you've done a good job preserving the
relationship between the coarsest graph

13
00:00:35,630 --> 00:00:38,732
and its parent graph,
then a split in the course graph will

14
00:00:38,732 --> 00:00:41,979
correspond to a roughly equivalent
split in the fine graph.

15
00:00:41,979 --> 00:00:46,050
And you'd repeat this reverse step until
you have a partition of the original.

16
00:00:46,050 --> 00:00:49,790
So that's the concept, but
how do you actually coarsen a graph?

17
00:00:49,790 --> 00:00:52,350
Most schemes have the following flavor.

18
00:00:52,350 --> 00:00:57,860
First, identify at least one subset of
the vertices to collapse or to merge.

19
00:00:57,860 --> 00:01:00,490
For instance,
here's a subset of five vertices.

20
00:01:00,490 --> 00:01:04,690
I'm going to replace this subset
with a single super vertex.

21
00:01:04,690 --> 00:01:07,980
Now remember that one of your
partitioning goals is to obtain balanced

22
00:01:07,980 --> 00:01:09,240
partitions.

23
00:01:09,240 --> 00:01:12,000
So it's probably a good
idea to track the fact

24
00:01:12,000 --> 00:01:15,580
that there were five vertices
here that became one vertex.

25
00:01:15,580 --> 00:01:20,040
An easy way to do that is to assign
a weight of 5 to the super vertex.

26
00:01:20,040 --> 00:01:22,358
You'll also want to
track edge weights so

27
00:01:22,358 --> 00:01:24,754
that later on we can
cut edges accurately.

28
00:01:24,754 --> 00:01:26,660
Let's see how that might work.

29
00:01:26,660 --> 00:01:29,710
Consider two vertices
in a weighted graph.

30
00:01:29,710 --> 00:01:34,000
Remember, even if the original graph
is unweighted, we repeatedly coarsen by

31
00:01:34,000 --> 00:01:37,990
aggregating nodes and edges and
so will accumulate weights.

32
00:01:37,990 --> 00:01:44,030
In this example, wi is a function that
maps every vertex to some weight.

33
00:01:44,030 --> 00:01:48,410
Similarly, the function xi
will map edges to weights.

34
00:01:48,410 --> 00:01:53,510
Now, let's suppose that we join just
these two vertices into a super-vertex.

35
00:01:53,510 --> 00:01:55,800
Let's call this new vertex s.

36
00:01:55,800 --> 00:01:59,060
Its weight is the sum of
the weights of u and v.

37
00:01:59,060 --> 00:02:01,010
Now, what about the edge weights?

38
00:02:01,010 --> 00:02:03,710
The main case to think
about is the following.

39
00:02:03,710 --> 00:02:08,300
Suppose there's a vertex t that's
connected to both u and v.

40
00:02:08,300 --> 00:02:10,979
Then these two edges will
become a single super-edge

41
00:02:10,979 --> 00:02:11,880
in the coarsened graph.

42
00:02:12,920 --> 00:02:14,740
So what is its weight?

43
00:02:14,740 --> 00:02:18,600
A natural idea is simply to sum
the weights of the original edges.

44
00:02:18,600 --> 00:02:21,570
So the weight of the new edge
is just the weight of the two

45
00:02:21,570 --> 00:02:23,740
old edges that got merged.

46
00:02:23,740 --> 00:02:27,370
The reason we do this is so
that if we partition or cut this edge in

47
00:02:27,370 --> 00:02:32,590
the coarsened graph, we'll know that it
maps to two edges in the original graph.

48
00:02:32,590 --> 00:02:33,460
Now before you move on,

49
00:02:33,460 --> 00:02:36,040
it's a good idea to check that
this procedure makes sense to you.

50
00:02:38,070 --> 00:02:40,350
Okay, let's go back to
the original sample graph and

51
00:02:40,350 --> 00:02:43,310
see what would happen by
applying these rules.

52
00:02:43,310 --> 00:02:45,860
Consider this first merge group again.

53
00:02:45,860 --> 00:02:49,400
There are 5 vertices,
which become 1 super-vertex.

54
00:02:49,400 --> 00:02:53,270
There are also several cases in
which multiple edges should merge.

55
00:02:55,140 --> 00:02:56,400
Here is the result.

56
00:02:56,400 --> 00:03:00,320
Now, let's suppose someone gives
us a sequence of merge groups, and

57
00:03:00,320 --> 00:03:02,586
let's coarsen the graph accordingly.

58
00:03:02,586 --> 00:03:08,868
[SOUND] Coarsen, coarsen.

59
00:03:08,868 --> 00:03:17,574
[SOUND] So this is the final result.

60
00:03:17,574 --> 00:03:20,338
That's the basic process
of coarsening a graph.

61
00:03:20,338 --> 00:03:23,576
This final result kind of
looks like something.

62
00:03:23,576 --> 00:03:27,674
Oink, do you know about
Atlanta's PINK PIG ride?
