1
00:00:00,480 --> 00:00:03,931
So with tokens in OAuth we can
now control authentication and

2
00:00:03,931 --> 00:00:06,171
authorization for our API Endpoints.

3
00:00:06,171 --> 00:00:09,680
But what happens when users
are using the endpoint too much?

4
00:00:09,680 --> 00:00:13,770
If we have one data hog constantly
pinging the API, our other users might

5
00:00:13,770 --> 00:00:18,680
experience drops in performance or may
not be able to access our API at all.

6
00:00:18,680 --> 00:00:22,030
Or maybe our API isn't available for
free and users should be paying for

7
00:00:22,030 --> 00:00:25,090
a certain amount of access
over a period of time.

8
00:00:25,090 --> 00:00:28,110
With rate limiting, we can give
our server a bit more control over

9
00:00:28,110 --> 00:00:32,640
the amounts of requests we will request
from a user over a certain time period.

10
00:00:32,640 --> 00:00:33,840
In this next video,

11
00:00:33,840 --> 00:00:36,870
I will make a rate limited inpoint
in a Flask web application.

12
00:00:36,870 --> 00:00:40,070
This exercise uses some more
advanced topics in Python.

13
00:00:40,070 --> 00:00:42,830
I've added some links in the instructor
notes that cover some of these topics

14
00:00:42,830 --> 00:00:43,400
more in detail.
