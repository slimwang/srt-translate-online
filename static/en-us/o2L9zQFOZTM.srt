1
00:00:00,000 --> 00:00:04,000
This approach works for the coin tossing problem,

2
00:00:04,000 --> 00:00:06,000
but there are lots of other situations where we need to commit to values,

3
00:00:06,000 --> 00:00:09,000
and we need to commit to values much longer than just 1 bit.

4
00:00:09,000 --> 00:00:13,000
For that, we need something a little more versatile, but with the same idea.

5
00:00:13,000 --> 00:00:18,000
What we need for this is what's called a cryptographic hash function.

6
00:00:18,000 --> 00:00:23,000
It's a function that has this property that it takes some large value as an input

7
00:00:23,000 --> 00:00:25,000
and outputs a small value.

8
00:00:25,000 --> 00:00:28,000
This is similar to a regular hash function like we used in a hash table,

9
00:00:28,000 --> 00:00:32,000
has the property that maps values from a large input domain.

10
00:00:32,000 --> 00:00:36,000
And by large here, we usually mean infinite, such as all possible strings of any length

11
00:00:36,000 --> 00:00:38,000
to a small fixed output size.

12
00:00:38,000 --> 00:00:42,000
It should also have the property that it's well distributed.

13
00:00:42,000 --> 00:00:48,000
That for any given input, the probability that that input maps to a particular value

14
00:00:48,000 --> 00:00:53,000
is close to 1 over the size of the table, and we'll use N to represent the output size.

15
00:00:53,000 --> 00:00:59,000
So we'll say that outputs are in the range from 0 of 10-1.

16
00:00:59,000 --> 00:01:04,000
And so if it has this well-distributive property, this works great for a hash table.

17
00:01:04,000 --> 00:01:07,000
This is not enough for cryptographic committments.

18
00:01:07,000 --> 00:01:10,000
If we just have these 2 properties, well, it might be easy to find other x values

19
00:01:10,000 --> 00:01:12,000
that map to the same thing.

20
00:01:12,000 --> 00:01:16,000
We saw that one of the things that we need for a cryptographic hash function

21
00:01:16,000 --> 00:01:20,000
is to make it hard for Alice to be able to do that, otherwise, she could find 2 inputs

22
00:01:20,000 --> 00:01:22,000
and cheat in the coin tossing game.

23
00:01:22,000 --> 00:01:26,000
This first property of mapping a large input domain to a small fixed output,

24
00:01:26,000 --> 00:01:27,000
we'll call compression.

25
00:01:27,000 --> 00:01:35,000
What we need for a cryptographic hash function is 3 additional properties.

26
00:01:35,000 --> 00:01:41,000
The properties are pre-image resistance, which means given the output of the hash function,

27
00:01:41,000 --> 00:01:43,000
it's hard to find the input that produced it.

28
00:01:43,000 --> 00:01:45,000
This is a form of "one-way ness".

29
00:01:45,000 --> 00:01:49,000
The other 2 properties we need concern the collision resistance.

30
00:01:49,000 --> 00:01:53,000
The weakest form of this is known as weak collision resistance.

31
00:01:53,000 --> 00:01:57,000
What weak collision resistance means is that if we're given some hash value,

32
00:01:57,000 --> 00:02:00,000
it's hard to find any input that hashes to the same result.

33
00:02:00,000 --> 00:02:02,000
These are sort of similar.

34
00:02:02,000 --> 00:02:05,000
This one says it's hard to find the actual value of x that was used.

35
00:02:05,000 --> 00:02:10,000
This one says it's hard to find any x prime value that hashes to that value.

36
00:02:10,000 --> 00:02:14,000
If we have weak collision resistance that would imply we have a form of pre-image resistance

37
00:02:14,000 --> 00:02:16,000
as well.

38
00:02:16,000 --> 00:02:21,000
The final property is strong collision resistance, which is exactly the one we saw

39
00:02:21,000 --> 00:02:23,000
that we needed for the coin tossing game.

40
00:02:23,000 --> 00:02:28,000
Strong collision resistance requires that it's hard to find any pair, x and y,

41
00:02:28,000 --> 00:02:32,000
such that the hash of x is equal to the hash of y.

42
00:02:32,000 --> 00:02:35,000
So have we seen anything that can do this?

43
00:02:35,000 --> 00:02:39,000
And the question is, which of these is almost a good cryptographic hash function?

44
00:02:39,000 --> 00:02:44,000
I'm using almost here in somewhat of a fuzzy way, but I want you to select the one

45
00:02:44,000 --> 00:02:48,000
that seems closest to being a good cryptographic hash function.

46
00:02:48,000 --> 00:02:51,000
None of them is a perfect cryptographic hash function,

47
00:02:51,000 --> 00:02:54,000
and we'll discuss that more after the quiz.

48
00:02:54,000 --> 00:02:56,000
So here are the choices.

49
00:02:56,000 --> 00:03:01,000
Use cipher-block chaining mode to encrypt x, and then take the last output block

50
00:03:01,000 --> 00:03:03,000
as the value of the hash.

51
00:03:03,000 --> 00:03:08,000
The second choice is to use counter mode to encrypt x, and then take the last output block.

52
00:03:08,000 --> 00:03:11,000
The third choice is to use electronic code block mode to encrypt x,

53
00:03:11,000 --> 00:03:15,000
and then take all of the output blocks and XOR them all together and use the result

54
00:03:15,000 --> 00:03:16,000
as the hash value.

55
00:03:16,000 --> 00:03:19,000
The fourth choice is to use counter mode to encrypt x, XOR together all that,

56
00:03:19,000 --> 00:03:21,000
put blocks, and that's the hash value.

57
00:03:21,000 --> 00:03:25,000
Which one of these makes the most sense to provide the cryptographic hash function

58
00:03:25,000 --> 00:03:27,000
properties that we need?
