1
00:00:00,000 --> 00:00:05,000
So we need something better than this if we want to deal with mutually distrusting parties.

2
00:00:05,000 --> 00:00:07,000
We'll call this protocol 2.

3
00:00:07,000 --> 00:00:11,000
In this protocol, Alice will start by doing 3 things.

4
00:00:11,000 --> 00:00:16,000
She'll pick a value for x. There are 2 possible values--0 and 1.

5
00:00:16,000 --> 00:00:19,000
We can think of 0 as representing heads and 1 representing tails.

6
00:00:19,000 --> 00:00:24,000
She'll also pick some key of 1th n, so this is going to be a random key.

7
00:00:24,000 --> 00:00:30,000
N is a security parameter--the higher the value of n, the larger space of possible keys,

8
00:00:30,000 --> 00:00:32,000
the more secure the protocol will be.

9
00:00:32,000 --> 00:00:38,000
Let's assume we're going to use AES, and we'll make n 128.

10
00:00:38,000 --> 00:00:45,000
Then Alice will compute a message, which is the result of encrypting using the key

11
00:00:45,000 --> 00:00:46,000
the value of x.

12
00:00:46,000 --> 00:00:50,000
She'll send to Bob, the value of m.

13
00:00:50,000 --> 00:00:55,000
Bob receives the value of m--we'll keep track of it--and picks a guess.

14
00:00:55,000 --> 00:01:02,000
Bob will generate, however he wants, a guess valued at either 0 or 1.

15
00:01:02,000 --> 00:01:04,000
That's like calling the coin toss.

16
00:01:04,000 --> 00:01:07,000
Bob will send that guess back to Alice.

17
00:01:07,000 --> 00:01:11,000
Alice knows the values that she picked for x, k, and m

18
00:01:11,000 --> 00:01:14,000
as well as the value Bob picked for the guess.

19
00:01:14,000 --> 00:01:20,000
At this point, Alice sends the key to Bob, and Bob can compute the result of decrypting

20
00:01:20,000 --> 00:01:22,000
with the key--the message.

21
00:01:22,000 --> 00:01:26,000
This is the message that Alice sent to Bob in step 1.

22
00:01:26,000 --> 00:01:31,000
At this stage, Bob can check whether or not he won the coin toss,

23
00:01:31,000 --> 00:01:34,000
comparing the value of t with the value of his guess.

24
00:01:34,000 --> 00:01:39,000
If they're equal, that means Bob guessed correctly and Alice should charge

25
00:01:39,000 --> 00:01:45,000
the Robo-dog. If they're not equal, then it's up to Bob to charge the Robo-dog.

26
00:01:45,000 --> 00:01:47,000
Alice needs to know the winner too.

27
00:01:47,000 --> 00:01:49,000
She could do that.

28
00:01:49,000 --> 00:01:52,000
She could easily do that by checking if the guess is equal to x.

29
00:01:52,000 --> 00:01:56,000
She could also do the decryption because she has the key as well.

30
00:01:56,000 --> 00:02:01,000
So at the end of the protocol, both participants agree on the result of the coin toss.

31
00:02:01,000 --> 00:02:03,000
Now the question is, is this fair?

32
00:02:03,000 --> 00:02:10,000
So the question is, how hard is it for Alice to cheat using Robo-dog Protocol 2?

33
00:02:10,000 --> 00:02:13,000
And by cheat here, we mean gain an advantage--

34
00:02:13,000 --> 00:02:16,000
be able to make the coin toss unfair in her favor.

35
00:02:16,000 --> 00:02:18,000
Here's the choices. There's only 1 correct answer.

36
00:02:18,000 --> 00:02:22,000
It's the easiest thing for Alice to do that would be enough to make the coin toss

37
00:02:22,000 --> 00:02:23,000
unfair for Bob.
