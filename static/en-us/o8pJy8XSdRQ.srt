1
00:00:00,000 --> 00:00:04,000
Quoted strings, that is, strings that are surrounded by double quotes, or the like,

2
00:00:04,000 --> 00:00:08,000
are a tricky issue that comes up in both JavaScript and HTML.

3
00:00:08,000 --> 00:00:14,000
Let's bring all of our regular expression power to bear to see about separating

4
00:00:14,000 --> 00:00:16,000
quoted strings from other words.

5
00:00:16,000 --> 00:00:21,000
Here I've drawn an evil quoted string that contains a bunch of double quotes.

6
00:00:21,000 --> 00:00:28,000
We really want to get to just the heart of it, just the contents and peel off

7
00:00:28,000 --> 00:00:29,000
these 2 double quotes at the end.

8
00:00:29,000 --> 00:00:32,000
There like the rind. I want to get to the core.

9
00:00:32,000 --> 00:00:36,000
However, if I just repeatedly use string.find to look for double quotes,

10
00:00:36,000 --> 00:00:39,000
I'll find this one, but also this one in the middle.

11
00:00:39,000 --> 00:00:41,000
This one in the middle, and this one in the end.

12
00:00:41,000 --> 00:00:45,000
So I might mistakenly think that it's 2 quoted strings--

13
00:00:45,000 --> 00:00:48,000
I said, and nothing over here.

14
00:00:48,000 --> 00:00:50,000
Oh no! Find isn't good enough!

15
00:00:50,000 --> 00:00:54,000
In a shocking twist, we'll have to use regular expressions instead.

16
00:00:54,000 --> 00:00:59,000
But first, to make our job a little easier, let me introduce to you some new regular expressions.

17
00:00:59,000 --> 00:01:05,000
The first is the dot, or period, which matches any character except a new line,

18
00:01:05,000 --> 00:01:08,000
or what you get when you press enter or return.

19
00:01:08,000 --> 00:01:15,000
For example, here I'm looking for any decimal digit [0 - 9] and then any character--

20
00:01:15,000 --> 00:01:18,000
anything except a line break--and then another [0 - 9].

21
00:01:18,000 --> 00:01:22,000
So for example, this is a decimal digit. This is another decimal digit.

22
00:01:22,000 --> 00:01:24,000
And the "a" between them is any character.

23
00:01:24,000 --> 00:01:29,000
This 2 is a decimal digit. The 2 between them is any character. This 2 is another decimal digit.

24
00:01:29,000 --> 00:01:34,000
This "cc3" doesn't qualify because this "c" is not in [0 - 9].

25
00:01:34,000 --> 00:01:39,000
And one more--sometimes it's nice to be able to say anything except a digit

26
00:01:39,000 --> 00:01:42,000
or anything except a number or anything except p.

27
00:01:42,000 --> 00:01:48,000
Here we're looking for [0 - 9], followed by anything that's not "a" and also not "b".

28
00:01:48,000 --> 00:01:52,000
So here--oh! That immediately didn't work because the next thing was an "a",

29
00:01:52,000 --> 00:01:54,000
and we're asking for not "a".

30
00:01:54,000 --> 00:02:00,000
Right over here we've got a 1 and a space, and space isn't "a" or "b", so that looks good.

31
00:02:00,000 --> 00:02:05,000
Then here we've got a 2 and a 2, and this second 2 is not "a" or "b", so that looks good.

32
00:02:05,000 --> 00:02:10,000
Here we've got a 2 and a space, and this space is not "a" or "b", so that looks good.

33
00:02:10,000 --> 00:02:16,000
"C" is not [0 - 9]. "C" is not [0 - 9], 3 is [0 - 9], but then we're at the end of the string.

34
00:02:16,000 --> 00:02:18,092
So that's it.
