1
00:00:00,170 --> 00:00:05,089
So it turns out that the previous
algorithm outputs a minimum cut

2
00:00:05,089 --> 00:00:08,834
set with probability
at least 2 / n(n- 1).

3
00:00:08,834 --> 00:00:12,100
Now, at first you might look at this
result and ask, what good is that?

4
00:00:12,100 --> 00:00:15,310
The algorithm doesn't even promise
to be right more often than not.

5
00:00:15,310 --> 00:00:18,360
The trick is that we can call
the algorithm multiple times, and

6
00:00:18,360 --> 00:00:20,140
just take the minimum of these results.

7
00:00:21,160 --> 00:00:26,590
If we do this roughly n squared
times the log of 1/epsilon times,

8
00:00:26,590 --> 00:00:31,478
then there's a 1- epsilon chance that
we will have found the minimum cut set.

9
00:00:31,478 --> 00:00:32,460
The proof for

10
00:00:32,460 --> 00:00:36,720
this corollary is that each call
to the algorithm is independent.

11
00:00:36,720 --> 00:00:42,040
So, the probability that all the calls
failed is given by this expression here.

12
00:00:42,040 --> 00:00:45,755
Then in general,
(1-x) is at most, e to the -x.

13
00:00:47,050 --> 00:00:50,920
So, applying that quantity
to this case here,

14
00:00:50,920 --> 00:00:55,220
we have the n-1 and
the 2 factors cancel.

15
00:00:55,220 --> 00:00:58,110
Leaving us with this expression here,

16
00:00:58,110 --> 00:01:01,690
which then just simplifies
to the quantity epsilon.

17
00:01:01,690 --> 00:01:06,320
So the probability that all
the iterations fail is at most epsilon.

18
00:01:06,320 --> 00:01:10,180
This, down here, by the way,
is extremely useful in analysis, and

19
00:01:10,180 --> 00:01:13,080
is one you should always have
handy in your mental toolbox.

20
00:01:13,080 --> 00:01:16,050
So then,
we have that if this theorem is true,

21
00:01:16,050 --> 00:01:19,460
we can boost it up into an effective
algorithm, just by repeating it.

22
00:01:20,690 --> 00:01:22,610
But why is this theorem true?

23
00:01:22,610 --> 00:01:26,770
Consider a minimum cut set C, and
we'll let Ei be the event that

24
00:01:26,770 --> 00:01:31,720
the edge chosen in the the ith
iteration is not in C.

25
00:01:31,720 --> 00:01:35,360
Note that there could be other
minimum cut sets, as well.

26
00:01:35,360 --> 00:01:39,070
But we're going to focus on just one
of them, which we're going to call C.

27
00:01:39,070 --> 00:01:43,710
Returning the cut set C means not
picking an edge in C in each iteration.

28
00:01:44,780 --> 00:01:49,370
So it's the intersection
of all the events Ei,

29
00:01:49,370 --> 00:01:51,910
which we can turn into this
product as we've done before.

30
00:01:53,160 --> 00:01:58,720
We are just conditioning the probability
of avoiding C in the ith iteration,

31
00:01:58,720 --> 00:02:01,700
given that we have avoided
it in all previous ones.

32
00:02:01,700 --> 00:02:04,570
Actually that quantity will be a little
easier to analyze if we write it

33
00:02:04,570 --> 00:02:05,940
like this.

34
00:02:05,940 --> 00:02:12,198
And I claim that this
is at most n-j-2 / n-j.

35
00:02:12,198 --> 00:02:16,340
We'll warm up just by considering
the probability of E1, that is,

36
00:02:16,340 --> 00:02:20,790
avoiding the cut in the first
iteration as we choose an edge.

37
00:02:20,790 --> 00:02:22,780
Letting k be the size of the cut,

38
00:02:22,780 --> 00:02:25,400
we have that every vertex
must have degree at least k.

39
00:02:26,420 --> 00:02:30,240
Otherwise, the edges incident
on a smaller degree vertex

40
00:02:30,240 --> 00:02:32,810
would be a smaller cut-set.

41
00:02:32,810 --> 00:02:38,460
This then implies that the total
number of edges is at least nk/2.

42
00:02:38,460 --> 00:02:42,779
Every vertex must have degree at least
k and summing up the degrees for

43
00:02:42,779 --> 00:02:46,330
every vertex counts every
edge exactly twice.

44
00:02:46,330 --> 00:02:50,930
Therefore, the probability of avoiding
the cut set in the first iteration Is

45
00:02:50,930 --> 00:02:56,490
1 minus the size of C divided
by the over all number of edges.

46
00:02:56,490 --> 00:03:03,750
This is at least this expression here,
which then simplifies to n-2/n.

47
00:03:03,750 --> 00:03:05,904
The more general argument
will be similar,

48
00:03:05,904 --> 00:03:09,500
given that the first j edge is chosen,
we're not in C.

49
00:03:09,500 --> 00:03:12,780
Then C is still a minimum cut-set for
the current graph.

50
00:03:13,820 --> 00:03:17,240
If not,
then taking the edges in the smaller cut

51
00:03:17,240 --> 00:03:19,320
would also be a smaller cut for
the original graph.

52
00:03:20,970 --> 00:03:24,940
And note throughout, as we count edges
we're always counting the parallel ones.

53
00:03:24,940 --> 00:03:28,600
So again, we can let k be equal
to the size of the set C.

54
00:03:29,890 --> 00:03:37,232
And we have that there have to be
at least k(n- j) / 2 edges left.

55
00:03:37,232 --> 00:03:41,820
The n-j now comes from the fact
that there are only n-j vertices

56
00:03:41,820 --> 00:03:43,210
left after the j iterations.

57
00:03:43,210 --> 00:03:48,090
With the same argument as before, we
have that the probability of avoiding C

58
00:03:48,090 --> 00:03:53,580
in the j+1th iteration, given that
no edges in C has been chosen yet,

59
00:03:53,580 --> 00:03:58,970
is at least n-j-2 / n- j.

60
00:03:58,970 --> 00:04:00,650
Which was what we were trying to show.

61
00:04:02,250 --> 00:04:05,420
Substituting this into
our expression here,

62
00:04:05,420 --> 00:04:09,455
we have that we are down to a 1/3
probability in the last iteration.

63
00:04:09,455 --> 00:04:12,150
2/4 in the iteration before that, etc.

64
00:04:12,150 --> 00:04:16,964
This product telescopes and
leaves us with a bound of 2/

65
00:04:16,964 --> 00:04:21,730
n(n-1), which was what
we were trying to show.

66
00:04:21,730 --> 00:04:24,230
Altogether then,
this extremely simple procedure

67
00:04:24,230 --> 00:04:27,350
has given us a fairly efficient
algorithm for finding a minimum cut set.
