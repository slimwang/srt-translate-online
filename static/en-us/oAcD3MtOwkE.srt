1
00:00:00,000 --> 00:00:04,000
This was potentially a difficult quiz, requires you to think about outside the box

2
00:00:04,000 --> 00:00:06,000
of what I normally ask.

3
00:00:06,000 --> 00:00:12,000
We can implement optimization okay so that it returns a safe answer for optimization in all cases.

4
00:00:12,000 --> 00:00:14,000
Remember how are we using optimization okay?

5
00:00:14,000 --> 00:00:20,000
We consider a bunch of optimizations, and if this says True, then we swap out parts of the program.

6
00:00:20,000 --> 00:00:23,000
A safe answer is just to return false all the time,

7
00:00:23,000 --> 00:00:25,000
never do any optimization.

8
00:00:25,000 --> 00:00:31,000
That'll make for a slower programs, but it's safe because we'll always get the same answer.

9
00:00:31,000 --> 00:00:33,000
We're never changing the meaning of the program.

10
00:00:33,000 --> 00:00:38,000
Optimization is sometimes described as conservative because if you're not

11
00:00:38,000 --> 00:00:42,000
absolutely certain that an optimization is okay, just be conservative and don't do it,

12
00:00:42,000 --> 00:00:46,000
and you'll be fine. The program will be a little slower, but it'll always get the right answer.

13
00:00:46,000 --> 00:00:50,000
We cannot implement and optimization okay that works precisely in all cases.

14
00:00:50,000 --> 00:00:53,000
It is undecidable like the Halting Problem.

15
00:00:53,000 --> 00:00:55,000
This sadly is true.

16
00:00:55,000 --> 00:00:57,000
I'm going to sketch an answer for this.

17
00:00:57,000 --> 00:01:02,000
A formal proof that something is impossible, like the Halting Problem,

18
00:01:02,000 --> 00:01:04,000
is a little beyond the scope of most of this class.

19
00:01:04,000 --> 00:01:06,000
But let me show you how it would go.

20
00:01:06,000 --> 00:01:09,000
Suppose we could write optimization okay in a way that was

21
00:01:09,000 --> 00:01:11,000
precisely correct in all cases.

22
00:01:11,000 --> 00:01:14,000
I, the Great Wesini, shall solve the Halting Problem

23
00:01:14,000 --> 00:01:17,000
by telling you if an arbitrary program halts or not.

24
00:01:17,000 --> 00:01:19,000
You want to know if a program P halts or not.

25
00:01:19,000 --> 00:01:21,000
I'm going to tell you how to do it.

26
00:01:21,000 --> 00:01:23,000
Remember, we know this is impossible.

27
00:01:23,000 --> 00:01:25,000
Here's how we do it.

28
00:01:25,000 --> 00:01:28,000
Suppose you claim we've implemented optimization_ok.

29
00:01:28,000 --> 00:01:31,000
It always gets exactly the right answer.

30
00:01:31,000 --> 00:01:34,000
I'm going to use it to build a Halting Problem solver.

31
00:01:34,000 --> 00:01:36,000
You give me a program P and you want to know if it halts?

32
00:01:36,000 --> 00:01:41,000
I just make up a little program over here called "loops forever" or "loops."

33
00:01:41,000 --> 00:01:45,000
This procedure loops sets x to zero and while True, it increments x.

34
00:01:45,000 --> 00:01:49,000
We've seen before that this program never terminates, never returns a value.

35
00:01:49,000 --> 00:01:55,000
I can just check to see if your program ever halts by checking to see if it would be

36
00:01:55,000 --> 00:01:58,000
okay to replace it with loops forever.

37
00:01:58,000 --> 00:02:02,000
If your program gets the same answer on all inputs as loops forever,

38
00:02:02,000 --> 00:02:04,000
then your program loops forever on all inputs.

39
00:02:04,000 --> 00:02:07,000
Otherwise, your program halts.

40
00:02:07,000 --> 00:02:12,000
If optimization_ok could be written, then the Halting Problem could be written--

41
00:02:12,000 --> 00:02:14,000
this Halting Problem decider. But this cannot be.

42
00:02:14,000 --> 00:02:18,000
We've seen before that there is no way to solve the Halting Problem.

43
00:02:18,000 --> 00:02:22,000
It's equivalent to figuring out if "this sentence is false" is true or false.

44
00:02:22,000 --> 00:02:25,000
It's a contradiction in the real world.

45
00:02:25,000 --> 00:02:29,000
So halts is impossible, but I could totally make halts if I had optimization_ok.

46
00:02:29,000 --> 00:02:36,000
That means optimization_ok must me impossible--impossible to solve every time precisely.

47
00:02:36,000 --> 00:02:42,000
We can solve it some of the time. We just can't solve it all of the time.

48
00:02:42,000 --> 00:02:46,000
Because if we could solve it all of the time, it'd be just like the Halting Problem.

49
00:02:46,000 --> 00:02:48,000
Then finally down here at the end--

50
00:02:48,000 --> 00:02:51,000
optimization_ok of AB implies optimization_ok of BA.

51
00:02:51,000 --> 00:02:54,000
This is true because we're just checking equality.

52
00:02:54,000 --> 00:02:56,000
If A = B, then B = A.

53
00:02:56,000 --> 00:03:01,000
Now the two I've picked--George F Will, a Pulitzer Prize-winning conservative commentator,

54
00:03:01,000 --> 00:03:04,000
and Betty Frieden who wrote The Feminine Mystique

55
00:03:04,000 --> 00:03:07,000
and lead second-wave feminism in the United States--

56
00:03:07,000 --> 00:03:10,000
they're unlikely to have exactly the same things to say.

57
00:03:10,000 --> 00:03:13,000
These two are unlikely to be equal, but if they were

58
00:03:13,000 --> 99:59:59,999
then you could reverse it, and they would match up. You never know. Check them both out.
