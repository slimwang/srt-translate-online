1
00:00:00,500 --> 00:00:03,822
But it will be a while 
before we can test this in our code.

2
00:00:03,822 --> 00:00:06,314
We still are going to implement 
a whole layer on top of it

3
00:00:06,314 --> 00:00:08,247
along with a bunch of UI changes.

4
00:00:08,507 --> 00:00:12,456
Fortunately, we can implement 
JUnit test here to help.

5
00:00:12,983 --> 00:00:15,093
And now for some magic.

6
00:00:15,223 --> 00:00:17,749
We'll add a directory 
to the source directory

7
00:00:17,749 --> 00:00:21,606
of our Android studio project 
called Android test, and then

8
00:00:21,606 --> 00:00:23,923
another one underneath it
called Java.

9
00:00:25,303 --> 00:00:27,318
This is the way we tell Android studio

10
00:00:27,318 --> 00:00:30,238
there's a test target in cradle
for our app.

11
00:00:31,137 --> 00:00:34,196
Now we create a test package 
that matches our main package

12
00:00:34,196 --> 00:00:36,397
with an extra test directory on the end.

13
00:00:37,050 --> 00:00:41,838
Create a new class called "fullTestSuite"
in the test package.

14
00:00:42,970 --> 00:00:44,546
Add this code.

15
00:00:45,707 --> 00:00:48,617
This is some boiler plate code 
that will allow us to add tests

16
00:00:48,617 --> 00:00:51,061
and additional classes.

17
00:00:52,111 --> 00:00:56,996
Next, we'll create a TestDB class 
that extends Android test case,

18
00:00:58,477 --> 00:01:01,358
and add a test that creates our DB.

19
00:01:02,848 --> 00:01:06,807
The way this works is that the test-runner
will execute every function in our class

20
00:01:06,807 --> 00:01:10,573
that begins with "test" in the order that
they are declared in the class.

21
00:01:10,870 --> 00:01:13,832
Each test should have a failure path
that uses an assert.

22
00:01:14,654 --> 00:01:17,512
We start by deleting the database
before testing it,

23
00:01:17,512 --> 00:01:19,178
so, we have a clean test.

24
00:01:20,202 --> 00:01:24,101
Now, to run the test,
we go to the app start drop down

25
00:01:24,101 --> 00:01:26,100
and select <i>Edit Configurations.</i>

26
00:01:26,219 --> 00:01:28,524
We select <i>Plus</i>
to add a new configuration,

27
00:01:28,524 --> 00:01:31,341
and select <i>Android Tests</i>
against Module App.

28
00:01:32,238 --> 00:01:34,285
Now we name the test.

29
00:01:34,357 --> 00:01:38,034
Now note that it tends to target 
the emulator by default.

30
00:01:38,034 --> 00:01:40,066
I want to use an actual device,
I'm going to select

31
00:01:40,066 --> 00:01:41,673
<i>Show Chooser Dialogue.</i>

32
00:01:41,848 --> 00:01:44,698
Now we can just run the test 
against our device.

33
00:01:45,836 --> 00:01:47,477
And it passes.

34
00:01:48,348 --> 00:01:51,588
So, let's create a database insert 
and read test.

35
00:01:52,969 --> 00:01:56,831
At the beginning of it, we'll insert 
a single record into each table.

36
00:01:56,831 --> 00:02:00,408
We'll begin with some dummy data
for our location.

37
00:02:00,878 --> 00:02:04,024
We'll use the DBHelper 
to get a writable database.

38
00:02:04,172 --> 00:02:06,664
This is exactly how we will use
the database

39
00:02:06,664 --> 00:02:08,651
when we code it up in our project.

40
00:02:09,371 --> 00:02:13,871
We'll then create a ContentValues object,
which is a handy helper object

41
00:02:13,871 --> 00:02:16,391
that Android uses 
to store values and keys.

42
00:02:16,787 --> 00:02:18,858
We'll store our dummy data 
into the columns

43
00:02:18,858 --> 00:02:21,368
from our LocationEntry contract.

44
00:02:21,564 --> 00:02:24,651
Note that in order to make it work
with this abbreviated syntax,

45
00:02:24,651 --> 00:02:27,431
I did have to add 
some extra imports up here.

46
00:02:28,085 --> 00:02:30,467
We then insert the data 
into our database,

47
00:02:30,467 --> 00:02:33,066
and verify that we got a row back.

48
00:02:33,230 --> 00:02:37,645
Now I find that it's helpful 
to put log messages into my test cases.

49
00:02:38,116 --> 00:02:40,860
Now we'll use the database 
read operations

50
00:02:40,860 --> 00:02:44,099
to pull our dummy data
back out of the data base.

51
00:02:44,806 --> 00:02:47,246
We're making use 
of a custom projection here,

52
00:02:47,246 --> 00:02:49,986
which, in theory, would make it easy
to use our database cursor

53
00:02:49,986 --> 00:02:52,027
to query for the values we want.

54
00:02:52,332 --> 00:02:55,844
We use a custom projection here. 
Although, it's not required.

55
00:02:56,064 --> 00:02:59,769
If the custom projection wasn't there,
we would simply return all columns.

56
00:03:00,530 --> 00:03:02,658
A database cursor 
is a control structure

57
00:03:02,658 --> 00:03:06,076
that enables traversal 
over the records in a database.

58
00:03:06,076 --> 00:03:09,800
In Android, this is represented by
a cursor object.

59
00:03:10,165 --> 00:03:13,914
The cursor object allows one 
to traverse between records in a query

60
00:03:13,914 --> 00:03:17,669
and get the contents 
of any individual column from a query.

61
00:03:18,589 --> 00:03:21,350
Now, we use cursor.moveToFirst

62
00:03:21,350 --> 00:03:24,054
to populate our cursor 
with our row of data.

63
00:03:24,071 --> 00:03:26,610
We can then pull out our data by index.

64
00:03:27,918 --> 00:03:31,429
Finally, assert if it doesn't match 
our dummy data.

65
00:03:32,841 --> 00:03:35,506
And now, we get to run our tests again.

66
00:03:39,508 --> 00:03:41,315
And they passed.
