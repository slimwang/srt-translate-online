1
00:00:00,500 --> 00:00:03,220
As you continue to write more and
more conditional statements,

2
00:00:03,220 --> 00:00:06,780
sometimes you might run into
code that looks like this.

3
00:00:06,780 --> 00:00:10,089
Basically each one of these
conditional statements is checking for

4
00:00:10,089 --> 00:00:12,849
a specific value in one variable, and

5
00:00:12,849 --> 00:00:16,429
if that's true then the code inside
the if statement will be ran.

6
00:00:16,429 --> 00:00:18,689
Just to show you how this works,
let's run this code and

7
00:00:18,690 --> 00:00:20,445
see what its output back to us.

8
00:00:20,445 --> 00:00:24,753
All right, so because the viable option
is set to 3 we get print it back you

9
00:00:24,753 --> 00:00:27,824
selected option 3, so
not terribly complicated.

10
00:00:27,824 --> 00:00:32,335
Now what about told you there's another
way to achieved the same result without

11
00:00:32,335 --> 00:00:35,079
using any conditional statement.

12
00:00:35,079 --> 00:00:38,429
Well, in fact, there's just so
happens to be another way and

13
00:00:38,429 --> 00:00:40,769
that is by using a switch statement.

14
00:00:40,770 --> 00:00:44,010
Now switch statement only works in
situations like these where you have

15
00:00:44,009 --> 00:00:47,625
a bunch of chained if statements based
on the value of the same variable.

16
00:00:47,625 --> 00:00:50,375
Let me rewrite this code
using a switch statement and

17
00:00:50,375 --> 00:00:52,215
then I'll explain how it works.

18
00:00:52,215 --> 00:00:55,045
I'll keep the conditional statement
version here on this side so

19
00:00:55,045 --> 00:00:56,865
you can see the difference.

20
00:00:56,865 --> 00:00:57,575
Okay, so

21
00:00:57,575 --> 00:01:01,234
what I've done is I've wrapped all my
code inside of a switch statement.

22
00:01:01,234 --> 00:01:02,725
And just like it reads,

23
00:01:02,725 --> 00:01:07,484
I want to switch which piece of code
is ran based on the variable option.

24
00:01:07,484 --> 00:01:10,754
The other thing I've done is I have
replaced each if statement with a case

25
00:01:10,754 --> 00:01:14,140
clause where the value of the case
represents the value the variable

26
00:01:14,140 --> 00:01:18,629
option needs to be in order to run the
code that is contained underneath it.

27
00:01:18,629 --> 00:01:23,009
Basically, if the value of option
is say, 3 when our code reaches

28
00:01:23,010 --> 00:01:27,600
the switch statement, it's going to
look to see if a case like that exists.

29
00:01:27,599 --> 00:01:32,119
If it does, and in this case it does,
then it transfers control of that case,

30
00:01:32,120 --> 00:01:33,969
and continues executing.

31
00:01:33,969 --> 00:01:37,840
If it doesn't, then it bypasses
the switch statement completely.

32
00:01:37,840 --> 00:01:40,320
Just to show you how this works,
let's run this code, and

33
00:01:40,319 --> 00:01:41,799
see what is output back to us.

34
00:01:43,200 --> 00:01:44,019
Look at that.

35
00:01:44,019 --> 00:01:49,271
Instead of just printing you selected
option 3 we also got option 4,

36
00:01:49,271 --> 00:01:53,739
option 5 and option 6, so
why is this happening?

37
00:01:53,739 --> 00:01:57,219
Well, it's important to understand
exactly what is going on when you use

38
00:01:57,219 --> 00:01:58,709
a switch statement.

39
00:01:58,709 --> 00:02:01,649
Remember, once our code
reaches a switch statement,

40
00:02:01,650 --> 00:02:06,000
it looks to see if in case for
the bearable we are switching on exist.

41
00:02:06,000 --> 00:02:10,810
If it does, then it transfers control
to that case and continues executing.

42
00:02:10,810 --> 00:02:15,469
But what it doesn't do is prevent any
of the cases below it from not running.

43
00:02:15,469 --> 00:02:17,567
This behavior is called falling through.

44
00:02:17,567 --> 00:02:21,007
You see, you can think of a switch
statement almost like jumping you to

45
00:02:21,007 --> 00:02:24,090
a line of code,
based on the value of a variable.

46
00:02:24,090 --> 00:02:28,450
So in this case, option is set to 3 so
we jump to the case 3, and

47
00:02:28,449 --> 00:02:30,509
then we continue running our code.

48
00:02:30,509 --> 00:02:33,649
That's why the other print
statement get executed.

49
00:02:33,650 --> 00:02:36,390
If you actually want to
stop after a case is ran,

50
00:02:36,389 --> 00:02:39,199
then you will need to
use the keyword break.

51
00:02:39,199 --> 00:02:41,329
A break statement can be used
to exit our switch statement so

52
00:02:41,330 --> 00:02:42,520
that no other cases are ran.

53
00:02:43,810 --> 00:02:47,580
If I add break statements to each
case and then ran this code again,

54
00:02:47,580 --> 00:02:51,430
you see that we only get
back you selected option 3.

55
00:02:51,430 --> 00:02:55,780
Also, technically I don't need the break
statement here on the last case because

56
00:02:55,780 --> 00:02:57,650
this is the last case
in a switch statement.

57
00:02:57,650 --> 00:03:00,590
So there's a couple of things
to take away from this.

58
00:03:00,590 --> 00:03:03,409
Switch statements only work in
situations where you want to execute

59
00:03:03,409 --> 00:03:06,789
statements of code based on
the value of some variable.

60
00:03:06,789 --> 00:03:10,620
It's just another alternative and you
might see it come up from time to time.

61
00:03:10,620 --> 00:03:13,610
Another thing worth mentioning is that
you can use a switch statement on

62
00:03:13,610 --> 00:03:16,150
any type of data, not just numbers.

63
00:03:16,150 --> 00:03:18,920
Also, there are even some
scenarios where you might want to

64
00:03:18,919 --> 00:03:21,919
leverage the falling through
behavior of a switch statement.

65
00:03:21,919 --> 00:03:24,049
We'll look at that more
closely in the next section.

