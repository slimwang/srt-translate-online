1
00:00:00,250 --> 00:00:03,040
Here I'll show you an example of Hough running on

2
00:00:03,040 --> 00:00:06,980
a real image to show you that what it does well and what it doesn't do well.

3
00:00:06,980 --> 00:00:09,340
This is a picture of an American football field.

4
00:00:09,340 --> 00:00:12,380
This is American football, you know, played with a ball that's not round.

5
00:00:12,380 --> 00:00:15,660
We run an edge detector of some flavor, and we get out these edges, and

6
00:00:15,660 --> 00:00:17,760
those are some interesting looking edges.

7
00:00:17,760 --> 00:00:22,020
And then what we do is we run that through a Hough accumulator array.

8
00:00:22,020 --> 00:00:24,981
You can see the sinusoids here, sort of spread out, but

9
00:00:24,981 --> 00:00:29,328
you're seeing that these, these squares are all of these peaks that were found,

10
00:00:29,328 --> 00:00:32,299
and this is using some code that tries to look for peaks.

11
00:00:32,299 --> 00:00:35,503
So you'll notice that a whole bunch of them are very close together, right?

12
00:00:35,503 --> 00:00:39,625
So being very close together would mean that they're about the same angle, and

13
00:00:39,625 --> 00:00:42,343
that they're approximately in the same location.

14
00:00:42,343 --> 00:00:46,598
Same angle, same location, well, yes, I mean, here are lines that are the same

15
00:00:46,598 --> 00:00:49,950
angle and about the same location in here, and here, and here.

16
00:00:49,950 --> 00:00:52,570
And even here, about the same angle, about the same location.

17
00:00:52,570 --> 00:00:55,022
So you would expect to find peaks that are nearby.

18
00:00:55,022 --> 00:00:56,690
So I'm showing you this peak image here.

19
00:00:56,690 --> 00:01:00,075
If I were to draw the lines associated with each one of these peaks,

20
00:01:00,075 --> 00:01:03,280
I would see something that looks like this.

21
00:01:03,280 --> 00:01:06,860
So, there's good news and bad news on here.

22
00:01:06,860 --> 00:01:10,890
The good news is that it found an awful lot of line segments.

23
00:01:10,890 --> 00:01:14,480
Okay, you'll notice it also missed a bunch.

24
00:01:14,480 --> 00:01:15,870
Okay, why is that?

25
00:01:15,870 --> 00:01:18,780
Well, that has something to do with the nature of the edges that were found in

26
00:01:18,780 --> 00:01:19,910
the bins in the voting.

27
00:01:19,910 --> 00:01:22,650
These are all details that are going to matter in terms of how

28
00:01:22,650 --> 00:01:24,190
well you find the edges.

29
00:01:24,190 --> 00:01:29,810
You'll also notice that there is this cyan line, here, and

30
00:01:29,810 --> 00:01:32,970
that's the longest line segment found.

31
00:01:32,970 --> 00:01:35,830
Now, somebody should be saying, wait a minute, line segments?

32
00:01:35,830 --> 00:01:37,670
What do you mean by line segments?

33
00:01:37,670 --> 00:01:38,460
>> Line segments?

34
00:01:38,460 --> 00:01:40,420
What do you mean by line segments?

35
00:01:40,420 --> 00:01:45,470
>> Well, in the Hough transform, when you find a theta and d, or an m and b,

36
00:01:45,470 --> 00:01:47,790
for that matter, that's an infinite line, right?

37
00:01:47,790 --> 00:01:50,640
That, that's a line that goes as far as you want to,

38
00:01:50,640 --> 00:01:52,660
certainly goes through the entire image.

39
00:01:52,660 --> 00:01:58,460
If you want to find the line segments, of the points that voted for that line,

40
00:01:58,460 --> 00:02:02,760
and just connect them or just connect the two that are furthermost away.

41
00:02:02,760 --> 00:02:05,750
Or do some other operation of running along that infinite line,

42
00:02:05,750 --> 00:02:09,538
seeing if there's an edge point near there or anywhere near there.

43
00:02:09,538 --> 00:02:13,320
So you have to do some other operation besides the voting we just showed

44
00:02:13,320 --> 00:02:15,250
in order to find the line segments.

45
00:02:15,250 --> 00:02:15,890
The good news for

46
00:02:15,890 --> 00:02:18,970
you is that in your problem set, I just want you to find the infinite line.

47
00:02:18,970 --> 00:02:21,830
You don't have to worry about finding the line segment that's actually

48
00:02:21,830 --> 00:02:22,930
supported in the image.
