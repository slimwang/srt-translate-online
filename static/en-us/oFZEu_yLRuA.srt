1
00:00:00,080 --> 00:00:05,150
So we have seen that our predict not taken predictor, that is very simple to

2
00:00:05,150 --> 00:00:10,300
implement, is pretty accurate. For about 88% of all instructions it

3
00:00:10,300 --> 00:00:15,180
predicts correctly. So why do we even need any better predictors?

4
00:00:15,180 --> 00:00:19,630
Because anything better than this will require some investment of hardware to do

5
00:00:19,630 --> 00:00:24,310
the prediction better. We will answer this question in two ways. First, we will

6
00:00:24,310 --> 00:00:30,710
compare the CPI with the not taken predictor, that is, let's say 88% accurate.

7
00:00:30,710 --> 00:00:36,710
And with a better predictor that let's say 99% accurate. And we will do this for

8
00:00:36,710 --> 00:00:40,660
a five stage pipe line that results branches in the thirrd stage, so

9
00:00:40,660 --> 00:00:44,620
it has a two cycle penalty when ever there is a misprediction. So

10
00:00:44,620 --> 00:00:50,010
it has a two cycle penalty when there is a misprediction. We will also do it for

11
00:00:50,010 --> 00:00:54,250
a 14 stage pipeline that results branches in the eleventh stage, so

12
00:00:54,250 --> 00:00:58,460
it has a 10 cycle penalty for a misprediction, and for

13
00:00:58,460 --> 00:01:04,510
another pipeline that has 14 stages results branches in eleventh. Stage but

14
00:01:04,510 --> 00:01:08,780
this one executes 4 instructions per cycle, so this is very close to

15
00:01:08,780 --> 00:01:13,760
what modern processors look like. So for a not taken predictor and

16
00:01:13,760 --> 00:01:19,890
a 5 stage pipe, the CPA we get is 1 plus how often we mispredict,

17
00:01:19,890 --> 00:01:26,370
which is 12% of all instructions, times the penalty of a misprediction,

18
00:01:26,370 --> 00:01:32,079
which is 2 cycles, which gives us a total CPI of 1.24.

19
00:01:32,079 --> 00:01:37,540
What happens when we have a better predictor? Well,

20
00:01:37,540 --> 00:01:43,270
we now get 1 plus 0.01 only 1% of the time we mispredict and

21
00:01:43,270 --> 00:01:48,880
we get a 2 cycle penalty then. So the CPI now is 1.02.

22
00:01:48,880 --> 00:01:55,420
And now let's look also at the speed up that we get from a better predictor.

23
00:01:55,420 --> 00:01:59,430
If the frequency of the processor stays the same and it executes the same number

24
00:01:59,430 --> 00:02:04,900
of instructions, then the speedup is simply the improvement in the CPI.

25
00:02:04,900 --> 00:02:10,060
So the speedup would be the CPI of the not taken predictor but

26
00:02:10,060 --> 00:02:14,460
divided by the CPI of the better predictor. And

27
00:02:14,460 --> 00:02:21,060
we get a speed up of 1.22. This is actually a noticeable speed up.

28
00:02:21,060 --> 00:02:24,200
But things get more interesting when we have a deeper pipeline.

29
00:02:24,200 --> 00:02:29,630
In that case, we have a 1 plus still 12% I couldn't see for not taken.

30
00:02:29,630 --> 00:02:32,740
But this time the penalty because where is all the branches in the eleventh

31
00:02:32,740 --> 00:02:37,760
stage will be 10, and we get an overall CPI of 2.2. This

32
00:02:40,070 --> 00:02:46,170
is much worse than the 1 that we will be getting with no mispredictions.

33
00:02:46,170 --> 00:02:53,293
With a better predictor we get 1 plus 1% misprediction rate times 10 for

34
00:02:53,293 --> 00:02:57,810
a total CPI of 1.1. And that gives us a speed up of 2.

35
00:02:57,810 --> 00:03:02,980
So as we can see now, the better predictor is giving us twice the performance of

36
00:03:02,980 --> 00:03:06,190
the not taken predictor. And we have seen this already,

37
00:03:06,190 --> 00:03:12,350
that the deeper the pipeline, the more benefit we get from a better predictor.

38
00:03:12,350 --> 00:03:16,580
But what happens when we also do multiple instructions per cycle? So

39
00:03:16,580 --> 00:03:20,050
this processor can do four instructions in a cycle. So

40
00:03:20,050 --> 00:03:26,560
the ideal cycles per instruction is one-quarter of a cycle. We add to that

41
00:03:26,560 --> 00:03:31,870
how often we have missed predictions times how many cycles do we waste for

42
00:03:31,870 --> 00:03:37,150
a missed prediction? We still detect missed predictions in the eleventh stage.

43
00:03:37,150 --> 00:03:43,210
So everything done in the ten cycles after the branch was fetched, is wasted.

44
00:03:43,210 --> 00:03:49,080
So, we still have a ten cycle penalty here. And we get an overall CPI of 1.45.

45
00:03:49,080 --> 00:03:53,840
That's actually less than one instruction per cycle.

46
00:03:53,840 --> 00:03:58,460
It's better than a single instruction per cycle processor, but

47
00:03:58,460 --> 00:04:03,560
not that much better for something that should be four times as capable. Now,

48
00:04:03,560 --> 00:04:09,385
let's look at the better predictor, which should give us the ideal CPI plus

49
00:04:09,385 --> 00:04:15,420
1% of the time ten cycle penalty and that results in CPI

50
00:04:15,420 --> 00:04:21,940
of 0.35, or about three instructions per cycle even with the branches.

51
00:04:21,940 --> 00:04:27,640
If we compute the speed-up it's 4.14. So as you can see, if we

52
00:04:27,640 --> 00:04:32,550
have a deeper pipeline or if we are able to execute more instructions per cycle,

53
00:04:32,550 --> 00:04:38,900
then the better predictor is more important than in simpler processors.
