1
00:00:00,000 --> 00:00:04,000
What I'd like to do now is look into this issue in a little bit more detail.

2
00:00:04,000 --> 00:00:07,000
If we think about a piece of software as a mathematical object--

3
00:00:07,000 --> 00:00:09,000
and of course that's very natural for something like a square root function,

4
00:00:09,000 --> 00:00:11,000
but we can do this for any piece of software--

5
00:00:11,000 --> 00:00:14,000
if we think of a piece of software as a mathematical object,

6
00:00:14,000 --> 00:00:17,000
what we'll find is the software has a domain of values.

7
00:00:17,000 --> 00:00:20,000
The domain of values is just a set of possible values

8
00:00:20,000 --> 00:00:23,000
that constitutes the set of inputs that the software is designed to handle.

9
00:00:23,000 --> 00:00:27,000
Correspondingly, every piece of software also has a range.

10
00:00:27,000 --> 00:00:29,000
This is the set of possible outputs for the software.

11
00:00:29,000 --> 00:00:32,000
And so let's look at what the domain and range are for the square root function.

12
00:00:32,000 --> 00:00:39,000
Earlier we said that we probably would like to return the positive answer for a square root,

13
00:00:39,000 --> 00:00:43,000
and we also said that we were probably not going to be able to compute

14
00:00:43,000 --> 00:00:45,000
the square root of a negative number.

15
00:00:45,000 --> 00:00:48,000
We can account for both of those facts in the square root's domain and range

16
00:00:48,000 --> 00:00:52,000
by making it a function from non-negative real-valued numbers

17
00:00:52,000 --> 00:00:54,000
to non-negative real-valued numbers.

18
00:00:54,000 --> 00:00:57,000
Alternatively, if we're implementing some sort of mathematical software,

19
00:00:57,000 --> 00:01:00,000
we might want to define square root for all real-valued numbers,

20
00:01:00,000 --> 00:01:04,000
in which case the domain is the full set of real numbers,

21
00:01:04,000 --> 00:01:07,000
and then the range is the set of complex numbers.

22
00:01:07,000 --> 00:01:10,000
Actual computer code is not going to be able to deal with a full set of real numbers.

23
00:01:10,000 --> 00:01:14,000
Most real-valued numbers are not representable on a computer at all.

24
00:01:14,000 --> 00:01:18,000
So instead of dealing with the reals, we're going to worry about floating-point numbers.

25
00:01:18,000 --> 00:01:20,000
So for example, we might want to make square root

26
00:01:20,000 --> 00:01:24,000
a function from non-negative floating-point numbers

27
00:01:24,000 --> 00:01:26,000
to the set of non-negative floating-point numbers.

28
00:01:26,000 --> 00:01:28,000
But this isn't really very convenient.

29
00:01:28,000 --> 00:01:32,000
What should we do if somebody calls square root with a negative number?

30
00:01:32,000 --> 00:01:36,000
What languages like Python often do is declare square root

31
00:01:36,000 --> 00:01:38,000
over the full range of floating-point numbers

32
00:01:38,000 --> 00:01:44,000
and give outputs that are the positive ranged floating-point numbers

33
00:01:44,000 --> 00:01:48,000
unioned with a different behavior, which is to throw an exception.

34
00:01:48,000 --> 00:01:52,000
And so this bottom domain and range for floating point

35
00:01:52,000 --> 00:01:55,000
is the situation we actually get in many real programming languages.

36
00:01:55,000 --> 00:01:59,000
So now given the specification, let's get back to software testing and ask the question,

37
00:01:59,000 --> 00:02:04,000
should we test this square root function with negative inputs?

38
00:02:04,000 --> 00:02:08,000
Now let's bring the discussion back to testing and take a little quiz.

39
00:02:08,000 --> 00:02:12,000
The question is, given this specification here

40
00:02:12,000 --> 00:02:15,000
where square root maps the full set of floating-point numbers

41
00:02:15,000 --> 00:02:19,000
onto either a floating-point number or a math exception,

42
00:02:19,000 --> 00:02:21,000
should we test this code with negative inputs?

43
00:02:21,000 --> 00:02:24,000
And the answers are either yes, we should test it with negative inputs,

44
00:02:24,000 --> 99:59:59,999
or no, we should not. So take a minute now to mark down your answer.
