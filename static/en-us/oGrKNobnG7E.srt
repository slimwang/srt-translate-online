1
00:00:00,000 --> 00:00:03,000
At the end of the TLS handshake protocol,

2
00:00:03,000 --> 00:00:06,000
the server and the client have agreed on three keys,

3
00:00:06,000 --> 00:00:09,000
which they've extracted from the master secret--

4
00:00:09,000 --> 00:00:14,000
a key for a symmetric encryption function, an initialization vector for that encryption,

5
00:00:14,000 --> 00:00:16,000
and a key for a hash function.

6
00:00:16,000 --> 00:00:20,000
The goal now is to protect the traffic between the server and the client.

7
00:00:20,000 --> 00:00:23,000
This will be in the form of requests for webpages.

8
00:00:23,000 --> 00:00:27,000
A typical HTTP request is to get some webpage.

9
00:00:27,000 --> 00:00:30,000
Then the server will send a response.

10
00:00:30,000 --> 00:00:33,000
I should reiterate that TLS protects many kinds of traffic.

11
00:00:33,000 --> 00:00:35,000
The protocol is not specific to HTTP.

12
00:00:35,000 --> 00:00:38,000
What I'm really talking about here is HTTPS,

13
00:00:38,000 --> 00:00:43,000
but the record protocol is the same regardless of how we're actually requesting the traffic.

14
00:00:43,000 --> 00:00:46,000
So this response is the contents of some webpage,

15
00:00:46,000 --> 00:00:50,000
which can be quite long. This could be many kilobytes of data.

16
00:00:50,000 --> 00:00:55,000
We need a way to encrypt that response and send it back to the client.

17
00:00:55,000 --> 00:00:58,000
The responses will call M.

18
00:00:58,000 --> 00:01:02,000
We want both confidentiality and integrity checking,

19
00:01:02,000 --> 00:01:08,000
so we're also going to include a MAC, using the hash function,

20
00:01:08,000 --> 00:01:11,000
so that's going to be HMAC(M).

21
00:01:11,000 --> 00:01:15,000
This uses kh to key the hash function for HMAC.

22
00:01:15,000 --> 00:01:18,000
This is similar to what we talked about in Unit 2

23
00:01:18,000 --> 00:01:21,000
where we're hashing the message, but because it's a keyed hash function,

24
00:01:21,000 --> 00:01:23,000
it depends on the key as well.

25
00:01:23,000 --> 00:01:27,000
Finally, we're going to have some padding to fill up the block size.

26
00:01:27,000 --> 00:01:29,000
Now we want to send this whole response--the result of concatenating

27
00:01:29,000 --> 00:01:34,000
all of these--over the secure channel. We'll call this R.

28
00:01:34,000 --> 00:01:38,000
The way this is done with the TLS record protocol is to use CBC--

29
00:01:38,000 --> 00:01:42,000
that's cipher block chaining mode of operation and some encryption function.

30
00:01:42,000 --> 00:01:45,000
We talked about CBC mode in Unit 2.

31
00:01:45,000 --> 00:01:48,000
As a reminder, this is the way CBC works.

32
00:01:48,000 --> 00:01:50,000
There's an initialization vector.

33
00:01:50,000 --> 00:01:58,000
We break the message into blocks. We'll call those blocks m0, m1, up to m(m - 1).

34
00:01:58,000 --> 00:02:01,000
The first message block is XORed with initialization vector.

35
00:02:01,000 --> 00:02:04,000
The output of that is encrypted using a key.

36
00:02:04,000 --> 00:02:08,000
The key that's used is a key that resulted from the handshake protocol.

37
00:02:08,000 --> 00:02:10,000
This results in the first ciphertext block.

38
00:02:10,000 --> 00:02:14,000
That becomes the input to the next XOR.

39
00:02:14,000 --> 00:02:17,000
That's the way the first response is done,

40
00:02:17,000 --> 00:02:20,000
but in a session there might be multiple responses.

41
00:02:20,000 --> 00:02:25,000
When the next response is done, we don't want to do the whole handshake protocol again.

42
00:02:25,000 --> 00:02:29,000
What happens in the next response, whatever the next message block is--

43
00:02:29,000 --> 00:02:34,000
that's going to be m'0--will be encrypted using CBC mode again

44
00:02:34,000 --> 00:02:37,000
that will produce the ciphertext block at the beginning of the next message.

45
00:02:37,000 --> 00:02:39,000
What we need is an IV here.

46
00:02:39,000 --> 00:02:42,000
We don't want to use the same IV again.

47
00:02:42,000 --> 00:02:45,000
That would make it clear if m0 equals m0'.

48
00:02:45,000 --> 00:02:52,000
The approach that is taken by TLS is to use the last ciphertext block of the previous message

49
00:02:52,000 --> 00:02:55,000
as the IV for the first block of the next message.

50
00:02:55,000 --> 00:02:58,000
This effectively makes it seem like it's one long message.

51
00:02:58,000 --> 00:03:01,000
It seems like this is a good idea.

52
00:03:01,000 --> 00:03:04,000
It's certainly better than reusing the original IV.

53
00:03:04,000 --> 00:03:07,000
It's better than having to do the handshake protocol all over again.

54
00:03:07,000 --> 00:03:09,000
The handshake is quite expensive.

55
00:03:09,000 --> 00:03:12,000
It involves asymmetric cryptographic operations, which are very expensive

56
00:03:12,000 --> 00:03:15,000
compared to the symmetric ones we're using here.

57
00:03:15,000 --> 00:03:18,000
This message does raise an interesting vulnerability.

58
00:03:18,000 --> 00:03:22,000
Let's see if you can figure out what it is using a quiz.

59
00:03:22,000 --> 00:03:25,000
The question is suppose an adversary intercepts the first message.

60
00:03:25,000 --> 00:03:28,000
The adversary learns all the encrypted blocks.

61
00:03:28,000 --> 00:03:31,000
It doesn't learn anything else. It doesn't know the k value of the IV value.

62
00:03:31,000 --> 00:03:33,000
The handshake worked fine.

63
00:03:33,000 --> 00:03:37,000
The question is whether the adversary can learn whether some block is

64
00:03:37,000 --> 00:03:39,000
equal to some guess for that block.

65
00:03:39,000 --> 00:03:44,000
To make this more concrete, suppose the blocks are all 8 bits.

66
00:03:44,000 --> 00:03:49,000
The adversary has intercepted all the ciphertext blocks, but I'll only tell you three of them.

67
00:03:49,000 --> 00:03:58,000
C3 was 10101010. C4 was 01010101. C(n-1)--that's the last ciphertext block--was 11110000,

68
00:03:58,000 --> 00:04:04,000
and what the adversary wants to learn is if the value of m4 was equal to all zeroes.

69
00:04:04,000 --> 00:04:08,000
To do this, the adversary can set the value of m0',

70
00:04:08,000 --> 00:04:12,000
figure out how to make the server give a particular response,

71
00:04:12,000 --> 00:04:15,000
and examine the first ciphertext block.
