1
00:00:00,100 --> 00:00:02,722
Let's look at the solution for our control dependence

2
00:00:02,722 --> 00:00:05,720
quiz in a pipeline. We know how many instructions

3
00:00:05,720 --> 00:00:08,598
are taken branches. We don't really care that it's

4
00:00:08,598 --> 00:00:10,890
a ten stage pipeline. What we care about is that

5
00:00:10,890 --> 00:00:13,190
the branches are resolved in the sixth stage and

6
00:00:13,190 --> 00:00:16,590
that everything else works smoothly. So the actual CPI will

7
00:00:16,590 --> 00:00:21,730
be one per instruction. This happens for branches and

8
00:00:21,730 --> 00:00:25,730
all the other instructions. Plus for every taken branch, and

9
00:00:25,730 --> 00:00:29,490
that happens 25% of the instructions, we have

10
00:00:29,490 --> 00:00:33,950
a penalty of five cycles. Why? Because when

11
00:00:33,950 --> 00:00:35,840
we resolve the branch in the sixth stage.

12
00:00:36,890 --> 00:00:39,860
They have already been five stages worth of

13
00:00:39,860 --> 00:00:43,250
instructions. That we fetched from the wrong place

14
00:00:43,250 --> 00:00:45,064
and we have to throw them away. So

15
00:00:45,064 --> 00:00:47,759
following a branch like this there will be

16
00:00:47,759 --> 00:00:50,916
five cycles in which we don't finish anything,

17
00:00:50,916 --> 00:00:53,534
so we spend one cycle per instruction and

18
00:00:53,534 --> 00:00:57,540
for 25% of instructions. We spend additional five

19
00:00:57,540 --> 00:01:00,000
cycles for that instruction. Basically there are five

20
00:01:00,000 --> 00:01:02,720
empty cycles after it. If you multiply this

21
00:01:02,720 --> 00:01:09,580
out you get 2.25. As you can see, this CPI is very far from the ideal. Our

22
00:01:09,580 --> 00:01:14,250
processor is less than half as fast as it would be without the taken branches.
