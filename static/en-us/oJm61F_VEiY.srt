1
00:00:00,290 --> 00:00:04,930
So far we've been working with user
input by polling for it each frame.

2
00:00:04,930 --> 00:00:08,510
The other approach to user input,
is an event based approach,

3
00:00:08,510 --> 00:00:12,240
where we ask to be notified
when certain things happen.

4
00:00:12,240 --> 00:00:16,760
To do this in LibGDX, we need to create
an implementation of the input processor

5
00:00:16,760 --> 00:00:20,670
interface and
tell LibGDX to send events our way.

6
00:00:20,670 --> 00:00:23,250
Let's check out how we've
done that in this demo.

7
00:00:23,250 --> 00:00:27,620
We've now declared our BouncingBall
class to extend InputAdapter.

8
00:00:27,620 --> 00:00:31,244
InputAdapter, just like
ApplicationAdapter and ScreenAdapter,

9
00:00:31,244 --> 00:00:34,830
is a convenience implementation
of input processor.

10
00:00:34,830 --> 00:00:38,670
One of the call back methods
of InputProcessor is keyDown,

11
00:00:38,670 --> 00:00:41,070
which is called any
time a key is pressed.

12
00:00:41,070 --> 00:00:44,680
The argument is the keycode of
the key that was just pressed.

13
00:00:44,680 --> 00:00:48,480
In this case, we're just reusing
that randomKick function, and

14
00:00:48,480 --> 00:00:51,400
we'll fire it any time
the space bar is pressed.

15
00:00:51,400 --> 00:00:55,840
The return value of all InputProcessor
methods is a boolean signifying whether

16
00:00:55,840 --> 00:00:57,970
the input event was handled.

17
00:00:57,970 --> 00:01:00,480
This becomes relevant when you're
dealing with a more complex game,

18
00:01:00,480 --> 00:01:03,820
where there may be multiple classes
responding to input events.

19
00:01:03,820 --> 00:01:07,110
In this case, this is the only class
that cares about input events, so

20
00:01:07,110 --> 00:01:09,480
we can go ahead and
say that we dealt with the event.

21
00:01:09,480 --> 00:01:12,400
There's one more thing we need to do
before this works and that is we need to

22
00:01:12,400 --> 00:01:16,960
tell LibGDX that this class is
interested in receiving input events.

23
00:01:16,960 --> 00:01:20,435
The best place to do that,
is back in BallScreen, where we used

24
00:01:20,435 --> 00:01:25,410
GDX.input.set.InputProcessor, passing
in our new ball object.

25
00:01:26,430 --> 00:01:28,018
So here's our ball again.

26
00:01:28,018 --> 00:01:30,422
And we can grow it and shrink it,
just like we could before.

27
00:01:30,422 --> 00:01:33,340
And we can also move it around,
just like we could before.

28
00:01:33,340 --> 00:01:36,009
But now, if we hit spac ebar, it moves.

29
00:01:36,009 --> 00:01:38,960
And if we hold down space bar,
it doesn't continue to move.

30
00:01:38,960 --> 00:01:41,680
It only receives that event when
the space bar is initially pressed.
