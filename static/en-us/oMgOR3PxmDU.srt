1
00:00:00,180 --> 00:00:03,961
With our simplified pipeline, the application sends down triangles to be

2
00:00:03,961 --> 00:00:08,080
transformed to, to screen locations and then filled in. What happens if two

3
00:00:08,080 --> 00:00:12,276
triangles overlap on the screen? How is it decided which one is visible? One way

4
00:00:12,276 --> 00:00:16,200
to render it is what is called the painter's algorithm. The idea is to draw each

5
00:00:16,200 --> 00:00:20,480
object one on top of the other. To make this work, you sort objects based on

6
00:00:20,480 --> 00:00:24,835
their distance from the camera back to front. You then render the most distant

7
00:00:24,835 --> 00:00:29,894
object first. Render the next closest object. Render the next closest object

8
00:00:29,894 --> 00:00:33,860
than that and so on. The closest object is drawn last so it covers up the

9
00:00:33,860 --> 00:00:37,544
objects behind it. This isn't really how most painters actually paint but it

10
00:00:37,544 --> 00:00:40,875
could work in theory for, say, oil paints. I guess it makes some sense for

11
00:00:40,875 --> 00:00:44,363
computers to use it since it's a somewhat mindless way to paint a painting.
