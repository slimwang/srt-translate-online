1
00:00:00,342 --> 00:00:03,923
So part of the motivation is going to be ease of programming.

2
00:00:03,923 --> 00:00:09,648
So how is it specifically easier for someone to write a program that has these irregular,

3
00:00:09,648 --> 00:00:15,817
complex control structures, data structures, compared to not having dynamic parallelism?

4
00:00:15,817 --> 00:00:22,192
>> In the past, before the dynamic stuff on Keppler,

5
00:00:22,192 --> 00:00:30,367
which is a new GPU, in the past whenever you needed to make a new batch of work,

6
00:00:30,367 --> 00:00:35,269
you had to return to the CPU, which was the master controller, to go and launch that work for you.

7
00:00:35,269 --> 00:00:41,011
So if ever in my program I reached a point where I needed that matrix inversion or that FFT to be done,

8
00:00:41,011 --> 00:00:48,400
I had to halt my program, return to the CPU, have the CPU then launch this work for me that would complete,

9
00:00:48,400 --> 00:00:51,554
return back to the CPU, and the CPU would then have to restart me.

10
00:00:51,554 --> 00:00:57,567
In fact, if I could have to split my program in 2 around this moment where I needed this extra parallel work to be done,

11
00:00:57,567 --> 00:01:02,471
and suddenly, instead of having 1 smooth program, I have 2 fragments of program,

12
00:01:02,471 --> 00:01:04,768
I have state that I have to save across the two,

13
00:01:04,768 --> 00:01:08,571
and then I have my CPU having to get involved to manage and marshal this work.

14
00:01:08,571 --> 00:01:13,154
Suddenly, with the dynamic parallelism, I can just do this all compactly on the fly.

15
00:01:13,154 --> 00:01:16,783
If you like, the system does all that for you. It will save off your old program.

16
00:01:16,783 --> 00:01:21,985
It will run the new FFT for you. It will return the result to you, and it will continue where you left off.

17
00:01:21,985 --> 00:01:26,324
So, from the programmer's perspective, I'm no longer programming in 2 places at once.

18
00:01:26,324 --> 00:01:30,567
I'm no longer having the GPU and the CPU both tightly bound over my execution,

19
00:01:30,567 --> 00:01:38,502
and I no longer have to manage the portions of my program around where I need to launch this new work.

20
00:01:38,502 --> 00:01:43,740
I can just in-line it effectively, and it makes for a much simpler and more straightforward program.

21
00:01:43,740 --> 00:01:46,916
>>That's fantastic. And what about the performance implications?

22
00:01:46,916 --> 00:01:51,816
>>There's always a performance overhead bouncing backwards and forwards between the CPU and GPU.

23
00:01:51,816 --> 00:01:56,151
You've got the latencies of the PCI bus, which was the communication link.

24
00:01:56,151 --> 00:01:59,856
You've got the overheads of shutting down your first portion of your program,

25
00:01:59,856 --> 00:02:03,526
starting up the next portion back, and resuming right where you left.

26
00:02:03,526 --> 00:02:08,270
So those overheads get amortized. You save, potentially, data transfer across the buses.

27
00:02:08,270 --> 00:02:15,037
And in a way, something I feel is actually more important than this is that with the GPU,

28
00:02:15,037 --> 00:02:18,441
you're always trying to get as much work on that GPU as possible.

29
00:02:18,441 --> 00:02:24,109
You can much more easily overlap the new work that you're doing with

30
00:02:24,109 --> 00:02:26,089
other stuff that's still going on in the GPU.

31
00:02:26,089 --> 00:02:32,455
I don't have to shut down completely and fire up an FFT. I can, in-line, do all of these things while

32
00:02:32,455 --> 00:02:34,791
something else useful is going on at the same time.

33
00:02:34,791 --> 00:02:39,127
And so, this ability to asynchronously do this work from different threads all at the same time.

34
00:02:39,127 --> 00:02:41,827
Remember you've got thousands of threads on the GPU,

35
00:02:41,827 --> 00:02:47,657
they can all be doing this, I mean modular resources, they can all be doing this at the same time,

36
00:02:47,657 --> 00:02:51,912
and so you can get a much easier overlap between the different pieces of work you're doing,

37
00:02:51,912 --> 00:02:54,216
and it's definitely much easier to keep the GPU busy,

38
00:02:54,216 --> 00:02:58,000
and that gives you a lot of potential for more performance.
