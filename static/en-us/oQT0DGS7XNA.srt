1
00:00:00,770 --> 00:00:04,200
Let's drill down a bit into a very simple connector, the procedural call

2
00:00:04,200 --> 00:00:10,090
connector provided by all, all your friendly programming languages.

3
00:00:10,090 --> 00:00:14,390
First of all there's a flow of control, that is, control is with

4
00:00:14,390 --> 00:00:19,320
the calling routine and then control shifts to be with the called routine. So

5
00:00:19,320 --> 00:00:24,600
that's a coordination role. There's transmission of data

6
00:00:26,000 --> 00:00:30,380
via the parameters, so that's a communication role. Procedure call is so

7
00:00:30,380 --> 00:00:36,160
common, so pervasive a part of programming languages that it's basis for

8
00:00:36,160 --> 00:00:40,090
all of the composite connectors, that is when we make a complex connector out of

9
00:00:40,090 --> 00:00:46,440
simpler connectors. For example in the Java method call we have the caller,

10
00:00:46,440 --> 00:00:51,710
the callee, there's exactly one, at any given time there's exactly one caller

11
00:00:51,710 --> 00:00:56,470
and one callee. So we can say the fan in is one and the fan out is one as well.

12
00:00:56,470 --> 00:00:59,500
Sounds simple right, but there's all kinds of variations. For

13
00:00:59,500 --> 00:01:04,470
example,. How are the parameters transmitted? Well, there's call by reference,

14
00:01:04,470 --> 00:01:08,690
call by value, call by name. There could be default values,

15
00:01:08,690 --> 00:01:13,050
keyword parameters, inline parameters. If there's a return value,

16
00:01:13,050 --> 00:01:18,730
things could be provided by invocation records, by a hash table.

17
00:01:18,730 --> 00:01:23,880
And even the order of valuation is a variant. Are the arguments which might

18
00:01:23,880 --> 00:01:28,590
themselves be procedure calls, method calls evaluated left to right,

19
00:01:28,590 --> 00:01:34,810
right to left or whatever. Some languages provide for multiple entry points

20
00:01:34,810 --> 00:01:40,210
that is when you call a method you may enter that method in different places.

21
00:01:40,210 --> 00:01:45,760
Is the invocation explicit as it would be in a method call, or is it

22
00:01:45,760 --> 00:01:50,670
implicit as it might be in an object oriented line in which there's delegation,

23
00:01:50,670 --> 00:01:56,260
and the ultimate callee is known specifically by the caller. Usually we think

24
00:01:56,260 --> 00:02:01,030
of procedure calls as synchronous but there are also situations where procedure

25
00:02:01,030 --> 00:02:05,970
calls can be asynchronous. We mentioned the possibility of different fan ins and

26
00:02:05,970 --> 00:02:10,630
fan outs, okay? And then there's the issue, the variation that is allowed as far

27
00:02:10,630 --> 00:02:15,610
as accessibility is concerned. We know, for example, programming languages allow

28
00:02:15,610 --> 00:02:21,710
for only private access that is within the same class. Or protected access,

29
00:02:21,710 --> 00:02:27,030
to the method from the particular class or it's parents, or children classes,

30
00:02:27,030 --> 00:02:31,610
and then public acc, access, where any other, the caller can be anyplace
