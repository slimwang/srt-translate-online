1
00:00:00,070 --> 00:00:02,886
Let's put to work what we learned about arithmetic with a pretty interesting

2
00:00:02,886 --> 00:00:07,532
problem. The digital camera in your smart phone takes pictures where a red

3
00:00:07,532 --> 00:00:12,903
green and blue values can be any number between 0 and 355. That's 256

4
00:00:12,903 --> 00:00:16,807
possibilities for red, the same for green and for blue and that's millions of

5
00:00:16,807 --> 00:00:22,320
possibilities, giving you pretty big files. Now here on planet Earth that's not

6
00:00:22,320 --> 00:00:26,978
a problem. But here on our rocket ship that's exploring a distant planet and it

7
00:00:26,978 --> 00:00:31,194
wants to send photos back, maybe a less arrange of colors would preferably

8
00:00:31,194 --> 00:00:37,862
suffice. So, I'd like to cut down this range into the much smaller range from 0

9
00:00:37,862 --> 00:00:43,968
to 5. And I'd like to do that in a uniform way. What I mean was that if I look

10
00:00:43,968 --> 00:00:48,832
at the interval of numbers between 0 and 255, that approximately 1 6th of them

11
00:00:48,832 --> 00:00:56,697
should amount to 0. The next 1 6th to 1, the next 1 6th to 2 and so on. Here's

12
00:00:56,697 --> 00:01:02,585
a way of doing that. First multiply by 6. And then divide by the length of this

13
00:01:02,585 --> 00:01:08,061
interval. Then all the numbers in here will be 0, all the numbers in here will

14
00:01:08,061 --> 00:01:15,326
be 1, here they will be 2 and the the last region there will be 5. Now I'll

15
00:01:15,326 --> 00:01:23,740
give you a number of choices for the Java code for doing this. And I'm asking

16
00:01:23,740 --> 00:01:25,509
you to pick the right one.
