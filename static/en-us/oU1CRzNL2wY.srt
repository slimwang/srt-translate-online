1
00:00:00,670 --> 00:00:04,780
Okay Katherine, our app is coming along,
but there is one major problem with it.

2
00:00:04,780 --> 00:00:06,150
>> What's the problem?

3
00:00:06,150 --> 00:00:08,029
>> Well it only orders
two cups of coffee.

4
00:00:08,029 --> 00:00:09,560
>> What's wrong with two cups of coffee?

5
00:00:09,560 --> 00:00:11,630
>> Well three is better than two,
four is better than three,

6
00:00:11,630 --> 00:00:12,720
sometimes I need more.

7
00:00:12,720 --> 00:00:14,170
>> Okay I get it, you need more coffee.

8
00:00:14,170 --> 00:00:16,560
So what I can do is just
change the code, so

9
00:00:16,560 --> 00:00:18,230
that instead of two it just says three.

10
00:00:18,230 --> 00:00:21,470
>> Okay, so in our code here,
we will need to change

11
00:00:21,470 --> 00:00:25,620
the number of cups of coffee
>> Here and here.

12
00:00:25,620 --> 00:00:28,810
So what if I want ten cups of coffee for
myself and my friends later on?

13
00:00:28,810 --> 00:00:30,835
>> You have that many friends?

14
00:00:30,835 --> 00:00:33,580
Oh.
Well, we need something else, then.

15
00:00:33,580 --> 00:00:34,810
>> Yeah, we need a better solution.

16
00:00:34,810 --> 00:00:37,770
>> How about, oh, I know,
we can use variables.

17
00:00:37,770 --> 00:00:38,890
>> Variables?

18
00:00:38,890 --> 00:00:40,460
As in something that varies?

19
00:00:40,460 --> 00:00:42,310
>> Yeah,
a variable doesn't have a fixed value.

20
00:00:42,310 --> 00:00:48,001
You can think of a variable
like a box [SOUND] like this.

21
00:00:48,001 --> 00:00:48,760
>> Okay.

22
00:00:48,760 --> 00:00:50,220
>> Yeah, so this is a variable.

23
00:00:50,220 --> 00:00:52,420
It's a box and
you can put a value inside of it.

24
00:00:52,420 --> 00:00:53,770
>> It says int.

25
00:00:53,770 --> 00:00:55,520
>> Yeah, int stands for integer.

26
00:00:55,520 --> 00:00:58,490
>> Okay, so you can put an integer,
or a number, inside of this box.

27
00:00:58,490 --> 00:00:59,170
>> Exactly!

28
00:00:59,170 --> 00:01:00,740
And you can even give it a name.

29
00:01:00,740 --> 00:01:04,910
>> Let's call it number of
cups of coffees ordered.

30
00:01:04,910 --> 00:01:05,410
>> Okay.

31
00:01:07,020 --> 00:01:10,086
You had to pick a long name.

32
00:01:10,086 --> 00:01:12,576
Ordered Barely fits.

33
00:01:12,576 --> 00:01:13,770
>> Okay.
>> Okay.

34
00:01:13,770 --> 00:01:17,260
>> So now we can refer to
this variable using this name

35
00:01:17,260 --> 00:01:19,600
in a code instead of
putting the value two.

36
00:01:19,600 --> 00:01:20,580
>> Okay.

37
00:01:20,580 --> 00:01:23,440
>> Later we can also
update it if we want.

38
00:01:23,440 --> 00:01:24,850
Let's put the value inside now.

39
00:01:24,850 --> 00:01:26,370
How are we going to do that?

40
00:01:26,370 --> 00:01:29,584
Well, I have some Post-its.

41
00:01:29,584 --> 00:01:31,440
>> Where did those come from?

42
00:01:31,440 --> 00:01:34,660
>> Let's call the number of cups
of coffees ordered to be 2.

43
00:01:34,660 --> 00:01:36,710
>> Why only 2?

44
00:01:36,710 --> 00:01:40,834
>> One for me and one for
my friend, Katherine.

45
00:01:40,834 --> 00:01:41,750
>> Thank you.

46
00:01:41,750 --> 00:01:46,620
[LAUGH] So now we have a variable that
is called numberOfCoffeesOrdered and

47
00:01:46,620 --> 00:01:48,120
it holds the value 2.

48
00:01:48,120 --> 00:01:50,260
>> Let's implement this in our code.

49
00:01:50,260 --> 00:01:53,180
>> Before we were using
a literal value to represent

50
00:01:53,180 --> 00:01:55,840
the quantity of coffee cups ordered.

51
00:01:55,840 --> 00:01:59,330
A literal means a fixed value,
like the number 2.

52
00:01:59,330 --> 00:02:02,822
Technically the 5 and
this 2 are also literal values but

53
00:02:02,822 --> 00:02:07,126
we're just talking about using
literals for the quantity right now.

54
00:02:07,126 --> 00:02:10,470
So if we say the quantity is 2
cups of coffee ordered, then

55
00:02:10,470 --> 00:02:15,000
when we calculate the price, we have
to do 2 times 5, since each cup is $5.

56
00:02:15,000 --> 00:02:19,550
If we want to charge the customer for
a paper cup because they didn't bring

57
00:02:19,550 --> 00:02:23,540
their own cup and they like to waste
trees, then we charge them $2 per cup.

58
00:02:23,540 --> 00:02:26,830
So that's 2 cups times $2.

59
00:02:26,830 --> 00:02:30,320
When we use a literal, you can see
that it's not ideal because we have to

60
00:02:30,320 --> 00:02:33,640
keep repeating the quantity
number over and over again.

61
00:02:33,640 --> 00:02:34,560
On the other hand,

62
00:02:34,560 --> 00:02:39,200
we can use a variable to represent
the quantity of coffee cups ordered.

63
00:02:39,200 --> 00:02:43,250
So if we say the quantity is this
variable called numberOfCoffees,

64
00:02:43,250 --> 00:02:46,755
then when we calculate the price,
we can just use that variable name,

65
00:02:46,755 --> 00:02:50,520
numberOfCoffees, and
multiply it by $5 a cup.

66
00:02:50,520 --> 00:02:54,315
To calculate the charge for the paper
cup, again we take the variable name,

67
00:02:54,315 --> 00:02:58,190
numberOfCoffees, and
we just multiply it by 2, for $2.

68
00:02:58,190 --> 00:03:01,590
So the difference between these two
is that instead of the actual literal

69
00:03:01,590 --> 00:03:03,780
value, we use a variable.

70
00:03:03,780 --> 00:03:06,500
And then the value of that variable

71
00:03:06,500 --> 00:03:10,490
will be substituted when we
actually evaluate this expression.

72
00:03:10,490 --> 00:03:12,330
So when we go and calculate the price,

73
00:03:12,330 --> 00:03:15,740
we just have to go check what this
value is before we multiply by 5.

74
00:03:15,740 --> 00:03:19,900
The one additional step that you need
to do when you use a variable is,

75
00:03:19,900 --> 00:03:20,570
in the beginning,

76
00:03:20,570 --> 00:03:25,370
to set the variable, numberOfCoffees,
to have an initial value.

77
00:03:25,370 --> 00:03:29,760
In this case we set it to an initial
value of 2, which is also a literal.

78
00:03:29,760 --> 00:03:33,970
But this time we only use the literal in
one place instead of in multiple places.

79
00:03:33,970 --> 00:03:36,010
The end result is still
going to be the same,

80
00:03:36,010 --> 00:03:38,730
because of numberOfCoffees
will map to the value 2.

81
00:03:38,730 --> 00:03:41,860
So the quantity will still be 2,
the price will still be 10,

82
00:03:41,860 --> 00:03:44,310
and the paper cup
charge will still be 4.

83
00:03:44,310 --> 00:03:47,270
The real advantage to this
approach is that you can

84
00:03:47,270 --> 00:03:50,190
change the variable value at any time.

85
00:03:50,190 --> 00:03:53,300
Say I want to change
the numberOfCoffees to be 3.

86
00:03:53,300 --> 00:03:55,430
I just need to change it
in one place here and

87
00:03:55,430 --> 00:03:57,880
then everything else is still accurate.

88
00:03:57,880 --> 00:04:00,080
The quantity is still
the numberOfCoffees,

89
00:04:00,080 --> 00:04:02,080
which now has a value of 3.

90
00:04:02,080 --> 00:04:04,475
The price is now
numberOfCoffees times 5.

91
00:04:04,475 --> 00:04:06,653
And the value is 3 times 5, and

92
00:04:06,653 --> 00:04:10,543
the paper cup charge is still
numberOfCoffees times 2.

93
00:04:10,543 --> 00:04:12,834
Which is now 3 times 2.

94
00:04:12,834 --> 00:04:14,069
If we were using a literal,

95
00:04:14,069 --> 00:04:16,555
then we would have to change
the quantity to be 3 here.

96
00:04:16,555 --> 00:04:19,625
We would have to update the price
calculation to be 3 times 5.

97
00:04:19,625 --> 00:04:22,105
And the paper cup
charge to be 3 times 2.

98
00:04:22,105 --> 00:04:24,125
So when we use a variable,

99
00:04:24,125 --> 00:04:27,390
we don't have to refer to
the specific value each time.

100
00:04:27,390 --> 00:04:29,390
We can just refer to
the variable name and

101
00:04:29,390 --> 00:04:32,520
that will automatically get us
the latest value in that variable.

102
00:04:33,730 --> 00:04:37,120
We can look more closely at what
the actual code would look like for

103
00:04:37,120 --> 00:04:39,370
creating and using a variable.

104
00:04:39,370 --> 00:04:43,720
To create the variable,
we say int numberOfCoffees = 2.

105
00:04:43,720 --> 00:04:48,410
This creates a variable for
us with this name numberOfCoffees and

106
00:04:48,410 --> 00:04:51,990
it puts the value 2
inside that variable box.

107
00:04:51,990 --> 00:04:56,740
These next two lines use the variable
that we created on the first line

108
00:04:56,740 --> 00:04:59,000
in order to update this screen.

109
00:04:59,000 --> 00:05:03,040
We can display the number of coffees,
which involves looking at that variable

110
00:05:03,040 --> 00:05:05,720
and checking the value inside,
which is two.

111
00:05:05,720 --> 00:05:07,650
So we show 2 here.

112
00:05:07,650 --> 00:05:09,330
To display the price.

113
00:05:09,330 --> 00:05:14,360
We look at the value of the variable,
numberOfCoffees, which has 2 inside.

114
00:05:14,360 --> 00:05:18,170
So, we say 2 x 5 equals 10,
and so the price is $10.

115
00:05:19,310 --> 00:05:20,947
I can easily change this code, so

116
00:05:20,947 --> 00:05:23,650
that the numberOfCoffees
ordered is 3 instead of 2.

117
00:05:23,650 --> 00:05:27,570
For the box that represents
our variable, numberOfCoffees,

118
00:05:27,570 --> 00:05:31,300
now we put 3 as initial
value inside this variable.

119
00:05:31,300 --> 00:05:33,160
These two lines of code
don't have to change though,

120
00:05:33,160 --> 00:05:34,710
because we are using the variable name.

121
00:05:35,710 --> 00:05:38,460
When we called display numberOfCoffees.

122
00:05:38,460 --> 00:05:40,930
The value in this variable is 3.

123
00:05:40,930 --> 00:05:42,325
So we show the quantity 3.

124
00:05:43,600 --> 00:05:48,260
To display price we look at the value
for the numberOfCoffees which is 3.

125
00:05:48,260 --> 00:05:51,070
And we multiply that by 5 so
that gives us $15.

126
00:05:51,070 --> 00:05:55,480
This is what the code change
would like in Android Studio.

127
00:05:56,700 --> 00:06:00,690
Currently it's using the literal
value of 2 for the quantity.

128
00:06:00,690 --> 00:06:06,608
Instead let's create a variable,
I'll type int numberOfCoffees 2.

129
00:06:07,840 --> 00:06:10,740
So now I have a variable
with the value 2.

130
00:06:10,740 --> 00:06:14,640
By the way, this text is grayed out and
it says variable number of coffees is

131
00:06:14,640 --> 00:06:19,580
never used because I never referred to
it again, but I am about to use it now.

132
00:06:19,580 --> 00:06:21,430
Instead of displaying
the literal value 2,

133
00:06:21,430 --> 00:06:24,140
I'm going to switch it to
use the variable name.

134
00:06:24,140 --> 00:06:28,140
It pops up as an autocomplete option,
so you can just hit Enter and

135
00:06:28,140 --> 00:06:29,940
it fills it in automatically for you.

136
00:06:29,940 --> 00:06:33,180
Then this variable name is no longer
gray because now we've used it

137
00:06:33,180 --> 00:06:34,730
in at least one place.

138
00:06:34,730 --> 00:06:37,180
I can do the same for displayPrice.

139
00:06:37,180 --> 00:06:40,140
Instead of the using the literal
value of 2, I'm going to change

140
00:06:40,140 --> 00:06:44,820
it to be the variable numberOfCoffees,
and I just hit Enter to auto complete.

141
00:06:44,820 --> 00:06:48,630
Technically I could also create
a variable for the price value of 5.

142
00:06:48,630 --> 00:06:50,880
However, it's only used in one place so

143
00:06:50,880 --> 00:06:53,360
I might as well just leave
it as a literal value.

144
00:06:53,360 --> 00:06:56,100
Okay, now let's save the code and
run it on the device.

145
00:06:56,100 --> 00:06:57,830
And this is what it looks
like on the device.

146
00:06:57,830 --> 00:07:00,800
When you hit Order, the quantity is 2,
and the price is $10.00.

147
00:07:00,800 --> 00:07:06,500
This is exactly the same behavior as
before, but now our code is more robust.

148
00:07:06,500 --> 00:07:10,620
Robust means that the code is less
prone to errors in the future.

149
00:07:10,620 --> 00:07:13,020
For example, if someone else
is trying to change this code,

150
00:07:13,020 --> 00:07:16,400
and they were trying to use
the quantity in many other places,

151
00:07:16,400 --> 00:07:20,840
then they would have to change the
number 2 in so many different places.

152
00:07:20,840 --> 00:07:24,200
Instead if we used a variable,
numberOfCoffees, then we only have to

153
00:07:24,200 --> 00:07:28,210
change it in one place and then
everything will automatically update.

154
00:07:28,210 --> 00:07:31,330
This way someone won't
mistakenly miss a line of code

155
00:07:31,330 --> 00:07:34,060
that needs to have the latest
numberOfCoffees ordered.

156
00:07:34,060 --> 00:07:36,040
They only have to change
it in one single place.

157
00:07:37,290 --> 00:07:39,280
Now before you go ahead and
do this in Android Studio,

158
00:07:39,280 --> 00:07:42,780
I want you to to first practice
doing it in this quiz.

159
00:07:42,780 --> 00:07:46,620
Go ahead and type out this
line of code right below it.

160
00:07:46,620 --> 00:07:49,790
This line of code will create
a new integer variable, and

161
00:07:49,790 --> 00:07:53,330
these two lines will use
the integer variable.

162
00:07:53,330 --> 00:07:56,110
The reason why I want you to practice
this first is that you can pay

163
00:07:56,110 --> 00:07:59,220
attention to every single
character when you type it.

164
00:07:59,220 --> 00:08:02,310
Otherwise, if you miss a character,
you may get an error in Android Studio,

165
00:08:02,310 --> 00:08:04,790
and it may be hard to
read the error message.

166
00:08:04,790 --> 00:08:07,840
So go ahead and
type it exactly as you see it.

167
00:08:07,840 --> 00:08:11,190
This is helping you become aware
of every single character here,

168
00:08:11,190 --> 00:08:14,850
whether it's a capital letter or
a lower case, or if there's no spaces or

169
00:08:14,850 --> 00:08:16,550
if there is a space.

170
00:08:16,550 --> 00:08:19,090
You'll also start getting
used to the rules of Java

171
00:08:19,090 --> 00:08:24,100
in terms of creating a variable or using
a variable, and as you learned before,

172
00:08:24,100 --> 00:08:27,140
every Java code statement also
has to end with a semicolon.

173
00:08:27,140 --> 00:08:29,230
If you type this incorrectly,
for example,

174
00:08:29,230 --> 00:08:32,200
the variable name,
that would give you an error in Java.

175
00:08:32,200 --> 00:08:35,580
However, other things are more
conventional and best practices.

176
00:08:35,580 --> 00:08:40,090
For example adding a space before and
after operators like this.

177
00:08:40,090 --> 00:08:43,690
If you don't follow this spacing, it
won't give you an explicit error however

178
00:08:43,690 --> 00:08:47,940
it's just better programming practice
to follow these code style conventions.

179
00:08:47,940 --> 00:08:50,020
That way it's easier to read your code,

180
00:08:50,020 --> 00:08:53,020
when you're done typing this out go
ahead and continue to the next video.
