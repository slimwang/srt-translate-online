1
00:00:00,380 --> 00:00:04,560
To address the places where our current visualization is lacking in terms of

2
00:00:04,560 --> 00:00:08,950
communicating our message, one of the key things to focus on is how do

3
00:00:08,950 --> 00:00:14,210
we efficiently and effectively communicate a change over time.

4
00:00:14,210 --> 00:00:18,170
Our static chart shows the trend over time, but

5
00:00:18,170 --> 00:00:23,080
what doesn't come across as clearly are some of the nuances in the data.

6
00:00:23,080 --> 00:00:26,150
One way to address this might be to try visualizing our

7
00:00:26,150 --> 00:00:28,670
data with finer granularity.

8
00:00:28,670 --> 00:00:33,800
Instead of showing the aggregate attendance for a given year, let's see how it

9
00:00:33,800 --> 00:00:39,460
comes across if we visualize every individual game and its attendance.

10
00:00:39,460 --> 00:00:45,660
As I mentioned before, the next task at hand is removing the code in dimple.js,

11
00:00:45,660 --> 00:00:48,680
that deals with axis, and coding it up in D3 itself.

12
00:00:48,680 --> 00:00:52,150
Well, with this code here, both creates axis and

13
00:00:52,150 --> 00:00:55,508
changes how the x axis is formatted.

14
00:00:55,508 --> 00:00:59,810
We're simply going to remove all of it and build it back up in D3.

15
00:00:59,810 --> 00:01:04,050
In lesson one we saw how to work with D3's extend and

16
00:01:04,050 --> 00:01:09,260
scale functions to convert data values into proper pixel values.

17
00:01:09,260 --> 00:01:14,610
The first step in figuring out how to draw our x and y axis in D3 is

18
00:01:14,610 --> 00:01:19,400
to first find the extent of each of the columns which we'd like to visualize.

19
00:01:19,400 --> 00:01:23,830
In this case our x axis is going to represent the date column, and

20
00:01:23,830 --> 00:01:27,000
our y axis is going to represent the attendance.

21
00:01:27,000 --> 00:01:30,671
Remember that the extent function finds the minimum and

22
00:01:30,671 --> 00:01:36,480
maximum for a given data based on what you return from the assessor function.

23
00:01:36,480 --> 00:01:41,310
In this case, as applied to our data, extent runs the function we've

24
00:01:41,310 --> 00:01:46,610
passed on each element of our data, in this case the argument D.

25
00:01:46,610 --> 00:01:49,390
And based on what you return from this function,

26
00:01:49,390 --> 00:01:54,370
extent internally keeps track of the minimum and maximum values its seen.

27
00:01:54,370 --> 00:01:57,650
The same principle applies to our attendance.

28
00:01:57,650 --> 00:02:03,260
And notice that we're using the same function, d3.extent in both of these cases,

29
00:02:03,260 --> 00:02:07,260
but since the function we're actually running is slightly different,

30
00:02:07,260 --> 00:02:08,940
in the first case, we're returning date,

31
00:02:08,940 --> 00:02:11,658
in the second case we're returning attendance.

32
00:02:11,658 --> 00:02:16,490
time_extent and count_extent are actually very different objects.
