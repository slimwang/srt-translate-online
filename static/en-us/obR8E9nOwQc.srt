1
00:00:00,170 --> 00:00:04,330
Moving on to the next line in our code,
we see that running the newSaga () ;

2
00:00:04,330 --> 00:00:08,560
function should have the effect of
creating a new execution context, so

3
00:00:08,560 --> 00:00:13,140
that it can make room for new variables
that are local to that function column.

4
00:00:13,140 --> 00:00:17,710
Then, the new context will become the
interpreter's new current context, for

5
00:00:17,710 --> 00:00:19,590
as long as that function is running.

6
00:00:19,590 --> 00:00:23,100
This first line will add a new
variable to the current scope.

7
00:00:23,100 --> 00:00:26,390
The next line adds another
variable to the red scope,

8
00:00:26,390 --> 00:00:28,550
this time holding a function value.

9
00:00:28,550 --> 00:00:32,340
At this point, we'll have to do
a lookup on the saga variable,

10
00:00:32,340 --> 00:00:36,610
In order to know which function
these parens are attempting to call.

11
00:00:36,610 --> 00:00:40,510
The interpreter handles this by
checking whether the name saga

12
00:00:40,510 --> 00:00:44,220
has any meaning in its current
context; the red context.

13
00:00:44,220 --> 00:00:48,150
The interpreter checks the scope of
the current execution context, and

14
00:00:48,150 --> 00:00:52,630
finds that the saga variable is
available locally in that red scope.

15
00:00:52,630 --> 00:00:55,160
The value found there
is a function object.

16
00:00:55,160 --> 00:00:57,040
And the parens next to the word saga,

17
00:00:57,040 --> 00:01:00,290
tell the interpreter to
invoke that function.

18
00:01:00,290 --> 00:01:04,150
Running the saga function will
build a new execution context, and

19
00:01:04,150 --> 00:01:06,770
move the interpreter's
lookup focus into it.

20
00:01:06,770 --> 00:01:09,810
The first line adds a new
variable to that local scope, and

21
00:01:09,810 --> 00:01:12,790
now we do lookups on all
three of our variables.

22
00:01:12,790 --> 00:01:14,540
Again, the interpreter will do this,

23
00:01:14,540 --> 00:01:17,990
by scanning outward from its
current context, looking for

24
00:01:17,990 --> 00:01:22,635
the closest containing context
that can satisfy a requested name.

25
00:01:22,635 --> 00:01:24,365
First it goes looking for hero,

26
00:01:24,365 --> 00:01:28,415
which can't be found in the containing
context, and so it falls through.

27
00:01:28,415 --> 00:01:30,125
Falling through to the red context,

28
00:01:30,125 --> 00:01:33,425
the interpreter does not find
a hero variable there either.

29
00:01:33,425 --> 00:01:36,155
Finally, falling all the way
through to the global context,

30
00:01:36,155 --> 00:01:38,320
the variable is found there.

31
00:01:38,320 --> 00:01:41,560
The string being logged is
beginning to get built up.

32
00:01:41,560 --> 00:01:44,090
Next, it goes looking for
the deed variable.

33
00:01:44,090 --> 00:01:45,940
What will be the output of that lookup?
