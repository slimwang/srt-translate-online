1
00:00:00,140 --> 00:00:02,480
We'll start with protocol definitions.

2
00:00:02,480 --> 00:00:05,200
Here's a protocol I'm calling Souschef.

3
00:00:05,200 --> 00:00:09,350
Much like a class or struct definition,
it begins with the word protocol,

4
00:00:09,350 --> 00:00:10,650
followed by the protocol name,

5
00:00:10,650 --> 00:00:15,230
and then in between curly braces we
define its properties and methods.

6
00:00:15,230 --> 00:00:18,380
This protocol has no properties and
two methods.

7
00:00:18,380 --> 00:00:20,760
You can see that the methods
aren't implemented here,

8
00:00:20,760 --> 00:00:22,960
that's left up to the conforming type.

9
00:00:22,960 --> 00:00:26,100
Here, we just have a list of method
signatures indicating parameters and

10
00:00:26,100 --> 00:00:27,640
return types.

11
00:00:27,640 --> 00:00:31,710
The next step is for a class, struct,
or enum to adopt the protocol.

12
00:00:31,710 --> 00:00:33,540
And the code looks like this.

13
00:00:33,540 --> 00:00:35,320
Here, we have a class called Roommate.

14
00:00:35,320 --> 00:00:38,330
We want the Roommate class to
adopt the Souschef protocol, so

15
00:00:38,330 --> 00:00:41,000
an instance of the Roommate
class can help make dinner.

16
00:00:41,000 --> 00:00:42,200
To adopt the protocol,

17
00:00:42,200 --> 00:00:46,320
we just type a colon after the class
name and then the name of the protocol.

18
00:00:46,320 --> 00:00:49,980
And what does the compiler
have to say here?

19
00:00:49,980 --> 00:00:53,280
Type Roommate does not
conform to protocol Souschef.

20
00:00:53,280 --> 00:00:56,550
This message is letting us know that we
still need to implement the methods in

21
00:00:56,550 --> 00:00:57,610
the protocol.

22
00:00:57,610 --> 00:01:01,940
Remember, placing the name Souschef here
is akin to the class signing a contract

23
00:01:01,940 --> 00:01:05,300
to implement the methods listed
by the Souschef protocol.

24
00:01:05,300 --> 00:01:07,570
We still need to fulfill our contract.

25
00:01:07,570 --> 00:01:11,660
So here in the Roommate class, we need
to conform to the Souschef protocol,

26
00:01:11,660 --> 00:01:15,870
meaning we need to write implementations
for the chop and rinse methods.

27
00:01:15,870 --> 00:01:18,160
They will each take in
a vegetable string and

28
00:01:18,160 --> 00:01:22,470
return a string indicating that their
sous chef duties have been fulfilled.

29
00:01:22,470 --> 00:01:26,360
Soon enough, you'll be writing
protocols for your own custom classes.

30
00:01:26,360 --> 00:01:30,310
Still, more often than not, you'll be
implementing protocols written by Apple.

31
00:01:30,310 --> 00:01:32,930
Let's practice the syntax we
just learned on a protocol from

32
00:01:32,930 --> 00:01:34,710
the Swift standard library.

33
00:01:34,710 --> 00:01:36,638
This protocol is called Equitable.

34
00:01:36,638 --> 00:01:40,400
We can Cmd+click on the protocol
name to see its definition.

35
00:01:41,690 --> 00:01:43,500
There's a lot of commenting here, but

36
00:01:43,500 --> 00:01:46,230
the protocol actually
only has this one method.

37
00:01:46,230 --> 00:01:47,650
It takes in two values,

38
00:01:47,650 --> 00:01:50,670
the left-hand side in the right-hand
side of an equality and

39
00:01:50,670 --> 00:01:53,840
returns a bool indicating whether
the two values are equal.

40
00:01:53,840 --> 00:01:56,870
In other words, with this method
in the equitable protocol

41
00:01:56,870 --> 00:02:00,940
we can define what it takes for
two instances of a class to be equal.

42
00:02:00,940 --> 00:02:02,890
As you just saw, to adopt the protocol,

43
00:02:02,890 --> 00:02:05,990
we just type equitable
here after the class name.

44
00:02:05,990 --> 00:02:08,050
To conform to the protocol,

45
00:02:08,050 --> 00:02:12,210
we need to implement this function which
is named with just the equal operator.

46
00:02:12,210 --> 00:02:15,110
And we'll say that two
instances of the class Roommate

47
00:02:15,110 --> 00:02:19,430
are only equal if they have the same
name and the same bool value for hungry.

48
00:02:19,430 --> 00:02:22,910
You'll notice that I've implemented
this function outside of the class.

49
00:02:22,910 --> 00:02:25,810
That's because operators
are global functions.

50
00:02:25,810 --> 00:02:27,800
And now,
we can test whether two instances of

51
00:02:27,800 --> 00:02:29,020
the Roommate class are equal.
