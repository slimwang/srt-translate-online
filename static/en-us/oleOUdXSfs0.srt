1
00:00:00,000 --> 00:00:02,000
Okay, so here we are in the IDE.

2
00:00:02,000 --> 00:00:05,000
This is going to be basically the same file we had before,

3
00:00:05,000 --> 00:00:08,000
the link class and all of the links that we make.

4
00:00:08,000 --> 00:00:12,000
I'm importing a new module that's built into Python called SQLite3,

5
00:00:12,000 --> 00:00:16,000
and this allows us to use SQLite in Python, which is pretty cool.

6
00:00:16,000 --> 00:00:20,000
I've got some code here which creates an in-memory SQLite database.

7
00:00:20,000 --> 00:00:23,000
You can see some SQL here that we haven't discussed

8
00:00:23,000 --> 00:00:26,000
for creating the links table and then inserting all of the links

9
00:00:26,000 --> 00:00:28,000
into that table.

10
00:00:28,000 --> 00:00:30,000
This code isn't super important to you right now,

11
00:00:30,000 --> 00:00:34,000
but if you're curious, I just basically made a SQL table

12
00:00:34,000 --> 00:00:38,000
with all of that link data, and I've given you some instructions here.

13
00:00:38,000 --> 00:00:40,000
And let's play around with this a little bit.

14
00:00:40,000 --> 00:00:45,000
The important thing is that we've got this db variable, this global variable.

15
00:00:45,000 --> 00:00:48,000
That's going to represent our SQLite database right here.

16
00:00:48,000 --> 00:00:51,000
And let me show you how to run some SQL.

17
00:00:51,000 --> 00:00:56,000
I can say c = db.execute, and I can give some SQL.

18
00:00:56,000 --> 00:01:00,000
In this case, I'll say select * from links.

19
00:01:00,000 --> 00:01:04,000
And this doesn't have a where clause like we talked about before.

20
00:01:04,000 --> 00:01:06,000
Where clauses aren't required.

21
00:01:06,000 --> 00:01:08,000
They're only required if you don't want to fetch everything.

22
00:01:08,000 --> 00:01:11,000
This little bit of SQL here, select * from links,

23
00:01:11,000 --> 00:01:15,000
just selects all of the columns from the links table.

24
00:01:15,000 --> 00:01:18,000
And what this creates is what's called a cursor,

25
00:01:18,000 --> 00:01:23,000
and a cursor is just a position in the database.

26
00:01:23,000 --> 00:01:27,000
We can call this function fetchall on c, on the cursor,

27
00:01:27,000 --> 00:01:30,000
to actually load all of the data out of the database into this

28
00:01:30,000 --> 00:01:34,000
list of results, and in this particular case, I'll just return the results.

29
00:01:34,000 --> 00:01:39,000
We'll go ahead and give this a run.

30
00:01:39,000 --> 00:01:41,000
That's a lot of data.

31
00:01:41,000 --> 00:01:43,000
We executed our SQL, and we saw some results.

32
00:01:43,000 --> 00:01:45,000
Let's change this up a little bit.

33
00:01:45,000 --> 00:01:50,000
Let's change this <i>from a</i> to title.

34
00:01:50,000 --> 00:01:52,000
We'll just look at the titles from the links,

35
00:01:52,000 --> 00:01:54,000
and let's go ahead and run this.

36
00:01:54,000 --> 00:01:56,000
Now I see a list of all of our titles.

37
00:01:56,000 --> 00:01:58,000
That's kind of cool.

38
00:01:58,000 --> 00:02:02,000
Let me show you some other things we can do before we have quiz time.

39
00:02:02,000 --> 00:02:04,000
Let's change this back to *.

40
00:02:04,000 --> 00:02:06,000
One of the things we can do is we can iterate over a cursor.

41
00:02:06,000 --> 00:02:11,000
I can say for t in c.

42
00:02:11,000 --> 00:02:14,000
Okay, so I want to make these variables a little bit more clear,

43
00:02:14,000 --> 00:02:16,000
so for cursor, for link_tuple.

44
00:02:16,000 --> 00:02:18,000
Tuple is a reserved word.

45
00:02:18,000 --> 00:02:23,000
If we iterate over our cursor, we get the results one by one from the database,

46
00:02:23,000 --> 00:02:25,000
and we get them back as a tuple, not as our link objects,

47
00:02:25,000 --> 00:02:28,000
so what we actually want to do is make the link objects,

48
00:02:28,000 --> 00:02:34,000
so we can do that by saying this: link equals--little link, our little instance--

49
00:02:34,000 --> 00:02:39,000
equals capital link(*link_tuple).

50
00:02:39,000 --> 00:02:42,000
And this is a Python syntax for passing in all of the

51
00:02:42,000 --> 00:02:47,000
parameters in this tuple as arguments to this function.

52
00:02:47,000 --> 00:02:49,000
In this case, it's not really a function.

53
00:02:49,000 --> 00:02:51,000
It's the constructor link to make the object.

54
00:02:51,000 --> 00:02:56,000
But now we have a link object, and here let's say print link.votes.

55
00:02:56,000 --> 00:02:58,000
Let's go ahead and run this.

56
00:02:58,000 --> 00:03:02,000
What this should be doing is running the SQL, select * from links,

57
00:03:02,000 --> 00:03:07,000
iterating over all of the results that are returned to us as a tuple,

58
00:03:07,000 --> 00:03:14,000
converting those tuples into a link object, and then printing .votes.

59
00:03:14,000 --> 00:03:18,000
We can see it printed all of the votes for our links.

60
00:03:18,000 --> 00:03:20,000
Pretty neat.

61
00:03:20,000 --> 00:03:22,000
Let me just show you one last thing, because I'll explain what's going on here.

62
00:03:22,000 --> 00:03:24,000
I think this might be new to some of you.

63
00:03:24,000 --> 00:03:29,000
If I were just to print the link tuple like this,

64
00:03:29,000 --> 00:03:32,000
and we'll just print exactly what we get back from the cursor,

65
00:03:32,000 --> 00:03:34,000
I'll show you what that does.

66
00:03:34,000 --> 00:03:38,000
This prints each row of the database as a Python tuple,

67
00:03:38,000 --> 00:03:43,000
so you can see one row here, and the columns are in order that I define them,

68
00:03:43,000 --> 00:03:47,000
and I conveniently define them in the same order that the constructor expects them.

69
00:03:47,000 --> 00:03:50,000
You've got the ID of the link.

70
00:03:50,000 --> 00:03:53,000
You've got the user ID, the time it was submitted.

71
00:03:53,000 --> 00:03:56,000
This is in epoch time, second since 1970.

72
00:03:56,000 --> 00:04:01,000
This would be the number of votes, and then the title here,

73
00:04:01,000 --> 00:04:04,000
and the URL for each of these links.

74
00:04:04,000 --> 00:04:09,000
And if you put a * in front of a tuple like this

75
00:04:09,000 --> 00:04:13,000
and pass it into an object's constructor or in any function,

76
00:04:13,000 --> 00:04:17,000
the arguments get put in place like that, so that's all that was happening there.

77
00:04:17,000 --> 00:04:19,000
And I'll show you real quick how we created this table.

78
00:04:19,000 --> 00:04:23,000
This is SQL, and you can see I create table links,

79
00:04:23,000 --> 00:04:28,000
and I've defined the columns here, id, submitter<u>id, submitted</u>time,

80
00:04:28,000 --> 00:04:32,000
votes, title, url, and you can see I included the types,

81
00:04:32,000 --> 00:04:36,000
so anyway, that's not super important, but it's there.

82
00:04:36,000 --> 00:04:38,000
All right, time for a quiz.

83
00:04:38,000 --> 00:04:42,000
What I'd like you to do is make this query function return the number of votes

84
00:04:42,000 --> 00:04:44,000
that the link with ID 2 has.

85
00:04:44,000 --> 00:04:46,000
Now, I've written some of the function for you,

86
00:04:46,000 --> 00:04:49,000
and all you need to do is put in this SQL here

87
00:04:49,000 --> 00:04:51,000
to find that link.

88
00:04:51,000 --> 00:04:54,000
What these other lines do is they take the cursor return

89
00:04:54,000 --> 00:04:58,000
from db.execute here, and it runs this function called fetchone on it,

90
00:04:58,000 --> 00:05:01,000
which basically returns the first result.

91
00:05:01,000 --> 00:05:05,000
And then we use the * syntax to pass that into the link constructor,

92
00:05:05,000 --> 00:05:09,000
which makes our link object, and then we return link.votes.

93
00:05:09,000 --> 00:05:13,000
All you have to do in this quiz is figure out the SQL.

94
00:05:13,000 --> 00:05:17,000
Good luck.
