1
00:00:00,000 --> 00:00:03,000
I'm going to motivate this with a somewhat silly example,

2
00:00:03,000 --> 00:00:06,000
but something that will illustrate many of the properties that are important for

3
00:00:06,000 --> 00:00:08,000
cryptographic protocols.

4
00:00:08,000 --> 00:00:10,000
As usual, we have Alice and Bob.

5
00:00:10,000 --> 00:00:15,000
She's Alice, in case you cannot recognize her, and we have Bob.

6
00:00:15,000 --> 00:00:20,000
Alice and Bob want to decide whose turn it is to charge the Robo-dog.

7
00:00:20,000 --> 00:00:24,000
If you can't recognize my drawing, this is indeed a Robo-dog.

8
00:00:24,000 --> 00:00:25,000
But they're not in the same place.

9
00:00:25,000 --> 00:00:27,000
They're trying to do this over the telephone.

10
00:00:27,000 --> 00:00:30,000
They would normally do this by tossing a coin.

11
00:00:30,000 --> 00:00:34,000
So they decide, let's try to toss a coin over the telephone.

12
00:00:34,000 --> 00:00:37,000
So this is the first protocol they try.

13
00:00:37,000 --> 00:00:43,000
Before describing the protocol, I want to define more carefully what I mean by a protocol.

14
00:00:43,000 --> 00:00:46,000
We've actually seen a few already, but I haven't defined what a protocol means.

15
00:00:46,000 --> 00:00:50,000
A protocol involves 2 or more parties,

16
00:00:50,000 --> 00:00:54,000
and what it is, it's a precisely defined sequence of steps,

17
00:00:54,000 --> 00:00:58,000
and what each step can involve is some computation as well as communication.

18
00:00:58,000 --> 00:01:03,000
Communication can involve sending data between the parties in the protocol.

19
00:01:03,000 --> 00:01:07,000
One way to think of this--it's really the same thing we mean by a procedure in computing.

20
00:01:07,000 --> 00:01:11,000
That's something that we can define precisely enough that we can follow it mechanically,

21
00:01:11,000 --> 00:01:18,000
but unlike a procedure, which is thought of normally as being followed by 1 processor

22
00:01:18,000 --> 00:01:21,000
or at least a set of processors controlled by the same party.

23
00:01:21,000 --> 00:01:24,000
With a protocol, we have 2 or more participants involved,

24
00:01:24,000 --> 00:01:28,000
so that's why it involves both computation as well as communication.

25
00:01:28,000 --> 00:01:32,000
In this class, we're mostly concerned with cryptographic protocols,

26
00:01:32,000 --> 00:01:35,000
which means 1 more thing--that it involves secrets.

27
00:01:35,000 --> 00:01:41,000
The usual reason we want to involve secrets is because we want it to be a security protocol.

28
00:01:41,000 --> 00:01:45,000
A security protocol means that it provides some guarantees,

29
00:01:45,000 --> 00:01:51,000
even if some of the participants cheat, and that means they don't follow the steps as specified.

30
00:01:51,000 --> 00:01:54,000
So now let's describe our first protocol for this,

31
00:01:54,000 --> 00:01:59,000
and this is intended as a cryptographic security protocol.

32
00:01:59,000 --> 00:02:04,000
It's participants are 2 parties: Alice and Bob.

33
00:02:04,000 --> 00:02:08,000
The Robo-dog that needs charging is certainly involved in this process,

34
00:02:08,000 --> 00:02:11,000
but is not an active participant in the protocol.

35
00:02:11,000 --> 00:02:12,000
Here are the steps.

36
00:02:12,000 --> 00:02:16,000
The protocol starts by Alice initiating it.

37
00:02:16,000 --> 00:02:19,000
She initiates the protocol by sending Bob a message that says,

38
00:02:19,000 --> 00:02:21,000
"I'll toss the coin, you call it."

39
00:02:21,000 --> 00:02:28,000
Bob calls the coin and so he sends a message back to Alice that says, "I call tails."

40
00:02:28,000 --> 00:02:33,000
At this point, Alice tosses the coin, and she responds to Bob that sorry--

41
00:02:33,000 --> 00:02:35,000
with the results of the toin coss.

42
00:02:35,000 --> 00:02:38,000
In this case, she'll respond, "Sorry, it landed on the edge,"

43
00:02:38,000 --> 00:02:41,000
and it's Bob's turn to walk the Robo-dog.

44
00:02:41,000 --> 00:02:45,000
So I think I won't insult your intelligence by asking a quiz about whether

45
00:02:45,000 --> 00:02:47,000
this protocol works well.

46
00:02:47,000 --> 00:02:51,000
If it was a nonsecurity protocol, and Alice and Bob trusted each other completely,

47
00:02:51,000 --> 00:02:52,000
maybe it would work.

48
00:02:52,000 --> 00:02:56,000
Bob can trust Alice to actually toss a coin and tell Bob the real result.

49
00:02:56,000 --> 00:02:59,000
If it's a security protocol, it doesn't work at all.

50
00:02:59,000 --> 00:03:04,000
If Bob doesn't trust Alice, Alice decides the result whether Bob wins or loses.
