1
00:00:00,000 --> 00:00:02,000
Now, for the moment I want to get back to this other idea

2
00:00:02,000 --> 00:00:05,000
of moving along the elegance direction without changing

3
00:00:05,000 --> 00:00:09,000
the other dimensions, and that's often called "refactoring."

4
00:00:09,000 --> 00:00:13,000
That is, we take a program, and we change it around

5
00:00:13,000 --> 00:00:16,000
not that it does something different but that it's clearer

6
00:00:16,000 --> 00:00:18,000
and easier to maintain.

7
00:00:18,000 --> 00:00:21,000
Now, here's a line from my hand_rank program

8
00:00:21,000 --> 00:00:24,000
that bothers me a little bit, and what bothers me here

9
00:00:24,000 --> 00:00:28,000
is I'm repeating myself, so I'm asking

10
00:00:28,000 --> 00:00:31,000
do we have 3 of a kind in the ranks, and do we have 2 of a kind in the ranks?

11
00:00:31,000 --> 00:00:34,000
Okay, if we do, that's a full house, and then what are we going to return?

12
00:00:34,000 --> 00:00:38,000
6 is the marker for a full house, and then the 3 of a kind

13
00:00:38,000 --> 00:00:40,000
and the 2 of a kind.

14
00:00:40,000 --> 00:00:43,000
But I'm repeating myself, and so that violates

15
00:00:43,000 --> 00:00:47,000
what's known as the "Don't repeat yourself" principle

16
00:00:47,000 --> 00:00:49,000
or sometimes called "DRY."

17
00:00:49,000 --> 00:00:51,000
I thought to myself is there a different way to do this?

18
00:00:51,000 --> 00:00:55,000
Can I refactor my routine so that I'm not repeating myself,

19
00:00:55,000 --> 00:00:58,000
so that I only have to say this once?

20
00:00:58,000 --> 00:01:01,000
And in doing that, I came up with a different representation for a hand,

21
00:01:01,000 --> 00:01:03,000
for the ranks of a hand.

22
00:01:03,000 --> 00:01:05,000
Consider this hand.

23
00:01:05,000 --> 00:01:09,000
We have a 7, a 10, a 7,

24
00:01:09,000 --> 00:01:12,000
a 9, and another 7.

25
00:01:12,000 --> 00:01:16,000
Now, in the representation we have so far--and note I'm leaving out

26
00:01:16,000 --> 00:01:18,000
the suits here, they don't matter--in the representation we have so far,

27
00:01:18,000 --> 00:01:20,000
we would sort these in order.

28
00:01:20,000 --> 00:01:22,000
We'd have the 10 and the 9 and the three 7s,

29
00:01:22,000 --> 00:01:24,000
and then we'd go through and we'd say is there 3 of a kind,

30
00:01:24,000 --> 00:01:27,000
is there 4 of a kind, is there 2 of a kind, and so on.

31
00:01:27,000 --> 00:01:29,000
But I want to come up now with a representation

32
00:01:29,000 --> 00:01:32,000
that takes into account everything we need to know about this hand,

33
00:01:32,000 --> 00:01:37,000
and I can do that using this function that I'll call "group."

34
00:01:37,000 --> 00:01:42,000
We group this hand, and group is going to return 2 values.

35
00:01:42,000 --> 00:01:46,000
First it's going to return the counts for each of the different kinds

36
00:01:46,000 --> 00:01:50,000
of card ranks, and so here

37
00:01:50,000 --> 00:01:55,000
we have three 7s and one 10 and one 9.

38
00:01:55,000 --> 00:01:57,000
And those counts are going to be sorted biggest first.

39
00:01:57,000 --> 00:02:01,000
And then the second value that groups is going to return

40
00:02:01,000 --> 00:02:04,000
is the card ranks for each of these,

41
00:02:04,000 --> 00:02:07,000
and so what did we have 3 of?

42
00:02:07,000 --> 00:02:09,000
We had three 7s. And what do we have 1 of?

43
00:02:09,000 --> 00:02:13,000
Well, 10s and 9s, and we're going to put those in order of biggest first.

44
00:02:13,000 --> 00:02:17,000
This representation of taking this hand

45
00:02:17,000 --> 00:02:21,000
and turning it into a counts and a list of ranks

46
00:02:21,000 --> 00:02:24,000
is in some ways a better representation of exactly

47
00:02:24,000 --> 00:02:26,000
how a poker hand counts.

48
00:02:26,000 --> 00:02:30,000
Here's the new hand_rank function using this new representation for hands.

49
00:02:30,000 --> 00:02:32,000
We call it in the same way. We pass in a hand.

50
00:02:32,000 --> 00:02:37,000
And now we create the groups and pull out the counts and the ranks,

51
00:02:37,000 --> 00:02:40,000
and then we do what we did before where we say

52
00:02:40,000 --> 00:02:43,000
we have to deal with the ace-high straight,

53
00:02:43,000 --> 00:02:46,000
and so change the ranks if we have to.

54
00:02:46,000 --> 00:02:51,000
And then similarly to before, we check to see if we have a straight or a flush,

55
00:02:51,000 --> 00:02:54,000
and now we can check for what the results are, and here

56
00:02:54,000 --> 00:02:59,000
we're returning a single number, 0 through 9,

57
00:02:59,000 --> 00:03:01,000
and in every case we return the ranks.

58
00:03:01,000 --> 00:03:03,000
Know that what we're doing here is we're actually

59
00:03:03,000 --> 00:03:05,000
changing the signature of hand_rank.

60
00:03:05,000 --> 00:03:09,000
This version of hand_rank is going to return different results

61
00:03:09,000 --> 00:03:12,000
than the previous version of hand_rank, but that's okay

62
00:03:12,000 --> 00:03:16,000
because it's still going to work in conjunction

63
00:03:16,000 --> 00:03:21,000
with our evaluation in that it's going to return the higher value

64
00:03:21,000 --> 00:03:24,000
for the higher hand, even though it's returning slightly different values.

65
00:03:24,000 --> 00:03:26,000
Why is it slightly different?

66
00:03:26,000 --> 00:03:29,000
Because we're only returning a single number,

67
00:03:29,000 --> 00:03:33,000
and then we always return the set of ranks,

68
00:03:33,000 --> 00:03:35,000
and those ranks are there even when they aren't needed,

69
00:03:35,000 --> 00:03:39,000
so for example, when we have a straight, we don't really need all the cards in the ranks.

70
00:03:39,000 --> 00:03:42,000
And in the previous version of hand_rank, we only return the high card.

71
00:03:42,000 --> 00:03:45,000
Here we're returning all of them, and what we do

72
00:03:45,000 --> 00:03:50,000
is we go through and we say, "What are the counts?"

73
00:03:50,000 --> 00:03:54,000
If the counts are just 5 of a kind, that's the highest.

74
00:03:54,000 --> 00:03:57,000
Otherwise we check for straight and flush, like we did before.

75
00:03:57,000 --> 00:04:01,000
Otherwise 4 of a kind, and the only way we can have 4 of a kind

76
00:04:01,000 --> 00:04:03,000
is if the counts are 4 and 1.

77
00:04:03,000 --> 00:04:06,000
Otherwise we check for a full house, and the only way we can have a full house

78
00:04:06,000 --> 00:04:08,000
is if the counts are 3 and 2.

79
00:04:08,000 --> 00:04:10,000
Then we look for flush and straight. Those are next in order.

80
00:04:10,000 --> 00:04:12,000
Then we look for 3 of a kind.

81
00:04:12,000 --> 00:04:15,000
The only way to have 3 of a kind is 3, 1, 1.

82
00:04:15,000 --> 00:04:17,000
2 pairs has to be 2, 2, 1.

83
00:04:17,000 --> 00:04:21,000
One pair has to be 2, 1, 1, 1.

84
00:04:21,000 --> 00:04:24,000
And then high card would be 1, 1, 1, 1, 1,

85
00:04:24,000 --> 00:04:26,000
but we don't have to explicitly check for that.

86
00:04:26,000 --> 00:04:28,000
We just have 0 as the final value.

87
00:04:28,000 --> 00:04:30,000
This is simpler. We're not repeating ourselves.

88
00:04:30,000 --> 00:04:32,000
We have a nice representation here.

89
00:04:32,000 --> 00:04:36,000
Also, one thing that I really like about this representation

90
00:04:36,000 --> 00:04:39,000
is it showed me a new fact about poker hands

91
00:04:39,000 --> 00:04:43,000
that I had never realized before, and that if we look at these values,

92
00:04:43,000 --> 00:04:48,000
(5,) (4, 1) (3, 2) (3, 1, 1) (2, 2, 1) (2, 1, 1, 1)

93
00:04:48,000 --> 00:04:51,000
and then here--I haven't written it but it would be 1, 1, 1, 1, 1--

94
00:04:51,000 --> 00:04:54,000
these are all the partitions of the number 5,

95
00:04:54,000 --> 00:04:57,000
so in mathematics, a partition of an integer

96
00:04:57,000 --> 00:05:00,000
is the set of numbers that add up to that integer.

97
00:05:00,000 --> 00:05:08,000
And for the number 5, that partitions into 7 possible ways,

98
00:05:08,000 --> 00:05:14,000
and it turns out that poker recognizes all 7 of those as a different thing.

99
00:05:14,000 --> 00:05:16,000
Poker has a name for all the partitions,

100
00:05:16,000 --> 00:05:19,000
and the even more amazing thing is look,

101
00:05:19,000 --> 00:05:21,000
they're in lexicographic order.

102
00:05:21,000 --> 00:05:24,000
If we sort the 7 partitions, they're in exactly

103
00:05:24,000 --> 00:05:26,000
the same order as the poker hands.

104
00:05:26,000 --> 00:05:28,000
5 comes first, that's the highest.

105
00:05:28,000 --> 00:05:31,000
4, 1 comes next. That's the next highest, and so on.

106
00:05:31,000 --> 00:05:34,000
I never knew that before about the mapping between poker hands

107
00:05:34,000 --> 99:59:59,999
and partitions, but this representation of hand rank makes it clear.
