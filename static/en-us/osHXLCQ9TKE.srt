1
00:00:00,008 --> 00:00:04,183
I'm going to argue, that the best answer to this is no. This code is already

2
00:00:04,183 --> 00:00:07,989
fairly complex. It's got two loops in it, lots of statement and it doesn't

3
00:00:07,989 --> 00:00:12,100
handle lots of cases. So let's think about the cases that it doesn't handle. It

4
00:00:12,100 --> 00:00:16,450
doesn't handle the case where the, initial days are in the same month. And it

5
00:00:16,450 --> 00:00:20,146
doesn't handle that, because we're adding all the days in month one, to the days

6
00:00:20,146 --> 00:00:23,450
and if day two was also in month one, we're going to add that we're going to get

7
00:00:23,450 --> 00:00:27,440
the wrong answer. We could handle this. Maybe we subtract the difference between

8
00:00:27,440 --> 00:00:30,576
the days. We have a special case for that. Maybe we need to do something

9
00:00:30,576 --> 00:00:33,526
different with this loop to account for when the months are the same. But that's

10
00:00:33,526 --> 00:00:36,868
painful. We're going to need a new special case. Adding one special case is

11
00:00:36,868 --> 00:00:40,389
okay. There are other cases it doesn't handle. It doesn't handle the case where

12
00:00:40,389 --> 00:00:43,914
month 2 is before month 1. And this could happen if the years are different, it

13
00:00:43,914 --> 00:00:47,034
would still be the case that the second date is after the first date even though

14
00:00:47,034 --> 00:00:50,054
the second month is before the first month. And this won't handle that

15
00:00:50,054 --> 00:00:54,014
correctly. The other thing it doesn't handle quite correctly is counting days in

16
00:00:54,014 --> 00:00:57,782
leap years. This loop where we add the days in year one we have to be careful

17
00:00:57,782 --> 00:01:02,021
depending on whether February is included, based on what month we're in. Whether

18
00:01:02,021 --> 00:01:05,732
we should pay attention to the days in year 1 or the days in year 2. There's a

19
00:01:05,732 --> 00:01:08,498
lot of things it doesn't handle. We could definitely fix this code to

20
00:01:08,498 --> 00:01:12,014
handle.those. And, if you answered the second answer, I'd encourage you to try

21
00:01:12,014 --> 00:01:15,406
and do that. To try and turn this into a correct working program. And you should

22
00:01:15,406 --> 00:01:18,533
be able to do that, but our goal as programmers should be to try and find a

23
00:01:18,533 --> 00:01:21,942
simple solution first. Something this complicated is very difficult to get

24
00:01:21,942 --> 00:01:24,945
correct. Once you start handling lot's of special cases, and I've seen lots of

25
00:01:24,945 --> 00:01:27,940
discussions on the forum of people who try to handle all these special cases.

26
00:01:27,940 --> 00:01:30,850
It's really hard to get them all right and it makes the code very complicated.

27
00:01:30,850 --> 00:01:33,586
So let's start by thinking of a simpler way. Often the way humans solve a

28
00:01:33,586 --> 00:01:36,823
problem is not the simplest way, because humans are lazy. We want to find

29
00:01:36,823 --> 00:01:40,520
shortcuts, instead of doing things in a real, simple, mechanical way. On the

30
00:01:40,520 --> 00:01:43,990
other hand, computers are not lazy. Doing things in a simple, mechanical way is

31
00:01:43,990 --> 00:01:47,234
great for computers. It makes the program easier to write, makes it more likely

32
00:01:47,234 --> 00:01:47,843
to be correct.
