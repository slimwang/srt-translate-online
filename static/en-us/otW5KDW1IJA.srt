1
00:00:00,420 --> 00:00:03,730
Now I will argue that these
enhanced Multitape Turing machines

2
00:00:03,730 --> 00:00:06,820
have the same computational power
as regular Turing machines.

3
00:00:06,820 --> 00:00:09,320
Multitape machines certainly
don't have less power.

4
00:00:09,320 --> 00:00:13,510
By ignoring all but the input tape,
we obtain a regular Turing machine.

5
00:00:13,510 --> 00:00:16,680
Let's see why Multitape Turing
machines don't have any more power

6
00:00:16,680 --> 00:00:18,480
than regular machines.

7
00:00:18,480 --> 00:00:22,760
On the left, we have a Multitape Turing
machine in some configuration.

8
00:00:22,760 --> 00:00:26,000
And on the right, we have created
a corresponding configuration for

9
00:00:26,000 --> 00:00:27,810
a single tape Turing machine.

10
00:00:27,810 --> 00:00:31,720
On the single tape, we have
the contents of the multiple tapes

11
00:00:31,720 --> 00:00:35,060
with each tape's contents
separated by a hash.

12
00:00:35,060 --> 00:00:40,820
So here's the first tape, here's
the second tape, here's the third tape.

13
00:00:40,820 --> 00:00:42,790
Also note these dots here.

14
00:00:42,790 --> 00:00:45,150
We're using a trick that
we haven't used before,

15
00:00:45,150 --> 00:00:46,640
expanding the size of the alphabet.

16
00:00:47,790 --> 00:00:51,790
For every symbol in the tape
alphabet of the multitape machine,

17
00:00:51,790 --> 00:00:55,370
we have two symbols on
the single tape machine.

18
00:00:55,370 --> 00:00:58,800
One with a dot, and one without.

19
00:00:58,800 --> 00:01:03,650
We use the mark symbols to indicate
that the head of the multitape machine

20
00:01:03,650 --> 00:01:06,910
would be over this position on the tape.

21
00:01:06,910 --> 00:01:12,530
So the 1 is marked here, the 1 is
marked here, and the 0 is marked here.

22
00:01:13,530 --> 00:01:17,530
Simulating a step of the multitape
machine with the single tape version

23
00:01:17,530 --> 00:01:21,840
happens in two phases, one for
reading and one for writing.

24
00:01:21,840 --> 00:01:24,390
First, the single tape machine simulates

25
00:01:24,390 --> 00:01:27,960
the simultaneous reading of
the heads of the multitape machine.

26
00:01:27,960 --> 00:01:32,510
By scanning over the input and
noting which symbols have marks on them.

27
00:01:32,510 --> 00:01:38,090
So here it would first note that one
is under the head of the first tape,

28
00:01:38,090 --> 00:01:41,980
then that another one is under
the head of the second tape.

29
00:01:41,980 --> 00:01:45,540
And then that a 0 is under
the head of the third tape.

30
00:01:45,540 --> 00:01:48,870
That completes the first phase
where we read the symbols.

31
00:01:48,870 --> 00:01:51,310
Now I need to update
the tape contents and

32
00:01:51,310 --> 00:01:55,560
the head positions or
markers as part of the writing phase.

33
00:01:55,560 --> 00:01:59,740
Let's say that the multitape
machine changes this 0 to a 1 and

34
00:01:59,740 --> 00:02:02,930
moves the head to the left, like so.

35
00:02:02,930 --> 00:02:08,410
Then on the single tape machine,
we need to change this 0 dot to a 1 and

36
00:02:08,410 --> 00:02:11,920
change this 0 to a 0 dot.

37
00:02:11,920 --> 00:02:14,870
Note that it's possible that one of
these strings will need to increase its

38
00:02:14,870 --> 00:02:19,060
length when the multitape writes to
a position it hasn't reached before.

39
00:02:20,100 --> 00:02:23,600
In that case, we just right shift
the tape contents to allow room for

40
00:02:23,600 --> 00:02:25,530
the new symbol to be written.

41
00:02:25,530 --> 00:02:27,020
Once all that work is done,

42
00:02:27,020 --> 00:02:32,180
we return the head back to the beginning
to prepare for the next path, like so.

43
00:02:32,180 --> 00:02:35,230
And notice that I updated
the tape contents appropriately.

44
00:02:36,420 --> 00:02:39,570
So all the information about
the configuration of a multitape machine

45
00:02:39,570 --> 00:02:41,010
can be captured in a single tape.

46
00:02:41,010 --> 00:02:45,480
And it's not too hard to convince
yourself that all the logic needed

47
00:02:45,480 --> 00:02:49,240
to read from multiple places and
remember all that contents.

48
00:02:49,240 --> 00:02:52,830
In order to figure out
the right writing response,

49
00:02:52,830 --> 00:02:56,200
can also be implemented with
a state transition logic.

50
00:02:56,200 --> 00:02:58,760
It's a good exercise to work that
out if it's not obvious to you.
