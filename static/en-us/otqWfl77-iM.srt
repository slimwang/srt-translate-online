1
00:00:00,070 --> 00:00:02,090
Once the two panes
are showing up on the tablet,

2
00:00:02,090 --> 00:00:04,450
let's modify our code to
handle the list item click.

3
00:00:04,450 --> 00:00:07,770
On the phone, if an item is
clicked in the forecast fragment,

4
00:00:07,770 --> 00:00:09,540
then we must launch the detail activity.

5
00:00:09,540 --> 00:00:13,220
On the tablet UI, once an item in
the forecast fragment is clicked,

6
00:00:13,220 --> 00:00:17,230
we notify the main activity which goes
and replaces the detail fragment.

7
00:00:17,230 --> 00:00:19,680
The reason the two fragments
don't talk to each other

8
00:00:19,680 --> 00:00:22,480
is because we want to maintain
abstraction from each other.

9
00:00:22,480 --> 00:00:25,730
If the forecast list fragment started
assuming that the detailed fragment was

10
00:00:25,730 --> 00:00:28,950
always right next to it, then the
assumption would break, for example on

11
00:00:28,950 --> 00:00:32,600
the phone, where the data fragment
is not inside the main activity.

12
00:00:32,600 --> 00:00:35,210
Therefore, a fragment must
go through it's activity.

13
00:00:35,210 --> 00:00:38,920
An activity must know how to dispatch
the event to the other fragments.

14
00:00:38,920 --> 00:00:41,000
Keep in mind that a fragment
doesn't always has to be

15
00:00:41,000 --> 00:00:42,350
used in the same activity.

16
00:00:42,350 --> 00:00:45,310
In order for the forecast fragment
to talk to the main activity,

17
00:00:45,310 --> 00:00:47,140
we should create a callback interface.

18
00:00:47,140 --> 00:00:50,390
It's a better assumption to say that
the fragment will always be within

19
00:00:50,390 --> 00:00:52,970
an activity that
implements this callback;

20
00:00:52,970 --> 00:00:56,890
then to say that the forecast fragment
will always be inside the main activity.

21
00:00:56,890 --> 00:00:59,660
The detail fragment is a good
example of how a fragment can

22
00:00:59,660 --> 00:01:03,240
be used in two different activates, the
main activity and the detail activity.

23
00:01:03,240 --> 00:01:06,628
So don't rely on get activity
returning a specific activity class.

24
00:01:06,628 --> 00:01:10,732
Using the gist that we provided, use
a callback class to notify the activity

25
00:01:10,732 --> 00:01:12,730
that a list item has been selected.

26
00:01:12,730 --> 00:01:15,310
See the hint below on the
OnItemClickListener.

27
00:01:15,310 --> 00:01:18,620
Then, the activity can either
launch the detail activity or

28
00:01:18,620 --> 00:01:22,120
replace a detail fragment based on
whether it is a phone or tablet.

29
00:01:22,120 --> 00:01:25,300
When you work on this task you'll
run into an issue of how to pass

30
00:01:25,300 --> 00:01:29,960
the selected items you arrive to the
detail fragment, now your instinct might

31
00:01:29,960 --> 00:01:33,910
say to create a custom constructor
where you can pass in the date,

32
00:01:33,910 --> 00:01:37,880
however, we don't normally create
custom fragment constructors.

33
00:01:37,880 --> 00:01:41,110
If you ever rotate the device, for
example, the system can't call

34
00:01:41,110 --> 00:01:43,550
your custom fragment constructor
with the right parameters.

35
00:01:43,550 --> 00:01:46,330
However, it can use the empty
fragment constructor and

36
00:01:46,330 --> 00:01:49,470
initialize it with the same
bundle of arguments used earlier.

37
00:01:49,470 --> 00:01:53,390
So to pass information to initialize
a fragment, create a bundle of

38
00:01:53,390 --> 00:01:57,290
key value pairs and then set that
as the arguments on the fragment.

39
00:01:57,290 --> 00:02:01,560
Don't confuse this arguments bundle
with the savedInstanceState bundle.

40
00:02:01,560 --> 00:02:03,130
Once a fragment has been initialized,

41
00:02:03,130 --> 00:02:08,160
you can't change the arguments, you
can only read from them, as seen here.

42
00:02:08,160 --> 00:02:09,690
On the other hand the save
state bundle is for

43
00:02:09,690 --> 00:02:12,750
storing information once
a fragment has been running, and

44
00:02:12,750 --> 00:02:15,300
you can populate it in the on
save instant state method.

45
00:02:15,300 --> 00:02:18,410
The bundle can preserve state
across orientation changes or

46
00:02:18,410 --> 00:02:20,710
if the fragment or
activity gets killed by the system,

47
00:02:20,710 --> 00:02:24,450
that's why you receive it back again in
the onCreate or onCreateView methods.

48
00:02:24,450 --> 00:02:27,800
Once the detail fragment starts
being displayed on the tablet,

49
00:02:27,800 --> 00:02:31,740
we need to make sure that doesn't get
out of date if the location changes.

50
00:02:31,740 --> 00:02:33,120
If the user went to Settings and

51
00:02:33,120 --> 00:02:37,270
entered in a new location, when they
come back to the main activity,

52
00:02:37,270 --> 00:02:41,150
in the onResume method, we should
detect that the location has changed.

53
00:02:41,150 --> 00:02:44,110
We do this by comparing
the nLocation string

54
00:02:44,110 --> 00:02:46,950
with the location that's
stored in shared preferences.

55
00:02:46,950 --> 00:02:50,330
If there's a difference,
then we find the ForecastFragment and

56
00:02:50,330 --> 00:02:52,790
notify that the location has changed.

57
00:02:52,790 --> 00:02:55,440
Similarly, we find
the DetailFragment and

58
00:02:55,440 --> 00:02:57,850
notify that the location has changed.

59
00:02:57,850 --> 00:03:01,180
Since the DetailFragment is
a dynamically added fragment,

60
00:03:01,180 --> 00:03:04,980
we need to make sure we find the right
instance in the FragmentManager.

61
00:03:04,980 --> 00:03:09,720
We do this by calling findFragmentByTag
and passing in this tag.

62
00:03:09,720 --> 00:03:13,070
We associated this tag
with this fragment

63
00:03:13,070 --> 00:03:16,840
when we first did the fragment
transaction to add it to the screen.

64
00:03:16,840 --> 00:03:19,100
If you didn't already create a tag and

65
00:03:19,100 --> 00:03:22,780
associate it with the detail fragment
in the fragment transaction,

66
00:03:22,780 --> 00:03:26,080
then go ahead and do it now in the
onCreate method of the main activity.

67
00:03:26,080 --> 00:03:29,140
And you'll notice that the detail
fragment tag is just declared as

68
00:03:29,140 --> 00:03:31,670
a string at the top of the file.

69
00:03:31,670 --> 00:03:34,190
After we make the changes
to the main activity

70
00:03:34,190 --> 00:03:36,540
we go over to the detail fragment,

71
00:03:36,540 --> 00:03:41,190
we add a new method onLocationChanged
that takes in a new location string.

72
00:03:42,300 --> 00:03:45,560
First, we try to figure
out what is the date for

73
00:03:45,560 --> 00:03:47,370
the data that we're currently showing.

74
00:03:47,370 --> 00:03:50,470
Then we create a new Uri
with the new location,

75
00:03:50,470 --> 00:03:52,540
as well as the date we're
already displaying.

76
00:03:52,540 --> 00:03:55,810
We update the nUri and
then we restart the loader.

77
00:03:55,810 --> 00:04:01,560
See the instructor notes for the code
related to handling the location change.

78
00:04:01,560 --> 00:04:03,620
This is what the app should
look like when you're done.

79
00:04:03,620 --> 00:04:06,730
When you tap on a different date,
it updates the detail pane.

80
00:04:06,730 --> 00:04:09,850
You can remove any hard coded data
because the layout should be populated

81
00:04:09,850 --> 00:04:10,670
dynamically now.
