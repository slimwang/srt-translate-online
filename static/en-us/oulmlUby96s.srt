1
00:00:00,000 --> 00:00:03,000
If we make analogy with natural languages,

2
00:00:03,000 --> 00:00:11,000
if expressions like "tmp" are noun phrases, then operators like "assignment"

3
00:00:11,000 --> 00:00:17,000
are verbs and entire statements like tmp gets 5 are sentences.

4
00:00:17,000 --> 00:00:19,000
This whole thing together is a statement.

5
00:00:19,000 --> 00:00:23,000
It involves two expressions--tmp an identifier, 5 a number--

6
00:00:23,000 --> 00:00:25,000
and an operator--the assignment operator.

7
00:00:25,000 --> 00:00:30,000
Just as I might write the English sentence, j becomes 3--perhaps it's her birthday today,

8
00:00:30,000 --> 00:00:36,000
I can write the JavaScript assignment statement, j becomes 3.

9
00:00:36,000 --> 00:00:38,000
J is assigned the value 3.

10
00:00:38,000 --> 00:00:43,000
Similarity between the syntactic elements--the subject, verb, object, and punctuation.

11
00:00:43,000 --> 00:00:46,000
Subject- verb, object, and punctuation.

12
00:00:46,000 --> 00:00:49,000
Identifier, operator, expression, semicolon is relatively direct.

13
00:00:49,000 --> 00:00:55,000
Now that we have an intuition for statements, lets add them to our JavaScript formal grammar.

14
00:00:55,000 --> 00:00:58,000
One of the most common kinds of statements is the assignment statement

15
00:00:58,000 --> 00:01:02,000
where we have an identifier on a left-hand side of an equal sign

16
00:01:02,000 --> 00:01:07,000
and then an arbitrary expression on the right--x becomes equal to 5.

17
00:01:07,000 --> 00:01:09,000
Another kind of statement is the return statement.

18
00:01:09,000 --> 00:01:15,000
At the end of absolute value or Fibonacci or factorial or almost any function or procedure

19
00:01:15,000 --> 00:01:19,000
we want to return with the final value, return an arbitrary expression

20
00:01:19,000 --> 00:01:21,000
that becomes the value of the function.

21
00:01:21,000 --> 00:01:26,000
There are also statements that influence what gets executed and under which conditions.

22
00:01:26,000 --> 00:01:30,000
Formally, these statements are said to refer to control flow

23
00:01:30,000 --> 00:01:35,000
because they guard how execution flows through your procedure.

24
00:01:35,000 --> 00:01:38,000
The if statement checks to see if a certain expression is true,

25
00:01:38,000 --> 00:01:41,000
and if it's true, then we execute the then branch.

26
00:01:41,000 --> 00:01:44,000
There is also an if then else.

27
00:01:44,000 --> 00:01:50,000
If the expression is true the then branch else the else branch.

28
00:01:50,000 --> 00:01:54,000
I haven't said what a compound statement is, although since we've seen JavaScript before

29
00:01:54,000 --> 00:01:56,000
we're going to guess that it involves those curly braces.

30
00:01:56,000 --> 00:01:58,000
Let's write it out right now.

31
00:01:58,000 --> 00:02:01,000
A compound statement is an opening curly brace, a closing curly brace,

32
00:02:01,000 --> 00:02:05,000
and some statements in the middle.

33
00:02:05,000 --> 00:02:11,000
This is a list of statements terminated by semicolons. I'm going to show you how that works.

34
00:02:11,000 --> 00:02:14,000
Here I've added a recursive grammar rule.

35
00:02:14,000 --> 00:02:20,000
Statements can be one statement followed by a semicolon followed by

36
00:02:20,000 --> 00:02:23,000
as many more statements as you like,

37
00:02:23,000 --> 00:02:26,000
or you can decide that you're done and replace it with nothing.

38
00:02:26,000 --> 00:02:29,000
Or if you like, we'll draw the epsilon there to mean the empty string.

39
00:02:29,000 --> 00:02:33,000
For the subset of JavaScript that we'll be handling in this class,

40
00:02:33,000 --> 00:02:36,000
this grammar gives more details about what's possible.

41
00:02:36,000 --> 99:59:59,999
In addition to expressions, we have statements that build upon expressions.
