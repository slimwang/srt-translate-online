1
00:00:00,690 --> 00:00:05,090
Let's now look at the solution for
Part 1 of this quiz, which is asking

2
00:00:05,090 --> 00:00:08,600
when do these four instructions
dispatch and write their results.

3
00:00:10,050 --> 00:00:13,100
We will do that one
instruction at a time.

4
00:00:13,100 --> 00:00:16,379
The load is issued in cycle one.

5
00:00:16,379 --> 00:00:19,390
It doesn't have any dependencies, but

6
00:00:19,390 --> 00:00:23,400
we know that it cannot dispatch in
the same cycle when it's issued.

7
00:00:23,400 --> 00:00:26,350
So it will dispatch in cycle two.

8
00:00:27,810 --> 00:00:29,440
The load takes one cycle to do.

9
00:00:31,090 --> 00:00:33,380
So it will write its result
in the very next cycle.

10
00:00:34,480 --> 00:00:38,630
The multiplication instruction
is issued in cycle two.

11
00:00:39,940 --> 00:00:43,500
It will dispatch in cycle three or

12
00:00:43,500 --> 00:00:47,370
later because it cannot issue and
then dispatch in cycle two.

13
00:00:47,370 --> 00:00:52,590
It will dispatch either
in cycle three or

14
00:00:52,590 --> 00:00:57,180
whenever its operands become available
and because this multiply instruction

15
00:00:57,180 --> 00:01:03,020
doesn't depend on the load here, it uses
F0 and F1, and the load produces F6.

16
00:01:03,020 --> 00:01:07,760
That means that this instruction has all
the operands ready as soon as it issues.

17
00:01:07,760 --> 00:01:10,340
So it can dispatch in cycle three.

18
00:01:10,340 --> 00:01:15,170
It couldn't issue and then dispatch in
cycle two because of the same thing.

19
00:01:15,170 --> 00:01:17,610
Issue and then dispatch in
this processor is not allowed.

20
00:01:18,690 --> 00:01:23,234
The multiplication takes
five cycles to do.

21
00:01:23,234 --> 00:01:26,083
So if it dispatches in
cycle three to execute,

22
00:01:26,083 --> 00:01:29,674
it's going to be broadcasting
its result in cycle eight.

23
00:01:32,355 --> 00:01:35,971
The add here is issued in cycle three,
so again,

24
00:01:35,971 --> 00:01:40,384
it cannot dispatch in the same cycle,
but it could dispatch

25
00:01:40,384 --> 00:01:45,880
in cycle four if all of its operands
are available in that cycle.

26
00:01:45,880 --> 00:01:48,049
However, it needs F2 and F6.

27
00:01:49,230 --> 00:01:52,650
These are produced by load and
multiply here.

28
00:01:52,650 --> 00:01:56,778
So actually, it will not be able
to dispatch in cycle four because

29
00:01:56,778 --> 00:02:00,240
the multiply result is only
available in cycle eight.

30
00:02:00,240 --> 00:02:04,354
So what is going to happen to this
instruction is it's going to wait and

31
00:02:04,354 --> 00:02:06,459
capture its result in cycle eight.

32
00:02:06,459 --> 00:02:11,020
And then, it cannot capture and
then dispatch in the same cycle, so

33
00:02:11,020 --> 00:02:15,195
it will dispatch in the very next cycle,
which is cycle nine.

34
00:02:17,856 --> 00:02:21,112
Because this is an add and
has a latency of one cycle,

35
00:02:21,112 --> 00:02:23,480
it will write its result in cycle ten.

36
00:02:24,700 --> 00:02:28,560
For this add here,
it issues in cycle four.

37
00:02:28,560 --> 00:02:29,696
It becomes eligible for

38
00:02:29,696 --> 00:02:34,470
dispatch in cycle five if its
operands are ready, but they're not.

39
00:02:34,470 --> 00:02:38,140
It needs the F2 produced
by the multiplication and

40
00:02:38,140 --> 00:02:40,650
the F6 produced by this add.

41
00:02:40,650 --> 00:02:44,710
That means that it will capture
its last missing operand

42
00:02:44,710 --> 00:02:48,069
at the later of these two cycles,
which is cycle ten.

43
00:02:49,290 --> 00:02:52,560
So in cycle ten, this instruction
captures its last missing operand,

44
00:02:52,560 --> 00:02:54,200
which is F6.

45
00:02:54,200 --> 00:02:58,990
And then, it cannot dispatch in
that same cycle because of this.

46
00:02:58,990 --> 00:03:04,570
So it dispatches in cycle 11 and
finishes in cycle 12.

47
00:03:04,570 --> 00:03:07,820
And this completes
the first part of the quiz.
