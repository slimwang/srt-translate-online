1
00:00:00,100 --> 00:00:03,540
So far in this lesson we mentioned several useful metrics.

2
00:00:03,540 --> 00:00:05,820
For instance, we talked about execution time and

3
00:00:05,820 --> 00:00:09,770
throughput, response time, CPU utilization.

4
00:00:09,770 --> 00:00:12,920
But there are many other useful metrics to consider.

5
00:00:12,920 --> 00:00:17,030
For instance, user may not just care when they will get an answer, but

6
00:00:17,030 --> 00:00:21,320
they may also care when their job will actually start being executed.

7
00:00:21,320 --> 00:00:23,440
We call this metric wait time.

8
00:00:23,440 --> 00:00:27,000
The job is interactive, so the user needs to interact with this.

9
00:00:27,000 --> 00:00:28,650
Obviously the sooner he starts,

10
00:00:28,650 --> 00:00:31,700
the sooner the user will be able to do something about it.

11
00:00:31,700 --> 00:00:35,230
If the job is a long running job and the sooner it starts,

12
00:00:35,230 --> 00:00:39,210
the user has a chance to find out maybe that something's going wrong.

13
00:00:39,210 --> 00:00:42,700
So It can reconfigure the task, it can stop it and

14
00:00:42,700 --> 00:00:44,880
then reconfigure and launch it again.

15
00:00:44,880 --> 00:00:48,330
So wait time could be an important metric in some contexts.

16
00:00:48,330 --> 00:00:51,590
Then let's think about throughput for instance.

17
00:00:51,590 --> 00:00:54,920
We know throughput helps evaluate the utility of a platform.

18
00:00:54,920 --> 00:00:58,680
So how many tasks will it complete over a period of time?

19
00:00:58,680 --> 00:01:03,560
How many processes, how many jobs will we complete at over a period of time?

20
00:01:03,560 --> 00:01:07,860
This can be relevant in the context of a single machine, a single server.

21
00:01:07,860 --> 00:01:11,940
Or in the context of an entire data center for instance.

22
00:01:11,940 --> 00:01:13,890
Now, if I'm the owner of the data center,

23
00:01:13,890 --> 00:01:17,900
throughput is not the only thing that I care for.

24
00:01:17,900 --> 00:01:21,579
I'm probably more concerned about some other type of metric that we

25
00:01:21,579 --> 00:01:24,260
can call platform efficiency.

26
00:01:24,260 --> 00:01:27,460
And this says some combination of how well I

27
00:01:27,460 --> 00:01:31,320
utilize my resources to deliver this throughput.

28
00:01:31,320 --> 00:01:35,680
So it's not just a matter of having higher throughput, but also being able to

29
00:01:35,680 --> 00:01:41,030
utilize the resources that are available in my data center more efficiently.

30
00:01:41,030 --> 00:01:41,690
The reason for

31
00:01:41,690 --> 00:01:47,170
this is that as a data center operator, I make money when I complete jobs.

32
00:01:47,170 --> 00:01:50,870
So the higher the throughput, the greater the income for me.

33
00:01:50,870 --> 00:01:56,310
However, I also spend money to run the machines, to buy more servers.

34
00:01:56,310 --> 00:01:58,170
So it's important to have a good ratio.

35
00:01:58,170 --> 00:02:01,150
So platform efficiency would for instance, capture that.

36
00:02:01,150 --> 00:02:04,210
If it's really just the dollars that I'm concerned about,

37
00:02:04,210 --> 00:02:07,620
then a metric like performance per dollars would capture that.

38
00:02:07,620 --> 00:02:12,480
So if I'm considering buying the next greatest hardware platform.

39
00:02:12,480 --> 00:02:16,720
Then I can think about whether the cost that I will pay extra for

40
00:02:16,720 --> 00:02:18,730
that new piece of hardware,

41
00:02:18,730 --> 00:02:24,550
will basically be compensated with some impact on the performance that I see.

42
00:02:24,550 --> 00:02:27,540
Or maybe I'm concerned about the amount of power,

43
00:02:27,540 --> 00:02:31,550
the watts, that can be delivered to a particular platform.

44
00:02:31,550 --> 00:02:35,110
Or the energy that will be consumed during the execution.

45
00:02:35,110 --> 00:02:39,260
So then defining some metrics that capture performance per watt, or

46
00:02:39,260 --> 00:02:42,530
performance per joule will be useful ones.

47
00:02:42,530 --> 00:02:44,310
You may have heard of the term SLA.

48
00:02:44,310 --> 00:02:46,950
It stands for Service Level Agreement.

49
00:02:46,950 --> 00:02:51,500
Enterprise applications will give typically SLAs to their customers.

50
00:02:51,500 --> 00:02:52,360
One example, for

51
00:02:52,360 --> 00:02:55,570
instance will be that you will get a response within three seconds.

52
00:02:56,840 --> 00:02:59,170
Or, it may be even more subtle than that.

53
00:02:59,170 --> 00:03:04,880
For instance, a service like Expedia perhaps, has an SLA with it's customers.

54
00:03:04,880 --> 00:03:07,100
And it's customers would be like Delta Airlines and

55
00:03:07,100 --> 00:03:12,535
American Airlines, that it will provide most accurate quote for

56
00:03:12,535 --> 00:03:17,230
95% of the flights that are being returned to customers.

57
00:03:17,230 --> 00:03:19,400
So then for that enterprise application,

58
00:03:19,400 --> 00:03:24,010
one important thing would be whether there any SLAs that are violated.

59
00:03:24,010 --> 00:03:28,780
Whether there are any customer requests that took longer than three seconds, or

60
00:03:28,780 --> 00:03:34,496
that did not provide quotes for airfare that were all 100% accurate.

61
00:03:34,496 --> 00:03:39,540
A metric-like percentage of SLA violations would capture that information.

62
00:03:39,540 --> 00:03:42,900
For some applications, there is some natural opportunity for

63
00:03:42,900 --> 00:03:44,290
a slack in the application.

64
00:03:44,290 --> 00:03:48,520
For instance, if you think about a regular video application,

65
00:03:48,520 --> 00:03:52,220
humans can't perceive more than 30 frames per second.

66
00:03:52,220 --> 00:03:55,780
So being so focused on the frames per second, and

67
00:03:55,780 --> 00:03:59,960
trying to maximize that frames per second rate, that's not the goal.

68
00:03:59,960 --> 00:04:04,040
However, making sure that there's at least 30 frames per second.

69
00:04:04,040 --> 00:04:09,060
So that users don't start seeing some random commercials during the video that

70
00:04:09,060 --> 00:04:12,160
they're watching on YouTube, that's something that's important.

71
00:04:12,160 --> 00:04:14,877
So it's not so much about this raw request rate or

72
00:04:14,877 --> 00:04:17,726
wait time, but rather it's a metric that really is

73
00:04:17,726 --> 00:04:22,810
concerned whether the client perceives the service as performing well or not.

74
00:04:22,810 --> 00:04:27,120
You may be concerned with the performance metric of an individual application.

75
00:04:27,120 --> 00:04:30,600
Or you may need to try to come up with some kind of aggregate performance

76
00:04:30,600 --> 00:04:34,830
metric that tries to average the execution time for all tasks, or

77
00:04:34,830 --> 00:04:36,920
average the wait time for all tasks.

78
00:04:36,920 --> 00:04:40,500
Or maybe even this would be a weighted average based on the priorities of

79
00:04:40,500 --> 00:04:41,580
the tasks.

80
00:04:41,580 --> 00:04:45,070
Also in addition to just being constrained with CPu utilization,

81
00:04:45,070 --> 00:04:48,350
there are a number of other resources that we may be concerned about.

82
00:04:48,350 --> 00:04:52,090
Memory, file systems, the storage subsystem.

83
00:04:52,090 --> 00:04:55,900
So some metrics that are concerned with the average resource usage

84
00:04:55,900 --> 00:04:56,660
are also useful
