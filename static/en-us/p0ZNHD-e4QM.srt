1
00:00:00,440 --> 00:00:04,845
In order to create motion, we first
need to be able to keep track of time.

2
00:00:04,845 --> 00:00:09,590
LibGDX provides a fantastic
TimeUtils package to make this easy.

3
00:00:09,590 --> 00:00:15,160
There are two main methods of interest,
TimeUtils.milis and TimeUtils.nanoTime.

4
00:00:15,160 --> 00:00:19,580
Let's say this is a timeline and
this is right now.

5
00:00:19,580 --> 00:00:22,783
What TimeUtils.millis()
gives you is the number of

6
00:00:22,783 --> 00:00:26,340
milliseconds between right now and
January 1st 1970.

7
00:00:26,340 --> 00:00:30,351
This is great if you want to know what
time it is, like the time on a wall

8
00:00:30,351 --> 00:00:35,630
clock, but it's not always the best
choice for measuring time intervals.

9
00:00:35,630 --> 00:00:37,730
When games are rendered
at 60 frames per second,

10
00:00:37,730 --> 00:00:39,870
individual milliseconds start to matter.

11
00:00:39,870 --> 00:00:44,120
So it's often best to use the more
precise TimeUtil of nanoTime.

12
00:00:44,120 --> 00:00:46,610
nanoTime gives the time in nanoseconds.

13
00:00:46,610 --> 00:00:48,138
That's billionths of a second.

14
00:00:48,138 --> 00:00:52,685
But it doesn't have a definite reference
time, so if this is right now,

15
00:00:52,685 --> 00:00:57,210
TimeUtils.nanoTime might give you
the number of nanoseconds since like

16
00:00:57,210 --> 00:01:01,770
sometime in 2005, or it actually might
be a negative number of nanoseconds

17
00:01:01,770 --> 00:01:03,850
from now until sometime in the future.

18
00:01:05,038 --> 00:01:09,190
However, what nanoTime does allow us
to do is to measure time intervals.

19
00:01:09,190 --> 00:01:13,320
So our general procedure is to save
the time that our game was created, and

20
00:01:13,320 --> 00:01:17,520
then all future times can be measured
with respect to that creation time.

21
00:01:17,520 --> 00:01:18,020
Let's check it out.
