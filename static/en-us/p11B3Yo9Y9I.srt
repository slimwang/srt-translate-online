1
00:00:00,170 --> 00:00:05,240
We already talked about the one way
requirement of these kind of functions.

2
00:00:05,240 --> 00:00:09,010
So given a hash value,
we can't go back to the password itself.

3
00:00:09,010 --> 00:00:11,340
So this is obviously a requirement.

4
00:00:11,340 --> 00:00:13,700
The inverse should be
very hard to compute.

5
00:00:13,700 --> 00:00:17,170
Actually, we do want
different hash values for

6
00:00:17,170 --> 00:00:20,560
different passwords,
because what would happen otherwise?

7
00:00:20,560 --> 00:00:24,309
If user one and
user two had the same hash values,

8
00:00:24,309 --> 00:00:28,699
then user ine can actually
log into user two's account,

9
00:00:28,699 --> 00:00:34,930
using user one's password, because user
two's hash value is what we compare.

10
00:00:34,930 --> 00:00:37,760
So, when user 1 claims to be user 2,

11
00:00:37,760 --> 00:00:43,470
types his password, the right hash
value is produced, right for user two.

12
00:00:43,470 --> 00:00:47,940
So user one is able to get into
user two's account if we don't have

13
00:00:47,940 --> 00:00:51,280
the different hash values for
distinct passwords.

14
00:00:51,280 --> 00:00:54,390
So second option is also a requirement.

15
00:00:54,390 --> 00:00:58,350
Provide more efficient storage for,
that's not really a big deal.

16
00:00:58,350 --> 00:01:01,470
We said passwords produce
a fixed size output.

17
00:01:01,470 --> 00:01:05,530
Could be a couple of hundred bits,
128 or

18
00:01:05,530 --> 00:01:09,670
256 or something like that, but
storage itself is not a big deal.
