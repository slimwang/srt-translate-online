1
00:00:00,000 --> 00:00:05,000
The most straightforward way to do sensitivity analysis is to do it one at a time.

2
00:00:05,000 --> 00:00:11,000
One factor at a time, that is. For instance, there is an uncertainty concerning the initial data.

3
00:00:11,000 --> 00:00:15,000
Actually, we may start here or we may start there

4
00:00:15,000 --> 00:00:19,000
and our knowledge is to where precisely we start may be limited.

5
00:00:19,000 --> 00:00:23,000
There is an uncertainty concerning the initial data, or we may not be able

6
00:00:23,000 --> 00:00:26,000
to precisely control the start of the ramp.

7
00:00:26,000 --> 00:00:32,000
If we start a little early, the total number of fish will be lower, as if we start a little late.

8
00:00:32,000 --> 00:00:36,000
As we change the single factors, sometimes the result goes up.

9
00:00:36,000 --> 00:00:40,000
As we change a single factor for instance, as in this case with the initial value,

10
00:00:40,000 --> 00:00:45,000
and sometimes as we look at the upper limit of one of the factors,

11
00:00:45,000 --> 00:00:49,000
the result may go down and it may go up as we look at the lower limit.

12
00:00:49,000 --> 00:00:52,000
Like in this case for the time at which the ramp starts.

13
00:00:52,000 --> 00:00:55,000
We can apply this to all factors that influence the result

14
00:00:55,000 --> 00:00:58,000
and check the degree by which they influence the result.

15
00:00:58,000 --> 00:01:03,000
I am just using the base value and then for every factor

16
00:01:03,000 --> 00:01:07,000
changing that factor to its upper limit and then to its lower limit.

17
00:01:07,000 --> 00:01:11,000
That's a little lazy. At times, this can be too lazy.

18
00:01:11,000 --> 00:01:19,000
Most often, the other possible values for that factor will lead to sensible curves in that range,

19
00:01:19,000 --> 00:01:24,000
but it may happen that sometimes you get very weird results for values in between.

20
00:01:24,000 --> 00:01:28,000
Nonetheless, in the upcoming program, we're looking at the outermost values.

21
00:01:28,000 --> 00:01:34,000
This code makes heavy use of dictionaries, a special feature of the Python language.

22
00:01:34,000 --> 00:01:45,000
A dictionary associates keys and values, so I can ask for the string initial_value and get 2 * 10^e5.

23
00:01:45,000 --> 00:01:52,000
I can ask for the string maximum<u>growth</u>rate and retrieve the value 0.5.

24
00:01:52,000 --> 00:02:00,000
This is a nice trick to have all factors in one place, because we need to change them one at a time.

25
00:02:00,000 --> 00:02:04,000
These are the base values and here we specify the uncertainties.

26
00:02:04,000 --> 00:02:12,000
So what we're saying here is that we know that the initial value of the amount of fish is between

27
00:02:12,000 --> 00:02:23,000
2 * 10⁵ - 5 * 10⁴ tons and 2 * 10⁵ + 5 * 10⁴ tons and so on and so on.

28
00:02:23,000 --> 00:02:26,000
This dictionary is simply to make things colorful.

29
00:02:26,000 --> 00:02:31,000
The different factors will get different colors as well in the diagram.

30
00:02:31,000 --> 00:02:36,000
If you look at the code that we provide, you'll see more details about dictionaries in there.

31
00:02:36,000 --> 00:02:39,000
In other programming languages, you may find dictionaries too,

32
00:02:39,000 --> 00:02:45,000
or you may have to look for associative arrays or for maps or for hash tables.

33
00:02:45,000 --> 00:02:47,000
From the information provided in the code, you should be able

34
00:02:47,000 --> 99:59:59,999
to return the key of the most critical parameter in this variable.
