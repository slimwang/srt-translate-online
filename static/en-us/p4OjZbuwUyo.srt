1
00:00:00,680 --> 00:00:02,850
You're probably getting
sick of me saying it but

2
00:00:02,850 --> 00:00:05,590
everything starts with the routes so
we need to add the cart route.

3
00:00:06,600 --> 00:00:09,200
And since we're already here let's
generate the shopping cart service.

4
00:00:13,210 --> 00:00:16,760
Now we can add the navigation link for
the cart in the application template.

5
00:00:17,840 --> 00:00:20,340
I've added some fake cart content for
now so

6
00:00:20,340 --> 00:00:22,460
that we can work on the cart template.

7
00:00:22,460 --> 00:00:24,880
To get access to this data
in the shopping cart.

8
00:00:24,880 --> 00:00:27,630
The shopping cart service needs to
be injected into the cart route.

9
00:00:29,040 --> 00:00:32,100
There we go and now we'll return all
cart content from the model hook.

10
00:00:33,920 --> 00:00:37,820
This get cart function just returns
the contents of the shopping cart's

11
00:00:37,820 --> 00:00:38,640
cart property.

12
00:00:39,810 --> 00:00:42,400
It's simple enough, but
allows us to separate our concerns.

13
00:00:44,230 --> 00:00:47,630
Now that the shopping cart's data is
being passed through the model hook

14
00:00:47,630 --> 00:00:50,070
to the template,
we can loop over that data and

15
00:00:50,070 --> 00:00:53,190
display the brick's color,
size and price.

16
00:00:55,400 --> 00:00:57,070
The store now has a cart page, and

17
00:00:57,070 --> 00:01:00,450
shows us the default content returned
from the shopping cart service.

18
00:01:00,450 --> 00:01:03,240
Now we need to create and
add to cart button for the brick items.

19
00:01:04,530 --> 00:01:08,010
I've added this button that calls and
add to cart function when clicked.

20
00:01:09,600 --> 00:01:12,510
This function will need to know
about which brick is being added so

21
00:01:12,510 --> 00:01:16,460
we need to pass along the color,
size and price.

22
00:01:16,460 --> 00:01:17,370
Let's create this function.

23
00:01:18,460 --> 00:01:21,550
Remember that action functions
go inside an actions object.

24
00:01:23,220 --> 00:01:26,660
To add this data to the cart, we need
to access the shopping cart service.

25
00:01:27,720 --> 00:01:30,380
Now that we have the shopping cart,
we can add this data to it.

26
00:01:32,350 --> 00:01:34,580
The addToCart function gets the cart,
and

27
00:01:34,580 --> 00:01:36,529
then adds an object with
the brick data to it.

28
00:01:37,910 --> 00:01:41,260
Since we can now add items to the cart,
let's clear out this default data.

29
00:01:43,010 --> 00:01:46,560
So the cart page doesn't display
anything since the cart is empty.

30
00:01:46,560 --> 00:01:50,970
But adding an item to the cart causes
it to show up on that cart page.

31
00:01:50,970 --> 00:01:51,470
Perfect.

32
00:01:52,980 --> 00:01:55,869
The last step is to decrease the
quantity when it's added to the cart.

33
00:01:57,350 --> 00:02:00,160
Everything's already set up to handle
when the button is clicked on, so

34
00:02:00,160 --> 00:02:02,850
we just need to tell the warehouse
to put one item on hold.

35
00:02:04,370 --> 00:02:08,090
We're telling the warehouse to reserve
one brick with this color and this size.

36
00:02:09,590 --> 00:02:12,740
This first line gets the current
quantity and decreases it by one.

37
00:02:13,890 --> 00:02:15,750
The bottom line sets the quantity for

38
00:02:15,750 --> 00:02:17,972
this specific brick to
the decreased size.

39
00:02:20,675 --> 00:02:22,650
And with that we're done.

40
00:02:22,650 --> 00:02:24,560
The app handles user interaction and

41
00:02:24,560 --> 00:02:28,010
passes information to different
parts of the app using services.

42
00:02:28,010 --> 00:02:28,790
Great job.
