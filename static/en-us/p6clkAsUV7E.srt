1
00:00:00,690 --> 00:00:05,820
Eventually our ADD produces a result, and when that happens we will broadcast

2
00:00:05,820 --> 00:00:10,970
it. The broadcast of the result happens exactly as before in Tomasulo algorithm,

3
00:00:10,970 --> 00:00:15,550
except that the tag we carry for the result is the ROB entry,

4
00:00:15,550 --> 00:00:18,480
not the reservation station number. Because we have already freed

5
00:00:18,480 --> 00:00:23,705
the reservation station. So what we do is we now broadcast, the tag of

6
00:00:23,705 --> 00:00:29,590
ROB6 with a value, let's say, 15. Just like with Tomasulo's algorithm,

7
00:00:29,590 --> 00:00:35,540
this value, and the tag are now, given to the reservation stations.

8
00:00:35,540 --> 00:00:40,470
And they normally capture the result based on the tag, as before. This result is

9
00:00:40,470 --> 00:00:44,990
now broadcast to the reservation stations. And they capture this result if,

10
00:00:44,990 --> 00:00:49,530
if they need it. And those that need the result of this instruction will capture

11
00:00:49,530 --> 00:00:55,230
the value 15 just like, we did in Tomasulo's algorithm. So this has not changed.

12
00:00:55,230 --> 00:01:02,250
Without the ROB, we would now also capture this result in the register.

13
00:01:02,250 --> 00:01:06,440
And update the RAT to point to that register. With the ROB,

14
00:01:06,440 --> 00:01:12,498
we don't want to write to the register yet, so we write to the ROB instead.

15
00:01:12,498 --> 00:01:18,420
So these broadcast value now goes to the ROB, and we write 15 here and

16
00:01:18,420 --> 00:01:23,560
mark the instruction as done. Also. The result of the instruction,

17
00:01:23,560 --> 00:01:28,230
is not going to be in the registers. So, we do not update the RAT, to point to

18
00:01:28,230 --> 00:01:32,300
the registers. In fact, the RAT is still pointing to the correct place.

19
00:01:32,300 --> 00:01:39,010
The result of the instruction is in the ROB now. So, we don't do this here.

20
00:01:39,010 --> 00:01:42,930
After broadcasting its result, the instruction would be completed,

21
00:01:42,930 --> 00:01:47,760
in Tomasulo's algorithm. With the ROB. We're still not done with it.

22
00:01:47,760 --> 00:01:52,490
Yes, we have computed the result and logged the computation as done, but

23
00:01:52,490 --> 00:01:56,560
we have not deposited this result in the registers. For

24
00:01:56,560 --> 00:02:01,550
that there is an additional step, called commit. To commit this instruction,

25
00:02:01,550 --> 00:02:06,190
we must first commit all of the previous instructions. So each cycle,

26
00:02:06,190 --> 00:02:10,940
we test whether the next instruction at the commit point is done. In which case,

27
00:02:10,940 --> 00:02:15,900
the commit point can move on and commit this instruction. So eventually,

28
00:02:15,900 --> 00:02:19,800
the commit point will reach here. And now, we will

29
00:02:19,800 --> 00:02:24,190
test whether this instruction is done, find out that it's done, and commit it.

30
00:02:24,190 --> 00:02:29,450
The committing of the instruction, consists of actually taking this value, 15,

31
00:02:29,450 --> 00:02:33,500
and writing it to the register that the instruction is supposed to write to.

32
00:02:33,500 --> 00:02:39,350
In this case R1. So, 15 will be retained here. And also,

33
00:02:39,350 --> 00:02:43,370
we need to update the RAT, because it's pointing to the entry ROB6, that entry

34
00:02:43,370 --> 00:02:48,380
will be freed after we commit this instruction. So instead of pointing to ROB6,

35
00:02:48,380 --> 00:02:53,610
now we can point to R1. So really, the updating of the RAT for

36
00:02:53,610 --> 00:02:57,730
writing to the register, has moved from the broadcast time to the commit time,

37
00:02:57,730 --> 00:03:01,530
because that's when we are actually updating the registers. And

38
00:03:01,530 --> 00:03:05,830
after committing this instruction, the commit point will move, even further, so

39
00:03:05,830 --> 00:03:10,500
that the next instruction to commit will be here, and that completes our

40
00:03:10,500 --> 00:03:14,620
reorder buffer processor step by step, for one instruction. As you can see,

41
00:03:14,620 --> 00:03:19,390
many other things, are happening exactly the same as in Tomasulo's algorithm.

42
00:03:19,390 --> 00:03:23,460
Some of the things have changed, like point the RAT to the ROB entry instead of

43
00:03:23,460 --> 00:03:27,560
the reservation station. Writing to the ROB, on broadcast instead of

44
00:03:27,560 --> 00:03:32,720
the register file. And also we have added, a step here for committing.

45
00:03:32,720 --> 00:03:38,080
Also we can free the reservation station on dispatch, not on broadcast. And

46
00:03:38,080 --> 00:03:40,860
finally, we need a new step for actually committing the instruction.
