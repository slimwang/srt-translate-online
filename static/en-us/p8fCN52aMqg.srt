1
00:00:00,190 --> 00:00:02,980
So if we start by looking at a varying number of elements per row,

2
00:00:02,980 --> 00:00:05,914
what we've just seen is that the thread per element approach

3
00:00:05,914 --> 00:00:08,251
is insensitive to the structure of the matrix,

4
00:00:08,251 --> 00:00:10,914
whereas if we have a varying number of elements per row,

5
00:00:10,914 --> 00:00:12,991
thread per row suffers from load imbalance

6
00:00:12,991 --> 00:00:15,797
and it has a runtime dependent on the longest row.

7
00:00:15,797 --> 00:00:19,892
So of these 2 methods, thread per element is probably a better choice.

8
00:00:19,892 --> 00:00:23,640
It's completely insensitive to the structure of the matrix.

9
00:00:23,640 --> 00:00:28,325
But on the other hand, if our matrices have roughly the same number of elements in each row,

10
00:00:28,325 --> 00:00:29,622
which is better?

11
00:00:29,622 --> 00:00:31,888
Well, now there's really no load imbalance issues,

12
00:00:31,888 --> 00:00:35,036
and that's the primary disadvantage with the thread per row approach.

13
00:00:35,036 --> 00:00:38,420
And in this case, where we have a similar number of elements per row,

14
00:00:38,420 --> 00:00:45,345
it turns out that thread per row is roughly 3 times faster than thread per element. How come?

15
00:00:45,346 --> 00:00:50,003
Well, in thread per row, all of the partial products are accumulated within a single thread,

16
00:00:50,003 --> 00:00:51,615
so they're going to communicate through registers

17
00:00:51,615 --> 00:00:54,240
and there's no communication between threads at all.

18
00:00:54,240 --> 00:00:55,966
In thread per element, on the other hand,

19
00:00:55,966 --> 00:00:59,297
the segmented scan operation requires communicating between threads

20
00:00:59,297 --> 00:01:02,794
to sum up the partial products. That communication is more expensive.

21
00:01:02,794 --> 00:01:06,411
So, because we have different performance characteristics here,

22
00:01:06,411 --> 00:01:08,780
it's kind of a head-scratcher problem.

23
00:01:08,780 --> 00:01:10,649
Which data structure do we choose,

24
00:01:10,649 --> 00:01:14,044
given that we probably don't know what the structure of the matrix is

25
00:01:14,044 --> 00:01:15,776
before we need to make this call?
