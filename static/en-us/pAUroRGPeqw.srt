1
00:00:00,150 --> 00:00:03,757
The heart of a shader is the actual shader program it runs. This program is

2
00:00:03,757 --> 00:00:07,812
passed to the GPU as a string of characters. I'll repeat that, since it's a bit

3
00:00:07,812 --> 00:00:11,204
unusual. Instead of sending compiled code or binary data, or some other

4
00:00:11,204 --> 00:00:14,220
processed information to the driver, you actually send it a string of

5
00:00:14,220 --> 00:00:20,072
characters. WebGL shaders are written in GLSLES, the OpenGL Shading Language

6
00:00:20,072 --> 00:00:26,790
for Embedded Systems. No one calls it GLSLES. Everyone simply says GLSL. If you

7
00:00:26,790 --> 00:00:31,102
use DirectX, you'd use HLSL -- thy are High Level Shading Language. In either

8
00:00:31,102 --> 00:00:34,738
case, the character string is what gets sent to the graphics driver. The

9
00:00:34,738 --> 00:00:37,820
graphics driver compiles these into assembly instructions that are sent to the

10
00:00:37,820 --> 00:00:42,454
GPU. Here's how to create a shader string in Javascript. The first line is how

11
00:00:42,454 --> 00:00:45,550
Javascript says it's going to define an array. What we're doing here is

12
00:00:45,550 --> 00:00:49,361
defining a string for each line of our program. That's one way to get shader

13
00:00:49,361 --> 00:00:53,185
programs into 3GS, but it's usually not the most convenient. There are all

14
00:00:53,185 --> 00:00:56,020
these quote marks and commas, which are visually confusing and a pain to add

15
00:00:56,020 --> 00:00:59,827
and maintain. That said, one advantage of this approach is that you can glue

16
00:00:59,827 --> 00:01:04,075
together strings on the fly to make shaders. This is in fact exactly what 3GS

17
00:01:04,075 --> 00:01:07,613
does. When you ask for three lights on a shiny material, it creates a custom

18
00:01:07,613 --> 00:01:12,144
shader for exactly those elements. If you have a specific fixed shader in mind,

19
00:01:12,144 --> 00:01:16,060
an easier way is to make your program a separate text resource. I won't work

20
00:01:16,060 --> 00:01:19,312
through the mechanics here. This isn't really a web programming class. But see

21
00:01:19,312 --> 00:01:23,472
the code in this course's get hub repository for how we do it. Basically, you

22
00:01:23,472 --> 00:01:26,288
create a separate text file or script element that has your program's text in

23
00:01:26,288 --> 00:01:27,219
it.
