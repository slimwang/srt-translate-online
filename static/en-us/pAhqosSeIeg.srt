1
00:00:00,660 --> 00:00:04,040
As with all architectural styles, there are benefits and costs.

2
00:00:04,040 --> 00:00:08,130
The benefits of the Layered Implicit Invocation architecture include im,

3
00:00:08,130 --> 00:00:09,710
improved reusability.

4
00:00:09,710 --> 00:00:13,360
Because the lower level components do not depend upon the upper

5
00:00:13,360 --> 00:00:16,090
level components, you can use them in other situations.

6
00:00:16,090 --> 00:00:17,860
So you can imagine taking.

7
00:00:17,860 --> 00:00:23,630
Our handler for the resized window and using that in other applications as well.

8
00:00:23,630 --> 00:00:28,760
There's also reduced complexity, because the, there are fewer the,

9
00:00:28,760 --> 00:00:33,770
the actual components know less about each other and everything is implicit but

10
00:00:33,770 --> 00:00:36,170
the complexity of the system can be reduced.

11
00:00:36,170 --> 00:00:38,420
Making it easier to understand and maintain.

12
00:00:38,420 --> 00:00:40,850
The, there is a cost, however.

13
00:00:40,850 --> 00:00:44,060
The cost is slightly increased overhead,

14
00:00:44,060 --> 00:00:47,710
that is performance overhead because of the extra levels of indirection.

15
00:00:47,710 --> 00:00:52,220
Whenever you have an indirection, okay, that means that there's a two-steps in,

16
00:00:52,220 --> 00:00:53,400
in resolving that.

17
00:00:53,400 --> 00:00:55,340
You make the call, and then, the call has to be.

18
00:00:56,710 --> 00:00:58,400
There has to be a call back and so on.

19
00:00:58,400 --> 00:01:02,300
For phase 2 after we have selected the style, we will assign the components to

20
00:01:02,300 --> 00:01:06,890
layers, determining the dependencies between the layers, and update the OCL.

21
00:01:06,890 --> 00:01:09,370
In particular we will insure that each constraint,

22
00:01:09,370 --> 00:01:11,720
is an equality with a single variable on the left hand side.
