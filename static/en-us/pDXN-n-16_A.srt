1
00:00:00,080 --> 00:00:03,350
Let's talk a little bit more about system calls.

2
00:00:03,350 --> 00:00:06,810
Using this diagram I'm going to trace through where control and

3
00:00:06,810 --> 00:00:09,400
data are exchanged during a system call.

4
00:00:09,400 --> 00:00:13,130
I will use this icon to denote where I am in the diagram.

5
00:00:13,130 --> 00:00:17,650
We will start by assuming we are currently in an executing user process.

6
00:00:17,650 --> 00:00:21,500
Then because the user process needs some hardware access,

7
00:00:21,500 --> 00:00:23,080
it makes a system call.

8
00:00:23,080 --> 00:00:27,325
On a system call, control is passed to the operating system, in privileged mode,

9
00:00:27,325 --> 00:00:30,177
and the operating system will perform the operation and

10
00:00:30,177 --> 00:00:32,621
then it will return the results to the process.

11
00:00:32,621 --> 00:00:37,802
Executing a system call involves changing the execution context from the user

12
00:00:37,802 --> 00:00:40,000
process to that of the OS kernel,

13
00:00:40,000 --> 00:00:45,043
also passing arguments, whatever necessary for the system cooperation.

14
00:00:45,043 --> 00:00:49,098
And then jumping somewhere in the memory of the kernel so that you can go

15
00:00:49,098 --> 00:00:53,378
through the instruction sequence that corresponds to that system call.

16
00:00:53,378 --> 00:00:57,600
With the system call, control is passed to the operating system.

17
00:00:57,600 --> 00:01:01,090
The operating system operates in privileged mode.

18
00:01:01,090 --> 00:01:05,530
And it's allowed to perform whatever operation was specified in the system call.

19
00:01:05,530 --> 00:01:09,560
Once the system call completes, it returns the result and

20
00:01:09,560 --> 00:01:12,360
the control back to calling process.

21
00:01:12,360 --> 00:01:16,500
And this again will involve changing the execution context from,

22
00:01:16,500 --> 00:01:21,340
now from kernel mode into the user mode, passing any arguments back into

23
00:01:21,340 --> 00:01:26,570
the user address space, and then, jumping to the exact same location

24
00:01:26,570 --> 00:01:30,610
in the execution of the user process where the system call was being made from.

25
00:01:30,610 --> 00:01:34,790
But the entire process involved changing the execution context from user to

26
00:01:34,790 --> 00:01:37,760
kernel mode and back, passing arguments,

27
00:01:37,760 --> 00:01:43,890
jumping around in memory to locations where the code to be executed is.

28
00:01:43,890 --> 00:01:46,880
So, it's not necessarily a cheap operation.

29
00:01:46,880 --> 00:01:50,743
To make a system call, an application must write arguments,

30
00:01:50,743 --> 00:01:54,087
save all relevant data at a well-defined location,

31
00:01:54,087 --> 00:01:58,770
make the actual system call using this specific system call number.

32
00:01:58,770 --> 00:02:02,970
The well-defined location is necessary so that the operating system kernel,

33
00:02:02,970 --> 00:02:07,900
based on the system call number, can determine which, how many arguments it

34
00:02:07,900 --> 00:02:12,700
should retrieve and where are they, at this well-defined location?

35
00:02:12,700 --> 00:02:16,750
The arguments can either be passed directly between the user program and

36
00:02:16,750 --> 00:02:18,530
the operating system, or

37
00:02:18,530 --> 00:02:23,400
they can be passed indirectly by specifying their address.

38
00:02:23,400 --> 00:02:28,170
In synchronous mode, the process will wait until the system call completes.

39
00:02:29,210 --> 00:02:34,490
I will talk about an alternative where we can issue asynchronous system calls,

40
00:02:34,490 --> 00:02:37,740
but that we will leave for a later discussion in this course.

41
00:02:37,740 --> 00:02:41,550
For now, you must understand that there are some basic steps involved in

42
00:02:41,550 --> 00:02:45,420
calling an operating system service and obtaining the results.
