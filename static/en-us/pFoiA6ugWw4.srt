1
00:00:00,410 --> 00:00:05,150
It's almost launch time, but
we need to have some place to launch it.

2
00:00:05,150 --> 00:00:08,429
Let's create an emulator AVD or
Android Virtual Device.

3
00:00:09,449 --> 00:00:11,729
Android virtual devices are great.

4
00:00:11,730 --> 00:00:14,890
One of the important things to do is
test your app on a wide variety of

5
00:00:14,890 --> 00:00:18,899
screen sizes and platform versions, and
it allows you to do much of this testing

6
00:00:18,899 --> 00:00:22,769
and debugging without having to
have a closet full of devices.

7
00:00:22,769 --> 00:00:27,259
On Windows and Mac, the x86 emulator
relies on a special kernel driver called

8
00:00:27,260 --> 00:00:30,440
HAXM for hardware virtualization.

9
00:00:30,440 --> 00:00:35,020
If you can't run using HAXM, check
out the link to troubleshooting HAXM.

10
00:00:36,259 --> 00:00:42,250
Let's create an AVD for
a Nexus 5X x86 64 running Nougat.

11
00:00:42,250 --> 00:00:47,179
We start by clicking on this icon
to bring up the AVD manager, and

12
00:00:47,179 --> 00:00:50,090
we can select Create Virtual Device.

13
00:00:50,090 --> 00:00:51,879
And then we select Nexus 5X.

14
00:00:51,878 --> 00:00:54,559
[BLANK_AUDIO]

15
00:00:54,560 --> 00:01:01,135
We select Nougat running x86
64 targeting Android 7.0.

16
00:01:01,134 --> 00:01:04,307
If possible,
target 7.0 with Google APIs because

17
00:01:04,307 --> 00:01:08,890
we'll need Google APIs in addition to
Android before the end of this course.

18
00:01:10,170 --> 00:01:11,829
So let's finish creating our AVD.

19
00:01:13,840 --> 00:01:18,430
And there we have it,
a Nexus 5X virtual device.

20
00:01:18,430 --> 00:01:21,423
We can use the Play icon to
launch our new emulator instance.

21
00:01:21,423 --> 00:01:26,254
[BLANK_AUDIO]

22
00:01:26,254 --> 00:01:30,375
And here we are with a new emulator,
it's time to launch our app.

23
00:01:30,375 --> 00:01:33,364
Return to Android Studio and
press the Play button to launch.

24
00:01:33,364 --> 00:01:38,387
[BLANK_AUDIO]

25
00:01:38,387 --> 00:01:42,090
And in a short while,
we've gotten our starter app going.

26
00:01:42,090 --> 00:01:45,420
Keep in mind that the emulator
is not just a simulator.

27
00:01:45,420 --> 00:01:48,640
It's actually running
the complete Android stack.

28
00:01:48,640 --> 00:01:51,266
So you can test and
debug your app on different hardware and

29
00:01:51,266 --> 00:01:53,049
software configurations.

30
00:01:53,049 --> 00:01:55,774
You can interacted your app on
your emulator using the screen or

31
00:01:55,775 --> 00:01:57,580
nav controls.

32
00:01:57,579 --> 00:02:01,900
Invoke other apps, play audio or
video and much more.

33
00:02:01,900 --> 00:02:05,230
It also includes debug capabilities,
including log output, and

34
00:02:05,230 --> 00:02:08,789
the ability to simulate app
interrupts or network latency.

35
00:02:08,788 --> 00:02:12,119
To run on the device is
usually very simple as well.

36
00:02:12,120 --> 00:02:13,580
But on Jelly Bean release two and

37
00:02:13,580 --> 00:02:16,870
higher devices, the developer
options are hidden by default.

38
00:02:18,629 --> 00:02:21,519
Shh, to find this secret
menu option go to Settings,

39
00:02:23,599 --> 00:02:28,639
about the device, build number,
and now tap seven times.

40
00:02:31,280 --> 00:02:35,500
And then developer options will
show up in the settings menu.

41
00:02:35,500 --> 00:02:36,099
Go try it.

42
00:02:37,319 --> 00:02:40,069
Now you can turn on USB debugging.

43
00:02:40,069 --> 00:02:43,879
On Windows you need to install a device
driver for the Android Debug Bridge,

44
00:02:43,879 --> 00:02:45,340
or ADB.

45
00:02:45,340 --> 00:02:48,710
You'll also have to do some work
on Linux, check the link for

46
00:02:48,710 --> 00:02:50,909
the individual set up for
your development platform.

47
00:02:52,150 --> 00:02:55,020
Once you've gotten ADB installed,
plug in your device.

48
00:02:56,599 --> 00:02:58,909
If all is working,
JellyBean V2 devices and

49
00:02:58,909 --> 00:03:02,120
above will have you confirm
debugging on the device screen.

50
00:03:02,120 --> 00:03:05,670
After that, it's time to run your app
from Android Studio just as before.

