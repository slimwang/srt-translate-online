1
00:00:00,360 --> 00:00:02,280
In this exercise, you're going to set up a

2
00:00:02,280 --> 00:00:06,350
cron job to periodically update the announcement about the conferences

3
00:00:06,350 --> 00:00:09,450
that are almost sold out. You've already written the function

4
00:00:09,450 --> 00:00:12,200
to create the announcement, so pretty much all you're going

5
00:00:12,200 --> 00:00:14,230
to need to do is to configure the cron job.

6
00:00:14,230 --> 00:00:17,650
So, you configure cron jobs in cron.XML, and this is

7
00:00:17,650 --> 00:00:21,290
an example for what cron.XML might look like; has a

8
00:00:21,290 --> 00:00:26,010
top level cron entries element and then each cron job

9
00:00:26,010 --> 00:00:29,850
is specified within a cron element. You must specify

10
00:00:29,850 --> 00:00:33,290
the path, and this is the URL that's going to

11
00:00:33,290 --> 00:00:36,460
run the task invoked by the cron job. You can

12
00:00:36,460 --> 00:00:40,760
optionally specify a description, and you must specify a schedule.

13
00:00:40,760 --> 00:00:43,330
The schedule indicates how often to run the task.

14
00:00:43,330 --> 00:00:45,960
There's a variety of ways to set the schedule, but

15
00:00:45,960 --> 00:00:48,440
you must strictly follow the syntax or the current job

16
00:00:48,440 --> 00:00:51,850
won't run. I recommend checking the formats for the schedule.

17
00:00:51,850 --> 00:00:55,040
The developer documentation does a really nice job

18
00:00:55,040 --> 00:00:57,710
of describing the syntax for the schedule, and giving

19
00:00:57,710 --> 00:01:00,690
examples. For example, you can specify it to go

20
00:01:00,690 --> 00:01:04,422
every 12 hours. You can specify it to go

21
00:01:04,422 --> 00:01:08,340
once a year, first Monday of, let's say December.

22
00:01:08,340 --> 00:01:11,480
And then there's other ways of specifying it. Anyway,

23
00:01:11,480 --> 00:01:13,570
I really recommend you take a look at the

24
00:01:13,570 --> 00:01:16,860
develop documentation for the schedule. But do bear in

25
00:01:16,860 --> 00:01:19,670
mind, although there's lots of flexibility in how you

26
00:01:19,670 --> 00:01:22,210
specify the schedule, you actually do have to get

27
00:01:22,210 --> 00:01:25,710
the syntax exactly right. So, you can't say every

28
00:01:25,710 --> 00:01:28,720
one hour. You actually have to say every one

29
00:01:28,720 --> 00:01:32,627
hours. The admin console on appspot for your application

30
00:01:32,627 --> 00:01:35,068
has a cron jobs page that shows you what

31
00:01:35,068 --> 00:01:38,860
cron jobs you've got running. I've got my cron

32
00:01:38,860 --> 00:01:42,150
slash set announcement cron job running already, and it's scheduled

33
00:01:42,150 --> 00:01:44,620
to go every one minute, and the last time

34
00:01:44,620 --> 00:01:47,400
it ran it had a success. If you recall, the

35
00:01:47,400 --> 00:01:51,030
set announcement function queries for all conferences that are almost

36
00:01:51,030 --> 00:01:54,280
sold out. So if we look at the quota details,

37
00:01:54,280 --> 00:01:59,000
you can see that my query ops number is going up. It'll

38
00:01:59,000 --> 00:02:02,760
go up every minute. The other thing that's going to go up every minute is the

39
00:02:02,760 --> 00:02:09,470
Datastore API calls. So let's see. So that's 162 and that's 143.

40
00:02:09,470 --> 00:02:14,540
Let's refresh, see what happens. If I refresh the browser,

41
00:02:14,540 --> 00:02:18,280
and you see that now my Datastore Query Ops has gone

42
00:02:18,280 --> 00:02:21,900
up to 144, and my Datastore API Calls have gone

43
00:02:21,900 --> 00:02:24,770
up to 163. So every minute these numbers are going to

44
00:02:24,770 --> 00:02:27,490
go up. It's actually not a big deal because this

45
00:02:27,490 --> 00:02:30,050
cron job doesn't do a whole lot, but if you have

46
00:02:30,050 --> 00:02:32,230
a cron job that does a lot of Reads and Writes

47
00:02:32,230 --> 00:02:35,490
to the Datastore, It is going to use up your quota.

48
00:02:35,490 --> 00:02:38,860
Another thing that running a cron job every minute does

49
00:02:38,860 --> 00:02:41,860
is that it means you're, it means you're app engine

50
00:02:41,860 --> 00:02:45,240
application is always in use, so it never has any

51
00:02:45,240 --> 00:02:47,910
idle time. Which, you know, if your application is in

52
00:02:47,910 --> 00:02:50,910
constant use by users anyway, it goes viral, you're hugely

53
00:02:50,910 --> 00:02:55,430
successful, not a problem. But when your developing and testing,

54
00:02:55,430 --> 00:02:57,720
it does mean that if you keep your cron job

55
00:02:57,720 --> 00:03:00,700
running frequently, it's going to keep your front end up, and you're

56
00:03:00,700 --> 00:03:02,540
going to use up your instance hours. So you can

57
00:03:02,540 --> 00:03:06,860
see here, I've already used 4.64 of my 28 instance

58
00:03:06,860 --> 00:03:09,030
hours. Not a big deal, but it's something to

59
00:03:09,030 --> 00:03:12,960
keep an eye on. Off shot load cron.xml two app

60
00:03:12,960 --> 00:03:16,090
engine. It stays there until you overwrite it with

61
00:03:16,090 --> 00:03:18,788
a new cron dot XML. So if you want to

62
00:03:18,788 --> 00:03:21,692
disable your cron job, it's not good enough to just

63
00:03:21,692 --> 00:03:25,523
delete cron.XML completely from your app and re-upload your app.

64
00:03:25,523 --> 00:03:29,432
You actually have to send up a new cron.XML

65
00:03:29,432 --> 00:03:32,841
with no cron entries. So just delete the cron

66
00:03:32,841 --> 00:03:35,383
entries for the jobs that you want to delete

67
00:03:35,383 --> 00:03:38,570
and reupload your cron.xml. And another thing you could do

68
00:03:38,570 --> 00:03:40,503
is just specify the schedule so that it only

69
00:03:40,503 --> 00:03:42,757
runs like once a year then you're not going to

70
00:03:42,757 --> 00:03:44,903
have to worry about Quotro or anything, but you

71
00:03:44,903 --> 00:03:47,070
know, why not just go ahead and delete it anyway
