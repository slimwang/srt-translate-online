1
00:00:00,210 --> 00:00:03,140
So, after having looped through, after having iterated through

2
00:00:03,140 --> 00:00:06,930
the entire data set, millions and millions of tags,

3
00:00:06,930 --> 00:00:10,170
okay? Then what I'm going to do is print out

4
00:00:10,170 --> 00:00:12,740
the data that I found from my audit. Okay,

5
00:00:12,740 --> 00:00:14,620
so it actually takes a little while for that

6
00:00:14,620 --> 00:00:17,720
to run. So I've run it already, okay? And

7
00:00:17,720 --> 00:00:20,620
here's what the output looks like, okay? So, there

8
00:00:20,620 --> 00:00:25,680
actually aren't that many unusual values. What I find is,

9
00:00:25,680 --> 00:00:27,730
so in the United States, and this is going to vary from

10
00:00:27,730 --> 00:00:30,450
one country to another. In the United States, we number certain

11
00:00:30,450 --> 00:00:33,070
types of roads. So, this would be a U.S. Highway, United

12
00:00:33,070 --> 00:00:36,875
States Highway. Same thing with 53, 59 and so on, alright? So,

13
00:00:36,875 --> 00:00:40,700
that's why I'm seeing these as keys. Alright? Now, this is

14
00:00:40,700 --> 00:00:43,070
odd. My guess is, these look like zip codes to me, or

15
00:00:43,070 --> 00:00:47,361
postal codes. Alright? Another. Road number, okay? And then I'm seeing

16
00:00:47,361 --> 00:00:50,820
different forms of, of avenue, right? . And as I move through

17
00:00:50,820 --> 00:00:53,080
this, okay, so here's a good example of a

18
00:00:53,080 --> 00:00:56,570
set for this particular key value here, for court, okay?

19
00:00:56,570 --> 00:00:59,690
So these are all of the different uses of CT

20
00:00:59,690 --> 00:01:02,920
as an abbreviation for court in this particular data set.

21
00:01:04,040 --> 00:01:06,850
Okay, and as I scroll through this, I see the

22
00:01:06,850 --> 00:01:11,740
rest of the unusual street types. Okay? Now what I

23
00:01:11,740 --> 00:01:14,030
have to decide, and basically this is the process that

24
00:01:14,030 --> 00:01:16,480
you're going to to follow through the, the next few exercises

25
00:01:16,480 --> 00:01:18,570
is, which of these are okay, and which of

26
00:01:18,570 --> 00:01:21,060
them do I need to do something about? South avenue

27
00:01:21,060 --> 00:01:25,390
L? That's actually a correct way of representing a

28
00:01:25,390 --> 00:01:27,450
street name, there's nothing wrong with that. It's just that

29
00:01:27,450 --> 00:01:30,460
it wasn't expected in my audit. It's okay though,

30
00:01:30,460 --> 00:01:33,800
I would probably not want to do anything to change how

31
00:01:33,800 --> 00:01:37,350
this is represented. On the other hand, I don't

32
00:01:37,350 --> 00:01:41,860
really like all caps, abbreviations, so I would probably transform

33
00:01:41,860 --> 00:01:48,220
all of the abbreviations into the specific word that that represents. So for

34
00:01:48,220 --> 00:01:55,260
example, PKWY is an abbreviation for Parkway, okay? So, that's what I would

35
00:01:55,260 --> 00:02:00,640
probably use there, alright? And the same with other abbreviations that we find

36
00:02:00,640 --> 00:02:07,360
here. Street, terrace, so on. Okay, so your general process for the exercises

37
00:02:07,360 --> 00:02:09,508
that follow is going to be to write some

38
00:02:09,508 --> 00:02:14,270
code to audit the data, and then decide what type

39
00:02:14,270 --> 00:02:16,680
of fixes you want to apply to that data.

40
00:02:16,680 --> 00:02:19,628
And then write the code that actually performs the fix.

41
00:02:19,628 --> 00:02:21,900
What you're going to be doing is building up a

42
00:02:21,900 --> 00:02:26,535
code base that will allow you to add data to

43
00:02:26,535 --> 00:02:28,860
MongoDB in such a way that you're cleaning it. So

44
00:02:28,860 --> 00:02:32,230
with each step, you're going to have increasingly clean data.

45
00:02:32,230 --> 00:02:35,360
So one way of going about this would be to do all

46
00:02:35,360 --> 00:02:38,480
of your auditing and all of your cleaning up front, and then

47
00:02:38,480 --> 00:02:41,970
put all of the data into MongoDB, okay? And that would be

48
00:02:41,970 --> 00:02:44,810
a perfectly reasonable way to go about doing it. You can also

49
00:02:44,810 --> 00:02:48,170
take a more iterative approach to it, and clean one piece of

50
00:02:48,170 --> 00:02:50,710
data at a time, or one type of data at a time,

51
00:02:50,710 --> 00:02:53,710
and then, sort of reload your data in MongoDB. Now, the data

52
00:02:53,710 --> 00:02:57,300
set that you'll have will be small enough, that will be possible, okay?

53
00:02:57,300 --> 00:02:58,400
It's really up to you how you want to

54
00:02:58,400 --> 00:03:02,300
approach this problem. So again, our basic process here,

55
00:03:02,300 --> 00:03:03,890
or as we called it in lesson three, our

56
00:03:03,890 --> 00:03:07,670
blueprint, is going to be to audit a particular type

57
00:03:07,670 --> 00:03:11,450
of data, develop a plan for cleaning, write code

58
00:03:11,450 --> 00:03:15,810
to clean and go again, okay? With the next

59
00:03:15,810 --> 00:03:18,650
type of data that we want to then audit

60
00:03:18,650 --> 00:03:22,200
and develop a plan and eventually code for cleaning. Okay.

61
00:03:22,200 --> 00:03:25,070
When you're all done, you will have gone through a process of

62
00:03:25,070 --> 00:03:28,190
cleaning up various facets of the data so that it's ready to be

63
00:03:28,190 --> 00:03:32,110
stored in our database. You'll also have gained quite a bit of experience

64
00:03:32,110 --> 00:03:35,390
with parsing XML using event-based parsing.

65
00:03:35,390 --> 00:03:36,840
Good luck with the next several exercises.
