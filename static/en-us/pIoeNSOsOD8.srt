1
00:00:00,230 --> 00:00:04,730
So, we have used the O state to avoid
inefficiency of the MSI protocol that

2
00:00:04,730 --> 00:00:08,810
had to do with the memory,
getting unnecessary accesses that

3
00:00:08,810 --> 00:00:12,370
could be satisfied by caches
that already have the data.

4
00:00:12,370 --> 00:00:17,450
There is another inefficiency
that both MSI and MOSI have.

5
00:00:17,450 --> 00:00:20,610
And that inefficiency is related
to thread private data, or

6
00:00:20,610 --> 00:00:23,840
data that is only ever
accessed by a single thread.

7
00:00:23,840 --> 00:00:25,090
And thread private data is for

8
00:00:25,090 --> 00:00:29,330
example, all data in a single threaded
program will be thread private.

9
00:00:29,330 --> 00:00:34,180
So if we have a four core processor
around four single threaded programs,

10
00:00:34,180 --> 00:00:36,160
they never share any data.

11
00:00:36,160 --> 00:00:39,110
All of the data in these
programs is like this.

12
00:00:39,110 --> 00:00:43,870
Even when we have a parallel program,
we still have data such as for

13
00:00:43,870 --> 00:00:46,800
example, the stacks of
the individual threads

14
00:00:46,800 --> 00:00:50,280
that are still going to be
accessed only by a single thread.

15
00:00:50,280 --> 00:00:53,730
And then efficiency occurs when
we read the data in a thread, and

16
00:00:53,730 --> 00:00:57,790
then we write it, and this is really
the only thread accessing this data.

17
00:00:57,790 --> 00:01:00,500
With both MSI and MOSI,

18
00:01:00,500 --> 00:01:05,160
what's going to happen is the data
was invalid before we had it.

19
00:01:05,160 --> 00:01:06,470
We read it.

20
00:01:06,470 --> 00:01:08,010
We have a miss.

21
00:01:08,010 --> 00:01:10,080
Now we get the data in the shared state.

22
00:01:10,080 --> 00:01:14,530
When we want to write it, because
it's a shared state, we need to send

23
00:01:14,530 --> 00:01:19,100
out an invalidation, and then we have
the block in the modified state.

24
00:01:19,100 --> 00:01:23,530
And for every single block of data,
we have to do this.

25
00:01:23,530 --> 00:01:26,780
In contrast,
if we had that uniprocessor,

26
00:01:26,780 --> 00:01:32,800
the block would have a valid bit of 0,
we read it, we have a miss.

27
00:01:32,800 --> 00:01:38,028
Now, the value bit becomes 1, and
then we have a hit when we write it, and

28
00:01:38,028 --> 00:01:43,890
then we just change the dirty bit to 1,
so somehow the uniprocessor gets to do

29
00:01:43,890 --> 00:01:49,220
a miss here and a hit here,
whereas to do MSI or

30
00:01:49,220 --> 00:01:54,390
MOSI, we have to do a miss
followed by another bus request.

31
00:01:54,390 --> 00:01:57,420
Granted, it doesn't carry data,
but still we have to wait for

32
00:01:57,420 --> 00:02:00,310
the bus, send something
outside the ship and so on, so

33
00:02:00,310 --> 00:02:03,350
this is still a lot slower
than just a cache hit.

34
00:02:03,350 --> 00:02:07,600
And it's okay to pay the penalty for
having coherence if we're actually

35
00:02:07,600 --> 00:02:12,260
sharing the data, because a uniprocessor
would not provide coherent behavior.

36
00:02:12,260 --> 00:02:16,538
But here,
we actually have no sharing whatsoever.

37
00:02:16,538 --> 00:02:20,610
So what we want to do is
avoid this invalidation, and

38
00:02:20,610 --> 00:02:24,350
to do that, we introduce
a new state called exclusive.
