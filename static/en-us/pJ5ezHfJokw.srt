1
00:00:00,530 --> 00:00:03,200
Recall how for caches we divided memory into blocks,

2
00:00:03,200 --> 00:00:05,920
or cache lines. And this's the granularity at which

3
00:00:05,920 --> 00:00:09,310
caching operates. Similarly, for a paging system we divide

4
00:00:09,310 --> 00:00:13,420
up our physical address into pages, often 4k long.

5
00:00:13,420 --> 00:00:15,980
Pages, are the granularity at which we grant memory

6
00:00:15,980 --> 00:00:19,110
to processes. The higher order bytes determine the page

7
00:00:19,110 --> 00:00:22,560
number, also called the physical page frame. And the

8
00:00:22,560 --> 00:00:25,990
lower order bytes determine the offset into the page.

9
00:00:25,990 --> 00:00:29,330
Correspondingly, the virtual address space is similarly divided into

10
00:00:29,330 --> 00:00:32,509
pages. Again, lower order bytes determine the offset within

11
00:00:32,509 --> 00:00:35,320
a page. The higher ones determine the virtual page

12
00:00:35,320 --> 00:00:38,650
number. The number of bytes in the offset always match,

13
00:00:38,650 --> 00:00:41,940
that's because virtual page sizes and physical page sizes

14
00:00:41,940 --> 00:00:44,860
aren't necessarily the same. But, the number of bits involved

15
00:00:44,860 --> 00:00:47,260
in the virtual page number need not match the

16
00:00:47,260 --> 00:00:51,440
number of bits used to identify the physical frame number.

17
00:00:51,440 --> 00:00:55,790
That's because, as we said before, it's possible to have more virtual pages

18
00:00:55,790 --> 00:00:58,180
than physical pages. Since we're mapping

19
00:00:58,180 --> 00:01:00,200
page for page between virtual and physical

20
00:01:00,200 --> 00:01:04,060
addresses, the offsets stay the same. We do need to translate page numbers

21
00:01:04,060 --> 00:01:07,410
however. And for this, we use a data structure called the Page Table.
