1
00:00:00,000 --> 00:00:02,000
It's important to analyze the running time of this algorithm

2
00:00:02,000 --> 00:00:05,000
so we have some idea of how efficient it is.

3
00:00:05,000 --> 00:00:09,000
And again, that's going to involve counting up the number of primitive steps,

4
00:00:09,000 --> 00:00:15,000
primitive statements, time that the algorithm takes when solving a problem.

5
00:00:15,000 --> 00:00:19,000
We'll assume, as before, that n represents the number of nodes in the graph

6
00:00:19,000 --> 00:00:22,000
and m represents the number of edges.

7
00:00:22,000 --> 00:00:25,000
And it turns out that the basic strategy that we use for this algorithm

8
00:00:25,000 --> 00:00:28,000
is a kind of graph search.

9
00:00:28,000 --> 00:00:35,000
There's 2 principal flavors of graft search, depth first search and breadth first search.

10
00:00:35,000 --> 00:00:40,000
This one that we've been talking about is a form of depth first search.

11
00:00:40,000 --> 00:00:43,000
Later we're going to see a version of breadth first search

12
00:00:43,000 --> 00:00:46,000
when we start looking at shortest paths.

13
00:00:46,000 --> 00:00:49,000
But this particular algorithm is not concerned about the length of the paths,

14
00:00:49,000 --> 00:00:54,000
it's just trying to figure out which nodes can be reached by any kind of path.

15
00:00:54,000 --> 00:00:56,000
So taking a look at this algorithm here,

16
00:00:56,000 --> 00:00:58,000
one of the things that we can note right off the bat

17
00:00:58,000 --> 00:01:02,000
is statements like this one, marked(node) = True,

18
00:01:02,000 --> 00:01:05,000
can only be executed once for each node in the graph.

19
00:01:05,000 --> 00:01:09,000
So even though it's a little bit hard to tell exactly when this is going to execute,

20
00:01:09,000 --> 00:01:13,000
we know at the end of the day every node is going to get marked

21
00:01:13,000 --> 00:01:15,000
and no node is going to get marked twice.

22
00:01:15,000 --> 00:01:19,000
So that means once for each node in the graph we're going to execute this statement

23
00:01:19,000 --> 00:01:21,000
and this statement and this loop.

24
00:01:21,000 --> 00:01:23,000
And what does this loop do?

25
00:01:23,000 --> 00:01:30,000
It goes through and basically visits all the edges that come out of this particular node (node).

26
00:01:30,000 --> 00:01:33,000
And for each of those edges, well, it does some work.

27
00:01:33,000 --> 00:01:37,000
It checks whether or not it's marked, which we're going to assume is a unit time operation,

28
00:01:37,000 --> 00:01:40,000
some kind of nice hash table and it behaves nicely,

29
00:01:40,000 --> 00:01:44,000
and a recursive call, and we're going to somehow have to account for

30
00:01:44,000 --> 00:01:47,000
all the stuff that happens in this recursive call, but let's not worry about that for the moment.

31
00:01:47,000 --> 00:01:52,000
It's going to do this one main computation, this adding whatever value it gets back

32
00:01:52,000 --> 00:01:55,000
to this quantity here, then it returns.

33
00:01:55,000 --> 00:02:00,000
So these statements here are going to get executed once per node.

34
00:02:00,000 --> 00:02:03,000
This statement is going to get executed once per node.

35
00:02:03,000 --> 00:02:06,000
This statement is going to get executed once per edge in the graph

36
00:02:06,000 --> 00:02:10,000
because for each node it's going to visit all the edges emanating from that node.

37
00:02:10,000 --> 00:02:14,000
So even though it's very difficult to keep track of what's going to be executed when,

38
00:02:14,000 --> 00:02:19,000
we know that the total running time here is going to be big theta

39
00:02:19,000 --> 00:02:22,000
of the number of nodes plus the total number of edges in the graph.

40
00:02:22,000 --> 00:02:24,000
So that's what's happening in this marked component.

41
00:02:24,000 --> 00:02:30,000
And then what's happening outside here, this marked gets executed once at all,

42
00:02:30,000 --> 00:02:34,000
then for every node in the graph it may or may not execute this statement,

43
00:02:34,000 --> 00:02:36,000
which does the call to mark component.

44
00:02:36,000 --> 00:02:38,000
So we're going to iterate over all the nodes,

45
00:02:38,000 --> 00:02:44,000
and again, we're going to do some work but not more than constant work per node.

46
00:02:44,000 --> 00:02:47,000
And if we look at our running time here, adding another n in here doesn't change the big theta.

47
00:02:47,000 --> 00:02:52,000
Again, even though it's very complex to figure out which statements are executing when,

48
00:02:52,000 --> 00:02:55,000
the actual running time is big theta of n + m.

49
00:02:55,000 --> 00:02:58,000
It's worth pointing out that this is linear in the size of the graph.

50
00:02:58,000 --> 00:03:01,000
The graph consists of some number of nodes and some number of edges,

51
00:03:01,000 --> 00:03:03,000
and that's the whole story.

52
00:03:03,000 --> 00:03:06,000
So this is actually linear in the size of the graph.
