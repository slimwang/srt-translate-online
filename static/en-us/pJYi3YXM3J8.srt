1
00:00:00,390 --> 00:00:04,604
A mergesort based on multi-way
merging has a memory transfer

2
00:00:04,604 --> 00:00:08,230
complexity of n/L log
base of Z/L of n/ L.

3
00:00:08,230 --> 00:00:10,110
So, is that good or bad?

4
00:00:10,110 --> 00:00:13,970
As it happens, it's as good as we could
hope for, asymptotically speaking.

5
00:00:13,970 --> 00:00:15,320
Let's see why.

6
00:00:15,320 --> 00:00:17,400
You start with n items.

7
00:00:17,400 --> 00:00:20,920
And for simplicity,
let's say that these items are unique.

8
00:00:20,920 --> 00:00:23,990
Initially you haven't seen
any of the items yet.

9
00:00:23,990 --> 00:00:28,010
So all you know is that there are n
factorial possible ways in which you

10
00:00:28,010 --> 00:00:29,190
might order the data, right?

11
00:00:29,190 --> 00:00:32,020
Yikes, that's a lot of orderings.

12
00:00:32,020 --> 00:00:36,100
Of these orderings, the goal of sorting
is to find a specific one in which all

13
00:00:36,100 --> 00:00:39,130
the items are in, for
example, ascending order.

14
00:00:39,130 --> 00:00:43,090
From this point of view, here's a sketch
of one way to determine a lower bound.

15
00:00:43,090 --> 00:00:45,860
Suppose you read some
data from slow memory.

16
00:00:45,860 --> 00:00:48,780
From this data you learn something
which reduces the number of

17
00:00:48,780 --> 00:00:50,220
possible orderings.

18
00:00:50,220 --> 00:00:53,030
Now, let's be a teeny bit more precise.

19
00:00:53,030 --> 00:00:55,340
Suppose there have been t-1 transfers.

20
00:00:56,480 --> 00:01:00,900
Let K of t-1 denote the number of
possible orderings that remain.

21
00:01:00,900 --> 00:01:04,425
And remember, initially,
there are n factorial such orderings.

22
00:01:04,425 --> 00:01:06,885
Suppose that after you do t-1 reads,

23
00:01:06,885 --> 00:01:12,025
you now do another read of block size
L from slow memory to fast memory.

24
00:01:12,025 --> 00:01:13,935
If you've never seen these items before,

25
00:01:13,935 --> 00:01:17,587
then there are L factorial ways
in which you can order them.

26
00:01:17,587 --> 00:01:20,627
Now, if there are any other
items in fast memory already,

27
00:01:20,627 --> 00:01:24,427
let's suppose that you already
know their relative ordering.

28
00:01:24,427 --> 00:01:30,587
So, how many ways can you order up to
Z-L old items, plus the L new items?

29
00:01:30,587 --> 00:01:34,577
It's at most Z choose
L times L factorial.

30
00:01:34,577 --> 00:01:39,060
This is the factor by which the number
of possible orderings might go down.

31
00:01:39,060 --> 00:01:41,010
Then after t reads,

32
00:01:41,010 --> 00:01:43,540
here's the lower bound on
the number of possible orderings.

33
00:01:44,550 --> 00:01:49,413
It's n factorial divided by Z choose
L times L factorial quantity to

34
00:01:49,413 --> 00:01:51,040
the power t.

35
00:01:51,040 --> 00:01:54,820
Now this count is actually a little
bit more conservative than necessary.

36
00:01:54,820 --> 00:01:58,708
The L factorial assumes that we don't
know the order of the L items that we

37
00:01:58,708 --> 00:01:59,760
just read.

38
00:01:59,760 --> 00:02:03,560
But if you've read the L items
before then that won't be the case.

39
00:02:03,560 --> 00:02:07,200
That's because you can only perform
n/L reads of items that have

40
00:02:07,200 --> 00:02:09,100
never been read together before.

41
00:02:09,100 --> 00:02:13,140
Thus we can refine this estimate
of the lower bound on K of t.

42
00:02:13,140 --> 00:02:18,230
In particular L factorial to the t
becomes L factorial to the n/L.

43
00:02:18,230 --> 00:02:19,688
We're almost done.

44
00:02:19,688 --> 00:02:23,900
What you want to know now is when
does this right hand side equal one?

45
00:02:23,900 --> 00:02:26,530
That is,
when does only one ordering remain?

46
00:02:26,530 --> 00:02:29,350
The smallest value of t
such that this happens

47
00:02:29,350 --> 00:02:31,900
is our lower bound on
the number of transfers.

48
00:02:31,900 --> 00:02:34,130
That turns out to be what we were after.

49
00:02:34,130 --> 00:02:37,530
n/L, log base Z/L of n/L.

50
00:02:37,530 --> 00:02:38,280
To get this result,

51
00:02:38,280 --> 00:02:42,090
you just need two common approximation
identities plus a little algebra.

52
00:02:42,090 --> 00:02:44,540
I'll post a nice set
of notes by Lars Arga

53
00:02:44,540 --> 00:02:47,480
that explains all this in detail
in case you're interested.

54
00:02:47,480 --> 00:02:49,120
And you're definitely interested.

55
00:02:49,120 --> 00:02:50,840
Because you love this stuff.

56
00:02:50,840 --> 00:02:52,420
You love it.

57
00:02:52,420 --> 00:02:55,930
[SOUND] That's you making
out with the stuff.

58
00:02:55,930 --> 00:02:57,430
Shame on you!

59
00:02:57,430 --> 00:02:58,550
This is a family course.
