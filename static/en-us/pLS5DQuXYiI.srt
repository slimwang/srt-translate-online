1
00:00:00,130 --> 00:00:01,100
In Sunshine,

2
00:00:01,100 --> 00:00:05,330
we'll using content providers to help us
efficiently sync data from the Internet.

3
00:00:05,330 --> 00:00:07,890
Combined with utilities
in the Android framework.

4
00:00:07,890 --> 00:00:12,410
It also simplifies getting database
content to and from our user interface.

5
00:00:12,410 --> 00:00:16,740
We implement a content provider,
by extending the content provider class.

6
00:00:16,740 --> 00:00:19,890
In Sunshine,
we'll call this class WeatherProvider.

7
00:00:19,890 --> 00:00:23,790
We'll use the weatherprovider to read
and write the database we just created.

8
00:00:23,790 --> 00:00:27,540
You're probably excited to get started
on building our weather provider, but

9
00:00:27,540 --> 00:00:30,470
if you're still unsure about
what content providers are and

10
00:00:30,470 --> 00:00:34,550
how they work, we've built a great
exercise that demonstrates how to take

11
00:00:34,550 --> 00:00:37,220
advantage of all this
gnarlishious goodness.

12
00:00:37,220 --> 00:00:38,370
Why gnarlishious?

13
00:00:38,370 --> 00:00:42,530
Because, this exercise leverages
the user dictionary provider.

14
00:00:42,530 --> 00:00:46,730
So, if you ever wanted to make your
radicaloutius vocabulariousness

15
00:00:46,730 --> 00:00:50,410
understood by your mobile friendpanion
while learning more about content

16
00:00:50,410 --> 00:00:55,260
providers, check the instructor notes
below, for a link to the bonus lesson.

17
00:00:55,260 --> 00:00:58,100
Building a content provider,
involves several steps.

18
00:00:58,100 --> 00:01:01,440
Determining the URIs your
application will need to support.

19
00:01:01,440 --> 00:01:04,543
Updating the contract
to include these URIs,

20
00:01:04,543 --> 00:01:08,599
filling out a URIMatcher that
supports each of these URIs and

21
00:01:08,599 --> 00:01:12,907
implementing the six required
content-provider functions.

22
00:01:12,907 --> 00:01:18,980
Okay, the task is determining URIs,
but, what's a URI anyhow?

23
00:01:18,980 --> 00:01:22,260
A content provider allows us to think
of the data associated with our

24
00:01:22,260 --> 00:01:26,390
views in terms of universal
resource identifiers or URIs.

25
00:01:26,390 --> 00:01:29,180
URIs do exactly what their name implies.

26
00:01:29,180 --> 00:01:33,140
They identify a resource, in our
case a row, or rows, in a database.

27
00:01:34,330 --> 00:01:37,710
You're almost certainly familiar
with the concept of a URI.

28
00:01:37,710 --> 00:01:42,450
Since the URL used for every web
address, is actually a type of URI.

29
00:01:42,450 --> 00:01:46,530
In the case of the web,
it's a URI used to identify web content,

30
00:01:46,530 --> 00:01:49,880
with an HTTP or HTTPS scheme.

31
00:01:49,880 --> 00:01:56,540
In this example, sunshine is using a URI
to query the weather for 94043 location.

32
00:01:56,540 --> 00:01:59,090
Our content provider returns a cursor,

33
00:01:59,090 --> 00:02:02,730
containing the database rows
that correspond to the URI.

34
00:02:02,730 --> 00:02:05,460
By changing the query value of the URI,

35
00:02:05,460 --> 00:02:09,000
we can have Sunshine display weather
from different parts of the country.

36
00:02:09,000 --> 00:02:12,280
Each URI can contain the content scheme.

37
00:02:12,280 --> 00:02:15,940
A scheme is the first part of a URI,
that proceeds the colon, and

38
00:02:15,940 --> 00:02:19,170
it identifies the protocol
that the URI will be using.

39
00:02:19,170 --> 00:02:23,600
You are used to seeing schemes
such as HTTP and FTP in URIs.

40
00:02:23,600 --> 00:02:27,270
Content colon implies that the URI
refers to a content provider.

41
00:02:28,860 --> 00:02:32,920
A content authority, which is a unique
string used to locate your content

42
00:02:32,920 --> 00:02:37,590
provider and it should almost always
be the package name of the application.

43
00:02:37,590 --> 00:02:42,720
A location, which typically points to
a database table within the application.

44
00:02:42,720 --> 00:02:47,760
And optional query, this query can
either be part of the URI path or

45
00:02:47,760 --> 00:02:51,850
it can take the form of a traditional
URI query following a question mark.

46
00:02:51,850 --> 00:02:55,230
As it turns out,
a URI is the primary piece of data,

47
00:02:55,230 --> 00:02:59,580
that is passed in these intents that
Ray To so gloriously described.

48
00:02:59,580 --> 00:03:03,080
In Sunshine, we'll leverage
this to start the detail view,

49
00:03:03,080 --> 00:03:07,075
with a URI that points to the weather,
on a specific day.

50
00:03:07,075 --> 00:03:10,515
The detail view, uses this URI
to query weather provider and

51
00:03:10,515 --> 00:03:12,185
get the right weather data to display.

52
00:03:12,185 --> 00:03:15,495
Another thing that these content
provider URIs, is used for

53
00:03:15,495 --> 00:03:18,822
in android is to notify the user
interface that a piece of the data it is

54
00:03:18,822 --> 00:03:19,852
displaying has changed.

55
00:03:19,852 --> 00:03:24,132
The code registers an Android
construct called a content observer,

56
00:03:24,132 --> 00:03:28,052
during our initial query,
against the URI that is being displayed.

57
00:03:28,052 --> 00:03:31,642
When running a database update routine,
likely on another thread.

58
00:03:31,642 --> 00:03:34,772
That routine will tell Android that
the data associated with the URI

59
00:03:34,772 --> 00:03:36,032
has changed.

60
00:03:36,032 --> 00:03:39,282
And ultimately, that the URI
should requery the database, and

61
00:03:39,282 --> 00:03:40,742
refresh the display.

62
00:03:40,742 --> 00:03:44,100
This will cause the display to refresh,
and show the latest data.

63
00:03:44,100 --> 00:03:47,480
Even though as you can see here,
the URI hasn't changed.

64
00:03:47,480 --> 00:03:49,990
Content providers,
can return all sorts of data.

65
00:03:49,990 --> 00:03:53,920
But the abstract functions return either
a cursor containing a list of items or

66
00:03:53,920 --> 00:03:55,380
a single item.

67
00:03:55,380 --> 00:03:58,430
How these URIs are structured
is up to each application.

68
00:03:58,430 --> 00:04:02,290
But Android provides support, for
appending an ID to the URI path,

69
00:04:02,290 --> 00:04:05,560
to indicate that the application is
interested in a specific record,

70
00:04:05,560 --> 00:04:07,320
rather than a range of records.

71
00:04:07,320 --> 00:04:10,000
In Sunshine, the value for
a specific date and time,

72
00:04:10,000 --> 00:04:13,550
is appended to the query for
weather at a specific location.

73
00:04:13,550 --> 00:04:16,470
And that causes a single
weather record to be returned.

74
00:04:16,470 --> 00:04:18,870
So, defining URIs.

75
00:04:18,870 --> 00:04:19,740
To make it easy for

76
00:04:19,740 --> 00:04:23,360
us, I've defined these data
URIs that we'll be supporting.

77
00:04:23,360 --> 00:04:24,530
Some of these URIs,

78
00:04:24,530 --> 00:04:29,060
exist because the UI has a view that
needs to expose that particular data.

79
00:04:29,060 --> 00:04:30,980
Such as weather with location,

80
00:04:30,980 --> 00:04:34,380
which will be used to display
the main list of forecasts.

81
00:04:34,380 --> 00:04:37,410
And of course,
weather with location and date.

82
00:04:37,410 --> 00:04:40,730
Which would be used to display
the detailed forecast information.

83
00:04:40,730 --> 00:04:45,030
Others, are used primarily for writing
the database, inserts, updates and

84
00:04:45,030 --> 00:04:46,190
deletes.

85
00:04:46,190 --> 00:04:49,880
Having these base URIs,
is also useful for testing.

86
00:04:49,880 --> 00:04:53,170
Now it's time to go back
to our weather contract.

87
00:04:53,170 --> 00:04:56,160
When we first described
what a weather contract is,

88
00:04:56,160 --> 00:05:00,540
we said that it is an agreement between
the data models, storage and views.

89
00:05:00,540 --> 00:05:03,620
Presentation describing how
information is accessed.

90
00:05:03,620 --> 00:05:06,940
It turns out,
that in addition to the column names for

91
00:05:06,940 --> 00:05:11,270
our database, the contract is also
a great place to define the URIs,

92
00:05:11,270 --> 00:05:14,100
that our application will be
using to access its data.

93
00:05:14,100 --> 00:05:17,050
Next, we'll explain what you need
to add to your weather contract.

94
00:05:17,050 --> 00:05:19,890
When you've completed adding
this code to your project,

95
00:05:19,890 --> 00:05:21,580
I'll explain a bit
about what you've done
