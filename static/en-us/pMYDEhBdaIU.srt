1
00:00:00,520 --> 00:00:03,950
Audio playback using
AVAudioEngine involves setting up

2
00:00:03,950 --> 00:00:05,370
audio player notes with content.

3
00:00:05,370 --> 00:00:09,830
We will also be using
the AVAudioUnitTimePitch class

4
00:00:09,830 --> 00:00:12,590
to make changes to the pitch
of the audio output.

5
00:00:12,590 --> 00:00:15,090
In order to make your audio
playback code a little easier,

6
00:00:15,090 --> 00:00:18,050
we've included the functions you
need in a class extension file that

7
00:00:18,050 --> 00:00:19,680
you can import into pitch perfect.

8
00:00:20,770 --> 00:00:25,460
Class extensions allows us to add code
to the PlaySoundsViewController class,

9
00:00:25,460 --> 00:00:27,528
even though this code
resides in another file.

10
00:00:27,528 --> 00:00:31,720
This is going to provide you with
a black box to play back the audio but

11
00:00:31,720 --> 00:00:34,630
don't worry, you can see all
the code inside a black box.

12
00:00:34,630 --> 00:00:37,228
And I'll cover it, line by line,
a little later in this lesson.

13
00:00:37,228 --> 00:00:41,850
In the PlaySoundsViewController.swift
file add the following instance

14
00:00:41,850 --> 00:00:44,230
variables enum after the IB outlets.

15
00:00:44,230 --> 00:00:46,500
Now, we can bring in
the class extension.

16
00:00:46,500 --> 00:00:50,440
It is a file called
PlaySoundsViewControllerPlusAudio.swift

17
00:00:50,440 --> 00:00:53,100
and you can find it in the resources for
this lesson.

18
00:00:53,100 --> 00:00:57,070
I have it here on this folder and
I'll just drag it into Xcode.

19
00:00:57,070 --> 00:00:59,400
Make sure, Copy Item if needed,
is checked and

20
00:00:59,400 --> 00:01:02,180
that the PitchPerfect
target is also checked.

21
00:01:02,180 --> 00:01:03,590
Click, Finish.

22
00:01:03,590 --> 00:01:06,280
I'm going to walk you through the code
you've just added line by line,

23
00:01:06,280 --> 00:01:07,800
a little later in this lesson.

24
00:01:07,800 --> 00:01:10,380
For now, we can concentrate
on just calling out to it and

25
00:01:10,380 --> 00:01:11,670
having the audio playback.

26
00:01:12,810 --> 00:01:16,477
First, we want to add a call to the
setup audio function in the viewDidLoad

27
00:01:16,477 --> 00:01:18,832
so that the AVAudioEngine
is properly setup.

28
00:01:19,850 --> 00:01:22,480
This is one of the functions that
is included in the extension

29
00:01:22,480 --> 00:01:23,960
you've just added into Pitch Perfect.

30
00:01:25,250 --> 00:01:28,547
Add the line to call set up audio
here in the viewDidLoad function.

31
00:01:29,880 --> 00:01:31,612
Next, let's configure the UI, so

32
00:01:31,612 --> 00:01:34,688
that the stop button is disabled
when this view first appears.

33
00:01:34,688 --> 00:01:37,791
As the app won't be playing any
sound until the user presses

34
00:01:37,791 --> 00:01:40,140
one of the six playback buttons.

35
00:01:40,140 --> 00:01:43,010
In the extension file you just drag in,
there's a convenience function

36
00:01:43,010 --> 00:01:47,900
to reset the buttons to the proper state
when playing or not playing music.

37
00:01:47,900 --> 00:01:52,230
We need to set them to not playing right
before the view first appears on screen.

38
00:01:52,230 --> 00:01:53,660
Now, what function can we use for that?

39
00:01:55,300 --> 00:01:58,540
If you're thinking viewWillAppear,
you're right.

40
00:01:58,540 --> 00:02:02,192
Let's add the viewWillAppear function
to the PlaySoundsViewController.

41
00:02:02,192 --> 00:02:05,730
In viewWillAppear,
add a call to the configure UI function

42
00:02:05,730 --> 00:02:08,000
telling it to set the buttons
to the not playing state.

43
00:02:09,130 --> 00:02:11,820
One step left before Pitch Perfect
can play back the audio and

44
00:02:11,820 --> 00:02:13,780
that is what we're
going to be covering next.
