1
00:00:00,280 --> 00:00:05,110
A second method to adapt cases is to
use case based reasoning recursively.

2
00:00:05,110 --> 00:00:08,250
So last time we considered problem
which I had to go from my office

3
00:00:08,250 --> 00:00:10,790
to a restaurant, and
I found a way of doing that.

4
00:00:10,790 --> 00:00:14,310
Now suppose that I have to go from
my home to the same restaurant.

5
00:00:14,310 --> 00:00:16,940
So I don't yet know how to go from
my home to the restaurant, but

6
00:00:16,940 --> 00:00:19,420
I know how to go from
my home to my office.

7
00:00:19,420 --> 00:00:23,850
And this last time, I figured out a way
of going from office to the restaurant.

8
00:00:23,850 --> 00:00:24,960
So there we have it.

9
00:00:24,960 --> 00:00:28,915
Now I have a case retrieved for
going from home to office, another case

10
00:00:28,915 --> 00:00:33,154
retrieved for going from office to
the restaurant, and I have a solution.

11
00:00:33,154 --> 00:00:35,980
We're going from home all
the way to the restaurant.

12
00:00:35,980 --> 00:00:38,120
This is an example of
case based reasoning.

13
00:00:38,120 --> 00:00:40,180
Your first time you retrieve a case for

14
00:00:40,180 --> 00:00:43,680
solving a problem,
the case provides a partial solution.

15
00:00:44,680 --> 00:00:49,870
So I take the remaining part which was
not solved, make it a new problem,

16
00:00:49,870 --> 00:00:51,930
and send it back into the case memory.

17
00:00:51,930 --> 00:00:54,660
Now the case memory finds me a new case.

18
00:00:54,660 --> 00:00:56,060
And I take this new case and

19
00:00:56,060 --> 00:00:59,440
I compose it with the previous
case to get a full solution.

20
00:00:59,440 --> 00:01:03,210
>> So to return again to our programming
example, when I'm designing a program,

21
00:01:03,210 --> 00:01:06,210
my file input is usually
part of a broader problem of

22
00:01:06,210 --> 00:01:08,980
persisting data between
instances of the program.

23
00:01:08,980 --> 00:01:12,460
And thus, the real problem I'm solving
is solving this problem of how to save

24
00:01:12,460 --> 00:01:13,900
data when the program isn't running.

25
00:01:13,900 --> 00:01:17,180
I can then solve that problem
recursively by breaking it down

26
00:01:17,180 --> 00:01:21,370
into the first problem of file input and
the second problem of file output.

27
00:01:21,370 --> 00:01:24,020
I might draw a case for solving file
input from one program I've done in

28
00:01:24,020 --> 00:01:28,570
the past and a case for solving file
output from another program in the past.

29
00:01:28,570 --> 00:01:31,920
So I've solved it recursively by
breaking it down into sub problems.

30
00:01:31,920 --> 00:01:33,630
>> David,
to build on what you just said,

31
00:01:33,630 --> 00:01:36,700
the same kind of thing
occurs in design in general.

32
00:01:36,700 --> 00:01:41,800
Often when we do design, we get
partial solutions for multiple cases.

33
00:01:41,800 --> 00:01:45,070
For example, consider the problem
of designing a microbot

34
00:01:45,070 --> 00:01:48,030
that can swim underwater
in a very stealthy manner.

35
00:01:49,190 --> 00:01:52,150
This might remind me
of a case of a copepod

36
00:01:52,150 --> 00:01:54,560
which has large number of appendages and

37
00:01:54,560 --> 00:02:00,150
swims in the water at very slow velocity
making minimum wake in the water.

38
00:02:00,150 --> 00:02:02,490
That's good,
I've now solved part of the problem,

39
00:02:02,490 --> 00:02:07,370
the part which had to do with moving
stealthily underwater under slow speeds.

40
00:02:07,370 --> 00:02:09,122
But that now sets up a new goal,

41
00:02:09,122 --> 00:02:12,579
how do I achieve stealthy motion
underwater at high speeds?

42
00:02:13,780 --> 00:02:16,930
And I may come up with a solution
from a different case.

43
00:02:16,930 --> 00:02:22,690
So a squid, for example, also swims
stealthily underwater, but it does so

44
00:02:22,690 --> 00:02:26,790
by creating a wake that matches
the natural wake of water around it.

45
00:02:26,790 --> 00:02:31,590
So here I first used the goal
of designing a microbot that can

46
00:02:31,590 --> 00:02:36,400
swim underwater stealthily to
retrieve a case of the copepod.

47
00:02:36,400 --> 00:02:38,430
That provide me with a partial solution.

48
00:02:38,430 --> 00:02:41,238
So I set up a new sub-goal
to complete the solution.

49
00:02:41,238 --> 00:02:44,385
The new sub-goal found a new case,
that of the squid,

50
00:02:44,385 --> 00:02:47,460
which gave me the rest of the solution.

51
00:02:47,460 --> 00:02:51,290
And if I compose the two partial
solutions, I get the complete solution.

52
00:02:51,290 --> 00:02:54,680
>> So what Ashok just described is
something that we call compound analogy,

53
00:02:54,680 --> 00:02:58,390
which is a specific type of
adaptation by recursive reasoning.

54
00:02:58,390 --> 00:02:59,936
If you're interested in that example,

55
00:02:59,936 --> 00:03:02,628
we've provided a paper on it in
the course materials for this lesson.

56
00:03:02,628 --> 00:03:06,872
So you can read more about the process
of adapting those cases to solve that

57
00:03:06,872 --> 00:03:09,280
very unique and complex design problem.
