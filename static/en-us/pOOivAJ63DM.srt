1
00:00:00,200 --> 00:00:04,820
Remember I said, processes or
programs execute an address space.

2
00:00:04,820 --> 00:00:06,220
It's a linear address space.

3
00:00:06,220 --> 00:00:08,750
It goes from zero to
some maximum address,

4
00:00:08,750 --> 00:00:11,290
depending on what your
address space size is.

5
00:00:11,290 --> 00:00:13,240
And a little bit more complicated,

6
00:00:13,240 --> 00:00:16,040
we'll get to that when we
talk about operating systems.

7
00:00:16,040 --> 00:00:18,730
Part of the address space is where
the operating system goes, but

8
00:00:18,730 --> 00:00:22,130
the other part is where user code and
data is going to go.

9
00:00:22,130 --> 00:00:24,250
So that's the part we're talking about.

10
00:00:24,250 --> 00:00:27,460
There's some place where the code is
going to go, that's called segment,

11
00:00:27,460 --> 00:00:32,640
that long lived data goes into part of
that other space that's called the heap.

12
00:00:32,640 --> 00:00:37,080
And the temporary or dynamically
allocated data that we were just talking

13
00:00:37,080 --> 00:00:40,950
about, when you make function calls,
goes into the stack.

14
00:00:40,950 --> 00:00:43,320
That's what the stack is used for.

15
00:00:43,320 --> 00:00:45,260
So we know a stack is,

16
00:00:45,260 --> 00:00:50,460
basically the two things you can do
with the stack is push things on it.

17
00:00:50,460 --> 00:00:51,810
So there's a stack pointer.

18
00:00:51,810 --> 00:00:54,810
When you push something that
is put on top of the stack and

19
00:00:54,810 --> 00:00:57,200
the stack pointer moves one place.

20
00:00:57,200 --> 00:01:01,085
The other thing you can do with
a stack is pop something off it.

21
00:01:01,085 --> 00:01:04,775
So when you do a pop operation,
then the data item or

22
00:01:04,775 --> 00:01:08,735
the element that is at the top of the
stack, the stack pointer it's pointing

23
00:01:08,735 --> 00:01:13,245
to, actually gets popped off,
put in some other place, a register or

24
00:01:13,245 --> 00:01:15,840
a memory location
different from the stack.

25
00:01:15,840 --> 00:01:18,700
And then the stack
pointer is adjusted to

26
00:01:18,700 --> 00:01:21,400
reflect the fact that that
item is no longer there.

27
00:01:21,400 --> 00:01:25,003
So if you sort of think about
the stack as you do push and pop,

28
00:01:25,003 --> 00:01:26,790
the stack pointer moves.

29
00:01:26,790 --> 00:01:32,520
And you need to sort of see in
what direction the stack grows.

30
00:01:32,520 --> 00:01:35,685
So when you push things onto the stack,
the stack is growing.

31
00:01:35,685 --> 00:01:37,570
You're adding more items to it.

32
00:01:37,570 --> 00:01:41,200
When you pop things off,
the stack its shrinking, and

33
00:01:41,200 --> 00:01:45,170
the stack pointer moves as
the stack grows or shrinks.

34
00:01:45,170 --> 00:01:50,390
So we are going to assume that the stack
actually grows from high addresses

35
00:01:50,390 --> 00:01:51,910
to low addresses.

36
00:01:51,910 --> 00:01:54,550
So the stack pointer
starts at some address.

37
00:01:54,550 --> 00:01:59,290
And remember that address space starts
at zero and goes to the maximum so

38
00:01:59,290 --> 00:02:03,564
we have this increasing addresses,
address n, n plus 1, n plus 2.

39
00:02:03,564 --> 00:02:08,038
Typically it is byte addressable,
so each unit for

40
00:02:08,038 --> 00:02:10,810
which we have an address is a byte,
or eight bits.

41
00:02:10,810 --> 00:02:14,250
So the addresses increase as
we go down the address space.

42
00:02:14,250 --> 00:02:18,620
So when I say the stack is going from
high addresses to low addresses,

43
00:02:18,620 --> 00:02:19,790
what does that mean?

44
00:02:19,790 --> 00:02:24,040
Well, the stack pointer actually
absolute address value,

45
00:02:24,040 --> 00:02:28,220
it's going to decrease as we
push things onto the stack.

46
00:02:28,220 --> 00:02:31,850
We allocated some amount of room for
the stack, or some amount of space for

47
00:02:31,850 --> 00:02:33,800
the stack and grow and shrink.

48
00:02:33,800 --> 00:02:37,920
And the stack pointer is initialized
to the bottom of that space.

49
00:02:37,920 --> 00:02:40,890
So the highest address that we have for
the stack reason.

50
00:02:40,890 --> 00:02:46,010
And as we push things onto the stack,
the stack moves to a lower address.
