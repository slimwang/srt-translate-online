1
00:00:00,033 --> 00:00:03,449
So our problem is that we're achieving coalesced reads but scattered writes.

2
00:00:03,449 --> 00:00:06,591
And our goal is to achieve coalesced reads and coalesced writes.

3
00:00:06,591 --> 00:00:09,244
Clearly, swapping the order of the reads and writes wouldn't help

4
00:00:09,244 --> 00:00:12,050
because then we'd simply have scattered reads and coalesced writes.

5
00:00:12,050 --> 00:00:13,980
So, how do we achieve both of these?

6
00:00:13,980 --> 00:00:18,199
The solution is going to be a really important general strategy, so I'll spend a little time on it.

7
00:00:18,199 --> 00:00:24,546
The idea is that we're going to take a tile of the input matrix at a time,

8
00:00:24,546 --> 00:00:31,141
and we're going to transpose it and copy it into its transposed location in the output matrix.

9
00:00:31,141 --> 00:00:36,691
And this is going to be the job of a single thread block, so the threads in this thread block are going to work

10
00:00:36,691 --> 00:00:42,699
cooperatively together to perform this copy and transpose of a tile of elements at a time.

11
00:00:42,699 --> 00:00:47,097
The threads in the thread block are going to copy the tile into shared memory--

12
00:00:47,097 --> 00:00:50,994
a shared memory belonging to that thread block--they're going to perform the transpose.

13
00:00:50,994 --> 00:00:56,103
So now the transpose of these elements, the elements in this tile is happening in shared memory,

14
00:00:56,103 --> 00:01:02,050
where you don't pay that tremendous cost that you see in global memory to do a scattered write or read.

15
00:01:02,050 --> 00:01:06,803
And finally, the threads in the thread block will work together to copy the elements out.

16
00:01:06,803 --> 00:01:14,071
And the key is this. If our tile is large enough--say it's a K by K tile--say the K is 32.

17
00:01:14,071 --> 00:01:23,767
In that case, each warp will copy out a chunk of 32 elements at a time into shared memory.

18
00:01:23,767 --> 00:01:27,458
And because all 32 threads in that warp are

19
00:01:27,458 --> 00:01:30,881
reading and writing in adjacent locations in memory, you'll get good coalescing.

20
00:01:30,881 --> 00:01:36,397
And then, when you copy the transposed matrix to its new location in global memory,

21
00:01:36,397 --> 00:01:39,688
you can once again do it in a coalesced fashion.

22
00:01:39,688 --> 00:01:42,802
So, let's try this as a programming exercise.

23
00:01:42,802 --> 00:01:47,601
We'll give you the start of the tile transpose kernel and the code that calls it,

24
00:01:47,601 --> 00:01:50,545
and you should modify the kernel code to declare it an

25
00:01:50,545 --> 00:01:56,498
array in shared memory and copy appropriate elements in and out of the shared memory so that

26
00:01:56,498 --> 00:01:58,993
the final elements are written out in transpose fashion.

27
00:01:58,993 --> 00:02:04,260
And don't forget to add any syncthread barriers that you need to make sure that you get the correct result.
