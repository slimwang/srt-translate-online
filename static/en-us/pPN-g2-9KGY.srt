1
00:00:00,000 --> 00:00:05,000
Well, once again, I recommend getting started by drawing the finite state machine.

2
00:00:05,000 --> 00:00:09,000
So on a or on b, we go over to state 2,

3
00:00:09,000 --> 00:00:11,000
and we could end there because this is optional,

4
00:00:11,000 --> 00:00:16,000
or on c or d, we could go to state 3 and end there.

5
00:00:16,000 --> 00:00:22,000
Here at the top, I've encoded the edges from state 1 on a we go to state 2.

6
00:00:22,000 --> 00:00:25,000
From state 1 on b, we go to state 2 as well--a or b.

7
00:00:25,000 --> 00:00:28,000
From state 2 on c, we go to state 3.

8
00:00:28,000 --> 00:00:31,000
From state 2 on d, we go to state 3.

9
00:00:31,000 --> 00:00:33,000
And both states, 2 and 3, are accepting.

10
00:00:33,000 --> 00:00:36,000
Then down here, I have 3 test cases.

11
00:00:36,000 --> 00:00:39,000
"ac" which should be accepted.

12
00:00:39,000 --> 00:00:42,000
"aX" which should not. X has no business in this regular expression.

13
00:00:42,000 --> 00:00:47,000
And just "b" alone, which should be fine because the c - d part is optional.

14
00:00:47,000 --> 00:00:48,000
Let's go see.

15
00:00:48,000 --> 00:00:51,000
And we get exactly the output we were expecting--true, false, true.

16
00:00:51,000 --> 00:00:57,000
Now you might have been tempted to have a c - d self-loop back to 2,

17
00:00:57,000 --> 00:01:00,000
instead of this right-hand side of the finite state machine.

18
00:01:00,000 --> 00:01:05,000
However, this self-loop changes the meaning to "[a - b][c - d]*".

19
00:01:05,000 --> 00:01:11,000
If you have this self-loop, acc is accepted--a-c-c, and it shouldn't be,

20
00:01:11,000 --> 99:59:59,999
so the self-loop is not the right way to go.
