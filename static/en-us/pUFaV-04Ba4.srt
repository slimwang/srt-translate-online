1
00:00:00,250 --> 00:00:03,450
Compute a histogram of city distances from Denver.

2
00:00:03,450 --> 00:00:05,020
For every city you would compute its distance from Denver.

3
00:00:05,020 --> 00:00:08,100
And you would build a histogram using the techniques that you've already studied.

4
00:00:08,130 --> 00:00:12,439
And so, a histogram is essentially a binning operation, right?

5
00:00:12,439 --> 00:00:16,138
In this case it's binning on distance, the 1-dimensional quantity of distance.

6
00:00:16,138 --> 00:00:22,542
And so although you would use a binning step in the process of creating that histogram,

7
00:00:22,558 --> 00:00:28,327
it really wouldn't be using the geographic binning that we discussed, the sort of 2-dimensional geographic

8
00:00:28,327 --> 00:00:34,638
binning that we used to accelerate our computation of which cities were within 300 kilometers of each other.

9
00:00:34,684 --> 00:00:37,922
And so, I would answer this no--I would say that

10
00:00:37,938 --> 00:00:42,038
it's not useful to use that geographic binning to compute a histogram of city distances,

11
00:00:42,038 --> 00:00:45,649
even though this is still a geographic problem and a binning problem.

12
00:00:45,649 --> 00:00:49,245
On the other hand, if you have a list of roads and each road is a list

13
00:00:49,245 --> 00:00:55,434
of line segments, you could easily imagine launching a thread per road or a thread per line segment

14
00:00:55,434 --> 00:00:58,322
and using that geographic binning operation to compute

15
00:00:58,322 --> 00:01:03,419
which bins, which tiles, which of the grid cells, that line segment intersects,

16
00:01:03,419 --> 00:01:07,490
and computing the population of all cities within that grid cell or nearby grid cell.

17
00:01:07,490 --> 00:01:13,244
So yes, a geographic binning operation like we described would accelerate this kind of operation.

18
00:01:13,244 --> 00:01:14,939
And, finally, here's a step where the

19
00:01:14,939 --> 00:01:18,033
geographic binning is simply unnecessary work.

20
00:01:18,033 --> 00:01:21,710
If we have a list of counties, and we have a list of cities that have already got a pointer to

21
00:01:21,710 --> 00:01:26,473
containing county that the city is in, then to compute the city-dwelling

22
00:01:26,473 --> 00:01:32,347
population of all the counties is simply a matter of having every city update its county.

23
00:01:32,347 --> 00:01:38,276
So one of the points I wanted to make here is that, in fact, every city is in, at most, one county.

24
00:01:38,276 --> 00:01:42,295
And so you already sort of have a bin, a binning in some sense.

25
00:01:42,310 --> 00:01:44,089
The counties sort of provide a binning.

26
00:01:44,089 --> 00:01:48,571
So even though this isn't a geographic or spatial data structure, this index of

27
00:01:48,571 --> 00:01:51,754
counties and pointers from cities to counties kind of gives you a binning

28
00:01:51,801 --> 00:01:55,282
And so It would be redundant to apply an additional binning step in this case.

29
00:01:55,282 --> 00:01:58,908
So once again, this one is not really going to benefit from the

30
00:01:58,908 --> 00:02:01,923
geographic binning operation that we described.
