1
00:00:00,090 --> 00:00:02,880
So, coming back to our atomic instructions, we have

2
00:00:02,880 --> 00:00:05,546
seen that we can have an atomic exchange, where the

3
00:00:05,546 --> 00:00:08,274
problem was that it keeps writing to the lockvar even

4
00:00:08,274 --> 00:00:11,700
when it's not available. Our test and write class of

5
00:00:11,700 --> 00:00:15,194
instructions, is trying to avoid that. By testing the

6
00:00:15,194 --> 00:00:18,142
memory location, and only writing to it if they find

7
00:00:18,142 --> 00:00:21,528
a zero there. And we might implement a log, with

8
00:00:21,528 --> 00:00:25,488
a test and store, for example, instruction, we will implement

9
00:00:25,488 --> 00:00:28,080
a log by setting R1 to 1, then testing log

10
00:00:28,080 --> 00:00:31,670
variance storing R1 there. And the result we get from this

11
00:00:31,670 --> 00:00:34,250
test and store, let's say 0 in R1 means that

12
00:00:34,250 --> 00:00:37,290
the lockvar was occupied. In which case, we will just repeat

13
00:00:37,290 --> 00:00:40,130
this, try this again and again. But the idea is

14
00:00:40,130 --> 00:00:43,080
that, as long as the lock is occupied, this test and

15
00:00:43,080 --> 00:00:46,450
store is only reading the lock variable, it is not writing

16
00:00:46,450 --> 00:00:50,582
to it. This is good, because remember coherence. If you keep

17
00:00:50,582 --> 00:00:53,530
writing, you keep invalidating all the other copies. So,

18
00:00:53,530 --> 00:00:56,610
everybody that is waiting, keeps generating bus traffic because

19
00:00:56,610 --> 00:00:59,305
they're all trying to write, and thus invalidating each

20
00:00:59,305 --> 00:01:03,118
other. In contrast the test and store, everybody that is

21
00:01:03,118 --> 00:01:05,870
waiting while the lock is occupied, simply gets to

22
00:01:05,870 --> 00:01:09,310
share the lock variable. They are all having it in

23
00:01:09,310 --> 00:01:12,055
the shared state and simply ro, and simply iterating

24
00:01:12,055 --> 00:01:15,840
on their cached copy. Once the lock has been freed,

25
00:01:15,840 --> 00:01:19,716
those shared copies are invalidated, because the unlock, writes

26
00:01:19,716 --> 00:01:22,716
to the lock variable. At this point, everybody sees

27
00:01:22,716 --> 00:01:24,790
the new value and tries to grab the lock,

28
00:01:24,790 --> 00:01:27,901
so there's really only communication on the lock, when the

29
00:01:27,901 --> 00:01:31,342
lock becomes free, until somebody acquires it again. So

30
00:01:31,342 --> 00:01:34,026
this test and write approach, solves the problem of

31
00:01:34,026 --> 00:01:37,381
continuously writing to the lock variable, but doesn't really

32
00:01:37,381 --> 00:01:40,750
solve the problem of, this is a really strange instruction.

33
00:01:40,750 --> 00:01:43,650
It's neither a store nor a load. It

34
00:01:43,650 --> 00:01:46,725
would be ideal for processor design, if we could

35
00:01:46,725 --> 00:01:49,425
do something that is very much like a load,

36
00:01:49,425 --> 00:01:52,200
and very much like a store, yet behaves this

37
00:01:52,200 --> 00:01:55,420
way. And that brings us to the third

38
00:01:55,420 --> 00:01:58,660
type of atomic instructions, which are really now two

39
00:01:58,660 --> 00:02:02,074
instructions. The special load, and a special store, that

40
00:02:02,074 --> 00:02:06,130
are somehow linked together, to create an atomic instruction.
