1
00:00:00,620 --> 00:00:04,250
I want to painfully step through this one line of code here,

2
00:00:04,250 --> 00:00:10,270
which in Dimple, binds our data to the SVG that we want to draw the chart in.

3
00:00:10,270 --> 00:00:16,410
Replacing this line of code in dimple.js with the equivalent d3 statement,

4
00:00:16,410 --> 00:00:22,110
we can see here that in d3 there's actually five functions we have to run.

5
00:00:22,110 --> 00:00:27,410
While using d3's chainable syntax, we could write this all on one line.

6
00:00:27,410 --> 00:00:32,189
I think it's much more clearer of what's happening when you write each new

7
00:00:32,189 --> 00:00:34,730
function called on a separate line.

8
00:00:34,730 --> 00:00:38,320
I wanted to step through each one of these function calls, and

9
00:00:38,320 --> 00:00:41,020
then the web browsers chrome console.

10
00:00:41,020 --> 00:00:44,770
I want to inspect what gets passed in and what gets returned from each.

11
00:00:45,940 --> 00:00:49,440
As you can see here, I put a debugger before and

12
00:00:49,440 --> 00:00:55,700
after the d3 code that binds data to our SVG object in circles.

13
00:00:55,700 --> 00:01:00,400
And I also comped out adding the header title since we're not actually going to

14
00:01:00,400 --> 00:01:05,500
be drawing the entire chart, but walking through only the data binding process.

15
00:01:05,500 --> 00:01:10,180
In the last bit of code I've added are some diagrams visually explaining

16
00:01:10,180 --> 00:01:13,710
the data binding process to the webpage itself as an image.

17
00:01:14,760 --> 00:01:19,740
Opening up the Chrome debugger tools by going to the top right menu,

18
00:01:19,740 --> 00:01:22,700
scrolling down to Tools then JavaScript Console.

19
00:01:22,700 --> 00:01:26,930
We can see here the console threw an error since we

20
00:01:26,930 --> 00:01:29,860
removed the dimple.js code that actually created the chart.

21
00:01:30,950 --> 00:01:32,380
Let's refresh the page.

22
00:01:32,380 --> 00:01:35,290
So our debugger touches before any of our chart code.

23
00:01:36,460 --> 00:01:41,740
After reloading the page we can see here the first debugger statement caught.

24
00:01:41,740 --> 00:01:44,850
What I'll be showing on the webpage itself are some diagrams I

25
00:01:44,850 --> 00:01:50,300
created that visually explain what's happening with the d3 code here.

26
00:01:50,300 --> 00:01:56,176
Before we call the .data function, all we have is SVG on the page and

27
00:01:56,176 --> 00:01:59,760
the worldcup.tsv data file,

28
00:01:59,760 --> 00:02:04,570
which has been loaded via AJAX using the d3 convenience function.

29
00:02:04,570 --> 00:02:10,800
If we inspect our data variable, just like previously, it's a JavaScript array.

30
00:02:10,800 --> 00:02:12,490
In this case with 836 elements,

31
00:02:13,930 --> 00:02:17,190
each of which is an object with a bunch of fields.

32
00:02:17,190 --> 00:02:22,160
Remember that the Chrome Developer Tools provided a convenience function

33
00:02:22,160 --> 00:02:26,460
to print out a tabular representation of a data file such as this.
