1
00:00:00,480 --> 00:00:02,920
So remember that we need
the load length and

2
00:00:02,920 --> 00:00:07,450
the store conditional to behave
like a single atomic instruction so

3
00:00:07,450 --> 00:00:13,280
that writes by other processors cannot
come in between them without us knowing.

4
00:00:13,280 --> 00:00:14,960
Well this is how it happens.

5
00:00:14,960 --> 00:00:19,930
We do a load length from
a lock variable to R1, and

6
00:00:19,930 --> 00:00:25,300
then we do a store conditional
of R2 into the lock variable.

7
00:00:25,300 --> 00:00:30,590
And what we need is that if the load
link finds the lock available and

8
00:00:30,590 --> 00:00:34,240
we try to do a store conditional,
then the store conditional should

9
00:00:34,240 --> 00:00:39,550
only succeed if the lock is still
available at the time we try that.

10
00:00:39,550 --> 00:00:42,090
If somebody else has
written into the lock,

11
00:00:42,090 --> 00:00:43,870
then store conditional needs to fail.

12
00:00:44,970 --> 00:00:48,845
The key for that is that if we snoop

13
00:00:48,845 --> 00:00:53,750
a write to lockvar at any time,
we put a 0 in the link register.

14
00:00:53,750 --> 00:00:57,440
So if the load link loads
the lock variable, and

15
00:00:57,440 --> 00:01:00,690
we see that it's free and
we try to do a store conditional, but

16
00:01:00,690 --> 00:01:05,600
somebody beats us to it, then the store
will fail because it will observe

17
00:01:05,600 --> 00:01:09,560
that the link register doesn't
match the address of the lockvar.

18
00:01:09,560 --> 00:01:13,900
So the load link/store conditional
really are relying on the coherence

19
00:01:13,900 --> 00:01:18,090
where we observe write
by others to make sure

20
00:01:18,090 --> 00:01:22,250
that if the store conditional succeeds,
it can guarantee that

21
00:01:22,250 --> 00:01:26,210
nobody else grabbed a lock between
when we checked the lock and

22
00:01:26,210 --> 00:01:30,500
when we think we grabbed it,
really by writing a busy value into it.

23
00:01:30,500 --> 00:01:35,760
Now note that the load link/store
conditional are atomic by themselves.

24
00:01:35,760 --> 00:01:39,130
We don't need actually to use
a lock to make this atomic.

25
00:01:40,160 --> 00:01:44,980
So some of the critical sections
that would just lock something,

26
00:01:44,980 --> 00:01:49,960
increment a variable and then unlock
the lock, can now directly be

27
00:01:49,960 --> 00:01:54,060
implemented using load link and store
conditional on the variable itself.

28
00:01:54,060 --> 00:01:59,150
By load linking the variable
itself into R1, incrementing R1,

29
00:01:59,150 --> 00:02:03,670
store conditional of R1
back into the variable.

30
00:02:03,670 --> 00:02:08,430
And now we need to check if the R1 as
a result of the store conditional became

31
00:02:08,430 --> 00:02:13,970
a 0, in which case somebody else was
trying to do the same thing, and we

32
00:02:13,970 --> 00:02:19,210
didn't succeed in doing this atomically,
in which case we just try again.

33
00:02:19,210 --> 00:02:21,070
So eventually we will succeed in this.

34
00:02:21,070 --> 00:02:22,870
We will load, and

35
00:02:22,870 --> 00:02:25,940
we will manage to store it before
somebody else beats us to it.

36
00:02:25,940 --> 00:02:31,060
So if another thread is doing the exact
same thing here, let's say we both load.

37
00:02:32,390 --> 00:02:39,680
Now both of us link to the variable,
we both increment, we both stores.

38
00:02:39,680 --> 00:02:43,130
Whoever does the first
store will succeed.

39
00:02:43,130 --> 00:02:46,140
Whoever does the second store

40
00:02:46,140 --> 00:02:51,760
is going to fail because by that time
their link is broken by the first store.

41
00:02:51,760 --> 00:02:54,680
So that's how, for example,
we can do atomic increments and

42
00:02:54,680 --> 00:02:58,790
all sorts of other things that
involve only one memory location.

43
00:02:58,790 --> 00:03:01,620
So very simple critical
sections like this can

44
00:03:01,620 --> 00:03:04,170
actually be directly implemented
with load link/store

45
00:03:04,170 --> 00:03:07,320
conditional without even
needing locks anymore.

46
00:03:07,320 --> 00:03:11,520
We can use load link and store
conditional directly on the variable

47
00:03:11,520 --> 00:03:16,170
itself, and we no longer need
an actual lock around it.

48
00:03:16,170 --> 00:03:21,190
For more complicated critical sections,
such as those that access multiple

49
00:03:21,190 --> 00:03:25,820
variables, however, load link/store
conditional doesn't work well.

50
00:03:25,820 --> 00:03:28,750
But we can still use load link/store
conditional to actually implement

51
00:03:28,750 --> 00:03:32,780
the lock variable here without
needing complicated algorithms.
