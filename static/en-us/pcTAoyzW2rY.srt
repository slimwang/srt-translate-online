1
00:00:00,230 --> 00:00:04,225
So now that we have seen that flat page
tables can be quite large, even for

2
00:00:04,225 --> 00:00:08,145
32-bit address spaces, and
are too big to even fit in memory for

3
00:00:08,145 --> 00:00:12,904
64-bit address spaces, let's talk about
multi-level page tables, which is how we

4
00:00:12,904 --> 00:00:16,730
reduce the size of page tables when
we have a large address space.

5
00:00:16,730 --> 00:00:21,180
So, the problem with flat page tables
is that their size is proportional to

6
00:00:21,180 --> 00:00:24,710
the address space, meaning,
how much memory can the application

7
00:00:24,710 --> 00:00:28,418
possibly address, not how much
memory it is actually using.

8
00:00:28,418 --> 00:00:30,558
For a 32-bit address space,

9
00:00:30,558 --> 00:00:34,295
we have seen that we have
a reasonably sized page table.

10
00:00:34,295 --> 00:00:37,123
So, for 32-bit virtual addresses,

11
00:00:37,123 --> 00:00:40,800
the flat page table size
is several megabytes.

12
00:00:40,800 --> 00:00:44,370
Note that we can have a very small
application that only uses a couple of

13
00:00:44,370 --> 00:00:49,930
kilobytes of memory, yet it still
needs a page table of this size,

14
00:00:49,930 --> 00:00:53,740
because the page table size has nothing
to do with how much memory we are using,

15
00:00:53,740 --> 00:00:56,996
it has to do with how much
memory can we possibly address.

16
00:00:56,996 --> 00:01:03,540
For 64-bit virtual addresses, a flat
page table would simply be too big.

17
00:01:03,540 --> 00:01:07,160
The page table would be many
many gigabytes in size, so

18
00:01:07,160 --> 00:01:10,420
we simply cannot use it
because it wouldn't fit in

19
00:01:10,420 --> 00:01:12,850
the amount of physical
memory we actually have.

20
00:01:12,850 --> 00:01:18,500
So multi-level page tables are designed
to try to overcome both of the problems.

21
00:01:18,500 --> 00:01:23,370
We want the overall size of the page
table to be proportional to how much

22
00:01:23,370 --> 00:01:28,195
memory we are using and
we want our page table to work even for

23
00:01:28,195 --> 00:01:32,010
64-bit virtual addresses, as long as
the program is actually not using

24
00:01:32,010 --> 00:01:36,090
the entire 64-bit virtual address space,
which no program really does.

25
00:01:36,090 --> 00:01:40,590
The idea of why multi-level page
tables work has to do with how

26
00:01:40,590 --> 00:01:45,140
the virtual address space is
usually used by the applications.

27
00:01:45,140 --> 00:01:50,501
Recall that the application thinks
it can address memory with 64-bit

28
00:01:50,501 --> 00:01:55,810
addresses, so it has this many potential
memory locations it can access.

29
00:01:55,810 --> 00:02:01,130
But in reality the application
only allocates memory like this.

30
00:02:01,130 --> 00:02:06,020
At the beginning of the virtual memory,
there is the code, the static variables,

31
00:02:06,020 --> 00:02:11,020
and the heap, and at the top of
the virtual address space is the stack.

32
00:02:11,020 --> 00:02:15,580
So, we're really talking about two
contiguous regions of virtual memory

33
00:02:15,580 --> 00:02:18,890
that are actually used
by the application.

34
00:02:18,890 --> 00:02:23,740
And even if these two are several
gigabytes each, in a 64-bit

35
00:02:23,740 --> 00:02:29,000
address space, there will by many, many
terabytes of unused address space here.

36
00:02:29,000 --> 00:02:33,920
But in a flat page table,
we had to have a page table entry for

37
00:02:33,920 --> 00:02:37,588
each page in this huge space here.

38
00:02:37,588 --> 00:02:43,290
So a multi-level page table,
combines the idea of a flat page table,

39
00:02:43,290 --> 00:02:47,690
where we use some bits from the virtual
address to index the table.

40
00:02:47,690 --> 00:02:49,200
This works really well in hardware.

41
00:02:49,200 --> 00:02:54,430
Hardware really likes using some
bits to index some sort of an array,

42
00:02:54,430 --> 00:03:00,500
but we want to avoid the use of table
entries that correspond to this.

43
00:03:00,500 --> 00:03:04,710
Meaning, we want to have a pretty
normal page table like thing here,

44
00:03:04,710 --> 00:03:08,210
and here, but
somehow not have anything for this so

45
00:03:08,210 --> 00:03:11,250
that we can simply omit
those page table entries.

46
00:03:11,250 --> 00:03:13,960
Now that we have the idea for
what we want,

47
00:03:13,960 --> 00:03:16,730
let's see how the multi-level
page table is actually organized.
