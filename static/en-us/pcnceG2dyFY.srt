1
00:00:00,720 --> 00:00:03,390
Now we're going to talk a little
bit about these terms in detail.

2
00:00:03,390 --> 00:00:06,080
And I'm going to start with the process
of the pipeline known as continuous

3
00:00:06,080 --> 00:00:07,560
integration.

4
00:00:07,560 --> 00:00:11,420
Generally, this includes the code and
test portions of the pipeline.

5
00:00:11,420 --> 00:00:14,710
And those could be expanded to
look a little bit more like this.

6
00:00:14,710 --> 00:00:17,290
So, usually when you're in
an organization different teams or

7
00:00:17,290 --> 00:00:20,630
people may work on separate
functionality of an application.

8
00:00:20,630 --> 00:00:23,591
But there always comes some time when
all these separate functionalities

9
00:00:23,591 --> 00:00:26,060
actually need to be combined
just to form a release.

10
00:00:26,060 --> 00:00:28,650
And this is important because you
need to combine all of this code

11
00:00:28,650 --> 00:00:31,090
to ensure that the product
works as intended.

12
00:00:31,090 --> 00:00:32,700
So these changes from
different developers or

13
00:00:32,700 --> 00:00:35,110
teams are merged together
in one code base.

14
00:00:35,110 --> 00:00:36,260
And the application is built and

15
00:00:36,260 --> 00:00:38,570
the tests are run to ensure
that it actually works.

16
00:00:38,570 --> 00:00:40,890
And this process is called integration.

17
00:00:40,890 --> 00:00:44,390
Now, before continuous integration
came about, developers might code for

18
00:00:44,390 --> 00:00:47,710
long periods of time on their local
machines without checking work into

19
00:00:47,710 --> 00:00:49,250
the code base.

20
00:00:49,250 --> 00:00:50,910
Then, when it came time to integrate,

21
00:00:50,910 --> 00:00:53,480
the integration process
would be unpredictably long.

22
00:00:53,480 --> 00:00:56,640
And that's because they'd be
committing a huge amount of code.

23
00:00:56,640 --> 00:00:59,710
And because combining two huge
code commits is difficult

24
00:00:59,710 --> 00:01:01,970
this would cause all sorts of problems.

25
00:01:01,970 --> 00:01:05,489
Think of issues with interfaces
connecting well, implementations that

26
00:01:05,489 --> 00:01:08,690
don't quite work together,
conflicting components and more.

27
00:01:08,690 --> 00:01:11,260
So what people eventually figured out
is that the more changes that there

28
00:01:11,260 --> 00:01:12,870
are the harder it is to integrate them.

29
00:01:13,970 --> 00:01:16,900
Now on the other hand if you make
small changes and then when you merge,

30
00:01:16,900 --> 00:01:19,830
you find some sort of error,
this is a pretty easy fix.

31
00:01:21,190 --> 00:01:23,070
So teams start to move
away from yearly or

32
00:01:23,070 --> 00:01:25,930
monthly end of project
integration cycles.

33
00:01:25,930 --> 00:01:28,940
So instead, they went for approaches
like nightly bills that are triggered

34
00:01:28,940 --> 00:01:32,080
and run at night after all
the developers have gone home.

35
00:01:32,080 --> 00:01:34,730
And with this approach it's a lot
easier to figure out when and

36
00:01:34,730 --> 00:01:36,450
where a problem occurred.

37
00:01:36,450 --> 00:01:39,160
But there's still chance that when
developers came in the next morning.

38
00:01:39,160 --> 00:01:41,790
They'd find the build had broken and
they need to spend a few

39
00:01:41,790 --> 00:01:44,660
hours digging through a bunch of commits
to figure out who broke the build and

40
00:01:44,660 --> 00:01:46,220
who could fix it.

41
00:01:46,220 --> 00:01:48,070
The logical next step
was to run the build and

42
00:01:48,070 --> 00:01:49,690
test every time the code is checked in.

43
00:01:49,690 --> 00:01:53,320
And this ensures that problems will
be caught and fixed right away.

44
00:01:54,550 --> 00:01:58,970
So to summarize, continuous integration
is a practice of rigid code change in

45
00:01:58,970 --> 00:02:01,750
a shared code base frequently,
often several times a day.

46
00:02:01,750 --> 00:02:06,160
And then performing an automated
build and test process.

47
00:02:06,160 --> 00:02:09,590
Also continuous integration ensures
that changes from different developers

48
00:02:09,590 --> 00:02:12,920
are integrated often and that the
software is always in a working state.
