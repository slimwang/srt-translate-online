1
00:00:00,330 --> 00:00:03,645
Now you've had a lot of practice, making, and traversing array lists, but what

2
00:00:03,645 --> 00:00:07,760
if you want to modify their contents? You know how to get an element, and if

3
00:00:07,760 --> 00:00:12,051
you want to change it, you use a very similar method, the set method. So, over

4
00:00:12,051 --> 00:00:17,324
here, we're calling set, with an index, and the new value. Whatever was there

5
00:00:17,324 --> 00:00:21,232
before at position two is now replaced with this new value. In the next

6
00:00:21,232 --> 00:00:24,886
exercise you will see a couple of lines of code involving get and set that try

7
00:00:24,886 --> 00:00:28,366
to swap two pictures in our gallery but when you run it you'll see it's not

8
00:00:28,366 --> 00:00:34,780
working. Your job is to fix it. Here's the bad code, let's see what's bad about

9
00:00:34,780 --> 00:00:39,750
it. When you run the program, then the gallery looks like this. Clearly it is

10
00:00:39,750 --> 00:00:43,887
not swapping. The pictures had position one and two. Instead, there's seems to

11
00:00:43,887 --> 00:00:47,240
be a gap here. Let's, first of all, understand that gap before we go and fix

12
00:00:47,240 --> 00:00:52,065
it. Here's the original gallery. Let me write the index values so it makes it

13
00:00:52,065 --> 00:00:57,320
easier to follow along what happens. Now, we're taking the element at position

14
00:00:57,320 --> 00:01:02,295
one, that's this fellow here. And now we're setting this one here to this

15
00:01:02,295 --> 00:01:07,236
picture. So now, over here, this element is also that same guy, pardon my

16
00:01:07,236 --> 00:01:15,804
drawing skills, obviously I'm not Gauguin. We get that's this fellow again and

17
00:01:15,804 --> 00:01:22,065
put him into slot one. So what we would expect is to see him twice maybe.

18
00:01:22,065 --> 00:01:26,916
Except remember that what we we're having in the array list are not objects,

19
00:01:26,916 --> 00:01:31,840
but object references. So here's what the array list really looks like. The

20
00:01:31,840 --> 00:01:36,090
zero slot, as a reference to this object. The one and two slot have a reference

21
00:01:36,090 --> 00:01:39,681
to the exact same object, and then the three and four point to these ones, and

22
00:01:39,681 --> 00:01:44,576
I won't draw those arrows. The point is that these ones are the exact same

23
00:01:44,576 --> 00:01:47,852
object, and so it's drawn twice, but you don't see that because it gets drawn

24
00:01:47,852 --> 00:01:53,576
on top of itself. The gap was just an artifact of the positioning. Never mind

25
00:01:53,576 --> 00:01:58,312
the gap, what's important is that if you first copy this one over here you wipe

26
00:01:58,312 --> 00:02:02,826
out the element that's in here and then when you copy back then you just get

27
00:02:02,826 --> 00:02:11,026
two identical values in the array. That's no good. So what we need to do is

28
00:02:11,026 --> 00:02:16,220
instead of wiping out the bridge here at position two, we need to save it.

29
00:02:16,220 --> 00:02:23,100
Let's do that. Here we're saving the old value. At slot two, then we can set

30
00:02:23,100 --> 00:02:30,574
slot two to what we want. And now here, instead of using the new value, we'll

31
00:02:30,574 --> 00:02:36,480
use the old one. I'll go ahead and run this and you'll see that the elements at

32
00:02:36,480 --> 00:02:40,912
one and two are swapped. Here you see them. Get and set are certainly the most

33
00:02:40,912 --> 00:02:45,216
basic operations on an array list. But there are a bunch of others that are

34
00:02:45,216 --> 00:02:47,890
also quite convenient. Let's have a look at those.
