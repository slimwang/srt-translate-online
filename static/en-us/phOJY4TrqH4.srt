1
00:00:00,200 --> 00:00:02,200
Alright, so let's summarize some of the properties that we've

2
00:00:02,200 --> 00:00:05,580
been talking about just so that they're actually written out. One

3
00:00:05,580 --> 00:00:08,320
is that each iteration as we go through this k-means

4
00:00:08,320 --> 00:00:12,020
process. Each iteration is actually polynomial. It's pretty fast. We just

5
00:00:12,020 --> 00:00:15,130
have to go through and look at the distance between

6
00:00:15,130 --> 00:00:17,480
each center, each of the k centers and each of the

7
00:00:17,480 --> 00:00:21,260
n points, to reassign them. And then we have to run

8
00:00:21,260 --> 00:00:25,360
through all the points to redefine the clusters. There could be

9
00:00:25,360 --> 00:00:28,080
an extra factor of d in here, if these are d dimensional points.

10
00:00:28,080 --> 00:00:29,290
>> Sure.

11
00:00:29,290 --> 00:00:31,460
>> That makes, that makes sense, alright? Then you were just

12
00:00:31,460 --> 00:00:34,270
going through the argument as to why the number of iterations would

13
00:00:34,270 --> 00:00:37,988
be finite and exponential. And the exponential is like k to the

14
00:00:37,988 --> 00:00:40,630
nth. And what you said was the first of the n objects

15
00:00:40,630 --> 00:00:43,020
can be in any of k clusters, and the second can be

16
00:00:43,020 --> 00:00:45,240
in any of the k clusters, and the third can be in

17
00:00:45,240 --> 00:00:47,810
any of the k clusters. So we get a total of k

18
00:00:47,810 --> 00:00:51,020
to the nth different ways of assigning points to the k clusters.

19
00:00:51,020 --> 00:00:53,190
>> But I do think what you said in response to that is

20
00:00:53,190 --> 00:00:54,400
right which is in practice, you're

21
00:00:54,400 --> 00:00:57,350
not going to do an explanation under iteration.

22
00:00:57,350 --> 00:00:59,300
>> Right right, in practice it tends be really,

23
00:00:59,300 --> 00:01:01,186
really quite low. It just kind of clicks into place.

24
00:01:01,186 --> 00:01:04,782
>> Because it's a, it's the same thing for reason why the average is, even

25
00:01:04,782 --> 00:01:07,044
though it's a continuous space, it's still

26
00:01:07,044 --> 00:01:09,210
finite. Distance is a really, really strong concern.

27
00:01:10,310 --> 00:01:12,630
>> Right, and so the error on each iteration is

28
00:01:12,630 --> 00:01:16,050
going to decrease if we break ties consistently. And as you've

29
00:01:16,050 --> 00:01:17,898
been pointing out to me, there is one exception here

30
00:01:17,898 --> 00:01:21,030
whereas if things are assigned to clusters, it could be that

31
00:01:21,030 --> 00:01:23,920
things don't improve, that it stays exactly the same, but that

32
00:01:23,920 --> 00:01:27,455
can only happen once. Because then the clusters are going to get

33
00:01:27,455 --> 00:01:31,440
assigned according to the consistent tie breaking rule, and the next

34
00:01:31,440 --> 00:01:34,040
time through we're going to see that we've converged. But there

35
00:01:34,040 --> 00:01:35,840
is something that we didn't talk about that I think is

36
00:01:35,840 --> 00:01:38,640
important to think through. So here's a set of six points.

37
00:01:38,640 --> 00:01:39,526
>> Okay.

38
00:01:39,526 --> 00:01:41,360
>> If I was going to ask you to make three clusters

39
00:01:41,360 --> 00:01:42,600
of this, what would you do?

40
00:01:42,600 --> 00:01:45,860
>> I would put a and b together, c and d together, and e and f together.

41
00:01:45,860 --> 00:01:48,530
>> Indeed. Alright. So that is the,

42
00:01:48,530 --> 00:01:51,930
that's the optimum here. So, the question is,

43
00:01:51,930 --> 00:01:57,990
write down a way of assigning the three cluster centers to points, so that it

44
00:01:57,990 --> 00:02:01,870
will be stuck there and not get to the, the clustering that you just found.

45
00:02:01,870 --> 00:02:06,410
So, just write down a, b, c, d, e, f. Three of them separated by

46
00:02:06,410 --> 00:02:09,550
commas defining where the centers should start

47
00:02:09,550 --> 00:02:12,120
so that it will actually not make progress.

48
00:02:12,120 --> 00:02:12,800
>> Okay.
