1
00:00:00,000 --> 00:00:05,000
[Narrator] Now you understand a little about how to use a complex data structure like a list.

2
00:00:05,000 --> 00:00:08,000
I'm going to talk some about how computers actually store data.

3
00:00:08,000 --> 00:00:11,000
To use a list you don't really need to understand this,

4
00:00:11,000 --> 00:00:15,000
but it will certainly give you a better appreciation of what's going on inside the computer.

5
00:00:15,000 --> 00:00:17,000
In order to store data you need 2 things:

6
00:00:17,000 --> 00:00:21,000
you need something that preserves state and can be in more than 1 state,

7
00:00:21,000 --> 00:00:25,000
2 states is enough, and you need something that can read the state of that thing.

8
00:00:25,000 --> 00:00:28,000
One way to think about that is to think about a light switch.

9
00:00:28,000 --> 00:00:31,000
Here we have a switch; we have our light bulb,

10
00:00:31,000 --> 00:00:35,000
presumably it's also connected to some power source,

11
00:00:35,000 --> 00:00:39,000
and when we flip the switch that turns the light bulb on.

12
00:00:39,000 --> 00:00:40,000
It changes its state.

13
00:00:40,000 --> 00:00:42,000
The light bulb has 2 different states.

14
00:00:42,000 --> 00:00:45,000
It can be off or on, so that means it can store 1 bit of data.

15
00:00:45,000 --> 00:00:48,000
In the next lecture I'll talk more about what a bit means,

16
00:00:48,000 --> 00:00:52,000
but something that can have 2 distinct states can store 1 bit,

17
00:00:52,000 --> 00:00:56,000
and if we had enough light bulbs well we could store many, many bits,

18
00:00:56,000 --> 00:01:00,000
which would be enough to keep track of any amount of data that we wanted.

19
00:01:00,000 --> 00:01:03,000
We don't need just something that can change state though.

20
00:01:03,000 --> 00:01:05,000
We need something that can also sense the state.

21
00:01:05,000 --> 00:01:07,000
With a light button, well, that could be someone's eye.

22
00:01:07,000 --> 00:01:10,000
You can see if the light bulb is on or off, and then you know its state.

23
00:01:10,000 --> 00:01:14,000
You could have a light sensor that would do that if you wanted to make that automatic.

24
00:01:14,000 --> 00:01:18,000
The way computers store data is sort of like this, except for it's using

25
00:01:18,000 --> 00:01:20,000
much less energy and much less space

26
00:01:20,000 --> 00:01:23,000
than a light bulb to store the state of data,

27
00:01:23,000 --> 00:01:25,000
and it's not using a human eye.

28
00:01:25,000 --> 00:01:31,000
It's using sensing electrons or sensing magnetism to sense the state of something.

29
00:01:31,000 --> 00:01:33,000
That's 1 way to store data is like a switch,

30
00:01:33,000 --> 00:01:36,000
and the fastest memory in your computer works that way.

31
00:01:36,000 --> 00:01:41,000
The data that's stored directly in the processor, which is called the register,

32
00:01:41,000 --> 00:01:45,000
is stored like a switch that makes it very fast to change its state,

33
00:01:45,000 --> 00:01:48,000
to record what the state is, but it's also like a light bulb.

34
00:01:48,000 --> 00:01:51,000
It means that when we turn the power off we lose the state,

35
00:01:51,000 --> 00:01:58,000
so it's not persistent, and it's a lot more expensive than other ways of storing data.

36
00:01:58,000 --> 00:02:01,000
The other way computers store data is more like a bucket.

37
00:02:01,000 --> 00:02:05,000
We could represent having a 1 by having a bucket that's full.

38
00:02:05,000 --> 00:02:10,000
We could represent having a 0 by having a bucket that's empty.

39
00:02:10,000 --> 00:02:12,000
Then to check the state of the bucket, we could weigh the bucket

40
00:02:12,000 --> 00:02:16,000
or look at the bucket to figure out whether it's full or empty,

41
00:02:16,000 --> 00:02:19,000
and the difference between buckets and light bulbs is--

42
00:02:19,000 --> 00:02:22,000
--well, buckets leak a little bit.

43
00:02:22,000 --> 00:02:26,000
Water is falling out of the bucket and they also evaporate.

44
00:02:26,000 --> 00:02:30,000
If we want to store data using a bucket it won't last forever.

45
00:02:30,000 --> 00:02:33,000
Eventually the bucket will evaporate, and we can't tell the difference

46
00:02:33,000 --> 00:02:36,000
between a 0 and a 1, and I should also point out

47
00:02:36,000 --> 00:02:40,000
that the amount of water in the bucket--well, we're going to have to decide

48
00:02:40,000 --> 00:02:43,000
some threshold where if it's above that threshold

49
00:02:43,000 --> 00:02:46,000
we think that it represents a 1.

50
00:02:46,000 --> 00:02:49,000
If it's below that threshold we think it represents a 0.

51
00:02:49,000 --> 00:02:52,000
We could certainly imagine having many more levels than just 2 in the bucket.

52
00:02:52,000 --> 00:02:56,000
For computing it's almost always the case that we want to use a digital abstraction

53
00:02:56,000 --> 00:02:59,000
where everything only represents 1 of 2 things.

54
00:02:59,000 --> 00:03:01,000
That makes it less likely that we get it wrong.

55
00:03:01,000 --> 00:03:05,000
As the water evaporates we know it's still a 1 until it gets really near the bottom,

56
00:03:05,000 --> 00:03:07,000
but when it gets near the bottom there's going to be some left,

57
00:03:07,000 --> 00:03:09,000
and we want to know when it becomes a 0.

58
00:03:09,000 --> 00:03:12,000
When we're doing this with electrons we don't call it a bucket.

59
00:03:12,000 --> 00:03:14,000
We call it a capacitor.

60
00:03:14,000 --> 00:03:17,000
The memory in your computer that works this way is called DRAM.
