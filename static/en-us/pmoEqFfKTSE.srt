1
00:00:00,510 --> 00:00:03,990
We can fit even more complicated
functions to data like this.

2
00:00:03,990 --> 00:00:06,570
I'm going to show you the code of
how to do that in just a moment.

3
00:00:06,570 --> 00:00:09,140
But I wanted to start with
sort of the result, and

4
00:00:09,140 --> 00:00:11,340
then go back into the code and
show you how we did it.

5
00:00:12,430 --> 00:00:15,990
So our original polynomial
is a blue line.

6
00:00:15,990 --> 00:00:16,600
It's under here.

7
00:00:16,600 --> 00:00:17,510
You can't quite see it.

8
00:00:18,590 --> 00:00:22,120
And the noisy data, or
the green dots there.

9
00:00:23,620 --> 00:00:26,950
This purple line is our initial guess.

10
00:00:26,950 --> 00:00:33,210
And the fitted polynomial, the red line
here, fits the original pretty closely.

11
00:00:34,870 --> 00:00:37,000
So let me show you a little more detail.

12
00:00:38,160 --> 00:00:39,930
Here is output from our program.

13
00:00:41,200 --> 00:00:43,650
This is our original polynomial.

14
00:00:43,650 --> 00:00:45,530
It printed in kind of a weird way.

15
00:00:45,530 --> 00:00:52,914
Our original polynomial
is 1.5 x to the fourth,

16
00:00:52,914 --> 00:01:00,480
minus 10 X to the third
minus 5 X squared and so on.

17
00:01:00,480 --> 00:01:05,030
Down here are the results
of our optimization.

18
00:01:05,030 --> 00:01:09,880
So here's what we got instead of 1.5 for
the fourth power,

19
00:01:09,880 --> 00:01:14,170
we got 1.6 Instead of -10 for

20
00:01:14,170 --> 00:01:19,260
the third power we've got -10.5 and
so on.

21
00:01:19,260 --> 00:01:21,480
But overall, pretty close and

22
00:01:21,480 --> 00:01:26,600
as you can see by that chart I just
showed you, you know, very nice fitting.

23
00:01:26,600 --> 00:01:29,520
Let's look now at how
we do that in code.

24
00:01:29,520 --> 00:01:30,968
The code here for,

25
00:01:30,968 --> 00:01:37,720
a higher-degree polynomial is very
similar to what we had for the line.

26
00:01:37,720 --> 00:01:40,290
Again, there's an error function
we're trying to minimize.

27
00:01:40,290 --> 00:01:46,160
And we take in the coefficients for
the polynomial and the actual data.

28
00:01:47,250 --> 00:01:49,660
And our error function is computed here.

29
00:01:49,660 --> 00:01:54,650
Again it's a sum of the difference
between the actual data and

30
00:01:54,650 --> 00:01:58,555
the polynomial value squared.

31
00:01:58,555 --> 00:02:01,730
We take the sum of all those values and
that's our error.

32
00:02:01,730 --> 00:02:03,930
So again very similar to what we did for
the line.

33
00:02:05,070 --> 00:02:09,740
Here's our function that finds
the coefficients of the polynomial

34
00:02:09,740 --> 00:02:11,260
has just a few parameters.

35
00:02:11,260 --> 00:02:14,870
The data the we're trying
to fit our error function.

36
00:02:14,870 --> 00:02:19,250
In other words, how do we measure error
and what are we trying to minimize?

37
00:02:19,250 --> 00:02:20,910
And the degree of the polynomial.

38
00:02:21,990 --> 00:02:24,040
We created an initial guess.

39
00:02:24,040 --> 00:02:28,040
In other words, what do we think
the values of the coefficients are?

40
00:02:28,040 --> 00:02:32,240
And what we're doing here is we're
just setting them all to be ones.

41
00:02:32,240 --> 00:02:36,900
We plot that, and then we call
our minimizer, just like before.

42
00:02:36,900 --> 00:02:41,110
We have to tell it, what's the error
function we're trying to minimize?

43
00:02:41,110 --> 00:02:43,150
What's our initial guess?

44
00:02:43,150 --> 00:02:47,870
We have to pass along the data, which
then gets passed to the error function,

45
00:02:47,870 --> 00:02:53,550
and again, this method, SLS Q P and
finally, you can't see it it is

46
00:02:53,550 --> 00:02:57,700
off to the side there, but same options
essentially they are verbose options.

47
00:02:58,870 --> 00:03:06,730
And that's it that's how we use Python
to create a model based on data.
