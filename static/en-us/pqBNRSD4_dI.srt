1
00:00:00,320 --> 00:00:01,670
For this first question,

2
00:00:01,670 --> 00:00:06,930
we're backing up some files from the www
directory to the backup directory.

3
00:00:06,930 --> 00:00:08,860
Since we're making a copy, we'll use cp.

4
00:00:08,860 --> 00:00:13,480
The destination of the cp
command will be backup,

5
00:00:13,480 --> 00:00:16,760
since we want all the copies of
the files to land in that directory.

6
00:00:16,760 --> 00:00:17,450
Be aware, though,

7
00:00:17,450 --> 00:00:20,569
that this command will only work if
the backup directory already exists.

8
00:00:21,800 --> 00:00:23,560
Cp doesn't create
directories on its own.

9
00:00:24,702 --> 00:00:28,400
All right, so
what goes between cp and backup?

10
00:00:28,400 --> 00:00:30,400
Well, the files we want are in www, so

11
00:00:30,400 --> 00:00:34,370
we'll start with that
as a relative path.

12
00:00:34,370 --> 00:00:37,310
We only want the files
though that end in html.

13
00:00:37,310 --> 00:00:39,870
So we'll use *html to specify that.

14
00:00:39,870 --> 00:00:45,999
All right, so the complete
command is cp www/*html backup.

15
00:00:45,999 --> 00:00:50,670
We're copying the files that end
in html to the backup directory.

16
00:00:51,750 --> 00:00:52,840
Okay, so

17
00:00:52,840 --> 00:00:56,830
in this second question we want to list
every file that ends in jpg or png.

18
00:00:57,850 --> 00:00:59,790
We can list files with ls, but

19
00:00:59,790 --> 00:01:02,880
matching just those two file name
endings is a good job for globbing.

20
00:01:04,099 --> 00:01:06,290
Jpg and png are two options,

21
00:01:06,290 --> 00:01:10,020
so we can put them in curly
braces with a comma in between.

22
00:01:10,020 --> 00:01:13,070
To match the rest of the file name,
we put a star in the front.

23
00:01:13,070 --> 00:01:15,400
This is another way that'll work.

24
00:01:15,400 --> 00:01:19,210
This just lists all the jpgs and
then all the pngs.

25
00:01:19,210 --> 00:01:21,000
And this is one more solution.

26
00:01:21,000 --> 00:01:24,820
Since jpg and png both end in g,
we can factor out the g.

27
00:01:26,070 --> 00:01:29,410
This is basically equivalent to our
first solution, but is pretty silly.

28
00:01:29,410 --> 00:01:31,940
I wouldn't really use this in practice.

29
00:01:31,940 --> 00:01:35,080
Okay, our final task is
to print short names

30
00:01:35,080 --> 00:01:38,760
followed by all the one character
filenames in the current directory.

31
00:01:38,760 --> 00:01:42,230
The glob pattern to match a single
character is the question mark, so

32
00:01:42,230 --> 00:01:43,760
we'll start with that.

33
00:01:43,760 --> 00:01:46,620
The command to print to
the command line is echo, so

34
00:01:46,620 --> 00:01:48,560
that's what we'll begin
the command with.

35
00:01:48,560 --> 00:01:52,150
The last part of this command is
the string to print, Short names colon.

36
00:01:52,150 --> 00:01:56,990
You could put quotes around the string
if you want to, but you don't have to.

37
00:01:56,990 --> 00:01:58,320
If this string had
funny characters in it,

38
00:01:58,320 --> 00:02:01,290
though, you'd want to escape those
with a backslash or single quotes.
