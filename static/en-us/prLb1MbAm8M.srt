1
00:00:00,000 --> 00:00:02,425
So what we're going to try to do is expose a little bit of parallelism,

2
00:00:02,425 --> 00:00:06,082
and we're going to do that by first computing a + b

3
00:00:06,082 --> 00:00:08,954
and perhaps at the same time computing c + d

4
00:00:08,954 --> 00:00:11,089
and then add the results together.

5
00:00:11,089 --> 00:00:14,627
Now what's that going to look like in terms of our tree structure?

6
00:00:14,627 --> 00:00:18,091
So now we've got serial reduce and parallel reduce side by side.

7
00:00:18,091 --> 00:00:22,760
Here's serial reduce and the equation. Here's parallel reduce and the equation.

8
00:00:23,236 --> 00:00:28,249
Now what we've done to do parallel reduce is regrouping these operations in a different order,

9
00:00:28,249 --> 00:00:30,877
and this exposes more concurrency.

10
00:00:30,877 --> 00:00:35,093
We now have the ability to run multiple operations in parallel at the same time.

11
00:00:35,093 --> 00:00:39,677
Now you see why associativity was a necessary quality of the reduction operator.

12
00:00:39,677 --> 00:00:43,263
We can reassociate operations to expose more concurrency,

13
00:00:43,263 --> 00:00:47,599
then we can run concurrent operations in parallel to reduce the time to solution.

14
00:00:47,599 --> 00:00:50,560
Let's see how this works with our 4 element reduction.

15
00:00:50,560 --> 00:00:54,236
Let's compare our serial reduction and our parallel reduction.

16
00:00:54,236 --> 00:01:00,240
Both of these have 3 additions. Both of them have 3 units of work.

17
00:01:00,240 --> 00:01:05,583
But whereas the serial reduction has 1, 2, 3 steps to complete,

18
00:01:05,583 --> 00:01:10,048
the parallel reduction only has 1, 2 steps to complete.

19
00:01:10,048 --> 00:01:14,711
So potentially, we can run this with parallel hardware and it will complete faster.

20
00:01:15,572 --> 00:01:19,756
If we extend this problem to reduce a set of elements of size n,

21
00:01:19,756 --> 00:01:24,858
we're very interested in the work and the step complexity as a function of n.

22
00:01:24,858 --> 00:01:29,308
So what's the complexity of these 4 metrics? So 3 of them are pretty straightforward.

23
00:01:29,308 --> 00:01:35,643
The serial implementation here has both O(n) linear work and linear steps.

24
00:01:35,643 --> 00:01:39,446
And the parallel reduction also has linear work, so it's also O(n).

25
00:01:39,446 --> 00:01:44,415
But this one's a little bit more complicated to compute. So let's dive in and take a look at this.
