1
00:00:00,600 --> 00:00:03,220
Okay, so let's say we have
a chain of pizza parlors and

2
00:00:03,220 --> 00:00:05,530
want to put three of them in the city.

3
00:00:05,530 --> 00:00:06,660
We make a study and

4
00:00:06,660 --> 00:00:11,509
realize that the people who eat pizza
the most live in these locations.

5
00:00:11,509 --> 00:00:14,339
So we've decided that we'd like
to put three pizza parlors and

6
00:00:14,339 --> 00:00:18,160
we need to know where
are the optimal places to put them.

7
00:00:18,160 --> 00:00:21,832
Well it seems that the houses
are nicely split into three groups.

8
00:00:21,832 --> 00:00:25,449
The red, the blue, and the yellow.

9
00:00:25,449 --> 00:00:29,175
So it would make sense to put one pizza
parlor in each of the three groups.

10
00:00:29,175 --> 00:00:31,280
But a computer doesn't
know how to do this.

11
00:00:31,280 --> 00:00:35,140
It can't just eyeball the three groups,
we need an algorithm to do it.

12
00:00:35,140 --> 00:00:36,588
So here's an algorithm that'll do it.

13
00:00:37,679 --> 00:00:41,659
Let's start by choosing three random
locations for the pizza parlors.

14
00:00:41,659 --> 00:00:44,659
So they are here, where the stars are.

15
00:00:44,659 --> 00:00:48,659
Now it would make sense to say each
house should go to the pizza parlor

16
00:00:48,659 --> 00:00:51,019
that is the closest to it.

17
00:00:51,020 --> 00:00:54,926
In that case, the yellow houses
go to the yellow pizza parlor.

18
00:00:54,926 --> 00:00:57,917
The blue houses go to
the blue pizza parlor.

19
00:00:57,917 --> 00:01:00,589
And the red houses go to
the red pizza parlor.

20
00:01:02,109 --> 00:01:07,409
But now, look at how far the yellow
houses are from the yellow pizza parlor.

21
00:01:07,409 --> 00:01:11,911
It would make sense to move the yellow
pizza parlor to the very center of its

22
00:01:11,911 --> 00:01:12,716
clientele.

23
00:01:12,716 --> 00:01:16,530
And the same thing for the blue pizza
parlor and the red pizza parlor.

24
00:01:18,060 --> 00:01:19,299
So let's do that.

25
00:01:19,299 --> 00:01:22,349
Let's move each pizza parlor to
the center of its clientele.

26
00:01:23,590 --> 00:01:26,960
But now what happens,
look at these blue houses.

27
00:01:26,959 --> 00:01:31,369
They're now much closer to the yellow
pizza parlor then to the blue one.

28
00:01:31,370 --> 00:01:34,625
So it would make sense for
them to go to the yellow parlor instead.

29
00:01:34,625 --> 00:01:37,090
Let's go ahead and color them yellow.

30
00:01:37,090 --> 00:01:39,260
Same with these red houses over here.

31
00:01:39,260 --> 00:01:41,506
They're closer to the blue
pizza parlor now.

32
00:01:41,506 --> 00:01:43,019
So let's color them blue.

33
00:01:44,810 --> 00:01:45,890
And now again,

34
00:01:45,890 --> 00:01:50,519
it would make sense to move each pizza
parlor to the center of its clientele.

35
00:01:50,519 --> 00:01:53,319
And again, look at this red houses here,

36
00:01:53,319 --> 00:01:56,779
they're closer to the blue pizza
parlor than to the red one.

37
00:01:56,780 --> 00:01:59,632
So let's go ahead and color them blue.

38
00:01:59,632 --> 00:02:04,769
And again, let's send every pizza
parlor to the center of its clientele.

39
00:02:04,769 --> 00:02:06,829
And now we have an optimal solution.

40
00:02:06,829 --> 00:02:09,780
Iterating this process took
us from a random solution

41
00:02:09,780 --> 00:02:13,969
to the ideal one where we have
one pizza parlor at the center of

42
00:02:13,969 --> 00:02:17,379
each of the clusters of houses
where the clients live.

43
00:02:17,379 --> 00:02:20,954
This algorithm is called
K-Means Clustering.

44
00:02:20,955 --> 00:02:24,526
K-Means Clustering is useful when we
have an idea of how many clusters we

45
00:02:24,526 --> 00:02:25,528
want to end up with.

46
00:02:26,569 --> 00:02:28,229
Now I'll leave you with a question.

47
00:02:28,229 --> 00:02:31,069
What if we don't know how many
clusters we want to end up with?


