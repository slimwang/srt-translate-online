1
00:00:00,290 --> 00:00:04,510
Okay, I think we're now ready to
derive a parallel version of BFS.

2
00:00:04,510 --> 00:00:07,410
To summarize,
let's recall the two big ideas.

3
00:00:07,410 --> 00:00:13,050
First, you should carry out a BFS
level by level, not vertex by vertex.

4
00:00:13,050 --> 00:00:16,790
Secondly, you should process
an entire level in parallel, so

5
00:00:16,790 --> 00:00:18,940
remember, why does this work?

6
00:00:18,940 --> 00:00:22,770
Essentially you perform the same
action on every vertex of the level so

7
00:00:22,770 --> 00:00:26,380
the order in which you visit
those vertices shouldn't matter.

8
00:00:26,380 --> 00:00:30,150
So here's a high level pseudocode
that embodies these two big ideas.

9
00:00:30,150 --> 00:00:33,150
Now it looks almost exactly like
the sequential algorithm but

10
00:00:33,150 --> 00:00:35,620
there are two really
important differences.

11
00:00:35,620 --> 00:00:39,060
First, the algorithm
is level synchronous.

12
00:00:39,060 --> 00:00:41,701
Notice that there's a level counter and

13
00:00:41,701 --> 00:00:46,240
there are these level-specific
frontiers, F sub L and F sub L+1.

14
00:00:46,240 --> 00:00:51,100
Now since this loop is going level by
level, the span, as defined by the while

15
00:00:51,100 --> 00:00:56,030
loop anyway, ought to be no more
than the diameter of the graph.

16
00:00:56,030 --> 00:00:57,930
Now to implement the second idea,

17
00:00:57,930 --> 00:01:00,540
I've hidden everything in this
function called process level.

18
00:01:00,540 --> 00:01:04,250
We're going to have to say more about
how you actually implement this thing.

19
00:01:04,250 --> 00:01:08,720
But essentially what it does is it takes
the graph and the current frontier, and

20
00:01:08,720 --> 00:01:10,800
it'll produce a new frontier.

21
00:01:10,800 --> 00:01:13,450
It'll also update
the distances of course.

22
00:01:13,450 --> 00:01:14,860
Now to actually make all of this work,

23
00:01:14,860 --> 00:01:19,810
we have to say, what is the data
structure that we can use for f?

24
00:01:19,810 --> 00:01:20,420
And for that,

25
00:01:20,420 --> 00:01:24,020
I'm going to tell you about a special
data structure called a bag.

26
00:01:24,020 --> 00:01:25,680
Dun da da da, super bag.
