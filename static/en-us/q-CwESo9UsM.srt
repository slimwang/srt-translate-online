1
00:00:00,420 --> 00:00:04,040
Now that we understand the" happened before" relationship

2
00:00:04,040 --> 00:00:07,300
and the transitivity of" happened before" relationship. I also

3
00:00:07,300 --> 00:00:10,220
want to introduce this notion of concurrent events.

4
00:00:10,220 --> 00:00:14,150
That is, concurrent events are events in which there

5
00:00:14,150 --> 00:00:17,190
is no apparent relationship between the events. So,

6
00:00:17,190 --> 00:00:19,630
for instance, I'm showing you two nodes of the

7
00:00:19,630 --> 00:00:25,440
disterbent system. A is an event on one node, and b is an event on another node,

8
00:00:25,440 --> 00:00:30,970
and you can see that since a and b are not events on the same node we cannot

9
00:00:30,970 --> 00:00:34,900
apply the sequential process condition to say that there

10
00:00:34,900 --> 00:00:37,150
is an ordering between a and b, and by the

11
00:00:37,150 --> 00:00:40,630
same token, since a is an event here, b

12
00:00:40,630 --> 00:00:43,570
is an event here And there is no communication between

13
00:00:43,570 --> 00:00:46,080
these two guys that connections these events in any

14
00:00:46,080 --> 00:00:50,510
shape or form, either directly or transitively. There is no

15
00:00:50,510 --> 00:00:53,180
ordering between a and b, and therefore these two

16
00:00:53,180 --> 00:00:58,320
events are concurrent events, not sequential events, not connected

17
00:00:58,320 --> 00:01:01,330
where they happened before relationship, but they're concurrent events.

18
00:01:01,330 --> 00:01:04,569
So, in other words, We cannot say anything about

19
00:01:04,569 --> 00:01:07,280
the ordering of a and b in the distributed

20
00:01:07,280 --> 00:01:09,310
system. So, this is the fun thing about a

21
00:01:09,310 --> 00:01:13,580
distributed system is that has "Happened Before" relationship which

22
00:01:13,580 --> 00:01:16,300
looks at either events on the same process or

23
00:01:16,300 --> 00:01:20,630
events across process is connected by communication and

24
00:01:20,630 --> 00:01:24,485
the transitivity of "Happened Before" relationship Through the native

25
00:01:24,485 --> 00:01:29,200
happened-before relationships give at best a partial order

26
00:01:29,200 --> 00:01:31,340
for all the events that are happening in the

27
00:01:31,340 --> 00:01:33,250
system, so there's no way for us to

28
00:01:33,250 --> 00:01:36,410
derive a total order by looking at the events

29
00:01:36,410 --> 00:01:38,420
that are happening on the same process or just

30
00:01:38,420 --> 00:01:42,060
looking at the events that are happening on the

31
00:01:42,060 --> 00:01:45,940
different processes. In the distributed system and this is

32
00:01:45,940 --> 00:01:49,200
a very good example why it's impossible to get a

33
00:01:49,200 --> 00:01:51,600
total order for all the events that are happening

34
00:01:51,600 --> 00:01:54,110
in the distributed system. Because there are events they are

35
00:01:54,110 --> 00:01:56,330
going to be concurrent, that's the nature of the

36
00:01:56,330 --> 00:02:01,510
game that these procesors are executing asynchronously with respect to

37
00:02:01,510 --> 00:02:04,470
one another and therefore The event that is happening

38
00:02:04,470 --> 00:02:07,090
over here. You know, if I want to look at wall

39
00:02:07,090 --> 00:02:10,639
clock time in one execution of the distributed program,

40
00:02:10,639 --> 00:02:13,880
it's possible that a in real time, happened before

41
00:02:13,880 --> 00:02:16,560
b but the same program when I execute it

42
00:02:16,560 --> 00:02:19,580
again, the second time around, it could be that

43
00:02:19,580 --> 00:02:22,580
this event b happened before a. And therefore, these

44
00:02:22,580 --> 00:02:25,780
2 events are called concurrent events. So the important

45
00:02:25,780 --> 00:02:28,680
point about these concurrent events that happened before relationship

46
00:02:28,680 --> 00:02:32,290
is that And structuring a distributed algorithm. It's important to

47
00:02:32,290 --> 00:02:35,120
recognize what events are connected by the

48
00:02:35,120 --> 00:02:38,300
happened before relationship, and what events are concurrent

49
00:02:38,300 --> 00:02:40,530
events, and once you have an understanding

50
00:02:40,530 --> 00:02:44,350
of these two concepts, then you can build

51
00:02:44,350 --> 00:02:48,120
robust distributed systems and robust applications. Because

52
00:02:48,120 --> 00:02:51,640
if you have any assumptions about the ordering

53
00:02:51,640 --> 00:02:55,240
of events that are unconnected by communication like

54
00:02:55,240 --> 00:02:57,930
this, that can lead to an erronious program.

55
00:02:57,930 --> 00:03:01,040
So one of the bane of distributed programs

56
00:03:01,040 --> 00:03:06,230
is synchronization and communication bugs and timing bugs. And

57
00:03:06,230 --> 00:03:08,810
this is a classic example. Of a timing bug

58
00:03:08,810 --> 00:03:11,240
that you can have if you mentally think that

59
00:03:11,240 --> 00:03:13,330
A happened before B and that's the way you

60
00:03:13,330 --> 00:03:15,940
want it to happen. It may not happen. Because

61
00:03:15,940 --> 00:03:18,580
these two events are concurrent events. Now that I've

62
00:03:18,580 --> 00:03:23,210
introduce to you all important basics of events and

63
00:03:23,210 --> 00:03:26,640
ordering of events in distributed system. It's time for another quiz.
