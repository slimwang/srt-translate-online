1
00:00:00,120 --> 00:00:02,560
Thankfully, I was able to put together a Python

2
00:00:02,560 --> 00:00:05,520
script to get the current diamond price data, similar to

3
00:00:05,520 --> 00:00:10,010
the original diamonds data set, from diamondse.info without too much

4
00:00:10,010 --> 00:00:13,370
trouble. This data set is about ten times the size

5
00:00:13,370 --> 00:00:16,520
of the 2008 diamonds data set, and features diamonds

6
00:00:16,520 --> 00:00:19,120
from all over the world certified by an array of

7
00:00:19,120 --> 00:00:22,870
authorities, besides just the General Logical Institute Of America, or

8
00:00:22,870 --> 00:00:25,230
the GIA. You can read in this data set as

9
00:00:25,230 --> 00:00:28,510
follows, but make sure you've installed the R curl and

10
00:00:28,510 --> 00:00:31,210
bit tops libraries before you do. This might take a

11
00:00:31,210 --> 00:00:34,580
while as a data set contains over about 500,000 cases.

12
00:00:35,660 --> 00:00:38,290
The code used to obtain the data is available at

13
00:00:38,290 --> 00:00:41,480
this link. Let's fit the model again to the big

14
00:00:41,480 --> 00:00:44,610
data set. We'll only use GIA certified diamonds in this

15
00:00:44,610 --> 00:00:47,910
log. I look only at diamonds under $10,000 because these

16
00:00:47,910 --> 00:00:50,450
are the type of diamonds sold at most retailers, and

17
00:00:50,450 --> 00:00:52,910
hence, the kind we care most about. By trimming the

18
00:00:52,910 --> 00:00:56,000
most expensive diamonds from the data set, our model will

19
00:00:56,000 --> 00:00:59,440
also be less likely to be thrown off by outliers,

20
00:00:59,440 --> 00:01:02,400
and the higher variants at the high-end of price and carat.
