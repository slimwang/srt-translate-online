1
00:00:00,380 --> 00:00:02,635
Now such applications are what are called

2
00:00:02,635 --> 00:00:05,460
N-tier applications because if you look at the

3
00:00:05,460 --> 00:00:09,600
software stack that comprises an application such

4
00:00:09,600 --> 00:00:12,770
as this, you'll see several different layers. You

5
00:00:12,770 --> 00:00:15,550
have a presentation layer. And the presentation

6
00:00:15,550 --> 00:00:18,520
layer is the one that is responsible for

7
00:00:18,520 --> 00:00:22,190
painting the screen on your browser. Perhaps

8
00:00:22,190 --> 00:00:25,390
dynamically generating the page based on the request

9
00:00:25,390 --> 00:00:28,070
you made. And there may be application

10
00:00:28,070 --> 00:00:30,960
logic that corresponds to what the service is

11
00:00:30,960 --> 00:00:33,430
providing. And there is business logic that

12
00:00:33,430 --> 00:00:37,750
corresponds to the way airfares are decided, seats

13
00:00:37,750 --> 00:00:40,160
are allocated, all these kinds of things.

14
00:00:40,160 --> 00:00:43,520
And there's a database layer that accesses the

15
00:00:43,520 --> 00:00:47,870
database that contains information about all the things

16
00:00:47,870 --> 00:00:50,730
that the application and the business logic have

17
00:00:50,730 --> 00:00:53,320
to decide on in order to satisfy a

18
00:00:53,320 --> 00:00:57,470
particular request. And all these different layers have

19
00:00:57,470 --> 00:01:00,780
to worry about many of the issues that

20
00:01:00,780 --> 00:01:04,519
we're already familiar with, in the context of writing,

21
00:01:04,519 --> 00:01:07,960
parallel programs and distributive programs, and those include

22
00:01:07,960 --> 00:01:11,640
persistence for actions. For example, let's say I

23
00:01:11,640 --> 00:01:13,320
made a choice, but I haven't completed the

24
00:01:13,320 --> 00:01:15,850
booking. I may go away and come back later

25
00:01:15,850 --> 00:01:18,305
on, in order to complete that booking. So

26
00:01:18,305 --> 00:01:20,790
persistence is something that I might need. You

27
00:01:20,790 --> 00:01:23,920
need a notion of transaction because I have

28
00:01:23,920 --> 00:01:27,530
initiated a particular operation and I have not

29
00:01:27,530 --> 00:01:31,430
completed it and so transaction properties may be

30
00:01:31,430 --> 00:01:33,998
needed in order to make sure that a

31
00:01:33,998 --> 00:01:37,660
reservation that started Is finally complete and I

32
00:01:37,660 --> 00:01:40,900
have made the booking. Caching of data that you

33
00:01:40,900 --> 00:01:43,420
pulled in from a database server so

34
00:01:43,420 --> 00:01:46,660
that you can access the database more quickly.

35
00:01:46,660 --> 00:01:51,210
Clustering, which corresponds to taking a set of

36
00:01:51,210 --> 00:01:54,650
related services and clustering it together in order

37
00:01:54,650 --> 00:01:58,270
to improve the performance of the service. And

38
00:01:58,270 --> 00:02:01,500
similarly clustering the data that you're accessing from

39
00:02:01,500 --> 00:02:05,990
a data base server. All of these are issues, and of course one of the things

40
00:02:05,990 --> 00:02:12,000
that we worry about a lot this days in Ecommerce is security, in particular when

41
00:02:12,000 --> 00:02:16,350
we are communicating financial information, credit card information,

42
00:02:16,350 --> 00:02:18,990
and personal information like social security Id's and

43
00:02:18,990 --> 00:02:26,160
so on We worry a lot about services provided by the server and that my personal

44
00:02:26,160 --> 00:02:29,110
information is not compromised in any fashion. So

45
00:02:29,110 --> 00:02:31,655
these are all the sets of issues that

46
00:02:31,655 --> 00:02:34,760
N-tier Applications have to worry about in

47
00:02:34,760 --> 00:02:38,090
making sure that the services it provides

48
00:02:38,090 --> 00:02:43,035
are trustworthy from an end user's point of view. So, how do we structure an

49
00:02:43,035 --> 00:02:50,440
N-tier application like this? The things that we want to reduce is reduce the

50
00:02:50,440 --> 00:02:53,210
amount of network communication because that results

51
00:02:53,210 --> 00:02:56,960
in latency, reduce security risks for the users

52
00:02:56,960 --> 00:02:59,660
which means that the business logic should

53
00:02:59,660 --> 00:03:03,080
not be compromised. And increase the concurrency for

54
00:03:03,080 --> 00:03:06,560
handling an individual request. For instance, there's

55
00:03:06,560 --> 00:03:09,640
an individual request, but in processing this request,

56
00:03:09,640 --> 00:03:13,155
there's an opportunity to exploit parallelism. Often

57
00:03:13,155 --> 00:03:16,937
times, these are called embarrassingly parallel applications because

58
00:03:16,937 --> 00:03:18,828
even though this request seems like a

59
00:03:18,828 --> 00:03:22,610
single request, there's an opportunity to exploit parallelism.

60
00:03:22,610 --> 00:03:25,350
And the kind of parallelism is embarrassingly parallel

61
00:03:25,350 --> 00:03:28,380
because the same query. I want to find out

62
00:03:28,380 --> 00:03:31,490
the availability of seats on a particular date.

63
00:03:31,490 --> 00:03:33,830
I don't care about which airline I go by.

64
00:03:33,830 --> 00:03:36,070
That's an opportunity for parallelism for the expedia

65
00:03:36,070 --> 00:03:40,050
server, to go in parrallel to multiple airlines and

66
00:03:40,050 --> 00:03:43,310
find out the availability of seats on the

67
00:03:43,310 --> 00:03:47,670
dates that I requested. Similarly, there's opportunity for exploiting

68
00:03:47,670 --> 00:03:52,850
concurrency across several simultaneous requests that are coming in. And

69
00:03:52,850 --> 00:03:58,480
also for clustering the computation that may have to be done on the server for

70
00:03:58,480 --> 00:04:02,440
computations that are common across simultaneously

71
00:04:02,440 --> 00:04:07,000
arriving requests. We want to reuse components aggressively.

72
00:04:07,000 --> 00:04:13,230
By components we mean portions of the application logic that can be reused

73
00:04:13,230 --> 00:04:15,820
in constructing these applications as well as

74
00:04:15,820 --> 00:04:19,050
in the execution of the components in

75
00:04:19,050 --> 00:04:20,350
order to service the requests that are

76
00:04:20,350 --> 00:04:23,880
coming in simultaneously from several different clients.
