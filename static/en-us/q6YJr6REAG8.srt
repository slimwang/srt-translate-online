1
00:00:00,000 --> 00:00:03,000
I'm going to claim that the answer is the third one.

2
00:00:03,000 --> 00:00:05,000
You could certainly argue that there is a better case for the first one,

3
00:00:05,000 --> 00:00:08,000
but that would be pretty disappointing.

4
00:00:08,000 --> 00:00:12,000
The reason that we trust this key is not because it's signed by VeriSign.

5
00:00:12,000 --> 00:00:14,000
In fact, it actually is signed by VeriSign.

6
00:00:14,000 --> 00:00:17,000
When we look at that certificate, we see that it is signed.

7
00:00:17,000 --> 00:00:22,000
It was issued by VeriSign, and it does have a certificate signature.

8
00:00:22,000 --> 00:00:26,000
We could verify it against this public key,

9
00:00:26,000 --> 00:00:30,000
but that would be verifying it against the same key that the certificate describes.

10
00:00:30,000 --> 00:00:33,000
That's what called a self-signed certificate.

11
00:00:33,000 --> 00:00:36,000
This doesn't convince you of anything. Anyone could generate it like that.

12
00:00:36,000 --> 00:00:39,000
In fact, you can do that. You can generate one yourself.

13
00:00:39,000 --> 00:00:42,000
If you're using a Mac, you have open SSL built-in

14
00:00:42,000 --> 00:00:45,000
and use that to generate a self-signed certificate.

15
00:00:45,000 --> 00:00:48,000
But it doesn't prove anything.

16
00:00:48,000 --> 00:00:52,000
The best answer here is that we trust it because we got it from some trusted source,

17
00:00:52,000 --> 00:00:55,000
and we protected it and we know that it's valid.

18
00:00:55,000 --> 00:01:00,000
How that works in a web browser is there is a set of certificates that are built in.

19
00:01:00,000 --> 00:01:02,000
You can download more, but you have to be careful.

20
00:01:02,000 --> 00:01:05,000
If you download them, you need to know that they're secure.

21
00:01:05,000 --> 00:01:09,000
If you look at your browser settings, you can see all the certificates that are built in.

22
00:01:09,000 --> 00:01:11,000
There are actually quite a lot of them.

23
00:01:11,000 --> 00:01:15,000
Not all of these were always built in, so all the ones that are listed as built in were built in.

24
00:01:15,000 --> 00:01:20,000
They came with the browser, and we can see that there is one for VeriSign--

25
00:01:20,000 --> 00:01:23,000
actually several for VeriSign--that were built in.

26
00:01:23,000 --> 00:01:26,000
These are trusted only because we think we got the browser from a trusted source,

27
00:01:26,000 --> 00:01:29,000
and it had these certificates built in.

28
00:01:29,000 --> 00:01:32,000
We can look at one of these certificates.

29
00:01:32,000 --> 00:01:34,000
You'll notice that their rated as different classes.

30
00:01:34,000 --> 00:01:40,000
What it means is mostly that someone was willing to pay more to VeriSign to get a higher certificate.

31
00:01:40,000 --> 00:01:43,000
If you pay more, they do a little more identity checking

32
00:01:43,000 --> 00:01:47,000
to say that you're probably the one who's asking for the certificate.

33
00:01:47,000 --> 00:01:51,000
But all the certificate proves is that VeriSign granted it to you

34
00:01:51,000 --> 00:01:55,000
and decided that the person that they granted a certificate that said "I'm google.com"

35
00:01:55,000 --> 00:01:57,000
probably had some affiliation with Google.

36
00:01:57,000 --> 00:02:03,000
The higher the class the more you have to pay and the more work VeriSign does to validate that.

37
00:02:03,000 --> 00:02:08,000
If we look at one of these certificates, we can see the root certificate that's built in.

38
00:02:08,000 --> 00:02:12,000
This is the root of trust. We're trusting this, because it came in the browser.

39
00:02:12,000 --> 00:02:15,000
You'll notice that these have quite long expiration dates.

40
00:02:15,000 --> 00:02:18,000
Since these are used to sign all these other certificates,

41
00:02:18,000 --> 00:02:21,000
if they expire, all the certificates they sign would break.

42
00:02:21,000 --> 00:02:24,000
That raises the question of what happens when there's a bad certificate.

43
00:02:24,000 --> 00:02:27,000
There have been several well-publicized incidents

44
00:02:27,000 --> 00:02:30,000
where VeriSign or other certificate authorities

45
00:02:30,000 --> 00:02:35,000
accidentally granted a certificate to someone who wasn't actually representing the company

46
00:02:35,000 --> 00:02:37,000
that they asked for a certificate from.

47
00:02:37,000 --> 00:02:39,000
Revocation lists are one way to deal with that.

48
00:02:39,000 --> 00:02:44,000
You can have a list of--well, these are signed certificates that aren't actually valid.

49
00:02:44,000 --> 00:02:47,000
If those are kept up to date, and the browser always checks them,

50
00:02:47,000 --> 00:02:51,000
then you could have a certificate be revoked even though it was signed.

51
00:02:51,000 --> 00:02:54,000
This is a pretty painful solution to this problem, though.

52
00:02:54,000 --> 00:02:56,000
It requires always updating this list.

53
00:02:56,000 --> 00:03:00,000
It means that the time between updates you're vulnerable if there is a bad certificate

54
00:03:00,000 --> 00:03:05,000
and requires a lot of extra work for the browser to validate a certificate.

55
00:03:05,000 --> 00:03:11,000
The best solution, of course, would be never to grant a certificate without validating that identity.
