1
00:00:00,280 --> 00:00:03,469
Magnus has talked to you about
querying by kind, and by property.

2
00:00:03,469 --> 00:00:07,450
In the previous exercise, you practiced
querying for all entities of a kind.

3
00:00:07,450 --> 00:00:11,300
The next step is to write the code to
filter the search results by property

4
00:00:11,300 --> 00:00:12,100
values.

5
00:00:12,100 --> 00:00:15,580
For example, you could find all
of the conferences whose city

6
00:00:15,580 --> 00:00:17,400
property has the value London.

7
00:00:17,400 --> 00:00:20,170
If we did that in code,
it would look like this.

8
00:00:20,170 --> 00:00:22,040
Or if you want to be more
flexible with filters,

9
00:00:22,040 --> 00:00:23,940
you can build a filter like this.

10
00:00:23,940 --> 00:00:27,820
You can set a field,
an operator, and a value.

11
00:00:27,820 --> 00:00:32,820
Build a FilterNode object,
using that field, operator and values.

12
00:00:32,820 --> 00:00:34,460
And attach it to the query.

13
00:00:34,460 --> 00:00:36,720
To practice filtering
queries by property,

14
00:00:36,720 --> 00:00:40,330
you're going to add a function
to the conference API class.

15
00:00:40,330 --> 00:00:42,945
You can call this function whatever
you like, maybe something like,

16
00:00:42,945 --> 00:00:44,140
filterPlayground.

17
00:00:44,140 --> 00:00:46,850
The name doesn't matter because
the function isn't called by the UI.

18
00:00:46,850 --> 00:00:49,418
You're only going to use it
within the APIs Explorer.

19
00:00:49,418 --> 00:00:53,168
You'll be using this method to
experiment and explore setting filters.

20
00:00:53,168 --> 00:00:56,255
You can think of it as a playground
method for exploring queries.

21
00:00:56,255 --> 00:00:58,670
FilterPlayground doesn't
take any arguments.

22
00:00:58,670 --> 00:01:00,930
So the request type
will be void message.

23
00:01:00,930 --> 00:01:04,890
And as for the response, well we're
returning multiple conferences, so

24
00:01:04,890 --> 00:01:07,330
the response type will
be conference forms.

25
00:01:07,330 --> 00:01:10,840
So, define this function to create
a query to get all conferences

26
00:01:10,840 --> 00:01:13,075
where the city property
has the value London.

27
00:01:13,075 --> 00:01:16,740
Run the app on local host, and
use the APIs Explorer to test it.

28
00:01:16,740 --> 00:01:19,660
Look for the new function name in
the list of functions available in

29
00:01:19,660 --> 00:01:20,970
the conference service.

30
00:01:20,970 --> 00:01:24,160
You won't be able to test your new
function in the conference center UI

31
00:01:24,160 --> 00:01:26,333
because nothing in the UI
calls your function.

32
00:01:26,333 --> 00:01:29,812
You can also find sample code
in Lesson_4 > Additions >

33
00:01:29,812 --> 00:01:35,000
TODO_4_conference.py, including some
detailed instructions on how to use it.

34
00:01:35,000 --> 00:01:38,543
Now once you get this to work for
conferences whose city is London,

35
00:01:38,543 --> 00:01:41,708
add another filter on
the conferences.topics field, for

36
00:01:41,708 --> 00:01:43,685
the string Medical Innovations.

37
00:01:43,685 --> 00:01:46,755
Check each one of these boxes as
you progress through this exercise.
