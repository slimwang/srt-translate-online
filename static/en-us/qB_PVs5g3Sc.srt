1
00:00:00,430 --> 00:00:03,500
Hopefully this should've been
a pretty easy exercise for you.

2
00:00:03,500 --> 00:00:07,040
If you'd not already done it,
set a breakpoint to the addBugToView

3
00:00:07,040 --> 00:00:11,670
controller method and
we'll add a breakpoint action to this.

4
00:00:11,670 --> 00:00:16,309
So let's add an action
that plays a sound.

5
00:00:16,309 --> 00:00:17,080
Here we go.

6
00:00:17,080 --> 00:00:18,078
Select basso.

7
00:00:18,078 --> 00:00:21,341
[SOUND] Maybe basso, I guess.

8
00:00:21,341 --> 00:00:24,070
Maybe I've been saying
that wrong all along.

9
00:00:24,070 --> 00:00:27,620
And I'll set the conditions, we want
debugs count to be greater than ten.

10
00:00:28,990 --> 00:00:30,000
Let's run the application.

11
00:00:33,065 --> 00:00:37,185
[SOUND] And so when we tap the screen,
we hear the sound and it stops and

12
00:00:37,185 --> 00:00:40,379
we can see that we have 11
bugs in our bug's array.

13
00:00:40,379 --> 00:00:41,460
So this is kind a cool.

14
00:00:41,460 --> 00:00:44,930
I think, you could imagine that
if you have some condition,

15
00:00:44,930 --> 00:00:48,040
you want to make sure that's not being
triggered, or should only be triggered.

16
00:00:48,040 --> 00:00:50,380
Occasionally you could
play some custom sound,

17
00:00:50,380 --> 00:00:52,765
that makes it sound like your
computers about to explode.

18
00:00:52,765 --> 00:00:54,445
And it will definitely
catch your attention.

19
00:00:54,445 --> 00:00:57,575
And it could be really useful
to use something like this,

20
00:00:57,575 --> 00:01:02,015
if you have maybe a system or
an application that needs to run for,

21
00:01:02,015 --> 00:01:05,535
say 30 minutes, before your actual
break point is going to get triggered.

22
00:01:05,535 --> 00:01:07,035
So, you can have it
running in the background.

23
00:01:07,035 --> 00:01:08,955
And then when you hear the sound,
you know that it's happened.
