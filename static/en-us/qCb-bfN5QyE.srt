1
00:00:00,460 --> 00:00:03,030
One thing you'll notice is that
to actually make use of this

2
00:00:03,030 --> 00:00:07,880
new image resource ID variable we added,
we'll need to modify the constructor so

3
00:00:07,880 --> 00:00:10,820
that this new field can be
initialized to a specific value.

4
00:00:12,570 --> 00:00:17,310
Recall that initialize means to first
set up the value of a variable, so

5
00:00:17,310 --> 00:00:22,208
similar to what we did here for
initializing the mDefaultTranslation and

6
00:00:22,208 --> 00:00:24,435
mMiwokTranslation variables.

7
00:00:24,435 --> 00:00:27,225
And also remember that
a constructor is used to create

8
00:00:27,225 --> 00:00:30,535
object instances from
the class definition.

9
00:00:30,535 --> 00:00:32,674
Hm, how should we go about this?

10
00:00:32,674 --> 00:00:36,270
Should we modify the existing
constructor or just add an additional

11
00:00:36,270 --> 00:00:40,220
one so that we have two
constructors with different inputs?

12
00:00:40,220 --> 00:00:43,900
A healthy way to inform this decision is
to think about the other Java code in

13
00:00:43,900 --> 00:00:46,940
our app that make use
of this Word class.

14
00:00:46,940 --> 00:00:50,800
So we know that three of the four
categories screens have images for

15
00:00:50,800 --> 00:00:52,240
each vocab board.

16
00:00:52,240 --> 00:00:55,920
And the exception is a phraser screen,
which doesn't have images for

17
00:00:55,920 --> 00:00:57,300
each phrase.

18
00:00:57,300 --> 00:01:00,750
So because we have the phrase
a screen that doesn't use any images,

19
00:01:00,750 --> 00:01:04,885
we can have it use our current word
constructor that takes in two inputs,

20
00:01:04,885 --> 00:01:07,480
an English and Miwok translation.

21
00:01:07,480 --> 00:01:12,370
And then we can create another
constructor that takes in three inputs,

22
00:01:12,370 --> 00:01:16,010
so two strings and
one image resource ID, and

23
00:01:16,010 --> 00:01:20,050
use that same constructor for
our remaining three activities.

24
00:01:20,050 --> 00:01:23,860
So think of having different
constructors as different ways to arrive

25
00:01:23,860 --> 00:01:25,750
at an object instance.

26
00:01:25,750 --> 00:01:28,560
The only condition is
that each constructor

27
00:01:28,560 --> 00:01:31,660
has to have a different
set of input parameters.

28
00:01:31,660 --> 00:01:35,510
So for example,
one constructor can require two inputs.

29
00:01:35,510 --> 00:01:39,000
And we could have another one
that requires three inputs,

30
00:01:39,000 --> 00:01:42,090
taking in two strings and one image.

31
00:01:42,090 --> 00:01:44,490
And notice the data type matters.

32
00:01:44,490 --> 00:01:48,755
So if we had a third constructor
that also took in three inputs but

33
00:01:48,755 --> 00:01:52,315
took in two integers and
one image instead,

34
00:01:52,315 --> 00:01:56,545
this constructor is different from this
one that also took in three inputs.

35
00:01:57,625 --> 00:02:00,588
Remember when we were looking at
the documentation for ArrayAdapter?

36
00:02:00,588 --> 00:02:04,115
And in the public contractor section,
we saw that there are multiple public

37
00:02:04,115 --> 00:02:07,324
contractors that we could call to
create a new ArrayAdapter object.

38
00:02:08,370 --> 00:02:12,118
For example,
we could have used this constructor,

39
00:02:12,118 --> 00:02:17,068
passing in a context, resource
layout ID, and an array of objects.

40
00:02:17,068 --> 00:02:21,509
Or on the other hand, we could have used
this ArrayAdapter constructor that took

41
00:02:21,509 --> 00:02:26,040
in a context, resource layout ID,
and an array list of objects.

42
00:02:26,040 --> 00:02:28,230
So all these constructor
options will work.

43
00:02:28,230 --> 00:02:30,157
It just depends on what inputs we have.

44
00:02:30,157 --> 00:02:33,370
And they'll all still allow us to
end up with an ArrayAdapter object.

45
00:02:34,650 --> 00:02:37,770
To help us better understand
multiple constructors,

46
00:02:37,770 --> 00:02:40,240
let's take a look at how
we can declare them.

47
00:02:40,240 --> 00:02:42,250
So I'm going to search for that online.

48
00:02:42,250 --> 00:02:44,430
So after searching up multiple
constructors in Java,

49
00:02:44,430 --> 00:02:48,870
I think I'm going to take a look
at this third tutorial here.

50
00:02:48,870 --> 00:02:53,840
So this tutorial has a section called
Constructor Overloading, and it seems

51
00:02:53,840 --> 00:02:57,960
to be the same thing as multiple
constructors for a single Java class.

52
00:02:57,960 --> 00:02:59,396
So let's click on that.

53
00:02:59,396 --> 00:03:03,703
Hm, so taking a look here, it looks
like this is a simple example, and

54
00:03:03,703 --> 00:03:07,500
we have a class called MyClass,
and it has two constructors.

55
00:03:08,750 --> 00:03:12,120
Now the only difference between
the two lines of declarations for

56
00:03:12,120 --> 00:03:14,050
the constructors is what
arguments they take.

57
00:03:15,268 --> 00:03:17,390
So this first one doesn't
take any input and

58
00:03:17,390 --> 00:03:20,675
the second one takes in
an integer called theNumber.

59
00:03:21,710 --> 00:03:26,350
This example is important to us because,
similarly, we want one constructor

60
00:03:26,350 --> 00:03:30,460
that takes an image resource ID and
another one that doesn't.

61
00:03:30,460 --> 00:03:33,780
So in this example,
it looks like the second constructor

62
00:03:33,780 --> 00:03:36,510
can have different behavior
from the first one.

63
00:03:36,510 --> 00:03:40,470
So here it's initializing
this.number to be equal to

64
00:03:40,470 --> 00:03:42,820
the number that's passed
into the constructor.

65
00:03:42,820 --> 00:03:45,940
So it turns out this is pretty
much the same process that we'll

66
00:03:45,940 --> 00:03:48,670
want to use to add a constructor
to our Word class.

67
00:03:48,670 --> 00:03:51,240
We'll need to write a second
constructor declaration

68
00:03:51,240 --> 00:03:53,680
that takes in an additional input.

69
00:03:53,680 --> 00:03:57,293
And within that second constructor
it's going to do all the same work

70
00:03:57,293 --> 00:04:01,490
as the original constructor, plus
initializing our resource ID variable to

71
00:04:01,490 --> 00:04:04,478
the integer that's passed
into the new constructor.

72
00:04:04,478 --> 00:04:06,620
All right, so on to the exercise.

73
00:04:06,620 --> 00:04:07,755
So for the first task,

74
00:04:07,755 --> 00:04:11,200
I'd like you to add a second
constructor to the Word class.

75
00:04:11,200 --> 00:04:12,520
Now if you recall,

76
00:04:12,520 --> 00:04:16,589
we use the Word constructor to
create an array list of words.

77
00:04:16,589 --> 00:04:20,800
Thus, we need to update each
line in each category activity

78
00:04:20,800 --> 00:04:22,920
to call the proper Word constructor now.

79
00:04:23,960 --> 00:04:26,670
So let me show you what that means
by going back to Android Studio.

80
00:04:27,830 --> 00:04:30,040
Here I am in
the NumbersActivity of our app.

81
00:04:30,040 --> 00:04:33,900
We can change the first word in
the list to include an image as well

82
00:04:33,900 --> 00:04:37,780
by simply calling the new constructor
and passing in three inputs.

83
00:04:37,780 --> 00:04:40,850
As you may have noticed, Android Studio
has a great auto complete feature.

84
00:04:40,850 --> 00:04:44,270
They'll make suggestions for what
resources you might seem to be typing.

85
00:04:44,270 --> 00:04:47,930
So this can be really helpful if you're
trying to refer to an image resource but

86
00:04:47,930 --> 00:04:49,988
can't remember the exact
name of the file.

87
00:04:49,988 --> 00:04:52,620
If you find the one you want,
just go ahead and hit Enter.

88
00:04:53,658 --> 00:04:56,620
Now you will notice here that
Android Studio is throwing us an error.

89
00:04:56,620 --> 00:04:59,420
That's because we haven't
created our new constructor yet.

90
00:04:59,420 --> 00:05:02,020
But once that's created, we shouldn't
be getting this error anymore.

91
00:05:03,590 --> 00:05:06,660
Note there will be no changes
in the appearance of the app.

92
00:05:06,660 --> 00:05:07,940
That will happen in the next step.
