1
00:00:00,520 --> 00:00:03,230
In this exercise,
you'll see the performance implications

2
00:00:03,230 --> 00:00:07,310
of choosing suboptimal data structures
in containers when building an app.

3
00:00:07,310 --> 00:00:09,880
To do this,
we use tools in the Android SDK

4
00:00:09,880 --> 00:00:13,620
to identify performance issues related
to an inefficient data structure choice.

5
00:00:14,620 --> 00:00:18,160
Now as developers, it's easy to overlook
the performance impact that comes with

6
00:00:18,160 --> 00:00:22,110
writing code to store and manipulate
your app's data, so let's take a look at

7
00:00:22,110 --> 00:00:25,480
a situation that explores this problem
and apply a performance mindset to it.

8
00:00:26,900 --> 00:00:28,910
First, make sure you
download the compute and

9
00:00:28,910 --> 00:00:30,900
memory sample application
linked in the notes below.

10
00:00:32,170 --> 00:00:35,330
For this example, we focus on
the runtime of a method that generates

11
00:00:35,330 --> 00:00:37,850
a list of numbers ranked
by their popularity.

12
00:00:37,850 --> 00:00:41,050
For demonstration purposes, this method
is invoked when we press the following

13
00:00:41,050 --> 00:00:43,250
button, dump popular numbers to log.

14
00:00:44,280 --> 00:00:47,570
Now similar to previous examples, the
code seems to impact the frame rate of

15
00:00:47,570 --> 00:00:50,610
our dancing pirate via slight stutter.

16
00:00:50,610 --> 00:00:52,842
And if you take a look at logcat,

17
00:00:52,842 --> 00:00:57,170
you'll see it running via the tag
popularity dump, like so.

18
00:00:57,170 --> 00:00:59,300
Let's take a look at what is
happening under the hood and

19
00:00:59,300 --> 00:01:01,020
learn to measure how fast
this code is running.

20
00:01:02,110 --> 00:01:05,190
We want granular measurements of exactly
what's happening when we click that

21
00:01:05,190 --> 00:01:10,110
button, so we use the trace classes,
begin section, and end

22
00:01:10,110 --> 00:01:14,510
section methods to specify exactly where
we want the start of measurements and

23
00:01:14,510 --> 00:01:16,230
where we want to finish them.

24
00:01:16,230 --> 00:01:19,690
First, we zero in on the code that
is computing the popularity ranks,

25
00:01:19,690 --> 00:01:20,880
which is this method right here.

26
00:01:22,040 --> 00:01:23,400
See the instructor notes below for

27
00:01:23,400 --> 00:01:26,940
the code stubs we'll use to instrument
the code and measure its runtime.

28
00:01:26,940 --> 00:01:29,250
After the next two quizzes,
we'll run Systrace and

29
00:01:29,250 --> 00:01:30,770
retrieve the running
time in milliseconds.
