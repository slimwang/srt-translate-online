1
00:00:00,400 --> 00:00:03,500
The PTS Programming Model is very simple

2
00:00:03,500 --> 00:00:06,400
and straightforward. It's a distributed application and in

3
00:00:06,400 --> 00:00:09,150
the distributed application, there are threads and

4
00:00:09,150 --> 00:00:12,120
channels. These are the two high level abstractions

5
00:00:12,120 --> 00:00:14,230
provided in the programming model. And the

6
00:00:14,230 --> 00:00:19,520
computation graph that you generate using the PTS

7
00:00:19,520 --> 00:00:22,690
programming model, in particular the extractions thread

8
00:00:22,690 --> 00:00:25,760
and channel provided with the PTS programming model.

9
00:00:25,760 --> 00:00:32,130
The computation graph looks very similar to a UNIX process socket graph.

10
00:00:32,130 --> 00:00:36,860
So in terms of a transition for a programmer that is familiar with the

11
00:00:36,860 --> 00:00:40,980
socket API. To transition to programming,

12
00:00:40,980 --> 00:00:45,160
using the abstractions provided by PTS, is

13
00:00:45,160 --> 00:00:48,820
not significant. While the computation graph

14
00:00:48,820 --> 00:00:51,660
looks similar to a process socket graph,

15
00:00:51,660 --> 00:00:54,150
the semantics of the channel abstraction is

16
00:00:54,150 --> 00:00:57,320
very different from the socket abstraction. In

17
00:00:57,320 --> 00:01:00,570
particular, what the channel holds are time

18
00:01:00,570 --> 00:01:05,489
sequenced data objects. So a thread is generating

19
00:01:05,489 --> 00:01:08,890
time sequence data objects can place those

20
00:01:08,890 --> 00:01:12,530
time sequence data objects into the channel.

21
00:01:12,530 --> 00:01:14,270
The other thing you will also notice

22
00:01:14,270 --> 00:01:17,390
from the structure of this computation graph that

23
00:01:17,390 --> 00:01:23,650
there could be multiple producers of data that go into a given channel And

24
00:01:23,650 --> 00:01:26,480
similarly, there could be multiple consumers of

25
00:01:26,480 --> 00:01:29,630
data that are getting data from a given

26
00:01:29,630 --> 00:01:36,830
channel. Or, in other words, a channel allows many to many connections. A thread

27
00:01:36,830 --> 00:01:42,880
that produces some data and wants to put it into a channel uses the primitive

28
00:01:42,880 --> 00:01:46,480
provided for. Operating on the channel, namely the

29
00:01:46,480 --> 00:01:49,520
put item primitive and the put item takes two

30
00:01:49,520 --> 00:01:52,322
arguments, one is the item itself, which is

31
00:01:52,322 --> 00:01:57,450
whatever the application decides as the content of the

32
00:01:57,450 --> 00:01:58,830
data that it wants to put in the

33
00:01:58,830 --> 00:02:02,900
channel. The time stamp that it can associate with

34
00:02:02,900 --> 00:02:05,370
the data that it is producing and placing in

35
00:02:05,370 --> 00:02:08,419
the channel. So if you look at the contents

36
00:02:08,419 --> 00:02:13,730
of any given channel, it's really showing a temporal evolution of data that is

37
00:02:13,730 --> 00:02:16,830
being produced by a particular thread. For

38
00:02:16,830 --> 00:02:20,430
example, this thread could be capturing data from

39
00:02:20,430 --> 00:02:27,220
a camera and every item that it produces is one frame of image captured from

40
00:02:27,220 --> 00:02:30,060
the camera associated with the wall clock

41
00:02:30,060 --> 00:02:34,340
time. At which that particular frame was captured.

42
00:02:34,340 --> 00:02:41,000
A computation that is needing to use the data will do a get on a channel and

43
00:02:41,000 --> 00:02:47,885
when it does a get on a channel it actually has to specify two arguments. One is

44
00:02:47,885 --> 00:02:53,280
a lower bound for a time stamp that it is looking for and an upper bound. Or

45
00:02:53,280 --> 00:02:56,520
in other words a thread that wishes to

46
00:02:56,520 --> 00:03:00,370
get data from this channel, for instance, will specify

47
00:03:00,370 --> 00:03:05,610
in the get primitive that I want to get the data that is in a particular channel

48
00:03:05,610 --> 00:03:11,622
starting at a particular time. Say 1:05 p.m., To an upper bound, 1:06

49
00:03:11,622 --> 00:03:17,920
p.m. And what the thread is going to get back is all the items that this

50
00:03:17,920 --> 00:03:21,250
channel contains between this lower bound and upper

51
00:03:21,250 --> 00:03:25,460
bound. The programming model also allows an application

52
00:03:25,460 --> 00:03:31,720
to specify time variables in an abstract way. It could say, I want the oldest

53
00:03:31,720 --> 00:03:37,600
item from a channel, or the newest item from the channel. In addition

54
00:03:37,600 --> 00:03:44,540
to specifying explicit lower bound and upper bound markers if it so chooses.

55
00:03:44,540 --> 00:03:50,520
So in other words, a channel contains a continuous stream of data that have been

56
00:03:50,520 --> 00:03:57,370
snapshotted with different time stamps associated with them. So, this is the way

57
00:03:57,370 --> 00:04:02,560
one could write a program that uses the primitives provided by the PTS

58
00:04:02,560 --> 00:04:08,450
programming model. Let's say we are writing the code for a detector

59
00:04:08,450 --> 00:04:14,669
that is looking at video stream produced by a particular camera. In that case,

60
00:04:16,140 --> 00:04:21,310
the detector will associate a variable channel one with

61
00:04:21,310 --> 00:04:25,704
the video stream that corresponds to what that camera's producing.

62
00:04:26,870 --> 00:04:31,262
And continuously what it is going to do is, it

63
00:04:31,262 --> 00:04:37,400
is going to get a camera image from that particular channel. And

64
00:04:37,400 --> 00:04:41,280
it might specify a lower bound and an upper bound in terms of time that it is

65
00:04:41,280 --> 00:04:49,140
looking for. Process the data, produce an output, and it might place the output.

66
00:04:49,140 --> 00:04:54,820
That it produced as a digest of information that it processed into another

67
00:04:54,820 --> 00:05:01,310
channel, and it'll do that by putting the digest as a new item, and

68
00:05:01,310 --> 00:05:06,490
associate a time stamp. This is a place where the programming model facilitates.

69
00:05:06,490 --> 00:05:08,860
Temporal causality to be propagated in the

70
00:05:08,860 --> 00:05:13,380
distributed system. So if this thread is

71
00:05:13,380 --> 00:05:16,280
a detector thread that is looking at

72
00:05:16,280 --> 00:05:20,844
the camera images produced by a camera thread,

73
00:05:20,844 --> 00:05:26,650
then it can take the camera images, process it. And place it in its

74
00:05:26,650 --> 00:05:31,882
output channel, and when it places it in the output channel, it can use the same

75
00:05:31,882 --> 00:05:36,750
time stamp that it got for an input image in doing the put

76
00:05:36,750 --> 00:05:39,200
operation, and that way, there is simple

77
00:05:39,200 --> 00:05:41,860
causality that is being propagated through this

78
00:05:41,860 --> 00:05:46,713
graph by the computation using the primitive that

79
00:05:46,713 --> 00:05:51,990
is available from this PTS programming system. Quite often in

80
00:05:51,990 --> 00:05:57,320
situation awareness application, the computation may have to use data

81
00:05:57,320 --> 00:05:59,760
from several different streams in order to

82
00:05:59,760 --> 00:06:03,180
do its high-level inferencing. So a particular thread

83
00:06:03,180 --> 00:06:07,310
may get information from several different streams,

84
00:06:07,310 --> 00:06:09,560
and it may have to make high level

85
00:06:09,560 --> 00:06:13,279
inference based on the composite results that

86
00:06:13,279 --> 00:06:15,600
it is getting from all these schemes. And

87
00:06:15,600 --> 00:06:18,160
since all the data that is coming from

88
00:06:18,160 --> 00:06:22,250
the channels have time stamps associated with them,

89
00:06:22,250 --> 00:06:24,530
an intermediate computation like this that is

90
00:06:24,530 --> 00:06:27,440
taking multiple streams and generating a high

91
00:06:27,440 --> 00:06:33,750
level inference from it, can use the time stamps in the incoming streams to see

92
00:06:33,750 --> 00:06:36,825
which data items in these streams are

93
00:06:36,825 --> 00:06:40,750
temporally correlated with one another. And use that

94
00:06:40,750 --> 00:06:44,030
information to improve the kind of inferencing

95
00:06:44,030 --> 00:06:47,300
and hypothesis that can be derived in the

96
00:06:47,300 --> 00:06:49,840
situation awareness application. So in a

97
00:06:49,840 --> 00:06:53,040
nutshell, the PTS programming model, what it

98
00:06:53,040 --> 00:06:59,070
allows, is the ability to associate time stamp with data items produced by

99
00:06:59,070 --> 00:07:06,040
a computation. So the model allows propagation of temporal causality because the

100
00:07:06,040 --> 00:07:13,030
fact that a computation can associate a time stamp with an item that it produces

101
00:07:13,030 --> 00:07:18,600
based on the time stamp that it got. On the data that it obtained

102
00:07:18,600 --> 00:07:24,920
from its input channel and thirdly the fact that every stream is temporally

103
00:07:24,920 --> 00:07:29,690
indexed allows a computation to correlate

104
00:07:29,690 --> 00:07:33,580
the incoming streams. And recognize which data

105
00:07:33,580 --> 00:07:38,090
items in the input streams are temporally related to one another by looking at

106
00:07:38,090 --> 00:07:41,130
the time stamps associated with the items

107
00:07:41,130 --> 00:07:42,940
that it is fetching from the different channels.
