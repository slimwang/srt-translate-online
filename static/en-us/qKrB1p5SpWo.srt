1
00:00:00,500 --> 00:00:04,980
The question is, given a box and an image texture, how do the two get attached?

2
00:00:04,980 --> 00:00:08,035
Given a location on the box surface, how do we find the corresponding location

3
00:00:08,035 --> 00:00:13,620
on the image? This is potentially a tricky problem. Say we just try to use the

4
00:00:13,620 --> 00:00:17,887
location in the world as our input. This won't work well, because our crate

5
00:00:17,887 --> 00:00:21,860
could be transformed with rotations and scalings. It might undergo an explosion

6
00:00:21,860 --> 00:00:24,920
that would change its shape. Any of these events would modify the world

7
00:00:24,920 --> 00:00:27,648
position on its surface, making it hard to get to the same pixel location on

8
00:00:27,648 --> 00:00:32,204
the image from frame to frame. This location problem is most commonly solved by

9
00:00:32,204 --> 00:00:37,728
adding two values to every vertex. These are called UV coordinates. Just like

10
00:00:37,728 --> 00:00:41,145
any other attribute attached to a vertex, these values are interpolated across

11
00:00:41,145 --> 00:00:45,225
each triangle during rasterization. Every pixel fragment generated for the

12
00:00:45,225 --> 00:00:49,334
surface will have these values available. Within the fragment shader these two

13
00:00:49,334 --> 00:00:53,497
values are used to look up the corresponding pixel location in the texture. A

14
00:00:53,497 --> 00:00:56,458
pixel on a texture is often called a Texel to differentiate it from a pixel on

15
00:00:56,458 --> 00:01:00,248
a screen. For example on this face of the box we want to find a texel color to

16
00:01:00,248 --> 00:01:04,129
use for this pixel. At this pixel the UV coordinate turns out to be U equal to

17
00:01:04,129 --> 00:01:09,291
0.2, V equal to 0.7. Using these two values like coordinates on a map we can

18
00:01:09,291 --> 00:01:16,469
look at the texel on the image and use this to modify the color of the surface.
