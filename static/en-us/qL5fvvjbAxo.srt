1
00:00:00,370 --> 00:00:06,670
You've seen several commands, like LS,
Uptime, and cowsay that do something,

2
00:00:06,670 --> 00:00:09,280
and then immediately return
you to the shell prompt.

3
00:00:09,280 --> 00:00:11,500
But not all programs do that.

4
00:00:11,500 --> 00:00:13,888
Some programs are a little
bit more interactive.

5
00:00:13,888 --> 00:00:16,200
They take over the terminal for
as long as they're running, and

6
00:00:16,200 --> 00:00:18,810
then we get the shell back
when the program exits.

7
00:00:18,810 --> 00:00:20,670
Take, for instance, ping.

8
00:00:20,670 --> 00:00:24,460
Ping lets you test whether another
machine on the internet is alive, and

9
00:00:24,460 --> 00:00:27,380
how long it takes to send a message
to that machine and back.

10
00:00:27,380 --> 00:00:32,080
Let's see you ping 8.8.8.8,
which is Google's public DNS server.

11
00:00:32,080 --> 00:00:35,860
Very fast and well connected, so
we should always be able to get to it.

12
00:00:35,860 --> 00:00:39,790
Ping starts and it prints out a line for
each successful echo, but

13
00:00:39,790 --> 00:00:42,570
it doesn't stop on its own and
give you your shell back.

14
00:00:42,570 --> 00:00:44,800
Instead, you have to tell it to stop.

15
00:00:44,800 --> 00:00:48,130
One of the most common ways to
tell a program like this to stop

16
00:00:48,130 --> 00:00:52,070
is to type Ctrl+C which
sends the interrupt signal.

17
00:00:52,070 --> 00:00:55,860
When you do that, ping stops,
prints out a summary, and

18
00:00:55,860 --> 00:00:56,900
you get your shell prompt back.

19
00:00:57,990 --> 00:01:00,310
But some programs have
a different behavior.

20
00:01:00,310 --> 00:01:05,074
There's a really common design in
Linux programs where a program will

21
00:01:05,074 --> 00:01:08,788
read from what's called standard input,
or stdin and

22
00:01:08,788 --> 00:01:12,516
write to what's called standard output,
or stdout.

23
00:01:12,516 --> 00:01:15,524
This allows programs to be chained
together on to a pipeline which is

24
00:01:15,524 --> 00:01:17,990
a little bit beyond
the scope of this course.

25
00:01:17,990 --> 00:01:20,510
When you run a program like
this from the terminal,

26
00:01:20,510 --> 00:01:25,220
it'll read from your keyboard input and
write back to the terminal screen.

27
00:01:25,220 --> 00:01:29,000
And very often when your input is done
you want to send it an end of file

28
00:01:29,000 --> 00:01:30,995
character which you do by typing Ctrl+D.

29
00:01:32,130 --> 00:01:33,020
Here's an example.

30
00:01:33,020 --> 00:01:36,550
The sort program,
which sorts lines in alphabetical order.

31
00:01:36,550 --> 00:01:39,320
If you run sort and then type or
paste in some text,

32
00:01:39,320 --> 00:01:42,240
it will print those lines out sorted.

33
00:01:42,240 --> 00:01:46,022
But it can't do any sorting until
it's received the last line and

34
00:01:46,022 --> 00:01:48,920
that's what typing Ctrl+D tells it.

35
00:01:48,920 --> 00:01:52,655
You have to use Ctrl+D instead of
Ctrl+C if you want the sorted output.

36
00:01:52,655 --> 00:01:55,270
Ctrl+C will just cause it to exit.

37
00:01:55,270 --> 00:01:59,090
But there we go, there are the four
lines that I typed in, sorted.

38
00:01:59,090 --> 00:02:02,760
Programs like sort are called line
based programs because they read input

39
00:02:02,760 --> 00:02:05,590
one line at a time until they
reach the end of the input.

40
00:02:05,590 --> 00:02:09,030
You can usually use them on files as
well as on text that you type in or

41
00:02:09,030 --> 00:02:10,560
paste into the terminal.

42
00:02:10,560 --> 00:02:12,490
You'll see a few more of
them later in the course.
