1
00:00:00,410 --> 00:00:02,580
Now that you've modified your
first line of Java code,

2
00:00:02,580 --> 00:00:04,660
lets see what else we can do.

3
00:00:04,660 --> 00:00:07,540
We can actually do
some math expressions.

4
00:00:07,540 --> 00:00:09,690
And if you don't like
that thought of math,

5
00:00:09,690 --> 00:00:13,570
well the good news is that Android
actually does the math for you.

6
00:00:13,570 --> 00:00:15,660
You just have to come
up with the problem.

7
00:00:15,660 --> 00:00:17,580
Say you have two people and

8
00:00:17,580 --> 00:00:20,470
each of those two people
wants two cups of coffee.

9
00:00:20,470 --> 00:00:24,130
Now this will display the total amount
of coffee that you need to get them.

10
00:00:25,310 --> 00:00:28,700
We run it on our device and
then we hit Order and then we see four.

11
00:00:28,700 --> 00:00:31,820
So you see how we can type
in math expressions and

12
00:00:31,820 --> 00:00:34,340
it will automatically solve it for us.

13
00:00:34,340 --> 00:00:37,060
We can also do even harder
math expressions like

14
00:00:37,060 --> 00:00:39,260
things we wouldn't even want
to calculate in our head.

15
00:00:39,260 --> 00:00:42,780
For example, say there's a whole
group of Android developers and

16
00:00:42,780 --> 00:00:43,990
they're really thirsty.

17
00:00:43,990 --> 00:00:46,160
Say they each want to drink
three cups of coffee each,

18
00:00:46,160 --> 00:00:48,240
because they're not morning people.

19
00:00:48,240 --> 00:00:51,645
And then we also want to throw
in some extra cups as well.

20
00:00:51,645 --> 00:00:52,985
That's a lot of coffee.

21
00:00:52,985 --> 00:00:55,170
Let's see how much that
actually turns out to be.

22
00:00:55,170 --> 00:00:58,810
You hit the Order button and it says 59.

23
00:00:58,810 --> 00:00:59,310
Interesting.

24
00:01:00,350 --> 00:01:03,020
I guess developers do write better
code when they have a lot of

25
00:01:03,020 --> 00:01:04,450
caffeine in them.

26
00:01:04,450 --> 00:01:07,990
In a moment I'm going to have you type
in your own math expressions here.

27
00:01:07,990 --> 00:01:10,960
As a heads up,
if you run into any errors, for example,

28
00:01:10,960 --> 00:01:12,500
if you type a letter accidentally,

29
00:01:12,500 --> 00:01:15,690
then you will see a red error show
up on the right hand side here.

30
00:01:15,690 --> 00:01:18,690
The error says it cannot
resolve the symbol a because

31
00:01:18,690 --> 00:01:19,810
a is not a valid number.

32
00:01:21,100 --> 00:01:24,450
Here's another possible error if you
accidentally type the multiplication

33
00:01:24,450 --> 00:01:27,410
symbol multiple times you
would get an error here.

34
00:01:27,410 --> 00:01:30,426
In this case it would be more
helpful to to hit undo and

35
00:01:30,426 --> 00:01:33,165
then your code would work again.

36
00:01:33,165 --> 00:01:37,685
As we mentioned in lesson one, you can
try to read the error message first.

37
00:01:37,685 --> 00:01:41,255
Sometimes, the error message doesn't
exactly pinpoint the problem.

38
00:01:41,255 --> 00:01:43,075
You can also compare it to working code.

39
00:01:43,075 --> 00:01:46,595
We just showed you an example of
a math expression that worked.

40
00:01:46,595 --> 00:01:49,950
You can also try to hit
undo to retrace your steps.

41
00:01:49,950 --> 00:01:51,240
Or, you can always ask for help.

42
00:01:52,280 --> 00:01:56,020
Okay, now it's your turn to try to come
up with a really hard coffee order for

43
00:01:56,020 --> 00:01:57,340
the device to try to calculate.

44
00:01:57,340 --> 00:02:00,810
You can experiment with
different math expressions.

45
00:02:00,810 --> 00:02:01,885
Here's an example of one.

46
00:02:01,885 --> 00:02:06,300
As you can see, you can use different
symbols here or addition, subtraction,

47
00:02:06,300 --> 00:02:08,240
multiplication and division.

48
00:02:08,240 --> 00:02:10,370
These are what we call
arithmetic operators.

49
00:02:11,520 --> 00:02:14,390
If you ever need to refer to this later,
you can alway search for

50
00:02:14,390 --> 00:02:17,590
arithmetic operators java.

51
00:02:17,590 --> 00:02:21,440
This page lists the summary of all
the different operators in Java.

52
00:02:21,440 --> 00:02:23,750
And here are the arithmetic
operators listed.

53
00:02:23,750 --> 00:02:27,300
If you want you can always learn
about other operators as well.

54
00:02:27,300 --> 00:02:30,580
For this quiz though, we are just going
to focus on the arithmetic operators.

55
00:02:30,580 --> 00:02:33,500
The reason why we call this
an expression is because it's

56
00:02:33,500 --> 00:02:37,560
a bunch of symbols and numbers that
eventually evaluate to a single value.

57
00:02:37,560 --> 00:02:42,640
And this expression is evaluated
according to order of operations

58
00:02:42,640 --> 00:02:44,590
which you might have
learned in math class.

59
00:02:44,590 --> 00:02:48,440
If there's anything in parentheses,
it evaluates that first to be four.

60
00:02:48,440 --> 00:02:51,540
And then it does the multiplication and
division parts from left to right.

61
00:02:51,540 --> 00:02:54,330
I don't actually know what
this evaluates to, but

62
00:02:54,330 --> 00:02:55,960
you can try it in your app.

63
00:02:55,960 --> 00:02:58,910
Once you've become comfortable with
trying different math expressions,

64
00:02:58,910 --> 00:03:00,360
try this problem.

65
00:03:00,360 --> 00:03:04,050
I want you to display the number
of coffees that you would need

66
00:03:04,050 --> 00:03:08,440
If there are 77 Android developers
who drink two cups of coffee each and

67
00:03:08,440 --> 00:03:11,380
then one straggler walks in late and
needs a cup of coffee, too
