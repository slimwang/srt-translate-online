1
00:00:00,490 --> 00:00:03,662
Okay, so something that we look for
in full-stack

2
00:00:03,662 --> 00:00:08,381
engineers is that they have a basic idea
of how to protect our users' data and

3
00:00:08,381 --> 00:00:11,138
make websites that
are relatively secure.

4
00:00:11,138 --> 00:00:12,300
>> Okay.

5
00:00:12,300 --> 00:00:13,400
>> So given that,

6
00:00:13,400 --> 00:00:18,200
I was wondering if you could tell me a
little about what an XSRF attack is and

7
00:00:18,200 --> 00:00:21,290
how you would protect against it if
you're building a website today?

8
00:00:21,290 --> 00:00:26,760
>> Okay, so an XSRF attack is like
a cross-site request forgery.

9
00:00:26,760 --> 00:00:29,065
And so, I guess that what that is,

10
00:00:29,065 --> 00:00:32,167
is it's kind of abusing
I guess the browser's

11
00:00:32,167 --> 00:00:36,850
storage of a user's credentials
to do some unanticipated things.

12
00:00:36,850 --> 00:00:38,502
>> Can you give me an example?

13
00:00:38,502 --> 00:00:40,350
>> For instance, you'll see example,

14
00:00:40,350 --> 00:00:44,560
someone might buy an ad on a certain
page or something like that.

15
00:00:44,560 --> 00:00:49,070
And so the way that that'll work is for
instance,

16
00:00:49,070 --> 00:00:50,380
I'll get this content onto a page.

17
00:00:50,380 --> 00:00:55,170
So that gets run as
the page is rendered and

18
00:00:55,170 --> 00:00:57,980
that element they've added will make
some sort of request that wasn't

19
00:00:57,980 --> 00:01:01,020
intended by the original
designer of this page.

20
00:01:01,020 --> 00:01:03,690
And so that will do something like
using the user's credentials or

21
00:01:03,690 --> 00:01:09,500
they might have in a cookie or a session
to access their user data on that site.

22
00:01:09,500 --> 00:01:12,850
Or to make some request
that's outside of

23
00:01:12,850 --> 00:01:14,490
the purview of what
they should be doing.

24
00:01:14,490 --> 00:01:17,160
>> And so
how could someone use this maliciously?

25
00:01:17,160 --> 00:01:22,210
If you knew a website was vulnerable
to cross-site request forgery,

26
00:01:22,210 --> 00:01:23,960
how would you attack it?

27
00:01:23,960 --> 00:01:28,579
>> So, for instance, maybe this
vulnerable site has a URL or an endpoint

28
00:01:28,579 --> 00:01:34,160
that isn't properly verifying that users
are coming at it in a legitimate way.

29
00:01:34,160 --> 00:01:35,640
>> Okay.
>> For instance, maybe-

30
00:01:35,640 --> 00:01:37,795
>> Let's call this website monkeys.com.

31
00:01:37,795 --> 00:01:39,250
>> Monkeys.com.

32
00:01:39,250 --> 00:01:43,168
So maybe users at monkeys.com, they
have a user profile where it has their

33
00:01:43,168 --> 00:01:45,920
credit card information for
ordering monkeys.

34
00:01:45,920 --> 00:01:47,205
>> Okay.
>> Or whatever, and

35
00:01:47,205 --> 00:01:51,632
maybe there's some URL endpoints
like monkeys.com/buyamonkey.

36
00:01:51,632 --> 00:01:52,212
>> Okay.

37
00:01:52,212 --> 00:01:55,849
>> And, ideally you could only
access the URL the normal way,

38
00:01:55,849 --> 00:01:58,520
through the website, clicking on it.

39
00:01:58,520 --> 00:02:03,300
But maybe someone records this URL,
and I guess they

40
00:02:03,300 --> 00:02:06,420
distract users' browsers to this URL
from something that's non-standard flow.

41
00:02:06,420 --> 00:02:08,845
>> So you're saying it's a different
website is making a request to

42
00:02:08,845 --> 00:02:10,380
monkeys.com now?

43
00:02:10,380 --> 00:02:12,520
>> Or its embedded elements or whatever.

44
00:02:12,520 --> 00:02:13,120
>> Okay.

45
00:02:13,120 --> 00:02:17,332
>> That somehow it's making this
site request to this URL in some

46
00:02:17,332 --> 00:02:19,880
non-conventional sort of way.

47
00:02:19,880 --> 00:02:20,420
>> Okay.

48
00:02:20,420 --> 00:02:22,260
>> Yeah, so.

49
00:02:23,390 --> 00:02:24,564
So what was the original question?

50
00:02:24,564 --> 00:02:28,843
>> Yeah, so how,
if you were to attack monkeys.com now.

51
00:02:28,843 --> 00:02:30,717
>> Yeah.
>> How would you do it and

52
00:02:30,717 --> 00:02:32,883
how can you benefit out of it?

53
00:02:32,883 --> 00:02:37,791
>> Yeah, so what you could do is
you would design this malicious

54
00:02:37,791 --> 00:02:42,602
element of the page to make some
sort of request to this URL,

55
00:02:42,602 --> 00:02:46,764
like a JavaScript AJAXy-style
thing to this URL.

56
00:02:46,764 --> 00:02:51,119
And you'd set it up with all the correct
parameters to initiate this action on

57
00:02:51,119 --> 00:02:56,144
the server to, for instance, order 2,000
monkeys to your own address instead of,

58
00:02:56,144 --> 00:02:59,090
or something like using
their saved profile.

59
00:02:59,090 --> 00:02:59,700
>> I see.

60
00:02:59,700 --> 00:03:00,490
>> Yeah.

61
00:03:00,490 --> 00:03:01,290
>> Okay.

62
00:03:01,290 --> 00:03:05,436
And now let's say you become the
director of engineering at monkeys.com.

63
00:03:05,436 --> 00:03:08,070
How are you going to start
protecting against this now?

64
00:03:08,070 --> 00:03:10,010
>> So security is really hard but

65
00:03:10,010 --> 00:03:13,725
fortunately there's a lot of really
good documentation about how to

66
00:03:13,725 --> 00:03:17,705
write secure websites and there's really
good libraries and stuff like that.

67
00:03:17,705 --> 00:03:20,025
So depending on your stack,
you should research it and

68
00:03:20,025 --> 00:03:22,755
see if you can find
the existing solutions.

69
00:03:22,755 --> 00:03:27,455
So writing your own things from
scratch is generally insecure.

70
00:03:27,455 --> 00:03:30,395
It's good to have the background
knowledge of how to write the solution,

71
00:03:30,395 --> 00:03:33,835
but you should also use the existing
solutions because they're vetted.

72
00:03:33,835 --> 00:03:38,110
But basically the way these solutions
work is you would kind of set up

73
00:03:38,110 --> 00:03:40,490
a little session for
these important transactions.

74
00:03:40,490 --> 00:03:43,850
Like the buy a monkey URL,
you'd kind of set it up so

75
00:03:43,850 --> 00:03:48,550
that when the user gets to this
endpoint, on the previous page they

76
00:03:48,550 --> 00:03:53,390
get a one time a random string so
that you can't just go to this URL.

77
00:03:53,390 --> 00:03:56,380
You also have to have the knowledge
of this random string.

78
00:03:56,380 --> 00:03:59,560
And the server supplies
the string initially, and so

79
00:03:59,560 --> 00:04:00,610
it will know if it matches or not.

80
00:04:00,610 --> 00:04:01,220
>> I see.
>> And

81
00:04:01,220 --> 00:04:04,260
that way you're kind of like
re-wrapping this URL sort of.

82
00:04:04,260 --> 00:04:06,450
So if you're not in the standard
flow of accessing this

83
00:04:06,450 --> 00:04:07,190
URL-
>> Mm-hm.

84
00:04:07,190 --> 00:04:08,580
>> You can't access it.

85
00:04:08,580 --> 00:04:11,960
The server will recognize that this
isn't like a legitimate way to use this

86
00:04:11,960 --> 00:04:13,200
use this endpoint.

87
00:04:13,200 --> 00:04:16,769
>> Okay, that sounds a lot like
an XSRF token, so sounds right.

88
00:04:16,769 --> 00:04:21,476
What about preventing that
kind of malicious JavaScript

89
00:04:21,476 --> 00:04:24,520
from being there in the first place?

90
00:04:24,520 --> 00:04:30,290
>> So I guess in that case, you'd need
to have a processor validating or

91
00:04:30,290 --> 00:04:32,960
sanitizing these things before
they even make it onto your page,

92
00:04:32,960 --> 00:04:37,330
before someone makes this post
on your website or whatever.

93
00:04:37,330 --> 00:04:42,000
So there's obviously also libraries
to do that, they sanitize input.

94
00:04:42,000 --> 00:04:44,635
And the philosophy, I guess,
is don't trust user input.

95
00:04:44,635 --> 00:04:45,360
>> Mm-hm.
>> So

96
00:04:45,360 --> 00:04:48,730
in any place where there is third party
content making it onto your servers,

97
00:04:48,730 --> 00:04:51,400
you need to run that through some
kind of bleach or sanitizing.

98
00:04:51,400 --> 00:04:52,340
>> I see.
>> Library.

99
00:04:52,340 --> 00:04:53,150
>> Cool.

100
00:04:53,150 --> 00:04:57,230
>> And how is it that this
malicious content has access

101
00:04:57,230 --> 00:04:59,340
to our cookies in the first place?

102
00:04:59,340 --> 00:05:03,808
>> Yeah, so because it is on your page,
for instance if it's a forum post,

103
00:05:03,808 --> 00:05:07,328
because that code is being
executed from monkeys.com,

104
00:05:07,328 --> 00:05:10,801
the browser loaded monkeys.com and
this code is on it.

105
00:05:10,801 --> 00:05:15,580
That way it has access to the session
at that domain because it's being

106
00:05:15,580 --> 00:05:17,470
run from that domain.

107
00:05:17,470 --> 00:05:22,141
>> Okay, so let's take the case
now where I create gorillas.com.

108
00:05:22,141 --> 00:05:26,083
And now I know that you have
a cross-site weakness and

109
00:05:26,083 --> 00:05:31,077
I start making requests to monkeys.com
knowing that you'd be into

110
00:05:31,077 --> 00:05:34,800
monkeys.com before you
come to gorillas.com.

111
00:05:34,800 --> 00:05:40,300
Am I still going to be able to carry
out this attack and if not, why not?

112
00:05:40,300 --> 00:05:42,150
If so, how can we prevent it?

113
00:05:42,150 --> 00:05:43,560
>> Lets see.

114
00:05:43,560 --> 00:05:46,760
So ideally, no, if it was the browser.

115
00:05:46,760 --> 00:05:50,875
I mean so, the web server,
by default when you

116
00:05:50,875 --> 00:05:55,390
make an AJAX style request,
when the browser makes that request,

117
00:05:55,390 --> 00:06:01,190
it can't do it to a domain that isn't
the one that it's currently displaying.

118
00:06:01,190 --> 00:06:04,170
>> If you look at how Google
does ad tracking and stuff,

119
00:06:04,170 --> 00:06:08,388
they're never on google.com when they
send things to their own server.

120
00:06:08,388 --> 00:06:11,592
And they definitely use cookies
to do those things, right?

121
00:06:11,592 --> 00:06:12,676
>> Let's see.

122
00:06:18,419 --> 00:06:21,650
I guess I'm not really familiar
with how that process works.

123
00:06:21,650 --> 00:06:27,570
>> Okay, if you were to
design a policy on a cookie,

124
00:06:27,570 --> 00:06:30,530
let's say you could make your own
cookie, the Phillip cookie, that would

125
00:06:30,530 --> 00:06:34,770
protect against these kind of attacks,
what would you make that policy?

126
00:06:34,770 --> 00:06:39,200
>> I guess it would have a whitelist of

127
00:06:39,200 --> 00:06:42,118
domains that that request
could legitimately come from.

128
00:06:42,118 --> 00:06:47,270
>> Okay, cool, what about

129
00:06:47,270 --> 00:06:52,420
the case where let's say,
I have some JavaScript on gorillas.com.

130
00:06:52,420 --> 00:06:55,160
And now I start using my
JavaScript to go through and

131
00:06:55,160 --> 00:06:58,430
read all the cookies on
your your current session.

132
00:06:58,430 --> 00:07:01,938
How would you design
a policy against that?

133
00:07:01,938 --> 00:07:07,840
>> Let's see, I guess what you
could do is in your cookie,

134
00:07:07,840 --> 00:07:12,630
you don't have to store all the user's
personal identifying information,

135
00:07:12,630 --> 00:07:16,520
you could like store a key to
access things on your own server.

136
00:07:16,520 --> 00:07:17,953
You don't put the critical
things in the cookie itself.

137
00:07:17,953 --> 00:07:18,833
>> Mm-hm.

138
00:07:18,833 --> 00:07:23,830
>> And that way, you don't have
the security on the browser itself,

139
00:07:23,830 --> 00:07:25,530
you can do it on your own back end.

140
00:07:25,530 --> 00:07:26,560
>> Okay, cool.

141
00:07:26,560 --> 00:07:29,700
And a common way people do this is
through something called HttpOnly

142
00:07:29,700 --> 00:07:35,400
cookies so that JavaScript has
no access to the actual cookie.

143
00:07:35,400 --> 00:07:38,068
It's just that the browser is
the only thing that accesses it.

144
00:07:38,068 --> 00:07:39,030
>> Cool, okay.

145
00:07:39,030 --> 00:07:41,830
>> That's a common way that's done,
but you got the main points out of it.

146
00:07:41,830 --> 00:07:42,370
>> Cool.

147
00:07:42,370 --> 00:07:45,090
Cool yeah, I guess it's like a field
that I guess is evolving over time.

148
00:07:45,090 --> 00:07:46,190
>> Right.
>> So that's good to learn.

149
00:07:46,190 --> 00:07:47,680
>> Yeah,
security's always always evolving.

150
00:07:47,680 --> 00:07:48,840
>> Yeah, cool.

151
00:07:48,840 --> 00:07:50,020
>> Yeah very good.

152
00:07:50,020 --> 00:07:50,790
>> All right thanks.

153
00:07:50,790 --> 00:07:51,290
>> Cool.
