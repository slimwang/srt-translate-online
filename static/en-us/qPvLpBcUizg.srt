1
00:00:00,000 --> 00:00:05,417
So now we need to turn to an algorithm that allows us to have many SMs working on a single merge.

2
00:00:05,442 --> 00:00:08,652
Our strategy here is going to be to try to break up this one

3
00:00:08,652 --> 00:00:12,557
huge merge task that we need to do and do a bunch of smaller merges,

4
00:00:12,557 --> 00:00:17,607
each of which can then be processed independently and in parallel by a different SM.

5
00:00:17,607 --> 00:00:22,932
So the algorithm for doing this is pretty cool. The goal is that when we're breaking up these two long lists,

6
00:00:22,949 --> 00:00:27,425
this blue list and this green list, into shorter sub-lists and then merging the results,

7
00:00:27,425 --> 00:00:31,247
that we don't have any sub-tasks that are too big to do on one SM.

8
00:00:31,247 --> 00:00:35,070
It's okay for us to have some smaller and some bigger sub-tasks,

9
00:00:35,070 --> 00:00:38,773
but we don't want a sub-task that's too big for one SM.

10
00:00:38,773 --> 00:00:43,280
So here's what we're going to do. We have a big, long list with tons of elements in it,

11
00:00:43,280 --> 00:00:46,607
and that's too big for us to be able to deal with, so what we're going to do instead

12
00:00:46,607 --> 00:00:49,727
is take a subset of each of these lists.

13
00:00:49,727 --> 00:00:54,455
In fact, what we're going to do is take every nth element of each of these lists,

14
00:00:54,455 --> 00:00:59,229
let's say every 256th element, so we're going to create much shorter lists now.

15
00:00:59,229 --> 00:01:03,166
And so, we're going to call these elements that we select splitters,

16
00:01:03,166 --> 00:01:08,203
and they are 256 elements apart. And our list here is going to be A, B, C, D, and so on.

17
00:01:08,203 --> 00:01:11,842
And our list here is going to be E, F, G, H, and so on.

18
00:01:11,842 --> 00:01:15,976
So then what we're going to do is we're going to merge these splitters to get a single sorted list,

19
00:01:15,976 --> 00:01:22,694
say E, A, B, F, C, G, D, H. Now, just as with the merge algorithm we defined a few minutes ago,

20
00:01:22,694 --> 00:01:25,619
we calculate the position of each splitter in the other list,

21
00:01:25,619 --> 00:01:29,726
so it's very straightforward for us to use the merge algorithm we already know,

22
00:01:29,726 --> 00:01:33,396
to merge these two small lists of splitters.

23
00:01:33,396 --> 00:01:38,034
Note that the sorted splitter list already tells us in which sub-list our splitter will appear,

24
00:01:38,034 --> 00:01:43,003
so just as before we can do binary search for the exact position. Now, here's the cool bit.

25
00:01:43,003 --> 00:01:48,545
What I will submit to you is that we now have a sorted list of splitters and the elements

26
00:01:48,545 --> 00:01:53,982
that fall between any two splitters in this list are an independent set that we

27
00:01:53,982 --> 00:01:57,024
can send to an SM and independently sort.

28
00:01:57,024 --> 00:02:03,959
So, the elements between E and A can go to one SM, the elements between A and B can go to another SM, and so on.

29
00:02:03,959 --> 00:02:08,907
So let's look at this in a little bit more detail with the elements between F and C.

30
00:02:08,907 --> 00:02:15,016
We can calculate the position of F in C's list, we can calculate the position of C in F's list.

31
00:02:15,016 --> 00:02:21,878
And so the work that we need to do for the pair defined by F and C is to merge this list with this list,

32
00:02:21,878 --> 00:02:26,523
and one of our goals was to make sure that none of these sub lists would be too big,

33
00:02:26,523 --> 00:02:32,495
and we can guarantee that because we know that there are no more than 256 elements between F and G,

34
00:02:32,495 --> 00:02:36,768
and we know there are no more than 256 elements between B and C,

35
00:02:36,768 --> 00:02:41,297
so we can guarantee that there are no more than 512 elements between F and C,

36
00:02:41,297 --> 00:02:46,771
so by choosing the spacing between the splitters, we can guarantee a maximum size on

37
00:02:46,771 --> 00:02:52,443
any of the independent chunks that we need to independently merge in the last stage of this algorithm.

38
00:02:52,443 --> 00:02:58,512
So the challenge we have addressed here, we take one big problem and divide it into a large number of small problems,

39
00:02:58,512 --> 00:03:05,322
each of which can be processed in parallel. So to sum up what we just did, we looked at 3 different phases of the merge sort,

40
00:03:05,322 --> 00:03:07,858
each of which we attack with a different strategy.

41
00:03:07,858 --> 00:03:12,561
First we used one thread block to solve many merging problems in parallel.

42
00:03:12,561 --> 00:03:16,233
Here the number of problems was much, much greater than the number of SMs.

43
00:03:16,233 --> 00:03:20,300
Then we used one thread block to solve one larger merging problem.

44
00:03:20,300 --> 00:03:23,706
Here the number of problems was on par with the number of SMs.

45
00:03:23,706 --> 00:03:28,812
Finally, we cooperated between all thread blocks to solve a single problem.

46
00:03:28,812 --> 00:03:32,816
Now we have fewer problems than SMs, so to keep all the hardware busy,

47
00:03:32,816 --> 00:03:37,685
we needed to find a way to divide the single problem into multiple independent problems,

48
00:03:37,685 --> 00:03:41,685
so that we could keep all the SMs busy. And that concludes the merge sort.
