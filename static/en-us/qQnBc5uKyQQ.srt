1
00:00:00,000 --> 00:00:03,347
So here we were given a version of a JavaScript

2
00:00:03,347 --> 00:00:05,779
interpreter that has a bug already in it. If we go

3
00:00:05,779 --> 00:00:08,808
down to the part of the JavaScript interpreter,

4
00:00:08,808 --> 00:00:13,405
that handles calling functions, we can run this

5
00:00:13,405 --> 00:00:16,945
sampler web page and discover that what the

6
00:00:16,945 --> 00:00:19,507
correct answer is, three and four has actually

7
00:00:19,507 --> 00:00:22,637
becomes 888 and 999. As it turns out, this very

8
00:00:22,637 --> 00:00:26,803
wrong answer is caused by a very simple bug.

9
00:00:26,803 --> 00:00:29,051
Hopefully you ran a few of your own text cases

10
00:00:29,051 --> 00:00:31,176
to narrow down the problem, but right here on

11
00:00:31,176 --> 00:00:34,133
this line is the culprit. Our new environment –

12
00:00:34,133 --> 00:00:36,616
the environment in which we evaluate the

13
00:00:36,616 --> 00:00:39,503
statements of the function body, is the ENV

14
00:00:39,503 --> 00:00:43,360
variable which comes from the call, ends the

15
00:00:43,360 --> 00:00:46,365
value passed into ENV is actually environment

16
00:00:46,365 --> 00:00:49,797
from which we call the function. If you recall

17
00:00:49,797 --> 00:00:54,265
the parsing for our JavaScript functions, the first

18
00:00:54,265 --> 00:00:56,882
element of the tuple is the strength function

19
00:00:56,882 --> 00:00:59,894
which says that this represents a function. The

20
00:00:59,894 --> 00:01:02,483
second is the parameters for the function. We

21
00:01:02,483 --> 00:01:04,631
then have the function body what is just a

22
00:01:04,631 --> 00:01:07,886
sequence of statements and then lastly we have

23
00:01:07,886 --> 00:01:09,641
the environment for the function. This is the

24
00:01:09,641 --> 00:01:12,390
parent from which the function was defined and

25
00:01:12,390 --> 00:01:14,932
it’s actually environment in which we’re

26
00:01:14,932 --> 00:01:15,943
supposed to executive the function. However,

27
00:01:15,943 --> 00:01:17,908
with this code that’s not the case. We’re

28
00:01:17,908 --> 00:01:19,865
executing the function; the environment from

29
00:01:19,865 --> 00:01:22,128
what we call it, not from what it was defined. So

30
00:01:22,128 --> 00:01:24,169
we need to fix that.

31
00:01:24,169 --> 00:01:26,860
So I’ve defined a variable function environment,

32
00:01:26,860 --> 00:01:29,904
which just grabs the fourth element or the third

33
00:01:29,904 --> 00:01:33,082
index out of the tuple and instead of creating the

34
00:01:33,082 --> 00:01:38,493
new environment as ENV, which is going to be

35
00:01:38,493 --> 00:01:41,050
the function environment that we want. And

36
00:01:41,050 --> 00:01:42,701
that’s it. The consequences of the bug are pretty

37
00:01:42,701 --> 00:01:46,398
severe, but it’s really just what do we change,

38
00:01:46,398 --> 00:01:49,822
10 characters, I mean, that’s just how these bugs

39
00:01:49,822 --> 00:01:52,287
can be. It can be really hard to find that’s why

40
00:01:52,287 --> 00:01:54,743
finding bugs is time consuming, difficult and

41
00:01:54,743 --> 00:01:57,001
it’s a skill that you’re going to have to learn

42
00:01:57,001 --> 00:01:59,543
because its just part of programming, you’re

43
00:01:59,543 --> 00:02:01,051
going to make mistakes.
