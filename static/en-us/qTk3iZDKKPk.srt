1
00:00:00,620 --> 00:00:03,690
Having to close or navigate the tab
to get the service worker to update

2
00:00:03,690 --> 00:00:05,689
is a bit of a pain during development.

3
00:00:05,689 --> 00:00:07,482
But thankfully,
there are ways to make it easier.

4
00:00:07,482 --> 00:00:12,043
I'm going to make a change to the
console look in the service worker, and

5
00:00:12,043 --> 00:00:14,998
then back in the page I'm
going to hit refresh.

6
00:00:14,998 --> 00:00:17,360
Now there's a new
service worker waiting.

7
00:00:17,360 --> 00:00:20,970
You can tell the difference here as the
active service worker has this red icon

8
00:00:20,970 --> 00:00:25,240
and the waiting one is,
I don't know is that teal?

9
00:00:25,240 --> 00:00:26,520
You can tell I'm not a designer.

10
00:00:27,660 --> 00:00:30,915
It's waiting because the tab is
still using the active version, but

11
00:00:30,915 --> 00:00:33,776
rather than close this tab or
navigate it to another origin,

12
00:00:33,776 --> 00:00:36,090
I'm going to reload the page
while holding Shift.

13
00:00:37,730 --> 00:00:41,010
This loads the page but
bypasses the service worker.

14
00:00:41,010 --> 00:00:43,290
This behavior is part of
the service worker spec, so

15
00:00:43,290 --> 00:00:46,640
it should work in any browser
that supports service workers.

16
00:00:46,640 --> 00:00:48,540
This is handy for two reasons.

17
00:00:48,540 --> 00:00:51,540
One, it's a quick way to test changes
that are unrelated to the service

18
00:00:51,540 --> 00:00:54,270
worker, such as minor CSS changes.

19
00:00:54,270 --> 00:00:57,830
And two, because this tab is no longer
controlled by the service worker,

20
00:00:57,830 --> 00:01:00,450
it lets the waiting
service worker take over.

21
00:01:00,450 --> 00:01:04,129
We can see this in dev tools, the teal
service worker has progressed to active.

22
00:01:05,450 --> 00:01:06,780
Now if I refresh normally,

23
00:01:06,780 --> 00:01:10,290
the request goes through the new service
worker and we get the updated log.

24
00:01:12,400 --> 00:01:15,870
Now's probably a good time to
talk about this ERR_FILE_EXISTS

25
00:01:15,870 --> 00:01:17,280
thing in the console there.

26
00:01:17,280 --> 00:01:19,640
That's just Chrome saying it's
checked the service worker and

27
00:01:19,640 --> 00:01:21,550
there were no changes.

28
00:01:21,550 --> 00:01:25,500
Showing an error for this is a bug,
but it isn't breaking anything.

29
00:01:25,500 --> 00:01:28,181
Hopefully this bug will be fixed by
the time you go through this course.

30
00:01:28,181 --> 00:01:32,920
So, Shift+Refresh is an easier
way to get updates, but

31
00:01:32,920 --> 00:01:35,940
Chrome's dev tools has
an even easier way.

32
00:01:35,940 --> 00:01:39,900
In the Sources tab, check out this
little service worker panel here.

33
00:01:39,900 --> 00:01:42,780
There's an option called,
Force update on page load.

34
00:01:44,210 --> 00:01:47,440
This changes the service worker life
cycle to be developer-friendly rather

35
00:01:47,440 --> 00:01:49,110
than user-friendly.

36
00:01:49,110 --> 00:01:52,800
In this mode when you hit refresh,
rather than refreshing the page,

37
00:01:52,800 --> 00:01:56,340
it fetches a service worker, treats it
as a new version whether it's changed or

38
00:01:56,340 --> 00:02:01,660
not, and lets it become active straight
away, and then the page refreshes.

39
00:02:01,660 --> 00:02:07,610
That means I can make a change to
the console log, say, Yo Everyone,

40
00:02:07,610 --> 00:02:11,670
and then back in the page hit refresh
and I get those changes straight away.

41
00:02:12,680 --> 00:02:15,800
No Shift+Refresh, no closing tabs.

42
00:02:15,800 --> 00:02:18,770
This change in behavior only happens
while dev tools is open, but

43
00:02:18,770 --> 00:02:21,510
it makes viewing quick
changes really easy.

44
00:02:21,510 --> 00:02:24,130
However, we need to bear in mind
it's not the same life cycle

45
00:02:24,130 --> 00:02:26,060
users will be getting.

46
00:02:26,060 --> 00:02:28,860
Later in the course, we'll look at
optimizing the user experience, but

47
00:02:28,860 --> 00:02:32,160
first, let's do some more exciting
things with the service worker.

48
00:02:32,160 --> 00:02:35,130
In the next chapter,
we'll look at hijacking requests and

49
00:02:35,130 --> 00:02:35,950
doing our own thing.
