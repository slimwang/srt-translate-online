1
00:00:00,000 --> 00:00:04,000
So here is an actual implementation from the DARPA Urban Challenge.

2
00:00:04,000 --> 00:00:07,000
The Stanford trial car trying to find a way through a maze.

3
00:00:07,000 --> 00:00:09,000
As you can see the maze is changing as the car moves.

4
00:00:09,000 --> 00:00:14,000
This reflects of the fact that the car uses sensors to see obstacles,

5
00:00:14,000 --> 00:00:16,000
and obstacles are sometimes included.

6
00:00:16,000 --> 00:00:19,000
The car can only see them when they are nearby.

7
00:00:19,000 --> 00:00:22,000
What's really remarkable here is that the car is able to

8
00:00:22,000 --> 00:00:24,000
plan really complex maneuvers to the goal.

9
00:00:24,000 --> 00:00:27,000
At any point in time we can see its best guess toward an open path to the goal.

10
00:00:27,000 --> 00:00:32,000
The orange trees are A-star search trees.

11
00:00:32,000 --> 00:00:35,000
They aren't exactly grid trees.

12
00:00:35,000 --> 00:00:38,000
Our car moves differently from a grid-based robot.

13
00:00:38,000 --> 00:00:43,000
It can turn at different angles, and each of these little steps is a different turning angle

14
00:00:43,000 --> 00:00:46,000
combined with a different forward motion.

15
00:00:46,000 --> 00:00:49,000
Leaving this aside you get these amazing trees

16
00:00:49,000 --> 00:00:52,000
that find paths all the way to the goal using A-star.

17
00:00:52,000 --> 00:00:55,000
This implimentation is so fast that it can plan these paths

18
00:00:55,000 --> 00:01:00,000
in less than 10 msec for any location in this maze.

19
00:01:00,000 --> 00:01:05,000
It was faster than any other driving team that I know of at the DARPA Grand Challenge

20
00:01:05,000 --> 00:01:07,000
or the DARPA Urban Challenge.

21
00:01:07,000 --> 00:01:11,000
The planning is repeated every time the robot cancels the previous plan.

22
00:01:11,000 --> 00:01:14,000
You can see additional adjustments at place at times.

23
00:01:14,000 --> 00:01:18,000
As you go through this video you can see how A-star planning

24
00:01:18,000 --> 00:01:26,000
with a simple Euclidean distance heuristic is able to find a path to the goal.

25
00:01:26,000 --> 00:01:29,000
When you implement this yourself the big difference

26
00:01:29,000 --> 00:01:32,000
or grid implementation is a different motion model.

27
00:01:32,000 --> 00:01:35,000
You have to implement a robot that is able to turn

28
00:01:35,000 --> 00:01:38,000
and you have to write on the math of what it is able to turn and go forward.

29
00:01:38,000 --> 00:01:42,000
This robot also can be reworked, so going backwards is a distinct different action.

30
00:01:42,000 --> 00:01:46,000
Other than that it is essentially the same A-star algorithm you just implemented.

31
00:01:46,000 --> 00:01:49,000
So if you want to build a self-driving car you now understand

32
00:01:49,000 --> 00:01:54,000
to make a really complex, nice search algorithm to find a path to a goal.

33
00:01:54,000 --> 00:02:02,000
So this is a scene where DARPA trapped our car using a barrier that went all across the street.

34
00:02:02,000 --> 00:02:08,000
So the only way for the car to navigate this was to take a multi poled u-turn,

35
00:02:08,000 --> 00:02:13,000
and it had to plan this all by itself using A-star planning.

36
00:02:13,000 --> 00:02:18,000
The car pulls up to the barrier, realizes there's no path to go,

37
00:02:18,000 --> 00:02:23,000
and invokes its A-star planner and comes up with a turn-around maneuver,

38
00:02:23,000 --> 00:02:27,000
that is not particularly elegant, but it's super effective.

39
00:02:27,000 --> 00:02:32,000
The car was able in this competition by itself to turn around using A-star,

40
00:02:32,000 --> 00:02:35,000
find the optimal plan to do so, and move on.

41
00:02:35,000 --> 00:02:39,000
Otherwise it would have been stuck forever behind this obstacle.

42
00:02:39,000 --> 00:02:44,000
In this final video I'll show you a parking situation where the car has to back into a

43
00:02:44,000 --> 00:02:49,000
parking space between two other cars, and you can see how the obstacles are visible,

44
00:02:49,000 --> 00:02:55,000
how these other cars are visible, and how our vehicle, Jr, navigates an actual parking lot.

45
00:02:55,000 --> 00:02:57,000
Again this is using A-star.

46
00:02:57,000 --> 00:03:00,000
It finds its way optimally into this parking spot, backs in,

47
00:03:00,000 --> 00:03:02,000
and backs out again all by itself.

48
00:03:02,000 --> 00:03:06,000
The planning time for each of these A-star runs is less than 10 msec,

49
00:03:06,000 --> 00:03:09,000
and the car was able to competently do this.

50
00:03:09,000 --> 00:03:12,000
Even during the advance it had no clue where the obstacles were

51
00:03:12,000 --> 00:03:13,000
and where the parking spot was.

52
00:03:13,000 --> 00:03:19,000
That is A-star for robot path planning, and what you've implemented yourself is the core of it.

53
00:03:19,000 --> 00:03:24,000
Again, if you want to turn it into a real robotic motion algorithm

54
00:03:24,000 --> 00:03:27,000
you have to change the motion model.

55
00:03:27,000 --> 00:03:30,000
You have to see the next class I'm teaching, when I go into

56
00:03:30,000 --> 99:59:59,999
continuous models and I'm going to show you how to turn this into a continuous path.
