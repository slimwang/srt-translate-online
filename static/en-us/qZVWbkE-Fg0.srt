1
00:00:00,000 --> 00:00:02,000
[Norvig] So that was list comprehensions.

2
00:00:02,000 --> 00:00:06,000
Now let's look at generator expressions, which is almost the same idea.

3
00:00:06,000 --> 00:00:11,000
The syntax is the same in that a generator expression consists of a term,

4
00:00:11,000 --> 00:00:15,000
a mandatory for clause, and then optional for and ifs clauses--

5
00:00:15,000 --> 00:00:17,000
as many of those as you want--0 or more.

6
00:00:17,000 --> 00:00:19,000
There's 2 differences.

7
00:00:19,000 --> 00:00:23,000
The generator expression uses parentheses instead of square brackets.

8
00:00:23,000 --> 00:00:27,000
Square brackets mean list; parentheses means generator.

9
00:00:27,000 --> 00:00:32,000
And then the other difference is that the computation doesn't get done all at once.

10
00:00:32,000 --> 00:00:35,000
Instead, a generator expression returns a value,

11
00:00:35,000 --> 00:00:38,000
which is a promise to do the computation later.

12
00:00:38,000 --> 00:00:44,000
So if we say g = this and then g is this promise,

13
00:00:44,000 --> 00:00:46,000
it hasn't done any calculation yet.

14
00:00:46,000 --> 00:00:48,000
It hasn't calculated any of the terms.

15
00:00:48,000 --> 00:00:51,000
And then I can ask, give me the next g.

16
00:00:51,000 --> 00:00:55,000
Then it starts doing the calculation and it keeps on looping through the for clauses

17
00:00:55,000 --> 00:01:00,000
or maybe multiple for clauses until it finds the first term and returns that.

18
00:01:00,000 --> 00:01:07,000
And then if I want, I can again ask for the next g and it will give me the second one and so on.

19
00:01:07,000 --> 00:01:12,000
Let's look at an example. Here I've defined the function sq for square of x.

20
00:01:12,000 --> 00:01:17,000
It takes in the value x, prints out that it's been called, and returns x * x.

21
00:01:17,000 --> 00:01:21,000
Here I've defined a generator from this generator expression that says

22
00:01:21,000 --> 00:01:29,000
g = (sq( x) for x in range(10) if x%2 == 0).

23
00:01:29,000 --> 00:01:31,000
So that's saying if x is an even number.

24
00:01:31,000 --> 00:01:33,000
And notice nothing has happened yet.

25
00:01:33,000 --> 00:01:37,000
We didn't get any printing of square was called, so square hasn't been called yet.

26
00:01:37,000 --> 00:01:40,000
The generator function is this promise. We can look at it.

27
00:01:40,000 --> 00:01:45,000
It says it's a generator object, but no computation has been done yet.

28
00:01:45,000 --> 00:01:52,000
We can ask for the next g and now, finally, square gets called with 0 as an argument,

29
00:01:52,000 --> 00:01:54,000
and we return 0 as a result.

30
00:01:54,000 --> 00:02:01,000
We can do that again. We get 4, 16, 36, 64. And what do you think is going to happen next?

31
00:02:01,000 --> 00:02:04,000
Now we're getting to the end of the loop.

32
00:02:04,000 --> 00:02:07,000
Range(10) means 0 through 9, so there are no more.

33
00:02:07,000 --> 00:02:10,000
So now when we ask for the next one,

34
00:02:10,000 --> 00:02:13,000
Python raises this condition called StopIteration.

35
00:02:13,000 --> 00:02:15,000
So it's saying, "I've gotten to the end."

36
00:02:15,000 --> 00:02:18,000
"I have to stop the iteration because there's no more I can give you."

37
00:02:18,000 --> 00:02:21,000
"I can't give you the next one."

38
00:02:21,000 --> 00:02:25,000
This seems a little bit inconvenient because now I've got these errors

39
00:02:25,000 --> 00:02:28,000
and my program has to deal with them,

40
00:02:28,000 --> 00:02:32,000
but the idea is that you rarely will be calling next directly.

41
00:02:32,000 --> 00:02:36,000
Rather, most of the time you'll be doing this within a for loop.

42
00:02:36,000 --> 00:02:39,000
So I can say something like this where I say

43
00:02:39,000 --> 00:02:43,000
for x2 in this expression do something,

44
00:02:43,000 --> 00:02:49,000
and now the protocol for a for loop arranges to call the generator each time,

45
00:02:49,000 --> 00:03:00,000
to call the next function, and to deal with the StopIteration exception and catch that.

46
00:03:00,000 --> 00:03:02,000
And so everything works fine.

47
00:03:02,000 --> 00:03:04,000
I can also convert the results.

48
00:03:04,000 --> 00:03:09,000
Here I've said I've got a generator expression and I'm converting that into a list.

49
00:03:09,000 --> 00:03:13,000
It does all the work and then it returns the result as a list.

50
00:03:13,000 --> 00:03:17,000
So I never have to deal explicitly with those StopIterations.

51
00:03:17,000 --> 00:03:21,000
Why do you think I chose generator expression to implement the zebra puzzle?

52
00:03:21,000 --> 00:03:24,000
Do you think I wanted to confuse students;

53
00:03:24,000 --> 00:03:27,000
have less indentation so that the code would fit on the page;

54
00:03:27,000 --> 00:03:30,000
stop early as soon as I found the first result;

55
00:03:30,000 --> 00:03:32,000
or make the code easier to edit,

56
00:03:32,000 --> 00:03:35,000
to move around the various pieces of the constraints and so on?

57
00:03:35,000 --> 99:59:59,999
Check all that apply.
