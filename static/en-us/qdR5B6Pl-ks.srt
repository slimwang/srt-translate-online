1
00:00:00,200 --> 00:00:03,300
Let's return to the Asteroids repository from the previous lesson.

2
00:00:03,300 --> 00:00:06,850
Do you remember the bug you saw, where you could shoot without a delay?

3
00:00:06,850 --> 00:00:10,210
You now have the knowledge you need to fix that bug and commit your fix.

4
00:00:10,210 --> 00:00:11,910
First, I'll do a git log.

5
00:00:11,910 --> 00:00:15,740
Now, I'll scroll down to the commit where you found the bug had been introduced.

6
00:00:15,740 --> 00:00:18,060
You may recall that it was this commit.

7
00:00:18,060 --> 00:00:21,810
To double check, I'll use diff to compare it to the previous one.

8
00:00:21,810 --> 00:00:26,330
Sure enough, this commit removed the line, this.delayBeforeBullet = 10.

9
00:00:26,330 --> 00:00:29,890
I want to readd this line, so I'll go ahead and copy it.

10
00:00:29,890 --> 00:00:32,494
And I can see that it should be added inside the if statement,

11
00:00:32,494 --> 00:00:36,150
this.delayBeforeBullet is less than or equal zero.

12
00:00:36,150 --> 00:00:38,890
I'll open game.js in Sublime.

13
00:00:38,890 --> 00:00:41,060
Search for delayBeforeBullet.

14
00:00:41,060 --> 00:00:44,330
And hit Find until I find the appropriate if statement.

15
00:00:44,330 --> 00:00:46,650
Here it is, so I'll insert the line.

16
00:00:46,650 --> 00:00:50,080
Now I'm ready to add the file to the staging area, and then commit it.

17
00:00:50,080 --> 00:00:52,340
First I'll use git status.

18
00:00:52,340 --> 00:00:56,160
And I can see that game.js has been modified, and that the changes

19
00:00:56,160 --> 00:01:00,490
are not staged yet, which means that they are not in the staging area.

20
00:01:00,490 --> 00:01:04,660
Right now, I remember exactly what changes I've made to game.js since I

21
00:01:04,660 --> 00:01:06,650
made them just a minute ago.

22
00:01:06,650 --> 00:01:09,890
But often, I'll find myself making changes, taking a break, and

23
00:01:09,890 --> 00:01:13,110
then coming back and forgetting what changes I've made.

24
00:01:13,110 --> 00:01:16,650
So I'm going to show you how to use git diff to see the exact changes that

25
00:01:16,650 --> 00:01:18,440
you've introduced since committing.

26
00:01:18,440 --> 00:01:21,665
To make the illustration more clear, I'm also going to introduce a change to

27
00:01:21,665 --> 00:01:24,850
index.html that I don't want to commit yet.

28
00:01:24,850 --> 00:01:28,160
I'll just collapse this line onto the previous line.

29
00:01:28,160 --> 00:01:31,140
Let's think about what the working directory, staging area and

30
00:01:31,140 --> 00:01:33,800
repository look like right now.

31
00:01:33,800 --> 00:01:36,620
The repository contains several commits.

32
00:01:36,620 --> 00:01:39,340
And each commit contains several files.

33
00:01:39,340 --> 00:01:44,950
I'll focus on the most recent commit in the files game.js and index.html.

34
00:01:44,950 --> 00:01:49,590
The staging area is a copy of the most recent commit until I add changes to it,

35
00:01:49,590 --> 00:01:51,350
so it has those same files.

36
00:01:51,350 --> 00:01:54,960
Finally, the working directory also has the same files in it, but I've made

37
00:01:54,960 --> 00:02:00,470
some updates to game.js and index.html, which I'll represent using these stars.

38
00:02:00,470 --> 00:02:03,400
You know that you can use git diff to compare two commits by

39
00:02:03,400 --> 00:02:05,350
entering their commit IDs .

40
00:02:05,350 --> 00:02:06,570
But the staging area and

41
00:02:06,570 --> 00:02:10,620
the working directory are not commits, so they don't have IDs .

42
00:02:10,620 --> 00:02:14,050
However, it's very common for Git users to want to compare the working

43
00:02:14,050 --> 00:02:19,320
directory to the staging area, so git diff with no arguments will do that.

44
00:02:19,320 --> 00:02:22,010
This will show any changes you've made that you haven't added to

45
00:02:22,010 --> 00:02:23,640
the staging area yet.

46
00:02:23,640 --> 00:02:24,620
So I'll go ahead and

47
00:02:24,620 --> 00:02:29,990
run git diff with no arguments, and I can see the two changes I just introduced.

48
00:02:29,990 --> 00:02:34,610
Here's the change to game.js, where I re-added the delayBeforeBullet.

49
00:02:34,610 --> 00:02:39,050
And here's the change to index.html, where I combined two lines into one.

50
00:02:39,050 --> 00:02:43,400
Now, I'll add game.js to the staging area and run git diff again.

51
00:02:43,400 --> 00:02:46,186
This time, I only see the changes to index.html,

52
00:02:46,186 --> 00:02:50,960
since game.js is the same in the staging area and working directory now.

53
00:02:50,960 --> 00:02:54,940
Now, the staging area contains the updated version of game.js, but

54
00:02:54,940 --> 00:02:56,990
not of index.html.

55
00:02:56,990 --> 00:02:59,840
That's why, when I used git diff to compare these two,

56
00:02:59,840 --> 00:03:02,770
I only saw the changes to index.html.

57
00:03:02,770 --> 00:03:05,990
Now, you might also want to view the difference between the staging area and

58
00:03:05,990 --> 00:03:07,460
the most recent commit.

59
00:03:07,460 --> 00:03:10,640
I like to do this right before I commit, to double check that the files I've

60
00:03:10,640 --> 00:03:13,160
added are really what I want to put in the commit.

61
00:03:13,160 --> 00:03:16,720
The command for this is git diff --staged.

62
00:03:16,720 --> 00:03:20,907
If I run this command now, I should see the changes to game.js, but

63
00:03:20,907 --> 00:03:25,160
not index.html, since index.html is still the same.

64
00:03:25,160 --> 00:03:30,870
Sure enough, git diff --staged shows only the change to game.js.

65
00:03:30,870 --> 00:03:32,810
This is exactly what I want to commit.

66
00:03:32,810 --> 00:03:35,640
So I'll go ahead and type git commit.

67
00:03:35,640 --> 00:03:38,790
And I'll use the message: Add delay back to bullets.

68
00:03:38,790 --> 00:03:40,700
Now, I'll run git diff again and

69
00:03:40,700 --> 00:03:45,150
I'll still see the changes to index.html, since I haven't committed those.

70
00:03:45,150 --> 00:03:47,590
If I run git diff --staged though,

71
00:03:47,590 --> 00:03:51,170
I see nothing, since I did just commit everything in the staging area.

72
00:03:51,170 --> 00:03:56,210
Finally, I don't actually want these changes to index.html anymore.

73
00:03:56,210 --> 00:04:00,260
To get rid of them, I'll run git reset --hard.

74
00:04:00,260 --> 00:04:05,010
Which discards any changes in either the working directory or the staging area.

75
00:04:05,010 --> 00:04:08,660
But be very careful if you ever run this.

76
00:04:08,660 --> 00:04:10,900
Most actions in git are reversible,

77
00:04:10,900 --> 00:04:13,360
since you can always restore previous commits.

78
00:04:13,360 --> 00:04:16,130
But you've never committed the changes in your working directory or

79
00:04:16,130 --> 00:04:17,390
staging area.

80
00:04:17,390 --> 00:04:21,230
So if you run this command, you can't get those changes back.

81
00:04:21,230 --> 00:04:26,070
In this case, I had just run both git diff and git diff -staged.

82
00:04:26,070 --> 00:04:29,120
So I know exactly what changes are in the working directory and

83
00:04:29,120 --> 00:04:32,900
staging area, and I'm sure I don't want them anymore.

84
00:04:32,900 --> 00:04:34,850
Now I'll run git diff again.

85
00:04:34,850 --> 00:04:37,190
And there are no changes.

86
00:04:37,190 --> 00:04:40,990
What two versions of your files does each form of git diff compare?

87
00:04:40,990 --> 00:04:42,930
For each form of git diff,

88
00:04:42,930 --> 00:04:46,230
fill in the two versions that compares in these boxes.

89
00:04:46,230 --> 00:04:51,410
Each box should contain either working directory, staging area, commit one or

90
00:04:51,410 --> 00:04:52,610
commit two.

91
00:04:52,610 --> 00:04:55,970
Note that commit one is the most recent commit in this repository
