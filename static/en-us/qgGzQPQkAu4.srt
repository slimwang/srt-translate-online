1
00:00:00,400 --> 00:00:02,880
Now that we've seen what
an orthographic camera can do for

2
00:00:02,880 --> 00:00:06,130
us, let's see how to create,
manipulate, and apply one.

3
00:00:07,270 --> 00:00:11,790
In this demo, we've got a game world
with a huge star, a tiny planet, and

4
00:00:11,790 --> 00:00:13,670
an itty bitty satellite.

5
00:00:13,670 --> 00:00:16,580
Let's see what this looks like,
without using a camera.

6
00:00:16,580 --> 00:00:20,740
Using the default camera, we can just
barely see the edge of the star.

7
00:00:20,740 --> 00:00:22,520
We can see just half the planet.

8
00:00:22,520 --> 00:00:23,920
And we can't even see the satellite.

9
00:00:23,920 --> 00:00:27,620
It's actually right here, but it's so
small, it's not even one pixel wide.

10
00:00:27,620 --> 00:00:31,070
So, let's use an orthographic camera
to zoom in on each one of these

11
00:00:31,070 --> 00:00:32,630
objects in turn.

12
00:00:32,630 --> 00:00:34,550
So, what is a camera?

13
00:00:34,550 --> 00:00:36,820
Well, camera holds on to two matrices.

14
00:00:36,820 --> 00:00:40,870
One matrix encodes the camera's position
and orientation in the game world.

15
00:00:40,870 --> 00:00:45,561
For 2D games, this is usually kist a
simple x, y pair, but for 3D games, say,

16
00:00:45,561 --> 00:00:49,920
a 3D flight simulator, the camera can
hold the plane's 3D position, its pitch,

17
00:00:49,920 --> 00:00:50,950
its roll, and its yaw.

18
00:00:52,050 --> 00:00:55,990
The other matrix encodes how the camera
translates positions in the world

19
00:00:55,990 --> 00:00:57,840
into positions on the screen.

20
00:00:57,840 --> 00:00:59,900
This includes how much
perspective to include,

21
00:00:59,900 --> 00:01:02,400
that's fisheye lens
versus telephoto lens.

22
00:01:02,400 --> 00:01:05,690
And how big an area on the screen
the camera will ultimately draw to.

23
00:01:05,690 --> 00:01:09,440
To use a camera, we first need
to declare and initialize it.

24
00:01:09,440 --> 00:01:12,640
Then there are two things we have
to do down in the render callback.

25
00:01:12,640 --> 00:01:15,280
The first is calling camera.update.

26
00:01:15,280 --> 00:01:19,160
Whenever we adjust the properties of
a camera, like its position, it needs to

27
00:01:19,160 --> 00:01:23,470
fold those changes into the matrices
that define how it looks at the world.

28
00:01:23,470 --> 00:01:26,520
The easy way to ensure this happens
is just to call update each frame.

29
00:01:26,520 --> 00:01:29,200
It's a fast operation, so no worries.

30
00:01:29,200 --> 00:01:32,285
The second thing we need to
do is tell our shape renderer

31
00:01:32,285 --> 00:01:34,625
that we want to use our camera.

32
00:01:34,625 --> 00:01:37,555
We do this by setting the shape
renderer's projection matrix to

33
00:01:37,555 --> 00:01:39,775
the camera's combined matrix.

34
00:01:39,775 --> 00:01:42,995
The combined matrix is the culmination
of the camera's view and

35
00:01:42,995 --> 00:01:43,721
projection matrices.

36
00:01:44,742 --> 00:01:47,202
Yeah, there's a lot of
matrices flying around.

37
00:01:47,202 --> 00:01:50,542
Basically, shapeRenderer doesn't have a
notion of position in some larger world,

38
00:01:50,542 --> 00:01:53,192
so all it's got is a projection matrix.

39
00:01:53,192 --> 00:01:56,882
One more thing is we need to
handle screen resizing correctly.

40
00:01:56,882 --> 00:01:59,822
The resize callback gets
called right after create and

41
00:01:59,822 --> 00:02:01,860
any time the screen size changes.

42
00:02:01,860 --> 00:02:04,620
Which could be because
a mobile device rotated, or

43
00:02:04,620 --> 00:02:06,160
because we're running
the desktop app and

44
00:02:06,160 --> 00:02:09,620
the user is changing the window
size by dragging around the corner.

45
00:02:09,620 --> 00:02:13,490
When the screen size changes, we need
to make sure our camera is updated.

46
00:02:13,490 --> 00:02:16,465
If the camera thinks that the screen
is smaller than it really is,

47
00:02:16,465 --> 00:02:20,450
shapes will be way bigger than we
want them to be, and vice versa.

48
00:02:20,450 --> 00:02:24,230
This call setToOrtho updates
the camera with the new screen size.

49
00:02:24,230 --> 00:02:26,780
The first argument is whether
an increase in value of

50
00:02:26,780 --> 00:02:29,880
y should mean going down the screen and
we don't want that to be true.

51
00:02:29,880 --> 00:02:33,130
All right,
let's see what code it'll take

52
00:02:33,130 --> 00:02:36,140
in order to get the camera to zoom
in on each of these objects in turn.
