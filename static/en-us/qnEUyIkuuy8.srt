1
00:00:00,012 --> 00:00:02,274
Okay, so here's the more interesting kernel.

2
00:00:02,274 --> 00:00:05,109
This is a kernel that we're going to run on our iterations,

3
00:00:05,109 --> 00:00:08,225
each iteration is going to launch this kernel over E threads.

4
00:00:08,225 --> 00:00:11,439
Each of those threads is associated with 1 edge

5
00:00:11,439 --> 00:00:14,248
and can process that edge completely in parallel.

6
00:00:14,248 --> 00:00:16,318
So again, this is a map operation.

7
00:00:16,318 --> 00:00:18,770
It's something that maps very nicely to the GPU.

8
00:00:18,770 --> 00:00:20,921
So the first thing we're going to do

9
00:00:20,921 --> 00:00:23,758
is we're going to calculate a global index for our particular edge

10
00:00:23,758 --> 00:00:27,229
so that our thread is associated with 1 and only 1 edge.

11
00:00:27,229 --> 00:00:29,733
Then we're going to compute a few quantities,

12
00:00:29,733 --> 00:00:33,655
so the first thing is, what is the vertex at one end of my edge,

13
00:00:33,655 --> 00:00:35,940
and what is the depth of that vertex?

14
00:00:35,940 --> 00:00:38,411
What is the vertex at the second end of my edge,

15
00:00:38,411 --> 00:00:40,743
and what is the depth of that second vertex?

16
00:00:40,743 --> 00:00:43,346
Then we're actually going to do the logic that we care about.

17
00:00:43,346 --> 00:00:46,921
So if we have visited the first vertex in our edge,

18
00:00:46,921 --> 00:00:50,055
but we haven't visited the second vertex in our edge, okay?

19
00:00:50,055 --> 00:00:53,658
So we check the current depth against the first depth

20
00:00:53,658 --> 00:00:57,000
and make sure that we haven't visited the second vertex yet.

21
00:00:57,000 --> 00:01:01,487
If that's the case, then we set the depth of the second vertex

22
00:01:01,487 --> 00:01:04,289
equal to the depth of the first vertex plus 1.
