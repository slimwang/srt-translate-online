1
00:00:00,240 --> 00:00:04,470
Let's talk about Loaders. Loaders are awesome. They were

2
00:00:04,470 --> 00:00:07,080
introduced in Honeycomb, but are available as part of the

3
00:00:07,080 --> 00:00:09,400
support library. So you can take advantage of them

4
00:00:09,400 --> 00:00:13,170
when supporting earlier platform releases. Loaders are essentially the best

5
00:00:13,170 --> 00:00:16,640
practice implementation for asynchronous data loading within an activity

6
00:00:16,640 --> 00:00:20,040
or fragment. So when you create a Loader, it creates

7
00:00:20,040 --> 00:00:23,100
an async task to load data on the background thread.

8
00:00:23,100 --> 00:00:25,480
It then syncs with the UI thread when the initial

9
00:00:25,480 --> 00:00:27,760
loading is complete, and can be set up to monitor

10
00:00:27,760 --> 00:00:30,610
the underlying data, and deliver any updates to the UI

11
00:00:30,610 --> 00:00:33,640
thread as well. Best still, all that work you did

12
00:00:33,640 --> 00:00:36,500
adding a content provider to your database pays off right

13
00:00:36,500 --> 00:00:39,050
now, with the cursor loader. The cursor loader is an

14
00:00:39,050 --> 00:00:42,940
implementation of the async task loader, specifically designed to query

15
00:00:42,940 --> 00:00:46,320
content providers, and return a cursor, which you can then

16
00:00:46,320 --> 00:00:50,410
bind directly to a UI. It will automatically update that cursor,

17
00:00:50,410 --> 00:00:53,700
whenever the underlying content provider changes, based on changes

18
00:00:53,700 --> 00:00:56,240
to the underlying database. And it will reconnect to the

19
00:00:56,240 --> 00:00:59,260
last returned cursor after being recreated, along with the

20
00:00:59,260 --> 00:01:02,320
host activity, after a configuration change. That means you won't

21
00:01:02,320 --> 00:01:04,610
have to requery data, just because the device was

22
00:01:04,610 --> 00:01:07,600
rotated. So the cursor loader handles all of your cursor

23
00:01:07,600 --> 00:01:11,890
management and background thread creation, UI thread synchronization, and data

24
00:01:11,890 --> 00:01:15,380
source monitoring. If you chose not to use content providers,

25
00:01:15,380 --> 00:01:19,340
you chose poorly. But still, you can take advantage

26
00:01:19,340 --> 00:01:21,200
of loaders, you just need to create your own

27
00:01:21,200 --> 00:01:24,200
loader by extending a think task loader directly. You

28
00:01:24,200 --> 00:01:26,220
can find out more in the instructor notes below.
