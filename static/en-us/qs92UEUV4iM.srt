1
00:00:00,000 --> 00:00:04,000
Say we wanted to develop a randomized algorithm for the vertex cover problem,

2
00:00:04,000 --> 00:00:07,000
and let's go ahead and start off by looking at our

3
00:00:07,000 --> 00:00:10,000
2-approximation to the vertex cover problem.

4
00:00:10,000 --> 00:00:12,000
And if you remember from before,

5
00:00:12,000 --> 00:00:14,000
the basic algorithm for this was

6
00:00:14,000 --> 00:00:16,000
while we still have edges that are uncovered,

7
00:00:16,000 --> 00:00:20,000
we take an uncovered edge and then we add both endpoints to the cover.

8
00:00:20,000 --> 00:00:22,000
Now we're going to change this around

9
00:00:22,000 --> 00:00:25,000
by choosing randomly here,

10
00:00:25,000 --> 00:00:29,000
that is we choose a random uncovered edge,

11
00:00:29,000 --> 00:00:33,000
and we're also going to choose the endpoint that we add to the cover at random.

12
00:00:33,000 --> 00:00:37,000
So instead of adding both, we add one or the other at random,

13
00:00:37,000 --> 00:00:40,000
and that's how we develop a randomized algorithm

14
00:00:40,000 --> 00:00:43,000
based on this 2-approximation vertex cover.

15
00:00:43,000 --> 00:00:45,000
Now if we run this on an N-vertex graph,

16
00:00:45,000 --> 00:00:49,000
which we know has a unique minimum vertex cover of size K.

17
00:00:49,000 --> 00:00:54,000
My question then is how long does the randomized algorithm run in the worst case?

18
00:00:54,000 --> 00:00:57,000
Is the algorithm guaranteed to finish after

19
00:00:57,000 --> 00:01:01,000
K iterations, 2K iterations, or N-1 iterations?

20
00:01:01,000 --> 99:59:59,999
And check whichever the 3 you think is most correct.
