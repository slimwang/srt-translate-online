1
00:00:00,000 --> 00:00:03,000
So just as we applied memoization to Fibonacci,

2
00:00:03,000 --> 00:00:08,000
we're going to apply memoization to our attempts to parse a grammar.

3
00:00:08,000 --> 00:00:12,000
When we were trying to compute Fibonacci, the Nth position in the chart

4
00:00:12,000 --> 00:00:14,000
corresponded to the Nth Fibonacci number.

5
00:00:14,000 --> 00:00:20,000
Let's say I'm trying to parse a string made out of a big list of tokens--

6
00:00:20,000 --> 00:00:25,000
token 1, token 2, token N, all the way up to token last.

7
00:00:25,000 --> 00:00:30,000
We're going to try to figure out the string 1 token at a time.

8
00:00:30,000 --> 00:00:35,000
So the Nth position in the chart is going to be all the parse states we could be in

9
00:00:35,000 --> 00:00:42,000
after seeing the first N tokens--the first N words--in the input.

10
00:00:42,000 --> 00:00:45,000
This means that instead of our chart returning a single number,

11
00:00:45,000 --> 00:00:52,000
our chart is going to return a set or list, an entire collection.

12
00:00:52,000 --> 00:00:56,000
Here's a much simpler grammar to try out this concept on.

13
00:00:56,000 --> 00:01:01,000
E goes to E + E or E goes to INT. We use INT like we use NUM or number.

14
00:01:01,000 --> 00:01:02,000
It represents integer.

15
00:01:02,000 --> 00:01:07,000
So here the language of our grammar includes things like INT + INI, INT + INT + INT.

16
00:01:07,000 --> 00:01:12,000
Suppose, in fact, that the input is INT + INT.

17
00:01:12,000 --> 00:01:17,000
I'm going to draw out a chart showing N and chart of N.

18
00:01:17,000 --> 00:01:21,000
Suppose we haven't seen any of the input yet. Where could we be?

19
00:01:21,000 --> 00:01:25,000
Well, conceptually my finger is going to have to be very far to the left.

20
00:01:25,000 --> 00:01:30,000
I could be looking for E + E, or I could be looking for INT,

21
00:01:30,000 --> 00:01:32,000
but regardless, I haven't seen any of it left.

22
00:01:32,000 --> 00:01:36,000
There's nothing in my past, and the whole world is in the future.

23
00:01:36,000 --> 00:01:40,000
The reason I can't be sure yet is that I've only seen 0 tokens of the input.

24
00:01:40,000 --> 00:01:44,000
So even though we, the viewers at home, the studio audience,

25
00:01:44,000 --> 00:01:47,000
know that eventually we're going to be using this top rule,

26
00:01:47,000 --> 00:01:51,000
our chart hasn't seen enough of the input yet to make that determination.

27
00:01:51,000 --> 00:01:54,000
Well, after seeing only 1 token, we've seen the INT.

28
00:01:54,000 --> 00:01:58,000
One possible state I could be in is, well, I'm trying to reduce an expression to an integer.

29
00:01:58,000 --> 00:02:01,000
You gave me an integer. I'm done.

30
00:02:01,000 --> 00:02:03,000
If I think the input is going to go on a little longer,

31
00:02:03,000 --> 00:02:07,000
I might expect to see a + and an E coming up later.

32
00:02:07,000 --> 00:02:09,000
So this is the second state that I could be in.

33
00:02:09,000 --> 00:02:14,000
If I've seen the INT and the +, then among other things, my world probably looks like this.

34
00:02:14,000 --> 00:02:19,000
I've got an E and a + in my past. I'm looking for an E in my future.

35
00:02:19,000 --> 00:02:23,000
There might be a few other elements in this state, and we might continue the chart

36
00:02:23,000 --> 00:02:26,000
a bit farther to the right, but this is the basic idea.

37
00:02:26,000 --> 00:02:31,000
It's just like our chart for Fibonacci, but instead of holding a single number,

38
00:02:31,000 --> 00:02:38,000
it holds a list or a sequence of parsing states, and each parsing state is a rule in our grammar

39
00:02:38,000 --> 99:59:59,999
augmented with a single red dot somewhere on the right-hand side.
