1
00:00:00,110 --> 00:00:02,480
Let's talk a little
bit about binding now.

2
00:00:02,480 --> 00:00:05,860
Binding is the mechanism
that's used by the client

3
00:00:05,860 --> 00:00:09,040
to determine which is the server
that it needs to connect to.

4
00:00:09,040 --> 00:00:12,580
Based on things like the name of
the the service that it needs perform,

5
00:00:12,580 --> 00:00:14,930
the version number of that service.

6
00:00:14,930 --> 00:00:19,520
And also it's used to determine how
to connect to that particular server

7
00:00:19,520 --> 00:00:24,140
to basically discover the IP address or
the network protocol that need to be

8
00:00:24,140 --> 00:00:26,790
used for
that connection to be established.

9
00:00:26,790 --> 00:00:30,940
To do this, to support binding,
the system software needs to support

10
00:00:30,940 --> 00:00:34,770
some form of database of
all the available services.

11
00:00:34,770 --> 00:00:36,260
And this is often called a registry.

12
00:00:36,260 --> 00:00:40,740
You can think of the registry as the
Yellow Pages that you need to look up

13
00:00:40,740 --> 00:00:45,250
based on the service name that you
require and then find the best match

14
00:00:45,250 --> 00:00:48,640
based on the protocol,
the version number, the proximity.

15
00:00:48,640 --> 00:00:50,110
Some other information.

16
00:00:50,110 --> 00:00:53,220
That match will then provide you
with the contact details for

17
00:00:53,220 --> 00:00:57,230
that particular service instance,
so the address, the port number,

18
00:00:57,230 --> 00:00:59,470
the protocol that needs to be used.

19
00:00:59,470 --> 00:01:04,069
At one extreme this registry can be some
distributed online service may be called

20
00:01:04,069 --> 00:01:09,050
something like rpcregistry.com,
that any RPC server can register with.

21
00:01:09,050 --> 00:01:12,590
And the clients then have
a well-known contact point,

22
00:01:12,590 --> 00:01:16,180
how they can find information
regarding the services they need.

23
00:01:16,180 --> 00:01:17,150
At the other extreme,

24
00:01:17,150 --> 00:01:22,410
the registry can be a dedicated process
that runs on every single server machine

25
00:01:22,410 --> 00:01:26,660
and knows only about those services
that run on that particular machine.

26
00:01:26,660 --> 00:01:30,950
That means that the clients have
to know the machine address,

27
00:01:30,950 --> 00:01:34,390
when they need to request
some particular service.

28
00:01:34,390 --> 00:01:37,030
And the registry still
provides useful information.

29
00:01:37,030 --> 00:01:40,150
It will tell the clients
what is the port number

30
00:01:40,150 --> 00:01:44,470
that they need to use when they try to
connect with the particular server.

31
00:01:44,470 --> 00:01:48,160
Regardless of how the registry's
implemented, it will require some sort

32
00:01:48,160 --> 00:01:51,600
of naming protocol,
some sort of naming conventions.

33
00:01:51,600 --> 00:01:55,220
For instance, the simplest approach
could require that a client has to

34
00:01:55,220 --> 00:02:00,340
specify the exact name and version
number of the service that it requires.

35
00:02:00,340 --> 00:02:05,293
Or a more sophisticated naming scheme
could consider the fact that words

36
00:02:05,293 --> 00:02:07,078
like summation and sum and

37
00:02:07,078 --> 00:02:11,068
addition are likely equivalent
to the use of the word add.

38
00:02:11,068 --> 00:02:15,916
And so any service that uses any one of
these function names or service names is

39
00:02:15,916 --> 00:02:20,937
a fair candidate to be considered
when trying to find the best match.

40
00:02:20,937 --> 00:02:23,797
Allowing this kind of reasoning for
required supports for

41
00:02:23,797 --> 00:02:27,607
things like oncologists or other
cognitive for learning methods, and

42
00:02:27,607 --> 00:02:29,257
we will not discuss this in this course.
