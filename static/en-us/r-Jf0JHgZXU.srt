1
00:00:00,360 --> 00:00:04,400
Another useful way to add consistency
and distinguish different views in your

2
00:00:04,400 --> 00:00:07,770
app is through text and
its different font and sizes.

3
00:00:07,769 --> 00:00:10,890
The default text for
Android is a font called Roboto,

4
00:00:10,890 --> 00:00:14,790
which is designed to work across
a range of differently sized platforms.

5
00:00:14,789 --> 00:00:16,969
And it comes in a variety
of font families.

6
00:00:16,969 --> 00:00:21,509
Font-families are groups of fonts that
share similar design characteristics,

7
00:00:21,510 --> 00:00:23,610
like serif or sans serif.

8
00:00:23,609 --> 00:00:26,210
Sans serif is the default in Android,
and

9
00:00:26,210 --> 00:00:31,480
there's also sans serif thin, medium,
and condensed, to name just a few more.

10
00:00:31,480 --> 00:00:34,950
The Android material design site
has recommendations for sizes and

11
00:00:34,950 --> 00:00:37,109
font families to use for readability.

12
00:00:37,109 --> 00:00:39,280
And a link to that site below.

13
00:00:39,280 --> 00:00:42,920
It's typically good to stick with one
phone family throughout an app and

14
00:00:42,920 --> 00:00:47,579
change the color, weight, or size when
you need to make some text stand out.

15
00:00:47,579 --> 00:00:51,039
It's also good practice to have
only a few consistent styles for

16
00:00:51,039 --> 00:00:55,350
different text components and
not just change the style at random.

17
00:00:55,350 --> 00:00:59,210
For example, when you're displaying the
text for a headline of an article, it

18
00:00:59,210 --> 00:01:03,929
should be bigger or bolder than subtitle
or body text since it's more important.

19
00:01:03,929 --> 00:01:08,609
One thing to note about text size
is that it will be in units of sp,

20
00:01:08,609 --> 00:01:11,269
which stands for
scale independent pixels.

21
00:01:11,269 --> 00:01:15,137
Most views will be in units of dips,
or density independent pixels,

22
00:01:15,138 --> 00:01:17,283
which we'll learn more about later.

23
00:01:17,283 --> 00:01:21,518
Both dips and scale independent pixels
will stay the same physical size

24
00:01:21,518 --> 00:01:23,930
across different resolution screens.

25
00:01:23,930 --> 00:01:27,061
So text on newer screens
with lots of pixels and

26
00:01:27,061 --> 00:01:32,220
on older screens with fewer pixels will
appear to be the same physical size.

27
00:01:32,219 --> 00:01:35,941
Unlike dips, scale independent
pixels are also used for

28
00:01:35,941 --> 00:01:37,734
accessibility purposes.

29
00:01:37,733 --> 00:01:42,399
For example, if someone changes their
text size settings to be larger for

30
00:01:42,400 --> 00:01:46,763
visibility, then Android will enlarge
any view whose size is in sp,

31
00:01:46,763 --> 00:01:48,500
accordingly.

32
00:01:48,500 --> 00:01:53,379
So using units of sp for text makes sure
that the text in your app will respond

33
00:01:53,379 --> 00:01:57,650
to accessibility settings and
will be readable across devices.

