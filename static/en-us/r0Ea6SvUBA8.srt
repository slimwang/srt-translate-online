1
00:00:00,000 --> 00:00:03,461
Beyond the app servers, we had our database.

2
00:00:03,461 --> 00:00:09,000
Now, we just talked about how funky a database
setup we had, but it was still Postgres,

3
00:00:09,000 --> 00:00:15,000
and we'll still use the industry-standard
cylinders for representing our databases,

4
00:00:15,000 --> 00:00:23,000
and we had a couple of verticals--
I think we stored links on one,

5
00:00:23,000 --> 00:00:30,000
votes on another, comments were on one,
and then we had like a miscellaneous one.

6
00:00:30,000 --> 00:00:33,000
Did we store subreddits and users on
the same one or something like that?

7
00:00:33,000 --> 00:00:36,000
Subreddits were with comments,
users were with links.

8
00:00:36,000 --> 00:00:38,169
When we first built the system,
it was all on one machine,

9
00:00:38,169 --> 00:00:41,000
and we had different tables for each data type.

10
00:00:41,000 --> 00:00:46,000
And so a natural way to grow was
to split apart the data types,

11
00:00:46,000 --> 00:00:49,630
because remember, I talked about how
if you don't do joins, scaling is a lot easier--

12
00:00:49,630 --> 00:00:52,000
This is an example of that.

13
00:00:52,000 --> 00:00:56,000
You have to think a little bit harder about
what your queries are going to be,

14
00:00:56,000 --> 00:00:58,000
but you can start splitting things apart.

15
00:00:58,000 --> 00:01:01,000
You know how many comments are
in the comment's database now?

16
00:01:01,000 --> 00:01:04,000
Something in the order of like 250 million.
>>250 million comments.

17
00:01:04,000 --> 00:01:07,000
When I left, I don't remember how many.

18
00:01:07,000 --> 00:01:12,000
There was a lot and it wasn't fitting
on one machine with links.

19
00:01:12,000 --> 00:01:17,292
All these databases were replicated.
We used Londiste, I think.

20
00:01:17,292 --> 00:01:26,000
Do you guys still use Londiste? Yes we do.
Londiste is a third-party tool made by Skype.

21
00:01:26,000 --> 00:01:30,215
Basically what this does is--
I think it is a log shipping right?

22
00:01:30,215 --> 00:01:36,000
No, so when you write to the master, it hits
a trigger, which then inserts the same query

23
00:01:36,000 --> 00:01:43,000
into a queue and that's replicated to all the slaves.
The same inserts will run all the slaves.

24
00:01:43,000 --> 00:01:46,000
Okay. So, it just actually replays
the exact commands

25
00:01:46,000 --> 00:01:49,000
Yes. Obviously, things like random
get precalculated.

26
00:01:49,000 --> 00:01:56,000
Okay. So all these machines were replicated
using Londiste, and Londiste is really cool,

27
00:01:56,000 --> 00:01:58,000
and it might be a Londis-te, I don't know.

28
00:01:58,000 --> 00:02:03,000
It's a problem with web technologies is right, you
read about the technology, like I don't know.

29
00:02:03,000 --> 00:02:07,000
Some people I think called this HAProxy,
but it's the first guy in the office

30
00:02:07,000 --> 00:02:11,000
who discovers the piece of technology, he gets this is
how it pronounced for the rest of the company.

31
00:02:11,000 --> 00:02:14,000
We replicate all of this machines both for durability,

32
00:02:14,000 --> 00:02:18,000
and also if we lost the machine,
we wouldn't lose our data.

33
00:02:18,000 --> 00:02:20,000
In Reddit, if we lost your comment
history, you'd be mad.

34
00:02:20,000 --> 00:02:24,692
And for load, which spread our
reads across all these machines.

35
00:02:24,692 --> 00:02:29,000
Now, remember we talked about replication lag,
and I learned this lesson the hard way

36
00:02:29,000 --> 00:02:32,000
and it was really hard for me to figure out
the first time because I've never heard

37
00:02:32,000 --> 00:02:36,000
of replication lag, and we had to
really subtle bugs as a result.
