1
00:00:00,100 --> 00:00:03,820
Now that you're experts on properties,
let's go back to methods for a moment

2
00:00:03,820 --> 00:00:07,620
and think a little more carefully about
the syntax of how methods are called.

3
00:00:07,620 --> 00:00:09,170
I've initialized the movies here, so

4
00:00:09,170 --> 00:00:12,900
we can have a movie archive object
devoted to Rob Reiner movies.

5
00:00:12,900 --> 00:00:15,520
You've already seen
a call to filterByYear.

6
00:00:15,520 --> 00:00:17,200
Here it is one more time.

7
00:00:17,200 --> 00:00:21,580
We just use .syntax on an instance
of the MovieArchive class, and

8
00:00:21,580 --> 00:00:25,540
then we call filterByYear and
pass in the year we want to filter by.

9
00:00:25,540 --> 00:00:27,371
Let's go with 1986.

10
00:00:27,371 --> 00:00:30,352
And then, we'll want to grab
the first item from our movies array,

11
00:00:34,060 --> 00:00:37,545
Print out the title and
we can see that it's Stand By Me.

12
00:00:37,545 --> 00:00:39,690
filterByYear is an instance method.

13
00:00:39,690 --> 00:00:43,410
You may also have occasion to call
type methods or class methods.

14
00:00:43,410 --> 00:00:45,380
Type methods, like type properties,

15
00:00:45,380 --> 00:00:49,080
belong to the class, not to any
particular instance of the class.

16
00:00:49,080 --> 00:00:51,870
And so, they're called on the class
instead of being called on

17
00:00:51,870 --> 00:00:53,270
an instance of the class.

18
00:00:53,270 --> 00:00:56,750
You're going to run into a number of
type methods when you start working with

19
00:00:56,750 --> 00:00:58,475
the iOs user interface library.

20
00:00:58,475 --> 00:00:59,390
UIKit.

21
00:00:59,390 --> 00:01:00,430
For example,

22
00:01:00,430 --> 00:01:03,970
here's a class method that you'll use
when you build the second portfolio app.

23
00:01:03,970 --> 00:01:04,970
Me me.

24
00:01:04,970 --> 00:01:08,150
This method belongs to
the UIImagePickerController class.

25
00:01:08,150 --> 00:01:10,400
It's called is SourceTypeAvailable.

26
00:01:10,400 --> 00:01:14,180
It takes in a source type as an argument
and returns a bool indicating whether

27
00:01:14,180 --> 00:01:16,850
that source type is available
on the current device.

28
00:01:16,850 --> 00:01:20,470
A source type, in this case, is
the source of an image, like a camera or

29
00:01:20,470 --> 00:01:21,720
a photo album.

30
00:01:21,720 --> 00:01:24,000
In the playground,
there's no camera available.

31
00:01:24,000 --> 00:01:25,340
So in the playground environment,

32
00:01:25,340 --> 00:01:29,270
if you pass in source type camera,
this method returns false.

33
00:01:29,270 --> 00:01:32,030
The playground does have access
to the photo library, so

34
00:01:32,030 --> 00:01:36,200
if you pass in source type photo
library, the method returns true.

35
00:01:36,200 --> 00:01:38,620
If you are running this code
on a phone with a camera,

36
00:01:38,620 --> 00:01:41,160
this method would return true for
both source types.

37
00:01:41,160 --> 00:01:45,050
Let's take a look at the class
definition for UIImagePickerController.

38
00:01:45,050 --> 00:01:48,630
I can access it from the playground by
command clicking on the class name.

39
00:01:48,630 --> 00:01:50,990
Now, this might look intimidating.

40
00:01:50,990 --> 00:01:54,000
But all it is a list of properties and
methods.

41
00:01:54,000 --> 00:01:56,605
Right here is the method
isSourceTypeAvailable.

42
00:01:57,855 --> 00:02:00,805
Notice that it has the word
class before func.

43
00:02:00,805 --> 00:02:02,327
Just like type properties.

44
00:02:02,327 --> 00:02:06,005
Type method definitions begin
with the word class or static.

45
00:02:06,005 --> 00:02:08,955
Otherwise, they're defined
just like instance methods.

46
00:02:08,955 --> 00:02:11,585
And if you use the word
class instead of static,

47
00:02:11,585 --> 00:02:13,715
subclasses will be able
to override the method.
