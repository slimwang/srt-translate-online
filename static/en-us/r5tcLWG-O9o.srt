1
00:00:00,000 --> 00:00:03,000
Now, when we're designing a program, we're thinking at multiple levels.

2
00:00:03,000 --> 00:00:06,000
We're thinking about different aspects of that program.

3
00:00:06,000 --> 00:00:10,000
For example, we always have to think about is the program correct.

4
00:00:10,000 --> 00:00:12,000
Does it implement what we want it to implement?

5
00:00:12,000 --> 00:00:15,000
We saw in the zebra puzzle that we also want to worry about is it efficient.

6
00:00:15,000 --> 00:00:18,000
Maybe we have a correct program, but it takes an hour,

7
00:00:18,000 --> 00:00:21,000
and we'd rather have a program that takes thousandths of a second.

8
00:00:21,000 --> 00:00:24,000
We also have to worry about the debugging process

9
00:00:24,000 --> 00:00:28,000
of as we're developing the program, we're building up all sorts of scaffolding

10
00:00:28,000 --> 00:00:32,000
to make it run properly that maybe we won't need later.

11
00:00:32,000 --> 00:00:34,000
Traditionally, we write our program.

12
00:00:34,000 --> 00:00:38,000
Some of what we're written has to deal with having it be correct.

13
00:00:38,000 --> 00:00:43,000
Then some of the code interspersed in there deals with efficiency.

14
00:00:43,000 --> 00:00:47,000
Now we've talked about adding further code that deals with debugging it.

15
00:00:47,000 --> 00:00:52,000
We end up with this mess that's all interleaved, and wouldn't it be nice

16
00:00:52,000 --> 00:00:58,000
if we could break those out so that some of the debugging statements were separate,

17
00:00:58,000 --> 00:01:02,000
some of the efficiency statements could live someplace else,

18
00:01:02,000 --> 00:01:07,000
and the main sort of correctness program could, say, stay distinct from the other parts.

19
00:01:07,000 --> 00:01:11,000
This idea is called "aspect-oriented programming."

20
00:01:11,000 --> 00:01:13,000
It's an ideal that we can strive for.

21
00:01:13,000 --> 00:01:18,000
We don't get it completely, but we should always think of can we separate out

22
00:01:18,000 --> 00:01:23,000
these different aspects or concerns as much as possible.

23
00:01:23,000 --> 00:01:26,000
What I want to ask is if I've written the function this way

24
00:01:26,000 --> 00:01:30,000
as this big generator expression rather than as nested statements,

25
00:01:30,000 --> 00:01:34,000
I can't have count equals count plus 1 statements inside here,

26
00:01:34,000 --> 00:01:37,000
because there's no place to put something inside a statement,

27
00:01:37,000 --> 00:01:40,000
and I'd like to separate the counting as much as I can from the puzzle

28
00:01:40,000 --> 00:01:44,000
to do the minimum amount of damage or editing to allow me to insert

29
00:01:44,000 --> 00:01:48,000
these bookkeeping nodes that do that counting. Let's think about that.

30
00:01:48,000 --> 00:01:50,000
What would be the right way to do that?

31
00:01:50,000 --> 00:01:55,000
I'll tell you what I came up with. This is the second-best answer I came up with.

32
00:01:55,000 --> 00:01:57,000
That's to say, well, what am I doing?

33
00:01:57,000 --> 00:02:03,000
I'm counting iterations through the orderings, so maybe the place to

34
00:02:03,000 --> 00:02:06,000
insert my annotations is right here.

35
00:02:06,000 --> 00:02:09,000
I want this to be a debugging tool.

36
00:02:09,000 --> 00:02:13,000
For debugging tools, I'm willing to have shorter names,

37
00:02:13,000 --> 00:02:15,000
because they're things that really aren't going to stick around.

38
00:02:15,000 --> 00:02:18,000
I'm going to use them for a while, and then I'm going to get rid of them.

39
00:02:18,000 --> 00:02:23,000
I'm willing to have a one-character name here, although it bothers me a little bit.

40
00:02:23,000 --> 00:02:25,000
I can always rename it as something else.

41
00:02:25,000 --> 00:02:28,000
What I'll do is I'll just insert this call

42
00:02:28,000 --> 00:02:31,000
to the function c around each of my uses of orderings.

43
00:02:31,000 --> 00:02:35,000
I'm going to insert 1, 2, 3, times 5, 15 characters.

44
00:02:35,000 --> 00:02:38,000
There we are. I think that's a lot less intrusive than putting in

45
00:02:38,000 --> 00:02:41,000
a lot of count equals count plus 1 statements.

46
00:02:41,000 --> 00:02:43,000
I'm pretty happy with that.

47
00:02:43,000 --> 00:02:47,000
What I've done here is defined a function called "instrument function,"

48
00:02:47,000 --> 00:02:53,000
which will count the calls that it takes to execute the calling of a function with the arguments.

49
00:02:53,000 --> 00:02:56,000
I haven't shown you the definition of c yet,

50
00:02:56,000 --> 00:03:01,000
but when I show it to you, you'll see that it keeps track of two counts--

51
00:03:01,000 --> 00:03:05,000
the number of starts, the times we started an iteration, started the for loop,

52
00:03:05,000 --> 00:03:11,000
that was measured with the c function, and the number of items that we got through.

53
00:03:11,000 --> 00:03:14,000
How many times did we go through that for loop?

54
00:03:14,000 --> 00:03:19,000
We initialize those counts to 0, we call the function, and then we say what do we get back.

55
00:03:19,000 --> 00:03:27,000
With the zebra puzzle, it only took us 25 iterations over 2,700 items.

56
00:03:27,000 --> 00:03:32,000
Puzzle2--this was the definition for when we took the original definition

57
00:03:32,000 --> 00:03:37,000
and then moved only one of the constraints up in the ordering.

58
00:03:37,000 --> 00:03:40,000
That gave us this number of iterations and items.

59
00:03:40,000 --> 00:03:43,000
I didn't show the puzzle where none of the constraints are moved up.

60
00:03:43,000 --> 00:03:45,000
That would've taken even more.

61
00:03:45,000 --> 00:03:50,000
We see even here quite a reduction in the number of iterations in the counts,

62
00:03:50,000 --> 99:59:59,999
and this tells you how efficient we are.
