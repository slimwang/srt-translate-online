1
00:00:00,230 --> 00:00:03,780
Up to now, what we've talked about is

2
00:00:03,780 --> 00:00:07,100
how to reduce the latency for requiring the lock

3
00:00:08,350 --> 00:00:10,570
and the contention when the lock is released.

4
00:00:10,570 --> 00:00:13,700
So far we've not talked about fairness. What do

5
00:00:13,700 --> 00:00:17,040
we mean by fairness? Well, if multiple people

6
00:00:17,040 --> 00:00:19,650
are waiting for the lock, should we not be

7
00:00:19,650 --> 00:00:22,650
giving the lock to the guy that made the

8
00:00:22,650 --> 00:00:25,640
lock request or tried to acquire the lock first.

9
00:00:25,640 --> 00:00:28,280
Unfortunately, in Spinlock, there is no way to distinguish

10
00:00:28,280 --> 00:00:31,110
who came first. Because, as soon as the lock

11
00:00:31,110 --> 00:00:33,700
is released, they are going to try and gab the

12
00:00:33,700 --> 00:00:37,630
lock. And, it's entirely up for grabs, as to,

13
00:00:37,630 --> 00:00:40,105
who may be the winner. So next, we're going to

14
00:00:40,105 --> 00:00:42,330
do is, we going to look at a way by

15
00:00:42,330 --> 00:00:45,540
which we can, we can ensure fairness in the

16
00:00:45,540 --> 00:00:50,670
lockout position. Now many shops and restaurants, busy ones,

17
00:00:50,670 --> 00:00:53,890
that is, often use a ticketing system to

18
00:00:53,890 --> 00:00:57,290
ensure fairness for those who are waiting to get

19
00:00:57,290 --> 00:01:01,310
served. So for instance, in this example here

20
00:01:01,310 --> 00:01:03,500
let's say, I walk in the deli shop. And

21
00:01:03,500 --> 00:01:10,600
my ticket is 25, and I notice that currently they're serving 16. So I know that

22
00:01:10,600 --> 00:01:15,960
I have to wait for a little bit of time. And you know, once my number comes up,

23
00:01:15,960 --> 00:01:21,170
I can get served. So this is actually, and if I know that there at least nine

24
00:01:21,170 --> 00:01:26,360
people ahead of me who need to be served before my turn comes up. And by similar

25
00:01:27,430 --> 00:01:30,430
argument. If people come after me, I know

26
00:01:30,430 --> 00:01:33,920
that they're not going to served before me. That's the

27
00:01:33,920 --> 00:01:37,120
basic idea that we're going to use in this ticket

28
00:01:37,120 --> 00:01:41,850
lock algorithm. The ticket lock algorithm is basically implementing

29
00:01:41,850 --> 00:01:43,980
what I described to you as to what happens in

30
00:01:43,980 --> 00:01:47,310
a deli shop. The lock data structure has two fields to

31
00:01:47,310 --> 00:01:52,450
it, a next-ticket field, and a now-serving field. And the

32
00:01:52,450 --> 00:01:56,020
lock algorithm, in order to acquire a lock, what I'm going to

33
00:01:56,020 --> 00:01:58,680
do is I'm going to mark my position. And the way

34
00:01:58,680 --> 00:02:02,040
I do that is I'm going to get a ticket just like

35
00:02:02,040 --> 00:02:03,630
when I walk in a deli shop. I get a unique

36
00:02:03,630 --> 00:02:06,860
ticket, I get a unique ticket by doing a fetch and

37
00:02:06,860 --> 00:02:11,990
increment on the next ticket field of the log data structure,

38
00:02:11,990 --> 00:02:16,950
and when I do the structure increment, I get a unique number and this number is

39
00:02:16,950 --> 00:02:22,140
also advanced, exactly like how it would happen in a deli shop. And once I have

40
00:02:22,140 --> 00:02:27,550
my position marked, as to when I can get my

41
00:02:27,550 --> 00:02:33,860
lock. I can then wait by procrastination.

42
00:02:33,860 --> 00:02:40,870
And what I'm doing here is pausing to see if I've won my. Lock by an

43
00:02:40,870 --> 00:02:46,700
amount that is proportionate to the difference between my ticket value and who

44
00:02:46,700 --> 00:02:51,390
is being served currently. And after there's amount of dealing, I'm going to go

45
00:02:51,390 --> 00:02:58,860
and check if the now serving value equals my ticket value. And if, if it is,

46
00:02:58,860 --> 00:03:00,520
then I'm done, I can return. Otherwise I

47
00:03:00,520 --> 00:03:04,230
go back to looping. So basically I'm looping, waiting

48
00:03:04,230 --> 00:03:10,660
for, waiting for my number to be up so that I can assume that I've got the

49
00:03:10,660 --> 00:03:13,100
lock. And how am I going to get, get

50
00:03:13,100 --> 00:03:17,670
this information that, that my ticket is up for

51
00:03:17,670 --> 00:03:20,660
serving? That is going to be done with the current

52
00:03:20,660 --> 00:03:24,430
holder of the lock. He's going to come and release

53
00:03:24,430 --> 00:03:26,210
the lock, and when he releases the

54
00:03:26,210 --> 00:03:31,360
lock, he's going to increment the now_serving value in

55
00:03:31,360 --> 00:03:33,428
the lock data structure, and that's all,

56
00:03:33,428 --> 00:03:37,360
eventually, the now_serving will advance to be equal

57
00:03:37,360 --> 00:03:41,640
to my_ticket, and I'll get the ticket, and then I can, I can return from

58
00:03:41,640 --> 00:03:44,420
the acquire lock. Now this algorithm is good,

59
00:03:44,420 --> 00:03:48,840
that it preserves fairness, but you notice that,

60
00:03:48,840 --> 00:03:51,730
everytime the lock is released, there is now

61
00:03:51,730 --> 00:03:55,300
serving value that is in my local cache is

62
00:03:55,300 --> 00:03:57,050
going to be updated with a cache coherence

63
00:03:57,050 --> 00:04:00,170
mechanism, and that's going to cause contention on the

64
00:04:00,170 --> 00:04:05,190
network so On the one hand frener is achieved and on the other hand, we have not

65
00:04:05,190 --> 00:04:08,220
really completely gotten rid of the contention that can

66
00:04:08,220 --> 00:04:10,990
happen on the network when the lock is released.
