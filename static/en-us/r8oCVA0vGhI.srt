1
00:00:00,330 --> 00:00:02,724
So let's compare what we need for the conditional

2
00:00:02,724 --> 00:00:05,845
moves and what we need for full predication. So for

3
00:00:05,845 --> 00:00:08,140
the move instructions, if they're conditional, we need a

4
00:00:08,140 --> 00:00:10,880
separate opcode that tells us this is a conditional instruction.

5
00:00:10,880 --> 00:00:14,913
Usually, we have a separate opcode for each particular condition. So we need a

6
00:00:14,913 --> 00:00:20,546
number of new opcodes. For full predication we use the same instructions that

7
00:00:20,546 --> 00:00:26,730
we use without conditions. We add condition bits for full predication.

8
00:00:26,730 --> 00:00:29,820
However, we add condition bits to every instruction.

9
00:00:29,820 --> 00:00:32,970
So every instructor word contains some bits that tell

10
00:00:32,970 --> 00:00:35,210
us what is the condition for writing to

11
00:00:35,210 --> 00:00:40,260
the destination register. For example, the itanium instructions that

12
00:00:40,260 --> 00:00:42,785
has full predication. And this is what an

13
00:00:42,785 --> 00:00:45,996
add instruction would look like. It specifies the two

14
00:00:45,996 --> 00:00:49,668
source registers, the destination registers, that this is an

15
00:00:49,668 --> 00:00:52,320
add, and it has a field within the instruction

16
00:00:52,320 --> 00:00:55,560
to specify the so-called qualifying predicate. That

17
00:00:55,560 --> 00:00:58,430
is where the condition for the link, the

18
00:00:58,430 --> 00:01:05,084
write or the r1 register will be found in. The titanium instruction has 41 bits,

19
00:01:05,084 --> 00:01:08,695
where the least significant six bits specify

20
00:01:08,695 --> 00:01:12,995
what the qualifying predicate is. The predicates in

21
00:01:12,995 --> 00:01:17,752
the itanium are actually small one bit registers, so that you can do a condition

22
00:01:17,752 --> 00:01:21,010
check and store the result in this 1-bit register.

23
00:01:21,010 --> 00:01:24,002
And then really the six bits here tell you

24
00:01:24,002 --> 00:01:28,402
which of the 64-bit conditional registers are you going

25
00:01:28,402 --> 00:01:31,670
to use to determine whether to write to R1.
