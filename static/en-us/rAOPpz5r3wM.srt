1
00:00:00,150 --> 00:00:01,550
To illustrate the need for

2
00:00:01,550 --> 00:00:04,720
malware analysis and
the challenges associated with it,

3
00:00:04,720 --> 00:00:08,990
let's consider one of the common malware
obfuscation techniques, packing.

4
00:00:08,990 --> 00:00:12,120
Packing refers to the process
of compressing and

5
00:00:12,120 --> 00:00:14,680
encrypting part of
an executable program.

6
00:00:14,680 --> 00:00:19,420
The result of packing is that part of
the executable program now becomes data,

7
00:00:19,420 --> 00:00:21,180
instead of an instruction set, and,

8
00:00:21,180 --> 00:00:25,530
in order to execute that part of the
program that has been packed in runtime,

9
00:00:25,530 --> 00:00:29,480
we must reverse it back
from data to insertion set.

10
00:00:29,480 --> 00:00:33,900
That is, we now must include in the
executable program some code that will

11
00:00:33,900 --> 00:00:37,918
reverse this packing process,
and this is called the unpacking.

12
00:00:37,918 --> 00:00:41,010
To give an illustrated example,
we have the original program,

13
00:00:41,010 --> 00:00:45,745
Program A here, and you see that
the program contains instruction sets.

14
00:00:45,745 --> 00:00:49,760
With a packing tool, that includes
compression and encryption and so on.

15
00:00:49,760 --> 00:00:52,720
The result of packing is that
part of the program, meaning,

16
00:00:52,720 --> 00:00:55,430
part of the instruction set,
now becomes data.

17
00:00:55,430 --> 00:00:58,120
We observed that the packing
result looks random,

18
00:00:58,120 --> 00:00:59,950
meaning the data here looks random.

19
00:00:59,950 --> 00:01:03,550
This is because it is encrypted
with a randomly generated key

20
00:01:03,550 --> 00:01:06,880
each time the packing program
is run on a malware program.

21
00:01:06,880 --> 00:01:10,030
That is, even for
the same malware program, each packed

22
00:01:10,030 --> 00:01:14,090
instance would look different, and,
therefore, a signature-based approach

23
00:01:14,090 --> 00:01:17,380
is not effective in detecting
the packed malware.

24
00:01:17,380 --> 00:01:20,290
Now you say this pack
program will include

25
00:01:20,290 --> 00:01:23,070
code that try to unpack the packed part.

26
00:01:23,070 --> 00:01:27,020
Can we use the unpacking code
as signature to detect malware?

27
00:01:27,020 --> 00:01:28,010
The answer's no.

28
00:01:28,010 --> 00:01:32,070
The reason is that legitimate
programs may also include packing in

29
00:01:32,070 --> 00:01:36,490
order to hide certain logic and data,
for example, for copyright protection.

30
00:01:36,490 --> 00:01:39,580
That is, some legitimate programs
also have unpacking code.

31
00:01:39,580 --> 00:01:42,540
It will unpack some part
of the program in runtime.

32
00:01:42,540 --> 00:01:46,800
Therefore we cannot use the unpacking
code as signature to detect malware.
