1
00:00:00,000 --> 00:00:05,000
We can define a pattern--let's say pattern is lit('a').

2
00:00:05,000 --> 00:00:08,000
Now what is a pattern? Well, it's a function.

3
00:00:08,000 --> 00:00:10,000
It's no longer a tuple.

4
00:00:10,000 --> 00:00:16,000
We can apply that pattern to a string and we get back the set of the remainders.

5
00:00:16,000 --> 00:00:22,000
It says, yes, we were able to successfully parse off "a" off of a string,

6
00:00:22,000 --> 00:00:24,000
and the remainder is a string.

7
00:00:24,000 --> 00:00:30,000
We can define another pattern. Let's say pattern 2 equals plus(pat).

8
00:00:30,000 --> 00:00:40,000
Pattern 2 is also a function, and we can call pattern 2 of let's say the string of five a's followed by a b.

9
00:00:40,000 --> 00:00:45,000
Now we get back this set that says we can break off any number of a's

10
00:00:45,000 --> 00:00:51,000
because we're asking for a and the plus of that and the closure of a.

11
00:00:51,000 --> 00:00:55,000
These are the possible remainders if we break off all of the a's or all but one

12
00:00:55,000 --> 00:00:58,000
or all but three, and so on.

13
00:00:58,000 --> 00:01:04,000
Essentially we're doing the same computation that in the previous incarnation

14
00:01:04,000 --> 00:01:12,000
with an interpreter we would have done with matchset(pat2, 'aaaab').

15
00:01:12,000 --> 00:01:15,000
Now we don't have to do that. Now we're calling the pattern directly.

16
00:01:15,000 --> 00:01:19,000
So we don't have matchset, which has to look at the pattern and figure out,

17
00:01:19,000 --> 00:01:24,000
yes, the top-level pattern is a plus and the embedded pattern is a lit.

18
00:01:24,000 --> 00:01:26,000
Instead the pattern is now a composition of functions,

19
00:01:26,000 --> 00:01:29,000
and each function does directly what it wants to do.

20
00:01:29,000 --> 00:01:32,000
It doesn't have to look up what it should do.

21
00:01:32,000 --> 00:01:37,000
In interpreter we have a way of writing patterns that describes the language

22
00:01:37,000 --> 00:01:39,000
that the patterns below to.

23
00:01:39,000 --> 00:01:43,000
In a compiler there are two sets of descriptions to deal with.

24
00:01:43,000 --> 00:01:45,000
There's a description for what the patterns look like,

25
00:01:45,000 --> 00:01:49,000
and then there's a description for what the compiled code looks like.

26
00:01:49,000 --> 00:01:56,000
Now, in our case--the compiler we just built--the compile code consists of Python functions.

27
00:01:56,000 --> 00:02:00,000
They're good target representations because they're so flexible.

28
00:02:00,000 --> 00:02:02,000
You can combine them in lots of different ways.

29
00:02:02,000 --> 00:02:04,000
You can call each other and so on.

30
00:02:04,000 --> 00:02:08,000
That's the best unit that we have in Python for building up compiled code.

31
00:02:08,000 --> 00:02:10,000
There are other possibilities.

32
00:02:10,000 --> 00:02:16,000
Compilers for languages like C generate code that's the actual machine instructions

33
00:02:16,000 --> 00:02:18,000
for the computer that you're running on,

34
00:02:18,000 --> 00:02:21,000
but that's a pretty complicated process to describe a compiler

35
00:02:21,000 --> 00:02:24,000
that can go all the way down to machine instructions.

36
00:02:24,000 --> 00:02:27,000
It's much easier to target Python functions.

37
00:02:27,000 --> 00:02:31,000
Now there's an intermediate level where we target a virtual machine,

38
00:02:31,000 --> 00:02:36,000
which has its own set of instructions, which are portable across different computers.

39
00:02:36,000 --> 00:02:41,000
Java uses that, and in fact Python also uses the virtual machine approach,

40
00:02:41,000 --> 00:02:44,000
although it's a little bit more complicated to deal with.

41
00:02:44,000 --> 00:02:50,000
But it is a possibility, and we won't cover it in this class, but I want you to be aware of the possibility.

42
00:02:50,000 --> 00:02:55,000
Here is what the so-called byte code from the Python virtual machine looks like.

43
00:02:55,000 --> 00:03:01,000
I've loaded the module dis for disassemble and dis.dis takes a function as input

44
00:03:01,000 --> 00:03:05,000
and tells me what all the instructions are in that function.

45
00:03:05,000 --> 00:03:08,000
Here's a function that takes the square root of x-squared plus y-squared.

46
00:03:08,000 --> 00:03:10,000
This is how Python executes that.

47
00:03:10,000 --> 00:03:12,000
I loads the square root function.

48
00:03:12,000 --> 00:03:16,000
It loads the x and the 2, and then does a binary power,

49
00:03:16,000 --> 00:03:19,000
loads the y and the 2, does a binary power,

50
00:03:19,000 --> 00:03:22,000
adds the first two things off the top of the stack,

51
00:03:22,000 --> 00:03:26,000
and then calls the function, which is the square root function with that value, and then returns it.

52
00:03:26,000 --> 00:03:31,000
This is a possible target language, but much more complicated to deal with this type of code

53
00:03:31,000 --> 99:59:59,999
than to deal with composition of functions.
