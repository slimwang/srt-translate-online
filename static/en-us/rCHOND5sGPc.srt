1
00:00:00,190 --> 00:00:03,700
We talked briefly about CPU
scheduling in the introductory lesson

2
00:00:03,700 --> 00:00:05,910
on processes and process management.

3
00:00:05,910 --> 00:00:09,220
We said then,
the CPU scheduler decides how and

4
00:00:09,220 --> 00:00:13,220
when processes access
the shared CPUs in the system.

5
00:00:13,220 --> 00:00:18,080
In this lesson, we'll use the term task
to interchangeably mean either processes

6
00:00:18,080 --> 00:00:22,270
or threads, since the same kinds of
mechanisms are valid in all context.

7
00:00:22,270 --> 00:00:26,990
The scheduler concerns the scheduling
of both user-level processes or

8
00:00:26,990 --> 00:00:30,300
threads, as well as
the kernel-level threads.

9
00:00:30,300 --> 00:00:34,030
Recall this figure that we used when we
talked originally about processes and

10
00:00:34,030 --> 00:00:35,570
process scheduling.

11
00:00:35,570 --> 00:00:38,050
The responsibility of the CPU scheduler

12
00:00:38,050 --> 00:00:42,060
is to choose one of the tasks in
the ready queue, a process or a thread.

13
00:00:42,060 --> 00:00:45,040
We said we'll just use the term
task to refer to both, and

14
00:00:45,040 --> 00:00:48,670
then to schedule that
particular task onto the CPU.

15
00:00:48,670 --> 00:00:51,940
Threads may become ready so
they may enter the ready queue

16
00:00:51,940 --> 00:00:55,840
after an I/O operation they have
been waiting on has completed or

17
00:00:55,840 --> 00:01:00,190
after they have been woken up from
a wait on an interrupt, for instance.

18
00:01:00,190 --> 00:01:03,010
A thread will enter the ready
queue when it's created, so

19
00:01:03,010 --> 00:01:05,980
when somebody has forked a new thread.

20
00:01:05,980 --> 00:01:09,670
And also a thread that, maybe, was
interrupted while executing on the CPU

21
00:01:09,670 --> 00:01:13,610
because the CPU has to be
shared with other threads.

22
00:01:13,610 --> 00:01:16,540
That thread, it was ready,
it was executing on the CPU.

23
00:01:16,540 --> 00:01:20,800
So, after it has been interrupted,
it continues to be ready so

24
00:01:20,800 --> 00:01:23,138
it will immediately go
into the ready queue.

25
00:01:23,138 --> 00:01:24,340
So to schedule something,

26
00:01:24,340 --> 00:01:28,740
the scheduler will have to look at all
of the tasks in the ready queue and

27
00:01:28,740 --> 00:01:33,330
decide which is the one that it
will dispatch to run on the CPU.

28
00:01:33,330 --> 00:01:37,330
Whenever the CPU becomes idle,
we have to run the scheduler.

29
00:01:37,330 --> 00:01:40,980
For instance, if a thread that was
executing on the CPU makes an I/O

30
00:01:40,980 --> 00:01:45,970
request and now it has to wait in the
I/O queue for that particular device,

31
00:01:45,970 --> 00:01:50,820
the CPU's idle, what happens at that
moment, we run the OS scheduler.

32
00:01:50,820 --> 00:01:55,230
The goal is to pick another task to run
on the CPU as soon as possible, and

33
00:01:55,230 --> 00:01:57,730
not to keep the CPU idle for too long.

34
00:01:57,730 --> 00:02:02,260
Whenever a new task becomes ready,
so a task that was waiting on an I/O

35
00:02:02,260 --> 00:02:06,470
operation, or was waiting on
an interrupt, or some kind of signal.

36
00:02:06,470 --> 00:02:09,810
Or whenever a brand new task
was created for the first time.

37
00:02:09,810 --> 00:02:13,200
For all of these reasons, again,
we need to run the scheduler.

38
00:02:13,200 --> 00:02:17,810
The goal is to check whether any of
these tasks are of higher importance and

39
00:02:17,810 --> 00:02:21,850
therefore should interrupt the task
that's currently executing on the CPU.

40
00:02:21,850 --> 00:02:25,630
A common way how schedulers
share the CPU is to give

41
00:02:25,630 --> 00:02:30,110
each of the tasks in the system
some amount of time on the CPU.

42
00:02:30,110 --> 00:02:34,690
So, when a time slice expires, when
a running thread has used up its time on

43
00:02:34,690 --> 00:02:39,280
the CPU, then, that's another time
when we need to run the scheduler so

44
00:02:39,280 --> 00:02:42,400
as to pick the next task
to be scheduled on the CPU.

45
00:02:42,400 --> 00:02:46,290
Once the scheduler selects
a thread to be scheduled,

46
00:02:46,290 --> 00:02:49,370
the thread is then
dispatched onto the CPU.

47
00:02:49,370 --> 00:02:52,130
What really happens is we
perform a context switch

48
00:02:52,130 --> 00:02:55,180
to enter the context of
the newly selected thread.

49
00:02:55,180 --> 00:02:56,880
And then we have to enter user mode,

50
00:02:56,880 --> 00:03:00,090
then set the program counter
appropriately to point to the next

51
00:03:00,090 --> 00:03:04,110
instruction that needs to be executed
from the newly selected thread.

52
00:03:04,110 --> 00:03:05,370
And then we're ready to go.

53
00:03:05,370 --> 00:03:08,900
The new thread starts
executing on the CPU.

54
00:03:08,900 --> 00:03:12,030
So in summary,
the objective of the OS scheduler is to

55
00:03:12,030 --> 00:03:17,510
choose the next task to run from
the queue of ready tasks in the system.

56
00:03:17,510 --> 00:03:21,210
The first question that comes to mind
is, which task should be selected?

57
00:03:21,210 --> 00:03:22,710
How do we know this?

58
00:03:22,710 --> 00:03:25,610
The answer to that will depend
on the scheduling policy or

59
00:03:25,610 --> 00:03:29,020
the scheduling algorithm that
is executed by the OS scheduler.

60
00:03:29,020 --> 00:03:32,510
We will discuss several
such algorithms next.

61
00:03:32,510 --> 00:03:36,470
Another immediate question is,
how does the scheduler accomplish this?

62
00:03:36,470 --> 00:03:40,600
How does it perform whatever
algorithm it needs to execute?

63
00:03:40,600 --> 00:03:44,740
The details of the implementation of
the scheduler will very much depend on

64
00:03:44,740 --> 00:03:49,860
the runqueue on the data structure that
we use to implement this ready queue.

65
00:03:49,860 --> 00:03:51,510
That's called the runqueue.

66
00:03:51,510 --> 00:03:53,090
The design of the runqueue and

67
00:03:53,090 --> 00:03:56,130
the scheduling algorithm
are tightly coupled.

68
00:03:56,130 --> 00:03:58,750
We will see that certain
scheduling algorithms,

69
00:03:58,750 --> 00:04:02,550
they demand a different type of
runqueue, different data structure.

70
00:04:02,550 --> 00:04:06,540
And also that, the design of
the runqueue, it may limit in certain

71
00:04:06,540 --> 00:04:10,810
ways what kinds of scheduling
algorithms we can support efficiently.

72
00:04:10,810 --> 00:04:14,470
So, the rest of the lecture will focus
on reviewing different scheduling

73
00:04:14,470 --> 00:04:17,011
algorithms and runqueue data structures.
