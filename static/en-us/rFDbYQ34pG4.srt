1
00:00:00,000 --> 00:00:03,000
In this problem, singly-hyphenated words,

2
00:00:03,000 --> 00:00:07,000
we're going to test our ability to use the or operator

3
00:00:07,000 --> 00:00:11,000
and the ability to group regular expressions.

4
00:00:11,000 --> 00:00:15,000
And here we're going to write a regular expression

5
00:00:15,000 --> 00:00:21,000
that matches 2 types of words, normal words, such as alice and bob,

6
00:00:21,000 --> 00:00:26,000
and also those with a single hyphen, such as super-irvin.

7
00:00:26,000 --> 00:00:31,000
We, however, won't perfectly match a string such as super-mega-irvin,

8
00:00:31,000 --> 00:00:34,000
so we need to write a regular expression that perfectly matches alice,

9
00:00:34,000 --> 00:00:37,000
bob, super-irvin but doesn't match super-mega-irvin.

10
00:00:37,000 --> 00:00:42,000
Well, one way to think about it is we have 2 types of regular expressions,

11
00:00:42,000 --> 00:00:48,000
one that matches normal words, or one that matches a word with a single hyphen.

12
00:00:48,000 --> 00:00:50,000
Let's do one at a time.

13
00:00:50,000 --> 00:00:52,000
First let's do the one that matches a normal word.

14
00:00:52,000 --> 00:00:57,000
This regular expression will match 1 or more occurrences of lower-case letters.

15
00:00:57,000 --> 00:01:01,000
Okay, let's move on to the single hyphenated words.

16
00:01:01,000 --> 00:01:04,000
A single hyphenated word has 3 parts,

17
00:01:04,000 --> 00:01:08,000
a word, a hyphen, and another word,

18
00:01:08,000 --> 00:01:14,000
so here I match a word, a hyphen, and then another word.

19
00:01:14,000 --> 00:01:17,000
Really I want to match either of these,

20
00:01:17,000 --> 00:01:20,000
and in order to do this, I'm going to have to group them, and in Python

21
00:01:20,000 --> 00:01:23,000
we group them using parentheses, and don't forget

22
00:01:23,000 --> 00:01:26,000
the silly question mark colon notation as well.

23
00:01:26,000 --> 00:01:29,000
And here we go as a regular expression.

24
00:01:29,000 --> 00:01:32,000
Notice that I listed the hyphenated words first

25
00:01:32,000 --> 00:01:35,000
because the way find all works is that it first checks

26
00:01:35,000 --> 00:01:39,000
to see if this matches the left side of the operator and then the right side.

27
00:01:39,000 --> 00:01:44,000
And if I'm running find all, I'd rather have it return the hyphenated word

28
00:01:44,000 --> 00:01:50,000
super-irvin instead of first checking if the word matches just super,

29
00:01:50,000 --> 00:01:55,000
then seeing that hyphen doesn't match anything, and then returning irvin.

30
00:01:55,000 --> 99:59:59,999
I'd rather get the whole thing, super-irvin.
