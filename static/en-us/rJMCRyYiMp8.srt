1
00:00:00,000 --> 00:00:04,000
We've seen before that there are three ways to build up the chart.

2
00:00:04,000 --> 00:00:07,000
One is by calling the closure or predicting.

3
00:00:07,000 --> 00:00:13,000
The next is by shifting, and the third is by performing reductions.

4
00:00:13,000 --> 00:00:17,000
I'm going to have you do all three, and this is the second one--shifting.

5
00:00:17,000 --> 00:00:19,000
Let's say we're currently looking at chart sub i,

6
00:00:19,000 --> 00:00:24,000
and there is a state in there--x goes to ab dot cd from j.

7
00:00:24,000 --> 00:00:27,000
This time we're going to look at the input tokens,

8
00:00:27,000 --> 00:00:31,000
and they're in a list called just "tokens."

9
00:00:31,000 --> 00:00:35,000
I'm going to have the following code in our parser framework.

10
00:00:35,000 --> 00:00:40,000
We're going to figure out if there is a candidate next state by calling a special procedure "shift."

11
00:00:40,000 --> 00:00:45,000
Shift gets to see the tokens--the entire input, which token we're on,

12
00:00:45,000 --> 00:00:51,000
also which chart state we're on, x, ab, cd, and j, the current state we're considering.

13
00:00:51,000 --> 00:00:58,000
Based on that there may either be a possible shift or there might not be.

14
00:00:58,000 --> 00:01:02,000
Shift will either return None, at which point there is nothing to do,

15
00:01:02,000 --> 00:01:08,000
or it will return a single new parsing state that presumably involved shifting over the c

16
00:01:08,000 --> 00:01:11,000
if c matched up with the ith token.

17
00:01:11,000 --> 00:01:15,000
Then we'd add that to the chart in position i + 1, the correct place,

18
00:01:15,000 --> 00:01:18,000
and we'll keep track of whether there have been any changes.

19
00:01:18,000 --> 99:59:59,999
You should write shift.
