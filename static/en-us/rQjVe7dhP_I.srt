1
00:00:00,120 --> 00:00:02,980
Hopefully the lesson one, stage one wasn't too difficult, but

2
00:00:02,980 --> 00:00:04,460
let's work through the solution here.

3
00:00:04,460 --> 00:00:09,605
First, in defining your execute method, scroll down to the execute method,

4
00:00:09,605 --> 00:00:14,740
uncomment the line that takes in a tuple, gets the string at position zero,

5
00:00:14,740 --> 00:00:16,309
and names it word.

6
00:00:16,309 --> 00:00:18,770
We check if the word is present in the map.

7
00:00:18,770 --> 00:00:21,283
If it's not present add the word with the count of one.

8
00:00:21,283 --> 00:00:28,794
Countmap.put(word,1) else the word is already there, hence get the count.

9
00:00:28,794 --> 00:00:33,873
Integer val equals countMap.get(word) and increment the count and

10
00:00:33,873 --> 00:00:35,750
save it to the map.

11
00:00:35,750 --> 00:00:40,100
With countMap.put, word, and increment the value by one.

12
00:00:40,100 --> 00:00:42,590
After countMap is updated, emit the word and

13
00:00:42,590 --> 00:00:47,940
count to the output collector by uncommenting the line, emit collector.

14
00:00:47,940 --> 00:00:53,350
That takes in the values, word and countMap.get, word, which is our count.

15
00:00:53,350 --> 00:00:57,480
Once that's completed in part two of three, we need to scroll down to our

16
00:00:57,480 --> 00:01:03,130
declareOutputFields method and simply uncomment the outputFieldsDeclare,

17
00:01:03,130 --> 00:01:08,370
that calls method declare with new fields word and count that we just emitted.

18
00:01:08,370 --> 00:01:13,070
Finally, for part three of three, scroll down to our topology builder section

19
00:01:13,070 --> 00:01:18,990
and here we have our builder.setBolt, with an ID report bolt,

20
00:01:18,990 --> 00:01:23,370
which is a new report bolt with a parallelism of one.

21
00:01:24,390 --> 00:01:28,320
Finally, remember from our quiz that we want a global grouping, so

22
00:01:28,320 --> 00:01:31,000
we have .globalGrouping.

23
00:01:31,000 --> 00:01:34,680
Which takes in a component ID, CountBolt.

24
00:01:34,680 --> 00:01:40,730
To visualize this, this is our Spout, here is our CountBolt and our ReportBolt.

25
00:01:40,730 --> 00:01:43,240
Using the same color scheme as our quiz.

26
00:01:43,240 --> 00:01:47,450
Note we have our field grouping connecting the Spout to our Bolt,

27
00:01:47,450 --> 00:01:50,590
CountBolt and finally a global grouping.

28
00:01:50,590 --> 00:01:55,270
Which takes all streams from the count bolt to the report bolt, and

29
00:01:55,270 --> 00:01:59,150
finally our report bolt connects to our visualization.

30
00:01:59,150 --> 00:02:03,100
With your Flask microserver running, go to your command line, lesson2 stage1.

31
00:02:03,100 --> 00:02:05,720
Do a mvn package.

32
00:02:05,720 --> 00:02:08,949
Once you see build success, I'm going to clear this.

33
00:02:08,949 --> 00:02:15,310
Submit your topology using the command storm jar target/udacity hyphen.

34
00:02:15,310 --> 00:02:17,180
Remember that we, and hit tab.

35
00:02:17,180 --> 00:02:19,575
Remember we want the dependencies in our jar.

36
00:02:19,575 --> 00:02:27,240
Udacity.storm.WordCountTopology with camel case.

37
00:02:27,240 --> 00:02:32,110
And we see as our storm topology runs, we switch to our visualization, and

38
00:02:32,110 --> 00:02:36,430
we see that the name and size are linked to the count.

39
00:02:36,430 --> 00:02:41,230
So as our topology runs longer, the count increases and the names get bigger.

40
00:02:42,390 --> 00:02:44,890
Great. Congratulations on finishing stage 1.

41
00:02:44,890 --> 00:02:46,762
Your coach now match stage 2.
