1
00:00:00,670 --> 00:00:04,150
Testing takes time, so why do it?

2
00:00:04,150 --> 00:00:06,480
The testing process has a few goals.

3
00:00:06,480 --> 00:00:10,430
The first is that the software matches
whatever requirements it was supposed to

4
00:00:10,430 --> 00:00:13,920
meet, these are usually outlined
in the specifications document.

5
00:00:13,920 --> 00:00:17,100
Second, testing is meant
to ensure software quality.

6
00:00:17,100 --> 00:00:20,760
And finally you test software so
that if you find a bug and

7
00:00:20,760 --> 00:00:24,040
you resolve it, you know that
it's not going to come back.

8
00:00:24,040 --> 00:00:28,480
Unfortunately for all of these, they're
actually impossible to guarantee.

9
00:00:28,480 --> 00:00:33,380
It's not actually possible to test all
ways to use an application, for example,

10
00:00:33,380 --> 00:00:35,830
to test in all environment settings.

11
00:00:35,830 --> 00:00:39,090
You also can't prove that
a program is bug free.

12
00:00:39,090 --> 00:00:42,550
What is possible is that you can
show the existence of a bug, and

13
00:00:42,550 --> 00:00:44,780
then once you've found that bug,
remove it.

14
00:00:46,000 --> 00:00:48,750
The first goal when deciding
any sort of testing suite

15
00:00:48,750 --> 00:00:52,080
is to make sure that the desired
functionality works correctly.

16
00:00:52,080 --> 00:00:53,930
Given that you can't test everything,

17
00:00:53,930 --> 00:00:57,250
you first focus on testing
a positive scenario.

18
00:00:57,250 --> 00:01:01,990
This is a scenario where everything goes
as expected and there are no errors.

19
00:01:01,990 --> 00:01:05,740
Because of that, this is called testing
a happy path through the software.

20
00:01:05,740 --> 00:01:08,280
But of course, it's also important
to test what happens when

21
00:01:08,280 --> 00:01:10,440
incorrect inputs are given.

22
00:01:10,440 --> 00:01:13,160
You never know what users are going to
input into your system, so

23
00:01:13,160 --> 00:01:15,110
you have to test this as well.

24
00:01:15,110 --> 00:01:17,710
Another important
testing methodology idea

25
00:01:17,710 --> 00:01:20,950
is to ensure that once you
fix a bug it doesn't return.

26
00:01:20,950 --> 00:01:23,090
It gets annoying for both users and

27
00:01:23,090 --> 00:01:27,380
the development team to keep fixing
the same bug over and over again.

28
00:01:27,380 --> 00:01:30,930
So, if a bug is found in
the manual testing process once,

29
00:01:30,930 --> 00:01:33,940
the developer should come along and
fix that bug.

30
00:01:33,940 --> 00:01:37,960
The developer should then also add test
cases to the automated testing process.

31
00:01:37,960 --> 00:01:40,930
This way you know that the bug will
not be reintroduced at a later time.
