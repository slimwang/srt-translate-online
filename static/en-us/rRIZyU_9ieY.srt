1
00:00:00,150 --> 00:00:04,694
So to do this, we'll define a Dish class, that both the main dish and Appetizer

2
00:00:04,694 --> 00:00:08,927
classes inherit from. And Dish will have both init and str methods for

3
00:00:08,927 --> 00:00:13,330
initializing and representing the Dish as a string. In both main Dish and

4
00:00:13,330 --> 00:00:17,530
Appetizer, we're going to, to need to override those methods to provide the

5
00:00:17,530 --> 00:00:22,250
additional behavior that we need for the extra attributes of sides and serves.

6
00:00:22,250 --> 00:00:25,822
So that's one approach. Let me show you what that looks like in code. Here's

7
00:00:25,822 --> 00:00:29,690
what that looks like in code. We're defining in the Dish class, its base class

8
00:00:29,690 --> 00:00:33,782
is object, it's an init method, initializes all these attributes and we've got

9
00:00:33,782 --> 00:00:37,811
the two with default values. And its str class turns it into the string using

10
00:00:37,811 --> 00:00:41,262
format like this. This is a little complicated, but you've seen this code

11
00:00:41,262 --> 00:00:45,152
before, so I won't describe it again here. Then the MainDish class is a subclass

12
00:00:45,152 --> 00:00:50,580
of Dish, so its base class is Dish. It uses super here. It uses super to get the

13
00:00:50,580 --> 00:00:55,576
Dish in it method and adds sides to it. And in the str method, it uses the super

14
00:00:55,576 --> 00:01:00,282
classes str method, and it adds the extra information about the sides. The

15
00:01:00,282 --> 00:01:04,452
appetizer cost is similar, it also inherits from Dish. In this case, we're

16
00:01:04,452 --> 00:01:08,819
adding Serves and we're adding the information about Serves. We avoided a lot of

17
00:01:08,819 --> 00:01:13,629
duplication by using the super str method and the super init method to inherit

18
00:01:13,629 --> 00:01:17,382
those from the Dish class. If you don't like all the supers, there's another way

19
00:01:17,382 --> 00:01:21,840
we might do this. We still have the same class hierachy and we still have the

20
00:01:21,840 --> 00:01:26,282
same init methods. But, instead of overriding str in main Dish and ppetizer,

21
00:01:26,282 --> 00:01:30,530
we're going to have an extras method. And what extras will do is print all the

22
00:01:30,530 --> 00:01:34,840
extra information about that particular type of Dish. So here's what that code

23
00:01:34,840 --> 00:01:38,544
looks like. This is all the same. We've changed the str method for a Dish by

24
00:01:38,544 --> 00:01:43,017
adding extras to it, and extras is the result of calling the extras method on

25
00:01:43,017 --> 00:01:46,761
self. Now, we can define MainDish like this. Note that we don't need a str

26
00:01:46,761 --> 00:01:50,706
method in MainDish. We inherit exactly the str method as defined in Dish and we

27
00:01:50,706 --> 00:01:54,887
add extras that prints out the number of sides. Similarly, we can define

28
00:01:54,887 --> 00:01:58,688
Appetizer. We don't need a str method and define extras to return a string

29
00:01:58,688 --> 00:02:02,090
giving information about how many people it serves. Which of these two is

30
00:02:02,090 --> 00:02:06,528
better? Matter of opinion, I think this one is not yet better. The way to make

31
00:02:06,528 --> 00:02:09,876
this one better would be to use has attribute to make it so it works for other

32
00:02:09,876 --> 00:02:13,403
kinds of dishes which we haven't defined yet that don't even have an extras.
