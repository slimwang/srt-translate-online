1
00:00:00,410 --> 00:00:03,481
The two most important
kinds of objects in

2
00:00:03,481 --> 00:00:07,792
a Linux server's filesystem
are files and directories.

3
00:00:07,792 --> 00:00:10,380
You've been working with files
already throughout this course.

4
00:00:10,380 --> 00:00:12,539
So files are probably nothing new.

5
00:00:12,539 --> 00:00:16,273
And directories are almost exactly
the same as folders that you've probably

6
00:00:16,273 --> 00:00:18,470
seen on a Windows or Mac system.

7
00:00:18,470 --> 00:00:20,660
They're named containers
that can hold files and

8
00:00:20,660 --> 00:00:23,540
can also be nested inside
other directories.

9
00:00:23,540 --> 00:00:27,030
Every object in the file system
has a name or a file name.

10
00:00:27,030 --> 00:00:30,081
The rules for file and directory
names in Linux are pretty flexible.

11
00:00:30,081 --> 00:00:33,558
You can have spaces and filenames,
you can have dots, you can at signs or

12
00:00:33,558 --> 00:00:35,320
accent marks or whatever.

13
00:00:35,320 --> 00:00:37,790
The only thing you can't
have is the slash character.

14
00:00:38,800 --> 00:00:42,100
And in the shell, when you write a file
name that contains spaces or certain

15
00:00:42,100 --> 00:00:46,800
punctuation marks, you have to put
the file name in quotes, or else precede

16
00:00:46,800 --> 00:00:51,160
each one of the special characters
including spaces with the back slash.

17
00:00:51,160 --> 00:00:52,601
So for instance,

18
00:00:52,601 --> 00:00:57,891
if you had a file whose actual file
name was Great space Filename!

19
00:00:57,891 --> 00:01:03,792
When you're talking about
that file in the shell,

20
00:01:03,792 --> 00:01:09,829
you would write it either
as 'Great Filename!' or

21
00:01:09,829 --> 00:01:12,728
as Great\ Filename\!

22
00:01:12,728 --> 00:01:15,665
This is called Quoting and
this is called Escaping.

23
00:01:15,665 --> 00:01:19,174
The reason for this is that these
characters all have special meanings to

24
00:01:19,174 --> 00:01:22,798
the shell, and putting a backslash in
front of them tells the shell to treat

25
00:01:22,798 --> 00:01:25,100
them as ordinary characters.

26
00:01:25,100 --> 00:01:29,764
Directories are nested inside
each other, with the outermost or

27
00:01:29,764 --> 00:01:34,410
topmost being the file system root or
root directory.

28
00:01:34,410 --> 00:01:36,740
It's very common for
there to be multiple discs or

29
00:01:36,740 --> 00:01:39,140
disc partitions on a Linux system.

30
00:01:39,140 --> 00:01:42,788
Unlike on Windows, there aren't separate
roots for each disc, like C: or

31
00:01:42,788 --> 00:01:43,422
D: drives.

32
00:01:43,422 --> 00:01:47,590
There's just one filesystem root
at the top of the filesystem.

33
00:01:47,590 --> 00:01:51,930
This means that no matter what directory
a file is in, you can unambiguously

34
00:01:51,930 --> 00:01:56,740
refer to that file by giving the full
path which starts at the root and

35
00:01:56,740 --> 00:02:00,410
lists each directory on the way
down to the individual file.

36
00:02:00,410 --> 00:02:03,640
The directory names
are separated by slashes.

37
00:02:03,640 --> 00:02:07,930
So, for instance,
here's a file called auth.log,

38
00:02:07,930 --> 00:02:13,250
which is inside a directory called log,
which is inside a directory called var,

39
00:02:13,250 --> 00:02:15,130
which is inside the root directory.

40
00:02:15,130 --> 00:02:20,605
So to give the full path name,

41
00:02:20,605 --> 00:02:29,152
we start at the root /var/log/auth.log.

42
00:02:29,152 --> 00:02:32,240
Now if you're coming from Windows,
be careful.

43
00:02:32,240 --> 00:02:36,497
Linux uses the forward slash
to separate directories,

44
00:02:36,497 --> 00:02:39,401
whereas Windows uses the back slash.

45
00:02:39,401 --> 00:02:43,643
The forward slash is the same
one that you see in URLs,

46
00:02:43,643 --> 00:02:46,850
like https://udacity.com, or for

47
00:02:46,850 --> 00:02:52,260
writing fractions like 2/3,
or in various other uses.

48
00:02:52,260 --> 00:02:53,349
So now it's your turn.

49
00:02:53,349 --> 00:02:57,209
For each one of these other files,
fill in the full path name based on

50
00:02:57,209 --> 00:03:00,140
the directory structure and
the filename itself.
