1
00:00:00,360 --> 00:00:03,330
Let's quickly review what
we've learned about arrays.

2
00:00:03,330 --> 00:00:06,190
We learned that arrays
are ordered lists of items and

3
00:00:06,190 --> 00:00:08,450
that they can have duplicates.

4
00:00:08,450 --> 00:00:11,640
For example,
here's my array of favorite things and

5
00:00:11,640 --> 00:00:16,160
you can see that raindrops on roses
appears twice and that's totally okay.

6
00:00:16,160 --> 00:00:20,420
Because arrays are ordered we're
able to access its items by index.

7
00:00:20,420 --> 00:00:24,290
You can see here that we're accessing
the first item with the index zero.

8
00:00:24,290 --> 00:00:27,800
And we're accessing the fourth
item with the index three.

9
00:00:27,800 --> 00:00:31,230
We also went over three different
ways to initialize an array.

10
00:00:31,230 --> 00:00:35,670
First, using somewhat verbose syntax,
second by specifying the item type

11
00:00:35,670 --> 00:00:39,700
between square brackets, and
third using an array literal.

12
00:00:39,700 --> 00:00:42,910
We also saw that in Swift,
arrays have types.

13
00:00:42,910 --> 00:00:45,780
Meaning that they can hold
any type you desire, but

14
00:00:45,780 --> 00:00:49,100
they can't hold two items
that have different types.

15
00:00:49,100 --> 00:00:50,280
For example,

16
00:00:50,280 --> 00:00:54,660
I can't add a variable of type string
to an array of type light switch.

17
00:00:54,660 --> 00:00:56,920
We also practiced using
Array operations,

18
00:00:56,920 --> 00:00:59,260
lets see those one more time.

19
00:00:59,260 --> 00:01:01,340
Here I have an array of musicians, and

20
00:01:01,340 --> 00:01:06,110
I can append an artist to the end of my
musicians array using the method append.

21
00:01:06,110 --> 00:01:11,000
And I can insert another artist at
a particular index using insert atIndex.

22
00:01:11,000 --> 00:01:15,180
And over here you can see
Dej Loaf at index two.

23
00:01:15,180 --> 00:01:19,220
To remove an item from the array,
I use removeAtIndex.

24
00:01:19,220 --> 00:01:22,840
If I remove the item at index three,
you can see Flo Rida is removed.

25
00:01:23,970 --> 00:01:28,290
If I want to know how many items are in
my array, I use the count method.

26
00:01:28,290 --> 00:01:29,380
Right now, I've got five.

27
00:01:30,630 --> 00:01:34,400
And finally, if I want to retrieve and
item at a particular index.

28
00:01:34,400 --> 00:01:37,450
I can use subscript syntax, like so.

29
00:01:37,450 --> 00:01:40,690
And here we can see the third
item is "Dej Loaf".

30
00:01:40,690 --> 00:01:44,140
We also went over copying and
concatenating arrays.

31
00:01:44,140 --> 00:01:46,830
Array concatenation in
Swift is super convenient.

32
00:01:46,830 --> 00:01:49,750
We just use the plus operator and
we're good to go.

33
00:01:49,750 --> 00:01:50,920
To copy an array,

34
00:01:50,920 --> 00:01:54,720
we just define our copy to be equal
to the value of the original.

35
00:01:54,720 --> 00:01:57,910
Arrays are value types,
which means that here array and

36
00:01:57,910 --> 00:02:01,950
arrayCopy represent
two distinct entities.

37
00:02:01,950 --> 00:02:04,300
If I change a value in arrayCopy,

38
00:02:04,300 --> 00:02:07,780
you can see that the values
in array remain the same.

39
00:02:07,780 --> 00:02:09,560
There are exceptions to this.

40
00:02:09,560 --> 00:02:12,880
Which you'll learn more about
in this session on classes.

41
00:02:12,880 --> 00:02:13,610
And finally,

42
00:02:13,610 --> 00:02:17,015
we talked about how to use fast
enumeration to loop through an array.

43
00:02:17,015 --> 00:02:20,170
For-in loops take the general form,

44
00:02:20,170 --> 00:02:24,720
four item in collection and
then between curly braces,

45
00:02:24,720 --> 00:02:28,360
the statement that you want to execute
on each item in the collection.

46
00:02:28,360 --> 00:02:33,330
For example, to find the sum of all
the n's in this array we just type for

47
00:02:33,330 --> 00:02:37,190
value in int array and
this statement adding

48
00:02:37,190 --> 00:02:41,430
int to the sum will be executed for
each member of the collection.

49
00:02:41,430 --> 00:02:44,250
You can see in the playground
sidebar that this statement is being

50
00:02:44,250 --> 00:02:46,020
executed five times.

51
00:02:46,020 --> 00:02:47,330
And here we can see the sum.
