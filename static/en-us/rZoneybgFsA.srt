1
00:00:00,000 --> 00:00:03,809
This first example is pretty much the same thing as we already saw, right?

2
00:00:03,809 --> 00:00:07,250
Every thread is going to be reading from s of i -1 and then writing

3
00:00:07,250 --> 00:00:10,780
the result in the s of i, for it's own value of i.

4
00:00:10,780 --> 00:00:12,579
And there's nothing in this statement to guarantee

5
00:00:12,579 --> 00:00:15,578
that all of these reads complete before any of these rights complete.

6
00:00:15,578 --> 00:00:20,964
And since they can be one thread's s of i sub 1 is another thread's s of i,

7
00:00:20,964 --> 00:00:24,394
then there's absolutely the potential for a collision here.

8
00:00:24,394 --> 00:00:28,862
The correct way to write this, as before, would be something like this.

9
00:00:28,862 --> 00:00:31,630
Where we go ahead and insert a syncthreads

10
00:00:31,630 --> 00:00:34,582
and a temporary variable to separate the read and the write.

11
00:00:34,582 --> 00:00:35,933
So what about this second example?

12
00:00:35,933 --> 00:00:38,413
Here, what this if statement does is it basically insures

13
00:00:38,413 --> 00:00:44,477
that only the odd threads are going to try to read from s of i sub 1 and write to s sub i.

14
00:00:44,477 --> 00:00:48,917
You think about this, thread 1 is going to be reading from location 0

15
00:00:48,917 --> 00:00:51,423
and then writing to location 1.

16
00:00:51,423 --> 00:00:52,820
Thread 2 does nothing.

17
00:00:52,820 --> 00:00:58,424
Thread 3 reads from location 2 and writes to location 3.

18
00:00:58,424 --> 00:01:05,007
Thread 4 does nothing, thread 5 reads from location 4 and writes to location 5 and so on.

19
00:01:05,007 --> 00:01:07,387
So in this case there are no conflicts so this code

20
00:01:07,387 --> 00:01:10,824
is actually correct even without any additional internal sync threads.

21
00:01:10,824 --> 00:01:13,524
Our final example is, again, not correct.

22
00:01:13,524 --> 00:01:15,560
It's similar to the first one.

23
00:01:15,560 --> 00:01:20,134
Every thread is going to read from locations I - 1, I, and I + 1.

24
00:01:20,134 --> 00:01:24,337
It's going to do a little math, and then it's going to store the result in location i.

25
00:01:24,337 --> 00:01:30,517
Clearly to make sure that all of these reads happen before any of these writes,

26
00:01:30,517 --> 00:01:32,545
we're going to need a sync threads.

27
00:01:32,545 --> 00:01:34,658
So to make this code correct, we'd have to do something like this.

28
00:01:34,658 --> 00:01:36,623
We'd have to use a temporary variable,

29
00:01:36,623 --> 00:01:41,798
do all of the reads, sync, do the write, sync, and then do the printf.

30
00:01:41,798 --> 00:01:43,994
The writes have to complete before this printf is done

31
00:01:43,994 --> 00:01:46,078
to make sure that the printf prints the correct value.
