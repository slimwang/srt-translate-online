1
00:00:00,270 --> 00:00:03,217
This can happen in a cross
site scripting attack.

2
00:00:03,217 --> 00:00:04,680
Here's an example.

3
00:00:04,680 --> 00:00:08,998
The user has logged into
a vulnerable site, naive.com.

4
00:00:08,998 --> 00:00:13,340
And his browser now stores
the cookie from naive.com.

5
00:00:13,340 --> 00:00:18,165
The user is then phished and
clicks a URL to visit evil.com.

6
00:00:18,165 --> 00:00:23,850
Evil.com returns a page that has
a hidden frame that forces the browser

7
00:00:23,850 --> 00:00:28,930
to visit naive.com and
invoke hello.cgi web application

8
00:00:28,930 --> 00:00:33,910
on naive.com with a malicious
script as the name of the user.

9
00:00:33,910 --> 00:00:38,700
When the user's browser displays
the HTML page from evil.com,

10
00:00:38,700 --> 00:00:42,284
he will be forced to visit naive.com and

11
00:00:42,284 --> 00:00:46,528
call hello.cgi with this malicious
script as the user's name.

12
00:00:46,528 --> 00:00:51,760
Hello.cgi at naive.com then
echoes the malicious script

13
00:00:51,760 --> 00:00:55,810
in the HTML page that is sent
back to the user's browser.

14
00:00:55,810 --> 00:01:01,400
The user's browser displays the HTML
page and executes the malicious script.

15
00:01:01,400 --> 00:01:05,420
The result is that the cookie
to naive.com is stolen and

16
00:01:05,420 --> 00:01:06,880
sent to the attacker.

17
00:01:06,880 --> 00:01:08,721
You may ask, so what?

18
00:01:08,721 --> 00:01:12,340
If evil.com gets
the cookie to naive.com?

19
00:01:12,340 --> 00:01:16,265
Because that cookie can include
session authentication information for

20
00:01:16,265 --> 00:01:17,410
naive.com.

21
00:01:17,410 --> 00:01:22,190
Therefore, by stealing the cookie the
attacker can now impersonate the user.
