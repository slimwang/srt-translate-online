1
00:00:00,130 --> 00:00:01,890
So, now that we have seen an example of

2
00:00:01,890 --> 00:00:05,740
memory ordering, let's do a memory ordering quiz. Let's

3
00:00:05,740 --> 00:00:09,630
say we have a load, a store, another pair

4
00:00:09,630 --> 00:00:12,646
of load and store. Let's say that all of

5
00:00:12,646 --> 00:00:15,844
the loads are cache misses, so what happens is

6
00:00:15,844 --> 00:00:19,790
in cycle one, we begin executing this load. And,

7
00:00:19,790 --> 00:00:22,280
send it to memory. And, it's going to take 40

8
00:00:22,280 --> 00:00:25,440
cycles for it to return a value. So, in cycle

9
00:00:25,440 --> 00:00:28,260
1, we send the request to memory. In cycle 41,

10
00:00:28,260 --> 00:00:31,590
we finally get the value, and now we have our

11
00:00:31,590 --> 00:00:33,810
R1. Let's say, that we are doing stores and loads

12
00:00:33,810 --> 00:00:37,160
out of order. So, although this store really cannot get

13
00:00:37,160 --> 00:00:40,750
the value until cycle 41, at least. We proceed with

14
00:00:40,750 --> 00:00:43,295
this load. So, in cycle 2, we send it to

15
00:00:43,295 --> 00:00:47,556
memory, in cycle 42, we get the value. This store

16
00:00:47,556 --> 00:00:50,664
waits for that value but this load is sent to memory

17
00:00:50,664 --> 00:00:53,869
in cycle 3 and, in cycle 43, it gets the value.

18
00:00:53,869 --> 00:00:54,857
[BLANK_AUDIO].

19
00:00:54,857 --> 00:00:58,039
Now what happens in cycle 42, is the store

20
00:00:58,039 --> 00:01:01,221
is finally done and then in cycle 43, this

21
00:01:01,221 --> 00:01:04,316
store is done and in cycle 44, this cycle

22
00:01:04,316 --> 00:01:08,210
is done. So, overall, we have taken 44 cycles

23
00:01:08,210 --> 00:01:11,226
to do this. But we have been doing loads

24
00:01:11,226 --> 00:01:14,538
prematurely as far as the stores are concerned because

25
00:01:14,538 --> 00:01:16,482
if this R2 plus 4 is equal to R3

26
00:01:16,482 --> 00:01:19,980
plus 0, then actually, this load should have waited.

27
00:01:21,040 --> 00:01:24,512
So we decided not to be totally safe and go and then we, we are assuming that

28
00:01:24,512 --> 00:01:28,058
there will be some recovery mechanism. Your task

29
00:01:28,058 --> 00:01:30,788
is to figure out when is each of these

30
00:01:30,788 --> 00:01:33,973
instructions sent to memory and when do we

31
00:01:33,973 --> 00:01:37,613
get the result from memory and what's the final

32
00:01:37,613 --> 00:01:40,740
cycle count if we do things in order? So,

33
00:01:40,740 --> 00:01:42,700
if loads and stores have to happen in order
