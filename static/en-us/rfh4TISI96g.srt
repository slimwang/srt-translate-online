1
00:00:00,540 --> 00:00:03,300
So now that we have an idea
of we might use this data

2
00:00:03,300 --> 00:00:06,880
let's actually build the maze
from our PList and our JSON file.

3
00:00:06,880 --> 00:00:10,110
Now before we do that if we
go back to our PList file I

4
00:00:10,110 --> 00:00:12,920
want to make sure everyone
notices that the root of this

5
00:00:12,920 --> 00:00:15,230
PList file is a dictionary
instead of an array.

6
00:00:17,440 --> 00:00:21,760
And this is also true of the JSON
file because the first and the last

7
00:00:21,760 --> 00:00:25,710
characters are these curly braces,
which are indicative of an JSON object,

8
00:00:25,710 --> 00:00:30,990
and a JSON object can be converted quite
easily into a dictionary and SWIFT.

9
00:00:30,990 --> 00:00:35,000
Now the first thing we've done is to
find this enum called MazeCellDirection.

10
00:00:35,000 --> 00:00:39,470
The most important thing about this enum
is that's it's raw type is of Int, and

11
00:00:39,470 --> 00:00:43,650
what this thing is going to allow us
to do is it's giving us values 0 and

12
00:00:43,650 --> 00:00:46,230
now it's going to be 1, 2, and 3, and

13
00:00:46,230 --> 00:00:49,980
these will map to the indexes
in these boolean arrays.

14
00:00:49,980 --> 00:00:53,910
So instead of having to refer
to the first element as the 0th

15
00:00:53,910 --> 00:00:58,250
element we can use easier to read names
like top, right, bottom and left.

16
00:00:58,250 --> 00:01:00,990
So this is a little trick
that I've used many of times.

17
00:01:00,990 --> 00:01:03,430
I'd recommend you to try it yourself.

18
00:01:03,430 --> 00:01:05,402
Then as we said both in the PList and

19
00:01:05,402 --> 00:01:08,060
the JSON file these
things are dictionaries.

20
00:01:08,060 --> 00:01:10,640
So we're going to start with
a function that contains a dictionary,

21
00:01:10,640 --> 00:01:14,690
and we're going to return a string, and
the string we're going to return is

22
00:01:14,690 --> 00:01:17,580
going to be really, really long, but
it's going to be what allows us to

23
00:01:17,580 --> 00:01:22,410
visualize it here as opposed to how we
visualized it in the actual maze app.

24
00:01:22,410 --> 00:01:25,490
The first thing we want to do is
make sure that the keys exist.

25
00:01:25,490 --> 00:01:28,030
So we need to have a rowCount,
a columnCount, and

26
00:01:28,030 --> 00:01:32,540
cellData, and if we have all of those
key value pairs, then let's make

27
00:01:32,540 --> 00:01:36,750
our maze string a really, really
long string representing the maze.

28
00:01:36,750 --> 00:01:39,380
Now this function here
the makeMazeString function

29
00:01:39,380 --> 00:01:41,580
is where all the magic happens.

30
00:01:41,580 --> 00:01:46,040
First thing we do is initialize a string
called finalstring to the empty string,

31
00:01:46,040 --> 00:01:49,650
and then what we're going to do
is we're going to loop through

32
00:01:49,650 --> 00:01:51,500
row by row to create our string.

33
00:01:52,500 --> 00:01:56,210
So imagine here that we're looking at
the first row, and for each row we're

34
00:01:56,210 --> 00:02:00,100
going to pass through the column data
three times, and I'll show you why.

35
00:02:00,100 --> 00:02:05,050
The first time we're going to create
the top section of the string.

36
00:02:05,050 --> 00:02:08,860
So that's created the top section
of this first row of grid cells.

37
00:02:08,860 --> 00:02:11,980
The second time we go through the
columns we're going to create the middle

38
00:02:11,980 --> 00:02:16,660
section, and there's our middle
section for this row of grid cells,

39
00:02:16,660 --> 00:02:20,340
and then the third time we'll
create the bottom section.

40
00:02:20,340 --> 00:02:23,790
And so for each pass that we're making
we're appending to the string, and

41
00:02:23,790 --> 00:02:28,240
when we get to the end of a section
to get to the new line here you'll

42
00:02:28,240 --> 00:02:30,390
notice that back in the code
we're adding a new line.

43
00:02:30,390 --> 00:02:31,250
So let's look at that now.

44
00:02:31,250 --> 00:02:32,810
And there you can see.

45
00:02:32,810 --> 00:02:38,070
So this is our first pass,
then our new line, our second pass,

46
00:02:38,070 --> 00:02:42,640
another new line, and then our
third pass, and the final new line.

47
00:02:42,640 --> 00:02:45,670
Now you may have noticed the special
case where if the row is one and

48
00:02:45,670 --> 00:02:49,970
the column is 0 we're going to
insert this little star icon for

49
00:02:49,970 --> 00:02:52,540
the middle section, and we'll see what
that looks like in just a second.

50
00:02:52,540 --> 00:02:55,510
And the reason we did this is mainly for
show.

51
00:02:55,510 --> 00:03:00,160
We just wanted to more closely mimics
one of the mazes from the maze app.

52
00:03:00,160 --> 00:03:03,440
Now these next two functions make top or
bottom section, and

53
00:03:03,440 --> 00:03:07,530
make middle section they're what
actually looks at the array of bools and

54
00:03:07,530 --> 00:03:09,630
determines which kind of
string we want to append.

55
00:03:10,630 --> 00:03:12,880
So is it a string that contained walls,
or

56
00:03:12,880 --> 00:03:15,380
a string that doesn't contain any walls.

57
00:03:15,380 --> 00:03:19,100
Then when we finally make it to the
bottom here we can create our maze in

58
00:03:19,100 --> 00:03:20,670
three lines of code.

59
00:03:20,670 --> 00:03:22,710
Not a bad day's work.

60
00:03:22,710 --> 00:03:27,060
So this looks similar to what we saw for
the student's PList example.

61
00:03:27,060 --> 00:03:31,450
We're creating the path to Maze1.PList,
and then we're loading this into

62
00:03:31,450 --> 00:03:36,210
a dictionary instead of an array,
and then we call our function

63
00:03:36,210 --> 00:03:39,770
VisualizeMaze with the dictionary
that we've loaded from the PList.
