1
00:00:00,170 --> 00:00:04,410
One thing that we didn't explain is what
actually ends up in the buffers that

2
00:00:04,410 --> 00:00:07,939
are being passed for transmission
among the client and the server.

3
00:00:07,939 --> 00:00:11,520
For instance, the server can
support multiple procedures.

4
00:00:11,520 --> 00:00:16,204
It is important to not just pass the
arguments but actually to include an RPC

5
00:00:16,204 --> 00:00:20,535
header that will uniquely identify what
is the procedure that's being called,

6
00:00:20,535 --> 00:00:23,635
the version number,
something about the requests so

7
00:00:23,635 --> 00:00:27,640
that we can detect repeated
requests on retries.

8
00:00:27,640 --> 00:00:31,770
Similar type of information will be
sent from the server back to the client,

9
00:00:31,770 --> 00:00:33,730
again, as part of the RPC header.

10
00:00:33,730 --> 00:00:36,460
So this is one component
of what actually goes on

11
00:00:36,460 --> 00:00:39,180
the wire in the packets
that are being transmitted.

12
00:00:39,180 --> 00:00:43,350
Then, clearly we have to put the actual
data, the actual arguments or

13
00:00:43,350 --> 00:00:45,580
results on the wire as well.

14
00:00:45,580 --> 00:00:50,810
However, as opposed to just directly
copying from memory into the packets,

15
00:00:50,810 --> 00:00:54,550
we have to first encode all of
the different data types for

16
00:00:54,550 --> 00:00:58,540
the arguments in the results into
a byte stream to serialize them

17
00:00:58,540 --> 00:01:01,780
in a way that depends on
the actual data type.

18
00:01:01,780 --> 00:01:06,510
It is important to have a specific
agreement on how this encoding is done

19
00:01:06,510 --> 00:01:10,830
so that the server has the ability
to interpret the byte stream and

20
00:01:10,830 --> 00:01:15,430
recreate the appropriate data
structure in the server address space.

21
00:01:15,430 --> 00:01:16,010
In order for

22
00:01:16,010 --> 00:01:20,440
the server to actually call the
procedure that implements the service.

23
00:01:20,440 --> 00:01:23,810
it needs to have the arguments
present in the server memory.

24
00:01:23,810 --> 00:01:25,820
That's why this step is necessary.

25
00:01:25,820 --> 00:01:27,190
Similar kind of requirement,

26
00:01:27,190 --> 00:01:31,290
we have also on the return when
the result is passed to the client.

27
00:01:31,290 --> 00:01:34,480
The client needs to be able to
look at this byte stream and

28
00:01:34,480 --> 00:01:38,020
figure out how it needs
to take that information

29
00:01:38,020 --> 00:01:41,100
in populated data structure
in the client memory.

30
00:01:41,100 --> 00:01:43,980
In some cases there may be
a one to one mapping between

31
00:01:43,980 --> 00:01:48,200
the in memory representation and
how the data is encoded in the packet.

32
00:01:48,200 --> 00:01:50,650
But in other cases that
may not be the case.

33
00:01:50,650 --> 00:01:54,975
And finally when all this information
is placed in a packet that needs to be

34
00:01:54,975 --> 00:01:59,275
preceded with the transport header with
the networking header that will specify

35
00:01:59,275 --> 00:02:03,875
the protocol, the destination address
and will make sure that on the client

36
00:02:03,875 --> 00:02:07,585
and on the server, all of the protocol
specific operations take place.
