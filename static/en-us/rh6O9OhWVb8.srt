1
00:00:00,007 --> 00:00:02,460
So, let's look at Litte's Law for GPUs.

2
00:00:02,460 --> 00:00:06,481
To recap, Litte's Law states that the number of useful bytes delivered

3
00:00:06,481 --> 00:00:10,952
is equal to the average latency of memory transaction times the bandwidth.

4
00:00:10,952 --> 00:00:13,496
Now, what are some implications of this?

5
00:00:13,496 --> 00:00:19,596
First of all, there's a minimum latency to take a signal or piece of data all the way from an SM

6
00:00:19,596 --> 00:00:26,967
to somewhere on the DRAM, or to take information from the DRAM and pull it into an SM.

7
00:00:26,967 --> 00:00:30,413
Okay, you can find the details for your particular GPU online,

8
00:00:30,413 --> 00:00:34,993
but in general any DRAM transaction is going to take hundreds of clock cycles.

9
00:00:34,993 --> 00:00:39,196
And by the way, this isn't a GPU thing. This is true of all modern processors.

10
00:00:39,196 --> 00:00:45,006
A clock cycle on a modern chip takes half a nanosecond, for example, on a 2 gigahertz chip.

11
00:00:45,006 --> 00:00:48,506
And even the speed of light--you know, light doesn't go very far in half a nanosecond.

12
00:00:48,506 --> 00:00:52,895
And electricity is even slower, especially on the tiny wires that you find in computer chips.

13
00:00:52,895 --> 00:00:56,314
So to go from somewhere inside the GPU off the chip,

14
00:00:56,314 --> 00:01:00,904
over a wire somewhere on the board into the DRAM, get a result,

15
00:01:00,904 --> 00:01:05,090
go all the way back, hundreds and hundreds of clock cycles, many, many nanoseconds.

16
00:01:05,090 --> 00:01:09,227
So this means that a thread that's trying to read or write global memory

17
00:01:09,227 --> 00:01:12,831
is going to have to wait 100s of clocks, and time that it could otherwise

18
00:01:12,831 --> 00:01:15,836
be spending by doing actual computation.

19
00:01:15,836 --> 00:01:19,662
And this, in turn, is why we have so many threads in flight.

20
00:01:19,662 --> 00:01:22,891
We deal with this high latency hundreds of clocks between

21
00:01:22,891 --> 00:01:28,596
memory accesses by having many, many threads that are able to run at any one time,

22
00:01:28,596 --> 00:01:32,461
so after one thread requests a piece of data from global memory

23
00:01:32,461 --> 00:01:38,033
or initiates a store to global memory, another thread can step in and do some computation.
