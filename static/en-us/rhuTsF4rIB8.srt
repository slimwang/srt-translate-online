1
00:00:00,000 --> 00:00:05,000
Every debugging session starts with the program that failed in which we need to debug.

2
00:00:05,000 --> 00:00:09,000
For this purpose, let's build a simple program that we're going to use as an ongoing example.

3
00:00:09,000 --> 00:00:13,000
The idea here is to write a function that takes an HTML input,

4
00:00:13,000 --> 00:00:18,000
that is text together with HTML markup and returns just the text.

5
00:00:18,000 --> 00:00:24,000
For instance, if the input is HTML markup for bold followed by text foo

6
00:00:24,000 --> 00:00:28,000
followed by HTML markup for end of bold, then we want to return just the text.

7
00:00:28,000 --> 00:00:34,000
Anything that is within this angle brackets should be stripped away. How do we deal with this?

8
00:00:34,000 --> 00:00:40,000
A simple way is to process the HTML input character by character and distinguish to modes.

9
00:00:40,000 --> 00:00:43,000
When we are in tag mode, we ignore all input.

10
00:00:43,000 --> 00:00:48,000
When we are in non-tag mode, we add all input to the output and we switch between these modes,

11
00:00:48,000 --> 00:00:52,000
tag and non-tag, by looking at these angle brackets in here.

12
00:00:52,000 --> 00:00:55,000
When we see the beginning of an HTML markup

13
00:00:55,000 --> 00:00:58,000
as you can see in this less than sign, we enter tag mode.

14
00:00:58,000 --> 00:01:03,000
When we see the end of an HTML markup that is a greater sign, we exit tag mode.

15
00:01:03,000 --> 00:01:09,000
We can describe the behavior of our function, that's a finite state machine with two states

16
00:01:09,000 --> 00:01:14,000
non-tag mode that is the processing text and tag mode that is we're ignoring HTML markup.

17
00:01:14,000 --> 00:01:20,000
When we see a less than sign, we go into tag mode. When we see a greater than sign, we exit tag mode.

18
00:01:20,000 --> 00:01:24,000
For all other inputs, we stay in the same state.

19
00:01:24,000 --> 00:01:27,000
When we are in non-tag mode and see any character

20
00:01:27,000 --> 00:01:32,000
that's not the beginning of an HTML markup, we add this character to the output.

21
00:01:32,000 --> 00:01:38,000
Whereas in tag mode, we simply ignore the HTML markup that we processed in here.

22
00:01:38,000 --> 00:01:44,000
So when we are processing this HTML input, initially we're in non-tag mode.

23
00:01:44,000 --> 00:01:48,000
Now, we see the beginning of an HTML markup, we go into tag mode.

24
00:01:48,000 --> 00:01:54,000
We see the B, which is not the end of a tag then we get the end of the tag,

25
00:01:54,000 --> 00:02:01,000
go back into non-tag mode, see the F add this, see the O add this, see the O, add this again.

26
00:02:01,000 --> 00:02:06,000
So our output now is foo and now again we see the beginning of a tag where the process

27
00:02:06,000 --> 00:02:11,000
or more specifically where we ignore all characters up to the closing tag

28
00:02:11,000 --> 00:02:13,000
and then our output is indeed the text inside the HTML markup.
