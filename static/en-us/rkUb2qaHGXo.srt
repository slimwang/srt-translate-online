1
00:00:00,450 --> 00:00:02,690
Before we turn to finding
a faster algorithm for

2
00:00:02,690 --> 00:00:04,540
finding a maximum matching,

3
00:00:04,540 --> 00:00:08,010
there's a classic theorem related to
matchings that we should talk about.

4
00:00:08,010 --> 00:00:10,260
This is the Frobenius-Hall theorem.

5
00:00:10,260 --> 00:00:14,540
For a subset of vertices,
say x, we'll use n of x to

6
00:00:14,540 --> 00:00:19,930
indicate the union of the neighbors
of the individual vertices in x.

7
00:00:19,930 --> 00:00:24,950
If we consider this graph here then the
neighbors of the orange vertices will be

8
00:00:24,950 --> 00:00:26,400
the green ones.

9
00:00:26,400 --> 00:00:29,250
Note that the fact
that if we call this x,

10
00:00:29,250 --> 00:00:33,320
then the size of the neighborhood
of x is larger than x.

11
00:00:33,320 --> 00:00:37,260
That this bodes well for the possibility
of finding a matching for

12
00:00:37,260 --> 00:00:40,460
all the vertices on
the left hand side here.

13
00:00:40,460 --> 00:00:43,320
At least, there's a chance that we
will be able to find a match for

14
00:00:43,320 --> 00:00:43,899
all these vertices.

15
00:00:45,060 --> 00:00:47,600
When this is not the case however,
as seen for

16
00:00:47,600 --> 00:00:51,050
these three vertices here,
then it is hopeless.

17
00:00:51,050 --> 00:00:53,030
Regardless of how we
matched the first two,

18
00:00:53,030 --> 00:00:56,130
there will be no remaining
candidates for the third vertex.

19
00:00:57,250 --> 00:01:01,250
We can make this intuition precise
with the Frobenius-Hall theorem,

20
00:01:01,250 --> 00:01:04,940
which follows from the max matching
min vertex cover argument.

21
00:01:04,940 --> 00:01:09,970
Given a bipartite graph G partitioned
into L and R, there exists

22
00:01:09,970 --> 00:01:15,990
a matching of size L if and only if for
every X with is a subset of L,

23
00:01:15,990 --> 00:01:20,840
the size of the neighborhood of
X is at least the size of X.

24
00:01:20,840 --> 00:01:23,160
The forward direction
is the simpler one.

25
00:01:23,160 --> 00:01:29,370
Let M be a matching of size L, and we'll
let x be a subset of the left hand side.

26
00:01:29,370 --> 00:01:36,230
We let y be the vertices on the right
hand side that x got matched to.

27
00:01:36,230 --> 00:01:39,870
Clearly, y is the same size as x, but

28
00:01:39,870 --> 00:01:43,930
then y is also a subset of
the neighborhood of x, and hence,

29
00:01:43,930 --> 00:01:46,740
the size of the neighborhood of
x Is at least the size of X.

30
00:01:46,740 --> 00:01:50,130
The other direction is
a little more challenging.

31
00:01:50,130 --> 00:01:51,370
Suppose not.

32
00:01:51,370 --> 00:01:53,820
We'll let M be a max matching,

33
00:01:53,820 --> 00:01:58,140
with cardinality strictly less than
the cardinality of the left-hand side.

34
00:01:59,260 --> 00:02:04,310
We let H be the set of vertices
reachable from an alternating path

35
00:02:04,310 --> 00:02:07,100
from the unmatched vertices in L.

36
00:02:07,100 --> 00:02:09,860
This is the same picture
used in the max, matching,

37
00:02:09,860 --> 00:02:11,640
min vertex cover argument.

38
00:02:11,640 --> 00:02:15,070
There's at least one unmatched
vertex here by our assumption.

39
00:02:16,600 --> 00:02:20,180
Well then the neighborhood
of the left hand side of H

40
00:02:20,180 --> 00:02:21,990
is equal to the right hand side of H.

41
00:02:23,180 --> 00:02:26,870
But this left hand side must be strictly
greater because there's at least

42
00:02:26,870 --> 00:02:28,950
one unmatched vertex.

43
00:02:28,950 --> 00:02:29,450
If you like,

44
00:02:29,450 --> 00:02:34,680
you can think about the matched vertices
on either side canceling each other out.

45
00:02:34,680 --> 00:02:37,730
And we're left with some non-0 number

46
00:02:37,730 --> 00:02:40,060
of unmatched vertices
on the left hand side.
