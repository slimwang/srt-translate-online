1
00:00:00,290 --> 00:00:02,860
One piece of functionality that's still missing from our

2
00:00:02,860 --> 00:00:05,810
Conference Central app is that so far there's no way

3
00:00:05,810 --> 00:00:09,050
for users to register to attend a conference. Although

4
00:00:09,050 --> 00:00:11,320
we see the register button in the UI, it doesn't

5
00:00:11,320 --> 00:00:13,530
do any good to click it because we haven't

6
00:00:13,530 --> 00:00:16,480
implemented the function that it calls. You're going to be

7
00:00:16,480 --> 00:00:20,270
adding that feature next. The process of registering for a

8
00:00:20,270 --> 00:00:23,140
conference involves several separate tasks,

9
00:00:23,140 --> 00:00:25,710
including updating the users profile.

10
00:00:25,710 --> 00:00:28,130
To know which conferences they have registered to

11
00:00:28,130 --> 00:00:30,500
attend, as well as decreasing the number of

12
00:00:30,500 --> 00:00:34,170
seats available for the conference. Also, what happens

13
00:00:34,170 --> 00:00:37,190
if there's only one seat left for the conference

14
00:00:37,190 --> 00:00:44,920
and several people try to register for it at the same time? Who gets it? How

15
00:00:44,920 --> 00:00:47,870
do we handle those potential conflicts? We're going

16
00:00:47,870 --> 00:00:50,740
to use transactions to ensure that all relevant entities

17
00:00:50,740 --> 00:00:53,260
get updated, or none of them do, and to make

18
00:00:53,260 --> 00:00:56,980
sure that only person can get the very last seat at

19
00:00:56,980 --> 00:01:00,280
a conference. We're going to use a property called conferences

20
00:01:00,280 --> 00:01:02,930
to attend to keep track of which conferences a user will

21
00:01:02,930 --> 00:01:05,140
attend, and this property is going to be on the

22
00:01:05,140 --> 00:01:08,990
profile entity. So in the profile class you'll need to add

23
00:01:08,990 --> 00:01:12,940
some things. You'll add the conference keys to attend field. This

24
00:01:12,940 --> 00:01:16,060
property contains the list of the keys for all the conferences

25
00:01:16,060 --> 00:01:19,350
that the user has registered to attend, and

26
00:01:19,350 --> 00:01:22,220
note that it's a list of strings. You're also

27
00:01:22,220 --> 00:01:25,490
going to need. Most likely to fix the

28
00:01:25,490 --> 00:01:28,710
import. You'll also need to define the get a

29
00:01:28,710 --> 00:01:31,900
method for this property to return a copy

30
00:01:31,900 --> 00:01:35,280
of the list, and rather than a regular get

31
00:01:35,280 --> 00:01:37,980
a method. What you'll need instead is a

32
00:01:37,980 --> 00:01:41,150
method that takes conference key and adds it to

33
00:01:41,150 --> 00:01:43,990
the existing list. So we're going to call that, add

34
00:01:43,990 --> 00:01:47,310
to conference key to attend, and this how you'll

35
00:01:47,310 --> 00:01:49,560
define it. You'll add the new conference key to

36
00:01:49,560 --> 00:01:52,240
the existing values. You'll also need to add a

37
00:01:52,240 --> 00:01:54,520
method to remove a value from conference keys to

38
00:01:54,520 --> 00:01:57,530
attend, in case the user decides to unregister from

39
00:01:57,530 --> 00:02:01,760
a conference. So basically the unregister from conference method

40
00:02:01,760 --> 00:02:06,220
simply removes the conference key from the existing values but

41
00:02:06,220 --> 00:02:08,850
it needs to check first that the conference key

42
00:02:08,850 --> 00:02:11,900
is already in the property and if not, throw

43
00:02:11,900 --> 00:02:15,330
an invalid conference key exception. I mean, basically you

44
00:02:15,330 --> 00:02:18,780
can't unregister from a conference that you haven't actually registered

45
00:02:18,780 --> 00:02:22,590
for, and in the conference api class, you're going

46
00:02:22,590 --> 00:02:26,120
to need to write the method. Register for conference. You

47
00:02:26,120 --> 00:02:28,530
can start out by copying the skeletal code for

48
00:02:28,530 --> 00:02:31,600
register for conference from the lesson four folder and copy

49
00:02:31,600 --> 00:02:34,400
it into the conference API class. Here it is,

50
00:02:34,400 --> 00:02:37,820
register for conference. We want this method to return true

51
00:02:37,820 --> 00:02:40,790
or false to indicate whether the registration was successful

52
00:02:40,790 --> 00:02:45,020
or not. The endpoint functions must return objects. They can't

53
00:02:45,020 --> 00:02:47,520
return simple data type objects such as string or

54
00:02:47,520 --> 00:02:51,020
long or Boolean. These are classical wrapped Boolean instead of

55
00:02:51,020 --> 00:02:53,820
Boolean as a return type of the method. So

56
00:02:53,820 --> 00:02:57,560
the file that contains a skeleton for register for conference

57
00:02:57,560 --> 00:03:00,750
also contains a full-length commentation of the wrapped Boolean

58
00:03:00,750 --> 00:03:04,500
class. So here's a wrapped Boolean class, it basically

59
00:03:04,500 --> 00:03:08,190
has a couple of fields: results, and reason, and

60
00:03:08,190 --> 00:03:10,530
the result is going to be the true or false, and

61
00:03:10,530 --> 00:03:12,990
the reason is going to be the reason for the

62
00:03:12,990 --> 00:03:17,400
result, and typically, you'll set the reason if the result

63
00:03:17,400 --> 00:03:20,000
is false. We just have a constructor that takes

64
00:03:20,000 --> 00:03:22,850
result and the reason. We have a constructor that just

65
00:03:22,850 --> 00:03:25,880
takes a result and then we have getters for the result

66
00:03:25,880 --> 00:03:29,520
and the reason. That same file also includes the definition for

67
00:03:29,520 --> 00:03:34,130
the function get conference which returns a conference give a string

68
00:03:34,130 --> 00:03:37,860
of its key. This method is used by the UI for

69
00:03:37,860 --> 00:03:40,120
the app to get the details to show on the page

70
00:03:40,120 --> 00:03:42,950
where you can register for a conference. You won't be using

71
00:03:42,950 --> 00:03:45,420
it in your transaction, but you'll need to have it if

72
00:03:45,420 --> 00:03:48,540
you want to use the UI to register for a conference,

73
00:03:48,540 --> 00:03:53,490
and you're going to need to fix a couple of the imports. The named class comes

74
00:03:53,490 --> 00:03:58,960
from javax.inject and the not found exception comes from

75
00:03:58,960 --> 00:04:03,670
the server.spi.response package. So let's import

76
00:04:03,670 --> 00:04:06,580
that, and you get conferences provided fully

77
00:04:06,580 --> 00:04:08,940
implemented for you, you should be able to

78
00:04:08,940 --> 00:04:11,620
understand the code that it implements. So

79
00:04:11,620 --> 00:04:13,620
back to the code for register for conference.

80
00:04:13,620 --> 00:04:18,170
We need to import a couple more exceptions,

81
00:04:18,170 --> 00:04:21,730
and they're all in SPRM response. So you're going

82
00:04:21,730 --> 00:04:24,690
to be implementing this code. So what you're

83
00:04:24,690 --> 00:04:27,540
going to do is obviously check if the user

84
00:04:27,540 --> 00:04:28,970
is null, and if it is, throw an

85
00:04:28,970 --> 00:04:32,390
unauthorized exception. Exception, then you're going to start a transaction

86
00:04:32,390 --> 00:04:34,700
and then you're going to write the code to get

87
00:04:34,700 --> 00:04:38,770
the conference key, get the conference entity and if

88
00:04:38,770 --> 00:04:42,210
there's no conference with the given conference ID, you're going to,

89
00:04:42,210 --> 00:04:44,790
instead of just throwing an exception, you're going to create a

90
00:04:44,790 --> 00:04:48,210
new wrapped Boolean. That's false and your going to need

91
00:04:48,210 --> 00:04:51,370
to set the reason to explain why it's false, and your

92
00:04:51,370 --> 00:04:54,190
going to get the user's profile. Your going to check

93
00:04:54,190 --> 00:04:57,230
if the user already registered to attend this conference and if

94
00:04:57,230 --> 00:04:59,580
they did, your going to need to create a new

95
00:04:59,580 --> 00:05:03,900
rappedBoolean. Set it to false, and explain why. You're also going

96
00:05:03,900 --> 00:05:06,570
to need to take account of whether is any seats left

97
00:05:06,570 --> 00:05:09,770
and if not you're again going to have to create new WrappedBoolean

98
00:05:09,770 --> 00:05:13,240
and explain that there is no seats left. Then if all

99
00:05:13,240 --> 00:05:15,710
the conditions are met and if it's okay for the user to

100
00:05:15,710 --> 00:05:19,330
register for the conference, go ahead and do the registration. So

101
00:05:19,330 --> 00:05:22,250
you need to add the conference key to the user's conference keys

102
00:05:22,250 --> 00:05:25,700
to tend property. You need to decrease the number of seats

103
00:05:25,700 --> 00:05:30,110
available. You need to save the conference and the profile entities and

104
00:05:30,110 --> 00:05:32,770
then you need to return a WrappedBoolean whose value

105
00:05:32,770 --> 00:05:37,530
is true because this transaction requires a WrappedBoolean result

106
00:05:37,530 --> 00:05:39,630
and then if there were reasons why it didn't

107
00:05:39,630 --> 00:05:42,200
succeed, you're going to need to turn around and throw

108
00:05:42,200 --> 00:05:46,420
the appropriate exceptions, and then finally return the result.

109
00:05:46,420 --> 00:05:48,350
So one more thing to mention is that when

110
00:05:48,350 --> 00:05:51,290
you do go ahead and book the seats, the

111
00:05:51,290 --> 00:05:56,140
conference class already has a method book seats that just

112
00:05:56,140 --> 00:05:58,650
decreases the number of seats available

113
00:05:58,650 --> 00:06:01,870
in the conference. It's already implemented

114
00:06:01,870 --> 00:06:05,040
in the conference class. So you can go ahead and look at that.

115
00:06:05,040 --> 00:06:09,680
So all this code takes place inside of a transaction. So you're going to

116
00:06:09,680 --> 00:06:12,840
need to know how to write the code for a transaction in Objectify.
