1
00:00:00,590 --> 00:00:02,489
Now that you've set up
the content provider,

2
00:00:02,490 --> 00:00:04,019
it's time to build it up further.

3
00:00:04,019 --> 00:00:06,410
You already know what
the task data looks like and

4
00:00:06,410 --> 00:00:09,589
next you'll need to tell the counter
provider how to access that data.

5
00:00:09,589 --> 00:00:13,279
Earlier, when you communicated with
the provider in the quiz example app,

6
00:00:13,279 --> 00:00:17,009
you saw how you always needed to make
data request through a content resolver.

7
00:00:17,010 --> 00:00:20,150
You'd call the correct action audit and
pass in the URI for

8
00:00:20,149 --> 00:00:21,779
the data you wanted to access.

9
00:00:21,780 --> 00:00:24,749
In general,
URIs tell content resolver two things.

10
00:00:24,748 --> 00:00:28,067
First, which provider they
want to talk to, and second,

11
00:00:28,068 --> 00:00:31,120
what specific data is being requested.

12
00:00:31,120 --> 00:00:33,320
So when you build your
own content provider,

13
00:00:33,320 --> 00:00:37,969
it's up to you to define URIs that both,
first identify your provider, and

14
00:00:37,969 --> 00:00:42,399
second, identify each different type of
data that the provider can work with.

15
00:00:42,399 --> 00:00:46,060
Now, for the To Do List app, we want to
access two different types of data.

16
00:00:46,060 --> 00:00:49,960
The first is a directory of tasks,
and the second are individual tasks.

17
00:00:49,960 --> 00:00:52,829
This way, we can do things like
display all of the tasks, and

18
00:00:52,829 --> 00:00:55,170
we can also modify a task one at a time.

19
00:00:55,170 --> 00:00:58,070
So we'll define URIs to distinguish
between these two types of data.

20
00:00:58,070 --> 00:01:01,299
Now, there are guidelines for
how content URIs are constructed.

21
00:01:01,299 --> 00:01:03,789
You've already seen a few
examples of this structure.

22
00:01:03,789 --> 00:01:06,480
For example,
you see that all content URIs

23
00:01:06,480 --> 00:01:10,490
start with a base that includes
a scheme, followed by an authority.

24
00:01:10,489 --> 00:01:12,189
Then after that is the path,

25
00:01:12,189 --> 00:01:14,670
that indicates the specific
data that you're interested in.

26
00:01:14,670 --> 00:01:17,810
This is the portion of the URI that will
help the provider select the correct

27
00:01:17,810 --> 00:01:18,469
data.

28
00:01:18,469 --> 00:01:20,299
And this is the part
you'll need to define.

29
00:01:20,299 --> 00:01:23,450
So let's define the URI for
accessing all of the task data.

30
00:01:23,450 --> 00:01:26,719
This directory is a SQL
like table named tasks.

31
00:01:26,719 --> 00:01:28,819
For consistency,
when you define the path for

32
00:01:28,819 --> 00:01:31,299
this specific URI,
you should define it with the same name.

33
00:01:31,299 --> 00:01:36,370
And the final URI should look like this,
the content scheme, authority, and

34
00:01:36,370 --> 00:01:38,219
then the tasks path at the end.

35
00:01:38,219 --> 00:01:41,530
A lot of providers will have multiple
directories of data to work with and

36
00:01:41,530 --> 00:01:44,109
will therefore need multiple URI paths.

37
00:01:44,109 --> 00:01:46,790
One example of this is
the CalendarContentProvider.

38
00:01:46,790 --> 00:01:49,470
The CalendarContentProvider keeps
track with what's happening throughout

39
00:01:49,469 --> 00:01:49,859
the year.

40
00:01:49,859 --> 00:01:52,349
The provider works with
a number of separate tables.

41
00:01:52,349 --> 00:01:55,559
There's a table for different calendars,
a table for the events themselves,

42
00:01:55,560 --> 00:01:58,250
and a table to keep track of attendees,
just to name a few.

43
00:01:58,250 --> 00:02:02,420
And it uses different URI paths to
distinguish between these directories.

44
00:02:02,420 --> 00:02:05,989
This seems simple enough, but how
should we define the URI structure for

45
00:02:05,989 --> 00:02:08,109
an individual item in a directory, or

46
00:02:08,110 --> 00:02:11,520
for maybe a smaller subset of
rows in the large directory.

47
00:02:11,520 --> 00:02:12,659
Well, in these cases,

48
00:02:12,659 --> 00:02:15,889
you need to include more
information in the URI itself.

49
00:02:15,889 --> 00:02:18,099
For example, in our tasks directory,

50
00:02:18,099 --> 00:02:21,159
we might want to see the data
in the priority column only.

51
00:02:21,159 --> 00:02:24,590
Or perhaps we want to point to
one row by its specific ID.

52
00:02:24,590 --> 00:02:28,069
If I want to look only at the priority
column, I might to find the URI

53
00:02:28,069 --> 00:02:31,358
that points to data by pending
the name of the column to my path.

54
00:02:31,358 --> 00:02:35,960
This path tasks/priority has
the name of the task directory and

55
00:02:35,960 --> 00:02:37,599
the column name priority.

56
00:02:37,599 --> 00:02:39,229
So it includes all of the information,

57
00:02:39,229 --> 00:02:42,639
a content provider would need,
to select data from the priority column.

58
00:02:42,639 --> 00:02:46,529
Similarly, if I wanted to design
a URI for looking at a single task,

59
00:02:46,530 --> 00:02:50,640
I could decide to have a URI that points
to that row by appending its unique ID.

60
00:02:50,639 --> 00:02:52,529
This is a fairly common practice.

61
00:02:52,530 --> 00:02:57,396
So if I wanted to access the second task
in this table, I'd append the ID 2, and

62
00:02:57,395 --> 00:02:59,151
my path would be tasks/2.

63
00:02:59,151 --> 00:03:02,458
If I wanted to access the row with id 3,

64
00:03:02,459 --> 00:03:07,289
I'd use a URI like tasks/3,
row 4, /4, and so on.

65
00:03:07,289 --> 00:03:11,593
For the task content provider to respond
to a single row of data like this, I'll

66
00:03:11,593 --> 00:03:16,259
actually want to tell it when any URI
is pointing to a single task by its ID.

67
00:03:16,259 --> 00:03:17,289
So potentially,

68
00:03:17,289 --> 00:03:22,659
I could define a bunch of URIs,
a single URI for every row in my table.

69
00:03:22,659 --> 00:03:25,060
But this would quickly
become pretty unmanageable.

70
00:03:25,060 --> 00:03:27,099
What I could do instead
is to find a URI for

71
00:03:27,099 --> 00:03:30,699
a single task using something
called a wildcard character.

72
00:03:30,699 --> 00:03:32,679
This is the hash symbol seen here.

73
00:03:32,680 --> 00:03:35,830
What this hash symbol stands for
is any integer number.

74
00:03:35,830 --> 00:03:39,230
So as long as the URI has
a integer ID after its tasks path,

75
00:03:39,229 --> 00:03:43,239
it will be recognized as a URI
that points to a single item.

76
00:03:43,240 --> 00:03:46,520
Let's look at a few more examples of
URI structures that use these wild

77
00:03:46,520 --> 00:03:47,340
card characters.

