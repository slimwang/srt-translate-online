1
00:00:00,290 --> 00:00:02,894
One example of a technique to actually improve the

2
00:00:02,894 --> 00:00:06,410
ILP of the program is tree height reduction. Let's consider

3
00:00:06,410 --> 00:00:08,940
a program that looks like this. Let's say that

4
00:00:08,940 --> 00:00:11,280
we need a sum of these four registers in R8.

5
00:00:12,300 --> 00:00:14,400
One way to get that is to add the

6
00:00:14,400 --> 00:00:18,012
first two numbers into R8, and then add the second

7
00:00:18,012 --> 00:00:21,288
number, and then add the third number and then

8
00:00:21,288 --> 00:00:25,570
the fourth number. However, this forms a dependence chain because

9
00:00:25,570 --> 00:00:28,930
we have the dependence here and the dependence here, so

10
00:00:28,930 --> 00:00:32,189
really these instructions have to be done one after the other.

11
00:00:32,189 --> 00:00:35,478
So tree height reduction works as follows. The compiler figures

12
00:00:35,478 --> 00:00:37,878
out that instead of adding one number at a time to

13
00:00:37,878 --> 00:00:40,818
the sum, and thus creating a chain of dependencies, what

14
00:00:40,818 --> 00:00:43,830
we can do is we can group the computation this way.

15
00:00:43,830 --> 00:00:47,358
Thus, getting, we first add the first two numbers and put

16
00:00:47,358 --> 00:00:50,510
that in R8. Then we add the second pair of numbers,

17
00:00:50,510 --> 00:00:52,800
put that in R7. And then we add up the R8

18
00:00:52,800 --> 00:00:57,610
and R7 into our final result, R8. The dependencies here are

19
00:00:57,610 --> 00:01:01,600
this and this. So, now we have two instructions that can

20
00:01:01,600 --> 00:01:04,010
execute in parallel with each other because they don't depend on

21
00:01:04,010 --> 00:01:06,340
each other. And then a third instruction that does depend on

22
00:01:06,340 --> 00:01:09,680
them, too. So if this needed three cycles to execute, this

23
00:01:09,680 --> 00:01:12,453
can actually execute in two cycles if we have a processor

24
00:01:12,453 --> 00:01:15,602
that can do at least two instructions per cycle. Tree height

25
00:01:15,602 --> 00:01:20,778
reduction can not always be done. It uses associativity of the addition

26
00:01:20,778 --> 00:01:27,120
operation, and you have to keep in mind that not all operations are associative.

27
00:01:27,120 --> 00:01:30,483
So we have to be careful. We can only do this when the

28
00:01:30,483 --> 00:01:34,750
final result is the same as if we did things in the proper order.
