1
00:00:00,100 --> 00:00:03,450
We're going to look at
an example of inference attack

2
00:00:03,450 --> 00:00:07,480
with the database that we defined by
the schema that we just discussed.

3
00:00:07,480 --> 00:00:12,450
The query that we're going to
consider here is a query that returns

4
00:00:12,450 --> 00:00:15,300
the average score on an exam.

5
00:00:15,300 --> 00:00:18,220
Okay, so
any student should be able to find out.

6
00:00:18,220 --> 00:00:21,730
In fact,
that's the first question after an exam,

7
00:00:21,730 --> 00:00:25,450
when you bring back the grades,
students ask what was the average.

8
00:00:25,450 --> 00:00:29,370
So any student should be able to submit
a query that returns the average,

9
00:00:29,370 --> 00:00:31,830
of the score, on that exam.

10
00:00:31,830 --> 00:00:36,490
And the average basically is,
we take every student's grade,

11
00:00:36,490 --> 00:00:39,870
sum it up, and then divide it
by the number of students.

12
00:00:39,870 --> 00:00:43,670
And that shouldn't tell us anything
about a particular student.

13
00:00:43,670 --> 00:00:47,620
Remember what you're not authorized
to access is somebody else's grade.

14
00:00:47,620 --> 00:00:49,300
This is an authorized query and

15
00:00:49,300 --> 00:00:52,930
our idea of inference attack is
that when you use a query like this

16
00:00:52,930 --> 00:00:56,520
to gain access to information that
you normally are not allowed to see.

17
00:00:56,520 --> 00:01:00,770
If you are an attacker, your goal
would be to gain access to information

18
00:01:00,770 --> 00:01:02,290
that is not available to you.

19
00:01:02,290 --> 00:01:06,610
So that would be to find the exact
score of some other student.

20
00:01:06,610 --> 00:01:10,170
It's not your score that you already
know, but if you are an outsider,

21
00:01:10,170 --> 00:01:14,020
of course you're targeting a particular
student, and you want to find out his or

22
00:01:14,020 --> 00:01:15,130
her exact score.

23
00:01:15,130 --> 00:01:16,710
That's the goal of the attacker or

24
00:01:16,710 --> 00:01:21,250
the information that we want
the attacker to get access to.

25
00:01:21,250 --> 00:01:26,310
Inference attacks sometimes
require some additional outside or

26
00:01:26,310 --> 00:01:27,600
external information.

27
00:01:27,600 --> 00:01:31,540
So maybe the attacker does
know when somebody takes,

28
00:01:31,540 --> 00:01:33,910
some person takes the exam late.

29
00:01:33,910 --> 00:01:36,960
Could be because they were sick or
something like that,

30
00:01:36,960 --> 00:01:40,410
so the whole class took
the exam on a certain date, and

31
00:01:40,410 --> 00:01:44,210
after a few days after that, perhaps,
this student is going to take the exam.

32
00:01:44,210 --> 00:01:47,440
And this information is
available to that hacker.

33
00:01:47,440 --> 00:01:51,900
So that hacker is going to do in this
case is run the average score query,

34
00:01:51,900 --> 00:01:56,420
before this one student,
the one who takes the exam late actually

35
00:01:56,420 --> 00:02:01,450
takes the exam and his or
her score is added to the database.

36
00:02:01,450 --> 00:02:04,360
So before the exam is taken,
the score may be zero or

37
00:02:04,360 --> 00:02:08,350
something like that and after the exam,
it's replaced by the correct value.

38
00:02:08,350 --> 00:02:13,150
So that attacker is running
the average query which we said

39
00:02:13,150 --> 00:02:17,130
should be allowed before this
one student takes the exam.

40
00:02:17,130 --> 00:02:21,930
And the attacker knows when
the student has taken the exam,

41
00:02:21,930 --> 00:02:27,200
maybe tries a few times, eventually
sees maybe a different average value.

42
00:02:27,200 --> 00:02:30,800
Or, after a certain amount of time, we
know that the exam must have been taken

43
00:02:30,800 --> 00:02:34,090
by everyone, including this one
student who had missed it earlier.

44
00:02:34,090 --> 00:02:35,570
So it does the average again.

45
00:02:35,570 --> 00:02:39,880
Okay, so now I have two averages,
and let's say this student is Alice.

46
00:02:39,880 --> 00:02:43,720
So the average score,
not including Alice, and

47
00:02:43,720 --> 00:02:46,980
then average score of
everyone that includes Alice.

48
00:02:46,980 --> 00:02:51,390
So based on these two values that are
returned by this query that is allowed,

49
00:02:51,390 --> 00:02:55,330
I can now figure out
what Alice's average is.

50
00:02:55,330 --> 00:02:59,750
Actually it's fairly easy to do that,
if there are n number of students,

51
00:02:59,750 --> 00:03:05,160
the total score, if you add them all up,
is n times the average.

52
00:03:05,160 --> 00:03:07,560
So here, since Alice hasn't taken, so

53
00:03:07,560 --> 00:03:10,750
it'll be n-1 times the average
of the score before,

54
00:03:10,750 --> 00:03:14,990
the total of the scores before, and
this is after Alice takes the exam.

55
00:03:14,990 --> 00:03:17,240
The difference is Alice's grade exactly.

56
00:03:17,240 --> 00:03:21,350
Okay so the idea here is that these
two queries both are allowed,

57
00:03:21,350 --> 00:03:22,880
because they return the average.

58
00:03:22,880 --> 00:03:27,240
The database system allows that hacker
to run each one of these queries by

59
00:03:27,240 --> 00:03:29,966
running these queries
at particular times.

60
00:03:29,966 --> 00:03:34,220
You have to think through when
exactly you want to do that.

61
00:03:34,220 --> 00:03:38,640
We are able to make an inference and
find the exact

62
00:03:38,640 --> 00:03:42,210
value of the target score, just by
the difference that I just mentioned.

63
00:03:42,210 --> 00:03:46,860
So, this is the example of an inference
attack where you use authorized

64
00:03:46,860 --> 00:03:51,420
queries to gain access to information
that you're not authorized for.

65
00:03:51,420 --> 00:03:53,840
So, which is the exact
score of the target,

66
00:03:53,840 --> 00:03:56,060
in this case the target was Alice
