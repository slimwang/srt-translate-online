1
00:00:00,000 --> 00:00:05,000
In our JavaScript interpreter, we used exceptions ro implement return statements.

2
00:00:05,000 --> 00:00:09,000
Is this bad? Should we be using Python if we have to do this?

3
00:00:09,000 --> 00:00:12,000
Well, there is a lot of language-level exception handling in the real world.

4
00:00:12,000 --> 00:00:18,000
I don't think it's a reason to avoid Python or claim that one language is more dangerous than another.

5
00:00:18,000 --> 00:00:22,000
Language-level exception handling is super popular.

6
00:00:22,000 --> 00:00:27,000
It's actually goes back to Goodenough in 1975 who introduced a replacement model.

7
00:00:27,000 --> 00:00:30,000
That is an amazing family name. I wish I had that name.

8
00:00:30,000 --> 00:00:36,000
And since then, a number of languages have allowed you to deal with programmer errors

9
00:00:36,000 --> 00:00:41,000
and environmental concerns--both of which are often lump under the category

10
00:00:41,000 --> 00:00:46,000
of exceptions at the language level, and this actually is super handy because the previous

11
00:00:46,000 --> 00:00:51,000
approach involves sort of setting and checking global flags and programmers are very poor

12
00:00:51,000 --> 00:00:54,000
at remembering to do that consistently and correctly.

13
00:00:54,000 --> 00:01:00,000
Even with language level exception handling, it turns out that programmers make a lot of mistakes.

14
00:01:00,000 --> 00:01:03,000
One of the personal hypothesis is that this is because the control flow

15
00:01:03,000 --> 00:01:07,000
for exception handling isn't visible.

16
00:01:07,000 --> 00:01:11,000
When you're looking at the code, you can tell the control is going to flow down to the next line.

17
00:01:11,000 --> 00:01:14,000
if there's a statement in Python it's indented over.

18
00:01:14,000 --> 00:01:19,000
But exceptions really represent this sort of nonlocal jump to somewhere else

19
00:01:19,000 --> 00:01:24,000
and the indenting of the coder, the structure of the code may not make it clear.

20
00:01:24,000 --> 00:01:27,000
And if you're not aware that code can jump out of one line and go to another.

21
00:01:27,000 --> 00:01:32,000
You may forget to reestablish some in variant or close some important file

22
00:01:32,000 --> 00:01:34,000
or finalize a day of the structure by the end.

23
00:01:34,000 --> 00:01:38,000
And in fact, even a number of years ago, when I was doing my dissertation on the subject--

24
00:01:38,000 --> 00:01:43,000
Oh, tragically boring--open source job of programmers tended to make

25
00:01:43,000 --> 00:01:51,000
on the order of 800 mistakes per 4 million lines of code related to exception handling alone.

26
00:01:51,000 --> 00:01:55,000
And in fact, exception handling is so prominent that if you look at an average program

27
00:01:55,000 --> 00:02:02,000
somewhere between 1% and 5% of the text of that program will literally be catch and finally blocks.

28
00:02:02,000 --> 00:02:08,000
That may actually seem low but typically a catcher or finally block, if it's not just empty

29
00:02:08,000 --> 00:02:15,000
will call some error handling routine and in large pieces of software, anywhere between 3 and 46%

30
00:02:15,000 --> 00:02:19,000
of the program is transitively reachable through methods calls or what not

31
00:02:19,000 --> 00:02:21,000
from catch and finally blocks.

32
00:02:21,000 --> 00:02:26,000
If you're interested in writing large robust pieces of software that get deployed in the real world,

33
00:02:26,000 --> 00:02:30,000
You will spend quite a bit of time dealing with handling errors.

34
00:02:30,000 --> 00:02:33,000
Language-level exception handling is at least for now

35
00:02:33,000 --> 00:02:34,000
much better than the alternative for that sort of thing.

36
00:02:34,000 --> 00:02:39,000
Is this a reason to avoid Python?

37
00:02:39,000 --> 00:02:44,000
We saw in class that we could use something like exception handling to deal with

38
00:02:44,000 --> 00:02:50,000
interpreting JavaScript return statements in our Python JavaScript interpreter?

39
00:02:50,000 --> 00:02:53,000
No, I wouldn't devoid Python as a result.

40
00:02:53,000 --> 00:02:58,000
In fact, even nominally friendlier languages like Java are potentially worse.

41
00:02:58,000 --> 00:03:03,000
You may not be aware of this Java actually still has GOTOs--go check it out.

42
00:03:03,000 --> 00:03:07,000
You can put in labels and then reuse the brake statement if you're given an argument

43
00:03:07,000 --> 00:03:11,000
to behave like GOTOs, so even though nominally more typed safe,

44
00:03:11,000 --> 00:03:15,000
more structured languages are supposed to avoid that sort of thing.

45
00:03:15,000 --> 00:03:20,000
In practice, a lot of real world languages be the Python or be the Java have their secret dark

46
00:03:20,000 --> 00:03:23,000
corners allowing you to write unstructured spaghetti code.

47
00:03:23,000 --> 00:03:28,000
This is nothing particularly bad about Python or particularly bad about JavaScript.

48
00:03:28,000 --> 00:03:35,000
It really gets back to this almost philosophical issue that sometimes when you detect an error,

49
00:03:35,000 --> 00:03:39,000
you don't have enough time, you don't have enough context to deal with it.

50
00:03:39,000 --> 00:03:42,000
That's really the motivation for exception handling.

51
00:03:42,000 --> 00:03:46,000
When I'm in the middle of some low level codes that fails to write something to the disc

52
00:03:46,000 --> 00:03:50,000
or fails to send something over the network, I don't know if should retry.

53
00:03:50,000 --> 00:03:54,000
Why not? Depends on the rest of the application semantics.

54
00:03:54,000 --> 00:03:59,000
If it's some sort of network maneuver may be I want to sleep for five seconds and try again,

55
00:03:59,000 --> 00:04:03,000
or if it's something like voice over IP like Skype may be I don't want to bother,

56
00:04:03,000 --> 00:04:05,000
may be I'll just wait for the next packet to arrive.

57
00:04:05,000 --> 00:04:08,000
I can't know unless I know more about the application semantics.

58
00:04:08,000 --> 00:04:14,000
So exceptions allow me to throw that notice of an error up and hopefully someone else

59
00:04:14,000 --> 00:04:19,000
who has more information will catch it--that's generic to the experience of programming.

60
00:04:19,000 --> 00:04:24,000
It's not particular to any one language so I wouldn't hold it against Python or Java or even JavaScript.
