1
00:00:00,380 --> 00:00:01,379
Good work.

2
00:00:01,379 --> 00:00:05,330
At this point, you've made your first
preference and read it into the app.

3
00:00:05,330 --> 00:00:09,150
Now, I did take you through the shortest
path to get something working and

4
00:00:09,150 --> 00:00:10,460
appearing on the screen.

5
00:00:10,460 --> 00:00:14,420
Why don't we now try to clean up
the code with some best practices?

6
00:00:14,419 --> 00:00:18,509
The first thing is that we should
have been using string resources from

7
00:00:18,509 --> 00:00:21,501
the strings.xml file for
all of our preferences.

8
00:00:21,501 --> 00:00:26,926
So, in our strings.xml file,
I'll add those two new strings.

9
00:00:26,926 --> 00:00:29,064
One for the key and one for the title.

10
00:00:29,065 --> 00:00:32,585
Notice that I've set the translatable
to false for the key string,

11
00:00:32,585 --> 00:00:36,597
because if I ever do localize my app,
I don't need to waste the translator's

12
00:00:36,597 --> 00:00:39,892
time translating keys that
are never even visible to the user.

13
00:00:39,892 --> 00:00:44,097
Also, I don't want changing the language
to affect what name the keys are saved

14
00:00:44,097 --> 00:00:45,009
under.

15
00:00:45,009 --> 00:00:48,809
Next, I'll go into our
preference visualizer XML and

16
00:00:48,810 --> 00:00:50,530
start using those strings.

17
00:00:50,530 --> 00:00:53,170
I'll do that by just replacing
the hardcoded strings

18
00:00:53,170 --> 00:00:55,800
with the ones that we've created
in our strings resources.

19
00:00:55,799 --> 00:00:58,589
Now let's do the same for
the summary off and on.

20
00:00:58,590 --> 00:01:02,100
The first thing is we just add
them to the strings resources.

21
00:01:02,100 --> 00:01:07,040
And then we can replace those hardcoded
values to the string resource values.

22
00:01:07,040 --> 00:01:10,590
And finally, make sure that you
use the string resource for

23
00:01:10,590 --> 00:01:13,719
whenever you refer to this key,
show_bass.

24
00:01:13,719 --> 00:01:16,480
Like for
example in the visualizer activity,

25
00:01:16,480 --> 00:01:21,530
you should replace this string
literal with our new resource.

26
00:01:21,530 --> 00:01:24,780
What this does is it allows me
to reference the string resource

27
00:01:24,780 --> 00:01:29,439
inside the code, which foolproofs
the code against sloppy typing, and

28
00:01:29,439 --> 00:01:32,310
it makes changes in
the future a lot easier.

29
00:01:32,310 --> 00:01:36,230
Now, for the default value,
I'm still using this literal true.

30
00:01:36,230 --> 00:01:41,290
We can actually define boolean constants
the same way we define string constants.

31
00:01:41,290 --> 00:01:47,300
Let's create a new bools.xml file
under the values resource folder.

32
00:01:47,299 --> 00:01:50,799
This file will be used to store
constants that I can refer to later.

33
00:01:50,799 --> 00:01:53,682
So, inside that XML file,
I'll put a constant for

34
00:01:53,682 --> 00:01:56,573
whether the bass should be
shown by default or not.

35
00:01:56,572 --> 00:01:59,587
I'll go to our preference visualizer and

36
00:01:59,587 --> 00:02:04,819
change that default value,
replace it with the bool resource.

37
00:02:04,819 --> 00:02:06,771
And then in the visualizer activity,

38
00:02:06,772 --> 00:02:10,316
also replace this hardcoded true
with the resource we just created.

39
00:02:10,316 --> 00:02:11,319
And then finally,

40
00:02:11,319 --> 00:02:14,977
I'll just run the code to make sure
there weren't any regressions.

41
00:02:14,977 --> 00:02:16,449
[BLANK_AUDIO]

