1
00:00:00,090 --> 00:00:04,780
So now that we have seen how paging and
V->P translation works,

2
00:00:04,780 --> 00:00:09,390
let's talk about the memory access
time when we have this translation.

3
00:00:09,390 --> 00:00:12,670
So our program does something like this.

4
00:00:12,670 --> 00:00:18,178
It says load R1 from the address
computed by adding 4 to what is in R2.

5
00:00:18,178 --> 00:00:21,620
This, when computed,

6
00:00:21,620 --> 00:00:24,780
will be the virtual address that
we want to access in the program.

7
00:00:24,780 --> 00:00:29,610
So to do a load/store, the processor
has to compute the virtual address.

8
00:00:29,610 --> 00:00:30,280
This is quick.

9
00:00:30,280 --> 00:00:33,140
Usually, it's just addition of
two numbers that are already in

10
00:00:33,140 --> 00:00:34,230
the processor.

11
00:00:34,230 --> 00:00:36,610
One is a constant fetch
with instruction.

12
00:00:36,610 --> 00:00:40,440
The other one is the register
that is inside the processor.

13
00:00:40,440 --> 00:00:44,610
Next, the presser has to compute the
page number, which is extremely quick

14
00:00:44,610 --> 00:00:48,060
because it just means that we take
some bits from the virtual address.

15
00:00:48,060 --> 00:00:52,680
And without any address translation, the
next thing that the processor will do is

16
00:00:52,680 --> 00:00:58,280
access the cache, and sometimes if there
is a cache miss, the actual memory.

17
00:00:58,280 --> 00:01:00,750
So again, these two are extremely quick.

18
00:01:00,750 --> 00:01:04,069
Most of the time will be spent
accessing the cache, and occasionally,

19
00:01:04,069 --> 00:01:07,260
we will spend more cycles because
we need to access the memory.

20
00:01:07,260 --> 00:01:09,830
With V->P Translation,

21
00:01:09,830 --> 00:01:14,160
after computing the page number, the
processor has to compute the physical

22
00:01:14,160 --> 00:01:18,830
address of the page table entry where
the translation for the page number is.

23
00:01:18,830 --> 00:01:22,320
This is done by adding the page
number that we computed

24
00:01:22,320 --> 00:01:25,250
to the beginning address
of the page table.

25
00:01:25,250 --> 00:01:28,370
Then we read the actual
page table entry, and

26
00:01:28,370 --> 00:01:33,350
compute the physical address by
combining the physical frame number

27
00:01:33,350 --> 00:01:38,460
from the page table entry with the page
offset from the virtual address.

28
00:01:38,460 --> 00:01:40,760
So how fast is this?

29
00:01:40,760 --> 00:01:42,110
Well, this is fast,

30
00:01:42,110 --> 00:01:47,440
because it just means adding the page
number to some sort of address.

31
00:01:47,440 --> 00:01:48,210
This is fast,

32
00:01:48,210 --> 00:01:52,100
because it only means combining
two numbers that you already have.

33
00:01:52,100 --> 00:01:54,120
But how fast is this?

34
00:01:54,120 --> 00:01:57,190
And for that, we need to ask ourselves,
so where is the page table?

35
00:01:57,190 --> 00:02:02,050
Is it inside the processor so it can be
quickly accessed, or is it in memory?

36
00:02:02,050 --> 00:02:05,570
We have seen the page
table can be fairly large.

37
00:02:05,570 --> 00:02:10,126
Yes, for a multilevel page table we can
have it be less than a megabyte for

38
00:02:10,126 --> 00:02:13,725
some programs, but
in theory it can be extremely large.

39
00:02:13,725 --> 00:02:17,746
So, we cannot guarantee that the page
table for even one process fits on

40
00:02:17,746 --> 00:02:22,385
the processor chip, which means that the
page tables really need to be in memory.

41
00:02:22,385 --> 00:02:25,469
And that means, that for
each load or store,

42
00:02:25,469 --> 00:02:30,257
we now need to have a memory access,
which is just as slow as when we have

43
00:02:30,257 --> 00:02:35,370
a cache miss that we were trying to
avoid before we got to page tables.

44
00:02:35,370 --> 00:02:40,050
Things are even worse, because for
a multi-level page table, for example,

45
00:02:40,050 --> 00:02:44,360
a 4-level page table,
we would need to do this multiple times.

46
00:02:44,360 --> 00:02:45,950
For example, 4x.

47
00:02:45,950 --> 00:02:49,960
Compute the physical address of the
outermost page table, read that entry,

48
00:02:49,960 --> 00:02:54,060
compute the physical address of
the next page table, go ahead and

49
00:02:54,060 --> 00:02:54,900
do that four times.

50
00:02:54,900 --> 00:02:59,460
So we need four memory accesses to read
the four page table entries until we

51
00:02:59,460 --> 00:03:03,760
get the actual translation, after
which we can quickly access the cache.

52
00:03:03,760 --> 00:03:06,770
So somehow,
we have a situation where the virtual to

53
00:03:06,770 --> 00:03:10,540
physical address
translation is costing us

54
00:03:10,540 --> 00:03:15,220
more than the memory access is that
we try to avoid by having the caches.
