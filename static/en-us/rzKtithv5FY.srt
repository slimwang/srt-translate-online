1
00:00:00,440 --> 00:00:05,220
So, much like our ordered function
that we talked about earlier,

2
00:00:05,220 --> 00:00:07,560
I don't think there
is a precondition for

3
00:00:07,560 --> 00:00:12,650
this because we could take any kind of
vector whether it's empty or non-empty.

4
00:00:12,650 --> 00:00:14,090
>> Okay.
So assuming that we got the type

5
00:00:14,090 --> 00:00:19,410
checking handled for us, then as long
as we have that vector of integers

6
00:00:19,410 --> 00:00:23,630
coming in we could always ask the
question whether or not it's ordered,

7
00:00:23,630 --> 00:00:28,650
and expect to get
a boolean results back.

8
00:00:28,650 --> 00:00:32,302
Does raise the question, though,

9
00:00:32,302 --> 00:00:36,820
of whether a empty vector is ordered or
not.

10
00:00:39,020 --> 00:00:40,740
Have any thoughts on that?

11
00:00:40,740 --> 00:00:45,210
>> That seems like something, if it
wasn't stated in the requirements for

12
00:00:45,210 --> 00:00:47,900
our system,
we could come up with a distinction for,

13
00:00:47,900 --> 00:00:49,900
but-
>> Well,

14
00:00:49,900 --> 00:00:54,050
our job here is to state what we
intend by this particular function.

15
00:00:54,050 --> 00:00:57,480
We are essentially giving
instructions to the developers,

16
00:00:57,480 --> 00:01:01,580
and we certainly wouldn't want
the end user to try to use this and

17
00:01:01,580 --> 00:01:05,150
get some surprising results on
an empty vector for ordered.

18
00:01:05,150 --> 00:01:07,820
So, what is your natural
feeling about whether the empty

19
00:01:07,820 --> 00:01:08,690
vector is ordered or not?

20
00:01:11,530 --> 00:01:12,570
>> I feel like it's ordered.

21
00:01:12,570 --> 00:01:13,980
We don't have anything, so it's ordered.

22
00:01:13,980 --> 00:01:17,393
>> Sure, sure.
And in fact, when we think about what

23
00:01:17,393 --> 00:01:22,140
Jared was saying earlier about all the
elements are greater than, less than, or

24
00:01:22,140 --> 00:01:24,775
equal to the one that comes after it,
well, that's true of an empty vector.

25
00:01:24,775 --> 00:01:25,390
Okay?

26
00:01:25,390 --> 00:01:29,950
So, we're going to hope that
our post condition for ordered,

27
00:01:29,950 --> 00:01:32,440
when we write it down, will,

28
00:01:32,440 --> 00:01:37,960
if we plug in an empty vector,
we'll get out a value of true for that.

29
00:01:37,960 --> 00:01:41,380
Third step is the post condition for
ordered.

30
00:01:41,380 --> 00:01:44,970
And this is going to turn out
to be the trickiest one, and,

31
00:01:44,970 --> 00:01:47,420
but it is a pure program.

32
00:01:47,420 --> 00:01:51,260
And for all pure programs what you're
really saying is what the relationship

33
00:01:51,260 --> 00:01:53,140
of the output is to the input.

34
00:01:53,140 --> 00:01:56,040
And I'm going to give you a couple
of hints on this one, okay?

35
00:01:56,040 --> 00:01:58,900
One is you're going to
have to use a quantifier.

36
00:01:58,900 --> 00:02:02,930
And what you can say about the value
of the ith element of the vector,

37
00:02:02,930 --> 00:02:07,410
that is a typical element of the vector,
in what can you say about that in

38
00:02:07,410 --> 00:02:09,930
relation to the value of
the ith plus first element?
