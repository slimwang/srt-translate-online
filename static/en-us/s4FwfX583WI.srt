1
00:00:00,450 --> 00:00:04,040
Now let's look at the code that you've
added in the last coding exercise, and

2
00:00:04,040 --> 00:00:07,030
there's a lot happening in just
these three lines of code.

3
00:00:07,030 --> 00:00:09,970
So at a high level,
we're creating an ArrayAdapter

4
00:00:09,970 --> 00:00:12,550
that contains a list of
strings as its data source.

5
00:00:13,730 --> 00:00:16,040
Then we're searching through
the view hierarchy for

6
00:00:16,040 --> 00:00:19,580
the ListView which was
defined in our XML layout.

7
00:00:19,580 --> 00:00:22,050
And then we're associating
the array adapter with a list view.

8
00:00:23,130 --> 00:00:25,470
For a more detailed explanation
of what's happening,

9
00:00:25,470 --> 00:00:27,620
let's take a look at it one line a time.

10
00:00:27,620 --> 00:00:32,080
First we create an array adapter
object using the new keyword and

11
00:00:32,080 --> 00:00:33,650
the constructor with three inputs.

12
00:00:35,260 --> 00:00:39,430
We're storing it in a new variable,
the recalling items adapter.

13
00:00:39,430 --> 00:00:42,440
Where the ArrayAdapter is its data type.

14
00:00:42,440 --> 00:00:45,250
Now how do we know to pass
in these three inputs.

15
00:00:45,250 --> 00:00:47,300
Well let's take a look
at the documentation.

16
00:00:47,300 --> 00:00:51,070
So here's the under developer
documentation for the array adapter and

17
00:00:51,070 --> 00:00:56,000
if you search online for ArrayAdapter
Android you can also find this page.

18
00:00:56,000 --> 00:00:59,620
Now let's scroll down to the section
called public constructors.

19
00:00:59,620 --> 00:01:02,420
And this tells us the different ways
we can create a new array adapter.

20
00:01:03,720 --> 00:01:06,580
Each constructor requires
different inputs.

21
00:01:06,580 --> 00:01:08,670
So we've been using the second
to last constructor here.

22
00:01:10,240 --> 00:01:14,070
And here's the code that we've been
using in the numbers activity file.

23
00:01:15,360 --> 00:01:21,010
So notice that we pass in the context
which refers to the numbers activity,

24
00:01:21,010 --> 00:01:23,810
the layout file and the list of objects.

25
00:01:25,230 --> 00:01:28,790
Another reason we need a context
is because we are creating views.

26
00:01:28,790 --> 00:01:31,490
Since the numbers activity is a context

27
00:01:31,490 --> 00:01:35,010
we specify the word this to
refer to the numbers activity.

28
00:01:35,010 --> 00:01:37,500
The second parameter is
the list item layout file.

29
00:01:38,680 --> 00:01:43,580
So normally we refer to the layout
files in the form of R.layout for

30
00:01:43,580 --> 00:01:46,640
layouts we've defined,
followed by the name of the layout file.

31
00:01:47,800 --> 00:01:53,280
So in this case we specify
android.R.layout because the Android

32
00:01:53,280 --> 00:01:59,460
framework actually predefined an XML
layout file called, simple_list_item_1.

33
00:01:59,460 --> 00:02:03,240
And we can just use that one
that Android predefined for us.

34
00:02:03,240 --> 00:02:07,630
So the last printer is a list of objects
which will be the data source for

35
00:02:07,630 --> 00:02:09,360
the array adapters.

36
00:02:09,360 --> 00:02:11,600
In our case it's words.

37
00:02:11,600 --> 00:02:14,800
Now earlier in this lesson
we discuss generics

38
00:02:14,800 --> 00:02:17,720
when we created a string ArrayList.

39
00:02:17,720 --> 00:02:21,088
Remember focus this is ArrayList and
not ArrayAdapter.

40
00:02:21,088 --> 00:02:25,240
Remember because ArrayList
a generic class we could rewrite it

41
00:02:25,240 --> 00:02:27,230
to be ArrayList and

42
00:02:27,230 --> 00:02:31,760
have E inside the angle brackets to
indicate that's a generic class.

43
00:02:31,760 --> 00:02:34,280
Now remember that E is type parameter or

44
00:02:34,280 --> 00:02:38,210
placeholder which can be swapped for
a specific object type

45
00:02:38,210 --> 00:02:42,040
such as a string when we create
an instance of an ArrayList.

46
00:02:42,040 --> 00:02:46,080
Now creating ONE Generic
class allows us to decide

47
00:02:46,080 --> 00:02:50,730
the types of data it will store later
on, rather than having to create

48
00:02:50,730 --> 00:02:55,415
many specific classes such as
a StringList class, an Integer class,

49
00:02:55,415 --> 00:02:59,780
Boolean class or
any other object type list class.

50
00:02:59,780 --> 00:03:03,570
So going back to our discussion
about ArrayAdapters.

51
00:03:03,570 --> 00:03:07,330
Here's the documentation for
ArrayAdapters.

52
00:03:07,330 --> 00:03:11,710
Now we see here that ArrayAdapter
has the angle bracket T

53
00:03:11,710 --> 00:03:15,520
syntax which indicates that
it's also a generic class.

54
00:03:15,520 --> 00:03:19,780
Now T like E is a type parameter
that can be swapped out for

55
00:03:19,780 --> 00:03:22,200
a specific data object type.

56
00:03:22,200 --> 00:03:24,870
And specifically T stands for

57
00:03:24,870 --> 00:03:29,870
data type because when you say what
types of data are in the array and

58
00:03:29,870 --> 00:03:34,660
in our case specifically,
we have an array of data type strings.

59
00:03:34,660 --> 00:03:39,810
Now we're creating an ArrayAdapter
that specifically takes in strings and

60
00:03:39,810 --> 00:03:44,230
will be creating list item views for
each of these string elements.

61
00:03:44,230 --> 00:03:48,340
So back to this comparison table which
demonstrates why it's better to create

62
00:03:48,340 --> 00:03:53,630
one generic class versus creating
a class for every type of list possible.

63
00:03:53,630 --> 00:03:55,120
Here, we see that for

64
00:03:55,120 --> 00:04:00,190
ArrayAdapter we can replace the T
with any other object data type.

65
00:04:00,190 --> 00:04:04,120
In our case, we're going to replace
the T with the string data type.

66
00:04:05,338 --> 00:04:08,330
All right, well, there was a lot
happening in that one line of code.

67
00:04:08,330 --> 00:04:10,350
So let's move on to the second line.

68
00:04:10,350 --> 00:04:12,430
So here we're looking in
the view hierarchy for

69
00:04:12,430 --> 00:04:17,550
a view with the ID name list and the
findViewById method returns a view and

70
00:04:17,550 --> 00:04:20,890
then we cast it into
a list view data type.

71
00:04:20,890 --> 00:04:24,920
The casting will work if we found
a text view or a image view.

72
00:04:24,920 --> 00:04:28,930
In this case the casting works because
we actually did find a list view

73
00:04:28,930 --> 00:04:29,950
in the layout.

74
00:04:29,950 --> 00:04:33,730
So we store this list view into
a variable called ListView.

75
00:04:33,730 --> 00:04:35,150
And we can call methods on it and

76
00:04:35,150 --> 00:04:37,130
interact with it while
the app is running.

77
00:04:37,130 --> 00:04:38,300
Now on to the last line of code.

78
00:04:38,300 --> 00:04:41,210
And here it says listView.setAdapter and

79
00:04:41,210 --> 00:04:44,260
it takes in itemsAdapter
as its parameter.

80
00:04:44,260 --> 00:04:48,010
So we're calling the setAdapter method
on the ListView object we just defined

81
00:04:48,010 --> 00:04:49,660
in the previous line.

82
00:04:49,660 --> 00:04:55,140
Now if we go to the ListView
documentation and search setAdapter.

83
00:04:55,140 --> 00:04:58,230
We see that this method
takes one input parameter.

84
00:04:58,230 --> 00:05:01,860
They require an object
of type ListAdapter but

85
00:05:01,860 --> 00:05:06,160
in our code we only have
an ArrayAdapter, not a list adapter.

86
00:05:06,160 --> 00:05:09,270
So let's click on list adapter
to find out more information.

87
00:05:09,270 --> 00:05:12,890
Right, so now we're in the list adapter
documentation and if we scroll down

88
00:05:12,890 --> 00:05:17,250
a bit to the public methods we see
that it has to abstract methods.

89
00:05:17,250 --> 00:05:21,640
If we look at the top of the doc it says
that this adapter is an interface and

90
00:05:21,640 --> 00:05:24,440
remember we learn about
interfaces in the last lesson and

91
00:05:24,440 --> 00:05:27,180
how on click listener is all interface.

92
00:05:27,180 --> 00:05:31,110
But we need to provide an implementation
for the methods, all that means that we

93
00:05:31,110 --> 00:05:34,590
need to create a class that
implements the ListAdapter interface,

94
00:05:34,590 --> 00:05:38,710
so that we can properly set
an adapter on the ListView.

95
00:05:38,710 --> 00:05:42,320
Well luckily the Andrew team has
already done this for us, and

96
00:05:42,320 --> 00:05:46,250
we're free to create our own class that
implements the ListAdapter interface,

97
00:05:46,250 --> 00:05:48,820
but ArrayAdapter fits our needs.

98
00:05:48,820 --> 00:05:52,780
So let's take a look back at
the ArrayAdapter documentation page and

99
00:05:52,780 --> 00:05:55,360
we can look at the class
hierarchy diagram.

100
00:05:55,360 --> 00:05:58,670
So ArrayAdapter extends
from BaseAdapter.

101
00:05:58,670 --> 00:06:00,490
So let's check that out.

102
00:06:00,490 --> 00:06:03,890
So it says here that BaseAdapter
is an abstract class.

103
00:06:03,890 --> 00:06:06,370
And look,
it implements the ListAdapter interface.

104
00:06:07,520 --> 00:06:12,760
So this means that BaseAdapter can be
used whenever ListAdapter is required.

105
00:06:12,760 --> 00:06:16,200
An ArrayAdapter can be used
wherever a ListAdapter is required.

106
00:06:16,200 --> 00:06:20,510
All right, so I know there was a lot
of links to follow through and

107
00:06:20,510 --> 00:06:21,730
it might have been a maze.

108
00:06:21,730 --> 00:06:23,098
So thanks for trying to keep up and

109
00:06:23,098 --> 00:06:27,640
I'm going to help summarize all the
information that we just talked about.

110
00:06:27,640 --> 00:06:31,960
Now in this graphic that shows the
differences between the concrete class,

111
00:06:31,960 --> 00:06:35,020
abstract class,
interfaces we're going to discuss

112
00:06:35,020 --> 00:06:38,630
how adapters applying to each
of these three categories.

113
00:06:38,630 --> 00:06:44,250
So the list view set adapter method
requires a list adapter as its input.

114
00:06:44,250 --> 00:06:46,920
So the list adapter is an interface.

115
00:06:46,920 --> 00:06:49,580
And this means that no
states are implemented and

116
00:06:49,580 --> 00:06:51,530
all methods are abstract.

117
00:06:51,530 --> 00:06:56,800
It also turns out that the Android
team has created a base adapter class,

118
00:06:56,800 --> 00:07:00,080
which is an abstract class that
provides an implementation

119
00:07:00,080 --> 00:07:02,910
of some of the list adapter methods.

120
00:07:02,910 --> 00:07:06,190
But it also leaves some
other methods as abstract.

121
00:07:06,190 --> 00:07:08,692
Now this is where
the ArrayAdapter comes in.

122
00:07:08,692 --> 00:07:13,780
The ArrayAdapter is a concrete
class that has methods implemented.

123
00:07:13,780 --> 00:07:16,380
So no methods are left abstract, and

124
00:07:16,380 --> 00:07:21,480
we can create an object instance of
the ArrayAdapter and use it in our app.

125
00:07:21,480 --> 00:07:25,010
So since we verified that
ArrayAdapter is ListAdapter,

126
00:07:25,010 --> 00:07:28,570
we can pass in the itemsAdapter
variable as the input

127
00:07:28,570 --> 00:07:32,110
To the list view dot set
adapter method call.

128
00:07:32,110 --> 00:07:32,990
Hey, awesome work.

129
00:07:32,990 --> 00:07:35,560
And now you know how powerful these
three little lines of code are.

130
00:07:36,720 --> 00:07:39,500
I know it's a lot of information
to take in at once but

131
00:07:39,500 --> 00:07:42,720
it's definitely worth it to take
the time to understand all of it

132
00:07:42,720 --> 00:07:45,490
because the adapter is a really
common pattern in Android.

133
00:07:46,770 --> 00:07:51,850
So, that adapter knows about the data
source whether it's an array or a list.

134
00:07:51,850 --> 00:07:54,850
And it knows how to present
each of these items as a view.

135
00:07:54,850 --> 00:07:58,460
Meanwhile the ListView handles
showing these views on screen,

136
00:07:58,460 --> 00:08:00,840
detecting the user's touch gestures and

137
00:08:00,840 --> 00:08:05,460
maintaining state on where the user
is within the entire list.

138
00:08:05,460 --> 00:08:08,390
And here are the three lines
of code that summarize

139
00:08:08,390 --> 00:08:11,440
this interaction between
the ListView and the ArrayAdapter.

140
00:08:11,440 --> 00:08:13,240
We'll dive more into that later on.

141
00:08:13,240 --> 00:08:17,010
For now you can think of it as
a separation between the user interface

142
00:08:17,010 --> 00:08:17,850
and the data model.

143
00:08:19,220 --> 00:08:21,710
It's not exactly a clean separation

144
00:08:21,710 --> 00:08:25,070
because the array adapter
deals with the views but

145
00:08:25,070 --> 00:08:28,890
primarily the ListView is in charge
of the details of the user interface.

146
00:08:28,890 --> 00:08:31,390
While the adapter is
in charge of the data.

147
00:08:31,390 --> 00:08:35,570
Now because it's separated,
you can swap out one part for another.

148
00:08:35,570 --> 00:08:40,010
For example, you can hook up the same
array adapter to a grid view.

149
00:08:40,010 --> 00:08:43,200
The array adapter stays
exactly the same and

150
00:08:43,200 --> 00:08:48,830
instead of showing list item rows, the
grid view now asks for grid item views.

151
00:08:48,830 --> 00:08:52,160
So this becomes position 0, position 1.

152
00:08:52,160 --> 00:08:53,680
And so on and so on.

153
00:08:53,680 --> 00:08:57,300
And the adapter provides
each of these views still.

154
00:08:57,300 --> 00:09:00,090
So have you seen the drop
down menu in Android?

155
00:09:00,090 --> 00:09:03,100
Well, in Android speak
these are called spinners.

156
00:09:03,100 --> 00:09:04,190
And guess what?

157
00:09:04,190 --> 00:09:08,380
To populate each item in the drop down,
we attach an adapter to it.

158
00:09:08,380 --> 00:09:12,600
So each item in the menu comes
from an item in the data source.

159
00:09:12,600 --> 00:09:15,560
So as you can tell you run into
the adapter pattern as you build

160
00:09:15,560 --> 00:09:16,860
Android apps.

161
00:09:16,860 --> 00:09:19,510
So it's critical that
you understand it now.

162
00:09:19,510 --> 00:09:24,080
In the near term we're going to see the
pattern come back again in lesson five.

163
00:09:24,080 --> 00:09:28,990
For this next task, try to modify some
of the list view adapter code and

164
00:09:28,990 --> 00:09:29,739
see what happens.

165
00:09:30,740 --> 00:09:34,040
Then try to use the grid view
instead of the list view.

166
00:09:34,040 --> 00:09:37,130
So grid view also recycles views and

167
00:09:37,130 --> 00:09:39,360
needs an adapter to know
what information to display.

168
00:09:39,360 --> 00:09:42,370
So this is all for
experimentation purposes.

169
00:09:42,370 --> 00:09:44,880
And at the end of the task
I'll ask you to go back and

170
00:09:44,880 --> 00:09:46,709
reverse your code to using list views.

171
00:09:47,740 --> 00:09:50,120
So here are the specifics
of the practice.

172
00:09:50,120 --> 00:09:51,920
Instead of using a list view,

173
00:09:51,920 --> 00:09:55,840
try using a grid view to display
the words in the numbers activity.

174
00:09:55,840 --> 00:09:58,140
You can use the same adapter
that we created earlier.

175
00:09:58,140 --> 00:10:00,180
And if you do need some help,

176
00:10:00,180 --> 00:10:04,128
you can refer to the article that I've
linked below that discusses grid view.

177
00:10:04,128 --> 00:10:08,140
But I want to let you know before you
go too far down the rabbit hole and

178
00:10:08,140 --> 00:10:11,490
start copying and
pasting a lot of code from the article.

179
00:10:11,490 --> 00:10:16,860
You should be aware that this task of
changing from the ListView to a GridView

180
00:10:16,860 --> 00:10:21,230
can be done in the eWalk app by simply
changing a couple lines of codes.

181
00:10:21,230 --> 00:10:24,430
So after you've tried out
this task go back and

182
00:10:24,430 --> 00:10:26,990
change your code to
using a list view again.

183
00:10:26,990 --> 00:10:29,180
All right, best of luck and
have fun experimenting.
