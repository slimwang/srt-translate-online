1
00:00:00,370 --> 00:00:01,951
So, how are we going to do the direction

2
00:00:01,951 --> 00:00:05,360
prediction? We are going to have a table that

3
00:00:05,360 --> 00:00:08,140
we will call, a Branch History Table, or BHT.

4
00:00:08,140 --> 00:00:11,026
We will take the PC of the instruction, grab

5
00:00:11,026 --> 00:00:14,614
the least significant bits, and that's what we index

6
00:00:14,614 --> 00:00:17,750
into this table with. So, it's the same, as

7
00:00:17,750 --> 00:00:20,860
when indexing into the BTB. But the entry here

8
00:00:20,860 --> 00:00:25,664
is much smaller. The simplest predictor will simply have

9
00:00:25,664 --> 00:00:28,997
a 1-bit here, that tells us if this is

10
00:00:28,997 --> 00:00:33,239
a not a taken branch, meaning it's a non-branch

11
00:00:33,239 --> 00:00:36,572
or a not taken branch or when it's one,

12
00:00:36,572 --> 00:00:40,470
it says that this is a taken branch. If we

13
00:00:40,470 --> 00:00:45,180
get a zero from here, we just increment the PC. If we get a one, we use the

14
00:00:45,180 --> 00:00:47,894
BTB to tell us where to go. Just like

15
00:00:47,894 --> 00:00:50,887
we were updating the BTB, we can update this once

16
00:00:50,887 --> 00:00:54,880
we resolve the branch. If we resolve to a

17
00:00:54,880 --> 00:00:58,380
taken branch then we put a one here and we

18
00:00:58,380 --> 00:01:01,650
write the destination address into the BTB. If we

19
00:01:01,650 --> 00:01:04,425
get a zero, if we, decide that the branch is

20
00:01:04,425 --> 00:01:06,975
not taken or that the instruction is not a

21
00:01:06,975 --> 00:01:09,832
branch. Then we put a zero here and we don't

22
00:01:09,832 --> 00:01:12,264
update the BTB so that we can use the BTB

23
00:01:12,264 --> 00:01:15,988
only for target addresses that we really, really need the

24
00:01:15,988 --> 00:01:21,420
BTB for. Because an entry here can be only a single bit.

25
00:01:21,420 --> 00:01:26,130
This table can be quite large, so we can have lots of instructions. Have

26
00:01:26,130 --> 00:01:29,320
entries here, avoiding conflicts between instructions

27
00:01:29,320 --> 00:01:32,500
that commonly execute, while still reserving the

28
00:01:32,500 --> 00:01:37,450
small BTB, which had much fewer entries only for branches in that code.
