1
00:00:00,300 --> 00:00:02,919
What's really interesting
in this representation is,

2
00:00:02,919 --> 00:00:05,849
that the edges embody
the rules of the game.

3
00:00:05,849 --> 00:00:06,539
For instance,

4
00:00:06,540 --> 00:00:10,629
you can only go to a finite number of
next states from each current state.

5
00:00:10,630 --> 00:00:11,830
>> Hm, you're right.

6
00:00:11,830 --> 00:00:14,460
It limits the number of moves
we might need to consider,

7
00:00:14,460 --> 00:00:17,359
especially later in the game,
when the board is more full.

8
00:00:17,359 --> 00:00:20,109
But I can see that there are still a lot
of nodes here that need to be expanded

9
00:00:20,109 --> 00:00:21,519
right at the beginning.

10
00:00:21,519 --> 00:00:22,899
How do we address that?

11
00:00:22,899 --> 00:00:23,939
>> That's true.

12
00:00:23,940 --> 00:00:27,150
On a three by three board,
the very first move has nine different

13
00:00:27,149 --> 00:00:30,769
possibilities, and then,
eight for the opponent and so on.

14
00:00:30,769 --> 00:00:33,240
>> But some of these are pretty
clearly wasteful moves.

15
00:00:33,240 --> 00:00:37,560
So for example here, it's o's turn,
but it doesn't make sense to go here.

16
00:00:37,560 --> 00:00:41,300
Because there's one x in that row and
one in the same column.

17
00:00:41,299 --> 00:00:44,059
This move will never contribute
to a winning combination.

18
00:00:44,060 --> 00:00:46,150
>> Yes, that's a great observation.

19
00:00:46,149 --> 00:00:50,659
Being able to ignore moves based on easy
to evaluate conditions like this is,

20
00:00:50,659 --> 00:00:52,639
known as pruning the search tree.

21
00:00:52,640 --> 00:00:55,160
Can you think of any
other search indicators?

22
00:00:55,159 --> 00:00:56,459
>> Maybe.

23
00:00:56,460 --> 00:00:59,289
How about the fact that we're
playing against a human opponent

24
00:00:59,289 --> 00:01:00,990
that's also trying to win?

25
00:01:00,990 --> 00:01:02,670
>> You're on the right track.

26
00:01:02,670 --> 00:01:05,040
>> Okay so
I know that if I put an O here,

27
00:01:05,040 --> 00:01:08,550
the opponent is definitely going to
try to close this and win the game.

28
00:01:08,549 --> 00:01:11,579
So, maybe that's not a good
move to play either, yes?

29
00:01:11,579 --> 00:01:14,459
>> And
that is the gist of adversarial search.

30
00:01:14,459 --> 00:01:18,979
We'll learn how to formulize these
intuitions using the mini-max algorithm.

31
00:01:18,980 --> 00:01:22,490
Where you are trying to maximize your
chances of winning on your turn.

32
00:01:22,489 --> 00:01:26,659
And your opponent is trying to minimize
your chances of winning on their turn.

33
00:01:26,659 --> 00:01:31,399
This approach is so effective, because
when you rule out a move as being bad.

34
00:01:31,400 --> 00:01:36,120
You are actually getting rid of it's
potential successors from consideration.

35
00:01:36,120 --> 00:01:39,380
>> So, that seems like this is a better
definition of an intelligent agent

36
00:01:39,379 --> 00:01:40,209
to me.

37
00:01:40,209 --> 00:01:44,699
It's able to anticipate and plan around
expected changes in its environment.

38
00:01:44,700 --> 00:01:47,560
Including, those introduced
by other agents.

39
00:01:47,560 --> 00:01:48,930
But game playing is one thing,

40
00:01:48,930 --> 00:01:52,080
I wonder how AI handles
the complexities of the real world.

