1
00:00:00,000 --> 00:00:03,000
So now that we have a better understanding of how to check

2
00:00:03,000 --> 00:00:07,000
that our program is correct and test it to gain confidence,

3
00:00:07,000 --> 00:00:10,000
let's talk about optimization--making our program faster.

4
00:00:10,000 --> 00:00:13,000
Over on the right, I've doodled the tortoise and the hare.

5
00:00:13,000 --> 00:00:17,000
You can tell this is a hare and not, let's say, a mutated donkey

6
00:00:17,000 --> 00:00:20,000
because of the label; those labels are always correct.

7
00:00:20,000 --> 00:00:25,000
This bears reference to one of Aesop's fables--a Greek writer from times long ago--

8
00:00:25,000 --> 00:00:30,000
in which the hare, although in some sense faster was relatively lazy

9
00:00:30,000 --> 00:00:32,000
and was eventually beaten out by the tortoise.

10
00:00:32,000 --> 00:00:34,000
In the real world, performance matters.

11
00:00:34,000 --> 00:00:38,000
We've heard, for example, that if you don't render a web page in 6 seconds or less

12
00:00:38,000 --> 00:00:41,000
shoppers will go to another website.

13
00:00:41,000 --> 00:00:43,000
For the vast majority of applications,

14
00:00:43,000 --> 00:00:48,000
things in this class: airline autopilots, banking transactions,

15
00:00:48,000 --> 00:00:51,000
things related to energy or power or transportation,

16
00:00:51,000 --> 00:00:55,000
performance matters less than correctness.

17
00:00:55,000 --> 00:00:59,000
Job one--test it, debug it, get the right answer.

18
00:00:59,000 --> 00:01:01,000
Job two--make it fast.

19
00:01:01,000 --> 00:01:06,000
In this sense, optimization refers to improving the performance of our code.

20
00:01:06,000 --> 00:01:12,000
Can we make our web browser take less time to render the same web pages?

21
00:01:12,000 --> 00:01:16,000
A lot of modern interpreters, from JavaScript interpreters to Python,

22
00:01:16,000 --> 00:01:21,000
use a technique known as Just-in-Time Improvement,

23
00:01:21,000 --> 00:01:23,000
which is sometimes abbreviated as JIT,

24
00:01:23,000 --> 00:01:27,000
to fix up or improve code right before they run it

25
00:01:27,000 --> 00:01:30,000
so that it's faster but gets the same output.

26
00:01:30,000 --> 00:01:32,000
So our basic optimization idea is going to be to

27
00:01:32,000 --> 00:01:36,000
replace the input webpage--the HTML or JavaScript fragment--

28
00:01:36,000 --> 00:01:41,000
with one that takes less time to process but has--and this is super critical--

29
00:01:41,000 --> 00:01:46,000
I cannot emphasize this enough--exactly the same meaning.

30
00:01:46,000 --> 00:01:51,000
We must produce the same output with optimizations on and with optimizations off,

31
00:01:51,000 --> 00:01:54,000
aside from the time it takes.

32
00:01:54,000 --> 00:01:56,000
We absolutely can't change the meaning.

33
00:01:56,000 --> 00:01:58,000
We have to be correct.

34
00:01:58,000 --> 00:02:02,000
In that sense, optimization for programming languages

35
00:02:02,000 --> 00:02:07,000
is somewhat similar to editing for conciseness in natural languages.

36
00:02:07,000 --> 00:02:10,000
If you say something redundant

37
00:02:10,000 --> 00:02:13,000
and it's possible to remove that redundancy without changing the meaning,

38
00:02:13,000 --> 00:02:15,000
you can strike it from written text.

39
00:02:15,000 --> 00:02:18,000
We're going to do the same thing with optimization.

40
00:02:18,000 --> 00:02:21,000
Here I've written JavaScript code to compute the factorial function,

41
00:02:21,000 --> 00:02:24,000
and this code is correct.

42
00:02:24,000 --> 00:02:27,000
Now, of course, as soon as I say that there's going to be one minor typo,

43
00:02:27,000 --> 00:02:30,000
but let's just assert that this code is correct.

44
00:02:30,000 --> 00:02:32,000
It actually computes factorial.

45
00:02:32,000 --> 00:02:36,000
But it's a little slower than it needs to be.

46
00:02:36,000 --> 00:02:41,000
You may have noticed that I wrote 1 times N times factorial of N minus 1

47
00:02:41,000 --> 00:02:44,000
instead of just N times factorial of N minus 1.

48
00:02:44,000 --> 00:02:48,000
This is correct--multiplying something by 1 doesn't change its meaning--

49
00:02:48,000 --> 00:02:50,000
but it's slower than necessary.

50
00:02:50,000 --> 00:02:55,000
If we're talking about arithmetic, whenever you see 1 times N,

51
00:02:55,000 --> 00:02:58,000
you could just replace it by N,

52
00:02:58,000 --> 00:03:01,000
and now you're saving time because we're removing notes from

53
00:03:01,000 --> 00:03:03,000
our abstract syntax tree.

54
00:03:03,000 --> 00:03:07,000
This means it takes less time to do our recursive walk and interpret it,

55
00:03:07,000 --> 00:03:09,000
and we have fewer multiplications.

56
00:03:09,000 --> 00:03:12,000
And multiplication is an arithmetic operation that this CPU has to perform;

57
00:03:12,000 --> 00:03:14,000
it takes some amount of time.

58
00:03:14,000 --> 00:03:16,000
In fact, especially in something like factorial,

59
00:03:16,000 --> 00:03:21,000
if I'm asking for the factorial of 10, we're going to call this function a large number of times.

60
00:03:21,000 --> 00:03:24,000
So even though it may not seem like I'm saving much,

61
00:03:24,000 --> 00:03:27,000
I save it every time we're in this loop.

62
00:03:27,000 --> 00:03:30,000
And this is why I suggested earlier that performing such a simplification

63
00:03:30,000 --> 00:03:35,000
or optimization is like editing someone's writing so that it's more concise.

64
00:03:35,000 --> 99:59:59,999
If I just edit that part away, this factorial is still correct; it just takes a little less time.
