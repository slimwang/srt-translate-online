1
00:00:00,000 --> 00:00:02,679
So how do we implement this on the GPU? Well, it's very simple.

2
00:00:02,679 --> 00:00:07,465
We're going to assign 1 thread per input element--in this case, 8 input elements.

3
00:00:07,465 --> 00:00:12,190
For each comparison, each thread simply needs to know if it's keeping the smaller or larger value.

4
00:00:12,190 --> 00:00:16,580
So we're actually doing each comparison twice--once on either side of the comparison--

5
00:00:16,580 --> 00:00:20,823
and the only difference is that 1 side of the comparison will keep the smaller element

6
00:00:20,823 --> 00:00:23,230
and 1 side will keep the larger element.

7
00:00:23,230 --> 00:00:26,110
Now, we do need to synchronize after each comparison.

8
00:00:26,110 --> 00:00:29,142
So after we're done with this particular set of comparisons,

9
00:00:29,142 --> 00:00:31,702
we synchronize and then begin the next stage

10
00:00:31,702 --> 00:00:34,870
and then synchronize and then begin the next stage and so on.

11
00:00:34,870 --> 00:00:37,449
So just a couple notes on the computation itself.

12
00:00:37,449 --> 00:00:41,446
One, if the input set is small enough to fit into shared memory,

13
00:00:41,446 --> 00:00:45,116
then a sorting network is actually a very efficient way to sort that input set.

14
00:00:45,116 --> 00:00:48,817
So in fact, many sorting algorithms that start by sorting small blocks of data,

15
00:00:48,817 --> 00:00:52,974
like merge sort, use a sorting network to do their sorts within a block.

16
00:00:52,974 --> 00:00:57,291
And it helps that a bitonic sort is probably the simplest sort to actually implement.

17
00:00:57,291 --> 00:01:00,684
Two, bitonic sort is not the only kind of sorting network.

18
00:01:00,684 --> 00:01:04,447
The odd-even merge sort is a different kind of sorting network

19
00:01:04,447 --> 00:01:09,014
that generally runs a little faster, but it's a little more complicated to explain or program.

20
00:01:09,014 --> 00:01:10,787
But the basic ideas are the same.

21
00:01:10,787 --> 00:01:14,140
So as a quiz, what I'd like you to do is fill in each of the black boxes

22
00:01:14,140 --> 00:01:18,194
with the correct numbers to make sure that these 4 input elements

23
00:01:18,194 --> 00:01:20,524
are sorted by an odd-even merge sort.
