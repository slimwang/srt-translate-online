1
00:00:00,120 --> 00:00:04,320
To deal with the mutual exclusion problem, pthread supports mutexes.

2
00:00:04,320 --> 00:00:08,650
As we explained when discussing Birrell's paper, mutexes provide a mechanism to

3
00:00:08,650 --> 00:00:12,490
solve the mutual exclusion problems among concurrent threads.

4
00:00:12,490 --> 00:00:17,010
Mutual exclusion lets us ensure that threads access shared state in

5
00:00:17,010 --> 00:00:18,800
a controlled manner.

6
00:00:18,800 --> 00:00:23,300
So that only one thread at a time can perform modifications or

7
00:00:23,300 --> 00:00:25,780
otherwise access that shared variable.

8
00:00:25,780 --> 00:00:31,510
Birrell proposed the use of the mutex itself and an operation to lock mutexes.

9
00:00:31,510 --> 00:00:37,830
In pthreads, the mutex data structure is represented via pi pthread mutex type.

10
00:00:37,830 --> 00:00:42,757
For the log operation, remember that Birrell used the block construct where

11
00:00:42,757 --> 00:00:46,715
the critical section was protected by these curly brackets.

12
00:00:46,715 --> 00:00:51,321
Where the open curly bracket meant that the mutex was being locked, and

13
00:00:51,321 --> 00:00:55,723
the closed curly bracket meant that the mutex was unlocked or free.

14
00:00:55,723 --> 00:01:01,069
In pthreads, this concept is supported explicitly, there is a separate pthread

15
00:01:01,069 --> 00:01:05,660
mutex lock operation and a separate pthread mutex unlock operation.

16
00:01:05,660 --> 00:01:10,270
Whatever code appears between these two statements will correspond to

17
00:01:10,270 --> 00:01:11,660
the critical section.

18
00:01:11,660 --> 00:01:17,200
As an example, remember that in the thread introductory lecture, we implemented

19
00:01:17,200 --> 00:01:22,050
the safe_insert operation using Birrell's construct in the following way.

20
00:01:22,050 --> 00:01:26,740
With pthreads, the same safe_insert operation would be implemented as follows,

21
00:01:26,740 --> 00:01:29,050
we would be explicitly be locking and

22
00:01:29,050 --> 00:01:34,880
unlocking the mutex around the insert operation in the shared list, my_list,

23
00:01:34,880 --> 00:01:39,750
and also note that the mutex is of appropriate type, pthread_mutex type.

24
00:01:39,750 --> 00:01:43,440
Pthread supports a number of other mutex related operations.

25
00:01:43,440 --> 00:01:45,600
Several of them are worth highlighting.

26
00:01:45,600 --> 00:01:49,050
First, mutexes must be explicitly initialized.

27
00:01:49,050 --> 00:01:54,220
This operation allocates a mutex data structure and also specifies its behavior.

28
00:01:54,220 --> 00:01:58,080
It takes as an argument a mutex attribute variable, and

29
00:01:58,080 --> 00:02:00,860
this is how we specify the mutex behavior.

30
00:02:00,860 --> 00:02:03,365
By passing now as this argument,

31
00:02:03,365 --> 00:02:08,840
we have an option to specify the default behavior from mutexes, or

32
00:02:08,840 --> 00:02:13,040
we can set one or more attributes that are associated with mutexes.

33
00:02:13,040 --> 00:02:16,300
For instance, pthreads permits mutexes and

34
00:02:16,300 --> 00:02:20,058
condition variables in general to be shared among processes.

35
00:02:20,058 --> 00:02:24,960
The default behavior would make a mutex private to a process, so only visible

36
00:02:24,960 --> 00:02:29,550
among the threads within a process, whereas we can explicitly modify that

37
00:02:29,550 --> 00:02:34,190
behavior and make sure that the mutex can be shared with other processes.

38
00:02:34,190 --> 00:02:38,253
Another interesting operation is pthread_mutex_trylock.

39
00:02:38,253 --> 00:02:43,530
Unlike the lock operation which will block the calling thread if the mutex is

40
00:02:43,530 --> 00:02:48,755
in use, what trylock will end up doing is it will check the mutex,

41
00:02:48,755 --> 00:02:53,470
and if it is in use, it will actually return immediately, and

42
00:02:53,470 --> 00:02:57,270
it will notify the calling thread that the mutex is not available.

43
00:02:57,270 --> 00:02:59,050
If the mutex is free,

44
00:02:59,050 --> 00:03:02,830
trylock will result in the mutex successfully being clocked.

45
00:03:02,830 --> 00:03:07,130
But if the mutex is locked, trylock will not block the calling thread.

46
00:03:07,130 --> 00:03:11,550
This gives the calling thread an option to go and do something else and

47
00:03:11,550 --> 00:03:15,310
perhaps come back a little bit later to check if the mutex is free.

48
00:03:15,310 --> 00:03:19,840
Also, you should make sure that you free up any pthread related data structures,

49
00:03:19,840 --> 00:03:23,850
and for mutex, for instance, you have the mutex destroy operation.

50
00:03:23,850 --> 00:03:27,910
These are just some of the operations pthread support from mutexes.

51
00:03:27,910 --> 00:03:31,760
The ones we described here are enough to get your started with pthreads, and you

52
00:03:31,760 --> 00:03:36,460
can always refer to the pthreads documentation for information on the others.

53
00:03:36,460 --> 00:03:39,920
In the previous lesson, we mentioned a number of common pitfalls where it

54
00:03:39,920 --> 00:03:41,780
comes to writing multithreaded programs.

55
00:03:41,780 --> 00:03:44,790
A few that are worth mentioning in the context of

56
00:03:44,790 --> 00:03:47,500
pthread mutexes include the following.

57
00:03:47,500 --> 00:03:51,910
Shared data should always be accessed through a single mutex.

58
00:03:51,910 --> 00:03:55,120
This is such a frequent error that it's worth reiterating.

59
00:03:55,120 --> 00:03:58,620
Next, the mutex scope must be visible to all threads.

60
00:03:58,620 --> 00:04:03,460
Remember, a mutex cannot be defined as a private variable to a single thread.

61
00:04:03,460 --> 00:04:08,890
Including main, you must declare all of your mutexes as global variables.

62
00:04:08,890 --> 00:04:12,230
Another important tip is to globally order the locks.

63
00:04:12,230 --> 00:04:14,920
Once we establish an order between the locks,

64
00:04:14,920 --> 00:04:19,839
basically between the mutexes in the pthreads program, then for all threads we

65
00:04:19,839 --> 00:04:23,860
have to make sure that the mutexes are locked in that particular order.

66
00:04:23,860 --> 00:04:27,800
Remember, we said that this is a way to ensure that dead locks don't happen.

67
00:04:27,800 --> 00:04:31,250
Finally, remember to always unlock a mutex.

68
00:04:31,250 --> 00:04:34,818
Moreover, make sure that you always unlock the correct mutex.

69
00:04:34,818 --> 00:04:37,180
Given that pthreads has separate lock and

70
00:04:37,180 --> 00:04:41,430
unlock operations, it can be easy to forget the unlock, and

71
00:04:41,430 --> 00:04:45,550
compilers will not necessarily tell you that there is a problem with your code.

72
00:04:45,550 --> 00:04:48,680
So you have to make sure that you keep track of your locks and unlocks.
