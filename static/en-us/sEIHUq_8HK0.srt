1
00:00:00,260 --> 00:00:03,200
In this lesson we're talking about threads and concurrency.

2
00:00:04,280 --> 00:00:06,250
So how am I going to visualize these concepts?

3
00:00:07,330 --> 00:00:10,050
Well, one way you may think of threads is that

4
00:00:10,050 --> 00:00:12,930
each thread is like a worker in a toy shop.

5
00:00:12,930 --> 00:00:17,750
But what qualities make a worker in a toy shop similar to a thread?

6
00:00:17,750 --> 00:00:22,150
The first quality is that a worker in a toy shop is an active entity.

7
00:00:22,150 --> 00:00:27,280
Secondly, a worker in a toy shop works simultaneously with others.

8
00:00:27,280 --> 00:00:31,460
And finally, a worker in a toy shop requires coordination.

9
00:00:31,460 --> 00:00:35,050
Especially when multiple workers are working at the same time.

10
00:00:35,050 --> 00:00:38,510
And perhaps even contributing to the same toy order.

11
00:00:38,510 --> 00:00:40,900
Let's elaborate on these points now.

12
00:00:40,900 --> 00:00:43,635
A worker is an active entity in the sense that

13
00:00:43,635 --> 00:00:48,280
it's executing a unit of work that is necessary for a given toy order.

14
00:00:48,280 --> 00:00:53,420
Many such workers can contribute to the entire effort required for

15
00:00:53,420 --> 00:00:55,230
an actual toy to be built.

16
00:00:55,230 --> 00:00:58,180
Next the worker can simultaneously work with others,

17
00:00:58,180 --> 00:00:59,660
this is pretty straightforward.

18
00:00:59,660 --> 00:01:04,200
You can imagine a shop floor with many workers, all simultaneously

19
00:01:04,200 --> 00:01:07,720
are concurrently hammering, sewing, building toys at the same time.

20
00:01:07,720 --> 00:01:11,820
They are working on the same order or others.

21
00:01:11,820 --> 00:01:15,410
And finally, while the workers can work simultaneously,

22
00:01:15,410 --> 00:01:17,580
this comes with some restrictions.

23
00:01:17,580 --> 00:01:21,770
Workers must coordinate their efforts in order to operate efficiently.

24
00:01:21,770 --> 00:01:24,850
For instance, workers may have to share tools,

25
00:01:24,850 --> 00:01:28,341
they may have to share some working areas, their workstations, or even

26
00:01:28,341 --> 00:01:33,230
parts while they're in the process of making toys and executing the toy orders.

27
00:01:33,230 --> 00:01:37,710
Now that we know about workers in a toy shop, what about threads?

28
00:01:37,710 --> 00:01:40,290
How do they fit into this analogy?

29
00:01:40,290 --> 00:01:43,470
First, threads are also active entities.

30
00:01:43,470 --> 00:01:48,260
Except in this case, threads execute a unit of work on behalf of a process.

31
00:01:48,260 --> 00:01:52,340
Next, threads can also work simultaneously with others, and

32
00:01:52,340 --> 00:01:55,250
this is where the term concurrency really applies.

33
00:01:55,250 --> 00:02:00,240
For instance, in modern systems that have multiple processors,

34
00:02:00,240 --> 00:02:04,360
multiple cores, you can have multiple threads really at

35
00:02:04,360 --> 00:02:08,449
the exact same time executing concurrently.

36
00:02:08,449 --> 00:02:11,650
But this obviously will require some level of coordination.

37
00:02:11,650 --> 00:02:14,630
And specifically when we talk about coordination, we're really

38
00:02:14,630 --> 00:02:19,828
mainly talking about coordinating access to the underlying platform resources.

39
00:02:19,828 --> 00:02:26,210
Sharing of I/O devices, the CPU course, memory, all of these and other systems

40
00:02:26,210 --> 00:02:30,840
resources must be carefully controlled and scheduled by the operating system.

41
00:02:30,840 --> 00:02:32,080
This begs the question,

42
00:02:32,080 --> 00:02:36,040
how do we determine which thread gets access to these resources?

43
00:02:36,040 --> 00:02:37,760
And as you will see in this lesson,

44
00:02:37,760 --> 00:02:42,080
the answer to the question is very important, designed decision for

45
00:02:42,080 --> 00:02:45,520
both operating systems, as well as software developers in general.
