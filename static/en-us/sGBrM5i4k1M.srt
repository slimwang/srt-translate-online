1
00:00:00,260 --> 00:00:04,765
So now we have what is called
a MOSI coherence protocol.

2
00:00:04,765 --> 00:00:10,150
MS and I are the same as before,
but now there is a new O state.

3
00:00:10,150 --> 00:00:17,110
So the MOSI protocol is like MSI,
except when we are in the M state and

4
00:00:17,110 --> 00:00:22,200
we snoop a read from the other core,
we provide the data as before.

5
00:00:22,200 --> 00:00:27,000
But we now move into the O state,
not the S state.

6
00:00:27,000 --> 00:00:31,561
When we are providing the data,
the memory now doesn't get accessed.

7
00:00:31,561 --> 00:00:36,040
In MSI, the memory would now need
to be written with the data.

8
00:00:36,040 --> 00:00:40,066
Here, we simply provide
the data to the requester,

9
00:00:40,066 --> 00:00:43,829
move to the O state without
updating the memory.

10
00:00:43,829 --> 00:00:47,161
While the block is in
the O state in a cache,

11
00:00:47,161 --> 00:00:52,440
it behaves similarly to the S state,
except that if we snoop a read,

12
00:00:52,440 --> 00:00:57,950
we continue to provide the data
just like we did in the M state.

13
00:00:57,950 --> 00:01:01,331
And that we need to write
the data back to memory,

14
00:01:01,331 --> 00:01:05,128
if the block in the O state
is replaced from that cache.

15
00:01:05,128 --> 00:01:08,714
And that's because all of the other
caches will have the block in either

16
00:01:08,714 --> 00:01:12,299
invalid or shared state, so they don't
know that the block is dirty and

17
00:01:12,299 --> 00:01:13,930
needs to be replaced.

18
00:01:13,930 --> 00:01:18,546
So the M state indicated both that we
have exclusive read/write access to

19
00:01:18,546 --> 00:01:22,203
the block, nobody else has it and
that the block is dirty.

20
00:01:22,203 --> 00:01:25,926
S indicated that we had the shared
read access to the block,

21
00:01:25,926 --> 00:01:30,470
others may also have it in shared
state and that the block is clean.

22
00:01:30,470 --> 00:01:32,996
The memory has an up to date copy.

23
00:01:32,996 --> 00:01:35,641
Now O combines the properties of M and

24
00:01:35,641 --> 00:01:40,928
S states in that it is a shared read
access state, but the block is dirty and

25
00:01:40,928 --> 00:01:44,682
we are responsible for
putting the data in memory and

26
00:01:44,682 --> 00:01:49,402
also because there is only one cache
with the block in the O state.

27
00:01:49,402 --> 00:01:53,207
That cache knows it can respond to
all the read accesses to the data, so

28
00:01:53,207 --> 00:01:54,700
that the memory doesn't.
