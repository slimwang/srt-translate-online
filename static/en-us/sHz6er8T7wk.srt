1
00:00:00,000 --> 00:00:04,000
Here's my answer. A dot matches any character in the text.

2
00:00:04,000 --> 00:00:07,000
If the text has at least one character, then there's going to be a match,

3
00:00:07,000 --> 00:00:11,000
and the match is going to have a remainder, which is all the rest of the text.

4
00:00:11,000 --> 00:00:14,000
That remainder is a set,

5
00:00:14,000 --> 00:00:19,000
and it's the set of one element, and the element is the text from the first character on.

6
00:00:19,000 --> 00:00:22,000
In other words, dropping off the 0th character.

7
00:00:22,000 --> 00:00:25,000
We're going to return that if there is any text at all.

8
00:00:25,000 --> 00:00:27,000
That is, if the text is not empty.

9
00:00:27,000 --> 00:00:31,000
Otherwise, if the text is empty then we're going to return the null set.

10
00:00:31,000 --> 00:00:33,000
Defined the null set down here.

11
00:00:33,000 --> 00:00:35,000
How about for oneof?

12
00:00:35,000 --> 00:00:40,000
Oneof takes a string of possible characters and what it should return is similar to dot.

13
00:00:40,000 --> 00:00:43,000
It should return the remaining characters if the first character

14
00:00:43,000 --> 00:00:47,000
is equal to one of the characters in x.

15
00:00:47,000 --> 00:00:50,000
We're going to return exactly the same thing,

16
00:00:50,000 --> 00:00:54,000
a set consisting of a signal answer which is the original text

17
00:00:54,000 --> 00:00:58,000
with the first character dropped off, and we're going to return that.

18
00:00:58,000 --> 00:01:05,000
What I'd like to be able to say if the text starts with any of the characters in x.

19
00:01:05,000 --> 00:01:11,000
It turns out that I can actually say exactly that--text.startswith(x),

20
00:01:11,000 --> 00:01:18,000
if I arrange to have x be a tuple of characters rather than a character string.

21
00:01:18,000 --> 00:01:23,000
Here I have the documentation from the Python manual for the string that starts with method,

22
00:01:23,000 --> 00:01:26,000
and it says it's true if the string starts with a prefix,

23
00:01:26,000 --> 00:01:30,000
so we can ask does some string start with a particular string--yes or no?

24
00:01:30,000 --> 00:01:34,000
But prefix can also be a tuple of prefixes to look for.

25
00:01:34,000 --> 00:01:38,000
All we have to do is arrange for that x to be a tuple,

26
00:01:38,000 --> 00:01:40,000
and then it automatically searches for all of them.

27
00:01:40,000 --> 00:01:46,000
What I'm saying is I want the API function oneof('antibiotic').

28
00:01:46,000 --> 00:01:51,000
That should return some object, but we're not yet specifying what that object is,

29
00:01:51,000 --> 00:01:55,000
such that the operator of that object is oneof,

30
00:01:55,000 --> 00:02:01,000
and the x for that object should be the tuple a, b, c.

31
00:02:01,000 --> 00:02:06,000
It's sort of a little optimization here that I've defined the API to construct

32
00:02:06,000 --> 00:02:12,000
an object of just the right form so that I can use it efficiently here.

33
00:02:12,000 --> 00:02:17,000
Just go ahead and check does the text start with any one of the possible x's.

34
00:02:17,000 --> 00:02:19,000
Otherwise, return no.

35
00:02:19,000 --> 00:02:24,000
If you didn't know about this form of text.startswith,

36
00:02:24,000 --> 00:02:32,000
you could have just checked to see if any of the character c for c in x.

37
00:02:32,000 --> 00:02:37,000
We'd say return the rest of the string if any of hte characters in x

38
00:02:37,000 --> 00:02:40,000
if the text starts with any one of those characters.

39
00:02:40,000 --> 99:59:59,999
Otherwise, return "no."
