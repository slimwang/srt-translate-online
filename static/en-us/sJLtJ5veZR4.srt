1
00:00:00,110 --> 00:00:03,420
So now that we know how to
find the block offset and

2
00:00:03,420 --> 00:00:07,000
the block number,
let's talk about the cache tags,

3
00:00:07,000 --> 00:00:10,860
which is how we determine which block
do we actually have in the cache.

4
00:00:10,860 --> 00:00:13,430
So our cache can contain
some number of lines.

5
00:00:13,430 --> 00:00:16,059
In this case, we have a four-line cache.

6
00:00:16,059 --> 00:00:20,040
We could have something for example,
64 bytes of data in each line.

7
00:00:20,040 --> 00:00:24,200
Let's say that any block from memory can
be placed in any of these four lines.

8
00:00:24,200 --> 00:00:27,800
In that case, when we are given
the address by the processor,

9
00:00:27,800 --> 00:00:31,110
the least significant bits
of the address will tell us

10
00:00:31,110 --> 00:00:35,380
where in the line we
are after we find the line.

11
00:00:35,380 --> 00:00:38,460
But each of these lines in the cache

12
00:00:38,460 --> 00:00:41,770
could contain any block
number from the memory.

13
00:00:41,770 --> 00:00:42,840
So the question is,

14
00:00:42,840 --> 00:00:47,370
how do we find whether our access
is actually a cache tag or not?

15
00:00:47,370 --> 00:00:52,780
And the answer is, in addition to
the data of the blocks, the cache

16
00:00:52,780 --> 00:00:57,720
also keeps a so-called tag that tells
it which block does it have here?

17
00:00:59,140 --> 00:01:04,540
In this particular cache,
the tag will contain the block number

18
00:01:04,540 --> 00:01:06,970
that the cache has in
each of these slots.

19
00:01:06,970 --> 00:01:10,630
So we need four tags because there
could be four blocks in this cache.

20
00:01:10,630 --> 00:01:15,430
So given the address, we take the block
number part of the address and

21
00:01:15,430 --> 00:01:18,670
compare it to each of the tags
we have in our cache.

22
00:01:18,670 --> 00:01:24,800
If one of these says one, that means
that the tag matches the block number

23
00:01:24,800 --> 00:01:30,200
and that means that our data is in
the corresponding line in the cache.

24
00:01:30,200 --> 00:01:34,340
Let's say that this is the situation
we have, so we have a tag match here.

25
00:01:34,340 --> 00:01:38,650
That means that we have a hit and
that our data is here in the cache.

26
00:01:39,810 --> 00:01:45,720
Now we can use the block offset to tell
us where in that line our data is and

27
00:01:45,720 --> 00:01:48,320
we take the data and
supply it to the processor.

28
00:01:48,320 --> 00:01:53,960
In this particular cache, we have
the offset part of the address here,

29
00:01:53,960 --> 00:01:59,630
and the block number is, in this case,
called the tag part of the address.

30
00:01:59,630 --> 00:02:04,950
When we have a cache miss, we will bring
the data here and we will put the block

31
00:02:04,950 --> 00:02:08,919
number in the corresponding tag so
that we can find this block later.

32
00:02:08,919 --> 00:02:13,790
We will see later that sometimes
the tag part of the address

33
00:02:13,790 --> 00:02:17,890
is not exactly the same as the block
number, but in this cache it is.
