1
00:00:00,000 --> 00:00:05,000
Welcome once again to another chance to practice your programming skills.

2
00:00:05,000 --> 00:00:10,000
Today we're going to take a look at a problem that's important for physical devices

3
00:00:10,000 --> 00:00:16,000
like yearbooks in a school or phone books or really any sorted index.

4
00:00:16,000 --> 00:00:20,000
The problem we're going to cover this time is how to organize

5
00:00:20,000 --> 00:00:23,000
and search through sorted information.

6
00:00:23,000 --> 00:00:26,000
The approach I want to take is to use a tree.

7
00:00:26,000 --> 00:00:29,000
We've seen trees before in some computer science programming.

8
00:00:29,000 --> 00:00:31,000
The particular kind of tree I'm going to focus on

9
00:00:31,000 --> 00:00:35,000
is one that has 2 branches at every level.

10
00:00:35,000 --> 00:00:39,000
Suppose I have a number of friends that I want to keep track of in my yearbook

11
00:00:39,000 --> 00:00:41,000
or in a telephone book.

12
00:00:41,000 --> 00:00:47,000
I could use a Python list to include all 4 of their names or all 4 of those elements.

13
00:00:47,000 --> 00:00:53,000
And I can check to see if an element is in a list in Python just by using the keyword "in"--

14
00:00:53,000 --> 00:00:56,000
putting the element on the left and the list on the right.

15
00:00:56,000 --> 00:00:59,000
But we might wonder, "What is Python doing behind the scenes?"

16
00:00:59,000 --> 00:01:01,000
"How is this implemented in practice?"

17
00:01:01,000 --> 00:01:04,000
One way to do it--and the way we'll explore today--

18
00:01:04,000 --> 00:01:09,000
is to build up a special kind of tree holding all of the information that I want to see.

19
00:01:09,000 --> 00:01:12,000
I'm going to start with the first element of my list

20
00:01:12,000 --> 00:01:14,000
and make it the root or the top of the tree.

21
00:01:14,000 --> 00:01:17,000
Let me sketch out the rest so the tree is easier to see.

22
00:01:17,000 --> 00:01:22,000
I've added the elements from my list--1, 2, 3 and 4--to this tree,

23
00:01:22,000 --> 00:01:27,000
and I've put them in a special order corresponding to how they'd fall

24
00:01:27,000 --> 00:01:29,000
in English alphabetical order.

25
00:01:29,000 --> 00:01:33,000
So since the J in Jacob comes before the M in Margaret,

26
00:01:33,000 --> 00:01:36,000
I've made Jacob the left child in Margaret.

27
00:01:36,000 --> 00:01:43,000
Since the N in Nelson comes after the M in Margaret--j, k, l, m, n, o, p;

28
00:01:43,000 --> 00:01:46,000
yes, I can remember the English alphabet--I've made it the right child.

29
00:01:46,000 --> 00:01:49,000
And the A in Alice follows all the way down here to the left.

30
00:01:49,000 --> 00:01:54,000
I'm going to construct a special tree to store information like this

31
00:01:54,000 --> 00:01:56,000
that has a number of properties.

32
00:01:56,000 --> 00:02:02,000
The first 2 just summarize or formalize this ordering intuition we had above.

33
00:02:02,000 --> 00:02:07,000
Everything to the left of Margaret and all the way down

34
00:02:07,000 --> 00:02:11,000
is less than or equal to--comes before in the alphabet,

35
00:02:11,000 --> 00:02:14,000
is a smaller number than if I'm storing phone numbers instead--

36
00:02:14,000 --> 00:02:17,000
the information stored at Margaret's node.

37
00:02:17,000 --> 00:02:21,000
Jacob and Alice both come before Margaret in the alphabet, so they're both on the left.

38
00:02:21,000 --> 00:02:27,000
And similarly, right subtrees contain only information that's greater than or equal to--

39
00:02:27,000 --> 00:02:29,000
larger, later in the alphabet.

40
00:02:29,000 --> 00:02:33,000
Nelson comes after Margaret, so it's here on the right.

41
00:02:33,000 --> 00:02:35,000
And then finally--and this is really important--

42
00:02:35,000 --> 00:02:41,000
both the left and the right subtrees also follow rules I, II, and III.

43
00:02:41,000 --> 00:02:44,000
It is turtles all the way down.

44
00:02:44,000 --> 00:02:47,000
That makes this tree something special in computer science:

45
00:02:47,000 --> 00:02:49,000
a recursive data structure.

46
00:02:49,000 --> 00:02:53,000
We've already seen recursive functions that are defined in terms of themselves.

47
00:02:53,000 --> 99:59:59,999
Now I'm talking about a recursive way to lay out data that's defined in terms of itself.
