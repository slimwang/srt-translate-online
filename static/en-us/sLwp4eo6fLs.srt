1
00:00:00,250 --> 00:00:02,450
Now that you've seen all
the parts of a function,

2
00:00:02,450 --> 00:00:04,450
let's put those pieces together.

3
00:00:04,450 --> 00:00:08,310
We'll write a few function definitions,
and then call those functions.

4
00:00:08,310 --> 00:00:11,519
We'll start with a description of the
task the function should accomplish and

5
00:00:11,519 --> 00:00:12,910
go from there.

6
00:00:12,910 --> 00:00:16,039
Here, our goal is to write a function
that takes in a string and

7
00:00:16,039 --> 00:00:19,149
returns the first
character of that string.

8
00:00:19,149 --> 00:00:21,640
We'll start with func,
and then we need a name.

9
00:00:21,640 --> 00:00:23,550
I'm going to call this
one firstCharacter.

10
00:00:24,839 --> 00:00:27,600
In general,
don't shy away from long names.

11
00:00:27,600 --> 00:00:30,400
Especially in the age of code
completion, it's more important to be

12
00:00:30,399 --> 00:00:33,750
descriptive than to save yourself
a few milliseconds of typing.

13
00:00:35,079 --> 00:00:39,539
So we have our name, next comes
the parameters between parentheses.

14
00:00:39,539 --> 00:00:42,149
Let's call the string we're
going to pass in word.

15
00:00:43,329 --> 00:00:48,979
word will be its local parameter name,
and then we specify its type, String.

16
00:00:48,979 --> 00:00:51,419
Next comes an arrow and the return type.

17
00:00:51,420 --> 00:00:54,460
Our return type in this
case is a character.

18
00:00:54,460 --> 00:00:56,899
And finally,
we get to the meat of the function.

19
00:00:56,899 --> 00:01:00,210
In between curly braces here, we'll
put the statements we want to execute.

20
00:01:01,320 --> 00:01:03,939
And I'm just going to add
a return statement here so

21
00:01:03,939 --> 00:01:05,450
the compiler stops complaining.

22
00:01:06,969 --> 00:01:10,280
There are a few different ways to
get the first character of a string.

23
00:01:10,280 --> 00:01:14,790
I'm going to use subscript syntax
with the index startIndex.

24
00:01:14,790 --> 00:01:17,600
And of course, once we get that value,
we want to return it.

25
00:01:18,659 --> 00:01:21,969
Now, since this function doesn't
belong to any particular class,

26
00:01:21,969 --> 00:01:23,640
it's a global function.

27
00:01:23,640 --> 00:01:26,829
So in order to call it,
we just write its name, firstCharacter,

28
00:01:26,829 --> 00:01:29,944
and next we'll pass in
a parameter between parentheses.

29
00:01:31,170 --> 00:01:35,790
Now, notice that we didn't specify
an external name for our parameter.

30
00:01:35,790 --> 00:01:37,890
We only gave it the local name, word.

31
00:01:38,957 --> 00:01:41,539
If you don't specify
an external parameter name,

32
00:01:41,540 --> 00:01:44,880
the external name matches
the local name by default.

33
00:01:44,879 --> 00:01:48,030
So here we'll type word, and
then the string we want to pass in.

34
00:01:49,120 --> 00:01:52,626
What if we did specify an external
name for our parameter?

35
00:01:52,626 --> 00:01:55,505
I'm going to suggest that we
use the preposition of as our

36
00:01:55,504 --> 00:01:56,949
external parameter name.

37
00:01:58,090 --> 00:02:00,920
In general, it's nice to choose
parameter names such that

38
00:02:00,920 --> 00:02:03,390
the documentation reads
like an English sentence.

39
00:02:04,480 --> 00:02:08,419
Now, our function definition will
read firstCharacter(of word:).

40
00:02:09,599 --> 00:02:12,549
And now that we've specified
an external parameter name,

41
00:02:12,550 --> 00:02:15,100
we switch out the external parameter
name in our function call.

42
00:02:16,389 --> 00:02:20,209
And we can see here in the side bar
that the function is evaluating to M.

