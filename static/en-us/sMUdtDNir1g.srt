1
00:00:00,090 --> 00:00:03,480
So all the memory protection
stuff that we have talked about,

2
00:00:03,480 --> 00:00:08,690
how can we use that to prevent
malicious code execution on the stack?

3
00:00:08,690 --> 00:00:11,890
Okay, remember, you're going to alter
the return address, then you're going

4
00:00:11,890 --> 00:00:14,630
to insert some instructions where
you're going to transfer control and

5
00:00:14,630 --> 00:00:15,530
things like that.

6
00:00:15,530 --> 00:00:17,550
So one of the things
we're going to do is,

7
00:00:17,550 --> 00:00:20,480
what if we have a non-executable stack?

8
00:00:20,480 --> 00:00:24,510
We actually talked about that's one of
the protections for code injection,

9
00:00:24,510 --> 00:00:28,800
because you have to inject your code
when you overwrite the return address to

10
00:00:28,800 --> 00:00:29,990
point to this code.

11
00:00:29,990 --> 00:00:34,480
And then you execute that code,
that's how a successful exploit works.

12
00:00:34,480 --> 00:00:39,979
So now think what we can do if we
made the stack non-executable, right?

13
00:00:39,979 --> 00:00:43,148
So this is important,
non-executable stack,

14
00:00:43,148 --> 00:00:49,050
which means you could go right into it,
you can store some instructions into it.

15
00:00:49,050 --> 00:00:53,827
So in some sense you're able to inject
the instructions onto the stack,

16
00:00:53,827 --> 00:00:57,208
but you will not be able
to to execute those, okay?

17
00:00:57,208 --> 00:01:00,791
Because remember we're talking
with address consolation and

18
00:01:00,791 --> 00:01:04,507
space level entries, and
read write execute permissions in each

19
00:01:04,507 --> 00:01:08,862
of those pages that you can access
through the space level entries.

20
00:01:08,862 --> 00:01:14,136
Well, if we say it's non-executable,
non-executable is you can only read or

21
00:01:14,136 --> 00:01:19,342
write [INAUDIBLE] location when you want
to fetch an instruction off the stack.

22
00:01:19,342 --> 00:01:21,812
This is your injection code
that we are talking about.

23
00:01:21,812 --> 00:01:26,402
You can't execute off of that, so
setting the permission to non-execute

24
00:01:26,402 --> 00:01:31,500
actually is going to prevent malicious
code to inject code on the stack,

25
00:01:31,500 --> 00:01:34,630
and use the buffer overflows
to transfer control to it, and

26
00:01:34,630 --> 00:01:37,850
successfully exploit
a program by doing that.

27
00:01:37,850 --> 00:01:41,620
A simple thing we can do is,
you can't execute off the stack, so

28
00:01:41,620 --> 00:01:44,050
your injection code
can't be on the stack.

29
00:01:44,050 --> 00:01:45,190
So, this sort of protection,

30
00:01:45,190 --> 00:01:49,980
actually more than operating systems,
make the stack non-executable.

31
00:01:49,980 --> 00:01:54,710
So, the way you understand that is,
this protection comes because

32
00:01:54,710 --> 00:01:58,140
that portion of the address
space where the stack lives.

33
00:01:58,140 --> 00:02:01,150
The page table entries that are used to

34
00:02:01,150 --> 00:02:05,680
translate addresses from the range
of addresses with the stack is,

35
00:02:05,680 --> 00:02:10,199
those page table entries have
execution permission turned off.

36
00:02:10,199 --> 00:02:12,550
So you can't execute off

37
00:02:12,550 --> 00:02:16,710
the stack because it's going to
require that you fetch an instruction

38
00:02:16,710 --> 00:02:20,230
from a certain memory location where
the execute permission is not there.

39
00:02:20,230 --> 00:02:24,360
So memory isolation protection,
that discussion we've been having,

40
00:02:24,360 --> 00:02:28,680
gives us a simple way to protect
our execution on the stack

41
00:02:28,680 --> 00:02:31,300
by making the stack non-executable.

42
00:02:31,300 --> 00:02:36,730
And that avoids or
prevents this malicious code to

43
00:02:36,730 --> 00:02:41,440
use a buffer of overflows and
use code injection on this stack.
