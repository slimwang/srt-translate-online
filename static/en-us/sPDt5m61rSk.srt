1
00:00:00,280 --> 00:00:02,650
Okay, since we changed
the data model around,

2
00:00:02,650 --> 00:00:04,620
we're going to need to
do some refactoring.

3
00:00:04,620 --> 00:00:06,480
Let's see what classes
we're going to touch.

4
00:00:06,480 --> 00:00:09,590
This is a pretty big change in the way
that we're thinking about our data, so

5
00:00:09,590 --> 00:00:11,870
I'm going to try to divide
up these changes into steps.

6
00:00:11,870 --> 00:00:14,630
The first step is to
delete old constants.

7
00:00:14,630 --> 00:00:16,562
I'm going to be here in
the Constants class.

8
00:00:16,562 --> 00:00:19,540
You're going to remove
the whole active list node and

9
00:00:19,540 --> 00:00:22,430
as such, there's some constants that
you're going to no longer need.

10
00:00:22,430 --> 00:00:25,760
If you move these constants you can
easily see the places in your code that

11
00:00:25,760 --> 00:00:28,260
were getting data from
the old active list location.

12
00:00:28,260 --> 00:00:28,880
There's one here,

13
00:00:28,880 --> 00:00:32,450
which is just the word active lists
that was being appended to your URLs.

14
00:00:32,450 --> 00:00:33,450
And then down here,

15
00:00:33,450 --> 00:00:36,430
in the URL constants, we also have
a constant that we can remove.

16
00:00:36,430 --> 00:00:38,198
Okay, and now when you run
your code you're going to get

17
00:00:38,198 --> 00:00:40,766
a lot of errors from the different
places that we're using these constants.

18
00:00:40,766 --> 00:00:42,006
You can go through those errors or

19
00:00:42,006 --> 00:00:43,874
if you really squeamish
about breaking your app.

20
00:00:43,874 --> 00:00:46,239
You can right click or
use the keyboard shortcut and

21
00:00:46,239 --> 00:00:48,100
use the Find Usages command.

22
00:00:48,100 --> 00:00:49,446
Okay, let's go to the next step.

23
00:00:49,446 --> 00:00:51,630
The next step is fixing up
the read operations and

24
00:00:51,630 --> 00:00:52,969
this should be fairly quick.

25
00:00:52,969 --> 00:00:54,607
You should think about
the screens again, and

26
00:00:54,607 --> 00:00:56,860
which parts we'll need to read for
the new data location.

27
00:00:56,860 --> 00:00:58,710
For example, all of this is list data,

28
00:00:58,710 --> 00:01:01,200
it probably needs to read
from the new data location.

29
00:01:01,200 --> 00:01:02,730
And this list name over here,

30
00:01:02,730 --> 00:01:05,680
also list data, probably needs to
read from the new list location.

31
00:01:05,680 --> 00:01:07,820
Updating writing will be
a bit more difficult.

32
00:01:07,820 --> 00:01:11,210
Remember, whenever you change some
detail about the shopping list,

33
00:01:11,210 --> 00:01:14,790
other than the items, it's going to
need to change in multiple places now.

34
00:01:14,790 --> 00:01:17,340
It'll need to change in
the owner's shopping list and

35
00:01:17,340 --> 00:01:20,250
in the shopping list of all the users
that the owner has shared the list with.

36
00:01:20,250 --> 00:01:22,675
So I have a couple of thoughts of
the best way to approach this.

37
00:01:22,675 --> 00:01:25,710
See if you remember a discussion
about using updateChildren?

38
00:01:25,710 --> 00:01:27,690
Not sure when we had it, but basically,

39
00:01:27,690 --> 00:01:31,302
updateChildren is preferable to set
value because it allows you to update

40
00:01:31,302 --> 00:01:34,055
a bunch of different places
a good database all at once.

41
00:01:34,055 --> 00:01:36,450
And therefore, you don't need to
worry about consistency issues.

42
00:01:36,450 --> 00:01:39,280
Now that we've got a bunch of shopping
lists that we want to keep in sync,

43
00:01:39,280 --> 00:01:41,390
it'll be even more important
to use updateChildren.

44
00:01:41,390 --> 00:01:44,460
This will keep you from getting
into inconsistent half baked state,

45
00:01:44,460 --> 00:01:47,140
where some users have updated lists and
others don't.

46
00:01:47,140 --> 00:01:50,180
You might also remember that I talked
about making a helper method, and

47
00:01:50,180 --> 00:01:54,090
this method is specifically for keeping
copies of the same object synced.

48
00:01:54,090 --> 00:01:56,000
And this helper method
would be specifically for

49
00:01:56,000 --> 00:01:59,100
updating a property of a shopping
list in multiple places.

50
00:01:59,100 --> 00:02:01,840
The method could take information
about the shopping list and

51
00:02:01,840 --> 00:02:02,930
the property to update.

52
00:02:02,930 --> 00:02:06,100
And then, make that update to the
appropriate locations throughout your

53
00:02:06,100 --> 00:02:08,350
app using key value pairs in a hash map.

54
00:02:08,350 --> 00:02:10,020
When you're generating this hash map for

55
00:02:10,020 --> 00:02:13,240
using updateChildren, remember that
every list is going to have an owner and

56
00:02:13,240 --> 00:02:15,700
eventually they'll all
have a shared with a list.

57
00:02:15,700 --> 00:02:17,580
We haven't implemented sharing yet, so

58
00:02:17,580 --> 00:02:20,750
right now just focus on the code
to update the owner of the list.

59
00:02:20,750 --> 00:02:23,690
It seems a little silly because you're
using updateChildren to only update one

60
00:02:23,690 --> 00:02:27,130
property but I'll make the switch
to using shared with a lot easier.

61
00:02:27,130 --> 00:02:29,040
Whenever and
wherever you change a property for

62
00:02:29,040 --> 00:02:32,000
a shopping list, you should be using
this method that you just made.

63
00:02:32,000 --> 00:02:34,640
Okay, so here are all the thoughts
I have about the refactor and

64
00:02:34,640 --> 00:02:37,270
I've also included the finalized
database schema the notes again.

65
00:02:37,270 --> 00:02:39,760
Why don't you take a look at
the spec and then update the out.

66
00:02:39,760 --> 00:02:40,340
Thanks a bunch.
