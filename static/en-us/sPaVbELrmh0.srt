1
00:00:00,520 --> 00:00:03,200
So, I'm going to provide a start on this code and now

2
00:00:03,200 --> 00:00:06,310
we'll leave the crucial part of it for you to do as

3
00:00:06,310 --> 00:00:09,270
a quiz. You should feel free at any point to stop

4
00:00:09,270 --> 00:00:11,230
and try to figure out more of the code on your own.

5
00:00:11,230 --> 00:00:13,810
There are lots of different ways to do this and we'll

6
00:00:13,810 --> 00:00:17,500
show you one. And you'll finish that as a quiz. So, the

7
00:00:17,500 --> 00:00:21,740
first thing we're going to do is define two constants. So, we're

8
00:00:21,740 --> 00:00:25,540
going to use d as the damping factor. And I'll use 0.8 as

9
00:00:25,540 --> 00:00:29,740
my damping factor. That's the probability, thinking about

10
00:00:29,740 --> 00:00:32,090
our random web surfer, that she selects the link

11
00:00:32,090 --> 00:00:34,540
on the current page, rather than starting over with

12
00:00:34,540 --> 00:00:37,100
a new random page. The other constant I'm going to

13
00:00:37,100 --> 00:00:40,830
define here we'll call numloops. That's the number of

14
00:00:40,830 --> 00:00:44,460
times we're going to go through the relaxation. What we're

15
00:00:44,460 --> 00:00:47,570
computing is the value of rank at some time

16
00:00:47,570 --> 00:00:50,860
step. The number of times we go through that

17
00:00:50,860 --> 00:00:53,590
is going to determine the accuracy of our ranks. We'll

18
00:00:53,590 --> 00:00:56,720
use ten as the number of loops. You can experiment with

19
00:00:56,720 --> 00:00:59,210
changing that, and one of the questions in the homework

20
00:00:59,210 --> 00:01:01,820
assignment will ask you to think about what happens when you

21
00:01:01,820 --> 00:01:04,010
change that. So, now we need to start, we said

22
00:01:04,010 --> 00:01:07,140
initially the rank of each url is 1 divided by the

23
00:01:07,140 --> 00:01:11,640
number of pages and so the dictionary ranks, we want to initialize

24
00:01:11,640 --> 00:01:15,250
with those values. So, we are going to create an empty dictionary.

25
00:01:15,250 --> 00:01:18,456
We'll call it ranks. The number of pages, the number of

26
00:01:18,456 --> 00:01:21,010
pages, we can get from the graph. The graph is a

27
00:01:21,010 --> 00:01:24,110
dictionary of nodes and len of graph will tell us the

28
00:01:24,110 --> 00:01:26,600
number of entries in that dictionary. So, that's the number of

29
00:01:26,600 --> 00:01:29,490
nodes in the graph which is the number of pages that

30
00:01:29,490 --> 00:01:32,480
we've crawled. And now we want to go through the pages

31
00:01:32,480 --> 00:01:37,090
initializing each page with the value one divided by npage, and

32
00:01:37,090 --> 00:01:40,950
I'm remembering to use 1.0 here to make sure the division

33
00:01:40,950 --> 00:01:43,290
is done as floating point division and we get an

34
00:01:43,290 --> 00:01:47,170
accurate number rather than inner shirt division. So, now, we've

35
00:01:47,170 --> 00:01:50,070
initialized the ranks. We have a dictionary that maps each

36
00:01:50,070 --> 00:01:52,700
page to its current rank, which is one divided by

37
00:01:52,700 --> 00:01:54,650
the number of pages. So, now, we get to the

38
00:01:54,650 --> 00:01:58,970
interesting part. We need a loop that's going to go through

39
00:01:58,970 --> 00:02:02,670
the number of times of numloops. Each time through this

40
00:02:02,670 --> 00:02:05,960
loop, what we want to do is update the new ranks

41
00:02:06,980 --> 00:02:09,469
based on this formula, using the old ranks and then, at

42
00:02:09,469 --> 00:02:12,390
the end of the loop, we are going to make the variable

43
00:02:12,390 --> 00:02:15,220
ranks hold what was previous new ranks and that way, we

44
00:02:15,220 --> 00:02:17,220
can keep going, each time we are going to get a new value

45
00:02:17,220 --> 00:02:20,080
from newranks. At the end of doing all updates, we are

46
00:02:20,080 --> 00:02:24,610
going to update ranks to refer to whatever newranks is. So, that

47
00:02:24,610 --> 00:02:26,900
means each time through this loop we are going to create

48
00:02:26,900 --> 00:02:32,120
a new dictionary called newranks that starts as empty, and we're going

49
00:02:32,120 --> 00:02:34,970
to add all the pages to newranks as we update

50
00:02:34,970 --> 00:02:38,200
their rank. So, to do that we need to go through

51
00:02:38,200 --> 00:02:41,120
the pages in the graph and for each page what we

52
00:02:41,120 --> 00:02:44,480
want to do is compute the new rank for that page.

53
00:02:44,480 --> 00:02:47,145
And the first thing we'll do is this part. The

54
00:02:47,145 --> 00:02:51,345
new rank is 1 minus d divided by npages plus this

55
00:02:51,345 --> 00:02:54,670
summation. So, the first thing we will do is introduce a

56
00:02:54,670 --> 00:02:57,420
new variable, we will call it newrank and we will assign

57
00:02:57,420 --> 00:02:59,790
it to this value. Then we are going to update it as

58
00:02:59,790 --> 00:03:04,460
we go through the pages that link into this page. So, we'll

59
00:03:04,460 --> 00:03:08,456
start by initializing newrank as 1 minus d divided by the number

60
00:03:08,456 --> 00:03:12,150
of pages. So, then what we need to do is update for this

61
00:03:12,150 --> 00:03:14,830
summation. And I'm going to leave this blank. And I'm going to

62
00:03:14,830 --> 00:03:16,840
skip that for now. This is going to be left as a

63
00:03:16,840 --> 00:03:19,940
quiz. We'll finish the rest of the code. And then your quiz

64
00:03:19,940 --> 00:03:22,440
will be to finish this part of the code, which is really the

65
00:03:22,440 --> 00:03:26,300
most interesting part of computing the page ranks. Once

66
00:03:26,300 --> 00:03:28,620
we've done that, so we've used newrank as a variable

67
00:03:28,620 --> 00:03:30,965
to keep track of the rank for this page.

68
00:03:30,965 --> 00:03:33,110
Well, we want to update our dictionary, so we're going

69
00:03:33,110 --> 00:03:37,050
to add an entry, newranks. We're still within the

70
00:03:37,050 --> 00:03:40,670
for loop, you're going to put your code that sums

71
00:03:40,670 --> 00:03:43,960
up all the links here. Once we've done that, we've

72
00:03:43,960 --> 00:03:48,300
got the value of newrank that reflects both the probability

73
00:03:48,300 --> 00:03:51,360
of starting from that page, and the popularity from all

74
00:03:51,360 --> 00:03:55,070
the inlinks. And so, we'll update this to be newrank. We've

75
00:03:55,070 --> 00:03:58,490
added that to our dictionary, so once we've finished looping through

76
00:03:58,490 --> 00:04:01,370
all the pages in the graph, well now, we're ready for

77
00:04:01,370 --> 00:04:03,710
the next step. So, that means, we want to make the

78
00:04:03,710 --> 00:04:08,440
var, variable ranks refer to the newranks, so we've changed the

79
00:04:08,440 --> 00:04:11,690
time step to the next time step, and now we're going to

80
00:04:11,690 --> 00:04:13,870
go back through this loop, and we go through this loop,

81
00:04:13,870 --> 00:04:15,430
number of loops times, each time we're

82
00:04:15,430 --> 00:04:18,390
updating the ranks, and when we're done, what

83
00:04:18,390 --> 00:04:20,130
we want to return is ranks. That's the

84
00:04:20,130 --> 00:04:22,610
dictionary that maps each page to its rank.
