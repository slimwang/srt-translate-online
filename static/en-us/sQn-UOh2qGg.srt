1
00:00:00,180 --> 00:00:03,640
So let's say the readers, our readers start finishing the accesses.

2
00:00:03,640 --> 00:00:08,800
So as they finish the access they will first log the counter_mutex and

3
00:00:08,800 --> 00:00:13,140
this is why it was important that the writer release the mutex,

4
00:00:13,140 --> 00:00:15,940
because otherwise none of the readers would have been

5
00:00:15,940 --> 00:00:20,860
able to basically exit the real critical section, the reading of the files.

6
00:00:20,860 --> 00:00:24,460
So to perform these updates to the proxy variable, and

7
00:00:24,460 --> 00:00:28,180
to reflect the fact that nobody's currently reading the file.

8
00:00:28,180 --> 00:00:31,020
So reader exists the read phase.

9
00:00:31,020 --> 00:00:32,860
So it will lock the mutex.

10
00:00:32,860 --> 00:00:34,830
It will decrement the counter.

11
00:00:34,830 --> 00:00:37,720
And it will check the value of the resource_counter.

12
00:00:37,720 --> 00:00:40,740
So, once the reader decrements resource_counter,

13
00:00:40,740 --> 00:00:42,920
it checks to see whether it's the last reader.

14
00:00:42,920 --> 00:00:46,600
So, this really should be it checks whether resource_counter is,

15
00:00:46,600 --> 00:00:48,750
has reached the value 0.

16
00:00:48,750 --> 00:00:52,070
The very last reader that is exiting this

17
00:00:52,070 --> 00:00:56,880
read phase will see that resource_counter has reached 0, it's the last reader.

18
00:00:56,880 --> 00:01:01,330
And then it will signal the write_phase condition variable.

19
00:01:01,330 --> 00:01:06,950
It makes sense to generate this signal and to notify a potential writer that

20
00:01:06,950 --> 00:01:10,660
currently there are no readers performing read operations.

21
00:01:10,660 --> 00:01:13,480
And given that only one writer can go at a time,

22
00:01:13,480 --> 00:01:15,770
it really doesn't make sense to use a broadcast.

23
00:01:15,770 --> 00:01:20,360
So, this write_phase will be received ultimately over here.

24
00:01:20,360 --> 00:01:25,360
And the one writer that was waiting on that write_phase condition of

25
00:01:25,360 --> 00:01:27,950
the area above will be woken up.

26
00:01:27,950 --> 00:01:31,390
What will happen internally, that writer will be removed from

27
00:01:31,390 --> 00:01:35,980
the wait queue that's associated with the write_phase condition variable.

28
00:01:35,980 --> 00:01:39,260
And the counter mutex will be reacquired before we come out of

29
00:01:39,260 --> 00:01:40,240
the wait operation.

30
00:01:40,240 --> 00:01:44,200
Now as we explained earlier, the very first thing that we have to do is,

31
00:01:44,200 --> 00:01:49,590
we have to go ahead and check the statement resource_counter one more time.

32
00:01:49,590 --> 00:01:53,620
So we, we go out of the wait statement, but we're still in the while loop.

33
00:01:53,620 --> 00:01:57,890
We have to check whether resource_counter is indeed still zero.

34
00:01:57,890 --> 00:02:01,860
The reason for this is that internally in the implementation of

35
00:02:01,860 --> 00:02:06,430
this wait operation, removing the thread from the queue

36
00:02:06,430 --> 00:02:10,639
that's associated with the write_phase condition variable, and

37
00:02:10,639 --> 00:02:16,540
acquiring this counter_mutex mutex, are two different operations.

38
00:02:16,540 --> 00:02:21,853
And in between them, it is possible that another, either another writer or

39
00:02:21,853 --> 00:02:27,181
another reader has basically beat the writer that was waiting to the mutex.

40
00:02:27,181 --> 00:02:30,289
And so when we come out, yes we have the mutex, but

41
00:02:30,289 --> 00:02:35,322
somebody else has already acquired it, changed the resource_counter value to

42
00:02:35,322 --> 00:02:38,282
reflect the phase that maybe there is a reader or

43
00:02:38,282 --> 00:02:42,670
a writer currently accessing the file, and then released the mutex.

44
00:02:42,670 --> 00:02:45,940
But it, actually, there is another thread that's currently in one of

45
00:02:45,940 --> 00:02:48,700
these code blocks that we wanted to protect in the first place.
