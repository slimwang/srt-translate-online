1
00:00:00,360 --> 00:00:03,110
So I hope everyone understands the main idea behind the hash

2
00:00:03,110 --> 00:00:06,660
table now. Our goal is to map a keyword and a

3
00:00:06,660 --> 00:00:11,120
number of buckets. Using our hash-string function to a particular bucket

4
00:00:11,120 --> 00:00:15,410
and that bucket will contain all of the keywords that map to

5
00:00:15,410 --> 00:00:18,040
that location. So now what we're going to do is try to

6
00:00:18,040 --> 00:00:20,980
actually write the code to do this. We're going to start from

7
00:00:20,980 --> 00:00:23,460
our index that we wrote for the previous unit, but try

8
00:00:23,460 --> 00:00:26,960
to figure out how to implement that with a hash table instead.

9
00:00:26,960 --> 00:00:30,500
So the first question is, how is this going to change our data structure? So

10
00:00:30,500 --> 00:00:34,860
this was what we had before, if you remember we had our index was a list

11
00:00:34,860 --> 00:00:39,280
of keywords, we had a list of entries, and each entry was a pair,

12
00:00:40,860 --> 00:00:46,650
which was a keyword. And the second element of the pair was the list of

13
00:00:46,650 --> 00:00:52,580
the URLs where that word appears, and we would have each word in the index

14
00:00:52,580 --> 00:00:56,760
as its own entry with its own list of URLs. So

15
00:00:56,760 --> 00:01:00,150
this was the data structure that we used last class. Now

16
00:01:00,150 --> 00:01:03,370
we want to change things to implement a hash table. So,

17
00:01:03,370 --> 00:01:05,700
I want you to think about what data structure we'll use

18
00:01:05,700 --> 00:01:08,770
and we'll make that a quiz to decide a good data

19
00:01:08,770 --> 00:01:11,820
structure to use to implement the hash table. So the question

20
00:01:11,820 --> 00:01:14,950
is which of these data structures would make most sense to

21
00:01:14,950 --> 00:01:18,060
implement the hash table index? The first choice is a list.

22
00:01:18,060 --> 00:01:20,780
Where the elements in the list are. A list where the

23
00:01:20,780 --> 00:01:22,930
first element is a word and the second element is a

24
00:01:22,930 --> 00:01:26,860
list of URLs where that word appears. The second choice is

25
00:01:26,860 --> 00:01:29,800
a list where each element in a list is the list itself

26
00:01:29,800 --> 00:01:32,300
where the first element is a word and the second element

27
00:01:32,300 --> 00:01:35,270
is a list of lists where each element in that list

28
00:01:35,270 --> 00:01:38,250
is a list of URLs. So, the third choice is a

29
00:01:38,250 --> 00:01:43,600
list. Where each element is a list. Where the element lists themselves

30
00:01:43,600 --> 00:01:48,270
contain lists. Where the element lists of the element

31
00:01:48,270 --> 00:01:51,480
list are a list of the word, all by

32
00:01:51,480 --> 00:01:53,390
a list of all the URLs for that word.

33
00:01:54,640 --> 00:01:57,960
So, we have three nested lists for the first three.

34
00:01:57,960 --> 00:02:00,120
For choice four, we have a list where each

35
00:02:00,120 --> 00:02:03,440
element in the list is a list. Where within

36
00:02:03,440 --> 00:02:05,550
the element list, there is another list, which is

37
00:02:05,550 --> 00:02:08,930
a list of words, followed by a list of URLs.

38
00:02:08,930 --> 00:02:13,710
And for the final choice, we also have three nest of lists, where each element

39
00:02:13,710 --> 00:02:17,670
is a list, where the elements of that list are a list, that are word

40
00:02:17,670 --> 00:02:22,550
followed by a list. Where each element in that list is a list of urls.

41
00:02:22,550 --> 00:02:26,436
So which one of these would be the best structure to implement a hash table?
