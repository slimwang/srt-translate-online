1
00:00:00,230 --> 00:00:03,090
Address translation process.

2
00:00:03,090 --> 00:00:08,080
And the reason that translation has to
happen is because process thinks it has

3
00:00:08,080 --> 00:00:13,360
this big address space, contiguous
going from zero through some x.

4
00:00:13,360 --> 00:00:15,050
And then we said,

5
00:00:15,050 --> 00:00:20,130
well the physical memory, one process
may not have all of it at the same time.

6
00:00:20,130 --> 00:00:24,660
Or physical memory maybe much smaller
than the address space size itself.

7
00:00:24,660 --> 00:00:28,550
So logical address or
virtual address is actually going to be

8
00:00:28,550 --> 00:00:31,920
different from the physical
address that we're talking about.

9
00:00:31,920 --> 00:00:36,050
So this is actually, if you think about
it, this is a logical address here.

10
00:00:36,050 --> 00:00:40,888
And addresses that we have here
are going to be addresses into physical

11
00:00:40,888 --> 00:00:41,549
memory.

12
00:00:41,549 --> 00:00:44,846
Right, that's your real memory
that you have in the system.

13
00:00:44,846 --> 00:00:50,560
So what we're going to do is, we're
saying, well, this part is going here.

14
00:00:50,560 --> 00:00:52,690
That part is going here.

15
00:00:52,690 --> 00:00:55,896
So, maybe 1 goes at the top here,

16
00:00:55,896 --> 00:01:00,328
maybe 3 goes down here,
and things like that.

17
00:01:00,328 --> 00:01:04,337
We said we have to take data and
code that is in the address space,

18
00:01:04,337 --> 00:01:07,771
and we have to place that
into physical memory, okay?

19
00:01:07,771 --> 00:01:11,585
The way we sort of do that is,
we don't want to do it for each byte or

20
00:01:11,585 --> 00:01:15,770
each word, because we'll have to
keep track of what's going where.

21
00:01:15,770 --> 00:01:20,744
Okay, so one way to scale that
process is is that we divide this

22
00:01:20,744 --> 00:01:24,964
address space and
the memory into some size chunks.

23
00:01:24,964 --> 00:01:29,131
Okay, so if we do paging,
it's divided into what's called pages.

24
00:01:29,131 --> 00:01:33,230
A page typically may be 4 kilobytes,
for example, 4K size.

25
00:01:33,230 --> 00:01:37,969
So we would say, well, the address
space really is a page number and

26
00:01:37,969 --> 00:01:40,311
displacement within that page.

27
00:01:40,311 --> 00:01:46,906
So this is page 0, and if your location
10, then it's page 0, 10, okay.

28
00:01:46,906 --> 00:01:51,585
So 0 is the page, and
10 is displacement within that page.

29
00:01:51,585 --> 00:01:55,194
If your address happens to be let's say,
4K plus 3,

30
00:01:55,194 --> 00:02:00,615
then it's going to do a second page
because second page starts at 4K.

31
00:02:00,615 --> 00:02:05,720
First 0 through 4K minus goes in first
page, and then the second one starts.

32
00:02:05,720 --> 00:02:10,979
So then we'll say it's page 2 and maybe
displacement 5 or 2 or whatever it is.

33
00:02:10,979 --> 00:02:15,532
So the logical address you can
think of that as a page number and

34
00:02:15,532 --> 00:02:16,740
a displacement.

35
00:02:16,740 --> 00:02:21,180
Essentially a page table says,
this, it is a mapping isn't it?

36
00:02:21,180 --> 00:02:27,400
So it says this logical page is
currently stored in this physical page.

37
00:02:27,400 --> 00:02:31,685
Okay, so if I want to think about it,
a page table, essentially,

38
00:02:31,685 --> 00:02:34,610
a page table we have all these entries.

39
00:02:34,610 --> 00:02:38,481
And it's logical base 0, 1, 2.

40
00:02:38,481 --> 00:02:41,362
We're saying this may be a 3.

41
00:02:41,362 --> 00:02:42,997
This may be at 5.

42
00:02:42,997 --> 00:02:44,715
This may be at 8.

43
00:02:44,715 --> 00:02:47,062
And maybe 3 is currently not loaded.

44
00:02:47,062 --> 00:02:49,900
Virtual memory, not everything
is in memory at the same time.

45
00:02:49,900 --> 00:02:55,450
So this a page table that actually
we build, and the operating

46
00:02:55,450 --> 00:03:00,830
system is responsible for actually
building this and protecting this.

47
00:03:00,830 --> 00:03:05,450
Remember, at this point, sort of
a flow that we should understand,

48
00:03:05,450 --> 00:03:06,690
it's really important.

49
00:03:06,690 --> 00:03:10,975
A process, maybe executing in
user space, generates an address,

50
00:03:10,975 --> 00:03:14,130
okay, saying I need to
fetch the next instruction.

51
00:03:14,130 --> 00:03:17,740
That's where my instruction point or
program counter points, or an operand,

52
00:03:17,740 --> 00:03:19,140
or whatever it is.

53
00:03:19,140 --> 00:03:21,770
And I need to access
this memory location.

54
00:03:21,770 --> 00:03:23,688
It sort of starts with
a logical address.

55
00:03:23,688 --> 00:03:25,150
The system now says,

56
00:03:25,150 --> 00:03:29,230
well, where exactly is this
information that the process needs?

57
00:03:29,230 --> 00:03:34,740
We need to locate the physical address
to which this logical address maps.

58
00:03:34,740 --> 00:03:37,510
For that, what I'm going to do
is I'm going to take the logical

59
00:03:37,510 --> 00:03:41,450
address page #, and
I'm going to look up this page table.

60
00:03:41,450 --> 00:03:45,030
So this address translation requires
that you access this page table,

61
00:03:45,030 --> 00:03:47,162
and there are ways to speed
this whole process up.

62
00:03:47,162 --> 00:03:52,400
So it's saying if page number is 3,
or let's say the page number is 2,

63
00:03:52,400 --> 00:03:57,940
then I go down here and I say oh,
it's in physical memory page 8.

64
00:03:57,940 --> 00:04:02,490
So the address that we have,
if it's 3 and some displacement,

65
00:04:02,490 --> 00:04:06,600
d, could translate to 8 and
the same displacement.

66
00:04:06,600 --> 00:04:12,823
So it's say memory page 8 and go dig
down d locations or d bytes in that.

67
00:04:12,823 --> 00:04:16,491
This is what is called
the address translation process.

68
00:04:16,491 --> 00:04:21,668
So an important observation here is
that we can only access physical memory

69
00:04:21,668 --> 00:04:27,150
that is reachable through this page
table that we have for this process.

70
00:04:27,150 --> 00:04:31,410
I should say page table a lot
more complicated than multilevel,

71
00:04:31,410 --> 00:04:32,270
things like that.

72
00:04:32,270 --> 00:04:37,000
But let's just sort of stay with this
basic idea of how they help us get

73
00:04:37,000 --> 00:04:40,180
this isolation which is important to us

74
00:04:40,180 --> 00:04:43,180
because the process has
to start with an address.

75
00:04:43,180 --> 00:04:45,150
Address has to be translated.

76
00:04:45,150 --> 00:04:48,380
Translation is only possible
through this page table.

77
00:04:48,380 --> 00:04:52,840
So whatever the page table points
to is all a process can access.

78
00:04:52,840 --> 00:04:56,350
Another observation here that we
should be clearly understanding,

79
00:04:56,350 --> 00:05:01,220
is, the page tables have to be
maintained by the operating system.

80
00:05:01,220 --> 00:05:04,630
They have to be managed by
their trusted computing base

81
00:05:04,630 --> 00:05:08,160
because whatever goes into the page
table, we can access that.

82
00:05:08,160 --> 00:05:13,030
So the operating system should make sure
that whatever goes in the page table of

83
00:05:13,030 --> 00:05:17,630
a particular process is only memory
that belongs to that process.

84
00:05:17,630 --> 00:05:19,750
So, that's the address translation.

85
00:05:19,750 --> 00:05:22,510
It gives you a little bit
more information about

86
00:05:22,510 --> 00:05:26,120
what part of memory a given
process is able to access,

87
00:05:26,120 --> 00:05:30,970
and it relates to this isolation
thing that we've been talking about.
