1
00:00:00,570 --> 00:00:03,100
So now you know enough about Python to be able

2
00:00:03,100 --> 00:00:05,350
to solve the problem that we started with at the

3
00:00:05,350 --> 00:00:09,370
beginning of this unit, which the problem of extracting a

4
00:00:09,370 --> 00:00:13,550
link from its page. Before we get to the code,

5
00:00:13,550 --> 00:00:15,770
I want to describe a little more carefully what's going

6
00:00:15,770 --> 00:00:18,910
on in a webpage. So we've talked about strings in

7
00:00:18,910 --> 00:00:21,750
Python and all a web page really is, is a

8
00:00:21,750 --> 00:00:25,700
long string. When you see a web page in your browser,

9
00:00:25,700 --> 00:00:28,640
it doesn't look like that. So here's an example web

10
00:00:28,640 --> 00:00:33,420
page, one of my favorite XKCD comics. And hopefully, you're

11
00:00:33,420 --> 00:00:36,960
starting to learn enough about Python to appreciate the power

12
00:00:36,960 --> 00:00:39,420
of Python to make you fly. Probably the rest of

13
00:00:39,420 --> 00:00:42,090
the comic, if you haven't done anything other than using

14
00:00:42,090 --> 00:00:45,130
Python, is a little hard to relate for now. But

15
00:00:45,130 --> 00:00:47,830
it's making fun of other languages where there's an awful

16
00:00:47,830 --> 00:00:50,760
lot of work to do something simple, like we've seen here,

17
00:00:50,760 --> 00:00:53,780
just being able to print out a string. But with

18
00:00:53,780 --> 00:00:57,460
Python, we can fly quickly, and you're going to learn to fly

19
00:00:57,460 --> 00:01:00,300
very quickly in this class. This doesn't lok like just

20
00:01:00,300 --> 00:01:03,540
a string. We've seen just a string is a sequence of

21
00:01:03,540 --> 00:01:06,218
characters. When we look at a webpage like this, well

22
00:01:06,218 --> 00:01:09,650
we see images. We see buttons. We see some text. We

23
00:01:09,650 --> 00:01:11,310
see things that are links and you can see the

24
00:01:11,310 --> 00:01:16,030
underlines these are all links. And the browser renders the webpage

25
00:01:16,030 --> 00:01:19,610
in a way that looks attractive. What actually was

26
00:01:19,610 --> 00:01:22,408
there though, started just as a stream of text.

27
00:01:22,408 --> 00:01:25,440
If you right-click on the webpage, one of the

28
00:01:25,440 --> 00:01:28,340
options you see is View Page Source. When you click

29
00:01:28,340 --> 00:01:33,380
on that, you'll see the actual source code. This is what came into the browser.

30
00:01:33,380 --> 00:01:38,380
So, your browser sent a request, the URL is what's shown in the address bar.

31
00:01:38,380 --> 00:01:43,390
So, it's sent a request to xkcd.com/355.

32
00:01:43,390 --> 00:01:47,040
It sent that request and this is what came back. What came back is just a stream

33
00:01:47,040 --> 00:01:52,570
of text. We can look at that text and some of it is fairly hard to understand.

34
00:01:54,330 --> 00:01:57,370
So what's important is the links. Here's an

35
00:01:57,370 --> 00:02:00,140
example of a link. So, the link starts with

36
00:02:00,140 --> 00:02:04,910
a tag like this. The language HTML uses these

37
00:02:04,910 --> 00:02:08,793
angle brackets. And the angle bracket a href equals

38
00:02:08,793 --> 00:02:12,490
is how we start a link. That's followed by

39
00:02:12,490 --> 00:02:15,770
a string which is surrounded by double quotes, similarly

40
00:02:15,770 --> 00:02:17,890
to a string in Python. So, we have a

41
00:02:17,890 --> 00:02:22,350
double quote. Between the double quotes is a URL. The

42
00:02:22,350 --> 00:02:24,870
URL is the way of locating content on the

43
00:02:24,870 --> 00:02:28,090
web so here we have the URL http colon, that

44
00:02:28,090 --> 00:02:30,690
means it's a web request. We'll talk more in

45
00:02:30,690 --> 00:02:33,920
a later class about what http means and the protocols

46
00:02:33,920 --> 00:02:37,490
used to request web pages. What's important now is, that's a

47
00:02:37,490 --> 00:02:41,870
location If we open that in a web browser, that will give

48
00:02:41,870 --> 00:02:45,860
us another page. What I'm looking at here is the link that

49
00:02:45,860 --> 00:02:51,410
is underneath the text for News/Blag. If we click on that link,

50
00:02:53,510 --> 00:02:57,730
that will take us to the page blag.skcd.com. That

51
00:02:57,730 --> 00:03:00,550
was the page that we saw in the link

52
00:03:00,550 --> 00:03:04,580
here it said blad.skcd.com. When we click on the

53
00:03:04,580 --> 00:03:08,290
link, that's where we went. So to build our crawler,

54
00:03:08,290 --> 00:03:10,590
what we want to do for each webpage, we want

55
00:03:10,590 --> 00:03:13,450
to find these links in the page. We're going to keep

56
00:03:13,450 --> 00:03:15,790
track of those links and we're going to follow them

57
00:03:15,790 --> 00:03:18,720
to find more content on the web. This is similar

58
00:03:18,720 --> 00:03:20,894
to what someone would do if their browsing. If they're

59
00:03:20,894 --> 00:03:23,670
clicking on every link of a page, following all the links

60
00:03:23,670 --> 00:03:26,890
they find, looking at all that content. That's a really good

61
00:03:26,890 --> 00:03:29,120
way to waste a horrendous amount of time if you do

62
00:03:29,120 --> 00:03:31,740
that yourself. We're going to build a web crawler that can

63
00:03:31,740 --> 00:03:36,370
do that automatically. So our goal is to take the text

64
00:03:36,370 --> 00:03:40,960
that came back from a web request, find a link in

65
00:03:40,960 --> 00:03:44,090
that text, which is going to be a tag that starts

66
00:03:44,090 --> 00:03:47,910
with a href equals and then extract from that

67
00:03:47,910 --> 00:03:51,640
tag the URL of the webpage that it links to.

68
00:03:51,640 --> 00:03:53,170
Those are the URLs that we're going to use in

69
00:03:53,170 --> 00:03:57,270
our crawler to make progress. So by using what we've

70
00:03:57,270 --> 00:04:01,260
learned about strings, and what you've learned about variables,

71
00:04:01,260 --> 00:04:03,840
you know enough to be able to do that. What

72
00:04:03,840 --> 00:04:06,740
we want to do is find the beginning of a tag.

73
00:04:06,740 --> 00:04:09,780
And what the beginning of a tag is this text

74
00:04:09,780 --> 00:04:14,930
right we're looking for something that matches exactly the a href

75
00:04:14,930 --> 00:04:20,630
equals part. That's what the tags were here they all start

76
00:04:20,630 --> 00:04:25,890
with a href equals. Not all webpages have the same structure. There are lots

77
00:04:25,890 --> 00:04:27,680
of other ways to make a tag. The A

78
00:04:27,680 --> 00:04:29,910
could be a capital letter for example. There could

79
00:04:29,910 --> 00:04:32,640
be more spaces between the a and the href.

80
00:04:32,640 --> 00:04:35,100
The double quote doesn't actually need to be there.

81
00:04:35,100 --> 00:04:37,280
For what we do now, we're going to assume that

82
00:04:37,280 --> 00:04:40,180
all our webpages follow the same structure that we're seeing

83
00:04:40,180 --> 00:04:43,790
here. That each link starts with an a h ref

84
00:04:43,790 --> 00:04:47,650
without any funny spaces or anything else. Has an equal,

85
00:04:47,650 --> 00:04:50,280
has a double quote, has the URL following that,

86
00:04:50,280 --> 00:04:53,100
and then another double quote. So that means we're looking

87
00:04:53,100 --> 00:04:56,475
for strings like this, we're looking to find the a

88
00:04:56,475 --> 00:05:00,100
href; that's followed by a double quote. After the double

89
00:05:00,100 --> 00:05:03,375
quote is the URL. This is what we actually care

90
00:05:03,375 --> 00:05:06,290
about; we want to find the URLs on the Web page.

91
00:05:06,290 --> 00:05:10,330
That's followed by a closing double quote and then, there's

92
00:05:10,330 --> 00:05:12,980
more that closes the tag. And there's lots of other

93
00:05:12,980 --> 00:05:15,720
stuff on both sides of this. But this is what

94
00:05:15,720 --> 00:05:17,420
we want to do. We want to find the tags that are

95
00:05:17,420 --> 00:05:21,410
links and then, within the tags that are links, we

96
00:05:21,410 --> 00:05:25,110
want to find the URLs. So we're going to assume that we

97
00:05:25,110 --> 00:05:29,610
start with the page contents in a variable. We'll

98
00:05:29,610 --> 00:05:33,550
call that page, and we're not going to worry today

99
00:05:33,550 --> 00:05:36,250
about how we got those page contents. We're going to

100
00:05:36,250 --> 00:05:39,440
provide a function that does that. For the code

101
00:05:39,440 --> 00:05:41,520
that you have today, let's going to assume the

102
00:05:41,520 --> 00:05:44,780
page is already initialized. That it contains the content

103
00:05:44,780 --> 00:05:50,350
of some web page stored as a string and our goal is to find the URL of the first

104
00:05:50,350 --> 00:05:53,620
link in the page. That's going to involve a couple

105
00:05:53,620 --> 00:05:57,940
steps. SO what we want to do is find the start

106
00:05:57,940 --> 00:06:00,500
of the link. We want to find where we have the

107
00:06:00,500 --> 00:06:03,940
a href equals. We can't just look for the first string

108
00:06:03,940 --> 00:06:06,030
we find, because there's lots of other strings on the

109
00:06:06,030 --> 00:06:09,810
page that aren't URLs. So I think you know enough to

110
00:06:09,810 --> 00:06:12,540
do that, so we'll make it a quiz. So your goal

111
00:06:12,540 --> 00:06:15,610
for this quiz is to write some Python code that will

112
00:06:15,610 --> 00:06:17,980
initialize the variable start link to be the

113
00:06:17,980 --> 00:06:21,110
value of the position where the first a

114
00:06:21,110 --> 00:06:23,520
href equals. So the first tag that starts

115
00:06:23,520 --> 00:06:26,020
a link occurs in page, so you should assume

116
00:06:26,020 --> 00:06:27,680
that page starts with the content of some

117
00:06:27,680 --> 00:06:29,700
web page, and what we're doing is looking for

118
00:06:29,700 --> 00:06:32,460
the place where the first a href equals

119
00:06:32,460 --> 00:06:35,150
occurs, and that's the first link on the page.
