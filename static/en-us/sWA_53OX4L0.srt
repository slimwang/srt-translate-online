1
00:00:00,000 --> 00:00:02,000
Take a bow--we are done parsing HTML!

2
00:00:02,000 --> 00:00:05,000
That was it; we've seen all of the relevant rules.

3
00:00:05,000 --> 00:00:08,000
Well, I haven't actually shown you the detail for handling tag arguments,

4
00:00:08,000 --> 00:00:11,000
but we'll get a chance to look into that later.

5
00:00:11,000 --> 00:00:13,000
For now, let's go on to JavaScript,

6
00:00:13,000 --> 00:00:17,000
which is actually going to have very similar rules to HTML.

7
00:00:17,000 --> 00:00:19,000
You may have already guessed that a lot of the options

8
00:00:19,000 --> 00:00:21,000
in JavaScript are very similar.

9
00:00:21,000 --> 00:00:23,000
We have a large number of binary operators:

10
00:00:23,000 --> 00:00:26,000
Plus, Minus, Times, Divide, Less Than, Greater Than--

11
00:00:26,000 --> 00:00:29,000
and it turns out that there is a very convenient notation

12
00:00:29,000 --> 00:00:32,000
when we're programming grammars, for getting those all in.

13
00:00:32,000 --> 00:00:35,000
Rather than having to make a separate little parsing function--

14
00:00:35,000 --> 00:00:37,000
or parsing rule--for each one,

15
00:00:37,000 --> 00:00:43,000
I can just write out multiple related parsing rules in the same string,

16
00:00:43,000 --> 00:00:46,000
and give one piece of code that applies uniformly to all of them.

17
00:00:46,000 --> 00:00:48,000
So we said before that this colon

18
00:00:48,000 --> 00:00:50,000
kind of meant the arrow.

19
00:00:50,000 --> 00:00:53,000
This vertical bar--it's as if we had written

20
00:00:53,000 --> 00:00:56,000
this same nonterminal (exp) one more time,

21
00:00:56,000 --> 00:00:59,000
and then another arrow:

22
00:00:59,000 --> 00:01:02,000
expression goes to expression times expression.

23
00:01:02,000 --> 00:01:04,000
This is just a concise notation for your benefit,

24
00:01:04,000 --> 00:01:07,000
so that we don't have to type out as much.

25
00:01:07,000 --> 00:01:10,000
And here, I'm showing how to make a abstract syntax tree,

26
00:01:10,000 --> 00:01:13,000
which, again, for us is just nested tuples

27
00:01:13,000 --> 00:01:15,000
for a JavaScript binary operator.

28
00:01:15,000 --> 00:01:18,000
And, in reality, we'd want to add in another rule for Divide,

29
00:01:18,000 --> 00:01:20,000
Less Than, Greater Than--

30
00:01:20,000 --> 00:01:22,000
we might have ten of these at the end of the day.

31
00:01:22,000 --> 00:01:26,000
But it turns out that our old friend, Ambiguity, is going to rear its head.

32
00:01:26,000 --> 00:01:30,000
If my input is: (1 - 3 - 5)

33
00:01:30,000 --> 00:01:32,000
there are actually two ways we might interpret that--

34
00:01:32,000 --> 00:01:34,000
or two parse trees we might end up with--

35
00:01:34,000 --> 00:01:37,000
and, depending on which one we pick, we get a slightly different answer.

36
00:01:37,000 --> 00:01:42,000
This could mean: (1 - 3) - 5,

37
00:01:42,000 --> 00:01:44,000
at which point, we'll get (-7).

38
00:01:44,000 --> 00:01:49,000
Or it could mean: 1- (3 - 5), at which point, we'll get (3).

39
00:01:49,000 --> 00:01:52,000
We say that this first option is what is known as

40
00:01:52,000 --> 00:01:54,000
Left Associative

41
00:01:54,000 --> 00:01:56,000
because it puts the parentheses on the Left

42
00:01:56,000 --> 00:01:59,000
or the tree ends up being sort of unbalanced towards the Left.

43
00:01:59,000 --> 99:59:59,999
Similarly, this second option is Right Associative.
