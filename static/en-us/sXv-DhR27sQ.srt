1
00:00:00,240 --> 00:00:03,080
Other interesting management interactions between the user

2
00:00:03,080 --> 00:00:08,160
level threading library and the kernel level thread management occur when we

3
00:00:08,160 --> 00:00:11,180
have a situation where we have multiple CPUs.

4
00:00:11,180 --> 00:00:15,890
In all of the previous cases we've discussed, we only had a single CPU.

5
00:00:15,890 --> 00:00:20,250
So all of the user level threads ran on top of that CPU, and

6
00:00:20,250 --> 00:00:21,900
then whatever changes,

7
00:00:21,900 --> 00:00:26,606
in terms of which of the user-level threads will be scheduled, were made made by

8
00:00:26,606 --> 00:00:31,638
user-level threading library were immediately reflect on that particular CPU.

9
00:00:31,638 --> 00:00:35,360
In a multi-CPU system, the kernel level threads that

10
00:00:35,360 --> 00:00:40,840
support a single process may be running on multiple CPUs, even concurrently.

11
00:00:40,840 --> 00:00:44,690
So we may have a situation when the user-level library that's

12
00:00:44,690 --> 00:00:50,080
operating in the context of one thread on one CPU

13
00:00:50,080 --> 00:00:55,870
needs to somehow impact what is running on another thread on another CPU.

14
00:00:55,870 --> 00:00:57,858
Let's consider the following situation.

15
00:00:57,858 --> 00:01:03,397
Let's say we have three user-level threads that are running, T1, T2, and T3.

16
00:01:03,397 --> 00:01:08,455
And their priorities are such, so that T3 has the highest priority followed by

17
00:01:08,455 --> 00:01:11,940
T2, and then T1 has the lowest priority.

18
00:01:11,940 --> 00:01:16,740
Let's say the situation is such that T2 is running in the context of one of

19
00:01:16,740 --> 00:01:20,770
the kernel-level threads and currently holds a mutex.

20
00:01:20,770 --> 00:01:26,650
T3, the highest priority thread, is waiting on that mutex, and so it's blocked.

21
00:01:26,650 --> 00:01:28,240
It's not executing.

22
00:01:28,240 --> 00:01:31,430
And therefore, the other user-level thread, T1,

23
00:01:31,430 --> 00:01:35,730
is the one that's running on the other kernel-level thread on the other CPU.

24
00:01:35,730 --> 00:01:40,470
Now, at some later point, T2 releases that mutex, it unlocks it.

25
00:01:40,470 --> 00:01:43,560
And as a result of that ,T3 becomes runnable.

26
00:01:43,560 --> 00:01:46,240
Now, in all three threads, T1, T2, and

27
00:01:46,240 --> 00:01:51,030
T3, are runnable, and so we have to make sure that the ones with

28
00:01:51,030 --> 00:01:54,400
highest priority are the ones that actually get to execute.

29
00:01:54,400 --> 00:01:58,210
What needs to happen is T1 needs to be preempted,

30
00:01:58,210 --> 00:02:01,870
since that's the one with the lowest priority among the three.

31
00:02:01,870 --> 00:02:08,479
And we're making this realization while running in the context of the T2 thread.

32
00:02:08,479 --> 00:02:11,570
When T2 performed the unlock operation,

33
00:02:11,570 --> 00:02:14,600
that's when we invoked the user-level threading library.

34
00:02:14,600 --> 00:02:18,550
And that's when we determined that we need to schedule T3

35
00:02:18,550 --> 00:02:20,720
on top of the other context.

36
00:02:20,720 --> 00:02:22,810
We need to context switch T1.

37
00:02:22,810 --> 00:02:28,510
However, T1 is running on another CPU, and so we somehow need to notify

38
00:02:28,510 --> 00:02:34,240
this other CPU to do something to update its registers and its program counters.

39
00:02:34,240 --> 00:02:40,730
We cannot directly modify registers of one CPU when executing on another CPU.

40
00:02:40,730 --> 00:02:44,770
What we need to do, instead, is to send some kind of signal,

41
00:02:44,770 --> 00:02:49,120
some kind of interrupt from the context of one thread and

42
00:02:49,120 --> 00:02:53,520
one CPU to the other thread on the other CPU.

43
00:02:53,520 --> 00:02:56,960
And to basically tell this other CPU to go ahead and

44
00:02:56,960 --> 00:03:01,840
execute the library code locally because the library needs to make some kind of

45
00:03:01,840 --> 00:03:05,110
scheduling decision and change who's executing.

46
00:03:05,110 --> 00:03:10,050
Once that signal happens, the user-level library on the second CPU will

47
00:03:10,050 --> 00:03:15,710
determine that it needs to schedule the highest priority user-level thread, T3.

48
00:03:15,710 --> 00:03:20,030
And thread T1, which has lowest priority, will be the one that's blocked.

49
00:03:20,030 --> 00:03:25,945
So basically, once we start adding multiple CPUs and have multiple kernel and

50
00:03:25,945 --> 00:03:30,630
user-level threads in the process, the interactions between the management and

51
00:03:30,630 --> 00:03:34,990
the kernel and the user-level becomes a little bit more complex than what

52
00:03:34,990 --> 00:03:37,280
the situation is when there's only one CPU.
