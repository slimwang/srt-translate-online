1
00:00:00,000 --> 00:00:04,000
Hello, I am Peter Chapman, your assistant instructor for

2
00:00:04,000 --> 00:00:08,000
this course on programming languages, "Building a Web Browser."

3
00:00:08,000 --> 00:00:11,000
You may have seen me on the forums and kind of managing

4
00:00:11,000 --> 00:00:14,000
the course in general, but one of the major things I do,

5
00:00:14,000 --> 00:00:18,000
helping you learn this material, is going over the homework answers.

6
00:00:18,000 --> 00:00:22,000
With that said, let's get started with the first problem on the first homework assignment,

7
00:00:22,000 --> 00:00:28,000
and that is a multiple choice question on general concepts covered in the first lecture.

8
00:00:28,000 --> 00:00:33,000
Statement 1 says, "Web pages can control their behavior and appearance

9
00:00:33,000 --> 00:00:35,000
through embedded JavaScript."

10
00:00:35,000 --> 00:00:38,000
This is definitely true.

11
00:00:38,000 --> 00:00:42,000
Almost any web page that you use on a daily basis

12
00:00:42,000 --> 00:00:46,000
has tons of JavaScript that make things nice and interactive and speedy.

13
00:00:46,000 --> 00:00:49,000
If you were to visit, say, our web site without JavaScript enabled,

14
00:00:49,000 --> 00:00:51,000
there would be almost nothing you can do.

15
00:00:51,000 --> 00:00:54,000
Nothing would load. Nothing would be interactive.

16
00:00:54,000 --> 00:00:58,000
And it's really not an overstatement that JavaScript is the basis

17
00:00:58,000 --> 00:01:00,000
for modern web applications.

18
00:01:00,000 --> 00:01:04,000
Statement 2, "While English sentences can be broken up into words,

19
00:01:04,000 --> 00:01:06,000
HTML and JavaScript cannot."

20
00:01:06,000 --> 00:01:08,000
This statement is false.

21
00:01:08,000 --> 00:01:12,000
Let's look at a piece of HTML to show you why.

22
00:01:12,000 --> 00:01:17,000
Here we can break up this sample bit of HTML into smaller pieces,

23
00:01:17,000 --> 00:01:20,000
namely the beginning of the bold tag,

24
00:01:20,000 --> 00:01:24,000
the actual text that says "Irvin," and the ending of the bold tag.

25
00:01:24,000 --> 00:01:27,000
Individually, each of these things has meaning

26
00:01:27,000 --> 00:01:34,000
in the same way that the sentence above, the word and,

27
00:01:34,000 --> 00:01:40,000
allows HTML and JavaScript to together be applied to the cannot.

28
00:01:40,000 --> 00:01:42,000
Some of these words have semantic meaning.

29
00:01:42,000 --> 00:01:44,000
Others are more syntactic structure.

30
00:01:44,000 --> 00:01:50,000
But nonetheless, they're words, just in a different language.

31
00:01:50,000 --> 00:01:54,000
Statement 3, "For every Python program that calls re.findall(), there is another

32
00:01:54,000 --> 00:01:59,000
Python program that does not call re.findall() but still obtains the same results."

33
00:01:59,000 --> 00:02:01,000
As it turns out, this statement is true.

34
00:02:01,000 --> 00:02:06,000
Before I deal with re.findall(), let's think of an alternative example and build up to that.

35
00:02:06,000 --> 00:02:10,000
Let's say instead of wanting to do find all, we just want to find one.

36
00:02:10,000 --> 00:02:14,000
That is, given a regular expression and an input text,

37
00:02:14,000 --> 00:02:17,000
we want to determine whether or not the text matches

38
00:02:17,000 --> 00:02:20,000
exactly the regular expression, and we can do this

39
00:02:20,000 --> 00:02:23,000
using the tools that we developed in lecture, particularly

40
00:02:23,000 --> 00:02:25,000
the procedure fsmsim.

41
00:02:25,000 --> 00:02:29,000
What we have to do is create a finite state machine representation

42
00:02:29,000 --> 00:02:33,000
for this regular expression, and that's pretty straightforward.

43
00:02:33,000 --> 00:02:37,000
We process the input text on this state machine using fsmsim,

44
00:02:37,000 --> 00:02:40,000
so you'd have to represent the state machine using the map

45
00:02:40,000 --> 00:02:44,000
that we described in lecture, and if the input text ends on an accepting state,

46
00:02:44,000 --> 00:02:48,000
then we can say we've found one match,

47
00:02:48,000 --> 00:02:53,000
so that's how we use fsmsim to find matches for the regular expression.

48
00:02:53,000 --> 00:02:55,000
But find all does something a little different.

49
00:02:55,000 --> 00:02:57,000
Let's say you had this code.

50
00:02:57,000 --> 00:03:00,000
This statement takes in a regular expression, the map numbers,

51
00:03:00,000 --> 00:03:04,000
and an input string that contains 2 numbers, 12 and 34.

52
00:03:04,000 --> 00:03:07,000
What find all is going to return looks like this.

53
00:03:07,000 --> 00:03:10,000
It's going to return 2 strings, 12 and 34,

54
00:03:10,000 --> 00:03:13,000
so we can use fsmsim to do kind of one matching.

55
00:03:13,000 --> 00:03:16,000
If we were just given the string 12, then we could do that,

56
00:03:16,000 --> 00:03:20,000
but we want to do a little different style of interpretation with find all,

57
00:03:20,000 --> 00:03:23,000
and we can still use fsmsim just with a little more effort.

58
00:03:23,000 --> 00:03:27,000
So let's say we have our black box fsmsim.

59
00:03:27,000 --> 00:03:31,000
And it has a representation for that regular expression.

60
00:03:31,000 --> 00:03:34,000
We also have our string that consists of 5 characters.

61
00:03:34,000 --> 00:03:38,000
What we're going to do is we're going to feed in the first character

62
00:03:38,000 --> 00:03:41,000
into our regular expression simulator.

63
00:03:41,000 --> 00:03:44,000
One matches the regular expression,

64
00:03:44,000 --> 00:03:48,000
so so far we have a match for 1.

65
00:03:48,000 --> 00:03:52,000
In order to match larger strings, we're going to try adding one more character,

66
00:03:52,000 --> 00:03:55,000
and we're going to feed in 12 to our regular expression simulator.

67
00:03:55,000 --> 00:03:58,000
12 matches, so far, so good.

68
00:03:58,000 --> 00:04:00,000
Now we're going to try 12+.

69
00:04:00,000 --> 00:04:06,000
12+ doesn't match, so we've realized that 12 is the largest possible

70
00:04:06,000 --> 00:04:10,000
prefix that will match this regular expression, and it's going to be one of the results.

71
00:04:10,000 --> 00:04:14,000
We're going to go back, and we're just going to try +.

72
00:04:14,000 --> 00:04:16,000
+ doesn't work.

73
00:04:16,000 --> 00:04:18,000
We're going to try +3. That doesn't work either.

74
00:04:18,000 --> 00:04:22,000
That's not a number, and +34, which also doesn't work.

75
00:04:22,000 --> 00:04:25,000
We're going to give up on the +, and we're going to do the 3.

76
00:04:25,000 --> 00:04:28,000
3 matches. Now we can try the 4.

77
00:04:28,000 --> 00:04:32,000
34 matches, and since that's all the characters left in this string, we're done.

78
00:04:32,000 --> 00:04:36,000
And that's kind of how we can use fsmsim to simulate

79
00:04:36,000 --> 00:04:38,000
the same exact functionality of find all.

80
00:04:38,000 --> 00:04:42,000
Statement 4, "Every regular expression that involves neither

81
00:04:42,000 --> 00:04:47,000
+ nor * matches a finite set of strings."

82
00:04:47,000 --> 00:04:49,000
This is true.

83
00:04:49,000 --> 00:04:51,000
In the regular expressions that we define in class,

84
00:04:51,000 --> 00:04:56,000
the only repetition is through + and *.

85
00:04:56,000 --> 00:04:59,000
We can do some fancy things still such as or

86
00:04:59,000 --> 00:05:03,000
or optional characters, but that doesn't even get us near

87
00:05:03,000 --> 00:05:08,000
the possibilities that these repeating operators can give us.

88
00:05:08,000 --> 00:05:10,000
I can enumerate a lot of different types in my regular expression,

89
00:05:10,000 --> 00:05:14,000
a lot of different strings, but it's never going to be infinite.

90
00:05:14,000 --> 00:05:17,000
And so if you don't have the + or the *,

91
00:05:17,000 --> 00:05:19,000
you're stuck with a finite set of strings.

92
00:05:19,000 --> 00:05:23,000
It may be a very large finite set, but it's still finite.
