1
00:00:00,220 --> 00:00:03,420
While loops in Swift aren't
particularly surprising.

2
00:00:03,420 --> 00:00:07,780
They take the form, while, condition,
and then in between curly braces,

3
00:00:07,780 --> 00:00:09,670
the statement that you want to execute.

4
00:00:09,670 --> 00:00:12,040
Here's a while loop that's
counting down a timer.

5
00:00:12,040 --> 00:00:15,500
While the timer's greater than zero,
Decker meant the timer.

6
00:00:15,500 --> 00:00:18,800
In here you can see the loop
gets executed ten times.

7
00:00:18,800 --> 00:00:22,020
Here's another while loop,
simulating having a beer with friends.

8
00:00:22,020 --> 00:00:24,730
A beer with a lot of
toasting as it turns out, so

9
00:00:24,730 --> 00:00:28,370
while beer volume is greater than zero,
cheers.

10
00:00:28,370 --> 00:00:30,350
And then subtract the amount
you set from the volume,

11
00:00:30,350 --> 00:00:34,419
and here you can see in the sidebar
that it's being executed 40 times.

12
00:00:35,610 --> 00:00:38,110
Notice that here and
in the previous while loop,

13
00:00:38,110 --> 00:00:42,430
there are no parentheses around the
conditions, just like with for loops.

14
00:00:42,430 --> 00:00:44,760
Let's move on to repeat while loops.

15
00:00:44,760 --> 00:00:49,560
Repeat while loops take the form repeat,
then the statements you want to execute

16
00:00:49,560 --> 00:00:53,430
in between curly braces,
while a certain condition is true.

17
00:00:54,640 --> 00:00:56,852
And as you can see, unlike while loops,

18
00:00:56,852 --> 00:01:01,710
repeat while loops execute one time
before the condition is evaluated.

19
00:01:01,710 --> 00:01:05,129
So I went ahead and commented out
the previous two while loops, and

20
00:01:05,129 --> 00:01:08,290
you can see that we can write each
of those while loops as repeat while

21
00:01:08,290 --> 00:01:09,140
loops like so.
