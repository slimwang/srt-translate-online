1
00:00:00,000 --> 00:00:03,000
There's an easy way to answer this question experimentally,

2
00:00:03,000 --> 00:00:09,000
which is just to construct the set where it's a list with each element as the object

3
00:00:09,000 --> 00:00:14,000
that you're constructing a set from, and what you find is that it's possible to construct a set

4
00:00:14,000 --> 00:00:18,000
where 101 is an element, where hash browns--the string is an element.

5
00:00:18,000 --> 00:00:23,000
If you try to construct a set where a set is an element, that's an error,

6
00:00:23,000 --> 00:00:26,000
and that's an error because it's not a hashable object.

7
00:00:26,000 --> 00:00:32,000
We'll talk more about that next. We can construct a set where an element is a topple.

8
00:00:32,000 --> 00:00:38,000
We haven't actually talked about topples yet in CS101, but this is something that you've actually use

9
00:00:38,000 --> 00:00:42,000
when you return to your values from a procedure that's what's going on.

10
00:00:42,000 --> 00:00:44,000
It's like a list but it's immutable.

11
00:00:44,000 --> 00:00:50,000
You could figure out experimentally that that's hashable or you could do searches to find out why,

12
00:00:50,000 --> 00:00:57,000
and finally perhaps the most surprising one is that you can construct a set where an object in it is set.

13
00:00:57,000 --> 00:01:05,000
Set by itself is actually a type, which itself is an immutable object.

14
00:01:05,000 --> 00:01:09,000
This question involve lots of things that you might not have learned about yet,

15
00:01:09,000 --> 00:01:13,000
certainly lots of things we didn't cover in CS101,

16
00:01:13,000 --> 00:01:18,000
but the point of the quiz is to see that well you can do experiments and you can do research

17
00:01:18,000 --> 00:01:21,000
using the documentation to answer these questions yourself.

18
00:01:21,000 --> 00:01:24,000
Let's go get how you might have done that.
