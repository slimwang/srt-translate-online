1
00:00:00,000 --> 00:00:04,000
Here are the answers.

2
00:00:04,000 --> 00:00:10,000
Breadth-first search, as the name implies, expands nodes in this order.

3
00:00:10,000 --> 00:00:17,000
One, 2, 3, 4, 5, 6, 7.

4
00:00:17,000 --> 00:00:23,000
So, it's going across a stripe at a time, breadth first.

5
00:00:23,000 --> 00:00:25,000
Is it optimal?

6
00:00:25,000 --> 00:00:28,000
Well, it's always expanding in the shortest paths first,

7
00:00:28,000 --> 00:00:34,000
and so wherever the goal is hiding, it's going to find it by examining

8
00:00:34,000 --> 00:00:38,000
no longer paths, so in fact, it is optimal.

9
00:00:38,000 --> 00:00:45,000
Cheapest first, first we expand the path of length zero,

10
00:00:45,000 --> 00:00:47,000
then the path of length 2.

11
00:00:47,000 --> 00:00:53,000
Now there's a path of length 4, path of length 5,

12
00:00:53,000 --> 00:01:02,000
path of length 6, a path of length 7, and finally, a path of length 8.

13
00:01:02,000 --> 00:01:08,000
And as we've seen, it's guaranteed to find the cheapest path of all,

14
00:01:08,000 --> 00:01:14,000
assuming that all the individual step costs are not negative.

15
00:01:14,000 --> 00:01:17,000
Depth-first search tries to go as deep as it can first,

16
00:01:17,000 --> 00:01:24,000
so it goes 1, 2, 3, then backs up, 4,

17
00:01:24,000 --> 00:01:29,000
then backs up, 5, 6, 7.

18
00:01:29,000 --> 00:01:34,000
And you can see that it doesn't necessarily find the shortest path of all.

19
00:01:34,000 --> 00:01:39,000
Let's say that there were goals in position 5 and in position 3.

20
00:01:39,000 --> 00:01:43,000
It would find the longer path to position 3 and find the goal there

21
00:01:43,000 --> 00:01:46,000
and would not find the goal in position 5.

22
00:01:46,000 --> 99:59:59,999
So, it is not optimal.
