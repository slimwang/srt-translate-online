1
00:00:00,240 --> 00:00:04,156
The algorithm just described,
which we call approximate metric TSP, is

2
00:00:04,156 --> 00:00:11,180
a polynomial-time factor 2-approximation
algorithm for the metric TSP problem.

3
00:00:11,180 --> 00:00:14,550
The process for building the minimum
spanning tree is order v squared for

4
00:00:14,550 --> 00:00:16,770
dense graphs and the depth for

5
00:00:16,770 --> 00:00:20,910
a search process takes time proportional
to the number of edges in the tree,

6
00:00:20,910 --> 00:00:24,330
which is the same as being proportional
to the number of vertices.

7
00:00:24,330 --> 00:00:26,650
That takes care of
the efficiency of the algorithm.

8
00:00:26,650 --> 00:00:28,270
Now for the two factor part.

9
00:00:28,270 --> 00:00:30,090
Consider this example here and

10
00:00:30,090 --> 00:00:33,760
let H star be a minimum
cost Hamiltonian cycle.

11
00:00:33,760 --> 00:00:37,810
This is what an exact solution to
the traveling salesman problem

12
00:00:37,810 --> 00:00:39,060
might look like.

13
00:00:39,060 --> 00:00:42,970
Well, the cost of the minimum spanning
tree that the algorithm finds

14
00:00:42,970 --> 00:00:46,600
must be less than the total cost
of the edges in this cycle.

15
00:00:47,710 --> 00:00:50,660
Otherwise, just removing
an edge from the cycle

16
00:00:50,660 --> 00:00:52,750
would create a lower cost
minimum spanning tree.

17
00:00:53,760 --> 00:00:56,260
Remember that all the cost
here must be non negative.

18
00:00:56,260 --> 00:00:59,060
Now let's draw a minimum
cost spanning tree.

19
00:00:59,060 --> 00:01:02,820
The cost of the depth for a search
traversal, found by the algorithm,

20
00:01:02,820 --> 00:01:06,860
is twice the cost of the sum
of the edges in the tree.

21
00:01:06,860 --> 00:01:10,470
This traversal starts and
ends at the same vertex.

22
00:01:10,470 --> 00:01:13,150
The trouble, however,
is that it's not Hamiltonian.

23
00:01:13,150 --> 00:01:15,920
It might visit the same
vertex more than once.

24
00:01:15,920 --> 00:01:16,550
It's simple enough,

25
00:01:16,550 --> 00:01:20,850
however, to simply count only
the first time a vertex is visited.

26
00:01:20,850 --> 00:01:24,150
This is what ordering vertices by
their discovery time achieves.

27
00:01:24,150 --> 00:01:25,580
By the triangle inequality,

28
00:01:25,580 --> 00:01:28,500
skipping over intermediate vertices
can only make the path shorter.

29
00:01:29,610 --> 00:01:34,240
So the cost of the cycle returned by
the algorithm is at most twice the cost

30
00:01:34,240 --> 00:01:38,230
of the sum of the edges in the minimum
spanning tree that we found.

31
00:01:38,230 --> 00:01:43,430
This recall, however, is at most
the cost of the optimum cycle,

32
00:01:43,430 --> 00:01:47,760
giving us a two-factor approximation,
that's the proof of the theorem.

33
00:01:47,760 --> 00:01:51,390
It may be useful to view the argument
on a scale like this one, with zero at

34
00:01:51,390 --> 00:01:56,340
the bottom and maybe the cost of
the most expensive cycle at the top and

35
00:01:56,340 --> 00:01:59,040
the minimum cost cycle
somewhere in the middle.

36
00:01:59,040 --> 00:02:01,910
As we argued,
the cost of a minimum spanning tree

37
00:02:01,910 --> 00:02:05,510
must be less than the cost
of the optimum cycle.

38
00:02:05,510 --> 00:02:09,580
We can just delete one edge from
the cycle and get a spanning tree.

39
00:02:09,580 --> 00:02:13,730
A depth-first traversal of this spanning
tree uses every edge twice, and

40
00:02:13,730 --> 00:02:16,320
is therefore twice the cost of the tree.

41
00:02:16,320 --> 00:02:19,920
Shortcutting all but the first
visit to a vertex in this traversal

42
00:02:19,920 --> 00:02:23,635
gives a Hamiltonian cycle,
which must have lower cost than

43
00:02:23,635 --> 00:02:27,260
the depth-first traversal because
of the triangle inequality.
