1
00:00:00,610 --> 00:00:04,470
Net Cat gives us a simple model
of a program using the network.

2
00:00:04,470 --> 00:00:07,580
But it's a lot simpler than the way
that a standard web browser and

3
00:00:07,580 --> 00:00:09,130
server use the network.

4
00:00:09,130 --> 00:00:12,380
Browsers and servers don't just
handle a single request or

5
00:00:12,380 --> 00:00:14,390
a few requests one after the other.

6
00:00:14,390 --> 00:00:17,560
They also work on several
requests at the same time.

7
00:00:17,560 --> 00:00:20,340
When your browser loads
a web page from a server.

8
00:00:20,340 --> 00:00:22,700
It usually has to load
a lot of different files.

9
00:00:22,700 --> 00:00:27,810
The HTML itself, plus images,
scripts, CSS, and other data.

10
00:00:27,810 --> 00:00:30,570
The more that it can do this
in parallel the faster it can

11
00:00:30,570 --> 00:00:32,009
render that page onto your screen.

12
00:00:33,030 --> 00:00:36,330
Or imagine that you're in charge of
the server that's sending this video

13
00:00:36,330 --> 00:00:37,750
to your browser.

14
00:00:37,750 --> 00:00:40,510
You're probably not the only
person watching it right now.

15
00:00:40,510 --> 00:00:43,590
You might be near the end of
the video while someone else is just

16
00:00:43,590 --> 00:00:44,830
starting to watch it.

17
00:00:44,830 --> 00:00:48,330
So the data that the server is sending
to you isn't in sync with what it's

18
00:00:48,330 --> 00:00:49,790
sending to that other person's browser.

19
00:00:50,810 --> 00:00:53,650
And there are a lot of different ways
that programs can handle multiple

20
00:00:53,650 --> 00:00:55,460
connections at once.

21
00:00:55,460 --> 00:00:58,710
One of the most basic ones is
what early web servers did.

22
00:00:58,710 --> 00:01:02,060
And what many programs
such as SSHD still do.

23
00:01:02,060 --> 00:01:05,450
Whenever a new connection comes in,
the server process forks,

24
00:01:05,450 --> 00:01:08,530
it asks the operating system to split
it in two, like a cell dividing.

25
00:01:09,940 --> 00:01:13,690
A different model that many more recent
servers use is to create a pool of

26
00:01:13,690 --> 00:01:18,080
processes or threads, each of which
can handle one connection at a time.

27
00:01:18,080 --> 00:01:20,640
And this is faster than
starting new processes.

28
00:01:20,640 --> 00:01:23,380
But it does have the downside that
there's a limit to how many requests may

29
00:01:23,380 --> 00:01:25,390
be handled at once before
things start to slow down.

30
00:01:26,420 --> 00:01:29,560
And finally a third model is
to have a single process that

31
00:01:29,560 --> 00:01:33,450
quickly switches between handling
requests as they become available.

32
00:01:33,450 --> 00:01:35,680
There are a few different facilities and
operating systems for

33
00:01:35,680 --> 00:01:39,700
doing this efficiently,
such as the epole function in Linux.

34
00:01:39,700 --> 00:01:42,570
But before your server
can handle a request,

35
00:01:42,570 --> 00:01:45,890
the client has to know how to
get in touch with your server.

36
00:01:45,890 --> 00:01:49,890
Up ahead, we'll take a look at DMS,
the directory system for internet hosts.
