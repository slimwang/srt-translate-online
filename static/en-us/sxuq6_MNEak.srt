1
00:00:00,070 --> 00:00:02,410
Now that we have this
recursive formulation,

2
00:00:02,410 --> 00:00:04,440
we're ready to develop the algorithm.

3
00:00:04,440 --> 00:00:07,220
Let's convince ourselves first
that the recursive formulation

4
00:00:07,220 --> 00:00:10,630
would indeed involve some
needless recomputation.

5
00:00:10,630 --> 00:00:15,360
Take the two top level partitions,
A B C times D E

6
00:00:15,360 --> 00:00:20,640
on the one hand and
A B C D times E on the other.

7
00:00:20,640 --> 00:00:24,870
Clearly, we will have to compute
the minimum cost of multiplying A B C

8
00:00:24,870 --> 00:00:26,500
in the left problem.

9
00:00:26,500 --> 00:00:29,820
But we are also going to have to
compute it on the right as well

10
00:00:29,820 --> 00:00:33,590
since we need to pull D off
from this chain at some point.

11
00:00:33,590 --> 00:00:36,560
And we end up doing all the work
involved in figuring out

12
00:00:36,560 --> 00:00:40,020
how best to multiply A B C over again.

13
00:00:40,020 --> 00:00:43,800
Fortunately for us,
there are only n choose 2 sub-problems.

14
00:00:43,800 --> 00:00:48,010
So we can create a table, and
do the sub-problems in the right order.

15
00:00:48,010 --> 00:00:52,090
The entries along the diagonal
are the base cases, which have cost 0.

16
00:00:52,090 --> 00:00:55,660
The product of 1 matrix
doesn't cost anything, and

17
00:00:55,660 --> 00:00:59,510
our goal is to compute this value
in the corner here, C 1 through n.

18
00:00:59,510 --> 00:01:04,519
The cost of multiplying
matrices a1 through an.

19
00:01:04,519 --> 00:01:06,700
Consider which subproblems
this depends on.

20
00:01:07,820 --> 00:01:15,240
When K equals one, we're considering
these costs here, C11 and C2N.

21
00:01:15,240 --> 00:01:21,500
When K equals two, we're considering
these problems here, C12 and C3N.

22
00:01:21,500 --> 00:01:27,240
When K equals three,
we consider these and so forth.

23
00:01:27,240 --> 00:01:31,670
In general, every entry depends on
all the elements to the left and

24
00:01:31,670 --> 00:01:33,160
downwards of it.

25
00:01:33,160 --> 00:01:36,810
There are many ways to linearize this
diagonal of dependence, but the most

26
00:01:36,810 --> 00:01:42,010
elegant is to fill out the diagonals
moving towards the corner like this.

27
00:01:42,010 --> 00:01:45,240
We'll let s indicate which
diagonal we're working on.

28
00:01:45,240 --> 00:01:48,720
And then we will fill in
the diagonal entry by entry

29
00:01:48,720 --> 00:01:51,600
from row 1 as far as it goes.

30
00:01:51,600 --> 00:01:57,830
For this row and diagonal,
the column j will be equal to i + s.

31
00:01:57,830 --> 00:02:00,230
And we compute the entry in the table

32
00:02:00,230 --> 00:02:04,380
as the minimum of all the possible
splits of the subtree.

33
00:02:04,380 --> 00:02:07,930
The last step, of course,
is just to return this final cost.

34
00:02:07,930 --> 00:02:11,780
The binary tree that produced this
cost can be reconstructed from

35
00:02:11,780 --> 00:02:16,430
the k that were chosen that
yielded these minimum values.

36
00:02:16,430 --> 00:02:20,330
We just need to remember the split that
we used for each entry in the table.
