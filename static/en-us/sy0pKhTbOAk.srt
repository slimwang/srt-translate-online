1
00:00:00,000 --> 00:00:02,000
How do we boost a number of different coverage metrics?

2
00:00:02,000 --> 00:00:06,000
Iâd like to return to a topic that I discussed at the beginning of this unit which is the input domain.

3
00:00:06,000 --> 00:00:11,000
What coverage is letting us do is divide up the input domain into regions in such a way,

4
00:00:11,000 --> 00:00:16,000
for any given region, any test input in that region, will accomplish some specific coverage task.

5
00:00:16,000 --> 00:00:19,000
Any input that we select within this particular region of the input domain

6
00:00:19,000 --> 00:00:23,000
will cause a particular statement or line to execute, cause the branch to execute in some

7
00:00:23,000 --> 00:00:27,000
specific direction, execute a loop zero times, one time, or more, etc.

8
00:00:27,000 --> 00:00:30,000
And so, the obvious problem is, if we partition the input domain this way

9
00:00:30,000 --> 00:00:35,000
and we go ahead and test, it is easier for me to reach the region in the input domain,

10
00:00:35,000 --> 00:00:39,000
weâre going to get good coverage, but weâre not going to be able to do is find areas of omission.

11
00:00:39,000 --> 00:00:44,000
That is to say, nothing about this process of selecting points in the input domain and testing them

12
00:00:44,000 --> 00:00:47,000
in order to achieve good coverage is going to let us discover of what we havenât implement.

13
00:00:47,000 --> 00:00:51,000
So, let me give a quick example--so, typically, as we talk about unit too, the software under test

14
00:00:51,000 --> 00:00:53,000
is using APIs provided by the system.

15
00:00:53,000 --> 00:00:56,000
Perhaps, the system under test is creating files on the hard disc.

16
00:00:56,000 --> 00:01:02,000
One extremely possible kind of bug that we would put in to the system under test

17
00:01:02,000 --> 00:01:06,000
is failing to check error codes that could be returned from file creation operations

18
00:01:06,000 --> 00:01:10,000
that happen when the disc is full or when there is a hard disc failure or something like that.

19
00:01:10,000 --> 00:01:12,000
And so, what I really mean here is that, for example,

20
00:01:12,000 --> 00:01:17,000
we got a full branch coverage of the system under test but there just isnât a branch in the test

21
00:01:17,000 --> 00:01:20,000
that should have been taken when the hard disc returns an error code.

22
00:01:20,000 --> 00:01:23,000
And so, if the branch that should be there isnât there, when the disc does return an error code,

23
00:01:23,000 --> 00:01:25,000
something weird is going to happen, the software is going to fail.

24
00:01:25,000 --> 00:01:29,000
So, the fundamental fact here is that coverage metrics are not particularly good

25
00:01:29,000 --> 00:01:32,000
at discovering areas of omission like missing error checks.

26
00:01:32,000 --> 00:01:34,000
To discover those, we need to use other methods.

27
00:01:34,000 --> 00:01:37,000
So, for example, we discussed fault injection where we make the disc fail,

28
00:01:37,000 --> 00:01:40,000
we will make it send something bad up to the system and we see what happens,

29
00:01:40,000 --> 00:01:44,000
and in that case, if weâre missing an error check, then the system should actually do the wrong thing

30
00:01:44,000 --> 00:01:47,000
and will be able to discover this by watching the system misbehave.

31
00:01:47,000 --> 00:01:50,000
Another thing we could have done is partition the input domain in a different way.

32
00:01:50,000 --> 00:01:54,000
That is to say not partition the input domain using an automated coverage metrics

33
00:01:54,000 --> 00:01:56,000
rather partition the input domain using the specification.

34
00:01:56,000 --> 00:02:00,000
So, if we partitioning input domain based on the specification

35
00:02:00,000 --> 00:02:05,000
and the specification mentions the need for our system to respond gracefully to disc errors,

36
00:02:05,000 --> 00:02:07,000
there is going to be some little corner of the input space

37
00:02:07,000 --> 00:02:10,000
that is triggered only when disc fail and while we test that.

38
00:02:10,000 --> 00:02:12,000
So the point that Iâm getting to here is that there are multiple ways

39
00:02:12,000 --> 00:02:15,000
of partitioning the input domain for purposes of testing.

40
00:02:15,000 --> 00:02:18,000
Partitioning the input domain based on features of the code

41
00:02:18,000 --> 00:02:20,000
is one way and it happens to be quite effective in general,

42
00:02:20,000 --> 00:02:24,000
but since I canât find the areas of omission, we also want sample the input domain in different ways.

43
00:02:24,000 --> 00:02:26,000
We also want to sample the input domain in other ways

44
00:02:26,000 --> 00:02:30,000
and thatâs the team that we will return to a full force in units four, five, and six.

45
00:02:30,000 --> 99:59:59,999
All right, so that wraps up our quick survey of test coverage metrics.
