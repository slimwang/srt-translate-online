1
00:00:00,650 --> 00:00:01,569
In the next set of quizzes,

2
00:00:01,569 --> 00:00:04,390
I am going to be showing you how
variables are actually used.

3
00:00:04,390 --> 00:00:08,100
All the programs that you are about
to do in part 2, will compile.

4
00:00:08,100 --> 00:00:10,820
Which means that the computer can
understand the code that's been written

5
00:00:10,820 --> 00:00:12,614
for them, and
we'll be able to create an app.

6
00:00:13,675 --> 00:00:16,065
Now, while the programs will
be able to run on the phone,

7
00:00:16,065 --> 00:00:19,605
there's a chance that they might
not do what the intended goal was.

8
00:00:19,605 --> 00:00:21,775
This is something known
as a logical error.

9
00:00:21,775 --> 00:00:24,535
A logical error means that there's
something wrong with the logic which you

10
00:00:24,535 --> 00:00:25,245
used to write the code.

11
00:00:26,895 --> 00:00:28,445
Let's look at a short program and

12
00:00:28,445 --> 00:00:32,415
an example scenario and I'll walk you
through how you solve one of these.

13
00:00:32,415 --> 00:00:34,380
Okay, so here's an example.

14
00:00:34,380 --> 00:00:37,560
Each of these programs will have a goal,
which will be written out here.

15
00:00:37,560 --> 00:00:40,450
The program itself will
be in the green box.

16
00:00:40,450 --> 00:00:44,590
Okay, so the goal of this program is to
calculate something called sleep debt.

17
00:00:44,590 --> 00:00:48,080
Now, how much sleep you need varies
a little bit by age, but on average,

18
00:00:48,080 --> 00:00:50,730
people need about eight
hours of sleep a night.

19
00:00:50,730 --> 00:00:54,710
So what this program is trying to do is
calculate the sleep debt in one week.

20
00:00:54,710 --> 00:00:57,850
The user of the program will go ahead
and estimate how much they sleep on

21
00:00:57,850 --> 00:01:02,310
an average weekday, and how much they
sleep on an average weekend day.

22
00:01:02,310 --> 00:01:06,340
For this example, we're assuming the
user sleeps five hours on a weekday and

23
00:01:06,340 --> 00:01:08,190
nine hours on a weekend.

24
00:01:08,190 --> 00:01:11,400
The code for
this task is here in the green box.

25
00:01:11,400 --> 00:01:14,390
And the first thing that you're trying
to do is read through this code and

26
00:01:14,390 --> 00:01:17,130
decide whether or
not the goal was accomplished.

27
00:01:17,130 --> 00:01:19,620
Then what you're also going to do is
go through each of the statements that

28
00:01:19,620 --> 00:01:23,490
happened in the code and decide what
was actually displayed to the screen.

29
00:01:23,490 --> 00:01:28,920
Assume that these method calls here,
the things that look like display and

30
00:01:28,920 --> 00:01:29,860
have parentheses and

31
00:01:29,860 --> 00:01:32,960
something in between them,
will display content to the screen.

32
00:01:32,960 --> 00:01:35,860
Now, some of these problems will have
multiple pieces of content that they

33
00:01:35,860 --> 00:01:40,410
need to display, so you might see
display1, display2, display3.

34
00:01:40,410 --> 00:01:42,060
Okay, so
if you're still watching this video,

35
00:01:42,060 --> 00:01:45,120
you're probably wondering how
to solve one of these problems.

36
00:01:45,120 --> 00:01:47,930
This isn't the first time you're
interacting with multiple variables,

37
00:01:47,930 --> 00:01:50,540
the values of which might change
a few times during the problem.

38
00:01:51,800 --> 00:01:54,590
So let me do the first one with
you before I set you loose.

39
00:01:54,590 --> 00:01:57,990
Now I'm going to use a technique called
hand simulation and what this technique

40
00:01:57,990 --> 00:02:01,050
involves is trying to figure out
what the computer is doing, but

41
00:02:01,050 --> 00:02:03,090
without just sticking
it to the computer.

42
00:02:03,090 --> 00:02:06,230
For us really it's just an organized way
to keep track of what's going on with

43
00:02:06,230 --> 00:02:07,580
the variables.

44
00:02:07,580 --> 00:02:10,190
Okay, now you're going to go line by
line so let me start this with you.

45
00:02:10,190 --> 00:02:13,130
In the first line here I see
a declaration of a variable, so

46
00:02:13,130 --> 00:02:15,560
I'm going to go ahead and write
the variable name which is weekday.

47
00:02:17,030 --> 00:02:19,890
It's also initialized
to a value which is 5,

48
00:02:19,890 --> 00:02:22,280
so under weekday I'm
going to put the value 5.

49
00:02:22,280 --> 00:02:25,794
This is representing that the variable
weekday currently stores 5.

50
00:02:27,550 --> 00:02:29,760
Okay, so that was the first line,
I'm going to move to the next line.

51
00:02:29,760 --> 00:02:32,620
We have a variable called weekend,
so I'm going to write that out,

52
00:02:32,620 --> 00:02:37,770
and the value of that variable is 9.

53
00:02:37,770 --> 00:02:39,110
Okay, so that's looking good so

54
00:02:39,110 --> 00:02:42,310
I'm going to move on to the next
line which is a declaration and

55
00:02:42,310 --> 00:02:45,410
instantiation of the variable
optimalHours, so I'll do the same thing.

56
00:02:48,090 --> 00:02:49,690
Okay, so
I'm not going to write the value 7*8.

57
00:02:49,690 --> 00:02:52,730
I'm actually going to calculate
that out because that's

58
00:02:52,730 --> 00:02:55,180
what gets stored in optimalHours.

59
00:02:55,180 --> 00:02:59,660
So, with a little bit of mental math,
7 times 8 is 56.

60
00:02:59,660 --> 00:03:02,170
Okay, we have another declaration here.

61
00:03:02,170 --> 00:03:06,030
We make a variable called actualHours,
so I'll write that out.

62
00:03:06,030 --> 00:03:08,260
Well, it's equal to
the value of weekday, and

63
00:03:08,260 --> 00:03:10,130
this is the current value of weekday.

64
00:03:10,130 --> 00:03:13,170
It's not some past value of weekday or
future value of weekday.

65
00:03:13,170 --> 00:03:17,370
Now, we're keeping track of what the
current value of weekday is over here.

66
00:03:17,370 --> 00:03:19,720
And so I could just look here and
see that it's 5.

67
00:03:19,720 --> 00:03:21,920
So I should really think
about this as the number 5.

68
00:03:21,920 --> 00:03:25,570
So it's saying int
actualHours is equal to 5, so

69
00:03:25,570 --> 00:03:28,230
I'm going to go ahead and
write that there.

70
00:03:29,230 --> 00:03:31,070
OK we'll move on to the next line.

71
00:03:31,070 --> 00:03:35,800
So now we're changing actual hours
again to be equal to the current value

72
00:03:35,800 --> 00:03:40,020
of actualHours plus weekend times 2.

73
00:03:40,020 --> 00:03:45,720
So I can look over here, the current
value of actualHours is 5 and

74
00:03:45,720 --> 00:03:50,720
the current value of weekend is 9.

75
00:03:50,720 --> 00:03:53,330
And now I have this
little equation here.

76
00:03:53,330 --> 00:03:56,100
So, I do the multiplication
before the addition, so,

77
00:03:56,100 --> 00:03:59,240
9 times 2 is 18 and then I add 5.

78
00:03:59,240 --> 00:04:03,670
And with a little bit more mental math,
18 plus 5 is 23.

79
00:04:03,670 --> 00:04:06,350
Okay, so this all equals 23.

80
00:04:06,350 --> 00:04:11,100
And what I have to do is cross out
the old value of actual hours, and

81
00:04:11,100 --> 00:04:13,650
write in the new value of actual hours.

82
00:04:13,650 --> 00:04:14,810
Okay, so that's done.

83
00:04:14,810 --> 00:04:16,440
Let's move on to the next line.

84
00:04:16,440 --> 00:04:19,540
We have n solution, so
that's a variable declaration.

85
00:04:19,540 --> 00:04:21,000
And it's being set equal to something,
but

86
00:04:21,000 --> 00:04:22,820
I'm going to write out
the word solution first.

87
00:04:22,820 --> 00:04:26,860
And solution is equal to optimal
hours minus actual hours.

88
00:04:26,860 --> 00:04:32,700
So let's go over here, optimal
hours is 56 and actual hours is 23.

89
00:04:32,700 --> 00:04:35,860
Now it's okay to use your calculator,

90
00:04:35,860 --> 00:04:41,140
I happen to do that earlier and
I know that 56 minus 23 is 33.

91
00:04:41,140 --> 00:04:45,050
Okay, and
then we move on to the next and

92
00:04:45,050 --> 00:04:47,810
final line which says display solution.

93
00:04:47,810 --> 00:04:51,810
So, we can look over here to see what
the value of solution is, which is 33.

94
00:04:51,810 --> 00:04:56,100
So it is going to display the number 33.

95
00:04:56,100 --> 00:04:59,110
So that is how I, or you, or

96
00:04:59,110 --> 00:05:02,560
anyone, could figure out
what this program just did.

97
00:05:02,560 --> 00:05:05,590
But the real question is,
did it do the right thing?

98
00:05:05,590 --> 00:05:08,170
Is there a logical error
somewhere in here or

99
00:05:08,170 --> 00:05:11,730
is somebody who sleeps five hours on
a weekday and nine hours on a weekend

100
00:05:11,730 --> 00:05:15,640
night going to have thirty three hours
of sleep debt at the end of the week.

101
00:05:15,640 --> 00:05:16,660
And I want to know what you think.

102
00:05:16,660 --> 00:05:21,360
All right, quick side note, now you've
created this practice set 2 app, so

103
00:05:21,360 --> 00:05:24,440
I'm just going to show you how you could
also put the code into the practice

104
00:05:24,440 --> 00:05:26,870
set 2 app if you wanted to test it out.

105
00:05:26,870 --> 00:05:28,590
I really recommend
hand simulating first,

106
00:05:28,590 --> 00:05:32,530
because it's going to give your brain
a better grasp about what's going on.

107
00:05:32,530 --> 00:05:35,690
But it's also go to be able to put
the code into Android Studio and

108
00:05:35,690 --> 00:05:37,160
play around with it a bit.

109
00:05:37,160 --> 00:05:41,510
So my suggestion is that you copy and
paste the code for the problem,

110
00:05:41,510 --> 00:05:45,880
which will be provided in the instructor
notes, into the onCreate method.

111
00:05:45,880 --> 00:05:49,480
That's the first method you'll see
in your main activity class here.

112
00:05:49,480 --> 00:05:52,240
Okay, just to be very clear,
here's what your onCreate looks like

113
00:05:52,240 --> 00:05:56,650
before it's modified and then you can
paste over the code, like I've done.

114
00:05:57,890 --> 00:06:00,920
Okay, the other thing you're going to
need to copy and paste over,

115
00:06:00,920 --> 00:06:06,480
which will make this line of code work,
is down here.

116
00:06:06,480 --> 00:06:10,460
It is this code, and I've also
included this in the instructor notes.

117
00:06:11,650 --> 00:06:15,840
The one final thing that you'll
need to do is go to your XML, and

118
00:06:15,840 --> 00:06:21,632
make sure your that your text
view has an Id/display_text_view,

119
00:06:21,632 --> 00:06:25,990
and this should exactly
match what's shown here.

120
00:06:27,255 --> 00:06:30,425
Ok, as long as those two
things match when you run this

121
00:06:30,425 --> 00:06:35,155
code, you'll get the value
printed out to the screen.

122
00:06:35,155 --> 00:06:38,500
It's a little bit hard to see but
it says 33 right there.

123
00:06:38,500 --> 00:06:41,325
Okay, and with all of that,
then I'll try to hand simulate and

124
00:06:41,325 --> 00:06:43,805
some help with getting it up and
running on your phone.

125
00:06:43,805 --> 00:06:47,165
Go ahead and try to figure out is this
program doing what it's supposed to do.
