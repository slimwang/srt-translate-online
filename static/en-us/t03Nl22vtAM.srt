1
00:00:00,360 --> 00:00:05,820
The upshot of bundling the IPC and recovery management is that a service

2
00:00:05,820 --> 00:00:11,880
can safely collect all the breadcrumbs it left behind in all the places that it

3
00:00:11,880 --> 00:00:14,610
touched through the course of its service.

4
00:00:14,610 --> 00:00:18,138
Examples of such breadcrumbs include memory that

5
00:00:18,138 --> 00:00:21,666
was allocated but not reclaimed, file handles,

6
00:00:21,666 --> 00:00:25,362
communication handles, or often windows that have

7
00:00:25,362 --> 00:00:28,227
been created on the display. All of these

8
00:00:28,227 --> 00:00:30,712
are breadcrumbs that may be left behind by

9
00:00:30,712 --> 00:00:33,634
failed clients or servers. And the fact that

10
00:00:33,634 --> 00:00:36,742
you have a transaction tree that records the

11
00:00:36,742 --> 00:00:39,514
trail of all the nodes that were touched

12
00:00:39,514 --> 00:00:42,706
and the temporary states that were created in

13
00:00:42,706 --> 00:00:45,982
all these nodes allows these breadcrumbs to be

14
00:00:45,982 --> 00:00:50,462
cleanly reclaimed. And there is no extra communication for

15
00:00:50,462 --> 00:00:54,202
the recovery management itself, because whatever

16
00:00:54,202 --> 00:00:58,112
communication is needed for the transaction managers

17
00:00:58,112 --> 00:01:03,807
to talk to one another in participating in the transaction that is shadowing the

18
00:01:03,807 --> 00:01:09,288
IPC, actually rides on the IPC itself, and therefore it comes for free.

19
00:01:09,288 --> 00:01:12,919
And Quicksilver only provides the mechanisms. The

20
00:01:12,919 --> 00:01:16,020
policy is entirely up to each service.

21
00:01:16,020 --> 00:01:19,110
And in fact, services can simply ignore these

22
00:01:19,110 --> 00:01:22,370
mechanisms if they don't need any recovery management,

23
00:01:22,370 --> 00:01:25,660
or choose a policy that is commensurate with

24
00:01:25,660 --> 00:01:27,890
the type of service that it is providing.

25
00:01:27,890 --> 00:01:30,696
Because there's a variety of mechanisms available in

26
00:01:30,696 --> 00:01:33,441
the operating system, simple services may choose to

27
00:01:33,441 --> 00:01:38,060
use low-overhead mechanisms. Whereas a more involved service

28
00:01:38,060 --> 00:01:41,650
such as a file server may use weighty mechanisms

29
00:01:41,650 --> 00:01:44,810
in order to recover from failures. The

30
00:01:44,810 --> 00:01:48,530
overhead for recovery management in Quicksilver is

31
00:01:48,530 --> 00:01:50,840
very similar to what we already saw

32
00:01:50,840 --> 00:01:54,512
in LRVM. The transaction managers have to write

33
00:01:54,512 --> 00:01:56,510
log records at every one of these

34
00:01:56,510 --> 00:02:00,182
nodes. Because they are handling the interactions

35
00:02:00,182 --> 00:02:02,954
between clients or servers at this node

36
00:02:02,954 --> 00:02:06,902
with respect to other sites, the transaction managers

37
00:02:06,902 --> 00:02:08,918
have to write log records for

38
00:02:08,918 --> 00:02:13,708
recovering persistent state. Similar to LRVM, Quicksilver

39
00:02:13,708 --> 00:02:16,284
also uses in-memory logs for the

40
00:02:16,284 --> 00:02:20,860
transaction managers. And these transaction managers flush

41
00:02:20,860 --> 00:02:22,600
the in-memory logs that they create

42
00:02:22,600 --> 00:02:26,440
to record persistent states to disk periodically.

43
00:02:26,440 --> 00:02:32,120
How often these in-memory log records are written out to the disk by

44
00:02:32,120 --> 00:02:35,080
the transaction manager is a performance factor,

45
00:02:35,080 --> 00:02:38,240
and it is a window of vulnerability just

46
00:02:38,240 --> 00:02:43,990
as in LRVM. Ideally, if you want to be absolutely sure that you can recover from

47
00:02:43,990 --> 00:02:48,630
failures, whenever any persistent state is modified and

48
00:02:48,630 --> 00:02:50,560
a log record is written by the transaction

49
00:02:50,560 --> 00:02:53,270
manager, that log record should be committed to

50
00:02:53,270 --> 00:02:57,910
the storage. But that costs synchronous I/O, and

51
00:02:57,910 --> 00:03:00,420
so if you're worried about that, you might want to do

52
00:03:00,420 --> 00:03:04,640
that more opportunistically, assuming there are not going to be too

53
00:03:04,640 --> 00:03:09,210
many failures. So there is a performance vulnerability trade off in

54
00:03:09,210 --> 00:03:14,170
how often the transaction manager writes log records to the storage device.
