1
00:00:00,170 --> 00:00:03,230
Now that you've learned how to initialize an empty Git repository,

2
00:00:03,230 --> 00:00:06,460
let's talk about how to add changes to a repository.

3
00:00:06,460 --> 00:00:09,345
In my recipes directory, I have the three files,

4
00:00:09,345 --> 00:00:12,027
cakerecipe.txt, frostingrecipe.txt and

5
00:00:12,027 --> 00:00:16,610
chilirecipe.txt, on my hard drive, which is called my working directory.

6
00:00:16,610 --> 00:00:20,650
I also have an empty Git repository that I just created.

7
00:00:20,650 --> 00:00:23,240
Now I'd like to add a commit to this repository.

8
00:00:23,240 --> 00:00:26,470
Now, you might think I could just run git commit to create a snapshot of

9
00:00:26,470 --> 00:00:28,210
the current state of my files.

10
00:00:28,210 --> 00:00:31,410
However, Git allows you a bit more control than this.

11
00:00:31,410 --> 00:00:34,510
Recall that it's a good idea to keep commits small with one commit per

12
00:00:34,510 --> 00:00:35,890
logical change.

13
00:00:35,890 --> 00:00:39,520
Git makes it easier for you to do this by allowing you to specify exactly what

14
00:00:39,520 --> 00:00:41,160
changes should be committed.

15
00:00:41,160 --> 00:00:45,750
To accomplish this, Git uses an intermediate area called the staging area.

16
00:00:45,750 --> 00:00:48,730
You can add files one at a time to the staging area.

17
00:00:48,730 --> 00:00:53,320
For example, first time I add the cake recipe and then the frosting recipe.

18
00:00:53,320 --> 00:00:56,450
Then, when I'm ready to commit, Git bundles the entire contents of

19
00:00:56,450 --> 00:01:01,280
the staging area into a single commit and adds that to the repository.

20
00:01:01,280 --> 00:01:03,440
Let's see how this works on the command line.

21
00:01:03,440 --> 00:01:06,600
To remember what I've added so far, I'll use git status.

22
00:01:06,600 --> 00:01:09,530
And I see that I still need to make my initial commit and

23
00:01:09,530 --> 00:01:11,870
my three files are still untracked.

24
00:01:11,870 --> 00:01:15,730
Now, the command to add files to the staging area is called git add.

25
00:01:15,730 --> 00:01:19,695
First, I'll add the file cake-recipe.txt and then I'll add the file

26
00:01:19,695 --> 00:01:23,260
frosting-recipe.txt since I think it makes sense to put the cake and

27
00:01:23,260 --> 00:01:25,230
the frosting recipes in the same commit.

28
00:01:25,230 --> 00:01:27,290
Now I'll run git status again and

29
00:01:27,290 --> 00:01:32,540
I can see that these files show up as new files under changes to be committed.

30
00:01:32,540 --> 00:01:35,830
This is Git's way of saying that they have been added to the staging area

31
00:01:35,830 --> 00:01:39,330
since if I created a commit now, these files would be included.

32
00:01:39,330 --> 00:01:42,370
Now go ahead and use git add to add whatever files from your reflections

33
00:01:42,370 --> 00:01:45,440
repository you would like to put in your first commit.

34
00:01:45,440 --> 00:01:47,590
Which file or files will you add?

35
00:01:47,590 --> 00:01:50,840
Will you add both files in one commit or will you use separate commits for

36
00:01:50,840 --> 00:01:51,840
each file, and why?

37
00:01:51,840 --> 00:01:53,380
Write your answer in this box.

38
00:01:54,490 --> 00:01:58,190
After your staging area contains the changes you want in your first commit,

39
00:01:58,190 --> 00:02:00,320
run git status and paste the output in this box.
