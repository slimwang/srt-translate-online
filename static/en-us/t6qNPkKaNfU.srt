1
00:00:00,350 --> 00:00:02,910
As soon as one thinks about letting multiple users access

2
00:00:02,910 --> 00:00:05,500
a file system, it becomes clear that we will need

3
00:00:05,500 --> 00:00:09,120
some notion of access rights. Looking at our directory tree

4
00:00:09,120 --> 00:00:11,780
here again, it should be clear that Alice should not be

5
00:00:11,780 --> 00:00:14,570
able to see guest's or Bob's file unless they say

6
00:00:14,570 --> 00:00:17,530
it's okay. And we certainly don't want to let just any

7
00:00:17,530 --> 00:00:22,050
user access the operating systems files. Ultimately, for each user

8
00:00:22,050 --> 00:00:25,780
file pair, we need to know what permissions that user has.

9
00:00:25,780 --> 00:00:28,830
That is, which of the basic actions of reading, writing,

10
00:00:28,830 --> 00:00:32,350
and executing the file is he allowed to do? Conceptually, we

11
00:00:32,350 --> 00:00:35,150
can think of this as a giant matrix with users

12
00:00:35,150 --> 00:00:38,265
for the columns and files as the rows, for instance. And

13
00:00:38,265 --> 00:00:40,310
we could store the information that way, but it would

14
00:00:40,310 --> 00:00:43,922
be pretty inefficient. Think about how many files would have the

15
00:00:43,922 --> 00:00:48,220
exact same set of values. UNIX like operating systems, achieve efficiency

16
00:00:48,220 --> 00:00:51,910
by assigning an owner and a group to each file. Here

17
00:00:51,910 --> 00:00:54,510
I'm displaying this information as the OS command would

18
00:00:54,510 --> 00:00:57,130
show in the terminal. The owner, or user of the

19
00:00:57,130 --> 00:01:00,020
file, is typically the creator of the file, and the

20
00:01:00,020 --> 00:01:02,760
group might be faculty, or staff, or students or something

21
00:01:02,760 --> 00:01:06,150
like that in a university setting. We have separate read,

22
00:01:06,150 --> 00:01:10,160
write and execute bits for the owner or user, the

23
00:01:10,160 --> 00:01:14,480
group, and then another set for everybody else. This gives

24
00:01:14,480 --> 00:01:17,120
us a total of nine bits instead of 3 times

25
00:01:17,120 --> 00:01:20,660
the number of users on the system. Permissions on directories

26
00:01:20,660 --> 00:01:23,960
make the system even more complicated. The basic rule is that

27
00:01:23,960 --> 00:01:27,200
reading affects your ability to see what's in the directory. Running

28
00:01:27,200 --> 00:01:30,390
affects your ability to create, delete and rename files in the

29
00:01:30,390 --> 00:01:33,090
directory. Both of these are intuitive if you think about

30
00:01:33,090 --> 00:01:35,520
a directory as a file itself, containing the names of the

31
00:01:35,520 --> 00:01:39,380
files and subject directories in it. Execute permissions are a little

32
00:01:39,380 --> 00:01:42,150
more confusing, as they control whether you can pass through the

33
00:01:42,150 --> 00:01:44,980
directory and access it's contents in ways other than just

34
00:01:44,980 --> 00:01:48,430
manipulating the file names. For cases where more detailed permissions

35
00:01:48,430 --> 00:01:51,460
are needed, access control lists are sometimes used on various

36
00:01:51,460 --> 00:01:55,060
operating systems. These make it possible to create arbitrary row

37
00:01:55,060 --> 00:01:58,800
values in our permissions matrix by granting permissions to individual

38
00:01:58,800 --> 00:02:01,880
users or other groups defined in the file system. I

39
00:02:01,880 --> 00:02:04,030
encourage you to explore some more on your own. Some

40
00:02:04,030 --> 00:02:06,640
good places to start are provided in the instructor notes.
