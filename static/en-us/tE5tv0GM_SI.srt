1
00:00:00,440 --> 00:00:04,380
So let's look at our solution. When we have a problem like this,

2
00:00:04,380 --> 00:00:08,620
we first figure out the dependencies. There is one from here to here, and

3
00:00:08,620 --> 00:00:12,640
another one from here to here. And there is also dependence here from R7 to R7.

4
00:00:12,640 --> 00:00:16,379
So now let's look at our ILP. So for

5
00:00:16,379 --> 00:00:20,310
ILP, we can do this and this in the first cycle, they don't depend on anything.

6
00:00:20,310 --> 00:00:23,320
This one needs to be done in the second cycle, because it depends on the first

7
00:00:23,320 --> 00:00:27,960
instruction. This one, however, can be done in the first cycle. This one cannot,

8
00:00:27,960 --> 00:00:33,080
it needs the R7 to be used by this one. So this gets done in the second cycle.

9
00:00:33,080 --> 00:00:35,250
And then this one actually, doesn't depend on anything, so

10
00:00:35,250 --> 00:00:39,530
it can also be done in the first cycle. So as far as ILP is concerned, we have

11
00:00:39,530 --> 00:00:43,678
a total of six instructions executed over two cycles. so the ILP is going to be

12
00:00:43,678 --> 00:00:48,050
three. For the IPC, we have to worry not only about these dependencies, but

13
00:00:48,050 --> 00:00:54,090
also that this is a three-issue processor and that it's in order. So

14
00:00:54,090 --> 00:00:58,340
this can still be done in the first cycle. This can be done in the first cycle.

15
00:00:58,340 --> 00:01:01,370
As far as three-issue is concerned, this could be done in the first cycle but

16
00:01:01,370 --> 00:01:05,880
because it has a dependence we still have to delay it by one cycle. And

17
00:01:05,880 --> 00:01:09,720
now the problem is that in an in order processor. Once we don't execute

18
00:01:09,720 --> 00:01:12,890
an instruction, we cannot execute instructions past it because that would be

19
00:01:12,890 --> 00:01:16,520
out of order. So this is all that happens in the first cycle in this processor.

20
00:01:17,590 --> 00:01:20,680
In the second cycle we are able to execute this instruction,

21
00:01:20,680 --> 00:01:22,880
because now the first two are done.

22
00:01:22,880 --> 00:01:26,960
We can execute this one, because now that this one is done, this is eligible for

23
00:01:26,960 --> 00:01:30,510
execution. And then we have to stop here because of this dependence. So

24
00:01:30,510 --> 00:01:34,268
this would have to be done in the third cycle. And again we cannot do this. So

25
00:01:34,268 --> 00:01:38,634
in the last third cycle, we will be able to finally do this, and then this.

26
00:01:38,634 --> 00:01:42,663
Because they don't depend on each other, so they can be done in the same cycle.

27
00:01:42,663 --> 00:01:48,020
So now we have six instructions over three cycles, for

28
00:01:48,020 --> 00:01:53,590
an IPC of two. It turns out that even if this was a two issue processor,

29
00:01:53,590 --> 00:01:58,050
the in order property really would still limit us to IPC of two.

30
00:01:58,050 --> 00:02:00,920
So sometime one of the things is going to be a limitation,

31
00:02:00,920 --> 00:02:04,500
sometimes. Another limitation is going to play a dominant role.

32
00:02:04,500 --> 00:02:07,760
Sometimes all of the limitations are going to play a role in limiting our IPC.
