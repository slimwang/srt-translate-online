1
00:00:00,210 --> 00:00:02,980
Any truth assignment that satisfies
the clauses we've talked about so

2
00:00:02,980 --> 00:00:06,850
far specifies how the tableau
should be filled out and

3
00:00:06,850 --> 00:00:10,250
moreover, the tableau will always
start on the initial configuration and

4
00:00:10,250 --> 00:00:12,420
end up in an accepting one.

5
00:00:12,420 --> 00:00:13,790
What is not guaranteed yet

6
00:00:13,790 --> 00:00:17,300
is that the transitions between
the configurations are valid.

7
00:00:17,300 --> 00:00:20,670
To see how we can add constraints
that will give us this guarantee,

8
00:00:20,670 --> 00:00:21,579
we'll use this example.

9
00:00:22,770 --> 00:00:27,460
Suppose that the transition function
tells us that if the machine is in state

10
00:00:27,460 --> 00:00:32,200
q3, and it reads a 1 then it
can do one of two things.

11
00:00:32,200 --> 00:00:37,870
It can move to state q0, leaving the 1
alone and move the head to the right,

12
00:00:37,870 --> 00:00:43,670
or it can move to state q4,
write a 0 and move the head to the left.

13
00:00:43,670 --> 00:00:45,310
To translate this rule into clauses for

14
00:00:45,310 --> 00:00:48,460
our formula,
it's useful to make a few definitions.

15
00:00:48,460 --> 00:00:51,260
First, we need to enumerate
the tape alphabet so

16
00:00:51,260 --> 00:00:53,810
that we can refer to
the symbols by number.

17
00:00:53,810 --> 00:01:00,900
Let's say that the blank is symbol 0,
0 is symbol 1 and 1 is symbol 2.

18
00:01:00,900 --> 00:01:07,264
Next, we define the tuple k,
l, k prime, l prime,

19
00:01:07,264 --> 00:01:13,631
delta to be valid if the triple
of the state qk prime,

20
00:01:13,631 --> 00:01:19,453
sl prime and
delta is in the set delta of qk, sl.

21
00:01:19,453 --> 00:01:23,554
That is to say, this has to be
one of the valid transitions,

22
00:01:23,554 --> 00:01:27,580
given that we are in state qk and
that we read the symbol sl.

23
00:01:28,710 --> 00:01:34,010
For example, the tuple 3,
2, 0, 2, R is valid.

24
00:01:34,010 --> 00:01:38,300
The first two numbers here indicate
which transition rule applies.

25
00:01:38,300 --> 00:01:41,140
And note here that I'm using
the enumeration of the alphabet

26
00:01:41,140 --> 00:01:42,480
to translate the symbols here.

27
00:01:43,835 --> 00:01:48,620
3 means state three and
2 means the symbol one.

28
00:01:48,620 --> 00:01:51,760
The last three numbers indicate
the transition being made.

29
00:01:52,800 --> 00:01:56,210
In this case it is in
the set defined by delta.

30
00:01:56,210 --> 00:02:01,410
We're moving to state q0,
we're writing symbol 2, which is a 1.

31
00:02:01,410 --> 00:02:02,990
And we're moving to the right.

32
00:02:02,990 --> 00:02:08,620
On the hand, this transition is endowed,
the machine can't switch to state four,

33
00:02:08,620 --> 00:02:12,200
write a one, and
move the head to the right.

34
00:02:12,200 --> 00:02:14,380
That's not one of the valid transitions,

35
00:02:14,380 --> 00:02:17,700
given that the machine is in state
three, and that it just read a blank.

36
00:02:17,700 --> 00:02:22,040
Now there are multiple ways to create
the causes needed to ensure that

37
00:02:22,040 --> 00:02:23,680
only valid transitions are followed.

38
00:02:24,690 --> 00:02:28,490
Many proofs of Cook's theorem start
by writing out Boolean expressions,

39
00:02:28,490 --> 00:02:31,170
that directly express the requirement
that one of the valid

40
00:02:31,170 --> 00:02:32,310
transitions be followed.

41
00:02:33,420 --> 00:02:34,870
The difficulty with this approach,

42
00:02:34,870 --> 00:02:38,590
is that the intuitive expression
isn't in conjunctive normal form.

43
00:02:38,590 --> 00:02:41,440
And some Boolean algebra
is needed to convert it.

44
00:02:41,440 --> 00:02:45,020
That is to say, we don't immediately
get an intuitive set of short clauses

45
00:02:45,020 --> 00:02:45,910
to add to our formula.

46
00:02:47,190 --> 00:02:51,670
On the other hand, if we rule out
invalid transitions instead, then we

47
00:02:51,670 --> 00:02:56,240
do get a set of short intuitive clauses
that we can just add to the formula.

48
00:02:56,240 --> 00:03:00,030
To illustrate, in order to make sure
that this invalid transition is never

49
00:03:00,030 --> 00:03:05,900
followed, for every step i and position
j, we add a clause that looks like this.

50
00:03:07,130 --> 00:03:10,720
It starts with three literals that
ensure the transition rules for

51
00:03:10,720 --> 00:03:16,020
being in state q3 and reading
a blank symbol actually do apply.

52
00:03:16,020 --> 00:03:21,240
If the head isn't in the position we're
talking about, the state isn't q3, or

53
00:03:21,240 --> 00:03:23,770
the symbol being read
isn't the blank symbol,

54
00:03:23,770 --> 00:03:25,470
then the clause is
immediately satisfied.

55
00:03:26,490 --> 00:03:29,700
The clause can also be satisfied
if the machine behaves

56
00:03:29,700 --> 00:03:32,460
in any way that's different
from what this particular

57
00:03:32,460 --> 00:03:35,090
invalid transition
would cause to happen.

58
00:03:35,090 --> 00:03:39,840
The head could move differently,
the state could change differently, or

59
00:03:39,840 --> 00:03:42,080
a different symbol could be written.

60
00:03:42,080 --> 00:03:48,500
Another way to parse this clause is as
saying if the Q3 blank symbol transition

61
00:03:48,500 --> 00:03:54,080
rule applies, then this invalid
transition can't have been followed.

62
00:03:54,080 --> 00:04:00,520
Logically remember that A implies not
B is equivalent to not A or not B.

63
00:04:01,630 --> 00:04:02,950
That's the logic we're using here.

64
00:04:04,120 --> 00:04:07,760
A being,
does the transition rule apply, and

65
00:04:07,760 --> 00:04:11,230
B being,
was the invalid transition followed.
