1
00:00:00,380 --> 00:00:04,480
So the answer we're looking for here is
actually the computeFibonacci method.

2
00:00:04,480 --> 00:00:05,920
So let's review what I
did to figure it out.

3
00:00:05,920 --> 00:00:10,510
All right, so running Traceview on
the following activity, and basically

4
00:00:10,510 --> 00:00:14,960
profiling the function that happens when
I press this compute Fibonacci function.

5
00:00:14,960 --> 00:00:17,282
This is what the Traceview
output looks like.

6
00:00:17,282 --> 00:00:20,260
All right, so here's an output
that I got from running Traceview.

7
00:00:20,260 --> 00:00:21,520
You should see something similar.

8
00:00:21,520 --> 00:00:23,580
Notice this large pink area.

9
00:00:23,580 --> 00:00:26,380
This is a bad thing, this basically
indicates that something is

10
00:00:26,380 --> 00:00:29,560
taking up a lot of CPU
time on our main thread.

11
00:00:29,560 --> 00:00:34,810
So if you sort by exclusive CPU time,
or by hovering over this pink area.

12
00:00:34,810 --> 00:00:38,830
You'll notice that the computeFibonacci
method, which is coming from our caching

13
00:00:38,830 --> 00:00:42,408
activity, is the one that's actually
occupying the most CPU resources.

14
00:00:42,408 --> 00:00:43,980
So this is something we want to fix
