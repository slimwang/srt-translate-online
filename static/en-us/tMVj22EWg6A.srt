1
00:00:00,460 --> 00:00:03,810
Another popular system file format is the extended format, commonly

2
00:00:03,810 --> 00:00:06,273
used in Linux. Each file on the disk has a

3
00:00:06,273 --> 00:00:09,440
data structure called an Inode associated with it. The Inode

4
00:00:09,440 --> 00:00:13,000
is fixed length. It contains the metadata for the file, and

5
00:00:13,000 --> 00:00:15,880
it serves as the glue linking the data blocks together

6
00:00:15,880 --> 00:00:17,908
in the right order. It is this gluing function that

7
00:00:17,908 --> 00:00:21,340
is the most interesting. The inode stores 15 data block

8
00:00:21,340 --> 00:00:25,590
addresses or pointers. The first 12 of these point directly to

9
00:00:25,590 --> 00:00:28,480
the first 12 data blocks of the file. This makes

10
00:00:28,480 --> 00:00:31,900
the strategy efficient for small files. The thirteenth of these

11
00:00:31,900 --> 00:00:35,470
addresses points to a block that consists of a table

12
00:00:35,470 --> 00:00:39,380
of addresses for the next blocks in the file. This

13
00:00:39,380 --> 00:00:41,760
vastly increases the number of blocks that we can use

14
00:00:41,760 --> 00:00:44,180
in a file. The downside is that we've introduced a

15
00:00:44,180 --> 00:00:47,120
layer of indirection. If this doesn't give the file enough

16
00:00:47,120 --> 00:00:50,890
space, then we use this fourteenth pointer and not one but

17
00:00:50,890 --> 00:00:54,100
two layers of indirection, giving us even more space.

18
00:00:54,100 --> 00:00:56,788
And if this isn't enough, we have a fifteenth pointer,

19
00:00:56,788 --> 00:01:00,430
which uses triple indirection for more space still. Juts

20
00:01:00,430 --> 00:01:03,995
like in FAT, directories are treated as files. Only instead

21
00:01:03,995 --> 00:01:06,395
of mapping a file name to the first file

22
00:01:06,395 --> 00:01:09,297
block, they map a file name to its inode. That

23
00:01:09,297 --> 00:01:13,257
path for accessing slash foo, slash file.txt, would look something

24
00:01:13,257 --> 00:01:15,980
like this. We'd start at the inode for the root

25
00:01:15,980 --> 00:01:19,710
directory and then following its data pointers

26
00:01:19,710 --> 00:01:23,200
we find the data for the root directory.

27
00:01:23,200 --> 00:01:25,580
There we find that foo maps to

28
00:01:25,580 --> 00:01:30,365
another inode, following that address we consult that

29
00:01:30,365 --> 00:01:35,710
inode and find that address for its data block. Looking in there, we find the

30
00:01:35,710 --> 00:01:38,890
contents of slash foo. That's a directory. So

31
00:01:38,890 --> 00:01:42,450
it's going to map the file name file.txt

32
00:01:42,450 --> 00:01:46,946
to the appropriate inode. And then using that inode structure,

33
00:01:46,946 --> 00:01:49,440
we're able to peace together the data that we need.
