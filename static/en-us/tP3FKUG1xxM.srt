1
00:00:00,000 --> 00:00:03,000
Here's a function "move" as a class function of the class robot

2
00:00:03,000 --> 00:00:07,000
that implements where I get my motion vector,

3
00:00:07,000 --> 00:00:11,000
and the motion vector is defined to be steering first, then distance.

4
00:00:11,000 --> 00:00:14,000
I have a few error checks here to make sure the steering doesn't exceed

5
00:00:14,000 --> 00:00:17,000
the max steering angle, and the same is true for distance.

6
00:00:17,000 --> 00:00:19,000
I want it to be non-negative.

7
00:00:19,000 --> 00:00:21,000
As I go down, I now implement the motion model.

8
00:00:21,000 --> 00:00:23,000
Let's just look a little bit more.

9
00:00:23,000 --> 00:00:27,000
I make a new robot copy as in my sample code in class.

10
00:00:27,000 --> 00:00:32,000
I copy all the narrowing parameters--length, bearing noise, steering noise, and distance noise.

11
00:00:32,000 --> 00:00:34,000
Nothing surprising here.

12
00:00:34,000 --> 00:00:39,000
Here I'll apply the noise, which you don't need it for the first implementation,

13
00:00:39,000 --> 00:00:42,000
but later on as we go on, you need it to actually add noise.

14
00:00:42,000 --> 00:00:48,000
I just add Gaussian noise with the corresponding steering noise and distance noise parameters.

15
00:00:48,000 --> 00:00:51,000
If I set the mean of the Gaussian to be the steering command

16
00:00:51,000 --> 00:00:54,000
and the distance command then this adds noise.

17
00:00:54,000 --> 00:00:57,000
I could have equally written steering plus random.gauss,

18
00:00:57,000 --> 00:01:00,000
zero, comma, and then the noise parameter.

19
00:01:00,000 --> 00:01:03,000
As I go down further, here is my execution of motion.

20
00:01:03,000 --> 00:01:06,000
My turning angle, I called "turn."

21
00:01:06,000 --> 00:01:09,000
This is the tangents of the noisy steering

22
00:01:09,000 --> 00:01:12,000
times the distance moved divided by the robot length.

23
00:01:12,000 --> 00:01:19,000
As in my explanation of this question, I'm going to branch and see if my turn is significant enough.

24
00:01:19,000 --> 00:01:23,000
It's smaller than tolerance, and tolerance was set about to 0.001.

25
00:01:23,000 --> 00:01:25,000
Then I just model a straight motion.

26
00:01:25,000 --> 00:01:29,000
I get my new robot coordinates by the old robot coordinates,

27
00:01:29,000 --> 00:01:35,000
moving in the orientation of the robot--cosine for x and sine for y.

28
00:01:35,000 --> 00:01:40,000
I increase my orientation by turn, which is likely essentially zero.

29
00:01:40,000 --> 00:01:43,000
In case I go beyond 0 or 2π,

30
00:01:43,000 --> 00:01:49,000
I do the modal operation here just to make sure my angles are nicely between 0 and 2π.

31
00:01:49,000 --> 00:01:52,000
The more interesting case--as we go down

32
00:01:52,000 --> 00:01:57,000
in this program you can see that I now calculate the radius

33
00:01:57,000 --> 00:02:01,000
as the noise distance divided by turning.

34
00:02:01,000 --> 00:02:05,000
Then I find the center of the circle around which I'm turning,

35
00:02:05,000 --> 00:02:07,000
using the exact same math I just gave you.

36
00:02:07,000 --> 00:02:12,000
I now first change the orientation to be the new orientation

37
00:02:12,000 --> 00:02:16,000
by adding turn to the old orientation, modal, or 2π.

38
00:02:16,000 --> 00:02:20,000
Then I plug the new orientation into the sine and cosine argument,

39
00:02:20,000 --> 00:02:25,000
multiply by radius, add to the center of the circle to get my result.

40
00:02:25,000 --> 99:59:59,999
This routine over here gives me exactly what I wanted.
