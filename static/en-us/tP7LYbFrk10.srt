1
00:00:00,190 --> 00:00:04,450
So now, let's talk about how big
the two-level page-table gets.

2
00:00:04,450 --> 00:00:08,400
Say we have a 32-bit address space and
a 4 kilobyte page.

3
00:00:09,450 --> 00:00:13,850
Let's say we're using
a 1024-entry outer page table and

4
00:00:13,850 --> 00:00:15,860
a 1024 entry inner tables.

5
00:00:15,860 --> 00:00:18,880
There can be many of them,
up to 1024 of them.

6
00:00:18,880 --> 00:00:22,040
And let's say that the page
table entry's 8 bytes.

7
00:00:22,040 --> 00:00:25,900
Assuming that our page table entry is 8
bytes and that we have a program that

8
00:00:25,900 --> 00:00:30,870
uses virtual memory at the beginning of
memory from addresses 0 through this,

9
00:00:30,870 --> 00:00:35,290
and that the top of the memory
from address this to the end,

10
00:00:35,290 --> 00:00:40,441
let's look at what the flat page table
size will be and what our two-level

11
00:00:40,441 --> 00:00:45,770
page-table size will be, with this split
between the inner and outer page-tables.

12
00:00:45,770 --> 00:00:50,990
The flat page table size will have
one entry for each possible page.

13
00:00:50,990 --> 00:00:58,470
So we have 2 to the 32nd pages,
2 to the 12 bytes in each page.

14
00:00:58,470 --> 00:01:02,600
So we have 2 to the 20th entries.

15
00:01:02,600 --> 00:01:07,350
And the total size will be 8 times this,
which ends up being 8 megabytes.

16
00:01:07,350 --> 00:01:10,950
For the 2-level page table,

17
00:01:10,950 --> 00:01:16,530
we need to figure out how many inner
page tables do we have here and here.

18
00:01:16,530 --> 00:01:20,443
Our address is now composed
of a 12 bit offset,

19
00:01:20,443 --> 00:01:23,307
to index into the 4 kilobyte page,

20
00:01:23,307 --> 00:01:28,570
a 10-bit outer page number and
a 10-bit inner page number.

21
00:01:28,570 --> 00:01:31,340
They need to add up to 32,
which they do.

22
00:01:31,340 --> 00:01:36,500
So we know that we need to
have the outer page table, and

23
00:01:36,500 --> 00:01:42,260
it's size will be 2 to
the 10th entries times 8 bytes

24
00:01:42,260 --> 00:01:47,950
per entry here, which ends up being
8 kilobytes for the outer page table.

25
00:01:47,950 --> 00:01:52,970
Now the question is, which of these
entries need to point to actual inner

26
00:01:52,970 --> 00:01:57,560
page tables and which ones can simply
say that there is no inner page table?

27
00:01:57,560 --> 00:02:02,590
To figure that out, we need to see which
of the inner page entries do we need

28
00:02:02,590 --> 00:02:07,590
to actually point of pages of memory and
which ones can simply be empty.

29
00:02:07,590 --> 00:02:10,550
Thus we will decompose these addresses.

30
00:02:10,550 --> 00:02:14,100
This part of the address
is the page offset.

31
00:02:14,100 --> 00:02:16,670
The upper part is the page number and

32
00:02:16,670 --> 00:02:22,310
we need to split this 20 bit
page number into 10-bit groups.

33
00:02:22,310 --> 00:02:24,160
So let's just write it out.

34
00:02:24,160 --> 00:02:27,713
We have 0000, these are the two zeros.

35
00:02:27,713 --> 00:02:32,381
Another hex digit for
0, the 1, and the 0.

36
00:02:32,381 --> 00:02:37,460
This is the outer page number,
this is the inner page number.

37
00:02:37,460 --> 00:02:38,880
As you can see,

38
00:02:38,880 --> 00:02:43,050
all of the addresses in this range
have the same outer page number.

39
00:02:43,050 --> 00:02:45,240
We start at 0, we end at 0.

40
00:02:45,240 --> 00:02:51,620
So only the entry number 0 here needs
to point to an actual inner page table.

41
00:02:52,650 --> 00:02:58,170
For this address range, the page
number goes from FFFF0 to FFFFF.

42
00:02:59,270 --> 00:03:04,330
These page numbers also have
the same outer page number.

43
00:03:04,330 --> 00:03:05,890
It's all 1s.

44
00:03:05,890 --> 00:03:10,460
So only the last outer page table entry

45
00:03:10,460 --> 00:03:13,230
needs to point to
an actual inner page table.

46
00:03:13,230 --> 00:03:15,990
Note that there
are a 1,024 entries here,

47
00:03:15,990 --> 00:03:18,880
only 2 of which point
to inner page tables.

48
00:03:18,880 --> 00:03:23,310
So, there is a 1,022 entries
that simply say nothing.

49
00:03:23,310 --> 00:03:29,530
So we have 2 inner page table times,
what's the size of one of them?

50
00:03:29,530 --> 00:03:35,810
Well the size is 1024 entries
times 8 bytes per entry,

51
00:03:35,810 --> 00:03:38,740
which gives us a total of 16 kilobytes.

52
00:03:38,740 --> 00:03:44,310
Adding the size of the outer page table,
we get only 24 kilobytes.

53
00:03:44,310 --> 00:03:47,970
So the size of a 2-level page table for
this application is

54
00:03:47,970 --> 00:03:52,340
only 24 kilobytes compared to 8
megabytes for the flat page table.

55
00:03:52,340 --> 00:03:57,320
And this is why multilevel page-tables
are almost exclusively using today's

56
00:03:57,320 --> 00:04:03,740
processors especially when we have a 64
bit address space, because for a 64

57
00:04:03,740 --> 00:04:07,755
address space, the flat page table size
would be too large to fit in memory.

58
00:04:08,775 --> 00:04:12,985
But the multi level table will
fit mostly because the outer

59
00:04:12,985 --> 00:04:16,144
most page table will
have many empty entries.

60
00:04:16,144 --> 00:04:19,084
So we will need very few
of these inner page tables.
