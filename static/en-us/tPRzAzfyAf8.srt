1
00:00:00,240 --> 00:00:04,520
Let's look at the solution to our
coherence definition quiz where we had

2
00:00:04,520 --> 00:00:08,870
two cores running in a coherence
system executing some code, and

3
00:00:08,870 --> 00:00:13,690
the question was basically which
of these five possibilities for

4
00:00:13,690 --> 00:00:15,960
what gets printed are possible?

5
00:00:15,960 --> 00:00:18,690
Let's see what can happen
in these two programs.

6
00:00:18,690 --> 00:00:23,464
If core 1 gets to go first with A = 1,

7
00:00:23,464 --> 00:00:27,775
it's then going to spin here for
as long A = 1.

8
00:00:27,775 --> 00:00:31,610
So, it gets stuck until
core 2 does something.

9
00:00:31,610 --> 00:00:37,070
Eventually however,
core 2 will do A =0 in which case,

10
00:00:37,070 --> 00:00:43,360
Core 1 gets to continue and
now core 1 will set A to 1.

11
00:00:43,360 --> 00:00:48,460
Core 2 will wait here until
A is set to 1, because

12
00:00:48,460 --> 00:00:53,390
as long as it's set to 0, the way it
set it, it's going to get stuck here.

13
00:00:53,390 --> 00:00:58,670
So what then happens is Core 1
when it sets this releases core 2.

14
00:00:58,670 --> 00:01:03,830
Now core 2 can do this and this first,
while core 1 is still being delayed

15
00:01:03,830 --> 00:01:08,790
here or it can be that core 1 gets
here first and then core 2 gets here.

16
00:01:08,790 --> 00:01:12,510
So definitely these two
outcomes are possible.

17
00:01:12,510 --> 00:01:17,960
They basically depend on after core
1 waits for core 2 to release it and

18
00:01:17,960 --> 00:01:22,830
then it itself releases core
2 who gets to print first.

19
00:01:22,830 --> 00:01:27,510
Now let's see if it's possible for
core 1 to never get to this point.

20
00:01:27,510 --> 00:01:30,770
For that to happen core 1
needs to get stuck here

21
00:01:30,770 --> 00:01:35,410
in this while loop which means
that A needs to stay 1 forever.

22
00:01:35,410 --> 00:01:39,650
That can only occur if core 2
is done with its program, and

23
00:01:39,650 --> 00:01:42,170
the resulting value of A is still one.

24
00:01:42,170 --> 00:01:47,790
Or if Core 2 also gets stuck here, and
the resulting value of A is still one.

25
00:01:47,790 --> 00:01:51,470
So, Core 1 is stuck here, and A is one.

26
00:01:51,470 --> 00:01:55,613
If that happens before Core
2 gets to A equals zeron,

27
00:01:55,613 --> 00:01:58,569
then Core 2 is going to release Core 1.

28
00:01:58,569 --> 00:02:01,380
So A = 0 had to happen before this.

29
00:02:01,380 --> 00:02:04,780
If A equals zero happened
before all of this,

30
00:02:04,780 --> 00:02:07,620
then what happens is A equals zero,
A equals 1.

31
00:02:07,620 --> 00:02:13,160
Now we are stuck waiting for 1,
but core 2 will continue and

32
00:02:13,160 --> 00:02:16,960
it has to see the one,
because this is a coherent system.

33
00:02:16,960 --> 00:02:22,639
Eventually, because A equals one
happened after A equals zero,

34
00:02:22,639 --> 00:02:26,590
core 2 has to see the one and proceed.

35
00:02:26,590 --> 00:02:32,610
Once it proceeds, it's going to set
A to zero, core 1 has to see that,

36
00:02:32,610 --> 00:02:36,160
because of the second part of
the definition, and proceed.

37
00:02:36,160 --> 00:02:38,990
So it's not possible to get

38
00:02:38,990 --> 00:02:44,360
core 1 start here by just moving
the A equals zero to the beginning.

39
00:02:44,360 --> 00:02:47,320
Now let's see if it's possible for
CORE 2 to finish the whole

40
00:02:47,320 --> 00:02:51,750
thing before this happens, in which
case CORE 1 will get stuck here.

41
00:02:51,750 --> 00:02:54,500
But that's not possible
because CORE 2 now

42
00:02:54,500 --> 00:02:59,490
needs to execute this whole program
here before CORE 1 even begins.

43
00:02:59,490 --> 00:03:04,230
That's not possible, because core 2
sets A to zero, and then waits for

44
00:03:04,230 --> 00:03:06,210
it to become nonzero.

45
00:03:06,210 --> 00:03:10,810
So core 2 cannot finish the whole
thing until core 1 does at least this,

46
00:03:10,810 --> 00:03:14,330
at which point we are back to the first
case of pretty much core 1 will

47
00:03:14,330 --> 00:03:20,130
eventually see that the A 0 because core
2 set it that way after A became one.

48
00:03:20,130 --> 00:03:26,080
It's also important to notice it's not
possible for example A equals one and

49
00:03:26,080 --> 00:03:29,690
A equals two to happen
one after the other and

50
00:03:29,690 --> 00:03:33,250
then core 1 thinks that
this was the last write.

51
00:03:33,250 --> 00:03:37,190
So it gets stuck here while Core 2
thinks this was the last right and

52
00:03:37,190 --> 00:03:38,970
then gets stuck here.

53
00:03:38,970 --> 00:03:42,798
Because the third part of the coherence
definitions says that both

54
00:03:42,798 --> 00:03:46,390
of them have to think that
the same access was the last one.

55
00:03:46,390 --> 00:03:50,750
So if they agree that this was the last
one then this core gets released and

56
00:03:50,750 --> 00:03:53,540
then ends up releasing the first one.

57
00:03:53,540 --> 00:03:58,240
If they think this was the last access,
then this core gets to be released, and

58
00:03:58,240 --> 00:03:59,560
releases the second one,

59
00:03:59,560 --> 00:04:04,120
so either way, it's not possible
to get any of the three printouts.

60
00:04:04,120 --> 00:04:06,400
In an incoherent system,

61
00:04:06,400 --> 00:04:12,220
it can easily happen that you get
these or any of these other three?

62
00:04:12,220 --> 00:04:17,040
So for example,
nothing can be printed then by simply

63
00:04:17,040 --> 00:04:21,430
storing 1 to the cache and then
never really checking anything else,

64
00:04:21,430 --> 00:04:23,650
just looping on the value
in the cache here.

65
00:04:23,650 --> 00:04:26,420
Meanwhile, this one stores
another value in its own cache,

66
00:04:26,420 --> 00:04:30,180
then just infinitely spins on it and
then you can get the other two

67
00:04:30,180 --> 00:04:35,100
possibilities here by simply one of
them not being entirely incoherent.

68
00:04:35,100 --> 00:04:39,140
So, as you can see,
a coherent system prevents some of

69
00:04:39,140 --> 00:04:43,720
the behaviors that are possible
in an incoherent system.

70
00:04:43,720 --> 00:04:48,120
But all the behaviors that are possible
in the coherent system are also possible

71
00:04:48,120 --> 00:04:49,570
in an incoherent one.

72
00:04:49,570 --> 00:04:53,130
So coherence is allowed
in an incoherent system.

73
00:04:53,130 --> 00:04:56,470
It's just that incoherent
systems don't guarantee that

74
00:04:56,470 --> 00:04:58,380
all their behaviors
are going to be coherent.
