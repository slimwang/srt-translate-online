1
00:00:00,000 --> 00:00:03,000
These are the first six triangular number,

2
00:00:03,000 --> 00:00:09,000
and they're formed by taking the position and summing all the numbers from 1 up to the position.

3
00:00:09,000 --> 00:00:14,000
For the first number we have 1. For the second number we have 2.

4
00:00:14,000 --> 00:00:19,000
Note that unlike Python we're indexing from 1.

5
00:00:19,000 --> 00:00:27,000
N equals 3. The third number is formed by summing 1 + 2 + 3, which is 6.

6
00:00:27,000 --> 00:00:34,000
The fourth number is 1 + 2 + 3 + 4, which is 10.

7
00:00:34,000 --> 00:00:39,000
Now, how are we going to get these numbers--1 to 4--here to sum?

8
00:00:39,000 --> 00:00:44,000
Well, Python has a nice way of doing that, and that's using range.

9
00:00:44,000 --> 00:00:49,000
Now, we want the numbers to start at 1, and we want them to finish at 4.

10
00:00:49,000 --> 00:00:54,000
Now, the way range works is I take the first input and starts there,

11
00:00:54,000 --> 00:00:57,000
and it finishes at 1 less than the last input.

12
00:00:57,000 --> 00:01:01,000
In order to get 4, we're going to have to take the range from 1 to 5.

13
00:01:01,000 --> 00:01:07,000
When we come to write our procedure, we're going to use and instead of for.

14
00:01:07,000 --> 00:01:14,000
That means that our range will have to be from 1 up to n + 1.

15
00:01:14,000 --> 00:01:17,000
Now we're ready to write the procedure.

16
00:01:17,000 --> 00:01:24,000
The procedure name is "triangular," and it takes an input, which is a positive integer n.

17
00:01:24,000 --> 00:01:31,000
We want to output or return a number--the nth triangular number.

18
00:01:31,000 --> 00:01:33,000
I'm just going to call it "number."

19
00:01:33,000 --> 00:01:39,000
We want to loop through all the numbers 1 up to n in the range.

20
00:01:39,000 --> 00:01:43,000
Don't forget the +1 there to make sure we go up to n.

21
00:01:43,000 --> 00:01:49,000
We're just going to add each of the values i as we come to it in the loop.

22
00:01:49,000 --> 00:01:52,000
Then when we're done we're going to return the number.
