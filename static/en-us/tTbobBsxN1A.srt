1
00:00:00,160 --> 00:00:03,436
If you experimented with the frames-per-second demo, you may have noticed

2
00:00:03,436 --> 00:00:07,791
something odd. If you slid the slider from 30 frames per second up to 59 frames

3
00:00:07,791 --> 00:00:11,909
per second, the frame rate shown in the upper left was a pretty solid 32

4
00:00:11,909 --> 00:00:16,271
milliseconds per frame. If you went all the way to 60 frames per second, this

5
00:00:16,271 --> 00:00:20,648
drops to 16 or 17 milliseconds per frame. This happens because a new frame is

6
00:00:20,648 --> 00:00:24,913
not computed until the previous frame is displayed. For example, say an image

7
00:00:24,913 --> 00:00:29,804
takes 12 milliseconds to compute, this is well within the 16.6 milliseconds per

8
00:00:29,804 --> 00:00:33,842
frame. So, each frame will display a new image. If the image takes, say, 21

9
00:00:33,842 --> 00:00:38,490
milliseconds, this is longer than the 60 frames per second rate. It's sort of

10
00:00:38,490 --> 00:00:42,775
trains leaving the station at a constant rate. If you don't get your work done

11
00:00:42,775 --> 00:00:46,309
in time to catch the current frame, you have to wait until the next one comes

12
00:00:46,309 --> 00:00:50,546
around. The fastest we can display frames is 60 frames per second. So, as soon

13
00:00:50,546 --> 00:00:54,322
as an image takes more than 1 60th of a second to compute, it will miss the

14
00:00:54,322 --> 00:00:58,704
first frame. This makes the effective frame rate 30 frames per second, since

15
00:00:58,704 --> 00:01:02,515
only every other frame is updated with a new image. I should say this doesn't

16
00:01:02,515 --> 00:01:05,850
always happen with every application. It depends on the way updates are done.

17
00:01:05,850 --> 00:01:10,075
This problem assumes that we don't begin to compute a new frame until an old one

18
00:01:10,075 --> 00:01:14,446
is displayed. The question to you then is, what is the effective frame rate if

19
00:01:14,446 --> 00:01:18,784
you just missed 30 frames per second? In other words, say your image compute

20
00:01:18,784 --> 00:01:23,005
time is a tiny bit greater than 1 30th of a second, at what rate can you display

21
00:01:23,005 --> 00:01:23,883
these images?
