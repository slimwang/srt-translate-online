1
00:00:00,000 --> 00:00:04,000
Let's write out one way to do this together.

2
00:00:04,000 --> 00:00:08,000
I will assign the return value to this variable next_states,

3
00:00:08,000 --> 00:00:10,000
and then we'll just return next_states later on,

4
00:00:10,000 --> 00:00:13,000
but this will make it a little easier for me to think about it.

5
00:00:13,000 --> 00:00:19,000
The hint was definitely to do some sort of list comprehension over the rules in the grammar.

6
00:00:19,000 --> 00:00:21,000
That's going to look something like this.

7
00:00:21,000 --> 00:00:25,000
For every rule in the grammar put something in our output.

8
00:00:25,000 --> 00:00:29,000
Well, if there was something like E goes to xyz in our grammar,

9
00:00:29,000 --> 00:00:31,000
and we're bringing in the closure on E,

10
00:00:31,000 --> 00:00:36,000
the state we want is really just E goes to the red dot is all the way to the left,

11
00:00:36,000 --> 00:00:40,000
and everything that was the right-hand side of the rule comes to the right of the red dot.

12
00:00:40,000 --> 00:00:45,000
Remember that we're encoding parse states as simple tuples.

13
00:00:45,000 --> 00:00:49,000
The first part is this big nonterminal.

14
00:00:49,000 --> 00:00:53,000
Well, that's just the 0th part of the grammar rule. That's just E over here.

15
00:00:53,000 --> 00:00:56,000
Then the next part is what's before the red dot.

16
00:00:56,000 --> 00:01:01,000
When we're computing the closure there's nothing before the red dot.

17
00:01:01,000 --> 00:01:03,000
That's this white space right up here.

18
00:01:03,000 --> 00:01:08,000
Then there's what comes after the red dot. Well, that's xyz.

19
00:01:08,000 --> 00:01:11,000
That was just the second part of our grammar rule.

20
00:01:11,000 --> 00:01:14,000
Then finally we need to know what the current state is.

21
00:01:14,000 --> 00:01:18,000
For us, based on our definition of closure, and you can go back and take a look

22
00:01:18,000 --> 00:01:23,000
if it has slipped your mind, that's just i--the state we're currently looking at.

23
00:01:23,000 --> 00:01:27,000
When we're computing the closure, we add more information to the current chart state.

24
00:01:27,000 --> 00:01:30,000
This is pretty much two-thirds of the answer.

25
00:01:30,000 --> 00:01:35,000
The trick is there might be other rules in our grammar like T goes to abc,

26
00:01:35,000 --> 00:01:37,000
and we don't want to bring them in.

27
00:01:37,000 --> 00:01:40,000
We only wanted to compute this closure on E.

28
00:01:40,000 --> 00:01:44,000
We're going to need a little guard here in our list comprehension.

29
00:01:44,000 --> 00:01:47,000
I don't want to take every rule in the grammar and bring it in.

30
00:01:47,000 --> 00:01:49,000
I only want to bring in some of them.

31
00:01:49,000 --> 00:01:53,000
Well, what's the thing I'm supposed to be bringing in the closure for?

32
00:01:53,000 --> 00:01:58,000
It's based on cd. Cd is whatever we saw to the right of the dot.

33
00:01:58,000 --> 00:02:02,000
Remember that our current state is something like x goes to ab dot cd.

34
00:02:02,000 --> 00:02:05,000
First I have to check if cd is not empty.

35
00:02:05,000 --> 00:02:10,000
If it's not, then c is E, is the thing that we should be looking for.

36
00:02:10,000 --> 00:02:16,000
I only want to do this if cd is not empty and if this E, which was rule 0,

37
00:02:16,000 --> 00:02:18,000
matches the first part of cd.

38
00:02:18,000 --> 00:02:22,000
That is if this E is the same as c.

39
00:02:22,000 --> 00:02:25,000
If it is, we bring in the closure, and that's it.

40
00:02:25,000 --> 00:02:29,000
This is one of those examples that really shows off the power of list comprehensions.

41
00:02:29,000 --> 00:02:35,000
We want to take a bunch of grammar rules, slightly modify them into parsing states,

42
00:02:35,000 --> 99:59:59,999
and we only want to do that based on the rules of how the closure is supposed to work.
