1
00:00:00,000 --> 00:00:06,000
Those last two examples--"July-August 1842" and "6*9==42"-- suggest that we need more

2
00:00:06,000 --> 00:00:10,000
control over splitting strings, because we might want to split on things other than spaces,

3
00:00:10,000 --> 00:00:12,000
like hyphens or punctuation.

4
00:00:12,000 --> 00:00:20,000
I'm going to introduce a tool that will help us do just that--a tool called "regular expressions."

5
00:00:20,000 --> 00:00:23,000
Suppose we want to find all the numbers in a string.

6
00:00:23,000 --> 00:00:30,000
We could make 10 different calls to string.find, look for 1, look for 2, look for 3.

7
00:00:30,000 --> 00:00:33,000
We don't know what digit the number begins with, so we might have to try all of these,

8
00:00:33,000 --> 00:00:36,000
but that could get really tedious really fast.

9
00:00:36,000 --> 00:00:39,000
Instead we're going to use this new technique

10
00:00:39,000 --> 00:00:42,000
that I'm just about to teach you--regular expressions.

11
00:00:42,000 --> 00:00:46,000
The word regular has special meaning in mathematics and computer science theory,

12
00:00:46,000 --> 00:00:52,000
but for now it just means simple strings, and expression is just a concise notation.

13
00:00:52,000 --> 00:00:56,000
You may have already seen this in some math classes, but not thought about it in this manner.

14
00:00:56,000 --> 00:01:00,000
If I write a mathematical expression, like x is equal to the square root of 4

15
00:01:00,000 --> 00:01:06,000
or 5 is less than x is less than 9, each one of these admits or corresponds

16
00:01:06,000 --> 00:01:09,000
to some possible values for x.

17
00:01:09,000 --> 00:01:14,000
For example, if x is between 5 and 9 then it could be 6 or 7 or 8.

18
00:01:14,000 --> 00:01:17,000
All of those are good. All of those satisfy this mathematical equation.

19
00:01:17,000 --> 00:01:20,000
All of these match this mathematical equation.

20
00:01:20,000 --> 00:01:23,000
Similarly, we often think of the square root of 4 as being just 2,

21
00:01:23,000 --> 00:01:27,000
but actually negative 2 works just as well-- -2 times -2 is 4.

22
00:01:27,000 --> 00:01:33,000
These mathematical equations are concise notations for a possibly large set of values,

23
00:01:33,000 --> 00:01:35,000
especially if I do something like this.

24
00:01:35,000 --> 00:01:39,000
There are a large number of possibilities--51, 51, all the way up to 89-2

25
00:01:39,000 --> 00:01:42,000
and just writing this out took much less room.

26
00:01:42,000 --> 00:01:47,000
Just as mathematical expressions are very concise and let us match or describe

27
00:01:47,000 --> 00:01:50,000
a large number of integers or numbers,

28
00:01:50,000 --> 00:01:53,000
regular expressions are going to be very concise and let us

29
00:01:53,000 --> 00:01:56,000
describe a large number of simple strings.

30
00:01:56,000 --> 00:01:59,000
Here is our first regular expression.

31
00:01:59,000 --> 00:02:03,000
Bracket 1 hypen 3 closed bracket.

32
00:02:03,000 --> 00:02:07,000
This is associated with the three strings 1, 2, and 3.

33
00:02:07,000 --> 00:02:13,000
Formally we say that a regular expression like this matches or denotes all of these three strings.

34
00:02:13,000 --> 00:02:19,000
The basic idea here is there is some symbol on the left and some symbol on the right,

35
00:02:19,000 --> 00:02:24,000
and this regular expression matches each one of those plus everything in between.

36
00:02:24,000 --> 00:02:29,000
For example, the regular expression 4 hyphen 8 matches 4, 5, 6, 7, 8,

37
00:02:29,000 --> 00:02:35,000
and the regular expression A through B matches the string a and the string b.

38
00:02:35,000 --> 00:02:41,000
Perhaps surprisingly, regular expressions are very popular and very useful online

39
00:02:41,000 --> 00:02:43,000
and in computing in general.

40
00:02:43,000 --> 00:02:47,000
Credit cards, phone numbers, addresses, e-mail addresses--

41
00:02:47,000 --> 00:02:50,000
these are all handled by regular expressions on websites

42
00:02:50,000 --> 00:02:54,000
you've probably all ready used under the hood. Let me show you a compelling example.

43
00:02:54,000 --> 00:02:58,000
Here I have the form from the U.S. State Department for applying for a U.S. passport.

44
00:02:58,000 --> 00:03:04,000
Regular expressions are very common when you want to enter structured data or structured strings.

45
00:03:04,000 --> 00:03:09,000
For example, over here they regular that your birth date be specified as

46
00:03:09,000 --> 00:03:13,000
two digits, two more digits, and four more digits corresponding the month, the day, or the year.

47
00:03:13,000 --> 00:03:19,000
By contrast, your place of birth is more likely to include letters rather than numbers.

48
00:03:19,000 --> 00:03:24,000
A U.S. social security number involves three numbers, two more numbers,

49
00:03:24,000 --> 00:03:28,000
and then four more numbers sometimes separated by a hyphen or a blank.

50
00:03:28,000 --> 00:03:32,000
An email address has to have this special @ character in it.

51
00:03:32,000 --> 00:03:34,000
Regular expressions can help us do that.

52
00:03:34,000 --> 00:03:38,000
Then an American phone number also has some number of digits broken up into various groups.

53
00:03:38,000 --> 00:03:44,000
A billing address might have letters and numbers and number signs combined arbitrarily.

54
00:03:44,000 --> 00:03:48,000
Regular expressions are going to allow us to make sense of this type of data

55
00:03:48,000 --> 00:03:50,169
and also process it when we see it on web pages.
