1
00:00:00,000 --> 00:00:03,480
We have only so far been able to touch on the very basic concepts

2
00:00:03,480 --> 00:00:05,920
of designing intelligent search trees.

3
00:00:05,920 --> 00:00:08,960
And research to date is much more advanced.

4
00:00:08,960 --> 00:00:11,930
So you might be wondering, considering the state of the art, how low can you go?

5
00:00:11,930 --> 00:00:16,320
What are the best search tree algorithms to date that we know of?

6
00:00:16,320 --> 00:00:19,000
Actually, I'm not going to tell you anything about vertex cover for now

7
00:00:19,000 --> 00:00:22,370
because that problem will deserve a little more attention later in this unit.

8
00:00:22,370 --> 00:00:24,730
I will show you the state of the art for some other problems.

9
00:00:24,730 --> 00:00:26,840
So for independent set there are currently 2 algorithms

10
00:00:26,840 --> 00:00:29,770
that could kind of be considered to be the smallest search trees.

11
00:00:29,770 --> 00:00:34,730
One has size 1.189 to the power of N,

12
00:00:34,730 --> 00:00:38,200
and the other one has size 1.211 to the power of N.

13
00:00:38,200 --> 00:00:40,010
It's 2 different algorithms.

14
00:00:40,010 --> 00:00:45,170
This here has a bit larger search tree, but the algorithm itself is probably a little bit faster

15
00:00:45,170 --> 00:00:49,110
in the worst case than this one here because of the polynomial factors that are involved.

16
00:00:49,110 --> 00:00:51,320
But this here is just the search tree size.

17
00:00:51,320 --> 00:00:53,780
For clique it's the same as independent set, as always,

18
00:00:53,780 --> 00:00:56,540
because of the close connectedness of those 2 problems.

19
00:00:56,540 --> 00:01:00,090
In one of the previous units you also got to know 3 SAT,

20
00:01:00,090 --> 00:01:05,319
which is a satisfiability problem where every clause has exactly 3 variables,

21
00:01:05,319 --> 00:01:10,620
and that can be solved with a search tree of 1.496 to the power of N last time I checked.

22
00:01:10,620 --> 00:01:12,250
This is a very advanced search tree.

23
00:01:12,250 --> 00:01:15,740
It's basically half a book of proofs required to show this here.

24
00:01:15,740 --> 00:01:21,750
Now, what about shortest tour or, more generally, the traveling salesman problem,

25
00:01:21,750 --> 00:01:25,240
which is shortest tour, only that you can only visit a city exactly once.

26
00:01:25,240 --> 00:01:27,940
This is a very interesting one because the best--

27
00:01:27,940 --> 00:01:33,170
well, it's not even really a search tree--but the best algorithm has an exponential factor

28
00:01:33,170 --> 00:01:35,060
of 2 to the power of N.

29
00:01:35,060 --> 00:01:37,730
So here it's still an open research problem to find out

30
00:01:37,730 --> 00:01:40,840
if you can design better search algorithms for this problem.

31
00:01:40,840 --> 00:01:44,240
By the way, in case you're wondering, do the laws of NP completeness,

32
00:01:44,240 --> 00:01:50,000
as far as we know them, say anything about how low the exponent can go,

33
00:01:50,000 --> 00:01:52,340
so really put a limit on the space here?

34
00:01:52,340 --> 00:01:56,570
Say, for example, unless P equals NP, there is no algorithm for independent set

35
00:01:56,570 --> 00:02:03,360
with a search tree that is smaller than 1.1 to the power of N or something like that.

36
00:02:03,360 --> 00:02:06,960
And the answer here is we don't know.

37
00:02:06,960 --> 00:02:09,610
So it might be that you can solve independent set, for example,

38
00:02:09,610 --> 00:02:14,470
in an algorithm with 1.01 to the power of N as your search tree size.

39
00:02:14,470 --> 99:59:59,999
Nothing in the laws of NP completeness that would speak against that.
