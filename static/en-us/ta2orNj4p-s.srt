1
00:00:00,070 --> 00:00:04,048
There were a total of ten visits. Let's count them. We removed the last

2
00:00:04,048 --> 00:00:07,024
element, we had to read the element for that purpose, but there was no gap to

3
00:00:07,024 --> 00:00:11,445
be closed up, because that was the last one. Now before we can insert it at the

4
00:00:11,445 --> 00:00:15,563
beginning, we have to move these four elements out of the way. Each of those

5
00:00:15,563 --> 00:00:22,201
moves involves reading the element and writing it back to the next position.

6
00:00:22,201 --> 00:00:27,647
That's two visits per element and there were four elements to be moved. And

7
00:00:27,647 --> 00:00:32,942
finally the removed element has to be written back to the location zero. That's

8
00:00:32,942 --> 00:00:36,714
one more visit for a total of ten visits. The point that I want to make is that

9
00:00:36,714 --> 00:00:41,546
insertion into an array list. Doesn't work by magic. Under the hood, the other

10
00:00:41,546 --> 00:00:46,524
elements do get moved out of the way. Now you've seen quite a few algorithms

11
00:00:46,524 --> 00:00:50,172
for arrays and array lists, and many times you can solve your problems by just

12
00:00:50,172 --> 00:00:55,541
using one of those existing algorithms. But there are also situations where you

13
00:00:55,541 --> 00:01:00,470
need to understand the algorithm so that you can adapt them to new situations.

14
00:01:00,470 --> 00:01:03,300
Sarah's going to give you an example where you have to do just that.
