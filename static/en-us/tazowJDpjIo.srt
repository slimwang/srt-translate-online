1
00:00:00,240 --> 00:00:02,960
Okay, now that we have seen how to do registry naming and

2
00:00:02,960 --> 00:00:07,760
how to follow the true dependencies and so on, we are ready to learn what

3
00:00:07,760 --> 00:00:13,310
the instruction level parallelism or ILP is. So, we will now define what it is.

4
00:00:14,450 --> 00:00:19,100
So, the ILP really can be defined as the IPC instructions per cycle when

5
00:00:20,200 --> 00:00:23,990
we have a processor that can do an entire instruction in one cycle.

6
00:00:23,990 --> 00:00:27,340
So it doesn't need a pipeline. It can fetch the decode, execute, write result,

7
00:00:27,340 --> 00:00:30,470
everything, in just a single cycle for one instruction.

8
00:00:30,470 --> 00:00:35,510
Also, the processor can do any number of instructions in the same cycle.

9
00:00:35,510 --> 00:00:40,200
So theoretically, it could just fetch and execute your entire program in the one

10
00:00:40,200 --> 00:00:45,140
cycle. But it still has to obey true dependencies. So if

11
00:00:45,140 --> 00:00:49,450
one instruction depends on another, then they cannot be done in the same cycle.

12
00:00:49,450 --> 00:00:52,560
You have to first do one and then the one that needs its result.

13
00:00:53,570 --> 00:00:59,060
So as you can see, ILP really is kind of what an ideal processor can do.

14
00:00:59,060 --> 00:01:04,230
Subject only to obey true dependencies. How do we compute the IL P for

15
00:01:04,230 --> 00:01:09,610
a program? Well, we first rename all the registers. So we do register renaming

16
00:01:09,610 --> 00:01:14,590
first. And then, we pretend we execute. So what we do is, we say okay,

17
00:01:14,590 --> 00:01:17,870
in the first cycle, these are the instructions that don't depend on anything. So

18
00:01:17,870 --> 00:01:21,280
they can go. In the next cycle, we go through the same thing and so on until we

19
00:01:21,280 --> 00:01:25,260
run out of instructions to do. At which point we know how many cycles it is.

20
00:01:25,260 --> 00:01:29,580
Now the one thing that you should remember about the ILP and that will help you

21
00:01:29,580 --> 00:01:34,980
realize what it is and how to do it is that ILP is a property of

22
00:01:34,980 --> 00:01:41,080
a program not of any particular processor. So basically, we define the ILP to be

23
00:01:41,080 --> 00:01:46,480
what would this program do as far as the IPC is concerned on an ideal processor.

24
00:01:46,480 --> 00:01:50,070
So it has nothing to do with what kind of processor you actually run it on.

25
00:01:50,070 --> 00:01:53,110
It has everything to do with just the dependencies in the program. So

26
00:01:53,110 --> 00:01:56,590
be mindful of that, because for example it doesn't make really sense to say

27
00:01:56,590 --> 00:02:01,397
something like what's the ILP on this program on the I don't know, Intel Core i7

28
00:02:01,397 --> 00:02:06,540
processor. Because the ILP on the Intel Core i7 processor is beside the point.

29
00:02:06,540 --> 00:02:10,258
Because the ILP is really the performance of this program on an ideal processor

30
00:02:10,258 --> 00:02:14,470
that has nothing to do with Intel i7. Okay, so just, just remember that,

31
00:02:14,470 --> 00:02:18,330
when you're asked to produce the ILP, you should just consider the program.

32
00:02:18,330 --> 00:02:21,930
It doesn't matter what the processor looks like, because the ILP is computed for

33
00:02:21,930 --> 00:02:25,170
a perfect processor anyway. In contrast, you could

34
00:02:25,170 --> 00:02:29,720
say that the IPC of this program on a given processor is something else, but

35
00:02:29,720 --> 00:02:32,990
be mindful of this. Basically the LP you only need to see the program,

36
00:02:32,990 --> 00:02:34,830
you don't really need to know what the processor looks like.
