1
00:00:00,000 --> 00:00:06,000
Of these options, the third one, the fourth one, and the sixth one are useful.

2
00:00:06,000 --> 00:00:10,000
In the first one, the public key for Udacity is inside of the hash,

3
00:00:10,000 --> 00:00:14,000
and so we have no way of actually getting that. So that's not useful.

4
00:00:14,000 --> 00:00:18,000
For the second one, the encryption is done using Udacity's private key,

5
00:00:18,000 --> 00:00:21,000
so this is a self-signed certificate, which is not very useful for us.

6
00:00:21,000 --> 00:00:27,000
The fifth one is not useful, because the host name "udacity.commune" is not bound with the key.

7
00:00:27,000 --> 00:00:31,000
We would need to include that in the inputs of the encryption.

8
00:00:31,000 --> 00:00:34,000
The third and fourth ones are useful.

9
00:00:34,000 --> 00:00:36,000
We have our host name. We have our public key.

10
00:00:36,000 --> 00:00:39,000
Both of these are inside the encryption.

11
00:00:39,000 --> 00:00:41,000
For the sixth option, this is is a certificate chain.

12
00:00:41,000 --> 00:00:46,000
We have from the certificate authority the public key of trusty certs.

13
00:00:46,000 --> 99:59:59,999
The trusty certs signs the public key of Udacity and binds it to udacity.com.
