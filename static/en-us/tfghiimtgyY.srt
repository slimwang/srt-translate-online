1
00:00:00,380 --> 00:00:02,874
One cool thing you can do with a square that has a transparency map is to

2
00:00:02,874 --> 00:00:06,596
create a bunch of these and have them move around. When a large number of

3
00:00:06,596 --> 00:00:10,772
objects like this move around we call them particles. This demo has 100,000

4
00:00:10,772 --> 00:00:15,175
particles. One particular useful way to display particles is as if they're 2D

5
00:00:15,175 --> 00:00:20,306
objects flat on the screen. The objects are actually in a 3D world, however. As

6
00:00:20,306 --> 00:00:23,486
the camera moves, these objects are reoriented so that they always face

7
00:00:23,486 --> 00:00:27,788
forward. In this example, we see squares moving about with each square always

8
00:00:27,788 --> 00:00:31,437
facing the viewer. You can then apply texture with an alpha channel to get an

9
00:00:31,437 --> 00:00:34,996
interesting look. By using transparency mapping, you can put whatever you want

10
00:00:34,996 --> 00:00:39,185
on a particle. Here are a bunch of dots moving around. An advantage of

11
00:00:39,185 --> 00:00:42,798
particles is that they can directly represent 3D scan to data. For example,

12
00:00:42,798 --> 00:00:47,560
here's some movement data captured using a connect as displayed with particles.

13
00:00:47,560 --> 00:00:50,374
Some researchers and developers are actively looking at how to use particles as

14
00:00:50,374 --> 00:00:54,565
basic building blocks instead of triangles. Here's an example from Markus

15
00:00:54,565 --> 00:00:57,727
Shuetz on his potree.org site that shows a realistic view made entirely of

16
00:00:57,727 --> 00:01:03,500
particles. This data was captured by a laser scan system by Faro Technologies.

17
00:01:03,500 --> 00:01:06,815
One advantage of particle systems is that data can be captured by a scanner and

18
00:01:06,815 --> 00:01:11,288
then directly viewed. No processing is needed to reconstruct any triangles or

19
00:01:11,288 --> 00:01:14,668
meshes. This program is running in the browser with more particles flowing in

20
00:01:14,668 --> 00:01:19,050
and filling in the gaps the longer you view it. That's one advantage of

21
00:01:19,050 --> 00:01:22,982
particles, you can stream them in as you wish, bit by bit. With triangles, you

22
00:01:22,982 --> 00:01:25,742
tend to send in either some simplified mesh or the whole object, causing

23
00:01:25,742 --> 00:01:29,723
objects to pop into existence. The particles themselves can be made to look

24
00:01:29,723 --> 00:01:34,071
more realistic. You can use any texture you want when you're doing transparency

25
00:01:34,071 --> 00:01:37,665
mapping. By using a sphere texture instead of a circle, these particles are

26
00:01:37,665 --> 00:01:42,230
more convincing as 3D objects. Weather is a common use for particle systems for

27
00:01:42,230 --> 00:01:45,966
making snow flakes or rain drops. For phenomena like rain, particles can have a

28
00:01:45,966 --> 00:01:48,927
lifetime where they're created, fall through the sky, and when they hit the

29
00:01:48,927 --> 00:01:54,416
ground, they disappear. Particles usually face the viewer. This idea of having

30
00:01:54,416 --> 00:01:58,760
objects always face forward is called billboarding. It allows us to make 2D

31
00:01:58,760 --> 00:02:02,829
textures seem more like 3D objects, as we've seen. This demo shows a popular

32
00:02:02,829 --> 00:02:07,492
use for transparent textures on billboards, simulating clouds. This demo was by

33
00:02:07,492 --> 00:02:12,060
the main author of Three.js in fact. Larger billboards of cloud shapes are

34
00:02:12,060 --> 00:02:15,635
combined and overlapped to give the illusion of puffiness. I have to conclude

35
00:02:15,635 --> 00:02:19,006
with one of the cliches of computer graphics, the lens flare. It's so easy to

36
00:02:19,006 --> 00:02:22,126
add this effect, that it's been in many games, though there probably have been

37
00:02:22,126 --> 00:02:26,555
more games with crates. The sparkling patterns that simulate interaction of

38
00:02:26,555 --> 00:02:29,610
light with the cameras parts are all transparent textures whose position are

39
00:02:29,610 --> 00:02:31,449
computed on the fly.
