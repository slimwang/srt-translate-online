1
00:00:00,780 --> 00:00:03,510
Now, low let's put Lamport's clock to work

2
00:00:03,510 --> 00:00:08,740
for implementing a distributed mutual exclusion lock algorithm, and

3
00:00:08,740 --> 00:00:10,360
it is going to be very similar to

4
00:00:10,360 --> 00:00:12,930
the car-sharing example that I showed you before. And

5
00:00:12,930 --> 00:00:16,270
also, you will notice that we've talked about

6
00:00:16,270 --> 00:00:20,090
locks in a shared memory multiprocessor where we have

7
00:00:20,090 --> 00:00:23,770
shared memory to implement the lock. But now,

8
00:00:23,770 --> 00:00:26,510
in a distributed system, we don't have shared memory.

9
00:00:26,510 --> 00:00:28,850
And we have to implement a mutual exclusion

10
00:00:28,850 --> 00:00:33,160
lock using Lamport's Logical Clock. So, essentially what is

11
00:00:33,160 --> 00:00:36,340
going to happen is that any Process that

12
00:00:36,340 --> 00:00:38,820
needs to acquire this lock is going to send

13
00:00:38,820 --> 00:00:41,090
the message to all the Processes. And of

14
00:00:41,090 --> 00:00:43,090
course the intent to get a lock may, may

15
00:00:43,090 --> 00:00:47,780
emanate simultaneously from several processes. That's perfectly feasible.

16
00:00:47,780 --> 00:00:51,710
So the algorithm is as follows. Every process has

17
00:00:51,710 --> 00:00:54,464
a data structure, a queue data structure. And those

18
00:00:54,464 --> 00:00:57,390
are the queue's that are associated with process P1. This

19
00:00:57,390 --> 00:00:59,860
is the queue that is associated with process P2. And

20
00:00:59,860 --> 00:01:02,470
this is the queue that is asssociated with process Pn.

21
00:01:02,470 --> 00:01:06,218
Every process has its own private queue. And the private

22
00:01:06,218 --> 00:01:10,550
queue is ordered by the happened-before relationship that we have

23
00:01:10,550 --> 00:01:13,510
discussed so far. So requests for a lock are going

24
00:01:13,510 --> 00:01:16,860
to be time stamped and the protocol is as follows.

25
00:01:16,860 --> 00:01:20,580
To request a lock, what a process is going to

26
00:01:20,580 --> 00:01:23,300
do is send a message to all the other

27
00:01:23,300 --> 00:01:26,960
Processes that I want this lock and my time

28
00:01:26,960 --> 00:01:29,770
stamp is such and so. So it's going to associate the

29
00:01:29,770 --> 00:01:32,929
local timestamp that it has from its counter, which

30
00:01:32,929 --> 00:01:37,390
is its logical timestamp. It's going to associate that timestamp

31
00:01:37,390 --> 00:01:39,470
as the request time for the lock and send

32
00:01:39,470 --> 00:01:42,030
the message to all its peers. And all the peers,

33
00:01:42,030 --> 00:01:44,520
what are they going to do? Well, two things.

34
00:01:44,520 --> 00:01:46,960
One is they're going to stick that request into the

35
00:01:46,960 --> 00:01:50,520
local queue. When a request comes from process Pn,

36
00:01:50,520 --> 00:01:54,290
P1 puts it into its queue, appropriate place in

37
00:01:54,290 --> 00:01:55,890
the queue, because it is ordered by the

38
00:01:55,890 --> 00:02:00,160
timestamp. The smallest time stamp being the highest priority

39
00:02:00,160 --> 00:02:04,140
request pending. So it puts it in its queue.

40
00:02:04,140 --> 00:02:07,720
And the second thing it does is every process,

41
00:02:07,720 --> 00:02:09,750
when it gets a request, puts it in its

42
00:02:09,750 --> 00:02:13,970
queue and then acknowledges the request to its peers. So

43
00:02:13,970 --> 00:02:18,230
let's look at the process P2 here and P2 generated

44
00:02:18,230 --> 00:02:21,670
it's request at timestamp 10. What it did was first

45
00:02:21,670 --> 00:02:25,220
put its request in its local queue and then it

46
00:02:25,220 --> 00:02:28,450
sends a message to its peers. And these guys, when

47
00:02:28,450 --> 00:02:31,155
they get the request, they look at their own local

48
00:02:31,155 --> 00:02:33,080
queue and say well you know there is a request

49
00:02:33,080 --> 00:02:35,870
pending In my queue, which has a time stamp

50
00:02:35,870 --> 00:02:38,380
of 5, and this request that I just got from

51
00:02:38,380 --> 00:02:41,540
P2 has a time stamp of 10, so I'm going to

52
00:02:41,540 --> 00:02:44,625
order that behind the previous request. I put it over

53
00:02:44,625 --> 00:02:47,030
here. I put it over here and once I

54
00:02:47,030 --> 00:02:50,440
do that I'm going to acknowledge this request by sending a

55
00:02:50,440 --> 00:02:53,850
message back to P2. And similarly this guy sends an

56
00:02:53,850 --> 00:02:58,720
acknowledgement back to P2. So that's how the protocol works.

57
00:02:58,720 --> 00:03:02,120
Every request is sent to all the other processors

58
00:03:02,120 --> 00:03:05,740
and every process when it receives a request, it

59
00:03:05,740 --> 00:03:09,230
puts it ordered by Lamport's clock in its own

60
00:03:09,230 --> 00:03:12,570
local queue. And then acknowledges the request with an

61
00:03:12,570 --> 00:03:15,380
act message. Now, what happens when there is a

62
00:03:15,380 --> 00:03:17,620
tie? Well, when we have a tie, we break

63
00:03:17,620 --> 00:03:21,780
the tie by giving priority to the process that

64
00:03:21,780 --> 00:03:24,120
has a lower process ID so that's how this

65
00:03:24,120 --> 00:03:28,260
algorithm works, so that every process can unambiguously make

66
00:03:28,260 --> 00:03:31,240
a decision as to where to place an incoming

67
00:03:31,240 --> 00:03:33,780
request in the queue. So an example of the

68
00:03:33,780 --> 00:03:36,500
state of the queue is as shown. The thing that

69
00:03:36,500 --> 00:03:38,470
should jump out at you immediately is that the

70
00:03:38,470 --> 00:03:40,570
state of the queue is not the same in

71
00:03:40,570 --> 00:03:45,700
all the processes. For instance Process 1's queue contains

72
00:03:45,700 --> 00:03:49,630
its request that it generated at time 2, but I

73
00:03:49,630 --> 00:03:52,670
don't see it yet in the other queues. Is this

74
00:03:52,670 --> 00:03:56,370
possible that the queue can be inconsistent with one another?

75
00:03:56,370 --> 00:03:59,060
Of course it is possible. The reason it is possible

76
00:03:59,060 --> 00:04:03,210
is because a Process, when it generates a request, puts it

77
00:04:03,210 --> 00:04:05,980
in it's queue and then sends a message out. This

78
00:04:05,980 --> 00:04:08,080
message is going to take some time to reach the other

79
00:04:08,080 --> 00:04:11,030
nodes in the distributed system. So, it sent the message

80
00:04:11,030 --> 00:04:14,710
and after it sent the message it got requests from other

81
00:04:14,710 --> 00:04:17,970
Processes and it has put it in its queue.

82
00:04:17,970 --> 00:04:21,089
And it is possible that this message, all the messages

83
00:04:21,089 --> 00:04:22,590
may not take the same amount of time to

84
00:04:22,590 --> 00:04:24,800
traverse a network. We have no idea what's going on

85
00:04:24,800 --> 00:04:29,850
in the network and therefore it so happens that P1's message is

86
00:04:29,850 --> 00:04:34,990
still in transit. Whereas the request messages from P2 and Pn

87
00:04:34,990 --> 00:04:39,810
have already made it everywhere, and it is in the queues of all the Processes,

88
00:04:39,810 --> 00:04:43,570
but P1's message unfortunately, it's taking a

89
00:04:43,570 --> 00:04:46,040
slow route throught the network and it is

90
00:04:46,040 --> 00:04:48,650
still in transit. And in fact, P1 has

91
00:04:48,650 --> 00:04:53,160
subsequently received P2's and PN's message and put

92
00:04:53,160 --> 00:04:55,770
them into its its local queue. It is

93
00:04:55,770 --> 00:04:58,910
just that P1's message hasn't reached its peers

94
00:04:58,910 --> 00:05:01,640
yet and that's how you get this situation.

95
00:05:01,640 --> 00:05:04,870
So the whole purpose of this exercise is

96
00:05:04,870 --> 00:05:09,020
to unambiguously get the mutual exclusion lock for some

97
00:05:09,020 --> 00:05:12,350
process that is competing for it simultaneously. Now how does

98
00:05:12,350 --> 00:05:16,250
a process know that it has the lock? So I

99
00:05:16,250 --> 00:05:18,800
have to make the decision that I have the lock.

100
00:05:18,800 --> 00:05:20,900
How do I make that decision? Two things have

101
00:05:20,900 --> 00:05:24,860
to be true for me to think that I have

102
00:05:24,860 --> 00:05:28,050
gotten the lock. So the first thing is that my

103
00:05:28,050 --> 00:05:30,450
request has to be at the top of the queue.

104
00:05:30,450 --> 00:05:36,060
So now you see the messages that I talked about, that is P1's message to P2

105
00:05:36,060 --> 00:05:40,840
and Pn not having reached the destination, eventually

106
00:05:40,840 --> 00:05:43,850
they reach the destination. And they have acknowledged

107
00:05:43,850 --> 00:05:49,520
it. And, as a result of that the queues are consistent now. P1's request is at

108
00:05:49,520 --> 00:05:52,470
the top and it also has received acknowledgements

109
00:05:52,470 --> 00:05:55,450
from everybody else. So the way you can

110
00:05:55,450 --> 00:05:58,710
make a decision that you have the lock,

111
00:05:58,710 --> 00:06:02,320
unambiguously, in the entire distributed system. Two conditions. First

112
00:06:02,320 --> 00:06:05,130
thing, my request is at the top of the

113
00:06:05,130 --> 00:06:09,130
queue. The second thing is I've received acknowledgments from

114
00:06:09,130 --> 00:06:11,970
all the other nodes in the system. In this

115
00:06:11,970 --> 00:06:15,170
case, all the other nodes were not requesting this

116
00:06:15,170 --> 00:06:18,160
lock so they've sent me acknowledgments. And I've received

117
00:06:18,160 --> 00:06:20,470
all the acknowledgements and there is no other request

118
00:06:20,470 --> 00:06:23,340
that is ahead of me. I've also received lock requests

119
00:06:23,340 --> 00:06:27,430
from P2 and Pn and they are later than mine and

120
00:06:27,430 --> 00:06:30,100
that's how they've been ordered in the queue. So the two

121
00:06:30,100 --> 00:06:33,570
conditions I'm going to look for to make a decision locally

122
00:06:33,570 --> 00:06:36,250
that I have the lock is my request is at the

123
00:06:36,250 --> 00:06:40,080
top of the queue and I've either received acknowledgements from all

124
00:06:40,080 --> 00:06:42,720
the other nodes in the system, if nobody else is competing

125
00:06:42,720 --> 00:06:46,040
for the lock at the same time, or all the requests

126
00:06:46,040 --> 00:06:48,770
that I've gotten so far are later than

127
00:06:48,770 --> 00:06:51,700
my own lock request. Let's say that I haven't

128
00:06:51,700 --> 00:06:56,510
received the acknowledgement for my request from Q, Q2,

129
00:06:56,510 --> 00:06:58,650
and Qn. Can I go ahead and assume I

130
00:06:58,650 --> 00:07:02,800
have the lock? Yes, I can. Why? Because Even

131
00:07:02,800 --> 00:07:04,950
though these guys have not sent me the acknowledgment

132
00:07:04,950 --> 00:07:08,595
yet, it's coming, slowly coming. But I've received lock

133
00:07:08,595 --> 00:07:13,290
requests from them, with timestamps 5 and 10 respectively.

134
00:07:13,290 --> 00:07:21,510
Therefore I can make an unambiguous decision that my lock request precedes all

135
00:07:21,510 --> 00:07:25,900
the other lock requests at this point of time. And I can go ahead and get the

136
00:07:25,900 --> 00:07:27,690
lock. I'm sure you've figured it our

137
00:07:27,690 --> 00:07:32,090
already but since we are following Lamport's cCock

138
00:07:32,090 --> 00:07:35,600
in implementing this mutual execution lock algorithm,

139
00:07:35,600 --> 00:07:38,390
the ACK message for a particular lock request

140
00:07:38,390 --> 00:07:42,760
is going to have a later timestamp than the time stamp associated with the

141
00:07:42,760 --> 00:07:46,335
request itself. So you can see that

142
00:07:46,335 --> 00:07:51,690
Lamport's Logical Clock, with the addition of

143
00:07:51,690 --> 00:07:56,610
a way of deriving a total order from the partial orders given by the Lamport's

144
00:07:56,610 --> 00:08:03,440
clock, allows us to unambiguously make a decision locally based on the state

145
00:08:03,440 --> 00:08:08,250
of local queue as to whether I have the lock or not.

146
00:08:08,250 --> 00:08:12,810
Now lets talk about how I go about releasing the lock. So if

147
00:08:12,810 --> 00:08:15,590
I have the lock. I have used it for a while and

148
00:08:15,590 --> 00:08:17,530
now I am ready to say, well I am done with a lock,

149
00:08:17,530 --> 00:08:20,210
I can release it. What do I do? Well I am going to

150
00:08:20,210 --> 00:08:23,510
send an unlock message to all the other guys. The first thing that

151
00:08:23,510 --> 00:08:25,800
I do, of course, is get rid of the entry that I have

152
00:08:25,800 --> 00:08:28,650
in my queue because I am done with the lock. I can remove

153
00:08:28,650 --> 00:08:30,660
it from my queue. Once I remove it from

154
00:08:30,660 --> 00:08:33,250
my queue I am going to send an unlock message

155
00:08:33,250 --> 00:08:35,710
to everybody else. So the state of the queue

156
00:08:35,710 --> 00:08:38,760
indicates that the unlocked message hasn't reached yet. It is

157
00:08:38,760 --> 00:08:40,919
in transit. It is going to eventually reach these

158
00:08:40,919 --> 00:08:45,280
guys. And when the peers receive the unlocked message they're

159
00:08:45,280 --> 00:08:50,360
going to basically remove the entry, the corresponding entry, from

160
00:08:50,360 --> 00:08:53,750
the respective queues. So P1's turn with using the lock

161
00:08:53,750 --> 00:08:57,030
is complete now. It has done its lock and has done its unlock and

162
00:08:57,030 --> 00:09:01,120
now other Processes in the system, if they're competing for the same lock, can

163
00:09:01,120 --> 00:09:06,450
use the same decision making process to figure out whether they are the winners

164
00:09:06,450 --> 00:09:08,850
for getting the lock next and using

165
00:09:08,850 --> 00:09:11,090
it and entering the respective critical sections.
