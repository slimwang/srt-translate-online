1
00:00:00,000 --> 00:00:05,431
We're going to have 4 items that we're going to try to hash into this giant cuckoo hash table,

2
00:00:05,431 --> 00:00:09,716
and the cuckoo hash table has 2 sub tables, t1 and t2,

3
00:00:09,716 --> 00:00:14,645
and so each one of those 2 sub tables has 2 slots

4
00:00:14,645 --> 00:00:21,066
corresponding to h1 equals 0, h1 equals 1, h2 equals 0, h2 equals 1.

5
00:00:21,066 --> 00:00:25,770
Now we have 4 items that we are going to try to hash into this big cuckoo hash table.

6
00:00:25,770 --> 00:00:29,047
And so, I've already computed their hash functions.

7
00:00:29,047 --> 00:00:35,480
So item A, for instance--it's h sub 1 of its particular key is 1,

8
00:00:35,480 --> 00:00:37,827
and h sub 2 is equal to 1, and so on.

9
00:00:37,827 --> 00:00:39,849
So you can see all these hash functions here.

10
00:00:39,849 --> 00:00:41,913
So let's do round 1. What do we do on round 1?

11
00:00:41,913 --> 00:00:46,881
What we try to do is place all of the alive items, and we start off with all the items being alive,

12
00:00:46,881 --> 00:00:51,255
and we're trying to place them all into t1 using this hash function.

13
00:00:51,255 --> 00:00:56,720
So now we see that items A and C both would like to map into this bucket,

14
00:00:56,720 --> 00:01:01,312
and items B and D, because of their values of h1, would like to map into this bucket.

15
00:01:01,312 --> 00:01:06,346
Now we can only fit 1 item per bucket, so we're going to arbitrarily pick a couple of items to win.

16
00:01:06,346 --> 00:01:09,724
Okay, so I'll arbitrarily pick that C and D happen to win here.

17
00:01:09,724 --> 00:01:14,346
D is written into hash bucket number 0, and C is written into hash bucket number 1.

18
00:01:14,346 --> 00:01:16,893
Cool, and so A and B are still alive.

19
00:01:16,893 --> 00:01:19,390
And now, we'll move to the next iteration of the algorithm,

20
00:01:19,390 --> 00:01:23,515
and we'll use h sub 2 to try to map A and B into table 2,

21
00:01:23,515 --> 00:01:28,432
and we see, well, both of these guys would like to map into this same bucket.

22
00:01:28,432 --> 00:01:31,944
So again, they're both going to try; only 1 of them is going to succeed.

23
00:01:31,944 --> 00:01:34,979
For the purposes of argument, I'm going to say that's going to B.

24
00:01:34,979 --> 00:01:40,494
Okay, so now we still have the element A left after both rounds, so here's the neat part.

25
00:01:40,494 --> 00:01:45,075
We now go back to table 1, and we know that if we hash item A,

26
00:01:45,075 --> 00:01:48,353
it's going to collide with an item already stored in the hash table.

27
00:01:48,353 --> 00:01:50,678
We know that because it didn't succeed the first time.

28
00:01:50,678 --> 00:01:53,283
So we're going to try to hash it again,

29
00:01:53,283 --> 00:01:58,179
but now when it collides with an item that's already in the hash table, here's the different part.

30
00:01:58,179 --> 00:02:01,258
We're going to take A and place it into the hash table,

31
00:02:01,258 --> 00:02:05,061
and we're going to kick out the item that's already there, and continue.

32
00:02:05,061 --> 00:02:08,002
And now we continue on the next iteration of the algorithm again.

33
00:02:08,002 --> 00:02:11,336
We see that the only item that's left alive is now C.

34
00:02:11,336 --> 00:02:14,804
We see that its value of h2 is 0,

35
00:02:14,804 --> 00:02:18,842
so we can safely place C into the hash table here, and we're done.

36
00:02:18,842 --> 00:02:24,069
So the big picture here is that by kicking out things that are already in the hash table,

37
00:02:24,069 --> 00:02:27,643
we have a new set of items to try to continue to place in the hash table,

38
00:02:27,643 --> 00:02:32,188
and maybe they'll fit better than the old set, and we continue to apply this procedure.

39
00:02:32,188 --> 00:02:38,192
On each iteration, we always try to place our outstanding items into the next sub table of the hash table,

40
00:02:38,192 --> 00:02:42,871
and if they succeed, they kick out the items already there until we have no more items left.

41
00:02:42,871 --> 00:02:46,871
Now, will this always succeed? Yes or no?
