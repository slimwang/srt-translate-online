1
00:00:00,000 --> 00:00:03,000
In the first homework question, we have to determine which of the given functions

2
00:00:03,000 --> 00:00:06,000
scale linearly with the input list p.

3
00:00:06,000 --> 00:00:08,000
Let's go through the functions 1 by 1.

4
00:00:08,000 --> 00:00:10,000
This should look familiar.

5
00:00:10,000 --> 00:00:15,000
All sum_list does is take an input list p and calculate the sum of the numbers in p.

6
00:00:15,000 --> 00:00:18,000
In this case the worst and the best case are really the same,

7
00:00:18,000 --> 00:00:22,000
because no matter what, you traverse this for loop for the length of p.

8
00:00:22,000 --> 00:00:25,000
And accordingly, if you double the number of items in p,

9
00:00:25,000 --> 00:00:29,000
you also double the run time because you have to go through twice as many items

10
00:00:29,000 --> 00:00:31,000
in this for loop.

11
00:00:31,000 --> 00:00:37,000
And so the run time of sum_list scales linearly with the number of items in the list p.

12
00:00:37,000 --> 00:00:41,000
This procedure determines whether or not a given list p has duplicate elements.

13
00:00:41,000 --> 00:00:43,000
Let's go through a quick example.

14
00:00:43,000 --> 00:00:46,000
Here's a small list with the elements 0, 1, and 1.

15
00:00:46,000 --> 00:00:50,000
Going through the code here, we have i and we have j.

16
00:00:50,000 --> 00:00:53,000
In the first iteration of the loops, i and j are both going to be 0.

17
00:00:53,000 --> 00:00:56,000
That means we're looking at whether the first element is equivalent to the first element.

18
00:00:56,000 --> 00:01:02,000
We have this case right here that says not to compare the same element with itself.

19
00:01:02,000 --> 00:01:06,000
So j increments and now we're comparing the first element with the second element

20
00:01:06,000 --> 00:01:08,000
and they're not the same.

21
00:01:08,000 --> 00:01:11,000
We do that again, the first element with the third element. They're not the same.

22
00:01:11,000 --> 00:01:14,000
We then increment i and reset j.

23
00:01:14,000 --> 00:01:18,000
0 and 1 are not the same,

24
00:01:18,000 --> 00:01:20,000
1 and 1 are not the same,

25
00:01:20,000 --> 00:01:27,000
and lastly, we have 1 and then 2, and in this case the second element

26
00:01:27,000 --> 00:01:29,000
and the third element are the same, so we're going to return True.

27
00:01:29,000 --> 00:01:31,000
That's how this works.

28
00:01:31,000 --> 00:01:35,000
Now, in order to examine the run time, the key part here are these 2 for loops.

29
00:01:35,000 --> 00:01:38,000
For this for loop we're going to go roughly the length of p,

30
00:01:38,000 --> 00:01:43,000
and for every element in p we're also going to go roughly the length of p.

31
00:01:43,000 --> 00:01:47,000
This creates a quadratic run time in relation to the number of elements in p,

32
00:01:47,000 --> 00:01:50,000
namely if we double the number of elements in p,

33
00:01:50,000 --> 00:01:55,000
we're going to increase the run time of the entire procedure by a factor of 4.

34
00:01:55,000 --> 00:01:57,000
Here we have our mystery function.

35
00:01:57,000 --> 00:02:00,000
You've never seen this before, but the general structure should be familiar.

36
00:02:00,000 --> 00:02:02,000
Here we have a while loop,

37
00:02:02,000 --> 00:02:05,000
and we set i to 0 and we're going to continue this while loop

38
00:02:05,000 --> 00:02:07,000
until i is greater than or equal to the length of p.

39
00:02:07,000 --> 00:02:10,000
And looking down here, we're basically going to be iterating through p,

40
00:02:10,000 --> 00:02:13,000
but we're going to do it a little different than normal.

41
00:02:13,000 --> 00:02:17,000
If the element in p at index i is even,

42
00:02:17,000 --> 00:02:19,000
we're going to increment i by 2.

43
00:02:19,000 --> 00:02:22,000
Otherwise we're going to increment it by 1.

44
00:02:22,000 --> 00:02:26,000
So the worst case for this function in terms of run time

45
00:02:26,000 --> 00:02:30,000
is if every element in p is odd,

46
00:02:30,000 --> 00:02:35,000
meaning we only increment i by 1 for each iteration.

47
00:02:35,000 --> 00:02:38,000
So we're going to go at half the speed that we would

48
00:02:38,000 --> 00:02:40,000
if every element in p was even.

49
00:02:40,000 --> 00:02:47,000
Simplifying the worst case, all we have is a while loop through every element in the list p,

50
00:02:47,000 --> 00:02:49,000
so this is clearly linear in the worst case.

51
00:02:49,000 --> 00:02:55,000
I'll also note that in the best case the run time of the mystery function is also linear.

52
00:02:55,000 --> 00:02:58,000
That may be a little confusing at first because it goes twice as fast,

53
00:02:58,000 --> 00:03:02,000
but we're really concentrating on the growth of the run time

54
00:03:02,000 --> 00:03:07,000
so that even if it is going twice as fast as the worst case,

55
00:03:07,000 --> 00:03:10,000
if we double the number of elements in the list p,

56
00:03:10,000 --> 00:03:13,000
the run time is also going to double.
