1
00:00:00,300 --> 00:00:02,850
Okay, now let's put this methodology to

2
00:00:02,850 --> 00:00:05,939
work. Specifically, we're going to look at how to

3
00:00:05,939 --> 00:00:09,260
synthesize a TCP IP protocol stack using

4
00:00:09,260 --> 00:00:11,920
this methodology. Starting point of course is the

5
00:00:11,920 --> 00:00:15,200
IO otometer. We specify the protocol in

6
00:00:15,200 --> 00:00:18,500
all the detail that we want, abstractly. That's

7
00:00:18,500 --> 00:00:21,893
the abstract specification of the protocol. And

8
00:00:21,893 --> 00:00:25,457
we can prove that this abstract specification meets

9
00:00:25,457 --> 00:00:28,940
the properties that we want in the protocol, using

10
00:00:28,940 --> 00:00:32,377
the IOA framework. And from the abstract specification, through

11
00:00:32,377 --> 00:00:34,213
a whole bunch of refinements, we can get to

12
00:00:34,213 --> 00:00:37,230
the concrete specification. We saw that already. Those are

13
00:00:37,230 --> 00:00:41,120
the two steps that we already mentioned how we

14
00:00:41,120 --> 00:00:45,210
take and synthesize in complex software. The next part,

15
00:00:45,210 --> 00:00:47,870
how do we synthesize the stack from the concrete

16
00:00:47,870 --> 00:00:50,940
spec? In other words how do we generate this code,

17
00:00:50,940 --> 00:00:57,920
the O comma code. That represents this abstract specification for the TCP/IP

18
00:00:57,920 --> 00:01:02,240
protocol stack. So we need to have a starting point for that. The starting point

19
00:01:02,240 --> 00:01:06,810
to get an unoptimized Ocaml implementation starting

20
00:01:06,810 --> 00:01:10,010
from this concrete spec, is to use

21
00:01:10,010 --> 00:01:13,000
this on symbol suite of microprotocols. That

22
00:01:13,000 --> 00:01:16,010
the authors of this ensemble paper that

23
00:01:16,010 --> 00:01:20,990
I've assigned to you have synthesized at Cornell. Why use

24
00:01:20,990 --> 00:01:25,550
ensemble? Well, remember, our goal is to mimic the

25
00:01:25,550 --> 00:01:30,510
methodology that is used in building real site, large-scale,

26
00:01:30,510 --> 00:01:36,000
realized circuits. I mentioned at the outset that today,

27
00:01:36,000 --> 00:01:41,470
building a billion transistor CPU chip, the way it works is they

28
00:01:41,470 --> 00:01:45,950
use a component-based design, taking components of hardware

29
00:01:45,950 --> 00:01:49,180
structures that have already been implemented And assemble them

30
00:01:49,180 --> 00:01:52,750
together in order to realize this big, mammoth

31
00:01:52,750 --> 00:01:54,440
chip. And we are trying to do the same

32
00:01:54,440 --> 00:01:58,040
thing for building complex software systems. So the

33
00:01:58,040 --> 00:02:00,260
starting point has got to be a set of

34
00:02:00,260 --> 00:02:03,650
components, and that's what Ensemble Suite of microprotocols

35
00:02:03,650 --> 00:02:06,750
give you. Now, if you think about a protocol

36
00:02:06,750 --> 00:02:11,880
like TCP IP, that protocol has a lot of features in it, and each of those

37
00:02:11,880 --> 00:02:18,940
features require nontrivial amount of code building. So, for instance TCP IP has

38
00:02:18,940 --> 00:02:22,670
mechanisms for sliding window management... Flow control,

39
00:02:22,670 --> 00:02:26,140
congestion control, scattering and gathering packets in

40
00:02:26,140 --> 00:02:29,480
order to assemble messages into units that

41
00:02:29,480 --> 00:02:31,800
can be delivered to the application. All of

42
00:02:31,800 --> 00:02:34,300
these things are features of the TCP/IP

43
00:02:34,300 --> 00:02:37,330
protocol. And the ensemble suite of microprotocols

44
00:02:37,330 --> 00:02:40,790
has components for each of those functionalities.

45
00:02:40,790 --> 00:02:44,140
That you might have in any complex transport

46
00:02:44,140 --> 00:02:49,770
protocol, like TCPIP. And if you recall the paper that we read earlier by Tacket

47
00:02:49,770 --> 00:02:56,980
and Levey about optimizing RPC in a local area network, we said that one size

48
00:02:56,980 --> 00:02:58,980
fits all is not a good way to

49
00:02:58,980 --> 00:03:03,410
think about designing complex software systems. Depending on what

50
00:03:03,410 --> 00:03:05,700
the environment is, you have to adapt what the

51
00:03:05,700 --> 00:03:08,900
layers of systems off it do. And therefore, even

52
00:03:08,900 --> 00:03:11,830
though the TCP/IP protocol is well laid out in

53
00:03:11,830 --> 00:03:14,640
terms of what the functional requirements are, whether we

54
00:03:14,640 --> 00:03:18,640
need all of the components in a particular implementation

55
00:03:18,640 --> 00:03:22,130
of TCP/IP or not is something that is up

56
00:03:22,130 --> 00:03:25,870
for the designer to decide. And having

57
00:03:25,870 --> 00:03:28,670
a suite of micro protocols, gives you that

58
00:03:28,670 --> 00:03:32,230
freedom to mix and match the components that

59
00:03:32,230 --> 00:03:35,540
make sense in this specific environment for which

60
00:03:35,540 --> 00:03:37,770
to building a protocol stack. And that's the

61
00:03:37,770 --> 00:03:40,220
reason for using the ensemble suite of micro

62
00:03:40,220 --> 00:03:44,040
protocols. It has about 60 protocols that makeup

63
00:03:44,040 --> 00:03:47,240
the whole ensemble suite. The suite of micro

64
00:03:47,240 --> 00:03:51,885
protocols of ensemble written in Ocaml and

65
00:03:51,885 --> 00:03:54,270
[UNKNOWN] component based design of a complex

66
00:03:54,270 --> 00:03:57,030
system such as TCPIP protocol stack. And

67
00:03:57,030 --> 00:04:00,930
the micro protocols have well defined interfaces that

68
00:04:00,930 --> 00:04:04,030
allows composition. Every micro protocol has an

69
00:04:04,030 --> 00:04:06,860
interface for the layers that sit on

70
00:04:06,860 --> 00:04:12,470
top of it. An interface for interacting with layers that sit below it. And this

71
00:04:12,470 --> 00:04:16,839
is exactly the kind of component that you want

72
00:04:16,839 --> 00:04:20,190
so that you can actually assemble these components layer

73
00:04:20,190 --> 00:04:22,730
by layer in order to get the functionality that

74
00:04:22,730 --> 00:04:25,750
you want for the original protocol stack that you

75
00:04:25,750 --> 00:04:28,570
intended to build. Just to reiterate what we said

76
00:04:28,570 --> 00:04:30,860
in the, as the, just to reiterate what we

77
00:04:30,860 --> 00:04:33,350
set as the original goal, we want to mimic

78
00:04:33,350 --> 00:04:38,170
VLSI design in building a complex software system. And this

79
00:04:38,170 --> 00:04:40,820
well defined interfaces of the on

80
00:04:40,820 --> 00:04:44,710
symbol, microprotocol suite facilitates component based design.
