1
00:00:00,940 --> 00:00:04,070
First we're going to modify
the calculatePrice method signature

2
00:00:04,070 --> 00:00:06,480
to have the correct return data type.

3
00:00:06,480 --> 00:00:08,640
We're also going to assume that
there's 0 input parameters.

4
00:00:09,850 --> 00:00:12,840
This is where the calculatePrice
method is defined.

5
00:00:12,840 --> 00:00:15,930
The purpose of this method is to
calculate the total price of the order

6
00:00:15,930 --> 00:00:18,160
and then return that.

7
00:00:18,160 --> 00:00:19,660
The price should be an integer so

8
00:00:19,660 --> 00:00:22,670
we should change the return
data type from void to int.

9
00:00:23,730 --> 00:00:25,800
That takes care of the first task.

10
00:00:25,800 --> 00:00:29,130
The quiz also said to make sure that
there's no input parameters, and

11
00:00:29,130 --> 00:00:29,930
that's what we have here.

12
00:00:31,020 --> 00:00:34,150
Now the second task is to
modify the inside of the method

13
00:00:34,150 --> 00:00:36,798
to make sure that we're computing
the correct price for the order.

14
00:00:36,798 --> 00:00:39,220
And assuming $5.00 for a cup of coffee.

15
00:00:40,770 --> 00:00:43,880
Inside this method we're taking
the quantity of cups ordered.

16
00:00:43,880 --> 00:00:46,460
And we're multiplying it
by $5 per cup of coffee.

17
00:00:47,700 --> 00:00:49,860
This equals the total order price.

18
00:00:49,860 --> 00:00:51,100
So this line of code is cracked.

19
00:00:52,250 --> 00:00:56,920
But there's two issues that I see,
the variable price is never used and

20
00:00:56,920 --> 00:00:59,490
there's an error that says
missing return statement.

21
00:00:59,490 --> 00:01:03,470
It's expecting us to return an integer,
but we're not returning anything.

22
00:01:03,470 --> 00:01:07,120
Right now our code is the same
as if we just said this.

23
00:01:07,120 --> 00:01:12,060
We need a line that says return and
then actually put a value here and

24
00:01:12,060 --> 00:01:13,950
the value on return is a price.

25
00:01:13,950 --> 00:01:18,220
So, I'm just going to put price,
which is a variable we defined up here.

26
00:01:18,220 --> 00:01:20,760
Cool, so now all the errors go away.

27
00:01:20,760 --> 00:01:22,650
We should also modify the Java DOC.

28
00:01:22,650 --> 00:01:27,060
So that we specify that we're
turning the total price.

29
00:01:27,060 --> 00:01:30,090
That way when someone's calling this
method, they know what to expect.

30
00:01:31,600 --> 00:01:35,730
Okay, so now we finished all
the parts for defining this method.

31
00:01:35,730 --> 00:01:38,600
Now, let's move on to where
the method is getting called.

32
00:01:38,600 --> 00:01:41,939
Within the submitOrder method, we
should call the calculatePrice method.

33
00:01:43,240 --> 00:01:46,120
Currently calculate price,
is floating in the middle of nowhere.

34
00:01:46,120 --> 00:01:49,130
I'm going to copy it, and
I'm going to paste it up here.

35
00:01:49,130 --> 00:01:52,830
Because before we would calculate
the price of the order in line,

36
00:01:52,830 --> 00:01:55,500
in the submit order method, but
now we have a method for it.

37
00:01:55,500 --> 00:01:57,670
So I'm going to paste this here.

38
00:01:57,670 --> 00:01:59,910
Now get rid of the extra semicolon.

39
00:01:59,910 --> 00:02:03,170
You'll notice that price is a local
variable in this method, and

40
00:02:03,170 --> 00:02:04,910
also in this method.

41
00:02:04,910 --> 00:02:06,520
It's okay if they have the same name,

42
00:02:06,520 --> 00:02:09,258
because these are different
variable scopes.

43
00:02:09,258 --> 00:02:13,100
So the price variable here is totally
unrelated with the variable here.

44
00:02:13,100 --> 00:02:16,300
They're updated and
created independently from each other.

45
00:02:16,300 --> 00:02:19,750
And once this method finishes executing,
this price variable is gone.

46
00:02:20,830 --> 00:02:23,230
Okay back to our submitOrder method.

47
00:02:23,230 --> 00:02:24,810
So we calculated a price and

48
00:02:24,810 --> 00:02:29,680
stored it in a variable, and then we
can use it to create the price message.

49
00:02:30,820 --> 00:02:33,390
So, actually,
all of this code can stay the same.

50
00:02:33,390 --> 00:02:34,800
We're concatenating the integer,

51
00:02:34,800 --> 00:02:39,490
price, to the string total
with the currency symbol.

52
00:02:39,490 --> 00:02:43,680
Then we concatenate "Thank you!" and
then just display it on the screen.

53
00:02:43,680 --> 00:02:47,960
So I'm going to erase these extra,
blank lines, and save it, and

54
00:02:47,960 --> 00:02:49,410
then we can run it on our device.

55
00:02:50,660 --> 00:02:52,250
Okay, so I changed the quantity, and

56
00:02:52,250 --> 00:02:55,700
hit ORDER, then it correctly
shows $25 as the price.

57
00:02:56,790 --> 00:02:57,825
Awesome, it worked.

58
00:02:57,825 --> 00:03:00,864
But how can I be sure that
calculatePrice is actually

59
00:03:00,864 --> 00:03:05,640
working because there's no user visible
change compared to our app from before.

60
00:03:05,640 --> 00:03:09,524
Here are a couple of techniques that
you can do to verify that your code is

61
00:03:09,524 --> 00:03:10,644
actually running.

62
00:03:10,644 --> 00:03:14,420
I could have it return a really
crazy number, like 700.

63
00:03:14,420 --> 00:03:16,972
Save my code and then run it.

64
00:03:16,972 --> 00:03:20,671
Now what I expect to see is
if I change the quantity and

65
00:03:20,671 --> 00:03:25,226
hit the ORDER button,
it should saw that the price is $700.

66
00:03:25,226 --> 00:03:29,190
That way I'll know that this calculate
price method is actually getting called.

67
00:03:30,250 --> 00:03:31,610
And it does, cool.

68
00:03:32,910 --> 00:03:35,040
Now I can revert this change.

69
00:03:35,040 --> 00:03:38,120
Another way to check that this
method is getting executed

70
00:03:38,120 --> 00:03:39,220
is to add a break point here.

71
00:03:40,230 --> 00:03:43,390
So I'm going to click on
this little bug icon and

72
00:03:43,390 --> 00:03:45,040
then our apple enter debug mode.

73
00:03:46,370 --> 00:03:47,530
If I change the quantity and

74
00:03:47,530 --> 00:03:51,250
I hit order, then I expect that
the app will pause at this point.

75
00:03:53,140 --> 00:03:54,580
And it does.

76
00:03:54,580 --> 00:03:57,460
So now we're in
the calculate price method.

77
00:03:57,460 --> 00:04:00,100
There is a global variable, quantity.

78
00:04:00,100 --> 00:04:05,340
And if I step over to the next line then
I see that there's now a local variable,

79
00:04:05,340 --> 00:04:12,670
price And it's set to be $15 because
quantity is 3, 3 times 5 is 15, cool.

80
00:04:12,670 --> 00:04:15,777
So, it's going through
the calculated price method, and

81
00:04:15,777 --> 00:04:18,834
if I hit Resume,
then it updates properly on this screen.
