1
00:00:00,300 --> 00:00:02,700
There's one last optimization that I want to mention, and

2
00:00:02,700 --> 00:00:05,420
this is a hardware one. One might expect that the CPU

3
00:00:05,420 --> 00:00:08,700
had to execute all of the store instructions, needed to move

4
00:00:08,700 --> 00:00:12,830
data along the bus from memory to disk, and vice versa.

5
00:00:12,830 --> 00:00:16,300
This would work, but it would be very slow. Instead, streaming

6
00:00:16,300 --> 00:00:19,690
devices, like a disk, have their own controller that is capable

7
00:00:19,690 --> 00:00:23,180
of sending along the bus itself. Through the bus, the CPU

8
00:00:23,180 --> 00:00:26,390
tells it the length of the chunk it's supposed to copy,

9
00:00:26,390 --> 00:00:30,910
the device address on the disk, the memory address, the

10
00:00:30,910 --> 00:00:33,730
command, whether it's a read or a write, and then

11
00:00:33,730 --> 00:00:36,530
tells it to go. The CPU then goes on about

12
00:00:36,530 --> 00:00:40,200
its business while the device controller uses the memory bus

13
00:00:40,200 --> 00:00:42,780
to either read or write the data. Now the CPU

14
00:00:42,780 --> 00:00:46,050
and the device controller are in competition for the use

15
00:00:46,050 --> 00:00:48,830
of the bus here. But because the CPU is going

16
00:00:48,830 --> 00:00:51,390
to find most of its data in the cache, it's not

17
00:00:51,390 --> 00:00:53,980
using the memory bus all that often, leaving it

18
00:00:53,980 --> 00:00:57,120
for the device controller. This phenomenon is sometimes called

19
00:00:57,120 --> 00:00:59,720
cycle stealing as the device controller is able to

20
00:00:59,720 --> 00:01:02,790
steal cycles on the memory bus away from the CPU.
