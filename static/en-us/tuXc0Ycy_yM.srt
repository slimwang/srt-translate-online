1
00:00:00,140 --> 00:00:02,290
Okay. The last thing I want to talk about with regard

2
00:00:02,290 --> 00:00:06,670
to update, is how to update multiple documents at once.

3
00:00:06,670 --> 00:00:09,170
There are many situations in which we want to do

4
00:00:09,170 --> 00:00:12,440
some sort of global modification to all documents matching a

5
00:00:12,440 --> 00:00:16,480
certain set of criteria. So, here we selected a single

6
00:00:16,480 --> 00:00:20,660
document, and updated its country code to DEU. And updated

7
00:00:20,660 --> 00:00:22,940
it so that it included this country code. But this

8
00:00:22,940 --> 00:00:25,770
is a country code, not a city code. And we

9
00:00:25,770 --> 00:00:27,810
could go into why we would want to do this. This

10
00:00:27,810 --> 00:00:30,700
is definitely a de-normalization of this data, if you're familiar with

11
00:00:30,700 --> 00:00:34,730
that term. Essentially where we headed here with this example,

12
00:00:34,730 --> 00:00:37,260
is that the country code will be replicated in every single

13
00:00:37,260 --> 00:00:40,920
document that represents the city in Germany. In Mongo DB,

14
00:00:40,920 --> 00:00:43,840
we design our document schemas so that they match the access

15
00:00:43,840 --> 00:00:48,110
patterns. So that ideally, in order to satisfy any one query,

16
00:00:48,110 --> 00:00:50,970
you only have to hit the database once. Therefore the normalization

17
00:00:50,970 --> 00:00:53,650
makes sense. It's a way of getting really hyper formats

18
00:00:53,650 --> 00:00:57,410
and being able to scale really well, your database. Okay,

19
00:00:57,410 --> 00:00:59,790
pardon the slight digression, but I assume that for at

20
00:00:59,790 --> 00:01:02,890
least a few of you, the normalized versus denormalized data

21
00:01:02,890 --> 00:01:05,740
question was coming to mind. Okay, back to the topic

22
00:01:05,740 --> 00:01:08,100
at hand. In this case, what I'd like to do,

23
00:01:08,100 --> 00:01:12,290
is use update to query for documents whose country is

24
00:01:12,290 --> 00:01:16,330
Germany. And what I'd like to do is set the isoCountryCode

25
00:01:16,330 --> 00:01:22,200
field for all such documents to this value. The way we do that using update,

26
00:01:22,200 --> 00:01:24,880
is by specifying a 3rd parameter, multi equals

27
00:01:24,880 --> 00:01:27,920
true. Now by default again, update will modify

28
00:01:27,920 --> 00:01:31,360
just the first document that it finds. So, in order to get it to modify

29
00:01:31,360 --> 00:01:33,580
all documents matching this query, we need to

30
00:01:33,580 --> 00:01:36,810
specify this parameter. Okay, so let's run this.

31
00:01:38,970 --> 00:01:40,870
Okay, and then, we can go back to the Mongo

32
00:01:40,870 --> 00:01:43,840
shell and do a query. Now, this time, I need

33
00:01:43,840 --> 00:01:46,830
to modify my query so that we're looking for all

34
00:01:46,830 --> 00:01:49,930
cities with the country field of Germany. And because we want

35
00:01:49,930 --> 00:01:52,010
them all, I need to change this back to a

36
00:01:52,010 --> 00:01:56,050
Find, instead FindOne. Right? And then I want to pretty

37
00:01:56,050 --> 00:02:00,750
print these, and here we go. Here is Chemnitz, hope

38
00:02:00,750 --> 00:02:05,080
I'm pronouncing that properly. And it has the correct I.S.O. code,

39
00:02:05,080 --> 00:02:07,910
and here we have another city, with the correct country

40
00:02:07,910 --> 00:02:10,889
code and so on as we move through this data.

41
00:02:12,220 --> 00:02:14,320
Okay, so that's multiple update and of course we could

42
00:02:14,320 --> 00:02:17,530
use other operators besides just set in this same way.
