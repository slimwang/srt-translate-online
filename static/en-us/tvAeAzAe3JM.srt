1
00:00:00,300 --> 00:00:04,140
A common answer we heard from our students, is that the word delegate,

2
00:00:04,140 --> 00:00:07,510
makes them think of the relationship between a boss and an employee.

3
00:00:07,510 --> 00:00:10,770
Perhaps you've been in a situation where your boss has delegated some work to

4
00:00:10,770 --> 00:00:12,420
you, or given you some work.

5
00:00:12,420 --> 00:00:15,460
The idea of delegating work is similar in iOS,

6
00:00:15,460 --> 00:00:19,520
here you can think of AV audio recorder like boss.

7
00:00:19,520 --> 00:00:21,410
It knows how to record audio.

8
00:00:21,410 --> 00:00:24,510
It also knows when the recording is done and is ready for playback.

9
00:00:24,510 --> 00:00:28,480
In fact, if you look deep enough in the code for AV audio recorder you'll find

10
00:00:28,480 --> 00:00:32,110
a function called audio recorder did finish recording.

11
00:00:32,110 --> 00:00:35,340
This is the function that gets called when the recording has finished.

12
00:00:35,340 --> 00:00:39,120
Now honestly, this seems like a method we could use in our class.

13
00:00:39,120 --> 00:00:40,920
Record sounds view controller.

14
00:00:40,920 --> 00:00:44,580
Remember the situation where our user would record a five minute long

15
00:00:44,580 --> 00:00:46,520
conversation with a friend on their app?

16
00:00:46,520 --> 00:00:48,950
If somehow we had access to this method,

17
00:00:48,950 --> 00:00:52,320
it could tell us exactly when the audio was recorded successfully, so

18
00:00:52,320 --> 00:00:56,010
then we could do things with that audio, for instance, playback.

19
00:00:56,010 --> 00:01:00,630
So then, why doesn't av audio recorder just tell our class that hey.

20
00:01:00,630 --> 00:01:02,460
Audio has been recorded successfully.

21
00:01:02,460 --> 00:01:06,510
Well, one reason for that is that we wrote our class today.

22
00:01:06,510 --> 00:01:11,280
And this class, AVAudioRecorder, was written by an Apple engineer years ago.

23
00:01:11,280 --> 00:01:13,130
At the time they wrote this class,

24
00:01:13,130 --> 00:01:15,520
they had no idea we would be writing our class.

25
00:01:15,520 --> 00:01:18,220
And that we would call it record sounds view controller.

26
00:01:18,220 --> 00:01:20,440
One way Apple decided to overcome this problem,

27
00:01:20,440 --> 00:01:25,110
was by delegating the implementation of methods like this, to classes like ours.

28
00:01:25,110 --> 00:01:29,790
Our class record sounds view controller can take advantage of this method,

29
00:01:29,790 --> 00:01:32,750
if we become a delegate of AV audio recorder.

30
00:01:32,750 --> 00:01:34,940
So to make this boss, employee, or

31
00:01:34,940 --> 00:01:39,010
delegate relationship work in our code, we have to do two things.

32
00:01:39,010 --> 00:01:42,600
The first thing we have to do, is to change the definition of record sounds view

33
00:01:42,600 --> 00:01:46,840
controller by adding this thing av audio recorder delegate to it.

34
00:01:46,840 --> 00:01:49,750
The second thing we have to do is, somewhere in our class,

35
00:01:49,750 --> 00:01:54,100
we have to write this line of code: audio recorder dot delegate equal to self.

36
00:01:54,100 --> 00:01:57,010
Self here means record sounds view controller.

37
00:01:57,010 --> 00:02:01,010
And what this statement is saying is that RecordSoundsViewController is now

38
00:02:01,010 --> 00:02:03,310
the delegate of audioRecorder.

39
00:02:03,310 --> 00:02:06,730
After we have done these two things, we can then implement the function

40
00:02:06,730 --> 00:02:10,110
audioRecorderDidFinishRecording inside our class.

41
00:02:10,110 --> 00:02:12,870
So in the next video, we will add these two things to our code.
