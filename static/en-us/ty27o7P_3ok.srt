1
00:00:00,370 --> 00:00:01,640
Welcome to Computer Vision.

2
00:00:01,640 --> 00:00:05,440
The last couple lessons we introduced the notion of filtering.

3
00:00:05,440 --> 00:00:07,730
We started from a notion of how to do like,

4
00:00:07,730 --> 00:00:11,500
noise removal as a way of applying a, a linear operator type.

5
00:00:11,500 --> 00:00:12,730
Mostly time being linear.

6
00:00:12,730 --> 00:00:15,200
And it was being able to do a local averaging.

7
00:00:15,200 --> 00:00:17,890
We also talked about the difference between correlation and convolution.

8
00:00:17,890 --> 00:00:21,000
Which is sort of just keeping a little bit of bookkeeping in

9
00:00:21,000 --> 00:00:24,690
terms of keeping track of appropriate orientation of the filters.

10
00:00:24,690 --> 00:00:26,310
Now we are going to shift a little bit.

11
00:00:26,310 --> 00:00:29,470
And talk about the notion of filters as some way of

12
00:00:29,470 --> 00:00:32,780
getting at an intermediate representation of an image.

13
00:00:32,780 --> 00:00:35,720
What I mean by that is, you could imagine you take some image,

14
00:00:35,720 --> 00:00:39,990
and you convert the pixels into some, maybe an array again.

15
00:00:39,990 --> 00:00:41,990
Still an image as a function.

16
00:00:41,990 --> 00:00:46,830
But the idea is that that function now, is no longer just about the intensity.

17
00:00:46,830 --> 00:00:50,480
But it's about some property of the pixels locally in the image.

18
00:00:50,480 --> 00:00:54,290
And then we'll get to something that might be a very useful property in terms of

19
00:00:54,290 --> 00:00:55,700
representing our image.

20
00:00:55,700 --> 00:00:58,220
Before we do this, I need to put in one little caveat.

21
00:00:58,220 --> 00:01:00,870
Remember before, we talked about things being linear,

22
00:01:00,870 --> 00:01:03,900
so if I was correlating an image, filter with an image.

23
00:01:03,900 --> 00:01:08,180
If I just multiplied that correlation filter by some constant.

24
00:01:08,180 --> 00:01:08,730
Okay?

25
00:01:08,730 --> 00:01:11,000
Then the whole value would get bigger.

26
00:01:11,000 --> 00:01:14,420
So if I were comparing the output of an image correlated with

27
00:01:14,420 --> 00:01:17,320
filter one versus an image correlated with filter two.

28
00:01:17,320 --> 00:01:18,990
And I want to be talking about sort of,

29
00:01:18,990 --> 00:01:22,010
how much filter one responds to the image versus filter two.

30
00:01:22,010 --> 00:01:23,620
It's important that in some sense,

31
00:01:23,620 --> 00:01:29,340
the scale, the multiplicative scale of those filters be the same.

32
00:01:29,340 --> 00:01:32,440
Otherwise the correlation will just be scaled by their difference.

33
00:01:32,440 --> 00:01:32,940
So by the way,

34
00:01:32,940 --> 00:01:35,960
from what I'm about to tell you, it's okay to gloss over the details.

35
00:01:35,960 --> 00:01:38,800
For those of you who are doing the problem sets, you're going to learn a lot

36
00:01:38,800 --> 00:01:41,870
more about this method that's referred to as normalized correlation.

37
00:01:41,870 --> 00:01:43,440
Here I'll just introduce it.

38
00:01:43,440 --> 00:01:47,370
Here's what we're going to do, we're going to assume when we do our correlation.

39
00:01:47,370 --> 00:01:51,380
First, we're gon, we're going to normalize our filters.

40
00:01:51,380 --> 00:01:52,680
By making them that,

41
00:01:52,680 --> 00:01:57,310
say, the standard deviation of all the pixels is equal to one, let's say.

42
00:01:57,310 --> 00:01:59,800
That would be one way of doing it, because as I scale that filter up and

43
00:01:59,800 --> 00:02:02,460
down, its standard deviation grows and shrinks.

44
00:02:02,460 --> 00:02:06,710
So I'm going to make standard deviation be no more, be exactly one.

45
00:02:06,710 --> 00:02:09,070
That's a problem if you've got a constant.

46
00:02:09,070 --> 00:02:09,970
Don't worry about that problem.

47
00:02:09,970 --> 00:02:14,090
We're going to try to make it so that its standard deviation is one.

48
00:02:14,090 --> 00:02:15,690
Then the other thing that we're going to do is,

49
00:02:15,690 --> 00:02:18,280
suppose I've got two images that are actually the same.

50
00:02:18,280 --> 00:02:21,590
Except one has just been multiplied by some constant.

51
00:02:21,590 --> 00:02:27,190
Well then if I correlate, even my normalized kernel, the one that's been

52
00:02:27,190 --> 00:02:31,290
multiplied by the constant, the total value is going to get multiplied also.

53
00:02:31,290 --> 00:02:33,800
So when we do it's called normalized correlation.

54
00:02:33,800 --> 00:02:34,600
We do two things.

55
00:02:34,600 --> 00:02:36,810
We normalize the filter, like we said.

56
00:02:36,810 --> 00:02:40,810
And then when we stick the filter down over a little patch of pixels,

57
00:02:40,810 --> 00:02:45,230
we scale that patch so its standard deviation is also one.

58
00:02:45,230 --> 00:02:47,110
And then we compute the correlation.

59
00:02:47,110 --> 00:02:50,960
And as we move the filter around, we change that image scale because the,

60
00:02:50,960 --> 00:02:52,270
the pixels are different.

61
00:02:52,270 --> 00:02:54,970
And that's what's referred to as normalized correlation.

62
00:02:54,970 --> 00:02:56,410
So for the rest of what I'm going to show you,

63
00:02:56,410 --> 00:02:57,980
I'm going to be doing normalized correlation.
