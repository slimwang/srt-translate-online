1
00:00:00,170 --> 00:00:02,810
Recyclerview was added to
the support library to

2
00:00:02,810 --> 00:00:06,910
ultimately perform many of the same
functions that list view does.

3
00:00:06,910 --> 00:00:09,650
The addition of material
design list item animations

4
00:00:09,650 --> 00:00:13,040
necessitated a significant change
in the way adapters worked.

5
00:00:13,040 --> 00:00:16,560
The list view code was already
exceptionally complicated.

6
00:00:16,560 --> 00:00:21,340
A relatively monolithic code
base handled Layout, Recycling,

7
00:00:21,340 --> 00:00:27,660
Selection, UI decorations like dividers,
Scrolling, Empty View.

8
00:00:27,660 --> 00:00:32,000
The decision was made to start over and
produce a more flexible control.

9
00:00:32,000 --> 00:00:36,070
RecyclerView is focused on doing
precisely what its name suggests.

10
00:00:36,070 --> 00:00:38,670
Managing the recycling of views.

11
00:00:38,670 --> 00:00:42,280
Most of the functions of ListView have
been separated int separate RecyclerView

12
00:00:42,280 --> 00:00:43,420
components.

13
00:00:43,420 --> 00:00:46,400
And we've added an additional
animator component.

14
00:00:46,400 --> 00:00:50,820
One of the exciting ways this is
being used is with LayoutMangers.

15
00:00:50,820 --> 00:00:54,570
Which allows us to create different
pluggable layout experiences.

16
00:00:54,570 --> 00:01:00,280
Of course, we have standard vertical
list views, and horizontal lists.

17
00:01:00,280 --> 00:01:02,250
It's a big deal if you've been
doing Android for a while.

18
00:01:02,250 --> 00:01:04,208
It wasn't actually easy
to do a horizontal list.

19
00:01:04,208 --> 00:01:08,940
Grid layouts and this very cool

20
00:01:08,940 --> 00:01:13,520
staggered grid layout manager which
lays out children of different sizes.

21
00:01:13,520 --> 00:01:14,650
Which supports horizontal and

22
00:01:14,650 --> 00:01:18,800
vertical layouts as well as the ability
to layout children in reverse.

23
00:01:18,800 --> 00:01:21,630
One of the key features that
Recyclerview supports is

24
00:01:21,630 --> 00:01:23,370
custom animations.

25
00:01:23,370 --> 00:01:26,730
So if we delete an item
the default animator will

26
00:01:26,730 --> 00:01:29,820
nicely animate the closing
of the space left behind.

27
00:01:29,820 --> 00:01:30,860
And because the animator,

28
00:01:30,860 --> 00:01:33,900
like everything else in
Recyclerview is plugable.

29
00:01:33,900 --> 00:01:36,830
We can change it and
customize it, the way it works.

30
00:01:36,830 --> 00:01:40,430
And, because the animator, like just
about everything else in Recycler View,

31
00:01:40,430 --> 00:01:43,950
is pluggable, we can customize
the way this works in the future.
