1
00:00:00,000 --> 00:00:03,000
Let's take a look at that last example in a little more detail.

2
00:00:03,000 --> 00:00:05,000
What we would really like to do

3
00:00:05,000 --> 00:00:08,000
is start at the top and call ourselves recursively

4
00:00:08,000 --> 00:00:10,000
to optimize both children.

5
00:00:10,000 --> 00:00:14,000
Once I figure out that 5 times 0 can be replaced by 0

6
00:00:14,000 --> 00:00:17,000
and A can only be replaced by A

7
00:00:17,000 --> 00:00:19,000
I rebuild my abstract syntax tree

8
00:00:19,000 --> 00:00:21,000
and now I'm in a great position

9
00:00:21,000 --> 00:00:23,000
to rewrite this to be just A.

10
00:00:23,000 --> 00:00:25,000
So there's going to be

11
00:00:25,000 --> 00:00:27,000
Step 1: recursive calls.

12
00:00:27,000 --> 00:00:29,000
Step 2: Look for patterns.

13
00:00:29,000 --> 00:00:33,000
And then, finally, Step 3: We are done.

14
00:00:33,000 --> 00:00:36,000
In order for this to work out, our optimizer has to be recursive

15
00:00:36,000 --> 00:00:40,000
just like our evaluator and our interpretor. This is not a coincidence.

16
00:00:40,000 --> 00:00:45,000
Recursion--iteration--is really central to computer science.

17
00:00:45,000 --> 99:59:59,999
It's fundamental.
