1
00:00:00,380 --> 00:00:04,523
Once you know that a turing machine can
simulate a ram then you know it can

2
00:00:04,523 --> 00:00:06,053
simulate a standard CPU.

3
00:00:06,053 --> 00:00:10,196
Once you can simulate a CPU you can
simulate any interpreter or compiler and

4
00:00:10,196 --> 00:00:12,820
thus any programming language.

5
00:00:12,820 --> 00:00:16,724
So anything you can run on your desktop
can be simulated by a turing machine.

6
00:00:16,724 --> 00:00:19,310
The turing machine can
tackle any problem

7
00:00:19,310 --> 00:00:21,870
that the computer on
your desk can solve.

8
00:00:21,870 --> 00:00:27,480
What about multicore, cloud computing,
problematic, quantum and DNA computing?

9
00:00:27,480 --> 00:00:28,670
We won't do it here, but

10
00:00:28,670 --> 00:00:31,984
you can prove turing machines can
simulate all those models as well.

11
00:00:31,984 --> 00:00:36,250
The church turing thesis has
truly stood the test of time.

12
00:00:36,250 --> 00:00:39,690
Models of computation come and
go but none have been, or

13
00:00:39,690 --> 00:00:42,580
ever will be, any match for
the turing machine.

14
00:00:42,580 --> 00:00:45,210
Why should we care about
the church turing thesis?

15
00:00:45,210 --> 00:00:47,905
Because there are problems that
turing machines can't solve.

16
00:00:47,905 --> 00:00:51,104
We argued this with counter
arguments in the first lecture and

17
00:00:51,104 --> 00:00:54,490
we'll give specific examples
in future lectures.

18
00:00:54,490 --> 00:00:57,040
If these problems can't be
solved by turing machines,

19
00:00:57,040 --> 00:01:00,110
they can't be solved by any
other computing device.

20
00:01:00,110 --> 00:01:03,520
To help us describe specific
problems that one can not compute,

21
00:01:03,520 --> 00:01:08,430
in the next lecture we discuss
two of turines critical insights.

22
00:01:08,430 --> 00:01:12,470
That a computer program can be viewed
as data as part of the input to

23
00:01:12,470 --> 00:01:17,210
another program and that one can
have a universal turing machine.

24
00:01:17,210 --> 00:01:20,730
That one that can simulate
the code of any other machine.

25
00:01:20,730 --> 00:01:22,120
One machine to rule them all.
