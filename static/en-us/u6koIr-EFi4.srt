1
00:00:00,090 --> 00:00:03,440
Once the adapter is initialized,
let's bind it to the ListView.

2
00:00:03,440 --> 00:00:06,006
But you may notice that we don't have
a reference to the ListView

3
00:00:06,006 --> 00:00:07,272
in our fragment.

4
00:00:07,272 --> 00:00:09,530
It was only defined in the layout XML.

5
00:00:09,530 --> 00:00:12,140
The system takes and inflates
layout XML files,

6
00:00:12,140 --> 00:00:14,830
and turns them into a full view hierarchy

7
00:00:14,830 --> 00:00:18,720
with a root layout of the main activity
at the very top of the view tree.

8
00:00:18,720 --> 00:00:21,610
We can also assign IDs
to each view in the tree,

9
00:00:21,610 --> 00:00:26,210
but it's not required if you don't need
a reference to an individual view.

10
00:00:26,210 --> 00:00:30,630
For example, this ImageView doesn't have
an ID associated with it and that's okay.

11
00:00:31,110 --> 00:00:34,420
Within the Java code
of the associated activity or fragment,

12
00:00:34,420 --> 00:00:38,660
if we need a reference to the button,
we can simply call findViewById,

13
00:00:38,660 --> 00:00:42,530
which will traverse down the view
hierarchy until it finds a view

14
00:00:42,530 --> 00:00:45,990
with an ID button,
and then it will return that.

15
00:00:45,990 --> 00:00:50,430
Similarly, we can traverse down the view
hierarchy to find the linear layout

16
00:00:50,430 --> 00:00:53,620
with the ID container,
and then return that.

17
00:00:53,620 --> 00:00:56,050
We could do the same to find
a reference to this TextView

18
00:00:56,050 --> 00:00:58,160
by traversing down the view hierarchy.

19
00:00:58,160 --> 00:01:01,833
But you'll notice that we already have
a reference to the container

20
00:01:01,833 --> 00:01:04,566
which is the direct parent of this TextView.

21
00:01:04,566 --> 00:01:07,990
Hence, we can just call
container.findViewById

22
00:01:07,990 --> 00:01:12,291
to search this subtree to find
the TextView with this ID,

23
00:01:12,291 --> 00:01:13,742
and then return it.

24
00:01:13,742 --> 00:01:18,753
With this method, we have a smaller
sub-tree to search for a given view,

25
00:01:18,753 --> 00:01:21,966
as opposed to searching
the entire view hierarchy.

26
00:01:21,966 --> 00:01:24,530
In the Android Java doc
for the View class,

27
00:01:24,530 --> 00:01:26,516
which is linked below
if you want to follow along,

28
00:01:26,516 --> 00:01:30,902
it contains an example with a button
with Define in Layout XML.

29
00:01:30,902 --> 00:01:33,270
It was assigned an ID, my_button.

30
00:01:33,640 --> 00:01:38,763
Then, in the Activity, we can use
the findViewByID method with that ID,

31
00:01:38,763 --> 00:01:41,036
so that we can get
a reference to the button.

32
00:01:41,036 --> 00:01:43,250
Then we can change it dynamically,

33
00:01:43,250 --> 00:01:45,794
such as by adding a click listener to it.

34
00:01:46,774 --> 00:01:50,420
Now in the Placeholder Fragment class,
bind the adapter to the ListView.

35
00:01:50,420 --> 00:01:53,460
Luckily, we did assign an ID
to the ListView earlier,

36
00:01:53,460 --> 00:01:55,530
so we can find it easily now.

37
00:01:55,530 --> 00:01:58,090
Think about the smallest sub-tree
in the view hierarchy

38
00:01:58,090 --> 00:02:02,700
that you can call findViewByID on,
then set the adapter on it.

39
00:02:02,700 --> 00:02:06,140
If you want an example,
you can see one in the link below.

40
00:02:06,140 --> 00:02:08,110
Check the boxes when you're done.
