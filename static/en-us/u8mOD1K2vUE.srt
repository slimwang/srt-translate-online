1
00:00:00,430 --> 00:00:03,490
Once you've learned how to parse JSON
data, it's pretty straightforward to

2
00:00:03,490 --> 00:00:06,370
be able to parse the rest
of the fields that we need.

3
00:00:06,370 --> 00:00:08,109
Since this isn't a course on Java or

4
00:00:08,109 --> 00:00:12,470
JSON, we're going to provide you with
the parsing code in the gist below.

5
00:00:12,470 --> 00:00:14,280
And this is what the gist looks like.

6
00:00:14,280 --> 00:00:16,070
There are three helper methods.

7
00:00:16,070 --> 00:00:18,430
The first is for formatting dates.

8
00:00:18,430 --> 00:00:20,640
The second is for rounding temperatures.

9
00:00:20,640 --> 00:00:25,450
The third is returning a forecast JSON
string into an array of forecasts.

10
00:00:25,450 --> 00:00:29,960
This method also handles associating
a date with each forecast entry.

11
00:00:29,960 --> 00:00:33,930
We start with a current date, and we
increment one for each successive day.

12
00:00:33,930 --> 00:00:36,750
Notice that we also use Julian dates,
which is the number of

13
00:00:36,750 --> 00:00:39,570
days that have passed since
the beginning of the Julian period.

14
00:00:39,570 --> 00:00:41,813
More information is in
the instructor notes below, but

15
00:00:41,813 --> 00:00:44,400
it's how we'll consistently
deal with dates in our app.

16
00:00:44,400 --> 00:00:47,550
That way, when comparing dates,
we don't have to worry about taking into

17
00:00:47,550 --> 00:00:50,760
account time zones or
daylight savings time.

18
00:00:50,760 --> 00:00:54,040
Update the fetch weather tasks to
use these helper functions and

19
00:00:54,040 --> 00:00:57,890
the doInBackground method should
return a string array of forecasts.

20
00:00:57,890 --> 00:01:00,750
You can log the output to check
that the array is correct.

21
00:01:00,750 --> 00:01:03,150
The format of one day's
forecast should look like this.
