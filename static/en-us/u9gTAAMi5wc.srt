1
00:00:00,380 --> 00:00:05,670
So, let's look at our exceptions with ROB quiz solution. At the point,

2
00:00:05,670 --> 00:00:08,240
where this divide has an exception,

3
00:00:08,240 --> 00:00:13,070
this is what we have. When we go to the exception handler for this divide,

4
00:00:13,070 --> 00:00:18,530
what should be happening is that the instructions before it has finished and

5
00:00:18,530 --> 00:00:21,690
the instructions after it have not finished, as far as the programmer is

6
00:00:21,690 --> 00:00:25,840
concerned. So, what we need to really do, because programmer really sees only

7
00:00:25,840 --> 00:00:30,630
what has committed here is the fact that this is done and this is done needs to

8
00:00:30,630 --> 00:00:36,410
be undone. So basically, this instruction is flushed from the pipeline.

9
00:00:36,410 --> 00:00:40,670
It behaves as if it was not executed at all, this instruction and

10
00:00:40,670 --> 00:00:44,220
this instruction, as well. So, pretty much what we do is when we have

11
00:00:44,220 --> 00:00:47,700
an exception such as divide by 0, the correct state of the processor should be

12
00:00:47,700 --> 00:00:51,380
right before this instruction if we were doing these instructions one at a time.

13
00:00:51,380 --> 00:00:54,530
So, what we do is write all back the execution of all these instructions.

14
00:00:54,530 --> 00:00:58,410
How do we do that? Well, we have already committed this instruction before,

15
00:00:58,410 --> 00:01:01,380
it has to stay committed, we cannot uncommit instructions.

16
00:01:01,380 --> 00:01:05,530
This instruction has been executed and this one has been done. What we do, is,

17
00:01:05,530 --> 00:01:09,270
we wait for them to commit. So, what's going to happen is, this instruction will

18
00:01:09,270 --> 00:01:13,030
eventually commit once is done executing, and then this one was already done, so

19
00:01:13,030 --> 00:01:17,260
we can very quickly commit afterwards. Now we reach the point where

20
00:01:17,260 --> 00:01:21,240
the divide carries this exception condition into the commit with it so

21
00:01:21,240 --> 00:01:24,490
when we try to commit the divide we realize we cannot do that.

22
00:01:24,490 --> 00:01:28,610
And that's the point at which we stop committing, flush everything that follows

23
00:01:28,610 --> 00:01:32,100
the divide from the pipeline so these instructions now become unexecuted,

24
00:01:32,100 --> 00:01:35,350
meaning we haven't even fetched them as far as the program is concerned and

25
00:01:35,350 --> 00:01:38,160
this is the point at which we jump to the exception handler. So

26
00:01:38,160 --> 00:01:41,730
pretty much at the point where we call in the exception handler, what you have

27
00:01:41,730 --> 00:01:45,590
is some instructions have committed, some of them haven't been even fetched.

28
00:01:45,590 --> 00:01:48,650
They have been actually fetched but we have discarded them so they

29
00:01:48,650 --> 00:01:53,630
behave like they haven't been fetched. And that's the point where the control is

30
00:01:53,630 --> 00:01:57,410
transferred to the exception handler instead of this way, so that's very

31
00:01:57,410 --> 00:02:00,980
much like a branch misprediction except that it, it happens on an exception.
