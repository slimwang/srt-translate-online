1
00:00:00,370 --> 00:00:03,129
Great, now that you know what
the tasks data looks like,

2
00:00:03,129 --> 00:00:06,150
let's talk about how to access
that data through a provider.

3
00:00:06,150 --> 00:00:08,060
To build a custom content provider,

4
00:00:08,060 --> 00:00:11,140
the first step is to create a new
provider class that extends

5
00:00:11,140 --> 00:00:15,041
from the abstract content provider
class that's part of the Android SDK.

6
00:00:15,041 --> 00:00:17,850
And there's a link to this documentation
below, if you want to learn more.

7
00:00:17,850 --> 00:00:19,284
For the to-do list app,

8
00:00:19,283 --> 00:00:24,289
this is included in your starter code
as a class named Task Content Provider.

9
00:00:24,289 --> 00:00:26,660
Extending from Android's
content provider class,

10
00:00:26,660 --> 00:00:31,515
ensures that the Task Content Provider
will be recognized as a valid provider.

11
00:00:31,515 --> 00:00:35,740
And that it will override all the
necessary methods for manipulating data.

12
00:00:35,740 --> 00:00:39,020
Adding to this class,
you'll implement it's onCreate function,

13
00:00:39,020 --> 00:00:42,109
which is called to initialize
the Task Content Provider.

14
00:00:42,109 --> 00:00:46,640
The second step is to register this new
provider in the Android Manifest file.

15
00:00:46,640 --> 00:00:49,915
Content providers need to be
registered similar to activities.

16
00:00:49,915 --> 00:00:52,448
So that your app knows that
the provider exists and

17
00:00:52,448 --> 00:00:55,420
knows how to refer to it by name and
authority.

18
00:00:55,420 --> 00:00:59,810
You'll also need to define URIs that
identify the Task Content Provider and

19
00:00:59,810 --> 00:01:02,179
the different data types
that it can return.

20
00:01:02,179 --> 00:01:05,959
These are needed so that later on
a content resolver can find the provider

21
00:01:05,959 --> 00:01:10,379
and the specific data you want to
access just based on a given URI.

22
00:01:10,379 --> 00:01:11,479
Once you define these,

23
00:01:11,480 --> 00:01:15,520
you'll then update the task
Contract Class to include URIs and

24
00:01:15,519 --> 00:01:20,060
string constants that will help you
refer to the most commonly used URIs.

25
00:01:20,060 --> 00:01:24,390
The last step in working with
URIs is to build a URIMatcher.

26
00:01:24,390 --> 00:01:27,370
This is a class that helps
a content provider recognize and

27
00:01:27,370 --> 00:01:30,290
respond correctly to
different types of URIs.

28
00:01:30,290 --> 00:01:34,770
For example, it's often useful to use
this matcher to distinguish between URIs

29
00:01:34,769 --> 00:01:39,019
that point to a large dataset,
like multiple rows of task data.

30
00:01:39,019 --> 00:01:44,109
And URIs that point to a subset of that
data, like data for an individual task.

31
00:01:44,109 --> 00:01:46,150
And we'll learn more
about this later on.

32
00:01:46,150 --> 00:01:48,750
And finally,
in the Task Content Provider class,

33
00:01:48,750 --> 00:01:53,030
you'll me implementing the required
CRUD methods to access and change data.

34
00:01:53,030 --> 00:01:54,960
Methods like query and insert.

35
00:01:54,959 --> 00:01:57,119
Now let's tackle the first step and
start coding.

