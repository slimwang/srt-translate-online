1
00:00:00,000 --> 00:00:05,000
Well, our previous approach only works if we treat calls to "write" specially,

2
00:00:05,000 --> 00:00:13,000
and we're careful to notice every call to "write" and append to this "javascript output"

3
00:00:13,000 --> 00:00:15,000
variable in the global environment.

4
00:00:15,000 --> 00:00:16,000
So let's work it out together.

5
00:00:16,000 --> 00:00:18,000
I'll do the first bit, and you'll finish it off.

6
00:00:18,000 --> 00:00:22,000
We're going to go back to our JavaScript interpreter and finish up our handling

7
00:00:22,000 --> 00:00:25,000
of "write," a special function call.

8
00:00:25,000 --> 00:00:30,000
Well, function calls are expressions, so we're in evaluating expression.

9
00:00:30,000 --> 00:00:32,000
Here's the abstract syntax tree or the parse tree for the expression.

10
00:00:32,000 --> 00:00:34,000
Here's the current environment.

11
00:00:34,000 --> 00:00:36,000
We need to figure out the type of the expression.

12
00:00:36,000 --> 00:00:39,000
We've already seen how to do binops, numbers, that sort of thing.

13
00:00:39,000 --> 00:00:42,000
So the one we really care about this time is function calls.

14
00:00:42,000 --> 00:00:44,000
So this is what we had before.

15
00:00:44,000 --> 00:00:48,000
A function call has a name and some actual arguments.

16
00:00:48,000 --> 00:00:50,000
Looks a bit like this.

17
00:00:50,000 --> 00:00:54,000
If the function call is myfun(a, 3+4), the function name is myfun,

18
00:00:54,000 --> 00:00:56,000
and the arguments are a list of expressions.

19
00:00:56,000 --> 00:01:00,000
We're going to go look up the function name in the environment.

20
00:01:00,000 --> 00:01:03,000
Now "write" is one of those special functions that users get to call,

21
00:01:03,000 --> 00:01:06,000
but they never actually provide a definition for.

22
00:01:06,000 --> 00:01:08,000
So we're not going to find it in the environment.

23
00:01:08,000 --> 00:01:11,000
Our environment lookup returns none if the function is "write,"

24
00:01:11,000 --> 00:01:14,000
but it also returns none if the function is just unknown,

25
00:01:14,000 --> 00:01:16,000
so we'll check for "write" specially.

26
00:01:16,000 --> 00:01:20,000
If so, "write" should have a single argument, so we'll evaluate it.

27
00:01:20,000 --> 00:01:26,000
We'll get the current output that the user has written through previous calls to "write."

28
00:01:26,000 --> 00:01:30,000
I'm doing an environment lookup in the current environment instead of the global environment.

29
00:01:30,000 --> 00:01:31,000
Here's a trick though.

30
00:01:31,000 --> 00:01:33,000
Remember how environment lookups work.

31
00:01:33,000 --> 00:01:36,000
If I don't have it in my pockets, I check my hotel room. I check back home.

32
00:01:36,000 --> 00:01:39,000
I ask my parents. I look around on the web.

33
00:01:39,000 --> 00:01:43,000
I keep going back until eventually I hit the global environment.

34
00:01:43,000 --> 00:01:46,000
Because we've specially picked a variable name with a space in it,

35
00:01:46,000 --> 00:01:48,000
noone else can possibly make this variable.

36
00:01:48,000 --> 00:01:53,000
So even if I'm not in the global environment, I won't have it. My hotel room won't have it.

37
00:01:53,000 --> 00:01:54,000
My house won't have it.

38
00:01:54,000 --> 00:01:57,000
Eventually, I'll get back to the global environment, which we know has it

39
00:01:57,000 --> 00:02:02,000
because we were careful to put it in explicitly starting as the empty string last time.

40
00:02:02,000 --> 00:02:06,000
So the quiz for you is to fill in these 2 blanks.

41
00:02:06,000 --> 00:02:09,000
We figured out the output so far, and now we want to update the environment

42
00:02:09,000 --> 00:02:13,000
so that "javascript output" takes on a new value.

43
00:02:13,000 --> 00:02:16,000
What should go in here to make that work out?
