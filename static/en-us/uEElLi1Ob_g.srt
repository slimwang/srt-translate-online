1
00:00:00,000 --> 00:00:02,000
So now we've learned all about Linear GraphSLAM,

2
00:00:02,000 --> 00:00:04,000
and that's quite a bit--and it's really simple.

3
00:00:04,000 --> 00:00:06,000
Every time there's a constraint--

4
00:00:06,000 --> 00:00:09,000
Initial Position, Motion or Measurement--

5
00:00:09,000 --> 00:00:14,000
we take this constraint and add something to Omega, Xi.

6
00:00:14,000 --> 00:00:17,000
And what we add is the constraint itself,

7
00:00:17,000 --> 00:00:20,000
but it's up multiplied by a strength factor.

8
00:00:20,000 --> 00:00:22,000
There's nothing else but 1 over sigma--

9
00:00:22,000 --> 00:00:25,000
the uncertainty in Motion or in Measurements.

10
00:00:25,000 --> 00:00:27,000
And then when we're done with this adding--

11
00:00:27,000 --> 00:00:29,000
we simply calculate this guy

12
00:00:29,000 --> 00:00:31,000
and out comes our best possible PATH--

13
00:00:31,000 --> 00:00:35,000
and along with the MAP of all the landmarks.

14
00:00:35,000 --> 00:00:38,000
Isn't that something? Isn't that really cool?

15
00:00:38,000 --> 00:00:44,000
So let's dive in and have you program your own real robot example.

16
00:00:44,000 --> 00:00:48,000
This is a fairly complicated generalization of what we just saw.

17
00:00:48,000 --> 00:00:50,000
I'm giving you an environment where you can specify

18
00:00:50,000 --> 00:00:52,000
the number of landmarks that exist,

19
00:00:52,000 --> 00:00:55,000
the number of time steps you want the robot to run,

20
00:00:55,000 --> 00:00:58,000
the world_size, the measurement_range--that is

21
00:00:58,000 --> 00:01:01,000
the range at which a robot might be able to see a landmark--

22
00:01:01,000 --> 00:01:03,000
if it's further away than this--it just won't see it;

23
00:01:03,000 --> 00:01:06,000
a motion_noise, a measurement_noise,

24
00:01:06,000 --> 00:01:08,000
and a distance parameter.

25
00:01:08,000 --> 00:01:11,000
The distance specifies how fast a robot moves in each step.

26
00:01:11,000 --> 00:01:14,000
And then I'm giving you a routine which makes the data.

27
00:01:14,000 --> 00:01:19,000
It takes all these parameters and it outputs a data field

28
00:01:19,000 --> 00:01:24,000
that contains a sequence of motions and a sequence of measurements.

29
00:01:24,000 --> 00:01:28,000
The code comments on the exact format of what data looks like.

30
00:01:28,000 --> 00:01:30,000
Now I want you to program the function, SLAM,

31
00:01:30,000 --> 00:01:33,000
that inputs the data and various important parameters

32
00:01:33,000 --> 00:01:39,000
and it outputs my result--a sequence of estimated poses,

33
00:01:39,000 --> 00:01:43,000
the robot PATH, and estimated landmark positions.

34
00:01:43,000 --> 00:01:45,000
This is really challenging to program.

35
00:01:45,000 --> 00:01:47,000
It's based on the math I just gave you.

36
00:01:47,000 --> 00:01:50,000
The robot coordinates are now x and y coordinates.

37
00:01:50,000 --> 00:01:53,000
The measurements are differences in x and y--

38
00:01:53,000 --> 00:01:57,000
so you have to duplicate things for x and things for y.

39
00:01:57,000 --> 00:01:59,000
I, myself, put them all into one big matrix,

40
00:01:59,000 --> 00:02:02,000
but you could have them in 2 separate matrices, if you so wish.

41
00:02:02,000 --> 00:02:05,000
You have to apply everything we learned so far,

42
00:02:05,000 --> 00:02:07,000
including the weights of one with our measurerment_noise

43
00:02:07,000 --> 00:02:09,000
and one with our motion_noise.

44
00:02:09,000 --> 00:02:12,000
These happen to be equivalent, in this case--but they might be different.

45
00:02:12,000 --> 00:02:15,000
And then you have to run SLAM

46
00:02:15,000 --> 00:02:18,000
and return back to me a result data structure.

47
00:02:18,000 --> 00:02:21,000
I'm also supplying you with the print_result routine

48
00:02:21,000 --> 00:02:24,000
so you can go in and see how the result has to look like.

49
00:02:24,000 --> 00:02:27,000
There's an example routine--that doesn't work--

50
00:02:27,000 --> 00:02:29,000
that outputs all the correct formats,

51
00:02:29,000 --> 00:02:33,000
but it tries not to implement the estimate that I want you to estimate.

52
00:02:33,000 --> 00:02:35,000
You have to bring this to life

53
00:02:35,000 --> 00:02:38,000
and turn this into an amazing SLAM routine

54
00:02:38,000 --> 00:02:41,000
so that when you run it, you get the same results that I do

55
00:02:41,000 --> 00:02:43,000
for the examples here,

56
00:02:43,000 --> 00:02:45,000
where there's an estimated PATH

57
00:02:45,000 --> 00:02:47,000
and estimated landmark positions.

58
00:02:47,000 --> 00:02:49,000
There's one last thing I wanted to know--

59
00:02:49,000 --> 00:02:52,000
is I assume the initial robot position

60
00:02:52,000 --> 00:02:54,000
is going to be in the center of the world.

61
00:02:54,000 --> 00:02:57,000
So it's the real-world set of 100

62
00:02:57,000 --> 00:03:00,000
and it's going to be 50/50--or here it's printed as 49.999,

63
00:03:00,000 --> 00:03:02,000
but this is the same as 50.

64
00:03:02,000 --> 00:03:04,000
So you have to put in a constraint

65
00:03:04,000 --> 00:03:06,000
that sets the initial robot pose

66
00:03:06,000 --> 99:59:59,999
to the center of the world.
