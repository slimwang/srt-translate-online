1
00:00:00,000 --> 00:00:06,000
Welcome to problem set 4. In this problem set, I'm going to write a random tester or fuzzer.

2
00:00:06,000 --> 00:00:14,000
In our example, we're going to be fuzzing PDF files and our application is a couple of PDF readers.

3
00:00:14,000 --> 00:00:20,000
This example is taken from Charlie Miller's fuzzer "Babysitting an Army of Monkeys."

4
00:00:20,000 --> 00:00:22,000
I encourage you all to look at these sites.

5
00:00:22,000 --> 00:00:30,000
To start this fuzzer, we begin by choosing a random file and choosing a random PDF application.

6
00:00:30,000 --> 00:00:35,000
We then read in all the bytes from our file and store it in the buffer.

7
00:00:35,000 --> 00:00:39,000
Next, we run a random function to determine the number of writes

8
00:00:39,000 --> 00:00:42,000
that we are doing based on FuzzFactor.

9
00:00:42,000 --> 00:00:47,000
Read up on this FuzzFactor to be 250, and you can see as the

10
00:00:47,000 --> 00:00:50,000
FuzzFactor increases, the number of writes decreases.

11
00:00:50,000 --> 00:00:57,000
Based on the number of writes, we create a byte, a random byte, and choose from our buffer

12
00:00:57,000 --> 00:01:00,000
one of the bytes that we're going to overwrite.

13
00:01:00,000 --> 00:01:03,000
We then overwrite that byte with a random one

14
00:01:03,000 --> 00:01:07,000
and we continue to do that until we get to the number of writes.

15
00:01:07,000 --> 00:01:13,000
Finally, we write all our new bytes to a file, a new file, so we don't overwrite our old one,

16
00:01:13,000 --> 00:01:19,000
and we then uses a subprocess margin to open our application with our new file.

17
00:01:19,000 --> 00:01:23,000
Now, when you run the script, you might see your program go crazy,

18
00:01:23,000 --> 00:01:25,000
and if that happens, then you've done it correctly.

19
00:01:25,000 --> 00:01:31,000
Now, there are few things I want to point out. This type of code is the heart of the fuzzer

20
00:01:31,000 --> 00:01:35,000
This is all that you really need for this program to work.

21
00:01:35,000 --> 00:01:38,000
A couple of other things noticed that we don't do any logging.

22
00:01:38,000 --> 00:01:42,000
This is bad practice for all programmers.

23
00:01:42,000 --> 00:01:46,000
We should always do logging in your applications to make the bugging easier.

24
00:01:46,000 --> 00:01:49,000
What I want you to do is write a fuzzer

25
00:01:49,000 --> 00:01:53,000
based on the one that we gave you for real world applications.

26
00:01:53,000 --> 00:01:55,000
In our example, we fuzzed has a PDF files.

27
00:01:55,000 --> 00:02:01,000
After you bring your fuzzer, I want you to go to the forums and link to your fuzzer,

28
00:02:01,000 --> 00:02:05,000
show what you fuzzed, describe any bugs that you found,

29
00:02:05,000 --> 00:02:09,000
and explain how you would improve your fuzzer in the future.

30
00:02:09,000 --> 00:02:14,000
Post all these things to the forum, and when you're finish, check this box.

31
00:02:14,000 --> 00:02:17,000
Now, of course, you can check this box

32
00:02:17,000 --> 00:02:22,000
without actually having done the problem set, but then, what will be the point.

33
00:02:22,000 --> 99:59:59,999
Good luck on problem set 4.
