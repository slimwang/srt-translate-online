1
00:00:00,029 --> 00:00:04,046
So taking these 1 at a time--a million threads incrementing a million elements

2
00:00:04,046 --> 00:00:07,187
does give the correct answer because, in this case, there's a unique element for

3
00:00:07,187 --> 00:00:09,148
every thread, so there's no conflict.

4
00:00:09,148 --> 00:00:12,722
So even though we didn't make these atomic increments we're still safe.

5
00:00:12,729 --> 00:00:17,531
A million threads atomically incrementing a million elements, is, of course, also safe.

6
00:00:17,531 --> 00:00:19,369
So you'll also get the correct answer.

7
00:00:19,369 --> 00:00:22,858
A million threads incrementing a hundred elements is the same example we saw before.

8
00:00:22,858 --> 00:00:26,085
And as we saw, that will give the wrong answer, unless we use atomics.

9
00:00:26,085 --> 00:00:29,615
So the next one is not correct. The fourth one is correct.

10
00:00:29,615 --> 00:00:34,652
And finally, ten million threads atomically incrementing a hundred elements will still be the correct answer,

11
00:00:34,652 --> 00:00:36,820
So all but one of these give you the correct answer.

12
00:00:36,820 --> 00:00:40,347
Okay, so the more interesting question is how long do each of these options take?

13
00:00:40,347 --> 00:00:44,814
The fastest, perhaps counter-intuitively, is going to be option 3--

14
00:00:44,814 --> 00:00:47,367
a million threads writing into a hundred elements.

15
00:00:47,367 --> 00:00:50,323
And the next fastest would be option 1--

16
00:00:50,323 --> 00:00:52,456
a million threads writing into a million elements.

17
00:00:52,456 --> 00:00:59,635
On my laptop, these 2 operations take around 3.2 milliseconds, and 3.4 milliseconds, respectively.

18
00:00:59,635 --> 00:01:03,016
Of course, it's not a very useful option since it doesn't give the correct answer.

19
00:01:03,016 --> 00:01:05,275
But it's still interesting to look at what's going on.

20
00:01:05,282 --> 00:01:09,151
So the reason why this is slightly faster is that you have your million threads all

21
00:01:09,151 --> 00:01:11,821
trying to write to the same 100 elements.

22
00:01:11,821 --> 00:01:15,111
Well, those 100 elements occupy a very small fraction of memory,

23
00:01:15,111 --> 00:01:17,964
and they're all going to fit into a cash line or 2 on this system,

24
00:01:17,964 --> 00:01:20,926
whereas a million elements is large enough that it's not going to fit in cache.

25
00:01:20,926 --> 00:01:24,906
You're actually going to have to touch more of the DRAM, where global memory is stored.

26
00:01:24,906 --> 00:01:30,491
For the same reason, a million threads writing into 100 elements atomically

27
00:01:30,491 --> 00:01:34,293
is going to be slightly faster than a million threads writing into a million elements.

28
00:01:34,293 --> 00:01:40,300
So the next fastest is option 4. The next fastest after that is option 2.

29
00:01:40,300 --> 00:01:45,560
And in my system, again, these took 3.6 and 3.8 milliseconds,

30
00:01:45,560 --> 00:01:49,028
which means the slowest of all options is the one where

31
00:01:49,028 --> 00:01:51,366
10 million threads write into a hundred elements.

32
00:01:51,366 --> 00:01:56,255
This is actually 36 milliseconds, so it takes approximately 10 times as long to complete.

33
00:01:56,255 --> 00:01:58,973
Not surprisingly, there's about 10 times as much going on.

34
00:01:58,973 --> 00:02:00,980
So you might play around with this code for a little bit.

35
00:02:00,980 --> 00:02:06,114
For example, see what happens to the time as you go to even more threads writing into even fewer elements.

36
00:02:06,114 --> 00:02:10,531
The big lesson here is that atomic memory operations come with a cost.
