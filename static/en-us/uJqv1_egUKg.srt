1
00:00:00,280 --> 00:00:02,160
So games are complicated.

2
00:00:02,160 --> 00:00:04,340
They often end up being way
more code than you expect.

3
00:00:05,350 --> 00:00:08,450
So to get an idea why,
let's try breaking down a classic game

4
00:00:08,450 --> 00:00:11,280
into it's components,
and it's behaviors.

5
00:00:11,280 --> 00:00:14,500
If you haven't played Tetris,
go play it like right now.

6
00:00:14,500 --> 00:00:16,610
It's an essential part
of gaming history.

7
00:00:16,610 --> 00:00:17,910
If you just google for Tetris,

8
00:00:17,910 --> 00:00:20,159
you'll find a dozen versions
you can play online for free.

9
00:00:21,630 --> 00:00:24,830
Let's do an object oriented
analysis of Tetris.

10
00:00:24,830 --> 00:00:27,990
What we're going to do is write down
a paragraph describing exactly how

11
00:00:27,990 --> 00:00:29,290
Tetris works.

12
00:00:29,290 --> 00:00:32,170
Then we're going to underline all
of the nouns to get an idea of what

13
00:00:32,170 --> 00:00:34,710
classes we might need
to implement Tetris.

14
00:00:34,710 --> 00:00:37,600
Then we'll underline all the verbs
to get an idea what methods those

15
00:00:37,600 --> 00:00:39,320
classes might need.

16
00:00:39,320 --> 00:00:41,430
So, what is Tetris?

17
00:00:41,430 --> 00:00:43,680
Tetris is a game where
colored Tetriminos,

18
00:00:43,680 --> 00:00:46,810
that's the technical term,
fall down a field of play

19
00:00:46,810 --> 00:00:49,190
until they collide with
the previously placed Tetrimino.

20
00:00:50,390 --> 00:00:54,970
As a Tetrimino is falling, the user can
rotate it and can drop it into place.

21
00:00:54,970 --> 00:00:56,890
Once a Tetrimino comes to rest,

22
00:00:56,890 --> 00:00:59,840
if a line of blocks in
the field of play is complete.

23
00:00:59,840 --> 00:01:03,820
It is removed, and all blocks
placed above it are moved down.

24
00:01:03,820 --> 00:01:05,980
Removing a line earns points.

25
00:01:05,980 --> 00:01:07,620
Points are displayed on a scoreboard,

26
00:01:07,620 --> 00:01:09,350
along with a preview
of the next tetromino.

27
00:01:09,350 --> 00:01:14,150
Now that's a super cursory
description But even here we have

28
00:01:14,150 --> 00:01:17,910
a bunch of classes we would need
in order to implement the game.

29
00:01:17,910 --> 00:01:20,860
We would need a game class to
set everything in motion and

30
00:01:20,860 --> 00:01:23,310
coordinate the rest of the actors.

31
00:01:23,310 --> 00:01:27,420
We would need a class for the falling
tetromino to represent its position and

32
00:01:27,420 --> 00:01:29,670
its rotation and also what shape it is.

33
00:01:29,670 --> 00:01:34,670
We would need a field of play to
represent where all the blocks are and

34
00:01:34,670 --> 00:01:37,130
to put the tetromino somewhere.

35
00:01:37,130 --> 00:01:40,080
Speaking of attributes of the tetromino,
you probably also want

36
00:01:40,080 --> 00:01:44,210
a class to represent colors, scanning
through some more for some more nouns.

37
00:01:44,210 --> 00:01:46,290
We find blocks, all right.

38
00:01:46,290 --> 00:01:48,060
So we might want a class for blocks or

39
00:01:48,060 --> 00:01:51,380
perhaps blocks is just
part of the field of play.

40
00:01:51,380 --> 00:01:53,870
I don't know it's hard to
say how to design it best.

41
00:01:53,870 --> 00:01:55,370
Then we see we have points.

42
00:01:55,370 --> 00:01:57,840
We need a class to represent
how many points we have.

43
00:01:57,840 --> 00:02:00,370
We'd also need a scoreboard
to display those points and

44
00:02:00,370 --> 00:02:02,110
we need this whole preview pane thing.

45
00:02:03,280 --> 00:02:04,460
Now let's scan through for

46
00:02:04,460 --> 00:02:08,180
some verbs to find what methods
these various classes would need.

47
00:02:08,180 --> 00:02:11,090
So the tetrominos need
to know how to fall.

48
00:02:11,090 --> 00:02:16,000
The tetrominos also need to know
how to rotate and how to drop.

49
00:02:16,000 --> 00:02:19,300
Some class needs to know when
a tetromino collides with blocks that

50
00:02:19,300 --> 00:02:22,520
are already in the field of play, maybe
the tetromino's responsible for that,

51
00:02:22,520 --> 00:02:25,090
maybe the field of play
is responsible for that.

52
00:02:25,090 --> 00:02:27,940
Then there's this concept
of coming to rest,

53
00:02:27,940 --> 00:02:32,080
where a falling tetromino just turns
into blocks in the field of play.

54
00:02:32,080 --> 00:02:33,230
Scanning through some more,

55
00:02:33,230 --> 00:02:36,330
we need a way to remove lines of
blocks from the field of play.

56
00:02:36,330 --> 00:02:40,320
We need a way to move down
blocks after a line is removed.

57
00:02:40,320 --> 00:02:44,360
Then there's the fact that all of this
needs to know how to draw itself, and

58
00:02:44,360 --> 00:02:46,590
that's a big task.

59
00:02:46,590 --> 00:02:49,510
So again, this is just a short
description of Tetris, and

60
00:02:49,510 --> 00:02:52,170
an incredibly simple analysis of it.

61
00:02:52,170 --> 00:02:53,760
We could keep going here.

62
00:02:53,760 --> 00:02:55,720
Point is, games are complicated.

63
00:02:55,720 --> 00:02:59,010
And decomposing them into their
component parts is essential to making

64
00:02:59,010 --> 00:03:00,790
any headway in actually
implementing them.
