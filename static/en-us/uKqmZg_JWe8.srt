1
00:00:00,000 --> 00:00:03,000
The answer is here we're doing a nested loop,

2
00:00:03,000 --> 00:00:06,000
and the way we do a nested loop is the way we did the first loop--

3
00:00:06,000 --> 00:00:10,000
by calling extend prefix. What is the word so far that we've built up?

4
00:00:10,000 --> 00:00:13,000
It's the w we had before, and now we're looping through the letters,

5
00:00:13,000 --> 00:00:17,000
so we want to add the letter L to the end of that.

6
00:00:17,000 --> 00:00:22,000
Now what are the remaining letters we have in order to add into that word?

7
00:00:22,000 --> 00:00:25,000
That's the letters we had before with L removed.

8
00:00:25,000 --> 00:00:27,000
That's all there is to it.

9
00:00:27,000 --> 00:00:31,000
Now if we test words again, the speed is almost the same--0.003 something,

10
00:00:31,000 --> 00:00:35,000
but the function is more concise, more readable, and more general

11
00:00:35,000 --> 00:00:37,000
in that it will take any number of letters.

12
00:00:37,000 --> 00:00:39,000
Now, there are a lot of variations on this.

13
00:00:39,000 --> 00:00:44,000
If you type "import this" into a Python interpreter you get out a little set of aphorisms,

14
00:00:44,000 --> 00:00:48,000
almost like a poem, called "The Zen of Python" by Tim Peters.

15
00:00:48,000 --> 00:00:52,000
One of them says "Flat is better than nest."

16
00:00:52,000 --> 00:00:54,000
We can take out this nested function.

17
00:00:54,000 --> 00:00:57,000
Instead of having it in here, we can make it flat like that.

18
00:00:57,000 --> 00:01:01,000
I've also made a small change here in that removed works

19
00:01:01,000 --> 00:01:04,000
when you're removing any number of letters.

20
00:01:04,000 --> 00:01:11,000
Here if I only want to remove one letter, I can just call the built-in method letters.replace directly.

21
00:01:11,000 --> 00:01:14,000
When we call test_words() on this just to make sure we haven't broken anything,

22
00:01:14,000 --> 00:01:17,000
it verifies okay, and the speed is about the same.

23
00:01:17,000 --> 00:01:21,000
You can keep it like this. This is a good approach. I'm pretty happy with this one.

24
00:01:21,000 --> 00:01:26,000
But notice what we're doing here--find_words() is sort of a wrapper to extend_prefix(),

25
00:01:26,000 --> 00:01:29,000
which takes letters and adds in two more extra arguments--

26
00:01:29,000 --> 00:01:35,000
the prefix that we found so far and the results that we want to accumulate the results into.

27
00:01:35,000 --> 00:01:39,000
Instead of having one function call a second, we could do this all in one function

28
00:01:39,000 --> 00:01:42,000
if we made these two extra things be optional arguments.

29
00:01:42,000 --> 00:01:45,000
We could do it like that--where we just have one function find_words(),

30
00:01:45,000 --> 00:01:50,000
which takes letters, and then the optional prefix of our end results to accumulate into.

31
00:01:50,000 --> 00:01:53,000
Now in terms of pacing, let's stop here.

32
00:01:53,000 --> 00:01:57,000
Let's congratulate ourselves and say we've done our job.

33
00:01:57,000 --> 00:02:00,000
We've come up with find_words(), and we said for any set of letters

34
00:02:00,000 --> 00:02:05,000
I can find all the words in the dictionary that correspond to that hand of letters.

35
00:02:05,000 --> 00:02:09,000
Furthermore, I can do that at a speed of 2000 hands per second,

36
00:02:09,000 --> 00:02:12,000
which seems pretty good. We've achieved our first milestone.

37
00:02:12,000 --> 00:02:16,000
Now we should think--first I guess we should relax, congratulate ourselves,

38
00:02:16,000 --> 00:02:18,000
have a drink or whatever it is you need to do,

39
00:02:18,000 --> 99:59:59,999
and then when you're ready to come back then we can start the next leg of the journey.
