1
00:00:00,320 --> 00:00:04,030
We said that there are two types
of snooping coherence approaches.

2
00:00:04,030 --> 00:00:07,700
One was write update,
the other was write invalidate.

3
00:00:07,700 --> 00:00:13,470
So going back to our optimized write
update setup where we had the valid and

4
00:00:13,470 --> 00:00:17,280
the tag bits, also the dirty bit for
write back cashes and

5
00:00:17,280 --> 00:00:20,660
a shared bit that tells us
whether we are alone in this.

6
00:00:20,660 --> 00:00:24,800
A write invalidate protocol will
broadcast writes on the Bus so

7
00:00:24,800 --> 00:00:26,940
that they can be seen by everybody.

8
00:00:26,940 --> 00:00:31,150
But instead of updating their copies,
they will invalidate them.

9
00:00:31,150 --> 00:00:33,520
So let's see how this works.

10
00:00:33,520 --> 00:00:34,930
Let's say this core reads A.

11
00:00:36,680 --> 00:00:39,800
We send this, get the value from memory.

12
00:00:39,800 --> 00:00:43,250
Now we have it as valid, not dirty.

13
00:00:43,250 --> 00:00:48,070
The tag is A, the value is,
let's say 0, and it's not shared.

14
00:00:48,070 --> 00:00:51,250
Let's say now we have the write to A,
and write 1 to it.

15
00:00:51,250 --> 00:00:55,030
We have a cache miss,
we broadcast the write.

16
00:00:55,030 --> 00:00:59,180
We now don't need to broadcast the value
with it because the other caches don't

17
00:00:59,180 --> 00:01:00,350
need this value.

18
00:01:00,350 --> 00:01:03,735
What's going to happen is
as we send this to the Bus,

19
00:01:03,735 --> 00:01:07,540
it's going to be snooped
by this cache and

20
00:01:07,540 --> 00:01:13,140
it sees that somebody's trying to write
to the block that they have in my cache.

21
00:01:13,140 --> 00:01:17,122
In our write update protocol we will
now need the value to put it here.

22
00:01:17,122 --> 00:01:21,830
In a write invalidate protocol all
we do is change the valid bit to 0.

23
00:01:21,830 --> 00:01:26,090
So now we will miss in
the cache next time we read,

24
00:01:26,090 --> 00:01:29,050
this particular cache
now gets the valid.

25
00:01:29,050 --> 00:01:32,540
It's not shared,
every time we do a write with broadcast

26
00:01:32,540 --> 00:01:36,340
we know it's not shared because all
the other copies have been destroyed so

27
00:01:36,340 --> 00:01:40,870
our write makes., The block non
shared in the writing processor.

28
00:01:40,870 --> 00:01:44,300
It is dirty and
now it has a value of one.

29
00:01:44,300 --> 00:01:49,270
So now a read of A here, in a write
update protocol would be a hit and

30
00:01:49,270 --> 00:01:51,170
just read here, but

31
00:01:51,170 --> 00:01:56,430
in a write invalidate protocol,
the read will still get the new value.

32
00:01:56,430 --> 00:01:59,840
It's not going to be incoherent, because
it doesn't get the value of zero.

33
00:01:59,840 --> 00:02:03,970
It will not be a miss,
and be sent to the Bus.

34
00:02:03,970 --> 00:02:08,820
Now the memory has bot been updated yet,
but the processor who has the dirty data

35
00:02:08,820 --> 00:02:12,540
and matches the address of the blog
will see that there is a read request on

36
00:02:12,540 --> 00:02:17,150
the Bus and respond with the data,
so now the blog becomes valid.

37
00:02:17,150 --> 00:02:20,590
Somebody gave us the data, so
definitely now it's shared.

38
00:02:20,590 --> 00:02:23,690
We get the data, and
the cache where we wrote

39
00:02:23,690 --> 00:02:26,260
now also know's it's shared
because we gave it to somebody.

40
00:02:26,260 --> 00:02:29,180
So, clearly we are not the only
one who has it anymore.

41
00:02:29,180 --> 00:02:32,180
So now note that just like
in a write update protocol,

42
00:02:32,180 --> 00:02:35,450
if we have a lot of reads now
they can have cache hits.

43
00:02:35,450 --> 00:02:39,600
Another write will invalidate this so
there will be a cache miss also.

44
00:02:39,600 --> 00:02:42,890
So, the disadvantage of writing
invalidate protocols is that there is

45
00:02:42,890 --> 00:02:46,620
a miss on all the readers
when somebody writes.

46
00:02:46,620 --> 00:02:51,670
However, there is an advantage to it
as well in that if you need to update

47
00:02:51,670 --> 00:02:56,710
the same block twice,
let's say write two to A.

48
00:02:56,710 --> 00:03:00,480
We invalidate this copy by broadcasting.

49
00:03:00,480 --> 00:03:02,820
Now the block is no longer shared.

50
00:03:02,820 --> 00:03:04,050
We put two there.

51
00:03:04,050 --> 00:03:06,410
So we have the broadcast for
this first write.

52
00:03:06,410 --> 00:03:11,010
If we now do some more reads and
writes, they can all be done locally.

53
00:03:11,010 --> 00:03:12,160
We don't have to broadcast them.

54
00:03:12,160 --> 00:03:16,650
So basically by invalidating this copy,
we made ourselves be the only one

55
00:03:16,650 --> 00:03:19,920
who has the block and now we don't
need to broadcast all the writes.

56
00:03:21,000 --> 00:03:24,610
So, for anything where one
core works on it for a while,

57
00:03:24,610 --> 00:03:29,320
then another one works on it for
a while, if the work involves writing,

58
00:03:29,320 --> 00:03:31,640
only the first write really
has to be broadcast.

59
00:03:31,640 --> 00:03:34,790
After that, it's a local access for
both reads and writes.

60
00:03:34,790 --> 00:03:37,080
In contrast with write update,

61
00:03:37,080 --> 00:03:40,630
we would have to keep updating the other
cache until it replaces the block.

62
00:03:40,630 --> 00:03:42,650
Just like with write update.

63
00:03:42,650 --> 00:03:47,440
Writing validate can benefit from the
type of optimization when we are writing

64
00:03:47,440 --> 00:03:50,280
to different blocks and
accessing it later.

65
00:03:50,280 --> 00:03:56,400
So in that case B is fetched here
is not shared becomes dirty and

66
00:03:56,400 --> 00:04:01,910
C is fetched here is not shared
becomes dirty and gets a value of 1.

67
00:04:01,910 --> 00:04:04,520
And now we can have cache
hits on both reads and

68
00:04:04,520 --> 00:04:07,430
writes without going to the Bus for
B here.

69
00:04:07,430 --> 00:04:11,000
And we can access C here
with no going to the Bus.

70
00:04:11,000 --> 00:04:16,890
So for blocks that are only accessed on
one core we have the same behavior for

71
00:04:16,890 --> 00:04:19,720
both write update and write invalidate.

72
00:04:19,720 --> 00:04:23,200
But for blocks that are shared
we get different behavior.

73
00:04:23,200 --> 00:04:26,940
Write update tends to
result in more hits but

74
00:04:26,940 --> 00:04:30,070
does more broadcasts,
if we repeatedly update.

75
00:04:30,070 --> 00:04:35,910
Write invalidate generates a miss on
all the readers after a write occurred.

76
00:04:35,910 --> 00:04:39,740
But it allows us to locally
write after the first write.

77
00:04:39,740 --> 00:04:42,320
Note that with write update,
we ensured for

78
00:04:42,320 --> 00:04:46,740
A that the second property
of coherence is maintained.

79
00:04:46,740 --> 00:04:48,310
By updating all the copies.

80
00:04:48,310 --> 00:04:52,180
So when a write occurs,
all copies are up to date, and

81
00:04:52,180 --> 00:04:54,630
thus they will return
the new value of the write.

82
00:04:54,630 --> 00:04:55,980
With write invalidate,

83
00:04:55,980 --> 00:05:01,350
we ensure the same property by the write
invalidating all the other copies so

84
00:05:01,350 --> 00:05:04,620
that now they have no choice but
to get the new version of the data.

85
00:05:04,620 --> 00:05:09,270
So either way, reads will get
the new version of the data but

86
00:05:09,270 --> 00:05:11,320
that is achieved in different ways.

87
00:05:11,320 --> 00:05:14,230
The third property of coherence is

88
00:05:14,230 --> 00:05:18,490
still ensured by snooping in a write
invalidate protocol with snooping.

89
00:05:18,490 --> 00:05:21,350
So basically snooping on
the Bus still ensures that

90
00:05:21,350 --> 00:05:24,530
any writes that need to go to
the Bus because there is sharing

91
00:05:24,530 --> 00:05:27,090
will be ordered by the order
by which they go to the Bus.

92
00:05:27,090 --> 00:05:32,080
So for example,
a write here will invalidate everything.

93
00:05:32,080 --> 00:05:36,560
Now a write here has to put a request
on the Bus because it's a miss.

94
00:05:36,560 --> 00:05:41,060
And also train the copy from here and
now everybody knows what the order was.

95
00:05:41,060 --> 00:05:45,860
In fact, at any given time, only the
last version really survives in caches.

96
00:05:45,860 --> 00:05:48,590
Because a write invalidates
all the other copies.

97
00:05:48,590 --> 00:05:50,760
So it's pretty clear
whose version was last,

98
00:05:50,760 --> 00:05:55,370
because all the readers need to get
the copy that was written last anyway.
