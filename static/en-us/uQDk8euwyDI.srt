1
00:00:00,130 --> 00:00:03,196
So, this seems like a really brain dead way of doing things a bit. Maybe that's

2
00:00:03,196 --> 00:00:06,436
good enough. We need to look at how we are actually using this procedure. If

3
00:00:06,436 --> 00:00:09,404
we're going to use it for a human to tell how many days old they are, in an

4
00:00:09,404 --> 00:00:12,796
interactive way, the fact that we have to wait 300th of a second for the answer

5
00:00:12,796 --> 00:00:16,418
doesn't matter, that's plenty fast enough. Getting that down to less than a

6
00:00:16,418 --> 00:00:19,930
100th of a second is not worth extra effort. If we are using it in a service,

7
00:00:19,930 --> 00:00:23,290
that's doing this computation lots and lots of times for lots and lots of

8
00:00:23,290 --> 00:00:27,042
different dates, well then, maybe it's not fast enough and it's worth putting time

9
00:00:27,042 --> 00:00:30,851
and effort to doing something better. But we shouldn't put that time and effort

10
00:00:30,851 --> 00:00:34,660
until we know that we need it to be faster. This point is important enough that

11
00:00:34,660 --> 00:00:38,108
I want to put it in our guide to solving our problems. So, we have our first

12
00:00:38,108 --> 00:00:41,618
steps, don't panic, make sure we understand the inputs and the outputs, works

13
00:00:41,618 --> 00:00:44,966
through some examples by hand to think about how we would solve the problem

14
00:00:44,966 --> 00:00:48,898
systematically. And then, try to develop a simple mechanical solution. And the

15
00:00:48,898 --> 00:00:52,378
key here is simplicity, the simpler it is, the more likely we're going to be

16
00:00:52,378 --> 00:00:56,076
able to program it correctly. Eventually, we might need to worry about making it

17
00:00:56,076 --> 00:00:58,593
faster, but let's not worry about that until we have to.
