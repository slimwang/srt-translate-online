1
00:00:00,410 --> 00:00:03,560
This project is already split in some
virtual folders that will get us

2
00:00:03,560 --> 00:00:06,330
thinking about the Model view and
Controller.

3
00:00:06,330 --> 00:00:10,020
The AppDelegate and the GCDBlackbox have
been place outside of this folders and

4
00:00:10,020 --> 00:00:11,110
we can ignore them for now.

5
00:00:12,320 --> 00:00:16,140
In the Model folder, we have this
clients folder and then under Clients,

6
00:00:16,140 --> 00:00:18,140
we have TMDB for the movie database.

7
00:00:19,140 --> 00:00:22,410
This folder structure represents
the idea that we could have multiple

8
00:00:22,410 --> 00:00:27,190
clients or managers that handle all the
code related to an API, but since we're

9
00:00:27,190 --> 00:00:31,550
only working with the movie database,
we just have the single TMDB folder, but

10
00:00:31,550 --> 00:00:36,390
you could imagine others like one for
Flickr or Facebook or so forth.

11
00:00:36,390 --> 00:00:41,162
Now in the TMDB folder, we have SWF
files that pertain to the main model of

12
00:00:41,162 --> 00:00:46,014
our project, the TMDB movie as well
as the API's configs, constants and

13
00:00:46,014 --> 00:00:50,964
a TMBD client that will handle all
the communications with the API itself.

14
00:00:50,964 --> 00:00:52,804
We'll talk about this more later.

15
00:00:52,804 --> 00:00:57,097
You'll also notice there's this
one controller-like file called

16
00:00:57,097 --> 00:00:58,804
TMBDOffViewController.

17
00:00:58,804 --> 00:01:02,879
We've designated this file as part of
the model instead of the controller,

18
00:01:02,879 --> 00:01:06,702
because it's used specifically for
the movie databases off-flow and

19
00:01:06,702 --> 00:01:07,544
nowhere else.

20
00:01:07,544 --> 00:01:12,348
But that was just our design decision,
it doesn't have to be this way.

21
00:01:12,348 --> 00:01:14,642
If we look inside the TMDBClient file,

22
00:01:14,642 --> 00:01:17,848
we see that the client is
only partially implemented.

23
00:01:17,848 --> 00:01:21,768
These two methods here
are still commented out.

24
00:01:21,768 --> 00:01:25,738
Here at the top, we've moved
the authentication state into this class

25
00:01:25,738 --> 00:01:29,788
instead of it being in the app delegate
like it was in my favorite movies.

26
00:01:29,788 --> 00:01:33,008
And if we scroll to the bottom,
we have some helper methods.

27
00:01:33,008 --> 00:01:34,162
And at the very bottom,

28
00:01:34,162 --> 00:01:37,408
we have a method that allows us to
use this client like a singleton.

29
00:01:37,408 --> 00:01:41,334
So, in a very similar way as to
how we use the AppDelegate in

30
00:01:41,334 --> 00:01:42,788
My Favorite Movies.

31
00:01:42,788 --> 00:01:46,596
Now these two empty methods at
the top called taskForGETMethod and

32
00:01:46,596 --> 00:01:48,280
taskForPostMethod.

33
00:01:48,280 --> 00:01:52,570
The purpose of these methods is to
reduce the common code in our request

34
00:01:52,570 --> 00:01:55,560
and you've probably noticed that
there's a lot of common code between

35
00:01:55,560 --> 00:01:58,150
each network request
that we've been making.

36
00:01:58,150 --> 00:02:01,332
We also have this
TMDBConvenience.swift file,

37
00:02:01,332 --> 00:02:03,914
which you'll be adding code to as well.

38
00:02:03,914 --> 00:02:06,099
Now let's look at the View,

39
00:02:06,099 --> 00:02:10,574
it contains a single file
called Borderdbutton.swift.

40
00:02:10,574 --> 00:02:13,430
Now some of you may be thinking,
what gives?

41
00:02:13,430 --> 00:02:16,050
Shouldn't this folder
contain our storyboards and

42
00:02:16,050 --> 00:02:20,240
media files since they are what
the user sees, they are the View.

43
00:02:20,240 --> 00:02:23,789
Well, you could do it that way and
it's really up to you, but

44
00:02:23,789 --> 00:02:27,480
we've decided to keep our NBC
folder split and organization or

45
00:02:27,480 --> 00:02:32,164
we're just focusing on the SWF files and
not the other associated media files.

46
00:02:32,164 --> 00:02:35,820
Our reasoning for this is because
most of the actual view classes

47
00:02:35,820 --> 00:02:40,168
have already been built by Apple and
are packaged together inside of UIKit.

48
00:02:40,168 --> 00:02:44,310
And in that way, we've decided that
this View folder over here should only

49
00:02:44,310 --> 00:02:47,608
contain custom code of ours
that is purely view-related.

50
00:02:47,608 --> 00:02:52,184
So in this case, the only custom UI code
that we have is this BorderedButton.

51
00:02:52,184 --> 00:02:54,464
Finally, let's talk
about the controllers.

52
00:02:54,464 --> 00:02:57,961
This folder contains classes that
touch a little bit of the view and

53
00:02:57,961 --> 00:02:59,344
a little bit of our model.

54
00:02:59,344 --> 00:03:01,344
I'll start with the loginViewController.

55
00:03:01,344 --> 00:03:04,436
This class is a prime candidate for
why our previous app,

56
00:03:04,436 --> 00:03:07,700
My Favorite Movies was so
poorly designed.

57
00:03:07,700 --> 00:03:11,832
In this controller, we have four methods
for the four different steps that

58
00:03:11,832 --> 00:03:15,114
are require for the movie
databases authorization flow and

59
00:03:15,114 --> 00:03:18,457
you'll note that the log in with
token uses the new step to A,

60
00:03:18,457 --> 00:03:20,974
which we're going to
cover more detail later.

61
00:03:20,974 --> 00:03:25,514
But we have the getRequestToken,
then loginWithToken, which is step two.

62
00:03:25,514 --> 00:03:29,941
GetSessionID and then the user ID isn't
really part of the authorization flow,

63
00:03:29,941 --> 00:03:32,607
but we get the user ID ahead of time,
so that we can

64
00:03:32,607 --> 00:03:36,474
use it with requests like adding and
removing movies from favorites.

65
00:03:36,474 --> 00:03:40,234
Now each of these methods,
let me blow one of them out right here.

66
00:03:40,234 --> 00:03:43,018
Each of these methods has
a lot of duplicate code and

67
00:03:43,018 --> 00:03:46,074
they make this controller
a really big and heavy class.

68
00:03:46,074 --> 00:03:48,314
I think, let's see,
we're at 340 lines right now.

69
00:03:48,314 --> 00:03:51,434
So, it's starting to get pretty large.

70
00:03:51,434 --> 00:03:55,481
But what's worse is that if want to add
more complexity, this controller is

71
00:03:55,481 --> 00:03:59,354
just going to keep growing and growing
and become really hard to deal with.

72
00:03:59,354 --> 00:04:02,849
And when you have big files like
this and lots of duplicate code,

73
00:04:02,849 --> 00:04:04,674
then you know you have problems.

74
00:04:04,674 --> 00:04:09,183
What we should be thinking about is
how we make our code light, clean and

75
00:04:09,183 --> 00:04:12,350
reuseable not overly complex and
hard to manage?

76
00:04:13,350 --> 00:04:16,310
For our apps, a great way to fix
this problem is to always keep our

77
00:04:16,310 --> 00:04:19,700
view controller small by
migrating a logic like this,

78
00:04:19,700 --> 00:04:23,430
this networking code
away into the model.

79
00:04:23,430 --> 00:04:24,480
So for this application,

80
00:04:24,480 --> 00:04:27,530
we're going to take the code that's
in this login view controller and

81
00:04:27,530 --> 00:04:32,730
move it into the model or into the movie
database client, this TMDB client.
