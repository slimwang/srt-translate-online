1
00:00:00,090 --> 00:00:02,804
So, let's discuss what types of benchmarks do we have

2
00:00:02,804 --> 00:00:06,520
out there. We can have real applications. They are the

3
00:00:06,520 --> 00:00:09,990
most representative of real application but they are also the

4
00:00:09,990 --> 00:00:12,857
most difficult to set up on a new machine. So, for

5
00:00:12,857 --> 00:00:15,541
example, if we are building a new computer system we

6
00:00:15,541 --> 00:00:18,225
may not be able to run a full fledged operating system

7
00:00:18,225 --> 00:00:21,930
there. And have all the, you know, graphics cards and

8
00:00:21,930 --> 00:00:25,450
hard drives etc., etc., connected, so it may not be possible

9
00:00:25,450 --> 00:00:28,202
to run, for example, a web browser, or a database

10
00:00:28,202 --> 00:00:32,780
on this machine yet. Next, we can have application kernels,

11
00:00:32,780 --> 00:00:36,164
we find the most time consuming part of an application,

12
00:00:36,164 --> 00:00:39,044
usually a loop of some sort, and we isolate just

13
00:00:39,044 --> 00:00:41,564
that loop, and say that this is what are we

14
00:00:41,564 --> 00:00:45,780
going to use for testing performance of machines. That way, we

15
00:00:45,780 --> 00:00:48,310
don't have to run a full blown application. All we

16
00:00:48,310 --> 00:00:51,160
have to do is find a way to run just

17
00:00:51,160 --> 00:00:53,460
the kernels on the new machine that

18
00:00:53,460 --> 00:00:58,110
we're testing. But sometimes running a reasonable sized

19
00:00:58,110 --> 00:01:01,652
kernel is still too difficult. For example, in

20
00:01:01,652 --> 00:01:05,055
the early stages of prototyping a machine, when

21
00:01:05,055 --> 00:01:07,545
we may not even have a compiler, for

22
00:01:07,545 --> 00:01:11,050
example. So, the next class of benchmarks are

23
00:01:11,050 --> 00:01:13,650
the so called synthetic benchmarks. They are usually

24
00:01:13,650 --> 00:01:16,290
designed to behave similarly to some type of

25
00:01:16,290 --> 00:01:19,180
a kernel. But to be much simpler to compile.

26
00:01:19,180 --> 00:01:22,260
Pretty much they are kind of the abstract of

27
00:01:22,260 --> 00:01:25,445
a kernel. And finally, we can compare machines not

28
00:01:25,445 --> 00:01:27,850
based on how well they perform on some actual

29
00:01:27,850 --> 00:01:30,775
code that they're running, but purely based on peak

30
00:01:30,775 --> 00:01:34,126
performance. In theory, how many instructions per second should

31
00:01:34,126 --> 00:01:37,996
this machine be able to execute. Usually, peak performance

32
00:01:37,996 --> 00:01:41,450
is only good for marketing. Doesn't tell us very

33
00:01:41,450 --> 00:01:45,480
much about the actual performance of the machine. Synthetic

34
00:01:45,480 --> 00:01:49,780
benchmarks are usually very good for design studies of

35
00:01:49,780 --> 00:01:52,630
potential new machines, but they're not very good for

36
00:01:52,630 --> 00:01:55,450
actually reporting performance to others. So we can use

37
00:01:55,450 --> 00:01:59,900
these just to see how well do we expect a design to behave so that we can choose

38
00:01:59,900 --> 00:02:03,220
among multiple possible designs. Once we actually build the

39
00:02:03,220 --> 00:02:07,140
machine, we can use, for example, kernels to test

40
00:02:07,140 --> 00:02:09,949
the performance of a prototype, and finally

41
00:02:09,949 --> 00:02:11,820
we should be using real applications if

42
00:02:11,820 --> 00:02:14,090
we are comparing actual machines that we

43
00:02:14,090 --> 00:02:16,730
are trying to, for example, sell to somebody.
