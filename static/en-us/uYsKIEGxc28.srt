1
00:00:00,000 --> 00:00:03,000
All right, this is very easy to check.

2
00:00:03,000 --> 00:00:05,000
We can just run it in the IDE and see what comes out.

3
00:00:05,000 --> 00:00:08,000
The answer is 8, but why is the answer 8?

4
00:00:08,000 --> 00:00:11,000
Let's take a look at what 17 looks like in binary, in base 2.

5
00:00:11,000 --> 00:00:18,000
It has the 1 position set--1, 2, 4, 8, 16.

6
00:00:18,000 --> 00:00:21,000
It's a bit pattern that looks like this--10001.

7
00:00:21,000 --> 00:00:24,000
What this operator does is it shifts the whole bit pattern

8
00:00:24,000 --> 00:00:27,000
one position to the right, dropping the lower order bit.

9
00:00:27,000 --> 00:00:31,000
This shift 1 to the right becomes that, which is 8.

10
00:00:31,000 --> 00:00:35,000
Roughly, what this operator does is it halves a number.

11
00:00:35,000 --> 00:00:37,000
But if it's odd first it subtracts 1 and then halves the number.

12
00:00:37,000 --> 99:59:59,999
That's why we get 8 and not say 8.5.
