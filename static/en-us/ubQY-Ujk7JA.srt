1
00:00:00,200 --> 00:00:02,580
Let's look at the solution to our BTB and

2
00:00:02,580 --> 00:00:05,860
BHT quiz. This time the question was how many

3
00:00:05,860 --> 00:00:08,250
times do we access the BTB for each of

4
00:00:08,250 --> 00:00:12,880
these instructions. We have a perfect BHT and a

5
00:00:12,880 --> 00:00:16,640
perfect BTB. The BTB has four entries, the BHT

6
00:00:16,640 --> 00:00:20,130
has 16 entries. This doesn't really matter in this

7
00:00:20,130 --> 00:00:25,880
part of the quiz. What you ned to know is that when you have both the bhd and

8
00:00:25,880 --> 00:00:33,660
the btb, the btb is accessed only if the bhd says that this is a taken branch.

9
00:00:33,660 --> 00:00:39,910
If this is not a taken branch, then we can just increment the pc. Because

10
00:00:39,910 --> 00:00:42,570
this instruction is not a taken branch. And

11
00:00:42,570 --> 00:00:45,510
because the BHT has perfect prediction, the BTB

12
00:00:45,510 --> 00:00:48,870
will never be accessed. Same thing here. And

13
00:00:48,870 --> 00:00:52,500
now I can tell, that for all non-branch instructions,

14
00:00:52,500 --> 00:00:56,620
we will just have zero BTB accesses, because they are never predicted to be

15
00:00:56,620 --> 00:01:00,700
taken branches. This branch here is executed

16
00:01:00,700 --> 00:01:04,040
100 times and is always taken, so here

17
00:01:04,040 --> 00:01:10,308
the BTB will be accessed 100 times. This branch is more interesting, in every

18
00:01:10,308 --> 00:01:17,080
iteration that stays in the loop, iterations where R1 is 0. 1, 2, et cetera,

19
00:01:17,080 --> 00:01:24,480
until 99, this branch is not taken. The BHT is perfectly predicting it,

20
00:01:24,480 --> 00:01:31,358
so we don't access the BTB at all. Only on the last iteration when we are having

21
00:01:31,358 --> 00:01:36,998
the R1 be 99 and we wrap around here and try to compare again, and this

22
00:01:36,998 --> 00:01:43,180
time we see that R1 is 100, and jump out. Is this branch taken?

23
00:01:43,180 --> 00:01:47,460
Because again, we have a perfect BHT, that means that the only time

24
00:01:47,460 --> 00:01:51,800
the BTB is accessed for this instruction is that one last time when

25
00:01:51,800 --> 00:01:55,380
we are jumping out of the loop. So the BTB will be accessed

26
00:01:55,380 --> 00:01:59,180
only once because there is only one time that this branch has actually taken.
