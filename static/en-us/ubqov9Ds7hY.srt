1
00:00:00,012 --> 00:00:04,207
In problem set number 4, you will be implementing a parallel algorithm

2
00:00:04,207 --> 00:00:09,728
for removing the red eye effect that commonly occurs in pictures of human faces.

3
00:00:09,728 --> 00:00:14,208
Here is an example of the effect that we are talking about.

4
00:00:14,208 --> 00:00:18,089
You will be implementing a simple algorithm for red eye removal

5
00:00:18,089 --> 00:00:23,126
that factors nicely into 3 different parallel operations.

6
00:00:23,126 --> 00:00:27,595
The first operation is a stencil computation over the image,

7
00:00:27,595 --> 00:00:31,601
the second is a sort, and the third is map.

8
00:00:31,601 --> 00:00:36,673
You have been exposed to map and stencil operations in the previous homework,

9
00:00:36,673 --> 00:00:40,442
so in this homework, you will focus on sorting.

10
00:00:41,688 --> 00:00:44,587
We start our red eye removal algorithm

11
00:00:44,587 --> 00:00:48,019
by computing a score for each pixel

12
00:00:48,019 --> 00:00:53,655
that estimates the likelihood of that pixel belonging to a red eye,

13
00:00:53,655 --> 00:00:56,259
and here's what the score looks like.

14
00:00:56,259 --> 00:01:00,398
This score is known as normalized cross-correlation,

15
00:01:00,398 --> 00:01:04,881
and it is expressed naturally as a stencil operation.

16
00:01:04,881 --> 00:01:09,644
We have computed this normalized cross-correlation square for you,

17
00:01:09,644 --> 00:01:17,254
but if you're interested we will provide extra details about normalized cross-correlation in the Instructor Comments.

18
00:01:17,254 --> 00:01:21,567
Our next step is to sort all of the pixels in the image

19
00:01:21,567 --> 00:01:23,920
according to their score.

20
00:01:23,920 --> 00:01:26,257
Note that the pixels with the highest scores

21
00:01:26,257 --> 00:01:32,060
are the pixels that most likely belong to a red eye, as you can see here.

22
00:01:32,060 --> 00:01:37,206
This sorting step is what you will be implementing in problem set number 4.

23
00:01:37,206 --> 00:01:39,699
If you are interested,

24
00:01:39,699 --> 00:01:46,602
we will discuss several different types of optimization strategies for sorting in the Instructor Comments.

25
00:01:46,602 --> 00:01:51,900
Our final step is to reduce the redness of the high scoring pixels.

26
00:01:51,900 --> 00:01:57,332
This computation is expressed naturally as a map operation.

27
00:01:57,332 --> 00:02:02,621
Once again we've performed the step for you so you can concentrate your efforts on sorting.

28
00:02:02,621 --> 00:02:07,491
That is all, good luck and I hope you will enjoy problem set number 4,

29
00:02:07,491 --> 00:02:10,895
and like the previous problem sets I want to thank Eric and Mike

30
00:02:10,895 --> 00:02:14,731
for writing the code and the script to this problem set,

31
00:02:14,731 --> 00:02:17,364
so thank you.
