1
00:00:00,070 --> 00:00:04,360
When thinking about how to address the
virtualization requirements that we just

2
00:00:04,360 --> 00:00:08,390
mentioned in the previous quiz,
it is fortunate to observe that

3
00:00:08,390 --> 00:00:12,650
commodity hardware actually has
more than two protection levels.

4
00:00:12,650 --> 00:00:16,824
Looking at the architecture that's,
at least in the server space, most

5
00:00:16,824 --> 00:00:22,372
dominant, the x86 architecture, there
are four protection levels called rings.

6
00:00:22,372 --> 00:00:26,494
Ring 0 has the highest privilege and
can access all of the resources and

7
00:00:26,494 --> 00:00:30,380
execute all hardware-supported
instructions.

8
00:00:30,380 --> 00:00:35,600
And this is where in a, a native model,
the operating system would reside.

9
00:00:35,600 --> 00:00:40,840
So, when the OS is in control of all the
hardware resources, it sits in ring 0.

10
00:00:40,840 --> 00:00:45,410
In contrast, ring 3 has
the least level of privilege, so

11
00:00:45,410 --> 00:00:48,410
this is where the applications
would reside.

12
00:00:48,410 --> 00:00:52,540
And whenever the applications try to
perform something, some operation for

13
00:00:52,540 --> 00:00:57,770
which they don't have the appropriate
privileges, then a trap would be caused,

14
00:00:57,770 --> 00:01:02,590
and control would be switched to the
ring 0, to the lowest privileged level.

15
00:01:02,590 --> 00:01:07,970
One way in which these protection levels
can be used is to put the hypervisor

16
00:01:07,970 --> 00:01:13,110
now in ring 0, so that's the one that
has full control over the hardware,

17
00:01:13,110 --> 00:01:17,840
to leave the applications to
execute at ring 3 level, and

18
00:01:17,840 --> 00:01:21,320
then the operating system
would execute at ring 1 level.

19
00:01:21,320 --> 00:01:24,930
We'll explain how this actually
works in the following video.

20
00:01:24,930 --> 00:01:30,480
More recent x86 architectures also
introduce two different protection modes

21
00:01:30,480 --> 00:01:32,310
called root and non-root.

22
00:01:32,310 --> 00:01:35,818
Within each of these modes,
the four protection levels exist, so

23
00:01:35,818 --> 00:01:39,070
there are like two times
these protection rings.

24
00:01:39,070 --> 00:01:43,550
Now, when running in root mode,
all of the operations are permitted,

25
00:01:43,550 --> 00:01:47,570
all hardware is accessible,
all instructions can be executed.

26
00:01:47,570 --> 00:01:49,940
So, this is the highest privilege level.

27
00:01:49,940 --> 00:01:50,940
And this is,

28
00:01:50,940 --> 00:01:55,080
the ring 0 of the root mode,
is where we would run the hypervisor.

29
00:01:55,080 --> 00:02:00,970
In contrast, in non-root mode, certain
types of operations are not permitted.

30
00:02:00,970 --> 00:02:05,360
So then, the guest VMs would
execute in this non-root mode.

31
00:02:05,360 --> 00:02:08,680
And they would have,
as they did in the native execution,

32
00:02:08,680 --> 00:02:12,520
their applications running in ring 3 and

33
00:02:12,520 --> 00:02:15,440
the operating system running
at ring 0 privilege level.

34
00:02:16,570 --> 00:02:21,090
Attempts by the guest operating system
to perform privileged operations

35
00:02:21,090 --> 00:02:23,450
cause traps that are called VMexits.

36
00:02:24,580 --> 00:02:29,480
And these trigger a switch to this root
mode and pass control to the hypervisor.

37
00:02:29,480 --> 00:02:31,800
When the hypervisor
completes its operation,

38
00:02:31,800 --> 00:02:36,640
it passes control back to the virtual
machine by performing a VMentry which

39
00:02:36,640 --> 00:02:41,790
switches the mode into non-root mode, to
ring 0, so that the execution continues
