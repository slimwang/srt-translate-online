1
00:00:00,480 --> 00:00:02,620
So the Vanilla RC is what is called

2
00:00:02,620 --> 00:00:06,750
the eager release consistent memory model and the

3
00:00:06,750 --> 00:00:09,310
new memory model is called LRC, or Lazy

4
00:00:09,310 --> 00:00:12,590
release consistent memory model. Let's see the pros

5
00:00:12,590 --> 00:00:18,970
and cons of LRC with respect to Vanilla RC, or Lazy RC with respect to Eager

6
00:00:18,970 --> 00:00:20,940
RC. So what I am showing you here

7
00:00:20,940 --> 00:00:25,840
are timelines of processor actions on three different processors,

8
00:00:25,840 --> 00:00:31,400
P1, P2, and P3. And this picture is showing you what happens in the Eager

9
00:00:31,400 --> 00:00:34,780
version of the RC model, in terms

10
00:00:34,780 --> 00:00:39,210
of communication among the processors. So when processor

11
00:00:39,210 --> 00:00:43,630
P1 has completed its critical section, does

12
00:00:43,630 --> 00:00:46,450
the release operation, at the release point what

13
00:00:46,450 --> 00:00:50,870
we're going to do is all the changes that we made, in this example I'm showing

14
00:00:50,870 --> 00:00:54,800
you to make it simple I'm showing you that

15
00:00:54,800 --> 00:00:56,990
in this critical section that I wrote in this

16
00:00:56,990 --> 00:01:00,619
variable x, so the changes to x is going

17
00:01:00,619 --> 00:01:03,840
to be communicated to all the processors, P2 and P3.

18
00:01:03,840 --> 00:01:06,220
It could be, depending on whether it is an

19
00:01:06,220 --> 00:01:09,910
invalidation based protocol or an update based protocol, what

20
00:01:09,910 --> 00:01:12,760
we are saying is we are communicating the coherence

21
00:01:12,760 --> 00:01:16,150
action to all the other processors. That's what these arrows

22
00:01:16,150 --> 00:01:19,690
are indicating. Now then P2 acquires the lock,

23
00:01:19,690 --> 00:01:22,500
and after it acquires the lock it does its

24
00:01:22,500 --> 00:01:25,270
own critical section. Again, let's say we're writing

25
00:01:25,270 --> 00:01:29,160
to the same variable X, and it releases the

26
00:01:29,160 --> 00:01:31,350
lock. And at the point of release once

27
00:01:31,350 --> 00:01:34,630
again we broadcast the changes that we made. Notice

28
00:01:34,630 --> 00:01:38,970
what is going on. P1 makes modifications, broadcasts

29
00:01:38,970 --> 00:01:41,080
it to everybody. But who really needs it? Well,

30
00:01:41,080 --> 00:01:44,960
only P2 needs it. But unfortunately the RC memory

31
00:01:44,960 --> 00:01:47,920
model is Eager, and it says I'm going to

32
00:01:47,920 --> 00:01:51,680
tell everybody that has a copy of X that

33
00:01:51,680 --> 00:01:53,490
I have modified X. And so it's going to tell

34
00:01:53,490 --> 00:01:54,878
it to P2. It's going to tell it to

35
00:01:54,878 --> 00:01:58,930
P3 as well. P3 doesn't care, because it's not using

36
00:01:58,930 --> 00:02:02,660
that variable yet, and P2 cares, and it of

37
00:02:02,660 --> 00:02:06,090
course is using that. But when it releases its critical

38
00:02:06,090 --> 00:02:08,625
section, it's once again going to do exactly

39
00:02:08,625 --> 00:02:11,290
the same thing that happened over here, and that

40
00:02:11,290 --> 00:02:13,825
is it's going to broadcast the changes it made

41
00:02:13,825 --> 00:02:16,880
to shared memory locations to all the other processes,

42
00:02:16,880 --> 00:02:19,243
in this case P1 and P2. And then,

43
00:02:19,243 --> 00:02:23,414
finally, P3 does its acquire, and then reads the

44
00:02:23,414 --> 00:02:27,160
variable. So, all these areas are showing you the

45
00:02:27,160 --> 00:02:31,680
coherence actions that are inherent in the completion of

46
00:02:31,680 --> 00:02:33,670
shared memory accesses that are happening in the

47
00:02:33,670 --> 00:02:36,320
critical section of programs. Now let's move over to

48
00:02:36,320 --> 00:02:39,140
the Lazy version. In the Lazy version, what we

49
00:02:39,140 --> 00:02:43,210
are doing is when we release a lock, we

50
00:02:43,210 --> 00:02:46,460
are not doing any global communication. We simply

51
00:02:46,460 --> 00:02:50,770
release a lock. Later on the next process that

52
00:02:50,770 --> 00:02:54,320
happens to acquire that same lock. The RC memory

53
00:02:54,320 --> 00:02:56,500
model. The first thing it's going to say is,

54
00:02:56,500 --> 00:02:58,600
oh, you want to get this lock? I have

55
00:02:58,600 --> 00:03:00,780
to go and make sure that I complete all the

56
00:03:00,780 --> 00:03:04,800
coherence actions that I've associated with that particular lock. In

57
00:03:04,800 --> 00:03:09,740
this case the previous lock holder had made changes to

58
00:03:09,740 --> 00:03:12,140
the variable x, so I'm going to pull it from

59
00:03:12,140 --> 00:03:15,360
this guy and then I can execute my critical section.

60
00:03:15,360 --> 00:03:18,804
And then when P3 executes its critical section, it's going

61
00:03:18,804 --> 00:03:21,610
to pull it from P2 and complete what it needs

62
00:03:21,610 --> 00:03:24,220
to do. So, the important thing that you see is

63
00:03:24,220 --> 00:03:27,600
that there is no broadcast anymore. It's only point-to-point communication

64
00:03:27,600 --> 00:03:30,990
that's happening between the processors that are passing the lock

65
00:03:30,990 --> 00:03:33,790
between one to the other. So, in other words, the

66
00:03:33,790 --> 00:03:37,720
number of arrows that you see are communication events. You

67
00:03:37,720 --> 00:03:40,640
can see that there's a lot more arrows here. Forget

68
00:03:40,640 --> 00:03:43,950
about the arrows that I introduced. But the black arrows

69
00:03:43,950 --> 00:03:47,560
that you see are the arrows that are indicating communications

70
00:03:47,560 --> 00:03:51,040
commensurate with the coherence actions needed for this

71
00:03:51,040 --> 00:03:55,220
set of critical section actions. And correspondingly, the

72
00:03:55,220 --> 00:03:58,870
black arrows here are showing the communication actions

73
00:03:58,870 --> 00:04:02,230
for the same set of critical section actions

74
00:04:02,230 --> 00:04:04,750
shown in both the top and the bottom

75
00:04:04,750 --> 00:04:07,700
half of this particular figure. You can see,

76
00:04:07,700 --> 00:04:10,130
there's a lot less communication happening with the

77
00:04:10,130 --> 00:04:12,540
Lazy model. It's also called a pull model,

78
00:04:12,540 --> 00:04:14,690
because what we're doing is at the

79
00:04:14,690 --> 00:04:17,779
point of acquisition, we're pulling the coherence

80
00:04:17,779 --> 00:04:23,100
actions that need to be completed over here. Whereas, this is the push model in

81
00:04:23,100 --> 00:04:24,895
the sense that we're pushing all the

82
00:04:24,895 --> 00:04:27,760
coherence actions to everybody at the point of

83
00:04:27,760 --> 00:04:30,660
release. Having introduced the Eager and the

84
00:04:30,660 --> 00:04:33,380
Lazy RC models, it's time for a quiz.
