1
00:00:00,090 --> 00:00:03,740
It turns out, consistency does matter,
and here's how.

2
00:00:03,740 --> 00:00:07,400
Let's say that in program order,
two cores do this.

3
00:00:07,400 --> 00:00:12,100
The first core is going to
store a 1 into location D, and

4
00:00:12,100 --> 00:00:14,860
then store a 1 into location F.

5
00:00:14,860 --> 00:00:18,610
Let's say that D and
F are both 0 initially.

6
00:00:18,610 --> 00:00:23,550
The second core loads F into R1 and

7
00:00:23,550 --> 00:00:27,350
then loads D into R2.

8
00:00:27,350 --> 00:00:31,500
And let's say that now we
print the registers R1 and R2.

9
00:00:31,500 --> 00:00:34,740
Note that we can have an out of order
processor that reorders loads and

10
00:00:34,740 --> 00:00:35,940
stores.

11
00:00:35,940 --> 00:00:40,980
So in execution order, core 1
might still be doing the stores in

12
00:00:40,980 --> 00:00:46,290
the same order, but core 2 decides
to reorder these two loads.

13
00:00:46,290 --> 00:00:49,970
Note that in a uniprocessor,
reordering of loads,

14
00:00:49,970 --> 00:00:54,030
if this core is not writing to these
locations, if perfectly okay, and

15
00:00:54,030 --> 00:00:58,710
in fact, even in a multi-processor,
most of the time it's okay.

16
00:00:58,710 --> 00:01:03,460
Now, let's look at what's possible
to get in R1 and R2 after this.

17
00:01:03,460 --> 00:01:08,500
In program order, these two loads on
core 2 might execute before these

18
00:01:08,500 --> 00:01:14,540
two stores in core 1, so
we can get R1 and R2 are 0.

19
00:01:14,540 --> 00:01:19,400
Here, these two loads in Core 2,
although they've been reordered,

20
00:01:19,400 --> 00:01:23,200
can still happen before
Core 1 gets to store.

21
00:01:23,200 --> 00:01:25,990
So we can get the same thing.

22
00:01:25,990 --> 00:01:29,900
These two loads can happen
after the two stores.

23
00:01:29,900 --> 00:01:33,930
So we can get 1 in both registers here.

24
00:01:33,930 --> 00:01:39,650
In execution order, even if we re-order
them, they can execute after the stores.

25
00:01:39,650 --> 00:01:42,710
So we can get 1 in both of them.

26
00:01:42,710 --> 00:01:47,400
In the program order,
if these two happen like this,

27
00:01:47,400 --> 00:01:52,520
in between the two stores,
we can get R1, when we load,

28
00:01:52,520 --> 00:01:59,660
it's still loading the 0 here, but R2,
when we load, is already loading the 1.

29
00:01:59,660 --> 00:02:01,730
The same thing can happen here.

30
00:02:01,730 --> 00:02:07,530
If these two loads are in between
the stores, then R1 is going to be 0

31
00:02:07,530 --> 00:02:13,660
because it comes before this, and R2 is
going to be 1 because it happens here.

32
00:02:13,660 --> 00:02:15,690
And now it gets interesting.

33
00:02:15,690 --> 00:02:20,040
We have seen that there are these three
possibilities, so the question is, but

34
00:02:20,040 --> 00:02:25,230
can we get R1 to be 1 while R2 is 0?

35
00:02:25,230 --> 00:02:28,958
And in the program order,
if we consider that, it's not possible.

36
00:02:28,958 --> 00:02:35,680
R1 being 1 means that
when we read F we read 1.

37
00:02:35,680 --> 00:02:39,600
That means that this load has
to come after this store.

38
00:02:39,600 --> 00:02:44,810
If that happens, then this load
has to be after this load too.

39
00:02:44,810 --> 00:02:52,360
So pretty much, if we execute this here,
then this has to be here,

40
00:02:52,360 --> 00:02:57,310
and that means that if we read one 1
from F, we will read 1 from D as well.

41
00:02:57,310 --> 00:03:04,410
So the R1 equals 1, R2 equals 0
cannot happen in program order.

42
00:03:04,410 --> 00:03:12,560
But here R1 equals 1 means that
this load needs to be here.

43
00:03:12,560 --> 00:03:16,850
And we can get a 0 in R2
if this load comes here.

44
00:03:16,850 --> 00:03:22,200
So if we put the stores in between the
loads in the execution order like this,

45
00:03:22,200 --> 00:03:26,579
we will get a situation that was not
possible in the original program order.

46
00:03:27,730 --> 00:03:33,900
So the programmer might have expected
that this code can never result in this,

47
00:03:33,900 --> 00:03:38,530
but in an out of order processor
execution on each core, it can.

48
00:03:38,530 --> 00:03:41,660
And note that this doesn't
violate coherence at all.

49
00:03:41,660 --> 00:03:46,330
In all cases, a load and
the store obeyed coherence.

50
00:03:46,330 --> 00:03:49,780
But do we really care about that?

51
00:03:49,780 --> 00:03:50,370
Sure.
For

52
00:03:50,370 --> 00:03:54,060
some obscure orderings this can happen,
do we really care?

53
00:03:54,060 --> 00:03:58,860
When does it really matter that
this doesn't happen and it does?
