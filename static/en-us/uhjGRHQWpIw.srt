1
00:00:00,000 --> 00:00:03,000
At this point we've seen how to handle static data,

2
00:00:03,000 --> 00:00:06,000
how to capture and replay user interaction

3
00:00:06,000 --> 00:00:11,000
and even a generic mechanism to record and replay the interaction with the environment.

4
00:00:11,000 --> 00:00:14,000
Let me now briefly discuss some additional items

5
00:00:14,000 --> 00:00:17,000
that are of particular importance during debugging.

6
00:00:17,000 --> 00:00:21,000
The key concept for all of these is to make non-deterministic behavior

7
00:00:21,000 --> 00:00:25,000
deterministic and controllable at the same time.

8
00:00:25,000 --> 00:00:29,000
First, time. If your program depends on real dates and times,

9
00:00:29,000 --> 00:00:33,000
be sure to provide a means to set these, for diagnostic purposes.

10
00:00:33,000 --> 00:00:37,000
If it depends on real timing, make these limits controllable as well.

11
00:00:37,000 --> 00:00:42,000
Second, randomness. If your program has planned, non-deterministic behavior,

12
00:00:42,000 --> 00:00:47,000
for instance, if you're building a game, ensure that you can reproduce this at will.

13
00:00:47,000 --> 00:00:51,000
If you use a pseudorandom generator, be sure to save its seed.

14
00:00:51,000 --> 00:00:55,000
If you use a true random generator, save the sequence of random numbers.

15
00:00:55,000 --> 00:01:01,000
Third, schedules. Multithread programs may non-deterministically switch between threads.

16
00:01:01,000 --> 00:01:05,000
Again, find means to make these thread switches deterministic.

17
00:01:05,000 --> 00:01:09,000
Otherwise, you may run into hard-to-reproduce thread scheduling issues.

18
00:01:09,000 --> 00:01:11,000
Fourth, physical influence.

19
00:01:11,000 --> 00:01:13,000
Depending on your environment, it is possible

20
00:01:13,000 --> 00:01:16,000
that some physical influence causes software errors.

21
00:01:16,000 --> 00:01:22,000
If you place a strong alpha emitter on top of your CPU or your RAM,

22
00:01:22,000 --> 00:01:24,000
this will likely cause malfunctions.

23
00:01:24,000 --> 00:01:27,000
Cosmic rays may also result in spurious errors.

24
00:01:27,000 --> 00:01:31,000
But this is more an electronics problem rather than a software problem,

25
00:01:31,000 --> 00:01:33,000
so we leave it as it is.

26
00:01:33,000 --> 00:01:38,000
Fifth, debugging tools. Debuggers instument the code and alter its execution.

27
00:01:38,000 --> 00:01:41,000
The least they do is to influence the real timing.

28
00:01:41,000 --> 00:01:44,000
Therefore, they may induce Heisenbugs,

29
00:01:44,000 --> 00:01:46,000
again, bugs that appear or disappear when being observed.
