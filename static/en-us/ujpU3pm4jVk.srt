1
00:00:00,540 --> 00:00:03,030
We just saw what a request
to a server looks like, and

2
00:00:03,030 --> 00:00:07,300
we mentioned that the request used was
a GET request, but what does it mean for

3
00:00:07,300 --> 00:00:09,980
a request to be a GET request.

4
00:00:09,980 --> 00:00:14,090
A GET request is a type of HTTP request
where a client requests a specified

5
00:00:14,090 --> 00:00:15,540
resource from a server.

6
00:00:15,540 --> 00:00:19,760
For example, the client could make a GET
request for an image on a server and

7
00:00:19,760 --> 00:00:21,710
then the server could return it back.

8
00:00:21,710 --> 00:00:25,600
A GET request is just one of
several kinds of HTTP requests,

9
00:00:25,600 --> 00:00:29,460
also called HTTP methods,
and it's the most common.

10
00:00:29,460 --> 00:00:30,384
Now you'll note,

11
00:00:30,384 --> 00:00:34,080
in this course I'm going to avoid using
the term HTTP method to much because I

12
00:00:34,080 --> 00:00:37,398
don't want to confuse the term with
what we know as methods in Swift.

13
00:00:37,398 --> 00:00:40,302
Let's look more closely at
GET request by reusing or

14
00:00:40,302 --> 00:00:42,700
example of Udacity's homepage.

15
00:00:42,700 --> 00:00:45,070
When you visit Udacity's
homepage in a web browser,

16
00:00:45,070 --> 00:00:46,710
you're making a GET request.

17
00:00:46,710 --> 00:00:51,698
By typing in the URL udacity.com in the
address bar, you're specify a resource,

18
00:00:51,698 --> 00:00:56,273
in this case you'd ask the homepage
from a server somewhere in the network.

19
00:00:56,273 --> 00:00:58,462
And you're saying, hey, get this for me.

20
00:00:58,462 --> 00:01:02,062
And when we hit enter, the request is
made and we can see that it's a success

21
00:01:02,062 --> 00:01:05,220
because the server's responded
with Udacity's homepage.

22
00:01:05,220 --> 00:01:08,760
But there's so much more happening than
meets the eye when you make this request

23
00:01:08,760 --> 00:01:10,250
on a web browser.

24
00:01:10,250 --> 00:01:12,210
To show you what's really
happening under the hood,

25
00:01:12,210 --> 00:01:15,218
I'm going to use the Chrome
app called Postman.

26
00:01:15,218 --> 00:01:17,800
If you want to follow along
I'll post the download link

27
00:01:17,800 --> 00:01:19,180
in the instructor notes, but

28
00:01:19,180 --> 00:01:22,740
you'll need to already have installed
Google Chrome in order to use it.

29
00:01:22,740 --> 00:01:24,465
Okay, so here's the Postman app.

30
00:01:24,465 --> 00:01:28,390
At the top bar, you can make a request,
much like we did in the web browser.

31
00:01:28,390 --> 00:01:32,610
But here to the left,
we can also specify the type of request.

32
00:01:32,610 --> 00:01:35,120
For this request, we'll leave
it as the default, which is GET.

33
00:01:36,200 --> 00:01:39,910
Now let's type in the URL for
Udacity's homepage, and hit Send.

34
00:01:39,910 --> 00:01:42,400
Wow, okay, so
there's a lot to observer here.

35
00:01:42,400 --> 00:01:43,910
Let's go step by step.

36
00:01:43,910 --> 00:01:45,530
For now,
I'm going to hide this side panel,

37
00:01:45,530 --> 00:01:48,130
which shows a history of
the request that we've made.

38
00:01:48,130 --> 00:01:51,553
Here at the top we have some tabs for
Authorization, Headers,

39
00:01:51,553 --> 00:01:53,501
Pre-request script, and Tests.

40
00:01:53,501 --> 00:01:56,130
We're going to skip these for
now and come back to them later.

41
00:01:56,130 --> 00:01:58,800
Lets focus our attention
here on the Body.

42
00:01:58,800 --> 00:02:02,129
This is the response that the server
returned when we made a GET request for

43
00:02:02,129 --> 00:02:03,375
you Udacity's homepage.

44
00:02:03,375 --> 00:02:06,169
But it doesn't look anything like
the homepage we're used to seeing.

45
00:02:06,169 --> 00:02:10,020
It's just a bunch of html,
CSS and JavaScript code.

46
00:02:10,020 --> 00:02:13,270
That's because all of this code is
normally loaded, interpreted, and

47
00:02:13,270 --> 00:02:15,010
rendered by our web browser.

48
00:02:15,010 --> 00:02:18,990
If we click on the Preview option, we
can see a low fidelity version of what

49
00:02:18,990 --> 00:02:21,030
this would look like if
it was loaded by Chrome.

50
00:02:24,040 --> 00:02:27,811
Next, I want to look at the Status
section where it says, 200 OK.

51
00:02:27,811 --> 00:02:29,740
This is what is know as a status code.

52
00:02:29,740 --> 00:02:34,060
A status code gives us a quick
indication of whether the HTTP request

53
00:02:34,060 --> 00:02:37,100
succeeded, failed, or something else.

54
00:02:37,100 --> 00:02:40,200
There are many different possible
status codes that can be returned for

55
00:02:40,200 --> 00:02:41,920
an HTTP request.

56
00:02:41,920 --> 00:02:45,210
I'll post a link in the instructor notes
if you want to read about them more.

57
00:02:45,210 --> 00:02:48,540
The most important thing to note is that
anytime we get a status code that begins

58
00:02:48,540 --> 00:02:51,820
with a 2,
it means the request was successful.

59
00:02:51,820 --> 00:02:53,450
Let's hover over the status code so

60
00:02:53,450 --> 00:02:56,370
we can see a little bit of
information about what it means.

61
00:02:56,370 --> 00:02:59,437
It says that a 200 status code
is the standard response for

62
00:02:59,437 --> 00:03:01,690
a successful HTTP request, and

63
00:03:01,690 --> 00:03:05,620
that the actual response depends on
the type of request that was used.

64
00:03:05,620 --> 00:03:07,770
Because we used a GET request up here,

65
00:03:07,770 --> 00:03:11,200
we're seeing the entity that
corresponds to the requested resource,

66
00:03:11,200 --> 00:03:15,420
which in this case was the Udacity
homepage and all of it's code.

67
00:03:15,420 --> 00:03:19,320
Also, at the bottom of this description,
it mentions a new type of request,

68
00:03:19,320 --> 00:03:22,810
called a POST request, which we'll
talk about later in this course.

69
00:03:22,810 --> 00:03:25,750
The next thing we see is the time
it took to execute our request

70
00:03:25,750 --> 00:03:29,830
in milliseconds,
which was 1,350 milliseconds.

71
00:03:29,830 --> 00:03:31,790
This is important to keep in mind.

72
00:03:31,790 --> 00:03:35,160
When we make requests over the network
it does take some amount of time for

73
00:03:35,160 --> 00:03:36,330
us to get a response.

74
00:03:36,330 --> 00:03:38,720
It's not always instantaneous.

75
00:03:38,720 --> 00:03:42,170
So when we start making these requests
in code, we'll have to consider what we

76
00:03:42,170 --> 00:03:45,290
want our app to do while
it's waiting on a response.

77
00:03:45,290 --> 00:03:46,950
Now let's try a different URL.

78
00:03:46,950 --> 00:03:50,176
This time I'm going to use a URL that
I know doesn't refer to a page on

79
00:03:50,176 --> 00:03:51,301
Udacity's website.

80
00:03:51,301 --> 00:03:53,948
I'll go ahead and hit Send.

81
00:03:53,948 --> 00:03:57,797
And this time we get a response,
but notice the new status code,

82
00:03:57,797 --> 00:03:58,900
which is 404.

83
00:03:58,900 --> 00:04:03,480
If we hover over the status code it says
the requested resource can't be found.

84
00:04:03,480 --> 00:04:06,328
Anytime we see a status code
that begins with a 4 or

85
00:04:06,328 --> 00:04:08,795
5, it indicates some kind of error.

86
00:04:08,795 --> 00:04:11,880
Bu, even though we have an error,
we still get a response.

87
00:04:11,880 --> 00:04:14,950
If you look at the the response
in Preview mode, we see that it's

88
00:04:14,950 --> 00:04:18,890
a page that says, we're sorry,
what you're looking for doesn't exist.

89
00:04:18,890 --> 00:04:22,170
This is commonly referred
to as a 404 page.

90
00:04:22,170 --> 00:04:24,870
Not all websites have these, but
the awesome engineers at Udacity

91
00:04:24,870 --> 00:04:29,860
have created this 404 page so in case
you request a page that doesn't exist,

92
00:04:29,860 --> 00:04:33,810
you still see something that feels
like Udacity's normal website.

93
00:04:33,810 --> 00:04:36,130
Okay, I have one more example.

94
00:04:36,130 --> 00:04:39,420
This time let's request
an image instead of a webpage.

95
00:04:39,420 --> 00:04:43,440
This is the kind of request we'll make
when we build the app for this lesson.

96
00:04:43,440 --> 00:04:45,710
I'll type in my request and hit Send.

97
00:04:45,710 --> 00:04:49,450
This time we get a image as
a response instead of HTML code.

98
00:04:49,450 --> 00:04:52,325
And that's the last point
I want to make here,

99
00:04:52,325 --> 00:04:56,942
when we make HTTP requests the data
that we get back can be images, text,

100
00:04:56,942 --> 00:04:59,754
HTML code and
various other types of media.

101
00:04:59,754 --> 00:05:03,468
If you have some time I highly recommend
that you download Postman yourself and

102
00:05:03,468 --> 00:05:04,690
experiment.

103
00:05:04,690 --> 00:05:07,640
I'll also post some links in
the instructor notes for other similar

104
00:05:07,640 --> 00:05:10,600
tools in case you don't use
Google Chrome as your normal browser.
