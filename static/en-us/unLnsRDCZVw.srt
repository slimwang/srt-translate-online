1
00:00:00,270 --> 00:00:04,206
Returning to our original example of me ordering

2
00:00:04,206 --> 00:00:06,894
a ticket to go to India via Expedia

3
00:00:06,894 --> 00:00:09,923
and Delta. Let's now identify all the events

4
00:00:09,923 --> 00:00:14,128
that are connected directly by the happened-before relationship.

5
00:00:14,128 --> 00:00:20,108
So, if these are the events in my process, then we know that E happened before

6
00:00:20,108 --> 00:00:25,230
H. And, we know that H happened before I. And, we know that I happened for L.

7
00:00:25,230 --> 00:00:27,560
So that's the textual ordering, and we know the

8
00:00:27,560 --> 00:00:30,960
process is sequential. This is the ordering of events, in

9
00:00:30,960 --> 00:00:34,220
my process. And similarly, we can see that, if

10
00:00:34,220 --> 00:00:37,590
these are the events in Expedia's process. Then all of

11
00:00:37,590 --> 00:00:40,800
these events have to be sequentially ordered. SO, B

12
00:00:40,800 --> 00:00:44,210
should have happened before C C should have happened before

13
00:00:44,210 --> 00:00:47,660
F, F should have happened before G, and G

14
00:00:47,660 --> 00:00:50,750
should have happened before M. So these are the orderings

15
00:00:50,750 --> 00:00:54,530
of the events in Expedia's process and similarly

16
00:00:54,530 --> 00:00:57,140
we can derive the order of events in

17
00:00:57,140 --> 00:01:00,659
the delta process, as sequential. And these are

18
00:01:00,659 --> 00:01:03,683
all the communication events that are directly relating

19
00:01:03,683 --> 00:01:06,518
events happening between any two processes that I'm

20
00:01:06,518 --> 00:01:09,920
showing you in this picture. So, for instance,

21
00:01:09,920 --> 00:01:12,620
E to F is a message from Delta

22
00:01:12,620 --> 00:01:15,770
back to Expedia confirming my reservation. So E is

23
00:01:15,770 --> 00:01:18,560
the act of sending the message from Delta, and

24
00:01:18,560 --> 00:01:21,600
F is the act of receiving the same message from

25
00:01:21,600 --> 00:01:24,180
Delta on Expedia. So, those are all the communication

26
00:01:24,180 --> 00:01:27,100
events. And now you can also look at transitive events,

27
00:01:27,100 --> 00:01:29,800
so for instance. What is the relationship between, let's

28
00:01:29,800 --> 00:01:34,830
say, event E and event A? Well, it turns out

29
00:01:34,830 --> 00:01:38,030
that A must have happened before event E. And

30
00:01:38,030 --> 00:01:41,010
the reason is, if you look at A, it happened

31
00:01:41,010 --> 00:01:44,890
before B, B happened before C, C happened before D.

32
00:01:44,890 --> 00:01:47,070
All of these are communication events, pretty straight forward. So

33
00:01:47,070 --> 00:01:50,390
from here to here, it's not a communication event, but

34
00:01:50,390 --> 00:01:53,470
since the process is sequential, B should have happened before

35
00:01:53,470 --> 00:01:55,989
C, and of course C happened before D. So, since

36
00:01:55,989 --> 00:01:59,151
it's a communication event, sequential process D should have happened

37
00:01:59,151 --> 00:02:02,590
before E. And that's what gives a transitive relationship between

38
00:02:02,590 --> 00:02:05,850
A and E, that A must have happened before E.

39
00:02:05,850 --> 00:02:09,110
Similarly, we can identify other events that

40
00:02:09,110 --> 00:02:12,090
are transitively connected to one another. Because of

41
00:02:12,090 --> 00:02:15,436
the happen-before relationship. So, for instance, D and

42
00:02:15,436 --> 00:02:19,436
M apparently don't have any direct connection. But,

43
00:02:19,436 --> 00:02:22,836
through the transitivity of events that are happening

44
00:02:22,836 --> 00:02:26,916
sequentially, and through the communication, and sequentiality of

45
00:02:26,916 --> 00:02:28,888
a process, we know that D must have

46
00:02:28,888 --> 00:02:31,740
happened before M. So those are transitive events.

47
00:02:31,740 --> 00:02:34,200
And finally, let's look at concurrent events. If you

48
00:02:34,200 --> 00:02:38,590
think about this event M that's happening in Expedia. Basically

49
00:02:38,590 --> 00:02:41,230
Expedia has confirmed to me that I have the booking

50
00:02:41,230 --> 00:02:45,334
that I want. Then it is doing some internal bookkeeping,

51
00:02:45,334 --> 00:02:49,234
to record some information about me, maybe my preferences

52
00:02:49,234 --> 00:02:52,109
in terms of airlines and so on and so forth.

53
00:02:52,109 --> 00:02:54,161
And from that point of view, it is making some

54
00:02:54,161 --> 00:02:56,779
internal bookkeeping and that's is event M. And now if

55
00:02:56,779 --> 00:02:58,347
you look at this event M, it has no

56
00:02:58,347 --> 00:03:01,540
relationship to any of the events that are happening here.

57
00:03:01,540 --> 00:03:05,270
I'm showing G, this event H must have happened after

58
00:03:05,270 --> 00:03:08,520
G, but what about H and M? There is no

59
00:03:08,520 --> 00:03:11,570
relationship between these two guys. This could've happened much

60
00:03:11,570 --> 00:03:14,860
later than, than this in wall clock time. Or it

61
00:03:14,860 --> 00:03:18,560
could've happened much sooner than event M. So you can

62
00:03:18,560 --> 00:03:21,700
see that, H is concurrent with M, and in fact,

63
00:03:21,700 --> 00:03:23,990
all the events that you see here, are

64
00:03:23,990 --> 00:03:27,300
going to be concurrent with M. And similarly, all the

65
00:03:27,300 --> 00:03:30,580
events that you are seeing over here, they're

66
00:03:30,580 --> 00:03:33,840
concurrent with So in fact, they're concurrent with M.

67
00:03:33,840 --> 00:03:36,520
After this, if you look at the Delta

68
00:03:36,520 --> 00:03:41,140
process, after Delta has sent this message to Expedia

69
00:03:41,140 --> 00:03:43,990
confirming my booking, it may have done a whole

70
00:03:43,990 --> 00:03:46,930
bunch of events, over here. All of those events

71
00:03:46,930 --> 00:03:50,180
are concurrent with M, because there is

72
00:03:50,180 --> 00:03:53,970
no ordering between these events, and the events

73
00:03:53,970 --> 00:03:59,940
over here. But there is an ordering between the event, G and the event J here.

74
00:03:59,940 --> 00:04:03,060
Because G happened before H, H happened before

75
00:04:03,060 --> 00:04:05,890
I, I happened before J. So, you can

76
00:04:05,890 --> 00:04:10,170
see that transitivity connects events across machines. But

77
00:04:10,170 --> 00:04:12,470
they could be events that are happening in

78
00:04:12,470 --> 00:04:15,610
the distributed system, that are unconnected to other

79
00:04:15,610 --> 00:04:19,140
events. And those are concurrent events. That completes

80
00:04:19,140 --> 00:04:22,670
discussion of the basics of distributed system. Next

81
00:04:22,670 --> 00:04:25,130
we're going to start talking about Lampard's clock.
