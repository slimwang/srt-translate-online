1
00:00:00,120 --> 00:00:02,284
In this problem and the next we’re going to build

2
00:00:02,284 --> 00:00:05,641
a large portion of our javascript, parser. In

3
00:00:05,641 --> 00:00:07,805
particular, we’re first going to focus on

4
00:00:07,805 --> 00:00:09,978
javascript statements and then make it even

5
00:00:09,978 --> 00:00:12,645
easier really only go and consider six type

6
00:00:12,645 --> 00:00:15,153
statements. If then, so if you have an If

7
00:00:15,153 --> 00:00:18,848
statement basically, if then else, so here

8
00:00:18,848 --> 00:00:20,885
we’re going to handle a javascript statement,

9
00:00:20,885 --> 00:00:24,999
something like this and then also an else. Whereas

10
00:00:24,999 --> 00:00:28,859
this first type of statement is just this portion

11
00:00:28,859 --> 00:00:31,510
whereas the if and else handles all of this.

12
00:00:31,510 --> 00:00:34,659
We’re going to also do assignment, so variable X

13
00:00:34,659 --> 00:00:38,845
equals a five. Return statements, an example of

14
00:00:38,845 --> 00:00:41,693
that in javascript will look like this where we

15
00:00:41,693 --> 00:00:44,643
have the return keyword followed by an expression

16
00:00:44,643 --> 00:00:47,797
. Here I just have five. We have two ones left.

17
00:00:47,797 --> 00:00:50,313
One involving decoration namely using the

18
00:00:50,313 --> 00:00:53,797
var keyword, so this declares a variable X and so

19
00:00:53,797 --> 00:00:55,856
it’s a five versus just setting at the five later

20
00:00:55,856 --> 00:00:59,212
on. And the last type we’re going to handle in

21
00:00:59,212 --> 00:01:01,913
this portion is just the existence of an

22
00:01:01,913 --> 00:01:04,552
expression. You can have in your javascript

23
00:01:04,552 --> 00:01:06,899
an expression in the middle of your code

24
00:01:06,899 --> 00:01:09,415
. So instead of stuff here, we could just

25
00:01:09,415 --> 00:01:13,384
say five. This doesn’t do anything, but

26
00:01:13,384 --> 00:01:16,084
it’s a number five and its valid javascript.

27
00:01:16,084 --> 00:01:18,298
So this is pretty straightforward if you just follow

28
00:01:18,298 --> 00:01:20,384
the rules that were given at the top of the program

29
00:01:20,384 --> 00:01:22,604
and we’re going to go straight to the IDE and work

30
00:01:22,604 --> 00:01:25,764
through it one by one. So here I have my interpreter

31
00:01:25,764 --> 00:01:28,339
ready for us to get started with this question.

32
00:01:28,339 --> 00:01:31,688
So here I have the rule for a function and we’re

33
00:01:31,688 --> 00:01:34,541
going to write this out. Here I’m telling the

34
00:01:34,541 --> 00:01:37,574
parser that this is going to be a parser for the

35
00:01:37,574 --> 00:01:40,355
element non-terminal and I’m going to call this

36
00:01:40,355 --> 00:01:43,540
one the function parser. The first when to thing is

37
00:01:43,540 --> 00:01:46,852
going to be a string that tells a parser apply this

38
00:01:46,852 --> 00:01:50,917
rule. So here I say an element can go to the

39
00:01:50,917 --> 00:01:54,616
terminal function and identifier the

40
00:01:54,616 --> 00:01:57,092
some optional fantasies are right

41
00:01:57,092 --> 00:02:00,574
followed by a compound sequences statements.

42
00:02:00,574 --> 00:02:03,674
And once this has been matched, I’m going to apply

43
00:02:03,674 --> 00:02:07,903
it such that element is going to be the tuple

44
00:02:07,903 --> 00:02:10,238
with the world function. The name of the function

45
00:02:10,238 --> 00:02:12,941
, which is going to be identifier, the optional

46
00:02:12,941 --> 00:02:16,292
parameters which is number four and then six is

47
00:02:16,292 --> 00:02:18,323
going to be the compound statements. An

48
00:02:18,323 --> 00:02:20,142
can also just be a statement,

49
00:02:20,142 --> 00:02:22,118
which is going to be some sort of statement

50
00:02:22,118 --> 00:02:24,658
followed by a The two poles that

51
00:02:24,658 --> 00:02:26,141
it matches is going to be the word statement

52
00:02:26,141 --> 00:02:28,712
and the contents of that statement.

53
00:02:28,712 --> 00:02:32,333
Here I had my two rules for optional parameters

54
00:02:32,333 --> 00:02:34,460
and as the name implies the parameters can

55
00:02:34,460 --> 00:02:37,233
be optional, so our params can go to nothing

56
00:02:37,233 --> 00:02:40,845
or it can be a sequence of parameters. Now

57
00:02:40,845 --> 00:02:44,178
parameters can be some kind of identifier

58
00:02:44,178 --> 00:02:47,130
followed by a coma and more parameters or

59
00:02:47,130 --> 00:02:50,479
it can be one or the last parameter is just

60
00:02:50,479 --> 00:02:52,858
going to be an identifier. Notice how I put

61
00:02:52,858 --> 00:02:55,460
the identifier in a list because parameters

62
00:02:55,460 --> 00:02:57,860
are always a list even if there is just one thing

63
00:02:57,860 --> 00:03:02,296
in them. A compound statement is a sequence

64
00:03:02,296 --> 00:03:05,944
of statements in between a left brace and a

65
00:03:05,944 --> 00:03:09,942
right brace. the rules for statements,

66
00:03:09,942 --> 00:03:13,045
statements can be empty, so you can have nothing

67
00:03:13,045 --> 00:03:15,545
in your – between your left and right braces

68
00:03:15,545 --> 00:03:18,635
or it can be a single statement and a

69
00:03:18,635 --> 00:03:20,567
followed by more statements.

70
00:03:20,567 --> 00:03:24,434
So now we’re going to define the statements.

71
00:03:24,434 --> 00:03:27,601
Let’s start with F. If we do have an F statement,

72
00:03:27,601 --> 00:03:30,385
we’re going to put it in a tuple in our parse

73
00:03:30,385 --> 00:03:34,199
street where the first entry in the tuple is the

74
00:03:34,199 --> 00:03:36,093
string, if then it indicate that it’s an F

75
00:03:36,093 --> 00:03:38,243
statement. The second one is going to be

76
00:03:38,243 --> 00:03:40,442
the expression of the F statement and the

77
00:03:40,442 --> 00:03:42,475
last element of our tuple are going to be

78
00:03:42,475 --> 00:03:45,283
the compound statements that comprise the

79
00:03:45,283 --> 00:03:49,071
then. In the if then else , we have very similar

80
00:03:49,078 --> 00:03:51,523
structure except we’ve also added an else,

81
00:03:51,523 --> 00:03:53,294
which is going to be an additional entry in

82
00:03:53,294 --> 00:03:55,710
our tuple that is the sequence of statements

83
00:03:55,710 --> 00:03:58,843
that you do if the expression is not

84
00:03:58,843 --> 00:04:01,159
evaluated to be true.

85
00:04:01,159 --> 00:04:02,871
Here we have assignment. It’s going to an

86
00:04:02,871 --> 00:04:07,389
identifier. It’s a X equals the equal sign and

87
00:04:07,389 --> 00:04:10,039
then some expressions if I and then on parser

88
00:04:10,039 --> 00:04:13,236
you’re going to put a sign, the identifier and

89
00:04:13,236 --> 00:04:16,202
then expression to which the identifier is set.

90
00:04:16,202 --> 00:04:19,171
For return, we’re just going to do return

91
00:04:19,171 --> 00:04:21,772
and then the expression that we’re returning.

92
00:04:21,772 --> 00:04:24,921
We use the keyword bar to declare

93
00:04:24,921 --> 00:04:27,227
instead a variable, so we’re going to have

94
00:04:27,227 --> 00:04:29,742
the keywords bar followed by an identifier,

95
00:04:29,742 --> 00:04:31,660
the equal sign and expression we want

96
00:04:31,660 --> 00:04:34,240
to put bar, the identifier and expression.

97
00:04:34,240 --> 00:04:37,024
So make this a little more concrete,

98
00:04:37,024 --> 00:04:39,841
it would be as if we were doing this and the tuple

99
00:04:39,841 --> 00:04:46,741
that we put in our Pastry is going to be bar, X, five.

100
00:04:46,741 --> 00:04:50,575
And lastly we say a statement to an expression,

101
00:04:50,575 --> 00:04:52,570
which we haven’t defined yet and we’re saving

102
00:04:52,570 --> 00:04:54,969
for the next problem. Taken altogether we

103
00:04:54,969 --> 00:04:57,887
have much of our javascript parser. Well,

104
00:04:57,887 --> 00:05:01,887
at the least the part, that handles statements.
