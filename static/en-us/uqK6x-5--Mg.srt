1
00:00:00,150 --> 00:00:04,990
[BLANK_AUDIO]

2
00:00:04,990 --> 00:00:08,566
>> Okay, so I think I have a handle on optimizing

3
00:00:08,566 --> 00:00:11,382
HTML and CSS. So, are we moving on to the render tree?

4
00:00:11,382 --> 00:00:14,037
>> Almost, we haven't really talked about JavaScript,

5
00:00:14,037 --> 00:00:16,521
and obviously that's an important step, so let's

6
00:00:16,521 --> 00:00:19,430
take a look at that. Okay, well let

7
00:00:19,430 --> 00:00:22,410
me guess, minify it, compress it and cache it?

8
00:00:22,410 --> 00:00:25,950
>> Yup. All of those are good strategies. But for JavaScript you may have seen

9
00:00:25,950 --> 00:00:28,154
piece bit insighs also complain about parser

10
00:00:28,154 --> 00:00:30,000
blocking scripts. Let's take a look at what

11
00:00:30,000 --> 00:00:31,330
that means and how we can optimize it.

12
00:00:33,350 --> 00:00:35,340
I've extended our hello world page with

13
00:00:35,340 --> 00:00:38,770
a simple inline script at the bottom. Let's

14
00:00:38,770 --> 00:00:44,470
walk through it. First of all, we reach into the DOM and look for the first

15
00:00:44,470 --> 00:00:47,640
span element. Which, as you can see, contains

16
00:00:47,640 --> 00:00:51,510
the web performance text. Next, we modify the

17
00:00:51,510 --> 00:00:55,000
DOM element by changing its inner text and

18
00:00:55,000 --> 00:00:58,620
also changing its CSS properties. Seems simple enough.

19
00:00:59,670 --> 00:01:01,980
>> Yeah, this shows that JavaScript can manipulate

20
00:01:01,980 --> 00:01:04,800
both the DOM and the CSS Object Model. It's

21
00:01:04,800 --> 00:01:07,220
a very powerful tool. And it gets a

22
00:01:07,220 --> 00:01:10,500
bit more interesting from here. Next, we create a

23
00:01:10,500 --> 00:01:15,050
new div element, set its text content. CSS

24
00:01:15,050 --> 00:01:18,270
caller property, and append it to the page. Let's

25
00:01:18,270 --> 00:01:21,650
try to load this page on our phone. Notice

26
00:01:21,650 --> 00:01:24,900
that the text now says, Hello interactive students instead

27
00:01:24,900 --> 00:01:28,900
of Hello web performance students. And we also have our new element right below

28
00:01:28,900 --> 00:01:31,820
it. Right, as expected. So is there

29
00:01:31,820 --> 00:01:34,710
anything here we can do to optimize performance?

30
00:01:34,710 --> 00:01:38,690
>> Definitely, optimizing JavaScript could be an entire course. But,

31
00:01:38,690 --> 00:01:42,020
in this particular example, it's not really the code, but how

32
00:01:42,020 --> 00:01:45,120
it's included on the page. Let's take a step back and

33
00:01:45,120 --> 00:01:47,630
think about how the browser would go about building this page
