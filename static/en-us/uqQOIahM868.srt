1
00:00:00,240 --> 00:00:02,025
Next we turn to the page fault and ask the

2
00:00:02,025 --> 00:00:05,580
question: What happens when an application requests a virtual address

3
00:00:05,580 --> 00:00:08,185
that's not mapped to physical memory, but is somewhere on

4
00:00:08,185 --> 00:00:11,980
disk? I'll represent a user's process like so and at

5
00:00:11,980 --> 00:00:14,800
some point, he uses a virtual memory address that's not

6
00:00:14,800 --> 00:00:18,870
actually mapped to physical memory at the moment. Yikes! Actually

7
00:00:18,870 --> 00:00:21,530
it's not that big a deal. An exception is raised,

8
00:00:21,530 --> 00:00:25,620
which sets the running process back to be ready to repeat

9
00:00:25,620 --> 00:00:29,400
the instruction that created the, the fault. Meanwhile,

10
00:00:29,400 --> 00:00:32,240
the operating systems page fault handler takes over to

11
00:00:32,240 --> 00:00:35,129
address the problem. He checks to make sure the

12
00:00:35,129 --> 00:00:37,843
request is actually valid and sends, sends a segfault

13
00:00:37,843 --> 00:00:40,440
if it isn't. Then he loads the desired page

14
00:00:40,440 --> 00:00:43,170
into memory, gets everything ready and then tells the

15
00:00:43,170 --> 00:00:46,390
scheduler that the process is ready to resume. The

16
00:00:46,390 --> 00:00:51,240
process will execute its memory move or read or

17
00:00:51,240 --> 00:00:54,810
whatever it is again, and this time it will succeed because

18
00:00:54,810 --> 00:00:57,800
the page has been loaded into memory and it can continue

19
00:00:57,800 --> 00:01:01,130
running. That's the high-level picture. Let's talk a little bit more

20
00:01:01,130 --> 00:01:04,440
about what the page fault handler does. So assuming that the

21
00:01:04,440 --> 00:01:07,230
page we want really does reside on disk, the first thing

22
00:01:07,230 --> 00:01:10,230
the page handler does is to find a physical page frame

23
00:01:10,230 --> 00:01:13,670
in memory to load the data into. The best scenario is

24
00:01:13,670 --> 00:01:17,350
that one is free. The handler keeps a list of free pages.

25
00:01:17,350 --> 00:01:20,050
If this is not empty, then he can just pop one off.

26
00:01:20,050 --> 00:01:22,660
Okay? And that makes us very happy. If he doesn't have a

27
00:01:22,660 --> 00:01:25,900
free page, however, then he must choose a page for replacement. There

28
00:01:25,900 --> 00:01:29,760
are many possible page replacement algorithms. We won't go into them here.

29
00:01:29,760 --> 00:01:32,770
For our purposes, it suffices to say that a page handler will

30
00:01:32,770 --> 00:01:35,240
pick a page that it doesn't think is likely to be used

31
00:01:35,240 --> 00:01:39,110
soon. This page is saved to disk and then its physical memory

32
00:01:39,110 --> 00:01:42,250
can store the page that was created by the page fault. So,

33
00:01:42,250 --> 00:01:45,830
one way or another, we now have a free physical page in memory to which

34
00:01:45,830 --> 00:01:50,910
we can write the data we need from disk. Then we update the process's page

35
00:01:50,910 --> 00:01:53,860
table and any other data structures that

36
00:01:53,860 --> 00:01:55,920
are page fault handler needs to keep track

37
00:01:55,920 --> 00:02:00,300
of and then we're ready to restart the process and let it continue on to a
