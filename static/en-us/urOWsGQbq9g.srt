1
00:00:00,190 --> 00:00:03,765
The solution we just saw has some problems, it had wires the ID generation into

2
00:00:03,765 --> 00:00:06,955
the person class, so if somebody is writing code and they want to use the

3
00:00:06,955 --> 00:00:12,859
person's class in their code, but they want ID's to be generated differently.

4
00:00:12,859 --> 00:00:16,104
Maybe they want ID's to start at a 1000 or may be they only want prime ID's

5
00:00:16,104 --> 00:00:19,624
they can't change the way the ID's are being assigned so what would be a better

6
00:00:19,624 --> 00:00:26,597
way to assign ID's to our persons? We would create a new interface, IdProvider

7
00:00:26,597 --> 00:00:30,890
which would have a method next to Id. You can think of an interface sort of

8
00:00:30,890 --> 00:00:35,035
like a class for now. We'll talk about these more in lesson nine. But now that

9
00:00:35,035 --> 00:00:39,995
we have this when we create a person, we can take in an ID provider, and use it

10
00:00:39,995 --> 00:00:46,680
to set the ID. Then we don't need the static variable anymore. This is what

11
00:00:46,680 --> 00:00:50,456
objects are all about, if you want different policies, you create different

12
00:00:50,456 --> 00:00:54,000
objects. There's no reason to be tied to a static variable in order to count

13
00:00:54,000 --> 00:00:59,433
the ID's. In production code you should never use static variables unless you

14
00:00:59,433 --> 00:01:03,032
declare them final and capitalize them and use them as constants, static

15
00:01:03,032 --> 00:01:06,926
variable seem convenient, but when you write real code they cause bugs because

16
00:01:06,926 --> 00:01:12,880
they don't get cleaned up when you are done the way objects do
