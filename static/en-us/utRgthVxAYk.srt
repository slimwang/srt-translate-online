1
00:00:00,300 --> 00:00:04,900
So because the Loads in our processor need to be done as

2
00:00:04,900 --> 00:00:09,980
soon as possible while the Stores do not write to memory until commit,

3
00:00:09,980 --> 00:00:14,220
we said we need the Load-Store queue so that we can supply the values from

4
00:00:14,220 --> 00:00:20,150
Stores to Loads. This Load-Store queue, or LSQ,

5
00:00:20,150 --> 00:00:25,620
is a structure just like the ROB, meaning we put things there in order and

6
00:00:25,620 --> 00:00:31,000
remove them at commit. But we only put Load and Store instructions there, so

7
00:00:31,000 --> 00:00:34,100
there is a bit that says which instruction do we have, Load or

8
00:00:34,100 --> 00:00:39,840
Store? There is a field for what is the address this instruction is accessing.

9
00:00:39,840 --> 00:00:45,300
And there is a field for the value that the instructions should be storing or

10
00:00:45,300 --> 00:00:48,460
loading. There is also a field for,

11
00:00:48,460 --> 00:00:53,560
this instruction has been completed. Now let's suppose we have this program, and

12
00:00:53,560 --> 00:00:57,720
suppose that the Load-Store queue is initially empty. So as we said,

13
00:00:57,720 --> 00:01:01,440
things are going to be placed here in program order. So the first instruction

14
00:01:01,440 --> 00:01:05,710
here is going to be a Load. Let's say that we quickly compute the address, and

15
00:01:05,710 --> 00:01:09,626
it's 104. This load, because there are no previous stores,

16
00:01:09,626 --> 00:01:14,140
will go to memory. The next instruction here is a Store.

17
00:01:14,140 --> 00:01:19,440
Let's say that it computes the address of 204. Let's say that the value is 15,

18
00:01:19,440 --> 00:01:22,710
and we mark it down. And let's say that this instruction is kind of delayed so

19
00:01:22,710 --> 00:01:27,470
it doesn't return yet, so we still have all of these in the Load-Store queue.

20
00:01:27,470 --> 00:01:33,390
The next Load, let's say it eventually computes the address of 204.

21
00:01:33,390 --> 00:01:37,430
For every Load, when it computes the address, we check in the Load-Store queue

22
00:01:37,430 --> 00:01:42,080
if any store matches that address. If there is no matching Store,

23
00:01:42,080 --> 00:01:46,960
like equals case for this Load because there were no Stores, we go to memory.

24
00:01:46,960 --> 00:01:51,210
If there is a matching Store, we do not go to memory.

25
00:01:51,210 --> 00:01:55,370
Instead we do what is called the Store-to-Load forwarding, where we simply

26
00:01:55,370 --> 00:02:00,510
take the value from the Store and that is the value that the Load produces, and

27
00:02:00,510 --> 00:02:07,090
we never go to memory. So again, this is called Store-to-Load forwarding.

28
00:02:07,090 --> 00:02:12,570
Now of course, this assumes that at the time we want to do this Load, the Stores

29
00:02:12,570 --> 00:02:16,960
have already been completed, and we now know what the addresses are and

30
00:02:16,960 --> 00:02:19,300
if we need to get the value, we know what the value is.
