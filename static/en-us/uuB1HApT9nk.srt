1
00:00:00,660 --> 00:00:03,923
Okay, so we've seen TextView code for
the first time.

2
00:00:03,923 --> 00:00:05,911
>> But
it's kind of hanging out in limbo.

3
00:00:05,911 --> 00:00:09,025
>> Right, we do need a space
where we can house it.

4
00:00:09,025 --> 00:00:10,521
>> Yeah, that space is an IDE.

5
00:00:10,521 --> 00:00:12,580
>> There's that acronym again.

6
00:00:12,580 --> 00:00:13,721
What does it stand for again, Catherine?

7
00:00:13,721 --> 00:00:16,062
>> Integrated Development Environment
>> Right, and

8
00:00:16,062 --> 00:00:19,660
we are going to be using
Android Studio in this class.

9
00:00:19,660 --> 00:00:21,650
This is what it looks like.

10
00:00:21,650 --> 00:00:23,310
Still a little intimidating.

11
00:00:23,310 --> 00:00:24,870
>> Yeah.
I think we might need something

12
00:00:24,870 --> 00:00:27,560
that will help our learner
ramp up a little bit easier.

13
00:00:27,560 --> 00:00:30,806
>> Right, so we've been working
on developing something that is

14
00:00:30,806 --> 00:00:34,667
Android Studio on training wheels,
in the tradition of really convoluted

15
00:00:34,667 --> 00:00:37,568
acronyms in computer science,
we are calling it XMLV.

16
00:00:37,568 --> 00:00:39,344
>> Which stands for XML Visualizer.

17
00:00:39,344 --> 00:00:41,250
>> So you write a little bit of XML?

18
00:00:41,250 --> 00:00:41,980
You get to see the output.

19
00:00:41,980 --> 00:00:44,560
You write some more,
you get to see more output.

20
00:00:44,560 --> 00:00:45,190
>> Yeah.

21
00:00:45,190 --> 00:00:46,170
So let's go use it.

22
00:00:46,170 --> 00:00:47,420
>> Okay.

23
00:00:47,420 --> 00:00:51,600
>> Since this XML visualizer was
created specifically for this course,

24
00:00:51,600 --> 00:00:55,280
it won't provide all the functionality
that Android Studio supports.

25
00:00:55,280 --> 00:00:57,530
But eventually in the problem
set of this lesson,

26
00:00:57,530 --> 00:01:01,220
we'll get you into Android Studio so
you won't need this website anymore.

27
00:01:02,450 --> 00:01:05,670
A link is in the instructor notes
If you want to follow along.

28
00:01:05,670 --> 00:01:08,110
For this code,
the text says Happy Birthday.

29
00:01:08,110 --> 00:01:12,190
So when I look at the device it says,
Happy Birthday.

30
00:01:12,190 --> 00:01:15,320
Now let's try to change the text
to Happy Birthday, Kunal.

31
00:01:16,350 --> 00:01:19,550
And then when I zoom in on the device
preview you see that it now says,

32
00:01:19,550 --> 00:01:21,270
Happy Birthday, Kunal.

33
00:01:21,270 --> 00:01:24,250
And what happens by trying to
stand the width and the height.

34
00:01:24,250 --> 00:01:27,580
I'll pick some arbitrary
values like the 300dp for

35
00:01:27,580 --> 00:01:30,140
the width and 500 for the height.

36
00:01:30,140 --> 00:01:34,119
And now in the preview pane, you see
that the TextView is a lot bigger.

37
00:01:35,160 --> 00:01:39,220
The text though, however, is still
the same size in the top left corner.

38
00:01:40,750 --> 00:01:43,890
Notice that for the width and
height values of 300 and

39
00:01:43,890 --> 00:01:48,400
500 is followed by dp in each case.

40
00:01:48,400 --> 00:01:51,000
This is a unit of measure
like centimeters or

41
00:01:51,000 --> 00:01:55,120
millimeters, that we use to describe
the size of views on Android.

42
00:01:55,120 --> 00:01:57,440
As well as the distancing between views.

43
00:01:58,550 --> 00:02:01,450
The unit dp stands for
density-independent pixels.

44
00:02:02,540 --> 00:02:04,840
Let me explain why we need that.

45
00:02:04,840 --> 00:02:09,030
Say these beautifully drawn rectangles
represent different devices.

46
00:02:09,030 --> 00:02:14,230
They're the same physical size, but
they differ in terms of resolution.

47
00:02:14,230 --> 00:02:18,980
This is a medium resolution device with
a medium number of pixels on the screen,

48
00:02:18,980 --> 00:02:22,580
high resolution and
extra-high resolution device.

49
00:02:22,580 --> 00:02:26,540
When I say pixel, I mean a phone screen
is made up of many tiny squares,

50
00:02:26,540 --> 00:02:30,300
which are pixels, and they light up
based on what you're looking at.

51
00:02:30,300 --> 00:02:34,740
So if I define the size of a view, for
example, a button, to be 2 pixels tall

52
00:02:34,740 --> 00:02:38,620
by 2 pixels wide, this is what it would
look like on a medium resolution device.

53
00:02:39,670 --> 00:02:43,350
On a high resolution device,
it would also be 2 pixels by 2 pixels.

54
00:02:43,350 --> 00:02:44,850
But it's a little bit smaller,

55
00:02:44,850 --> 00:02:49,060
because there's a lot more pixels trying
to be packed into this device, and

56
00:02:49,060 --> 00:02:52,680
then on an extra high resolution device
where there's tons more pixels packed

57
00:02:52,680 --> 00:02:56,720
into this space,
this button is actually pretty tiny.

58
00:02:56,720 --> 00:02:58,470
I can barely tap on it with my finger.

59
00:02:58,470 --> 00:03:02,520
I have to use edge of my finger or
my fingernail to reach it.

60
00:03:02,520 --> 00:03:04,990
Just because I have extra
high resolution device,

61
00:03:04,990 --> 00:03:06,790
doesn't mean I have a smaller finger.

62
00:03:06,790 --> 00:03:10,060
I still want to be able to tap
the buttons on the screen.

63
00:03:10,060 --> 00:03:12,730
And that is why we have
density-independent pixels.

64
00:03:12,730 --> 00:03:15,720
I can define my button to
be 2dps tall by 2dps wide.

65
00:03:15,720 --> 00:03:19,390
This is what it would look like
across the different devices.

66
00:03:19,390 --> 00:03:21,800
It is the same physical size, but

67
00:03:21,800 --> 00:03:26,090
under the hood Android is mapping
it to a different number of pixels.

68
00:03:26,090 --> 00:03:29,360
You don't have to worry about any of
that logic, all you need to remember

69
00:03:29,360 --> 00:03:33,520
is that you need to define your
sizes in terms of dp values.

70
00:03:33,520 --> 00:03:38,040
When designing your apps, we recommend
that all touch targets like buttons

71
00:03:38,040 --> 00:03:41,160
should be at least 48dps tall and wide.

72
00:03:41,160 --> 00:03:44,100
Notice that it says 48dps and
not 48 pixels,

73
00:03:44,100 --> 00:03:47,930
otherwise it would be really tiny on
this extra high resolution device.

74
00:03:47,930 --> 00:03:50,730
This will make your app easy to use for
everyone.

75
00:03:50,730 --> 00:03:53,489
So with all of this knowledge,
I want you to try and

76
00:03:53,489 --> 00:03:55,213
change the TextView code now.

77
00:03:55,213 --> 00:03:59,890
You're going to be writing your very
first lines of XML, how exciting.

78
00:03:59,890 --> 00:04:02,700
So first try to change
the text in the TextView.

79
00:04:02,700 --> 00:04:04,700
And then try to change
the sides of the TextView.

80
00:04:05,950 --> 00:04:09,700
Then I want you to try to
create an error sad face.

81
00:04:09,700 --> 00:04:11,750
And then I want you to undo it,
happy face.
