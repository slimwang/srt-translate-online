1
00:00:00,260 --> 00:00:03,473
So now that we have a working asset manager it's probably worth taking a step

2
00:00:03,473 --> 00:00:08,200
back and talking about how good asset loading works in good games. See, proper

3
00:00:08,200 --> 00:00:11,158
asset loading means you need to take into account how a user's going to

4
00:00:11,158 --> 00:00:15,843
experience your game and benefit from that properly. So for instance, if you

5
00:00:15,843 --> 00:00:18,710
were on a CDROM drive you have to know that it's going to take a certain amount

6
00:00:18,710 --> 00:00:23,294
of time to actually stream data from the disc into memory. So, you have to

7
00:00:23,294 --> 00:00:27,200
pretty much cover that by doing some 3 second animation or something else to

8
00:00:27,200 --> 00:00:32,503
hide from the user, that's streaming overhead. Now, some very interesting

9
00:00:32,503 --> 00:00:36,168
examples of this come to mind. The first is probably one of the more famous

10
00:00:36,168 --> 00:00:40,384
ones, Devil May Cry, back on the original PlayStation 2. This game had a really

11
00:00:40,384 --> 00:00:42,778
cool mode, that while the scene was actually loading, if you did your button

12
00:00:42,778 --> 00:00:46,476
smashing, you'd actually do damage to the loading bar. I actually remember

13
00:00:46,476 --> 00:00:49,644
sitting in my room watching my roommate kind of smash on this button controller

14
00:00:49,644 --> 00:00:54,670
as mad as possible, because he was so angry that it was taking so long to load.

15
00:00:54,670 --> 00:00:57,212
But by the time the level actually loaded, he was happy again and could go on

16
00:00:57,212 --> 00:01:01,637
killing all sorts of demons. The second example that comes to mind is actually

17
00:01:01,637 --> 00:01:05,370
Metroid Prime for the Game Cube. This was actually a simplistic tunnel shooter,

18
00:01:05,370 --> 00:01:08,295
effectively you had segments of geometry that your player would move through

19
00:01:08,295 --> 00:01:13,241
over time. They did something really cool, is that they only allowed one

20
00:01:13,241 --> 00:01:17,530
section of tunnel in memory at a time. This meant that each tunnel could be

21
00:01:17,530 --> 00:01:20,260
super high resolution graphics because there was nothing else competing for

22
00:01:20,260 --> 00:01:23,766
space. As you moved towards the end of the tunnel, though, towards one of those

23
00:01:23,766 --> 00:01:26,454
little doors you've got to shoot to open, it would start streaming in the next

24
00:01:26,454 --> 00:01:30,344
level. The problem with this though was if you started running too fast, you

25
00:01:30,344 --> 00:01:34,094
would get to the door before the streaming was done. You'd sit there shooting

26
00:01:34,094 --> 00:01:37,630
the door and it wouldn't open yet because the next level hadn't loaded. My

27
00:01:37,630 --> 00:01:42,060
personal favorite is actually Jak and Daxter. These guys had probably one of

28
00:01:42,060 --> 00:01:46,036
the earliest streaming mechanisms that I ever found. And the coolest way to

29
00:01:46,036 --> 00:01:49,953
hide it too. They had an infinite terrain. So you could run around and do all

30
00:01:49,953 --> 00:01:53,545
sorts of stuff. But if you for some reason were able to move fast enough that

31
00:01:53,545 --> 00:01:56,900
you were moving in an area that the terrain hadn't been streamed off a disk

32
00:01:56,900 --> 00:02:02,405
yet, they'd trip your player. This is the only time in the entire game where

33
00:02:02,405 --> 00:02:05,060
your player would actually fall down, and then play a 3 to 4 second get up

34
00:02:05,060 --> 00:02:09,139
animation. Of course during that time they had plenty of extra space to spit up

35
00:02:09,139 --> 00:02:13,924
the rest of the data from the disk. The point is this, most of game development

36
00:02:13,924 --> 00:02:17,060
is smoke and mirrors, so take advantage of that to give your user a believable

37
00:02:17,060 --> 00:02:18,800
experience.
