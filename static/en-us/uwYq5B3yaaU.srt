1
00:00:00,000 --> 00:00:01,000
Welcome back!

2
00:00:01,000 --> 00:00:06,000
We're about to start unit 4, and one of the things we're going to cover

3
00:00:06,000 --> 00:00:10,000
is the suprising power you can get from just writing down something

4
00:00:10,000 --> 00:00:14,000
you've already computed and referring back to it later.

5
00:00:14,000 --> 00:00:16,000
That actually came up once in my life.

6
00:00:16,000 --> 00:00:20,000
A number of years ago, I had the priviledge of working for Microsoft Research

7
00:00:20,000 --> 00:00:24,000
on a project to try to find and fix bugs in Windows.

8
00:00:24,000 --> 00:00:28,000
Now most of you are probably watching from a moon based in the not too distant future,

9
00:00:28,000 --> 00:00:32,000
but in the present and in the past, bugs in Windows were a big deal.

10
00:00:32,000 --> 00:00:36,000
In fact, it would often crash and lead to the dreaded blue screen of death.

11
00:00:36,000 --> 00:00:39,000
It turned out that as much as we like to pick on Microsoft,

12
00:00:39,000 --> 00:00:44,000
most of the bugs weren't in Microsoft code, but in third-party code

13
00:00:44,000 --> 00:00:50,000
written to drive various bits of hardware, like screens or printers or memory sticks.

14
00:00:50,000 --> 00:00:56,000
This software was called Device Drivers, and it might work something like

15
00:00:56,000 --> 00:00:59,000
this memory stick that I have right here.

16
00:00:59,000 --> 00:01:04,000
Microsoft wrote a tool to put this Device Driver software through torture tests.

17
00:01:04,000 --> 00:01:09,000
If you're memory stick, I might add data to you and then in the middle of reading it out,

18
00:01:09,000 --> 00:01:15,000
pull you out or turn off the power, or in general, apply these normal operations very fast

19
00:01:15,000 --> 00:01:17,000
or in a surprising order.

20
00:01:17,000 --> 00:01:19,000
And this really worked. They found a lot of bugs.

21
00:01:19,000 --> 00:01:24,000
So many bugs that's it's now a shipping product--the Microsoft Static Driver Verifier.

22
00:01:24,000 --> 00:01:29,000
The heart of this idea was a computer science notion known as model checking,

23
00:01:29,000 --> 00:01:33,000
figuring out how a program behaves by looking at its source code.

24
00:01:33,000 --> 00:01:37,000
A key to that was remembering things that had already been computed.

25
00:01:37,000 --> 00:01:40,000
If I already know how you behave when I turn off the power in the middle of an operation,

26
00:01:40,000 --> 00:01:44,000
I don't have to recompute it, which might be very expensive.

27
00:01:44,000 --> 00:01:49,000
So this relatively simple notion of writing down things so that we don't have to recompute them,

28
00:01:49,000 --> 99:59:59,999
is formerly called memoization, and it's one of the gems we'll get to in this unit.
