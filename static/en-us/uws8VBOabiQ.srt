1
00:00:00,140 --> 00:00:04,640
In the last few videos, we described
some issues with remote communication

2
00:00:04,640 --> 00:00:07,088
and the RPC mechanisms that solve them.

3
00:00:07,088 --> 00:00:09,990
This included the binding
mechanism that's used so

4
00:00:09,990 --> 00:00:13,270
that the clients can figure
out how to find the server and

5
00:00:13,270 --> 00:00:16,580
what is the server that they need
to talk to in the first place.

6
00:00:16,580 --> 00:00:19,460
We discuss the use of interface
definitional languages,

7
00:00:19,460 --> 00:00:21,520
to determine how to
package arguments and

8
00:00:21,520 --> 00:00:24,920
results that are being exchanged
among the client and the server.

9
00:00:24,920 --> 00:00:29,200
And in that sense, the IDL is used
to specify how the client and

10
00:00:29,200 --> 00:00:30,660
the server talk to one another.

11
00:00:30,660 --> 00:00:33,560
How they are able to unders,
understand each other.

12
00:00:33,560 --> 00:00:37,720
Next, we observe the problem of
dealing with pointers as arguments

13
00:00:37,720 --> 00:00:39,608
in remote procedure calls.

14
00:00:39,608 --> 00:00:44,308
And we said that, the use of pointers
should either be completely disallowed,

15
00:00:44,308 --> 00:00:48,447
or that the RPC system should build
in some kind of support to serialize

16
00:00:48,447 --> 00:00:50,427
the data that's being pointed.

17
00:00:50,427 --> 00:00:55,443
Finally, we'll also talk about
partial failures, and explained

18
00:00:55,443 --> 00:01:00,644
how it is tricky to determine exactly
what went wrong in an RPC system.

19
00:01:00,644 --> 00:01:05,132
And that instead, the RPC run-time
provides some special errors and

20
00:01:05,132 --> 00:01:07,338
tries to, in as much as possible,

21
00:01:07,338 --> 00:01:12,130
determine what exactly was the cause
of the error without making any kind of

22
00:01:12,130 --> 00:01:16,490
guarantees that it will be able
to provide a precise answer.

23
00:01:16,490 --> 00:01:20,210
For all of these, we mention that there
are multiple choices that can be made in

24
00:01:20,210 --> 00:01:23,140
the concrete implementation
of an RPC system.

25
00:01:23,140 --> 00:01:26,600
For instance, for binding,
we can choose to have a distributed or

26
00:01:26,600 --> 00:01:28,350
a per machine registry.

27
00:01:28,350 --> 00:01:31,160
Or we can choose to use
a language agnostic or

28
00:01:31,160 --> 00:01:34,550
language specific interface
definition language.

29
00:01:34,550 --> 00:01:38,150
In summary,
these issues define the design space for

30
00:01:38,150 --> 00:01:41,600
an RPC system in different RPC or

31
00:01:41,600 --> 00:01:45,880
RPC like solutions, we'll make
different choices in this space.

32
00:01:45,880 --> 00:01:50,800
And we will also very briefly contrast
this with the RPC like support in Java

33
00:01:50,800 --> 00:01:53,610
called remote method invocations or
Java RMI
