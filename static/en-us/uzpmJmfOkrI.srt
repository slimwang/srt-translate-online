1
00:00:00,000 --> 00:00:08,000
Let's say we have a formula like ODD plus ODD equals EVEN.

2
00:00:08,000 --> 00:00:14,000
Now, one of the rules of the way we form numbers is that we don't want to have

3
00:00:14,000 --> 00:00:17,000
a number that starts with 0.

4
00:00:17,000 --> 00:00:22,000
EVEN could be, say, 3435.

5
00:00:22,000 --> 00:00:27,000
That would be a perfectly valid set of digits to fill in for the word EVEN.

6
00:00:27,000 --> 00:00:36,000
It shouldn't be 0405, because we just don't normally write numbers with a leading zero.

7
00:00:36,000 --> 00:00:40,000
I excluded that. How did I do it?

8
00:00:40,000 --> 00:00:48,000
I did a regular expression search for the regular expression slash b,

9
00:00:48,000 --> 00:00:52,000
which matches at a word boundary--b stands for boundary.

10
00:00:52,000 --> 00:01:02,000
Then I'm looking for a zero followed by any digit 0-9.

11
00:01:02,000 --> 00:01:09,000
I'm looking for that within f, and I want that to be not true.

12
00:01:09,000 --> 00:01:19,000
If I took this string here--something plus something equals 0405,

13
00:01:19,000 --> 00:01:24,000
and I did this regular expression search, it's saying find me a word boundary,

14
00:01:24,000 --> 00:01:27,000
a boundary between a letter and/or a digit

15
00:01:27,000 --> 00:01:31,000
and something that's a punctuation or something else,

16
00:01:31,000 --> 00:01:36,000
a word boundary followed by a 0, followed by another digit,

17
00:01:36,000 --> 00:01:41,000
it would say, yes, indeed, that search does succeed.

18
00:01:41,000 --> 00:01:45,000
It succeeds right here. The 0 and the 4 match.

19
00:01:45,000 --> 00:01:48,000
I want that not to succeed, so I would return False.

20
00:01:48,000 --> 00:01:52,000
I would rule out this case where we have a word starting with 0 and 4.

21
00:01:52,000 --> 00:01:56,000
I did that, one, just because it's good form

22
00:01:56,000 --> 00:02:01,000
that normally you don't allow valid numbers to start with a zero,

23
00:02:01,000 --> 00:02:06,000
and also because in Python we could come up with an error because of that.

24
00:02:06,000 --> 00:02:08,000
Here is the problem.

25
00:02:08,000 --> 00:02:14,000
In a Python program, the string 012 corresponds to an integer,

26
00:02:14,000 --> 00:02:20,000
but the integer it corresponds to is not 12. It's 10. Why is that?

27
00:02:20,000 --> 00:02:25,000
Well, it's an old historical accident.

28
00:02:25,000 --> 00:02:32,000
Way back in the 1970s, the C programming language defined it that way,

29
00:02:32,000 --> 00:02:36,000
where they said any number that starts with a 0 is going to be interpreted

30
00:02:36,000 --> 00:02:40,000
as an octal number, which means base 8.

31
00:02:40,000 --> 00:02:52,000
So 012 means one 8, zero 8-squared, and 2 more, so 8 + 2 is 10.

32
00:02:52,000 --> 00:02:56,000
So that would give us the wrong answer if we allowed octal numbers

33
00:02:56,000 --> 00:03:00,000
to sneak in where we were expecting decimal.

34
00:03:00,000 --> 00:03:02,000
It would also give us a possible error.

35
00:03:02,000 --> 00:03:08,000
If we had the string 09 that gives you an error, because 9 is not an octal digit.

36
00:03:08,000 --> 00:03:13,000
To avoid all those problems, I put in this regular expression that says

37
00:03:13,000 --> 99:59:59,999
any time you see a lead zero just rule it out.
