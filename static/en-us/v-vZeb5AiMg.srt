1
00:00:00,000 --> 00:00:02,000
Well, I like this first one a lot.

2
00:00:02,000 --> 00:00:05,000
We can interpret an expression by walking its abstract syntax tree,

3
00:00:05,000 --> 00:00:07,000
or its parse tree, recursively.

4
00:00:07,000 --> 00:00:09,000
That's how we wrote eval-exp together.

5
00:00:09,000 --> 00:00:11,000
To interpret the HTML we covered in class,

6
00:00:11,000 --> 00:00:13,000
we need an environment.

7
00:00:13,000 --> 00:00:15,000
Actually no, the environment didn't come up

8
00:00:15,000 --> 00:00:18,000
until we got to JavaScript, which had variables.

9
00:00:18,000 --> 00:00:20,000
The HTML we covered in class does not have variables.

10
00:00:20,000 --> 00:00:22,000
So they don't change over time.

11
00:00:22,000 --> 00:00:24,000
So I don't need an environment.

12
00:00:24,000 --> 00:00:27,000
To interpret the JavaScript we covered in class, we need an environment.

13
00:00:27,000 --> 00:00:29,000
Totally. JavaScript does have variables.

14
00:00:29,000 --> 00:00:32,000
And since they can change value we are going to need to keep track of them.

15
00:00:32,000 --> 00:00:35,000
Interpreting always produces a value or an error.

16
00:00:35,000 --> 00:00:37,000
This was a trick, or at least it was very tricky.

17
00:00:37,000 --> 00:00:41,000
When interpreting returns it either produces a value, like 5,

18
00:00:41,000 --> 00:00:44,000
or an error, like type error--

19
00:00:44,000 --> 00:00:46,000
you tried to add it into a string.

20
00:00:46,000 --> 00:00:48,000
But interpreting does not always return.

21
00:00:48,000 --> 00:00:50,000
It can loop forever.

22
00:00:50,000 --> 00:00:54,000
If I write a program while true do x becomes x + 1,

23
00:00:54,000 --> 00:00:56,000
that never returns with a value,

24
00:00:56,000 --> 00:00:58,000
and it may never raise an error.

25
00:00:58,000 --> 99:59:59,999
This is also known as The Halting Problem.
