1
00:00:00,340 --> 00:00:02,860
So far we've seen how to examine a variables

2
00:00:02,860 --> 00:00:06,720
distribution using histograms, and how to check our hunches

3
00:00:06,720 --> 00:00:10,430
with visualizations and numerical summaries. But there's another type

4
00:00:10,430 --> 00:00:13,530
of plot that lets us compare distributions, and it's called

5
00:00:13,530 --> 00:00:17,490
the frequency polygon. Frequency polygons are similar to histograms,

6
00:00:17,490 --> 00:00:19,610
but they draw a curve connecting the counts in

7
00:00:19,610 --> 00:00:22,130
a histogram. So this allows us to see the

8
00:00:22,130 --> 00:00:25,590
shape and the peaks of our distribution in more detail.

9
00:00:25,590 --> 00:00:27,630
You might remember from before that we were looking at

10
00:00:27,630 --> 00:00:31,570
friend count using this code. This code gives a histogram of

11
00:00:31,570 --> 00:00:35,300
our user's friend counts, and then we added a facet wrap

12
00:00:35,300 --> 00:00:37,970
and broke it out by gender. Remember we were trying to

13
00:00:37,970 --> 00:00:41,070
answer the question, who on average has more friends, men or

14
00:00:41,070 --> 00:00:44,120
women. We said we couldn't tell based on this histogram, so

15
00:00:44,120 --> 00:00:47,915
we ran some numerical summaries instead. And instead of having these

16
00:00:47,915 --> 00:00:51,040
2 histograms side by side, we can actually use a frequency

17
00:00:51,040 --> 00:00:54,910
polygon and overlay these histograms together. Here's how we can

18
00:00:54,910 --> 00:00:58,430
create that frequency polygon. I'll copy and paste the same code,

19
00:00:58,430 --> 00:01:01,550
except I need to make an addition. By default q plot's

20
00:01:01,550 --> 00:01:04,000
going to create a histogram when I pass it just one single

21
00:01:04,000 --> 00:01:06,000
variable. So I need to tell it to create a frequency

22
00:01:06,000 --> 00:01:09,220
polygon instead. I can use the geom parameter to do that.

23
00:01:10,220 --> 00:01:13,120
Here, I'll pass it frequency polygon, so that way we create

24
00:01:13,120 --> 00:01:16,370
a different type of plot, and I won't need this facet

25
00:01:16,370 --> 00:01:19,160
wrap by gender anymore. To get the distributions of each

26
00:01:19,160 --> 00:01:21,950
gender on the plot, I'm going to pass the parameter color

27
00:01:21,950 --> 00:01:24,770
to q plot and set it equal to gender. So

28
00:01:24,770 --> 00:01:28,380
here's my color parameter, and now I'm going to pass it gender.

29
00:01:28,380 --> 00:01:30,655
When I run this code, I get one plot with

30
00:01:30,655 --> 00:01:34,890
2 frequency polygons one for males and one for females. And

31
00:01:34,890 --> 00:01:37,790
notice how gender has been assigned a color, so color

32
00:01:37,790 --> 00:01:41,380
is indicating which frequency polygon I'm on. And this is what

33
00:01:41,380 --> 00:01:44,315
the frequency polygon is really good for. We can compare

34
00:01:44,315 --> 00:01:48,790
2 or more distributions at once, but again, this plot

35
00:01:48,790 --> 00:01:51,260
doesn't really answer our question who has more friends on

36
00:01:51,260 --> 00:01:54,440
average men or women. Let's change the y-axis to show

37
00:01:54,440 --> 00:01:58,100
proportions instead of raw counts. This is going to involve

38
00:01:58,100 --> 00:02:00,500
some funky syntax, so I want to explain it. To

39
00:02:00,500 --> 00:02:03,340
change this count variable, we're going to pass in y

40
00:02:03,340 --> 00:02:06,580
to our q-plot function. I'm going to assign the parameter y

41
00:02:06,580 --> 00:02:10,130
this expression. This allows me to get proportions instead of the

42
00:02:10,130 --> 00:02:13,500
actual raw counts on the y-axis. And I'm just move this

43
00:02:13,500 --> 00:02:16,250
around so that way my code looks a little bit cleaner.

44
00:02:16,250 --> 00:02:19,110
And finally, let me change the labels to more accurately explain the

45
00:02:19,110 --> 00:02:21,890
plot. Alright, it looks like I have everything. Let's run this

46
00:02:21,890 --> 00:02:25,450
code and see the differences. Zooming in on the plot, we can

47
00:02:25,450 --> 00:02:28,270
see that we've changed the y-axis scale, and we have our

48
00:02:28,270 --> 00:02:31,820
labels appearing here and here. And while it may appear that males

49
00:02:31,820 --> 00:02:34,630
have higher friend counts on average than women, we can

50
00:02:34,630 --> 00:02:37,570
see that many males or a high percentage of them have

51
00:02:37,570 --> 00:02:40,770
low friend counts. It's probably in this tail region of the

52
00:02:40,770 --> 00:02:44,750
graph where females overtake males. I encourage you to play around

53
00:02:44,750 --> 00:02:47,810
with this yourself in R Studio to see where women overtake

54
00:02:47,810 --> 00:02:51,080
men in this side of the x-axis. Try using limits or

55
00:02:51,080 --> 00:02:54,900
try using breaks to explore more. We've learned some new syntax

56
00:02:54,900 --> 00:02:57,270
here, so let's see if you can put it into practice.

57
00:02:57,270 --> 00:03:00,050
Your task is to determine which gender creates more

58
00:03:00,050 --> 00:03:02,180
likes on the world wide web. To answer that

59
00:03:02,180 --> 00:03:04,770
question, I want you to create a frequency polygon

60
00:03:04,770 --> 00:03:07,340
and explore it in many different ways. Remember that

61
00:03:07,340 --> 00:03:08,960
the first plot that you make doesn't need to

62
00:03:08,960 --> 00:03:11,040
be final. I want you to create a couple

63
00:03:11,040 --> 00:03:13,460
of plots and make adjustments to the limits and

64
00:03:13,460 --> 00:03:15,780
the breaks on the x axis until you're satisfied.
