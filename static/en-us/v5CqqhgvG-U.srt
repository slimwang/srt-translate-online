1
00:00:00,590 --> 00:00:05,139
One thing to notice is that by
using document.queryselector or

2
00:00:05,139 --> 00:00:08,943
document.getelementbyID, we
get a dom node back.

3
00:00:08,943 --> 00:00:10,780
There's the dom node.

4
00:00:10,780 --> 00:00:13,780
And here we can see the same thing
by saving the footer element

5
00:00:13,780 --> 00:00:15,490
by grabbing its ID.

6
00:00:15,490 --> 00:00:19,250
Now, wouldn't it be much better
if we got a D3 object back, so

7
00:00:19,250 --> 00:00:23,050
that way we can use other
D3 methods on this element?

8
00:00:23,050 --> 00:00:26,330
If we tried using a D3 method,
like the append method,

9
00:00:26,330 --> 00:00:28,750
which adds elements to
an existing element,

10
00:00:28,750 --> 00:00:31,570
then we'll get an error in the console
saying that the method is not defined.

11
00:00:32,750 --> 00:00:37,580
This is because the variable elem
does not contain a D3 selection, and

12
00:00:37,580 --> 00:00:40,110
it doesn't have the method
append available.

13
00:00:40,110 --> 00:00:42,480
It's really just a plain dom node.

14
00:00:42,480 --> 00:00:47,160
You can inspect the methods available by
typing in a dot after the variable name.

15
00:00:47,160 --> 00:00:51,750
So, for element variable, these are the
different methods that are available.

16
00:00:53,140 --> 00:00:57,050
In order to be able to use the full
power of the D3 chainable API,

17
00:00:57,050 --> 00:00:59,550
we need to create a D3 selection.

18
00:00:59,550 --> 00:01:02,540
I'll explain more about the chainable
nature of the API, but for

19
00:01:02,540 --> 00:01:04,810
now let's just focus on
these D3 selections.

20
00:01:06,050 --> 00:01:07,730
Looking at the documentation,

21
00:01:07,730 --> 00:01:12,060
I want to find a method to select
different elements on the web page.

22
00:01:12,060 --> 00:01:16,180
It looks like this method,
select or select all, will do.

23
00:01:16,180 --> 00:01:18,790
Let's read more about it.

24
00:01:18,790 --> 00:01:22,994
The D3 select function looks very
similar to document dot query selector

25
00:01:22,994 --> 00:01:24,453
which you saw earlier,

26
00:01:24,453 --> 00:01:29,770
and it works in the same exact
way by using CSS selector syntax.

27
00:01:29,770 --> 00:01:35,430
Notice, however, that the method returns
an array, rather than a single dom node.

28
00:01:35,430 --> 00:01:40,060
In fact, the select method only
returns the very first dom node

29
00:01:40,060 --> 00:01:41,920
that matches the selector syntax.

30
00:01:42,930 --> 00:01:45,220
And if no elements, or no dom nodes,

31
00:01:45,220 --> 00:01:49,490
match the selector syntax,
then an empty array is returned.

32
00:01:49,490 --> 00:01:53,540
So let's grab our element again
using the .main class and

33
00:01:53,540 --> 00:01:55,530
see if this method's available.

34
00:01:55,530 --> 00:01:58,900
Notice now that the append
method is now available,

35
00:01:58,900 --> 00:02:04,630
because the variable holds a D3 object
rather than just a DOM node as before.

36
00:02:04,630 --> 00:02:08,639
Also notice that we get an array which
is returned, rather than a DOM node.

37
00:02:08,639 --> 00:02:10,949
This is the selection in D3.

38
00:02:10,949 --> 00:02:14,070
Now, we have some of the similar
attributes as a plain DOM node.

39
00:02:14,070 --> 00:02:17,120
But, there's a little bit extra
because this is a D3 object.
