1
00:00:00,000 --> 00:00:06,000
Here we are again, we have a mystery test function and what is it actually in here that causes the input?

2
00:00:06,000 --> 00:00:12,000
What is it that causes mystery test to fail? Well, we can again use delta debugging to figure this out.

3
00:00:12,000 --> 00:00:15,000
These are implementation of delta debugging.

4
00:00:15,000 --> 00:00:19,000
I'm going to extend this such that the test now comes as a parameter.

5
00:00:19,000 --> 00:00:23,000
And then, we can invert ddmin with an appropriate test just as we'd like.

6
00:00:23,000 --> 00:00:27,000
And I'm going to invert the ddmin with this input for which you already know

7
00:00:27,000 --> 00:00:31,000
that it causes mystery test to fail and then passing mystery test as a parameter.

8
00:00:31,000 --> 00:00:37,000
Let's see what's in here that causes mystery test to fail.

9
00:00:37,000 --> 00:00:44,000
Press 1, we press 1 and we see a single character, a single dot suffices.

10
00:00:44,000 --> 00:00:50,000
A single dot suffices to cause mystery test to fail. So what we have here is classical set.

11
00:00:50,000 --> 00:00:54,000
First, we use a fuzz tester to test a program and then we repeat

12
00:00:54,000 --> 00:00:57,000
and repeat this until the program breaks.

13
00:00:57,000 --> 00:01:02,000
Then we feed this into delta debugging which again runs the program again and again

14
00:01:02,000 --> 00:01:07,000
until we get a minimal failing input such as a single dot.

15
00:01:07,000 --> 00:01:14,000
Such minimal failing inputs are very important as it comes to convincing other people to fix a bug.

16
00:01:14,000 --> 00:01:18,000
Suppose your program for testing is a huge SQL server.

17
00:01:18,000 --> 00:01:22,000
Suppose you use a first tester to generate extremely long

18
00:01:22,000 --> 00:01:26,000
and complex SQL query that you sent to the SQL server.

19
00:01:26,000 --> 00:01:30,000
And then, the SQL server is going to choke on one of these super, super complex inputs

20
00:01:30,000 --> 00:01:35,000
and then you say to the SQL developers, "Hey, I have this very, very long and complicated

21
00:01:35,000 --> 00:01:40,000
SQL query and I can use this to break the server," but the developers are going to tell you,

22
00:01:40,000 --> 00:01:45,000
"Ha, a big query like this one, never ever happens in practice".

23
00:01:45,000 --> 00:01:51,000
So maybe this will crash our server but it's really not the top priority right now.

24
00:01:51,000 --> 00:01:55,000
We'd rather care about real queries, thank you very much.

25
00:01:55,000 --> 00:02:00,000
So what you'd do then is you run this big, big complicated query to delta debugging

26
00:02:00,000 --> 00:02:03,000
which then will give you some minimal failing input.

27
00:02:03,000 --> 00:02:06,000
which now will be way, way smaller and actually look

28
00:02:06,000 --> 00:02:10,000
like something so simple that it can actually happen in practice.

29
00:02:10,000 --> 00:02:16,000
And all of a sudden, the SQL developers will take you very seriously because all of a sudden

30
00:02:16,000 --> 00:02:18,000
this looks like something that could happen in practice.

31
00:02:18,000 --> 00:02:20,000
True story from Microsoft.
