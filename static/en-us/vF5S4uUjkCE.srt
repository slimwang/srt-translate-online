1
00:00:00,390 --> 00:00:03,500
The first expression doesn't make any difference.

2
00:00:03,500 --> 00:00:07,080
A and b contain only positive integers.

3
00:00:07,080 --> 00:00:10,460
So this will give us the same incorrect result as before.

4
00:00:10,460 --> 00:00:13,020
The second expression is interesting.

5
00:00:13,020 --> 00:00:17,700
A minus b would give correct difference values where a is greater than b.

6
00:00:17,700 --> 00:00:20,730
And zero, where b is greater than a.

7
00:00:20,730 --> 00:00:25,350
Similarly, b minus a will give you correct difference values where b

8
00:00:25,350 --> 00:00:29,650
is greater than a, and zero where a is greater than b.

9
00:00:29,650 --> 00:00:34,120
Hence, there's sum is in fact the absolute difference that we want.

10
00:00:34,120 --> 00:00:35,950
Converting the images to uint16.

11
00:00:37,050 --> 00:00:41,010
Does increase the range of values that they can store.

12
00:00:41,010 --> 00:00:46,370
But remember that u signifies unsigned, which means uint16 cannot

13
00:00:46,370 --> 00:00:51,020
represent negative numbers, and we'll end up getting the same result.

14
00:00:51,020 --> 00:00:54,860
Floating point images can inherently store negative values.

15
00:00:54,860 --> 00:00:57,320
Hence, converting to floating point would help.

16
00:00:58,320 --> 00:01:01,860
Fortunately, there is a built in function to compute image difference that

17
00:01:01,860 --> 00:01:03,820
preserves values.

18
00:01:03,820 --> 00:01:08,890
We don't have to explicitly convert the data type or use any funky expressions.

19
00:01:08,890 --> 00:01:13,170
This function is contained in the image package in Octave or

20
00:01:13,170 --> 00:01:15,190
image processing toolkit in Matlab.

21
00:01:16,230 --> 00:01:22,740
You can load a package by typing pkg load followed by the package name.

22
00:01:22,740 --> 00:01:25,690
The function we want is called imabsdiff.

23
00:01:25,690 --> 00:01:27,220
It takes two parameters.

24
00:01:27,220 --> 00:01:29,040
The images to be subtracted.

25
00:01:29,040 --> 00:01:31,050
And the order doesn't matter.

26
00:01:31,050 --> 00:01:33,120
Let's see how this compares with our previous attempt.

27
00:01:34,430 --> 00:01:35,490
As you can see,

28
00:01:35,490 --> 00:01:39,680
this preserves the magnitude of image difference throughout the image.

29
00:01:39,680 --> 00:01:44,030
The image package provides many more functions to carry out common operations.

30
00:01:44,030 --> 00:01:45,210
Feel free to explore them.
