1
00:00:00,000 --> 00:00:05,000
[Evans] The key point is that this was for weak collision resistance.

2
00:00:05,000 --> 00:00:08,000
For weak collision resistance, our assumption,

3
00:00:08,000 --> 00:00:13,000
an attacker needs to do about 2 to the b work where b is the number of hash bits

4
00:00:13,000 --> 00:00:15,000
to have a good chance of finding a collision.

5
00:00:15,000 --> 00:00:18,000
Strong collision resistance is harder than weak.

6
00:00:18,000 --> 00:00:21,000
To obtain strong collision resistance is actually much harder,

7
00:00:21,000 --> 00:00:24,000
and we'll see that we need about twice as many bits for that--

8
00:00:24,000 --> 00:00:28,000
that the attacker's effort is more like 2 to the b over 2,

9
00:00:28,000 --> 00:00:33,000
so we'll need about twice as many output bits in our hash function to provide this.

10
00:00:33,000 --> 00:00:37,000
The reason for this is because of what's known as the birthday paradox.

11
00:00:37,000 --> 00:00:40,000
It's called a paradox. It's not really a paradox.

12
00:00:40,000 --> 00:00:44,000
It's a surprise to people who don't follow the mathematics on this,

13
00:00:44,000 --> 00:00:46,000
but there's nothing paradoxical about it.

14
00:00:46,000 --> 00:00:49,000
It's not like the Berry paradox that leads to a contradiction.

15
00:00:49,000 --> 00:00:53,000
The way this is usually framed is you have some group of k people--

16
00:00:53,000 --> 00:00:56,000
let's say it's a kindergarten classroom--

17
00:00:56,000 --> 00:01:01,000
and you want to know what the probability that 2 people have the same birthday.

18
00:01:01,000 --> 00:01:05,000
The reason this is called a paradox is the answer is actually much higher

19
00:01:05,000 --> 00:01:09,000
than most people expect. So let's compute this.

20
00:01:09,000 --> 00:01:13,000
We'll assume that there are no leap years and that birthdays are uniformly distributed.

21
00:01:13,000 --> 00:01:17,000
We assume the same property for our outputs of our ideal hash function.

22
00:01:17,000 --> 00:01:22,000
So we'll compute the complement probability that there are no duplicates,

23
00:01:22,000 --> 00:01:26,000
and then the probability that there is at least 1 duplicate is 1 minus this.

24
00:01:26,000 --> 00:01:30,000
And the way to think about that is we can go through the people in the class.

25
00:01:30,000 --> 00:01:32,000
We can assign some birthday to each one.

26
00:01:32,000 --> 00:01:37,000
So we'll assign b0 to the first one, b1 to the second one,

27
00:01:37,000 --> 00:01:39,000
keep assigning birthdays.

28
00:01:39,000 --> 00:01:41,000
There are lots of different ways we could do that.

29
00:01:41,000 --> 00:01:44,000
In order to assign birthdays with no duplicates,

30
00:01:44,000 --> 00:01:48,000
then there's a limited number of ways that we can pick any of 365 days

31
00:01:48,000 --> 00:01:50,000
for the first birthday.

32
00:01:50,000 --> 00:01:53,000
For the second one, if we want no duplicates,

33
00:01:53,000 --> 00:01:56,000
we can't use whatever day we pick for the first one.

34
00:01:56,000 --> 00:02:01,000
So it will be that times 364 times 363 and so forth,

35
00:02:01,000 --> 00:02:05,000
and that's the number of ways to assign birthdays with no duplication.

36
00:02:05,000 --> 00:02:08,000
We're trying to compute the probability, so we're going to divide that

37
00:02:08,000 --> 00:02:12,000
by the number of ways to assign with duplication,

38
00:02:12,000 --> 00:02:17,000
which is just 365 choices for each person.

39
00:02:17,000 --> 00:02:24,000
So in general, this first value is n factorial divided by n minus k factorial,

40
00:02:24,000 --> 00:02:27,000
and the bottom result is just n to the k.

41
00:02:27,000 --> 00:02:30,000
N is the number of possible days or the number of possible hash outputs.

42
00:02:30,000 --> 00:02:32,000
K is the number of trials.

43
00:02:32,000 --> 00:02:37,000
And so our probability that there are duplicates is just 1 minus this.

44
00:02:37,000 --> 00:02:40,000
This is what we need for strong collision resistance.

45
00:02:40,000 --> 00:02:44,000
It's higher than what we needed for weak collision resistance,

46
00:02:44,000 --> 00:02:48,000
which was 1 minus 1 minus 1 over n to the k.

47
00:02:48,000 --> 00:02:51,000
So to actually compute this, these numbers would get really big

48
00:02:51,000 --> 00:02:53,000
if we tried to actually compute the factorials.

49
00:02:53,000 --> 00:02:57,000
Instead we need to use approximations to do this.

50
00:02:57,000 --> 00:02:59,000
But to give you some idea what the results are like,

51
00:02:59,000 --> 00:03:05,000
if we have the duplicate birthday question where we have 365 days and 20 people,

52
00:03:05,000 --> 00:03:09,000
the probability that there's at least 1 duplicate exceeds 0.4.

53
00:03:09,000 --> 00:03:15,000
If we're thinking about hash collisions, if we only had a 64-bit hash

54
00:03:15,000 --> 00:03:19,000
and our attacker was much weaker than the one we hypothesized--

55
00:03:19,000 --> 00:03:25,000
let's say they can only do 2 to the 32--that's already almost a 40% chance of success.

56
00:03:25,000 --> 00:03:27,000
This success goes up quite quickly.

57
00:03:27,000 --> 00:03:35,000
If the attacker can do 2 to the 34 hashes, then the success probability is very close to 1.

58
00:03:35,000 --> 00:03:37,000
So the conclusion is that given an ideal hash function

59
00:03:37,000 --> 00:03:43,000
with N possible outputs, an attacker needs about N guesses to find an input

60
00:03:43,000 --> 00:03:48,000
that hashes to a particular value but only needs about the square root of N guesses

61
00:03:48,000 --> 00:03:50,000
to find a pair that collide.

62
00:03:50,000 --> 00:03:55,000
This assumes the attacker can store all those hash values as they try the guesses

63
00:03:55,000 --> 00:03:59,000
and compare it to all the previous ones.

64
00:03:59,000 --> 00:04:04,000
This is the reason why hash functions need to have large outputs.

65
00:04:04,000 --> 00:04:10,000
SHA-1, which was a widely used hash function, used 160 bits in its output.

66
00:04:10,000 --> 00:04:12,000
This was actually broken.

67
00:04:12,000 --> 00:04:17,000
There is a way to find collisions using SHA-1 with only 2 to the 51 operations--

68
00:04:17,000 --> 00:04:22,000
much fewer than the 2 to the 80 that one would expect from this square root estimate,

69
00:04:22,000 --> 00:04:27,000
and that's because of mathematical weaknesses in the way SHA-1 works.

70
00:04:27,000 --> 00:04:33,000
SHA-2, the output can be either 256 or 512 bits.

71
00:04:33,000 --> 00:04:37,000
As long as there aren't mathematical weaknesses in the cipher,

72
00:04:37,000 --> 00:04:43,000
if it was a really ideal hash function, this would be big enough to defeat any realistic attacker,

73
00:04:43,000 --> 00:04:48,000
but there are beginning to be suggestions that there may be ways to break this.

74
00:04:48,000 --> 00:04:50,000
No practical breaks have been found yet.

75
00:04:50,000 --> 00:04:54,000
And SHA-3, the winner is expected to be announced later this year.

76
00:04:54,000 --> 00:04:58,000
So for the rest of this class we're going to assume that we do have an ideal hash function

77
00:04:58,000 --> 00:05:03,000
and that it has enough outputs to provide strong collision resistance

78
00:05:03,000 --> 99:59:59,999
against a motivated attacker.
