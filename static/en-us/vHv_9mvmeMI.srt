1
00:00:00,280 --> 00:00:02,170
You may notice that these rules for

2
00:00:02,170 --> 00:00:06,290
user friends look similar to the rules
that we wrote for the users themselves.

3
00:00:06,290 --> 00:00:09,700
I could essentially copy
the user validation rules for

4
00:00:09,700 --> 00:00:14,660
a user objects stored here and paste
them for the user validation rules for

5
00:00:14,660 --> 00:00:17,840
user objects stored in the user's node.

6
00:00:17,840 --> 00:00:21,570
But copying and pasting this user
structure throughout my rules

7
00:00:21,570 --> 00:00:24,950
kind of makes me cringe a bit and
it also makes the rules a lot harder to

8
00:00:24,950 --> 00:00:27,580
maintain when I want
to change one thing.

9
00:00:27,580 --> 00:00:31,830
So I did a little bit of research
on how to simplify my rules, and

10
00:00:31,830 --> 00:00:35,920
on the Firebase and rule security page,
they suggest the Bolt compiler.

11
00:00:37,130 --> 00:00:41,440
The Bolt compiler is a officially
supported high-level modeling and

12
00:00:41,440 --> 00:00:45,170
security language that compiles
to Firebase JSON rules.

13
00:00:45,170 --> 00:00:48,030
And Bolt's pretty cool because it
allows you to abstract out some of

14
00:00:48,030 --> 00:00:51,250
this repetitive validation code,
among other features.

15
00:00:51,250 --> 00:00:53,380
Now, before you dive into
the Bolt quick start,

16
00:00:53,380 --> 00:00:56,080
it should be noted that using
Bolt is completely optional.

17
00:00:56,080 --> 00:00:59,850
Also, you should have a firm grasp of
the rules language itself before diving

18
00:00:59,850 --> 00:01:01,150
too far into Bolt.

19
00:01:01,150 --> 00:01:04,060
The compiler is self described
as a bit experimental.

20
00:01:04,060 --> 00:01:07,550
Meaning that it is relatively young and
actively being worked on.

21
00:01:07,550 --> 00:01:10,710
So there are still a few kinks and
things might change.

22
00:01:10,710 --> 00:01:11,700
With those caveats.

23
00:01:11,700 --> 00:01:14,420
Let's take a look at how you'd write
the rules that you just wrote.

24
00:01:14,420 --> 00:01:15,600
But using bolt.

25
00:01:15,600 --> 00:01:18,120
To start, you'll need to set up.

26
00:01:18,120 --> 00:01:21,590
Now if everything goes smoothly,
this should only take a few minutes.

27
00:01:21,590 --> 00:01:24,160
And involves first downloading npm.

28
00:01:24,160 --> 00:01:28,310
Npm stands for a node package manager
and is a JavaScript package manager.

29
00:01:28,310 --> 00:01:31,070
Bolt is written in JavaScript,
hence the need for npm.

30
00:01:31,070 --> 00:01:33,900
Once you have npm you can install Bolt.

31
00:01:33,900 --> 00:01:36,530
I've provided the instructions
in the instructor notes, so

32
00:01:36,530 --> 00:01:39,190
take a moment now and install Bolt.

33
00:01:39,190 --> 00:01:42,850
Once you have Bolt installed,
you can write a rules dot Bolt file.

34
00:01:42,850 --> 00:01:45,640
Ended the directory with
your rules stop.bolt file,

35
00:01:45,640 --> 00:01:47,840
you could then read
the following in a terminal.

36
00:01:47,840 --> 00:01:51,120
This will convert the bolt
file into a JSON rules file

37
00:01:51,120 --> 00:01:54,050
which you can then copy over
manually into fire base.

38
00:01:54,050 --> 00:01:57,030
So let's see the bolt file for
user friends might look like.

39
00:01:57,030 --> 00:01:59,350
Remember the bolt is
a modeling language.

40
00:01:59,350 --> 00:02:03,490
This means that it allows you to write
typed models for your fire base object

41
00:02:03,490 --> 00:02:06,260
and then it generates all
the necessary validation code.

42
00:02:06,260 --> 00:02:11,240
We have a user type, a timestamp
type and an encoded email type.

43
00:02:11,240 --> 00:02:14,550
This allows you to abstract out
all the qualities of a user or

44
00:02:14,550 --> 00:02:15,884
a timestamp into one place.

45
00:02:17,195 --> 00:02:19,695
These objects here can
contain property keys and

46
00:02:19,695 --> 00:02:21,935
you can specify the type of
each of these properties.

47
00:02:22,985 --> 00:02:25,725
This EncodedEmail type extends a string

48
00:02:25,725 --> 00:02:29,585
which means that everything that's
an encoded email will also be a string.

49
00:02:29,585 --> 00:02:32,905
But there's an additional validation
that the string has to have the format

50
00:02:32,905 --> 00:02:34,155
of an email address.

51
00:02:34,155 --> 00:02:36,735
And we can see up here
that this property email

52
00:02:36,735 --> 00:02:39,240
is using this type EncodedEmail.

53
00:02:39,240 --> 00:02:40,640
Now this is all well and good.

54
00:02:40,640 --> 00:02:42,530
But it isn't saying where in our rules.

55
00:02:42,530 --> 00:02:43,890
To use these types.

56
00:02:43,890 --> 00:02:47,160
To do that you have to use
something that both calls paths.

57
00:02:47,160 --> 00:02:50,500
Now instead of forcing you to write
out the nested JSON structure.

58
00:02:50,500 --> 00:02:53,870
You right paths and
then specify the rules within the path.

59
00:02:53,870 --> 00:02:55,340
You could also say the value.

60
00:02:55,340 --> 00:02:57,820
At the location that is
referenced by the path.

61
00:02:57,820 --> 00:03:02,510
Is of one of the types that you defined
above using is the type that it is.

62
00:03:02,510 --> 00:03:06,930
So here we're specifying that whatever
is stored at the path userFriends,

63
00:03:06,930 --> 00:03:11,050
userEncodedEmail, friendEncodedEmail
is a user object.

64
00:03:11,050 --> 00:03:14,390
And then in turn,
we say what's stored at users and

65
00:03:14,390 --> 00:03:17,340
then userEncodedEmail
is also a user object.

66
00:03:18,410 --> 00:03:22,160
So the validation for these two things
is going to look exactly the same.

67
00:03:22,160 --> 00:03:24,880
And then once you've got your
bolt file you can save it, and

68
00:03:24,880 --> 00:03:27,010
then run this command
that I showed you before.

69
00:03:27,010 --> 00:03:29,320
Which then in turn
generates a json file,

70
00:03:29,320 --> 00:03:33,710
which should look pretty darn similar
to the json file that we just made.

71
00:03:33,710 --> 00:03:36,660
And that was with very minimal,
to no, Copy and Paste.
