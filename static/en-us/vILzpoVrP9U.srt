1
00:00:00,420 --> 00:00:04,890
So let's look at the solution to
our load link store conditional

2
00:00:04,890 --> 00:00:07,190
lock implementation quiz.

3
00:00:07,190 --> 00:00:10,080
This is what this code is trying to do.

4
00:00:10,080 --> 00:00:15,120
It's putting one in R1 and
then it's loading the current value of

5
00:00:15,120 --> 00:00:20,084
the lockvar into R2 and then trying
to put a one into the lockvar.

6
00:00:20,084 --> 00:00:24,892
All of these choices are repeating
the try to require the lock

7
00:00:24,892 --> 00:00:26,877
under some conditions.

8
00:00:26,877 --> 00:00:32,080
So the question is what are the correct
conditions for retrying the lock?

9
00:00:33,100 --> 00:00:35,640
Well, there are two conditions
that need to be checked.

10
00:00:36,700 --> 00:00:40,543
One is did we actually
see a lock that was free?

11
00:00:40,543 --> 00:00:43,060
The lock is free when we read a zero.

12
00:00:44,520 --> 00:00:47,150
In that case, we don't go back.

13
00:00:47,150 --> 00:00:50,650
We actually saw a lock that was free.

14
00:00:50,650 --> 00:00:53,340
If the lock was busy, we go back.

15
00:00:53,340 --> 00:00:59,110
So if R2 is zero, then we actually
don't go back to try lock.

16
00:00:59,110 --> 00:01:03,600
That means that we are actually
acquiring the lock successfully so far.

17
00:01:03,600 --> 00:01:06,750
So this is definitely
not a correct solution.

18
00:01:06,750 --> 00:01:09,584
We need to check R2 for not equal zero.

19
00:01:09,584 --> 00:01:12,252
Meaning, we found a nonzero value here.

20
00:01:12,252 --> 00:01:15,100
That means that the lock was busy and
we retry.

21
00:01:15,100 --> 00:01:18,390
So one of these three are going
to be the correct answer,

22
00:01:18,390 --> 00:01:23,130
because they include the correct check
for whether the lock was available.

23
00:01:23,130 --> 00:01:27,974
The second thing that we need to check
is if we found the lock available,

24
00:01:27,974 --> 00:01:30,418
which means we are past this point.

25
00:01:30,418 --> 00:01:31,461
We need to check,

26
00:01:31,461 --> 00:01:36,540
whether we successfully stored R1
without somebody else beating us to it.

27
00:01:36,540 --> 00:01:40,060
We successfully store R1,

28
00:01:40,060 --> 00:01:44,390
if R1 after the store
conditional has a value of one.

29
00:01:44,390 --> 00:01:50,501
So we fail to store R1 successfully
if R1 is equal to zero.

30
00:01:50,501 --> 00:01:55,570
That means that this is
really the correct solution.

31
00:01:55,570 --> 00:01:59,714
Note that these two are checking
the link register directly and

32
00:01:59,714 --> 00:02:03,168
we said that the link registry
is a hidden register.

33
00:02:03,168 --> 00:02:06,553
It can really only be accessed
implicitly through load-link and

34
00:02:06,553 --> 00:02:08,889
store-conditional instructions.

35
00:02:08,889 --> 00:02:13,066
There is no instruction that can
directly read the link registers, so

36
00:02:13,066 --> 00:02:15,918
that's why these two
are not correct choices.

37
00:02:15,918 --> 00:02:17,668
So in this lock function,

38
00:02:17,668 --> 00:02:22,761
basically what we are doing is if we saw
the lock that was free and we managed to

39
00:02:22,761 --> 00:02:27,795
store R1 into it without anybody
interfering, then we acquire the lock.

40
00:02:29,325 --> 00:02:32,365
If we saw the lock was busy,
we try again.

41
00:02:32,365 --> 00:02:36,675
If the lock was free, but somebody beat
us to it, then again, we try again.
