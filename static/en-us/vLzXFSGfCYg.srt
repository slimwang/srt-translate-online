1
00:00:00,470 --> 00:00:02,969
The alpha beta model is messy,

2
00:00:02,969 --> 00:00:05,970
especially if you compare it to
the dynamic multi-threading model,

3
00:00:05,970 --> 00:00:08,960
which you might use on a shared
memory multi course setting.

4
00:00:08,960 --> 00:00:12,440
But, the basic argument for message
passing is that you need to get your

5
00:00:12,440 --> 00:00:15,870
hands dirty if you want to be
efficient at large scales.

6
00:00:15,870 --> 00:00:18,160
And that's the big idea of this lesson.

7
00:00:18,160 --> 00:00:19,780
How to think about efficiency,

8
00:00:19,780 --> 00:00:22,590
specifically in terms of
computation versus communication.

9
00:00:23,720 --> 00:00:27,710
Now, the message passing model also
has at least one major weakness.

10
00:00:27,710 --> 00:00:32,130
It forces you to think about
a lot of thinks like who and

11
00:00:32,130 --> 00:00:34,550
how many processes there are, when and

12
00:00:34,550 --> 00:00:38,299
how those processes communicate, as well
as how are the processes are connected.

13
00:00:39,600 --> 00:00:42,830
So an interesting and
largely open research question is,

14
00:00:42,830 --> 00:00:46,570
are there efficient algorithms
that are network oblivious?

15
00:00:46,570 --> 00:00:49,260
That is, is there a framework for
writing and

16
00:00:49,260 --> 00:00:53,460
analyzing algorithms that will be
efficient independent of the network.

17
00:00:54,460 --> 00:00:55,951
I wonder.

18
00:00:55,951 --> 00:00:57,110
[SOUND]
