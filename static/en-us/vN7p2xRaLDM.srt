1
00:00:00,330 --> 00:00:02,380
Okay, so what do you think?

2
00:00:02,380 --> 00:00:08,070
>> I think the answer would be a and b and any of those four: c, d, e or f.

3
00:00:08,070 --> 00:00:10,160
>> Alright. So let's think about what would happen in that

4
00:00:10,160 --> 00:00:13,350
case. So, if we start off the centers there. The first

5
00:00:13,350 --> 00:00:16,320
step is going to be for every point to join whichever

6
00:00:16,320 --> 00:00:19,940
cluster it's closest to. So, a is just going to be with a.

7
00:00:19,940 --> 00:00:20,433
>> Mm-hm.

8
00:00:20,433 --> 00:00:22,580
>> B is just going to be with b. And then

9
00:00:22,580 --> 00:00:24,810
d is going to slurp up all these other four points.

10
00:00:24,810 --> 00:00:24,990
>> Right.

11
00:00:24,990 --> 00:00:26,050
>> All right.

12
00:00:26,050 --> 00:00:28,970
So now in the next iteration, it's going to recompute the centers. And a

13
00:00:28,970 --> 00:00:31,090
and b aren't going to change. This cluster,

14
00:00:31,090 --> 00:00:33,290
the center's going to change to here. And

15
00:00:33,290 --> 00:00:36,140
now it's never going to make any additional progress. So those are the three

16
00:00:36,140 --> 00:00:39,600
clusters it'll find if it starts off with those kind of bad initial points.

17
00:00:39,600 --> 00:00:42,630
>> So how would we go about avoiding that sort of thing?

18
00:00:43,980 --> 00:00:47,660
>> yes. I was going to ask you exactly that question. So, given

19
00:00:47,660 --> 00:00:48,790
that we're thinking about this as a

20
00:00:48,790 --> 00:00:51,810
hill climbing process, that's a local optimum.

21
00:00:51,810 --> 00:00:53,550
And we had a pretty good way of dealing

22
00:00:53,550 --> 00:00:57,020
with local optima and that was random restarts. That's

23
00:00:57,020 --> 00:00:59,530
one possibility. Another thing that people sometimes do is

24
00:00:59,530 --> 00:01:01,680
they'll do a quick analysis of the space and actually

25
00:01:01,680 --> 00:01:03,980
try to find initial cluster centers that kind of

26
00:01:03,980 --> 00:01:07,120
are spread out. So pick a cluster center and then

27
00:01:07,120 --> 00:01:08,660
pick the next cluster center to be as far

28
00:01:08,660 --> 00:01:11,070
away from all the other cluster centers as you can.

29
00:01:11,070 --> 00:01:13,650
>> So kind of do like the, I don't know, the convex

30
00:01:13,650 --> 00:01:17,530
hole of the space and try to pick points near the corners or

31
00:01:17,530 --> 00:01:18,220
something like that?

32
00:01:18,220 --> 00:01:19,789
>> Yes, yeah, that's right.

33
00:01:21,160 --> 00:01:24,270
>> Hm. So I think you've done another thing too, now

34
00:01:24,270 --> 00:01:27,710
that I say that out loud. Which is, you've been choosing

35
00:01:27,710 --> 00:01:30,770
these random places to start your centers as always being one

36
00:01:30,770 --> 00:01:32,960
of the points. I guess you didn't have to do that.

37
00:01:32,960 --> 00:01:33,270
>> Yes.

38
00:01:33,270 --> 00:01:35,470
>> But it probably helps that you do.

39
00:01:35,470 --> 00:01:39,480
>> It certainly keeps the centers near the points. Another thing you

40
00:01:39,480 --> 00:01:43,160
can do to get things started is just randomly assign everybody the clusters

41
00:01:43,160 --> 00:01:45,330
but that can often have the property that all of

42
00:01:45,330 --> 00:01:47,250
the senders of those clusters end up being kind of really

43
00:01:47,250 --> 00:01:49,640
close to each other. So, by picking points to be

44
00:01:49,640 --> 00:01:51,990
the clusters it does have a tendency to spread things out.

45
00:01:51,990 --> 00:01:52,990
>> Okay, that makes sense.

46
00:01:52,990 --> 00:01:54,275
>> That's not a proof, though.

47
00:01:54,275 --> 00:01:57,129
>> No, a proof by that makes sense. [LAUGH]
