1
00:00:00,200 --> 00:00:03,730
Hello world, it's Siraj and
welcome to intro to deep learning.

2
00:00:03,730 --> 00:00:07,140
In this first episode,
we'll predict an animal's body weight,

3
00:00:07,140 --> 00:00:08,830
given only the weight of its brain.

4
00:00:08,830 --> 00:00:10,600
This course will be four months long,
and

5
00:00:10,600 --> 00:00:12,438
it will all be released on my channel.

6
00:00:12,438 --> 00:00:15,355
I'll have a Live session
every Wednesday at 10 AM PST,

7
00:00:15,355 --> 00:00:18,015
that explains every
week's topic in depth.

8
00:00:18,015 --> 00:00:21,525
And I'm collaborating with Udacity
to offer a Nanodegree to those that

9
00:00:21,525 --> 00:00:23,395
successfully complete this course.

10
00:00:23,395 --> 00:00:26,470
This course is for anyone who wants to
learn how to harness the incredible

11
00:00:26,470 --> 00:00:30,000
power of neural networks and
become a deep learning engineer.

12
00:00:30,000 --> 00:00:33,160
You don't have to be an experienced
developer or a mathematician,

13
00:00:33,160 --> 00:00:37,270
the only prerequisite for this course is
knowing quantum mechanics, just kidding,

14
00:00:37,270 --> 00:00:39,060
only basic python syntax.

15
00:00:39,060 --> 00:00:40,780
We'll learn what we
need to along the way,

16
00:00:40,780 --> 00:00:43,240
by building an AI that
can do everything from

17
00:00:43,240 --> 00:00:47,550
predicting the price of Tesla stock,
to painting surrealist masterpieces.

18
00:00:47,550 --> 00:00:51,090
Traditionally, programming has been
about defining every single step for

19
00:00:51,090 --> 00:00:52,870
a program to reach an outcome.

20
00:00:52,870 --> 00:00:55,660
The machine learning flips that
approach, with machine learning

21
00:00:55,660 --> 00:00:59,460
we define the outcome and the program
learns the steps to get there.

22
00:00:59,460 --> 00:01:03,765
So, if I wanted to build an app that can
recognize California license plates.

23
00:01:03,765 --> 00:01:06,935
Instead of writing out code to
recognize the hundreds of different

24
00:01:06,935 --> 00:01:10,205
features of a license plate,
like the shape of certain letters and

25
00:01:10,205 --> 00:01:14,770
the colors, we just say, here's some
examples of a California license plate,

26
00:01:14,770 --> 00:01:17,200
learn the steps you need so
that you can recognize it.

27
00:01:17,200 --> 00:01:20,750
Or, if I wanted to make a bot that could
beat Super Mario, instead of writing

28
00:01:20,750 --> 00:01:24,710
code for every possible scenario, like
jump if you see a Koopa and it's running

29
00:01:24,710 --> 00:01:28,560
toward you, we'd say the goal is to
get to the end point without dying.

30
00:01:28,560 --> 00:01:30,170
Learn the steps to get there.

31
00:01:30,170 --> 00:01:33,860
And sometimes we don't even have an idea
of what steps could possibly be.

32
00:01:33,860 --> 00:01:34,750
Like if we're a bank and

33
00:01:34,750 --> 00:01:37,740
we suspect there's some kind of
fraudulent activity happening.

34
00:01:37,740 --> 00:01:40,110
But, we're not sure exactly
how to detect that, or

35
00:01:40,110 --> 00:01:41,690
even know what to look for.

36
00:01:41,690 --> 00:01:44,790
We can say,
here's a log of all user activity.

37
00:01:44,790 --> 00:01:46,720
Find the users that are unlike the rest,
and

38
00:01:46,720 --> 00:01:49,940
it'll learn the steps to detect
the anomalies by itself.

39
00:01:49,940 --> 00:01:52,160
Machine learning is already
everywhere on the Internet.

40
00:01:52,160 --> 00:01:54,790
Every major service uses it in some way.

41
00:01:54,790 --> 00:01:59,040
In fact, YouTube's using it right now to
decide which other videos you might like

42
00:01:59,040 --> 00:02:00,260
as you watch this.

43
00:02:00,260 --> 00:02:02,355
And it's uses will only grow over time.

44
00:02:02,355 --> 00:02:05,165
It'll be embedded in all of our
Internet-connected devices.

45
00:02:05,165 --> 00:02:08,824
Everything from fridges,
to cars, to personal assistants,

46
00:02:08,824 --> 00:02:11,044
will be learning and
adapting to our needs.

47
00:02:11,044 --> 00:02:15,105
And you know that rule that says you
need 10,000 hours to master any skill?

48
00:02:15,105 --> 00:02:18,465
Well, we'll just be able to offload
that training time to our machines and

49
00:02:18,465 --> 00:02:20,410
it'll give us super powers instantly.

50
00:02:20,410 --> 00:02:23,150
Anyone will be able to
compose a symphony.

51
00:02:23,150 --> 00:02:25,821
Alexa, I feel melancholy,
make me a piano piece for this.

52
00:02:25,821 --> 00:02:26,514
[MUSIC]

53
00:02:26,514 --> 00:02:27,610
And add a beat to it.

54
00:02:27,610 --> 00:02:28,990
[MUSIC]

55
00:02:28,990 --> 00:02:31,300
Anyone will be able to direct a movie.

56
00:02:31,300 --> 00:02:33,750
Ok Google, recreate Star Wars but
put me in it.

57
00:02:33,750 --> 00:02:34,960
&gt;&gt; I darker-ize most of my code now.

58
00:02:34,960 --> 00:02:36,630
&gt;&gt; Breaking my heart.

59
00:02:37,730 --> 00:02:38,550
&gt;&gt; Damn right.

60
00:02:38,550 --> 00:02:41,480
&gt;&gt; With machine learning,
if you can dream it, It can exist.

61
00:02:41,480 --> 00:02:44,610
And the field is currently
advancing very fast as researchers

62
00:02:44,610 --> 00:02:45,635
build on each other's work.

63
00:02:45,635 --> 00:02:47,540
[SOUND] My neural net sucks.

64
00:02:47,540 --> 00:02:48,826
Go deeper.

65
00:02:48,826 --> 00:02:50,330
Wow, I just achieved state of the art.

66
00:02:50,330 --> 00:02:51,616
[MUSIC]

67
00:02:51,616 --> 00:02:54,137
There are a lot of machine
running models out there, and

68
00:02:54,137 --> 00:02:56,305
one of them is called a neural network.

69
00:02:56,305 --> 00:02:58,815
When we use a neural network
that's not just one or two,

70
00:02:58,815 --> 00:03:03,135
but many layers deep to make a
prediction, we call that deep learning.

71
00:03:03,135 --> 00:03:05,705
It's a subset of machine
learning that has outperformed

72
00:03:05,705 --> 00:03:07,710
almost every other type of model.

73
00:03:07,710 --> 00:03:10,500
Almost every time on
a huge range of tasks.

74
00:03:10,500 --> 00:03:12,410
We'll dive into Deep Learning
more in next episode,

75
00:03:12,410 --> 00:03:15,660
but this video we'll just focus
on Machine Learning in general.

76
00:03:15,660 --> 00:03:18,380
We usually class learning
into three different styles.

77
00:03:18,380 --> 00:03:20,590
The first style is called
Supervised learning,

78
00:03:20,590 --> 00:03:23,520
it's where we give a model a labeled
data set like car pictures,

79
00:03:23,520 --> 00:03:26,230
so it gets feedback on what's
correct and what's not.

80
00:03:26,230 --> 00:03:29,120
You just have to learn the mapping
between the labels and the data, and

81
00:03:29,120 --> 00:03:33,080
then it can solve some given task, like
classifying the type of car in an image.

82
00:03:33,080 --> 00:03:34,670
It's all relatively straight-forward,
and

83
00:03:34,670 --> 00:03:36,640
we've gotten incredible results from it.

84
00:03:36,640 --> 00:03:39,590
The second learning style is
called unsupervised learning.

85
00:03:39,590 --> 00:03:42,380
This is when we give a model
a data set without labels.

86
00:03:42,380 --> 00:03:44,770
It gets no feedback on what's correct or
not.

87
00:03:44,770 --> 00:03:48,570
It has to learn by itself what
the structure of the data is

88
00:03:48,570 --> 00:03:50,110
to solve some given task.

89
00:03:50,110 --> 00:03:51,980
This is harder to do,
but more convenient,

90
00:03:51,980 --> 00:03:55,580
since not everyone has a perfectly
labeled data set sitting around.

91
00:03:55,580 --> 00:03:56,740
Most data is unlabeled.

92
00:03:56,740 --> 00:03:58,500
It's messy and complex.

93
00:03:58,500 --> 00:04:00,510
And the third type is
reinforcement learning.

94
00:04:00,510 --> 00:04:03,657
This is where a model isn't given
feedback right off the bat,

95
00:04:03,657 --> 00:04:05,664
it only gets it if it achieves its goal.

96
00:04:05,664 --> 00:04:08,797
So, if we're trying to create
a reinforcement learning bot that can

97
00:04:08,797 --> 00:04:10,201
learn to beat humans at chess,

98
00:04:10,201 --> 00:04:12,479
it would only receive
feedback if it won the game.

99
00:04:12,479 --> 00:04:15,607
Whereas in the supervised approach,
we get feedback every move, and

100
00:04:15,607 --> 00:04:19,540
in the unsupervised approach,
we'd never get feedback, even if it won.

101
00:04:19,540 --> 00:04:22,770
Unlike the other two learning styles,
reinforcement learning is linked

102
00:04:22,770 --> 00:04:26,820
to the idea of interacting with
an environment through trial and error.

103
00:04:26,820 --> 00:04:29,220
So I've got a data set of
measurements of different animals,

104
00:04:29,220 --> 00:04:32,610
and we want to predict an animal's
body weight given its brain weight.

105
00:04:32,610 --> 00:04:36,200
Since our data is labeled,
this will be a supervised approach, and

106
00:04:36,200 --> 00:04:39,760
the type of machine learning task
we'll perform is called regression.

107
00:04:39,760 --> 00:04:42,460
We'll write out a ten line
python script to do this, and

108
00:04:42,460 --> 00:04:44,180
I'll explain things as we go.

109
00:04:44,180 --> 00:04:46,230
We'll start off by importing
our three dependencies.

110
00:04:46,230 --> 00:04:49,030
The first one is pandas,
which will let us read our data set.

111
00:04:49,030 --> 00:04:50,446
The second one is scikit learn,

112
00:04:50,446 --> 00:04:53,547
which is the machine learning library
we're using for this example.

113
00:04:53,547 --> 00:04:57,700
And the third is matplotlib, which will
let us visualize our model and data.

114
00:04:57,700 --> 00:04:59,790
Now that we've imported
our dependencies,

115
00:04:59,790 --> 00:05:01,880
we can read our data site using pandas.

116
00:05:01,880 --> 00:05:05,240
We'll use the read fwf function
to read our animal data set.

117
00:05:05,240 --> 00:05:09,060
A table of fixed-width formatted
lines into a pandas datafram object,

118
00:05:09,060 --> 00:05:11,670
which is a 2D data structure of rows and
columns.

119
00:05:11,670 --> 00:05:14,250
Our data set contains the average
brain and body weight for

120
00:05:14,250 --> 00:05:16,090
a number of animal species.

121
00:05:16,090 --> 00:05:19,260
Once our data is in our dataframe
variables, we can easily parse and

122
00:05:19,260 --> 00:05:21,790
read both measurements into
two separate variables.

123
00:05:21,790 --> 00:05:24,713
We'll store our brain measurements
in the x values variable and

124
00:05:24,713 --> 00:05:26,941
the body measurements in
the y values variable.

125
00:05:26,941 --> 00:05:30,200
So if we were to plot this data
right now on a standard 2-D graph,

126
00:05:30,200 --> 00:05:31,456
it would look like this.

127
00:05:31,456 --> 00:05:34,246
And our goal is that given
a new animal's body weight,

128
00:05:34,246 --> 00:05:36,865
we'll be able to predict
what it's brain size is.

129
00:05:36,865 --> 00:05:38,683
So how are we going to do that?

130
00:05:38,683 --> 00:05:48,683
[MUSIC]

131
00:05:50,136 --> 00:05:51,391
Linear regression.

132
00:05:51,391 --> 00:06:01,391
[MUSIC]

133
00:06:09,103 --> 00:06:12,087
learns linear model object to
initialize our linear regression and

134
00:06:12,087 --> 00:06:14,340
store it in the body
regression variable.

135
00:06:14,340 --> 00:06:17,130
Then we can fit our model
on our xy value pairs.

136
00:06:17,130 --> 00:06:18,515
Now we have the line of best fit.

137
00:06:18,515 --> 00:06:21,925
We can plot our x y value pairs
on a map plot line scatterplot,

138
00:06:21,925 --> 00:06:25,325
then plot our regression line by
saying for every x value we have,

139
00:06:25,325 --> 00:06:29,325
predict the associated y value and draw
a line that intersects all those points.

140
00:06:29,325 --> 00:06:32,025
We can then display it using
the show function, lets go ahead and

141
00:06:32,025 --> 00:06:33,535
compile this code in terminal.

142
00:06:33,535 --> 00:06:36,585
Our scatterplot will appear with
all our data points mapped out.

143
00:06:36,585 --> 00:06:40,445
The x axis represents brain weights,
and the y axis represents body weights.

144
00:06:40,445 --> 00:06:43,730
Our regression line seems to fit most of
the data pretty well and there seems to

145
00:06:43,730 --> 00:06:47,150
be a very strong correlation here
between brain weight and body weight.

146
00:06:47,150 --> 00:06:48,650
And as we move along the line,

147
00:06:48,650 --> 00:06:52,220
given any brain weight, we can also
predict the associated body weight.

148
00:06:52,220 --> 00:06:55,850
So to break it down, while traditional
programming is about defining the steps

149
00:06:55,850 --> 00:06:59,610
to reach an outcome, machine learning
is about defining the outcome, and

150
00:06:59,610 --> 00:07:01,940
our program will learn
the steps to get there.

151
00:07:01,940 --> 00:07:03,850
There are three different
learning styles.

152
00:07:03,850 --> 00:07:07,290
Supervised, unsupervised,
and reinforcement learning.

153
00:07:07,290 --> 00:07:10,810
And linear regression models the
relationship between an independent and

154
00:07:10,810 --> 00:07:13,600
dependent variable,
to create the line of best fit,

155
00:07:13,600 --> 00:07:15,580
which we can then use
to make predictions.

156
00:07:15,580 --> 00:07:18,760
The winner of last week's coding
challenge is Mick Van Hulst.

157
00:07:18,760 --> 00:07:22,570
He modified the game world to be more
complex and his cue learning bot was

158
00:07:22,570 --> 00:07:25,640
much more efficient at reaching
the goal than my demo bot.

159
00:07:25,640 --> 00:07:27,010
Wizard of the week.

160
00:07:27,010 --> 00:07:31,421
And the Runner up is Vishal Batchu,
he generated maps using cellular.

161
00:07:31,421 --> 00:07:33,901
The challenge for
this video is to use and

162
00:07:33,901 --> 00:07:37,955
learn to create a regression line for a
different data set that I'll provide and

163
00:07:37,955 --> 00:07:41,710
print out the error between your
prediction and the actual value.

164
00:07:41,710 --> 00:07:44,750
Details are in the read me, post your
git help link in the comments, and

165
00:07:44,750 --> 00:07:46,520
I'll announce the winner in one week.

166
00:07:46,520 --> 00:07:48,660
Please hit that subscribe button and
for now,

167
00:07:48,660 --> 00:07:51,489
I've gotta feel the learn,
so thanks for watching.