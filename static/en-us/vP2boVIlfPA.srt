1
00:00:00,000 --> 00:00:04,407
So now that I can create a complex composition of parallel nested with parallelism,

2
00:00:04,407 --> 00:00:08,311
taking in my audio stream, putting it through a sequence of operations,

3
00:00:08,311 --> 00:00:10,686
coming out with a re-normalized stream like this,

4
00:00:10,686 --> 00:00:13,935
it opens the door to something called task parallelism.

5
00:00:13,935 --> 00:00:18,154
Now, task parallelism is where you run multiple independent tasks,

6
00:00:18,154 --> 00:00:21,514
more or less like separate programs each working on their own data.

7
00:00:21,514 --> 00:00:25,659
So you've probably noticed that the nested problem that we looked at before,

8
00:00:25,659 --> 00:00:31,368
the volume normalizer, could be launched from the CPU, but the GPU's really good at running lots of things at once,

9
00:00:31,368 --> 00:00:33,903
so we can take our volume normalization algorithm,

10
00:00:33,903 --> 00:00:37,281
and we can run it on dozens of audio streams all at the same time.

11
00:00:37,281 --> 00:00:42,482
We've got one program with multiple instances handling multiple audio streams

12
00:00:42,482 --> 00:00:47,422
all at the same time on a single GPU without any complicated CPU to GPU communication.

13
00:00:47,422 --> 00:00:52,820
This is task parallelism, and this is one way to get a lot of power out of the GPU all at once.
