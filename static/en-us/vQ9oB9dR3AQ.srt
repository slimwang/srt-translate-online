1
00:00:00,230 --> 00:00:03,240
Android Wear devices are paired
up with a companion phone but

2
00:00:03,240 --> 00:00:05,590
are not allowed to connect
to the Internet directly.

3
00:00:05,590 --> 00:00:06,848
This is done for many reasons.

4
00:00:06,848 --> 00:00:08,150
Including the following.

5
00:00:08,150 --> 00:00:09,660
Saving battery power.

6
00:00:09,660 --> 00:00:12,210
The phone is responsible for
dealing with internet and

7
00:00:12,210 --> 00:00:14,980
sending only the important
information to the wearable.

8
00:00:14,980 --> 00:00:16,490
Dealing with sporadic connections.

9
00:00:16,490 --> 00:00:18,870
The wearable may not always
be in range of the phone.

10
00:00:18,870 --> 00:00:20,330
And dealing with
different network types,

11
00:00:20,330 --> 00:00:23,270
the wearable may connect with
many different ways to the phone.

12
00:00:23,270 --> 00:00:25,780
So we definitely need
an abstraction layer here and

13
00:00:25,780 --> 00:00:28,060
the Android Wear
framework provides this.

14
00:00:28,060 --> 00:00:31,070
There are two main mechanisms used
to communicate between a phone and

15
00:00:31,070 --> 00:00:34,580
an Android Wear device,
data items and messages.

16
00:00:34,580 --> 00:00:36,980
Let's talk firstly about data items.

17
00:00:36,980 --> 00:00:39,081
These provide storage
of key value pairs,

18
00:00:39,081 --> 00:00:41,600
as well as automatic
synchronization of the data.

19
00:00:41,600 --> 00:00:45,480
So you can create a data item on one
device, fill in the key value pairs, and

20
00:00:45,480 --> 00:00:46,965
then give it to the data API.

21
00:00:46,965 --> 00:00:50,284
Once you've done this, it synchronized
through whatever means possible to all

22
00:00:50,284 --> 00:00:51,830
the other devices paired up.

23
00:00:51,830 --> 00:00:55,080
The other devices can then register
a listener that'll have a method code

24
00:00:55,080 --> 00:00:56,590
when a change arrives in the data item.
