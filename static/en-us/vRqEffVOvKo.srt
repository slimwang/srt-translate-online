1
00:00:00,260 --> 00:00:02,140
With our test for GET method in place,

2
00:00:02,140 --> 00:00:04,780
it's time to write our
first convenience function.

3
00:00:04,780 --> 00:00:08,029
I'm here in the login view controller,
and I ultimately want to make a single

4
00:00:08,029 --> 00:00:11,460
call to run the entire authentication
flow and access the app.

5
00:00:12,510 --> 00:00:16,390
To do this we've created a method called
authenticateWithViewController, and

6
00:00:16,390 --> 00:00:19,070
it's part of the TMDB client.

7
00:00:19,070 --> 00:00:22,070
To use this, we'll use the TMDB
client shared instance and

8
00:00:22,070 --> 00:00:25,210
we'll call the
authenticateWithViewController method.

9
00:00:25,210 --> 00:00:28,749
This method takes a host ViewController,
which should be this log in

10
00:00:28,749 --> 00:00:32,287
ViewController and a completion
handler to let us know if the off flow

11
00:00:32,287 --> 00:00:35,134
succeeded, or
there's an error string if it failed.

12
00:00:35,134 --> 00:00:38,450
So I'll go ahead and specify self,
and then if I'll hit enter on this

13
00:00:38,450 --> 00:00:42,290
parameter, it will auto complete,
and we have our trailing closure.

14
00:00:42,290 --> 00:00:43,820
We can get rid of void for now.

15
00:00:43,820 --> 00:00:45,330
So at this point,

16
00:00:45,330 --> 00:00:47,968
we actually know enough to
finish this completion handler.

17
00:00:47,968 --> 00:00:51,570
If the off flow is successful,
then we need to log in.

18
00:00:51,570 --> 00:00:55,370
But if it's not successful,
then we can display an error to users.

19
00:00:55,370 --> 00:00:58,450
Now for either of these cases we want to
make sure that these lines of code,

20
00:00:58,450 --> 00:01:03,850
which affect the UI, are run using
the form UI updates on main function.

21
00:01:03,850 --> 00:01:06,700
Now let's dive into the
authenticateWithViewController method

22
00:01:06,700 --> 00:01:08,530
and see what's going on.

23
00:01:08,530 --> 00:01:11,630
Yikes, okay,
this method is definitely not pretty.

24
00:01:11,630 --> 00:01:15,820
We have this pyramid of code kind of
jutting out to the right and then it's

25
00:01:15,820 --> 00:01:20,810
coming back down to the left here and
just hard to understand what's going on.

26
00:01:20,810 --> 00:01:24,090
Sometimes you hear this type of code
referred to as a pyramid of doom.

27
00:01:24,090 --> 00:01:27,270
And the reason that this is happening
is because we have a bunch of

28
00:01:27,270 --> 00:01:29,480
completion handlers
nested within each other.

29
00:01:29,480 --> 00:01:33,660
Now the reason we have to do
this is because, for instance,

30
00:01:33,660 --> 00:01:35,090
when we call getRequestToken,

31
00:01:35,090 --> 00:01:39,050
we have to wait for it to complete
before we call loginWithToken.

32
00:01:39,050 --> 00:01:42,286
And this continues all the way
down until our final step,

33
00:01:42,286 --> 00:01:43,508
which is getUserID.

34
00:01:43,508 --> 00:01:47,410
And this looks exactly like
what we saw in this flowchart.

35
00:01:47,410 --> 00:01:49,100
So let's kind of break
this down piece by piece.

36
00:01:49,100 --> 00:01:53,940
So I'll just bring this back up, so that
we can have a restricted view here, and

37
00:01:53,940 --> 00:01:56,160
let's look at the getRequestToken.

38
00:01:56,160 --> 00:01:59,530
If it succeeds, then we're going to
print the requestToken, we'll store it,

39
00:01:59,530 --> 00:02:02,170
and then, we'll call loginWithToken.

40
00:02:02,170 --> 00:02:05,530
Otherwise, we're going to call
this completionHandlerForAuth and

41
00:02:05,530 --> 00:02:09,150
we're going to pass it success,
which in this case is false, and

42
00:02:09,150 --> 00:02:13,040
an error string that's
generated by getRequestToken.

43
00:02:13,040 --> 00:02:15,210
Now if we succeed,
we're going to log in with the token,

44
00:02:15,210 --> 00:02:17,380
and let's see what this looks like.

45
00:02:17,380 --> 00:02:20,490
And let me go ahead and
collapse the getSessionId.

46
00:02:20,490 --> 00:02:25,660
And similarly, if this request succeeds,
then we are going to call getSessionID

47
00:02:25,660 --> 00:02:29,050
with our request token, otherwise we are
going to call completionHandlerforAuth.

48
00:02:29,050 --> 00:02:31,400
We are going to pass it at failure and

49
00:02:31,400 --> 00:02:35,830
then the error string in this case
is coming from our loginWithToken.

50
00:02:35,830 --> 00:02:37,930
Then if that suceeds
we'll go with sessionID.

51
00:02:39,340 --> 00:02:44,150
Let me bring this back up,
store the session ID, get the user ID.

52
00:02:44,150 --> 00:02:46,340
This is our successful case.

53
00:02:46,340 --> 00:02:48,140
Otherwise not a success.

54
00:02:48,140 --> 00:02:49,780
Only pass the error string.

55
00:02:49,780 --> 00:02:51,490
And let's get user ID.

56
00:02:51,490 --> 00:02:52,660
And there we go.

57
00:02:52,660 --> 00:02:55,940
And this is hopefully our
final success case here,

58
00:02:55,940 --> 00:02:57,180
where we're storing the user ID.

59
00:02:57,180 --> 00:03:00,870
And then, success or fail, we're
going to call completion handler for

60
00:03:00,870 --> 00:03:04,410
auth with whatever value
success gets from getUserID,

61
00:03:04,410 --> 00:03:08,750
and whatever value error string it's
populated with, hopefully null.

62
00:03:08,750 --> 00:03:13,420
Now, all this nesting of completion
handlers is extremely hard to look at,

63
00:03:13,420 --> 00:03:17,480
it's hard to manage, and it's hard to
reason about, and if you follow people

64
00:03:17,480 --> 00:03:20,980
in the iOS community, they're saying the
exact same thing about code that looks

65
00:03:20,980 --> 00:03:25,260
like this, which is why there are nice
alternatives to this nesting structure.

66
00:03:25,260 --> 00:03:27,920
But they're outside
the scope of this course.

67
00:03:27,920 --> 00:03:28,740
If you're interested,

68
00:03:28,740 --> 00:03:32,370
I'll post some links in the instructor
notes where you can find out more.

69
00:03:32,370 --> 00:03:34,530
Let's go back to the getRequestToken.

70
00:03:34,530 --> 00:03:38,840
We'll follow it by command clicking,
there we go.

71
00:03:38,840 --> 00:03:41,620
This is the first convenience method
that you're going to be implementing in

72
00:03:41,620 --> 00:03:43,140
this exercise.

73
00:03:43,140 --> 00:03:46,080
The comments include these three
steps that you'll want to complete

74
00:03:46,080 --> 00:03:49,560
to call the taskForGET method
that we implemented earlier.

75
00:03:49,560 --> 00:03:50,550
And for this third step,

76
00:03:50,550 --> 00:03:54,050
we see it says send the desired
values to completion handler.

77
00:03:54,050 --> 00:03:57,320
The completion handler it's referring
to is this completion handler.

78
00:03:57,320 --> 00:04:01,540
We have success, requestToken,
which can be an optional string.

79
00:04:01,540 --> 00:04:05,160
So it's nil or a string, and
then the error string as well.

80
00:04:05,160 --> 00:04:09,110
And this is what's going to
be populating, here we go,

81
00:04:09,110 --> 00:04:14,410
these values here, so take some time to
finish implementing get request token.

82
00:04:14,410 --> 00:04:16,600
Remember you'll need to
specify the parameters and

83
00:04:16,600 --> 00:04:19,589
method in order to
call taskForGET method.

84
00:04:19,589 --> 00:04:23,130
Then take the data resulting
from task forget method call and

85
00:04:23,130 --> 00:04:26,940
extract the desired value and return
it back in the completion handler.

86
00:04:26,940 --> 00:04:30,670
If you do this correctly, then
the request token should be printed out.

87
00:04:30,670 --> 00:04:32,120
When you're done, check this box.
