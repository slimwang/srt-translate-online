1
00:00:00,000 --> 00:00:05,000
So the answer is always y, and this is why this is such a useful function

2
00:00:05,000 --> 00:00:10,000
in cryptography--if we XOR in the value of x twice, they cancel out.

3
00:00:10,000 --> 00:00:16,000
So the general property for any value x--x XOR x-- is equal to 0.

4
00:00:16,000 --> 00:00:17,000
We can see that from the truth table.

5
00:00:17,000 --> 00:00:25,000
The value of x could either be 0--and 0 XOR 0 is 0--or 1, and the value of 1 XOR 1 is 0,

6
00:00:25,000 --> 00:00:29,000
and that means that x XOR x is always 0.

7
00:00:29,000 --> 00:00:39,000
XOR is also associative and commutative, so that means if we have x XOR y XOR x

8
00:00:39,000 --> 00:00:46,000
that's equivalent to x XOR x XOR y which is also equivalent to y.

9
00:00:46,000 --> 00:00:53,000
And I've written this using x's and y's--if we change the names of our letters to M and C

10
00:00:53,000 --> 00:00:56,000
it becomes really clear why this is useful in cryptography.

11
00:00:56,000 --> 00:01:04,000
If we call x the key, then we have the key XOR the message--that's going to be the ciphertext--

12
00:01:04,000 --> 00:01:09,000
and then the ciphertext XOR the key again gives us back the message.

13
00:01:09,000 --> 00:01:13,000
And what I've described is exactly the One-Time Pad.

14
00:01:13,000 --> 00:01:19,000
The key aspect is--why it's called One-Time--is that we can only use the key once.

15
00:01:19,000 --> 00:01:22,000
So if we do this one bit at a time, we need a new key for each bit.

16
00:01:22,000 --> 00:01:27,000
If we think of doing it for a longer message, well then we need a key long enough

17
00:01:27,000 --> 99:59:59,999
that we're XORing each bit with one bit of the key.
