1
00:00:00,000 --> 00:00:06,000
So far what we've done is call the recognizer task.

2
00:00:06,000 --> 00:00:11,000
We have a function match which takes a pattern and a text,

3
00:00:11,000 --> 00:00:17,000
and that returns back a substring of text if it matches or None.

4
00:00:17,000 --> 00:00:22,000
It's called a recognizer, because we're recognizing whether the prefix of text

5
00:00:22,000 --> 00:00:25,000
is in the language defined by the pattern.

6
00:00:25,000 --> 00:00:32,000
There's a whole other task called the generator in which we generate from a pattern

7
00:00:32,000 --> 00:00:35,000
a complete language defined by that pattern.

8
00:00:35,000 --> 00:00:44,000
For example, the pattern a or b sequenced with a or b.

9
00:00:44,000 --> 00:00:52,000
That defines a language of four different strings--{aa, ab, ba, bb},

10
00:00:52,000 --> 00:00:56,000
and we could define a function that takes a pattern and generates out that language.

11
00:00:56,000 --> 00:00:58,000
That all seems fine. One problem, though.

12
00:00:58,000 --> 00:01:06,000
If we have a language like a* then the answer of that should be the empty string

13
00:01:06,000 --> 00:01:15,000
or a or aa or aaa and so on. It's an infinite set.

14
00:01:15,000 --> 00:01:18,000
That's a problem. How are we going to represent this infinite set?

15
00:01:18,000 --> 00:01:24,000
Now, it's possible. We could have a generator function that generates the items one at a time.

16
00:01:24,000 --> 00:01:27,000
That's a pretty good interface, but instead I'm going to have one

17
00:01:27,000 --> 00:01:31,000
where we say let's limit the sizes of the strings we want.

18
00:01:31,000 --> 00:01:35,000
If we say we want all strings up to n characters in length,

19
00:01:35,000 --> 00:01:38,000
then that's always going to be a finite set.

20
00:01:38,000 --> 00:01:40,000
I'm going to take the compiler approach.

21
00:01:40,000 --> 00:01:44,000
Rather than write a function "generate," I'm going to have the generator

22
00:01:44,000 --> 00:01:47,000
be compiled into the patterns.

23
00:01:47,000 --> 00:01:51,000
What we're going to write is a pattern, which is a compiled function,

24
00:01:51,000 --> 00:01:59,000
and we're going to apply that to a set of integers representing the possible range

25
00:01:59,000 --> 00:02:02,000
of lengths that we want to retrieve.

26
00:02:02,000 --> 00:02:04,000
That's going to return a set of strings.

27
00:02:04,000 --> 00:02:11,000
So for example, if we define pattern to be a*--we did that appropriately--

28
00:02:11,000 --> 00:02:18,000
and then we asked for pattern, and w gave it the set {1, 2, 3}.

29
00:02:18,000 --> 00:02:25,000
Then that should return all strings which are derived from the pattern that have a length 1, 2, or 3.

30
00:02:25,000 --> 00:02:32,000
So that should be the set {a, aa, aaa}.

31
00:02:32,000 --> 99:59:59,999
Now let's go ahead and implement this.
