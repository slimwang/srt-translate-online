1
00:00:00,400 --> 00:00:01,280
As with everything else,

2
00:00:01,280 --> 00:00:04,630
when building an app for Geo Fencing,
you'll need a GoogleAPIClient.

3
00:00:04,630 --> 00:00:08,390
You've seen these earlier in the course,
and you've seen how to set them up, so

4
00:00:08,390 --> 00:00:10,630
let's assume at this point
that you've done that.

5
00:00:10,630 --> 00:00:15,008
In order for your app to monitor
the GeoFences, you have to define them.

6
00:00:15,008 --> 00:00:18,700
And a GeoFence is defined
using the GeoFence object,

7
00:00:18,700 --> 00:00:21,730
which you create using
a GeoFence Builder.

8
00:00:21,730 --> 00:00:23,880
It takes the following properties.

9
00:00:23,880 --> 00:00:28,170
Latitude and longitude define where
the GeoFence is in the world.

10
00:00:28,170 --> 00:00:29,680
These are just the typical latitude and

11
00:00:29,680 --> 00:00:32,860
longitude that define
any location anywhere.

12
00:00:32,860 --> 00:00:37,690
The radius defines a circular area
around the latitude and longitude.

13
00:00:37,690 --> 00:00:40,770
This determines how close
the user needs to be

14
00:00:40,770 --> 00:00:44,250
to that location from any direction
before any alert gets triggered.

15
00:00:45,580 --> 00:00:49,650
The expiration time determines how
long the fence should remain active.

16
00:00:49,650 --> 00:00:51,960
Once this time expires,
the GeoFence is deleted.

17
00:00:51,960 --> 00:00:54,700
And you can of course set up
permanent ones if you like.

18
00:00:55,760 --> 00:00:58,880
And the GeoFence ID is
an identifier to use so

19
00:00:58,880 --> 00:01:01,740
that you can know which
GeoFence has been triggered.

20
00:01:01,740 --> 00:01:02,620
This should be unique.

21
00:01:02,620 --> 00:01:06,700
If you consider the fact that GeoFences
are based on latitude and longitude and

22
00:01:06,700 --> 00:01:11,270
a circle around them, you can actually
have GeoFences that overlap each other.

23
00:01:11,270 --> 00:01:15,366
When a user enters a particular space,
they may trigger two or more GeoFences.

24
00:01:15,366 --> 00:01:17,945
As such, as a developer,
you may want to know which ones, and

25
00:01:17,945 --> 00:01:19,815
you do that using
the ID of the GeoFence.

26
00:01:20,855 --> 00:01:24,535
Now, I'm going to define a GeoFence
as looking something like this.

27
00:01:24,535 --> 00:01:28,545
You can then define a number of
GeoFences as an array of GeoFence

28
00:01:28,545 --> 00:01:29,625
objects.

29
00:01:29,625 --> 00:01:33,305
So, I'm going to wrap the list of
GeoFences in ArrayList like this.

30
00:01:33,305 --> 00:01:35,800
Once you have your
ArrayList of GeoFences,

31
00:01:35,800 --> 00:01:38,760
you can then use
a GeoFencingRequest class

32
00:01:38,760 --> 00:01:43,830
simply by calling its addGeoFences
method and passing the ArrayList to it.

33
00:01:43,830 --> 00:01:48,650
Once this is working, you can then add
the GeoFencingRequest to your client and

34
00:01:48,650 --> 00:01:52,830
specify a pending intent that is
used to process the call backs

35
00:01:52,830 --> 00:01:55,180
from the location services API.

36
00:01:55,180 --> 00:01:58,340
This pending intent
uses an intent service

37
00:01:58,340 --> 00:02:01,730
in a similar way to the address
example that we saw earlier.

38
00:02:01,730 --> 00:02:04,660
Now, whenever a GeoFencing
action happens,

39
00:02:04,660 --> 00:02:07,560
the intent service will catch it,
and it will route it to your app.
