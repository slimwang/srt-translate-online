1
00:00:00,370 --> 00:00:04,040
So let's see what does it
take to have a good cache?

2
00:00:04,040 --> 00:00:07,150
Or what are the properties
of a good cache?

3
00:00:07,150 --> 00:00:12,860
We want our system to have a good
average memory access time, or AMAT.

4
00:00:13,870 --> 00:00:19,080
And this is the access time to
memory as seen by the processor.

5
00:00:19,080 --> 00:00:23,630
The AMAT is equal to
the cache's hit time,

6
00:00:23,630 --> 00:00:27,380
how quickly can it return the data
when we do have a cache hit,

7
00:00:27,380 --> 00:00:32,700
plus how often do we have a miss,
times the miss penalty.

8
00:00:32,700 --> 00:00:36,210
We want the AMAT to be very low,
the lower the better.

9
00:00:36,210 --> 00:00:41,750
This means that we want the hit time to
be low, which means we want a small and

10
00:00:41,750 --> 00:00:46,750
fast cache because that will
contribute to having this be low.

11
00:00:46,750 --> 00:00:52,800
We want a low miss rate, which means we
want our cache to be large and/or smart.

12
00:00:53,940 --> 00:00:58,870
If it's a large cache, more stuff will
fit in it, so we will miss less often.

13
00:00:58,870 --> 00:01:02,900
Or if it's smart, it will know better
what to keep inside, so, again,

14
00:01:02,900 --> 00:01:04,860
we will have fewer misses.

15
00:01:04,860 --> 00:01:09,110
The miss penalty for simple cache is
simply the main memory access time.

16
00:01:10,300 --> 00:01:13,500
This is going to be very large,
usually tens or

17
00:01:13,500 --> 00:01:16,270
even hundreds of processor cycles.

18
00:01:16,270 --> 00:01:20,160
So really when we are designing caches,
we're trying to balance the hit time and

19
00:01:20,160 --> 00:01:20,780
the miss rate.

20
00:01:22,140 --> 00:01:25,820
Small and fast versus large and
intelligent, and

21
00:01:25,820 --> 00:01:28,400
intelligent typically
means slightly slower.

22
00:01:29,490 --> 00:01:36,330
So some caches can be extremely small
and fast, have very good hit time,

23
00:01:36,330 --> 00:01:39,670
but sometimes that's at the expense
of having a larger miss rate.

24
00:01:39,670 --> 00:01:42,950
Some caches will have
a relatively large hit time but

25
00:01:42,950 --> 00:01:47,280
extremely low miss rates so that we
can reduce the overall contribution

26
00:01:47,280 --> 00:01:51,400
of main memory accesses that contribute
a lot each time we have them.

27
00:01:51,400 --> 00:01:53,900
Sometimes we also talk about miss time,

28
00:01:53,900 --> 00:01:57,420
which is the overall time it
takes to have a cache miss.

29
00:01:57,420 --> 00:02:01,980
A miss time is simply the hit time
followed by the miss penalty,

30
00:02:01,980 --> 00:02:05,120
because we try to find what we
have in the cache but fail, and

31
00:02:05,120 --> 00:02:07,250
then we still have to
pay the miss penalty.

32
00:02:07,250 --> 00:02:13,750
We can also think about miss time is the
memory access time when we are missing.

33
00:02:13,750 --> 00:02:14,770
So miss rate is one.

34
00:02:14,770 --> 00:02:18,310
So again, it will be the hit
time plus the miss penalty.

35
00:02:18,310 --> 00:02:22,992
So another way to write the AMAT
expression would be to say that it is 1

36
00:02:22,992 --> 00:02:25,910
minus miss rate times the hit time.

37
00:02:25,910 --> 00:02:30,050
So this is how often do we have
the hits times the time for the hit.

38
00:02:30,050 --> 00:02:34,670
Plus how often do we have
the misses times the miss time.

39
00:02:34,670 --> 00:02:37,480
Usually we want to use this expression,

40
00:02:37,480 --> 00:02:41,710
simply because the miss time typically
includes checking whether what

41
00:02:41,710 --> 00:02:45,665
we have is in the cache followed by
whatever we need to do on a miss.

42
00:02:45,665 --> 00:02:49,870
So somehow, every time it will
have the time it takes to hit but

43
00:02:49,870 --> 00:02:51,900
sometimes we will also
pay the miss penalty.
