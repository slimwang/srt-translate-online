1
00:00:00,220 --> 00:00:03,510
Now that you've seen a lot of code for implementing methods. Let me show you a

2
00:00:03,510 --> 00:00:07,510
technique that can help you understand what a method implementation does. It's

3
00:00:07,510 --> 00:00:11,635
called the object tracing technique. So, let's say that you have a, a couple of

4
00:00:11,635 --> 00:00:15,570
methods that do some work that may not be so easy to understand. Here's what

5
00:00:15,570 --> 00:00:19,480
you do. Pick some scenario, that exercises these methods. Like here, I'm making

6
00:00:19,480 --> 00:00:23,220
a car, I add gas, I drive it, and I drive it a bit more. And now we want to

7
00:00:23,220 --> 00:00:27,580
understand, what do these methods calls do to the car. It's very low tech. Get

8
00:00:27,580 --> 00:00:32,189
yourself an index card or a napkin or some other piece of paper. Make a column

9
00:00:32,189 --> 00:00:36,420
for each instance variable. So, let's get started. I put the paper clip so we

10
00:00:36,420 --> 00:00:40,400
can see where we are. We construct a car, that initialized the instance

11
00:00:40,400 --> 00:00:43,830
variables. I didn't have room to put in the code for the constructor but

12
00:00:43,830 --> 00:00:47,092
hopefully you remember. The gas and tank and miles driven are initialized to

13
00:00:47,092 --> 00:00:51,150
zero. The miles per gallon with the parameter of the constructor. Let's move

14
00:00:51,150 --> 00:00:56,780
on. Now we enter the add gas method here. Amount is thirty. Gas in tank is

15
00:00:56,780 --> 00:01:01,710
zero. So, the effective set gas in tank is set to thirty. Moving on. Now we

16
00:01:01,710 --> 00:01:07,200
drive ten miles. So, distance is ten. And since this method is a bit longer and

17
00:01:07,200 --> 00:01:11,800
it has another local variable here, it makes sense to make another card for it.

18
00:01:11,800 --> 00:01:15,590
Or actually, since I ran out of simulated cards, I'll use a napkin. So the

19
00:01:15,590 --> 00:01:20,223
distance parameter is 10, over here. We update miles driven, previously it was

20
00:01:20,223 --> 00:01:24,670
0. We add 10. That's now 10. Now here we compute the gas consumed. That's

21
00:01:24,670 --> 00:01:29,210
another local variable. I'll put it on my napkin. It's the distance divided by

22
00:01:29,210 --> 00:01:33,890
miles per gallon. 10 divided by 10. So, we consumed a gallon. Now we can look

23
00:01:33,890 --> 00:01:38,930
at this statement here. Gas in tank was 30. Gas consumed was 1. The difference

24
00:01:38,930 --> 00:01:43,510
is 29. So, that should now by moved into gas in tank. Now, we're at the end of

25
00:01:43,510 --> 00:01:47,740
this method call, and the local variable here and the parameter variable go

26
00:01:47,740 --> 00:01:52,110
away. So, we can just crumple up our napkin here. These variables are no longer

27
00:01:52,110 --> 00:01:56,705
there once we exited this method. Of course, the instance variables, the

28
00:01:56,705 --> 00:02:00,380
long-term memory of the object, they stay around. Now here we are on the next

29
00:02:00,380 --> 00:02:04,390
method call, we're calling the drive method again. That means that this local

30
00:02:04,390 --> 00:02:07,930
variable, and this one here, will get recreated. Of course this time the

31
00:02:07,930 --> 00:02:13,230
distance is 20. Now let's see, miles driven is, miles driven plus distance.

32
00:02:13,230 --> 00:02:19,105
Previously it was 10. Now we have 20, now it becomes 30. Gas consumed is

33
00:02:19,105 --> 00:02:24,890
distance over miles driven, that's 20 by 10 or two. Gas in tank was 29 minus

34
00:02:24,890 --> 00:02:29,960
two is 27. So, now we've executed the three steps in this method. This method

35
00:02:29,960 --> 00:02:34,740
is now finished. And once again, the local variables go away. And we're done,

36
00:02:34,740 --> 00:02:38,260
and this is the remaining state of the object. What's the point? By doing this

37
00:02:38,260 --> 00:02:43,990
exercise, you gain an understanding of what the statements in the methods do to

38
00:02:43,990 --> 00:02:48,680
the instance variables of an object. Sarah will walk you through an example on

39
00:02:48,680 --> 00:02:52,600
how you can use this technique to find a bug in a method implementation.
