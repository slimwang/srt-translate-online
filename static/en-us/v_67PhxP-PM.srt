1
00:00:00,440 --> 00:00:04,530
Interestingly, we're not going to talk about a version of the prototypal pattern

2
00:00:04,530 --> 00:00:07,060
that does not involve shared methods.

3
00:00:07,060 --> 00:00:09,750
When we were talking about decorators and when we were talking about

4
00:00:09,750 --> 00:00:14,420
the functional class pattern, we examined the technique of using shared methods

5
00:00:14,420 --> 00:00:18,650
or using methods that were defined in line in the body of the constructor.

6
00:00:18,650 --> 00:00:21,820
But the prototypal pattern really does not lend itself well

7
00:00:21,820 --> 00:00:23,170
to the same examination.

8
00:00:23,170 --> 00:00:24,490
Why do you think that might be?

9
00:00:24,490 --> 00:00:29,320
As I see it, function sharing via a prototype delegation is the very goal of

10
00:00:29,320 --> 00:00:30,560
the prototypal pattern.

11
00:00:30,560 --> 00:00:34,080
If methods were defined inside the constructor there really wouldn't be

12
00:00:34,080 --> 00:00:38,420
any reason to delegate the instances to any prototype at all.

13
00:00:38,420 --> 00:00:40,390
And that's it for prototypal classes.

14
00:00:40,390 --> 00:00:43,470
With all of this background information behind us it's going to be very easy to

15
00:00:43,470 --> 00:00:45,140
understand the pseudoclassical pattern.
