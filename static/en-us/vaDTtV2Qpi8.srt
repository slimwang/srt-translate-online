1
00:00:00,000 --> 00:00:04,000
Welcome to bonus programming gem #1.

2
00:00:04,000 --> 00:00:08,000
This part is completely optional in that there are no quizzes.

3
00:00:08,000 --> 00:00:11,000
I'm going to lay out a programming problem and show you how I would approach it

4
00:00:11,000 --> 00:00:14,000
and debug it and give you some hints.

5
00:00:14,000 --> 00:00:17,000
If you already feel comfortable after seeing the problem, then you can skip it.

6
00:00:17,000 --> 00:00:19,000
Otherwise, follow along with me.

7
00:00:19,000 --> 00:00:23,000
At a high level, here's the problem description that we'll be tackling today.

8
00:00:23,000 --> 00:00:28,000
Given a list 'l' of arbitrary elements--could be strings, could be numbers,

9
00:00:28,000 --> 00:00:30,000
could be lists themselves--and a function 'f',

10
00:00:30,000 --> 00:00:34,000
return the element of 'l' that maximizes that function.

11
00:00:34,000 --> 00:00:39,000
So for example, if the function is square root and the list is 9, 16, 4,

12
00:00:39,000 --> 00:00:43,000
we'd want to return 16 because it has the highest square root.

13
00:00:43,000 --> 00:00:46,000
And we can assume that 'l' is not empty and that 'f' returns a number.

14
00:00:46,000 --> 00:00:48,000
Let's show an example.

15
00:00:48,000 --> 00:00:52,000
Let's say that the list is a list of strings--['Barbara', 'Kingsolver', 'wrote', 'the',

16
00:00:52,000 --> 00:00:53,000
'Poisonwood', 'Bible'],

17
00:00:53,000 --> 00:00:57,000
and the function we're trying to maximize is len--the string length function.

18
00:00:57,000 --> 00:01:03,000
So among the 6 elements, 'Poinsonwood' has 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 letters.

19
00:01:03,000 --> 00:01:08,000
'Kingsolver'--1, 2, 3, 4, 5, 6, 7, 8, 9, 10--also 10 letters, returning either one of those

20
00:01:08,000 --> 00:01:09,000
would be fine.

21
00:01:09,000 --> 00:01:12,000
What I encourage you to do at this point is, try it on your own!

22
00:01:12,000 --> 00:01:17,000
Go to the Python interpreter, make up some test cases, implement a function that does this,

23
00:01:17,000 --> 99:59:59,999
and then we'll all go through it together.
