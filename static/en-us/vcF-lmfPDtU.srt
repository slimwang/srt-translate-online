1
00:00:00,370 --> 00:00:04,213
At the beginning of this lesson we talked about car sharing and what classes

2
00:00:04,213 --> 00:00:10,326
one might be able to use to implement a car sharing simulation. And we hit upon

3
00:00:10,326 --> 00:00:13,945
the classes car and person. Let's go ahead and actually implement those

4
00:00:13,945 --> 00:00:17,984
classes. So, we'll imagine a bunch of people that all gather at the departure

5
00:00:17,984 --> 00:00:24,828
location. There's a long road, with destinations, that we'll just label 1, 2,

6
00:00:24,828 --> 00:00:30,490
3, and so on. Each of the people wants to go to at one of these destinations.

7
00:00:30,490 --> 00:00:34,670
Maybe this one wants to go to three, same with the others. And then, we'll have

8
00:00:34,670 --> 00:00:39,234
cars, that also have destinations. Let's say this car wants to go to

9
00:00:39,234 --> 00:00:43,069
destination 4, then of course, this car can pick up whatever passengers want to

10
00:00:43,069 --> 00:00:48,410
go destination 1, 2, 3, or 4. But not one that wants to go further. And, of

11
00:00:48,410 --> 00:00:53,242
course, the car can only load as many passengers as they have seats. Make that

12
00:00:53,242 --> 00:00:58,217
one less because the driver also needs a seat. So, now we need to figure out

13
00:00:58,217 --> 00:01:02,683
what are the responsibilities of the classes. Let's start with the person

14
00:01:02,683 --> 00:01:07,662
class. A person should know their destination. In our stimulation we also

15
00:01:07,662 --> 00:01:12,095
want to give names to people so, of course the person should know that too. A

16
00:01:12,095 --> 00:01:15,551
car should be able to pick up a passenger provided, of course, and only the car

17
00:01:15,551 --> 00:01:20,879
will know that whether there is room and whether the destination is on the way.

18
00:01:20,879 --> 00:01:24,065
And, of course, there is another thing that a car should be able to do, it

19
00:01:24,065 --> 00:01:28,635
should be able to drive. It looks like the person is the easy of the two, let's

20
00:01:28,635 --> 00:01:33,062
look at that first. Here's the Person class. You can see we have two

21
00:01:33,062 --> 00:01:37,409
properties, a person has a name and a destination property with a getter for

22
00:01:37,409 --> 00:01:43,956
each of them. These are read-only properties. Once a person has been

23
00:01:43,956 --> 00:01:48,110
constructed with a particular name and a particular destination, that doesn't

24
00:01:48,110 --> 00:01:53,282
change. Remember, it's just a simulation, these are not real people but, just

25
00:01:53,282 --> 00:02:00,468
objects for use in our simulation program. Here is the Car class. Most

26
00:02:00,468 --> 00:02:06,695
importantly, a car collects passengers. A car also knows how many seats it has.

27
00:02:06,695 --> 00:02:11,850
The name of the driver, we'll just use that for reporting. The current

28
00:02:11,850 --> 00:02:16,934
location, it starts at zero and goes up by one every time that the car drives

29
00:02:16,934 --> 00:02:23,340
to the next location. And that is destination. We construct a car with a driver

30
00:02:23,340 --> 00:02:28,945
name, number of seats and the destination. Initially it has no passengers and

31
00:02:28,945 --> 00:02:34,742
is at location 0. So, now it's your turn. I'd like you to implement the

32
00:02:34,742 --> 00:02:38,882
tryToAdd method. Where we add a person to the car, at least we try because if

33
00:02:38,882 --> 00:02:42,662
there's no room or the passenger wants to go further than the car wants to go,

34
00:02:42,662 --> 00:02:48,789
then it's not going to work. In that case, you shouldn't add p to the passenger

35
00:02:48,789 --> 00:02:53,177
array list, but you should return false. On the other hand if you can't

36
00:02:53,177 --> 00:02:59,295
accommodate the person. Go ahead and add it and return true.
