1
00:00:00,460 --> 00:00:04,027
In consistent hashing, the main idea is that the

2
00:00:04,027 --> 00:00:07,181
keys and the nodes map to the same ID space.

3
00:00:07,181 --> 00:00:10,297
So, what we're going to do is, create a metric

4
00:00:10,297 --> 00:00:13,495
space, such as a ring, and we'll put nodes on

5
00:00:13,495 --> 00:00:16,447
this ring, and the idea is that these nodes

6
00:00:16,447 --> 00:00:19,614
each have some ID. Now the keys should also map

7
00:00:19,614 --> 00:00:22,398
to the ID space. So in this case, just

8
00:00:22,398 --> 00:00:25,522
for the sake of example, let's suppose that we have

9
00:00:25,522 --> 00:00:30,593
a six bit ID space, so ID's might range from zero to 63. Now you can see that

10
00:00:30,593 --> 00:00:34,034
the nodes have ID's, and the keys also have

11
00:00:34,034 --> 00:00:37,881
ID's in the same space. A consistent hash function

12
00:00:37,881 --> 00:00:41,407
will assign the nodes, and the keys and identifier

13
00:00:41,407 --> 00:00:44,437
in this space. A hash function such as shah

14
00:00:44,437 --> 00:00:48,180
one might be used to assign these identifiers. In

15
00:00:48,180 --> 00:00:51,120
the case nodes the ID might be a hash

16
00:00:51,120 --> 00:00:53,670
of the IP address. In the case of keys,

17
00:00:53,670 --> 00:00:56,230
the ID might simply just be the hash of a

18
00:00:56,230 --> 00:01:00,300
key. Both of these hash operations create ID's that

19
00:01:00,300 --> 00:01:04,030
are uni-formally distributed in the ID space. The question now

20
00:01:04,030 --> 00:01:06,020
is how to map the key ID's to the

21
00:01:06,020 --> 00:01:09,850
node ID's, so that we know which nodes are responsible

22
00:01:09,850 --> 00:01:13,220
for resolving the look ups for a particular key.

23
00:01:13,220 --> 00:01:16,640
The idea in chord is that a key is stored

24
00:01:16,640 --> 00:01:18,820
at its successor, which is the node with

25
00:01:18,820 --> 00:01:22,760
the next highest ID. So, for example, the key

26
00:01:22,760 --> 00:01:28,640
corresponding to the key ID of 60 would be stored at the node with the node ID

27
00:01:28,640 --> 00:01:36,042
of one. Similarly for the key with the key ID of 54. Forty-two would be stored

28
00:01:36,042 --> 00:01:41,827
at the node with the node ID of 43, 17 at the node with 32, seven and five

29
00:01:41,827 --> 00:01:44,141
at the node with ID of 10, and

30
00:01:44,141 --> 00:01:47,953
so on. Consistent hashing offers the properties of load

31
00:01:47,953 --> 00:01:51,463
balance, because all nodes receive roughly the same

32
00:01:51,463 --> 00:01:54,816
number of keys and flexibility. Because when a node

33
00:01:54,816 --> 00:01:59,226
joins or leaves the network, only a fraction of the keys need to be moved to a

34
00:01:59,226 --> 00:02:02,690
different location. You can actually prove that the solution

35
00:02:02,690 --> 00:02:07,110
is optimal. Meaning that the minimal number of keys

36
00:02:07,110 --> 00:02:10,150
need to be remapped to maintain load balance

37
00:02:10,150 --> 00:02:12,260
when a node joins or leaves the network.
