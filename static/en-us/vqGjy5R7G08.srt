1
00:00:00,440 --> 00:00:05,337
We have seen how P Threads serve as an API for for the development of

2
00:00:05,337 --> 00:00:10,270
parallel programs. For distributed programs, sockets serves as an

3
00:00:10,270 --> 00:00:15,230
API for application development. And conventional distributor programming

4
00:00:15,230 --> 00:00:20,470
such as NFS servers and so on use socket API

5
00:00:20,470 --> 00:00:25,555
And build RPC packets on top of that. But unfortunately socket API

6
00:00:25,555 --> 00:00:30,688
is too low-level and insufficient in semantic richness for emerging

7
00:00:30,688 --> 00:00:35,770
multimedia distributed applications. Similarly sockets serve

8
00:00:35,770 --> 00:00:41,020
as the API for distributed program development. So conventional distributed

9
00:00:41,020 --> 00:00:45,750
programs are built using socket API, for example you man have a server

10
00:00:45,750 --> 00:00:50,600
like an NFS server, and clients connect to

11
00:00:50,600 --> 00:00:55,510
an NFS server using sockets, in order to do the

12
00:00:55,510 --> 00:00:59,140
distributed I/O between the client and the server. But unfortunately,

13
00:00:59,140 --> 00:01:04,830
socket API is too low-level, and it doesn't have the semantic richness

14
00:01:04,830 --> 00:01:10,400
that is needed for emerging novel multimedia distributed applications.
