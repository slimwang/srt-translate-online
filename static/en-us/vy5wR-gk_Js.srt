1
00:00:00,320 --> 00:00:01,670
What's iterative deepening?

2
00:00:01,669 --> 00:00:04,400
>> Let's go back to our problem
of making our computer respond to

3
00:00:04,400 --> 00:00:06,530
an opponent in two seconds or less.

4
00:00:06,530 --> 00:00:09,539
Before, we calculated the maximum
depth we thought we could search in

5
00:00:09,539 --> 00:00:10,750
time safely.

6
00:00:10,750 --> 00:00:13,759
With iterative deepening,
we are going to do something simpler.

7
00:00:13,759 --> 00:00:16,219
We are going to search to level one and
get an answer for

8
00:00:16,219 --> 00:00:18,200
what we think is the best move.

9
00:00:18,199 --> 00:00:20,849
We'll keep that answer in
case we run out of time but

10
00:00:20,850 --> 00:00:23,410
we'll start the process again and
go to level two this time.

11
00:00:23,410 --> 00:00:27,059
If we finish searching level
two before time runs out

12
00:00:27,059 --> 00:00:30,809
we'll keep it's best move and restart
the search going from level three.

13
00:00:30,809 --> 00:00:34,129
We'll continue doing this process
until we run out of time and

14
00:00:34,130 --> 00:00:35,859
then return our best answer.

15
00:00:35,859 --> 00:00:37,229
>> So you're saying we
should do the same thing

16
00:00:37,229 --> 00:00:39,529
we did to determine quiescence?

17
00:00:39,530 --> 00:00:42,570
>> Basically, and
quiescence is a good side effect.

18
00:00:42,570 --> 00:00:44,619
>> But that just still
doesnt answer my question.

19
00:00:44,619 --> 00:00:46,899
Isn't this process inefficient?

20
00:00:46,899 --> 00:00:50,699
>> Surprisingly, iterative deepening
doesn't waste that much time.

21
00:00:50,700 --> 00:00:53,200
Because of the exponential
nature of the problem,

22
00:00:53,200 --> 00:00:55,890
the amount of time is dominated
by the last level searched.

