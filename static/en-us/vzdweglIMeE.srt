1
00:00:00,000 --> 00:00:05,000
All right. Now that you've gone to the hard work of defining all of those procedures,

2
00:00:05,000 --> 00:00:11,000
let's see the big payoff as we use it to parse arbitrary strings in arbitrary context-free grammars.

3
00:00:11,000 --> 00:00:15,000
Here I've got the procedure addtochart that you wrote.

4
00:00:15,000 --> 00:00:18,000
We have the procedure closure that you wrote,

5
00:00:18,000 --> 00:00:21,000
once again defined using list comprehension.

6
00:00:21,000 --> 00:00:26,000
We've got shift, which either returns something or nothing.

7
00:00:26,000 --> 00:00:32,000
We've got reductions, which has a complicated return based on jstate in the chart.

8
00:00:32,000 --> 00:00:35,000
Way up at the top of this file, I've defined a particular grammar.

9
00:00:35,000 --> 00:00:38,000
It's that grammar of balanced parentheses.

10
00:00:38,000 --> 00:00:43,000
This is just our encoding of start symbol goes to P, P goes to open parentheses P,

11
00:00:43,000 --> 00:00:48,000
P goes to nothing, and then down here I've got a candidate input open open close close.

12
00:00:48,000 --> 00:00:51,000
That's in the language of the grammar, so I desperately hope that our procedure

13
00:00:51,000 --> 00:00:53,000
is going to find that out.

14
00:00:53,000 --> 00:00:56,000
Down here I have the parsing procedure skeleton

15
00:00:56,000 --> 00:00:59,000
that I wrote around your code that does the heavy lifting.

16
00:00:59,000 --> 00:01:04,000
One of the first things I do is take all the input tokens and add in a special end<u>of</u>input marker.

17
00:01:04,000 --> 00:01:07,000
That's because sometimes we need to look ahead, for example, for shiting

18
00:01:07,000 --> 00:01:12,000
to see if the input token matches what's there, and I don't want us to walk off the end of a list.

19
00:01:12,000 --> 00:01:15,000
I'm just sort of padding out data structure by one.

20
00:01:15,000 --> 00:01:18,000
Here is the chart. It initially starts out totally empty.

21
00:01:18,000 --> 00:01:20,000
It's a Python dictionary with nothing in it.

22
00:01:20,000 --> 00:01:24,000
Our starting rule is just the first rule in the grammar.

23
00:01:24,000 --> 00:01:27,000
That's by total convention. We're going to start with S goes to P.

24
00:01:27,000 --> 00:01:32,000
I pre-initialize all of the elements of the chart with the empty list.

25
00:01:32,000 --> 00:01:36,000
Remember in that quiz I let you assume that it would always a well-defined list.

26
00:01:36,000 --> 00:01:38,000
I'm making that true here.

27
00:01:38,000 --> 00:01:41,000
Then our start state just works on this start rule.

28
00:01:41,000 --> 00:01:46,000
It uses this same symbol S. There is nothing before the red dot.

29
00:01:46,000 --> 00:01:50,000
Then we've got the red dot, then we've got the P, and that's started in state 0.

30
00:01:50,000 --> 00:01:56,000
Initially, the only thing in our chart is that at chart position zero we have this starting parsing state.

31
00:01:56,000 --> 00:02:01,000
What we're going to do is be super lazy and write ourselves a bunch of memos in this chart.

32
00:02:01,000 --> 00:02:06,000
Over and over again we're going to consider additional characters in the input

33
00:02:06,000 --> 00:02:12,000
and keep using your three procedures of closure, shifting, and reduction

34
00:02:12,000 --> 00:02:15,000
until there aren't any more changes.

35
00:02:15,000 --> 00:02:19,000
I is going to range over all of the possible tokens.

36
00:02:19,000 --> 00:02:24,000
Then until there are no more changes, we consider every state in the chart,

37
00:02:24,000 --> 00:02:29,000
and the state is something like x goes to ab dot cd from j.

38
00:02:29,000 --> 00:02:32,000
I just extract those into conveniently-named variables

39
00:02:32,000 --> 00:02:36,000
by pulling out the 0, 1, 2, 3rd element of this tuple.

40
00:02:36,000 --> 00:02:41,000
Now we're going to go through 3 options that correspond exactly to the work that you did.

41
00:02:41,000 --> 00:02:45,000
If the current state is a ab dot cd, we could compute the closure.

42
00:02:45,000 --> 00:02:50,000
If c is a nonterminal we look for each grammar rule c goes to pqr,

43
00:02:50,000 --> 00:02:52,000
we make a next state, blah, blah, blah.

44
00:02:52,000 --> 00:02:56,000
Here we're about to start parsing c, but c may be something like expression

45
00:02:56,000 --> 00:02:59,000
with its own production rules. We want to bring those in.

46
00:02:59,000 --> 00:03:03,000
Here is the code that I promised you in the quiz that I would write.

47
00:03:03,000 --> 00:03:06,000
Next_states is a called to closure. You implemented closure.

48
00:03:06,000 --> 00:03:08,000
Then we checked to see if there are any changes.

49
00:03:08,000 --> 00:03:13,000
In addition to the closure, there is also the possibility that we're going to do shifting.

50
00:03:13,000 --> 00:03:19,000
Ab dot cd, and if the tokens are c, if the next token is c, then we're totally going to shift.

51
00:03:19,000 --> 00:03:23,000
We're looking for parse token c, and the current token is exactly c.

52
00:03:23,000 --> 00:03:29,000
If that happens we are super lucky. We can parse over it and move on to j plus 1.

53
00:03:29,000 --> 00:03:32,000
Here is the code that I promised you in the quiz I would add, and there it is.

54
00:03:32,000 --> 00:03:38,000
Finally there is our third option for computing reductions.

55
00:03:38,000 --> 00:03:40,000
This one is the most complicated.

56
00:03:40,000 --> 00:03:44,000
If cd is empty we then we go back in time to chart j and bring something

57
00:03:44,000 --> 00:03:48,000
from it forward to this current location. You just finished implementing that.

58
00:03:48,000 --> 00:03:52,000
Down here we have the code that I promised that I would include in the parser

59
00:03:52,000 --> 00:03:55,000
that calls your function reductions.

60
00:03:55,000 --> 00:03:58,000
Then we're just going to keep repeating this until nothing changes.

61
00:03:58,000 --> 00:04:02,000
Remember that this was in a while true loop, so we're going to loop over and over and over again

62
00:04:02,000 --> 00:04:05,000
until there are no changes, and then we break out of the loop.

63
00:04:05,000 --> 00:04:09,000
Down here I have some purely debugging information.

64
00:04:09,000 --> 00:04:14,000
This is all just to print out the chart at the end so that we can take a look at it.

65
00:04:14,000 --> 00:04:17,000
We wouldn't actually need this if we were doing a parser.

66
00:04:17,000 --> 00:04:19,000
This is for explanatory purposes only.

67
00:04:19,000 --> 00:04:22,000
Then down here I've defined the accepting state.

68
00:04:22,000 --> 00:04:27,000
We reasoned to this earlier, which is basically the starting state,

69
00:04:27,000 --> 00:04:34,000
but with everything to the left of the red and nothing to the right of it, coming from state zero.

70
00:04:34,000 --> 00:04:40,000
If the accepting state is in the chart in position t when there were t tokens,

71
00:04:40,000 --> 00:04:44,000
then we parse the string successfully. Otherwise we do not.

72
00:04:44,000 --> 00:04:47,000
Down here, I'm checking to see what this value is.

73
00:04:47,000 --> 00:04:51,000
Is this string in the language of the grammar or not? We just print that out.

74
00:04:51,000 --> 00:04:54,000
In this particular example, the string is in the language of the grammar.

75
00:04:54,000 --> 00:04:56,000
Hopefully, that's what we'll see.

76
00:04:56,000 --> 00:04:58,000
Well, our output is quite voluminous.

77
00:04:58,000 --> 00:05:05,000
We see chart position 0, chart position 1, chart position 2.

78
00:05:05,000 --> 00:05:10,000
In fact, this was our starting state, S goes to dot P from 0.

79
00:05:10,000 --> 00:05:13,000
Then we brought in these other two from the closure.

80
00:05:13,000 --> 00:05:18,000
A good quiz question to ask yourself is why do we have this one--S goes to P dot from 0?

81
00:05:18,000 --> 00:05:24,000
My hint is P can go to nothing, so actually the empty string is accepted by this grammar.

82
00:05:24,000 --> 00:05:28,000
We end up filling in 0, 1, 2, 3, 4.

83
00:05:28,000 --> 00:05:34,000
This one actually corresponds to look ahead, that sort of end of input symbol that we saw there.

84
00:05:34,000 --> 00:05:38,000
Eventually we discover that wow, our string is in the language of this grammar.

85
00:05:38,000 --> 00:05:40,000
We're so happy. This is exactly what we wanted.

86
00:05:40,000 --> 00:05:47,000
If I were to change this a bit. I've been very minorly devious.

87
00:05:47,000 --> 00:05:52,000
Now, instead of having balanced parentheses, I have three open followed by one close.

88
00:05:52,000 --> 00:05:55,000
Now I've changed it so that the strings shouldn't be in the language of the grammar.

89
00:05:55,000 --> 00:05:58,000
We have three opens followed by one close. I click run.

90
00:05:58,000 --> 00:06:02,000
The chart is actually going to be very similar at the beginning,

91
00:06:02,000 --> 00:06:06,000
changing only near the end--possibly a little bit.

92
00:06:06,000 --> 99:59:59,999
But now we report that the string is not in the language of the grammar as expected.
