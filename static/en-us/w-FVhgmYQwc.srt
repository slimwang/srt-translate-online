1
00:00:00,220 --> 00:00:04,580
In the earlier description of data structures, we mentioned two terms that we

2
00:00:04,580 --> 00:00:08,140
have not yet talked about, interrupts and signals.

3
00:00:08,140 --> 00:00:12,170
Let's take a moment now to explain these concepts in a little more detail.

4
00:00:12,170 --> 00:00:16,920
Interrupts are events that are generated externally to a CPU

5
00:00:16,920 --> 00:00:21,582
by components that are other than the CPU where the interrupt is delivered.

6
00:00:21,582 --> 00:00:23,190
Interrupts represent, basically,

7
00:00:23,190 --> 00:00:28,640
some type of notification to the CPU that some external event has occurred.

8
00:00:28,640 --> 00:00:32,890
This can be from I/O devices like a network device delivering an interrupt that

9
00:00:32,890 --> 00:00:34,760
a network packet arrived or

10
00:00:34,760 --> 00:00:41,880
from timers notifying the CPU that a timeout has occurred or from other CPUs.

11
00:00:41,880 --> 00:00:46,270
Which particular interrupts can occur on a given platform depends on

12
00:00:46,270 --> 00:00:48,280
the specific configuration of the platform,

13
00:00:48,280 --> 00:00:51,550
like the types of devices that it has, for instance.

14
00:00:51,550 --> 00:00:55,940
Or the details about the hardware architecture and similar features.

15
00:00:55,940 --> 00:01:00,920
Another important characteristic about interrupts is they appear asynchronously.

16
00:01:00,920 --> 00:01:03,570
That's to say that they're not in the direct response to

17
00:01:03,570 --> 00:01:07,540
some specific action that's taking place on the CPU.

18
00:01:07,540 --> 00:01:11,830
Signals, on the other hand, are events that are triggered basically by

19
00:01:11,830 --> 00:01:13,790
the software that's running on the CPU.

20
00:01:13,790 --> 00:01:15,490
They're either for

21
00:01:15,490 --> 00:01:21,010
real generated by software, sort of like software interrupt, or the CPU hardware

22
00:01:21,010 --> 00:01:26,660
itself triggers certain events that are basically interpreted as signals.

23
00:01:26,660 --> 00:01:30,360
Which signals can occur on a given platform depends very much on

24
00:01:30,360 --> 00:01:32,040
the operating system.

25
00:01:32,040 --> 00:01:36,490
So two identical platforms will have the same interrupts, but if

26
00:01:36,490 --> 00:01:41,010
they're running a different operating system they will have different signals.

27
00:01:41,010 --> 00:01:42,448
Unlike hardware interrupts,

28
00:01:42,448 --> 00:01:45,970
signals can appear both synchronously and asynchronously.

29
00:01:45,970 --> 00:01:49,200
By synchronous here we mean that they occur in response to

30
00:01:49,200 --> 00:01:53,110
a specific action that took place on the CPU, and

31
00:01:53,110 --> 00:01:58,140
in response to that action, a synchronous signal is generated.

32
00:01:58,140 --> 00:02:01,220
For instance if a process is trying to touch memory that has

33
00:02:01,220 --> 00:02:07,140
not been allocated to it, then this will result in a synchronous signal.

34
00:02:07,140 --> 00:02:10,740
There's some aspects of interrupts and signals that are similar.

35
00:02:10,740 --> 00:02:13,660
Both interrupts and signals have a unique identifier.

36
00:02:13,660 --> 00:02:17,410
And its value will depend either on the hardware in the case of interrupts.

37
00:02:17,410 --> 00:02:20,690
Or on the operating system in the case of signals.

38
00:02:20,690 --> 00:02:24,070
Both interrupts and signals can be masked.

39
00:02:24,070 --> 00:02:28,600
For this, we use either a per CPU mask for the interrupt.

40
00:02:28,600 --> 00:02:33,410
Or a per process mask for the signals to disable or

41
00:02:33,410 --> 00:02:38,040
to suspend the notification that an interrupt or a signal is delivering.

42
00:02:38,040 --> 00:02:42,510
The interrupt mask is associated with a CPU because interrupts are delivered to

43
00:02:42,510 --> 00:02:44,630
the CPU as a whole.

44
00:02:44,630 --> 00:02:48,090
Whereas the signal mask is associated with a process,

45
00:02:48,090 --> 00:02:52,100
because signals are delivered to individual processes.

46
00:02:52,100 --> 00:02:55,700
If the mask indicates that the signal, or the interrupt,

47
00:02:55,700 --> 00:03:01,490
is enabled, then that will result in invoking the corresponding handler.

48
00:03:01,490 --> 00:03:04,110
The interrupt handlers are specified for

49
00:03:04,110 --> 00:03:07,580
the entire system by the operating system.

50
00:03:07,580 --> 00:03:12,160
For the signal handlers however, the operating system allows processes to

51
00:03:12,160 --> 00:03:16,330
specify their per process handling operations
