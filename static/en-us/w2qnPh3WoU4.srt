1
00:00:00,240 --> 00:00:04,740
As I said, fortunately, every file read is not

2
00:00:04,740 --> 00:00:07,790
going to result in going through so many hoops to

3
00:00:07,790 --> 00:00:10,550
get the data blocks. This is where caches come

4
00:00:10,550 --> 00:00:13,070
into play. So when you start with a filename and,

5
00:00:13,070 --> 00:00:16,219
and an offset on a client node, you look

6
00:00:16,219 --> 00:00:20,560
up the directory. And from that, you get an index

7
00:00:20,560 --> 00:00:23,008
and an offset. So, this is a data structure

8
00:00:23,008 --> 00:00:25,250
which is in the client memory, and once you get

9
00:00:25,250 --> 00:00:27,600
the index in the offset, and if this file

10
00:00:27,600 --> 00:00:31,730
has been accessed before, it's most likely in its own

11
00:00:31,730 --> 00:00:34,412
unique cache. This is a file cache of the

12
00:00:34,412 --> 00:00:38,710
file system, and if it is in your cache, then

13
00:00:38,710 --> 00:00:41,130
you get the data block. In other words, going

14
00:00:41,130 --> 00:00:43,580
from the file name to the data block that is

15
00:00:43,580 --> 00:00:47,090
associated with the file is all happening through the

16
00:00:47,090 --> 00:00:50,560
client memory because of local caching. And there's a fastest

17
00:00:50,560 --> 00:00:53,270
path for file access and hopefully there's a common

18
00:00:53,270 --> 00:00:56,450
case. Now it is possible that a file is

19
00:00:56,450 --> 00:01:00,690
shared. Or the same file is being read by

20
00:01:00,690 --> 00:01:02,830
different clients at different points in time, but in

21
00:01:02,830 --> 00:01:06,830
either case, there is a possibility that a particular

22
00:01:06,830 --> 00:01:10,110
file has been accessed by a client and therefore

23
00:01:10,110 --> 00:01:12,880
in the cache of that client, and so the

24
00:01:12,880 --> 00:01:16,390
next possibility is that you start with a directory

25
00:01:16,390 --> 00:01:18,930
You don't find it in you local cache. And if

26
00:01:18,930 --> 00:01:21,700
you don't find it in your local cache, then you have

27
00:01:21,700 --> 00:01:24,360
to go to the manager node in order to get

28
00:01:24,360 --> 00:01:27,430
a copy of the file. So this is where the manager

29
00:01:27,430 --> 00:01:30,950
map data structure, which is a replicated data structure, is

30
00:01:30,950 --> 00:01:34,370
available in the memory of every client and so given the

31
00:01:34,370 --> 00:01:36,920
index number and the offset. I can go and look

32
00:01:36,920 --> 00:01:41,390
up the manager map data structure and that tells me who's

33
00:01:41,390 --> 00:01:44,400
the manager that I have to contact to get

34
00:01:44,400 --> 00:01:47,940
this particular file. So this might involve a network

35
00:01:47,940 --> 00:01:51,650
cop because the manager node is different from the

36
00:01:51,650 --> 00:01:53,870
local node. Then I have to go to the manager

37
00:01:53,870 --> 00:01:56,310
node across a network. And when I get to

38
00:01:56,310 --> 00:01:59,610
the manager node, the manager node may say, oh

39
00:01:59,610 --> 00:02:03,390
you know what, this particular file, has been accessed

40
00:02:03,390 --> 00:02:06,650
by a different client. I know that because my metadata

41
00:02:06,650 --> 00:02:09,050
says that some of the client has got this,

42
00:02:09,050 --> 00:02:13,270
in their cache. So, the manager will tell the client

43
00:02:13,270 --> 00:02:16,200
that currently is holding a copy of the file

44
00:02:16,200 --> 00:02:19,740
in its cache. To please send the data over to

45
00:02:19,740 --> 00:02:22,720
the first guy that requested it. Now, the data

46
00:02:22,720 --> 00:02:26,280
that I requested is coming not from my local cache,

47
00:02:26,280 --> 00:02:29,110
but it is coming from the cache of a peer.

48
00:02:29,110 --> 00:02:31,760
And that's much better than going to the disk and

49
00:02:31,760 --> 00:02:34,020
putting it out of the disk, because network speeds

50
00:02:34,020 --> 00:02:38,240
are much faster than accessing the disk. So this is

51
00:02:38,240 --> 00:02:41,300
the second best path for file access. Sure, there is

52
00:02:41,300 --> 00:02:44,910
network communication involved here because, the first thing I that

53
00:02:44,910 --> 00:02:47,850
have to do is I have to hop over the

54
00:02:47,850 --> 00:02:50,730
network to get to the manager node if in fact

55
00:02:50,730 --> 00:02:53,630
I am not the manager node myself for this particular

56
00:02:53,630 --> 00:02:56,840
file that I'm looking for. That is a network hop.

57
00:02:56,840 --> 00:02:59,010
And there could be another network hop if the manager

58
00:02:59,010 --> 00:03:02,680
says, oh, this particular file is cached in a different

59
00:03:02,680 --> 00:03:06,060
node. In that case, there is another network hop to

60
00:03:06,060 --> 00:03:09,880
go to the client that currently containing that particular file.

61
00:03:09,880 --> 00:03:12,820
And once we get to that, there may be another

62
00:03:12,820 --> 00:03:15,540
network hop in order to send the data over to

63
00:03:15,540 --> 00:03:19,210
the requester. So potentially there could be three network hops

64
00:03:19,210 --> 00:03:22,100
in order to get The file that I'm looking for,

65
00:03:22,100 --> 00:03:28,870
but it could be less than that depending on the core location of the manager and

66
00:03:28,870 --> 00:03:30,680
the node that is requesting it or the

67
00:03:30,680 --> 00:03:33,930
manager and the node that contains a copy of

68
00:03:33,930 --> 00:03:39,800
that file itself. So this is the second best path for file access. But there is

69
00:03:39,800 --> 00:03:43,970
also the pathologically 'real long way' of accessing

70
00:03:43,970 --> 00:03:46,970
a particular file, and that path is shown here,

71
00:03:46,970 --> 00:03:49,720
using all of the data structures that I

72
00:03:49,720 --> 00:03:53,020
mentioned earlier that is available at the manager. You

73
00:03:53,020 --> 00:03:55,260
start with a file name, look up the

74
00:03:55,260 --> 00:03:58,740
directory, get the index number and the offset. It's

75
00:03:58,740 --> 00:04:00,770
not in your cache. You go to the

76
00:04:00,770 --> 00:04:04,770
manager by looking up the manager map data structure

77
00:04:04,770 --> 00:04:07,730
that's in my local memory. I go the

78
00:04:07,730 --> 00:04:12,920
manager and the manager then looks up its metadata

79
00:04:12,920 --> 00:04:15,650
for this file, finds that nobody has it in

80
00:04:15,650 --> 00:04:17,779
the cache So it has to pull it from the

81
00:04:17,779 --> 00:04:23,070
desk. If it has to pull it from the desk, then it has to look up its imap data

82
00:04:23,070 --> 00:04:28,410
structure, the imap data structure, and the stripe group map data structure

83
00:04:28,410 --> 00:04:33,310
in order to find out the location of the I node that

84
00:04:33,310 --> 00:04:38,330
corresponds to the log segment that I am looking for. That look up happens

85
00:04:38,330 --> 00:04:40,670
through the imap data structure, stripe group

86
00:04:40,670 --> 00:04:42,980
map data structure, then I can to the

87
00:04:42,980 --> 00:04:49,050
storage server and get the index node of the log segment ID for the requested

88
00:04:49,050 --> 00:04:55,560
data block of this client. Once I have that, then the manager has to look up the

89
00:04:55,560 --> 00:05:03,850
stripe group map to see what storage servers. Have this log segment striped,

90
00:05:03,850 --> 00:05:07,060
and out of that which storage server should I

91
00:05:07,060 --> 00:05:11,400
contact for the particular portion of the file that

92
00:05:11,400 --> 00:05:14,200
you're looking for? And that storage server will be

93
00:05:14,200 --> 00:05:17,070
contacted and that storage server is going to give the

94
00:05:17,070 --> 00:05:19,590
data block that is requested by the client. So

95
00:05:19,590 --> 00:05:22,494
you can see that in this long path, there

96
00:05:22,494 --> 00:05:26,130
is network hop as well as accessing the storage

97
00:05:26,130 --> 00:05:29,170
servers to pull the data blocks. It is possible that

98
00:05:29,170 --> 00:05:32,160
the index node for the log segment ID

99
00:05:32,160 --> 00:05:35,760
associated with this file has been previously accessed by

100
00:05:35,760 --> 00:05:38,330
this manager. In which case, it doesn't have to

101
00:05:38,330 --> 00:05:40,800
go to the storage server to get the Index

102
00:05:40,800 --> 00:05:43,820
node for the large segment, because it'll be present

103
00:05:43,820 --> 00:05:46,270
in the memory of the manager as part of

104
00:05:46,270 --> 00:05:50,370
its caching strategy. And therefore it can bypass these

105
00:05:50,370 --> 00:05:54,830
two network hops because directly from this strip group

106
00:05:54,830 --> 00:06:01,410
map it can figure out what the long segment ID is locally cached so that it can

107
00:06:01,410 --> 00:06:04,640
then go to this stripe group map data structure

108
00:06:04,640 --> 00:06:07,630
and figure out. Where on the disk the data

109
00:06:07,630 --> 00:06:11,490
blocks for that log segment is actually secured, so

110
00:06:11,490 --> 00:06:13,400
we might be able to get rid of at

111
00:06:13,400 --> 00:06:16,680
least two of these network hops if you're lucky

112
00:06:16,680 --> 00:06:20,580
and this particular log segment has been accessed before

113
00:06:20,580 --> 00:06:23,650
by this manager, it'll be in the memory

114
00:06:23,650 --> 00:06:26,460
of the manager. And therefore we can avoid these

115
00:06:26,460 --> 00:06:29,510
two network hubs. But the worst case scenario,

116
00:06:29,510 --> 00:06:32,290
if this particular log segment is never being accessed

117
00:06:32,290 --> 00:06:35,830
before then the long way to get to

118
00:06:35,830 --> 00:06:40,020
the data block that you're requesting is going through

119
00:06:40,020 --> 00:06:43,550
the data structures in the manager, network hub, storage

120
00:06:43,550 --> 00:06:45,630
look up, and get the data and give it

121
00:06:45,630 --> 00:06:46,260
to the client.
