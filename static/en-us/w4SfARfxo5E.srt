1
00:00:00,190 --> 00:00:02,961
The update function for the world object is called Step, and its inputs are a

2
00:00:02,961 --> 00:00:06,852
little bit tricky, so let's take a look at them. The first parameter here

3
00:00:06,852 --> 00:00:10,076
represents the frame rate frequency that our physics engine uses to track

4
00:00:10,076 --> 00:00:13,970
through its calculations. Think of this value as the amount that we want the

5
00:00:13,970 --> 00:00:17,774
physics engine to move the physics world forward each computational frame. And

6
00:00:17,774 --> 00:00:20,702
of course, we want this value to match what the visual world update loop is

7
00:00:20,702 --> 00:00:24,879
doing, too, otherwise things might feel off. Now for our purposes, we make the

8
00:00:24,879 --> 00:00:28,814
assumption that the game is running at a solid 60 frames a second. Thus, we

9
00:00:28,814 --> 00:00:32,658
expect the update loop to be called 60 times a second, giving us a time slice

10
00:00:32,658 --> 00:00:36,986
value of 1 over 60. Next, we pass two values to the Step function which

11
00:00:36,986 --> 00:00:40,250
represent the number of iterations that the physics engine should spend solving

12
00:00:40,250 --> 00:00:44,790
collisions and velocities to ensure proper placement. Now, without going into

13
00:00:44,790 --> 00:00:47,760
too much detail, solving for collisions in an environment while also ensuring

14
00:00:47,760 --> 00:00:50,820
that objects aren't interpenetrating is actually a pretty cumbersome process,

15
00:00:50,820 --> 00:00:56,330
and can't really be solved in a single pass. For example, consider if two

16
00:00:56,330 --> 00:01:00,170
objects are penetrating and fixing the penetration causes the penetration

17
00:01:00,170 --> 00:01:04,652
collision with a new object. And of course in turn fixing that one may cause

18
00:01:04,652 --> 00:01:08,983
yet another collision. And so on and so on. As such, the physics engine will do

19
00:01:08,983 --> 00:01:13,285
passes over the physics object and solve the items iteratively. The number we

20
00:01:13,285 --> 00:01:17,740
pass in here represents how many passes Box2D should do before moving on. I.e.,

21
00:01:17,740 --> 00:01:21,260
the higher the numbers are, the more precise the collision data, since we're

22
00:01:21,260 --> 00:01:25,495
iterating to find a solution. The lower the number, the less precise the

23
00:01:25,495 --> 00:01:28,240
collision information, but the more performant it is, because we're not

24
00:01:28,240 --> 00:01:30,100
spending extra cycles.
