1
00:00:00,000 --> 00:00:05,000
One way to solve this problem is to add a count to the modular exponentiation routine given in class,

2
00:00:05,000 --> 00:00:09,000
but I'd like to discuss another way of counting the number of multiplications.

3
00:00:09,000 --> 00:00:13,000
First, I want to observer that when a number is represented in binary,

4
00:00:13,000 --> 00:00:15,000
it's easy to tell if it's odd or even.

5
00:00:15,000 --> 00:00:17,000
All you have to do is look at the last digit.

6
00:00:17,000 --> 00:00:22,000
For example, 10 is 1010, a 11 is 1011.

7
00:00:22,000 --> 00:00:24,000
Dividing by 2 is a shift right.

8
00:00:24,000 --> 00:00:30,000
For example, 20 to 10 to 5 is shift and then another shift.

9
00:00:30,000 --> 00:00:35,000
In our modular exponentiation routine, if our exponent is even, we divide by 2.

10
00:00:35,000 --> 00:00:38,000
It costs 1 multiplication.

11
00:00:38,000 --> 00:00:43,000
If our exponent is odd, we subtract 1 from it,

12
00:00:43,000 --> 00:00:46,000
which will make it even, and then we divide by 2.

13
00:00:46,000 --> 00:00:50,000
If our exponent is odd, it costs 2 multiplications.

14
00:00:50,000 --> 00:00:54,000
From this, we can easily see that for every 1 in the exponent when written in binary,

15
00:00:54,000 --> 00:00:59,000
we do two multiplications, and for every 0 we do only do one multiplication.

16
00:00:59,000 --> 00:01:05,000
Writing our four exponents in binary, where 1023 is--that should hopefully be ten 1s--

17
00:01:05,000 --> 00:01:15,000
gives us a cost of 20; 1015 has a cost of 13; 4096--

18
00:01:15,000 --> 00:01:20,000
which should be 1 followed by hopefully 12 zeros--gives a cost of 14;

19
00:01:20,000 --> 00:01:23,000
and 4097 gives a cost of 15.

20
00:01:23,000 --> 99:59:59,999
So 1023 is out most expensive operation, and that is our correct answer.
