1
00:00:00,310 --> 00:00:04,330
The term flow in web security refers to
the way information is exchanged between

2
00:00:04,330 --> 00:00:06,090
a client, server and

3
00:00:06,090 --> 00:00:09,940
OAuth provider to ensure secure
communication across the internet.

4
00:00:09,940 --> 00:00:13,220
The specifications for
OAuth 2 provide a lot of flexibility for

5
00:00:13,220 --> 00:00:17,510
developers to implement a security flow
that works best for the project at hand.

6
00:00:17,510 --> 00:00:20,370
OAuth allows for a flow that
can happen on the client side.

7
00:00:20,370 --> 00:00:23,570
This means that all of the code to
authenticate the user is initiated via

8
00:00:23,570 --> 00:00:25,630
JavaScript from the user's browser.

9
00:00:25,630 --> 00:00:27,242
This implementation is very useful for

10
00:00:27,242 --> 00:00:29,950
single-page browser-based
web applications.

11
00:00:29,950 --> 00:00:32,740
OAuth also supports mobile
authorization, such that

12
00:00:32,740 --> 00:00:36,489
mobile device apps can authenticate and
gain access similarly to a browser.

13
00:00:37,550 --> 00:00:41,180
Another possible and
very popular flow is on the server side.

14
00:00:41,180 --> 00:00:44,550
Server side flow allows the server
to obtain an access token

15
00:00:44,550 --> 00:00:48,350
to allow the server to make API
requests on behalf of the user.

16
00:00:48,350 --> 00:00:50,240
The user has the option
to set a timeout or

17
00:00:50,240 --> 00:00:52,660
revoke access to these
tokens at any time.

18
00:00:52,660 --> 00:00:55,650
Each of these implementations
has various pros and cons.

19
00:00:55,650 --> 00:00:58,280
Client side authentication is quick and
easy, but

20
00:00:58,280 --> 00:01:01,350
a lot of trust is placed on
the browser or mobile device.

21
00:01:01,350 --> 00:01:04,190
And the server cannot make API
calls to the OAuth provider

22
00:01:04,190 --> 00:01:05,780
on behalf of the user.

23
00:01:05,780 --> 00:01:09,690
Server side implementation gives more
power to a server side application, but

24
00:01:09,690 --> 00:01:12,430
the server is now responsible for
securely implementing session

25
00:01:12,430 --> 00:01:16,490
checking for its users and
secure storage of these access tokens.

26
00:01:16,490 --> 00:01:19,120
Choosing the right OAuth flow for
an application really depends on

27
00:01:19,120 --> 00:01:21,780
the specific needs of
a particular application.

28
00:01:21,780 --> 00:01:24,480
If you are interested in learning
more about each of these flows,

29
00:01:24,480 --> 00:01:27,075
I have provided some documentation
in the instructor notes.

30
00:01:27,075 --> 00:01:29,240
Google+ uses a hybridized flow for

31
00:01:29,240 --> 00:01:32,540
logins that requires authentication
to happen on the client, but

32
00:01:32,540 --> 00:01:35,690
allows the server to make API
calls on behalf of the client.

33
00:01:35,690 --> 00:01:39,080
This lesson will focus on the design and
implementation of this hybridized flow.
