1
00:00:00,000 --> 00:00:03,000
Now the second homework assignment here was a signup page.

2
00:00:03,000 --> 00:00:07,000
Here's my signup page, and the idea was you could type in a user name

3
00:00:07,000 --> 00:00:11,000
and a password and an optional email if you want

4
00:00:11,000 --> 00:00:15,000
and then click submit, and it would take you to a welcome page.

5
00:00:15,000 --> 00:00:20,000
Now, if you leave your passwords blank, you get an error message.

6
00:00:20,000 --> 00:00:23,000
If you don't enter both passwords in, it complains that they didn't match.

7
00:00:23,000 --> 00:00:28,000
If you give an invalid name, which in my case I made it be a minimum of 3 characters,

8
00:00:28,000 --> 00:00:33,000
it complains that it's not a valid name, and an email is optional,

9
00:00:33,000 --> 00:00:36,000
but if I type in something that's not a valid email, it complains.

10
00:00:36,000 --> 00:00:41,000
If I type in an email--I'm going to type in some valid stuff and hit submit--

11
00:00:41,000 --> 00:00:43,000
we get to the welcome page.

12
00:00:43,000 --> 00:00:45,000
Okay, let's look at the code for this real quick.

13
00:00:45,000 --> 00:00:47,000
One last thing I did I should show you.

14
00:00:47,000 --> 00:00:50,000
I double check to make sure the user name is valid here too,

15
00:00:50,000 --> 00:00:52,000
so if you put in an invalid name in the URL,

16
00:00:52,000 --> 00:00:55,000
it will automatically redirect you to the signup page.

17
00:00:55,000 --> 00:00:57,000
Okay, let's take a peek at the code.

18
00:00:57,000 --> 00:01:00,000
Here is the portion of the code where we are doing the signup handler.

19
00:01:00,000 --> 00:01:03,000
You can see my URLs down here.

20
00:01:03,000 --> 00:01:05,000
I've got unit2/signup goes to the class signup,

21
00:01:05,000 --> 00:01:08,000
and unit2/welcome goes to the class welcome,

22
00:01:08,000 --> 00:01:12,000
and the signup page, if you just get it, it renders the empty signup form,

23
00:01:12,000 --> 00:01:14,000
which is another template that I'm using.

24
00:01:14,000 --> 00:01:16,000
I'll show you here. This is just HTML.

25
00:01:16,000 --> 00:01:20,000
Now, again, you could have used a big string, and most of you probably did.

26
00:01:20,000 --> 00:01:22,000
Here is my HTML.

27
00:01:22,000 --> 00:01:24,000
You can see it's got a form method post.

28
00:01:24,000 --> 00:01:26,000
I used the table to lay out the form. You don't have to do that.

29
00:01:26,000 --> 00:01:28,000
We didn't grade on the appearance of it.

30
00:01:28,000 --> 00:01:32,000
I just used the table to make my columns line up nice.

31
00:01:32,000 --> 00:01:35,000
The important part was we've got an input type text.

32
00:01:35,000 --> 00:01:38,000
Name is username, and the value,

33
00:01:38,000 --> 00:01:42,000
this is another template variable, and then the error.

34
00:01:42,000 --> 00:01:44,000
Here's another template variable.

35
00:01:44,000 --> 00:01:49,000
This could just as easily be %s in the way that you learned how to do it.

36
00:01:49,000 --> 00:01:52,000
We've got input type password, name password.

37
00:01:52,000 --> 00:01:54,000
Value is blank.

38
00:01:54,000 --> 00:01:56,000
The value is blank here because whenever there's an error,

39
00:01:56,000 --> 00:01:59,000
I don't put the passwords back in the form field.

40
00:01:59,000 --> 00:02:02,000
If there's an error with the passwords, or if there's an error with anything,

41
00:02:02,000 --> 00:02:04,000
we make them retype their passwords.

42
00:02:04,000 --> 00:02:06,000
The password error field.

43
00:02:06,000 --> 00:02:08,000
The verify, input type password, name verify.

44
00:02:08,000 --> 00:02:10,000
That's for verifying the password,

45
00:02:10,000 --> 00:02:13,000
and an error for that one, and then we've got our email,

46
00:02:13,000 --> 00:02:16,000
email optional, type text, name email, value email.

47
00:02:16,000 --> 00:02:19,000
If there's an error with it, we'll leave it in there so they can update it.

48
00:02:19,000 --> 00:02:23,000
And then the error message for that field and input type = submit,

49
00:02:23,000 --> 00:02:26,000
and let's take a peek at the code for this guy.

50
00:02:26,000 --> 00:02:31,000
When you post to here--and what I did is I have a variable called have_error,

51
00:02:31,000 --> 00:02:34,000
and if we make it through this whole function and this is still false,

52
00:02:34,000 --> 00:02:36,000
then we've rendered the success page.

53
00:02:36,000 --> 00:02:40,000
Otherwise, we render the error page.

54
00:02:40,000 --> 00:02:42,000
First I get the parameters.

55
00:02:42,000 --> 00:02:46,000
I get the username, password, verify, email out of the request.

56
00:02:46,000 --> 00:02:49,000
Request.get fetches those parameters.

57
00:02:49,000 --> 00:02:52,000
Then what I do is I run it through these functions that I've written,

58
00:02:52,000 --> 00:02:54,000
valid<u>username, valid</u>password, and valid_email.

59
00:02:54,000 --> 00:02:56,000
I've defined regular expressions.

60
00:02:56,000 --> 00:02:59,000
I believe we gave these to you for each of these,

61
00:02:59,000 --> 00:03:03,000
so a username is just a through z, 0 through 9.

62
00:03:03,000 --> 00:03:05,000
It basically has to be between 3 and 20 characters.

63
00:03:05,000 --> 00:03:09,000
We provided this to you, and I think we showed you how to use regular expressions as well.

64
00:03:09,000 --> 00:03:11,000
This function is very simple.

65
00:03:11,000 --> 00:03:17,000
If there is a user name, basically if it's not blank and it matches this regular expression, true.

66
00:03:17,000 --> 00:03:21,000
Password is a similar thing, basically any characters between the length 3 and 20.

67
00:03:21,000 --> 00:03:25,000
If there's a password and it matches this regular expression, return true,

68
00:03:25,000 --> 00:03:28,000
and the email, the actual email regular expression to validate an email

69
00:03:28,000 --> 00:03:30,000
is comically long.

70
00:03:30,000 --> 00:03:32,000
It's thousands of characters.

71
00:03:32,000 --> 00:03:35,000
I use a simpler version, which is basically a bunch of characters, an @ sign,

72
00:03:35,000 --> 00:03:38,000
a bunch of characters, a period, and then a bunch of characters.

73
00:03:38,000 --> 00:03:40,000
I find that works pretty well.

74
00:03:40,000 --> 00:03:43,000
If you try to get more complicated than that, there's a good chance you'll

75
00:03:43,000 --> 00:03:46,000
reject what would otherwise be a valid email so I usually let--

76
00:03:46,000 --> 00:03:49,000
if we're going to send emails to people, I let whatever tool I'm using

77
00:03:49,000 --> 00:03:53,000
to send the email--that can break if the email is not valid.

78
00:03:53,000 --> 00:03:55,000
This gets us close enough.

79
00:03:55,000 --> 00:03:59,000
In fact, I think Reddit uses this regular expression still, and it's always worked fine.

80
00:03:59,000 --> 00:04:02,000
I think there's some limits to the length of this, but one more thing.

81
00:04:02,000 --> 00:04:05,000
I make this dictionary called "params," and these are params I'm going to send

82
00:04:05,000 --> 00:04:07,000
back in to rendering.

83
00:04:07,000 --> 00:04:12,000
This would be similar to if you're using the string substitution to draw your HTML.

84
00:04:12,000 --> 00:04:14,000
You're basically going to build up this dictionary of the variables

85
00:04:14,000 --> 00:04:16,000
that you want to substitute in.

86
00:04:16,000 --> 00:04:19,000
I'm always going to send back the username and email

87
00:04:19,000 --> 00:04:21,000
if it's a bad, bad form.

88
00:04:21,000 --> 00:04:25,000
If the username wasn't valid, I add the error_username

89
00:04:25,000 --> 00:04:28,000
to this params dictionary, and I set have_error = true.

90
00:04:28,000 --> 00:04:31,000
If the password isn't valid, here's the password error.

91
00:04:31,000 --> 00:04:33,000
Have_error = true.

92
00:04:33,000 --> 00:04:38,000
If the password is valid and it doesn't equal the verify variable from the request,

93
00:04:38,000 --> 00:04:42,000
we say that the passwords don't match and have_error = true, and then email.

94
00:04:42,000 --> 00:04:45,000
A valid email, if you look, is different from the other ones.

95
00:04:45,000 --> 00:04:48,000
These ones say "return password and."

96
00:04:48,000 --> 00:04:52,000
This one says "return not email or," so what this is saying is

97
00:04:52,000 --> 00:04:55,000
either they don't specify an email or it has to match this regular expression.

98
00:04:55,000 --> 00:04:57,000
Everybody else says they have to give a password

99
00:04:57,000 --> 00:04:59,000
and it has to match the regular expression.

100
00:04:59,000 --> 00:05:02,000
That's how we handle the email is optional case,

101
00:05:02,000 --> 00:05:04,000
and then basically if we have an error,

102
00:05:04,000 --> 00:05:07,000
I just render the signup form again with our error messages,

103
00:05:07,000 --> 00:05:10,000
and if we don't have an error, I redirect to this URL

104
00:05:10,000 --> 00:05:14,000
and put in a username into the URL as a get parameter.

105
00:05:14,000 --> 00:05:19,000
When we handle unit2/welcome, we come to this handler here, welcome.

106
00:05:19,000 --> 00:05:23,000
And we get the username out of the request using request.get,

107
00:05:23,000 --> 00:05:27,000
and then if it's a valid username, render the welcome HTML template,

108
00:05:27,000 --> 00:05:31,000
username = username, or redirect back to the signup page,

109
00:05:31,000 --> 00:05:35,000
and the welcome HTML template is pretty short.

110
00:05:35,000 --> 00:05:37,000
All it is is just basic HTML, and it says "Welcome,"

111
00:05:37,000 --> 00:05:40,000
and then it includes the username, and that's that.

112
00:05:40,000 --> 00:05:42,000
So, that was Homework 2.

113
00:05:42,000 --> 00:05:45,000
I hope you managed to figure everything out.

114
00:05:45,000 --> 00:05:48,000
I hope you now--after seeing my solution with the templates

115
00:05:48,000 --> 00:05:50,000
and your solution with the string substitutions--

116
00:05:50,000 --> 00:05:52,000
are eager to start using these templates on your own.

117
00:05:52,000 --> 00:05:56,000
I'm not going to teach you how to use them specifically,

118
00:05:56,000 --> 00:05:59,000
but there's plenty of documentation on the Google App Engine site,

119
00:05:59,000 --> 00:06:02,000
and I'm sure in the forums there will be lots of activity as well.

120
00:06:02,000 --> 00:06:06,000
And also, we can provide these few lines here and this base class

121
00:06:06,000 --> 00:06:08,000
if you all would find that helpful.

122
00:06:08,000 --> 00:06:12,000
Okay, good job everybody, and on to Unit 3.
