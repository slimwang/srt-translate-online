1
00:00:00,530 --> 00:00:02,400
You didn't think we were just
going to be playing Asteroids

2
00:00:02,400 --> 00:00:03,990
games forever, did you?

3
00:00:03,990 --> 00:00:07,550
This is Pie Noon, it's a more
sophisticated example you can refer to

4
00:00:07,550 --> 00:00:10,100
in order to see how a variety of how
more advanced techniques are used.

5
00:00:10,100 --> 00:00:12,950
It's a simple multiplayer party game,

6
00:00:12,950 --> 00:00:13,914
where you can throw
pies at your friends.

7
00:00:15,225 --> 00:00:15,905
It's written in C++ and

8
00:00:15,905 --> 00:00:19,625
supports up to four players using
a multiscreen mode with Android TV.

9
00:00:20,845 --> 00:00:23,775
In this section, I'll introduce topics
in technologies that help you create

10
00:00:23,775 --> 00:00:25,105
a great gaming experience,

11
00:00:25,105 --> 00:00:28,485
as well as something to take advantage
of unique capabilities of Android.

12
00:00:28,485 --> 00:00:30,305
We won't go into great depth
with each of these, but

13
00:00:30,305 --> 00:00:33,190
you will get an idea of what
the different components have to offer.

14
00:00:33,190 --> 00:00:34,730
And when you're ready,
you can explore further

15
00:00:34,730 --> 00:00:37,650
on your own by following the links
in the instruction notes.

16
00:00:37,650 --> 00:00:40,080
First up,
we have Google Play games services.

17
00:00:40,080 --> 00:00:42,210
You can think of Google Play
services as a toolbox,

18
00:00:42,210 --> 00:00:43,690
which is tightly
integrated with Android.

19
00:00:44,870 --> 00:00:47,480
It helps you with common
tasks in game development.

20
00:00:47,480 --> 00:00:50,170
These include storing and
synchronizing game data on the cloud,

21
00:00:50,170 --> 00:00:53,160
as well as sending invitations and
auto-matching players.

22
00:00:53,160 --> 00:00:55,510
Also included are tools to
help you build real time and

23
00:00:55,510 --> 00:00:57,610
turn based multiplayer
gaming experiences.

24
00:00:58,640 --> 00:01:00,050
It also helps you build achievements and

25
00:01:00,050 --> 00:01:03,300
quests into your game,
which are great ways to hook players.

26
00:01:03,300 --> 00:01:05,470
You can also collect analytics
data to help you understand how

27
00:01:05,470 --> 00:01:07,480
players interact with your game.

28
00:01:07,480 --> 00:01:09,710
All you have to do is create an account
on the Play Developer Console,

29
00:01:09,710 --> 00:01:12,639
and this works a lot like the Cast
Developer Console we covered earlier.

30
00:01:13,640 --> 00:01:15,040
All these features are free of charge,

31
00:01:15,040 --> 00:01:17,220
aside from a small one-time
fee to verify your account.

32
00:01:18,390 --> 00:01:21,830
After that, you can access all these
games features via Google API client,

33
00:01:21,830 --> 00:01:25,170
just like when you use any other
feature with Google Play services.

34
00:01:25,170 --> 00:01:28,470
And don't forget to add this scope games
when you create your API client object,

35
00:01:28,470 --> 00:01:30,350
that's a common mistake that
developers do all the time.

36
00:01:31,480 --> 00:01:33,118
Next up are nearby connections.

37
00:01:33,118 --> 00:01:36,346
The nearby connections API lets you
discover other devices on the local

38
00:01:36,346 --> 00:01:39,740
network and exchange messages
with them in real time.

39
00:01:39,740 --> 00:01:41,170
This lets you do two great things.

40
00:01:42,330 --> 00:01:45,350
First you can allow one player to setup
a multiplayer game on the local network

41
00:01:45,350 --> 00:01:46,580
and then have other players join in.

42
00:01:47,650 --> 00:01:49,130
Or much cooler in my opinion,

43
00:01:49,130 --> 00:01:52,930
one player can setup the game on
a shared device like an Android TV.

44
00:01:52,930 --> 00:01:55,510
Then other players can join
in using their mobile device

45
00:01:55,510 --> 00:01:57,120
as a display controller combination.

46
00:01:58,210 --> 00:02:01,550
Individual players see a customized
display on their mobile device

47
00:02:01,550 --> 00:02:03,450
as well as a shared display
on their main screen.

48
00:02:04,570 --> 00:02:07,610
This is a very unique and
extremely catchy capability, and

49
00:02:07,610 --> 00:02:09,960
it makes your game super easy to use and
fun to interact with.

50
00:02:10,960 --> 00:02:13,830
Inside the instructor notes, you'll find
a video demonstrating exactly how this

51
00:02:13,830 --> 00:02:16,028
works, and doc you can follow
to build this into your game.

52
00:02:16,028 --> 00:02:21,410
In Android 5.0 Lollipop or higher,
multiple networks are supported.

53
00:02:21,410 --> 00:02:24,200
This means that there can be more than
one connecting network on an Android TV

54
00:02:24,200 --> 00:02:25,470
device at one time.

55
00:02:25,470 --> 00:02:28,100
For instance, both ethernet and Wi-Fi.

56
00:02:28,100 --> 00:02:30,810
You can check for this case
using the connectivity manager.

57
00:02:30,810 --> 00:02:32,480
And if so,
you can actually select the type of

58
00:02:32,480 --> 00:02:33,760
network you'd like to use in your game.

59
00:02:34,820 --> 00:02:36,390
Although there's usually not
a tremendous difference,

60
00:02:36,390 --> 00:02:38,880
some developers prefer ethernet for
the slightly lower latency.

61
00:02:40,020 --> 00:02:41,865
Next up we have WebP.

62
00:02:41,865 --> 00:02:44,850
WebP is an open sourced image
format developed by Google.

63
00:02:44,850 --> 00:02:46,500
It's more space efficient than JPEG or

64
00:02:46,500 --> 00:02:49,490
PNG without a noticeable
loss in quality.

65
00:02:49,490 --> 00:02:51,280
You can use this to
compress your textures and

66
00:02:51,280 --> 00:02:52,960
reduce the size of your
final game package.

67
00:02:54,100 --> 00:02:57,978
WebP supports transparency in loss
less compression as well as loss

68
00:02:57,978 --> 00:03:00,564
compression if you need
even smaller file sizes.

69
00:03:00,564 --> 00:03:03,220
As a default this is supported by
Android TV, so you don't need to

70
00:03:03,220 --> 00:03:06,450
add any external libraries to encode and
decode WebP images.

71
00:03:06,450 --> 00:03:09,680
There are also open source libraries for
other platforms.

72
00:03:09,680 --> 00:03:13,440
And speaking of Pie Noon and C++, you
should be aware of the Android NDK, or

73
00:03:13,440 --> 00:03:15,330
Native Development Toolkit.

74
00:03:15,330 --> 00:03:18,270
This tool set allows you to implement
parts of your app using native code.

75
00:03:19,300 --> 00:03:20,720
A really important note here,

76
00:03:20,720 --> 00:03:24,100
the vast majority of apps will not
benefit from this approach, and

77
00:03:24,100 --> 00:03:28,030
you should do this only if you have
a very good and very specific reason.

78
00:03:28,030 --> 00:03:30,175
The best reason I can think
of is if you have a large,

79
00:03:30,175 --> 00:03:33,270
pre-existing code base you'd like to
reuse, like in the case of High Noon.

80
00:03:34,490 --> 00:03:37,120
Generally, the performance
tradeoffs of using C++,

81
00:03:37,120 --> 00:03:39,540
if any,
are not worth the complexity cost.

82
00:03:40,660 --> 00:03:44,230
Now on Android TV, NDK almost always
works without any problems at all.

83
00:03:44,230 --> 00:03:47,020
However I'd strongly recommend you
test your code on a real device,

84
00:03:47,020 --> 00:03:47,720
not on an emulator.
