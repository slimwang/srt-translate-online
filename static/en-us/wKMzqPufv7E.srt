1
00:00:00,210 --> 00:00:06,116
Let's suppose that you're trying to figure out the best places to open a chain of stores in the United States.

2
00:00:06,116 --> 00:00:09,100
So let's say you have a list of cities in the United States.

3
00:00:09,100 --> 00:00:12,007
And here I went and traced a map from the United States.

4
00:00:12,007 --> 00:00:12,616
I can't draw this well.

5
00:00:12,616 --> 00:00:20,073
I traced a map onto the tablet, and I dotted in, I think, the 50 largest cities in the U.S.

6
00:00:20,073 --> 00:00:24,420
And let's say that you're trying to open a chain of stores across the United States, and you want to know

7
00:00:24,420 --> 00:00:27,852
the accessible population of each city, meaning

8
00:00:27,852 --> 00:00:31,006
how many people could easily get to a store in this city?

9
00:00:31,006 --> 00:00:36,961
So let's define accessible population as all the people that live in cities within 300 kilometers of this city.

10
00:00:36,961 --> 00:00:41,461
So these are people who could go for a long drive and get to your store.

11
00:00:41,461 --> 00:00:45,512
How are we going to find the accessible population of each city?

12
00:00:45,512 --> 00:00:50,920
You could launch a thread for each city and have it look at every other city. You get the idea.

13
00:00:50,920 --> 00:00:54,700
And then it could compute the distance to all those other cities, and if it's

14
00:00:54,700 --> 00:00:59,639
under 300 kilometers, then add the population of that other city to a running total.

15
00:00:59,670 --> 00:01:02,665
So in practice, most of these would be more than 300 kilometers away,

16
00:01:02,665 --> 00:01:05,212
and you'd just discard them.

17
00:01:05,212 --> 00:01:09,092
That would be really inefficient, right? You can imagine that--having every city check every other city.

18
00:01:09,092 --> 00:01:11,293
I've only drawn 50 cities here--if I'd drawn

19
00:01:11,309 --> 00:01:14,977
the 2,000, or 3,000, or 10,000 cities that actually exist in the United States,

20
00:01:15,008 --> 00:01:17,460
this would quickly become way too much work.

21
00:01:17,506 --> 00:01:24,436
So instead we could create a spatial data structure, such as overlaying let say a 300 kilometer grid onto the map

22
00:01:24,436 --> 00:01:27,316
and then creating a list of cities that fall in each grid cell.

23
00:01:27,316 --> 00:01:32,270
So this cell will be empty. This one would have 3 cities. This one would have 1, 2, 3, 4 cities.

24
00:01:32,270 --> 00:01:36,386
I think that one has 3, this one is 1 and so on.

25
00:01:36,417 --> 00:01:40,700
Right, so we could make a list of all the cities that fall into each grid cell.

26
00:01:40,700 --> 00:01:45,996
And now if you want to find all cities within 300 kilometers of a given city,

27
00:01:45,996 --> 00:01:49,037
say Denver here, you only need to look at the grid

28
00:01:49,037 --> 00:01:51,125
cell that that city falls in and the neighboring cells.

29
00:01:51,125 --> 00:01:53,823
So I need to check these 3 here.

30
00:01:53,823 --> 00:01:59,376
There are two cities so close together, you can not even tell that is Denver and Boulder. I need to check these cities.

31
00:01:59,376 --> 00:02:05,378
So I still have several checks to make but this is still vastly fewer checks than I would have

32
00:02:05,378 --> 00:02:11,591
to make if I were checking all of the cities against all of the other cities.

33
00:02:11,591 --> 00:02:16,508
So by creating these grid cells, these bins that contain the

34
00:02:16,524 --> 00:02:18,966
cities and therefore being able to restrict which sections, which bins I need

35
00:02:18,966 --> 00:02:25,098
to look in, I've drastically reduced the amount of work that I need to do

36
00:02:25,098 --> 00:02:29,613
to define this accessible population that I'm trying to figure out.

37
00:02:29,613 --> 00:02:33,375
So this is a great example of binning. Let's have a quiz.

38
00:02:33,375 --> 00:02:39,179
Which of the following operations would probably benefit from the geographic binning stage described above?

39
00:02:39,179 --> 00:02:42,614
Suppose that for all U.S. cities in the list we wanted to compute a

40
00:02:42,614 --> 00:02:46,825
histogram of city distances from a central warehouse in Denver, Colorado.

41
00:02:46,825 --> 00:02:51,637
What if you had a list of roads, each of which was represented as a list of line

42
00:02:51,637 --> 00:02:56,545
segments, and you wanted to compute the population of cities within 20 kilometers of that road.

43
00:02:56,545 --> 00:02:59,846
Would it help to use the geographic binning that we described?

44
00:02:59,846 --> 00:03:03,997
Most U.S. cities are in geographic administrative divisions called counties.

45
00:03:03,997 --> 00:03:07,287
To give you a sense of what a county is if you're not from the U.S.,

46
00:03:07,287 --> 00:03:10,878
I've pulled out the Wikipedia map of U.S. counties and I've zoomed in so you can

47
00:03:10,878 --> 00:03:14,702
see some of the counties in our states.

48
00:03:14,702 --> 00:03:19,101
And as you can see there's thousands of counties. There's about 3,000 counties across the U.S.

49
00:03:19,101 --> 00:03:23,765
So given a list of counties and a list of cities, each of which contains an index to the

50
00:03:23,765 --> 00:03:26,994
containing county, the county that it's inside, what if you needed to compute

51
00:03:26,994 --> 00:03:29,411
the city dwelling population of all counties?

52
00:03:29,411 --> 00:03:32,743
Would this geographic binning operation help?
