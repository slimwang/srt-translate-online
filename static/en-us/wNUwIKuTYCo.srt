1
00:00:00,000 --> 00:00:03,000
This one became quite famous.

2
00:00:03,000 --> 00:00:07,000
It's sometimes known as the Names and Boxes Problem.

3
00:00:07,000 --> 00:00:13,000
In this problem, there are 100 prisoners,

4
00:00:13,000 --> 00:00:17,000
and the warden comes and tells them that they will be given their freedom

5
00:00:17,000 --> 00:00:20,000
if they can win the following game:

6
00:00:20,000 --> 00:00:23,000
100 boxes are going to be put on the table.

7
00:00:23,000 --> 00:00:28,000
In each box will be put one of the prisoner's names on a piece of paper.

8
00:00:28,000 --> 00:00:32,000
They'll be lined up on a table in a room,

9
00:00:32,000 --> 00:00:35,000
and the prisoners will be brought into the room one-by-one,

10
00:00:35,000 --> 00:00:43,000
and each prisoner is permitted to look in 50 boxes, trying to find his own name.

11
00:00:43,000 --> 00:00:46,000
When he is done, he is escorted out of the room.

12
00:00:46,000 --> 00:00:49,000
He must leave the room exactly as he found it.

13
00:00:49,000 --> 00:00:52,000
He has no further communication with the other prisoners.

14
00:00:52,000 --> 00:01:01,000
In order to win the game, every prisoner must find his own name.

15
00:01:01,000 --> 00:01:06,000
Now, this sounds really completely hopeless.

16
00:01:06,000 --> 00:01:09,000
Just say again how many prisoners and how many boxes?

17
00:01:09,000 --> 00:01:11,000
There are 100 prisoners. >>100 prisoners.

18
00:01:11,000 --> 00:01:14,000
100 boxes. One name in each box. >>100 boxes.

19
00:01:14,000 --> 00:01:16,000
Oh, you can only look in 50 of the 100.

20
00:01:16,000 --> 00:01:18,000
But each prisoner can only look in 50.

21
00:01:18,000 --> 00:01:25,000
Any individual prisoner's probability of finding his own name is 50%--one-half.

22
00:01:25,000 --> 00:01:28,000
Nothing he can do about that.

23
00:01:28,000 --> 00:01:31,000
So, how do you do this? What's your algorithm?

24
00:01:31,000 --> 00:01:38,000
Well, one possibility is everybody looks in a random 50 boxes.

25
00:01:38,000 --> 00:01:46,000
That gives you a probability of winning the game of 2⁻¹⁰⁰. Not very good.

26
00:01:46,000 --> 00:01:51,000
Another algorithm is everybody looks in the same 50 boxes.

27
00:01:51,000 --> 00:01:54,000
That has a probability of success of 0.

28
00:01:54,000 --> 00:02:00,000
Right, which is essentially the same as the first one. >> Indistinguishable. All right.

29
00:02:00,000 --> 00:02:07,000
So, the story with this puzzle is that Peter Bro Miltersen

30
00:02:07,000 --> 00:02:13,000
and Anna Gal, a theoretical computer scientist that you may know,

31
00:02:13,000 --> 00:02:21,000
were working on a problem, and they needed to be able to show that in a certain version of this problem,

32
00:02:21,000 --> 00:02:27,000
that the prisoners had no algorithm which would give them any decent probability--

33
00:02:27,000 --> 00:02:30,000
one over a polynomial or anything like that--

34
00:02:30,000 --> 00:02:36,000
and they didn't see how to prove it,

35
00:02:36,000 --> 00:02:41,000
and one day Miltersen happened to be passing a problem onto a friend of his,

36
00:02:41,000 --> 00:02:44,000
Sven Skyum, over lunch,

37
00:02:44,000 --> 00:02:48,000
and Sven Skyum said, "Well, have you tried this?"

38
00:02:48,000 --> 00:02:55,000
And Miltersen told me he fell off his chair.

39
00:02:55,000 --> 00:03:00,000
It turns out that there is an algorithm which will guarantee the prisoners

40
00:03:00,000 --> 00:03:05,000
a better than 30% chance to win the game.

41
00:03:05,000 --> 00:03:10,000
Irrespective of what N is here, it works for 100 prisoners,

42
00:03:10,000 --> 00:03:18,000
but also for 1 million prisoners with probability of winning as better than 30%.

43
00:03:18,000 --> 00:03:24,000
Even after you see the solution, it's hard to believe that this really works.

44
00:03:24,000 --> 00:03:29,000
Remember, every individual prisoner has probability of only 50%.

45
00:03:29,000 --> 00:03:31,000
There's no communication.

46
00:03:31,000 --> 00:03:34,000
How could you possibly get enough correlation into this problem

47
00:03:34,000 --> 00:03:43,000
to have the probability of all of them finding their own names to be 30%? It's ridiculous.

48
00:03:43,000 --> 00:03:48,000
But here's the algorithm that's absolutely wonderful.

49
00:03:48,000 --> 00:03:58,000
The prisoners first assign ownership of the 100 boxes randomly.

50
00:03:58,000 --> 00:04:01,000
In other words, they choose a random permutation of the boxes

51
00:04:01,000 --> 00:04:05,000
and assign ownership of the boxes, and every prisoner gets to know

52
00:04:05,000 --> 00:04:11,000
all the ownerships, gets to memorize all the ownerships and everything.

53
00:04:11,000 --> 00:04:13,000
Of course, these ownerships may have nothing to do with the names

54
00:04:13,000 --> 00:04:18,000
that are inside the boxes, but that's okay.

55
00:04:18,000 --> 00:04:23,000
So, now prisoner A goes into the room,

56
00:04:23,000 --> 00:04:28,000
and he opens his box--he opens the box that's been assigned to prisoner A.

57
00:04:28,000 --> 00:04:31,000
He looks inside, and it's got some other prisoner's name in it,

58
00:04:31,000 --> 00:04:34,000
maybe prisoner G.

59
00:04:34,000 --> 00:04:38,000
Then he goes over and he looks like prisoner G's box,

60
00:04:38,000 --> 00:04:41,000
and maybe prisoner Q is there.

61
00:04:41,000 --> 00:04:44,000
Then he opens the box for prisoner Q.

62
00:04:44,000 --> 00:04:46,000
He opens it and finds prisoner C there, etc.

63
00:04:46,000 --> 00:04:54,000
He keeps doing this, and he's hoping that he'll find his own name.

64
00:04:54,000 --> 00:04:58,000
If he doesn't, too bad. Then he leaves the room.

65
00:04:58,000 --> 00:05:01,000
The next prisoner does exactly the same thing.

66
00:05:01,000 --> 00:05:06,000
Prisoner B goes in, and he opens the box for prisoner B,

67
00:05:06,000 --> 00:05:10,000
looks for at the name inside, opens that box, and hopes that eventually

68
00:05:10,000 --> 00:05:15,000
he'll get back to his name.

69
00:05:15,000 --> 00:05:21,000
That's the algorithm. Right? Why in the world should this work? Right?

70
00:05:21,000 --> 00:05:23,000
What's going on here?

71
00:05:23,000 --> 00:05:26,000
Why would this be better than just going through in their permutation order

72
00:05:26,000 --> 00:05:28,000
or something like that?

73
00:05:28,000 --> 00:05:32,000
It's not at first at all clear why this would work.

74
00:05:32,000 --> 00:05:36,000
In fact, the only way I know people come up with this algorithm

75
00:05:36,000 --> 00:05:40,000
is they're looking for something for prisoners to do.

76
00:05:40,000 --> 00:05:48,000
The problem is once you think of this algorithm to now dismiss it

77
00:05:48,000 --> 00:05:51,000
but instead to think about what would make it work.

78
00:05:51,000 --> 00:05:59,000
What's going on here is that this random permutation combined with the permutation

79
00:05:59,000 --> 00:06:03,000
of the prisoner's names in the boxes

80
00:06:03,000 --> 00:06:05,000
gives you a permutation of the prisoners,

81
00:06:05,000 --> 00:06:09,000
which is a uniformly random permutation.

82
00:06:09,000 --> 00:06:12,000
But the permutation is defined in the following way.

83
00:06:12,000 --> 00:06:18,000
You take a prisoner, you look inside his box, you see whose name is there.

84
00:06:18,000 --> 00:06:21,000
That defines the permutation.

85
00:06:21,000 --> 00:06:26,000
I said that prisoner A's box contained the name of prisoner G.

86
00:06:26,000 --> 00:06:32,000
That means that in the permutation, A goes to G.

87
00:06:32,000 --> 00:06:39,000
So, what's going to happen is that prisoner A will find his own name

88
00:06:39,000 --> 00:06:45,000
if in this permutation the cycle that his name is in, the cycle that A is in

89
00:06:45,000 --> 00:06:49,000
has length at most 50.

90
00:06:49,000 --> 00:06:53,000
If that cycle has length less than 50--length of 50 or less--

91
00:06:53,000 --> 00:06:58,000
he comes back and find his own name. Otherwise, he doesn't.

92
00:06:58,000 --> 00:07:00,000
So, what does that mean?

93
00:07:00,000 --> 00:07:04,000
Well, that means that the prisoners will actually win this game

94
00:07:04,000 --> 00:07:08,000
if there are no long cycles.

95
00:07:08,000 --> 00:07:12,000
Because then everybody will start in their own cycle come back around,

96
00:07:12,000 --> 00:07:15,000
and find their own name.

97
00:07:15,000 --> 00:07:20,000
Now, it turns out that it's actually very easy

98
00:07:20,000 --> 00:07:24,000
to compute the probability that a permutation contains a long cycle.

99
00:07:24,000 --> 00:07:26,000
Wait. Hang on one second.

100
00:07:26,000 --> 00:07:30,000
Not only short, but it has to be short and contain that prisoner's information,

101
00:07:30,000 --> 00:07:33,000
that prisoner's name. Right?

102
00:07:33,000 --> 00:07:42,000
Well, we know it contains that prisoner's name, because he starts at the box that he owns.

103
00:07:42,000 --> 00:07:47,000
For example, suppose the cycle is A, G, C, A.

104
00:07:47,000 --> 00:07:51,000
Oh, the only way to get back to it is if you found the name. >>That's right.

105
00:07:51,000 --> 00:07:57,000
Ah. Okay. All right. So, now your next step was you can find the probability

106
00:07:57,000 --> 00:07:59,000
that there is a long cycle.

107
00:07:59,000 --> 00:08:02,000
It's to compute the probability that a random permutation contains a long cycle.

108
00:08:02,000 --> 00:08:06,000
Well, it's actually quite easy to show.

109
00:08:06,000 --> 00:08:11,000
It's just a little--just write down the binomial coefficients--

110
00:08:11,000 --> 00:08:16,000
that the probability that the permutation contains a cycle of length k

111
00:08:16,000 --> 00:08:27,000
where k is bigger than n/2 is exactly 1/k.

112
00:08:27,000 --> 00:08:34,000
So, the probability that our permutation contains a cycle of length greater than 50

113
00:08:34,000 --> 00:08:44,000
is 1/51 + 1/52 + 1/53 + … + 1/100,

114
00:08:44,000 --> 00:08:54,000
which is about n log 2--0.69 something.

115
00:08:54,000 --> 00:09:01,000
So, the probability of the prisoners winning is about 0.31.

116
00:09:01,000 --> 00:09:06,000
You know, you could sit and stare at this thing

117
00:09:06,000 --> 00:09:11,000
and still not really understand why it works so well. >>Crazy.

118
00:09:11,000 --> 00:09:16,000
So it's go harmonic numbers in it and logarithms

119
00:09:16,000 --> 00:09:19,000
and a kind of simple tail-chasing kind of algorithm.

120
00:09:19,000 --> 00:09:25,000
That's right. It's just nice reasoning, right? Nice, undergraduate reasoning.
