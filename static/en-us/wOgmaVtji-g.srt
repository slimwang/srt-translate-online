1
00:00:00,019 --> 00:00:03,637
Hey everyone. This is Shaun. I’m the assistant

2
00:00:03,637 --> 00:00:06,377
instructor for web applications engineering.

3
00:00:06,377 --> 00:00:09,200
Peter unfortunately couldn’t be here because he

4
00:00:09,200 --> 00:00:12,180
is off doing something silly like graduating. So

5
00:00:12,180 --> 00:00:13,738
you’re stuck with me.

6
00:00:13,754 --> 00:00:15,253
So let’s just jump right into the home work

7
00:00:15,253 --> 00:00:18,442
solutions. First question was about interpreting,

8
00:00:18,442 --> 00:00:21,151
testing, debugging. Actually all the homeworks

9
00:00:21,151 --> 00:00:25,982
are about that. And this question starts off with

10
00:00:25,982 --> 00:00:28,352
just a quiz, first off embedded JavaScript

11
00:00:28,352 --> 00:00:31,489
programs use functions like document.write to

12
00:00:31,489 --> 00:00:35,292
change the surrounding web page. Yes, this is true.

13
00:00:35,323 --> 00:00:39,510
We can take a quick look at something like this.

14
00:00:39,510 --> 00:00:44,010
So I’ve loaded up this HTML into a file and you

15
00:00:44,010 --> 00:00:46,117
can see there is a bit of java script in the

16
00:00:46,117 --> 00:00:48,585
script tag here, just a simple factorial function.

17
00:00:48,585 --> 00:00:52,322
And then it uses the document.write method to

18
00:00:52,322 --> 00:00:54,669
write out the factorial five, which is 120 and

19
00:00:54,669 --> 00:00:57,680
then write out the expression five is equal to

20
00:00:57,680 --> 00:01:01,298
five. So this should write out 120 and then

21
00:01:01,298 --> 00:01:05,918
true. So if we load this up in our web browser,

22
00:01:05,918 --> 00:01:09,946
we see that at the end of this, it has modified the

23
00:01:09,946 --> 00:01:13,091
web page to write 120 and true. Now we haven’t

24
00:01:13,091 --> 00:01:17,146
done any kind of styling to this, so it’s just

25
00:01:17,146 --> 00:01:19,945
running right into each other. But the point

26
00:01:19,945 --> 00:01:22,091
remains is that the document.write function is

27
00:01:22,091 --> 00:01:25,040
really how you modify on a basic level the

28
00:01:25,040 --> 00:01:27,215
overwriting HTML page.

29
00:01:27,215 --> 00:01:30,360
Next part, testing can prove that a web browser

30
00:01:30,360 --> 00:01:33,489
is correct. That is not true. So we can take a

31
00:01:33,489 --> 00:01:37,438
look at an example of that too. So let’s say I

32
00:01:37,438 --> 00:01:40,730
have a basic square function. Well actually not a

33
00:01:40,730 --> 00:01:42,689
basic square function, it’s much more

34
00:01:42,689 --> 00:01:46,617
complicated than it needs to be. But let’s see

35
00:01:46,617 --> 00:01:49,728
about if we can prove this is true with some test

36
00:01:49,728 --> 00:01:54,121
cases. So let’s print out some test cases say print

37
00:01:54,121 --> 00:01:58,732
square three and this if you run it, okay that

38
00:01:58,732 --> 00:02:02,744
brings out nine that makes sense. But then if we

39
00:02:02,744 --> 00:02:06,383
print out another test case and we see this is 9-2,

40
00:02:06,383 --> 00:02:08,592
which is what we expect. So I am just going to

41
00:02:08,592 --> 00:02:11,249
print out a few more test cases, okay. We’ve got

42
00:02:11,249 --> 00:02:13,735
a few more test cases here and we can already

43
00:02:13,735 --> 00:02:16,296
tell the square of 0 should be 0. And the square

44
00:02:16,296 --> 00:02:20,364
of two should be 4. So go ahead and run these

45
00:02:20,364 --> 00:02:23,215
and we get the expected output. Now are we

46
00:02:23,215 --> 00:02:26,135
done here, are we proved that this is correct?

47
00:02:26,135 --> 00:02:29,016
Obviously not because if you look at the code,

48
00:02:29,016 --> 00:02:33,083
this isn’t going to return the square of X for

49
00:02:33,083 --> 00:02:39,819
anything that is were mod two equals 0 and X is

50
00:02:39,819 --> 00:02:42,605
not two. Works fine for X as two. But when we

51
00:02:42,605 --> 00:02:46,811
print out square four which should be 16, but we

52
00:02:46,811 --> 00:02:50,509
instead get is 8, which is not at all what we want.

53
00:02:50,509 --> 00:02:53,899
So testing is great. Having simple small unit

54
00:02:53,899 --> 00:02:57,682
tests is a good habit to get into. But you can’t

55
00:02:57,682 --> 00:03:00,847
really test for every single possible input. It’s

56
00:03:00,847 --> 00:03:04,007
just not feasible. So you should be prepared for

57
00:03:04,007 --> 00:03:07,540
accepting that your code is probably right. But

58
00:03:07,540 --> 00:03:10,545
you can’t guarantee it with testing, okay. And

59
00:03:10,545 --> 00:03:12,336
the third part program should compute different

60
00:03:12,336 --> 00:03:15,060
answers before and after it has been optimized.

61
00:03:15,060 --> 00:03:17,621
Now this is definitely not true.

62
00:03:17,621 --> 00:03:20,626
Program should be correct.

63
00:03:20,626 --> 00:03:25,015
Now what correct is, it can vary depending on

64
00:03:25,015 --> 00:03:29,077
what your actual goals are, but the program

65
00:03:29,077 --> 00:03:31,610
should work as you intend it and once you start

66
00:03:31,610 --> 00:03:34,507
optimizing things that shouldn’t change. Now

67
00:03:34,507 --> 00:03:37,345
the final part of this quiz is making changes to a

68
00:03:37,345 --> 00:03:40,325
test case can help to localize a program bug.

69
00:03:40,325 --> 00:03:43,820
And yes, this is true. And we can see an

70
00:03:43,820 --> 00:03:46,182
example of this. This is actually fairly similar to

71
00:03:46,182 --> 00:03:48,546
what we were doing for. So you got an absolute

72
00:03:48,562 --> 00:03:50,764
value function and let’s say I’ve already told

73
00:03:50,764 --> 00:03:52,657
you that something is wrong with it. And I want

74
00:03:52,657 --> 00:03:57,026
you to find where the bug is. Well, where do we start?

75
00:03:57,026 --> 00:04:00,178
Well, let’s try printing out, the absolute

76
00:04:00,178 --> 00:04:02,949
value of one because we’re trying to break down

77
00:04:02,949 --> 00:04:06,944
on what part, what branch of this function, the

78
00:04:06,944 --> 00:04:09,170
bug that I’ve already you about is in. So we

79
00:04:09,201 --> 00:04:13,089
want to differentiate between positive values

80
00:04:13,089 --> 00:04:15,939
and negative values and zero, is that breaks it

81
00:04:15,939 --> 00:04:18,861
down to one of these two, statements. And we

82
00:04:18,861 --> 00:04:21,154
get out one which is the absolute value of one.

83
00:04:21,154 --> 00:04:24,627
So, okay that seems okay. Now let’s try and

84
00:04:24,627 --> 00:04:26,446
narrow it down a bit further from there.

85
00:04:26,446 --> 00:04:30,394
Okay, so let’s narrow it down a bit further and

86
00:04:30,394 --> 00:04:34,195
now let’s do the absolute value of 8, which is

87
00:04:34,195 --> 00:04:36,151
still right here. It’s still going to be in this else

88
00:04:36,151 --> 00:04:38,643
statement, but since it’s greater than two, it’s

89
00:04:38,643 --> 00:04:41,481
going to go into this internal if statement instead

90
00:04:41,481 --> 00:04:45,564
of this other else. So when we’re on this, we get

91
00:04:45,564 --> 00:04:48,874
0, not 8. So we see that the bug is in this and its

92
00:04:48,874 --> 00:04:52,407
fairly clear that that’s where it is and most

93
00:04:52,407 --> 00:04:54,681
programs that you’re debugging this is not

94
00:04:54,681 --> 00:04:58,592
going to be this simple, but you can add

95
00:04:58,592 --> 00:05:00,439
additional test cases and use your test cases to

96
00:05:00,439 --> 00:05:05,131
narrow down on what part of your function, the

97
00:05:05,131 --> 00:05:08,105
errors are in. And that’s really the

98
00:05:08,105 --> 00:05:09,181
point of this, right here.
