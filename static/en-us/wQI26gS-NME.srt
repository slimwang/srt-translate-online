1
00:00:00,094 --> 00:00:03,530
So we have seen some relatively
general fault tolerance techniques.

2
00:00:03,530 --> 00:00:07,338
Now let's look at the fault tolerance
techniques for memory and storage.

3
00:00:07,338 --> 00:00:12,593
We could use dual modular redundancy or
triple modular redundancy for memory and

4
00:00:12,593 --> 00:00:17,090
storage, but they are considered
to be overkill for these devices.

5
00:00:17,090 --> 00:00:21,456
We can get better techniques that
protect us from similar problems.

6
00:00:21,456 --> 00:00:26,054
So dual modular redundancy and triple
modular redundancy are typically used

7
00:00:26,054 --> 00:00:30,298
for the hardware that does the
computation, which cannot be protected

8
00:00:30,298 --> 00:00:33,622
by some of the less expensive
techniques that memory and

9
00:00:33,622 --> 00:00:37,229
storage can benefit from and
these techniques for memory and

10
00:00:37,229 --> 00:00:41,076
storage are called error detection or
error correction codes.

11
00:00:41,076 --> 00:00:46,554
So the idea is that we can store bits
with some x-ray information that allows

12
00:00:46,554 --> 00:00:52,221
us to detect and, or correct one or more
bits of error, depending on the code.

13
00:00:52,221 --> 00:00:56,345
So we don't have to store everything
twice or everything three times in

14
00:00:56,345 --> 00:00:59,860
order to receive detection or
correction of a single error.

15
00:00:59,860 --> 00:01:04,224
The simplest technique that is often
used for memory storage is parity.

16
00:01:04,224 --> 00:01:09,445
With parity, we add one extra bit to
the data bits and that extra bit,

17
00:01:09,445 --> 00:01:13,420
you can compute simply as
an XOR of all the data bits.

18
00:01:13,420 --> 00:01:17,132
When we do have parity,
if a fault flips any one of the bits,

19
00:01:17,132 --> 00:01:18,853
including the parity bit.

20
00:01:18,853 --> 00:01:21,686
The parity bit will no
longer match the data.

21
00:01:21,686 --> 00:01:26,321
By flipping one of the bits,
we are changing the result of this XOR

22
00:01:26,321 --> 00:01:29,534
to be the opposite of
what it previously was.

23
00:01:29,534 --> 00:01:31,899
So when we read the data
in the parity and

24
00:01:31,899 --> 00:01:35,268
we see that now the parity
does not match data, we assume

25
00:01:35,268 --> 00:01:40,220
that there has been a bit flip and
that's how we detect a single bit error.

26
00:01:40,220 --> 00:01:45,139
The next level of error detection and
correction codes is the so-called ECC,

27
00:01:45,139 --> 00:01:47,761
which stands for error correction code.

28
00:01:47,761 --> 00:01:53,750
And a typical example of this would be
a type of code called SECDED codes or

29
00:01:53,750 --> 00:01:58,674
single error correction and
double error detection code.

30
00:01:58,674 --> 00:02:03,324
So this code can detect any one
bit flip and actually fix it or

31
00:02:03,324 --> 00:02:08,346
if there are 2 bit flips,
we will found out that that happened,

32
00:02:08,346 --> 00:02:11,700
but we can no longer
fix it using this code.

33
00:02:11,700 --> 00:02:16,132
An example of where this type
of a code is used is in data

34
00:02:16,132 --> 00:02:18,108
modules that have ECC.

35
00:02:18,108 --> 00:02:19,966
This is how they are protected.

36
00:02:19,966 --> 00:02:22,573
So pretty much if there is a single
bit flip in such a module,

37
00:02:22,573 --> 00:02:23,681
you don't even notice.

38
00:02:23,681 --> 00:02:25,097
Everything functions well.

39
00:02:25,097 --> 00:02:29,493
If there are two errors in the data that
is protected by the same code, then we

40
00:02:29,493 --> 00:02:34,166
will get notified that there's been an
error, but we cannot continue operating

41
00:02:34,166 --> 00:02:38,588
normally, because actually we cannot
correct the error in this state anymore.

42
00:02:38,588 --> 00:02:41,268
Hard drives use even fancier codes,

43
00:02:41,268 --> 00:02:46,203
such as the Reed-Solomon codes,
that I'm not going to go into here.

44
00:02:46,203 --> 00:02:50,144
And these codes can detect and
correct multiple bit errors and

45
00:02:50,144 --> 00:02:54,540
they're especially powerful when
we have a streak of flipped bits,

46
00:02:54,540 --> 00:02:59,044
which happens, for example,
when the head oscillates a little bit.

47
00:02:59,044 --> 00:03:01,720
And while the disk is spinning it for
a while,

48
00:03:01,720 --> 00:03:06,140
just is too high above the platter and
misses some of the bits.

49
00:03:06,140 --> 00:03:10,270
And then for hard drives in addition
to these error detection and correction

50
00:03:10,270 --> 00:03:15,530
codes, there is a family of techniques
called RAID that we will look at next.
