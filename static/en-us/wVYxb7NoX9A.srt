1
00:00:00,290 --> 00:00:05,730
Okay, so what we have seen just now is that basically even the ideal process

2
00:00:05,730 --> 00:00:09,690
that can execute any number of instructions per cycle. Still has obey raw

3
00:00:09,690 --> 00:00:14,600
dependencies. Meaning, it still has to wait for results to be produced before

4
00:00:14,600 --> 00:00:19,340
they can be used by instructions that need those results. And that really

5
00:00:19,340 --> 00:00:24,360
creates some of the delays that the ideal processor is going to have. And

6
00:00:24,360 --> 00:00:29,210
that's why the ILP is not 0, it's going to be something larger than 0 even for

7
00:00:29,210 --> 00:00:34,840
an ideal processor. So let us now look at some instructions. So

8
00:00:34,840 --> 00:00:38,040
let's say that I1 is producing the value that's being used by I2.

9
00:00:38,040 --> 00:00:43,204
Then I3 is producing the value for I4. And then, I4 produces the value that is

10
00:00:43,204 --> 00:00:48,360
used for I5. So what is going to be the CPI for this particular program.

11
00:00:49,600 --> 00:00:53,970
Well it's going to be CPI is equal, how many cycles do we need for

12
00:00:53,970 --> 00:00:57,840
this, for these five instructions? Well here's what's going to happen.

13
00:00:57,840 --> 00:01:02,353
I1 can execute immediately in the first cycle. And so, can I3 because it

14
00:01:02,353 --> 00:01:07,225
doesn't have to wait for anything. So we spend one cycle executing I1 and I3.

15
00:01:07,225 --> 00:01:13,020
The next cycle I2 can now go. And I4 can also go because I3 is now done.

16
00:01:13,020 --> 00:01:17,395
And then, we still need a third cycle to execute I5 which has to wait for I4.

17
00:01:17,395 --> 00:01:20,950
So we have spent three cycles for five instructions,

18
00:01:20,950 --> 00:01:26,633
which is going to be a CPI of 0.6. So the CPI is still lower than one.

19
00:01:26,633 --> 00:01:31,390
But now it's even larger. And finally,

20
00:01:31,390 --> 00:01:36,157
if we did have this dependence as well. Now we have to do I1 and then I2, and

21
00:01:36,157 --> 00:01:41,967
then I3, and then I4, and then I5. So then now the CPI with this is going

22
00:01:41,967 --> 00:01:47,120
to be one. Why? Well because we need five cycles to execute five instructions so

23
00:01:47,120 --> 00:01:51,107
the CPA's going to be one. So basically in the program the dependencies, the,

24
00:01:51,107 --> 00:01:55,556
the raw dependencies are going to determine basically what is the possible CPI.

25
00:01:55,556 --> 00:01:58,583
Even if the processor can do everything else ideally. Meaning it can fetch

26
00:01:58,583 --> 00:02:02,258
a number of instructions, it can decode and read registers in any number of,

27
00:02:02,258 --> 00:02:07,160
instructions. But it simply cannot provide time travel, which is,

28
00:02:07,160 --> 00:02:10,919
which is kind of the only consideration that you really consider in this case.

29
00:02:10,919 --> 00:02:14,230
Is just that we cannot do time travel. Everything else we can do.

30
00:02:14,230 --> 00:02:19,550
We still have a CPI that is somewhere between one and 0. You will

31
00:02:19,550 --> 00:02:24,260
have a CPI of 0 if a very large number with no dependencies. We have seen that.

32
00:02:24,260 --> 00:02:28,850
We have a CPI of one. If you have any number of instructions that are all

33
00:02:28,850 --> 00:02:31,710
dependant on the previous instructions, you really can not let anything get by
