1
00:00:00,600 --> 00:00:03,560
There is also the POSIX API for
shared memory.

2
00:00:03,560 --> 00:00:07,670
On Linux systems, it has been
supported since the 2.4 kernel.

3
00:00:07,670 --> 00:00:09,470
Although it's supposed
to be the standard,

4
00:00:09,470 --> 00:00:14,510
the POSIX API is not as widely supported
as, for instance, the System V API.

5
00:00:15,710 --> 00:00:17,140
Here is the API.

6
00:00:17,140 --> 00:00:21,270
The most notable difference is that
the POSIX shared memory standard

7
00:00:21,270 --> 00:00:22,480
doesn't use segments.

8
00:00:22,480 --> 00:00:23,710
Instead, it uses files.

9
00:00:24,790 --> 00:00:28,850
Now, these are not the real files that
exist in some file system that used

10
00:00:28,850 --> 00:00:30,970
otherwise by the operating system.

11
00:00:30,970 --> 00:00:36,020
Instead, these are files that only exist
in the so called tmpfs file system,

12
00:00:36,020 --> 00:00:40,070
which is really intended to look and
feel like a file system.

13
00:00:40,070 --> 00:00:44,260
So, you can always reuse the same
type of mechanisms that is used for

14
00:00:44,260 --> 00:00:45,210
file systems.

15
00:00:45,210 --> 00:00:49,570
But, in essence, is just a bunch of
state that's present in physical and

16
00:00:49,570 --> 00:00:51,170
volatile memory.

17
00:00:51,170 --> 00:00:54,060
The I/O simply uses
the same representation and

18
00:00:54,060 --> 00:00:58,320
the same data structures that used for
representing a file to

19
00:00:58,320 --> 00:01:03,270
represent bunch of pages in memory that
correspond to a shared memory region.

20
00:01:03,270 --> 00:01:05,843
For this reason,
there is no longer a need for

21
00:01:05,843 --> 00:01:08,750
the awkward key generation process.

22
00:01:08,750 --> 00:01:13,440
Instead, shared memory segments can
be referenced by the file descriptor

23
00:01:13,440 --> 00:01:15,430
that corresponds to the file.

24
00:01:15,430 --> 00:01:19,090
And, then the rest of the operations
are analogous to what you'd expect

25
00:01:19,090 --> 00:01:20,670
to exist for files.

26
00:01:20,670 --> 00:01:23,800
A segment is opened, or closed.

27
00:01:23,800 --> 00:01:27,090
So, they're explicit, shared memory,
open and close operations.

28
00:01:27,090 --> 00:01:30,435
But, in fact, it can really
only call the regular open and

29
00:01:30,435 --> 00:01:33,665
close operations,
since you will anyways pass a file.

30
00:01:33,665 --> 00:01:38,288
And, the operating system will manage to
figure out which file system this file

31
00:01:38,288 --> 00:01:38,865
sits in.

32
00:01:38,865 --> 00:01:44,170
To attach or detach shared memory,
the POSIX shared memory API

33
00:01:44,170 --> 00:01:49,075
relies on the mmap and
unmap calls that are used to map,

34
00:01:49,075 --> 00:01:53,580
or unmap files into
the address space of a process.

35
00:01:53,580 --> 00:01:58,750
To destroy a shared memory segment,
there is an explicit unlink operation.

36
00:01:58,750 --> 00:02:00,883
There is also a shared memory close, and

37
00:02:00,883 --> 00:02:04,911
this will remove the file descriptor
from the address space of the process.

38
00:02:04,911 --> 00:02:09,439
But, in order to tell the operating
system to delete all of the shared

39
00:02:09,439 --> 00:02:14,202
memory-related data structures, and
to free up that memory segment,

40
00:02:14,202 --> 00:02:17,885
you must call the explicit
unlink operation.

41
00:02:17,885 --> 00:02:20,525
I have provided a link to the reference

42
00:02:20,525 --> 00:02:23,555
of the POSIX Shared Memory API
in the instructor notes.
