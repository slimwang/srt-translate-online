1
00:00:00,126 --> 00:00:02,350
Looks like we're getting pretty close.

2
00:00:02,350 --> 00:00:06,030
The only thing that's missing here is
the plane image on top of the line.

3
00:00:06,030 --> 00:00:09,240
I've created this plane image from
a template that I found online.

4
00:00:09,240 --> 00:00:11,550
You can download it from
the instructor notes below.

5
00:00:11,550 --> 00:00:16,200
Vector images like this SVG file are the
best to you in your Android application.

6
00:00:16,199 --> 00:00:19,210
Because they can resize easily
to work with any phone size and

7
00:00:19,210 --> 00:00:21,940
resolution without affecting
the quality of your image.

8
00:00:21,940 --> 00:00:26,000
To add this vector image to your
application download that SVG file and

9
00:00:26,000 --> 00:00:29,120
then head back to the Android project,
right click on the Res folder,

10
00:00:29,120 --> 00:00:31,880
and then select New vector asset.

11
00:00:31,879 --> 00:00:36,420
Then select the local file and browse
for the file that you just downloaded.

12
00:00:36,420 --> 00:00:38,337
And let's give it a name art_plane.

13
00:00:38,337 --> 00:00:42,980
Now for the size check the override so
that uses it correct dimensions and

14
00:00:42,979 --> 00:00:46,559
also enable auto mirroring for
right to left layouts.

15
00:00:46,560 --> 00:00:50,150
This is because we want the plan to
indicate the direction of travel

16
00:00:50,149 --> 00:00:53,369
give the origin and
destination of the airports.

17
00:00:53,369 --> 00:00:56,669
So in right to left layouts where
the origins are on the right and

18
00:00:56,670 --> 00:01:00,160
the destination is on the left we
want that plane to indicate that.

19
00:01:00,159 --> 00:01:04,369
Perfect, now let's click next and
then finish.

20
00:01:04,370 --> 00:01:08,359
And it will appear under the Drawable
folder as art_plane.xml.

21
00:01:08,359 --> 00:01:09,920
If you open this xml file,

22
00:01:09,920 --> 00:01:13,829
you can see that everything that
describes the image is in plain text.

23
00:01:13,829 --> 00:01:17,450
You can update the fill color,
the size of the image, or

24
00:01:17,450 --> 00:01:19,120
even the image data itself.

25
00:01:19,120 --> 00:01:23,790
But for now, let's just change this fill
color to be the primary color light and

26
00:01:23,790 --> 00:01:25,420
we'll leave everything else as it is.

27
00:01:25,420 --> 00:01:27,280
Now if we head back
to our main activity,

28
00:01:27,280 --> 00:01:31,170
we can just drag another image view, and
place it on top of the line here, and

29
00:01:31,170 --> 00:01:34,980
then select our art_plane, and make
sure that we create a left constraint,

30
00:01:34,980 --> 00:01:39,150
to the left rectangle, the right
constraint to the right rectangle, and

31
00:01:39,150 --> 00:01:41,270
then a bottom constraint to the line.

32
00:01:41,269 --> 00:01:44,519
You also want a little bit of margin
there, and it's all set to go.

33
00:01:44,519 --> 00:01:48,089
To make sure that our image view is
using the correct information from

34
00:01:48,090 --> 00:01:49,659
the drawable art plane,

35
00:01:49,659 --> 00:01:53,609
make sure that you set the image view's
background to that drawable art plane.

36
00:01:53,609 --> 00:01:56,700
Awesome job,
our design looks complete now but

37
00:01:56,700 --> 00:02:00,590
remember that we've only used
the android text for actual labels.

38
00:02:00,590 --> 00:02:03,100
And we've used the tools text for

39
00:02:03,099 --> 00:02:07,750
fake data which means if we run this you
can see that only the label text and

40
00:02:07,750 --> 00:02:10,409
images would appear but
not the hard coded values.

41
00:02:10,409 --> 00:02:14,129
To fix this, we will be binding
the values to real data later.

42
00:02:14,129 --> 00:02:14,699
Awesome job.

