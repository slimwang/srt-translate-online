1
00:00:00,090 --> 00:00:04,355
The first output with sequential thread number 0, 1, 2,

2
00:00:04,355 --> 00:00:09,410
3, is possible since I, whose values past this an argument to

3
00:00:09,410 --> 00:00:14,350
the thread creation function, has values that reach from 0 to 3.

4
00:00:14,350 --> 00:00:16,740
The next output, the print out,

5
00:00:16,740 --> 00:00:21,120
is a little bit arbitrary thread number 0, 2, 1, 3.

6
00:00:21,120 --> 00:00:24,910
But this is still possible because as we said earlier.

7
00:00:24,910 --> 00:00:28,990
We don't have control over how these newly created threads will be

8
00:00:28,990 --> 00:00:29,790
actually scheduled.

9
00:00:29,790 --> 00:00:34,830
So, it's possible that just the order in which their execution was scheduled, so

10
00:00:34,830 --> 00:00:38,540
the order in which every one of them performed the printf

11
00:00:38,540 --> 00:00:43,380
operation was slightly different that the order in which they were created.

12
00:00:43,380 --> 00:00:46,960
Now the last output that's actually also possible.

13
00:00:46,960 --> 00:00:51,700
Now, you may be asking yourself how since the print out thread number one,

14
00:00:51,700 --> 00:00:56,370
which appeared in the previous two options, doesn't even appear in this case.

15
00:00:56,370 --> 00:00:59,680
Is that an indication that that thread wasn't even created?

16
00:00:59,680 --> 00:01:03,260
If we look at this loop in main, we see that we must have really

17
00:01:03,260 --> 00:01:07,950
executed the printout operation for every one of the four created threads.

18
00:01:07,950 --> 00:01:11,180
So we really would expect that one of them would have printed out

19
00:01:11,180 --> 00:01:15,290
thread number one, when we pass the argument i equals 1.

20
00:01:15,290 --> 00:01:18,270
Let's explain what happened to that line in the next morsel.
