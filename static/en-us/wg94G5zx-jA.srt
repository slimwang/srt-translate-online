1
00:00:00,240 --> 00:00:03,680
So, we've seen that functions are extremely important in JavaScript and

2
00:00:03,680 --> 00:00:06,950
they create the core of JavaScript classes.

3
00:00:06,950 --> 00:00:11,020
As you described earlier, a JavaScript class is really just a function that's

4
00:00:11,020 --> 00:00:13,380
capable of creating many similar objects.

5
00:00:13,380 --> 00:00:13,980
>> Exactly.

6
00:00:13,980 --> 00:00:18,180
Anytime a function produces objects that all conform to roughly the same

7
00:00:18,180 --> 00:00:20,570
Interface of methods and properties.

8
00:00:20,570 --> 00:00:24,130
I would call that function a class, but it is important to know that this

9
00:00:24,130 --> 00:00:27,600
definition draws some controversy, because there are good arguments out there,

10
00:00:27,600 --> 00:00:30,780
that classes really shouldn't be boiled down so simply.

11
00:00:30,780 --> 00:00:33,160
In other languages, this is certainly the case, but

12
00:00:33,160 --> 00:00:38,580
in JavaScript at least I think that this definition provides us the most value.

13
00:00:38,580 --> 00:00:41,780
So, if we do broaden our definition of the word class, to

14
00:00:41,780 --> 00:00:46,690
mean any construct that's capable of producing a fleet of very similar objects.

15
00:00:46,690 --> 00:00:49,400
We should really examine every technique we can think of,

16
00:00:49,400 --> 00:00:52,040
that will satisfy writing, such a class.

17
00:00:52,040 --> 00:00:55,400
We'll do this by starting with our decorator code that we just wrote, and

18
00:00:55,400 --> 00:00:57,980
refactoring it into the functional class pattern.

19
00:00:57,980 --> 00:01:01,930
And from there, we'll move on to the prototypal and pseudo-classical patterns.

20
00:01:01,930 --> 00:01:04,680
And along the way, we can talk about the pros and cons of each technique.
