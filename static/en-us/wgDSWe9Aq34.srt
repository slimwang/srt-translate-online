1
00:00:00,100 --> 00:00:02,940
I'd like to talk about some advanced cache updates. Say

2
00:00:02,940 --> 00:00:08,220
we have this problem where multiple people submit posts to Ascii

3
00:00:08,220 --> 00:00:10,440
Chan at the same time, or submit to your blog at

4
00:00:10,440 --> 00:00:12,820
the exact same time. You know, let's say they hit multiple

5
00:00:12,820 --> 00:00:15,480
app servers, or different app servers. They both write to

6
00:00:15,480 --> 00:00:18,150
the database at the same time, and then they both update

7
00:00:18,150 --> 00:00:21,230
the cache at the same time. Overwriting each other. This can

8
00:00:21,230 --> 00:00:25,610
happen. This is a type of race condition where you know,

9
00:00:25,610 --> 00:00:27,940
two updates come in at the same time, and we don't know

10
00:00:27,940 --> 00:00:31,610
what order to handle them in and they both squawk them, basically one

11
00:00:31,610 --> 00:00:33,530
tramples the other. If we to draw this in a picture, it

12
00:00:33,530 --> 00:00:36,710
looks something like this. Say we've got two apps servers. Here's an example

13
00:00:36,710 --> 00:00:39,460
of the problem. And we've got our database. And we've got our

14
00:00:39,460 --> 00:00:42,710
cache. And say we've got el, elements in our database. We're going to call

15
00:00:42,710 --> 00:00:46,770
them one and two. And these app servers are both going to get

16
00:00:46,770 --> 00:00:50,830
requests from the user to, to submit a new entry into our database,

17
00:00:50,830 --> 00:00:52,840
you know, our new piece of art for ASCIIchan. And this

18
00:00:52,840 --> 00:00:56,530
happens at the same time. So this guy may submit element three.

19
00:00:56,530 --> 00:00:59,970
And this guy may submit element four. So our database is, you

20
00:00:59,970 --> 00:01:03,910
know, in sync because databases enforce these constraints. You know, you can

21
00:01:03,910 --> 00:01:06,020
insert as many things as you want at the same time the

22
00:01:06,020 --> 00:01:09,290
database will order it all for you. But here's the problem. Let's

23
00:01:09,290 --> 00:01:12,290
start with version one of this problem which is. Each of these

24
00:01:12,290 --> 00:01:16,250
app servers is manipulated in the cache directly. So this guy inserts

25
00:01:16,250 --> 00:01:18,810
element 3, and so he writes to the cache

26
00:01:18,810 --> 00:01:22,420
and he says, the database looks like this. And just

27
00:01:22,420 --> 00:01:25,720
as he does this, this app server finishes inserting item

28
00:01:25,720 --> 00:01:27,950
4 into the database and he is not communicating with

29
00:01:27,950 --> 00:01:31,300
this app. He overwrites the cache to instead look like

30
00:01:31,300 --> 00:01:35,740
this. 1,2,4. Because this app server, remember we're not doing

31
00:01:35,740 --> 00:01:38,030
another query form the database, we're just manipulating the cache

32
00:01:38,030 --> 00:01:42,030
direectly. This app server squashed the other app server's update.

33
00:01:42,030 --> 00:01:44,920
That's, that's a problem. Now, let's look at another way this

34
00:01:44,920 --> 00:01:48,710
problem can ahppen. Say we were using the the first approach

35
00:01:48,710 --> 00:01:50,890
we talked about where we, when we write to the database

36
00:01:50,890 --> 00:01:53,340
we immediately do a read from the database and update our

37
00:01:53,340 --> 00:01:56,610
cache that way. We can still have this problem. First, this

38
00:01:56,610 --> 00:02:00,100
App server inserts element 3 into the data base. And then

39
00:02:00,100 --> 00:02:04,520
it says okay you know, let's, let's rerun the query, so

40
00:02:04,520 --> 00:02:07,610
we, so we can update the cache. But at the same time,

41
00:02:07,610 --> 00:02:11,890
this other App server Inserts element four into the database, and

42
00:02:11,890 --> 00:02:14,770
it also wants to rerun the query. So, each of these,

43
00:02:14,770 --> 00:02:16,930
you know, has a view of the database. This first app

44
00:02:16,930 --> 00:02:20,650
server thinks it's 1, 2, 3, and this other guy thinks

45
00:02:21,690 --> 00:02:25,030
it's 1, 2, 3, 4. Now, there's no guarantee this first

46
00:02:25,030 --> 00:02:27,000
app server will write to the cache for this one. because,

47
00:02:27,000 --> 00:02:30,250
things can happen out of order. Your app server can have

48
00:02:30,250 --> 00:02:32,530
a slight delay, you know, there can be a network glitch.

49
00:02:32,530 --> 00:02:34,830
There's going to be any number of reasons why this app server might run.

50
00:02:34,830 --> 00:02:38,480
You know might have a little hiccup and this guy writes you know,

51
00:02:38,480 --> 00:02:40,650
or, or, or this guys gets the right to the cache first. 1,2,3,4.

52
00:02:40,650 --> 00:02:45,402
And this other guy comes in and tramples on top of him. So

53
00:02:45,402 --> 00:02:48,156
there are a handful of ways where these app servers can you know,

54
00:02:48,156 --> 00:02:51,012
overwrite each other and if we, if, if we are redirecting the user

55
00:02:51,012 --> 00:02:54,190
to our front page to do the cache update that way. The, the

56
00:02:54,190 --> 00:02:55,480
odds of this happening is even more

57
00:02:55,480 --> 00:02:57,770
likely because it's not going to happen quite

58
00:02:57,770 --> 00:02:59,320
so fast, we've gotta go all the way to the user

59
00:02:59,320 --> 00:03:02,320
and back before we update our cache. So, that's the problem, you

60
00:03:02,320 --> 00:03:05,489
know, multiple app servers overriding each other in the cache because the

61
00:03:05,489 --> 00:03:07,780
cache doesn't have any transactions, it doesn't have any of the fancy

62
00:03:07,780 --> 00:03:09,980
stuff that the data base has. You know on that base we

63
00:03:09,980 --> 00:03:12,610
juts say insert this element but on the cache we say the

64
00:03:12,610 --> 00:03:15,550
list of elements is this so we can't just answer it at

65
00:03:15,550 --> 00:03:18,210
the front of it let me introduce one solution to this problem.
