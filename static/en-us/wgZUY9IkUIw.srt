1
00:00:00,110 --> 00:00:02,380
Now that we've declared
z to be an optional,

2
00:00:02,380 --> 00:00:04,689
let's try to use z in an operation.

3
00:00:04,689 --> 00:00:06,030
Let's take a look at this error.

4
00:00:07,760 --> 00:00:11,380
Here the compiler is telling us
that z needs to be unwrapped.

5
00:00:11,380 --> 00:00:13,345
You can't use a present
that's still wrapped.

6
00:00:13,345 --> 00:00:17,315
Now to unwrap z, we could just follow
the suggestion from the compiler and

7
00:00:17,315 --> 00:00:20,945
place an exclamation
mark after z like this.

8
00:00:21,975 --> 00:00:26,212
But when unwrapping optionals,
we want to be as careful as possible, so

9
00:00:26,212 --> 00:00:29,262
we're going to learn the safest
way to unwrap a variable.

10
00:00:29,262 --> 00:00:33,572
Here we can see that this 123 string
will convert to an int with no problem.

11
00:00:33,572 --> 00:00:35,262
But what if we weren't so sure?

12
00:00:35,262 --> 00:00:39,202
Here is a scenario in which z
might actually evaluate to nil.

13
00:00:39,202 --> 00:00:45,420
I've created an array with two items and
an index that is randomly either 0 or 1.

14
00:00:45,420 --> 00:00:48,040
When I get this string from the array,

15
00:00:48,040 --> 00:00:51,550
I can't be sure whether it can
be converted to an end value.

16
00:00:51,550 --> 00:00:54,560
I don't know whether z will be nil or
not.

17
00:00:54,560 --> 00:00:59,000
How do we unwrap z safely so that we
can use it in further operations?

18
00:00:59,000 --> 00:01:03,720
Swift uses the, if let, construction
to carefully unwrap optionals.

19
00:01:03,720 --> 00:01:06,460
Take the time to really
study this expression.

20
00:01:06,460 --> 00:01:09,550
It'll come up frequently
in your Swift projects.

21
00:01:09,550 --> 00:01:12,480
This is the expression
that unwraps z and

22
00:01:12,480 --> 00:01:15,700
places the int into
a plain old int variable.

23
00:01:15,700 --> 00:01:20,080
In this case, we named it int value, but
there's not a strict naming convention.

24
00:01:20,080 --> 00:01:21,030
This unwrapping and

25
00:01:21,030 --> 00:01:25,970
initializing of int value is also a
Boolean expression controlling this if.

26
00:01:25,970 --> 00:01:27,990
It serves two purposes, and

27
00:01:27,990 --> 00:01:32,210
it will only evaluate to true if
the optional has an int value.

28
00:01:32,210 --> 00:01:36,560
If the optional stores nil, then the
whole expression will evaluate to false.

29
00:01:36,560 --> 00:01:40,580
Inside the block, the variable intValue
has been initialized as an int and

30
00:01:40,580 --> 00:01:41,980
can safely be used.

31
00:01:41,980 --> 00:01:44,560
And we can use an else block for
the nil case.

32
00:01:44,560 --> 00:01:47,020
To see both cases,
you can rerun the Playground.

33
00:01:47,020 --> 00:01:50,720
Just go up to the Editor's
menu > Execute Playground.

34
00:01:50,720 --> 00:01:53,130
You can see the results
over here on the sidebar.

35
00:01:53,130 --> 00:01:54,400
Just click on this little eyeball,.

36
00:01:55,860 --> 00:01:56,690
And I'll run it again.

37
00:01:59,846 --> 00:02:01,774
And again.

38
00:02:01,774 --> 00:02:05,840
[LAUGH] Sometimes I get a value and
sometimes I don't.

39
00:02:06,920 --> 00:02:10,960
In this example, I chose variable
names to make the code easier to read.

40
00:02:10,960 --> 00:02:14,350
But a convention adopted by many
developers is to name the unwrapped

41
00:02:14,350 --> 00:02:18,090
variable to match the wrapped variable,
like this.

42
00:02:18,090 --> 00:02:20,290
This can be a little confusing at first,
but

43
00:02:20,290 --> 00:02:22,960
you'll get used to it after
you see it a few times.

44
00:02:22,960 --> 00:02:25,090
You don't have to adopt
to this convention, but

45
00:02:25,090 --> 00:02:26,830
you may find that it saves time.

46
00:02:26,830 --> 00:02:30,570
This way you don't have to come up with
a new name for every unwrapped variable.

47
00:02:30,570 --> 00:02:34,140
Safely unwrapping optionals like this
is a fundamental Swift skill, and

48
00:02:34,140 --> 00:02:36,290
one can't have too much practice.

49
00:02:36,290 --> 00:02:39,530
Let's walk through another
example with UIImageView.

50
00:02:39,530 --> 00:02:43,680
Here I've created a UIImageView
which has a UIImage property.

51
00:02:43,680 --> 00:02:47,550
This UIImage property
is a UIImage optional.

52
00:02:47,550 --> 00:02:52,690
In this example, we'd like to access the
size property of this UIImage optional.

53
00:02:52,690 --> 00:02:56,460
If I try to access the image
property directly to get the size,

54
00:02:56,460 --> 00:02:57,850
the compiler complains.

55
00:02:59,360 --> 00:03:03,260
Since there's no guarantee that this
image property contains a value,

56
00:03:03,260 --> 00:03:05,300
we'll need to unwrap it carefully.

57
00:03:05,300 --> 00:03:07,790
So we use if let to
declare a variable and

58
00:03:07,790 --> 00:03:10,620
initialize it with
the unwrapped image property.

59
00:03:10,620 --> 00:03:13,550
If the image has a value,
we can access its size.

60
00:03:13,550 --> 00:03:15,870
If the image is nil,
we're still covered.

61
00:03:15,870 --> 00:03:18,420
Let's say we hadn't set the image yet.

62
00:03:18,420 --> 00:03:21,730
In that case,
the else block gets executed.

63
00:03:21,730 --> 00:03:24,370
And here we can see
the image hasn't been set.

64
00:03:24,370 --> 00:03:29,399
And if we do go ahead and set the image
to something, here we can see its size.

65
00:03:30,500 --> 00:03:34,000
And now that it's unwrapped, we can also
expand the image from within Playground.
