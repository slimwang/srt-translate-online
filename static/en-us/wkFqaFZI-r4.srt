1
00:00:00,190 --> 00:00:04,070
So, I've said methods aren't really magic. They're just procedures that have a

2
00:00:04,070 --> 00:00:08,071
first parameter bound to the object. There are some things in Python that are a

3
00:00:08,071 --> 00:00:12,320
little bit more magical than regular methods and we'll call them Magic Methods.

4
00:00:12,320 --> 00:00:15,919
Magic Methods are like regular methods except they get called in special

5
00:00:15,919 --> 00:00:21,332
situations. The most magical of all the Magic Methods is the one called init.

6
00:00:21,332 --> 00:00:26,220
Init takes at least one parameter, that's the self object. Recall that, that

7
00:00:26,220 --> 00:00:30,800
parameter's always bound to the object. It can take more parameters if we want.

8
00:00:30,800 --> 00:00:35,634
Doesn't need to. And what's special about init is it's called to initialize the

9
00:00:35,634 --> 00:00:40,300
object. So, let's add an init method to our restaurant class. And it's usually a

10
00:00:40,300 --> 00:00:44,595
good idea to place it at the top of the class. So, we have two underscores on

11
00:00:44,595 --> 00:00:50,161
both sides. And we're going to take one parameter and we'll take the parameter

12
00:00:50,161 --> 00:00:56,191
the name. So, that means init will have the object we're initializing as self

13
00:00:56,191 --> 00:01:00,895
and a name that's passed in. And all we'll do in the body of init is assign the

14
00:01:00,895 --> 00:01:05,728
name attribute to the value name. If we do this, this will ensure that all

15
00:01:05,728 --> 00:01:11,012
restaurants will have a name attribute. So where's the magic? The magic is that

16
00:01:11,012 --> 00:01:16,120
this method get called when we create a new object of the class. So, let me show

17
00:01:16,120 --> 00:01:20,884
you that in the interpreter. Now before we define init, we could do this. Create

18
00:01:20,884 --> 00:01:25,055
a new Restaurant, passing into parameters. And that would create an instance of

19
00:01:25,055 --> 00:01:30,325
this type. Now, we get an error and the error we get is a TypeError that says

20
00:01:30,325 --> 00:01:35,692
<u>init</u> takes exactly 2 arguments and we only gave it 1. Well, it doesn't look

21
00:01:35,692 --> 00:01:40,667
like we gave it any. It's getting one implicitly, which is the self object. But

22
00:01:40,667 --> 00:01:46,248
it expects two. It expects self as well as the name. So let's give it a name.

23
00:01:46,248 --> 00:01:52,689
Now, we didn't get an error and we'll see that mcdowells has a name attribute

24
00:01:52,689 --> 00:01:58,017
defined as what we passed init. And I should emphasize, the only magic about

25
00:01:58,017 --> 00:02:02,056
init is that it gets called when we initialize a new object. Otherwise, it's

26
00:02:02,056 --> 00:02:06,962
just like a regular method. If we decided that a more appropriate name for our

27
00:02:06,962 --> 00:02:11,714
restaurant would be McD's Mansion of Metameat, well we could call init method,

28
00:02:11,714 --> 00:02:16,442
passing in that new string, perfectly okay. And now, our name has changed to

29
00:02:16,442 --> 00:02:20,671
this value. When I said it's perfectly okay, I mean that it's correct. We don't

30
00:02:20,671 --> 00:02:24,676
get an error from the interpreter, but it's bad form to do this. If we want some

31
00:02:24,676 --> 00:02:28,460
of the code in init to be used other than initializing methods. Well, we should

32
00:02:28,460 --> 00:02:32,217
define that as a separate method. It's confusing to call init.
