1
00:00:00,240 --> 00:00:03,450
Android automatically detects
when input devices are attached.

2
00:00:03,450 --> 00:00:06,510
This means that when a player connects
the remote controller game controller

3
00:00:06,510 --> 00:00:10,190
Android begins reporting its
input events to the active view.

4
00:00:10,190 --> 00:00:12,350
And whether controllers happen
to be connected physically or

5
00:00:12,350 --> 00:00:15,790
via Bluetooth doesn't matter,
that's handled by the system.

6
00:00:15,790 --> 00:00:18,550
There are two types of input
events you should be aware of.

7
00:00:18,550 --> 00:00:20,690
Key events are triggered
by button presses.

8
00:00:20,690 --> 00:00:21,820
And this is important.

9
00:00:21,820 --> 00:00:24,550
Note that the movement of
a D-Pad is a button press.

10
00:00:24,550 --> 00:00:26,650
Such as up down left or right.

11
00:00:26,650 --> 00:00:28,540
Likewise the deep pad
it has a center button.

12
00:00:28,540 --> 00:00:31,590
And if you press it guess
what you get a key event.

13
00:00:31,590 --> 00:00:33,380
Next up are motion events.

14
00:00:33,380 --> 00:00:35,690
These are triggered by
joystick movements.

15
00:00:35,690 --> 00:00:38,050
Both of these are subclasses
of input event so

16
00:00:38,050 --> 00:00:40,020
they have some common functionality.

17
00:00:40,020 --> 00:00:43,290
Every input device has a device
idea associated with it.

18
00:00:43,290 --> 00:00:46,120
You can get this by calling
the get device ID method.

19
00:00:46,120 --> 00:00:49,020
This is really simple, but
it will become important later.

20
00:00:49,020 --> 00:00:50,040
In multiplayer games,

21
00:00:50,040 --> 00:00:53,970
you can use the device ID to map which
controller belongs to which player.

22
00:00:53,970 --> 00:00:56,090
To find out which button
press triggered a key event,

23
00:00:56,090 --> 00:00:58,059
retrieve the key code by
calling get key code.

24
00:00:59,110 --> 00:01:03,080
A key code is a constant integer that
indicates which button was pressed.

25
00:01:03,080 --> 00:01:06,010
Keep in mind it's a constant
not the Unicode character that

26
00:01:06,010 --> 00:01:07,650
corresponds to the key.

27
00:01:07,650 --> 00:01:10,300
The most important key codes
are listed here on this diagram and

28
00:01:10,300 --> 00:01:13,510
you can find a complete list by
following the link in the notes.

29
00:01:13,510 --> 00:01:16,660
For example, when the user presses
the B button, the key code will be,

30
00:01:16,660 --> 00:01:18,700
you guessed it, Button B.

31
00:01:18,700 --> 00:01:21,966
And by the way, Axis_ Hat refers
to the D-Pad on a game controller.

32
00:01:21,966 --> 00:01:26,420
Whereas Dpad_Up and Dpad_Down refer
to the Dpad on a remote control.

33
00:01:26,420 --> 00:01:29,760
We'll get to the codes that begin with
keyword Axis later, these are for

34
00:01:29,760 --> 00:01:31,150
joysticks.

35
00:01:31,150 --> 00:01:31,660
And by the way,

36
00:01:31,660 --> 00:01:34,510
here's something I didn't know
when I started developing games.

37
00:01:34,510 --> 00:01:36,600
Notice that we've two joysticks,
of course.

38
00:01:36,600 --> 00:01:40,070
The Axis on the first
joystick are called X and Y.

39
00:01:40,070 --> 00:01:43,180
The axes on the second
joystick are called Z and RZ.

40
00:01:44,430 --> 00:01:46,250
To capture key events in your game,

41
00:01:46,250 --> 00:01:49,140
override these callback
methods in the active view.

42
00:01:49,140 --> 00:01:52,670
For convenience, the key code is
available directly from the parameter.

43
00:01:52,670 --> 00:01:54,850
It's also available from the event.

44
00:01:54,850 --> 00:01:56,730
You can also capture key
events from an activity,

45
00:01:56,730 --> 00:01:59,700
and you can find out how to do
that in the instructor notes.

46
00:01:59,700 --> 00:02:02,220
Next, notice these
events return a boolean.

47
00:02:02,220 --> 00:02:04,220
Return true if you've
handled the event or

48
00:02:04,220 --> 00:02:07,070
false if you like to give the parent
method a chance to handle it.

49
00:02:07,070 --> 00:02:09,750
Conceptually you can think of input
events as working a little bit like

50
00:02:09,750 --> 00:02:11,020
exceptions in Java.

51
00:02:11,020 --> 00:02:13,980
They propagate up the stack
until the method handles them.

52
00:02:13,980 --> 00:02:15,930
Let's see how this works in code.

53
00:02:15,930 --> 00:02:19,670
I've just downloaded a controller sample
and imported it into Android studio.

54
00:02:19,670 --> 00:02:22,500
The Asteroids game in this project
contains code that demonstrates

55
00:02:22,500 --> 00:02:25,180
best practices for
handling input events.

56
00:02:25,180 --> 00:02:27,780
The rest of the code
though is super hacky.

57
00:02:27,780 --> 00:02:30,540
So consider anything that's not
demonstrating how to work with input

58
00:02:30,540 --> 00:02:33,950
events and
input device events to be suspect.

59
00:02:33,950 --> 00:02:36,440
Our game is divided into two packages.

60
00:02:36,440 --> 00:02:39,970
One which contains the view in the game
logic, and another which makes it easier

61
00:02:39,970 --> 00:02:42,870
to work with input events across
different Android versions.

62
00:02:42,870 --> 00:02:45,430
For now let's just focus on
game view because that contains

63
00:02:45,430 --> 00:02:47,920
all the logic we need
to handle key events.

64
00:02:47,920 --> 00:02:51,020
There's a lot of coding game view,
but the basic design is pretty simple.

65
00:02:51,020 --> 00:02:52,680
Here it is to make it clear.

66
00:02:52,680 --> 00:02:55,580
First, when an input device is
connected, we'll retrieve the deviceId.

67
00:02:55,580 --> 00:02:59,498
We'll will use this to create
a new ship for that player.

68
00:02:59,498 --> 00:03:02,370
And we're going to cover exactly
how to do this later in the course.

69
00:03:02,370 --> 00:03:05,090
The next step is going to be to
override the on key down and

70
00:03:05,090 --> 00:03:07,940
on key up methods in our view,
as we saw earlier.

71
00:03:07,940 --> 00:03:11,090
When a key event is received, the first
thing we'll do is get the deviceId, so

72
00:03:11,090 --> 00:03:12,750
we know which player it's for.

73
00:03:12,750 --> 00:03:16,150
Next will check the key code to
figure out which button was pressed.

74
00:03:16,150 --> 00:03:18,700
And finally we'll update
that ships heading.

75
00:03:18,700 --> 00:03:22,340
Let's see how this looks in code,
will start in a GameView class.

76
00:03:22,340 --> 00:03:25,020
Here's the on key down
method that we overrode.

77
00:03:25,020 --> 00:03:27,900
And here's where we get the device
ID from the input event.

78
00:03:27,900 --> 00:03:30,950
Next we have some game logic that looks
up the ship that these device ideas

79
00:03:30,950 --> 00:03:32,360
associated with.

80
00:03:32,360 --> 00:03:36,490
It does this by maintaining
a mapping from device ID to Ship.

81
00:03:36,490 --> 00:03:40,840
To handle the actual KeyEvent, this game
just passes it directly to the ship.

82
00:03:40,840 --> 00:03:44,020
Before we look at that code, notice that
this method returns true if the event

83
00:03:44,020 --> 00:03:47,300
was handled, and if not, returns
whether its parent handled the event.

84
00:03:48,400 --> 00:03:51,860
Now let's check out the onKeyDown
method of the Ship class.

85
00:03:51,860 --> 00:03:55,410
We use a switch statement to check for
different types of key codes.

86
00:03:55,410 --> 00:03:59,030
And if we scroll down, we can take
a quick look at the isFireKey method.

87
00:03:59,030 --> 00:04:02,700
And this is just showing a quick way of
checking for multiple key codes at once.

88
00:04:02,700 --> 00:04:03,820
Not bad right?

89
00:04:03,820 --> 00:04:07,320
Because Android automatically detects
when input devices are connected and

90
00:04:07,320 --> 00:04:10,040
begins reporting their input
events to the active view,

91
00:04:10,040 --> 00:04:13,520
all you need to do is override
a method and plug in a controller.

92
00:04:13,520 --> 00:04:17,089
None of the other coding game view
is required to capture key events.

93
00:04:17,089 --> 00:04:19,910
If you want here's
an optional exercise for you.

94
00:04:19,910 --> 00:04:22,240
If you're an experienced
programmer this isn't necessary.

95
00:04:22,240 --> 00:04:24,040
But if it's your first time
dealing with key events

96
00:04:24,040 --> 00:04:25,450
I'd recommend you knock it out.

97
00:04:25,450 --> 00:04:27,640
Start a brand new Android TV project.

98
00:04:27,640 --> 00:04:29,520
Create an activity containing a view.

99
00:04:29,520 --> 00:04:31,850
And write code to log
which keys are pressed.

100
00:04:31,850 --> 00:04:34,220
Refer to the developer training by
following the link in the instruction

101
00:04:34,220 --> 00:04:35,490
notes if you get stuck.

102
00:04:35,490 --> 00:04:36,770
And check out the solution
if you'd like.
