1
00:00:00,320 --> 00:00:04,718
Well, if you actually tried this, you will see that you get 434. That's a

2
00:00:04,718 --> 00:00:09,610
little unfortunate. The reason here is if you remember that 4.35 times 100

3
00:00:09,610 --> 00:00:15,970
because of round off was 434.99 something. And the 0.99 something is the

4
00:00:15,970 --> 00:00:20,930
fractional part, and that was thrown away to get this integer. To really do

5
00:00:20,930 --> 00:00:24,712
this right in Java, you have to use a pretty arcane formula that's in fact so

6
00:00:24,712 --> 00:00:30,724
arcane that I have to look it up. You use a mathematical function called round

7
00:00:30,724 --> 00:00:38,459
that gets you the closest integer. So, 4.35 times 100 may be 434.999. But the

8
00:00:38,459 --> 00:00:44,556
closest integer to that is 435. And then, for reasons that are too depressing

9
00:00:44,556 --> 00:00:49,262
to have to get into, you still have to cast that into int. We have a fact sheet

10
00:00:49,262 --> 00:00:53,200
that you can consult if you actually run into this situation. The round

11
00:00:53,200 --> 00:00:57,130
function here is one example of a mathematical function. There's a bunch of

12
00:00:57,130 --> 00:00:59,936
them, and we'll take them up soon, but first let's do another programming

13
00:00:59,936 --> 00:01:01,150
exercise.
