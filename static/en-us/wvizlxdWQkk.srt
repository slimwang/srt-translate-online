1
00:00:00,180 --> 00:00:02,920
Let's talk now about these
cases where there isn't a clear

2
00:00:02,920 --> 00:00:05,380
distinction between servers and clients.

3
00:00:05,380 --> 00:00:09,380
For instance if you look at all of the
big data applications that we hear about

4
00:00:09,380 --> 00:00:15,220
today, the state of the application is
distributed and stored across all nodes.

5
00:00:15,220 --> 00:00:19,900
The processors on these nodes
run certain applications such as

6
00:00:19,900 --> 00:00:25,830
the analytics codes, the mining codes,
searching for patterns or searching in

7
00:00:25,830 --> 00:00:31,310
order to answer your Google web search
request or some other applications.

8
00:00:31,310 --> 00:00:34,510
And they access the state
that's distributed across

9
00:00:34,510 --> 00:00:36,740
all the other nodes in the system.

10
00:00:36,740 --> 00:00:41,130
The key about these applications
is that every node in the systems

11
00:00:41,130 --> 00:00:43,610
owns some portion of the state.

12
00:00:43,610 --> 00:00:47,210
By own here we mean that there is
some state that's locally stored in

13
00:00:47,210 --> 00:00:52,390
a particular node or that's generated by
computation that's running on that node.

14
00:00:52,390 --> 00:00:55,690
So the overall application
state is the union of

15
00:00:55,690 --> 00:01:00,340
all of these pieces that
are present on every one node.

16
00:01:00,340 --> 00:01:03,340
It's as if all the nodes
in the system are peers.

17
00:01:03,340 --> 00:01:08,270
They all require accesses to
the state anywhere in the system and

18
00:01:08,270 --> 00:01:12,950
they all provide access to
their local storage state

19
00:01:12,950 --> 00:01:16,190
to any of their other
peers in the system.

20
00:01:16,190 --> 00:01:21,218
For instance, think about the large
web search applications, like Google.

21
00:01:21,218 --> 00:01:24,700
The state in that application,
which is the information about

22
00:01:24,700 --> 00:01:29,200
every single webpage in the world,
is stored on many machines.

23
00:01:29,200 --> 00:01:32,250
And at the same time,
it's also processed on all of them.

24
00:01:32,250 --> 00:01:36,305
Whenever you type in a web search,
it may get processed on a different

25
00:01:36,305 --> 00:01:40,670
processor in this distributed system,
but the statements required for

26
00:01:40,670 --> 00:01:43,392
that web search,
regardless in which processor it hits,

27
00:01:43,392 --> 00:01:46,700
may be somewhere on some
of the other nodes.

28
00:01:46,700 --> 00:01:48,310
Applications like Facebook and

29
00:01:48,310 --> 00:01:52,900
YouTube, also have state that includes
billions of images and videos.

30
00:01:52,900 --> 00:01:56,150
In these images and
videos are a process to detect

31
00:01:56,150 --> 00:02:00,560
certain objects to transform them
into different formats and sizes.

32
00:02:00,560 --> 00:02:04,890
So there's some computation that's
performed on that distributed content.

33
00:02:04,890 --> 00:02:07,730
The code that performs these
processing operations,

34
00:02:07,730 --> 00:02:10,729
these transformations,
trans-coding of the videos or

35
00:02:10,729 --> 00:02:15,140
the images, may run on different
nodes in the system, but

36
00:02:15,140 --> 00:02:19,580
may potentially need to access state
that's distributed on other nodes.

37
00:02:19,580 --> 00:02:23,540
These applications are examples
of applications where every node

38
00:02:23,540 --> 00:02:27,865
is responsible for
managing the locally stored state and

39
00:02:27,865 --> 00:02:30,630
providing access to
the locally stored state.

40
00:02:30,630 --> 00:02:34,320
But also at the same times accessing
the state that's stored by

41
00:02:34,320 --> 00:02:35,880
the remaining nodes in the system.

42
00:02:36,930 --> 00:02:40,850
The reason I'm putting the term
peer here in quotation marks, and

43
00:02:40,850 --> 00:02:45,900
not using a popular term that you may
have heard of, peer to peer systems,

44
00:02:45,900 --> 00:02:49,970
is that in these kinds of distributed
applications it is still possible that

45
00:02:49,970 --> 00:02:54,090
there will be some number of
designated nodes that will perform some

46
00:02:54,090 --> 00:02:58,320
overall management and configuration
tasks for the entire system.

47
00:02:58,320 --> 00:03:01,220
So, there's some portion
of control plan tasks or

48
00:03:01,220 --> 00:03:06,210
management plan tasks that are performed
by some more centralized designated

49
00:03:06,210 --> 00:03:10,428
set of nodes that's not evenly
distributed among all nodes.

50
00:03:10,428 --> 00:03:14,140
In a peer-to-peer system,
even the overall control and

51
00:03:14,140 --> 00:03:16,570
management of this system
would be done by all.
