1
00:00:00,008 --> 00:00:04,040
Now the string.find function
was really helpful.

2
00:00:04,040 --> 00:00:05,670
By just putting the word
we're searching for

3
00:00:05,670 --> 00:00:10,060
in between parentheses, we were returned
with the index where that word occurred.

4
00:00:10,060 --> 00:00:13,360
But our ultimate goal is to
replace the instances of noun or

5
00:00:13,360 --> 00:00:15,860
verb in a string with our own words.

6
00:00:15,860 --> 00:00:18,720
Wouldn't it be nice if we could do
this in one step rather than having to

7
00:00:18,720 --> 00:00:21,380
slice strings and
add replacement variables?

8
00:00:21,380 --> 00:00:22,779
Well, why don't we find out?

9
00:00:25,468 --> 00:00:29,031
So I'm just going to do a quick Google
search for Python string replace, and

10
00:00:29,031 --> 00:00:31,514
see if anything comes up
that piques our interest.

11
00:00:31,514 --> 00:00:36,844
So python string replace.

12
00:00:36,844 --> 00:00:38,840
Hm, let me check out this first link.

13
00:00:40,000 --> 00:00:41,640
Hm.
So it seems like there's this

14
00:00:41,640 --> 00:00:44,420
replace method built in to Python.

15
00:00:44,420 --> 00:00:47,630
Now, you'll learn a lot more about what
methods are in stage three, but for

16
00:00:47,630 --> 00:00:51,200
now just think of a method as
a fancy word for a function.

17
00:00:51,200 --> 00:00:54,045
I'll refer to this replace method
as a function from now on.

18
00:00:54,045 --> 00:00:56,820
Now let's read up on this documentation.

19
00:00:56,820 --> 00:00:59,850
It says the method replace()
returns a copy of the string

20
00:00:59,850 --> 00:01:02,572
in which the occurrences of old
have been replaced with new,

21
00:01:02,572 --> 00:01:05,550
optionally restricting the number
of replacements to max.

22
00:01:06,550 --> 00:01:09,950
Now this sounds pretty intimidating
with words like copy of a string and

23
00:01:09,950 --> 00:01:13,610
optionally restricting the number of
replacements, but let's not panic.

24
00:01:13,610 --> 00:01:17,140
If we scroll down,
it seems like they have an example here.

25
00:01:17,140 --> 00:01:21,010
So it says if they have this string
which is set to this string example

26
00:01:21,010 --> 00:01:22,418
wow this is really string, and

27
00:01:22,418 --> 00:01:28,280
they call str.replace with is in the
first position, and was in the second.

28
00:01:28,280 --> 00:01:32,780
Looks like they get thwas was string
example wow thwas was really string.

29
00:01:32,780 --> 00:01:38,060
So it seems like every instance of is in
the string is being replaced with was.

30
00:01:38,060 --> 00:01:40,080
Although we have no idea
how this function works,

31
00:01:40,080 --> 00:01:44,690
we can see how by swapping out noun or
verb for is and our replacement word for

32
00:01:44,690 --> 00:01:48,610
was, we'll be able to replace noun and
verbs with our own words.

33
00:01:48,610 --> 00:01:52,520
And will uses replace function in
the quiz following to do just that.

34
00:01:52,520 --> 00:01:55,740
Now, if that felt a bit rushed, don't
worry I'll explain how this function

35
00:01:55,740 --> 00:01:57,668
works in more detail in just a second.

36
00:01:57,668 --> 00:02:01,670
I just wanted to give you an example of
something programmers do all the time

37
00:02:01,670 --> 00:02:04,975
which is searching for tools and reading
up on their documentation online.

38
00:02:04,975 --> 00:02:08,910
By looking or even asking for
what you need help with you'll find

39
00:02:08,910 --> 00:02:12,180
out there's a lot of good information
out there, which is often times free.

40
00:02:12,180 --> 00:02:16,122
You'll also become more and more self
reliant, which is a very important skill

41
00:02:16,122 --> 00:02:19,020
to develop as you continue
your programming career.

42
00:02:19,020 --> 00:02:21,600
Now, let's get back to
the replace function.

43
00:02:21,600 --> 00:02:25,099
Now, if you remember this string.find
function from the last quiz,

44
00:02:25,099 --> 00:02:27,486
you see that replace is
pretty similar to that.

45
00:02:27,486 --> 00:02:31,090
The basic structure of the replace
function looks like this.

46
00:02:31,090 --> 00:02:32,670
So we have this string test_string,

47
00:02:32,670 --> 00:02:35,800
which is followed by .replace which
is followed by a parenthesis.

48
00:02:35,800 --> 00:02:38,430
And this is where we
pass in two strings.

49
00:02:38,430 --> 00:02:41,820
The first string is old which
is the string we want to replace

50
00:02:41,820 --> 00:02:42,490
in test_string.

51
00:02:42,490 --> 00:02:49,300
And the second is this string new,
which will replace old in test string.

52
00:02:49,300 --> 00:02:53,430
So, let's go through one more example
to really understand how replace works.

53
00:02:53,430 --> 00:02:57,965
So here I have this sentence variable,
set to I am a NOUN and I'm calling

54
00:02:57,965 --> 00:03:03,220
sentence.replace with NOUN in the first
position and bird in the second,

55
00:03:03,220 --> 00:03:07,480
because I want to replace NOUN
with bird In the string sentence.

56
00:03:08,600 --> 00:03:11,610
And the output of this
code will look like this.

57
00:03:11,610 --> 00:03:12,190
I am a bird.
