1
00:00:01,100 --> 00:00:02,400
When you try to write a program or

2
00:00:02,400 --> 00:00:06,160
a script, you're actually testing
that program in a very basic way.

3
00:00:06,160 --> 00:00:07,990
You'll see if the program runs and

4
00:00:07,990 --> 00:00:12,470
you'll usually see if it passes a bare
minimum in terms of functionality.

5
00:00:12,470 --> 00:00:16,260
These types of tests actually have
a name and they're called smoke tests.

6
00:00:16,260 --> 00:00:17,690
So, I smoke.

7
00:00:17,690 --> 00:00:21,450
One hypothesis is that it comes
from testing electronic devices.

8
00:00:21,450 --> 00:00:22,910
You turn on your device and

9
00:00:22,910 --> 00:00:28,040
if you start seeing smoke, you'd know
that there's probably something wrong.

10
00:00:28,040 --> 00:00:31,430
Another possible origin of
the name comes from testing pipes.

11
00:00:31,430 --> 00:00:35,300
Before running water or maybe some more
dangerous liquid through the pipes,

12
00:00:35,300 --> 00:00:38,970
engineers would test with smoke
to see if there were any leaks.

13
00:00:38,970 --> 00:00:41,040
So, that gives you a little
background of the name, but

14
00:00:41,040 --> 00:00:43,660
what do smoke tests do
in terms of software?

15
00:00:43,660 --> 00:00:47,700
A smoke test is a series of test cases
that make sure that the most critical

16
00:00:47,700 --> 00:00:51,010
functions of a program work,
but they don't go into details.

17
00:00:51,010 --> 00:00:55,550
This is why they're sometimes
described as wide and shallow tests.

18
00:00:55,550 --> 00:00:57,670
Since these tests don't
go into the details,

19
00:00:57,670 --> 00:01:00,640
they could be run much faster
than a full test suite.

20
00:01:00,640 --> 00:01:02,720
The speed of the smoke
test is pretty important.

21
00:01:02,720 --> 00:01:06,300
If a smoke test breaks anything in the
application, you could stop working and

22
00:01:06,300 --> 00:01:07,860
fix it immediately.

23
00:01:07,860 --> 00:01:11,910
And at that point, there's no
need to run more advanced tests.

24
00:01:11,910 --> 00:01:15,880
Some of these other and longer running
tests involve more expensive resources

25
00:01:15,880 --> 00:01:18,010
such as dedicated human testers.

26
00:01:18,010 --> 00:01:22,220
And in general, it's good not to bother
them with obviously broken builds.

27
00:01:22,220 --> 00:01:26,150
So, in short, smoke tests are meant to
catch problems fast, and save time and

28
00:01:26,150 --> 00:01:28,830
money by providing
feedback on quality fast.

29
00:01:28,830 --> 00:01:31,710
They're very important when
using Continuous Delivery.

30
00:01:31,710 --> 00:01:34,160
You don't want a bad build to
go through the pipeline and

31
00:01:34,160 --> 00:01:38,270
run all those long extensive and
expensive tests, if the build is bad.

32
00:01:38,270 --> 00:01:40,410
And this is why smoke
tests are sometimes called

33
00:01:40,410 --> 00:01:42,190
build verification tests.

34
00:01:42,190 --> 00:01:45,960
Let's look at an example of what
a series of smoke tests might look like.

35
00:01:45,960 --> 00:01:47,750
Let's say that you have an application,
and

36
00:01:47,750 --> 00:01:50,370
the point of that application
is to listen to a port.

37
00:01:50,370 --> 00:01:54,050
Some example tests might be,
if you're connected to the port,

38
00:01:54,050 --> 00:01:56,060
do you get the expected response?

39
00:01:56,060 --> 00:01:59,500
Does it process a simple request
in a reasonable amount of time?

40
00:01:59,500 --> 00:02:02,455
Does your program return
the data in the expected format?

41
00:02:02,455 --> 00:02:06,210
Keep in mind that it's important to not
only test the functional requirements

42
00:02:06,210 --> 00:02:07,719
like does this button work, but

43
00:02:07,719 --> 00:02:12,510
also non-functional ones like does this
process in a reasonable amount of time.

44
00:02:12,510 --> 00:02:15,230
In the same way that there's no
point in testing further if basic

45
00:02:15,230 --> 00:02:18,290
functionality is broken,
there's no point going forward

46
00:02:18,290 --> 00:02:21,770
if the new build of the application is
ten times slower than the previous one.

47
00:02:21,770 --> 00:02:26,430
In the context of DevOps and Continuous
Delivery, you'd run smoke tests at

48
00:02:26,430 --> 00:02:29,770
the time of continuous integration
right after the build.

49
00:02:29,770 --> 00:02:32,915
And then, you'd run them again
after deploying the build to every

50
00:02:32,915 --> 00:02:35,905
environment, test staging,
and possibly also production.

51
00:02:35,905 --> 00:02:37,149
[BLANK_AUDIO]
