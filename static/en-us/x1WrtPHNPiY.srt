1
00:00:00,000 --> 00:00:02,000
Here is my solution.

2
00:00:02,000 --> 00:00:09,000
First need to calculate t and s such that n equals 2**t * s + 1.

3
00:00:09,000 --> 00:00:15,000
I've written a helper function to calculate t which factors out 2s

4
00:00:15,000 --> 00:00:17,000
to calculate the appropriate value of t.

5
00:00:17,000 --> 00:00:20,000
Then to calculate s we divide.

6
00:00:20,000 --> 00:00:24,000
N_tests is the number of tests needed to get the desired probability

7
00:00:24,000 --> 00:00:29,000
then in this loop I randomly pick an a between one and n

8
00:00:29,000 --> 00:00:31,000
and see if I've tried it before.

9
00:00:31,000 --> 00:00:36,000
If I haven't, I break out of the loop and add it to the side of things that I've tried.

10
00:00:36,000 --> 00:00:43,000
Then we run our first tests, which is to raise a to the power of s, mod in, and see if it's equal to 1.

11
00:00:43,000 --> 00:00:47,000
If that's true, we found an a and can continue to search.

12
00:00:47,000 --> 00:00:54,000
If it fails the first test, we try the second test, which is raising a to the power of 2^(j*s)

13
00:00:54,000 --> 00:00:57,000
for all j's between 0 and t.

14
00:00:57,000 --> 00:01:02,000
If it passes both tests for all randomly chosen values of a,

15
00:01:02,000 --> 99:59:59,999
we return True.
