1
00:00:00,580 --> 00:00:02,960
Now that we've seen how file systems work, we turn

2
00:00:02,960 --> 00:00:06,250
to several optimizations that help make it fast, since most storage

3
00:00:06,250 --> 00:00:09,230
devices tend to be slow. We'll first discuss some software

4
00:00:09,230 --> 00:00:12,760
optimizations and then turn to hardware. If you're first reaction is,

5
00:00:12,760 --> 00:00:15,490
let's use a cache, then you're on the right track.

6
00:00:15,490 --> 00:00:19,260
Indeed most operating systems do use free portions of main memory

7
00:00:19,260 --> 00:00:23,260
as a cache for the much slower mass storage device. Statistics

8
00:00:23,260 --> 00:00:26,100
vary on this sort of thing over time as technologies changes,

9
00:00:26,100 --> 00:00:28,720
but by most measurements, memory is as much as 100,000

10
00:00:28,720 --> 00:00:32,360
times faster than disk for random access. Would use the

11
00:00:32,360 --> 00:00:34,560
portion of memory used as a cache for disc, the

12
00:00:34,560 --> 00:00:38,040
unified buffer cache, a name it earned for some obscure historical

13
00:00:38,040 --> 00:00:41,260
reasons. The terminology here can be a little confusing. So

14
00:00:41,260 --> 00:00:44,410
I'm going to emphasize that we're talking about in memory caching of

15
00:00:44,410 --> 00:00:46,840
the contents of the disc, not the RAM on the

16
00:00:46,840 --> 00:00:51,260
disc controller that the device controller here might use. When data

17
00:00:51,260 --> 00:00:53,960
is read from disc, is stored in this unified buffer

18
00:00:53,960 --> 00:00:57,070
cache so that subsequent reads can find it there. Instead

19
00:00:57,070 --> 00:01:00,320
of having to bother the disk again, because disk access

20
00:01:00,320 --> 00:01:03,160
is often sequential. It is common also to read ahead in

21
00:01:03,160 --> 00:01:07,080
a file, loading up subsequent blocks to main memory so

22
00:01:07,080 --> 00:01:10,020
that is there when the application needs it. Writing to

23
00:01:10,020 --> 00:01:13,200
disk is usually done with the write back policy. The

24
00:01:13,200 --> 00:01:16,640
change is made only in the unified buffer cache at first.

25
00:01:16,640 --> 00:01:20,070
And the page is marked as dirty. The slower operation

26
00:01:20,070 --> 00:01:23,180
of writing the data to the disk is postponed until

27
00:01:23,180 --> 00:01:26,930
some more opportune time. New files can also be created

28
00:01:26,930 --> 00:01:29,830
and stored in the unified buffer cache. If a file has

29
00:01:29,830 --> 00:01:32,410
a very short life span, writing to the disk might

30
00:01:32,410 --> 00:01:35,580
not be necessary at all. The existence of the end memory

31
00:01:35,580 --> 00:01:38,740
cache. Means that a call to write isn't a guarantee

32
00:01:38,740 --> 00:01:42,130
that the data is changed on the disk and will persist.

33
00:01:42,130 --> 00:01:45,940
The changes are only reflected in memory. The advantage is

34
00:01:45,940 --> 00:01:48,290
that the program gets to resume faster and get on with

35
00:01:48,290 --> 00:01:51,630
its work. The downside is that if the system crashes

36
00:01:51,630 --> 00:01:53,890
before the write has been made to disk then changes will

37
00:01:53,890 --> 00:01:56,690
be lost. If you really do want to make sure that

38
00:01:56,690 --> 00:02:01,090
changes are reflected on disk, need to call fsync or msync

39
00:02:01,090 --> 00:02:04,420
to flush out the unified buffer cache. The write-back policy of

40
00:02:04,420 --> 00:02:07,130
the buffer cache is also the reason that operating systems will

41
00:02:07,130 --> 00:02:09,490
warn you not to move storage devices without

42
00:02:09,490 --> 00:02:11,530
ejecting it first. It needs a chance to

43
00:02:11,530 --> 00:02:13,990
flush the buffer cache and any dirty pages

44
00:02:13,990 --> 00:02:15,990
so that changes will be reflected on the device.
