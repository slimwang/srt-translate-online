1
00:00:00,130 --> 00:00:04,582
We're going to talk a little bit
about the Interactive Resume Project.

2
00:00:04,582 --> 00:00:07,054
You were told how to make the map here.

3
00:00:07,054 --> 00:00:12,079
Essentially, you had to add this line

4
00:00:12,079 --> 00:00:18,841
to your resume.js file to
make the resume show up.

5
00:00:18,841 --> 00:00:24,403
And you also have to uncomment
a bunch of lines in your helper.js.

6
00:00:24,403 --> 00:00:30,160
So, essentially, all the lines here,
you have to uncomment those lines.

7
00:00:30,160 --> 00:00:37,760
And if you did this, the map on your
resume showed up via magic, or not.

8
00:00:37,760 --> 00:00:41,430
We're going to talk a little bit
about how this actually happens.

9
00:00:41,430 --> 00:00:45,060
What the code for
showing your resume is like.

10
00:00:45,060 --> 00:00:49,420
And essentially most of the code
is in the helper.js file,

11
00:00:49,420 --> 00:00:50,900
the file that you downloaded.

12
00:00:50,900 --> 00:00:56,879
And, there's one main function
that makes all of this happen,

13
00:00:56,879 --> 00:00:59,767
it's called initializeMap.

14
00:00:59,767 --> 00:01:05,251
And this function is essentially
called when your page loads,

15
00:01:05,251 --> 00:01:12,607
initializeMap is called, essentially,
once you uncomment this quote over here.

16
00:01:12,607 --> 00:01:16,170
This is exactly what happens,
right let's close it.

17
00:01:16,170 --> 00:01:20,912
And in fact, I have actually
uncommented it in here so you can see,

18
00:01:20,912 --> 00:01:24,060
in here,
initializeMap is called on load.

19
00:01:24,060 --> 00:01:29,190
Yeah, this line over here, one of
the lines that you had to uncomment.

20
00:01:29,190 --> 00:01:34,520
Roughly, what happens when this
function is called is that, the script

21
00:01:34,520 --> 00:01:39,270
collects all the locations from the
objects that you have in your resume.

22
00:01:39,270 --> 00:01:42,920
So this happens in a helper function
that's called locationFinder.

23
00:01:42,920 --> 00:01:47,610
Essentially, what this function does
is it looks over your work, and

24
00:01:48,800 --> 00:01:53,550
your places where you're working, and
your education, and your bio object.

25
00:01:53,550 --> 00:01:57,907
And it collects all the location
data from from those data objects,

26
00:01:57,907 --> 00:02:01,980
and then it uses a Google Play
search service to translate

27
00:02:01,980 --> 00:02:06,720
those three addresses into longitude and
latitude and

28
00:02:06,720 --> 00:02:11,470
then places that as pins on the map.

29
00:02:11,470 --> 00:02:16,030
So we can just go upwards
to this function.

30
00:02:16,030 --> 00:02:19,341
Because really, inside this function,
inside initializeMap,

31
00:02:19,341 --> 00:02:21,920
that's where everything happens.

32
00:02:21,920 --> 00:02:26,556
And so essentially we define several
helper functions inside this

33
00:02:26,556 --> 00:02:31,191
function and then call them in order
to collect the information and

34
00:02:31,191 --> 00:02:33,770
to present it as pins on the map.

35
00:02:33,770 --> 00:02:39,560
So the first interesting line that
we have here is this line over here.

36
00:02:39,560 --> 00:02:43,121
So, map = new google.maps.Map(document...).

37
00:02:43,121 --> 00:02:48,197
And so, what happens is that in
here we create a new map object and

38
00:02:48,197 --> 00:02:51,493
we are passing two arguments
to fit this map.

39
00:02:51,493 --> 00:02:56,147
This argument over here,
the document.querySelector('#map'),

40
00:02:56,147 --> 00:03:00,976
that's just a division inside
your index.html file that the map

41
00:03:00,976 --> 00:03:06,400
should attach to that, that's
where the map should be displayed.

42
00:03:06,400 --> 00:03:09,850
And the map options is something
that we define over here.

43
00:03:09,850 --> 00:03:15,115
And it just tells Google Maps which
type of map we want to use and

44
00:03:15,115 --> 00:03:17,290
how we want to display it.

45
00:03:17,290 --> 00:03:22,780
And we can actually go to
see the documentation.

46
00:03:22,780 --> 00:03:27,870
So this is just in general
Google Maps web page,

47
00:03:27,870 --> 00:03:32,010
and then has a lot of information.

48
00:03:32,010 --> 00:03:36,880
And here you can see about
different map types that it has.

49
00:03:37,930 --> 00:03:42,090
And now there's an example.

50
00:03:42,090 --> 00:03:47,390
In here for example, there is an example
code of how to create a new map.

51
00:03:47,390 --> 00:03:51,384
So as you can see we're calling
new google.maps.Map and

52
00:03:51,384 --> 00:03:56,031
then attaching it to a certain
element in our index.html file, and

53
00:03:56,031 --> 00:03:58,250
then giving it the map options.

54
00:03:58,250 --> 00:04:02,590
All right, so, we're just
creating our new map here, but

55
00:04:02,590 --> 00:04:05,350
we're not doing anything with it.

56
00:04:05,350 --> 00:04:08,750
Now first we need to collect all
the locations from our resume.

57
00:04:08,750 --> 00:04:11,930
And this happens in this function
over here, locationFinder.

58
00:04:11,930 --> 00:04:15,535
So what this does is, it's a really,
actually very simple function so

59
00:04:15,535 --> 00:04:18,916
there's nothing over here,
actually, that you haven't seen.

60
00:04:18,916 --> 00:04:21,663
Basically, we create an empty array and

61
00:04:21,663 --> 00:04:26,589
then we enter the locations from the
contacts in here as the first item and

62
00:04:26,589 --> 00:04:30,860
we look over to education section and
the work section.

63
00:04:30,860 --> 00:04:35,578
And each location that we find we enter
it in and those locations are going to

64
00:04:35,578 --> 00:04:39,080
be, probably, street addresses or
some sort of a string.

65
00:04:39,080 --> 00:04:42,640
And we would essentially want to
translate those locations

66
00:04:42,640 --> 00:04:45,450
into longitude and
latitude into the relevant objects so

67
00:04:45,450 --> 00:04:50,340
that we can push them, so that we can
make them into pins into the map.

68
00:04:51,950 --> 00:04:54,550
And so this, as you can see over here.

69
00:04:54,550 --> 00:05:00,537
So at the end, we call locations
= locationFinder, right?

70
00:05:00,537 --> 00:05:07,500
So, this is all happening
inside initializeMap.

71
00:05:07,500 --> 00:05:11,280
So we create this new locations,
all right, it has all of our locations.

72
00:05:11,280 --> 00:05:14,850
And then we call pinPoster when
these locations are ready.

73
00:05:14,850 --> 00:05:16,650
So let's go and see what pinPoster does.

74
00:05:16,650 --> 00:05:21,962
So what pinPoster does,
it actually uses an additional service,

75
00:05:21,962 --> 00:05:24,580
the PlacesService,

76
00:05:24,580 --> 00:05:28,940
which is not strictly a part of
Google Maps but it is a related service.

77
00:05:28,940 --> 00:05:32,378
It's a service that you
can use with Google Maps.

78
00:05:32,378 --> 00:05:36,360
And so essentially this is the service
that's going to translate those

79
00:05:36,360 --> 00:05:39,290
locations into objects that
we can add into the map.

80
00:05:39,290 --> 00:05:42,717
The first step that we need to do,
to do that,

81
00:05:42,717 --> 00:05:47,160
would be to create this service,
initiate this service.

82
00:05:47,160 --> 00:05:50,000
So this happens in this line over here.

83
00:05:50,000 --> 00:05:55,917
If we want to see how the information
on the Places Library, here it is.

84
00:05:55,917 --> 00:06:01,471
And so this essentially enables
the application to search for

85
00:06:01,471 --> 00:06:07,681
places and this is to make it work
in addition to what I've shown you.

86
00:06:07,681 --> 00:06:11,720
You have to add this line over
here in your index.html file.

87
00:06:11,720 --> 00:06:14,783
And in fact,
if you remember in the instructions,

88
00:06:14,783 --> 00:06:18,500
you were told to uncomment one
line in your index.html file.

89
00:06:18,500 --> 00:06:20,997
And this is the line that
you were told to uncomment.

90
00:06:20,997 --> 00:06:25,570
So essentially, this is the line
that loads this additional library.

91
00:06:25,570 --> 00:06:28,210
So as you can see, there are several
different types of searches that you can

92
00:06:28,210 --> 00:06:29,530
perform using this library.

93
00:06:29,530 --> 00:06:33,620
You can do a nearby search, a text
search, and a bunch of other things.

94
00:06:33,620 --> 00:06:39,577
The search that we are using in
our helper.js, is a text search.

95
00:06:39,577 --> 00:06:44,482
So this is a search that essentially
presents a list of nearby places based

96
00:06:44,482 --> 00:06:45,930
on a string.

97
00:06:45,930 --> 00:06:50,552
And this is exactly what we needed
because in our resumeBuilder.js,

98
00:06:50,552 --> 00:06:55,726
we represented the different locations,
different schools, and different

99
00:06:55,726 --> 00:07:00,538
places that you work as string, so
this is the appropriate thing to use.

100
00:07:00,538 --> 00:07:07,802
And so here's a little more
information of what you need.

101
00:07:07,802 --> 00:07:12,470
The different type of things
that you need to provide

102
00:07:12,470 --> 00:07:14,910
in order to make your request work.

103
00:07:14,910 --> 00:07:19,302
But essentially,
the basic things that you need is,

104
00:07:19,302 --> 00:07:23,900
you need your request and
you need a callback function.

105
00:07:23,900 --> 00:07:27,647
So, basically to do a search,
you will run the service.textSearch, and

106
00:07:27,647 --> 00:07:29,976
then you'll need to give
it your parameters.

107
00:07:29,976 --> 00:07:34,419
Requesting callback, the request
can contain a lot of things but

108
00:07:34,419 --> 00:07:38,315
the basic thing that it has to contain,
would be a query.

109
00:07:38,315 --> 00:07:41,518
And the query item is just supposed
to be the string of the location that

110
00:07:41,518 --> 00:07:43,530
you're going to be searching for.

111
00:07:43,530 --> 00:07:47,680
So as you can see here, we have a for loop
will look up all our locations that we

112
00:07:47,680 --> 00:07:51,145
collected before and make a new
request for each one of those.

113
00:07:51,145 --> 00:07:55,440
And with that locations string,
and then with this callback function.

114
00:07:55,440 --> 00:08:00,470
Now the callback function is essentially
the function is going to handle

115
00:08:00,470 --> 00:08:03,930
whatever textSearch returns.

116
00:08:03,930 --> 00:08:09,009
So you need to put that function
as an input to textSearch.

117
00:08:09,009 --> 00:08:13,635
And so we have actually defined
this callback function over here.

118
00:08:13,635 --> 00:08:16,995
So this is a function that takes
two arguments, results and status.

119
00:08:16,995 --> 00:08:19,535
Both arguments are returned
by textSearch.

120
00:08:19,535 --> 00:08:21,755
Status just tells you whether
the service was able to return

121
00:08:21,755 --> 00:08:23,135
something meaningful.

122
00:08:23,135 --> 00:08:28,435
And then what results
contains is an array of,

123
00:08:28,435 --> 00:08:30,135
essentially, longitude and latitudes.

124
00:08:30,135 --> 00:08:32,815
Why an array, because sometimes
there is more than one match.

125
00:08:33,860 --> 00:08:35,967
But we're going to use the first one.

126
00:08:35,967 --> 00:08:40,129
Essentially what this line over
here does is, it tests whether

127
00:08:40,129 --> 00:08:45,420
the status which was returned was OK,
whether we got a valid result.

128
00:08:45,420 --> 00:08:50,337
And if so, it calls another
function that we have defined here,

129
00:08:50,337 --> 00:08:55,280
createMapMarker, with
the first item of this array.

130
00:08:55,280 --> 00:09:00,050
And so essentially, createMapMarker
takes my location that was returned from

131
00:09:00,050 --> 00:09:06,120
our textSearch and
it converts it into a pin on the map.

132
00:09:07,360 --> 00:09:08,685
So let's go look at createMarker.

133
00:09:10,260 --> 00:09:13,069
All right, so this is our
createMapMarker function and

134
00:09:13,069 --> 00:09:15,570
it takes this argument placeData.

135
00:09:15,570 --> 00:09:20,280
And so essentially, as you can sort of
guess how the placeData object looks

136
00:09:20,280 --> 00:09:24,392
like, because we can access
the latitude and the longitude, and

137
00:09:24,392 --> 00:09:27,310
it also has a formatted address.

138
00:09:27,310 --> 00:09:30,931
So we can get all this
from our placeData, and

139
00:09:30,931 --> 00:09:35,800
then, what we do is we create
a new Google Maps marker.

140
00:09:35,800 --> 00:09:39,260
So the markers are something
that Google Maps provides.

141
00:09:39,260 --> 00:09:44,293
So we can go again and
look into our Markers section.

142
00:09:44,293 --> 00:09:47,646
So here we have a little bit
about markers, so essentially,

143
00:09:47,646 --> 00:09:49,042
very straightforward.

144
00:09:49,042 --> 00:09:51,560
A marker defines a location on the map.

145
00:09:51,560 --> 00:09:54,580
And there's a lot that you can
do in terms of changing how

146
00:09:54,580 --> 00:09:55,460
the marker appears.

147
00:09:55,460 --> 00:10:01,000
So you can change the icon
that you're going to see.

148
00:10:01,000 --> 00:10:04,800
It has a default icon,
but you can change that.

149
00:10:04,800 --> 00:10:08,210
You can attach an info window to it
to display additional information,

150
00:10:08,210 --> 00:10:11,200
and you were actually asked to do
this in one of the exercises in

151
00:10:11,200 --> 00:10:13,030
the JavaScript Basics class.

152
00:10:13,030 --> 00:10:14,910
There's a lot you can do.

153
00:10:14,910 --> 00:10:19,495
But essentially, so
this is how you make a new marker,

154
00:10:19,495 --> 00:10:23,503
essentially call new google.maps.Marker.

155
00:10:23,503 --> 00:10:28,730
It has a position, it has the map
that it needs to attach to, and

156
00:10:28,730 --> 00:10:34,670
the text that's going to be
part of the marker property.

157
00:10:34,670 --> 00:10:39,340
So, as you can see,
here we add this marker using our map.

158
00:10:40,380 --> 00:10:43,820
This is the location that
we're taking from placeData.

159
00:10:43,820 --> 00:10:48,578
And the title is just essentially
the formatted address that

160
00:10:48,578 --> 00:10:50,386
placeData returned.

161
00:10:50,386 --> 00:10:54,590
And as you can see over here, we
are also attaching an info window, we're

162
00:10:54,590 --> 00:11:00,570
creating a new info window and that is
going to open when you click a marker.

163
00:11:00,570 --> 00:11:05,310
We can see a little bit
about info windows as well.

164
00:11:05,310 --> 00:11:08,560
>> Yes, so let's take a step
back at [INAUDIBLE] because

165
00:11:08,560 --> 00:11:10,220
there's been a lot of stuff
that we're talking about.

166
00:11:10,220 --> 00:11:12,740
So basically, what I'm asking,

167
00:11:12,740 --> 00:11:17,080
when you were trying to figure
this out yourself, your process was you

168
00:11:17,080 --> 00:11:20,250
were just stepping through each
function one at a time, right?

169
00:11:20,250 --> 00:11:21,420
>> Right, yes.

170
00:11:21,420 --> 00:11:26,480
>> Right, so basically, if you think
about what Dimka did, guys, just if you

171
00:11:26,480 --> 00:11:31,360
take a step back, she's already,
just through her experience, she's

172
00:11:31,360 --> 00:11:36,190
already had a mental map, a strategy,
a framework of how to look things up.

173
00:11:36,190 --> 00:11:39,960
And that's actually one of the key
things that I like to point out,

174
00:11:39,960 --> 00:11:45,290
that this is how you will develop
your strength as a developer.

175
00:11:45,290 --> 00:11:47,290
because most of the time,
most developers,

176
00:11:47,290 --> 00:11:51,100
they don't know all of
the function calls.

177
00:11:51,100 --> 00:11:54,710
>> And sometimes you have to work with
pieces of code that you were given

178
00:11:54,710 --> 00:11:57,960
on previous projects or
things that somebody worked on.

179
00:11:57,960 --> 00:12:01,440
And you're going to have to
figure out what they did.

180
00:12:01,440 --> 00:12:03,040
If they're nice,

181
00:12:03,040 --> 00:12:06,290
there are going to have some comments
that are going to be helpful.

182
00:12:06,290 --> 00:12:08,870
Sometimes, you're not
going to have comments or

183
00:12:08,870 --> 00:12:11,750
you're going to have comments
that are less helpful.

184
00:12:11,750 --> 00:12:14,210
So you're going to have
to figure out stuff.

185
00:12:15,810 --> 00:12:17,460
>> Yeah, so that's the thing,

186
00:12:19,330 --> 00:12:22,010
this is a common strategy
that a lot of developers use.

187
00:12:22,010 --> 00:12:24,590
And I personally use this, too.

188
00:12:25,690 --> 00:12:30,880
Basically, I stepped into code,
as soon as I look at

189
00:12:30,880 --> 00:12:36,590
things piece-wise, function-wise,
a couple of lines at a time,

190
00:12:36,590 --> 00:12:40,370
and make sure that I'm stepping through,
I'm understanding the logic and

191
00:12:40,370 --> 00:12:46,540
the flow of how this person did it.

192
00:12:46,540 --> 00:12:49,970
And then if I recognize a code that
I really want to dive deep into,

193
00:12:49,970 --> 00:12:53,620
I need to then go in and do a search.

194
00:12:53,620 --> 00:12:58,921
I look at the API documentation and
usually if it's a popular library,

195
00:12:58,921 --> 00:13:04,147
such as Google and Google Maps,
there will be a ton of documentation.

196
00:13:04,147 --> 00:13:07,971
And there will be a ton of discussions
of people trying to figure out what

197
00:13:07,971 --> 00:13:11,680
does this documentation mean,
how do you do it, how does this work?

198
00:13:12,760 --> 00:13:17,960
You can then do a lot of research and
piece together how things get done.

199
00:13:17,960 --> 00:13:22,719
>> And Google Maps, they have really
good documentation, in that they also

200
00:13:22,719 --> 00:13:27,261
have examples of how to use things,
or how like to build these things.

201
00:13:27,261 --> 00:13:28,919
So it's really helpful, for example,

202
00:13:28,919 --> 00:13:32,060
if you're trying to build something
from Scratch, it's really helpful.

203
00:13:32,060 --> 00:13:36,270
And if you're just trying to figure
out why this piece of code works,

204
00:13:36,270 --> 00:13:40,770
then you can look at the different
objects that are created that are used,

205
00:13:40,770 --> 00:13:42,094
and read up on those.

206
00:13:42,094 --> 00:13:47,529
And see, okay, that's why they're
calling this with this as an argument

207
00:13:47,529 --> 00:13:53,400
and that's why they have this as
a callback function, okay, now I got it.

208
00:13:53,400 --> 00:13:53,906
>> Right, yeah.

209
00:13:53,906 --> 00:13:56,851
So again, this is really not magic,

210
00:13:56,851 --> 00:14:01,652
it's just really knowing how
to approach things, right?

211
00:14:01,652 --> 00:14:03,368
>> [CROSSTALK] It's doing
a little bit of research.

212
00:14:03,368 --> 00:14:06,818
If it's something that's routine,
you've done this before,

213
00:14:06,818 --> 00:14:09,425
you've used this before,
then probably less.

214
00:14:09,425 --> 00:14:14,350
And if you just want to understand,
like a piece of code that

215
00:14:14,350 --> 00:14:19,188
somebody gave you, that works,
and this happens a lot.

216
00:14:19,188 --> 00:14:23,016
Like for example, you're going to be
searching on say, stack overflow,

217
00:14:23,016 --> 00:14:26,905
how to do something, and you're going to
find this piece of code that somebody

218
00:14:26,905 --> 00:14:30,470
posted and said, hey if you want to
do this then use this piece of code.

219
00:14:30,470 --> 00:14:32,740
And you just copy and
paste it and it's going to work.

220
00:14:33,780 --> 00:14:36,720
But it's always a good idea to
kind of take the time to understand

221
00:14:36,720 --> 00:14:37,620
why it works, as well.

222
00:14:37,620 --> 00:14:41,760
I mean obviously the goal was to make
it work, so now you made it work.

223
00:14:41,760 --> 00:14:45,090
But I think the greater goal would
be to understand why it works, so

224
00:14:45,090 --> 00:14:48,010
that next time you can code it yourself.

225
00:14:48,010 --> 00:14:53,100
>> That's actually really good to know,
Alice, thank you.

226
00:14:53,100 --> 00:14:53,600
Info window.

227
00:14:54,780 --> 00:14:58,670
>> Yeah, and info window was something
that you were actually asked to

228
00:14:58,670 --> 00:15:02,940
investigate a little bit
in one of the quizzes.

229
00:15:02,940 --> 00:15:06,140
>> Can you maximize your-
>> Okay, yeah.

230
00:15:06,140 --> 00:15:12,840
And so essentially, the way it works
with Windows is that you add a pop

231
00:15:12,840 --> 00:15:17,180
up window to this marker that's going
to show up and can display more info.

232
00:15:17,180 --> 00:15:23,120
And then essentially, I'm actually going
to minimize this back so that I can show

233
00:15:23,120 --> 00:15:27,980
you guys the documentation
on Info Windows, over here.

234
00:15:27,980 --> 00:15:33,426
Right, so you can see essentially what a
Info Window is, really space for text or

235
00:15:33,426 --> 00:15:38,570
for an image, and a pop up window about
the map that will give them location.

236
00:15:39,680 --> 00:15:42,518
So basically it just
like a little window.

237
00:15:42,518 --> 00:15:49,600
To add a window to open with
an info window you essentially need

238
00:15:49,600 --> 00:15:54,940
to make a new one by calling new 
google.maps.InfoWindow and with contentString.

239
00:15:54,940 --> 00:16:00,390
And then you need to
attach it to your marker.

240
00:16:00,390 --> 00:16:01,200
So essentially,

241
00:16:01,200 --> 00:16:05,138
over here we see how to attach it
to a marker using a click listener.

242
00:16:05,138 --> 00:16:10,015
So essentially, what this happens is,
that there's a listener that listens for

243
00:16:10,015 --> 00:16:14,170
whenever the marker is clicked,
this info window is opened.

244
00:16:14,170 --> 00:16:17,690
So this is essentially how
you add an info window.

245
00:16:17,690 --> 00:16:22,016
And this can also help you
with the solution to the quiz.

246
00:16:22,016 --> 00:16:25,884
>> That's great, thank you.
Thanks for showing us that walk through

247
00:16:25,884 --> 00:16:33,390
for just understanding how Google Maps
works in the interactive resume.

248
00:16:33,390 --> 00:16:39,092
We hope this will be useful for you,
because in, guess what, project five,

249
00:16:39,092 --> 00:16:43,681
you will have to implement your
own Google Maps from scratch.

250
00:16:43,681 --> 00:16:45,501
From at the very beginning.

251
00:16:45,501 --> 00:16:48,810
>> So you're going to have to be looking
at that documentation a lot more.

252
00:16:50,380 --> 00:16:54,518
>> So It's good to maybe thinking about
how things work behind the scenes.

253
00:16:54,518 --> 00:16:56,890
So it's going to help you
later on in your project five,

254
00:16:56,890 --> 00:16:59,870
because then project five is
your neighborhood map project.

255
00:16:59,870 --> 00:17:06,612
And this is actually the project that
we do not give you any code for.

256
00:17:06,612 --> 00:17:07,401
>> You're on your own.

257
00:17:07,401 --> 00:17:08,625
>> You're on your own.

258
00:17:08,625 --> 00:17:12,579
You're basically starting with
a blank page, a blank slate.

259
00:17:12,579 --> 00:17:17,010
So, for you people who are at this

260
00:17:17,010 --> 00:17:20,858
stage on project two,
don't worry we'll build you up.

261
00:17:22,089 --> 00:17:23,200
So don't be scared.

262
00:17:23,200 --> 00:17:24,710
We're not trying to intimidate you or

263
00:17:24,710 --> 00:17:27,200
anything, we just want to
let you know to paint

264
00:17:27,200 --> 00:17:31,970
a nice picture of what's going to happen
and hopefully set good expectations.

265
00:17:31,970 --> 00:17:36,140
So you'll be led and
you won't get surprised.
