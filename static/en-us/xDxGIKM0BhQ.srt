1
00:00:00,170 --> 00:00:04,330
NFS has been around since the 80s and
has gone through several revisions.

2
00:00:04,330 --> 00:00:07,800
The popular NFS versions that are in
use today and that come standard

3
00:00:07,800 --> 00:00:10,920
with Linux distributions are NFS
version 3 and version 4.

4
00:00:10,920 --> 00:00:15,185
There is one fundamental difference
between these two versions, and

5
00:00:15,185 --> 00:00:18,799
that is that, according to
the protocol specifications,

6
00:00:18,799 --> 00:00:23,230
NFS version 3 is stateless whereas
NFS version 4 is stateful.

7
00:00:23,230 --> 00:00:28,150
The fact that NFS version 4 is stateful,
allows it by design,

8
00:00:28,150 --> 00:00:31,830
to support operations like
client caching and file logging.

9
00:00:31,830 --> 00:00:35,920
And although NFS version 3 is stateless,
actual implementation

10
00:00:35,920 --> 00:00:39,990
of this protocol typically
incorporate additional modules so

11
00:00:39,990 --> 00:00:43,190
that file caching and
logging can be supported.

12
00:00:43,190 --> 00:00:46,340
The caching semantics
in NFS are as follows.

13
00:00:46,340 --> 00:00:48,690
For files that are not
accessed concurrently,

14
00:00:48,690 --> 00:00:51,450
NFS behaves with session semantics.

15
00:00:51,450 --> 00:00:54,380
On close,
the changes are flushed to disk.

16
00:00:54,380 --> 00:00:56,730
For files that are not
accessed concurrently,

17
00:00:56,730 --> 00:00:59,290
NFS behaves with session semantics.

18
00:00:59,290 --> 00:01:03,653
On close, all of the changes made to
a file are flushed to the remote server.

19
00:01:03,653 --> 00:01:06,995
And then on open, a check is performed,
and if necessary,

20
00:01:06,995 --> 00:01:09,585
the cached parts of the file
are actually updated,

21
00:01:09,585 --> 00:01:12,155
so the new versions of
those files are brought in.

22
00:01:12,155 --> 00:01:17,025
However, as an additional optimization,
NFS also supports periodic updates.

23
00:01:17,025 --> 00:01:20,525
These are used to make sure that
there aren't any changes on the file

24
00:01:20,525 --> 00:01:22,780
that the client is working with.

25
00:01:22,780 --> 00:01:27,300
And using these periodic updates,
we'll break the session semantics,

26
00:01:27,300 --> 00:01:31,270
when there are multiple clients that
are concurrently updating a file.

27
00:01:31,270 --> 00:01:34,440
The periods on when these checks
happen can be configured but,

28
00:01:34,440 --> 00:01:37,578
by default, NFS uses these values.

29
00:01:37,578 --> 00:01:43,390
It uses 3 second checks for the regular
files and, at 30 second intervals,

30
00:01:43,390 --> 00:01:46,640
it checks whether there are any
changes with the directories.

31
00:01:46,640 --> 00:01:48,790
The rationale behind
these numbers is that,

32
00:01:48,790 --> 00:01:52,680
the directories as files
are modified less frequently, and

33
00:01:52,680 --> 00:01:56,110
that when modified it is
easier to merge those changes.

34
00:01:56,110 --> 00:01:57,290
So we don't have to check for

35
00:01:57,290 --> 00:02:00,810
changes in the directories as
frequently as we have to check for

36
00:02:00,810 --> 00:02:06,134
changes in the regular files, and
still have a consistent system.

37
00:02:06,134 --> 00:02:11,410
NFS version 4 further incorporates
a delegation mechanism where the server

38
00:02:11,410 --> 00:02:16,800
delegates to the client, all rights to
manage a file for a period of time,

39
00:02:16,800 --> 00:02:21,140
and this will avoid any of the update
checks that we described here.

40
00:02:21,140 --> 00:02:24,910
With server side state,
NFS can support locking.

41
00:02:24,910 --> 00:02:28,860
The way NFS supports locking is
using a lease-based mechanism.

42
00:02:28,860 --> 00:02:30,790
When a client acquires a lock,

43
00:02:30,790 --> 00:02:35,835
the server assigns it a particular time
period during which the lock is valid.

44
00:02:35,835 --> 00:02:39,995
It is then the client's responsibility
to make sure that it either releases

45
00:02:39,995 --> 00:02:42,878
the lock within the leased
amount of time or

46
00:02:42,878 --> 00:02:46,315
that it explicitly extends
the lock duration.

47
00:02:46,315 --> 00:02:50,535
This helps deal with situations of
client failure, so in this case,

48
00:02:50,535 --> 00:02:54,840
when a client fails, on the server side,
we'll just realize that okay,

49
00:02:54,840 --> 00:02:59,910
the lease for this client expired, so
we can assign the lock to somebody else.

50
00:02:59,910 --> 00:03:03,605
And then when the client comes back
again, or when network connectivity is

51
00:03:03,605 --> 00:03:08,730
re-established, the client will know
that the lease expired, it no longer has

52
00:03:08,730 --> 00:03:13,460
a valid lock, so whatever changes it was
trying to make, it simply has to redo.

53
00:03:13,460 --> 00:03:16,888
They weren't applied
in a exclusive manner.

54
00:03:16,888 --> 00:03:20,690
NFS version 4 also supports more
sophisticated mechanisms than just

55
00:03:20,690 --> 00:03:21,510
a basic log.

56
00:03:21,510 --> 00:03:25,560
For instance, it supports a reader
writer lock called share reservation,

57
00:03:25,560 --> 00:03:28,060
along with mechanisms
serve on how one can

58
00:03:28,060 --> 00:03:32,100
upgrade from being a reader to being
a writer for a file, and vice versa.
