1
00:00:00,370 --> 00:00:02,950
The answer is that L is recognizable.

2
00:00:02,950 --> 00:00:05,720
A machine that recognizes
L is fairly simple.

3
00:00:05,720 --> 00:00:13,170
It just feeds the input 100010 into
M and then accepts after M halts.

4
00:00:14,300 --> 00:00:17,390
If M loops, so then so
will this machine.

5
00:00:17,390 --> 00:00:20,420
If it doesn't loop,
then this machine will accept.

6
00:00:20,420 --> 00:00:24,350
Note that it's not clear if it's
possible to recognize the complement.

7
00:00:24,350 --> 00:00:27,700
If you haven't taken a class on
the theory of computation before,

8
00:00:27,700 --> 00:00:31,020
then you might think it possible that
there are only some dozens or hundreds

9
00:00:31,020 --> 00:00:35,310
of ways that infinite loops occur, and
that you could check all of those cases.

10
00:00:36,370 --> 00:00:37,590
This is at least unclear,

11
00:00:37,590 --> 00:00:41,060
and as we'll see later,
it actually turns out to be false.

12
00:00:41,060 --> 00:00:44,980
Simulation defer this recognized in
this language doesn't work either.

13
00:00:44,980 --> 00:00:47,930
We can't just run the machine and
wait until it doesn't halt.

14
00:00:47,930 --> 00:00:49,490
That doesn't make any sense.

15
00:00:49,490 --> 00:00:52,430
Another possible idea is
to monitor the machine

16
00:00:52,430 --> 00:00:56,020
by keeping track of every
configuration it has been in, and

17
00:00:56,020 --> 00:00:59,340
if it ever repeats a configuration,
to declare that it doesn't halt.

18
00:01:00,450 --> 00:01:03,480
This might detect some
non halting behavior, but

19
00:01:03,480 --> 00:01:05,630
because a Turing machine's
tape is infinite,

20
00:01:05,630 --> 00:01:08,780
it can run forever without actually
ever repeating a configuration.

21
00:01:10,000 --> 00:01:13,020
Students will sometimes object that
this strategy of monitoring for

22
00:01:13,020 --> 00:01:15,900
loops would work on any
computer with finite memory.

23
00:01:16,910 --> 00:01:20,100
The trouble is that it would require
more memory than the machine being

24
00:01:20,100 --> 00:01:22,400
monitored would have access to.

25
00:01:22,400 --> 00:01:25,580
So the monitor would have to be
a different computational model

26
00:01:25,580 --> 00:01:26,841
than the machine it's monitoring.

27
00:01:28,000 --> 00:01:30,340
As a practical method
of detecting cycles,

28
00:01:30,340 --> 00:01:32,290
this strategy doesn't work either.

29
00:01:32,290 --> 00:01:37,170
Consider the fact that a computer with a
gigabyte of RAM has over 8 billion bits

30
00:01:37,170 --> 00:01:41,040
and therefore over two to the 8
billion possible configurations.

31
00:01:41,040 --> 00:01:43,910
That's a lot of possible configurations
before you detect a cycle.

32
00:01:44,920 --> 00:01:48,620
The bottom line is that this objection
isn't satisfactory, either in theory or

33
00:01:48,620 --> 00:01:49,850
in practice.

34
00:01:49,850 --> 00:01:53,130
Monitoring and looking for cycles of
configurations just doesn't cut it.
