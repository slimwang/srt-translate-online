1
00:00:00,000 --> 00:00:05,000
Welcome to Office Hours. The first thing I'm going to talk about is homework 3.

2
00:00:05,000 --> 00:00:11,000
There was a lot of confusion on how to do the permalink part, which is mostly my fault.

3
00:00:11,000 --> 00:00:16,000
I will explain what I intended for you to do using this handy-dandy whiteboard.

4
00:00:16,000 --> 00:00:18,000
Okay, the first thing you need to do when you store an object,

5
00:00:18,000 --> 00:00:23,000
you're going to make a post, and it's going to look something like this.

6
00:00:23,000 --> 00:00:28,000
You're going to be making this post object, and it has a title and some contents.

7
00:00:28,000 --> 00:00:32,000
I think that was it, but that's not the important part. Most of you figured this out.

8
00:00:32,000 --> 00:00:37,000
When you put the post in the database in Google App Engine,

9
00:00:37,000 --> 00:00:39,000
you use the put() command to do so.

10
00:00:39,000 --> 00:00:42,000
That actually stores the post in the database.

11
00:00:42,000 --> 00:00:47,000
Once you've stored it in the database, that's when Google App Engine assigns that post an ID.

12
00:00:47,000 --> 00:00:52,000
You can also include an ID in this constructor here when you build it,

13
00:00:52,000 --> 00:00:55,000
but generally it's best just to let the database do it itself, because otherwise you have

14
00:00:55,000 --> 00:01:00,000
to keep track of which IDs you've used, which ones you haven't used--that sort of thing.

15
00:01:00,000 --> 00:01:03,000
We'll let Google set the ID.

16
00:01:03,000 --> 00:01:07,000
We'll put it in the database, and then what we need to do is redirect the user

17
00:01:07,000 --> 00:01:13,000
to the permalink page for that post, and by permalink, I just mean link to that post.

18
00:01:13,000 --> 00:01:19,000
We need to get this post ID. The way we do that is just say p.key().

19
00:01:19,000 --> 00:01:25,000
Key() is Google App Engine's full representation of this object,

20
00:01:25,000 --> 00:01:27,000
and this is whole long string.

21
00:01:27,000 --> 00:01:32,000
You can turn this into an integer by calling ID on it.

22
00:01:32,000 --> 00:01:37,000
This is the integer representation of that post,

23
00:01:37,000 --> 00:01:42,000
and we'll convert it into a str--pardon my indentation here.

24
00:01:42,000 --> 00:01:45,000
We'll assign this to a variable.

25
00:01:45,000 --> 00:01:50,000
What we'll do then is we'll redirect the user to a URL with this variable in it.

26
00:01:50,000 --> 00:01:54,000
It'll look something like this.

27
00:01:54,000 --> 00:02:01,000
Then we're going to use our string substitutions to include a little string here.

28
00:02:01,000 --> 00:02:08,000
This should redirect the user to /blog/ the ID of this post.

29
00:02:08,000 --> 00:02:10,000
That's the first part of the problem.

30
00:02:10,000 --> 00:02:17,000
The key thing here that you need to know is how to get the idea of a post you just submitted.

31
00:02:17,000 --> 00:02:21,000
Now, let me erase this and then the second part of this problem is

32
00:02:21,000 --> 00:02:24,000
how do you actually look up that blog post.

33
00:02:24,000 --> 00:02:26,000
Now, you've got your URL mappers.

34
00:02:26,000 --> 00:02:29,000
All the URL mappers that we've done in the class are basically static URLs.

35
00:02:29,000 --> 00:02:34,000
They have the format of something like--remember these are tuples at the bottom of that file.

36
00:02:34,000 --> 00:02:40,000
It might look like '/blog/' and this maps to a handler that just draws a blog.

37
00:02:40,000 --> 00:02:47,000
In my code, I think it's just called main page, which is the Google default for that first one.

38
00:02:47,000 --> 00:02:52,000
Now, we want to do is we want to make a special one for linking to permalinks.

39
00:02:52,000 --> 00:02:55,000
These strings here that represent the URL are not just strings.

40
00:02:55,000 --> 00:02:57,000
They're actually regular expressions.

41
00:02:57,000 --> 00:03:02,000
We had some regular expressions in Unit 2 when we were validating usernames

42
00:03:02,000 --> 00:03:04,000
and passwords and that sort of thing.

43
00:03:04,000 --> 00:03:07,000
Well, what we want to have here is a regular expression

44
00:03:07,000 --> 00:03:10,000
to capture a URL with an integer after it.

45
00:03:10,000 --> 00:03:15,000
That looks something like this.

46
00:03:15,000 --> 00:03:17,000
This is all just normal string.

47
00:03:17,000 --> 00:03:21,000
In a regular expression you can just have anything that's just kind of regular text

48
00:03:21,000 --> 00:03:24,000
just matches that text exactly.

49
00:03:24,000 --> 00:03:29,000
Now, after here we use parentheses to basically say whatever goes in here

50
00:03:29,000 --> 00:03:33,000
will be passed as a parameter to our handler function.

51
00:03:33,000 --> 00:03:39,000
We can do something like this: [0-9]+.

52
00:03:39,000 --> 00:03:45,000
What this means is the square brackets say match any character between these square brackets.

53
00:03:45,000 --> 00:03:47,000
You can use ranges like this.

54
00:03:47,000 --> 00:03:53,000
This basically says find any number 0 through 9, and the plus means find one or more of them.

55
00:03:53,000 --> 00:03:59,000
This will basically match any URL that starts with /blog/ and then any number,

56
00:03:59,000 --> 00:04:03,000
and we'll map that to some handler for our permalink page,

57
00:04:03,000 --> 00:04:07,000
which I think in my code I may have called "post handler,"

58
00:04:07,000 --> 00:04:10,000
but you can call that whatever you want.

59
00:04:10,000 --> 00:04:15,000
That's step 2. It's basically do this URL handler. May I have the eraser, please?

60
00:04:15,000 --> 00:04:22,000
Then we'll talk about step 3, which is fairly straightforward. There we go.

61
00:04:22,000 --> 00:04:26,000
You have your handler, so we'll have something that looks like this,

62
00:04:26,000 --> 00:04:32,000
and this inherits from that webapp2 handler or the global handler, whichever you're using.

63
00:04:32,000 --> 00:04:36,000
Then here you have a function that looks something like this: definite get--

64
00:04:36,000 --> 00:04:38,000
this handles get requests.

65
00:04:38,000 --> 00:04:41,000
Normally, this just takes one parameter called "self."

66
00:04:41,000 --> 00:04:45,000
In this case, we had parentheses in the URL mapper, which means it's going

67
00:04:45,000 --> 00:04:48,000
to match whatever is in those parentheses and pass it as a parameter to here.

68
00:04:48,000 --> 00:04:51,000
In this case it's going to be our post ID.

69
00:04:51,000 --> 00:04:56,000
One quick thing to note. I never call variables ID in Python because ID is actually a function.

70
00:04:56,000 --> 00:04:59,000
It's a reserved function, and it's really easy to create really subtle bugs

71
00:04:59,000 --> 00:05:01,000
if you start using the word ID.

72
00:05:01,000 --> 00:05:06,000
All my variables that refer to IDs always are something_id.

73
00:05:06,000 --> 00:05:10,000
Now what we want to is get our post out of the database.

74
00:05:10,000 --> 00:05:15,000
In App Engine this just looks something like this: p = Post--

75
00:05:15,000 --> 00:05:20,000
this is our class that we defined that's the actual data model.

76
00:05:20,000 --> 00:05:28,000
You can say get<u>by</u>id(post_id).

77
00:05:28,000 --> 00:05:33,000
That'll do a database query to look up the post with ID out of the database.

78
00:05:33,000 --> 00:05:39,000
Then all you need to do is if p, and then you can render it however you planned on doing that.

79
00:05:39,000 --> 00:05:42,000
If p doesn't exist you can just return a 404.

80
00:05:42,000 --> 00:05:44,000
That's how you do the permalink portion of the homework.

81
00:05:44,000 --> 00:05:46,000
I hope you guys manage to get all this working. I'm sorry.

82
00:05:46,000 --> 00:05:49,000
I probably should have covered get<u>by</u>id in the lecture,

83
00:05:49,000 --> 00:05:53,000
but that's the fun of teaching for the first time.

84
00:05:53,000 --> 00:05:57,000
Good luck everybody and thanks for sticking with us so far.
