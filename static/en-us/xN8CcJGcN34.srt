1
00:00:00,246 --> 00:00:03,134
All-pairs N-body is an N squared algorithm.

2
00:00:03,134 --> 00:00:06,326
Each object must compute its interaction with each other object,

3
00:00:06,326 --> 00:00:09,385
So each N object has to compute N minus 1 forces.

4
00:00:09,385 --> 00:00:14,818
N objects times N minus 1 force computations per object yields work proportional to N squared.

5
00:00:14,818 --> 00:00:20,057
Now, there's a way you can approximate N-body computations with high accuracy with superior work efficiency.

6
00:00:20,057 --> 00:00:21,825
There are tree-based algorithms, for example.

7
00:00:21,825 --> 00:00:25,594
One's called Barnes Hut, that has N log N complexity and a method called

8
00:00:25,594 --> 00:00:28,770
fast multi-pole that's actually linear order of N complexity.

9
00:00:28,770 --> 00:00:33,734
They basically work by lumping distant bodies together and treating them as a single body during the calculation.

10
00:00:33,734 --> 00:00:38,482
These are neat algorithms; fast multi-pole was actually named one of the top 10 algorithms of the 20th century,

11
00:00:38,482 --> 00:00:40,550
but they're also considerably more complex.

12
00:00:40,550 --> 00:00:42,917
All-pairs, on the other hand, is very simple and often the way that

13
00:00:42,917 --> 00:00:46,455
production N-Body algorithms compute forces among close together objects,

14
00:00:46,455 --> 00:00:49,883
and with it, we're going to show how to use the memory hierarchy in an efficient way

15
00:00:49,883 --> 00:00:52,052
to make this computation as fast as possible.
