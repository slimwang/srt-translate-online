1
00:00:00,160 --> 00:00:03,000
In the previous lesson, we talked
about Distributive File Systems.

2
00:00:03,000 --> 00:00:07,420
We said that Distributive File Systems
were an example of a distributive

3
00:00:07,420 --> 00:00:11,110
service where the state, the files,

4
00:00:11,110 --> 00:00:14,350
were stored on some set of nodes,
the file servers.

5
00:00:15,400 --> 00:00:20,699
And then the file servers were accessed
by many distributive nodes clients.

6
00:00:21,720 --> 00:00:27,080
All of the file access operations open,
read, write on these files.

7
00:00:27,080 --> 00:00:31,159
Where then service that was
provided by these servers, and

8
00:00:31,159 --> 00:00:35,510
that these client nodes
were requesting from them.

9
00:00:35,510 --> 00:00:39,510
Our primary focus of
the Distributed File System lesson

10
00:00:39,510 --> 00:00:42,230
was the caching mechanisms.

11
00:00:42,230 --> 00:00:47,260
These are useful so that server
data is cached on the clients.

12
00:00:47,260 --> 00:00:51,180
And this is a mechanism that improves
the performance that's seen by

13
00:00:51,180 --> 00:00:51,730
the clients.

14
00:00:51,730 --> 00:00:54,770
The clients can now access
these files more quickly.

15
00:00:54,770 --> 00:00:58,940
Caching is also a mechanism that
enhances the scalability of

16
00:00:58,940 --> 00:01:02,470
the distributed file system
overall of the servers.

17
00:01:02,470 --> 00:01:05,630
Because some of the operations
are now performed by the clients,

18
00:01:05,630 --> 00:01:09,030
the servers don't have to
perform every single access and

19
00:01:09,030 --> 00:01:12,750
therefore they can scale to support
a larger number of clients and

20
00:01:12,750 --> 00:01:15,310
serve larger number
of files potentially.

21
00:01:15,310 --> 00:01:17,030
What we didn't talk about is,

22
00:01:17,030 --> 00:01:21,280
what happens in the situation when
there are multiple file servers?

23
00:01:21,280 --> 00:01:25,430
And how do they control and
coordinate the access of shared state,

24
00:01:25,430 --> 00:01:27,360
of shared files, among them?

25
00:01:27,360 --> 00:01:32,420
We also didn't talk about situations in
which all of the nodes in the systems

26
00:01:32,420 --> 00:01:37,200
were both servers, storing files and
allowing access to those files,

27
00:01:37,200 --> 00:01:41,330
as well as clients sending request
to other nodes in the system.

28
00:01:41,330 --> 00:01:44,890
In such a scenario there really isn't
a clear distinction between client

29
00:01:44,890 --> 00:01:46,370
nodes and server nodes.

30
00:01:46,370 --> 00:01:50,120
Every single one of the nodes would
be performing all of the services.

31
00:01:50,120 --> 00:01:52,402
In this is lesson
distributed shared memory,

32
00:01:52,402 --> 00:01:56,400
we will talk about these kinds of
scenarios, the distributed applications,

33
00:01:56,400 --> 00:01:59,780
where all the nodes in
the distributed environment are both

34
00:01:59,780 --> 00:02:04,340
the servers that provide the state and
provide the access to that state and

35
00:02:04,340 --> 00:02:08,930
also issue requests to other nodes
in the system to their peers.

36
00:02:08,930 --> 00:02:11,800
So, perform some of the client
functionality that we saw before.
