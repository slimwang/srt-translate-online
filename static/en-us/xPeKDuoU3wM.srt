1
00:00:00,000 --> 00:00:03,000
Now, let's talk about a slightly different issue, which is, "What we should do

2
00:00:03,000 --> 00:00:05,000
about test coverage for concurrent software?"

3
00:00:05,000 --> 00:00:10,000
Now in general in this class, we haven't been dealing at all with testing of concurrent code

4
00:00:10,000 --> 00:00:12,000
and this mainly it is a difficult and specialized skill.

5
00:00:12,000 --> 00:00:15,000
Let's talk briefly about what coverage of concurrent software would actually mean.

6
00:00:15,000 --> 00:00:18,000
First of all, hopefully it's clear that while applying sequential code

7
00:00:18,000 --> 00:00:21,000
coverage metrics to concurrent software is a fine idea.

8
00:00:21,000 --> 00:00:24,000
Probably, these aren't going to give us any confidence with the code lacks

9
00:00:24,000 --> 00:00:27,000
concurrency here such as race condition and the deadlocks.

10
00:00:27,000 --> 00:00:30,000
So let's talk about how we would figure out if we've done a good job testing concurrent software.

11
00:00:30,000 --> 00:00:34,000
So let's take for example this function x fer, which transfer some amount of money

12
00:00:34,000 --> 00:00:36,000
between bank account one and bank account two.

13
00:00:36,000 --> 00:00:39,000
This particular function is designed to be called from different threads.

14
00:00:39,000 --> 00:00:43,000
So what I've done here is mark a1 and a2 in red and these variables are representing the different

15
00:00:43,000 --> 00:00:48,000
bank accounts and then red in order to indicate that these are shared between different calls to x fer.

16
00:00:48,000 --> 00:00:52,000
And so the transfer function is going to be called from one thread so some thread is going to transfer

17
00:00:52,000 --> 00:00:57,000
money between accounts and also several other threads are going to do the same thing.

18
00:00:57,000 --> 00:01:03,000
So we have is multiple threads calling this transfer function and as long as the threads are moving

19
00:01:03,000 --> 00:01:06,000
money between different accounts, probably everything is all right.

20
00:01:06,000 --> 00:01:10,000
On the other hand, since the transfer function does not synchronize--

21
00:01:10,000 --> 00:01:14,000
that is it hasn't taken any sort of a lock while it manipulates the accounts.

22
00:01:14,000 --> 00:01:18,000
If these threads are operating on the same accounts concurrently, then it's going to be a problem.

23
00:01:18,000 --> 00:01:20,000
We're going to mess up the balances of the accounts that are involved.

24
00:01:20,000 --> 00:01:23,000
And so I ask the question, "What sort of coverage what we be looking for

25
00:01:23,000 --> 00:01:26,000
while testing this function in order to detect this kind of bug?"

26
00:01:26,000 --> 00:01:30,000
And the answer is some sort of a coverage metric to make sure that threads T1 and T2

27
00:01:30,000 --> 00:01:34,000
both call this function at the same time while transferring a money between the same accounts.

28
00:01:34,000 --> 00:01:38,000
So the coverage would essentially be T1 gets part way into the function

29
00:01:38,000 --> 00:01:42,000
and then let's say it stops running, the processor then starts to run T2

30
00:01:42,000 --> 00:01:46,000
for which it operates on the accounts and then completes and then this interleaving of actions

31
00:01:46,000 --> 00:01:50,000
between the different threads would be what would constitute a unit of test coverage so that is to say

32
00:01:50,000 --> 00:01:54,000
we want to make sure we tested the case where the transfer account is concurrently call.

33
00:01:54,000 --> 99:59:59,999
So that's one kind of coverage that we might look for when testing concurrent software.
