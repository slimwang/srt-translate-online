1
00:00:00,710 --> 00:00:05,938
Well, that was nesting. The other, important addition to state machines that

2
00:00:05,938 --> 00:00:11,760
Harel offers is concurrency. In this case, concurrency is indicated by a dashed

3
00:00:11,760 --> 00:00:18,120
line. It separates a larger roundtangle into two other machines,

4
00:00:18,120 --> 00:00:22,480
but in this case, it is nesting that goes on at the same time. That is,

5
00:00:22,480 --> 00:00:24,890
we've cranked up two machines that are running.

6
00:00:24,890 --> 00:00:28,550
Each can have their current state, each can respond to transitions and

7
00:00:28,550 --> 00:00:33,290
each can perform actions depending upon the transitions. 'Kay, once again,

8
00:00:33,290 --> 00:00:37,560
this reduces the total number of states from a multiplicative combination to

9
00:00:37,560 --> 00:00:42,060
an additive combination. Here's from Harel's paper on the left,

10
00:00:42,060 --> 00:00:47,570
is the bowl of spaghetti, that indicates the multiplicative combination.

11
00:00:47,570 --> 00:00:50,910
Notice the labels of the states are really indicating where you

12
00:00:50,910 --> 00:00:54,720
would be in one of the concurrent machines, and where you would be in

13
00:00:54,720 --> 00:00:58,692
the other concurrent machines hard to understand what is really going on there.

14
00:00:58,692 --> 00:01:04,620
Harel has replaced this

15
00:01:04,620 --> 00:01:12,260
jumble by one major state labeled y and

16
00:01:12,260 --> 00:01:19,066
left two of the original states, H and I to interact with it.

17
00:01:19,066 --> 00:01:24,440
The y-state has that dash line indicating concurrent

18
00:01:24,440 --> 00:01:29,100
actions that are taking place, they correspond to states a and d.

19
00:01:29,100 --> 00:01:34,520
They each have default states, they each have their own transitions. But,

20
00:01:34,520 --> 00:01:40,790
hopefully, you can see it's a little bit easier to follow what's going on there.

21
00:01:40,790 --> 00:01:46,710
Notice also that Harel allows the splitting of

22
00:01:46,710 --> 00:01:52,430
a transition to go to two possible states, one in each of the concurrent arms.

23
00:01:52,430 --> 00:01:57,750
So the lower right state in the rightmost diagram, I has an E transition coming

24
00:01:57,750 --> 00:02:03,090
out of it that's then split into two places. There's also an example of a data

25
00:02:03,090 --> 00:02:09,038
condition in here as well. In UML the concurrency looks like the following.

26
00:02:09,038 --> 00:02:12,230
There are two states here, there's an idol state and a maintenance state.

27
00:02:12,230 --> 00:02:16,700
The maintenance state has the dashed line in this case it's a horizontal line.

28
00:02:16,700 --> 00:02:21,880
And two concurrently executing machines, one called testing and one called

29
00:02:21,880 --> 00:02:26,870
commanding, each of which are quite quite simple. Each has an initial state and

30
00:02:26,870 --> 00:02:29,720
and a final state and some transitions between them.
