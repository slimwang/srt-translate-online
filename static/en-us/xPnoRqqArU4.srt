1
00:00:01,090 --> 00:00:03,790
So if we treat fragments 
as mini activities,

2
00:00:03,790 --> 00:00:06,810
each with its own 
independent life cycle in UI,

3
00:00:06,810 --> 00:00:10,200
how does that compare
to the life cycle of a real activity?

4
00:00:10,200 --> 00:00:12,880
Well as you might expect,
the basic life cycle events

5
00:00:12,880 --> 00:00:15,406
are much the same 
as the parent activity.

6
00:00:15,406 --> 00:00:17,662
And as it moves
through the cycles of starts,

7
00:00:17,662 --> 00:00:20,768
resumes, pauses, and stops,
those same life cycle events

8
00:00:20,768 --> 00:00:23,680
will be triggered 
within the fragment itself.

9
00:00:23,680 --> 00:00:26,010
So, in most cases, 
you can simply move anything

10
00:00:26,010 --> 00:00:29,080
that you would have put 
into the activities life cycle handles,

11
00:00:29,080 --> 00:00:32,069
into the corresponding 
fragment handles.

12
00:00:32,069 --> 00:00:34,119
With, of course, a couple of exceptions.

13
00:00:34,119 --> 00:00:38,079
Rather than building your UI 
here and onCreate,

14
00:00:38,079 --> 00:00:41,290
fragments introduced a new event 
specifically for this.

15
00:00:41,290 --> 00:00:44,780
OnCreateView is where you construct 
or inflate your UI,

16
00:00:44,780 --> 00:00:47,880
hook up to any data sources, 
and return it to the parent activity

17
00:00:47,880 --> 00:00:50,370
which can then integrate it
into its view hierarchy.

18
00:00:50,370 --> 00:00:52,652
There's a corresponding 
onDestroy view handler,

19
00:00:52,652 --> 00:00:55,380
which is called immediately 
before the fragment is added

20
00:00:55,380 --> 00:00:58,020
to the back stack, 
independent of the parent activity.

21
00:00:58,020 --> 00:01:00,060
Now keep in mind that 
the FragmentManager

22
00:01:00,060 --> 00:01:04,040
can add any fragment transactions 
adding, removing,

23
00:01:04,040 --> 00:01:06,100
or replacing fragments 
to the back stack,

24
00:01:06,100 --> 00:01:08,644
with a single parent
activity's actives.

25
00:01:08,644 --> 00:01:10,868
So a fragment can move 
through this cycle

26
00:01:10,868 --> 00:01:13,484
multiple times
independent of the host activity.

27
00:01:13,484 --> 00:01:15,752
So onDestroy view is, 
where you should clean up

28
00:01:15,752 --> 00:01:18,210
any resources specifically 
related to the UI,

29
00:01:18,210 --> 00:01:21,220
such as bitmaps in memory,
cursors to data,

30
00:01:21,220 --> 00:01:24,360
anything like that to help ensure
that your app's memory footprint

31
00:01:24,360 --> 00:01:26,920
isn't bloated by data
that's not needed

32
00:01:26,920 --> 00:01:29,410
when the fragment isn't visible.

33
00:01:29,410 --> 00:01:32,270
Now as soon as the fragment 
is returned from the back stack,

34
00:01:32,270 --> 00:01:35,360
on CreateView is called, 
and you can re-create the UI

35
00:01:35,360 --> 00:01:38,240
and reconnect data sources 
before your fragment transitions

36
00:01:38,240 --> 00:01:41,100
through the rest of the life cycle 
to become active again.

37
00:01:41,100 --> 00:01:44,600
And because a fragment 
can only exist within an activity,

38
00:01:44,600 --> 00:01:47,280
we also need callbacks 
to tell us when a fragment

39
00:01:47,280 --> 00:01:50,790
is attached and detached
from its parent.

40
00:01:50,790 --> 00:01:53,630
OnAttach is your opportunity 
to get a reference

41
00:01:53,630 --> 00:01:55,330
to the parent activity.

42
00:01:55,330 --> 00:01:57,780
While onDetach is the last thing
that happens,

43
00:01:57,780 --> 00:02:01,110
even after your fragment 
has technically been destroyed.

44
00:02:01,110 --> 00:02:04,219
Now, the final piece of the puzzle
is onActivityCreated.

45
00:02:04,219 --> 00:02:06,820
This notifies our fragment 
that the parent activity

46
00:02:06,820 --> 00:02:09,150
has completed its 
OnCreate handler

47
00:02:09,150 --> 00:02:11,836
and represents the point
at which we can safely interact

48
00:02:11,836 --> 00:02:14,302
with its UI, potentially
including other fragments.

49
00:02:14,302 --> 00:02:17,570
Now, just like the activity lifecyle 
we discussed in lesson three,

50
00:02:17,570 --> 00:02:19,940
once the fragment 
is no longer visible,

51
00:02:19,940 --> 00:02:21,890
there's a chance 
it will be terminated

52
00:02:21,890 --> 00:02:23,863
with no further code being executed.

53
00:02:23,863 --> 00:02:26,616
That can happen, after onStop,
in the case of the activity

54
00:02:26,616 --> 00:02:28,680
being terminated
while the fragment is part

55
00:02:28,680 --> 00:02:32,490
of that activity's view hierarchy, 
or after onDestroyView,

56
00:02:32,490 --> 00:02:35,120
if the fragment has already 
been placed in the back stack

57
00:02:35,120 --> 00:02:37,630
once the activity is destroyed.
