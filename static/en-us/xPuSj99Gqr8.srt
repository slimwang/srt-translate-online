1
00:00:00,266 --> 00:00:05,142
First thing we start off with is, we create a variable here called Render Engine Class

2
00:00:05,154 --> 00:00:10,012
and you define a variable by starting with the keyword var, and then

3
00:00:10,024 --> 00:00:14,789
the variable name, and then you say equals, whatever you would like it to be equal to.

4
00:00:14,801 --> 00:00:19,548
In this case we use an opening brace, to indicate that we'd like this to be

5
00:00:19,560 --> 00:00:24,547
a javascript object. This is the object literal notation, for defining an object

6
00:00:24,559 --> 00:00:29,436
in Javascript. From there we can declare methods and member variables of that

7
00:00:29,448 --> 00:00:34,151
object by specifying the name of the member, a colon and then the value that its

8
00:00:34,163 --> 00:00:38,693
going to take. In this case we declare the method of the name

9
00:00:38,705 --> 00:00:42,996
drawString, we use a colon and then we say that this is going to be a function, we use the

10
00:00:43,008 --> 00:00:47,463
keyword function to define this and then we give a list of all the parameters

11
00:00:47,572 --> 00:00:52,445
and then open the function with an opening brace, similarly to how you would

12
00:00:52,457 --> 00:00:57,543
in many other languages. Now, again, we create a variable, name it, and then assign

13
00:00:57,555 --> 00:01:02,058
to it, the value of gRenderEngine.context. Now this is going to take the

14
00:01:02,070 --> 00:01:07,056
JavaScript object, gRenderEngine and the dot notation is going to tell us that

15
00:01:07,068 --> 00:01:12,074
we want the context member of this object and we do something similar down here

16
00:01:12,086 --> 00:01:16,783
where we, grab the font member of the ctx object

17
00:01:16,888 --> 00:01:21,646
and assign it this value here. Now you notice that we're using addition in strings: addition is over loaded in

18
00:01:21,658 --> 00:01:26,620
javascript to also designate string concatenation, again

19
00:01:26,632 --> 00:01:31,221
similar to a lot of other languages you might have seen. Next we have an example of an if statement.

20
00:01:31,317 --> 00:01:35,170
If statements work essentially the same way that they would in any other language,

21
00:01:35,182 --> 00:01:39,237
where you have the keyword if, then in parenthesis you specify the

22
00:01:39,249 --> 00:01:43,565
predicate that's going to return a boolean value, either true or false and then

23
00:01:43,577 --> 00:01:48,235
the body of the if statement that executes, if that evaluates to true. Now, note

24
00:01:48,247 --> 00:01:53,091
that the statement here doesn't have braces around it designating what executes

25
00:01:53,103 --> 00:01:57,821
if the if statement evaluates to true. This is similar to some other languages

26
00:01:57,833 --> 00:02:02,442
where, if there's a single line that you need to evaluate, you don't require

27
00:02:02,454 --> 00:02:07,435
those braces. We use this here there, just for readability purposes. So you

28
00:02:07,447 --> 00:02:12,305
might see this in the code. Now for larger f blocks, you can delineate them with

29
00:02:12,317 --> 00:02:17,200
a opening brace, and then once they are done, way down here, you close them

30
00:02:17,212 --> 00:02:21,698
with another brace. From there we have a number of more examples of declaring and

31
00:02:21,710 --> 00:02:26,450
setting variables and then we come to a for loop. For loops are structured

32
00:02:26,462 --> 00:02:31,528
essentially the same way they are in C, were we have an initializer value, then

33
00:02:31,540 --> 00:02:36,583
a predicate to evaluate for, when the for loop should end, and then an expression

34
00:02:36,595 --> 00:02:41,450
to execute at the end of each for loop. And similarly to the if blocks, the

35
00:02:41,462 --> 00:02:46,026
block of code that you'd like to execute each time the for loop runs, is

36
00:02:46,038 --> 00:02:51,178
delineated by braces. Although again, if it's a single line, you don't require

37
00:02:51,190 --> 00:02:53,493
those braces to be there.

38
00:02:53,498 --> 00:02:58,033
Now here we see words n where n is in square braces and again, n is the

39
00:02:58,045 --> 00:03:02,952
variable that our for-loop is looping over. This is an example of accessing a

40
00:03:02,964 --> 00:03:07,875
list, where n is the n-th element in that list. Now, like most other languages,

41
00:03:07,983 --> 00:03:11,111
this is zero indexed as well. So keep that in mind.
