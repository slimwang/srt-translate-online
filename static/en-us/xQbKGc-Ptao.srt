1
00:00:00,540 --> 00:00:04,420
So we have full access to
the document object model, and

2
00:00:04,420 --> 00:00:06,230
the JavaScript console.

3
00:00:06,230 --> 00:00:08,320
We can see the HTML page and

4
00:00:08,320 --> 00:00:10,800
the HTML tag for everything
that's listed on this web page.

5
00:00:11,870 --> 00:00:14,190
We simply type in the word document.

6
00:00:14,190 --> 00:00:17,870
Notice that if I hover over
the document node here in the console,

7
00:00:17,870 --> 00:00:20,780
it also gets highlighted
in the HTML view.

8
00:00:21,810 --> 00:00:24,730
And then we can see all
the nested objects inside there.

9
00:00:24,730 --> 00:00:28,280
The other top level object that
is available is the Window.

10
00:00:28,280 --> 00:00:31,020
The Window corresponds
the browser window,

11
00:00:31,020 --> 00:00:35,820
while the document corresponds to the
HTML page that has already been loaded.

12
00:00:35,820 --> 00:00:40,470
When you work with D3.js, you often
want to select elements on a page

13
00:00:40,470 --> 00:00:45,530
either by the elements HTML tag,
their class or an ID.

14
00:00:45,530 --> 00:00:51,210
The way that D3.js makes selection or
chooses items on a webpage is based

15
00:00:51,210 --> 00:00:55,820
on the native DOM selection API that
get exposed through native JavaScript.

16
00:00:55,820 --> 00:00:59,810
We can access an element by its
ID by using the appropriate ID

17
00:00:59,810 --> 00:01:02,650
selector function on
the document itself.

18
00:01:02,650 --> 00:01:06,190
So here I can use
document.GetElementById.

19
00:01:06,190 --> 00:01:09,040
Notice that Chrome
tries to auto-complete

20
00:01:09,040 --> 00:01:11,280
the functions that I can use.

21
00:01:11,280 --> 00:01:13,070
So I can get an element by its ID.

22
00:01:13,070 --> 00:01:18,300
I can get multiple elements by
their class names, and so forth.

23
00:01:18,300 --> 00:01:21,660
So usually you won't need to use
these methods because there are so

24
00:01:21,660 --> 00:01:25,010
many great libraries which
have selector functions.

25
00:01:25,010 --> 00:01:30,390
These libraries like jQuery for example
make selecting DOM nodes so much easier.

26
00:01:31,570 --> 00:01:35,360
Like jQuery D3 has many methods
in order to select DOM nodes.

27
00:01:35,360 --> 00:01:37,330
So if you are are familiar with jQuery,

28
00:01:37,330 --> 00:01:40,630
then selections will
make a lot of sense.

29
00:01:40,630 --> 00:01:43,630
Let's try the simplest selection and
get an element by its ID.

30
00:01:44,710 --> 00:01:47,610
I'm going to try and
select this footer element down here.

31
00:01:47,610 --> 00:01:49,240
By right-clicking on
this footer element,

32
00:01:49,240 --> 00:01:54,070
I can see the HTML source code, and
I can inspect the element itself.

33
00:01:54,070 --> 00:01:56,930
Now, in this case,
I got the h1 that was selected, but

34
00:01:56,930 --> 00:02:00,740
I can see right above it is
a div with an ID of footer.

35
00:02:00,740 --> 00:02:05,035
So to select this footer using native
JavaScript, I'm just going to use this

36
00:02:05,035 --> 00:02:10,110
document.getElementById and
I'm going to pass in the ID of footer.

37
00:02:10,110 --> 00:02:12,550
What we see in the console
is a the return value,

38
00:02:12,550 --> 00:02:16,500
and it's a div tag with
the ID equal to footer.

39
00:02:16,500 --> 00:02:19,620
We can expand this tag to see every
child element that's contained

40
00:02:19,620 --> 00:02:23,250
within it, just like the h1 tag
which I originally selected

41
00:02:23,250 --> 00:02:25,650
when first right-clicking on this page.

42
00:02:25,650 --> 00:02:29,885
Another selection method which is
defined in the DOM is querySelector.

43
00:02:29,885 --> 00:02:34,300
querySelector allows us
to use CSS selector syntax

44
00:02:34,300 --> 00:02:36,640
to grab DOM elements from the page.

45
00:02:36,640 --> 00:02:40,350
Now, if you're not familiar with
CSS querySelector syntax, then,

46
00:02:40,350 --> 00:02:43,680
pause the video and
refer to links in the instructor notes.

47
00:02:43,680 --> 00:02:46,660
You'll want to learn how to select
elements on that page by either,

48
00:02:46,660 --> 00:02:48,940
their class name or by using their ID.

49
00:02:48,940 --> 00:02:54,430
One of the simplest and most used
CSS selectors is the class selector.

50
00:02:54,430 --> 00:02:58,720
So if you add a dot or a period before
a class name then document query

51
00:02:58,720 --> 00:03:01,995
selector will find all the DOM nodes,
which have that class.

52
00:03:01,995 --> 00:03:07,175
So in this example, I'm looking in
my document for any HTML elements,

53
00:03:07,175 --> 00:03:11,335
any HTML tags that have
a class name of main.

54
00:03:11,335 --> 00:03:15,215
Notice that when I run this function,
I get returned a div with the class

55
00:03:15,215 --> 00:03:20,315
with the name main, and if I hover over
the DOM node in the JavaScript console,

56
00:03:20,315 --> 00:03:23,475
Chrome tools is smart enough to
know which element I've selected.

57
00:03:23,475 --> 00:03:25,730
Now if I only want to
look at the DOM nodes.

58
00:03:25,730 --> 00:03:29,520
I can hit escape and then look at
this html viewer, and then try and

59
00:03:29,520 --> 00:03:32,490
find that div with
the class name of main.

60
00:03:32,490 --> 00:03:33,560
And it's right there.

61
00:03:33,560 --> 00:03:34,960
All right.

62
00:03:34,960 --> 00:03:37,800
Let's see if you have
a handle on CSS selectors.
