1
00:00:00,000 --> 00:00:02,960
The algorithm is correct, or the search tree is correct,

2
00:00:02,960 --> 00:00:06,190
because it still tries all possibilities;

3
00:00:06,190 --> 00:00:10,360
it's just smarter about avoiding stupid possibilities.

4
00:00:10,360 --> 00:00:15,120
And what I mean by this is basically that it deliberately avoids this case here

5
00:00:15,120 --> 00:00:18,240
where you have 2 endpoints of an edge not being in the vertex cover,

6
00:00:18,240 --> 00:00:19,690
so it tries to avoid those.

7
00:00:19,690 --> 00:00:23,330
Are there special cases where the algorithm could be wrong? No.

8
00:00:23,330 --> 00:00:25,710
It still searches through all possibilities.

9
00:00:25,710 --> 00:00:30,070
Again, it just does so in an intelligent way to avoid making any stupid choices.

10
00:00:30,070 --> 00:00:35,270
Does the search tree at each level determine the assignment of at least 1 vertex? Yes.

11
00:00:35,270 --> 00:00:38,740
That one is definitely true because if all edges would be covered,

12
00:00:38,740 --> 00:00:42,400
then the algorithm would be done; the search tree would not go much further.

13
00:00:42,400 --> 00:00:47,200
The usual case would be that we actually do an assignment for 2 vertices,

14
00:00:47,200 --> 00:00:50,330
and this will also tell you something about the answer down here.

15
00:00:50,330 --> 00:00:52,760
So usually when we have an edge that is not covered,

16
00:00:52,760 --> 00:00:56,970
we will have the case that we actually determine the assignment for 2 vertices.

17
00:00:56,970 --> 00:01:00,550
There is 1 special case, and if you have found that special case yourself,

18
00:01:00,550 --> 00:01:02,680
then you have truly understood search trees.

19
00:01:02,680 --> 00:01:06,970
But if you haven't, then just listen closely and don't worry too much about it.

20
00:01:06,970 --> 00:01:10,730
There might be the following case, where you have an edge that is not yet covered

21
00:01:10,730 --> 00:01:13,430
but you've already made the decision for 1 of the endpoints.

22
00:01:13,430 --> 00:01:15,750
The question is now what to do with this one here.

23
00:01:15,750 --> 00:01:18,400
But this is actually a case that is rather easy

24
00:01:18,400 --> 00:01:21,500
because here we don't really have to make a choice anymore

25
00:01:21,500 --> 00:01:23,670
because we know this edge must be covered.

26
00:01:23,670 --> 00:01:28,860
So whenever we decide for 1 vertex that it is not going to be part of the vertex cover,

27
00:01:28,860 --> 00:01:32,330
then we can put all of its neighbors into the vertex cover automatically.

28
00:01:32,330 --> 00:01:34,160
We do not need to make a choice here anymore,

29
00:01:34,160 --> 00:01:37,940
and this is why we can construct the search tree so that at each level

30
00:01:37,940 --> 00:01:40,780
we determine the assignment of at least 2 vertices.

31
00:01:40,780 --> 00:01:44,240
Just to make this very clear, let me show you this again here in this example.

32
00:01:44,240 --> 00:01:46,050
Let's go back 1 level.

33
00:01:46,050 --> 00:01:49,940
When we made the choice here to not put this vertex into the vertex cover,

34
00:01:49,940 --> 00:01:55,100
we could immediately also have said that this vertex here must be part of the vertex cover

35
00:01:55,100 --> 00:01:59,290
because otherwise this edge here cannot be covered and we would already have been done.

36
00:01:59,290 --> 00:02:01,180
And the same thing up here.

37
00:02:01,180 --> 00:02:04,810
So if we decide that this vertex is not part of the vertex cover,

38
00:02:04,810 --> 00:02:08,130
then we immediately know that this vertex must come into the vertex cover

39
00:02:08,130 --> 00:02:09,840
because otherwise this edge here would not be covered,

40
00:02:09,840 --> 00:02:13,670
and we also know because of this edge here that we have to put this vertex here

41
00:02:13,670 --> 00:02:18,200
into the vertex cover, so we are also done, having found a slightly larger solution.

42
00:02:18,200 --> 00:02:21,810
The only thing where we still need to make a decision is this part down here.

43
00:02:21,810 --> 00:02:27,030
There we can still go into 3 cases, either putting that one into the vertex cover, that one, or both.

44
00:02:27,030 --> 00:02:29,700
And this is of course something that an algorithm can do as well.

45
00:02:29,700 --> 00:02:32,000
So actually, we get down to 5 assignments here,

46
00:02:32,000 --> 00:02:36,530
which already makes this search tree better than the one we started out with.

47
00:02:36,530 --> 00:02:38,800
But now comes the really cool part

48
00:02:38,800 --> 00:02:42,320
because once we know that we can construct the search tree

49
00:02:42,320 --> 00:02:47,650
so that at each level we determine the assignment of at least 2 vertices,

50
00:02:47,650 --> 00:02:52,340
we can do a pretty, pretty cool worst case analysis of that search tree.

51
00:02:52,340 --> 99:59:59,999
So let me show you.
