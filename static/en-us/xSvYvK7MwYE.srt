1
00:00:00,350 --> 00:00:04,300
So, which of these scenarios
are right to be promisified?

2
00:00:04,300 --> 00:00:04,840
I'll go ahead and

3
00:00:04,840 --> 00:00:09,550
start at the top, working with
information from ajax requests.

4
00:00:09,550 --> 00:00:14,540
Most definitely, the would
asynchronous is in the very definition

5
00:00:14,540 --> 00:00:18,850
of ajax, and you'll be working
with these kinds of requests soon.

6
00:00:18,850 --> 00:00:23,960
Next up, executing long running image
manipulation work in the main thread.

7
00:00:23,960 --> 00:00:24,970
No.

8
00:00:24,970 --> 00:00:26,780
Promises run in the main thread, so

9
00:00:26,780 --> 00:00:31,030
you don't gain anything from wrapping
work in the main thread in a promise.

10
00:00:31,030 --> 00:00:33,100
The work will still
happen synchronously and

11
00:00:33,100 --> 00:00:36,080
still probably lead to
a gen key experience.

12
00:00:36,080 --> 00:00:39,395
Next up,
creating a series of HTML elements.

13
00:00:39,395 --> 00:00:41,136
No.

14
00:00:41,136 --> 00:00:43,955
Creating and appending dom
elements is synchronous, so

15
00:00:43,955 --> 00:00:46,840
there's no need to
wrap them in promises.

16
00:00:46,840 --> 00:00:50,530
That being said, if these were,
say image elements, or

17
00:00:50,530 --> 00:00:53,710
script elements with links
to external resources,

18
00:00:53,710 --> 00:00:58,690
then loading the external resources
themselves, are asynchronous operations.

19
00:00:58,690 --> 00:01:02,510
You could use promises to chain
actions after the resources load.

20
00:01:04,060 --> 00:01:07,280
Likewise, if the data came
from an asynchronous resource,

21
00:01:07,280 --> 00:01:11,870
then you could wrap this in a promise,
but that's not what's happening here.

22
00:01:11,870 --> 00:01:15,790
Last up, posting messages back and
forth between the main thread and

23
00:01:15,790 --> 00:01:16,380
a web worker.

24
00:01:17,550 --> 00:01:18,050
Yes.

25
00:01:19,050 --> 00:01:23,560
Web workers run on separate threads and
post data to the main thread.

26
00:01:23,560 --> 00:01:26,489
They are certainly asynchronous and
perfect for promises.

27
00:01:27,840 --> 00:01:30,860
All right,
that's enough discussion about promises.

28
00:01:30,860 --> 00:01:31,960
It's time to start writing them.
