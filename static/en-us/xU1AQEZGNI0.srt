1
00:00:00,110 --> 00:00:02,719
For services that need
to deal with high or

2
00:00:02,719 --> 00:00:07,100
variable request rates, choosing
the configuration that involves multiple

3
00:00:07,100 --> 00:00:11,940
processes configured on potentially
multiple nodes, becomes necessary.

4
00:00:11,940 --> 00:00:16,110
This is because the multi-process
configurations are the easiest way to

5
00:00:16,110 --> 00:00:21,230
deal with scale, to deal with increases
in the incoming request rates.

6
00:00:21,230 --> 00:00:25,765
What will do in such cases is we'll
scale out the service deployment,

7
00:00:25,765 --> 00:00:29,930
by launching the same
service on multiple machines.

8
00:00:29,930 --> 00:00:33,040
And so these are referred to
as scale out architectures.

9
00:00:33,040 --> 00:00:36,582
A typical architecture could
then be organized as follows.

10
00:00:36,582 --> 00:00:39,820
A front-end dispatching or
load balancing component

11
00:00:39,820 --> 00:00:43,160
would a route to the incoming
request to the appropriate or

12
00:00:43,160 --> 00:00:47,220
available machine that
implements the internet service.

13
00:00:47,220 --> 00:00:51,080
This is in some sense similar to the
boss-worker pattern that we discussed

14
00:00:51,080 --> 00:00:55,310
when we talked about structuring
multi-threaded parallel programs.

15
00:00:55,310 --> 00:01:00,230
One possibility afterwards is that every
single one of the nodes is capable for

16
00:01:00,230 --> 00:01:03,790
executing any possible
step that's required for

17
00:01:03,790 --> 00:01:05,680
the processing of the request.

18
00:01:05,680 --> 00:01:09,670
And that they can handle any possible
request that may come in from

19
00:01:09,670 --> 00:01:11,060
the external users.

20
00:01:11,060 --> 00:01:16,200
The other possibility is that the nodes
can be specialized to execute only some

21
00:01:16,200 --> 00:01:21,030
specific step, or some specific
steps in the request processing, or

22
00:01:21,030 --> 00:01:24,570
they can be specialized only for
certain types of requests.

23
00:01:24,570 --> 00:01:28,110
This is again analogous to what
we talked about when discussing

24
00:01:28,110 --> 00:01:32,860
the boss-worker pattern, that
the workers may be general purpose, so

25
00:01:32,860 --> 00:01:37,030
they may perform any processing, or they
may be specialized for certain tasks.

26
00:01:37,030 --> 00:01:41,340
We can further classify these
architectures as those having

27
00:01:41,340 --> 00:01:44,620
a property of being
functionally homogenous.

28
00:01:44,620 --> 00:01:48,869
Like when all of the workers performed,
are capable of performing,

29
00:01:48,869 --> 00:01:51,040
any processing step.

30
00:01:51,040 --> 00:01:53,120
Or, as functionally heterogeneous,

31
00:01:53,120 --> 00:01:57,400
like in the case where certain notes
are specialized in certain functions.
