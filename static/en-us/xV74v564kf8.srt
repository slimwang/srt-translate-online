1
00:00:00,370 --> 00:00:04,240
The first option implies that the hot cache means that

2
00:00:04,240 --> 00:00:07,950
the cache is physically getting hot, then it will malfunction.

3
00:00:07,950 --> 00:00:12,190
However, the term hot cache has nothing to do with the actual temperature of

4
00:00:12,190 --> 00:00:12,940
the cache.

5
00:00:12,940 --> 00:00:17,490
It merely refers that many of the cache accesses will actually resolve in

6
00:00:17,490 --> 00:00:18,319
a cache hit.

7
00:00:18,319 --> 00:00:20,600
The data will be found and cached.

8
00:00:20,600 --> 00:00:25,480
So in this context, the more cache hits means that the cache is hot.

9
00:00:25,480 --> 00:00:30,080
Now coincidentally, this also will lead to a rise in temperature.

10
00:00:30,080 --> 00:00:33,540
However, the effects of that aren't going to be that the operating system will

11
00:00:33,540 --> 00:00:35,600
context switch to another process.

12
00:00:35,600 --> 00:00:38,800
Modern systems and platforms do have a lot of mechanisms to

13
00:00:38,800 --> 00:00:42,860
deal with temperature rises, but that's beyond the scope of this lecture.

14
00:00:42,860 --> 00:00:44,300
Let's look at the second option.

15
00:00:44,300 --> 00:00:47,710
The second option is actually the most correct one.

16
00:00:47,710 --> 00:00:49,820
If data is present in the cache,

17
00:00:49,820 --> 00:00:54,400
it will be accessed much faster than if data is accessed from memory.

18
00:00:54,400 --> 00:00:58,550
So, executing with a hot cache actually corresponds to

19
00:00:58,550 --> 00:01:02,130
the state when the process performance is at its best.

20
00:01:02,130 --> 00:01:05,345
And unfortunately, three is correct as well.

21
00:01:05,345 --> 00:01:08,580
Although hot cache means best performance,

22
00:01:08,580 --> 00:01:12,950
sometimes we must context switch although the process cache is hot.

23
00:01:12,950 --> 00:01:16,010
And that's because there is another process that maybe has higher

24
00:01:16,010 --> 00:01:18,790
priority that needs to execute.

25
00:01:18,790 --> 00:01:23,430
Or maybe we have a policy where we have to timeshare the CPU between two

26
00:01:23,430 --> 00:01:26,860
processes and P1's time has expired, so

27
00:01:26,860 --> 00:01:29,210
we have to context switch and give the CPU to P2.
