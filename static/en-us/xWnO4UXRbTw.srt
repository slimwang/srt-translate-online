1
00:00:00,000 --> 00:00:03,000
Now let's take a look at what we did here.

2
00:00:03,000 --> 00:00:09,000
So we had re.split and then this regular expression and then out of the formula.

3
00:00:09,000 --> 00:00:12,000
So what does this say?

4
00:00:12,000 --> 00:00:17,000
This says I want to split up the original formula, and the way I'm splitting it up is

5
00:00:17,000 --> 00:00:22,000
I'm taking sequences of the characters A-Z in a row.

6
00:00:22,000 --> 00:00:27,000
The plus means one or more, and the parentheses means keep that result.

7
00:00:27,000 --> 00:00:31,000
So when I have you = me squared,

8
00:00:31,000 --> 00:00:35,000
this part and this part will match,

9
00:00:35,000 --> 00:00:41,000
and they'll be returned as individual elements in this split,

10
00:00:41,000 --> 00:00:43,000
and so will the other parts.

11
00:00:43,000 --> 00:00:48,000
Re.split will return the list consisting of the parts that it found in the split

12
00:00:48,000 --> 00:00:50,000
plus everything in between.

13
00:00:50,000 --> 00:00:55,000
And it will be this type of list, and then I'm going to map compile word--

14
00:00:55,000 --> 00:00:57,000
it didn't quite fit on one line--

15
00:00:57,000 --> 00:00:59,000
to re.split, and that will give me--

16
00:00:59,000 --> 00:01:02,000
these tokens will remain unchanged,

17
00:01:02,000 --> 00:01:07,000
and these will be converted into the form that multiplies out the digits.

18
00:01:07,000 --> 00:01:11,000
Then I'm going to assign that to the variable tokens.

19
00:01:11,000 --> 00:01:13,000
Now I've got my tokens.

20
00:01:13,000 --> 00:01:16,000
The body of the function we just formed by concatenating all the tokens together.

21
00:01:16,000 --> 00:01:20,000
If I wanted to I could put spaces between them; it doesn't matter.

22
00:01:20,000 --> 00:01:27,000
And the function is lambda created with the parameters in the body,

23
00:01:27,000 --> 00:01:30,000
and then I just return the evaluation of the function,

24
00:01:30,000 --> 00:01:34,000
so that complies the function, does it only once rather than once per permutation.

25
00:01:34,000 --> 00:01:37,000
And I return the letters that I found.

26
00:01:37,000 --> 00:01:41,000
As a convenience, because when you're debugging this function you may want

27
00:01:41,000 --> 00:01:43,000
to say, "Well, what did this function look like?"

28
00:01:43,000 --> 00:01:44,000
"What did I come up with? What did I come up with?"

29
00:01:44,000 --> 00:01:47,000
I have an optional parameter here

30
00:01:47,000 --> 00:01:50,000
I have an optional parameter here that says if you pass in verbose equals true,

31
00:01:50,000 --> 00:01:52,000
then it just prints out what it found.

32
00:01:52,000 --> 00:01:55,000
It just makes it a little bit easier to debug this function.

33
00:01:55,000 --> 00:01:58,000
And now, when I run profiling again, look what I get.

34
00:01:58,000 --> 00:02:04,000
The time has sped up quite a bit on the simple list of 14 examples that we saw before.

35
00:02:04,000 --> 00:02:09,000
This version of the code is 25 times faster.

36
00:02:09,000 --> 00:02:13,000
On a more complex list, it's only 13 times faster.

37
00:02:13,000 --> 00:02:17,000
But it's at least an order of magnitude faster.

38
00:02:17,000 --> 00:02:20,000
And we did that because we eliminated calls to eval.

39
00:02:20,000 --> 00:02:22,000
So we found the bottleneck.

40
00:02:22,000 --> 00:02:25,000
We found that eval was the function that was taking up the most amount of time

41
00:02:25,000 --> 00:02:27,000
in the previous profiling.

42
00:02:27,000 --> 00:02:32,000
We figured out a way to call eval less often by precompiling,

43
00:02:32,000 --> 99:59:59,999
and now we've done away with that difficulty.
