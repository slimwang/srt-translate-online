1
00:00:00,170 --> 00:00:03,610
Now that we have an empty database,
let's populate it with some information.

2
00:00:03,610 --> 00:00:06,730
With SQL, we would need to execute
an insert command with all of

3
00:00:06,730 --> 00:00:09,360
the information we want it to
populate into our database.

4
00:00:09,360 --> 00:00:10,408
Using SQLAlchemy,

5
00:00:10,408 --> 00:00:13,990
creating a new database is as easy
as creating a new object in Python.

6
00:00:13,990 --> 00:00:16,857
I will be executing these operations
from the Python show, but

7
00:00:16,857 --> 00:00:19,249
they could also be done from
within a Python script.

8
00:00:19,249 --> 00:00:22,598
We must first import the following
dependencies from SQLAlchemy, and

9
00:00:22,598 --> 00:00:25,240
the empty database we created,
into our environment.

10
00:00:25,240 --> 00:00:27,458
We will see what they
do in just a second.

11
00:00:27,458 --> 00:00:30,120
From our database_setup.py
file that we created,

12
00:00:30,120 --> 00:00:34,100
let's import our base restaurant,
and menu classes.

13
00:00:34,100 --> 00:00:37,510
The create_engine function lets our
program know which database engine we

14
00:00:37,510 --> 00:00:38,890
want to communicate with.

15
00:00:38,890 --> 00:00:42,770
Then let's bind the engine to the base
class with the following command.

16
00:00:42,770 --> 00:00:45,910
This command just makes the connections
between our class definitions and

17
00:00:45,910 --> 00:00:48,490
the corresponding tables
within our database.

18
00:00:48,490 --> 00:00:51,080
The next thing I'm going to do
is create a sessionmaker object.

19
00:00:51,080 --> 00:00:54,830
This establishes a link of communication
between our code executions and

20
00:00:54,830 --> 00:00:55,760
the engine we just created.

21
00:00:55,760 --> 00:00:59,970
In order to create, read, update or
delete information on our database,

22
00:00:59,970 --> 00:01:03,280
SQLAlchemy executes database
operations via an interface.

23
00:01:03,280 --> 00:01:04,879
It's called a session.

24
00:01:04,879 --> 00:01:08,010
A session allows us to write down all
the commands we want to execute, but

25
00:01:08,010 --> 00:01:10,490
not send them to the database
until we call a commit.

26
00:01:10,490 --> 00:01:12,210
Here, I'll show you what I mean.

27
00:01:12,210 --> 00:01:16,190
I'm going to create an instance of a
DBSession and call it session for short.

28
00:01:16,190 --> 00:01:18,810
From now on, when I want to
make a change to my database,

29
00:01:18,810 --> 00:01:21,480
I can do it just by calling
a method from within session.

30
00:01:21,480 --> 00:01:24,220
The DBSession object gives
me a staging zone for

31
00:01:24,220 --> 00:01:27,210
all of the objects loaded into
a database session object.

32
00:01:27,210 --> 00:01:30,730
Any change made to the objects in
the session won't be persisted into

33
00:01:30,730 --> 00:01:33,530
the database until I
call session.commit.

34
00:01:33,530 --> 00:01:35,120
Now as I promised,

35
00:01:35,120 --> 00:01:39,080
making a new entry in our database is as
easy as making a new object in Python.

36
00:01:39,080 --> 00:01:41,300
Take a look at these three
lines of example code and

37
00:01:41,300 --> 00:01:44,630
watch as I implement them to create
a new restaurant in my database.

38
00:01:44,630 --> 00:01:47,900
Following this example,
I'll make my first restaurant like so.

39
00:01:47,900 --> 00:01:51,180
As you can see, it's just an instance
of my restaurant class with

40
00:01:51,180 --> 00:01:54,330
a name attribute that I decided
to give it, Pizza Palace.

41
00:01:54,330 --> 00:01:56,790
To persist my new restaurant
into the database,

42
00:01:56,790 --> 00:01:58,890
I must do two more session operations.

43
00:01:58,890 --> 00:02:02,660
First by calling session.add
my first restaurant,

44
00:02:02,660 --> 00:02:06,230
my restaurant object is in the staging
zone to be added to the database.

45
00:02:06,230 --> 00:02:09,990
Then with session.commit it's
now stored to my database.

46
00:02:09,990 --> 00:02:11,350
But how do I know it worked?

47
00:02:11,350 --> 00:02:14,420
Well, I can also use the session
to interact with my database and

48
00:02:14,420 --> 00:02:15,830
see what's inside of it.

49
00:02:15,830 --> 00:02:19,210
If I execute
session.query(Restaurant).all, I'm

50
00:02:19,210 --> 00:02:21,300
asking my session to
go into the database,

51
00:02:21,300 --> 00:02:23,795
find the table that corresponds
to the restaurant class and

52
00:02:23,795 --> 00:02:27,735
find all the entires in that table and
return them in a list.

53
00:02:27,735 --> 00:02:30,430
When I run this,
I get a response with something like,

54
00:02:30,430 --> 00:02:35,650
database_setup.Restaurant object at and
some hexadecimal number.

55
00:02:35,650 --> 00:02:39,420
This just lets us know that Python
found a restaurant in our database and

56
00:02:39,420 --> 00:02:42,450
represents it as an object
at this location in memory.

57
00:02:42,450 --> 00:02:45,730
I'm sure you're thinking, well that's
great but how's it useful to me?

58
00:02:45,730 --> 00:02:48,800
We'll go into more detail about
the query method when we focus on

59
00:02:48,800 --> 00:02:50,660
reading data out of our database.

60
00:02:50,660 --> 00:02:53,990
So now, let's add a MenuItem
to our Pizza Palace menu.

61
00:02:53,990 --> 00:02:56,860
Since our MenuItems all belong to
a Restaurant, and have a few more

62
00:02:56,860 --> 00:03:00,330
attributes, we have to provide a bit
more information in our declaration.

63
00:03:00,330 --> 00:03:03,860
I can create a Cheese Pizza by
executing the following command.

64
00:03:03,860 --> 00:03:07,460
Notice that I provided all of the fields
of information for a MenuItem here and

65
00:03:07,460 --> 00:03:11,330
specify the foreign key relationship
to the object name of my restaurant.

66
00:03:11,330 --> 00:03:14,590
In order for this operation to work,
I didn't have to fill out every entry

67
00:03:14,590 --> 00:03:19,910
unless I specified it as nullable equal
to false in our database_setup.py file.

68
00:03:19,910 --> 00:03:23,260
Now let's run session.query
MenuItem .all to

69
00:03:23,260 --> 00:03:26,530
see that an object now exists for
our cheese pizza item, as well.

70
00:03:26,530 --> 00:03:28,770
Now that you know how to
add data to a database,

71
00:03:28,770 --> 00:03:30,160
it's your turn to get
some practice at it.
