1
00:00:00,380 --> 00:00:03,550
So what if you could not
use typeset languages?

2
00:00:03,550 --> 00:00:07,500
You could not use languages like Java or

3
00:00:07,500 --> 00:00:13,670
others that do this checking to prevent
all memory overflow kind of attacks.

4
00:00:13,670 --> 00:00:18,210
What can we do in that case if you're
stuck with let's say languages for

5
00:00:18,210 --> 00:00:22,520
whatever reason, we talked about a few,
where this is not done automatically,

6
00:00:22,520 --> 00:00:24,400
what should we be doing?

7
00:00:24,400 --> 00:00:27,550
So when we are using these so

8
00:00:27,550 --> 00:00:31,530
called unsafe languages that
automatically don't prevent buffer

9
00:00:31,530 --> 00:00:35,560
overflows then it become
the responsibility of the programmer.

10
00:00:35,560 --> 00:00:37,554
If you're writing code it
is your responsibility

11
00:00:38,615 --> 00:00:42,235
that you deal with this problem
of potential buffer overflows.

12
00:00:42,235 --> 00:00:45,795
One way you can do that is
by checking ALL input, okay?

13
00:00:45,795 --> 00:00:50,295
So secure coding mantra
is that trust no input.

14
00:00:50,295 --> 00:00:54,205
All input is evil and
you should be checking

15
00:00:54,205 --> 00:00:58,120
that it can conforms to
whatever your expectation was.

16
00:00:58,120 --> 00:01:02,790
Don't rely on the underlying system to
do those because we're talking about

17
00:01:02,790 --> 00:01:05,410
using languages that do
not do automatically.

18
00:01:05,410 --> 00:01:09,400
So secure coding is an extremely
as you write programs.

19
00:01:09,400 --> 00:01:12,460
You write them to implement
certain functionality.

20
00:01:12,460 --> 00:01:15,920
You may even write them with some
performance goals in mind, but

21
00:01:15,920 --> 00:01:20,560
at the same time you need to keep in
mind that you have to write them so

22
00:01:20,560 --> 00:01:22,470
they cannot be exploited.

23
00:01:22,470 --> 00:01:27,400
You have to code securely or
use secure coding practices so your

24
00:01:27,400 --> 00:01:31,760
program doesn't have the vulnerabilities
like the ones we've been talking about.

25
00:01:31,760 --> 00:01:34,960
And one way you do that
is by checking ALL input.

26
00:01:34,960 --> 00:01:36,730
The other thing that you can do is,

27
00:01:36,730 --> 00:01:41,090
you can use functions that
are safer that do bound checking.

28
00:01:41,090 --> 00:01:44,840
So remember in the code we could
have string compare or string copy.

29
00:01:44,840 --> 00:01:47,295
You could also have certain side string,

30
00:01:47,295 --> 00:01:50,350
though you shouldn't be dealing with
a string that is longer than that.

31
00:01:50,350 --> 00:01:54,489
So their functions that would place
a limit on the length of the string this

32
00:01:54,489 --> 00:01:56,170
function would manipulate.

33
00:01:56,170 --> 00:02:01,217
So you can use there number of
safer ways to use certain functions

34
00:02:01,217 --> 00:02:05,889
that are unsafe and the patterns and
ways of using those that

35
00:02:05,889 --> 00:02:11,050
are safer where the likelihood of
a vulnerability is a lot lower.

36
00:02:11,050 --> 00:02:15,324
So these functions, all though the
language doesn't do it, the functions

37
00:02:15,324 --> 00:02:19,464
that you do will do the checking or
the bounds checking that we're talking

38
00:02:19,464 --> 00:02:24,330
about, and as a result using those leads
to code that is safer more secure.

39
00:02:24,330 --> 00:02:28,400
And the last thing you can do after
written some code that's not in

40
00:02:28,400 --> 00:02:33,970
a typeset language, is to use tools
that exist that would actually

41
00:02:33,970 --> 00:02:39,248
analyze code that you have written and
flag potential vulnerability.

42
00:02:39,248 --> 00:02:44,190
The way they able to do that is,
they can look for certain code patterns.

43
00:02:44,190 --> 00:02:46,740
They can look for
certain unsafe functions, and

44
00:02:46,740 --> 00:02:52,390
can warn you that the code fragment
that you have where these things appear,

45
00:02:52,390 --> 00:02:55,920
an unsafe function appears,
could be potentially

46
00:02:55,920 --> 00:03:00,430
vulnerable to some sort of exploit
buffer overflow or something like that.

47
00:03:00,430 --> 00:03:03,730
So these tools, you just run your
code through these tools and

48
00:03:03,730 --> 00:03:05,520
there's a lot of them
that are out there.

49
00:03:05,520 --> 00:03:07,990
Some commercial,
some you can get for free.

50
00:03:07,990 --> 00:03:11,080
And these tools they
rely on sort of database

51
00:03:11,080 --> 00:03:14,340
of certain kind of patterns
that are known to be unsafe.

52
00:03:14,340 --> 00:03:17,940
And if they run into your code that
matches those kind of patterns,

53
00:03:17,940 --> 00:03:19,320
they can flag those.

54
00:03:19,320 --> 00:03:22,940
And they can do more sophisticated
analysis to potentially discover

55
00:03:22,940 --> 00:03:25,000
the kind of vulnerability
that we're talking about.

56
00:03:25,000 --> 00:03:29,590
So there's no excuse for
writing code that is not secure.

57
00:03:29,590 --> 00:03:31,410
You should be checking your input.

58
00:03:31,410 --> 00:03:36,330
You should be using safer functions
that do that checking automatically.

59
00:03:36,330 --> 00:03:39,030
And then you should run through
your coded through these tools

60
00:03:39,030 --> 00:03:41,840
that can flag potential problem spots.

61
00:03:41,840 --> 00:03:43,840
And you should go back and
look at that and

62
00:03:43,840 --> 00:03:48,450
see how you can actually make those
potential vulnerabilities go away.

63
00:03:48,450 --> 00:03:51,890
One problem with automatic tools
is that they may have a lot of

64
00:03:51,890 --> 00:03:55,290
false positives or if they miss out and
they have false negatives.

65
00:03:55,290 --> 00:03:59,650
So you can't have tools that will have
zero false positives or false negatives,

66
00:03:59,650 --> 00:04:04,180
but the tools can certainly help
us get rid of many possible

67
00:04:04,180 --> 00:04:08,720
vulnerabilities in the process producing
code that is a lot more secure.

68
00:04:08,720 --> 00:04:12,155
So even when you are stuck with
programming in a language that's not

69
00:04:12,155 --> 00:04:15,780
going to help you much with the kind of
attacks, vulnerabilities that we've been

70
00:04:15,780 --> 00:04:20,790
talking about, there's certainly things
you can do as a programmer who likes to

71
00:04:20,790 --> 00:04:25,230
do secure programming by checking input,
using safer functions, and

72
00:04:25,230 --> 00:04:28,570
then running, checking your code through
these tools that we're talking about.

73
00:04:28,570 --> 00:04:31,770
And we'll have a long list of these
tools actually you can go and

74
00:04:31,770 --> 00:04:32,340
learn about.
