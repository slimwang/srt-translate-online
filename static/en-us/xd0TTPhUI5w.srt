1
00:00:00,470 --> 00:00:02,850
We're making really good progress so
far.

2
00:00:02,850 --> 00:00:05,080
As we continue to build
more challenging things for

3
00:00:05,080 --> 00:00:08,900
our app, we're going to have to
improve our debugging skills.

4
00:00:08,900 --> 00:00:09,490
In this video,

5
00:00:09,490 --> 00:00:12,590
we're going to learn about how to
use a tool called the debugger.

6
00:00:12,590 --> 00:00:15,450
We'll access the debugger
using Android Studio.

7
00:00:15,450 --> 00:00:19,720
And the debugger is meant to help us
identify and fix errors in our code.

8
00:00:19,720 --> 00:00:23,040
The great thing about the debugger is
that we can pause the app at a certain

9
00:00:23,040 --> 00:00:27,960
point in time, and then we can inspect
the whole state of the app more closely.

10
00:00:27,960 --> 00:00:30,350
Normally, when the app is
running on our device,

11
00:00:30,350 --> 00:00:33,050
all the code gets executed very rapidly.

12
00:00:33,050 --> 00:00:37,200
Within milliseconds, it can respond
to button clicks, update the screen,

13
00:00:37,200 --> 00:00:39,470
calculate the price, and etc.

14
00:00:39,470 --> 00:00:43,510
But with the debugger, we can pause at
a specific line of code in our app,

15
00:00:43,510 --> 00:00:47,620
then we can step through our code line
by line as quickly or slowly as we want.

16
00:00:48,760 --> 00:00:52,690
If you want to learn more techniques on
how to debug your app in Android Studio,

17
00:00:52,690 --> 00:00:56,070
just search for
debugging Android Studio.

18
00:00:56,070 --> 00:00:57,550
This first link is good.

19
00:00:57,550 --> 00:00:59,720
It's a developer.android.com page, and

20
00:00:59,720 --> 00:01:02,810
it has a bunch of techniques
on how to debug your app.

21
00:01:02,810 --> 00:01:05,560
Together, we're going to learn
about how to work with breakpoints.

22
00:01:05,560 --> 00:01:06,320
After this course,

23
00:01:06,320 --> 00:01:08,860
you can always come back to this
page to refresh your memory.

24
00:01:09,930 --> 00:01:13,120
In this exercise I want to show you
that your Android device does run

25
00:01:13,120 --> 00:01:17,160
each line of code one at a time
from top to bottom within a method.

26
00:01:17,160 --> 00:01:20,420
We'll also verify that clicking on the
plus button does trigger the increment

27
00:01:20,420 --> 00:01:23,670
method, and clicking on the minus button
does trigger the decrement method.

28
00:01:24,850 --> 00:01:27,220
First add something
known as a breakpoint.

29
00:01:27,220 --> 00:01:30,010
A breakpoint marks
a specific line of code

30
00:01:30,010 --> 00:01:32,980
where the debugger should
pause when it reaches here.

31
00:01:32,980 --> 00:01:35,600
The red circular dot indicates
that the breakpoint is

32
00:01:35,600 --> 00:01:38,290
on this line on line 25 of
our main activity file.

33
00:01:39,440 --> 00:01:43,380
You can add breakpoints to as many
places as you want in your code.

34
00:01:43,380 --> 00:01:43,960
But for now,

35
00:01:43,960 --> 00:01:48,220
I'm just going to add one on the first
line of the increment method.

36
00:01:48,220 --> 00:01:52,240
Then I can hit this bug icon
to run the app in debug mode.

37
00:01:52,240 --> 00:01:55,440
The app will only pause on these
breakpoints when the app is running

38
00:01:55,440 --> 00:01:56,550
in debug mode.

39
00:01:56,550 --> 00:01:59,160
If you run the app normally
with this green play button,

40
00:01:59,160 --> 00:02:01,890
then it won't pause
at these breakpoints.

41
00:02:01,890 --> 00:02:05,200
For a brief moment, on the device,
you may have seen a dialog that says,

42
00:02:05,200 --> 00:02:06,710
waiting for debugger.

43
00:02:06,710 --> 00:02:09,620
There's also a button to force close
the app, but don't click on that.

44
00:02:09,620 --> 00:02:13,590
Just wait for the debugger to attach and
the message will go away soon.

45
00:02:13,590 --> 00:02:15,880
Then the app starts like normal and
you can interact with it.

46
00:02:16,920 --> 00:02:21,820
Now, in debug mode, this window will pop
up and show the status of the debugger.

47
00:02:21,820 --> 00:02:24,770
If you don't see it, you can click
on this tab down here called debug.

48
00:02:25,900 --> 00:02:30,340
If I hit this plus button here, I expect
the increment method will be triggered

49
00:02:30,340 --> 00:02:33,230
and that the app will
pause at this breakpoint.

50
00:02:33,230 --> 00:02:35,000
Let's see what happens.

51
00:02:35,000 --> 00:02:36,560
Cool.
It stops there.

52
00:02:36,560 --> 00:02:40,310
In the debug pane,
we see a list of variables.

53
00:02:40,310 --> 00:02:43,440
This reflects the current state
of the app where it was paused.

54
00:02:43,440 --> 00:02:45,620
We don't see our quantity variable yet,

55
00:02:45,620 --> 00:02:48,990
because it hasn't finished
executing this line of code yet.

56
00:02:48,990 --> 00:02:51,820
There's a bunch of options on
how to proceed with debugging.

57
00:02:51,820 --> 00:02:55,000
But I'm going to click on this
option that says step over.

58
00:02:55,000 --> 00:02:58,670
This will step over the current line
of code to the next line of code.

59
00:02:58,670 --> 00:03:01,330
Now the app is currently
paused at line 26.

60
00:03:01,330 --> 00:03:03,700
We finished executing line 25,

61
00:03:03,700 --> 00:03:07,020
so that's why we see the quantity
variable showing up down here.

62
00:03:08,060 --> 00:03:12,280
This list of variables also shows
the current value of each variable.

63
00:03:12,280 --> 00:03:15,850
We can also verify that the quantity
variable has a value of 3,

64
00:03:15,850 --> 00:03:17,030
which we assigned up here.

65
00:03:18,090 --> 00:03:20,970
We know that the app is
currently paused at this point,

66
00:03:20,970 --> 00:03:22,690
because normally when
you hit the plus button,

67
00:03:22,690 --> 00:03:25,960
it would automatically
update the quantity to be 3.

68
00:03:25,960 --> 00:03:28,030
But since the quantity is still a 2,

69
00:03:28,030 --> 00:03:31,830
we know that it hasn't finished
executing the increment method yet.

70
00:03:31,830 --> 00:03:34,530
We can click step over
to go to the next line.

71
00:03:34,530 --> 00:03:35,745
At this point, the method is done.

72
00:03:35,745 --> 00:03:39,508
And we're not really interested in how
it actually updates the screen, so

73
00:03:39,508 --> 00:03:42,030
let's just hit resume program.

74
00:03:42,030 --> 00:03:44,890
All we care about is that it
actually does update the screen.

75
00:03:44,890 --> 00:03:47,610
If you're interested, you could have
clicked on these other options to look

76
00:03:47,610 --> 00:03:51,040
at more details of how it
actually updates the screen.

77
00:03:51,040 --> 00:03:52,590
At this point,
the app is running normally,

78
00:03:52,590 --> 00:03:54,950
but the debugger is still attached.

79
00:03:54,950 --> 00:03:59,020
So if I hit the plus button again,
it will stop at this breakpoint.

80
00:03:59,020 --> 00:04:02,900
If I want to detach the debugger so that
it doesn't always stop on this line when

81
00:04:02,900 --> 00:04:05,690
I hit the plus button, I can just
click on this red stop button.

82
00:04:07,000 --> 00:04:10,240
Now whenever I hit the plus button,
it responds immediately and

83
00:04:10,240 --> 00:04:11,345
updates the value to 3.

84
00:04:12,600 --> 00:04:14,870
Now I want you to try
it on your computer.

85
00:04:14,870 --> 00:04:18,108
Go ahead and add a breakpoint to
the increment and decrement methods.

86
00:04:18,108 --> 00:04:21,394
Then run the app in debug mode,
and then on the device,

87
00:04:21,394 --> 00:04:24,380
try to trigger each
of these breakpoints.

88
00:04:24,380 --> 00:04:27,340
Then step through each line of code,
making sure that the quantity

89
00:04:27,340 --> 00:04:31,130
variable shows up with the right
value in the variables list.

90
00:04:31,130 --> 00:04:34,180
You can click on this play button
to resume execution of the app so

91
00:04:34,180 --> 00:04:35,890
that it runs as normal.

92
00:04:35,890 --> 00:04:38,430
Or you can hit the stop button
to detach the debugger.
