1
00:00:00,160 --> 00:00:02,260
Now that we've got
the fundamentals under our belt,

2
00:00:02,260 --> 00:00:05,010
let's check out some
advanced Groovy features.

3
00:00:05,010 --> 00:00:07,180
The first one is called the closure.

4
00:00:07,180 --> 00:00:10,500
The closure is essentially a different
way of declaring a function.

5
00:00:10,500 --> 00:00:14,580
But a function that can be packaged up,
passed around and assigned to variables.

6
00:00:14,580 --> 00:00:17,400
You declare one just using
curly braces like this.

7
00:00:17,400 --> 00:00:20,940
Closures are so-called because they
also capture variables from their

8
00:00:20,940 --> 00:00:22,330
enclosing environment.

9
00:00:22,330 --> 00:00:26,880
So, this value of foo will
always be one million dollars.

10
00:00:26,880 --> 00:00:31,110
Let's go ahead and try calling,
since myClosure is a function,

11
00:00:31,110 --> 00:00:34,940
we can call it just by putting parenths
after it, let's give it a try.

12
00:00:34,940 --> 00:00:36,530
Awesome, there we go.

13
00:00:36,530 --> 00:00:39,460
We're getting print statements
from inside the closure and

14
00:00:39,460 --> 00:00:42,530
the value of foo is respected
inside the closure.

15
00:00:42,530 --> 00:00:46,940
Unlike normal functions, closures can be
passed around to different variables.

16
00:00:46,940 --> 00:00:50,720
So if we declare bar and set it equal
to myClosure and then declare yet

17
00:00:50,720 --> 00:00:51,950
another variable baz and

18
00:00:51,950 --> 00:00:57,090
set it equal t0 bar, we can then invoke
baz because baz is now a function.

19
00:00:57,090 --> 00:00:58,160
And there we go.

20
00:00:58,160 --> 00:01:02,240
By calling baz, we got the exact
same result as calling myClosure.

21
00:01:02,240 --> 00:01:05,940
All right, let's do some really
tricky stuff, hold on to your hats.

22
00:01:05,940 --> 00:01:08,730
So, closures have a different syntax for
arguments.

23
00:01:08,730 --> 00:01:12,290
You put a comma separated list of your
arguments on the left side of an arrow

24
00:01:12,290 --> 00:01:14,180
and then do whatever you
want with the arguments.

25
00:01:14,180 --> 00:01:17,030
So I hope it's clear that this is
actually a function that doubles

26
00:01:17,030 --> 00:01:17,620
it inputs.

27
00:01:19,050 --> 00:01:22,970
The tricky bit is that Gradle allows for
higher order functions.

28
00:01:22,970 --> 00:01:26,840
That is, functions that take as one
of their inputs another function.

29
00:01:26,840 --> 00:01:29,030
For example, here we have applyTwice.

30
00:01:29,030 --> 00:01:32,090
Its first argument is a function and
its second argument is just some

31
00:01:32,090 --> 00:01:34,000
argument to be passed
through that function.

32
00:01:34,000 --> 00:01:38,620
And what it returns is function
applied twice to that argument.

33
00:01:38,620 --> 00:01:40,180
Let's check out an example.

34
00:01:40,180 --> 00:01:45,900
If we set foo equal to 5 and
then we apply doubleIt twice to foo.

35
00:01:45,900 --> 00:01:47,940
Well, let's see what we get.

36
00:01:47,940 --> 00:01:50,800
Before we run it, see if you can figure
out what it's going to be ahead of time.

37
00:01:50,800 --> 00:01:55,800
Well, let's see, five doubled is ten and
then ten doubled is 20.

38
00:01:55,800 --> 00:01:56,710
Awesome.

39
00:01:56,710 --> 00:01:59,320
Let's talk about lists in Groovy.

40
00:01:59,320 --> 00:02:03,470
Groovy allows for a super simple list
literal syntax and also allows for

41
00:02:03,470 --> 00:02:05,890
some very sophisticated list processing.

42
00:02:05,890 --> 00:02:09,410
For example, we can execute
a closure for each item in a list.

43
00:02:09,410 --> 00:02:10,810
We simply define our closure.

44
00:02:10,810 --> 00:02:12,470
In this case,
it's just printing out each item.

45
00:02:12,470 --> 00:02:16,160
And then we call myList.each and
then our closure.

46
00:02:16,160 --> 00:02:17,080
Let's see what this does.

47
00:02:18,400 --> 00:02:19,580
And there we go.

48
00:02:19,580 --> 00:02:22,100
Each item in our list gets printed out.

49
00:02:22,100 --> 00:02:24,910
There's a couple things we can do
here to make our syntax a little bit

50
00:02:24,910 --> 00:02:26,230
more compact.

51
00:02:26,230 --> 00:02:29,550
The first thing is we can
define our closure in line.

52
00:02:29,550 --> 00:02:32,100
Note we don't have any
parentheses around here because

53
00:02:32,100 --> 00:02:34,080
Groovy syntax is awesome.

54
00:02:34,080 --> 00:02:36,620
Also, if a closure is
only taking one argument,

55
00:02:36,620 --> 00:02:38,860
then by default that
argument is just called it.

56
00:02:39,870 --> 00:02:41,610
So let's try running this.

57
00:02:41,610 --> 00:02:44,380
And there we go,
does exactly what we expect.

58
00:02:44,380 --> 00:02:46,450
Let's talk about classes in Groovy.

59
00:02:46,450 --> 00:02:48,820
Groovy has a simplified syntax for
creating classes, but

60
00:02:48,820 --> 00:02:51,850
the classes themselves
are essentially Java under the hood.

61
00:02:51,850 --> 00:02:53,380
So, here we've got a class.

62
00:02:53,380 --> 00:02:56,500
It's got a member variable,
it's got a method.

63
00:02:56,500 --> 00:02:58,800
We can create a new one,
just how you're used to from Java,

64
00:02:58,800 --> 00:03:00,690
and then we can ask it
to print its greeting.

65
00:03:00,690 --> 00:03:03,870
We can also change the greeting and
ask it to print that greeting again.

66
00:03:03,870 --> 00:03:06,160
Groovy automatically creates getters and
setters for

67
00:03:06,160 --> 00:03:07,770
all of your member variables.

68
00:03:07,770 --> 00:03:09,360
Let's give this a try.

69
00:03:09,360 --> 00:03:10,850
And our outputs are just as we expect.

70
00:03:10,850 --> 00:03:13,880
First printing the default greeting
then after we've customized it,

71
00:03:13,880 --> 00:03:15,570
it prints the custom greeting.

72
00:03:15,570 --> 00:03:18,460
Closures can have a delegate object.

73
00:03:18,460 --> 00:03:20,980
Let's check out this
closure we've created here.

74
00:03:20,980 --> 00:03:23,950
It's trying to assign to
a variable called greeting.

75
00:03:23,950 --> 00:03:27,140
But greetingClosure doesn't have
a variable called greeting.

76
00:03:27,140 --> 00:03:30,320
Actually, the only place the greeting is
defined is as a member variable of this

77
00:03:30,320 --> 00:03:31,390
class.

78
00:03:31,390 --> 00:03:35,880
What we can do is set the delegate
of greetingClosure to be an instance

79
00:03:35,880 --> 00:03:37,390
of GroovyGreeter.

80
00:03:37,390 --> 00:03:40,570
And now, greeting closure can
access the member variables and

81
00:03:40,570 --> 00:03:43,780
methods of that instance
of GroovyGreeter.

82
00:03:43,780 --> 00:03:47,560
So if all goes well,
when we invoke greetingClosure,

83
00:03:47,560 --> 00:03:50,110
after setting its delegate
to myGroovyGreeter,

84
00:03:50,110 --> 00:03:53,110
it should be able to set the greeting
and print the greeting just fine.

85
00:03:53,110 --> 00:03:54,500
Let's give it a try.

86
00:03:54,500 --> 00:03:55,000
There we go.

87
00:03:55,000 --> 00:03:58,565
We have successfully changed
the greeting inside the instance of

88
00:03:58,565 --> 00:04:00,760
GroovyGreeter from a closure.

89
00:04:00,760 --> 00:04:04,410
Well congrats on completing
our whirlwind tour of Groovy.

90
00:04:04,410 --> 00:04:06,240
I know that was a lot to cover.

91
00:04:06,240 --> 00:04:08,950
Fortunately there are a ton of
resources out there to help you.

92
00:04:08,950 --> 00:04:12,360
We've linked a bunch in the instructor
notes and I strongly recommend

93
00:04:12,360 --> 00:04:16,019
checking out this demo again in
the sample code provided with the class.
