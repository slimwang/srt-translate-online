1
00:00:00,000 --> 00:00:03,000
I'm going to discuss one other non-solution.

2
00:00:03,000 --> 00:00:08,000
We'll call this one #0B, which is to use a trusted third party.

3
00:00:08,000 --> 00:00:12,000
Here is the idea, that we have some very, very trustworthy place,

4
00:00:12,000 --> 00:00:14,000
and we'll make it green.

5
00:00:14,000 --> 00:00:16,000
People trust things that are green.

6
00:00:16,000 --> 00:00:19,000
We have this very trusty place called TrustyKeys,

7
00:00:19,000 --> 00:00:25,000
and TrustyKeys has a shared secret with each individual in the network.

8
00:00:25,000 --> 00:00:27,000
Now if Alice and Bob want to communicate,

9
00:00:27,000 --> 00:00:30,000
the protocol is Alice sends a message to TrustyKeys

10
00:00:30,000 --> 00:00:33,000
that says she wants to communicate with Bob.

11
00:00:33,000 --> 00:00:35,000
That's step 1 of the protocol.

12
00:00:35,000 --> 00:00:38,000
What TrustyKeys will do is generate some new key,

13
00:00:38,000 --> 00:00:42,000
some new secret key, and we'll call that KAB

14
00:00:42,000 --> 00:00:45,000
because it's for Alice to communicate with Bob.

15
00:00:45,000 --> 00:00:49,000
In step 3, TrustyKeys will send the new key to both Alice and Bob,

16
00:00:49,000 --> 00:00:54,000
and it will send it encrypted using the key that's already shared between those 2 parties.

17
00:00:54,000 --> 00:01:00,000
What it sends to Bob is the encryption using KB, the shared key between

18
00:01:00,000 --> 00:01:05,000
Bob and TrustyKeys of something that says Alice's name

19
00:01:05,000 --> 00:01:07,000
concatenated with the actual key.

20
00:01:07,000 --> 00:01:10,000
And what gets sent to Alice is encrypted with KA,

21
00:01:10,000 --> 00:01:15,000
the shared key between Alice and TrustyKeys and the name Bob

22
00:01:15,000 --> 00:01:17,000
along with KAB.

23
00:01:17,000 --> 00:01:20,000
At this point, both Alice and Bob know KAB

24
00:01:20,000 --> 00:01:25,000
and can communicate securely using KAB to encrypt messages between them.

25
00:01:25,000 --> 00:01:29,000
The quiz, to see if you understand third party key distribution,

26
00:01:29,000 --> 00:01:31,000
what could go wrong with this protocol?

27
00:01:31,000 --> 00:01:34,000
The choices are TrustyKeys can read all the messages that happen between

28
00:01:34,000 --> 00:01:37,000
A and B over their encrypted channel.

29
00:01:37,000 --> 00:01:42,000
TrustyKeys can impersonate any customer that shares the key with TrustyKeys,

30
00:01:42,000 --> 00:01:46,000
and some evil party C could tamper with messages in step 3

31
00:01:46,000 --> 00:01:49,000
to steal the key AB and set up a different key between

32
00:01:49,000 --> 00:01:51,000
Alice and Bob and then steal their traffic.
