1
00:00:00,140 --> 00:00:03,500
Let's take everything away except our picture of the prototype relationship

2
00:00:03,500 --> 00:00:07,640
between these two objects and consider this relationship just on its own.

3
00:00:07,640 --> 00:00:09,390
If this behavior was useful to us for

4
00:00:09,390 --> 00:00:13,280
making the rose object capable of resembling the gold object,

5
00:00:13,280 --> 00:00:16,920
are there other objects in JavaScript that might make use of this mechanism?

6
00:00:16,920 --> 00:00:20,910
For example, does gold delegate its own field lookup somewhere?

7
00:00:20,910 --> 00:00:22,140
In fact it does.

8
00:00:22,140 --> 00:00:25,370
There is a top level object that every JavaScript object

9
00:00:25,370 --> 00:00:27,180
eventually delegates to.

10
00:00:27,180 --> 00:00:30,650
This is where all the basic methods are provided for all objects.

11
00:00:30,650 --> 00:00:35,140
We call it the object prototype because it provides the shared properties of

12
00:00:35,140 --> 00:00:37,680
all objects in the entire system.

13
00:00:37,680 --> 00:00:41,470
That way, when you ask an object for its dot two string property,

14
00:00:41,470 --> 00:00:45,400
you get access to a function that can do the appropriate work.

15
00:00:45,400 --> 00:00:48,880
Once you've access the function, you can immediately call it.

16
00:00:48,880 --> 00:00:52,810
And the object that you did the property look up on will appear to the left of

17
00:00:52,810 --> 00:00:55,470
the dot at that functions call time.

18
00:00:55,470 --> 00:00:59,710
Thanks to the way that the parameter this works, the shared function will work

19
00:00:59,710 --> 00:01:05,330
as expected, with the this keyword bound to the rose object, even though

20
00:01:05,330 --> 00:01:09,720
the .toString method was technically stored way up on the object prototype
