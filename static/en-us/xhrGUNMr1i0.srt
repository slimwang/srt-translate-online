1
00:00:00,350 --> 00:00:04,908
So now that you've seen a full examples
of contract classes, let's make one for

2
00:00:04,908 --> 00:00:05,721
our pets app.

3
00:00:05,721 --> 00:00:09,353
So here's the database
schema that we came up with.

4
00:00:09,353 --> 00:00:14,699
So the name of the table is one
called pets, and the column names for

5
00:00:14,699 --> 00:00:19,298
that table are id, name,
breed, gender, and weight.

6
00:00:19,298 --> 00:00:23,303
So here are the general steps used for
creating our contract.

7
00:00:23,303 --> 00:00:26,144
But the question now is
where in the program should

8
00:00:26,144 --> 00:00:28,450
we actually create our contract class?

9
00:00:28,450 --> 00:00:31,327
Generally, we organize our
code by making packages.

10
00:00:31,327 --> 00:00:34,235
So packages are groups
of related Java classes.

11
00:00:34,235 --> 00:00:38,159
And when we first make our application
we define a package that can be found at

12
00:00:38,159 --> 00:00:39,336
the top of each class.

13
00:00:39,336 --> 00:00:43,465
So, Android Studio seems that all Java
class files in the same package are in

14
00:00:43,465 --> 00:00:44,441
the same folder.

15
00:00:44,441 --> 00:00:45,397
So as shown here.

16
00:00:45,397 --> 00:00:48,707
And the name of the package is
also the name of the folder.

17
00:00:48,707 --> 00:00:52,437
So this name here
com.example.android.pets is the name of

18
00:00:52,437 --> 00:00:53,301
the package.

19
00:00:53,301 --> 00:00:56,558
Since we're going to be working on
a bunch of classes that have to do with

20
00:00:56,558 --> 00:00:58,205
data, let's make a data package.

21
00:00:58,205 --> 00:01:02,397
We'll do this to separate the classes
that have data-specific functionality

22
00:01:02,397 --> 00:01:03,907
from the activity classes.

23
00:01:03,907 --> 00:01:07,820
So in order to make a package, it's
really the same as making a new folder.

24
00:01:07,820 --> 00:01:12,959
So in Android Studio, under our
package let's go to right-click,

25
00:01:12,959 --> 00:01:15,447
new, and then hover to package.

26
00:01:15,447 --> 00:01:18,184
And let's name this package data.

27
00:01:18,184 --> 00:01:23,081
Right, so I decided to create a package
named data under our existing package.

28
00:01:23,081 --> 00:01:27,452
Now, inside our data package I
want to create a new Java class and

29
00:01:27,452 --> 00:01:29,031
name it PetContract.

30
00:01:29,031 --> 00:01:33,839
So I'm going to right click data,
new, Java class, and

31
00:01:33,839 --> 00:01:36,776
I'm going to name it PetContract.

32
00:01:36,776 --> 00:01:40,498
So I'm going to modify this header and
make our contract a final class,

33
00:01:40,498 --> 00:01:41,922
that can't be extended.

34
00:01:41,922 --> 00:01:45,506
And that's because it's just a class for
providing constants, and

35
00:01:45,506 --> 00:01:49,106
we won't need to extend or
implement anything for this outer class.

36
00:01:49,106 --> 00:01:51,254
All right, so now that we have
the start to our contract.

37
00:01:51,254 --> 00:01:55,144
I'll leave the task of completing the
rest of the contract to you in the next

38
00:01:55,144 --> 00:01:55,773
exercise.

39
00:01:55,773 --> 00:01:57,947
Remember to use the schema
that we defined.

40
00:01:57,947 --> 00:02:01,632
Also make an inner class for
each table as well as the constants for

41
00:02:01,632 --> 00:02:03,310
each of the column headings.

42
00:02:03,310 --> 00:02:04,700
Now, one additional hint.

43
00:02:04,700 --> 00:02:08,939
So contract classes often contain
constants associated with the database,

44
00:02:08,939 --> 00:02:11,099
and so remember to add those in as well.

45
00:02:11,099 --> 00:02:12,529
And what I mean by that is,

46
00:02:12,529 --> 00:02:15,981
let's take a look back at
the headphones example from before.

47
00:02:15,981 --> 00:02:20,788
So from the schema of our headphones
example, we might generate a store

48
00:02:20,788 --> 00:02:25,204
contract specific for that database and
it might look like this.

49
00:02:25,204 --> 00:02:29,869
So in addition to the basic structure of
the table, which includes the table name

50
00:02:29,869 --> 00:02:33,713
and the column names you might
store some additional constants and

51
00:02:33,713 --> 00:02:35,308
those are shown down here.

52
00:02:35,308 --> 00:02:38,357
So these should be the possible
styles of our headphones.

53
00:02:38,357 --> 00:02:42,768
Now remember in lesson one we discussed
the benefits of being able to map

54
00:02:42,768 --> 00:02:45,206
numbers to values into your database.

55
00:02:45,206 --> 00:02:48,773
Such as here in the headphones example
we've mapped headphone styles to

56
00:02:48,773 --> 00:02:50,238
different integer numbers.

57
00:02:50,238 --> 00:02:53,550
So we can give the styles
these constant names, and

58
00:02:53,550 --> 00:02:55,715
then store them in our contract.

59
00:02:55,715 --> 00:02:59,370
So the reason I bring this up,
this storing constants in our

60
00:02:59,370 --> 00:03:03,844
contract Is because we'll have
a similar need in our pets application.

61
00:03:03,844 --> 00:03:05,852
So if we go back to our pets example.

62
00:03:05,852 --> 00:03:09,528
So in our pets app, we allow our
pets to have one of three genders.

63
00:03:09,528 --> 00:03:13,346
So one specifying male,
two specifying female and

64
00:03:13,346 --> 00:03:16,113
zero specifying an unknown gender.

65
00:03:16,113 --> 00:03:19,756
Now, instead of putting the numbers
directly in here It'd be better if we

66
00:03:19,756 --> 00:03:21,537
have constants for these numbers.

67
00:03:21,537 --> 00:03:24,112
Which we can store in
the contract class.

68
00:03:24,112 --> 00:03:25,744
So with that information in mind,

69
00:03:25,744 --> 00:03:28,405
I'll leave implementing
the contract class up to you.

70
00:03:28,405 --> 00:03:29,941
Now best of luck.

71
00:03:29,941 --> 00:03:34,930
Now for this exercise, I'll adhere the
following conventions listed in a text

72
00:03:34,930 --> 00:03:37,694
above this video in order
to make our pet up.

73
00:03:37,694 --> 00:03:39,283
And I've listed them here.

74
00:03:39,283 --> 00:03:41,490
So remember the name of the table.

75
00:03:41,490 --> 00:03:44,699
We have a single table,
it's called pets,

76
00:03:44,699 --> 00:03:49,655
and it has five columns, id,
name, gender, breed, and weight.

77
00:03:49,655 --> 00:03:52,435
In order to create that contract class,

78
00:03:52,435 --> 00:03:57,926
we'll first have an outer class that's
named something, or BlankContract.

79
00:03:57,926 --> 00:04:02,035
Secondly, there'll be an inner
class named BlankEntry for

80
00:04:02,035 --> 00:04:03,975
each table in the database.

81
00:04:03,975 --> 00:04:08,082
And each of these inner classes will
implement the BaseColumns class.

82
00:04:08,082 --> 00:04:12,855
Third, the string constants for the
table names and each of the headings or

83
00:04:12,855 --> 00:04:15,672
column names should
exist in the contract.

84
00:04:15,672 --> 00:04:20,853
And lastly, specifically for
this use case we'll also need to

85
00:04:20,853 --> 00:04:27,126
create constants for each gender and
use them as appropriate in each class.

86
00:04:27,126 --> 00:04:30,721
After having created the contract,
I want you to go ahead and

87
00:04:30,721 --> 00:04:32,280
answer these questions.

88
00:04:32,280 --> 00:04:35,307
So first, how many constants
will you need to make for

89
00:04:35,307 --> 00:04:37,068
the columns in the pets table?

90
00:04:37,068 --> 00:04:40,056
And that's including the id column.

91
00:04:40,056 --> 00:04:44,715
Secondly, how many constants
will there be for gender?

92
00:04:44,715 --> 00:04:49,259
Next, the gender constants
should be what type of data?

93
00:04:49,259 --> 00:04:54,344
Should it be a string,
integer or boolean.

94
00:04:54,344 --> 00:04:55,257
And lastly,

95
00:04:55,257 --> 00:05:00,488
where will you use the gender constants
in the app besides in the contract?

96
00:05:00,488 --> 00:05:05,081
Will they show up in the EditorActivity,
the CatalogActivity,

97
00:05:05,081 --> 00:05:09,849
maybe the AndroidManifest file,
or maybe even the strings.xml?
