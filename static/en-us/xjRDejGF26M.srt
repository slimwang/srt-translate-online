1
00:00:00,280 --> 00:00:05,160
We said already that is only one of
the two ways to do cohe snoopingrence.

2
00:00:05,160 --> 00:00:08,100
The other way is
directory-based coherence.

3
00:00:08,100 --> 00:00:12,240
So let's first see why do we even
want directory-based coherence?

4
00:00:12,240 --> 00:00:14,350
What's wrong with snooping?

5
00:00:14,350 --> 00:00:19,320
In snooping, we had to broadcast
all of the requests we make so

6
00:00:19,320 --> 00:00:21,220
that others can see them.

7
00:00:21,220 --> 00:00:24,770
And also to establish ordering, for
example, for writes, we need to

8
00:00:24,770 --> 00:00:28,760
establish the ordering so that we can
obey the third coherence property.

9
00:00:28,760 --> 00:00:33,000
But that means that there needs
to be a single bus on which

10
00:00:33,000 --> 00:00:37,940
all of the requests from all of
the cores go, both cache misses and

11
00:00:37,940 --> 00:00:42,720
also coherence requests that are just
sending out invalidations and so on.

12
00:00:42,720 --> 00:00:47,330
So the bus that we were using for
broadcast becomes a bottleneck, and

13
00:00:47,330 --> 00:00:51,020
as a result,
snooping does not really work well

14
00:00:51,020 --> 00:00:53,360
if we have more than something
like eight to 16 cores.

15
00:00:54,500 --> 00:00:58,080
Beyond that point, most of the time
the cores are just standing waiting for

16
00:00:58,080 --> 00:01:00,400
the bus to put requests on it, so

17
00:01:00,400 --> 00:01:04,290
really we get no further
benefit from additional course.

18
00:01:04,290 --> 00:01:07,720
So what we need to solve this
bottleneck is a non-broadcast

19
00:01:07,720 --> 00:01:10,770
network over which we're
going to send our requests.

20
00:01:10,770 --> 00:01:15,365
So that many requests could be going
on at the same time, but then we have

21
00:01:15,365 --> 00:01:19,505
the problems of how do we observe
those requests that we need to see.

22
00:01:19,505 --> 00:01:23,615
So, for example, if we are in a shared
state, it had better be that when

23
00:01:23,615 --> 00:01:26,675
there is a write by somebody else,
we observe that write so

24
00:01:26,675 --> 00:01:30,135
that we can move to the invalid
state to avoid incoherence.

25
00:01:30,135 --> 00:01:33,755
And also, how do we decide
what the ordering is for

26
00:01:33,755 --> 00:01:35,505
requests that go to the same block?

27
00:01:35,505 --> 00:01:40,450
So, for example, how do we decide what's
the ordering between writes done at

28
00:01:40,450 --> 00:01:45,700
different cores, if this request can be
made on different parts of the network

29
00:01:45,700 --> 00:01:49,070
and the structure that does
this is called a directory.
