1
00:00:00,624 --> 00:00:03,344
The next line, line 6.

2
00:00:03,344 --> 00:00:06,514
The main class starts, which is called BlankCount.

3
00:00:06,514 --> 00:00:11,463
And [COUGH] after that there's two constants that are being defined.

4
00:00:11,463 --> 00:00:14,180
And one is the blank the other one is a sentinel.

5
00:00:14,180 --> 00:00:18,880
And then we move to the main, which is actually the main the main body of

6
00:00:18,880 --> 00:00:21,747
the class and also the main method for the program.

7
00:00:21,747 --> 00:00:26,555
Everything is included into a try catch block, and

8
00:00:26,555 --> 00:00:32,970
the first instruction is actually to initialize the InputStreamReader, ISR,

9
00:00:32,970 --> 00:00:39,055
with a new InputStreamReader and takes the system in stream as a parameter.

10
00:00:39,055 --> 00:00:42,324
>> So I believe on that line, there's also a problem because that

11
00:00:42,324 --> 00:00:45,532
violates code the interface rather than implementation, so

12
00:00:45,532 --> 00:00:49,557
they actually have the implementation class on the left, left-hand side.

13
00:00:49,557 --> 00:00:51,046
It should be declared as the ab-,.

14
00:00:51,046 --> 00:00:53,074
. as the abstract interface and

15
00:00:53,074 --> 00:00:58,027
then the concrete implementation on the right-hand side with the new.

16
00:00:58,027 --> 00:00:59,057
>> So, now, other people agree?

17
00:00:59,057 --> 00:00:59,752
>> Yeah, I agree.

18
00:00:59,752 --> 00:01:00,354
Yeah.

19
00:01:00,354 --> 00:01:00,968
Bob’s right.

20
00:01:00,968 --> 00:01:05,829
>> Okay then there’s the code declares two integers next and

21
00:01:05,829 --> 00:01:11,088
count, and next is going to be use the as the next character in sentence, and

22
00:01:11,088 --> 00:01:15,312
count is going to be used to count the number of blank counters,

23
00:01:15,312 --> 00:01:18,370
which is the main goal of the, of this class.

24
00:01:18,370 --> 00:01:20,540
>> I'm glad you stopped telling us that there's semicolons at

25
00:01:20,540 --> 00:01:21,630
the end of each line.

26
00:01:21,630 --> 00:01:22,460
It's that helps.

27
00:01:22,460 --> 00:01:23,519
>> Well I think it's important, correct?

28
00:01:23,519 --> 00:01:25,041
>> So before the semicolons though,

29
00:01:25,041 --> 00:01:28,461
shouldn't we initialize these values like we have the ISR variable or both?

30
00:01:28,461 --> 00:01:31,998
>> [CROSSTALK] Yeah we should initialize. >> All right, go.

31
00:01:31,998 --> 00:01:35,934
>> Should we decide whether to character or an int?

32
00:01:35,934 --> 00:01:37,644
The comment says character.

33
00:01:37,644 --> 00:01:39,464
>> That's true. >> [CROSSTALK] Operation says int.

34
00:01:39,464 --> 00:01:42,090
>> Yeah, that, that's excellent to pick that up.

35
00:01:42,090 --> 00:01:43,706
>> Yeah. >> That's that comment problem again.

36
00:01:43,706 --> 00:01:47,379
If you'd done slash star, maybe you would had written it right the first time.

37
00:01:48,610 --> 00:01:51,090
>> Should, should we go for comments on the right side of the?

38
00:01:51,090 --> 00:01:52,770
Or should we put them above?

39
00:01:52,770 --> 00:01:55,590
If they get their own line, maybe it'd help us read it better.

40
00:01:55,590 --> 00:02:00,250
I don't know. I, this is, this is going back to, to line four up above.

41
00:02:00,250 --> 00:02:02,410
I, I don't, I'm not quite sure when we,

42
00:02:02,410 --> 00:02:04,820
when we want them beside the code, when we want them above the code?

43
00:02:04,820 --> 00:02:06,690
>> Well, there is nothing in the standard that we use

44
00:02:06,690 --> 00:02:08,050
in the company, but that's fine.

45
00:02:08,050 --> 00:02:09,310
I mean, if you want to pick a,

46
00:02:09,310 --> 00:02:11,589
you know, a way to do it >> We could make a standard.

47
00:02:11,589 --> 00:02:12,491
>> [CROSSTALK] That's fine. We can make a standard.

48
00:02:12,491 --> 00:02:13,139
>> We can make a standard right now.

49
00:02:13,139 --> 00:02:15,472
>> I'd like a standard, yeah, mm-hm.

50
00:02:15,472 --> 00:02:16,846
>> So what's, what's the standard?

51
00:02:16,846 --> 00:02:21,470
We going to go slash, slash all the way or slash star?

52
00:02:21,470 --> 00:02:22,850
Slash star seems a little more robust.

53
00:02:22,850 --> 00:02:24,030
We can, you know?

54
00:02:24,030 --> 00:02:26,980
You don't have to use as many slash slashes.

55
00:02:26,980 --> 00:02:31,210
Javadocs uses slash star kind of, that kind of structure when you do.

56
00:02:31,210 --> 00:02:33,266
>> I thought it was kind of old fashioned but that's okay.

57
00:02:33,266 --> 00:02:34,973
We can use slash star. >> What's wrong with old fashioned?

58
00:02:34,973 --> 00:02:36,856
[LAUGH]. >> [LAUGH].

59
00:02:36,856 --> 00:02:38,513
>> Okay, Dr. Bud continue please.
