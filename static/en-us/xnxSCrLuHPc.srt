1
00:00:00,000 --> 00:00:02,000
Okay, so what I'd like to do now

2
00:00:02,000 --> 00:00:05,000
is I'm going to go into Python, and we're going to play with

3
00:00:05,000 --> 00:00:08,000
a Python library for actually making an HTTP request

4
00:00:08,000 --> 00:00:10,000
so you can see how that works,

5
00:00:10,000 --> 00:00:12,000
and then prepare for some quizzes.

6
00:00:12,000 --> 00:00:15,000
So in Python we have a library called urllib2.

7
00:00:15,000 --> 00:00:18,000
There's also a urllib1,

8
00:00:18,000 --> 00:00:21,000
and this is kind of the evolution of Python in front of your here.

9
00:00:21,000 --> 00:00:23,000
We're going to use 2, for the most part.

10
00:00:23,000 --> 00:00:26,000
urllib1 has a few handy functions of its own,

11
00:00:26,000 --> 00:00:29,000
and when we use those, I'll include those in documents.

12
00:00:29,000 --> 00:00:33,000
But anyway, urllib2 has a function in it called url open,

13
00:00:33,000 --> 00:00:36,000
and we can give a url here to download.

14
00:00:36,000 --> 00:00:38,000
So let's say I'm downloading google.com.

15
00:00:38,000 --> 00:00:40,000
Actually, I need to make sure I save this.

16
00:00:40,000 --> 00:00:43,000
I usually save it in a variable called P for page.

17
00:00:43,000 --> 00:00:45,000
Probably not even the right concept, but that's my habit.

18
00:00:45,000 --> 00:00:47,000
I always use P when I use url open.

19
00:00:47,000 --> 00:00:50,000
So if you run this, we're going to get this P object,

20
00:00:50,000 --> 00:00:52,000
which is actually, basically, a file object.

21
00:00:52,000 --> 00:00:55,000
In Python, file objects--

22
00:00:55,000 --> 00:00:59,000
basically, what a file object is, is an object that has a read method.

23
00:00:59,000 --> 00:01:01,000
And you can call a read on there to get the contents.

24
00:01:01,000 --> 00:01:04,000
So I'm going to show the contents in C and call read on P.

25
00:01:04,000 --> 00:01:07,000
Okay, we called url open on this url,

26
00:01:07,000 --> 00:01:10,000
storing it in this variable P,

27
00:01:10,000 --> 00:01:13,000
and then we called read on the response

28
00:01:13,000 --> 00:01:15,000
and stored it in a variable called C.

29
00:01:15,000 --> 00:01:17,000
Now, if we were to evaluate C, a wall of text,

30
00:01:17,000 --> 00:01:19,000
which is what we expect.

31
00:01:19,000 --> 00:01:21,000
So this is actually Google's front page.

32
00:01:21,000 --> 00:01:24,000
If you remember early in this class,

33
00:01:24,000 --> 00:01:27,000
we basically accomplished the same thing

34
00:01:27,000 --> 00:01:30,000
using telnet or curl.

35
00:01:30,000 --> 00:01:32,000
You can also do the same thing in Python.

36
00:01:32,000 --> 00:01:34,000
So now we have this variable C that has this whole response in it,

37
00:01:34,000 --> 00:01:36,000
and we can manipulate it in our programs,

38
00:01:36,000 --> 00:01:39,000
which is what we're going to be doing a lot of.

39
00:01:39,000 --> 00:01:42,000
Let's take a peek at what we have on that P object.

40
00:01:42,000 --> 00:01:44,000
We can use the dir built-in function in Python

41
00:01:44,000 --> 00:01:46,000
to examine an object.

42
00:01:46,000 --> 00:01:49,000
So now we can see the methods and attributes on our P object,

43
00:01:49,000 --> 00:01:51,000
and we can see a couple of them that are probably interesting to us--

44
00:01:51,000 --> 00:01:54,000
headers, for one, and get url is another.

45
00:01:54,000 --> 00:01:56,000
Get code is probably the status code.

46
00:01:56,000 --> 00:01:58,000
This is generally how I work.

47
00:01:58,000 --> 00:02:00,000
When you don't know a library super well,

48
00:02:00,000 --> 00:02:02,000
you can use dir to kind of examine the object.

49
00:02:02,000 --> 00:02:05,000
So let's take a peek at a couple of these.

50
00:02:05,000 --> 00:02:07,000
We've also got a url one. Let's see what's in there.

51
00:02:07,000 --> 00:02:10,000
That's the url we requested. No big surprise.

52
00:02:10,000 --> 00:02:12,000
We can look at the headers.

53
00:02:12,000 --> 00:02:14,000
So this is an HTTP message instance.

54
00:02:14,000 --> 00:02:16,000
Now, I happen to know that this is a dictionary,

55
00:02:16,000 --> 00:02:19,000
and dictionaries have a function on them

56
00:02:19,000 --> 00:02:21,000
called items.

57
00:02:21,000 --> 00:02:24,000
If we were to run items on this in Python,

58
00:02:24,000 --> 00:02:26,000
this is what you can call in any dictionary--items--

59
00:02:26,000 --> 00:02:29,000
to view the keys and the values,

60
00:02:29,000 --> 00:02:31,000
and it will actually print them, generally, nicely for you.

61
00:02:31,000 --> 00:02:33,000
We can see all of the headers we got back from Google.

62
00:02:33,000 --> 00:02:36,000
This is an actual dictionary, so we can say p.headers,

63
00:02:36,000 --> 00:02:39,000
for example, content type,

64
00:02:39,000 --> 00:02:41,000
and we can see the content type that we got back from Google.

65
00:02:41,000 --> 00:02:44,000
It's actually kind of interesting; we're getting an ISO charset,

66
00:02:44,000 --> 00:02:47,000
which is--I was expecting UTF 8,

67
00:02:47,000 --> 00:02:49,000
but, hey, you learn things every day.

68
00:02:49,000 --> 00:02:52,000
So in the future, especially for your Windows users

69
00:02:52,000 --> 00:02:54,000
who had trouble using telnet,

70
00:02:54,000 --> 00:02:57,000
you can just use urllib and get the same answer.

71
00:02:57,000 --> 00:03:00,000
What I'd like you to do now is play with this library a little bit

72
00:03:00,000 --> 00:03:04,200
in the form of a quiz.
