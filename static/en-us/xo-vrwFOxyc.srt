1
00:00:00,000 --> 00:00:02,000
Okay, so what we're doing here is continuing to dig

2
00:00:02,000 --> 00:00:05,000
into some of the nuances of testing software,

3
00:00:05,000 --> 00:00:07,000
and we're going to keep looking at things that can make testing hard.

4
00:00:07,000 --> 00:00:11,000
The final issue that I want to talk about in this general vein of

5
00:00:11,000 --> 00:00:15,000
things that can complicate testing is what I like to call non-functional inputs,

6
00:00:15,000 --> 00:00:19,000
and these are inputs that affect the operation of a software under test

7
00:00:19,000 --> 00:00:24,000
that have nothing to do with the APIs provided by the software that we're testing

8
00:00:24,000 --> 00:00:28,000
and nothing to do with the APIs that are used by the software that we're testing,

9
00:00:28,000 --> 00:00:30,000
and so what are these non-functional inputs?

10
00:00:30,000 --> 00:00:32,000
Well, they include things like context switches.

11
00:00:32,000 --> 00:00:38,000
What context switches are are switches between different threads of execution

12
00:00:38,000 --> 00:00:40,000
in a multi-threaded software under test.

13
00:00:40,000 --> 00:00:43,000
Now, of course, you shouldn't have to worry about context switches at all

14
00:00:43,000 --> 00:00:45,000
if your software under test only has a single thread,

15
00:00:45,000 --> 00:00:49,000
and the assignments we're going to be working on in this course are single threaded,

16
00:00:49,000 --> 00:00:51,000
but in general it's very common for complex software systems

17
00:00:51,000 --> 00:00:53,000
to convey multiple threads of execution.

18
00:00:53,000 --> 00:00:56,000
And so the issue is that these multiple threads of execution

19
00:00:56,000 --> 00:01:01,000
are scheduled along different processors on the physical machine that we're running on

20
00:01:01,000 --> 00:01:04,000
at different times, and it's the operating system that makes the decisions

21
00:01:04,000 --> 00:01:07,000
about what thread goes on what processor at what time,

22
00:01:07,000 --> 00:01:10,000
and depending on the scheduling of these threads

23
00:01:10,000 --> 00:01:14,000
bugs in the software under test can either be concealed or revealed,

24
00:01:14,000 --> 00:01:17,000
and the problem is that the timing of these context switches

25
00:01:17,000 --> 00:01:20,000
is completely not under the control of our application.

26
00:01:20,000 --> 00:01:22,000
It's under the control of the operating system,

27
00:01:22,000 --> 00:01:25,000
which provides these non-functional inputs, and this makes testing

28
00:01:25,000 --> 00:01:28,000
multi-threaded software actually really, really quite difficult.

29
00:01:28,000 --> 00:01:30,000
Let me give you another example of non-functional inputs.

30
00:01:30,000 --> 00:01:34,000
Some years ago, in the late 1990s, I spent a summer working

31
00:01:34,000 --> 00:01:37,000
at a company that made very, very fast networking hardware,

32
00:01:37,000 --> 00:01:40,000
and this hardware, for example, would let 2 PCs talk at multi-gigabit speeds

33
00:01:40,000 --> 00:01:43,000
using a switch, and so sort of the interesting thing about the software

34
00:01:43,000 --> 00:01:48,000
that we're developing that ran not only on the PC but also on a network card

35
00:01:48,000 --> 00:01:52,000
was that it was completely independent of the TCP/IP stack

36
00:01:52,000 --> 00:01:56,000
that normally provides reliable delivery for machines connected by networks

37
00:01:56,000 --> 00:02:00,000
but also it was supposed to provide reliable delivery of data even when

38
00:02:00,000 --> 00:02:02,000
we had errors in the network.

39
00:02:02,000 --> 00:02:06,000
And so a problem that we faced was this network in fact was extremely reliable.

40
00:02:06,000 --> 00:02:09,000
It would introduce bit errors into the data being transmitted

41
00:02:09,000 --> 00:02:12,000
maybe only once every several hours or maybe even

42
00:02:12,000 --> 00:02:15,000
only every several days, and so what we faced was

43
00:02:15,000 --> 00:02:18,000
a real difficulty in testing the end-to-end reliability software

44
00:02:18,000 --> 00:02:21,000
running on the PCs because the network was so reliable.

45
00:02:21,000 --> 00:02:23,000
And so what we often ended up doing was

46
00:02:23,000 --> 00:02:28,000
we would open up a switch, exposing all of the electrical contacts inside,

47
00:02:28,000 --> 00:02:31,000
and then we would take a key, a metal key,

48
00:02:31,000 --> 00:02:34,000
and run it across the contacts that were exposed

49
00:02:34,000 --> 00:02:36,000
from some of the chips on the inside of the switch.

50
00:02:36,000 --> 00:02:39,000
And what this would do is introduce a mass of number

51
00:02:39,000 --> 00:02:41,000
of very short-lived short circuits inside the switch,

52
00:02:41,000 --> 00:02:44,000
causing a huge number of bit errors causing the software

53
00:02:44,000 --> 00:02:47,000
running on the PCs to have to cope with all of these bit errors.

54
00:02:47,000 --> 00:02:50,000
And of course, either the network would glitch for a moment

55
00:02:50,000 --> 00:02:54,000
and then when it started up the data transfer would resume,

56
00:02:54,000 --> 00:02:57,000
or else it would fail to resume properly, in which case

57
00:02:57,000 --> 00:02:59,000
possibly the software crashed or possibly it delivered erroneous data,

58
00:02:59,000 --> 00:03:01,000
in which case we had some debugging to do.

59
00:03:01,000 --> 00:03:03,000
And so what I like about this example is

60
00:03:03,000 --> 00:03:09,000
we're able to access using this very crude mechanism of running a key across contacts

61
00:03:09,000 --> 00:03:12,000
sort of a deep level of the system and introduce errors

62
00:03:12,000 --> 00:03:16,000
that we weren't able to introduce at any other--at least conveniently--

63
00:03:16,000 --> 00:03:19,000
at any other level of the software stack, and so this, again,

64
00:03:19,000 --> 00:03:21,000
was another kind of non-functional input to the system under test

65
00:03:21,000 --> 99:59:59,999
that by getting control over we were able to perform better testing of the software.
