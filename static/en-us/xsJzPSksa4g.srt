1
00:00:00,420 --> 00:00:01,220
Thanks, Sarah.

2
00:00:01,220 --> 00:00:05,100
Now, I want to merge the coin branch and the master branch together.

3
00:00:05,100 --> 00:00:07,820
After the merge, I'll want the master branch to update and

4
00:00:07,820 --> 00:00:09,690
point to the merged version.

5
00:00:09,690 --> 00:00:12,450
So if I didn't already have the master branch checked out,

6
00:00:12,450 --> 00:00:14,300
I would check it out now.

7
00:00:14,300 --> 00:00:15,750
I'll just verify.

8
00:00:15,750 --> 00:00:18,390
And yes, I am on the master branch already.

9
00:00:18,390 --> 00:00:23,030
I'll run git merge master coins to create a merged version of the two branches.

10
00:00:23,030 --> 00:00:26,630
When I hit enter, my editor pops up so that I can type the commit message for

11
00:00:26,630 --> 00:00:27,970
the merge commit.

12
00:00:27,970 --> 00:00:31,180
Unlike the other commits, this one comes with a default commit message.

13
00:00:31,180 --> 00:00:32,830
Merge branch coins.

14
00:00:32,830 --> 00:00:34,550
I could change it if I want to.

15
00:00:34,550 --> 00:00:37,730
But leaving it like this, makes it clear when I've merged two branches.

16
00:00:37,730 --> 00:00:39,750
So I'll just leave it as is.

17
00:00:39,750 --> 00:00:44,460
So git lets me know that it made the merge and the file gain.jf has changed.

18
00:00:44,460 --> 00:00:47,870
If I run git log, I can see the merge commit.

19
00:00:47,870 --> 00:00:49,990
Now I'll go ahead and test whether this worked.

20
00:00:49,990 --> 00:00:54,270
If it did, I should see both color and coins when I run the code.

21
00:00:54,270 --> 00:00:58,530
Well, I can see that there's color and there's a coin.

22
00:00:58,530 --> 00:01:00,920
It looks like the merge worked correctly.

23
00:01:00,920 --> 00:01:04,080
One thing you might notice though is that the coin is not colorful like

24
00:01:04,080 --> 00:01:05,550
the rest of the game.

25
00:01:05,550 --> 00:01:06,590
That makes sense.

26
00:01:06,590 --> 00:01:09,420
Git only merges the little changes that you make.

27
00:01:09,420 --> 00:01:12,820
And the code to add this coin added a non-colorful version.

28
00:01:12,820 --> 00:01:17,140
Now if I run git log again, I can still see the merge commit and

29
00:01:17,140 --> 00:01:19,210
I can see these commits added by me and Doug.

30
00:01:19,210 --> 00:01:22,222
And there's also some commits by Sarah and

31
00:01:22,222 --> 00:01:24,570
enter with the commits by me and Doug.

32
00:01:24,570 --> 00:01:27,210
Since the commits are sorted by the time they were created.

33
00:01:28,270 --> 00:01:31,210
Now this causes an interesting side effect on git diff.

34
00:01:31,210 --> 00:01:34,550
Let's say, I wanted to view the difference between these two commits.

35
00:01:34,550 --> 00:01:37,320
I could do it and I would see the difference between them, but

36
00:01:37,320 --> 00:01:39,520
this commit is not the parent of this one.

37
00:01:39,520 --> 00:01:43,200
So I wouldn't just see the changes introduced by this commit.

38
00:01:43,200 --> 00:01:44,660
Let's try it out.

39
00:01:44,660 --> 00:01:48,850
Now as you can see, there are quite a few changes in this diff.

40
00:01:48,850 --> 00:01:51,310
But actually, this commit was pretty small.

41
00:01:51,310 --> 00:01:54,030
To see just the changes introduced by this commit,

42
00:01:54,030 --> 00:01:56,110
I'd have to diff it against it's parent.

43
00:01:56,110 --> 00:01:57,779
But how do I know what the parent was?

44
00:01:58,990 --> 00:02:03,400
While git includes a command called git show, which will show you what

45
00:02:03,400 --> 00:02:06,600
changes were introduced by a commit compared to its parent.

46
00:02:06,600 --> 00:02:09,400
So that way, I can see the diff between this commit and

47
00:02:09,400 --> 00:02:11,780
its parent without actually knowing what the parent was.

48
00:02:13,500 --> 00:02:15,010
And now there's a much smaller diff.

49
00:02:16,020 --> 00:02:19,220
Since I don't need the coins branch anymore, I'll delete it using the command

50
00:02:19,220 --> 00:02:22,340
git branch dash d coins, where d stands for delete.

51
00:02:23,460 --> 00:02:27,600
This won't delete the commits in the branch, it will only delete the label.

52
00:02:27,600 --> 00:02:30,070
That could have made the commits hard to find.

53
00:02:30,070 --> 00:02:32,710
But those commits are now reachable from the master branch, so

54
00:02:32,710 --> 00:02:34,220
it's not a problem.

55
00:02:34,220 --> 00:02:37,850
Here you can see git lets me know that I deleted the branch.

56
00:02:37,850 --> 00:02:40,720
To get some practice creating a merge commit, go ahead and

57
00:02:40,720 --> 00:02:43,540
repeat my steps on your own computer if you haven't been following along.

58
00:02:45,250 --> 00:02:46,620
If you're interested,

59
00:02:46,620 --> 00:02:50,130
you can also introduce a new commit making the coin solid and yellow.

60
00:02:50,130 --> 00:02:52,260
But this is optional since you weren't required to

61
00:02:52,260 --> 00:02:53,810
have experience with JavaScript.

62
00:02:54,820 --> 00:02:58,600
If you do want to make the corn solid and yellow, I recommend using git diff and

63
00:02:58,600 --> 00:03:01,250
git show to see what code was introduced in both branches.

64
00:03:02,480 --> 00:03:05,050
Otherwise, the solution video will contain instructions for

65
00:03:05,050 --> 00:03:06,870
how to make this commit if you're curious.

66
00:03:08,190 --> 00:03:10,610
Did you merge the branches on your own computer?

67
00:03:10,610 --> 00:03:12,310
Select the most accurate option
