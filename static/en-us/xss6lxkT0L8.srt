1
00:00:00,000 --> 00:00:04,000
We've been tasked with adding a while loop to our JavaScript interpreter

2
00:00:04,000 --> 00:00:07,000
that works just as it does in Python.

3
00:00:07,000 --> 00:00:14,000
To get acquainted, here's some JavaScript code that writes out 0, 2 and 4.

4
00:00:14,000 --> 00:00:17,000
As you may have guessed, we test the expression

5
00:00:17,000 --> 00:00:24,000
if the expression, which is known as the condition, is true--then we evaluate the loop body.

6
00:00:24,000 --> 00:00:28,000
After evaluating the loop body, we test the conditional expression.

7
00:00:28,000 --> 00:00:33,000
Again, if it's still true, then we evaluate the loop body, and we continue this process

8
00:00:33,000 --> 00:00:40,000
until the conditional expression is false, at which point we continue on after the while loop.

9
00:00:40,000 --> 00:00:45,000
So a while loop is a type of statement that has the keyword while, an expression,

10
00:00:45,000 --> 00:00:48,000
and then a compound statement--a sequence of statements.

11
00:00:48,000 --> 00:00:53,000
In our parse tree, this is where we represented as a tuple, where the first element

12
00:00:53,000 --> 00:00:57,000
is the string while to indicate that this is a while loop.

13
00:00:57,000 --> 00:01:01,000
The second element is the expression--the condition that determines

14
00:01:01,000 --> 00:01:03,000
whether or not we execute the loop body.

15
00:01:03,000 --> 00:01:08,000
The last element of the tuple is the sequence of statements that comprise the loop body.

16
00:01:08,000 --> 00:01:14,000
So while tell you two ways to solve this--the first is going to re-use the Python while,

17
00:01:14,000 --> 00:01:17,000
and the second is going to implement the while loop recursively.

18
00:01:17,000 --> 00:01:22,000
Recall that in a programming language, you can have either a while loop

19
00:01:22,000 --> 00:01:26,000
or recursive calls and still be equally powerful.

20
00:01:26,000 --> 00:01:32,000
And so we're going to use that fact to implement our while with recursion. Here's one solution.

21
00:01:32,000 --> 00:01:37,000
The first two lines, extract the conditional expression and the loop body from the parse tree

22
00:01:37,000 --> 00:01:42,000
and then we simply plug in the conditional expression and the loop body

23
00:01:42,000 --> 00:01:46,000
into a Python while loop--so while the conditional expression is true

24
00:01:46,000 --> 00:01:49,000
we're going to execute the loop body--pretty straightforward.

25
00:01:49,000 --> 00:01:54,000
And here's my recursive solution--the first two lines are copied right out of the Python while

26
00:01:54,000 --> 00:01:59,000
implementation--where we extract the conditional expression and the loop body in the same way.

27
00:01:59,000 --> 00:02:03,000
We then evaluate the truthiness of our conditional expression.

28
00:02:03,000 --> 00:02:08,000
If our conditional expression is true, we execute the statements in the while loop

29
00:02:08,000 --> 00:02:12,000
and then recurs on eval while.

30
00:02:12,000 --> 00:02:16,000
Think about it for a moment, and we'll keep evaluating eval while

31
00:02:16,000 --> 00:02:19,000
until the conditional expression is false under this environment.

32
00:02:19,000 --> 00:02:24,000
When it is false or if it ever is false, we simply don't do anything

33
00:02:24,000 --> 99:59:59,999
which is exactly the same functionality we had with the while loop implementation.
