1
00:00:00,000 --> 00:00:04,000
There's our whole row, and while I'm at it I might as well define a hand.

2
00:00:04,000 --> 00:00:11,000
Now my next target, the next bird to cross off the list is to define a function row_plays,

3
00:00:11,000 --> 00:00:16,000
which takes a hand and a row in this format and return a set of legal plays from the row.

4
00:00:16,000 --> 00:00:21,000
Now, rather than just return legal words, I'm using this notion of a play,

5
00:00:21,000 --> 00:00:27,000
where a play is a pair of location within the row and the word that we want to play.

6
00:00:27,000 --> 00:00:32,000
You can imagine it's going to take the same general approach that we've used before,

7
00:00:32,000 --> 00:00:36,000
start with an empty set, do something to it, and then return the results that we built up.

8
00:00:36,000 --> 00:00:41,000
What is it that we want to do? We want to consider each possible allowable prefix,

9
00:00:41,000 --> 00:00:44,000
and to that we want to add all the suffixes, keeping the words.

10
00:00:44,000 --> 00:00:48,000
Now, prefixes of what? That's the first thing to figure out.

11
00:00:48,000 --> 00:00:52,000
What I'm going to do is enumerate the row--enumerate actually just the good bits.

12
00:00:52,000 --> 00:00:59,000
The row from the first position to the last position, and that tells me I don't want the borders.

13
00:00:59,000 --> 00:01:01,000
I don't want to consider playing on the borders.

14
00:01:01,000 --> 00:01:05,000
I just want to consider playing on the interior of the row.

15
00:01:05,000 --> 00:01:07,000
Enumerate that starting from position number 1.

16
00:01:07,000 --> 00:01:09,000
One would be where the A is.

17
00:01:09,000 --> 00:01:14,000
Now I have an index--a number 1, 2, 3--and I have the square, which is going to be a,

18
00:01:14,000 --> 00:01:17,000
and then an anchor and then an anchor and so on.

19
00:01:17,000 --> 00:01:19,000
Where do I want to consider my rows?

20
00:01:19,000 --> 00:01:23,000
We're going to anchor them on an anchor so I can ask a square an instance of an anchor.

21
00:01:23,000 --> 00:01:26,000
If it is an anchor, then there's two possibilities.

22
00:01:26,000 --> 00:01:29,000
If it's an anchor like this, there's only one allowable prefix.

23
00:01:29,000 --> 00:01:34,000
The prefix which is the letters that are already there just to the left of the anchor.

24
00:01:34,000 --> 00:01:39,000
We want to just consider that one prefix and then add all the suffixes.

25
00:01:39,000 --> 00:01:42,000
If it's an anchor like this one, then there can be many prefixes.

26
00:01:42,000 --> 00:01:47,000
We want all possible prefixes that fit into these spots here,

27
00:01:47,000 --> 00:01:51,000
consider each one of those, and for each one of those consider adding on the suffixes.

28
00:01:51,000 --> 00:01:54,000
What I'm going to do is define a function, legal _prefix,

29
00:01:54,000 --> 00:02:00,000
which gives me a description of the legal prefix that can occur at position i within a row.

30
00:02:00,000 --> 00:02:02,000
There are two possibilities.

31
00:02:02,000 --> 00:02:07,000
I could combine the possibilities into one, but I'm going to have a tuple of two values returned.

32
00:02:07,000 --> 00:02:12,000
I'm going to have legal_prefix return the actual prefix as a string

33
00:02:12,000 --> 00:02:17,000
if there is one, like in this case, and return the maximum size otherwise.

34
00:02:17,000 --> 00:02:23,000
For this anchor here, this would be legal_prefix of one, two, three, four, five, six--

35
00:02:23,000 --> 00:02:27,000
that's for legal_prefix when i = 6.

36
00:02:27,000 --> 00:02:30,000
The result would be that there are now characters to the left.

37
00:02:30,000 --> 00:02:34,000
It'll be the empty string for the first element of the tuples.

38
00:02:34,000 --> 00:02:38,000
The maximum size of the prefix that I'm going to allow is two characters.

39
00:02:38,000 --> 00:02:43,000
Now, if I asked here--that's index number one, two, three, four, five, six, seven, eight, nine--

40
00:02:43,000 --> 00:02:49,000
when i = 9, the result would be that the prefix is BE,

41
00:02:49,000 --> 00:02:55,000
and the maximum size is the same as the minimum size. It's the exact size of 2.

42
00:02:55,000 --> 00:03:01,000
I define legal_prefix in order to tell me what to do next based on the two types of anchors.

43
00:03:01,000 --> 00:03:03,000
Now, I can go back to row plays.

44
00:03:03,000 --> 00:03:08,000
I can call legal_prefix, get my results, and say if there is a prefix,

45
00:03:08,000 --> 00:03:11,000
then I want to add to the letters already on the board.

46
00:03:11,000 --> 00:03:16,000
Otherwise, I have an empty space to the left, and I want to go through all possible prefixes.

47
00:03:16,000 --> 00:03:19,000
Here's what we do if there is a prefix already there.

48
00:03:19,000 --> 00:03:22,000
Now we can calculate the start of our position.

49
00:03:22,000 --> 00:03:27,000
Remember a row play is going to return the starting location of the word.

50
00:03:27,000 --> 00:03:33,000
We can figure that out. It's the i position of the anchor minus the length of the prefix.

51
00:03:33,000 --> 00:03:35,000
In fact, let me go and change this comment here.

52
00:03:35,000 --> 00:03:37,000
I is not very descriptive.

53
00:03:37,000 --> 00:03:39,000
Let's just call that start.

54
00:03:39,000 --> 00:03:41,000
Now we know what the starting location is for the word.

55
00:03:41,000 --> 00:03:43,000
When we find any words we can return that.

56
00:03:43,000 --> 00:03:47,000
Then we go ahead and add suffixes.

57
00:03:47,000 --> 00:03:50,000
With the suffixes, some of the letters are going to come out of the hand.

58
00:03:50,000 --> 00:03:54,000
We're adding suffixes to the prefix that's already there on the board.

59
00:03:54,000 --> 00:03:57,000
Starting in the start location, going through the row,

60
00:03:57,000 --> 00:04:00,000
accumulating the results into the result set,

61
00:04:00,000 --> 00:04:02,000
and then I needed this one more argument.

62
00:04:02,000 --> 00:04:04,000
I actually made a mistake and left this out the first time, and it didn't work.

63
00:04:04,000 --> 00:04:06,000
We'll see in a bit what that's there for.

64
00:04:06,000 --> 00:04:09,000
Now if we have empty space to the left of the anchor,

65
00:04:09,000 --> 00:04:12,000
now we've got to go through all the possible prefixes,

66
00:04:12,000 --> 00:04:14,000
but we already wrote that function--find_prefixes. That's good.

67
00:04:14,000 --> 00:04:17,000
Looks like we're converging. We're not writing that much new stuff.

68
00:04:17,000 --> 00:04:22,000
Now, out of all the possible prefixes for the hand, we only want to look at the ones

69
00:04:22,000 --> 00:04:25,000
that are less than or equal to the maximum size.

70
00:04:25,000 --> 00:04:27,000
If the prefix is too big, it won't fit into the empty spot.

71
00:04:27,000 --> 00:04:30,000
It will run into another word, and we don't want to allow that.

72
00:04:30,000 --> 00:04:32,000
We can calculate the start position again.

73
00:04:32,000 --> 00:04:36,000
Then we do the same thing. We add suffixes. What do we add them to?

74
00:04:36,000 --> 00:04:39,000
We'll the prefix that we just found from the hand.

75
00:04:39,000 --> 00:04:43,000
Since the prefix came from the hand, the remaining letters left in the hand

76
00:04:43,000 --> 00:04:45,000
we have to subtract out those prefix letters.

77
00:04:45,000 --> 00:04:49,000
Here we didn't have to subtract them out, because they prefix letters were already on the board.

78
00:04:49,000 --> 00:04:53,000
We're adding to the prefix from the start, from the row, results are accumulated,

79
00:04:53,000 --> 00:04:55,000
and we have this anchored equals false again.

80
00:04:55,000 --> 00:05:00,000
We're almost there. Just two things left to do--add_suffixes and legal_prefix.

81
00:05:00,000 --> 00:05:04,000
Add_suffixes we had before, but it's going to be a little bit more complicated now,

82
00:05:04,000 --> 00:05:06,000
because we're dealing with the anchors.

83
00:05:06,000 --> 99:59:59,999
Legal_prefix is just a matter of looking to the left and see how much space is there.
