1
00:00:00,070 --> 00:00:01,859
So let's try to define a hash function

2
00:00:01,859 --> 00:00:04,780
that has these properties. And what we want the

3
00:00:04,780 --> 00:00:07,510
hash function to do is to take a string

4
00:00:07,510 --> 00:00:12,010
as its input, we'll call the hash function hash_string,

5
00:00:12,010 --> 00:00:16,604
and it'll produce as output a number between 0

6
00:00:16,604 --> 00:00:21,010
and b-1. So, we also need another input to

7
00:00:21,010 --> 00:00:23,180
our hash string, which is going to be the size

8
00:00:23,180 --> 00:00:25,290
of the hash table. So that'll be the second

9
00:00:25,290 --> 00:00:28,880
input is the size of the hash table, the

10
00:00:28,880 --> 00:00:31,670
number of buckets. What we haven't seen yet, that

11
00:00:31,670 --> 00:00:33,540
we're going to need for this function, is a way

12
00:00:33,540 --> 00:00:37,920
to turn a string into a number. Python provides an

13
00:00:37,920 --> 00:00:41,030
operation to do that. It's called ord as an

14
00:00:41,030 --> 00:00:43,410
ordinal, and what ord takes as it's input is

15
00:00:43,410 --> 00:00:46,920
a one letter string and produces as it's output

16
00:00:46,920 --> 00:00:50,350
a number. And actual mapping between strings and numbers is

17
00:00:50,350 --> 00:00:52,300
not so important. We just want something

18
00:00:52,300 --> 00:00:53,830
that is going to map different string to

19
00:00:53,830 --> 00:00:57,400
different numbers. There's another operator that goes in

20
00:00:57,400 --> 00:01:00,156
the opposite direction that takes in a number,

21
00:01:00,156 --> 00:01:04,690
and outputs the one-letter string that corresponds to

22
00:01:04,690 --> 00:01:07,810
that number. And the property these functions have

23
00:01:07,810 --> 00:01:10,510
is their inverses. That if we take the

24
00:01:10,510 --> 00:01:15,415
character corresponding to the ordinal corresponding to any

25
00:01:15,415 --> 00:01:21,530
one-letter string. We'll call that alpha. What we get as a result is the same

26
00:01:21,530 --> 00:01:23,440
alpha that we passed in. So let's try

27
00:01:23,440 --> 00:01:25,970
a few examples in the python interpreter to

28
00:01:25,970 --> 00:01:30,150
see how ord and chr work. So we'll print ord of a, and

29
00:01:31,560 --> 00:01:36,270
when we run that we see we get the number 97. If we try print ord of capital A.

30
00:01:39,510 --> 00:01:44,020
That's different. We get 65. And if we print ord of B,

31
00:01:46,940 --> 00:01:50,740
we get 66. So, the numbers are sort of sensible.

32
00:01:50,740 --> 00:01:54,810
B is higher than A. The lower case letters have

33
00:01:54,810 --> 00:01:58,210
different ordinals than the upper case. So, if we try

34
00:01:58,210 --> 00:02:00,606
a lower case b, we should expect to get 98.

35
00:02:01,960 --> 00:02:03,730
And that is indeed what we get. And these are

36
00:02:03,730 --> 00:02:06,840
the numbers based on the ASCII character encoding, what

37
00:02:06,840 --> 00:02:09,639
the actual numbers are, are not very important for us,

38
00:02:09,639 --> 00:02:12,010
other than that we get different number for different letters.

39
00:02:12,010 --> 00:02:13,760
So we'll be able to use the results

40
00:02:13,760 --> 00:02:15,980
of ord to make different strings hash to different

41
00:02:15,980 --> 00:02:24,320
values. And just to show that there are inverses. If we do ord of u, and

42
00:02:24,320 --> 00:02:26,420
then chart of that, what we get back

43
00:02:28,280 --> 00:02:31,520
is the single letter string u that we started

44
00:02:31,520 --> 00:02:33,840
with. The limit of ord is it only works

45
00:02:33,840 --> 00:02:37,580
on one-letter strings. If it provided a mapping from

46
00:02:37,580 --> 00:02:40,220
any string to a number that would be useful for a

47
00:02:40,220 --> 00:02:42,910
hash table. Well, then we'd be done. But it doesn't do that.

48
00:02:42,910 --> 00:02:45,770
If we try running it on a multi-letter string, we get

49
00:02:45,770 --> 00:02:49,110
an error. It says that ord expects a single character, but it

50
00:02:49,110 --> 00:02:52,070
got a string of length 7. So we're going to need to

51
00:02:52,070 --> 00:02:55,810
use ord only on single letter strings. So with ord, we have

52
00:02:55,810 --> 00:02:59,850
a way of converting strings to numbers. Converting single character strings

53
00:02:59,850 --> 00:03:03,060
to numbers. The other property we need our hash function to have,

54
00:03:03,060 --> 00:03:07,900
is that our output number is always between 0 and B minus 1. We need it to be in

55
00:03:07,900 --> 00:03:10,520
that range, because we're going to use that to index

56
00:03:10,520 --> 00:03:13,240
the list, to find the bucket where that string belongs.
