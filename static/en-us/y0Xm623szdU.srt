1
00:00:00,300 --> 00:00:04,310
Now that you've seen some Swift types
let's move on to simple operations.

2
00:00:04,310 --> 00:00:06,800
We'll start with comparison operators.

3
00:00:06,800 --> 00:00:10,080
Let's say my little cousin Chloe
gets an allowance every week.

4
00:00:10,080 --> 00:00:13,390
With her allowance she likes to get
ice cream and go to the movies.

5
00:00:14,550 --> 00:00:18,390
By the way, I'm going to use a lot of
if statements and these operations.

6
00:00:18,390 --> 00:00:21,540
For now just become accustomed
to how the if statements look.

7
00:00:21,540 --> 00:00:22,190
And stay tuned for

8
00:00:22,190 --> 00:00:25,350
more practice writing if statements
in the lesson on control flow.

9
00:00:26,380 --> 00:00:30,160
If she gets soft serve for
$1.50 everything is all good.

10
00:00:30,160 --> 00:00:32,770
She can get ice cream and
go to the movies.

11
00:00:34,040 --> 00:00:39,270
But if Chloe goes to the fancy ice
cream place, the calculation changes.

12
00:00:39,270 --> 00:00:43,060
If we wanted to condition on the case
that she has just enough allowance,

13
00:00:43,060 --> 00:00:45,350
we could use the equals operator.

14
00:00:45,350 --> 00:00:48,840
But of course, it makes more sense to
condition on her having greater than or

15
00:00:48,840 --> 00:00:51,160
equal to the combined price.

16
00:00:51,160 --> 00:00:53,510
Now, let's look at
the logical operators.

17
00:00:54,640 --> 00:00:56,970
Here, I've defined some
variables as bools and

18
00:00:56,970 --> 00:00:59,300
allowed the compiler
to infer their type.

19
00:00:59,300 --> 00:01:02,650
When conditioning on a bool,
you just type the variable name.

20
00:01:02,650 --> 00:01:06,390
And more for both languages you might
have to type something like equals true.

21
00:01:06,390 --> 00:01:08,158
But that's not necessary in swift.

22
00:01:08,158 --> 00:01:13,420
So here if hungry is true, let's eat.

23
00:01:13,420 --> 00:01:16,040
Otherwise, we can wait until later.

24
00:01:16,040 --> 00:01:17,790
If we want to reverse the condition,

25
00:01:17,790 --> 00:01:22,250
we just throw in an exclamation
point indicating not before hungry.

26
00:01:22,250 --> 00:01:24,610
Here, you can see the and operator.

27
00:01:24,610 --> 00:01:29,400
If hungry is true and
vegetarian is false, let's eat steak.

28
00:01:29,400 --> 00:01:33,630
I must admit, I have a hard time
passing up a juicy rib-eye.

29
00:01:33,630 --> 00:01:38,690
But if hungry is true and vegetarian is
also true, let's go for a pumpkin curry.

30
00:01:38,690 --> 00:01:40,430
If neither is true, then never mind.

31
00:01:41,450 --> 00:01:43,980
Now there are a few cases in which

32
00:01:43,980 --> 00:01:46,910
hunger is not a necessary condition for
eating.

33
00:01:46,910 --> 00:01:49,730
And for me,
that would be when there is pie.

34
00:01:49,730 --> 00:01:52,080
Here you can see the or operator.

35
00:01:52,080 --> 00:01:57,090
So here, if hungry is true or
thereIsPie is true Let's see.

36
00:01:59,420 --> 00:02:01,780
Now I'm sure comparison operators and

37
00:02:01,780 --> 00:02:04,930
logical operators are a piece
of cake for most of you.

38
00:02:04,930 --> 00:02:08,479
The ternary conditional operator
is a little less intuitive.

39
00:02:08,479 --> 00:02:11,550
But it can be super convenient
once you get the hang of it.

40
00:02:11,550 --> 00:02:14,820
Apple summarizes turn airy
conditionals nicely in the book

41
00:02:14,820 --> 00:02:18,120
Swift programming language,
using this theoretical example.

42
00:02:19,360 --> 00:02:23,400
Here if question is true then
the result is answer one.

43
00:02:23,400 --> 00:02:25,220
Otherwise, there result is answer two.

44
00:02:26,730 --> 00:02:30,180
So the previous examples
could be written as follows.

45
00:02:30,180 --> 00:02:32,460
If hungry is true, let's eat.

46
00:02:32,460 --> 00:02:34,040
Otherwise, let's wait.

47
00:02:34,040 --> 00:02:38,160
If hungry is true, or
there is pie, let's eat.

48
00:02:38,160 --> 00:02:40,150
Otherwise, let's wait.

49
00:02:40,150 --> 00:02:43,730
As you can imagine, this syntax is
really convenient with short, simple

50
00:02:43,730 --> 00:02:47,730
conditions but can become a come hard to
read as your conditions become longer or

51
00:02:47,730 --> 00:02:48,370
more complex.

52
00:02:48,370 --> 00:02:52,620
This syntax is especially handy for
calculations with conditions,

53
00:02:52,620 --> 00:02:54,050
like this one.

54
00:02:54,050 --> 00:02:57,090
There is one thing that a ternary
operator can do that in

55
00:02:57,090 --> 00:02:58,900
if else statement cannot.

56
00:02:58,900 --> 00:03:01,800
The entire ternary
statement is an expression.

57
00:03:01,800 --> 00:03:03,810
It evaluates to a single value.

58
00:03:03,810 --> 00:03:08,230
So we can insinuate it right into
another expression like this.

59
00:03:08,230 --> 00:03:11,880
So the lunch price is now calculated
using the sandwich price.

60
00:03:11,880 --> 00:03:15,300
And if tax is true,
we'll add an additional $.50.

61
00:03:15,300 --> 00:03:16,690
Otherwise we'll add nothing.
