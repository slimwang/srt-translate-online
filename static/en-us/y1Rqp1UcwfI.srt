1
00:00:00,000 --> 00:00:03,000
I think the best answer is the first two but not the third.

2
00:00:03,000 --> 00:00:06,000
Whether the first could happen depends on what we mean by hijacking a session.

3
00:00:06,000 --> 00:00:11,000
An attacker in the middle could certainly replace this with some other message--

4
00:00:11,000 --> 00:00:17,000
instead of sending the r value selected by the client, sending some other value--

5
00:00:17,000 --> 00:00:20,000
and that would make the server pick some different key,

6
00:00:20,000 --> 00:00:24,000
and then the messages that the server sends would be encrypted with that key.

7
00:00:24,000 --> 00:00:28,000
That means the attacker could pick in our prime value that the attacker knows

8
00:00:28,000 --> 00:00:30,000
and decrypt the messages from the server.

9
00:00:30,000 --> 00:00:33,000
It wouldn’t allow the attacker to hijack the entire session though,

10
00:00:33,000 --> 00:00:37,000
because the client messages would still be ecrypted with k,

11
00:00:37,000 --> 00:00:40,000
not known to the attacker based on this r value,

12
00:00:40,000 --> 00:00:42,000
and the attacker doesn’t have the way to decrypt this,

13
00:00:42,000 --> 00:00:46,000
just the way to change the key the server picks, but that’s a pretty serious problem

14
00:00:46,000 --> 00:00:51,000
if the server is sending messages that the attacker can intercept and decrypt.

15
00:00:51,000 --> 00:00:54,000
This is a problem, and what we’d like to do is to change it

16
00:00:54,000 --> 00:01:00,000
so the key incorporates more values that couldn’t be interfered with by the attacker.

17
00:01:00,000 --> 00:01:02,000
We’ll talk about how to do that next.

18
00:01:02,000 --> 00:01:05,000
First, let me talk about the other answer that is true.

19
00:01:05,000 --> 00:01:09,000
The attacker could easily force the client and server to use a different cipher.

20
00:01:09,000 --> 00:01:14,000
In step 2, the server responds with the selected cipher and hash.

21
00:01:14,000 --> 00:01:16,000
This is an non-encrypted message.

22
00:01:16,000 --> 00:01:20,000
An attacker who intercepts it could change the ciphers to something weaker.

23
00:01:20,000 --> 00:01:23,000
If the client supports the weaker cipher,

24
00:01:23,000 --> 00:01:25,000
the client has no way to know that the server supports

25
00:01:25,000 --> 00:01:30,000
a stronger cipher and will settle for the weaker one selected by the attacker.

26
00:01:30,000 --> 00:01:32,000
We’ll look at how to fix both of these problems next.

27
00:01:32,000 --> 00:01:34,000
The challenge is we need to fix them

28
00:01:34,000 --> 00:01:38,000
where these steps in the protocol don’t have a shared secret yet.

29
00:01:38,000 --> 00:01:40,000
We need to agree on the cipher and the hash function

30
00:01:40,000 --> 00:01:43,000
before we actually establish the shared key.
