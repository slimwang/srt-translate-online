1
00:00:00,310 --> 00:00:04,428
Here, you can see the declaration of the scanner. Here, we are reading an

2
00:00:04,428 --> 00:00:11,802
integer. Here, we are reading a decimal number. And before we read anything, we

3
00:00:11,802 --> 00:00:20,412
have a prompt. One prompt for the age, one prompt for the weight. Finally,

4
00:00:20,412 --> 00:00:25,344
there is an important piece that you've not seen so far, look up here. This is

5
00:00:25,344 --> 00:00:29,302
what's called an import statement. As it happens, the scanner class is in a

6
00:00:29,302 --> 00:00:34,642
different location than the classes that you've used so far. That location is

7
00:00:34,642 --> 00:00:39,790
called java.util, it's a utility class, and we have to tell the compiler that's

8
00:00:39,790 --> 00:00:46,778
the place to find it. Whenever you use the scanner, simply place this statement

9
00:00:46,778 --> 00:00:54,230
at the top of your code. Let's go ahead and run this. The console window pops

10
00:00:54,230 --> 00:00:59,890
up. Here is my prompt. Okay. I'm going to lie about my age here. Now, if that

11
00:00:59,890 --> 00:01:04,129
had been my age of course the program would be right next here. I'd be 22. Not

12
00:01:04,129 --> 00:01:08,410
much one can do about one's age. It does increase every year. And I lie about

13
00:01:08,410 --> 00:01:12,601
my weight too. But I appreciate the sentiment that hopefully next year, it'll

14
00:01:12,601 --> 00:01:17,106
be less. That at least should be under my control. All right. Now, you've seen

15
00:01:17,106 --> 00:01:22,268
how to read input, and I'd like you to do it in another program. Remember this

16
00:01:22,268 --> 00:01:27,612
program, in which we added the sunset effect to a photo. Now here, we used a

17
00:01:27,612 --> 00:01:33,296
value of 25 to increase the redness. It might be nice to experiment with other

18
00:01:33,296 --> 00:01:37,978
numbers. But instead of recompiling the program with all sorts of different

19
00:01:37,978 --> 00:01:43,156
numbers, let's turn this one into a user input. Now, we can't put the input

20
00:01:43,156 --> 00:01:47,300
statement here. Because this method is called for every single pixel, and we

21
00:01:47,300 --> 00:01:51,753
only want to supply the input once. So, here's the plan. Take out this

22
00:01:51,753 --> 00:01:59,128
constant, and add a parameter here. Then here, in the main method, prompt and

23
00:01:59,128 --> 00:02:05,636
read the input here before entering this piece of code. by the way, don't worry

24
00:02:05,636 --> 00:02:09,820
about this loop statement here. We're going to be covering that in a couple of

25
00:02:09,820 --> 00:02:14,414
lessons. Now, here is the place that the method is called. That's where you

26
00:02:14,414 --> 00:02:18,257
should pass the added red variable, so that each time the redden method adds

27
00:02:18,257 --> 00:02:23,668
that amount of red. Go ahead and do that now. If you have BlueJ, it would be

28
00:02:23,668 --> 00:02:27,636
best if you first develop the program in BlueJ, and then when you're done, put

29
00:02:27,636 --> 00:02:33,415
your result into the Udacity IDE. If you don't have BlueJ, that's okay, just do

30
00:02:33,415 --> 00:02:38,300
it straight in the IDE. But then you won't be able to supply your own input.

31
00:02:38,300 --> 00:02:41,939
You'll have to live with the input that Udacity gives you.
