1
00:00:00,000 --> 00:00:02,000
All right. Let's go through it together--for optional arguments,

2
00:00:02,000 --> 00:00:04,000
there are two possibilities.

3
00:00:04,000 --> 00:00:08,000
The arguments could be: at least one--some real arguments--

4
00:00:08,000 --> 00:00:10,000
or they could be Empty.

5
00:00:10,000 --> 00:00:12,000
The first two lines are going to look a bit like this.

6
00:00:12,000 --> 00:00:16,000
We have to call our nonterminal (optargs)

7
00:00:16,000 --> 00:00:18,000
because that's what I called it up here, and it has to match.

8
00:00:18,000 --> 00:00:21,000
I'm just going to make up this new nonterminal, (args),

9
00:00:21,000 --> 00:00:24,000
meaning "one or more".

10
00:00:24,000 --> 00:00:27,000
If we don't see any of them, we can return the Empty list.

11
00:00:27,000 --> 00:00:29,000
This means there's one or more arguments

12
00:00:29,000 --> 00:00:32,000
so I'll just pass the buck and assume that (args) is magically

13
00:00:32,000 --> 00:00:34,000
going to make, for me, the answer I want.

14
00:00:34,000 --> 00:00:37,000
And I'll just copy it from p[1] into p[0].

15
00:00:37,000 --> 00:00:39,000
One of the real tricky parts of handling arguments

16
00:00:39,000 --> 00:00:42,000
is that they're separated by commas,

17
00:00:42,000 --> 00:00:44,000
rather than terminated by commas.

18
00:00:44,000 --> 00:00:47,000
So once you have your first argument--

19
00:00:47,000 --> 00:00:50,000
if you're going to have a second, you need a comma but otherwise, you don't.

20
00:00:50,000 --> 00:00:52,000
This seems a little weird when we say it verbally,

21
00:00:52,000 --> 00:00:55,000
but if you look at it, it's more or less just what we expect.

22
00:00:55,000 --> 00:00:57,000
If there's only one argument,

23
00:00:57,000 --> 00:01:00,000
then it's just an expression--some number.

24
00:01:00,000 --> 00:01:03,000
But if there are more, then we put commas in between them.

25
00:01:03,000 --> 00:01:05,000
So here, for multiple arguments, we have an expression,

26
00:01:05,000 --> 00:01:08,000
a comma, and then any more arguments we like.

27
00:01:08,000 --> 00:01:10,000
And then, finally, we get to the last one,

28
00:01:10,000 --> 00:01:12,000
which is just an expression.

29
00:01:12,000 --> 00:01:15,000
For this one, we'll just make a Singleton list

30
00:01:15,000 --> 00:01:18,000
out of the only argument you gave me.

31
00:01:18,000 --> 00:01:21,000
So this would be the list, containing (1), for this example up here.

32
00:01:21,000 --> 00:01:23,000
And in this other case--myfun(2,3)--

33
00:01:23,000 --> 00:01:26,000
we take this first part--just the (2)--

34
00:01:26,000 --> 00:01:28,000
and we put it in a list by itself,

35
00:01:28,000 --> 00:01:32,000
and then we use (+) to get list concatenation--

36
00:01:32,000 --> 00:01:35,000
list.append--to put this single element list

37
00:01:35,000 --> 00:01:38,000
together with all of the rest of the arguments we've gathered up.

38
00:01:38,000 --> 00:01:40,000
That's it for defining parsing functions

39
00:01:40,000 --> 99:59:59,999
for function calls and arguments.
