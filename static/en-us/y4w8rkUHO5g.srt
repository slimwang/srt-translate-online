1
00:00:00,240 --> 00:00:02,480
Now let's talk about
an alternative model for

2
00:00:02,480 --> 00:00:07,010
structuring server applications
that perform concurrent processing.

3
00:00:07,010 --> 00:00:10,230
The model we'll talk about is
called event-driven model.

4
00:00:10,230 --> 00:00:13,840
An event-driven application can
be characterized as follows.

5
00:00:13,840 --> 00:00:17,506
The application is implemented
in a single address space,

6
00:00:17,506 --> 00:00:20,156
there is basically
only a single process.

7
00:00:20,156 --> 00:00:22,780
And a single thread of control.

8
00:00:22,780 --> 00:00:24,610
Here is the illustration
of this model and

9
00:00:24,610 --> 00:00:27,920
this is taken from the read
pies flash paper as well.

10
00:00:27,920 --> 00:00:32,380
The main part of the process is
the event dispatcher that continuously

11
00:00:32,380 --> 00:00:35,630
in a loop looks for incoming events and

12
00:00:35,630 --> 00:00:41,000
then based on those events invokes one
or more of the registered handlers.

13
00:00:41,000 --> 00:00:44,490
Here events correspond to
some of the following things.

14
00:00:44,490 --> 00:00:47,440
We see that the request
from the client browsers,

15
00:00:47,440 --> 00:00:50,510
that message that's received from
the network, that's an event.

16
00:00:51,800 --> 00:00:56,220
Completion of the send, so once the
server responds to the client request,

17
00:00:56,220 --> 00:00:58,060
the fact that the send completed,

18
00:00:58,060 --> 00:01:02,070
that's another event,
as far as the system is concerned.

19
00:01:02,070 --> 00:01:04,569
Completion of a disk read operation.

20
00:01:04,569 --> 00:01:08,810
That's another event that the system
will need to know how to handle.

21
00:01:08,810 --> 00:01:13,729
The dispatcher has the ability to accept
any of these types of notifications,

22
00:01:13,729 --> 00:01:18,513
and then based on the notification type
to invoke the appropriate handler.

23
00:01:18,513 --> 00:01:21,750
So in that sense, it operates
very much like a state machine.

24
00:01:21,750 --> 00:01:24,981
Since we're talking about
a single credit process,

25
00:01:24,981 --> 00:01:29,788
invoking a handler simply means that we
will jump to the appropriate location in

26
00:01:29,788 --> 00:01:34,220
the processes address space where
the handler is implemented.

27
00:01:34,220 --> 00:01:37,000
At that point the handler
execution can start.

28
00:01:37,000 --> 00:01:41,421
For instance, if the process is notified
that there is a pending connection

29
00:01:41,421 --> 00:01:43,838
request on the network
port that it uses,

30
00:01:43,838 --> 00:01:48,000
the dispatcher will pass that event
to the accept connection handler.

31
00:01:48,000 --> 00:01:50,911
If the event is a receipt
of a data of message on

32
00:01:50,911 --> 00:01:53,365
an already established connection,

33
00:01:53,365 --> 00:01:57,902
then the event dispatcher will pass
that to the read request handler.

34
00:01:57,902 --> 00:02:02,258
Once the filename is extracted from the
request and it's confirmed that the file

35
00:02:02,258 --> 00:02:05,410
is present, the process will
send out chunks of the file.

36
00:02:05,410 --> 00:02:09,300
And then once there is a confirmation
that that chunk of the file portion of

37
00:02:09,300 --> 00:02:12,720
the file has been successfully sent and
it will continue

38
00:02:12,720 --> 00:02:17,510
iterating over the handler that's
dealing with the send operation.

39
00:02:17,510 --> 00:02:18,763
If the file is not there,

40
00:02:18,763 --> 00:02:21,707
then some sort of error message
will be sent to the client.

41
00:02:21,707 --> 00:02:26,313
So whenever an event occurs the handlers
are the sequence of code that executes

42
00:02:26,313 --> 00:02:28,076
in response to these events.

43
00:02:28,076 --> 00:02:31,470
The key feature of the handlers
is that they run to completion.

44
00:02:31,470 --> 00:02:34,310
If a handler needs to
perform a blocking operation,

45
00:02:34,310 --> 00:02:37,920
it will initiate the blocking operation
and then it will immediately pass

46
00:02:37,920 --> 00:02:42,120
control back to the event dispatcher,
so it will no longer be in the handler.

47
00:02:42,120 --> 00:02:45,530
At that point, the dispatcher is
free to service other events or

48
00:02:45,530 --> 00:02:46,570
call other handlers.
