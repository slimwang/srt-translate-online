1
00:00:00,270 --> 00:00:05,260
You might have been wondering this whole time how exactly is D3 data driven.

2
00:00:05,260 --> 00:00:08,890
And when do we manipulate our graphic based on our data?

3
00:00:08,890 --> 00:00:12,870
Well without using Dimple JS we have to be rather explicit and

4
00:00:12,870 --> 00:00:14,380
a little bit more verbose.

5
00:00:14,380 --> 00:00:17,700
But are afforded much greater flexibility.

6
00:00:17,700 --> 00:00:21,160
And you could pose a chart as a question like this.

7
00:00:21,160 --> 00:00:23,600
How do I draw circle for

8
00:00:23,600 --> 00:00:28,500
every row of my data at the appropriate place on my axises?

9
00:00:28,500 --> 00:00:32,750
And the most natural answer to this question, at least in java script,

10
00:00:32,750 --> 00:00:35,220
is exactly that, a for loop.

11
00:00:35,220 --> 00:00:40,150
Again how do I draw a circle for every row of my data?

12
00:00:40,150 --> 00:00:46,040
Well, we could iterate through every row in our data and

13
00:00:46,040 --> 00:00:51,220
for each row draw our circle with the value of that row.

14
00:00:51,220 --> 00:00:53,770
And while this is partially pseudocode,

15
00:00:53,770 --> 00:00:58,800
this could be a perfectly sensible way to think about drawing a chart.

16
00:00:58,800 --> 00:01:03,210
Dependent on data in a very JavaScripty way.

17
00:01:03,210 --> 00:01:07,830
Notice how we have to be very explicit and procedural in how we

18
00:01:07,830 --> 00:01:12,890
tell the computer to draw a circle for every row in our data.

19
00:01:12,890 --> 00:01:16,370
But this seems a little bit cumbersome especially if the structure of

20
00:01:16,370 --> 00:01:18,010
our data changes.

21
00:01:18,010 --> 00:01:20,260
We want to use a different data file.

22
00:01:20,260 --> 00:01:23,190
We want to draw a different shape altogether.

23
00:01:23,190 --> 00:01:27,200
Or if we want our chart to adapt to some interaction from the user.

24
00:01:27,200 --> 00:01:30,210
Very early on when I introduced D3 I

25
00:01:30,210 --> 00:01:34,730
told you that one of the strengths of the library it's declarative syntax.

26
00:01:34,730 --> 00:01:40,120
Or rather you tell D3 what you want rather than how you want it to do it.

27
00:01:40,120 --> 00:01:43,260
Again in a pure JavaScript approach.

28
00:01:43,260 --> 00:01:46,350
We have to be very procedural with the computer and

29
00:01:46,350 --> 00:01:51,000
specify step by step what it needs to do to create our chart.

30
00:01:51,000 --> 00:01:55,260
With D3 on the other hand we simply specify what we want,

31
00:01:55,260 --> 00:01:59,030
circles, data in an SVG element.

32
00:01:59,030 --> 00:02:02,960
And D3 figures out how to best draw our chart.

33
00:02:02,960 --> 00:02:06,630
And one of the most mystical, yet powerful,

34
00:02:06,630 --> 00:02:12,300
features of D3 is the data bind, performed through the .data function.

35
00:02:12,300 --> 00:02:18,250
The data variable here is the same data variable that's passed to the call back

36
00:02:18,250 --> 00:02:24,405
of our data loading function, such as D3.json, D3.csv,

37
00:02:24,405 --> 00:02:28,170
or D3.tsv which loads our data file.

38
00:02:28,170 --> 00:02:32,230
And if we inspect what data actually is, which we'll see in a little bit,

39
00:02:32,230 --> 00:02:36,480
just as with our dimple example, it's simply a JavaScript array.

40
00:02:36,480 --> 00:02:41,050
Filled with JavaScript objects that represent our external file we loaded.

41
00:02:41,050 --> 00:02:45,440
Again, this chaining syntax is hopefully very familiar to you now.

42
00:02:45,440 --> 00:02:49,650
Each subsequent function gets called on the previous return value,

43
00:02:49,650 --> 00:02:52,860
transforming the object as it gets passed down the chain.

44
00:02:52,860 --> 00:02:57,270
The first statement here find the SVG element on the page which we want.

45
00:02:57,270 --> 00:03:00,468
And since there's only one, we simply need to use select.

46
00:03:00,468 --> 00:03:06,290
We then sub-select all the circles contained in that SVG element but

47
00:03:06,290 --> 00:03:07,480
let's pause here.

48
00:03:07,480 --> 00:03:10,020
This is usually where it breaks down for people.

49
00:03:10,020 --> 00:03:15,120
How can you select circles when if this is our first time drawing this

50
00:03:15,120 --> 00:03:19,390
chart there won't be any circles on the page until we append them?

51
00:03:19,390 --> 00:03:22,020
What are the circles that we're actually selecting.

52
00:03:22,020 --> 00:03:27,210
Well if we simply select circles when there are none we get the empty selection.

53
00:03:27,210 --> 00:03:29,020
Well then you might be asking,

54
00:03:29,020 --> 00:03:32,940
if it's an empty section how can you bind data to nothing?

55
00:03:32,940 --> 00:03:38,450
Well, I would argue, you bind the data to the circles that will be there.

56
00:03:38,450 --> 00:03:43,140
Well, this might seem somewhat circular reasoning, no pun intended.

57
00:03:43,140 --> 00:03:44,600
But let's break down and

58
00:03:44,600 --> 00:03:46,860
really understand what's going on in this snippet of code.
