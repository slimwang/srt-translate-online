1
00:00:00,000 --> 00:00:04,000
Unfortunately, not all bugs resolve to nice assertion violation messages,

2
00:00:04,000 --> 00:00:07,000
and bug disambiguation can be trickier when all we have

3
00:00:07,000 --> 00:00:09,000
is something like a core dump of a stack trace.

4
00:00:09,000 --> 00:00:12,000
What these things are going to give is--at least if we have good debugging symbols--

5
00:00:12,000 --> 00:00:15,000
probably some sort of an indication of what part of the code failed,

6
00:00:15,000 --> 00:00:19,000
and then it's going to give an indication of the stack frames leading up to the failure.

7
00:00:19,000 --> 00:00:22,000
Sometimes these are going to be useful for doing disambiguation and sometimes not.

8
00:00:22,000 --> 00:00:27,000
They provide qualitatively at some level similar information to assertion violation messages,

9
00:00:27,000 --> 00:00:30,000
and if they're giving us some clues relating the symptom to the source code

10
00:00:30,000 --> 00:00:33,000
but is not going to be as easy to find and it's not going to be as readable.

11
00:00:33,000 --> 00:00:35,000
A third weapon we have in the arsenal when doing bug triage

12
00:00:35,000 --> 00:00:37,000
is actually pretty interesting,

13
00:00:37,000 --> 00:00:40,000
which is that we can do a search over the revision history of the software under test--

14
00:00:40,000 --> 00:00:44,000
that is to say, of course, if we have access to the revision control symptom we can do this.

15
00:00:44,000 --> 00:00:47,000
Let's go back to our example here where we have all these bugs.

16
00:00:47,000 --> 00:00:53,000
If it's the case that all of these bugs here appear just one revision back,

17
00:00:53,000 --> 00:00:56,000
and these other ones appeared in different revisions maybe weeks or months ago

18
00:00:56,000 --> 00:01:00,000
then it's a good bet that all of these new inputs are triggering the same error--

19
00:01:00,000 --> 00:01:03,000
that is to say, an error that somebody just committed the other day--

20
00:01:03,000 --> 00:01:05,000
and these probably trigger older bugs.

21
00:01:05,000 --> 00:01:09,000
This is a pretty powerful weapon and some automated tools for revision control

22
00:01:09,000 --> 00:01:11,000
even build in functionality to do this search over version history.

23
00:01:11,000 --> 00:01:14,000
For example, git has a git_bisect command

24
00:01:14,000 --> 00:01:17,000
that can be used to do a binary search over revision history in an automated way.

25
00:01:17,000 --> 00:01:20,000
Even if that kind of thing isn't available it's not too hard to script this up yourself

26
00:01:20,000 --> 00:01:24,000
given an automated way to detect if a particular version has a particular bug.

27
00:01:24,000 --> 00:01:27,000
Our last way we can triage bugs

28
00:01:27,000 --> 00:01:29,000
is to examine a test case.

29
00:01:29,000 --> 00:01:33,000
Often it's the case that test cases that trigger the same bugs have similar features.

30
00:01:33,000 --> 00:01:36,000
In the compiler bug finding example that I've been using

31
00:01:36,000 --> 00:01:40,000
it's often the case that I'll look at a bunch of failure-triggering programs--

32
00:01:40,000 --> 00:01:43,000
that is to say, inputs to the compiler that cause it to crash or otherwise fail--

33
00:01:43,000 --> 00:01:48,000
and contains some sort of a smoking gun like maybe 64-bit integer divides or something like that.

34
00:01:48,000 --> 00:01:51,000
There would be some sort of common feature that tips us off

35
00:01:51,000 --> 00:01:53,000
that some collection of test inputs all maps to the same bug.

36
00:01:53,000 --> 00:01:55,000
Then if we see another group of test inputs

37
00:01:55,000 --> 00:01:57,000
that contain some totally different feature-

38
00:01:57,000 --> 00:02:00,000
maybe really deeply nested parentheses or really long identifiers--

39
00:02:00,000 --> 00:02:02,000
then it's a good bet that those map to a different bug.

40
00:02:02,000 --> 00:02:07,000
The problem is looking over large, randomly-generated test cases is really painful.

41
00:02:07,000 --> 00:02:09,000
This is going to directly lead to our next topic,

42
00:02:09,000 --> 00:02:14,000
which is a really important one, which is test-case reduction or test-case minimization.

43
00:02:14,000 --> 00:02:17,000
That's an automated process for taking a large failure-inducing input

44
00:02:17,000 --> 00:02:20,000
and turning it into a small one, and we're going to cover that next.
