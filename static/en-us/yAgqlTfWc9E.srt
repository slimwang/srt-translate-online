1
00:00:00,420 --> 00:00:03,530
I'd like to discuss one more neat trick that Numpy will allow us to do

2
00:00:03,530 --> 00:00:04,040
very easily.

3
00:00:05,540 --> 00:00:08,470
Numpy has a numpy.dot function that will allow us to

4
00:00:08,470 --> 00:00:10,890
easily take the dot product between two vectors.

5
00:00:12,600 --> 00:00:16,045
Let's walk through what it means to take the dot products first.

6
00:00:16,045 --> 00:00:20,104
Let's say I have an array called a, whose values are 1, 2, 3, 4, and 5.

7
00:00:21,110 --> 00:00:24,900
And then I had an array called b, whose values were 2, 3, 4, 5, and 6.

8
00:00:26,050 --> 00:00:29,140
These two vectors are indexed in the following way.

9
00:00:29,140 --> 00:00:33,920
Let's say that the 0th entry of A is 1 and the 0th entry of B is two.

10
00:00:33,920 --> 00:00:38,630
And the first entry of A is 2, and the first entry of b is 3, and so on.

11
00:00:39,860 --> 00:00:43,090
The way that we take the dot product is we say we're going to multiply together

12
00:00:43,090 --> 00:00:44,650
the 0th entry of the two arrays.

13
00:00:44,650 --> 00:00:48,070
And then we're going to add that to the sum of the first entry of

14
00:00:48,070 --> 00:00:48,570
the two arrays.

15
00:00:48,570 --> 00:00:52,130
And then we're going to add that to the product of the second entry of

16
00:00:52,130 --> 00:00:54,060
the arrays, and so on.

17
00:00:54,060 --> 00:00:59,140
So in this case, we end up with 1 times 2 plus 2 times 3 plus 3 times 4

18
00:00:59,140 --> 00:01:02,634
plus 4 times 5 plus 5 times 6, which is 70.

19
00:01:02,634 --> 00:01:06,208
We could easily do this in Numpy using numpy.dot.

20
00:01:06,208 --> 00:01:07,730
Just watch.

21
00:01:07,730 --> 00:01:10,617
Here I define a and b just as we did a moment ago.

22
00:01:10,617 --> 00:01:14,223
If we just say numpy.dot (a,b), I get 70.

23
00:01:15,310 --> 00:01:19,950
I can also use the numpy.dot function to multiply arrays into matrices.

24
00:01:21,190 --> 00:01:24,970
If you're not familiar with how to multiply an array into a matrix,

25
00:01:24,970 --> 00:01:28,350
you should follow the online resources found in the instructor notes.

26
00:01:28,350 --> 00:01:33,351
But for now, just know that if we have this array 1, 2 in this matrix, 2, 3,

27
00:01:33,351 --> 00:01:37,546
4, 5, 6, 7, we would essentially multiply them together and

28
00:01:37,546 --> 00:01:42,080
get an array where the first entry is 1 times 2 plus 2 times 3.

29
00:01:42,080 --> 00:01:46,020
The second entry is 1 times 4 plus 2 times 5.

30
00:01:46,020 --> 00:01:49,650
And the third entry is 1 times 6 plus 2 times 7.

31
00:01:51,160 --> 00:01:55,340
If we perform this multiplication down here, we would get a two-entry array

32
00:01:55,340 --> 00:01:59,640
where the top entry is 2 times 8 plus 4 times 9 plus 6 times 10,

33
00:01:59,640 --> 00:02:05,330
and the bottom entry is 3 times 8 plus 5 times 9 plus 7 times 10.

34
00:02:05,330 --> 00:02:09,610
Since these multiplications don't commute, Numpy.dot is smart enough to

35
00:02:09,610 --> 00:02:13,160
throw an error if you try to ask it to do something that doesn't make sense.

36
00:02:13,160 --> 00:02:16,350
Let's say I wanted to perform this multiplication right here and

37
00:02:16,350 --> 00:02:18,630
I called this guy a and this guy b.

38
00:02:18,630 --> 00:02:23,790
I could simply call numpy.dot(a,b) and what I get back is 8, 14,

39
00:02:23,790 --> 00:02:27,300
20, just as we would get if we performed this arithmetic here.
