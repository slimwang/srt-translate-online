1
00:00:00,480 --> 00:00:04,720
Now let's create a new view controller,
make it the initial view controller and

2
00:00:04,719 --> 00:00:08,960
then flip it to horizontal
orientation and preview.

3
00:00:08,960 --> 00:00:10,710
Now, let's add two labels.

4
00:00:10,710 --> 00:00:14,530
So both views have the same
compression resistance.

5
00:00:14,529 --> 00:00:17,300
And put some pretty long
text in both of them.

6
00:00:17,300 --> 00:00:20,000
It shouldn't fit in
portrait orientation.

7
00:00:20,000 --> 00:00:21,059
And then we'll stack them.

8
00:00:22,070 --> 00:00:25,940
The last thing we need to do is to add
there constraints to the stack view.

9
00:00:25,940 --> 00:00:29,450
I will do this by using
the constraint button,

10
00:00:29,449 --> 00:00:31,800
the one that looks like a TIE fighter.

11
00:00:31,800 --> 00:00:36,899
At the three constraints and
oddly enough, the Stack View remains

12
00:00:36,899 --> 00:00:41,850
in its position instead of the position
that our constraints are telling you to.

13
00:00:41,850 --> 00:00:43,350
To add insult to your injury,

14
00:00:43,350 --> 00:00:47,420
the compiler yells at us that the frames
will be different at runtime.

15
00:00:48,729 --> 00:00:50,399
So what on Earth is going on?

16
00:00:50,399 --> 00:00:52,289
This is one of the most common and

17
00:00:52,289 --> 00:00:54,700
frustrating errors you
will get with auto layout.

18
00:00:54,700 --> 00:00:57,200
But it's actually pretty easy to fix.

19
00:00:57,200 --> 00:01:00,865
We told auto layout that the stack
view should be glued to the top,

20
00:01:00,865 --> 00:01:03,420
little left, and the right side.

21
00:01:03,420 --> 00:01:04,060
Is it?

22
00:01:04,060 --> 00:01:04,560
No.

23
00:01:04,560 --> 00:01:06,260
Will it be in run time?

24
00:01:06,260 --> 00:01:06,890
You bet.

25
00:01:06,890 --> 00:01:09,769
This discrepancy is what
XCode is complaining about.

26
00:01:09,769 --> 00:01:12,459
You could say that XCode could

27
00:01:12,459 --> 00:01:15,509
have updated the preview
to match the constraints.

28
00:01:15,510 --> 00:01:16,859
I certainly agree.

29
00:01:16,859 --> 00:01:20,094
Unfortunately, sometimes it doesn't.

30
00:01:20,094 --> 00:01:24,000
This is pretty easy to fix by using
the pop up menu of the warning.

31
00:01:24,000 --> 00:01:25,920
[BLANK_AUDIO]

32
00:01:25,920 --> 00:01:33,543
Select Update Frames, so the frames
in the preview match the Constraints.

33
00:01:33,543 --> 00:01:35,569
Fix misplacement, and

34
00:01:35,569 --> 00:01:40,766
now that it's fixed we see
the same behavior as before.

35
00:01:40,766 --> 00:01:45,296
Whenever a view's intrinsic
content size must be changed

36
00:01:45,296 --> 00:01:48,777
if all the compression
resistances are the same,

37
00:01:48,777 --> 00:01:52,587
the one that is changed is
the first one from the left.

38
00:01:52,587 --> 00:01:58,480
That's why this one as its size change
from its intrinsic content size,

39
00:01:58,480 --> 00:02:02,219
while this one keeps its
intrinsic content size.

40
00:02:03,329 --> 00:02:05,810
So what if that's not what you want?

