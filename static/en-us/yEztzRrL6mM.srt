1
00:00:00,460 --> 00:00:03,090
So now we have a safe way to
update our static assets.

2
00:00:03,090 --> 00:00:04,820
But as we saw in the previous chapter,

3
00:00:04,820 --> 00:00:07,320
the changes would be
in the waiting worker.

4
00:00:07,320 --> 00:00:10,790
Ideally we want users to be on
the latest version as soon as possible.

5
00:00:10,790 --> 00:00:14,020
We want them to get the latest features,
the latest design, and

6
00:00:14,020 --> 00:00:15,430
of course bug fixes.

7
00:00:16,590 --> 00:00:20,900
But as we saw when a new worker is
discovered it waits until all pages

8
00:00:20,900 --> 00:00:24,570
using the current version go away,
before it can take over.

9
00:00:24,570 --> 00:00:27,690
And, that could be a long time.

10
00:00:27,690 --> 00:00:29,370
Let's do something better.

11
00:00:29,370 --> 00:00:32,860
Our goal here is to tell user once
an update has been found, and

12
00:00:32,860 --> 00:00:37,010
give them a button to ignore it or
refresh the page to get the new version.

13
00:00:37,010 --> 00:00:38,420
But how can we achieve this?

14
00:00:38,420 --> 00:00:41,720
Well, first off,
let's cover the update notification.

15
00:00:41,720 --> 00:00:44,648
Thankfully there are APIs that give
us insight into the service work

16
00:00:44,648 --> 00:00:46,050
of a lifecycle.

17
00:00:46,050 --> 00:00:49,130
When you register for
a service worker it returns a promise.

18
00:00:49,130 --> 00:00:52,560
That promise fulfills with a service
work a registration object.

19
00:00:52,560 --> 00:00:53,810
This object has properties and

20
00:00:53,810 --> 00:00:56,380
methods relating to the service
worker registration.

21
00:00:56,380 --> 00:00:59,439
We get methods to do things like
unregister the service worker or

22
00:00:59,439 --> 00:01:02,210
programatically trigger an update.

23
00:01:02,210 --> 00:01:06,180
We also get free properties installing,
waiting, and active.

24
00:01:07,380 --> 00:01:10,240
These will point to
a serviceWorker object or be null.

25
00:01:11,620 --> 00:01:14,320
They give you an insight into
the serviceWorker life cycle.

26
00:01:14,320 --> 00:01:18,760
They also map directly to the dev tools
view we've been working with so far.

27
00:01:18,760 --> 00:01:22,020
This dev tools view is actually just
looking at these registration objects.

28
00:01:22,020 --> 00:01:25,550
For example, if there's a serviceWorker
instance in .installing,

29
00:01:25,550 --> 00:01:27,620
that tells us there's
an update on its way,

30
00:01:27,620 --> 00:01:30,740
although it might be thrown
away if the install fails.

31
00:01:30,740 --> 00:01:33,545
If there's a serviceWorker in .waiting,
we know there's an updated

32
00:01:33,545 --> 00:01:36,380
serviceoWorker ready and
waiting to take over.

33
00:01:36,380 --> 00:01:39,630
The registration object will emit
an event when a new update is found.

34
00:01:39,630 --> 00:01:42,240
Called well, update found.

35
00:01:42,240 --> 00:01:45,020
When this file's not installing
has become a new worker.

36
00:01:46,060 --> 00:01:50,260
On the serviceWorker objects themselves,
you can look at their state.

37
00:01:50,260 --> 00:01:53,680
The state can be installing
the installer that has fired, but

38
00:01:53,680 --> 00:01:55,470
hasn't yet completed.

39
00:01:55,470 --> 00:01:59,320
Installed, installation completed
successfully but hasn't yet activated.

40
00:02:00,380 --> 00:02:01,290
Activating.

41
00:02:01,290 --> 00:02:05,140
The activate event has fired but
not yet complete, or activated.

42
00:02:05,140 --> 00:02:08,240
The serviceWorker is ready
to receive fetch events.

43
00:02:08,240 --> 00:02:09,500
And also, there's redundant.

44
00:02:09,500 --> 00:02:12,260
The serviceWorker has been thrown away.

45
00:02:12,260 --> 00:02:15,150
Redundant happens when the serviceWorker
has been superseded by a newer

46
00:02:15,150 --> 00:02:19,420
worker and it also happens if
the serviceWorker fails to install.

47
00:02:19,420 --> 00:02:20,950
The serviceWorker fires an event.

48
00:02:20,950 --> 00:02:21,890
State change.

49
00:02:21,890 --> 00:02:24,550
Whenever the value of
the state property changes.

50
00:02:24,550 --> 00:02:27,470
Also.
navigator.serviceWorker.controller

51
00:02:27,470 --> 00:02:30,680
refers to the serviceWorker
that controls this page.

52
00:02:30,680 --> 00:02:32,940
You want to tell user when
there's an update ready.

53
00:02:32,940 --> 00:02:35,550
But because the serviceWorker
update happens in the background,

54
00:02:35,550 --> 00:02:38,900
the update could be ready and
waiting, it could be in progress, or

55
00:02:38,900 --> 00:02:40,690
it might not have started yet.

56
00:02:40,690 --> 00:02:43,520
This means we need to look at the state
of things when the page loads.

57
00:02:43,520 --> 00:02:46,320
But we may also need to listen for
future changes.

58
00:02:46,320 --> 00:02:48,670
For instance, if there's no controller,

59
00:02:48,670 --> 00:02:51,460
that means this page didn't
load using a serviceWorker.

60
00:02:51,460 --> 00:02:54,080
So they loaded the content
from the network.

61
00:02:54,080 --> 00:02:56,700
Otherwise we need to
look at the registration.

62
00:02:56,700 --> 00:02:59,580
If there's a waiting worker there's
an update ready and waiting.

63
00:02:59,580 --> 00:03:01,420
We tell the user about it.

64
00:03:01,420 --> 00:03:04,900
Otherwise if there isn't installing
worker there's an update in progress.

65
00:03:04,900 --> 00:03:06,440
Of course the update may fail.

66
00:03:06,440 --> 00:03:08,650
So, we listen to the state
changes to track it and

67
00:03:08,650 --> 00:03:10,150
if it reaches the installed state.

68
00:03:10,150 --> 00:03:11,880
We tell the user.

69
00:03:11,880 --> 00:03:14,790
Otherwise, we listen for
the update found event.

70
00:03:14,790 --> 00:03:17,490
When that fires we track the state
of the installing worker and

71
00:03:17,490 --> 00:03:20,040
if it reaches the installed
state we tell the user.

72
00:03:21,050 --> 00:03:23,130
That's how we can tell
user about updates,

73
00:03:23,130 --> 00:03:26,750
whether they're already there,
in progress, or start some time later.
