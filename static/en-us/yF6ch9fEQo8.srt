1
00:00:00,000 --> 00:00:04,000
[Evans] The answer is Alice needs to send the value of hashing s 98 times.

2
00:00:04,000 --> 00:00:06,000
The hash chain is going backwards.

3
00:00:06,000 --> 00:00:09,000
We can only verify hashes in 1 direction.

4
00:00:09,000 --> 00:00:11,000
The hash is hard to compute in 1 direction.

5
00:00:11,000 --> 00:00:14,000
That's the valuable property the hash function gives us.

6
00:00:14,000 --> 00:00:18,000
And so we have to go backwards if we want to use it for authentication.

7
00:00:18,000 --> 00:00:20,000
Here we're using it to authenticate Alice.

8
00:00:20,000 --> 00:00:24,000
If someone just knows x, if someone intercepts p, knows the previous password value,

9
00:00:24,000 --> 00:00:27,000
they could compute any of these other values.

10
00:00:27,000 --> 00:00:29,000
Those are easy to compute once you have p.

11
00:00:29,000 --> 00:00:33,000
This was p, this one is just computing the hash of p,

12
00:00:33,000 --> 00:00:36,000
and this one is computing the hash of the hash of p.

13
00:00:36,000 --> 00:00:38,000
The only one that would be hard to compute is this one.

14
00:00:38,000 --> 00:00:41,000
The server can check that that's correct using the same process.

15
00:00:41,000 --> 00:00:45,000
At this point, the value of x is hash 99 of s.

16
00:00:45,000 --> 00:00:50,000
So when the value of p that's sent is hash to the 98th power of s,

17
00:00:50,000 --> 00:00:57,000
doing hash 98 times, then this equation will be true only if the value sent was correct.

18
00:00:57,000 --> 00:01:00,000
So what I've described is what's known as the S/Key password system.

19
00:01:00,000 --> 00:01:04,000
The way S/Key would work, the server would generate the hash chain.

20
00:01:04,000 --> 00:01:06,000
Let's say there are 100 entries.

21
00:01:06,000 --> 00:01:08,000
Alice would print these out in a list,

22
00:01:08,000 --> 00:01:13,000
and they would be turned into strings that are easier to type than pure bit sequences.

23
00:01:13,000 --> 00:01:18,000
The server would store the last entry in that hash chain and nothing else.

24
00:01:18,000 --> 00:01:21,000
And so what's stored in the server could not be used to log in.

25
00:01:21,000 --> 00:01:25,000
The list that Alice has could be used, and I should correct this

26
00:01:25,000 --> 00:01:30,000
that if Alice starts with H 100 as the first thing in her list,

27
00:01:30,000 --> 00:01:34,000
what the server should actually store would be H 101.

28
00:01:34,000 --> 00:01:38,000
This has a pretty big downside--that it requires Alice to carry around with her

29
00:01:38,000 --> 00:01:41,000
a list of passwords, and instead of remembering something

30
00:01:41,000 --> 00:01:45,000
that becomes easier and easier to type, she'd have to look at that list,

31
00:01:45,000 --> 00:01:49,000
type the password correctly, cross that one off, and use the next one next time.

32
00:01:49,000 --> 00:01:51,000
And at some point she's going to run out.

33
00:01:51,000 --> 00:01:55,000
She's going to need to get on a secure connection again to generate a new hash chain

34
00:01:55,000 --> 99:59:59,999
to be able to keep doing this.
