1
00:00:00,000 --> 00:00:04,000
Let's quickly summarize how a language interpreter works.

2
00:00:04,000 --> 00:00:13,000
For regular expressions we have patterns like a or b plus, which define languages.

3
00:00:13,000 --> 00:00:25,000
A language is a set of strings like {a, b, ab, ba, ...} and so on, defined by that pattern.

4
00:00:25,000 --> 00:00:33,000
Then we have interpreters like matchset, which in this case takes a pattern and a text

5
00:00:33,000 --> 00:00:37,000
and returns a list of strings or a set of strings.

6
00:00:37,000 --> 00:00:44,000
So we saw that matchset is an interpreter because it takes a description of the language,

7
00:00:44,000 --> 00:00:48,000
namely a pattern as a data structure, and operates over that pattern.

8
00:00:48,000 --> 00:00:50,000
Here's the definition of matchset.

9
00:00:50,000 --> 00:00:52,000
You see it looks at the pattern, breaks out its components,

10
00:00:52,000 --> 00:00:56,000
and then the first thing it does is this big case statement to figure out

11
00:00:56,000 --> 00:01:00,000
what type of operator we have and to do the appropriate thing.

12
00:01:00,000 --> 00:01:06,000
There's an inherent inefficiency here in that the pattern is defined once,

13
00:01:06,000 --> 00:01:11,000
and it's always the same pattern over a long string of text and maybe over many possible texts.

14
00:01:11,000 --> 00:01:14,000
We want to apply the same pattern to many texts.

15
00:01:14,000 --> 00:01:17,000
Yet every time we get to that pattern, we're doing this same process

16
00:01:17,000 --> 00:01:20,000
of trying to figure out what operator we have

17
00:01:20,000 --> 00:01:26,000
when, in fact, we should already know that, because the pattern static, is constant.

18
00:01:26,000 --> 00:01:30,000
So this is kind of repeated work. We're doing this over and over again for no good reason.

19
00:01:30,000 --> 00:01:33,000
There's another kind of interpreter called a "compiler"

20
00:01:33,000 --> 00:01:36,000
which does that work all at once.

21
00:01:36,000 --> 00:01:39,000
The very first time when the pattern is defined we do the work of figuring out

22
00:01:39,000 --> 00:01:43,000
which parts of the pattern are which so we don't have to repeat that

23
00:01:43,000 --> 00:01:47,000
every time we apply the pattern to a text.

24
00:01:47,000 --> 00:01:54,000
Where an interpreter takes a pattern and a text and operates on those,

25
00:01:54,000 --> 00:01:56,000
a compiler has two steps.

26
00:01:56,000 --> 00:02:02,000
In the first step, there is a compilation function, which takes just the pattern

27
00:02:02,000 --> 00:02:06,000
and returns a compiled object, which we'll call C.

28
00:02:06,000 --> 00:02:09,000
Then there's the execution of that compiled object

29
00:02:09,000 --> 00:02:14,000
where we take C and we apply that to the text to get the result.

30
00:02:14,000 --> 00:02:18,000
Here work can be done repeatedly every time we have a text.

31
00:02:18,000 --> 00:02:23,000
Here the work is split up. Some of it is done in the compilation stage to get this compiled object.

32
00:02:23,000 --> 00:02:28,000
Then the rest of it is done every time we get a new text. Let's see how that works.

33
00:02:28,000 --> 00:02:30,000
Here is the definition of the interpreter.

34
00:02:30,000 --> 00:02:33,000
Let's focus just on this line here.

35
00:02:33,000 --> 00:02:39,000
This say if the op is a literal, then we return this result.

36
00:02:39,000 --> 00:02:44,000
The way I'm going to change this interpreter into a compiler is I'm going to take

37
00:02:44,000 --> 00:02:47,000
the individual statements like this that were in the interpreter,

38
00:02:47,000 --> 00:02:50,000
and I'm going to throw them into various parts of a compiler,

39
00:02:50,000 --> 00:02:56,000
and each of those parts is going to live in the constructor for the individual type of pattern.

40
00:02:56,000 --> 00:03:02,000
We have a constructor--literal takes a string as input and let's return a tuple

41
00:03:02,000 --> 00:03:06,000
that just represents what we have, and then the interpreter deals with that.

42
00:03:06,000 --> 00:03:09,000
Now, we're going to have literal act as a compiler.

43
00:03:09,000 --> 00:03:12,000
What it's going to do is return a function that's going to do the work.

44
00:03:12,000 --> 00:03:14,000
What is this saying?

45
00:03:14,000 --> 00:03:17,000
We have the exact same expression here as we had before,

46
00:03:17,000 --> 00:03:22,000
but what we're saying is that as soon as we construct a literal rather than

47
00:03:22,000 --> 00:03:25,000
having that return a tuple, what it's returning is a function,

48
00:03:25,000 --> 99:59:59,999
which is a function from the text to the result that matchset would have given us.
