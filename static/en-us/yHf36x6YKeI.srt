1
00:00:00,149 --> 00:00:03,485
So the image blurring example that we've been using actually illustrates

2
00:00:03,485 --> 00:00:06,725
another important kind of communication pattern called Stencil.

3
00:00:06,725 --> 00:00:10,110
Stencil codes update each element in an array

4
00:00:10,110 --> 00:00:13,395
using neighboring array elements in a fixed pattern called the stencil.

5
00:00:13,395 --> 00:00:16,052
This is the stencil pattern we saw before.

6
00:00:16,052 --> 00:00:19,273
It's technically known as a 2D von Neumann stencil.

7
00:00:19,273 --> 00:00:22,242
Let me reiterate how this worked and, this time

8
00:00:22,242 --> 00:00:24,855
use color coding a little differently to show you what's going on.

9
00:00:24,855 --> 00:00:28,200
So here, I've color coded the threads to show you

10
00:00:28,200 --> 00:00:30,851
which one is going to be working on which output element.

11
00:00:30,851 --> 00:00:34,382
So I'll choose the blue one to be writing into this value.

12
00:00:34,382 --> 00:00:37,030
Here's where the red one's going to write its output value.

13
00:00:37,030 --> 00:00:39,609
Here's where the green thread will write it's output value.

14
00:00:39,609 --> 00:00:41,339
And if you look at what's going to happen,

15
00:00:41,339 --> 00:00:43,751
each of these threads is going to read from several locations

16
00:00:43,751 --> 00:00:48,479
in memory surrounding the corresponding input value, and those locations are defined by the stencil.

17
00:00:48,479 --> 00:00:52,067
So the blue thread will do a gather from these threads,

18
00:00:52,067 --> 00:00:55,768
and then the red-colored thread will do a gather from the overlapping neighborhood.

19
00:00:55,768 --> 00:00:59,608
And then the green thread will do a gather from this neighborhood, and so on.

20
00:00:59,608 --> 00:01:03,064
Eventually there'll be some other thread whose responsible for, say,

21
00:01:03,064 --> 00:01:06,767
writing to this value, and that thread is going to go and access these values.

22
00:01:06,767 --> 00:01:12,512
So something you're going to notice right away is that there is a lot of data reuse going on.

23
00:01:12,512 --> 00:01:16,626
Many threads are accessing and computing from the same data.

24
00:01:16,626 --> 00:01:21,818
And exploiting that data reuse is something we're going to use later on,

25
00:01:21,818 --> 00:01:23,805
when you're working on your homework assignment.

26
00:01:23,805 --> 00:01:26,864
We're going to try to exploit that reuse to speed up your homework assignment.

27
00:01:26,864 --> 00:01:29,084
Now there are other common stencil patterns.

28
00:01:29,084 --> 00:01:33,033
For example, you might read from all of the neighboring elements,

29
00:01:33,033 --> 00:01:36,536
including the diagonal elements, and that would be called a 2D Moore pattern.

30
00:01:36,536 --> 00:01:40,891
And there are also 3D analogs of these, so for my next trick, I'm going to attempt to draw a

31
00:01:40,891 --> 00:01:47,066
3D von Neumann stencil, which is sort of kind of a cross shape extending in all 3 dimensions.

32
00:01:47,066 --> 00:01:48,734
Hopefully you can see that from my drawing.

33
00:01:48,734 --> 00:01:51,771
So speaking of data reuse, here's a quick quiz.

34
00:01:51,771 --> 00:01:55,582
Can you figure out how many times a given input element in the array

35
00:01:55,582 --> 00:01:58,505
will be read when applying each of these stencils?
