1
00:00:00,330 --> 00:00:03,510
We will discuss two different variants of the

2
00:00:03,510 --> 00:00:06,390
queueing lock the first one we'll talk about is

3
00:00:06,390 --> 00:00:09,490
the array-based queueing lock, and this is due

4
00:00:09,490 --> 00:00:12,080
to Anderson. And I'll refer to it as Anderson's

5
00:00:12,080 --> 00:00:19,950
lock later on as well. Associated with each lock L is an array of flags. And

6
00:00:19,950 --> 00:00:25,380
the size of this array is equal to the number of processes in the SMP. So if you

7
00:00:25,380 --> 00:00:32,490
have a an N-way multiprocessor, then you have N elements in the circular

8
00:00:33,620 --> 00:00:38,978
flags array. And this flags array serves as a circular queue. For N-queuing the

9
00:00:38,978 --> 00:00:42,960
requesters that are requesting this particular

10
00:00:42,960 --> 00:00:45,480
lock L. So every lock has associated

11
00:00:45,480 --> 00:00:51,810
with it, this flags array and it's really intuitive that since we have utmost

12
00:00:51,810 --> 00:00:56,528
we have N processors in this multiprocessor. We can have utmost

13
00:00:56,528 --> 00:01:00,690
N requests simultaneously waiting for this particular lock so the size of the

14
00:01:00,690 --> 00:01:05,650
data structure, the flags data structure is equal to N where nN is the number of

15
00:01:05,650 --> 00:01:11,590
processors in the multiprocessor. Now each element in this flags

16
00:01:11,590 --> 00:01:17,760
array can be one of two states. One state is the has-locks state.

17
00:01:17,760 --> 00:01:20,980
And the other state is a must-wait state. Has-lock

18
00:01:20,980 --> 00:01:23,820
says that whoever is waiting on a particular slot

19
00:01:23,820 --> 00:01:26,290
has the lock. So this particular entity let's say,

20
00:01:26,290 --> 00:01:29,610
is hl. And that means that whichever processor happens

21
00:01:29,610 --> 00:01:32,610
to be waiting on this particular slot is a

22
00:01:32,610 --> 00:01:34,330
current winner of the lock and is using the

23
00:01:34,330 --> 00:01:37,490
lock. On the other hand, must-wait is indicating that

24
00:01:37,490 --> 00:01:42,860
if a processor has must-wait as the. Entry in this

25
00:01:42,860 --> 00:01:45,070
particular element of the array, and is waiting on

26
00:01:45,070 --> 00:01:47,770
this particular slot, that means that the processor has to

27
00:01:47,770 --> 00:01:51,710
wait. You guessed it. There can be exactly one

28
00:01:51,710 --> 00:01:56,020
processor that can be in the hl happy state because

29
00:01:56,020 --> 00:01:58,847
it's a mutually exclusive lock. And therefore. Utmost one

30
00:01:58,847 --> 00:02:01,475
processor can have a lock at a time, and all

31
00:02:01,475 --> 00:02:05,140
the others should be waiting. And, so what we

32
00:02:05,140 --> 00:02:08,250
do is, in order to, when we get this lock.

33
00:02:08,250 --> 00:02:10,449
To initialize the lock, what we do is

34
00:02:10,449 --> 00:02:13,230
we initialize the lock data structure, this array

35
00:02:13,230 --> 00:02:16,400
data structure. The flags of array data structure

36
00:02:16,400 --> 00:02:19,650
which represents a circular queue by marking one slot

37
00:02:19,650 --> 00:02:24,840
as hl. And all the others as must-wait. An important point I want you all to

38
00:02:24,840 --> 00:02:28,060
notice, is that the slots are not statically

39
00:02:28,060 --> 00:02:32,655
associated with any particular processor. As requesters come in,

40
00:02:32,655 --> 00:02:37,360
they're going to line up in this flags array at the spot that they get

41
00:02:37,360 --> 00:02:41,600
in the next available slot. The key point is that there is the unique

42
00:02:41,600 --> 00:02:44,230
spot that is available for every waiting

43
00:02:44,230 --> 00:02:45,970
processor. But it is not statically assigned

44
00:02:45,970 --> 00:02:51,210
and we'll see. How requests get formed using this circular queue in a minute.
