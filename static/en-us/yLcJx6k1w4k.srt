1
00:00:00,100 --> 00:00:02,360
First, use a one-way hash function.

2
00:00:02,360 --> 00:00:08,148
This is obvious, because if the hash
function does not have one-way property.

3
00:00:08,148 --> 00:00:13,314
Then from the hash value an attacker
can easily reverse the hash function,

4
00:00:13,314 --> 00:00:15,698
and find the plain text password.

5
00:00:15,698 --> 00:00:20,354
So, we have to use a one-way hash
function to protect password security.

6
00:00:20,354 --> 00:00:23,880
Second, should not use
the avalanche effect.

7
00:00:23,880 --> 00:00:28,670
The avalanche effect means that
a slight change of the input may cause

8
00:00:28,670 --> 00:00:30,570
a large change of the output.

9
00:00:30,570 --> 00:00:34,490
In fact, we want our hash
function to have this effect, so

10
00:00:34,490 --> 00:00:39,100
that two similar passwords will
have very different hash values.

11
00:00:39,100 --> 00:00:40,360
With this in fact,

12
00:00:40,360 --> 00:00:44,480
even when the attacker has correctly
guessed a password, he still has

13
00:00:44,480 --> 00:00:49,480
the same amount of difficulty to
guess another similar password.

14
00:00:49,480 --> 00:00:54,230
Third, should only check to see that
the hash function output is the same

15
00:00:54,230 --> 00:00:55,760
as stored output.

16
00:00:55,760 --> 00:00:57,540
This obviously is yes.

17
00:00:57,540 --> 00:01:02,870
Because password authentication should
only check that the hash function output

18
00:01:02,870 --> 00:01:04,750
is the same as the stored value.
