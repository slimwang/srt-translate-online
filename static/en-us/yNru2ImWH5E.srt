1
00:00:00,360 --> 00:00:01,350
You may ask yourself,

2
00:00:01,350 --> 00:00:04,500
can we define functions that
take more than one parameter?

3
00:00:04,500 --> 00:00:09,414
Absolutely, here's a new function called
greet student that takes a string and

4
00:00:09,414 --> 00:00:10,619
bool value as input.

5
00:00:11,800 --> 00:00:15,280
In the definition, multiple parameters
are separated by a comma and

6
00:00:15,279 --> 00:00:19,329
then added in the same way as our
original parameter using a name,

7
00:00:19,329 --> 00:00:20,891
followed by a colon and a type.

8
00:00:22,010 --> 00:00:25,230
So for our first parameter,
the input value is called student and

9
00:00:25,230 --> 00:00:26,300
it's of type string.

10
00:00:27,620 --> 00:00:27,880
And for

11
00:00:27,879 --> 00:00:32,859
our second parameter the input is called
lateForClass and it's of type bool.

12
00:00:32,859 --> 00:00:34,740
And if you wanted to add
even more parameters,

13
00:00:34,740 --> 00:00:37,030
you'd just continue this pattern.

14
00:00:37,030 --> 00:00:37,550
For example,

15
00:00:37,549 --> 00:00:41,949
here's another function called
averageScore that has three parameters.

16
00:00:41,950 --> 00:00:45,565
If we were to describe this function
aloud, we might say we have the function

17
00:00:45,564 --> 00:00:49,934
averageScore that takes three
double values called firstScore,

18
00:00:49,935 --> 00:00:51,801
secondScore and thirdScore.

19
00:00:52,969 --> 00:00:56,149
Now let's take a look at how to call
a function with multiple parameters.

20
00:00:57,469 --> 00:01:01,250
Again, we start with the function's
name, and then we have a comma separated

21
00:01:01,250 --> 00:01:04,280
list of our inputs and
their corresponding values.

22
00:01:05,480 --> 00:01:09,118
So for our student,
the value is Gabrielle and for

23
00:01:09,118 --> 00:01:11,641
lateForClass the value is false.

24
00:01:11,641 --> 00:01:14,987
And if you think about the purpose of
this function, it shows that Gabrielle

25
00:01:14,987 --> 00:01:18,334
wasn't late for class and therefore our
printout that we have in the console

26
00:01:18,334 --> 00:01:21,439
says, glad you could join us today,
Gabrielle, with a smiley face.

27
00:01:22,780 --> 00:01:23,439
On the other hand,

28
00:01:23,439 --> 00:01:26,959
when we call greetStudent, and
the student is Jared and he's late for

29
00:01:26,959 --> 00:01:30,879
class, the output we get in
the console is a little bit different.

30
00:01:30,879 --> 00:01:32,199
It says Jared, you're late.

31
00:01:33,629 --> 00:01:37,390
Another thing to notice is that the
order of the input values when we call

32
00:01:37,390 --> 00:01:40,129
the function is the same as
the order of the input values

33
00:01:40,129 --> 00:01:41,310
where we define the function.

34
00:01:42,500 --> 00:01:46,590
So the student comes first,
followed by the value for lateForClass.

35
00:01:46,590 --> 00:01:48,168
[BLANK_AUDIO]

