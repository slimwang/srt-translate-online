1
00:00:00,650 --> 00:00:01,580
I'd like to take a minute and

2
00:00:01,580 --> 00:00:05,180
review some of the more
complex aspects of operators.

3
00:00:05,180 --> 00:00:08,260
Let's start by taking a look
at some binary numbers.

4
00:00:08,260 --> 00:00:12,110
Binary numbers are the crux
of bitwise operations.

5
00:00:12,110 --> 00:00:14,810
And even though bitwise
operators are not commonly used,

6
00:00:14,810 --> 00:00:18,200
they're good to know for those special
cases when you really need them.

7
00:00:18,200 --> 00:00:22,300
I'll show you a good example of using
bitwise operators in just a moment.

8
00:00:22,300 --> 00:00:24,040
Here at the top of this playground file,

9
00:00:24,040 --> 00:00:28,330
I've defined the numbers 0
through 15 using binary literals.

10
00:00:28,330 --> 00:00:32,560
Notice the 0B prefix before
each of these numbers.

11
00:00:32,560 --> 00:00:35,100
On the right side of the playground
you can see how these binary numbers

12
00:00:35,100 --> 00:00:37,540
are represented on our
normal base 10 system.

13
00:00:39,260 --> 00:00:42,370
Below this, I've defined
the numbers 0 through 15 again, but

14
00:00:42,370 --> 00:00:44,470
with the hexidecimal literals.

15
00:00:44,470 --> 00:00:45,650
They're prefixed with the 0x.

16
00:00:45,650 --> 00:00:47,810
You can see that there.

17
00:00:48,840 --> 00:00:52,190
And again, the numbers are represented
in base 10 over to the right.

18
00:00:53,220 --> 00:00:57,410
Now for each of these constants I've
declared them as the type UInt8.

19
00:00:57,410 --> 00:00:59,920
An UInt8 type is similar to the Int type

20
00:00:59,920 --> 00:01:02,410
except it restricts
the numbers from 0 to 255.

21
00:01:02,410 --> 00:01:06,190
And we're doing this here just
to keep the numbers small.

22
00:01:06,190 --> 00:01:10,520
What I mean by small is, is because it
takes so many binary digits to represent

23
00:01:10,520 --> 00:01:14,090
a big base 10 number, we want to
keep those numbers really small so

24
00:01:14,090 --> 00:01:18,480
that we don't have so much binary and
it just becomes really hard to look at.

25
00:01:18,480 --> 00:01:21,400
Now, you can return to this
series of constants as a good

26
00:01:21,400 --> 00:01:24,810
reminder of how we can count
using binary or hexadecimal,

27
00:01:24,810 --> 00:01:27,540
and you can see how this
goes up by one each time.
